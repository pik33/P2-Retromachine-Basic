00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic033.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 33
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 6C 31 A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 49 93 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 48 91 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 49 91 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 92 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 90 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 48 91 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 49 93 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec D0 1B 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed C0 18 04 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 D8 92 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 A0 0B 04 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 F8 06 04 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 08 74 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 E0 12 04 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 70 A5 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 20 CD 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa D8 CA 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb B0 DC 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc F8 37 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     1C 42 B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     B0 56 B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10192
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10192
00840     52 00 00 FF 
00844     E0 E4 05 F1 | 	add	objptr, ##42208
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     E0 E4 85 F1 | 	sub	objptr, ##42208
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     3C E5 05 F1 | 	add	objptr, ##41276
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     3C E5 85 F1 | 	sub	objptr, ##41276
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     F0 59 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     44 61 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     3C 5B B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     3C E5 05 F1 | 	add	objptr, ##41276
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     3C E5 85 F1 | 	sub	objptr, ##41276
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     52 00 00 FF 
00980     A4 E4 05 F1 | 	add	objptr, ##42148
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     D4 E5 85 F1 | 	sub	objptr, ##36308
009c0     00 59 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     F4 26 B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     E0 E4 05 F1 | 	add	objptr, ##42208
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     E0 E4 85 F1 | 	sub	objptr, ##42208
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     C8 E4 05 F1 | 	add	objptr, ##42184
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     C8 E4 85 F1 | 	sub	objptr, ##42184
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     EC 24 B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     8C 24 B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     E8 E4 05 F1 | 	add	objptr, ##42216
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     52 00 00 FF 
00b08     AA E4 85 F1 | 	sub	objptr, ##42154
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     52 00 00 FF 
00b74     AC E4 05 F1 | 	add	objptr, ##42156
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     52 00 00 FF 
00b88     AA E4 85 F1 | 	sub	objptr, ##42154
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     1C 24 B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     64 3C B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     E8 E4 05 F1 | 	add	objptr, ##42216
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     E8 E4 85 F1 | 	sub	objptr, ##42216
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     80 3F B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     3C E5 05 A1 |  if_e	add	objptr, ##41276
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     3C E5 85 A1 |  if_e	sub	objptr, ##41276
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     2C 56 B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     80 5D B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     7C 57 B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     B1 01 00 FF 
00ccc     D2 50 06 F6 | 	mov	local22, ##@LR__5397
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     B0 22 B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     5C 7C B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     6C 5A B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     C8 E4 05 F1 | 	add	objptr, ##42184
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     C8 E4 85 F1 | 	sub	objptr, ##42184
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     D0 43 B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     00 46 B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     3C E5 05 F1 | 	add	objptr, ##41276
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     3C E5 85 F1 | 	sub	objptr, ##41276
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     B8 54 B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     0C 5C B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     08 56 B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     4C 21 B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     40 3B B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     34 3B B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     C4 3A B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     90 3A B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     B0 3A B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     A0 3A B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     F0 1F B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     9C 1F B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     6C 1F B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     E8 E4 05 F1 | 	add	objptr, ##42216
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     52 00 00 FF 
0101c     AA E4 85 F1 | 	sub	objptr, ##42154
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     52 00 00 FF 
0108c     AC E4 05 F1 | 	add	objptr, ##42156
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     52 00 00 FF 
010a0     AA E4 85 F1 | 	sub	objptr, ##42154
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     04 1F B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     4C 37 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     E8 E4 05 F1 | 	add	objptr, ##42216
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     E8 E4 85 F1 | 	sub	objptr, ##42216
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     28 38 B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     EC 1D B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     98 1D B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     68 1D B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     E8 E4 05 F1 | 	add	objptr, ##42216
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     52 00 00 FF 
01220     AA E4 85 F1 | 	sub	objptr, ##42154
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     52 00 00 FF 
01290     AC E4 05 F1 | 	add	objptr, ##42156
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     52 00 00 FF 
012a4     AA E4 85 F1 | 	sub	objptr, ##42154
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     00 1D B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     48 35 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     E8 E4 05 F1 | 	add	objptr, ##42216
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     E8 E4 85 F1 | 	sub	objptr, ##42216
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     B1 01 00 FF 
01328     D3 50 06 F6 | 	mov	local22, ##@LR__5398
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     52 00 00 FF 
01354     8E E4 05 F1 | 	add	objptr, ##42126
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     CC E4 85 F1 | 	sub	objptr, ##42188
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     CC E4 05 C1 |  if_b	add	objptr, ##42188
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     CC E4 85 C1 |  if_b	sub	objptr, ##42188
0137c     52 00 00 FF 
01380     CC E4 05 F1 | 	add	objptr, ##42188
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     CC E4 85 F1 | 	sub	objptr, ##42188
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     70 36 B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     52 00 00 FF 
013b4     8E E4 05 F1 | 	add	objptr, ##42126
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     CC E4 85 F1 | 	sub	objptr, ##42188
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     CC E4 05 31 |  if_ae	add	objptr, ##42188
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     CC E4 85 31 |  if_ae	sub	objptr, ##42188
013dc     52 00 00 FF 
013e0     CC E4 05 F1 | 	add	objptr, ##42188
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     CC E4 85 F1 | 	sub	objptr, ##42188
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     10 36 B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     52 00 00 FF 
01414     94 E4 05 F1 | 	add	objptr, ##42132
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1B 00 00 FF 
01420     9C E4 85 F1 | 	sub	objptr, ##13980
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1B 00 00 CF 
01448     9C E4 05 C1 |  if_b	add	objptr, ##13980
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     D0 E4 85 C1 |  if_b	sub	objptr, ##42192
01458     52 00 00 FF 
0145c     D0 E4 05 F1 | 	add	objptr, ##42192
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     D0 E4 85 F1 | 	sub	objptr, ##42192
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     64 35 B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     52 00 00 FF 
01490     94 E4 05 F1 | 	add	objptr, ##42132
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     D0 E4 85 F1 | 	sub	objptr, ##42192
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     D0 E4 05 31 |  if_ae	add	objptr, ##42192
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     D0 E4 85 31 |  if_ae	sub	objptr, ##42192
014b8     52 00 00 FF 
014bc     D0 E4 05 F1 | 	add	objptr, ##42192
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     D0 E4 85 F1 | 	sub	objptr, ##42192
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     08 35 B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     C8 E4 05 F1 | 	add	objptr, ##42184
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     C8 E4 85 F1 | 	sub	objptr, ##42184
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     54 23 B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     44 23 B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     52 00 00 FF 
01544     4B E4 05 F1 | 	add	objptr, ##42059
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     94 E4 85 F1 | 	sub	objptr, ##42132
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     C0 54 B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     94 E4 05 F1 | 	add	objptr, ##42132
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     94 E4 85 F1 | 	sub	objptr, ##42132
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     98 54 B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     94 E4 05 F1 | 	add	objptr, ##42132
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     94 E4 85 F1 | 	sub	objptr, ##42132
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     70 54 B2 FD | 	call	#__system___waitms
015b8     52 00 00 FF 
015bc     94 E4 05 F1 | 	add	objptr, ##42132
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     52 00 00 FF 
015d0     94 E4 85 F1 | 	sub	objptr, ##42132
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     08 4A 05 F6 | 	mov	COUNT_, #8
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     48 E5 05 F1 | 	add	objptr, ##41800
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     AD F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10413
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     50 E5 85 F1 | 	sub	objptr, ##41808
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     80 49 B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     6C 01 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     D0 49 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     C0 49 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     FD 2C 02 F6 | 	mov	local04, result1
0167c     14 13 02 F6 | 	mov	arg01, local02
01680     02 14 06 F6 | 	mov	arg02, #2
01684     B0 49 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01688     FD 2E 02 F6 | 	mov	local05, result1
0168c     14 13 02 F6 | 	mov	arg01, local02
01690     00 14 06 F6 | 	mov	arg02, #0
01694     F0 49 B2 FD | 	call	#_usbnew_spin2_hidpad_hat
01698     FD 30 02 F6 | 	mov	local06, result1
0169c     14 13 02 F6 | 	mov	arg01, local02
016a0     03 14 06 F6 | 	mov	arg02, #3
016a4     90 49 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016a8     FD 32 02 F6 | 	mov	local07, result1
016ac     14 13 02 F6 | 	mov	arg01, local02
016b0     04 14 06 F6 | 	mov	arg02, #4
016b4     80 49 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016b8     FD 34 02 F6 | 	mov	local08, result1
016bc     14 13 02 F6 | 	mov	arg01, local02
016c0     05 14 06 F6 | 	mov	arg02, #5
016c4     70 49 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016c8     FD 14 02 F6 | 	mov	arg02, result1
016cc     13 FB 01 F6 | 	mov	result1, local01
016d0     02 FA 65 F0 | 	shl	result1, #2
016d4     51 00 00 FF 
016d8     58 E5 05 F1 | 	add	objptr, ##41816
016dc     F2 FA 01 F1 | 	add	result1, objptr
016e0     FD 2A 62 FC | 	wrlong	local03, result1
016e4     13 FB 01 F6 | 	mov	result1, local01
016e8     02 FA 65 F0 | 	shl	result1, #2
016ec     1C E4 05 F1 | 	add	objptr, #28
016f0     F2 FA 01 F1 | 	add	result1, objptr
016f4     FD 2C 62 FC | 	wrlong	local04, result1
016f8     13 FB 01 F6 | 	mov	result1, local01
016fc     02 FA 65 F0 | 	shl	result1, #2
01700     1C E4 05 F1 | 	add	objptr, #28
01704     F2 FA 01 F1 | 	add	result1, objptr
01708     FD 2E 62 FC | 	wrlong	local05, result1
0170c     13 2F 02 F6 | 	mov	local05, local01
01710     02 2E 66 F0 | 	shl	local05, #2
01714     1C E4 05 F1 | 	add	objptr, #28
01718     F2 2E 02 F1 | 	add	local05, objptr
0171c     17 31 62 FC | 	wrlong	local06, local05
01720     13 31 02 F6 | 	mov	local06, local01
01724     02 30 66 F0 | 	shl	local06, #2
01728     1C E4 05 F1 | 	add	objptr, #28
0172c     F2 30 02 F1 | 	add	local06, objptr
01730     18 33 62 FC | 	wrlong	local07, local06
01734     13 33 02 F6 | 	mov	local07, local01
01738     02 32 66 F0 | 	shl	local07, #2
0173c     1C E4 05 F1 | 	add	objptr, #28
01740     F2 32 02 F1 | 	add	local07, objptr
01744     19 35 62 FC | 	wrlong	local08, local07
01748     13 35 02 F6 | 	mov	local08, local01
0174c     02 34 66 F0 | 	shl	local08, #2
01750     1C E4 05 F1 | 	add	objptr, #28
01754     F2 34 02 F1 | 	add	local08, objptr
01758     1A 15 62 FC | 	wrlong	arg02, local08
0175c     60 00 00 FF 
01760     00 2A 06 F1 | 	add	local03, ##49152
01764     0F 2A 46 F0 | 	shr	local03, #15
01768     01 34 06 F6 | 	mov	local08, #1
0176c     15 35 02 F1 | 	add	local08, local03
01770     60 00 00 FF 
01774     00 2C 06 F1 | 	add	local04, ##49152
01778     0F 2C 46 F0 | 	shr	local04, #15
0177c     01 32 06 F6 | 	mov	local07, #1
01780     16 33 02 F1 | 	add	local07, local04
01784     13 31 02 F6 | 	mov	local06, local01
01788     02 30 66 F0 | 	shl	local06, #2
0178c     1C E4 05 F1 | 	add	objptr, #28
01790     F2 30 02 F1 | 	add	local06, objptr
01794     02 32 66 F0 | 	shl	local07, #2
01798     19 35 02 F1 | 	add	local08, local07
0179c     18 35 62 FC | 	wrlong	local08, local06
017a0     13 35 02 F6 | 	mov	local08, local01
017a4     02 34 66 F0 | 	shl	local08, #2
017a8     1C E4 05 F1 | 	add	objptr, #28
017ac     F2 34 02 F1 | 	add	local08, objptr
017b0     14 13 02 F6 | 	mov	arg01, local02
017b4     52 00 00 FF 
017b8     38 E4 85 F1 | 	sub	objptr, ##42040
017bc     44 48 B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
017c0     1A FB 61 FC | 	wrlong	result1, local08
017c4     01 26 06 F1 | 	add	local01, #1
017c8                 | LR__0061
017c8     01 28 06 F1 | 	add	local02, #1
017cc     07 28 16 F2 | 	cmp	local02, #7 wc
017d0     78 FE 9F CD |  if_b	jmp	#LR__0060
017d4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
017d8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
017d8                 | LR__0062
017d8     07 26 16 F2 | 	cmp	local01, #7 wc
017dc     3C 00 90 3D |  if_ae	jmp	#LR__0064
017e0     13 35 02 F6 | 	mov	local08, local01
017e4     02 34 66 F0 | 	shl	local08, #2
017e8     52 00 00 FF 
017ec     1C E4 05 F1 | 	add	objptr, ##42012
017f0     F2 34 02 F1 | 	add	local08, objptr
017f4     1A 01 68 FC | 	wrlong	#0, local08
017f8     13 35 02 F6 | 	mov	local08, local01
017fc     02 34 66 F0 | 	shl	local08, #2
01800     1C E4 05 F1 | 	add	objptr, #28
01804     F2 34 02 F1 | 	add	local08, objptr
01808     1A 01 68 FC | 	wrlong	#0, local08
0180c     01 26 06 F1 | 	add	local01, #1
01810     52 00 00 FF 
01814     38 E4 85 F1 | 	sub	objptr, ##42040
01818     BC FF 9F FD | 	jmp	#LR__0062
0181c                 | LR__0063
0181c                 | LR__0064
0181c     A7 F0 03 F6 | 	mov	ptra, fp
01820     B2 00 A0 FD | 	call	#popregs_
01824                 | _gethdi_ret
01824     2D 00 64 FD | 	ret
01828                 | 
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '
01828                 | ' '                                     LINE INTERPRETER/TOKENIZER
01828                 | ' '
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' 
01828                 | ' sub interpret
01828                 | _interpret
01828     35 4A 05 F6 | 	mov	COUNT_, #53
0182c     A8 00 A0 FD | 	call	#pushregs_
01830     01 00 00 FF 
01834     84 F0 07 F1 | 	add	ptra, ##644
01838     37 00 00 FF 
0183c     1C E4 05 F1 | 	add	objptr, ##28188
01840     F2 12 02 FB | 	rdlong	arg01, objptr
01844     37 00 00 FF 
01848     1C E4 85 F1 | 	sub	objptr, ##28188
0184c     F0 73 B2 FD | 	call	#__system__RTrim_S
01850     FD 12 02 F6 | 	mov	arg01, result1
01854     28 73 B2 FD | 	call	#__system__LTrim_S
01858     37 00 00 FF 
0185c     20 E4 05 F1 | 	add	objptr, ##28192
01860     F2 FA 61 FC | 	wrlong	result1, objptr
01864     04 E4 05 F1 | 	add	objptr, #4
01868     FF FF FF FF 
0186c     F2 FE 6B FC | 	wrlong	##-1, objptr
01870     1B 00 00 FF 
01874     8C E4 05 F1 | 	add	objptr, ##13964
01878     F2 00 68 FC | 	wrlong	#0, objptr
0187c     08 00 00 FF 
01880     34 E4 85 F1 | 	sub	objptr, ##4148
01884     F2 00 68 FC | 	wrlong	#0, objptr
01888     4A 00 00 FF 
0188c     7C E4 85 F1 | 	sub	objptr, ##38012
01890     00 26 06 F6 | 	mov	local01, #0
01894                 | LR__0070
01894                 | ' 
01894                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
01894                 | ' 
01894                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
01894                 | ' 
01894                 | ' 108 
01894                 | ' for i=0 to 125: separators(i)=0 :next i
01894     00 28 06 F6 | 	mov	local02, #0
01898     38 4E 05 F1 | 	add	fp, #56
0189c     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
018a0                 | LR__0071
018a0     14 2B 02 F6 | 	mov	local03, local02
018a4     02 2A 66 F0 | 	shl	local03, #2
018a8     A7 2A 02 F1 | 	add	local03, fp
018ac     15 01 68 FC | 	wrlong	#0, local03
018b0     01 28 06 F1 | 	add	local02, #1
018b4     7E 28 56 F2 | 	cmps	local02, #126 wc
018b8     E4 FF 9F CD |  if_b	jmp	#LR__0071
018bc                 | LR__0072
018bc     38 4E 85 F1 | 	sub	fp, #56
018c0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
018c0     00 28 06 F6 | 	mov	local02, #0
018c4     35 00 00 FF 
018c8     0C E4 05 F1 | 	add	objptr, ##27148
018cc     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
018d0                 | LR__0073
018d0     14 2D 02 F6 | 	mov	local04, local02
018d4     03 2C 66 F0 | 	shl	local04, #3
018d8     F2 2C 02 F1 | 	add	local04, objptr
018dc     B1 01 00 FF 
018e0     D4 16 06 F6 | 	mov	arg03, ##@LR__5399
018e4     16 17 62 FC | 	wrlong	arg03, local04
018e8     14 2D 02 F6 | 	mov	local04, local02
018ec     03 2C 66 F0 | 	shl	local04, #3
018f0     F2 2E 02 F6 | 	mov	local05, objptr
018f4     F2 2C 02 F1 | 	add	local04, objptr
018f8     00 30 06 F6 | 	mov	local06, #0
018fc     04 2C 06 F1 | 	add	local04, #4
01900     16 01 68 FC | 	wrlong	#0, local04
01904     01 28 06 F1 | 	add	local02, #1
01908     7E 28 56 F2 | 	cmps	local02, #126 wc
0190c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01910                 | LR__0074
01910     02 00 00 FF 
01914     10 E4 05 F1 | 	add	objptr, ##1040
01918     F2 12 02 FB | 	rdlong	arg01, objptr
0191c     37 00 00 FF 
01920     1C E4 85 F1 | 	sub	objptr, ##28188
01924     18 73 B2 FD | 	call	#__system__RTrim_S
01928     FD 12 02 F6 | 	mov	arg01, result1
0192c     50 72 B2 FD | 	call	#__system__LTrim_S
01930     37 00 00 FF 
01934     1C E4 05 F1 | 	add	objptr, ##28188
01938     F2 FA 61 FC | 	wrlong	result1, objptr
0193c     B1 01 00 FF 
01940     D5 2C 06 F6 | 	mov	local04, ##@LR__5400
01944     1B 00 00 FF 
01948     D0 E4 05 F1 | 	add	objptr, ##14032
0194c     F2 2C 62 FC | 	wrlong	local04, objptr
01950     1B 00 00 FF 
01954     D0 E4 85 F1 | 	sub	objptr, ##14032
01958     F2 12 02 FB | 	rdlong	arg01, objptr
0195c     37 00 00 FF 
01960     1C E4 85 F1 | 	sub	objptr, ##28188
01964     09 33 02 F6 | 	mov	local07, arg01
01968     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0196c                 | LR__0075
0196c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01970     01 32 06 51 |  if_ne	add	local07, #1
01974     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01978                 | LR__0076
01978     09 33 8A F1 | 	sub	local07, arg01 wz
0197c     52 00 00 FF 
01980     F0 E4 05 F1 | 	add	objptr, ##42224
01984     F2 32 62 FC | 	wrlong	local07, objptr
01988                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
01988     52 00 00 FF 
0198c     F0 E4 85 F1 | 	sub	objptr, ##42224
01990     DC 29 90 AD |  if_e	jmp	#LR__0209
01994     00 34 06 F6 | 	mov	local08, #0
01998                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
01998                 | ' for i=1 to len(line$)
01998     01 28 06 F6 | 	mov	local02, #1
0199c     37 00 00 FF 
019a0     1C E4 05 F1 | 	add	objptr, ##28188
019a4     F2 12 02 FB | 	rdlong	arg01, objptr
019a8     37 00 00 FF 
019ac     1C E4 85 F1 | 	sub	objptr, ##28188
019b0     09 33 02 F6 | 	mov	local07, arg01
019b4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
019b8                 | LR__0077
019b8     19 FB C9 FA | 	rdbyte	result1, local07 wz
019bc     01 32 06 51 |  if_ne	add	local07, #1
019c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
019c4                 | LR__0078
019c4     09 33 82 F1 | 	sub	local07, arg01
019c8     19 37 02 F6 | 	mov	local09, local07
019cc     01 36 06 F1 | 	add	local09, #1
019d0                 | LR__0079
019d0     1B 29 52 F2 | 	cmps	local02, local09 wc
019d4     AC 00 90 3D |  if_ae	jmp	#LR__0081
019d8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
019d8     37 00 00 FF 
019dc     1C E4 05 F1 | 	add	objptr, ##28188
019e0     F2 12 02 FB | 	rdlong	arg01, objptr
019e4     37 00 00 FF 
019e8     1C E4 85 F1 | 	sub	objptr, ##28188
019ec     14 15 02 F6 | 	mov	arg02, local02
019f0     01 16 06 F6 | 	mov	arg03, #1
019f4     D0 6E B2 FD | 	call	#__system__Mid_S
019f8     FD 12 02 F6 | 	mov	arg01, result1
019fc     B1 01 00 FF 
01a00     D6 14 06 F6 | 	mov	arg02, ##@LR__5401
01a04     54 4D B2 FD | 	call	#__system___string_cmp
01a08     00 FA 0D F2 | 	cmp	result1, #0 wz
01a0c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01a10     01 34 06 A6 |  if_e	mov	local08, #1
01a14     3C 00 90 AD |  if_e	jmp	#LR__0080
01a18     37 00 00 FF 
01a1c     1C E4 05 F1 | 	add	objptr, ##28188
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     37 00 00 FF 
01a28     1C E4 85 F1 | 	sub	objptr, ##28188
01a2c     14 15 02 F6 | 	mov	arg02, local02
01a30     01 16 06 F6 | 	mov	arg03, #1
01a34     90 6E B2 FD | 	call	#__system__Mid_S
01a38     FD 12 02 F6 | 	mov	arg01, result1
01a3c     B1 01 00 FF 
01a40     D8 14 06 F6 | 	mov	arg02, ##@LR__5402
01a44     14 4D B2 FD | 	call	#__system___string_cmp
01a48     00 FA 0D F2 | 	cmp	result1, #0 wz
01a4c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01a50     00 34 06 A6 |  if_e	mov	local08, #0
01a54                 | LR__0080
01a54     14 2D 02 F6 | 	mov	local04, local02
01a58     03 2C 66 F0 | 	shl	local04, #3
01a5c     35 00 00 FF 
01a60     0C E4 05 F1 | 	add	objptr, ##27148
01a64     F2 2E 02 F6 | 	mov	local05, objptr
01a68     F2 2C 02 F1 | 	add	local04, objptr
01a6c     04 2C 06 F1 | 	add	local04, #4
01a70     16 35 62 FC | 	wrlong	local08, local04
01a74     01 28 06 F1 | 	add	local02, #1
01a78     35 00 00 FF 
01a7c     0C E4 85 F1 | 	sub	objptr, ##27148
01a80     4C FF 9F FD | 	jmp	#LR__0079
01a84                 | LR__0081
01a84     01 28 06 F6 | 	mov	local02, #1
01a88                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01a88                 | LR__0082
01a88     37 00 00 FF 
01a8c     1C E4 05 F1 | 	add	objptr, ##28188
01a90     F2 12 02 FB | 	rdlong	arg01, objptr
01a94     37 00 00 FF 
01a98     1C E4 85 F1 | 	sub	objptr, ##28188
01a9c     14 15 02 F6 | 	mov	arg02, local02
01aa0     01 16 06 F6 | 	mov	arg03, #1
01aa4     20 6E B2 FD | 	call	#__system__Mid_S
01aa8     FD 12 02 F6 | 	mov	arg01, result1
01aac     B1 01 00 FF 
01ab0     DA 38 06 F6 | 	mov	local10, ##@LR__5403
01ab4     1C 15 02 F6 | 	mov	arg02, local10
01ab8     A0 4C B2 FD | 	call	#__system___string_cmp
01abc     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac0     34 00 90 5D |  if_ne	jmp	#LR__0083
01ac4     14 2F 02 F6 | 	mov	local05, local02
01ac8     03 2E 66 F0 | 	shl	local05, #3
01acc     35 00 00 FF 
01ad0     0C E4 05 F1 | 	add	objptr, ##27148
01ad4     F2 30 02 F6 | 	mov	local06, objptr
01ad8     F2 2E 02 F1 | 	add	local05, objptr
01adc     04 2E 06 F1 | 	add	local05, #4
01ae0     17 3B 02 FB | 	rdlong	local11, local05
01ae4     04 2E 86 F1 | 	sub	local05, #4
01ae8     1D 3D 0A F6 | 	mov	local12, local11 wz
01aec     35 00 00 FF 
01af0     0C E4 85 F1 | 	sub	objptr, ##27148
01af4     24 00 90 AD |  if_e	jmp	#LR__0084
01af8                 | LR__0083
01af8     52 00 00 FF 
01afc     F0 E4 05 F1 | 	add	objptr, ##42224
01b00     F2 3E 02 FB | 	rdlong	local13, objptr
01b04     52 00 00 FF 
01b08     F0 E4 85 F1 | 	sub	objptr, ##42224
01b0c     1F 41 02 F6 | 	mov	local14, local13
01b10     20 29 52 F2 | 	cmps	local02, local14 wc
01b14     01 28 06 C1 |  if_b	add	local02, #1
01b18     6C FF 9F CD |  if_b	jmp	#LR__0082
01b1c                 | LR__0084
01b1c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01b1c     52 00 00 FF 
01b20     F0 E4 05 F1 | 	add	objptr, ##42224
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     52 00 00 FF 
01b2c     F0 E4 85 F1 | 	sub	objptr, ##42224
01b30     16 29 52 F2 | 	cmps	local02, local04 wc
01b34     A8 00 90 3D |  if_ae	jmp	#LR__0087
01b38     37 00 00 FF 
01b3c     1C E4 05 F1 | 	add	objptr, ##28188
01b40     F2 30 02 FB | 	rdlong	local06, objptr
01b44     37 00 00 FF 
01b48     1C E4 85 F1 | 	sub	objptr, ##28188
01b4c     18 13 02 F6 | 	mov	arg01, local06
01b50     09 33 02 F6 | 	mov	local07, arg01
01b54     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01b58                 | LR__0085
01b58     19 FB C9 FA | 	rdbyte	result1, local07 wz
01b5c     01 32 06 51 |  if_ne	add	local07, #1
01b60     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01b64                 | LR__0086
01b64     09 33 82 F1 | 	sub	local07, arg01
01b68     19 2F 02 F6 | 	mov	local05, local07
01b6c     17 15 02 F6 | 	mov	arg02, local05
01b70     14 15 82 F1 | 	sub	arg02, local02
01b74     18 13 02 F6 | 	mov	arg01, local06
01b78     BC 6C B2 FD | 	call	#__system__Right_S
01b7c     FD 12 02 F6 | 	mov	arg01, result1
01b80     BC 70 B2 FD | 	call	#__system__RTrim_S
01b84     FD 12 02 F6 | 	mov	arg01, result1
01b88     F4 6F B2 FD | 	call	#__system__LTrim_S
01b8c     52 00 00 FF 
01b90     F4 E4 05 F1 | 	add	objptr, ##42228
01b94     F2 FA 61 FC | 	wrlong	result1, objptr
01b98     1B 00 00 FF 
01b9c     D8 E4 85 F1 | 	sub	objptr, ##14040
01ba0     F2 12 02 FB | 	rdlong	arg01, objptr
01ba4     37 00 00 FF 
01ba8     1C E4 85 F1 | 	sub	objptr, ##28188
01bac     01 28 86 F1 | 	sub	local02, #1
01bb0     14 15 02 F6 | 	mov	arg02, local02
01bb4     F8 6B B2 FD | 	call	#__system__Left_S
01bb8     FD 12 02 F6 | 	mov	arg01, result1
01bbc     80 70 B2 FD | 	call	#__system__RTrim_S
01bc0     FD 12 02 F6 | 	mov	arg01, result1
01bc4     B8 6F B2 FD | 	call	#__system__LTrim_S
01bc8     37 00 00 FF 
01bcc     1C E4 05 F1 | 	add	objptr, ##28188
01bd0     F2 FA 61 FC | 	wrlong	result1, objptr
01bd4     37 00 00 FF 
01bd8     1C E4 85 F1 | 	sub	objptr, ##28188
01bdc     1C 00 90 FD | 	jmp	#LR__0088
01be0                 | LR__0087
01be0     B1 01 00 FF 
01be4     DC 2C 06 F6 | 	mov	local04, ##@LR__5404
01be8     52 00 00 FF 
01bec     F4 E4 05 F1 | 	add	objptr, ##42228
01bf0     F2 2C 62 FC | 	wrlong	local04, objptr
01bf4     52 00 00 FF 
01bf8     F4 E4 85 F1 | 	sub	objptr, ##42228
01bfc                 | LR__0088
01bfc                 | ' 
01bfc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01bfc     37 00 00 FF 
01c00     24 E4 05 F1 | 	add	objptr, ##28196
01c04     F2 2C 02 FB | 	rdlong	local04, objptr
01c08     37 00 00 FF 
01c0c     24 E4 85 F1 | 	sub	objptr, ##28196
01c10     FF FF 7F FF 
01c14     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c18     40 00 90 5D |  if_ne	jmp	#LR__0089
01c1c     52 00 00 FF 
01c20     F4 E4 05 F1 | 	add	objptr, ##42228
01c24     F2 12 02 FB | 	rdlong	arg01, objptr
01c28     52 00 00 FF 
01c2c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c30     B1 01 00 FF 
01c34     DD 30 06 F6 | 	mov	local06, ##@LR__5405
01c38     18 15 02 F6 | 	mov	arg02, local06
01c3c     1C 4B B2 FD | 	call	#__system___string_cmp
01c40     00 FA 0D F2 | 	cmp	result1, #0 wz
01c44     37 00 00 5F 
01c48     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c4c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01c50     37 00 00 5F 
01c54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c58     08 01 90 5D |  if_ne	jmp	#LR__0093
01c5c                 | LR__0089
01c5c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01c5c     37 00 00 FF 
01c60     24 E4 05 F1 | 	add	objptr, ##28196
01c64     F2 2C 02 FB | 	rdlong	local04, objptr
01c68     37 00 00 FF 
01c6c     24 E4 85 F1 | 	sub	objptr, ##28196
01c70     FF FF 7F FF 
01c74     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c78     3C 00 90 5D |  if_ne	jmp	#LR__0090
01c7c     52 00 00 FF 
01c80     F4 E4 05 F1 | 	add	objptr, ##42228
01c84     F2 12 02 FB | 	rdlong	arg01, objptr
01c88     52 00 00 FF 
01c8c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c90     B1 01 00 FF 
01c94     DE 14 06 F6 | 	mov	arg02, ##@LR__5406
01c98     C0 4A B2 FD | 	call	#__system___string_cmp
01c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
01ca0     37 00 00 AF 
01ca4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01ca8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01cac     37 00 00 AF 
01cb0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01cb4     AC 00 90 AD |  if_e	jmp	#LR__0093
01cb8                 | LR__0090
01cb8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01cb8     37 00 00 FF 
01cbc     24 E4 05 F1 | 	add	objptr, ##28196
01cc0     F2 2C 02 FB | 	rdlong	local04, objptr
01cc4     37 00 00 FF 
01cc8     24 E4 85 F1 | 	sub	objptr, ##28196
01ccc     04 2C 0E F2 | 	cmp	local04, #4 wz
01cd0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01cd4     52 00 00 FF 
01cd8     F4 E4 05 F1 | 	add	objptr, ##42228
01cdc     F2 12 02 FB | 	rdlong	arg01, objptr
01ce0     52 00 00 FF 
01ce4     F4 E4 85 F1 | 	sub	objptr, ##42228
01ce8     B1 01 00 FF 
01cec     DF 14 06 F6 | 	mov	arg02, ##@LR__5407
01cf0     68 4A B2 FD | 	call	#__system___string_cmp
01cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
01cf8     37 00 00 5F 
01cfc     24 E4 05 51 |  if_ne	add	objptr, ##28196
01d00     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01d04     37 00 00 5F 
01d08     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01d0c     54 00 90 5D |  if_ne	jmp	#LR__0093
01d10                 | LR__0091
01d10                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01d10     37 00 00 FF 
01d14     24 E4 05 F1 | 	add	objptr, ##28196
01d18     F2 2C 02 FB | 	rdlong	local04, objptr
01d1c     37 00 00 FF 
01d20     24 E4 85 F1 | 	sub	objptr, ##28196
01d24     04 2C 0E F2 | 	cmp	local04, #4 wz
01d28     38 00 90 5D |  if_ne	jmp	#LR__0092
01d2c     52 00 00 FF 
01d30     F4 E4 05 F1 | 	add	objptr, ##42228
01d34     F2 12 02 FB | 	rdlong	arg01, objptr
01d38     52 00 00 FF 
01d3c     F4 E4 85 F1 | 	sub	objptr, ##42228
01d40     B1 01 00 FF 
01d44     E0 14 06 F6 | 	mov	arg02, ##@LR__5408
01d48     10 4A B2 FD | 	call	#__system___string_cmp
01d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
01d50     37 00 00 AF 
01d54     24 E4 05 A1 |  if_e	add	objptr, ##28196
01d58     F2 04 68 AC |  if_e	wrlong	#2, objptr
01d5c     37 00 00 AF 
01d60     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01d64                 | LR__0092
01d64                 | LR__0093
01d64     38 4E 05 F1 | 	add	fp, #56
01d68     A7 00 68 FC | 	wrlong	#0, fp
01d6c     38 4E 85 F1 | 	sub	fp, #56
01d70     00 28 06 F6 | 	mov	local02, #0
01d74     01 42 06 F6 | 	mov	local15, #1
01d78                 | ' 
01d78                 | ' ' 1b: find separators
01d78                 | ' 
01d78                 | ' 107
01d78                 | ' separators(0)=0
01d78                 | ' i=0: j=1
01d78                 | ' do: 
01d78                 | LR__0094
01d78     01 28 06 F1 | 	add	local02, #1
01d7c     37 00 00 FF 
01d80     1C E4 05 F1 | 	add	objptr, ##28188
01d84     F2 12 02 FB | 	rdlong	arg01, objptr
01d88     37 00 00 FF 
01d8c     1C E4 85 F1 | 	sub	objptr, ##28188
01d90     14 15 02 F6 | 	mov	arg02, local02
01d94     01 16 06 F6 | 	mov	arg03, #1
01d98     2C 6B B2 FD | 	call	#__system__Mid_S
01d9c     FD 44 02 F6 | 	mov	local16, result1
01da0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01da0     22 13 02 F6 | 	mov	arg01, local16
01da4     30 2E B0 FD | 	call	#_isseparator
01da8     00 FA 0D F2 | 	cmp	result1, #0 wz
01dac     1C 00 90 AD |  if_e	jmp	#LR__0095
01db0     21 2B 02 F6 | 	mov	local03, local15
01db4     02 2A 66 F0 | 	shl	local03, #2
01db8     38 4E 05 F1 | 	add	fp, #56
01dbc     A7 2A 02 F1 | 	add	local03, fp
01dc0     15 29 62 FC | 	wrlong	local02, local03
01dc4     01 42 06 F1 | 	add	local15, #1
01dc8     38 4E 85 F1 | 	sub	fp, #56
01dcc                 | LR__0095
01dcc     52 00 00 FF 
01dd0     F0 E4 05 F1 | 	add	objptr, ##42224
01dd4     F2 2C 02 FB | 	rdlong	local04, objptr
01dd8     52 00 00 FF 
01ddc     F0 E4 85 F1 | 	sub	objptr, ##42224
01de0     16 29 5A F2 | 	cmps	local02, local04 wcz
01de4     90 FF 9F ED |  if_be	jmp	#LR__0094
01de8     21 2B 02 F6 | 	mov	local03, local15
01dec     02 2A 66 F0 | 	shl	local03, #2
01df0     38 4E 05 F1 | 	add	fp, #56
01df4     A7 38 02 F6 | 	mov	local10, fp
01df8     A7 2A 02 F1 | 	add	local03, fp
01dfc     15 29 62 FC | 	wrlong	local02, local03
01e00     00 46 06 F6 | 	mov	local17, #0
01e04                 | ' for i=0 to j-1 
01e04     00 28 06 F6 | 	mov	local02, #0
01e08     21 49 02 F6 | 	mov	local18, local15
01e0c     38 4E 85 F1 | 	sub	fp, #56
01e10                 | LR__0096
01e10     24 29 52 F2 | 	cmps	local02, local18 wc
01e14     50 01 90 3D |  if_ae	jmp	#LR__0100
01e18     14 2B 02 F6 | 	mov	local03, local02
01e1c     02 2A 66 F0 | 	shl	local03, #2
01e20     38 4E 05 F1 | 	add	fp, #56
01e24     A7 2A 02 F1 | 	add	local03, fp
01e28     15 2F 02 FB | 	rdlong	local05, local03
01e2c     52 00 00 FF 
01e30     FC E4 05 F1 | 	add	objptr, ##42236
01e34     F2 2E 62 FC | 	wrlong	local05, objptr
01e38     14 2B 02 F6 | 	mov	local03, local02
01e3c     01 2A 06 F1 | 	add	local03, #1
01e40     02 2A 66 F0 | 	shl	local03, #2
01e44     A7 38 02 F6 | 	mov	local10, fp
01e48     A7 2A 02 F1 | 	add	local03, fp
01e4c     15 2F 02 FB | 	rdlong	local05, local03
01e50     04 E4 05 F1 | 	add	objptr, #4
01e54     F2 2E 62 FC | 	wrlong	local05, objptr
01e58                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e58     04 E4 85 F1 | 	sub	objptr, #4
01e5c     F2 2C 02 FB | 	rdlong	local04, objptr
01e60     52 00 00 FF 
01e64     FC E4 85 F1 | 	sub	objptr, ##42236
01e68     01 2C 56 F2 | 	cmps	local04, #1 wc
01e6c     38 4E 85 F1 | 	sub	fp, #56
01e70     68 00 90 CD |  if_b	jmp	#LR__0098
01e74     37 00 00 FF 
01e78     1C E4 05 F1 | 	add	objptr, ##28188
01e7c     F2 12 02 FB | 	rdlong	arg01, objptr
01e80     1B 00 00 FF 
01e84     E0 E4 05 F1 | 	add	objptr, ##14048
01e88     F2 14 02 FB | 	rdlong	arg02, objptr
01e8c     52 00 00 FF 
01e90     FC E4 85 F1 | 	sub	objptr, ##42236
01e94     01 16 06 F6 | 	mov	arg03, #1
01e98     2C 6A B2 FD | 	call	#__system__Mid_S
01e9c     FD 4A 02 F6 | 	mov	local19, result1
01ea0     B1 01 00 FF 
01ea4     E1 14 06 F6 | 	mov	arg02, ##@LR__5409
01ea8     25 13 02 F6 | 	mov	arg01, local19
01eac     AC 48 B2 FD | 	call	#__system___string_cmp
01eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
01eb4     24 00 90 AD |  if_e	jmp	#LR__0097
01eb8     23 39 02 F6 | 	mov	local10, local17
01ebc     03 38 66 F0 | 	shl	local10, #3
01ec0     35 00 00 FF 
01ec4     0C E4 05 F1 | 	add	objptr, ##27148
01ec8     F2 38 02 F1 | 	add	local10, objptr
01ecc     1C 4B 62 FC | 	wrlong	local19, local10
01ed0     01 46 06 F1 | 	add	local17, #1
01ed4     35 00 00 FF 
01ed8     0C E4 85 F1 | 	sub	objptr, ##27148
01edc                 | LR__0097
01edc                 | LR__0098
01edc     37 00 00 FF 
01ee0     1C E4 05 F1 | 	add	objptr, ##28188
01ee4     F2 12 02 FB | 	rdlong	arg01, objptr
01ee8     1B 00 00 FF 
01eec     E0 E4 05 F1 | 	add	objptr, ##14048
01ef0     F2 14 02 FB | 	rdlong	arg02, objptr
01ef4     01 14 06 F1 | 	add	arg02, #1
01ef8     04 E4 05 F1 | 	add	objptr, #4
01efc     F2 16 02 FB | 	rdlong	arg03, objptr
01f00     04 E4 85 F1 | 	sub	objptr, #4
01f04     F2 3A 02 FB | 	rdlong	local11, objptr
01f08     52 00 00 FF 
01f0c     FC E4 85 F1 | 	sub	objptr, ##42236
01f10     1D 3D 02 F6 | 	mov	local12, local11
01f14     1E 17 82 F1 | 	sub	arg03, local12
01f18     01 16 86 F1 | 	sub	arg03, #1
01f1c     A8 69 B2 FD | 	call	#__system__Mid_S
01f20     FD 4A 02 F6 | 	mov	local19, result1
01f24                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f24     B1 01 00 FF 
01f28     E2 14 06 F6 | 	mov	arg02, ##@LR__5410
01f2c     25 13 02 F6 | 	mov	arg01, local19
01f30     28 48 B2 FD | 	call	#__system___string_cmp
01f34     00 FA 0D F2 | 	cmp	result1, #0 wz
01f38     24 00 90 AD |  if_e	jmp	#LR__0099
01f3c     23 39 02 F6 | 	mov	local10, local17
01f40     03 38 66 F0 | 	shl	local10, #3
01f44     35 00 00 FF 
01f48     0C E4 05 F1 | 	add	objptr, ##27148
01f4c     F2 38 02 F1 | 	add	local10, objptr
01f50     1C 4B 62 FC | 	wrlong	local19, local10
01f54     01 46 06 F1 | 	add	local17, #1
01f58     35 00 00 FF 
01f5c     0C E4 85 F1 | 	sub	objptr, ##27148
01f60                 | LR__0099
01f60     01 28 06 F1 | 	add	local02, #1
01f64     A8 FE 9F FD | 	jmp	#LR__0096
01f68                 | LR__0100
01f68                 | ' 
01f68                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01f68                 | ' 
01f68                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01f68     37 00 00 FF 
01f6c     24 E4 05 F1 | 	add	objptr, ##28196
01f70     F2 2C 0A FB | 	rdlong	local04, objptr wz
01f74     37 00 00 FF 
01f78     24 E4 85 F1 | 	sub	objptr, ##28196
01f7c     37 00 00 5F 
01f80     24 E4 05 51 |  if_ne	add	objptr, ##28196
01f84     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01f88     37 00 00 5F 
01f8c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01f90     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01f94     B8 00 90 5D |  if_ne	jmp	#LR__0103
01f98     35 00 00 FF 
01f9c     0C E4 05 F1 | 	add	objptr, ##27148
01fa0     F2 3A 02 FB | 	rdlong	local11, objptr
01fa4     35 00 00 FF 
01fa8     0C E4 85 F1 | 	sub	objptr, ##27148
01fac     1D 13 02 F6 | 	mov	arg01, local11
01fb0     C8 4E B0 FD | 	call	#_isdec
01fb4     FD 3C 02 F6 | 	mov	local12, result1
01fb8     1E 31 22 F6 | 	not	local06, local12
01fbc     00 30 0E F2 | 	cmp	local06, #0 wz
01fc0     8C 00 90 AD |  if_e	jmp	#LR__0103
01fc4     23 29 02 F6 | 	mov	local02, local17
01fc8     35 00 00 FF 
01fcc     0C E4 05 F1 | 	add	objptr, ##27148
01fd0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01fd4                 | LR__0101
01fd4     14 2F 02 F6 | 	mov	local05, local02
01fd8     01 2E 86 F1 | 	sub	local05, #1
01fdc     03 2E 66 F0 | 	shl	local05, #3
01fe0     F2 2E 02 F1 | 	add	local05, objptr
01fe4     17 2D 02 FB | 	rdlong	local04, local05
01fe8     14 31 02 F6 | 	mov	local06, local02
01fec     01 30 86 F1 | 	sub	local06, #1
01ff0     03 30 66 F0 | 	shl	local06, #3
01ff4     F2 30 02 F1 | 	add	local06, objptr
01ff8     04 30 06 F1 | 	add	local06, #4
01ffc     18 2B 02 FB | 	rdlong	local03, local06
02000     14 31 02 F6 | 	mov	local06, local02
02004     03 30 66 F0 | 	shl	local06, #3
02008     F2 3C 02 F6 | 	mov	local12, objptr
0200c     F2 30 02 F1 | 	add	local06, objptr
02010     18 2D 62 FC | 	wrlong	local04, local06
02014     14 3B 02 F6 | 	mov	local11, local02
02018     1D 3F 02 F6 | 	mov	local13, local11
0201c     03 3E 66 F0 | 	shl	local13, #3
02020     F2 3E 02 F1 | 	add	local13, objptr
02024     04 3E 06 F1 | 	add	local13, #4
02028     1F 2B 62 FC | 	wrlong	local03, local13
0202c     01 28 86 F1 | 	sub	local02, #1
02030     01 28 56 F2 | 	cmps	local02, #1 wc
02034     9C FF 9F 3D |  if_ae	jmp	#LR__0101
02038                 | LR__0102
02038     B1 01 00 FF 
0203c     E3 2C 06 F6 | 	mov	local04, ##@LR__5411
02040     F2 2C 62 FC | 	wrlong	local04, objptr
02044     35 00 00 FF 
02048     0C E4 85 F1 | 	sub	objptr, ##27148
0204c     01 46 06 F1 | 	add	local17, #1
02050                 | LR__0103
02050     00 28 06 F6 | 	mov	local02, #0
02054                 | ' 
02054                 | ' ' 1e : find strings
02054                 | ' 
02054                 | ' i=0
02054                 | ' do
02054                 | LR__0104
02054                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
02054     14 2F 02 F6 | 	mov	local05, local02
02058     03 2E 66 F0 | 	shl	local05, #3
0205c     35 00 00 FF 
02060     0C E4 05 F1 | 	add	objptr, ##27148
02064     F2 2E 02 F1 | 	add	local05, objptr
02068     17 13 02 FB | 	rdlong	arg01, local05
0206c     B1 01 00 FF 
02070     E5 14 06 F6 | 	mov	arg02, ##@LR__5412
02074     35 00 00 FF 
02078     0C E4 85 F1 | 	sub	objptr, ##27148
0207c     DC 46 B2 FD | 	call	#__system___string_cmp
02080     00 FA 0D F2 | 	cmp	result1, #0 wz
02084     01 28 06 51 |  if_ne	add	local02, #1
02088     20 01 90 5D |  if_ne	jmp	#LR__0109
0208c     14 4D 02 F6 | 	mov	local20, local02
02090                 | LR__0105
02090     14 39 02 F6 | 	mov	local10, local02
02094     01 38 06 F1 | 	add	local10, #1
02098     03 38 66 F0 | 	shl	local10, #3
0209c     35 00 00 FF 
020a0     0C E4 05 F1 | 	add	objptr, ##27148
020a4     F2 38 02 F1 | 	add	local10, objptr
020a8     1C 4B 02 FB | 	rdlong	local19, local10
020ac     26 39 02 F6 | 	mov	local10, local20
020b0     03 38 66 F0 | 	shl	local10, #3
020b4     F2 38 02 F1 | 	add	local10, objptr
020b8     26 3B 02 F6 | 	mov	local11, local20
020bc     1D 41 02 F6 | 	mov	local14, local11
020c0     03 40 66 F0 | 	shl	local14, #3
020c4     F2 40 02 F1 | 	add	local14, objptr
020c8     20 13 02 FB | 	rdlong	arg01, local14
020cc     25 3D 02 F6 | 	mov	local12, local19
020d0     1E 15 02 F6 | 	mov	arg02, local12
020d4     35 00 00 FF 
020d8     0C E4 85 F1 | 	sub	objptr, ##27148
020dc     B0 46 B2 FD | 	call	#__system___string_concat
020e0     1C FB 61 FC | 	wrlong	result1, local10
020e4     14 43 02 F6 | 	mov	local15, local02
020e8     01 42 06 F1 | 	add	local15, #1
020ec     23 4F 02 F6 | 	mov	local21, local17
020f0     01 4E 06 F1 | 	add	local21, #1
020f4     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
020f8                 | LR__0106
020f8     27 43 52 F2 | 	cmps	local15, local21 wc
020fc     70 00 90 3D |  if_ae	jmp	#LR__0108
02100     21 2F 02 F6 | 	mov	local05, local15
02104     01 2E 06 F1 | 	add	local05, #1
02108     03 2E 66 F0 | 	shl	local05, #3
0210c     35 00 00 FF 
02110     0C E4 05 F1 | 	add	objptr, ##27148
02114     F2 2E 02 F1 | 	add	local05, objptr
02118     17 2D 02 FB | 	rdlong	local04, local05
0211c     21 31 02 F6 | 	mov	local06, local15
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     F2 30 02 F1 | 	add	local06, objptr
0212c     04 30 06 F1 | 	add	local06, #4
02130     18 2B 02 FB | 	rdlong	local03, local06
02134     21 31 02 F6 | 	mov	local06, local15
02138     03 30 66 F0 | 	shl	local06, #3
0213c     F2 3C 02 F6 | 	mov	local12, objptr
02140     F2 30 02 F1 | 	add	local06, objptr
02144     18 2D 62 FC | 	wrlong	local04, local06
02148     21 3B 02 F6 | 	mov	local11, local15
0214c     1D 3F 02 F6 | 	mov	local13, local11
02150     03 3E 66 F0 | 	shl	local13, #3
02154     F2 3E 02 F1 | 	add	local13, objptr
02158     04 3E 06 F1 | 	add	local13, #4
0215c     1F 2B 62 FC | 	wrlong	local03, local13
02160     01 42 06 F1 | 	add	local15, #1
02164     35 00 00 FF 
02168     0C E4 85 F1 | 	sub	objptr, ##27148
0216c     88 FF 9F FD | 	jmp	#LR__0106
02170                 | LR__0107
02170                 | LR__0108
02170     01 46 86 F1 | 	sub	local17, #1
02174     B1 01 00 FF 
02178     E7 14 06 F6 | 	mov	arg02, ##@LR__5413
0217c     25 13 02 F6 | 	mov	arg01, local19
02180     D8 45 B2 FD | 	call	#__system___string_cmp
02184     00 FA 0D F2 | 	cmp	result1, #0 wz
02188     23 29 52 52 |  if_ne	cmps	local02, local17 wc
0218c     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
02190                 | '   if p$<>"""" then k+=1:i+=1
02190     B1 01 00 FF 
02194     E9 14 06 F6 | 	mov	arg02, ##@LR__5414
02198     25 13 02 F6 | 	mov	arg01, local19
0219c     BC 45 B2 FD | 	call	#__system___string_cmp
021a0     00 FA 0D F2 | 	cmp	result1, #0 wz
021a4     01 46 06 51 |  if_ne	add	local17, #1
021a8     01 28 06 51 |  if_ne	add	local02, #1
021ac                 | LR__0109
021ac     23 29 52 F2 | 	cmps	local02, local17 wc
021b0     A0 FE 9F CD |  if_b	jmp	#LR__0104
021b4     00 28 06 F6 | 	mov	local02, #0
021b8                 | ' 
021b8                 | ' ' 1f : concatenate strings if "" detected between
021b8                 | '  
021b8                 | ' i=0
021b8                 | ' do
021b8                 | LR__0110
021b8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
021b8     14 2F 02 F6 | 	mov	local05, local02
021bc     03 2E 66 F0 | 	shl	local05, #3
021c0     35 00 00 FF 
021c4     0C E4 05 F1 | 	add	objptr, ##27148
021c8     F2 30 02 F6 | 	mov	local06, objptr
021cc     F2 2E 02 F1 | 	add	local05, objptr
021d0     17 13 02 FB | 	rdlong	arg01, local05
021d4     01 14 06 F6 | 	mov	arg02, #1
021d8     35 00 00 FF 
021dc     0C E4 85 F1 | 	sub	objptr, ##27148
021e0     54 66 B2 FD | 	call	#__system__Right_S
021e4     FD 12 02 F6 | 	mov	arg01, result1
021e8     B1 01 00 FF 
021ec     EB 14 06 F6 | 	mov	arg02, ##@LR__5415
021f0     68 45 B2 FD | 	call	#__system___string_cmp
021f4     00 FA 0D F2 | 	cmp	result1, #0 wz
021f8     7C 01 90 5D |  if_ne	jmp	#LR__0116
021fc     14 31 02 F6 | 	mov	local06, local02
02200     01 30 06 F1 | 	add	local06, #1
02204     03 30 66 F0 | 	shl	local06, #3
02208     35 00 00 FF 
0220c     0C E4 05 F1 | 	add	objptr, ##27148
02210     F2 3C 02 F6 | 	mov	local12, objptr
02214     F2 30 02 F1 | 	add	local06, objptr
02218     18 13 02 FB | 	rdlong	arg01, local06
0221c     01 14 06 F6 | 	mov	arg02, #1
02220     35 00 00 FF 
02224     0C E4 85 F1 | 	sub	objptr, ##27148
02228     84 65 B2 FD | 	call	#__system__Left_S
0222c     FD 12 02 F6 | 	mov	arg01, result1
02230     B1 01 00 FF 
02234     ED 14 06 F6 | 	mov	arg02, ##@LR__5416
02238     20 45 B2 FD | 	call	#__system___string_cmp
0223c     00 FA 0D F2 | 	cmp	result1, #0 wz
02240     34 01 90 5D |  if_ne	jmp	#LR__0116
02244     14 39 02 F6 | 	mov	local10, local02
02248     03 38 66 F0 | 	shl	local10, #3
0224c     35 00 00 FF 
02250     0C E4 05 F1 | 	add	objptr, ##27148
02254     F2 38 02 F1 | 	add	local10, objptr
02258     14 41 02 F6 | 	mov	local14, local02
0225c     03 40 66 F0 | 	shl	local14, #3
02260     F2 40 02 F1 | 	add	local14, objptr
02264     20 31 02 FB | 	rdlong	local06, local14
02268     14 3F 02 F6 | 	mov	local13, local02
0226c     01 3E 06 F1 | 	add	local13, #1
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     1F 3D 02 FB | 	rdlong	local12, local13
0227c     14 51 02 F6 | 	mov	local22, local02
02280     01 50 06 F1 | 	add	local22, #1
02284     28 53 02 F6 | 	mov	local23, local22
02288     03 52 66 F0 | 	shl	local23, #3
0228c     F2 54 02 F6 | 	mov	local24, objptr
02290     F2 52 02 F1 | 	add	local23, objptr
02294     29 13 02 FB | 	rdlong	arg01, local23
02298     35 00 00 FF 
0229c     0C E4 85 F1 | 	sub	objptr, ##27148
022a0     09 33 02 F6 | 	mov	local07, arg01
022a4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
022a8                 | LR__0111
022a8     19 FB C9 FA | 	rdbyte	result1, local07 wz
022ac     01 32 06 51 |  if_ne	add	local07, #1
022b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
022b4                 | LR__0112
022b4     09 33 82 F1 | 	sub	local07, arg01
022b8     19 3B 02 F6 | 	mov	local11, local07
022bc     01 3A 86 F1 | 	sub	local11, #1
022c0     1E 13 02 F6 | 	mov	arg01, local12
022c4     1D 15 02 F6 | 	mov	arg02, local11
022c8     6C 65 B2 FD | 	call	#__system__Right_S
022cc     FD 3C 02 F6 | 	mov	local12, result1
022d0     18 13 02 F6 | 	mov	arg01, local06
022d4     1E 15 02 F6 | 	mov	arg02, local12
022d8     B4 44 B2 FD | 	call	#__system___string_concat
022dc     FD 30 02 F6 | 	mov	local06, result1
022e0     1C 31 62 FC | 	wrlong	local06, local10
022e4                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
022e4     14 43 02 F6 | 	mov	local15, local02
022e8     01 42 06 F1 | 	add	local15, #1
022ec     23 57 02 F6 | 	mov	local25, local17
022f0     01 56 06 F1 | 	add	local25, #1
022f4     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
022f8                 | LR__0113
022f8     2B 43 52 F2 | 	cmps	local15, local25 wc
022fc     70 00 90 3D |  if_ae	jmp	#LR__0115
02300     21 2F 02 F6 | 	mov	local05, local15
02304     01 2E 06 F1 | 	add	local05, #1
02308     03 2E 66 F0 | 	shl	local05, #3
0230c     35 00 00 FF 
02310     0C E4 05 F1 | 	add	objptr, ##27148
02314     F2 2E 02 F1 | 	add	local05, objptr
02318     17 2D 02 FB | 	rdlong	local04, local05
0231c     21 31 02 F6 | 	mov	local06, local15
02320     01 30 06 F1 | 	add	local06, #1
02324     03 30 66 F0 | 	shl	local06, #3
02328     F2 30 02 F1 | 	add	local06, objptr
0232c     04 30 06 F1 | 	add	local06, #4
02330     18 2B 02 FB | 	rdlong	local03, local06
02334     21 31 02 F6 | 	mov	local06, local15
02338     03 30 66 F0 | 	shl	local06, #3
0233c     F2 3C 02 F6 | 	mov	local12, objptr
02340     F2 30 02 F1 | 	add	local06, objptr
02344     18 2D 62 FC | 	wrlong	local04, local06
02348     21 3B 02 F6 | 	mov	local11, local15
0234c     1D 3F 02 F6 | 	mov	local13, local11
02350     03 3E 66 F0 | 	shl	local13, #3
02354     F2 3E 02 F1 | 	add	local13, objptr
02358     04 3E 06 F1 | 	add	local13, #4
0235c     1F 2B 62 FC | 	wrlong	local03, local13
02360     01 42 06 F1 | 	add	local15, #1
02364     35 00 00 FF 
02368     0C E4 85 F1 | 	sub	objptr, ##27148
0236c     88 FF 9F FD | 	jmp	#LR__0113
02370                 | LR__0114
02370                 | LR__0115
02370     01 28 86 F1 | 	sub	local02, #1
02374     01 46 86 F1 | 	sub	local17, #1
02378                 | LR__0116
02378     01 28 06 F1 | 	add	local02, #1
0237c     23 29 52 F2 | 	cmps	local02, local17 wc
02380     34 FE 9F CD |  if_b	jmp	#LR__0110
02384     00 28 06 F6 | 	mov	local02, #0
02388                 | '  
02388                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
02388                 | '  
02388                 | ' i=0 
02388                 | ' do
02388                 | LR__0117
02388     14 39 02 F6 | 	mov	local10, local02
0238c     03 38 66 F0 | 	shl	local10, #3
02390     35 00 00 FF 
02394     0C E4 05 F1 | 	add	objptr, ##27148
02398     F2 38 02 F1 | 	add	local10, objptr
0239c     1C 59 02 FB | 	rdlong	local26, local10
023a0     14 39 02 F6 | 	mov	local10, local02
023a4     01 38 06 F1 | 	add	local10, #1
023a8     03 38 66 F0 | 	shl	local10, #3
023ac     F2 38 02 F1 | 	add	local10, objptr
023b0     1C 5B 02 FB | 	rdlong	local27, local10
023b4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
023b4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
023b4     B1 01 00 FF 
023b8     EF 14 06 F6 | 	mov	arg02, ##@LR__5417
023bc     2C 13 02 F6 | 	mov	arg01, local26
023c0     35 00 00 FF 
023c4     0C E4 85 F1 | 	sub	objptr, ##27148
023c8     90 43 B2 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     A8 00 90 AD |  if_e	jmp	#LR__0118
023d4     B1 01 00 FF 
023d8     F1 14 06 F6 | 	mov	arg02, ##@LR__5418
023dc     2C 13 02 F6 | 	mov	arg01, local26
023e0     78 43 B2 FD | 	call	#__system___string_cmp
023e4     FD 2A 0A F6 | 	mov	local03, result1 wz
023e8     90 00 90 AD |  if_e	jmp	#LR__0118
023ec     B1 01 00 FF 
023f0     F3 30 06 F6 | 	mov	local06, ##@LR__5419
023f4     2C 13 02 F6 | 	mov	arg01, local26
023f8     18 15 02 F6 | 	mov	arg02, local06
023fc     5C 43 B2 FD | 	call	#__system___string_cmp
02400     00 FA 0D F2 | 	cmp	result1, #0 wz
02404     74 00 90 AD |  if_e	jmp	#LR__0118
02408     B1 01 00 FF 
0240c     F5 3C 06 F6 | 	mov	local12, ##@LR__5420
02410     2C 13 02 F6 | 	mov	arg01, local26
02414     1E 15 02 F6 | 	mov	arg02, local12
02418     40 43 B2 FD | 	call	#__system___string_cmp
0241c     00 FA 0D F2 | 	cmp	result1, #0 wz
02420     58 00 90 AD |  if_e	jmp	#LR__0118
02424     B1 01 00 FF 
02428     F7 3A 06 F6 | 	mov	local11, ##@LR__5421
0242c     1D 3D 02 F6 | 	mov	local12, local11
02430     2C 13 02 F6 | 	mov	arg01, local26
02434     1E 15 02 F6 | 	mov	arg02, local12
02438     20 43 B2 FD | 	call	#__system___string_cmp
0243c     FD 30 0A F6 | 	mov	local06, result1 wz
02440     38 00 90 AD |  if_e	jmp	#LR__0118
02444     B1 01 00 FF 
02448     F9 3A 06 F6 | 	mov	local11, ##@LR__5422
0244c     2C 13 02 F6 | 	mov	arg01, local26
02450     1D 15 02 F6 | 	mov	arg02, local11
02454     04 43 B2 FD | 	call	#__system___string_cmp
02458     FD 3C 0A F6 | 	mov	local12, result1 wz
0245c     1C 00 90 AD |  if_e	jmp	#LR__0118
02460     B1 01 00 FF 
02464     FB 40 06 F6 | 	mov	local14, ##@LR__5423
02468     2C 13 02 F6 | 	mov	arg01, local26
0246c     20 15 02 F6 | 	mov	arg02, local14
02470     E8 42 B2 FD | 	call	#__system___string_cmp
02474     FD 3A 0A F6 | 	mov	local11, result1 wz
02478     20 00 90 5D |  if_ne	jmp	#LR__0119
0247c                 | LR__0118
0247c     B1 01 00 FF 
02480     FD 5C 06 F6 | 	mov	local28, ##@LR__5424
02484     2E 3F 02 F6 | 	mov	local13, local28
02488     2D 13 02 F6 | 	mov	arg01, local27
0248c     1F 15 02 F6 | 	mov	arg02, local13
02490     C8 42 B2 FD | 	call	#__system___string_cmp
02494     FD 40 0A F6 | 	mov	local14, result1 wz
02498     B8 00 90 AD |  if_e	jmp	#LR__0122
0249c                 | LR__0119
0249c     B1 01 00 FF 
024a0     FF 5C 06 F6 | 	mov	local28, ##@LR__5425
024a4     2C 13 02 F6 | 	mov	arg01, local26
024a8     2E 15 02 F6 | 	mov	arg02, local28
024ac     AC 42 B2 FD | 	call	#__system___string_cmp
024b0     FD 3E 0A F6 | 	mov	local13, result1 wz
024b4     20 00 90 5D |  if_ne	jmp	#LR__0120
024b8     B1 01 00 FF 
024bc     01 53 06 F6 | 	mov	local23, ##@LR__5426
024c0     29 51 02 F6 | 	mov	local22, local23
024c4     2D 13 02 F6 | 	mov	arg01, local27
024c8     28 15 02 F6 | 	mov	arg02, local22
024cc     8C 42 B2 FD | 	call	#__system___string_cmp
024d0     FD 5C 0A F6 | 	mov	local28, result1 wz
024d4     7C 00 90 AD |  if_e	jmp	#LR__0122
024d8                 | LR__0120
024d8     B1 01 00 FF 
024dc     03 53 06 F6 | 	mov	local23, ##@LR__5427
024e0     2C 13 02 F6 | 	mov	arg01, local26
024e4     29 15 02 F6 | 	mov	arg02, local23
024e8     70 42 B2 FD | 	call	#__system___string_cmp
024ec     FD 50 0A F6 | 	mov	local22, result1 wz
024f0     20 00 90 5D |  if_ne	jmp	#LR__0121
024f4     B1 01 00 FF 
024f8     05 5F 06 F6 | 	mov	local29, ##@LR__5428
024fc     2F 55 02 F6 | 	mov	local24, local29
02500     2D 13 02 F6 | 	mov	arg01, local27
02504     2A 15 02 F6 | 	mov	arg02, local24
02508     50 42 B2 FD | 	call	#__system___string_cmp
0250c     FD 52 0A F6 | 	mov	local23, result1 wz
02510     40 00 90 AD |  if_e	jmp	#LR__0122
02514                 | LR__0121
02514     B1 01 00 FF 
02518     07 61 06 F6 | 	mov	local30, ##@LR__5429
0251c     30 5F 02 F6 | 	mov	local29, local30
02520     2C 13 02 F6 | 	mov	arg01, local26
02524     2F 15 02 F6 | 	mov	arg02, local29
02528     30 42 B2 FD | 	call	#__system___string_cmp
0252c     FD 54 0A F6 | 	mov	local24, result1 wz
02530     F0 00 90 5D |  if_ne	jmp	#LR__0126
02534     B1 01 00 FF 
02538     09 63 06 F6 | 	mov	local31, ##@LR__5430
0253c     31 61 02 F6 | 	mov	local30, local31
02540     2D 13 02 F6 | 	mov	arg01, local27
02544     30 15 02 F6 | 	mov	arg02, local30
02548     10 42 B2 FD | 	call	#__system___string_cmp
0254c     FD 5E 0A F6 | 	mov	local29, result1 wz
02550     D0 00 90 5D |  if_ne	jmp	#LR__0126
02554                 | LR__0122
02554     14 39 02 F6 | 	mov	local10, local02
02558     03 38 66 F0 | 	shl	local10, #3
0255c     35 00 00 FF 
02560     0C E4 05 F1 | 	add	objptr, ##27148
02564     F2 38 02 F1 | 	add	local10, objptr
02568     2D 3D 02 F6 | 	mov	local12, local27
0256c     2C 13 02 F6 | 	mov	arg01, local26
02570     1E 15 02 F6 | 	mov	arg02, local12
02574     35 00 00 FF 
02578     0C E4 85 F1 | 	sub	objptr, ##27148
0257c     10 42 B2 FD | 	call	#__system___string_concat
02580     1C FB 61 FC | 	wrlong	result1, local10
02584                 | '     lparts(i).part$=s1$+s2$
02584                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02584     14 43 02 F6 | 	mov	local15, local02
02588     01 42 06 F1 | 	add	local15, #1
0258c     23 65 02 F6 | 	mov	local32, local17
02590     01 64 06 F1 | 	add	local32, #1
02594     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
02598                 | LR__0123
02598     32 43 52 F2 | 	cmps	local15, local32 wc
0259c     7C 00 90 3D |  if_ae	jmp	#LR__0125
025a0     21 2F 02 F6 | 	mov	local05, local15
025a4     01 2E 06 F1 | 	add	local05, #1
025a8     03 2E 66 F0 | 	shl	local05, #3
025ac     35 00 00 FF 
025b0     0C E4 05 F1 | 	add	objptr, ##27148
025b4     F2 2E 02 F1 | 	add	local05, objptr
025b8     17 2D 02 FB | 	rdlong	local04, local05
025bc     21 31 02 F6 | 	mov	local06, local15
025c0     01 30 06 F1 | 	add	local06, #1
025c4     03 30 66 F0 | 	shl	local06, #3
025c8     F2 30 02 F1 | 	add	local06, objptr
025cc     04 30 06 F1 | 	add	local06, #4
025d0     18 2B 02 FB | 	rdlong	local03, local06
025d4     21 31 02 F6 | 	mov	local06, local15
025d8     03 30 66 F0 | 	shl	local06, #3
025dc     F2 3C 02 F6 | 	mov	local12, objptr
025e0     F2 30 02 F1 | 	add	local06, objptr
025e4     18 2D 62 FC | 	wrlong	local04, local06
025e8     21 3B 02 F6 | 	mov	local11, local15
025ec     1D 41 02 F6 | 	mov	local14, local11
025f0     20 3F 02 F6 | 	mov	local13, local14
025f4     03 3E 66 F0 | 	shl	local13, #3
025f8     F2 5C 02 F6 | 	mov	local28, objptr
025fc     F2 3E 02 F1 | 	add	local13, objptr
02600     04 3E 06 F1 | 	add	local13, #4
02604     1F 2B 62 FC | 	wrlong	local03, local13
02608     04 3E 86 F1 | 	sub	local13, #4
0260c     01 42 06 F1 | 	add	local15, #1
02610     35 00 00 FF 
02614     0C E4 85 F1 | 	sub	objptr, ##27148
02618     7C FF 9F FD | 	jmp	#LR__0123
0261c                 | LR__0124
0261c                 | LR__0125
0261c     01 28 86 F1 | 	sub	local02, #1
02620     01 46 86 F1 | 	sub	local17, #1
02624                 | LR__0126
02624     01 28 06 F1 | 	add	local02, #1
02628     23 29 52 F2 | 	cmps	local02, local17 wc
0262c     58 FD 9F CD |  if_b	jmp	#LR__0117
02630                 | '  
02630                 | ' ' 1h : now remove parts that are spaces
02630                 | ' 
02630                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02630     00 28 06 F6 | 	mov	local02, #0
02634     23 67 02 F6 | 	mov	local33, local17
02638     01 66 06 F1 | 	add	local33, #1
0263c                 | LR__0127
0263c     33 29 52 F2 | 	cmps	local02, local33 wc
02640     50 00 90 3D |  if_ae	jmp	#LR__0128
02644     14 39 02 F6 | 	mov	local10, local02
02648     03 38 66 F0 | 	shl	local10, #3
0264c     35 00 00 FF 
02650     0C E4 05 F1 | 	add	objptr, ##27148
02654     F2 38 02 F1 | 	add	local10, objptr
02658     14 3D 02 F6 | 	mov	local12, local02
0265c     1E 3B 02 F6 | 	mov	local11, local12
02660     1D 41 02 F6 | 	mov	local14, local11
02664     03 40 66 F0 | 	shl	local14, #3
02668     F2 3E 02 F6 | 	mov	local13, objptr
0266c     F2 40 02 F1 | 	add	local14, objptr
02670     20 13 02 FB | 	rdlong	arg01, local14
02674     35 00 00 FF 
02678     0C E4 85 F1 | 	sub	objptr, ##27148
0267c     C0 65 B2 FD | 	call	#__system__RTrim_S
02680     FD 12 02 F6 | 	mov	arg01, result1
02684     F8 64 B2 FD | 	call	#__system__LTrim_S
02688     1C FB 61 FC | 	wrlong	result1, local10
0268c     01 28 06 F1 | 	add	local02, #1
02690     A8 FF 9F FD | 	jmp	#LR__0127
02694                 | LR__0128
02694     00 28 06 F6 | 	mov	local02, #0
02698     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
0269c                 | ' i=0
0269c                 | ' do 
0269c                 | LR__0129
0269c                 | '   if len(lparts(i).part$)=0 then 
0269c     14 2F 02 F6 | 	mov	local05, local02
026a0     03 2E 66 F0 | 	shl	local05, #3
026a4     35 00 00 FF 
026a8     0C E4 05 F1 | 	add	objptr, ##27148
026ac     F2 2E 02 F1 | 	add	local05, objptr
026b0     17 13 02 FB | 	rdlong	arg01, local05
026b4     35 00 00 FF 
026b8     0C E4 85 F1 | 	sub	objptr, ##27148
026bc     09 33 02 F6 | 	mov	local07, arg01
026c0                 | LR__0130
026c0     19 FB C9 FA | 	rdbyte	result1, local07 wz
026c4     01 32 06 51 |  if_ne	add	local07, #1
026c8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
026cc     09 33 8A F1 | 	sub	local07, arg01 wz
026d0     C4 00 90 5D |  if_ne	jmp	#LR__0134
026d4                 | '     if i=k-1 then k-=1  :  exit
026d4     23 2D 02 F6 | 	mov	local04, local17
026d8     01 2C 86 F1 | 	sub	local04, #1
026dc     16 29 0A F2 | 	cmp	local02, local04 wz
026e0     01 46 86 A1 |  if_e	sub	local17, #1
026e4     C4 00 90 AD |  if_e	jmp	#LR__0136
026e8                 | '     if i<k-1 then 
026e8     23 2D 02 F6 | 	mov	local04, local17
026ec     01 2C 86 F1 | 	sub	local04, #1
026f0     16 29 52 F2 | 	cmps	local02, local04 wc
026f4     A0 00 90 3D |  if_ae	jmp	#LR__0133
026f8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
026f8     14 43 02 F6 | 	mov	local15, local02
026fc     23 69 02 F6 | 	mov	local34, local17
02700     01 68 86 F1 | 	sub	local34, #1
02704                 | LR__0131
02704     34 43 52 F2 | 	cmps	local15, local34 wc
02708     80 00 90 3D |  if_ae	jmp	#LR__0132
0270c     21 2F 02 F6 | 	mov	local05, local15
02710     01 2E 06 F1 | 	add	local05, #1
02714     03 2E 66 F0 | 	shl	local05, #3
02718     35 00 00 FF 
0271c     0C E4 05 F1 | 	add	objptr, ##27148
02720     F2 2E 02 F1 | 	add	local05, objptr
02724     17 2D 02 FB | 	rdlong	local04, local05
02728     21 31 02 F6 | 	mov	local06, local15
0272c     01 30 06 F1 | 	add	local06, #1
02730     03 30 66 F0 | 	shl	local06, #3
02734     F2 30 02 F1 | 	add	local06, objptr
02738     04 30 06 F1 | 	add	local06, #4
0273c     18 2B 02 FB | 	rdlong	local03, local06
02740     21 39 02 F6 | 	mov	local10, local15
02744     1C 31 02 F6 | 	mov	local06, local10
02748     03 30 66 F0 | 	shl	local06, #3
0274c     F2 3C 02 F6 | 	mov	local12, objptr
02750     F2 30 02 F1 | 	add	local06, objptr
02754     18 2D 62 FC | 	wrlong	local04, local06
02758     21 3B 02 F6 | 	mov	local11, local15
0275c     1D 41 02 F6 | 	mov	local14, local11
02760     20 3F 02 F6 | 	mov	local13, local14
02764     03 3E 66 F0 | 	shl	local13, #3
02768     F2 5C 02 F6 | 	mov	local28, objptr
0276c     F2 3E 02 F1 | 	add	local13, objptr
02770     04 3E 06 F1 | 	add	local13, #4
02774     1F 2B 62 FC | 	wrlong	local03, local13
02778     04 3E 86 F1 | 	sub	local13, #4
0277c     01 42 06 F1 | 	add	local15, #1
02780     35 00 00 FF 
02784     0C E4 85 F1 | 	sub	objptr, ##27148
02788     78 FF 9F FD | 	jmp	#LR__0131
0278c                 | LR__0132
0278c     01 46 86 F1 | 	sub	local17, #1
02790                 | '       if i>0 then i-=1 
02790     01 28 56 F2 | 	cmps	local02, #1 wc
02794     01 28 86 31 |  if_ae	sub	local02, #1
02798                 | LR__0133
02798                 | LR__0134
02798     01 28 06 F1 | 	add	local02, #1
0279c     23 2D 02 F6 | 	mov	local04, local17
027a0     01 2C 86 F1 | 	sub	local04, #1
027a4     16 29 5A F2 | 	cmps	local02, local04 wcz
027a8     F0 FE 9F ED |  if_be	jmp	#LR__0129
027ac                 | LR__0135
027ac                 | LR__0136
027ac                 | ' 
027ac                 | ' ' 1i: lowercase all that is not a string
027ac                 | ' 
027ac                 | ' for j=0 to k-1
027ac     00 42 06 F6 | 	mov	local15, #0
027b0     23 6B 02 F6 | 	mov	local35, local17
027b4                 | LR__0137
027b4     35 43 52 F2 | 	cmps	local15, local35 wc
027b8     CC 00 90 3D |  if_ae	jmp	#LR__0140
027bc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
027bc     21 2F 02 F6 | 	mov	local05, local15
027c0     03 2E 66 F0 | 	shl	local05, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 2E 02 F1 | 	add	local05, objptr
027d0     17 13 02 FB | 	rdlong	arg01, local05
027d4     01 14 06 F6 | 	mov	arg02, #1
027d8     35 00 00 FF 
027dc     0C E4 85 F1 | 	sub	objptr, ##27148
027e0     CC 5F B2 FD | 	call	#__system__Left_S
027e4     FD 12 02 F6 | 	mov	arg01, result1
027e8     B1 01 00 FF 
027ec     0B 15 06 F6 | 	mov	arg02, ##@LR__5431
027f0     68 3F B2 FD | 	call	#__system___string_cmp
027f4     00 FA 0D F2 | 	cmp	result1, #0 wz
027f8     44 00 90 5D |  if_ne	jmp	#LR__0138
027fc     21 31 02 F6 | 	mov	local06, local15
02800     03 30 66 F0 | 	shl	local06, #3
02804     35 00 00 FF 
02808     0C E4 05 F1 | 	add	objptr, ##27148
0280c     F2 3C 02 F6 | 	mov	local12, objptr
02810     F2 30 02 F1 | 	add	local06, objptr
02814     18 13 02 FB | 	rdlong	arg01, local06
02818     01 14 06 F6 | 	mov	arg02, #1
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     10 60 B2 FD | 	call	#__system__Right_S
02828     FD 12 02 F6 | 	mov	arg01, result1
0282c     B1 01 00 FF 
02830     0D 15 06 F6 | 	mov	arg02, ##@LR__5432
02834     24 3F B2 FD | 	call	#__system___string_cmp
02838     00 FA 0D F2 | 	cmp	result1, #0 wz
0283c     40 00 90 AD |  if_e	jmp	#LR__0139
02840                 | LR__0138
02840     21 39 02 F6 | 	mov	local10, local15
02844     03 38 66 F0 | 	shl	local10, #3
02848     35 00 00 FF 
0284c     0C E4 05 F1 | 	add	objptr, ##27148
02850     F2 38 02 F1 | 	add	local10, objptr
02854     21 3D 02 F6 | 	mov	local12, local15
02858     1E 3B 02 F6 | 	mov	local11, local12
0285c     1D 41 02 F6 | 	mov	local14, local11
02860     03 40 66 F0 | 	shl	local14, #3
02864     F2 3E 02 F6 | 	mov	local13, objptr
02868     F2 40 02 F1 | 	add	local14, objptr
0286c     20 13 02 FB | 	rdlong	arg01, local14
02870     35 00 00 FF 
02874     0C E4 85 F1 | 	sub	objptr, ##27148
02878     44 62 B2 FD | 	call	#__system__LCase_S
0287c     1C FB 61 FC | 	wrlong	result1, local10
02880                 | LR__0139
02880     01 42 06 F1 | 	add	local15, #1
02884     2C FF 9F FD | 	jmp	#LR__0137
02888                 | LR__0140
02888                 | ' 
02888                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
02888                 | ' 
02888                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
02888     00 28 06 F6 | 	mov	local02, #0
0288c     23 6D 02 F6 | 	mov	local36, local17
02890     01 6C 06 F1 | 	add	local36, #1
02894     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
02898                 | LR__0141
02898     36 29 52 F2 | 	cmps	local02, local36 wc
0289c     30 00 90 3D |  if_ae	jmp	#LR__0143
028a0     14 39 02 F6 | 	mov	local10, local02
028a4     03 38 66 F0 | 	shl	local10, #3
028a8     35 00 00 FF 
028ac     0C E4 05 F1 | 	add	objptr, ##27148
028b0     F2 38 02 F1 | 	add	local10, objptr
028b4     04 38 06 F1 | 	add	local10, #4
028b8     FF FF FF FF 
028bc     1C FF 6B FC | 	wrlong	##-1, local10
028c0     01 28 06 F1 | 	add	local02, #1
028c4     35 00 00 FF 
028c8     0C E4 85 F1 | 	sub	objptr, ##27148
028cc     C8 FF 9F FD | 	jmp	#LR__0141
028d0                 | LR__0142
028d0                 | LR__0143
028d0                 | ' 
028d0                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 12 02 FB | 	rdlong	arg01, objptr
028dc     35 00 00 FF 
028e0     0C E4 85 F1 | 	sub	objptr, ##27148
028e4     94 45 B0 FD | 	call	#_isdec
028e8     00 FA 0D F2 | 	cmp	result1, #0 wz
028ec     01 6E 06 56 |  if_ne	mov	local37, #1
028f0     00 6E 06 A6 |  if_e	mov	local37, #0
028f4                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
028f4     35 00 00 FF 
028f8     0C E4 05 F1 | 	add	objptr, ##27148
028fc     F2 12 02 FB | 	rdlong	arg01, objptr
02900     35 00 00 FF 
02904     0C E4 85 F1 | 	sub	objptr, ##27148
02908     B1 01 00 FF 
0290c     0F 15 06 F6 | 	mov	arg02, ##@LR__5433
02910     48 3E B2 FD | 	call	#__system___string_cmp
02914     00 FA 0D F2 | 	cmp	result1, #0 wz
02918     01 6E 06 A6 |  if_e	mov	local37, #1
0291c     00 28 06 F6 | 	mov	local02, #0
02920                 | ' i=0 : do 
02920                 | LR__0144
02920                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02920     14 2F 02 F6 | 	mov	local05, local02
02924     03 2E 66 F0 | 	shl	local05, #3
02928     35 00 00 FF 
0292c     0C E4 05 F1 | 	add	objptr, ##27148
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 13 02 FB | 	rdlong	arg01, local05
02938     B1 01 00 FF 
0293c     14 15 06 F6 | 	mov	arg02, ##@LR__5434
02940     35 00 00 FF 
02944     0C E4 85 F1 | 	sub	objptr, ##27148
02948     10 3E B2 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     0C 00 90 AD |  if_e	jmp	#LR__0145
02954     01 28 06 F1 | 	add	local02, #1
02958     23 29 5A F2 | 	cmps	local02, local17 wcz
0295c     C0 FF 9F ED |  if_be	jmp	#LR__0144
02960                 | LR__0145
02960                 | ' if i<k then addptr=i+1	 							' then found
02960     23 29 52 F2 | 	cmps	local02, local17 wc
02964     14 6F 02 C6 |  if_b	mov	local37, local02
02968     01 6E 06 C1 |  if_b	add	local37, #1
0296c     35 00 00 FF 
02970     0C E4 05 F1 | 	add	objptr, ##27148
02974                 | ' lp$=lparts(addptr).part$ 
02974                 | ' 
02974                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02974     37 2F 02 F6 | 	mov	local05, local37
02978     03 2E 66 F0 | 	shl	local05, #3
0297c     F2 2E 02 F1 | 	add	local05, objptr
02980     17 13 02 FB | 	rdlong	arg01, local05
02984     01 14 06 F6 | 	mov	arg02, #1
02988     35 00 00 FF 
0298c     0C E4 85 F1 | 	sub	objptr, ##27148
02990     1C 5E B2 FD | 	call	#__system__Left_S
02994     FD 12 02 F6 | 	mov	arg01, result1
02998     B1 01 00 FF 
0299c     19 15 06 F6 | 	mov	arg02, ##@LR__5435
029a0     B8 3D B2 FD | 	call	#__system___string_cmp
029a4     00 FA 0D F2 | 	cmp	result1, #0 wz
029a8     60 01 90 5D |  if_ne	jmp	#LR__0152
029ac     37 31 02 F6 | 	mov	local06, local37
029b0     03 30 66 F0 | 	shl	local06, #3
029b4     35 00 00 FF 
029b8     0C E4 05 F1 | 	add	objptr, ##27148
029bc     F2 30 02 F1 | 	add	local06, objptr
029c0     18 13 02 FB | 	rdlong	arg01, local06
029c4     35 00 00 FF 
029c8     0C E4 85 F1 | 	sub	objptr, ##27148
029cc     09 33 02 F6 | 	mov	local07, arg01
029d0     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
029d4                 | LR__0146
029d4     19 FB C9 FA | 	rdbyte	result1, local07 wz
029d8     01 32 06 51 |  if_ne	add	local07, #1
029dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
029e0                 | LR__0147
029e0     09 33 82 F1 | 	sub	local07, arg01
029e4     02 32 56 F2 | 	cmps	local07, #2 wc
029e8     20 01 90 CD |  if_b	jmp	#LR__0152
029ec     01 46 06 F1 | 	add	local17, #1
029f0                 | '   k+=1
029f0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029f0     23 29 02 F6 | 	mov	local02, local17
029f4     37 71 02 F6 | 	mov	local38, local37
029f8     01 70 06 F1 | 	add	local38, #1
029fc     35 00 00 FF 
02a00     0C E4 05 F1 | 	add	objptr, ##27148
02a04     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02a08                 | LR__0148
02a08     14 2F 02 F6 | 	mov	local05, local02
02a0c     01 2E 86 F1 | 	sub	local05, #1
02a10     03 2E 66 F0 | 	shl	local05, #3
02a14     F2 2E 02 F1 | 	add	local05, objptr
02a18     17 2D 02 FB | 	rdlong	local04, local05
02a1c     14 31 02 F6 | 	mov	local06, local02
02a20     01 30 86 F1 | 	sub	local06, #1
02a24     03 30 66 F0 | 	shl	local06, #3
02a28     F2 30 02 F1 | 	add	local06, objptr
02a2c     04 30 06 F1 | 	add	local06, #4
02a30     18 2B 02 FB | 	rdlong	local03, local06
02a34     14 31 02 F6 | 	mov	local06, local02
02a38     03 30 66 F0 | 	shl	local06, #3
02a3c     F2 30 02 F1 | 	add	local06, objptr
02a40     18 2D 62 FC | 	wrlong	local04, local06
02a44     14 3F 02 F6 | 	mov	local13, local02
02a48     03 3E 66 F0 | 	shl	local13, #3
02a4c     F2 3E 02 F1 | 	add	local13, objptr
02a50     04 3E 06 F1 | 	add	local13, #4
02a54     1F 2B 62 FC | 	wrlong	local03, local13
02a58     01 28 86 F1 | 	sub	local02, #1
02a5c     38 29 52 F2 | 	cmps	local02, local38 wc
02a60     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02a64                 | LR__0149
02a64     37 39 02 F6 | 	mov	local10, local37
02a68     01 38 06 F1 | 	add	local10, #1
02a6c     03 38 66 F0 | 	shl	local10, #3
02a70     F2 38 02 F1 | 	add	local10, objptr
02a74     37 41 02 F6 | 	mov	local14, local37
02a78     03 40 66 F0 | 	shl	local14, #3
02a7c     F2 40 02 F1 | 	add	local14, objptr
02a80     20 31 02 FB | 	rdlong	local06, local14
02a84     37 3F 02 F6 | 	mov	local13, local37
02a88     1F 5D 02 F6 | 	mov	local28, local13
02a8c     2E 51 02 F6 | 	mov	local22, local28
02a90     03 50 66 F0 | 	shl	local22, #3
02a94     F2 52 02 F6 | 	mov	local23, objptr
02a98     F2 50 02 F1 | 	add	local22, objptr
02a9c     28 13 02 FB | 	rdlong	arg01, local22
02aa0     35 00 00 FF 
02aa4     0C E4 85 F1 | 	sub	objptr, ##27148
02aa8     09 33 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02ab0                 | LR__0150
02ab0     19 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 32 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02abc                 | LR__0151
02abc     09 33 82 F1 | 	sub	local07, arg01
02ac0     19 41 02 F6 | 	mov	local14, local07
02ac4     20 3B 02 F6 | 	mov	local11, local14
02ac8     01 3A 86 F1 | 	sub	local11, #1
02acc     1D 3D 02 F6 | 	mov	local12, local11
02ad0     18 13 02 F6 | 	mov	arg01, local06
02ad4     1E 15 02 F6 | 	mov	arg02, local12
02ad8     5C 5D B2 FD | 	call	#__system__Right_S
02adc     1C FB 61 FC | 	wrlong	result1, local10
02ae0     37 39 02 F6 | 	mov	local10, local37
02ae4     03 38 66 F0 | 	shl	local10, #3
02ae8     35 00 00 FF 
02aec     0C E4 05 F1 | 	add	objptr, ##27148
02af0     F2 38 02 F1 | 	add	local10, objptr
02af4     B1 01 00 FF 
02af8     1B 31 06 F6 | 	mov	local06, ##@LR__5436
02afc     1C 31 62 FC | 	wrlong	local06, local10
02b00     35 00 00 FF 
02b04     0C E4 85 F1 | 	sub	objptr, ##27148
02b08     A8 01 90 FD | 	jmp	#LR__0160
02b0c                 | LR__0152
02b0c     37 31 02 F6 | 	mov	local06, local37
02b10     03 30 66 F0 | 	shl	local06, #3
02b14     35 00 00 FF 
02b18     0C E4 05 F1 | 	add	objptr, ##27148
02b1c     F2 3C 02 F6 | 	mov	local12, objptr
02b20     F2 30 02 F1 | 	add	local06, objptr
02b24     18 15 02 FB | 	rdlong	arg02, local06
02b28     B1 01 00 FF 
02b2c     1D 17 06 F6 | 	mov	arg03, ##@LR__5437
02b30     01 12 06 F6 | 	mov	arg01, #1
02b34     35 00 00 FF 
02b38     0C E4 85 F1 | 	sub	objptr, ##27148
02b3c     B8 61 B2 FD | 	call	#__system__Instr
02b40     FD 72 02 F6 | 	mov	local39, result1
02b44                 | ' 
02b44                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02b44                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02b44     01 72 56 F2 | 	cmps	local39, #1 wc
02b48     68 01 90 CD |  if_b	jmp	#LR__0159
02b4c     37 2F 02 F6 | 	mov	local05, local37
02b50     03 2E 66 F0 | 	shl	local05, #3
02b54     35 00 00 FF 
02b58     0C E4 05 F1 | 	add	objptr, ##27148
02b5c     F2 2E 02 F1 | 	add	local05, objptr
02b60     17 13 02 FB | 	rdlong	arg01, local05
02b64     35 00 00 FF 
02b68     0C E4 85 F1 | 	sub	objptr, ##27148
02b6c     09 33 02 F6 | 	mov	local07, arg01
02b70     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02b74                 | LR__0153
02b74     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b78     01 32 06 51 |  if_ne	add	local07, #1
02b7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02b80                 | LR__0154
02b80     09 33 82 F1 | 	sub	local07, arg01
02b84     19 73 52 F2 | 	cmps	local39, local07 wc
02b88     28 01 90 3D |  if_ae	jmp	#LR__0159
02b8c     01 46 06 F1 | 	add	local17, #1
02b90                 | '   k+=1
02b90                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02b90     23 29 02 F6 | 	mov	local02, local17
02b94     37 75 02 F6 | 	mov	local40, local37
02b98     01 74 06 F1 | 	add	local40, #1
02b9c     35 00 00 FF 
02ba0     0C E4 05 F1 | 	add	objptr, ##27148
02ba4     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ba8                 | LR__0155
02ba8     14 2F 02 F6 | 	mov	local05, local02
02bac     01 2E 86 F1 | 	sub	local05, #1
02bb0     03 2E 66 F0 | 	shl	local05, #3
02bb4     F2 2E 02 F1 | 	add	local05, objptr
02bb8     17 2D 02 FB | 	rdlong	local04, local05
02bbc     14 31 02 F6 | 	mov	local06, local02
02bc0     01 30 86 F1 | 	sub	local06, #1
02bc4     03 30 66 F0 | 	shl	local06, #3
02bc8     F2 30 02 F1 | 	add	local06, objptr
02bcc     04 30 06 F1 | 	add	local06, #4
02bd0     18 2B 02 FB | 	rdlong	local03, local06
02bd4     14 31 02 F6 | 	mov	local06, local02
02bd8     03 30 66 F0 | 	shl	local06, #3
02bdc     F2 30 02 F1 | 	add	local06, objptr
02be0     18 2D 62 FC | 	wrlong	local04, local06
02be4     14 3F 02 F6 | 	mov	local13, local02
02be8     03 3E 66 F0 | 	shl	local13, #3
02bec     F2 3E 02 F1 | 	add	local13, objptr
02bf0     04 3E 06 F1 | 	add	local13, #4
02bf4     1F 2B 62 FC | 	wrlong	local03, local13
02bf8     01 28 86 F1 | 	sub	local02, #1
02bfc     3A 29 52 F2 | 	cmps	local02, local40 wc
02c00     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02c04                 | LR__0156
02c04     37 39 02 F6 | 	mov	local10, local37
02c08     01 38 06 F1 | 	add	local10, #1
02c0c     03 38 66 F0 | 	shl	local10, #3
02c10     F2 38 02 F1 | 	add	local10, objptr
02c14     37 41 02 F6 | 	mov	local14, local37
02c18     03 40 66 F0 | 	shl	local14, #3
02c1c     F2 40 02 F1 | 	add	local14, objptr
02c20     20 31 02 FB | 	rdlong	local06, local14
02c24     37 5D 02 F6 | 	mov	local28, local37
02c28     2E 51 02 F6 | 	mov	local22, local28
02c2c     03 50 66 F0 | 	shl	local22, #3
02c30     F2 52 02 F6 | 	mov	local23, objptr
02c34     F2 50 02 F1 | 	add	local22, objptr
02c38     28 13 02 FB | 	rdlong	arg01, local22
02c3c     35 00 00 FF 
02c40     0C E4 85 F1 | 	sub	objptr, ##27148
02c44     09 33 02 F6 | 	mov	local07, arg01
02c48     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02c4c                 | LR__0157
02c4c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02c50     01 32 06 51 |  if_ne	add	local07, #1
02c54     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02c58                 | LR__0158
02c58     09 33 82 F1 | 	sub	local07, arg01
02c5c     19 15 02 F6 | 	mov	arg02, local07
02c60     39 15 82 F1 | 	sub	arg02, local39
02c64     18 13 02 F6 | 	mov	arg01, local06
02c68     CC 5B B2 FD | 	call	#__system__Right_S
02c6c     1C FB 61 FC | 	wrlong	result1, local10
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     03 38 66 F0 | 	shl	local10, #3
02c78     35 00 00 FF 
02c7c     0C E4 05 F1 | 	add	objptr, ##27148
02c80     F2 38 02 F1 | 	add	local10, objptr
02c84     37 3B 02 F6 | 	mov	local11, local37
02c88     1D 41 02 F6 | 	mov	local14, local11
02c8c     03 40 66 F0 | 	shl	local14, #3
02c90     F2 3E 02 F6 | 	mov	local13, objptr
02c94     F2 40 02 F1 | 	add	local14, objptr
02c98     20 13 02 FB | 	rdlong	arg01, local14
02c9c     39 3D 02 F6 | 	mov	local12, local39
02ca0     1E 15 02 F6 | 	mov	arg02, local12
02ca4     35 00 00 FF 
02ca8     0C E4 85 F1 | 	sub	objptr, ##27148
02cac     00 5B B2 FD | 	call	#__system__Left_S
02cb0     1C FB 61 FC | 	wrlong	result1, local10
02cb4                 | LR__0159
02cb4                 | LR__0160
02cb4     37 39 02 F6 | 	mov	local10, local37
02cb8     03 38 66 F0 | 	shl	local10, #3
02cbc     35 00 00 FF 
02cc0     0C E4 05 F1 | 	add	objptr, ##27148
02cc4     F2 38 02 F1 | 	add	local10, objptr
02cc8     1C 77 02 FB | 	rdlong	local41, local10
02ccc                 | ' 
02ccc                 | ' 825
02ccc                 | ' lp$=lparts(addptr).part$ 
02ccc                 | ' 
02ccc                 | ' ' process mouse/cursor/click on/off
02ccc                 | ' 
02ccc                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02ccc     B1 01 00 FF 
02cd0     1F 15 06 F6 | 	mov	arg02, ##@LR__5438
02cd4     3B 13 02 F6 | 	mov	arg01, local41
02cd8     35 00 00 FF 
02cdc     0C E4 85 F1 | 	sub	objptr, ##27148
02ce0     78 3A B2 FD | 	call	#__system___string_cmp
02ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce8     30 00 90 AD |  if_e	jmp	#LR__0161
02cec     B1 01 00 FF 
02cf0     25 15 06 F6 | 	mov	arg02, ##@LR__5439
02cf4     3B 13 02 F6 | 	mov	arg01, local41
02cf8     60 3A B2 FD | 	call	#__system___string_cmp
02cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02d00     18 00 90 AD |  if_e	jmp	#LR__0161
02d04     B1 01 00 FF 
02d08     2C 15 06 F6 | 	mov	arg02, ##@LR__5440
02d0c     3B 13 02 F6 | 	mov	arg01, local41
02d10     48 3A B2 FD | 	call	#__system___string_cmp
02d14     00 FA 0D F2 | 	cmp	result1, #0 wz
02d18     E0 00 90 5D |  if_ne	jmp	#LR__0164
02d1c                 | LR__0161
02d1c                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02d1c     37 2F 02 F6 | 	mov	local05, local37
02d20     01 2E 06 F1 | 	add	local05, #1
02d24     03 2E 66 F0 | 	shl	local05, #3
02d28     35 00 00 FF 
02d2c     0C E4 05 F1 | 	add	objptr, ##27148
02d30     F2 2E 02 F1 | 	add	local05, objptr
02d34     17 13 02 FB | 	rdlong	arg01, local05
02d38     B1 01 00 FF 
02d3c     32 15 06 F6 | 	mov	arg02, ##@LR__5441
02d40     35 00 00 FF 
02d44     0C E4 85 F1 | 	sub	objptr, ##27148
02d48     10 3A B2 FD | 	call	#__system___string_cmp
02d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d50     38 00 90 5D |  if_ne	jmp	#LR__0162
02d54     37 39 02 F6 | 	mov	local10, local37
02d58     01 38 06 F1 | 	add	local10, #1
02d5c     03 38 66 F0 | 	shl	local10, #3
02d60     35 00 00 FF 
02d64     0C E4 05 F1 | 	add	objptr, ##27148
02d68     F2 38 02 F1 | 	add	local10, objptr
02d6c     B1 01 00 FF 
02d70     35 31 06 F6 | 	mov	local06, ##@LR__5442
02d74     1C 31 62 FC | 	wrlong	local06, local10
02d78     14 E4 05 F1 | 	add	objptr, #20
02d7c     01 00 80 FF 
02d80     F2 00 68 FC | 	wrlong	##512, objptr
02d84     35 00 00 FF 
02d88     20 E4 85 F1 | 	sub	objptr, ##27168
02d8c                 | LR__0162
02d8c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02d8c     37 2F 02 F6 | 	mov	local05, local37
02d90     01 2E 06 F1 | 	add	local05, #1
02d94     03 2E 66 F0 | 	shl	local05, #3
02d98     35 00 00 FF 
02d9c     0C E4 05 F1 | 	add	objptr, ##27148
02da0     F2 2E 02 F1 | 	add	local05, objptr
02da4     17 13 02 FB | 	rdlong	arg01, local05
02da8     B1 01 00 FF 
02dac     37 15 06 F6 | 	mov	arg02, ##@LR__5443
02db0     35 00 00 FF 
02db4     0C E4 85 F1 | 	sub	objptr, ##27148
02db8     A0 39 B2 FD | 	call	#__system___string_cmp
02dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dc0     38 00 90 5D |  if_ne	jmp	#LR__0163
02dc4     37 39 02 F6 | 	mov	local10, local37
02dc8     01 38 06 F1 | 	add	local10, #1
02dcc     03 38 66 F0 | 	shl	local10, #3
02dd0     35 00 00 FF 
02dd4     0C E4 05 F1 | 	add	objptr, ##27148
02dd8     F2 38 02 F1 | 	add	local10, objptr
02ddc     B1 01 00 FF 
02de0     3B 31 06 F6 | 	mov	local06, ##@LR__5444
02de4     1C 31 62 FC | 	wrlong	local06, local10
02de8     14 E4 05 F1 | 	add	objptr, #20
02dec     01 00 80 FF 
02df0     F2 00 68 FC | 	wrlong	##512, objptr
02df4     35 00 00 FF 
02df8     20 E4 85 F1 | 	sub	objptr, ##27168
02dfc                 | LR__0163
02dfc                 | LR__0164
02dfc                 | ' 		
02dfc                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02dfc                 | ' 
02dfc                 | ' if (lp$="mode" orelse lp$="m.") then 
02dfc     B1 01 00 FF 
02e00     3D 15 06 F6 | 	mov	arg02, ##@LR__5445
02e04     3B 13 02 F6 | 	mov	arg01, local41
02e08     50 39 B2 FD | 	call	#__system___string_cmp
02e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e10     18 00 90 AD |  if_e	jmp	#LR__0165
02e14     B1 01 00 FF 
02e18     42 15 06 F6 | 	mov	arg02, ##@LR__5446
02e1c     3B 13 02 F6 | 	mov	arg01, local41
02e20     38 39 B2 FD | 	call	#__system___string_cmp
02e24     00 FA 0D F2 | 	cmp	result1, #0 wz
02e28     F4 01 90 5D |  if_ne	jmp	#LR__0171
02e2c                 | LR__0165
02e2c                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02e2c     37 2F 02 F6 | 	mov	local05, local37
02e30     01 2E 06 F1 | 	add	local05, #1
02e34     03 2E 66 F0 | 	shl	local05, #3
02e38     35 00 00 FF 
02e3c     0C E4 05 F1 | 	add	objptr, ##27148
02e40     F2 2E 02 F1 | 	add	local05, objptr
02e44     17 13 02 FB | 	rdlong	arg01, local05
02e48     B1 01 00 FF 
02e4c     45 15 06 F6 | 	mov	arg02, ##@LR__5447
02e50     35 00 00 FF 
02e54     0C E4 85 F1 | 	sub	objptr, ##27148
02e58     00 39 B2 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     2C 00 90 5D |  if_ne	jmp	#LR__0166
02e64     37 39 02 F6 | 	mov	local10, local37
02e68     01 38 06 F1 | 	add	local10, #1
02e6c     03 38 66 F0 | 	shl	local10, #3
02e70     35 00 00 FF 
02e74     0C E4 05 F1 | 	add	objptr, ##27148
02e78     F2 38 02 F1 | 	add	local10, objptr
02e7c     B1 01 00 FF 
02e80     4B 31 06 F6 | 	mov	local06, ##@LR__5448
02e84     1C 31 62 FC | 	wrlong	local06, local10
02e88     35 00 00 FF 
02e8c     0C E4 85 F1 | 	sub	objptr, ##27148
02e90                 | LR__0166
02e90                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02e90     37 2F 02 F6 | 	mov	local05, local37
02e94     01 2E 06 F1 | 	add	local05, #1
02e98     03 2E 66 F0 | 	shl	local05, #3
02e9c     35 00 00 FF 
02ea0     0C E4 05 F1 | 	add	objptr, ##27148
02ea4     F2 2E 02 F1 | 	add	local05, objptr
02ea8     17 13 02 FB | 	rdlong	arg01, local05
02eac     B1 01 00 FF 
02eb0     4D 15 06 F6 | 	mov	arg02, ##@LR__5449
02eb4     35 00 00 FF 
02eb8     0C E4 85 F1 | 	sub	objptr, ##27148
02ebc     9C 38 B2 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     2C 00 90 5D |  if_ne	jmp	#LR__0167
02ec8     37 39 02 F6 | 	mov	local10, local37
02ecc     01 38 06 F1 | 	add	local10, #1
02ed0     03 38 66 F0 | 	shl	local10, #3
02ed4     35 00 00 FF 
02ed8     0C E4 05 F1 | 	add	objptr, ##27148
02edc     F2 38 02 F1 | 	add	local10, objptr
02ee0     B1 01 00 FF 
02ee4     56 31 06 F6 | 	mov	local06, ##@LR__5450
02ee8     1C 31 62 FC | 	wrlong	local06, local10
02eec     35 00 00 FF 
02ef0     0C E4 85 F1 | 	sub	objptr, ##27148
02ef4                 | LR__0167
02ef4                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02ef4     37 2F 02 F6 | 	mov	local05, local37
02ef8     01 2E 06 F1 | 	add	local05, #1
02efc     03 2E 66 F0 | 	shl	local05, #3
02f00     35 00 00 FF 
02f04     0C E4 05 F1 | 	add	objptr, ##27148
02f08     F2 2E 02 F1 | 	add	local05, objptr
02f0c     17 13 02 FB | 	rdlong	arg01, local05
02f10     B1 01 00 FF 
02f14     58 15 06 F6 | 	mov	arg02, ##@LR__5451
02f18     35 00 00 FF 
02f1c     0C E4 85 F1 | 	sub	objptr, ##27148
02f20     38 38 B2 FD | 	call	#__system___string_cmp
02f24     00 FA 0D F2 | 	cmp	result1, #0 wz
02f28     2C 00 90 5D |  if_ne	jmp	#LR__0168
02f2c     37 39 02 F6 | 	mov	local10, local37
02f30     01 38 06 F1 | 	add	local10, #1
02f34     03 38 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     0C E4 05 F1 | 	add	objptr, ##27148
02f40     F2 38 02 F1 | 	add	local10, objptr
02f44     B1 01 00 FF 
02f48     61 31 06 F6 | 	mov	local06, ##@LR__5452
02f4c     1C 31 62 FC | 	wrlong	local06, local10
02f50     35 00 00 FF 
02f54     0C E4 85 F1 | 	sub	objptr, ##27148
02f58                 | LR__0168
02f58                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02f58     37 2F 02 F6 | 	mov	local05, local37
02f5c     01 2E 06 F1 | 	add	local05, #1
02f60     03 2E 66 F0 | 	shl	local05, #3
02f64     35 00 00 FF 
02f68     0C E4 05 F1 | 	add	objptr, ##27148
02f6c     F2 2E 02 F1 | 	add	local05, objptr
02f70     17 13 02 FB | 	rdlong	arg01, local05
02f74     B1 01 00 FF 
02f78     63 15 06 F6 | 	mov	arg02, ##@LR__5453
02f7c     35 00 00 FF 
02f80     0C E4 85 F1 | 	sub	objptr, ##27148
02f84     D4 37 B2 FD | 	call	#__system___string_cmp
02f88     00 FA 0D F2 | 	cmp	result1, #0 wz
02f8c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f90     37 39 02 F6 | 	mov	local10, local37
02f94     01 38 06 F1 | 	add	local10, #1
02f98     03 38 66 F0 | 	shl	local10, #3
02f9c     35 00 00 FF 
02fa0     0C E4 05 F1 | 	add	objptr, ##27148
02fa4     F2 38 02 F1 | 	add	local10, objptr
02fa8     B1 01 00 FF 
02fac     6C 31 06 F6 | 	mov	local06, ##@LR__5454
02fb0     1C 31 62 FC | 	wrlong	local06, local10
02fb4     35 00 00 FF 
02fb8     0C E4 85 F1 | 	sub	objptr, ##27148
02fbc                 | LR__0169
02fbc                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02fbc     37 2F 02 F6 | 	mov	local05, local37
02fc0     01 2E 06 F1 | 	add	local05, #1
02fc4     03 2E 66 F0 | 	shl	local05, #3
02fc8     35 00 00 FF 
02fcc     0C E4 05 F1 | 	add	objptr, ##27148
02fd0     F2 2E 02 F1 | 	add	local05, objptr
02fd4     17 13 02 FB | 	rdlong	arg01, local05
02fd8     B1 01 00 FF 
02fdc     6E 15 06 F6 | 	mov	arg02, ##@LR__5455
02fe0     35 00 00 FF 
02fe4     0C E4 85 F1 | 	sub	objptr, ##27148
02fe8     70 37 B2 FD | 	call	#__system___string_cmp
02fec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff0     2C 00 90 5D |  if_ne	jmp	#LR__0170
02ff4     37 39 02 F6 | 	mov	local10, local37
02ff8     01 38 06 F1 | 	add	local10, #1
02ffc     03 38 66 F0 | 	shl	local10, #3
03000     35 00 00 FF 
03004     0C E4 05 F1 | 	add	objptr, ##27148
03008     F2 38 02 F1 | 	add	local10, objptr
0300c     B1 01 00 FF 
03010     71 31 06 F6 | 	mov	local06, ##@LR__5456
03014     1C 31 62 FC | 	wrlong	local06, local10
03018     35 00 00 FF 
0301c     0C E4 85 F1 | 	sub	objptr, ##27148
03020                 | LR__0170
03020                 | LR__0171
03020                 | ' 
03020                 | ' ' find part types 
03020                 | ' 
03020                 | ' for i=0 to k-1
03020     00 28 06 F6 | 	mov	local02, #0
03024     23 79 02 F6 | 	mov	local42, local17
03028                 | LR__0172
03028     3C 29 52 F2 | 	cmps	local02, local42 wc
0302c     A4 07 90 3D |  if_ae	jmp	#LR__0184
03030     14 39 02 F6 | 	mov	local10, local02
03034     03 38 66 F0 | 	shl	local10, #3
03038     35 00 00 FF 
0303c     0C E4 05 F1 | 	add	objptr, ##27148
03040     F2 38 02 F1 | 	add	local10, objptr
03044     14 3B 02 F6 | 	mov	local11, local02
03048     1D 41 02 F6 | 	mov	local14, local11
0304c     20 3F 02 F6 | 	mov	local13, local14
03050     03 3E 66 F0 | 	shl	local13, #3
03054     F2 3E 02 F1 | 	add	local13, objptr
03058     1F 13 02 FB | 	rdlong	arg01, local13
0305c     35 00 00 FF 
03060     0C E4 85 F1 | 	sub	objptr, ##27148
03064     70 1B B0 FD | 	call	#_isseparator
03068     FD FA E1 F8 | 	getbyte	result1, result1, #0
0306c     04 38 06 F1 | 	add	local10, #4
03070     1C FB 61 FC | 	wrlong	result1, local10
03074                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03074     14 39 02 F6 | 	mov	local10, local02
03078     03 38 66 F0 | 	shl	local10, #3
0307c     35 00 00 FF 
03080     0C E4 05 F1 | 	add	objptr, ##27148
03084     F2 38 02 F1 | 	add	local10, objptr
03088     04 38 06 F1 | 	add	local10, #4
0308c     1C 3D 02 FB | 	rdlong	local12, local10
03090     01 3C 56 F2 | 	cmps	local12, #1 wc
03094     35 00 00 FF 
03098     0C E4 85 F1 | 	sub	objptr, ##27148
0309c     2C 07 90 3D |  if_ae	jmp	#LR__0183
030a0     14 39 02 F6 | 	mov	local10, local02
030a4     03 38 66 F0 | 	shl	local10, #3
030a8     35 00 00 FF 
030ac     0C E4 05 F1 | 	add	objptr, ##27148
030b0     F2 38 02 F1 | 	add	local10, objptr
030b4     14 3B 02 F6 | 	mov	local11, local02
030b8     1D 41 02 F6 | 	mov	local14, local11
030bc     20 3F 02 F6 | 	mov	local13, local14
030c0     03 3E 66 F0 | 	shl	local13, #3
030c4     F2 3E 02 F1 | 	add	local13, objptr
030c8     1F 13 02 FB | 	rdlong	arg01, local13
030cc     35 00 00 FF 
030d0     0C E4 85 F1 | 	sub	objptr, ##27148
030d4     4C 13 B0 FD | 	call	#_isoperator
030d8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030dc     04 38 06 F1 | 	add	local10, #4
030e0     1C FB 61 FC | 	wrlong	result1, local10
030e4                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030e4     14 39 02 F6 | 	mov	local10, local02
030e8     03 38 66 F0 | 	shl	local10, #3
030ec     35 00 00 FF 
030f0     0C E4 05 F1 | 	add	objptr, ##27148
030f4     F2 38 02 F1 | 	add	local10, objptr
030f8     04 38 06 F1 | 	add	local10, #4
030fc     1C 3D 02 FB | 	rdlong	local12, local10
03100     01 3C 56 F2 | 	cmps	local12, #1 wc
03104     35 00 00 FF 
03108     0C E4 85 F1 | 	sub	objptr, ##27148
0310c     BC 06 90 3D |  if_ae	jmp	#LR__0183
03110     14 39 02 F6 | 	mov	local10, local02
03114     03 38 66 F0 | 	shl	local10, #3
03118     35 00 00 FF 
0311c     0C E4 05 F1 | 	add	objptr, ##27148
03120     F2 38 02 F1 | 	add	local10, objptr
03124     14 3B 02 F6 | 	mov	local11, local02
03128     1D 41 02 F6 | 	mov	local14, local11
0312c     20 3F 02 F6 | 	mov	local13, local14
03130     03 3E 66 F0 | 	shl	local13, #3
03134     F2 3E 02 F1 | 	add	local13, objptr
03138     1F 13 02 FB | 	rdlong	arg01, local13
0313c     35 00 00 FF 
03140     0C E4 85 F1 | 	sub	objptr, ##27148
03144                 | ' 
03144                 | ' select case s
03144     B2 01 00 FF 
03148     76 14 06 F6 | 	mov	arg02, ##@LR__5547
0314c     0C 36 B2 FD | 	call	#__system___string_cmp
03150     00 FA 0D F2 | 	cmp	result1, #0 wz
03154     1B FA 05 A6 |  if_e	mov	result1, #27
03158     00 FA 05 56 |  if_ne	mov	result1, #0
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 38 06 F1 | 	add	local10, #4
03164     1C FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     04 38 06 F1 | 	add	local10, #4
03180     1C 3D 02 FB | 	rdlong	local12, local10
03184     01 3C 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     38 06 90 3D |  if_ae	jmp	#LR__0183
03194     14 39 02 F6 | 	mov	local10, local02
03198     03 38 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 38 02 F1 | 	add	local10, objptr
031a8     14 3B 02 F6 | 	mov	local11, local02
031ac     1D 41 02 F6 | 	mov	local14, local11
031b0     20 3F 02 F6 | 	mov	local13, local14
031b4     03 3E 66 F0 | 	shl	local13, #3
031b8     F2 3E 02 F1 | 	add	local13, objptr
031bc     1F 13 02 FB | 	rdlong	arg01, local13
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     0C 1C B0 FD | 	call	#_iscommand
031cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
031d0     04 38 06 F1 | 	add	local10, #4
031d4     1C FB 61 FC | 	wrlong	result1, local10
031d8                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031d8     14 39 02 F6 | 	mov	local10, local02
031dc     03 38 66 F0 | 	shl	local10, #3
031e0     35 00 00 FF 
031e4     0C E4 05 F1 | 	add	objptr, ##27148
031e8     F2 38 02 F1 | 	add	local10, objptr
031ec     04 38 06 F1 | 	add	local10, #4
031f0     1C 3D 02 FB | 	rdlong	local12, local10
031f4     01 3C 56 F2 | 	cmps	local12, #1 wc
031f8     35 00 00 FF 
031fc     0C E4 85 F1 | 	sub	objptr, ##27148
03200     C8 05 90 3D |  if_ae	jmp	#LR__0183
03204     14 39 02 F6 | 	mov	local10, local02
03208     03 38 66 F0 | 	shl	local10, #3
0320c     35 00 00 FF 
03210     0C E4 05 F1 | 	add	objptr, ##27148
03214     F2 38 02 F1 | 	add	local10, objptr
03218     14 3B 02 F6 | 	mov	local11, local02
0321c     1D 41 02 F6 | 	mov	local14, local11
03220     20 3F 02 F6 | 	mov	local13, local14
03224     03 3E 66 F0 | 	shl	local13, #3
03228     F2 5C 02 F6 | 	mov	local28, objptr
0322c     F2 3E 02 F1 | 	add	local13, objptr
03230     1F 13 02 FB | 	rdlong	arg01, local13
03234     35 00 00 FF 
03238     0C E4 85 F1 | 	sub	objptr, ##27148
0323c     78 2C B0 FD | 	call	#_isfunction
03240     FD FA E1 F8 | 	getbyte	result1, result1, #0
03244     04 38 06 F1 | 	add	local10, #4
03248     1C FB 61 FC | 	wrlong	result1, local10
0324c                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0324c     14 39 02 F6 | 	mov	local10, local02
03250     03 38 66 F0 | 	shl	local10, #3
03254     35 00 00 FF 
03258     0C E4 05 F1 | 	add	objptr, ##27148
0325c     F2 38 02 F1 | 	add	local10, objptr
03260     04 38 06 F1 | 	add	local10, #4
03264     1C 3D 02 FB | 	rdlong	local12, local10
03268     01 3C 56 F2 | 	cmps	local12, #1 wc
0326c     35 00 00 FF 
03270     0C E4 85 F1 | 	sub	objptr, ##27148
03274     54 05 90 3D |  if_ae	jmp	#LR__0183
03278     14 39 02 F6 | 	mov	local10, local02
0327c     03 38 66 F0 | 	shl	local10, #3
03280     35 00 00 FF 
03284     0C E4 05 F1 | 	add	objptr, ##27148
03288     F2 38 02 F1 | 	add	local10, objptr
0328c     14 3B 02 F6 | 	mov	local11, local02
03290     1D 41 02 F6 | 	mov	local14, local11
03294     03 40 66 F0 | 	shl	local14, #3
03298     F2 3E 02 F6 | 	mov	local13, objptr
0329c     F2 40 02 F1 | 	add	local14, objptr
032a0     20 13 02 FB | 	rdlong	arg01, local14
032a4     35 00 00 FF 
032a8     0C E4 85 F1 | 	sub	objptr, ##27148
032ac     BC 15 B0 FD | 	call	#_isnotename
032b0     04 38 06 F1 | 	add	local10, #4
032b4     1C FB 61 FC | 	wrlong	result1, local10
032b8                 | ' lparts(i).token=isnotename(lparts(i).part$) 
032b8                 | ' if lparts(i).token>0 then 
032b8     14 39 02 F6 | 	mov	local10, local02
032bc     03 38 66 F0 | 	shl	local10, #3
032c0     35 00 00 FF 
032c4     0C E4 05 F1 | 	add	objptr, ##27148
032c8     F2 38 02 F1 | 	add	local10, objptr
032cc     04 38 06 F1 | 	add	local10, #4
032d0     1C 31 02 FB | 	rdlong	local06, local10
032d4     01 30 56 F2 | 	cmps	local06, #1 wc
032d8     35 00 00 FF 
032dc     0C E4 85 F1 | 	sub	objptr, ##27148
032e0     8C 00 90 CD |  if_b	jmp	#LR__0173
032e4     14 2F 02 F6 | 	mov	local05, local02
032e8     03 2E 66 F0 | 	shl	local05, #3
032ec     35 00 00 FF 
032f0     0C E4 05 F1 | 	add	objptr, ##27148
032f4     F2 2E 02 F1 | 	add	local05, objptr
032f8     04 2E 06 F1 | 	add	local05, #4
032fc     17 3D 02 FB | 	rdlong	local12, local05
03300     1E 13 02 F6 | 	mov	arg01, local12
03304     35 00 00 FF 
03308     0C E4 85 F1 | 	sub	objptr, ##27148
0330c     90 3C B0 FD | 	call	#_getnoteval
03310     FD 7A 02 F6 | 	mov	local43, result1
03314     14 39 02 F6 | 	mov	local10, local02
03318     03 38 66 F0 | 	shl	local10, #3
0331c     35 00 00 FF 
03320     0C E4 05 F1 | 	add	objptr, ##27148
03324     F2 38 02 F1 | 	add	local10, objptr
03328     3D 13 02 F6 | 	mov	arg01, local43
0332c     35 00 00 FF 
03330     0C E4 85 F1 | 	sub	objptr, ##27148
03334     70 56 B2 FD | 	call	#__system__str_S
03338     1C FB 61 FC | 	wrlong	result1, local10
0333c     14 2D 02 F6 | 	mov	local04, local02
03340     16 2B 02 F6 | 	mov	local03, local04
03344     15 39 02 F6 | 	mov	local10, local03
03348     03 38 66 F0 | 	shl	local10, #3
0334c     35 00 00 FF 
03350     0C E4 05 F1 | 	add	objptr, ##27148
03354     F2 38 02 F1 | 	add	local10, objptr
03358     04 38 06 F1 | 	add	local10, #4
0335c     01 00 80 FF 
03360     1C 05 68 FC | 	wrlong	##514, local10
03364     35 00 00 FF 
03368     0C E4 85 F1 | 	sub	objptr, ##27148
0336c     5C 04 90 FD | 	jmp	#LR__0183
03370                 | LR__0173
03370     14 39 02 F6 | 	mov	local10, local02
03374     03 38 66 F0 | 	shl	local10, #3
03378     35 00 00 FF 
0337c     0C E4 05 F1 | 	add	objptr, ##27148
03380     F2 38 02 F1 | 	add	local10, objptr
03384     14 41 02 F6 | 	mov	local14, local02
03388     03 40 66 F0 | 	shl	local14, #3
0338c     F2 40 02 F1 | 	add	local14, objptr
03390     20 13 02 FB | 	rdlong	arg01, local14
03394     35 00 00 FF 
03398     0C E4 85 F1 | 	sub	objptr, ##27148
0339c     64 13 B0 FD | 	call	#_ischannel
033a0     04 38 06 F1 | 	add	local10, #4
033a4     1C FB 61 FC | 	wrlong	result1, local10
033a8                 | ' 
033a8                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
033a8                 | ' 
033a8                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
033a8     14 39 02 F6 | 	mov	local10, local02
033ac     03 38 66 F0 | 	shl	local10, #3
033b0     35 00 00 FF 
033b4     0C E4 05 F1 | 	add	objptr, ##27148
033b8     F2 38 02 F1 | 	add	local10, objptr
033bc     04 38 06 F1 | 	add	local10, #4
033c0     1C 31 02 FB | 	rdlong	local06, local10
033c4     01 30 56 F2 | 	cmps	local06, #1 wc
033c8     35 00 00 FF 
033cc     0C E4 85 F1 | 	sub	objptr, ##27148
033d0     74 00 90 CD |  if_b	jmp	#LR__0174
033d4     14 39 02 F6 | 	mov	local10, local02
033d8     03 38 66 F0 | 	shl	local10, #3
033dc     35 00 00 FF 
033e0     0C E4 05 F1 | 	add	objptr, ##27148
033e4     F2 38 02 F1 | 	add	local10, objptr
033e8     14 3B 02 F6 | 	mov	local11, local02
033ec     1D 41 02 F6 | 	mov	local14, local11
033f0     03 40 66 F0 | 	shl	local14, #3
033f4     F2 3E 02 F6 | 	mov	local13, objptr
033f8     F2 40 02 F1 | 	add	local14, objptr
033fc     20 13 02 FB | 	rdlong	arg01, local14
03400     01 3C 06 F6 | 	mov	local12, #1
03404     01 14 06 F6 | 	mov	arg02, #1
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     24 54 B2 FD | 	call	#__system__Right_S
03414     1C FB 61 FC | 	wrlong	result1, local10
03418     14 2D 02 F6 | 	mov	local04, local02
0341c     16 2B 02 F6 | 	mov	local03, local04
03420     15 39 02 F6 | 	mov	local10, local03
03424     03 38 66 F0 | 	shl	local10, #3
03428     35 00 00 FF 
0342c     0C E4 05 F1 | 	add	objptr, ##27148
03430     F2 38 02 F1 | 	add	local10, objptr
03434     04 38 06 F1 | 	add	local10, #4
03438     1C 59 68 FC | 	wrlong	#44, local10
0343c     35 00 00 FF 
03440     0C E4 85 F1 | 	sub	objptr, ##27148
03444     84 03 90 FD | 	jmp	#LR__0183
03448                 | LR__0174
03448     14 39 02 F6 | 	mov	local10, local02
0344c     03 38 66 F0 | 	shl	local10, #3
03450     35 00 00 FF 
03454     0C E4 05 F1 | 	add	objptr, ##27148
03458     F2 38 02 F1 | 	add	local10, objptr
0345c     14 3B 02 F6 | 	mov	local11, local02
03460     1D 41 02 F6 | 	mov	local14, local11
03464     03 40 66 F0 | 	shl	local14, #3
03468     F2 3E 02 F6 | 	mov	local13, objptr
0346c     F2 40 02 F1 | 	add	local14, objptr
03470     20 13 02 FB | 	rdlong	arg01, local14
03474     35 00 00 FF 
03478     0C E4 85 F1 | 	sub	objptr, ##27148
0347c     6C 13 B0 FD | 	call	#_isconstant
03480     04 38 06 F1 | 	add	local10, #4
03484     1C FB 61 FC | 	wrlong	result1, local10
03488                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03488     14 39 02 F6 | 	mov	local10, local02
0348c     03 38 66 F0 | 	shl	local10, #3
03490     35 00 00 FF 
03494     0C E4 05 F1 | 	add	objptr, ##27148
03498     F2 38 02 F1 | 	add	local10, objptr
0349c     04 38 06 F1 | 	add	local10, #4
034a0     1C 3D 02 FB | 	rdlong	local12, local10
034a4     01 3C 56 F2 | 	cmps	local12, #1 wc
034a8     35 00 00 FF 
034ac     0C E4 85 F1 | 	sub	objptr, ##27148
034b0     94 00 90 CD |  if_b	jmp	#LR__0175
034b4     14 39 02 F6 | 	mov	local10, local02
034b8     03 38 66 F0 | 	shl	local10, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 38 02 F1 | 	add	local10, objptr
034c8     14 3D 02 F6 | 	mov	local12, local02
034cc     1E 3B 02 F6 | 	mov	local11, local12
034d0     1D 41 02 F6 | 	mov	local14, local11
034d4     03 40 66 F0 | 	shl	local14, #3
034d8     F2 3E 02 F6 | 	mov	local13, objptr
034dc     F2 40 02 F1 | 	add	local14, objptr
034e0     04 40 06 F1 | 	add	local14, #4
034e4     20 13 02 FB | 	rdlong	arg01, local14
034e8     04 40 86 F1 | 	sub	local14, #4
034ec     35 00 00 FF 
034f0     0C E4 85 F1 | 	sub	objptr, ##27148
034f4     09 13 52 F6 | 	abs	arg01, arg01 wc
034f8     1F 7C C6 C9 |  if_b	decod	local44, #31
034fc     00 7C 06 36 |  if_ae	mov	local44, #0
03500     A4 5C B2 FD | 	call	#__system___float_fromuns
03504     3E FB 61 F5 | 	xor	result1, local44
03508     FD 12 02 F6 | 	mov	arg01, result1
0350c     98 54 B2 FD | 	call	#__system__str_S
03510     1C FB 61 FC | 	wrlong	result1, local10
03514     14 2D 02 F6 | 	mov	local04, local02
03518     16 2B 02 F6 | 	mov	local03, local04
0351c     15 39 02 F6 | 	mov	local10, local03
03520     03 38 66 F0 | 	shl	local10, #3
03524     35 00 00 FF 
03528     0C E4 05 F1 | 	add	objptr, ##27148
0352c     F2 38 02 F1 | 	add	local10, objptr
03530     04 38 06 F1 | 	add	local10, #4
03534     01 00 80 FF 
03538     1C 03 68 FC | 	wrlong	##513, local10
0353c     35 00 00 FF 
03540     0C E4 85 F1 | 	sub	objptr, ##27148
03544     84 02 90 FD | 	jmp	#LR__0183
03548                 | LR__0175
03548     14 2F 02 F6 | 	mov	local05, local02
0354c     03 2E 66 F0 | 	shl	local05, #3
03550     35 00 00 FF 
03554     0C E4 05 F1 | 	add	objptr, ##27148
03558     F2 2E 02 F1 | 	add	local05, objptr
0355c     17 13 02 FB | 	rdlong	arg01, local05
03560     35 00 00 FF 
03564     0C E4 85 F1 | 	sub	objptr, ##27148
03568     80 32 B0 FD | 	call	#_isnum
0356c     FD 7E 02 F6 | 	mov	local45, result1
03570     14 2F 02 F6 | 	mov	local05, local02
03574     03 2E 66 F0 | 	shl	local05, #3
03578     35 00 00 FF 
0357c     0C E4 05 F1 | 	add	objptr, ##27148
03580     F2 2E 02 F1 | 	add	local05, objptr
03584     17 13 02 FB | 	rdlong	arg01, local05
03588     35 00 00 FF 
0358c     0C E4 85 F1 | 	sub	objptr, ##27148
03590     44 36 B0 FD | 	call	#_isint
03594     FD 80 02 F6 | 	mov	local46, result1
03598     14 2F 02 F6 | 	mov	local05, local02
0359c     03 2E 66 F0 | 	shl	local05, #3
035a0     35 00 00 FF 
035a4     0C E4 05 F1 | 	add	objptr, ##27148
035a8     F2 2E 02 F1 | 	add	local05, objptr
035ac     17 13 02 FB | 	rdlong	arg01, local05
035b0     35 00 00 FF 
035b4     0C E4 85 F1 | 	sub	objptr, ##27148
035b8     C0 38 B0 FD | 	call	#_isdec
035bc     FD 82 02 F6 | 	mov	local47, result1
035c0                 | ' 
035c0                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
035c0                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
035c0     00 7E 0E F2 | 	cmp	local45, #0 wz
035c4     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
035c8     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
035cc     34 00 90 AD |  if_e	jmp	#LR__0176
035d0     14 2D 02 F6 | 	mov	local04, local02
035d4     16 2B 02 F6 | 	mov	local03, local04
035d8     15 39 02 F6 | 	mov	local10, local03
035dc     03 38 66 F0 | 	shl	local10, #3
035e0     35 00 00 FF 
035e4     0C E4 05 F1 | 	add	objptr, ##27148
035e8     F2 38 02 F1 | 	add	local10, objptr
035ec     04 38 06 F1 | 	add	local10, #4
035f0     01 00 80 FF 
035f4     1C 01 68 FC | 	wrlong	##512, local10
035f8     35 00 00 FF 
035fc     0C E4 85 F1 | 	sub	objptr, ##27148
03600     C8 01 90 FD | 	jmp	#LR__0183
03604                 | LR__0176
03604                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03604     00 7E 0E F2 | 	cmp	local45, #0 wz
03608     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
0360c     41 2D 22 56 |  if_ne	not	local04, local47
03610     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03614     34 00 90 AD |  if_e	jmp	#LR__0177
03618     14 2D 02 F6 | 	mov	local04, local02
0361c     16 2B 02 F6 | 	mov	local03, local04
03620     15 39 02 F6 | 	mov	local10, local03
03624     03 38 66 F0 | 	shl	local10, #3
03628     35 00 00 FF 
0362c     0C E4 05 F1 | 	add	objptr, ##27148
03630     F2 38 02 F1 | 	add	local10, objptr
03634     04 38 06 F1 | 	add	local10, #4
03638     01 00 80 FF 
0363c     1C 03 68 FC | 	wrlong	##513, local10
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     80 01 90 FD | 	jmp	#LR__0183
0364c                 | LR__0177
0364c                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
0364c     00 7E 0E F2 | 	cmp	local45, #0 wz
03650     40 2D 22 56 |  if_ne	not	local04, local46
03654     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03658     41 2B 22 56 |  if_ne	not	local03, local47
0365c     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
03660     34 00 90 AD |  if_e	jmp	#LR__0178
03664     14 2D 02 F6 | 	mov	local04, local02
03668     16 2B 02 F6 | 	mov	local03, local04
0366c     15 39 02 F6 | 	mov	local10, local03
03670     03 38 66 F0 | 	shl	local10, #3
03674     35 00 00 FF 
03678     0C E4 05 F1 | 	add	objptr, ##27148
0367c     F2 38 02 F1 | 	add	local10, objptr
03680     04 38 06 F1 | 	add	local10, #4
03684     01 00 80 FF 
03688     1C 05 68 FC | 	wrlong	##514, local10
0368c     35 00 00 FF 
03690     0C E4 85 F1 | 	sub	objptr, ##27148
03694     34 01 90 FD | 	jmp	#LR__0183
03698                 | LR__0178
03698                 | ' 
03698                 | ' if isstring(lparts(i).part$) then 
03698     14 2F 02 F6 | 	mov	local05, local02
0369c     03 2E 66 F0 | 	shl	local05, #3
036a0     35 00 00 FF 
036a4     0C E4 05 F1 | 	add	objptr, ##27148
036a8     F2 2E 02 F1 | 	add	local05, objptr
036ac     17 13 02 FB | 	rdlong	arg01, local05
036b0     35 00 00 FF 
036b4     0C E4 85 F1 | 	sub	objptr, ##27148
036b8     80 38 B0 FD | 	call	#_isstring
036bc     00 FA 0D F2 | 	cmp	result1, #0 wz
036c0     A8 00 90 AD |  if_e	jmp	#LR__0181
036c4     14 39 02 F6 | 	mov	local10, local02
036c8     03 38 66 F0 | 	shl	local10, #3
036cc     35 00 00 FF 
036d0     0C E4 05 F1 | 	add	objptr, ##27148
036d4     F2 38 02 F1 | 	add	local10, objptr
036d8     04 38 06 F1 | 	add	local10, #4
036dc     01 00 80 FF 
036e0     1C 07 68 FC | 	wrlong	##515, local10
036e4     14 2D 02 F6 | 	mov	local04, local02
036e8     16 2B 02 F6 | 	mov	local03, local04
036ec     15 39 02 F6 | 	mov	local10, local03
036f0     03 38 66 F0 | 	shl	local10, #3
036f4     F2 38 02 F1 | 	add	local10, objptr
036f8     14 41 02 F6 | 	mov	local14, local02
036fc     03 40 66 F0 | 	shl	local14, #3
03700     F2 40 02 F1 | 	add	local14, objptr
03704     20 31 02 FB | 	rdlong	local06, local14
03708     02 3C 06 F6 | 	mov	local12, #2
0370c     14 51 02 F6 | 	mov	local22, local02
03710     28 53 02 F6 | 	mov	local23, local22
03714     03 52 66 F0 | 	shl	local23, #3
03718     F2 54 02 F6 | 	mov	local24, objptr
0371c     F2 52 02 F1 | 	add	local23, objptr
03720     29 13 02 FB | 	rdlong	arg01, local23
03724     35 00 00 FF 
03728     0C E4 85 F1 | 	sub	objptr, ##27148
0372c     09 33 02 F6 | 	mov	local07, arg01
03730     97 06 48 FB | 	callpa	#(@LR__0180-@LR__0179)>>2,fcache_load_ptr_
03734                 | LR__0179
03734     19 FB C9 FA | 	rdbyte	result1, local07 wz
03738     01 32 06 51 |  if_ne	add	local07, #1
0373c     F4 FF 9F 5D |  if_ne	jmp	#LR__0179
03740                 | LR__0180
03740     09 33 82 F1 | 	sub	local07, arg01
03744     19 3F 02 F6 | 	mov	local13, local07
03748     1F 41 02 F6 | 	mov	local14, local13
0374c     02 40 86 F1 | 	sub	local14, #2
03750     20 3B 02 F6 | 	mov	local11, local14
03754     18 13 02 F6 | 	mov	arg01, local06
03758     1E 15 02 F6 | 	mov	arg02, local12
0375c     1D 17 02 F6 | 	mov	arg03, local11
03760     64 51 B2 FD | 	call	#__system__Mid_S
03764     1C FB 61 FC | 	wrlong	result1, local10
03768     60 00 90 FD | 	jmp	#LR__0183
0376c                 | LR__0181
0376c                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
0376c     14 2B 02 F6 | 	mov	local03, local02
03770     15 2F 02 F6 | 	mov	local05, local03
03774     03 2E 66 F0 | 	shl	local05, #3
03778     35 00 00 FF 
0377c     0C E4 05 F1 | 	add	objptr, ##27148
03780     F2 2E 02 F1 | 	add	local05, objptr
03784     17 13 02 FB | 	rdlong	arg01, local05
03788     35 00 00 FF 
0378c     0C E4 85 F1 | 	sub	objptr, ##27148
03790     E4 2D B0 FD | 	call	#_isname
03794     FD 2C 0A F6 | 	mov	local04, result1 wz
03798     30 00 90 AD |  if_e	jmp	#LR__0182
0379c     14 2D 02 F6 | 	mov	local04, local02
037a0     16 2B 02 F6 | 	mov	local03, local04
037a4     15 39 02 F6 | 	mov	local10, local03
037a8     03 38 66 F0 | 	shl	local10, #3
037ac     35 00 00 FF 
037b0     0C E4 05 F1 | 	add	objptr, ##27148
037b4     F2 38 02 F1 | 	add	local10, objptr
037b8     04 38 06 F1 | 	add	local10, #4
037bc     01 00 80 FF 
037c0     1C 09 68 FC | 	wrlong	##516, local10
037c4     35 00 00 FF 
037c8     0C E4 85 F1 | 	sub	objptr, ##27148
037cc                 | LR__0182
037cc                 | LR__0183
037cc     01 28 06 F1 | 	add	local02, #1
037d0     54 F8 9F FD | 	jmp	#LR__0172
037d4                 | LR__0184
037d4     23 39 02 F6 | 	mov	local10, local17
037d8     03 38 66 F0 | 	shl	local10, #3
037dc     35 00 00 FF 
037e0     0C E4 05 F1 | 	add	objptr, ##27148
037e4     F2 38 02 F1 | 	add	local10, objptr
037e8     04 38 06 F1 | 	add	local10, #4
037ec     1C FD 6B FC | 	wrlong	#510, local10
037f0     23 39 02 F6 | 	mov	local10, local17
037f4     03 38 66 F0 | 	shl	local10, #3
037f8     F2 38 02 F1 | 	add	local10, objptr
037fc     B1 01 00 FF 
03800     73 31 06 F6 | 	mov	local06, ##@LR__5457
03804     1C 31 62 FC | 	wrlong	local06, local10
03808     10 00 00 FF 
0380c     54 E4 05 F1 | 	add	objptr, ##8276
03810     F2 46 62 FC | 	wrlong	local17, objptr
03814     45 00 00 FF 
03818     60 E4 85 F1 | 	sub	objptr, ##35424
0381c                 | ' 
0381c                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
0381c                 | ' 
0381c                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
0381c                 | '  
0381c                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
0381c     B1 01 00 FF 
03820     74 15 06 F6 | 	mov	arg02, ##@LR__5458
03824     3B 13 02 F6 | 	mov	arg01, local41
03828     30 2F B2 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     F0 00 90 AD |  if_e	jmp	#LR__0185
03834     B1 01 00 FF 
03838     79 15 06 F6 | 	mov	arg02, ##@LR__5459
0383c     3B 13 02 F6 | 	mov	arg01, local41
03840     18 2F B2 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     D8 00 90 AD |  if_e	jmp	#LR__0185
0384c     B1 01 00 FF 
03850     7E 31 06 F6 | 	mov	local06, ##@LR__5460
03854     3B 13 02 F6 | 	mov	arg01, local41
03858     18 15 02 F6 | 	mov	arg02, local06
0385c     FC 2E B2 FD | 	call	#__system___string_cmp
03860     00 FA 0D F2 | 	cmp	result1, #0 wz
03864     BC 00 90 AD |  if_e	jmp	#LR__0185
03868     B1 01 00 FF 
0386c     83 3D 06 F6 | 	mov	local12, ##@LR__5461
03870     1E 31 02 F6 | 	mov	local06, local12
03874     3B 13 02 F6 | 	mov	arg01, local41
03878     18 15 02 F6 | 	mov	arg02, local06
0387c     DC 2E B2 FD | 	call	#__system___string_cmp
03880     00 FA 0D F2 | 	cmp	result1, #0 wz
03884     9C 00 90 AD |  if_e	jmp	#LR__0185
03888     B1 01 00 FF 
0388c     87 3B 06 F6 | 	mov	local11, ##@LR__5462
03890     1D 3D 02 F6 | 	mov	local12, local11
03894     3B 13 02 F6 | 	mov	arg01, local41
03898     1E 15 02 F6 | 	mov	arg02, local12
0389c     BC 2E B2 FD | 	call	#__system___string_cmp
038a0     FD 30 0A F6 | 	mov	local06, result1 wz
038a4     7C 00 90 AD |  if_e	jmp	#LR__0185
038a8     B1 01 00 FF 
038ac     8B 41 06 F6 | 	mov	local14, ##@LR__5463
038b0     20 3B 02 F6 | 	mov	local11, local14
038b4     3B 13 02 F6 | 	mov	arg01, local41
038b8     1D 15 02 F6 | 	mov	arg02, local11
038bc     9C 2E B2 FD | 	call	#__system___string_cmp
038c0     FD 3C 0A F6 | 	mov	local12, result1 wz
038c4     5C 00 90 AD |  if_e	jmp	#LR__0185
038c8     B1 01 00 FF 
038cc     8E 3F 06 F6 | 	mov	local13, ##@LR__5464
038d0     1F 41 02 F6 | 	mov	local14, local13
038d4     3B 13 02 F6 | 	mov	arg01, local41
038d8     20 15 02 F6 | 	mov	arg02, local14
038dc     7C 2E B2 FD | 	call	#__system___string_cmp
038e0     FD 3A 0A F6 | 	mov	local11, result1 wz
038e4     3C 00 90 AD |  if_e	jmp	#LR__0185
038e8     B1 01 00 FF 
038ec     92 3F 06 F6 | 	mov	local13, ##@LR__5465
038f0     3B 13 02 F6 | 	mov	arg01, local41
038f4     1F 15 02 F6 | 	mov	arg02, local13
038f8     60 2E B2 FD | 	call	#__system___string_cmp
038fc     FD 40 0A F6 | 	mov	local14, result1 wz
03900     20 00 90 AD |  if_e	jmp	#LR__0185
03904     B1 01 00 FF 
03908     98 51 06 F6 | 	mov	local22, ##@LR__5466
0390c     28 5D 02 F6 | 	mov	local28, local22
03910     3B 13 02 F6 | 	mov	arg01, local41
03914     2E 15 02 F6 | 	mov	arg02, local28
03918     40 2E B2 FD | 	call	#__system___string_cmp
0391c     FD 3E 0A F6 | 	mov	local13, result1 wz
03920     CC 00 90 5D |  if_ne	jmp	#LR__0186
03924                 | LR__0185
03924     37 5D 02 F6 | 	mov	local28, local37
03928     01 5C 06 F1 | 	add	local28, #1
0392c     2E 51 02 F6 | 	mov	local22, local28
03930     28 53 02 F6 | 	mov	local23, local22
03934     03 52 66 F0 | 	shl	local23, #3
03938     35 00 00 FF 
0393c     0C E4 05 F1 | 	add	objptr, ##27148
03940     F2 54 02 F6 | 	mov	local24, objptr
03944     F2 52 02 F1 | 	add	local23, objptr
03948     04 52 06 F1 | 	add	local23, #4
0394c     29 61 02 FB | 	rdlong	local30, local23
03950     04 52 86 F1 | 	sub	local23, #4
03954     30 5F 02 F6 | 	mov	local29, local30
03958     01 00 00 FF 
0395c     04 5E 0E F2 | 	cmp	local29, ##516 wz
03960     35 00 00 FF 
03964     0C E4 85 F1 | 	sub	objptr, ##27148
03968     84 00 90 5D |  if_ne	jmp	#LR__0186
0396c     37 85 02 F6 | 	mov	local48, local37
03970     01 84 06 F1 | 	add	local48, #1
03974     03 84 66 F0 | 	shl	local48, #3
03978     35 00 00 FF 
0397c     0C E4 05 F1 | 	add	objptr, ##27148
03980     F2 86 02 F6 | 	mov	local49, objptr
03984     F2 84 02 F1 | 	add	local48, objptr
03988     42 13 02 FB | 	rdlong	arg01, local48
0398c     01 14 06 F6 | 	mov	arg02, #1
03990     35 00 00 FF 
03994     0C E4 85 F1 | 	sub	objptr, ##27148
03998     9C 4E B2 FD | 	call	#__system__Right_S
0399c     FD 12 02 F6 | 	mov	arg01, result1
039a0     B1 01 00 FF 
039a4     9B 89 06 F6 | 	mov	local50, ##@LR__5467
039a8     44 8B 02 F6 | 	mov	local51, local50
039ac     45 15 02 F6 | 	mov	arg02, local51
039b0     A8 2D B2 FD | 	call	#__system___string_cmp
039b4     FD 62 0A F6 | 	mov	local31, result1 wz
039b8     34 00 90 AD |  if_e	jmp	#LR__0186
039bc     37 39 02 F6 | 	mov	local10, local37
039c0     01 38 06 F1 | 	add	local10, #1
039c4     03 38 66 F0 | 	shl	local10, #3
039c8     35 00 00 FF 
039cc     0C E4 05 F1 | 	add	objptr, ##27148
039d0     F2 38 02 F1 | 	add	local10, objptr
039d4     01 00 00 FF 
039d8     03 30 06 F6 | 	mov	local06, ##515
039dc     04 38 06 F1 | 	add	local10, #4
039e0     01 00 80 FF 
039e4     1C 07 68 FC | 	wrlong	##515, local10
039e8     35 00 00 FF 
039ec     0C E4 85 F1 | 	sub	objptr, ##27148
039f0                 | LR__0186
039f0                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
039f0     B1 01 00 FF 
039f4     9D 15 06 F6 | 	mov	arg02, ##@LR__5468
039f8     3B 13 02 F6 | 	mov	arg01, local41
039fc     5C 2D B2 FD | 	call	#__system___string_cmp
03a00     00 FA 0D F2 | 	cmp	result1, #0 wz
03a04     1C 00 90 AD |  if_e	jmp	#LR__0187
03a08     B1 01 00 FF 
03a0c     A4 2F 06 F6 | 	mov	local05, ##@LR__5469
03a10     3B 13 02 F6 | 	mov	arg01, local41
03a14     17 15 02 F6 | 	mov	arg02, local05
03a18     40 2D B2 FD | 	call	#__system___string_cmp
03a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a20     CC 00 90 5D |  if_ne	jmp	#LR__0188
03a24                 | LR__0187
03a24     37 2F 02 F6 | 	mov	local05, local37
03a28     01 2E 06 F1 | 	add	local05, #1
03a2c     17 31 02 F6 | 	mov	local06, local05
03a30     03 30 66 F0 | 	shl	local06, #3
03a34     35 00 00 FF 
03a38     0C E4 05 F1 | 	add	objptr, ##27148
03a3c     F2 3C 02 F6 | 	mov	local12, objptr
03a40     F2 30 02 F1 | 	add	local06, objptr
03a44     04 30 06 F1 | 	add	local06, #4
03a48     18 41 02 FB | 	rdlong	local14, local06
03a4c     04 30 86 F1 | 	sub	local06, #4
03a50     20 3B 02 F6 | 	mov	local11, local14
03a54     01 00 00 FF 
03a58     04 3A 0E F2 | 	cmp	local11, ##516 wz
03a5c     35 00 00 FF 
03a60     0C E4 85 F1 | 	sub	objptr, ##27148
03a64     88 00 90 5D |  if_ne	jmp	#LR__0188
03a68     37 53 02 F6 | 	mov	local23, local37
03a6c     01 52 06 F1 | 	add	local23, #1
03a70     03 52 66 F0 | 	shl	local23, #3
03a74     35 00 00 FF 
03a78     0C E4 05 F1 | 	add	objptr, ##27148
03a7c     F2 54 02 F6 | 	mov	local24, objptr
03a80     F2 52 02 F1 | 	add	local23, objptr
03a84     29 13 02 FB | 	rdlong	arg01, local23
03a88     01 14 06 F6 | 	mov	arg02, #1
03a8c     35 00 00 FF 
03a90     0C E4 85 F1 | 	sub	objptr, ##27148
03a94     A0 4D B2 FD | 	call	#__system__Right_S
03a98     FD 12 02 F6 | 	mov	arg01, result1
03a9c     B1 01 00 FF 
03aa0     AA 51 06 F6 | 	mov	local22, ##@LR__5470
03aa4     28 5D 02 F6 | 	mov	local28, local22
03aa8     2E 15 02 F6 | 	mov	arg02, local28
03aac     AC 2C B2 FD | 	call	#__system___string_cmp
03ab0     FD 3E 0A F6 | 	mov	local13, result1 wz
03ab4     38 00 90 AD |  if_e	jmp	#LR__0188
03ab8     37 39 02 F6 | 	mov	local10, local37
03abc     01 38 06 F1 | 	add	local10, #1
03ac0     03 38 66 F0 | 	shl	local10, #3
03ac4     35 00 00 FF 
03ac8     0C E4 05 F1 | 	add	objptr, ##27148
03acc     F2 2E 02 F6 | 	mov	local05, objptr
03ad0     F2 38 02 F1 | 	add	local10, objptr
03ad4     01 00 00 FF 
03ad8     03 30 06 F6 | 	mov	local06, ##515
03adc     04 38 06 F1 | 	add	local10, #4
03ae0     01 00 80 FF 
03ae4     1C 07 68 FC | 	wrlong	##515, local10
03ae8     35 00 00 FF 
03aec     0C E4 85 F1 | 	sub	objptr, ##27148
03af0                 | LR__0188
03af0                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03af0     B1 01 00 FF 
03af4     AC 15 06 F6 | 	mov	arg02, ##@LR__5471
03af8     3B 13 02 F6 | 	mov	arg01, local41
03afc     5C 2C B2 FD | 	call	#__system___string_cmp
03b00     00 FA 0D F2 | 	cmp	result1, #0 wz
03b04     C8 00 90 5D |  if_ne	jmp	#LR__0189
03b08     37 2F 02 F6 | 	mov	local05, local37
03b0c     01 2E 06 F1 | 	add	local05, #1
03b10     03 2E 66 F0 | 	shl	local05, #3
03b14     35 00 00 FF 
03b18     0C E4 05 F1 | 	add	objptr, ##27148
03b1c     F2 30 02 F6 | 	mov	local06, objptr
03b20     F2 2E 02 F1 | 	add	local05, objptr
03b24     04 2E 06 F1 | 	add	local05, #4
03b28     17 3B 02 FB | 	rdlong	local11, local05
03b2c     04 2E 86 F1 | 	sub	local05, #4
03b30     1D 3D 02 F6 | 	mov	local12, local11
03b34     01 00 00 FF 
03b38     04 3C 0E F2 | 	cmp	local12, ##516 wz
03b3c     35 00 00 FF 
03b40     0C E4 85 F1 | 	sub	objptr, ##27148
03b44     88 00 90 5D |  if_ne	jmp	#LR__0189
03b48     37 51 02 F6 | 	mov	local22, local37
03b4c     01 50 06 F1 | 	add	local22, #1
03b50     03 50 66 F0 | 	shl	local22, #3
03b54     35 00 00 FF 
03b58     0C E4 05 F1 | 	add	objptr, ##27148
03b5c     F2 52 02 F6 | 	mov	local23, objptr
03b60     F2 50 02 F1 | 	add	local22, objptr
03b64     28 13 02 FB | 	rdlong	arg01, local22
03b68     01 14 06 F6 | 	mov	arg02, #1
03b6c     35 00 00 FF 
03b70     0C E4 85 F1 | 	sub	objptr, ##27148
03b74     C0 4C B2 FD | 	call	#__system__Right_S
03b78     FD 12 02 F6 | 	mov	arg01, result1
03b7c     B1 01 00 FF 
03b80     B1 5D 06 F6 | 	mov	local28, ##@LR__5472
03b84     2E 3F 02 F6 | 	mov	local13, local28
03b88     1F 15 02 F6 | 	mov	arg02, local13
03b8c     CC 2B B2 FD | 	call	#__system___string_cmp
03b90     FD 40 0A F6 | 	mov	local14, result1 wz
03b94     38 00 90 AD |  if_e	jmp	#LR__0189
03b98     37 39 02 F6 | 	mov	local10, local37
03b9c     01 38 06 F1 | 	add	local10, #1
03ba0     03 38 66 F0 | 	shl	local10, #3
03ba4     35 00 00 FF 
03ba8     0C E4 05 F1 | 	add	objptr, ##27148
03bac     F2 2E 02 F6 | 	mov	local05, objptr
03bb0     F2 38 02 F1 | 	add	local10, objptr
03bb4     01 00 00 FF 
03bb8     03 30 06 F6 | 	mov	local06, ##515
03bbc     04 38 06 F1 | 	add	local10, #4
03bc0     01 00 80 FF 
03bc4     1C 07 68 FC | 	wrlong	##515, local10
03bc8     35 00 00 FF 
03bcc     0C E4 85 F1 | 	sub	objptr, ##27148
03bd0                 | LR__0189
03bd0                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03bd0     B1 01 00 FF 
03bd4     B3 15 06 F6 | 	mov	arg02, ##@LR__5473
03bd8     3B 13 02 F6 | 	mov	arg01, local41
03bdc     7C 2B B2 FD | 	call	#__system___string_cmp
03be0     00 FA 0D F2 | 	cmp	result1, #0 wz
03be4     C8 00 90 5D |  if_ne	jmp	#LR__0190
03be8     37 2F 02 F6 | 	mov	local05, local37
03bec     03 2E 06 F1 | 	add	local05, #3
03bf0     03 2E 66 F0 | 	shl	local05, #3
03bf4     35 00 00 FF 
03bf8     0C E4 05 F1 | 	add	objptr, ##27148
03bfc     F2 30 02 F6 | 	mov	local06, objptr
03c00     F2 2E 02 F1 | 	add	local05, objptr
03c04     04 2E 06 F1 | 	add	local05, #4
03c08     17 3B 02 FB | 	rdlong	local11, local05
03c0c     04 2E 86 F1 | 	sub	local05, #4
03c10     1D 3D 02 F6 | 	mov	local12, local11
03c14     01 00 00 FF 
03c18     04 3C 0E F2 | 	cmp	local12, ##516 wz
03c1c     35 00 00 FF 
03c20     0C E4 85 F1 | 	sub	objptr, ##27148
03c24     88 00 90 5D |  if_ne	jmp	#LR__0190
03c28     37 51 02 F6 | 	mov	local22, local37
03c2c     03 50 06 F1 | 	add	local22, #3
03c30     03 50 66 F0 | 	shl	local22, #3
03c34     35 00 00 FF 
03c38     0C E4 05 F1 | 	add	objptr, ##27148
03c3c     F2 52 02 F6 | 	mov	local23, objptr
03c40     F2 50 02 F1 | 	add	local22, objptr
03c44     28 13 02 FB | 	rdlong	arg01, local22
03c48     01 14 06 F6 | 	mov	arg02, #1
03c4c     35 00 00 FF 
03c50     0C E4 85 F1 | 	sub	objptr, ##27148
03c54     E0 4B B2 FD | 	call	#__system__Right_S
03c58     FD 12 02 F6 | 	mov	arg01, result1
03c5c     B1 01 00 FF 
03c60     B8 5D 06 F6 | 	mov	local28, ##@LR__5474
03c64     2E 3F 02 F6 | 	mov	local13, local28
03c68     1F 15 02 F6 | 	mov	arg02, local13
03c6c     EC 2A B2 FD | 	call	#__system___string_cmp
03c70     FD 40 0A F6 | 	mov	local14, result1 wz
03c74     38 00 90 AD |  if_e	jmp	#LR__0190
03c78     37 39 02 F6 | 	mov	local10, local37
03c7c     03 38 06 F1 | 	add	local10, #3
03c80     03 38 66 F0 | 	shl	local10, #3
03c84     35 00 00 FF 
03c88     0C E4 05 F1 | 	add	objptr, ##27148
03c8c     F2 2E 02 F6 | 	mov	local05, objptr
03c90     F2 38 02 F1 | 	add	local10, objptr
03c94     01 00 00 FF 
03c98     03 30 06 F6 | 	mov	local06, ##515
03c9c     04 38 06 F1 | 	add	local10, #4
03ca0     01 00 80 FF 
03ca4     1C 07 68 FC | 	wrlong	##515, local10
03ca8     35 00 00 FF 
03cac     0C E4 85 F1 | 	sub	objptr, ##27148
03cb0                 | LR__0190
03cb0                 | ' 
03cb0                 | ' ' cd needs special treatment..
03cb0                 | ' 
03cb0                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03cb0     B1 01 00 FF 
03cb4     BA 15 06 F6 | 	mov	arg02, ##@LR__5475
03cb8     3B 13 02 F6 | 	mov	arg01, local41
03cbc     9C 2A B2 FD | 	call	#__system___string_cmp
03cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc4     38 00 90 5D |  if_ne	jmp	#LR__0191
03cc8     37 39 02 F6 | 	mov	local10, local37
03ccc     01 38 06 F1 | 	add	local10, #1
03cd0     03 38 66 F0 | 	shl	local10, #3
03cd4     35 00 00 FF 
03cd8     0C E4 05 F1 | 	add	objptr, ##27148
03cdc     F2 2E 02 F6 | 	mov	local05, objptr
03ce0     F2 38 02 F1 | 	add	local10, objptr
03ce4     01 00 00 FF 
03ce8     03 30 06 F6 | 	mov	local06, ##515
03cec     04 38 06 F1 | 	add	local10, #4
03cf0     01 00 80 FF 
03cf4     1C 07 68 FC | 	wrlong	##515, local10
03cf8     35 00 00 FF 
03cfc     0C E4 85 F1 | 	sub	objptr, ##27148
03d00                 | LR__0191
03d00                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03d00     B1 01 00 FF 
03d04     BD 15 06 F6 | 	mov	arg02, ##@LR__5476
03d08     3B 13 02 F6 | 	mov	arg01, local41
03d0c     4C 2A B2 FD | 	call	#__system___string_cmp
03d10     00 FA 0D F2 | 	cmp	result1, #0 wz
03d14     A4 00 90 5D |  if_ne	jmp	#LR__0192
03d18     37 31 02 F6 | 	mov	local06, local37
03d1c     01 30 06 F1 | 	add	local06, #1
03d20     03 30 66 F0 | 	shl	local06, #3
03d24     35 00 00 FF 
03d28     0C E4 05 F1 | 	add	objptr, ##27148
03d2c     F2 3C 02 F6 | 	mov	local12, objptr
03d30     F2 30 02 F1 | 	add	local06, objptr
03d34     18 13 02 FB | 	rdlong	arg01, local06
03d38     B1 01 00 FF 
03d3c     C1 2F 06 F6 | 	mov	local05, ##@LR__5477
03d40     17 15 02 F6 | 	mov	arg02, local05
03d44     35 00 00 FF 
03d48     0C E4 85 F1 | 	sub	objptr, ##27148
03d4c     0C 2A B2 FD | 	call	#__system___string_cmp
03d50     00 FA 0D F2 | 	cmp	result1, #0 wz
03d54     64 00 90 5D |  if_ne	jmp	#LR__0192
03d58     37 39 02 F6 | 	mov	local10, local37
03d5c     01 38 06 F1 | 	add	local10, #1
03d60     03 38 66 F0 | 	shl	local10, #3
03d64     35 00 00 FF 
03d68     0C E4 05 F1 | 	add	objptr, ##27148
03d6c     F2 38 02 F1 | 	add	local10, objptr
03d70     04 38 06 F1 | 	add	local10, #4
03d74     01 00 80 FF 
03d78     1C 07 68 FC | 	wrlong	##515, local10
03d7c     37 39 02 F6 | 	mov	local10, local37
03d80     01 38 06 F1 | 	add	local10, #1
03d84     03 38 66 F0 | 	shl	local10, #3
03d88     F2 38 02 F1 | 	add	local10, objptr
03d8c     B1 01 00 FF 
03d90     C3 31 06 F6 | 	mov	local06, ##@LR__5478
03d94     1C 31 62 FC | 	wrlong	local06, local10
03d98     37 39 02 F6 | 	mov	local10, local37
03d9c     03 38 66 F0 | 	shl	local10, #3
03da0     F2 2E 02 F6 | 	mov	local05, objptr
03da4     F2 38 02 F1 | 	add	local10, objptr
03da8     C3 30 06 F6 | 	mov	local06, #195
03dac     04 38 06 F1 | 	add	local10, #4
03db0     1C 87 69 FC | 	wrlong	#195, local10
03db4     35 00 00 FF 
03db8     0C E4 85 F1 | 	sub	objptr, ##27148
03dbc                 | LR__0192
03dbc                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03dbc     B1 01 00 FF 
03dc0     C6 39 06 F6 | 	mov	local10, ##@LR__5479
03dc4     3B 13 02 F6 | 	mov	arg01, local41
03dc8     1C 15 02 F6 | 	mov	arg02, local10
03dcc     8C 29 B2 FD | 	call	#__system___string_cmp
03dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd4     04 01 90 5D |  if_ne	jmp	#LR__0195
03dd8     37 31 02 F6 | 	mov	local06, local37
03ddc     01 30 06 F1 | 	add	local06, #1
03de0     03 30 66 F0 | 	shl	local06, #3
03de4     35 00 00 FF 
03de8     0C E4 05 F1 | 	add	objptr, ##27148
03dec     F2 3C 02 F6 | 	mov	local12, objptr
03df0     F2 30 02 F1 | 	add	local06, objptr
03df4     18 13 02 FB | 	rdlong	arg01, local06
03df8     B1 01 00 FF 
03dfc     C9 2F 06 F6 | 	mov	local05, ##@LR__5480
03e00     17 39 02 F6 | 	mov	local10, local05
03e04     1C 15 02 F6 | 	mov	arg02, local10
03e08     35 00 00 FF 
03e0c     0C E4 85 F1 | 	sub	objptr, ##27148
03e10     48 29 B2 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     C0 00 90 5D |  if_ne	jmp	#LR__0195
03e1c     37 39 02 F6 | 	mov	local10, local37
03e20     01 38 06 F1 | 	add	local10, #1
03e24     03 38 66 F0 | 	shl	local10, #3
03e28     35 00 00 FF 
03e2c     0C E4 05 F1 | 	add	objptr, ##27148
03e30     F2 2E 02 F6 | 	mov	local05, objptr
03e34     F2 38 02 F1 | 	add	local10, objptr
03e38     01 00 00 FF 
03e3c     03 30 06 F6 | 	mov	local06, ##515
03e40     04 38 06 F1 | 	add	local10, #4
03e44     01 00 80 FF 
03e48     1C 07 68 FC | 	wrlong	##515, local10
03e4c     04 38 86 F1 | 	sub	local10, #4
03e50     37 29 02 F6 | 	mov	local02, local37
03e54     02 28 06 F1 | 	add	local02, #2
03e58     23 8D 02 F6 | 	mov	local52, local17
03e5c     01 8C 06 F1 | 	add	local52, #1
03e60     35 00 00 FF 
03e64     0C E4 85 F1 | 	sub	objptr, ##27148
03e68                 | LR__0193
03e68     46 29 52 F2 | 	cmps	local02, local52 wc
03e6c     6C 00 90 3D |  if_ae	jmp	#LR__0194
03e70     14 39 02 F6 | 	mov	local10, local02
03e74     03 38 66 F0 | 	shl	local10, #3
03e78     35 00 00 FF 
03e7c     0C E4 05 F1 | 	add	objptr, ##27148
03e80     F2 38 02 F1 | 	add	local10, objptr
03e84     1C 8F 02 FB | 	rdlong	local53, local10
03e88     37 39 02 F6 | 	mov	local10, local37
03e8c     01 38 06 F1 | 	add	local10, #1
03e90     03 38 66 F0 | 	shl	local10, #3
03e94     F2 2E 02 F6 | 	mov	local05, objptr
03e98     F2 38 02 F1 | 	add	local10, objptr
03e9c     37 3B 02 F6 | 	mov	local11, local37
03ea0     01 3A 06 F1 | 	add	local11, #1
03ea4     1D 41 02 F6 | 	mov	local14, local11
03ea8     03 40 66 F0 | 	shl	local14, #3
03eac     F2 3E 02 F6 | 	mov	local13, objptr
03eb0     F2 40 02 F1 | 	add	local14, objptr
03eb4     20 13 02 FB | 	rdlong	arg01, local14
03eb8     47 3D 02 F6 | 	mov	local12, local53
03ebc     1E 15 02 F6 | 	mov	arg02, local12
03ec0     35 00 00 FF 
03ec4     0C E4 85 F1 | 	sub	objptr, ##27148
03ec8     C4 28 B2 FD | 	call	#__system___string_concat
03ecc     FD 30 02 F6 | 	mov	local06, result1
03ed0     1C 31 62 FC | 	wrlong	local06, local10
03ed4     01 28 06 F1 | 	add	local02, #1
03ed8     8C FF 9F FD | 	jmp	#LR__0193
03edc                 | LR__0194
03edc                 | LR__0195
03edc                 | ' 
03edc                 | ' ' determine a type of the line and compile it
03edc                 | ' 
03edc                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03edc     35 00 00 FF 
03ee0     0C E4 05 F1 | 	add	objptr, ##27148
03ee4     F2 12 02 FB | 	rdlong	arg01, objptr
03ee8     35 00 00 FF 
03eec     0C E4 85 F1 | 	sub	objptr, ##27148
03ef0     88 2F B0 FD | 	call	#_isdec
03ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef8     30 00 90 AD |  if_e	jmp	#LR__0196
03efc     35 00 00 FF 
03f00     0C E4 05 F1 | 	add	objptr, ##27148
03f04     F2 12 02 FB | 	rdlong	arg01, objptr
03f08     35 00 00 FF 
03f0c     0C E4 85 F1 | 	sub	objptr, ##27148
03f10     00 14 06 F6 | 	mov	arg02, #0
03f14     0C 5D B2 FD | 	call	#__system____builtin_atoi
03f18     52 00 00 FF 
03f1c     B0 E4 05 F1 | 	add	objptr, ##42160
03f20     F2 FA 61 FC | 	wrlong	result1, objptr
03f24     52 00 00 FF 
03f28     B0 E4 85 F1 | 	sub	objptr, ##42160
03f2c                 | LR__0196
03f2c                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03f2c     52 00 00 FF 
03f30     B0 E4 05 F1 | 	add	objptr, ##42160
03f34     F2 2C 02 FB | 	rdlong	local04, objptr
03f38     52 00 00 FF 
03f3c     B0 E4 85 F1 | 	sub	objptr, ##42160
03f40     01 2C 16 F2 | 	cmp	local04, #1 wc
03f44     40 00 90 CD |  if_b	jmp	#LR__0197
03f48     01 46 0E F2 | 	cmp	local17, #1 wz
03f4c     37 00 00 AF 
03f50     24 E4 05 A1 |  if_e	add	objptr, ##28196
03f54     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03f58     37 00 00 AF 
03f5c     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03f60     17 39 02 A6 |  if_e	mov	local10, local05
03f64     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03f68     1C 00 90 5D |  if_ne	jmp	#LR__0197
03f6c     52 00 00 FF 
03f70     B0 E4 05 F1 | 	add	objptr, ##42160
03f74     F2 12 02 FB | 	rdlong	arg01, objptr
03f78     52 00 00 FF 
03f7c     B0 E4 85 F1 | 	sub	objptr, ##42160
03f80     A4 30 B0 FD | 	call	#_deleteline
03f84     C8 03 90 FD | 	jmp	#LR__0208
03f88                 | LR__0197
03f88                 | ' 
03f88                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03f88     37 00 00 FF 
03f8c     24 E4 05 F1 | 	add	objptr, ##28196
03f90     F2 2C 0A FB | 	rdlong	local04, objptr wz
03f94     37 00 00 FF 
03f98     24 E4 85 F1 | 	sub	objptr, ##28196
03f9c     20 00 90 AD |  if_e	jmp	#LR__0198
03fa0     37 00 00 FF 
03fa4     24 E4 05 F1 | 	add	objptr, ##28196
03fa8     F2 2E 02 FB | 	rdlong	local05, objptr
03fac     37 00 00 FF 
03fb0     24 E4 85 F1 | 	sub	objptr, ##28196
03fb4     17 39 02 F6 | 	mov	local10, local05
03fb8     03 38 0E F2 | 	cmp	local10, #3 wz
03fbc     C0 00 90 5D |  if_ne	jmp	#LR__0200
03fc0                 | LR__0198
03fc0     35 00 00 FF 
03fc4     20 E4 05 F1 | 	add	objptr, ##27168
03fc8     F2 3C 02 FB | 	rdlong	local12, objptr
03fcc     35 00 00 FF 
03fd0     20 E4 85 F1 | 	sub	objptr, ##27168
03fd4     1B 3C 0E F2 | 	cmp	local12, #27 wz
03fd8     A4 00 90 AD |  if_e	jmp	#LR__0200
03fdc     52 00 00 FF 
03fe0     B0 E4 05 F1 | 	add	objptr, ##42160
03fe4     F2 12 02 FB | 	rdlong	arg01, objptr
03fe8     1B 00 00 FF 
03fec     8C E4 85 F1 | 	sub	objptr, ##13964
03ff0     F2 16 02 FB | 	rdlong	arg03, objptr
03ff4     37 00 00 FF 
03ff8     24 E4 85 F1 | 	sub	objptr, ##28196
03ffc     00 14 06 F6 | 	mov	arg02, #0
04000     70 44 B0 FD | 	call	#_compile
04004     FD 26 0A F6 | 	mov	local01, result1 wz
04008                 | '   err=compile(linenum,0,cont) 
04008                 | '   if err<>0 then printerror(err,linenum): goto 101
04008     20 00 90 AD |  if_e	jmp	#LR__0199
0400c     52 00 00 FF 
04010     B0 E4 05 F1 | 	add	objptr, ##42160
04014     F2 14 02 FB | 	rdlong	arg02, objptr
04018     52 00 00 FF 
0401c     B0 E4 85 F1 | 	sub	objptr, ##42160
04020     13 13 02 F6 | 	mov	arg01, local01
04024     20 ED B1 FD | 	call	#_printerror
04028     44 03 90 FD | 	jmp	#LR__0209
0402c                 | LR__0199
0402c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
0402c     52 00 00 FF 
04030     F4 E4 05 F1 | 	add	objptr, ##42228
04034     F2 12 02 FB | 	rdlong	arg01, objptr
04038     52 00 00 FF 
0403c     F4 E4 85 F1 | 	sub	objptr, ##42228
04040     B1 01 00 FF 
04044     CB 15 06 F6 | 	mov	arg02, ##@LR__5481
04048     10 27 B2 FD | 	call	#__system___string_cmp
0404c     00 FA 0D F2 | 	cmp	result1, #0 wz
04050     FC 02 90 AD |  if_e	jmp	#LR__0208
04054     52 00 00 FF 
04058     F4 E4 05 F1 | 	add	objptr, ##42228
0405c     F2 2C 02 FB | 	rdlong	local04, objptr
04060     1B 00 00 FF 
04064     D8 E4 85 F1 | 	sub	objptr, ##14040
04068     F2 2C 62 FC | 	wrlong	local04, objptr
0406c     08 E4 05 F1 | 	add	objptr, #8
04070     F2 08 68 FC | 	wrlong	#4, objptr
04074     37 00 00 FF 
04078     24 E4 85 F1 | 	sub	objptr, ##28196
0407c     14 D8 9F FD | 	jmp	#LR__0070
04080                 | LR__0200
04080                 | '       							
04080                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
04080     37 00 00 FF 
04084     24 E4 05 F1 | 	add	objptr, ##28196
04088     F2 2C 02 FB | 	rdlong	local04, objptr
0408c     37 00 00 FF 
04090     24 E4 85 F1 | 	sub	objptr, ##28196
04094     01 2C 0E F2 | 	cmp	local04, #1 wz
04098     37 00 00 5F 
0409c     24 E4 05 51 |  if_ne	add	objptr, ##28196
040a0     F2 38 02 5B |  if_ne	rdlong	local10, objptr
040a4     37 00 00 5F 
040a8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
040ac     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
040b0     C0 00 90 5D |  if_ne	jmp	#LR__0202
040b4     35 00 00 FF 
040b8     18 E4 05 F1 | 	add	objptr, ##27160
040bc     F2 3C 02 FB | 	rdlong	local12, objptr
040c0     35 00 00 FF 
040c4     18 E4 85 F1 | 	sub	objptr, ##27160
040c8     1B 3C 0E F2 | 	cmp	local12, #27 wz
040cc     A4 00 90 AD |  if_e	jmp	#LR__0202
040d0     52 00 00 FF 
040d4     B0 E4 05 F1 | 	add	objptr, ##42160
040d8     F2 12 02 FB | 	rdlong	arg01, objptr
040dc     1B 00 00 FF 
040e0     8C E4 85 F1 | 	sub	objptr, ##13964
040e4     F2 16 02 FB | 	rdlong	arg03, objptr
040e8     37 00 00 FF 
040ec     24 E4 85 F1 | 	sub	objptr, ##28196
040f0     00 14 06 F6 | 	mov	arg02, #0
040f4     7C 43 B0 FD | 	call	#_compile
040f8     FD 26 0A F6 | 	mov	local01, result1 wz
040fc                 | '   err=compile(linenum,0,cont) 
040fc                 | '   if err<>0 then printerror(err,linenum): goto 101
040fc     20 00 90 AD |  if_e	jmp	#LR__0201
04100     52 00 00 FF 
04104     B0 E4 05 F1 | 	add	objptr, ##42160
04108     F2 14 02 FB | 	rdlong	arg02, objptr
0410c     52 00 00 FF 
04110     B0 E4 85 F1 | 	sub	objptr, ##42160
04114     13 13 02 F6 | 	mov	arg01, local01
04118     2C EC B1 FD | 	call	#_printerror
0411c     50 02 90 FD | 	jmp	#LR__0209
04120                 | LR__0201
04120                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
04120     52 00 00 FF 
04124     F4 E4 05 F1 | 	add	objptr, ##42228
04128     F2 12 02 FB | 	rdlong	arg01, objptr
0412c     52 00 00 FF 
04130     F4 E4 85 F1 | 	sub	objptr, ##42228
04134     B1 01 00 FF 
04138     CC 15 06 F6 | 	mov	arg02, ##@LR__5482
0413c     1C 26 B2 FD | 	call	#__system___string_cmp
04140     00 FA 0D F2 | 	cmp	result1, #0 wz
04144     08 02 90 AD |  if_e	jmp	#LR__0208
04148     52 00 00 FF 
0414c     F4 E4 05 F1 | 	add	objptr, ##42228
04150     F2 2C 02 FB | 	rdlong	local04, objptr
04154     1B 00 00 FF 
04158     D8 E4 85 F1 | 	sub	objptr, ##14040
0415c     F2 2C 62 FC | 	wrlong	local04, objptr
04160     08 E4 05 F1 | 	add	objptr, #8
04164     F2 08 68 FC | 	wrlong	#4, objptr
04168     37 00 00 FF 
0416c     24 E4 85 F1 | 	sub	objptr, ##28196
04170     20 D7 9F FD | 	jmp	#LR__0070
04174                 | LR__0202
04174                 | ' 							 
04174                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
04174     37 00 00 FF 
04178     24 E4 05 F1 | 	add	objptr, ##28196
0417c     F2 2C 0A FB | 	rdlong	local04, objptr wz
04180     37 00 00 FF 
04184     24 E4 85 F1 | 	sub	objptr, ##28196
04188     37 00 00 5F 
0418c     24 E4 05 51 |  if_ne	add	objptr, ##28196
04190     F2 38 02 5B |  if_ne	rdlong	local10, objptr
04194     37 00 00 5F 
04198     24 E4 85 51 |  if_ne	sub	objptr, ##28196
0419c     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
041a0     35 00 00 AF 
041a4     20 E4 05 A1 |  if_e	add	objptr, ##27168
041a8     F2 3C 02 AB |  if_e	rdlong	local12, objptr
041ac     35 00 00 AF 
041b0     20 E4 85 A1 |  if_e	sub	objptr, ##27168
041b4     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
041b8     A4 00 90 5D |  if_ne	jmp	#LR__0204
041bc     52 00 00 FF 
041c0     B0 E4 05 F1 | 	add	objptr, ##42160
041c4     F2 12 02 FB | 	rdlong	arg01, objptr
041c8     1B 00 00 FF 
041cc     8C E4 85 F1 | 	sub	objptr, ##13964
041d0     F2 16 02 FB | 	rdlong	arg03, objptr
041d4     37 00 00 FF 
041d8     24 E4 85 F1 | 	sub	objptr, ##28196
041dc     00 14 06 F6 | 	mov	arg02, #0
041e0     58 43 B0 FD | 	call	#_compile_assign
041e4     FD 26 0A F6 | 	mov	local01, result1 wz
041e8                 | '   err=compile_assign(linenum,0,cont)
041e8                 | '   if err<>0 then printerror(err,linenum): goto 101
041e8     20 00 90 AD |  if_e	jmp	#LR__0203
041ec     52 00 00 FF 
041f0     B0 E4 05 F1 | 	add	objptr, ##42160
041f4     F2 14 02 FB | 	rdlong	arg02, objptr
041f8     52 00 00 FF 
041fc     B0 E4 85 F1 | 	sub	objptr, ##42160
04200     13 13 02 F6 | 	mov	arg01, local01
04204     40 EB B1 FD | 	call	#_printerror
04208     64 01 90 FD | 	jmp	#LR__0209
0420c                 | LR__0203
0420c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
0420c     52 00 00 FF 
04210     F4 E4 05 F1 | 	add	objptr, ##42228
04214     F2 12 02 FB | 	rdlong	arg01, objptr
04218     52 00 00 FF 
0421c     F4 E4 85 F1 | 	sub	objptr, ##42228
04220     B1 01 00 FF 
04224     CD 15 06 F6 | 	mov	arg02, ##@LR__5483
04228     30 25 B2 FD | 	call	#__system___string_cmp
0422c     00 FA 0D F2 | 	cmp	result1, #0 wz
04230     1C 01 90 AD |  if_e	jmp	#LR__0208
04234     52 00 00 FF 
04238     F4 E4 05 F1 | 	add	objptr, ##42228
0423c     F2 2C 02 FB | 	rdlong	local04, objptr
04240     1B 00 00 FF 
04244     D8 E4 85 F1 | 	sub	objptr, ##14040
04248     F2 2C 62 FC | 	wrlong	local04, objptr
0424c     08 E4 05 F1 | 	add	objptr, #8
04250     F2 08 68 FC | 	wrlong	#4, objptr
04254     37 00 00 FF 
04258     24 E4 85 F1 | 	sub	objptr, ##28196
0425c     34 D6 9F FD | 	jmp	#LR__0070
04260                 | LR__0204
04260                 | '     							 
04260                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
04260     37 00 00 FF 
04264     24 E4 05 F1 | 	add	objptr, ##28196
04268     F2 2C 02 FB | 	rdlong	local04, objptr
0426c     37 00 00 FF 
04270     24 E4 85 F1 | 	sub	objptr, ##28196
04274     01 2C 0E F2 | 	cmp	local04, #1 wz
04278     37 00 00 5F 
0427c     24 E4 05 51 |  if_ne	add	objptr, ##28196
04280     F2 38 02 5B |  if_ne	rdlong	local10, objptr
04284     37 00 00 5F 
04288     24 E4 85 51 |  if_ne	sub	objptr, ##28196
0428c     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04290     35 00 00 AF 
04294     18 E4 05 A1 |  if_e	add	objptr, ##27160
04298     F2 3C 02 AB |  if_e	rdlong	local12, objptr
0429c     35 00 00 AF 
042a0     18 E4 85 A1 |  if_e	sub	objptr, ##27160
042a4     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
042a8     A4 00 90 5D |  if_ne	jmp	#LR__0207
042ac     52 00 00 FF 
042b0     B0 E4 05 F1 | 	add	objptr, ##42160
042b4     F2 12 02 FB | 	rdlong	arg01, objptr
042b8     1B 00 00 FF 
042bc     8C E4 85 F1 | 	sub	objptr, ##13964
042c0     F2 16 02 FB | 	rdlong	arg03, objptr
042c4     37 00 00 FF 
042c8     24 E4 85 F1 | 	sub	objptr, ##28196
042cc     00 14 06 F6 | 	mov	arg02, #0
042d0     68 42 B0 FD | 	call	#_compile_assign
042d4     FD 26 0A F6 | 	mov	local01, result1 wz
042d8                 | '   err=compile_assign(linenum,0,cont) 
042d8                 | '   if err<>0 then printerror(err,linenum): goto 101
042d8     20 00 90 AD |  if_e	jmp	#LR__0205
042dc     52 00 00 FF 
042e0     B0 E4 05 F1 | 	add	objptr, ##42160
042e4     F2 14 02 FB | 	rdlong	arg02, objptr
042e8     52 00 00 FF 
042ec     B0 E4 85 F1 | 	sub	objptr, ##42160
042f0     13 13 02 F6 | 	mov	arg01, local01
042f4     50 EA B1 FD | 	call	#_printerror
042f8     74 00 90 FD | 	jmp	#LR__0209
042fc                 | LR__0205
042fc                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
042fc     52 00 00 FF 
04300     F4 E4 05 F1 | 	add	objptr, ##42228
04304     F2 12 02 FB | 	rdlong	arg01, objptr
04308     52 00 00 FF 
0430c     F4 E4 85 F1 | 	sub	objptr, ##42228
04310     B1 01 00 FF 
04314     CE 15 06 F6 | 	mov	arg02, ##@LR__5484
04318     40 24 B2 FD | 	call	#__system___string_cmp
0431c     00 FA 4D F2 | 	cmps	result1, #0 wz
04320     2C 00 90 AD |  if_e	jmp	#LR__0206
04324     52 00 00 FF 
04328     F4 E4 05 F1 | 	add	objptr, ##42228
0432c     F2 2C 02 FB | 	rdlong	local04, objptr
04330     1B 00 00 FF 
04334     D8 E4 85 F1 | 	sub	objptr, ##14040
04338     F2 2C 62 FC | 	wrlong	local04, objptr
0433c     08 E4 05 F1 | 	add	objptr, #8
04340     F2 08 68 FC | 	wrlong	#4, objptr
04344     37 00 00 FF 
04348     24 E4 85 F1 | 	sub	objptr, ##28196
0434c     44 D5 9F FD | 	jmp	#LR__0070
04350                 | LR__0206
04350                 | LR__0207
04350                 | LR__0208
04350                 | ' 
04350                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04350     52 00 00 FF 
04354     B0 E4 05 F1 | 	add	objptr, ##42160
04358     F2 2C 0A FB | 	rdlong	local04, objptr wz
0435c     52 00 00 FF 
04360     B0 E4 85 F1 | 	sub	objptr, ##42160
04364     B0 00 90 5D |  if_ne	jmp	#LR__0212
04368     02 12 06 F6 | 	mov	arg01, #2
0436c     E0 90 B0 FD | 	call	#_execute_line
04370                 | LR__0209
04370                 | '   execute_line(2)
04370                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04370     52 00 00 FF 
04374     D4 E4 05 F1 | 	add	objptr, ##42196
04378     F2 2C 0A FB | 	rdlong	local04, objptr wz
0437c     52 00 00 FF 
04380     D4 E4 85 F1 | 	sub	objptr, ##42196
04384     20 00 90 5D |  if_ne	jmp	#LR__0210
04388     B1 01 00 FF 
0438c     CF 13 06 F6 | 	mov	arg01, ##@LR__5485
04390                 | ' 
04390                 | ' write(text)
04390     DC 0A B2 FD | 	call	#_hg010b_spin2_write
04394                 | ' crlf
04394     D8 0F B2 FD | 	call	#_hg010b_spin2_crlf
04398     B1 01 00 FF 
0439c     D0 13 06 F6 | 	mov	arg01, ##@LR__5486
043a0                 | ' 
043a0                 | ' write(text)
043a0     CC 0A B2 FD | 	call	#_hg010b_spin2_write
043a4                 | ' crlf
043a4     C8 0F B2 FD | 	call	#_hg010b_spin2_crlf
043a8                 | LR__0210
043a8                 | '     if inload=1 andalso err>0 then print fullline$
043a8     52 00 00 FF 
043ac     D4 E4 05 F1 | 	add	objptr, ##42196
043b0     F2 2C 02 FB | 	rdlong	local04, objptr
043b4     52 00 00 FF 
043b8     D4 E4 85 F1 | 	sub	objptr, ##42196
043bc     01 2C 0E F2 | 	cmp	local04, #1 wz
043c0     54 00 90 5D |  if_ne	jmp	#LR__0211
043c4     01 26 56 F2 | 	cmps	local01, #1 wc
043c8     4C 00 90 CD |  if_b	jmp	#LR__0211
043cc     00 12 06 F6 | 	mov	arg01, #0
043d0     88 80 B2 FD | 	call	#__system___getiolock_0603
043d4     FD 12 02 F6 | 	mov	arg01, result1
043d8     58 23 B2 FD | 	call	#__system___lockmem
043dc     37 00 00 FF 
043e0     20 E4 05 F1 | 	add	objptr, ##28192
043e4     F2 14 02 FB | 	rdlong	arg02, objptr
043e8     37 00 00 FF 
043ec     20 E4 85 F1 | 	sub	objptr, ##28192
043f0     00 12 06 F6 | 	mov	arg01, #0
043f4     00 16 06 F6 | 	mov	arg03, #0
043f8     2C 30 B2 FD | 	call	#__system___basic_print_string
043fc     00 12 06 F6 | 	mov	arg01, #0
04400     0A 14 06 F6 | 	mov	arg02, #10
04404     00 16 06 F6 | 	mov	arg03, #0
04408     C4 2F B2 FD | 	call	#__system___basic_print_char
0440c     00 12 06 F6 | 	mov	arg01, #0
04410     48 80 B2 FD | 	call	#__system___getiolock_0603
04414     FD 00 68 FC | 	wrlong	#0, result1
04418                 | LR__0211
04418                 | LR__0212
04418     A7 F0 03 F6 | 	mov	ptra, fp
0441c     B2 00 A0 FD | 	call	#popregs_
04420                 | _interpret_ret
04420     2D 00 64 FD | 	ret
04424                 | 
04424                 | ' 
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' '
04424                 | ' '                          END OF TOKENIZER MAIN CODE
04424                 | ' '
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' 
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' 
04424                 | ' ' Check if the part is an operator, return a token or 0 if not found
04424                 | ' 
04424                 | ' function isoperator(s as string) as ubyte
04424                 | _isoperator
04424     01 4A 05 F6 | 	mov	COUNT_, #1
04428     A8 00 A0 FD | 	call	#pushregs_
0442c                 | ' 
0442c                 | ' select case s
0442c     09 27 02 F6 | 	mov	local01, arg01
04430     B1 01 00 FF 
04434     D6 15 06 F6 | 	mov	arg02, ##@LR__5487
04438     13 13 02 F6 | 	mov	arg01, local01
0443c     1C 23 B2 FD | 	call	#__system___string_cmp
04440     00 FA 0D F2 | 	cmp	result1, #0 wz
04444     FC 01 90 AD |  if_e	jmp	#LR__0220
04448     B1 01 00 FF 
0444c     D8 15 06 F6 | 	mov	arg02, ##@LR__5488
04450     13 13 02 F6 | 	mov	arg01, local01
04454     04 23 B2 FD | 	call	#__system___string_cmp
04458     00 FA 0D F2 | 	cmp	result1, #0 wz
0445c     EC 01 90 AD |  if_e	jmp	#LR__0221
04460     B1 01 00 FF 
04464     DA 15 06 F6 | 	mov	arg02, ##@LR__5489
04468     13 13 02 F6 | 	mov	arg01, local01
0446c     EC 22 B2 FD | 	call	#__system___string_cmp
04470     00 FA 0D F2 | 	cmp	result1, #0 wz
04474     DC 01 90 AD |  if_e	jmp	#LR__0222
04478     B1 01 00 FF 
0447c     DD 15 06 F6 | 	mov	arg02, ##@LR__5490
04480     13 13 02 F6 | 	mov	arg01, local01
04484     D4 22 B2 FD | 	call	#__system___string_cmp
04488     00 FA 0D F2 | 	cmp	result1, #0 wz
0448c     CC 01 90 AD |  if_e	jmp	#LR__0223
04490     B1 01 00 FF 
04494     E1 15 06 F6 | 	mov	arg02, ##@LR__5491
04498     13 13 02 F6 | 	mov	arg01, local01
0449c     BC 22 B2 FD | 	call	#__system___string_cmp
044a0     00 FA 0D F2 | 	cmp	result1, #0 wz
044a4     BC 01 90 AD |  if_e	jmp	#LR__0224
044a8     B1 01 00 FF 
044ac     E3 15 06 F6 | 	mov	arg02, ##@LR__5492
044b0     13 13 02 F6 | 	mov	arg01, local01
044b4     A4 22 B2 FD | 	call	#__system___string_cmp
044b8     00 FA 0D F2 | 	cmp	result1, #0 wz
044bc     AC 01 90 AD |  if_e	jmp	#LR__0225
044c0     B1 01 00 FF 
044c4     E5 15 06 F6 | 	mov	arg02, ##@LR__5493
044c8     13 13 02 F6 | 	mov	arg01, local01
044cc     8C 22 B2 FD | 	call	#__system___string_cmp
044d0     00 FA 0D F2 | 	cmp	result1, #0 wz
044d4     9C 01 90 AD |  if_e	jmp	#LR__0226
044d8     B1 01 00 FF 
044dc     E9 15 06 F6 | 	mov	arg02, ##@LR__5494
044e0     13 13 02 F6 | 	mov	arg01, local01
044e4     74 22 B2 FD | 	call	#__system___string_cmp
044e8     00 FA 0D F2 | 	cmp	result1, #0 wz
044ec     8C 01 90 AD |  if_e	jmp	#LR__0227
044f0     B1 01 00 FF 
044f4     ED 15 06 F6 | 	mov	arg02, ##@LR__5495
044f8     13 13 02 F6 | 	mov	arg01, local01
044fc     5C 22 B2 FD | 	call	#__system___string_cmp
04500     00 FA 0D F2 | 	cmp	result1, #0 wz
04504     7C 01 90 AD |  if_e	jmp	#LR__0228
04508     B1 01 00 FF 
0450c     F1 15 06 F6 | 	mov	arg02, ##@LR__5496
04510     13 13 02 F6 | 	mov	arg01, local01
04514     44 22 B2 FD | 	call	#__system___string_cmp
04518     00 FA 0D F2 | 	cmp	result1, #0 wz
0451c     6C 01 90 AD |  if_e	jmp	#LR__0229
04520     B1 01 00 FF 
04524     F5 15 06 F6 | 	mov	arg02, ##@LR__5497
04528     13 13 02 F6 | 	mov	arg01, local01
0452c     2C 22 B2 FD | 	call	#__system___string_cmp
04530     00 FA 0D F2 | 	cmp	result1, #0 wz
04534     5C 01 90 AD |  if_e	jmp	#LR__0230
04538     B1 01 00 FF 
0453c     F9 15 06 F6 | 	mov	arg02, ##@LR__5498
04540     13 13 02 F6 | 	mov	arg01, local01
04544     14 22 B2 FD | 	call	#__system___string_cmp
04548     00 FA 0D F2 | 	cmp	result1, #0 wz
0454c     4C 01 90 AD |  if_e	jmp	#LR__0231
04550     B1 01 00 FF 
04554     FB 15 06 F6 | 	mov	arg02, ##@LR__5499
04558     13 13 02 F6 | 	mov	arg01, local01
0455c     FC 21 B2 FD | 	call	#__system___string_cmp
04560     00 FA 0D F2 | 	cmp	result1, #0 wz
04564     3C 01 90 AD |  if_e	jmp	#LR__0232
04568     B1 01 00 FF 
0456c     FF 15 06 F6 | 	mov	arg02, ##@LR__5500
04570     13 13 02 F6 | 	mov	arg01, local01
04574     E4 21 B2 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     2C 01 90 AD |  if_e	jmp	#LR__0233
04580     B2 01 00 FF 
04584     01 14 06 F6 | 	mov	arg02, ##@LR__5501
04588     13 13 02 F6 | 	mov	arg01, local01
0458c     CC 21 B2 FD | 	call	#__system___string_cmp
04590     00 FA 0D F2 | 	cmp	result1, #0 wz
04594     1C 01 90 AD |  if_e	jmp	#LR__0234
04598     B2 01 00 FF 
0459c     03 14 06 F6 | 	mov	arg02, ##@LR__5502
045a0     13 13 02 F6 | 	mov	arg01, local01
045a4     B4 21 B2 FD | 	call	#__system___string_cmp
045a8     00 FA 0D F2 | 	cmp	result1, #0 wz
045ac     0C 01 90 AD |  if_e	jmp	#LR__0235
045b0     B2 01 00 FF 
045b4     06 14 06 F6 | 	mov	arg02, ##@LR__5503
045b8     13 13 02 F6 | 	mov	arg01, local01
045bc     9C 21 B2 FD | 	call	#__system___string_cmp
045c0     00 FA 0D F2 | 	cmp	result1, #0 wz
045c4     FC 00 90 AD |  if_e	jmp	#LR__0236
045c8     B2 01 00 FF 
045cc     09 14 06 F6 | 	mov	arg02, ##@LR__5504
045d0     13 13 02 F6 | 	mov	arg01, local01
045d4     84 21 B2 FD | 	call	#__system___string_cmp
045d8     00 FA 0D F2 | 	cmp	result1, #0 wz
045dc     EC 00 90 AD |  if_e	jmp	#LR__0237
045e0     B2 01 00 FF 
045e4     0B 14 06 F6 | 	mov	arg02, ##@LR__5505
045e8     13 13 02 F6 | 	mov	arg01, local01
045ec     6C 21 B2 FD | 	call	#__system___string_cmp
045f0     00 FA 0D F2 | 	cmp	result1, #0 wz
045f4     DC 00 90 AD |  if_e	jmp	#LR__0238
045f8     B2 01 00 FF 
045fc     0D 14 06 F6 | 	mov	arg02, ##@LR__5506
04600     13 13 02 F6 | 	mov	arg01, local01
04604     54 21 B2 FD | 	call	#__system___string_cmp
04608     00 FA 0D F2 | 	cmp	result1, #0 wz
0460c     CC 00 90 AD |  if_e	jmp	#LR__0239
04610     B2 01 00 FF 
04614     10 14 06 F6 | 	mov	arg02, ##@LR__5507
04618     13 13 02 F6 | 	mov	arg01, local01
0461c     3C 21 B2 FD | 	call	#__system___string_cmp
04620     00 FA 0D F2 | 	cmp	result1, #0 wz
04624     BC 00 90 AD |  if_e	jmp	#LR__0240
04628     B2 01 00 FF 
0462c     13 14 06 F6 | 	mov	arg02, ##@LR__5508
04630     13 13 02 F6 | 	mov	arg01, local01
04634     24 21 B2 FD | 	call	#__system___string_cmp
04638     00 FA 0D F2 | 	cmp	result1, #0 wz
0463c     AC 00 90 AD |  if_e	jmp	#LR__0241
04640     B0 00 90 FD | 	jmp	#LR__0242
04644                 | LR__0220
04644     01 FA 05 F6 | 	mov	result1, #1
04648     AC 00 90 FD | 	jmp	#LR__0243
0464c                 | LR__0221
0464c     02 FA 05 F6 | 	mov	result1, #2
04650     A4 00 90 FD | 	jmp	#LR__0243
04654                 | LR__0222
04654     03 FA 05 F6 | 	mov	result1, #3
04658     9C 00 90 FD | 	jmp	#LR__0243
0465c                 | LR__0223
0465c     04 FA 05 F6 | 	mov	result1, #4
04660     94 00 90 FD | 	jmp	#LR__0243
04664                 | LR__0224
04664     05 FA 05 F6 | 	mov	result1, #5
04668     8C 00 90 FD | 	jmp	#LR__0243
0466c                 | LR__0225
0466c     06 FA 05 F6 | 	mov	result1, #6
04670     84 00 90 FD | 	jmp	#LR__0243
04674                 | LR__0226
04674     07 FA 05 F6 | 	mov	result1, #7
04678     7C 00 90 FD | 	jmp	#LR__0243
0467c                 | LR__0227
0467c     08 FA 05 F6 | 	mov	result1, #8
04680     74 00 90 FD | 	jmp	#LR__0243
04684                 | LR__0228
04684     09 FA 05 F6 | 	mov	result1, #9
04688     6C 00 90 FD | 	jmp	#LR__0243
0468c                 | LR__0229
0468c     0A FA 05 F6 | 	mov	result1, #10
04690     64 00 90 FD | 	jmp	#LR__0243
04694                 | LR__0230
04694     0B FA 05 F6 | 	mov	result1, #11
04698     5C 00 90 FD | 	jmp	#LR__0243
0469c                 | LR__0231
0469c     0C FA 05 F6 | 	mov	result1, #12
046a0     54 00 90 FD | 	jmp	#LR__0243
046a4                 | LR__0232
046a4     0D FA 05 F6 | 	mov	result1, #13
046a8     4C 00 90 FD | 	jmp	#LR__0243
046ac                 | LR__0233
046ac     0E FA 05 F6 | 	mov	result1, #14
046b0     44 00 90 FD | 	jmp	#LR__0243
046b4                 | LR__0234
046b4     1B FA 05 F6 | 	mov	result1, #27
046b8     3C 00 90 FD | 	jmp	#LR__0243
046bc                 | LR__0235
046bc     27 FA 05 F6 | 	mov	result1, #39
046c0     34 00 90 FD | 	jmp	#LR__0243
046c4                 | LR__0236
046c4     26 FA 05 F6 | 	mov	result1, #38
046c8     2C 00 90 FD | 	jmp	#LR__0243
046cc                 | LR__0237
046cc     10 FA 05 F6 | 	mov	result1, #16
046d0     24 00 90 FD | 	jmp	#LR__0243
046d4                 | LR__0238
046d4     0F FA 05 F6 | 	mov	result1, #15
046d8     1C 00 90 FD | 	jmp	#LR__0243
046dc                 | LR__0239
046dc     2A FA 05 F6 | 	mov	result1, #42
046e0     14 00 90 FD | 	jmp	#LR__0243
046e4                 | LR__0240
046e4     28 FA 05 F6 | 	mov	result1, #40
046e8     0C 00 90 FD | 	jmp	#LR__0243
046ec                 | LR__0241
046ec     29 FA 05 F6 | 	mov	result1, #41
046f0     04 00 90 FD | 	jmp	#LR__0243
046f4                 | LR__0242
046f4     00 FA 05 F6 | 	mov	result1, #0
046f8                 | LR__0243
046f8     A7 F0 03 F6 | 	mov	ptra, fp
046fc     B2 00 A0 FD | 	call	#popregs_
04700                 | _isoperator_ret
04700     2D 00 64 FD | 	ret
04704                 | 
04704                 | ' 
04704                 | ' ' Check if the part is a channel#, return a token or 0 if not found
04704                 | ' 
04704                 | ' function ischannel(s as string) as ulong
04704                 | _ischannel
04704     02 4A 05 F6 | 	mov	COUNT_, #2
04708     A8 00 A0 FD | 	call	#pushregs_
0470c                 | ' if left$(s,1)<>"#" then return 0
0470c     09 27 02 F6 | 	mov	local01, arg01
04710     01 14 06 F6 | 	mov	arg02, #1
04714     98 40 B2 FD | 	call	#__system__Left_S
04718     FD 12 02 F6 | 	mov	arg01, result1
0471c     B2 01 00 FF 
04720     16 14 06 F6 | 	mov	arg02, ##@LR__5509
04724     34 20 B2 FD | 	call	#__system___string_cmp
04728     00 FA 0D F2 | 	cmp	result1, #0 wz
0472c     00 FA 05 56 |  if_ne	mov	result1, #0
04730     AC 00 90 5D |  if_ne	jmp	#LR__0254
04734                 | ' if len(s)<>2 then return 0
04734     13 13 02 F6 | 	mov	arg01, local01
04738     09 29 02 F6 | 	mov	local02, arg01
0473c     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
04740                 | LR__0250
04740     14 FB C9 FA | 	rdbyte	result1, local02 wz
04744     01 28 06 51 |  if_ne	add	local02, #1
04748     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
0474c                 | LR__0251
0474c     09 29 82 F1 | 	sub	local02, arg01
04750     14 FB 01 F6 | 	mov	result1, local02
04754     02 FA 0D F2 | 	cmp	result1, #2 wz
04758     00 FA 05 56 |  if_ne	mov	result1, #0
0475c     80 00 90 5D |  if_ne	jmp	#LR__0254
04760                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04760     13 13 02 F6 | 	mov	arg01, local01
04764     01 14 06 F6 | 	mov	arg02, #1
04768     CC 40 B2 FD | 	call	#__system__Right_S
0476c     FD 12 02 F6 | 	mov	arg01, result1
04770     B2 01 00 FF 
04774     18 14 06 F6 | 	mov	arg02, ##@LR__5510
04778     E0 1F B2 FD | 	call	#__system___string_cmp
0477c     00 FA 55 F2 | 	cmps	result1, #0 wc
04780     24 00 90 CD |  if_b	jmp	#LR__0252
04784     13 13 02 F6 | 	mov	arg01, local01
04788     01 14 06 F6 | 	mov	arg02, #1
0478c     A8 40 B2 FD | 	call	#__system__Right_S
04790     FD 12 02 F6 | 	mov	arg01, result1
04794     B2 01 00 FF 
04798     1A 14 06 F6 | 	mov	arg02, ##@LR__5511
0479c     BC 1F B2 FD | 	call	#__system___string_cmp
047a0     01 FA 55 F2 | 	cmps	result1, #1 wc
047a4     08 00 90 CD |  if_b	jmp	#LR__0253
047a8                 | LR__0252
047a8     00 FA 05 F6 | 	mov	result1, #0
047ac     30 00 90 FD | 	jmp	#LR__0254
047b0                 | LR__0253
047b0                 | ' return token_channel+val(right$(s,1))
047b0     13 13 02 F6 | 	mov	arg01, local01
047b4     01 14 06 F6 | 	mov	arg02, #1
047b8     7C 40 B2 FD | 	call	#__system__Right_S
047bc     FD 12 02 F6 | 	mov	arg01, result1
047c0     F4 55 B2 FD | 	call	#__system____builtin_atof
047c4     FD 14 02 F6 | 	mov	arg02, result1
047c8     00 18 21 FF 
047cc     00 12 06 F6 | 	mov	arg01, ##1110441984
047d0     08 4A B2 FD | 	call	#__system___float_add
047d4     FD 12 02 F6 | 	mov	arg01, result1
047d8     00 14 06 F6 | 	mov	arg02, #0
047dc     94 52 B2 FD | 	call	#__system___float_tointeger
047e0                 | LR__0254
047e0     A7 F0 03 F6 | 	mov	ptra, fp
047e4     B2 00 A0 FD | 	call	#popregs_
047e8                 | _ischannel_ret
047e8     2D 00 64 FD | 	ret
047ec                 | 
047ec                 | ' 
047ec                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
047ec                 | ' ' todo: add spin2/pasm constants for pin control
047ec                 | ' 
047ec                 | ' function isconstant(s as string) as integer
047ec                 | _isconstant
047ec     01 4A 05 F6 | 	mov	COUNT_, #1
047f0     A8 00 A0 FD | 	call	#pushregs_
047f4                 | ' 
047f4                 | ' select case s
047f4     09 27 02 F6 | 	mov	local01, arg01
047f8     B2 01 00 FF 
047fc     1C 14 06 F6 | 	mov	arg02, ##@LR__5512
04800     13 13 02 F6 | 	mov	arg01, local01
04804     54 1F B2 FD | 	call	#__system___string_cmp
04808     00 FA 0D F2 | 	cmp	result1, #0 wz
0480c     34 00 90 AD |  if_e	jmp	#LR__0260
04810     B2 01 00 FF 
04814     22 14 06 F6 | 	mov	arg02, ##@LR__5513
04818     13 13 02 F6 | 	mov	arg01, local01
0481c     3C 1F B2 FD | 	call	#__system___string_cmp
04820     00 FA 0D F2 | 	cmp	result1, #0 wz
04824     24 00 90 AD |  if_e	jmp	#LR__0261
04828     B2 01 00 FF 
0482c     29 14 06 F6 | 	mov	arg02, ##@LR__5514
04830     13 13 02 F6 | 	mov	arg01, local01
04834     24 1F B2 FD | 	call	#__system___string_cmp
04838     00 FA 0D F2 | 	cmp	result1, #0 wz
0483c     14 00 90 AD |  if_e	jmp	#LR__0262
04840     18 00 90 FD | 	jmp	#LR__0263
04844                 | LR__0260
04844     01 FA 05 F6 | 	mov	result1, #1
04848     14 00 90 FD | 	jmp	#LR__0264
0484c                 | LR__0261
0484c     02 FA 05 F6 | 	mov	result1, #2
04850     0C 00 90 FD | 	jmp	#LR__0264
04854                 | LR__0262
04854     04 FA 05 F6 | 	mov	result1, #4
04858     04 00 90 FD | 	jmp	#LR__0264
0485c                 | LR__0263
0485c     00 FA 05 F6 | 	mov	result1, #0
04860                 | LR__0264
04860     A7 F0 03 F6 | 	mov	ptra, fp
04864     B2 00 A0 FD | 	call	#popregs_
04868                 | _isconstant_ret
04868     2D 00 64 FD | 	ret
0486c                 | 
0486c                 | ' 
0486c                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
0486c                 | ' 
0486c                 | ' function isnotename(s as string) as ulong
0486c                 | _isnotename
0486c     07 4A 05 F6 | 	mov	COUNT_, #7
04870     A8 00 A0 FD | 	call	#pushregs_
04874                 | ' if left$(s,1)<>"#" then return 0
04874     09 27 02 F6 | 	mov	local01, arg01
04878     01 14 06 F6 | 	mov	arg02, #1
0487c     30 3F B2 FD | 	call	#__system__Left_S
04880     FD 12 02 F6 | 	mov	arg01, result1
04884     B2 01 00 FF 
04888     31 14 06 F6 | 	mov	arg02, ##@LR__5515
0488c     CC 1E B2 FD | 	call	#__system___string_cmp
04890     00 FA 0D F2 | 	cmp	result1, #0 wz
04894     00 FA 05 56 |  if_ne	mov	result1, #0
04898     30 03 90 5D |  if_ne	jmp	#LR__0293
0489c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0489c     13 13 02 F6 | 	mov	arg01, local01
048a0     03 14 06 F6 | 	mov	arg02, #3
048a4     01 16 06 F6 | 	mov	arg03, #1
048a8     1C 40 B2 FD | 	call	#__system__Mid_S
048ac     FD 12 02 F6 | 	mov	arg01, result1
048b0     B2 01 00 FF 
048b4     33 14 06 F6 | 	mov	arg02, ##@LR__5516
048b8     A0 1E B2 FD | 	call	#__system___string_cmp
048bc     00 FA 0D F2 | 	cmp	result1, #0 wz
048c0     18 00 90 5D |  if_ne	jmp	#LR__0270
048c4     13 13 02 F6 | 	mov	arg01, local01
048c8     02 14 06 F6 | 	mov	arg02, #2
048cc     02 16 06 F6 | 	mov	arg03, #2
048d0     F4 3F B2 FD | 	call	#__system__Mid_S
048d4     FD 28 02 F6 | 	mov	local02, result1
048d8     14 00 90 FD | 	jmp	#LR__0271
048dc                 | LR__0270
048dc     13 13 02 F6 | 	mov	arg01, local01
048e0     02 14 06 F6 | 	mov	arg02, #2
048e4     01 16 06 F6 | 	mov	arg03, #1
048e8     DC 3F B2 FD | 	call	#__system__Mid_S
048ec     FD 28 02 F6 | 	mov	local02, result1
048f0                 | LR__0271
048f0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
048f0     13 13 02 F6 | 	mov	arg01, local01
048f4     09 2B 02 F6 | 	mov	local03, arg01
048f8     97 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
048fc                 | LR__0272
048fc     15 FB C9 FA | 	rdbyte	result1, local03 wz
04900     01 2A 06 51 |  if_ne	add	local03, #1
04904     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
04908                 | LR__0273
04908     09 2B 82 F1 | 	sub	local03, arg01
0490c     15 15 02 F6 | 	mov	arg02, local03
04910     01 14 86 F1 | 	sub	arg02, #1
04914     13 13 02 F6 | 	mov	arg01, local01
04918     01 16 06 F6 | 	mov	arg03, #1
0491c     A8 3F B2 FD | 	call	#__system__Mid_S
04920     FD 12 02 F6 | 	mov	arg01, result1
04924     B2 01 00 FF 
04928     35 14 06 F6 | 	mov	arg02, ##@LR__5517
0492c     2C 1E B2 FD | 	call	#__system___string_cmp
04930     00 FA 0D F2 | 	cmp	result1, #0 wz
04934     28 00 90 AD |  if_e	jmp	#LR__0274
04938     13 13 02 F6 | 	mov	arg01, local01
0493c     01 14 06 F6 | 	mov	arg02, #1
04940     F4 3E B2 FD | 	call	#__system__Right_S
04944     FD 12 02 F6 | 	mov	arg01, result1
04948     6C 54 B2 FD | 	call	#__system____builtin_atof
0494c     FD 12 02 F6 | 	mov	arg01, result1
04950     00 14 06 F6 | 	mov	arg02, #0
04954     1C 51 B2 FD | 	call	#__system___float_tointeger
04958     FD 2C 02 F6 | 	mov	local04, result1
0495c     34 00 90 FD | 	jmp	#LR__0275
04960                 | LR__0274
04960     13 13 02 F6 | 	mov	arg01, local01
04964     01 14 06 F6 | 	mov	arg02, #1
04968     CC 3E B2 FD | 	call	#__system__Right_S
0496c     FD 12 02 F6 | 	mov	arg01, result1
04970     44 54 B2 FD | 	call	#__system____builtin_atof
04974     FD 14 02 F6 | 	mov	arg02, result1
04978     00 C0 5F FF 
0497c     00 12 06 F6 | 	mov	arg01, ##-1082130432
04980     28 4C B2 FD | 	call	#__system___float_mul
04984     FD 12 02 F6 | 	mov	arg01, result1
04988     00 14 06 F6 | 	mov	arg02, #0
0498c     E4 50 B2 FD | 	call	#__system___float_tointeger
04990     FD 2C 02 F6 | 	mov	local04, result1
04994                 | LR__0275
04994                 | ' 
04994                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04994     00 2C 0E F2 | 	cmp	local04, #0 wz
04998     24 00 90 5D |  if_ne	jmp	#LR__0276
0499c     13 13 02 F6 | 	mov	arg01, local01
049a0     01 14 06 F6 | 	mov	arg02, #1
049a4     90 3E B2 FD | 	call	#__system__Right_S
049a8     FD 12 02 F6 | 	mov	arg01, result1
049ac     B2 01 00 FF 
049b0     37 14 06 F6 | 	mov	arg02, ##@LR__5518
049b4     A4 1D B2 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     04 2C 06 56 |  if_ne	mov	local04, #4
049c0                 | LR__0276
049c0                 | ' 
049c0                 | ' select case s1
049c0     14 2F 02 F6 | 	mov	local05, local02
049c4     B2 01 00 FF 
049c8     39 14 06 F6 | 	mov	arg02, ##@LR__5519
049cc     17 13 02 F6 | 	mov	arg01, local05
049d0     88 1D B2 FD | 	call	#__system___string_cmp
049d4     00 FA 0D F2 | 	cmp	result1, #0 wz
049d8     24 01 90 AD |  if_e	jmp	#LR__0277
049dc     B2 01 00 FF 
049e0     3B 14 06 F6 | 	mov	arg02, ##@LR__5520
049e4     17 13 02 F6 | 	mov	arg01, local05
049e8     70 1D B2 FD | 	call	#__system___string_cmp
049ec     00 FA 0D F2 | 	cmp	result1, #0 wz
049f0     18 01 90 AD |  if_e	jmp	#LR__0278
049f4     B2 01 00 FF 
049f8     3E 14 06 F6 | 	mov	arg02, ##@LR__5521
049fc     17 13 02 F6 | 	mov	arg01, local05
04a00     58 1D B2 FD | 	call	#__system___string_cmp
04a04     00 FA 0D F2 | 	cmp	result1, #0 wz
04a08     0C 01 90 AD |  if_e	jmp	#LR__0279
04a0c     B2 01 00 FF 
04a10     40 14 06 F6 | 	mov	arg02, ##@LR__5522
04a14     17 13 02 F6 | 	mov	arg01, local05
04a18     40 1D B2 FD | 	call	#__system___string_cmp
04a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a20     00 01 90 AD |  if_e	jmp	#LR__0280
04a24     B2 01 00 FF 
04a28     43 14 06 F6 | 	mov	arg02, ##@LR__5523
04a2c     17 13 02 F6 | 	mov	arg01, local05
04a30     28 1D B2 FD | 	call	#__system___string_cmp
04a34     00 FA 0D F2 | 	cmp	result1, #0 wz
04a38     F4 00 90 AD |  if_e	jmp	#LR__0281
04a3c     B2 01 00 FF 
04a40     45 14 06 F6 | 	mov	arg02, ##@LR__5524
04a44     17 13 02 F6 | 	mov	arg01, local05
04a48     10 1D B2 FD | 	call	#__system___string_cmp
04a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a50     E8 00 90 AD |  if_e	jmp	#LR__0282
04a54     B2 01 00 FF 
04a58     47 14 06 F6 | 	mov	arg02, ##@LR__5525
04a5c     17 13 02 F6 | 	mov	arg01, local05
04a60     F8 1C B2 FD | 	call	#__system___string_cmp
04a64     00 FA 0D F2 | 	cmp	result1, #0 wz
04a68     DC 00 90 AD |  if_e	jmp	#LR__0283
04a6c     B2 01 00 FF 
04a70     4A 14 06 F6 | 	mov	arg02, ##@LR__5526
04a74     17 13 02 F6 | 	mov	arg01, local05
04a78     E0 1C B2 FD | 	call	#__system___string_cmp
04a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a80     D0 00 90 AD |  if_e	jmp	#LR__0284
04a84     B2 01 00 FF 
04a88     4C 14 06 F6 | 	mov	arg02, ##@LR__5527
04a8c     17 13 02 F6 | 	mov	arg01, local05
04a90     C8 1C B2 FD | 	call	#__system___string_cmp
04a94     00 FA 0D F2 | 	cmp	result1, #0 wz
04a98     C4 00 90 AD |  if_e	jmp	#LR__0285
04a9c     B2 01 00 FF 
04aa0     4F 14 06 F6 | 	mov	arg02, ##@LR__5528
04aa4     17 13 02 F6 | 	mov	arg01, local05
04aa8     B0 1C B2 FD | 	call	#__system___string_cmp
04aac     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab0     B8 00 90 AD |  if_e	jmp	#LR__0286
04ab4     B2 01 00 FF 
04ab8     51 14 06 F6 | 	mov	arg02, ##@LR__5529
04abc     17 13 02 F6 | 	mov	arg01, local05
04ac0     98 1C B2 FD | 	call	#__system___string_cmp
04ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ac8     AC 00 90 AD |  if_e	jmp	#LR__0287
04acc     B2 01 00 FF 
04ad0     54 14 06 F6 | 	mov	arg02, ##@LR__5530
04ad4     17 13 02 F6 | 	mov	arg01, local05
04ad8     80 1C B2 FD | 	call	#__system___string_cmp
04adc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae0     A0 00 90 AD |  if_e	jmp	#LR__0288
04ae4     B2 01 00 FF 
04ae8     56 14 06 F6 | 	mov	arg02, ##@LR__5531
04aec     17 13 02 F6 | 	mov	arg01, local05
04af0     68 1C B2 FD | 	call	#__system___string_cmp
04af4     00 FA 0D F2 | 	cmp	result1, #0 wz
04af8     94 00 90 AD |  if_e	jmp	#LR__0289
04afc     9C 00 90 FD | 	jmp	#LR__0290
04b00                 | LR__0277
04b00     01 00 00 FF 
04b04     00 31 06 F6 | 	mov	local06, ##768
04b08     98 00 90 FD | 	jmp	#LR__0291
04b0c                 | LR__0278
04b0c     01 00 00 FF 
04b10     01 31 06 F6 | 	mov	local06, ##769
04b14     8C 00 90 FD | 	jmp	#LR__0291
04b18                 | LR__0279
04b18     01 00 00 FF 
04b1c     02 31 06 F6 | 	mov	local06, ##770
04b20     80 00 90 FD | 	jmp	#LR__0291
04b24                 | LR__0280
04b24     01 00 00 FF 
04b28     03 31 06 F6 | 	mov	local06, ##771
04b2c     74 00 90 FD | 	jmp	#LR__0291
04b30                 | LR__0281
04b30     01 00 00 FF 
04b34     04 31 06 F6 | 	mov	local06, ##772
04b38     68 00 90 FD | 	jmp	#LR__0291
04b3c                 | LR__0282
04b3c     01 00 00 FF 
04b40     05 31 06 F6 | 	mov	local06, ##773
04b44     5C 00 90 FD | 	jmp	#LR__0291
04b48                 | LR__0283
04b48     01 00 00 FF 
04b4c     06 31 06 F6 | 	mov	local06, ##774
04b50     50 00 90 FD | 	jmp	#LR__0291
04b54                 | LR__0284
04b54     01 00 00 FF 
04b58     07 31 06 F6 | 	mov	local06, ##775
04b5c     44 00 90 FD | 	jmp	#LR__0291
04b60                 | LR__0285
04b60     01 00 00 FF 
04b64     08 31 06 F6 | 	mov	local06, ##776
04b68     38 00 90 FD | 	jmp	#LR__0291
04b6c                 | LR__0286
04b6c     01 00 00 FF 
04b70     09 31 06 F6 | 	mov	local06, ##777
04b74     2C 00 90 FD | 	jmp	#LR__0291
04b78                 | LR__0287
04b78     01 00 00 FF 
04b7c     0A 31 06 F6 | 	mov	local06, ##778
04b80     20 00 90 FD | 	jmp	#LR__0291
04b84                 | LR__0288
04b84     01 00 00 FF 
04b88     0B 31 06 F6 | 	mov	local06, ##779
04b8c     14 00 90 FD | 	jmp	#LR__0291
04b90                 | LR__0289
04b90     01 00 00 FF 
04b94     0B 31 06 F6 | 	mov	local06, ##779
04b98     08 00 90 FD | 	jmp	#LR__0291
04b9c                 | LR__0290
04b9c     00 FA 05 F6 | 	mov	result1, #0
04ba0     28 00 90 FD | 	jmp	#LR__0293
04ba4                 | LR__0291
04ba4                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04ba4     FF FF 7F FF 
04ba8     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04bac     18 00 90 CD |  if_b	jmp	#LR__0292
04bb0     0A 2C 56 F2 | 	cmps	local04, #10 wc
04bb4     16 33 02 C6 |  if_b	mov	local07, local04
04bb8     01 32 66 C0 |  if_b	shl	local07, #1
04bbc     16 33 02 C1 |  if_b	add	local07, local04
04bc0     02 32 66 C0 |  if_b	shl	local07, #2
04bc4     19 31 02 C1 |  if_b	add	local06, local07
04bc8                 | LR__0292
04bc8                 | ' return token
04bc8     18 FB 01 F6 | 	mov	result1, local06
04bcc                 | LR__0293
04bcc     A7 F0 03 F6 | 	mov	ptra, fp
04bd0     B2 00 A0 FD | 	call	#popregs_
04bd4                 | _isnotename_ret
04bd4     2D 00 64 FD | 	ret
04bd8                 | 
04bd8                 | ' 
04bd8                 | ' ' Check if the part is a separator, return a token or 0 if not found
04bd8                 | ' 
04bd8                 | ' function isseparator(s as string) as ubyte
04bd8                 | _isseparator
04bd8     01 4A 05 F6 | 	mov	COUNT_, #1
04bdc     A8 00 A0 FD | 	call	#pushregs_
04be0                 | ' 
04be0                 | ' select case s
04be0     09 27 02 F6 | 	mov	local01, arg01
04be4     B2 01 00 FF 
04be8     58 14 06 F6 | 	mov	arg02, ##@LR__5532
04bec     13 13 02 F6 | 	mov	arg01, local01
04bf0     68 1B B2 FD | 	call	#__system___string_cmp
04bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bf8     54 01 90 AD |  if_e	jmp	#LR__0300
04bfc     B2 01 00 FF 
04c00     5A 14 06 F6 | 	mov	arg02, ##@LR__5533
04c04     13 13 02 F6 | 	mov	arg01, local01
04c08     50 1B B2 FD | 	call	#__system___string_cmp
04c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c10     44 01 90 AD |  if_e	jmp	#LR__0301
04c14     B2 01 00 FF 
04c18     5C 14 06 F6 | 	mov	arg02, ##@LR__5534
04c1c     13 13 02 F6 | 	mov	arg01, local01
04c20     38 1B B2 FD | 	call	#__system___string_cmp
04c24     00 FA 0D F2 | 	cmp	result1, #0 wz
04c28     34 01 90 AD |  if_e	jmp	#LR__0302
04c2c     B2 01 00 FF 
04c30     5E 14 06 F6 | 	mov	arg02, ##@LR__5535
04c34     13 13 02 F6 | 	mov	arg01, local01
04c38     20 1B B2 FD | 	call	#__system___string_cmp
04c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c40     24 01 90 AD |  if_e	jmp	#LR__0303
04c44     B2 01 00 FF 
04c48     60 14 06 F6 | 	mov	arg02, ##@LR__5536
04c4c     13 13 02 F6 | 	mov	arg01, local01
04c50     08 1B B2 FD | 	call	#__system___string_cmp
04c54     00 FA 0D F2 | 	cmp	result1, #0 wz
04c58     14 01 90 AD |  if_e	jmp	#LR__0304
04c5c     B2 01 00 FF 
04c60     62 14 06 F6 | 	mov	arg02, ##@LR__5537
04c64     13 13 02 F6 | 	mov	arg01, local01
04c68     F0 1A B2 FD | 	call	#__system___string_cmp
04c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c70     04 01 90 AD |  if_e	jmp	#LR__0305
04c74     B2 01 00 FF 
04c78     64 14 06 F6 | 	mov	arg02, ##@LR__5538
04c7c     13 13 02 F6 | 	mov	arg01, local01
04c80     D8 1A B2 FD | 	call	#__system___string_cmp
04c84     00 FA 0D F2 | 	cmp	result1, #0 wz
04c88     F4 00 90 AD |  if_e	jmp	#LR__0306
04c8c     B2 01 00 FF 
04c90     66 14 06 F6 | 	mov	arg02, ##@LR__5539
04c94     13 13 02 F6 | 	mov	arg01, local01
04c98     C0 1A B2 FD | 	call	#__system___string_cmp
04c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca0     E4 00 90 AD |  if_e	jmp	#LR__0307
04ca4     B2 01 00 FF 
04ca8     68 14 06 F6 | 	mov	arg02, ##@LR__5540
04cac     13 13 02 F6 | 	mov	arg01, local01
04cb0     A8 1A B2 FD | 	call	#__system___string_cmp
04cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cb8     D4 00 90 AD |  if_e	jmp	#LR__0308
04cbc     B2 01 00 FF 
04cc0     6A 14 06 F6 | 	mov	arg02, ##@LR__5541
04cc4     13 13 02 F6 | 	mov	arg01, local01
04cc8     90 1A B2 FD | 	call	#__system___string_cmp
04ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd0     C4 00 90 AD |  if_e	jmp	#LR__0309
04cd4     B2 01 00 FF 
04cd8     6C 14 06 F6 | 	mov	arg02, ##@LR__5542
04cdc     13 13 02 F6 | 	mov	arg01, local01
04ce0     78 1A B2 FD | 	call	#__system___string_cmp
04ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ce8     B4 00 90 AD |  if_e	jmp	#LR__0310
04cec     B2 01 00 FF 
04cf0     6E 14 06 F6 | 	mov	arg02, ##@LR__5543
04cf4     13 13 02 F6 | 	mov	arg01, local01
04cf8     60 1A B2 FD | 	call	#__system___string_cmp
04cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
04d00     A4 00 90 AD |  if_e	jmp	#LR__0311
04d04     B2 01 00 FF 
04d08     70 14 06 F6 | 	mov	arg02, ##@LR__5544
04d0c     13 13 02 F6 | 	mov	arg01, local01
04d10     48 1A B2 FD | 	call	#__system___string_cmp
04d14     00 FA 0D F2 | 	cmp	result1, #0 wz
04d18     94 00 90 AD |  if_e	jmp	#LR__0312
04d1c     B2 01 00 FF 
04d20     72 14 06 F6 | 	mov	arg02, ##@LR__5545
04d24     13 13 02 F6 | 	mov	arg01, local01
04d28     30 1A B2 FD | 	call	#__system___string_cmp
04d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d30     84 00 90 AD |  if_e	jmp	#LR__0313
04d34     B2 01 00 FF 
04d38     74 14 06 F6 | 	mov	arg02, ##@LR__5546
04d3c     13 13 02 F6 | 	mov	arg01, local01
04d40     18 1A B2 FD | 	call	#__system___string_cmp
04d44     00 FA 0D F2 | 	cmp	result1, #0 wz
04d48     74 00 90 AD |  if_e	jmp	#LR__0314
04d4c     78 00 90 FD | 	jmp	#LR__0315
04d50                 | LR__0300
04d50     01 FA 05 F6 | 	mov	result1, #1
04d54     74 00 90 FD | 	jmp	#LR__0316
04d58                 | LR__0301
04d58     02 FA 05 F6 | 	mov	result1, #2
04d5c     6C 00 90 FD | 	jmp	#LR__0316
04d60                 | LR__0302
04d60     1B FA 05 F6 | 	mov	result1, #27
04d64     64 00 90 FD | 	jmp	#LR__0316
04d68                 | LR__0303
04d68     11 FA 05 F6 | 	mov	result1, #17
04d6c     5C 00 90 FD | 	jmp	#LR__0316
04d70                 | LR__0304
04d70     05 FA 05 F6 | 	mov	result1, #5
04d74     54 00 90 FD | 	jmp	#LR__0316
04d78                 | LR__0305
04d78     06 FA 05 F6 | 	mov	result1, #6
04d7c     4C 00 90 FD | 	jmp	#LR__0316
04d80                 | LR__0306
04d80     12 FA 05 F6 | 	mov	result1, #18
04d84     44 00 90 FD | 	jmp	#LR__0316
04d88                 | LR__0307
04d88     13 FA 05 F6 | 	mov	result1, #19
04d8c     3C 00 90 FD | 	jmp	#LR__0316
04d90                 | LR__0308
04d90     0C FA 05 F6 | 	mov	result1, #12
04d94     34 00 90 FD | 	jmp	#LR__0316
04d98                 | LR__0309
04d98     14 FA 05 F6 | 	mov	result1, #20
04d9c     2C 00 90 FD | 	jmp	#LR__0316
04da0                 | LR__0310
04da0     15 FA 05 F6 | 	mov	result1, #21
04da4     24 00 90 FD | 	jmp	#LR__0316
04da8                 | LR__0311
04da8     16 FA 05 F6 | 	mov	result1, #22
04dac     1C 00 90 FD | 	jmp	#LR__0316
04db0                 | LR__0312
04db0     FF FB 05 F6 | 	mov	result1, #511
04db4     14 00 90 FD | 	jmp	#LR__0316
04db8                 | LR__0313
04db8     0F FA 05 F6 | 	mov	result1, #15
04dbc     0C 00 90 FD | 	jmp	#LR__0316
04dc0                 | LR__0314
04dc0     10 FA 05 F6 | 	mov	result1, #16
04dc4     04 00 90 FD | 	jmp	#LR__0316
04dc8                 | LR__0315
04dc8     00 FA 05 F6 | 	mov	result1, #0
04dcc                 | LR__0316
04dcc     A7 F0 03 F6 | 	mov	ptra, fp
04dd0     B2 00 A0 FD | 	call	#popregs_
04dd4                 | _isseparator_ret
04dd4     2D 00 64 FD | 	ret
04dd8                 | 
04dd8                 | ' 
04dd8                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04dd8                 | ' 
04dd8                 | ' function iscommand(s as string) as ubyte
04dd8                 | _iscommand
04dd8     01 4A 05 F6 | 	mov	COUNT_, #1
04ddc     A8 00 A0 FD | 	call	#pushregs_
04de0                 | ' 
04de0                 | ' select case s
04de0     09 27 02 F6 | 	mov	local01, arg01
04de4     B2 01 00 FF 
04de8     78 14 06 F6 | 	mov	arg02, ##@LR__5548
04dec     13 13 02 F6 | 	mov	arg01, local01
04df0     68 19 B2 FD | 	call	#__system___string_cmp
04df4     00 FA 0D F2 | 	cmp	result1, #0 wz
04df8     7C 0C 90 AD |  if_e	jmp	#LR__0320
04dfc     B2 01 00 FF 
04e00     7D 14 06 F6 | 	mov	arg02, ##@LR__5549
04e04     13 13 02 F6 | 	mov	arg01, local01
04e08     50 19 B2 FD | 	call	#__system___string_cmp
04e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e10     6C 0C 90 AD |  if_e	jmp	#LR__0321
04e14     B2 01 00 FF 
04e18     80 14 06 F6 | 	mov	arg02, ##@LR__5550
04e1c     13 13 02 F6 | 	mov	arg01, local01
04e20     38 19 B2 FD | 	call	#__system___string_cmp
04e24     00 FA 0D F2 | 	cmp	result1, #0 wz
04e28     5C 0C 90 AD |  if_e	jmp	#LR__0322
04e2c     B2 01 00 FF 
04e30     85 14 06 F6 | 	mov	arg02, ##@LR__5551
04e34     13 13 02 F6 | 	mov	arg01, local01
04e38     20 19 B2 FD | 	call	#__system___string_cmp
04e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e40     4C 0C 90 AD |  if_e	jmp	#LR__0323
04e44     B2 01 00 FF 
04e48     89 14 06 F6 | 	mov	arg02, ##@LR__5552
04e4c     13 13 02 F6 | 	mov	arg01, local01
04e50     08 19 B2 FD | 	call	#__system___string_cmp
04e54     00 FA 0D F2 | 	cmp	result1, #0 wz
04e58     3C 0C 90 AD |  if_e	jmp	#LR__0324
04e5c     B2 01 00 FF 
04e60     8E 14 06 F6 | 	mov	arg02, ##@LR__5553
04e64     13 13 02 F6 | 	mov	arg01, local01
04e68     F0 18 B2 FD | 	call	#__system___string_cmp
04e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e70     2C 0C 90 AD |  if_e	jmp	#LR__0325
04e74     B2 01 00 FF 
04e78     92 14 06 F6 | 	mov	arg02, ##@LR__5554
04e7c     13 13 02 F6 | 	mov	arg01, local01
04e80     D8 18 B2 FD | 	call	#__system___string_cmp
04e84     00 FA 0D F2 | 	cmp	result1, #0 wz
04e88     1C 0C 90 AD |  if_e	jmp	#LR__0326
04e8c     B2 01 00 FF 
04e90     95 14 06 F6 | 	mov	arg02, ##@LR__5555
04e94     13 13 02 F6 | 	mov	arg01, local01
04e98     C0 18 B2 FD | 	call	#__system___string_cmp
04e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea0     0C 0C 90 AD |  if_e	jmp	#LR__0327
04ea4     B2 01 00 FF 
04ea8     A0 14 06 F6 | 	mov	arg02, ##@LR__5556
04eac     13 13 02 F6 | 	mov	arg01, local01
04eb0     A8 18 B2 FD | 	call	#__system___string_cmp
04eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04eb8     FC 0B 90 AD |  if_e	jmp	#LR__0328
04ebc     B2 01 00 FF 
04ec0     A4 14 06 F6 | 	mov	arg02, ##@LR__5557
04ec4     13 13 02 F6 | 	mov	arg01, local01
04ec8     90 18 B2 FD | 	call	#__system___string_cmp
04ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed0     EC 0B 90 AD |  if_e	jmp	#LR__0329
04ed4     B2 01 00 FF 
04ed8     AE 14 06 F6 | 	mov	arg02, ##@LR__5558
04edc     13 13 02 F6 | 	mov	arg01, local01
04ee0     78 18 B2 FD | 	call	#__system___string_cmp
04ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ee8     DC 0B 90 AD |  if_e	jmp	#LR__0330
04eec     B2 01 00 FF 
04ef0     B2 14 06 F6 | 	mov	arg02, ##@LR__5559
04ef4     13 13 02 F6 | 	mov	arg01, local01
04ef8     60 18 B2 FD | 	call	#__system___string_cmp
04efc     00 FA 0D F2 | 	cmp	result1, #0 wz
04f00     CC 0B 90 AD |  if_e	jmp	#LR__0331
04f04     B2 01 00 FF 
04f08     BC 14 06 F6 | 	mov	arg02, ##@LR__5560
04f0c     13 13 02 F6 | 	mov	arg01, local01
04f10     48 18 B2 FD | 	call	#__system___string_cmp
04f14     00 FA 0D F2 | 	cmp	result1, #0 wz
04f18     BC 0B 90 AD |  if_e	jmp	#LR__0332
04f1c     B2 01 00 FF 
04f20     C0 14 06 F6 | 	mov	arg02, ##@LR__5561
04f24     13 13 02 F6 | 	mov	arg01, local01
04f28     30 18 B2 FD | 	call	#__system___string_cmp
04f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f30     AC 0B 90 AD |  if_e	jmp	#LR__0333
04f34     B2 01 00 FF 
04f38     CB 14 06 F6 | 	mov	arg02, ##@LR__5562
04f3c     13 13 02 F6 | 	mov	arg01, local01
04f40     18 18 B2 FD | 	call	#__system___string_cmp
04f44     00 FA 0D F2 | 	cmp	result1, #0 wz
04f48     9C 0B 90 AD |  if_e	jmp	#LR__0334
04f4c     B2 01 00 FF 
04f50     CF 14 06 F6 | 	mov	arg02, ##@LR__5563
04f54     13 13 02 F6 | 	mov	arg01, local01
04f58     00 18 B2 FD | 	call	#__system___string_cmp
04f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f60     8C 0B 90 AD |  if_e	jmp	#LR__0335
04f64     B2 01 00 FF 
04f68     D6 14 06 F6 | 	mov	arg02, ##@LR__5564
04f6c     13 13 02 F6 | 	mov	arg01, local01
04f70     E8 17 B2 FD | 	call	#__system___string_cmp
04f74     00 FA 0D F2 | 	cmp	result1, #0 wz
04f78     7C 0B 90 AD |  if_e	jmp	#LR__0336
04f7c     B2 01 00 FF 
04f80     DA 14 06 F6 | 	mov	arg02, ##@LR__5565
04f84     13 13 02 F6 | 	mov	arg01, local01
04f88     D0 17 B2 FD | 	call	#__system___string_cmp
04f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f90     6C 0B 90 AD |  if_e	jmp	#LR__0337
04f94     B2 01 00 FF 
04f98     E0 14 06 F6 | 	mov	arg02, ##@LR__5566
04f9c     13 13 02 F6 | 	mov	arg01, local01
04fa0     B8 17 B2 FD | 	call	#__system___string_cmp
04fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fa8     5C 0B 90 AD |  if_e	jmp	#LR__0338
04fac     B2 01 00 FF 
04fb0     E6 14 06 F6 | 	mov	arg02, ##@LR__5567
04fb4     13 13 02 F6 | 	mov	arg01, local01
04fb8     A0 17 B2 FD | 	call	#__system___string_cmp
04fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc0     4C 0B 90 AD |  if_e	jmp	#LR__0339
04fc4     B2 01 00 FF 
04fc8     EA 14 06 F6 | 	mov	arg02, ##@LR__5568
04fcc     13 13 02 F6 | 	mov	arg01, local01
04fd0     88 17 B2 FD | 	call	#__system___string_cmp
04fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fd8     3C 0B 90 AD |  if_e	jmp	#LR__0340
04fdc     B2 01 00 FF 
04fe0     F2 14 06 F6 | 	mov	arg02, ##@LR__5569
04fe4     13 13 02 F6 | 	mov	arg01, local01
04fe8     70 17 B2 FD | 	call	#__system___string_cmp
04fec     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff0     2C 0B 90 AD |  if_e	jmp	#LR__0341
04ff4     B2 01 00 FF 
04ff8     F8 14 06 F6 | 	mov	arg02, ##@LR__5570
04ffc     13 13 02 F6 | 	mov	arg01, local01
05000     58 17 B2 FD | 	call	#__system___string_cmp
05004     00 FA 0D F2 | 	cmp	result1, #0 wz
05008     1C 0B 90 AD |  if_e	jmp	#LR__0342
0500c     B2 01 00 FF 
05010     FB 14 06 F6 | 	mov	arg02, ##@LR__5571
05014     13 13 02 F6 | 	mov	arg01, local01
05018     40 17 B2 FD | 	call	#__system___string_cmp
0501c     00 FA 0D F2 | 	cmp	result1, #0 wz
05020     0C 0B 90 AD |  if_e	jmp	#LR__0343
05024     B2 01 00 FF 
05028     00 15 06 F6 | 	mov	arg02, ##@LR__5572
0502c     13 13 02 F6 | 	mov	arg01, local01
05030     28 17 B2 FD | 	call	#__system___string_cmp
05034     00 FA 0D F2 | 	cmp	result1, #0 wz
05038     FC 0A 90 AD |  if_e	jmp	#LR__0344
0503c     B2 01 00 FF 
05040     07 15 06 F6 | 	mov	arg02, ##@LR__5573
05044     13 13 02 F6 | 	mov	arg01, local01
05048     10 17 B2 FD | 	call	#__system___string_cmp
0504c     00 FA 0D F2 | 	cmp	result1, #0 wz
05050     EC 0A 90 AD |  if_e	jmp	#LR__0345
05054     B2 01 00 FF 
05058     0C 15 06 F6 | 	mov	arg02, ##@LR__5574
0505c     13 13 02 F6 | 	mov	arg01, local01
05060     F8 16 B2 FD | 	call	#__system___string_cmp
05064     00 FA 0D F2 | 	cmp	result1, #0 wz
05068     DC 0A 90 AD |  if_e	jmp	#LR__0346
0506c     B2 01 00 FF 
05070     13 15 06 F6 | 	mov	arg02, ##@LR__5575
05074     13 13 02 F6 | 	mov	arg01, local01
05078     E0 16 B2 FD | 	call	#__system___string_cmp
0507c     00 FA 0D F2 | 	cmp	result1, #0 wz
05080     CC 0A 90 AD |  if_e	jmp	#LR__0347
05084     B2 01 00 FF 
05088     1A 15 06 F6 | 	mov	arg02, ##@LR__5576
0508c     13 13 02 F6 | 	mov	arg01, local01
05090     C8 16 B2 FD | 	call	#__system___string_cmp
05094     00 FA 0D F2 | 	cmp	result1, #0 wz
05098     BC 0A 90 AD |  if_e	jmp	#LR__0348
0509c     B2 01 00 FF 
050a0     24 15 06 F6 | 	mov	arg02, ##@LR__5577
050a4     13 13 02 F6 | 	mov	arg01, local01
050a8     B0 16 B2 FD | 	call	#__system___string_cmp
050ac     00 FA 0D F2 | 	cmp	result1, #0 wz
050b0     AC 0A 90 AD |  if_e	jmp	#LR__0349
050b4     B2 01 00 FF 
050b8     28 15 06 F6 | 	mov	arg02, ##@LR__5578
050bc     13 13 02 F6 | 	mov	arg01, local01
050c0     98 16 B2 FD | 	call	#__system___string_cmp
050c4     00 FA 0D F2 | 	cmp	result1, #0 wz
050c8     9C 0A 90 AD |  if_e	jmp	#LR__0350
050cc     B2 01 00 FF 
050d0     2C 15 06 F6 | 	mov	arg02, ##@LR__5579
050d4     13 13 02 F6 | 	mov	arg01, local01
050d8     80 16 B2 FD | 	call	#__system___string_cmp
050dc     00 FA 0D F2 | 	cmp	result1, #0 wz
050e0     8C 0A 90 AD |  if_e	jmp	#LR__0351
050e4     B2 01 00 FF 
050e8     33 15 06 F6 | 	mov	arg02, ##@LR__5580
050ec     13 13 02 F6 | 	mov	arg01, local01
050f0     68 16 B2 FD | 	call	#__system___string_cmp
050f4     00 FA 0D F2 | 	cmp	result1, #0 wz
050f8     7C 0A 90 AD |  if_e	jmp	#LR__0352
050fc     B2 01 00 FF 
05100     37 15 06 F6 | 	mov	arg02, ##@LR__5581
05104     13 13 02 F6 | 	mov	arg01, local01
05108     50 16 B2 FD | 	call	#__system___string_cmp
0510c     00 FA 0D F2 | 	cmp	result1, #0 wz
05110     6C 0A 90 AD |  if_e	jmp	#LR__0353
05114     B2 01 00 FF 
05118     3B 15 06 F6 | 	mov	arg02, ##@LR__5582
0511c     13 13 02 F6 | 	mov	arg01, local01
05120     38 16 B2 FD | 	call	#__system___string_cmp
05124     00 FA 0D F2 | 	cmp	result1, #0 wz
05128     5C 0A 90 AD |  if_e	jmp	#LR__0354
0512c     B2 01 00 FF 
05130     41 15 06 F6 | 	mov	arg02, ##@LR__5583
05134     13 13 02 F6 | 	mov	arg01, local01
05138     20 16 B2 FD | 	call	#__system___string_cmp
0513c     00 FA 0D F2 | 	cmp	result1, #0 wz
05140     4C 0A 90 AD |  if_e	jmp	#LR__0355
05144     B2 01 00 FF 
05148     46 15 06 F6 | 	mov	arg02, ##@LR__5584
0514c     13 13 02 F6 | 	mov	arg01, local01
05150     08 16 B2 FD | 	call	#__system___string_cmp
05154     00 FA 0D F2 | 	cmp	result1, #0 wz
05158     3C 0A 90 AD |  if_e	jmp	#LR__0356
0515c     B2 01 00 FF 
05160     4D 15 06 F6 | 	mov	arg02, ##@LR__5585
05164     13 13 02 F6 | 	mov	arg01, local01
05168     F0 15 B2 FD | 	call	#__system___string_cmp
0516c     00 FA 0D F2 | 	cmp	result1, #0 wz
05170     2C 0A 90 AD |  if_e	jmp	#LR__0357
05174     B2 01 00 FF 
05178     51 15 06 F6 | 	mov	arg02, ##@LR__5586
0517c     13 13 02 F6 | 	mov	arg01, local01
05180     D8 15 B2 FD | 	call	#__system___string_cmp
05184     00 FA 0D F2 | 	cmp	result1, #0 wz
05188     1C 0A 90 AD |  if_e	jmp	#LR__0358
0518c     B2 01 00 FF 
05190     56 15 06 F6 | 	mov	arg02, ##@LR__5587
05194     13 13 02 F6 | 	mov	arg01, local01
05198     C0 15 B2 FD | 	call	#__system___string_cmp
0519c     00 FA 0D F2 | 	cmp	result1, #0 wz
051a0     0C 0A 90 AD |  if_e	jmp	#LR__0359
051a4     B2 01 00 FF 
051a8     5A 15 06 F6 | 	mov	arg02, ##@LR__5588
051ac     13 13 02 F6 | 	mov	arg01, local01
051b0     A8 15 B2 FD | 	call	#__system___string_cmp
051b4     00 FA 0D F2 | 	cmp	result1, #0 wz
051b8     FC 09 90 AD |  if_e	jmp	#LR__0360
051bc     B2 01 00 FF 
051c0     60 15 06 F6 | 	mov	arg02, ##@LR__5589
051c4     13 13 02 F6 | 	mov	arg01, local01
051c8     90 15 B2 FD | 	call	#__system___string_cmp
051cc     00 FA 0D F2 | 	cmp	result1, #0 wz
051d0     EC 09 90 AD |  if_e	jmp	#LR__0361
051d4     B2 01 00 FF 
051d8     63 15 06 F6 | 	mov	arg02, ##@LR__5590
051dc     13 13 02 F6 | 	mov	arg01, local01
051e0     78 15 B2 FD | 	call	#__system___string_cmp
051e4     00 FA 0D F2 | 	cmp	result1, #0 wz
051e8     DC 09 90 AD |  if_e	jmp	#LR__0362
051ec     B2 01 00 FF 
051f0     6B 15 06 F6 | 	mov	arg02, ##@LR__5591
051f4     13 13 02 F6 | 	mov	arg01, local01
051f8     60 15 B2 FD | 	call	#__system___string_cmp
051fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05200     CC 09 90 AD |  if_e	jmp	#LR__0363
05204     B2 01 00 FF 
05208     6F 15 06 F6 | 	mov	arg02, ##@LR__5592
0520c     13 13 02 F6 | 	mov	arg01, local01
05210     48 15 B2 FD | 	call	#__system___string_cmp
05214     00 FA 0D F2 | 	cmp	result1, #0 wz
05218     BC 09 90 AD |  if_e	jmp	#LR__0364
0521c     B2 01 00 FF 
05220     74 15 06 F6 | 	mov	arg02, ##@LR__5593
05224     13 13 02 F6 | 	mov	arg01, local01
05228     30 15 B2 FD | 	call	#__system___string_cmp
0522c     00 FA 0D F2 | 	cmp	result1, #0 wz
05230     AC 09 90 AD |  if_e	jmp	#LR__0365
05234     B2 01 00 FF 
05238     78 15 06 F6 | 	mov	arg02, ##@LR__5594
0523c     13 13 02 F6 | 	mov	arg01, local01
05240     18 15 B2 FD | 	call	#__system___string_cmp
05244     00 FA 0D F2 | 	cmp	result1, #0 wz
05248     9C 09 90 AD |  if_e	jmp	#LR__0366
0524c     B2 01 00 FF 
05250     7D 15 06 F6 | 	mov	arg02, ##@LR__5595
05254     13 13 02 F6 | 	mov	arg01, local01
05258     00 15 B2 FD | 	call	#__system___string_cmp
0525c     00 FA 0D F2 | 	cmp	result1, #0 wz
05260     8C 09 90 AD |  if_e	jmp	#LR__0367
05264     B2 01 00 FF 
05268     81 15 06 F6 | 	mov	arg02, ##@LR__5596
0526c     13 13 02 F6 | 	mov	arg01, local01
05270     E8 14 B2 FD | 	call	#__system___string_cmp
05274     00 FA 0D F2 | 	cmp	result1, #0 wz
05278     7C 09 90 AD |  if_e	jmp	#LR__0368
0527c     B2 01 00 FF 
05280     84 15 06 F6 | 	mov	arg02, ##@LR__5597
05284     13 13 02 F6 | 	mov	arg01, local01
05288     D0 14 B2 FD | 	call	#__system___string_cmp
0528c     00 FA 0D F2 | 	cmp	result1, #0 wz
05290     6C 09 90 AD |  if_e	jmp	#LR__0369
05294     B2 01 00 FF 
05298     8A 15 06 F6 | 	mov	arg02, ##@LR__5598
0529c     13 13 02 F6 | 	mov	arg01, local01
052a0     B8 14 B2 FD | 	call	#__system___string_cmp
052a4     00 FA 0D F2 | 	cmp	result1, #0 wz
052a8     5C 09 90 AD |  if_e	jmp	#LR__0370
052ac     B2 01 00 FF 
052b0     8E 15 06 F6 | 	mov	arg02, ##@LR__5599
052b4     13 13 02 F6 | 	mov	arg01, local01
052b8     A0 14 B2 FD | 	call	#__system___string_cmp
052bc     00 FA 0D F2 | 	cmp	result1, #0 wz
052c0     4C 09 90 AD |  if_e	jmp	#LR__0371
052c4     B2 01 00 FF 
052c8     92 15 06 F6 | 	mov	arg02, ##@LR__5600
052cc     13 13 02 F6 | 	mov	arg01, local01
052d0     88 14 B2 FD | 	call	#__system___string_cmp
052d4     00 FA 0D F2 | 	cmp	result1, #0 wz
052d8     3C 09 90 AD |  if_e	jmp	#LR__0372
052dc     B2 01 00 FF 
052e0     98 15 06 F6 | 	mov	arg02, ##@LR__5601
052e4     13 13 02 F6 | 	mov	arg01, local01
052e8     70 14 B2 FD | 	call	#__system___string_cmp
052ec     00 FA 0D F2 | 	cmp	result1, #0 wz
052f0     2C 09 90 AD |  if_e	jmp	#LR__0373
052f4     B2 01 00 FF 
052f8     9D 15 06 F6 | 	mov	arg02, ##@LR__5602
052fc     13 13 02 F6 | 	mov	arg01, local01
05300     58 14 B2 FD | 	call	#__system___string_cmp
05304     00 FA 0D F2 | 	cmp	result1, #0 wz
05308     1C 09 90 AD |  if_e	jmp	#LR__0374
0530c     B2 01 00 FF 
05310     A0 15 06 F6 | 	mov	arg02, ##@LR__5603
05314     13 13 02 F6 | 	mov	arg01, local01
05318     40 14 B2 FD | 	call	#__system___string_cmp
0531c     00 FA 0D F2 | 	cmp	result1, #0 wz
05320     0C 09 90 AD |  if_e	jmp	#LR__0375
05324     B2 01 00 FF 
05328     A3 15 06 F6 | 	mov	arg02, ##@LR__5604
0532c     13 13 02 F6 | 	mov	arg01, local01
05330     28 14 B2 FD | 	call	#__system___string_cmp
05334     00 FA 0D F2 | 	cmp	result1, #0 wz
05338     FC 08 90 AD |  if_e	jmp	#LR__0376
0533c     B2 01 00 FF 
05340     A7 15 06 F6 | 	mov	arg02, ##@LR__5605
05344     13 13 02 F6 | 	mov	arg01, local01
05348     10 14 B2 FD | 	call	#__system___string_cmp
0534c     00 FA 0D F2 | 	cmp	result1, #0 wz
05350     EC 08 90 AD |  if_e	jmp	#LR__0377
05354     B2 01 00 FF 
05358     AA 15 06 F6 | 	mov	arg02, ##@LR__5606
0535c     13 13 02 F6 | 	mov	arg01, local01
05360     F8 13 B2 FD | 	call	#__system___string_cmp
05364     00 FA 0D F2 | 	cmp	result1, #0 wz
05368     DC 08 90 AD |  if_e	jmp	#LR__0378
0536c     B2 01 00 FF 
05370     B0 15 06 F6 | 	mov	arg02, ##@LR__5607
05374     13 13 02 F6 | 	mov	arg01, local01
05378     E0 13 B2 FD | 	call	#__system___string_cmp
0537c     00 FA 0D F2 | 	cmp	result1, #0 wz
05380     CC 08 90 AD |  if_e	jmp	#LR__0379
05384     B2 01 00 FF 
05388     B5 15 06 F6 | 	mov	arg02, ##@LR__5608
0538c     13 13 02 F6 | 	mov	arg01, local01
05390     C8 13 B2 FD | 	call	#__system___string_cmp
05394     00 FA 0D F2 | 	cmp	result1, #0 wz
05398     BC 08 90 AD |  if_e	jmp	#LR__0380
0539c     B2 01 00 FF 
053a0     B8 15 06 F6 | 	mov	arg02, ##@LR__5609
053a4     13 13 02 F6 | 	mov	arg01, local01
053a8     B0 13 B2 FD | 	call	#__system___string_cmp
053ac     00 FA 0D F2 | 	cmp	result1, #0 wz
053b0     AC 08 90 AD |  if_e	jmp	#LR__0381
053b4     B2 01 00 FF 
053b8     BD 15 06 F6 | 	mov	arg02, ##@LR__5610
053bc     13 13 02 F6 | 	mov	arg01, local01
053c0     98 13 B2 FD | 	call	#__system___string_cmp
053c4     00 FA 0D F2 | 	cmp	result1, #0 wz
053c8     9C 08 90 AD |  if_e	jmp	#LR__0382
053cc     B2 01 00 FF 
053d0     C1 15 06 F6 | 	mov	arg02, ##@LR__5611
053d4     13 13 02 F6 | 	mov	arg01, local01
053d8     80 13 B2 FD | 	call	#__system___string_cmp
053dc     00 FA 0D F2 | 	cmp	result1, #0 wz
053e0     8C 08 90 AD |  if_e	jmp	#LR__0383
053e4     B2 01 00 FF 
053e8     C7 15 06 F6 | 	mov	arg02, ##@LR__5612
053ec     13 13 02 F6 | 	mov	arg01, local01
053f0     68 13 B2 FD | 	call	#__system___string_cmp
053f4     00 FA 0D F2 | 	cmp	result1, #0 wz
053f8     7C 08 90 AD |  if_e	jmp	#LR__0384
053fc     B2 01 00 FF 
05400     CD 15 06 F6 | 	mov	arg02, ##@LR__5613
05404     13 13 02 F6 | 	mov	arg01, local01
05408     50 13 B2 FD | 	call	#__system___string_cmp
0540c     00 FA 0D F2 | 	cmp	result1, #0 wz
05410     6C 08 90 AD |  if_e	jmp	#LR__0385
05414     B2 01 00 FF 
05418     D2 15 06 F6 | 	mov	arg02, ##@LR__5614
0541c     13 13 02 F6 | 	mov	arg01, local01
05420     38 13 B2 FD | 	call	#__system___string_cmp
05424     00 FA 0D F2 | 	cmp	result1, #0 wz
05428     5C 08 90 AD |  if_e	jmp	#LR__0386
0542c     B2 01 00 FF 
05430     D5 15 06 F6 | 	mov	arg02, ##@LR__5615
05434     13 13 02 F6 | 	mov	arg01, local01
05438     20 13 B2 FD | 	call	#__system___string_cmp
0543c     00 FA 0D F2 | 	cmp	result1, #0 wz
05440     4C 08 90 AD |  if_e	jmp	#LR__0387
05444     B2 01 00 FF 
05448     DB 15 06 F6 | 	mov	arg02, ##@LR__5616
0544c     13 13 02 F6 | 	mov	arg01, local01
05450     08 13 B2 FD | 	call	#__system___string_cmp
05454     00 FA 0D F2 | 	cmp	result1, #0 wz
05458     3C 08 90 AD |  if_e	jmp	#LR__0388
0545c     B2 01 00 FF 
05460     DF 15 06 F6 | 	mov	arg02, ##@LR__5617
05464     13 13 02 F6 | 	mov	arg01, local01
05468     F0 12 B2 FD | 	call	#__system___string_cmp
0546c     00 FA 0D F2 | 	cmp	result1, #0 wz
05470     2C 08 90 AD |  if_e	jmp	#LR__0389
05474     B2 01 00 FF 
05478     E4 15 06 F6 | 	mov	arg02, ##@LR__5618
0547c     13 13 02 F6 | 	mov	arg01, local01
05480     D8 12 B2 FD | 	call	#__system___string_cmp
05484     00 FA 0D F2 | 	cmp	result1, #0 wz
05488     1C 08 90 AD |  if_e	jmp	#LR__0390
0548c     B2 01 00 FF 
05490     E7 15 06 F6 | 	mov	arg02, ##@LR__5619
05494     13 13 02 F6 | 	mov	arg01, local01
05498     C0 12 B2 FD | 	call	#__system___string_cmp
0549c     00 FA 0D F2 | 	cmp	result1, #0 wz
054a0     0C 08 90 AD |  if_e	jmp	#LR__0391
054a4     B2 01 00 FF 
054a8     EA 15 06 F6 | 	mov	arg02, ##@LR__5620
054ac     13 13 02 F6 | 	mov	arg01, local01
054b0     A8 12 B2 FD | 	call	#__system___string_cmp
054b4     00 FA 0D F2 | 	cmp	result1, #0 wz
054b8     FC 07 90 AD |  if_e	jmp	#LR__0392
054bc     B2 01 00 FF 
054c0     EF 15 06 F6 | 	mov	arg02, ##@LR__5621
054c4     13 13 02 F6 | 	mov	arg01, local01
054c8     90 12 B2 FD | 	call	#__system___string_cmp
054cc     00 FA 0D F2 | 	cmp	result1, #0 wz
054d0     EC 07 90 AD |  if_e	jmp	#LR__0393
054d4     B2 01 00 FF 
054d8     F5 15 06 F6 | 	mov	arg02, ##@LR__5622
054dc     13 13 02 F6 | 	mov	arg01, local01
054e0     78 12 B2 FD | 	call	#__system___string_cmp
054e4     00 FA 0D F2 | 	cmp	result1, #0 wz
054e8     DC 07 90 AD |  if_e	jmp	#LR__0394
054ec     B2 01 00 FF 
054f0     F9 15 06 F6 | 	mov	arg02, ##@LR__5623
054f4     13 13 02 F6 | 	mov	arg01, local01
054f8     60 12 B2 FD | 	call	#__system___string_cmp
054fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05500     CC 07 90 AD |  if_e	jmp	#LR__0395
05504     B3 01 00 FF 
05508     02 14 06 F6 | 	mov	arg02, ##@LR__5624
0550c     13 13 02 F6 | 	mov	arg01, local01
05510     48 12 B2 FD | 	call	#__system___string_cmp
05514     00 FA 0D F2 | 	cmp	result1, #0 wz
05518     BC 07 90 AD |  if_e	jmp	#LR__0396
0551c     B3 01 00 FF 
05520     08 14 06 F6 | 	mov	arg02, ##@LR__5625
05524     13 13 02 F6 | 	mov	arg01, local01
05528     30 12 B2 FD | 	call	#__system___string_cmp
0552c     00 FA 0D F2 | 	cmp	result1, #0 wz
05530     AC 07 90 AD |  if_e	jmp	#LR__0397
05534     B3 01 00 FF 
05538     0E 14 06 F6 | 	mov	arg02, ##@LR__5626
0553c     13 13 02 F6 | 	mov	arg01, local01
05540     18 12 B2 FD | 	call	#__system___string_cmp
05544     00 FA 0D F2 | 	cmp	result1, #0 wz
05548     9C 07 90 AD |  if_e	jmp	#LR__0398
0554c     B3 01 00 FF 
05550     17 14 06 F6 | 	mov	arg02, ##@LR__5627
05554     13 13 02 F6 | 	mov	arg01, local01
05558     00 12 B2 FD | 	call	#__system___string_cmp
0555c     00 FA 0D F2 | 	cmp	result1, #0 wz
05560     8C 07 90 AD |  if_e	jmp	#LR__0399
05564     B3 01 00 FF 
05568     21 14 06 F6 | 	mov	arg02, ##@LR__5628
0556c     13 13 02 F6 | 	mov	arg01, local01
05570     E8 11 B2 FD | 	call	#__system___string_cmp
05574     00 FA 0D F2 | 	cmp	result1, #0 wz
05578     7C 07 90 AD |  if_e	jmp	#LR__0400
0557c     B3 01 00 FF 
05580     2A 14 06 F6 | 	mov	arg02, ##@LR__5629
05584     13 13 02 F6 | 	mov	arg01, local01
05588     D0 11 B2 FD | 	call	#__system___string_cmp
0558c     00 FA 0D F2 | 	cmp	result1, #0 wz
05590     6C 07 90 AD |  if_e	jmp	#LR__0401
05594     B3 01 00 FF 
05598     2F 14 06 F6 | 	mov	arg02, ##@LR__5630
0559c     13 13 02 F6 | 	mov	arg01, local01
055a0     B8 11 B2 FD | 	call	#__system___string_cmp
055a4     00 FA 0D F2 | 	cmp	result1, #0 wz
055a8     5C 07 90 AD |  if_e	jmp	#LR__0402
055ac     B3 01 00 FF 
055b0     32 14 06 F6 | 	mov	arg02, ##@LR__5631
055b4     13 13 02 F6 | 	mov	arg01, local01
055b8     A0 11 B2 FD | 	call	#__system___string_cmp
055bc     00 FA 0D F2 | 	cmp	result1, #0 wz
055c0     4C 07 90 AD |  if_e	jmp	#LR__0403
055c4     B3 01 00 FF 
055c8     3D 14 06 F6 | 	mov	arg02, ##@LR__5632
055cc     13 13 02 F6 | 	mov	arg01, local01
055d0     88 11 B2 FD | 	call	#__system___string_cmp
055d4     00 FA 0D F2 | 	cmp	result1, #0 wz
055d8     3C 07 90 AD |  if_e	jmp	#LR__0404
055dc     B3 01 00 FF 
055e0     42 14 06 F6 | 	mov	arg02, ##@LR__5633
055e4     13 13 02 F6 | 	mov	arg01, local01
055e8     70 11 B2 FD | 	call	#__system___string_cmp
055ec     00 FA 0D F2 | 	cmp	result1, #0 wz
055f0     2C 07 90 AD |  if_e	jmp	#LR__0405
055f4     B3 01 00 FF 
055f8     46 14 06 F6 | 	mov	arg02, ##@LR__5634
055fc     13 13 02 F6 | 	mov	arg01, local01
05600     58 11 B2 FD | 	call	#__system___string_cmp
05604     00 FA 0D F2 | 	cmp	result1, #0 wz
05608     1C 07 90 AD |  if_e	jmp	#LR__0406
0560c     B3 01 00 FF 
05610     4B 14 06 F6 | 	mov	arg02, ##@LR__5635
05614     13 13 02 F6 | 	mov	arg01, local01
05618     40 11 B2 FD | 	call	#__system___string_cmp
0561c     00 FA 0D F2 | 	cmp	result1, #0 wz
05620     0C 07 90 AD |  if_e	jmp	#LR__0407
05624     B3 01 00 FF 
05628     4F 14 06 F6 | 	mov	arg02, ##@LR__5636
0562c     13 13 02 F6 | 	mov	arg01, local01
05630     28 11 B2 FD | 	call	#__system___string_cmp
05634     00 FA 0D F2 | 	cmp	result1, #0 wz
05638     FC 06 90 AD |  if_e	jmp	#LR__0408
0563c     B3 01 00 FF 
05640     58 14 06 F6 | 	mov	arg02, ##@LR__5637
05644     13 13 02 F6 | 	mov	arg01, local01
05648     10 11 B2 FD | 	call	#__system___string_cmp
0564c     00 FA 0D F2 | 	cmp	result1, #0 wz
05650     EC 06 90 AD |  if_e	jmp	#LR__0409
05654     B3 01 00 FF 
05658     5D 14 06 F6 | 	mov	arg02, ##@LR__5638
0565c     13 13 02 F6 | 	mov	arg01, local01
05660     F8 10 B2 FD | 	call	#__system___string_cmp
05664     00 FA 0D F2 | 	cmp	result1, #0 wz
05668     DC 06 90 AD |  if_e	jmp	#LR__0410
0566c     B3 01 00 FF 
05670     63 14 06 F6 | 	mov	arg02, ##@LR__5639
05674     13 13 02 F6 | 	mov	arg01, local01
05678     E0 10 B2 FD | 	call	#__system___string_cmp
0567c     00 FA 0D F2 | 	cmp	result1, #0 wz
05680     CC 06 90 AD |  if_e	jmp	#LR__0411
05684     B3 01 00 FF 
05688     65 14 06 F6 | 	mov	arg02, ##@LR__5640
0568c     13 13 02 F6 | 	mov	arg01, local01
05690     C8 10 B2 FD | 	call	#__system___string_cmp
05694     00 FA 0D F2 | 	cmp	result1, #0 wz
05698     BC 06 90 AD |  if_e	jmp	#LR__0412
0569c     B3 01 00 FF 
056a0     69 14 06 F6 | 	mov	arg02, ##@LR__5641
056a4     13 13 02 F6 | 	mov	arg01, local01
056a8     B0 10 B2 FD | 	call	#__system___string_cmp
056ac     00 FA 0D F2 | 	cmp	result1, #0 wz
056b0     AC 06 90 AD |  if_e	jmp	#LR__0413
056b4     B3 01 00 FF 
056b8     6D 14 06 F6 | 	mov	arg02, ##@LR__5642
056bc     13 13 02 F6 | 	mov	arg01, local01
056c0     98 10 B2 FD | 	call	#__system___string_cmp
056c4     00 FA 0D F2 | 	cmp	result1, #0 wz
056c8     9C 06 90 AD |  if_e	jmp	#LR__0414
056cc     B3 01 00 FF 
056d0     72 14 06 F6 | 	mov	arg02, ##@LR__5643
056d4     13 13 02 F6 | 	mov	arg01, local01
056d8     80 10 B2 FD | 	call	#__system___string_cmp
056dc     00 FA 0D F2 | 	cmp	result1, #0 wz
056e0     8C 06 90 AD |  if_e	jmp	#LR__0415
056e4     B3 01 00 FF 
056e8     7A 14 06 F6 | 	mov	arg02, ##@LR__5644
056ec     13 13 02 F6 | 	mov	arg01, local01
056f0     68 10 B2 FD | 	call	#__system___string_cmp
056f4     00 FA 0D F2 | 	cmp	result1, #0 wz
056f8     7C 06 90 AD |  if_e	jmp	#LR__0416
056fc     B3 01 00 FF 
05700     7E 14 06 F6 | 	mov	arg02, ##@LR__5645
05704     13 13 02 F6 | 	mov	arg01, local01
05708     50 10 B2 FD | 	call	#__system___string_cmp
0570c     00 FA 0D F2 | 	cmp	result1, #0 wz
05710     6C 06 90 AD |  if_e	jmp	#LR__0417
05714     B3 01 00 FF 
05718     80 14 06 F6 | 	mov	arg02, ##@LR__5646
0571c     13 13 02 F6 | 	mov	arg01, local01
05720     38 10 B2 FD | 	call	#__system___string_cmp
05724     00 FA 0D F2 | 	cmp	result1, #0 wz
05728     5C 06 90 AD |  if_e	jmp	#LR__0418
0572c     B3 01 00 FF 
05730     88 14 06 F6 | 	mov	arg02, ##@LR__5647
05734     13 13 02 F6 | 	mov	arg01, local01
05738     20 10 B2 FD | 	call	#__system___string_cmp
0573c     00 FA 0D F2 | 	cmp	result1, #0 wz
05740     4C 06 90 AD |  if_e	jmp	#LR__0419
05744     B3 01 00 FF 
05748     8F 14 06 F6 | 	mov	arg02, ##@LR__5648
0574c     13 13 02 F6 | 	mov	arg01, local01
05750     08 10 B2 FD | 	call	#__system___string_cmp
05754     00 FA 0D F2 | 	cmp	result1, #0 wz
05758     3C 06 90 AD |  if_e	jmp	#LR__0420
0575c     B3 01 00 FF 
05760     93 14 06 F6 | 	mov	arg02, ##@LR__5649
05764     13 13 02 F6 | 	mov	arg01, local01
05768     F0 0F B2 FD | 	call	#__system___string_cmp
0576c     00 FA 0D F2 | 	cmp	result1, #0 wz
05770     2C 06 90 AD |  if_e	jmp	#LR__0421
05774     B3 01 00 FF 
05778     98 14 06 F6 | 	mov	arg02, ##@LR__5650
0577c     13 13 02 F6 | 	mov	arg01, local01
05780     D8 0F B2 FD | 	call	#__system___string_cmp
05784     00 FA 0D F2 | 	cmp	result1, #0 wz
05788     1C 06 90 AD |  if_e	jmp	#LR__0422
0578c     B3 01 00 FF 
05790     9B 14 06 F6 | 	mov	arg02, ##@LR__5651
05794     13 13 02 F6 | 	mov	arg01, local01
05798     C0 0F B2 FD | 	call	#__system___string_cmp
0579c     00 FA 0D F2 | 	cmp	result1, #0 wz
057a0     0C 06 90 AD |  if_e	jmp	#LR__0423
057a4     B3 01 00 FF 
057a8     A4 14 06 F6 | 	mov	arg02, ##@LR__5652
057ac     13 13 02 F6 | 	mov	arg01, local01
057b0     A8 0F B2 FD | 	call	#__system___string_cmp
057b4     00 FA 0D F2 | 	cmp	result1, #0 wz
057b8     FC 05 90 AD |  if_e	jmp	#LR__0424
057bc     B3 01 00 FF 
057c0     A8 14 06 F6 | 	mov	arg02, ##@LR__5653
057c4     13 13 02 F6 | 	mov	arg01, local01
057c8     90 0F B2 FD | 	call	#__system___string_cmp
057cc     00 FA 0D F2 | 	cmp	result1, #0 wz
057d0     EC 05 90 AD |  if_e	jmp	#LR__0425
057d4     B3 01 00 FF 
057d8     AF 14 06 F6 | 	mov	arg02, ##@LR__5654
057dc     13 13 02 F6 | 	mov	arg01, local01
057e0     78 0F B2 FD | 	call	#__system___string_cmp
057e4     00 FA 0D F2 | 	cmp	result1, #0 wz
057e8     DC 05 90 AD |  if_e	jmp	#LR__0426
057ec     B3 01 00 FF 
057f0     B3 14 06 F6 | 	mov	arg02, ##@LR__5655
057f4     13 13 02 F6 | 	mov	arg01, local01
057f8     60 0F B2 FD | 	call	#__system___string_cmp
057fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05800     CC 05 90 AD |  if_e	jmp	#LR__0427
05804     B3 01 00 FF 
05808     BA 14 06 F6 | 	mov	arg02, ##@LR__5656
0580c     13 13 02 F6 | 	mov	arg01, local01
05810     48 0F B2 FD | 	call	#__system___string_cmp
05814     00 FA 0D F2 | 	cmp	result1, #0 wz
05818     BC 05 90 AD |  if_e	jmp	#LR__0428
0581c     B3 01 00 FF 
05820     BE 14 06 F6 | 	mov	arg02, ##@LR__5657
05824     13 13 02 F6 | 	mov	arg01, local01
05828     30 0F B2 FD | 	call	#__system___string_cmp
0582c     00 FA 0D F2 | 	cmp	result1, #0 wz
05830     AC 05 90 AD |  if_e	jmp	#LR__0429
05834     B3 01 00 FF 
05838     C5 14 06 F6 | 	mov	arg02, ##@LR__5658
0583c     13 13 02 F6 | 	mov	arg01, local01
05840     18 0F B2 FD | 	call	#__system___string_cmp
05844     00 FA 0D F2 | 	cmp	result1, #0 wz
05848     9C 05 90 AD |  if_e	jmp	#LR__0430
0584c     B3 01 00 FF 
05850     C9 14 06 F6 | 	mov	arg02, ##@LR__5659
05854     13 13 02 F6 | 	mov	arg01, local01
05858     00 0F B2 FD | 	call	#__system___string_cmp
0585c     00 FA 0D F2 | 	cmp	result1, #0 wz
05860     8C 05 90 AD |  if_e	jmp	#LR__0431
05864     B3 01 00 FF 
05868     D4 14 06 F6 | 	mov	arg02, ##@LR__5660
0586c     13 13 02 F6 | 	mov	arg01, local01
05870     E8 0E B2 FD | 	call	#__system___string_cmp
05874     00 FA 0D F2 | 	cmp	result1, #0 wz
05878     7C 05 90 AD |  if_e	jmp	#LR__0432
0587c     B3 01 00 FF 
05880     D8 14 06 F6 | 	mov	arg02, ##@LR__5661
05884     13 13 02 F6 | 	mov	arg01, local01
05888     D0 0E B2 FD | 	call	#__system___string_cmp
0588c     00 FA 0D F2 | 	cmp	result1, #0 wz
05890     6C 05 90 AD |  if_e	jmp	#LR__0433
05894     B3 01 00 FF 
05898     DF 14 06 F6 | 	mov	arg02, ##@LR__5662
0589c     13 13 02 F6 | 	mov	arg01, local01
058a0     B8 0E B2 FD | 	call	#__system___string_cmp
058a4     00 FA 0D F2 | 	cmp	result1, #0 wz
058a8     5C 05 90 AD |  if_e	jmp	#LR__0434
058ac     B3 01 00 FF 
058b0     E3 14 06 F6 | 	mov	arg02, ##@LR__5663
058b4     13 13 02 F6 | 	mov	arg01, local01
058b8     A0 0E B2 FD | 	call	#__system___string_cmp
058bc     00 FA 0D F2 | 	cmp	result1, #0 wz
058c0     4C 05 90 AD |  if_e	jmp	#LR__0435
058c4     B3 01 00 FF 
058c8     EB 14 06 F6 | 	mov	arg02, ##@LR__5664
058cc     13 13 02 F6 | 	mov	arg01, local01
058d0     88 0E B2 FD | 	call	#__system___string_cmp
058d4     00 FA 0D F2 | 	cmp	result1, #0 wz
058d8     3C 05 90 AD |  if_e	jmp	#LR__0436
058dc     B3 01 00 FF 
058e0     EF 14 06 F6 | 	mov	arg02, ##@LR__5665
058e4     13 13 02 F6 | 	mov	arg01, local01
058e8     70 0E B2 FD | 	call	#__system___string_cmp
058ec     00 FA 0D F2 | 	cmp	result1, #0 wz
058f0     2C 05 90 AD |  if_e	jmp	#LR__0437
058f4     B3 01 00 FF 
058f8     F6 14 06 F6 | 	mov	arg02, ##@LR__5666
058fc     13 13 02 F6 | 	mov	arg01, local01
05900     58 0E B2 FD | 	call	#__system___string_cmp
05904     00 FA 0D F2 | 	cmp	result1, #0 wz
05908     1C 05 90 AD |  if_e	jmp	#LR__0438
0590c     B3 01 00 FF 
05910     FD 14 06 F6 | 	mov	arg02, ##@LR__5667
05914     13 13 02 F6 | 	mov	arg01, local01
05918     40 0E B2 FD | 	call	#__system___string_cmp
0591c     00 FA 0D F2 | 	cmp	result1, #0 wz
05920     0C 05 90 AD |  if_e	jmp	#LR__0439
05924     B3 01 00 FF 
05928     01 15 06 F6 | 	mov	arg02, ##@LR__5668
0592c     13 13 02 F6 | 	mov	arg01, local01
05930     28 0E B2 FD | 	call	#__system___string_cmp
05934     00 FA 0D F2 | 	cmp	result1, #0 wz
05938     FC 04 90 AD |  if_e	jmp	#LR__0440
0593c     B3 01 00 FF 
05940     07 15 06 F6 | 	mov	arg02, ##@LR__5669
05944     13 13 02 F6 | 	mov	arg01, local01
05948     10 0E B2 FD | 	call	#__system___string_cmp
0594c     00 FA 0D F2 | 	cmp	result1, #0 wz
05950     EC 04 90 AD |  if_e	jmp	#LR__0441
05954     B3 01 00 FF 
05958     0B 15 06 F6 | 	mov	arg02, ##@LR__5670
0595c     13 13 02 F6 | 	mov	arg01, local01
05960     F8 0D B2 FD | 	call	#__system___string_cmp
05964     00 FA 0D F2 | 	cmp	result1, #0 wz
05968     DC 04 90 AD |  if_e	jmp	#LR__0442
0596c     B3 01 00 FF 
05970     12 15 06 F6 | 	mov	arg02, ##@LR__5671
05974     13 13 02 F6 | 	mov	arg01, local01
05978     E0 0D B2 FD | 	call	#__system___string_cmp
0597c     00 FA 0D F2 | 	cmp	result1, #0 wz
05980     CC 04 90 AD |  if_e	jmp	#LR__0443
05984     B3 01 00 FF 
05988     17 15 06 F6 | 	mov	arg02, ##@LR__5672
0598c     13 13 02 F6 | 	mov	arg01, local01
05990     C8 0D B2 FD | 	call	#__system___string_cmp
05994     00 FA 0D F2 | 	cmp	result1, #0 wz
05998     BC 04 90 AD |  if_e	jmp	#LR__0444
0599c     B3 01 00 FF 
059a0     1C 15 06 F6 | 	mov	arg02, ##@LR__5673
059a4     13 13 02 F6 | 	mov	arg01, local01
059a8     B0 0D B2 FD | 	call	#__system___string_cmp
059ac     00 FA 0D F2 | 	cmp	result1, #0 wz
059b0     AC 04 90 AD |  if_e	jmp	#LR__0445
059b4     B3 01 00 FF 
059b8     23 15 06 F6 | 	mov	arg02, ##@LR__5674
059bc     13 13 02 F6 | 	mov	arg01, local01
059c0     98 0D B2 FD | 	call	#__system___string_cmp
059c4     00 FA 0D F2 | 	cmp	result1, #0 wz
059c8     9C 04 90 AD |  if_e	jmp	#LR__0446
059cc     B3 01 00 FF 
059d0     26 15 06 F6 | 	mov	arg02, ##@LR__5675
059d4     13 13 02 F6 | 	mov	arg01, local01
059d8     80 0D B2 FD | 	call	#__system___string_cmp
059dc     00 FA 0D F2 | 	cmp	result1, #0 wz
059e0     8C 04 90 AD |  if_e	jmp	#LR__0447
059e4     B3 01 00 FF 
059e8     30 15 06 F6 | 	mov	arg02, ##@LR__5676
059ec     13 13 02 F6 | 	mov	arg01, local01
059f0     68 0D B2 FD | 	call	#__system___string_cmp
059f4     00 FA 0D F2 | 	cmp	result1, #0 wz
059f8     7C 04 90 AD |  if_e	jmp	#LR__0448
059fc     B3 01 00 FF 
05a00     34 15 06 F6 | 	mov	arg02, ##@LR__5677
05a04     13 13 02 F6 | 	mov	arg01, local01
05a08     50 0D B2 FD | 	call	#__system___string_cmp
05a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a10     6C 04 90 AD |  if_e	jmp	#LR__0449
05a14     B3 01 00 FF 
05a18     3C 15 06 F6 | 	mov	arg02, ##@LR__5678
05a1c     13 13 02 F6 | 	mov	arg01, local01
05a20     38 0D B2 FD | 	call	#__system___string_cmp
05a24     00 FA 0D F2 | 	cmp	result1, #0 wz
05a28     5C 04 90 AD |  if_e	jmp	#LR__0450
05a2c     B3 01 00 FF 
05a30     40 15 06 F6 | 	mov	arg02, ##@LR__5679
05a34     13 13 02 F6 | 	mov	arg01, local01
05a38     20 0D B2 FD | 	call	#__system___string_cmp
05a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a40     4C 04 90 AD |  if_e	jmp	#LR__0451
05a44     B3 01 00 FF 
05a48     46 15 06 F6 | 	mov	arg02, ##@LR__5680
05a4c     13 13 02 F6 | 	mov	arg01, local01
05a50     08 0D B2 FD | 	call	#__system___string_cmp
05a54     00 FA 0D F2 | 	cmp	result1, #0 wz
05a58     3C 04 90 AD |  if_e	jmp	#LR__0452
05a5c     B3 01 00 FF 
05a60     4C 15 06 F6 | 	mov	arg02, ##@LR__5681
05a64     13 13 02 F6 | 	mov	arg01, local01
05a68     F0 0C B2 FD | 	call	#__system___string_cmp
05a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a70     2C 04 90 AD |  if_e	jmp	#LR__0453
05a74     30 04 90 FD | 	jmp	#LR__0454
05a78                 | LR__0320
05a78     5C FA 05 F6 | 	mov	result1, #92
05a7c     2C 04 90 FD | 	jmp	#LR__0455
05a80                 | LR__0321
05a80     5C FA 05 F6 | 	mov	result1, #92
05a84     24 04 90 FD | 	jmp	#LR__0455
05a88                 | LR__0322
05a88     B9 FA 05 F6 | 	mov	result1, #185
05a8c     1C 04 90 FD | 	jmp	#LR__0455
05a90                 | LR__0323
05a90     47 FA 05 F6 | 	mov	result1, #71
05a94     14 04 90 FD | 	jmp	#LR__0455
05a98                 | LR__0324
05a98     59 FA 05 F6 | 	mov	result1, #89
05a9c     0C 04 90 FD | 	jmp	#LR__0455
05aa0                 | LR__0325
05aa0     59 FA 05 F6 | 	mov	result1, #89
05aa4     04 04 90 FD | 	jmp	#LR__0455
05aa8                 | LR__0326
05aa8     C3 FA 05 F6 | 	mov	result1, #195
05aac     FC 03 90 FD | 	jmp	#LR__0455
05ab0                 | LR__0327
05ab0     AE FA 05 F6 | 	mov	result1, #174
05ab4     F4 03 90 FD | 	jmp	#LR__0455
05ab8                 | LR__0328
05ab8     AE FA 05 F6 | 	mov	result1, #174
05abc     EC 03 90 FD | 	jmp	#LR__0455
05ac0                 | LR__0329
05ac0     B1 FA 05 F6 | 	mov	result1, #177
05ac4     E4 03 90 FD | 	jmp	#LR__0455
05ac8                 | LR__0330
05ac8     B1 FA 05 F6 | 	mov	result1, #177
05acc     DC 03 90 FD | 	jmp	#LR__0455
05ad0                 | LR__0331
05ad0     AF FA 05 F6 | 	mov	result1, #175
05ad4     D4 03 90 FD | 	jmp	#LR__0455
05ad8                 | LR__0332
05ad8     AF FA 05 F6 | 	mov	result1, #175
05adc     CC 03 90 FD | 	jmp	#LR__0455
05ae0                 | LR__0333
05ae0     B0 FA 05 F6 | 	mov	result1, #176
05ae4     C4 03 90 FD | 	jmp	#LR__0455
05ae8                 | LR__0334
05ae8     B0 FA 05 F6 | 	mov	result1, #176
05aec     BC 03 90 FD | 	jmp	#LR__0455
05af0                 | LR__0335
05af0     45 FA 05 F6 | 	mov	result1, #69
05af4     B4 03 90 FD | 	jmp	#LR__0455
05af8                 | LR__0336
05af8     45 FA 05 F6 | 	mov	result1, #69
05afc     AC 03 90 FD | 	jmp	#LR__0455
05b00                 | LR__0337
05b00     69 FA 05 F6 | 	mov	result1, #105
05b04     A4 03 90 FD | 	jmp	#LR__0455
05b08                 | LR__0338
05b08     B4 FA 05 F6 | 	mov	result1, #180
05b0c     9C 03 90 FD | 	jmp	#LR__0455
05b10                 | LR__0339
05b10     40 FA 05 F6 | 	mov	result1, #64
05b14     94 03 90 FD | 	jmp	#LR__0455
05b18                 | LR__0340
05b18     C0 FA 05 F6 | 	mov	result1, #192
05b1c     8C 03 90 FD | 	jmp	#LR__0455
05b20                 | LR__0341
05b20     49 FA 05 F6 | 	mov	result1, #73
05b24     84 03 90 FD | 	jmp	#LR__0455
05b28                 | LR__0342
05b28     49 FA 05 F6 | 	mov	result1, #73
05b2c     7C 03 90 FD | 	jmp	#LR__0455
05b30                 | LR__0343
05b30     C4 FA 05 F6 | 	mov	result1, #196
05b34     74 03 90 FD | 	jmp	#LR__0455
05b38                 | LR__0344
05b38     68 FA 05 F6 | 	mov	result1, #104
05b3c     6C 03 90 FD | 	jmp	#LR__0455
05b40                 | LR__0345
05b40     B7 FA 05 F6 | 	mov	result1, #183
05b44     64 03 90 FD | 	jmp	#LR__0455
05b48                 | LR__0346
05b48     73 FA 05 F6 | 	mov	result1, #115
05b4c     5C 03 90 FD | 	jmp	#LR__0455
05b50                 | LR__0347
05b50     74 FA 05 F6 | 	mov	result1, #116
05b54     54 03 90 FD | 	jmp	#LR__0455
05b58                 | LR__0348
05b58     6C FA 05 F6 | 	mov	result1, #108
05b5c     4C 03 90 FD | 	jmp	#LR__0455
05b60                 | LR__0349
05b60     6C FA 05 F6 | 	mov	result1, #108
05b64     44 03 90 FD | 	jmp	#LR__0455
05b68                 | LR__0350
05b68     89 FA 05 F6 | 	mov	result1, #137
05b6c     3C 03 90 FD | 	jmp	#LR__0455
05b70                 | LR__0351
05b70     C2 FA 05 F6 | 	mov	result1, #194
05b74     34 03 90 FD | 	jmp	#LR__0455
05b78                 | LR__0352
05b78     72 FA 05 F6 | 	mov	result1, #114
05b7c     2C 03 90 FD | 	jmp	#LR__0455
05b80                 | LR__0353
05b80     5D FA 05 F6 | 	mov	result1, #93
05b84     24 03 90 FD | 	jmp	#LR__0455
05b88                 | LR__0354
05b88     96 FA 05 F6 | 	mov	result1, #150
05b8c     1C 03 90 FD | 	jmp	#LR__0455
05b90                 | LR__0355
05b90     43 FA 05 F6 | 	mov	result1, #67
05b94     14 03 90 FD | 	jmp	#LR__0455
05b98                 | LR__0356
05b98     43 FA 05 F6 | 	mov	result1, #67
05b9c     0C 03 90 FD | 	jmp	#LR__0455
05ba0                 | LR__0357
05ba0     43 FA 05 F6 | 	mov	result1, #67
05ba4     04 03 90 FD | 	jmp	#LR__0455
05ba8                 | LR__0358
05ba8     5A FA 05 F6 | 	mov	result1, #90
05bac     FC 02 90 FD | 	jmp	#LR__0455
05bb0                 | LR__0359
05bb0     AB FA 05 F6 | 	mov	result1, #171
05bb4     F4 02 90 FD | 	jmp	#LR__0455
05bb8                 | LR__0360
05bb8     BD FA 05 F6 | 	mov	result1, #189
05bbc     EC 02 90 FD | 	jmp	#LR__0455
05bc0                 | LR__0361
05bc0     BD FA 05 F6 | 	mov	result1, #189
05bc4     E4 02 90 FD | 	jmp	#LR__0455
05bc8                 | LR__0362
05bc8     46 FA 05 F6 | 	mov	result1, #70
05bcc     DC 02 90 FD | 	jmp	#LR__0455
05bd0                 | LR__0363
05bd0     46 FA 05 F6 | 	mov	result1, #70
05bd4     D4 02 90 FD | 	jmp	#LR__0455
05bd8                 | LR__0364
05bd8     71 FA 05 F6 | 	mov	result1, #113
05bdc     CC 02 90 FD | 	jmp	#LR__0455
05be0                 | LR__0365
05be0     71 FA 05 F6 | 	mov	result1, #113
05be4     C4 02 90 FD | 	jmp	#LR__0455
05be8                 | LR__0366
05be8     60 FA 05 F6 | 	mov	result1, #96
05bec     BC 02 90 FD | 	jmp	#LR__0455
05bf0                 | LR__0367
05bf0     4A FA 05 F6 | 	mov	result1, #74
05bf4     B4 02 90 FD | 	jmp	#LR__0455
05bf8                 | LR__0368
05bf8     4A FA 05 F6 | 	mov	result1, #74
05bfc     AC 02 90 FD | 	jmp	#LR__0455
05c00                 | LR__0369
05c00     48 FA 05 F6 | 	mov	result1, #72
05c04     A4 02 90 FD | 	jmp	#LR__0455
05c08                 | LR__0370
05c08     48 FA 05 F6 | 	mov	result1, #72
05c0c     9C 02 90 FD | 	jmp	#LR__0455
05c10                 | LR__0371
05c10     BB FA 05 F6 | 	mov	result1, #187
05c14     94 02 90 FD | 	jmp	#LR__0455
05c18                 | LR__0372
05c18     A9 FA 05 F6 | 	mov	result1, #169
05c1c     8C 02 90 FD | 	jmp	#LR__0455
05c20                 | LR__0373
05c20     4E FA 05 F6 | 	mov	result1, #78
05c24     84 02 90 FD | 	jmp	#LR__0455
05c28                 | LR__0374
05c28     4E FA 05 F6 | 	mov	result1, #78
05c2c     7C 02 90 FD | 	jmp	#LR__0455
05c30                 | LR__0375
05c30     58 FA 05 F6 | 	mov	result1, #88
05c34     74 02 90 FD | 	jmp	#LR__0455
05c38                 | LR__0376
05c38     5F FA 05 F6 | 	mov	result1, #95
05c3c     6C 02 90 FD | 	jmp	#LR__0455
05c40                 | LR__0377
05c40     5F FA 05 F6 | 	mov	result1, #95
05c44     64 02 90 FD | 	jmp	#LR__0455
05c48                 | LR__0378
05c48     B5 FA 05 F6 | 	mov	result1, #181
05c4c     5C 02 90 FD | 	jmp	#LR__0455
05c50                 | LR__0379
05c50     4C FA 05 F6 | 	mov	result1, #76
05c54     54 02 90 FD | 	jmp	#LR__0455
05c58                 | LR__0380
05c58     4C FA 05 F6 | 	mov	result1, #76
05c5c     4C 02 90 FD | 	jmp	#LR__0455
05c60                 | LR__0381
05c60     52 FA 05 F6 | 	mov	result1, #82
05c64     44 02 90 FD | 	jmp	#LR__0455
05c68                 | LR__0382
05c68     52 FA 05 F6 | 	mov	result1, #82
05c6c     3C 02 90 FD | 	jmp	#LR__0455
05c70                 | LR__0383
05c70     97 FA 05 F6 | 	mov	result1, #151
05c74     34 02 90 FD | 	jmp	#LR__0455
05c78                 | LR__0384
05c78     C6 FA 05 F6 | 	mov	result1, #198
05c7c     2C 02 90 FD | 	jmp	#LR__0455
05c80                 | LR__0385
05c80     61 FA 05 F6 | 	mov	result1, #97
05c84     24 02 90 FD | 	jmp	#LR__0455
05c88                 | LR__0386
05c88     61 FA 05 F6 | 	mov	result1, #97
05c8c     1C 02 90 FD | 	jmp	#LR__0455
05c90                 | LR__0387
05c90     63 FA 05 F6 | 	mov	result1, #99
05c94     14 02 90 FD | 	jmp	#LR__0455
05c98                 | LR__0388
05c98     41 FA 05 F6 | 	mov	result1, #65
05c9c     0C 02 90 FD | 	jmp	#LR__0455
05ca0                 | LR__0389
05ca0     4B FA 05 F6 | 	mov	result1, #75
05ca4     04 02 90 FD | 	jmp	#LR__0455
05ca8                 | LR__0390
05ca8     4B FA 05 F6 | 	mov	result1, #75
05cac     FC 01 90 FD | 	jmp	#LR__0455
05cb0                 | LR__0391
05cb0     C1 FA 05 F6 | 	mov	result1, #193
05cb4     F4 01 90 FD | 	jmp	#LR__0455
05cb8                 | LR__0392
05cb8     B3 FA 05 F6 | 	mov	result1, #179
05cbc     EC 01 90 FD | 	jmp	#LR__0455
05cc0                 | LR__0393
05cc0     5E FA 05 F6 | 	mov	result1, #94
05cc4     E4 01 90 FD | 	jmp	#LR__0455
05cc8                 | LR__0394
05cc8     5E FA 05 F6 | 	mov	result1, #94
05ccc     DC 01 90 FD | 	jmp	#LR__0455
05cd0                 | LR__0395
05cd0     7C FA 05 F6 | 	mov	result1, #124
05cd4     D4 01 90 FD | 	jmp	#LR__0455
05cd8                 | LR__0396
05cd8     7E FA 05 F6 | 	mov	result1, #126
05cdc     CC 01 90 FD | 	jmp	#LR__0455
05ce0                 | LR__0397
05ce0     7D FA 05 F6 | 	mov	result1, #125
05ce4     C4 01 90 FD | 	jmp	#LR__0455
05ce8                 | LR__0398
05ce8     7F FA 05 F6 | 	mov	result1, #127
05cec     BC 01 90 FD | 	jmp	#LR__0455
05cf0                 | LR__0399
05cf0     80 FA 05 F6 | 	mov	result1, #128
05cf4     B4 01 90 FD | 	jmp	#LR__0455
05cf8                 | LR__0400
05cf8     55 FA 05 F6 | 	mov	result1, #85
05cfc     AC 01 90 FD | 	jmp	#LR__0455
05d00                 | LR__0401
05d00     75 FA 05 F6 | 	mov	result1, #117
05d04     A4 01 90 FD | 	jmp	#LR__0455
05d08                 | LR__0402
05d08     75 FA 05 F6 | 	mov	result1, #117
05d0c     9C 01 90 FD | 	jmp	#LR__0455
05d10                 | LR__0403
05d10     BA FA 05 F6 | 	mov	result1, #186
05d14     94 01 90 FD | 	jmp	#LR__0455
05d18                 | LR__0404
05d18     42 FA 05 F6 | 	mov	result1, #66
05d1c     8C 01 90 FD | 	jmp	#LR__0455
05d20                 | LR__0405
05d20     42 FA 05 F6 | 	mov	result1, #66
05d24     84 01 90 FD | 	jmp	#LR__0455
05d28                 | LR__0406
05d28     95 FA 05 F6 | 	mov	result1, #149
05d2c     7C 01 90 FD | 	jmp	#LR__0455
05d30                 | LR__0407
05d30     AC FA 05 F6 | 	mov	result1, #172
05d34     74 01 90 FD | 	jmp	#LR__0455
05d38                 | LR__0408
05d38     81 FA 05 F6 | 	mov	result1, #129
05d3c     6C 01 90 FD | 	jmp	#LR__0455
05d40                 | LR__0409
05d40     81 FA 05 F6 | 	mov	result1, #129
05d44     64 01 90 FD | 	jmp	#LR__0455
05d48                 | LR__0410
05d48     44 FA 05 F6 | 	mov	result1, #68
05d4c     5C 01 90 FD | 	jmp	#LR__0455
05d50                 | LR__0411
05d50     44 FA 05 F6 | 	mov	result1, #68
05d54     54 01 90 FD | 	jmp	#LR__0455
05d58                 | LR__0412
05d58     BC FA 05 F6 | 	mov	result1, #188
05d5c     4C 01 90 FD | 	jmp	#LR__0455
05d60                 | LR__0413
05d60     88 FA 05 F6 | 	mov	result1, #136
05d64     44 01 90 FD | 	jmp	#LR__0455
05d68                 | LR__0414
05d68     B6 FA 05 F6 | 	mov	result1, #182
05d6c     3C 01 90 FD | 	jmp	#LR__0455
05d70                 | LR__0415
05d70     92 FA 05 F6 | 	mov	result1, #146
05d74     34 01 90 FD | 	jmp	#LR__0455
05d78                 | LR__0416
05d78     BE FA 05 F6 | 	mov	result1, #190
05d7c     2C 01 90 FD | 	jmp	#LR__0455
05d80                 | LR__0417
05d80     BE FA 05 F6 | 	mov	result1, #190
05d84     24 01 90 FD | 	jmp	#LR__0455
05d88                 | LR__0418
05d88     C7 FA 05 F6 | 	mov	result1, #199
05d8c     1C 01 90 FD | 	jmp	#LR__0455
05d90                 | LR__0419
05d90     AA FA 05 F6 | 	mov	result1, #170
05d94     14 01 90 FD | 	jmp	#LR__0455
05d98                 | LR__0420
05d98     4D FA 05 F6 | 	mov	result1, #77
05d9c     0C 01 90 FD | 	jmp	#LR__0455
05da0                 | LR__0421
05da0     51 FA 05 F6 | 	mov	result1, #81
05da4     04 01 90 FD | 	jmp	#LR__0455
05da8                 | LR__0422
05da8     51 FA 05 F6 | 	mov	result1, #81
05dac     FC 00 90 FD | 	jmp	#LR__0455
05db0                 | LR__0423
05db0     8E FA 05 F6 | 	mov	result1, #142
05db4     F4 00 90 FD | 	jmp	#LR__0455
05db8                 | LR__0424
05db8     8E FA 05 F6 | 	mov	result1, #142
05dbc     EC 00 90 FD | 	jmp	#LR__0455
05dc0                 | LR__0425
05dc0     90 FA 05 F6 | 	mov	result1, #144
05dc4     E4 00 90 FD | 	jmp	#LR__0455
05dc8                 | LR__0426
05dc8     90 FA 05 F6 | 	mov	result1, #144
05dcc     DC 00 90 FD | 	jmp	#LR__0455
05dd0                 | LR__0427
05dd0     8D FA 05 F6 | 	mov	result1, #141
05dd4     D4 00 90 FD | 	jmp	#LR__0455
05dd8                 | LR__0428
05dd8     8D FA 05 F6 | 	mov	result1, #141
05ddc     CC 00 90 FD | 	jmp	#LR__0455
05de0                 | LR__0429
05de0     8C FA 05 F6 | 	mov	result1, #140
05de4     C4 00 90 FD | 	jmp	#LR__0455
05de8                 | LR__0430
05de8     8C FA 05 F6 | 	mov	result1, #140
05dec     BC 00 90 FD | 	jmp	#LR__0455
05df0                 | LR__0431
05df0     91 FA 05 F6 | 	mov	result1, #145
05df4     B4 00 90 FD | 	jmp	#LR__0455
05df8                 | LR__0432
05df8     91 FA 05 F6 | 	mov	result1, #145
05dfc     AC 00 90 FD | 	jmp	#LR__0455
05e00                 | LR__0433
05e00     8B FA 05 F6 | 	mov	result1, #139
05e04     A4 00 90 FD | 	jmp	#LR__0455
05e08                 | LR__0434
05e08     8B FA 05 F6 | 	mov	result1, #139
05e0c     9C 00 90 FD | 	jmp	#LR__0455
05e10                 | LR__0435
05e10     8F FA 05 F6 | 	mov	result1, #143
05e14     94 00 90 FD | 	jmp	#LR__0455
05e18                 | LR__0436
05e18     8F FA 05 F6 | 	mov	result1, #143
05e1c     8C 00 90 FD | 	jmp	#LR__0455
05e20                 | LR__0437
05e20     8F FA 05 F6 | 	mov	result1, #143
05e24     84 00 90 FD | 	jmp	#LR__0455
05e28                 | LR__0438
05e28     B2 FA 05 F6 | 	mov	result1, #178
05e2c     7C 00 90 FD | 	jmp	#LR__0455
05e30                 | LR__0439
05e30     B2 FA 05 F6 | 	mov	result1, #178
05e34     74 00 90 FD | 	jmp	#LR__0455
05e38                 | LR__0440
05e38     75 FA 05 F6 | 	mov	result1, #117
05e3c     6C 00 90 FD | 	jmp	#LR__0455
05e40                 | LR__0441
05e40     75 FA 05 F6 | 	mov	result1, #117
05e44     64 00 90 FD | 	jmp	#LR__0455
05e48                 | LR__0442
05e48     6D FA 05 F6 | 	mov	result1, #109
05e4c     5C 00 90 FD | 	jmp	#LR__0455
05e50                 | LR__0443
05e50     6D FA 05 F6 | 	mov	result1, #109
05e54     54 00 90 FD | 	jmp	#LR__0455
05e58                 | LR__0444
05e58     5B FA 05 F6 | 	mov	result1, #91
05e5c     4C 00 90 FD | 	jmp	#LR__0455
05e60                 | LR__0445
05e60     56 FA 05 F6 | 	mov	result1, #86
05e64     44 00 90 FD | 	jmp	#LR__0455
05e68                 | LR__0446
05e68     56 FA 05 F6 | 	mov	result1, #86
05e6c     3C 00 90 FD | 	jmp	#LR__0455
05e70                 | LR__0447
05e70     70 FA 05 F6 | 	mov	result1, #112
05e74     34 00 90 FD | 	jmp	#LR__0455
05e78                 | LR__0448
05e78     70 FA 05 F6 | 	mov	result1, #112
05e7c     2C 00 90 FD | 	jmp	#LR__0455
05e80                 | LR__0449
05e80     57 FA 05 F6 | 	mov	result1, #87
05e84     24 00 90 FD | 	jmp	#LR__0455
05e88                 | LR__0450
05e88     57 FA 05 F6 | 	mov	result1, #87
05e8c     1C 00 90 FD | 	jmp	#LR__0455
05e90                 | LR__0451
05e90     79 FA 05 F6 | 	mov	result1, #121
05e94     14 00 90 FD | 	jmp	#LR__0455
05e98                 | LR__0452
05e98     77 FA 05 F6 | 	mov	result1, #119
05e9c     0C 00 90 FD | 	jmp	#LR__0455
05ea0                 | LR__0453
05ea0     78 FA 05 F6 | 	mov	result1, #120
05ea4     04 00 90 FD | 	jmp	#LR__0455
05ea8                 | LR__0454
05ea8     00 FA 05 F6 | 	mov	result1, #0
05eac                 | LR__0455
05eac     A7 F0 03 F6 | 	mov	ptra, fp
05eb0     B2 00 A0 FD | 	call	#popregs_
05eb4                 | _iscommand_ret
05eb4     2D 00 64 FD | 	ret
05eb8                 | 
05eb8                 | ' 
05eb8                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05eb8                 | ' 
05eb8                 | ' function isfunction(s as string) as ubyte
05eb8                 | _isfunction
05eb8     01 4A 05 F6 | 	mov	COUNT_, #1
05ebc     A8 00 A0 FD | 	call	#pushregs_
05ec0                 | ' 
05ec0                 | ' select case s
05ec0     09 27 02 F6 | 	mov	local01, arg01
05ec4     B3 01 00 FF 
05ec8     52 15 06 F6 | 	mov	arg02, ##@LR__5682
05ecc     13 13 02 F6 | 	mov	arg01, local01
05ed0     88 08 B2 FD | 	call	#__system___string_cmp
05ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ed8     E4 04 90 AD |  if_e	jmp	#LR__0460
05edc     B3 01 00 FF 
05ee0     56 15 06 F6 | 	mov	arg02, ##@LR__5683
05ee4     13 13 02 F6 | 	mov	arg01, local01
05ee8     70 08 B2 FD | 	call	#__system___string_cmp
05eec     00 FA 0D F2 | 	cmp	result1, #0 wz
05ef0     D4 04 90 AD |  if_e	jmp	#LR__0461
05ef4     B3 01 00 FF 
05ef8     5B 15 06 F6 | 	mov	arg02, ##@LR__5684
05efc     13 13 02 F6 | 	mov	arg01, local01
05f00     58 08 B2 FD | 	call	#__system___string_cmp
05f04     00 FA 0D F2 | 	cmp	result1, #0 wz
05f08     C4 04 90 AD |  if_e	jmp	#LR__0462
05f0c     B3 01 00 FF 
05f10     5F 15 06 F6 | 	mov	arg02, ##@LR__5685
05f14     13 13 02 F6 | 	mov	arg01, local01
05f18     40 08 B2 FD | 	call	#__system___string_cmp
05f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f20     B4 04 90 AD |  if_e	jmp	#LR__0463
05f24     B3 01 00 FF 
05f28     64 15 06 F6 | 	mov	arg02, ##@LR__5686
05f2c     13 13 02 F6 | 	mov	arg01, local01
05f30     28 08 B2 FD | 	call	#__system___string_cmp
05f34     00 FA 0D F2 | 	cmp	result1, #0 wz
05f38     A4 04 90 AD |  if_e	jmp	#LR__0464
05f3c     B3 01 00 FF 
05f40     68 15 06 F6 | 	mov	arg02, ##@LR__5687
05f44     13 13 02 F6 | 	mov	arg01, local01
05f48     10 08 B2 FD | 	call	#__system___string_cmp
05f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f50     94 04 90 AD |  if_e	jmp	#LR__0465
05f54     B3 01 00 FF 
05f58     6D 15 06 F6 | 	mov	arg02, ##@LR__5688
05f5c     13 13 02 F6 | 	mov	arg01, local01
05f60     F8 07 B2 FD | 	call	#__system___string_cmp
05f64     00 FA 0D F2 | 	cmp	result1, #0 wz
05f68     84 04 90 AD |  if_e	jmp	#LR__0466
05f6c     B3 01 00 FF 
05f70     71 15 06 F6 | 	mov	arg02, ##@LR__5689
05f74     13 13 02 F6 | 	mov	arg01, local01
05f78     E0 07 B2 FD | 	call	#__system___string_cmp
05f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f80     74 04 90 AD |  if_e	jmp	#LR__0467
05f84     B3 01 00 FF 
05f88     76 15 06 F6 | 	mov	arg02, ##@LR__5690
05f8c     13 13 02 F6 | 	mov	arg01, local01
05f90     C8 07 B2 FD | 	call	#__system___string_cmp
05f94     00 FA 0D F2 | 	cmp	result1, #0 wz
05f98     64 04 90 AD |  if_e	jmp	#LR__0468
05f9c     B3 01 00 FF 
05fa0     7B 15 06 F6 | 	mov	arg02, ##@LR__5691
05fa4     13 13 02 F6 | 	mov	arg01, local01
05fa8     B0 07 B2 FD | 	call	#__system___string_cmp
05fac     00 FA 0D F2 | 	cmp	result1, #0 wz
05fb0     54 04 90 AD |  if_e	jmp	#LR__0469
05fb4     B3 01 00 FF 
05fb8     7F 15 06 F6 | 	mov	arg02, ##@LR__5692
05fbc     13 13 02 F6 | 	mov	arg01, local01
05fc0     98 07 B2 FD | 	call	#__system___string_cmp
05fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fc8     44 04 90 AD |  if_e	jmp	#LR__0470
05fcc     B3 01 00 FF 
05fd0     85 15 06 F6 | 	mov	arg02, ##@LR__5693
05fd4     13 13 02 F6 | 	mov	arg01, local01
05fd8     80 07 B2 FD | 	call	#__system___string_cmp
05fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
05fe0     34 04 90 AD |  if_e	jmp	#LR__0471
05fe4     B3 01 00 FF 
05fe8     8E 15 06 F6 | 	mov	arg02, ##@LR__5694
05fec     13 13 02 F6 | 	mov	arg01, local01
05ff0     68 07 B2 FD | 	call	#__system___string_cmp
05ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ff8     24 04 90 AD |  if_e	jmp	#LR__0472
05ffc     B3 01 00 FF 
06000     92 15 06 F6 | 	mov	arg02, ##@LR__5695
06004     13 13 02 F6 | 	mov	arg01, local01
06008     50 07 B2 FD | 	call	#__system___string_cmp
0600c     00 FA 0D F2 | 	cmp	result1, #0 wz
06010     14 04 90 AD |  if_e	jmp	#LR__0473
06014     B3 01 00 FF 
06018     96 15 06 F6 | 	mov	arg02, ##@LR__5696
0601c     13 13 02 F6 | 	mov	arg01, local01
06020     38 07 B2 FD | 	call	#__system___string_cmp
06024     00 FA 0D F2 | 	cmp	result1, #0 wz
06028     04 04 90 AD |  if_e	jmp	#LR__0474
0602c     B3 01 00 FF 
06030     9F 15 06 F6 | 	mov	arg02, ##@LR__5697
06034     13 13 02 F6 | 	mov	arg01, local01
06038     20 07 B2 FD | 	call	#__system___string_cmp
0603c     00 FA 0D F2 | 	cmp	result1, #0 wz
06040     F4 03 90 AD |  if_e	jmp	#LR__0475
06044     B3 01 00 FF 
06048     A3 15 06 F6 | 	mov	arg02, ##@LR__5698
0604c     13 13 02 F6 | 	mov	arg01, local01
06050     08 07 B2 FD | 	call	#__system___string_cmp
06054     00 FA 0D F2 | 	cmp	result1, #0 wz
06058     E4 03 90 AD |  if_e	jmp	#LR__0476
0605c     B3 01 00 FF 
06060     B1 15 06 F6 | 	mov	arg02, ##@LR__5699
06064     13 13 02 F6 | 	mov	arg01, local01
06068     F0 06 B2 FD | 	call	#__system___string_cmp
0606c     00 FA 0D F2 | 	cmp	result1, #0 wz
06070     D4 03 90 AD |  if_e	jmp	#LR__0477
06074     B3 01 00 FF 
06078     BE 15 06 F6 | 	mov	arg02, ##@LR__5700
0607c     13 13 02 F6 | 	mov	arg01, local01
06080     D8 06 B2 FD | 	call	#__system___string_cmp
06084     00 FA 0D F2 | 	cmp	result1, #0 wz
06088     C4 03 90 AD |  if_e	jmp	#LR__0478
0608c     B3 01 00 FF 
06090     C6 15 06 F6 | 	mov	arg02, ##@LR__5701
06094     13 13 02 F6 | 	mov	arg01, local01
06098     C0 06 B2 FD | 	call	#__system___string_cmp
0609c     00 FA 0D F2 | 	cmp	result1, #0 wz
060a0     B4 03 90 AD |  if_e	jmp	#LR__0479
060a4     B3 01 00 FF 
060a8     CB 15 06 F6 | 	mov	arg02, ##@LR__5702
060ac     13 13 02 F6 | 	mov	arg01, local01
060b0     A8 06 B2 FD | 	call	#__system___string_cmp
060b4     00 FA 0D F2 | 	cmp	result1, #0 wz
060b8     A4 03 90 AD |  if_e	jmp	#LR__0480
060bc     B3 01 00 FF 
060c0     D2 15 06 F6 | 	mov	arg02, ##@LR__5703
060c4     13 13 02 F6 | 	mov	arg01, local01
060c8     90 06 B2 FD | 	call	#__system___string_cmp
060cc     00 FA 0D F2 | 	cmp	result1, #0 wz
060d0     94 03 90 AD |  if_e	jmp	#LR__0481
060d4     B3 01 00 FF 
060d8     D6 15 06 F6 | 	mov	arg02, ##@LR__5704
060dc     13 13 02 F6 | 	mov	arg01, local01
060e0     78 06 B2 FD | 	call	#__system___string_cmp
060e4     00 FA 0D F2 | 	cmp	result1, #0 wz
060e8     84 03 90 AD |  if_e	jmp	#LR__0482
060ec     B3 01 00 FF 
060f0     DC 15 06 F6 | 	mov	arg02, ##@LR__5705
060f4     13 13 02 F6 | 	mov	arg01, local01
060f8     60 06 B2 FD | 	call	#__system___string_cmp
060fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06100     74 03 90 AD |  if_e	jmp	#LR__0483
06104     B3 01 00 FF 
06108     E0 15 06 F6 | 	mov	arg02, ##@LR__5706
0610c     13 13 02 F6 | 	mov	arg01, local01
06110     48 06 B2 FD | 	call	#__system___string_cmp
06114     00 FA 0D F2 | 	cmp	result1, #0 wz
06118     64 03 90 AD |  if_e	jmp	#LR__0484
0611c     B3 01 00 FF 
06120     E4 15 06 F6 | 	mov	arg02, ##@LR__5707
06124     13 13 02 F6 | 	mov	arg01, local01
06128     30 06 B2 FD | 	call	#__system___string_cmp
0612c     00 FA 0D F2 | 	cmp	result1, #0 wz
06130     54 03 90 AD |  if_e	jmp	#LR__0485
06134     B3 01 00 FF 
06138     EA 15 06 F6 | 	mov	arg02, ##@LR__5708
0613c     13 13 02 F6 | 	mov	arg01, local01
06140     18 06 B2 FD | 	call	#__system___string_cmp
06144     00 FA 0D F2 | 	cmp	result1, #0 wz
06148     44 03 90 AD |  if_e	jmp	#LR__0486
0614c     B3 01 00 FF 
06150     EF 15 06 F6 | 	mov	arg02, ##@LR__5709
06154     13 13 02 F6 | 	mov	arg01, local01
06158     00 06 B2 FD | 	call	#__system___string_cmp
0615c     00 FA 0D F2 | 	cmp	result1, #0 wz
06160     34 03 90 AD |  if_e	jmp	#LR__0487
06164     B3 01 00 FF 
06168     F6 15 06 F6 | 	mov	arg02, ##@LR__5710
0616c     13 13 02 F6 | 	mov	arg01, local01
06170     E8 05 B2 FD | 	call	#__system___string_cmp
06174     00 FA 0D F2 | 	cmp	result1, #0 wz
06178     24 03 90 AD |  if_e	jmp	#LR__0488
0617c     B3 01 00 FF 
06180     FD 15 06 F6 | 	mov	arg02, ##@LR__5711
06184     13 13 02 F6 | 	mov	arg01, local01
06188     D0 05 B2 FD | 	call	#__system___string_cmp
0618c     00 FA 0D F2 | 	cmp	result1, #0 wz
06190     14 03 90 AD |  if_e	jmp	#LR__0489
06194     B4 01 00 FF 
06198     04 14 06 F6 | 	mov	arg02, ##@LR__5712
0619c     13 13 02 F6 | 	mov	arg01, local01
061a0     B8 05 B2 FD | 	call	#__system___string_cmp
061a4     00 FA 0D F2 | 	cmp	result1, #0 wz
061a8     04 03 90 AD |  if_e	jmp	#LR__0490
061ac     B4 01 00 FF 
061b0     0B 14 06 F6 | 	mov	arg02, ##@LR__5713
061b4     13 13 02 F6 | 	mov	arg01, local01
061b8     A0 05 B2 FD | 	call	#__system___string_cmp
061bc     00 FA 0D F2 | 	cmp	result1, #0 wz
061c0     F4 02 90 AD |  if_e	jmp	#LR__0491
061c4     B4 01 00 FF 
061c8     10 14 06 F6 | 	mov	arg02, ##@LR__5714
061cc     13 13 02 F6 | 	mov	arg01, local01
061d0     88 05 B2 FD | 	call	#__system___string_cmp
061d4     00 FA 0D F2 | 	cmp	result1, #0 wz
061d8     E4 02 90 AD |  if_e	jmp	#LR__0492
061dc     B4 01 00 FF 
061e0     15 14 06 F6 | 	mov	arg02, ##@LR__5715
061e4     13 13 02 F6 | 	mov	arg01, local01
061e8     70 05 B2 FD | 	call	#__system___string_cmp
061ec     00 FA 0D F2 | 	cmp	result1, #0 wz
061f0     D4 02 90 AD |  if_e	jmp	#LR__0493
061f4     B4 01 00 FF 
061f8     1A 14 06 F6 | 	mov	arg02, ##@LR__5716
061fc     13 13 02 F6 | 	mov	arg01, local01
06200     58 05 B2 FD | 	call	#__system___string_cmp
06204     00 FA 0D F2 | 	cmp	result1, #0 wz
06208     C4 02 90 AD |  if_e	jmp	#LR__0494
0620c     B4 01 00 FF 
06210     20 14 06 F6 | 	mov	arg02, ##@LR__5717
06214     13 13 02 F6 | 	mov	arg01, local01
06218     40 05 B2 FD | 	call	#__system___string_cmp
0621c     00 FA 0D F2 | 	cmp	result1, #0 wz
06220     B4 02 90 AD |  if_e	jmp	#LR__0495
06224     B4 01 00 FF 
06228     26 14 06 F6 | 	mov	arg02, ##@LR__5718
0622c     13 13 02 F6 | 	mov	arg01, local01
06230     28 05 B2 FD | 	call	#__system___string_cmp
06234     00 FA 0D F2 | 	cmp	result1, #0 wz
06238     A4 02 90 AD |  if_e	jmp	#LR__0496
0623c     B4 01 00 FF 
06240     2C 14 06 F6 | 	mov	arg02, ##@LR__5719
06244     13 13 02 F6 | 	mov	arg01, local01
06248     10 05 B2 FD | 	call	#__system___string_cmp
0624c     00 FA 0D F2 | 	cmp	result1, #0 wz
06250     94 02 90 AD |  if_e	jmp	#LR__0497
06254     B4 01 00 FF 
06258     31 14 06 F6 | 	mov	arg02, ##@LR__5720
0625c     13 13 02 F6 | 	mov	arg01, local01
06260     F8 04 B2 FD | 	call	#__system___string_cmp
06264     00 FA 0D F2 | 	cmp	result1, #0 wz
06268     84 02 90 AD |  if_e	jmp	#LR__0498
0626c     B4 01 00 FF 
06270     36 14 06 F6 | 	mov	arg02, ##@LR__5721
06274     13 13 02 F6 | 	mov	arg01, local01
06278     E0 04 B2 FD | 	call	#__system___string_cmp
0627c     00 FA 0D F2 | 	cmp	result1, #0 wz
06280     74 02 90 AD |  if_e	jmp	#LR__0499
06284     B4 01 00 FF 
06288     3E 14 06 F6 | 	mov	arg02, ##@LR__5722
0628c     13 13 02 F6 | 	mov	arg01, local01
06290     C8 04 B2 FD | 	call	#__system___string_cmp
06294     00 FA 0D F2 | 	cmp	result1, #0 wz
06298     64 02 90 AD |  if_e	jmp	#LR__0500
0629c     B4 01 00 FF 
062a0     44 14 06 F6 | 	mov	arg02, ##@LR__5723
062a4     13 13 02 F6 | 	mov	arg01, local01
062a8     B0 04 B2 FD | 	call	#__system___string_cmp
062ac     00 FA 0D F2 | 	cmp	result1, #0 wz
062b0     54 02 90 AD |  if_e	jmp	#LR__0501
062b4     B4 01 00 FF 
062b8     4B 14 06 F6 | 	mov	arg02, ##@LR__5724
062bc     13 13 02 F6 | 	mov	arg01, local01
062c0     98 04 B2 FD | 	call	#__system___string_cmp
062c4     00 FA 0D F2 | 	cmp	result1, #0 wz
062c8     44 02 90 AD |  if_e	jmp	#LR__0502
062cc     B4 01 00 FF 
062d0     51 14 06 F6 | 	mov	arg02, ##@LR__5725
062d4     13 13 02 F6 | 	mov	arg01, local01
062d8     80 04 B2 FD | 	call	#__system___string_cmp
062dc     00 FA 0D F2 | 	cmp	result1, #0 wz
062e0     34 02 90 AD |  if_e	jmp	#LR__0503
062e4     B4 01 00 FF 
062e8     57 14 06 F6 | 	mov	arg02, ##@LR__5726
062ec     13 13 02 F6 | 	mov	arg01, local01
062f0     68 04 B2 FD | 	call	#__system___string_cmp
062f4     00 FA 0D F2 | 	cmp	result1, #0 wz
062f8     24 02 90 AD |  if_e	jmp	#LR__0504
062fc     B4 01 00 FF 
06300     5B 14 06 F6 | 	mov	arg02, ##@LR__5727
06304     13 13 02 F6 | 	mov	arg01, local01
06308     50 04 B2 FD | 	call	#__system___string_cmp
0630c     00 FA 0D F2 | 	cmp	result1, #0 wz
06310     14 02 90 AD |  if_e	jmp	#LR__0505
06314     B4 01 00 FF 
06318     5F 14 06 F6 | 	mov	arg02, ##@LR__5728
0631c     13 13 02 F6 | 	mov	arg01, local01
06320     38 04 B2 FD | 	call	#__system___string_cmp
06324     00 FA 0D F2 | 	cmp	result1, #0 wz
06328     04 02 90 AD |  if_e	jmp	#LR__0506
0632c     B4 01 00 FF 
06330     63 14 06 F6 | 	mov	arg02, ##@LR__5729
06334     13 13 02 F6 | 	mov	arg01, local01
06338     20 04 B2 FD | 	call	#__system___string_cmp
0633c     00 FA 0D F2 | 	cmp	result1, #0 wz
06340     F4 01 90 AD |  if_e	jmp	#LR__0507
06344     B4 01 00 FF 
06348     69 14 06 F6 | 	mov	arg02, ##@LR__5730
0634c     13 13 02 F6 | 	mov	arg01, local01
06350     08 04 B2 FD | 	call	#__system___string_cmp
06354     00 FA 0D F2 | 	cmp	result1, #0 wz
06358     E4 01 90 AD |  if_e	jmp	#LR__0508
0635c     B4 01 00 FF 
06360     6F 14 06 F6 | 	mov	arg02, ##@LR__5731
06364     13 13 02 F6 | 	mov	arg01, local01
06368     F0 03 B2 FD | 	call	#__system___string_cmp
0636c     00 FA 0D F2 | 	cmp	result1, #0 wz
06370     D4 01 90 AD |  if_e	jmp	#LR__0509
06374     B4 01 00 FF 
06378     74 14 06 F6 | 	mov	arg02, ##@LR__5732
0637c     13 13 02 F6 | 	mov	arg01, local01
06380     D8 03 B2 FD | 	call	#__system___string_cmp
06384     00 FA 0D F2 | 	cmp	result1, #0 wz
06388     C4 01 90 AD |  if_e	jmp	#LR__0510
0638c     B4 01 00 FF 
06390     78 14 06 F6 | 	mov	arg02, ##@LR__5733
06394     13 13 02 F6 | 	mov	arg01, local01
06398     C0 03 B2 FD | 	call	#__system___string_cmp
0639c     00 FA 0D F2 | 	cmp	result1, #0 wz
063a0     B4 01 90 AD |  if_e	jmp	#LR__0511
063a4     B4 01 00 FF 
063a8     7C 14 06 F6 | 	mov	arg02, ##@LR__5734
063ac     13 13 02 F6 | 	mov	arg01, local01
063b0     A8 03 B2 FD | 	call	#__system___string_cmp
063b4     00 FA 0D F2 | 	cmp	result1, #0 wz
063b8     A4 01 90 AD |  if_e	jmp	#LR__0512
063bc     A8 01 90 FD | 	jmp	#LR__0513
063c0                 | LR__0460
063c0     9E FA 05 F6 | 	mov	result1, #158
063c4     A4 01 90 FD | 	jmp	#LR__0514
063c8                 | LR__0461
063c8     85 FA 05 F6 | 	mov	result1, #133
063cc     9C 01 90 FD | 	jmp	#LR__0514
063d0                 | LR__0462
063d0     9B FA 05 F6 | 	mov	result1, #155
063d4     94 01 90 FD | 	jmp	#LR__0514
063d8                 | LR__0463
063d8     9B FA 05 F6 | 	mov	result1, #155
063dc     8C 01 90 FD | 	jmp	#LR__0514
063e0                 | LR__0464
063e0     A7 FA 05 F6 | 	mov	result1, #167
063e4     84 01 90 FD | 	jmp	#LR__0514
063e8                 | LR__0465
063e8     84 FA 05 F6 | 	mov	result1, #132
063ec     7C 01 90 FD | 	jmp	#LR__0514
063f0                 | LR__0466
063f0     86 FA 05 F6 | 	mov	result1, #134
063f4     74 01 90 FD | 	jmp	#LR__0514
063f8                 | LR__0467
063f8     A2 FA 05 F6 | 	mov	result1, #162
063fc     6C 01 90 FD | 	jmp	#LR__0514
06400                 | LR__0468
06400     9F FA 05 F6 | 	mov	result1, #159
06404     64 01 90 FD | 	jmp	#LR__0514
06408                 | LR__0469
06408     82 FA 05 F6 | 	mov	result1, #130
0640c     5C 01 90 FD | 	jmp	#LR__0514
06410                 | LR__0470
06410     99 FA 05 F6 | 	mov	result1, #153
06414     54 01 90 FD | 	jmp	#LR__0514
06418                 | LR__0471
06418     C5 FA 05 F6 | 	mov	result1, #197
0641c     4C 01 90 FD | 	jmp	#LR__0514
06420                 | LR__0472
06420     C5 FA 05 F6 | 	mov	result1, #197
06424     44 01 90 FD | 	jmp	#LR__0514
06428                 | LR__0473
06428     9C FA 05 F6 | 	mov	result1, #156
0642c     3C 01 90 FD | 	jmp	#LR__0514
06430                 | LR__0474
06430     6F FA 05 F6 | 	mov	result1, #111
06434     34 01 90 FD | 	jmp	#LR__0514
06438                 | LR__0475
06438     6F FA 05 F6 | 	mov	result1, #111
0643c     2C 01 90 FD | 	jmp	#LR__0514
06440                 | LR__0476
06440     93 FA 05 F6 | 	mov	result1, #147
06444     24 01 90 FD | 	jmp	#LR__0514
06448                 | LR__0477
06448     94 FA 05 F6 | 	mov	result1, #148
0644c     1C 01 90 FD | 	jmp	#LR__0514
06450                 | LR__0478
06450     62 FA 05 F6 | 	mov	result1, #98
06454     14 01 90 FD | 	jmp	#LR__0514
06458                 | LR__0479
06458     A3 FA 05 F6 | 	mov	result1, #163
0645c     0C 01 90 FD | 	jmp	#LR__0514
06460                 | LR__0480
06460     9D FA 05 F6 | 	mov	result1, #157
06464     04 01 90 FD | 	jmp	#LR__0514
06468                 | LR__0481
06468     8A FA 05 F6 | 	mov	result1, #138
0646c     FC 00 90 FD | 	jmp	#LR__0514
06470                 | LR__0482
06470     A4 FA 05 F6 | 	mov	result1, #164
06474     F4 00 90 FD | 	jmp	#LR__0514
06478                 | LR__0483
06478     A8 FA 05 F6 | 	mov	result1, #168
0647c     EC 00 90 FD | 	jmp	#LR__0514
06480                 | LR__0484
06480     AD FA 05 F6 | 	mov	result1, #173
06484     E4 00 90 FD | 	jmp	#LR__0514
06488                 | LR__0485
06488     9A FA 05 F6 | 	mov	result1, #154
0648c     DC 00 90 FD | 	jmp	#LR__0514
06490                 | LR__0486
06490     A6 FA 05 F6 | 	mov	result1, #166
06494     D4 00 90 FD | 	jmp	#LR__0514
06498                 | LR__0487
06498     66 FA 05 F6 | 	mov	result1, #102
0649c     CC 00 90 FD | 	jmp	#LR__0514
064a0                 | LR__0488
064a0     67 FA 05 F6 | 	mov	result1, #103
064a4     C4 00 90 FD | 	jmp	#LR__0514
064a8                 | LR__0489
064a8     64 FA 05 F6 | 	mov	result1, #100
064ac     BC 00 90 FD | 	jmp	#LR__0514
064b0                 | LR__0490
064b0     65 FA 05 F6 | 	mov	result1, #101
064b4     B4 00 90 FD | 	jmp	#LR__0514
064b8                 | LR__0491
064b8     C8 FA 05 F6 | 	mov	result1, #200
064bc     AC 00 90 FD | 	jmp	#LR__0514
064c0                 | LR__0492
064c0     C9 FA 05 F6 | 	mov	result1, #201
064c4     A4 00 90 FD | 	jmp	#LR__0514
064c8                 | LR__0493
064c8     CA FA 05 F6 | 	mov	result1, #202
064cc     9C 00 90 FD | 	jmp	#LR__0514
064d0                 | LR__0494
064d0     CC FA 05 F6 | 	mov	result1, #204
064d4     94 00 90 FD | 	jmp	#LR__0514
064d8                 | LR__0495
064d8     CD FA 05 F6 | 	mov	result1, #205
064dc     8C 00 90 FD | 	jmp	#LR__0514
064e0                 | LR__0496
064e0     CE FA 05 F6 | 	mov	result1, #206
064e4     84 00 90 FD | 	jmp	#LR__0514
064e8                 | LR__0497
064e8     CB FA 05 F6 | 	mov	result1, #203
064ec     7C 00 90 FD | 	jmp	#LR__0514
064f0                 | LR__0498
064f0     98 FA 05 F6 | 	mov	result1, #152
064f4     74 00 90 FD | 	jmp	#LR__0514
064f8                 | LR__0499
064f8     7B FA 05 F6 | 	mov	result1, #123
064fc     6C 00 90 FD | 	jmp	#LR__0514
06500                 | LR__0500
06500     76 FA 05 F6 | 	mov	result1, #118
06504     64 00 90 FD | 	jmp	#LR__0514
06508                 | LR__0501
06508     A5 FA 05 F6 | 	mov	result1, #165
0650c     5C 00 90 FD | 	jmp	#LR__0514
06510                 | LR__0502
06510     7A FA 05 F6 | 	mov	result1, #122
06514     54 00 90 FD | 	jmp	#LR__0514
06518                 | LR__0503
06518     BF FA 05 F6 | 	mov	result1, #191
0651c     4C 00 90 FD | 	jmp	#LR__0514
06520                 | LR__0504
06520     54 FA 05 F6 | 	mov	result1, #84
06524     44 00 90 FD | 	jmp	#LR__0514
06528                 | LR__0505
06528     6B FA 05 F6 | 	mov	result1, #107
0652c     3C 00 90 FD | 	jmp	#LR__0514
06530                 | LR__0506
06530     87 FA 05 F6 | 	mov	result1, #135
06534     34 00 90 FD | 	jmp	#LR__0514
06538                 | LR__0507
06538     6A FA 05 F6 | 	mov	result1, #106
0653c     2C 00 90 FD | 	jmp	#LR__0514
06540                 | LR__0508
06540     6E FA 05 F6 | 	mov	result1, #110
06544     24 00 90 FD | 	jmp	#LR__0514
06548                 | LR__0509
06548     A1 FA 05 F6 | 	mov	result1, #161
0654c     1C 00 90 FD | 	jmp	#LR__0514
06550                 | LR__0510
06550     83 FA 05 F6 | 	mov	result1, #131
06554     14 00 90 FD | 	jmp	#LR__0514
06558                 | LR__0511
06558     A0 FA 05 F6 | 	mov	result1, #160
0655c     0C 00 90 FD | 	jmp	#LR__0514
06560                 | LR__0512
06560     9B FA 05 F6 | 	mov	result1, #155
06564     04 00 90 FD | 	jmp	#LR__0514
06568                 | LR__0513
06568     00 FA 05 F6 | 	mov	result1, #0
0656c                 | LR__0514
0656c     A7 F0 03 F6 | 	mov	ptra, fp
06570     B2 00 A0 FD | 	call	#popregs_
06574                 | _isfunction_ret
06574     2D 00 64 FD | 	ret
06578                 | 
06578                 | ' 
06578                 | ' ' Check if the part is a name
06578                 | ' 
06578                 | ' function isname(s as string) as boolean
06578                 | _isname
06578     0D 4A 05 F6 | 	mov	COUNT_, #13
0657c     A8 00 A0 FD | 	call	#pushregs_
06580     09 27 02 F6 | 	mov	local01, arg01
06584     09 29 02 F6 | 	mov	local02, arg01
06588     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
0658c                 | LR__0520
0658c     14 FB C9 FA | 	rdbyte	result1, local02 wz
06590     01 28 06 51 |  if_ne	add	local02, #1
06594     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
06598                 | LR__0521
06598     09 29 82 F1 | 	sub	local02, arg01
0659c     14 FB 01 F6 | 	mov	result1, local02
065a0     FD 2A 0A F6 | 	mov	local03, result1 wz
065a4     00 FA 05 A6 |  if_e	mov	result1, #0
065a8     34 02 90 AD |  if_e	jmp	#LR__0533
065ac     13 13 02 F6 | 	mov	arg01, local01
065b0     01 14 06 F6 | 	mov	arg02, #1
065b4     01 16 06 F6 | 	mov	arg03, #1
065b8     0C 23 B2 FD | 	call	#__system__Mid_S
065bc     FD 2C 02 F6 | 	mov	local04, result1
065c0                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
065c0     B4 01 00 FF 
065c4     83 14 06 F6 | 	mov	arg02, ##@LR__5735
065c8     16 13 02 F6 | 	mov	arg01, local04
065cc     8C 01 B2 FD | 	call	#__system___string_cmp
065d0     00 FA 55 F2 | 	cmps	result1, #0 wc
065d4     18 00 90 CD |  if_b	jmp	#LR__0522
065d8     B4 01 00 FF 
065dc     85 14 06 F6 | 	mov	arg02, ##@LR__5736
065e0     16 13 02 F6 | 	mov	arg01, local04
065e4     74 01 B2 FD | 	call	#__system___string_cmp
065e8     01 FA 55 F2 | 	cmps	result1, #1 wc
065ec     1C 00 90 CD |  if_b	jmp	#LR__0523
065f0                 | LR__0522
065f0     B4 01 00 FF 
065f4     87 14 06 F6 | 	mov	arg02, ##@LR__5737
065f8     16 13 02 F6 | 	mov	arg01, local04
065fc     5C 01 B2 FD | 	call	#__system___string_cmp
06600     00 FA 0D F2 | 	cmp	result1, #0 wz
06604     00 FA 05 56 |  if_ne	mov	result1, #0
06608     D4 01 90 5D |  if_ne	jmp	#LR__0533
0660c                 | LR__0523
0660c                 | ' if l>2 then 
0660c     03 2A 56 F2 | 	cmps	local03, #3 wc
06610     C8 01 90 CD |  if_b	jmp	#LR__0532
06614                 | '   for i=2 to l
06614     02 2E 06 F6 | 	mov	local05, #2
06618     15 31 02 F6 | 	mov	local06, local03
0661c     01 30 06 F1 | 	add	local06, #1
06620                 | LR__0524
06620     18 2F 52 F2 | 	cmps	local05, local06 wc
06624     B4 01 90 3D |  if_ae	jmp	#LR__0531
06628     13 13 02 F6 | 	mov	arg01, local01
0662c     17 15 02 F6 | 	mov	arg02, local05
06630     01 16 06 F6 | 	mov	arg03, #1
06634     90 22 B2 FD | 	call	#__system__Mid_S
06638     FD 2C 02 F6 | 	mov	local04, result1
0663c                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
0663c     15 2F 52 F2 | 	cmps	local05, local03 wc
06640     9C 00 90 3D |  if_ae	jmp	#LR__0527
06644     B4 01 00 FF 
06648     89 14 06 F6 | 	mov	arg02, ##@LR__5738
0664c     16 13 02 F6 | 	mov	arg01, local04
06650     08 01 B2 FD | 	call	#__system___string_cmp
06654     00 FA 55 F2 | 	cmps	result1, #0 wc
06658     18 00 90 CD |  if_b	jmp	#LR__0525
0665c     B4 01 00 FF 
06660     8B 14 06 F6 | 	mov	arg02, ##@LR__5739
06664     16 13 02 F6 | 	mov	arg01, local04
06668     F0 00 B2 FD | 	call	#__system___string_cmp
0666c     01 FA 55 F2 | 	cmps	result1, #1 wc
06670     6C 00 90 CD |  if_b	jmp	#LR__0527
06674                 | LR__0525
06674     B4 01 00 FF 
06678     8D 14 06 F6 | 	mov	arg02, ##@LR__5740
0667c     16 13 02 F6 | 	mov	arg01, local04
06680     D8 00 B2 FD | 	call	#__system___string_cmp
06684     00 FA 55 F2 | 	cmps	result1, #0 wc
06688     18 00 90 CD |  if_b	jmp	#LR__0526
0668c     B4 01 00 FF 
06690     8F 14 06 F6 | 	mov	arg02, ##@LR__5741
06694     16 13 02 F6 | 	mov	arg01, local04
06698     C0 00 B2 FD | 	call	#__system___string_cmp
0669c     01 FA 55 F2 | 	cmps	result1, #1 wc
066a0     3C 00 90 CD |  if_b	jmp	#LR__0527
066a4                 | LR__0526
066a4     B4 01 00 FF 
066a8     91 32 06 F6 | 	mov	local07, ##@LR__5742
066ac     16 13 02 F6 | 	mov	arg01, local04
066b0     19 15 02 F6 | 	mov	arg02, local07
066b4     A4 00 B2 FD | 	call	#__system___string_cmp
066b8     00 FA 0D F2 | 	cmp	result1, #0 wz
066bc     20 00 90 AD |  if_e	jmp	#LR__0527
066c0     B4 01 00 FF 
066c4     93 34 06 F6 | 	mov	local08, ##@LR__5743
066c8     16 13 02 F6 | 	mov	arg01, local04
066cc     1A 15 02 F6 | 	mov	arg02, local08
066d0     88 00 B2 FD | 	call	#__system___string_cmp
066d4     FD 36 0A F6 | 	mov	local09, result1 wz
066d8     00 FA 05 56 |  if_ne	mov	result1, #0
066dc     00 01 90 5D |  if_ne	jmp	#LR__0533
066e0                 | LR__0527
066e0                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
066e0     15 2F 0A F2 | 	cmp	local05, local03 wz
066e4     EC 00 90 5D |  if_ne	jmp	#LR__0530
066e8     B4 01 00 FF 
066ec     95 38 06 F6 | 	mov	local10, ##@LR__5744
066f0     16 13 02 F6 | 	mov	arg01, local04
066f4     1C 15 02 F6 | 	mov	arg02, local10
066f8     60 00 B2 FD | 	call	#__system___string_cmp
066fc     FD 3A 02 F6 | 	mov	local11, result1
06700     00 3A 56 F2 | 	cmps	local11, #0 wc
06704     1C 00 90 CD |  if_b	jmp	#LR__0528
06708     B4 01 00 FF 
0670c     97 14 06 F6 | 	mov	arg02, ##@LR__5745
06710     16 13 02 F6 | 	mov	arg01, local04
06714     44 00 B2 FD | 	call	#__system___string_cmp
06718     FD 38 02 F6 | 	mov	local10, result1
0671c     01 38 56 F2 | 	cmps	local10, #1 wc
06720     B0 00 90 CD |  if_b	jmp	#LR__0530
06724                 | LR__0528
06724     B4 01 00 FF 
06728     99 14 06 F6 | 	mov	arg02, ##@LR__5746
0672c     16 13 02 F6 | 	mov	arg01, local04
06730     28 00 B2 FD | 	call	#__system___string_cmp
06734     00 FA 55 F2 | 	cmps	result1, #0 wc
06738     1C 00 90 CD |  if_b	jmp	#LR__0529
0673c     B4 01 00 FF 
06740     9B 36 06 F6 | 	mov	local09, ##@LR__5747
06744     16 13 02 F6 | 	mov	arg01, local04
06748     1B 15 02 F6 | 	mov	arg02, local09
0674c     0C 00 B2 FD | 	call	#__system___string_cmp
06750     01 FA 55 F2 | 	cmps	result1, #1 wc
06754     7C 00 90 CD |  if_b	jmp	#LR__0530
06758                 | LR__0529
06758     B4 01 00 FF 
0675c     9D 36 06 F6 | 	mov	local09, ##@LR__5748
06760     16 13 02 F6 | 	mov	arg01, local04
06764     1B 15 02 F6 | 	mov	arg02, local09
06768     F0 FF B1 FD | 	call	#__system___string_cmp
0676c     00 FA 4D F2 | 	cmps	result1, #0 wz
06770     60 00 90 AD |  if_e	jmp	#LR__0530
06774     B4 01 00 FF 
06778     9F 34 06 F6 | 	mov	local08, ##@LR__5749
0677c     16 13 02 F6 | 	mov	arg01, local04
06780     1A 15 02 F6 | 	mov	arg02, local08
06784     D4 FF B1 FD | 	call	#__system___string_cmp
06788     FD 36 0A F6 | 	mov	local09, result1 wz
0678c     44 00 90 AD |  if_e	jmp	#LR__0530
06790     B4 01 00 FF 
06794     A1 3C 06 F6 | 	mov	local12, ##@LR__5750
06798     1E 35 02 F6 | 	mov	local08, local12
0679c     16 13 02 F6 | 	mov	arg01, local04
067a0     1A 15 02 F6 | 	mov	arg02, local08
067a4     B4 FF B1 FD | 	call	#__system___string_cmp
067a8     FD 32 0A F6 | 	mov	local07, result1 wz
067ac     24 00 90 AD |  if_e	jmp	#LR__0530
067b0     B4 01 00 FF 
067b4     A3 3E 06 F6 | 	mov	local13, ##@LR__5751
067b8     1F 3D 02 F6 | 	mov	local12, local13
067bc     16 13 02 F6 | 	mov	arg01, local04
067c0     1E 15 02 F6 | 	mov	arg02, local12
067c4     94 FF B1 FD | 	call	#__system___string_cmp
067c8     FD 34 0A F6 | 	mov	local08, result1 wz
067cc     00 FA 05 56 |  if_ne	mov	result1, #0
067d0     0C 00 90 5D |  if_ne	jmp	#LR__0533
067d4                 | LR__0530
067d4     01 2E 06 F1 | 	add	local05, #1
067d8     44 FE 9F FD | 	jmp	#LR__0524
067dc                 | LR__0531
067dc                 | LR__0532
067dc                 | ' return true
067dc     01 FA 65 F6 | 	neg	result1, #1
067e0                 | LR__0533
067e0     A7 F0 03 F6 | 	mov	ptra, fp
067e4     B2 00 A0 FD | 	call	#popregs_
067e8                 | _isname_ret
067e8     2D 00 64 FD | 	ret
067ec                 | 
067ec                 | ' 
067ec                 | ' ' Check if the part is a number.  
067ec                 | ' 
067ec                 | ' function isnum(s as string) as boolean 
067ec                 | _isnum
067ec     13 4A 05 F6 | 	mov	COUNT_, #19
067f0     A8 00 A0 FD | 	call	#pushregs_
067f4     09 27 02 F6 | 	mov	local01, arg01
067f8     00 28 06 F6 | 	mov	local02, #0
067fc     00 2A 06 F6 | 	mov	local03, #0
06800     13 13 02 F6 | 	mov	arg01, local01
06804     09 2D 02 F6 | 	mov	local04, arg01
06808     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
0680c                 | LR__0540
0680c     16 FB C9 FA | 	rdbyte	result1, local04 wz
06810     01 2C 06 51 |  if_ne	add	local04, #1
06814     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06818                 | LR__0541
06818     09 2D 82 F1 | 	sub	local04, arg01
0681c     16 FB 01 F6 | 	mov	result1, local04
06820     FD 2E 0A F6 | 	mov	local05, result1 wz
06824     00 FA 05 A6 |  if_e	mov	result1, #0
06828     A0 03 90 AD |  if_e	jmp	#LR__0556
0682c     13 13 02 F6 | 	mov	arg01, local01
06830     01 14 06 F6 | 	mov	arg02, #1
06834     01 16 06 F6 | 	mov	arg03, #1
06838     8C 20 B2 FD | 	call	#__system__Mid_S
0683c     FD 30 02 F6 | 	mov	local06, result1
06840                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06840     B4 01 00 FF 
06844     A5 14 06 F6 | 	mov	arg02, ##@LR__5752
06848     18 13 02 F6 | 	mov	arg01, local06
0684c     0C FF B1 FD | 	call	#__system___string_cmp
06850     00 FA 55 F2 | 	cmps	result1, #0 wc
06854     1C 00 90 CD |  if_b	jmp	#LR__0542
06858     B4 01 00 FF 
0685c     A7 32 06 F6 | 	mov	local07, ##@LR__5753
06860     18 13 02 F6 | 	mov	arg01, local06
06864     19 15 02 F6 | 	mov	arg02, local07
06868     F0 FE B1 FD | 	call	#__system___string_cmp
0686c     01 FA 55 F2 | 	cmps	result1, #1 wc
06870     84 00 90 CD |  if_b	jmp	#LR__0543
06874                 | LR__0542
06874     B4 01 00 FF 
06878     A9 34 06 F6 | 	mov	local08, ##@LR__5754
0687c     1A 33 02 F6 | 	mov	local07, local08
06880     18 13 02 F6 | 	mov	arg01, local06
06884     19 15 02 F6 | 	mov	arg02, local07
06888     D0 FE B1 FD | 	call	#__system___string_cmp
0688c     00 FA 0D F2 | 	cmp	result1, #0 wz
06890     64 00 90 AD |  if_e	jmp	#LR__0543
06894     B4 01 00 FF 
06898     AB 36 06 F6 | 	mov	local09, ##@LR__5755
0689c     1B 35 02 F6 | 	mov	local08, local09
068a0     18 13 02 F6 | 	mov	arg01, local06
068a4     1A 15 02 F6 | 	mov	arg02, local08
068a8     B0 FE B1 FD | 	call	#__system___string_cmp
068ac     FD 32 0A F6 | 	mov	local07, result1 wz
068b0     44 00 90 AD |  if_e	jmp	#LR__0543
068b4     B4 01 00 FF 
068b8     AD 38 06 F6 | 	mov	local10, ##@LR__5756
068bc     1C 37 02 F6 | 	mov	local09, local10
068c0     18 13 02 F6 | 	mov	arg01, local06
068c4     1B 15 02 F6 | 	mov	arg02, local09
068c8     90 FE B1 FD | 	call	#__system___string_cmp
068cc     FD 34 0A F6 | 	mov	local08, result1 wz
068d0     24 00 90 AD |  if_e	jmp	#LR__0543
068d4     B4 01 00 FF 
068d8     AF 3A 06 F6 | 	mov	local11, ##@LR__5757
068dc     1D 39 02 F6 | 	mov	local10, local11
068e0     18 13 02 F6 | 	mov	arg01, local06
068e4     1C 15 02 F6 | 	mov	arg02, local10
068e8     70 FE B1 FD | 	call	#__system___string_cmp
068ec     FD 36 0A F6 | 	mov	local09, result1 wz
068f0     00 FA 05 56 |  if_ne	mov	result1, #0
068f4     D4 02 90 5D |  if_ne	jmp	#LR__0556
068f8                 | LR__0543
068f8                 | ' if m$="." then ds=1
068f8     B4 01 00 FF 
068fc     B1 14 06 F6 | 	mov	arg02, ##@LR__5758
06900     18 13 02 F6 | 	mov	arg01, local06
06904     54 FE B1 FD | 	call	#__system___string_cmp
06908     00 FA 0D F2 | 	cmp	result1, #0 wz
0690c     01 28 06 A6 |  if_e	mov	local02, #1
06910                 | ' if m$="$" then hex=1 else hex=0
06910     B4 01 00 FF 
06914     B3 14 06 F6 | 	mov	arg02, ##@LR__5759
06918     18 13 02 F6 | 	mov	arg01, local06
0691c     3C FE B1 FD | 	call	#__system___string_cmp
06920     00 FA 0D F2 | 	cmp	result1, #0 wz
06924     01 3C 06 A6 |  if_e	mov	local12, #1
06928     00 3C 06 56 |  if_ne	mov	local12, #0
0692c                 | ' if m$="%" then bin=1 else bin=0
0692c     B4 01 00 FF 
06930     B5 14 06 F6 | 	mov	arg02, ##@LR__5760
06934     18 13 02 F6 | 	mov	arg01, local06
06938     20 FE B1 FD | 	call	#__system___string_cmp
0693c     00 FA 0D F2 | 	cmp	result1, #0 wz
06940     01 3E 06 A6 |  if_e	mov	local13, #1
06944     00 3E 06 56 |  if_ne	mov	local13, #0
06948                 | ' if l>1 then 
06948     02 2E 56 F2 | 	cmps	local05, #2 wc
0694c     78 02 90 CD |  if_b	jmp	#LR__0555
06950                 | '   for i=2 to l
06950     02 40 06 F6 | 	mov	local14, #2
06954     17 43 02 F6 | 	mov	local15, local05
06958     01 42 06 F1 | 	add	local15, #1
0695c                 | LR__0544
0695c     21 41 52 F2 | 	cmps	local14, local15 wc
06960     64 02 90 3D |  if_ae	jmp	#LR__0554
06964     13 13 02 F6 | 	mov	arg01, local01
06968     20 15 02 F6 | 	mov	arg02, local14
0696c     01 16 06 F6 | 	mov	arg03, #1
06970     54 1F B2 FD | 	call	#__system__Mid_S
06974     FD 30 02 F6 | 	mov	local06, result1
06978     00 44 06 F6 | 	mov	local16, #0
0697c                 | '     m$=mid$(s,i,1) : b=false
0697c                 | '     if m$>="0" andalso m$<="9" then b=true  
0697c     B4 01 00 FF 
06980     B7 14 06 F6 | 	mov	arg02, ##@LR__5761
06984     18 13 02 F6 | 	mov	arg01, local06
06988     D0 FD B1 FD | 	call	#__system___string_cmp
0698c     00 FA 55 F2 | 	cmps	result1, #0 wc
06990     1C 00 90 CD |  if_b	jmp	#LR__0545
06994     B4 01 00 FF 
06998     B9 32 06 F6 | 	mov	local07, ##@LR__5762
0699c     18 13 02 F6 | 	mov	arg01, local06
069a0     19 15 02 F6 | 	mov	arg02, local07
069a4     B4 FD B1 FD | 	call	#__system___string_cmp
069a8     01 FA 55 F2 | 	cmps	result1, #1 wc
069ac     01 44 66 C6 |  if_b	neg	local16, #1
069b0                 | LR__0545
069b0                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
069b0     B4 01 00 FF 
069b4     BB 14 06 F6 | 	mov	arg02, ##@LR__5763
069b8     18 13 02 F6 | 	mov	arg01, local06
069bc     9C FD B1 FD | 	call	#__system___string_cmp
069c0     00 FA 0D F2 | 	cmp	result1, #0 wz
069c4     7C 00 90 AD |  if_e	jmp	#LR__0546
069c8     B4 01 00 FF 
069cc     BD 32 06 F6 | 	mov	local07, ##@LR__5764
069d0     18 13 02 F6 | 	mov	arg01, local06
069d4     19 15 02 F6 | 	mov	arg02, local07
069d8     80 FD B1 FD | 	call	#__system___string_cmp
069dc     00 FA 0D F2 | 	cmp	result1, #0 wz
069e0     60 00 90 AD |  if_e	jmp	#LR__0546
069e4     B4 01 00 FF 
069e8     BF 34 06 F6 | 	mov	local08, ##@LR__5765
069ec     1A 33 02 F6 | 	mov	local07, local08
069f0     18 13 02 F6 | 	mov	arg01, local06
069f4     19 15 02 F6 | 	mov	arg02, local07
069f8     60 FD B1 FD | 	call	#__system___string_cmp
069fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06a00     40 00 90 AD |  if_e	jmp	#LR__0546
06a04     B4 01 00 FF 
06a08     C1 36 06 F6 | 	mov	local09, ##@LR__5766
06a0c     1B 35 02 F6 | 	mov	local08, local09
06a10     18 13 02 F6 | 	mov	arg01, local06
06a14     1A 15 02 F6 | 	mov	arg02, local08
06a18     40 FD B1 FD | 	call	#__system___string_cmp
06a1c     FD 32 0A F6 | 	mov	local07, result1 wz
06a20     20 00 90 AD |  if_e	jmp	#LR__0546
06a24     B4 01 00 FF 
06a28     C3 38 06 F6 | 	mov	local10, ##@LR__5767
06a2c     1C 37 02 F6 | 	mov	local09, local10
06a30     18 13 02 F6 | 	mov	arg01, local06
06a34     1B 15 02 F6 | 	mov	arg02, local09
06a38     20 FD B1 FD | 	call	#__system___string_cmp
06a3c     FD 34 0A F6 | 	mov	local08, result1 wz
06a40     04 00 90 5D |  if_ne	jmp	#LR__0547
06a44                 | LR__0546
06a44     01 44 66 F6 | 	neg	local16, #1
06a48                 | LR__0547
06a48                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06a48     01 3C 0E F2 | 	cmp	local12, #1 wz
06a4c     34 00 90 5D |  if_ne	jmp	#LR__0548
06a50     B4 01 00 FF 
06a54     C5 14 06 F6 | 	mov	arg02, ##@LR__5768
06a58     18 13 02 F6 | 	mov	arg01, local06
06a5c     FC FC B1 FD | 	call	#__system___string_cmp
06a60     00 FA 55 F2 | 	cmps	result1, #0 wc
06a64     1C 00 90 CD |  if_b	jmp	#LR__0548
06a68     B4 01 00 FF 
06a6c     C7 32 06 F6 | 	mov	local07, ##@LR__5769
06a70     18 13 02 F6 | 	mov	arg01, local06
06a74     19 15 02 F6 | 	mov	arg02, local07
06a78     E0 FC B1 FD | 	call	#__system___string_cmp
06a7c     01 FA 55 F2 | 	cmps	result1, #1 wc
06a80     01 44 66 C6 |  if_b	neg	local16, #1
06a84                 | LR__0548
06a84                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06a84     01 3E 0E F2 | 	cmp	local13, #1 wz
06a88     58 00 90 5D |  if_ne	jmp	#LR__0550
06a8c     B4 01 00 FF 
06a90     C9 14 06 F6 | 	mov	arg02, ##@LR__5770
06a94     18 13 02 F6 | 	mov	arg01, local06
06a98     C0 FC B1 FD | 	call	#__system___string_cmp
06a9c     00 FA 55 F2 | 	cmps	result1, #0 wc
06aa0     1C 00 90 CD |  if_b	jmp	#LR__0549
06aa4     B4 01 00 FF 
06aa8     CB 32 06 F6 | 	mov	local07, ##@LR__5771
06aac     18 13 02 F6 | 	mov	arg01, local06
06ab0     19 15 02 F6 | 	mov	arg02, local07
06ab4     A4 FC B1 FD | 	call	#__system___string_cmp
06ab8     01 FA 55 F2 | 	cmps	result1, #1 wc
06abc     24 00 90 CD |  if_b	jmp	#LR__0550
06ac0                 | LR__0549
06ac0     B4 01 00 FF 
06ac4     CD 34 06 F6 | 	mov	local08, ##@LR__5772
06ac8     1A 33 02 F6 | 	mov	local07, local08
06acc     18 13 02 F6 | 	mov	arg01, local06
06ad0     19 15 02 F6 | 	mov	arg02, local07
06ad4     84 FC B1 FD | 	call	#__system___string_cmp
06ad8     00 FA 0D F2 | 	cmp	result1, #0 wz
06adc     00 FA 05 56 |  if_ne	mov	result1, #0
06ae0     E8 00 90 5D |  if_ne	jmp	#LR__0556
06ae4                 | LR__0550
06ae4                 | '     if not b then return false
06ae4     22 45 22 F6 | 	not	local16, local16
06ae8     00 44 0E F2 | 	cmp	local16, #0 wz
06aec     00 FA 05 56 |  if_ne	mov	result1, #0
06af0     D8 00 90 5D |  if_ne	jmp	#LR__0556
06af4                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06af4     B4 01 00 FF 
06af8     CF 14 06 F6 | 	mov	arg02, ##@LR__5773
06afc     18 13 02 F6 | 	mov	arg01, local06
06b00     58 FC B1 FD | 	call	#__system___string_cmp
06b04     00 FA 0D F2 | 	cmp	result1, #0 wz
06b08     3C 00 90 5D |  if_ne	jmp	#LR__0551
06b0c     20 15 02 F6 | 	mov	arg02, local14
06b10     01 14 86 F1 | 	sub	arg02, #1
06b14     13 13 02 F6 | 	mov	arg01, local01
06b18     01 16 06 F6 | 	mov	arg03, #1
06b1c     A8 1D B2 FD | 	call	#__system__Mid_S
06b20     FD 12 02 F6 | 	mov	arg01, result1
06b24     98 1F B2 FD | 	call	#__system__LCase_S
06b28     FD 12 02 F6 | 	mov	arg01, result1
06b2c     B4 01 00 FF 
06b30     D1 32 06 F6 | 	mov	local07, ##@LR__5774
06b34     19 15 02 F6 | 	mov	arg02, local07
06b38     20 FC B1 FD | 	call	#__system___string_cmp
06b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
06b40     00 FA 05 56 |  if_ne	mov	result1, #0
06b44     84 00 90 5D |  if_ne	jmp	#LR__0556
06b48                 | LR__0551
06b48                 | '     if m$="." then ds+=1: if ds>1 then return false
06b48     B4 01 00 FF 
06b4c     D3 14 06 F6 | 	mov	arg02, ##@LR__5775
06b50     18 13 02 F6 | 	mov	arg01, local06
06b54     04 FC B1 FD | 	call	#__system___string_cmp
06b58     00 FA 0D F2 | 	cmp	result1, #0 wz
06b5c     01 28 06 A1 |  if_e	add	local02, #1
06b60     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06b64     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06b68     60 00 90 2D |  if_nc_and_z	jmp	#LR__0556
06b6c                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06b6c     B4 01 00 FF 
06b70     D5 46 06 F6 | 	mov	local17, ##@LR__5776
06b74     23 49 02 F6 | 	mov	local18, local17
06b78     18 13 02 F6 | 	mov	arg01, local06
06b7c     24 15 02 F6 | 	mov	arg02, local18
06b80     D8 FB B1 FD | 	call	#__system___string_cmp
06b84     FD 4A 0A F6 | 	mov	local19, result1 wz
06b88     20 00 90 AD |  if_e	jmp	#LR__0552
06b8c     B4 01 00 FF 
06b90     D7 32 06 F6 | 	mov	local07, ##@LR__5777
06b94     19 47 02 F6 | 	mov	local17, local07
06b98     18 13 02 F6 | 	mov	arg01, local06
06b9c     23 15 02 F6 | 	mov	arg02, local17
06ba0     B8 FB B1 FD | 	call	#__system___string_cmp
06ba4     FD 48 0A F6 | 	mov	local18, result1 wz
06ba8     14 00 90 5D |  if_ne	jmp	#LR__0553
06bac                 | LR__0552
06bac     01 2A 06 F1 | 	add	local03, #1
06bb0     00 3C 0E F2 | 	cmp	local12, #0 wz
06bb4     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06bb8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06bbc     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0556
06bc0                 | LR__0553
06bc0     01 40 06 F1 | 	add	local14, #1
06bc4     94 FD 9F FD | 	jmp	#LR__0544
06bc8                 | LR__0554
06bc8                 | LR__0555
06bc8                 | ' return true
06bc8     01 FA 65 F6 | 	neg	result1, #1
06bcc                 | LR__0556
06bcc     A7 F0 03 F6 | 	mov	ptra, fp
06bd0     B2 00 A0 FD | 	call	#popregs_
06bd4                 | _isnum_ret
06bd4     2D 00 64 FD | 	ret
06bd8                 | 
06bd8                 | '   
06bd8                 | ' ' Check if the part is an integer number.    
06bd8                 | '   
06bd8                 | ' function isint(s as string) as boolean
06bd8                 | _isint
06bd8     0E 4A 05 F6 | 	mov	COUNT_, #14
06bdc     A8 00 A0 FD | 	call	#pushregs_
06be0     09 27 02 F6 | 	mov	local01, arg01
06be4     09 29 02 F6 | 	mov	local02, arg01
06be8     97 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
06bec                 | LR__0560
06bec     14 FB C9 FA | 	rdbyte	result1, local02 wz
06bf0     01 28 06 51 |  if_ne	add	local02, #1
06bf4     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06bf8                 | LR__0561
06bf8     09 29 82 F1 | 	sub	local02, arg01
06bfc     14 FB 01 F6 | 	mov	result1, local02
06c00     FD 2A 0A F6 | 	mov	local03, result1 wz
06c04     00 FA 05 A6 |  if_e	mov	result1, #0
06c08     64 02 90 AD |  if_e	jmp	#LR__0574
06c0c     13 13 02 F6 | 	mov	arg01, local01
06c10     01 14 06 F6 | 	mov	arg02, #1
06c14     01 16 06 F6 | 	mov	arg03, #1
06c18     AC 1C B2 FD | 	call	#__system__Mid_S
06c1c     FD 2C 02 F6 | 	mov	local04, result1
06c20                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06c20     B4 01 00 FF 
06c24     D9 14 06 F6 | 	mov	arg02, ##@LR__5778
06c28     16 13 02 F6 | 	mov	arg01, local04
06c2c     2C FB B1 FD | 	call	#__system___string_cmp
06c30     00 FA 55 F2 | 	cmps	result1, #0 wc
06c34     1C 00 90 CD |  if_b	jmp	#LR__0562
06c38     B4 01 00 FF 
06c3c     DB 2E 06 F6 | 	mov	local05, ##@LR__5779
06c40     16 13 02 F6 | 	mov	arg01, local04
06c44     17 15 02 F6 | 	mov	arg02, local05
06c48     10 FB B1 FD | 	call	#__system___string_cmp
06c4c     01 FA 55 F2 | 	cmps	result1, #1 wc
06c50     64 00 90 CD |  if_b	jmp	#LR__0563
06c54                 | LR__0562
06c54     B4 01 00 FF 
06c58     DD 30 06 F6 | 	mov	local06, ##@LR__5780
06c5c     18 2F 02 F6 | 	mov	local05, local06
06c60     16 13 02 F6 | 	mov	arg01, local04
06c64     17 15 02 F6 | 	mov	arg02, local05
06c68     F0 FA B1 FD | 	call	#__system___string_cmp
06c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
06c70     44 00 90 AD |  if_e	jmp	#LR__0563
06c74     B4 01 00 FF 
06c78     DF 32 06 F6 | 	mov	local07, ##@LR__5781
06c7c     19 31 02 F6 | 	mov	local06, local07
06c80     16 13 02 F6 | 	mov	arg01, local04
06c84     18 15 02 F6 | 	mov	arg02, local06
06c88     D0 FA B1 FD | 	call	#__system___string_cmp
06c8c     FD 2E 0A F6 | 	mov	local05, result1 wz
06c90     24 00 90 AD |  if_e	jmp	#LR__0563
06c94     B4 01 00 FF 
06c98     E1 34 06 F6 | 	mov	local08, ##@LR__5782
06c9c     1A 33 02 F6 | 	mov	local07, local08
06ca0     16 13 02 F6 | 	mov	arg01, local04
06ca4     19 15 02 F6 | 	mov	arg02, local07
06ca8     B0 FA B1 FD | 	call	#__system___string_cmp
06cac     FD 30 0A F6 | 	mov	local06, result1 wz
06cb0     00 FA 05 56 |  if_ne	mov	result1, #0
06cb4     B8 01 90 5D |  if_ne	jmp	#LR__0574
06cb8                 | LR__0563
06cb8                 | ' if m$="$" then hex=1 else hex=0
06cb8     B4 01 00 FF 
06cbc     E3 14 06 F6 | 	mov	arg02, ##@LR__5783
06cc0     16 13 02 F6 | 	mov	arg01, local04
06cc4     94 FA B1 FD | 	call	#__system___string_cmp
06cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
06ccc     01 36 06 A6 |  if_e	mov	local09, #1
06cd0     00 36 06 56 |  if_ne	mov	local09, #0
06cd4                 | ' if m$="%" then bin=1 else bin=0
06cd4     B4 01 00 FF 
06cd8     E5 14 06 F6 | 	mov	arg02, ##@LR__5784
06cdc     16 13 02 F6 | 	mov	arg01, local04
06ce0     78 FA B1 FD | 	call	#__system___string_cmp
06ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ce8     01 38 06 A6 |  if_e	mov	local10, #1
06cec     00 38 06 56 |  if_ne	mov	local10, #0
06cf0                 | ' if l>1 then 
06cf0     02 2A 56 F2 | 	cmps	local03, #2 wc
06cf4     74 01 90 CD |  if_b	jmp	#LR__0573
06cf8                 | '   for i=2 to l
06cf8     02 3A 06 F6 | 	mov	local11, #2
06cfc     15 3D 02 F6 | 	mov	local12, local03
06d00     01 3C 06 F1 | 	add	local12, #1
06d04                 | LR__0564
06d04     1E 3B 52 F2 | 	cmps	local11, local12 wc
06d08     60 01 90 3D |  if_ae	jmp	#LR__0572
06d0c     13 13 02 F6 | 	mov	arg01, local01
06d10     1D 15 02 F6 | 	mov	arg02, local11
06d14     01 16 06 F6 | 	mov	arg03, #1
06d18     AC 1B B2 FD | 	call	#__system__Mid_S
06d1c     FD 2C 02 F6 | 	mov	local04, result1
06d20                 | '     m$=mid$(s,i,1) 
06d20                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06d20     00 36 0E F2 | 	cmp	local09, #0 wz
06d24     50 00 90 5D |  if_ne	jmp	#LR__0566
06d28     B4 01 00 FF 
06d2c     E7 14 06 F6 | 	mov	arg02, ##@LR__5785
06d30     16 13 02 F6 | 	mov	arg01, local04
06d34     24 FA B1 FD | 	call	#__system___string_cmp
06d38     00 FA 55 F2 | 	cmps	result1, #0 wc
06d3c     18 00 90 CD |  if_b	jmp	#LR__0565
06d40     B4 01 00 FF 
06d44     E9 14 06 F6 | 	mov	arg02, ##@LR__5786
06d48     16 13 02 F6 | 	mov	arg01, local04
06d4c     0C FA B1 FD | 	call	#__system___string_cmp
06d50     01 FA 55 F2 | 	cmps	result1, #1 wc
06d54     20 00 90 CD |  if_b	jmp	#LR__0566
06d58                 | LR__0565
06d58     B4 01 00 FF 
06d5c     EB 30 06 F6 | 	mov	local06, ##@LR__5787
06d60     16 13 02 F6 | 	mov	arg01, local04
06d64     18 15 02 F6 | 	mov	arg02, local06
06d68     F0 F9 B1 FD | 	call	#__system___string_cmp
06d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
06d70     00 FA 05 56 |  if_ne	mov	result1, #0
06d74     F8 00 90 5D |  if_ne	jmp	#LR__0574
06d78                 | LR__0566
06d78                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06d78     01 36 0E F2 | 	cmp	local09, #1 wz
06d7c     90 00 90 5D |  if_ne	jmp	#LR__0569
06d80     B4 01 00 FF 
06d84     ED 14 06 F6 | 	mov	arg02, ##@LR__5788
06d88     16 13 02 F6 | 	mov	arg01, local04
06d8c     CC F9 B1 FD | 	call	#__system___string_cmp
06d90     00 FA 55 F2 | 	cmps	result1, #0 wc
06d94     1C 00 90 CD |  if_b	jmp	#LR__0567
06d98     B4 01 00 FF 
06d9c     EF 14 06 F6 | 	mov	arg02, ##@LR__5789
06da0     16 13 02 F6 | 	mov	arg01, local04
06da4     B4 F9 B1 FD | 	call	#__system___string_cmp
06da8     FD 3E 02 F6 | 	mov	local13, result1
06dac     01 3E 56 F2 | 	cmps	local13, #1 wc
06db0     5C 00 90 CD |  if_b	jmp	#LR__0569
06db4                 | LR__0567
06db4     B4 01 00 FF 
06db8     F1 2E 06 F6 | 	mov	local05, ##@LR__5790
06dbc     16 13 02 F6 | 	mov	arg01, local04
06dc0     17 15 02 F6 | 	mov	arg02, local05
06dc4     94 F9 B1 FD | 	call	#__system___string_cmp
06dc8     FD 40 02 F6 | 	mov	local14, result1
06dcc     00 40 56 F2 | 	cmps	local14, #0 wc
06dd0     1C 00 90 CD |  if_b	jmp	#LR__0568
06dd4     B4 01 00 FF 
06dd8     F3 32 06 F6 | 	mov	local07, ##@LR__5791
06ddc     16 13 02 F6 | 	mov	arg01, local04
06de0     19 15 02 F6 | 	mov	arg02, local07
06de4     74 F9 B1 FD | 	call	#__system___string_cmp
06de8     01 FA 55 F2 | 	cmps	result1, #1 wc
06dec     20 00 90 CD |  if_b	jmp	#LR__0569
06df0                 | LR__0568
06df0     B4 01 00 FF 
06df4     F5 34 06 F6 | 	mov	local08, ##@LR__5792
06df8     16 13 02 F6 | 	mov	arg01, local04
06dfc     1A 15 02 F6 | 	mov	arg02, local08
06e00     58 F9 B1 FD | 	call	#__system___string_cmp
06e04     00 FA 0D F2 | 	cmp	result1, #0 wz
06e08     00 FA 05 56 |  if_ne	mov	result1, #0
06e0c     60 00 90 5D |  if_ne	jmp	#LR__0574
06e10                 | LR__0569
06e10                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
06e10     01 38 0E F2 | 	cmp	local10, #1 wz
06e14     4C 00 90 5D |  if_ne	jmp	#LR__0571
06e18     B4 01 00 FF 
06e1c     F7 14 06 F6 | 	mov	arg02, ##@LR__5793
06e20     16 13 02 F6 | 	mov	arg01, local04
06e24     34 F9 B1 FD | 	call	#__system___string_cmp
06e28     00 FA 55 F2 | 	cmps	result1, #0 wc
06e2c     18 00 90 CD |  if_b	jmp	#LR__0570
06e30     B4 01 00 FF 
06e34     F9 14 06 F6 | 	mov	arg02, ##@LR__5794
06e38     16 13 02 F6 | 	mov	arg01, local04
06e3c     1C F9 B1 FD | 	call	#__system___string_cmp
06e40     01 FA 55 F2 | 	cmps	result1, #1 wc
06e44     1C 00 90 CD |  if_b	jmp	#LR__0571
06e48                 | LR__0570
06e48     B4 01 00 FF 
06e4c     FB 14 06 F6 | 	mov	arg02, ##@LR__5795
06e50     16 13 02 F6 | 	mov	arg01, local04
06e54     04 F9 B1 FD | 	call	#__system___string_cmp
06e58     00 FA 0D F2 | 	cmp	result1, #0 wz
06e5c     00 FA 05 56 |  if_ne	mov	result1, #0
06e60     0C 00 90 5D |  if_ne	jmp	#LR__0574
06e64                 | LR__0571
06e64     01 3A 06 F1 | 	add	local11, #1
06e68     98 FE 9F FD | 	jmp	#LR__0564
06e6c                 | LR__0572
06e6c                 | LR__0573
06e6c                 | ' return true
06e6c     01 FA 65 F6 | 	neg	result1, #1
06e70                 | LR__0574
06e70     A7 F0 03 F6 | 	mov	ptra, fp
06e74     B2 00 A0 FD | 	call	#popregs_
06e78                 | _isint_ret
06e78     2D 00 64 FD | 	ret
06e7c                 | 
06e7c                 | ' 
06e7c                 | ' ' Check if the part is a positive decimal number.  
06e7c                 | ' 
06e7c                 | ' function isdec(s as string) as boolean
06e7c                 | _isdec
06e7c     05 4A 05 F6 | 	mov	COUNT_, #5
06e80     A8 00 A0 FD | 	call	#pushregs_
06e84     09 27 02 F6 | 	mov	local01, arg01
06e88     09 29 02 F6 | 	mov	local02, arg01
06e8c     97 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06e90                 | LR__0580
06e90     14 FB C9 FA | 	rdbyte	result1, local02 wz
06e94     01 28 06 51 |  if_ne	add	local02, #1
06e98     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06e9c                 | LR__0581
06e9c     09 29 82 F1 | 	sub	local02, arg01
06ea0     14 FB 01 F6 | 	mov	result1, local02
06ea4     FD 28 0A F6 | 	mov	local02, result1 wz
06ea8     00 FA 05 A6 |  if_e	mov	result1, #0
06eac     80 00 90 AD |  if_e	jmp	#LR__0586
06eb0                 | ' for i=1 to l
06eb0     01 2A 06 F6 | 	mov	local03, #1
06eb4     14 2D 02 F6 | 	mov	local04, local02
06eb8     01 2C 06 F1 | 	add	local04, #1
06ebc                 | LR__0582
06ebc     16 2B 52 F2 | 	cmps	local03, local04 wc
06ec0     68 00 90 3D |  if_ae	jmp	#LR__0585
06ec4     13 13 02 F6 | 	mov	arg01, local01
06ec8     15 15 02 F6 | 	mov	arg02, local03
06ecc     01 16 06 F6 | 	mov	arg03, #1
06ed0     F4 19 B2 FD | 	call	#__system__Mid_S
06ed4     FD 2E 02 F6 | 	mov	local05, result1
06ed8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06ed8     B4 01 00 FF 
06edc     FD 14 06 F6 | 	mov	arg02, ##@LR__5796
06ee0     17 13 02 F6 | 	mov	arg01, local05
06ee4     74 F8 B1 FD | 	call	#__system___string_cmp
06ee8     00 FA 55 F2 | 	cmps	result1, #0 wc
06eec     18 00 90 CD |  if_b	jmp	#LR__0583
06ef0     B4 01 00 FF 
06ef4     FF 14 06 F6 | 	mov	arg02, ##@LR__5797
06ef8     17 13 02 F6 | 	mov	arg01, local05
06efc     5C F8 B1 FD | 	call	#__system___string_cmp
06f00     01 FA 55 F2 | 	cmps	result1, #1 wc
06f04     1C 00 90 CD |  if_b	jmp	#LR__0584
06f08                 | LR__0583
06f08     B4 01 00 FF 
06f0c     01 15 06 F6 | 	mov	arg02, ##@LR__5798
06f10     17 13 02 F6 | 	mov	arg01, local05
06f14     44 F8 B1 FD | 	call	#__system___string_cmp
06f18     00 FA 0D F2 | 	cmp	result1, #0 wz
06f1c     00 FA 05 56 |  if_ne	mov	result1, #0
06f20     0C 00 90 5D |  if_ne	jmp	#LR__0586
06f24                 | LR__0584
06f24     01 2A 06 F1 | 	add	local03, #1
06f28     90 FF 9F FD | 	jmp	#LR__0582
06f2c                 | LR__0585
06f2c                 | ' return true
06f2c     01 FA 65 F6 | 	neg	result1, #1
06f30                 | LR__0586
06f30     A7 F0 03 F6 | 	mov	ptra, fp
06f34     B2 00 A0 FD | 	call	#popregs_
06f38                 | _isdec_ret
06f38     2D 00 64 FD | 	ret
06f3c                 | 
06f3c                 | ' 
06f3c                 | ' ' Check if the part is a string.  
06f3c                 | ' 
06f3c                 | ' function isstring(s as string) as boolean
06f3c                 | _isstring
06f3c     01 4A 05 F6 | 	mov	COUNT_, #1
06f40     A8 00 A0 FD | 	call	#pushregs_
06f44                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06f44     09 27 02 F6 | 	mov	local01, arg01
06f48     01 14 06 F6 | 	mov	arg02, #1
06f4c     60 18 B2 FD | 	call	#__system__Left_S
06f50     FD 12 02 F6 | 	mov	arg01, result1
06f54     B4 01 00 FF 
06f58     03 15 06 F6 | 	mov	arg02, ##@LR__5799
06f5c     FC F7 B1 FD | 	call	#__system___string_cmp
06f60     00 FA 4D F2 | 	cmps	result1, #0 wz
06f64     28 00 90 5D |  if_ne	jmp	#LR__0590
06f68     13 13 02 F6 | 	mov	arg01, local01
06f6c     01 14 06 F6 | 	mov	arg02, #1
06f70     C4 18 B2 FD | 	call	#__system__Right_S
06f74     FD 12 02 F6 | 	mov	arg01, result1
06f78     B4 01 00 FF 
06f7c     05 15 06 F6 | 	mov	arg02, ##@LR__5800
06f80     D8 F7 B1 FD | 	call	#__system___string_cmp
06f84     00 FA 4D F2 | 	cmps	result1, #0 wz
06f88     01 FA 65 A6 |  if_e	neg	result1, #1
06f8c     04 00 90 AD |  if_e	jmp	#LR__0591
06f90                 | LR__0590
06f90     00 FA 05 F6 | 	mov	result1, #0
06f94                 | LR__0591
06f94     A7 F0 03 F6 | 	mov	ptra, fp
06f98     B2 00 A0 FD | 	call	#popregs_
06f9c                 | _isstring_ret
06f9c     2D 00 64 FD | 	ret
06fa0                 | 
06fa0                 | ' 
06fa0                 | ' ' getnoteval. Returns the frequency of note token
06fa0                 | ' 
06fa0                 | ' function getnoteval(token) as single
06fa0                 | _getnoteval
06fa0     02 4A 05 F6 | 	mov	COUNT_, #2
06fa4     A8 00 A0 FD | 	call	#pushregs_
06fa8     01 00 00 FF 
06fac     00 13 86 F1 | 	sub	arg01, ##768
06fb0     09 15 52 F6 | 	abs	arg02, arg01 wc
06fb4     0C 14 16 FD | 	qdiv	arg02, #12
06fb8     14 00 00 FF 
06fbc     D8 E4 05 F1 | 	add	objptr, ##10456
06fc0     19 14 62 FD | 	getqy	arg02
06fc4     0A 15 82 F6 | 	negc	arg02, arg02
06fc8     02 14 66 F0 | 	shl	arg02, #2
06fcc     F2 14 02 F1 | 	add	arg02, objptr
06fd0     0A 27 02 FB | 	rdlong	local01, arg02
06fd4     09 15 52 F6 | 	abs	arg02, arg01 wc
06fd8     0C 14 16 FD | 	qdiv	arg02, #12
06fdc     14 00 00 FF 
06fe0     D8 E4 85 F1 | 	sub	objptr, ##10456
06fe4     01 12 06 F6 | 	mov	arg01, #1
06fe8                 | ' noteexp=1+(note/12) 
06fe8                 | ' return (2.0^noteexp)*notebase
06fe8     18 14 62 FD | 	getqx	arg02
06fec     0A 13 82 F3 | 	sumc	arg01, arg02
06ff0     09 13 52 F6 | 	abs	arg01, arg01 wc
06ff4     1F 28 C6 C9 |  if_b	decod	local02, #31
06ff8     00 28 06 36 |  if_ae	mov	local02, #0
06ffc     A8 21 B2 FD | 	call	#__system___float_fromuns
07000     14 FB 61 F5 | 	xor	result1, local02
07004     FD 14 02 F6 | 	mov	arg02, result1
07008     1E 12 C6 F9 | 	decod	arg01, #30
0700c     A4 34 B2 FD | 	call	#__system____builtin_powf
07010     FD 12 02 F6 | 	mov	arg01, result1
07014     13 15 02 F6 | 	mov	arg02, local01
07018     90 25 B2 FD | 	call	#__system___float_mul
0701c     A7 F0 03 F6 | 	mov	ptra, fp
07020     B2 00 A0 FD | 	call	#popregs_
07024                 | _getnoteval_ret
07024     2D 00 64 FD | 	ret
07028                 | 
07028                 | ' 
07028                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07028                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
07028                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07028                 | ' 
07028                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07028                 | ' '
07028                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
07028                 | ' '
07028                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
07028                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
07028                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
07028                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
07028                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
07028                 | ' ' 
07028                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07028                 | ' 
07028                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07028                 | ' ' Helper functions to manage program lines
07028                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07028                 | ' 
07028                 | ' '----- delete a line from a program
07028                 | ' 
07028                 | ' function deleteline(aline as ulong) as integer
07028                 | _deleteline
07028     02 4A 05 F6 | 	mov	COUNT_, #2
0702c     A8 00 A0 FD | 	call	#pushregs_
07030     2C F0 07 F1 | 	add	ptra, #44
07034     04 4E 05 F1 | 	add	fp, #4
07038     A7 12 62 FC | 	wrlong	arg01, fp
0703c     4A 00 00 FF 
07040     88 E4 05 F1 | 	add	objptr, ##38024
07044     F2 26 02 FB | 	rdlong	local01, objptr
07048     0C 4E 05 F1 | 	add	fp, #12
0704c     A7 26 62 FC | 	wrlong	local01, fp
07050     10 4E 85 F1 | 	sub	fp, #16
07054                 | ' 
07054                 | ' searchptr=programstart
07054                 | ' do
07054     3E 00 00 FF 
07058     BC E5 85 F1 | 	sub	objptr, ##32188
0705c                 | LR__0600
0705c     14 4E 05 F1 | 	add	fp, #20
07060     A7 12 02 F6 | 	mov	arg01, fp
07064     04 4E 85 F1 | 	sub	fp, #4
07068     A7 14 02 FB | 	rdlong	arg02, fp
0706c     10 4E 85 F1 | 	sub	fp, #16
07070     18 16 06 F6 | 	mov	arg03, #24
07074     34 EA B1 FD | 	call	#_psram_spin2_read1
07078     10 4E 05 F1 | 	add	fp, #16
0707c     A7 26 02 FB | 	rdlong	local01, fp
07080     08 4E 85 F1 | 	sub	fp, #8
07084     A7 26 62 FC | 	wrlong	local01, fp
07088     20 4E 05 F1 | 	add	fp, #32
0708c     A7 26 02 FB | 	rdlong	local01, fp
07090     18 4E 85 F1 | 	sub	fp, #24
07094     A7 26 62 FC | 	wrlong	local01, fp
07098     04 4E 05 F1 | 	add	fp, #4
0709c     A7 26 02 FB | 	rdlong	local01, fp
070a0     10 4E 85 F1 | 	sub	fp, #16
070a4     A7 16 02 FB | 	rdlong	arg03, fp
070a8     04 4E 85 F1 | 	sub	fp, #4
070ac     0B 27 12 F2 | 	cmp	local01, arg03 wc
070b0     28 4E 05 C1 |  if_b	add	fp, #40
070b4     A7 28 02 CB |  if_b	rdlong	local02, fp
070b8     28 4E 85 C1 |  if_b	sub	fp, #40
070bc     FF FF 3F CF 
070c0     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
070c4     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0600
070c8     0B 00 00 FF 
070cc     CC E4 85 F1 | 	sub	objptr, ##5836
070d0                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
070d0     14 4E 05 F1 | 	add	fp, #20
070d4     A7 26 02 FB | 	rdlong	local01, fp
070d8     10 4E 85 F1 | 	sub	fp, #16
070dc     A7 28 02 FB | 	rdlong	local02, fp
070e0     04 4E 85 F1 | 	sub	fp, #4
070e4     14 27 0A F2 | 	cmp	local01, local02 wz
070e8     01 FA 65 56 |  if_ne	neg	result1, #1
070ec     34 02 90 5D |  if_ne	jmp	#LR__0605
070f0     08 4E 05 F1 | 	add	fp, #8
070f4     A7 12 02 FB | 	rdlong	arg01, fp
070f8     08 4E 85 F1 | 	sub	fp, #8
070fc     01 14 66 F6 | 	neg	arg02, #1
07100     E4 BD B1 FD | 	call	#_pslpoke
07104                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
07104                 | ' 
07104                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
07104     28 4E 05 F1 | 	add	fp, #40
07108     A7 26 02 FB | 	rdlong	local01, fp
0710c     28 4E 85 F1 | 	sub	fp, #40
07110     FF FF 3F FF 
07114     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07118     24 4E 05 A1 |  if_e	add	fp, #36
0711c     A7 28 02 AB |  if_e	rdlong	local02, fp
07120     24 4E 85 A1 |  if_e	sub	fp, #36
07124     FF FF 7F AF 
07128     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
0712c     88 00 90 5D |  if_ne	jmp	#LR__0601
07130     4A 00 00 FF 
07134     88 E4 05 F1 | 	add	objptr, ##38024
07138     00 04 80 FF 
0713c     F2 00 68 FC | 	wrlong	##524288, objptr
07140     07 00 00 FF 
07144     2C E4 85 F1 | 	sub	objptr, ##3628
07148     00 04 80 FF 
0714c     F2 00 68 FC | 	wrlong	##524288, objptr
07150     07 00 00 FF 
07154     30 E4 05 F1 | 	add	objptr, ##3632
07158     F2 00 68 FC | 	wrlong	#0, objptr
0715c     04 E4 05 F1 | 	add	objptr, #4
07160     FF FF FF FF 
07164     F2 FE 6B FC | 	wrlong	##-1, objptr
07168     4A 00 00 FF 
0716c     90 E4 85 F1 | 	sub	objptr, ##38032
07170     00 12 06 F6 | 	mov	arg01, #0
07174     01 14 66 F6 | 	neg	arg02, #1
07178     6C BD B1 FD | 	call	#_pslpoke
0717c     10 12 06 F6 | 	mov	arg01, #16
07180     01 14 66 F6 | 	neg	arg02, #1
07184     60 BD B1 FD | 	call	#_pslpoke
07188     14 12 06 F6 | 	mov	arg01, #20
0718c     1E 14 CE F9 | 	bmask	arg02, #30
07190     54 BD B1 FD | 	call	#_pslpoke
07194     50 00 00 FF 
07198     B8 E4 05 F1 | 	add	objptr, ##41144
0719c     00 04 80 FF 
071a0     F2 00 68 FC | 	wrlong	##524288, objptr
071a4     04 E4 05 F1 | 	add	objptr, #4
071a8     00 04 80 FF 
071ac     F2 00 68 FC | 	wrlong	##524288, objptr
071b0     50 00 00 FF 
071b4     BC E4 85 F1 | 	sub	objptr, ##41148
071b8                 | LR__0601
071b8                 | ' 
071b8                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
071b8     28 4E 05 F1 | 	add	fp, #40
071bc     A7 26 02 FB | 	rdlong	local01, fp
071c0     28 4E 85 F1 | 	sub	fp, #40
071c4     FF FF 3F FF 
071c8     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
071cc     74 00 90 5D |  if_ne	jmp	#LR__0602
071d0     24 4E 05 F1 | 	add	fp, #36
071d4     A7 28 02 FB | 	rdlong	local02, fp
071d8     24 4E 85 F1 | 	sub	fp, #36
071dc     FF FF 7F FF 
071e0     FF 29 0E F2 | 	cmp	local02, ##-1 wz
071e4     5C 00 90 AD |  if_e	jmp	#LR__0602
071e8     24 4E 05 F1 | 	add	fp, #36
071ec     A7 12 02 FB | 	rdlong	arg01, fp
071f0     24 4E 85 F1 | 	sub	fp, #36
071f4     14 12 06 F1 | 	add	arg01, #20
071f8     1E 14 CE F9 | 	bmask	arg02, #30
071fc     E8 BC B1 FD | 	call	#_pslpoke
07200     24 4E 05 F1 | 	add	fp, #36
07204     A7 26 02 FB | 	rdlong	local01, fp
07208     4A 00 00 FF 
0720c     90 E4 05 F1 | 	add	objptr, ##38032
07210     F2 26 62 FC | 	wrlong	local01, objptr
07214     4A 00 00 FF 
07218     90 E4 85 F1 | 	sub	objptr, ##38032
0721c     A7 12 02 FB | 	rdlong	arg01, fp
07220     24 4E 85 F1 | 	sub	fp, #36
07224     F0 BD B1 FD | 	call	#_pslpeek
07228     4A 00 00 FF 
0722c     8C E4 05 F1 | 	add	objptr, ##38028
07230     F2 FA 61 FC | 	wrlong	result1, objptr
07234     4A 00 00 FF 
07238     8C E4 85 F1 | 	sub	objptr, ##38028
0723c                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
0723c                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
0723c                 | '   lastline=pslpeek(header(4))
0723c                 | '   return 0
0723c     00 FA 05 F6 | 	mov	result1, #0
07240     E0 00 90 FD | 	jmp	#LR__0605
07244                 | LR__0602
07244                 | ' 
07244                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
07244     28 4E 05 F1 | 	add	fp, #40
07248     A7 26 02 FB | 	rdlong	local01, fp
0724c     28 4E 85 F1 | 	sub	fp, #40
07250     FF FF 3F FF 
07254     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07258     58 00 90 AD |  if_e	jmp	#LR__0603
0725c     24 4E 05 F1 | 	add	fp, #36
07260     A7 28 02 FB | 	rdlong	local02, fp
07264     24 4E 85 F1 | 	sub	fp, #36
07268     FF FF 7F FF 
0726c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
07270     40 00 90 5D |  if_ne	jmp	#LR__0603
07274     28 4E 05 F1 | 	add	fp, #40
07278     A7 12 02 FB | 	rdlong	arg01, fp
0727c     28 4E 85 F1 | 	sub	fp, #40
07280     10 12 06 F1 | 	add	arg01, #16
07284     01 14 66 F6 | 	neg	arg02, #1
07288     5C BC B1 FD | 	call	#_pslpoke
0728c     28 4E 05 F1 | 	add	fp, #40
07290     A7 26 02 FB | 	rdlong	local01, fp
07294     28 4E 85 F1 | 	sub	fp, #40
07298     4A 00 00 FF 
0729c     88 E4 05 F1 | 	add	objptr, ##38024
072a0     F2 26 62 FC | 	wrlong	local01, objptr
072a4     4A 00 00 FF 
072a8     88 E4 85 F1 | 	sub	objptr, ##38024
072ac                 | ' '   print "deleted first line"
072ac                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
072ac                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
072ac                 | '   return 0
072ac     00 FA 05 F6 | 	mov	result1, #0
072b0     70 00 90 FD | 	jmp	#LR__0605
072b4                 | LR__0603
072b4                 | ' 
072b4                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
072b4     28 4E 05 F1 | 	add	fp, #40
072b8     A7 26 02 FB | 	rdlong	local01, fp
072bc     28 4E 85 F1 | 	sub	fp, #40
072c0     FF FF 3F FF 
072c4     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
072c8     24 4E 05 51 |  if_ne	add	fp, #36
072cc     A7 28 02 5B |  if_ne	rdlong	local02, fp
072d0     24 4E 85 51 |  if_ne	sub	fp, #36
072d4     FF FF 7F 5F 
072d8     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
072dc     40 00 90 AD |  if_e	jmp	#LR__0604
072e0     28 4E 05 F1 | 	add	fp, #40
072e4     A7 12 02 FB | 	rdlong	arg01, fp
072e8     10 12 06 F1 | 	add	arg01, #16
072ec     04 4E 85 F1 | 	sub	fp, #4
072f0     A7 14 02 FB | 	rdlong	arg02, fp
072f4     24 4E 85 F1 | 	sub	fp, #36
072f8     EC BB B1 FD | 	call	#_pslpoke
072fc     24 4E 05 F1 | 	add	fp, #36
07300     A7 12 02 FB | 	rdlong	arg01, fp
07304     14 12 06 F1 | 	add	arg01, #20
07308     04 4E 05 F1 | 	add	fp, #4
0730c     A7 14 02 FB | 	rdlong	arg02, fp
07310     28 4E 85 F1 | 	sub	fp, #40
07314     D0 BB B1 FD | 	call	#_pslpoke
07318                 | '    pslpoke(header(5)+16,header(4))  
07318                 | '    pslpoke(header(4)+20, header(5))
07318                 | '    return 0
07318     00 FA 05 F6 | 	mov	result1, #0
0731c     04 00 90 FD | 	jmp	#LR__0605
07320                 | LR__0604
07320     00 FA 05 F6 | 	mov	result1, #0
07324                 | LR__0605
07324     A7 F0 03 F6 | 	mov	ptra, fp
07328     B2 00 A0 FD | 	call	#popregs_
0732c                 | _deleteline_ret
0732c     2D 00 64 FD | 	ret
07330                 | 
07330                 | ' 
07330                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
07330                 | ' 
07330                 | ' sub save_line
07330                 | _save_line
07330     03 4A 05 F6 | 	mov	COUNT_, #3
07334     A8 00 A0 FD | 	call	#pushregs_
07338     4A 00 00 FF 
0733c     7C E4 05 F1 | 	add	objptr, ##38012
07340     F2 16 02 FB | 	rdlong	arg03, objptr
07344     01 16 06 F1 | 	add	arg03, #1
07348     05 00 00 FF 
0734c     18 E4 85 F1 | 	sub	objptr, ##2584
07350     F2 14 02 FB | 	rdlong	arg02, objptr
07354     0B 15 02 FD | 	qmul	arg02, arg03
07358     0E 00 00 FF 
0735c     44 E4 85 F1 | 	sub	objptr, ##7236
07360     F2 12 02 FB | 	rdlong	arg01, objptr
07364     37 00 00 FF 
07368     20 E4 85 F1 | 	sub	objptr, ##28192
0736c     09 27 02 F6 | 	mov	local01, arg01
07370     18 28 62 FD | 	getqx	local02
07374     97 06 48 FB | 	callpa	#(@LR__0611-@LR__0610)>>2,fcache_load_ptr_
07378                 | LR__0610
07378     13 FB C9 FA | 	rdbyte	result1, local01 wz
0737c     01 26 06 51 |  if_ne	add	local01, #1
07380     F4 FF 9F 5D |  if_ne	jmp	#LR__0610
07384                 | LR__0611
07384     09 27 82 F1 | 	sub	local01, arg01
07388     03 26 CE F7 | 	test	local01, #3 wz
0738c     02 26 46 50 |  if_ne	shr	local01, #2
07390     01 26 06 51 |  if_ne	add	local01, #1
07394     02 26 66 50 |  if_ne	shl	local01, #2
07398     14 2B 02 F6 | 	mov	local03, local02
0739c     13 2B 02 F1 | 	add	local03, local01
073a0     43 00 00 FF 
073a4     5C E4 05 F1 | 	add	objptr, ##34396
073a8     F2 16 02 FB | 	rdlong	arg03, objptr
073ac     14 17 02 F1 | 	add	arg03, local02
073b0     04 00 00 FF 
073b4     28 E4 05 F1 | 	add	objptr, ##2088
073b8     F2 16 62 FC | 	wrlong	arg03, objptr
073bc     04 E4 05 F1 | 	add	objptr, #4
073c0     F2 26 62 FC | 	wrlong	local01, objptr
073c4     0C E4 85 F1 | 	sub	objptr, #12
073c8     F2 12 02 F6 | 	mov	arg01, objptr
073cc     04 00 00 FF 
073d0     20 E4 85 F1 | 	sub	objptr, ##2080
073d4     F2 14 02 FB | 	rdlong	arg02, objptr
073d8     14 17 02 F6 | 	mov	arg03, local02
073dc     37 00 00 FF 
073e0     90 E5 85 F1 | 	sub	objptr, ##28560
073e4     60 E7 B1 FD | 	call	#_psram_spin2_write
073e8     2B 00 00 FF 
073ec     54 E5 05 F1 | 	add	objptr, ##22356
073f0     F2 12 02 FB | 	rdlong	arg01, objptr
073f4     0C 00 00 FF 
073f8     3C E4 05 F1 | 	add	objptr, ##6204
073fc     F2 14 02 FB | 	rdlong	arg02, objptr
07400     14 15 02 F1 | 	add	arg02, local02
07404     13 17 02 F6 | 	mov	arg03, local01
07408     37 00 00 FF 
0740c     90 E5 85 F1 | 	sub	objptr, ##28560
07410     34 E7 B1 FD | 	call	#_psram_spin2_write
07414     37 00 00 FF 
07418     90 E5 05 F1 | 	add	objptr, ##28560
0741c     F2 26 02 FB | 	rdlong	local01, objptr
07420     15 27 02 F1 | 	add	local01, local03
07424     F2 26 62 FC | 	wrlong	local01, objptr
07428     43 00 00 FF 
0742c     5C E4 85 F1 | 	sub	objptr, ##34396
07430     A7 F0 03 F6 | 	mov	ptra, fp
07434     B2 00 A0 FD | 	call	#popregs_
07438                 | _save_line_ret
07438     2D 00 64 FD | 	ret
0743c                 | 
0743c                 | ' 
0743c                 | ' '----- Insert a new line into the middle of the program
0743c                 | ' 
0743c                 | ' function insertline(aline as ulong) as integer
0743c                 | _insertline
0743c     02 4A 05 F6 | 	mov	COUNT_, #2
07440     A8 00 A0 FD | 	call	#pushregs_
07444     28 F0 07 F1 | 	add	ptra, #40
07448     04 4E 05 F1 | 	add	fp, #4
0744c     A7 12 62 FC | 	wrlong	arg01, fp
07450     4A 00 00 FF 
07454     88 E4 05 F1 | 	add	objptr, ##38024
07458     F2 26 02 FB | 	rdlong	local01, objptr
0745c     04 4E 05 F1 | 	add	fp, #4
07460     A7 26 62 FC | 	wrlong	local01, fp
07464     08 4E 85 F1 | 	sub	fp, #8
07468                 | ' 
07468                 | ' do
07468     3E 00 00 FF 
0746c     BC E5 85 F1 | 	sub	objptr, ##32188
07470                 | LR__0620
07470     10 4E 05 F1 | 	add	fp, #16
07474     A7 12 02 F6 | 	mov	arg01, fp
07478     08 4E 85 F1 | 	sub	fp, #8
0747c     A7 14 02 FB | 	rdlong	arg02, fp
07480     08 4E 85 F1 | 	sub	fp, #8
07484     18 16 06 F6 | 	mov	arg03, #24
07488     20 E6 B1 FD | 	call	#_psram_spin2_read1
0748c     08 4E 05 F1 | 	add	fp, #8
07490     A7 26 02 FB | 	rdlong	local01, fp
07494     04 4E 05 F1 | 	add	fp, #4
07498     A7 26 62 FC | 	wrlong	local01, fp
0749c     18 4E 05 F1 | 	add	fp, #24
074a0     A7 26 02 FB | 	rdlong	local01, fp
074a4     1C 4E 85 F1 | 	sub	fp, #28
074a8     A7 26 62 FC | 	wrlong	local01, fp
074ac     08 4E 05 F1 | 	add	fp, #8
074b0     A7 26 02 FB | 	rdlong	local01, fp
074b4     0C 4E 85 F1 | 	sub	fp, #12
074b8     A7 16 02 FB | 	rdlong	arg03, fp
074bc     04 4E 85 F1 | 	sub	fp, #4
074c0     0B 27 12 F2 | 	cmp	local01, arg03 wc
074c4     24 4E 05 C1 |  if_b	add	fp, #36
074c8     A7 28 02 CB |  if_b	rdlong	local02, fp
074cc     24 4E 85 C1 |  if_b	sub	fp, #36
074d0     FF FF 3F CF 
074d4     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
074d8     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0620
074dc     0B 00 00 FF 
074e0     CC E4 85 F1 | 	sub	objptr, ##5836
074e4                 | ' 
074e4                 | ' if header(0)=aline then return -1 				' delete it first
074e4     10 4E 05 F1 | 	add	fp, #16
074e8     A7 26 02 FB | 	rdlong	local01, fp
074ec     0C 4E 85 F1 | 	sub	fp, #12
074f0     A7 28 02 FB | 	rdlong	local02, fp
074f4     04 4E 85 F1 | 	sub	fp, #4
074f8     14 27 0A F2 | 	cmp	local01, local02 wz
074fc     01 FA 65 A6 |  if_e	neg	result1, #1
07500     48 01 90 AD |  if_e	jmp	#LR__0623
07504                 | ' if header(0)<aline then return -2 				' end of program reached
07504     10 4E 05 F1 | 	add	fp, #16
07508     A7 26 02 FB | 	rdlong	local01, fp
0750c     0C 4E 85 F1 | 	sub	fp, #12
07510     A7 16 02 FB | 	rdlong	arg03, fp
07514     04 4E 85 F1 | 	sub	fp, #4
07518     0B 27 12 F2 | 	cmp	local01, arg03 wc
0751c     02 FA 65 C6 |  if_b	neg	result1, #2
07520     28 01 90 CD |  if_b	jmp	#LR__0623
07524                 | ' 
07524                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
07524     20 4E 05 F1 | 	add	fp, #32
07528     A7 26 02 FB | 	rdlong	local01, fp
0752c     20 4E 85 F1 | 	sub	fp, #32
07530     FF FF 7F FF 
07534     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07538     78 00 90 5D |  if_ne	jmp	#LR__0621
0753c     43 00 00 FF 
07540     5C E4 05 F1 | 	add	objptr, ##34396
07544     F2 26 02 FB | 	rdlong	local01, objptr
07548     07 00 00 FF 
0754c     2C E4 05 F1 | 	add	objptr, ##3628
07550     F2 26 62 FC | 	wrlong	local01, objptr
07554     0C 4E 05 F1 | 	add	fp, #12
07558     A7 12 02 FB | 	rdlong	arg01, fp
0755c     0C 4E 85 F1 | 	sub	fp, #12
07560     10 12 06 F1 | 	add	arg01, #16
07564     07 00 00 FF 
07568     2C E4 85 F1 | 	sub	objptr, ##3628
0756c     F2 14 02 FB | 	rdlong	arg02, objptr
07570     43 00 00 FF 
07574     5C E4 85 F1 | 	sub	objptr, ##34396
07578     6C B9 B1 FD | 	call	#_pslpoke
0757c     47 00 00 FF 
07580     8C E4 05 F1 | 	add	objptr, ##36492
07584     FF FF FF FF 
07588     F2 FE 6B FC | 	wrlong	##-1, objptr
0758c     0C 4E 05 F1 | 	add	fp, #12
07590     A7 26 02 FB | 	rdlong	local01, fp
07594     0C 4E 85 F1 | 	sub	fp, #12
07598     04 E4 05 F1 | 	add	objptr, #4
0759c     F2 26 62 FC | 	wrlong	local01, objptr
075a0     47 00 00 FF 
075a4     90 E4 85 F1 | 	sub	objptr, ##36496
075a8     84 FD BF FD | 	call	#_save_line
075ac                 | '   programstart=programptr
075ac                 | '   pslpoke(lineptr2+16,programptr)
075ac                 | '   ucompiledline(4)=$FFFF_FFFF
075ac                 | '   ucompiledline(5)=lineptr2
075ac                 | '   save_line
075ac                 | '   return 0
075ac     00 FA 05 F6 | 	mov	result1, #0
075b0     98 00 90 FD | 	jmp	#LR__0623
075b4                 | LR__0621
075b4                 | ' 
075b4                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
075b4     20 4E 05 F1 | 	add	fp, #32
075b8     A7 26 02 FB | 	rdlong	local01, fp
075bc     20 4E 85 F1 | 	sub	fp, #32
075c0     FF FF 7F FF 
075c4     FF 27 0E F2 | 	cmp	local01, ##-1 wz
075c8     7C 00 90 AD |  if_e	jmp	#LR__0622
075cc     20 4E 05 F1 | 	add	fp, #32
075d0     A7 26 02 FB | 	rdlong	local01, fp
075d4     47 00 00 FF 
075d8     8C E4 05 F1 | 	add	objptr, ##36492
075dc     F2 26 62 FC | 	wrlong	local01, objptr
075e0     14 4E 85 F1 | 	sub	fp, #20
075e4     A7 26 02 FB | 	rdlong	local01, fp
075e8     04 E4 05 F1 | 	add	objptr, #4
075ec     F2 26 62 FC | 	wrlong	local01, objptr
075f0     A7 12 02 FB | 	rdlong	arg01, fp
075f4     0C 4E 85 F1 | 	sub	fp, #12
075f8     10 12 06 F1 | 	add	arg01, #16
075fc     04 00 00 FF 
07600     34 E4 85 F1 | 	sub	objptr, ##2100
07604     F2 14 02 FB | 	rdlong	arg02, objptr
07608     43 00 00 FF 
0760c     5C E4 85 F1 | 	sub	objptr, ##34396
07610     D4 B8 B1 FD | 	call	#_pslpoke
07614     20 4E 05 F1 | 	add	fp, #32
07618     A7 12 02 FB | 	rdlong	arg01, fp
0761c     20 4E 85 F1 | 	sub	fp, #32
07620     14 12 06 F1 | 	add	arg01, #20
07624     43 00 00 FF 
07628     5C E4 05 F1 | 	add	objptr, ##34396
0762c     F2 14 02 FB | 	rdlong	arg02, objptr
07630     43 00 00 FF 
07634     5C E4 85 F1 | 	sub	objptr, ##34396
07638     AC B8 B1 FD | 	call	#_pslpoke
0763c     F0 FC BF FD | 	call	#_save_line
07640                 | '   ucompiledline(4)=header(4)
07640                 | '   ucompiledline(5)=lineptr2
07640                 | '   pslpoke(lineptr2+16,programptr)
07640                 | '   pslpoke(header(4)+20,programptr)
07640                 | '   save_line
07640                 | '   return 0
07640     00 FA 05 F6 | 	mov	result1, #0
07644     04 00 90 FD | 	jmp	#LR__0623
07648                 | LR__0622
07648     00 FA 05 F6 | 	mov	result1, #0
0764c                 | LR__0623
0764c     A7 F0 03 F6 | 	mov	ptra, fp
07650     B2 00 A0 FD | 	call	#popregs_
07654                 | _insertline_ret
07654     2D 00 64 FD | 	ret
07658                 | 
07658                 | ' 
07658                 | ' '----- Adds a new line at the end of the program
07658                 | ' 
07658                 | ' sub add_line_at_end(aline) 
07658                 | _add_line_at_end
07658     4A 00 00 FF 
0765c     8C E4 05 F1 | 	add	objptr, ##38028
07660     F2 12 62 FC | 	wrlong	arg01, objptr
07664     04 E4 05 F1 | 	add	objptr, #4
07668     F2 14 02 FB | 	rdlong	arg02, objptr
0766c     03 00 00 FF 
07670     04 E4 85 F1 | 	sub	objptr, ##1540
07674     F2 14 62 FC | 	wrlong	arg02, objptr
07678     03 00 00 FF 
0767c     04 E4 05 F1 | 	add	objptr, ##1540
07680     F2 12 02 FB | 	rdlong	arg01, objptr
07684     14 12 06 F1 | 	add	arg01, #20
07688     07 00 00 FF 
0768c     34 E4 85 F1 | 	sub	objptr, ##3636
07690     F2 14 02 FB | 	rdlong	arg02, objptr
07694     43 00 00 FF 
07698     5C E4 85 F1 | 	sub	objptr, ##34396
0769c     48 B8 B1 FD | 	call	#_pslpoke
076a0     43 00 00 FF 
076a4     5C E4 05 F1 | 	add	objptr, ##34396
076a8     F2 14 02 FB | 	rdlong	arg02, objptr
076ac     07 00 00 FF 
076b0     34 E4 05 F1 | 	add	objptr, ##3636
076b4     F2 14 62 FC | 	wrlong	arg02, objptr
076b8     03 00 00 FF 
076bc     00 E4 85 F1 | 	sub	objptr, ##1536
076c0     FF FF BF FF 
076c4     F2 FE 6B FC | 	wrlong	##2147483647, objptr
076c8                 | ' 
076c8                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
076c8                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
076c8     04 00 00 FF 
076cc     34 E4 85 F1 | 	sub	objptr, ##2100
076d0     F2 14 02 FB | 	rdlong	arg02, objptr
076d4     43 00 00 FF 
076d8     5C E4 85 F1 | 	sub	objptr, ##34396
076dc     00 04 00 FF 
076e0     00 14 0E F2 | 	cmp	arg02, ##524288 wz
076e4     47 00 00 AF 
076e8     8C E4 05 A1 |  if_e	add	objptr, ##36492
076ec     FF FF FF AF 
076f0     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
076f4     47 00 00 AF 
076f8     8C E4 85 A1 |  if_e	sub	objptr, ##36492
076fc     30 FC BF FD | 	call	#_save_line
07700     43 00 00 FF 
07704     5C E4 05 F1 | 	add	objptr, ##34396
07708     F2 12 02 FB | 	rdlong	arg01, objptr
0770c     43 00 00 FF 
07710     5C E4 85 F1 | 	sub	objptr, ##34396
07714     01 14 66 F6 | 	neg	arg02, #1
07718     CC B7 B1 FD | 	call	#_pslpoke
0771c                 | _add_line_at_end_ret
0771c     2D 00 64 FD | 	ret
07720                 | 
07720                 | ' 
07720                 | ' '--------------------------------------------------------------------------------------------------------------------------
07720                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
07720                 | ' '--------------------------------------------------------------------------------------------------------------------------
07720                 | ' 
07720                 | ' '--------------------------------------------------------------------------------------------------------------------------
07720                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
07720                 | ' '--------------------------------------------------------------------------------------------------------------------------
07720                 | ' 
07720                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
07720                 | ' 
07720                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
07720                 | _compile_immediate
07720     0A 4A 05 F6 | 	mov	COUNT_, #10
07724     A8 00 A0 FD | 	call	#pushregs_
07728                 | _compile_immediate_enter
07728     09 2D 02 F6 | 	mov	local04, arg01
0772c     0A 2F 02 F6 | 	mov	local05, arg02
07730     00 30 06 F6 | 	mov	local06, #0
07734     00 32 06 F6 | 	mov	local07, #0
07738     00 34 06 F6 | 	mov	local08, #0
0773c                 | ' 
0773c                 | ' ' linetype=cont+1
0773c                 | ' ' 1 : this is the first part of the line that will continue
0773c                 | ' ' 2 - this is the continuation of the line
0773c                 | ' ' 3 - this is the last continued line
0773c                 | ' ' 4 - this is the one and only part
0773c                 | ' ' 5 - continued after if/else
0773c                 | ' 
0773c                 | ' err=0
0773c                 | ' cmd=0
0773c                 | ' vars=0
0773c                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
0773c     02 2C 0E F2 | 	cmp	local04, #2 wz
07740     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07744     24 00 90 5D |  if_ne	jmp	#LR__0630
07748     35 00 00 FF 
0774c     10 E4 05 F1 | 	add	objptr, ##27152
07750     F2 32 02 FB | 	rdlong	local07, objptr
07754     01 36 06 F6 | 	mov	local09, #1
07758     02 00 00 FF 
0775c     34 E4 05 F1 | 	add	objptr, ##1076
07760     F2 02 68 FC | 	wrlong	#1, objptr
07764     37 00 00 FF 
07768     44 E4 85 F1 | 	sub	objptr, ##28228
0776c                 | LR__0630
0776c                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
0776c     04 2C 0E F2 | 	cmp	local04, #4 wz
07770     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07774     30 00 90 5D |  if_ne	jmp	#LR__0631
07778     35 00 00 FF 
0777c     18 E4 05 F1 | 	add	objptr, ##27160
07780     F2 32 02 FB | 	rdlong	local07, objptr
07784     02 36 06 F6 | 	mov	local09, #2
07788     02 00 00 FF 
0778c     2C E4 05 F1 | 	add	objptr, ##1068
07790     F2 04 68 FC | 	wrlong	#2, objptr
07794     13 00 00 FF 
07798     38 E4 05 F1 | 	add	objptr, ##9784
0779c     F2 04 68 FC | 	wrlong	#2, objptr
077a0     4A 00 00 FF 
077a4     7C E4 85 F1 | 	sub	objptr, ##38012
077a8                 | LR__0631
077a8                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
077a8     05 2C 0E F2 | 	cmp	local04, #5 wz
077ac     40 00 90 5D |  if_ne	jmp	#LR__0632
077b0     37 00 00 FF 
077b4     44 E4 05 F1 | 	add	objptr, ##28228
077b8     F2 FC 01 FB | 	rdlong	result2, objptr
077bc     FE 36 02 F6 | 	mov	local09, result2
077c0     03 36 66 F0 | 	shl	local09, #3
077c4     02 00 00 FF 
077c8     38 E4 85 F1 | 	sub	objptr, ##1080
077cc     F2 36 02 F1 | 	add	local09, objptr
077d0     04 36 06 F1 | 	add	local09, #4
077d4     1B 33 02 FB | 	rdlong	local07, local09
077d8     01 FC 05 F1 | 	add	result2, #1
077dc     02 00 00 FF 
077e0     38 E4 05 F1 | 	add	objptr, ##1080
077e4     F2 FC 61 FC | 	wrlong	result2, objptr
077e8     37 00 00 FF 
077ec     44 E4 85 F1 | 	sub	objptr, ##28228
077f0                 | LR__0632
077f0                 | ' 
077f0                 | ' 'print  "In compile_immediate cmd=:", cmd
077f0                 | ' 451 select case cmd
077f0     5C 32 0E F2 | 	cmp	local07, #92 wz
077f4     C4 02 90 AD |  if_e	jmp	#LR__0633
077f8     B9 32 0E F2 | 	cmp	local07, #185 wz
077fc     C8 02 90 AD |  if_e	jmp	#LR__0634
07800     47 32 0E F2 | 	cmp	local07, #71 wz
07804     D0 02 90 AD |  if_e	jmp	#LR__0635
07808     59 32 0E F2 | 	cmp	local07, #89 wz
0780c     D8 02 90 AD |  if_e	jmp	#LR__0636
07810     C3 32 0E F2 | 	cmp	local07, #195 wz
07814     E0 02 90 AD |  if_e	jmp	#LR__0637
07818     45 32 0E F2 | 	cmp	local07, #69 wz
0781c     E4 02 90 AD |  if_e	jmp	#LR__0638
07820     69 32 0E F2 | 	cmp	local07, #105 wz
07824     EC 02 90 AD |  if_e	jmp	#LR__0639
07828     40 32 0E F2 | 	cmp	local07, #64 wz
0782c     C0 06 90 AD |  if_e	jmp	#LR__0712
07830     B4 32 0E F2 | 	cmp	local07, #180 wz
07834     E8 02 90 AD |  if_e	jmp	#LR__0640
07838     49 32 0E F2 | 	cmp	local07, #73 wz
0783c     EC 02 90 AD |  if_e	jmp	#LR__0641
07840     C4 32 0E F2 | 	cmp	local07, #196 wz
07844     F0 02 90 AD |  if_e	jmp	#LR__0642
07848     AE 32 0E F2 | 	cmp	local07, #174 wz
0784c     F4 02 90 AD |  if_e	jmp	#LR__0643
07850     B0 32 0E F2 | 	cmp	local07, #176 wz
07854     F8 02 90 AD |  if_e	jmp	#LR__0644
07858     AF 32 0E F2 | 	cmp	local07, #175 wz
0785c     FC 02 90 AD |  if_e	jmp	#LR__0645
07860     B1 32 0E F2 | 	cmp	local07, #177 wz
07864     00 03 90 AD |  if_e	jmp	#LR__0646
07868     68 32 0E F2 | 	cmp	local07, #104 wz
0786c     04 03 90 AD |  if_e	jmp	#LR__0647
07870     B7 32 0E F2 | 	cmp	local07, #183 wz
07874     78 06 90 AD |  if_e	jmp	#LR__0712
07878     74 32 0E F2 | 	cmp	local07, #116 wz
0787c     00 03 90 AD |  if_e	jmp	#LR__0648
07880     73 32 0E F2 | 	cmp	local07, #115 wz
07884     08 03 90 AD |  if_e	jmp	#LR__0649
07888     6C 32 0E F2 | 	cmp	local07, #108 wz
0788c     10 03 90 AD |  if_e	jmp	#LR__0650
07890     89 32 0E F2 | 	cmp	local07, #137 wz
07894     58 06 90 AD |  if_e	jmp	#LR__0712
07898     C2 32 0E F2 | 	cmp	local07, #194 wz
0789c     10 03 90 AD |  if_e	jmp	#LR__0651
078a0     72 32 0E F2 | 	cmp	local07, #114 wz
078a4     14 03 90 AD |  if_e	jmp	#LR__0652
078a8     5D 32 0E F2 | 	cmp	local07, #93 wz
078ac     18 03 90 AD |  if_e	jmp	#LR__0653
078b0     96 32 0E F2 | 	cmp	local07, #150 wz
078b4     20 03 90 AD |  if_e	jmp	#LR__0654
078b8     43 32 0E F2 | 	cmp	local07, #67 wz
078bc     24 03 90 AD |  if_e	jmp	#LR__0655
078c0     5A 32 0E F2 | 	cmp	local07, #90 wz
078c4     2C 03 90 AD |  if_e	jmp	#LR__0656
078c8     AB 32 0E F2 | 	cmp	local07, #171 wz
078cc     20 06 90 AD |  if_e	jmp	#LR__0712
078d0     BD 32 0E F2 | 	cmp	local07, #189 wz
078d4     2C 03 90 AD |  if_e	jmp	#LR__0657
078d8     BB 32 0E F2 | 	cmp	local07, #187 wz
078dc     34 03 90 AD |  if_e	jmp	#LR__0658
078e0     4E 32 0E F2 | 	cmp	local07, #78 wz
078e4     3C 03 90 AD |  if_e	jmp	#LR__0659
078e8     A9 32 0E F2 | 	cmp	local07, #169 wz
078ec     54 03 90 AD |  if_e	jmp	#LR__0661
078f0     46 32 0E F2 | 	cmp	local07, #70 wz
078f4     6C 03 90 AD |  if_e	jmp	#LR__0663
078f8     71 32 0E F2 | 	cmp	local07, #113 wz
078fc     74 03 90 AD |  if_e	jmp	#LR__0664
07900     60 32 0E F2 | 	cmp	local07, #96 wz
07904     78 03 90 AD |  if_e	jmp	#LR__0665
07908     4A 32 0E F2 | 	cmp	local07, #74 wz
0790c     7C 03 90 AD |  if_e	jmp	#LR__0666
07910     48 32 0E F2 | 	cmp	local07, #72 wz
07914     80 03 90 AD |  if_e	jmp	#LR__0667
07918     58 32 0E F2 | 	cmp	local07, #88 wz
0791c     88 03 90 AD |  if_e	jmp	#LR__0668
07920     5F 32 0E F2 | 	cmp	local07, #95 wz
07924     90 03 90 AD |  if_e	jmp	#LR__0669
07928     B5 32 0E F2 | 	cmp	local07, #181 wz
0792c     94 03 90 AD |  if_e	jmp	#LR__0670
07930     8A 32 0E F2 | 	cmp	local07, #138 wz
07934     9C 03 90 AD |  if_e	jmp	#LR__0671
07938     4C 32 0E F2 | 	cmp	local07, #76 wz
0793c     A0 03 90 AD |  if_e	jmp	#LR__0672
07940     52 32 0E F2 | 	cmp	local07, #82 wz
07944     A8 03 90 AD |  if_e	jmp	#LR__0673
07948     97 32 0E F2 | 	cmp	local07, #151 wz
0794c     B0 03 90 AD |  if_e	jmp	#LR__0674
07950     C6 32 0E F2 | 	cmp	local07, #198 wz
07954     B4 03 90 AD |  if_e	jmp	#LR__0675
07958     61 32 0E F2 | 	cmp	local07, #97 wz
0795c     B8 03 90 AD |  if_e	jmp	#LR__0676
07960     63 32 0E F2 | 	cmp	local07, #99 wz
07964     BC 03 90 AD |  if_e	jmp	#LR__0677
07968     41 32 0E F2 | 	cmp	local07, #65 wz
0796c     80 05 90 AD |  if_e	jmp	#LR__0712
07970     4B 32 0E F2 | 	cmp	local07, #75 wz
07974     B8 03 90 AD |  if_e	jmp	#LR__0678
07978     C1 32 0E F2 | 	cmp	local07, #193 wz
0797c     BC 03 90 AD |  if_e	jmp	#LR__0679
07980     B3 32 0E F2 | 	cmp	local07, #179 wz
07984     C0 03 90 AD |  if_e	jmp	#LR__0680
07988     5E 32 0E F2 | 	cmp	local07, #94 wz
0798c     C4 03 90 AD |  if_e	jmp	#LR__0681
07990     7C 32 0E F2 | 	cmp	local07, #124 wz
07994     C8 03 90 AD |  if_e	jmp	#LR__0682
07998     7D 32 0E F2 | 	cmp	local07, #125 wz
0799c     CC 03 90 AD |  if_e	jmp	#LR__0683
079a0     7E 32 0E F2 | 	cmp	local07, #126 wz
079a4     D0 03 90 AD |  if_e	jmp	#LR__0684
079a8     7F 32 0E F2 | 	cmp	local07, #127 wz
079ac     D4 03 90 AD |  if_e	jmp	#LR__0685
079b0     80 32 0E F2 | 	cmp	local07, #128 wz
079b4     D8 03 90 AD |  if_e	jmp	#LR__0686
079b8     55 32 0E F2 | 	cmp	local07, #85 wz
079bc     DC 03 90 AD |  if_e	jmp	#LR__0687
079c0     75 32 0E F2 | 	cmp	local07, #117 wz
079c4     E0 03 90 AD |  if_e	jmp	#LR__0688
079c8     42 32 0E F2 | 	cmp	local07, #66 wz
079cc     E8 03 90 AD |  if_e	jmp	#LR__0689
079d0     95 32 0E F2 | 	cmp	local07, #149 wz
079d4     F0 03 90 AD |  if_e	jmp	#LR__0690
079d8     AC 32 0E F2 | 	cmp	local07, #172 wz
079dc     10 05 90 AD |  if_e	jmp	#LR__0712
079e0     81 32 0E F2 | 	cmp	local07, #129 wz
079e4     EC 03 90 AD |  if_e	jmp	#LR__0691
079e8     44 32 0E F2 | 	cmp	local07, #68 wz
079ec     F0 03 90 AD |  if_e	jmp	#LR__0692
079f0     BC 32 0E F2 | 	cmp	local07, #188 wz
079f4     F4 03 90 AD |  if_e	jmp	#LR__0693
079f8     88 32 0E F2 | 	cmp	local07, #136 wz
079fc     F0 04 90 AD |  if_e	jmp	#LR__0712
07a00     B6 32 0E F2 | 	cmp	local07, #182 wz
07a04     F4 03 90 AD |  if_e	jmp	#LR__0694
07a08     92 32 0E F2 | 	cmp	local07, #146 wz
07a0c     FC 03 90 AD |  if_e	jmp	#LR__0695
07a10     BE 32 0E F2 | 	cmp	local07, #190 wz
07a14     94 05 90 AD |  if_e	jmp	#LR__0713
07a18     C7 32 0E F2 | 	cmp	local07, #199 wz
07a1c     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
07a20     CC 04 90 AD |  if_e	jmp	#LR__0712
07a24     4D 32 0E F2 | 	cmp	local07, #77 wz
07a28     EC 03 90 AD |  if_e	jmp	#LR__0696
07a2c     51 32 0E F2 | 	cmp	local07, #81 wz
07a30     F4 03 90 AD |  if_e	jmp	#LR__0697
07a34     8E 32 0E F2 | 	cmp	local07, #142 wz
07a38     FC 03 90 AD |  if_e	jmp	#LR__0698
07a3c     90 32 0E F2 | 	cmp	local07, #144 wz
07a40     00 04 90 AD |  if_e	jmp	#LR__0699
07a44     8D 32 0E F2 | 	cmp	local07, #141 wz
07a48     04 04 90 AD |  if_e	jmp	#LR__0700
07a4c     8C 32 0E F2 | 	cmp	local07, #140 wz
07a50     08 04 90 AD |  if_e	jmp	#LR__0701
07a54     91 32 0E F2 | 	cmp	local07, #145 wz
07a58     0C 04 90 AD |  if_e	jmp	#LR__0702
07a5c     8B 32 0E F2 | 	cmp	local07, #139 wz
07a60     10 04 90 AD |  if_e	jmp	#LR__0703
07a64     8F 32 0E F2 | 	cmp	local07, #143 wz
07a68     14 04 90 AD |  if_e	jmp	#LR__0704
07a6c     B2 32 0E F2 | 	cmp	local07, #178 wz
07a70     18 04 90 AD |  if_e	jmp	#LR__0705
07a74     6D 32 0E F2 | 	cmp	local07, #109 wz
07a78     20 04 90 AD |  if_e	jmp	#LR__0706
07a7c     70 32 0E F2 | 	cmp	local07, #112 wz
07a80     6C 04 90 AD |  if_e	jmp	#LR__0712
07a84     56 32 0E F2 | 	cmp	local07, #86 wz
07a88     1C 04 90 AD |  if_e	jmp	#LR__0707
07a8c     57 32 0E F2 | 	cmp	local07, #87 wz
07a90     5C 04 90 AD |  if_e	jmp	#LR__0712
07a94     79 32 0E F2 | 	cmp	local07, #121 wz
07a98     18 04 90 AD |  if_e	jmp	#LR__0708
07a9c     77 32 0E F2 | 	cmp	local07, #119 wz
07aa0     1C 04 90 AD |  if_e	jmp	#LR__0709
07aa4     78 32 0E F2 | 	cmp	local07, #120 wz
07aa8     20 04 90 AD |  if_e	jmp	#LR__0710
07aac     01 00 00 FF 
07ab0     04 32 0E F2 | 	cmp	local07, ##516 wz
07ab4     20 04 90 AD |  if_e	jmp	#LR__0711
07ab8     F0 04 90 FD | 	jmp	#LR__0713
07abc                 | LR__0633
07abc     3C 0B B0 FD | 	call	#_compile_fun_2p
07ac0     FD 30 02 F6 | 	mov	local06, result1
07ac4     28 04 90 FD | 	jmp	#LR__0712
07ac8                 | LR__0634
07ac8     00 0E B0 FD | 	call	#_compile_fun_varp
07acc     FD 34 02 F6 | 	mov	local08, result1
07ad0     FE 30 02 F6 | 	mov	local06, result2
07ad4     18 04 90 FD | 	jmp	#LR__0712
07ad8                 | LR__0635
07ad8     F0 0D B0 FD | 	call	#_compile_fun_varp
07adc     FD 34 02 F6 | 	mov	local08, result1
07ae0     FE 30 02 F6 | 	mov	local06, result2
07ae4     08 04 90 FD | 	jmp	#LR__0712
07ae8                 | LR__0636
07ae8     E0 0D B0 FD | 	call	#_compile_fun_varp
07aec     FD 34 02 F6 | 	mov	local08, result1
07af0     FE 30 02 F6 | 	mov	local06, result2
07af4     F8 03 90 FD | 	jmp	#LR__0712
07af8                 | LR__0637
07af8                 | ' return expr()
07af8     3C 42 B0 FD | 	call	#_expr
07afc     FD 30 02 F6 | 	mov	local06, result1
07b00     EC 03 90 FD | 	jmp	#LR__0712
07b04                 | LR__0638
07b04     C4 0D B0 FD | 	call	#_compile_fun_varp
07b08     FD 34 02 F6 | 	mov	local08, result1
07b0c     FE 30 02 F6 | 	mov	local06, result2
07b10     DC 03 90 FD | 	jmp	#LR__0712
07b14                 | LR__0639
07b14                 | ' return expr()
07b14     20 42 B0 FD | 	call	#_expr
07b18     FD 30 02 F6 | 	mov	local06, result1
07b1c     D0 03 90 FD | 	jmp	#LR__0712
07b20                 | LR__0640
07b20                 | ' return expr()
07b20     14 42 B0 FD | 	call	#_expr
07b24     FD 30 02 F6 | 	mov	local06, result1
07b28     C4 03 90 FD | 	jmp	#LR__0712
07b2c                 | LR__0641
07b2c                 | ' return expr()
07b2c     08 42 B0 FD | 	call	#_expr
07b30     FD 30 02 F6 | 	mov	local06, result1
07b34     B8 03 90 FD | 	jmp	#LR__0712
07b38                 | LR__0642
07b38     C0 0A B0 FD | 	call	#_compile_fun_2p
07b3c     FD 30 02 F6 | 	mov	local06, result1
07b40     AC 03 90 FD | 	jmp	#LR__0712
07b44                 | LR__0643
07b44     B4 0A B0 FD | 	call	#_compile_fun_2p
07b48     FD 30 02 F6 | 	mov	local06, result1
07b4c     A0 03 90 FD | 	jmp	#LR__0712
07b50                 | LR__0644
07b50     A8 0A B0 FD | 	call	#_compile_fun_2p
07b54     FD 30 02 F6 | 	mov	local06, result1
07b58     94 03 90 FD | 	jmp	#LR__0712
07b5c                 | LR__0645
07b5c     9C 0A B0 FD | 	call	#_compile_fun_2p
07b60     FD 30 02 F6 | 	mov	local06, result1
07b64     88 03 90 FD | 	jmp	#LR__0712
07b68                 | LR__0646
07b68     90 0A B0 FD | 	call	#_compile_fun_2p
07b6c     FD 30 02 F6 | 	mov	local06, result1
07b70     7C 03 90 FD | 	jmp	#LR__0712
07b74                 | LR__0647
07b74                 | ' return expr()
07b74     C0 41 B0 FD | 	call	#_expr
07b78     FD 30 02 F6 | 	mov	local06, result1
07b7c     70 03 90 FD | 	jmp	#LR__0712
07b80                 | LR__0648
07b80     48 0D B0 FD | 	call	#_compile_fun_varp
07b84     FD 34 02 F6 | 	mov	local08, result1
07b88     FE 30 02 F6 | 	mov	local06, result2
07b8c     60 03 90 FD | 	jmp	#LR__0712
07b90                 | LR__0649
07b90     38 0D B0 FD | 	call	#_compile_fun_varp
07b94     FD 34 02 F6 | 	mov	local08, result1
07b98     FE 30 02 F6 | 	mov	local06, result2
07b9c     50 03 90 FD | 	jmp	#LR__0712
07ba0                 | LR__0650
07ba0     28 0D B0 FD | 	call	#_compile_fun_varp
07ba4     FD 34 02 F6 | 	mov	local08, result1
07ba8     FE 30 02 F6 | 	mov	local06, result2
07bac     40 03 90 FD | 	jmp	#LR__0712
07bb0                 | LR__0651
07bb0                 | ' return expr()
07bb0     84 41 B0 FD | 	call	#_expr
07bb4     FD 30 02 F6 | 	mov	local06, result1
07bb8     34 03 90 FD | 	jmp	#LR__0712
07bbc                 | LR__0652
07bbc     30 22 B0 FD | 	call	#_compile_dim
07bc0     FD 30 02 F6 | 	mov	local06, result1
07bc4     E4 03 90 FD | 	jmp	#LR__0713
07bc8                 | LR__0653
07bc8     00 0D B0 FD | 	call	#_compile_fun_varp
07bcc     FD 34 02 F6 | 	mov	local08, result1
07bd0     FE 30 02 F6 | 	mov	local06, result2
07bd4     18 03 90 FD | 	jmp	#LR__0712
07bd8                 | LR__0654
07bd8     20 0A B0 FD | 	call	#_compile_fun_2p
07bdc     FD 30 02 F6 | 	mov	local06, result1
07be0     0C 03 90 FD | 	jmp	#LR__0712
07be4                 | LR__0655
07be4     E4 0C B0 FD | 	call	#_compile_fun_varp
07be8     FD 34 02 F6 | 	mov	local08, result1
07bec     FE 30 02 F6 | 	mov	local06, result2
07bf0     FC 02 90 FD | 	jmp	#LR__0712
07bf4                 | LR__0656
07bf4     17 13 02 F6 | 	mov	arg01, local05
07bf8     BC 20 B0 FD | 	call	#_compile_else
07bfc     FD 30 02 F6 | 	mov	local06, result1
07c00     A8 03 90 FD | 	jmp	#LR__0713
07c04                 | LR__0657
07c04     C4 0C B0 FD | 	call	#_compile_fun_varp
07c08     FD 34 02 F6 | 	mov	local08, result1
07c0c     FE 30 02 F6 | 	mov	local06, result2
07c10     DC 02 90 FD | 	jmp	#LR__0712
07c14                 | LR__0658
07c14     B4 0C B0 FD | 	call	#_compile_fun_varp
07c18     FD 34 02 F6 | 	mov	local08, result1
07c1c     FE 30 02 F6 | 	mov	local06, result2
07c20     CC 02 90 FD | 	jmp	#LR__0712
07c24                 | LR__0659
07c24     01 2E 16 F2 | 	cmp	local05, #1 wc
07c28     08 00 90 CD |  if_b	jmp	#LR__0660
07c2c     5C 33 B0 FD | 	call	#_compile_goto
07c30     78 03 90 FD | 	jmp	#LR__0713
07c34                 | LR__0660
07c34     19 12 06 F6 | 	mov	arg01, #25
07c38     00 14 06 F6 | 	mov	arg02, #0
07c3c     08 B1 B1 FD | 	call	#_printerror
07c40     68 03 90 FD | 	jmp	#LR__0713
07c44                 | LR__0661
07c44     01 2E 16 F2 | 	cmp	local05, #1 wc
07c48     08 00 90 CD |  if_b	jmp	#LR__0662
07c4c     D8 32 B0 FD | 	call	#_compile_gosub
07c50     58 03 90 FD | 	jmp	#LR__0713
07c54                 | LR__0662
07c54     19 12 06 F6 | 	mov	arg01, #25
07c58     00 14 06 F6 | 	mov	arg02, #0
07c5c     E8 B0 B1 FD | 	call	#_printerror
07c60     48 03 90 FD | 	jmp	#LR__0713
07c64                 | LR__0663
07c64     64 0C B0 FD | 	call	#_compile_fun_varp
07c68     FD 34 02 F6 | 	mov	local08, result1
07c6c     FE 30 02 F6 | 	mov	local06, result2
07c70     7C 02 90 FD | 	jmp	#LR__0712
07c74                 | LR__0664
07c74     FC 0A B0 FD | 	call	#_compile_fun_4p
07c78     FD 30 02 F6 | 	mov	local06, result1
07c7c     70 02 90 FD | 	jmp	#LR__0712
07c80                 | LR__0665
07c80                 | ' return expr()
07c80     B4 40 B0 FD | 	call	#_expr
07c84     FD 30 02 F6 | 	mov	local06, result1
07c88     64 02 90 FD | 	jmp	#LR__0712
07c8c                 | LR__0666
07c8c     34 28 B0 FD | 	call	#_compile_for
07c90     FD 30 02 F6 | 	mov	local06, result1
07c94     14 03 90 FD | 	jmp	#LR__0713
07c98                 | LR__0667
07c98     30 0C B0 FD | 	call	#_compile_fun_varp
07c9c     FD 34 02 F6 | 	mov	local08, result1
07ca0     FE 30 02 F6 | 	mov	local06, result2
07ca4     48 02 90 FD | 	jmp	#LR__0712
07ca8                 | LR__0668
07ca8     17 13 02 F6 | 	mov	arg01, local05
07cac     80 1E B0 FD | 	call	#_compile_if
07cb0     FD 30 02 F6 | 	mov	local06, result1
07cb4     F4 02 90 FD | 	jmp	#LR__0713
07cb8                 | LR__0669
07cb8                 | ' return expr()
07cb8     7C 40 B0 FD | 	call	#_expr
07cbc     FD 30 02 F6 | 	mov	local06, result1
07cc0     2C 02 90 FD | 	jmp	#LR__0712
07cc4                 | LR__0670
07cc4     D0 0D B0 FD | 	call	#_compile_input
07cc8     FD 34 02 F6 | 	mov	local08, result1
07ccc     FE 30 02 F6 | 	mov	local06, result2
07cd0     1C 02 90 FD | 	jmp	#LR__0712
07cd4                 | LR__0671
07cd4                 | ' return expr()
07cd4     60 40 B0 FD | 	call	#_expr
07cd8     FD 30 02 F6 | 	mov	local06, result1
07cdc     10 02 90 FD | 	jmp	#LR__0712
07ce0                 | LR__0672
07ce0     E8 0B B0 FD | 	call	#_compile_fun_varp
07ce4     FD 34 02 F6 | 	mov	local08, result1
07ce8     FE 30 02 F6 | 	mov	local06, result2
07cec     00 02 90 FD | 	jmp	#LR__0712
07cf0                 | LR__0673
07cf0     D8 0B B0 FD | 	call	#_compile_fun_varp
07cf4     FD 34 02 F6 | 	mov	local08, result1
07cf8     FE 30 02 F6 | 	mov	local06, result2
07cfc     F0 01 90 FD | 	jmp	#LR__0712
07d00                 | LR__0674
07d00     F8 08 B0 FD | 	call	#_compile_fun_2p
07d04     FD 30 02 F6 | 	mov	local06, result1
07d08     E4 01 90 FD | 	jmp	#LR__0712
07d0c                 | LR__0675
07d0c                 | ' return expr()
07d0c     28 40 B0 FD | 	call	#_expr
07d10     FD 30 02 F6 | 	mov	local06, result1
07d14     D8 01 90 FD | 	jmp	#LR__0712
07d18                 | LR__0676
07d18                 | ' return expr()
07d18     1C 40 B0 FD | 	call	#_expr
07d1c     FD 30 02 F6 | 	mov	local06, result1
07d20     CC 01 90 FD | 	jmp	#LR__0712
07d24                 | LR__0677
07d24                 | ' return expr()
07d24     10 40 B0 FD | 	call	#_expr
07d28     FD 30 02 F6 | 	mov	local06, result1
07d2c     C0 01 90 FD | 	jmp	#LR__0712
07d30                 | LR__0678
07d30     5C 30 B0 FD | 	call	#_compile_next
07d34     FD 30 02 F6 | 	mov	local06, result1
07d38     70 02 90 FD | 	jmp	#LR__0713
07d3c                 | LR__0679
07d3c     3C 36 B0 FD | 	call	#_compile_on
07d40     FD 30 02 F6 | 	mov	local06, result1
07d44     64 02 90 FD | 	jmp	#LR__0713
07d48                 | LR__0680
07d48     38 09 B0 FD | 	call	#_compile_fun_3p
07d4c     FD 30 02 F6 | 	mov	local06, result1
07d50     9C 01 90 FD | 	jmp	#LR__0712
07d54                 | LR__0681
07d54                 | ' return expr()
07d54     E0 3F B0 FD | 	call	#_expr
07d58     FD 30 02 F6 | 	mov	local06, result1
07d5c     90 01 90 FD | 	jmp	#LR__0712
07d60                 | LR__0682
07d60                 | ' return expr()
07d60     D4 3F B0 FD | 	call	#_expr
07d64     FD 30 02 F6 | 	mov	local06, result1
07d68     84 01 90 FD | 	jmp	#LR__0712
07d6c                 | LR__0683
07d6c                 | ' return expr()
07d6c     C8 3F B0 FD | 	call	#_expr
07d70     FD 30 02 F6 | 	mov	local06, result1
07d74     78 01 90 FD | 	jmp	#LR__0712
07d78                 | LR__0684
07d78                 | ' return expr()
07d78     BC 3F B0 FD | 	call	#_expr
07d7c     FD 30 02 F6 | 	mov	local06, result1
07d80     6C 01 90 FD | 	jmp	#LR__0712
07d84                 | LR__0685
07d84     EC 09 B0 FD | 	call	#_compile_fun_4p
07d88     FD 30 02 F6 | 	mov	local06, result1
07d8c     60 01 90 FD | 	jmp	#LR__0712
07d90                 | LR__0686
07d90                 | ' return expr()
07d90     A4 3F B0 FD | 	call	#_expr
07d94     FD 30 02 F6 | 	mov	local06, result1
07d98     54 01 90 FD | 	jmp	#LR__0712
07d9c                 | LR__0687
07d9c     5C 08 B0 FD | 	call	#_compile_fun_2p
07da0     FD 30 02 F6 | 	mov	local06, result1
07da4     48 01 90 FD | 	jmp	#LR__0712
07da8                 | LR__0688
07da8     20 0B B0 FD | 	call	#_compile_fun_varp
07dac     FD 34 02 F6 | 	mov	local08, result1
07db0     FE 30 02 F6 | 	mov	local06, result2
07db4     38 01 90 FD | 	jmp	#LR__0712
07db8                 | LR__0689
07db8     10 0B B0 FD | 	call	#_compile_fun_varp
07dbc     FD 34 02 F6 | 	mov	local08, result1
07dc0     FE 30 02 F6 | 	mov	local06, result2
07dc4     28 01 90 FD | 	jmp	#LR__0712
07dc8                 | LR__0690
07dc8     30 08 B0 FD | 	call	#_compile_fun_2p
07dcc     FD 30 02 F6 | 	mov	local06, result1
07dd0     1C 01 90 FD | 	jmp	#LR__0712
07dd4                 | LR__0691
07dd4     24 08 B0 FD | 	call	#_compile_fun_2p
07dd8     FD 30 02 F6 | 	mov	local06, result1
07ddc     10 01 90 FD | 	jmp	#LR__0712
07de0                 | LR__0692
07de0     74 16 B0 FD | 	call	#_compile_print
07de4     FD 30 02 F6 | 	mov	local06, result1
07de8     C0 01 90 FD | 	jmp	#LR__0713
07dec                 | LR__0693
07dec     DC 0A B0 FD | 	call	#_compile_fun_varp
07df0     FD 34 02 F6 | 	mov	local08, result1
07df4     FE 30 02 F6 | 	mov	local06, result2
07df8     F4 00 90 FD | 	jmp	#LR__0712
07dfc                 | LR__0694
07dfc     A8 0B B0 FD | 	call	#_compile_read
07e00     FD 34 02 F6 | 	mov	local08, result1
07e04     FE 30 02 F6 | 	mov	local06, result2
07e08     E4 00 90 FD | 	jmp	#LR__0712
07e0c                 | LR__0695
07e0c                 | ' return expr()
07e0c     28 3F B0 FD | 	call	#_expr
07e10     FD 30 02 F6 | 	mov	local06, result1
07e14     D8 00 90 FD | 	jmp	#LR__0712
07e18                 | LR__0696
07e18     B0 0A B0 FD | 	call	#_compile_fun_varp
07e1c     FD 34 02 F6 | 	mov	local08, result1
07e20     FE 30 02 F6 | 	mov	local06, result2
07e24     C8 00 90 FD | 	jmp	#LR__0712
07e28                 | LR__0697
07e28     A0 0A B0 FD | 	call	#_compile_fun_varp
07e2c     FD 34 02 F6 | 	mov	local08, result1
07e30     FE 30 02 F6 | 	mov	local06, result2
07e34     B8 00 90 FD | 	jmp	#LR__0712
07e38                 | LR__0698
07e38     C0 07 B0 FD | 	call	#_compile_fun_2p
07e3c     FD 30 02 F6 | 	mov	local06, result1
07e40     AC 00 90 FD | 	jmp	#LR__0712
07e44                 | LR__0699
07e44     B4 07 B0 FD | 	call	#_compile_fun_2p
07e48     FD 30 02 F6 | 	mov	local06, result1
07e4c     A0 00 90 FD | 	jmp	#LR__0712
07e50                 | LR__0700
07e50     A8 07 B0 FD | 	call	#_compile_fun_2p
07e54     FD 30 02 F6 | 	mov	local06, result1
07e58     94 00 90 FD | 	jmp	#LR__0712
07e5c                 | LR__0701
07e5c     9C 07 B0 FD | 	call	#_compile_fun_2p
07e60     FD 30 02 F6 | 	mov	local06, result1
07e64     88 00 90 FD | 	jmp	#LR__0712
07e68                 | LR__0702
07e68     90 07 B0 FD | 	call	#_compile_fun_2p
07e6c     FD 30 02 F6 | 	mov	local06, result1
07e70     7C 00 90 FD | 	jmp	#LR__0712
07e74                 | LR__0703
07e74     84 07 B0 FD | 	call	#_compile_fun_2p
07e78     FD 30 02 F6 | 	mov	local06, result1
07e7c     70 00 90 FD | 	jmp	#LR__0712
07e80                 | LR__0704
07e80     78 07 B0 FD | 	call	#_compile_fun_2p
07e84     FD 30 02 F6 | 	mov	local06, result1
07e88     64 00 90 FD | 	jmp	#LR__0712
07e8c                 | LR__0705
07e8c     3C 0A B0 FD | 	call	#_compile_fun_varp
07e90     FD 34 02 F6 | 	mov	local08, result1
07e94     FE 30 02 F6 | 	mov	local06, result2
07e98     54 00 90 FD | 	jmp	#LR__0712
07e9c                 | LR__0706
07e9c     E4 07 B0 FD | 	call	#_compile_fun_3p
07ea0     FD 30 02 F6 | 	mov	local06, result1
07ea4     48 00 90 FD | 	jmp	#LR__0712
07ea8                 | LR__0707
07ea8                 | ' return expr()
07ea8     8C 3E B0 FD | 	call	#_expr
07eac     FD 30 02 F6 | 	mov	local06, result1
07eb0     3C 00 90 FD | 	jmp	#LR__0712
07eb4                 | LR__0708
07eb4     44 07 B0 FD | 	call	#_compile_fun_2p
07eb8     FD 30 02 F6 | 	mov	local06, result1
07ebc     30 00 90 FD | 	jmp	#LR__0712
07ec0                 | LR__0709
07ec0     38 07 B0 FD | 	call	#_compile_fun_2p
07ec4     FD 30 02 F6 | 	mov	local06, result1
07ec8     24 00 90 FD | 	jmp	#LR__0712
07ecc                 | LR__0710
07ecc     2C 07 B0 FD | 	call	#_compile_fun_2p
07ed0     FD 30 02 F6 | 	mov	local06, result1
07ed4     18 00 90 FD | 	jmp	#LR__0712
07ed8                 | LR__0711
07ed8     1C 13 B0 FD | 	call	#_compile_array_assign
07edc     FD 30 02 F6 | 	mov	local06, result1
07ee0     0E 30 0E F2 | 	cmp	local06, #14 wz
07ee4     C4 00 90 5D |  if_ne	jmp	#LR__0713
07ee8                 | ' return 23
07ee8     17 30 06 F6 | 	mov	local06, #23
07eec     BC 00 90 FD | 	jmp	#LR__0713
07ef0                 | ' return 23
07ef0                 | LR__0712
07ef0     19 2B 02 F6 | 	mov	local03, local07
07ef4     1A 27 02 F6 | 	mov	local01, local08
07ef8     13 37 02 F6 | 	mov	local09, local01
07efc     14 39 02 F6 | 	mov	local10, local02
07f00     15 33 02 F6 | 	mov	local07, local03
07f04     4A 00 00 FF 
07f08     7C E4 05 F1 | 	add	objptr, ##38012
07f0c     F2 26 02 FB | 	rdlong	local01, objptr
07f10     13 35 02 F6 | 	mov	local08, local01
07f14     01 34 66 F0 | 	shl	local08, #1
07f18     13 35 02 F1 | 	add	local08, local01
07f1c     02 34 66 F0 | 	shl	local08, #2
07f20     03 00 00 FF 
07f24     00 E4 85 F1 | 	sub	objptr, ##1536
07f28     F2 34 02 F1 | 	add	local08, objptr
07f2c     1A 37 62 FC | 	wrlong	local09, local08
07f30     03 00 00 FF 
07f34     00 E4 05 F1 | 	add	objptr, ##1536
07f38     F2 26 02 FB | 	rdlong	local01, objptr
07f3c     13 37 02 F6 | 	mov	local09, local01
07f40     01 36 66 F0 | 	shl	local09, #1
07f44     13 37 02 F1 | 	add	local09, local01
07f48     02 36 66 F0 | 	shl	local09, #2
07f4c     03 00 00 FF 
07f50     00 E4 85 F1 | 	sub	objptr, ##1536
07f54     F2 36 02 F1 | 	add	local09, objptr
07f58     04 36 06 F1 | 	add	local09, #4
07f5c     1B 39 62 FC | 	wrlong	local10, local09
07f60     03 00 00 FF 
07f64     00 E4 05 F1 | 	add	objptr, ##1536
07f68     F2 26 02 FB | 	rdlong	local01, objptr
07f6c     13 39 02 F6 | 	mov	local10, local01
07f70     01 38 66 F0 | 	shl	local10, #1
07f74     13 39 02 F1 | 	add	local10, local01
07f78     02 38 66 F0 | 	shl	local10, #2
07f7c     03 00 00 FF 
07f80     00 E4 85 F1 | 	sub	objptr, ##1536
07f84     F2 38 02 F1 | 	add	local10, objptr
07f88     08 38 06 F1 | 	add	local10, #8
07f8c     1C 33 62 FC | 	wrlong	local07, local10
07f90     03 00 00 FF 
07f94     00 E4 05 F1 | 	add	objptr, ##1536
07f98     F2 36 02 FB | 	rdlong	local09, objptr
07f9c     01 36 06 F1 | 	add	local09, #1
07fa0     F2 36 62 FC | 	wrlong	local09, objptr
07fa4     4A 00 00 FF 
07fa8     7C E4 85 F1 | 	sub	objptr, ##38012
07fac                 | LR__0713
07fac                 | ' 
07fac                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07fac                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07fac     03 2C 0E F2 | 	cmp	local04, #3 wz
07fb0     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07fb4     38 00 90 5D |  if_ne	jmp	#LR__0714
07fb8     4A 00 00 FF 
07fbc     7C E4 05 F1 | 	add	objptr, ##38012
07fc0     F2 38 02 FB | 	rdlong	local10, objptr
07fc4     1C 27 02 F6 | 	mov	local01, local10
07fc8     01 26 66 F0 | 	shl	local01, #1
07fcc     1C 27 02 F1 | 	add	local01, local10
07fd0     02 26 66 F0 | 	shl	local01, #2
07fd4     03 00 00 FF 
07fd8     00 E4 85 F1 | 	sub	objptr, ##1536
07fdc     F2 26 02 F1 | 	add	local01, objptr
07fe0     08 26 06 F1 | 	add	local01, #8
07fe4     13 FD 6B FC | 	wrlong	#510, local01
07fe8     47 00 00 FF 
07fec     7C E4 85 F1 | 	sub	objptr, ##36476
07ff0                 | LR__0714
07ff0                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
07ff0                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07ff0     4A 00 00 FF 
07ff4     7C E4 05 F1 | 	add	objptr, ##38012
07ff8     F2 26 02 FB | 	rdlong	local01, objptr
07ffc     4A 00 00 FF 
08000     7C E4 85 F1 | 	sub	objptr, ##38012
08004     97 58 48 FB | 	callpa	#(@LR__0717-@LR__0715)>>2,fcache_load_ptr_
08008                 | LR__0715
08008     13 39 02 F6 | 	mov	local10, local01
0800c     01 38 66 F0 | 	shl	local10, #1
08010     13 39 02 F1 | 	add	local10, local01
08014     02 38 66 F0 | 	shl	local10, #2
08018     47 00 00 FF 
0801c     7C E4 05 F1 | 	add	objptr, ##36476
08020     F2 38 02 F1 | 	add	local10, objptr
08024     08 38 06 F1 | 	add	local10, #8
08028     1C 39 02 FB | 	rdlong	local10, local10
0802c     9B 38 0E F2 | 	cmp	local10, #155 wz
08030     47 00 00 FF 
08034     7C E4 85 F1 | 	sub	objptr, ##36476
08038     70 00 90 5D |  if_ne	jmp	#LR__0716
0803c     13 37 02 F6 | 	mov	local09, local01
08040     01 36 86 F1 | 	sub	local09, #1
08044     1B 39 02 F6 | 	mov	local10, local09
08048     01 38 66 F0 | 	shl	local10, #1
0804c     1B 39 02 F1 | 	add	local10, local09
08050     02 38 66 F0 | 	shl	local10, #2
08054     47 00 00 FF 
08058     7C E4 05 F1 | 	add	objptr, ##36476
0805c     F2 38 02 F1 | 	add	local10, objptr
08060     08 38 06 F1 | 	add	local10, #8
08064     1C 39 02 FB | 	rdlong	local10, local10
08068     11 38 0E F2 | 	cmp	local10, #17 wz
0806c     47 00 00 FF 
08070     7C E4 85 F1 | 	sub	objptr, ##36476
08074     34 00 90 5D |  if_ne	jmp	#LR__0716
08078     13 37 02 F6 | 	mov	local09, local01
0807c     01 36 86 F1 | 	sub	local09, #1
08080     1B 39 02 F6 | 	mov	local10, local09
08084     01 38 66 F0 | 	shl	local10, #1
08088     1B 39 02 F1 | 	add	local10, local09
0808c     02 38 66 F0 | 	shl	local10, #2
08090     47 00 00 FF 
08094     7C E4 05 F1 | 	add	objptr, ##36476
08098     F2 38 02 F1 | 	add	local10, objptr
0809c     08 38 06 F1 | 	add	local10, #8
080a0     1C 25 68 FC | 	wrlong	#18, local10
080a4     47 00 00 FF 
080a8     7C E4 85 F1 | 	sub	objptr, ##36476
080ac                 | LR__0716
080ac     01 26 86 F1 | 	sub	local01, #1
080b0     01 26 56 F2 | 	cmps	local01, #1 wc
080b4     50 FF 9F 3D |  if_ae	jmp	#LR__0715
080b8                 | LR__0717
080b8                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
080b8                 | ' return err
080b8     18 FB 01 F6 | 	mov	result1, local06
080bc     A7 F0 03 F6 | 	mov	ptra, fp
080c0     B2 00 A0 FD | 	call	#popregs_
080c4                 | _compile_immediate_ret
080c4     2D 00 64 FD | 	ret
080c8                 | 
080c8                 | ' 
080c8                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
080c8                 | ' 
080c8                 | ' function compile_immediate_assign(linetype as ulong) as ulong
080c8                 | _compile_immediate_assign
080c8     0C 4A 05 F6 | 	mov	COUNT_, #12
080cc     A8 00 A0 FD | 	call	#pushregs_
080d0     09 2D 02 F6 | 	mov	local04, arg01
080d4     FF 2A 06 F6 | 	mov	local03, #255
080d8     01 2E 66 F6 | 	neg	local05, #1
080dc     00 30 06 F6 | 	mov	local06, #0
080e0                 | ' 
080e0                 | ' t1.result_type=result_error : t1.result.uresult=0
080e0                 | ' i=-1: j=-1 : err=0
080e0                 | ' 
080e0                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
080e0     02 2C 0E F2 | 	cmp	local04, #2 wz
080e4     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
080e8     35 00 00 AF 
080ec     0C E4 05 A1 |  if_e	add	objptr, ##27148
080f0     F2 32 02 AB |  if_e	rdlong	local07, objptr
080f4     02 00 00 AF 
080f8     38 E4 05 A1 |  if_e	add	objptr, ##1080
080fc     F2 04 68 AC |  if_e	wrlong	#2, objptr
08100     37 00 00 AF 
08104     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08108                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
08108     04 2C 0E F2 | 	cmp	local04, #4 wz
0810c     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
08110     2C 00 90 5D |  if_ne	jmp	#LR__0720
08114     35 00 00 FF 
08118     14 E4 05 F1 | 	add	objptr, ##27156
0811c     F2 32 02 FB | 	rdlong	local07, objptr
08120     02 00 00 FF 
08124     30 E4 05 F1 | 	add	objptr, ##1072
08128     F2 06 68 FC | 	wrlong	#3, objptr
0812c     13 00 00 FF 
08130     38 E4 05 F1 | 	add	objptr, ##9784
08134     F2 04 68 FC | 	wrlong	#2, objptr
08138     4A 00 00 FF 
0813c     7C E4 85 F1 | 	sub	objptr, ##38012
08140                 | LR__0720
08140                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
08140     05 2C 0E F2 | 	cmp	local04, #5 wz
08144     3C 00 90 5D |  if_ne	jmp	#LR__0721
08148     37 00 00 FF 
0814c     44 E4 05 F1 | 	add	objptr, ##28228
08150     F2 FA 01 FB | 	rdlong	result1, objptr
08154     FD 32 02 F6 | 	mov	local07, result1
08158     03 32 66 F0 | 	shl	local07, #3
0815c     02 00 00 FF 
08160     38 E4 85 F1 | 	sub	objptr, ##1080
08164     F2 32 02 F1 | 	add	local07, objptr
08168     19 33 02 FB | 	rdlong	local07, local07
0816c     02 FA 05 F1 | 	add	result1, #2
08170     02 00 00 FF 
08174     38 E4 05 F1 | 	add	objptr, ##1080
08178     F2 FA 61 FC | 	wrlong	result1, objptr
0817c     37 00 00 FF 
08180     44 E4 85 F1 | 	sub	objptr, ##28228
08184                 | LR__0721
08184     19 13 02 F6 | 	mov	arg01, local07
08188     01 14 06 F6 | 	mov	arg02, #1
0818c     A8 06 B2 FD | 	call	#__system__Right_S
08190     FD 34 02 F6 | 	mov	local08, result1
08194     A0 3B B0 FD | 	call	#_expr
08198                 | ' 
08198                 | ' suffix2$=right$(varname2$,1)
08198                 | ' expr()
08198                 | ' if varnum>0 then					' try to find a variable
08198     35 00 00 FF 
0819c     08 E4 05 F1 | 	add	objptr, ##27144
081a0     F2 36 02 FB | 	rdlong	local09, objptr
081a4     35 00 00 FF 
081a8     08 E4 85 F1 | 	sub	objptr, ##27144
081ac     01 36 56 F2 | 	cmps	local09, #1 wc
081b0     58 00 90 CD |  if_b	jmp	#LR__0724
081b4                 | '   for i=0 to varnum-1
081b4     00 38 06 F6 | 	mov	local10, #0
081b8     35 00 00 FF 
081bc     08 E4 05 F1 | 	add	objptr, ##27144
081c0     F2 3A 02 FB | 	rdlong	local11, objptr
081c4     35 00 00 FF 
081c8     08 E4 85 F1 | 	sub	objptr, ##27144
081cc                 | LR__0722
081cc     1D 39 52 F2 | 	cmps	local10, local11 wc
081d0     38 00 90 3D |  if_ae	jmp	#LR__0723
081d4                 | '     if variables(i).name=varname2$ then j=i : exit
081d4     1C 37 02 F6 | 	mov	local09, local10
081d8     04 36 66 F0 | 	shl	local09, #4
081dc     14 00 00 FF 
081e0     F8 E5 05 F1 | 	add	objptr, ##10744
081e4     F2 36 02 F1 | 	add	local09, objptr
081e8     1B 13 02 FB | 	rdlong	arg01, local09
081ec     19 15 02 F6 | 	mov	arg02, local07
081f0     14 00 00 FF 
081f4     F8 E5 85 F1 | 	sub	objptr, ##10744
081f8     60 E5 B1 FD | 	call	#__system___string_cmp
081fc     00 FA 0D F2 | 	cmp	result1, #0 wz
08200     1C 2F 02 A6 |  if_e	mov	local05, local10
08204     01 38 06 51 |  if_ne	add	local10, #1
08208     C0 FF 9F 5D |  if_ne	jmp	#LR__0722
0820c                 | LR__0723
0820c                 | LR__0724
0820c                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
0820c     FF FF 7F FF 
08210     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
08214     60 00 90 5D |  if_ne	jmp	#LR__0725
08218     35 00 00 FF 
0821c     08 E4 05 F1 | 	add	objptr, ##27144
08220     F2 36 02 FB | 	rdlong	local09, objptr
08224     35 00 00 FF 
08228     08 E4 85 F1 | 	sub	objptr, ##27144
0822c     02 00 00 FF 
08230     00 36 56 F2 | 	cmps	local09, ##1024 wc
08234     40 00 90 3D |  if_ae	jmp	#LR__0725
08238     35 00 00 FF 
0823c     08 E4 05 F1 | 	add	objptr, ##27144
08240     F2 3A 02 FB | 	rdlong	local11, objptr
08244     04 3A 66 F0 | 	shl	local11, #4
08248     20 00 00 FF 
0824c     10 E4 85 F1 | 	sub	objptr, ##16400
08250     F2 3A 02 F1 | 	add	local11, objptr
08254     1D 33 62 FC | 	wrlong	local07, local11
08258     20 00 00 FF 
0825c     10 E4 05 F1 | 	add	objptr, ##16400
08260     F2 36 02 FB | 	rdlong	local09, objptr
08264     1B 2F 02 F6 | 	mov	local05, local09
08268     01 36 06 F1 | 	add	local09, #1
0826c     F2 36 62 FC | 	wrlong	local09, objptr
08270     35 00 00 FF 
08274     08 E4 85 F1 | 	sub	objptr, ##27144
08278                 | LR__0725
08278                 | ' if varnum>=maxvars then
08278     35 00 00 FF 
0827c     08 E4 05 F1 | 	add	objptr, ##27144
08280     F2 36 02 FB | 	rdlong	local09, objptr
08284     35 00 00 FF 
08288     08 E4 85 F1 | 	sub	objptr, ##27144
0828c     02 00 00 FF 
08290     00 36 56 F2 | 	cmps	local09, ##1024 wc
08294     2D 30 06 36 |  if_ae	mov	local06, #45
08298     C8 01 90 3D |  if_ae	jmp	#LR__0730
0829c     17 27 02 F6 | 	mov	local01, local05
082a0     17 2A 06 F6 | 	mov	local03, #23
082a4     13 37 02 F6 | 	mov	local09, local01
082a8     14 3D 02 F6 | 	mov	local12, local02
082ac     15 27 02 F6 | 	mov	local01, local03
082b0     4A 00 00 FF 
082b4     7C E4 05 F1 | 	add	objptr, ##38012
082b8     F2 3A 02 FB | 	rdlong	local11, objptr
082bc     1D 39 02 F6 | 	mov	local10, local11
082c0     01 38 66 F0 | 	shl	local10, #1
082c4     1D 39 02 F1 | 	add	local10, local11
082c8     02 38 66 F0 | 	shl	local10, #2
082cc     03 00 00 FF 
082d0     00 E4 85 F1 | 	sub	objptr, ##1536
082d4     F2 38 02 F1 | 	add	local10, objptr
082d8     1C 37 62 FC | 	wrlong	local09, local10
082dc     03 00 00 FF 
082e0     00 E4 05 F1 | 	add	objptr, ##1536
082e4     F2 36 02 FB | 	rdlong	local09, objptr
082e8     1B 3B 02 F6 | 	mov	local11, local09
082ec     01 3A 66 F0 | 	shl	local11, #1
082f0     1B 3B 02 F1 | 	add	local11, local09
082f4     02 3A 66 F0 | 	shl	local11, #2
082f8     03 00 00 FF 
082fc     00 E4 85 F1 | 	sub	objptr, ##1536
08300     F2 3A 02 F1 | 	add	local11, objptr
08304     04 3A 06 F1 | 	add	local11, #4
08308     1D 3D 62 FC | 	wrlong	local12, local11
0830c     03 00 00 FF 
08310     00 E4 05 F1 | 	add	objptr, ##1536
08314     F2 36 02 FB | 	rdlong	local09, objptr
08318     1B 3D 02 F6 | 	mov	local12, local09
0831c     01 3C 66 F0 | 	shl	local12, #1
08320     1B 3D 02 F1 | 	add	local12, local09
08324     02 3C 66 F0 | 	shl	local12, #2
08328     03 00 00 FF 
0832c     00 E4 85 F1 | 	sub	objptr, ##1536
08330     F2 3C 02 F1 | 	add	local12, objptr
08334     08 3C 06 F1 | 	add	local12, #8
08338     1E 27 62 FC | 	wrlong	local01, local12
0833c     03 00 00 FF 
08340     00 E4 05 F1 | 	add	objptr, ##1536
08344     F2 36 02 FB | 	rdlong	local09, objptr
08348     01 36 06 F1 | 	add	local09, #1
0834c     F2 36 62 FC | 	wrlong	local09, objptr
08350     4A 00 00 FF 
08354     7C E4 85 F1 | 	sub	objptr, ##38012
08358                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
08358                 | '   compiledline(lineptr)=t1:  lineptr+=1 
08358                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
08358     03 2C 0E F2 | 	cmp	local04, #3 wz
0835c     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
08360     38 00 90 5D |  if_ne	jmp	#LR__0726
08364     4A 00 00 FF 
08368     7C E4 05 F1 | 	add	objptr, ##38012
0836c     F2 3C 02 FB | 	rdlong	local12, objptr
08370     1E 27 02 F6 | 	mov	local01, local12
08374     01 26 66 F0 | 	shl	local01, #1
08378     1E 27 02 F1 | 	add	local01, local12
0837c     02 26 66 F0 | 	shl	local01, #2
08380     03 00 00 FF 
08384     00 E4 85 F1 | 	sub	objptr, ##1536
08388     F2 26 02 F1 | 	add	local01, objptr
0838c     08 26 06 F1 | 	add	local01, #8
08390     13 FD 6B FC | 	wrlong	#510, local01
08394     47 00 00 FF 
08398     7C E4 85 F1 | 	sub	objptr, ##36476
0839c                 | LR__0726
0839c                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
0839c     4A 00 00 FF 
083a0     7C E4 05 F1 | 	add	objptr, ##38012
083a4     F2 38 02 FB | 	rdlong	local10, objptr
083a8     4A 00 00 FF 
083ac     7C E4 85 F1 | 	sub	objptr, ##38012
083b0     97 58 48 FB | 	callpa	#(@LR__0729-@LR__0727)>>2,fcache_load_ptr_
083b4                 | LR__0727
083b4     1C 3D 02 F6 | 	mov	local12, local10
083b8     01 3C 66 F0 | 	shl	local12, #1
083bc     1C 3D 02 F1 | 	add	local12, local10
083c0     02 3C 66 F0 | 	shl	local12, #2
083c4     47 00 00 FF 
083c8     7C E4 05 F1 | 	add	objptr, ##36476
083cc     F2 3C 02 F1 | 	add	local12, objptr
083d0     08 3C 06 F1 | 	add	local12, #8
083d4     1E 3D 02 FB | 	rdlong	local12, local12
083d8     9B 3C 0E F2 | 	cmp	local12, #155 wz
083dc     47 00 00 FF 
083e0     7C E4 85 F1 | 	sub	objptr, ##36476
083e4     70 00 90 5D |  if_ne	jmp	#LR__0728
083e8     1C 3D 02 F6 | 	mov	local12, local10
083ec     01 3C 86 F1 | 	sub	local12, #1
083f0     1E 27 02 F6 | 	mov	local01, local12
083f4     01 26 66 F0 | 	shl	local01, #1
083f8     1E 27 02 F1 | 	add	local01, local12
083fc     02 26 66 F0 | 	shl	local01, #2
08400     47 00 00 FF 
08404     7C E4 05 F1 | 	add	objptr, ##36476
08408     F2 26 02 F1 | 	add	local01, objptr
0840c     08 26 06 F1 | 	add	local01, #8
08410     13 27 02 FB | 	rdlong	local01, local01
08414     11 26 0E F2 | 	cmp	local01, #17 wz
08418     47 00 00 FF 
0841c     7C E4 85 F1 | 	sub	objptr, ##36476
08420     34 00 90 5D |  if_ne	jmp	#LR__0728
08424     1C 3D 02 F6 | 	mov	local12, local10
08428     01 3C 86 F1 | 	sub	local12, #1
0842c     1E 27 02 F6 | 	mov	local01, local12
08430     01 26 66 F0 | 	shl	local01, #1
08434     1E 27 02 F1 | 	add	local01, local12
08438     02 26 66 F0 | 	shl	local01, #2
0843c     47 00 00 FF 
08440     7C E4 05 F1 | 	add	objptr, ##36476
08444     F2 26 02 F1 | 	add	local01, objptr
08448     08 26 06 F1 | 	add	local01, #8
0844c     13 25 68 FC | 	wrlong	#18, local01
08450     47 00 00 FF 
08454     7C E4 85 F1 | 	sub	objptr, ##36476
08458                 | LR__0728
08458     01 38 86 F1 | 	sub	local10, #1
0845c     01 38 56 F2 | 	cmps	local10, #1 wc
08460     50 FF 9F 3D |  if_ae	jmp	#LR__0727
08464                 | LR__0729
08464                 | LR__0730
08464                 | ' return err
08464     18 FB 01 F6 | 	mov	result1, local06
08468     A7 F0 03 F6 | 	mov	ptra, fp
0846c     B2 00 A0 FD | 	call	#popregs_
08470                 | _compile_immediate_assign_ret
08470     2D 00 64 FD | 	ret
08474                 | 
08474                 | ' 
08474                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08474                 | ' 
08474                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08474                 | _compile
08474     03 4A 05 F6 | 	mov	COUNT_, #3
08478     A8 00 A0 FD | 	call	#pushregs_
0847c     09 27 02 F6 | 	mov	local01, arg01
08480     0B 29 02 F6 | 	mov	local02, arg03
08484     47 00 00 FF 
08488     7C E4 05 F1 | 	add	objptr, ##36476
0848c     F2 26 62 FC | 	wrlong	local01, objptr
08490     04 E4 05 F1 | 	add	objptr, #4
08494     F2 14 62 FC | 	wrlong	arg02, objptr
08498     47 00 00 FF 
0849c     80 E4 85 F1 | 	sub	objptr, ##36480
084a0     14 13 02 F6 | 	mov	arg01, local02
084a4     01 12 06 F1 | 	add	arg01, #1
084a8     13 15 02 F6 | 	mov	arg02, local01
084ac     70 F2 BF FD | 	call	#_compile_immediate
084b0     FD 2A 0A F6 | 	mov	local03, result1 wz
084b4                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
084b4                 | ' ucompiledline(0)=alinemajor
084b4                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
084b4                 | ' 
084b4                 | ' ' cont: 
084b4                 | ' ' 0 - this is the first part of the line that will continue
084b4                 | ' ' 1 - this is the continuation of the line
084b4                 | ' ' 2 - this is the last continued line
084b4                 | ' ' 3 - this is the one and only part
084b4                 | ' 
084b4                 | ' err=compile_immediate(cont+1,alinemajor) 
084b4                 | ' if err=0 andalso alinemajor>0 then
084b4     74 00 90 5D |  if_ne	jmp	#LR__0745
084b8     01 26 16 F2 | 	cmp	local01, #1 wc
084bc     6C 00 90 CD |  if_b	jmp	#LR__0745
084c0                 | '   if cont=3 orelse cont=2 then 
084c0     03 28 0E F2 | 	cmp	local02, #3 wz
084c4     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
084c8     60 00 90 5D |  if_ne	jmp	#LR__0744
084cc                 | '     if alinemajor >lastline then 
084cc     4A 00 00 FF 
084d0     8C E4 05 F1 | 	add	objptr, ##38028
084d4     F2 14 02 FB | 	rdlong	arg02, objptr
084d8     4A 00 00 FF 
084dc     8C E4 85 F1 | 	sub	objptr, ##38028
084e0     0A 27 1A F2 | 	cmp	local01, arg02 wcz
084e4     0C 00 90 ED |  if_be	jmp	#LR__0740
084e8     13 13 02 F6 | 	mov	arg01, local01
084ec     68 F1 BF FD | 	call	#_add_line_at_end
084f0     38 00 90 FD | 	jmp	#LR__0743
084f4                 | LR__0740
084f4     13 13 02 F6 | 	mov	arg01, local01
084f8     2C EB BF FD | 	call	#_deleteline
084fc                 | '       deleteline(alinemajor)  
084fc                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
084fc     4A 00 00 FF 
08500     8C E4 05 F1 | 	add	objptr, ##38028
08504     F2 14 02 FB | 	rdlong	arg02, objptr
08508     4A 00 00 FF 
0850c     8C E4 85 F1 | 	sub	objptr, ##38028
08510     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08514     0C 00 90 ED |  if_be	jmp	#LR__0741
08518     13 13 02 F6 | 	mov	arg01, local01
0851c     38 F1 BF FD | 	call	#_add_line_at_end
08520     08 00 90 FD | 	jmp	#LR__0742
08524                 | LR__0741
08524     13 13 02 F6 | 	mov	arg01, local01
08528     10 EF BF FD | 	call	#_insertline
0852c                 | LR__0742
0852c                 | LR__0743
0852c                 | LR__0744
0852c                 | LR__0745
0852c                 | ' return err
0852c     15 FB 01 F6 | 	mov	result1, local03
08530     A7 F0 03 F6 | 	mov	ptra, fp
08534     B2 00 A0 FD | 	call	#popregs_
08538                 | _compile_ret
08538     2D 00 64 FD | 	ret
0853c                 | 
0853c                 | ' 
0853c                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
0853c                 | ' 
0853c                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
0853c                 | _compile_assign
0853c     03 4A 05 F6 | 	mov	COUNT_, #3
08540     A8 00 A0 FD | 	call	#pushregs_
08544     09 27 02 F6 | 	mov	local01, arg01
08548     0B 29 02 F6 | 	mov	local02, arg03
0854c     47 00 00 FF 
08550     7C E4 05 F1 | 	add	objptr, ##36476
08554     F2 26 62 FC | 	wrlong	local01, objptr
08558     04 E4 05 F1 | 	add	objptr, #4
0855c     F2 14 62 FC | 	wrlong	arg02, objptr
08560     47 00 00 FF 
08564     80 E4 85 F1 | 	sub	objptr, ##36480
08568     14 13 02 F6 | 	mov	arg01, local02
0856c     01 12 06 F1 | 	add	arg01, #1
08570     54 FB BF FD | 	call	#_compile_immediate_assign
08574     FD 2A 02 F6 | 	mov	local03, result1
08578                 | ' 
08578                 | ' ucompiledline(0)=alinemajor
08578                 | ' ucompiledline(1)=alineminor
08578                 | ' 
08578                 | ' err=compile_immediate_assign(cont+1) 
08578                 | ' if alinemajor>0 then
08578     01 26 16 F2 | 	cmp	local01, #1 wc
0857c     6C 00 90 CD |  if_b	jmp	#LR__0755
08580                 | '   if cont=3 orelse cont=2 then 
08580     03 28 0E F2 | 	cmp	local02, #3 wz
08584     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08588     60 00 90 5D |  if_ne	jmp	#LR__0754
0858c                 | '     if alinemajor >lastline then 
0858c     4A 00 00 FF 
08590     8C E4 05 F1 | 	add	objptr, ##38028
08594     F2 14 02 FB | 	rdlong	arg02, objptr
08598     4A 00 00 FF 
0859c     8C E4 85 F1 | 	sub	objptr, ##38028
085a0     0A 27 1A F2 | 	cmp	local01, arg02 wcz
085a4     0C 00 90 ED |  if_be	jmp	#LR__0750
085a8     13 13 02 F6 | 	mov	arg01, local01
085ac     A8 F0 BF FD | 	call	#_add_line_at_end
085b0     38 00 90 FD | 	jmp	#LR__0753
085b4                 | LR__0750
085b4     13 13 02 F6 | 	mov	arg01, local01
085b8     6C EA BF FD | 	call	#_deleteline
085bc                 | '       deleteline(alinemajor)  
085bc                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
085bc     4A 00 00 FF 
085c0     8C E4 05 F1 | 	add	objptr, ##38028
085c4     F2 14 02 FB | 	rdlong	arg02, objptr
085c8     4A 00 00 FF 
085cc     8C E4 85 F1 | 	sub	objptr, ##38028
085d0     0A 27 1A F2 | 	cmp	local01, arg02 wcz
085d4     0C 00 90 ED |  if_be	jmp	#LR__0751
085d8     13 13 02 F6 | 	mov	arg01, local01
085dc     78 F0 BF FD | 	call	#_add_line_at_end
085e0     08 00 90 FD | 	jmp	#LR__0752
085e4                 | LR__0751
085e4     13 13 02 F6 | 	mov	arg01, local01
085e8     50 EE BF FD | 	call	#_insertline
085ec                 | LR__0752
085ec                 | LR__0753
085ec                 | LR__0754
085ec                 | LR__0755
085ec                 | ' return err
085ec     15 FB 01 F6 | 	mov	result1, local03
085f0     A7 F0 03 F6 | 	mov	ptra, fp
085f4     B2 00 A0 FD | 	call	#popregs_
085f8                 | _compile_assign_ret
085f8     2D 00 64 FD | 	ret
085fc                 | 
085fc                 | ' 
085fc                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
085fc                 | ' 
085fc                 | ' function compile_fun_2p() as ulong
085fc                 | _compile_fun_2p
085fc     01 4A 05 F6 | 	mov	COUNT_, #1
08600     A8 00 A0 FD | 	call	#pushregs_
08604     30 37 B0 FD | 	call	#_expr
08608     FD 26 02 F6 | 	mov	local01, result1
0860c                 | ' err=expr() : if err>0 then return err
0860c     01 26 16 F2 | 	cmp	local01, #1 wc
08610     13 FB 01 36 |  if_ae	mov	result1, local01
08614     60 00 90 3D |  if_ae	jmp	#LR__0760
08618                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08618     37 00 00 FF 
0861c     44 E4 05 F1 | 	add	objptr, ##28228
08620     F2 26 02 FB | 	rdlong	local01, objptr
08624     03 26 66 F0 | 	shl	local01, #3
08628     02 00 00 FF 
0862c     38 E4 85 F1 | 	sub	objptr, ##1080
08630     F2 26 02 F1 | 	add	local01, objptr
08634     04 26 06 F1 | 	add	local01, #4
08638     13 27 02 FB | 	rdlong	local01, local01
0863c     11 26 0E F2 | 	cmp	local01, #17 wz
08640     35 00 00 FF 
08644     0C E4 85 F1 | 	sub	objptr, ##27148
08648     15 FA 05 56 |  if_ne	mov	result1, #21
0864c     28 00 90 5D |  if_ne	jmp	#LR__0760
08650     37 00 00 FF 
08654     44 E4 05 F1 | 	add	objptr, ##28228
08658     F2 26 02 FB | 	rdlong	local01, objptr
0865c     01 26 06 F1 | 	add	local01, #1
08660     F2 26 62 FC | 	wrlong	local01, objptr
08664     37 00 00 FF 
08668     44 E4 85 F1 | 	sub	objptr, ##28228
0866c     C8 36 B0 FD | 	call	#_expr
08670                 | ' err=expr() : if err>0 then return err
08670     01 FA 15 F2 | 	cmp	result1, #1 wc
08674                 | ' return 0
08674     00 FA 05 C6 |  if_b	mov	result1, #0
08678                 | LR__0760
08678     A7 F0 03 F6 | 	mov	ptra, fp
0867c     B2 00 A0 FD | 	call	#popregs_
08680                 | _compile_fun_2p_ret
08680     2D 00 64 FD | 	ret
08684                 | 
08684                 | ' 
08684                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08684                 | ' 
08684                 | ' function compile_fun_3p() as ulong
08684                 | _compile_fun_3p
08684     01 4A 05 F6 | 	mov	COUNT_, #1
08688     A8 00 A0 FD | 	call	#pushregs_
0868c     A8 36 B0 FD | 	call	#_expr
08690     FD 26 02 F6 | 	mov	local01, result1
08694                 | ' err=expr() : if err>0 then return err
08694     01 26 16 F2 | 	cmp	local01, #1 wc
08698     13 FB 01 36 |  if_ae	mov	result1, local01
0869c     C8 00 90 3D |  if_ae	jmp	#LR__0770
086a0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
086a0     37 00 00 FF 
086a4     44 E4 05 F1 | 	add	objptr, ##28228
086a8     F2 26 02 FB | 	rdlong	local01, objptr
086ac     03 26 66 F0 | 	shl	local01, #3
086b0     02 00 00 FF 
086b4     38 E4 85 F1 | 	sub	objptr, ##1080
086b8     F2 26 02 F1 | 	add	local01, objptr
086bc     04 26 06 F1 | 	add	local01, #4
086c0     13 27 02 FB | 	rdlong	local01, local01
086c4     11 26 0E F2 | 	cmp	local01, #17 wz
086c8     35 00 00 FF 
086cc     0C E4 85 F1 | 	sub	objptr, ##27148
086d0     15 FA 05 56 |  if_ne	mov	result1, #21
086d4     90 00 90 5D |  if_ne	jmp	#LR__0770
086d8     37 00 00 FF 
086dc     44 E4 05 F1 | 	add	objptr, ##28228
086e0     F2 26 02 FB | 	rdlong	local01, objptr
086e4     01 26 06 F1 | 	add	local01, #1
086e8     F2 26 62 FC | 	wrlong	local01, objptr
086ec     37 00 00 FF 
086f0     44 E4 85 F1 | 	sub	objptr, ##28228
086f4     40 36 B0 FD | 	call	#_expr
086f8     FD 26 02 F6 | 	mov	local01, result1
086fc                 | ' err=expr() : if err>0 then return err
086fc     01 26 16 F2 | 	cmp	local01, #1 wc
08700     13 FB 01 36 |  if_ae	mov	result1, local01
08704     60 00 90 3D |  if_ae	jmp	#LR__0770
08708                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08708     37 00 00 FF 
0870c     44 E4 05 F1 | 	add	objptr, ##28228
08710     F2 26 02 FB | 	rdlong	local01, objptr
08714     03 26 66 F0 | 	shl	local01, #3
08718     02 00 00 FF 
0871c     38 E4 85 F1 | 	sub	objptr, ##1080
08720     F2 26 02 F1 | 	add	local01, objptr
08724     04 26 06 F1 | 	add	local01, #4
08728     13 27 02 FB | 	rdlong	local01, local01
0872c     11 26 0E F2 | 	cmp	local01, #17 wz
08730     35 00 00 FF 
08734     0C E4 85 F1 | 	sub	objptr, ##27148
08738     15 FA 05 56 |  if_ne	mov	result1, #21
0873c     28 00 90 5D |  if_ne	jmp	#LR__0770
08740     37 00 00 FF 
08744     44 E4 05 F1 | 	add	objptr, ##28228
08748     F2 26 02 FB | 	rdlong	local01, objptr
0874c     01 26 06 F1 | 	add	local01, #1
08750     F2 26 62 FC | 	wrlong	local01, objptr
08754     37 00 00 FF 
08758     44 E4 85 F1 | 	sub	objptr, ##28228
0875c     D8 35 B0 FD | 	call	#_expr
08760                 | ' err=expr() : if err>0 then return err
08760     01 FA 15 F2 | 	cmp	result1, #1 wc
08764                 | ' return 0
08764     00 FA 05 C6 |  if_b	mov	result1, #0
08768                 | LR__0770
08768     A7 F0 03 F6 | 	mov	ptra, fp
0876c     B2 00 A0 FD | 	call	#popregs_
08770                 | _compile_fun_3p_ret
08770     2D 00 64 FD | 	ret
08774                 | 
08774                 | ' 
08774                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08774                 | ' 
08774                 | ' function compile_fun_4p() as ulong
08774                 | _compile_fun_4p
08774     01 4A 05 F6 | 	mov	COUNT_, #1
08778     A8 00 A0 FD | 	call	#pushregs_
0877c     B8 35 B0 FD | 	call	#_expr
08780     FD 26 02 F6 | 	mov	local01, result1
08784                 | ' err=expr() : if err>0 then return err
08784     01 26 16 F2 | 	cmp	local01, #1 wc
08788     13 FB 01 36 |  if_ae	mov	result1, local01
0878c     30 01 90 3D |  if_ae	jmp	#LR__0780
08790                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08790     37 00 00 FF 
08794     44 E4 05 F1 | 	add	objptr, ##28228
08798     F2 26 02 FB | 	rdlong	local01, objptr
0879c     03 26 66 F0 | 	shl	local01, #3
087a0     02 00 00 FF 
087a4     38 E4 85 F1 | 	sub	objptr, ##1080
087a8     F2 26 02 F1 | 	add	local01, objptr
087ac     04 26 06 F1 | 	add	local01, #4
087b0     13 27 02 FB | 	rdlong	local01, local01
087b4     11 26 0E F2 | 	cmp	local01, #17 wz
087b8     35 00 00 FF 
087bc     0C E4 85 F1 | 	sub	objptr, ##27148
087c0     15 FA 05 56 |  if_ne	mov	result1, #21
087c4     F8 00 90 5D |  if_ne	jmp	#LR__0780
087c8     37 00 00 FF 
087cc     44 E4 05 F1 | 	add	objptr, ##28228
087d0     F2 26 02 FB | 	rdlong	local01, objptr
087d4     01 26 06 F1 | 	add	local01, #1
087d8     F2 26 62 FC | 	wrlong	local01, objptr
087dc     37 00 00 FF 
087e0     44 E4 85 F1 | 	sub	objptr, ##28228
087e4     50 35 B0 FD | 	call	#_expr
087e8     FD 26 02 F6 | 	mov	local01, result1
087ec                 | ' err=expr() : if err>0 then return err
087ec     01 26 16 F2 | 	cmp	local01, #1 wc
087f0     13 FB 01 36 |  if_ae	mov	result1, local01
087f4     C8 00 90 3D |  if_ae	jmp	#LR__0780
087f8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
087f8     37 00 00 FF 
087fc     44 E4 05 F1 | 	add	objptr, ##28228
08800     F2 26 02 FB | 	rdlong	local01, objptr
08804     03 26 66 F0 | 	shl	local01, #3
08808     02 00 00 FF 
0880c     38 E4 85 F1 | 	sub	objptr, ##1080
08810     F2 26 02 F1 | 	add	local01, objptr
08814     04 26 06 F1 | 	add	local01, #4
08818     13 27 02 FB | 	rdlong	local01, local01
0881c     11 26 0E F2 | 	cmp	local01, #17 wz
08820     35 00 00 FF 
08824     0C E4 85 F1 | 	sub	objptr, ##27148
08828     15 FA 05 56 |  if_ne	mov	result1, #21
0882c     90 00 90 5D |  if_ne	jmp	#LR__0780
08830     37 00 00 FF 
08834     44 E4 05 F1 | 	add	objptr, ##28228
08838     F2 26 02 FB | 	rdlong	local01, objptr
0883c     01 26 06 F1 | 	add	local01, #1
08840     F2 26 62 FC | 	wrlong	local01, objptr
08844     37 00 00 FF 
08848     44 E4 85 F1 | 	sub	objptr, ##28228
0884c     E8 34 B0 FD | 	call	#_expr
08850     FD 26 02 F6 | 	mov	local01, result1
08854                 | ' err=expr() : if err>0 then return err
08854     01 26 16 F2 | 	cmp	local01, #1 wc
08858     13 FB 01 36 |  if_ae	mov	result1, local01
0885c     60 00 90 3D |  if_ae	jmp	#LR__0780
08860                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08860     37 00 00 FF 
08864     44 E4 05 F1 | 	add	objptr, ##28228
08868     F2 26 02 FB | 	rdlong	local01, objptr
0886c     03 26 66 F0 | 	shl	local01, #3
08870     02 00 00 FF 
08874     38 E4 85 F1 | 	sub	objptr, ##1080
08878     F2 26 02 F1 | 	add	local01, objptr
0887c     04 26 06 F1 | 	add	local01, #4
08880     13 27 02 FB | 	rdlong	local01, local01
08884     11 26 0E F2 | 	cmp	local01, #17 wz
08888     35 00 00 FF 
0888c     0C E4 85 F1 | 	sub	objptr, ##27148
08890     15 FA 05 56 |  if_ne	mov	result1, #21
08894     28 00 90 5D |  if_ne	jmp	#LR__0780
08898     37 00 00 FF 
0889c     44 E4 05 F1 | 	add	objptr, ##28228
088a0     F2 26 02 FB | 	rdlong	local01, objptr
088a4     01 26 06 F1 | 	add	local01, #1
088a8     F2 26 62 FC | 	wrlong	local01, objptr
088ac     37 00 00 FF 
088b0     44 E4 85 F1 | 	sub	objptr, ##28228
088b4     80 34 B0 FD | 	call	#_expr
088b8                 | ' err=expr() : if err>0 then return err
088b8     01 FA 15 F2 | 	cmp	result1, #1 wc
088bc                 | ' return 0
088bc     00 FA 05 C6 |  if_b	mov	result1, #0
088c0                 | LR__0780
088c0     A7 F0 03 F6 | 	mov	ptra, fp
088c4     B2 00 A0 FD | 	call	#popregs_
088c8                 | _compile_fun_4p_ret
088c8     2D 00 64 FD | 	ret
088cc                 | 
088cc                 | ' 
088cc                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
088cc                 | ' 
088cc                 | ' function compile_fun_varp() as ulong,ulong 
088cc                 | _compile_fun_varp
088cc     03 4A 05 F6 | 	mov	COUNT_, #3
088d0     A8 00 A0 FD | 	call	#pushregs_
088d4     00 26 06 F6 | 	mov	local01, #0
088d8                 | ' 
088d8                 | ' i=0 : err=0
088d8                 | ' if lparts(ct).token<>token_end then
088d8     37 00 00 FF 
088dc     44 E4 05 F1 | 	add	objptr, ##28228
088e0     F2 28 02 FB | 	rdlong	local02, objptr
088e4     03 28 66 F0 | 	shl	local02, #3
088e8     02 00 00 FF 
088ec     38 E4 85 F1 | 	sub	objptr, ##1080
088f0     F2 28 02 F1 | 	add	local02, objptr
088f4     04 28 06 F1 | 	add	local02, #4
088f8     14 29 02 FB | 	rdlong	local02, local02
088fc     FE 29 0E F2 | 	cmp	local02, #510 wz
08900     35 00 00 FF 
08904     0C E4 85 F1 | 	sub	objptr, ##27148
08908     88 00 90 AD |  if_e	jmp	#LR__0791
0890c                 | '   do
0890c                 | LR__0790
0890c     28 34 B0 FD | 	call	#_expr
08910     01 26 06 F1 | 	add	local01, #1
08914                 | '     expr()
08914                 | '     i+=1
08914                 | '     if lparts(ct).token=token_comma then ct+=1
08914     37 00 00 FF 
08918     44 E4 05 F1 | 	add	objptr, ##28228
0891c     F2 28 02 FB | 	rdlong	local02, objptr
08920     03 28 66 F0 | 	shl	local02, #3
08924     02 00 00 FF 
08928     38 E4 85 F1 | 	sub	objptr, ##1080
0892c     F2 28 02 F1 | 	add	local02, objptr
08930     04 28 06 F1 | 	add	local02, #4
08934     14 29 02 FB | 	rdlong	local02, local02
08938     11 28 0E F2 | 	cmp	local02, #17 wz
0893c     35 00 00 FF 
08940     0C E4 85 F1 | 	sub	objptr, ##27148
08944     37 00 00 AF 
08948     44 E4 05 A1 |  if_e	add	objptr, ##28228
0894c     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08950     01 2A 06 A1 |  if_e	add	local03, #1
08954     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08958     37 00 00 AF 
0895c     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08960                 | '     if lparts(ct).token=token_end then exit loop
08960     37 00 00 FF 
08964     44 E4 05 F1 | 	add	objptr, ##28228
08968     F2 28 02 FB | 	rdlong	local02, objptr
0896c     03 28 66 F0 | 	shl	local02, #3
08970     02 00 00 FF 
08974     38 E4 85 F1 | 	sub	objptr, ##1080
08978     F2 28 02 F1 | 	add	local02, objptr
0897c     04 28 06 F1 | 	add	local02, #4
08980     14 29 02 FB | 	rdlong	local02, local02
08984     FE 29 0E F2 | 	cmp	local02, #510 wz
08988     35 00 00 FF 
0898c     0C E4 85 F1 | 	sub	objptr, ##27148
08990     78 FF 9F 5D |  if_ne	jmp	#LR__0790
08994                 | LR__0791
08994                 | ' return i,err
08994     13 FB 01 F6 | 	mov	result1, local01
08998     00 FC 05 F6 | 	mov	result2, #0
0899c     A7 F0 03 F6 | 	mov	ptra, fp
089a0     B2 00 A0 FD | 	call	#popregs_
089a4                 | _compile_fun_varp_ret
089a4     2D 00 64 FD | 	ret
089a8                 | 
089a8                 | ' 
089a8                 | ' '----  Compile read. The same as compile_input() except printing a prompt
089a8                 | ' 
089a8                 | ' function compile_read() as ulong,ulong 
089a8                 | _compile_read
089a8     04 4A 05 F6 | 	mov	COUNT_, #4
089ac     A8 00 A0 FD | 	call	#pushregs_
089b0     00 26 06 F6 | 	mov	local01, #0
089b4                 | ' 
089b4                 | ' i=0 : err=0
089b4                 | ' if lparts(ct).token<>token_end then
089b4     37 00 00 FF 
089b8     44 E4 05 F1 | 	add	objptr, ##28228
089bc     F2 28 02 FB | 	rdlong	local02, objptr
089c0     03 28 66 F0 | 	shl	local02, #3
089c4     02 00 00 FF 
089c8     38 E4 85 F1 | 	sub	objptr, ##1080
089cc     F2 28 02 F1 | 	add	local02, objptr
089d0     04 28 06 F1 | 	add	local02, #4
089d4     14 29 02 FB | 	rdlong	local02, local02
089d8     FE 29 0E F2 | 	cmp	local02, #510 wz
089dc     35 00 00 FF 
089e0     0C E4 85 F1 | 	sub	objptr, ##27148
089e4     98 00 90 AD |  if_e	jmp	#LR__0801
089e8                 | '   do
089e8                 | LR__0800
089e8     B8 2F B0 FD | 	call	#_getaddr
089ec     FD 2A 02 F6 | 	mov	local03, result1
089f0     37 00 00 FF 
089f4     44 E4 05 F1 | 	add	objptr, ##28228
089f8     F2 28 02 FB | 	rdlong	local02, objptr
089fc     01 28 06 F1 | 	add	local02, #1
08a00     F2 28 62 FC | 	wrlong	local02, objptr
08a04     01 26 06 F1 | 	add	local01, #1
08a08                 | '     err=getaddr() :ct+=1
08a08                 | '     i+=1 
08a08                 | '     if lparts(ct).token=token_comma then ct+=1 
08a08     03 28 66 F0 | 	shl	local02, #3
08a0c     02 00 00 FF 
08a10     38 E4 85 F1 | 	sub	objptr, ##1080
08a14     F2 28 02 F1 | 	add	local02, objptr
08a18     04 28 06 F1 | 	add	local02, #4
08a1c     14 29 02 FB | 	rdlong	local02, local02
08a20     11 28 0E F2 | 	cmp	local02, #17 wz
08a24     35 00 00 FF 
08a28     0C E4 85 F1 | 	sub	objptr, ##27148
08a2c     37 00 00 AF 
08a30     44 E4 05 A1 |  if_e	add	objptr, ##28228
08a34     F2 2C 02 AB |  if_e	rdlong	local04, objptr
08a38     01 2C 06 A1 |  if_e	add	local04, #1
08a3c     F2 2C 62 AC |  if_e	wrlong	local04, objptr
08a40     37 00 00 AF 
08a44     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08a48                 | '     if lparts(ct).token=token_end then exit loop
08a48     37 00 00 FF 
08a4c     44 E4 05 F1 | 	add	objptr, ##28228
08a50     F2 28 02 FB | 	rdlong	local02, objptr
08a54     03 28 66 F0 | 	shl	local02, #3
08a58     02 00 00 FF 
08a5c     38 E4 85 F1 | 	sub	objptr, ##1080
08a60     F2 28 02 F1 | 	add	local02, objptr
08a64     04 28 06 F1 | 	add	local02, #4
08a68     14 29 02 FB | 	rdlong	local02, local02
08a6c     FE 29 0E F2 | 	cmp	local02, #510 wz
08a70     35 00 00 FF 
08a74     0C E4 85 F1 | 	sub	objptr, ##27148
08a78     08 00 90 AD |  if_e	jmp	#LR__0802
08a7c     68 FF 9F FD | 	jmp	#LR__0800
08a80                 | LR__0801
08a80     36 2A 06 F6 | 	mov	local03, #54
08a84                 | LR__0802
08a84                 | ' return i,err
08a84     13 FB 01 F6 | 	mov	result1, local01
08a88     15 FD 01 F6 | 	mov	result2, local03
08a8c     A7 F0 03 F6 | 	mov	ptra, fp
08a90     B2 00 A0 FD | 	call	#popregs_
08a94                 | _compile_read_ret
08a94     2D 00 64 FD | 	ret
08a98                 | 
08a98                 | ' 
08a98                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08a98                 | ' 
08a98                 | ' function compile_input() as ulong,ulong 
08a98                 | _compile_input
08a98     0F 4A 05 F6 | 	mov	COUNT_, #15
08a9c     A8 00 A0 FD | 	call	#pushregs_
08aa0                 | ' 
08aa0                 | ' if lparts(ct).token=token_string then
08aa0     37 00 00 FF 
08aa4     44 E4 05 F1 | 	add	objptr, ##28228
08aa8     F2 16 02 FB | 	rdlong	arg03, objptr
08aac     03 16 66 F0 | 	shl	arg03, #3
08ab0     02 00 00 FF 
08ab4     38 E4 85 F1 | 	sub	objptr, ##1080
08ab8     F2 16 02 F1 | 	add	arg03, objptr
08abc     04 16 06 F1 | 	add	arg03, #4
08ac0     0B FD 01 FB | 	rdlong	result2, arg03
08ac4     01 00 00 FF 
08ac8     03 FC 0D F2 | 	cmp	result2, ##515 wz
08acc     35 00 00 FF 
08ad0     0C E4 85 F1 | 	sub	objptr, ##27148
08ad4     38 06 90 5D |  if_ne	jmp	#LR__0817
08ad8     37 00 00 FF 
08adc     44 E4 05 F1 | 	add	objptr, ##28228
08ae0     F2 14 02 FB | 	rdlong	arg02, objptr
08ae4     03 14 66 F0 | 	shl	arg02, #3
08ae8     02 00 00 FF 
08aec     38 E4 85 F1 | 	sub	objptr, ##1080
08af0     F2 14 02 F1 | 	add	arg02, objptr
08af4     0A 13 02 FB | 	rdlong	arg01, arg02
08af8     35 00 00 FF 
08afc     0C E4 85 F1 | 	sub	objptr, ##27148
08b00     09 2D 02 F6 | 	mov	local04, arg01
08b04     97 06 48 FB | 	callpa	#(@LR__0811-@LR__0810)>>2,fcache_load_ptr_
08b08                 | LR__0810
08b08     16 FB C9 FA | 	rdbyte	result1, local04 wz
08b0c     01 2C 06 51 |  if_ne	add	local04, #1
08b10     F4 FF 9F 5D |  if_ne	jmp	#LR__0810
08b14                 | LR__0811
08b14     09 2D 82 F1 | 	sub	local04, arg01
08b18     16 FB 01 F6 | 	mov	result1, local04
08b1c     52 00 00 FF 
08b20     F0 E4 05 F1 | 	add	objptr, ##42224
08b24     F2 FA 61 FC | 	wrlong	result1, objptr
08b28     58 E4 85 F1 | 	sub	objptr, #88
08b2c     F2 12 02 FB | 	rdlong	arg01, objptr
08b30     FD 12 82 F1 | 	sub	arg01, result1
08b34     04 12 86 F1 | 	sub	arg01, #4
08b38     03 12 26 F5 | 	andn	arg01, #3
08b3c     F2 12 62 FC | 	wrlong	arg01, objptr
08b40     58 E4 05 F1 | 	add	objptr, #88
08b44     F2 14 02 FB | 	rdlong	arg02, objptr
08b48     52 00 00 FF 
08b4c     F0 E4 85 F1 | 	sub	objptr, ##42224
08b50     94 A3 B1 FD | 	call	#_pslpoke
08b54                 | '   pslpoke memtop,l
08b54                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08b54     01 2E 06 F6 | 	mov	local05, #1
08b58     52 00 00 FF 
08b5c     F0 E4 05 F1 | 	add	objptr, ##42224
08b60     F2 30 02 FB | 	rdlong	local06, objptr
08b64     52 00 00 FF 
08b68     F0 E4 85 F1 | 	sub	objptr, ##42224
08b6c     01 30 06 F1 | 	add	local06, #1
08b70                 | LR__0812
08b70     18 2F 52 F2 | 	cmps	local05, local06 wc
08b74     5C 00 90 3D |  if_ae	jmp	#LR__0813
08b78     52 00 00 FF 
08b7c     98 E4 05 F1 | 	add	objptr, ##42136
08b80     F2 32 02 FB | 	rdlong	local07, objptr
08b84     03 32 06 F1 | 	add	local07, #3
08b88     17 33 02 F1 | 	add	local07, local05
08b8c     1B 00 00 FF 
08b90     54 E4 85 F1 | 	sub	objptr, ##13908
08b94     F2 14 02 FB | 	rdlong	arg02, objptr
08b98     03 14 66 F0 | 	shl	arg02, #3
08b9c     02 00 00 FF 
08ba0     38 E4 85 F1 | 	sub	objptr, ##1080
08ba4     F2 14 02 F1 | 	add	arg02, objptr
08ba8     0A 13 02 FB | 	rdlong	arg01, arg02
08bac     17 15 02 F6 | 	mov	arg02, local05
08bb0     01 16 06 F6 | 	mov	arg03, #1
08bb4     35 00 00 FF 
08bb8     0C E4 85 F1 | 	sub	objptr, ##27148
08bbc     08 FD B1 FD | 	call	#__system__Mid_S
08bc0     FD 14 C2 FA | 	rdbyte	arg02, result1
08bc4     19 13 02 F6 | 	mov	arg01, local07
08bc8     AC A3 B1 FD | 	call	#_pspoke
08bcc     01 2E 06 F1 | 	add	local05, #1
08bd0     9C FF 9F FD | 	jmp	#LR__0812
08bd4                 | LR__0813
08bd4     52 00 00 FF 
08bd8     98 E4 05 F1 | 	add	objptr, ##42136
08bdc     F2 26 02 FB | 	rdlong	local01, objptr
08be0     2B 2A 06 F6 | 	mov	local03, #43
08be4     13 35 02 F6 | 	mov	local08, local01
08be8     14 33 02 F6 | 	mov	local07, local02
08bec     15 37 02 F6 | 	mov	local09, local03
08bf0     08 00 00 FF 
08bf4     1C E4 85 F1 | 	sub	objptr, ##4124
08bf8     F2 30 02 FB | 	rdlong	local06, objptr
08bfc     18 2F 02 F6 | 	mov	local05, local06
08c00     01 2E 66 F0 | 	shl	local05, #1
08c04     18 2F 02 F1 | 	add	local05, local06
08c08     02 2E 66 F0 | 	shl	local05, #2
08c0c     03 00 00 FF 
08c10     00 E4 85 F1 | 	sub	objptr, ##1536
08c14     F2 2E 02 F1 | 	add	local05, objptr
08c18     17 35 62 FC | 	wrlong	local08, local05
08c1c     03 00 00 FF 
08c20     00 E4 05 F1 | 	add	objptr, ##1536
08c24     F2 34 02 FB | 	rdlong	local08, objptr
08c28     1A 31 02 F6 | 	mov	local06, local08
08c2c     01 30 66 F0 | 	shl	local06, #1
08c30     1A 31 02 F1 | 	add	local06, local08
08c34     02 30 66 F0 | 	shl	local06, #2
08c38     03 00 00 FF 
08c3c     00 E4 85 F1 | 	sub	objptr, ##1536
08c40     F2 30 02 F1 | 	add	local06, objptr
08c44     04 30 06 F1 | 	add	local06, #4
08c48     18 33 62 FC | 	wrlong	local07, local06
08c4c     03 00 00 FF 
08c50     00 E4 05 F1 | 	add	objptr, ##1536
08c54     F2 34 02 FB | 	rdlong	local08, objptr
08c58     1A 33 02 F6 | 	mov	local07, local08
08c5c     01 32 66 F0 | 	shl	local07, #1
08c60     1A 33 02 F1 | 	add	local07, local08
08c64     02 32 66 F0 | 	shl	local07, #2
08c68     03 00 00 FF 
08c6c     00 E4 85 F1 | 	sub	objptr, ##1536
08c70     F2 32 02 F1 | 	add	local07, objptr
08c74     08 32 06 F1 | 	add	local07, #8
08c78     19 37 62 FC | 	wrlong	local09, local07
08c7c     03 00 00 FF 
08c80     00 E4 05 F1 | 	add	objptr, ##1536
08c84     F2 34 02 FB | 	rdlong	local08, objptr
08c88     01 34 06 F1 | 	add	local08, #1
08c8c     F2 34 62 FC | 	wrlong	local08, objptr
08c90     13 00 00 FF 
08c94     38 E4 85 F1 | 	sub	objptr, ##9784
08c98     F2 34 02 FB | 	rdlong	local08, objptr
08c9c     01 34 06 F1 | 	add	local08, #1
08ca0     F2 34 62 FC | 	wrlong	local08, objptr
08ca4                 | '   t1.result.uresult=memtop
08ca4                 | '   t1.result_type=result_string2  
08ca4                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08ca4                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08ca4     03 34 66 F0 | 	shl	local08, #3
08ca8     02 00 00 FF 
08cac     38 E4 85 F1 | 	sub	objptr, ##1080
08cb0     F2 34 02 F1 | 	add	local08, objptr
08cb4     04 34 06 F1 | 	add	local08, #4
08cb8     1A 35 02 FB | 	rdlong	local08, local08
08cbc     11 34 0E F2 | 	cmp	local08, #17 wz
08cc0     35 00 00 FF 
08cc4     0C E4 85 F1 | 	sub	objptr, ##27148
08cc8     60 01 90 5D |  if_ne	jmp	#LR__0814
08ccc     21 2A 06 F6 | 	mov	local03, #33
08cd0     13 35 02 F6 | 	mov	local08, local01
08cd4     14 33 02 F6 | 	mov	local07, local02
08cd8     15 39 02 F6 | 	mov	local10, local03
08cdc     4A 00 00 FF 
08ce0     7C E4 05 F1 | 	add	objptr, ##38012
08ce4     F2 3A 02 FB | 	rdlong	local11, objptr
08ce8     1D 3D 02 F6 | 	mov	local12, local11
08cec     01 3C 66 F0 | 	shl	local12, #1
08cf0     1D 3D 02 F1 | 	add	local12, local11
08cf4     02 3C 66 F0 | 	shl	local12, #2
08cf8     03 00 00 FF 
08cfc     00 E4 85 F1 | 	sub	objptr, ##1536
08d00     F2 3C 02 F1 | 	add	local12, objptr
08d04     1E 35 62 FC | 	wrlong	local08, local12
08d08     03 00 00 FF 
08d0c     00 E4 05 F1 | 	add	objptr, ##1536
08d10     F2 3E 02 FB | 	rdlong	local13, objptr
08d14     1F 35 02 F6 | 	mov	local08, local13
08d18     01 34 66 F0 | 	shl	local08, #1
08d1c     1F 35 02 F1 | 	add	local08, local13
08d20     02 34 66 F0 | 	shl	local08, #2
08d24     03 00 00 FF 
08d28     00 E4 85 F1 | 	sub	objptr, ##1536
08d2c     F2 34 02 F1 | 	add	local08, objptr
08d30     04 34 06 F1 | 	add	local08, #4
08d34     1A 33 62 FC | 	wrlong	local07, local08
08d38     03 00 00 FF 
08d3c     00 E4 05 F1 | 	add	objptr, ##1536
08d40     F2 34 02 FB | 	rdlong	local08, objptr
08d44     1A 41 02 F6 | 	mov	local14, local08
08d48     01 40 66 F0 | 	shl	local14, #1
08d4c     1A 41 02 F1 | 	add	local14, local08
08d50     02 40 66 F0 | 	shl	local14, #2
08d54     03 00 00 FF 
08d58     00 E4 85 F1 | 	sub	objptr, ##1536
08d5c     F2 40 02 F1 | 	add	local14, objptr
08d60     08 40 06 F1 | 	add	local14, #8
08d64     20 39 62 FC | 	wrlong	local10, local14
08d68     03 00 00 FF 
08d6c     00 E4 05 F1 | 	add	objptr, ##1536
08d70     F2 34 02 FB | 	rdlong	local08, objptr
08d74     01 34 06 F1 | 	add	local08, #1
08d78     F2 34 62 FC | 	wrlong	local08, objptr
08d7c     44 2A 06 F6 | 	mov	local03, #68
08d80     13 35 02 F6 | 	mov	local08, local01
08d84     14 33 02 F6 | 	mov	local07, local02
08d88     15 39 02 F6 | 	mov	local10, local03
08d8c     F2 40 02 FB | 	rdlong	local14, objptr
08d90     20 3F 02 F6 | 	mov	local13, local14
08d94     01 3E 66 F0 | 	shl	local13, #1
08d98     20 3F 02 F1 | 	add	local13, local14
08d9c     02 3E 66 F0 | 	shl	local13, #2
08da0     03 00 00 FF 
08da4     00 E4 85 F1 | 	sub	objptr, ##1536
08da8     F2 3E 02 F1 | 	add	local13, objptr
08dac     1F 35 62 FC | 	wrlong	local08, local13
08db0     03 00 00 FF 
08db4     00 E4 05 F1 | 	add	objptr, ##1536
08db8     F2 40 02 FB | 	rdlong	local14, objptr
08dbc     20 3F 02 F6 | 	mov	local13, local14
08dc0     01 3E 66 F0 | 	shl	local13, #1
08dc4     20 3F 02 F1 | 	add	local13, local14
08dc8     02 3E 66 F0 | 	shl	local13, #2
08dcc     03 00 00 FF 
08dd0     00 E4 85 F1 | 	sub	objptr, ##1536
08dd4     F2 3E 02 F1 | 	add	local13, objptr
08dd8     04 3E 06 F1 | 	add	local13, #4
08ddc     1F 33 62 FC | 	wrlong	local07, local13
08de0     03 00 00 FF 
08de4     00 E4 05 F1 | 	add	objptr, ##1536
08de8     F2 3E 02 FB | 	rdlong	local13, objptr
08dec     1F 41 02 F6 | 	mov	local14, local13
08df0     01 40 66 F0 | 	shl	local14, #1
08df4     1F 41 02 F1 | 	add	local14, local13
08df8     02 40 66 F0 | 	shl	local14, #2
08dfc     03 00 00 FF 
08e00     00 E4 85 F1 | 	sub	objptr, ##1536
08e04     F2 40 02 F1 | 	add	local14, objptr
08e08     08 40 06 F1 | 	add	local14, #8
08e0c     20 39 62 FC | 	wrlong	local10, local14
08e10     03 00 00 FF 
08e14     00 E4 05 F1 | 	add	objptr, ##1536
08e18     F2 34 02 FB | 	rdlong	local08, objptr
08e1c     01 34 06 F1 | 	add	local08, #1
08e20     F2 34 62 FC | 	wrlong	local08, objptr
08e24     4A 00 00 FF 
08e28     7C E4 85 F1 | 	sub	objptr, ##38012
08e2c                 | LR__0814
08e2c                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08e2c     37 00 00 FF 
08e30     44 E4 05 F1 | 	add	objptr, ##28228
08e34     F2 34 02 FB | 	rdlong	local08, objptr
08e38     03 34 66 F0 | 	shl	local08, #3
08e3c     02 00 00 FF 
08e40     38 E4 85 F1 | 	sub	objptr, ##1080
08e44     F2 34 02 F1 | 	add	local08, objptr
08e48     04 34 06 F1 | 	add	local08, #4
08e4c     1A 41 02 FB | 	rdlong	local14, local08
08e50     12 40 0E F2 | 	cmp	local14, #18 wz
08e54     35 00 00 FF 
08e58     0C E4 85 F1 | 	sub	objptr, ##27148
08e5c     60 01 90 5D |  if_ne	jmp	#LR__0815
08e60     22 2A 06 F6 | 	mov	local03, #34
08e64     13 35 02 F6 | 	mov	local08, local01
08e68     14 33 02 F6 | 	mov	local07, local02
08e6c     15 39 02 F6 | 	mov	local10, local03
08e70     4A 00 00 FF 
08e74     7C E4 05 F1 | 	add	objptr, ##38012
08e78     F2 40 02 FB | 	rdlong	local14, objptr
08e7c     20 3F 02 F6 | 	mov	local13, local14
08e80     01 3E 66 F0 | 	shl	local13, #1
08e84     20 3F 02 F1 | 	add	local13, local14
08e88     02 3E 66 F0 | 	shl	local13, #2
08e8c     03 00 00 FF 
08e90     00 E4 85 F1 | 	sub	objptr, ##1536
08e94     F2 3E 02 F1 | 	add	local13, objptr
08e98     1F 35 62 FC | 	wrlong	local08, local13
08e9c     03 00 00 FF 
08ea0     00 E4 05 F1 | 	add	objptr, ##1536
08ea4     F2 40 02 FB | 	rdlong	local14, objptr
08ea8     20 35 02 F6 | 	mov	local08, local14
08eac     01 34 66 F0 | 	shl	local08, #1
08eb0     20 35 02 F1 | 	add	local08, local14
08eb4     02 34 66 F0 | 	shl	local08, #2
08eb8     03 00 00 FF 
08ebc     00 E4 85 F1 | 	sub	objptr, ##1536
08ec0     F2 34 02 F1 | 	add	local08, objptr
08ec4     04 34 06 F1 | 	add	local08, #4
08ec8     1A 33 62 FC | 	wrlong	local07, local08
08ecc     03 00 00 FF 
08ed0     00 E4 05 F1 | 	add	objptr, ##1536
08ed4     F2 34 02 FB | 	rdlong	local08, objptr
08ed8     1A 41 02 F6 | 	mov	local14, local08
08edc     01 40 66 F0 | 	shl	local14, #1
08ee0     1A 41 02 F1 | 	add	local14, local08
08ee4     02 40 66 F0 | 	shl	local14, #2
08ee8     03 00 00 FF 
08eec     00 E4 85 F1 | 	sub	objptr, ##1536
08ef0     F2 40 02 F1 | 	add	local14, objptr
08ef4     08 40 06 F1 | 	add	local14, #8
08ef8     20 39 62 FC | 	wrlong	local10, local14
08efc     03 00 00 FF 
08f00     00 E4 05 F1 | 	add	objptr, ##1536
08f04     F2 34 02 FB | 	rdlong	local08, objptr
08f08     01 34 06 F1 | 	add	local08, #1
08f0c     F2 34 62 FC | 	wrlong	local08, objptr
08f10     44 2A 06 F6 | 	mov	local03, #68
08f14     13 35 02 F6 | 	mov	local08, local01
08f18     14 33 02 F6 | 	mov	local07, local02
08f1c     15 39 02 F6 | 	mov	local10, local03
08f20     F2 40 02 FB | 	rdlong	local14, objptr
08f24     20 3F 02 F6 | 	mov	local13, local14
08f28     01 3E 66 F0 | 	shl	local13, #1
08f2c     20 3F 02 F1 | 	add	local13, local14
08f30     02 3E 66 F0 | 	shl	local13, #2
08f34     03 00 00 FF 
08f38     00 E4 85 F1 | 	sub	objptr, ##1536
08f3c     F2 3E 02 F1 | 	add	local13, objptr
08f40     1F 35 62 FC | 	wrlong	local08, local13
08f44     03 00 00 FF 
08f48     00 E4 05 F1 | 	add	objptr, ##1536
08f4c     F2 40 02 FB | 	rdlong	local14, objptr
08f50     20 3F 02 F6 | 	mov	local13, local14
08f54     01 3E 66 F0 | 	shl	local13, #1
08f58     20 3F 02 F1 | 	add	local13, local14
08f5c     02 3E 66 F0 | 	shl	local13, #2
08f60     03 00 00 FF 
08f64     00 E4 85 F1 | 	sub	objptr, ##1536
08f68     F2 3E 02 F1 | 	add	local13, objptr
08f6c     04 3E 06 F1 | 	add	local13, #4
08f70     1F 33 62 FC | 	wrlong	local07, local13
08f74     03 00 00 FF 
08f78     00 E4 05 F1 | 	add	objptr, ##1536
08f7c     F2 3E 02 FB | 	rdlong	local13, objptr
08f80     1F 41 02 F6 | 	mov	local14, local13
08f84     01 40 66 F0 | 	shl	local14, #1
08f88     1F 41 02 F1 | 	add	local14, local13
08f8c     02 40 66 F0 | 	shl	local14, #2
08f90     03 00 00 FF 
08f94     00 E4 85 F1 | 	sub	objptr, ##1536
08f98     F2 40 02 F1 | 	add	local14, objptr
08f9c     08 40 06 F1 | 	add	local14, #8
08fa0     20 39 62 FC | 	wrlong	local10, local14
08fa4     03 00 00 FF 
08fa8     00 E4 05 F1 | 	add	objptr, ##1536
08fac     F2 34 02 FB | 	rdlong	local08, objptr
08fb0     01 34 06 F1 | 	add	local08, #1
08fb4     F2 34 62 FC | 	wrlong	local08, objptr
08fb8     4A 00 00 FF 
08fbc     7C E4 85 F1 | 	sub	objptr, ##38012
08fc0                 | LR__0815
08fc0                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
08fc0     37 00 00 FF 
08fc4     44 E4 05 F1 | 	add	objptr, ##28228
08fc8     F2 34 02 FB | 	rdlong	local08, objptr
08fcc     03 34 66 F0 | 	shl	local08, #3
08fd0     02 00 00 FF 
08fd4     38 E4 85 F1 | 	sub	objptr, ##1080
08fd8     F2 34 02 F1 | 	add	local08, objptr
08fdc     04 34 06 F1 | 	add	local08, #4
08fe0     1A 41 02 FB | 	rdlong	local14, local08
08fe4     12 40 0E F2 | 	cmp	local14, #18 wz
08fe8     35 00 00 FF 
08fec     0C E4 85 F1 | 	sub	objptr, ##27148
08ff0     00 01 90 AD |  if_e	jmp	#LR__0816
08ff4     37 00 00 FF 
08ff8     44 E4 05 F1 | 	add	objptr, ##28228
08ffc     F2 34 02 FB | 	rdlong	local08, objptr
09000     03 34 66 F0 | 	shl	local08, #3
09004     02 00 00 FF 
09008     38 E4 85 F1 | 	sub	objptr, ##1080
0900c     F2 34 02 F1 | 	add	local08, objptr
09010     04 34 06 F1 | 	add	local08, #4
09014     1A 41 02 FB | 	rdlong	local14, local08
09018     11 40 0E F2 | 	cmp	local14, #17 wz
0901c     35 00 00 FF 
09020     0C E4 85 F1 | 	sub	objptr, ##27148
09024     CC 00 90 AD |  if_e	jmp	#LR__0816
09028     44 2A 06 F6 | 	mov	local03, #68
0902c     13 35 02 F6 | 	mov	local08, local01
09030     14 33 02 F6 | 	mov	local07, local02
09034     15 39 02 F6 | 	mov	local10, local03
09038     4A 00 00 FF 
0903c     7C E4 05 F1 | 	add	objptr, ##38012
09040     F2 40 02 FB | 	rdlong	local14, objptr
09044     20 3F 02 F6 | 	mov	local13, local14
09048     01 3E 66 F0 | 	shl	local13, #1
0904c     20 3F 02 F1 | 	add	local13, local14
09050     02 3E 66 F0 | 	shl	local13, #2
09054     03 00 00 FF 
09058     00 E4 85 F1 | 	sub	objptr, ##1536
0905c     F2 3E 02 F1 | 	add	local13, objptr
09060     1F 35 62 FC | 	wrlong	local08, local13
09064     03 00 00 FF 
09068     00 E4 05 F1 | 	add	objptr, ##1536
0906c     F2 40 02 FB | 	rdlong	local14, objptr
09070     20 3F 02 F6 | 	mov	local13, local14
09074     01 3E 66 F0 | 	shl	local13, #1
09078     20 3F 02 F1 | 	add	local13, local14
0907c     02 3E 66 F0 | 	shl	local13, #2
09080     03 00 00 FF 
09084     00 E4 85 F1 | 	sub	objptr, ##1536
09088     F2 3E 02 F1 | 	add	local13, objptr
0908c     04 3E 06 F1 | 	add	local13, #4
09090     1F 33 62 FC | 	wrlong	local07, local13
09094     03 00 00 FF 
09098     00 E4 05 F1 | 	add	objptr, ##1536
0909c     F2 3E 02 FB | 	rdlong	local13, objptr
090a0     1F 41 02 F6 | 	mov	local14, local13
090a4     01 40 66 F0 | 	shl	local14, #1
090a8     1F 41 02 F1 | 	add	local14, local13
090ac     02 40 66 F0 | 	shl	local14, #2
090b0     03 00 00 FF 
090b4     00 E4 85 F1 | 	sub	objptr, ##1536
090b8     F2 40 02 F1 | 	add	local14, objptr
090bc     08 40 06 F1 | 	add	local14, #8
090c0     20 39 62 FC | 	wrlong	local10, local14
090c4     03 00 00 FF 
090c8     00 E4 05 F1 | 	add	objptr, ##1536
090cc     F2 34 02 FB | 	rdlong	local08, objptr
090d0     01 34 06 F1 | 	add	local08, #1
090d4     F2 34 62 FC | 	wrlong	local08, objptr
090d8     13 00 00 FF 
090dc     38 E4 85 F1 | 	sub	objptr, ##9784
090e0     F2 34 02 FB | 	rdlong	local08, objptr
090e4     01 34 86 F1 | 	sub	local08, #1
090e8     F2 34 62 FC | 	wrlong	local08, objptr
090ec     37 00 00 FF 
090f0     44 E4 85 F1 | 	sub	objptr, ##28228
090f4                 | LR__0816
090f4     37 00 00 FF 
090f8     44 E4 05 F1 | 	add	objptr, ##28228
090fc     F2 34 02 FB | 	rdlong	local08, objptr
09100     01 34 06 F1 | 	add	local08, #1
09104     F2 34 62 FC | 	wrlong	local08, objptr
09108     37 00 00 FF 
0910c     44 E4 85 F1 | 	sub	objptr, ##28228
09110                 | LR__0817
09110     00 2E 06 F6 | 	mov	local05, #0
09114                 | ' i=0 : err=0
09114                 | ' if lparts(ct).token<>token_end then
09114     37 00 00 FF 
09118     44 E4 05 F1 | 	add	objptr, ##28228
0911c     F2 40 02 FB | 	rdlong	local14, objptr
09120     03 40 66 F0 | 	shl	local14, #3
09124     02 00 00 FF 
09128     38 E4 85 F1 | 	sub	objptr, ##1080
0912c     F2 40 02 F1 | 	add	local14, objptr
09130     04 40 06 F1 | 	add	local14, #4
09134     20 41 02 FB | 	rdlong	local14, local14
09138     FE 41 0E F2 | 	cmp	local14, #510 wz
0913c     35 00 00 FF 
09140     0C E4 85 F1 | 	sub	objptr, ##27148
09144     98 00 90 AD |  if_e	jmp	#LR__0819
09148                 | '   do
09148                 | LR__0818
09148     58 28 B0 FD | 	call	#_getaddr
0914c     FD 42 02 F6 | 	mov	local15, result1
09150     37 00 00 FF 
09154     44 E4 05 F1 | 	add	objptr, ##28228
09158     F2 40 02 FB | 	rdlong	local14, objptr
0915c     01 40 06 F1 | 	add	local14, #1
09160     F2 40 62 FC | 	wrlong	local14, objptr
09164     01 2E 06 F1 | 	add	local05, #1
09168                 | '     err=getaddr() :ct+=1
09168                 | '     i+=1 
09168                 | '     if lparts(ct).token=token_comma then ct+=1 
09168     03 40 66 F0 | 	shl	local14, #3
0916c     02 00 00 FF 
09170     38 E4 85 F1 | 	sub	objptr, ##1080
09174     F2 40 02 F1 | 	add	local14, objptr
09178     04 40 06 F1 | 	add	local14, #4
0917c     20 41 02 FB | 	rdlong	local14, local14
09180     11 40 0E F2 | 	cmp	local14, #17 wz
09184     35 00 00 FF 
09188     0C E4 85 F1 | 	sub	objptr, ##27148
0918c     37 00 00 AF 
09190     44 E4 05 A1 |  if_e	add	objptr, ##28228
09194     F2 34 02 AB |  if_e	rdlong	local08, objptr
09198     01 34 06 A1 |  if_e	add	local08, #1
0919c     F2 34 62 AC |  if_e	wrlong	local08, objptr
091a0     37 00 00 AF 
091a4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
091a8                 | '     if lparts(ct).token=token_end then exit loop
091a8     37 00 00 FF 
091ac     44 E4 05 F1 | 	add	objptr, ##28228
091b0     F2 40 02 FB | 	rdlong	local14, objptr
091b4     03 40 66 F0 | 	shl	local14, #3
091b8     02 00 00 FF 
091bc     38 E4 85 F1 | 	sub	objptr, ##1080
091c0     F2 40 02 F1 | 	add	local14, objptr
091c4     04 40 06 F1 | 	add	local14, #4
091c8     20 41 02 FB | 	rdlong	local14, local14
091cc     FE 41 0E F2 | 	cmp	local14, #510 wz
091d0     35 00 00 FF 
091d4     0C E4 85 F1 | 	sub	objptr, ##27148
091d8     08 00 90 AD |  if_e	jmp	#LR__0820
091dc     68 FF 9F FD | 	jmp	#LR__0818
091e0                 | LR__0819
091e0     36 42 06 F6 | 	mov	local15, #54
091e4                 | LR__0820
091e4                 | ' return i,err
091e4     17 FB 01 F6 | 	mov	result1, local05
091e8     21 FD 01 F6 | 	mov	result2, local15
091ec     A7 F0 03 F6 | 	mov	ptra, fp
091f0     B2 00 A0 FD | 	call	#popregs_
091f4                 | _compile_input_ret
091f4     2D 00 64 FD | 	ret
091f8                 | 
091f8                 | ' 
091f8                 | ' '----- compile assign to an array element
091f8                 | ' 
091f8                 | ' function compile_array_assign() as ulong 
091f8                 | _compile_array_assign
091f8     0B 4A 05 F6 | 	mov	COUNT_, #11
091fc     A8 00 A0 FD | 	call	#pushregs_
09200     00 2C 06 F6 | 	mov	local04, #0
09204     00 2E 06 F6 | 	mov	local05, #0
09208     37 00 00 FF 
0920c     44 E4 05 F1 | 	add	objptr, ##28228
09210     F2 30 02 FB | 	rdlong	local06, objptr
09214     18 FB 01 F6 | 	mov	result1, local06
09218     01 FA 85 F1 | 	sub	result1, #1
0921c     03 FA 65 F0 | 	shl	result1, #3
09220     02 00 00 FF 
09224     38 E4 85 F1 | 	sub	objptr, ##1080
09228     F2 FA 01 F1 | 	add	result1, objptr
0922c     FD 32 02 FB | 	rdlong	local07, result1
09230                 | ' numpar=0 : err=0
09230                 | ' varname$=lparts(ct-1).part$
09230                 | ' if lparts(ct).token=token_lpar then
09230     03 30 66 F0 | 	shl	local06, #3
09234     F2 30 02 F1 | 	add	local06, objptr
09238     04 30 06 F1 | 	add	local06, #4
0923c     18 31 02 FB | 	rdlong	local06, local06
09240     15 30 0E F2 | 	cmp	local06, #21 wz
09244     35 00 00 FF 
09248     0C E4 85 F1 | 	sub	objptr, ##27148
0924c     F4 01 90 5D |  if_ne	jmp	#LR__0834
09250     37 00 00 FF 
09254     44 E4 05 F1 | 	add	objptr, ##28228
09258     F2 34 02 FB | 	rdlong	local08, objptr
0925c     01 34 06 F1 | 	add	local08, #1
09260     F2 34 62 FC | 	wrlong	local08, objptr
09264     37 00 00 FF 
09268     44 E4 85 F1 | 	sub	objptr, ##28228
0926c                 | '   ct+=1 											' omit this lpar, this is for expr list
0926c                 | '   do
0926c                 | LR__0830
0926c     C8 2A B0 FD | 	call	#_expr
09270     37 00 00 FF 
09274     44 E4 05 F1 | 	add	objptr, ##28228
09278     F2 30 02 FB | 	rdlong	local06, objptr
0927c     01 30 06 F1 | 	add	local06, #1
09280     F2 30 62 FC | 	wrlong	local06, objptr
09284     01 2C 06 F1 | 	add	local04, #1
09288     01 30 86 F1 | 	sub	local06, #1
0928c     03 30 66 F0 | 	shl	local06, #3
09290     02 00 00 FF 
09294     38 E4 85 F1 | 	sub	objptr, ##1080
09298     F2 30 02 F1 | 	add	local06, objptr
0929c     04 30 06 F1 | 	add	local06, #4
092a0     18 35 02 FB | 	rdlong	local08, local06
092a4     14 34 0E F2 | 	cmp	local08, #20 wz
092a8     35 00 00 FF 
092ac     0C E4 85 F1 | 	sub	objptr, ##27148
092b0     34 00 90 AD |  if_e	jmp	#LR__0831
092b4     37 00 00 FF 
092b8     44 E4 05 F1 | 	add	objptr, ##28228
092bc     F2 34 02 FB | 	rdlong	local08, objptr
092c0     03 34 66 F0 | 	shl	local08, #3
092c4     02 00 00 FF 
092c8     38 E4 85 F1 | 	sub	objptr, ##1080
092cc     F2 34 02 F1 | 	add	local08, objptr
092d0     04 34 06 F1 | 	add	local08, #4
092d4     1A 35 02 FB | 	rdlong	local08, local08
092d8     FE 35 0E F2 | 	cmp	local08, #510 wz
092dc     35 00 00 FF 
092e0     0C E4 85 F1 | 	sub	objptr, ##27148
092e4     84 FF 9F 5D |  if_ne	jmp	#LR__0830
092e8                 | LR__0831
092e8     37 00 00 FF 
092ec     44 E4 05 F1 | 	add	objptr, ##28228
092f0     F2 34 02 FB | 	rdlong	local08, objptr
092f4     01 34 06 F1 | 	add	local08, #1
092f8     F2 34 62 FC | 	wrlong	local08, objptr
092fc     37 00 00 FF 
09300     44 E4 85 F1 | 	sub	objptr, ##28228
09304     30 2A B0 FD | 	call	#_expr
09308     01 36 66 F6 | 	neg	local09, #1
0930c     00 38 06 F6 | 	mov	local10, #0
09310                 | '   ct+=1 : expr()
09310                 | '   j=-1 : i=0 
09310                 | '   do 
09310                 | LR__0832
09310                 | '     if variables(i).name=varname$ then j=i: exit loop
09310     1C 31 02 F6 | 	mov	local06, local10
09314     04 30 66 F0 | 	shl	local06, #4
09318     14 00 00 FF 
0931c     F8 E5 05 F1 | 	add	objptr, ##10744
09320     F2 30 02 F1 | 	add	local06, objptr
09324     18 13 02 FB | 	rdlong	arg01, local06
09328     19 15 02 F6 | 	mov	arg02, local07
0932c     14 00 00 FF 
09330     F8 E5 85 F1 | 	sub	objptr, ##10744
09334     24 D4 B1 FD | 	call	#__system___string_cmp
09338     00 FA 0D F2 | 	cmp	result1, #0 wz
0933c     1C 37 02 A6 |  if_e	mov	local09, local10
09340     20 00 90 AD |  if_e	jmp	#LR__0833
09344     01 38 06 F1 | 	add	local10, #1
09348     35 00 00 FF 
0934c     08 E4 05 F1 | 	add	objptr, ##27144
09350     F2 34 02 FB | 	rdlong	local08, objptr
09354     35 00 00 FF 
09358     08 E4 85 F1 | 	sub	objptr, ##27144
0935c     1A 39 5A F2 | 	cmps	local10, local08 wcz
09360     AC FF 9F ED |  if_be	jmp	#LR__0832
09364                 | LR__0833
09364     1B 27 02 F6 | 	mov	local01, local09
09368     16 29 02 F6 | 	mov	local02, local04
0936c     17 2A 06 F6 | 	mov	local03, #23
09370     13 35 02 F6 | 	mov	local08, local01
09374     14 3B 02 F6 | 	mov	local11, local02
09378     15 33 02 F6 | 	mov	local07, local03
0937c     4A 00 00 FF 
09380     7C E4 05 F1 | 	add	objptr, ##38012
09384     F2 26 02 FB | 	rdlong	local01, objptr
09388     13 37 02 F6 | 	mov	local09, local01
0938c     01 36 66 F0 | 	shl	local09, #1
09390     13 37 02 F1 | 	add	local09, local01
09394     02 36 66 F0 | 	shl	local09, #2
09398     03 00 00 FF 
0939c     00 E4 85 F1 | 	sub	objptr, ##1536
093a0     F2 36 02 F1 | 	add	local09, objptr
093a4     1B 35 62 FC | 	wrlong	local08, local09
093a8     03 00 00 FF 
093ac     00 E4 05 F1 | 	add	objptr, ##1536
093b0     F2 26 02 FB | 	rdlong	local01, objptr
093b4     13 37 02 F6 | 	mov	local09, local01
093b8     01 36 66 F0 | 	shl	local09, #1
093bc     13 37 02 F1 | 	add	local09, local01
093c0     02 36 66 F0 | 	shl	local09, #2
093c4     03 00 00 FF 
093c8     00 E4 85 F1 | 	sub	objptr, ##1536
093cc     F2 36 02 F1 | 	add	local09, objptr
093d0     04 36 06 F1 | 	add	local09, #4
093d4     1B 3B 62 FC | 	wrlong	local11, local09
093d8     03 00 00 FF 
093dc     00 E4 05 F1 | 	add	objptr, ##1536
093e0     F2 3A 02 FB | 	rdlong	local11, objptr
093e4     1D 27 02 F6 | 	mov	local01, local11
093e8     01 26 66 F0 | 	shl	local01, #1
093ec     1D 27 02 F1 | 	add	local01, local11
093f0     02 26 66 F0 | 	shl	local01, #2
093f4     03 00 00 FF 
093f8     00 E4 85 F1 | 	sub	objptr, ##1536
093fc     F2 26 02 F1 | 	add	local01, objptr
09400     08 26 06 F1 | 	add	local01, #8
09404     13 33 62 FC | 	wrlong	local07, local01
09408     03 00 00 FF 
0940c     00 E4 05 F1 | 	add	objptr, ##1536
09410     F2 34 02 FB | 	rdlong	local08, objptr
09414     01 34 06 F1 | 	add	local08, #1
09418     F2 34 62 FC | 	wrlong	local08, objptr
0941c                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
0941c                 | '   if numpar>3 then err=45
0941c     04 2C 16 F2 | 	cmp	local04, #4 wc
09420     2D 2E 06 36 |  if_ae	mov	local05, #45
09424                 | '   if i>varnum then err=20
09424     15 00 00 FF 
09428     74 E4 85 F1 | 	sub	objptr, ##10868
0942c     F2 34 02 FB | 	rdlong	local08, objptr
09430     35 00 00 FF 
09434     08 E4 85 F1 | 	sub	objptr, ##27144
09438     1A 39 5A F2 | 	cmps	local10, local08 wcz
0943c     14 2E 06 16 |  if_a	mov	local05, #20
09440     04 00 90 FD | 	jmp	#LR__0835
09444                 | LR__0834
09444     0E 2E 06 F6 | 	mov	local05, #14
09448                 | LR__0835
09448                 | ' return err
09448     17 FB 01 F6 | 	mov	result1, local05
0944c     A7 F0 03 F6 | 	mov	ptra, fp
09450     B2 00 A0 FD | 	call	#popregs_
09454                 | _compile_array_assign_ret
09454     2D 00 64 FD | 	ret
09458                 | 
09458                 | ' 
09458                 | ' '----- compile print command with its ";" and "," modifiers
09458                 | ' 
09458                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
09458                 | _compile_print
09458     0B 4A 05 F6 | 	mov	COUNT_, #11
0945c     A8 00 A0 FD | 	call	#pushregs_
09460     00 26 06 F6 | 	mov	local01, #0
09464     1D 2A 06 F6 | 	mov	local03, #29
09468                 | ' t1.result.uresult=0 : t1.result_type=result_uint
09468                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
09468     37 00 00 FF 
0946c     44 E4 05 F1 | 	add	objptr, ##28228
09470     F2 2C 02 FB | 	rdlong	local04, objptr
09474     03 2C 66 F0 | 	shl	local04, #3
09478     02 00 00 FF 
0947c     38 E4 85 F1 | 	sub	objptr, ##1080
09480     F2 2C 02 F1 | 	add	local04, objptr
09484     04 2C 06 F1 | 	add	local04, #4
09488     16 2D 02 FB | 	rdlong	local04, local04
0948c     FE 2D 0E F2 | 	cmp	local04, #510 wz
09490     35 00 00 FF 
09494     0C E4 85 F1 | 	sub	objptr, ##27148
09498     68 01 90 5D |  if_ne	jmp	#LR__0840
0949c     20 2A 06 F6 | 	mov	local03, #32
094a0     13 2F 02 F6 | 	mov	local05, local01
094a4     14 31 02 F6 | 	mov	local06, local02
094a8     15 33 02 F6 | 	mov	local07, local03
094ac     4A 00 00 FF 
094b0     7C E4 05 F1 | 	add	objptr, ##38012
094b4     F2 34 02 FB | 	rdlong	local08, objptr
094b8     1A 37 02 F6 | 	mov	local09, local08
094bc     01 36 66 F0 | 	shl	local09, #1
094c0     1A 37 02 F1 | 	add	local09, local08
094c4     02 36 66 F0 | 	shl	local09, #2
094c8     03 00 00 FF 
094cc     00 E4 85 F1 | 	sub	objptr, ##1536
094d0     F2 36 02 F1 | 	add	local09, objptr
094d4     1B 2F 62 FC | 	wrlong	local05, local09
094d8     03 00 00 FF 
094dc     00 E4 05 F1 | 	add	objptr, ##1536
094e0     F2 2E 02 FB | 	rdlong	local05, objptr
094e4     17 39 02 F6 | 	mov	local10, local05
094e8     01 38 66 F0 | 	shl	local10, #1
094ec     17 39 02 F1 | 	add	local10, local05
094f0     02 38 66 F0 | 	shl	local10, #2
094f4     03 00 00 FF 
094f8     00 E4 85 F1 | 	sub	objptr, ##1536
094fc     F2 38 02 F1 | 	add	local10, objptr
09500     04 38 06 F1 | 	add	local10, #4
09504     1C 31 62 FC | 	wrlong	local06, local10
09508     03 00 00 FF 
0950c     00 E4 05 F1 | 	add	objptr, ##1536
09510     F2 2E 02 FB | 	rdlong	local05, objptr
09514     17 3B 02 F6 | 	mov	local11, local05
09518     01 3A 66 F0 | 	shl	local11, #1
0951c     17 3B 02 F1 | 	add	local11, local05
09520     02 3A 66 F0 | 	shl	local11, #2
09524     03 00 00 FF 
09528     00 E4 85 F1 | 	sub	objptr, ##1536
0952c     F2 3A 02 F1 | 	add	local11, objptr
09530     08 3A 06 F1 | 	add	local11, #8
09534     1D 33 62 FC | 	wrlong	local07, local11
09538     03 00 00 FF 
0953c     00 E4 05 F1 | 	add	objptr, ##1536
09540     F2 2E 02 FB | 	rdlong	local05, objptr
09544     01 2E 06 F1 | 	add	local05, #1
09548     F2 2E 62 FC | 	wrlong	local05, objptr
0954c     44 2A 06 F6 | 	mov	local03, #68
09550     13 2F 02 F6 | 	mov	local05, local01
09554     14 31 02 F6 | 	mov	local06, local02
09558     15 33 02 F6 | 	mov	local07, local03
0955c     F2 34 02 FB | 	rdlong	local08, objptr
09560     1A 37 02 F6 | 	mov	local09, local08
09564     01 36 66 F0 | 	shl	local09, #1
09568     1A 37 02 F1 | 	add	local09, local08
0956c     02 36 66 F0 | 	shl	local09, #2
09570     03 00 00 FF 
09574     00 E4 85 F1 | 	sub	objptr, ##1536
09578     F2 36 02 F1 | 	add	local09, objptr
0957c     1B 2F 62 FC | 	wrlong	local05, local09
09580     03 00 00 FF 
09584     00 E4 05 F1 | 	add	objptr, ##1536
09588     F2 3A 02 FB | 	rdlong	local11, objptr
0958c     1D 39 02 F6 | 	mov	local10, local11
09590     01 38 66 F0 | 	shl	local10, #1
09594     1D 39 02 F1 | 	add	local10, local11
09598     02 38 66 F0 | 	shl	local10, #2
0959c     03 00 00 FF 
095a0     00 E4 85 F1 | 	sub	objptr, ##1536
095a4     F2 38 02 F1 | 	add	local10, objptr
095a8     04 38 06 F1 | 	add	local10, #4
095ac     1C 31 62 FC | 	wrlong	local06, local10
095b0     03 00 00 FF 
095b4     00 E4 05 F1 | 	add	objptr, ##1536
095b8     F2 38 02 FB | 	rdlong	local10, objptr
095bc     1C 3B 02 F6 | 	mov	local11, local10
095c0     01 3A 66 F0 | 	shl	local11, #1
095c4     1C 3B 02 F1 | 	add	local11, local10
095c8     02 3A 66 F0 | 	shl	local11, #2
095cc     03 00 00 FF 
095d0     00 E4 85 F1 | 	sub	objptr, ##1536
095d4     F2 3A 02 F1 | 	add	local11, objptr
095d8     08 3A 06 F1 | 	add	local11, #8
095dc     1D 33 62 FC | 	wrlong	local07, local11
095e0     03 00 00 FF 
095e4     00 E4 05 F1 | 	add	objptr, ##1536
095e8     F2 2E 02 FB | 	rdlong	local05, objptr
095ec     01 2E 06 F1 | 	add	local05, #1
095f0     F2 2E 62 FC | 	wrlong	local05, objptr
095f4     4A 00 00 FF 
095f8     7C E4 85 F1 | 	sub	objptr, ##38012
095fc     00 FA 05 F6 | 	mov	result1, #0
09600     20 05 90 FD | 	jmp	#LR__0847
09604                 | LR__0840
09604                 | ' do
09604                 | LR__0841
09604     30 27 B0 FD | 	call	#_expr
09608                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
09608                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09608     37 00 00 FF 
0960c     44 E4 05 F1 | 	add	objptr, ##28228
09610     F2 2C 02 FB | 	rdlong	local04, objptr
09614     03 2C 66 F0 | 	shl	local04, #3
09618     02 00 00 FF 
0961c     38 E4 85 F1 | 	sub	objptr, ##1080
09620     F2 2C 02 F1 | 	add	local04, objptr
09624     04 2C 06 F1 | 	add	local04, #4
09628     16 35 02 FB | 	rdlong	local08, local04
0962c     11 34 0E F2 | 	cmp	local08, #17 wz
09630     35 00 00 FF 
09634     0C E4 85 F1 | 	sub	objptr, ##27148
09638     60 01 90 5D |  if_ne	jmp	#LR__0842
0963c     21 2A 06 F6 | 	mov	local03, #33
09640     13 2F 02 F6 | 	mov	local05, local01
09644     14 31 02 F6 | 	mov	local06, local02
09648     15 33 02 F6 | 	mov	local07, local03
0964c     4A 00 00 FF 
09650     7C E4 05 F1 | 	add	objptr, ##38012
09654     F2 34 02 FB | 	rdlong	local08, objptr
09658     1A 37 02 F6 | 	mov	local09, local08
0965c     01 36 66 F0 | 	shl	local09, #1
09660     1A 37 02 F1 | 	add	local09, local08
09664     02 36 66 F0 | 	shl	local09, #2
09668     03 00 00 FF 
0966c     00 E4 85 F1 | 	sub	objptr, ##1536
09670     F2 36 02 F1 | 	add	local09, objptr
09674     1B 2F 62 FC | 	wrlong	local05, local09
09678     03 00 00 FF 
0967c     00 E4 05 F1 | 	add	objptr, ##1536
09680     F2 3A 02 FB | 	rdlong	local11, objptr
09684     1D 39 02 F6 | 	mov	local10, local11
09688     01 38 66 F0 | 	shl	local10, #1
0968c     1D 39 02 F1 | 	add	local10, local11
09690     02 38 66 F0 | 	shl	local10, #2
09694     03 00 00 FF 
09698     00 E4 85 F1 | 	sub	objptr, ##1536
0969c     F2 38 02 F1 | 	add	local10, objptr
096a0     04 38 06 F1 | 	add	local10, #4
096a4     1C 31 62 FC | 	wrlong	local06, local10
096a8     03 00 00 FF 
096ac     00 E4 05 F1 | 	add	objptr, ##1536
096b0     F2 2E 02 FB | 	rdlong	local05, objptr
096b4     17 3B 02 F6 | 	mov	local11, local05
096b8     01 3A 66 F0 | 	shl	local11, #1
096bc     17 3B 02 F1 | 	add	local11, local05
096c0     02 3A 66 F0 | 	shl	local11, #2
096c4     03 00 00 FF 
096c8     00 E4 85 F1 | 	sub	objptr, ##1536
096cc     F2 3A 02 F1 | 	add	local11, objptr
096d0     08 3A 06 F1 | 	add	local11, #8
096d4     1D 33 62 FC | 	wrlong	local07, local11
096d8     03 00 00 FF 
096dc     00 E4 05 F1 | 	add	objptr, ##1536
096e0     F2 2E 02 FB | 	rdlong	local05, objptr
096e4     01 2E 06 F1 | 	add	local05, #1
096e8     F2 2E 62 FC | 	wrlong	local05, objptr
096ec     44 2A 06 F6 | 	mov	local03, #68
096f0     13 2F 02 F6 | 	mov	local05, local01
096f4     14 31 02 F6 | 	mov	local06, local02
096f8     15 33 02 F6 | 	mov	local07, local03
096fc     F2 34 02 FB | 	rdlong	local08, objptr
09700     1A 37 02 F6 | 	mov	local09, local08
09704     01 36 66 F0 | 	shl	local09, #1
09708     1A 37 02 F1 | 	add	local09, local08
0970c     02 36 66 F0 | 	shl	local09, #2
09710     03 00 00 FF 
09714     00 E4 85 F1 | 	sub	objptr, ##1536
09718     F2 36 02 F1 | 	add	local09, objptr
0971c     1B 2F 62 FC | 	wrlong	local05, local09
09720     03 00 00 FF 
09724     00 E4 05 F1 | 	add	objptr, ##1536
09728     F2 3A 02 FB | 	rdlong	local11, objptr
0972c     1D 39 02 F6 | 	mov	local10, local11
09730     01 38 66 F0 | 	shl	local10, #1
09734     1D 39 02 F1 | 	add	local10, local11
09738     02 38 66 F0 | 	shl	local10, #2
0973c     03 00 00 FF 
09740     00 E4 85 F1 | 	sub	objptr, ##1536
09744     F2 38 02 F1 | 	add	local10, objptr
09748     04 38 06 F1 | 	add	local10, #4
0974c     1C 31 62 FC | 	wrlong	local06, local10
09750     03 00 00 FF 
09754     00 E4 05 F1 | 	add	objptr, ##1536
09758     F2 38 02 FB | 	rdlong	local10, objptr
0975c     1C 3B 02 F6 | 	mov	local11, local10
09760     01 3A 66 F0 | 	shl	local11, #1
09764     1C 3B 02 F1 | 	add	local11, local10
09768     02 3A 66 F0 | 	shl	local11, #2
0976c     03 00 00 FF 
09770     00 E4 85 F1 | 	sub	objptr, ##1536
09774     F2 3A 02 F1 | 	add	local11, objptr
09778     08 3A 06 F1 | 	add	local11, #8
0977c     1D 33 62 FC | 	wrlong	local07, local11
09780     03 00 00 FF 
09784     00 E4 05 F1 | 	add	objptr, ##1536
09788     F2 2E 02 FB | 	rdlong	local05, objptr
0978c     01 2E 06 F1 | 	add	local05, #1
09790     F2 2E 62 FC | 	wrlong	local05, objptr
09794     4A 00 00 FF 
09798     7C E4 85 F1 | 	sub	objptr, ##38012
0979c                 | LR__0842
0979c                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0979c     37 00 00 FF 
097a0     44 E4 05 F1 | 	add	objptr, ##28228
097a4     F2 2C 02 FB | 	rdlong	local04, objptr
097a8     03 2C 66 F0 | 	shl	local04, #3
097ac     02 00 00 FF 
097b0     38 E4 85 F1 | 	sub	objptr, ##1080
097b4     F2 2C 02 F1 | 	add	local04, objptr
097b8     04 2C 06 F1 | 	add	local04, #4
097bc     16 35 02 FB | 	rdlong	local08, local04
097c0     12 34 0E F2 | 	cmp	local08, #18 wz
097c4     35 00 00 FF 
097c8     0C E4 85 F1 | 	sub	objptr, ##27148
097cc     60 01 90 5D |  if_ne	jmp	#LR__0843
097d0     22 2A 06 F6 | 	mov	local03, #34
097d4     13 2F 02 F6 | 	mov	local05, local01
097d8     14 31 02 F6 | 	mov	local06, local02
097dc     15 33 02 F6 | 	mov	local07, local03
097e0     4A 00 00 FF 
097e4     7C E4 05 F1 | 	add	objptr, ##38012
097e8     F2 34 02 FB | 	rdlong	local08, objptr
097ec     1A 37 02 F6 | 	mov	local09, local08
097f0     01 36 66 F0 | 	shl	local09, #1
097f4     1A 37 02 F1 | 	add	local09, local08
097f8     02 36 66 F0 | 	shl	local09, #2
097fc     03 00 00 FF 
09800     00 E4 85 F1 | 	sub	objptr, ##1536
09804     F2 36 02 F1 | 	add	local09, objptr
09808     1B 2F 62 FC | 	wrlong	local05, local09
0980c     03 00 00 FF 
09810     00 E4 05 F1 | 	add	objptr, ##1536
09814     F2 3A 02 FB | 	rdlong	local11, objptr
09818     1D 39 02 F6 | 	mov	local10, local11
0981c     01 38 66 F0 | 	shl	local10, #1
09820     1D 39 02 F1 | 	add	local10, local11
09824     02 38 66 F0 | 	shl	local10, #2
09828     03 00 00 FF 
0982c     00 E4 85 F1 | 	sub	objptr, ##1536
09830     F2 38 02 F1 | 	add	local10, objptr
09834     04 38 06 F1 | 	add	local10, #4
09838     1C 31 62 FC | 	wrlong	local06, local10
0983c     03 00 00 FF 
09840     00 E4 05 F1 | 	add	objptr, ##1536
09844     F2 2E 02 FB | 	rdlong	local05, objptr
09848     17 3B 02 F6 | 	mov	local11, local05
0984c     01 3A 66 F0 | 	shl	local11, #1
09850     17 3B 02 F1 | 	add	local11, local05
09854     02 3A 66 F0 | 	shl	local11, #2
09858     03 00 00 FF 
0985c     00 E4 85 F1 | 	sub	objptr, ##1536
09860     F2 3A 02 F1 | 	add	local11, objptr
09864     08 3A 06 F1 | 	add	local11, #8
09868     1D 33 62 FC | 	wrlong	local07, local11
0986c     03 00 00 FF 
09870     00 E4 05 F1 | 	add	objptr, ##1536
09874     F2 2E 02 FB | 	rdlong	local05, objptr
09878     01 2E 06 F1 | 	add	local05, #1
0987c     F2 2E 62 FC | 	wrlong	local05, objptr
09880     44 2A 06 F6 | 	mov	local03, #68
09884     13 2F 02 F6 | 	mov	local05, local01
09888     14 31 02 F6 | 	mov	local06, local02
0988c     15 33 02 F6 | 	mov	local07, local03
09890     F2 34 02 FB | 	rdlong	local08, objptr
09894     1A 37 02 F6 | 	mov	local09, local08
09898     01 36 66 F0 | 	shl	local09, #1
0989c     1A 37 02 F1 | 	add	local09, local08
098a0     02 36 66 F0 | 	shl	local09, #2
098a4     03 00 00 FF 
098a8     00 E4 85 F1 | 	sub	objptr, ##1536
098ac     F2 36 02 F1 | 	add	local09, objptr
098b0     1B 2F 62 FC | 	wrlong	local05, local09
098b4     03 00 00 FF 
098b8     00 E4 05 F1 | 	add	objptr, ##1536
098bc     F2 3A 02 FB | 	rdlong	local11, objptr
098c0     1D 39 02 F6 | 	mov	local10, local11
098c4     01 38 66 F0 | 	shl	local10, #1
098c8     1D 39 02 F1 | 	add	local10, local11
098cc     02 38 66 F0 | 	shl	local10, #2
098d0     03 00 00 FF 
098d4     00 E4 85 F1 | 	sub	objptr, ##1536
098d8     F2 38 02 F1 | 	add	local10, objptr
098dc     04 38 06 F1 | 	add	local10, #4
098e0     1C 31 62 FC | 	wrlong	local06, local10
098e4     03 00 00 FF 
098e8     00 E4 05 F1 | 	add	objptr, ##1536
098ec     F2 38 02 FB | 	rdlong	local10, objptr
098f0     1C 3B 02 F6 | 	mov	local11, local10
098f4     01 3A 66 F0 | 	shl	local11, #1
098f8     1C 3B 02 F1 | 	add	local11, local10
098fc     02 3A 66 F0 | 	shl	local11, #2
09900     03 00 00 FF 
09904     00 E4 85 F1 | 	sub	objptr, ##1536
09908     F2 3A 02 F1 | 	add	local11, objptr
0990c     08 3A 06 F1 | 	add	local11, #8
09910     1D 33 62 FC | 	wrlong	local07, local11
09914     03 00 00 FF 
09918     00 E4 05 F1 | 	add	objptr, ##1536
0991c     F2 2E 02 FB | 	rdlong	local05, objptr
09920     01 2E 06 F1 | 	add	local05, #1
09924     F2 2E 62 FC | 	wrlong	local05, objptr
09928     4A 00 00 FF 
0992c     7C E4 85 F1 | 	sub	objptr, ##38012
09930                 | LR__0843
09930                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09930     37 00 00 FF 
09934     44 E4 05 F1 | 	add	objptr, ##28228
09938     F2 2C 02 FB | 	rdlong	local04, objptr
0993c     03 2C 66 F0 | 	shl	local04, #3
09940     02 00 00 FF 
09944     38 E4 85 F1 | 	sub	objptr, ##1080
09948     F2 2C 02 F1 | 	add	local04, objptr
0994c     04 2C 06 F1 | 	add	local04, #4
09950     16 35 02 FB | 	rdlong	local08, local04
09954     FE 35 0E F2 | 	cmp	local08, #510 wz
09958     35 00 00 FF 
0995c     0C E4 85 F1 | 	sub	objptr, ##27148
09960     B8 00 90 5D |  if_ne	jmp	#LR__0844
09964     44 2A 06 F6 | 	mov	local03, #68
09968     13 2F 02 F6 | 	mov	local05, local01
0996c     14 31 02 F6 | 	mov	local06, local02
09970     15 33 02 F6 | 	mov	local07, local03
09974     4A 00 00 FF 
09978     7C E4 05 F1 | 	add	objptr, ##38012
0997c     F2 34 02 FB | 	rdlong	local08, objptr
09980     1A 37 02 F6 | 	mov	local09, local08
09984     01 36 66 F0 | 	shl	local09, #1
09988     1A 37 02 F1 | 	add	local09, local08
0998c     02 36 66 F0 | 	shl	local09, #2
09990     03 00 00 FF 
09994     00 E4 85 F1 | 	sub	objptr, ##1536
09998     F2 36 02 F1 | 	add	local09, objptr
0999c     1B 2F 62 FC | 	wrlong	local05, local09
099a0     03 00 00 FF 
099a4     00 E4 05 F1 | 	add	objptr, ##1536
099a8     F2 3A 02 FB | 	rdlong	local11, objptr
099ac     1D 39 02 F6 | 	mov	local10, local11
099b0     01 38 66 F0 | 	shl	local10, #1
099b4     1D 39 02 F1 | 	add	local10, local11
099b8     02 38 66 F0 | 	shl	local10, #2
099bc     03 00 00 FF 
099c0     00 E4 85 F1 | 	sub	objptr, ##1536
099c4     F2 38 02 F1 | 	add	local10, objptr
099c8     04 38 06 F1 | 	add	local10, #4
099cc     1C 31 62 FC | 	wrlong	local06, local10
099d0     03 00 00 FF 
099d4     00 E4 05 F1 | 	add	objptr, ##1536
099d8     F2 38 02 FB | 	rdlong	local10, objptr
099dc     1C 3B 02 F6 | 	mov	local11, local10
099e0     01 3A 66 F0 | 	shl	local11, #1
099e4     1C 3B 02 F1 | 	add	local11, local10
099e8     02 3A 66 F0 | 	shl	local11, #2
099ec     03 00 00 FF 
099f0     00 E4 85 F1 | 	sub	objptr, ##1536
099f4     F2 3A 02 F1 | 	add	local11, objptr
099f8     08 3A 06 F1 | 	add	local11, #8
099fc     1D 33 62 FC | 	wrlong	local07, local11
09a00     03 00 00 FF 
09a04     00 E4 05 F1 | 	add	objptr, ##1536
09a08     F2 2E 02 FB | 	rdlong	local05, objptr
09a0c     01 2E 06 F1 | 	add	local05, #1
09a10     F2 2E 62 FC | 	wrlong	local05, objptr
09a14     4A 00 00 FF 
09a18     7C E4 85 F1 | 	sub	objptr, ##38012
09a1c                 | LR__0844
09a1c                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09a1c     37 00 00 FF 
09a20     44 E4 05 F1 | 	add	objptr, ##28228
09a24     F2 2C 02 FB | 	rdlong	local04, objptr
09a28     03 2C 66 F0 | 	shl	local04, #3
09a2c     02 00 00 FF 
09a30     38 E4 85 F1 | 	sub	objptr, ##1080
09a34     F2 2C 02 F1 | 	add	local04, objptr
09a38     04 2C 06 F1 | 	add	local04, #4
09a3c     16 35 02 FB | 	rdlong	local08, local04
09a40     11 34 0E F2 | 	cmp	local08, #17 wz
09a44     35 00 00 FF 
09a48     0C E4 85 F1 | 	sub	objptr, ##27148
09a4c     6C 00 90 AD |  if_e	jmp	#LR__0845
09a50     37 00 00 FF 
09a54     44 E4 05 F1 | 	add	objptr, ##28228
09a58     F2 34 02 FB | 	rdlong	local08, objptr
09a5c     03 34 66 F0 | 	shl	local08, #3
09a60     02 00 00 FF 
09a64     38 E4 85 F1 | 	sub	objptr, ##1080
09a68     F2 34 02 F1 | 	add	local08, objptr
09a6c     04 34 06 F1 | 	add	local08, #4
09a70     1A 35 02 FB | 	rdlong	local08, local08
09a74     12 34 0E F2 | 	cmp	local08, #18 wz
09a78     35 00 00 FF 
09a7c     0C E4 85 F1 | 	sub	objptr, ##27148
09a80     38 00 90 AD |  if_e	jmp	#LR__0845
09a84     37 00 00 FF 
09a88     44 E4 05 F1 | 	add	objptr, ##28228
09a8c     F2 3A 02 FB | 	rdlong	local11, objptr
09a90     03 3A 66 F0 | 	shl	local11, #3
09a94     02 00 00 FF 
09a98     38 E4 85 F1 | 	sub	objptr, ##1080
09a9c     F2 3A 02 F1 | 	add	local11, objptr
09aa0     04 3A 06 F1 | 	add	local11, #4
09aa4     1D 3B 02 FB | 	rdlong	local11, local11
09aa8     FE 3B 0E F2 | 	cmp	local11, #510 wz
09aac     35 00 00 FF 
09ab0     0C E4 85 F1 | 	sub	objptr, ##27148
09ab4     16 FA 05 56 |  if_ne	mov	result1, #22
09ab8     68 00 90 5D |  if_ne	jmp	#LR__0847
09abc                 | LR__0845
09abc     37 00 00 FF 
09ac0     44 E4 05 F1 | 	add	objptr, ##28228
09ac4     F2 2C 02 FB | 	rdlong	local04, objptr
09ac8     01 2C 06 F1 | 	add	local04, #1
09acc     F2 2C 62 FC | 	wrlong	local04, objptr
09ad0     03 2C 66 F0 | 	shl	local04, #3
09ad4     02 00 00 FF 
09ad8     38 E4 85 F1 | 	sub	objptr, ##1080
09adc     F2 2C 02 F1 | 	add	local04, objptr
09ae0     04 2C 06 F1 | 	add	local04, #4
09ae4     16 35 02 FB | 	rdlong	local08, local04
09ae8     FE 35 0E F2 | 	cmp	local08, #510 wz
09aec     35 00 00 FF 
09af0     0C E4 85 F1 | 	sub	objptr, ##27148
09af4     28 00 90 AD |  if_e	jmp	#LR__0846
09af8     37 00 00 FF 
09afc     44 E4 05 F1 | 	add	objptr, ##28228
09b00     F2 3A 02 FB | 	rdlong	local11, objptr
09b04     0E 00 00 FF 
09b08     1C E4 05 F1 | 	add	objptr, ##7196
09b0c     F2 38 02 FB | 	rdlong	local10, objptr
09b10     45 00 00 FF 
09b14     60 E4 85 F1 | 	sub	objptr, ##35424
09b18     1C 3B 52 F2 | 	cmps	local11, local10 wc
09b1c     E4 FA 9F CD |  if_b	jmp	#LR__0841
09b20                 | LR__0846
09b20                 | ' return 0
09b20     00 FA 05 F6 | 	mov	result1, #0
09b24                 | LR__0847
09b24     A7 F0 03 F6 | 	mov	ptra, fp
09b28     B2 00 A0 FD | 	call	#popregs_
09b2c                 | _compile_print_ret
09b2c     2D 00 64 FD | 	ret
09b30                 | 
09b30                 | ' 
09b30                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09b30                 | ' 
09b30                 | ' function compile_if(aline as ulong) as ulong  
09b30                 | _compile_if
09b30     09 4A 05 F6 | 	mov	COUNT_, #9
09b34     A8 00 A0 FD | 	call	#pushregs_
09b38                 | _compile_if_enter
09b38     09 2D 02 F6 | 	mov	local04, arg01
09b3c                 | ' return expr()
09b3c     F8 21 B0 FD | 	call	#_expr
09b40     37 00 00 FF 
09b44     44 E4 05 F1 | 	add	objptr, ##28228
09b48     F2 14 02 FB | 	rdlong	arg02, objptr
09b4c     0A 2F 02 F6 | 	mov	local05, arg02
09b50     03 2E 66 F0 | 	shl	local05, #3
09b54     02 00 00 FF 
09b58     38 E4 85 F1 | 	sub	objptr, ##1080
09b5c     F2 2E 02 F1 | 	add	local05, objptr
09b60     04 2E 06 F1 | 	add	local05, #4
09b64     17 2F 02 FB | 	rdlong	local05, local05
09b68     01 14 06 F1 | 	add	arg02, #1
09b6c     02 00 00 FF 
09b70     38 E4 05 F1 | 	add	objptr, ##1080
09b74     F2 14 62 FC | 	wrlong	arg02, objptr
09b78     37 00 00 FF 
09b7c     44 E4 85 F1 | 	sub	objptr, ##28228
09b80                 | ' 
09b80                 | ' err=compile_fun_1p()
09b80                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09b80     5B 2E 0E F2 | 	cmp	local05, #91 wz
09b84     34 FA 05 56 |  if_ne	mov	result1, #52
09b88     20 01 90 5D |  if_ne	jmp	#LR__0852
09b8c     58 2A 06 F6 | 	mov	local03, #88
09b90     13 31 02 F6 | 	mov	local06, local01
09b94     14 33 02 F6 | 	mov	local07, local02
09b98     15 15 02 F6 | 	mov	arg02, local03
09b9c     4A 00 00 FF 
09ba0     7C E4 05 F1 | 	add	objptr, ##38012
09ba4     F2 12 02 FB | 	rdlong	arg01, objptr
09ba8     09 35 02 F6 | 	mov	local08, arg01
09bac     01 34 66 F0 | 	shl	local08, #1
09bb0     09 35 02 F1 | 	add	local08, arg01
09bb4     02 34 66 F0 | 	shl	local08, #2
09bb8     03 00 00 FF 
09bbc     00 E4 85 F1 | 	sub	objptr, ##1536
09bc0     F2 34 02 F1 | 	add	local08, objptr
09bc4     1A 31 62 FC | 	wrlong	local06, local08
09bc8     03 00 00 FF 
09bcc     00 E4 05 F1 | 	add	objptr, ##1536
09bd0     F2 30 02 FB | 	rdlong	local06, objptr
09bd4     18 13 02 F6 | 	mov	arg01, local06
09bd8     01 12 66 F0 | 	shl	arg01, #1
09bdc     18 13 02 F1 | 	add	arg01, local06
09be0     02 12 66 F0 | 	shl	arg01, #2
09be4     03 00 00 FF 
09be8     00 E4 85 F1 | 	sub	objptr, ##1536
09bec     F2 12 02 F1 | 	add	arg01, objptr
09bf0     04 12 06 F1 | 	add	arg01, #4
09bf4     09 33 62 FC | 	wrlong	local07, arg01
09bf8     03 00 00 FF 
09bfc     00 E4 05 F1 | 	add	objptr, ##1536
09c00     F2 30 02 FB | 	rdlong	local06, objptr
09c04     18 13 02 F6 | 	mov	arg01, local06
09c08     01 12 66 F0 | 	shl	arg01, #1
09c0c     18 13 02 F1 | 	add	arg01, local06
09c10     02 12 66 F0 | 	shl	arg01, #2
09c14     03 00 00 FF 
09c18     00 E4 85 F1 | 	sub	objptr, ##1536
09c1c     F2 12 02 F1 | 	add	arg01, objptr
09c20     08 12 06 F1 | 	add	arg01, #8
09c24     09 15 62 FC | 	wrlong	arg02, arg01
09c28     03 00 00 FF 
09c2c     00 E4 05 F1 | 	add	objptr, ##1536
09c30     F2 30 02 FB | 	rdlong	local06, objptr
09c34     01 30 06 F1 | 	add	local06, #1
09c38     F2 30 62 FC | 	wrlong	local06, objptr
09c3c                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09c3c                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09c3c     13 00 00 FF 
09c40     38 E4 85 F1 | 	sub	objptr, ##9784
09c44     F2 14 02 FB | 	rdlong	arg02, objptr
09c48     01 14 06 F1 | 	add	arg02, #1
09c4c     03 14 66 F0 | 	shl	arg02, #3
09c50     02 00 00 FF 
09c54     38 E4 85 F1 | 	sub	objptr, ##1080
09c58     F2 14 02 F1 | 	add	arg02, objptr
09c5c     0A 13 02 FB | 	rdlong	arg01, arg02
09c60     35 00 00 FF 
09c64     0C E4 85 F1 | 	sub	objptr, ##27148
09c68                 | ' 
09c68                 | ' select case s
09c68     B2 01 00 FF 
09c6c     76 14 06 F6 | 	mov	arg02, ##@LR__5547
09c70     E8 CA B1 FD | 	call	#__system___string_cmp
09c74     00 FA 0D F2 | 	cmp	result1, #0 wz
09c78     1B FA 05 A6 |  if_e	mov	result1, #27
09c7c     00 FA 05 56 |  if_ne	mov	result1, #0
09c80     00 FA 0D F2 | 	cmp	result1, #0 wz
09c84     10 00 90 AD |  if_e	jmp	#LR__0850
09c88     05 12 06 F6 | 	mov	arg01, #5
09c8c     38 E4 BF FD | 	call	#_compile_immediate_assign
09c90     FD 36 02 F6 | 	mov	local09, result1
09c94     10 00 90 FD | 	jmp	#LR__0851
09c98                 | LR__0850
09c98     05 12 06 F6 | 	mov	arg01, #5
09c9c     16 15 02 F6 | 	mov	arg02, local04
09ca0     7C DA BF FD | 	call	#_compile_immediate
09ca4     FD 36 02 F6 | 	mov	local09, result1
09ca8                 | LR__0851
09ca8                 | ' return err
09ca8     1B FB 01 F6 | 	mov	result1, local09
09cac                 | LR__0852
09cac     A7 F0 03 F6 | 	mov	ptra, fp
09cb0     B2 00 A0 FD | 	call	#popregs_
09cb4                 | _compile_if_ret
09cb4     2D 00 64 FD | 	ret
09cb8                 | 
09cb8                 | ' 
09cb8                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09cb8                 | ' 
09cb8                 | ' function compile_else(aline as ulong) as ulong  
09cb8                 | _compile_else
09cb8     07 4A 05 F6 | 	mov	COUNT_, #7
09cbc     A8 00 A0 FD | 	call	#pushregs_
09cc0                 | _compile_else_enter
09cc0     09 2D 02 F6 | 	mov	local04, arg01
09cc4     5A 2A 06 F6 | 	mov	local03, #90
09cc8     13 2F 02 F6 | 	mov	local05, local01
09ccc     14 31 02 F6 | 	mov	local06, local02
09cd0     15 27 02 F6 | 	mov	local01, local03
09cd4     4A 00 00 FF 
09cd8     7C E4 05 F1 | 	add	objptr, ##38012
09cdc     F2 14 02 FB | 	rdlong	arg02, objptr
09ce0     0A 13 02 F6 | 	mov	arg01, arg02
09ce4     01 12 66 F0 | 	shl	arg01, #1
09ce8     0A 13 02 F1 | 	add	arg01, arg02
09cec     02 12 66 F0 | 	shl	arg01, #2
09cf0     03 00 00 FF 
09cf4     00 E4 85 F1 | 	sub	objptr, ##1536
09cf8     F2 12 02 F1 | 	add	arg01, objptr
09cfc     09 2F 62 FC | 	wrlong	local05, arg01
09d00     03 00 00 FF 
09d04     00 E4 05 F1 | 	add	objptr, ##1536
09d08     F2 2E 02 FB | 	rdlong	local05, objptr
09d0c     17 15 02 F6 | 	mov	arg02, local05
09d10     01 14 66 F0 | 	shl	arg02, #1
09d14     17 15 02 F1 | 	add	arg02, local05
09d18     02 14 66 F0 | 	shl	arg02, #2
09d1c     03 00 00 FF 
09d20     00 E4 85 F1 | 	sub	objptr, ##1536
09d24     F2 14 02 F1 | 	add	arg02, objptr
09d28     04 14 06 F1 | 	add	arg02, #4
09d2c     0A 31 62 FC | 	wrlong	local06, arg02
09d30     03 00 00 FF 
09d34     00 E4 05 F1 | 	add	objptr, ##1536
09d38     F2 30 02 FB | 	rdlong	local06, objptr
09d3c     18 2F 02 F6 | 	mov	local05, local06
09d40     01 2E 66 F0 | 	shl	local05, #1
09d44     18 2F 02 F1 | 	add	local05, local06
09d48     02 2E 66 F0 | 	shl	local05, #2
09d4c     03 00 00 FF 
09d50     00 E4 85 F1 | 	sub	objptr, ##1536
09d54     F2 2E 02 F1 | 	add	local05, objptr
09d58     08 2E 06 F1 | 	add	local05, #8
09d5c     17 27 62 FC | 	wrlong	local01, local05
09d60     03 00 00 FF 
09d64     00 E4 05 F1 | 	add	objptr, ##1536
09d68     F2 2E 02 FB | 	rdlong	local05, objptr
09d6c     01 2E 06 F1 | 	add	local05, #1
09d70     F2 2E 62 FC | 	wrlong	local05, objptr
09d74                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09d74                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09d74     13 00 00 FF 
09d78     38 E4 85 F1 | 	sub	objptr, ##9784
09d7c     F2 30 02 FB | 	rdlong	local06, objptr
09d80     01 30 06 F1 | 	add	local06, #1
09d84     03 30 66 F0 | 	shl	local06, #3
09d88     02 00 00 FF 
09d8c     38 E4 85 F1 | 	sub	objptr, ##1080
09d90     F2 30 02 F1 | 	add	local06, objptr
09d94     18 13 02 FB | 	rdlong	arg01, local06
09d98     35 00 00 FF 
09d9c     0C E4 85 F1 | 	sub	objptr, ##27148
09da0                 | ' 
09da0                 | ' select case s
09da0     B2 01 00 FF 
09da4     76 14 06 F6 | 	mov	arg02, ##@LR__5547
09da8     B0 C9 B1 FD | 	call	#__system___string_cmp
09dac     00 FA 0D F2 | 	cmp	result1, #0 wz
09db0     1B FA 05 A6 |  if_e	mov	result1, #27
09db4     00 FA 05 56 |  if_ne	mov	result1, #0
09db8     00 FA 0D F2 | 	cmp	result1, #0 wz
09dbc     10 00 90 AD |  if_e	jmp	#LR__0860
09dc0     05 12 06 F6 | 	mov	arg01, #5
09dc4     00 E3 BF FD | 	call	#_compile_immediate_assign
09dc8     FD 32 02 F6 | 	mov	local07, result1
09dcc     10 00 90 FD | 	jmp	#LR__0861
09dd0                 | LR__0860
09dd0     05 12 06 F6 | 	mov	arg01, #5
09dd4     16 15 02 F6 | 	mov	arg02, local04
09dd8     44 D9 BF FD | 	call	#_compile_immediate
09ddc     FD 32 02 F6 | 	mov	local07, result1
09de0                 | LR__0861
09de0                 | ' return err
09de0     19 FB 01 F6 | 	mov	result1, local07
09de4     A7 F0 03 F6 | 	mov	ptra, fp
09de8     B2 00 A0 FD | 	call	#popregs_
09dec                 | _compile_else_ret
09dec     2D 00 64 FD | 	ret
09df0                 | 
09df0                 | ' 
09df0                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09df0                 | ' 
09df0                 | ' function compile_dim() as ulong  
09df0                 | _compile_dim
09df0     11 4A 05 F6 | 	mov	COUNT_, #17
09df4     A8 00 A0 FD | 	call	#pushregs_
09df8     01 26 06 F6 | 	mov	local01, #1
09dfc     01 28 06 F6 | 	mov	local02, #1
09e00     01 2A 06 F6 | 	mov	local03, #1
09e04                 | ' 
09e04                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09e04                 | ' if isname(lparts(ct).part$) then 
09e04     37 00 00 FF 
09e08     44 E4 05 F1 | 	add	objptr, ##28228
09e0c     F2 18 02 FB | 	rdlong	arg04, objptr
09e10     03 18 66 F0 | 	shl	arg04, #3
09e14     02 00 00 FF 
09e18     38 E4 85 F1 | 	sub	objptr, ##1080
09e1c     F2 18 02 F1 | 	add	arg04, objptr
09e20     0C 13 02 FB | 	rdlong	arg01, arg04
09e24     35 00 00 FF 
09e28     0C E4 85 F1 | 	sub	objptr, ##27148
09e2c     48 C7 BF FD | 	call	#_isname
09e30     00 FA 0D F2 | 	cmp	result1, #0 wz
09e34     78 05 90 AD |  if_e	jmp	#LR__0893
09e38     37 00 00 FF 
09e3c     44 E4 05 F1 | 	add	objptr, ##28228
09e40     F2 2C 02 FB | 	rdlong	local04, objptr
09e44     03 2C 66 F0 | 	shl	local04, #3
09e48     02 00 00 FF 
09e4c     38 E4 85 F1 | 	sub	objptr, ##1080
09e50     F2 2C 02 F1 | 	add	local04, objptr
09e54     16 2F 02 FB | 	rdlong	local05, local04
09e58     01 30 66 F6 | 	neg	local06, #1
09e5c                 | '   varname2$=lparts(ct).part$ 
09e5c                 | '   j=-1
09e5c                 | '   if varnum>0 then
09e5c     04 E4 85 F1 | 	sub	objptr, #4
09e60     F2 32 02 FB | 	rdlong	local07, objptr
09e64     35 00 00 FF 
09e68     08 E4 85 F1 | 	sub	objptr, ##27144
09e6c     01 32 56 F2 | 	cmps	local07, #1 wc
09e70     58 00 90 CD |  if_b	jmp	#LR__0872
09e74                 | '     for i=0 to varnum-1
09e74     00 34 06 F6 | 	mov	local08, #0
09e78     35 00 00 FF 
09e7c     08 E4 05 F1 | 	add	objptr, ##27144
09e80     F2 36 02 FB | 	rdlong	local09, objptr
09e84     35 00 00 FF 
09e88     08 E4 85 F1 | 	sub	objptr, ##27144
09e8c                 | LR__0870
09e8c     1B 35 52 F2 | 	cmps	local08, local09 wc
09e90     38 00 90 3D |  if_ae	jmp	#LR__0871
09e94                 | '       if variables(i).name=varname2$ then j=i : exit
09e94     1A 2D 02 F6 | 	mov	local04, local08
09e98     04 2C 66 F0 | 	shl	local04, #4
09e9c     14 00 00 FF 
09ea0     F8 E5 05 F1 | 	add	objptr, ##10744
09ea4     F2 2C 02 F1 | 	add	local04, objptr
09ea8     16 13 02 FB | 	rdlong	arg01, local04
09eac     17 15 02 F6 | 	mov	arg02, local05
09eb0     14 00 00 FF 
09eb4     F8 E5 85 F1 | 	sub	objptr, ##10744
09eb8     A0 C8 B1 FD | 	call	#__system___string_cmp
09ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
09ec0     1A 31 02 A6 |  if_e	mov	local06, local08
09ec4     01 34 06 51 |  if_ne	add	local08, #1
09ec8     C0 FF 9F 5D |  if_ne	jmp	#LR__0870
09ecc                 | LR__0871
09ecc                 | LR__0872
09ecc                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
09ecc     FF FF 7F FF 
09ed0     FF 31 0E F2 | 	cmp	local06, ##-1 wz
09ed4     35 00 00 AF 
09ed8     08 E4 05 A1 |  if_e	add	objptr, ##27144
09edc     F2 30 02 AB |  if_e	rdlong	local06, objptr
09ee0     35 00 00 AF 
09ee4     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09ee8     78 00 90 AD |  if_e	jmp	#LR__0873
09eec     00 12 06 F6 | 	mov	arg01, #0
09ef0     68 25 B2 FD | 	call	#__system___getiolock_0603
09ef4     FD 12 02 F6 | 	mov	arg01, result1
09ef8     38 C8 B1 FD | 	call	#__system___lockmem
09efc     B4 01 00 FF 
09f00     07 15 06 F6 | 	mov	arg02, ##@LR__5801
09f04     00 12 06 F6 | 	mov	arg01, #0
09f08     00 16 06 F6 | 	mov	arg03, #0
09f0c     18 D5 B1 FD | 	call	#__system___basic_print_string
09f10     52 00 00 FF 
09f14     B0 E4 05 F1 | 	add	objptr, ##42160
09f18     F2 14 02 FB | 	rdlong	arg02, objptr
09f1c     52 00 00 FF 
09f20     B0 E4 85 F1 | 	sub	objptr, ##42160
09f24     00 12 06 F6 | 	mov	arg01, #0
09f28     00 16 06 F6 | 	mov	arg03, #0
09f2c     0A 18 06 F6 | 	mov	arg04, #10
09f30     78 D5 B1 FD | 	call	#__system___basic_print_unsigned
09f34     B4 01 00 FF 
09f38     15 15 06 F6 | 	mov	arg02, ##@LR__5802
09f3c     00 12 06 F6 | 	mov	arg01, #0
09f40     00 16 06 F6 | 	mov	arg03, #0
09f44     E0 D4 B1 FD | 	call	#__system___basic_print_string
09f48     00 12 06 F6 | 	mov	arg01, #0
09f4c     0A 14 06 F6 | 	mov	arg02, #10
09f50     00 16 06 F6 | 	mov	arg03, #0
09f54     78 D4 B1 FD | 	call	#__system___basic_print_char
09f58     00 12 06 F6 | 	mov	arg01, #0
09f5c     FC 24 B2 FD | 	call	#__system___getiolock_0603
09f60     FD 00 68 FC | 	wrlong	#0, result1
09f64                 | LR__0873
09f64                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
09f64     37 00 00 FF 
09f68     44 E4 05 F1 | 	add	objptr, ##28228
09f6c     F2 14 02 FB | 	rdlong	arg02, objptr
09f70     01 14 06 F1 | 	add	arg02, #1
09f74     03 14 66 F0 | 	shl	arg02, #3
09f78     02 00 00 FF 
09f7c     38 E4 85 F1 | 	sub	objptr, ##1080
09f80     F2 14 02 F1 | 	add	arg02, objptr
09f84     0A 13 02 FB | 	rdlong	arg01, arg02
09f88     B4 01 00 FF 
09f8c     36 15 06 F6 | 	mov	arg02, ##@LR__5803
09f90     35 00 00 FF 
09f94     0C E4 85 F1 | 	sub	objptr, ##27148
09f98     C0 C7 B1 FD | 	call	#__system___string_cmp
09f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
09fa0     44 00 90 AD |  if_e	jmp	#LR__0874
09fa4     37 00 00 FF 
09fa8     44 E4 05 F1 | 	add	objptr, ##28228
09fac     F2 36 02 FB | 	rdlong	local09, objptr
09fb0     01 36 06 F1 | 	add	local09, #1
09fb4     03 36 66 F0 | 	shl	local09, #3
09fb8     02 00 00 FF 
09fbc     38 E4 85 F1 | 	sub	objptr, ##1080
09fc0     F2 36 02 F1 | 	add	local09, objptr
09fc4     1B 13 02 FB | 	rdlong	arg01, local09
09fc8     B4 01 00 FF 
09fcc     38 15 06 F6 | 	mov	arg02, ##@LR__5804
09fd0     35 00 00 FF 
09fd4     0C E4 85 F1 | 	sub	objptr, ##27148
09fd8     80 C7 B1 FD | 	call	#__system___string_cmp
09fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
09fe0     2B FA 05 56 |  if_ne	mov	result1, #43
09fe4     D0 04 90 5D |  if_ne	jmp	#LR__0895
09fe8                 | LR__0874
09fe8                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
09fe8     37 00 00 FF 
09fec     44 E4 05 F1 | 	add	objptr, ##28228
09ff0     F2 14 02 FB | 	rdlong	arg02, objptr
09ff4     01 14 06 F1 | 	add	arg02, #1
09ff8     03 14 66 F0 | 	shl	arg02, #3
09ffc     02 00 00 FF 
0a000     38 E4 85 F1 | 	sub	objptr, ##1080
0a004     F2 14 02 F1 | 	add	arg02, objptr
0a008     0A 13 02 FB | 	rdlong	arg01, arg02
0a00c     B4 01 00 FF 
0a010     3B 15 06 F6 | 	mov	arg02, ##@LR__5805
0a014     35 00 00 FF 
0a018     0C E4 85 F1 | 	sub	objptr, ##27148
0a01c     3C C7 B1 FD | 	call	#__system___string_cmp
0a020     00 FA 0D F2 | 	cmp	result1, #0 wz
0a024     37 00 00 AF 
0a028     44 E4 05 A1 |  if_e	add	objptr, ##28228
0a02c     F2 38 02 AB |  if_e	rdlong	local10, objptr
0a030     37 00 00 AF 
0a034     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0a038     01 38 06 A1 |  if_e	add	local10, #1
0a03c     5C 01 90 AD |  if_e	jmp	#LR__0879
0a040     37 00 00 FF 
0a044     44 E4 05 F1 | 	add	objptr, ##28228
0a048     F2 38 02 FB | 	rdlong	local10, objptr
0a04c     37 00 00 FF 
0a050     44 E4 85 F1 | 	sub	objptr, ##28228
0a054     02 38 06 F1 | 	add	local10, #2
0a058     00 3A 06 F6 | 	mov	local11, #0
0a05c                 | '   l=ct+2 : m=0 : do
0a05c                 | LR__0875
0a05c                 | '   if isdec(lparts(l).part$) then 
0a05c     1C 2D 02 F6 | 	mov	local04, local10
0a060     03 2C 66 F0 | 	shl	local04, #3
0a064     35 00 00 FF 
0a068     0C E4 05 F1 | 	add	objptr, ##27148
0a06c     F2 2C 02 F1 | 	add	local04, objptr
0a070     16 13 02 FB | 	rdlong	arg01, local04
0a074     35 00 00 FF 
0a078     0C E4 85 F1 | 	sub	objptr, ##27148
0a07c     FC CD BF FD | 	call	#_isdec
0a080     00 FA 0D F2 | 	cmp	result1, #0 wz
0a084     44 00 90 AD |  if_e	jmp	#LR__0876
0a088     1D 3D 02 F6 | 	mov	local12, local11
0a08c     13 3D 06 F1 | 	add	local12, #local01
0a090     1C 37 02 F6 | 	mov	local09, local10
0a094     03 36 66 F0 | 	shl	local09, #3
0a098     35 00 00 FF 
0a09c     0C E4 05 F1 | 	add	objptr, ##27148
0a0a0     F2 36 02 F1 | 	add	local09, objptr
0a0a4     1B 13 02 FB | 	rdlong	arg01, local09
0a0a8     00 14 06 F6 | 	mov	arg02, #0
0a0ac     35 00 00 FF 
0a0b0     0C E4 85 F1 | 	sub	objptr, ##27148
0a0b4     6C FB B1 FD | 	call	#__system____builtin_atoi
0a0b8     FD 3E 02 F6 | 	mov	local13, result1
0a0bc                 | 	'.live	local13
0a0bc                 | 	'.live	local12
0a0bc     00 3C 8E F9 | 	altd	local12, #0
0a0c0     1F 3D 02 F6 | 	mov	local12, local13
0a0c4     01 3A 06 F1 | 	add	local11, #1
0a0c8     08 00 90 FD | 	jmp	#LR__0877
0a0cc                 | LR__0876
0a0cc                 | '     return(17)
0a0cc     11 FA 05 F6 | 	mov	result1, #17
0a0d0     E4 03 90 FD | 	jmp	#LR__0895
0a0d4                 | LR__0877
0a0d4                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a0d4     1C 2D 02 F6 | 	mov	local04, local10
0a0d8     01 2C 06 F1 | 	add	local04, #1
0a0dc     03 2C 66 F0 | 	shl	local04, #3
0a0e0     35 00 00 FF 
0a0e4     0C E4 05 F1 | 	add	objptr, ##27148
0a0e8     F2 2C 02 F1 | 	add	local04, objptr
0a0ec     16 13 02 FB | 	rdlong	arg01, local04
0a0f0     B4 01 00 FF 
0a0f4     3E 15 06 F6 | 	mov	arg02, ##@LR__5806
0a0f8     35 00 00 FF 
0a0fc     0C E4 85 F1 | 	sub	objptr, ##27148
0a100     58 C6 B1 FD | 	call	#__system___string_cmp
0a104     00 FA 0D F2 | 	cmp	result1, #0 wz
0a108     3C 00 90 AD |  if_e	jmp	#LR__0878
0a10c     1C 3F 02 F6 | 	mov	local13, local10
0a110     01 3E 06 F1 | 	add	local13, #1
0a114     03 3E 66 F0 | 	shl	local13, #3
0a118     35 00 00 FF 
0a11c     0C E4 05 F1 | 	add	objptr, ##27148
0a120     F2 3E 02 F1 | 	add	local13, objptr
0a124     1F 13 02 FB | 	rdlong	arg01, local13
0a128     B4 01 00 FF 
0a12c     40 15 06 F6 | 	mov	arg02, ##@LR__5807
0a130     35 00 00 FF 
0a134     0C E4 85 F1 | 	sub	objptr, ##27148
0a138     20 C6 B1 FD | 	call	#__system___string_cmp
0a13c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a140     2C FA 05 56 |  if_ne	mov	result1, #44
0a144     70 03 90 5D |  if_ne	jmp	#LR__0895
0a148                 | LR__0878
0a148     02 38 06 F1 | 	add	local10, #2
0a14c     1C 2D 02 F6 | 	mov	local04, local10
0a150     01 2C 86 F1 | 	sub	local04, #1
0a154     03 2C 66 F0 | 	shl	local04, #3
0a158     35 00 00 FF 
0a15c     0C E4 05 F1 | 	add	objptr, ##27148
0a160     F2 2C 02 F1 | 	add	local04, objptr
0a164     16 13 02 FB | 	rdlong	arg01, local04
0a168     B4 01 00 FF 
0a16c     42 15 06 F6 | 	mov	arg02, ##@LR__5808
0a170     35 00 00 FF 
0a174     0C E4 85 F1 | 	sub	objptr, ##27148
0a178     E0 C5 B1 FD | 	call	#__system___string_cmp
0a17c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a180     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
0a184     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0875
0a188                 | '   if m>3 then return 45
0a188     04 3A 56 F2 | 	cmps	local11, #4 wc
0a18c     2D FA 05 36 |  if_ae	mov	result1, #45
0a190     24 03 90 3D |  if_ae	jmp	#LR__0895
0a194     00 41 06 F6 | 	mov	local14, #256
0a198     0C 42 06 F6 | 	mov	local15, #12
0a19c                 | LR__0879
0a19c                 | '   arraytype=array_no_type : esize=12
0a19c                 | ' 1350 
0a19c                 | '   if lparts(l).part$="as" then
0a19c     1C 2D 02 F6 | 	mov	local04, local10
0a1a0     03 2C 66 F0 | 	shl	local04, #3
0a1a4     35 00 00 FF 
0a1a8     0C E4 05 F1 | 	add	objptr, ##27148
0a1ac     F2 2C 02 F1 | 	add	local04, objptr
0a1b0     16 13 02 FB | 	rdlong	arg01, local04
0a1b4     B4 01 00 FF 
0a1b8     44 15 06 F6 | 	mov	arg02, ##@LR__5809
0a1bc     35 00 00 FF 
0a1c0     0C E4 85 F1 | 	sub	objptr, ##27148
0a1c4     94 C5 B1 FD | 	call	#__system___string_cmp
0a1c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1cc     E8 01 90 5D |  if_ne	jmp	#LR__0894
0a1d0                 | '     select case lparts(l+1).part$
0a1d0     1C 3D 02 F6 | 	mov	local12, local10
0a1d4     01 3C 06 F1 | 	add	local12, #1
0a1d8     03 3C 66 F0 | 	shl	local12, #3
0a1dc     35 00 00 FF 
0a1e0     0C E4 05 F1 | 	add	objptr, ##27148
0a1e4     F2 3C 02 F1 | 	add	local12, objptr
0a1e8     1E 45 02 FB | 	rdlong	local16, local12
0a1ec     B4 01 00 FF 
0a1f0     47 15 06 F6 | 	mov	arg02, ##@LR__5810
0a1f4     22 13 02 F6 | 	mov	arg01, local16
0a1f8     35 00 00 FF 
0a1fc     0C E4 85 F1 | 	sub	objptr, ##27148
0a200     58 C5 B1 FD | 	call	#__system___string_cmp
0a204     00 FA 0D F2 | 	cmp	result1, #0 wz
0a208     0C 01 90 AD |  if_e	jmp	#LR__0880
0a20c     B4 01 00 FF 
0a210     4C 15 06 F6 | 	mov	arg02, ##@LR__5811
0a214     22 13 02 F6 | 	mov	arg01, local16
0a218     40 C5 B1 FD | 	call	#__system___string_cmp
0a21c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a220     00 01 90 AD |  if_e	jmp	#LR__0881
0a224     B4 01 00 FF 
0a228     52 15 06 F6 | 	mov	arg02, ##@LR__5812
0a22c     22 13 02 F6 | 	mov	arg01, local16
0a230     28 C5 B1 FD | 	call	#__system___string_cmp
0a234     00 FA 0D F2 | 	cmp	result1, #0 wz
0a238     F4 00 90 AD |  if_e	jmp	#LR__0882
0a23c     B4 01 00 FF 
0a240     58 15 06 F6 | 	mov	arg02, ##@LR__5813
0a244     22 13 02 F6 | 	mov	arg01, local16
0a248     10 C5 B1 FD | 	call	#__system___string_cmp
0a24c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a250     E8 00 90 AD |  if_e	jmp	#LR__0883
0a254     B4 01 00 FF 
0a258     5F 15 06 F6 | 	mov	arg02, ##@LR__5814
0a25c     22 13 02 F6 | 	mov	arg01, local16
0a260     F8 C4 B1 FD | 	call	#__system___string_cmp
0a264     00 FA 0D F2 | 	cmp	result1, #0 wz
0a268     DC 00 90 AD |  if_e	jmp	#LR__0884
0a26c     B4 01 00 FF 
0a270     64 15 06 F6 | 	mov	arg02, ##@LR__5815
0a274     22 13 02 F6 | 	mov	arg01, local16
0a278     E0 C4 B1 FD | 	call	#__system___string_cmp
0a27c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a280     D0 00 90 AD |  if_e	jmp	#LR__0885
0a284     B4 01 00 FF 
0a288     6C 15 06 F6 | 	mov	arg02, ##@LR__5816
0a28c     22 13 02 F6 | 	mov	arg01, local16
0a290     C8 C4 B1 FD | 	call	#__system___string_cmp
0a294     00 FA 0D F2 | 	cmp	result1, #0 wz
0a298     C4 00 90 AD |  if_e	jmp	#LR__0886
0a29c     B4 01 00 FF 
0a2a0     72 15 06 F6 | 	mov	arg02, ##@LR__5817
0a2a4     22 13 02 F6 | 	mov	arg01, local16
0a2a8     B0 C4 B1 FD | 	call	#__system___string_cmp
0a2ac     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2b0     B8 00 90 AD |  if_e	jmp	#LR__0887
0a2b4     B4 01 00 FF 
0a2b8     78 15 06 F6 | 	mov	arg02, ##@LR__5818
0a2bc     22 13 02 F6 | 	mov	arg01, local16
0a2c0     98 C4 B1 FD | 	call	#__system___string_cmp
0a2c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2c8     AC 00 90 AD |  if_e	jmp	#LR__0888
0a2cc     B4 01 00 FF 
0a2d0     7F 15 06 F6 | 	mov	arg02, ##@LR__5819
0a2d4     22 13 02 F6 | 	mov	arg01, local16
0a2d8     80 C4 B1 FD | 	call	#__system___string_cmp
0a2dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2e0     A0 00 90 AD |  if_e	jmp	#LR__0889
0a2e4     B4 01 00 FF 
0a2e8     86 15 06 F6 | 	mov	arg02, ##@LR__5820
0a2ec     22 13 02 F6 | 	mov	arg01, local16
0a2f0     68 C4 B1 FD | 	call	#__system___string_cmp
0a2f4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2f8     94 00 90 AD |  if_e	jmp	#LR__0890
0a2fc     B4 01 00 FF 
0a300     8D 15 06 F6 | 	mov	arg02, ##@LR__5821
0a304     22 13 02 F6 | 	mov	arg01, local16
0a308     50 C4 B1 FD | 	call	#__system___string_cmp
0a30c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a310     88 00 90 AD |  if_e	jmp	#LR__0891
0a314     90 00 90 FD | 	jmp	#LR__0892
0a318                 | LR__0880
0a318     01 41 06 F6 | 	mov	local14, #257
0a31c     01 42 06 F6 | 	mov	local15, #1
0a320     94 00 90 FD | 	jmp	#LR__0894
0a324                 | LR__0881
0a324     02 41 06 F6 | 	mov	local14, #258
0a328     01 42 06 F6 | 	mov	local15, #1
0a32c     88 00 90 FD | 	jmp	#LR__0894
0a330                 | LR__0882
0a330     03 41 06 F6 | 	mov	local14, #259
0a334     02 42 06 F6 | 	mov	local15, #2
0a338     7C 00 90 FD | 	jmp	#LR__0894
0a33c                 | LR__0883
0a33c     04 41 06 F6 | 	mov	local14, #260
0a340     02 42 06 F6 | 	mov	local15, #2
0a344     70 00 90 FD | 	jmp	#LR__0894
0a348                 | LR__0884
0a348     05 41 06 F6 | 	mov	local14, #261
0a34c     04 42 06 F6 | 	mov	local15, #4
0a350     64 00 90 FD | 	jmp	#LR__0894
0a354                 | LR__0885
0a354     05 41 06 F6 | 	mov	local14, #261
0a358     04 42 06 F6 | 	mov	local15, #4
0a35c     58 00 90 FD | 	jmp	#LR__0894
0a360                 | LR__0886
0a360     06 41 06 F6 | 	mov	local14, #262
0a364     04 42 06 F6 | 	mov	local15, #4
0a368     4C 00 90 FD | 	jmp	#LR__0894
0a36c                 | LR__0887
0a36c     07 41 06 F6 | 	mov	local14, #263
0a370     08 42 06 F6 | 	mov	local15, #8
0a374     40 00 90 FD | 	jmp	#LR__0894
0a378                 | LR__0888
0a378     08 41 06 F6 | 	mov	local14, #264
0a37c     08 42 06 F6 | 	mov	local15, #8
0a380     34 00 90 FD | 	jmp	#LR__0894
0a384                 | LR__0889
0a384     09 41 06 F6 | 	mov	local14, #265
0a388     04 42 06 F6 | 	mov	local15, #4
0a38c     28 00 90 FD | 	jmp	#LR__0894
0a390                 | LR__0890
0a390     0A 41 06 F6 | 	mov	local14, #266
0a394     08 42 06 F6 | 	mov	local15, #8
0a398     1C 00 90 FD | 	jmp	#LR__0894
0a39c                 | LR__0891
0a39c     0B 41 06 F6 | 	mov	local14, #267
0a3a0     04 42 06 F6 | 	mov	local15, #4
0a3a4     10 00 90 FD | 	jmp	#LR__0894
0a3a8                 | LR__0892
0a3a8     2F FA 05 F6 | 	mov	result1, #47
0a3ac     08 01 90 FD | 	jmp	#LR__0895
0a3b0                 | LR__0893
0a3b0                 | '   return 46
0a3b0     2E FA 05 F6 | 	mov	result1, #46
0a3b4     00 01 90 FD | 	jmp	#LR__0895
0a3b8                 | LR__0894
0a3b8     13 43 02 FD | 	qmul	local15, local01
0a3bc     18 32 62 FD | 	getqx	local07
0a3c0     14 33 02 FD | 	qmul	local07, local02
0a3c4     18 44 62 FD | 	getqx	local16
0a3c8     15 45 02 FD | 	qmul	local16, local03
0a3cc     52 00 00 FF 
0a3d0     98 E4 05 F1 | 	add	objptr, ##42136
0a3d4     F2 46 02 FB | 	rdlong	local17, objptr
0a3d8     20 15 02 F6 | 	mov	arg02, local14
0a3dc     18 44 62 FD | 	getqx	local16
0a3e0     22 47 82 F1 | 	sub	local17, local16
0a3e4     10 46 86 F1 | 	sub	local17, #16
0a3e8     0F 46 26 F5 | 	andn	local17, #15
0a3ec     F2 46 62 FC | 	wrlong	local17, objptr
0a3f0     52 00 00 FF 
0a3f4     98 E4 85 F1 | 	sub	objptr, ##42136
0a3f8     23 13 02 F6 | 	mov	arg01, local17
0a3fc     30 8B B1 FD | 	call	#_psdpoke
0a400     23 13 02 F6 | 	mov	arg01, local17
0a404     02 12 06 F1 | 	add	arg01, #2
0a408     21 15 02 F6 | 	mov	arg02, local15
0a40c     20 8B B1 FD | 	call	#_psdpoke
0a410     23 13 02 F6 | 	mov	arg01, local17
0a414     04 12 06 F1 | 	add	arg01, #4
0a418     13 15 02 F6 | 	mov	arg02, local01
0a41c     C8 8A B1 FD | 	call	#_pslpoke
0a420     23 13 02 F6 | 	mov	arg01, local17
0a424     08 12 06 F1 | 	add	arg01, #8
0a428     14 15 02 F6 | 	mov	arg02, local02
0a42c     B8 8A B1 FD | 	call	#_pslpoke
0a430     23 13 02 F6 | 	mov	arg01, local17
0a434     0C 12 06 F1 | 	add	arg01, #12
0a438     15 15 02 F6 | 	mov	arg02, local03
0a43c     A8 8A B1 FD | 	call	#_pslpoke
0a440     18 3D 02 F6 | 	mov	local12, local06
0a444     04 3C 66 F0 | 	shl	local12, #4
0a448     14 00 00 FF 
0a44c     F8 E5 05 F1 | 	add	objptr, ##10744
0a450     F2 3C 02 F1 | 	add	local12, objptr
0a454     1E 2F 62 FC | 	wrlong	local05, local12
0a458     18 3D 02 F6 | 	mov	local12, local06
0a45c     04 3C 66 F0 | 	shl	local12, #4
0a460     F2 3C 02 F1 | 	add	local12, objptr
0a464     04 3C 06 F1 | 	add	local12, #4
0a468     1E 47 62 FC | 	wrlong	local17, local12
0a46c     18 3D 02 F6 | 	mov	local12, local06
0a470     04 3C 66 F0 | 	shl	local12, #4
0a474     F2 3C 02 F1 | 	add	local12, objptr
0a478     0C 3C 06 F1 | 	add	local12, #12
0a47c     1E 41 62 FC | 	wrlong	local14, local12
0a480                 | ' memtop=arrayptr
0a480                 | ' psdpoke arrayptr,arraytype 
0a480                 | ' psdpoke arrayptr+2,esize 
0a480                 | ' pslpoke arrayptr+4,dims(0)
0a480                 | ' pslpoke arrayptr+8,dims(1)
0a480                 | ' pslpoke arrayptr+12,dims(2)
0a480                 | ' variables(j).name=varname2$
0a480                 | ' variables(j).value.uresult=arrayptr
0a480                 | ' variables(j).vartype=arraytype
0a480                 | ' if j=varnum then varnum+=1
0a480     20 00 00 FF 
0a484     10 E4 05 F1 | 	add	objptr, ##16400
0a488     F2 32 02 FB | 	rdlong	local07, objptr
0a48c     35 00 00 FF 
0a490     08 E4 85 F1 | 	sub	objptr, ##27144
0a494     19 31 0A F2 | 	cmp	local06, local07 wz
0a498     35 00 00 AF 
0a49c     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a4a0     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a4a4     01 32 06 A1 |  if_e	add	local07, #1
0a4a8     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a4ac     35 00 00 AF 
0a4b0     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a4b4                 | ' return 0
0a4b4     00 FA 05 F6 | 	mov	result1, #0
0a4b8                 | LR__0895
0a4b8     A7 F0 03 F6 | 	mov	ptra, fp
0a4bc     B2 00 A0 FD | 	call	#popregs_
0a4c0                 | _compile_dim_ret
0a4c0     2D 00 64 FD | 	ret
0a4c4                 | 
0a4c4                 | ' 
0a4c4                 | ' '----- compile 'for' command. 
0a4c4                 | ' 
0a4c4                 | ' function compile_for() as ulong  
0a4c4                 | _compile_for
0a4c4     0E 4A 05 F6 | 	mov	COUNT_, #14
0a4c8     A8 00 A0 FD | 	call	#pushregs_
0a4cc                 | ' 
0a4cc                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a4cc     37 00 00 FF 
0a4d0     44 E4 05 F1 | 	add	objptr, ##28228
0a4d4     F2 14 02 FB | 	rdlong	arg02, objptr
0a4d8     01 14 06 F1 | 	add	arg02, #1
0a4dc     03 14 66 F0 | 	shl	arg02, #3
0a4e0     02 00 00 FF 
0a4e4     38 E4 85 F1 | 	sub	objptr, ##1080
0a4e8     F2 14 02 F1 | 	add	arg02, objptr
0a4ec     0A 13 02 FB | 	rdlong	arg01, arg02
0a4f0     35 00 00 FF 
0a4f4     0C E4 85 F1 | 	sub	objptr, ##27148
0a4f8                 | ' 
0a4f8                 | ' select case s
0a4f8     B2 01 00 FF 
0a4fc     76 14 06 F6 | 	mov	arg02, ##@LR__5547
0a500     58 C2 B1 FD | 	call	#__system___string_cmp
0a504     00 FA 0D F2 | 	cmp	result1, #0 wz
0a508     1B FA 05 A6 |  if_e	mov	result1, #27
0a50c     00 FA 05 56 |  if_ne	mov	result1, #0
0a510     00 FA 0D F2 | 	cmp	result1, #0 wz
0a514     0C 00 90 AD |  if_e	jmp	#LR__0900
0a518     05 12 06 F6 | 	mov	arg01, #5
0a51c     A8 DB BF FD | 	call	#_compile_immediate_assign
0a520     08 00 90 FD | 	jmp	#LR__0901
0a524                 | LR__0900
0a524     20 FA 05 F6 | 	mov	result1, #32
0a528     58 08 90 FD | 	jmp	#LR__0917
0a52c                 | LR__0901
0a52c     4A 00 00 FF 
0a530     7C E4 05 F1 | 	add	objptr, ##38012
0a534     F2 14 02 FB | 	rdlong	arg02, objptr
0a538     0A 13 02 F6 | 	mov	arg01, arg02
0a53c     01 12 86 F1 | 	sub	arg01, #1
0a540     09 2D 02 F6 | 	mov	local04, arg01
0a544     01 2C 66 F0 | 	shl	local04, #1
0a548     09 2D 02 F1 | 	add	local04, arg01
0a54c     02 2C 66 F0 | 	shl	local04, #2
0a550     03 00 00 FF 
0a554     00 E4 85 F1 | 	sub	objptr, ##1536
0a558     F2 2C 02 F1 | 	add	local04, objptr
0a55c     16 27 02 FB | 	rdlong	local01, local04
0a560     04 2C 06 F1 | 	add	local04, #4
0a564     16 2F 02 FB | 	rdlong	local05, local04
0a568     01 14 86 F1 | 	sub	arg02, #1
0a56c     0A 2D 02 F6 | 	mov	local04, arg02
0a570     01 2C 66 F0 | 	shl	local04, #1
0a574     0A 2D 02 F1 | 	add	local04, arg02
0a578     02 2C 66 F0 | 	shl	local04, #2
0a57c     F2 30 02 F6 | 	mov	local06, objptr
0a580     F2 2C 02 F1 | 	add	local04, objptr
0a584     08 2C 06 F1 | 	add	local04, #8
0a588     16 2D 02 FB | 	rdlong	local04, local04
0a58c     17 29 02 F6 | 	mov	local02, local05
0a590     16 2B 02 F6 | 	mov	local03, local04
0a594                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a594     17 2A 0E F2 | 	cmp	local03, #23 wz
0a598     47 00 00 FF 
0a59c     7C E4 85 F1 | 	sub	objptr, ##36476
0a5a0     22 FA 05 56 |  if_ne	mov	result1, #34
0a5a4     DC 07 90 5D |  if_ne	jmp	#LR__0917
0a5a8     13 33 02 F6 | 	mov	local07, local01
0a5ac                 | ' varnum=t1.result.uresult
0a5ac                 | ' if lparts(ct).part$<>"to" then return 33
0a5ac     37 00 00 FF 
0a5b0     44 E4 05 F1 | 	add	objptr, ##28228
0a5b4     F2 2C 02 FB | 	rdlong	local04, objptr
0a5b8     03 2C 66 F0 | 	shl	local04, #3
0a5bc     02 00 00 FF 
0a5c0     38 E4 85 F1 | 	sub	objptr, ##1080
0a5c4     F2 2C 02 F1 | 	add	local04, objptr
0a5c8     16 13 02 FB | 	rdlong	arg01, local04
0a5cc     B4 01 00 FF 
0a5d0     94 15 06 F6 | 	mov	arg02, ##@LR__5822
0a5d4     35 00 00 FF 
0a5d8     0C E4 85 F1 | 	sub	objptr, ##27148
0a5dc     7C C1 B1 FD | 	call	#__system___string_cmp
0a5e0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5e4     21 FA 05 56 |  if_ne	mov	result1, #33
0a5e8     98 07 90 5D |  if_ne	jmp	#LR__0917
0a5ec     37 00 00 FF 
0a5f0     44 E4 05 F1 | 	add	objptr, ##28228
0a5f4     F2 34 02 FB | 	rdlong	local08, objptr
0a5f8     01 34 06 F1 | 	add	local08, #1
0a5fc     F2 34 62 FC | 	wrlong	local08, objptr
0a600     37 00 00 FF 
0a604     44 E4 85 F1 | 	sub	objptr, ##28228
0a608     2C 17 B0 FD | 	call	#_expr
0a60c                 | ' ct+=1
0a60c                 | ' expr()  										' there is "to" value pushed on the stack
0a60c                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a60c     37 00 00 FF 
0a610     44 E4 05 F1 | 	add	objptr, ##28228
0a614     F2 2C 02 FB | 	rdlong	local04, objptr
0a618     03 2C 66 F0 | 	shl	local04, #3
0a61c     02 00 00 FF 
0a620     38 E4 85 F1 | 	sub	objptr, ##1080
0a624     F2 2C 02 F1 | 	add	local04, objptr
0a628     16 13 02 FB | 	rdlong	arg01, local04
0a62c     B4 01 00 FF 
0a630     97 15 06 F6 | 	mov	arg02, ##@LR__5823
0a634     35 00 00 FF 
0a638     0C E4 85 F1 | 	sub	objptr, ##27148
0a63c     1C C1 B1 FD | 	call	#__system___string_cmp
0a640     00 FA 0D F2 | 	cmp	result1, #0 wz
0a644     48 00 90 AD |  if_e	jmp	#LR__0902
0a648     37 00 00 FF 
0a64c     44 E4 05 F1 | 	add	objptr, ##28228
0a650     F2 2C 02 FB | 	rdlong	local04, objptr
0a654     03 2C 66 F0 | 	shl	local04, #3
0a658     02 00 00 FF 
0a65c     38 E4 85 F1 | 	sub	objptr, ##1080
0a660     F2 2C 02 F1 | 	add	local04, objptr
0a664     16 13 02 FB | 	rdlong	arg01, local04
0a668     02 14 06 F6 | 	mov	arg02, #2
0a66c     35 00 00 FF 
0a670     0C E4 85 F1 | 	sub	objptr, ##27148
0a674     38 E1 B1 FD | 	call	#__system__Left_S
0a678     FD 12 02 F6 | 	mov	arg01, result1
0a67c     B4 01 00 FF 
0a680     9C 15 06 F6 | 	mov	arg02, ##@LR__5824
0a684     D4 C0 B1 FD | 	call	#__system___string_cmp
0a688     00 FA 0D F2 | 	cmp	result1, #0 wz
0a68c     9C 05 90 5D |  if_ne	jmp	#LR__0915
0a690                 | LR__0902
0a690                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a690     37 00 00 FF 
0a694     44 E4 05 F1 | 	add	objptr, ##28228
0a698     F2 2C 02 FB | 	rdlong	local04, objptr
0a69c     03 2C 66 F0 | 	shl	local04, #3
0a6a0     02 00 00 FF 
0a6a4     38 E4 85 F1 | 	sub	objptr, ##1080
0a6a8     F2 2C 02 F1 | 	add	local04, objptr
0a6ac     16 13 02 FB | 	rdlong	arg01, local04
0a6b0     02 14 06 F6 | 	mov	arg02, #2
0a6b4     35 00 00 FF 
0a6b8     0C E4 85 F1 | 	sub	objptr, ##27148
0a6bc     F0 E0 B1 FD | 	call	#__system__Left_S
0a6c0     FD 12 02 F6 | 	mov	arg01, result1
0a6c4     B4 01 00 FF 
0a6c8     9F 15 06 F6 | 	mov	arg02, ##@LR__5825
0a6cc     8C C0 B1 FD | 	call	#__system___string_cmp
0a6d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a6d4     30 05 90 5D |  if_ne	jmp	#LR__0914
0a6d8     37 00 00 FF 
0a6dc     44 E4 05 F1 | 	add	objptr, ##28228
0a6e0     F2 2C 02 FB | 	rdlong	local04, objptr
0a6e4     03 2C 66 F0 | 	shl	local04, #3
0a6e8     02 00 00 FF 
0a6ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a6f0     F2 2C 02 F1 | 	add	local04, objptr
0a6f4     16 13 02 FB | 	rdlong	arg01, local04
0a6f8     35 00 00 FF 
0a6fc     0C E4 85 F1 | 	sub	objptr, ##27148
0a700     09 37 02 F6 | 	mov	local09, arg01
0a704     97 06 48 FB | 	callpa	#(@LR__0904-@LR__0903)>>2,fcache_load_ptr_
0a708                 | LR__0903
0a708     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a70c     01 36 06 51 |  if_ne	add	local09, #1
0a710     F4 FF 9F 5D |  if_ne	jmp	#LR__0903
0a714                 | LR__0904
0a714     09 37 82 F1 | 	sub	local09, arg01
0a718     03 36 56 F2 | 	cmps	local09, #3 wc
0a71c     E8 04 90 CD |  if_b	jmp	#LR__0914
0a720     37 00 00 FF 
0a724     44 E4 05 F1 | 	add	objptr, ##28228
0a728     F2 2C 02 FB | 	rdlong	local04, objptr
0a72c     16 39 02 F6 | 	mov	local10, local04
0a730     03 38 66 F0 | 	shl	local10, #3
0a734     02 00 00 FF 
0a738     38 E4 85 F1 | 	sub	objptr, ##1080
0a73c     F2 38 02 F1 | 	add	local10, objptr
0a740     03 2C 66 F0 | 	shl	local04, #3
0a744     F2 2C 02 F1 | 	add	local04, objptr
0a748     16 2D 02 FB | 	rdlong	local04, local04
0a74c     02 00 00 FF 
0a750     38 E4 05 F1 | 	add	objptr, ##1080
0a754     F2 12 02 FB | 	rdlong	arg01, objptr
0a758     03 12 66 F0 | 	shl	arg01, #3
0a75c     02 00 00 FF 
0a760     38 E4 85 F1 | 	sub	objptr, ##1080
0a764     F2 12 02 F1 | 	add	arg01, objptr
0a768     09 13 02 FB | 	rdlong	arg01, arg01
0a76c     35 00 00 FF 
0a770     0C E4 85 F1 | 	sub	objptr, ##27148
0a774     09 37 02 F6 | 	mov	local09, arg01
0a778     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a77c                 | LR__0905
0a77c     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a780     01 36 06 51 |  if_ne	add	local09, #1
0a784     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a788                 | LR__0906
0a788     09 37 82 F1 | 	sub	local09, arg01
0a78c     1B 15 02 F6 | 	mov	arg02, local09
0a790     02 14 86 F1 | 	sub	arg02, #2
0a794     16 13 02 F6 | 	mov	arg01, local04
0a798     9C E0 B1 FD | 	call	#__system__Right_S
0a79c     1C FB 61 FC | 	wrlong	result1, local10
0a7a0     37 00 00 FF 
0a7a4     44 E4 05 F1 | 	add	objptr, ##28228
0a7a8     F2 2C 02 FB | 	rdlong	local04, objptr
0a7ac     16 39 02 F6 | 	mov	local10, local04
0a7b0     03 38 66 F0 | 	shl	local10, #3
0a7b4     02 00 00 FF 
0a7b8     38 E4 85 F1 | 	sub	objptr, ##1080
0a7bc     F2 38 02 F1 | 	add	local10, objptr
0a7c0     03 2C 66 F0 | 	shl	local04, #3
0a7c4     F2 2C 02 F1 | 	add	local04, objptr
0a7c8     16 13 02 FB | 	rdlong	arg01, local04
0a7cc     35 00 00 FF 
0a7d0     0C E4 85 F1 | 	sub	objptr, ##27148
0a7d4     E0 B6 BF FD | 	call	#_isfunction
0a7d8     FD FA E1 F8 | 	getbyte	result1, result1, #0
0a7dc     04 38 06 F1 | 	add	local10, #4
0a7e0     1C FB 61 FC | 	wrlong	result1, local10
0a7e4                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a7e4     37 00 00 FF 
0a7e8     44 E4 05 F1 | 	add	objptr, ##28228
0a7ec     F2 38 02 FB | 	rdlong	local10, objptr
0a7f0     03 38 66 F0 | 	shl	local10, #3
0a7f4     02 00 00 FF 
0a7f8     38 E4 85 F1 | 	sub	objptr, ##1080
0a7fc     F2 38 02 F1 | 	add	local10, objptr
0a800     04 38 06 F1 | 	add	local10, #4
0a804     1C 2D 02 FB | 	rdlong	local04, local10
0a808     01 2C 56 F2 | 	cmps	local04, #1 wc
0a80c     35 00 00 FF 
0a810     0C E4 85 F1 | 	sub	objptr, ##27148
0a814     D4 03 90 3D |  if_ae	jmp	#LR__0913
0a818     37 00 00 FF 
0a81c     44 E4 05 F1 | 	add	objptr, ##28228
0a820     F2 2C 02 FB | 	rdlong	local04, objptr
0a824     16 39 02 F6 | 	mov	local10, local04
0a828     03 38 66 F0 | 	shl	local10, #3
0a82c     02 00 00 FF 
0a830     38 E4 85 F1 | 	sub	objptr, ##1080
0a834     F2 38 02 F1 | 	add	local10, objptr
0a838     03 2C 66 F0 | 	shl	local04, #3
0a83c     F2 2C 02 F1 | 	add	local04, objptr
0a840     16 13 02 FB | 	rdlong	arg01, local04
0a844     35 00 00 FF 
0a848     0C E4 85 F1 | 	sub	objptr, ##27148
0a84c     1C A0 BF FD | 	call	#_isnotename
0a850     04 38 06 F1 | 	add	local10, #4
0a854     1C FB 61 FC | 	wrlong	result1, local10
0a858                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0a858                 | '     if lparts(ct).token>0 then 
0a858     37 00 00 FF 
0a85c     44 E4 05 F1 | 	add	objptr, ##28228
0a860     F2 38 02 FB | 	rdlong	local10, objptr
0a864     03 38 66 F0 | 	shl	local10, #3
0a868     02 00 00 FF 
0a86c     38 E4 85 F1 | 	sub	objptr, ##1080
0a870     F2 38 02 F1 | 	add	local10, objptr
0a874     04 38 06 F1 | 	add	local10, #4
0a878     1C 2D 02 FB | 	rdlong	local04, local10
0a87c     01 2C 56 F2 | 	cmps	local04, #1 wc
0a880     35 00 00 FF 
0a884     0C E4 85 F1 | 	sub	objptr, ##27148
0a888     94 00 90 CD |  if_b	jmp	#LR__0907
0a88c     37 00 00 FF 
0a890     44 E4 05 F1 | 	add	objptr, ##28228
0a894     F2 38 02 FB | 	rdlong	local10, objptr
0a898     03 38 66 F0 | 	shl	local10, #3
0a89c     02 00 00 FF 
0a8a0     38 E4 85 F1 | 	sub	objptr, ##1080
0a8a4     F2 38 02 F1 | 	add	local10, objptr
0a8a8     04 38 06 F1 | 	add	local10, #4
0a8ac     1C 13 02 FB | 	rdlong	arg01, local10
0a8b0     35 00 00 FF 
0a8b4     0C E4 85 F1 | 	sub	objptr, ##27148
0a8b8     E4 C6 BF FD | 	call	#_getnoteval
0a8bc     FD 12 02 F6 | 	mov	arg01, result1
0a8c0     37 00 00 FF 
0a8c4     44 E4 05 F1 | 	add	objptr, ##28228
0a8c8     F2 38 02 FB | 	rdlong	local10, objptr
0a8cc     03 38 66 F0 | 	shl	local10, #3
0a8d0     02 00 00 FF 
0a8d4     38 E4 85 F1 | 	sub	objptr, ##1080
0a8d8     F2 38 02 F1 | 	add	local10, objptr
0a8dc     35 00 00 FF 
0a8e0     0C E4 85 F1 | 	sub	objptr, ##27148
0a8e4     C0 E0 B1 FD | 	call	#__system__str_S
0a8e8     1C FB 61 FC | 	wrlong	result1, local10
0a8ec     37 00 00 FF 
0a8f0     44 E4 05 F1 | 	add	objptr, ##28228
0a8f4     F2 38 02 FB | 	rdlong	local10, objptr
0a8f8     03 38 66 F0 | 	shl	local10, #3
0a8fc     02 00 00 FF 
0a900     38 E4 85 F1 | 	sub	objptr, ##1080
0a904     F2 38 02 F1 | 	add	local10, objptr
0a908     04 38 06 F1 | 	add	local10, #4
0a90c     01 00 80 FF 
0a910     1C 05 68 FC | 	wrlong	##514, local10
0a914     35 00 00 FF 
0a918     0C E4 85 F1 | 	sub	objptr, ##27148
0a91c     CC 02 90 FD | 	jmp	#LR__0913
0a920                 | LR__0907
0a920     37 00 00 FF 
0a924     44 E4 05 F1 | 	add	objptr, ##28228
0a928     F2 2C 02 FB | 	rdlong	local04, objptr
0a92c     16 39 02 F6 | 	mov	local10, local04
0a930     03 38 66 F0 | 	shl	local10, #3
0a934     02 00 00 FF 
0a938     38 E4 85 F1 | 	sub	objptr, ##1080
0a93c     F2 38 02 F1 | 	add	local10, objptr
0a940     03 2C 66 F0 | 	shl	local04, #3
0a944     F2 2C 02 F1 | 	add	local04, objptr
0a948     16 13 02 FB | 	rdlong	arg01, local04
0a94c     35 00 00 FF 
0a950     0C E4 85 F1 | 	sub	objptr, ##27148
0a954     94 9E BF FD | 	call	#_isconstant
0a958     04 38 06 F1 | 	add	local10, #4
0a95c     1C FB 61 FC | 	wrlong	result1, local10
0a960                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0a960     37 00 00 FF 
0a964     44 E4 05 F1 | 	add	objptr, ##28228
0a968     F2 38 02 FB | 	rdlong	local10, objptr
0a96c     03 38 66 F0 | 	shl	local10, #3
0a970     02 00 00 FF 
0a974     38 E4 85 F1 | 	sub	objptr, ##1080
0a978     F2 38 02 F1 | 	add	local10, objptr
0a97c     04 38 06 F1 | 	add	local10, #4
0a980     1C 2D 02 FB | 	rdlong	local04, local10
0a984     01 2C 56 F2 | 	cmps	local04, #1 wc
0a988     35 00 00 FF 
0a98c     0C E4 85 F1 | 	sub	objptr, ##27148
0a990     8C 00 90 CD |  if_b	jmp	#LR__0908
0a994     37 00 00 FF 
0a998     44 E4 05 F1 | 	add	objptr, ##28228
0a99c     F2 34 02 FB | 	rdlong	local08, objptr
0a9a0     1A 39 02 F6 | 	mov	local10, local08
0a9a4     03 38 66 F0 | 	shl	local10, #3
0a9a8     02 00 00 FF 
0a9ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a9b0     F2 38 02 F1 | 	add	local10, objptr
0a9b4     03 34 66 F0 | 	shl	local08, #3
0a9b8     F2 34 02 F1 | 	add	local08, objptr
0a9bc     04 34 06 F1 | 	add	local08, #4
0a9c0     1A 13 02 FB | 	rdlong	arg01, local08
0a9c4     35 00 00 FF 
0a9c8     0C E4 85 F1 | 	sub	objptr, ##27148
0a9cc     09 13 52 F6 | 	abs	arg01, arg01 wc
0a9d0     1F 3A C6 C9 |  if_b	decod	local11, #31
0a9d4     00 3A 06 36 |  if_ae	mov	local11, #0
0a9d8     CC E7 B1 FD | 	call	#__system___float_fromuns
0a9dc     1D FB 61 F5 | 	xor	result1, local11
0a9e0     FD 12 02 F6 | 	mov	arg01, result1
0a9e4     C0 DF B1 FD | 	call	#__system__str_S
0a9e8     1C FB 61 FC | 	wrlong	result1, local10
0a9ec     37 00 00 FF 
0a9f0     44 E4 05 F1 | 	add	objptr, ##28228
0a9f4     F2 38 02 FB | 	rdlong	local10, objptr
0a9f8     03 38 66 F0 | 	shl	local10, #3
0a9fc     02 00 00 FF 
0aa00     38 E4 85 F1 | 	sub	objptr, ##1080
0aa04     F2 38 02 F1 | 	add	local10, objptr
0aa08     04 38 06 F1 | 	add	local10, #4
0aa0c     01 00 80 FF 
0aa10     1C 03 68 FC | 	wrlong	##513, local10
0aa14     35 00 00 FF 
0aa18     0C E4 85 F1 | 	sub	objptr, ##27148
0aa1c     CC 01 90 FD | 	jmp	#LR__0913
0aa20                 | LR__0908
0aa20     37 00 00 FF 
0aa24     44 E4 05 F1 | 	add	objptr, ##28228
0aa28     F2 38 02 FB | 	rdlong	local10, objptr
0aa2c     03 38 66 F0 | 	shl	local10, #3
0aa30     02 00 00 FF 
0aa34     38 E4 85 F1 | 	sub	objptr, ##1080
0aa38     F2 38 02 F1 | 	add	local10, objptr
0aa3c     1C 13 02 FB | 	rdlong	arg01, local10
0aa40     35 00 00 FF 
0aa44     0C E4 85 F1 | 	sub	objptr, ##27148
0aa48     A0 BD BF FD | 	call	#_isnum
0aa4c     FD 3C 02 F6 | 	mov	local12, result1
0aa50     37 00 00 FF 
0aa54     44 E4 05 F1 | 	add	objptr, ##28228
0aa58     F2 38 02 FB | 	rdlong	local10, objptr
0aa5c     03 38 66 F0 | 	shl	local10, #3
0aa60     02 00 00 FF 
0aa64     38 E4 85 F1 | 	sub	objptr, ##1080
0aa68     F2 38 02 F1 | 	add	local10, objptr
0aa6c     1C 13 02 FB | 	rdlong	arg01, local10
0aa70     35 00 00 FF 
0aa74     0C E4 85 F1 | 	sub	objptr, ##27148
0aa78     5C C1 BF FD | 	call	#_isint
0aa7c     FD 3E 02 F6 | 	mov	local13, result1
0aa80     37 00 00 FF 
0aa84     44 E4 05 F1 | 	add	objptr, ##28228
0aa88     F2 38 02 FB | 	rdlong	local10, objptr
0aa8c     03 38 66 F0 | 	shl	local10, #3
0aa90     02 00 00 FF 
0aa94     38 E4 85 F1 | 	sub	objptr, ##1080
0aa98     F2 38 02 F1 | 	add	local10, objptr
0aa9c     1C 13 02 FB | 	rdlong	arg01, local10
0aaa0     35 00 00 FF 
0aaa4     0C E4 85 F1 | 	sub	objptr, ##27148
0aaa8     D0 C3 BF FD | 	call	#_isdec
0aaac     FD 40 02 F6 | 	mov	local14, result1
0aab0                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0aab0                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0aab0     00 3C 0E F2 | 	cmp	local12, #0 wz
0aab4     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0aab8     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0aabc     34 00 90 AD |  if_e	jmp	#LR__0909
0aac0     37 00 00 FF 
0aac4     44 E4 05 F1 | 	add	objptr, ##28228
0aac8     F2 38 02 FB | 	rdlong	local10, objptr
0aacc     03 38 66 F0 | 	shl	local10, #3
0aad0     02 00 00 FF 
0aad4     38 E4 85 F1 | 	sub	objptr, ##1080
0aad8     F2 38 02 F1 | 	add	local10, objptr
0aadc     04 38 06 F1 | 	add	local10, #4
0aae0     01 00 80 FF 
0aae4     1C 01 68 FC | 	wrlong	##512, local10
0aae8     35 00 00 FF 
0aaec     0C E4 85 F1 | 	sub	objptr, ##27148
0aaf0     F8 00 90 FD | 	jmp	#LR__0913
0aaf4                 | LR__0909
0aaf4                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0aaf4     00 3C 0E F2 | 	cmp	local12, #0 wz
0aaf8     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0aafc     20 35 22 56 |  if_ne	not	local08, local14
0ab00     00 34 0E 52 |  if_ne	cmp	local08, #0 wz
0ab04     34 00 90 AD |  if_e	jmp	#LR__0910
0ab08     37 00 00 FF 
0ab0c     44 E4 05 F1 | 	add	objptr, ##28228
0ab10     F2 38 02 FB | 	rdlong	local10, objptr
0ab14     03 38 66 F0 | 	shl	local10, #3
0ab18     02 00 00 FF 
0ab1c     38 E4 85 F1 | 	sub	objptr, ##1080
0ab20     F2 38 02 F1 | 	add	local10, objptr
0ab24     04 38 06 F1 | 	add	local10, #4
0ab28     01 00 80 FF 
0ab2c     1C 03 68 FC | 	wrlong	##513, local10
0ab30     35 00 00 FF 
0ab34     0C E4 85 F1 | 	sub	objptr, ##27148
0ab38     B0 00 90 FD | 	jmp	#LR__0913
0ab3c                 | LR__0910
0ab3c                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0ab3c     00 3C 0E F2 | 	cmp	local12, #0 wz
0ab40     1F 3F 22 56 |  if_ne	not	local13, local13
0ab44     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ab48     20 41 22 56 |  if_ne	not	local14, local14
0ab4c     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ab50     34 00 90 AD |  if_e	jmp	#LR__0911
0ab54     37 00 00 FF 
0ab58     44 E4 05 F1 | 	add	objptr, ##28228
0ab5c     F2 38 02 FB | 	rdlong	local10, objptr
0ab60     03 38 66 F0 | 	shl	local10, #3
0ab64     02 00 00 FF 
0ab68     38 E4 85 F1 | 	sub	objptr, ##1080
0ab6c     F2 38 02 F1 | 	add	local10, objptr
0ab70     04 38 06 F1 | 	add	local10, #4
0ab74     01 00 80 FF 
0ab78     1C 05 68 FC | 	wrlong	##514, local10
0ab7c     35 00 00 FF 
0ab80     0C E4 85 F1 | 	sub	objptr, ##27148
0ab84     64 00 90 FD | 	jmp	#LR__0913
0ab88                 | LR__0911
0ab88                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ab88     37 00 00 FF 
0ab8c     44 E4 05 F1 | 	add	objptr, ##28228
0ab90     F2 38 02 FB | 	rdlong	local10, objptr
0ab94     03 38 66 F0 | 	shl	local10, #3
0ab98     02 00 00 FF 
0ab9c     38 E4 85 F1 | 	sub	objptr, ##1080
0aba0     F2 38 02 F1 | 	add	local10, objptr
0aba4     1C 13 02 FB | 	rdlong	arg01, local10
0aba8     35 00 00 FF 
0abac     0C E4 85 F1 | 	sub	objptr, ##27148
0abb0     C4 B9 BF FD | 	call	#_isname
0abb4     00 FA 0D F2 | 	cmp	result1, #0 wz
0abb8     30 00 90 AD |  if_e	jmp	#LR__0912
0abbc     37 00 00 FF 
0abc0     44 E4 05 F1 | 	add	objptr, ##28228
0abc4     F2 38 02 FB | 	rdlong	local10, objptr
0abc8     03 38 66 F0 | 	shl	local10, #3
0abcc     02 00 00 FF 
0abd0     38 E4 85 F1 | 	sub	objptr, ##1080
0abd4     F2 38 02 F1 | 	add	local10, objptr
0abd8     04 38 06 F1 | 	add	local10, #4
0abdc     01 00 80 FF 
0abe0     1C 09 68 FC | 	wrlong	##516, local10
0abe4     35 00 00 FF 
0abe8     0C E4 85 F1 | 	sub	objptr, ##27148
0abec                 | LR__0912
0abec                 | LR__0913
0abec     37 00 00 FF 
0abf0     44 E4 05 F1 | 	add	objptr, ##28228
0abf4     F2 34 02 FB | 	rdlong	local08, objptr
0abf8     01 34 86 F1 | 	sub	local08, #1
0abfc     F2 34 62 FC | 	wrlong	local08, objptr
0ac00     37 00 00 FF 
0ac04     44 E4 85 F1 | 	sub	objptr, ##28228
0ac08                 | LR__0914
0ac08     37 00 00 FF 
0ac0c     44 E4 05 F1 | 	add	objptr, ##28228
0ac10     F2 34 02 FB | 	rdlong	local08, objptr
0ac14     01 34 06 F1 | 	add	local08, #1
0ac18     F2 34 62 FC | 	wrlong	local08, objptr
0ac1c     37 00 00 FF 
0ac20     44 E4 85 F1 | 	sub	objptr, ##28228
0ac24     10 11 B0 FD | 	call	#_expr
0ac28     78 00 90 FD | 	jmp	#LR__0916
0ac2c                 | LR__0915
0ac2c     4A 00 00 FF 
0ac30     7C E4 05 F1 | 	add	objptr, ##38012
0ac34     F2 40 02 FB | 	rdlong	local14, objptr
0ac38     20 39 02 F6 | 	mov	local10, local14
0ac3c     01 38 66 F0 | 	shl	local10, #1
0ac40     20 39 02 F1 | 	add	local10, local14
0ac44     02 38 66 F0 | 	shl	local10, #2
0ac48     03 00 00 FF 
0ac4c     00 E4 85 F1 | 	sub	objptr, ##1536
0ac50     F2 38 02 F1 | 	add	local10, objptr
0ac54     08 38 06 F1 | 	add	local10, #8
0ac58     1C 39 68 FC | 	wrlong	#28, local10
0ac5c     03 00 00 FF 
0ac60     00 E4 05 F1 | 	add	objptr, ##1536
0ac64     F2 40 02 FB | 	rdlong	local14, objptr
0ac68     20 39 02 F6 | 	mov	local10, local14
0ac6c     01 38 66 F0 | 	shl	local10, #1
0ac70     20 39 02 F1 | 	add	local10, local14
0ac74     02 38 66 F0 | 	shl	local10, #2
0ac78     03 00 00 FF 
0ac7c     00 E4 85 F1 | 	sub	objptr, ##1536
0ac80     F2 38 02 F1 | 	add	local10, objptr
0ac84     1C 03 68 FC | 	wrlong	#1, local10
0ac88     03 00 00 FF 
0ac8c     00 E4 05 F1 | 	add	objptr, ##1536
0ac90     F2 34 02 FB | 	rdlong	local08, objptr
0ac94     01 34 06 F1 | 	add	local08, #1
0ac98     F2 34 62 FC | 	wrlong	local08, objptr
0ac9c     4A 00 00 FF 
0aca0     7C E4 85 F1 | 	sub	objptr, ##38012
0aca4                 | LR__0916
0aca4     4A 00 00 FF 
0aca8     7C E4 05 F1 | 	add	objptr, ##38012
0acac     F2 40 02 FB | 	rdlong	local14, objptr
0acb0     20 39 02 F6 | 	mov	local10, local14
0acb4     01 38 66 F0 | 	shl	local10, #1
0acb8     20 39 02 F1 | 	add	local10, local14
0acbc     02 38 66 F0 | 	shl	local10, #2
0acc0     03 00 00 FF 
0acc4     00 E4 85 F1 | 	sub	objptr, ##1536
0acc8     F2 38 02 F1 | 	add	local10, objptr
0accc     08 38 06 F1 | 	add	local10, #8
0acd0     1C 39 68 FC | 	wrlong	#28, local10
0acd4     03 00 00 FF 
0acd8     00 E4 05 F1 | 	add	objptr, ##1536
0acdc     F2 40 02 FB | 	rdlong	local14, objptr
0ace0     20 39 02 F6 | 	mov	local10, local14
0ace4     01 38 66 F0 | 	shl	local10, #1
0ace8     20 39 02 F1 | 	add	local10, local14
0acec     02 38 66 F0 | 	shl	local10, #2
0acf0     03 00 00 FF 
0acf4     00 E4 85 F1 | 	sub	objptr, ##1536
0acf8     F2 38 02 F1 | 	add	local10, objptr
0acfc     1C 33 62 FC | 	wrlong	local07, local10
0ad00     03 00 00 FF 
0ad04     00 E4 05 F1 | 	add	objptr, ##1536
0ad08     F2 40 02 FB | 	rdlong	local14, objptr
0ad0c     01 40 06 F1 | 	add	local14, #1
0ad10     F2 40 62 FC | 	wrlong	local14, objptr
0ad14     20 39 02 F6 | 	mov	local10, local14
0ad18     01 38 66 F0 | 	shl	local10, #1
0ad1c     20 39 02 F1 | 	add	local10, local14
0ad20     02 38 66 F0 | 	shl	local10, #2
0ad24     03 00 00 FF 
0ad28     00 E4 85 F1 | 	sub	objptr, ##1536
0ad2c     F2 38 02 F1 | 	add	local10, objptr
0ad30     08 38 06 F1 | 	add	local10, #8
0ad34     1C 95 68 FC | 	wrlong	#74, local10
0ad38     03 00 00 FF 
0ad3c     00 E4 05 F1 | 	add	objptr, ##1536
0ad40     F2 40 02 FB | 	rdlong	local14, objptr
0ad44     20 39 02 F6 | 	mov	local10, local14
0ad48     01 38 66 F0 | 	shl	local10, #1
0ad4c     20 39 02 F1 | 	add	local10, local14
0ad50     02 38 66 F0 | 	shl	local10, #2
0ad54     03 00 00 FF 
0ad58     00 E4 85 F1 | 	sub	objptr, ##1536
0ad5c     F2 38 02 F1 | 	add	local10, objptr
0ad60     1C 01 68 FC | 	wrlong	#0, local10
0ad64     03 00 00 FF 
0ad68     00 E4 05 F1 | 	add	objptr, ##1536
0ad6c     F2 34 02 FB | 	rdlong	local08, objptr
0ad70     01 34 06 F1 | 	add	local08, #1
0ad74     F2 34 62 FC | 	wrlong	local08, objptr
0ad78     4A 00 00 FF 
0ad7c     7C E4 85 F1 | 	sub	objptr, ##38012
0ad80                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0ad80                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0ad80                 | ' return 0
0ad80     00 FA 05 F6 | 	mov	result1, #0
0ad84                 | LR__0917
0ad84     A7 F0 03 F6 | 	mov	ptra, fp
0ad88     B2 00 A0 FD | 	call	#popregs_
0ad8c                 | _compile_for_ret
0ad8c     2D 00 64 FD | 	ret
0ad90                 | 
0ad90                 | ' 
0ad90                 | ' '----- compile 'next' command. 
0ad90                 | ' 
0ad90                 | ' function compile_next() as ulong
0ad90                 | _compile_next
0ad90     04 4A 05 F6 | 	mov	COUNT_, #4
0ad94     A8 00 A0 FD | 	call	#pushregs_
0ad98     37 00 00 FF 
0ad9c     44 E4 05 F1 | 	add	objptr, ##28228
0ada0     F2 14 02 FB | 	rdlong	arg02, objptr
0ada4     03 14 66 F0 | 	shl	arg02, #3
0ada8     02 00 00 FF 
0adac     38 E4 85 F1 | 	sub	objptr, ##1080
0adb0     F2 14 02 F1 | 	add	arg02, objptr
0adb4     0A 27 02 FB | 	rdlong	local01, arg02
0adb8                 | ' 
0adb8                 | ' varname$=lparts(ct).part$ 
0adb8                 | ' if varnum=0 then return 35
0adb8     04 E4 85 F1 | 	sub	objptr, #4
0adbc     F2 14 0A FB | 	rdlong	arg02, objptr wz
0adc0     35 00 00 FF 
0adc4     08 E4 85 F1 | 	sub	objptr, ##27144
0adc8     23 FA 05 A6 |  if_e	mov	result1, #35
0adcc     4C 01 90 AD |  if_e	jmp	#LR__0922
0add0     01 28 66 F6 | 	neg	local02, #1
0add4                 | ' j=-1
0add4                 | ' for i=0 to varnum-1
0add4     00 2A 06 F6 | 	mov	local03, #0
0add8     35 00 00 FF 
0addc     08 E4 05 F1 | 	add	objptr, ##27144
0ade0     F2 2C 02 FB | 	rdlong	local04, objptr
0ade4     35 00 00 FF 
0ade8     08 E4 85 F1 | 	sub	objptr, ##27144
0adec                 | LR__0920
0adec     16 2B 12 F2 | 	cmp	local03, local04 wc
0adf0     38 00 90 3D |  if_ae	jmp	#LR__0921
0adf4                 | '   if variables(i).name=varname$ then j=i : exit
0adf4     15 15 02 F6 | 	mov	arg02, local03
0adf8     04 14 66 F0 | 	shl	arg02, #4
0adfc     14 00 00 FF 
0ae00     F8 E5 05 F1 | 	add	objptr, ##10744
0ae04     F2 14 02 F1 | 	add	arg02, objptr
0ae08     0A 13 02 FB | 	rdlong	arg01, arg02
0ae0c     13 15 02 F6 | 	mov	arg02, local01
0ae10     14 00 00 FF 
0ae14     F8 E5 85 F1 | 	sub	objptr, ##10744
0ae18     40 B9 B1 FD | 	call	#__system___string_cmp
0ae1c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ae20     15 29 02 A6 |  if_e	mov	local02, local03
0ae24     01 2A 06 51 |  if_ne	add	local03, #1
0ae28     C0 FF 9F 5D |  if_ne	jmp	#LR__0920
0ae2c                 | LR__0921
0ae2c                 | ' if j=-1 then return 35
0ae2c     FF FF 7F FF 
0ae30     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0ae34     23 FA 05 A6 |  if_e	mov	result1, #35
0ae38     E0 00 90 AD |  if_e	jmp	#LR__0922
0ae3c     4A 00 00 FF 
0ae40     7C E4 05 F1 | 	add	objptr, ##38012
0ae44     F2 2C 02 FB | 	rdlong	local04, objptr
0ae48     16 2B 02 F6 | 	mov	local03, local04
0ae4c     01 2A 66 F0 | 	shl	local03, #1
0ae50     16 2B 02 F1 | 	add	local03, local04
0ae54     02 2A 66 F0 | 	shl	local03, #2
0ae58     03 00 00 FF 
0ae5c     00 E4 85 F1 | 	sub	objptr, ##1536
0ae60     F2 2A 02 F1 | 	add	local03, objptr
0ae64     08 2A 06 F1 | 	add	local03, #8
0ae68     15 39 68 FC | 	wrlong	#28, local03
0ae6c     03 00 00 FF 
0ae70     00 E4 05 F1 | 	add	objptr, ##1536
0ae74     F2 2C 02 FB | 	rdlong	local04, objptr
0ae78     16 2B 02 F6 | 	mov	local03, local04
0ae7c     01 2A 66 F0 | 	shl	local03, #1
0ae80     16 2B 02 F1 | 	add	local03, local04
0ae84     02 2A 66 F0 | 	shl	local03, #2
0ae88     03 00 00 FF 
0ae8c     00 E4 85 F1 | 	sub	objptr, ##1536
0ae90     F2 2A 02 F1 | 	add	local03, objptr
0ae94     15 29 62 FC | 	wrlong	local02, local03
0ae98     03 00 00 FF 
0ae9c     00 E4 05 F1 | 	add	objptr, ##1536
0aea0     F2 2C 02 FB | 	rdlong	local04, objptr
0aea4     01 2C 06 F1 | 	add	local04, #1
0aea8     F2 2C 62 FC | 	wrlong	local04, objptr
0aeac     16 2B 02 F6 | 	mov	local03, local04
0aeb0     01 2A 66 F0 | 	shl	local03, #1
0aeb4     16 2B 02 F1 | 	add	local03, local04
0aeb8     02 2A 66 F0 | 	shl	local03, #2
0aebc     03 00 00 FF 
0aec0     00 E4 85 F1 | 	sub	objptr, ##1536
0aec4     F2 2A 02 F1 | 	add	local03, objptr
0aec8     08 2A 06 F1 | 	add	local03, #8
0aecc     15 97 68 FC | 	wrlong	#75, local03
0aed0     03 00 00 FF 
0aed4     00 E4 05 F1 | 	add	objptr, ##1536
0aed8     F2 2C 02 FB | 	rdlong	local04, objptr
0aedc     16 2B 02 F6 | 	mov	local03, local04
0aee0     01 2A 66 F0 | 	shl	local03, #1
0aee4     16 2B 02 F1 | 	add	local03, local04
0aee8     02 2A 66 F0 | 	shl	local03, #2
0aeec     03 00 00 FF 
0aef0     00 E4 85 F1 | 	sub	objptr, ##1536
0aef4     F2 2A 02 F1 | 	add	local03, objptr
0aef8     15 01 68 FC | 	wrlong	#0, local03
0aefc     03 00 00 FF 
0af00     00 E4 05 F1 | 	add	objptr, ##1536
0af04     F2 2C 02 FB | 	rdlong	local04, objptr
0af08     01 2C 06 F1 | 	add	local04, #1
0af0c     F2 2C 62 FC | 	wrlong	local04, objptr
0af10     4A 00 00 FF 
0af14     7C E4 85 F1 | 	sub	objptr, ##38012
0af18                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0af18                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0af18                 | ' return 0
0af18     00 FA 05 F6 | 	mov	result1, #0
0af1c                 | LR__0922
0af1c     A7 F0 03 F6 | 	mov	ptra, fp
0af20     B2 00 A0 FD | 	call	#popregs_
0af24                 | _compile_next_ret
0af24     2D 00 64 FD | 	ret
0af28                 | 
0af28                 | ' 
0af28                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0af28                 | ' 
0af28                 | ' function compile_gosub() as ulong
0af28                 | _compile_gosub
0af28     02 4A 05 F6 | 	mov	COUNT_, #2
0af2c     A8 00 A0 FD | 	call	#pushregs_
0af30     4A 00 00 FF 
0af34     7C E4 05 F1 | 	add	objptr, ##38012
0af38     F2 26 02 FB | 	rdlong	local01, objptr
0af3c     13 29 02 F6 | 	mov	local02, local01
0af40     01 28 66 F0 | 	shl	local02, #1
0af44     13 29 02 F1 | 	add	local02, local01
0af48     02 28 66 F0 | 	shl	local02, #2
0af4c     03 00 00 FF 
0af50     00 E4 85 F1 | 	sub	objptr, ##1536
0af54     F2 28 02 F1 | 	add	local02, objptr
0af58     08 28 06 F1 | 	add	local02, #8
0af5c     14 53 69 FC | 	wrlong	#169, local02
0af60     03 00 00 FF 
0af64     00 E4 05 F1 | 	add	objptr, ##1536
0af68     F2 28 02 FB | 	rdlong	local02, objptr
0af6c     01 28 06 F1 | 	add	local02, #1
0af70     F2 28 62 FC | 	wrlong	local02, objptr
0af74     4A 00 00 FF 
0af78     7C E4 85 F1 | 	sub	objptr, ##38012
0af7c     0C 00 B0 FD | 	call	#_compile_goto
0af80                 | ' compiledline(lineptr).result_type=token_gosub
0af80                 | ' lineptr+=1
0af80                 | ' err=compile_goto()
0af80                 | ' return err
0af80     A7 F0 03 F6 | 	mov	ptra, fp
0af84     B2 00 A0 FD | 	call	#popregs_
0af88                 | _compile_gosub_ret
0af88     2D 00 64 FD | 	ret
0af8c                 | 
0af8c                 | ' 
0af8c                 | ' '----- compile 'goto' 
0af8c                 | ' 
0af8c                 | ' function compile_goto() as ulong
0af8c                 | _compile_goto
0af8c     03 4A 05 F6 | 	mov	COUNT_, #3
0af90     A8 00 A0 FD | 	call	#pushregs_
0af94     34 F0 07 F1 | 	add	ptra, #52
0af98                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0af98     37 00 00 FF 
0af9c     44 E4 05 F1 | 	add	objptr, ##28228
0afa0     F2 16 02 FB | 	rdlong	arg03, objptr
0afa4     03 16 66 F0 | 	shl	arg03, #3
0afa8     02 00 00 FF 
0afac     38 E4 85 F1 | 	sub	objptr, ##1080
0afb0     F2 16 02 F1 | 	add	arg03, objptr
0afb4     04 16 06 F1 | 	add	arg03, #4
0afb8     0B 17 02 FB | 	rdlong	arg03, arg03
0afbc     01 00 00 FF 
0afc0     00 16 0E F2 | 	cmp	arg03, ##512 wz
0afc4     35 00 00 FF 
0afc8     0C E4 85 F1 | 	sub	objptr, ##27148
0afcc     CC 02 90 5D |  if_ne	jmp	#LR__0935
0afd0     37 00 00 FF 
0afd4     44 E4 05 F1 | 	add	objptr, ##28228
0afd8     F2 16 02 FB | 	rdlong	arg03, objptr
0afdc     01 16 06 F1 | 	add	arg03, #1
0afe0     03 16 66 F0 | 	shl	arg03, #3
0afe4     02 00 00 FF 
0afe8     38 E4 85 F1 | 	sub	objptr, ##1080
0afec     F2 16 02 F1 | 	add	arg03, objptr
0aff0     04 16 06 F1 | 	add	arg03, #4
0aff4     0B 17 02 FB | 	rdlong	arg03, arg03
0aff8     FE 17 0E F2 | 	cmp	arg03, #510 wz
0affc     35 00 00 FF 
0b000     0C E4 85 F1 | 	sub	objptr, ##27148
0b004     94 02 90 5D |  if_ne	jmp	#LR__0935
0b008     37 00 00 FF 
0b00c     44 E4 05 F1 | 	add	objptr, ##28228
0b010     F2 16 02 FB | 	rdlong	arg03, objptr
0b014     03 16 66 F0 | 	shl	arg03, #3
0b018     02 00 00 FF 
0b01c     38 E4 85 F1 | 	sub	objptr, ##1080
0b020     F2 16 02 F1 | 	add	arg03, objptr
0b024     0B 13 02 FB | 	rdlong	arg01, arg03
0b028     00 14 06 F6 | 	mov	arg02, #0
0b02c     35 00 00 FF 
0b030     0C E4 85 F1 | 	sub	objptr, ##27148
0b034     EC EB B1 FD | 	call	#__system____builtin_atoi
0b038     04 4E 05 F1 | 	add	fp, #4
0b03c     A7 FA 61 FC | 	wrlong	result1, fp
0b040     4A 00 00 FF 
0b044     7C E4 05 F1 | 	add	objptr, ##38012
0b048     F2 26 02 FB | 	rdlong	local01, objptr
0b04c     13 29 02 F6 | 	mov	local02, local01
0b050     01 28 66 F0 | 	shl	local02, #1
0b054     13 29 02 F1 | 	add	local02, local01
0b058     02 28 66 F0 | 	shl	local02, #2
0b05c     03 00 00 FF 
0b060     00 E4 85 F1 | 	sub	objptr, ##1536
0b064     F2 28 02 F1 | 	add	local02, objptr
0b068     08 28 06 F1 | 	add	local02, #8
0b06c     14 9D 68 FC | 	wrlong	#78, local02
0b070     03 00 00 FF 
0b074     0C E4 05 F1 | 	add	objptr, ##1548
0b078     F2 2A 02 FB | 	rdlong	local03, objptr
0b07c     4A 00 00 FF 
0b080     88 E4 85 F1 | 	sub	objptr, ##38024
0b084     04 4E 05 F1 | 	add	fp, #4
0b088     A7 2A 62 FC | 	wrlong	local03, fp
0b08c     08 4E 85 F1 | 	sub	fp, #8
0b090                 | '   gotoline=val%(lparts(ct).part$) 
0b090                 | '   compiledline(lineptr).result_type=token_fast_goto
0b090                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b090                 | '   do
0b090                 | LR__0930
0b090     10 4E 05 F1 | 	add	fp, #16
0b094     A7 12 02 F6 | 	mov	arg01, fp
0b098     08 4E 85 F1 | 	sub	fp, #8
0b09c     A7 14 02 FB | 	rdlong	arg02, fp
0b0a0     08 4E 85 F1 | 	sub	fp, #8
0b0a4     18 16 06 F6 | 	mov	arg03, #24
0b0a8     0B 00 00 FF 
0b0ac     CC E4 05 F1 | 	add	objptr, ##5836
0b0b0     F8 A9 B1 FD | 	call	#_psram_spin2_read1
0b0b4     0B 00 00 FF 
0b0b8     CC E4 85 F1 | 	sub	objptr, ##5836
0b0bc                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b0bc                 | '     if gotoheader(0)<>$FFFFFFFF then
0b0bc     10 4E 05 F1 | 	add	fp, #16
0b0c0     A7 2A 02 FB | 	rdlong	local03, fp
0b0c4     10 4E 85 F1 | 	sub	fp, #16
0b0c8     FF FF 7F FF 
0b0cc     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0b0d0     24 00 90 AD |  if_e	jmp	#LR__0931
0b0d4     08 4E 05 F1 | 	add	fp, #8
0b0d8     A7 2A 02 FB | 	rdlong	local03, fp
0b0dc     04 4E 05 F1 | 	add	fp, #4
0b0e0     A7 2A 62 FC | 	wrlong	local03, fp
0b0e4     18 4E 05 F1 | 	add	fp, #24
0b0e8     A7 2A 02 FB | 	rdlong	local03, fp
0b0ec     1C 4E 85 F1 | 	sub	fp, #28
0b0f0     A7 2A 62 FC | 	wrlong	local03, fp
0b0f4     08 4E 85 F1 | 	sub	fp, #8
0b0f8                 | LR__0931
0b0f8     24 4E 05 F1 | 	add	fp, #36
0b0fc     A7 2A 02 FB | 	rdlong	local03, fp
0b100     24 4E 85 F1 | 	sub	fp, #36
0b104     FF FF 3F FF 
0b108     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0b10c     10 4E 05 51 |  if_ne	add	fp, #16
0b110     A7 26 02 5B |  if_ne	rdlong	local01, fp
0b114     10 4E 85 51 |  if_ne	sub	fp, #16
0b118     FF FF 7F 5F 
0b11c     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0b120     1C 00 90 AD |  if_e	jmp	#LR__0932
0b124     10 4E 05 F1 | 	add	fp, #16
0b128     A7 2A 02 FB | 	rdlong	local03, fp
0b12c     0C 4E 85 F1 | 	sub	fp, #12
0b130     A7 28 02 FB | 	rdlong	local02, fp
0b134     04 4E 85 F1 | 	sub	fp, #4
0b138     14 2B 0A F2 | 	cmp	local03, local02 wz
0b13c     50 FF 9F 5D |  if_ne	jmp	#LR__0930
0b140                 | LR__0932
0b140                 | '   if gotoheader(0)=gotoline then
0b140     10 4E 05 F1 | 	add	fp, #16
0b144     A7 2A 02 FB | 	rdlong	local03, fp
0b148     0C 4E 85 F1 | 	sub	fp, #12
0b14c     A7 26 02 FB | 	rdlong	local01, fp
0b150     04 4E 85 F1 | 	sub	fp, #4
0b154     13 2B 0A F2 | 	cmp	local03, local01 wz
0b158     7C 00 90 5D |  if_ne	jmp	#LR__0933
0b15c     4A 00 00 FF 
0b160     7C E4 05 F1 | 	add	objptr, ##38012
0b164     F2 26 02 FB | 	rdlong	local01, objptr
0b168     13 29 02 F6 | 	mov	local02, local01
0b16c     01 28 66 F0 | 	shl	local02, #1
0b170     13 29 02 F1 | 	add	local02, local01
0b174     02 28 66 F0 | 	shl	local02, #2
0b178     03 00 00 FF 
0b17c     00 E4 85 F1 | 	sub	objptr, ##1536
0b180     F2 28 02 F1 | 	add	local02, objptr
0b184     0C 4E 05 F1 | 	add	fp, #12
0b188     A7 2A 02 FB | 	rdlong	local03, fp
0b18c     14 2B 62 FC | 	wrlong	local03, local02
0b190     03 00 00 FF 
0b194     00 E4 05 F1 | 	add	objptr, ##1536
0b198     F2 26 02 FB | 	rdlong	local01, objptr
0b19c     13 29 02 F6 | 	mov	local02, local01
0b1a0     01 28 66 F0 | 	shl	local02, #1
0b1a4     13 29 02 F1 | 	add	local02, local01
0b1a8     02 28 66 F0 | 	shl	local02, #2
0b1ac     03 00 00 FF 
0b1b0     00 E4 85 F1 | 	sub	objptr, ##1536
0b1b4     F2 28 02 F1 | 	add	local02, objptr
0b1b8     08 4E 85 F1 | 	sub	fp, #8
0b1bc     A7 2A 02 FB | 	rdlong	local03, fp
0b1c0     04 4E 85 F1 | 	sub	fp, #4
0b1c4     04 28 06 F1 | 	add	local02, #4
0b1c8     14 2B 62 FC | 	wrlong	local03, local02
0b1cc     47 00 00 FF 
0b1d0     7C E4 85 F1 | 	sub	objptr, ##36476
0b1d4     A4 00 90 FD | 	jmp	#LR__0934
0b1d8                 | LR__0933
0b1d8     4A 00 00 FF 
0b1dc     7C E4 05 F1 | 	add	objptr, ##38012
0b1e0     F2 26 02 FB | 	rdlong	local01, objptr
0b1e4     13 29 02 F6 | 	mov	local02, local01
0b1e8     01 28 66 F0 | 	shl	local02, #1
0b1ec     13 29 02 F1 | 	add	local02, local01
0b1f0     02 28 66 F0 | 	shl	local02, #2
0b1f4     03 00 00 FF 
0b1f8     00 E4 85 F1 | 	sub	objptr, ##1536
0b1fc     F2 28 02 F1 | 	add	local02, objptr
0b200     00 00 C0 FF 
0b204     14 01 68 FC | 	wrlong	##-2147483648, local02
0b208     03 00 00 FF 
0b20c     00 E4 05 F1 | 	add	objptr, ##1536
0b210     F2 26 02 FB | 	rdlong	local01, objptr
0b214     13 29 02 F6 | 	mov	local02, local01
0b218     01 28 66 F0 | 	shl	local02, #1
0b21c     13 29 02 F1 | 	add	local02, local01
0b220     02 28 66 F0 | 	shl	local02, #2
0b224     03 00 00 FF 
0b228     00 E4 85 F1 | 	sub	objptr, ##1536
0b22c     F2 28 02 F1 | 	add	local02, objptr
0b230     04 4E 05 F1 | 	add	fp, #4
0b234     A7 2A 02 FB | 	rdlong	local03, fp
0b238     04 4E 85 F1 | 	sub	fp, #4
0b23c     04 28 06 F1 | 	add	local02, #4
0b240     14 2B 62 FC | 	wrlong	local03, local02
0b244     03 00 00 FF 
0b248     00 E4 05 F1 | 	add	objptr, ##1536
0b24c     F2 26 02 FB | 	rdlong	local01, objptr
0b250     13 29 02 F6 | 	mov	local02, local01
0b254     01 28 66 F0 | 	shl	local02, #1
0b258     13 29 02 F1 | 	add	local02, local01
0b25c     02 28 66 F0 | 	shl	local02, #2
0b260     03 00 00 FF 
0b264     00 E4 85 F1 | 	sub	objptr, ##1536
0b268     F2 28 02 F1 | 	add	local02, objptr
0b26c     08 28 06 F1 | 	add	local02, #8
0b270     14 A7 68 FC | 	wrlong	#83, local02
0b274     47 00 00 FF 
0b278     7C E4 85 F1 | 	sub	objptr, ##36476
0b27c                 | LR__0934
0b27c     4A 00 00 FF 
0b280     7C E4 05 F1 | 	add	objptr, ##38012
0b284     F2 2A 02 FB | 	rdlong	local03, objptr
0b288     01 2A 06 F1 | 	add	local03, #1
0b28c     F2 2A 62 FC | 	wrlong	local03, objptr
0b290     4A 00 00 FF 
0b294     7C E4 85 F1 | 	sub	objptr, ##38012
0b298     D0 00 90 FD | 	jmp	#LR__0936
0b29c                 | LR__0935
0b29c     98 0A B0 FD | 	call	#_expr
0b2a0     30 4E 05 F1 | 	add	fp, #48
0b2a4     A7 9E 68 FC | 	wrlong	#79, fp
0b2a8     08 4E 85 F1 | 	sub	fp, #8
0b2ac     A7 00 68 FC | 	wrlong	#0, fp
0b2b0     04 4E 05 F1 | 	add	fp, #4
0b2b4     A7 2A 02 FB | 	rdlong	local03, fp
0b2b8     04 4E 05 F1 | 	add	fp, #4
0b2bc     A7 26 02 FB | 	rdlong	local01, fp
0b2c0     30 4E 85 F1 | 	sub	fp, #48
0b2c4     4A 00 00 FF 
0b2c8     7C E4 05 F1 | 	add	objptr, ##38012
0b2cc     F2 28 02 FB | 	rdlong	local02, objptr
0b2d0     14 17 02 F6 | 	mov	arg03, local02
0b2d4     01 16 66 F0 | 	shl	arg03, #1
0b2d8     14 17 02 F1 | 	add	arg03, local02
0b2dc     02 16 66 F0 | 	shl	arg03, #2
0b2e0     03 00 00 FF 
0b2e4     00 E4 85 F1 | 	sub	objptr, ##1536
0b2e8     F2 16 02 F1 | 	add	arg03, objptr
0b2ec     0B 01 68 FC | 	wrlong	#0, arg03
0b2f0     03 00 00 FF 
0b2f4     00 E4 05 F1 | 	add	objptr, ##1536
0b2f8     F2 28 02 FB | 	rdlong	local02, objptr
0b2fc     14 17 02 F6 | 	mov	arg03, local02
0b300     01 16 66 F0 | 	shl	arg03, #1
0b304     14 17 02 F1 | 	add	arg03, local02
0b308     02 16 66 F0 | 	shl	arg03, #2
0b30c     03 00 00 FF 
0b310     00 E4 85 F1 | 	sub	objptr, ##1536
0b314     F2 16 02 F1 | 	add	arg03, objptr
0b318     04 16 06 F1 | 	add	arg03, #4
0b31c     0B 2B 62 FC | 	wrlong	local03, arg03
0b320     03 00 00 FF 
0b324     00 E4 05 F1 | 	add	objptr, ##1536
0b328     F2 2A 02 FB | 	rdlong	local03, objptr
0b32c     15 29 02 F6 | 	mov	local02, local03
0b330     01 28 66 F0 | 	shl	local02, #1
0b334     15 29 02 F1 | 	add	local02, local03
0b338     02 28 66 F0 | 	shl	local02, #2
0b33c     03 00 00 FF 
0b340     00 E4 85 F1 | 	sub	objptr, ##1536
0b344     F2 28 02 F1 | 	add	local02, objptr
0b348     08 28 06 F1 | 	add	local02, #8
0b34c     14 27 62 FC | 	wrlong	local01, local02
0b350     03 00 00 FF 
0b354     00 E4 05 F1 | 	add	objptr, ##1536
0b358     F2 2A 02 FB | 	rdlong	local03, objptr
0b35c     01 2A 06 F1 | 	add	local03, #1
0b360     F2 2A 62 FC | 	wrlong	local03, objptr
0b364     4A 00 00 FF 
0b368     7C E4 85 F1 | 	sub	objptr, ##38012
0b36c                 | LR__0936
0b36c                 | ' return 0
0b36c     00 FA 05 F6 | 	mov	result1, #0
0b370     A7 F0 03 F6 | 	mov	ptra, fp
0b374     B2 00 A0 FD | 	call	#popregs_
0b378                 | _compile_goto_ret
0b378     2D 00 64 FD | 	ret
0b37c                 | 
0b37c                 | ' 
0b37c                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b37c                 | ' 
0b37c                 | ' function compile_on() as ulong
0b37c                 | _compile_on
0b37c     04 4A 05 F6 | 	mov	COUNT_, #4
0b380     A8 00 A0 FD | 	call	#pushregs_
0b384     B0 09 B0 FD | 	call	#_expr
0b388     00 26 06 F6 | 	mov	local01, #0
0b38c     4A 00 00 FF 
0b390     7C E4 05 F1 | 	add	objptr, ##38012
0b394     F2 14 02 FB | 	rdlong	arg02, objptr
0b398     0A 13 02 F6 | 	mov	arg01, arg02
0b39c     01 12 66 F0 | 	shl	arg01, #1
0b3a0     0A 13 02 F1 | 	add	arg01, arg02
0b3a4     02 12 66 F0 | 	shl	arg01, #2
0b3a8     03 00 00 FF 
0b3ac     00 E4 85 F1 | 	sub	objptr, ##1536
0b3b0     F2 12 02 F1 | 	add	arg01, objptr
0b3b4     08 12 06 F1 | 	add	arg01, #8
0b3b8     09 83 69 FC | 	wrlong	#193, arg01
0b3bc     03 00 00 FF 
0b3c0     00 E4 05 F1 | 	add	objptr, ##1536
0b3c4     F2 14 02 FB | 	rdlong	arg02, objptr
0b3c8     0A 29 02 F6 | 	mov	local02, arg02
0b3cc     01 14 06 F1 | 	add	arg02, #1
0b3d0     F2 14 62 FC | 	wrlong	arg02, objptr
0b3d4                 | ' expr()
0b3d4                 | ' 'print lparts(ct).part$ 'ok
0b3d4                 | ' numpar=0
0b3d4                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b3d4                 | ' if lparts(ct).part$="goto" then
0b3d4     13 00 00 FF 
0b3d8     38 E4 85 F1 | 	sub	objptr, ##9784
0b3dc     F2 14 02 FB | 	rdlong	arg02, objptr
0b3e0     03 14 66 F0 | 	shl	arg02, #3
0b3e4     02 00 00 FF 
0b3e8     38 E4 85 F1 | 	sub	objptr, ##1080
0b3ec     F2 14 02 F1 | 	add	arg02, objptr
0b3f0     0A 13 02 FB | 	rdlong	arg01, arg02
0b3f4     B4 01 00 FF 
0b3f8     A2 15 06 F6 | 	mov	arg02, ##@LR__5826
0b3fc     35 00 00 FF 
0b400     0C E4 85 F1 | 	sub	objptr, ##27148
0b404     54 B3 B1 FD | 	call	#__system___string_cmp
0b408     00 FA 0D F2 | 	cmp	result1, #0 wz
0b40c     14 02 90 5D |  if_ne	jmp	#LR__0945
0b410     37 00 00 FF 
0b414     44 E4 05 F1 | 	add	objptr, ##28228
0b418     F2 2A 02 FB | 	rdlong	local03, objptr
0b41c     37 00 00 FF 
0b420     44 E4 85 F1 | 	sub	objptr, ##28228
0b424     01 2A 06 F1 | 	add	local03, #1
0b428                 | '   i=ct+1
0b428                 | '   do
0b428                 | LR__0940
0b428                 | '     if lparts(i).token=token_decimal then
0b428     15 FB 01 F6 | 	mov	result1, local03
0b42c     03 FA 65 F0 | 	shl	result1, #3
0b430     35 00 00 FF 
0b434     0C E4 05 F1 | 	add	objptr, ##27148
0b438     F2 FA 01 F1 | 	add	result1, objptr
0b43c     04 FA 05 F1 | 	add	result1, #4
0b440     FD FA 01 FB | 	rdlong	result1, result1
0b444     01 00 00 FF 
0b448     00 FA 0D F2 | 	cmp	result1, ##512 wz
0b44c     35 00 00 FF 
0b450     0C E4 85 F1 | 	sub	objptr, ##27148
0b454     DC 00 90 5D |  if_ne	jmp	#LR__0941
0b458     4A 00 00 FF 
0b45c     7C E4 05 F1 | 	add	objptr, ##38012
0b460     F2 FA 01 FB | 	rdlong	result1, objptr
0b464     FD 14 02 F6 | 	mov	arg02, result1
0b468     01 14 66 F0 | 	shl	arg02, #1
0b46c     FD 14 02 F1 | 	add	arg02, result1
0b470     02 14 66 F0 | 	shl	arg02, #2
0b474     03 00 00 FF 
0b478     00 E4 85 F1 | 	sub	objptr, ##1536
0b47c     F2 14 02 F1 | 	add	arg02, objptr
0b480     00 00 C0 FF 
0b484     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0b488     03 00 00 FF 
0b48c     00 E4 05 F1 | 	add	objptr, ##1536
0b490     F2 14 02 FB | 	rdlong	arg02, objptr
0b494     0A 2D 02 F6 | 	mov	local04, arg02
0b498     01 2C 66 F0 | 	shl	local04, #1
0b49c     0A 2D 02 F1 | 	add	local04, arg02
0b4a0     02 2C 66 F0 | 	shl	local04, #2
0b4a4     03 00 00 FF 
0b4a8     00 E4 85 F1 | 	sub	objptr, ##1536
0b4ac     F2 2C 02 F1 | 	add	local04, objptr
0b4b0     15 15 02 F6 | 	mov	arg02, local03
0b4b4     03 14 66 F0 | 	shl	arg02, #3
0b4b8     12 00 00 FF 
0b4bc     70 E4 85 F1 | 	sub	objptr, ##9328
0b4c0     F2 14 02 F1 | 	add	arg02, objptr
0b4c4     0A 13 02 FB | 	rdlong	arg01, arg02
0b4c8     00 14 06 F6 | 	mov	arg02, #0
0b4cc     35 00 00 FF 
0b4d0     0C E4 85 F1 | 	sub	objptr, ##27148
0b4d4     4C E7 B1 FD | 	call	#__system____builtin_atoi
0b4d8     04 2C 06 F1 | 	add	local04, #4
0b4dc     16 FB 61 FC | 	wrlong	result1, local04
0b4e0     4A 00 00 FF 
0b4e4     7C E4 05 F1 | 	add	objptr, ##38012
0b4e8     F2 14 02 FB | 	rdlong	arg02, objptr
0b4ec     0A 2D 02 F6 | 	mov	local04, arg02
0b4f0     01 2C 66 F0 | 	shl	local04, #1
0b4f4     0A 2D 02 F1 | 	add	local04, arg02
0b4f8     02 2C 66 F0 | 	shl	local04, #2
0b4fc     03 00 00 FF 
0b500     00 E4 85 F1 | 	sub	objptr, ##1536
0b504     F2 2C 02 F1 | 	add	local04, objptr
0b508     08 2C 06 F1 | 	add	local04, #8
0b50c     16 A7 68 FC | 	wrlong	#83, local04
0b510     03 00 00 FF 
0b514     00 E4 05 F1 | 	add	objptr, ##1536
0b518     F2 2C 02 FB | 	rdlong	local04, objptr
0b51c     01 2C 06 F1 | 	add	local04, #1
0b520     F2 2C 62 FC | 	wrlong	local04, objptr
0b524     4A 00 00 FF 
0b528     7C E4 85 F1 | 	sub	objptr, ##38012
0b52c     01 26 06 F1 | 	add	local01, #1
0b530     08 00 90 FD | 	jmp	#LR__0942
0b534                 | LR__0941
0b534                 | '       return 17
0b534     11 FA 05 F6 | 	mov	result1, #17
0b538     5C 04 90 FD | 	jmp	#LR__0955
0b53c                 | LR__0942
0b53c     01 2A 06 F1 | 	add	local03, #1
0b540                 | '     i+=1
0b540                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b540     15 2D 02 F6 | 	mov	local04, local03
0b544     03 2C 66 F0 | 	shl	local04, #3
0b548     35 00 00 FF 
0b54c     0C E4 05 F1 | 	add	objptr, ##27148
0b550     F2 2C 02 F1 | 	add	local04, objptr
0b554     04 2C 06 F1 | 	add	local04, #4
0b558     16 2D 02 FB | 	rdlong	local04, local04
0b55c     11 2C 0E F2 | 	cmp	local04, #17 wz
0b560     35 00 00 FF 
0b564     0C E4 85 F1 | 	sub	objptr, ##27148
0b568     30 00 90 AD |  if_e	jmp	#LR__0943
0b56c     15 2D 02 F6 | 	mov	local04, local03
0b570     03 2C 66 F0 | 	shl	local04, #3
0b574     35 00 00 FF 
0b578     0C E4 05 F1 | 	add	objptr, ##27148
0b57c     F2 2C 02 F1 | 	add	local04, objptr
0b580     04 2C 06 F1 | 	add	local04, #4
0b584     16 2D 02 FB | 	rdlong	local04, local04
0b588     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b58c     35 00 00 FF 
0b590     0C E4 85 F1 | 	sub	objptr, ##27148
0b594     15 FA 05 56 |  if_ne	mov	result1, #21
0b598     FC 03 90 5D |  if_ne	jmp	#LR__0955
0b59c                 | LR__0943
0b59c                 | '     if lparts(i).token=token_end then exit loop
0b59c     15 2D 02 F6 | 	mov	local04, local03
0b5a0     03 2C 66 F0 | 	shl	local04, #3
0b5a4     35 00 00 FF 
0b5a8     0C E4 05 F1 | 	add	objptr, ##27148
0b5ac     F2 2C 02 F1 | 	add	local04, objptr
0b5b0     04 2C 06 F1 | 	add	local04, #4
0b5b4     16 2D 02 FB | 	rdlong	local04, local04
0b5b8     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b5bc     35 00 00 FF 
0b5c0     0C E4 85 F1 | 	sub	objptr, ##27148
0b5c4     30 00 90 AD |  if_e	jmp	#LR__0944
0b5c8     01 2A 06 F1 | 	add	local03, #1
0b5cc     15 2D 02 F6 | 	mov	local04, local03
0b5d0     03 2C 66 F0 | 	shl	local04, #3
0b5d4     35 00 00 FF 
0b5d8     0C E4 05 F1 | 	add	objptr, ##27148
0b5dc     F2 2C 02 F1 | 	add	local04, objptr
0b5e0     04 2C 06 F1 | 	add	local04, #4
0b5e4     16 2D 02 FB | 	rdlong	local04, local04
0b5e8     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b5ec     35 00 00 FF 
0b5f0     0C E4 85 F1 | 	sub	objptr, ##27148
0b5f4     30 FE 9F 5D |  if_ne	jmp	#LR__0940
0b5f8                 | LR__0944
0b5f8     14 2D 02 F6 | 	mov	local04, local02
0b5fc     01 2C 66 F0 | 	shl	local04, #1
0b600     14 2D 02 F1 | 	add	local04, local02
0b604     02 2C 66 F0 | 	shl	local04, #2
0b608     47 00 00 FF 
0b60c     7C E4 05 F1 | 	add	objptr, ##36476
0b610     F2 2C 02 F1 | 	add	local04, objptr
0b614     04 2C 06 F1 | 	add	local04, #4
0b618     16 03 68 FC | 	wrlong	#1, local04
0b61c     47 00 00 FF 
0b620     7C E4 85 F1 | 	sub	objptr, ##36476
0b624                 | LR__0945
0b624                 | ' 
0b624                 | ' if lparts(ct).part$="gosub" then
0b624     37 00 00 FF 
0b628     44 E4 05 F1 | 	add	objptr, ##28228
0b62c     F2 2A 02 FB | 	rdlong	local03, objptr
0b630     03 2A 66 F0 | 	shl	local03, #3
0b634     02 00 00 FF 
0b638     38 E4 85 F1 | 	sub	objptr, ##1080
0b63c     F2 2A 02 F1 | 	add	local03, objptr
0b640     15 13 02 FB | 	rdlong	arg01, local03
0b644     B4 01 00 FF 
0b648     A7 15 06 F6 | 	mov	arg02, ##@LR__5827
0b64c     35 00 00 FF 
0b650     0C E4 85 F1 | 	sub	objptr, ##27148
0b654     04 B1 B1 FD | 	call	#__system___string_cmp
0b658     00 FA 0D F2 | 	cmp	result1, #0 wz
0b65c     84 02 90 5D |  if_ne	jmp	#LR__0951
0b660     37 00 00 FF 
0b664     44 E4 05 F1 | 	add	objptr, ##28228
0b668     F2 2A 02 FB | 	rdlong	local03, objptr
0b66c     37 00 00 FF 
0b670     44 E4 85 F1 | 	sub	objptr, ##28228
0b674     01 2A 06 F1 | 	add	local03, #1
0b678                 | '   i=ct+1
0b678                 | '   do
0b678                 | LR__0946
0b678                 | '     if lparts(i).token=token_decimal then
0b678     15 2D 02 F6 | 	mov	local04, local03
0b67c     03 2C 66 F0 | 	shl	local04, #3
0b680     35 00 00 FF 
0b684     0C E4 05 F1 | 	add	objptr, ##27148
0b688     F2 2C 02 F1 | 	add	local04, objptr
0b68c     04 2C 06 F1 | 	add	local04, #4
0b690     16 2D 02 FB | 	rdlong	local04, local04
0b694     01 00 00 FF 
0b698     00 2C 0E F2 | 	cmp	local04, ##512 wz
0b69c     35 00 00 FF 
0b6a0     0C E4 85 F1 | 	sub	objptr, ##27148
0b6a4     4C 01 90 5D |  if_ne	jmp	#LR__0947
0b6a8     4A 00 00 FF 
0b6ac     7C E4 05 F1 | 	add	objptr, ##38012
0b6b0     F2 FA 01 FB | 	rdlong	result1, objptr
0b6b4     FD 2C 02 F6 | 	mov	local04, result1
0b6b8     01 2C 66 F0 | 	shl	local04, #1
0b6bc     FD 2C 02 F1 | 	add	local04, result1
0b6c0     02 2C 66 F0 | 	shl	local04, #2
0b6c4     03 00 00 FF 
0b6c8     00 E4 85 F1 | 	sub	objptr, ##1536
0b6cc     F2 2C 02 F1 | 	add	local04, objptr
0b6d0     08 2C 06 F1 | 	add	local04, #8
0b6d4     16 53 69 FC | 	wrlong	#169, local04
0b6d8     03 00 00 FF 
0b6dc     00 E4 05 F1 | 	add	objptr, ##1536
0b6e0     F2 FA 01 FB | 	rdlong	result1, objptr
0b6e4     01 FA 05 F1 | 	add	result1, #1
0b6e8     F2 FA 61 FC | 	wrlong	result1, objptr
0b6ec     FD 2C 02 F6 | 	mov	local04, result1
0b6f0     01 2C 66 F0 | 	shl	local04, #1
0b6f4     FD 2C 02 F1 | 	add	local04, result1
0b6f8     02 2C 66 F0 | 	shl	local04, #2
0b6fc     03 00 00 FF 
0b700     00 E4 85 F1 | 	sub	objptr, ##1536
0b704     F2 2C 02 F1 | 	add	local04, objptr
0b708     00 00 C0 FF 
0b70c     16 01 68 FC | 	wrlong	##-2147483648, local04
0b710     03 00 00 FF 
0b714     00 E4 05 F1 | 	add	objptr, ##1536
0b718     F2 FA 01 FB | 	rdlong	result1, objptr
0b71c     FD 2C 02 F6 | 	mov	local04, result1
0b720     01 2C 66 F0 | 	shl	local04, #1
0b724     FD 2C 02 F1 | 	add	local04, result1
0b728     02 2C 66 F0 | 	shl	local04, #2
0b72c     03 00 00 FF 
0b730     00 E4 85 F1 | 	sub	objptr, ##1536
0b734     F2 2C 02 F1 | 	add	local04, objptr
0b738     15 13 02 F6 | 	mov	arg01, local03
0b73c     03 12 66 F0 | 	shl	arg01, #3
0b740     12 00 00 FF 
0b744     70 E4 85 F1 | 	sub	objptr, ##9328
0b748     F2 12 02 F1 | 	add	arg01, objptr
0b74c     09 13 02 FB | 	rdlong	arg01, arg01
0b750     00 14 06 F6 | 	mov	arg02, #0
0b754     35 00 00 FF 
0b758     0C E4 85 F1 | 	sub	objptr, ##27148
0b75c     C4 E4 B1 FD | 	call	#__system____builtin_atoi
0b760     04 2C 06 F1 | 	add	local04, #4
0b764     16 FB 61 FC | 	wrlong	result1, local04
0b768     4A 00 00 FF 
0b76c     7C E4 05 F1 | 	add	objptr, ##38012
0b770     F2 12 02 FB | 	rdlong	arg01, objptr
0b774     09 2D 02 F6 | 	mov	local04, arg01
0b778     01 2C 66 F0 | 	shl	local04, #1
0b77c     09 2D 02 F1 | 	add	local04, arg01
0b780     02 2C 66 F0 | 	shl	local04, #2
0b784     03 00 00 FF 
0b788     00 E4 85 F1 | 	sub	objptr, ##1536
0b78c     F2 2C 02 F1 | 	add	local04, objptr
0b790     08 2C 06 F1 | 	add	local04, #8
0b794     16 A7 68 FC | 	wrlong	#83, local04
0b798     03 00 00 FF 
0b79c     00 E4 05 F1 | 	add	objptr, ##1536
0b7a0     F2 12 02 FB | 	rdlong	arg01, objptr
0b7a4     01 12 06 F1 | 	add	arg01, #1
0b7a8     F2 12 62 FC | 	wrlong	arg01, objptr
0b7ac     01 26 06 F1 | 	add	local01, #1
0b7b0     09 2D 02 F6 | 	mov	local04, arg01
0b7b4     01 2C 66 F0 | 	shl	local04, #1
0b7b8     09 2D 02 F1 | 	add	local04, arg01
0b7bc     02 2C 66 F0 | 	shl	local04, #2
0b7c0     03 00 00 FF 
0b7c4     00 E4 85 F1 | 	sub	objptr, ##1536
0b7c8     F2 2C 02 F1 | 	add	local04, objptr
0b7cc     08 2C 06 F1 | 	add	local04, #8
0b7d0     16 5B 68 FC | 	wrlong	#45, local04
0b7d4     03 00 00 FF 
0b7d8     00 E4 05 F1 | 	add	objptr, ##1536
0b7dc     F2 2C 02 FB | 	rdlong	local04, objptr
0b7e0     01 2C 06 F1 | 	add	local04, #1
0b7e4     F2 2C 62 FC | 	wrlong	local04, objptr
0b7e8     4A 00 00 FF 
0b7ec     7C E4 85 F1 | 	sub	objptr, ##38012
0b7f0     08 00 90 FD | 	jmp	#LR__0948
0b7f4                 | LR__0947
0b7f4                 | '       return 17
0b7f4     11 FA 05 F6 | 	mov	result1, #17
0b7f8     9C 01 90 FD | 	jmp	#LR__0955
0b7fc                 | LR__0948
0b7fc     01 2A 06 F1 | 	add	local03, #1
0b800                 | '     i+=1
0b800                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b800     15 2D 02 F6 | 	mov	local04, local03
0b804     03 2C 66 F0 | 	shl	local04, #3
0b808     35 00 00 FF 
0b80c     0C E4 05 F1 | 	add	objptr, ##27148
0b810     F2 2C 02 F1 | 	add	local04, objptr
0b814     04 2C 06 F1 | 	add	local04, #4
0b818     16 2D 02 FB | 	rdlong	local04, local04
0b81c     11 2C 0E F2 | 	cmp	local04, #17 wz
0b820     35 00 00 FF 
0b824     0C E4 85 F1 | 	sub	objptr, ##27148
0b828     30 00 90 AD |  if_e	jmp	#LR__0949
0b82c     15 2D 02 F6 | 	mov	local04, local03
0b830     03 2C 66 F0 | 	shl	local04, #3
0b834     35 00 00 FF 
0b838     0C E4 05 F1 | 	add	objptr, ##27148
0b83c     F2 2C 02 F1 | 	add	local04, objptr
0b840     04 2C 06 F1 | 	add	local04, #4
0b844     16 2D 02 FB | 	rdlong	local04, local04
0b848     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b84c     35 00 00 FF 
0b850     0C E4 85 F1 | 	sub	objptr, ##27148
0b854     15 FA 05 56 |  if_ne	mov	result1, #21
0b858     3C 01 90 5D |  if_ne	jmp	#LR__0955
0b85c                 | LR__0949
0b85c                 | '     if lparts(i).token=token_end then exit loop
0b85c     15 2D 02 F6 | 	mov	local04, local03
0b860     03 2C 66 F0 | 	shl	local04, #3
0b864     35 00 00 FF 
0b868     0C E4 05 F1 | 	add	objptr, ##27148
0b86c     F2 2C 02 F1 | 	add	local04, objptr
0b870     04 2C 06 F1 | 	add	local04, #4
0b874     16 2D 02 FB | 	rdlong	local04, local04
0b878     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b87c     35 00 00 FF 
0b880     0C E4 85 F1 | 	sub	objptr, ##27148
0b884     30 00 90 AD |  if_e	jmp	#LR__0950
0b888     01 2A 06 F1 | 	add	local03, #1
0b88c     15 2D 02 F6 | 	mov	local04, local03
0b890     03 2C 66 F0 | 	shl	local04, #3
0b894     35 00 00 FF 
0b898     0C E4 05 F1 | 	add	objptr, ##27148
0b89c     F2 2C 02 F1 | 	add	local04, objptr
0b8a0     04 2C 06 F1 | 	add	local04, #4
0b8a4     16 2D 02 FB | 	rdlong	local04, local04
0b8a8     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b8ac     35 00 00 FF 
0b8b0     0C E4 85 F1 | 	sub	objptr, ##27148
0b8b4     C0 FD 9F 5D |  if_ne	jmp	#LR__0946
0b8b8                 | LR__0950
0b8b8     14 2D 02 F6 | 	mov	local04, local02
0b8bc     01 2C 66 F0 | 	shl	local04, #1
0b8c0     14 2D 02 F1 | 	add	local04, local02
0b8c4     02 2C 66 F0 | 	shl	local04, #2
0b8c8     47 00 00 FF 
0b8cc     7C E4 05 F1 | 	add	objptr, ##36476
0b8d0     F2 2C 02 F1 | 	add	local04, objptr
0b8d4     04 2C 06 F1 | 	add	local04, #4
0b8d8     16 07 68 FC | 	wrlong	#3, local04
0b8dc     47 00 00 FF 
0b8e0     7C E4 85 F1 | 	sub	objptr, ##36476
0b8e4                 | LR__0951
0b8e4     14 2B 02 F6 | 	mov	local03, local02
0b8e8     01 2A 66 F0 | 	shl	local03, #1
0b8ec     14 2B 02 F1 | 	add	local03, local02
0b8f0     02 2A 66 F0 | 	shl	local03, #2
0b8f4     47 00 00 FF 
0b8f8     7C E4 05 F1 | 	add	objptr, ##36476
0b8fc     F2 2A 02 F1 | 	add	local03, objptr
0b900     15 27 62 FC | 	wrlong	local01, local03
0b904                 | ' compiledline(onlineptr).result.uresult=numpar
0b904                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0b904     03 00 00 FF 
0b908     00 E4 05 F1 | 	add	objptr, ##1536
0b90c     F2 2A 02 FB | 	rdlong	local03, objptr
0b910     4A 00 00 FF 
0b914     7C E4 85 F1 | 	sub	objptr, ##38012
0b918     97 3C 48 FB | 	callpa	#(@LR__0954-@LR__0952)>>2,fcache_load_ptr_
0b91c                 | LR__0952
0b91c     15 2D 02 F6 | 	mov	local04, local03
0b920     01 2C 66 F0 | 	shl	local04, #1
0b924     15 2D 02 F1 | 	add	local04, local03
0b928     02 2C 66 F0 | 	shl	local04, #2
0b92c     47 00 00 FF 
0b930     7C E4 05 F1 | 	add	objptr, ##36476
0b934     F2 2C 02 F1 | 	add	local04, objptr
0b938     08 2C 06 F1 | 	add	local04, #8
0b93c     16 2D 02 FB | 	rdlong	local04, local04
0b940     2D 2C 0E F2 | 	cmp	local04, #45 wz
0b944     47 00 00 FF 
0b948     7C E4 85 F1 | 	sub	objptr, ##36476
0b94c     38 00 90 5D |  if_ne	jmp	#LR__0953
0b950     15 2D 02 F6 | 	mov	local04, local03
0b954     01 2C 66 F0 | 	shl	local04, #1
0b958     15 2D 02 F1 | 	add	local04, local03
0b95c     02 2C 66 F0 | 	shl	local04, #2
0b960     47 00 00 FF 
0b964     7C E4 05 F1 | 	add	objptr, ##36476
0b968     F2 2C 02 F1 | 	add	local04, objptr
0b96c     03 00 00 FF 
0b970     00 E4 05 F1 | 	add	objptr, ##1536
0b974     F2 26 02 FB | 	rdlong	local01, objptr
0b978     4A 00 00 FF 
0b97c     7C E4 85 F1 | 	sub	objptr, ##38012
0b980     02 26 86 F1 | 	sub	local01, #2
0b984     16 27 62 FC | 	wrlong	local01, local04
0b988                 | LR__0953
0b988     01 2A 86 F1 | 	sub	local03, #1
0b98c     14 2B 52 F2 | 	cmps	local03, local02 wc
0b990     88 FF 9F 3D |  if_ae	jmp	#LR__0952
0b994                 | LR__0954
0b994                 | ' return 0
0b994     00 FA 05 F6 | 	mov	result1, #0
0b998                 | LR__0955
0b998     A7 F0 03 F6 | 	mov	ptra, fp
0b99c     B2 00 A0 FD | 	call	#popregs_
0b9a0                 | _compile_on_ret
0b9a0     2D 00 64 FD | 	ret
0b9a4                 | 
0b9a4                 | ' 
0b9a4                 | ' '----- A helper for compile_input and compile_read
0b9a4                 | '  
0b9a4                 | ' function getaddr() as ulong
0b9a4                 | _getaddr
0b9a4     0B 4A 05 F6 | 	mov	COUNT_, #11
0b9a8     A8 00 A0 FD | 	call	#pushregs_
0b9ac     37 00 00 FF 
0b9b0     44 E4 05 F1 | 	add	objptr, ##28228
0b9b4     F2 2C 02 FB | 	rdlong	local04, objptr
0b9b8     03 2C 66 F0 | 	shl	local04, #3
0b9bc     02 00 00 FF 
0b9c0     38 E4 85 F1 | 	sub	objptr, ##1080
0b9c4     F2 2C 02 F1 | 	add	local04, objptr
0b9c8     16 2F 02 FB | 	rdlong	local05, local04
0b9cc     01 30 66 F6 | 	neg	local06, #1
0b9d0                 | ' 
0b9d0                 | ' varname$=lparts(ct).part$
0b9d0                 | ' j=-1
0b9d0                 | ' 
0b9d0                 | ' for i=0 to varnum-1
0b9d0     00 32 06 F6 | 	mov	local07, #0
0b9d4     04 E4 85 F1 | 	sub	objptr, #4
0b9d8     F2 34 02 FB | 	rdlong	local08, objptr
0b9dc     35 00 00 FF 
0b9e0     08 E4 85 F1 | 	sub	objptr, ##27144
0b9e4                 | LR__0960
0b9e4     1A 33 52 F2 | 	cmps	local07, local08 wc
0b9e8     38 00 90 3D |  if_ae	jmp	#LR__0961
0b9ec                 | '   if variables(i).name=varname$ then j=i : exit
0b9ec     19 2D 02 F6 | 	mov	local04, local07
0b9f0     04 2C 66 F0 | 	shl	local04, #4
0b9f4     14 00 00 FF 
0b9f8     F8 E5 05 F1 | 	add	objptr, ##10744
0b9fc     F2 2C 02 F1 | 	add	local04, objptr
0ba00     16 13 02 FB | 	rdlong	arg01, local04
0ba04     17 15 02 F6 | 	mov	arg02, local05
0ba08     14 00 00 FF 
0ba0c     F8 E5 85 F1 | 	sub	objptr, ##10744
0ba10     48 AD B1 FD | 	call	#__system___string_cmp
0ba14     00 FA 0D F2 | 	cmp	result1, #0 wz
0ba18     19 31 02 A6 |  if_e	mov	local06, local07
0ba1c     01 32 06 51 |  if_ne	add	local07, #1
0ba20     C0 FF 9F 5D |  if_ne	jmp	#LR__0960
0ba24                 | LR__0961
0ba24                 | ' if  j=-1 andalso varnum<maxvars then   
0ba24     FF FF 7F FF 
0ba28     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0ba2c     A8 00 90 5D |  if_ne	jmp	#LR__0962
0ba30     35 00 00 FF 
0ba34     08 E4 05 F1 | 	add	objptr, ##27144
0ba38     F2 34 02 FB | 	rdlong	local08, objptr
0ba3c     35 00 00 FF 
0ba40     08 E4 85 F1 | 	sub	objptr, ##27144
0ba44     02 00 00 FF 
0ba48     00 34 56 F2 | 	cmps	local08, ##1024 wc
0ba4c     88 00 90 3D |  if_ae	jmp	#LR__0962
0ba50     35 00 00 FF 
0ba54     08 E4 05 F1 | 	add	objptr, ##27144
0ba58     F2 2C 02 FB | 	rdlong	local04, objptr
0ba5c     04 2C 66 F0 | 	shl	local04, #4
0ba60     20 00 00 FF 
0ba64     10 E4 85 F1 | 	sub	objptr, ##16400
0ba68     F2 2C 02 F1 | 	add	local04, objptr
0ba6c     16 2F 62 FC | 	wrlong	local05, local04
0ba70     20 00 00 FF 
0ba74     10 E4 05 F1 | 	add	objptr, ##16400
0ba78     F2 2C 02 FB | 	rdlong	local04, objptr
0ba7c     04 2C 66 F0 | 	shl	local04, #4
0ba80     20 00 00 FF 
0ba84     10 E4 85 F1 | 	sub	objptr, ##16400
0ba88     F2 2C 02 F1 | 	add	local04, objptr
0ba8c     04 2C 06 F1 | 	add	local04, #4
0ba90     16 01 68 FC | 	wrlong	#0, local04
0ba94     20 00 00 FF 
0ba98     10 E4 05 F1 | 	add	objptr, ##16400
0ba9c     F2 2C 02 FB | 	rdlong	local04, objptr
0baa0     04 2C 66 F0 | 	shl	local04, #4
0baa4     20 00 00 FF 
0baa8     10 E4 85 F1 | 	sub	objptr, ##16400
0baac     F2 2C 02 F1 | 	add	local04, objptr
0bab0     0C 2C 06 F1 | 	add	local04, #12
0bab4     16 39 68 FC | 	wrlong	#28, local04
0bab8     20 00 00 FF 
0babc     10 E4 05 F1 | 	add	objptr, ##16400
0bac0     F2 34 02 FB | 	rdlong	local08, objptr
0bac4     1A 31 02 F6 | 	mov	local06, local08
0bac8     01 34 06 F1 | 	add	local08, #1
0bacc     F2 34 62 FC | 	wrlong	local08, objptr
0bad0     35 00 00 FF 
0bad4     08 E4 85 F1 | 	sub	objptr, ##27144
0bad8                 | LR__0962
0bad8     00 34 06 F6 | 	mov	local08, #0
0badc                 | ' numpar=0
0badc                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0badc     37 00 00 FF 
0bae0     44 E4 05 F1 | 	add	objptr, ##28228
0bae4     F2 2C 02 FB | 	rdlong	local04, objptr
0bae8     01 2C 06 F1 | 	add	local04, #1
0baec     03 2C 66 F0 | 	shl	local04, #3
0baf0     02 00 00 FF 
0baf4     38 E4 85 F1 | 	sub	objptr, ##1080
0baf8     F2 2C 02 F1 | 	add	local04, objptr
0bafc     04 2C 06 F1 | 	add	local04, #4
0bb00     16 33 02 FB | 	rdlong	local07, local04
0bb04     15 32 0E F2 | 	cmp	local07, #21 wz
0bb08     35 00 00 FF 
0bb0c     0C E4 85 F1 | 	sub	objptr, ##27148
0bb10     54 01 90 5D |  if_ne	jmp	#LR__0967
0bb14     37 00 00 FF 
0bb18     44 E4 05 F1 | 	add	objptr, ##28228
0bb1c     F2 36 02 FB | 	rdlong	local09, objptr
0bb20     01 36 06 F1 | 	add	local09, #1
0bb24     F2 36 62 FC | 	wrlong	local09, objptr
0bb28     37 00 00 FF 
0bb2c     44 E4 85 F1 | 	sub	objptr, ##28228
0bb30                 | '   ct+=1 											' omit this lpar, this is for expr list
0bb30                 | '   do
0bb30                 | LR__0963
0bb30     37 00 00 FF 
0bb34     44 E4 05 F1 | 	add	objptr, ##28228
0bb38     F2 2C 02 FB | 	rdlong	local04, objptr
0bb3c     01 2C 06 F1 | 	add	local04, #1
0bb40     F2 2C 62 FC | 	wrlong	local04, objptr
0bb44                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bb44                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bb44     03 2C 66 F0 | 	shl	local04, #3
0bb48     02 00 00 FF 
0bb4c     38 E4 85 F1 | 	sub	objptr, ##1080
0bb50     F2 2C 02 F1 | 	add	local04, objptr
0bb54     04 2C 06 F1 | 	add	local04, #4
0bb58     16 37 02 FB | 	rdlong	local09, local04
0bb5c     15 36 0E F2 | 	cmp	local09, #21 wz
0bb60     35 00 00 FF 
0bb64     0C E4 85 F1 | 	sub	objptr, ##27148
0bb68     44 00 90 5D |  if_ne	jmp	#LR__0964
0bb6c     37 00 00 FF 
0bb70     44 E4 05 F1 | 	add	objptr, ##28228
0bb74     F2 36 02 FB | 	rdlong	local09, objptr
0bb78     01 36 06 F1 | 	add	local09, #1
0bb7c     F2 36 62 FC | 	wrlong	local09, objptr
0bb80     37 00 00 FF 
0bb84     44 E4 85 F1 | 	sub	objptr, ##28228
0bb88     AC 01 B0 FD | 	call	#_expr
0bb8c     FD 38 02 F6 | 	mov	local10, result1
0bb90     37 00 00 FF 
0bb94     44 E4 05 F1 | 	add	objptr, ##28228
0bb98     F2 36 02 FB | 	rdlong	local09, objptr
0bb9c     01 36 06 F1 | 	add	local09, #1
0bba0     F2 36 62 FC | 	wrlong	local09, objptr
0bba4     37 00 00 FF 
0bba8     44 E4 85 F1 | 	sub	objptr, ##28228
0bbac     08 00 90 FD | 	jmp	#LR__0965
0bbb0                 | LR__0964
0bbb0     84 01 B0 FD | 	call	#_expr
0bbb4     FD 38 02 F6 | 	mov	local10, result1
0bbb8                 | LR__0965
0bbb8                 | '     if err>0 then return err
0bbb8     01 38 56 F2 | 	cmps	local10, #1 wc
0bbbc     1C FB 01 36 |  if_ae	mov	result1, local10
0bbc0     68 01 90 3D |  if_ae	jmp	#LR__0968
0bbc4     01 34 06 F1 | 	add	local08, #1
0bbc8     37 00 00 FF 
0bbcc     44 E4 05 F1 | 	add	objptr, ##28228
0bbd0     F2 2C 02 FB | 	rdlong	local04, objptr
0bbd4     03 2C 66 F0 | 	shl	local04, #3
0bbd8     02 00 00 FF 
0bbdc     38 E4 85 F1 | 	sub	objptr, ##1080
0bbe0     F2 2C 02 F1 | 	add	local04, objptr
0bbe4     04 2C 06 F1 | 	add	local04, #4
0bbe8     16 39 02 FB | 	rdlong	local10, local04
0bbec     14 38 0E F2 | 	cmp	local10, #20 wz
0bbf0     35 00 00 FF 
0bbf4     0C E4 85 F1 | 	sub	objptr, ##27148
0bbf8     34 00 90 AD |  if_e	jmp	#LR__0966
0bbfc     37 00 00 FF 
0bc00     44 E4 05 F1 | 	add	objptr, ##28228
0bc04     F2 38 02 FB | 	rdlong	local10, objptr
0bc08     03 38 66 F0 | 	shl	local10, #3
0bc0c     02 00 00 FF 
0bc10     38 E4 85 F1 | 	sub	objptr, ##1080
0bc14     F2 38 02 F1 | 	add	local10, objptr
0bc18     04 38 06 F1 | 	add	local10, #4
0bc1c     1C 39 02 FB | 	rdlong	local10, local10
0bc20     FE 39 0E F2 | 	cmp	local10, #510 wz
0bc24     35 00 00 FF 
0bc28     0C E4 85 F1 | 	sub	objptr, ##27148
0bc2c     00 FF 9F 5D |  if_ne	jmp	#LR__0963
0bc30                 | LR__0966
0bc30                 | '     if lparts(ct).token=token_end then return 14
0bc30     37 00 00 FF 
0bc34     44 E4 05 F1 | 	add	objptr, ##28228
0bc38     F2 2C 02 FB | 	rdlong	local04, objptr
0bc3c     03 2C 66 F0 | 	shl	local04, #3
0bc40     02 00 00 FF 
0bc44     38 E4 85 F1 | 	sub	objptr, ##1080
0bc48     F2 2C 02 F1 | 	add	local04, objptr
0bc4c     04 2C 06 F1 | 	add	local04, #4
0bc50     16 39 02 FB | 	rdlong	local10, local04
0bc54     FE 39 0E F2 | 	cmp	local10, #510 wz
0bc58     35 00 00 FF 
0bc5c     0C E4 85 F1 | 	sub	objptr, ##27148
0bc60     0E FA 05 A6 |  if_e	mov	result1, #14
0bc64     C4 00 90 AD |  if_e	jmp	#LR__0968
0bc68                 | LR__0967
0bc68     1A 29 02 F6 | 	mov	local02, local08
0bc6c     12 2A 06 F6 | 	mov	local03, #18
0bc70     18 27 02 F6 | 	mov	local01, local06
0bc74     13 37 02 F6 | 	mov	local09, local01
0bc78     14 3B 02 F6 | 	mov	local11, local02
0bc7c     15 27 02 F6 | 	mov	local01, local03
0bc80     4A 00 00 FF 
0bc84     7C E4 05 F1 | 	add	objptr, ##38012
0bc88     F2 38 02 FB | 	rdlong	local10, objptr
0bc8c     1C 35 02 F6 | 	mov	local08, local10
0bc90     01 34 66 F0 | 	shl	local08, #1
0bc94     1C 35 02 F1 | 	add	local08, local10
0bc98     02 34 66 F0 | 	shl	local08, #2
0bc9c     03 00 00 FF 
0bca0     00 E4 85 F1 | 	sub	objptr, ##1536
0bca4     F2 34 02 F1 | 	add	local08, objptr
0bca8     1A 37 62 FC | 	wrlong	local09, local08
0bcac     03 00 00 FF 
0bcb0     00 E4 05 F1 | 	add	objptr, ##1536
0bcb4     F2 38 02 FB | 	rdlong	local10, objptr
0bcb8     1C 37 02 F6 | 	mov	local09, local10
0bcbc     01 36 66 F0 | 	shl	local09, #1
0bcc0     1C 37 02 F1 | 	add	local09, local10
0bcc4     02 36 66 F0 | 	shl	local09, #2
0bcc8     03 00 00 FF 
0bccc     00 E4 85 F1 | 	sub	objptr, ##1536
0bcd0     F2 36 02 F1 | 	add	local09, objptr
0bcd4     04 36 06 F1 | 	add	local09, #4
0bcd8     1B 3B 62 FC | 	wrlong	local11, local09
0bcdc     03 00 00 FF 
0bce0     00 E4 05 F1 | 	add	objptr, ##1536
0bce4     F2 3A 02 FB | 	rdlong	local11, objptr
0bce8     1D 39 02 F6 | 	mov	local10, local11
0bcec     01 38 66 F0 | 	shl	local10, #1
0bcf0     1D 39 02 F1 | 	add	local10, local11
0bcf4     02 38 66 F0 | 	shl	local10, #2
0bcf8     03 00 00 FF 
0bcfc     00 E4 85 F1 | 	sub	objptr, ##1536
0bd00     F2 38 02 F1 | 	add	local10, objptr
0bd04     08 38 06 F1 | 	add	local10, #8
0bd08     1C 27 62 FC | 	wrlong	local01, local10
0bd0c     03 00 00 FF 
0bd10     00 E4 05 F1 | 	add	objptr, ##1536
0bd14     F2 36 02 FB | 	rdlong	local09, objptr
0bd18     01 36 06 F1 | 	add	local09, #1
0bd1c     F2 36 62 FC | 	wrlong	local09, objptr
0bd20     4A 00 00 FF 
0bd24     7C E4 85 F1 | 	sub	objptr, ##38012
0bd28                 | ' t2.result.twowords(1)=numpar
0bd28                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0bd28                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0bd28                 | ' return 0
0bd28     00 FA 05 F6 | 	mov	result1, #0
0bd2c                 | LR__0968
0bd2c     A7 F0 03 F6 | 	mov	ptra, fp
0bd30     B2 00 A0 FD | 	call	#popregs_
0bd34                 | _getaddr_ret
0bd34     2D 00 64 FD | 	ret
0bd38                 | 
0bd38                 | ' 
0bd38                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bd38                 | ' '--------------------------------------------- 
0bd38                 | ' 
0bd38                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bd38                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0bd38                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bd38                 | ' 
0bd38                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bd38                 | ' '
0bd38                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0bd38                 | ' '
0bd38                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bd38                 | ' 
0bd38                 | ' function expr() as ulong 
0bd38                 | _expr
0bd38     07 4A 05 F6 | 	mov	COUNT_, #7
0bd3c     A8 00 A0 FD | 	call	#pushregs_
0bd40                 | _expr_enter
0bd40     37 00 00 FF 
0bd44     44 E4 05 F1 | 	add	objptr, ##28228
0bd48     F2 2C 02 FB | 	rdlong	local04, objptr
0bd4c     03 2C 66 F0 | 	shl	local04, #3
0bd50     02 00 00 FF 
0bd54     38 E4 85 F1 | 	sub	objptr, ##1080
0bd58     F2 2C 02 F1 | 	add	local04, objptr
0bd5c     04 2C 06 F1 | 	add	local04, #4
0bd60     16 2F 02 FB | 	rdlong	local05, local04
0bd64                 | ' 
0bd64                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0bd64     FE 2F 0E F2 | 	cmp	local05, #510 wz
0bd68     35 00 00 FF 
0bd6c     0C E4 85 F1 | 	sub	objptr, ##27148
0bd70     C4 00 90 5D |  if_ne	jmp	#LR__0970
0bd74     1D 26 06 F6 | 	mov	local01, #29
0bd78     FF 2A 06 F6 | 	mov	local03, #255
0bd7c     13 31 02 F6 | 	mov	local06, local01
0bd80     14 33 02 F6 | 	mov	local07, local02
0bd84     15 27 02 F6 | 	mov	local01, local03
0bd88     4A 00 00 FF 
0bd8c     7C E4 05 F1 | 	add	objptr, ##38012
0bd90     F2 2E 02 FB | 	rdlong	local05, objptr
0bd94     17 2D 02 F6 | 	mov	local04, local05
0bd98     01 2C 66 F0 | 	shl	local04, #1
0bd9c     17 2D 02 F1 | 	add	local04, local05
0bda0     02 2C 66 F0 | 	shl	local04, #2
0bda4     03 00 00 FF 
0bda8     00 E4 85 F1 | 	sub	objptr, ##1536
0bdac     F2 2C 02 F1 | 	add	local04, objptr
0bdb0     16 31 62 FC | 	wrlong	local06, local04
0bdb4     03 00 00 FF 
0bdb8     00 E4 05 F1 | 	add	objptr, ##1536
0bdbc     F2 30 02 FB | 	rdlong	local06, objptr
0bdc0     18 2F 02 F6 | 	mov	local05, local06
0bdc4     01 2E 66 F0 | 	shl	local05, #1
0bdc8     18 2F 02 F1 | 	add	local05, local06
0bdcc     02 2E 66 F0 | 	shl	local05, #2
0bdd0     03 00 00 FF 
0bdd4     00 E4 85 F1 | 	sub	objptr, ##1536
0bdd8     F2 2E 02 F1 | 	add	local05, objptr
0bddc     04 2E 06 F1 | 	add	local05, #4
0bde0     17 33 62 FC | 	wrlong	local07, local05
0bde4     03 00 00 FF 
0bde8     00 E4 05 F1 | 	add	objptr, ##1536
0bdec     F2 32 02 FB | 	rdlong	local07, objptr
0bdf0     19 31 02 F6 | 	mov	local06, local07
0bdf4     01 30 66 F0 | 	shl	local06, #1
0bdf8     19 31 02 F1 | 	add	local06, local07
0bdfc     02 30 66 F0 | 	shl	local06, #2
0be00     03 00 00 FF 
0be04     00 E4 85 F1 | 	sub	objptr, ##1536
0be08     F2 30 02 F1 | 	add	local06, objptr
0be0c     08 30 06 F1 | 	add	local06, #8
0be10     18 27 62 FC | 	wrlong	local01, local06
0be14     03 00 00 FF 
0be18     00 E4 05 F1 | 	add	objptr, ##1536
0be1c     F2 30 02 FB | 	rdlong	local06, objptr
0be20     01 30 06 F1 | 	add	local06, #1
0be24     F2 30 62 FC | 	wrlong	local06, objptr
0be28     4A 00 00 FF 
0be2c     7C E4 85 F1 | 	sub	objptr, ##38012
0be30     1D FA 05 F6 | 	mov	result1, #29
0be34     64 01 90 FD | 	jmp	#LR__0973
0be38                 | LR__0970
0be38     00 26 06 F6 | 	mov	local01, #0
0be3c     68 01 B0 FD | 	call	#_addsub
0be40                 | ' t3.result.uresult=0
0be40                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0be40                 | ' if err>0 then return err
0be40     01 FA 15 F2 | 	cmp	result1, #1 wc
0be44     54 01 90 3D |  if_ae	jmp	#LR__0973
0be48     37 00 00 FF 
0be4c     44 E4 05 F1 | 	add	objptr, ##28228
0be50     F2 2C 02 FB | 	rdlong	local04, objptr
0be54     03 2C 66 F0 | 	shl	local04, #3
0be58     02 00 00 FF 
0be5c     38 E4 85 F1 | 	sub	objptr, ##1080
0be60     F2 2C 02 F1 | 	add	local04, objptr
0be64     04 2C 06 F1 | 	add	local04, #4
0be68     16 2F 02 FB | 	rdlong	local05, local04
0be6c                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0be6c                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0be6c     35 00 00 FF 
0be70     0C E4 85 F1 | 	sub	objptr, ##27148
0be74                 | LR__0971
0be74     1B 2E 0E F2 | 	cmp	local05, #27 wz
0be78     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0be7c     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0be80     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0be84     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0be88     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0be8c     08 01 90 5D |  if_ne	jmp	#LR__0972
0be90     37 00 00 FF 
0be94     44 E4 05 F1 | 	add	objptr, ##28228
0be98     F2 30 02 FB | 	rdlong	local06, objptr
0be9c     01 30 06 F1 | 	add	local06, #1
0bea0     F2 30 62 FC | 	wrlong	local06, objptr
0bea4     37 00 00 FF 
0bea8     44 E4 85 F1 | 	sub	objptr, ##28228
0beac     F8 00 B0 FD | 	call	#_addsub
0beb0                 | '   ct+=1
0beb0                 | '   err=addsub() : if err>0 then return err
0beb0     01 FA 15 F2 | 	cmp	result1, #1 wc
0beb4     E4 00 90 3D |  if_ae	jmp	#LR__0973
0beb8     17 2B 02 F6 | 	mov	local03, local05
0bebc     13 31 02 F6 | 	mov	local06, local01
0bec0     14 33 02 F6 | 	mov	local07, local02
0bec4     15 2F 02 F6 | 	mov	local05, local03
0bec8     4A 00 00 FF 
0becc     7C E4 05 F1 | 	add	objptr, ##38012
0bed0     F2 2C 02 FB | 	rdlong	local04, objptr
0bed4     16 FB 01 F6 | 	mov	result1, local04
0bed8     01 FA 65 F0 | 	shl	result1, #1
0bedc     16 FB 01 F1 | 	add	result1, local04
0bee0     02 FA 65 F0 | 	shl	result1, #2
0bee4     03 00 00 FF 
0bee8     00 E4 85 F1 | 	sub	objptr, ##1536
0beec     F2 FA 01 F1 | 	add	result1, objptr
0bef0     FD 30 62 FC | 	wrlong	local06, result1
0bef4     03 00 00 FF 
0bef8     00 E4 05 F1 | 	add	objptr, ##1536
0befc     F2 30 02 FB | 	rdlong	local06, objptr
0bf00     18 2D 02 F6 | 	mov	local04, local06
0bf04     01 2C 66 F0 | 	shl	local04, #1
0bf08     18 2D 02 F1 | 	add	local04, local06
0bf0c     02 2C 66 F0 | 	shl	local04, #2
0bf10     03 00 00 FF 
0bf14     00 E4 85 F1 | 	sub	objptr, ##1536
0bf18     F2 2C 02 F1 | 	add	local04, objptr
0bf1c     04 2C 06 F1 | 	add	local04, #4
0bf20     16 33 62 FC | 	wrlong	local07, local04
0bf24     03 00 00 FF 
0bf28     00 E4 05 F1 | 	add	objptr, ##1536
0bf2c     F2 32 02 FB | 	rdlong	local07, objptr
0bf30     19 31 02 F6 | 	mov	local06, local07
0bf34     01 30 66 F0 | 	shl	local06, #1
0bf38     19 31 02 F1 | 	add	local06, local07
0bf3c     02 30 66 F0 | 	shl	local06, #2
0bf40     03 00 00 FF 
0bf44     00 E4 85 F1 | 	sub	objptr, ##1536
0bf48     F2 30 02 F1 | 	add	local06, objptr
0bf4c     08 30 06 F1 | 	add	local06, #8
0bf50     18 2F 62 FC | 	wrlong	local05, local06
0bf54     03 00 00 FF 
0bf58     00 E4 05 F1 | 	add	objptr, ##1536
0bf5c     F2 30 02 FB | 	rdlong	local06, objptr
0bf60     01 30 06 F1 | 	add	local06, #1
0bf64     F2 30 62 FC | 	wrlong	local06, objptr
0bf68     13 00 00 FF 
0bf6c     38 E4 85 F1 | 	sub	objptr, ##9784
0bf70     F2 2C 02 FB | 	rdlong	local04, objptr
0bf74     03 2C 66 F0 | 	shl	local04, #3
0bf78     02 00 00 FF 
0bf7c     38 E4 85 F1 | 	sub	objptr, ##1080
0bf80     F2 2C 02 F1 | 	add	local04, objptr
0bf84     04 2C 06 F1 | 	add	local04, #4
0bf88     16 2F 02 FB | 	rdlong	local05, local04
0bf8c     35 00 00 FF 
0bf90     0C E4 85 F1 | 	sub	objptr, ##27148
0bf94     DC FE 9F FD | 	jmp	#LR__0971
0bf98                 | LR__0972
0bf98                 | ' return 0  
0bf98     00 FA 05 F6 | 	mov	result1, #0
0bf9c                 | LR__0973
0bf9c     A7 F0 03 F6 | 	mov	ptra, fp
0bfa0     B2 00 A0 FD | 	call	#popregs_
0bfa4                 | _expr_ret
0bfa4     2D 00 64 FD | 	ret
0bfa8                 | 
0bfa8                 | ' 
0bfa8                 | ' ' Second level operators : add, sub, logic
0bfa8                 | ' 
0bfa8                 | ' function addsub() as ulong
0bfa8                 | _addsub
0bfa8     07 4A 05 F6 | 	mov	COUNT_, #7
0bfac     A8 00 A0 FD | 	call	#pushregs_
0bfb0                 | _addsub_enter
0bfb0     00 26 06 F6 | 	mov	local01, #0
0bfb4     60 01 B0 FD | 	call	#_muldiv
0bfb8                 | ' 
0bfb8                 | ' t3.result.uresult=0
0bfb8                 | ' err=muldiv() : if err>0 then return err           			 
0bfb8     01 FA 15 F2 | 	cmp	result1, #1 wc
0bfbc     4C 01 90 3D |  if_ae	jmp	#LR__0982
0bfc0     37 00 00 FF 
0bfc4     44 E4 05 F1 | 	add	objptr, ##28228
0bfc8     F2 2C 02 FB | 	rdlong	local04, objptr
0bfcc     03 2C 66 F0 | 	shl	local04, #3
0bfd0     02 00 00 FF 
0bfd4     38 E4 85 F1 | 	sub	objptr, ##1080
0bfd8     F2 2C 02 F1 | 	add	local04, objptr
0bfdc     04 2C 06 F1 | 	add	local04, #4
0bfe0     16 2F 02 FB | 	rdlong	local05, local04
0bfe4                 | ' op = lparts(ct).token				 
0bfe4                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0bfe4     35 00 00 FF 
0bfe8     0C E4 85 F1 | 	sub	objptr, ##27148
0bfec                 | LR__0980
0bfec     01 2E 0E F2 | 	cmp	local05, #1 wz
0bff0     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0bff4     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0bff8     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0bffc     08 01 90 5D |  if_ne	jmp	#LR__0981
0c000     37 00 00 FF 
0c004     44 E4 05 F1 | 	add	objptr, ##28228
0c008     F2 2C 02 FB | 	rdlong	local04, objptr
0c00c     01 2C 06 F1 | 	add	local04, #1
0c010     F2 2C 62 FC | 	wrlong	local04, objptr
0c014     37 00 00 FF 
0c018     44 E4 85 F1 | 	sub	objptr, ##28228
0c01c     F8 00 B0 FD | 	call	#_muldiv
0c020                 | '   ct+=1
0c020                 | '   err=muldiv() : if err>0 then return err   
0c020     01 FA 15 F2 | 	cmp	result1, #1 wc
0c024     E4 00 90 3D |  if_ae	jmp	#LR__0982
0c028     17 2B 02 F6 | 	mov	local03, local05
0c02c     13 31 02 F6 | 	mov	local06, local01
0c030     14 33 02 F6 | 	mov	local07, local02
0c034     15 2F 02 F6 | 	mov	local05, local03
0c038     4A 00 00 FF 
0c03c     7C E4 05 F1 | 	add	objptr, ##38012
0c040     F2 2C 02 FB | 	rdlong	local04, objptr
0c044     16 FB 01 F6 | 	mov	result1, local04
0c048     01 FA 65 F0 | 	shl	result1, #1
0c04c     16 FB 01 F1 | 	add	result1, local04
0c050     02 FA 65 F0 | 	shl	result1, #2
0c054     03 00 00 FF 
0c058     00 E4 85 F1 | 	sub	objptr, ##1536
0c05c     F2 FA 01 F1 | 	add	result1, objptr
0c060     FD 30 62 FC | 	wrlong	local06, result1
0c064     03 00 00 FF 
0c068     00 E4 05 F1 | 	add	objptr, ##1536
0c06c     F2 30 02 FB | 	rdlong	local06, objptr
0c070     18 2D 02 F6 | 	mov	local04, local06
0c074     01 2C 66 F0 | 	shl	local04, #1
0c078     18 2D 02 F1 | 	add	local04, local06
0c07c     02 2C 66 F0 | 	shl	local04, #2
0c080     03 00 00 FF 
0c084     00 E4 85 F1 | 	sub	objptr, ##1536
0c088     F2 2C 02 F1 | 	add	local04, objptr
0c08c     04 2C 06 F1 | 	add	local04, #4
0c090     16 33 62 FC | 	wrlong	local07, local04
0c094     03 00 00 FF 
0c098     00 E4 05 F1 | 	add	objptr, ##1536
0c09c     F2 32 02 FB | 	rdlong	local07, objptr
0c0a0     19 31 02 F6 | 	mov	local06, local07
0c0a4     01 30 66 F0 | 	shl	local06, #1
0c0a8     19 31 02 F1 | 	add	local06, local07
0c0ac     02 30 66 F0 | 	shl	local06, #2
0c0b0     03 00 00 FF 
0c0b4     00 E4 85 F1 | 	sub	objptr, ##1536
0c0b8     F2 30 02 F1 | 	add	local06, objptr
0c0bc     08 30 06 F1 | 	add	local06, #8
0c0c0     18 2F 62 FC | 	wrlong	local05, local06
0c0c4     03 00 00 FF 
0c0c8     00 E4 05 F1 | 	add	objptr, ##1536
0c0cc     F2 30 02 FB | 	rdlong	local06, objptr
0c0d0     01 30 06 F1 | 	add	local06, #1
0c0d4     F2 30 62 FC | 	wrlong	local06, objptr
0c0d8     13 00 00 FF 
0c0dc     38 E4 85 F1 | 	sub	objptr, ##9784
0c0e0     F2 2C 02 FB | 	rdlong	local04, objptr
0c0e4     03 2C 66 F0 | 	shl	local04, #3
0c0e8     02 00 00 FF 
0c0ec     38 E4 85 F1 | 	sub	objptr, ##1080
0c0f0     F2 2C 02 F1 | 	add	local04, objptr
0c0f4     04 2C 06 F1 | 	add	local04, #4
0c0f8     16 2F 02 FB | 	rdlong	local05, local04
0c0fc     35 00 00 FF 
0c100     0C E4 85 F1 | 	sub	objptr, ##27148
0c104     E4 FE 9F FD | 	jmp	#LR__0980
0c108                 | LR__0981
0c108                 | ' return 0
0c108     00 FA 05 F6 | 	mov	result1, #0
0c10c                 | LR__0982
0c10c     A7 F0 03 F6 | 	mov	ptra, fp
0c110     B2 00 A0 FD | 	call	#popregs_
0c114                 | _addsub_ret
0c114     2D 00 64 FD | 	ret
0c118                 | 
0c118                 | ' 
0c118                 | ' ' Third level operators : mul,div,shift,power
0c118                 | ' 
0c118                 | ' function muldiv() as ulong
0c118                 | _muldiv
0c118     07 4A 05 F6 | 	mov	COUNT_, #7
0c11c     A8 00 A0 FD | 	call	#pushregs_
0c120                 | _muldiv_enter
0c120     00 26 06 F6 | 	mov	local01, #0
0c124     6C 01 B0 FD | 	call	#_getvalue
0c128                 | ' 
0c128                 | ' t3.result.uresult=0
0c128                 | ' err=getvalue() : if err>0 then return err     
0c128     01 FA 15 F2 | 	cmp	result1, #1 wc
0c12c     58 01 90 3D |  if_ae	jmp	#LR__0992
0c130     37 00 00 FF 
0c134     44 E4 05 F1 | 	add	objptr, ##28228
0c138     F2 2C 02 FB | 	rdlong	local04, objptr
0c13c     03 2C 66 F0 | 	shl	local04, #3
0c140     02 00 00 FF 
0c144     38 E4 85 F1 | 	sub	objptr, ##1080
0c148     F2 2C 02 F1 | 	add	local04, objptr
0c14c     04 2C 06 F1 | 	add	local04, #4
0c150     16 2F 02 FB | 	rdlong	local05, local04
0c154                 | ' op = lparts(ct).token
0c154                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c154     35 00 00 FF 
0c158     0C E4 85 F1 | 	sub	objptr, ##27148
0c15c                 | LR__0990
0c15c     05 2E 0E F2 | 	cmp	local05, #5 wz
0c160     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0c164     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0c168     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0c16c     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0c170     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0c174     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0c178     08 01 90 5D |  if_ne	jmp	#LR__0991
0c17c     37 00 00 FF 
0c180     44 E4 05 F1 | 	add	objptr, ##28228
0c184     F2 2C 02 FB | 	rdlong	local04, objptr
0c188     01 2C 06 F1 | 	add	local04, #1
0c18c     F2 2C 62 FC | 	wrlong	local04, objptr
0c190     37 00 00 FF 
0c194     44 E4 85 F1 | 	sub	objptr, ##28228
0c198     F8 00 B0 FD | 	call	#_getvalue
0c19c                 | '   ct+=1
0c19c                 | '   err=getvalue() :if err>0 then return err   
0c19c     01 FA 15 F2 | 	cmp	result1, #1 wc
0c1a0     E4 00 90 3D |  if_ae	jmp	#LR__0992
0c1a4     17 2B 02 F6 | 	mov	local03, local05
0c1a8     13 31 02 F6 | 	mov	local06, local01
0c1ac     14 33 02 F6 | 	mov	local07, local02
0c1b0     15 2F 02 F6 | 	mov	local05, local03
0c1b4     4A 00 00 FF 
0c1b8     7C E4 05 F1 | 	add	objptr, ##38012
0c1bc     F2 2C 02 FB | 	rdlong	local04, objptr
0c1c0     16 FB 01 F6 | 	mov	result1, local04
0c1c4     01 FA 65 F0 | 	shl	result1, #1
0c1c8     16 FB 01 F1 | 	add	result1, local04
0c1cc     02 FA 65 F0 | 	shl	result1, #2
0c1d0     03 00 00 FF 
0c1d4     00 E4 85 F1 | 	sub	objptr, ##1536
0c1d8     F2 FA 01 F1 | 	add	result1, objptr
0c1dc     FD 30 62 FC | 	wrlong	local06, result1
0c1e0     03 00 00 FF 
0c1e4     00 E4 05 F1 | 	add	objptr, ##1536
0c1e8     F2 30 02 FB | 	rdlong	local06, objptr
0c1ec     18 2D 02 F6 | 	mov	local04, local06
0c1f0     01 2C 66 F0 | 	shl	local04, #1
0c1f4     18 2D 02 F1 | 	add	local04, local06
0c1f8     02 2C 66 F0 | 	shl	local04, #2
0c1fc     03 00 00 FF 
0c200     00 E4 85 F1 | 	sub	objptr, ##1536
0c204     F2 2C 02 F1 | 	add	local04, objptr
0c208     04 2C 06 F1 | 	add	local04, #4
0c20c     16 33 62 FC | 	wrlong	local07, local04
0c210     03 00 00 FF 
0c214     00 E4 05 F1 | 	add	objptr, ##1536
0c218     F2 32 02 FB | 	rdlong	local07, objptr
0c21c     19 31 02 F6 | 	mov	local06, local07
0c220     01 30 66 F0 | 	shl	local06, #1
0c224     19 31 02 F1 | 	add	local06, local07
0c228     02 30 66 F0 | 	shl	local06, #2
0c22c     03 00 00 FF 
0c230     00 E4 85 F1 | 	sub	objptr, ##1536
0c234     F2 30 02 F1 | 	add	local06, objptr
0c238     08 30 06 F1 | 	add	local06, #8
0c23c     18 2F 62 FC | 	wrlong	local05, local06
0c240     03 00 00 FF 
0c244     00 E4 05 F1 | 	add	objptr, ##1536
0c248     F2 30 02 FB | 	rdlong	local06, objptr
0c24c     01 30 06 F1 | 	add	local06, #1
0c250     F2 30 62 FC | 	wrlong	local06, objptr
0c254     13 00 00 FF 
0c258     38 E4 85 F1 | 	sub	objptr, ##9784
0c25c     F2 2C 02 FB | 	rdlong	local04, objptr
0c260     03 2C 66 F0 | 	shl	local04, #3
0c264     02 00 00 FF 
0c268     38 E4 85 F1 | 	sub	objptr, ##1080
0c26c     F2 2C 02 F1 | 	add	local04, objptr
0c270     04 2C 06 F1 | 	add	local04, #4
0c274     16 2F 02 FB | 	rdlong	local05, local04
0c278     35 00 00 FF 
0c27c     0C E4 85 F1 | 	sub	objptr, ##27148
0c280     D8 FE 9F FD | 	jmp	#LR__0990
0c284                 | LR__0991
0c284                 | ' return 0
0c284     00 FA 05 F6 | 	mov	result1, #0
0c288                 | LR__0992
0c288     A7 F0 03 F6 | 	mov	ptra, fp
0c28c     B2 00 A0 FD | 	call	#popregs_
0c290                 | _muldiv_ret
0c290     2D 00 64 FD | 	ret
0c294                 | 
0c294                 | ' 
0c294                 | ' ' Get a value for operations
0c294                 | ' 
0c294                 | ' function getvalue()  as ulong
0c294                 | _getvalue
0c294     0B 4A 05 F6 | 	mov	COUNT_, #11
0c298     A8 00 A0 FD | 	call	#pushregs_
0c29c                 | _getvalue_enter
0c29c     01 2C 06 F6 | 	mov	local04, #1
0c2a0     00 26 06 F6 | 	mov	local01, #0
0c2a4     1D 2A 06 F6 | 	mov	local03, #29
0c2a8     37 00 00 FF 
0c2ac     44 E4 05 F1 | 	add	objptr, ##28228
0c2b0     F2 16 02 FB | 	rdlong	arg03, objptr
0c2b4     03 16 66 F0 | 	shl	arg03, #3
0c2b8     02 00 00 FF 
0c2bc     38 E4 85 F1 | 	sub	objptr, ##1080
0c2c0     F2 16 02 F1 | 	add	arg03, objptr
0c2c4     04 16 06 F1 | 	add	arg03, #4
0c2c8     0B 2F 02 FB | 	rdlong	local05, arg03
0c2cc                 | ' 
0c2cc                 | ' m=1											' for negative numbers
0c2cc                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c2cc                 | ' op=lparts(ct).token
0c2cc                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c2cc     02 2E 0E F2 | 	cmp	local05, #2 wz
0c2d0     35 00 00 FF 
0c2d4     0C E4 85 F1 | 	sub	objptr, ##27148
0c2d8     38 00 90 5D |  if_ne	jmp	#LR__1000
0c2dc     01 2C 66 F6 | 	neg	local04, #1
0c2e0     37 00 00 FF 
0c2e4     44 E4 05 F1 | 	add	objptr, ##28228
0c2e8     F2 2E 02 FB | 	rdlong	local05, objptr
0c2ec     01 2E 06 F1 | 	add	local05, #1
0c2f0     F2 2E 62 FC | 	wrlong	local05, objptr
0c2f4     03 2E 66 F0 | 	shl	local05, #3
0c2f8     02 00 00 FF 
0c2fc     38 E4 85 F1 | 	sub	objptr, ##1080
0c300     F2 2E 02 F1 | 	add	local05, objptr
0c304     04 2E 06 F1 | 	add	local05, #4
0c308     17 2F 02 FB | 	rdlong	local05, local05
0c30c     35 00 00 FF 
0c310     0C E4 85 F1 | 	sub	objptr, ##27148
0c314                 | LR__1000
0c314                 | ' select case op
0c314     01 00 00 FF 
0c318     00 2E 0E F2 | 	cmp	local05, ##512 wz
0c31c     44 00 90 AD |  if_e	jmp	#LR__1001
0c320     01 00 00 FF 
0c324     01 2E 0E F2 | 	cmp	local05, ##513 wz
0c328     90 01 90 AD |  if_e	jmp	#LR__1004
0c32c     01 00 00 FF 
0c330     02 2E 0E F2 | 	cmp	local05, ##514 wz
0c334     44 04 90 AD |  if_e	jmp	#LR__1011
0c338     01 00 00 FF 
0c33c     03 2E 0E F2 | 	cmp	local05, ##515 wz
0c340     A8 05 90 AD |  if_e	jmp	#LR__1014
0c344     2C 2E 0E F2 | 	cmp	local05, #44 wz
0c348     78 07 90 AD |  if_e	jmp	#LR__1019
0c34c     01 00 00 FF 
0c350     04 2E 0E F2 | 	cmp	local05, ##516 wz
0c354     70 08 90 AD |  if_e	jmp	#LR__1020
0c358     15 2E 0E F2 | 	cmp	local05, #21 wz
0c35c     98 08 90 AD |  if_e	jmp	#LR__1021
0c360     10 09 90 FD | 	jmp	#LR__1022
0c364                 | LR__1001
0c364                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c364     01 2C 0E F2 | 	cmp	local04, #1 wz
0c368     3C 00 90 5D |  if_ne	jmp	#LR__1002
0c36c     37 00 00 FF 
0c370     44 E4 05 F1 | 	add	objptr, ##28228
0c374     F2 2E 02 FB | 	rdlong	local05, objptr
0c378     03 2E 66 F0 | 	shl	local05, #3
0c37c     02 00 00 FF 
0c380     38 E4 85 F1 | 	sub	objptr, ##1080
0c384     F2 2E 02 F1 | 	add	local05, objptr
0c388     17 13 02 FB | 	rdlong	arg01, local05
0c38c     00 14 06 F6 | 	mov	arg02, #0
0c390     35 00 00 FF 
0c394     0C E4 85 F1 | 	sub	objptr, ##27148
0c398     88 D8 B1 FD | 	call	#__system____builtin_atoi
0c39c     FD 2C 02 FD | 	qmul	local04, result1
0c3a0     18 26 62 FD | 	getqx	local01
0c3a4     1C 2A 06 F6 | 	mov	local03, #28
0c3a8                 | LR__1002
0c3a8                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c3a8     FF FF 7F FF 
0c3ac     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c3b0     3C 00 90 5D |  if_ne	jmp	#LR__1003
0c3b4     37 00 00 FF 
0c3b8     44 E4 05 F1 | 	add	objptr, ##28228
0c3bc     F2 2E 02 FB | 	rdlong	local05, objptr
0c3c0     03 2E 66 F0 | 	shl	local05, #3
0c3c4     02 00 00 FF 
0c3c8     38 E4 85 F1 | 	sub	objptr, ##1080
0c3cc     F2 2E 02 F1 | 	add	local05, objptr
0c3d0     17 13 02 FB | 	rdlong	arg01, local05
0c3d4     00 14 06 F6 | 	mov	arg02, #0
0c3d8     35 00 00 FF 
0c3dc     0C E4 85 F1 | 	sub	objptr, ##27148
0c3e0     40 D8 B1 FD | 	call	#__system____builtin_atoi
0c3e4     FD 2C 02 FD | 	qmul	local04, result1
0c3e8     18 26 62 FD | 	getqx	local01
0c3ec     1C 2A 06 F6 | 	mov	local03, #28
0c3f0                 | LR__1003
0c3f0     13 31 02 F6 | 	mov	local06, local01
0c3f4     14 33 02 F6 | 	mov	local07, local02
0c3f8     15 2F 02 F6 | 	mov	local05, local03
0c3fc     4A 00 00 FF 
0c400     7C E4 05 F1 | 	add	objptr, ##38012
0c404     F2 26 02 FB | 	rdlong	local01, objptr
0c408     13 2D 02 F6 | 	mov	local04, local01
0c40c     01 2C 66 F0 | 	shl	local04, #1
0c410     13 2D 02 F1 | 	add	local04, local01
0c414     02 2C 66 F0 | 	shl	local04, #2
0c418     03 00 00 FF 
0c41c     00 E4 85 F1 | 	sub	objptr, ##1536
0c420     F2 2C 02 F1 | 	add	local04, objptr
0c424     16 31 62 FC | 	wrlong	local06, local04
0c428     03 00 00 FF 
0c42c     00 E4 05 F1 | 	add	objptr, ##1536
0c430     F2 30 02 FB | 	rdlong	local06, objptr
0c434     18 27 02 F6 | 	mov	local01, local06
0c438     01 26 66 F0 | 	shl	local01, #1
0c43c     18 27 02 F1 | 	add	local01, local06
0c440     02 26 66 F0 | 	shl	local01, #2
0c444     03 00 00 FF 
0c448     00 E4 85 F1 | 	sub	objptr, ##1536
0c44c     F2 26 02 F1 | 	add	local01, objptr
0c450     04 26 06 F1 | 	add	local01, #4
0c454     13 33 62 FC | 	wrlong	local07, local01
0c458     03 00 00 FF 
0c45c     00 E4 05 F1 | 	add	objptr, ##1536
0c460     F2 32 02 FB | 	rdlong	local07, objptr
0c464     19 31 02 F6 | 	mov	local06, local07
0c468     01 30 66 F0 | 	shl	local06, #1
0c46c     19 31 02 F1 | 	add	local06, local07
0c470     02 30 66 F0 | 	shl	local06, #2
0c474     03 00 00 FF 
0c478     00 E4 85 F1 | 	sub	objptr, ##1536
0c47c     F2 30 02 F1 | 	add	local06, objptr
0c480     08 30 06 F1 | 	add	local06, #8
0c484     18 2F 62 FC | 	wrlong	local05, local06
0c488     03 00 00 FF 
0c48c     00 E4 05 F1 | 	add	objptr, ##1536
0c490     F2 30 02 FB | 	rdlong	local06, objptr
0c494     01 30 06 F1 | 	add	local06, #1
0c498     F2 30 62 FC | 	wrlong	local06, objptr
0c49c     13 00 00 FF 
0c4a0     38 E4 85 F1 | 	sub	objptr, ##9784
0c4a4     F2 30 02 FB | 	rdlong	local06, objptr
0c4a8     01 30 06 F1 | 	add	local06, #1
0c4ac     F2 30 62 FC | 	wrlong	local06, objptr
0c4b0     37 00 00 FF 
0c4b4     44 E4 85 F1 | 	sub	objptr, ##28228
0c4b8     E4 07 90 FD | 	jmp	#LR__1023
0c4bc                 | LR__1004
0c4bc                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c4bc     37 00 00 FF 
0c4c0     44 E4 05 F1 | 	add	objptr, ##28228
0c4c4     F2 16 02 FB | 	rdlong	arg03, objptr
0c4c8     03 16 66 F0 | 	shl	arg03, #3
0c4cc     02 00 00 FF 
0c4d0     38 E4 85 F1 | 	sub	objptr, ##1080
0c4d4     F2 16 02 F1 | 	add	arg03, objptr
0c4d8     0B 13 02 FB | 	rdlong	arg01, arg03
0c4dc     01 14 06 F6 | 	mov	arg02, #1
0c4e0     35 00 00 FF 
0c4e4     0C E4 85 F1 | 	sub	objptr, ##27148
0c4e8     C4 C2 B1 FD | 	call	#__system__Left_S
0c4ec     FD 12 02 F6 | 	mov	arg01, result1
0c4f0     B4 01 00 FF 
0c4f4     AD 15 06 F6 | 	mov	arg02, ##@LR__5828
0c4f8     60 A2 B1 FD | 	call	#__system___string_cmp
0c4fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0c500     94 00 90 5D |  if_ne	jmp	#LR__1007
0c504     37 00 00 FF 
0c508     44 E4 05 F1 | 	add	objptr, ##28228
0c50c     F2 32 02 FB | 	rdlong	local07, objptr
0c510     19 31 02 F6 | 	mov	local06, local07
0c514     03 30 66 F0 | 	shl	local06, #3
0c518     02 00 00 FF 
0c51c     38 E4 85 F1 | 	sub	objptr, ##1080
0c520     F2 30 02 F1 | 	add	local06, objptr
0c524     B4 01 00 FF 
0c528     AF 2F 06 F6 | 	mov	local05, ##@LR__5829
0c52c     03 32 66 F0 | 	shl	local07, #3
0c530     F2 32 02 F1 | 	add	local07, objptr
0c534     19 33 02 FB | 	rdlong	local07, local07
0c538     02 00 00 FF 
0c53c     38 E4 05 F1 | 	add	objptr, ##1080
0c540     F2 26 02 FB | 	rdlong	local01, objptr
0c544     03 26 66 F0 | 	shl	local01, #3
0c548     02 00 00 FF 
0c54c     38 E4 85 F1 | 	sub	objptr, ##1080
0c550     F2 26 02 F1 | 	add	local01, objptr
0c554     13 13 02 FB | 	rdlong	arg01, local01
0c558     35 00 00 FF 
0c55c     0C E4 85 F1 | 	sub	objptr, ##27148
0c560     09 35 02 F6 | 	mov	local08, arg01
0c564     97 06 48 FB | 	callpa	#(@LR__1006-@LR__1005)>>2,fcache_load_ptr_
0c568                 | LR__1005
0c568     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c56c     01 34 06 51 |  if_ne	add	local08, #1
0c570     F4 FF 9F 5D |  if_ne	jmp	#LR__1005
0c574                 | LR__1006
0c574     09 35 82 F1 | 	sub	local08, arg01
0c578     1A 15 02 F6 | 	mov	arg02, local08
0c57c     01 14 86 F1 | 	sub	arg02, #1
0c580     19 13 02 F6 | 	mov	arg01, local07
0c584     B0 C2 B1 FD | 	call	#__system__Right_S
0c588     FD 14 02 F6 | 	mov	arg02, result1
0c58c     17 13 02 F6 | 	mov	arg01, local05
0c590     FC A1 B1 FD | 	call	#__system___string_concat
0c594     18 FB 61 FC | 	wrlong	result1, local06
0c598                 | LR__1007
0c598                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c598     37 00 00 FF 
0c59c     44 E4 05 F1 | 	add	objptr, ##28228
0c5a0     F2 16 02 FB | 	rdlong	arg03, objptr
0c5a4     03 16 66 F0 | 	shl	arg03, #3
0c5a8     02 00 00 FF 
0c5ac     38 E4 85 F1 | 	sub	objptr, ##1080
0c5b0     F2 16 02 F1 | 	add	arg03, objptr
0c5b4     0B 13 02 FB | 	rdlong	arg01, arg03
0c5b8     01 14 06 F6 | 	mov	arg02, #1
0c5bc     35 00 00 FF 
0c5c0     0C E4 85 F1 | 	sub	objptr, ##27148
0c5c4     E8 C1 B1 FD | 	call	#__system__Left_S
0c5c8     FD 12 02 F6 | 	mov	arg01, result1
0c5cc     B4 01 00 FF 
0c5d0     B2 15 06 F6 | 	mov	arg02, ##@LR__5830
0c5d4     84 A1 B1 FD | 	call	#__system___string_cmp
0c5d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0c5dc     94 00 90 5D |  if_ne	jmp	#LR__1010
0c5e0     37 00 00 FF 
0c5e4     44 E4 05 F1 | 	add	objptr, ##28228
0c5e8     F2 32 02 FB | 	rdlong	local07, objptr
0c5ec     19 31 02 F6 | 	mov	local06, local07
0c5f0     03 30 66 F0 | 	shl	local06, #3
0c5f4     02 00 00 FF 
0c5f8     38 E4 85 F1 | 	sub	objptr, ##1080
0c5fc     F2 30 02 F1 | 	add	local06, objptr
0c600     B4 01 00 FF 
0c604     B4 2F 06 F6 | 	mov	local05, ##@LR__5831
0c608     03 32 66 F0 | 	shl	local07, #3
0c60c     F2 32 02 F1 | 	add	local07, objptr
0c610     19 33 02 FB | 	rdlong	local07, local07
0c614     02 00 00 FF 
0c618     38 E4 05 F1 | 	add	objptr, ##1080
0c61c     F2 26 02 FB | 	rdlong	local01, objptr
0c620     03 26 66 F0 | 	shl	local01, #3
0c624     02 00 00 FF 
0c628     38 E4 85 F1 | 	sub	objptr, ##1080
0c62c     F2 26 02 F1 | 	add	local01, objptr
0c630     13 13 02 FB | 	rdlong	arg01, local01
0c634     35 00 00 FF 
0c638     0C E4 85 F1 | 	sub	objptr, ##27148
0c63c     09 35 02 F6 | 	mov	local08, arg01
0c640     97 06 48 FB | 	callpa	#(@LR__1009-@LR__1008)>>2,fcache_load_ptr_
0c644                 | LR__1008
0c644     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c648     01 34 06 51 |  if_ne	add	local08, #1
0c64c     F4 FF 9F 5D |  if_ne	jmp	#LR__1008
0c650                 | LR__1009
0c650     09 35 82 F1 | 	sub	local08, arg01
0c654     1A 15 02 F6 | 	mov	arg02, local08
0c658     01 14 86 F1 | 	sub	arg02, #1
0c65c     19 13 02 F6 | 	mov	arg01, local07
0c660     D4 C1 B1 FD | 	call	#__system__Right_S
0c664     FD 14 02 F6 | 	mov	arg02, result1
0c668     17 13 02 F6 | 	mov	arg01, local05
0c66c     20 A1 B1 FD | 	call	#__system___string_concat
0c670     18 FB 61 FC | 	wrlong	result1, local06
0c674                 | LR__1010
0c674     37 00 00 FF 
0c678     44 E4 05 F1 | 	add	objptr, ##28228
0c67c     F2 30 02 FB | 	rdlong	local06, objptr
0c680     03 30 66 F0 | 	shl	local06, #3
0c684     02 00 00 FF 
0c688     38 E4 85 F1 | 	sub	objptr, ##1080
0c68c     F2 30 02 F1 | 	add	local06, objptr
0c690     18 13 02 FB | 	rdlong	arg01, local06
0c694     00 14 06 F6 | 	mov	arg02, #0
0c698     35 00 00 FF 
0c69c     0C E4 85 F1 | 	sub	objptr, ##27148
0c6a0     80 D5 B1 FD | 	call	#__system____builtin_atoi
0c6a4     FD 2C 02 FD | 	qmul	local04, result1
0c6a8     4A 00 00 FF 
0c6ac     7C E4 05 F1 | 	add	objptr, ##38012
0c6b0     F2 30 02 FB | 	rdlong	local06, objptr
0c6b4     18 37 02 F6 | 	mov	local09, local06
0c6b8     01 36 66 F0 | 	shl	local09, #1
0c6bc     18 37 02 F1 | 	add	local09, local06
0c6c0     02 36 66 F0 | 	shl	local09, #2
0c6c4     03 00 00 FF 
0c6c8     00 E4 85 F1 | 	sub	objptr, ##1536
0c6cc     F2 36 02 F1 | 	add	local09, objptr
0c6d0     03 00 00 FF 
0c6d4     00 E4 05 F1 | 	add	objptr, ##1536
0c6d8     18 26 62 FD | 	getqx	local01
0c6dc     1C 2A 06 F6 | 	mov	local03, #28
0c6e0     13 31 02 F6 | 	mov	local06, local01
0c6e4     14 33 02 F6 | 	mov	local07, local02
0c6e8     1B 31 62 FC | 	wrlong	local06, local09
0c6ec     15 37 02 F6 | 	mov	local09, local03
0c6f0     F2 30 02 FB | 	rdlong	local06, objptr
0c6f4     18 2F 02 F6 | 	mov	local05, local06
0c6f8     01 2E 66 F0 | 	shl	local05, #1
0c6fc     18 2F 02 F1 | 	add	local05, local06
0c700     02 2E 66 F0 | 	shl	local05, #2
0c704     03 00 00 FF 
0c708     00 E4 85 F1 | 	sub	objptr, ##1536
0c70c     F2 2E 02 F1 | 	add	local05, objptr
0c710     04 2E 06 F1 | 	add	local05, #4
0c714     17 33 62 FC | 	wrlong	local07, local05
0c718     03 00 00 FF 
0c71c     00 E4 05 F1 | 	add	objptr, ##1536
0c720     F2 32 02 FB | 	rdlong	local07, objptr
0c724     19 31 02 F6 | 	mov	local06, local07
0c728     01 30 66 F0 | 	shl	local06, #1
0c72c     19 31 02 F1 | 	add	local06, local07
0c730     02 30 66 F0 | 	shl	local06, #2
0c734     03 00 00 FF 
0c738     00 E4 85 F1 | 	sub	objptr, ##1536
0c73c     F2 30 02 F1 | 	add	local06, objptr
0c740     08 30 06 F1 | 	add	local06, #8
0c744     18 37 62 FC | 	wrlong	local09, local06
0c748     03 00 00 FF 
0c74c     00 E4 05 F1 | 	add	objptr, ##1536
0c750     F2 30 02 FB | 	rdlong	local06, objptr
0c754     01 30 06 F1 | 	add	local06, #1
0c758     F2 30 62 FC | 	wrlong	local06, objptr
0c75c     13 00 00 FF 
0c760     38 E4 85 F1 | 	sub	objptr, ##9784
0c764     F2 30 02 FB | 	rdlong	local06, objptr
0c768     01 30 06 F1 | 	add	local06, #1
0c76c     F2 30 62 FC | 	wrlong	local06, objptr
0c770     37 00 00 FF 
0c774     44 E4 85 F1 | 	sub	objptr, ##28228
0c778     24 05 90 FD | 	jmp	#LR__1023
0c77c                 | LR__1011
0c77c                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c77c     01 2C 0E F2 | 	cmp	local04, #1 wz
0c780     48 00 90 5D |  if_ne	jmp	#LR__1012
0c784     00 C0 1F FF 
0c788     00 30 06 F6 | 	mov	local06, ##1065353216
0c78c     37 00 00 FF 
0c790     44 E4 05 F1 | 	add	objptr, ##28228
0c794     F2 36 02 FB | 	rdlong	local09, objptr
0c798     03 36 66 F0 | 	shl	local09, #3
0c79c     02 00 00 FF 
0c7a0     38 E4 85 F1 | 	sub	objptr, ##1080
0c7a4     F2 36 02 F1 | 	add	local09, objptr
0c7a8     1B 13 02 FB | 	rdlong	arg01, local09
0c7ac     35 00 00 FF 
0c7b0     0C E4 85 F1 | 	sub	objptr, ##27148
0c7b4     00 D6 B1 FD | 	call	#__system____builtin_atof
0c7b8     FD 14 02 F6 | 	mov	arg02, result1
0c7bc     18 13 02 F6 | 	mov	arg01, local06
0c7c0     E8 CD B1 FD | 	call	#__system___float_mul
0c7c4     FD 26 02 F6 | 	mov	local01, result1
0c7c8     1E 2A 06 F6 | 	mov	local03, #30
0c7cc                 | LR__1012
0c7cc                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c7cc     FF FF 7F FF 
0c7d0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c7d4     48 00 90 5D |  if_ne	jmp	#LR__1013
0c7d8     00 C0 5F FF 
0c7dc     00 30 06 F6 | 	mov	local06, ##-1082130432
0c7e0     37 00 00 FF 
0c7e4     44 E4 05 F1 | 	add	objptr, ##28228
0c7e8     F2 36 02 FB | 	rdlong	local09, objptr
0c7ec     03 36 66 F0 | 	shl	local09, #3
0c7f0     02 00 00 FF 
0c7f4     38 E4 85 F1 | 	sub	objptr, ##1080
0c7f8     F2 36 02 F1 | 	add	local09, objptr
0c7fc     1B 13 02 FB | 	rdlong	arg01, local09
0c800     35 00 00 FF 
0c804     0C E4 85 F1 | 	sub	objptr, ##27148
0c808     AC D5 B1 FD | 	call	#__system____builtin_atof
0c80c     FD 14 02 F6 | 	mov	arg02, result1
0c810     18 13 02 F6 | 	mov	arg01, local06
0c814     94 CD B1 FD | 	call	#__system___float_mul
0c818     FD 26 02 F6 | 	mov	local01, result1
0c81c     1E 2A 06 F6 | 	mov	local03, #30
0c820                 | LR__1013
0c820     13 31 02 F6 | 	mov	local06, local01
0c824     14 33 02 F6 | 	mov	local07, local02
0c828     15 2F 02 F6 | 	mov	local05, local03
0c82c     4A 00 00 FF 
0c830     7C E4 05 F1 | 	add	objptr, ##38012
0c834     F2 26 02 FB | 	rdlong	local01, objptr
0c838     13 37 02 F6 | 	mov	local09, local01
0c83c     01 36 66 F0 | 	shl	local09, #1
0c840     13 37 02 F1 | 	add	local09, local01
0c844     02 36 66 F0 | 	shl	local09, #2
0c848     03 00 00 FF 
0c84c     00 E4 85 F1 | 	sub	objptr, ##1536
0c850     F2 36 02 F1 | 	add	local09, objptr
0c854     1B 31 62 FC | 	wrlong	local06, local09
0c858     03 00 00 FF 
0c85c     00 E4 05 F1 | 	add	objptr, ##1536
0c860     F2 36 02 FB | 	rdlong	local09, objptr
0c864     1B 31 02 F6 | 	mov	local06, local09
0c868     01 30 66 F0 | 	shl	local06, #1
0c86c     1B 31 02 F1 | 	add	local06, local09
0c870     02 30 66 F0 | 	shl	local06, #2
0c874     03 00 00 FF 
0c878     00 E4 85 F1 | 	sub	objptr, ##1536
0c87c     F2 30 02 F1 | 	add	local06, objptr
0c880     04 30 06 F1 | 	add	local06, #4
0c884     18 33 62 FC | 	wrlong	local07, local06
0c888     03 00 00 FF 
0c88c     00 E4 05 F1 | 	add	objptr, ##1536
0c890     F2 36 02 FB | 	rdlong	local09, objptr
0c894     1B 33 02 F6 | 	mov	local07, local09
0c898     01 32 66 F0 | 	shl	local07, #1
0c89c     1B 33 02 F1 | 	add	local07, local09
0c8a0     02 32 66 F0 | 	shl	local07, #2
0c8a4     03 00 00 FF 
0c8a8     00 E4 85 F1 | 	sub	objptr, ##1536
0c8ac     F2 32 02 F1 | 	add	local07, objptr
0c8b0     08 32 06 F1 | 	add	local07, #8
0c8b4     19 2F 62 FC | 	wrlong	local05, local07
0c8b8     03 00 00 FF 
0c8bc     00 E4 05 F1 | 	add	objptr, ##1536
0c8c0     F2 30 02 FB | 	rdlong	local06, objptr
0c8c4     01 30 06 F1 | 	add	local06, #1
0c8c8     F2 30 62 FC | 	wrlong	local06, objptr
0c8cc     13 00 00 FF 
0c8d0     38 E4 85 F1 | 	sub	objptr, ##9784
0c8d4     F2 30 02 FB | 	rdlong	local06, objptr
0c8d8     01 30 06 F1 | 	add	local06, #1
0c8dc     F2 30 62 FC | 	wrlong	local06, objptr
0c8e0     37 00 00 FF 
0c8e4     44 E4 85 F1 | 	sub	objptr, ##28228
0c8e8     B4 03 90 FD | 	jmp	#LR__1023
0c8ec                 | LR__1014
0c8ec     37 00 00 FF 
0c8f0     44 E4 05 F1 | 	add	objptr, ##28228
0c8f4     F2 16 02 FB | 	rdlong	arg03, objptr
0c8f8     03 16 66 F0 | 	shl	arg03, #3
0c8fc     02 00 00 FF 
0c900     38 E4 85 F1 | 	sub	objptr, ##1080
0c904     F2 16 02 F1 | 	add	arg03, objptr
0c908     0B 13 02 FB | 	rdlong	arg01, arg03
0c90c     35 00 00 FF 
0c910     0C E4 85 F1 | 	sub	objptr, ##27148
0c914     09 35 02 F6 | 	mov	local08, arg01
0c918     97 06 48 FB | 	callpa	#(@LR__1016-@LR__1015)>>2,fcache_load_ptr_
0c91c                 | LR__1015
0c91c     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c920     01 34 06 51 |  if_ne	add	local08, #1
0c924     F4 FF 9F 5D |  if_ne	jmp	#LR__1015
0c928                 | LR__1016
0c928     09 35 82 F1 | 	sub	local08, arg01
0c92c     1A FB 01 F6 | 	mov	result1, local08
0c930     52 00 00 FF 
0c934     F0 E4 05 F1 | 	add	objptr, ##42224
0c938     F2 FA 61 FC | 	wrlong	result1, objptr
0c93c     58 E4 85 F1 | 	sub	objptr, #88
0c940     F2 12 02 FB | 	rdlong	arg01, objptr
0c944     FD 12 82 F1 | 	sub	arg01, result1
0c948     04 12 86 F1 | 	sub	arg01, #4
0c94c     03 12 26 F5 | 	andn	arg01, #3
0c950     F2 12 62 FC | 	wrlong	arg01, objptr
0c954     58 E4 05 F1 | 	add	objptr, #88
0c958     F2 14 02 FB | 	rdlong	arg02, objptr
0c95c     52 00 00 FF 
0c960     F0 E4 85 F1 | 	sub	objptr, ##42224
0c964     80 65 B1 FD | 	call	#_pslpoke
0c968                 | '     pslpoke memtop,l
0c968                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0c968     01 38 06 F6 | 	mov	local10, #1
0c96c     52 00 00 FF 
0c970     F0 E4 05 F1 | 	add	objptr, ##42224
0c974     F2 3A 02 FB | 	rdlong	local11, objptr
0c978     52 00 00 FF 
0c97c     F0 E4 85 F1 | 	sub	objptr, ##42224
0c980     01 3A 06 F1 | 	add	local11, #1
0c984                 | LR__1017
0c984     1D 39 52 F2 | 	cmps	local10, local11 wc
0c988     5C 00 90 3D |  if_ae	jmp	#LR__1018
0c98c     52 00 00 FF 
0c990     98 E4 05 F1 | 	add	objptr, ##42136
0c994     F2 32 02 FB | 	rdlong	local07, objptr
0c998     03 32 06 F1 | 	add	local07, #3
0c99c     1C 33 02 F1 | 	add	local07, local10
0c9a0     1B 00 00 FF 
0c9a4     54 E4 85 F1 | 	sub	objptr, ##13908
0c9a8     F2 36 02 FB | 	rdlong	local09, objptr
0c9ac     03 36 66 F0 | 	shl	local09, #3
0c9b0     02 00 00 FF 
0c9b4     38 E4 85 F1 | 	sub	objptr, ##1080
0c9b8     F2 36 02 F1 | 	add	local09, objptr
0c9bc     1B 13 02 FB | 	rdlong	arg01, local09
0c9c0     1C 15 02 F6 | 	mov	arg02, local10
0c9c4     01 16 06 F6 | 	mov	arg03, #1
0c9c8     35 00 00 FF 
0c9cc     0C E4 85 F1 | 	sub	objptr, ##27148
0c9d0     F4 BE B1 FD | 	call	#__system__Mid_S
0c9d4     FD 14 C2 FA | 	rdbyte	arg02, result1
0c9d8     19 13 02 F6 | 	mov	arg01, local07
0c9dc     98 65 B1 FD | 	call	#_pspoke
0c9e0     01 38 06 F1 | 	add	local10, #1
0c9e4     9C FF 9F FD | 	jmp	#LR__1017
0c9e8                 | LR__1018
0c9e8     52 00 00 FF 
0c9ec     98 E4 05 F1 | 	add	objptr, ##42136
0c9f0     F2 26 02 FB | 	rdlong	local01, objptr
0c9f4     2B 2A 06 F6 | 	mov	local03, #43
0c9f8     13 31 02 F6 | 	mov	local06, local01
0c9fc     14 33 02 F6 | 	mov	local07, local02
0ca00     15 3B 02 F6 | 	mov	local11, local03
0ca04     08 00 00 FF 
0ca08     1C E4 85 F1 | 	sub	objptr, ##4124
0ca0c     F2 38 02 FB | 	rdlong	local10, objptr
0ca10     1C 37 02 F6 | 	mov	local09, local10
0ca14     01 36 66 F0 | 	shl	local09, #1
0ca18     1C 37 02 F1 | 	add	local09, local10
0ca1c     02 36 66 F0 | 	shl	local09, #2
0ca20     03 00 00 FF 
0ca24     00 E4 85 F1 | 	sub	objptr, ##1536
0ca28     F2 36 02 F1 | 	add	local09, objptr
0ca2c     1B 31 62 FC | 	wrlong	local06, local09
0ca30     03 00 00 FF 
0ca34     00 E4 05 F1 | 	add	objptr, ##1536
0ca38     F2 38 02 FB | 	rdlong	local10, objptr
0ca3c     1C 37 02 F6 | 	mov	local09, local10
0ca40     01 36 66 F0 | 	shl	local09, #1
0ca44     1C 37 02 F1 | 	add	local09, local10
0ca48     02 36 66 F0 | 	shl	local09, #2
0ca4c     03 00 00 FF 
0ca50     00 E4 85 F1 | 	sub	objptr, ##1536
0ca54     F2 36 02 F1 | 	add	local09, objptr
0ca58     04 36 06 F1 | 	add	local09, #4
0ca5c     1B 33 62 FC | 	wrlong	local07, local09
0ca60     03 00 00 FF 
0ca64     00 E4 05 F1 | 	add	objptr, ##1536
0ca68     F2 38 02 FB | 	rdlong	local10, objptr
0ca6c     1C 37 02 F6 | 	mov	local09, local10
0ca70     01 36 66 F0 | 	shl	local09, #1
0ca74     1C 37 02 F1 | 	add	local09, local10
0ca78     02 36 66 F0 | 	shl	local09, #2
0ca7c     03 00 00 FF 
0ca80     00 E4 85 F1 | 	sub	objptr, ##1536
0ca84     F2 36 02 F1 | 	add	local09, objptr
0ca88     08 36 06 F1 | 	add	local09, #8
0ca8c     1B 3B 62 FC | 	wrlong	local11, local09
0ca90     03 00 00 FF 
0ca94     00 E4 05 F1 | 	add	objptr, ##1536
0ca98     F2 30 02 FB | 	rdlong	local06, objptr
0ca9c     01 30 06 F1 | 	add	local06, #1
0caa0     F2 30 62 FC | 	wrlong	local06, objptr
0caa4     13 00 00 FF 
0caa8     38 E4 85 F1 | 	sub	objptr, ##9784
0caac     F2 30 02 FB | 	rdlong	local06, objptr
0cab0     01 30 06 F1 | 	add	local06, #1
0cab4     F2 30 62 FC | 	wrlong	local06, objptr
0cab8     37 00 00 FF 
0cabc     44 E4 85 F1 | 	sub	objptr, ##28228
0cac0     DC 01 90 FD | 	jmp	#LR__1023
0cac4                 | LR__1019
0cac4     2C 2A 06 F6 | 	mov	local03, #44
0cac8     37 00 00 FF 
0cacc     44 E4 05 F1 | 	add	objptr, ##28228
0cad0     F2 30 02 FB | 	rdlong	local06, objptr
0cad4     03 30 66 F0 | 	shl	local06, #3
0cad8     02 00 00 FF 
0cadc     38 E4 85 F1 | 	sub	objptr, ##1080
0cae0     F2 30 02 F1 | 	add	local06, objptr
0cae4     18 13 02 FB | 	rdlong	arg01, local06
0cae8     00 14 06 F6 | 	mov	arg02, #0
0caec     35 00 00 FF 
0caf0     0C E4 85 F1 | 	sub	objptr, ##27148
0caf4     2C D1 B1 FD | 	call	#__system____builtin_atoi
0caf8     FD 26 02 F6 | 	mov	local01, result1
0cafc     13 31 02 F6 | 	mov	local06, local01
0cb00     14 33 02 F6 | 	mov	local07, local02
0cb04     15 3B 02 F6 | 	mov	local11, local03
0cb08     4A 00 00 FF 
0cb0c     7C E4 05 F1 | 	add	objptr, ##38012
0cb10     F2 38 02 FB | 	rdlong	local10, objptr
0cb14     1C 37 02 F6 | 	mov	local09, local10
0cb18     01 36 66 F0 | 	shl	local09, #1
0cb1c     1C 37 02 F1 | 	add	local09, local10
0cb20     02 36 66 F0 | 	shl	local09, #2
0cb24     03 00 00 FF 
0cb28     00 E4 85 F1 | 	sub	objptr, ##1536
0cb2c     F2 36 02 F1 | 	add	local09, objptr
0cb30     1B 31 62 FC | 	wrlong	local06, local09
0cb34     03 00 00 FF 
0cb38     00 E4 05 F1 | 	add	objptr, ##1536
0cb3c     F2 38 02 FB | 	rdlong	local10, objptr
0cb40     1C 37 02 F6 | 	mov	local09, local10
0cb44     01 36 66 F0 | 	shl	local09, #1
0cb48     1C 37 02 F1 | 	add	local09, local10
0cb4c     02 36 66 F0 | 	shl	local09, #2
0cb50     03 00 00 FF 
0cb54     00 E4 85 F1 | 	sub	objptr, ##1536
0cb58     F2 36 02 F1 | 	add	local09, objptr
0cb5c     04 36 06 F1 | 	add	local09, #4
0cb60     1B 33 62 FC | 	wrlong	local07, local09
0cb64     03 00 00 FF 
0cb68     00 E4 05 F1 | 	add	objptr, ##1536
0cb6c     F2 38 02 FB | 	rdlong	local10, objptr
0cb70     1C 37 02 F6 | 	mov	local09, local10
0cb74     01 36 66 F0 | 	shl	local09, #1
0cb78     1C 37 02 F1 | 	add	local09, local10
0cb7c     02 36 66 F0 | 	shl	local09, #2
0cb80     03 00 00 FF 
0cb84     00 E4 85 F1 | 	sub	objptr, ##1536
0cb88     F2 36 02 F1 | 	add	local09, objptr
0cb8c     08 36 06 F1 | 	add	local09, #8
0cb90     1B 3B 62 FC | 	wrlong	local11, local09
0cb94     03 00 00 FF 
0cb98     00 E4 05 F1 | 	add	objptr, ##1536
0cb9c     F2 30 02 FB | 	rdlong	local06, objptr
0cba0     01 30 06 F1 | 	add	local06, #1
0cba4     F2 30 62 FC | 	wrlong	local06, objptr
0cba8     13 00 00 FF 
0cbac     38 E4 85 F1 | 	sub	objptr, ##9784
0cbb0     F2 30 02 FB | 	rdlong	local06, objptr
0cbb4     01 30 06 F1 | 	add	local06, #1
0cbb8     F2 30 62 FC | 	wrlong	local06, objptr
0cbbc     37 00 00 FF 
0cbc0     44 E4 85 F1 | 	sub	objptr, ##28228
0cbc4     D8 00 90 FD | 	jmp	#LR__1023
0cbc8                 | LR__1020
0cbc8     16 13 02 F6 | 	mov	arg01, local04
0cbcc     24 04 B0 FD | 	call	#_getvar
0cbd0     37 00 00 FF 
0cbd4     44 E4 05 F1 | 	add	objptr, ##28228
0cbd8     F2 30 02 FB | 	rdlong	local06, objptr
0cbdc     01 30 06 F1 | 	add	local06, #1
0cbe0     F2 30 62 FC | 	wrlong	local06, objptr
0cbe4     37 00 00 FF 
0cbe8     44 E4 85 F1 | 	sub	objptr, ##28228
0cbec                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0cbec     01 FA 55 F2 | 	cmps	result1, #1 wc
0cbf0     B0 00 90 3D |  if_ae	jmp	#LR__1024
0cbf4     A8 00 90 FD | 	jmp	#LR__1023
0cbf8                 | LR__1021
0cbf8     37 00 00 FF 
0cbfc     44 E4 05 F1 | 	add	objptr, ##28228
0cc00     F2 30 02 FB | 	rdlong	local06, objptr
0cc04     01 30 06 F1 | 	add	local06, #1
0cc08     F2 30 62 FC | 	wrlong	local06, objptr
0cc0c     37 00 00 FF 
0cc10     44 E4 85 F1 | 	sub	objptr, ##28228
0cc14     20 F1 BF FD | 	call	#_expr
0cc18                 | '     ct+=1
0cc18                 | '     err=expr() : if err>0 then return err 
0cc18     01 FA 55 F2 | 	cmps	result1, #1 wc
0cc1c     84 00 90 3D |  if_ae	jmp	#LR__1024
0cc20                 | '     if lparts(ct).token=token_rpar then ct+=1
0cc20     37 00 00 FF 
0cc24     44 E4 05 F1 | 	add	objptr, ##28228
0cc28     F2 3A 02 FB | 	rdlong	local11, objptr
0cc2c     03 3A 66 F0 | 	shl	local11, #3
0cc30     02 00 00 FF 
0cc34     38 E4 85 F1 | 	sub	objptr, ##1080
0cc38     F2 3A 02 F1 | 	add	local11, objptr
0cc3c     04 3A 06 F1 | 	add	local11, #4
0cc40     1D 3B 02 FB | 	rdlong	local11, local11
0cc44     14 3A 0E F2 | 	cmp	local11, #20 wz
0cc48     35 00 00 FF 
0cc4c     0C E4 85 F1 | 	sub	objptr, ##27148
0cc50     4C 00 90 5D |  if_ne	jmp	#LR__1023
0cc54     37 00 00 FF 
0cc58     44 E4 05 F1 | 	add	objptr, ##28228
0cc5c     F2 30 02 FB | 	rdlong	local06, objptr
0cc60     01 30 06 F1 | 	add	local06, #1
0cc64     F2 30 62 FC | 	wrlong	local06, objptr
0cc68     37 00 00 FF 
0cc6c     44 E4 85 F1 | 	sub	objptr, ##28228
0cc70     2C 00 90 FD | 	jmp	#LR__1023
0cc74                 | LR__1022
0cc74     16 13 02 F6 | 	mov	arg01, local04
0cc78     34 00 B0 FD | 	call	#_getfun
0cc7c     37 00 00 FF 
0cc80     44 E4 05 F1 | 	add	objptr, ##28228
0cc84     F2 30 02 FB | 	rdlong	local06, objptr
0cc88     01 30 06 F1 | 	add	local06, #1
0cc8c     F2 30 62 FC | 	wrlong	local06, objptr
0cc90     37 00 00 FF 
0cc94     44 E4 85 F1 | 	sub	objptr, ##28228
0cc98                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0cc98     01 FA 55 F2 | 	cmps	result1, #1 wc
0cc9c     04 00 90 3D |  if_ae	jmp	#LR__1024
0cca0                 | LR__1023
0cca0                 | ' return 0  
0cca0     00 FA 05 F6 | 	mov	result1, #0
0cca4                 | LR__1024
0cca4     A7 F0 03 F6 | 	mov	ptra, fp
0cca8     B2 00 A0 FD | 	call	#popregs_
0ccac                 | _getvalue_ret
0ccac     2D 00 64 FD | 	ret
0ccb0                 | 
0ccb0                 | ' 
0ccb0                 | ' ' Get a function result 
0ccb0                 | ' 
0ccb0                 | ' function getfun(m as integer) as ulong
0ccb0                 | _getfun
0ccb0     0F 4A 05 F6 | 	mov	COUNT_, #15
0ccb4     A8 00 A0 FD | 	call	#pushregs_
0ccb8                 | _getfun_enter
0ccb8     09 2D 02 F6 | 	mov	local04, arg01
0ccbc     37 00 00 FF 
0ccc0     44 E4 05 F1 | 	add	objptr, ##28228
0ccc4     F2 2E 02 FB | 	rdlong	local05, objptr
0ccc8     17 31 02 F6 | 	mov	local06, local05
0cccc     00 32 06 F6 | 	mov	local07, #0
0ccd0                 | ' oldct=ct
0ccd0                 | ' numpar=0
0ccd0                 | ' if lparts(ct+1).token=token_lpar then
0ccd0     01 2E 06 F1 | 	add	local05, #1
0ccd4     03 2E 66 F0 | 	shl	local05, #3
0ccd8     02 00 00 FF 
0ccdc     38 E4 85 F1 | 	sub	objptr, ##1080
0cce0     F2 2E 02 F1 | 	add	local05, objptr
0cce4     04 2E 06 F1 | 	add	local05, #4
0cce8     17 2F 02 FB | 	rdlong	local05, local05
0ccec     15 2E 0E F2 | 	cmp	local05, #21 wz
0ccf0     35 00 00 FF 
0ccf4     0C E4 85 F1 | 	sub	objptr, ##27148
0ccf8     54 01 90 5D |  if_ne	jmp	#LR__1034
0ccfc     37 00 00 FF 
0cd00     44 E4 05 F1 | 	add	objptr, ##28228
0cd04     F2 34 02 FB | 	rdlong	local08, objptr
0cd08     01 34 06 F1 | 	add	local08, #1
0cd0c     F2 34 62 FC | 	wrlong	local08, objptr
0cd10     37 00 00 FF 
0cd14     44 E4 85 F1 | 	sub	objptr, ##28228
0cd18                 | '   ct+=1 											' omit this lpar, this is for expr list
0cd18                 | '   do
0cd18                 | LR__1030
0cd18     37 00 00 FF 
0cd1c     44 E4 05 F1 | 	add	objptr, ##28228
0cd20     F2 2E 02 FB | 	rdlong	local05, objptr
0cd24     01 2E 06 F1 | 	add	local05, #1
0cd28     F2 2E 62 FC | 	wrlong	local05, objptr
0cd2c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0cd2c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0cd2c     03 2E 66 F0 | 	shl	local05, #3
0cd30     02 00 00 FF 
0cd34     38 E4 85 F1 | 	sub	objptr, ##1080
0cd38     F2 2E 02 F1 | 	add	local05, objptr
0cd3c     04 2E 06 F1 | 	add	local05, #4
0cd40     17 35 02 FB | 	rdlong	local08, local05
0cd44     15 34 0E F2 | 	cmp	local08, #21 wz
0cd48     35 00 00 FF 
0cd4c     0C E4 85 F1 | 	sub	objptr, ##27148
0cd50     44 00 90 5D |  if_ne	jmp	#LR__1031
0cd54     37 00 00 FF 
0cd58     44 E4 05 F1 | 	add	objptr, ##28228
0cd5c     F2 34 02 FB | 	rdlong	local08, objptr
0cd60     01 34 06 F1 | 	add	local08, #1
0cd64     F2 34 62 FC | 	wrlong	local08, objptr
0cd68     37 00 00 FF 
0cd6c     44 E4 85 F1 | 	sub	objptr, ##28228
0cd70     C4 EF BF FD | 	call	#_expr
0cd74     FD 36 02 F6 | 	mov	local09, result1
0cd78     37 00 00 FF 
0cd7c     44 E4 05 F1 | 	add	objptr, ##28228
0cd80     F2 34 02 FB | 	rdlong	local08, objptr
0cd84     01 34 06 F1 | 	add	local08, #1
0cd88     F2 34 62 FC | 	wrlong	local08, objptr
0cd8c     37 00 00 FF 
0cd90     44 E4 85 F1 | 	sub	objptr, ##28228
0cd94     08 00 90 FD | 	jmp	#LR__1032
0cd98                 | LR__1031
0cd98     9C EF BF FD | 	call	#_expr
0cd9c     FD 36 02 F6 | 	mov	local09, result1
0cda0                 | LR__1032
0cda0                 | '     if err>0 then return err
0cda0     01 36 16 F2 | 	cmp	local09, #1 wc
0cda4     1B FB 01 36 |  if_ae	mov	result1, local09
0cda8     3C 02 90 3D |  if_ae	jmp	#LR__1036
0cdac     01 32 06 F1 | 	add	local07, #1
0cdb0     37 00 00 FF 
0cdb4     44 E4 05 F1 | 	add	objptr, ##28228
0cdb8     F2 2E 02 FB | 	rdlong	local05, objptr
0cdbc     03 2E 66 F0 | 	shl	local05, #3
0cdc0     02 00 00 FF 
0cdc4     38 E4 85 F1 | 	sub	objptr, ##1080
0cdc8     F2 2E 02 F1 | 	add	local05, objptr
0cdcc     04 2E 06 F1 | 	add	local05, #4
0cdd0     17 37 02 FB | 	rdlong	local09, local05
0cdd4     14 36 0E F2 | 	cmp	local09, #20 wz
0cdd8     35 00 00 FF 
0cddc     0C E4 85 F1 | 	sub	objptr, ##27148
0cde0     34 00 90 AD |  if_e	jmp	#LR__1033
0cde4     37 00 00 FF 
0cde8     44 E4 05 F1 | 	add	objptr, ##28228
0cdec     F2 36 02 FB | 	rdlong	local09, objptr
0cdf0     03 36 66 F0 | 	shl	local09, #3
0cdf4     02 00 00 FF 
0cdf8     38 E4 85 F1 | 	sub	objptr, ##1080
0cdfc     F2 36 02 F1 | 	add	local09, objptr
0ce00     04 36 06 F1 | 	add	local09, #4
0ce04     1B 37 02 FB | 	rdlong	local09, local09
0ce08     FE 37 0E F2 | 	cmp	local09, #510 wz
0ce0c     35 00 00 FF 
0ce10     0C E4 85 F1 | 	sub	objptr, ##27148
0ce14     00 FF 9F 5D |  if_ne	jmp	#LR__1030
0ce18                 | LR__1033
0ce18                 | '   if lparts(ct).token=token_end then return 14
0ce18     37 00 00 FF 
0ce1c     44 E4 05 F1 | 	add	objptr, ##28228
0ce20     F2 2E 02 FB | 	rdlong	local05, objptr
0ce24     03 2E 66 F0 | 	shl	local05, #3
0ce28     02 00 00 FF 
0ce2c     38 E4 85 F1 | 	sub	objptr, ##1080
0ce30     F2 2E 02 F1 | 	add	local05, objptr
0ce34     04 2E 06 F1 | 	add	local05, #4
0ce38     17 37 02 FB | 	rdlong	local09, local05
0ce3c     FE 37 0E F2 | 	cmp	local09, #510 wz
0ce40     35 00 00 FF 
0ce44     0C E4 85 F1 | 	sub	objptr, ##27148
0ce48     0E FA 05 A6 |  if_e	mov	result1, #14
0ce4c     98 01 90 AD |  if_e	jmp	#LR__1036
0ce50                 | LR__1034
0ce50     19 27 02 F6 | 	mov	local01, local07
0ce54     03 30 66 F0 | 	shl	local06, #3
0ce58     35 00 00 FF 
0ce5c     0C E4 05 F1 | 	add	objptr, ##27148
0ce60     F2 30 02 F1 | 	add	local06, objptr
0ce64     04 30 06 F1 | 	add	local06, #4
0ce68     18 2B 02 FB | 	rdlong	local03, local06
0ce6c     13 35 02 F6 | 	mov	local08, local01
0ce70     14 39 02 F6 | 	mov	local10, local02
0ce74     15 3B 02 F6 | 	mov	local11, local03
0ce78     15 00 00 FF 
0ce7c     70 E4 05 F1 | 	add	objptr, ##10864
0ce80     F2 3C 02 FB | 	rdlong	local12, objptr
0ce84     1E 3F 02 F6 | 	mov	local13, local12
0ce88     01 3E 66 F0 | 	shl	local13, #1
0ce8c     1E 3F 02 F1 | 	add	local13, local12
0ce90     02 3E 66 F0 | 	shl	local13, #2
0ce94     03 00 00 FF 
0ce98     00 E4 85 F1 | 	sub	objptr, ##1536
0ce9c     F2 3E 02 F1 | 	add	local13, objptr
0cea0     1F 35 62 FC | 	wrlong	local08, local13
0cea4     03 00 00 FF 
0cea8     00 E4 05 F1 | 	add	objptr, ##1536
0ceac     F2 34 02 FB | 	rdlong	local08, objptr
0ceb0     1A 41 02 F6 | 	mov	local14, local08
0ceb4     01 40 66 F0 | 	shl	local14, #1
0ceb8     1A 41 02 F1 | 	add	local14, local08
0cebc     02 40 66 F0 | 	shl	local14, #2
0cec0     03 00 00 FF 
0cec4     00 E4 85 F1 | 	sub	objptr, ##1536
0cec8     F2 40 02 F1 | 	add	local14, objptr
0cecc     04 40 06 F1 | 	add	local14, #4
0ced0     20 39 62 FC | 	wrlong	local10, local14
0ced4     03 00 00 FF 
0ced8     00 E4 05 F1 | 	add	objptr, ##1536
0cedc     F2 34 02 FB | 	rdlong	local08, objptr
0cee0     1A 43 02 F6 | 	mov	local15, local08
0cee4     01 42 66 F0 | 	shl	local15, #1
0cee8     1A 43 02 F1 | 	add	local15, local08
0ceec     02 42 66 F0 | 	shl	local15, #2
0cef0     03 00 00 FF 
0cef4     00 E4 85 F1 | 	sub	objptr, ##1536
0cef8     F2 42 02 F1 | 	add	local15, objptr
0cefc     08 42 06 F1 | 	add	local15, #8
0cf00     21 3B 62 FC | 	wrlong	local11, local15
0cf04     03 00 00 FF 
0cf08     00 E4 05 F1 | 	add	objptr, ##1536
0cf0c     F2 34 02 FB | 	rdlong	local08, objptr
0cf10     01 34 06 F1 | 	add	local08, #1
0cf14     F2 34 62 FC | 	wrlong	local08, objptr
0cf18     4A 00 00 FF 
0cf1c     7C E4 85 F1 | 	sub	objptr, ##38012
0cf20                 | ' t2.result.uresult=numpar
0cf20                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0cf20                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0cf20                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0cf20     FF FF 7F FF 
0cf24     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0cf28     B8 00 90 5D |  if_ne	jmp	#LR__1035
0cf2c     15 2A 06 F6 | 	mov	local03, #21
0cf30     13 35 02 F6 | 	mov	local08, local01
0cf34     14 39 02 F6 | 	mov	local10, local02
0cf38     15 3B 02 F6 | 	mov	local11, local03
0cf3c     4A 00 00 FF 
0cf40     7C E4 05 F1 | 	add	objptr, ##38012
0cf44     F2 3C 02 FB | 	rdlong	local12, objptr
0cf48     1E 3F 02 F6 | 	mov	local13, local12
0cf4c     01 3E 66 F0 | 	shl	local13, #1
0cf50     1E 3F 02 F1 | 	add	local13, local12
0cf54     02 3E 66 F0 | 	shl	local13, #2
0cf58     03 00 00 FF 
0cf5c     00 E4 85 F1 | 	sub	objptr, ##1536
0cf60     F2 3E 02 F1 | 	add	local13, objptr
0cf64     1F 35 62 FC | 	wrlong	local08, local13
0cf68     03 00 00 FF 
0cf6c     00 E4 05 F1 | 	add	objptr, ##1536
0cf70     F2 42 02 FB | 	rdlong	local15, objptr
0cf74     21 41 02 F6 | 	mov	local14, local15
0cf78     01 40 66 F0 | 	shl	local14, #1
0cf7c     21 41 02 F1 | 	add	local14, local15
0cf80     02 40 66 F0 | 	shl	local14, #2
0cf84     03 00 00 FF 
0cf88     00 E4 85 F1 | 	sub	objptr, ##1536
0cf8c     F2 40 02 F1 | 	add	local14, objptr
0cf90     04 40 06 F1 | 	add	local14, #4
0cf94     20 39 62 FC | 	wrlong	local10, local14
0cf98     03 00 00 FF 
0cf9c     00 E4 05 F1 | 	add	objptr, ##1536
0cfa0     F2 40 02 FB | 	rdlong	local14, objptr
0cfa4     20 43 02 F6 | 	mov	local15, local14
0cfa8     01 42 66 F0 | 	shl	local15, #1
0cfac     20 43 02 F1 | 	add	local15, local14
0cfb0     02 42 66 F0 | 	shl	local15, #2
0cfb4     03 00 00 FF 
0cfb8     00 E4 85 F1 | 	sub	objptr, ##1536
0cfbc     F2 42 02 F1 | 	add	local15, objptr
0cfc0     08 42 06 F1 | 	add	local15, #8
0cfc4     21 3B 62 FC | 	wrlong	local11, local15
0cfc8     03 00 00 FF 
0cfcc     00 E4 05 F1 | 	add	objptr, ##1536
0cfd0     F2 34 02 FB | 	rdlong	local08, objptr
0cfd4     01 34 06 F1 | 	add	local08, #1
0cfd8     F2 34 62 FC | 	wrlong	local08, objptr
0cfdc     4A 00 00 FF 
0cfe0     7C E4 85 F1 | 	sub	objptr, ##38012
0cfe4                 | LR__1035
0cfe4                 | ' return 0
0cfe4     00 FA 05 F6 | 	mov	result1, #0
0cfe8                 | LR__1036
0cfe8     A7 F0 03 F6 | 	mov	ptra, fp
0cfec     B2 00 A0 FD | 	call	#popregs_
0cff0                 | _getfun_ret
0cff0     2D 00 64 FD | 	ret
0cff4                 | 
0cff4                 | '   
0cff4                 | '   
0cff4                 | ' function getvar(m as integer) as ulong
0cff4                 | _getvar
0cff4     11 4A 05 F6 | 	mov	COUNT_, #17
0cff8     A8 00 A0 FD | 	call	#pushregs_
0cffc                 | _getvar_enter
0cffc     09 2D 02 F6 | 	mov	local04, arg01
0d000     37 00 00 FF 
0d004     44 E4 05 F1 | 	add	objptr, ##28228
0d008     F2 2E 02 FB | 	rdlong	local05, objptr
0d00c     03 2E 66 F0 | 	shl	local05, #3
0d010     02 00 00 FF 
0d014     38 E4 85 F1 | 	sub	objptr, ##1080
0d018     F2 2E 02 F1 | 	add	local05, objptr
0d01c     17 31 02 FB | 	rdlong	local06, local05
0d020     01 32 66 F6 | 	neg	local07, #1
0d024                 | ' 
0d024                 | ' varname$=lparts(ct).part$
0d024                 | ' j=-1
0d024                 | ' 
0d024                 | ' for i=0 to varnum-1
0d024     00 34 06 F6 | 	mov	local08, #0
0d028     04 E4 85 F1 | 	sub	objptr, #4
0d02c     F2 36 02 FB | 	rdlong	local09, objptr
0d030     35 00 00 FF 
0d034     08 E4 85 F1 | 	sub	objptr, ##27144
0d038                 | LR__1040
0d038     1B 35 52 F2 | 	cmps	local08, local09 wc
0d03c     38 00 90 3D |  if_ae	jmp	#LR__1041
0d040                 | '   if variables(i).name=varname$ then j=i : exit
0d040     1A 2F 02 F6 | 	mov	local05, local08
0d044     04 2E 66 F0 | 	shl	local05, #4
0d048     14 00 00 FF 
0d04c     F8 E5 05 F1 | 	add	objptr, ##10744
0d050     F2 2E 02 F1 | 	add	local05, objptr
0d054     17 13 02 FB | 	rdlong	arg01, local05
0d058     18 15 02 F6 | 	mov	arg02, local06
0d05c     14 00 00 FF 
0d060     F8 E5 85 F1 | 	sub	objptr, ##10744
0d064     F4 96 B1 FD | 	call	#__system___string_cmp
0d068     00 FA 0D F2 | 	cmp	result1, #0 wz
0d06c     1A 33 02 A6 |  if_e	mov	local07, local08
0d070     01 34 06 51 |  if_ne	add	local08, #1
0d074     C0 FF 9F 5D |  if_ne	jmp	#LR__1040
0d078                 | LR__1041
0d078                 | ' if  j=-1 andalso varnum<maxvars then   
0d078     FF FF 7F FF 
0d07c     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0d080     A8 00 90 5D |  if_ne	jmp	#LR__1042
0d084     35 00 00 FF 
0d088     08 E4 05 F1 | 	add	objptr, ##27144
0d08c     F2 36 02 FB | 	rdlong	local09, objptr
0d090     35 00 00 FF 
0d094     08 E4 85 F1 | 	sub	objptr, ##27144
0d098     02 00 00 FF 
0d09c     00 36 56 F2 | 	cmps	local09, ##1024 wc
0d0a0     88 00 90 3D |  if_ae	jmp	#LR__1042
0d0a4     35 00 00 FF 
0d0a8     08 E4 05 F1 | 	add	objptr, ##27144
0d0ac     F2 2E 02 FB | 	rdlong	local05, objptr
0d0b0     04 2E 66 F0 | 	shl	local05, #4
0d0b4     20 00 00 FF 
0d0b8     10 E4 85 F1 | 	sub	objptr, ##16400
0d0bc     F2 2E 02 F1 | 	add	local05, objptr
0d0c0     17 31 62 FC | 	wrlong	local06, local05
0d0c4     20 00 00 FF 
0d0c8     10 E4 05 F1 | 	add	objptr, ##16400
0d0cc     F2 2E 02 FB | 	rdlong	local05, objptr
0d0d0     04 2E 66 F0 | 	shl	local05, #4
0d0d4     20 00 00 FF 
0d0d8     10 E4 85 F1 | 	sub	objptr, ##16400
0d0dc     F2 2E 02 F1 | 	add	local05, objptr
0d0e0     04 2E 06 F1 | 	add	local05, #4
0d0e4     17 01 68 FC | 	wrlong	#0, local05
0d0e8     20 00 00 FF 
0d0ec     10 E4 05 F1 | 	add	objptr, ##16400
0d0f0     F2 2E 02 FB | 	rdlong	local05, objptr
0d0f4     04 2E 66 F0 | 	shl	local05, #4
0d0f8     20 00 00 FF 
0d0fc     10 E4 85 F1 | 	sub	objptr, ##16400
0d100     F2 2E 02 F1 | 	add	local05, objptr
0d104     0C 2E 06 F1 | 	add	local05, #12
0d108     17 39 68 FC | 	wrlong	#28, local05
0d10c     20 00 00 FF 
0d110     10 E4 05 F1 | 	add	objptr, ##16400
0d114     F2 36 02 FB | 	rdlong	local09, objptr
0d118     1B 33 02 F6 | 	mov	local07, local09
0d11c     01 36 06 F1 | 	add	local09, #1
0d120     F2 36 62 FC | 	wrlong	local09, objptr
0d124     35 00 00 FF 
0d128     08 E4 85 F1 | 	sub	objptr, ##27144
0d12c                 | LR__1042
0d12c     00 36 06 F6 | 	mov	local09, #0
0d130                 | ' numpar=0
0d130                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d130     37 00 00 FF 
0d134     44 E4 05 F1 | 	add	objptr, ##28228
0d138     F2 2E 02 FB | 	rdlong	local05, objptr
0d13c     01 2E 06 F1 | 	add	local05, #1
0d140     03 2E 66 F0 | 	shl	local05, #3
0d144     02 00 00 FF 
0d148     38 E4 85 F1 | 	sub	objptr, ##1080
0d14c     F2 2E 02 F1 | 	add	local05, objptr
0d150     04 2E 06 F1 | 	add	local05, #4
0d154     17 35 02 FB | 	rdlong	local08, local05
0d158     15 34 0E F2 | 	cmp	local08, #21 wz
0d15c     35 00 00 FF 
0d160     0C E4 85 F1 | 	sub	objptr, ##27148
0d164     54 01 90 5D |  if_ne	jmp	#LR__1047
0d168     37 00 00 FF 
0d16c     44 E4 05 F1 | 	add	objptr, ##28228
0d170     F2 38 02 FB | 	rdlong	local10, objptr
0d174     01 38 06 F1 | 	add	local10, #1
0d178     F2 38 62 FC | 	wrlong	local10, objptr
0d17c     37 00 00 FF 
0d180     44 E4 85 F1 | 	sub	objptr, ##28228
0d184                 | '   ct+=1 											' omit this lpar, this is for expr list
0d184                 | '   do
0d184                 | LR__1043
0d184     37 00 00 FF 
0d188     44 E4 05 F1 | 	add	objptr, ##28228
0d18c     F2 2E 02 FB | 	rdlong	local05, objptr
0d190     01 2E 06 F1 | 	add	local05, #1
0d194     F2 2E 62 FC | 	wrlong	local05, objptr
0d198                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d198                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d198     03 2E 66 F0 | 	shl	local05, #3
0d19c     02 00 00 FF 
0d1a0     38 E4 85 F1 | 	sub	objptr, ##1080
0d1a4     F2 2E 02 F1 | 	add	local05, objptr
0d1a8     04 2E 06 F1 | 	add	local05, #4
0d1ac     17 39 02 FB | 	rdlong	local10, local05
0d1b0     15 38 0E F2 | 	cmp	local10, #21 wz
0d1b4     35 00 00 FF 
0d1b8     0C E4 85 F1 | 	sub	objptr, ##27148
0d1bc     44 00 90 5D |  if_ne	jmp	#LR__1044
0d1c0     37 00 00 FF 
0d1c4     44 E4 05 F1 | 	add	objptr, ##28228
0d1c8     F2 38 02 FB | 	rdlong	local10, objptr
0d1cc     01 38 06 F1 | 	add	local10, #1
0d1d0     F2 38 62 FC | 	wrlong	local10, objptr
0d1d4     37 00 00 FF 
0d1d8     44 E4 85 F1 | 	sub	objptr, ##28228
0d1dc     58 EB BF FD | 	call	#_expr
0d1e0     FD 3A 02 F6 | 	mov	local11, result1
0d1e4     37 00 00 FF 
0d1e8     44 E4 05 F1 | 	add	objptr, ##28228
0d1ec     F2 38 02 FB | 	rdlong	local10, objptr
0d1f0     01 38 06 F1 | 	add	local10, #1
0d1f4     F2 38 62 FC | 	wrlong	local10, objptr
0d1f8     37 00 00 FF 
0d1fc     44 E4 85 F1 | 	sub	objptr, ##28228
0d200     08 00 90 FD | 	jmp	#LR__1045
0d204                 | LR__1044
0d204     30 EB BF FD | 	call	#_expr
0d208     FD 3A 02 F6 | 	mov	local11, result1
0d20c                 | LR__1045
0d20c                 | '     if err>0 then return err
0d20c     01 3A 56 F2 | 	cmps	local11, #1 wc
0d210     1D FB 01 36 |  if_ae	mov	result1, local11
0d214     2C 02 90 3D |  if_ae	jmp	#LR__1049
0d218     01 36 06 F1 | 	add	local09, #1
0d21c     37 00 00 FF 
0d220     44 E4 05 F1 | 	add	objptr, ##28228
0d224     F2 2E 02 FB | 	rdlong	local05, objptr
0d228     03 2E 66 F0 | 	shl	local05, #3
0d22c     02 00 00 FF 
0d230     38 E4 85 F1 | 	sub	objptr, ##1080
0d234     F2 2E 02 F1 | 	add	local05, objptr
0d238     04 2E 06 F1 | 	add	local05, #4
0d23c     17 3B 02 FB | 	rdlong	local11, local05
0d240     14 3A 0E F2 | 	cmp	local11, #20 wz
0d244     35 00 00 FF 
0d248     0C E4 85 F1 | 	sub	objptr, ##27148
0d24c     34 00 90 AD |  if_e	jmp	#LR__1046
0d250     37 00 00 FF 
0d254     44 E4 05 F1 | 	add	objptr, ##28228
0d258     F2 3A 02 FB | 	rdlong	local11, objptr
0d25c     03 3A 66 F0 | 	shl	local11, #3
0d260     02 00 00 FF 
0d264     38 E4 85 F1 | 	sub	objptr, ##1080
0d268     F2 3A 02 F1 | 	add	local11, objptr
0d26c     04 3A 06 F1 | 	add	local11, #4
0d270     1D 3B 02 FB | 	rdlong	local11, local11
0d274     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d278     35 00 00 FF 
0d27c     0C E4 85 F1 | 	sub	objptr, ##27148
0d280     00 FF 9F 5D |  if_ne	jmp	#LR__1043
0d284                 | LR__1046
0d284                 | '     if lparts(ct).token=token_end then return 14
0d284     37 00 00 FF 
0d288     44 E4 05 F1 | 	add	objptr, ##28228
0d28c     F2 2E 02 FB | 	rdlong	local05, objptr
0d290     03 2E 66 F0 | 	shl	local05, #3
0d294     02 00 00 FF 
0d298     38 E4 85 F1 | 	sub	objptr, ##1080
0d29c     F2 2E 02 F1 | 	add	local05, objptr
0d2a0     04 2E 06 F1 | 	add	local05, #4
0d2a4     17 3B 02 FB | 	rdlong	local11, local05
0d2a8     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d2ac     35 00 00 FF 
0d2b0     0C E4 85 F1 | 	sub	objptr, ##27148
0d2b4     0E FA 05 A6 |  if_e	mov	result1, #14
0d2b8     88 01 90 AD |  if_e	jmp	#LR__1049
0d2bc                 | LR__1047
0d2bc     1B 29 02 F6 | 	mov	local02, local09
0d2c0     11 2A 06 F6 | 	mov	local03, #17
0d2c4     19 27 02 F6 | 	mov	local01, local07
0d2c8     13 39 02 F6 | 	mov	local10, local01
0d2cc     14 3D 02 F6 | 	mov	local12, local02
0d2d0     15 3F 02 F6 | 	mov	local13, local03
0d2d4     4A 00 00 FF 
0d2d8     7C E4 05 F1 | 	add	objptr, ##38012
0d2dc     F2 40 02 FB | 	rdlong	local14, objptr
0d2e0     20 43 02 F6 | 	mov	local15, local14
0d2e4     01 42 66 F0 | 	shl	local15, #1
0d2e8     20 43 02 F1 | 	add	local15, local14
0d2ec     02 42 66 F0 | 	shl	local15, #2
0d2f0     03 00 00 FF 
0d2f4     00 E4 85 F1 | 	sub	objptr, ##1536
0d2f8     F2 42 02 F1 | 	add	local15, objptr
0d2fc     21 39 62 FC | 	wrlong	local10, local15
0d300     03 00 00 FF 
0d304     00 E4 05 F1 | 	add	objptr, ##1536
0d308     F2 38 02 FB | 	rdlong	local10, objptr
0d30c     1C 45 02 F6 | 	mov	local16, local10
0d310     01 44 66 F0 | 	shl	local16, #1
0d314     1C 45 02 F1 | 	add	local16, local10
0d318     02 44 66 F0 | 	shl	local16, #2
0d31c     03 00 00 FF 
0d320     00 E4 85 F1 | 	sub	objptr, ##1536
0d324     F2 44 02 F1 | 	add	local16, objptr
0d328     04 44 06 F1 | 	add	local16, #4
0d32c     22 3D 62 FC | 	wrlong	local12, local16
0d330     03 00 00 FF 
0d334     00 E4 05 F1 | 	add	objptr, ##1536
0d338     F2 38 02 FB | 	rdlong	local10, objptr
0d33c     1C 47 02 F6 | 	mov	local17, local10
0d340     01 46 66 F0 | 	shl	local17, #1
0d344     1C 47 02 F1 | 	add	local17, local10
0d348     02 46 66 F0 | 	shl	local17, #2
0d34c     03 00 00 FF 
0d350     00 E4 85 F1 | 	sub	objptr, ##1536
0d354     F2 46 02 F1 | 	add	local17, objptr
0d358     08 46 06 F1 | 	add	local17, #8
0d35c     23 3F 62 FC | 	wrlong	local13, local17
0d360     03 00 00 FF 
0d364     00 E4 05 F1 | 	add	objptr, ##1536
0d368     F2 38 02 FB | 	rdlong	local10, objptr
0d36c     01 38 06 F1 | 	add	local10, #1
0d370     F2 38 62 FC | 	wrlong	local10, objptr
0d374     4A 00 00 FF 
0d378     7C E4 85 F1 | 	sub	objptr, ##38012
0d37c                 | ' t2.result.twowords(1)=numpar
0d37c                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d37c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d37c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d37c     FF FF 7F FF 
0d380     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d384     B8 00 90 5D |  if_ne	jmp	#LR__1048
0d388     15 2A 06 F6 | 	mov	local03, #21
0d38c     13 39 02 F6 | 	mov	local10, local01
0d390     14 3D 02 F6 | 	mov	local12, local02
0d394     15 3F 02 F6 | 	mov	local13, local03
0d398     4A 00 00 FF 
0d39c     7C E4 05 F1 | 	add	objptr, ##38012
0d3a0     F2 40 02 FB | 	rdlong	local14, objptr
0d3a4     20 43 02 F6 | 	mov	local15, local14
0d3a8     01 42 66 F0 | 	shl	local15, #1
0d3ac     20 43 02 F1 | 	add	local15, local14
0d3b0     02 42 66 F0 | 	shl	local15, #2
0d3b4     03 00 00 FF 
0d3b8     00 E4 85 F1 | 	sub	objptr, ##1536
0d3bc     F2 42 02 F1 | 	add	local15, objptr
0d3c0     21 39 62 FC | 	wrlong	local10, local15
0d3c4     03 00 00 FF 
0d3c8     00 E4 05 F1 | 	add	objptr, ##1536
0d3cc     F2 46 02 FB | 	rdlong	local17, objptr
0d3d0     23 45 02 F6 | 	mov	local16, local17
0d3d4     01 44 66 F0 | 	shl	local16, #1
0d3d8     23 45 02 F1 | 	add	local16, local17
0d3dc     02 44 66 F0 | 	shl	local16, #2
0d3e0     03 00 00 FF 
0d3e4     00 E4 85 F1 | 	sub	objptr, ##1536
0d3e8     F2 44 02 F1 | 	add	local16, objptr
0d3ec     04 44 06 F1 | 	add	local16, #4
0d3f0     22 3D 62 FC | 	wrlong	local12, local16
0d3f4     03 00 00 FF 
0d3f8     00 E4 05 F1 | 	add	objptr, ##1536
0d3fc     F2 44 02 FB | 	rdlong	local16, objptr
0d400     22 47 02 F6 | 	mov	local17, local16
0d404     01 46 66 F0 | 	shl	local17, #1
0d408     22 47 02 F1 | 	add	local17, local16
0d40c     02 46 66 F0 | 	shl	local17, #2
0d410     03 00 00 FF 
0d414     00 E4 85 F1 | 	sub	objptr, ##1536
0d418     F2 46 02 F1 | 	add	local17, objptr
0d41c     08 46 06 F1 | 	add	local17, #8
0d420     23 3F 62 FC | 	wrlong	local13, local17
0d424     03 00 00 FF 
0d428     00 E4 05 F1 | 	add	objptr, ##1536
0d42c     F2 38 02 FB | 	rdlong	local10, objptr
0d430     01 38 06 F1 | 	add	local10, #1
0d434     F2 38 62 FC | 	wrlong	local10, objptr
0d438     4A 00 00 FF 
0d43c     7C E4 85 F1 | 	sub	objptr, ##38012
0d440                 | LR__1048
0d440                 | ' return 0
0d440     00 FA 05 F6 | 	mov	result1, #0
0d444                 | LR__1049
0d444     A7 F0 03 F6 | 	mov	ptra, fp
0d448     B2 00 A0 FD | 	call	#popregs_
0d44c                 | _getvar_ret
0d44c     2D 00 64 FD | 	ret
0d450                 | 
0d450                 | ' 
0d450                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d450                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d450                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d450                 | ' 
0d450                 | ' 
0d450                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d450                 | ' '                                                                                                                                       -
0d450                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d450                 | ' '                                                                                                                                       -
0d450                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d450                 | ' 
0d450                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d450                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d450                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d450                 | ' 
0d450                 | ' function execute_line (astart=0 as integer) as integer
0d450                 | _execute_line
0d450     04 4A 05 F6 | 	mov	COUNT_, #4
0d454     A8 00 A0 FD | 	call	#pushregs_
0d458     50 00 00 FF 
0d45c     BC E4 05 F1 | 	add	objptr, ##41148
0d460     F2 00 68 FC | 	wrlong	#0, objptr
0d464                 | ' 
0d464                 | ' runptr2=0
0d464                 | ' for lineptr_e=astart to lineptr-1
0d464     06 00 00 FF 
0d468     3C E4 85 F1 | 	sub	objptr, ##3132
0d46c     F2 12 62 FC | 	wrlong	arg01, objptr
0d470     04 E4 85 F1 | 	sub	objptr, #4
0d474     F2 26 02 FB | 	rdlong	local01, objptr
0d478     4A 00 00 FF 
0d47c     7C E4 85 F1 | 	sub	objptr, ##38012
0d480                 | LR__1050
0d480     4A 00 00 FF 
0d484     80 E4 05 F1 | 	add	objptr, ##38016
0d488     F2 FA 01 FB | 	rdlong	result1, objptr
0d48c     4A 00 00 FF 
0d490     80 E4 85 F1 | 	sub	objptr, ##38016
0d494     13 FB 51 F2 | 	cmps	result1, local01 wc
0d498     98 00 90 3D |  if_ae	jmp	#LR__1051
0d49c     4A 00 00 FF 
0d4a0     80 E4 05 F1 | 	add	objptr, ##38016
0d4a4     F2 FA 01 FB | 	rdlong	result1, objptr
0d4a8     FD 28 02 F6 | 	mov	local02, result1
0d4ac     01 28 66 F0 | 	shl	local02, #1
0d4b0     FD 28 02 F1 | 	add	local02, result1
0d4b4     02 28 66 F0 | 	shl	local02, #2
0d4b8     03 00 00 FF 
0d4bc     04 E4 85 F1 | 	sub	objptr, ##1540
0d4c0     F2 28 02 F1 | 	add	local02, objptr
0d4c4     08 28 06 F1 | 	add	local02, #8
0d4c8     14 29 02 FB | 	rdlong	local02, local02
0d4cc     14 29 E2 F8 | 	getbyte	local02, local02, #0
0d4d0     02 28 66 F0 | 	shl	local02, #2
0d4d4     04 00 00 FF 
0d4d8     1C E4 85 F1 | 	sub	objptr, ##2076
0d4dc     F2 28 02 F1 | 	add	local02, objptr
0d4e0     14 29 02 FB | 	rdlong	local02, local02
0d4e4     14 2B 02 F6 | 	mov	local03, local02
0d4e8     13 28 46 F7 | 	zerox	local02, #19
0d4ec     14 2A 46 F0 | 	shr	local03, #20
0d4f0     02 2A 66 F0 | 	shl	local03, #2
0d4f4     ED 2A 02 F1 | 	add	local03, __methods__
0d4f8     15 2B 02 FB | 	rdlong	local03, local03
0d4fc     43 00 00 FF 
0d500     60 E4 85 F1 | 	sub	objptr, ##34400
0d504     F2 2C 02 F6 | 	mov	local04, objptr
0d508     14 E5 01 F6 | 	mov	objptr, local02
0d50c     2D 2A 62 FD | 	call	local03
0d510     16 E5 01 F6 | 	mov	objptr, local04
0d514     4A 00 00 FF 
0d518     80 E4 05 F1 | 	add	objptr, ##38016
0d51c     F2 2C 02 FB | 	rdlong	local04, objptr
0d520     01 2C 06 F1 | 	add	local04, #1
0d524     F2 2C 62 FC | 	wrlong	local04, objptr
0d528     4A 00 00 FF 
0d52c     80 E4 85 F1 | 	sub	objptr, ##38016
0d530     4C FF 9F FD | 	jmp	#LR__1050
0d534                 | LR__1051
0d534                 | ' return runptr2
0d534     50 00 00 FF 
0d538     BC E4 05 F1 | 	add	objptr, ##41148
0d53c     F2 FA 01 FB | 	rdlong	result1, objptr
0d540     50 00 00 FF 
0d544     BC E4 85 F1 | 	sub	objptr, ##41148
0d548     A7 F0 03 F6 | 	mov	ptra, fp
0d54c     B2 00 A0 FD | 	call	#popregs_
0d550                 | _execute_line_ret
0d550     2D 00 64 FD | 	ret
0d554                 | 
0d554                 | ' 
0d554                 | ' 
0d554                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d554                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d554                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d554                 | ' 
0d554                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d554                 | ' 
0d554                 | ' function pop() as expr_result
0d554                 | _pop
0d554                 | ' if stackpointer=0 then
0d554     43 00 00 FF 
0d558     58 E4 05 F1 | 	add	objptr, ##34392
0d55c     F2 FA 09 FB | 	rdlong	result1, objptr wz
0d560     43 00 00 FF 
0d564     58 E4 85 F1 | 	sub	objptr, ##34392
0d568     FF 04 06 A6 |  if_e	mov	_var03, #255
0d56c     18 00 06 A6 |  if_e	mov	_var01, #24
0d570     68 00 90 AD |  if_e	jmp	#LR__1060
0d574     43 00 00 FF 
0d578     58 E4 05 F1 | 	add	objptr, ##34392
0d57c     F2 FA 01 FB | 	rdlong	result1, objptr
0d580     01 FA 85 F1 | 	sub	result1, #1
0d584     F2 FA 61 FC | 	wrlong	result1, objptr
0d588     FD FE 01 F6 | 	mov	result3, result1
0d58c     01 FE 65 F0 | 	shl	result3, #1
0d590     FD FE 01 F1 | 	add	result3, result1
0d594     02 FE 65 F0 | 	shl	result3, #2
0d598     0C 00 00 FF 
0d59c     0C E4 85 F1 | 	sub	objptr, ##6156
0d5a0     F2 FE 01 F1 | 	add	result3, objptr
0d5a4     FF 00 02 FB | 	rdlong	_var01, result3
0d5a8     04 FE 05 F1 | 	add	result3, #4
0d5ac     FF FE 01 FB | 	rdlong	result3, result3
0d5b0     FD FC 01 F6 | 	mov	result2, result1
0d5b4     01 FC 65 F0 | 	shl	result2, #1
0d5b8     FD FC 01 F1 | 	add	result2, result1
0d5bc     02 FC 65 F0 | 	shl	result2, #2
0d5c0     F2 FC 01 F1 | 	add	result2, objptr
0d5c4     08 FC 05 F1 | 	add	result2, #8
0d5c8     FE FA 01 FB | 	rdlong	result1, result2
0d5cc     FF 02 02 F6 | 	mov	_var02, result3
0d5d0     FD 04 02 F6 | 	mov	_var03, result1
0d5d4     37 00 00 FF 
0d5d8     4C E4 85 F1 | 	sub	objptr, ##28236
0d5dc                 | LR__1060
0d5dc                 | ' return t1
0d5dc     01 FD 01 F6 | 	mov	result2, _var02
0d5e0     02 FF 01 F6 | 	mov	result3, _var03
0d5e4     00 FB 01 F6 | 	mov	result1, _var01
0d5e8                 | _pop_ret
0d5e8     2D 00 64 FD | 	ret
0d5ec                 | 
0d5ec                 | ' 
0d5ec                 | ' sub push(t1 as expr_result )
0d5ec                 | _push
0d5ec                 | ' if stackpointer<maxstack then 
0d5ec     43 00 00 FF 
0d5f0     58 E4 05 F1 | 	add	objptr, ##34392
0d5f4     F2 00 02 FB | 	rdlong	_var01, objptr
0d5f8     43 00 00 FF 
0d5fc     58 E4 85 F1 | 	sub	objptr, ##34392
0d600     01 00 00 FF 
0d604     00 00 56 F2 | 	cmps	_var01, ##512 wc
0d608     BC 00 90 3D |  if_ae	jmp	#LR__1070
0d60c     09 01 02 FB | 	rdlong	_var01, arg01
0d610     04 12 06 F1 | 	add	arg01, #4
0d614     09 03 02 FB | 	rdlong	_var02, arg01
0d618     04 12 06 F1 | 	add	arg01, #4
0d61c     09 13 02 FB | 	rdlong	arg01, arg01
0d620     43 00 00 FF 
0d624     58 E4 05 F1 | 	add	objptr, ##34392
0d628     F2 04 02 FB | 	rdlong	_var03, objptr
0d62c     02 07 02 F6 | 	mov	_var04, _var03
0d630     01 06 66 F0 | 	shl	_var04, #1
0d634     02 07 02 F1 | 	add	_var04, _var03
0d638     02 06 66 F0 | 	shl	_var04, #2
0d63c     0C 00 00 FF 
0d640     0C E4 85 F1 | 	sub	objptr, ##6156
0d644     F2 06 02 F1 | 	add	_var04, objptr
0d648     03 01 62 FC | 	wrlong	_var01, _var04
0d64c     0C 00 00 FF 
0d650     0C E4 05 F1 | 	add	objptr, ##6156
0d654     F2 06 02 FB | 	rdlong	_var04, objptr
0d658     03 05 02 F6 | 	mov	_var03, _var04
0d65c     01 04 66 F0 | 	shl	_var03, #1
0d660     03 05 02 F1 | 	add	_var03, _var04
0d664     02 04 66 F0 | 	shl	_var03, #2
0d668     0C 00 00 FF 
0d66c     0C E4 85 F1 | 	sub	objptr, ##6156
0d670     F2 04 02 F1 | 	add	_var03, objptr
0d674     04 04 06 F1 | 	add	_var03, #4
0d678     02 03 62 FC | 	wrlong	_var02, _var03
0d67c     0C 00 00 FF 
0d680     0C E4 05 F1 | 	add	objptr, ##6156
0d684     F2 06 02 FB | 	rdlong	_var04, objptr
0d688     03 05 02 F6 | 	mov	_var03, _var04
0d68c     01 04 66 F0 | 	shl	_var03, #1
0d690     03 05 02 F1 | 	add	_var03, _var04
0d694     02 04 66 F0 | 	shl	_var03, #2
0d698     0C 00 00 FF 
0d69c     0C E4 85 F1 | 	sub	objptr, ##6156
0d6a0     F2 04 02 F1 | 	add	_var03, objptr
0d6a4     08 04 06 F1 | 	add	_var03, #8
0d6a8     02 13 62 FC | 	wrlong	arg01, _var03
0d6ac     0C 00 00 FF 
0d6b0     0C E4 05 F1 | 	add	objptr, ##6156
0d6b4     F2 00 02 FB | 	rdlong	_var01, objptr
0d6b8     01 00 06 F1 | 	add	_var01, #1
0d6bc     F2 00 62 FC | 	wrlong	_var01, objptr
0d6c0     43 00 00 FF 
0d6c4     58 E4 85 F1 | 	sub	objptr, ##34392
0d6c8                 | LR__1070
0d6c8                 | _push_ret
0d6c8     2D 00 64 FD | 	ret
0d6cc                 | 
0d6cc                 | ' 
0d6cc                 | ' ' -------------------------------- Runtime converting functions
0d6cc                 | ' 
0d6cc                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d6cc                 | ' 
0d6cc                 | ' function  convertstring(psaddr as ulong) as string
0d6cc                 | _convertstring
0d6cc     04 4A 05 F6 | 	mov	COUNT_, #4
0d6d0     A8 00 A0 FD | 	call	#pushregs_
0d6d4     09 27 02 F6 | 	mov	local01, arg01
0d6d8     3C 59 B1 FD | 	call	#_pslpeek
0d6dc     FD 28 02 F6 | 	mov	local02, result1
0d6e0     B4 01 00 FF 
0d6e4     B7 2B 06 F6 | 	mov	local03, ##@LR__5832
0d6e8                 | ' l=pslpeek(psaddr) 
0d6e8                 | ' s="" 
0d6e8                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d6e8     01 2C 06 F6 | 	mov	local04, #1
0d6ec     01 28 06 F1 | 	add	local02, #1
0d6f0                 | LR__1080
0d6f0     14 2D 52 F2 | 	cmps	local04, local02 wc
0d6f4     30 00 90 3D |  if_ae	jmp	#LR__1081
0d6f8     13 13 02 F6 | 	mov	arg01, local01
0d6fc     03 12 06 F1 | 	add	arg01, #3
0d700     16 13 02 F1 | 	add	arg01, local04
0d704     B8 58 B1 FD | 	call	#_pspeek
0d708     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0d70c     64 B2 B1 FD | 	call	#__system__Chr_S
0d710     FD 14 02 F6 | 	mov	arg02, result1
0d714     15 13 02 F6 | 	mov	arg01, local03
0d718     74 90 B1 FD | 	call	#__system___string_concat
0d71c     FD 2A 02 F6 | 	mov	local03, result1
0d720     01 2C 06 F1 | 	add	local04, #1
0d724     C8 FF 9F FD | 	jmp	#LR__1080
0d728                 | LR__1081
0d728                 | ' return s
0d728     15 FB 01 F6 | 	mov	result1, local03
0d72c     A7 F0 03 F6 | 	mov	ptra, fp
0d730     B2 00 A0 FD | 	call	#popregs_
0d734                 | _convertstring_ret
0d734     2D 00 64 FD | 	ret
0d738                 | 
0d738                 | ' 
0d738                 | ' ' converts a variable to an integer
0d738                 | ' 
0d738                 | ' function converttoint (t1 as expr_result) as integer 
0d738                 | _converttoint
0d738     02 4A 05 F6 | 	mov	COUNT_, #2
0d73c     A8 00 A0 FD | 	call	#pushregs_
0d740     09 27 02 F6 | 	mov	local01, arg01
0d744                 | ' 
0d744                 | ' select case t1.result_type
0d744     08 26 06 F1 | 	add	local01, #8
0d748     13 29 02 FB | 	rdlong	local02, local01
0d74c     08 26 86 F1 | 	sub	local01, #8
0d750     1C 28 0E F2 | 	cmp	local02, #28 wz
0d754     2C 00 90 AD |  if_e	jmp	#LR__1090
0d758     1D 28 0E F2 | 	cmp	local02, #29 wz
0d75c     2C 00 90 AD |  if_e	jmp	#LR__1091
0d760     1E 28 0E F2 | 	cmp	local02, #30 wz
0d764     2C 00 90 AD |  if_e	jmp	#LR__1092
0d768     1F 28 0E F2 | 	cmp	local02, #31 wz
0d76c     34 00 90 AD |  if_e	jmp	#LR__1093
0d770     2B 28 0E F2 | 	cmp	local02, #43 wz
0d774     44 00 90 AD |  if_e	jmp	#LR__1094
0d778     2C 28 0E F2 | 	cmp	local02, #44 wz
0d77c     5C 00 90 AD |  if_e	jmp	#LR__1095
0d780     60 00 90 FD | 	jmp	#LR__1096
0d784                 | LR__1090
0d784     13 FB 01 FB | 	rdlong	result1, local01
0d788     5C 00 90 FD | 	jmp	#LR__1097
0d78c                 | LR__1091
0d78c     13 FB 01 FB | 	rdlong	result1, local01
0d790     54 00 90 FD | 	jmp	#LR__1097
0d794                 | LR__1092
0d794     13 13 02 FB | 	rdlong	arg01, local01
0d798     01 14 06 F6 | 	mov	arg02, #1
0d79c     D4 C2 B1 FD | 	call	#__system___float_tointeger
0d7a0     44 00 90 FD | 	jmp	#LR__1097
0d7a4                 | LR__1093
0d7a4     13 13 02 FB | 	rdlong	arg01, local01
0d7a8     0C C6 B1 FD | 	call	#__system____builtin_atof
0d7ac     FD 12 02 F6 | 	mov	arg01, result1
0d7b0     01 14 06 F6 | 	mov	arg02, #1
0d7b4     BC C2 B1 FD | 	call	#__system___float_tointeger
0d7b8     2C 00 90 FD | 	jmp	#LR__1097
0d7bc                 | LR__1094
0d7bc     13 13 02 FB | 	rdlong	arg01, local01
0d7c0     08 FF BF FD | 	call	#_convertstring
0d7c4     FD 12 02 F6 | 	mov	arg01, result1
0d7c8     EC C5 B1 FD | 	call	#__system____builtin_atof
0d7cc     FD 12 02 F6 | 	mov	arg01, result1
0d7d0     01 14 06 F6 | 	mov	arg02, #1
0d7d4     9C C2 B1 FD | 	call	#__system___float_tointeger
0d7d8     0C 00 90 FD | 	jmp	#LR__1097
0d7dc                 | LR__1095
0d7dc     13 FB 01 FB | 	rdlong	result1, local01
0d7e0     04 00 90 FD | 	jmp	#LR__1097
0d7e4                 | LR__1096
0d7e4     00 FA 05 F6 | 	mov	result1, #0
0d7e8                 | LR__1097
0d7e8     A7 F0 03 F6 | 	mov	ptra, fp
0d7ec     B2 00 A0 FD | 	call	#popregs_
0d7f0                 | _converttoint_ret
0d7f0     2D 00 64 FD | 	ret
0d7f4                 | 
0d7f4                 | ' 
0d7f4                 | ' ' converts a variable to float
0d7f4                 | ' 
0d7f4                 | ' function converttofloat (t1 as expr_result) as single
0d7f4                 | _converttofloat
0d7f4     03 4A 05 F6 | 	mov	COUNT_, #3
0d7f8     A8 00 A0 FD | 	call	#pushregs_
0d7fc     09 27 02 F6 | 	mov	local01, arg01
0d800                 | ' 
0d800                 | ' select case t1.result_type
0d800     08 26 06 F1 | 	add	local01, #8
0d804     13 29 02 FB | 	rdlong	local02, local01
0d808     08 26 86 F1 | 	sub	local01, #8
0d80c     1C 28 0E F2 | 	cmp	local02, #28 wz
0d810     24 00 90 AD |  if_e	jmp	#LR__1100
0d814     1D 28 0E F2 | 	cmp	local02, #29 wz
0d818     38 00 90 AD |  if_e	jmp	#LR__1101
0d81c     1E 28 0E F2 | 	cmp	local02, #30 wz
0d820     3C 00 90 AD |  if_e	jmp	#LR__1102
0d824     1F 28 0E F2 | 	cmp	local02, #31 wz
0d828     3C 00 90 AD |  if_e	jmp	#LR__1103
0d82c     2B 28 0E F2 | 	cmp	local02, #43 wz
0d830     40 00 90 AD |  if_e	jmp	#LR__1104
0d834     50 00 90 FD | 	jmp	#LR__1105
0d838                 | LR__1100
0d838     13 13 02 FB | 	rdlong	arg01, local01
0d83c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d840     1F 2A C6 C9 |  if_b	decod	local03, #31
0d844     00 2A 06 36 |  if_ae	mov	local03, #0
0d848     5C B9 B1 FD | 	call	#__system___float_fromuns
0d84c     15 FB 61 F5 | 	xor	result1, local03
0d850     38 00 90 FD | 	jmp	#LR__1106
0d854                 | LR__1101
0d854     13 13 02 FB | 	rdlong	arg01, local01
0d858     4C B9 B1 FD | 	call	#__system___float_fromuns
0d85c     2C 00 90 FD | 	jmp	#LR__1106
0d860                 | LR__1102
0d860     13 FB 01 FB | 	rdlong	result1, local01
0d864     24 00 90 FD | 	jmp	#LR__1106
0d868                 | LR__1103
0d868     13 13 02 FB | 	rdlong	arg01, local01
0d86c     48 C5 B1 FD | 	call	#__system____builtin_atof
0d870     18 00 90 FD | 	jmp	#LR__1106
0d874                 | LR__1104
0d874     13 13 02 FB | 	rdlong	arg01, local01
0d878     50 FE BF FD | 	call	#_convertstring
0d87c     FD 12 02 F6 | 	mov	arg01, result1
0d880     34 C5 B1 FD | 	call	#__system____builtin_atof
0d884     04 00 90 FD | 	jmp	#LR__1106
0d888                 | LR__1105
0d888     00 FA 05 F6 | 	mov	result1, #0
0d88c                 | LR__1106
0d88c     A7 F0 03 F6 | 	mov	ptra, fp
0d890     B2 00 A0 FD | 	call	#popregs_
0d894                 | _converttofloat_ret
0d894     2D 00 64 FD | 	ret
0d898                 | 
0d898                 | ' 
0d898                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d898                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d898                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d898                 | ' 
0d898                 | ' 
0d898                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d898                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d898                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d898                 | ' 
0d898                 | ' '-------------------- abs
0d898                 | ' 
0d898                 | ' sub do_abs
0d898                 | _do_abs
0d898     01 4A 05 F6 | 	mov	COUNT_, #1
0d89c     A8 00 A0 FD | 	call	#pushregs_
0d8a0     0C F0 07 F1 | 	add	ptra, #12
0d8a4     AC FC BF FD | 	call	#_pop
0d8a8     FF 26 02 F6 | 	mov	local01, result3
0d8ac     A7 FA 61 FC | 	wrlong	result1, fp
0d8b0     04 4E 05 F1 | 	add	fp, #4
0d8b4     A7 FC 61 FC | 	wrlong	result2, fp
0d8b8     04 4E 05 F1 | 	add	fp, #4
0d8bc     A7 26 62 FC | 	wrlong	local01, fp
0d8c0                 | ' 
0d8c0                 | ' t1=pop()
0d8c0                 | ' if t1.result_type=result_int then 
0d8c0     08 4E 85 F1 | 	sub	fp, #8
0d8c4     1C 26 0E F2 | 	cmp	local01, #28 wz
0d8c8     A7 12 02 AB |  if_e	rdlong	arg01, fp
0d8cc     09 27 42 A6 |  if_e	abs	local01, arg01
0d8d0     A7 26 62 AC |  if_e	wrlong	local01, fp
0d8d4     2C 00 90 AD |  if_e	jmp	#LR__1110
0d8d8     08 4E 05 F1 | 	add	fp, #8
0d8dc     A7 26 02 FB | 	rdlong	local01, fp
0d8e0     08 4E 85 F1 | 	sub	fp, #8
0d8e4     1E 26 0E F2 | 	cmp	local01, #30 wz
0d8e8     A7 FA 01 AB |  if_e	rdlong	result1, fp
0d8ec     1F FA 05 A4 |  if_e	bitl	result1, #31
0d8f0     A7 FA 61 AC |  if_e	wrlong	result1, fp
0d8f4     08 4E 05 51 |  if_ne	add	fp, #8
0d8f8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d8fc     08 4E 85 51 |  if_ne	sub	fp, #8
0d900     A7 50 68 5C |  if_ne	wrlong	#40, fp
0d904                 | LR__1110
0d904     A7 12 02 F6 | 	mov	arg01, fp
0d908     E0 FC BF FD | 	call	#_push
0d90c     A7 F0 03 F6 | 	mov	ptra, fp
0d910     B2 00 A0 FD | 	call	#popregs_
0d914                 | _do_abs_ret
0d914     2D 00 64 FD | 	ret
0d918                 | 
0d918                 | ' 
0d918                 | ' '-------------------- acos
0d918                 | ' 
0d918                 | ' sub do_acos
0d918                 | _do_acos
0d918     01 4A 05 F6 | 	mov	COUNT_, #1
0d91c     A8 00 A0 FD | 	call	#pushregs_
0d920     10 F0 07 F1 | 	add	ptra, #16
0d924     4A 00 00 FF 
0d928     80 E4 05 F1 | 	add	objptr, ##38016
0d92c     F2 26 02 FB | 	rdlong	local01, objptr
0d930     13 17 02 F6 | 	mov	arg03, local01
0d934     01 16 66 F0 | 	shl	arg03, #1
0d938     13 17 02 F1 | 	add	arg03, local01
0d93c     02 16 66 F0 | 	shl	arg03, #2
0d940     03 00 00 FF 
0d944     04 E4 85 F1 | 	sub	objptr, ##1540
0d948     F2 16 02 F1 | 	add	arg03, objptr
0d94c     0B 17 02 FB | 	rdlong	arg03, arg03
0d950     0C 4E 05 F1 | 	add	fp, #12
0d954     A7 16 62 FC | 	wrlong	arg03, fp
0d958                 | ' 
0d958                 | ' numpar=compiledline(lineptr_e).result.uresult
0d958                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0d958     0C 4E 85 F1 | 	sub	fp, #12
0d95c     02 16 16 F2 | 	cmp	arg03, #2 wc
0d960     47 00 00 FF 
0d964     7C E4 85 F1 | 	sub	objptr, ##36476
0d968     0C 4E 05 C1 |  if_b	add	fp, #12
0d96c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d970     0C 4E 85 C1 |  if_b	sub	fp, #12
0d974     40 00 90 4D |  if_c_and_nz	jmp	#LR__1120
0d978     00 12 06 F6 | 	mov	arg01, #0
0d97c     DC EA B1 FD | 	call	#__system___getiolock_0603
0d980     FD 12 02 F6 | 	mov	arg01, result1
0d984     AC 8D B1 FD | 	call	#__system___lockmem
0d988     B4 01 00 FF 
0d98c     B8 15 06 F6 | 	mov	arg02, ##@LR__5833
0d990     00 12 06 F6 | 	mov	arg01, #0
0d994     00 16 06 F6 | 	mov	arg03, #0
0d998     8C 9A B1 FD | 	call	#__system___basic_print_string
0d99c     00 12 06 F6 | 	mov	arg01, #0
0d9a0     B8 EA B1 FD | 	call	#__system___getiolock_0603
0d9a4     FD 00 68 FC | 	wrlong	#0, result1
0d9a8     27 12 06 F6 | 	mov	arg01, #39
0d9ac     00 14 06 F6 | 	mov	arg02, #0
0d9b0     94 53 B1 FD | 	call	#_printerror
0d9b4     64 00 90 FD | 	jmp	#LR__1121
0d9b8                 | LR__1120
0d9b8     98 FB BF FD | 	call	#_pop
0d9bc     FF 26 02 F6 | 	mov	local01, result3
0d9c0     A7 FA 61 FC | 	wrlong	result1, fp
0d9c4     04 4E 05 F1 | 	add	fp, #4
0d9c8     A7 FC 61 FC | 	wrlong	result2, fp
0d9cc     04 4E 05 F1 | 	add	fp, #4
0d9d0     A7 26 62 FC | 	wrlong	local01, fp
0d9d4     08 4E 85 F1 | 	sub	fp, #8
0d9d8     A7 12 02 F6 | 	mov	arg01, fp
0d9dc     14 FE BF FD | 	call	#_converttofloat
0d9e0     FD 12 02 F6 | 	mov	arg01, result1
0d9e4     04 C7 B1 FD | 	call	#__system____builtin_acosf
0d9e8     FD 12 02 F6 | 	mov	arg01, result1
0d9ec     52 00 00 FF 
0d9f0     AC E4 05 F1 | 	add	objptr, ##42156
0d9f4     F2 14 02 FB | 	rdlong	arg02, objptr
0d9f8     52 00 00 FF 
0d9fc     AC E4 85 F1 | 	sub	objptr, ##42156
0da00     A8 BB B1 FD | 	call	#__system___float_mul
0da04     A7 FA 61 FC | 	wrlong	result1, fp
0da08     08 4E 05 F1 | 	add	fp, #8
0da0c     A7 3C 68 FC | 	wrlong	#30, fp
0da10     08 4E 85 F1 | 	sub	fp, #8
0da14     A7 12 02 F6 | 	mov	arg01, fp
0da18     D0 FB BF FD | 	call	#_push
0da1c                 | LR__1121
0da1c     A7 F0 03 F6 | 	mov	ptra, fp
0da20     B2 00 A0 FD | 	call	#popregs_
0da24                 | _do_acos_ret
0da24     2D 00 64 FD | 	ret
0da28                 | 
0da28                 | ' 
0da28                 | ' '-------------------- asc
0da28                 | ' 
0da28                 | ' sub do_asc
0da28                 | _do_asc
0da28     01 4A 05 F6 | 	mov	COUNT_, #1
0da2c     A8 00 A0 FD | 	call	#pushregs_
0da30     14 F0 07 F1 | 	add	ptra, #20
0da34     4A 00 00 FF 
0da38     80 E4 05 F1 | 	add	objptr, ##38016
0da3c     F2 26 02 FB | 	rdlong	local01, objptr
0da40     13 17 02 F6 | 	mov	arg03, local01
0da44     01 16 66 F0 | 	shl	arg03, #1
0da48     13 17 02 F1 | 	add	arg03, local01
0da4c     02 16 66 F0 | 	shl	arg03, #2
0da50     03 00 00 FF 
0da54     04 E4 85 F1 | 	sub	objptr, ##1540
0da58     F2 16 02 F1 | 	add	arg03, objptr
0da5c     0B 17 02 FB | 	rdlong	arg03, arg03
0da60     0C 4E 05 F1 | 	add	fp, #12
0da64     A7 16 62 FC | 	wrlong	arg03, fp
0da68                 | ' 
0da68                 | ' numpar=compiledline(lineptr_e).result.uresult
0da68                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0da68     0C 4E 85 F1 | 	sub	fp, #12
0da6c     02 16 16 F2 | 	cmp	arg03, #2 wc
0da70     47 00 00 FF 
0da74     7C E4 85 F1 | 	sub	objptr, ##36476
0da78     0C 4E 05 C1 |  if_b	add	fp, #12
0da7c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0da80     0C 4E 85 C1 |  if_b	sub	fp, #12
0da84     40 00 90 4D |  if_c_and_nz	jmp	#LR__1130
0da88     00 12 06 F6 | 	mov	arg01, #0
0da8c     CC E9 B1 FD | 	call	#__system___getiolock_0603
0da90     FD 12 02 F6 | 	mov	arg01, result1
0da94     9C 8C B1 FD | 	call	#__system___lockmem
0da98     B4 01 00 FF 
0da9c     BF 15 06 F6 | 	mov	arg02, ##@LR__5834
0daa0     00 12 06 F6 | 	mov	arg01, #0
0daa4     00 16 06 F6 | 	mov	arg03, #0
0daa8     7C 99 B1 FD | 	call	#__system___basic_print_string
0daac     00 12 06 F6 | 	mov	arg01, #0
0dab0     A8 E9 B1 FD | 	call	#__system___getiolock_0603
0dab4     FD 00 68 FC | 	wrlong	#0, result1
0dab8     27 12 06 F6 | 	mov	arg01, #39
0dabc     00 14 06 F6 | 	mov	arg02, #0
0dac0     84 52 B1 FD | 	call	#_printerror
0dac4     B4 00 90 FD | 	jmp	#LR__1133
0dac8                 | LR__1130
0dac8     88 FA BF FD | 	call	#_pop
0dacc     FF 16 02 F6 | 	mov	arg03, result3
0dad0     A7 FA 61 FC | 	wrlong	result1, fp
0dad4     04 4E 05 F1 | 	add	fp, #4
0dad8     A7 FC 61 FC | 	wrlong	result2, fp
0dadc     04 4E 05 F1 | 	add	fp, #4
0dae0     A7 16 62 FC | 	wrlong	arg03, fp
0dae4                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0dae4     08 4E 85 F1 | 	sub	fp, #8
0dae8     2B 16 0E F2 | 	cmp	arg03, #43 wz
0daec     18 00 90 5D |  if_ne	jmp	#LR__1131
0daf0     A7 12 02 FB | 	rdlong	arg01, fp
0daf4     D4 FB BF FD | 	call	#_convertstring
0daf8     A7 FA 61 FC | 	wrlong	result1, fp
0dafc     08 4E 05 F1 | 	add	fp, #8
0db00     A7 3E 68 FC | 	wrlong	#31, fp
0db04     08 4E 85 F1 | 	sub	fp, #8
0db08                 | LR__1131
0db08                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0db08     08 4E 05 F1 | 	add	fp, #8
0db0c     A7 16 02 FB | 	rdlong	arg03, fp
0db10     08 4E 85 F1 | 	sub	fp, #8
0db14     1F 16 0E F2 | 	cmp	arg03, #31 wz
0db18     40 00 90 AD |  if_e	jmp	#LR__1132
0db1c     00 12 06 F6 | 	mov	arg01, #0
0db20     38 E9 B1 FD | 	call	#__system___getiolock_0603
0db24     FD 12 02 F6 | 	mov	arg01, result1
0db28     08 8C B1 FD | 	call	#__system___lockmem
0db2c     B4 01 00 FF 
0db30     C5 15 06 F6 | 	mov	arg02, ##@LR__5835
0db34     00 12 06 F6 | 	mov	arg01, #0
0db38     00 16 06 F6 | 	mov	arg03, #0
0db3c     E8 98 B1 FD | 	call	#__system___basic_print_string
0db40     00 12 06 F6 | 	mov	arg01, #0
0db44     14 E9 B1 FD | 	call	#__system___getiolock_0603
0db48     FD 00 68 FC | 	wrlong	#0, result1
0db4c     0F 12 06 F6 | 	mov	arg01, #15
0db50     00 14 06 F6 | 	mov	arg02, #0
0db54     F0 51 B1 FD | 	call	#_printerror
0db58     20 00 90 FD | 	jmp	#LR__1133
0db5c                 | LR__1132
0db5c     A7 26 02 FB | 	rdlong	local01, fp
0db60     13 27 C2 FA | 	rdbyte	local01, local01
0db64     A7 26 62 FC | 	wrlong	local01, fp
0db68     08 4E 05 F1 | 	add	fp, #8
0db6c     A7 38 68 FC | 	wrlong	#28, fp
0db70     08 4E 85 F1 | 	sub	fp, #8
0db74     A7 12 02 F6 | 	mov	arg01, fp
0db78     70 FA BF FD | 	call	#_push
0db7c                 | LR__1133
0db7c     A7 F0 03 F6 | 	mov	ptra, fp
0db80     B2 00 A0 FD | 	call	#popregs_
0db84                 | _do_asc_ret
0db84     2D 00 64 FD | 	ret
0db88                 | 
0db88                 | ' 
0db88                 | ' '-------------------- asin
0db88                 | ' 
0db88                 | ' sub do_asin
0db88                 | _do_asin
0db88     01 4A 05 F6 | 	mov	COUNT_, #1
0db8c     A8 00 A0 FD | 	call	#pushregs_
0db90     10 F0 07 F1 | 	add	ptra, #16
0db94     4A 00 00 FF 
0db98     80 E4 05 F1 | 	add	objptr, ##38016
0db9c     F2 26 02 FB | 	rdlong	local01, objptr
0dba0     13 17 02 F6 | 	mov	arg03, local01
0dba4     01 16 66 F0 | 	shl	arg03, #1
0dba8     13 17 02 F1 | 	add	arg03, local01
0dbac     02 16 66 F0 | 	shl	arg03, #2
0dbb0     03 00 00 FF 
0dbb4     04 E4 85 F1 | 	sub	objptr, ##1540
0dbb8     F2 16 02 F1 | 	add	arg03, objptr
0dbbc     0B 17 02 FB | 	rdlong	arg03, arg03
0dbc0     0C 4E 05 F1 | 	add	fp, #12
0dbc4     A7 16 62 FC | 	wrlong	arg03, fp
0dbc8                 | ' 
0dbc8                 | ' numpar=compiledline(lineptr_e).result.uresult
0dbc8                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0dbc8     0C 4E 85 F1 | 	sub	fp, #12
0dbcc     02 16 16 F2 | 	cmp	arg03, #2 wc
0dbd0     47 00 00 FF 
0dbd4     7C E4 85 F1 | 	sub	objptr, ##36476
0dbd8     0C 4E 05 C1 |  if_b	add	fp, #12
0dbdc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dbe0     0C 4E 85 C1 |  if_b	sub	fp, #12
0dbe4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0dbe8     00 12 06 F6 | 	mov	arg01, #0
0dbec     6C E8 B1 FD | 	call	#__system___getiolock_0603
0dbf0     FD 12 02 F6 | 	mov	arg01, result1
0dbf4     3C 8B B1 FD | 	call	#__system___lockmem
0dbf8     B4 01 00 FF 
0dbfc     CB 15 06 F6 | 	mov	arg02, ##@LR__5836
0dc00     00 12 06 F6 | 	mov	arg01, #0
0dc04     00 16 06 F6 | 	mov	arg03, #0
0dc08     1C 98 B1 FD | 	call	#__system___basic_print_string
0dc0c     00 12 06 F6 | 	mov	arg01, #0
0dc10     48 E8 B1 FD | 	call	#__system___getiolock_0603
0dc14     FD 00 68 FC | 	wrlong	#0, result1
0dc18     27 12 06 F6 | 	mov	arg01, #39
0dc1c     00 14 06 F6 | 	mov	arg02, #0
0dc20     24 51 B1 FD | 	call	#_printerror
0dc24     64 00 90 FD | 	jmp	#LR__1141
0dc28                 | LR__1140
0dc28     28 F9 BF FD | 	call	#_pop
0dc2c     FF 26 02 F6 | 	mov	local01, result3
0dc30     A7 FA 61 FC | 	wrlong	result1, fp
0dc34     04 4E 05 F1 | 	add	fp, #4
0dc38     A7 FC 61 FC | 	wrlong	result2, fp
0dc3c     04 4E 05 F1 | 	add	fp, #4
0dc40     A7 26 62 FC | 	wrlong	local01, fp
0dc44     08 4E 85 F1 | 	sub	fp, #8
0dc48     A7 12 02 F6 | 	mov	arg01, fp
0dc4c     A4 FB BF FD | 	call	#_converttofloat
0dc50     FD 12 02 F6 | 	mov	arg01, result1
0dc54     48 C4 B1 FD | 	call	#__system____builtin_asinf
0dc58     FD 12 02 F6 | 	mov	arg01, result1
0dc5c     52 00 00 FF 
0dc60     AC E4 05 F1 | 	add	objptr, ##42156
0dc64     F2 14 02 FB | 	rdlong	arg02, objptr
0dc68     52 00 00 FF 
0dc6c     AC E4 85 F1 | 	sub	objptr, ##42156
0dc70     38 B9 B1 FD | 	call	#__system___float_mul
0dc74     A7 FA 61 FC | 	wrlong	result1, fp
0dc78     08 4E 05 F1 | 	add	fp, #8
0dc7c     A7 3C 68 FC | 	wrlong	#30, fp
0dc80     08 4E 85 F1 | 	sub	fp, #8
0dc84     A7 12 02 F6 | 	mov	arg01, fp
0dc88     60 F9 BF FD | 	call	#_push
0dc8c                 | LR__1141
0dc8c     A7 F0 03 F6 | 	mov	ptra, fp
0dc90     B2 00 A0 FD | 	call	#popregs_
0dc94                 | _do_asin_ret
0dc94     2D 00 64 FD | 	ret
0dc98                 | 
0dc98                 | ' 
0dc98                 | ' '-------------------- atn
0dc98                 | ' 
0dc98                 | ' sub do_atn
0dc98                 | _do_atn
0dc98     01 4A 05 F6 | 	mov	COUNT_, #1
0dc9c     A8 00 A0 FD | 	call	#pushregs_
0dca0     10 F0 07 F1 | 	add	ptra, #16
0dca4     4A 00 00 FF 
0dca8     80 E4 05 F1 | 	add	objptr, ##38016
0dcac     F2 26 02 FB | 	rdlong	local01, objptr
0dcb0     13 17 02 F6 | 	mov	arg03, local01
0dcb4     01 16 66 F0 | 	shl	arg03, #1
0dcb8     13 17 02 F1 | 	add	arg03, local01
0dcbc     02 16 66 F0 | 	shl	arg03, #2
0dcc0     03 00 00 FF 
0dcc4     04 E4 85 F1 | 	sub	objptr, ##1540
0dcc8     F2 16 02 F1 | 	add	arg03, objptr
0dccc     0B 17 02 FB | 	rdlong	arg03, arg03
0dcd0     0C 4E 05 F1 | 	add	fp, #12
0dcd4     A7 16 62 FC | 	wrlong	arg03, fp
0dcd8                 | ' 
0dcd8                 | ' numpar=compiledline(lineptr_e).result.uresult
0dcd8                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dcd8     0C 4E 85 F1 | 	sub	fp, #12
0dcdc     02 16 16 F2 | 	cmp	arg03, #2 wc
0dce0     47 00 00 FF 
0dce4     7C E4 85 F1 | 	sub	objptr, ##36476
0dce8     0C 4E 05 C1 |  if_b	add	fp, #12
0dcec     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dcf0     0C 4E 85 C1 |  if_b	sub	fp, #12
0dcf4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0dcf8     00 12 06 F6 | 	mov	arg01, #0
0dcfc     5C E7 B1 FD | 	call	#__system___getiolock_0603
0dd00     FD 12 02 F6 | 	mov	arg01, result1
0dd04     2C 8A B1 FD | 	call	#__system___lockmem
0dd08     B4 01 00 FF 
0dd0c     D2 15 06 F6 | 	mov	arg02, ##@LR__5837
0dd10     00 12 06 F6 | 	mov	arg01, #0
0dd14     00 16 06 F6 | 	mov	arg03, #0
0dd18     0C 97 B1 FD | 	call	#__system___basic_print_string
0dd1c     00 12 06 F6 | 	mov	arg01, #0
0dd20     38 E7 B1 FD | 	call	#__system___getiolock_0603
0dd24     FD 00 68 FC | 	wrlong	#0, result1
0dd28     27 12 06 F6 | 	mov	arg01, #39
0dd2c     00 14 06 F6 | 	mov	arg02, #0
0dd30     14 50 B1 FD | 	call	#_printerror
0dd34     6C 00 90 FD | 	jmp	#LR__1151
0dd38                 | LR__1150
0dd38     18 F8 BF FD | 	call	#_pop
0dd3c     FF 26 02 F6 | 	mov	local01, result3
0dd40     A7 FA 61 FC | 	wrlong	result1, fp
0dd44     04 4E 05 F1 | 	add	fp, #4
0dd48     A7 FC 61 FC | 	wrlong	result2, fp
0dd4c     04 4E 05 F1 | 	add	fp, #4
0dd50     A7 26 62 FC | 	wrlong	local01, fp
0dd54     08 4E 85 F1 | 	sub	fp, #8
0dd58     A7 12 02 F6 | 	mov	arg01, fp
0dd5c     94 FA BF FD | 	call	#_converttofloat
0dd60     FD 12 02 F6 | 	mov	arg01, result1
0dd64     00 C0 1F FF 
0dd68     00 14 06 F6 | 	mov	arg02, ##1065353216
0dd6c     C8 C3 B1 FD | 	call	#__system____builtin_atan2f
0dd70     FD 12 02 F6 | 	mov	arg01, result1
0dd74     52 00 00 FF 
0dd78     AC E4 05 F1 | 	add	objptr, ##42156
0dd7c     F2 14 02 FB | 	rdlong	arg02, objptr
0dd80     52 00 00 FF 
0dd84     AC E4 85 F1 | 	sub	objptr, ##42156
0dd88     20 B8 B1 FD | 	call	#__system___float_mul
0dd8c     A7 FA 61 FC | 	wrlong	result1, fp
0dd90     08 4E 05 F1 | 	add	fp, #8
0dd94     A7 3C 68 FC | 	wrlong	#30, fp
0dd98     08 4E 85 F1 | 	sub	fp, #8
0dd9c     A7 12 02 F6 | 	mov	arg01, fp
0dda0     48 F8 BF FD | 	call	#_push
0dda4                 | LR__1151
0dda4     A7 F0 03 F6 | 	mov	ptra, fp
0dda8     B2 00 A0 FD | 	call	#popregs_
0ddac                 | _do_atn_ret
0ddac     2D 00 64 FD | 	ret
0ddb0                 | 
0ddb0                 | ' 
0ddb0                 | ' '-------------------- beep
0ddb0                 | ' 
0ddb0                 | ' sub do_beep
0ddb0                 | _do_beep
0ddb0     02 4A 05 F6 | 	mov	COUNT_, #2
0ddb4     A8 00 A0 FD | 	call	#pushregs_
0ddb8     20 F0 07 F1 | 	add	ptra, #32
0ddbc     94 F7 BF FD | 	call	#_pop
0ddc0     FD 26 02 F6 | 	mov	local01, result1
0ddc4     FE 1C 02 F6 | 	mov	arg06, result2
0ddc8     FF 28 02 F6 | 	mov	local02, result3
0ddcc     0C 4E 05 F1 | 	add	fp, #12
0ddd0     A7 26 62 FC | 	wrlong	local01, fp
0ddd4     04 4E 05 F1 | 	add	fp, #4
0ddd8     A7 1C 62 FC | 	wrlong	arg06, fp
0dddc     04 4E 05 F1 | 	add	fp, #4
0dde0     A7 28 62 FC | 	wrlong	local02, fp
0dde4     14 4E 85 F1 | 	sub	fp, #20
0dde8     68 F7 BF FD | 	call	#_pop
0ddec     A7 FA 61 FC | 	wrlong	result1, fp
0ddf0     04 4E 05 F1 | 	add	fp, #4
0ddf4     A7 FC 61 FC | 	wrlong	result2, fp
0ddf8     04 4E 05 F1 | 	add	fp, #4
0ddfc     A7 FE 61 FC | 	wrlong	result3, fp
0de00                 | ' 
0de00                 | ' t2=pop()
0de00                 | ' t1=pop()
0de00                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0de00     08 4E 85 F1 | 	sub	fp, #8
0de04     1C FE 0D F2 | 	cmp	result3, #28 wz
0de08     08 4E 05 51 |  if_ne	add	fp, #8
0de0c     A7 28 02 5B |  if_ne	rdlong	local02, fp
0de10     08 4E 85 51 |  if_ne	sub	fp, #8
0de14     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0de18     A7 26 02 AB |  if_e	rdlong	local01, fp
0de1c     18 4E 05 A1 |  if_e	add	fp, #24
0de20     A7 26 62 AC |  if_e	wrlong	local01, fp
0de24     18 4E 85 A1 |  if_e	sub	fp, #24
0de28     14 00 90 AD |  if_e	jmp	#LR__1160
0de2c     A7 12 02 F6 | 	mov	arg01, fp
0de30     04 F9 BF FD | 	call	#_converttoint
0de34     18 4E 05 F1 | 	add	fp, #24
0de38     A7 FA 61 FC | 	wrlong	result1, fp
0de3c     18 4E 85 F1 | 	sub	fp, #24
0de40                 | LR__1160
0de40     1C 4E 05 F1 | 	add	fp, #28
0de44     A7 FE 48 FC | 	wrbyte	#127, fp
0de48     01 4E 05 F1 | 	add	fp, #1
0de4c     A7 00 49 FC | 	wrbyte	#128, fp
0de50     01 4E 85 F1 | 	sub	fp, #1
0de54     A7 14 02 F6 | 	mov	arg02, fp
0de58     04 4E 85 F1 | 	sub	fp, #4
0de5c     A7 16 02 FB | 	rdlong	arg03, fp
0de60     18 4E 85 F1 | 	sub	fp, #24
0de64     01 16 66 F0 | 	shl	arg03, #1
0de68     07 12 06 F6 | 	mov	arg01, #7
0de6c     0E 18 C6 F9 | 	decod	arg04, #14
0de70     02 1A 06 F6 | 	mov	arg05, #2
0de74     00 1C 06 F6 | 	mov	arg06, #0
0de78     0B 00 00 FF 
0de7c     CC E4 05 F1 | 	add	objptr, ##5836
0de80     0C 85 B1 FD | 	call	#_audio096_spin2_play8
0de84     0B 00 00 FF 
0de88     CC E4 85 F1 | 	sub	objptr, ##5836
0de8c     0C 4E 05 F1 | 	add	fp, #12
0de90     A7 12 02 F6 | 	mov	arg01, fp
0de94     0C 4E 85 F1 | 	sub	fp, #12
0de98     50 F7 BF FD | 	call	#_push
0de9c     5C E4 B0 FD | 	call	#_do_waitms
0dea0     07 12 06 F6 | 	mov	arg01, #7
0dea4     0B 00 00 FF 
0dea8     CC E4 05 F1 | 	add	objptr, ##5836
0deac     84 85 B1 FD | 	call	#_audio096_spin2_stop
0deb0     0B 00 00 FF 
0deb4     CC E4 85 F1 | 	sub	objptr, ##5836
0deb8     A7 F0 03 F6 | 	mov	ptra, fp
0debc     B2 00 A0 FD | 	call	#popregs_
0dec0                 | _do_beep_ret
0dec0     2D 00 64 FD | 	ret
0dec4                 | 
0dec4                 | ' 
0dec4                 | ' '-------------------- blit
0dec4                 | ' 
0dec4                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0dec4                 | ' sub do_blit
0dec4                 | _do_blit
0dec4     02 4A 05 F6 | 	mov	COUNT_, #2
0dec8     A8 00 A0 FD | 	call	#pushregs_
0decc     3C F0 07 F1 | 	add	ptra, #60
0ded0     4A 00 00 FF 
0ded4     80 E4 05 F1 | 	add	objptr, ##38016
0ded8     F2 26 02 FB | 	rdlong	local01, objptr
0dedc     13 25 02 F6 | 	mov	arg10, local01
0dee0     01 24 66 F0 | 	shl	arg10, #1
0dee4     13 25 02 F1 | 	add	arg10, local01
0dee8     02 24 66 F0 | 	shl	arg10, #2
0deec     03 00 00 FF 
0def0     04 E4 85 F1 | 	sub	objptr, ##1540
0def4     F2 24 02 F1 | 	add	arg10, objptr
0def8     12 25 02 FB | 	rdlong	arg10, arg10
0defc     38 4E 05 F1 | 	add	fp, #56
0df00     A7 24 62 FC | 	wrlong	arg10, fp
0df04                 | ' 
0df04                 | ' numpar=compiledline(lineptr_e).result.uresult
0df04                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0df04     38 4E 85 F1 | 	sub	fp, #56
0df08     0A 24 0E F2 | 	cmp	arg10, #10 wz
0df0c     47 00 00 FF 
0df10     7C E4 85 F1 | 	sub	objptr, ##36476
0df14     38 4E 05 51 |  if_ne	add	fp, #56
0df18     A7 26 02 5B |  if_ne	rdlong	local01, fp
0df1c     38 4E 85 51 |  if_ne	sub	fp, #56
0df20     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0df24     50 00 90 AD |  if_e	jmp	#LR__1170
0df28     00 12 06 F6 | 	mov	arg01, #0
0df2c     2C E5 B1 FD | 	call	#__system___getiolock_0603
0df30     FD 12 02 F6 | 	mov	arg01, result1
0df34     FC 87 B1 FD | 	call	#__system___lockmem
0df38     B4 01 00 FF 
0df3c     D8 15 06 F6 | 	mov	arg02, ##@LR__5838
0df40     00 12 06 F6 | 	mov	arg01, #0
0df44     00 16 06 F6 | 	mov	arg03, #0
0df48     DC 94 B1 FD | 	call	#__system___basic_print_string
0df4c     00 12 06 F6 | 	mov	arg01, #0
0df50     08 E5 B1 FD | 	call	#__system___getiolock_0603
0df54     FD 00 68 FC | 	wrlong	#0, result1
0df58     50 00 00 FF 
0df5c     F0 E4 05 F1 | 	add	objptr, ##41200
0df60     F2 14 02 FB | 	rdlong	arg02, objptr
0df64     50 00 00 FF 
0df68     F0 E4 85 F1 | 	sub	objptr, ##41200
0df6c     27 12 06 F6 | 	mov	arg01, #39
0df70     D4 4D B1 FD | 	call	#_printerror
0df74     44 01 90 FD | 	jmp	#LR__1175
0df78                 | LR__1170
0df78                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0df78     38 4E 05 F1 | 	add	fp, #56
0df7c     A7 28 02 FB | 	rdlong	local02, fp
0df80     01 28 86 F1 | 	sub	local02, #1
0df84     04 4E 85 F1 | 	sub	fp, #4
0df88     A7 28 62 FC | 	wrlong	local02, fp
0df8c     34 4E 85 F1 | 	sub	fp, #52
0df90                 | LR__1171
0df90     38 4E 05 F1 | 	add	fp, #56
0df94     A7 26 02 FB | 	rdlong	local01, fp
0df98     01 26 86 F1 | 	sub	local01, #1
0df9c     04 4E 85 F1 | 	sub	fp, #4
0dfa0     A7 24 02 FB | 	rdlong	arg10, fp
0dfa4     34 4E 85 F1 | 	sub	fp, #52
0dfa8     13 25 1A F2 | 	cmp	arg10, local01 wcz
0dfac     54 00 90 1D |  if_a	jmp	#LR__1172
0dfb0     A0 F5 BF FD | 	call	#_pop
0dfb4     A7 FA 61 FC | 	wrlong	result1, fp
0dfb8     04 4E 05 F1 | 	add	fp, #4
0dfbc     A7 FC 61 FC | 	wrlong	result2, fp
0dfc0     04 4E 05 F1 | 	add	fp, #4
0dfc4     A7 FE 61 FC | 	wrlong	result3, fp
0dfc8     2C 4E 05 F1 | 	add	fp, #44
0dfcc     A7 28 02 FB | 	rdlong	local02, fp
0dfd0     02 28 66 F0 | 	shl	local02, #2
0dfd4     28 4E 85 F1 | 	sub	fp, #40
0dfd8     A7 28 02 F1 | 	add	local02, fp
0dfdc     0C 4E 85 F1 | 	sub	fp, #12
0dfe0     A7 12 02 F6 | 	mov	arg01, fp
0dfe4     50 F7 BF FD | 	call	#_converttoint
0dfe8     14 FB 61 FC | 	wrlong	result1, local02
0dfec     34 4E 05 F1 | 	add	fp, #52
0dff0     A7 28 02 FB | 	rdlong	local02, fp
0dff4     01 28 86 F1 | 	sub	local02, #1
0dff8     A7 28 62 FC | 	wrlong	local02, fp
0dffc     34 4E 85 F1 | 	sub	fp, #52
0e000     8C FF 9F FD | 	jmp	#LR__1171
0e004                 | LR__1172
0e004                 | ' if numpar=10 then 
0e004     38 4E 05 F1 | 	add	fp, #56
0e008     A7 28 02 FB | 	rdlong	local02, fp
0e00c     38 4E 85 F1 | 	sub	fp, #56
0e010     0A 28 0E F2 | 	cmp	local02, #10 wz
0e014     5C 00 90 5D |  if_ne	jmp	#LR__1173
0e018     0C 4E 05 F1 | 	add	fp, #12
0e01c     A7 12 02 FB | 	rdlong	arg01, fp
0e020     04 4E 05 F1 | 	add	fp, #4
0e024     A7 14 02 FB | 	rdlong	arg02, fp
0e028     04 4E 05 F1 | 	add	fp, #4
0e02c     A7 16 02 FB | 	rdlong	arg03, fp
0e030     04 4E 05 F1 | 	add	fp, #4
0e034     A7 18 02 FB | 	rdlong	arg04, fp
0e038     04 4E 05 F1 | 	add	fp, #4
0e03c     A7 1A 02 FB | 	rdlong	arg05, fp
0e040     04 4E 05 F1 | 	add	fp, #4
0e044     A7 1C 02 FB | 	rdlong	arg06, fp
0e048     04 4E 05 F1 | 	add	fp, #4
0e04c     A7 1E 02 FB | 	rdlong	arg07, fp
0e050     04 4E 05 F1 | 	add	fp, #4
0e054     A7 20 02 FB | 	rdlong	arg08, fp
0e058     04 4E 05 F1 | 	add	fp, #4
0e05c     A7 22 02 FB | 	rdlong	arg09, fp
0e060     04 4E 05 F1 | 	add	fp, #4
0e064     A7 24 02 FB | 	rdlong	arg10, fp
0e068     30 4E 85 F1 | 	sub	fp, #48
0e06c     B0 74 B1 FD | 	call	#_hg010b_spin2_blit
0e070     48 00 90 FD | 	jmp	#LR__1174
0e074                 | LR__1173
0e074     F2 1E 02 FB | 	rdlong	arg07, objptr
0e078     0C 4E 05 F1 | 	add	fp, #12
0e07c     A7 14 02 FB | 	rdlong	arg02, fp
0e080     04 4E 05 F1 | 	add	fp, #4
0e084     A7 16 02 FB | 	rdlong	arg03, fp
0e088     04 4E 05 F1 | 	add	fp, #4
0e08c     A7 18 02 FB | 	rdlong	arg04, fp
0e090     04 4E 05 F1 | 	add	fp, #4
0e094     A7 1A 02 FB | 	rdlong	arg05, fp
0e098     04 4E 05 F1 | 	add	fp, #4
0e09c     A7 20 02 FB | 	rdlong	arg08, fp
0e0a0     04 4E 05 F1 | 	add	fp, #4
0e0a4     A7 22 02 FB | 	rdlong	arg09, fp
0e0a8     20 4E 85 F1 | 	sub	fp, #32
0e0ac     0F 13 02 F6 | 	mov	arg01, arg07
0e0b0     0A 1C C6 F9 | 	decod	arg06, #10
0e0b4     0A 24 C6 F9 | 	decod	arg10, #10
0e0b8     64 74 B1 FD | 	call	#_hg010b_spin2_blit
0e0bc                 | LR__1174
0e0bc                 | LR__1175
0e0bc     A7 F0 03 F6 | 	mov	ptra, fp
0e0c0     B2 00 A0 FD | 	call	#popregs_
0e0c4                 | _do_blit_ret
0e0c4     2D 00 64 FD | 	ret
0e0c8                 | 
0e0c8                 | ' 
0e0c8                 | ' 
0e0c8                 | ' '-------------------- bin$
0e0c8                 | ' 
0e0c8                 | ' sub do_bin
0e0c8                 | _do_bin
0e0c8     01 4A 05 F6 | 	mov	COUNT_, #1
0e0cc     A8 00 A0 FD | 	call	#pushregs_
0e0d0     18 F0 07 F1 | 	add	ptra, #24
0e0d4     4A 00 00 FF 
0e0d8     80 E4 05 F1 | 	add	objptr, ##38016
0e0dc     F2 26 02 FB | 	rdlong	local01, objptr
0e0e0     13 17 02 F6 | 	mov	arg03, local01
0e0e4     01 16 66 F0 | 	shl	arg03, #1
0e0e8     13 17 02 F1 | 	add	arg03, local01
0e0ec     02 16 66 F0 | 	shl	arg03, #2
0e0f0     03 00 00 FF 
0e0f4     04 E4 85 F1 | 	sub	objptr, ##1540
0e0f8     F2 16 02 F1 | 	add	arg03, objptr
0e0fc     0B 17 02 FB | 	rdlong	arg03, arg03
0e100     0C 4E 05 F1 | 	add	fp, #12
0e104     A7 16 62 FC | 	wrlong	arg03, fp
0e108                 | ' 
0e108                 | ' numpar=compiledline(lineptr_e).result.uresult
0e108                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e108     0C 4E 85 F1 | 	sub	fp, #12
0e10c     03 16 16 F2 | 	cmp	arg03, #3 wc
0e110     47 00 00 FF 
0e114     7C E4 85 F1 | 	sub	objptr, ##36476
0e118     0C 4E 05 C1 |  if_b	add	fp, #12
0e11c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e120     0C 4E 85 C1 |  if_b	sub	fp, #12
0e124     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0e128     00 12 06 F6 | 	mov	arg01, #0
0e12c     2C E3 B1 FD | 	call	#__system___getiolock_0603
0e130     FD 12 02 F6 | 	mov	arg01, result1
0e134     FC 85 B1 FD | 	call	#__system___lockmem
0e138     B4 01 00 FF 
0e13c     DF 15 06 F6 | 	mov	arg02, ##@LR__5839
0e140     00 12 06 F6 | 	mov	arg01, #0
0e144     00 16 06 F6 | 	mov	arg03, #0
0e148     DC 92 B1 FD | 	call	#__system___basic_print_string
0e14c     00 12 06 F6 | 	mov	arg01, #0
0e150     08 E3 B1 FD | 	call	#__system___getiolock_0603
0e154     FD 00 68 FC | 	wrlong	#0, result1
0e158     27 12 06 F6 | 	mov	arg01, #39
0e15c     00 14 06 F6 | 	mov	arg02, #0
0e160     E4 4B B1 FD | 	call	#_printerror
0e164     B8 00 90 FD | 	jmp	#LR__1183
0e168                 | LR__1180
0e168                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e168     0C 4E 05 F1 | 	add	fp, #12
0e16c     A7 26 02 FB | 	rdlong	local01, fp
0e170     0C 4E 85 F1 | 	sub	fp, #12
0e174     02 26 0E F2 | 	cmp	local01, #2 wz
0e178     38 00 90 5D |  if_ne	jmp	#LR__1181
0e17c     D4 F3 BF FD | 	call	#_pop
0e180     FF 26 02 F6 | 	mov	local01, result3
0e184     A7 FA 61 FC | 	wrlong	result1, fp
0e188     04 4E 05 F1 | 	add	fp, #4
0e18c     A7 FC 61 FC | 	wrlong	result2, fp
0e190     04 4E 05 F1 | 	add	fp, #4
0e194     A7 26 62 FC | 	wrlong	local01, fp
0e198     08 4E 85 F1 | 	sub	fp, #8
0e19c     A7 12 02 F6 | 	mov	arg01, fp
0e1a0     94 F5 BF FD | 	call	#_converttoint
0e1a4     14 4E 05 F1 | 	add	fp, #20
0e1a8     A7 FA 61 FC | 	wrlong	result1, fp
0e1ac     14 4E 85 F1 | 	sub	fp, #20
0e1b0     0C 00 90 FD | 	jmp	#LR__1182
0e1b4                 | LR__1181
0e1b4     14 4E 05 F1 | 	add	fp, #20
0e1b8     A7 00 68 FC | 	wrlong	#0, fp
0e1bc     14 4E 85 F1 | 	sub	fp, #20
0e1c0                 | LR__1182
0e1c0     90 F3 BF FD | 	call	#_pop
0e1c4     FF 26 02 F6 | 	mov	local01, result3
0e1c8     A7 FA 61 FC | 	wrlong	result1, fp
0e1cc     04 4E 05 F1 | 	add	fp, #4
0e1d0     A7 FC 61 FC | 	wrlong	result2, fp
0e1d4     04 4E 05 F1 | 	add	fp, #4
0e1d8     A7 26 62 FC | 	wrlong	local01, fp
0e1dc     08 4E 85 F1 | 	sub	fp, #8
0e1e0     A7 12 02 F6 | 	mov	arg01, fp
0e1e4     50 F5 BF FD | 	call	#_converttoint
0e1e8     10 4E 05 F1 | 	add	fp, #16
0e1ec     A7 FA 61 FC | 	wrlong	result1, fp
0e1f0     FD 12 02 F6 | 	mov	arg01, result1
0e1f4     04 4E 05 F1 | 	add	fp, #4
0e1f8     A7 14 02 FB | 	rdlong	arg02, fp
0e1fc     14 4E 85 F1 | 	sub	fp, #20
0e200     02 16 06 F6 | 	mov	arg03, #2
0e204     FC A7 B1 FD | 	call	#__system__Number_S
0e208     A7 FA 61 FC | 	wrlong	result1, fp
0e20c     08 4E 05 F1 | 	add	fp, #8
0e210     A7 3E 68 FC | 	wrlong	#31, fp
0e214     08 4E 85 F1 | 	sub	fp, #8
0e218     A7 12 02 F6 | 	mov	arg01, fp
0e21c     CC F3 BF FD | 	call	#_push
0e220                 | LR__1183
0e220     A7 F0 03 F6 | 	mov	ptra, fp
0e224     B2 00 A0 FD | 	call	#popregs_
0e228                 | _do_bin_ret
0e228     2D 00 64 FD | 	ret
0e22c                 | 
0e22c                 | ' 
0e22c                 | ' '-------------------- box
0e22c                 | ' 
0e22c                 | ' sub do_box
0e22c                 | _do_box
0e22c     03 4A 05 F6 | 	mov	COUNT_, #3
0e230     A8 00 A0 FD | 	call	#pushregs_
0e234     30 F0 07 F1 | 	add	ptra, #48
0e238     18 F3 BF FD | 	call	#_pop
0e23c     FD 1A 02 F6 | 	mov	arg05, result1
0e240     FE 18 02 F6 | 	mov	arg04, result2
0e244     FF 16 02 F6 | 	mov	arg03, result3
0e248     24 4E 05 F1 | 	add	fp, #36
0e24c     A7 1A 62 FC | 	wrlong	arg05, fp
0e250     04 4E 05 F1 | 	add	fp, #4
0e254     A7 18 62 FC | 	wrlong	arg04, fp
0e258     04 4E 05 F1 | 	add	fp, #4
0e25c     A7 16 62 FC | 	wrlong	arg03, fp
0e260     2C 4E 85 F1 | 	sub	fp, #44
0e264     EC F2 BF FD | 	call	#_pop
0e268     FD 1A 02 F6 | 	mov	arg05, result1
0e26c     FE 18 02 F6 | 	mov	arg04, result2
0e270     FF 16 02 F6 | 	mov	arg03, result3
0e274     18 4E 05 F1 | 	add	fp, #24
0e278     A7 1A 62 FC | 	wrlong	arg05, fp
0e27c     04 4E 05 F1 | 	add	fp, #4
0e280     A7 18 62 FC | 	wrlong	arg04, fp
0e284     04 4E 05 F1 | 	add	fp, #4
0e288     A7 16 62 FC | 	wrlong	arg03, fp
0e28c     20 4E 85 F1 | 	sub	fp, #32
0e290     C0 F2 BF FD | 	call	#_pop
0e294     FD 1A 02 F6 | 	mov	arg05, result1
0e298     FE 18 02 F6 | 	mov	arg04, result2
0e29c     FF 26 02 F6 | 	mov	local01, result3
0e2a0     0C 4E 05 F1 | 	add	fp, #12
0e2a4     A7 1A 62 FC | 	wrlong	arg05, fp
0e2a8     04 4E 05 F1 | 	add	fp, #4
0e2ac     A7 18 62 FC | 	wrlong	arg04, fp
0e2b0     04 4E 05 F1 | 	add	fp, #4
0e2b4     A7 26 62 FC | 	wrlong	local01, fp
0e2b8     14 4E 85 F1 | 	sub	fp, #20
0e2bc     94 F2 BF FD | 	call	#_pop
0e2c0     A7 FA 61 FC | 	wrlong	result1, fp
0e2c4     04 4E 05 F1 | 	add	fp, #4
0e2c8     A7 FC 61 FC | 	wrlong	result2, fp
0e2cc     04 4E 05 F1 | 	add	fp, #4
0e2d0     A7 FE 61 FC | 	wrlong	result3, fp
0e2d4                 | ' 
0e2d4                 | ' t4=pop()
0e2d4                 | ' t3=pop()
0e2d4                 | ' t2=pop()
0e2d4                 | ' t1=pop()
0e2d4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e2d4     FF 1A 02 F6 | 	mov	arg05, result3
0e2d8     08 4E 85 F1 | 	sub	fp, #8
0e2dc     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e2e0     08 4E 05 51 |  if_ne	add	fp, #8
0e2e4     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e2e8     08 4E 85 51 |  if_ne	sub	fp, #8
0e2ec     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e2f0     A8 00 90 5D |  if_ne	jmp	#LR__1190
0e2f4     14 4E 05 F1 | 	add	fp, #20
0e2f8     A7 26 02 FB | 	rdlong	local01, fp
0e2fc     14 4E 85 F1 | 	sub	fp, #20
0e300     1C 26 0E F2 | 	cmp	local01, #28 wz
0e304     14 4E 05 51 |  if_ne	add	fp, #20
0e308     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e30c     14 4E 85 51 |  if_ne	sub	fp, #20
0e310     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e314     84 00 90 5D |  if_ne	jmp	#LR__1190
0e318     20 4E 05 F1 | 	add	fp, #32
0e31c     A7 26 02 FB | 	rdlong	local01, fp
0e320     20 4E 85 F1 | 	sub	fp, #32
0e324     1C 26 0E F2 | 	cmp	local01, #28 wz
0e328     20 4E 05 51 |  if_ne	add	fp, #32
0e32c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e330     20 4E 85 51 |  if_ne	sub	fp, #32
0e334     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e338     60 00 90 5D |  if_ne	jmp	#LR__1190
0e33c     2C 4E 05 F1 | 	add	fp, #44
0e340     A7 26 02 FB | 	rdlong	local01, fp
0e344     2C 4E 85 F1 | 	sub	fp, #44
0e348     1C 26 0E F2 | 	cmp	local01, #28 wz
0e34c     2C 4E 05 51 |  if_ne	add	fp, #44
0e350     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e354     2C 4E 85 51 |  if_ne	sub	fp, #44
0e358     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e35c     3C 00 90 5D |  if_ne	jmp	#LR__1190
0e360     A7 12 02 FB | 	rdlong	arg01, fp
0e364     0C 4E 05 F1 | 	add	fp, #12
0e368     A7 14 02 FB | 	rdlong	arg02, fp
0e36c     0C 4E 05 F1 | 	add	fp, #12
0e370     A7 16 02 FB | 	rdlong	arg03, fp
0e374     0C 4E 05 F1 | 	add	fp, #12
0e378     A7 18 02 FB | 	rdlong	arg04, fp
0e37c     24 4E 85 F1 | 	sub	fp, #36
0e380     37 00 00 FF 
0e384     28 E4 05 F1 | 	add	objptr, ##28200
0e388     F2 1A 02 FB | 	rdlong	arg05, objptr
0e38c     37 00 00 FF 
0e390     28 E4 85 F1 | 	sub	objptr, ##28200
0e394     50 64 B1 FD | 	call	#_hg010b_spin2_box
0e398                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e398     6C 00 90 FD | 	jmp	#LR__1191
0e39c                 | LR__1190
0e39c     A7 12 02 F6 | 	mov	arg01, fp
0e3a0     94 F3 BF FD | 	call	#_converttoint
0e3a4     FD 28 02 F6 | 	mov	local02, result1
0e3a8     0C 4E 05 F1 | 	add	fp, #12
0e3ac     A7 12 02 F6 | 	mov	arg01, fp
0e3b0     0C 4E 85 F1 | 	sub	fp, #12
0e3b4     80 F3 BF FD | 	call	#_converttoint
0e3b8     FD 2A 02 F6 | 	mov	local03, result1
0e3bc     18 4E 05 F1 | 	add	fp, #24
0e3c0     A7 12 02 F6 | 	mov	arg01, fp
0e3c4     18 4E 85 F1 | 	sub	fp, #24
0e3c8     6C F3 BF FD | 	call	#_converttoint
0e3cc     FD 26 02 F6 | 	mov	local01, result1
0e3d0     24 4E 05 F1 | 	add	fp, #36
0e3d4     A7 12 02 F6 | 	mov	arg01, fp
0e3d8     24 4E 85 F1 | 	sub	fp, #36
0e3dc     58 F3 BF FD | 	call	#_converttoint
0e3e0     FD 18 02 F6 | 	mov	arg04, result1
0e3e4     37 00 00 FF 
0e3e8     28 E4 05 F1 | 	add	objptr, ##28200
0e3ec     F2 1A 02 FB | 	rdlong	arg05, objptr
0e3f0     37 00 00 FF 
0e3f4     28 E4 85 F1 | 	sub	objptr, ##28200
0e3f8     14 13 02 F6 | 	mov	arg01, local02
0e3fc     15 15 02 F6 | 	mov	arg02, local03
0e400     13 17 02 F6 | 	mov	arg03, local01
0e404     E0 63 B1 FD | 	call	#_hg010b_spin2_box
0e408                 | LR__1191
0e408     A7 F0 03 F6 | 	mov	ptra, fp
0e40c     B2 00 A0 FD | 	call	#popregs_
0e410                 | _do_box_ret
0e410     2D 00 64 FD | 	ret
0e414                 | 
0e414                 | ' 
0e414                 | ' '-------------------- brun
0e414                 | ' 
0e414                 | ' sub do_brun
0e414                 | _do_brun
0e414     08 4A 05 F6 | 	mov	COUNT_, #8
0e418     A8 00 A0 FD | 	call	#pushregs_
0e41c     34 F1 BF FD | 	call	#_pop
0e420     FE 1A 02 F6 | 	mov	arg05, result2
0e424     FF 18 02 F6 | 	mov	arg04, result3
0e428     FD 26 02 F6 | 	mov	local01, result1
0e42c     0D 29 02 F6 | 	mov	local02, arg05
0e430     0C 2B 02 F6 | 	mov	local03, arg04
0e434                 | ' 
0e434                 | ' t1=pop() 
0e434                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e434     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e438     10 00 90 5D |  if_ne	jmp	#LR__1200
0e43c     13 13 02 F6 | 	mov	arg01, local01
0e440     88 F2 BF FD | 	call	#_convertstring
0e444     FD 26 02 F6 | 	mov	local01, result1
0e448     1F 2A 06 F6 | 	mov	local03, #31
0e44c                 | LR__1200
0e44c                 | ' if t1.result_type=result_string then
0e44c     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e450     EC 01 90 5D |  if_ne	jmp	#LR__1204
0e454     13 2D 02 F6 | 	mov	local04, local01
0e458                 | '   filename=t1.result.sresult
0e458                 | '   if left$(filename,1)="/" then 
0e458     16 13 02 F6 | 	mov	arg01, local04
0e45c     01 14 06 F6 | 	mov	arg02, #1
0e460     4C A3 B1 FD | 	call	#__system__Left_S
0e464     FD 12 02 F6 | 	mov	arg01, result1
0e468     B4 01 00 FF 
0e46c     E6 15 06 F6 | 	mov	arg02, ##@LR__5840
0e470     E8 82 B1 FD | 	call	#__system___string_cmp
0e474     00 FA 0D F2 | 	cmp	result1, #0 wz
0e478     16 2F 02 A6 |  if_e	mov	local05, local04
0e47c     14 00 90 AD |  if_e	jmp	#LR__1201
0e480     B4 01 00 FF 
0e484     E8 13 06 F6 | 	mov	arg01, ##@LR__5841
0e488     16 15 02 F6 | 	mov	arg02, local04
0e48c     00 83 B1 FD | 	call	#__system___string_concat
0e490     FD 2E 02 F6 | 	mov	local05, result1
0e494                 | LR__1201
0e494                 | '   open fullfilename for input as #9
0e494     09 12 06 F6 | 	mov	arg01, #9
0e498     17 15 02 F6 | 	mov	arg02, local05
0e49c     00 16 06 F6 | 	mov	arg03, #0
0e4a0     94 8E B1 FD | 	call	#__system___basic_open_string
0e4a4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e4a8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e4ac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e4b0     FD 30 0A F6 | 	mov	local06, result1 wz
0e4b4                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e4b4     8C 00 90 AD |  if_e	jmp	#LR__1202
0e4b8     00 12 06 F6 | 	mov	arg01, #0
0e4bc     9C DF B1 FD | 	call	#__system___getiolock_0603
0e4c0     FD 12 02 F6 | 	mov	arg01, result1
0e4c4     6C 82 B1 FD | 	call	#__system___lockmem
0e4c8     B4 01 00 FF 
0e4cc     F1 15 06 F6 | 	mov	arg02, ##@LR__5842
0e4d0     00 12 06 F6 | 	mov	arg01, #0
0e4d4     00 16 06 F6 | 	mov	arg03, #0
0e4d8     4C 8F B1 FD | 	call	#__system___basic_print_string
0e4dc     00 12 06 F6 | 	mov	arg01, #0
0e4e0     18 15 02 F6 | 	mov	arg02, local06
0e4e4     00 16 06 F6 | 	mov	arg03, #0
0e4e8     0A 18 06 F6 | 	mov	arg04, #10
0e4ec     7C 8F B1 FD | 	call	#__system___basic_print_integer
0e4f0     B4 01 00 FF 
0e4f4     FF 15 06 F6 | 	mov	arg02, ##@LR__5843
0e4f8     00 12 06 F6 | 	mov	arg01, #0
0e4fc     00 16 06 F6 | 	mov	arg03, #0
0e500     24 8F B1 FD | 	call	#__system___basic_print_string
0e504     18 13 02 F6 | 	mov	arg01, local06
0e508     B4 AB B1 FD | 	call	#__system___strerror
0e50c     FD 14 02 F6 | 	mov	arg02, result1
0e510     00 12 06 F6 | 	mov	arg01, #0
0e514     00 16 06 F6 | 	mov	arg03, #0
0e518     0C 8F B1 FD | 	call	#__system___basic_print_string
0e51c     00 12 06 F6 | 	mov	arg01, #0
0e520     0A 14 06 F6 | 	mov	arg02, #10
0e524     00 16 06 F6 | 	mov	arg03, #0
0e528     A4 8E B1 FD | 	call	#__system___basic_print_char
0e52c     00 12 06 F6 | 	mov	arg01, #0
0e530     28 DF B1 FD | 	call	#__system___getiolock_0603
0e534     FD 00 68 FC | 	wrlong	#0, result1
0e538     09 12 06 F6 | 	mov	arg01, #9
0e53c     4C D5 B1 FD | 	call	#__system__close
0e540     FC 00 90 FD | 	jmp	#LR__1205
0e544                 | LR__1202
0e544     01 32 06 F6 | 	mov	local07, #1
0e548     00 34 06 F6 | 	mov	local08, #0
0e54c                 | '   do
0e54c                 | LR__1203
0e54c                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e54c     4E 00 00 FF 
0e550     B4 E4 05 F1 | 	add	objptr, ##40116
0e554     F2 16 02 F6 | 	mov	arg03, objptr
0e558     4E 00 00 FF 
0e55c     B4 E4 85 F1 | 	sub	objptr, ##40116
0e560     09 12 06 F6 | 	mov	arg01, #9
0e564     19 15 02 F6 | 	mov	arg02, local07
0e568     0A 18 C6 F9 | 	decod	arg04, #10
0e56c     01 1A 06 F6 | 	mov	arg05, #1
0e570     30 90 B1 FD | 	call	#__system___basic_get
0e574     FD 30 02 F6 | 	mov	local06, result1
0e578     FD 32 02 F1 | 	add	local07, result1
0e57c     4E 00 00 FF 
0e580     B4 E4 05 F1 | 	add	objptr, ##40116
0e584     F2 12 02 F6 | 	mov	arg01, objptr
0e588     1A 15 02 F6 | 	mov	arg02, local08
0e58c     0A 16 C6 F9 | 	decod	arg03, #10
0e590     42 00 00 FF 
0e594     E8 E5 85 F1 | 	sub	objptr, ##34280
0e598     AC 75 B1 FD | 	call	#_psram_spin2_write
0e59c     0B 00 00 FF 
0e5a0     CC E4 85 F1 | 	sub	objptr, ##5836
0e5a4     18 35 02 F1 | 	add	local08, local06
0e5a8     02 00 00 FF 
0e5ac     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e5b0     E0 03 00 AF 
0e5b4     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e5b8     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1203
0e5bc     36 00 00 FF 
0e5c0     FC E5 05 F1 | 	add	objptr, ##28156
0e5c4     F2 12 02 FB | 	rdlong	arg01, objptr
0e5c8     03 12 62 FD | 	cogstop	arg01
0e5cc     04 E4 05 F1 | 	add	objptr, #4
0e5d0     F2 12 02 FB | 	rdlong	arg01, objptr
0e5d4     03 12 62 FD | 	cogstop	arg01
0e5d8     04 E4 05 F1 | 	add	objptr, #4
0e5dc     F2 12 02 FB | 	rdlong	arg01, objptr
0e5e0     03 12 62 FD | 	cogstop	arg01
0e5e4     19 00 00 FF 
0e5e8     3C E5 05 F1 | 	add	objptr, ##13116
0e5ec     F2 12 02 FB | 	rdlong	arg01, objptr
0e5f0     03 12 62 FD | 	cogstop	arg01
0e5f4     18 00 00 FF 
0e5f8     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e5fc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e600     18 00 00 FF 
0e604     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e608     19 00 00 FF 
0e60c     34 E5 85 F1 | 	sub	objptr, ##13108
0e610     1E 34 06 F6 | 	mov	local08, #30
0e614     28 E4 61 FD | 	setq	objptr
0e618     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e61c     01 34 66 C6 |  if_b	neg	local08, #1
0e620     1B 00 00 FF 
0e624     0C E5 05 F1 | 	add	objptr, ##14092
0e628     F2 34 62 FC | 	wrlong	local08, objptr
0e62c     52 00 00 FF 
0e630     18 E5 85 F1 | 	sub	objptr, ##42264
0e634     00 12 06 F6 | 	mov	arg01, #0
0e638     01 12 62 FD | 	cogid	arg01
0e63c     03 12 62 FD | 	cogstop	arg01
0e640                 | LR__1204
0e640                 | LR__1205
0e640     A7 F0 03 F6 | 	mov	ptra, fp
0e644     B2 00 A0 FD | 	call	#popregs_
0e648                 | _do_brun_ret
0e648     2D 00 64 FD | 	ret
0e64c                 | 
0e64c                 | ' 
0e64c                 | ' '-------------------- cd
0e64c                 | ' 
0e64c                 | ' sub do_cd
0e64c                 | _do_cd
0e64c     06 4A 05 F6 | 	mov	COUNT_, #6
0e650     A8 00 A0 FD | 	call	#pushregs_
0e654     B5 01 00 FF 
0e658     02 12 06 F6 | 	mov	arg01, ##@LR__5844
0e65c     31 14 06 F6 | 	mov	arg02, #49
0e660     30 DF B1 FD | 	call	#__system___basic_dir
0e664     EC EE BF FD | 	call	#_pop
0e668     FE 18 02 F6 | 	mov	arg04, result2
0e66c     FF 16 02 F6 | 	mov	arg03, result3
0e670     FD 26 02 F6 | 	mov	local01, result1
0e674     0C 29 02 F6 | 	mov	local02, arg04
0e678     0B 2B 02 F6 | 	mov	local03, arg03
0e67c                 | ' t1=pop()
0e67c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e67c     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e680     10 00 90 5D |  if_ne	jmp	#LR__1210
0e684     13 13 02 F6 | 	mov	arg01, local01
0e688     40 F0 BF FD | 	call	#_convertstring
0e68c     FD 26 02 F6 | 	mov	local01, result1
0e690     1F 2A 06 F6 | 	mov	local03, #31
0e694                 | LR__1210
0e694                 | ' if t1.result_type<>result_string then printerror(15): return
0e694     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e698     10 00 90 AD |  if_e	jmp	#LR__1211
0e69c     0F 12 06 F6 | 	mov	arg01, #15
0e6a0     00 14 06 F6 | 	mov	arg02, #0
0e6a4     A0 46 B1 FD | 	call	#_printerror
0e6a8     48 05 90 FD | 	jmp	#LR__1229
0e6ac                 | LR__1211
0e6ac     13 2D 02 F6 | 	mov	local04, local01
0e6b0                 | ' newdir$=t1.result.sresult
0e6b0                 | ' if newdir$=".." then 
0e6b0     B5 01 00 FF 
0e6b4     04 14 06 F6 | 	mov	arg02, ##@LR__5845
0e6b8     16 13 02 F6 | 	mov	arg01, local04
0e6bc     9C 80 B1 FD | 	call	#__system___string_cmp
0e6c0     00 FA 0D F2 | 	cmp	result1, #0 wz
0e6c4     C4 01 90 5D |  if_ne	jmp	#LR__1218
0e6c8     4A 00 00 FF 
0e6cc     94 E4 05 F1 | 	add	objptr, ##38036
0e6d0     F2 12 02 FB | 	rdlong	arg01, objptr
0e6d4     4A 00 00 FF 
0e6d8     94 E4 85 F1 | 	sub	objptr, ##38036
0e6dc     09 2F 02 F6 | 	mov	local05, arg01
0e6e0     97 06 48 FB | 	callpa	#(@LR__1213-@LR__1212)>>2,fcache_load_ptr_
0e6e4                 | LR__1212
0e6e4     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e6e8     01 2E 06 51 |  if_ne	add	local05, #1
0e6ec     F4 FF 9F 5D |  if_ne	jmp	#LR__1212
0e6f0                 | LR__1213
0e6f0     17 13 C2 F2 | 	subr	arg01, local05
0e6f4     4A 00 00 FF 
0e6f8     94 E4 05 F1 | 	add	objptr, ##38036
0e6fc     F2 14 02 FB | 	rdlong	arg02, objptr
0e700     4A 00 00 FF 
0e704     94 E4 85 F1 | 	sub	objptr, ##38036
0e708     B5 01 00 FF 
0e70c     07 16 06 F6 | 	mov	arg03, ##@LR__5846
0e710     E8 A6 B1 FD | 	call	#__system__InstrRev
0e714     FD 2C 02 F6 | 	mov	local04, result1
0e718                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e718     02 2C 56 F2 | 	cmps	local04, #2 wc
0e71c     28 00 90 CD |  if_b	jmp	#LR__1214
0e720     4A 00 00 FF 
0e724     94 E4 05 F1 | 	add	objptr, ##38036
0e728     F2 12 02 FB | 	rdlong	arg01, objptr
0e72c     4A 00 00 FF 
0e730     94 E4 85 F1 | 	sub	objptr, ##38036
0e734     01 2C 86 F1 | 	sub	local04, #1
0e738     16 15 02 F6 | 	mov	arg02, local04
0e73c     70 A0 B1 FD | 	call	#__system__Left_S
0e740     FD 2C 02 F6 | 	mov	local04, result1
0e744     08 00 90 FD | 	jmp	#LR__1215
0e748                 | LR__1214
0e748     B5 01 00 FF 
0e74c     09 2C 06 F6 | 	mov	local04, ##@LR__5847
0e750                 | LR__1215
0e750     16 13 02 F6 | 	mov	arg01, local04
0e754     68 86 B1 FD | 	call	#__system___chdir
0e758     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e75c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e760     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e764     FD 30 0A F6 | 	mov	local06, result1 wz
0e768                 | '   chdir newdir$
0e768                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e768     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e76c     A4 00 90 AD |  if_e	jmp	#LR__1216
0e770     00 12 06 F6 | 	mov	arg01, #0
0e774     E4 DC B1 FD | 	call	#__system___getiolock_0603
0e778     FD 12 02 F6 | 	mov	arg01, result1
0e77c     B4 7F B1 FD | 	call	#__system___lockmem
0e780     B5 01 00 FF 
0e784     0B 14 06 F6 | 	mov	arg02, ##@LR__5848
0e788     00 12 06 F6 | 	mov	arg01, #0
0e78c     00 16 06 F6 | 	mov	arg03, #0
0e790     94 8C B1 FD | 	call	#__system___basic_print_string
0e794     00 12 06 F6 | 	mov	arg01, #0
0e798     18 15 02 F6 | 	mov	arg02, local06
0e79c     00 16 06 F6 | 	mov	arg03, #0
0e7a0     0A 18 06 F6 | 	mov	arg04, #10
0e7a4     C4 8C B1 FD | 	call	#__system___basic_print_integer
0e7a8     B5 01 00 FF 
0e7ac     19 14 06 F6 | 	mov	arg02, ##@LR__5849
0e7b0     00 12 06 F6 | 	mov	arg01, #0
0e7b4     00 16 06 F6 | 	mov	arg03, #0
0e7b8     6C 8C B1 FD | 	call	#__system___basic_print_string
0e7bc     45 00 00 FF 
0e7c0     50 E5 05 F1 | 	add	objptr, ##35664
0e7c4     F2 14 02 FB | 	rdlong	arg02, objptr
0e7c8     45 00 00 FF 
0e7cc     50 E5 85 F1 | 	sub	objptr, ##35664
0e7d0     00 12 06 F6 | 	mov	arg01, #0
0e7d4     00 16 06 F6 | 	mov	arg03, #0
0e7d8     4C 8C B1 FD | 	call	#__system___basic_print_string
0e7dc     00 12 06 F6 | 	mov	arg01, #0
0e7e0     0A 14 06 F6 | 	mov	arg02, #10
0e7e4     00 16 06 F6 | 	mov	arg03, #0
0e7e8     E4 8B B1 FD | 	call	#__system___basic_print_char
0e7ec     00 12 06 F6 | 	mov	arg01, #0
0e7f0     68 DC B1 FD | 	call	#__system___getiolock_0603
0e7f4     FD 00 68 FC | 	wrlong	#0, result1
0e7f8     4A 00 00 FF 
0e7fc     94 E4 05 F1 | 	add	objptr, ##38036
0e800     F2 12 02 FB | 	rdlong	arg01, objptr
0e804     4A 00 00 FF 
0e808     94 E4 85 F1 | 	sub	objptr, ##38036
0e80c     B0 85 B1 FD | 	call	#__system___chdir
0e810     14 00 90 FD | 	jmp	#LR__1217
0e814                 | LR__1216
0e814     4A 00 00 FF 
0e818     94 E4 05 F1 | 	add	objptr, ##38036
0e81c     F2 2C 62 FC | 	wrlong	local04, objptr
0e820     4A 00 00 FF 
0e824     94 E4 85 F1 | 	sub	objptr, ##38036
0e828                 | LR__1217
0e828                 | '   print "Current directory: ";currentdir$
0e828     00 12 06 F6 | 	mov	arg01, #0
0e82c     2C DC B1 FD | 	call	#__system___getiolock_0603
0e830     FD 12 02 F6 | 	mov	arg01, result1
0e834     FC 7E B1 FD | 	call	#__system___lockmem
0e838     B5 01 00 FF 
0e83c     1C 14 06 F6 | 	mov	arg02, ##@LR__5850
0e840     00 12 06 F6 | 	mov	arg01, #0
0e844     00 16 06 F6 | 	mov	arg03, #0
0e848     DC 8B B1 FD | 	call	#__system___basic_print_string
0e84c     4A 00 00 FF 
0e850     94 E4 05 F1 | 	add	objptr, ##38036
0e854     F2 14 02 FB | 	rdlong	arg02, objptr
0e858     4A 00 00 FF 
0e85c     94 E4 85 F1 | 	sub	objptr, ##38036
0e860     00 12 06 F6 | 	mov	arg01, #0
0e864     00 16 06 F6 | 	mov	arg03, #0
0e868     BC 8B B1 FD | 	call	#__system___basic_print_string
0e86c     00 12 06 F6 | 	mov	arg01, #0
0e870     0A 14 06 F6 | 	mov	arg02, #10
0e874     00 16 06 F6 | 	mov	arg03, #0
0e878     54 8B B1 FD | 	call	#__system___basic_print_char
0e87c     00 12 06 F6 | 	mov	arg01, #0
0e880     D8 DB B1 FD | 	call	#__system___getiolock_0603
0e884     FD 00 68 FC | 	wrlong	#0, result1
0e888                 | '   return
0e888     68 03 90 FD | 	jmp	#LR__1229
0e88c                 | LR__1218
0e88c                 | ' if left$(newdir$,1)="/" then 
0e88c     16 13 02 F6 | 	mov	arg01, local04
0e890     01 14 06 F6 | 	mov	arg02, #1
0e894     18 9F B1 FD | 	call	#__system__Left_S
0e898     FD 12 02 F6 | 	mov	arg01, result1
0e89c     B5 01 00 FF 
0e8a0     30 14 06 F6 | 	mov	arg02, ##@LR__5851
0e8a4     B4 7E B1 FD | 	call	#__system___string_cmp
0e8a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0e8ac     3C 01 90 5D |  if_ne	jmp	#LR__1221
0e8b0     16 13 02 F6 | 	mov	arg01, local04
0e8b4     08 85 B1 FD | 	call	#__system___chdir
0e8b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e8bc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e8c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e8c4     FD 30 0A F6 | 	mov	local06, result1 wz
0e8c8                 | '   chdir(newdir$)
0e8c8                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e8c8     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e8cc     A4 00 90 AD |  if_e	jmp	#LR__1219
0e8d0     00 12 06 F6 | 	mov	arg01, #0
0e8d4     84 DB B1 FD | 	call	#__system___getiolock_0603
0e8d8     FD 12 02 F6 | 	mov	arg01, result1
0e8dc     54 7E B1 FD | 	call	#__system___lockmem
0e8e0     B5 01 00 FF 
0e8e4     32 14 06 F6 | 	mov	arg02, ##@LR__5852
0e8e8     00 12 06 F6 | 	mov	arg01, #0
0e8ec     00 16 06 F6 | 	mov	arg03, #0
0e8f0     34 8B B1 FD | 	call	#__system___basic_print_string
0e8f4     00 12 06 F6 | 	mov	arg01, #0
0e8f8     18 15 02 F6 | 	mov	arg02, local06
0e8fc     00 16 06 F6 | 	mov	arg03, #0
0e900     0A 18 06 F6 | 	mov	arg04, #10
0e904     64 8B B1 FD | 	call	#__system___basic_print_integer
0e908     B5 01 00 FF 
0e90c     40 14 06 F6 | 	mov	arg02, ##@LR__5853
0e910     00 12 06 F6 | 	mov	arg01, #0
0e914     00 16 06 F6 | 	mov	arg03, #0
0e918     0C 8B B1 FD | 	call	#__system___basic_print_string
0e91c     45 00 00 FF 
0e920     50 E5 05 F1 | 	add	objptr, ##35664
0e924     F2 14 02 FB | 	rdlong	arg02, objptr
0e928     45 00 00 FF 
0e92c     50 E5 85 F1 | 	sub	objptr, ##35664
0e930     00 12 06 F6 | 	mov	arg01, #0
0e934     00 16 06 F6 | 	mov	arg03, #0
0e938     EC 8A B1 FD | 	call	#__system___basic_print_string
0e93c     00 12 06 F6 | 	mov	arg01, #0
0e940     0A 14 06 F6 | 	mov	arg02, #10
0e944     00 16 06 F6 | 	mov	arg03, #0
0e948     84 8A B1 FD | 	call	#__system___basic_print_char
0e94c     00 12 06 F6 | 	mov	arg01, #0
0e950     08 DB B1 FD | 	call	#__system___getiolock_0603
0e954     FD 00 68 FC | 	wrlong	#0, result1
0e958     4A 00 00 FF 
0e95c     94 E4 05 F1 | 	add	objptr, ##38036
0e960     F2 12 02 FB | 	rdlong	arg01, objptr
0e964     4A 00 00 FF 
0e968     94 E4 85 F1 | 	sub	objptr, ##38036
0e96c     50 84 B1 FD | 	call	#__system___chdir
0e970     14 00 90 FD | 	jmp	#LR__1220
0e974                 | LR__1219
0e974     4A 00 00 FF 
0e978     94 E4 05 F1 | 	add	objptr, ##38036
0e97c     F2 2C 62 FC | 	wrlong	local04, objptr
0e980     4A 00 00 FF 
0e984     94 E4 85 F1 | 	sub	objptr, ##38036
0e988                 | LR__1220
0e988                 | '   print "Current directory: ";currentdir$
0e988     00 12 06 F6 | 	mov	arg01, #0
0e98c     CC DA B1 FD | 	call	#__system___getiolock_0603
0e990     FD 12 02 F6 | 	mov	arg01, result1
0e994     9C 7D B1 FD | 	call	#__system___lockmem
0e998     B5 01 00 FF 
0e99c     43 14 06 F6 | 	mov	arg02, ##@LR__5854
0e9a0     00 12 06 F6 | 	mov	arg01, #0
0e9a4     00 16 06 F6 | 	mov	arg03, #0
0e9a8     7C 8A B1 FD | 	call	#__system___basic_print_string
0e9ac     4A 00 00 FF 
0e9b0     94 E4 05 F1 | 	add	objptr, ##38036
0e9b4     F2 14 02 FB | 	rdlong	arg02, objptr
0e9b8     4A 00 00 FF 
0e9bc     94 E4 85 F1 | 	sub	objptr, ##38036
0e9c0     00 12 06 F6 | 	mov	arg01, #0
0e9c4     00 16 06 F6 | 	mov	arg03, #0
0e9c8     5C 8A B1 FD | 	call	#__system___basic_print_string
0e9cc     00 12 06 F6 | 	mov	arg01, #0
0e9d0     0A 14 06 F6 | 	mov	arg02, #10
0e9d4     00 16 06 F6 | 	mov	arg03, #0
0e9d8     F4 89 B1 FD | 	call	#__system___basic_print_char
0e9dc     00 12 06 F6 | 	mov	arg01, #0
0e9e0     78 DA B1 FD | 	call	#__system___getiolock_0603
0e9e4     FD 00 68 FC | 	wrlong	#0, result1
0e9e8                 | '   return
0e9e8     08 02 90 FD | 	jmp	#LR__1229
0e9ec                 | LR__1221
0e9ec                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0e9ec     4A 00 00 FF 
0e9f0     94 E4 05 F1 | 	add	objptr, ##38036
0e9f4     F2 12 02 FB | 	rdlong	arg01, objptr
0e9f8     4A 00 00 FF 
0e9fc     94 E4 85 F1 | 	sub	objptr, ##38036
0ea00     B5 01 00 FF 
0ea04     57 14 06 F6 | 	mov	arg02, ##@LR__5855
0ea08     50 7D B1 FD | 	call	#__system___string_cmp
0ea0c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ea10     34 00 90 AD |  if_e	jmp	#LR__1222
0ea14     4A 00 00 FF 
0ea18     94 E4 05 F1 | 	add	objptr, ##38036
0ea1c     F2 12 02 FB | 	rdlong	arg01, objptr
0ea20     4A 00 00 FF 
0ea24     94 E4 85 F1 | 	sub	objptr, ##38036
0ea28     B5 01 00 FF 
0ea2c     59 14 06 F6 | 	mov	arg02, ##@LR__5856
0ea30     5C 7D B1 FD | 	call	#__system___string_concat
0ea34     FD 12 02 F6 | 	mov	arg01, result1
0ea38     16 15 02 F6 | 	mov	arg02, local04
0ea3c     50 7D B1 FD | 	call	#__system___string_concat
0ea40     FD 2C 02 F6 | 	mov	local04, result1
0ea44     20 00 90 FD | 	jmp	#LR__1223
0ea48                 | LR__1222
0ea48     4A 00 00 FF 
0ea4c     94 E4 05 F1 | 	add	objptr, ##38036
0ea50     F2 12 02 FB | 	rdlong	arg01, objptr
0ea54     4A 00 00 FF 
0ea58     94 E4 85 F1 | 	sub	objptr, ##38036
0ea5c     16 15 02 F6 | 	mov	arg02, local04
0ea60     2C 7D B1 FD | 	call	#__system___string_concat
0ea64     FD 2C 02 F6 | 	mov	local04, result1
0ea68                 | LR__1223
0ea68                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0ea68     16 13 02 F6 | 	mov	arg01, local04
0ea6c     01 14 06 F6 | 	mov	arg02, #1
0ea70     C4 9D B1 FD | 	call	#__system__Right_S
0ea74     FD 12 02 F6 | 	mov	arg01, result1
0ea78     B5 01 00 FF 
0ea7c     5B 14 06 F6 | 	mov	arg02, ##@LR__5857
0ea80     D8 7C B1 FD | 	call	#__system___string_cmp
0ea84     00 FA 0D F2 | 	cmp	result1, #0 wz
0ea88     30 00 90 5D |  if_ne	jmp	#LR__1226
0ea8c     16 13 02 F6 | 	mov	arg01, local04
0ea90     09 2F 02 F6 | 	mov	local05, arg01
0ea94     97 06 48 FB | 	callpa	#(@LR__1225-@LR__1224)>>2,fcache_load_ptr_
0ea98                 | LR__1224
0ea98     17 FB C9 FA | 	rdbyte	result1, local05 wz
0ea9c     01 2E 06 51 |  if_ne	add	local05, #1
0eaa0     F4 FF 9F 5D |  if_ne	jmp	#LR__1224
0eaa4                 | LR__1225
0eaa4     09 2F 82 F1 | 	sub	local05, arg01
0eaa8     17 15 02 F6 | 	mov	arg02, local05
0eaac     01 14 86 F1 | 	sub	arg02, #1
0eab0     16 13 02 F6 | 	mov	arg01, local04
0eab4     F8 9C B1 FD | 	call	#__system__Left_S
0eab8     FD 2C 02 F6 | 	mov	local04, result1
0eabc                 | LR__1226
0eabc     16 13 02 F6 | 	mov	arg01, local04
0eac0     FC 82 B1 FD | 	call	#__system___chdir
0eac4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0eac8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0eacc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ead0     FD 30 0A F6 | 	mov	local06, result1 wz
0ead4                 | '   chdir(newdir$)
0ead4                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0ead4     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0ead8     A4 00 90 AD |  if_e	jmp	#LR__1227
0eadc     00 12 06 F6 | 	mov	arg01, #0
0eae0     78 D9 B1 FD | 	call	#__system___getiolock_0603
0eae4     FD 12 02 F6 | 	mov	arg01, result1
0eae8     48 7C B1 FD | 	call	#__system___lockmem
0eaec     B5 01 00 FF 
0eaf0     5D 14 06 F6 | 	mov	arg02, ##@LR__5858
0eaf4     00 12 06 F6 | 	mov	arg01, #0
0eaf8     00 16 06 F6 | 	mov	arg03, #0
0eafc     28 89 B1 FD | 	call	#__system___basic_print_string
0eb00     00 12 06 F6 | 	mov	arg01, #0
0eb04     18 15 02 F6 | 	mov	arg02, local06
0eb08     00 16 06 F6 | 	mov	arg03, #0
0eb0c     0A 18 06 F6 | 	mov	arg04, #10
0eb10     58 89 B1 FD | 	call	#__system___basic_print_integer
0eb14     B5 01 00 FF 
0eb18     6B 14 06 F6 | 	mov	arg02, ##@LR__5859
0eb1c     00 12 06 F6 | 	mov	arg01, #0
0eb20     00 16 06 F6 | 	mov	arg03, #0
0eb24     00 89 B1 FD | 	call	#__system___basic_print_string
0eb28     45 00 00 FF 
0eb2c     50 E5 05 F1 | 	add	objptr, ##35664
0eb30     F2 14 02 FB | 	rdlong	arg02, objptr
0eb34     45 00 00 FF 
0eb38     50 E5 85 F1 | 	sub	objptr, ##35664
0eb3c     00 12 06 F6 | 	mov	arg01, #0
0eb40     00 16 06 F6 | 	mov	arg03, #0
0eb44     E0 88 B1 FD | 	call	#__system___basic_print_string
0eb48     00 12 06 F6 | 	mov	arg01, #0
0eb4c     0A 14 06 F6 | 	mov	arg02, #10
0eb50     00 16 06 F6 | 	mov	arg03, #0
0eb54     78 88 B1 FD | 	call	#__system___basic_print_char
0eb58     00 12 06 F6 | 	mov	arg01, #0
0eb5c     FC D8 B1 FD | 	call	#__system___getiolock_0603
0eb60     FD 00 68 FC | 	wrlong	#0, result1
0eb64     4A 00 00 FF 
0eb68     94 E4 05 F1 | 	add	objptr, ##38036
0eb6c     F2 12 02 FB | 	rdlong	arg01, objptr
0eb70     4A 00 00 FF 
0eb74     94 E4 85 F1 | 	sub	objptr, ##38036
0eb78     44 82 B1 FD | 	call	#__system___chdir
0eb7c     14 00 90 FD | 	jmp	#LR__1228
0eb80                 | LR__1227
0eb80     4A 00 00 FF 
0eb84     94 E4 05 F1 | 	add	objptr, ##38036
0eb88     F2 2C 62 FC | 	wrlong	local04, objptr
0eb8c     4A 00 00 FF 
0eb90     94 E4 85 F1 | 	sub	objptr, ##38036
0eb94                 | LR__1228
0eb94                 | '   print "Current directory: ";currentdir$
0eb94     00 12 06 F6 | 	mov	arg01, #0
0eb98     C0 D8 B1 FD | 	call	#__system___getiolock_0603
0eb9c     FD 12 02 F6 | 	mov	arg01, result1
0eba0     90 7B B1 FD | 	call	#__system___lockmem
0eba4     B5 01 00 FF 
0eba8     6E 14 06 F6 | 	mov	arg02, ##@LR__5860
0ebac     00 12 06 F6 | 	mov	arg01, #0
0ebb0     00 16 06 F6 | 	mov	arg03, #0
0ebb4     70 88 B1 FD | 	call	#__system___basic_print_string
0ebb8     4A 00 00 FF 
0ebbc     94 E4 05 F1 | 	add	objptr, ##38036
0ebc0     F2 14 02 FB | 	rdlong	arg02, objptr
0ebc4     4A 00 00 FF 
0ebc8     94 E4 85 F1 | 	sub	objptr, ##38036
0ebcc     00 12 06 F6 | 	mov	arg01, #0
0ebd0     00 16 06 F6 | 	mov	arg03, #0
0ebd4     50 88 B1 FD | 	call	#__system___basic_print_string
0ebd8     00 12 06 F6 | 	mov	arg01, #0
0ebdc     0A 14 06 F6 | 	mov	arg02, #10
0ebe0     00 16 06 F6 | 	mov	arg03, #0
0ebe4     E8 87 B1 FD | 	call	#__system___basic_print_char
0ebe8     00 12 06 F6 | 	mov	arg01, #0
0ebec     6C D8 B1 FD | 	call	#__system___getiolock_0603
0ebf0     FD 00 68 FC | 	wrlong	#0, result1
0ebf4                 | LR__1229
0ebf4     A7 F0 03 F6 | 	mov	ptra, fp
0ebf8     B2 00 A0 FD | 	call	#popregs_
0ebfc                 | _do_cd_ret
0ebfc     2D 00 64 FD | 	ret
0ec00                 | 
0ec00                 | ' 
0ec00                 | ' '-------------------- changefreq
0ec00                 | ' 
0ec00                 | ' sub do_changefreq
0ec00                 | _do_changefreq
0ec00     04 4A 05 F6 | 	mov	COUNT_, #4
0ec04     A8 00 A0 FD | 	call	#pushregs_
0ec08     28 F0 07 F1 | 	add	ptra, #40
0ec0c     44 E9 BF FD | 	call	#_pop
0ec10     FF 14 02 F6 | 	mov	arg02, result3
0ec14     A7 FA 61 FC | 	wrlong	result1, fp
0ec18     04 4E 05 F1 | 	add	fp, #4
0ec1c     A7 FC 61 FC | 	wrlong	result2, fp
0ec20     04 4E 05 F1 | 	add	fp, #4
0ec24     A7 14 62 FC | 	wrlong	arg02, fp
0ec28     08 4E 85 F1 | 	sub	fp, #8
0ec2c     A7 12 02 F6 | 	mov	arg01, fp
0ec30     C0 EB BF FD | 	call	#_converttofloat
0ec34     24 4E 05 F1 | 	add	fp, #36
0ec38     A7 FA 61 FC | 	wrlong	result1, fp
0ec3c     24 4E 85 F1 | 	sub	fp, #36
0ec40     FD 14 02 F6 | 	mov	arg02, result1
0ec44     FC 16 20 FF 
0ec48     54 12 06 F6 | 	mov	arg01, ##1076754516
0ec4c     2C B9 B1 FD | 	call	#__system____builtin_logbase
0ec50     FD 26 02 F6 | 	mov	local01, result1
0ec54     1E 14 C6 F9 | 	decod	arg02, #30
0ec58     FC 16 20 FF 
0ec5c     54 12 06 F6 | 	mov	arg01, ##1076754516
0ec60     18 B9 B1 FD | 	call	#__system____builtin_logbase
0ec64     FD 14 02 F6 | 	mov	arg02, result1
0ec68     13 13 02 F6 | 	mov	arg01, local01
0ec6c     40 AB B1 FD | 	call	#__system___float_div
0ec70     FD 12 02 F6 | 	mov	arg01, result1
0ec74     00 14 06 F6 | 	mov	arg02, #0
0ec78     F8 AD B1 FD | 	call	#__system___float_tointeger
0ec7c     10 4E 05 F1 | 	add	fp, #16
0ec80     A7 FA 61 FC | 	wrlong	result1, fp
0ec84     1E 26 C6 F9 | 	decod	local01, #30
0ec88     FD 12 02 F6 | 	mov	arg01, result1
0ec8c     10 4E 85 F1 | 	sub	fp, #16
0ec90     05 12 06 F1 | 	add	arg01, #5
0ec94     09 13 52 F6 | 	abs	arg01, arg01 wc
0ec98     1F 28 C6 C9 |  if_b	decod	local02, #31
0ec9c     00 28 06 36 |  if_ae	mov	local02, #0
0eca0     04 A5 B1 FD | 	call	#__system___float_fromuns
0eca4     14 FB 61 F5 | 	xor	result1, local02
0eca8     FD 14 02 F6 | 	mov	arg02, result1
0ecac     13 13 02 F6 | 	mov	arg01, local01
0ecb0     00 B8 B1 FD | 	call	#__system____builtin_powf
0ecb4     FD 12 02 F6 | 	mov	arg01, result1
0ecb8     01 14 06 F6 | 	mov	arg02, #1
0ecbc     B4 AD B1 FD | 	call	#__system___float_tointeger
0ecc0     14 4E 05 F1 | 	add	fp, #20
0ecc4     A7 FA 61 FC | 	wrlong	result1, fp
0ecc8                 | ' skip=round(2^(lfreq+5))
0ecc8                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ecc8     14 4E 85 F1 | 	sub	fp, #20
0eccc     40 00 00 FF 
0ecd0     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ecd4     30 00 90 CD |  if_b	jmp	#LR__1230
0ecd8     14 4E 05 F1 | 	add	fp, #20
0ecdc     A7 26 02 FB | 	rdlong	local01, fp
0ece0     13 27 52 F6 | 	abs	local01, local01 wc
0ece4     0F 26 46 F0 | 	shr	local01, #15
0ece8     13 27 82 F6 | 	negc	local01, local01
0ecec     04 4E 05 F1 | 	add	fp, #4
0ecf0     A7 26 62 FC | 	wrlong	local01, fp
0ecf4     04 4E 85 F1 | 	sub	fp, #4
0ecf8     40 00 80 FF 
0ecfc     A7 00 68 FC | 	wrlong	##32768, fp
0ed00     14 4E 85 F1 | 	sub	fp, #20
0ed04     0C 00 90 FD | 	jmp	#LR__1231
0ed08                 | LR__1230
0ed08     18 4E 05 F1 | 	add	fp, #24
0ed0c     A7 02 68 FC | 	wrlong	#1, fp
0ed10     18 4E 85 F1 | 	sub	fp, #24
0ed14                 | LR__1231
0ed14     24 4E 05 F1 | 	add	fp, #36
0ed18     A7 14 02 FB | 	rdlong	arg02, fp
0ed1c     24 4E 85 F1 | 	sub	fp, #36
0ed20     3E 2C 25 FF 
0ed24     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ed28     84 AA B1 FD | 	call	#__system___float_div
0ed2c     FD 26 02 F6 | 	mov	local01, result1
0ed30     18 4E 05 F1 | 	add	fp, #24
0ed34     A7 12 02 FB | 	rdlong	arg01, fp
0ed38     18 4E 85 F1 | 	sub	fp, #24
0ed3c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed40     1F 28 C6 C9 |  if_b	decod	local02, #31
0ed44     00 28 06 36 |  if_ae	mov	local02, #0
0ed48     5C A4 B1 FD | 	call	#__system___float_fromuns
0ed4c     14 FB 61 F5 | 	xor	result1, local02
0ed50     FD 2A 02 F6 | 	mov	local03, result1
0ed54     1E 2C C6 F9 | 	decod	local04, #30
0ed58     0D 12 06 F6 | 	mov	arg01, #13
0ed5c     10 4E 05 F1 | 	add	fp, #16
0ed60     A7 14 02 FB | 	rdlong	arg02, fp
0ed64     10 4E 85 F1 | 	sub	fp, #16
0ed68     0A 13 82 F1 | 	sub	arg01, arg02
0ed6c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed70     1F 28 C6 C9 |  if_b	decod	local02, #31
0ed74     00 28 06 36 |  if_ae	mov	local02, #0
0ed78     2C A4 B1 FD | 	call	#__system___float_fromuns
0ed7c     14 FB 61 F5 | 	xor	result1, local02
0ed80     FD 14 02 F6 | 	mov	arg02, result1
0ed84     16 13 02 F6 | 	mov	arg01, local04
0ed88     28 B7 B1 FD | 	call	#__system____builtin_powf
0ed8c     FD 14 02 F6 | 	mov	arg02, result1
0ed90     15 13 02 F6 | 	mov	arg01, local03
0ed94     14 A8 B1 FD | 	call	#__system___float_mul
0ed98     FD 14 02 F6 | 	mov	arg02, result1
0ed9c     13 13 02 F6 | 	mov	arg01, local01
0eda0     0C AA B1 FD | 	call	#__system___float_div
0eda4     FD 12 02 F6 | 	mov	arg01, result1
0eda8     01 14 06 F6 | 	mov	arg02, #1
0edac     C4 AC B1 FD | 	call	#__system___float_tointeger
0edb0     FD 26 02 F6 | 	mov	local01, result1
0edb4     1C 4E 05 F1 | 	add	fp, #28
0edb8     A7 26 62 FC | 	wrlong	local01, fp
0edbc     1C 4E 85 F1 | 	sub	fp, #28
0edc0     90 E7 BF FD | 	call	#_pop
0edc4     FF 2C 02 F6 | 	mov	local04, result3
0edc8     A7 FA 61 FC | 	wrlong	result1, fp
0edcc     04 4E 05 F1 | 	add	fp, #4
0edd0     A7 FC 61 FC | 	wrlong	result2, fp
0edd4     04 4E 05 F1 | 	add	fp, #4
0edd8     A7 2C 62 FC | 	wrlong	local04, fp
0eddc     08 4E 85 F1 | 	sub	fp, #8
0ede0     A7 12 02 F6 | 	mov	arg01, fp
0ede4     50 E9 BF FD | 	call	#_converttoint
0ede8     FD 2A 52 F6 | 	abs	local03, result1 wc
0edec     07 2A 06 F5 | 	and	local03, #7
0edf0     15 2B 82 F6 | 	negc	local03, local03
0edf4     0C 4E 05 F1 | 	add	fp, #12
0edf8     A7 2A 62 FC | 	wrlong	local03, fp
0edfc     08 4E 05 F1 | 	add	fp, #8
0ee00     A7 26 02 FB | 	rdlong	local01, fp
0ee04     10 26 66 F0 | 	shl	local01, #16
0ee08     08 4E 05 F1 | 	add	fp, #8
0ee0c     A7 2C 02 FB | 	rdlong	local04, fp
0ee10     16 27 02 F1 | 	add	local01, local04
0ee14     04 4E 05 F1 | 	add	fp, #4
0ee18     A7 26 62 FC | 	wrlong	local01, fp
0ee1c                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0ee1c     37 00 00 FF 
0ee20     10 E4 05 F1 | 	add	objptr, ##28176
0ee24     F2 12 02 FB | 	rdlong	arg01, objptr
0ee28     37 00 00 FF 
0ee2c     10 E4 85 F1 | 	sub	objptr, ##28176
0ee30     14 4E 85 F1 | 	sub	fp, #20
0ee34     A7 2C 02 FB | 	rdlong	local04, fp
0ee38     0C 4E 85 F1 | 	sub	fp, #12
0ee3c     06 2C 66 F0 | 	shl	local04, #6
0ee40     16 13 02 F1 | 	add	arg01, local04
0ee44     08 12 06 F1 | 	add	arg01, #8
0ee48     09 FB 01 FB | 	rdlong	result1, arg01
0ee4c     1B FA 2D F4 | 	testbn	result1, #27 wz
0ee50     3C 00 90 5D |  if_ne	jmp	#LR__1232
0ee54     37 00 00 FF 
0ee58     10 E4 05 F1 | 	add	objptr, ##28176
0ee5c     F2 12 02 FB | 	rdlong	arg01, objptr
0ee60     37 00 00 FF 
0ee64     10 E4 85 F1 | 	sub	objptr, ##28176
0ee68     0C 4E 05 F1 | 	add	fp, #12
0ee6c     A7 2C 02 FB | 	rdlong	local04, fp
0ee70     06 2C 66 F0 | 	shl	local04, #6
0ee74     16 13 02 F1 | 	add	arg01, local04
0ee78     18 12 06 F1 | 	add	arg01, #24
0ee7c     14 4E 05 F1 | 	add	fp, #20
0ee80     A7 14 02 FB | 	rdlong	arg02, fp
0ee84     20 4E 85 F1 | 	sub	fp, #32
0ee88     09 15 62 FC | 	wrlong	arg02, arg01
0ee8c     80 00 90 FD | 	jmp	#LR__1233
0ee90                 | LR__1232
0ee90     37 00 00 FF 
0ee94     10 E4 05 F1 | 	add	objptr, ##28176
0ee98     F2 26 02 FB | 	rdlong	local01, objptr
0ee9c     37 00 00 FF 
0eea0     10 E4 85 F1 | 	sub	objptr, ##28176
0eea4     0C 4E 05 F1 | 	add	fp, #12
0eea8     A7 2C 02 FB | 	rdlong	local04, fp
0eeac     06 2C 66 F0 | 	shl	local04, #6
0eeb0     16 27 02 F1 | 	add	local01, local04
0eeb4     18 26 06 F1 | 	add	local01, #24
0eeb8     18 4E 05 F1 | 	add	fp, #24
0eebc     A7 14 02 FB | 	rdlong	arg02, fp
0eec0     24 4E 85 F1 | 	sub	fp, #36
0eec4     3E 2C 25 FF 
0eec8     3C 12 06 F6 | 	mov	arg01, ##1247312956
0eecc     E0 A8 B1 FD | 	call	#__system___float_div
0eed0     FD 12 02 F6 | 	mov	arg01, result1
0eed4     01 14 06 F6 | 	mov	arg02, #1
0eed8     98 AB B1 FD | 	call	#__system___float_tointeger
0eedc     13 FB 51 FC | 	wrword	result1, local01
0eee0     37 00 00 FF 
0eee4     10 E4 05 F1 | 	add	objptr, ##28176
0eee8     F2 12 02 FB | 	rdlong	arg01, objptr
0eeec     37 00 00 FF 
0eef0     10 E4 85 F1 | 	sub	objptr, ##28176
0eef4     0C 4E 05 F1 | 	add	fp, #12
0eef8     A7 2C 02 FB | 	rdlong	local04, fp
0eefc     0C 4E 85 F1 | 	sub	fp, #12
0ef00     06 2C 66 F0 | 	shl	local04, #6
0ef04     16 13 02 F1 | 	add	arg01, local04
0ef08     1A 12 06 F1 | 	add	arg01, #26
0ef0c     09 01 5A FC | 	wrword	#256, arg01
0ef10                 | LR__1233
0ef10     A7 F0 03 F6 | 	mov	ptra, fp
0ef14     B2 00 A0 FD | 	call	#popregs_
0ef18                 | _do_changefreq_ret
0ef18     2D 00 64 FD | 	ret
0ef1c                 | 
0ef1c                 | ' 
0ef1c                 | ' '-------------------- changepan
0ef1c                 | ' 
0ef1c                 | ' sub do_changepan
0ef1c                 | _do_changepan
0ef1c     01 4A 05 F6 | 	mov	COUNT_, #1
0ef20     A8 00 A0 FD | 	call	#pushregs_
0ef24     14 F0 07 F1 | 	add	ptra, #20
0ef28     28 E6 BF FD | 	call	#_pop
0ef2c     A7 FA 61 FC | 	wrlong	result1, fp
0ef30     04 4E 05 F1 | 	add	fp, #4
0ef34     A7 FC 61 FC | 	wrlong	result2, fp
0ef38     04 4E 05 F1 | 	add	fp, #4
0ef3c     A7 FE 61 FC | 	wrlong	result3, fp
0ef40     08 4E 85 F1 | 	sub	fp, #8
0ef44     00 00 23 FF 
0ef48     00 26 06 F6 | 	mov	local01, ##1174405120
0ef4c     A7 12 02 F6 | 	mov	arg01, fp
0ef50     A0 E8 BF FD | 	call	#_converttofloat
0ef54     FD 14 02 F6 | 	mov	arg02, result1
0ef58     13 13 02 F6 | 	mov	arg01, local01
0ef5c     4C A6 B1 FD | 	call	#__system___float_mul
0ef60     FD 12 02 F6 | 	mov	arg01, result1
0ef64     01 14 06 F6 | 	mov	arg02, #1
0ef68     08 AB B1 FD | 	call	#__system___float_tointeger
0ef6c     0D 26 C6 F9 | 	decod	local01, #13
0ef70     FD 26 02 F1 | 	add	local01, result1
0ef74     10 4E 05 F1 | 	add	fp, #16
0ef78     A7 26 62 FC | 	wrlong	local01, fp
0ef7c                 | ' 
0ef7c                 | ' t1=pop()
0ef7c                 | ' pan=8192+round(8192*converttofloat(t1)) 
0ef7c                 | ' if pan<0 then pan=0
0ef7c     10 4E 85 F1 | 	sub	fp, #16
0ef80     00 26 56 F2 | 	cmps	local01, #0 wc
0ef84     10 4E 05 C1 |  if_b	add	fp, #16
0ef88     A7 00 68 CC |  if_b	wrlong	#0, fp
0ef8c     10 4E 85 C1 |  if_b	sub	fp, #16
0ef90                 | ' if pan>16384 then pan=16384
0ef90     10 4E 05 F1 | 	add	fp, #16
0ef94     A7 26 02 FB | 	rdlong	local01, fp
0ef98     10 4E 85 F1 | 	sub	fp, #16
0ef9c     20 00 00 FF 
0efa0     01 26 56 F2 | 	cmps	local01, ##16385 wc
0efa4     10 4E 05 31 |  if_ae	add	fp, #16
0efa8     20 00 80 3F 
0efac     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0efb0     10 4E 85 31 |  if_ae	sub	fp, #16
0efb4     9C E5 BF FD | 	call	#_pop
0efb8     FF 26 02 F6 | 	mov	local01, result3
0efbc     A7 FA 61 FC | 	wrlong	result1, fp
0efc0     04 4E 05 F1 | 	add	fp, #4
0efc4     A7 FC 61 FC | 	wrlong	result2, fp
0efc8     04 4E 05 F1 | 	add	fp, #4
0efcc     A7 26 62 FC | 	wrlong	local01, fp
0efd0     08 4E 85 F1 | 	sub	fp, #8
0efd4     A7 12 02 F6 | 	mov	arg01, fp
0efd8     5C E7 BF FD | 	call	#_converttoint
0efdc     FD 26 52 F6 | 	abs	local01, result1 wc
0efe0     07 26 06 F5 | 	and	local01, #7
0efe4     13 27 82 F6 | 	negc	local01, local01
0efe8     0C 4E 05 F1 | 	add	fp, #12
0efec     A7 26 62 FC | 	wrlong	local01, fp
0eff0     37 00 00 FF 
0eff4     10 E4 05 F1 | 	add	objptr, ##28176
0eff8     F2 12 02 FB | 	rdlong	arg01, objptr
0effc     37 00 00 FF 
0f000     10 E4 85 F1 | 	sub	objptr, ##28176
0f004     06 26 66 F0 | 	shl	local01, #6
0f008     13 13 02 F1 | 	add	arg01, local01
0f00c     16 12 06 F1 | 	add	arg01, #22
0f010     04 4E 05 F1 | 	add	fp, #4
0f014     A7 14 02 FB | 	rdlong	arg02, fp
0f018     10 4E 85 F1 | 	sub	fp, #16
0f01c     09 15 52 FC | 	wrword	arg02, arg01
0f020     A7 F0 03 F6 | 	mov	ptra, fp
0f024     B2 00 A0 FD | 	call	#popregs_
0f028                 | _do_changepan_ret
0f028     2D 00 64 FD | 	ret
0f02c                 | 
0f02c                 | ' 
0f02c                 | ' '-------------------- changevol
0f02c                 | ' 
0f02c                 | ' sub do_changevol
0f02c                 | _do_changevol
0f02c     00 4A 05 F6 | 	mov	COUNT_, #0
0f030     A8 00 A0 FD | 	call	#pushregs_
0f034     14 F0 07 F1 | 	add	ptra, #20
0f038     18 E5 BF FD | 	call	#_pop
0f03c     FF 14 02 F6 | 	mov	arg02, result3
0f040     A7 FA 61 FC | 	wrlong	result1, fp
0f044     04 4E 05 F1 | 	add	fp, #4
0f048     A7 FC 61 FC | 	wrlong	result2, fp
0f04c     04 4E 05 F1 | 	add	fp, #4
0f050     A7 14 62 FC | 	wrlong	arg02, fp
0f054     08 4E 85 F1 | 	sub	fp, #8
0f058     A7 12 02 F6 | 	mov	arg01, fp
0f05c     94 E7 BF FD | 	call	#_converttofloat
0f060     FD 12 02 F6 | 	mov	arg01, result1
0f064     00 3D 22 FF 
0f068     00 14 06 F6 | 	mov	arg02, ##1148846080
0f06c     3C A5 B1 FD | 	call	#__system___float_mul
0f070     FD 12 02 F6 | 	mov	arg01, result1
0f074     01 14 06 F6 | 	mov	arg02, #1
0f078     F8 A9 B1 FD | 	call	#__system___float_tointeger
0f07c     FD 14 52 F6 | 	abs	arg02, result1 wc
0f080     0D 14 46 F7 | 	zerox	arg02, #13
0f084     0A 15 82 F6 | 	negc	arg02, arg02
0f088     10 4E 05 F1 | 	add	fp, #16
0f08c     A7 14 62 FC | 	wrlong	arg02, fp
0f090     10 4E 85 F1 | 	sub	fp, #16
0f094     BC E4 BF FD | 	call	#_pop
0f098     FF 14 02 F6 | 	mov	arg02, result3
0f09c     A7 FA 61 FC | 	wrlong	result1, fp
0f0a0     04 4E 05 F1 | 	add	fp, #4
0f0a4     A7 FC 61 FC | 	wrlong	result2, fp
0f0a8     04 4E 05 F1 | 	add	fp, #4
0f0ac     A7 14 62 FC | 	wrlong	arg02, fp
0f0b0     08 4E 85 F1 | 	sub	fp, #8
0f0b4     A7 12 02 F6 | 	mov	arg01, fp
0f0b8     7C E6 BF FD | 	call	#_converttoint
0f0bc     FD 14 52 F6 | 	abs	arg02, result1 wc
0f0c0     07 14 06 F5 | 	and	arg02, #7
0f0c4     0A 15 82 F6 | 	negc	arg02, arg02
0f0c8     0C 4E 05 F1 | 	add	fp, #12
0f0cc     A7 14 62 FC | 	wrlong	arg02, fp
0f0d0     37 00 00 FF 
0f0d4     10 E4 05 F1 | 	add	objptr, ##28176
0f0d8     F2 12 02 FB | 	rdlong	arg01, objptr
0f0dc     37 00 00 FF 
0f0e0     10 E4 85 F1 | 	sub	objptr, ##28176
0f0e4     06 14 66 F0 | 	shl	arg02, #6
0f0e8     0A 13 02 F1 | 	add	arg01, arg02
0f0ec     14 12 06 F1 | 	add	arg01, #20
0f0f0     04 4E 05 F1 | 	add	fp, #4
0f0f4     A7 14 02 FB | 	rdlong	arg02, fp
0f0f8     10 4E 85 F1 | 	sub	fp, #16
0f0fc     09 15 52 FC | 	wrword	arg02, arg01
0f100     A7 F0 03 F6 | 	mov	ptra, fp
0f104     B2 00 A0 FD | 	call	#popregs_
0f108                 | _do_changevol_ret
0f108     2D 00 64 FD | 	ret
0f10c                 | 
0f10c                 | ' 
0f10c                 | ' '-------------------- changewav
0f10c                 | ' 
0f10c                 | ' sub do_changewav
0f10c                 | _do_changewav
0f10c     00 4A 05 F6 | 	mov	COUNT_, #0
0f110     A8 00 A0 FD | 	call	#pushregs_
0f114     14 F0 07 F1 | 	add	ptra, #20
0f118     38 E4 BF FD | 	call	#_pop
0f11c     FF 14 02 F6 | 	mov	arg02, result3
0f120     A7 FA 61 FC | 	wrlong	result1, fp
0f124     04 4E 05 F1 | 	add	fp, #4
0f128     A7 FC 61 FC | 	wrlong	result2, fp
0f12c     04 4E 05 F1 | 	add	fp, #4
0f130     A7 14 62 FC | 	wrlong	arg02, fp
0f134     08 4E 85 F1 | 	sub	fp, #8
0f138     A7 12 02 F6 | 	mov	arg01, fp
0f13c     F8 E5 BF FD | 	call	#_converttoint
0f140     10 4E 05 F1 | 	add	fp, #16
0f144     A7 FA 61 FC | 	wrlong	result1, fp
0f148                 | ' 
0f148                 | ' t1=pop()
0f148                 | ' wave=converttoint(t1)
0f148                 | ' if wave<0 then wave=0
0f148     FD 14 02 F6 | 	mov	arg02, result1
0f14c     10 4E 85 F1 | 	sub	fp, #16
0f150     00 14 56 F2 | 	cmps	arg02, #0 wc
0f154     10 4E 05 C1 |  if_b	add	fp, #16
0f158     A7 00 68 CC |  if_b	wrlong	#0, fp
0f15c     10 4E 85 C1 |  if_b	sub	fp, #16
0f160     F0 E3 BF FD | 	call	#_pop
0f164     FF 14 02 F6 | 	mov	arg02, result3
0f168     A7 FA 61 FC | 	wrlong	result1, fp
0f16c     04 4E 05 F1 | 	add	fp, #4
0f170     A7 FC 61 FC | 	wrlong	result2, fp
0f174     04 4E 05 F1 | 	add	fp, #4
0f178     A7 14 62 FC | 	wrlong	arg02, fp
0f17c     08 4E 85 F1 | 	sub	fp, #8
0f180     A7 12 02 F6 | 	mov	arg01, fp
0f184     B0 E5 BF FD | 	call	#_converttoint
0f188     FD 14 52 F6 | 	abs	arg02, result1 wc
0f18c     07 14 06 F5 | 	and	arg02, #7
0f190     0A 15 82 F6 | 	negc	arg02, arg02
0f194     0C 4E 05 F1 | 	add	fp, #12
0f198     A7 14 62 FC | 	wrlong	arg02, fp
0f19c                 | ' if wave <32 then 
0f19c     04 4E 05 F1 | 	add	fp, #4
0f1a0     A7 14 02 FB | 	rdlong	arg02, fp
0f1a4     10 4E 85 F1 | 	sub	fp, #16
0f1a8     20 14 56 F2 | 	cmps	arg02, #32 wc
0f1ac     48 00 90 3D |  if_ae	jmp	#LR__1240
0f1b0     37 00 00 FF 
0f1b4     10 E4 05 F1 | 	add	objptr, ##28176
0f1b8     F2 12 02 FB | 	rdlong	arg01, objptr
0f1bc     37 00 00 FF 
0f1c0     10 E4 85 F1 | 	sub	objptr, ##28176
0f1c4     0C 4E 05 F1 | 	add	fp, #12
0f1c8     A7 14 02 FB | 	rdlong	arg02, fp
0f1cc     06 14 66 F0 | 	shl	arg02, #6
0f1d0     0A 13 02 F1 | 	add	arg01, arg02
0f1d4     08 12 06 F1 | 	add	arg01, #8
0f1d8     04 4E 05 F1 | 	add	fp, #4
0f1dc     A7 14 02 FB | 	rdlong	arg02, fp
0f1e0     10 4E 85 F1 | 	sub	fp, #16
0f1e4     0B 14 66 F0 | 	shl	arg02, #11
0f1e8     00 00 40 FF 
0f1ec     00 14 06 F1 | 	add	arg02, ##-2147483648
0f1f0     09 15 62 FC | 	wrlong	arg02, arg01
0f1f4     34 00 90 FD | 	jmp	#LR__1241
0f1f8                 | LR__1240
0f1f8     37 00 00 FF 
0f1fc     10 E4 05 F1 | 	add	objptr, ##28176
0f200     F2 12 02 FB | 	rdlong	arg01, objptr
0f204     37 00 00 FF 
0f208     10 E4 85 F1 | 	sub	objptr, ##28176
0f20c     0C 4E 05 F1 | 	add	fp, #12
0f210     A7 14 02 FB | 	rdlong	arg02, fp
0f214     0C 4E 85 F1 | 	sub	fp, #12
0f218     06 14 66 F0 | 	shl	arg02, #6
0f21c     0A 13 02 F1 | 	add	arg01, arg02
0f220     08 12 06 F1 | 	add	arg01, #8
0f224     00 00 C4 FF 
0f228     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f22c                 | LR__1241
0f22c     A7 F0 03 F6 | 	mov	ptra, fp
0f230     B2 00 A0 FD | 	call	#popregs_
0f234                 | _do_changewav_ret
0f234     2D 00 64 FD | 	ret
0f238                 | 
0f238                 | ' 
0f238                 | ' '-------------------- chr$
0f238                 | ' 
0f238                 | ' sub do_chr
0f238                 | _do_chr
0f238     01 4A 05 F6 | 	mov	COUNT_, #1
0f23c     A8 00 A0 FD | 	call	#pushregs_
0f240     14 F0 07 F1 | 	add	ptra, #20
0f244     4A 00 00 FF 
0f248     80 E4 05 F1 | 	add	objptr, ##38016
0f24c     F2 26 02 FB | 	rdlong	local01, objptr
0f250     13 17 02 F6 | 	mov	arg03, local01
0f254     01 16 66 F0 | 	shl	arg03, #1
0f258     13 17 02 F1 | 	add	arg03, local01
0f25c     02 16 66 F0 | 	shl	arg03, #2
0f260     03 00 00 FF 
0f264     04 E4 85 F1 | 	sub	objptr, ##1540
0f268     F2 16 02 F1 | 	add	arg03, objptr
0f26c     0B 17 02 FB | 	rdlong	arg03, arg03
0f270     0C 4E 05 F1 | 	add	fp, #12
0f274     A7 16 62 FC | 	wrlong	arg03, fp
0f278                 | ' 
0f278                 | ' numpar=compiledline(lineptr_e).result.uresult
0f278                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f278     0C 4E 85 F1 | 	sub	fp, #12
0f27c     02 16 16 F2 | 	cmp	arg03, #2 wc
0f280     47 00 00 FF 
0f284     7C E4 85 F1 | 	sub	objptr, ##36476
0f288     0C 4E 05 C1 |  if_b	add	fp, #12
0f28c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f290     0C 4E 85 C1 |  if_b	sub	fp, #12
0f294     40 00 90 4D |  if_c_and_nz	jmp	#LR__1250
0f298     00 12 06 F6 | 	mov	arg01, #0
0f29c     BC D1 B1 FD | 	call	#__system___getiolock_0603
0f2a0     FD 12 02 F6 | 	mov	arg01, result1
0f2a4     8C 74 B1 FD | 	call	#__system___lockmem
0f2a8     B5 01 00 FF 
0f2ac     82 14 06 F6 | 	mov	arg02, ##@LR__5861
0f2b0     00 12 06 F6 | 	mov	arg01, #0
0f2b4     00 16 06 F6 | 	mov	arg03, #0
0f2b8     6C 81 B1 FD | 	call	#__system___basic_print_string
0f2bc     00 12 06 F6 | 	mov	arg01, #0
0f2c0     98 D1 B1 FD | 	call	#__system___getiolock_0603
0f2c4     FD 00 68 FC | 	wrlong	#0, result1
0f2c8     27 12 06 F6 | 	mov	arg01, #39
0f2cc     00 14 06 F6 | 	mov	arg02, #0
0f2d0     74 3A B1 FD | 	call	#_printerror
0f2d4     54 00 90 FD | 	jmp	#LR__1251
0f2d8                 | LR__1250
0f2d8     78 E2 BF FD | 	call	#_pop
0f2dc     FF 26 02 F6 | 	mov	local01, result3
0f2e0     A7 FA 61 FC | 	wrlong	result1, fp
0f2e4     04 4E 05 F1 | 	add	fp, #4
0f2e8     A7 FC 61 FC | 	wrlong	result2, fp
0f2ec     04 4E 05 F1 | 	add	fp, #4
0f2f0     A7 26 62 FC | 	wrlong	local01, fp
0f2f4     08 4E 85 F1 | 	sub	fp, #8
0f2f8     A7 12 02 F6 | 	mov	arg01, fp
0f2fc     38 E4 BF FD | 	call	#_converttoint
0f300     10 4E 05 F1 | 	add	fp, #16
0f304     A7 FA 61 FC | 	wrlong	result1, fp
0f308     FD 12 02 F6 | 	mov	arg01, result1
0f30c     10 4E 85 F1 | 	sub	fp, #16
0f310     60 96 B1 FD | 	call	#__system__Chr_S
0f314     A7 FA 61 FC | 	wrlong	result1, fp
0f318     08 4E 05 F1 | 	add	fp, #8
0f31c     A7 3E 68 FC | 	wrlong	#31, fp
0f320     08 4E 85 F1 | 	sub	fp, #8
0f324     A7 12 02 F6 | 	mov	arg01, fp
0f328     C0 E2 BF FD | 	call	#_push
0f32c                 | LR__1251
0f32c     A7 F0 03 F6 | 	mov	ptra, fp
0f330     B2 00 A0 FD | 	call	#popregs_
0f334                 | _do_chr_ret
0f334     2D 00 64 FD | 	ret
0f338                 | 
0f338                 | ' 
0f338                 | ' '-------------------- circle
0f338                 | ' 
0f338                 | ' sub do_circle
0f338                 | _do_circle
0f338     02 4A 05 F6 | 	mov	COUNT_, #2
0f33c     A8 00 A0 FD | 	call	#pushregs_
0f340     24 F0 07 F1 | 	add	ptra, #36
0f344     0C E2 BF FD | 	call	#_pop
0f348     FD 18 02 F6 | 	mov	arg04, result1
0f34c     FE 16 02 F6 | 	mov	arg03, result2
0f350     FF 14 02 F6 | 	mov	arg02, result3
0f354     18 4E 05 F1 | 	add	fp, #24
0f358     A7 18 62 FC | 	wrlong	arg04, fp
0f35c     04 4E 05 F1 | 	add	fp, #4
0f360     A7 16 62 FC | 	wrlong	arg03, fp
0f364     04 4E 05 F1 | 	add	fp, #4
0f368     A7 14 62 FC | 	wrlong	arg02, fp
0f36c     20 4E 85 F1 | 	sub	fp, #32
0f370     E0 E1 BF FD | 	call	#_pop
0f374     FD 18 02 F6 | 	mov	arg04, result1
0f378     FE 16 02 F6 | 	mov	arg03, result2
0f37c     FF 26 02 F6 | 	mov	local01, result3
0f380     0C 4E 05 F1 | 	add	fp, #12
0f384     A7 18 62 FC | 	wrlong	arg04, fp
0f388     04 4E 05 F1 | 	add	fp, #4
0f38c     A7 16 62 FC | 	wrlong	arg03, fp
0f390     04 4E 05 F1 | 	add	fp, #4
0f394     A7 26 62 FC | 	wrlong	local01, fp
0f398     14 4E 85 F1 | 	sub	fp, #20
0f39c     B4 E1 BF FD | 	call	#_pop
0f3a0     A7 FA 61 FC | 	wrlong	result1, fp
0f3a4     04 4E 05 F1 | 	add	fp, #4
0f3a8     A7 FC 61 FC | 	wrlong	result2, fp
0f3ac     04 4E 05 F1 | 	add	fp, #4
0f3b0     A7 FE 61 FC | 	wrlong	result3, fp
0f3b4                 | ' 
0f3b4                 | ' t3=pop()
0f3b4                 | ' t2=pop()
0f3b4                 | ' t1=pop()
0f3b4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f3b4     FF 18 02 F6 | 	mov	arg04, result3
0f3b8     08 4E 85 F1 | 	sub	fp, #8
0f3bc     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f3c0     08 4E 05 51 |  if_ne	add	fp, #8
0f3c4     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f3c8     08 4E 85 51 |  if_ne	sub	fp, #8
0f3cc     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f3d0     7C 00 90 5D |  if_ne	jmp	#LR__1260
0f3d4     14 4E 05 F1 | 	add	fp, #20
0f3d8     A7 26 02 FB | 	rdlong	local01, fp
0f3dc     14 4E 85 F1 | 	sub	fp, #20
0f3e0     1C 26 0E F2 | 	cmp	local01, #28 wz
0f3e4     14 4E 05 51 |  if_ne	add	fp, #20
0f3e8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f3ec     14 4E 85 51 |  if_ne	sub	fp, #20
0f3f0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f3f4     58 00 90 5D |  if_ne	jmp	#LR__1260
0f3f8     20 4E 05 F1 | 	add	fp, #32
0f3fc     A7 26 02 FB | 	rdlong	local01, fp
0f400     20 4E 85 F1 | 	sub	fp, #32
0f404     1C 26 0E F2 | 	cmp	local01, #28 wz
0f408     20 4E 05 51 |  if_ne	add	fp, #32
0f40c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f410     20 4E 85 51 |  if_ne	sub	fp, #32
0f414     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f418     34 00 90 5D |  if_ne	jmp	#LR__1260
0f41c     A7 12 02 FB | 	rdlong	arg01, fp
0f420     0C 4E 05 F1 | 	add	fp, #12
0f424     A7 14 02 FB | 	rdlong	arg02, fp
0f428     0C 4E 05 F1 | 	add	fp, #12
0f42c     A7 16 02 FB | 	rdlong	arg03, fp
0f430     18 4E 85 F1 | 	sub	fp, #24
0f434     37 00 00 FF 
0f438     28 E4 05 F1 | 	add	objptr, ##28200
0f43c     F2 18 02 FB | 	rdlong	arg04, objptr
0f440     37 00 00 FF 
0f444     28 E4 85 F1 | 	sub	objptr, ##28200
0f448     D0 51 B1 FD | 	call	#_hg010b_spin2_circle
0f44c                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f44c     54 00 90 FD | 	jmp	#LR__1261
0f450                 | LR__1260
0f450     A7 12 02 F6 | 	mov	arg01, fp
0f454     E0 E2 BF FD | 	call	#_converttoint
0f458     FD 26 02 F6 | 	mov	local01, result1
0f45c     0C 4E 05 F1 | 	add	fp, #12
0f460     A7 12 02 F6 | 	mov	arg01, fp
0f464     0C 4E 85 F1 | 	sub	fp, #12
0f468     CC E2 BF FD | 	call	#_converttoint
0f46c     FD 28 02 F6 | 	mov	local02, result1
0f470     18 4E 05 F1 | 	add	fp, #24
0f474     A7 12 02 F6 | 	mov	arg01, fp
0f478     18 4E 85 F1 | 	sub	fp, #24
0f47c     B8 E2 BF FD | 	call	#_converttoint
0f480     FD 16 02 F6 | 	mov	arg03, result1
0f484     37 00 00 FF 
0f488     28 E4 05 F1 | 	add	objptr, ##28200
0f48c     F2 18 02 FB | 	rdlong	arg04, objptr
0f490     37 00 00 FF 
0f494     28 E4 85 F1 | 	sub	objptr, ##28200
0f498     13 13 02 F6 | 	mov	arg01, local01
0f49c     14 15 02 F6 | 	mov	arg02, local02
0f4a0     78 51 B1 FD | 	call	#_hg010b_spin2_circle
0f4a4                 | LR__1261
0f4a4     A7 F0 03 F6 | 	mov	ptra, fp
0f4a8     B2 00 A0 FD | 	call	#popregs_
0f4ac                 | _do_circle_ret
0f4ac     2D 00 64 FD | 	ret
0f4b0                 | 
0f4b0                 | ' 
0f4b0                 | ' '-------------------- click
0f4b0                 | ' 
0f4b0                 | ' sub do_click
0f4b0                 | _do_click
0f4b0     A0 E0 BF FD | 	call	#_pop
0f4b4     00 FA 4D F2 | 	cmps	result1, #0 wz
0f4b8                 | ' 
0f4b8                 | ' t1=pop()
0f4b8                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f4b8     50 00 00 AF 
0f4bc     3C E5 05 A1 |  if_e	add	objptr, ##41276
0f4c0     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f4c4     50 00 00 FF 
0f4c8     3C E5 C5 F3 | 	sumz	objptr, ##41276
0f4cc     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f4d0     50 00 00 5F 
0f4d4     3C E5 85 51 |  if_ne	sub	objptr, ##41276
0f4d8                 | _do_click_ret
0f4d8     2D 00 64 FD | 	ret
0f4dc                 | 
0f4dc                 | ' 
0f4dc                 | ' '-------------------- close
0f4dc                 | ' 
0f4dc                 | ' sub do_close
0f4dc                 | _do_close
0f4dc     03 4A 05 F6 | 	mov	COUNT_, #3
0f4e0     A8 00 A0 FD | 	call	#pushregs_
0f4e4     6C E0 BF FD | 	call	#_pop
0f4e8     FD 26 02 F6 | 	mov	local01, result1
0f4ec     FF 16 02 F6 | 	mov	arg03, result3
0f4f0     FE 28 02 F6 | 	mov	local02, result2
0f4f4     0B 2B 02 F6 | 	mov	local03, arg03
0f4f8                 | ' 
0f4f8                 | ' numpar=compiledline(lineptr_e).result.uresult
0f4f8                 | ' t1=pop()
0f4f8                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f4f8     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f4fc     44 00 90 AD |  if_e	jmp	#LR__1270
0f500     00 12 06 F6 | 	mov	arg01, #0
0f504     54 CF B1 FD | 	call	#__system___getiolock_0603
0f508     FD 12 02 F6 | 	mov	arg01, result1
0f50c     24 72 B1 FD | 	call	#__system___lockmem
0f510     B5 01 00 FF 
0f514     89 14 06 F6 | 	mov	arg02, ##@LR__5862
0f518     00 12 06 F6 | 	mov	arg01, #0
0f51c     00 16 06 F6 | 	mov	arg03, #0
0f520     04 7F B1 FD | 	call	#__system___basic_print_string
0f524     00 12 06 F6 | 	mov	arg01, #0
0f528     0A 14 06 F6 | 	mov	arg02, #10
0f52c     00 16 06 F6 | 	mov	arg03, #0
0f530     9C 7E B1 FD | 	call	#__system___basic_print_char
0f534     00 12 06 F6 | 	mov	arg01, #0
0f538     20 CF B1 FD | 	call	#__system___getiolock_0603
0f53c     FD 00 68 FC | 	wrlong	#0, result1
0f540     08 00 90 FD | 	jmp	#LR__1271
0f544                 | LR__1270
0f544                 | ' channel  = t1.result.iresult
0f544                 | ' close #channel
0f544     13 13 02 F6 | 	mov	arg01, local01
0f548     40 C5 B1 FD | 	call	#__system__close
0f54c                 | LR__1271
0f54c     A7 F0 03 F6 | 	mov	ptra, fp
0f550     B2 00 A0 FD | 	call	#popregs_
0f554                 | _do_close_ret
0f554     2D 00 64 FD | 	ret
0f558                 | 
0f558                 | ' 
0f558                 | ' '-------------------- cls
0f558                 | ' 
0f558                 | ' sub do_cls
0f558                 | _do_cls
0f558     37 00 00 FF 
0f55c     3C E4 05 F1 | 	add	objptr, ##28220
0f560     F2 12 02 FB | 	rdlong	arg01, objptr
0f564     04 E4 85 F1 | 	sub	objptr, #4
0f568     F2 14 02 FB | 	rdlong	arg02, objptr
0f56c     37 00 00 FF 
0f570     38 E4 85 F1 | 	sub	objptr, ##28216
0f574     38 55 B1 FD | 	call	#_hg010b_spin2_cls
0f578     37 00 00 FF 
0f57c     3C E4 05 F1 | 	add	objptr, ##28220
0f580     F2 14 02 FB | 	rdlong	arg02, objptr
0f584     14 E4 85 F1 | 	sub	objptr, #20
0f588     F2 14 62 FC | 	wrlong	arg02, objptr
0f58c     37 00 00 FF 
0f590     28 E4 85 F1 | 	sub	objptr, ##28200
0f594                 | _do_cls_ret
0f594     2D 00 64 FD | 	ret
0f598                 | 
0f598                 | ' 
0f598                 | ' sub do_coginit
0f598                 | _do_coginit
0f598     00 4A 05 F6 | 	mov	COUNT_, #0
0f59c     A8 00 A0 FD | 	call	#pushregs_
0f5a0     1C F0 07 F1 | 	add	ptra, #28
0f5a4     4A 00 00 FF 
0f5a8     80 E4 05 F1 | 	add	objptr, ##38016
0f5ac     F2 16 02 FB | 	rdlong	arg03, objptr
0f5b0     0B 15 02 F6 | 	mov	arg02, arg03
0f5b4     01 14 66 F0 | 	shl	arg02, #1
0f5b8     0B 15 02 F1 | 	add	arg02, arg03
0f5bc     02 14 66 F0 | 	shl	arg02, #2
0f5c0     03 00 00 FF 
0f5c4     04 E4 85 F1 | 	sub	objptr, ##1540
0f5c8     F2 14 02 F1 | 	add	arg02, objptr
0f5cc     0A 17 02 FB | 	rdlong	arg03, arg02
0f5d0     A7 16 62 FC | 	wrlong	arg03, fp
0f5d4                 | ' ' coginit d,s
0f5d4                 | '  ' setq->ptra
0f5d4                 | ' 'params: cog,addr,ptra
0f5d4                 | ' numpar=compiledline(lineptr_e).result.uresult
0f5d4                 | ' if numpar<>3 then print "coginit: "; : printerror(39) : return
0f5d4     03 16 0E F2 | 	cmp	arg03, #3 wz
0f5d8     47 00 00 FF 
0f5dc     7C E4 85 F1 | 	sub	objptr, ##36476
0f5e0     40 00 90 AD |  if_e	jmp	#LR__1280
0f5e4     00 12 06 F6 | 	mov	arg01, #0
0f5e8     70 CE B1 FD | 	call	#__system___getiolock_0603
0f5ec     FD 12 02 F6 | 	mov	arg01, result1
0f5f0     40 71 B1 FD | 	call	#__system___lockmem
0f5f4     B5 01 00 FF 
0f5f8     9B 14 06 F6 | 	mov	arg02, ##@LR__5863
0f5fc     00 12 06 F6 | 	mov	arg01, #0
0f600     00 16 06 F6 | 	mov	arg03, #0
0f604     20 7E B1 FD | 	call	#__system___basic_print_string
0f608     00 12 06 F6 | 	mov	arg01, #0
0f60c     4C CE B1 FD | 	call	#__system___getiolock_0603
0f610     FD 00 68 FC | 	wrlong	#0, result1
0f614     27 12 06 F6 | 	mov	arg01, #39
0f618     00 14 06 F6 | 	mov	arg02, #0
0f61c     28 37 B1 FD | 	call	#_printerror
0f620     F8 00 90 FD | 	jmp	#LR__1281
0f624                 | LR__1280
0f624     2C DF BF FD | 	call	#_pop
0f628     FF 16 02 F6 | 	mov	arg03, result3
0f62c     10 4E 05 F1 | 	add	fp, #16
0f630     A7 FA 61 FC | 	wrlong	result1, fp
0f634     04 4E 05 F1 | 	add	fp, #4
0f638     A7 FC 61 FC | 	wrlong	result2, fp
0f63c     04 4E 05 F1 | 	add	fp, #4
0f640     A7 16 62 FC | 	wrlong	arg03, fp
0f644     08 4E 85 F1 | 	sub	fp, #8
0f648     A7 12 02 F6 | 	mov	arg01, fp
0f64c     10 4E 85 F1 | 	sub	fp, #16
0f650     E4 E0 BF FD | 	call	#_converttoint
0f654     FD 16 02 F6 | 	mov	arg03, result1
0f658     04 4E 05 F1 | 	add	fp, #4
0f65c     A7 16 62 FC | 	wrlong	arg03, fp
0f660     04 4E 85 F1 | 	sub	fp, #4
0f664     EC DE BF FD | 	call	#_pop
0f668     FF 16 02 F6 | 	mov	arg03, result3
0f66c     10 4E 05 F1 | 	add	fp, #16
0f670     A7 FA 61 FC | 	wrlong	result1, fp
0f674     04 4E 05 F1 | 	add	fp, #4
0f678     A7 FC 61 FC | 	wrlong	result2, fp
0f67c     04 4E 05 F1 | 	add	fp, #4
0f680     A7 16 62 FC | 	wrlong	arg03, fp
0f684     08 4E 85 F1 | 	sub	fp, #8
0f688     A7 12 02 F6 | 	mov	arg01, fp
0f68c     10 4E 85 F1 | 	sub	fp, #16
0f690     A4 E0 BF FD | 	call	#_converttoint
0f694     FD 16 02 F6 | 	mov	arg03, result1
0f698     08 4E 05 F1 | 	add	fp, #8
0f69c     A7 16 62 FC | 	wrlong	arg03, fp
0f6a0     08 4E 85 F1 | 	sub	fp, #8
0f6a4     AC DE BF FD | 	call	#_pop
0f6a8     FF 16 02 F6 | 	mov	arg03, result3
0f6ac     10 4E 05 F1 | 	add	fp, #16
0f6b0     A7 FA 61 FC | 	wrlong	result1, fp
0f6b4     04 4E 05 F1 | 	add	fp, #4
0f6b8     A7 FC 61 FC | 	wrlong	result2, fp
0f6bc     04 4E 05 F1 | 	add	fp, #4
0f6c0     A7 16 62 FC | 	wrlong	arg03, fp
0f6c4     08 4E 85 F1 | 	sub	fp, #8
0f6c8     A7 12 02 F6 | 	mov	arg01, fp
0f6cc     10 4E 85 F1 | 	sub	fp, #16
0f6d0     64 E0 BF FD | 	call	#_converttoint
0f6d4     0C 4E 05 F1 | 	add	fp, #12
0f6d8     A7 FA 61 FC | 	wrlong	result1, fp
0f6dc     04 4E 85 F1 | 	sub	fp, #4
0f6e0     A7 14 02 FB | 	rdlong	arg02, fp
0f6e4     04 4E 85 F1 | 	sub	fp, #4
0f6e8     A7 16 02 FB | 	rdlong	arg03, fp
0f6ec                 | ' 
0f6ec                 | '  asm
0f6ec     28 16 62 FD | 	setq	arg03
0f6f0     0A FB F1 FC | 	coginit	result1, arg02 wc
0f6f4                 | '  
0f6f4                 | ' return cog 
0f6f4     08 4E 05 F1 | 	add	fp, #8
0f6f8     A7 FA 61 FC | 	wrlong	result1, fp
0f6fc     04 4E 05 F1 | 	add	fp, #4
0f700     A7 FA 61 FC | 	wrlong	result1, fp
0f704     08 4E 05 F1 | 	add	fp, #8
0f708     A7 38 68 FC | 	wrlong	#28, fp
0f70c     08 4E 85 F1 | 	sub	fp, #8
0f710     A7 12 02 F6 | 	mov	arg01, fp
0f714     10 4E 85 F1 | 	sub	fp, #16
0f718     D0 DE BF FD | 	call	#_push
0f71c                 | LR__1281
0f71c     A7 F0 03 F6 | 	mov	ptra, fp
0f720     B2 00 A0 FD | 	call	#popregs_
0f724                 | _do_coginit_ret
0f724     2D 00 64 FD | 	ret
0f728                 | 
0f728                 | ' 
0f728                 | ' '-------------------- color
0f728                 | ' 
0f728                 | ' sub do_color
0f728                 | _do_color
0f728     03 4A 05 F6 | 	mov	COUNT_, #3
0f72c     A8 00 A0 FD | 	call	#pushregs_
0f730     20 DE BF FD | 	call	#_pop
0f734     FD 26 02 F6 | 	mov	local01, result1
0f738     FE 28 02 F6 | 	mov	local02, result2
0f73c     FF 2A 02 F6 | 	mov	local03, result3
0f740     37 00 00 FF 
0f744     28 E4 05 F1 | 	add	objptr, ##28200
0f748     F2 26 62 FC | 	wrlong	local01, objptr
0f74c     37 00 00 FF 
0f750     28 E4 85 F1 | 	sub	objptr, ##28200
0f754     A7 F0 03 F6 | 	mov	ptra, fp
0f758     B2 00 A0 FD | 	call	#popregs_
0f75c                 | _do_color_ret
0f75c     2D 00 64 FD | 	ret
0f760                 | 
0f760                 | ' 
0f760                 | ' '-------------------- copy
0f760                 | ' 
0f760                 | ' sub do_copy
0f760                 | _do_copy
0f760     08 4A 05 F6 | 	mov	COUNT_, #8
0f764     A8 00 A0 FD | 	call	#pushregs_
0f768     E8 DD BF FD | 	call	#_pop
0f76c     FD 26 02 F6 | 	mov	local01, result1
0f770     FE 1A 02 F6 | 	mov	arg05, result2
0f774     FF 18 02 F6 | 	mov	arg04, result3
0f778     0D 29 02 F6 | 	mov	local02, arg05
0f77c     0C 2B 02 F6 | 	mov	local03, arg04
0f780     D0 DD BF FD | 	call	#_pop
0f784     FE 1A 02 F6 | 	mov	arg05, result2
0f788     FF 18 02 F6 | 	mov	arg04, result3
0f78c     FD 2C 02 F6 | 	mov	local04, result1
0f790     0D 2F 02 F6 | 	mov	local05, arg05
0f794     0C 31 02 F6 | 	mov	local06, arg04
0f798                 | ' 
0f798                 | ' t1=pop()
0f798                 | ' t2=pop()
0f798                 | ' if t2.result_type=result_string2 then 
0f798     2B 30 0E F2 | 	cmp	local06, #43 wz
0f79c     10 00 90 5D |  if_ne	jmp	#LR__1290
0f7a0     16 13 02 F6 | 	mov	arg01, local04
0f7a4     24 DF BF FD | 	call	#_convertstring
0f7a8     FD 32 02 F6 | 	mov	local07, result1
0f7ac     2C 00 90 FD | 	jmp	#LR__1292
0f7b0                 | LR__1290
0f7b0     1F 30 0E F2 | 	cmp	local06, #31 wz
0f7b4     16 33 02 A6 |  if_e	mov	local07, local04
0f7b8     20 00 90 AD |  if_e	jmp	#LR__1291
0f7bc     50 00 00 FF 
0f7c0     F0 E4 05 F1 | 	add	objptr, ##41200
0f7c4     F2 14 02 FB | 	rdlong	arg02, objptr
0f7c8     50 00 00 FF 
0f7cc     F0 E4 85 F1 | 	sub	objptr, ##41200
0f7d0     0F 12 06 F6 | 	mov	arg01, #15
0f7d4     70 35 B1 FD | 	call	#_printerror
0f7d8                 | '   printerror(15,runheader(0)) : return
0f7d8     50 03 90 FD | 	jmp	#LR__1299
0f7dc                 | LR__1291
0f7dc                 | LR__1292
0f7dc                 | ' if t1.result_type=result_string2 then 
0f7dc     2B 2A 0E F2 | 	cmp	local03, #43 wz
0f7e0     10 00 90 5D |  if_ne	jmp	#LR__1293
0f7e4     13 13 02 F6 | 	mov	arg01, local01
0f7e8     E0 DE BF FD | 	call	#_convertstring
0f7ec     FD 34 02 F6 | 	mov	local08, result1
0f7f0     2C 00 90 FD | 	jmp	#LR__1295
0f7f4                 | LR__1293
0f7f4     1F 2A 0E F2 | 	cmp	local03, #31 wz
0f7f8     13 35 02 A6 |  if_e	mov	local08, local01
0f7fc     20 00 90 AD |  if_e	jmp	#LR__1294
0f800     50 00 00 FF 
0f804     F0 E4 05 F1 | 	add	objptr, ##41200
0f808     F2 14 02 FB | 	rdlong	arg02, objptr
0f80c     50 00 00 FF 
0f810     F0 E4 85 F1 | 	sub	objptr, ##41200
0f814     0F 12 06 F6 | 	mov	arg01, #15
0f818     2C 35 B1 FD | 	call	#_printerror
0f81c                 | '   printerror(15,runheader(0)) : return
0f81c     0C 03 90 FD | 	jmp	#LR__1299
0f820                 | LR__1294
0f820                 | LR__1295
0f820                 | ' 
0f820                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0f820     09 12 06 F6 | 	mov	arg01, #9
0f824     19 15 02 F6 | 	mov	arg02, local07
0f828     00 16 06 F6 | 	mov	arg03, #0
0f82c     08 7B B1 FD | 	call	#__system___basic_open_string
0f830     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f834     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f838     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f83c     52 00 00 FF 
0f840     D8 E4 05 F1 | 	add	objptr, ##42200
0f844     F2 FA 61 FC | 	wrlong	result1, objptr
0f848     52 00 00 FF 
0f84c     D8 E4 85 F1 | 	sub	objptr, ##42200
0f850     0C 01 90 AD |  if_e	jmp	#LR__1296
0f854     00 12 06 F6 | 	mov	arg01, #0
0f858     00 CC B1 FD | 	call	#__system___getiolock_0603
0f85c     FD 12 02 F6 | 	mov	arg01, result1
0f860     D0 6E B1 FD | 	call	#__system___lockmem
0f864     B5 01 00 FF 
0f868     A5 14 06 F6 | 	mov	arg02, ##@LR__5864
0f86c     00 12 06 F6 | 	mov	arg01, #0
0f870     00 16 06 F6 | 	mov	arg03, #0
0f874     B0 7B B1 FD | 	call	#__system___basic_print_string
0f878     52 00 00 FF 
0f87c     D8 E4 05 F1 | 	add	objptr, ##42200
0f880     F2 14 02 FB | 	rdlong	arg02, objptr
0f884     52 00 00 FF 
0f888     D8 E4 85 F1 | 	sub	objptr, ##42200
0f88c     00 12 06 F6 | 	mov	arg01, #0
0f890     00 16 06 F6 | 	mov	arg03, #0
0f894     0A 18 06 F6 | 	mov	arg04, #10
0f898     D0 7B B1 FD | 	call	#__system___basic_print_integer
0f89c     B5 01 00 FF 
0f8a0     B5 14 06 F6 | 	mov	arg02, ##@LR__5865
0f8a4     00 12 06 F6 | 	mov	arg01, #0
0f8a8     00 16 06 F6 | 	mov	arg03, #0
0f8ac     78 7B B1 FD | 	call	#__system___basic_print_string
0f8b0     50 00 00 FF 
0f8b4     F0 E4 05 F1 | 	add	objptr, ##41200
0f8b8     F2 14 02 FB | 	rdlong	arg02, objptr
0f8bc     50 00 00 FF 
0f8c0     F0 E4 85 F1 | 	sub	objptr, ##41200
0f8c4     00 12 06 F6 | 	mov	arg01, #0
0f8c8     00 16 06 F6 | 	mov	arg03, #0
0f8cc     0A 18 06 F6 | 	mov	arg04, #10
0f8d0     D8 7B B1 FD | 	call	#__system___basic_print_unsigned
0f8d4     B5 01 00 FF 
0f8d8     BF 14 06 F6 | 	mov	arg02, ##@LR__5866
0f8dc     00 12 06 F6 | 	mov	arg01, #0
0f8e0     00 16 06 F6 | 	mov	arg03, #0
0f8e4     40 7B B1 FD | 	call	#__system___basic_print_string
0f8e8     00 34 06 F6 | 	mov	local08, #0
0f8ec     52 00 00 FF 
0f8f0     D8 E4 05 F1 | 	add	objptr, ##42200
0f8f4     F2 12 02 FB | 	rdlong	arg01, objptr
0f8f8     52 00 00 FF 
0f8fc     D8 E4 85 F1 | 	sub	objptr, ##42200
0f900     BC 97 B1 FD | 	call	#__system___strerror
0f904     FD 14 02 F6 | 	mov	arg02, result1
0f908     1A 13 02 F6 | 	mov	arg01, local08
0f90c     00 16 06 F6 | 	mov	arg03, #0
0f910     14 7B B1 FD | 	call	#__system___basic_print_string
0f914     B5 01 00 FF 
0f918     C2 14 06 F6 | 	mov	arg02, ##@LR__5867
0f91c     00 12 06 F6 | 	mov	arg01, #0
0f920     00 16 06 F6 | 	mov	arg03, #0
0f924     00 7B B1 FD | 	call	#__system___basic_print_string
0f928     00 12 06 F6 | 	mov	arg01, #0
0f92c     19 15 02 F6 | 	mov	arg02, local07
0f930     00 16 06 F6 | 	mov	arg03, #0
0f934     F0 7A B1 FD | 	call	#__system___basic_print_string
0f938     00 12 06 F6 | 	mov	arg01, #0
0f93c     0A 14 06 F6 | 	mov	arg02, #10
0f940     00 16 06 F6 | 	mov	arg03, #0
0f944     88 7A B1 FD | 	call	#__system___basic_print_char
0f948     00 12 06 F6 | 	mov	arg01, #0
0f94c     0C CB B1 FD | 	call	#__system___getiolock_0603
0f950     FD 00 68 FC | 	wrlong	#0, result1
0f954     09 12 06 F6 | 	mov	arg01, #9
0f958     30 C1 B1 FD | 	call	#__system__close
0f95c     CC 01 90 FD | 	jmp	#LR__1299
0f960                 | LR__1296
0f960                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0f960     08 12 06 F6 | 	mov	arg01, #8
0f964     1A 15 02 F6 | 	mov	arg02, local08
0f968     0D 16 06 F6 | 	mov	arg03, #13
0f96c     C8 79 B1 FD | 	call	#__system___basic_open_string
0f970     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f974     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f978     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f97c     52 00 00 FF 
0f980     D8 E4 05 F1 | 	add	objptr, ##42200
0f984     F2 FA 61 FC | 	wrlong	result1, objptr
0f988     52 00 00 FF 
0f98c     D8 E4 85 F1 | 	sub	objptr, ##42200
0f990     0C 01 90 AD |  if_e	jmp	#LR__1297
0f994     00 12 06 F6 | 	mov	arg01, #0
0f998     C0 CA B1 FD | 	call	#__system___getiolock_0603
0f99c     FD 12 02 F6 | 	mov	arg01, result1
0f9a0     90 6D B1 FD | 	call	#__system___lockmem
0f9a4     B5 01 00 FF 
0f9a8     D0 14 06 F6 | 	mov	arg02, ##@LR__5868
0f9ac     00 12 06 F6 | 	mov	arg01, #0
0f9b0     00 16 06 F6 | 	mov	arg03, #0
0f9b4     70 7A B1 FD | 	call	#__system___basic_print_string
0f9b8     52 00 00 FF 
0f9bc     D8 E4 05 F1 | 	add	objptr, ##42200
0f9c0     F2 14 02 FB | 	rdlong	arg02, objptr
0f9c4     52 00 00 FF 
0f9c8     D8 E4 85 F1 | 	sub	objptr, ##42200
0f9cc     00 12 06 F6 | 	mov	arg01, #0
0f9d0     00 16 06 F6 | 	mov	arg03, #0
0f9d4     0A 18 06 F6 | 	mov	arg04, #10
0f9d8     90 7A B1 FD | 	call	#__system___basic_print_integer
0f9dc     B5 01 00 FF 
0f9e0     E0 14 06 F6 | 	mov	arg02, ##@LR__5869
0f9e4     00 12 06 F6 | 	mov	arg01, #0
0f9e8     00 16 06 F6 | 	mov	arg03, #0
0f9ec     38 7A B1 FD | 	call	#__system___basic_print_string
0f9f0     50 00 00 FF 
0f9f4     F0 E4 05 F1 | 	add	objptr, ##41200
0f9f8     F2 14 02 FB | 	rdlong	arg02, objptr
0f9fc     50 00 00 FF 
0fa00     F0 E4 85 F1 | 	sub	objptr, ##41200
0fa04     00 12 06 F6 | 	mov	arg01, #0
0fa08     00 16 06 F6 | 	mov	arg03, #0
0fa0c     0A 18 06 F6 | 	mov	arg04, #10
0fa10     98 7A B1 FD | 	call	#__system___basic_print_unsigned
0fa14     B5 01 00 FF 
0fa18     EA 14 06 F6 | 	mov	arg02, ##@LR__5870
0fa1c     00 12 06 F6 | 	mov	arg01, #0
0fa20     00 16 06 F6 | 	mov	arg03, #0
0fa24     00 7A B1 FD | 	call	#__system___basic_print_string
0fa28     00 32 06 F6 | 	mov	local07, #0
0fa2c     52 00 00 FF 
0fa30     D8 E4 05 F1 | 	add	objptr, ##42200
0fa34     F2 12 02 FB | 	rdlong	arg01, objptr
0fa38     52 00 00 FF 
0fa3c     D8 E4 85 F1 | 	sub	objptr, ##42200
0fa40     7C 96 B1 FD | 	call	#__system___strerror
0fa44     FD 14 02 F6 | 	mov	arg02, result1
0fa48     19 13 02 F6 | 	mov	arg01, local07
0fa4c     00 16 06 F6 | 	mov	arg03, #0
0fa50     D4 79 B1 FD | 	call	#__system___basic_print_string
0fa54     B5 01 00 FF 
0fa58     ED 14 06 F6 | 	mov	arg02, ##@LR__5871
0fa5c     00 12 06 F6 | 	mov	arg01, #0
0fa60     00 16 06 F6 | 	mov	arg03, #0
0fa64     C0 79 B1 FD | 	call	#__system___basic_print_string
0fa68     00 12 06 F6 | 	mov	arg01, #0
0fa6c     1A 15 02 F6 | 	mov	arg02, local08
0fa70     00 16 06 F6 | 	mov	arg03, #0
0fa74     B0 79 B1 FD | 	call	#__system___basic_print_string
0fa78     00 12 06 F6 | 	mov	arg01, #0
0fa7c     0A 14 06 F6 | 	mov	arg02, #10
0fa80     00 16 06 F6 | 	mov	arg03, #0
0fa84     48 79 B1 FD | 	call	#__system___basic_print_char
0fa88     00 12 06 F6 | 	mov	arg01, #0
0fa8c     CC C9 B1 FD | 	call	#__system___getiolock_0603
0fa90     FD 00 68 FC | 	wrlong	#0, result1
0fa94     08 12 06 F6 | 	mov	arg01, #8
0fa98     F0 BF B1 FD | 	call	#__system__close
0fa9c     8C 00 90 FD | 	jmp	#LR__1299
0faa0                 | LR__1297
0faa0                 | ' 
0faa0                 | ' do
0faa0                 | LR__1298
0faa0                 | '   get #9,,block(0),1024,r
0faa0     4E 00 00 FF 
0faa4     B4 E4 05 F1 | 	add	objptr, ##40116
0faa8     F2 16 02 F6 | 	mov	arg03, objptr
0faac     4E 00 00 FF 
0fab0     B4 E4 85 F1 | 	sub	objptr, ##40116
0fab4     09 12 06 F6 | 	mov	arg01, #9
0fab8     00 14 06 F6 | 	mov	arg02, #0
0fabc     0A 18 C6 F9 | 	decod	arg04, #10
0fac0     01 1A 06 F6 | 	mov	arg05, #1
0fac4     DC 7A B1 FD | 	call	#__system___basic_get
0fac8     52 00 00 FF 
0facc     10 E5 05 F1 | 	add	objptr, ##42256
0fad0     F2 FA 61 FC | 	wrlong	result1, objptr
0fad4                 | '   put #8,,block(0),r
0fad4     04 00 00 FF 
0fad8     5C E4 85 F1 | 	sub	objptr, ##2140
0fadc     F2 16 02 F6 | 	mov	arg03, objptr
0fae0     FD 18 02 F6 | 	mov	arg04, result1
0fae4     4E 00 00 FF 
0fae8     B4 E4 85 F1 | 	sub	objptr, ##40116
0faec     08 12 06 F6 | 	mov	arg01, #8
0faf0     00 14 06 F6 | 	mov	arg02, #0
0faf4     01 1A 06 F6 | 	mov	arg05, #1
0faf8     3C 7A B1 FD | 	call	#__system___basic_put
0fafc     52 00 00 FF 
0fb00     10 E5 05 F1 | 	add	objptr, ##42256
0fb04     F2 34 02 FB | 	rdlong	local08, objptr
0fb08     52 00 00 FF 
0fb0c     10 E5 85 F1 | 	sub	objptr, ##42256
0fb10     02 00 00 FF 
0fb14     00 34 0E F2 | 	cmp	local08, ##1024 wz
0fb18     84 FF 9F AD |  if_e	jmp	#LR__1298
0fb1c                 | ' close #8
0fb1c     08 12 06 F6 | 	mov	arg01, #8
0fb20     68 BF B1 FD | 	call	#__system__close
0fb24                 | ' close #9
0fb24     09 12 06 F6 | 	mov	arg01, #9
0fb28     60 BF B1 FD | 	call	#__system__close
0fb2c                 | LR__1299
0fb2c     A7 F0 03 F6 | 	mov	ptra, fp
0fb30     B2 00 A0 FD | 	call	#popregs_
0fb34                 | _do_copy_ret
0fb34     2D 00 64 FD | 	ret
0fb38                 | 
0fb38                 | ' 
0fb38                 | ' '-------------------- cos
0fb38                 | ' 
0fb38                 | ' sub do_cos
0fb38                 | _do_cos
0fb38     01 4A 05 F6 | 	mov	COUNT_, #1
0fb3c     A8 00 A0 FD | 	call	#pushregs_
0fb40     10 F0 07 F1 | 	add	ptra, #16
0fb44     4A 00 00 FF 
0fb48     80 E4 05 F1 | 	add	objptr, ##38016
0fb4c     F2 26 02 FB | 	rdlong	local01, objptr
0fb50     13 17 02 F6 | 	mov	arg03, local01
0fb54     01 16 66 F0 | 	shl	arg03, #1
0fb58     13 17 02 F1 | 	add	arg03, local01
0fb5c     02 16 66 F0 | 	shl	arg03, #2
0fb60     03 00 00 FF 
0fb64     04 E4 85 F1 | 	sub	objptr, ##1540
0fb68     F2 16 02 F1 | 	add	arg03, objptr
0fb6c     0B 17 02 FB | 	rdlong	arg03, arg03
0fb70     0C 4E 05 F1 | 	add	fp, #12
0fb74     A7 16 62 FC | 	wrlong	arg03, fp
0fb78                 | ' 
0fb78                 | ' numpar=compiledline(lineptr_e).result.uresult
0fb78                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0fb78     0C 4E 85 F1 | 	sub	fp, #12
0fb7c     02 16 16 F2 | 	cmp	arg03, #2 wc
0fb80     47 00 00 FF 
0fb84     7C E4 85 F1 | 	sub	objptr, ##36476
0fb88     0C 4E 05 C1 |  if_b	add	fp, #12
0fb8c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0fb90     0C 4E 85 C1 |  if_b	sub	fp, #12
0fb94     40 00 90 4D |  if_c_and_nz	jmp	#LR__1300
0fb98     00 12 06 F6 | 	mov	arg01, #0
0fb9c     BC C8 B1 FD | 	call	#__system___getiolock_0603
0fba0     FD 12 02 F6 | 	mov	arg01, result1
0fba4     8C 6B B1 FD | 	call	#__system___lockmem
0fba8     B5 01 00 FF 
0fbac     FB 14 06 F6 | 	mov	arg02, ##@LR__5872
0fbb0     00 12 06 F6 | 	mov	arg01, #0
0fbb4     00 16 06 F6 | 	mov	arg03, #0
0fbb8     6C 78 B1 FD | 	call	#__system___basic_print_string
0fbbc     00 12 06 F6 | 	mov	arg01, #0
0fbc0     98 C8 B1 FD | 	call	#__system___getiolock_0603
0fbc4     FD 00 68 FC | 	wrlong	#0, result1
0fbc8     27 12 06 F6 | 	mov	arg01, #39
0fbcc     00 14 06 F6 | 	mov	arg02, #0
0fbd0     74 31 B1 FD | 	call	#_printerror
0fbd4     78 00 90 FD | 	jmp	#LR__1301
0fbd8                 | LR__1300
0fbd8     78 D9 BF FD | 	call	#_pop
0fbdc     A7 FA 61 FC | 	wrlong	result1, fp
0fbe0     04 4E 05 F1 | 	add	fp, #4
0fbe4     A7 FC 61 FC | 	wrlong	result2, fp
0fbe8     04 4E 05 F1 | 	add	fp, #4
0fbec     A7 FE 61 FC | 	wrlong	result3, fp
0fbf0     08 4E 85 F1 | 	sub	fp, #8
0fbf4     52 00 00 FF 
0fbf8     A8 E4 05 F1 | 	add	objptr, ##42152
0fbfc     F2 26 02 FB | 	rdlong	local01, objptr
0fc00     52 00 00 FF 
0fc04     A8 E4 85 F1 | 	sub	objptr, ##42152
0fc08     A7 12 02 F6 | 	mov	arg01, fp
0fc0c     E4 DB BF FD | 	call	#_converttofloat
0fc10     FD 14 02 F6 | 	mov	arg02, result1
0fc14     13 13 02 F6 | 	mov	arg01, local01
0fc18     90 99 B1 FD | 	call	#__system___float_mul
0fc1c     FD 14 02 F6 | 	mov	arg02, result1
0fc20     87 E4 1F FF 
0fc24     DB 13 06 F6 | 	mov	arg01, ##1070141403
0fc28     1F 14 E6 F4 | 	bitnot	arg02, #31
0fc2c     AC 95 B1 FD | 	call	#__system___float_add
0fc30     FD 12 02 F6 | 	mov	arg01, result1
0fc34     D4 A2 B1 FD | 	call	#__system____builtin_sinf
0fc38     A7 FA 61 FC | 	wrlong	result1, fp
0fc3c     08 4E 05 F1 | 	add	fp, #8
0fc40     A7 3C 68 FC | 	wrlong	#30, fp
0fc44     08 4E 85 F1 | 	sub	fp, #8
0fc48     A7 12 02 F6 | 	mov	arg01, fp
0fc4c     9C D9 BF FD | 	call	#_push
0fc50                 | LR__1301
0fc50     A7 F0 03 F6 | 	mov	ptra, fp
0fc54     B2 00 A0 FD | 	call	#popregs_
0fc58                 | _do_cos_ret
0fc58     2D 00 64 FD | 	ret
0fc5c                 | 
0fc5c                 | ' 
0fc5c                 | ' '-------------------- cursor
0fc5c                 | ' 
0fc5c                 | ' sub do_cursor
0fc5c                 | _do_cursor
0fc5c     F4 D8 BF FD | 	call	#_pop
0fc60     00 FA 4D F2 | 	cmps	result1, #0 wz
0fc64                 | ' t1=pop()
0fc64                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0fc64     14 00 90 5D |  if_ne	jmp	#LR__1310
0fc68     11 12 06 F6 | 	mov	arg01, #17
0fc6c     00 14 06 F6 | 	mov	arg02, #0
0fc70     00 16 06 F6 | 	mov	arg03, #0
0fc74     18 41 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fc78     10 00 90 FD | 	jmp	#LR__1311
0fc7c                 | LR__1310
0fc7c     11 12 06 F6 | 	mov	arg01, #17
0fc80     08 14 06 F6 | 	mov	arg02, #8
0fc84     10 16 06 F6 | 	mov	arg03, #16
0fc88     04 41 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fc8c                 | LR__1311
0fc8c                 | _do_cursor_ret
0fc8c     2D 00 64 FD | 	ret
0fc90                 | 
0fc90                 | ' 
0fc90                 | ' '-------------------- defenv
0fc90                 | ' 
0fc90                 | ' sub do_defenv
0fc90                 | _do_defenv
0fc90     08 4A 05 F6 | 	mov	COUNT_, #8
0fc94     A8 00 A0 FD | 	call	#pushregs_
0fc98     58 F0 07 F1 | 	add	ptra, #88
0fc9c     4A 00 00 FF 
0fca0     80 E4 05 F1 | 	add	objptr, ##38016
0fca4     F2 26 02 FB | 	rdlong	local01, objptr
0fca8     13 1B 02 F6 | 	mov	arg05, local01
0fcac     01 1A 66 F0 | 	shl	arg05, #1
0fcb0     13 1B 02 F1 | 	add	arg05, local01
0fcb4     02 1A 66 F0 | 	shl	arg05, #2
0fcb8     03 00 00 FF 
0fcbc     04 E4 85 F1 | 	sub	objptr, ##1540
0fcc0     F2 1A 02 F1 | 	add	arg05, objptr
0fcc4     0D 1B 02 FB | 	rdlong	arg05, arg05
0fcc8     10 4E 05 F1 | 	add	fp, #16
0fccc     A7 1A 62 FC | 	wrlong	arg05, fp
0fcd0                 | ' 
0fcd0                 | ' numpar=compiledline(lineptr_e).result.uresult
0fcd0                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0fcd0     10 4E 85 F1 | 	sub	fp, #16
0fcd4     02 1A 0E F2 | 	cmp	arg05, #2 wz
0fcd8     47 00 00 FF 
0fcdc     7C E4 85 F1 | 	sub	objptr, ##36476
0fce0     10 4E 05 51 |  if_ne	add	fp, #16
0fce4     A7 26 02 5B |  if_ne	rdlong	local01, fp
0fce8     10 4E 85 51 |  if_ne	sub	fp, #16
0fcec     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0fcf0     8C 0A 90 5D |  if_ne	jmp	#LR__1341
0fcf4                 | ' 
0fcf4                 | ' if numpar=2 then						' env from .h2 or from a pointer
0fcf4     10 4E 05 F1 | 	add	fp, #16
0fcf8     A7 26 02 FB | 	rdlong	local01, fp
0fcfc     10 4E 85 F1 | 	sub	fp, #16
0fd00     02 26 0E F2 | 	cmp	local01, #2 wz
0fd04     24 04 90 5D |  if_ne	jmp	#LR__1333
0fd08     48 D8 BF FD | 	call	#_pop
0fd0c     FF 1A 02 F6 | 	mov	arg05, result3
0fd10     40 4E 05 F1 | 	add	fp, #64
0fd14     A7 FA 61 FC | 	wrlong	result1, fp
0fd18     04 4E 05 F1 | 	add	fp, #4
0fd1c     A7 FC 61 FC | 	wrlong	result2, fp
0fd20     04 4E 05 F1 | 	add	fp, #4
0fd24     A7 1A 62 FC | 	wrlong	arg05, fp
0fd28                 | '   t1=pop()
0fd28                 | '   if t1.result_type=result_string2 then 
0fd28     48 4E 85 F1 | 	sub	fp, #72
0fd2c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0fd30     20 00 90 5D |  if_ne	jmp	#LR__1320
0fd34     40 4E 05 F1 | 	add	fp, #64
0fd38     A7 12 02 FB | 	rdlong	arg01, fp
0fd3c     40 4E 85 F1 | 	sub	fp, #64
0fd40     88 D9 BF FD | 	call	#_convertstring
0fd44     4C 4E 05 F1 | 	add	fp, #76
0fd48     A7 FA 61 FC | 	wrlong	result1, fp
0fd4c     4C 4E 85 F1 | 	sub	fp, #76
0fd50     58 00 90 FD | 	jmp	#LR__1323
0fd54                 | LR__1320
0fd54     48 4E 05 F1 | 	add	fp, #72
0fd58     A7 26 02 FB | 	rdlong	local01, fp
0fd5c     48 4E 85 F1 | 	sub	fp, #72
0fd60     1F 26 0E F2 | 	cmp	local01, #31 wz
0fd64     18 00 90 5D |  if_ne	jmp	#LR__1321
0fd68     40 4E 05 F1 | 	add	fp, #64
0fd6c     A7 26 02 FB | 	rdlong	local01, fp
0fd70     0C 4E 05 F1 | 	add	fp, #12
0fd74     A7 26 62 FC | 	wrlong	local01, fp
0fd78     4C 4E 85 F1 | 	sub	fp, #76
0fd7c     2C 00 90 FD | 	jmp	#LR__1322
0fd80                 | LR__1321
0fd80     B5 01 00 FF 
0fd84     01 27 06 F6 | 	mov	local01, ##@LR__5873
0fd88     4C 4E 05 F1 | 	add	fp, #76
0fd8c     A7 26 62 FC | 	wrlong	local01, fp
0fd90     0C 4E 85 F1 | 	sub	fp, #12
0fd94     A7 12 02 F6 | 	mov	arg01, fp
0fd98     40 4E 85 F1 | 	sub	fp, #64
0fd9c     98 D9 BF FD | 	call	#_converttoint
0fda0     1C 4E 05 F1 | 	add	fp, #28
0fda4     A7 FA 61 FC | 	wrlong	result1, fp
0fda8     1C 4E 85 F1 | 	sub	fp, #28
0fdac                 | LR__1322
0fdac                 | LR__1323
0fdac                 | '   if s1<>"" then 
0fdac     4C 4E 05 F1 | 	add	fp, #76
0fdb0     A7 12 02 FB | 	rdlong	arg01, fp
0fdb4     4C 4E 85 F1 | 	sub	fp, #76
0fdb8     B5 01 00 FF 
0fdbc     02 15 06 F6 | 	mov	arg02, ##@LR__5874
0fdc0     98 69 B1 FD | 	call	#__system___string_cmp
0fdc4     00 FA 0D F2 | 	cmp	result1, #0 wz
0fdc8     24 02 90 AD |  if_e	jmp	#LR__1327
0fdcc     84 D7 BF FD | 	call	#_pop
0fdd0     FF 26 02 F6 | 	mov	local01, result3
0fdd4     40 4E 05 F1 | 	add	fp, #64
0fdd8     A7 FA 61 FC | 	wrlong	result1, fp
0fddc     04 4E 05 F1 | 	add	fp, #4
0fde0     A7 FC 61 FC | 	wrlong	result2, fp
0fde4     04 4E 05 F1 | 	add	fp, #4
0fde8     A7 26 62 FC | 	wrlong	local01, fp
0fdec     08 4E 85 F1 | 	sub	fp, #8
0fdf0     A7 12 02 F6 | 	mov	arg01, fp
0fdf4     40 4E 85 F1 | 	sub	fp, #64
0fdf8     3C D9 BF FD | 	call	#_converttoint
0fdfc     18 4E 05 F1 | 	add	fp, #24
0fe00     A7 FA 61 FC | 	wrlong	result1, fp
0fe04     18 4E 85 F1 | 	sub	fp, #24
0fe08                 | '     t1=pop()
0fe08                 | '     channel=converttoint(t1) 
0fe08                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0fe08     09 12 06 F6 | 	mov	arg01, #9
0fe0c     7C BC B1 FD | 	call	#__system__close
0fe10     09 26 06 F6 | 	mov	local01, #9
0fe14     B5 01 00 FF 
0fe18     03 13 06 F6 | 	mov	arg01, ##@LR__5875
0fe1c     4C 4E 05 F1 | 	add	fp, #76
0fe20     A7 14 02 FB | 	rdlong	arg02, fp
0fe24     4C 4E 85 F1 | 	sub	fp, #76
0fe28     64 69 B1 FD | 	call	#__system___string_concat
0fe2c     FD 14 02 F6 | 	mov	arg02, result1
0fe30     13 13 02 F6 | 	mov	arg01, local01
0fe34     00 16 06 F6 | 	mov	arg03, #0
0fe38     FC 74 B1 FD | 	call	#__system___basic_open_string
0fe3c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fe40     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fe44     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fe48     0C 4E 05 F1 | 	add	fp, #12
0fe4c     A7 FA 61 FC | 	wrlong	result1, fp
0fe50                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0fe50     0C 4E 85 F1 | 	sub	fp, #12
0fe54     A0 00 90 AD |  if_e	jmp	#LR__1324
0fe58     00 12 06 F6 | 	mov	arg01, #0
0fe5c     FC C5 B1 FD | 	call	#__system___getiolock_0603
0fe60     FD 12 02 F6 | 	mov	arg01, result1
0fe64     CC 68 B1 FD | 	call	#__system___lockmem
0fe68     B5 01 00 FF 
0fe6c     10 15 06 F6 | 	mov	arg02, ##@LR__5876
0fe70     00 12 06 F6 | 	mov	arg01, #0
0fe74     00 16 06 F6 | 	mov	arg03, #0
0fe78     AC 75 B1 FD | 	call	#__system___basic_print_string
0fe7c     0C 4E 05 F1 | 	add	fp, #12
0fe80     A7 14 02 FB | 	rdlong	arg02, fp
0fe84     0C 4E 85 F1 | 	sub	fp, #12
0fe88     00 12 06 F6 | 	mov	arg01, #0
0fe8c     00 16 06 F6 | 	mov	arg03, #0
0fe90     0A 18 06 F6 | 	mov	arg04, #10
0fe94     D4 75 B1 FD | 	call	#__system___basic_print_integer
0fe98     B5 01 00 FF 
0fe9c     1E 15 06 F6 | 	mov	arg02, ##@LR__5877
0fea0     00 12 06 F6 | 	mov	arg01, #0
0fea4     00 16 06 F6 | 	mov	arg03, #0
0fea8     7C 75 B1 FD | 	call	#__system___basic_print_string
0feac     00 26 06 F6 | 	mov	local01, #0
0feb0     0C 4E 05 F1 | 	add	fp, #12
0feb4     A7 12 02 FB | 	rdlong	arg01, fp
0feb8     0C 4E 85 F1 | 	sub	fp, #12
0febc     00 92 B1 FD | 	call	#__system___strerror
0fec0     FD 14 02 F6 | 	mov	arg02, result1
0fec4     13 13 02 F6 | 	mov	arg01, local01
0fec8     00 16 06 F6 | 	mov	arg03, #0
0fecc     58 75 B1 FD | 	call	#__system___basic_print_string
0fed0     00 12 06 F6 | 	mov	arg01, #0
0fed4     0A 14 06 F6 | 	mov	arg02, #10
0fed8     00 16 06 F6 | 	mov	arg03, #0
0fedc     F0 74 B1 FD | 	call	#__system___basic_print_char
0fee0     00 12 06 F6 | 	mov	arg01, #0
0fee4     74 C5 B1 FD | 	call	#__system___getiolock_0603
0fee8     FD 00 68 FC | 	wrlong	#0, result1
0feec     09 12 06 F6 | 	mov	arg01, #9
0fef0     98 BB B1 FD | 	call	#__system__close
0fef4     88 08 90 FD | 	jmp	#LR__1341
0fef8                 | LR__1324
0fef8                 | '     get #9,17,envbuf8(channel,0),256
0fef8     18 4E 05 F1 | 	add	fp, #24
0fefc     A7 1A 02 FB | 	rdlong	arg05, fp
0ff00     18 4E 85 F1 | 	sub	fp, #24
0ff04     0D 17 02 F6 | 	mov	arg03, arg05
0ff08     09 16 66 F0 | 	shl	arg03, #9
0ff0c     0D 17 02 F1 | 	add	arg03, arg05
0ff10     0C 00 00 FF 
0ff14     D8 E4 05 F1 | 	add	objptr, ##6360
0ff18     F2 16 02 F1 | 	add	arg03, objptr
0ff1c     09 12 06 F6 | 	mov	arg01, #9
0ff20     11 14 06 F6 | 	mov	arg02, #17
0ff24     00 19 06 F6 | 	mov	arg04, #256
0ff28     01 1A 06 F6 | 	mov	arg05, #1
0ff2c     0C 00 00 FF 
0ff30     D8 E4 85 F1 | 	sub	objptr, ##6360
0ff34     6C 76 B1 FD | 	call	#__system___basic_get
0ff38                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0ff38     14 4E 05 F1 | 	add	fp, #20
0ff3c     A7 FE 69 FC | 	wrlong	#255, fp
0ff40     14 4E 85 F1 | 	sub	fp, #20
0ff44     0C 00 00 FF 
0ff48     D8 E4 05 F1 | 	add	objptr, ##6360
0ff4c     97 30 48 FB | 	callpa	#(@LR__1326-@LR__1325)>>2,fcache_load_ptr_
0ff50                 | LR__1325
0ff50     18 4E 05 F1 | 	add	fp, #24
0ff54     A7 16 02 FB | 	rdlong	arg03, fp
0ff58     0B 27 02 F6 | 	mov	local01, arg03
0ff5c     09 26 66 F0 | 	shl	local01, #9
0ff60     F2 26 02 F1 | 	add	local01, objptr
0ff64     04 4E 85 F1 | 	sub	fp, #4
0ff68     A7 1A 02 FB | 	rdlong	arg05, fp
0ff6c     0D 19 02 F6 | 	mov	arg04, arg05
0ff70     01 18 66 F0 | 	shl	arg04, #1
0ff74     13 19 02 F1 | 	add	arg04, local01
0ff78     0B 27 02 F6 | 	mov	local01, arg03
0ff7c     09 26 66 F0 | 	shl	local01, #9
0ff80     0B 27 02 F1 | 	add	local01, arg03
0ff84     F2 26 02 F1 | 	add	local01, objptr
0ff88     13 1B 02 F1 | 	add	arg05, local01
0ff8c     0D 27 C2 FA | 	rdbyte	local01, arg05
0ff90     00 27 06 FA | 	mul	local01, #256
0ff94     0C 27 52 FC | 	wrword	local01, arg04
0ff98     A7 26 02 FB | 	rdlong	local01, fp
0ff9c     01 26 86 F1 | 	sub	local01, #1
0ffa0     A7 26 62 FC | 	wrlong	local01, fp
0ffa4     14 4E 85 F1 | 	sub	fp, #20
0ffa8     00 26 56 F2 | 	cmps	local01, #0 wc
0ffac     A0 FF 9F 3D |  if_ae	jmp	#LR__1325
0ffb0                 | LR__1326
0ffb0     0C 00 00 FF 
0ffb4     D8 E4 85 F1 | 	sub	objptr, ##6360
0ffb8                 | '     close #9
0ffb8     09 12 06 F6 | 	mov	arg01, #9
0ffbc     CC BA B1 FD | 	call	#__system__close
0ffc0     18 4E 05 F1 | 	add	fp, #24
0ffc4     A7 26 02 FB | 	rdlong	local01, fp
0ffc8     18 4E 85 F1 | 	sub	fp, #24
0ffcc     09 26 66 F0 | 	shl	local01, #9
0ffd0     0C 00 00 FF 
0ffd4     D8 E4 05 F1 | 	add	objptr, ##6360
0ffd8     F2 26 02 F1 | 	add	local01, objptr
0ffdc     FE 27 06 F1 | 	add	local01, #510
0ffe0     13 01 58 FC | 	wrword	#0, local01
0ffe4                 | '     envbuf(channel,255)=0                                                              
0ffe4                 | '     return
0ffe4     0C 00 00 FF 
0ffe8     D8 E4 85 F1 | 	sub	objptr, ##6360
0ffec     90 07 90 FD | 	jmp	#LR__1341
0fff0                 | LR__1327
0fff0                 | '     if wptr < $80000 then 
0fff0     1C 4E 05 F1 | 	add	fp, #28
0fff4     A7 28 02 FB | 	rdlong	local02, fp
0fff8     1C 4E 85 F1 | 	sub	fp, #28
0fffc     00 04 00 FF 
10000     00 28 56 F2 | 	cmps	local02, ##524288 wc
10004     7C 00 90 3D |  if_ae	jmp	#LR__1330
10008                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
10008     14 4E 05 F1 | 	add	fp, #20
1000c     A7 00 68 FC | 	wrlong	#0, fp
10010     14 4E 85 F1 | 	sub	fp, #20
10014     0C 00 00 FF 
10018     D8 E4 05 F1 | 	add	objptr, ##6360
1001c     97 2C 48 FB | 	callpa	#(@LR__1329-@LR__1328)>>2,fcache_load_ptr_
10020                 | LR__1328
10020     18 4E 05 F1 | 	add	fp, #24
10024     A7 28 02 FB | 	rdlong	local02, fp
10028     09 28 66 F0 | 	shl	local02, #9
1002c     F2 28 02 F1 | 	add	local02, objptr
10030     04 4E 85 F1 | 	sub	fp, #4
10034     A7 26 02 FB | 	rdlong	local01, fp
10038     13 1B 02 F6 | 	mov	arg05, local01
1003c     01 1A 66 F0 | 	shl	arg05, #1
10040     14 1B 02 F1 | 	add	arg05, local02
10044     08 4E 05 F1 | 	add	fp, #8
10048     A7 12 02 FB | 	rdlong	arg01, fp
1004c     01 26 66 F0 | 	shl	local01, #1
10050     13 13 02 F1 | 	add	arg01, local01
10054     09 FB E1 FA | 	rdword	result1, arg01
10058     0D FB 51 FC | 	wrword	result1, arg05
1005c     08 4E 85 F1 | 	sub	fp, #8
10060     A7 28 02 FB | 	rdlong	local02, fp
10064     01 28 06 F1 | 	add	local02, #1
10068     A7 28 62 FC | 	wrlong	local02, fp
1006c     14 4E 85 F1 | 	sub	fp, #20
10070     00 29 56 F2 | 	cmps	local02, #256 wc
10074     A8 FF 9F CD |  if_b	jmp	#LR__1328
10078                 | LR__1329
10078     0C 00 00 FF 
1007c     D8 E4 85 F1 | 	sub	objptr, ##6360
10080     78 00 90 FD | 	jmp	#LR__1332
10084                 | LR__1330
10084                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
10084     14 4E 05 F1 | 	add	fp, #20
10088     A7 00 68 FC | 	wrlong	#0, fp
1008c     14 4E 85 F1 | 	sub	fp, #20
10090                 | LR__1331
10090     18 4E 05 F1 | 	add	fp, #24
10094     A7 28 02 FB | 	rdlong	local02, fp
10098     09 28 66 F0 | 	shl	local02, #9
1009c     0C 00 00 FF 
100a0     D8 E4 05 F1 | 	add	objptr, ##6360
100a4     F2 28 02 F1 | 	add	local02, objptr
100a8     04 4E 85 F1 | 	sub	fp, #4
100ac     A7 26 02 FB | 	rdlong	local01, fp
100b0     13 2B 02 F6 | 	mov	local03, local01
100b4     01 2A 66 F0 | 	shl	local03, #1
100b8     14 2B 02 F1 | 	add	local03, local02
100bc     08 4E 05 F1 | 	add	fp, #8
100c0     A7 12 02 FB | 	rdlong	arg01, fp
100c4     1C 4E 85 F1 | 	sub	fp, #28
100c8     01 26 66 F0 | 	shl	local01, #1
100cc     13 13 02 F1 | 	add	arg01, local01
100d0     0C 00 00 FF 
100d4     D8 E4 85 F1 | 	sub	objptr, ##6360
100d8     94 2F B1 FD | 	call	#_psdpeek
100dc     15 FB 51 FC | 	wrword	result1, local03
100e0     14 4E 05 F1 | 	add	fp, #20
100e4     A7 2A 02 FB | 	rdlong	local03, fp
100e8     01 2A 06 F1 | 	add	local03, #1
100ec     A7 2A 62 FC | 	wrlong	local03, fp
100f0     14 4E 85 F1 | 	sub	fp, #20
100f4     00 2B 56 F2 | 	cmps	local03, #256 wc
100f8     94 FF 9F CD |  if_b	jmp	#LR__1331
100fc                 | LR__1332
100fc     18 4E 05 F1 | 	add	fp, #24
10100     A7 2A 02 FB | 	rdlong	local03, fp
10104     18 4E 85 F1 | 	sub	fp, #24
10108     09 2A 66 F0 | 	shl	local03, #9
1010c     0C 00 00 FF 
10110     D8 E4 05 F1 | 	add	objptr, ##6360
10114     F2 2A 02 F1 | 	add	local03, objptr
10118     FE 2B 06 F1 | 	add	local03, #510
1011c     15 01 58 FC | 	wrword	#0, local03
10120                 | '     envbuf(channel,255)=0
10120                 | '     return   
10120     0C 00 00 FF 
10124     D8 E4 85 F1 | 	sub	objptr, ##6360
10128     54 06 90 FD | 	jmp	#LR__1341
1012c                 | LR__1333
1012c                 | ' 
1012c                 | ' if numpar=5 then   						 'simple adsr
1012c     10 4E 05 F1 | 	add	fp, #16
10130     A7 28 02 FB | 	rdlong	local02, fp
10134     10 4E 85 F1 | 	sub	fp, #16
10138     05 28 0E F2 | 	cmp	local02, #5 wz
1013c     14 06 90 5D |  if_ne	jmp	#LR__1340
10140     10 D4 BF FD | 	call	#_pop
10144     FF 26 02 F6 | 	mov	local01, result3
10148     40 4E 05 F1 | 	add	fp, #64
1014c     A7 FA 61 FC | 	wrlong	result1, fp
10150     04 4E 05 F1 | 	add	fp, #4
10154     A7 FC 61 FC | 	wrlong	result2, fp
10158     04 4E 05 F1 | 	add	fp, #4
1015c     A7 26 62 FC | 	wrlong	local01, fp
10160     08 4E 85 F1 | 	sub	fp, #8
10164     A7 12 02 F6 | 	mov	arg01, fp
10168     40 4E 85 F1 | 	sub	fp, #64
1016c     84 D6 BF FD | 	call	#_converttofloat
10170     FD 28 02 F6 | 	mov	local02, result1
10174     2C 4E 05 F1 | 	add	fp, #44
10178     A7 28 62 FC | 	wrlong	local02, fp
1017c     2C 4E 85 F1 | 	sub	fp, #44
10180     D0 D3 BF FD | 	call	#_pop
10184     FF 26 02 F6 | 	mov	local01, result3
10188     40 4E 05 F1 | 	add	fp, #64
1018c     A7 FA 61 FC | 	wrlong	result1, fp
10190     04 4E 05 F1 | 	add	fp, #4
10194     A7 FC 61 FC | 	wrlong	result2, fp
10198     04 4E 05 F1 | 	add	fp, #4
1019c     A7 26 62 FC | 	wrlong	local01, fp
101a0     08 4E 85 F1 | 	sub	fp, #8
101a4     A7 12 02 F6 | 	mov	arg01, fp
101a8     40 4E 85 F1 | 	sub	fp, #64
101ac     44 D6 BF FD | 	call	#_converttofloat
101b0     FD 28 02 F6 | 	mov	local02, result1
101b4     28 4E 05 F1 | 	add	fp, #40
101b8     A7 28 62 FC | 	wrlong	local02, fp
101bc     28 4E 85 F1 | 	sub	fp, #40
101c0     90 D3 BF FD | 	call	#_pop
101c4     FF 26 02 F6 | 	mov	local01, result3
101c8     40 4E 05 F1 | 	add	fp, #64
101cc     A7 FA 61 FC | 	wrlong	result1, fp
101d0     04 4E 05 F1 | 	add	fp, #4
101d4     A7 FC 61 FC | 	wrlong	result2, fp
101d8     04 4E 05 F1 | 	add	fp, #4
101dc     A7 26 62 FC | 	wrlong	local01, fp
101e0     08 4E 85 F1 | 	sub	fp, #8
101e4     A7 12 02 F6 | 	mov	arg01, fp
101e8     40 4E 85 F1 | 	sub	fp, #64
101ec     04 D6 BF FD | 	call	#_converttofloat
101f0     FD 28 02 F6 | 	mov	local02, result1
101f4     24 4E 05 F1 | 	add	fp, #36
101f8     A7 28 62 FC | 	wrlong	local02, fp
101fc     24 4E 85 F1 | 	sub	fp, #36
10200     50 D3 BF FD | 	call	#_pop
10204     FF 26 02 F6 | 	mov	local01, result3
10208     40 4E 05 F1 | 	add	fp, #64
1020c     A7 FA 61 FC | 	wrlong	result1, fp
10210     04 4E 05 F1 | 	add	fp, #4
10214     A7 FC 61 FC | 	wrlong	result2, fp
10218     04 4E 05 F1 | 	add	fp, #4
1021c     A7 26 62 FC | 	wrlong	local01, fp
10220     08 4E 85 F1 | 	sub	fp, #8
10224     A7 12 02 F6 | 	mov	arg01, fp
10228     40 4E 85 F1 | 	sub	fp, #64
1022c     C4 D5 BF FD | 	call	#_converttofloat
10230     FD 28 02 F6 | 	mov	local02, result1
10234     20 4E 05 F1 | 	add	fp, #32
10238     A7 28 62 FC | 	wrlong	local02, fp
1023c     20 4E 85 F1 | 	sub	fp, #32
10240     10 D3 BF FD | 	call	#_pop
10244     FF 26 02 F6 | 	mov	local01, result3
10248     40 4E 05 F1 | 	add	fp, #64
1024c     A7 FA 61 FC | 	wrlong	result1, fp
10250     04 4E 05 F1 | 	add	fp, #4
10254     A7 FC 61 FC | 	wrlong	result2, fp
10258     04 4E 05 F1 | 	add	fp, #4
1025c     A7 26 62 FC | 	wrlong	local01, fp
10260     08 4E 85 F1 | 	sub	fp, #8
10264     A7 12 02 F6 | 	mov	arg01, fp
10268     40 4E 85 F1 | 	sub	fp, #64
1026c     C8 D4 BF FD | 	call	#_converttoint
10270     18 4E 05 F1 | 	add	fp, #24
10274     A7 FA 61 FC | 	wrlong	result1, fp
10278                 | '   t1=pop() : rr=converttofloat(t1)
10278                 | '   t1=pop() : ss=converttofloat(t1) 
10278                 | '   t1=pop() : dd=converttofloat(t1)
10278                 | '   t1=pop() : aa=converttofloat(t1)
10278                 | '   t1=pop() : channel=converttoint(t1)
10278                 | '   if ss<0.0 then ss=0.0 
10278     10 4E 05 F1 | 	add	fp, #16
1027c     A7 12 02 FB | 	rdlong	arg01, fp
10280     28 4E 85 F1 | 	sub	fp, #40
10284     00 14 06 F6 | 	mov	arg02, #0
10288     01 16 06 F6 | 	mov	arg03, #1
1028c     50 97 B1 FD | 	call	#__system___float_cmp
10290     00 FA 55 F2 | 	cmps	result1, #0 wc
10294     28 4E 05 C1 |  if_b	add	fp, #40
10298     A7 00 68 CC |  if_b	wrlong	#0, fp
1029c     28 4E 85 C1 |  if_b	sub	fp, #40
102a0                 | '   if ss>1.0 then ss=1.0
102a0     28 4E 05 F1 | 	add	fp, #40
102a4     A7 12 02 FB | 	rdlong	arg01, fp
102a8     28 4E 85 F1 | 	sub	fp, #40
102ac     00 C0 1F FF 
102b0     00 14 06 F6 | 	mov	arg02, ##1065353216
102b4     01 16 66 F6 | 	neg	arg03, #1
102b8     24 97 B1 FD | 	call	#__system___float_cmp
102bc     01 FA 55 F2 | 	cmps	result1, #1 wc
102c0     28 4E 05 31 |  if_ae	add	fp, #40
102c4     00 C0 9F 3F 
102c8     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
102cc     28 4E 85 31 |  if_ae	sub	fp, #40
102d0     20 4E 05 F1 | 	add	fp, #32
102d4     A7 12 02 FB | 	rdlong	arg01, fp
102d8     04 4E 05 F1 | 	add	fp, #4
102dc     A7 14 02 FB | 	rdlong	arg02, fp
102e0     24 4E 85 F1 | 	sub	fp, #36
102e4     F4 8E B1 FD | 	call	#__system___float_add
102e8     FD 12 02 F6 | 	mov	arg01, result1
102ec     2C 4E 05 F1 | 	add	fp, #44
102f0     A7 14 02 FB | 	rdlong	arg02, fp
102f4     2C 4E 85 F1 | 	sub	fp, #44
102f8     E0 8E B1 FD | 	call	#__system___float_add
102fc     30 4E 05 F1 | 	add	fp, #48
10300     A7 FA 61 FC | 	wrlong	result1, fp
10304     FD 14 02 F6 | 	mov	arg02, result1
10308     30 4E 85 F1 | 	sub	fp, #48
1030c     00 C0 21 FF 
10310     00 12 06 F6 | 	mov	arg01, ##1132462080
10314     98 94 B1 FD | 	call	#__system___float_div
10318     34 4E 05 F1 | 	add	fp, #52
1031c     A7 FA 61 FC | 	wrlong	result1, fp
10320     14 4E 85 F1 | 	sub	fp, #20
10324     A7 12 02 FB | 	rdlong	arg01, fp
10328     FD 14 02 F6 | 	mov	arg02, result1
1032c     20 4E 85 F1 | 	sub	fp, #32
10330     78 92 B1 FD | 	call	#__system___float_mul
10334     FD 12 02 F6 | 	mov	arg01, result1
10338     01 14 06 F6 | 	mov	arg02, #1
1033c     34 97 B1 FD | 	call	#__system___float_tointeger
10340     A7 FA 61 FC | 	wrlong	result1, fp
10344     24 4E 05 F1 | 	add	fp, #36
10348     A7 12 02 FB | 	rdlong	arg01, fp
1034c     10 4E 05 F1 | 	add	fp, #16
10350     A7 14 02 FB | 	rdlong	arg02, fp
10354     34 4E 85 F1 | 	sub	fp, #52
10358     50 92 B1 FD | 	call	#__system___float_mul
1035c     FD 12 02 F6 | 	mov	arg01, result1
10360     01 14 06 F6 | 	mov	arg02, #1
10364     0C 97 B1 FD | 	call	#__system___float_tointeger
10368     04 4E 05 F1 | 	add	fp, #4
1036c     A7 FA 61 FC | 	wrlong	result1, fp
10370     28 4E 05 F1 | 	add	fp, #40
10374     A7 12 02 FB | 	rdlong	arg01, fp
10378     08 4E 05 F1 | 	add	fp, #8
1037c     A7 14 02 FB | 	rdlong	arg02, fp
10380     34 4E 85 F1 | 	sub	fp, #52
10384     24 92 B1 FD | 	call	#__system___float_mul
10388     FD 12 02 F6 | 	mov	arg01, result1
1038c     01 14 06 F6 | 	mov	arg02, #1
10390     E0 96 B1 FD | 	call	#__system___float_tointeger
10394     0C 4E 05 F1 | 	add	fp, #12
10398     A7 FA 61 FC | 	wrlong	result1, fp
1039c     0C 4E 85 F1 | 	sub	fp, #12
103a0     F8 BF 23 FF 
103a4     00 28 06 F6 | 	mov	local02, ##1199566848
103a8     A7 12 02 FB | 	rdlong	arg01, fp
103ac     09 13 52 F6 | 	abs	arg01, arg01 wc
103b0     1F 2C C6 C9 |  if_b	decod	local04, #31
103b4     00 2C 06 36 |  if_ae	mov	local04, #0
103b8     EC 8D B1 FD | 	call	#__system___float_fromuns
103bc     16 FB 61 F5 | 	xor	result1, local04
103c0     FD 14 02 F6 | 	mov	arg02, result1
103c4     14 13 02 F6 | 	mov	arg01, local02
103c8     E4 93 B1 FD | 	call	#__system___float_div
103cc     38 4E 05 F1 | 	add	fp, #56
103d0     A7 FA 61 FC | 	wrlong	result1, fp
103d4     F8 BF 23 FF 
103d8     00 28 06 F6 | 	mov	local02, ##1199566848
103dc     10 4E 85 F1 | 	sub	fp, #16
103e0     A7 14 02 FB | 	rdlong	arg02, fp
103e4     28 4E 85 F1 | 	sub	fp, #40
103e8     F8 BF 23 FF 
103ec     00 12 06 F6 | 	mov	arg01, ##1199566848
103f0     B8 91 B1 FD | 	call	#__system___float_mul
103f4     FD 14 02 F6 | 	mov	arg02, result1
103f8     14 13 02 F6 | 	mov	arg01, local02
103fc     1F 14 E6 F4 | 	bitnot	arg02, #31
10400     D8 8D B1 FD | 	call	#__system___float_add
10404     FD 28 02 F6 | 	mov	local02, result1
10408     04 4E 05 F1 | 	add	fp, #4
1040c     A7 12 02 FB | 	rdlong	arg01, fp
10410     04 4E 85 F1 | 	sub	fp, #4
10414     09 13 52 F6 | 	abs	arg01, arg01 wc
10418     1F 2C C6 C9 |  if_b	decod	local04, #31
1041c     00 2C 06 36 |  if_ae	mov	local04, #0
10420     84 8D B1 FD | 	call	#__system___float_fromuns
10424     16 FB 61 F5 | 	xor	result1, local04
10428     FD 14 02 F6 | 	mov	arg02, result1
1042c     14 13 02 F6 | 	mov	arg01, local02
10430     7C 93 B1 FD | 	call	#__system___float_div
10434     24 4E 05 F1 | 	add	fp, #36
10438     A7 FA 61 FC | 	wrlong	result1, fp
1043c     04 4E 05 F1 | 	add	fp, #4
10440     A7 14 02 FB | 	rdlong	arg02, fp
10444     28 4E 85 F1 | 	sub	fp, #40
10448     F8 BF 23 FF 
1044c     00 12 06 F6 | 	mov	arg01, ##1199566848
10450     58 91 B1 FD | 	call	#__system___float_mul
10454     FD 28 02 F6 | 	mov	local02, result1
10458     0C 4E 05 F1 | 	add	fp, #12
1045c     A7 12 02 FB | 	rdlong	arg01, fp
10460     0C 4E 85 F1 | 	sub	fp, #12
10464     09 13 52 F6 | 	abs	arg01, arg01 wc
10468     1F 2C C6 C9 |  if_b	decod	local04, #31
1046c     00 2C 06 36 |  if_ae	mov	local04, #0
10470     34 8D B1 FD | 	call	#__system___float_fromuns
10474     16 FB 61 F5 | 	xor	result1, local04
10478     FD 14 02 F6 | 	mov	arg02, result1
1047c     14 13 02 F6 | 	mov	arg01, local02
10480     2C 93 B1 FD | 	call	#__system___float_div
10484     3C 4E 05 F1 | 	add	fp, #60
10488     A7 FA 61 FC | 	wrlong	result1, fp
1048c     24 4E 85 F1 | 	sub	fp, #36
10490     A7 2E 02 FB | 	rdlong	local05, fp
10494     18 4E 85 F1 | 	sub	fp, #24
10498     01 2E 66 F0 | 	shl	local05, #1
1049c     52 00 00 FF 
104a0     B4 E4 05 F1 | 	add	objptr, ##42164
104a4     F2 2E 02 F1 | 	add	local05, objptr
104a8     A7 30 02 FB | 	rdlong	local06, fp
104ac     04 4E 05 F1 | 	add	fp, #4
104b0     A7 2A 02 FB | 	rdlong	local03, fp
104b4     15 31 02 F1 | 	add	local06, local03
104b8     17 31 52 FC | 	wrword	local06, local05
104bc     1C 4E 05 F1 | 	add	fp, #28
104c0     A7 00 68 FC | 	wrlong	#0, fp
104c4                 | '   fulltime=aa+dd+rr
104c4                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
104c4                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
104c4                 | '   suspoints(channel)=a+d
104c4                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
104c4     0C 4E 85 F1 | 	sub	fp, #12
104c8     A7 00 68 FC | 	wrlong	#0, fp
104cc     14 4E 85 F1 | 	sub	fp, #20
104d0     A7 32 02 FB | 	rdlong	local07, fp
104d4     52 00 00 FF 
104d8     B4 E4 85 F1 | 	sub	objptr, ##42164
104dc                 | LR__1334
104dc     14 4E 05 F1 | 	add	fp, #20
104e0     A7 28 02 FB | 	rdlong	local02, fp
104e4     14 4E 85 F1 | 	sub	fp, #20
104e8     19 29 52 F2 | 	cmps	local02, local07 wc
104ec     80 00 90 3D |  if_ae	jmp	#LR__1335
104f0     18 4E 05 F1 | 	add	fp, #24
104f4     A7 30 02 FB | 	rdlong	local06, fp
104f8     09 30 66 F0 | 	shl	local06, #9
104fc     0C 00 00 FF 
10500     D8 E4 05 F1 | 	add	objptr, ##6360
10504     F2 30 02 F1 | 	add	local06, objptr
10508     04 4E 85 F1 | 	sub	fp, #4
1050c     A7 2E 02 FB | 	rdlong	local05, fp
10510     01 2E 66 F0 | 	shl	local05, #1
10514     18 2F 02 F1 | 	add	local05, local06
10518     0C 4E 05 F1 | 	add	fp, #12
1051c     A7 12 02 FB | 	rdlong	arg01, fp
10520     20 4E 85 F1 | 	sub	fp, #32
10524     0C 00 00 FF 
10528     D8 E4 85 F1 | 	sub	objptr, ##6360
1052c     01 14 06 F6 | 	mov	arg02, #1
10530     40 95 B1 FD | 	call	#__system___float_tointeger
10534     17 FB 51 FC | 	wrword	result1, local05
10538     20 4E 05 F1 | 	add	fp, #32
1053c     A7 12 02 FB | 	rdlong	arg01, fp
10540     18 4E 05 F1 | 	add	fp, #24
10544     A7 14 02 FB | 	rdlong	arg02, fp
10548     38 4E 85 F1 | 	sub	fp, #56
1054c     8C 8C B1 FD | 	call	#__system___float_add
10550     20 4E 05 F1 | 	add	fp, #32
10554     A7 FA 61 FC | 	wrlong	result1, fp
10558     0C 4E 85 F1 | 	sub	fp, #12
1055c     A7 30 02 FB | 	rdlong	local06, fp
10560     01 30 06 F1 | 	add	local06, #1
10564     A7 30 62 FC | 	wrlong	local06, fp
10568     14 4E 85 F1 | 	sub	fp, #20
1056c     6C FF 9F FD | 	jmp	#LR__1334
10570                 | LR__1335
10570                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
10570     A7 28 02 FB | 	rdlong	local02, fp
10574     14 4E 05 F1 | 	add	fp, #20
10578     A7 28 62 FC | 	wrlong	local02, fp
1057c     14 4E 85 F1 | 	sub	fp, #20
10580     A7 34 02 FB | 	rdlong	local08, fp
10584     04 4E 05 F1 | 	add	fp, #4
10588     A7 28 02 FB | 	rdlong	local02, fp
1058c     04 4E 85 F1 | 	sub	fp, #4
10590     14 35 02 F1 | 	add	local08, local02
10594                 | LR__1336
10594     14 4E 05 F1 | 	add	fp, #20
10598     A7 28 02 FB | 	rdlong	local02, fp
1059c     14 4E 85 F1 | 	sub	fp, #20
105a0     1A 29 52 F2 | 	cmps	local02, local08 wc
105a4     A8 00 90 3D |  if_ae	jmp	#LR__1337
105a8     18 4E 05 F1 | 	add	fp, #24
105ac     A7 32 02 FB | 	rdlong	local07, fp
105b0     09 32 66 F0 | 	shl	local07, #9
105b4     0C 00 00 FF 
105b8     D8 E4 05 F1 | 	add	objptr, ##6360
105bc     F2 32 02 F1 | 	add	local07, objptr
105c0     04 4E 85 F1 | 	sub	fp, #4
105c4     A7 30 02 FB | 	rdlong	local06, fp
105c8     01 30 66 F0 | 	shl	local06, #1
105cc     19 31 02 F1 | 	add	local06, local07
105d0     0C 4E 05 F1 | 	add	fp, #12
105d4     A7 12 02 FB | 	rdlong	arg01, fp
105d8     20 4E 85 F1 | 	sub	fp, #32
105dc     0C 00 00 FF 
105e0     D8 E4 85 F1 | 	sub	objptr, ##6360
105e4     01 14 06 F6 | 	mov	arg02, #1
105e8     88 94 B1 FD | 	call	#__system___float_tointeger
105ec     18 FB 51 FC | 	wrword	result1, local06
105f0     20 4E 05 F1 | 	add	fp, #32
105f4     A7 12 02 FB | 	rdlong	arg01, fp
105f8     04 4E 05 F1 | 	add	fp, #4
105fc     A7 14 02 FB | 	rdlong	arg02, fp
10600     24 4E 85 F1 | 	sub	fp, #36
10604     1F 14 E6 F4 | 	bitnot	arg02, #31
10608     D0 8B B1 FD | 	call	#__system___float_add
1060c     20 4E 05 F1 | 	add	fp, #32
10610     A7 FA 61 FC | 	wrlong	result1, fp
10614     20 4E 85 F1 | 	sub	fp, #32
10618     FD 12 02 F6 | 	mov	arg01, result1
1061c     00 14 06 F6 | 	mov	arg02, #0
10620     01 16 06 F6 | 	mov	arg03, #1
10624     B8 93 B1 FD | 	call	#__system___float_cmp
10628     00 FA 55 F2 | 	cmps	result1, #0 wc
1062c     20 4E 05 C1 |  if_b	add	fp, #32
10630     A7 00 68 CC |  if_b	wrlong	#0, fp
10634     20 4E 85 C1 |  if_b	sub	fp, #32
10638     14 4E 05 F1 | 	add	fp, #20
1063c     A7 32 02 FB | 	rdlong	local07, fp
10640     01 32 06 F1 | 	add	local07, #1
10644     A7 32 62 FC | 	wrlong	local07, fp
10648     14 4E 85 F1 | 	sub	fp, #20
1064c     44 FF 9F FD | 	jmp	#LR__1336
10650                 | LR__1337
10650                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
10650     A7 28 02 FB | 	rdlong	local02, fp
10654     04 4E 05 F1 | 	add	fp, #4
10658     A7 34 02 FB | 	rdlong	local08, fp
1065c     1A 29 02 F1 | 	add	local02, local08
10660     10 4E 05 F1 | 	add	fp, #16
10664     A7 28 62 FC | 	wrlong	local02, fp
10668     14 4E 85 F1 | 	sub	fp, #20
1066c                 | LR__1338
1066c     14 4E 05 F1 | 	add	fp, #20
10670     A7 2E 02 FB | 	rdlong	local05, fp
10674     14 4E 85 F1 | 	sub	fp, #20
10678     00 2F 56 F2 | 	cmps	local05, #256 wc
1067c     A8 00 90 3D |  if_ae	jmp	#LR__1339
10680     18 4E 05 F1 | 	add	fp, #24
10684     A7 34 02 FB | 	rdlong	local08, fp
10688     09 34 66 F0 | 	shl	local08, #9
1068c     0C 00 00 FF 
10690     D8 E4 05 F1 | 	add	objptr, ##6360
10694     F2 34 02 F1 | 	add	local08, objptr
10698     04 4E 85 F1 | 	sub	fp, #4
1069c     A7 32 02 FB | 	rdlong	local07, fp
106a0     01 32 66 F0 | 	shl	local07, #1
106a4     1A 33 02 F1 | 	add	local07, local08
106a8     0C 4E 05 F1 | 	add	fp, #12
106ac     A7 12 02 FB | 	rdlong	arg01, fp
106b0     20 4E 85 F1 | 	sub	fp, #32
106b4     0C 00 00 FF 
106b8     D8 E4 85 F1 | 	sub	objptr, ##6360
106bc     01 14 06 F6 | 	mov	arg02, #1
106c0     B0 93 B1 FD | 	call	#__system___float_tointeger
106c4     19 FB 51 FC | 	wrword	result1, local07
106c8     20 4E 05 F1 | 	add	fp, #32
106cc     A7 12 02 FB | 	rdlong	arg01, fp
106d0     1C 4E 05 F1 | 	add	fp, #28
106d4     A7 14 02 FB | 	rdlong	arg02, fp
106d8     3C 4E 85 F1 | 	sub	fp, #60
106dc     1F 14 E6 F4 | 	bitnot	arg02, #31
106e0     F8 8A B1 FD | 	call	#__system___float_add
106e4     20 4E 05 F1 | 	add	fp, #32
106e8     A7 FA 61 FC | 	wrlong	result1, fp
106ec     20 4E 85 F1 | 	sub	fp, #32
106f0     FD 12 02 F6 | 	mov	arg01, result1
106f4     00 14 06 F6 | 	mov	arg02, #0
106f8     01 16 06 F6 | 	mov	arg03, #1
106fc     E0 92 B1 FD | 	call	#__system___float_cmp
10700     00 FA 55 F2 | 	cmps	result1, #0 wc
10704     20 4E 05 C1 |  if_b	add	fp, #32
10708     A7 00 68 CC |  if_b	wrlong	#0, fp
1070c     20 4E 85 C1 |  if_b	sub	fp, #32
10710     14 4E 05 F1 | 	add	fp, #20
10714     A7 34 02 FB | 	rdlong	local08, fp
10718     01 34 06 F1 | 	add	local08, #1
1071c     A7 34 62 FC | 	wrlong	local08, fp
10720     14 4E 85 F1 | 	sub	fp, #20
10724     44 FF 9F FD | 	jmp	#LR__1338
10728                 | LR__1339
10728     18 4E 05 F1 | 	add	fp, #24
1072c     A7 2E 02 FB | 	rdlong	local05, fp
10730     18 4E 85 F1 | 	sub	fp, #24
10734     09 2E 66 F0 | 	shl	local05, #9
10738     0C 00 00 FF 
1073c     D8 E4 05 F1 | 	add	objptr, ##6360
10740     F2 2E 02 F1 | 	add	local05, objptr
10744     FE 2F 06 F1 | 	add	local05, #510
10748     17 01 58 FC | 	wrword	#0, local05
1074c     0C 00 00 FF 
10750     D8 E4 85 F1 | 	sub	objptr, ##6360
10754                 | LR__1340
10754     18 4E 05 F1 | 	add	fp, #24
10758     A7 2E 02 FB | 	rdlong	local05, fp
1075c     18 4E 85 F1 | 	sub	fp, #24
10760     09 2E 66 F0 | 	shl	local05, #9
10764     0C 00 00 FF 
10768     D8 E4 05 F1 | 	add	objptr, ##6360
1076c     F2 2E 02 F1 | 	add	local05, objptr
10770     FE 2F 06 F1 | 	add	local05, #510
10774     17 01 58 FC | 	wrword	#0, local05
10778     0C 00 00 FF 
1077c     D8 E4 85 F1 | 	sub	objptr, ##6360
10780                 | LR__1341
10780     A7 F0 03 F6 | 	mov	ptra, fp
10784     B2 00 A0 FD | 	call	#popregs_
10788                 | _do_defenv_ret
10788     2D 00 64 FD | 	ret
1078c                 | 
1078c                 | ' 
1078c                 | ' '-------------------- defsnd
1078c                 | ' 
1078c                 | ' sub do_defsnd
1078c                 | _do_defsnd
1078c     04 4A 05 F6 | 	mov	COUNT_, #4
10790     A8 00 A0 FD | 	call	#pushregs_
10794     88 F0 07 F1 | 	add	ptra, #136
10798     4A 00 00 FF 
1079c     80 E4 05 F1 | 	add	objptr, ##38016
107a0     F2 1A 02 FB | 	rdlong	arg05, objptr
107a4     0D 19 02 F6 | 	mov	arg04, arg05
107a8     01 18 66 F0 | 	shl	arg04, #1
107ac     0D 19 02 F1 | 	add	arg04, arg05
107b0     02 18 66 F0 | 	shl	arg04, #2
107b4     03 00 00 FF 
107b8     04 E4 85 F1 | 	sub	objptr, ##1540
107bc     F2 18 02 F1 | 	add	arg04, objptr
107c0     0C 1B 02 FB | 	rdlong	arg05, arg04
107c4     A7 1A 62 FC | 	wrlong	arg05, fp
107c8                 | ' 
107c8                 | ' numpar=compiledline(lineptr_e).result.uresult
107c8                 | ' 
107c8                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
107c8                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
107c8                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
107c8                 | ' ' defsnd channel, oneint - loads the wave from the pointer
107c8                 | ' 
107c8                 | ' if numpar<2 then return
107c8     02 1A 56 F2 | 	cmps	arg05, #2 wc
107cc     47 00 00 FF 
107d0     7C E4 85 F1 | 	sub	objptr, ##36476
107d4     94 08 90 CD |  if_b	jmp	#LR__1373
107d8                 | '  
107d8                 | ' if numpar=2 then
107d8     A7 1A 02 FB | 	rdlong	arg05, fp
107dc     02 1A 0E F2 | 	cmp	arg05, #2 wz
107e0     A0 03 90 5D |  if_ne	jmp	#LR__1360
107e4     6C CD BF FD | 	call	#_pop
107e8     FF 1A 02 F6 | 	mov	arg05, result3
107ec     2C 4E 05 F1 | 	add	fp, #44
107f0     A7 FA 61 FC | 	wrlong	result1, fp
107f4     04 4E 05 F1 | 	add	fp, #4
107f8     A7 FC 61 FC | 	wrlong	result2, fp
107fc     04 4E 05 F1 | 	add	fp, #4
10800     A7 1A 62 FC | 	wrlong	arg05, fp
10804                 | '   t1=pop()
10804                 | '   if t1.result_type=result_string2 then 
10804     34 4E 85 F1 | 	sub	fp, #52
10808     2B 1A 0E F2 | 	cmp	arg05, #43 wz
1080c     20 00 90 5D |  if_ne	jmp	#LR__1350
10810     2C 4E 05 F1 | 	add	fp, #44
10814     A7 12 02 FB | 	rdlong	arg01, fp
10818     2C 4E 85 F1 | 	sub	fp, #44
1081c     AC CE BF FD | 	call	#_convertstring
10820     38 4E 05 F1 | 	add	fp, #56
10824     A7 FA 61 FC | 	wrlong	result1, fp
10828     38 4E 85 F1 | 	sub	fp, #56
1082c     58 00 90 FD | 	jmp	#LR__1353
10830                 | LR__1350
10830     34 4E 05 F1 | 	add	fp, #52
10834     A7 1A 02 FB | 	rdlong	arg05, fp
10838     34 4E 85 F1 | 	sub	fp, #52
1083c     1F 1A 0E F2 | 	cmp	arg05, #31 wz
10840     18 00 90 5D |  if_ne	jmp	#LR__1351
10844     2C 4E 05 F1 | 	add	fp, #44
10848     A7 1A 02 FB | 	rdlong	arg05, fp
1084c     0C 4E 05 F1 | 	add	fp, #12
10850     A7 1A 62 FC | 	wrlong	arg05, fp
10854     38 4E 85 F1 | 	sub	fp, #56
10858     2C 00 90 FD | 	jmp	#LR__1352
1085c                 | LR__1351
1085c     B5 01 00 FF 
10860     21 1B 06 F6 | 	mov	arg05, ##@LR__5878
10864     38 4E 05 F1 | 	add	fp, #56
10868     A7 1A 62 FC | 	wrlong	arg05, fp
1086c     0C 4E 85 F1 | 	sub	fp, #12
10870     A7 12 02 F6 | 	mov	arg01, fp
10874     2C 4E 85 F1 | 	sub	fp, #44
10878     BC CE BF FD | 	call	#_converttoint
1087c     14 4E 05 F1 | 	add	fp, #20
10880     A7 FA 61 FC | 	wrlong	result1, fp
10884     14 4E 85 F1 | 	sub	fp, #20
10888                 | LR__1352
10888                 | LR__1353
10888                 | '   if s<>"" then 
10888     38 4E 05 F1 | 	add	fp, #56
1088c     A7 12 02 FB | 	rdlong	arg01, fp
10890     38 4E 85 F1 | 	sub	fp, #56
10894     B5 01 00 FF 
10898     22 15 06 F6 | 	mov	arg02, ##@LR__5879
1089c     BC 5E B1 FD | 	call	#__system___string_cmp
108a0     00 FA 0D F2 | 	cmp	result1, #0 wz
108a4     E0 01 90 AD |  if_e	jmp	#LR__1356
108a8     A8 CC BF FD | 	call	#_pop
108ac     FF 1A 02 F6 | 	mov	arg05, result3
108b0     2C 4E 05 F1 | 	add	fp, #44
108b4     A7 FA 61 FC | 	wrlong	result1, fp
108b8     04 4E 05 F1 | 	add	fp, #4
108bc     A7 FC 61 FC | 	wrlong	result2, fp
108c0     04 4E 05 F1 | 	add	fp, #4
108c4     A7 1A 62 FC | 	wrlong	arg05, fp
108c8     08 4E 85 F1 | 	sub	fp, #8
108cc     A7 12 02 F6 | 	mov	arg01, fp
108d0     2C 4E 85 F1 | 	sub	fp, #44
108d4     60 CE BF FD | 	call	#_converttoint
108d8     10 4E 05 F1 | 	add	fp, #16
108dc     A7 FA 61 FC | 	wrlong	result1, fp
108e0                 | '     t1=pop()
108e0                 | '     channel=converttoint(t1) : if channel>31 then return
108e0     FD 1A 02 F6 | 	mov	arg05, result1
108e4     10 4E 85 F1 | 	sub	fp, #16
108e8     20 1A 56 F2 | 	cmps	arg05, #32 wc
108ec     7C 07 90 3D |  if_ae	jmp	#LR__1373
108f0                 | '     close #9 : open "/sd/media/s/"+s for input as #9
108f0     09 12 06 F6 | 	mov	arg01, #9
108f4     94 B1 B1 FD | 	call	#__system__close
108f8     09 26 06 F6 | 	mov	local01, #9
108fc     B5 01 00 FF 
10900     23 13 06 F6 | 	mov	arg01, ##@LR__5880
10904     38 4E 05 F1 | 	add	fp, #56
10908     A7 14 02 FB | 	rdlong	arg02, fp
1090c     38 4E 85 F1 | 	sub	fp, #56
10910     7C 5E B1 FD | 	call	#__system___string_concat
10914     FD 14 02 F6 | 	mov	arg02, result1
10918     13 13 02 F6 | 	mov	arg01, local01
1091c     00 16 06 F6 | 	mov	arg03, #0
10920     14 6A B1 FD | 	call	#__system___basic_open_string
10924     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10928     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1092c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10930     52 00 00 FF 
10934     10 E5 05 F1 | 	add	objptr, ##42256
10938     F2 FA 61 FC | 	wrlong	result1, objptr
1093c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
1093c     52 00 00 FF 
10940     10 E5 85 F1 | 	sub	objptr, ##42256
10944     B0 00 90 AD |  if_e	jmp	#LR__1354
10948     00 12 06 F6 | 	mov	arg01, #0
1094c     0C BB B1 FD | 	call	#__system___getiolock_0603
10950     FD 12 02 F6 | 	mov	arg01, result1
10954     DC 5D B1 FD | 	call	#__system___lockmem
10958     B5 01 00 FF 
1095c     30 15 06 F6 | 	mov	arg02, ##@LR__5881
10960     00 12 06 F6 | 	mov	arg01, #0
10964     00 16 06 F6 | 	mov	arg03, #0
10968     BC 6A B1 FD | 	call	#__system___basic_print_string
1096c     52 00 00 FF 
10970     10 E5 05 F1 | 	add	objptr, ##42256
10974     F2 14 02 FB | 	rdlong	arg02, objptr
10978     52 00 00 FF 
1097c     10 E5 85 F1 | 	sub	objptr, ##42256
10980     00 12 06 F6 | 	mov	arg01, #0
10984     00 16 06 F6 | 	mov	arg03, #0
10988     0A 18 06 F6 | 	mov	arg04, #10
1098c     DC 6A B1 FD | 	call	#__system___basic_print_integer
10990     B5 01 00 FF 
10994     3E 15 06 F6 | 	mov	arg02, ##@LR__5882
10998     00 12 06 F6 | 	mov	arg01, #0
1099c     00 16 06 F6 | 	mov	arg03, #0
109a0     84 6A B1 FD | 	call	#__system___basic_print_string
109a4     00 26 06 F6 | 	mov	local01, #0
109a8     52 00 00 FF 
109ac     10 E5 05 F1 | 	add	objptr, ##42256
109b0     F2 12 02 FB | 	rdlong	arg01, objptr
109b4     52 00 00 FF 
109b8     10 E5 85 F1 | 	sub	objptr, ##42256
109bc     00 87 B1 FD | 	call	#__system___strerror
109c0     FD 14 02 F6 | 	mov	arg02, result1
109c4     13 13 02 F6 | 	mov	arg01, local01
109c8     00 16 06 F6 | 	mov	arg03, #0
109cc     58 6A B1 FD | 	call	#__system___basic_print_string
109d0     00 12 06 F6 | 	mov	arg01, #0
109d4     0A 14 06 F6 | 	mov	arg02, #10
109d8     00 16 06 F6 | 	mov	arg03, #0
109dc     F0 69 B1 FD | 	call	#__system___basic_print_char
109e0     00 12 06 F6 | 	mov	arg01, #0
109e4     74 BA B1 FD | 	call	#__system___getiolock_0603
109e8     FD 00 68 FC | 	wrlong	#0, result1
109ec     09 12 06 F6 | 	mov	arg01, #9
109f0     98 B0 B1 FD | 	call	#__system__close
109f4     74 06 90 FD | 	jmp	#LR__1373
109f8                 | LR__1354
109f8                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
109f8     04 4E 05 F1 | 	add	fp, #4
109fc     A7 00 68 FC | 	wrlong	#0, fp
10a00                 | LR__1355
10a00     A7 26 02 FB | 	rdlong	local01, fp
10a04     01 26 66 F0 | 	shl	local01, #1
10a08     11 14 06 F6 | 	mov	arg02, #17
10a0c     13 15 02 F1 | 	add	arg02, local01
10a10     78 4E 05 F1 | 	add	fp, #120
10a14     A7 16 02 F6 | 	mov	arg03, fp
10a18     7C 4E 85 F1 | 	sub	fp, #124
10a1c     09 12 06 F6 | 	mov	arg01, #9
10a20     01 18 06 F6 | 	mov	arg04, #1
10a24     02 1A 06 F6 | 	mov	arg05, #2
10a28     78 6B B1 FD | 	call	#__system___basic_get
10a2c     10 4E 05 F1 | 	add	fp, #16
10a30     A7 12 02 FB | 	rdlong	arg01, fp
10a34     0B 12 66 F0 | 	shl	arg01, #11
10a38     0C 4E 85 F1 | 	sub	fp, #12
10a3c     A7 26 02 FB | 	rdlong	local01, fp
10a40     01 26 66 F0 | 	shl	local01, #1
10a44     13 13 02 F1 | 	add	arg01, local01
10a48     78 4E 05 F1 | 	add	fp, #120
10a4c     A7 14 E2 FA | 	rdword	arg02, fp
10a50     7C 4E 85 F1 | 	sub	fp, #124
10a54     0F 14 66 F7 | 	signx	arg02, #15
10a58     D4 24 B1 FD | 	call	#_psdpoke
10a5c     04 4E 05 F1 | 	add	fp, #4
10a60     A7 26 02 FB | 	rdlong	local01, fp
10a64     01 26 06 F1 | 	add	local01, #1
10a68     A7 26 62 FC | 	wrlong	local01, fp
10a6c     02 00 00 FF 
10a70     01 26 56 F2 | 	cmps	local01, ##1025 wc
10a74     88 FF 9F CD |  if_b	jmp	#LR__1355
10a78     04 4E 85 F1 | 	sub	fp, #4
10a7c                 | '     close #9
10a7c     09 12 06 F6 | 	mov	arg01, #9
10a80     08 B0 B1 FD | 	call	#__system__close
10a84                 | '     return
10a84     E4 05 90 FD | 	jmp	#LR__1373
10a88                 | LR__1356
10a88                 | '     if wptr < ($80000 - 2048) then 
10a88     14 4E 05 F1 | 	add	fp, #20
10a8c     A7 26 02 FB | 	rdlong	local01, fp
10a90     14 4E 85 F1 | 	sub	fp, #20
10a94     FC 03 00 FF 
10a98     00 26 56 F2 | 	cmps	local01, ##522240 wc
10a9c     70 00 90 3D |  if_ae	jmp	#LR__1358
10aa0                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10aa0     04 4E 05 F1 | 	add	fp, #4
10aa4     A7 00 68 FC | 	wrlong	#0, fp
10aa8     04 4E 85 F1 | 	sub	fp, #4
10aac                 | LR__1357
10aac     10 4E 05 F1 | 	add	fp, #16
10ab0     A7 26 02 FB | 	rdlong	local01, fp
10ab4     0B 26 66 F0 | 	shl	local01, #11
10ab8     0C 4E 85 F1 | 	sub	fp, #12
10abc     A7 1A 02 FB | 	rdlong	arg05, fp
10ac0     0D 19 02 F6 | 	mov	arg04, arg05
10ac4     01 18 66 F0 | 	shl	arg04, #1
10ac8     0C 27 02 F1 | 	add	local01, arg04
10acc     10 4E 05 F1 | 	add	fp, #16
10ad0     A7 12 02 FB | 	rdlong	arg01, fp
10ad4     14 4E 85 F1 | 	sub	fp, #20
10ad8     01 1A 66 F0 | 	shl	arg05, #1
10adc     0D 13 02 F1 | 	add	arg01, arg05
10ae0     09 15 E2 FA | 	rdword	arg02, arg01
10ae4     13 13 02 F6 | 	mov	arg01, local01
10ae8     44 24 B1 FD | 	call	#_psdpoke
10aec     04 4E 05 F1 | 	add	fp, #4
10af0     A7 26 02 FB | 	rdlong	local01, fp
10af4     01 26 06 F1 | 	add	local01, #1
10af8     A7 26 62 FC | 	wrlong	local01, fp
10afc     04 4E 85 F1 | 	sub	fp, #4
10b00     02 00 00 FF 
10b04     00 26 56 F2 | 	cmps	local01, ##1024 wc
10b08     A0 FF 9F CD |  if_b	jmp	#LR__1357
10b0c     5C 05 90 FD | 	jmp	#LR__1373
10b10                 | LR__1358
10b10                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10b10     04 4E 05 F1 | 	add	fp, #4
10b14     A7 00 68 FC | 	wrlong	#0, fp
10b18     04 4E 85 F1 | 	sub	fp, #4
10b1c                 | LR__1359
10b1c     10 4E 05 F1 | 	add	fp, #16
10b20     A7 26 02 FB | 	rdlong	local01, fp
10b24     0B 26 66 F0 | 	shl	local01, #11
10b28     0C 4E 85 F1 | 	sub	fp, #12
10b2c     A7 1A 02 FB | 	rdlong	arg05, fp
10b30     0D 19 02 F6 | 	mov	arg04, arg05
10b34     01 18 66 F0 | 	shl	arg04, #1
10b38     0C 27 02 F1 | 	add	local01, arg04
10b3c     10 4E 05 F1 | 	add	fp, #16
10b40     A7 12 02 FB | 	rdlong	arg01, fp
10b44     14 4E 85 F1 | 	sub	fp, #20
10b48     01 1A 66 F0 | 	shl	arg05, #1
10b4c     0D 13 02 F1 | 	add	arg01, arg05
10b50     1C 25 B1 FD | 	call	#_psdpeek
10b54     FD 14 02 F6 | 	mov	arg02, result1
10b58     13 13 02 F6 | 	mov	arg01, local01
10b5c     D0 23 B1 FD | 	call	#_psdpoke
10b60     04 4E 05 F1 | 	add	fp, #4
10b64     A7 26 02 FB | 	rdlong	local01, fp
10b68     01 26 06 F1 | 	add	local01, #1
10b6c     A7 26 62 FC | 	wrlong	local01, fp
10b70     04 4E 85 F1 | 	sub	fp, #4
10b74     02 00 00 FF 
10b78     00 26 56 F2 | 	cmps	local01, ##1024 wc
10b7c     9C FF 9F CD |  if_b	jmp	#LR__1359
10b80                 | '     return 
10b80     E8 04 90 FD | 	jmp	#LR__1373
10b84                 | '   return
10b84                 | LR__1360
10b84                 | ' for i=0 to 15 : harm(i)=0: next i  
10b84     04 4E 05 F1 | 	add	fp, #4
10b88     A7 00 68 FC | 	wrlong	#0, fp
10b8c     97 16 48 FB | 	callpa	#(@LR__1362-@LR__1361)>>2,fcache_load_ptr_
10b90                 | LR__1361
10b90     A7 26 02 FB | 	rdlong	local01, fp
10b94     02 26 66 F0 | 	shl	local01, #2
10b98     38 4E 05 F1 | 	add	fp, #56
10b9c     A7 26 02 F1 | 	add	local01, fp
10ba0     13 01 68 FC | 	wrlong	#0, local01
10ba4     38 4E 85 F1 | 	sub	fp, #56
10ba8     A7 26 02 FB | 	rdlong	local01, fp
10bac     01 26 06 F1 | 	add	local01, #1
10bb0     A7 26 62 FC | 	wrlong	local01, fp
10bb4     10 26 56 F2 | 	cmps	local01, #16 wc
10bb8     D4 FF 9F CD |  if_b	jmp	#LR__1361
10bbc                 | LR__1362
10bbc     04 4E 85 F1 | 	sub	fp, #4
10bc0                 | ' for i=numpar to 2 step -1 
10bc0     A7 26 02 FB | 	rdlong	local01, fp
10bc4     04 4E 05 F1 | 	add	fp, #4
10bc8     A7 26 62 FC | 	wrlong	local01, fp
10bcc     04 4E 85 F1 | 	sub	fp, #4
10bd0                 | LR__1363
10bd0     80 C9 BF FD | 	call	#_pop
10bd4     2C 4E 05 F1 | 	add	fp, #44
10bd8     A7 FA 61 FC | 	wrlong	result1, fp
10bdc     04 4E 05 F1 | 	add	fp, #4
10be0     A7 FC 61 FC | 	wrlong	result2, fp
10be4     04 4E 05 F1 | 	add	fp, #4
10be8     A7 FE 61 FC | 	wrlong	result3, fp
10bec     30 4E 85 F1 | 	sub	fp, #48
10bf0     A7 26 02 FB | 	rdlong	local01, fp
10bf4     02 26 86 F1 | 	sub	local01, #2
10bf8     02 26 66 F0 | 	shl	local01, #2
10bfc     38 4E 05 F1 | 	add	fp, #56
10c00     A7 26 02 F1 | 	add	local01, fp
10c04     10 4E 85 F1 | 	sub	fp, #16
10c08     A7 12 02 F6 | 	mov	arg01, fp
10c0c     2C 4E 85 F1 | 	sub	fp, #44
10c10     E0 CB BF FD | 	call	#_converttofloat
10c14     13 FB 61 FC | 	wrlong	result1, local01
10c18     04 4E 05 F1 | 	add	fp, #4
10c1c     A7 26 02 FB | 	rdlong	local01, fp
10c20     01 26 86 F1 | 	sub	local01, #1
10c24     A7 26 62 FC | 	wrlong	local01, fp
10c28     04 4E 85 F1 | 	sub	fp, #4
10c2c     02 26 56 F2 | 	cmps	local01, #2 wc
10c30     9C FF 9F 3D |  if_ae	jmp	#LR__1363
10c34     1C C9 BF FD | 	call	#_pop
10c38     FF 26 02 F6 | 	mov	local01, result3
10c3c     2C 4E 05 F1 | 	add	fp, #44
10c40     A7 FA 61 FC | 	wrlong	result1, fp
10c44     04 4E 05 F1 | 	add	fp, #4
10c48     A7 FC 61 FC | 	wrlong	result2, fp
10c4c     04 4E 05 F1 | 	add	fp, #4
10c50     A7 26 62 FC | 	wrlong	local01, fp
10c54     08 4E 85 F1 | 	sub	fp, #8
10c58     A7 12 02 F6 | 	mov	arg01, fp
10c5c     2C 4E 85 F1 | 	sub	fp, #44
10c60     D4 CA BF FD | 	call	#_converttoint
10c64     10 4E 05 F1 | 	add	fp, #16
10c68     A7 FA 61 FC | 	wrlong	result1, fp
10c6c                 | ' t1=pop()
10c6c                 | ' channel=converttoint(t1) : : if channel>31 then return
10c6c     FD 26 02 F6 | 	mov	local01, result1
10c70     10 4E 85 F1 | 	sub	fp, #16
10c74     20 26 56 F2 | 	cmps	local01, #32 wc
10c78     F0 03 90 3D |  if_ae	jmp	#LR__1373
10c7c     20 4E 05 F1 | 	add	fp, #32
10c80     A7 00 68 FC | 	wrlong	#0, fp
10c84                 | ' max=0
10c84                 | ' if harm(0)<0 then
10c84     1C 4E 05 F1 | 	add	fp, #28
10c88     A7 12 02 FB | 	rdlong	arg01, fp
10c8c     3C 4E 85 F1 | 	sub	fp, #60
10c90     00 14 06 F6 | 	mov	arg02, #0
10c94     01 16 06 F6 | 	mov	arg03, #1
10c98     44 8D B1 FD | 	call	#__system___float_cmp
10c9c     00 FA 55 F2 | 	cmps	result1, #0 wc
10ca0     04 01 90 3D |  if_ae	jmp	#LR__1366
10ca4     3C 4E 05 F1 | 	add	fp, #60
10ca8     A7 FA 01 FB | 	rdlong	result1, fp
10cac     1F FA 05 F4 | 	bitl	result1, #31
10cb0     24 4E 85 F1 | 	sub	fp, #36
10cb4     A7 FA 61 FC | 	wrlong	result1, fp
10cb8     28 4E 05 F1 | 	add	fp, #40
10cbc     A7 FA 01 FB | 	rdlong	result1, fp
10cc0     1F FA 05 F4 | 	bitl	result1, #31
10cc4     24 4E 85 F1 | 	sub	fp, #36
10cc8     A7 FA 61 FC | 	wrlong	result1, fp
10ccc     20 4E 05 F1 | 	add	fp, #32
10cd0     00 C0 9F FF 
10cd4     A7 00 68 FC | 	wrlong	##1065353216, fp
10cd8     24 4E 85 F1 | 	sub	fp, #36
10cdc     A7 26 02 FB | 	rdlong	local01, fp
10ce0     28 4E 05 F1 | 	add	fp, #40
10ce4     A7 26 62 FC | 	wrlong	local01, fp
10ce8     24 4E 85 F1 | 	sub	fp, #36
10cec     A7 26 02 FB | 	rdlong	local01, fp
10cf0     28 4E 05 F1 | 	add	fp, #40
10cf4     A7 26 62 FC | 	wrlong	local01, fp
10cf8                 | '   harm(0)=1
10cf8                 | '   harm(1)=even
10cf8                 | '   harm(2)=odd
10cf8                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
10cf8     40 4E 85 F1 | 	sub	fp, #64
10cfc     A7 06 68 FC | 	wrlong	#3, fp
10d00                 | LR__1364
10d00     A7 1A 02 FB | 	rdlong	arg05, fp
10d04     0D 29 02 F6 | 	mov	local02, arg05
10d08     02 28 66 F0 | 	shl	local02, #2
10d0c     38 4E 05 F1 | 	add	fp, #56
10d10     A7 28 02 F1 | 	add	local02, fp
10d14     02 1A 86 F1 | 	sub	arg05, #2
10d18     02 1A 66 F0 | 	shl	arg05, #2
10d1c     A7 1A 02 F1 | 	add	arg05, fp
10d20     0D 13 02 FB | 	rdlong	arg01, arg05
10d24     24 4E 85 F1 | 	sub	fp, #36
10d28     A7 14 02 FB | 	rdlong	arg02, fp
10d2c     18 4E 85 F1 | 	sub	fp, #24
10d30     78 88 B1 FD | 	call	#__system___float_mul
10d34     14 FB 61 FC | 	wrlong	result1, local02
10d38     04 4E 05 F1 | 	add	fp, #4
10d3c     A7 2A 02 FB | 	rdlong	local03, fp
10d40     02 2A 06 F1 | 	add	local03, #2
10d44     A7 2A 62 FC | 	wrlong	local03, fp
10d48     10 2A 56 F2 | 	cmps	local03, #16 wc
10d4c     B0 FF 9F CD |  if_b	jmp	#LR__1364
10d50                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
10d50     A7 08 68 FC | 	wrlong	#4, fp
10d54                 | LR__1365
10d54     A7 2A 02 FB | 	rdlong	local03, fp
10d58     15 29 02 F6 | 	mov	local02, local03
10d5c     02 28 66 F0 | 	shl	local02, #2
10d60     38 4E 05 F1 | 	add	fp, #56
10d64     A7 28 02 F1 | 	add	local02, fp
10d68     02 2A 86 F1 | 	sub	local03, #2
10d6c     02 2A 66 F0 | 	shl	local03, #2
10d70     A7 2A 02 F1 | 	add	local03, fp
10d74     15 13 02 FB | 	rdlong	arg01, local03
10d78     20 4E 85 F1 | 	sub	fp, #32
10d7c     A7 14 02 FB | 	rdlong	arg02, fp
10d80     1C 4E 85 F1 | 	sub	fp, #28
10d84     24 88 B1 FD | 	call	#__system___float_mul
10d88     14 FB 61 FC | 	wrlong	result1, local02
10d8c     04 4E 05 F1 | 	add	fp, #4
10d90     A7 2A 02 FB | 	rdlong	local03, fp
10d94     02 2A 06 F1 | 	add	local03, #2
10d98     A7 2A 62 FC | 	wrlong	local03, fp
10d9c     0F 2A 56 F2 | 	cmps	local03, #15 wc
10da0     B0 FF 9F CD |  if_b	jmp	#LR__1365
10da4     04 4E 85 F1 | 	sub	fp, #4
10da8                 | LR__1366
10da8                 | ' if harm(0)>=0 then ' synthesize with harmonics
10da8     3C 4E 05 F1 | 	add	fp, #60
10dac     A7 12 02 FB | 	rdlong	arg01, fp
10db0     3C 4E 85 F1 | 	sub	fp, #60
10db4     00 14 06 F6 | 	mov	arg02, #0
10db8     01 16 66 F6 | 	neg	arg03, #1
10dbc     20 8C B1 FD | 	call	#__system___float_cmp
10dc0     00 FA 55 F2 | 	cmps	result1, #0 wc
10dc4     A4 02 90 CD |  if_b	jmp	#LR__1372
10dc8                 | '   for i=0 to 1023
10dc8     04 4E 05 F1 | 	add	fp, #4
10dcc     A7 00 68 FC | 	wrlong	#0, fp
10dd0     04 4E 85 F1 | 	sub	fp, #4
10dd4                 | LR__1367
10dd4     24 4E 05 F1 | 	add	fp, #36
10dd8     A7 00 68 FC | 	wrlong	#0, fp
10ddc                 | '     spl=0
10ddc                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10ddc     1C 4E 85 F1 | 	sub	fp, #28
10de0     A7 00 68 FC | 	wrlong	#0, fp
10de4                 | LR__1368
10de4     A7 28 02 FB | 	rdlong	local02, fp
10de8     02 28 66 F0 | 	shl	local02, #2
10dec     34 4E 05 F1 | 	add	fp, #52
10df0     A7 28 02 F1 | 	add	local02, fp
10df4     14 2B 02 FB | 	rdlong	local03, local02
10df8     87 E4 1D FF 
10dfc     DB 29 06 F6 | 	mov	local02, ##1003032539
10e00     38 4E 85 F1 | 	sub	fp, #56
10e04     A7 12 02 FB | 	rdlong	arg01, fp
10e08     04 4E 85 F1 | 	sub	fp, #4
10e0c     09 13 52 F6 | 	abs	arg01, arg01 wc
10e10     1F 2C C6 C9 |  if_b	decod	local04, #31
10e14     00 2C 06 36 |  if_ae	mov	local04, #0
10e18     8C 83 B1 FD | 	call	#__system___float_fromuns
10e1c     16 FB 61 F5 | 	xor	result1, local04
10e20     FD 14 02 F6 | 	mov	arg02, result1
10e24     14 13 02 F6 | 	mov	arg01, local02
10e28     80 87 B1 FD | 	call	#__system___float_mul
10e2c     FD 28 02 F6 | 	mov	local02, result1
10e30     08 4E 05 F1 | 	add	fp, #8
10e34     A7 12 02 FB | 	rdlong	arg01, fp
10e38     08 4E 85 F1 | 	sub	fp, #8
10e3c     01 12 06 F1 | 	add	arg01, #1
10e40     09 13 52 F6 | 	abs	arg01, arg01 wc
10e44     1F 2C C6 C9 |  if_b	decod	local04, #31
10e48     00 2C 06 36 |  if_ae	mov	local04, #0
10e4c     58 83 B1 FD | 	call	#__system___float_fromuns
10e50     16 FB 61 F5 | 	xor	result1, local04
10e54     FD 14 02 F6 | 	mov	arg02, result1
10e58     14 13 02 F6 | 	mov	arg01, local02
10e5c     4C 87 B1 FD | 	call	#__system___float_mul
10e60     FD 12 02 F6 | 	mov	arg01, result1
10e64     A4 90 B1 FD | 	call	#__system____builtin_sinf
10e68     FD 14 02 F6 | 	mov	arg02, result1
10e6c     15 13 02 F6 | 	mov	arg01, local03
10e70     38 87 B1 FD | 	call	#__system___float_mul
10e74     FD 14 02 F6 | 	mov	arg02, result1
10e78     24 4E 05 F1 | 	add	fp, #36
10e7c     A7 12 02 FB | 	rdlong	arg01, fp
10e80     24 4E 85 F1 | 	sub	fp, #36
10e84     54 83 B1 FD | 	call	#__system___float_add
10e88     24 4E 05 F1 | 	add	fp, #36
10e8c     A7 FA 61 FC | 	wrlong	result1, fp
10e90     1C 4E 85 F1 | 	sub	fp, #28
10e94     A7 16 02 FB | 	rdlong	arg03, fp
10e98     01 16 06 F1 | 	add	arg03, #1
10e9c     A7 16 62 FC | 	wrlong	arg03, fp
10ea0     10 16 56 F2 | 	cmps	arg03, #16 wc
10ea4     3C FF 9F CD |  if_b	jmp	#LR__1368
10ea8                 | '     if abs(spl)>max then max=abs(spl)  
10ea8     1C 4E 05 F1 | 	add	fp, #28
10eac     A7 12 02 FB | 	rdlong	arg01, fp
10eb0     1F 12 06 F4 | 	bitl	arg01, #31
10eb4     04 4E 85 F1 | 	sub	fp, #4
10eb8     A7 14 02 FB | 	rdlong	arg02, fp
10ebc     20 4E 85 F1 | 	sub	fp, #32
10ec0     01 16 66 F6 | 	neg	arg03, #1
10ec4     18 8B B1 FD | 	call	#__system___float_cmp
10ec8     01 FA 55 F2 | 	cmps	result1, #1 wc
10ecc     18 00 90 CD |  if_b	jmp	#LR__1369
10ed0     24 4E 05 F1 | 	add	fp, #36
10ed4     A7 FA 01 FB | 	rdlong	result1, fp
10ed8     1F FA 05 F4 | 	bitl	result1, #31
10edc     04 4E 85 F1 | 	sub	fp, #4
10ee0     A7 FA 61 FC | 	wrlong	result1, fp
10ee4     20 4E 85 F1 | 	sub	fp, #32
10ee8                 | LR__1369
10ee8     04 4E 05 F1 | 	add	fp, #4
10eec     A7 2A 02 FB | 	rdlong	local03, fp
10ef0     01 2A 06 F1 | 	add	local03, #1
10ef4     A7 2A 62 FC | 	wrlong	local03, fp
10ef8     04 4E 85 F1 | 	sub	fp, #4
10efc     02 00 00 FF 
10f00     00 2A 56 F2 | 	cmps	local03, ##1024 wc
10f04     CC FE 9F CD |  if_b	jmp	#LR__1367
10f08                 | '   for i=0 to 1023
10f08     04 4E 05 F1 | 	add	fp, #4
10f0c     A7 00 68 FC | 	wrlong	#0, fp
10f10     04 4E 85 F1 | 	sub	fp, #4
10f14                 | LR__1370
10f14     24 4E 05 F1 | 	add	fp, #36
10f18     A7 00 68 FC | 	wrlong	#0, fp
10f1c                 | '     spl=0
10f1c                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
10f1c     1C 4E 85 F1 | 	sub	fp, #28
10f20     A7 00 68 FC | 	wrlong	#0, fp
10f24                 | LR__1371
10f24     A7 2A 02 FB | 	rdlong	local03, fp
10f28     02 2A 66 F0 | 	shl	local03, #2
10f2c     34 4E 05 F1 | 	add	fp, #52
10f30     A7 2A 02 F1 | 	add	local03, fp
10f34     15 2B 02 FB | 	rdlong	local03, local03
10f38     1C 4E 85 F1 | 	sub	fp, #28
10f3c     A7 14 02 FB | 	rdlong	arg02, fp
10f40     20 4E 85 F1 | 	sub	fp, #32
10f44     58 7F 23 FF 
10f48     00 12 06 F6 | 	mov	arg01, ##1191096320
10f4c     60 88 B1 FD | 	call	#__system___float_div
10f50     FD 14 02 F6 | 	mov	arg02, result1
10f54     15 13 02 F6 | 	mov	arg01, local03
10f58     50 86 B1 FD | 	call	#__system___float_mul
10f5c     FD 2A 02 F6 | 	mov	local03, result1
10f60     87 E4 1D FF 
10f64     DB 29 06 F6 | 	mov	local02, ##1003032539
10f68     04 4E 05 F1 | 	add	fp, #4
10f6c     A7 12 02 FB | 	rdlong	arg01, fp
10f70     04 4E 85 F1 | 	sub	fp, #4
10f74     09 13 52 F6 | 	abs	arg01, arg01 wc
10f78     1F 2C C6 C9 |  if_b	decod	local04, #31
10f7c     00 2C 06 36 |  if_ae	mov	local04, #0
10f80     24 82 B1 FD | 	call	#__system___float_fromuns
10f84     16 FB 61 F5 | 	xor	result1, local04
10f88     FD 14 02 F6 | 	mov	arg02, result1
10f8c     14 13 02 F6 | 	mov	arg01, local02
10f90     18 86 B1 FD | 	call	#__system___float_mul
10f94     FD 28 02 F6 | 	mov	local02, result1
10f98     08 4E 05 F1 | 	add	fp, #8
10f9c     A7 12 02 FB | 	rdlong	arg01, fp
10fa0     08 4E 85 F1 | 	sub	fp, #8
10fa4     01 12 06 F1 | 	add	arg01, #1
10fa8     09 13 52 F6 | 	abs	arg01, arg01 wc
10fac     1F 2C C6 C9 |  if_b	decod	local04, #31
10fb0     00 2C 06 36 |  if_ae	mov	local04, #0
10fb4     F0 81 B1 FD | 	call	#__system___float_fromuns
10fb8     16 FB 61 F5 | 	xor	result1, local04
10fbc     FD 14 02 F6 | 	mov	arg02, result1
10fc0     14 13 02 F6 | 	mov	arg01, local02
10fc4     E4 85 B1 FD | 	call	#__system___float_mul
10fc8     FD 12 02 F6 | 	mov	arg01, result1
10fcc     3C 8F B1 FD | 	call	#__system____builtin_sinf
10fd0     FD 14 02 F6 | 	mov	arg02, result1
10fd4     15 13 02 F6 | 	mov	arg01, local03
10fd8     D0 85 B1 FD | 	call	#__system___float_mul
10fdc     FD 14 02 F6 | 	mov	arg02, result1
10fe0     24 4E 05 F1 | 	add	fp, #36
10fe4     A7 12 02 FB | 	rdlong	arg01, fp
10fe8     24 4E 85 F1 | 	sub	fp, #36
10fec     EC 81 B1 FD | 	call	#__system___float_add
10ff0     24 4E 05 F1 | 	add	fp, #36
10ff4     A7 FA 61 FC | 	wrlong	result1, fp
10ff8     1C 4E 85 F1 | 	sub	fp, #28
10ffc     A7 2A 02 FB | 	rdlong	local03, fp
11000     01 2A 06 F1 | 	add	local03, #1
11004     A7 2A 62 FC | 	wrlong	local03, fp
11008     10 2A 56 F2 | 	cmps	local03, #16 wc
1100c     14 FF 9F CD |  if_b	jmp	#LR__1371
11010     08 4E 05 F1 | 	add	fp, #8
11014     A7 2A 02 FB | 	rdlong	local03, fp
11018     0B 2A 66 F0 | 	shl	local03, #11
1101c     0C 4E 85 F1 | 	sub	fp, #12
11020     A7 28 02 FB | 	rdlong	local02, fp
11024     01 28 66 F0 | 	shl	local02, #1
11028     14 2B 02 F1 | 	add	local03, local02
1102c     20 4E 05 F1 | 	add	fp, #32
11030     A7 12 02 FB | 	rdlong	arg01, fp
11034     24 4E 85 F1 | 	sub	fp, #36
11038     01 14 06 F6 | 	mov	arg02, #1
1103c     34 8A B1 FD | 	call	#__system___float_tointeger
11040     FD 14 02 F6 | 	mov	arg02, result1
11044     15 13 02 F6 | 	mov	arg01, local03
11048     E4 1E B1 FD | 	call	#_psdpoke
1104c     04 4E 05 F1 | 	add	fp, #4
11050     A7 2A 02 FB | 	rdlong	local03, fp
11054     01 2A 06 F1 | 	add	local03, #1
11058     A7 2A 62 FC | 	wrlong	local03, fp
1105c     04 4E 85 F1 | 	sub	fp, #4
11060     02 00 00 FF 
11064     00 2A 56 F2 | 	cmps	local03, ##1024 wc
11068     A8 FE 9F CD |  if_b	jmp	#LR__1370
1106c                 | LR__1372
1106c                 | LR__1373
1106c     A7 F0 03 F6 | 	mov	ptra, fp
11070     B2 00 A0 FD | 	call	#popregs_
11074                 | _do_defsnd_ret
11074     2D 00 64 FD | 	ret
11078                 | 
11078                 | ' 
11078                 | ' '-------------------- defsprite
11078                 | ' 
11078                 | ' sub do_defsprite
11078                 | _do_defsprite
11078     07 4A 05 F6 | 	mov	COUNT_, #7
1107c     A8 00 A0 FD | 	call	#pushregs_
11080     60 F0 07 F1 | 	add	ptra, #96
11084     CC C4 BF FD | 	call	#_pop
11088     FD 16 02 F6 | 	mov	arg03, result1
1108c     FE 14 02 F6 | 	mov	arg02, result2
11090     FF 12 02 F6 | 	mov	arg01, result3
11094     30 4E 05 F1 | 	add	fp, #48
11098     A7 16 62 FC | 	wrlong	arg03, fp
1109c     04 4E 05 F1 | 	add	fp, #4
110a0     A7 14 62 FC | 	wrlong	arg02, fp
110a4     04 4E 05 F1 | 	add	fp, #4
110a8     A7 12 62 FC | 	wrlong	arg01, fp
110ac     38 4E 85 F1 | 	sub	fp, #56
110b0     A0 C4 BF FD | 	call	#_pop
110b4     FD 16 02 F6 | 	mov	arg03, result1
110b8     FE 14 02 F6 | 	mov	arg02, result2
110bc     FF 12 02 F6 | 	mov	arg01, result3
110c0     24 4E 05 F1 | 	add	fp, #36
110c4     A7 16 62 FC | 	wrlong	arg03, fp
110c8     04 4E 05 F1 | 	add	fp, #4
110cc     A7 14 62 FC | 	wrlong	arg02, fp
110d0     04 4E 05 F1 | 	add	fp, #4
110d4     A7 12 62 FC | 	wrlong	arg01, fp
110d8     2C 4E 85 F1 | 	sub	fp, #44
110dc     74 C4 BF FD | 	call	#_pop
110e0     FD 16 02 F6 | 	mov	arg03, result1
110e4     FE 14 02 F6 | 	mov	arg02, result2
110e8     FF 12 02 F6 | 	mov	arg01, result3
110ec     18 4E 05 F1 | 	add	fp, #24
110f0     A7 16 62 FC | 	wrlong	arg03, fp
110f4     04 4E 05 F1 | 	add	fp, #4
110f8     A7 14 62 FC | 	wrlong	arg02, fp
110fc     04 4E 05 F1 | 	add	fp, #4
11100     A7 12 62 FC | 	wrlong	arg01, fp
11104     20 4E 85 F1 | 	sub	fp, #32
11108     48 C4 BF FD | 	call	#_pop
1110c     FD 16 02 F6 | 	mov	arg03, result1
11110     FE 14 02 F6 | 	mov	arg02, result2
11114     FF 12 02 F6 | 	mov	arg01, result3
11118     0C 4E 05 F1 | 	add	fp, #12
1111c     A7 16 62 FC | 	wrlong	arg03, fp
11120     04 4E 05 F1 | 	add	fp, #4
11124     A7 14 62 FC | 	wrlong	arg02, fp
11128     04 4E 05 F1 | 	add	fp, #4
1112c     A7 12 62 FC | 	wrlong	arg01, fp
11130     14 4E 85 F1 | 	sub	fp, #20
11134     1C C4 BF FD | 	call	#_pop
11138     FF 16 02 F6 | 	mov	arg03, result3
1113c     A7 FA 61 FC | 	wrlong	result1, fp
11140     04 4E 05 F1 | 	add	fp, #4
11144     A7 FC 61 FC | 	wrlong	result2, fp
11148     04 4E 05 F1 | 	add	fp, #4
1114c     A7 16 62 FC | 	wrlong	arg03, fp
11150     08 4E 85 F1 | 	sub	fp, #8
11154     A7 12 02 F6 | 	mov	arg01, fp
11158     DC C5 BF FD | 	call	#_converttoint
1115c     3C 4E 05 F1 | 	add	fp, #60
11160     A7 FA 61 FC | 	wrlong	result1, fp
11164     30 4E 85 F1 | 	sub	fp, #48
11168     A7 12 02 F6 | 	mov	arg01, fp
1116c     0C 4E 85 F1 | 	sub	fp, #12
11170     C4 C5 BF FD | 	call	#_converttoint
11174     40 4E 05 F1 | 	add	fp, #64
11178     A7 FA 61 FC | 	wrlong	result1, fp
1117c     28 4E 85 F1 | 	sub	fp, #40
11180     A7 12 02 F6 | 	mov	arg01, fp
11184     18 4E 85 F1 | 	sub	fp, #24
11188     AC C5 BF FD | 	call	#_converttoint
1118c     44 4E 05 F1 | 	add	fp, #68
11190     A7 FA 61 FC | 	wrlong	result1, fp
11194     20 4E 85 F1 | 	sub	fp, #32
11198     A7 12 02 F6 | 	mov	arg01, fp
1119c     24 4E 85 F1 | 	sub	fp, #36
111a0     94 C5 BF FD | 	call	#_converttoint
111a4     48 4E 05 F1 | 	add	fp, #72
111a8     A7 FA 61 FC | 	wrlong	result1, fp
111ac     18 4E 85 F1 | 	sub	fp, #24
111b0     A7 12 02 F6 | 	mov	arg01, fp
111b4     30 4E 85 F1 | 	sub	fp, #48
111b8     7C C5 BF FD | 	call	#_converttoint
111bc     4C 4E 05 F1 | 	add	fp, #76
111c0     A7 FA 61 FC | 	wrlong	result1, fp
111c4                 | ' 
111c4                 | ' t5=pop()
111c4                 | ' t4=pop()
111c4                 | ' t3=pop()
111c4                 | ' t2=pop()
111c4                 | ' t1=pop()
111c4                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
111c4                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
111c4     10 4E 85 F1 | 	sub	fp, #16
111c8     A7 16 02 FB | 	rdlong	arg03, fp
111cc     3C 4E 85 F1 | 	sub	fp, #60
111d0     02 16 66 F0 | 	shl	arg03, #2
111d4     52 00 00 FF 
111d8     54 E4 05 F1 | 	add	objptr, ##42068
111dc     F2 16 02 F1 | 	add	arg03, objptr
111e0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
111e4     52 00 00 FF 
111e8     54 E4 85 F1 | 	sub	objptr, ##42068
111ec     2C 00 90 AD |  if_e	jmp	#LR__1380
111f0     3C 4E 05 F1 | 	add	fp, #60
111f4     A7 16 02 FB | 	rdlong	arg03, fp
111f8     3C 4E 85 F1 | 	sub	fp, #60
111fc     02 16 66 F0 | 	shl	arg03, #2
11200     52 00 00 FF 
11204     54 E4 05 F1 | 	add	objptr, ##42068
11208     F2 16 02 F1 | 	add	arg03, objptr
1120c     0B 13 02 FB | 	rdlong	arg01, arg03
11210     52 00 00 FF 
11214     54 E4 85 F1 | 	sub	objptr, ##42068
11218     F4 97 B1 FD | 	call	#__system___gc_free
1121c                 | LR__1380
1121c     3C 4E 05 F1 | 	add	fp, #60
11220     A7 26 02 FB | 	rdlong	local01, fp
11224     0C 4E 05 F1 | 	add	fp, #12
11228     A7 16 02 FB | 	rdlong	arg03, fp
1122c     04 4E 05 F1 | 	add	fp, #4
11230     A7 14 02 FB | 	rdlong	arg02, fp
11234     0A 17 02 FD | 	qmul	arg03, arg02
11238     02 26 66 F0 | 	shl	local01, #2
1123c     52 00 00 FF 
11240     54 E4 05 F1 | 	add	objptr, ##42068
11244     F2 26 02 F1 | 	add	local01, objptr
11248     4C 4E 85 F1 | 	sub	fp, #76
1124c     52 00 00 FF 
11250     54 E4 85 F1 | 	sub	objptr, ##42068
11254     18 12 62 FD | 	getqx	arg01
11258     78 96 B1 FD | 	call	#__system___gc_alloc_managed
1125c     13 FB 61 FC | 	wrlong	result1, local01
11260                 | ' for y=a3 to a3+a5-1
11260     44 4E 05 F1 | 	add	fp, #68
11264     A7 28 02 FB | 	rdlong	local02, fp
11268     0C 4E 05 F1 | 	add	fp, #12
1126c     A7 28 62 FC | 	wrlong	local02, fp
11270     0C 4E 85 F1 | 	sub	fp, #12
11274     A7 2A 02 FB | 	rdlong	local03, fp
11278     08 4E 05 F1 | 	add	fp, #8
1127c     A7 2C 02 FB | 	rdlong	local04, fp
11280     4C 4E 85 F1 | 	sub	fp, #76
11284     16 2B 02 F1 | 	add	local03, local04
11288                 | LR__1381
11288     50 4E 05 F1 | 	add	fp, #80
1128c     A7 28 02 FB | 	rdlong	local02, fp
11290     50 4E 85 F1 | 	sub	fp, #80
11294     15 29 52 F2 | 	cmps	local02, local03 wc
11298     F4 00 90 3D |  if_ae	jmp	#LR__1384
1129c                 | '   for x=a2 to a4+a2-1
1129c     40 4E 05 F1 | 	add	fp, #64
112a0     A7 26 02 FB | 	rdlong	local01, fp
112a4     14 4E 05 F1 | 	add	fp, #20
112a8     A7 26 62 FC | 	wrlong	local01, fp
112ac     0C 4E 85 F1 | 	sub	fp, #12
112b0     A7 2E 02 FB | 	rdlong	local05, fp
112b4     08 4E 85 F1 | 	sub	fp, #8
112b8     A7 30 02 FB | 	rdlong	local06, fp
112bc     40 4E 85 F1 | 	sub	fp, #64
112c0     18 2F 02 F1 | 	add	local05, local06
112c4                 | LR__1382
112c4     54 4E 05 F1 | 	add	fp, #84
112c8     A7 26 02 FB | 	rdlong	local01, fp
112cc     54 4E 85 F1 | 	sub	fp, #84
112d0     17 27 52 F2 | 	cmps	local01, local05 wc
112d4     A0 00 90 3D |  if_ae	jmp	#LR__1383
112d8     3C 4E 05 F1 | 	add	fp, #60
112dc     A7 30 02 FB | 	rdlong	local06, fp
112e0     18 4E 05 F1 | 	add	fp, #24
112e4     A7 2C 02 FB | 	rdlong	local04, fp
112e8     14 4E 85 F1 | 	sub	fp, #20
112ec     A7 28 02 FB | 	rdlong	local02, fp
112f0     10 4E 05 F1 | 	add	fp, #16
112f4     A7 26 02 FB | 	rdlong	local01, fp
112f8     13 17 02 F6 | 	mov	arg03, local01
112fc     0C 4E 85 F1 | 	sub	fp, #12
11300     A7 14 02 FB | 	rdlong	arg02, fp
11304     0A 17 82 F1 | 	sub	arg03, arg02
11308     04 4E 05 F1 | 	add	fp, #4
1130c     A7 14 02 FB | 	rdlong	arg02, fp
11310     0A 17 02 FD | 	qmul	arg03, arg02
11314     02 30 66 F0 | 	shl	local06, #2
11318     52 00 00 FF 
1131c     54 E4 05 F1 | 	add	objptr, ##42068
11320     F2 30 02 F1 | 	add	local06, objptr
11324     18 31 02 FB | 	rdlong	local06, local06
11328     16 33 02 F6 | 	mov	local07, local04
1132c     14 33 82 F1 | 	sub	local07, local02
11330     52 00 00 FF 
11334     54 E4 85 F1 | 	sub	objptr, ##42068
11338     F2 12 02 FB | 	rdlong	arg01, objptr
1133c     16 13 02 F1 | 	add	arg01, local04
11340     48 4E 85 F1 | 	sub	fp, #72
11344     0A 26 66 F0 | 	shl	local01, #10
11348     13 13 02 F1 | 	add	arg01, local01
1134c     18 2C 62 FD | 	getqx	local04
11350     16 33 02 F1 | 	add	local07, local04
11354     18 33 02 F1 | 	add	local07, local06
11358     64 1C B1 FD | 	call	#_pspeek
1135c     19 FB 41 FC | 	wrbyte	result1, local07
11360     54 4E 05 F1 | 	add	fp, #84
11364     A7 32 02 FB | 	rdlong	local07, fp
11368     01 32 06 F1 | 	add	local07, #1
1136c     A7 32 62 FC | 	wrlong	local07, fp
11370     54 4E 85 F1 | 	sub	fp, #84
11374     4C FF 9F FD | 	jmp	#LR__1382
11378                 | LR__1383
11378     50 4E 05 F1 | 	add	fp, #80
1137c     A7 32 02 FB | 	rdlong	local07, fp
11380     01 32 06 F1 | 	add	local07, #1
11384     A7 32 62 FC | 	wrlong	local07, fp
11388     50 4E 85 F1 | 	sub	fp, #80
1138c     F8 FE 9F FD | 	jmp	#LR__1381
11390                 | LR__1384
11390     3C 4E 05 F1 | 	add	fp, #60
11394     A7 32 02 FB | 	rdlong	local07, fp
11398     19 13 02 F6 | 	mov	arg01, local07
1139c     3C 4E 85 F1 | 	sub	fp, #60
113a0     02 32 66 F0 | 	shl	local07, #2
113a4     52 00 00 FF 
113a8     54 E4 05 F1 | 	add	objptr, ##42068
113ac     F2 32 02 F1 | 	add	local07, objptr
113b0     19 15 02 FB | 	rdlong	arg02, local07
113b4     52 00 00 FF 
113b8     54 E4 85 F1 | 	sub	objptr, ##42068
113bc     40 29 B1 FD | 	call	#_hg010b_spin2_setspriteptr
113c0     3C 4E 05 F1 | 	add	fp, #60
113c4     A7 12 02 FB | 	rdlong	arg01, fp
113c8     0C 4E 05 F1 | 	add	fp, #12
113cc     A7 14 02 FB | 	rdlong	arg02, fp
113d0     04 4E 05 F1 | 	add	fp, #4
113d4     A7 16 02 FB | 	rdlong	arg03, fp
113d8     4C 4E 85 F1 | 	sub	fp, #76
113dc     B0 29 B1 FD | 	call	#_hg010b_spin2_setspritesize
113e0     A7 F0 03 F6 | 	mov	ptra, fp
113e4     B2 00 A0 FD | 	call	#popregs_
113e8                 | _do_defsprite_ret
113e8     2D 00 64 FD | 	ret
113ec                 | 
113ec                 | ' 
113ec                 | ' '-------------------- deg
113ec                 | ' 
113ec                 | ' sub do_deg
113ec                 | _do_deg
113ec     52 00 00 FF 
113f0     A8 E4 05 F1 | 	add	objptr, ##42152
113f4     7D 47 9E FF 
113f8     F2 6A 68 FC | 	wrlong	##1016003125, objptr
113fc     04 E4 05 F1 | 	add	objptr, #4
11400     97 32 A1 FF 
11404     F2 C2 69 FC | 	wrlong	##1113927393, objptr
11408     52 00 00 FF 
1140c     AC E4 85 F1 | 	sub	objptr, ##42156
11410                 | _do_deg_ret
11410     2D 00 64 FD | 	ret
11414                 | 
11414                 | ' 
11414                 | ' '-------------------- delete
11414                 | ' 
11414                 | ' sub do_delete
11414                 | _do_delete
11414     05 4A 05 F6 | 	mov	COUNT_, #5
11418     A8 00 A0 FD | 	call	#pushregs_
1141c     34 C1 BF FD | 	call	#_pop
11420     FE 18 02 F6 | 	mov	arg04, result2
11424     FF 16 02 F6 | 	mov	arg03, result3
11428     FD 26 02 F6 | 	mov	local01, result1
1142c     0C 29 02 F6 | 	mov	local02, arg04
11430     0B 2B 02 F6 | 	mov	local03, arg03
11434                 | ' 
11434                 | ' t1=pop()
11434                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11434     2B 2A 0E F2 | 	cmp	local03, #43 wz
11438     10 00 90 5D |  if_ne	jmp	#LR__1390
1143c     13 13 02 F6 | 	mov	arg01, local01
11440     88 C2 BF FD | 	call	#_convertstring
11444     FD 26 02 F6 | 	mov	local01, result1
11448     1F 2A 06 F6 | 	mov	local03, #31
1144c                 | LR__1390
1144c                 | ' if t1.result_type<>result_string then printerror(15): return
1144c     1F 2A 0E F2 | 	cmp	local03, #31 wz
11450     10 00 90 AD |  if_e	jmp	#LR__1391
11454     0F 12 06 F6 | 	mov	arg01, #15
11458     00 14 06 F6 | 	mov	arg02, #0
1145c     E8 18 B1 FD | 	call	#_printerror
11460     E0 00 90 FD | 	jmp	#LR__1395
11464                 | LR__1391
11464                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
11464     4A 00 00 FF 
11468     94 E4 05 F1 | 	add	objptr, ##38036
1146c     F2 12 02 FB | 	rdlong	arg01, objptr
11470     4A 00 00 FF 
11474     94 E4 85 F1 | 	sub	objptr, ##38036
11478     B5 01 00 FF 
1147c     41 15 06 F6 | 	mov	arg02, ##@LR__5883
11480     D8 52 B1 FD | 	call	#__system___string_cmp
11484     00 FA 0D F2 | 	cmp	result1, #0 wz
11488     34 00 90 AD |  if_e	jmp	#LR__1392
1148c     4A 00 00 FF 
11490     94 E4 05 F1 | 	add	objptr, ##38036
11494     F2 12 02 FB | 	rdlong	arg01, objptr
11498     4A 00 00 FF 
1149c     94 E4 85 F1 | 	sub	objptr, ##38036
114a0     B5 01 00 FF 
114a4     43 15 06 F6 | 	mov	arg02, ##@LR__5884
114a8     E4 52 B1 FD | 	call	#__system___string_concat
114ac     FD 12 02 F6 | 	mov	arg01, result1
114b0     13 15 02 F6 | 	mov	arg02, local01
114b4     D8 52 B1 FD | 	call	#__system___string_concat
114b8     FD 2C 02 F6 | 	mov	local04, result1
114bc     14 00 90 FD | 	jmp	#LR__1393
114c0                 | LR__1392
114c0     B5 01 00 FF 
114c4     45 13 06 F6 | 	mov	arg01, ##@LR__5885
114c8     13 15 02 F6 | 	mov	arg02, local01
114cc     C0 52 B1 FD | 	call	#__system___string_concat
114d0     FD 2C 02 F6 | 	mov	local04, result1
114d4                 | LR__1393
114d4     16 13 02 F6 | 	mov	arg01, local04
114d8     24 7A B1 FD | 	call	#__system___remove
114dc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
114e0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
114e4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
114e8     FD 2E 0A F6 | 	mov	local05, result1 wz
114ec                 | ' kill filename$
114ec                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
114ec     54 00 90 AD |  if_e	jmp	#LR__1394
114f0     00 12 06 F6 | 	mov	arg01, #0
114f4     64 AF B1 FD | 	call	#__system___getiolock_0603
114f8     FD 12 02 F6 | 	mov	arg01, result1
114fc     34 52 B1 FD | 	call	#__system___lockmem
11500     B5 01 00 FF 
11504     47 15 06 F6 | 	mov	arg02, ##@LR__5886
11508     00 12 06 F6 | 	mov	arg01, #0
1150c     00 16 06 F6 | 	mov	arg03, #0
11510     14 5F B1 FD | 	call	#__system___basic_print_string
11514     00 12 06 F6 | 	mov	arg01, #0
11518     17 15 02 F6 | 	mov	arg02, local05
1151c     00 16 06 F6 | 	mov	arg03, #0
11520     0A 18 06 F6 | 	mov	arg04, #10
11524     44 5F B1 FD | 	call	#__system___basic_print_integer
11528     00 12 06 F6 | 	mov	arg01, #0
1152c     0A 14 06 F6 | 	mov	arg02, #10
11530     00 16 06 F6 | 	mov	arg03, #0
11534     98 5E B1 FD | 	call	#__system___basic_print_char
11538     00 12 06 F6 | 	mov	arg01, #0
1153c     1C AF B1 FD | 	call	#__system___getiolock_0603
11540     FD 00 68 FC | 	wrlong	#0, result1
11544                 | LR__1394
11544                 | LR__1395
11544     A7 F0 03 F6 | 	mov	ptra, fp
11548     B2 00 A0 FD | 	call	#popregs_
1154c                 | _do_delete_ret
1154c     2D 00 64 FD | 	ret
11550                 | 
11550                 | ' 
11550                 | ' '-------------------- dir
11550                 | ' 
11550                 | ' sub do_dir
11550                 | _do_dir
11550     13 4A 05 F6 | 	mov	COUNT_, #19
11554     A8 00 A0 FD | 	call	#pushregs_
11558     01 00 00 FF 
1155c     38 F0 07 F1 | 	add	ptra, ##568
11560                 | ' 
11560                 | ' print "Current directory: "; currentdir$ 
11560     00 12 06 F6 | 	mov	arg01, #0
11564     F4 AE B1 FD | 	call	#__system___getiolock_0603
11568     FD 12 02 F6 | 	mov	arg01, result1
1156c     C4 51 B1 FD | 	call	#__system___lockmem
11570     B5 01 00 FF 
11574     7F 15 06 F6 | 	mov	arg02, ##@LR__5887
11578     00 12 06 F6 | 	mov	arg01, #0
1157c     00 16 06 F6 | 	mov	arg03, #0
11580     A4 5E B1 FD | 	call	#__system___basic_print_string
11584     4A 00 00 FF 
11588     94 E4 05 F1 | 	add	objptr, ##38036
1158c     F2 14 02 FB | 	rdlong	arg02, objptr
11590     4A 00 00 FF 
11594     94 E4 85 F1 | 	sub	objptr, ##38036
11598     00 12 06 F6 | 	mov	arg01, #0
1159c     00 16 06 F6 | 	mov	arg03, #0
115a0     84 5E B1 FD | 	call	#__system___basic_print_string
115a4     00 12 06 F6 | 	mov	arg01, #0
115a8     0A 14 06 F6 | 	mov	arg02, #10
115ac     00 16 06 F6 | 	mov	arg03, #0
115b0     1C 5E B1 FD | 	call	#__system___basic_print_char
115b4     01 26 06 F6 | 	mov	local01, #1
115b8     00 12 06 F6 | 	mov	arg01, #0
115bc     9C AE B1 FD | 	call	#__system___getiolock_0603
115c0     FD 00 68 FC | 	wrlong	#0, result1
115c4     00 28 06 F6 | 	mov	local02, #0
115c8     00 2A 06 F6 | 	mov	local03, #0
115cc                 | ' px=0
115cc                 | ' for i=0 to 127: filelist(i)="" : next i
115cc     00 2C 06 F6 | 	mov	local04, #0
115d0     1C 4E 05 F1 | 	add	fp, #28
115d4     97 12 48 FB | 	callpa	#(@LR__1401-@LR__1400)>>2,fcache_load_ptr_
115d8                 | LR__1400
115d8     16 2F 02 F6 | 	mov	local05, local04
115dc     02 2E 66 F0 | 	shl	local05, #2
115e0     A7 2E 02 F1 | 	add	local05, fp
115e4     B5 01 00 FF 
115e8     93 31 06 F6 | 	mov	local06, ##@LR__5888
115ec     17 31 62 FC | 	wrlong	local06, local05
115f0     01 2C 06 F1 | 	add	local04, #1
115f4     80 2C 56 F2 | 	cmps	local04, #128 wc
115f8     DC FF 9F CD |  if_b	jmp	#LR__1400
115fc                 | LR__1401
115fc     1C 4E 85 F1 | 	sub	fp, #28
11600     B5 01 00 FF 
11604     94 13 06 F6 | 	mov	arg01, ##@LR__5889
11608     10 14 06 F6 | 	mov	arg02, #16
1160c     84 AF B1 FD | 	call	#__system___basic_dir
11610     FD 32 02 F6 | 	mov	local07, result1
11614     00 34 06 F6 | 	mov	local08, #0
11618                 | ' filename=dir$("*", fbDirectory)
11618                 | ' n=0
11618                 | ' while filename <> "" andalso filename <> nil andalso n<128
11618                 | LR__1402
11618     B5 01 00 FF 
1161c     96 37 06 F6 | 	mov	local09, ##@LR__5890
11620     19 13 02 F6 | 	mov	arg01, local07
11624     1B 15 02 F6 | 	mov	arg02, local09
11628     30 51 B1 FD | 	call	#__system___string_cmp
1162c     00 FA 0D F2 | 	cmp	result1, #0 wz
11630     68 00 90 AD |  if_e	jmp	#LR__1403
11634     00 36 06 F6 | 	mov	local09, #0
11638     19 13 02 F6 | 	mov	arg01, local07
1163c     00 14 06 F6 | 	mov	arg02, #0
11640     18 51 B1 FD | 	call	#__system___string_cmp
11644     00 FA 0D F2 | 	cmp	result1, #0 wz
11648     50 00 90 AD |  if_e	jmp	#LR__1403
1164c     80 34 56 F2 | 	cmps	local08, #128 wc
11650     48 00 90 3D |  if_ae	jmp	#LR__1403
11654     B5 01 00 FF 
11658     97 13 06 F6 | 	mov	arg01, ##@LR__5891
1165c     19 15 02 F6 | 	mov	arg02, local07
11660     2C 51 B1 FD | 	call	#__system___string_concat
11664     FD 32 02 F6 | 	mov	local07, result1
11668     1A 2F 02 F6 | 	mov	local05, local08
1166c     02 2E 66 F0 | 	shl	local05, #2
11670     1C 4E 05 F1 | 	add	fp, #28
11674     A7 2E 02 F1 | 	add	local05, fp
11678     17 33 62 FC | 	wrlong	local07, local05
1167c     01 34 06 F1 | 	add	local08, #1
11680     00 2E 06 F6 | 	mov	local05, #0
11684     00 12 06 F6 | 	mov	arg01, #0
11688     00 14 06 F6 | 	mov	arg02, #0
1168c     1C 4E 85 F1 | 	sub	fp, #28
11690     00 AF B1 FD | 	call	#__system___basic_dir
11694     FD 32 02 F6 | 	mov	local07, result1
11698     7C FF 9F FD | 	jmp	#LR__1402
1169c                 | LR__1403
1169c                 | ' for i=0 to n-1			' now sort this
1169c     00 2C 06 F6 | 	mov	local04, #0
116a0     1A 39 02 F6 | 	mov	local10, local08
116a4                 | LR__1404
116a4     1C 2D 52 F2 | 	cmps	local04, local10 wc
116a8     DC 00 90 3D |  if_ae	jmp	#LR__1408
116ac     00 3A 06 F6 | 	mov	local11, #0
116b0                 | '   swapped=false
116b0                 | '   for j=0 to n-i-2
116b0     00 3C 06 F6 | 	mov	local12, #0
116b4     1A 3F 02 F6 | 	mov	local13, local08
116b8     16 3F 82 F1 | 	sub	local13, local04
116bc     01 3E 86 F1 | 	sub	local13, #1
116c0                 | LR__1405
116c0     1F 3D 52 F2 | 	cmps	local12, local13 wc
116c4     B0 00 90 3D |  if_ae	jmp	#LR__1407
116c8                 | '     if filelist(j) > filelist(j+1) then
116c8     1E 37 02 F6 | 	mov	local09, local12
116cc     02 36 66 F0 | 	shl	local09, #2
116d0     1C 4E 05 F1 | 	add	fp, #28
116d4     A7 36 02 F1 | 	add	local09, fp
116d8     1B 13 02 FB | 	rdlong	arg01, local09
116dc     1E 37 02 F6 | 	mov	local09, local12
116e0     01 36 06 F1 | 	add	local09, #1
116e4     1B 31 02 F6 | 	mov	local06, local09
116e8     02 30 66 F0 | 	shl	local06, #2
116ec     A7 26 02 F6 | 	mov	local01, fp
116f0     A7 30 02 F1 | 	add	local06, fp
116f4     18 2F 02 FB | 	rdlong	local05, local06
116f8     17 15 02 F6 | 	mov	arg02, local05
116fc     1C 4E 85 F1 | 	sub	fp, #28
11700     58 50 B1 FD | 	call	#__system___string_cmp
11704     01 FA 55 F2 | 	cmps	result1, #1 wc
11708     64 00 90 CD |  if_b	jmp	#LR__1406
1170c     1E 37 02 F6 | 	mov	local09, local12
11710     01 36 06 F1 | 	add	local09, #1
11714     02 36 66 F0 | 	shl	local09, #2
11718     1C 4E 05 F1 | 	add	fp, #28
1171c     A7 36 02 F1 | 	add	local09, fp
11720     1B 3B 02 FB | 	rdlong	local11, local09
11724     1E 31 02 F6 | 	mov	local06, local12
11728     02 30 66 F0 | 	shl	local06, #2
1172c     A7 30 02 F1 | 	add	local06, fp
11730     18 2F 02 FB | 	rdlong	local05, local06
11734     1E 37 02 F6 | 	mov	local09, local12
11738     1B 31 02 F6 | 	mov	local06, local09
1173c     02 30 66 F0 | 	shl	local06, #2
11740     A7 26 02 F6 | 	mov	local01, fp
11744     A7 30 02 F1 | 	add	local06, fp
11748     18 3B 62 FC | 	wrlong	local11, local06
1174c     1E 29 02 F6 | 	mov	local02, local12
11750     01 28 06 F1 | 	add	local02, #1
11754     14 41 02 F6 | 	mov	local14, local02
11758     02 40 66 F0 | 	shl	local14, #2
1175c     A7 42 02 F6 | 	mov	local15, fp
11760     A7 40 02 F1 | 	add	local14, fp
11764     20 2F 62 FC | 	wrlong	local05, local14
11768     01 3A 66 F6 | 	neg	local11, #1
1176c     1C 4E 85 F1 | 	sub	fp, #28
11770                 | LR__1406
11770     01 3C 06 F1 | 	add	local12, #1
11774     48 FF 9F FD | 	jmp	#LR__1405
11778                 | LR__1407
11778                 | ' if not swapped then exit for
11778     1D 45 22 F6 | 	not	local16, local11
1177c     00 44 0E F2 | 	cmp	local16, #0 wz
11780     01 2C 06 A1 |  if_e	add	local04, #1
11784     1C FF 9F AD |  if_e	jmp	#LR__1404
11788                 | LR__1408
11788                 | ' for i=0 to n-1
11788     00 2C 06 F6 | 	mov	local04, #0
1178c     1A 47 02 F6 | 	mov	local17, local08
11790                 | LR__1409
11790     23 2D 52 F2 | 	cmps	local04, local17 wc
11794     94 00 90 3D |  if_ae	jmp	#LR__1411
11798                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11798     00 12 06 F6 | 	mov	arg01, #0
1179c     BC AC B1 FD | 	call	#__system___getiolock_0603
117a0     FD 12 02 F6 | 	mov	arg01, result1
117a4     8C 4F B1 FD | 	call	#__system___lockmem
117a8     16 29 02 F6 | 	mov	local02, local04
117ac     02 28 66 F0 | 	shl	local02, #2
117b0     1C 4E 05 F1 | 	add	fp, #28
117b4     A7 40 02 F6 | 	mov	local14, fp
117b8     A7 28 02 F1 | 	add	local02, fp
117bc     14 15 02 FB | 	rdlong	arg02, local02
117c0     00 26 06 F6 | 	mov	local01, #0
117c4     00 12 06 F6 | 	mov	arg01, #0
117c8     00 16 06 F6 | 	mov	arg03, #0
117cc     1C 4E 85 F1 | 	sub	fp, #28
117d0     54 5C B1 FD | 	call	#__system___basic_print_string
117d4     00 12 06 F6 | 	mov	arg01, #0
117d8     80 AC B1 FD | 	call	#__system___getiolock_0603
117dc     FD 00 68 FC | 	wrlong	#0, result1
117e0     40 2A 06 F1 | 	add	local03, #64
117e4     15 13 02 F6 | 	mov	arg01, local03
117e8     F0 31 B1 FD | 	call	#_hg010b_spin2_setcursorx
117ec     00 2B 56 F2 | 	cmps	local03, #256 wc
117f0     30 00 90 CD |  if_b	jmp	#LR__1410
117f4     00 2A 06 F6 | 	mov	local03, #0
117f8     00 12 06 F6 | 	mov	arg01, #0
117fc     5C AC B1 FD | 	call	#__system___getiolock_0603
11800     FD 12 02 F6 | 	mov	arg01, result1
11804     2C 4F B1 FD | 	call	#__system___lockmem
11808     00 12 06 F6 | 	mov	arg01, #0
1180c     0A 14 06 F6 | 	mov	arg02, #10
11810     00 16 06 F6 | 	mov	arg03, #0
11814     B8 5B B1 FD | 	call	#__system___basic_print_char
11818     00 12 06 F6 | 	mov	arg01, #0
1181c     3C AC B1 FD | 	call	#__system___getiolock_0603
11820     FD 00 68 FC | 	wrlong	#0, result1
11824                 | LR__1410
11824     01 2C 06 F1 | 	add	local04, #1
11828     64 FF 9F FD | 	jmp	#LR__1409
1182c                 | LR__1411
1182c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1182c     80 34 56 F2 | 	cmps	local08, #128 wc
11830     44 00 90 CD |  if_b	jmp	#LR__1412
11834     00 12 06 F6 | 	mov	arg01, #0
11838     20 AC B1 FD | 	call	#__system___getiolock_0603
1183c     FD 12 02 F6 | 	mov	arg01, result1
11840     F0 4E B1 FD | 	call	#__system___lockmem
11844     B5 01 00 FF 
11848     9E 15 06 F6 | 	mov	arg02, ##@LR__5892
1184c     00 12 06 F6 | 	mov	arg01, #0
11850     00 16 06 F6 | 	mov	arg03, #0
11854     D0 5B B1 FD | 	call	#__system___basic_print_string
11858     00 12 06 F6 | 	mov	arg01, #0
1185c     0A 14 06 F6 | 	mov	arg02, #10
11860     00 16 06 F6 | 	mov	arg03, #0
11864     68 5B B1 FD | 	call	#__system___basic_print_char
11868     00 12 06 F6 | 	mov	arg01, #0
1186c     EC AB B1 FD | 	call	#__system___getiolock_0603
11870     FD 00 68 FC | 	wrlong	#0, result1
11874     00 26 06 F6 | 	mov	local01, #0
11878                 | LR__1412
11878                 | ' print
11878     00 12 06 F6 | 	mov	arg01, #0
1187c     DC AB B1 FD | 	call	#__system___getiolock_0603
11880     FD 12 02 F6 | 	mov	arg01, result1
11884     AC 4E B1 FD | 	call	#__system___lockmem
11888     00 12 06 F6 | 	mov	arg01, #0
1188c     0A 14 06 F6 | 	mov	arg02, #10
11890     00 16 06 F6 | 	mov	arg03, #0
11894     38 5B B1 FD | 	call	#__system___basic_print_char
11898     00 12 06 F6 | 	mov	arg01, #0
1189c     BC AB B1 FD | 	call	#__system___getiolock_0603
118a0     FD 00 68 FC | 	wrlong	#0, result1
118a4     00 30 06 F6 | 	mov	local06, #0
118a8     00 34 06 F6 | 	mov	local08, #0
118ac     00 2A 06 F6 | 	mov	local03, #0
118b0                 | ' return cursor_y
118b0     3E E4 05 F1 | 	add	objptr, #62
118b4     F2 48 C2 FA | 	rdbyte	local18, objptr
118b8     3E E4 85 F1 | 	sub	objptr, #62
118bc     B5 01 00 FF 
118c0     D0 13 06 F6 | 	mov	arg01, ##@LR__5893
118c4     21 14 06 F6 | 	mov	arg02, #33
118c8     C8 AC B1 FD | 	call	#__system___basic_dir
118cc     FD 32 02 F6 | 	mov	local07, result1
118d0                 | ' n=0
118d0                 | ' px=0: py=v.getcursory()
118d0                 | ' filename = dir$("*", fbNormal )   
118d0                 | ' do while filename <> "" andalso filename <> nil andalso n<128
118d0                 | LR__1413
118d0     B5 01 00 FF 
118d4     D2 37 06 F6 | 	mov	local09, ##@LR__5894
118d8     19 13 02 F6 | 	mov	arg01, local07
118dc     1B 15 02 F6 | 	mov	arg02, local09
118e0     78 4E B1 FD | 	call	#__system___string_cmp
118e4     00 FA 0D F2 | 	cmp	result1, #0 wz
118e8     54 00 90 AD |  if_e	jmp	#LR__1414
118ec     00 36 06 F6 | 	mov	local09, #0
118f0     19 13 02 F6 | 	mov	arg01, local07
118f4     00 14 06 F6 | 	mov	arg02, #0
118f8     60 4E B1 FD | 	call	#__system___string_cmp
118fc     00 FA 0D F2 | 	cmp	result1, #0 wz
11900     3C 00 90 AD |  if_e	jmp	#LR__1414
11904     80 34 56 F2 | 	cmps	local08, #128 wc
11908     34 00 90 3D |  if_ae	jmp	#LR__1414
1190c     1A 2F 02 F6 | 	mov	local05, local08
11910     02 2E 66 F0 | 	shl	local05, #2
11914     1C 4E 05 F1 | 	add	fp, #28
11918     A7 2E 02 F1 | 	add	local05, fp
1191c     17 33 62 FC | 	wrlong	local07, local05
11920     01 34 06 F1 | 	add	local08, #1
11924     00 2E 06 F6 | 	mov	local05, #0
11928     00 12 06 F6 | 	mov	arg01, #0
1192c     00 14 06 F6 | 	mov	arg02, #0
11930     1C 4E 85 F1 | 	sub	fp, #28
11934     5C AC B1 FD | 	call	#__system___basic_dir
11938     FD 32 02 F6 | 	mov	local07, result1
1193c     90 FF 9F FD | 	jmp	#LR__1413
11940                 | LR__1414
11940                 | ' for i =0 to n-1
11940     00 2C 06 F6 | 	mov	local04, #0
11944                 | LR__1415
11944     1A 2D 52 F2 | 	cmps	local04, local08 wc
11948     D8 00 90 3D |  if_ae	jmp	#LR__1419
1194c     00 3A 06 F6 | 	mov	local11, #0
11950                 | '   swapped=false
11950                 | '   for j=0 to n-i-2
11950     00 3C 06 F6 | 	mov	local12, #0
11954     1A 4B 02 F6 | 	mov	local19, local08
11958     16 4B 82 F1 | 	sub	local19, local04
1195c     01 4A 86 F1 | 	sub	local19, #1
11960                 | LR__1416
11960     25 3D 52 F2 | 	cmps	local12, local19 wc
11964     AC 00 90 3D |  if_ae	jmp	#LR__1418
11968                 | '     if filelist(j) > filelist(j+1) then
11968     1E 37 02 F6 | 	mov	local09, local12
1196c     02 36 66 F0 | 	shl	local09, #2
11970     1C 4E 05 F1 | 	add	fp, #28
11974     A7 36 02 F1 | 	add	local09, fp
11978     1B 13 02 FB | 	rdlong	arg01, local09
1197c     1E 37 02 F6 | 	mov	local09, local12
11980     01 36 06 F1 | 	add	local09, #1
11984     1B 31 02 F6 | 	mov	local06, local09
11988     02 30 66 F0 | 	shl	local06, #2
1198c     A7 26 02 F6 | 	mov	local01, fp
11990     A7 30 02 F1 | 	add	local06, fp
11994     18 2F 02 FB | 	rdlong	local05, local06
11998     17 15 02 F6 | 	mov	arg02, local05
1199c     1C 4E 85 F1 | 	sub	fp, #28
119a0     B8 4D B1 FD | 	call	#__system___string_cmp
119a4     01 FA 55 F2 | 	cmps	result1, #1 wc
119a8     60 00 90 CD |  if_b	jmp	#LR__1417
119ac     1E 37 02 F6 | 	mov	local09, local12
119b0     01 36 06 F1 | 	add	local09, #1
119b4     02 36 66 F0 | 	shl	local09, #2
119b8     1C 4E 05 F1 | 	add	fp, #28
119bc     A7 36 02 F1 | 	add	local09, fp
119c0     1B 45 02 FB | 	rdlong	local16, local09
119c4     1E 31 02 F6 | 	mov	local06, local12
119c8     02 30 66 F0 | 	shl	local06, #2
119cc     A7 30 02 F1 | 	add	local06, fp
119d0     18 2F 02 FB | 	rdlong	local05, local06
119d4     1E 37 02 F6 | 	mov	local09, local12
119d8     1B 31 02 F6 | 	mov	local06, local09
119dc     02 30 66 F0 | 	shl	local06, #2
119e0     A7 26 02 F6 | 	mov	local01, fp
119e4     A7 30 02 F1 | 	add	local06, fp
119e8     18 45 62 FC | 	wrlong	local16, local06
119ec     1E 41 02 F6 | 	mov	local14, local12
119f0     01 40 06 F1 | 	add	local14, #1
119f4     02 40 66 F0 | 	shl	local14, #2
119f8     A7 42 02 F6 | 	mov	local15, fp
119fc     A7 40 02 F1 | 	add	local14, fp
11a00     20 2F 62 FC | 	wrlong	local05, local14
11a04     01 3A 66 F6 | 	neg	local11, #1
11a08     1C 4E 85 F1 | 	sub	fp, #28
11a0c                 | LR__1417
11a0c     01 3C 06 F1 | 	add	local12, #1
11a10     4C FF 9F FD | 	jmp	#LR__1416
11a14                 | LR__1418
11a14                 | ' if not swapped then exit for
11a14     1D 45 22 F6 | 	not	local16, local11
11a18     00 44 0E F2 | 	cmp	local16, #0 wz
11a1c     01 2C 06 A1 |  if_e	add	local04, #1
11a20     20 FF 9F AD |  if_e	jmp	#LR__1415
11a24                 | LR__1419
11a24                 | ' for i=0 to n-1
11a24     00 2C 06 F6 | 	mov	local04, #0
11a28                 | LR__1420
11a28     1A 2D 52 F2 | 	cmps	local04, local08 wc
11a2c     8C 00 90 3D |  if_ae	jmp	#LR__1422
11a30                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11a30     00 12 06 F6 | 	mov	arg01, #0
11a34     24 AA B1 FD | 	call	#__system___getiolock_0603
11a38     FD 12 02 F6 | 	mov	arg01, result1
11a3c     F4 4C B1 FD | 	call	#__system___lockmem
11a40     16 29 02 F6 | 	mov	local02, local04
11a44     02 28 66 F0 | 	shl	local02, #2
11a48     1C 4E 05 F1 | 	add	fp, #28
11a4c     A7 28 02 F1 | 	add	local02, fp
11a50     14 15 02 FB | 	rdlong	arg02, local02
11a54     00 12 06 F6 | 	mov	arg01, #0
11a58     00 16 06 F6 | 	mov	arg03, #0
11a5c     1C 4E 85 F1 | 	sub	fp, #28
11a60     C4 59 B1 FD | 	call	#__system___basic_print_string
11a64     00 12 06 F6 | 	mov	arg01, #0
11a68     F0 A9 B1 FD | 	call	#__system___getiolock_0603
11a6c     FD 00 68 FC | 	wrlong	#0, result1
11a70     40 2A 06 F1 | 	add	local03, #64
11a74     15 13 02 F6 | 	mov	arg01, local03
11a78     60 2F B1 FD | 	call	#_hg010b_spin2_setcursorx
11a7c     00 2B 56 F2 | 	cmps	local03, #256 wc
11a80     30 00 90 CD |  if_b	jmp	#LR__1421
11a84     00 2A 06 F6 | 	mov	local03, #0
11a88     00 12 06 F6 | 	mov	arg01, #0
11a8c     CC A9 B1 FD | 	call	#__system___getiolock_0603
11a90     FD 12 02 F6 | 	mov	arg01, result1
11a94     9C 4C B1 FD | 	call	#__system___lockmem
11a98     00 12 06 F6 | 	mov	arg01, #0
11a9c     0A 14 06 F6 | 	mov	arg02, #10
11aa0     00 16 06 F6 | 	mov	arg03, #0
11aa4     28 59 B1 FD | 	call	#__system___basic_print_char
11aa8     00 12 06 F6 | 	mov	arg01, #0
11aac     AC A9 B1 FD | 	call	#__system___getiolock_0603
11ab0     FD 00 68 FC | 	wrlong	#0, result1
11ab4                 | LR__1421
11ab4     01 2C 06 F1 | 	add	local04, #1
11ab8     6C FF 9F FD | 	jmp	#LR__1420
11abc                 | LR__1422
11abc                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11abc     80 34 56 F2 | 	cmps	local08, #128 wc
11ac0     40 00 90 CD |  if_b	jmp	#LR__1423
11ac4     00 12 06 F6 | 	mov	arg01, #0
11ac8     90 A9 B1 FD | 	call	#__system___getiolock_0603
11acc     FD 12 02 F6 | 	mov	arg01, result1
11ad0     60 4C B1 FD | 	call	#__system___lockmem
11ad4     B5 01 00 FF 
11ad8     D3 15 06 F6 | 	mov	arg02, ##@LR__5895
11adc     00 12 06 F6 | 	mov	arg01, #0
11ae0     00 16 06 F6 | 	mov	arg03, #0
11ae4     40 59 B1 FD | 	call	#__system___basic_print_string
11ae8     00 12 06 F6 | 	mov	arg01, #0
11aec     0A 14 06 F6 | 	mov	arg02, #10
11af0     00 16 06 F6 | 	mov	arg03, #0
11af4     D8 58 B1 FD | 	call	#__system___basic_print_char
11af8     00 12 06 F6 | 	mov	arg01, #0
11afc     5C A9 B1 FD | 	call	#__system___getiolock_0603
11b00     FD 00 68 FC | 	wrlong	#0, result1
11b04                 | LR__1423
11b04                 | ' print
11b04     00 12 06 F6 | 	mov	arg01, #0
11b08     50 A9 B1 FD | 	call	#__system___getiolock_0603
11b0c     FD 12 02 F6 | 	mov	arg01, result1
11b10     20 4C B1 FD | 	call	#__system___lockmem
11b14     00 12 06 F6 | 	mov	arg01, #0
11b18     0A 14 06 F6 | 	mov	arg02, #10
11b1c     00 16 06 F6 | 	mov	arg03, #0
11b20     AC 58 B1 FD | 	call	#__system___basic_print_char
11b24     00 12 06 F6 | 	mov	arg01, #0
11b28     30 A9 B1 FD | 	call	#__system___getiolock_0603
11b2c     FD 00 68 FC | 	wrlong	#0, result1
11b30     A7 F0 03 F6 | 	mov	ptra, fp
11b34     B2 00 A0 FD | 	call	#popregs_
11b38                 | _do_dir_ret
11b38     2D 00 64 FD | 	ret
11b3c                 | 
11b3c                 | ' 
11b3c                 | ' '-------------------- dpeek
11b3c                 | ' 
11b3c                 | ' sub do_dpeek
11b3c                 | _do_dpeek
11b3c     00 4A 05 F6 | 	mov	COUNT_, #0
11b40     A8 00 A0 FD | 	call	#pushregs_
11b44     14 F0 07 F1 | 	add	ptra, #20
11b48     08 BA BF FD | 	call	#_pop
11b4c     A7 FA 61 FC | 	wrlong	result1, fp
11b50     04 4E 05 F1 | 	add	fp, #4
11b54     A7 FC 61 FC | 	wrlong	result2, fp
11b58     04 4E 05 F1 | 	add	fp, #4
11b5c     A7 FE 61 FC | 	wrlong	result3, fp
11b60     08 4E 85 F1 | 	sub	fp, #8
11b64     A7 12 02 F6 | 	mov	arg01, fp
11b68     CC BB BF FD | 	call	#_converttoint
11b6c     0C 4E 05 F1 | 	add	fp, #12
11b70     A7 FA 61 FC | 	wrlong	result1, fp
11b74                 | ' 
11b74                 | ' t1=pop()
11b74                 | ' a=converttoint(t1)
11b74                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
11b74     0C 4E 85 F1 | 	sub	fp, #12
11b78     00 04 00 FF 
11b7c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11b80     1C 00 90 3D |  if_ae	jmp	#LR__1430
11b84     0C 4E 05 F1 | 	add	fp, #12
11b88     A7 12 02 FB | 	rdlong	arg01, fp
11b8c     09 FB E1 FA | 	rdword	result1, arg01
11b90     04 4E 05 F1 | 	add	fp, #4
11b94     A7 FA 61 FC | 	wrlong	result1, fp
11b98     10 4E 85 F1 | 	sub	fp, #16
11b9c     1C 00 90 FD | 	jmp	#LR__1431
11ba0                 | LR__1430
11ba0     0C 4E 05 F1 | 	add	fp, #12
11ba4     A7 12 02 FB | 	rdlong	arg01, fp
11ba8     0C 4E 85 F1 | 	sub	fp, #12
11bac     C0 14 B1 FD | 	call	#_psdpeek
11bb0     10 4E 05 F1 | 	add	fp, #16
11bb4     A7 FA 61 FC | 	wrlong	result1, fp
11bb8     10 4E 85 F1 | 	sub	fp, #16
11bbc                 | LR__1431
11bbc     08 4E 05 F1 | 	add	fp, #8
11bc0     A7 3A 68 FC | 	wrlong	#29, fp
11bc4     08 4E 05 F1 | 	add	fp, #8
11bc8     A7 12 02 FB | 	rdlong	arg01, fp
11bcc     10 4E 85 F1 | 	sub	fp, #16
11bd0     A7 12 62 FC | 	wrlong	arg01, fp
11bd4     A7 12 02 F6 | 	mov	arg01, fp
11bd8     10 BA BF FD | 	call	#_push
11bdc     A7 F0 03 F6 | 	mov	ptra, fp
11be0     B2 00 A0 FD | 	call	#popregs_
11be4                 | _do_dpeek_ret
11be4     2D 00 64 FD | 	ret
11be8                 | 
11be8                 | ' 
11be8                 | ' '-------------------- dpoke
11be8                 | ' 
11be8                 | ' sub do_dpoke
11be8                 | _do_dpoke
11be8     01 4A 05 F6 | 	mov	COUNT_, #1
11bec     A8 00 A0 FD | 	call	#pushregs_
11bf0     20 F0 07 F1 | 	add	ptra, #32
11bf4     5C B9 BF FD | 	call	#_pop
11bf8     FD 14 02 F6 | 	mov	arg02, result1
11bfc     FE 12 02 F6 | 	mov	arg01, result2
11c00     FF 26 02 F6 | 	mov	local01, result3
11c04     A7 14 62 FC | 	wrlong	arg02, fp
11c08     04 4E 05 F1 | 	add	fp, #4
11c0c     A7 12 62 FC | 	wrlong	arg01, fp
11c10     04 4E 05 F1 | 	add	fp, #4
11c14     A7 26 62 FC | 	wrlong	local01, fp
11c18     08 4E 85 F1 | 	sub	fp, #8
11c1c     34 B9 BF FD | 	call	#_pop
11c20     FF 26 02 F6 | 	mov	local01, result3
11c24     0C 4E 05 F1 | 	add	fp, #12
11c28     A7 FA 61 FC | 	wrlong	result1, fp
11c2c     04 4E 05 F1 | 	add	fp, #4
11c30     A7 FC 61 FC | 	wrlong	result2, fp
11c34     04 4E 05 F1 | 	add	fp, #4
11c38     A7 26 62 FC | 	wrlong	local01, fp
11c3c     08 4E 85 F1 | 	sub	fp, #8
11c40     A7 12 02 F6 | 	mov	arg01, fp
11c44     0C 4E 85 F1 | 	sub	fp, #12
11c48     EC BA BF FD | 	call	#_converttoint
11c4c     18 4E 05 F1 | 	add	fp, #24
11c50     A7 FA 61 FC | 	wrlong	result1, fp
11c54     18 4E 85 F1 | 	sub	fp, #24
11c58     A7 12 02 F6 | 	mov	arg01, fp
11c5c     D8 BA BF FD | 	call	#_converttoint
11c60     1C 4E 05 F1 | 	add	fp, #28
11c64     A7 FA 61 FC | 	wrlong	result1, fp
11c68                 | ' 
11c68                 | ' t1=pop() 'value
11c68                 | ' t2=pop() 
11c68                 | ' a=converttoint(t2) : v=converttoint(t1)
11c68                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
11c68     04 4E 85 F1 | 	sub	fp, #4
11c6c     A7 26 02 FB | 	rdlong	local01, fp
11c70     18 4E 85 F1 | 	sub	fp, #24
11c74     00 04 00 FF 
11c78     00 26 16 F2 | 	cmp	local01, ##524288 wc
11c7c     1C 00 90 3D |  if_ae	jmp	#LR__1440
11c80     18 4E 05 F1 | 	add	fp, #24
11c84     A7 12 02 FB | 	rdlong	arg01, fp
11c88     04 4E 05 F1 | 	add	fp, #4
11c8c     A7 14 02 FB | 	rdlong	arg02, fp
11c90     1C 4E 85 F1 | 	sub	fp, #28
11c94     09 15 52 FC | 	wrword	arg02, arg01
11c98     18 00 90 FD | 	jmp	#LR__1441
11c9c                 | LR__1440
11c9c     18 4E 05 F1 | 	add	fp, #24
11ca0     A7 12 02 FB | 	rdlong	arg01, fp
11ca4     04 4E 05 F1 | 	add	fp, #4
11ca8     A7 14 02 FB | 	rdlong	arg02, fp
11cac     1C 4E 85 F1 | 	sub	fp, #28
11cb0     7C 12 B1 FD | 	call	#_psdpoke
11cb4                 | LR__1441
11cb4     A7 F0 03 F6 | 	mov	ptra, fp
11cb8     B2 00 A0 FD | 	call	#popregs_
11cbc                 | _do_dpoke_ret
11cbc     2D 00 64 FD | 	ret
11cc0                 | 
11cc0                 | ' '-------------------- draw
11cc0                 | ' 
11cc0                 | ' sub do_draw
11cc0                 | _do_draw
11cc0     00 4A 05 F6 | 	mov	COUNT_, #0
11cc4     A8 00 A0 FD | 	call	#pushregs_
11cc8     20 F0 07 F1 | 	add	ptra, #32
11ccc     84 B8 BF FD | 	call	#_pop
11cd0     FD 1A 02 F6 | 	mov	arg05, result1
11cd4     FE 18 02 F6 | 	mov	arg04, result2
11cd8     FF 16 02 F6 | 	mov	arg03, result3
11cdc     0C 4E 05 F1 | 	add	fp, #12
11ce0     A7 1A 62 FC | 	wrlong	arg05, fp
11ce4     04 4E 05 F1 | 	add	fp, #4
11ce8     A7 18 62 FC | 	wrlong	arg04, fp
11cec     04 4E 05 F1 | 	add	fp, #4
11cf0     A7 16 62 FC | 	wrlong	arg03, fp
11cf4     14 4E 85 F1 | 	sub	fp, #20
11cf8     58 B8 BF FD | 	call	#_pop
11cfc     FF 1A 02 F6 | 	mov	arg05, result3
11d00     A7 FA 61 FC | 	wrlong	result1, fp
11d04     04 4E 05 F1 | 	add	fp, #4
11d08     A7 FC 61 FC | 	wrlong	result2, fp
11d0c     04 4E 05 F1 | 	add	fp, #4
11d10     A7 1A 62 FC | 	wrlong	arg05, fp
11d14     08 4E 85 F1 | 	sub	fp, #8
11d18     A7 12 02 F6 | 	mov	arg01, fp
11d1c     18 BA BF FD | 	call	#_converttoint
11d20     18 4E 05 F1 | 	add	fp, #24
11d24     A7 FA 61 FC | 	wrlong	result1, fp
11d28     0C 4E 85 F1 | 	sub	fp, #12
11d2c     A7 12 02 F6 | 	mov	arg01, fp
11d30     0C 4E 85 F1 | 	sub	fp, #12
11d34     00 BA BF FD | 	call	#_converttoint
11d38     1C 4E 05 F1 | 	add	fp, #28
11d3c     A7 FA 61 FC | 	wrlong	result1, fp
11d40     37 00 00 FF 
11d44     2C E4 05 F1 | 	add	objptr, ##28204
11d48     F2 12 02 FB | 	rdlong	arg01, objptr
11d4c     04 E4 05 F1 | 	add	objptr, #4
11d50     F2 14 02 FB | 	rdlong	arg02, objptr
11d54     04 4E 85 F1 | 	sub	fp, #4
11d58     A7 16 02 FB | 	rdlong	arg03, fp
11d5c     FD 18 02 F6 | 	mov	arg04, result1
11d60     18 4E 85 F1 | 	sub	fp, #24
11d64     08 E4 85 F1 | 	sub	objptr, #8
11d68     F2 1A 02 FB | 	rdlong	arg05, objptr
11d6c     37 00 00 FF 
11d70     28 E4 85 F1 | 	sub	objptr, ##28200
11d74     14 23 B1 FD | 	call	#_hg010b_spin2_draw
11d78     18 4E 05 F1 | 	add	fp, #24
11d7c     A7 1A 02 FB | 	rdlong	arg05, fp
11d80     37 00 00 FF 
11d84     2C E4 05 F1 | 	add	objptr, ##28204
11d88     F2 1A 62 FC | 	wrlong	arg05, objptr
11d8c     04 4E 05 F1 | 	add	fp, #4
11d90     A7 1A 02 FB | 	rdlong	arg05, fp
11d94     1C 4E 85 F1 | 	sub	fp, #28
11d98     04 E4 05 F1 | 	add	objptr, #4
11d9c     F2 1A 62 FC | 	wrlong	arg05, objptr
11da0     37 00 00 FF 
11da4     30 E4 85 F1 | 	sub	objptr, ##28208
11da8     A7 F0 03 F6 | 	mov	ptra, fp
11dac     B2 00 A0 FD | 	call	#popregs_
11db0                 | _do_draw_ret
11db0     2D 00 64 FD | 	ret
11db4                 | 
11db4                 | ' 
11db4                 | ' '-------------------- else
11db4                 | ' 
11db4                 | ' sub do_else
11db4                 | _do_else
11db4     4A 00 00 FF 
11db8     7C E4 05 F1 | 	add	objptr, ##38012
11dbc     F2 00 02 FB | 	rdlong	_var01, objptr
11dc0     01 00 86 F1 | 	sub	_var01, #1
11dc4     04 E4 05 F1 | 	add	objptr, #4
11dc8     F2 00 62 FC | 	wrlong	_var01, objptr
11dcc     4A 00 00 FF 
11dd0     80 E4 85 F1 | 	sub	objptr, ##38016
11dd4                 | _do_else_ret
11dd4     2D 00 64 FD | 	ret
11dd8                 | 
11dd8                 | ' 
11dd8                 | ' '-------------------- end
11dd8                 | ' 
11dd8                 | ' sub do_end
11dd8                 | _do_end
11dd8     4A 00 00 FF 
11ddc     7C E4 05 F1 | 	add	objptr, ##38012
11de0     F2 00 02 FB | 	rdlong	_var01, objptr
11de4     01 00 86 F1 | 	sub	_var01, #1
11de8     04 E4 05 F1 | 	add	objptr, #4
11dec     F2 00 62 FC | 	wrlong	_var01, objptr
11df0     06 00 00 FF 
11df4     38 E4 05 F1 | 	add	objptr, ##3128
11df8     FF FF BF FF 
11dfc     F2 FE 6B FC | 	wrlong	##2147483647, objptr
11e00     50 00 00 FF 
11e04     B8 E4 85 F1 | 	sub	objptr, ##41144
11e08                 | _do_end_ret
11e08     2D 00 64 FD | 	ret
11e0c                 | 
11e0c                 | ' 
11e0c                 | ' '-------------------- enter
11e0c                 | ' 
11e0c                 | ' sub do_enter
11e0c                 | _do_enter
11e0c     02 00 00 FF 
11e10     D2 12 06 F6 | 	mov	arg01, ##1234
11e14     A0 2E B0 FD | 	call	#_do_load
11e18                 | _do_enter_ret
11e18     2D 00 64 FD | 	ret
11e1c                 | 
11e1c                 | ' 
11e1c                 | ' '------------------- error processing
11e1c                 | ' 
11e1c                 | ' sub do_error
11e1c                 | _do_error
11e1c     01 4A 05 F6 | 	mov	COUNT_, #1
11e20     A8 00 A0 FD | 	call	#pushregs_
11e24     4A 00 00 FF 
11e28     80 E4 05 F1 | 	add	objptr, ##38016
11e2c     F2 18 02 FB | 	rdlong	arg04, objptr
11e30     0C 17 02 F6 | 	mov	arg03, arg04
11e34     01 16 66 F0 | 	shl	arg03, #1
11e38     0C 17 02 F1 | 	add	arg03, arg04
11e3c     02 16 66 F0 | 	shl	arg03, #2
11e40     03 00 00 FF 
11e44     04 E4 85 F1 | 	sub	objptr, ##1540
11e48     F2 16 02 F1 | 	add	arg03, objptr
11e4c     0B 27 02 FB | 	rdlong	local01, arg03
11e50                 | ' r=compiledline(lineptr_e).result.uresult
11e50                 | ' print "Error ";r;": ";errors$(r)
11e50     00 12 06 F6 | 	mov	arg01, #0
11e54     47 00 00 FF 
11e58     7C E4 85 F1 | 	sub	objptr, ##36476
11e5c     FC A5 B1 FD | 	call	#__system___getiolock_0603
11e60     FD 12 02 F6 | 	mov	arg01, result1
11e64     CC 48 B1 FD | 	call	#__system___lockmem
11e68     B6 01 00 FF 
11e6c     05 14 06 F6 | 	mov	arg02, ##@LR__5896
11e70     00 12 06 F6 | 	mov	arg01, #0
11e74     00 16 06 F6 | 	mov	arg03, #0
11e78     AC 55 B1 FD | 	call	#__system___basic_print_string
11e7c     00 12 06 F6 | 	mov	arg01, #0
11e80     13 15 02 F6 | 	mov	arg02, local01
11e84     00 16 06 F6 | 	mov	arg03, #0
11e88     0A 18 06 F6 | 	mov	arg04, #10
11e8c     1C 56 B1 FD | 	call	#__system___basic_print_unsigned
11e90     B6 01 00 FF 
11e94     0C 14 06 F6 | 	mov	arg02, ##@LR__5897
11e98     00 12 06 F6 | 	mov	arg01, #0
11e9c     00 16 06 F6 | 	mov	arg03, #0
11ea0     84 55 B1 FD | 	call	#__system___basic_print_string
11ea4     02 26 66 F0 | 	shl	local01, #2
11ea8     45 00 00 FF 
11eac     7C E4 05 F1 | 	add	objptr, ##35452
11eb0     F2 26 02 F1 | 	add	local01, objptr
11eb4     13 15 02 FB | 	rdlong	arg02, local01
11eb8     00 12 06 F6 | 	mov	arg01, #0
11ebc     00 16 06 F6 | 	mov	arg03, #0
11ec0     45 00 00 FF 
11ec4     7C E4 85 F1 | 	sub	objptr, ##35452
11ec8     5C 55 B1 FD | 	call	#__system___basic_print_string
11ecc     00 12 06 F6 | 	mov	arg01, #0
11ed0     0A 14 06 F6 | 	mov	arg02, #10
11ed4     00 16 06 F6 | 	mov	arg03, #0
11ed8     F4 54 B1 FD | 	call	#__system___basic_print_char
11edc     00 12 06 F6 | 	mov	arg01, #0
11ee0     78 A5 B1 FD | 	call	#__system___getiolock_0603
11ee4     FD 00 68 FC | 	wrlong	#0, result1
11ee8     A7 F0 03 F6 | 	mov	ptra, fp
11eec     B2 00 A0 FD | 	call	#popregs_
11ef0                 | _do_error_ret
11ef0     2D 00 64 FD | 	ret
11ef4                 | 
11ef4                 | ' 
11ef4                 | ' '-------------------- fcircle
11ef4                 | ' 
11ef4                 | ' sub do_fcircle
11ef4                 | _do_fcircle
11ef4     02 4A 05 F6 | 	mov	COUNT_, #2
11ef8     A8 00 A0 FD | 	call	#pushregs_
11efc     24 F0 07 F1 | 	add	ptra, #36
11f00     50 B6 BF FD | 	call	#_pop
11f04     FD 14 02 F6 | 	mov	arg02, result1
11f08     FE 18 02 F6 | 	mov	arg04, result2
11f0c     FF 16 02 F6 | 	mov	arg03, result3
11f10     18 4E 05 F1 | 	add	fp, #24
11f14     A7 14 62 FC | 	wrlong	arg02, fp
11f18     04 4E 05 F1 | 	add	fp, #4
11f1c     A7 18 62 FC | 	wrlong	arg04, fp
11f20     04 4E 05 F1 | 	add	fp, #4
11f24     A7 16 62 FC | 	wrlong	arg03, fp
11f28     20 4E 85 F1 | 	sub	fp, #32
11f2c     24 B6 BF FD | 	call	#_pop
11f30     FD 14 02 F6 | 	mov	arg02, result1
11f34     FE 18 02 F6 | 	mov	arg04, result2
11f38     FF 16 02 F6 | 	mov	arg03, result3
11f3c     0C 4E 05 F1 | 	add	fp, #12
11f40     A7 14 62 FC | 	wrlong	arg02, fp
11f44     04 4E 05 F1 | 	add	fp, #4
11f48     A7 18 62 FC | 	wrlong	arg04, fp
11f4c     04 4E 05 F1 | 	add	fp, #4
11f50     A7 16 62 FC | 	wrlong	arg03, fp
11f54     14 4E 85 F1 | 	sub	fp, #20
11f58     F8 B5 BF FD | 	call	#_pop
11f5c     FF 14 02 F6 | 	mov	arg02, result3
11f60     A7 FA 61 FC | 	wrlong	result1, fp
11f64     04 4E 05 F1 | 	add	fp, #4
11f68     A7 FC 61 FC | 	wrlong	result2, fp
11f6c     04 4E 05 F1 | 	add	fp, #4
11f70     A7 14 62 FC | 	wrlong	arg02, fp
11f74     08 4E 85 F1 | 	sub	fp, #8
11f78     A7 12 02 F6 | 	mov	arg01, fp
11f7c     B8 B7 BF FD | 	call	#_converttoint
11f80     FD 26 02 F6 | 	mov	local01, result1
11f84     0C 4E 05 F1 | 	add	fp, #12
11f88     A7 12 02 F6 | 	mov	arg01, fp
11f8c     0C 4E 85 F1 | 	sub	fp, #12
11f90     A4 B7 BF FD | 	call	#_converttoint
11f94     FD 28 02 F6 | 	mov	local02, result1
11f98     18 4E 05 F1 | 	add	fp, #24
11f9c     A7 12 02 F6 | 	mov	arg01, fp
11fa0     18 4E 85 F1 | 	sub	fp, #24
11fa4     90 B7 BF FD | 	call	#_converttoint
11fa8     FD 16 02 F6 | 	mov	arg03, result1
11fac     37 00 00 FF 
11fb0     28 E4 05 F1 | 	add	objptr, ##28200
11fb4     F2 18 02 FB | 	rdlong	arg04, objptr
11fb8     37 00 00 FF 
11fbc     28 E4 85 F1 | 	sub	objptr, ##28200
11fc0     13 13 02 F6 | 	mov	arg01, local01
11fc4     14 15 02 F6 | 	mov	arg02, local02
11fc8     44 25 B1 FD | 	call	#_hg010b_spin2_fcircle
11fcc     A7 F0 03 F6 | 	mov	ptra, fp
11fd0     B2 00 A0 FD | 	call	#popregs_
11fd4                 | _do_fcircle_ret
11fd4     2D 00 64 FD | 	ret
11fd8                 | 
11fd8                 | ' 
11fd8                 | ' '-------------------- fill
11fd8                 | ' 
11fd8                 | ' sub do_fill
11fd8                 | _do_fill
11fd8     03 4A 05 F6 | 	mov	COUNT_, #3
11fdc     A8 00 A0 FD | 	call	#pushregs_
11fe0     30 F0 07 F1 | 	add	ptra, #48
11fe4     6C B5 BF FD | 	call	#_pop
11fe8     FD 16 02 F6 | 	mov	arg03, result1
11fec     FE 14 02 F6 | 	mov	arg02, result2
11ff0     FF 18 02 F6 | 	mov	arg04, result3
11ff4     24 4E 05 F1 | 	add	fp, #36
11ff8     A7 16 62 FC | 	wrlong	arg03, fp
11ffc     04 4E 05 F1 | 	add	fp, #4
12000     A7 14 62 FC | 	wrlong	arg02, fp
12004     04 4E 05 F1 | 	add	fp, #4
12008     A7 18 62 FC | 	wrlong	arg04, fp
1200c     2C 4E 85 F1 | 	sub	fp, #44
12010     40 B5 BF FD | 	call	#_pop
12014     FD 16 02 F6 | 	mov	arg03, result1
12018     FE 14 02 F6 | 	mov	arg02, result2
1201c     FF 18 02 F6 | 	mov	arg04, result3
12020     18 4E 05 F1 | 	add	fp, #24
12024     A7 16 62 FC | 	wrlong	arg03, fp
12028     04 4E 05 F1 | 	add	fp, #4
1202c     A7 14 62 FC | 	wrlong	arg02, fp
12030     04 4E 05 F1 | 	add	fp, #4
12034     A7 18 62 FC | 	wrlong	arg04, fp
12038     20 4E 85 F1 | 	sub	fp, #32
1203c     14 B5 BF FD | 	call	#_pop
12040     FD 16 02 F6 | 	mov	arg03, result1
12044     FE 14 02 F6 | 	mov	arg02, result2
12048     FF 18 02 F6 | 	mov	arg04, result3
1204c     0C 4E 05 F1 | 	add	fp, #12
12050     A7 16 62 FC | 	wrlong	arg03, fp
12054     04 4E 05 F1 | 	add	fp, #4
12058     A7 14 62 FC | 	wrlong	arg02, fp
1205c     04 4E 05 F1 | 	add	fp, #4
12060     A7 18 62 FC | 	wrlong	arg04, fp
12064     14 4E 85 F1 | 	sub	fp, #20
12068     E8 B4 BF FD | 	call	#_pop
1206c     FF 16 02 F6 | 	mov	arg03, result3
12070     A7 FA 61 FC | 	wrlong	result1, fp
12074     04 4E 05 F1 | 	add	fp, #4
12078     A7 FC 61 FC | 	wrlong	result2, fp
1207c     04 4E 05 F1 | 	add	fp, #4
12080     A7 16 62 FC | 	wrlong	arg03, fp
12084     08 4E 85 F1 | 	sub	fp, #8
12088     A7 12 02 F6 | 	mov	arg01, fp
1208c     A8 B6 BF FD | 	call	#_converttoint
12090     FD 26 02 F6 | 	mov	local01, result1
12094     0C 4E 05 F1 | 	add	fp, #12
12098     A7 12 02 F6 | 	mov	arg01, fp
1209c     0C 4E 85 F1 | 	sub	fp, #12
120a0     94 B6 BF FD | 	call	#_converttoint
120a4     FD 28 02 F6 | 	mov	local02, result1
120a8     18 4E 05 F1 | 	add	fp, #24
120ac     A7 12 02 F6 | 	mov	arg01, fp
120b0     18 4E 85 F1 | 	sub	fp, #24
120b4     80 B6 BF FD | 	call	#_converttoint
120b8     FD 2A 02 F6 | 	mov	local03, result1
120bc     24 4E 05 F1 | 	add	fp, #36
120c0     A7 12 02 F6 | 	mov	arg01, fp
120c4     24 4E 85 F1 | 	sub	fp, #36
120c8     6C B6 BF FD | 	call	#_converttoint
120cc     FD 18 02 F6 | 	mov	arg04, result1
120d0     13 13 02 F6 | 	mov	arg01, local01
120d4     14 15 02 F6 | 	mov	arg02, local02
120d8     15 17 02 F6 | 	mov	arg03, local03
120dc     9C 21 B1 FD | 	call	#_hg010b_spin2_fill
120e0     A7 F0 03 F6 | 	mov	ptra, fp
120e4     B2 00 A0 FD | 	call	#popregs_
120e8                 | _do_fill_ret
120e8     2D 00 64 FD | 	ret
120ec                 | 
120ec                 | ' 
120ec                 | ' '-------------------- font
120ec                 | ' 
120ec                 | ' sub do_font
120ec                 | _do_font
120ec     03 4A 05 F6 | 	mov	COUNT_, #3
120f0     A8 00 A0 FD | 	call	#pushregs_
120f4     5C B4 BF FD | 	call	#_pop
120f8     FD 26 02 F6 | 	mov	local01, result1
120fc     FE 28 02 F6 | 	mov	local02, result2
12100     FF 2A 02 F6 | 	mov	local03, result3
12104                 | ' 
12104                 | ' t1=pop() 
12104                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12104     1E 2A 0E F2 | 	cmp	local03, #30 wz
12108     10 00 90 5D |  if_ne	jmp	#LR__1450
1210c     13 13 02 F6 | 	mov	arg01, local01
12110     00 14 06 F6 | 	mov	arg02, #0
12114     5C 79 B1 FD | 	call	#__system___float_tointeger
12118     FD 26 02 F6 | 	mov	local01, result1
1211c                 | LR__1450
1211c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1211c     1F 2A 0E F2 | 	cmp	local03, #31 wz
12120     18 00 90 5D |  if_ne	jmp	#LR__1451
12124     13 13 02 F6 | 	mov	arg01, local01
12128     8C 7C B1 FD | 	call	#__system____builtin_atof
1212c     FD 12 02 F6 | 	mov	arg01, result1
12130     00 14 06 F6 | 	mov	arg02, #0
12134     3C 79 B1 FD | 	call	#__system___float_tointeger
12138     FD 26 02 F6 | 	mov	local01, result1
1213c                 | LR__1451
1213c     37 00 00 FF 
12140     40 E4 05 F1 | 	add	objptr, ##28224
12144     F2 26 62 FC | 	wrlong	local01, objptr
12148     37 00 00 FF 
1214c     40 E4 85 F1 | 	sub	objptr, ##28224
12150     02 26 66 F0 | 	shl	local01, #2
12154     13 13 02 F6 | 	mov	arg01, local01
12158     04 28 B1 FD | 	call	#_hg010b_spin2_setfontfamily
1215c     A7 F0 03 F6 | 	mov	ptra, fp
12160     B2 00 A0 FD | 	call	#popregs_
12164                 | _do_font_ret
12164     2D 00 64 FD | 	ret
12168                 | 
12168                 | ' 
12168                 | ' '-------------------- for
12168                 | ' 
12168                 | ' sub do_for()
12168                 | _do_for
12168     01 4A 05 F6 | 	mov	COUNT_, #1
1216c     A8 00 A0 FD | 	call	#pushregs_
12170     10 F0 07 F1 | 	add	ptra, #16
12174     50 00 00 FF 
12178     30 E5 05 F1 | 	add	objptr, ##41264
1217c     F2 12 02 FB | 	rdlong	arg01, objptr
12180     01 12 06 F1 | 	add	arg01, #1
12184     F2 12 62 FC | 	wrlong	arg01, objptr
12188     50 00 00 FF 
1218c     30 E5 85 F1 | 	sub	objptr, ##41264
12190     C0 B3 BF FD | 	call	#_pop
12194     A7 FA 61 FC | 	wrlong	result1, fp
12198     04 4E 05 F1 | 	add	fp, #4
1219c     A7 FC 61 FC | 	wrlong	result2, fp
121a0     04 4E 05 F1 | 	add	fp, #4
121a4     A7 FE 61 FC | 	wrlong	result3, fp
121a8     08 4E 85 F1 | 	sub	fp, #8
121ac     50 00 00 FF 
121b0     30 E5 05 F1 | 	add	objptr, ##41264
121b4     F2 12 02 FB | 	rdlong	arg01, objptr
121b8     09 27 02 F6 | 	mov	local01, arg01
121bc     02 26 66 F0 | 	shl	local01, #2
121c0     09 27 02 F1 | 	add	local01, arg01
121c4     02 26 66 F0 | 	shl	local01, #2
121c8     06 00 00 FF 
121cc     98 E4 85 F1 | 	sub	objptr, ##3224
121d0     F2 26 02 F1 | 	add	local01, objptr
121d4     A7 12 02 FB | 	rdlong	arg01, fp
121d8     08 26 06 F1 | 	add	local01, #8
121dc     13 13 62 FC | 	wrlong	arg01, local01
121e0     4A 00 00 FF 
121e4     98 E4 85 F1 | 	sub	objptr, ##38040
121e8     68 B3 BF FD | 	call	#_pop
121ec     A7 FA 61 FC | 	wrlong	result1, fp
121f0     04 4E 05 F1 | 	add	fp, #4
121f4     A7 FC 61 FC | 	wrlong	result2, fp
121f8     04 4E 05 F1 | 	add	fp, #4
121fc     A7 FE 61 FC | 	wrlong	result3, fp
12200     08 4E 85 F1 | 	sub	fp, #8
12204     50 00 00 FF 
12208     30 E5 05 F1 | 	add	objptr, ##41264
1220c     F2 12 02 FB | 	rdlong	arg01, objptr
12210     09 27 02 F6 | 	mov	local01, arg01
12214     02 26 66 F0 | 	shl	local01, #2
12218     09 27 02 F1 | 	add	local01, arg01
1221c     02 26 66 F0 | 	shl	local01, #2
12220     06 00 00 FF 
12224     98 E4 85 F1 | 	sub	objptr, ##3224
12228     F2 26 02 F1 | 	add	local01, objptr
1222c     A7 12 02 F6 | 	mov	arg01, fp
12230     4A 00 00 FF 
12234     98 E4 85 F1 | 	sub	objptr, ##38040
12238     FC B4 BF FD | 	call	#_converttoint
1223c     FD 12 02 F6 | 	mov	arg01, result1
12240     0C 26 06 F1 | 	add	local01, #12
12244     13 13 62 FC | 	wrlong	arg01, local01
12248     08 B3 BF FD | 	call	#_pop
1224c     A7 FA 61 FC | 	wrlong	result1, fp
12250     04 4E 05 F1 | 	add	fp, #4
12254     A7 FC 61 FC | 	wrlong	result2, fp
12258     04 4E 05 F1 | 	add	fp, #4
1225c     A7 FE 61 FC | 	wrlong	result3, fp
12260     08 4E 85 F1 | 	sub	fp, #8
12264     50 00 00 FF 
12268     30 E5 05 F1 | 	add	objptr, ##41264
1226c     F2 12 02 FB | 	rdlong	arg01, objptr
12270     09 27 02 F6 | 	mov	local01, arg01
12274     02 26 66 F0 | 	shl	local01, #2
12278     09 27 02 F1 | 	add	local01, arg01
1227c     02 26 66 F0 | 	shl	local01, #2
12280     06 00 00 FF 
12284     98 E4 85 F1 | 	sub	objptr, ##3224
12288     F2 26 02 F1 | 	add	local01, objptr
1228c     A7 12 02 F6 | 	mov	arg01, fp
12290     4A 00 00 FF 
12294     98 E4 85 F1 | 	sub	objptr, ##38040
12298     9C B4 BF FD | 	call	#_converttoint
1229c     10 26 06 F1 | 	add	local01, #16
122a0     13 FB 61 FC | 	wrlong	result1, local01
122a4                 | ' fortop+=1
122a4                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
122a4                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
122a4                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
122a4                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
122a4     4A 00 00 FF 
122a8     80 E4 05 F1 | 	add	objptr, ##38016
122ac     F2 12 02 FB | 	rdlong	arg01, objptr
122b0     09 27 02 F6 | 	mov	local01, arg01
122b4     01 26 66 F0 | 	shl	local01, #1
122b8     09 27 02 F1 | 	add	local01, arg01
122bc     02 26 66 F0 | 	shl	local01, #2
122c0     03 00 00 FF 
122c4     04 E4 85 F1 | 	sub	objptr, ##1540
122c8     F2 26 02 F1 | 	add	local01, objptr
122cc     08 26 06 F1 | 	add	local01, #8
122d0     13 27 02 FB | 	rdlong	local01, local01
122d4     FE 27 0E F2 | 	cmp	local01, #510 wz
122d8     47 00 00 FF 
122dc     7C E4 85 F1 | 	sub	objptr, ##36476
122e0     70 00 90 5D |  if_ne	jmp	#LR__1460
122e4     50 00 00 FF 
122e8     30 E5 05 F1 | 	add	objptr, ##41264
122ec     F2 12 02 FB | 	rdlong	arg01, objptr
122f0     09 27 02 F6 | 	mov	local01, arg01
122f4     02 26 66 F0 | 	shl	local01, #2
122f8     09 27 02 F1 | 	add	local01, arg01
122fc     02 26 66 F0 | 	shl	local01, #2
12300     06 00 00 FF 
12304     98 E4 85 F1 | 	sub	objptr, ##3224
12308     F2 26 02 F1 | 	add	local01, objptr
1230c     06 00 00 FF 
12310     20 E4 05 F1 | 	add	objptr, ##3104
12314     F2 12 02 FB | 	rdlong	arg01, objptr
12318     13 13 62 FC | 	wrlong	arg01, local01
1231c     78 E4 05 F1 | 	add	objptr, #120
12320     F2 12 02 FB | 	rdlong	arg01, objptr
12324     09 27 02 F6 | 	mov	local01, arg01
12328     02 26 66 F0 | 	shl	local01, #2
1232c     09 27 02 F1 | 	add	local01, arg01
12330     02 26 66 F0 | 	shl	local01, #2
12334     06 00 00 FF 
12338     98 E4 85 F1 | 	sub	objptr, ##3224
1233c     F2 26 02 F1 | 	add	local01, objptr
12340     04 26 06 F1 | 	add	local01, #4
12344     13 01 68 FC | 	wrlong	#0, local01
12348     4A 00 00 FF 
1234c     98 E4 85 F1 | 	sub	objptr, ##38040
12350     78 00 90 FD | 	jmp	#LR__1461
12354                 | LR__1460
12354     50 00 00 FF 
12358     30 E5 05 F1 | 	add	objptr, ##41264
1235c     F2 12 02 FB | 	rdlong	arg01, objptr
12360     09 27 02 F6 | 	mov	local01, arg01
12364     02 26 66 F0 | 	shl	local01, #2
12368     09 27 02 F1 | 	add	local01, arg01
1236c     02 26 66 F0 | 	shl	local01, #2
12370     06 00 00 FF 
12374     98 E4 85 F1 | 	sub	objptr, ##3224
12378     F2 26 02 F1 | 	add	local01, objptr
1237c     06 00 00 FF 
12380     28 E4 05 F1 | 	add	objptr, ##3112
12384     F2 12 02 FB | 	rdlong	arg01, objptr
12388     13 13 62 FC | 	wrlong	arg01, local01
1238c     70 E4 05 F1 | 	add	objptr, #112
12390     F2 12 02 FB | 	rdlong	arg01, objptr
12394     09 27 02 F6 | 	mov	local01, arg01
12398     02 26 66 F0 | 	shl	local01, #2
1239c     09 27 02 F1 | 	add	local01, arg01
123a0     02 26 66 F0 | 	shl	local01, #2
123a4     06 00 00 FF 
123a8     98 E4 85 F1 | 	sub	objptr, ##3224
123ac     F2 26 02 F1 | 	add	local01, objptr
123b0     18 E4 85 F1 | 	sub	objptr, #24
123b4     F2 12 02 FB | 	rdlong	arg01, objptr
123b8     4A 00 00 FF 
123bc     80 E4 85 F1 | 	sub	objptr, ##38016
123c0     01 12 06 F1 | 	add	arg01, #1
123c4     04 26 06 F1 | 	add	local01, #4
123c8     13 13 62 FC | 	wrlong	arg01, local01
123cc                 | LR__1461
123cc     A7 F0 03 F6 | 	mov	ptra, fp
123d0     B2 00 A0 FD | 	call	#popregs_
123d4                 | _do_for_ret
123d4     2D 00 64 FD | 	ret
123d8                 | 
123d8                 | ' 
123d8                 | ' '-------------------- frame
123d8                 | ' 
123d8                 | ' sub do_frame
123d8                 | _do_frame
123d8     03 4A 05 F6 | 	mov	COUNT_, #3
123dc     A8 00 A0 FD | 	call	#pushregs_
123e0     30 F0 07 F1 | 	add	ptra, #48
123e4     6C B1 BF FD | 	call	#_pop
123e8     FD 16 02 F6 | 	mov	arg03, result1
123ec     FE 14 02 F6 | 	mov	arg02, result2
123f0     FF 1A 02 F6 | 	mov	arg05, result3
123f4     24 4E 05 F1 | 	add	fp, #36
123f8     A7 16 62 FC | 	wrlong	arg03, fp
123fc     04 4E 05 F1 | 	add	fp, #4
12400     A7 14 62 FC | 	wrlong	arg02, fp
12404     04 4E 05 F1 | 	add	fp, #4
12408     A7 1A 62 FC | 	wrlong	arg05, fp
1240c     2C 4E 85 F1 | 	sub	fp, #44
12410     40 B1 BF FD | 	call	#_pop
12414     FD 16 02 F6 | 	mov	arg03, result1
12418     FE 14 02 F6 | 	mov	arg02, result2
1241c     FF 1A 02 F6 | 	mov	arg05, result3
12420     18 4E 05 F1 | 	add	fp, #24
12424     A7 16 62 FC | 	wrlong	arg03, fp
12428     04 4E 05 F1 | 	add	fp, #4
1242c     A7 14 62 FC | 	wrlong	arg02, fp
12430     04 4E 05 F1 | 	add	fp, #4
12434     A7 1A 62 FC | 	wrlong	arg05, fp
12438     20 4E 85 F1 | 	sub	fp, #32
1243c     14 B1 BF FD | 	call	#_pop
12440     FD 16 02 F6 | 	mov	arg03, result1
12444     FE 14 02 F6 | 	mov	arg02, result2
12448     FF 1A 02 F6 | 	mov	arg05, result3
1244c     0C 4E 05 F1 | 	add	fp, #12
12450     A7 16 62 FC | 	wrlong	arg03, fp
12454     04 4E 05 F1 | 	add	fp, #4
12458     A7 14 62 FC | 	wrlong	arg02, fp
1245c     04 4E 05 F1 | 	add	fp, #4
12460     A7 1A 62 FC | 	wrlong	arg05, fp
12464     14 4E 85 F1 | 	sub	fp, #20
12468     E8 B0 BF FD | 	call	#_pop
1246c     FF 16 02 F6 | 	mov	arg03, result3
12470     A7 FA 61 FC | 	wrlong	result1, fp
12474     04 4E 05 F1 | 	add	fp, #4
12478     A7 FC 61 FC | 	wrlong	result2, fp
1247c     04 4E 05 F1 | 	add	fp, #4
12480     A7 16 62 FC | 	wrlong	arg03, fp
12484     08 4E 85 F1 | 	sub	fp, #8
12488     A7 12 02 F6 | 	mov	arg01, fp
1248c     A8 B2 BF FD | 	call	#_converttoint
12490     FD 26 02 F6 | 	mov	local01, result1
12494     0C 4E 05 F1 | 	add	fp, #12
12498     A7 12 02 F6 | 	mov	arg01, fp
1249c     0C 4E 85 F1 | 	sub	fp, #12
124a0     94 B2 BF FD | 	call	#_converttoint
124a4     FD 28 02 F6 | 	mov	local02, result1
124a8     18 4E 05 F1 | 	add	fp, #24
124ac     A7 12 02 F6 | 	mov	arg01, fp
124b0     18 4E 85 F1 | 	sub	fp, #24
124b4     80 B2 BF FD | 	call	#_converttoint
124b8     FD 2A 02 F6 | 	mov	local03, result1
124bc     24 4E 05 F1 | 	add	fp, #36
124c0     A7 12 02 F6 | 	mov	arg01, fp
124c4     24 4E 85 F1 | 	sub	fp, #36
124c8     6C B2 BF FD | 	call	#_converttoint
124cc     FD 18 02 F6 | 	mov	arg04, result1
124d0     37 00 00 FF 
124d4     28 E4 05 F1 | 	add	objptr, ##28200
124d8     F2 1A 02 FB | 	rdlong	arg05, objptr
124dc     37 00 00 FF 
124e0     28 E4 85 F1 | 	sub	objptr, ##28200
124e4     13 13 02 F6 | 	mov	arg01, local01
124e8     14 15 02 F6 | 	mov	arg02, local02
124ec     15 17 02 F6 | 	mov	arg03, local03
124f0     74 22 B1 FD | 	call	#_hg010b_spin2_frame
124f4     A7 F0 03 F6 | 	mov	ptra, fp
124f8     B2 00 A0 FD | 	call	#popregs_
124fc                 | _do_frame_ret
124fc     2D 00 64 FD | 	ret
12500                 | 
12500                 | ' 
12500                 | ' '-------------------- framebuf
12500                 | ' 
12500                 | ' sub do_framebuf
12500                 | _do_framebuf
12500     00 4A 05 F6 | 	mov	COUNT_, #0
12504     A8 00 A0 FD | 	call	#pushregs_
12508     0C F0 07 F1 | 	add	ptra, #12
1250c     08 4E 05 F1 | 	add	fp, #8
12510     A7 3A 68 FC | 	wrlong	#29, fp
12514     F2 12 02 FB | 	rdlong	arg01, objptr
12518     08 4E 85 F1 | 	sub	fp, #8
1251c     A7 12 62 FC | 	wrlong	arg01, fp
12520     A7 12 02 F6 | 	mov	arg01, fp
12524     C4 B0 BF FD | 	call	#_push
12528     A7 F0 03 F6 | 	mov	ptra, fp
1252c     B2 00 A0 FD | 	call	#popregs_
12530                 | _do_framebuf_ret
12530     2D 00 64 FD | 	ret
12534                 | 
12534                 | ' '-------------------- fre
12534                 | ' 
12534                 | ' sub do_fre
12534                 | _do_fre
12534     01 4A 05 F6 | 	mov	COUNT_, #1
12538     A8 00 A0 FD | 	call	#pushregs_
1253c     0C F0 07 F1 | 	add	ptra, #12
12540     52 00 00 FF 
12544     98 E4 05 F1 | 	add	objptr, ##42136
12548     F2 12 02 FB | 	rdlong	arg01, objptr
1254c     0F 00 00 FF 
12550     3C E4 85 F1 | 	sub	objptr, ##7740
12554     F2 26 02 FB | 	rdlong	local01, objptr
12558     13 13 82 F1 | 	sub	arg01, local01
1255c     0F 00 00 FF 
12560     B4 E4 05 F1 | 	add	objptr, ##7860
12564     F2 12 62 FC | 	wrlong	arg01, objptr
12568     08 4E 05 F1 | 	add	fp, #8
1256c     A7 3A 68 FC | 	wrlong	#29, fp
12570     08 4E 85 F1 | 	sub	fp, #8
12574     F2 26 02 FB | 	rdlong	local01, objptr
12578     52 00 00 FF 
1257c     10 E5 85 F1 | 	sub	objptr, ##42256
12580     A7 26 62 FC | 	wrlong	local01, fp
12584     A7 12 02 F6 | 	mov	arg01, fp
12588     60 B0 BF FD | 	call	#_push
1258c     A7 F0 03 F6 | 	mov	ptra, fp
12590     B2 00 A0 FD | 	call	#popregs_
12594                 | _do_fre_ret
12594     2D 00 64 FD | 	ret
12598                 | 
12598                 | ' 
12598                 | ' '-------------------- get
12598                 | ' 
12598                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
12598                 | _do_get
12598     09 4A 05 F6 | 	mov	COUNT_, #9
1259c     A8 00 A0 FD | 	call	#pushregs_
125a0     40 F0 07 F1 | 	add	ptra, #64
125a4     4A 00 00 FF 
125a8     80 E4 05 F1 | 	add	objptr, ##38016
125ac     F2 1A 02 FB | 	rdlong	arg05, objptr
125b0     0D 19 02 F6 | 	mov	arg04, arg05
125b4     01 18 66 F0 | 	shl	arg04, #1
125b8     0D 19 02 F1 | 	add	arg04, arg05
125bc     02 18 66 F0 | 	shl	arg04, #2
125c0     03 00 00 FF 
125c4     04 E4 85 F1 | 	sub	objptr, ##1540
125c8     F2 18 02 F1 | 	add	arg04, objptr
125cc     0C 1B 02 FB | 	rdlong	arg05, arg04
125d0     A7 1A 62 FC | 	wrlong	arg05, fp
125d4                 | ' 
125d4                 | ' numpar=compiledline(lineptr_e).result.uresult
125d4                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
125d4     04 1A 0E F2 | 	cmp	arg05, #4 wz
125d8     47 00 00 FF 
125dc     7C E4 85 F1 | 	sub	objptr, ##36476
125e0     48 00 90 5D |  if_ne	jmp	#LR__1470
125e4     6C AF BF FD | 	call	#_pop
125e8     FF 1A 02 F6 | 	mov	arg05, result3
125ec     1C 4E 05 F1 | 	add	fp, #28
125f0     A7 FA 61 FC | 	wrlong	result1, fp
125f4     04 4E 05 F1 | 	add	fp, #4
125f8     A7 FC 61 FC | 	wrlong	result2, fp
125fc     04 4E 05 F1 | 	add	fp, #4
12600     A7 1A 62 FC | 	wrlong	arg05, fp
12604     08 4E 85 F1 | 	sub	fp, #8
12608     A7 12 02 F6 | 	mov	arg01, fp
1260c     1C 4E 85 F1 | 	sub	fp, #28
12610     24 B1 BF FD | 	call	#_converttoint
12614     52 00 00 FF 
12618     0C E5 05 F1 | 	add	objptr, ##42252
1261c     F2 FA 61 FC | 	wrlong	result1, objptr
12620     52 00 00 FF 
12624     0C E5 85 F1 | 	sub	objptr, ##42252
12628     18 00 90 FD | 	jmp	#LR__1471
1262c                 | LR__1470
1262c     52 00 00 FF 
12630     0C E5 05 F1 | 	add	objptr, ##42252
12634     FF FF FF FF 
12638     F2 FE 6B FC | 	wrlong	##-1, objptr
1263c     52 00 00 FF 
12640     0C E5 85 F1 | 	sub	objptr, ##42252
12644                 | LR__1471
12644                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
12644     A7 16 02 FB | 	rdlong	arg03, fp
12648     03 16 56 F2 | 	cmps	arg03, #3 wc
1264c     40 00 90 CD |  if_b	jmp	#LR__1472
12650     00 AF BF FD | 	call	#_pop
12654     FF 16 02 F6 | 	mov	arg03, result3
12658     1C 4E 05 F1 | 	add	fp, #28
1265c     A7 FA 61 FC | 	wrlong	result1, fp
12660     04 4E 05 F1 | 	add	fp, #4
12664     A7 FC 61 FC | 	wrlong	result2, fp
12668     04 4E 05 F1 | 	add	fp, #4
1266c     A7 16 62 FC | 	wrlong	arg03, fp
12670     08 4E 85 F1 | 	sub	fp, #8
12674     A7 12 02 F6 | 	mov	arg01, fp
12678     1C 4E 85 F1 | 	sub	fp, #28
1267c     B8 B0 BF FD | 	call	#_converttoint
12680     08 4E 05 F1 | 	add	fp, #8
12684     A7 FA 61 FC | 	wrlong	result1, fp
12688     08 4E 85 F1 | 	sub	fp, #8
1268c     0C 00 90 FD | 	jmp	#LR__1473
12690                 | LR__1472
12690     08 4E 05 F1 | 	add	fp, #8
12694     A7 02 68 FC | 	wrlong	#1, fp
12698     08 4E 85 F1 | 	sub	fp, #8
1269c                 | LR__1473
1269c                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
1269c     A7 16 02 FB | 	rdlong	arg03, fp
126a0     02 16 56 F2 | 	cmps	arg03, #2 wc
126a4     3C 00 90 CD |  if_b	jmp	#LR__1474
126a8     A8 AE BF FD | 	call	#_pop
126ac     FF 16 02 F6 | 	mov	arg03, result3
126b0     1C 4E 05 F1 | 	add	fp, #28
126b4     A7 FA 61 FC | 	wrlong	result1, fp
126b8     04 4E 05 F1 | 	add	fp, #4
126bc     A7 FC 61 FC | 	wrlong	result2, fp
126c0     04 4E 05 F1 | 	add	fp, #4
126c4     A7 16 62 FC | 	wrlong	arg03, fp
126c8     08 4E 85 F1 | 	sub	fp, #8
126cc     A7 12 02 F6 | 	mov	arg01, fp
126d0     1C 4E 85 F1 | 	sub	fp, #28
126d4     60 B0 BF FD | 	call	#_converttoint
126d8     0C 4E 05 F1 | 	add	fp, #12
126dc     A7 FA 61 FC | 	wrlong	result1, fp
126e0     0C 4E 85 F1 | 	sub	fp, #12
126e4                 | LR__1474
126e4     6C AE BF FD | 	call	#_pop
126e8     FF 16 02 F6 | 	mov	arg03, result3
126ec     1C 4E 05 F1 | 	add	fp, #28
126f0     A7 FA 61 FC | 	wrlong	result1, fp
126f4     04 4E 05 F1 | 	add	fp, #4
126f8     A7 FC 61 FC | 	wrlong	result2, fp
126fc     04 4E 05 F1 | 	add	fp, #4
12700     A7 16 62 FC | 	wrlong	arg03, fp
12704     08 4E 85 F1 | 	sub	fp, #8
12708     A7 12 02 F6 | 	mov	arg01, fp
1270c     1C 4E 85 F1 | 	sub	fp, #28
12710     24 B0 BF FD | 	call	#_converttoint
12714     04 4E 05 F1 | 	add	fp, #4
12718     A7 FA 61 FC | 	wrlong	result1, fp
1271c     10 4E 05 F1 | 	add	fp, #16
12720     A7 16 02 FB | 	rdlong	arg03, fp
12724     14 4E 85 F1 | 	sub	fp, #20
12728     02 16 66 F0 | 	shl	arg03, #2
1272c     50 00 00 FF 
12730     C4 E4 05 F1 | 	add	objptr, ##41156
12734     F2 26 02 F6 | 	mov	local01, objptr
12738     F2 16 02 F1 | 	add	arg03, objptr
1273c     0B 01 68 FC | 	wrlong	#0, arg03
12740                 | ' t1=pop() : channel=converttoint(t1)
12740                 | ' getres(j)=0
12740                 | ' if pos>=0 then
12740     02 00 00 FF 
12744     48 E4 05 F1 | 	add	objptr, ##1096
12748     F2 28 02 FB | 	rdlong	local02, objptr
1274c     52 00 00 FF 
12750     0C E5 85 F1 | 	sub	objptr, ##42252
12754     00 28 56 F2 | 	cmps	local02, #0 wc
12758     F0 01 90 CD |  if_b	jmp	#LR__1481
1275c                 | '   for i=0 to  amount/1024
1275c     10 4E 05 F1 | 	add	fp, #16
12760     A7 00 68 FC | 	wrlong	#0, fp
12764     08 4E 85 F1 | 	sub	fp, #8
12768     A7 2A 02 FB | 	rdlong	local03, fp
1276c     08 4E 85 F1 | 	sub	fp, #8
12770     15 2D 52 F6 | 	abs	local04, local03 wc
12774     0A 2C 46 F0 | 	shr	local04, #10
12778     16 2D 82 F6 | 	negc	local04, local04
1277c     01 2C 06 F1 | 	add	local04, #1
12780                 | LR__1475
12780     10 4E 05 F1 | 	add	fp, #16
12784     A7 2A 02 FB | 	rdlong	local03, fp
12788     10 4E 85 F1 | 	sub	fp, #16
1278c     16 2B 52 F2 | 	cmps	local03, local04 wc
12790     9C 03 90 3D |  if_ae	jmp	#LR__1489
12794                 | '     get #channel,pos+1,block(0),amount,r
12794     04 4E 05 F1 | 	add	fp, #4
12798     A7 12 02 FB | 	rdlong	arg01, fp
1279c     52 00 00 FF 
127a0     0C E5 05 F1 | 	add	objptr, ##42252
127a4     F2 14 02 FB | 	rdlong	arg02, objptr
127a8     01 14 06 F1 | 	add	arg02, #1
127ac     04 00 00 FF 
127b0     58 E4 85 F1 | 	sub	objptr, ##2136
127b4     F2 16 02 F6 | 	mov	arg03, objptr
127b8     4E 00 00 FF 
127bc     B4 E4 85 F1 | 	sub	objptr, ##40116
127c0     04 4E 05 F1 | 	add	fp, #4
127c4     A7 18 02 FB | 	rdlong	arg04, fp
127c8     08 4E 85 F1 | 	sub	fp, #8
127cc     01 1A 06 F6 | 	mov	arg05, #1
127d0     D0 4D B1 FD | 	call	#__system___basic_get
127d4     18 4E 05 F1 | 	add	fp, #24
127d8     A7 FA 61 FC | 	wrlong	result1, fp
127dc                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
127dc     0C 4E 85 F1 | 	sub	fp, #12
127e0     A7 28 02 FB | 	rdlong	local02, fp
127e4     0C 4E 85 F1 | 	sub	fp, #12
127e8     00 04 00 FF 
127ec     00 28 56 F2 | 	cmps	local02, ##524288 wc
127f0     7C 00 90 3D |  if_ae	jmp	#LR__1477
127f4     14 4E 05 F1 | 	add	fp, #20
127f8     A7 00 68 FC | 	wrlong	#0, fp
127fc     04 4E 05 F1 | 	add	fp, #4
12800     A7 2E 02 FB | 	rdlong	local05, fp
12804     18 4E 85 F1 | 	sub	fp, #24
12808                 | LR__1476
12808     14 4E 05 F1 | 	add	fp, #20
1280c     A7 28 02 FB | 	rdlong	local02, fp
12810     14 4E 85 F1 | 	sub	fp, #20
12814     17 29 52 F2 | 	cmps	local02, local05 wc
12818     D8 00 90 3D |  if_ae	jmp	#LR__1480
1281c     0C 4E 05 F1 | 	add	fp, #12
12820     A7 12 02 FB | 	rdlong	arg01, fp
12824     04 4E 05 F1 | 	add	fp, #4
12828     A7 2A 02 FB | 	rdlong	local03, fp
1282c     0A 2A 66 F0 | 	shl	local03, #10
12830     15 13 02 F1 | 	add	arg01, local03
12834     04 4E 05 F1 | 	add	fp, #4
12838     A7 2A 02 FB | 	rdlong	local03, fp
1283c     15 13 02 F1 | 	add	arg01, local03
12840     4E 00 00 FF 
12844     B4 E4 05 F1 | 	add	objptr, ##40116
12848     F2 2A 02 F1 | 	add	local03, objptr
1284c     15 15 C2 FA | 	rdbyte	arg02, local03
12850     09 15 42 FC | 	wrbyte	arg02, arg01
12854     4E 00 00 FF 
12858     B4 E4 85 F1 | 	sub	objptr, ##40116
1285c     A7 2A 02 FB | 	rdlong	local03, fp
12860     01 2A 06 F1 | 	add	local03, #1
12864     A7 2A 62 FC | 	wrlong	local03, fp
12868     14 4E 85 F1 | 	sub	fp, #20
1286c     98 FF 9F FD | 	jmp	#LR__1476
12870                 | LR__1477
12870     14 4E 05 F1 | 	add	fp, #20
12874     A7 00 68 FC | 	wrlong	#0, fp
12878     04 4E 05 F1 | 	add	fp, #4
1287c     A7 30 02 FB | 	rdlong	local06, fp
12880     18 4E 85 F1 | 	sub	fp, #24
12884                 | LR__1478
12884     14 4E 05 F1 | 	add	fp, #20
12888     A7 28 02 FB | 	rdlong	local02, fp
1288c     14 4E 85 F1 | 	sub	fp, #20
12890     18 29 52 F2 | 	cmps	local02, local06 wc
12894     5C 00 90 3D |  if_ae	jmp	#LR__1479
12898     0C 4E 05 F1 | 	add	fp, #12
1289c     A7 12 02 FB | 	rdlong	arg01, fp
128a0     04 4E 05 F1 | 	add	fp, #4
128a4     A7 2E 02 FB | 	rdlong	local05, fp
128a8     0A 2E 66 F0 | 	shl	local05, #10
128ac     17 13 02 F1 | 	add	arg01, local05
128b0     04 4E 05 F1 | 	add	fp, #4
128b4     A7 2E 02 FB | 	rdlong	local05, fp
128b8     17 13 02 F1 | 	add	arg01, local05
128bc     14 4E 85 F1 | 	sub	fp, #20
128c0     4E 00 00 FF 
128c4     B4 E4 05 F1 | 	add	objptr, ##40116
128c8     F2 2E 02 F1 | 	add	local05, objptr
128cc     17 15 C2 FA | 	rdbyte	arg02, local05
128d0     4E 00 00 FF 
128d4     B4 E4 85 F1 | 	sub	objptr, ##40116
128d8     9C 06 B1 FD | 	call	#_pspoke
128dc     14 4E 05 F1 | 	add	fp, #20
128e0     A7 2E 02 FB | 	rdlong	local05, fp
128e4     01 2E 06 F1 | 	add	local05, #1
128e8     A7 2E 62 FC | 	wrlong	local05, fp
128ec     14 4E 85 F1 | 	sub	fp, #20
128f0     90 FF 9F FD | 	jmp	#LR__1478
128f4                 | LR__1479
128f4                 | LR__1480
128f4     14 4E 05 F1 | 	add	fp, #20
128f8     A7 30 02 FB | 	rdlong	local06, fp
128fc     18 2B 02 F6 | 	mov	local03, local06
12900     02 2A 66 F0 | 	shl	local03, #2
12904     50 00 00 FF 
12908     C4 E4 05 F1 | 	add	objptr, ##41156
1290c     F2 2A 02 F1 | 	add	local03, objptr
12910     02 30 66 F0 | 	shl	local06, #2
12914     F2 30 02 F1 | 	add	local06, objptr
12918     18 31 02 FB | 	rdlong	local06, local06
1291c     04 4E 05 F1 | 	add	fp, #4
12920     A7 2E 02 FB | 	rdlong	local05, fp
12924     17 31 02 F1 | 	add	local06, local05
12928     15 31 62 FC | 	wrlong	local06, local03
1292c     08 4E 85 F1 | 	sub	fp, #8
12930     A7 30 02 FB | 	rdlong	local06, fp
12934     01 30 06 F1 | 	add	local06, #1
12938     A7 30 62 FC | 	wrlong	local06, fp
1293c     10 4E 85 F1 | 	sub	fp, #16
12940     50 00 00 FF 
12944     C4 E4 85 F1 | 	sub	objptr, ##41156
12948     34 FE 9F FD | 	jmp	#LR__1475
1294c                 | LR__1481
1294c                 | '   for i=0 to  amount/1024
1294c     10 4E 05 F1 | 	add	fp, #16
12950     A7 00 68 FC | 	wrlong	#0, fp
12954     08 4E 85 F1 | 	sub	fp, #8
12958     A7 2A 02 FB | 	rdlong	local03, fp
1295c     08 4E 85 F1 | 	sub	fp, #8
12960     15 33 52 F6 | 	abs	local07, local03 wc
12964     0A 32 46 F0 | 	shr	local07, #10
12968     19 33 82 F6 | 	negc	local07, local07
1296c     01 32 06 F1 | 	add	local07, #1
12970                 | LR__1482
12970     10 4E 05 F1 | 	add	fp, #16
12974     A7 2A 02 FB | 	rdlong	local03, fp
12978     10 4E 85 F1 | 	sub	fp, #16
1297c     19 2B 52 F2 | 	cmps	local03, local07 wc
12980     AC 01 90 3D |  if_ae	jmp	#LR__1488
12984                 | '     get #channel,,block(0),amount,r
12984     04 4E 05 F1 | 	add	fp, #4
12988     A7 12 02 FB | 	rdlong	arg01, fp
1298c     4E 00 00 FF 
12990     B4 E4 05 F1 | 	add	objptr, ##40116
12994     F2 16 02 F6 | 	mov	arg03, objptr
12998     4E 00 00 FF 
1299c     B4 E4 85 F1 | 	sub	objptr, ##40116
129a0     04 4E 05 F1 | 	add	fp, #4
129a4     A7 18 02 FB | 	rdlong	arg04, fp
129a8     08 4E 85 F1 | 	sub	fp, #8
129ac     00 14 06 F6 | 	mov	arg02, #0
129b0     01 1A 06 F6 | 	mov	arg05, #1
129b4     EC 4B B1 FD | 	call	#__system___basic_get
129b8     18 4E 05 F1 | 	add	fp, #24
129bc     A7 FA 61 FC | 	wrlong	result1, fp
129c0                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
129c0     0C 4E 85 F1 | 	sub	fp, #12
129c4     A7 28 02 FB | 	rdlong	local02, fp
129c8     0C 4E 85 F1 | 	sub	fp, #12
129cc     00 04 00 FF 
129d0     00 28 56 F2 | 	cmps	local02, ##524288 wc
129d4     7C 00 90 3D |  if_ae	jmp	#LR__1484
129d8     14 4E 05 F1 | 	add	fp, #20
129dc     A7 00 68 FC | 	wrlong	#0, fp
129e0     04 4E 05 F1 | 	add	fp, #4
129e4     A7 34 02 FB | 	rdlong	local08, fp
129e8     18 4E 85 F1 | 	sub	fp, #24
129ec                 | LR__1483
129ec     14 4E 05 F1 | 	add	fp, #20
129f0     A7 28 02 FB | 	rdlong	local02, fp
129f4     14 4E 85 F1 | 	sub	fp, #20
129f8     1A 29 52 F2 | 	cmps	local02, local08 wc
129fc     D8 00 90 3D |  if_ae	jmp	#LR__1487
12a00     0C 4E 05 F1 | 	add	fp, #12
12a04     A7 12 02 FB | 	rdlong	arg01, fp
12a08     04 4E 05 F1 | 	add	fp, #4
12a0c     A7 30 02 FB | 	rdlong	local06, fp
12a10     0A 30 66 F0 | 	shl	local06, #10
12a14     18 13 02 F1 | 	add	arg01, local06
12a18     04 4E 05 F1 | 	add	fp, #4
12a1c     A7 30 02 FB | 	rdlong	local06, fp
12a20     18 13 02 F1 | 	add	arg01, local06
12a24     4E 00 00 FF 
12a28     B4 E4 05 F1 | 	add	objptr, ##40116
12a2c     F2 30 02 F1 | 	add	local06, objptr
12a30     18 15 C2 FA | 	rdbyte	arg02, local06
12a34     09 15 42 FC | 	wrbyte	arg02, arg01
12a38     4E 00 00 FF 
12a3c     B4 E4 85 F1 | 	sub	objptr, ##40116
12a40     A7 30 02 FB | 	rdlong	local06, fp
12a44     01 30 06 F1 | 	add	local06, #1
12a48     A7 30 62 FC | 	wrlong	local06, fp
12a4c     14 4E 85 F1 | 	sub	fp, #20
12a50     98 FF 9F FD | 	jmp	#LR__1483
12a54                 | LR__1484
12a54     14 4E 05 F1 | 	add	fp, #20
12a58     A7 00 68 FC | 	wrlong	#0, fp
12a5c     04 4E 05 F1 | 	add	fp, #4
12a60     A7 36 02 FB | 	rdlong	local09, fp
12a64     18 4E 85 F1 | 	sub	fp, #24
12a68                 | LR__1485
12a68     14 4E 05 F1 | 	add	fp, #20
12a6c     A7 28 02 FB | 	rdlong	local02, fp
12a70     14 4E 85 F1 | 	sub	fp, #20
12a74     1B 29 52 F2 | 	cmps	local02, local09 wc
12a78     5C 00 90 3D |  if_ae	jmp	#LR__1486
12a7c     0C 4E 05 F1 | 	add	fp, #12
12a80     A7 12 02 FB | 	rdlong	arg01, fp
12a84     04 4E 05 F1 | 	add	fp, #4
12a88     A7 34 02 FB | 	rdlong	local08, fp
12a8c     0A 34 66 F0 | 	shl	local08, #10
12a90     1A 13 02 F1 | 	add	arg01, local08
12a94     04 4E 05 F1 | 	add	fp, #4
12a98     A7 34 02 FB | 	rdlong	local08, fp
12a9c     1A 13 02 F1 | 	add	arg01, local08
12aa0     14 4E 85 F1 | 	sub	fp, #20
12aa4     4E 00 00 FF 
12aa8     B4 E4 05 F1 | 	add	objptr, ##40116
12aac     F2 34 02 F1 | 	add	local08, objptr
12ab0     1A 15 C2 FA | 	rdbyte	arg02, local08
12ab4     4E 00 00 FF 
12ab8     B4 E4 85 F1 | 	sub	objptr, ##40116
12abc     B8 04 B1 FD | 	call	#_pspoke
12ac0     14 4E 05 F1 | 	add	fp, #20
12ac4     A7 34 02 FB | 	rdlong	local08, fp
12ac8     01 34 06 F1 | 	add	local08, #1
12acc     A7 34 62 FC | 	wrlong	local08, fp
12ad0     14 4E 85 F1 | 	sub	fp, #20
12ad4     90 FF 9F FD | 	jmp	#LR__1485
12ad8                 | LR__1486
12ad8                 | LR__1487
12ad8     14 4E 05 F1 | 	add	fp, #20
12adc     A7 36 02 FB | 	rdlong	local09, fp
12ae0     1B 31 02 F6 | 	mov	local06, local09
12ae4     02 30 66 F0 | 	shl	local06, #2
12ae8     50 00 00 FF 
12aec     C4 E4 05 F1 | 	add	objptr, ##41156
12af0     F2 30 02 F1 | 	add	local06, objptr
12af4     02 36 66 F0 | 	shl	local09, #2
12af8     F2 36 02 F1 | 	add	local09, objptr
12afc     1B 37 02 FB | 	rdlong	local09, local09
12b00     04 4E 05 F1 | 	add	fp, #4
12b04     A7 34 02 FB | 	rdlong	local08, fp
12b08     1A 37 02 F1 | 	add	local09, local08
12b0c     18 37 62 FC | 	wrlong	local09, local06
12b10     08 4E 85 F1 | 	sub	fp, #8
12b14     A7 36 02 FB | 	rdlong	local09, fp
12b18     01 36 06 F1 | 	add	local09, #1
12b1c     A7 36 62 FC | 	wrlong	local09, fp
12b20     10 4E 85 F1 | 	sub	fp, #16
12b24     50 00 00 FF 
12b28     C4 E4 85 F1 | 	sub	objptr, ##41156
12b2c     40 FE 9F FD | 	jmp	#LR__1482
12b30                 | LR__1488
12b30                 | LR__1489
12b30     A7 F0 03 F6 | 	mov	ptra, fp
12b34     B2 00 A0 FD | 	call	#popregs_
12b38                 | _do_get_ret
12b38     2D 00 64 FD | 	ret
12b3c                 | 
12b3c                 | ' 
12b3c                 | ' '-------------------- getenvsustain
12b3c                 | ' 
12b3c                 | ' sub do_getenvsustain
12b3c                 | _do_getenvsustain
12b3c     01 4A 05 F6 | 	mov	COUNT_, #1
12b40     A8 00 A0 FD | 	call	#pushregs_
12b44     10 F0 07 F1 | 	add	ptra, #16
12b48     4A 00 00 FF 
12b4c     80 E4 05 F1 | 	add	objptr, ##38016
12b50     F2 26 02 FB | 	rdlong	local01, objptr
12b54     13 17 02 F6 | 	mov	arg03, local01
12b58     01 16 66 F0 | 	shl	arg03, #1
12b5c     13 17 02 F1 | 	add	arg03, local01
12b60     02 16 66 F0 | 	shl	arg03, #2
12b64     03 00 00 FF 
12b68     04 E4 85 F1 | 	sub	objptr, ##1540
12b6c     F2 16 02 F1 | 	add	arg03, objptr
12b70     0B 17 02 FB | 	rdlong	arg03, arg03
12b74     0C 4E 05 F1 | 	add	fp, #12
12b78     A7 16 62 FC | 	wrlong	arg03, fp
12b7c                 | ' 
12b7c                 | ' numpar=compiledline(lineptr_e).result.uresult
12b7c                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12b7c     0C 4E 85 F1 | 	sub	fp, #12
12b80     02 16 16 F2 | 	cmp	arg03, #2 wc
12b84     47 00 00 FF 
12b88     7C E4 85 F1 | 	sub	objptr, ##36476
12b8c     0C 4E 05 C1 |  if_b	add	fp, #12
12b90     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12b94     0C 4E 85 C1 |  if_b	sub	fp, #12
12b98     40 00 90 4D |  if_c_and_nz	jmp	#LR__1490
12b9c     00 12 06 F6 | 	mov	arg01, #0
12ba0     B8 98 B1 FD | 	call	#__system___getiolock_0603
12ba4     FD 12 02 F6 | 	mov	arg01, result1
12ba8     88 3B B1 FD | 	call	#__system___lockmem
12bac     B6 01 00 FF 
12bb0     0F 14 06 F6 | 	mov	arg02, ##@LR__5898
12bb4     00 12 06 F6 | 	mov	arg01, #0
12bb8     00 16 06 F6 | 	mov	arg03, #0
12bbc     68 48 B1 FD | 	call	#__system___basic_print_string
12bc0     00 12 06 F6 | 	mov	arg01, #0
12bc4     94 98 B1 FD | 	call	#__system___getiolock_0603
12bc8     FD 00 68 FC | 	wrlong	#0, result1
12bcc     27 12 06 F6 | 	mov	arg01, #39
12bd0     00 14 06 F6 | 	mov	arg02, #0
12bd4     70 01 B1 FD | 	call	#_printerror
12bd8     64 00 90 FD | 	jmp	#LR__1491
12bdc                 | LR__1490
12bdc     74 A9 BF FD | 	call	#_pop
12be0     FD 26 02 F6 | 	mov	local01, result1
12be4     FE 16 02 F6 | 	mov	arg03, result2
12be8     A7 26 62 FC | 	wrlong	local01, fp
12bec     04 4E 05 F1 | 	add	fp, #4
12bf0     A7 16 62 FC | 	wrlong	arg03, fp
12bf4     04 4E 05 F1 | 	add	fp, #4
12bf8     A7 FE 61 FC | 	wrlong	result3, fp
12bfc     08 4E 85 F1 | 	sub	fp, #8
12c00     A7 12 02 F6 | 	mov	arg01, fp
12c04     30 AB BF FD | 	call	#_converttoint
12c08     FD 26 02 F6 | 	mov	local01, result1
12c0c     01 26 66 F0 | 	shl	local01, #1
12c10     52 00 00 FF 
12c14     B4 E4 05 F1 | 	add	objptr, ##42164
12c18     F2 26 02 F1 | 	add	local01, objptr
12c1c     13 27 E2 FA | 	rdword	local01, local01
12c20     A7 26 62 FC | 	wrlong	local01, fp
12c24     08 4E 05 F1 | 	add	fp, #8
12c28     A7 38 68 FC | 	wrlong	#28, fp
12c2c     08 4E 85 F1 | 	sub	fp, #8
12c30     A7 12 02 F6 | 	mov	arg01, fp
12c34     52 00 00 FF 
12c38     B4 E4 85 F1 | 	sub	objptr, ##42164
12c3c     AC A9 BF FD | 	call	#_push
12c40                 | LR__1491
12c40     A7 F0 03 F6 | 	mov	ptra, fp
12c44     B2 00 A0 FD | 	call	#popregs_
12c48                 | _do_getenvsustain_ret
12c48     2D 00 64 FD | 	ret
12c4c                 | 
12c4c                 | ' 
12c4c                 | ' '-------------------- getnotevalue
12c4c                 | ' 
12c4c                 | ' sub do_getnotevalue
12c4c                 | _do_getnotevalue
12c4c     01 4A 05 F6 | 	mov	COUNT_, #1
12c50     A8 00 A0 FD | 	call	#pushregs_
12c54     1C F0 07 F1 | 	add	ptra, #28
12c58     F8 A8 BF FD | 	call	#_pop
12c5c     FF 14 02 F6 | 	mov	arg02, result3
12c60     10 4E 05 F1 | 	add	fp, #16
12c64     A7 FA 61 FC | 	wrlong	result1, fp
12c68     04 4E 05 F1 | 	add	fp, #4
12c6c     A7 FC 61 FC | 	wrlong	result2, fp
12c70     04 4E 05 F1 | 	add	fp, #4
12c74     A7 14 62 FC | 	wrlong	arg02, fp
12c78     08 4E 85 F1 | 	sub	fp, #8
12c7c     A7 12 02 F6 | 	mov	arg01, fp
12c80     10 4E 85 F1 | 	sub	fp, #16
12c84     B0 AA BF FD | 	call	#_converttoint
12c88     FD 14 52 F6 | 	abs	arg02, result1 wc
12c8c     0C 14 16 FD | 	qdiv	arg02, #12
12c90     0C 4E 05 F1 | 	add	fp, #12
12c94     A7 FA 61 FC | 	wrlong	result1, fp
12c98     14 00 00 FF 
12c9c     D8 E4 05 F1 | 	add	objptr, ##10456
12ca0     08 4E 85 F1 | 	sub	fp, #8
12ca4     19 14 62 FD | 	getqy	arg02
12ca8     0A 15 82 F6 | 	negc	arg02, arg02
12cac     02 14 66 F0 | 	shl	arg02, #2
12cb0     F2 14 02 F1 | 	add	arg02, objptr
12cb4     0A 15 02 FB | 	rdlong	arg02, arg02
12cb8     A7 14 62 FC | 	wrlong	arg02, fp
12cbc     08 4E 05 F1 | 	add	fp, #8
12cc0     A7 14 02 FB | 	rdlong	arg02, fp
12cc4     0A 15 52 F6 | 	abs	arg02, arg02 wc
12cc8     0C 14 16 FD | 	qdiv	arg02, #12
12ccc     0C 4E 85 F1 | 	sub	fp, #12
12cd0     14 00 00 FF 
12cd4     D8 E4 85 F1 | 	sub	objptr, ##10456
12cd8     18 14 62 FD | 	getqx	arg02
12cdc     0A 13 82 F6 | 	negc	arg01, arg02
12ce0     09 13 52 F6 | 	abs	arg01, arg01 wc
12ce4     1F 26 C6 C9 |  if_b	decod	local01, #31
12ce8     00 26 06 36 |  if_ae	mov	local01, #0
12cec     B8 64 B1 FD | 	call	#__system___float_fromuns
12cf0     13 FB 61 F5 | 	xor	result1, local01
12cf4     08 4E 05 F1 | 	add	fp, #8
12cf8     A7 FA 61 FC | 	wrlong	result1, fp
12cfc     FD 14 02 F6 | 	mov	arg02, result1
12d00     08 4E 85 F1 | 	sub	fp, #8
12d04     1E 12 C6 F9 | 	decod	arg01, #30
12d08     A8 77 B1 FD | 	call	#__system____builtin_powf
12d0c     FD 12 02 F6 | 	mov	arg01, result1
12d10     04 4E 05 F1 | 	add	fp, #4
12d14     A7 14 02 FB | 	rdlong	arg02, fp
12d18     04 4E 85 F1 | 	sub	fp, #4
12d1c     8C 68 B1 FD | 	call	#__system___float_mul
12d20     A7 FA 61 FC | 	wrlong	result1, fp
12d24     10 4E 05 F1 | 	add	fp, #16
12d28     A7 FA 61 FC | 	wrlong	result1, fp
12d2c     08 4E 05 F1 | 	add	fp, #8
12d30     A7 3C 68 FC | 	wrlong	#30, fp
12d34     08 4E 85 F1 | 	sub	fp, #8
12d38     A7 12 02 F6 | 	mov	arg01, fp
12d3c     10 4E 85 F1 | 	sub	fp, #16
12d40     A8 A8 BF FD | 	call	#_push
12d44     A7 F0 03 F6 | 	mov	ptra, fp
12d48     B2 00 A0 FD | 	call	#popregs_
12d4c                 | _do_getnotevalue_ret
12d4c     2D 00 64 FD | 	ret
12d50                 | 
12d50                 | ' 
12d50                 | ' '-------------------- getpixel
12d50                 | ' 
12d50                 | ' sub do_getpixel
12d50                 | _do_getpixel
12d50     00 4A 05 F6 | 	mov	COUNT_, #0
12d54     A8 00 A0 FD | 	call	#pushregs_
12d58     24 F0 07 F1 | 	add	ptra, #36
12d5c     4A 00 00 FF 
12d60     80 E4 05 F1 | 	add	objptr, ##38016
12d64     F2 16 02 FB | 	rdlong	arg03, objptr
12d68     0B 15 02 F6 | 	mov	arg02, arg03
12d6c     01 14 66 F0 | 	shl	arg02, #1
12d70     0B 15 02 F1 | 	add	arg02, arg03
12d74     02 14 66 F0 | 	shl	arg02, #2
12d78     03 00 00 FF 
12d7c     04 E4 85 F1 | 	sub	objptr, ##1540
12d80     F2 14 02 F1 | 	add	arg02, objptr
12d84     0A 17 02 FB | 	rdlong	arg03, arg02
12d88     18 4E 05 F1 | 	add	fp, #24
12d8c     A7 16 62 FC | 	wrlong	arg03, fp
12d90                 | ' 
12d90                 | ' numpar=compiledline(lineptr_e).result.uresult
12d90                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
12d90     18 4E 85 F1 | 	sub	fp, #24
12d94     02 16 0E F2 | 	cmp	arg03, #2 wz
12d98     47 00 00 FF 
12d9c     7C E4 85 F1 | 	sub	objptr, ##36476
12da0     40 00 90 AD |  if_e	jmp	#LR__1500
12da4     00 12 06 F6 | 	mov	arg01, #0
12da8     B0 96 B1 FD | 	call	#__system___getiolock_0603
12dac     FD 12 02 F6 | 	mov	arg01, result1
12db0     80 39 B1 FD | 	call	#__system___lockmem
12db4     B6 01 00 FF 
12db8     1F 14 06 F6 | 	mov	arg02, ##@LR__5899
12dbc     00 12 06 F6 | 	mov	arg01, #0
12dc0     00 16 06 F6 | 	mov	arg03, #0
12dc4     60 46 B1 FD | 	call	#__system___basic_print_string
12dc8     00 12 06 F6 | 	mov	arg01, #0
12dcc     8C 96 B1 FD | 	call	#__system___getiolock_0603
12dd0     FD 00 68 FC | 	wrlong	#0, result1
12dd4     27 12 06 F6 | 	mov	arg01, #39
12dd8     00 14 06 F6 | 	mov	arg02, #0
12ddc     68 FF B0 FD | 	call	#_printerror
12de0     B4 00 90 FD | 	jmp	#LR__1501
12de4                 | LR__1500
12de4     6C A7 BF FD | 	call	#_pop
12de8     FD 16 02 F6 | 	mov	arg03, result1
12dec     FE 14 02 F6 | 	mov	arg02, result2
12df0     FF 12 02 F6 | 	mov	arg01, result3
12df4     0C 4E 05 F1 | 	add	fp, #12
12df8     A7 16 62 FC | 	wrlong	arg03, fp
12dfc     04 4E 05 F1 | 	add	fp, #4
12e00     A7 14 62 FC | 	wrlong	arg02, fp
12e04     04 4E 05 F1 | 	add	fp, #4
12e08     A7 12 62 FC | 	wrlong	arg01, fp
12e0c     14 4E 85 F1 | 	sub	fp, #20
12e10     40 A7 BF FD | 	call	#_pop
12e14     FF 16 02 F6 | 	mov	arg03, result3
12e18     A7 FA 61 FC | 	wrlong	result1, fp
12e1c     04 4E 05 F1 | 	add	fp, #4
12e20     A7 FC 61 FC | 	wrlong	result2, fp
12e24     04 4E 05 F1 | 	add	fp, #4
12e28     A7 16 62 FC | 	wrlong	arg03, fp
12e2c     08 4E 85 F1 | 	sub	fp, #8
12e30     A7 12 02 F6 | 	mov	arg01, fp
12e34     00 A9 BF FD | 	call	#_converttoint
12e38     1C 4E 05 F1 | 	add	fp, #28
12e3c     A7 FA 61 FC | 	wrlong	result1, fp
12e40     10 4E 85 F1 | 	sub	fp, #16
12e44     A7 12 02 F6 | 	mov	arg01, fp
12e48     0C 4E 85 F1 | 	sub	fp, #12
12e4c     E8 A8 BF FD | 	call	#_converttoint
12e50     FD 16 02 F6 | 	mov	arg03, result1
12e54     20 4E 05 F1 | 	add	fp, #32
12e58     A7 16 62 FC | 	wrlong	arg03, fp
12e5c     F2 12 02 FB | 	rdlong	arg01, objptr
12e60     04 4E 85 F1 | 	sub	fp, #4
12e64     A7 FE 01 FB | 	rdlong	result3, fp
12e68     FF 12 02 F1 | 	add	arg01, result3
12e6c     1C 4E 85 F1 | 	sub	fp, #28
12e70     0A 16 66 F0 | 	shl	arg03, #10
12e74     0B 13 02 F1 | 	add	arg01, arg03
12e78     44 01 B1 FD | 	call	#_pspeek
12e7c     FD FA E1 F8 | 	getbyte	result1, result1, #0
12e80     A7 FA 61 FC | 	wrlong	result1, fp
12e84     08 4E 05 F1 | 	add	fp, #8
12e88     A7 3A 68 FC | 	wrlong	#29, fp
12e8c     08 4E 85 F1 | 	sub	fp, #8
12e90     A7 12 02 F6 | 	mov	arg01, fp
12e94     54 A7 BF FD | 	call	#_push
12e98                 | LR__1501
12e98     A7 F0 03 F6 | 	mov	ptra, fp
12e9c     B2 00 A0 FD | 	call	#popregs_
12ea0                 | _do_getpixel_ret
12ea0     2D 00 64 FD | 	ret
12ea4                 | 
12ea4                 | ' 
12ea4                 | ' '-------------------- gettime
12ea4                 | ' 
12ea4                 | ' sub do_gettime
12ea4                 | _do_gettime
12ea4     02 4A 05 F6 | 	mov	COUNT_, #2
12ea8     A8 00 A0 FD | 	call	#pushregs_
12eac     14 F0 07 F1 | 	add	ptra, #20
12eb0                 | ' 
12eb0                 | ' const asm 
12eb0     1A 26 72 FD | 	getct	local01 wc
12eb4     1A 28 62 FD | 	getct	local02
12eb8                 | ' return hi1, lo1
12eb8     14 FD 01 F6 | 	mov	result2, local02
12ebc     A7 26 62 FC | 	wrlong	local01, fp
12ec0     04 4E 05 F1 | 	add	fp, #4
12ec4     A7 FC 61 FC | 	wrlong	result2, fp
12ec8     0C 4E 05 F1 | 	add	fp, #12
12ecc     A7 3A 68 FC | 	wrlong	#29, fp
12ed0     0C 4E 85 F1 | 	sub	fp, #12
12ed4     A7 12 02 FB | 	rdlong	arg01, fp
12ed8     04 4E 05 F1 | 	add	fp, #4
12edc     A7 12 62 FC | 	wrlong	arg01, fp
12ee0     08 4E 85 F1 | 	sub	fp, #8
12ee4     A7 12 02 FB | 	rdlong	arg01, fp
12ee8     0C 4E 05 F1 | 	add	fp, #12
12eec     A7 12 62 FC | 	wrlong	arg01, fp
12ef0     04 4E 85 F1 | 	sub	fp, #4
12ef4     A7 12 02 F6 | 	mov	arg01, fp
12ef8     08 4E 85 F1 | 	sub	fp, #8
12efc     EC A6 BF FD | 	call	#_push
12f00     A7 F0 03 F6 | 	mov	ptra, fp
12f04     B2 00 A0 FD | 	call	#popregs_
12f08                 | _do_gettime_ret
12f08     2D 00 64 FD | 	ret
12f0c                 | 
12f0c                 | ' 
12f0c                 | ' '-------------------- gosub
12f0c                 | ' 
12f0c                 | ' sub do_gosub()
12f0c                 | _do_gosub
12f0c     50 00 00 FF 
12f10     34 E5 05 F1 | 	add	objptr, ##41268
12f14     F2 00 02 FB | 	rdlong	_var01, objptr
12f18     01 00 06 F1 | 	add	_var01, #1
12f1c     F2 00 62 FC | 	wrlong	_var01, objptr
12f20                 | ' gosubtop+=1
12f20                 | ' if compiledline(lineptr_e+1).result_type=token_end then
12f20     06 00 00 FF 
12f24     B4 E4 85 F1 | 	sub	objptr, ##3252
12f28     F2 00 02 FB | 	rdlong	_var01, objptr
12f2c     01 00 06 F1 | 	add	_var01, #1
12f30     00 03 02 F6 | 	mov	_var02, _var01
12f34     01 02 66 F0 | 	shl	_var02, #1
12f38     00 03 02 F1 | 	add	_var02, _var01
12f3c     02 02 66 F0 | 	shl	_var02, #2
12f40     03 00 00 FF 
12f44     04 E4 85 F1 | 	sub	objptr, ##1540
12f48     F2 02 02 F1 | 	add	_var02, objptr
12f4c     08 02 06 F1 | 	add	_var02, #8
12f50     01 03 02 FB | 	rdlong	_var02, _var02
12f54     FE 03 0E F2 | 	cmp	_var02, #510 wz
12f58     47 00 00 FF 
12f5c     7C E4 85 F1 | 	sub	objptr, ##36476
12f60     58 00 90 5D |  if_ne	jmp	#LR__1510
12f64     50 00 00 FF 
12f68     34 E5 05 F1 | 	add	objptr, ##41268
12f6c     F2 02 02 FB | 	rdlong	_var02, objptr
12f70     03 02 66 F0 | 	shl	_var02, #3
12f74     03 00 00 FF 
12f78     88 E5 85 F1 | 	sub	objptr, ##1928
12f7c     F2 02 02 F1 | 	add	_var02, objptr
12f80     03 00 00 FF 
12f84     0C E5 05 F1 | 	add	objptr, ##1804
12f88     F2 00 02 FB | 	rdlong	_var01, objptr
12f8c     01 01 62 FC | 	wrlong	_var01, _var02
12f90     7C E4 05 F1 | 	add	objptr, #124
12f94     F2 02 02 FB | 	rdlong	_var02, objptr
12f98     03 02 66 F0 | 	shl	_var02, #3
12f9c     03 00 00 FF 
12fa0     88 E5 85 F1 | 	sub	objptr, ##1928
12fa4     F2 02 02 F1 | 	add	_var02, objptr
12fa8     04 02 06 F1 | 	add	_var02, #4
12fac     01 01 68 FC | 	wrlong	#0, _var02
12fb0     4C 00 00 FF 
12fb4     AC E5 85 F1 | 	sub	objptr, ##39340
12fb8     64 00 90 FD | 	jmp	#LR__1511
12fbc                 | LR__1510
12fbc     50 00 00 FF 
12fc0     34 E5 05 F1 | 	add	objptr, ##41268
12fc4     F2 02 02 FB | 	rdlong	_var02, objptr
12fc8     03 02 66 F0 | 	shl	_var02, #3
12fcc     03 00 00 FF 
12fd0     88 E5 85 F1 | 	sub	objptr, ##1928
12fd4     F2 02 02 F1 | 	add	_var02, objptr
12fd8     03 00 00 FF 
12fdc     14 E5 05 F1 | 	add	objptr, ##1812
12fe0     F2 00 02 FB | 	rdlong	_var01, objptr
12fe4     01 01 62 FC | 	wrlong	_var01, _var02
12fe8     74 E4 05 F1 | 	add	objptr, #116
12fec     F2 02 02 FB | 	rdlong	_var02, objptr
12ff0     03 02 66 F0 | 	shl	_var02, #3
12ff4     03 00 00 FF 
12ff8     88 E5 85 F1 | 	sub	objptr, ##1928
12ffc     F2 02 02 F1 | 	add	_var02, objptr
13000     02 00 00 FF 
13004     2C E5 85 F1 | 	sub	objptr, ##1324
13008     F2 00 02 FB | 	rdlong	_var01, objptr
1300c     4A 00 00 FF 
13010     80 E4 85 F1 | 	sub	objptr, ##38016
13014     02 00 06 F1 | 	add	_var01, #2
13018     04 02 06 F1 | 	add	_var02, #4
1301c     01 01 62 FC | 	wrlong	_var01, _var02
13020                 | LR__1511
13020                 | _do_gosub_ret
13020     2D 00 64 FD | 	ret
13024                 | 
13024                 | ' 
13024                 | ' '--------------------- goto
13024                 | ' 
13024                 | ' '------- fast goto
13024                 | ' 
13024                 | ' sub do_fast_goto
13024                 | _do_fast_goto
13024     02 4A 05 F6 | 	mov	COUNT_, #2
13028     A8 00 A0 FD | 	call	#pushregs_
1302c                 | _do_fast_goto_enter
1302c     4A 00 00 FF 
13030     80 E4 05 F1 | 	add	objptr, ##38016
13034     F2 12 02 FB | 	rdlong	arg01, objptr
13038     09 27 02 F6 | 	mov	local01, arg01
1303c     01 26 66 F0 | 	shl	local01, #1
13040     09 27 02 F1 | 	add	local01, arg01
13044     02 26 66 F0 | 	shl	local01, #2
13048     03 00 00 FF 
1304c     04 E4 85 F1 | 	sub	objptr, ##1540
13050     F2 26 02 F1 | 	add	local01, objptr
13054     13 29 02 FB | 	rdlong	local02, local01
13058     14 13 02 F6 | 	mov	arg01, local02
1305c     47 00 00 FF 
13060     7C E4 85 F1 | 	sub	objptr, ##36476
13064     B0 FF B0 FD | 	call	#_pslpeek
13068     FD 12 02 F6 | 	mov	arg01, result1
1306c                 | ' 
1306c                 | ' testptr=compiledline(lineptr_e).result.uresult
1306c                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
1306c                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
1306c     4A 00 00 FF 
13070     80 E4 05 F1 | 	add	objptr, ##38016
13074     F2 FA 01 FB | 	rdlong	result1, objptr
13078     FD 26 02 F6 | 	mov	local01, result1
1307c     01 26 66 F0 | 	shl	local01, #1
13080     FD 26 02 F1 | 	add	local01, result1
13084     02 26 66 F0 | 	shl	local01, #2
13088     03 00 00 FF 
1308c     04 E4 85 F1 | 	sub	objptr, ##1540
13090     F2 26 02 F1 | 	add	local01, objptr
13094     04 26 06 F1 | 	add	local01, #4
13098     13 27 02 FB | 	rdlong	local01, local01
1309c     13 13 0A F2 | 	cmp	arg01, local01 wz
130a0     47 00 00 FF 
130a4     7C E4 85 F1 | 	sub	objptr, ##36476
130a8     58 00 90 5D |  if_ne	jmp	#LR__1520
130ac     50 00 00 FF 
130b0     B8 E4 05 F1 | 	add	objptr, ##41144
130b4     F2 28 62 FC | 	wrlong	local02, objptr
130b8     06 00 00 FF 
130bc     3C E4 85 F1 | 	sub	objptr, ##3132
130c0     F2 28 02 FB | 	rdlong	local02, objptr
130c4     01 28 86 F1 | 	sub	local02, #1
130c8     04 E4 05 F1 | 	add	objptr, #4
130cc     F2 28 62 FC | 	wrlong	local02, objptr
130d0                 | '   runptr=testptr
130d0                 | '   lineptr_e=lineptr-1
130d0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
130d0     06 00 00 FF 
130d4     84 E4 05 F1 | 	add	objptr, ##3204
130d8     F2 28 02 FB | 	rdlong	local02, objptr
130dc     50 00 00 FF 
130e0     04 E5 85 F1 | 	sub	objptr, ##41220
130e4     FF FF 3F FF 
130e8     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
130ec     50 00 00 AF 
130f0     04 E5 05 A1 |  if_e	add	objptr, ##41220
130f4     F2 00 68 AC |  if_e	wrlong	#0, objptr
130f8     50 00 00 AF 
130fc     04 E5 85 A1 |  if_e	sub	objptr, ##41220
13100     04 00 90 FD | 	jmp	#LR__1521
13104                 | LR__1520
13104     0C 00 B0 FD | 	call	#_do_find_goto
13108                 | LR__1521
13108     A7 F0 03 F6 | 	mov	ptra, fp
1310c     B2 00 A0 FD | 	call	#popregs_
13110                 | _do_fast_goto_ret
13110     2D 00 64 FD | 	ret
13114                 | 
13114                 | ' 
13114                 | ' '------- find goto  
13114                 | ' 
13114                 | ' sub do_find_goto
13114                 | _do_find_goto
13114     03 4A 05 F6 | 	mov	COUNT_, #3
13118     A8 00 A0 FD | 	call	#pushregs_
1311c     24 F0 07 F1 | 	add	ptra, #36
13120                 | _do_find_goto_enter
13120     4A 00 00 FF 
13124     80 E4 05 F1 | 	add	objptr, ##38016
13128     F2 26 02 FB | 	rdlong	local01, objptr
1312c     13 29 02 F6 | 	mov	local02, local01
13130     01 28 66 F0 | 	shl	local02, #1
13134     13 29 02 F1 | 	add	local02, local01
13138     02 28 66 F0 | 	shl	local02, #2
1313c     03 00 00 FF 
13140     04 E4 85 F1 | 	sub	objptr, ##1540
13144     F2 28 02 F1 | 	add	local02, objptr
13148     04 28 06 F1 | 	add	local02, #4
1314c     14 29 02 FB | 	rdlong	local02, local02
13150     A7 28 62 FC | 	wrlong	local02, fp
13154     03 00 00 FF 
13158     0C E4 05 F1 | 	add	objptr, ##1548
1315c     F2 2A 02 FB | 	rdlong	local03, objptr
13160     4A 00 00 FF 
13164     88 E4 85 F1 | 	sub	objptr, ##38024
13168     04 4E 05 F1 | 	add	fp, #4
1316c     A7 2A 62 FC | 	wrlong	local03, fp
13170     04 4E 85 F1 | 	sub	fp, #4
13174                 | ' 
13174                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
13174                 | ' gotoptr=programstart
13174                 | ' do
13174                 | LR__1530
13174     0C 4E 05 F1 | 	add	fp, #12
13178     A7 12 02 F6 | 	mov	arg01, fp
1317c     08 4E 85 F1 | 	sub	fp, #8
13180     A7 14 02 FB | 	rdlong	arg02, fp
13184     04 4E 85 F1 | 	sub	fp, #4
13188     18 16 06 F6 | 	mov	arg03, #24
1318c     0B 00 00 FF 
13190     CC E4 05 F1 | 	add	objptr, ##5836
13194     14 29 B1 FD | 	call	#_psram_spin2_read1
13198     0B 00 00 FF 
1319c     CC E4 85 F1 | 	sub	objptr, ##5836
131a0                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
131a0                 | '   if gotoheader(0)<>$FFFFFFFF then
131a0     0C 4E 05 F1 | 	add	fp, #12
131a4     A7 2A 02 FB | 	rdlong	local03, fp
131a8     0C 4E 85 F1 | 	sub	fp, #12
131ac     FF FF 7F FF 
131b0     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
131b4     24 00 90 AD |  if_e	jmp	#LR__1531
131b8     04 4E 05 F1 | 	add	fp, #4
131bc     A7 2A 02 FB | 	rdlong	local03, fp
131c0     04 4E 05 F1 | 	add	fp, #4
131c4     A7 2A 62 FC | 	wrlong	local03, fp
131c8     18 4E 05 F1 | 	add	fp, #24
131cc     A7 2A 02 FB | 	rdlong	local03, fp
131d0     1C 4E 85 F1 | 	sub	fp, #28
131d4     A7 2A 62 FC | 	wrlong	local03, fp
131d8     04 4E 85 F1 | 	sub	fp, #4
131dc                 | LR__1531
131dc     20 4E 05 F1 | 	add	fp, #32
131e0     A7 2A 02 FB | 	rdlong	local03, fp
131e4     20 4E 85 F1 | 	sub	fp, #32
131e8     FF FF 3F FF 
131ec     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
131f0     0C 4E 05 51 |  if_ne	add	fp, #12
131f4     A7 26 02 5B |  if_ne	rdlong	local01, fp
131f8     0C 4E 85 51 |  if_ne	sub	fp, #12
131fc     FF FF 7F 5F 
13200     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
13204     18 00 90 AD |  if_e	jmp	#LR__1532
13208     0C 4E 05 F1 | 	add	fp, #12
1320c     A7 2A 02 FB | 	rdlong	local03, fp
13210     0C 4E 85 F1 | 	sub	fp, #12
13214     A7 28 02 FB | 	rdlong	local02, fp
13218     14 2B 0A F2 | 	cmp	local03, local02 wz
1321c     54 FF 9F 5D |  if_ne	jmp	#LR__1530
13220                 | LR__1532
13220                 | ' 
13220                 | ' if gotoheader(0)=gotoline then
13220     0C 4E 05 F1 | 	add	fp, #12
13224     A7 2A 02 FB | 	rdlong	local03, fp
13228     0C 4E 85 F1 | 	sub	fp, #12
1322c     A7 26 02 FB | 	rdlong	local01, fp
13230     13 2B 0A F2 | 	cmp	local03, local01 wz
13234     D8 00 90 5D |  if_ne	jmp	#LR__1533
13238     4A 00 00 FF 
1323c     80 E4 05 F1 | 	add	objptr, ##38016
13240     F2 26 02 FB | 	rdlong	local01, objptr
13244     13 29 02 F6 | 	mov	local02, local01
13248     01 28 66 F0 | 	shl	local02, #1
1324c     13 29 02 F1 | 	add	local02, local01
13250     02 28 66 F0 | 	shl	local02, #2
13254     03 00 00 FF 
13258     04 E4 85 F1 | 	sub	objptr, ##1540
1325c     F2 28 02 F1 | 	add	local02, objptr
13260     08 4E 05 F1 | 	add	fp, #8
13264     A7 2A 02 FB | 	rdlong	local03, fp
13268     14 2B 62 FC | 	wrlong	local03, local02
1326c     03 00 00 FF 
13270     04 E4 05 F1 | 	add	objptr, ##1540
13274     F2 26 02 FB | 	rdlong	local01, objptr
13278     13 29 02 F6 | 	mov	local02, local01
1327c     01 28 66 F0 | 	shl	local02, #1
13280     13 29 02 F1 | 	add	local02, local01
13284     02 28 66 F0 | 	shl	local02, #2
13288     03 00 00 FF 
1328c     04 E4 85 F1 | 	sub	objptr, ##1540
13290     F2 28 02 F1 | 	add	local02, objptr
13294     08 28 06 F1 | 	add	local02, #8
13298     14 9D 68 FC | 	wrlong	#78, local02
1329c     03 00 00 FF 
132a0     04 E4 05 F1 | 	add	objptr, ##1540
132a4     F2 28 02 FB | 	rdlong	local02, objptr
132a8     14 13 02 F6 | 	mov	arg01, local02
132ac     01 12 66 F0 | 	shl	arg01, #1
132b0     14 13 02 F1 | 	add	arg01, local02
132b4     02 12 66 F0 | 	shl	arg01, #2
132b8     03 00 00 FF 
132bc     04 E4 85 F1 | 	sub	objptr, ##1540
132c0     F2 12 02 F1 | 	add	arg01, objptr
132c4     09 00 00 FF 
132c8     44 E4 05 F1 | 	add	objptr, ##4676
132cc     F2 14 02 FB | 	rdlong	arg02, objptr
132d0     02 2A 06 F6 | 	mov	local03, #2
132d4     14 2B 02 F1 | 	add	local03, local02
132d8     0B 00 00 FF 
132dc     5C E4 85 F1 | 	sub	objptr, ##5724
132e0     F2 16 02 FB | 	rdlong	arg03, objptr
132e4     0B 2B 02 FD | 	qmul	local03, arg03
132e8     08 4E 85 F1 | 	sub	fp, #8
132ec     39 00 00 FF 
132f0     98 E5 85 F1 | 	sub	objptr, ##29592
132f4     18 2A 62 FD | 	getqx	local03
132f8     15 15 02 F1 | 	add	arg02, local03
132fc     48 28 B1 FD | 	call	#_psram_spin2_write
13300     0B 00 00 FF 
13304     CC E4 85 F1 | 	sub	objptr, ##5836
13308     18 FD BF FD | 	call	#_do_fast_goto
1330c     0C 00 90 FD | 	jmp	#LR__1534
13310                 | LR__1533
13310     26 12 06 F6 | 	mov	arg01, #38
13314     00 14 06 F6 | 	mov	arg02, #0
13318     2C FA B0 FD | 	call	#_printerror
1331c                 | LR__1534
1331c     A7 F0 03 F6 | 	mov	ptra, fp
13320     B2 00 A0 FD | 	call	#popregs_
13324                 | _do_find_goto_ret
13324     2D 00 64 FD | 	ret
13328                 | 
13328                 | ' 
13328                 | ' '------- slow goto  
13328                 | ' 
13328                 | ' sub do_slow_goto
13328                 | _do_slow_goto
13328     02 4A 05 F6 | 	mov	COUNT_, #2
1332c     A8 00 A0 FD | 	call	#pushregs_
13330     30 F0 07 F1 | 	add	ptra, #48
13334     1C A2 BF FD | 	call	#_pop
13338     FF 26 02 F6 | 	mov	local01, result3
1333c     24 4E 05 F1 | 	add	fp, #36
13340     A7 FA 61 FC | 	wrlong	result1, fp
13344     04 4E 05 F1 | 	add	fp, #4
13348     A7 FC 61 FC | 	wrlong	result2, fp
1334c     04 4E 05 F1 | 	add	fp, #4
13350     A7 26 62 FC | 	wrlong	local01, fp
13354     08 4E 85 F1 | 	sub	fp, #8
13358     A7 12 02 F6 | 	mov	arg01, fp
1335c     24 4E 85 F1 | 	sub	fp, #36
13360     D4 A3 BF FD | 	call	#_converttoint
13364     A7 FA 61 FC | 	wrlong	result1, fp
13368     4A 00 00 FF 
1336c     88 E4 05 F1 | 	add	objptr, ##38024
13370     F2 28 02 FB | 	rdlong	local02, objptr
13374     4A 00 00 FF 
13378     88 E4 85 F1 | 	sub	objptr, ##38024
1337c     04 4E 05 F1 | 	add	fp, #4
13380     A7 28 62 FC | 	wrlong	local02, fp
13384     04 4E 85 F1 | 	sub	fp, #4
13388                 | ' 
13388                 | ' t1=pop() : gotoline=converttoint(t1)
13388                 | ' gotoptr=programstart
13388                 | ' do
13388                 | LR__1540
13388     0C 4E 05 F1 | 	add	fp, #12
1338c     A7 12 02 F6 | 	mov	arg01, fp
13390     08 4E 85 F1 | 	sub	fp, #8
13394     A7 14 02 FB | 	rdlong	arg02, fp
13398     04 4E 85 F1 | 	sub	fp, #4
1339c     18 16 06 F6 | 	mov	arg03, #24
133a0     0B 00 00 FF 
133a4     CC E4 05 F1 | 	add	objptr, ##5836
133a8     00 27 B1 FD | 	call	#_psram_spin2_read1
133ac     0B 00 00 FF 
133b0     CC E4 85 F1 | 	sub	objptr, ##5836
133b4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
133b4                 | '   if gotoheader(0)<>$FFFFFFFF then
133b4     0C 4E 05 F1 | 	add	fp, #12
133b8     A7 28 02 FB | 	rdlong	local02, fp
133bc     0C 4E 85 F1 | 	sub	fp, #12
133c0     FF FF 7F FF 
133c4     FF 29 0E F2 | 	cmp	local02, ##-1 wz
133c8     24 00 90 AD |  if_e	jmp	#LR__1541
133cc     04 4E 05 F1 | 	add	fp, #4
133d0     A7 28 02 FB | 	rdlong	local02, fp
133d4     04 4E 05 F1 | 	add	fp, #4
133d8     A7 28 62 FC | 	wrlong	local02, fp
133dc     18 4E 05 F1 | 	add	fp, #24
133e0     A7 28 02 FB | 	rdlong	local02, fp
133e4     1C 4E 85 F1 | 	sub	fp, #28
133e8     A7 28 62 FC | 	wrlong	local02, fp
133ec     04 4E 85 F1 | 	sub	fp, #4
133f0                 | LR__1541
133f0     20 4E 05 F1 | 	add	fp, #32
133f4     A7 28 02 FB | 	rdlong	local02, fp
133f8     20 4E 85 F1 | 	sub	fp, #32
133fc     FF FF 3F FF 
13400     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13404     0C 4E 05 51 |  if_ne	add	fp, #12
13408     A7 26 02 5B |  if_ne	rdlong	local01, fp
1340c     0C 4E 85 51 |  if_ne	sub	fp, #12
13410     FF FF 7F 5F 
13414     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
13418     18 00 90 AD |  if_e	jmp	#LR__1542
1341c     0C 4E 05 F1 | 	add	fp, #12
13420     A7 28 02 FB | 	rdlong	local02, fp
13424     0C 4E 85 F1 | 	sub	fp, #12
13428     A7 16 02 FB | 	rdlong	arg03, fp
1342c     0B 29 0A F2 | 	cmp	local02, arg03 wz
13430     54 FF 9F 5D |  if_ne	jmp	#LR__1540
13434                 | LR__1542
13434                 | ' if gotoheader(0)=gotoline then  
13434     0C 4E 05 F1 | 	add	fp, #12
13438     A7 28 02 FB | 	rdlong	local02, fp
1343c     0C 4E 85 F1 | 	sub	fp, #12
13440     A7 26 02 FB | 	rdlong	local01, fp
13444     13 29 0A F2 | 	cmp	local02, local01 wz
13448     60 00 90 5D |  if_ne	jmp	#LR__1543
1344c     08 4E 05 F1 | 	add	fp, #8
13450     A7 28 02 FB | 	rdlong	local02, fp
13454     08 4E 85 F1 | 	sub	fp, #8
13458     50 00 00 FF 
1345c     B8 E4 05 F1 | 	add	objptr, ##41144
13460     F2 28 62 FC | 	wrlong	local02, objptr
13464     06 00 00 FF 
13468     3C E4 85 F1 | 	sub	objptr, ##3132
1346c     F2 28 02 FB | 	rdlong	local02, objptr
13470     01 28 86 F1 | 	sub	local02, #1
13474     04 E4 05 F1 | 	add	objptr, #4
13478     F2 28 62 FC | 	wrlong	local02, objptr
1347c                 | '    runptr=oldgotoptr
1347c                 | '    lineptr_e=lineptr-1
1347c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
1347c     06 00 00 FF 
13480     84 E4 05 F1 | 	add	objptr, ##3204
13484     F2 28 02 FB | 	rdlong	local02, objptr
13488     50 00 00 FF 
1348c     04 E5 85 F1 | 	sub	objptr, ##41220
13490     FF FF 3F FF 
13494     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13498     50 00 00 AF 
1349c     04 E5 05 A1 |  if_e	add	objptr, ##41220
134a0     F2 00 68 AC |  if_e	wrlong	#0, objptr
134a4     50 00 00 AF 
134a8     04 E5 85 A1 |  if_e	sub	objptr, ##41220
134ac                 | LR__1543
134ac     A7 F0 03 F6 | 	mov	ptra, fp
134b0     B2 00 A0 FD | 	call	#popregs_
134b4                 | _do_slow_goto_ret
134b4     2D 00 64 FD | 	ret
134b8                 | 
134b8                 | ' 
134b8                 | ' ' ----------------  hex$
134b8                 | ' 
134b8                 | ' sub do_hex
134b8                 | _do_hex
134b8     01 4A 05 F6 | 	mov	COUNT_, #1
134bc     A8 00 A0 FD | 	call	#pushregs_
134c0     18 F0 07 F1 | 	add	ptra, #24
134c4     4A 00 00 FF 
134c8     80 E4 05 F1 | 	add	objptr, ##38016
134cc     F2 26 02 FB | 	rdlong	local01, objptr
134d0     13 17 02 F6 | 	mov	arg03, local01
134d4     01 16 66 F0 | 	shl	arg03, #1
134d8     13 17 02 F1 | 	add	arg03, local01
134dc     02 16 66 F0 | 	shl	arg03, #2
134e0     03 00 00 FF 
134e4     04 E4 85 F1 | 	sub	objptr, ##1540
134e8     F2 16 02 F1 | 	add	arg03, objptr
134ec     0B 17 02 FB | 	rdlong	arg03, arg03
134f0     0C 4E 05 F1 | 	add	fp, #12
134f4     A7 16 62 FC | 	wrlong	arg03, fp
134f8                 | ' 
134f8                 | ' numpar=compiledline(lineptr_e).result.uresult
134f8                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
134f8     0C 4E 85 F1 | 	sub	fp, #12
134fc     03 16 16 F2 | 	cmp	arg03, #3 wc
13500     47 00 00 FF 
13504     7C E4 85 F1 | 	sub	objptr, ##36476
13508     0C 4E 05 C1 |  if_b	add	fp, #12
1350c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
13510     0C 4E 85 C1 |  if_b	sub	fp, #12
13514     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
13518     00 12 06 F6 | 	mov	arg01, #0
1351c     3C 8F B1 FD | 	call	#__system___getiolock_0603
13520     FD 12 02 F6 | 	mov	arg01, result1
13524     0C 32 B1 FD | 	call	#__system___lockmem
13528     B6 01 00 FF 
1352c     2A 14 06 F6 | 	mov	arg02, ##@LR__5900
13530     00 12 06 F6 | 	mov	arg01, #0
13534     00 16 06 F6 | 	mov	arg03, #0
13538     EC 3E B1 FD | 	call	#__system___basic_print_string
1353c     00 12 06 F6 | 	mov	arg01, #0
13540     18 8F B1 FD | 	call	#__system___getiolock_0603
13544     FD 00 68 FC | 	wrlong	#0, result1
13548     27 12 06 F6 | 	mov	arg01, #39
1354c     00 14 06 F6 | 	mov	arg02, #0
13550     F4 F7 B0 FD | 	call	#_printerror
13554     B8 00 90 FD | 	jmp	#LR__1553
13558                 | LR__1550
13558                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
13558     0C 4E 05 F1 | 	add	fp, #12
1355c     A7 26 02 FB | 	rdlong	local01, fp
13560     0C 4E 85 F1 | 	sub	fp, #12
13564     02 26 0E F2 | 	cmp	local01, #2 wz
13568     38 00 90 5D |  if_ne	jmp	#LR__1551
1356c     E4 9F BF FD | 	call	#_pop
13570     FF 26 02 F6 | 	mov	local01, result3
13574     A7 FA 61 FC | 	wrlong	result1, fp
13578     04 4E 05 F1 | 	add	fp, #4
1357c     A7 FC 61 FC | 	wrlong	result2, fp
13580     04 4E 05 F1 | 	add	fp, #4
13584     A7 26 62 FC | 	wrlong	local01, fp
13588     08 4E 85 F1 | 	sub	fp, #8
1358c     A7 12 02 F6 | 	mov	arg01, fp
13590     A4 A1 BF FD | 	call	#_converttoint
13594     14 4E 05 F1 | 	add	fp, #20
13598     A7 FA 61 FC | 	wrlong	result1, fp
1359c     14 4E 85 F1 | 	sub	fp, #20
135a0     0C 00 90 FD | 	jmp	#LR__1552
135a4                 | LR__1551
135a4     14 4E 05 F1 | 	add	fp, #20
135a8     A7 10 68 FC | 	wrlong	#8, fp
135ac     14 4E 85 F1 | 	sub	fp, #20
135b0                 | LR__1552
135b0     A0 9F BF FD | 	call	#_pop
135b4     FF 26 02 F6 | 	mov	local01, result3
135b8     A7 FA 61 FC | 	wrlong	result1, fp
135bc     04 4E 05 F1 | 	add	fp, #4
135c0     A7 FC 61 FC | 	wrlong	result2, fp
135c4     04 4E 05 F1 | 	add	fp, #4
135c8     A7 26 62 FC | 	wrlong	local01, fp
135cc     08 4E 85 F1 | 	sub	fp, #8
135d0     A7 12 02 F6 | 	mov	arg01, fp
135d4     60 A1 BF FD | 	call	#_converttoint
135d8     10 4E 05 F1 | 	add	fp, #16
135dc     A7 FA 61 FC | 	wrlong	result1, fp
135e0     FD 12 02 F6 | 	mov	arg01, result1
135e4     04 4E 05 F1 | 	add	fp, #4
135e8     A7 14 02 FB | 	rdlong	arg02, fp
135ec     14 4E 85 F1 | 	sub	fp, #20
135f0     10 16 06 F6 | 	mov	arg03, #16
135f4     0C 54 B1 FD | 	call	#__system__Number_S
135f8     A7 FA 61 FC | 	wrlong	result1, fp
135fc     08 4E 05 F1 | 	add	fp, #8
13600     A7 3E 68 FC | 	wrlong	#31, fp
13604     08 4E 85 F1 | 	sub	fp, #8
13608     A7 12 02 F6 | 	mov	arg01, fp
1360c     DC 9F BF FD | 	call	#_push
13610                 | LR__1553
13610     A7 F0 03 F6 | 	mov	ptra, fp
13614     B2 00 A0 FD | 	call	#popregs_
13618                 | _do_hex_ret
13618     2D 00 64 FD | 	ret
1361c                 | 
1361c                 | ' 
1361c                 | ' ' ----------------  if
1361c                 | ' 
1361c                 | ' sub do_if
1361c                 | _do_if
1361c     05 4A 05 F6 | 	mov	COUNT_, #5
13620     A8 00 A0 FD | 	call	#pushregs_
13624     2C 9F BF FD | 	call	#_pop
13628     FD 26 0A F6 | 	mov	local01, result1 wz
1362c     FE 28 02 F6 | 	mov	local02, result2
13630     FF 2A 02 F6 | 	mov	local03, result3
13634                 | ' t1=pop()
13634                 | ' ' if uresult=0, jump over else
13634                 | ' if t1.result.uresult = 0 then 
13634     BC 00 90 5D |  if_ne	jmp	#LR__1562
13638                 | '   for i=lineptr_e to lineptr-1
13638     4A 00 00 FF 
1363c     80 E4 05 F1 | 	add	objptr, ##38016
13640     F2 2C 02 FB | 	rdlong	local04, objptr
13644     04 E4 85 F1 | 	sub	objptr, #4
13648     F2 2E 02 FB | 	rdlong	local05, objptr
1364c     4A 00 00 FF 
13650     7C E4 85 F1 | 	sub	objptr, ##38012
13654                 | LR__1560
13654     17 2D 52 F2 | 	cmps	local04, local05 wc
13658     78 00 90 3D |  if_ae	jmp	#LR__1561
1365c     16 FF 01 F6 | 	mov	result3, local04
13660     01 FE 65 F0 | 	shl	result3, #1
13664     16 FF 01 F1 | 	add	result3, local04
13668     02 FE 65 F0 | 	shl	result3, #2
1366c     47 00 00 FF 
13670     7C E4 05 F1 | 	add	objptr, ##36476
13674     F2 FE 01 F1 | 	add	result3, objptr
13678     FF 26 02 FB | 	rdlong	local01, result3
1367c     04 FE 05 F1 | 	add	result3, #4
13680     FF FC 01 FB | 	rdlong	result2, result3
13684     16 FF 01 F6 | 	mov	result3, local04
13688     01 FE 65 F0 | 	shl	result3, #1
1368c     16 FF 01 F1 | 	add	result3, local04
13690     02 FE 65 F0 | 	shl	result3, #2
13694     F2 FE 01 F1 | 	add	result3, objptr
13698     08 FE 05 F1 | 	add	result3, #8
1369c     FF FE 01 FB | 	rdlong	result3, result3
136a0     FE 28 02 F6 | 	mov	local02, result2
136a4     FF 2A 02 F6 | 	mov	local03, result3
136a8                 | '     t1=compiledline(i)
136a8                 | '     if t1.result_type=token_else then lineptr_e=i : return
136a8     5A 2A 0E F2 | 	cmp	local03, #90 wz
136ac     47 00 00 FF 
136b0     7C E4 85 F1 | 	sub	objptr, ##36476
136b4     4A 00 00 AF 
136b8     80 E4 05 A1 |  if_e	add	objptr, ##38016
136bc     F2 2C 62 AC |  if_e	wrlong	local04, objptr
136c0     4A 00 00 AF 
136c4     80 E4 85 A1 |  if_e	sub	objptr, ##38016
136c8     28 00 90 AD |  if_e	jmp	#LR__1563
136cc     01 2C 06 F1 | 	add	local04, #1
136d0     80 FF 9F FD | 	jmp	#LR__1560
136d4                 | LR__1561
136d4     4A 00 00 FF 
136d8     7C E4 05 F1 | 	add	objptr, ##38012
136dc     F2 2E 02 FB | 	rdlong	local05, objptr
136e0     01 2E 86 F1 | 	sub	local05, #1
136e4     04 E4 05 F1 | 	add	objptr, #4
136e8     F2 2E 62 FC | 	wrlong	local05, objptr
136ec     4A 00 00 FF 
136f0     80 E4 85 F1 | 	sub	objptr, ##38016
136f4                 | LR__1562
136f4                 | LR__1563
136f4     A7 F0 03 F6 | 	mov	ptra, fp
136f8     B2 00 A0 FD | 	call	#popregs_
136fc                 | _do_if_ret
136fc     2D 00 64 FD | 	ret
13700                 | 
13700                 | ' 
13700                 | ' ' ----------------  inkey$
13700                 | ' 
13700                 | ' sub do_inkey
13700                 | _do_inkey
13700     02 4A 05 F6 | 	mov	COUNT_, #2
13704     A8 00 A0 FD | 	call	#pushregs_
13708     0C F0 07 F1 | 	add	ptra, #12
1370c     C8 27 B1 FD | 	call	#_usbnew_spin2_get_key
13710     45 00 00 FF 
13714     74 E4 05 F1 | 	add	objptr, ##35444
13718     F2 FA 61 FC | 	wrlong	result1, objptr
1371c                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
1371c     45 00 00 FF 
13720     74 E4 85 F1 | 	sub	objptr, ##35444
13724     00 FA 0D F2 | 	cmp	result1, #0 wz
13728     94 00 90 AD |  if_e	jmp	#LR__1571
1372c     45 00 00 FF 
13730     74 E4 05 F1 | 	add	objptr, ##35444
13734     F2 1C 02 FB | 	rdlong	arg06, objptr
13738     45 00 00 FF 
1373c     74 E4 85 F1 | 	sub	objptr, ##35444
13740     00 00 40 FF 
13744     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13748     45 00 00 CF 
1374c     74 E4 05 C1 |  if_b	add	objptr, ##35444
13750     F2 26 02 CB |  if_b	rdlong	local01, objptr
13754     45 00 00 CF 
13758     74 E4 85 C1 |  if_b	sub	objptr, ##35444
1375c     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13760     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13764     58 00 90 3D |  if_ae	jmp	#LR__1571
13768                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
13768     50 00 00 FF 
1376c     3C E5 05 F1 | 	add	objptr, ##41276
13770     F2 1C 02 FB | 	rdlong	arg06, objptr
13774     50 00 00 FF 
13778     3C E5 85 F1 | 	sub	objptr, ##41276
1377c     01 1C 0E F2 | 	cmp	arg06, #1 wz
13780     3C 00 90 5D |  if_ne	jmp	#LR__1570
13784     52 00 00 FF 
13788     A4 E4 05 F1 | 	add	objptr, ##42148
1378c     F2 14 02 FB | 	rdlong	arg02, objptr
13790     04 E4 85 F1 | 	sub	objptr, #4
13794     F2 1A 02 FB | 	rdlong	arg05, objptr
13798     07 12 06 F6 | 	mov	arg01, #7
1379c     56 00 00 FF 
137a0     44 16 06 F6 | 	mov	arg03, ##44100
137a4     0C 18 C6 F9 | 	decod	arg04, #12
137a8     01 1C 66 F6 | 	neg	arg06, #1
137ac     46 00 00 FF 
137b0     D4 E5 85 F1 | 	sub	objptr, ##36308
137b4     0C 2B B1 FD | 	call	#_audio096_spin2_play
137b8     0B 00 00 FF 
137bc     CC E4 85 F1 | 	sub	objptr, ##5836
137c0                 | LR__1570
137c0                 | LR__1571
137c0                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
137c0     45 00 00 FF 
137c4     74 E4 05 F1 | 	add	objptr, ##35444
137c8     F2 1C 0A FB | 	rdlong	arg06, objptr wz
137cc     45 00 00 FF 
137d0     74 E4 85 F1 | 	sub	objptr, ##35444
137d4     D4 01 90 AD |  if_e	jmp	#LR__1580
137d8     45 00 00 FF 
137dc     74 E4 05 F1 | 	add	objptr, ##35444
137e0     F2 1C 02 FB | 	rdlong	arg06, objptr
137e4     45 00 00 FF 
137e8     74 E4 85 F1 | 	sub	objptr, ##35444
137ec     00 00 40 FF 
137f0     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
137f4     45 00 00 CF 
137f8     74 E4 05 C1 |  if_b	add	objptr, ##35444
137fc     F2 26 02 CB |  if_b	rdlong	local01, objptr
13800     45 00 00 CF 
13804     74 E4 85 C1 |  if_b	sub	objptr, ##35444
13808     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
1380c     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13810     98 01 90 3D |  if_ae	jmp	#LR__1580
13814                 | '   if leds and 2 = 2 then 
13814     52 00 00 FF 
13818     E0 E4 05 F1 | 	add	objptr, ##42208
1381c     F2 26 0A FB | 	rdlong	local01, objptr wz
13820     52 00 00 FF 
13824     E0 E4 85 F1 | 	sub	objptr, ##42208
13828     58 01 90 AD |  if_e	jmp	#LR__1579
1382c                 | '     if key>96 andalso key<123 then
1382c     45 00 00 FF 
13830     74 E4 05 F1 | 	add	objptr, ##35444
13834     F2 26 02 FB | 	rdlong	local01, objptr
13838     45 00 00 FF 
1383c     74 E4 85 F1 | 	sub	objptr, ##35444
13840     61 26 16 F2 | 	cmp	local01, #97 wc
13844     3C 00 90 CD |  if_b	jmp	#LR__1572
13848     45 00 00 FF 
1384c     74 E4 05 F1 | 	add	objptr, ##35444
13850     F2 26 02 FB | 	rdlong	local01, objptr
13854     45 00 00 FF 
13858     74 E4 85 F1 | 	sub	objptr, ##35444
1385c     7B 26 16 F2 | 	cmp	local01, #123 wc
13860     20 00 90 3D |  if_ae	jmp	#LR__1572
13864     45 00 00 FF 
13868     74 E4 05 F1 | 	add	objptr, ##35444
1386c     F2 26 02 FB | 	rdlong	local01, objptr
13870     20 26 86 F1 | 	sub	local01, #32
13874     F2 26 62 FC | 	wrlong	local01, objptr
13878     45 00 00 FF 
1387c     74 E4 85 F1 | 	sub	objptr, ##35444
13880     00 01 90 FD | 	jmp	#LR__1578
13884                 | LR__1572
13884     45 00 00 FF 
13888     74 E4 05 F1 | 	add	objptr, ##35444
1388c     F2 26 02 FB | 	rdlong	local01, objptr
13890     45 00 00 FF 
13894     74 E4 85 F1 | 	sub	objptr, ##35444
13898     41 26 16 F2 | 	cmp	local01, #65 wc
1389c     3C 00 90 CD |  if_b	jmp	#LR__1573
138a0     45 00 00 FF 
138a4     74 E4 05 F1 | 	add	objptr, ##35444
138a8     F2 26 02 FB | 	rdlong	local01, objptr
138ac     45 00 00 FF 
138b0     74 E4 85 F1 | 	sub	objptr, ##35444
138b4     5B 26 16 F2 | 	cmp	local01, #91 wc
138b8     20 00 90 3D |  if_ae	jmp	#LR__1573
138bc     45 00 00 FF 
138c0     74 E4 05 F1 | 	add	objptr, ##35444
138c4     F2 26 02 FB | 	rdlong	local01, objptr
138c8     20 26 06 F1 | 	add	local01, #32
138cc     F2 26 62 FC | 	wrlong	local01, objptr
138d0     45 00 00 FF 
138d4     74 E4 85 F1 | 	sub	objptr, ##35444
138d8     A8 00 90 FD | 	jmp	#LR__1577
138dc                 | LR__1573
138dc     45 00 00 FF 
138e0     74 E4 05 F1 | 	add	objptr, ##35444
138e4     F2 26 02 FB | 	rdlong	local01, objptr
138e8     45 00 00 FF 
138ec     74 E4 85 F1 | 	sub	objptr, ##35444
138f0     17 26 16 F2 | 	cmp	local01, #23 wc
138f4     3C 00 90 CD |  if_b	jmp	#LR__1574
138f8     45 00 00 FF 
138fc     74 E4 05 F1 | 	add	objptr, ##35444
13900     F2 26 02 FB | 	rdlong	local01, objptr
13904     45 00 00 FF 
13908     74 E4 85 F1 | 	sub	objptr, ##35444
1390c     20 26 16 F2 | 	cmp	local01, #32 wc
13910     20 00 90 3D |  if_ae	jmp	#LR__1574
13914     45 00 00 FF 
13918     74 E4 05 F1 | 	add	objptr, ##35444
1391c     F2 26 02 FB | 	rdlong	local01, objptr
13920     09 26 86 F1 | 	sub	local01, #9
13924     F2 26 62 FC | 	wrlong	local01, objptr
13928     45 00 00 FF 
1392c     74 E4 85 F1 | 	sub	objptr, ##35444
13930     50 00 90 FD | 	jmp	#LR__1576
13934                 | LR__1574
13934     45 00 00 FF 
13938     74 E4 05 F1 | 	add	objptr, ##35444
1393c     F2 28 02 FB | 	rdlong	local02, objptr
13940     45 00 00 FF 
13944     74 E4 85 F1 | 	sub	objptr, ##35444
13948     0E 28 16 F2 | 	cmp	local02, #14 wc
1394c     34 00 90 CD |  if_b	jmp	#LR__1575
13950     45 00 00 FF 
13954     74 E4 05 F1 | 	add	objptr, ##35444
13958     F2 26 02 FB | 	rdlong	local01, objptr
1395c     45 00 00 FF 
13960     74 E4 85 F1 | 	sub	objptr, ##35444
13964     17 26 16 F2 | 	cmp	local01, #23 wc
13968     52 00 00 CF 
1396c     E4 E4 05 C1 |  if_b	add	objptr, ##42212
13970     F2 28 02 CB |  if_b	rdlong	local02, objptr
13974     27 28 06 C1 |  if_b	add	local02, #39
13978     F2 28 62 CC |  if_b	wrlong	local02, objptr
1397c     52 00 00 CF 
13980     E4 E4 85 C1 |  if_b	sub	objptr, ##42212
13984                 | LR__1575
13984                 | LR__1576
13984                 | LR__1577
13984                 | LR__1578
13984                 | LR__1579
13984     45 00 00 FF 
13988     74 E4 05 F1 | 	add	objptr, ##35444
1398c     F2 12 02 FB | 	rdlong	arg01, objptr
13990     45 00 00 FF 
13994     74 E4 85 F1 | 	sub	objptr, ##35444
13998     2C F7 B0 FD | 	call	#_scantochar
1399c     FD 12 02 F6 | 	mov	arg01, result1
139a0     D0 4F B1 FD | 	call	#__system__Chr_S
139a4     A7 FA 61 FC | 	wrlong	result1, fp
139a8     0C 00 90 FD | 	jmp	#LR__1581
139ac                 | LR__1580
139ac     B6 01 00 FF 
139b0     31 28 06 F6 | 	mov	local02, ##@LR__5901
139b4     A7 28 62 FC | 	wrlong	local02, fp
139b8                 | LR__1581
139b8     08 4E 05 F1 | 	add	fp, #8
139bc     A7 3E 68 FC | 	wrlong	#31, fp
139c0     08 4E 85 F1 | 	sub	fp, #8
139c4     A7 12 02 F6 | 	mov	arg01, fp
139c8     20 9C BF FD | 	call	#_push
139cc     A7 F0 03 F6 | 	mov	ptra, fp
139d0     B2 00 A0 FD | 	call	#popregs_
139d4                 | _do_inkey_ret
139d4     2D 00 64 FD | 	ret
139d8                 | 
139d8                 | ' 
139d8                 | ' ' ----------------  ink
139d8                 | ' 
139d8                 | ' sub do_ink
139d8                 | _do_ink
139d8     00 4A 05 F6 | 	mov	COUNT_, #0
139dc     A8 00 A0 FD | 	call	#pushregs_
139e0     0C F0 07 F1 | 	add	ptra, #12
139e4     6C 9B BF FD | 	call	#_pop
139e8     FF 14 02 F6 | 	mov	arg02, result3
139ec     A7 FA 61 FC | 	wrlong	result1, fp
139f0     04 4E 05 F1 | 	add	fp, #4
139f4     A7 FC 61 FC | 	wrlong	result2, fp
139f8     04 4E 05 F1 | 	add	fp, #4
139fc     A7 14 62 FC | 	wrlong	arg02, fp
13a00     08 4E 85 F1 | 	sub	fp, #8
13a04     A7 12 02 F6 | 	mov	arg01, fp
13a08     2C 9D BF FD | 	call	#_converttoint
13a0c     37 00 00 FF 
13a10     3C E4 05 F1 | 	add	objptr, ##28220
13a14     F2 FA 61 FC | 	wrlong	result1, objptr
13a18     04 E4 85 F1 | 	sub	objptr, #4
13a1c     F2 14 02 FB | 	rdlong	arg02, objptr
13a20                 | ' 
13a20                 | ' write_color:=ff
13a20     36 00 00 FF 
13a24     F7 E5 85 F1 | 	sub	objptr, ##28151
13a28     F2 FA 61 FC | 	wrlong	result1, objptr
13a2c                 | ' write_background:=bb
13a2c     04 E4 05 F1 | 	add	objptr, #4
13a30     F2 14 62 FC | 	wrlong	arg02, objptr
13a34     36 00 00 FF 
13a38     F7 E5 05 F1 | 	add	objptr, ##28151
13a3c     F2 12 02 FB | 	rdlong	arg01, objptr
13a40     37 00 00 FF 
13a44     3C E4 85 F1 | 	sub	objptr, ##28220
13a48     D0 FE B0 FD | 	call	#_hg010b_spin2_setcursorcolor
13a4c     A7 F0 03 F6 | 	mov	ptra, fp
13a50     B2 00 A0 FD | 	call	#popregs_
13a54                 | _do_ink_ret
13a54     2D 00 64 FD | 	ret
13a58                 | 
13a58                 | ' 
13a58                 | ' ' ----------------  int
13a58                 | ' 
13a58                 | ' sub do_int
13a58                 | _do_int
13a58     02 4A 05 F6 | 	mov	COUNT_, #2
13a5c     A8 00 A0 FD | 	call	#pushregs_
13a60     10 F0 07 F1 | 	add	ptra, #16
13a64     EC 9A BF FD | 	call	#_pop
13a68     FE 26 02 F6 | 	mov	local01, result2
13a6c     FF 28 02 F6 | 	mov	local02, result3
13a70     A7 FA 61 FC | 	wrlong	result1, fp
13a74     04 4E 05 F1 | 	add	fp, #4
13a78     A7 26 62 FC | 	wrlong	local01, fp
13a7c     04 4E 05 F1 | 	add	fp, #4
13a80     A7 28 62 FC | 	wrlong	local02, fp
13a84                 | ' 
13a84                 | ' t1=pop()
13a84                 | ' select case t1.result_type
13a84     08 4E 85 F1 | 	sub	fp, #8
13a88     1E 28 0E F2 | 	cmp	local02, #30 wz
13a8c     14 00 90 AD |  if_e	jmp	#LR__1590
13a90     1F 28 0E F2 | 	cmp	local02, #31 wz
13a94     20 00 90 AD |  if_e	jmp	#LR__1591
13a98     2B 28 0E F2 | 	cmp	local02, #43 wz
13a9c     34 00 90 AD |  if_e	jmp	#LR__1592
13aa0     50 00 90 FD | 	jmp	#LR__1593
13aa4                 | LR__1590
13aa4     A7 12 02 FB | 	rdlong	arg01, fp
13aa8     00 14 06 F6 | 	mov	arg02, #0
13aac     C4 5F B1 FD | 	call	#__system___float_tointeger
13ab0     A7 FA 61 FC | 	wrlong	result1, fp
13ab4     3C 00 90 FD | 	jmp	#LR__1593
13ab8                 | LR__1591
13ab8     A7 12 02 FB | 	rdlong	arg01, fp
13abc     F8 62 B1 FD | 	call	#__system____builtin_atof
13ac0     FD 12 02 F6 | 	mov	arg01, result1
13ac4     00 14 06 F6 | 	mov	arg02, #0
13ac8     A8 5F B1 FD | 	call	#__system___float_tointeger
13acc     A7 FA 61 FC | 	wrlong	result1, fp
13ad0     20 00 90 FD | 	jmp	#LR__1593
13ad4                 | LR__1592
13ad4     A7 12 02 FB | 	rdlong	arg01, fp
13ad8     F0 9B BF FD | 	call	#_convertstring
13adc     FD 12 02 F6 | 	mov	arg01, result1
13ae0     D4 62 B1 FD | 	call	#__system____builtin_atof
13ae4     FD 12 02 F6 | 	mov	arg01, result1
13ae8     00 14 06 F6 | 	mov	arg02, #0
13aec     84 5F B1 FD | 	call	#__system___float_tointeger
13af0     A7 FA 61 FC | 	wrlong	result1, fp
13af4                 | LR__1593
13af4     08 4E 05 F1 | 	add	fp, #8
13af8     A7 38 68 FC | 	wrlong	#28, fp
13afc     08 4E 85 F1 | 	sub	fp, #8
13b00     A7 12 02 F6 | 	mov	arg01, fp
13b04     E4 9A BF FD | 	call	#_push
13b08     A7 F0 03 F6 | 	mov	ptra, fp
13b0c     B2 00 A0 FD | 	call	#popregs_
13b10                 | _do_int_ret
13b10     2D 00 64 FD | 	ret
13b14                 | 
13b14                 | ' 
13b14                 | ' ' ----------------  input
13b14                 | ' 
13b14                 | ' sub do_input
13b14                 | _do_input
13b14     11 4A 05 F6 | 	mov	COUNT_, #17
13b18     A8 00 A0 FD | 	call	#pushregs_
13b1c     50 F1 07 F1 | 	add	ptra, #336
13b20     4A 00 00 FF 
13b24     80 E4 05 F1 | 	add	objptr, ##38016
13b28     F2 FE 01 FB | 	rdlong	result3, objptr
13b2c     FF FC 01 F6 | 	mov	result2, result3
13b30     01 FC 65 F0 | 	shl	result2, #1
13b34     FF FC 01 F1 | 	add	result2, result3
13b38     02 FC 65 F0 | 	shl	result2, #2
13b3c     03 00 00 FF 
13b40     04 E4 85 F1 | 	sub	objptr, ##1540
13b44     F2 FC 01 F1 | 	add	result2, objptr
13b48     FE FC 01 FB | 	rdlong	result2, result2
13b4c     08 4E 05 F1 | 	add	fp, #8
13b50     A7 FC 61 FC | 	wrlong	result2, fp
13b54                 | ' 
13b54                 | ' numpar=compiledline(lineptr_e).result.uresult
13b54                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
13b54     08 4E 85 F1 | 	sub	fp, #8
13b58     01 FC 15 F2 | 	cmp	result2, #1 wc
13b5c     47 00 00 FF 
13b60     7C E4 85 F1 | 	sub	objptr, ##36476
13b64     14 00 90 CD |  if_b	jmp	#LR__1600
13b68     08 4E 05 F1 | 	add	fp, #8
13b6c     A7 FC 01 FB | 	rdlong	result2, fp
13b70     08 4E 85 F1 | 	sub	fp, #8
13b74     41 FC 15 F2 | 	cmp	result2, #65 wc
13b78     50 00 90 CD |  if_b	jmp	#LR__1601
13b7c                 | LR__1600
13b7c     00 12 06 F6 | 	mov	arg01, #0
13b80     D8 88 B1 FD | 	call	#__system___getiolock_0603
13b84     FD 12 02 F6 | 	mov	arg01, result1
13b88     A8 2B B1 FD | 	call	#__system___lockmem
13b8c     B6 01 00 FF 
13b90     32 14 06 F6 | 	mov	arg02, ##@LR__5902
13b94     00 12 06 F6 | 	mov	arg01, #0
13b98     00 16 06 F6 | 	mov	arg03, #0
13b9c     88 38 B1 FD | 	call	#__system___basic_print_string
13ba0     00 12 06 F6 | 	mov	arg01, #0
13ba4     B4 88 B1 FD | 	call	#__system___getiolock_0603
13ba8     FD 00 68 FC | 	wrlong	#0, result1
13bac     50 00 00 FF 
13bb0     F0 E4 05 F1 | 	add	objptr, ##41200
13bb4     F2 14 02 FB | 	rdlong	arg02, objptr
13bb8     50 00 00 FF 
13bbc     F0 E4 85 F1 | 	sub	objptr, ##41200
13bc0     27 12 06 F6 | 	mov	arg01, #39
13bc4     80 F1 B0 FD | 	call	#_printerror
13bc8     44 0B 90 FD | 	jmp	#LR__1650
13bcc                 | LR__1601
13bcc     08 4E 05 F1 | 	add	fp, #8
13bd0     A7 FC 01 FB | 	rdlong	result2, fp
13bd4     01 FC 85 F1 | 	sub	result2, #1
13bd8     28 4F 05 F1 | 	add	fp, #296
13bdc     A7 FC 61 FC | 	wrlong	result2, fp
13be0     3C E4 05 F1 | 	add	objptr, #60
13be4     F2 FC E1 FA | 	rdword	result2, objptr
13be8     FE FC 51 F6 | 	abs	result2, result2 wc
13bec     01 FC 45 F0 | 	shr	result2, #1
13bf0     FE FC 81 F6 | 	negc	result2, result2
13bf4     0C 4E 05 F1 | 	add	fp, #12
13bf8     A7 FC 61 FC | 	wrlong	result2, fp
13bfc     02 E4 05 F1 | 	add	objptr, #2
13c00     F2 26 C2 FA | 	rdbyte	local01, objptr
13c04     3E E4 85 F1 | 	sub	objptr, #62
13c08     04 4E 05 F1 | 	add	fp, #4
13c0c     A7 26 62 FC | 	wrlong	local01, fp
13c10     40 4F 85 F1 | 	sub	fp, #320
13c14                 | ' i=numpar-1
13c14                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13c14                 | ' do
13c14                 | LR__1602
13c14     EC CB BE FD | 	call	#_edit
13c18     A7 FA 61 FC | 	wrlong	result1, fp
13c1c                 | ' 
13c1c                 | '   line$=edit()
13c1c                 | ' 
13c1c                 | '   if v.cursor_y=cpy+1 then
13c1c     3E E4 05 F1 | 	add	objptr, #62
13c20     F2 26 C2 FA | 	rdbyte	local01, objptr
13c24     3E E4 85 F1 | 	sub	objptr, #62
13c28     40 4F 05 F1 | 	add	fp, #320
13c2c     A7 16 02 FB | 	rdlong	arg03, fp
13c30     40 4F 85 F1 | 	sub	fp, #320
13c34     01 16 06 F1 | 	add	arg03, #1
13c38     0B 27 0A F2 | 	cmp	local01, arg03 wz
13c3c     6C 00 90 5D |  if_ne	jmp	#LR__1605
13c40     A7 26 02 FB | 	rdlong	local01, fp
13c44     13 13 02 F6 | 	mov	arg01, local01
13c48     09 29 02 F6 | 	mov	local02, arg01
13c4c     97 06 48 FB | 	callpa	#(@LR__1604-@LR__1603)>>2,fcache_load_ptr_
13c50                 | LR__1603
13c50     14 FB C9 FA | 	rdbyte	result1, local02 wz
13c54     01 28 06 51 |  if_ne	add	local02, #1
13c58     F4 FF 9F 5D |  if_ne	jmp	#LR__1603
13c5c                 | LR__1604
13c5c     09 29 82 F1 | 	sub	local02, arg01
13c60     14 15 02 F6 | 	mov	arg02, local02
13c64     3C 4F 05 F1 | 	add	fp, #316
13c68     A7 16 02 FB | 	rdlong	arg03, fp
13c6c     3C 4F 85 F1 | 	sub	fp, #316
13c70     0B 15 82 F1 | 	sub	arg02, arg03
13c74     37 00 00 FF 
13c78     34 E4 05 F1 | 	add	objptr, ##28212
13c7c     F2 16 02 FB | 	rdlong	arg03, objptr
13c80     37 00 00 FF 
13c84     34 E4 85 F1 | 	sub	objptr, ##28212
13c88     0B 15 02 F1 | 	add	arg02, arg03
13c8c     13 13 02 F6 | 	mov	arg01, local01
13c90     A4 4B B1 FD | 	call	#__system__Right_S
13c94     FD 12 02 F6 | 	mov	arg01, result1
13c98     A4 4F B1 FD | 	call	#__system__RTrim_S
13c9c     FD 12 02 F6 | 	mov	arg01, result1
13ca0     DC 4E B1 FD | 	call	#__system__LTrim_S
13ca4     A7 FA 61 FC | 	wrlong	result1, fp
13ca8     14 00 90 FD | 	jmp	#LR__1606
13cac                 | LR__1605
13cac     A7 12 02 FB | 	rdlong	arg01, fp
13cb0     8C 4F B1 FD | 	call	#__system__RTrim_S
13cb4     FD 12 02 F6 | 	mov	arg01, result1
13cb8     C4 4E B1 FD | 	call	#__system__LTrim_S
13cbc     A7 FA 61 FC | 	wrlong	result1, fp
13cc0                 | LR__1606
13cc0                 | '   do
13cc0                 | LR__1607
13cc0     A7 14 02 FB | 	rdlong	arg02, fp
13cc4     B6 01 00 FF 
13cc8     3D 16 06 F6 | 	mov	arg03, ##@LR__5903
13ccc     01 12 06 F6 | 	mov	arg01, #1
13cd0     24 50 B1 FD | 	call	#__system__Instr
13cd4     0C 4E 05 F1 | 	add	fp, #12
13cd8     A7 FA 61 FC | 	wrlong	result1, fp
13cdc                 | '    comma=instr(1,line$,",")  
13cdc                 | '    if comma>0  then 
13cdc     0C 4E 85 F1 | 	sub	fp, #12
13ce0     01 FA 15 F2 | 	cmp	result1, #1 wc
13ce4     68 00 90 CD |  if_b	jmp	#LR__1610
13ce8     A7 12 02 FB | 	rdlong	arg01, fp
13cec     0C 4E 05 F1 | 	add	fp, #12
13cf0     A7 14 02 FB | 	rdlong	arg02, fp
13cf4     0C 4E 85 F1 | 	sub	fp, #12
13cf8     01 14 86 F1 | 	sub	arg02, #1
13cfc     B0 4A B1 FD | 	call	#__system__Left_S
13d00     04 4E 05 F1 | 	add	fp, #4
13d04     A7 FA 61 FC | 	wrlong	result1, fp
13d08     04 4E 85 F1 | 	sub	fp, #4
13d0c     A7 26 02 FB | 	rdlong	local01, fp
13d10     13 13 02 F6 | 	mov	arg01, local01
13d14     09 29 02 F6 | 	mov	local02, arg01
13d18     97 06 48 FB | 	callpa	#(@LR__1609-@LR__1608)>>2,fcache_load_ptr_
13d1c                 | LR__1608
13d1c     14 FB C9 FA | 	rdbyte	result1, local02 wz
13d20     01 28 06 51 |  if_ne	add	local02, #1
13d24     F4 FF 9F 5D |  if_ne	jmp	#LR__1608
13d28                 | LR__1609
13d28     09 29 82 F1 | 	sub	local02, arg01
13d2c     14 15 02 F6 | 	mov	arg02, local02
13d30     0C 4E 05 F1 | 	add	fp, #12
13d34     A7 16 02 FB | 	rdlong	arg03, fp
13d38     0C 4E 85 F1 | 	sub	fp, #12
13d3c     0B 15 82 F1 | 	sub	arg02, arg03
13d40     13 13 02 F6 | 	mov	arg01, local01
13d44     F0 4A B1 FD | 	call	#__system__Right_S
13d48     A7 FA 61 FC | 	wrlong	result1, fp
13d4c     28 00 90 FD | 	jmp	#LR__1611
13d50                 | LR__1610
13d50     A7 12 02 FB | 	rdlong	arg01, fp
13d54     E8 4E B1 FD | 	call	#__system__RTrim_S
13d58     FD 12 02 F6 | 	mov	arg01, result1
13d5c     20 4E B1 FD | 	call	#__system__LTrim_S
13d60     04 4E 05 F1 | 	add	fp, #4
13d64     A7 FA 61 FC | 	wrlong	result1, fp
13d68     04 4E 85 F1 | 	sub	fp, #4
13d6c     B6 01 00 FF 
13d70     3F 26 06 F6 | 	mov	local01, ##@LR__5904
13d74     A7 26 62 FC | 	wrlong	local01, fp
13d78                 | LR__1611
13d78     30 4F 05 F1 | 	add	fp, #304
13d7c     A7 26 02 FB | 	rdlong	local01, fp
13d80     02 26 66 F0 | 	shl	local01, #2
13d84     04 4F 85 F1 | 	sub	fp, #260
13d88     A7 26 02 F1 | 	add	local01, fp
13d8c     28 4E 85 F1 | 	sub	fp, #40
13d90     A7 FA 01 FB | 	rdlong	result1, fp
13d94     13 FB 61 FC | 	wrlong	result1, local01
13d98     2C 4F 05 F1 | 	add	fp, #300
13d9c     A7 26 02 FB | 	rdlong	local01, fp
13da0     01 26 86 F1 | 	sub	local01, #1
13da4     A7 26 62 FC | 	wrlong	local01, fp
13da8     30 4F 85 F1 | 	sub	fp, #304
13dac     00 26 56 F2 | 	cmps	local01, #0 wc
13db0     18 00 90 CD |  if_b	jmp	#LR__1612
13db4     A7 12 02 FB | 	rdlong	arg01, fp
13db8     B6 01 00 FF 
13dbc     40 14 06 F6 | 	mov	arg02, ##@LR__5905
13dc0     98 29 B1 FD | 	call	#__system___string_cmp
13dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
13dc8     F4 FE 9F 5D |  if_ne	jmp	#LR__1607
13dcc                 | LR__1612
13dcc     30 4F 05 F1 | 	add	fp, #304
13dd0     A7 26 02 FB | 	rdlong	local01, fp
13dd4     30 4F 85 F1 | 	sub	fp, #304
13dd8     00 26 56 F2 | 	cmps	local01, #0 wc
13ddc     34 FE 9F 3D |  if_ae	jmp	#LR__1602
13de0                 | ' 
13de0                 | ' for i=0 to numpar-1
13de0     30 4F 05 F1 | 	add	fp, #304
13de4     A7 00 68 FC | 	wrlong	#0, fp
13de8     28 4F 85 F1 | 	sub	fp, #296
13dec     A7 2A 02 FB | 	rdlong	local03, fp
13df0     08 4E 85 F1 | 	sub	fp, #8
13df4                 | LR__1613
13df4     30 4F 05 F1 | 	add	fp, #304
13df8     A7 2C 02 FB | 	rdlong	local04, fp
13dfc     30 4F 85 F1 | 	sub	fp, #304
13e00     16 27 02 F6 | 	mov	local01, local04
13e04     15 27 52 F2 | 	cmps	local01, local03 wc
13e08     04 09 90 3D |  if_ae	jmp	#LR__1649
13e0c                 | ' 
13e0c                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
13e0c     30 4F 05 F1 | 	add	fp, #304
13e10     A7 16 02 FB | 	rdlong	arg03, fp
13e14     02 16 66 F0 | 	shl	arg03, #2
13e18     04 4F 85 F1 | 	sub	fp, #260
13e1c     A7 16 02 F1 | 	add	arg03, fp
13e20     0B 13 02 FB | 	rdlong	arg01, arg03
13e24     2C 4E 85 F1 | 	sub	fp, #44
13e28     C0 29 BF FD | 	call	#_isnum
13e2c     FD 2E 02 F6 | 	mov	local05, result1
13e30     30 4F 05 F1 | 	add	fp, #304
13e34     A7 16 02 FB | 	rdlong	arg03, fp
13e38     02 16 66 F0 | 	shl	arg03, #2
13e3c     04 4F 85 F1 | 	sub	fp, #260
13e40     A7 30 02 F6 | 	mov	local06, fp
13e44     A7 16 02 F1 | 	add	arg03, fp
13e48     0B 13 02 FB | 	rdlong	arg01, arg03
13e4c     2C 4E 85 F1 | 	sub	fp, #44
13e50     84 2D BF FD | 	call	#_isint
13e54     FD 2E 2A F5 | 	andn	local05, result1 wz
13e58     52 00 00 5F 
13e5c     10 E5 05 51 |  if_ne	add	objptr, ##42256
13e60     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
13e64     52 00 00 5F 
13e68     10 E5 85 51 |  if_ne	sub	objptr, ##42256
13e6c                 | '   if isint(args(i)) then r=result_int 
13e6c     30 4F 05 F1 | 	add	fp, #304
13e70     A7 2E 02 FB | 	rdlong	local05, fp
13e74     02 2E 66 F0 | 	shl	local05, #2
13e78     04 4F 85 F1 | 	sub	fp, #260
13e7c     A7 2E 02 F1 | 	add	local05, fp
13e80     17 13 02 FB | 	rdlong	arg01, local05
13e84     2C 4E 85 F1 | 	sub	fp, #44
13e88     4C 2D BF FD | 	call	#_isint
13e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
13e90     52 00 00 5F 
13e94     10 E5 05 51 |  if_ne	add	objptr, ##42256
13e98     F2 38 68 5C |  if_ne	wrlong	#28, objptr
13e9c     52 00 00 5F 
13ea0     10 E5 85 51 |  if_ne	sub	objptr, ##42256
13ea4                 | '   if isdec(args(i)) then r=result_uint 
13ea4     30 4F 05 F1 | 	add	fp, #304
13ea8     A7 2E 02 FB | 	rdlong	local05, fp
13eac     02 2E 66 F0 | 	shl	local05, #2
13eb0     04 4F 85 F1 | 	sub	fp, #260
13eb4     A7 2E 02 F1 | 	add	local05, fp
13eb8     17 13 02 FB | 	rdlong	arg01, local05
13ebc     2C 4E 85 F1 | 	sub	fp, #44
13ec0     B8 2F BF FD | 	call	#_isdec
13ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
13ec8     52 00 00 5F 
13ecc     10 E5 05 51 |  if_ne	add	objptr, ##42256
13ed0     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
13ed4     52 00 00 5F 
13ed8     10 E5 85 51 |  if_ne	sub	objptr, ##42256
13edc                 | '   if not isnum(args(i)) then 
13edc     30 4F 05 F1 | 	add	fp, #304
13ee0     A7 32 02 FB | 	rdlong	local07, fp
13ee4     19 35 02 F6 | 	mov	local08, local07
13ee8     02 34 66 F0 | 	shl	local08, #2
13eec     04 4F 85 F1 | 	sub	fp, #260
13ef0     A7 36 02 F6 | 	mov	local09, fp
13ef4     A7 34 02 F1 | 	add	local08, fp
13ef8     1A 13 02 FB | 	rdlong	arg01, local08
13efc     2C 4E 85 F1 | 	sub	fp, #44
13f00     E8 28 BF FD | 	call	#_isnum
13f04     FD 2E 22 F6 | 	not	local05, result1
13f08     00 2E 0E F2 | 	cmp	local05, #0 wz
13f0c     44 01 90 AD |  if_e	jmp	#LR__1618
13f10     52 00 00 FF 
13f14     10 E5 05 F1 | 	add	objptr, ##42256
13f18     F2 56 68 FC | 	wrlong	#43, objptr
13f1c     52 00 00 FF 
13f20     10 E5 85 F1 | 	sub	objptr, ##42256
13f24     04 4E 05 F1 | 	add	fp, #4
13f28     A7 12 02 FB | 	rdlong	arg01, fp
13f2c     04 4E 85 F1 | 	sub	fp, #4
13f30     09 29 02 F6 | 	mov	local02, arg01
13f34     97 06 48 FB | 	callpa	#(@LR__1615-@LR__1614)>>2,fcache_load_ptr_
13f38                 | LR__1614
13f38     14 FB C9 FA | 	rdbyte	result1, local02 wz
13f3c     01 28 06 51 |  if_ne	add	local02, #1
13f40     F4 FF 9F 5D |  if_ne	jmp	#LR__1614
13f44                 | LR__1615
13f44     09 29 82 F1 | 	sub	local02, arg01
13f48     14 33 02 F6 | 	mov	local07, local02
13f4c     38 4F 05 F1 | 	add	fp, #312
13f50     A7 32 62 FC | 	wrlong	local07, fp
13f54     52 00 00 FF 
13f58     98 E4 05 F1 | 	add	objptr, ##42136
13f5c     F2 12 02 FB | 	rdlong	arg01, objptr
13f60     19 13 82 F1 | 	sub	arg01, local07
13f64     04 12 86 F1 | 	sub	arg01, #4
13f68     03 12 26 F5 | 	andn	arg01, #3
13f6c     F2 12 62 FC | 	wrlong	arg01, objptr
13f70     52 00 00 FF 
13f74     98 E4 85 F1 | 	sub	objptr, ##42136
13f78     A7 14 02 FB | 	rdlong	arg02, fp
13f7c     38 4F 85 F1 | 	sub	fp, #312
13f80     64 EF B0 FD | 	call	#_pslpoke
13f84                 | '     pslpoke memtop,l
13f84                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
13f84     34 4F 05 F1 | 	add	fp, #308
13f88     A7 02 68 FC | 	wrlong	#1, fp
13f8c     04 4E 05 F1 | 	add	fp, #4
13f90     A7 38 02 FB | 	rdlong	local10, fp
13f94     38 4F 85 F1 | 	sub	fp, #312
13f98     01 38 06 F1 | 	add	local10, #1
13f9c                 | LR__1616
13f9c     34 4F 05 F1 | 	add	fp, #308
13fa0     A7 2E 02 FB | 	rdlong	local05, fp
13fa4     34 4F 85 F1 | 	sub	fp, #308
13fa8     1C 2F 52 F2 | 	cmps	local05, local10 wc
13fac     84 00 90 3D |  if_ae	jmp	#LR__1617
13fb0     52 00 00 FF 
13fb4     98 E4 05 F1 | 	add	objptr, ##42136
13fb8     F2 32 02 FB | 	rdlong	local07, objptr
13fbc     52 00 00 FF 
13fc0     98 E4 85 F1 | 	sub	objptr, ##42136
13fc4     03 32 06 F1 | 	add	local07, #3
13fc8     34 4F 05 F1 | 	add	fp, #308
13fcc     A7 3A 02 FB | 	rdlong	local11, fp
13fd0     1D 33 02 F1 | 	add	local07, local11
13fd4     04 4E 85 F1 | 	sub	fp, #4
13fd8     A7 3C 02 FB | 	rdlong	local12, fp
13fdc     02 3C 66 F0 | 	shl	local12, #2
13fe0     04 4F 85 F1 | 	sub	fp, #260
13fe4     A7 3E 02 F6 | 	mov	local13, fp
13fe8     A7 3C 02 F1 | 	add	local12, fp
13fec     1E 13 02 FB | 	rdlong	arg01, local12
13ff0     2C 4E 85 F1 | 	sub	fp, #44
13ff4     01 40 06 F6 | 	mov	local14, #1
13ff8     1D 15 02 F6 | 	mov	arg02, local11
13ffc     01 16 06 F6 | 	mov	arg03, #1
14000     C4 48 B1 FD | 	call	#__system__Mid_S
14004     FD 14 C2 FA | 	rdbyte	arg02, result1
14008     19 13 02 F6 | 	mov	arg01, local07
1400c     68 EF B0 FD | 	call	#_pspoke
14010     34 4F 05 F1 | 	add	fp, #308
14014     A7 34 02 FB | 	rdlong	local08, fp
14018     1A 33 02 F6 | 	mov	local07, local08
1401c     1A 31 02 F6 | 	mov	local06, local08
14020     18 37 02 F6 | 	mov	local09, local06
14024     01 36 06 F1 | 	add	local09, #1
14028     A7 36 62 FC | 	wrlong	local09, fp
1402c     34 4F 85 F1 | 	sub	fp, #308
14030     68 FF 9F FD | 	jmp	#LR__1616
14034                 | LR__1617
14034     52 00 00 FF 
14038     98 E4 05 F1 | 	add	objptr, ##42136
1403c     F2 2E 02 FB | 	rdlong	local05, objptr
14040     52 00 00 FF 
14044     98 E4 85 F1 | 	sub	objptr, ##42136
14048     10 4E 05 F1 | 	add	fp, #16
1404c     A7 2E 62 FC | 	wrlong	local05, fp
14050     10 4E 85 F1 | 	sub	fp, #16
14054                 | LR__1618
14054     FC 94 BF FD | 	call	#_pop
14058     FE 2E 02 F6 | 	mov	local05, result2
1405c     FF 42 02 F6 | 	mov	local15, result3
14060     1C 4E 05 F1 | 	add	fp, #28
14064     A7 FA 61 FC | 	wrlong	result1, fp
14068     04 4E 05 F1 | 	add	fp, #4
1406c     A7 2E 62 FC | 	wrlong	local05, fp
14070     04 4E 05 F1 | 	add	fp, #4
14074     A7 42 62 FC | 	wrlong	local15, fp
14078     04 4E 85 F1 | 	sub	fp, #4
1407c     A7 44 02 FB | 	rdlong	local16, fp
14080     0C 4E 85 F1 | 	sub	fp, #12
14084     A7 44 62 FC | 	wrlong	local16, fp
14088                 | '   t1=pop() : vartype=t1.result.twowords(1)
14088                 | '   select case vartype
14088     14 4E 85 F1 | 	sub	fp, #20
1408c     22 47 0A F6 | 	mov	local17, local16 wz
14090     64 00 90 AD |  if_e	jmp	#LR__1619
14094     00 47 0E F2 | 	cmp	local17, #256 wz
14098     6C 00 90 AD |  if_e	jmp	#LR__1620
1409c     01 47 0E F2 | 	cmp	local17, #257 wz
140a0     74 00 90 AD |  if_e	jmp	#LR__1621
140a4     02 47 0E F2 | 	cmp	local17, #258 wz
140a8     7C 00 90 AD |  if_e	jmp	#LR__1622
140ac     03 47 0E F2 | 	cmp	local17, #259 wz
140b0     84 00 90 AD |  if_e	jmp	#LR__1623
140b4     04 47 0E F2 | 	cmp	local17, #260 wz
140b8     8C 00 90 AD |  if_e	jmp	#LR__1624
140bc     05 47 0E F2 | 	cmp	local17, #261 wz
140c0     94 00 90 AD |  if_e	jmp	#LR__1625
140c4     06 47 0E F2 | 	cmp	local17, #262 wz
140c8     9C 00 90 AD |  if_e	jmp	#LR__1626
140cc     07 47 0E F2 | 	cmp	local17, #263 wz
140d0     A4 00 90 AD |  if_e	jmp	#LR__1627
140d4     08 47 0E F2 | 	cmp	local17, #264 wz
140d8     AC 00 90 AD |  if_e	jmp	#LR__1628
140dc     09 47 0E F2 | 	cmp	local17, #265 wz
140e0     B4 00 90 AD |  if_e	jmp	#LR__1629
140e4     0A 47 0E F2 | 	cmp	local17, #266 wz
140e8     BC 00 90 AD |  if_e	jmp	#LR__1630
140ec     0B 47 0E F2 | 	cmp	local17, #267 wz
140f0     C4 00 90 AD |  if_e	jmp	#LR__1631
140f4     D0 00 90 FD | 	jmp	#LR__1632
140f8                 | LR__1619
140f8     18 4E 05 F1 | 	add	fp, #24
140fc     A7 18 68 FC | 	wrlong	#12, fp
14100     18 4E 85 F1 | 	sub	fp, #24
14104     CC 00 90 FD | 	jmp	#LR__1633
14108                 | LR__1620
14108     18 4E 05 F1 | 	add	fp, #24
1410c     A7 18 68 FC | 	wrlong	#12, fp
14110     18 4E 85 F1 | 	sub	fp, #24
14114     BC 00 90 FD | 	jmp	#LR__1633
14118                 | LR__1621
14118     18 4E 05 F1 | 	add	fp, #24
1411c     A7 02 68 FC | 	wrlong	#1, fp
14120     18 4E 85 F1 | 	sub	fp, #24
14124     AC 00 90 FD | 	jmp	#LR__1633
14128                 | LR__1622
14128     18 4E 05 F1 | 	add	fp, #24
1412c     A7 02 68 FC | 	wrlong	#1, fp
14130     18 4E 85 F1 | 	sub	fp, #24
14134     9C 00 90 FD | 	jmp	#LR__1633
14138                 | LR__1623
14138     18 4E 05 F1 | 	add	fp, #24
1413c     A7 04 68 FC | 	wrlong	#2, fp
14140     18 4E 85 F1 | 	sub	fp, #24
14144     8C 00 90 FD | 	jmp	#LR__1633
14148                 | LR__1624
14148     18 4E 05 F1 | 	add	fp, #24
1414c     A7 04 68 FC | 	wrlong	#2, fp
14150     18 4E 85 F1 | 	sub	fp, #24
14154     7C 00 90 FD | 	jmp	#LR__1633
14158                 | LR__1625
14158     18 4E 05 F1 | 	add	fp, #24
1415c     A7 08 68 FC | 	wrlong	#4, fp
14160     18 4E 85 F1 | 	sub	fp, #24
14164     6C 00 90 FD | 	jmp	#LR__1633
14168                 | LR__1626
14168     18 4E 05 F1 | 	add	fp, #24
1416c     A7 08 68 FC | 	wrlong	#4, fp
14170     18 4E 85 F1 | 	sub	fp, #24
14174     5C 00 90 FD | 	jmp	#LR__1633
14178                 | LR__1627
14178     18 4E 05 F1 | 	add	fp, #24
1417c     A7 10 68 FC | 	wrlong	#8, fp
14180     18 4E 85 F1 | 	sub	fp, #24
14184     4C 00 90 FD | 	jmp	#LR__1633
14188                 | LR__1628
14188     18 4E 05 F1 | 	add	fp, #24
1418c     A7 10 68 FC | 	wrlong	#8, fp
14190     18 4E 85 F1 | 	sub	fp, #24
14194     3C 00 90 FD | 	jmp	#LR__1633
14198                 | LR__1629
14198     18 4E 05 F1 | 	add	fp, #24
1419c     A7 0C 68 FC | 	wrlong	#6, fp
141a0     18 4E 85 F1 | 	sub	fp, #24
141a4     2C 00 90 FD | 	jmp	#LR__1633
141a8                 | LR__1630
141a8     18 4E 05 F1 | 	add	fp, #24
141ac     A7 10 68 FC | 	wrlong	#8, fp
141b0     18 4E 85 F1 | 	sub	fp, #24
141b4     1C 00 90 FD | 	jmp	#LR__1633
141b8                 | LR__1631
141b8     18 4E 05 F1 | 	add	fp, #24
141bc     A7 0A 68 FC | 	wrlong	#5, fp
141c0     18 4E 85 F1 | 	sub	fp, #24
141c4     0C 00 90 FD | 	jmp	#LR__1633
141c8                 | LR__1632
141c8     18 4E 05 F1 | 	add	fp, #24
141cc     A7 18 68 FC | 	wrlong	#12, fp
141d0     18 4E 85 F1 | 	sub	fp, #24
141d4                 | LR__1633
141d4                 | '   if esize=12 andalso t1.result.uresult<$80000 then
141d4     18 4E 05 F1 | 	add	fp, #24
141d8     A7 44 02 FB | 	rdlong	local16, fp
141dc     18 4E 85 F1 | 	sub	fp, #24
141e0     0C 44 0E F2 | 	cmp	local16, #12 wz
141e4     74 01 90 5D |  if_ne	jmp	#LR__1638
141e8     1C 4E 05 F1 | 	add	fp, #28
141ec     A7 32 02 FB | 	rdlong	local07, fp
141f0     1C 4E 85 F1 | 	sub	fp, #28
141f4     00 04 00 FF 
141f8     00 32 16 F2 | 	cmp	local07, ##524288 wc
141fc     5C 01 90 3D |  if_ae	jmp	#LR__1638
14200                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
14200     52 00 00 FF 
14204     10 E5 05 F1 | 	add	objptr, ##42256
14208     F2 44 02 FB | 	rdlong	local16, objptr
1420c     52 00 00 FF 
14210     10 E5 85 F1 | 	sub	objptr, ##42256
14214     1C 44 0E F2 | 	cmp	local16, #28 wz
14218     38 00 90 5D |  if_ne	jmp	#LR__1634
1421c     1C 4E 05 F1 | 	add	fp, #28
14220     A7 44 02 FB | 	rdlong	local16, fp
14224     14 4F 05 F1 | 	add	fp, #276
14228     A7 32 02 FB | 	rdlong	local07, fp
1422c     19 35 02 F6 | 	mov	local08, local07
14230     02 34 66 F0 | 	shl	local08, #2
14234     04 4F 85 F1 | 	sub	fp, #260
14238     A7 36 02 F6 | 	mov	local09, fp
1423c     A7 34 02 F1 | 	add	local08, fp
14240     1A 13 02 FB | 	rdlong	arg01, local08
14244     00 14 06 F6 | 	mov	arg02, #0
14248     2C 4E 85 F1 | 	sub	fp, #44
1424c     D4 59 B1 FD | 	call	#__system____builtin_atoi
14250     22 FB 61 FC | 	wrlong	result1, local16
14254                 | LR__1634
14254                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
14254     52 00 00 FF 
14258     10 E5 05 F1 | 	add	objptr, ##42256
1425c     F2 44 02 FB | 	rdlong	local16, objptr
14260     52 00 00 FF 
14264     10 E5 85 F1 | 	sub	objptr, ##42256
14268     1D 44 0E F2 | 	cmp	local16, #29 wz
1426c     38 00 90 5D |  if_ne	jmp	#LR__1635
14270     1C 4E 05 F1 | 	add	fp, #28
14274     A7 44 02 FB | 	rdlong	local16, fp
14278     14 4F 05 F1 | 	add	fp, #276
1427c     A7 32 02 FB | 	rdlong	local07, fp
14280     19 35 02 F6 | 	mov	local08, local07
14284     02 34 66 F0 | 	shl	local08, #2
14288     04 4F 85 F1 | 	sub	fp, #260
1428c     A7 36 02 F6 | 	mov	local09, fp
14290     A7 34 02 F1 | 	add	local08, fp
14294     1A 13 02 FB | 	rdlong	arg01, local08
14298     00 14 06 F6 | 	mov	arg02, #0
1429c     2C 4E 85 F1 | 	sub	fp, #44
142a0     80 59 B1 FD | 	call	#__system____builtin_atoi
142a4     22 FB 61 FC | 	wrlong	result1, local16
142a8                 | LR__1635
142a8                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
142a8     52 00 00 FF 
142ac     10 E5 05 F1 | 	add	objptr, ##42256
142b0     F2 44 02 FB | 	rdlong	local16, objptr
142b4     52 00 00 FF 
142b8     10 E5 85 F1 | 	sub	objptr, ##42256
142bc     1E 44 0E F2 | 	cmp	local16, #30 wz
142c0     3C 00 90 5D |  if_ne	jmp	#LR__1636
142c4     30 4F 05 F1 | 	add	fp, #304
142c8     A7 32 02 FB | 	rdlong	local07, fp
142cc     02 32 66 F0 | 	shl	local07, #2
142d0     04 4F 85 F1 | 	sub	fp, #260
142d4     A7 34 02 F6 | 	mov	local08, fp
142d8     A7 32 02 F1 | 	add	local07, fp
142dc     19 13 02 FB | 	rdlong	arg01, local07
142e0     2C 4E 85 F1 | 	sub	fp, #44
142e4     D0 5A B1 FD | 	call	#__system____builtin_atof
142e8     28 4E 05 F1 | 	add	fp, #40
142ec     A7 FA 61 FC | 	wrlong	result1, fp
142f0     0C 4E 85 F1 | 	sub	fp, #12
142f4     A7 44 02 FB | 	rdlong	local16, fp
142f8     1C 4E 85 F1 | 	sub	fp, #28
142fc     22 FB 61 FC | 	wrlong	result1, local16
14300                 | LR__1636
14300                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
14300     52 00 00 FF 
14304     10 E5 05 F1 | 	add	objptr, ##42256
14308     F2 44 02 FB | 	rdlong	local16, objptr
1430c     52 00 00 FF 
14310     10 E5 85 F1 | 	sub	objptr, ##42256
14314     2B 44 0E F2 | 	cmp	local16, #43 wz
14318     18 00 90 5D |  if_ne	jmp	#LR__1637
1431c     1C 4E 05 F1 | 	add	fp, #28
14320     A7 12 02 FB | 	rdlong	arg01, fp
14324     0C 4E 85 F1 | 	sub	fp, #12
14328     A7 14 02 FB | 	rdlong	arg02, fp
1432c     10 4E 85 F1 | 	sub	fp, #16
14330     09 15 62 FC | 	wrlong	arg02, arg01
14334                 | LR__1637
14334     1C 4E 05 F1 | 	add	fp, #28
14338     A7 12 02 FB | 	rdlong	arg01, fp
1433c     1C 4E 85 F1 | 	sub	fp, #28
14340     08 12 06 F1 | 	add	arg01, #8
14344     52 00 00 FF 
14348     10 E5 05 F1 | 	add	objptr, ##42256
1434c     F2 14 02 FB | 	rdlong	arg02, objptr
14350     52 00 00 FF 
14354     10 E5 85 F1 | 	sub	objptr, ##42256
14358     09 15 62 FC | 	wrlong	arg02, arg01
1435c                 | LR__1638
1435c                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
1435c     18 4E 05 F1 | 	add	fp, #24
14360     A7 44 02 FB | 	rdlong	local16, fp
14364     18 4E 85 F1 | 	sub	fp, #24
14368     0C 44 0E F2 | 	cmp	local16, #12 wz
1436c     94 01 90 5D |  if_ne	jmp	#LR__1643
14370     1C 4E 05 F1 | 	add	fp, #28
14374     A7 32 02 FB | 	rdlong	local07, fp
14378     1C 4E 85 F1 | 	sub	fp, #28
1437c     00 04 00 FF 
14380     00 32 16 F2 | 	cmp	local07, ##524288 wc
14384     7C 01 90 CD |  if_b	jmp	#LR__1643
14388                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
14388     52 00 00 FF 
1438c     10 E5 05 F1 | 	add	objptr, ##42256
14390     F2 44 02 FB | 	rdlong	local16, objptr
14394     52 00 00 FF 
14398     10 E5 85 F1 | 	sub	objptr, ##42256
1439c     1C 44 0E F2 | 	cmp	local16, #28 wz
143a0     40 00 90 5D |  if_ne	jmp	#LR__1639
143a4     1C 4E 05 F1 | 	add	fp, #28
143a8     A7 44 02 FB | 	rdlong	local16, fp
143ac     14 4F 05 F1 | 	add	fp, #276
143b0     A7 32 02 FB | 	rdlong	local07, fp
143b4     19 35 02 F6 | 	mov	local08, local07
143b8     02 34 66 F0 | 	shl	local08, #2
143bc     04 4F 85 F1 | 	sub	fp, #260
143c0     A7 36 02 F6 | 	mov	local09, fp
143c4     A7 34 02 F1 | 	add	local08, fp
143c8     1A 13 02 FB | 	rdlong	arg01, local08
143cc     00 14 06 F6 | 	mov	arg02, #0
143d0     2C 4E 85 F1 | 	sub	fp, #44
143d4     4C 58 B1 FD | 	call	#__system____builtin_atoi
143d8     FD 14 02 F6 | 	mov	arg02, result1
143dc     22 13 02 F6 | 	mov	arg01, local16
143e0     04 EB B0 FD | 	call	#_pslpoke
143e4                 | LR__1639
143e4                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
143e4     52 00 00 FF 
143e8     10 E5 05 F1 | 	add	objptr, ##42256
143ec     F2 44 02 FB | 	rdlong	local16, objptr
143f0     52 00 00 FF 
143f4     10 E5 85 F1 | 	sub	objptr, ##42256
143f8     1D 44 0E F2 | 	cmp	local16, #29 wz
143fc     40 00 90 5D |  if_ne	jmp	#LR__1640
14400     1C 4E 05 F1 | 	add	fp, #28
14404     A7 44 02 FB | 	rdlong	local16, fp
14408     14 4F 05 F1 | 	add	fp, #276
1440c     A7 32 02 FB | 	rdlong	local07, fp
14410     19 35 02 F6 | 	mov	local08, local07
14414     02 34 66 F0 | 	shl	local08, #2
14418     04 4F 85 F1 | 	sub	fp, #260
1441c     A7 36 02 F6 | 	mov	local09, fp
14420     A7 34 02 F1 | 	add	local08, fp
14424     1A 13 02 FB | 	rdlong	arg01, local08
14428     00 14 06 F6 | 	mov	arg02, #0
1442c     2C 4E 85 F1 | 	sub	fp, #44
14430     F0 57 B1 FD | 	call	#__system____builtin_atoi
14434     FD 14 02 F6 | 	mov	arg02, result1
14438     22 13 02 F6 | 	mov	arg01, local16
1443c     A8 EA B0 FD | 	call	#_pslpoke
14440                 | LR__1640
14440                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14440     52 00 00 FF 
14444     10 E5 05 F1 | 	add	objptr, ##42256
14448     F2 44 02 FB | 	rdlong	local16, objptr
1444c     52 00 00 FF 
14450     10 E5 85 F1 | 	sub	objptr, ##42256
14454     1E 44 0E F2 | 	cmp	local16, #30 wz
14458     4C 00 90 5D |  if_ne	jmp	#LR__1641
1445c     30 4F 05 F1 | 	add	fp, #304
14460     A7 32 02 FB | 	rdlong	local07, fp
14464     02 32 66 F0 | 	shl	local07, #2
14468     04 4F 85 F1 | 	sub	fp, #260
1446c     A7 34 02 F6 | 	mov	local08, fp
14470     A7 32 02 F1 | 	add	local07, fp
14474     19 13 02 FB | 	rdlong	arg01, local07
14478     2C 4E 85 F1 | 	sub	fp, #44
1447c     38 59 B1 FD | 	call	#__system____builtin_atof
14480     28 4E 05 F1 | 	add	fp, #40
14484     A7 FA 61 FC | 	wrlong	result1, fp
14488     0C 4E 85 F1 | 	sub	fp, #12
1448c     A7 44 02 FB | 	rdlong	local16, fp
14490     0C 4E 05 F1 | 	add	fp, #12
14494     A7 12 02 F6 | 	mov	arg01, fp
14498     28 4E 85 F1 | 	sub	fp, #40
1449c     09 15 02 FB | 	rdlong	arg02, arg01
144a0     22 13 02 F6 | 	mov	arg01, local16
144a4     40 EA B0 FD | 	call	#_pslpoke
144a8                 | LR__1641
144a8                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
144a8     52 00 00 FF 
144ac     10 E5 05 F1 | 	add	objptr, ##42256
144b0     F2 44 02 FB | 	rdlong	local16, objptr
144b4     52 00 00 FF 
144b8     10 E5 85 F1 | 	sub	objptr, ##42256
144bc     2B 44 0E F2 | 	cmp	local16, #43 wz
144c0     18 00 90 5D |  if_ne	jmp	#LR__1642
144c4     1C 4E 05 F1 | 	add	fp, #28
144c8     A7 12 02 FB | 	rdlong	arg01, fp
144cc     0C 4E 85 F1 | 	sub	fp, #12
144d0     A7 14 02 FB | 	rdlong	arg02, fp
144d4     10 4E 85 F1 | 	sub	fp, #16
144d8     0C EA B0 FD | 	call	#_pslpoke
144dc                 | LR__1642
144dc     1C 4E 05 F1 | 	add	fp, #28
144e0     A7 12 02 FB | 	rdlong	arg01, fp
144e4     1C 4E 85 F1 | 	sub	fp, #28
144e8     08 12 06 F1 | 	add	arg01, #8
144ec     52 00 00 FF 
144f0     10 E5 05 F1 | 	add	objptr, ##42256
144f4     F2 14 02 FB | 	rdlong	arg02, objptr
144f8     52 00 00 FF 
144fc     10 E5 85 F1 | 	sub	objptr, ##42256
14500     E4 E9 B0 FD | 	call	#_pslpoke
14504                 | LR__1643
14504                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
14504     18 4E 05 F1 | 	add	fp, #24
14508     A7 44 02 FB | 	rdlong	local16, fp
1450c     18 4E 85 F1 | 	sub	fp, #24
14510     05 44 0E F2 | 	cmp	local16, #5 wz
14514     52 00 00 AF 
14518     10 E5 05 A1 |  if_e	add	objptr, ##42256
1451c     F2 42 02 AB |  if_e	rdlong	local15, objptr
14520     52 00 00 AF 
14524     10 E5 85 A1 |  if_e	sub	objptr, ##42256
14528     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
1452c     18 00 90 5D |  if_ne	jmp	#LR__1644
14530     1C 4E 05 F1 | 	add	fp, #28
14534     A7 12 02 FB | 	rdlong	arg01, fp
14538     0C 4E 85 F1 | 	sub	fp, #12
1453c     A7 14 02 FB | 	rdlong	arg02, fp
14540     10 4E 85 F1 | 	sub	fp, #16
14544     A0 E9 B0 FD | 	call	#_pslpoke
14548                 | LR__1644
14548                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
14548     18 4E 05 F1 | 	add	fp, #24
1454c     A7 44 02 FB | 	rdlong	local16, fp
14550     18 4E 85 F1 | 	sub	fp, #24
14554     04 44 0E F2 | 	cmp	local16, #4 wz
14558     54 00 90 5D |  if_ne	jmp	#LR__1645
1455c     52 00 00 FF 
14560     10 E5 05 F1 | 	add	objptr, ##42256
14564     F2 42 02 FB | 	rdlong	local15, objptr
14568     52 00 00 FF 
1456c     10 E5 85 F1 | 	sub	objptr, ##42256
14570     2B 42 0E F2 | 	cmp	local15, #43 wz
14574     38 00 90 AD |  if_e	jmp	#LR__1645
14578     1C 4E 05 F1 | 	add	fp, #28
1457c     A7 44 02 FB | 	rdlong	local16, fp
14580     14 4F 05 F1 | 	add	fp, #276
14584     A7 34 02 FB | 	rdlong	local08, fp
14588     02 34 66 F0 | 	shl	local08, #2
1458c     04 4F 85 F1 | 	sub	fp, #260
14590     A7 34 02 F1 | 	add	local08, fp
14594     1A 13 02 FB | 	rdlong	arg01, local08
14598     00 14 06 F6 | 	mov	arg02, #0
1459c     2C 4E 85 F1 | 	sub	fp, #44
145a0     80 56 B1 FD | 	call	#__system____builtin_atoi
145a4     FD 14 02 F6 | 	mov	arg02, result1
145a8     22 13 02 F6 | 	mov	arg01, local16
145ac     38 E9 B0 FD | 	call	#_pslpoke
145b0                 | LR__1645
145b0                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
145b0     18 4E 05 F1 | 	add	fp, #24
145b4     A7 44 02 FB | 	rdlong	local16, fp
145b8     18 4E 85 F1 | 	sub	fp, #24
145bc     02 44 0E F2 | 	cmp	local16, #2 wz
145c0     54 00 90 5D |  if_ne	jmp	#LR__1646
145c4     52 00 00 FF 
145c8     10 E5 05 F1 | 	add	objptr, ##42256
145cc     F2 42 02 FB | 	rdlong	local15, objptr
145d0     52 00 00 FF 
145d4     10 E5 85 F1 | 	sub	objptr, ##42256
145d8     2B 42 0E F2 | 	cmp	local15, #43 wz
145dc     38 00 90 AD |  if_e	jmp	#LR__1646
145e0     1C 4E 05 F1 | 	add	fp, #28
145e4     A7 44 02 FB | 	rdlong	local16, fp
145e8     14 4F 05 F1 | 	add	fp, #276
145ec     A7 34 02 FB | 	rdlong	local08, fp
145f0     02 34 66 F0 | 	shl	local08, #2
145f4     04 4F 85 F1 | 	sub	fp, #260
145f8     A7 34 02 F1 | 	add	local08, fp
145fc     1A 13 02 FB | 	rdlong	arg01, local08
14600     00 14 06 F6 | 	mov	arg02, #0
14604     2C 4E 85 F1 | 	sub	fp, #44
14608     18 56 B1 FD | 	call	#__system____builtin_atoi
1460c     FD 14 02 F6 | 	mov	arg02, result1
14610     22 13 02 F6 | 	mov	arg01, local16
14614     18 E9 B0 FD | 	call	#_psdpoke
14618                 | LR__1646
14618                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
14618     18 4E 05 F1 | 	add	fp, #24
1461c     A7 44 02 FB | 	rdlong	local16, fp
14620     18 4E 85 F1 | 	sub	fp, #24
14624     01 44 0E F2 | 	cmp	local16, #1 wz
14628     54 00 90 5D |  if_ne	jmp	#LR__1647
1462c     52 00 00 FF 
14630     10 E5 05 F1 | 	add	objptr, ##42256
14634     F2 42 02 FB | 	rdlong	local15, objptr
14638     52 00 00 FF 
1463c     10 E5 85 F1 | 	sub	objptr, ##42256
14640     2B 42 0E F2 | 	cmp	local15, #43 wz
14644     38 00 90 AD |  if_e	jmp	#LR__1647
14648     1C 4E 05 F1 | 	add	fp, #28
1464c     A7 44 02 FB | 	rdlong	local16, fp
14650     14 4F 05 F1 | 	add	fp, #276
14654     A7 34 02 FB | 	rdlong	local08, fp
14658     02 34 66 F0 | 	shl	local08, #2
1465c     04 4F 85 F1 | 	sub	fp, #260
14660     A7 34 02 F1 | 	add	local08, fp
14664     1A 13 02 FB | 	rdlong	arg01, local08
14668     00 14 06 F6 | 	mov	arg02, #0
1466c     2C 4E 85 F1 | 	sub	fp, #44
14670     B0 55 B1 FD | 	call	#__system____builtin_atoi
14674     FD 14 02 F6 | 	mov	arg02, result1
14678     22 13 02 F6 | 	mov	arg01, local16
1467c     F8 E8 B0 FD | 	call	#_pspoke
14680                 | LR__1647
14680                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14680     18 4E 05 F1 | 	add	fp, #24
14684     A7 44 02 FB | 	rdlong	local16, fp
14688     18 4E 85 F1 | 	sub	fp, #24
1468c     06 44 0E F2 | 	cmp	local16, #6 wz
14690     64 00 90 5D |  if_ne	jmp	#LR__1648
14694     52 00 00 FF 
14698     10 E5 05 F1 | 	add	objptr, ##42256
1469c     F2 42 02 FB | 	rdlong	local15, objptr
146a0     52 00 00 FF 
146a4     10 E5 85 F1 | 	sub	objptr, ##42256
146a8     2B 42 0E F2 | 	cmp	local15, #43 wz
146ac     48 00 90 AD |  if_e	jmp	#LR__1648
146b0     30 4F 05 F1 | 	add	fp, #304
146b4     A7 32 02 FB | 	rdlong	local07, fp
146b8     02 32 66 F0 | 	shl	local07, #2
146bc     04 4F 85 F1 | 	sub	fp, #260
146c0     A7 32 02 F1 | 	add	local07, fp
146c4     19 13 02 FB | 	rdlong	arg01, local07
146c8     2C 4E 85 F1 | 	sub	fp, #44
146cc     E8 56 B1 FD | 	call	#__system____builtin_atof
146d0     28 4E 05 F1 | 	add	fp, #40
146d4     A7 FA 61 FC | 	wrlong	result1, fp
146d8     0C 4E 85 F1 | 	sub	fp, #12
146dc     A7 44 02 FB | 	rdlong	local16, fp
146e0     0C 4E 05 F1 | 	add	fp, #12
146e4     A7 12 02 F6 | 	mov	arg01, fp
146e8     28 4E 85 F1 | 	sub	fp, #40
146ec     09 15 02 FB | 	rdlong	arg02, arg01
146f0     22 13 02 F6 | 	mov	arg01, local16
146f4     F0 E7 B0 FD | 	call	#_pslpoke
146f8                 | LR__1648
146f8     30 4F 05 F1 | 	add	fp, #304
146fc     A7 42 02 FB | 	rdlong	local15, fp
14700     01 42 06 F1 | 	add	local15, #1
14704     A7 42 62 FC | 	wrlong	local15, fp
14708     30 4F 85 F1 | 	sub	fp, #304
1470c     E4 F6 9F FD | 	jmp	#LR__1613
14710                 | LR__1649
14710                 | LR__1650
14710     A7 F0 03 F6 | 	mov	ptra, fp
14714     B2 00 A0 FD | 	call	#popregs_
14718                 | _do_input_ret
14718     2D 00 64 FD | 	ret
1471c                 | 
1471c                 | ' 
1471c                 | ' ' ----------------  left$
1471c                 | ' 
1471c                 | ' sub do_left
1471c                 | _do_left
1471c     00 4A 05 F6 | 	mov	COUNT_, #0
14720     A8 00 A0 FD | 	call	#pushregs_
14724     14 F0 07 F1 | 	add	ptra, #20
14728     4A 00 00 FF 
1472c     80 E4 05 F1 | 	add	objptr, ##38016
14730     F2 16 02 FB | 	rdlong	arg03, objptr
14734     0B 15 02 F6 | 	mov	arg02, arg03
14738     01 14 66 F0 | 	shl	arg02, #1
1473c     0B 15 02 F1 | 	add	arg02, arg03
14740     02 14 66 F0 | 	shl	arg02, #2
14744     03 00 00 FF 
14748     04 E4 85 F1 | 	sub	objptr, ##1540
1474c     F2 14 02 F1 | 	add	arg02, objptr
14750     0A 17 02 FB | 	rdlong	arg03, arg02
14754     0C 4E 05 F1 | 	add	fp, #12
14758     A7 16 62 FC | 	wrlong	arg03, fp
1475c                 | ' 
1475c                 | ' numpar=compiledline(lineptr_e).result.uresult
1475c                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
1475c     0C 4E 85 F1 | 	sub	fp, #12
14760     02 16 0E F2 | 	cmp	arg03, #2 wz
14764     47 00 00 FF 
14768     7C E4 85 F1 | 	sub	objptr, ##36476
1476c     40 00 90 AD |  if_e	jmp	#LR__1660
14770     00 12 06 F6 | 	mov	arg01, #0
14774     E4 7C B1 FD | 	call	#__system___getiolock_0603
14778     FD 12 02 F6 | 	mov	arg01, result1
1477c     B4 1F B1 FD | 	call	#__system___lockmem
14780     B6 01 00 FF 
14784     41 14 06 F6 | 	mov	arg02, ##@LR__5906
14788     00 12 06 F6 | 	mov	arg01, #0
1478c     00 16 06 F6 | 	mov	arg03, #0
14790     94 2C B1 FD | 	call	#__system___basic_print_string
14794     00 12 06 F6 | 	mov	arg01, #0
14798     C0 7C B1 FD | 	call	#__system___getiolock_0603
1479c     FD 00 68 FC | 	wrlong	#0, result1
147a0     27 12 06 F6 | 	mov	arg01, #39
147a4     00 14 06 F6 | 	mov	arg02, #0
147a8     9C E5 B0 FD | 	call	#_printerror
147ac     EC 00 90 FD | 	jmp	#LR__1663
147b0                 | LR__1660
147b0     A0 8D BF FD | 	call	#_pop
147b4     FF 16 02 F6 | 	mov	arg03, result3
147b8     A7 FA 61 FC | 	wrlong	result1, fp
147bc     04 4E 05 F1 | 	add	fp, #4
147c0     A7 FC 61 FC | 	wrlong	result2, fp
147c4     04 4E 05 F1 | 	add	fp, #4
147c8     A7 16 62 FC | 	wrlong	arg03, fp
147cc     08 4E 85 F1 | 	sub	fp, #8
147d0     A7 12 02 F6 | 	mov	arg01, fp
147d4     60 8F BF FD | 	call	#_converttoint
147d8     FD 16 02 F6 | 	mov	arg03, result1
147dc     10 4E 05 F1 | 	add	fp, #16
147e0     A7 16 62 FC | 	wrlong	arg03, fp
147e4     10 4E 85 F1 | 	sub	fp, #16
147e8     68 8D BF FD | 	call	#_pop
147ec     FF 16 02 F6 | 	mov	arg03, result3
147f0     A7 FA 61 FC | 	wrlong	result1, fp
147f4     04 4E 05 F1 | 	add	fp, #4
147f8     A7 FC 61 FC | 	wrlong	result2, fp
147fc     04 4E 05 F1 | 	add	fp, #4
14800     A7 16 62 FC | 	wrlong	arg03, fp
14804                 | ' t1=pop() : arg=converttoint(t1)
14804                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14804     08 4E 85 F1 | 	sub	fp, #8
14808     2B 16 0E F2 | 	cmp	arg03, #43 wz
1480c     18 00 90 5D |  if_ne	jmp	#LR__1661
14810     A7 12 02 FB | 	rdlong	arg01, fp
14814     B4 8E BF FD | 	call	#_convertstring
14818     A7 FA 61 FC | 	wrlong	result1, fp
1481c     08 4E 05 F1 | 	add	fp, #8
14820     A7 3E 68 FC | 	wrlong	#31, fp
14824     08 4E 85 F1 | 	sub	fp, #8
14828                 | LR__1661
14828                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
14828     08 4E 05 F1 | 	add	fp, #8
1482c     A7 16 02 FB | 	rdlong	arg03, fp
14830     08 4E 85 F1 | 	sub	fp, #8
14834     1F 16 0E F2 | 	cmp	arg03, #31 wz
14838     40 00 90 AD |  if_e	jmp	#LR__1662
1483c     00 12 06 F6 | 	mov	arg01, #0
14840     18 7C B1 FD | 	call	#__system___getiolock_0603
14844     FD 12 02 F6 | 	mov	arg01, result1
14848     E8 1E B1 FD | 	call	#__system___lockmem
1484c     B6 01 00 FF 
14850     49 14 06 F6 | 	mov	arg02, ##@LR__5907
14854     00 12 06 F6 | 	mov	arg01, #0
14858     00 16 06 F6 | 	mov	arg03, #0
1485c     C8 2B B1 FD | 	call	#__system___basic_print_string
14860     00 12 06 F6 | 	mov	arg01, #0
14864     F4 7B B1 FD | 	call	#__system___getiolock_0603
14868     FD 00 68 FC | 	wrlong	#0, result1
1486c     0F 12 06 F6 | 	mov	arg01, #15
14870     00 14 06 F6 | 	mov	arg02, #0
14874     D0 E4 B0 FD | 	call	#_printerror
14878     20 00 90 FD | 	jmp	#LR__1663
1487c                 | LR__1662
1487c     A7 12 02 FB | 	rdlong	arg01, fp
14880     10 4E 05 F1 | 	add	fp, #16
14884     A7 14 02 FB | 	rdlong	arg02, fp
14888     10 4E 85 F1 | 	sub	fp, #16
1488c     20 3F B1 FD | 	call	#__system__Left_S
14890     A7 FA 61 FC | 	wrlong	result1, fp
14894     A7 12 02 F6 | 	mov	arg01, fp
14898     50 8D BF FD | 	call	#_push
1489c                 | LR__1663
1489c     A7 F0 03 F6 | 	mov	ptra, fp
148a0     B2 00 A0 FD | 	call	#popregs_
148a4                 | _do_left_ret
148a4     2D 00 64 FD | 	ret
148a8                 | 
148a8                 | ' 
148a8                 | ' ' ----------------  len
148a8                 | ' 
148a8                 | ' sub do_len
148a8                 | _do_len
148a8     02 4A 05 F6 | 	mov	COUNT_, #2
148ac     A8 00 A0 FD | 	call	#pushregs_
148b0     14 F0 07 F1 | 	add	ptra, #20
148b4     4A 00 00 FF 
148b8     80 E4 05 F1 | 	add	objptr, ##38016
148bc     F2 26 02 FB | 	rdlong	local01, objptr
148c0     13 17 02 F6 | 	mov	arg03, local01
148c4     01 16 66 F0 | 	shl	arg03, #1
148c8     13 17 02 F1 | 	add	arg03, local01
148cc     02 16 66 F0 | 	shl	arg03, #2
148d0     03 00 00 FF 
148d4     04 E4 85 F1 | 	sub	objptr, ##1540
148d8     F2 16 02 F1 | 	add	arg03, objptr
148dc     0B 17 02 FB | 	rdlong	arg03, arg03
148e0     0C 4E 05 F1 | 	add	fp, #12
148e4     A7 16 62 FC | 	wrlong	arg03, fp
148e8                 | ' 
148e8                 | ' numpar=compiledline(lineptr_e).result.uresult
148e8                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
148e8     0C 4E 85 F1 | 	sub	fp, #12
148ec     02 16 16 F2 | 	cmp	arg03, #2 wc
148f0     47 00 00 FF 
148f4     7C E4 85 F1 | 	sub	objptr, ##36476
148f8     0C 4E 05 C1 |  if_b	add	fp, #12
148fc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
14900     0C 4E 85 C1 |  if_b	sub	fp, #12
14904     40 00 90 4D |  if_c_and_nz	jmp	#LR__1670
14908     00 12 06 F6 | 	mov	arg01, #0
1490c     4C 7B B1 FD | 	call	#__system___getiolock_0603
14910     FD 12 02 F6 | 	mov	arg01, result1
14914     1C 1E B1 FD | 	call	#__system___lockmem
14918     B6 01 00 FF 
1491c     51 14 06 F6 | 	mov	arg02, ##@LR__5908
14920     00 12 06 F6 | 	mov	arg01, #0
14924     00 16 06 F6 | 	mov	arg03, #0
14928     FC 2A B1 FD | 	call	#__system___basic_print_string
1492c     00 12 06 F6 | 	mov	arg01, #0
14930     28 7B B1 FD | 	call	#__system___getiolock_0603
14934     FD 00 68 FC | 	wrlong	#0, result1
14938     27 12 06 F6 | 	mov	arg01, #39
1493c     00 14 06 F6 | 	mov	arg02, #0
14940     04 E4 B0 FD | 	call	#_printerror
14944     C8 00 90 FD | 	jmp	#LR__1675
14948                 | LR__1670
14948     08 8C BF FD | 	call	#_pop
1494c     FF 16 02 F6 | 	mov	arg03, result3
14950     A7 FA 61 FC | 	wrlong	result1, fp
14954     04 4E 05 F1 | 	add	fp, #4
14958     A7 FC 61 FC | 	wrlong	result2, fp
1495c     04 4E 05 F1 | 	add	fp, #4
14960     A7 16 62 FC | 	wrlong	arg03, fp
14964                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14964     08 4E 85 F1 | 	sub	fp, #8
14968     2B 16 0E F2 | 	cmp	arg03, #43 wz
1496c     18 00 90 5D |  if_ne	jmp	#LR__1671
14970     A7 12 02 FB | 	rdlong	arg01, fp
14974     54 8D BF FD | 	call	#_convertstring
14978     A7 FA 61 FC | 	wrlong	result1, fp
1497c     08 4E 05 F1 | 	add	fp, #8
14980     A7 3E 68 FC | 	wrlong	#31, fp
14984     08 4E 85 F1 | 	sub	fp, #8
14988                 | LR__1671
14988                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
14988     08 4E 05 F1 | 	add	fp, #8
1498c     A7 16 02 FB | 	rdlong	arg03, fp
14990     08 4E 85 F1 | 	sub	fp, #8
14994     1F 16 0E F2 | 	cmp	arg03, #31 wz
14998     40 00 90 AD |  if_e	jmp	#LR__1672
1499c     00 12 06 F6 | 	mov	arg01, #0
149a0     B8 7A B1 FD | 	call	#__system___getiolock_0603
149a4     FD 12 02 F6 | 	mov	arg01, result1
149a8     88 1D B1 FD | 	call	#__system___lockmem
149ac     B6 01 00 FF 
149b0     57 14 06 F6 | 	mov	arg02, ##@LR__5909
149b4     00 12 06 F6 | 	mov	arg01, #0
149b8     00 16 06 F6 | 	mov	arg03, #0
149bc     68 2A B1 FD | 	call	#__system___basic_print_string
149c0     00 12 06 F6 | 	mov	arg01, #0
149c4     94 7A B1 FD | 	call	#__system___getiolock_0603
149c8     FD 00 68 FC | 	wrlong	#0, result1
149cc     0F 12 06 F6 | 	mov	arg01, #15
149d0     00 14 06 F6 | 	mov	arg02, #0
149d4     70 E3 B0 FD | 	call	#_printerror
149d8     34 00 90 FD | 	jmp	#LR__1675
149dc                 | LR__1672
149dc     A7 12 02 FB | 	rdlong	arg01, fp
149e0     09 29 02 F6 | 	mov	local02, arg01
149e4     97 06 48 FB | 	callpa	#(@LR__1674-@LR__1673)>>2,fcache_load_ptr_
149e8                 | LR__1673
149e8     14 FB C9 FA | 	rdbyte	result1, local02 wz
149ec     01 28 06 51 |  if_ne	add	local02, #1
149f0     F4 FF 9F 5D |  if_ne	jmp	#LR__1673
149f4                 | LR__1674
149f4     09 29 82 F1 | 	sub	local02, arg01
149f8     A7 28 62 FC | 	wrlong	local02, fp
149fc     08 4E 05 F1 | 	add	fp, #8
14a00     A7 38 68 FC | 	wrlong	#28, fp
14a04     08 4E 85 F1 | 	sub	fp, #8
14a08     A7 12 02 F6 | 	mov	arg01, fp
14a0c     DC 8B BF FD | 	call	#_push
14a10                 | LR__1675
14a10     A7 F0 03 F6 | 	mov	ptra, fp
14a14     B2 00 A0 FD | 	call	#popregs_
14a18                 | _do_len_ret
14a18     2D 00 64 FD | 	ret
14a1c                 | 
14a1c                 | ' 
14a1c                 | ' ' ----------------  list
14a1c                 | ' 
14a1c                 | ' sub do_list
14a1c                 | _do_list
14a1c     02 4A 05 F6 | 	mov	COUNT_, #2
14a20     A8 00 A0 FD | 	call	#pushregs_
14a24     B8 F0 07 F1 | 	add	ptra, #184
14a28     04 4E 05 F1 | 	add	fp, #4
14a2c     A7 00 68 FC | 	wrlong	#0, fp
14a30     04 4E 05 F1 | 	add	fp, #4
14a34     FF FF BF FF 
14a38     A7 FE 6B FC | 	wrlong	##2147483647, fp
14a3c     08 4E 85 F1 | 	sub	fp, #8
14a40     4A 00 00 FF 
14a44     80 E4 05 F1 | 	add	objptr, ##38016
14a48     F2 26 02 FB | 	rdlong	local01, objptr
14a4c     13 17 02 F6 | 	mov	arg03, local01
14a50     01 16 66 F0 | 	shl	arg03, #1
14a54     13 17 02 F1 | 	add	arg03, local01
14a58     02 16 66 F0 | 	shl	arg03, #2
14a5c     03 00 00 FF 
14a60     04 E4 85 F1 | 	sub	objptr, ##1540
14a64     F2 16 02 F1 | 	add	arg03, objptr
14a68     0B 17 02 FB | 	rdlong	arg03, arg03
14a6c     A7 16 62 FC | 	wrlong	arg03, fp
14a70                 | ' 
14a70                 | ' startline=0 : endline=$7FFFFFFF
14a70                 | ' numpar=compiledline(lineptr_e).result.uresult
14a70                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
14a70     01 16 0E F2 | 	cmp	arg03, #1 wz
14a74     47 00 00 FF 
14a78     7C E4 85 F1 | 	sub	objptr, ##36476
14a7c     3C 00 90 5D |  if_ne	jmp	#LR__1680
14a80     D0 8A BF FD | 	call	#_pop
14a84     FF 26 02 F6 | 	mov	local01, result3
14a88     0C 4E 05 F1 | 	add	fp, #12
14a8c     A7 FA 61 FC | 	wrlong	result1, fp
14a90     04 4E 05 F1 | 	add	fp, #4
14a94     A7 FC 61 FC | 	wrlong	result2, fp
14a98     04 4E 05 F1 | 	add	fp, #4
14a9c     A7 26 62 FC | 	wrlong	local01, fp
14aa0     08 4E 85 F1 | 	sub	fp, #8
14aa4     A7 12 02 F6 | 	mov	arg01, fp
14aa8     0C 4E 85 F1 | 	sub	fp, #12
14aac     88 8C BF FD | 	call	#_converttoint
14ab0     04 4E 05 F1 | 	add	fp, #4
14ab4     A7 FA 61 FC | 	wrlong	result1, fp
14ab8     04 4E 85 F1 | 	sub	fp, #4
14abc                 | LR__1680
14abc                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
14abc     A7 16 02 FB | 	rdlong	arg03, fp
14ac0     02 16 0E F2 | 	cmp	arg03, #2 wz
14ac4     7C 00 90 5D |  if_ne	jmp	#LR__1681
14ac8     88 8A BF FD | 	call	#_pop
14acc     FF 26 02 F6 | 	mov	local01, result3
14ad0     0C 4E 05 F1 | 	add	fp, #12
14ad4     A7 FA 61 FC | 	wrlong	result1, fp
14ad8     04 4E 05 F1 | 	add	fp, #4
14adc     A7 FC 61 FC | 	wrlong	result2, fp
14ae0     04 4E 05 F1 | 	add	fp, #4
14ae4     A7 26 62 FC | 	wrlong	local01, fp
14ae8     08 4E 85 F1 | 	sub	fp, #8
14aec     A7 12 02 F6 | 	mov	arg01, fp
14af0     0C 4E 85 F1 | 	sub	fp, #12
14af4     40 8C BF FD | 	call	#_converttoint
14af8     FD 26 02 F6 | 	mov	local01, result1
14afc     08 4E 05 F1 | 	add	fp, #8
14b00     A7 26 62 FC | 	wrlong	local01, fp
14b04     08 4E 85 F1 | 	sub	fp, #8
14b08     48 8A BF FD | 	call	#_pop
14b0c     FF 26 02 F6 | 	mov	local01, result3
14b10     0C 4E 05 F1 | 	add	fp, #12
14b14     A7 FA 61 FC | 	wrlong	result1, fp
14b18     04 4E 05 F1 | 	add	fp, #4
14b1c     A7 FC 61 FC | 	wrlong	result2, fp
14b20     04 4E 05 F1 | 	add	fp, #4
14b24     A7 26 62 FC | 	wrlong	local01, fp
14b28     08 4E 85 F1 | 	sub	fp, #8
14b2c     A7 12 02 F6 | 	mov	arg01, fp
14b30     0C 4E 85 F1 | 	sub	fp, #12
14b34     00 8C BF FD | 	call	#_converttoint
14b38     04 4E 05 F1 | 	add	fp, #4
14b3c     A7 FA 61 FC | 	wrlong	result1, fp
14b40     04 4E 85 F1 | 	sub	fp, #4
14b44                 | LR__1681
14b44                 | ' 
14b44                 | ' 
14b44                 | ' print
14b44     00 12 06 F6 | 	mov	arg01, #0
14b48     10 79 B1 FD | 	call	#__system___getiolock_0603
14b4c     FD 12 02 F6 | 	mov	arg01, result1
14b50     E0 1B B1 FD | 	call	#__system___lockmem
14b54     00 12 06 F6 | 	mov	arg01, #0
14b58     0A 14 06 F6 | 	mov	arg02, #10
14b5c     00 16 06 F6 | 	mov	arg03, #0
14b60     6C 28 B1 FD | 	call	#__system___basic_print_char
14b64     00 12 06 F6 | 	mov	arg01, #0
14b68     F0 78 B1 FD | 	call	#__system___getiolock_0603
14b6c     FD 00 68 FC | 	wrlong	#0, result1
14b70     4A 00 00 FF 
14b74     88 E4 05 F1 | 	add	objptr, ##38024
14b78     F2 28 02 FB | 	rdlong	local02, objptr
14b7c     08 00 00 FF 
14b80     94 E4 05 F1 | 	add	objptr, ##4244
14b84     F2 28 62 FC | 	wrlong	local02, objptr
14b88     52 00 00 FF 
14b8c     1C E5 85 F1 | 	sub	objptr, ##42268
14b90                 | ' do 
14b90                 | LR__1682
14b90     20 4E 05 F1 | 	add	fp, #32
14b94     A7 12 02 F6 | 	mov	arg01, fp
14b98     20 4E 85 F1 | 	sub	fp, #32
14b9c     52 00 00 FF 
14ba0     1C E5 05 F1 | 	add	objptr, ##42268
14ba4     F2 14 02 FB | 	rdlong	arg02, objptr
14ba8     18 16 06 F6 | 	mov	arg03, #24
14bac     47 00 00 FF 
14bb0     50 E4 85 F1 | 	sub	objptr, ##36432
14bb4     F4 0E B1 FD | 	call	#_psram_spin2_read1
14bb8     0B 00 00 FF 
14bbc     CC E4 85 F1 | 	sub	objptr, ##5836
14bc0                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
14bc0                 | '   
14bc0                 | '   if header(0)<> $FFFFFFFF then
14bc0     20 4E 05 F1 | 	add	fp, #32
14bc4     A7 28 02 FB | 	rdlong	local02, fp
14bc8     20 4E 85 F1 | 	sub	fp, #32
14bcc     FF FF 7F FF 
14bd0     FF 29 0E F2 | 	cmp	local02, ##-1 wz
14bd4     A8 00 90 AD |  if_e	jmp	#LR__1684
14bd8     38 4E 05 F1 | 	add	fp, #56
14bdc     3F 16 06 F6 | 	mov	arg03, #63
14be0     28 16 62 FD | 	setq	arg03
14be4     A7 00 68 FC | 	wrlong	#0, fp
14be8     A7 12 02 F6 | 	mov	arg01, fp
14bec     10 4E 85 F1 | 	sub	fp, #16
14bf0     A7 14 02 FB | 	rdlong	arg02, fp
14bf4     04 4E 05 F1 | 	add	fp, #4
14bf8     A7 16 02 FB | 	rdlong	arg03, fp
14bfc     2C 4E 85 F1 | 	sub	fp, #44
14c00     0B 00 00 FF 
14c04     CC E4 05 F1 | 	add	objptr, ##5836
14c08     A0 0E B1 FD | 	call	#_psram_spin2_read1
14c0c     0B 00 00 FF 
14c10     CC E4 85 F1 | 	sub	objptr, ##5836
14c14                 | '     longfill(linebuf,0,64)
14c14                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14c14                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14c14     20 4E 05 F1 | 	add	fp, #32
14c18     A7 28 02 FB | 	rdlong	local02, fp
14c1c     1C 4E 85 F1 | 	sub	fp, #28
14c20     A7 26 02 FB | 	rdlong	local01, fp
14c24     04 4E 85 F1 | 	sub	fp, #4
14c28     13 29 52 F2 | 	cmps	local02, local01 wc
14c2c     30 00 90 CD |  if_b	jmp	#LR__1683
14c30     20 4E 05 F1 | 	add	fp, #32
14c34     A7 28 02 FB | 	rdlong	local02, fp
14c38     18 4E 85 F1 | 	sub	fp, #24
14c3c     A7 16 02 FB | 	rdlong	arg03, fp
14c40     08 4E 85 F1 | 	sub	fp, #8
14c44     0B 29 5A F2 | 	cmps	local02, arg03 wcz
14c48     14 00 90 1D |  if_a	jmp	#LR__1683
14c4c     38 4E 05 F1 | 	add	fp, #56
14c50     A7 12 02 F6 | 	mov	arg01, fp
14c54     38 4E 85 F1 | 	sub	fp, #56
14c58                 | ' 
14c58                 | ' write(text)
14c58     14 02 B1 FD | 	call	#_hg010b_spin2_write
14c5c                 | ' crlf
14c5c     10 07 B1 FD | 	call	#_hg010b_spin2_crlf
14c60                 | LR__1683
14c60     34 4E 05 F1 | 	add	fp, #52
14c64     A7 28 02 FB | 	rdlong	local02, fp
14c68     34 4E 85 F1 | 	sub	fp, #52
14c6c     52 00 00 FF 
14c70     1C E5 05 F1 | 	add	objptr, ##42268
14c74     F2 28 62 FC | 	wrlong	local02, objptr
14c78     52 00 00 FF 
14c7c     1C E5 85 F1 | 	sub	objptr, ##42268
14c80                 | LR__1684
14c80     34 4E 05 F1 | 	add	fp, #52
14c84     A7 28 02 FB | 	rdlong	local02, fp
14c88     34 4E 85 F1 | 	sub	fp, #52
14c8c     FF FF 3F FF 
14c90     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
14c94     20 4E 05 51 |  if_ne	add	fp, #32
14c98     A7 26 02 5B |  if_ne	rdlong	local01, fp
14c9c     20 4E 85 51 |  if_ne	sub	fp, #32
14ca0     FF FF 7F 5F 
14ca4     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
14ca8     E4 FE 9F 5D |  if_ne	jmp	#LR__1682
14cac     A7 F0 03 F6 | 	mov	ptra, fp
14cb0     B2 00 A0 FD | 	call	#popregs_
14cb4                 | _do_list_ret
14cb4     2D 00 64 FD | 	ret
14cb8                 | 
14cb8                 | ' 
14cb8                 | ' '-------------------- load
14cb8                 | ' 
14cb8                 | ' sub do_load(amode=0 as integer)  
14cb8                 | _do_load
14cb8     01 4A 05 F6 | 	mov	COUNT_, #1
14cbc     A8 00 A0 FD | 	call	#pushregs_
14cc0     AC F0 07 F1 | 	add	ptra, #172
14cc4     A7 12 62 FC | 	wrlong	arg01, fp
14cc8     52 00 00 FF 
14ccc     D4 E4 05 F1 | 	add	objptr, ##42196
14cd0     F2 02 68 FC | 	wrlong	#1, objptr
14cd4     08 00 00 FF 
14cd8     54 E4 85 F1 | 	sub	objptr, ##4180
14cdc     F2 14 02 FB | 	rdlong	arg02, objptr
14ce0     0A 13 02 F6 | 	mov	arg01, arg02
14ce4     01 12 66 F0 | 	shl	arg01, #1
14ce8     0A 13 02 F1 | 	add	arg01, arg02
14cec     02 12 66 F0 | 	shl	arg01, #2
14cf0     03 00 00 FF 
14cf4     04 E4 85 F1 | 	sub	objptr, ##1540
14cf8     F2 12 02 F1 | 	add	arg01, objptr
14cfc     09 15 02 FB | 	rdlong	arg02, arg01
14d00     1C 4E 05 F1 | 	add	fp, #28
14d04     A7 14 62 FC | 	wrlong	arg02, fp
14d08     8C 4E 05 F1 | 	add	fp, #140
14d0c     A7 12 02 F6 | 	mov	arg01, fp
14d10     47 00 00 FF 
14d14     7C E4 85 F1 | 	sub	objptr, ##36476
14d18     80 4E 85 F1 | 	sub	fp, #128
14d1c     09 4F 61 FC | 	wrlong	fp, arg01
14d20                 | ' 
14d20                 | ' inload=1
14d20                 | ' numpar=compiledline(lineptr_e).result.uresult
14d20                 | ' lpoke varptr(line2$),varptr(line2)
14d20                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
14d20     0C 4E 85 F1 | 	sub	fp, #12
14d24     A7 26 02 FB | 	rdlong	local01, fp
14d28     1C 4E 85 F1 | 	sub	fp, #28
14d2c     01 26 56 F2 | 	cmps	local01, #1 wc
14d30     24 00 90 CD |  if_b	jmp	#LR__1690
14d34     1C 88 BF FD | 	call	#_pop
14d38     04 4E 05 F1 | 	add	fp, #4
14d3c     A7 FA 61 FC | 	wrlong	result1, fp
14d40     04 4E 05 F1 | 	add	fp, #4
14d44     A7 FC 61 FC | 	wrlong	result2, fp
14d48     04 4E 05 F1 | 	add	fp, #4
14d4c     A7 FE 61 FC | 	wrlong	result3, fp
14d50     0C 4E 85 F1 | 	sub	fp, #12
14d54     28 00 90 FD | 	jmp	#LR__1691
14d58                 | LR__1690
14d58     52 00 00 FF 
14d5c     C4 E4 05 F1 | 	add	objptr, ##42180
14d60     F2 26 02 FB | 	rdlong	local01, objptr
14d64     52 00 00 FF 
14d68     C4 E4 85 F1 | 	sub	objptr, ##42180
14d6c     04 4E 05 F1 | 	add	fp, #4
14d70     A7 26 62 FC | 	wrlong	local01, fp
14d74     08 4E 05 F1 | 	add	fp, #8
14d78     A7 3E 68 FC | 	wrlong	#31, fp
14d7c     0C 4E 85 F1 | 	sub	fp, #12
14d80                 | LR__1691
14d80                 | ' 'print "popped "; t1.result.uresult, t1.result_type
14d80                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
14d80     0C 4E 05 F1 | 	add	fp, #12
14d84     A7 26 02 FB | 	rdlong	local01, fp
14d88     0C 4E 85 F1 | 	sub	fp, #12
14d8c     2B 26 0E F2 | 	cmp	local01, #43 wz
14d90     24 00 90 5D |  if_ne	jmp	#LR__1692
14d94     04 4E 05 F1 | 	add	fp, #4
14d98     A7 12 02 FB | 	rdlong	arg01, fp
14d9c     04 4E 85 F1 | 	sub	fp, #4
14da0     28 89 BF FD | 	call	#_convertstring
14da4     04 4E 05 F1 | 	add	fp, #4
14da8     A7 FA 61 FC | 	wrlong	result1, fp
14dac     08 4E 05 F1 | 	add	fp, #8
14db0     A7 3E 68 FC | 	wrlong	#31, fp
14db4     0C 4E 85 F1 | 	sub	fp, #12
14db8                 | LR__1692
14db8                 | ' if t1.result_type=result_string then
14db8     0C 4E 05 F1 | 	add	fp, #12
14dbc     A7 26 02 FB | 	rdlong	local01, fp
14dc0     0C 4E 85 F1 | 	sub	fp, #12
14dc4     1F 26 0E F2 | 	cmp	local01, #31 wz
14dc8     E0 02 90 5D |  if_ne	jmp	#LR__1698
14dcc                 | '   if amode<>1234 then do_new
14dcc     A7 26 02 FB | 	rdlong	local01, fp
14dd0     02 00 00 FF 
14dd4     D2 26 0E F2 | 	cmp	local01, ##1234 wz
14dd8     08 0E B0 5D |  if_ne	call	#_do_new
14ddc                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
14ddc     04 4E 05 F1 | 	add	fp, #4
14de0     A7 12 02 FB | 	rdlong	arg01, fp
14de4     04 4E 85 F1 | 	sub	fp, #4
14de8     B6 01 00 FF 
14dec     5D 14 06 F6 | 	mov	arg02, ##@LR__5910
14df0     68 19 B1 FD | 	call	#__system___string_cmp
14df4     00 FA 0D F2 | 	cmp	result1, #0 wz
14df8     24 00 90 5D |  if_ne	jmp	#LR__1693
14dfc     52 00 00 FF 
14e00     C4 E4 05 F1 | 	add	objptr, ##42180
14e04     F2 26 02 FB | 	rdlong	local01, objptr
14e08     52 00 00 FF 
14e0c     C4 E4 85 F1 | 	sub	objptr, ##42180
14e10     04 4E 05 F1 | 	add	fp, #4
14e14     A7 26 62 FC | 	wrlong	local01, fp
14e18     04 4E 85 F1 | 	sub	fp, #4
14e1c     20 00 90 FD | 	jmp	#LR__1694
14e20                 | LR__1693
14e20     04 4E 05 F1 | 	add	fp, #4
14e24     A7 26 02 FB | 	rdlong	local01, fp
14e28     04 4E 85 F1 | 	sub	fp, #4
14e2c     52 00 00 FF 
14e30     C4 E4 05 F1 | 	add	objptr, ##42180
14e34     F2 26 62 FC | 	wrlong	local01, objptr
14e38     52 00 00 FF 
14e3c     C4 E4 85 F1 | 	sub	objptr, ##42180
14e40                 | LR__1694
14e40                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
14e40     09 12 06 F6 | 	mov	arg01, #9
14e44     44 6C B1 FD | 	call	#__system__close
14e48     09 26 06 F6 | 	mov	local01, #9
14e4c     4A 00 00 FF 
14e50     94 E4 05 F1 | 	add	objptr, ##38036
14e54     F2 12 02 FB | 	rdlong	arg01, objptr
14e58     4A 00 00 FF 
14e5c     94 E4 85 F1 | 	sub	objptr, ##38036
14e60     B6 01 00 FF 
14e64     5E 14 06 F6 | 	mov	arg02, ##@LR__5911
14e68     24 19 B1 FD | 	call	#__system___string_concat
14e6c     FD 12 02 F6 | 	mov	arg01, result1
14e70     04 4E 05 F1 | 	add	fp, #4
14e74     A7 14 02 FB | 	rdlong	arg02, fp
14e78     04 4E 85 F1 | 	sub	fp, #4
14e7c     10 19 B1 FD | 	call	#__system___string_concat
14e80     FD 14 02 F6 | 	mov	arg02, result1
14e84     13 13 02 F6 | 	mov	arg01, local01
14e88     00 16 06 F6 | 	mov	arg03, #0
14e8c     A8 24 B1 FD | 	call	#__system___basic_open_string
14e90     20 E6 05 F1 | 	add	ptr___system__dat__, #32
14e94     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
14e98     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
14e9c     14 4E 05 F1 | 	add	fp, #20
14ea0     A7 FA 61 FC | 	wrlong	result1, fp
14ea4                 | '   r=geterr() 
14ea4                 | '   if r then 
14ea4     14 4E 85 F1 | 	sub	fp, #20
14ea8     50 01 90 AD |  if_e	jmp	#LR__1696
14eac                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
14eac     09 12 06 F6 | 	mov	arg01, #9
14eb0     D8 6B B1 FD | 	call	#__system__close
14eb4     09 26 06 F6 | 	mov	local01, #9
14eb8     4A 00 00 FF 
14ebc     94 E4 05 F1 | 	add	objptr, ##38036
14ec0     F2 12 02 FB | 	rdlong	arg01, objptr
14ec4     4A 00 00 FF 
14ec8     94 E4 85 F1 | 	sub	objptr, ##38036
14ecc     B6 01 00 FF 
14ed0     60 14 06 F6 | 	mov	arg02, ##@LR__5912
14ed4     B8 18 B1 FD | 	call	#__system___string_concat
14ed8     FD 12 02 F6 | 	mov	arg01, result1
14edc     04 4E 05 F1 | 	add	fp, #4
14ee0     A7 14 02 FB | 	rdlong	arg02, fp
14ee4     04 4E 85 F1 | 	sub	fp, #4
14ee8     A4 18 B1 FD | 	call	#__system___string_concat
14eec     FD 12 02 F6 | 	mov	arg01, result1
14ef0     B6 01 00 FF 
14ef4     62 14 06 F6 | 	mov	arg02, ##@LR__5913
14ef8     94 18 B1 FD | 	call	#__system___string_concat
14efc     FD 14 02 F6 | 	mov	arg02, result1
14f00     13 13 02 F6 | 	mov	arg01, local01
14f04     00 16 06 F6 | 	mov	arg03, #0
14f08     2C 24 B1 FD | 	call	#__system___basic_open_string
14f0c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
14f10     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
14f14     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
14f18     14 4E 05 F1 | 	add	fp, #20
14f1c     A7 FA 61 FC | 	wrlong	result1, fp
14f20                 | '     r=geterr() 
14f20                 | '     if r then 
14f20     14 4E 85 F1 | 	sub	fp, #20
14f24     A0 00 90 AD |  if_e	jmp	#LR__1695
14f28                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
14f28     00 12 06 F6 | 	mov	arg01, #0
14f2c     2C 75 B1 FD | 	call	#__system___getiolock_0603
14f30     FD 12 02 F6 | 	mov	arg01, result1
14f34     FC 17 B1 FD | 	call	#__system___lockmem
14f38     B6 01 00 FF 
14f3c     67 14 06 F6 | 	mov	arg02, ##@LR__5914
14f40     00 12 06 F6 | 	mov	arg01, #0
14f44     00 16 06 F6 | 	mov	arg03, #0
14f48     DC 24 B1 FD | 	call	#__system___basic_print_string
14f4c     14 4E 05 F1 | 	add	fp, #20
14f50     A7 14 02 FB | 	rdlong	arg02, fp
14f54     14 4E 85 F1 | 	sub	fp, #20
14f58     00 12 06 F6 | 	mov	arg01, #0
14f5c     00 16 06 F6 | 	mov	arg03, #0
14f60     0A 18 06 F6 | 	mov	arg04, #10
14f64     04 25 B1 FD | 	call	#__system___basic_print_integer
14f68     B6 01 00 FF 
14f6c     75 14 06 F6 | 	mov	arg02, ##@LR__5915
14f70     00 12 06 F6 | 	mov	arg01, #0
14f74     00 16 06 F6 | 	mov	arg03, #0
14f78     AC 24 B1 FD | 	call	#__system___basic_print_string
14f7c     00 26 06 F6 | 	mov	local01, #0
14f80     14 4E 05 F1 | 	add	fp, #20
14f84     A7 12 02 FB | 	rdlong	arg01, fp
14f88     14 4E 85 F1 | 	sub	fp, #20
14f8c     30 41 B1 FD | 	call	#__system___strerror
14f90     FD 14 02 F6 | 	mov	arg02, result1
14f94     13 13 02 F6 | 	mov	arg01, local01
14f98     00 16 06 F6 | 	mov	arg03, #0
14f9c     88 24 B1 FD | 	call	#__system___basic_print_string
14fa0     00 12 06 F6 | 	mov	arg01, #0
14fa4     0A 14 06 F6 | 	mov	arg02, #10
14fa8     00 16 06 F6 | 	mov	arg03, #0
14fac     20 24 B1 FD | 	call	#__system___basic_print_char
14fb0     00 12 06 F6 | 	mov	arg01, #0
14fb4     A4 74 B1 FD | 	call	#__system___getiolock_0603
14fb8     FD 00 68 FC | 	wrlong	#0, result1
14fbc     09 12 06 F6 | 	mov	arg01, #9
14fc0     C8 6A B1 FD | 	call	#__system__close
14fc4     94 01 90 FD | 	jmp	#LR__1700
14fc8                 | LR__1695
14fc8     52 00 00 FF 
14fcc     C4 E4 05 F1 | 	add	objptr, ##42180
14fd0     F2 12 02 FB | 	rdlong	arg01, objptr
14fd4     52 00 00 FF 
14fd8     C4 E4 85 F1 | 	sub	objptr, ##42180
14fdc     B6 01 00 FF 
14fe0     78 14 06 F6 | 	mov	arg02, ##@LR__5916
14fe4     A8 17 B1 FD | 	call	#__system___string_concat
14fe8     52 00 00 FF 
14fec     C4 E4 05 F1 | 	add	objptr, ##42180
14ff0     F2 FA 61 FC | 	wrlong	result1, objptr
14ff4     52 00 00 FF 
14ff8     C4 E4 85 F1 | 	sub	objptr, ##42180
14ffc                 | LR__1696
14ffc                 | '   close #9: open currentdir$+"/"+loadname for input as #9
14ffc     09 12 06 F6 | 	mov	arg01, #9
15000     88 6A B1 FD | 	call	#__system__close
15004     09 26 06 F6 | 	mov	local01, #9
15008     4A 00 00 FF 
1500c     94 E4 05 F1 | 	add	objptr, ##38036
15010     F2 12 02 FB | 	rdlong	arg01, objptr
15014     4A 00 00 FF 
15018     94 E4 85 F1 | 	sub	objptr, ##38036
1501c     B6 01 00 FF 
15020     7D 14 06 F6 | 	mov	arg02, ##@LR__5917
15024     68 17 B1 FD | 	call	#__system___string_concat
15028     FD 12 02 F6 | 	mov	arg01, result1
1502c     52 00 00 FF 
15030     C4 E4 05 F1 | 	add	objptr, ##42180
15034     F2 14 02 FB | 	rdlong	arg02, objptr
15038     52 00 00 FF 
1503c     C4 E4 85 F1 | 	sub	objptr, ##42180
15040     4C 17 B1 FD | 	call	#__system___string_concat
15044     FD 14 02 F6 | 	mov	arg02, result1
15048     13 13 02 F6 | 	mov	arg01, local01
1504c     00 16 06 F6 | 	mov	arg03, #0
15050     E4 22 B1 FD | 	call	#__system___basic_open_string
15054                 | '   do
15054                 | LR__1697
15054     09 12 06 F6 | 	mov	arg01, #9
15058     E4 18 B1 FD | 	call	#__system___basic_read_line
1505c     FD 26 02 F6 | 	mov	local01, result1
15060     37 00 00 FF 
15064     1C E4 05 F1 | 	add	objptr, ##28188
15068     F2 26 62 FC | 	wrlong	local01, objptr
1506c     37 00 00 FF 
15070     1C E4 85 F1 | 	sub	objptr, ##28188
15074     B0 C7 BE FD | 	call	#_interpret
15078     37 00 00 FF 
1507c     1C E4 05 F1 | 	add	objptr, ##28188
15080     F2 12 02 FB | 	rdlong	arg01, objptr
15084     37 00 00 FF 
15088     1C E4 85 F1 | 	sub	objptr, ##28188
1508c     B6 01 00 FF 
15090     7F 14 06 F6 | 	mov	arg02, ##@LR__5918
15094     C4 16 B1 FD | 	call	#__system___string_cmp
15098     00 FA 0D F2 | 	cmp	result1, #0 wz
1509c     B4 FF 9F 5D |  if_ne	jmp	#LR__1697
150a0                 | '   close #9   
150a0     09 12 06 F6 | 	mov	arg01, #9
150a4     E4 69 B1 FD | 	call	#__system__close
150a8     0C 00 90 FD | 	jmp	#LR__1699
150ac                 | LR__1698
150ac     1E 12 06 F6 | 	mov	arg01, #30
150b0     00 14 06 F6 | 	mov	arg02, #0
150b4     90 DC B0 FD | 	call	#_printerror
150b8                 | LR__1699
150b8                 | ' print "Loaded ";currentdir$+"/"+loadname
150b8     00 12 06 F6 | 	mov	arg01, #0
150bc     9C 73 B1 FD | 	call	#__system___getiolock_0603
150c0     FD 12 02 F6 | 	mov	arg01, result1
150c4     6C 16 B1 FD | 	call	#__system___lockmem
150c8     B6 01 00 FF 
150cc     80 14 06 F6 | 	mov	arg02, ##@LR__5919
150d0     00 12 06 F6 | 	mov	arg01, #0
150d4     00 16 06 F6 | 	mov	arg03, #0
150d8     4C 23 B1 FD | 	call	#__system___basic_print_string
150dc     00 26 06 F6 | 	mov	local01, #0
150e0     4A 00 00 FF 
150e4     94 E4 05 F1 | 	add	objptr, ##38036
150e8     F2 12 02 FB | 	rdlong	arg01, objptr
150ec     4A 00 00 FF 
150f0     94 E4 85 F1 | 	sub	objptr, ##38036
150f4     B6 01 00 FF 
150f8     88 14 06 F6 | 	mov	arg02, ##@LR__5920
150fc     90 16 B1 FD | 	call	#__system___string_concat
15100     FD 12 02 F6 | 	mov	arg01, result1
15104     52 00 00 FF 
15108     C4 E4 05 F1 | 	add	objptr, ##42180
1510c     F2 14 02 FB | 	rdlong	arg02, objptr
15110     52 00 00 FF 
15114     C4 E4 85 F1 | 	sub	objptr, ##42180
15118     74 16 B1 FD | 	call	#__system___string_concat
1511c     FD 14 02 F6 | 	mov	arg02, result1
15120     13 13 02 F6 | 	mov	arg01, local01
15124     00 16 06 F6 | 	mov	arg03, #0
15128     FC 22 B1 FD | 	call	#__system___basic_print_string
1512c     00 12 06 F6 | 	mov	arg01, #0
15130     0A 14 06 F6 | 	mov	arg02, #10
15134     00 16 06 F6 | 	mov	arg03, #0
15138     94 22 B1 FD | 	call	#__system___basic_print_char
1513c     00 12 06 F6 | 	mov	arg01, #0
15140     18 73 B1 FD | 	call	#__system___getiolock_0603
15144     FD 00 68 FC | 	wrlong	#0, result1
15148     52 00 00 FF 
1514c     D4 E4 05 F1 | 	add	objptr, ##42196
15150     F2 00 68 FC | 	wrlong	#0, objptr
15154     52 00 00 FF 
15158     D4 E4 85 F1 | 	sub	objptr, ##42196
1515c                 | LR__1700
1515c     A7 F0 03 F6 | 	mov	ptra, fp
15160     B2 00 A0 FD | 	call	#popregs_
15164                 | _do_load_ret
15164     2D 00 64 FD | 	ret
15168                 | 
15168                 | ' 
15168                 | ' '-------------------- log
15168                 | ' 
15168                 | ' sub do_log
15168                 | _do_log
15168     01 4A 05 F6 | 	mov	COUNT_, #1
1516c     A8 00 A0 FD | 	call	#pushregs_
15170     14 F0 07 F1 | 	add	ptra, #20
15174     4A 00 00 FF 
15178     80 E4 05 F1 | 	add	objptr, ##38016
1517c     F2 26 02 FB | 	rdlong	local01, objptr
15180     13 17 02 F6 | 	mov	arg03, local01
15184     01 16 66 F0 | 	shl	arg03, #1
15188     13 17 02 F1 | 	add	arg03, local01
1518c     02 16 66 F0 | 	shl	arg03, #2
15190     03 00 00 FF 
15194     04 E4 85 F1 | 	sub	objptr, ##1540
15198     F2 16 02 F1 | 	add	arg03, objptr
1519c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
151a0     0C 4E 05 F1 | 	add	fp, #12
151a4     A7 16 62 FC | 	wrlong	arg03, fp
151a8                 | ' 
151a8                 | ' numpar=compiledline(lineptr_e).result.uresult
151a8                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
151a8     0C 4E 85 F1 | 	sub	fp, #12
151ac     47 00 00 FF 
151b0     7C E4 85 F1 | 	sub	objptr, ##36476
151b4     0C 4E 05 51 |  if_ne	add	fp, #12
151b8     A7 26 02 5B |  if_ne	rdlong	local01, fp
151bc     0C 4E 85 51 |  if_ne	sub	fp, #12
151c0     03 26 16 52 |  if_ne	cmp	local01, #3 wc
151c4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1710
151c8     00 12 06 F6 | 	mov	arg01, #0
151cc     8C 72 B1 FD | 	call	#__system___getiolock_0603
151d0     FD 12 02 F6 | 	mov	arg01, result1
151d4     5C 15 B1 FD | 	call	#__system___lockmem
151d8     B6 01 00 FF 
151dc     8A 14 06 F6 | 	mov	arg02, ##@LR__5921
151e0     00 12 06 F6 | 	mov	arg01, #0
151e4     00 16 06 F6 | 	mov	arg03, #0
151e8     3C 22 B1 FD | 	call	#__system___basic_print_string
151ec     00 12 06 F6 | 	mov	arg01, #0
151f0     68 72 B1 FD | 	call	#__system___getiolock_0603
151f4     FD 00 68 FC | 	wrlong	#0, result1
151f8     27 12 06 F6 | 	mov	arg01, #39
151fc     00 14 06 F6 | 	mov	arg02, #0
15200     44 DB B0 FD | 	call	#_printerror
15204     D0 00 90 FD | 	jmp	#LR__1713
15208                 | LR__1710
15208                 | ' if numpar=2 then 
15208     0C 4E 05 F1 | 	add	fp, #12
1520c     A7 26 02 FB | 	rdlong	local01, fp
15210     0C 4E 85 F1 | 	sub	fp, #12
15214     02 26 0E F2 | 	cmp	local01, #2 wz
15218     48 00 90 5D |  if_ne	jmp	#LR__1711
1521c     34 83 BF FD | 	call	#_pop
15220     FF 26 02 F6 | 	mov	local01, result3
15224     A7 FA 61 FC | 	wrlong	result1, fp
15228     04 4E 05 F1 | 	add	fp, #4
1522c     A7 FC 61 FC | 	wrlong	result2, fp
15230     04 4E 05 F1 | 	add	fp, #4
15234     A7 26 62 FC | 	wrlong	local01, fp
15238     08 4E 85 F1 | 	sub	fp, #8
1523c     A7 12 02 F6 | 	mov	arg01, fp
15240     B0 85 BF FD | 	call	#_converttofloat
15244     FD 14 02 F6 | 	mov	arg02, result1
15248     FC 16 20 FF 
1524c     54 12 06 F6 | 	mov	arg01, ##1076754516
15250     28 53 B1 FD | 	call	#__system____builtin_logbase
15254     10 4E 05 F1 | 	add	fp, #16
15258     A7 FA 61 FC | 	wrlong	result1, fp
1525c     10 4E 85 F1 | 	sub	fp, #16
15260     10 00 90 FD | 	jmp	#LR__1712
15264                 | LR__1711
15264     10 4E 05 F1 | 	add	fp, #16
15268     00 C0 9F FF 
1526c     A7 00 68 FC | 	wrlong	##1065353216, fp
15270     10 4E 85 F1 | 	sub	fp, #16
15274                 | LR__1712
15274     DC 82 BF FD | 	call	#_pop
15278     FF 26 02 F6 | 	mov	local01, result3
1527c     A7 FA 61 FC | 	wrlong	result1, fp
15280     04 4E 05 F1 | 	add	fp, #4
15284     A7 FC 61 FC | 	wrlong	result2, fp
15288     04 4E 05 F1 | 	add	fp, #4
1528c     A7 26 62 FC | 	wrlong	local01, fp
15290     08 4E 85 F1 | 	sub	fp, #8
15294     A7 12 02 F6 | 	mov	arg01, fp
15298     58 85 BF FD | 	call	#_converttofloat
1529c     FD 14 02 F6 | 	mov	arg02, result1
152a0     FC 16 20 FF 
152a4     54 12 06 F6 | 	mov	arg01, ##1076754516
152a8     D0 52 B1 FD | 	call	#__system____builtin_logbase
152ac     FD 12 02 F6 | 	mov	arg01, result1
152b0     10 4E 05 F1 | 	add	fp, #16
152b4     A7 14 02 FB | 	rdlong	arg02, fp
152b8     10 4E 85 F1 | 	sub	fp, #16
152bc     F0 44 B1 FD | 	call	#__system___float_div
152c0     A7 FA 61 FC | 	wrlong	result1, fp
152c4     08 4E 05 F1 | 	add	fp, #8
152c8     A7 3C 68 FC | 	wrlong	#30, fp
152cc     08 4E 85 F1 | 	sub	fp, #8
152d0     A7 12 02 F6 | 	mov	arg01, fp
152d4     14 83 BF FD | 	call	#_push
152d8                 | LR__1713
152d8     A7 F0 03 F6 | 	mov	ptra, fp
152dc     B2 00 A0 FD | 	call	#popregs_
152e0                 | _do_log_ret
152e0     2D 00 64 FD | 	ret
152e4                 | 
152e4                 | ' 
152e4                 | ' '-------------------- lpeek
152e4                 | ' 
152e4                 | ' sub do_lpeek
152e4                 | _do_lpeek
152e4     00 4A 05 F6 | 	mov	COUNT_, #0
152e8     A8 00 A0 FD | 	call	#pushregs_
152ec     14 F0 07 F1 | 	add	ptra, #20
152f0     60 82 BF FD | 	call	#_pop
152f4     A7 FA 61 FC | 	wrlong	result1, fp
152f8     04 4E 05 F1 | 	add	fp, #4
152fc     A7 FC 61 FC | 	wrlong	result2, fp
15300     04 4E 05 F1 | 	add	fp, #4
15304     A7 FE 61 FC | 	wrlong	result3, fp
15308     08 4E 85 F1 | 	sub	fp, #8
1530c     A7 12 02 F6 | 	mov	arg01, fp
15310     24 84 BF FD | 	call	#_converttoint
15314     0C 4E 05 F1 | 	add	fp, #12
15318     A7 FA 61 FC | 	wrlong	result1, fp
1531c                 | ' 
1531c                 | ' t1=pop()
1531c                 | ' a=converttoint(t1)
1531c                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
1531c     0C 4E 85 F1 | 	sub	fp, #12
15320     00 04 00 FF 
15324     00 FA 15 F2 | 	cmp	result1, ##524288 wc
15328     1C 00 90 3D |  if_ae	jmp	#LR__1720
1532c     0C 4E 05 F1 | 	add	fp, #12
15330     A7 12 02 FB | 	rdlong	arg01, fp
15334     09 FB 01 FB | 	rdlong	result1, arg01
15338     04 4E 05 F1 | 	add	fp, #4
1533c     A7 FA 61 FC | 	wrlong	result1, fp
15340     10 4E 85 F1 | 	sub	fp, #16
15344     1C 00 90 FD | 	jmp	#LR__1721
15348                 | LR__1720
15348     0C 4E 05 F1 | 	add	fp, #12
1534c     A7 12 02 FB | 	rdlong	arg01, fp
15350     0C 4E 85 F1 | 	sub	fp, #12
15354     C0 DC B0 FD | 	call	#_pslpeek
15358     10 4E 05 F1 | 	add	fp, #16
1535c     A7 FA 61 FC | 	wrlong	result1, fp
15360     10 4E 85 F1 | 	sub	fp, #16
15364                 | LR__1721
15364     08 4E 05 F1 | 	add	fp, #8
15368     A7 3A 68 FC | 	wrlong	#29, fp
1536c     08 4E 05 F1 | 	add	fp, #8
15370     A7 12 02 FB | 	rdlong	arg01, fp
15374     10 4E 85 F1 | 	sub	fp, #16
15378     A7 12 62 FC | 	wrlong	arg01, fp
1537c     A7 12 02 F6 | 	mov	arg01, fp
15380     68 82 BF FD | 	call	#_push
15384     A7 F0 03 F6 | 	mov	ptra, fp
15388     B2 00 A0 FD | 	call	#popregs_
1538c                 | _do_lpeek_ret
1538c     2D 00 64 FD | 	ret
15390                 | 
15390                 | ' 
15390                 | ' '-------------------- lpoke
15390                 | ' 
15390                 | ' sub do_lpoke
15390                 | _do_lpoke
15390     01 4A 05 F6 | 	mov	COUNT_, #1
15394     A8 00 A0 FD | 	call	#pushregs_
15398     20 F0 07 F1 | 	add	ptra, #32
1539c     B4 81 BF FD | 	call	#_pop
153a0     FD 14 02 F6 | 	mov	arg02, result1
153a4     FE 12 02 F6 | 	mov	arg01, result2
153a8     FF 26 02 F6 | 	mov	local01, result3
153ac     A7 14 62 FC | 	wrlong	arg02, fp
153b0     04 4E 05 F1 | 	add	fp, #4
153b4     A7 12 62 FC | 	wrlong	arg01, fp
153b8     04 4E 05 F1 | 	add	fp, #4
153bc     A7 26 62 FC | 	wrlong	local01, fp
153c0     08 4E 85 F1 | 	sub	fp, #8
153c4     8C 81 BF FD | 	call	#_pop
153c8     FF 26 02 F6 | 	mov	local01, result3
153cc     0C 4E 05 F1 | 	add	fp, #12
153d0     A7 FA 61 FC | 	wrlong	result1, fp
153d4     04 4E 05 F1 | 	add	fp, #4
153d8     A7 FC 61 FC | 	wrlong	result2, fp
153dc     04 4E 05 F1 | 	add	fp, #4
153e0     A7 26 62 FC | 	wrlong	local01, fp
153e4     08 4E 85 F1 | 	sub	fp, #8
153e8     A7 12 02 F6 | 	mov	arg01, fp
153ec     0C 4E 85 F1 | 	sub	fp, #12
153f0     44 83 BF FD | 	call	#_converttoint
153f4     18 4E 05 F1 | 	add	fp, #24
153f8     A7 FA 61 FC | 	wrlong	result1, fp
153fc     18 4E 85 F1 | 	sub	fp, #24
15400     A7 12 02 F6 | 	mov	arg01, fp
15404     30 83 BF FD | 	call	#_converttoint
15408     1C 4E 05 F1 | 	add	fp, #28
1540c     A7 FA 61 FC | 	wrlong	result1, fp
15410                 | ' 
15410                 | ' t1=pop() 'value
15410                 | ' t2=pop() 
15410                 | ' a=converttoint(t2) : v=converttoint(t1)
15410                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
15410     04 4E 85 F1 | 	sub	fp, #4
15414     A7 26 02 FB | 	rdlong	local01, fp
15418     18 4E 85 F1 | 	sub	fp, #24
1541c     00 04 00 FF 
15420     00 26 16 F2 | 	cmp	local01, ##524288 wc
15424     1C 00 90 3D |  if_ae	jmp	#LR__1730
15428     18 4E 05 F1 | 	add	fp, #24
1542c     A7 12 02 FB | 	rdlong	arg01, fp
15430     04 4E 05 F1 | 	add	fp, #4
15434     A7 14 02 FB | 	rdlong	arg02, fp
15438     1C 4E 85 F1 | 	sub	fp, #28
1543c     09 15 62 FC | 	wrlong	arg02, arg01
15440     18 00 90 FD | 	jmp	#LR__1731
15444                 | LR__1730
15444     18 4E 05 F1 | 	add	fp, #24
15448     A7 12 02 FB | 	rdlong	arg01, fp
1544c     04 4E 05 F1 | 	add	fp, #4
15450     A7 14 02 FB | 	rdlong	arg02, fp
15454     1C 4E 85 F1 | 	sub	fp, #28
15458     8C DA B0 FD | 	call	#_pslpoke
1545c                 | LR__1731
1545c     A7 F0 03 F6 | 	mov	ptra, fp
15460     B2 00 A0 FD | 	call	#popregs_
15464                 | _do_lpoke_ret
15464     2D 00 64 FD | 	ret
15468                 | 
15468                 | ' 
15468                 | ' '-------------------- mid$
15468                 | ' 
15468                 | ' sub do_mid
15468                 | _do_mid
15468     00 4A 05 F6 | 	mov	COUNT_, #0
1546c     A8 00 A0 FD | 	call	#pushregs_
15470     18 F0 07 F1 | 	add	ptra, #24
15474     4A 00 00 FF 
15478     80 E4 05 F1 | 	add	objptr, ##38016
1547c     F2 16 02 FB | 	rdlong	arg03, objptr
15480     0B 15 02 F6 | 	mov	arg02, arg03
15484     01 14 66 F0 | 	shl	arg02, #1
15488     0B 15 02 F1 | 	add	arg02, arg03
1548c     02 14 66 F0 | 	shl	arg02, #2
15490     03 00 00 FF 
15494     04 E4 85 F1 | 	sub	objptr, ##1540
15498     F2 14 02 F1 | 	add	arg02, objptr
1549c     0A 17 02 FB | 	rdlong	arg03, arg02
154a0     0C 4E 05 F1 | 	add	fp, #12
154a4     A7 16 62 FC | 	wrlong	arg03, fp
154a8                 | ' 
154a8                 | ' numpar=compiledline(lineptr_e).result.uresult
154a8                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
154a8     0C 4E 85 F1 | 	sub	fp, #12
154ac     03 16 0E F2 | 	cmp	arg03, #3 wz
154b0     47 00 00 FF 
154b4     7C E4 85 F1 | 	sub	objptr, ##36476
154b8     40 00 90 AD |  if_e	jmp	#LR__1740
154bc     00 12 06 F6 | 	mov	arg01, #0
154c0     98 6F B1 FD | 	call	#__system___getiolock_0603
154c4     FD 12 02 F6 | 	mov	arg01, result1
154c8     68 12 B1 FD | 	call	#__system___lockmem
154cc     B6 01 00 FF 
154d0     90 14 06 F6 | 	mov	arg02, ##@LR__5922
154d4     00 12 06 F6 | 	mov	arg01, #0
154d8     00 16 06 F6 | 	mov	arg03, #0
154dc     48 1F B1 FD | 	call	#__system___basic_print_string
154e0     00 12 06 F6 | 	mov	arg01, #0
154e4     74 6F B1 FD | 	call	#__system___getiolock_0603
154e8     FD 00 68 FC | 	wrlong	#0, result1
154ec     27 12 06 F6 | 	mov	arg01, #39
154f0     00 14 06 F6 | 	mov	arg02, #0
154f4     50 D8 B0 FD | 	call	#_printerror
154f8     2C 01 90 FD | 	jmp	#LR__1743
154fc                 | LR__1740
154fc     54 80 BF FD | 	call	#_pop
15500     FF 16 02 F6 | 	mov	arg03, result3
15504     A7 FA 61 FC | 	wrlong	result1, fp
15508     04 4E 05 F1 | 	add	fp, #4
1550c     A7 FC 61 FC | 	wrlong	result2, fp
15510     04 4E 05 F1 | 	add	fp, #4
15514     A7 16 62 FC | 	wrlong	arg03, fp
15518     08 4E 85 F1 | 	sub	fp, #8
1551c     A7 12 02 F6 | 	mov	arg01, fp
15520     14 82 BF FD | 	call	#_converttoint
15524     FD 16 02 F6 | 	mov	arg03, result1
15528     14 4E 05 F1 | 	add	fp, #20
1552c     A7 16 62 FC | 	wrlong	arg03, fp
15530     14 4E 85 F1 | 	sub	fp, #20
15534     1C 80 BF FD | 	call	#_pop
15538     FF 16 02 F6 | 	mov	arg03, result3
1553c     A7 FA 61 FC | 	wrlong	result1, fp
15540     04 4E 05 F1 | 	add	fp, #4
15544     A7 FC 61 FC | 	wrlong	result2, fp
15548     04 4E 05 F1 | 	add	fp, #4
1554c     A7 16 62 FC | 	wrlong	arg03, fp
15550     08 4E 85 F1 | 	sub	fp, #8
15554     A7 12 02 F6 | 	mov	arg01, fp
15558     DC 81 BF FD | 	call	#_converttoint
1555c     FD 16 02 F6 | 	mov	arg03, result1
15560     10 4E 05 F1 | 	add	fp, #16
15564     A7 16 62 FC | 	wrlong	arg03, fp
15568     10 4E 85 F1 | 	sub	fp, #16
1556c     E4 7F BF FD | 	call	#_pop
15570     FF 16 02 F6 | 	mov	arg03, result3
15574     A7 FA 61 FC | 	wrlong	result1, fp
15578     04 4E 05 F1 | 	add	fp, #4
1557c     A7 FC 61 FC | 	wrlong	result2, fp
15580     04 4E 05 F1 | 	add	fp, #4
15584     A7 16 62 FC | 	wrlong	arg03, fp
15588                 | ' t1=pop() : arg2=converttoint(t1)
15588                 | ' t1=pop() : arg1=converttoint(t1)
15588                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15588     08 4E 85 F1 | 	sub	fp, #8
1558c     2B 16 0E F2 | 	cmp	arg03, #43 wz
15590     18 00 90 5D |  if_ne	jmp	#LR__1741
15594     A7 12 02 FB | 	rdlong	arg01, fp
15598     30 81 BF FD | 	call	#_convertstring
1559c     A7 FA 61 FC | 	wrlong	result1, fp
155a0     08 4E 05 F1 | 	add	fp, #8
155a4     A7 3E 68 FC | 	wrlong	#31, fp
155a8     08 4E 85 F1 | 	sub	fp, #8
155ac                 | LR__1741
155ac                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
155ac     08 4E 05 F1 | 	add	fp, #8
155b0     A7 16 02 FB | 	rdlong	arg03, fp
155b4     08 4E 85 F1 | 	sub	fp, #8
155b8     1F 16 0E F2 | 	cmp	arg03, #31 wz
155bc     40 00 90 AD |  if_e	jmp	#LR__1742
155c0     00 12 06 F6 | 	mov	arg01, #0
155c4     94 6E B1 FD | 	call	#__system___getiolock_0603
155c8     FD 12 02 F6 | 	mov	arg01, result1
155cc     64 11 B1 FD | 	call	#__system___lockmem
155d0     B6 01 00 FF 
155d4     97 14 06 F6 | 	mov	arg02, ##@LR__5923
155d8     00 12 06 F6 | 	mov	arg01, #0
155dc     00 16 06 F6 | 	mov	arg03, #0
155e0     44 1E B1 FD | 	call	#__system___basic_print_string
155e4     00 12 06 F6 | 	mov	arg01, #0
155e8     70 6E B1 FD | 	call	#__system___getiolock_0603
155ec     FD 00 68 FC | 	wrlong	#0, result1
155f0     0F 12 06 F6 | 	mov	arg01, #15
155f4     00 14 06 F6 | 	mov	arg02, #0
155f8     4C D7 B0 FD | 	call	#_printerror
155fc     28 00 90 FD | 	jmp	#LR__1743
15600                 | LR__1742
15600     A7 12 02 FB | 	rdlong	arg01, fp
15604     10 4E 05 F1 | 	add	fp, #16
15608     A7 14 02 FB | 	rdlong	arg02, fp
1560c     04 4E 05 F1 | 	add	fp, #4
15610     A7 16 02 FB | 	rdlong	arg03, fp
15614     14 4E 85 F1 | 	sub	fp, #20
15618     AC 32 B1 FD | 	call	#__system__Mid_S
1561c     A7 FA 61 FC | 	wrlong	result1, fp
15620     A7 12 02 F6 | 	mov	arg01, fp
15624     C4 7F BF FD | 	call	#_push
15628                 | LR__1743
15628     A7 F0 03 F6 | 	mov	ptra, fp
1562c     B2 00 A0 FD | 	call	#popregs_
15630                 | _do_mid_ret
15630     2D 00 64 FD | 	ret
15634                 | 
15634                 | ' 
15634                 | ' '-------------------- mkdir
15634                 | ' 
15634                 | ' sub do_mkdir
15634                 | _do_mkdir
15634     04 4A 05 F6 | 	mov	COUNT_, #4
15638     A8 00 A0 FD | 	call	#pushregs_
1563c     14 7F BF FD | 	call	#_pop
15640     FE 18 02 F6 | 	mov	arg04, result2
15644     FF 16 02 F6 | 	mov	arg03, result3
15648     FD 26 02 F6 | 	mov	local01, result1
1564c     0C 29 02 F6 | 	mov	local02, arg04
15650     0B 2B 02 F6 | 	mov	local03, arg03
15654                 | ' 
15654                 | ' t1=pop()
15654                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15654     2B 2A 0E F2 | 	cmp	local03, #43 wz
15658     10 00 90 5D |  if_ne	jmp	#LR__1750
1565c     13 13 02 F6 | 	mov	arg01, local01
15660     68 80 BF FD | 	call	#_convertstring
15664     FD 26 02 F6 | 	mov	local01, result1
15668     1F 2A 06 F6 | 	mov	local03, #31
1566c                 | LR__1750
1566c                 | ' if t1.result_type<>result_string then printerror(15): return
1566c     1F 2A 0E F2 | 	cmp	local03, #31 wz
15670     10 00 90 AD |  if_e	jmp	#LR__1751
15674     0F 12 06 F6 | 	mov	arg01, #15
15678     00 14 06 F6 | 	mov	arg02, #0
1567c     C8 D6 B0 FD | 	call	#_printerror
15680     64 00 90 FD | 	jmp	#LR__1753
15684                 | LR__1751
15684     13 13 02 F6 | 	mov	arg01, local01
15688     78 39 B1 FD | 	call	#__system___mkdir
1568c     FD 2C 0A F6 | 	mov	local04, result1 wz
15690                 | ' filename$=t1.result.sresult
15690                 | ' err=mkdir(filename$)
15690                 | ' 'err=geterr() : 
15690                 | ' if err<>0 then print "Cannot create a directory: system error "; err
15690     54 00 90 AD |  if_e	jmp	#LR__1752
15694     00 12 06 F6 | 	mov	arg01, #0
15698     C0 6D B1 FD | 	call	#__system___getiolock_0603
1569c     FD 12 02 F6 | 	mov	arg01, result1
156a0     90 10 B1 FD | 	call	#__system___lockmem
156a4     B6 01 00 FF 
156a8     9E 14 06 F6 | 	mov	arg02, ##@LR__5924
156ac     00 12 06 F6 | 	mov	arg01, #0
156b0     00 16 06 F6 | 	mov	arg03, #0
156b4     70 1D B1 FD | 	call	#__system___basic_print_string
156b8     00 12 06 F6 | 	mov	arg01, #0
156bc     16 15 02 F6 | 	mov	arg02, local04
156c0     00 16 06 F6 | 	mov	arg03, #0
156c4     0A 18 06 F6 | 	mov	arg04, #10
156c8     A0 1D B1 FD | 	call	#__system___basic_print_integer
156cc     00 12 06 F6 | 	mov	arg01, #0
156d0     0A 14 06 F6 | 	mov	arg02, #10
156d4     00 16 06 F6 | 	mov	arg03, #0
156d8     F4 1C B1 FD | 	call	#__system___basic_print_char
156dc     00 12 06 F6 | 	mov	arg01, #0
156e0     78 6D B1 FD | 	call	#__system___getiolock_0603
156e4     FD 00 68 FC | 	wrlong	#0, result1
156e8                 | LR__1752
156e8                 | LR__1753
156e8     A7 F0 03 F6 | 	mov	ptra, fp
156ec     B2 00 A0 FD | 	call	#popregs_
156f0                 | _do_mkdir_ret
156f0     2D 00 64 FD | 	ret
156f4                 | 
156f4                 | ' 
156f4                 | ' '-------------------- mode
156f4                 | ' 
156f4                 | ' sub do_mode
156f4                 | _do_mode
156f4     05 4A 05 F6 | 	mov	COUNT_, #5
156f8     A8 00 A0 FD | 	call	#pushregs_
156fc     54 7E BF FD | 	call	#_pop
15700     FD 26 02 F6 | 	mov	local01, result1
15704     FE 28 02 F6 | 	mov	local02, result2
15708     FF 2A 02 F6 | 	mov	local03, result3
1570c                 | ' t1=pop() 
1570c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1570c     1E 2A 0E F2 | 	cmp	local03, #30 wz
15710     10 00 90 5D |  if_ne	jmp	#LR__1760
15714     13 13 02 F6 | 	mov	arg01, local01
15718     00 14 06 F6 | 	mov	arg02, #0
1571c     54 43 B1 FD | 	call	#__system___float_tointeger
15720     FD 26 02 F6 | 	mov	local01, result1
15724                 | LR__1760
15724                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15724     1F 2A 0E F2 | 	cmp	local03, #31 wz
15728     18 00 90 5D |  if_ne	jmp	#LR__1761
1572c     13 13 02 F6 | 	mov	arg01, local01
15730     84 46 B1 FD | 	call	#__system____builtin_atof
15734     FD 12 02 F6 | 	mov	arg01, result1
15738     00 14 06 F6 | 	mov	arg02, #0
1573c     34 43 B1 FD | 	call	#__system___float_tointeger
15740     FD 26 02 F6 | 	mov	local01, result1
15744                 | LR__1761
15744                 | ' select case t1.result.iresult
15744     13 2D 02 F6 | 	mov	local04, local01
15748     05 2C 26 F3 | 	fle	local04, #5
1574c     30 2C 62 FD | 	jmprel	local04
15750                 | LR__1762
15750     14 00 90 FD | 	jmp	#LR__1763
15754     A8 00 90 FD | 	jmp	#LR__1764
15758     10 01 90 FD | 	jmp	#LR__1765
1575c     78 01 90 FD | 	jmp	#LR__1766
15760     E0 01 90 FD | 	jmp	#LR__1767
15764     70 02 90 FD | 	jmp	#LR__1768
15768                 | LR__1763
15768     37 00 00 FF 
1576c     40 E4 05 F1 | 	add	objptr, ##28224
15770     F2 02 68 FC | 	wrlong	#1, objptr
15774     04 E4 85 F1 | 	sub	objptr, #4
15778     F2 34 69 FC | 	wrlong	#154, objptr
1577c     19 00 00 FF 
15780     00 E5 05 F1 | 	add	objptr, ##13056
15784     F2 02 68 FC | 	wrlong	#1, objptr
15788     19 00 00 FF 
1578c     04 E5 85 F1 | 	sub	objptr, ##13060
15790     F2 26 69 FC | 	wrlong	#147, objptr
15794     37 00 00 FF 
15798     38 E4 85 F1 | 	sub	objptr, ##28216
1579c     04 12 06 F6 | 	mov	arg01, #4
157a0     BC F1 B0 FD | 	call	#_hg010b_spin2_setfontfamily
157a4     37 00 00 FF 
157a8     3C E4 05 F1 | 	add	objptr, ##28220
157ac     F2 12 02 FB | 	rdlong	arg01, objptr
157b0     04 E4 85 F1 | 	sub	objptr, #4
157b4     F2 14 02 FB | 	rdlong	arg02, objptr
157b8                 | ' 
157b8                 | ' write_color:=ff
157b8     36 00 00 FF 
157bc     F7 E5 85 F1 | 	sub	objptr, ##28151
157c0     F2 12 62 FC | 	wrlong	arg01, objptr
157c4                 | ' write_background:=bb
157c4     04 E4 05 F1 | 	add	objptr, #4
157c8     F2 14 62 FC | 	wrlong	arg02, objptr
157cc     01 00 00 FF 
157d0     00 EA 05 F1 | 	add	ptr__dat__, ##512
157d4     52 00 00 FF 
157d8     5F E4 05 F1 | 	add	objptr, ##42079
157dc     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
157e0     04 E4 85 F1 | 	sub	objptr, #4
157e4     03 00 80 FF 
157e8     F2 30 69 FC | 	wrlong	##1688, objptr
157ec     52 00 00 FF 
157f0     A0 E4 85 F1 | 	sub	objptr, ##42144
157f4     01 00 00 FF 
157f8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
157fc     D8 01 90 FD | 	jmp	#LR__1768
15800                 | LR__1764
15800     37 00 00 FF 
15804     40 E4 05 F1 | 	add	objptr, ##28224
15808     F2 00 68 FC | 	wrlong	#0, objptr
1580c     04 E4 85 F1 | 	sub	objptr, #4
15810     F2 2E 68 FC | 	wrlong	#23, objptr
15814     19 00 00 FF 
15818     00 E5 05 F1 | 	add	objptr, ##13056
1581c     F2 00 68 FC | 	wrlong	#0, objptr
15820     19 00 00 FF 
15824     04 E5 85 F1 | 	sub	objptr, ##13060
15828     F2 00 68 FC | 	wrlong	#0, objptr
1582c     37 00 00 FF 
15830     38 E4 85 F1 | 	sub	objptr, ##28216
15834     00 12 06 F6 | 	mov	arg01, #0
15838     24 F1 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1583c     37 00 00 FF 
15840     3C E4 05 F1 | 	add	objptr, ##28220
15844     F2 12 02 FB | 	rdlong	arg01, objptr
15848     04 E4 85 F1 | 	sub	objptr, #4
1584c     F2 14 02 FB | 	rdlong	arg02, objptr
15850                 | ' 
15850                 | ' write_color:=ff
15850     36 00 00 FF 
15854     F7 E5 85 F1 | 	sub	objptr, ##28151
15858     F2 12 62 FC | 	wrlong	arg01, objptr
1585c                 | ' write_background:=bb
1585c     04 E4 05 F1 | 	add	objptr, #4
15860     F2 14 62 FC | 	wrlong	arg02, objptr
15864     45 E4 85 F1 | 	sub	objptr, #69
15868     6C 01 90 FD | 	jmp	#LR__1768
1586c                 | LR__1765
1586c     37 00 00 FF 
15870     40 E4 05 F1 | 	add	objptr, ##28224
15874     F2 00 68 FC | 	wrlong	#0, objptr
15878     04 E4 85 F1 | 	sub	objptr, #4
1587c     F2 6A 69 FC | 	wrlong	#181, objptr
15880     19 00 00 FF 
15884     00 E5 05 F1 | 	add	objptr, ##13056
15888     F2 00 68 FC | 	wrlong	#0, objptr
1588c     19 00 00 FF 
15890     04 E5 85 F1 | 	sub	objptr, ##13060
15894     F2 00 68 FC | 	wrlong	#0, objptr
15898     37 00 00 FF 
1589c     38 E4 85 F1 | 	sub	objptr, ##28216
158a0     00 12 06 F6 | 	mov	arg01, #0
158a4     B8 F0 B0 FD | 	call	#_hg010b_spin2_setfontfamily
158a8     37 00 00 FF 
158ac     3C E4 05 F1 | 	add	objptr, ##28220
158b0     F2 12 02 FB | 	rdlong	arg01, objptr
158b4     04 E4 85 F1 | 	sub	objptr, #4
158b8     F2 14 02 FB | 	rdlong	arg02, objptr
158bc                 | ' 
158bc                 | ' write_color:=ff
158bc     36 00 00 FF 
158c0     F7 E5 85 F1 | 	sub	objptr, ##28151
158c4     F2 12 62 FC | 	wrlong	arg01, objptr
158c8                 | ' write_background:=bb
158c8     04 E4 05 F1 | 	add	objptr, #4
158cc     F2 14 62 FC | 	wrlong	arg02, objptr
158d0     45 E4 85 F1 | 	sub	objptr, #69
158d4     00 01 90 FD | 	jmp	#LR__1768
158d8                 | LR__1766
158d8     37 00 00 FF 
158dc     40 E4 05 F1 | 	add	objptr, ##28224
158e0     F2 00 68 FC | 	wrlong	#0, objptr
158e4     04 E4 85 F1 | 	sub	objptr, #4
158e8     F2 1E 68 FC | 	wrlong	#15, objptr
158ec     19 00 00 FF 
158f0     00 E5 05 F1 | 	add	objptr, ##13056
158f4     F2 00 68 FC | 	wrlong	#0, objptr
158f8     19 00 00 FF 
158fc     04 E5 85 F1 | 	sub	objptr, ##13060
15900     F2 00 68 FC | 	wrlong	#0, objptr
15904     37 00 00 FF 
15908     38 E4 85 F1 | 	sub	objptr, ##28216
1590c     00 12 06 F6 | 	mov	arg01, #0
15910     4C F0 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15914     37 00 00 FF 
15918     3C E4 05 F1 | 	add	objptr, ##28220
1591c     F2 12 02 FB | 	rdlong	arg01, objptr
15920     04 E4 85 F1 | 	sub	objptr, #4
15924     F2 14 02 FB | 	rdlong	arg02, objptr
15928                 | ' 
15928                 | ' write_color:=ff
15928     36 00 00 FF 
1592c     F7 E5 85 F1 | 	sub	objptr, ##28151
15930     F2 12 62 FC | 	wrlong	arg01, objptr
15934                 | ' write_background:=bb
15934     04 E4 05 F1 | 	add	objptr, #4
15938     F2 14 62 FC | 	wrlong	arg02, objptr
1593c     45 E4 85 F1 | 	sub	objptr, #69
15940     94 00 90 FD | 	jmp	#LR__1768
15944                 | LR__1767
15944     37 00 00 FF 
15948     40 E4 05 F1 | 	add	objptr, ##28224
1594c     F2 02 68 FC | 	wrlong	#1, objptr
15950     04 E4 85 F1 | 	sub	objptr, #4
15954     F2 02 68 FC | 	wrlong	#1, objptr
15958     19 00 00 FF 
1595c     00 E5 05 F1 | 	add	objptr, ##13056
15960     F2 02 68 FC | 	wrlong	#1, objptr
15964     19 00 00 FF 
15968     04 E5 85 F1 | 	sub	objptr, ##13060
1596c     F2 1C 68 FC | 	wrlong	#14, objptr
15970     37 00 00 FF 
15974     38 E4 85 F1 | 	sub	objptr, ##28216
15978     04 12 06 F6 | 	mov	arg01, #4
1597c     E0 EF B0 FD | 	call	#_hg010b_spin2_setfontfamily
15980     37 00 00 FF 
15984     3C E4 05 F1 | 	add	objptr, ##28220
15988     F2 12 02 FB | 	rdlong	arg01, objptr
1598c     04 E4 85 F1 | 	sub	objptr, #4
15990     F2 14 02 FB | 	rdlong	arg02, objptr
15994                 | ' 
15994                 | ' write_color:=ff
15994     36 00 00 FF 
15998     F7 E5 85 F1 | 	sub	objptr, ##28151
1599c     F2 12 62 FC | 	wrlong	arg01, objptr
159a0                 | ' write_background:=bb
159a0     04 E4 05 F1 | 	add	objptr, #4
159a4     F2 14 62 FC | 	wrlong	arg02, objptr
159a8     07 00 00 FF 
159ac     82 EB 05 F1 | 	add	ptr__dat__, ##3970
159b0     52 00 00 FF 
159b4     5F E4 05 F1 | 	add	objptr, ##42079
159b8     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
159bc     04 E4 85 F1 | 	sub	objptr, #4
159c0     03 00 80 FF 
159c4     F2 30 69 FC | 	wrlong	##1688, objptr
159c8     52 00 00 FF 
159cc     A0 E4 85 F1 | 	sub	objptr, ##42144
159d0     07 00 00 FF 
159d4     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
159d8                 | LR__1768
159d8     52 00 00 FF 
159dc     9C E4 05 F1 | 	add	objptr, ##42140
159e0     F2 26 62 FC | 	wrlong	local01, objptr
159e4     04 E4 85 F1 | 	sub	objptr, #4
159e8     F2 12 02 FB | 	rdlong	arg01, objptr
159ec     0F 00 00 FF 
159f0     3C E4 85 F1 | 	sub	objptr, ##7740
159f4     F2 2E 02 FB | 	rdlong	local05, objptr
159f8     43 00 00 FF 
159fc     5C E4 85 F1 | 	sub	objptr, ##34396
15a00     17 13 82 F1 | 	sub	arg01, local05
15a04     00 14 06 F6 | 	mov	arg02, #0
15a08     0A 16 06 F6 | 	mov	arg03, #10
15a0c     F4 2F B1 FD | 	call	#__system__Number_S
15a10     FD 12 02 F6 | 	mov	arg01, result1
15a14     B6 01 00 FF 
15a18     C7 14 06 F6 | 	mov	arg02, ##@LR__5925
15a1c     70 0D B1 FD | 	call	#__system___string_concat
15a20     50 00 00 FF 
15a24     38 E5 05 F1 | 	add	objptr, ##41272
15a28     F2 FA 61 FC | 	wrlong	result1, objptr
15a2c     19 00 00 FF 
15a30     FC E4 85 F1 | 	sub	objptr, ##13052
15a34     F2 12 02 FB | 	rdlong	arg01, objptr
15a38     04 E4 85 F1 | 	sub	objptr, #4
15a3c     F2 14 02 FB | 	rdlong	arg02, objptr
15a40     37 00 00 FF 
15a44     38 E4 85 F1 | 	sub	objptr, ##28216
15a48     64 F0 B0 FD | 	call	#_hg010b_spin2_cls
15a4c     B6 01 00 FF 
15a50     D9 12 06 F6 | 	mov	arg01, ##@LR__5926
15a54                 | ' 
15a54                 | ' write(text)
15a54     18 F4 B0 FD | 	call	#_hg010b_spin2_write
15a58                 | ' crlf
15a58     14 F9 B0 FD | 	call	#_hg010b_spin2_crlf
15a5c     18 00 00 FF 
15a60     40 EB 05 F1 | 	add	ptr__dat__, ##12608
15a64     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
15a68     18 00 00 FF 
15a6c     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
15a70                 | ' 
15a70                 | ' write(text)
15a70     FC F3 B0 FD | 	call	#_hg010b_spin2_write
15a74                 | ' crlf
15a74     F8 F8 B0 FD | 	call	#_hg010b_spin2_crlf
15a78     50 00 00 FF 
15a7c     38 E5 05 F1 | 	add	objptr, ##41272
15a80     F2 12 02 FB | 	rdlong	arg01, objptr
15a84     50 00 00 FF 
15a88     38 E5 85 F1 | 	sub	objptr, ##41272
15a8c                 | ' 
15a8c                 | ' write(text)
15a8c     E0 F3 B0 FD | 	call	#_hg010b_spin2_write
15a90                 | ' crlf
15a90     DC F8 B0 FD | 	call	#_hg010b_spin2_crlf
15a94     A7 F0 03 F6 | 	mov	ptra, fp
15a98     B2 00 A0 FD | 	call	#popregs_
15a9c                 | _do_mode_ret
15a9c     2D 00 64 FD | 	ret
15aa0                 | 
15aa0                 | ' 
15aa0                 | ' '-------------------- mouse
15aa0                 | ' 
15aa0                 | ' sub do_mouse
15aa0                 | _do_mouse
15aa0     B0 7A BF FD | 	call	#_pop
15aa4     00 FA 4D F2 | 	cmps	result1, #0 wz
15aa8                 | ' 
15aa8                 | ' t1=pop()
15aa8                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
15aa8     14 00 90 5D |  if_ne	jmp	#LR__1770
15aac     10 12 06 F6 | 	mov	arg01, #16
15ab0     00 14 06 F6 | 	mov	arg02, #0
15ab4     00 16 06 F6 | 	mov	arg03, #0
15ab8     D4 E2 B0 FD | 	call	#_hg010b_spin2_setspritesize
15abc     10 00 90 FD | 	jmp	#LR__1771
15ac0                 | LR__1770
15ac0     10 12 06 F6 | 	mov	arg01, #16
15ac4     20 14 06 F6 | 	mov	arg02, #32
15ac8     20 16 06 F6 | 	mov	arg03, #32
15acc     C0 E2 B0 FD | 	call	#_hg010b_spin2_setspritesize
15ad0                 | LR__1771
15ad0                 | _do_mouse_ret
15ad0     2D 00 64 FD | 	ret
15ad4                 | 
15ad4                 | ' 
15ad4                 | ' '-------------------- mousek
15ad4                 | ' 
15ad4                 | ' sub do_mousek
15ad4                 | _do_mousek
15ad4     00 4A 05 F6 | 	mov	COUNT_, #0
15ad8     A8 00 A0 FD | 	call	#pushregs_
15adc     0C F0 07 F1 | 	add	ptra, #12
15ae0     08 4E 05 F1 | 	add	fp, #8
15ae4     A7 3A 68 FC | 	wrlong	#29, fp
15ae8     08 4E 85 F1 | 	sub	fp, #8
15aec     51 00 00 FF 
15af0     50 E5 05 F1 | 	add	objptr, ##41808
15af4     F2 12 02 FB | 	rdlong	arg01, objptr
15af8     51 00 00 FF 
15afc     50 E5 85 F1 | 	sub	objptr, ##41808
15b00     A7 12 62 FC | 	wrlong	arg01, fp
15b04     A7 12 02 F6 | 	mov	arg01, fp
15b08     E0 7A BF FD | 	call	#_push
15b0c     A7 F0 03 F6 | 	mov	ptra, fp
15b10     B2 00 A0 FD | 	call	#popregs_
15b14                 | _do_mousek_ret
15b14     2D 00 64 FD | 	ret
15b18                 | 
15b18                 | ' 
15b18                 | ' '-------------------- mousew
15b18                 | ' 
15b18                 | ' sub do_mousew
15b18                 | _do_mousew
15b18     00 4A 05 F6 | 	mov	COUNT_, #0
15b1c     A8 00 A0 FD | 	call	#pushregs_
15b20     0C F0 07 F1 | 	add	ptra, #12
15b24     08 4E 05 F1 | 	add	fp, #8
15b28     A7 38 68 FC | 	wrlong	#28, fp
15b2c     08 4E 85 F1 | 	sub	fp, #8
15b30     51 00 00 FF 
15b34     54 E5 05 F1 | 	add	objptr, ##41812
15b38     F2 12 02 FB | 	rdlong	arg01, objptr
15b3c     51 00 00 FF 
15b40     54 E5 85 F1 | 	sub	objptr, ##41812
15b44     A7 12 62 FC | 	wrlong	arg01, fp
15b48     A7 12 02 F6 | 	mov	arg01, fp
15b4c     9C 7A BF FD | 	call	#_push
15b50     A7 F0 03 F6 | 	mov	ptra, fp
15b54     B2 00 A0 FD | 	call	#popregs_
15b58                 | _do_mousew_ret
15b58     2D 00 64 FD | 	ret
15b5c                 | 
15b5c                 | ' 
15b5c                 | ' '-------------------- mousex
15b5c                 | ' 
15b5c                 | ' sub do_mousex
15b5c                 | _do_mousex
15b5c     00 4A 05 F6 | 	mov	COUNT_, #0
15b60     A8 00 A0 FD | 	call	#pushregs_
15b64     0C F0 07 F1 | 	add	ptra, #12
15b68     08 4E 05 F1 | 	add	fp, #8
15b6c     A7 3A 68 FC | 	wrlong	#29, fp
15b70     08 4E 85 F1 | 	sub	fp, #8
15b74     51 00 00 FF 
15b78     48 E5 05 F1 | 	add	objptr, ##41800
15b7c     F2 12 02 FB | 	rdlong	arg01, objptr
15b80     51 00 00 FF 
15b84     48 E5 85 F1 | 	sub	objptr, ##41800
15b88     A7 12 62 FC | 	wrlong	arg01, fp
15b8c     A7 12 02 F6 | 	mov	arg01, fp
15b90     58 7A BF FD | 	call	#_push
15b94     A7 F0 03 F6 | 	mov	ptra, fp
15b98     B2 00 A0 FD | 	call	#popregs_
15b9c                 | _do_mousex_ret
15b9c     2D 00 64 FD | 	ret
15ba0                 | 
15ba0                 | ' 
15ba0                 | ' '-------------------- mousey
15ba0                 | ' 
15ba0                 | ' sub do_mousey
15ba0                 | _do_mousey
15ba0     00 4A 05 F6 | 	mov	COUNT_, #0
15ba4     A8 00 A0 FD | 	call	#pushregs_
15ba8     0C F0 07 F1 | 	add	ptra, #12
15bac     08 4E 05 F1 | 	add	fp, #8
15bb0     A7 3A 68 FC | 	wrlong	#29, fp
15bb4     08 4E 85 F1 | 	sub	fp, #8
15bb8     51 00 00 FF 
15bbc     4C E5 05 F1 | 	add	objptr, ##41804
15bc0     F2 12 02 FB | 	rdlong	arg01, objptr
15bc4     51 00 00 FF 
15bc8     4C E5 85 F1 | 	sub	objptr, ##41804
15bcc     A7 12 62 FC | 	wrlong	arg01, fp
15bd0     A7 12 02 F6 | 	mov	arg01, fp
15bd4     14 7A BF FD | 	call	#_push
15bd8     A7 F0 03 F6 | 	mov	ptra, fp
15bdc     B2 00 A0 FD | 	call	#popregs_
15be0                 | _do_mousey_ret
15be0     2D 00 64 FD | 	ret
15be4                 | 
15be4                 | ' 
15be4                 | ' '------------------ new
15be4                 | ' 
15be4                 | ' sub do_new
15be4                 | _do_new
15be4     03 4A 05 F6 | 	mov	COUNT_, #3
15be8     A8 00 A0 FD | 	call	#pushregs_
15bec                 | ' 
15bec                 | ' if inrun=1 then inrun=2
15bec     50 00 00 FF 
15bf0     EC E4 05 F1 | 	add	objptr, ##41196
15bf4     F2 16 02 FB | 	rdlong	arg03, objptr
15bf8     50 00 00 FF 
15bfc     EC E4 85 F1 | 	sub	objptr, ##41196
15c00     01 16 0E F2 | 	cmp	arg03, #1 wz
15c04     50 00 00 AF 
15c08     EC E4 05 A1 |  if_e	add	objptr, ##41196
15c0c     F2 04 68 AC |  if_e	wrlong	#2, objptr
15c10     50 00 00 AF 
15c14     EC E4 85 A1 |  if_e	sub	objptr, ##41196
15c18     13 12 C6 F9 | 	decod	arg01, #19
15c1c     01 14 66 F6 | 	neg	arg02, #1
15c20     C4 D2 B0 FD | 	call	#_pslpoke
15c24     35 00 00 FF 
15c28     08 E4 05 F1 | 	add	objptr, ##27144
15c2c     F2 00 68 FC | 	wrlong	#0, objptr
15c30                 | ' pslpoke(memlo,$FFFFFFFF)
15c30                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
15c30     00 26 06 F6 | 	mov	local01, #0
15c34     20 00 00 FF 
15c38     10 E4 85 F1 | 	sub	objptr, ##16400
15c3c     97 1E 48 FB | 	callpa	#(@LR__1781-@LR__1780)>>2,fcache_load_ptr_
15c40                 | LR__1780
15c40     13 17 02 F6 | 	mov	arg03, local01
15c44     04 16 66 F0 | 	shl	arg03, #4
15c48     F2 16 02 F1 | 	add	arg03, objptr
15c4c     B6 01 00 FF 
15c50     DA 14 06 F6 | 	mov	arg02, ##@LR__5927
15c54     0B 15 62 FC | 	wrlong	arg02, arg03
15c58     13 29 02 F6 | 	mov	local02, local01
15c5c     04 28 66 F0 | 	shl	local02, #4
15c60     F2 28 02 F1 | 	add	local02, objptr
15c64     0C 28 06 F1 | 	add	local02, #12
15c68     14 01 68 FC | 	wrlong	#0, local02
15c6c     01 26 06 F1 | 	add	local01, #1
15c70     02 00 00 FF 
15c74     01 26 56 F2 | 	cmps	local01, ##1025 wc
15c78     C4 FF 9F CD |  if_b	jmp	#LR__1780
15c7c                 | LR__1781
15c7c     35 00 00 FF 
15c80     90 E4 05 F1 | 	add	objptr, ##27280
15c84     00 04 80 FF 
15c88     F2 00 68 FC | 	wrlong	##524288, objptr
15c8c     06 00 00 FF 
15c90     30 E4 05 F1 | 	add	objptr, ##3120
15c94     00 04 80 FF 
15c98     F2 00 68 FC | 	wrlong	##524288, objptr
15c9c     04 E4 05 F1 | 	add	objptr, #4
15ca0     00 04 80 FF 
15ca4     F2 00 68 FC | 	wrlong	##524288, objptr
15ca8     0D 00 00 FF 
15cac     64 E4 85 F1 | 	sub	objptr, ##6756
15cb0     F2 00 68 FC | 	wrlong	#0, objptr
15cb4     07 00 00 FF 
15cb8     24 E4 05 F1 | 	add	objptr, ##3620
15cbc     F2 00 68 FC | 	wrlong	#0, objptr
15cc0     07 00 00 FF 
15cc4     20 E4 85 F1 | 	sub	objptr, ##3616
15cc8     00 04 80 FF 
15ccc     F2 00 68 FC | 	wrlong	##524288, objptr
15cd0     0D 00 00 FF 
15cd4     D0 E4 05 F1 | 	add	objptr, ##6864
15cd8     F2 00 68 FC | 	wrlong	#0, objptr
15cdc     B6 01 00 FF 
15ce0     DB 2A 06 F6 | 	mov	local03, ##@LR__5928
15ce4     01 00 00 FF 
15ce8     B0 E5 05 F1 | 	add	objptr, ##944
15cec     F2 2A 62 FC | 	wrlong	local03, objptr
15cf0     08 00 00 FF 
15cf4     50 E4 85 F1 | 	sub	objptr, ##4176
15cf8     F2 00 68 FC | 	wrlong	#0, objptr
15cfc     04 E4 05 F1 | 	add	objptr, #4
15d00     FF FF FF FF 
15d04     F2 FE 6B FC | 	wrlong	##-1, objptr
15d08     06 00 00 FF 
15d0c     A0 E4 05 F1 | 	add	objptr, ##3232
15d10     F2 00 68 FC | 	wrlong	#0, objptr
15d14     04 E4 05 F1 | 	add	objptr, #4
15d18     F2 00 68 FC | 	wrlong	#0, objptr
15d1c                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
15d1c                 | ' stackpointer=0
15d1c                 | ' lineptr=0 
15d1c                 | ' programptr=memlo ': stringptr=0
15d1c                 | ' dataptr=0 : readline=""
15d1c                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
15d1c                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
15d1c     00 26 06 F6 | 	mov	local01, #0
15d20     06 00 00 FF 
15d24     9C E4 85 F1 | 	sub	objptr, ##3228
15d28     97 16 48 FB | 	callpa	#(@LR__1783-@LR__1782)>>2,fcache_load_ptr_
15d2c                 | LR__1782
15d2c     13 29 02 F6 | 	mov	local02, local01
15d30     02 28 66 F0 | 	shl	local02, #2
15d34     13 29 02 F1 | 	add	local02, local01
15d38     02 28 66 F0 | 	shl	local02, #2
15d3c     F2 28 02 F1 | 	add	local02, objptr
15d40     08 28 06 F1 | 	add	local02, #8
15d44     FF FF FF FF 
15d48     14 FF 6B FC | 	wrlong	##-1, local02
15d4c     01 26 06 F1 | 	add	local01, #1
15d50     41 26 56 F2 | 	cmps	local01, #65 wc
15d54     D4 FF 9F CD |  if_b	jmp	#LR__1782
15d58                 | LR__1783
15d58     4A 00 00 FF 
15d5c     98 E4 85 F1 | 	sub	objptr, ##38040
15d60                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
15d60     00 26 06 F6 | 	mov	local01, #0
15d64                 | LR__1784
15d64     13 29 02 F6 | 	mov	local02, local01
15d68     02 28 66 F0 | 	shl	local02, #2
15d6c     52 00 00 FF 
15d70     54 E4 05 F1 | 	add	objptr, ##42068
15d74     F2 28 02 F1 | 	add	local02, objptr
15d78     14 2B 0A FB | 	rdlong	local03, local02 wz
15d7c     52 00 00 FF 
15d80     54 E4 85 F1 | 	sub	objptr, ##42068
15d84     34 00 90 AD |  if_e	jmp	#LR__1785
15d88     13 13 02 F6 | 	mov	arg01, local01
15d8c     00 14 06 F6 | 	mov	arg02, #0
15d90     00 16 06 F6 | 	mov	arg03, #0
15d94     F8 DF B0 FD | 	call	#_hg010b_spin2_setspritesize
15d98     13 29 02 F6 | 	mov	local02, local01
15d9c     02 28 66 F0 | 	shl	local02, #2
15da0     52 00 00 FF 
15da4     54 E4 05 F1 | 	add	objptr, ##42068
15da8     F2 28 02 F1 | 	add	local02, objptr
15dac     14 13 02 FB | 	rdlong	arg01, local02
15db0     52 00 00 FF 
15db4     54 E4 85 F1 | 	sub	objptr, ##42068
15db8     54 4C B1 FD | 	call	#__system___gc_free
15dbc                 | LR__1785
15dbc     01 26 06 F1 | 	add	local01, #1
15dc0     10 26 56 F2 | 	cmps	local01, #16 wc
15dc4     9C FF 9F CD |  if_b	jmp	#LR__1784
15dc8     52 00 00 FF 
15dcc     A8 E4 05 F1 | 	add	objptr, ##42152
15dd0     00 C0 9F FF 
15dd4     F2 00 68 FC | 	wrlong	##1065353216, objptr
15dd8     04 E4 05 F1 | 	add	objptr, #4
15ddc     00 C0 9F FF 
15de0     F2 00 68 FC | 	wrlong	##1065353216, objptr
15de4     52 00 00 FF 
15de8     A8 E4 85 F1 | 	sub	objptr, ##42152
15dec     F2 2A 02 FB | 	rdlong	local03, objptr
15df0     52 00 00 FF 
15df4     94 E4 05 F1 | 	add	objptr, ##42132
15df8     F2 2A 62 FC | 	wrlong	local03, objptr
15dfc     52 00 00 FF 
15e00     98 E4 85 F1 | 	sub	objptr, ##42136
15e04     11 12 06 F6 | 	mov	arg01, #17
15e08     08 14 06 F6 | 	mov	arg02, #8
15e0c     10 16 06 F6 | 	mov	arg03, #16
15e10     7C DF B0 FD | 	call	#_hg010b_spin2_setspritesize
15e14     10 12 06 F6 | 	mov	arg01, #16
15e18     20 14 06 F6 | 	mov	arg02, #32
15e1c     20 16 06 F6 | 	mov	arg03, #32
15e20     6C DF B0 FD | 	call	#_hg010b_spin2_setspritesize
15e24     B6 01 00 FF 
15e28     DC 2A 06 F6 | 	mov	local03, ##@LR__5929
15e2c     52 00 00 FF 
15e30     C4 E4 05 F1 | 	add	objptr, ##42180
15e34     F2 2A 62 FC | 	wrlong	local03, objptr
15e38     52 00 00 FF 
15e3c     C4 E4 85 F1 | 	sub	objptr, ##42180
15e40     FC C2 B0 FD | 	call	#_init_audio
15e44     A7 F0 03 F6 | 	mov	ptra, fp
15e48     B2 00 A0 FD | 	call	#popregs_
15e4c                 | _do_new_ret
15e4c     2D 00 64 FD | 	ret
15e50                 | 
15e50                 | ' 
15e50                 | ' '-------------------- next
15e50                 | ' 
15e50                 | ' sub do_next()
15e50                 | _do_next
15e50     04 4A 05 F6 | 	mov	COUNT_, #4
15e54     A8 00 A0 FD | 	call	#pushregs_
15e58     F8 76 BF FD | 	call	#_pop
15e5c     FD 26 02 F6 | 	mov	local01, result1
15e60     FE 28 02 F6 | 	mov	local02, result2
15e64     FF 2A 02 F6 | 	mov	local03, result3
15e68                 | ' t1=pop() :varnum=t1.result.uresult
15e68                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
15e68     50 00 00 FF 
15e6c     30 E5 05 F1 | 	add	objptr, ##41264
15e70     F2 14 02 FB | 	rdlong	arg02, objptr
15e74     0A 13 02 F6 | 	mov	arg01, arg02
15e78     02 12 66 F0 | 	shl	arg01, #2
15e7c     0A 13 02 F1 | 	add	arg01, arg02
15e80     02 12 66 F0 | 	shl	arg01, #2
15e84     06 00 00 FF 
15e88     98 E4 85 F1 | 	sub	objptr, ##3224
15e8c     F2 12 02 F1 | 	add	arg01, objptr
15e90     08 12 06 F1 | 	add	arg01, #8
15e94     09 15 02 FB | 	rdlong	arg02, arg01
15e98     13 15 0A F2 | 	cmp	arg02, local01 wz
15e9c     4A 00 00 FF 
15ea0     98 E4 85 F1 | 	sub	objptr, ##38040
15ea4     10 00 90 AD |  if_e	jmp	#LR__1790
15ea8     25 12 06 F6 | 	mov	arg01, #37
15eac     00 14 06 F6 | 	mov	arg02, #0
15eb0     94 CE B0 FD | 	call	#_printerror
15eb4     54 03 90 FD | 	jmp	#LR__1797
15eb8                 | LR__1790
15eb8                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
15eb8     13 15 02 F6 | 	mov	arg02, local01
15ebc     04 14 66 F0 | 	shl	arg02, #4
15ec0     14 00 00 FF 
15ec4     F8 E5 05 F1 | 	add	objptr, ##10744
15ec8     F2 14 02 F1 | 	add	arg02, objptr
15ecc     0C 14 06 F1 | 	add	arg02, #12
15ed0     0A 15 02 FB | 	rdlong	arg02, arg02
15ed4     1E 14 0E F2 | 	cmp	arg02, #30 wz
15ed8     14 00 00 FF 
15edc     F8 E5 85 F1 | 	sub	objptr, ##10744
15ee0     54 00 90 5D |  if_ne	jmp	#LR__1791
15ee4     13 15 02 F6 | 	mov	arg02, local01
15ee8     04 14 66 F0 | 	shl	arg02, #4
15eec     14 00 00 FF 
15ef0     F8 E5 05 F1 | 	add	objptr, ##10744
15ef4     F2 14 02 F1 | 	add	arg02, objptr
15ef8     0C 14 06 F1 | 	add	arg02, #12
15efc     0A 39 68 FC | 	wrlong	#28, arg02
15f00     13 2D 02 F6 | 	mov	local04, local01
15f04     04 2C 66 F0 | 	shl	local04, #4
15f08     F2 2C 02 F1 | 	add	local04, objptr
15f0c     13 15 02 F6 | 	mov	arg02, local01
15f10     04 14 66 F0 | 	shl	arg02, #4
15f14     F2 14 02 F1 | 	add	arg02, objptr
15f18     04 14 06 F1 | 	add	arg02, #4
15f1c     0A 13 02 FB | 	rdlong	arg01, arg02
15f20     14 00 00 FF 
15f24     F8 E5 85 F1 | 	sub	objptr, ##10744
15f28     01 14 06 F6 | 	mov	arg02, #1
15f2c     44 3B B1 FD | 	call	#__system___float_tointeger
15f30     04 2C 06 F1 | 	add	local04, #4
15f34     16 FB 61 FC | 	wrlong	result1, local04
15f38                 | LR__1791
15f38     50 00 00 FF 
15f3c     30 E5 05 F1 | 	add	objptr, ##41264
15f40     F2 2C 02 FB | 	rdlong	local04, objptr
15f44     16 15 02 F6 | 	mov	arg02, local04
15f48     02 14 66 F0 | 	shl	arg02, #2
15f4c     16 15 02 F1 | 	add	arg02, local04
15f50     02 14 66 F0 | 	shl	arg02, #2
15f54     06 00 00 FF 
15f58     98 E4 85 F1 | 	sub	objptr, ##3224
15f5c     F2 14 02 F1 | 	add	arg02, objptr
15f60     0C 14 06 F1 | 	add	arg02, #12
15f64     0A FF 01 FB | 	rdlong	result3, arg02
15f68     13 2D 02 F6 | 	mov	local04, local01
15f6c     04 2C 66 F0 | 	shl	local04, #4
15f70     35 00 00 FF 
15f74     A0 E4 85 F1 | 	sub	objptr, ##27296
15f78     F2 2C 02 F1 | 	add	local04, objptr
15f7c     13 15 02 F6 | 	mov	arg02, local01
15f80     04 14 66 F0 | 	shl	arg02, #4
15f84     F2 14 02 F1 | 	add	arg02, objptr
15f88     04 14 06 F1 | 	add	arg02, #4
15f8c     0A 13 02 FB | 	rdlong	arg01, arg02
15f90     FF 12 02 F1 | 	add	arg01, result3
15f94     04 2C 06 F1 | 	add	local04, #4
15f98     16 13 62 FC | 	wrlong	arg01, local04
15f9c                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
15f9c                 | ' if fortable(fortop).stepval>=0 then
15f9c     3B 00 00 FF 
15fa0     38 E5 05 F1 | 	add	objptr, ##30520
15fa4     F2 2C 02 FB | 	rdlong	local04, objptr
15fa8     16 13 02 F6 | 	mov	arg01, local04
15fac     02 12 66 F0 | 	shl	arg01, #2
15fb0     16 13 02 F1 | 	add	arg01, local04
15fb4     02 12 66 F0 | 	shl	arg01, #2
15fb8     06 00 00 FF 
15fbc     98 E4 85 F1 | 	sub	objptr, ##3224
15fc0     F2 12 02 F1 | 	add	arg01, objptr
15fc4     0C 12 06 F1 | 	add	arg01, #12
15fc8     09 13 02 FB | 	rdlong	arg01, arg01
15fcc     00 12 56 F2 | 	cmps	arg01, #0 wc
15fd0     4A 00 00 FF 
15fd4     98 E4 85 F1 | 	sub	objptr, ##38040
15fd8     78 00 90 CD |  if_b	jmp	#LR__1792
15fdc                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
15fdc     04 26 66 F0 | 	shl	local01, #4
15fe0     14 00 00 FF 
15fe4     F8 E5 05 F1 | 	add	objptr, ##10744
15fe8     F2 26 02 F1 | 	add	local01, objptr
15fec     3B 00 00 FF 
15ff0     38 E5 05 F1 | 	add	objptr, ##30520
15ff4     F2 12 02 FB | 	rdlong	arg01, objptr
15ff8     09 2D 02 F6 | 	mov	local04, arg01
15ffc     02 2C 66 F0 | 	shl	local04, #2
16000     09 2D 02 F1 | 	add	local04, arg01
16004     02 2C 66 F0 | 	shl	local04, #2
16008     06 00 00 FF 
1600c     98 E4 85 F1 | 	sub	objptr, ##3224
16010     F2 2C 02 F1 | 	add	local04, objptr
16014     04 26 06 F1 | 	add	local01, #4
16018     13 27 02 FB | 	rdlong	local01, local01
1601c     10 2C 06 F1 | 	add	local04, #16
16020     16 2D 02 FB | 	rdlong	local04, local04
16024     16 27 5A F2 | 	cmps	local01, local04 wcz
16028     4A 00 00 FF 
1602c     98 E4 85 F1 | 	sub	objptr, ##38040
16030     9C 00 90 ED |  if_be	jmp	#LR__1794
16034     50 00 00 FF 
16038     30 E5 05 F1 | 	add	objptr, ##41264
1603c     F2 2C 02 FB | 	rdlong	local04, objptr
16040     01 2C 86 F1 | 	sub	local04, #1
16044     F2 2C 62 FC | 	wrlong	local04, objptr
16048     50 00 00 FF 
1604c     30 E5 85 F1 | 	sub	objptr, ##41264
16050     B8 01 90 FD | 	jmp	#LR__1797
16054                 | LR__1792
16054                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
16054     13 2D 02 F6 | 	mov	local04, local01
16058     04 2C 66 F0 | 	shl	local04, #4
1605c     14 00 00 FF 
16060     F8 E5 05 F1 | 	add	objptr, ##10744
16064     F2 2C 02 F1 | 	add	local04, objptr
16068     3B 00 00 FF 
1606c     38 E5 05 F1 | 	add	objptr, ##30520
16070     F2 26 02 FB | 	rdlong	local01, objptr
16074     13 13 02 F6 | 	mov	arg01, local01
16078     02 12 66 F0 | 	shl	arg01, #2
1607c     13 13 02 F1 | 	add	arg01, local01
16080     02 12 66 F0 | 	shl	arg01, #2
16084     06 00 00 FF 
16088     98 E4 85 F1 | 	sub	objptr, ##3224
1608c     F2 12 02 F1 | 	add	arg01, objptr
16090     04 2C 06 F1 | 	add	local04, #4
16094     16 2D 02 FB | 	rdlong	local04, local04
16098     10 12 06 F1 | 	add	arg01, #16
1609c     09 13 02 FB | 	rdlong	arg01, arg01
160a0     09 2D 52 F2 | 	cmps	local04, arg01 wc
160a4     4A 00 00 FF 
160a8     98 E4 85 F1 | 	sub	objptr, ##38040
160ac     20 00 90 3D |  if_ae	jmp	#LR__1793
160b0     50 00 00 FF 
160b4     30 E5 05 F1 | 	add	objptr, ##41264
160b8     F2 2C 02 FB | 	rdlong	local04, objptr
160bc     01 2C 86 F1 | 	sub	local04, #1
160c0     F2 2C 62 FC | 	wrlong	local04, objptr
160c4     50 00 00 FF 
160c8     30 E5 85 F1 | 	sub	objptr, ##41264
160cc     3C 01 90 FD | 	jmp	#LR__1797
160d0                 | LR__1793
160d0                 | LR__1794
160d0                 | ' ' if not returned, goto pointer 
160d0                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
160d0     50 00 00 FF 
160d4     EC E4 05 F1 | 	add	objptr, ##41196
160d8     F2 2C 02 FB | 	rdlong	local04, objptr
160dc     50 00 00 FF 
160e0     EC E4 85 F1 | 	sub	objptr, ##41196
160e4     01 2C 16 F2 | 	cmp	local04, #1 wc
160e8     DC 00 90 CD |  if_b	jmp	#LR__1795
160ec     50 00 00 FF 
160f0     30 E5 05 F1 | 	add	objptr, ##41264
160f4     F2 2C 02 FB | 	rdlong	local04, objptr
160f8     16 27 02 F6 | 	mov	local01, local04
160fc     02 26 66 F0 | 	shl	local01, #2
16100     16 27 02 F1 | 	add	local01, local04
16104     02 26 66 F0 | 	shl	local01, #2
16108     06 00 00 FF 
1610c     98 E4 85 F1 | 	sub	objptr, ##3224
16110     F2 26 02 F1 | 	add	local01, objptr
16114     06 00 00 FF 
16118     20 E4 05 F1 | 	add	objptr, ##3104
1611c     F2 2C 02 FB | 	rdlong	local04, objptr
16120     50 00 00 FF 
16124     B8 E4 85 F1 | 	sub	objptr, ##41144
16128     13 27 02 FB | 	rdlong	local01, local01
1612c     13 2D 0A F2 | 	cmp	local04, local01 wz
16130     94 00 90 AD |  if_e	jmp	#LR__1795
16134     50 00 00 FF 
16138     30 E5 05 F1 | 	add	objptr, ##41264
1613c     F2 2C 02 FB | 	rdlong	local04, objptr
16140     16 27 02 F6 | 	mov	local01, local04
16144     02 26 66 F0 | 	shl	local01, #2
16148     16 27 02 F1 | 	add	local01, local04
1614c     02 26 66 F0 | 	shl	local01, #2
16150     06 00 00 FF 
16154     98 E4 85 F1 | 	sub	objptr, ##3224
16158     F2 26 02 F1 | 	add	local01, objptr
1615c     13 27 02 FB | 	rdlong	local01, local01
16160     06 00 00 FF 
16164     20 E4 05 F1 | 	add	objptr, ##3104
16168     F2 26 62 FC | 	wrlong	local01, objptr
1616c     78 E4 05 F1 | 	add	objptr, #120
16170     F2 2C 02 FB | 	rdlong	local04, objptr
16174     16 27 02 F6 | 	mov	local01, local04
16178     02 26 66 F0 | 	shl	local01, #2
1617c     16 27 02 F1 | 	add	local01, local04
16180     02 26 66 F0 | 	shl	local01, #2
16184     06 00 00 FF 
16188     98 E4 85 F1 | 	sub	objptr, ##3224
1618c     F2 26 02 F1 | 	add	local01, objptr
16190     04 26 06 F1 | 	add	local01, #4
16194     13 27 02 FB | 	rdlong	local01, local01
16198     06 00 00 FF 
1619c     24 E4 05 F1 | 	add	objptr, ##3108
161a0     F2 26 62 FC | 	wrlong	local01, objptr
161a4     06 00 00 FF 
161a8     40 E4 85 F1 | 	sub	objptr, ##3136
161ac     F2 2C 02 FB | 	rdlong	local04, objptr
161b0     01 2C 86 F1 | 	sub	local04, #1
161b4     04 E4 05 F1 | 	add	objptr, #4
161b8     F2 2C 62 FC | 	wrlong	local04, objptr
161bc     4A 00 00 FF 
161c0     80 E4 85 F1 | 	sub	objptr, ##38016
161c4     44 00 90 FD | 	jmp	#LR__1796
161c8                 | LR__1795
161c8     50 00 00 FF 
161cc     30 E5 05 F1 | 	add	objptr, ##41264
161d0     F2 2C 02 FB | 	rdlong	local04, objptr
161d4     16 27 02 F6 | 	mov	local01, local04
161d8     02 26 66 F0 | 	shl	local01, #2
161dc     16 27 02 F1 | 	add	local01, local04
161e0     02 26 66 F0 | 	shl	local01, #2
161e4     06 00 00 FF 
161e8     98 E4 85 F1 | 	sub	objptr, ##3224
161ec     F2 26 02 F1 | 	add	local01, objptr
161f0     04 26 06 F1 | 	add	local01, #4
161f4     13 27 02 FB | 	rdlong	local01, local01
161f8     01 26 86 F1 | 	sub	local01, #1
161fc     18 E4 85 F1 | 	sub	objptr, #24
16200     F2 26 62 FC | 	wrlong	local01, objptr
16204     4A 00 00 FF 
16208     80 E4 85 F1 | 	sub	objptr, ##38016
1620c                 | LR__1796
1620c                 | LR__1797
1620c     A7 F0 03 F6 | 	mov	ptra, fp
16210     B2 00 A0 FD | 	call	#popregs_
16214                 | _do_next_ret
16214     2D 00 64 FD | 	ret
16218                 | 
16218                 | ' 
16218                 | ' '-------------------- no command (print "Unknown command")
16218                 | ' 
16218                 | ' sub do_no_command
16218                 | _do_no_command
16218     50 00 00 FF 
1621c     F0 E4 05 F1 | 	add	objptr, ##41200
16220     F2 14 02 FB | 	rdlong	arg02, objptr
16224     50 00 00 FF 
16228     F0 E4 85 F1 | 	sub	objptr, ##41200
1622c     17 12 06 F6 | 	mov	arg01, #23
16230     14 CB B0 FD | 	call	#_printerror
16234                 | _do_no_command_ret
16234     2D 00 64 FD | 	ret
16238                 | 
16238                 | ' 
16238                 | ' '-------------------- nothing
16238                 | ' 
16238                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
16238                 | _do_nothing
16238                 | _do_nothing_ret
16238     2D 00 64 FD | 	ret
1623c                 | 
1623c                 | ' 
1623c                 | ' '-------------------- on
1623c                 | ' 
1623c                 | ' sub do_on
1623c                 | _do_on
1623c     01 4A 05 F6 | 	mov	COUNT_, #1
16240     A8 00 A0 FD | 	call	#pushregs_
16244     18 F0 07 F1 | 	add	ptra, #24
16248     4A 00 00 FF 
1624c     80 E4 05 F1 | 	add	objptr, ##38016
16250     F2 12 02 FB | 	rdlong	arg01, objptr
16254     09 FD 01 F6 | 	mov	result2, arg01
16258     01 FC 65 F0 | 	shl	result2, #1
1625c     09 FD 01 F1 | 	add	result2, arg01
16260     02 FC 65 F0 | 	shl	result2, #2
16264     03 00 00 FF 
16268     04 E4 85 F1 | 	sub	objptr, ##1540
1626c     F2 FC 01 F1 | 	add	result2, objptr
16270     FE 12 02 FB | 	rdlong	arg01, result2
16274     14 4E 05 F1 | 	add	fp, #20
16278     A7 12 62 FC | 	wrlong	arg01, fp
1627c     03 00 00 FF 
16280     04 E4 05 F1 | 	add	objptr, ##1540
16284     F2 12 02 FB | 	rdlong	arg01, objptr
16288     09 27 02 F6 | 	mov	local01, arg01
1628c     01 26 66 F0 | 	shl	local01, #1
16290     09 27 02 F1 | 	add	local01, arg01
16294     02 26 66 F0 | 	shl	local01, #2
16298     03 00 00 FF 
1629c     04 E4 85 F1 | 	sub	objptr, ##1540
162a0     F2 26 02 F1 | 	add	local01, objptr
162a4     04 26 06 F1 | 	add	local01, #4
162a8     13 27 02 FB | 	rdlong	local01, local01
162ac     08 4E 85 F1 | 	sub	fp, #8
162b0     A7 26 62 FC | 	wrlong	local01, fp
162b4     0C 4E 85 F1 | 	sub	fp, #12
162b8     47 00 00 FF 
162bc     7C E4 85 F1 | 	sub	objptr, ##36476
162c0     90 72 BF FD | 	call	#_pop
162c4     FF 26 02 F6 | 	mov	local01, result3
162c8     A7 FA 61 FC | 	wrlong	result1, fp
162cc     04 4E 05 F1 | 	add	fp, #4
162d0     A7 FC 61 FC | 	wrlong	result2, fp
162d4     04 4E 05 F1 | 	add	fp, #4
162d8     A7 26 62 FC | 	wrlong	local01, fp
162dc     08 4E 85 F1 | 	sub	fp, #8
162e0     A7 12 02 F6 | 	mov	arg01, fp
162e4     50 74 BF FD | 	call	#_converttoint
162e8     10 4E 05 F1 | 	add	fp, #16
162ec     A7 FA 61 FC | 	wrlong	result1, fp
162f0                 | ' 
162f0                 | ' numpar=compiledline(lineptr_e).result.uresult
162f0                 | ' skip=compiledline(lineptr_e).result.twowords(1)
162f0                 | ' t1=pop()
162f0                 | ' t=converttoint(t1)
162f0                 | ' if t<1 orelse t>numpar then return
162f0     10 4E 85 F1 | 	sub	fp, #16
162f4     01 FA 55 F2 | 	cmps	result1, #1 wc
162f8     58 00 90 CD |  if_b	jmp	#LR__1800
162fc     10 4E 05 F1 | 	add	fp, #16
16300     A7 26 02 FB | 	rdlong	local01, fp
16304     04 4E 05 F1 | 	add	fp, #4
16308     A7 12 02 FB | 	rdlong	arg01, fp
1630c     14 4E 85 F1 | 	sub	fp, #20
16310     09 27 5A F2 | 	cmps	local01, arg01 wcz
16314     3C 00 90 1D |  if_a	jmp	#LR__1800
16318     10 4E 05 F1 | 	add	fp, #16
1631c     A7 26 02 FB | 	rdlong	local01, fp
16320     01 26 86 F1 | 	sub	local01, #1
16324     04 4E 85 F1 | 	sub	fp, #4
16328     A7 12 02 FB | 	rdlong	arg01, fp
1632c     13 13 02 FD | 	qmul	arg01, local01
16330     4A 00 00 FF 
16334     80 E4 05 F1 | 	add	objptr, ##38016
16338     F2 26 02 FB | 	rdlong	local01, objptr
1633c     0C 4E 85 F1 | 	sub	fp, #12
16340     18 12 62 FD | 	getqx	arg01
16344     09 27 02 F1 | 	add	local01, arg01
16348     F2 26 62 FC | 	wrlong	local01, objptr
1634c     4A 00 00 FF 
16350     80 E4 85 F1 | 	sub	objptr, ##38016
16354                 | LR__1800
16354     A7 F0 03 F6 | 	mov	ptra, fp
16358     B2 00 A0 FD | 	call	#popregs_
1635c                 | _do_on_ret
1635c     2D 00 64 FD | 	ret
16360                 | 
16360                 | ' 
16360                 | ' '-------------------- open
16360                 | ' 
16360                 | ' sub do_open
16360                 | _do_open
16360     02 4A 05 F6 | 	mov	COUNT_, #2
16364     A8 00 A0 FD | 	call	#pushregs_
16368     20 F0 07 F1 | 	add	ptra, #32
1636c     4A 00 00 FF 
16370     80 E4 05 F1 | 	add	objptr, ##38016
16374     F2 16 02 FB | 	rdlong	arg03, objptr
16378     0B 15 02 F6 | 	mov	arg02, arg03
1637c     01 14 66 F0 | 	shl	arg02, #1
16380     0B 15 02 F1 | 	add	arg02, arg03
16384     02 14 66 F0 | 	shl	arg02, #2
16388     03 00 00 FF 
1638c     04 E4 85 F1 | 	sub	objptr, ##1540
16390     F2 14 02 F1 | 	add	arg02, objptr
16394     0A 17 02 FB | 	rdlong	arg03, arg02
16398     10 4E 05 F1 | 	add	fp, #16
1639c     A7 16 62 FC | 	wrlong	arg03, fp
163a0     10 4E 85 F1 | 	sub	fp, #16
163a4     47 00 00 FF 
163a8     7C E4 85 F1 | 	sub	objptr, ##36476
163ac     A4 71 BF FD | 	call	#_pop
163b0     FF 16 02 F6 | 	mov	arg03, result3
163b4     A7 FA 61 FC | 	wrlong	result1, fp
163b8     04 4E 05 F1 | 	add	fp, #4
163bc     A7 FC 61 FC | 	wrlong	result2, fp
163c0     04 4E 05 F1 | 	add	fp, #4
163c4     A7 16 62 FC | 	wrlong	arg03, fp
163c8                 | ' 
163c8                 | ' numpar=compiledline(lineptr_e).result.uresult
163c8                 | ' 
163c8                 | ' t1=pop()
163c8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
163c8     08 4E 85 F1 | 	sub	fp, #8
163cc     2B 16 0E F2 | 	cmp	arg03, #43 wz
163d0     18 00 90 5D |  if_ne	jmp	#LR__1810
163d4     A7 12 02 FB | 	rdlong	arg01, fp
163d8     F0 72 BF FD | 	call	#_convertstring
163dc     A7 FA 61 FC | 	wrlong	result1, fp
163e0     08 4E 05 F1 | 	add	fp, #8
163e4     A7 3E 68 FC | 	wrlong	#31, fp
163e8     08 4E 85 F1 | 	sub	fp, #8
163ec                 | LR__1810
163ec                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
163ec     08 4E 05 F1 | 	add	fp, #8
163f0     A7 16 02 FB | 	rdlong	arg03, fp
163f4     08 4E 85 F1 | 	sub	fp, #8
163f8     1F 16 0E F2 | 	cmp	arg03, #31 wz
163fc     44 00 90 AD |  if_e	jmp	#LR__1811
16400     00 12 06 F6 | 	mov	arg01, #0
16404     54 60 B1 FD | 	call	#__system___getiolock_0603
16408     FD 12 02 F6 | 	mov	arg01, result1
1640c     24 03 B1 FD | 	call	#__system___lockmem
16410     B6 01 00 FF 
16414     E7 14 06 F6 | 	mov	arg02, ##@LR__5930
16418     00 12 06 F6 | 	mov	arg01, #0
1641c     00 16 06 F6 | 	mov	arg03, #0
16420     04 10 B1 FD | 	call	#__system___basic_print_string
16424     00 12 06 F6 | 	mov	arg01, #0
16428     0A 14 06 F6 | 	mov	arg02, #10
1642c     00 16 06 F6 | 	mov	arg03, #0
16430     9C 0F B1 FD | 	call	#__system___basic_print_char
16434     00 12 06 F6 | 	mov	arg01, #0
16438     20 60 B1 FD | 	call	#__system___getiolock_0603
1643c     FD 00 68 FC | 	wrlong	#0, result1
16440     28 02 90 FD | 	jmp	#LR__1822
16444                 | LR__1811
16444     A7 16 02 FB | 	rdlong	arg03, fp
16448     0C 4E 05 F1 | 	add	fp, #12
1644c     A7 16 62 FC | 	wrlong	arg03, fp
16450     0C 4E 85 F1 | 	sub	fp, #12
16454     FC 70 BF FD | 	call	#_pop
16458     FF 16 02 F6 | 	mov	arg03, result3
1645c     A7 FA 61 FC | 	wrlong	result1, fp
16460     04 4E 05 F1 | 	add	fp, #4
16464     A7 FC 61 FC | 	wrlong	result2, fp
16468     04 4E 05 F1 | 	add	fp, #4
1646c     A7 16 62 FC | 	wrlong	arg03, fp
16470                 | ' filename=t1.result.sresult
16470                 | ' t1=pop()
16470                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16470     08 4E 85 F1 | 	sub	fp, #8
16474     2B 16 0E F2 | 	cmp	arg03, #43 wz
16478     18 00 90 5D |  if_ne	jmp	#LR__1812
1647c     A7 12 02 FB | 	rdlong	arg01, fp
16480     48 72 BF FD | 	call	#_convertstring
16484     A7 FA 61 FC | 	wrlong	result1, fp
16488     08 4E 05 F1 | 	add	fp, #8
1648c     A7 3E 68 FC | 	wrlong	#31, fp
16490     08 4E 85 F1 | 	sub	fp, #8
16494                 | LR__1812
16494     14 4E 05 F1 | 	add	fp, #20
16498     A7 00 68 FC | 	wrlong	#0, fp
1649c                 | ' mode=0
1649c                 | ' if t1.result_type=result_string then
1649c     0C 4E 85 F1 | 	sub	fp, #12
164a0     A7 14 02 FB | 	rdlong	arg02, fp
164a4     08 4E 85 F1 | 	sub	fp, #8
164a8     1F 14 0E F2 | 	cmp	arg02, #31 wz
164ac     64 00 90 5D |  if_ne	jmp	#LR__1813
164b0                 | '   if t1.result.sresult="read" then mode=1
164b0     A7 12 02 FB | 	rdlong	arg01, fp
164b4     B6 01 00 FF 
164b8     F9 14 06 F6 | 	mov	arg02, ##@LR__5931
164bc     9C 02 B1 FD | 	call	#__system___string_cmp
164c0     00 FA 0D F2 | 	cmp	result1, #0 wz
164c4     14 4E 05 A1 |  if_e	add	fp, #20
164c8     A7 02 68 AC |  if_e	wrlong	#1, fp
164cc     14 4E 85 A1 |  if_e	sub	fp, #20
164d0                 | '   if t1.result.sresult="write" then mode=2
164d0     A7 12 02 FB | 	rdlong	arg01, fp
164d4     B6 01 00 FF 
164d8     FE 14 06 F6 | 	mov	arg02, ##@LR__5932
164dc     7C 02 B1 FD | 	call	#__system___string_cmp
164e0     00 FA 0D F2 | 	cmp	result1, #0 wz
164e4     14 4E 05 A1 |  if_e	add	fp, #20
164e8     A7 04 68 AC |  if_e	wrlong	#2, fp
164ec     14 4E 85 A1 |  if_e	sub	fp, #20
164f0                 | '   if t1.result.sresult="append" then mode=4
164f0     A7 12 02 FB | 	rdlong	arg01, fp
164f4     B6 01 00 FF 
164f8     04 15 06 F6 | 	mov	arg02, ##@LR__5933
164fc     5C 02 B1 FD | 	call	#__system___string_cmp
16500     00 FA 0D F2 | 	cmp	result1, #0 wz
16504     14 4E 05 A1 |  if_e	add	fp, #20
16508     A7 08 68 AC |  if_e	wrlong	#4, fp
1650c     14 4E 85 A1 |  if_e	sub	fp, #20
16510     14 00 90 FD | 	jmp	#LR__1814
16514                 | LR__1813
16514     A7 12 02 F6 | 	mov	arg01, fp
16518     1C 72 BF FD | 	call	#_converttoint
1651c     14 4E 05 F1 | 	add	fp, #20
16520     A7 FA 61 FC | 	wrlong	result1, fp
16524     14 4E 85 F1 | 	sub	fp, #20
16528                 | LR__1814
16528     28 70 BF FD | 	call	#_pop
1652c     FF 16 02 F6 | 	mov	arg03, result3
16530     A7 FA 61 FC | 	wrlong	result1, fp
16534     04 4E 05 F1 | 	add	fp, #4
16538     A7 FC 61 FC | 	wrlong	result2, fp
1653c     04 4E 05 F1 | 	add	fp, #4
16540     A7 16 62 FC | 	wrlong	arg03, fp
16544                 | ' t1=pop()
16544                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
16544     08 4E 85 F1 | 	sub	fp, #8
16548     2C 16 0E F2 | 	cmp	arg03, #44 wz
1654c     44 00 90 AD |  if_e	jmp	#LR__1815
16550     00 12 06 F6 | 	mov	arg01, #0
16554     04 5F B1 FD | 	call	#__system___getiolock_0603
16558     FD 12 02 F6 | 	mov	arg01, result1
1655c     D4 01 B1 FD | 	call	#__system___lockmem
16560     B6 01 00 FF 
16564     0B 15 06 F6 | 	mov	arg02, ##@LR__5934
16568     00 12 06 F6 | 	mov	arg01, #0
1656c     00 16 06 F6 | 	mov	arg03, #0
16570     B4 0E B1 FD | 	call	#__system___basic_print_string
16574     00 12 06 F6 | 	mov	arg01, #0
16578     0A 14 06 F6 | 	mov	arg02, #10
1657c     00 16 06 F6 | 	mov	arg03, #0
16580     4C 0E B1 FD | 	call	#__system___basic_print_char
16584     00 12 06 F6 | 	mov	arg01, #0
16588     D0 5E B1 FD | 	call	#__system___getiolock_0603
1658c     FD 00 68 FC | 	wrlong	#0, result1
16590     D8 00 90 FD | 	jmp	#LR__1822
16594                 | LR__1815
16594     A7 26 02 FB | 	rdlong	local01, fp
16598     18 4E 05 F1 | 	add	fp, #24
1659c     A7 26 62 FC | 	wrlong	local01, fp
165a0                 | ' channel  = t1.result.iresult
165a0                 | ' select case  mode
165a0     04 4E 85 F1 | 	sub	fp, #4
165a4     A7 28 02 FB | 	rdlong	local02, fp
165a8     14 4E 85 F1 | 	sub	fp, #20
165ac     01 28 86 F1 | 	sub	local02, #1
165b0     04 28 26 F3 | 	fle	local02, #4
165b4     30 28 62 FD | 	jmprel	local02
165b8                 | LR__1816
165b8     10 00 90 FD | 	jmp	#LR__1817
165bc     2C 00 90 FD | 	jmp	#LR__1818
165c0     68 00 90 FD | 	jmp	#LR__1820
165c4     44 00 90 FD | 	jmp	#LR__1819
165c8     60 00 90 FD | 	jmp	#LR__1820
165cc                 | LR__1817
165cc     18 4E 05 F1 | 	add	fp, #24
165d0     A7 12 02 FB | 	rdlong	arg01, fp
165d4     0C 4E 85 F1 | 	sub	fp, #12
165d8     A7 14 02 FB | 	rdlong	arg02, fp
165dc     0C 4E 85 F1 | 	sub	fp, #12
165e0     00 16 06 F6 | 	mov	arg03, #0
165e4     50 0D B1 FD | 	call	#__system___basic_open_string
165e8     80 00 90 FD | 	jmp	#LR__1821
165ec                 | LR__1818
165ec     18 4E 05 F1 | 	add	fp, #24
165f0     A7 12 02 FB | 	rdlong	arg01, fp
165f4     0C 4E 85 F1 | 	sub	fp, #12
165f8     A7 14 02 FB | 	rdlong	arg02, fp
165fc     0C 4E 85 F1 | 	sub	fp, #12
16600     0D 16 06 F6 | 	mov	arg03, #13
16604     30 0D B1 FD | 	call	#__system___basic_open_string
16608     60 00 90 FD | 	jmp	#LR__1821
1660c                 | LR__1819
1660c     18 4E 05 F1 | 	add	fp, #24
16610     A7 12 02 FB | 	rdlong	arg01, fp
16614     0C 4E 85 F1 | 	sub	fp, #12
16618     A7 14 02 FB | 	rdlong	arg02, fp
1661c     0C 4E 85 F1 | 	sub	fp, #12
16620     25 16 06 F6 | 	mov	arg03, #37
16624     10 0D B1 FD | 	call	#__system___basic_open_string
16628     40 00 90 FD | 	jmp	#LR__1821
1662c                 | LR__1820
1662c     00 12 06 F6 | 	mov	arg01, #0
16630     28 5E B1 FD | 	call	#__system___getiolock_0603
16634     FD 12 02 F6 | 	mov	arg01, result1
16638     F8 00 B1 FD | 	call	#__system___lockmem
1663c     B6 01 00 FF 
16640     1D 15 06 F6 | 	mov	arg02, ##@LR__5935
16644     00 12 06 F6 | 	mov	arg01, #0
16648     00 16 06 F6 | 	mov	arg03, #0
1664c     D8 0D B1 FD | 	call	#__system___basic_print_string
16650     00 12 06 F6 | 	mov	arg01, #0
16654     0A 14 06 F6 | 	mov	arg02, #10
16658     00 16 06 F6 | 	mov	arg03, #0
1665c     70 0D B1 FD | 	call	#__system___basic_print_char
16660     00 12 06 F6 | 	mov	arg01, #0
16664     F4 5D B1 FD | 	call	#__system___getiolock_0603
16668     FD 00 68 FC | 	wrlong	#0, result1
1666c                 | LR__1821
1666c                 | LR__1822
1666c     A7 F0 03 F6 | 	mov	ptra, fp
16670     B2 00 A0 FD | 	call	#popregs_
16674                 | _do_open_ret
16674     2D 00 64 FD | 	ret
16678                 | 
16678                 | ' 
16678                 | ' ' ------------------ padh
16678                 | ' 
16678                 | ' sub do_padh
16678                 | _do_padh
16678     01 4A 05 F6 | 	mov	COUNT_, #1
1667c     A8 00 A0 FD | 	call	#pushregs_
16680     14 F0 07 F1 | 	add	ptra, #20
16684     4A 00 00 FF 
16688     80 E4 05 F1 | 	add	objptr, ##38016
1668c     F2 26 02 FB | 	rdlong	local01, objptr
16690     13 17 02 F6 | 	mov	arg03, local01
16694     01 16 66 F0 | 	shl	arg03, #1
16698     13 17 02 F1 | 	add	arg03, local01
1669c     02 16 66 F0 | 	shl	arg03, #2
166a0     03 00 00 FF 
166a4     04 E4 85 F1 | 	sub	objptr, ##1540
166a8     F2 16 02 F1 | 	add	arg03, objptr
166ac     0B 17 02 FB | 	rdlong	arg03, arg03
166b0     0C 4E 05 F1 | 	add	fp, #12
166b4     A7 16 62 FC | 	wrlong	arg03, fp
166b8                 | ' 
166b8                 | ' numpar=compiledline(lineptr_e).result.uresult
166b8                 | ' if numpar>1 then print "padh: "; : printerror(39) : return
166b8     0C 4E 85 F1 | 	sub	fp, #12
166bc     02 16 16 F2 | 	cmp	arg03, #2 wc
166c0     47 00 00 FF 
166c4     7C E4 85 F1 | 	sub	objptr, ##36476
166c8     40 00 90 CD |  if_b	jmp	#LR__1830
166cc     00 12 06 F6 | 	mov	arg01, #0
166d0     88 5D B1 FD | 	call	#__system___getiolock_0603
166d4     FD 12 02 F6 | 	mov	arg01, result1
166d8     58 00 B1 FD | 	call	#__system___lockmem
166dc     B6 01 00 FF 
166e0     30 15 06 F6 | 	mov	arg02, ##@LR__5936
166e4     00 12 06 F6 | 	mov	arg01, #0
166e8     00 16 06 F6 | 	mov	arg03, #0
166ec     38 0D B1 FD | 	call	#__system___basic_print_string
166f0     00 12 06 F6 | 	mov	arg01, #0
166f4     64 5D B1 FD | 	call	#__system___getiolock_0603
166f8     FD 00 68 FC | 	wrlong	#0, result1
166fc     27 12 06 F6 | 	mov	arg01, #39
16700     00 14 06 F6 | 	mov	arg02, #0
16704     40 C6 B0 FD | 	call	#_printerror
16708     F0 00 90 FD | 	jmp	#LR__1834
1670c                 | LR__1830
1670c                 | ' if numpar=0 then 
1670c     0C 4E 05 F1 | 	add	fp, #12
16710     A7 FE 09 FB | 	rdlong	result3, fp wz
16714     0C 4E 85 F1 | 	sub	fp, #12
16718     30 00 90 5D |  if_ne	jmp	#LR__1831
1671c     51 00 00 FF 
16720     AC E5 05 F1 | 	add	objptr, ##41900
16724     F2 26 02 FB | 	rdlong	local01, objptr
16728     51 00 00 FF 
1672c     AC E5 85 F1 | 	sub	objptr, ##41900
16730     A7 26 62 FC | 	wrlong	local01, fp
16734     08 4E 05 F1 | 	add	fp, #8
16738     A7 38 68 FC | 	wrlong	#28, fp
1673c     08 4E 85 F1 | 	sub	fp, #8
16740     A7 12 02 F6 | 	mov	arg01, fp
16744     A4 6E BF FD | 	call	#_push
16748                 | '   t1.result.uresult=padh(0): t1.result_type=result_int : push t1 : return
16748     B0 00 90 FD | 	jmp	#LR__1834
1674c                 | LR__1831
1674c     04 6E BF FD | 	call	#_pop
16750     A7 FA 61 FC | 	wrlong	result1, fp
16754     04 4E 05 F1 | 	add	fp, #4
16758     A7 FC 61 FC | 	wrlong	result2, fp
1675c     04 4E 05 F1 | 	add	fp, #4
16760     A7 FE 61 FC | 	wrlong	result3, fp
16764                 | ' t1=pop()
16764                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16764     08 4E 85 F1 | 	sub	fp, #8
16768     1C FE 0D F2 | 	cmp	result3, #28 wz
1676c     08 4E 05 51 |  if_ne	add	fp, #8
16770     A7 26 02 5B |  if_ne	rdlong	local01, fp
16774     08 4E 85 51 |  if_ne	sub	fp, #8
16778     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1677c     70 00 90 5D |  if_ne	jmp	#LR__1833
16780     A7 26 02 FB | 	rdlong	local01, fp
16784     52 00 00 FF 
16788     08 E5 05 F1 | 	add	objptr, ##42248
1678c     F2 26 62 FC | 	wrlong	local01, objptr
16790                 | '   q=t1.result.uresult
16790                 | '   if q<7 then 
16790     52 00 00 FF 
16794     08 E5 85 F1 | 	sub	objptr, ##42248
16798     07 26 56 F2 | 	cmps	local01, #7 wc
1679c     40 00 90 3D |  if_ae	jmp	#LR__1832
167a0     52 00 00 FF 
167a4     08 E5 05 F1 | 	add	objptr, ##42248
167a8     F2 26 02 FB | 	rdlong	local01, objptr
167ac     02 26 66 F0 | 	shl	local01, #2
167b0     5C E5 85 F1 | 	sub	objptr, #348
167b4     F2 26 02 F1 | 	add	local01, objptr
167b8     13 27 02 FB | 	rdlong	local01, local01
167bc     A7 26 62 FC | 	wrlong	local01, fp
167c0     08 4E 05 F1 | 	add	fp, #8
167c4     A7 38 68 FC | 	wrlong	#28, fp
167c8     08 4E 85 F1 | 	sub	fp, #8
167cc     A7 12 02 F6 | 	mov	arg01, fp
167d0     51 00 00 FF 
167d4     AC E5 85 F1 | 	sub	objptr, ##41900
167d8     10 6E BF FD | 	call	#_push
167dc                 | '     t1.result.uresult=padh(q): t1.result_type=result_int : push t1 : return 
167dc     1C 00 90 FD | 	jmp	#LR__1834
167e0                 | LR__1832
167e0     29 12 06 F6 | 	mov	arg01, #41
167e4     00 14 06 F6 | 	mov	arg02, #0
167e8     5C C5 B0 FD | 	call	#_printerror
167ec                 | '      printerror(41) : return
167ec     0C 00 90 FD | 	jmp	#LR__1834
167f0                 | LR__1833
167f0     29 12 06 F6 | 	mov	arg01, #41
167f4     00 14 06 F6 | 	mov	arg02, #0
167f8     4C C5 B0 FD | 	call	#_printerror
167fc                 | LR__1834
167fc     A7 F0 03 F6 | 	mov	ptra, fp
16800     B2 00 A0 FD | 	call	#popregs_
16804                 | _do_padh_ret
16804     2D 00 64 FD | 	ret
16808                 | 
16808                 | ' 
16808                 | ' ' ------------------ padrx
16808                 | ' 
16808                 | ' sub do_padrx
16808                 | _do_padrx
16808     02 4A 05 F6 | 	mov	COUNT_, #2
1680c     A8 00 A0 FD | 	call	#pushregs_
16810     14 F0 07 F1 | 	add	ptra, #20
16814     4A 00 00 FF 
16818     80 E4 05 F1 | 	add	objptr, ##38016
1681c     F2 26 02 FB | 	rdlong	local01, objptr
16820     13 17 02 F6 | 	mov	arg03, local01
16824     01 16 66 F0 | 	shl	arg03, #1
16828     13 17 02 F1 | 	add	arg03, local01
1682c     02 16 66 F0 | 	shl	arg03, #2
16830     03 00 00 FF 
16834     04 E4 85 F1 | 	sub	objptr, ##1540
16838     F2 16 02 F1 | 	add	arg03, objptr
1683c     0B 17 02 FB | 	rdlong	arg03, arg03
16840     0C 4E 05 F1 | 	add	fp, #12
16844     A7 16 62 FC | 	wrlong	arg03, fp
16848                 | ' 
16848                 | ' numpar=compiledline(lineptr_e).result.uresult
16848                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
16848     0C 4E 85 F1 | 	sub	fp, #12
1684c     02 16 16 F2 | 	cmp	arg03, #2 wc
16850     47 00 00 FF 
16854     7C E4 85 F1 | 	sub	objptr, ##36476
16858     40 00 90 CD |  if_b	jmp	#LR__1840
1685c     00 12 06 F6 | 	mov	arg01, #0
16860     F8 5B B1 FD | 	call	#__system___getiolock_0603
16864     FD 12 02 F6 | 	mov	arg01, result1
16868     C8 FE B0 FD | 	call	#__system___lockmem
1686c     B6 01 00 FF 
16870     37 15 06 F6 | 	mov	arg02, ##@LR__5937
16874     00 12 06 F6 | 	mov	arg01, #0
16878     00 16 06 F6 | 	mov	arg03, #0
1687c     A8 0B B1 FD | 	call	#__system___basic_print_string
16880     00 12 06 F6 | 	mov	arg01, #0
16884     D4 5B B1 FD | 	call	#__system___getiolock_0603
16888     FD 00 68 FC | 	wrlong	#0, result1
1688c     27 12 06 F6 | 	mov	arg01, #39
16890     00 14 06 F6 | 	mov	arg02, #0
16894     B0 C4 B0 FD | 	call	#_printerror
16898     E0 01 90 FD | 	jmp	#LR__1844
1689c                 | LR__1840
1689c                 | ' if numpar=0 then 
1689c     0C 4E 05 F1 | 	add	fp, #12
168a0     A7 FE 09 FB | 	rdlong	result3, fp wz
168a4     0C 4E 85 F1 | 	sub	fp, #12
168a8     A8 00 90 5D |  if_ne	jmp	#LR__1841
168ac     00 C0 1B FF 
168b0     00 26 06 F6 | 	mov	local01, ##931135488
168b4     51 00 00 FF 
168b8     C8 E5 05 F1 | 	add	objptr, ##41928
168bc     F2 12 02 FB | 	rdlong	arg01, objptr
168c0     51 00 00 FF 
168c4     C8 E5 85 F1 | 	sub	objptr, ##41928
168c8     09 13 52 F6 | 	abs	arg01, arg01 wc
168cc     1F 28 C6 C9 |  if_b	decod	local02, #31
168d0     00 28 06 36 |  if_ae	mov	local02, #0
168d4     D0 28 B1 FD | 	call	#__system___float_fromuns
168d8     14 FB 61 F5 | 	xor	result1, local02
168dc     FD 12 02 F6 | 	mov	arg01, result1
168e0     FF 7F 23 FF 
168e4     00 14 06 F6 | 	mov	arg02, ##1191181824
168e8     C4 2E B1 FD | 	call	#__system___float_div
168ec     FD 14 02 F6 | 	mov	arg02, result1
168f0     13 13 02 F6 | 	mov	arg01, local01
168f4     E4 28 B1 FD | 	call	#__system___float_add
168f8     10 4E 05 F1 | 	add	fp, #16
168fc     A7 FA 61 FC | 	wrlong	result1, fp
16900                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16900     10 4E 85 F1 | 	sub	fp, #16
16904     1F FA 05 F4 | 	bitl	result1, #31
16908     FD 12 02 F6 | 	mov	arg01, result1
1690c     89 41 1D FF 
16910     6F 14 06 F6 | 	mov	arg02, ##981668463
16914     01 16 06 F6 | 	mov	arg03, #1
16918     C4 30 B1 FD | 	call	#__system___float_cmp
1691c     00 FA 55 F2 | 	cmps	result1, #0 wc
16920     10 4E 05 C1 |  if_b	add	fp, #16
16924     A7 00 68 CC |  if_b	wrlong	#0, fp
16928     10 4E 85 C1 |  if_b	sub	fp, #16
1692c     10 4E 05 F1 | 	add	fp, #16
16930     A7 26 02 FB | 	rdlong	local01, fp
16934     10 4E 85 F1 | 	sub	fp, #16
16938     A7 26 62 FC | 	wrlong	local01, fp
1693c     08 4E 05 F1 | 	add	fp, #8
16940     A7 3C 68 FC | 	wrlong	#30, fp
16944     08 4E 85 F1 | 	sub	fp, #8
16948     A7 12 02 F6 | 	mov	arg01, fp
1694c     9C 6C BF FD | 	call	#_push
16950                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16950     28 01 90 FD | 	jmp	#LR__1844
16954                 | LR__1841
16954     FC 6B BF FD | 	call	#_pop
16958     A7 FA 61 FC | 	wrlong	result1, fp
1695c     04 4E 05 F1 | 	add	fp, #4
16960     A7 FC 61 FC | 	wrlong	result2, fp
16964     04 4E 05 F1 | 	add	fp, #4
16968     A7 FE 61 FC | 	wrlong	result3, fp
1696c                 | ' t1=pop()
1696c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1696c     08 4E 85 F1 | 	sub	fp, #8
16970     1C FE 0D F2 | 	cmp	result3, #28 wz
16974     08 4E 05 51 |  if_ne	add	fp, #8
16978     A7 26 02 5B |  if_ne	rdlong	local01, fp
1697c     08 4E 85 51 |  if_ne	sub	fp, #8
16980     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16984     E8 00 90 5D |  if_ne	jmp	#LR__1843
16988     A7 26 02 FB | 	rdlong	local01, fp
1698c     52 00 00 FF 
16990     08 E5 05 F1 | 	add	objptr, ##42248
16994     F2 26 62 FC | 	wrlong	local01, objptr
16998                 | '   q=t1.result.uresult
16998                 | '   if q<7 then 
16998     52 00 00 FF 
1699c     08 E5 85 F1 | 	sub	objptr, ##42248
169a0     07 26 56 F2 | 	cmps	local01, #7 wc
169a4     B8 00 90 3D |  if_ae	jmp	#LR__1842
169a8     00 C0 1B FF 
169ac     00 26 06 F6 | 	mov	local01, ##931135488
169b0     52 00 00 FF 
169b4     08 E5 05 F1 | 	add	objptr, ##42248
169b8     F2 16 02 FB | 	rdlong	arg03, objptr
169bc     02 16 66 F0 | 	shl	arg03, #2
169c0     40 E5 85 F1 | 	sub	objptr, #320
169c4     F2 16 02 F1 | 	add	arg03, objptr
169c8     0B 13 02 FB | 	rdlong	arg01, arg03
169cc     51 00 00 FF 
169d0     C8 E5 85 F1 | 	sub	objptr, ##41928
169d4     09 13 52 F6 | 	abs	arg01, arg01 wc
169d8     1F 28 C6 C9 |  if_b	decod	local02, #31
169dc     00 28 06 36 |  if_ae	mov	local02, #0
169e0     C4 27 B1 FD | 	call	#__system___float_fromuns
169e4     14 FB 61 F5 | 	xor	result1, local02
169e8     FD 12 02 F6 | 	mov	arg01, result1
169ec     FF 7F 23 FF 
169f0     00 14 06 F6 | 	mov	arg02, ##1191181824
169f4     B8 2D B1 FD | 	call	#__system___float_div
169f8     FD 14 02 F6 | 	mov	arg02, result1
169fc     13 13 02 F6 | 	mov	arg01, local01
16a00     D8 27 B1 FD | 	call	#__system___float_add
16a04     10 4E 05 F1 | 	add	fp, #16
16a08     A7 FA 61 FC | 	wrlong	result1, fp
16a0c                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16a0c     10 4E 85 F1 | 	sub	fp, #16
16a10     1F FA 05 F4 | 	bitl	result1, #31
16a14     FD 12 02 F6 | 	mov	arg01, result1
16a18     89 41 1D FF 
16a1c     6F 14 06 F6 | 	mov	arg02, ##981668463
16a20     01 16 06 F6 | 	mov	arg03, #1
16a24     B8 2F B1 FD | 	call	#__system___float_cmp
16a28     00 FA 55 F2 | 	cmps	result1, #0 wc
16a2c     10 4E 05 C1 |  if_b	add	fp, #16
16a30     A7 00 68 CC |  if_b	wrlong	#0, fp
16a34     10 4E 85 C1 |  if_b	sub	fp, #16
16a38     10 4E 05 F1 | 	add	fp, #16
16a3c     A7 26 02 FB | 	rdlong	local01, fp
16a40     10 4E 85 F1 | 	sub	fp, #16
16a44     A7 26 62 FC | 	wrlong	local01, fp
16a48     08 4E 05 F1 | 	add	fp, #8
16a4c     A7 3C 68 FC | 	wrlong	#30, fp
16a50     08 4E 85 F1 | 	sub	fp, #8
16a54     A7 12 02 F6 | 	mov	arg01, fp
16a58     90 6B BF FD | 	call	#_push
16a5c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16a5c     1C 00 90 FD | 	jmp	#LR__1844
16a60                 | LR__1842
16a60     29 12 06 F6 | 	mov	arg01, #41
16a64     00 14 06 F6 | 	mov	arg02, #0
16a68     DC C2 B0 FD | 	call	#_printerror
16a6c                 | '      printerror(41) : return
16a6c     0C 00 90 FD | 	jmp	#LR__1844
16a70                 | LR__1843
16a70     29 12 06 F6 | 	mov	arg01, #41
16a74     00 14 06 F6 | 	mov	arg02, #0
16a78     CC C2 B0 FD | 	call	#_printerror
16a7c                 | LR__1844
16a7c     A7 F0 03 F6 | 	mov	ptra, fp
16a80     B2 00 A0 FD | 	call	#popregs_
16a84                 | _do_padrx_ret
16a84     2D 00 64 FD | 	ret
16a88                 | 
16a88                 | ' 
16a88                 | ' ' ------------------ padry
16a88                 | ' 
16a88                 | ' sub do_padry
16a88                 | _do_padry
16a88     02 4A 05 F6 | 	mov	COUNT_, #2
16a8c     A8 00 A0 FD | 	call	#pushregs_
16a90     14 F0 07 F1 | 	add	ptra, #20
16a94     4A 00 00 FF 
16a98     80 E4 05 F1 | 	add	objptr, ##38016
16a9c     F2 26 02 FB | 	rdlong	local01, objptr
16aa0     13 17 02 F6 | 	mov	arg03, local01
16aa4     01 16 66 F0 | 	shl	arg03, #1
16aa8     13 17 02 F1 | 	add	arg03, local01
16aac     02 16 66 F0 | 	shl	arg03, #2
16ab0     03 00 00 FF 
16ab4     04 E4 85 F1 | 	sub	objptr, ##1540
16ab8     F2 16 02 F1 | 	add	arg03, objptr
16abc     0B 17 02 FB | 	rdlong	arg03, arg03
16ac0     0C 4E 05 F1 | 	add	fp, #12
16ac4     A7 16 62 FC | 	wrlong	arg03, fp
16ac8                 | ' 
16ac8                 | ' numpar=compiledline(lineptr_e).result.uresult
16ac8                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
16ac8     0C 4E 85 F1 | 	sub	fp, #12
16acc     02 16 16 F2 | 	cmp	arg03, #2 wc
16ad0     47 00 00 FF 
16ad4     7C E4 85 F1 | 	sub	objptr, ##36476
16ad8     40 00 90 CD |  if_b	jmp	#LR__1850
16adc     00 12 06 F6 | 	mov	arg01, #0
16ae0     78 59 B1 FD | 	call	#__system___getiolock_0603
16ae4     FD 12 02 F6 | 	mov	arg01, result1
16ae8     48 FC B0 FD | 	call	#__system___lockmem
16aec     B6 01 00 FF 
16af0     3F 15 06 F6 | 	mov	arg02, ##@LR__5938
16af4     00 12 06 F6 | 	mov	arg01, #0
16af8     00 16 06 F6 | 	mov	arg03, #0
16afc     28 09 B1 FD | 	call	#__system___basic_print_string
16b00     00 12 06 F6 | 	mov	arg01, #0
16b04     54 59 B1 FD | 	call	#__system___getiolock_0603
16b08     FD 00 68 FC | 	wrlong	#0, result1
16b0c     27 12 06 F6 | 	mov	arg01, #39
16b10     00 14 06 F6 | 	mov	arg02, #0
16b14     30 C2 B0 FD | 	call	#_printerror
16b18     E0 01 90 FD | 	jmp	#LR__1854
16b1c                 | LR__1850
16b1c                 | ' if numpar=0 then 
16b1c     0C 4E 05 F1 | 	add	fp, #12
16b20     A7 FE 09 FB | 	rdlong	result3, fp wz
16b24     0C 4E 85 F1 | 	sub	fp, #12
16b28     A8 00 90 5D |  if_ne	jmp	#LR__1851
16b2c     00 C0 1B FF 
16b30     00 26 06 F6 | 	mov	local01, ##931135488
16b34     51 00 00 FF 
16b38     E4 E5 05 F1 | 	add	objptr, ##41956
16b3c     F2 12 02 FB | 	rdlong	arg01, objptr
16b40     51 00 00 FF 
16b44     E4 E5 85 F1 | 	sub	objptr, ##41956
16b48     09 13 52 F6 | 	abs	arg01, arg01 wc
16b4c     1F 28 C6 C9 |  if_b	decod	local02, #31
16b50     00 28 06 36 |  if_ae	mov	local02, #0
16b54     50 26 B1 FD | 	call	#__system___float_fromuns
16b58     14 FB 61 F5 | 	xor	result1, local02
16b5c     FD 12 02 F6 | 	mov	arg01, result1
16b60     FF 7F 23 FF 
16b64     00 14 06 F6 | 	mov	arg02, ##1191181824
16b68     44 2C B1 FD | 	call	#__system___float_div
16b6c     FD 14 02 F6 | 	mov	arg02, result1
16b70     13 13 02 F6 | 	mov	arg01, local01
16b74     64 26 B1 FD | 	call	#__system___float_add
16b78     10 4E 05 F1 | 	add	fp, #16
16b7c     A7 FA 61 FC | 	wrlong	result1, fp
16b80                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16b80     10 4E 85 F1 | 	sub	fp, #16
16b84     1F FA 05 F4 | 	bitl	result1, #31
16b88     FD 12 02 F6 | 	mov	arg01, result1
16b8c     89 41 1D FF 
16b90     6F 14 06 F6 | 	mov	arg02, ##981668463
16b94     01 16 06 F6 | 	mov	arg03, #1
16b98     44 2E B1 FD | 	call	#__system___float_cmp
16b9c     00 FA 55 F2 | 	cmps	result1, #0 wc
16ba0     10 4E 05 C1 |  if_b	add	fp, #16
16ba4     A7 00 68 CC |  if_b	wrlong	#0, fp
16ba8     10 4E 85 C1 |  if_b	sub	fp, #16
16bac     10 4E 05 F1 | 	add	fp, #16
16bb0     A7 26 02 FB | 	rdlong	local01, fp
16bb4     10 4E 85 F1 | 	sub	fp, #16
16bb8     A7 26 62 FC | 	wrlong	local01, fp
16bbc     08 4E 05 F1 | 	add	fp, #8
16bc0     A7 3C 68 FC | 	wrlong	#30, fp
16bc4     08 4E 85 F1 | 	sub	fp, #8
16bc8     A7 12 02 F6 | 	mov	arg01, fp
16bcc     1C 6A BF FD | 	call	#_push
16bd0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16bd0     28 01 90 FD | 	jmp	#LR__1854
16bd4                 | LR__1851
16bd4     7C 69 BF FD | 	call	#_pop
16bd8     A7 FA 61 FC | 	wrlong	result1, fp
16bdc     04 4E 05 F1 | 	add	fp, #4
16be0     A7 FC 61 FC | 	wrlong	result2, fp
16be4     04 4E 05 F1 | 	add	fp, #4
16be8     A7 FE 61 FC | 	wrlong	result3, fp
16bec                 | ' t1=pop()
16bec                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16bec     08 4E 85 F1 | 	sub	fp, #8
16bf0     1C FE 0D F2 | 	cmp	result3, #28 wz
16bf4     08 4E 05 51 |  if_ne	add	fp, #8
16bf8     A7 26 02 5B |  if_ne	rdlong	local01, fp
16bfc     08 4E 85 51 |  if_ne	sub	fp, #8
16c00     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16c04     E8 00 90 5D |  if_ne	jmp	#LR__1853
16c08     A7 26 02 FB | 	rdlong	local01, fp
16c0c     52 00 00 FF 
16c10     08 E5 05 F1 | 	add	objptr, ##42248
16c14     F2 26 62 FC | 	wrlong	local01, objptr
16c18                 | '   q=t1.result.uresult
16c18                 | '   if q<7 then 
16c18     52 00 00 FF 
16c1c     08 E5 85 F1 | 	sub	objptr, ##42248
16c20     07 26 56 F2 | 	cmps	local01, #7 wc
16c24     B8 00 90 3D |  if_ae	jmp	#LR__1852
16c28     00 C0 1B FF 
16c2c     00 26 06 F6 | 	mov	local01, ##931135488
16c30     52 00 00 FF 
16c34     08 E5 05 F1 | 	add	objptr, ##42248
16c38     F2 16 02 FB | 	rdlong	arg03, objptr
16c3c     02 16 66 F0 | 	shl	arg03, #2
16c40     24 E5 85 F1 | 	sub	objptr, #292
16c44     F2 16 02 F1 | 	add	arg03, objptr
16c48     0B 13 02 FB | 	rdlong	arg01, arg03
16c4c     51 00 00 FF 
16c50     E4 E5 85 F1 | 	sub	objptr, ##41956
16c54     09 13 52 F6 | 	abs	arg01, arg01 wc
16c58     1F 28 C6 C9 |  if_b	decod	local02, #31
16c5c     00 28 06 36 |  if_ae	mov	local02, #0
16c60     44 25 B1 FD | 	call	#__system___float_fromuns
16c64     14 FB 61 F5 | 	xor	result1, local02
16c68     FD 12 02 F6 | 	mov	arg01, result1
16c6c     FF 7F 23 FF 
16c70     00 14 06 F6 | 	mov	arg02, ##1191181824
16c74     38 2B B1 FD | 	call	#__system___float_div
16c78     FD 14 02 F6 | 	mov	arg02, result1
16c7c     13 13 02 F6 | 	mov	arg01, local01
16c80     58 25 B1 FD | 	call	#__system___float_add
16c84     10 4E 05 F1 | 	add	fp, #16
16c88     A7 FA 61 FC | 	wrlong	result1, fp
16c8c                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16c8c     10 4E 85 F1 | 	sub	fp, #16
16c90     1F FA 05 F4 | 	bitl	result1, #31
16c94     FD 12 02 F6 | 	mov	arg01, result1
16c98     89 41 1D FF 
16c9c     6F 14 06 F6 | 	mov	arg02, ##981668463
16ca0     01 16 06 F6 | 	mov	arg03, #1
16ca4     38 2D B1 FD | 	call	#__system___float_cmp
16ca8     00 FA 55 F2 | 	cmps	result1, #0 wc
16cac     10 4E 05 C1 |  if_b	add	fp, #16
16cb0     A7 00 68 CC |  if_b	wrlong	#0, fp
16cb4     10 4E 85 C1 |  if_b	sub	fp, #16
16cb8     10 4E 05 F1 | 	add	fp, #16
16cbc     A7 26 02 FB | 	rdlong	local01, fp
16cc0     10 4E 85 F1 | 	sub	fp, #16
16cc4     A7 26 62 FC | 	wrlong	local01, fp
16cc8     08 4E 05 F1 | 	add	fp, #8
16ccc     A7 3C 68 FC | 	wrlong	#30, fp
16cd0     08 4E 85 F1 | 	sub	fp, #8
16cd4     A7 12 02 F6 | 	mov	arg01, fp
16cd8     10 69 BF FD | 	call	#_push
16cdc                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16cdc     1C 00 90 FD | 	jmp	#LR__1854
16ce0                 | LR__1852
16ce0     29 12 06 F6 | 	mov	arg01, #41
16ce4     00 14 06 F6 | 	mov	arg02, #0
16ce8     5C C0 B0 FD | 	call	#_printerror
16cec                 | '      printerror(41) : return
16cec     0C 00 90 FD | 	jmp	#LR__1854
16cf0                 | LR__1853
16cf0     29 12 06 F6 | 	mov	arg01, #41
16cf4     00 14 06 F6 | 	mov	arg02, #0
16cf8     4C C0 B0 FD | 	call	#_printerror
16cfc                 | LR__1854
16cfc     A7 F0 03 F6 | 	mov	ptra, fp
16d00     B2 00 A0 FD | 	call	#popregs_
16d04                 | _do_padry_ret
16d04     2D 00 64 FD | 	ret
16d08                 | 
16d08                 | ' 
16d08                 | ' ' ------------------ padrz
16d08                 | ' 
16d08                 | ' sub do_padrz
16d08                 | _do_padrz
16d08     02 4A 05 F6 | 	mov	COUNT_, #2
16d0c     A8 00 A0 FD | 	call	#pushregs_
16d10     14 F0 07 F1 | 	add	ptra, #20
16d14     4A 00 00 FF 
16d18     80 E4 05 F1 | 	add	objptr, ##38016
16d1c     F2 26 02 FB | 	rdlong	local01, objptr
16d20     13 17 02 F6 | 	mov	arg03, local01
16d24     01 16 66 F0 | 	shl	arg03, #1
16d28     13 17 02 F1 | 	add	arg03, local01
16d2c     02 16 66 F0 | 	shl	arg03, #2
16d30     03 00 00 FF 
16d34     04 E4 85 F1 | 	sub	objptr, ##1540
16d38     F2 16 02 F1 | 	add	arg03, objptr
16d3c     0B 17 02 FB | 	rdlong	arg03, arg03
16d40     0C 4E 05 F1 | 	add	fp, #12
16d44     A7 16 62 FC | 	wrlong	arg03, fp
16d48                 | ' 
16d48                 | ' numpar=compiledline(lineptr_e).result.uresult
16d48                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
16d48     0C 4E 85 F1 | 	sub	fp, #12
16d4c     02 16 16 F2 | 	cmp	arg03, #2 wc
16d50     47 00 00 FF 
16d54     7C E4 85 F1 | 	sub	objptr, ##36476
16d58     40 00 90 CD |  if_b	jmp	#LR__1860
16d5c     00 12 06 F6 | 	mov	arg01, #0
16d60     F8 56 B1 FD | 	call	#__system___getiolock_0603
16d64     FD 12 02 F6 | 	mov	arg01, result1
16d68     C8 F9 B0 FD | 	call	#__system___lockmem
16d6c     B6 01 00 FF 
16d70     47 15 06 F6 | 	mov	arg02, ##@LR__5939
16d74     00 12 06 F6 | 	mov	arg01, #0
16d78     00 16 06 F6 | 	mov	arg03, #0
16d7c     A8 06 B1 FD | 	call	#__system___basic_print_string
16d80     00 12 06 F6 | 	mov	arg01, #0
16d84     D4 56 B1 FD | 	call	#__system___getiolock_0603
16d88     FD 00 68 FC | 	wrlong	#0, result1
16d8c     27 12 06 F6 | 	mov	arg01, #39
16d90     00 14 06 F6 | 	mov	arg02, #0
16d94     B0 BF B0 FD | 	call	#_printerror
16d98     E0 01 90 FD | 	jmp	#LR__1864
16d9c                 | LR__1860
16d9c                 | ' if numpar=0 then 
16d9c     0C 4E 05 F1 | 	add	fp, #12
16da0     A7 FE 09 FB | 	rdlong	result3, fp wz
16da4     0C 4E 85 F1 | 	sub	fp, #12
16da8     A8 00 90 5D |  if_ne	jmp	#LR__1861
16dac     00 C0 1B FF 
16db0     00 26 06 F6 | 	mov	local01, ##931135488
16db4     52 00 00 FF 
16db8     00 E4 05 F1 | 	add	objptr, ##41984
16dbc     F2 12 02 FB | 	rdlong	arg01, objptr
16dc0     52 00 00 FF 
16dc4     00 E4 85 F1 | 	sub	objptr, ##41984
16dc8     09 13 52 F6 | 	abs	arg01, arg01 wc
16dcc     1F 28 C6 C9 |  if_b	decod	local02, #31
16dd0     00 28 06 36 |  if_ae	mov	local02, #0
16dd4     D0 23 B1 FD | 	call	#__system___float_fromuns
16dd8     14 FB 61 F5 | 	xor	result1, local02
16ddc     FD 12 02 F6 | 	mov	arg01, result1
16de0     FF 7F 23 FF 
16de4     00 14 06 F6 | 	mov	arg02, ##1191181824
16de8     C4 29 B1 FD | 	call	#__system___float_div
16dec     FD 14 02 F6 | 	mov	arg02, result1
16df0     13 13 02 F6 | 	mov	arg01, local01
16df4     E4 23 B1 FD | 	call	#__system___float_add
16df8     10 4E 05 F1 | 	add	fp, #16
16dfc     A7 FA 61 FC | 	wrlong	result1, fp
16e00                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16e00     10 4E 85 F1 | 	sub	fp, #16
16e04     1F FA 05 F4 | 	bitl	result1, #31
16e08     FD 12 02 F6 | 	mov	arg01, result1
16e0c     89 41 1D FF 
16e10     6F 14 06 F6 | 	mov	arg02, ##981668463
16e14     01 16 06 F6 | 	mov	arg03, #1
16e18     C4 2B B1 FD | 	call	#__system___float_cmp
16e1c     00 FA 55 F2 | 	cmps	result1, #0 wc
16e20     10 4E 05 C1 |  if_b	add	fp, #16
16e24     A7 00 68 CC |  if_b	wrlong	#0, fp
16e28     10 4E 85 C1 |  if_b	sub	fp, #16
16e2c     10 4E 05 F1 | 	add	fp, #16
16e30     A7 26 02 FB | 	rdlong	local01, fp
16e34     10 4E 85 F1 | 	sub	fp, #16
16e38     A7 26 62 FC | 	wrlong	local01, fp
16e3c     08 4E 05 F1 | 	add	fp, #8
16e40     A7 3C 68 FC | 	wrlong	#30, fp
16e44     08 4E 85 F1 | 	sub	fp, #8
16e48     A7 12 02 F6 | 	mov	arg01, fp
16e4c     9C 67 BF FD | 	call	#_push
16e50                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16e50     28 01 90 FD | 	jmp	#LR__1864
16e54                 | LR__1861
16e54     FC 66 BF FD | 	call	#_pop
16e58     A7 FA 61 FC | 	wrlong	result1, fp
16e5c     04 4E 05 F1 | 	add	fp, #4
16e60     A7 FC 61 FC | 	wrlong	result2, fp
16e64     04 4E 05 F1 | 	add	fp, #4
16e68     A7 FE 61 FC | 	wrlong	result3, fp
16e6c                 | ' t1=pop()
16e6c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16e6c     08 4E 85 F1 | 	sub	fp, #8
16e70     1C FE 0D F2 | 	cmp	result3, #28 wz
16e74     08 4E 05 51 |  if_ne	add	fp, #8
16e78     A7 26 02 5B |  if_ne	rdlong	local01, fp
16e7c     08 4E 85 51 |  if_ne	sub	fp, #8
16e80     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16e84     E8 00 90 5D |  if_ne	jmp	#LR__1863
16e88     A7 26 02 FB | 	rdlong	local01, fp
16e8c     52 00 00 FF 
16e90     08 E5 05 F1 | 	add	objptr, ##42248
16e94     F2 26 62 FC | 	wrlong	local01, objptr
16e98                 | '   q=t1.result.uresult
16e98                 | '   if q<7 then 
16e98     52 00 00 FF 
16e9c     08 E5 85 F1 | 	sub	objptr, ##42248
16ea0     07 26 56 F2 | 	cmps	local01, #7 wc
16ea4     B8 00 90 3D |  if_ae	jmp	#LR__1862
16ea8     00 C0 1B FF 
16eac     00 26 06 F6 | 	mov	local01, ##931135488
16eb0     52 00 00 FF 
16eb4     08 E5 05 F1 | 	add	objptr, ##42248
16eb8     F2 16 02 FB | 	rdlong	arg03, objptr
16ebc     02 16 66 F0 | 	shl	arg03, #2
16ec0     08 E5 85 F1 | 	sub	objptr, #264
16ec4     F2 16 02 F1 | 	add	arg03, objptr
16ec8     0B 13 02 FB | 	rdlong	arg01, arg03
16ecc     52 00 00 FF 
16ed0     00 E4 85 F1 | 	sub	objptr, ##41984
16ed4     09 13 52 F6 | 	abs	arg01, arg01 wc
16ed8     1F 28 C6 C9 |  if_b	decod	local02, #31
16edc     00 28 06 36 |  if_ae	mov	local02, #0
16ee0     C4 22 B1 FD | 	call	#__system___float_fromuns
16ee4     14 FB 61 F5 | 	xor	result1, local02
16ee8     FD 12 02 F6 | 	mov	arg01, result1
16eec     FF 7F 23 FF 
16ef0     00 14 06 F6 | 	mov	arg02, ##1191181824
16ef4     B8 28 B1 FD | 	call	#__system___float_div
16ef8     FD 14 02 F6 | 	mov	arg02, result1
16efc     13 13 02 F6 | 	mov	arg01, local01
16f00     D8 22 B1 FD | 	call	#__system___float_add
16f04     10 4E 05 F1 | 	add	fp, #16
16f08     A7 FA 61 FC | 	wrlong	result1, fp
16f0c                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16f0c     10 4E 85 F1 | 	sub	fp, #16
16f10     1F FA 05 F4 | 	bitl	result1, #31
16f14     FD 12 02 F6 | 	mov	arg01, result1
16f18     89 41 1D FF 
16f1c     6F 14 06 F6 | 	mov	arg02, ##981668463
16f20     01 16 06 F6 | 	mov	arg03, #1
16f24     B8 2A B1 FD | 	call	#__system___float_cmp
16f28     00 FA 55 F2 | 	cmps	result1, #0 wc
16f2c     10 4E 05 C1 |  if_b	add	fp, #16
16f30     A7 00 68 CC |  if_b	wrlong	#0, fp
16f34     10 4E 85 C1 |  if_b	sub	fp, #16
16f38     10 4E 05 F1 | 	add	fp, #16
16f3c     A7 26 02 FB | 	rdlong	local01, fp
16f40     10 4E 85 F1 | 	sub	fp, #16
16f44     A7 26 62 FC | 	wrlong	local01, fp
16f48     08 4E 05 F1 | 	add	fp, #8
16f4c     A7 3C 68 FC | 	wrlong	#30, fp
16f50     08 4E 85 F1 | 	sub	fp, #8
16f54     A7 12 02 F6 | 	mov	arg01, fp
16f58     90 66 BF FD | 	call	#_push
16f5c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16f5c     1C 00 90 FD | 	jmp	#LR__1864
16f60                 | LR__1862
16f60     29 12 06 F6 | 	mov	arg01, #41
16f64     00 14 06 F6 | 	mov	arg02, #0
16f68     DC BD B0 FD | 	call	#_printerror
16f6c                 | '      printerror(41) : return
16f6c     0C 00 90 FD | 	jmp	#LR__1864
16f70                 | LR__1863
16f70     29 12 06 F6 | 	mov	arg01, #41
16f74     00 14 06 F6 | 	mov	arg02, #0
16f78     CC BD B0 FD | 	call	#_printerror
16f7c                 | LR__1864
16f7c     A7 F0 03 F6 | 	mov	ptra, fp
16f80     B2 00 A0 FD | 	call	#popregs_
16f84                 | _do_padrz_ret
16f84     2D 00 64 FD | 	ret
16f88                 | 
16f88                 | ' ' ------------------ padx
16f88                 | ' 
16f88                 | ' sub do_padx
16f88                 | _do_padx
16f88     02 4A 05 F6 | 	mov	COUNT_, #2
16f8c     A8 00 A0 FD | 	call	#pushregs_
16f90     14 F0 07 F1 | 	add	ptra, #20
16f94     4A 00 00 FF 
16f98     80 E4 05 F1 | 	add	objptr, ##38016
16f9c     F2 26 02 FB | 	rdlong	local01, objptr
16fa0     13 17 02 F6 | 	mov	arg03, local01
16fa4     01 16 66 F0 | 	shl	arg03, #1
16fa8     13 17 02 F1 | 	add	arg03, local01
16fac     02 16 66 F0 | 	shl	arg03, #2
16fb0     03 00 00 FF 
16fb4     04 E4 85 F1 | 	sub	objptr, ##1540
16fb8     F2 16 02 F1 | 	add	arg03, objptr
16fbc     0B 17 02 FB | 	rdlong	arg03, arg03
16fc0     0C 4E 05 F1 | 	add	fp, #12
16fc4     A7 16 62 FC | 	wrlong	arg03, fp
16fc8                 | ' 
16fc8                 | ' numpar=compiledline(lineptr_e).result.uresult
16fc8                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
16fc8     0C 4E 85 F1 | 	sub	fp, #12
16fcc     02 16 16 F2 | 	cmp	arg03, #2 wc
16fd0     47 00 00 FF 
16fd4     7C E4 85 F1 | 	sub	objptr, ##36476
16fd8     40 00 90 CD |  if_b	jmp	#LR__1870
16fdc     00 12 06 F6 | 	mov	arg01, #0
16fe0     78 54 B1 FD | 	call	#__system___getiolock_0603
16fe4     FD 12 02 F6 | 	mov	arg01, result1
16fe8     48 F7 B0 FD | 	call	#__system___lockmem
16fec     B6 01 00 FF 
16ff0     4F 15 06 F6 | 	mov	arg02, ##@LR__5940
16ff4     00 12 06 F6 | 	mov	arg01, #0
16ff8     00 16 06 F6 | 	mov	arg03, #0
16ffc     28 04 B1 FD | 	call	#__system___basic_print_string
17000     00 12 06 F6 | 	mov	arg01, #0
17004     54 54 B1 FD | 	call	#__system___getiolock_0603
17008     FD 00 68 FC | 	wrlong	#0, result1
1700c     27 12 06 F6 | 	mov	arg01, #39
17010     00 14 06 F6 | 	mov	arg02, #0
17014     30 BD B0 FD | 	call	#_printerror
17018     E0 01 90 FD | 	jmp	#LR__1874
1701c                 | LR__1870
1701c                 | ' if numpar=0 then 
1701c     0C 4E 05 F1 | 	add	fp, #12
17020     A7 FE 09 FB | 	rdlong	result3, fp wz
17024     0C 4E 85 F1 | 	sub	fp, #12
17028     A8 00 90 5D |  if_ne	jmp	#LR__1871
1702c     00 C0 1B FF 
17030     00 26 06 F6 | 	mov	local01, ##931135488
17034     51 00 00 FF 
17038     58 E5 05 F1 | 	add	objptr, ##41816
1703c     F2 12 02 FB | 	rdlong	arg01, objptr
17040     51 00 00 FF 
17044     58 E5 85 F1 | 	sub	objptr, ##41816
17048     09 13 52 F6 | 	abs	arg01, arg01 wc
1704c     1F 28 C6 C9 |  if_b	decod	local02, #31
17050     00 28 06 36 |  if_ae	mov	local02, #0
17054     50 21 B1 FD | 	call	#__system___float_fromuns
17058     14 FB 61 F5 | 	xor	result1, local02
1705c     FD 12 02 F6 | 	mov	arg01, result1
17060     FF 7F 23 FF 
17064     00 14 06 F6 | 	mov	arg02, ##1191181824
17068     44 27 B1 FD | 	call	#__system___float_div
1706c     FD 14 02 F6 | 	mov	arg02, result1
17070     13 13 02 F6 | 	mov	arg01, local01
17074     64 21 B1 FD | 	call	#__system___float_add
17078     10 4E 05 F1 | 	add	fp, #16
1707c     A7 FA 61 FC | 	wrlong	result1, fp
17080                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17080     10 4E 85 F1 | 	sub	fp, #16
17084     1F FA 05 F4 | 	bitl	result1, #31
17088     FD 12 02 F6 | 	mov	arg01, result1
1708c     89 41 1D FF 
17090     6F 14 06 F6 | 	mov	arg02, ##981668463
17094     01 16 06 F6 | 	mov	arg03, #1
17098     44 29 B1 FD | 	call	#__system___float_cmp
1709c     00 FA 55 F2 | 	cmps	result1, #0 wc
170a0     10 4E 05 C1 |  if_b	add	fp, #16
170a4     A7 00 68 CC |  if_b	wrlong	#0, fp
170a8     10 4E 85 C1 |  if_b	sub	fp, #16
170ac     10 4E 05 F1 | 	add	fp, #16
170b0     A7 26 02 FB | 	rdlong	local01, fp
170b4     10 4E 85 F1 | 	sub	fp, #16
170b8     A7 26 62 FC | 	wrlong	local01, fp
170bc     08 4E 05 F1 | 	add	fp, #8
170c0     A7 3C 68 FC | 	wrlong	#30, fp
170c4     08 4E 85 F1 | 	sub	fp, #8
170c8     A7 12 02 F6 | 	mov	arg01, fp
170cc     1C 65 BF FD | 	call	#_push
170d0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
170d0     28 01 90 FD | 	jmp	#LR__1874
170d4                 | LR__1871
170d4     7C 64 BF FD | 	call	#_pop
170d8     A7 FA 61 FC | 	wrlong	result1, fp
170dc     04 4E 05 F1 | 	add	fp, #4
170e0     A7 FC 61 FC | 	wrlong	result2, fp
170e4     04 4E 05 F1 | 	add	fp, #4
170e8     A7 FE 61 FC | 	wrlong	result3, fp
170ec                 | ' t1=pop()
170ec                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
170ec     08 4E 85 F1 | 	sub	fp, #8
170f0     1C FE 0D F2 | 	cmp	result3, #28 wz
170f4     08 4E 05 51 |  if_ne	add	fp, #8
170f8     A7 26 02 5B |  if_ne	rdlong	local01, fp
170fc     08 4E 85 51 |  if_ne	sub	fp, #8
17100     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17104     E8 00 90 5D |  if_ne	jmp	#LR__1873
17108     A7 26 02 FB | 	rdlong	local01, fp
1710c     52 00 00 FF 
17110     08 E5 05 F1 | 	add	objptr, ##42248
17114     F2 26 62 FC | 	wrlong	local01, objptr
17118                 | '   q=t1.result.uresult
17118                 | '   if q<7 then 
17118     52 00 00 FF 
1711c     08 E5 85 F1 | 	sub	objptr, ##42248
17120     07 26 56 F2 | 	cmps	local01, #7 wc
17124     B8 00 90 3D |  if_ae	jmp	#LR__1872
17128     00 C0 1B FF 
1712c     00 26 06 F6 | 	mov	local01, ##931135488
17130     52 00 00 FF 
17134     08 E5 05 F1 | 	add	objptr, ##42248
17138     F2 16 02 FB | 	rdlong	arg03, objptr
1713c     02 16 66 F0 | 	shl	arg03, #2
17140     B0 E5 85 F1 | 	sub	objptr, #432
17144     F2 16 02 F1 | 	add	arg03, objptr
17148     0B 13 02 FB | 	rdlong	arg01, arg03
1714c     51 00 00 FF 
17150     58 E5 85 F1 | 	sub	objptr, ##41816
17154     09 13 52 F6 | 	abs	arg01, arg01 wc
17158     1F 28 C6 C9 |  if_b	decod	local02, #31
1715c     00 28 06 36 |  if_ae	mov	local02, #0
17160     44 20 B1 FD | 	call	#__system___float_fromuns
17164     14 FB 61 F5 | 	xor	result1, local02
17168     FD 12 02 F6 | 	mov	arg01, result1
1716c     FF 7F 23 FF 
17170     00 14 06 F6 | 	mov	arg02, ##1191181824
17174     38 26 B1 FD | 	call	#__system___float_div
17178     FD 14 02 F6 | 	mov	arg02, result1
1717c     13 13 02 F6 | 	mov	arg01, local01
17180     58 20 B1 FD | 	call	#__system___float_add
17184     10 4E 05 F1 | 	add	fp, #16
17188     A7 FA 61 FC | 	wrlong	result1, fp
1718c                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1718c     10 4E 85 F1 | 	sub	fp, #16
17190     1F FA 05 F4 | 	bitl	result1, #31
17194     FD 12 02 F6 | 	mov	arg01, result1
17198     89 41 1D FF 
1719c     6F 14 06 F6 | 	mov	arg02, ##981668463
171a0     01 16 06 F6 | 	mov	arg03, #1
171a4     38 28 B1 FD | 	call	#__system___float_cmp
171a8     00 FA 55 F2 | 	cmps	result1, #0 wc
171ac     10 4E 05 C1 |  if_b	add	fp, #16
171b0     A7 00 68 CC |  if_b	wrlong	#0, fp
171b4     10 4E 85 C1 |  if_b	sub	fp, #16
171b8     10 4E 05 F1 | 	add	fp, #16
171bc     A7 26 02 FB | 	rdlong	local01, fp
171c0     10 4E 85 F1 | 	sub	fp, #16
171c4     A7 26 62 FC | 	wrlong	local01, fp
171c8     08 4E 05 F1 | 	add	fp, #8
171cc     A7 3C 68 FC | 	wrlong	#30, fp
171d0     08 4E 85 F1 | 	sub	fp, #8
171d4     A7 12 02 F6 | 	mov	arg01, fp
171d8     10 64 BF FD | 	call	#_push
171dc                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
171dc     1C 00 90 FD | 	jmp	#LR__1874
171e0                 | LR__1872
171e0     29 12 06 F6 | 	mov	arg01, #41
171e4     00 14 06 F6 | 	mov	arg02, #0
171e8     5C BB B0 FD | 	call	#_printerror
171ec                 | '      printerror(41) : return
171ec     0C 00 90 FD | 	jmp	#LR__1874
171f0                 | LR__1873
171f0     29 12 06 F6 | 	mov	arg01, #41
171f4     00 14 06 F6 | 	mov	arg02, #0
171f8     4C BB B0 FD | 	call	#_printerror
171fc                 | LR__1874
171fc     A7 F0 03 F6 | 	mov	ptra, fp
17200     B2 00 A0 FD | 	call	#popregs_
17204                 | _do_padx_ret
17204     2D 00 64 FD | 	ret
17208                 | 
17208                 | ' 
17208                 | ' ' ------------------ pady
17208                 | ' 
17208                 | ' sub do_pady
17208                 | _do_pady
17208     02 4A 05 F6 | 	mov	COUNT_, #2
1720c     A8 00 A0 FD | 	call	#pushregs_
17210     14 F0 07 F1 | 	add	ptra, #20
17214     4A 00 00 FF 
17218     80 E4 05 F1 | 	add	objptr, ##38016
1721c     F2 26 02 FB | 	rdlong	local01, objptr
17220     13 17 02 F6 | 	mov	arg03, local01
17224     01 16 66 F0 | 	shl	arg03, #1
17228     13 17 02 F1 | 	add	arg03, local01
1722c     02 16 66 F0 | 	shl	arg03, #2
17230     03 00 00 FF 
17234     04 E4 85 F1 | 	sub	objptr, ##1540
17238     F2 16 02 F1 | 	add	arg03, objptr
1723c     0B 17 02 FB | 	rdlong	arg03, arg03
17240     0C 4E 05 F1 | 	add	fp, #12
17244     A7 16 62 FC | 	wrlong	arg03, fp
17248                 | ' 
17248                 | ' numpar=compiledline(lineptr_e).result.uresult
17248                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
17248     0C 4E 85 F1 | 	sub	fp, #12
1724c     02 16 16 F2 | 	cmp	arg03, #2 wc
17250     47 00 00 FF 
17254     7C E4 85 F1 | 	sub	objptr, ##36476
17258     40 00 90 CD |  if_b	jmp	#LR__1880
1725c     00 12 06 F6 | 	mov	arg01, #0
17260     F8 51 B1 FD | 	call	#__system___getiolock_0603
17264     FD 12 02 F6 | 	mov	arg01, result1
17268     C8 F4 B0 FD | 	call	#__system___lockmem
1726c     B6 01 00 FF 
17270     56 15 06 F6 | 	mov	arg02, ##@LR__5941
17274     00 12 06 F6 | 	mov	arg01, #0
17278     00 16 06 F6 | 	mov	arg03, #0
1727c     A8 01 B1 FD | 	call	#__system___basic_print_string
17280     00 12 06 F6 | 	mov	arg01, #0
17284     D4 51 B1 FD | 	call	#__system___getiolock_0603
17288     FD 00 68 FC | 	wrlong	#0, result1
1728c     27 12 06 F6 | 	mov	arg01, #39
17290     00 14 06 F6 | 	mov	arg02, #0
17294     B0 BA B0 FD | 	call	#_printerror
17298     E0 01 90 FD | 	jmp	#LR__1884
1729c                 | LR__1880
1729c                 | ' if numpar=0 then 
1729c     0C 4E 05 F1 | 	add	fp, #12
172a0     A7 FE 09 FB | 	rdlong	result3, fp wz
172a4     0C 4E 85 F1 | 	sub	fp, #12
172a8     A8 00 90 5D |  if_ne	jmp	#LR__1881
172ac     00 C0 1B FF 
172b0     00 26 06 F6 | 	mov	local01, ##931135488
172b4     51 00 00 FF 
172b8     74 E5 05 F1 | 	add	objptr, ##41844
172bc     F2 12 02 FB | 	rdlong	arg01, objptr
172c0     51 00 00 FF 
172c4     74 E5 85 F1 | 	sub	objptr, ##41844
172c8     09 13 52 F6 | 	abs	arg01, arg01 wc
172cc     1F 28 C6 C9 |  if_b	decod	local02, #31
172d0     00 28 06 36 |  if_ae	mov	local02, #0
172d4     D0 1E B1 FD | 	call	#__system___float_fromuns
172d8     14 FB 61 F5 | 	xor	result1, local02
172dc     FD 12 02 F6 | 	mov	arg01, result1
172e0     FF 7F 23 FF 
172e4     00 14 06 F6 | 	mov	arg02, ##1191181824
172e8     C4 24 B1 FD | 	call	#__system___float_div
172ec     FD 14 02 F6 | 	mov	arg02, result1
172f0     13 13 02 F6 | 	mov	arg01, local01
172f4     E4 1E B1 FD | 	call	#__system___float_add
172f8     10 4E 05 F1 | 	add	fp, #16
172fc     A7 FA 61 FC | 	wrlong	result1, fp
17300                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17300     10 4E 85 F1 | 	sub	fp, #16
17304     1F FA 05 F4 | 	bitl	result1, #31
17308     FD 12 02 F6 | 	mov	arg01, result1
1730c     89 41 1D FF 
17310     6F 14 06 F6 | 	mov	arg02, ##981668463
17314     01 16 06 F6 | 	mov	arg03, #1
17318     C4 26 B1 FD | 	call	#__system___float_cmp
1731c     00 FA 55 F2 | 	cmps	result1, #0 wc
17320     10 4E 05 C1 |  if_b	add	fp, #16
17324     A7 00 68 CC |  if_b	wrlong	#0, fp
17328     10 4E 85 C1 |  if_b	sub	fp, #16
1732c     10 4E 05 F1 | 	add	fp, #16
17330     A7 26 02 FB | 	rdlong	local01, fp
17334     10 4E 85 F1 | 	sub	fp, #16
17338     A7 26 62 FC | 	wrlong	local01, fp
1733c     08 4E 05 F1 | 	add	fp, #8
17340     A7 3C 68 FC | 	wrlong	#30, fp
17344     08 4E 85 F1 | 	sub	fp, #8
17348     A7 12 02 F6 | 	mov	arg01, fp
1734c     9C 62 BF FD | 	call	#_push
17350                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17350     28 01 90 FD | 	jmp	#LR__1884
17354                 | LR__1881
17354     FC 61 BF FD | 	call	#_pop
17358     A7 FA 61 FC | 	wrlong	result1, fp
1735c     04 4E 05 F1 | 	add	fp, #4
17360     A7 FC 61 FC | 	wrlong	result2, fp
17364     04 4E 05 F1 | 	add	fp, #4
17368     A7 FE 61 FC | 	wrlong	result3, fp
1736c                 | ' t1=pop()
1736c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1736c     08 4E 85 F1 | 	sub	fp, #8
17370     1C FE 0D F2 | 	cmp	result3, #28 wz
17374     08 4E 05 51 |  if_ne	add	fp, #8
17378     A7 26 02 5B |  if_ne	rdlong	local01, fp
1737c     08 4E 85 51 |  if_ne	sub	fp, #8
17380     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17384     E8 00 90 5D |  if_ne	jmp	#LR__1883
17388     A7 26 02 FB | 	rdlong	local01, fp
1738c     52 00 00 FF 
17390     08 E5 05 F1 | 	add	objptr, ##42248
17394     F2 26 62 FC | 	wrlong	local01, objptr
17398                 | '   q=t1.result.uresult
17398                 | '   if q<7 then 
17398     52 00 00 FF 
1739c     08 E5 85 F1 | 	sub	objptr, ##42248
173a0     07 26 56 F2 | 	cmps	local01, #7 wc
173a4     B8 00 90 3D |  if_ae	jmp	#LR__1882
173a8     00 C0 1B FF 
173ac     00 26 06 F6 | 	mov	local01, ##931135488
173b0     52 00 00 FF 
173b4     08 E5 05 F1 | 	add	objptr, ##42248
173b8     F2 16 02 FB | 	rdlong	arg03, objptr
173bc     02 16 66 F0 | 	shl	arg03, #2
173c0     94 E5 85 F1 | 	sub	objptr, #404
173c4     F2 16 02 F1 | 	add	arg03, objptr
173c8     0B 13 02 FB | 	rdlong	arg01, arg03
173cc     51 00 00 FF 
173d0     74 E5 85 F1 | 	sub	objptr, ##41844
173d4     09 13 52 F6 | 	abs	arg01, arg01 wc
173d8     1F 28 C6 C9 |  if_b	decod	local02, #31
173dc     00 28 06 36 |  if_ae	mov	local02, #0
173e0     C4 1D B1 FD | 	call	#__system___float_fromuns
173e4     14 FB 61 F5 | 	xor	result1, local02
173e8     FD 12 02 F6 | 	mov	arg01, result1
173ec     FF 7F 23 FF 
173f0     00 14 06 F6 | 	mov	arg02, ##1191181824
173f4     B8 23 B1 FD | 	call	#__system___float_div
173f8     FD 14 02 F6 | 	mov	arg02, result1
173fc     13 13 02 F6 | 	mov	arg01, local01
17400     D8 1D B1 FD | 	call	#__system___float_add
17404     10 4E 05 F1 | 	add	fp, #16
17408     A7 FA 61 FC | 	wrlong	result1, fp
1740c                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1740c     10 4E 85 F1 | 	sub	fp, #16
17410     1F FA 05 F4 | 	bitl	result1, #31
17414     FD 12 02 F6 | 	mov	arg01, result1
17418     89 41 1D FF 
1741c     6F 14 06 F6 | 	mov	arg02, ##981668463
17420     01 16 06 F6 | 	mov	arg03, #1
17424     B8 25 B1 FD | 	call	#__system___float_cmp
17428     00 FA 55 F2 | 	cmps	result1, #0 wc
1742c     10 4E 05 C1 |  if_b	add	fp, #16
17430     A7 00 68 CC |  if_b	wrlong	#0, fp
17434     10 4E 85 C1 |  if_b	sub	fp, #16
17438     10 4E 05 F1 | 	add	fp, #16
1743c     A7 26 02 FB | 	rdlong	local01, fp
17440     10 4E 85 F1 | 	sub	fp, #16
17444     A7 26 62 FC | 	wrlong	local01, fp
17448     08 4E 05 F1 | 	add	fp, #8
1744c     A7 3C 68 FC | 	wrlong	#30, fp
17450     08 4E 85 F1 | 	sub	fp, #8
17454     A7 12 02 F6 | 	mov	arg01, fp
17458     90 61 BF FD | 	call	#_push
1745c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
1745c     1C 00 90 FD | 	jmp	#LR__1884
17460                 | LR__1882
17460     29 12 06 F6 | 	mov	arg01, #41
17464     00 14 06 F6 | 	mov	arg02, #0
17468     DC B8 B0 FD | 	call	#_printerror
1746c                 | '      printerror(41) : return
1746c     0C 00 90 FD | 	jmp	#LR__1884
17470                 | LR__1883
17470     29 12 06 F6 | 	mov	arg01, #41
17474     00 14 06 F6 | 	mov	arg02, #0
17478     CC B8 B0 FD | 	call	#_printerror
1747c                 | LR__1884
1747c     A7 F0 03 F6 | 	mov	ptra, fp
17480     B2 00 A0 FD | 	call	#popregs_
17484                 | _do_pady_ret
17484     2D 00 64 FD | 	ret
17488                 | 
17488                 | ' 
17488                 | ' ' ------------------ padz
17488                 | ' 
17488                 | ' sub do_padz
17488                 | _do_padz
17488     02 4A 05 F6 | 	mov	COUNT_, #2
1748c     A8 00 A0 FD | 	call	#pushregs_
17490     14 F0 07 F1 | 	add	ptra, #20
17494     4A 00 00 FF 
17498     80 E4 05 F1 | 	add	objptr, ##38016
1749c     F2 26 02 FB | 	rdlong	local01, objptr
174a0     13 17 02 F6 | 	mov	arg03, local01
174a4     01 16 66 F0 | 	shl	arg03, #1
174a8     13 17 02 F1 | 	add	arg03, local01
174ac     02 16 66 F0 | 	shl	arg03, #2
174b0     03 00 00 FF 
174b4     04 E4 85 F1 | 	sub	objptr, ##1540
174b8     F2 16 02 F1 | 	add	arg03, objptr
174bc     0B 17 02 FB | 	rdlong	arg03, arg03
174c0     0C 4E 05 F1 | 	add	fp, #12
174c4     A7 16 62 FC | 	wrlong	arg03, fp
174c8                 | ' 
174c8                 | ' numpar=compiledline(lineptr_e).result.uresult
174c8                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
174c8     0C 4E 85 F1 | 	sub	fp, #12
174cc     02 16 16 F2 | 	cmp	arg03, #2 wc
174d0     47 00 00 FF 
174d4     7C E4 85 F1 | 	sub	objptr, ##36476
174d8     40 00 90 CD |  if_b	jmp	#LR__1890
174dc     00 12 06 F6 | 	mov	arg01, #0
174e0     78 4F B1 FD | 	call	#__system___getiolock_0603
174e4     FD 12 02 F6 | 	mov	arg01, result1
174e8     48 F2 B0 FD | 	call	#__system___lockmem
174ec     B6 01 00 FF 
174f0     5D 15 06 F6 | 	mov	arg02, ##@LR__5942
174f4     00 12 06 F6 | 	mov	arg01, #0
174f8     00 16 06 F6 | 	mov	arg03, #0
174fc     28 FF B0 FD | 	call	#__system___basic_print_string
17500     00 12 06 F6 | 	mov	arg01, #0
17504     54 4F B1 FD | 	call	#__system___getiolock_0603
17508     FD 00 68 FC | 	wrlong	#0, result1
1750c     27 12 06 F6 | 	mov	arg01, #39
17510     00 14 06 F6 | 	mov	arg02, #0
17514     30 B8 B0 FD | 	call	#_printerror
17518     E0 01 90 FD | 	jmp	#LR__1894
1751c                 | LR__1890
1751c                 | ' if numpar=0 then 
1751c     0C 4E 05 F1 | 	add	fp, #12
17520     A7 FE 09 FB | 	rdlong	result3, fp wz
17524     0C 4E 85 F1 | 	sub	fp, #12
17528     A8 00 90 5D |  if_ne	jmp	#LR__1891
1752c     00 C0 1B FF 
17530     00 26 06 F6 | 	mov	local01, ##931135488
17534     51 00 00 FF 
17538     90 E5 05 F1 | 	add	objptr, ##41872
1753c     F2 12 02 FB | 	rdlong	arg01, objptr
17540     51 00 00 FF 
17544     90 E5 85 F1 | 	sub	objptr, ##41872
17548     09 13 52 F6 | 	abs	arg01, arg01 wc
1754c     1F 28 C6 C9 |  if_b	decod	local02, #31
17550     00 28 06 36 |  if_ae	mov	local02, #0
17554     50 1C B1 FD | 	call	#__system___float_fromuns
17558     14 FB 61 F5 | 	xor	result1, local02
1755c     FD 12 02 F6 | 	mov	arg01, result1
17560     FF 7F 23 FF 
17564     00 14 06 F6 | 	mov	arg02, ##1191181824
17568     44 22 B1 FD | 	call	#__system___float_div
1756c     FD 14 02 F6 | 	mov	arg02, result1
17570     13 13 02 F6 | 	mov	arg01, local01
17574     64 1C B1 FD | 	call	#__system___float_add
17578     10 4E 05 F1 | 	add	fp, #16
1757c     A7 FA 61 FC | 	wrlong	result1, fp
17580                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17580     10 4E 85 F1 | 	sub	fp, #16
17584     1F FA 05 F4 | 	bitl	result1, #31
17588     FD 12 02 F6 | 	mov	arg01, result1
1758c     89 41 1D FF 
17590     6F 14 06 F6 | 	mov	arg02, ##981668463
17594     01 16 06 F6 | 	mov	arg03, #1
17598     44 24 B1 FD | 	call	#__system___float_cmp
1759c     00 FA 55 F2 | 	cmps	result1, #0 wc
175a0     10 4E 05 C1 |  if_b	add	fp, #16
175a4     A7 00 68 CC |  if_b	wrlong	#0, fp
175a8     10 4E 85 C1 |  if_b	sub	fp, #16
175ac     10 4E 05 F1 | 	add	fp, #16
175b0     A7 26 02 FB | 	rdlong	local01, fp
175b4     10 4E 85 F1 | 	sub	fp, #16
175b8     A7 26 62 FC | 	wrlong	local01, fp
175bc     08 4E 05 F1 | 	add	fp, #8
175c0     A7 3C 68 FC | 	wrlong	#30, fp
175c4     08 4E 85 F1 | 	sub	fp, #8
175c8     A7 12 02 F6 | 	mov	arg01, fp
175cc     1C 60 BF FD | 	call	#_push
175d0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
175d0     28 01 90 FD | 	jmp	#LR__1894
175d4                 | LR__1891
175d4     7C 5F BF FD | 	call	#_pop
175d8     A7 FA 61 FC | 	wrlong	result1, fp
175dc     04 4E 05 F1 | 	add	fp, #4
175e0     A7 FC 61 FC | 	wrlong	result2, fp
175e4     04 4E 05 F1 | 	add	fp, #4
175e8     A7 FE 61 FC | 	wrlong	result3, fp
175ec                 | ' t1=pop()
175ec                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
175ec     08 4E 85 F1 | 	sub	fp, #8
175f0     1C FE 0D F2 | 	cmp	result3, #28 wz
175f4     08 4E 05 51 |  if_ne	add	fp, #8
175f8     A7 26 02 5B |  if_ne	rdlong	local01, fp
175fc     08 4E 85 51 |  if_ne	sub	fp, #8
17600     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17604     E8 00 90 5D |  if_ne	jmp	#LR__1893
17608     A7 26 02 FB | 	rdlong	local01, fp
1760c     52 00 00 FF 
17610     08 E5 05 F1 | 	add	objptr, ##42248
17614     F2 26 62 FC | 	wrlong	local01, objptr
17618                 | '   q=t1.result.uresult
17618                 | '   if q<7 then 
17618     52 00 00 FF 
1761c     08 E5 85 F1 | 	sub	objptr, ##42248
17620     07 26 56 F2 | 	cmps	local01, #7 wc
17624     B8 00 90 3D |  if_ae	jmp	#LR__1892
17628     00 C0 1B FF 
1762c     00 26 06 F6 | 	mov	local01, ##931135488
17630     52 00 00 FF 
17634     08 E5 05 F1 | 	add	objptr, ##42248
17638     F2 16 02 FB | 	rdlong	arg03, objptr
1763c     02 16 66 F0 | 	shl	arg03, #2
17640     78 E5 85 F1 | 	sub	objptr, #376
17644     F2 16 02 F1 | 	add	arg03, objptr
17648     0B 13 02 FB | 	rdlong	arg01, arg03
1764c     51 00 00 FF 
17650     90 E5 85 F1 | 	sub	objptr, ##41872
17654     09 13 52 F6 | 	abs	arg01, arg01 wc
17658     1F 28 C6 C9 |  if_b	decod	local02, #31
1765c     00 28 06 36 |  if_ae	mov	local02, #0
17660     44 1B B1 FD | 	call	#__system___float_fromuns
17664     14 FB 61 F5 | 	xor	result1, local02
17668     FD 12 02 F6 | 	mov	arg01, result1
1766c     FF 7F 23 FF 
17670     00 14 06 F6 | 	mov	arg02, ##1191181824
17674     38 21 B1 FD | 	call	#__system___float_div
17678     FD 14 02 F6 | 	mov	arg02, result1
1767c     13 13 02 F6 | 	mov	arg01, local01
17680     58 1B B1 FD | 	call	#__system___float_add
17684     10 4E 05 F1 | 	add	fp, #16
17688     A7 FA 61 FC | 	wrlong	result1, fp
1768c                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1768c     10 4E 85 F1 | 	sub	fp, #16
17690     1F FA 05 F4 | 	bitl	result1, #31
17694     FD 12 02 F6 | 	mov	arg01, result1
17698     89 41 1D FF 
1769c     6F 14 06 F6 | 	mov	arg02, ##981668463
176a0     01 16 06 F6 | 	mov	arg03, #1
176a4     38 23 B1 FD | 	call	#__system___float_cmp
176a8     00 FA 55 F2 | 	cmps	result1, #0 wc
176ac     10 4E 05 C1 |  if_b	add	fp, #16
176b0     A7 00 68 CC |  if_b	wrlong	#0, fp
176b4     10 4E 85 C1 |  if_b	sub	fp, #16
176b8     10 4E 05 F1 | 	add	fp, #16
176bc     A7 26 02 FB | 	rdlong	local01, fp
176c0     10 4E 85 F1 | 	sub	fp, #16
176c4     A7 26 62 FC | 	wrlong	local01, fp
176c8     08 4E 05 F1 | 	add	fp, #8
176cc     A7 3C 68 FC | 	wrlong	#30, fp
176d0     08 4E 85 F1 | 	sub	fp, #8
176d4     A7 12 02 F6 | 	mov	arg01, fp
176d8     10 5F BF FD | 	call	#_push
176dc                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
176dc     1C 00 90 FD | 	jmp	#LR__1894
176e0                 | LR__1892
176e0     29 12 06 F6 | 	mov	arg01, #41
176e4     00 14 06 F6 | 	mov	arg02, #0
176e8     5C B6 B0 FD | 	call	#_printerror
176ec                 | '      printerror(41) : return
176ec     0C 00 90 FD | 	jmp	#LR__1894
176f0                 | LR__1893
176f0     29 12 06 F6 | 	mov	arg01, #41
176f4     00 14 06 F6 | 	mov	arg02, #0
176f8     4C B6 B0 FD | 	call	#_printerror
176fc                 | LR__1894
176fc     A7 F0 03 F6 | 	mov	ptra, fp
17700     B2 00 A0 FD | 	call	#popregs_
17704                 | _do_padz_ret
17704     2D 00 64 FD | 	ret
17708                 | 
17708                 | ' 
17708                 | ' '-------------------- paper
17708                 | ' 
17708                 | ' sub do_paper
17708                 | _do_paper
17708     03 4A 05 F6 | 	mov	COUNT_, #3
1770c     A8 00 A0 FD | 	call	#pushregs_
17710     40 5E BF FD | 	call	#_pop
17714     FD 26 02 F6 | 	mov	local01, result1
17718     FE 28 02 F6 | 	mov	local02, result2
1771c     FF 2A 02 F6 | 	mov	local03, result3
17720                 | ' t1=pop() 
17720                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
17720     1E 2A 0E F2 | 	cmp	local03, #30 wz
17724     10 00 90 5D |  if_ne	jmp	#LR__1900
17728     13 13 02 F6 | 	mov	arg01, local01
1772c     00 14 06 F6 | 	mov	arg02, #0
17730     40 23 B1 FD | 	call	#__system___float_tointeger
17734     FD 26 02 F6 | 	mov	local01, result1
17738                 | LR__1900
17738                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
17738     1F 2A 0E F2 | 	cmp	local03, #31 wz
1773c     18 00 90 5D |  if_ne	jmp	#LR__1901
17740     13 13 02 F6 | 	mov	arg01, local01
17744     70 26 B1 FD | 	call	#__system____builtin_atof
17748     FD 12 02 F6 | 	mov	arg01, result1
1774c     00 14 06 F6 | 	mov	arg02, #0
17750     20 23 B1 FD | 	call	#__system___float_tointeger
17754     FD 26 02 F6 | 	mov	local01, result1
17758                 | LR__1901
17758     37 00 00 FF 
1775c     38 E4 05 F1 | 	add	objptr, ##28216
17760     F2 26 62 FC | 	wrlong	local01, objptr
17764     04 E4 05 F1 | 	add	objptr, #4
17768     F2 12 02 FB | 	rdlong	arg01, objptr
1776c                 | ' 
1776c                 | ' write_color:=ff
1776c     36 00 00 FF 
17770     FB E5 85 F1 | 	sub	objptr, ##28155
17774     F2 12 62 FC | 	wrlong	arg01, objptr
17778                 | ' write_background:=bb
17778     04 E4 05 F1 | 	add	objptr, #4
1777c     F2 26 62 FC | 	wrlong	local01, objptr
17780     45 E4 85 F1 | 	sub	objptr, #69
17784     A7 F0 03 F6 | 	mov	ptra, fp
17788     B2 00 A0 FD | 	call	#popregs_
1778c                 | _do_paper_ret
1778c     2D 00 64 FD | 	ret
17790                 | 
17790                 | ' 
17790                 | ' '-------------------- peek
17790                 | ' 
17790                 | ' sub do_peek
17790                 | _do_peek
17790     00 4A 05 F6 | 	mov	COUNT_, #0
17794     A8 00 A0 FD | 	call	#pushregs_
17798     14 F0 07 F1 | 	add	ptra, #20
1779c     B4 5D BF FD | 	call	#_pop
177a0     A7 FA 61 FC | 	wrlong	result1, fp
177a4     04 4E 05 F1 | 	add	fp, #4
177a8     A7 FC 61 FC | 	wrlong	result2, fp
177ac     04 4E 05 F1 | 	add	fp, #4
177b0     A7 FE 61 FC | 	wrlong	result3, fp
177b4     08 4E 85 F1 | 	sub	fp, #8
177b8     A7 12 02 F6 | 	mov	arg01, fp
177bc     78 5F BF FD | 	call	#_converttoint
177c0     0C 4E 05 F1 | 	add	fp, #12
177c4     A7 FA 61 FC | 	wrlong	result1, fp
177c8                 | ' 
177c8                 | ' t1=pop()
177c8                 | ' a=converttoint(t1)
177c8                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
177c8     0C 4E 85 F1 | 	sub	fp, #12
177cc     00 04 00 FF 
177d0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
177d4     1C 00 90 3D |  if_ae	jmp	#LR__1910
177d8     0C 4E 05 F1 | 	add	fp, #12
177dc     A7 12 02 FB | 	rdlong	arg01, fp
177e0     09 FB C1 FA | 	rdbyte	result1, arg01
177e4     04 4E 05 F1 | 	add	fp, #4
177e8     A7 FA 61 FC | 	wrlong	result1, fp
177ec     10 4E 85 F1 | 	sub	fp, #16
177f0     20 00 90 FD | 	jmp	#LR__1911
177f4                 | LR__1910
177f4     0C 4E 05 F1 | 	add	fp, #12
177f8     A7 12 02 FB | 	rdlong	arg01, fp
177fc     0C 4E 85 F1 | 	sub	fp, #12
17800     BC B7 B0 FD | 	call	#_pspeek
17804     FD FA E1 F8 | 	getbyte	result1, result1, #0
17808     10 4E 05 F1 | 	add	fp, #16
1780c     A7 FA 61 FC | 	wrlong	result1, fp
17810     10 4E 85 F1 | 	sub	fp, #16
17814                 | LR__1911
17814     08 4E 05 F1 | 	add	fp, #8
17818     A7 3A 68 FC | 	wrlong	#29, fp
1781c     08 4E 05 F1 | 	add	fp, #8
17820     A7 12 02 FB | 	rdlong	arg01, fp
17824     10 4E 85 F1 | 	sub	fp, #16
17828     A7 12 62 FC | 	wrlong	arg01, fp
1782c     A7 12 02 F6 | 	mov	arg01, fp
17830     B8 5D BF FD | 	call	#_push
17834     A7 F0 03 F6 | 	mov	ptra, fp
17838     B2 00 A0 FD | 	call	#popregs_
1783c                 | _do_peek_ret
1783c     2D 00 64 FD | 	ret
17840                 | 
17840                 | ' 
17840                 | ' '-------------------- pinfloat
17840                 | ' 
17840                 | ' sub do_pinfloat
17840                 | _do_pinfloat
17840     00 4A 05 F6 | 	mov	COUNT_, #0
17844     A8 00 A0 FD | 	call	#pushregs_
17848     0C F0 07 F1 | 	add	ptra, #12
1784c     04 5D BF FD | 	call	#_pop
17850     A7 FA 61 FC | 	wrlong	result1, fp
17854     04 4E 05 F1 | 	add	fp, #4
17858     A7 FC 61 FC | 	wrlong	result2, fp
1785c     04 4E 05 F1 | 	add	fp, #4
17860     A7 FE 61 FC | 	wrlong	result3, fp
17864     08 4E 85 F1 | 	sub	fp, #8
17868     A7 12 02 F6 | 	mov	arg01, fp
1786c     C8 5E BF FD | 	call	#_converttoint
17870     50 FA 61 FD | 	fltl	result1
17874     A7 F0 03 F6 | 	mov	ptra, fp
17878     B2 00 A0 FD | 	call	#popregs_
1787c                 | _do_pinfloat_ret
1787c     2D 00 64 FD | 	ret
17880                 | 
17880                 | ' 
17880                 | ' '-------------------- pinhi
17880                 | ' 
17880                 | ' sub do_pinhi
17880                 | _do_pinhi
17880     00 4A 05 F6 | 	mov	COUNT_, #0
17884     A8 00 A0 FD | 	call	#pushregs_
17888     0C F0 07 F1 | 	add	ptra, #12
1788c     C4 5C BF FD | 	call	#_pop
17890     A7 FA 61 FC | 	wrlong	result1, fp
17894     04 4E 05 F1 | 	add	fp, #4
17898     A7 FC 61 FC | 	wrlong	result2, fp
1789c     04 4E 05 F1 | 	add	fp, #4
178a0     A7 FE 61 FC | 	wrlong	result3, fp
178a4     08 4E 85 F1 | 	sub	fp, #8
178a8     A7 12 02 F6 | 	mov	arg01, fp
178ac     88 5E BF FD | 	call	#_converttoint
178b0     59 FA 61 FD | 	drvh	result1
178b4     A7 F0 03 F6 | 	mov	ptra, fp
178b8     B2 00 A0 FD | 	call	#popregs_
178bc                 | _do_pinhi_ret
178bc     2D 00 64 FD | 	ret
178c0                 | 
178c0                 | ' 
178c0                 | ' '-------------------- pinlo
178c0                 | ' 
178c0                 | ' sub do_pinlo
178c0                 | _do_pinlo
178c0     00 4A 05 F6 | 	mov	COUNT_, #0
178c4     A8 00 A0 FD | 	call	#pushregs_
178c8     0C F0 07 F1 | 	add	ptra, #12
178cc     84 5C BF FD | 	call	#_pop
178d0     A7 FA 61 FC | 	wrlong	result1, fp
178d4     04 4E 05 F1 | 	add	fp, #4
178d8     A7 FC 61 FC | 	wrlong	result2, fp
178dc     04 4E 05 F1 | 	add	fp, #4
178e0     A7 FE 61 FC | 	wrlong	result3, fp
178e4     08 4E 85 F1 | 	sub	fp, #8
178e8     A7 12 02 F6 | 	mov	arg01, fp
178ec     48 5E BF FD | 	call	#_converttoint
178f0     58 FA 61 FD | 	drvl	result1
178f4     A7 F0 03 F6 | 	mov	ptra, fp
178f8     B2 00 A0 FD | 	call	#popregs_
178fc                 | _do_pinlo_ret
178fc     2D 00 64 FD | 	ret
17900                 | 
17900                 | ' 
17900                 | ' '-------------------- pinread
17900                 | ' 
17900                 | ' sub do_pinread
17900                 | _do_pinread
17900     00 4A 05 F6 | 	mov	COUNT_, #0
17904     A8 00 A0 FD | 	call	#pushregs_
17908     0C F0 07 F1 | 	add	ptra, #12
1790c     44 5C BF FD | 	call	#_pop
17910     A7 FA 61 FC | 	wrlong	result1, fp
17914     04 4E 05 F1 | 	add	fp, #4
17918     A7 FC 61 FC | 	wrlong	result2, fp
1791c     04 4E 05 F1 | 	add	fp, #4
17920     A7 FE 61 FC | 	wrlong	result3, fp
17924     08 4E 85 F1 | 	sub	fp, #8
17928     A7 12 02 F6 | 	mov	arg01, fp
1792c     08 5E BF FD | 	call	#_converttoint
17930     FD 12 02 F6 | 	mov	arg01, result1
17934     20 12 CE F7 | 	test	arg01, #32 wz
17938     FF FB 01 56 |  if_ne	mov	result1, inb
1793c     FE FB 01 A6 |  if_e	mov	result1, ina
17940     09 FB 41 F0 | 	shr	result1, arg01
17944     06 12 46 F0 | 	shr	arg01, #6
17948     09 FB 41 F7 | 	zerox	result1, arg01
1794c     52 00 00 FF 
17950     10 E5 05 F1 | 	add	objptr, ##42256
17954     F2 FA 61 FC | 	wrlong	result1, objptr
17958     52 00 00 FF 
1795c     10 E5 85 F1 | 	sub	objptr, ##42256
17960     08 4E 05 F1 | 	add	fp, #8
17964     A7 3A 68 FC | 	wrlong	#29, fp
17968     08 4E 85 F1 | 	sub	fp, #8
1796c     A7 08 68 FC | 	wrlong	#4, fp
17970     A7 12 02 F6 | 	mov	arg01, fp
17974     74 5C BF FD | 	call	#_push
17978     A7 F0 03 F6 | 	mov	ptra, fp
1797c     B2 00 A0 FD | 	call	#popregs_
17980                 | _do_pinread_ret
17980     2D 00 64 FD | 	ret
17984                 | 
17984                 | ' 
17984                 | ' '-------------------- pinstart
17984                 | ' 
17984                 | ' sub do_pinstart
17984                 | _do_pinstart
17984     03 4A 05 F6 | 	mov	COUNT_, #3
17988     A8 00 A0 FD | 	call	#pushregs_
1798c     30 F0 07 F1 | 	add	ptra, #48
17990     C0 5B BF FD | 	call	#_pop
17994     FD 16 02 F6 | 	mov	arg03, result1
17998     FE 14 02 F6 | 	mov	arg02, result2
1799c     FF 18 02 F6 | 	mov	arg04, result3
179a0     A7 16 62 FC | 	wrlong	arg03, fp
179a4     04 4E 05 F1 | 	add	fp, #4
179a8     A7 14 62 FC | 	wrlong	arg02, fp
179ac     04 4E 05 F1 | 	add	fp, #4
179b0     A7 18 62 FC | 	wrlong	arg04, fp
179b4     08 4E 85 F1 | 	sub	fp, #8
179b8     98 5B BF FD | 	call	#_pop
179bc     FD 16 02 F6 | 	mov	arg03, result1
179c0     FE 14 02 F6 | 	mov	arg02, result2
179c4     FF 18 02 F6 | 	mov	arg04, result3
179c8     0C 4E 05 F1 | 	add	fp, #12
179cc     A7 16 62 FC | 	wrlong	arg03, fp
179d0     04 4E 05 F1 | 	add	fp, #4
179d4     A7 14 62 FC | 	wrlong	arg02, fp
179d8     04 4E 05 F1 | 	add	fp, #4
179dc     A7 18 62 FC | 	wrlong	arg04, fp
179e0     14 4E 85 F1 | 	sub	fp, #20
179e4     6C 5B BF FD | 	call	#_pop
179e8     FD 16 02 F6 | 	mov	arg03, result1
179ec     FE 14 02 F6 | 	mov	arg02, result2
179f0     FF 18 02 F6 | 	mov	arg04, result3
179f4     18 4E 05 F1 | 	add	fp, #24
179f8     A7 16 62 FC | 	wrlong	arg03, fp
179fc     04 4E 05 F1 | 	add	fp, #4
17a00     A7 14 62 FC | 	wrlong	arg02, fp
17a04     04 4E 05 F1 | 	add	fp, #4
17a08     A7 18 62 FC | 	wrlong	arg04, fp
17a0c     20 4E 85 F1 | 	sub	fp, #32
17a10     40 5B BF FD | 	call	#_pop
17a14     FF 16 02 F6 | 	mov	arg03, result3
17a18     24 4E 05 F1 | 	add	fp, #36
17a1c     A7 FA 61 FC | 	wrlong	result1, fp
17a20     04 4E 05 F1 | 	add	fp, #4
17a24     A7 FC 61 FC | 	wrlong	result2, fp
17a28     04 4E 05 F1 | 	add	fp, #4
17a2c     A7 16 62 FC | 	wrlong	arg03, fp
17a30     08 4E 85 F1 | 	sub	fp, #8
17a34     A7 12 02 F6 | 	mov	arg01, fp
17a38     24 4E 85 F1 | 	sub	fp, #36
17a3c     F8 5C BF FD | 	call	#_converttoint
17a40     FD 26 02 F6 | 	mov	local01, result1
17a44     18 4E 05 F1 | 	add	fp, #24
17a48     A7 12 02 F6 | 	mov	arg01, fp
17a4c     18 4E 85 F1 | 	sub	fp, #24
17a50     E4 5C BF FD | 	call	#_converttoint
17a54     FD 28 02 F6 | 	mov	local02, result1
17a58     0C 4E 05 F1 | 	add	fp, #12
17a5c     A7 12 02 F6 | 	mov	arg01, fp
17a60     0C 4E 85 F1 | 	sub	fp, #12
17a64     D0 5C BF FD | 	call	#_converttoint
17a68     FD 2A 02 F6 | 	mov	local03, result1
17a6c     A7 12 02 F6 | 	mov	arg01, fp
17a70     C4 5C BF FD | 	call	#_converttoint
17a74     40 26 62 FD | 	dirl	local01
17a78     13 29 02 FC | 	wrpin	local02, local01
17a7c     13 2B 12 FC | 	wxpin	local03, local01
17a80     13 FB 21 FC | 	wypin	result1, local01
17a84     41 26 62 FD | 	dirh	local01
17a88     A7 F0 03 F6 | 	mov	ptra, fp
17a8c     B2 00 A0 FD | 	call	#popregs_
17a90                 | _do_pinstart_ret
17a90     2D 00 64 FD | 	ret
17a94                 | 
17a94                 | ' 
17a94                 | ' '-------------------- pintoggle
17a94                 | ' 
17a94                 | ' sub do_pintoggle
17a94                 | _do_pintoggle
17a94     00 4A 05 F6 | 	mov	COUNT_, #0
17a98     A8 00 A0 FD | 	call	#pushregs_
17a9c     0C F0 07 F1 | 	add	ptra, #12
17aa0     B0 5A BF FD | 	call	#_pop
17aa4     A7 FA 61 FC | 	wrlong	result1, fp
17aa8     04 4E 05 F1 | 	add	fp, #4
17aac     A7 FC 61 FC | 	wrlong	result2, fp
17ab0     04 4E 05 F1 | 	add	fp, #4
17ab4     A7 FE 61 FC | 	wrlong	result3, fp
17ab8     08 4E 85 F1 | 	sub	fp, #8
17abc     A7 12 02 F6 | 	mov	arg01, fp
17ac0     74 5C BF FD | 	call	#_converttoint
17ac4     5F FA 61 FD | 	drvnot	result1
17ac8     A7 F0 03 F6 | 	mov	ptra, fp
17acc     B2 00 A0 FD | 	call	#popregs_
17ad0                 | _do_pintoggle_ret
17ad0     2D 00 64 FD | 	ret
17ad4                 | 
17ad4                 | ' 
17ad4                 | ' '-------------------- pinwrite
17ad4                 | ' 
17ad4                 | ' sub do_pinwrite
17ad4                 | _do_pinwrite
17ad4     01 4A 05 F6 | 	mov	COUNT_, #1
17ad8     A8 00 A0 FD | 	call	#pushregs_
17adc     18 F0 07 F1 | 	add	ptra, #24
17ae0     70 5A BF FD | 	call	#_pop
17ae4     FD 14 02 F6 | 	mov	arg02, result1
17ae8     FE 12 02 F6 | 	mov	arg01, result2
17aec     FF 26 02 F6 | 	mov	local01, result3
17af0     A7 14 62 FC | 	wrlong	arg02, fp
17af4     04 4E 05 F1 | 	add	fp, #4
17af8     A7 12 62 FC | 	wrlong	arg01, fp
17afc     04 4E 05 F1 | 	add	fp, #4
17b00     A7 26 62 FC | 	wrlong	local01, fp
17b04     08 4E 85 F1 | 	sub	fp, #8
17b08     48 5A BF FD | 	call	#_pop
17b0c     FF 26 02 F6 | 	mov	local01, result3
17b10     0C 4E 05 F1 | 	add	fp, #12
17b14     A7 FA 61 FC | 	wrlong	result1, fp
17b18     04 4E 05 F1 | 	add	fp, #4
17b1c     A7 FC 61 FC | 	wrlong	result2, fp
17b20     04 4E 05 F1 | 	add	fp, #4
17b24     A7 26 62 FC | 	wrlong	local01, fp
17b28     08 4E 85 F1 | 	sub	fp, #8
17b2c     A7 12 02 F6 | 	mov	arg01, fp
17b30     0C 4E 85 F1 | 	sub	fp, #12
17b34     00 5C BF FD | 	call	#_converttoint
17b38     FD 26 02 F6 | 	mov	local01, result1
17b3c     A7 12 02 F6 | 	mov	arg01, fp
17b40     F4 5B BF FD | 	call	#_converttoint
17b44     FD 14 02 F6 | 	mov	arg02, result1
17b48     13 13 02 F6 | 	mov	arg01, local01
17b4c     98 ED B0 FD | 	call	#__system___pinwrite
17b50     A7 F0 03 F6 | 	mov	ptra, fp
17b54     B2 00 A0 FD | 	call	#popregs_
17b58                 | _do_pinwrite_ret
17b58     2D 00 64 FD | 	ret
17b5c                 | 
17b5c                 | ' 
17b5c                 | ' '-------------------- play
17b5c                 | ' 
17b5c                 | ' sub do_play
17b5c                 | _do_play
17b5c     08 4A 05 F6 | 	mov	COUNT_, #8
17b60     A8 00 A0 FD | 	call	#pushregs_
17b64     7C F0 07 F1 | 	add	ptra, #124
17b68     68 4E 05 F1 | 	add	fp, #104
17b6c     77 CC A1 FF 
17b70     A7 7C 6B FC | 	wrlong	##1134096318, fp
17b74                 | ' speed_coeff=305.873
17b74                 | ' 
17b74                 | ' for i=0 to 8 : params(i)=-2.0 : next i
17b74     64 4E 85 F1 | 	sub	fp, #100
17b78     A7 00 68 FC | 	wrlong	#0, fp
17b7c     97 18 48 FB | 	callpa	#(@LR__1921-@LR__1920)>>2,fcache_load_ptr_
17b80                 | LR__1920
17b80     A7 16 02 FB | 	rdlong	arg03, fp
17b84     02 16 66 F0 | 	shl	arg03, #2
17b88     34 4E 05 F1 | 	add	fp, #52
17b8c     A7 16 02 F1 | 	add	arg03, fp
17b90     00 00 E0 FF 
17b94     0B 01 68 FC | 	wrlong	##-1073741824, arg03
17b98     34 4E 85 F1 | 	sub	fp, #52
17b9c     A7 26 02 FB | 	rdlong	local01, fp
17ba0     01 26 06 F1 | 	add	local01, #1
17ba4     A7 26 62 FC | 	wrlong	local01, fp
17ba8     09 26 56 F2 | 	cmps	local01, #9 wc
17bac     D0 FF 9F CD |  if_b	jmp	#LR__1920
17bb0                 | LR__1921
17bb0     04 4E 85 F1 | 	sub	fp, #4
17bb4     4A 00 00 FF 
17bb8     80 E4 05 F1 | 	add	objptr, ##38016
17bbc     F2 28 02 FB | 	rdlong	local02, objptr
17bc0     14 2B 02 F6 | 	mov	local03, local02
17bc4     01 2A 66 F0 | 	shl	local03, #1
17bc8     14 2B 02 F1 | 	add	local03, local02
17bcc     02 2A 66 F0 | 	shl	local03, #2
17bd0     03 00 00 FF 
17bd4     04 E4 85 F1 | 	sub	objptr, ##1540
17bd8     F2 2A 02 F1 | 	add	local03, objptr
17bdc     15 2D 02 FB | 	rdlong	local04, local03
17be0     A7 2C 62 FC | 	wrlong	local04, fp
17be4                 | ' numpar=compiledline(lineptr_e).result.uresult
17be4                 | ' for i=numpar to 1 step -1 
17be4     04 4E 05 F1 | 	add	fp, #4
17be8     A7 2C 62 FC | 	wrlong	local04, fp
17bec     04 4E 85 F1 | 	sub	fp, #4
17bf0     47 00 00 FF 
17bf4     7C E4 85 F1 | 	sub	objptr, ##36476
17bf8                 | LR__1922
17bf8     58 59 BF FD | 	call	#_pop
17bfc     5C 4E 05 F1 | 	add	fp, #92
17c00     A7 FA 61 FC | 	wrlong	result1, fp
17c04     04 4E 05 F1 | 	add	fp, #4
17c08     A7 FC 61 FC | 	wrlong	result2, fp
17c0c     04 4E 05 F1 | 	add	fp, #4
17c10     A7 FE 61 FC | 	wrlong	result3, fp
17c14     60 4E 85 F1 | 	sub	fp, #96
17c18     A7 2A 02 FB | 	rdlong	local03, fp
17c1c     01 2A 86 F1 | 	sub	local03, #1
17c20     02 2A 66 F0 | 	shl	local03, #2
17c24     34 4E 05 F1 | 	add	fp, #52
17c28     A7 2A 02 F1 | 	add	local03, fp
17c2c     24 4E 05 F1 | 	add	fp, #36
17c30     A7 2E 02 F6 | 	mov	local05, fp
17c34     17 13 02 F6 | 	mov	arg01, local05
17c38     5C 4E 85 F1 | 	sub	fp, #92
17c3c     B4 5B BF FD | 	call	#_converttofloat
17c40     15 FB 61 FC | 	wrlong	result1, local03
17c44     04 4E 05 F1 | 	add	fp, #4
17c48     A7 26 02 FB | 	rdlong	local01, fp
17c4c     01 26 86 F1 | 	sub	local01, #1
17c50     A7 26 62 FC | 	wrlong	local01, fp
17c54     04 4E 85 F1 | 	sub	fp, #4
17c58     01 26 56 F2 | 	cmps	local01, #1 wc
17c5c     98 FF 9F 3D |  if_ae	jmp	#LR__1922
17c60                 | ' 
17c60                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
17c60     38 4E 05 F1 | 	add	fp, #56
17c64     A7 12 02 FB | 	rdlong	arg01, fp
17c68     38 4E 85 F1 | 	sub	fp, #56
17c6c     00 14 06 F6 | 	mov	arg02, #0
17c70     01 16 06 F6 | 	mov	arg03, #1
17c74     68 1D B1 FD | 	call	#__system___float_cmp
17c78     00 FA 55 F2 | 	cmps	result1, #0 wc
17c7c     0C 4E 05 C1 |  if_b	add	fp, #12
17c80     A7 00 68 CC |  if_b	wrlong	#0, fp
17c84     0C 4E 85 C1 |  if_b	sub	fp, #12
17c88     2C 00 90 CD |  if_b	jmp	#LR__1923
17c8c     38 4E 05 F1 | 	add	fp, #56
17c90     A7 12 02 FB | 	rdlong	arg01, fp
17c94     38 4E 85 F1 | 	sub	fp, #56
17c98     01 14 06 F6 | 	mov	arg02, #1
17c9c     D4 1D B1 FD | 	call	#__system___float_tointeger
17ca0     FD 26 52 F6 | 	abs	local01, result1 wc
17ca4     07 26 06 F5 | 	and	local01, #7
17ca8     13 27 82 F6 | 	negc	local01, local01
17cac     0C 4E 05 F1 | 	add	fp, #12
17cb0     A7 26 62 FC | 	wrlong	local01, fp
17cb4     0C 4E 85 F1 | 	sub	fp, #12
17cb8                 | LR__1923
17cb8                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
17cb8     3C 4E 05 F1 | 	add	fp, #60
17cbc     A7 12 02 FB | 	rdlong	arg01, fp
17cc0     3C 4E 85 F1 | 	sub	fp, #60
17cc4     00 14 06 F6 | 	mov	arg02, #0
17cc8     01 16 06 F6 | 	mov	arg03, #1
17ccc     10 1D B1 FD | 	call	#__system___float_cmp
17cd0     00 FA 55 F2 | 	cmps	result1, #0 wc
17cd4     40 00 90 3D |  if_ae	jmp	#LR__1924
17cd8     0C 4E 05 F1 | 	add	fp, #12
17cdc     A7 28 02 FB | 	rdlong	local02, fp
17ce0     14 2B 02 F6 | 	mov	local03, local02
17ce4     01 2A 66 F0 | 	shl	local03, #1
17ce8     14 2B 02 F1 | 	add	local03, local02
17cec     03 2A 66 F0 | 	shl	local03, #3
17cf0     14 00 00 FF 
17cf4     38 E5 05 F1 | 	add	objptr, ##10552
17cf8     F2 2A 02 F1 | 	add	local03, objptr
17cfc     15 31 02 FB | 	rdlong	local06, local03
17d00     60 4E 05 F1 | 	add	fp, #96
17d04     A7 30 62 FC | 	wrlong	local06, fp
17d08     6C 4E 85 F1 | 	sub	fp, #108
17d0c     14 00 00 FF 
17d10     38 E5 85 F1 | 	sub	objptr, ##10552
17d14     44 00 90 FD | 	jmp	#LR__1925
17d18                 | LR__1924
17d18     3C 4E 05 F1 | 	add	fp, #60
17d1c     A7 2C 02 FB | 	rdlong	local04, fp
17d20     30 4E 05 F1 | 	add	fp, #48
17d24     A7 2C 62 FC | 	wrlong	local04, fp
17d28     60 4E 85 F1 | 	sub	fp, #96
17d2c     A7 28 02 FB | 	rdlong	local02, fp
17d30     14 2B 02 F6 | 	mov	local03, local02
17d34     01 2A 66 F0 | 	shl	local03, #1
17d38     14 2B 02 F1 | 	add	local03, local02
17d3c     03 2A 66 F0 | 	shl	local03, #3
17d40     14 00 00 FF 
17d44     38 E5 05 F1 | 	add	objptr, ##10552
17d48     F2 2A 02 F1 | 	add	local03, objptr
17d4c     0C 4E 85 F1 | 	sub	fp, #12
17d50     15 2D 62 FC | 	wrlong	local04, local03
17d54     14 00 00 FF 
17d58     38 E5 85 F1 | 	sub	objptr, ##10552
17d5c                 | LR__1925
17d5c                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
17d5c     40 4E 05 F1 | 	add	fp, #64
17d60     A7 12 02 FB | 	rdlong	arg01, fp
17d64     40 4E 85 F1 | 	sub	fp, #64
17d68     00 14 06 F6 | 	mov	arg02, #0
17d6c     01 16 06 F6 | 	mov	arg03, #1
17d70     6C 1C B1 FD | 	call	#__system___float_cmp
17d74     00 FA 55 F2 | 	cmps	result1, #0 wc
17d78     24 00 90 CD |  if_b	jmp	#LR__1926
17d7c     40 4E 05 F1 | 	add	fp, #64
17d80     A7 12 02 FB | 	rdlong	arg01, fp
17d84     40 4E 85 F1 | 	sub	fp, #64
17d88     20 0E 23 FF 
17d8c     00 14 06 F6 | 	mov	arg02, ##1176256512
17d90     01 16 66 F6 | 	neg	arg03, #1
17d94     48 1C B1 FD | 	call	#__system___float_cmp
17d98     01 FA 55 F2 | 	cmps	result1, #1 wc
17d9c     48 00 90 CD |  if_b	jmp	#LR__1927
17da0                 | LR__1926
17da0     0C 4E 05 F1 | 	add	fp, #12
17da4     A7 2A 02 FB | 	rdlong	local03, fp
17da8     15 33 02 F6 | 	mov	local07, local03
17dac     01 32 66 F0 | 	shl	local07, #1
17db0     15 33 02 F1 | 	add	local07, local03
17db4     03 32 66 F0 | 	shl	local07, #3
17db8     14 00 00 FF 
17dbc     38 E5 05 F1 | 	add	objptr, ##10552
17dc0     F2 32 02 F1 | 	add	local07, objptr
17dc4     06 32 06 F1 | 	add	local07, #6
17dc8     19 2F E2 FA | 	rdword	local05, local07
17dcc     17 2D 32 F9 | 	getword	local04, local05, #0
17dd0     1C 4E 05 F1 | 	add	fp, #28
17dd4     A7 2C 62 FC | 	wrlong	local04, fp
17dd8     28 4E 85 F1 | 	sub	fp, #40
17ddc     14 00 00 FF 
17de0     38 E5 85 F1 | 	sub	objptr, ##10552
17de4     54 00 90 FD | 	jmp	#LR__1928
17de8                 | LR__1927
17de8     40 4E 05 F1 | 	add	fp, #64
17dec     A7 12 02 FB | 	rdlong	arg01, fp
17df0     40 4E 85 F1 | 	sub	fp, #64
17df4     01 14 06 F6 | 	mov	arg02, #1
17df8     78 1C B1 FD | 	call	#__system___float_tointeger
17dfc     28 4E 05 F1 | 	add	fp, #40
17e00     A7 FA 61 FC | 	wrlong	result1, fp
17e04     1C 4E 85 F1 | 	sub	fp, #28
17e08     A7 28 02 FB | 	rdlong	local02, fp
17e0c     14 2B 02 F6 | 	mov	local03, local02
17e10     01 2A 66 F0 | 	shl	local03, #1
17e14     14 2B 02 F1 | 	add	local03, local02
17e18     03 2A 66 F0 | 	shl	local03, #3
17e1c     14 00 00 FF 
17e20     38 E5 05 F1 | 	add	objptr, ##10552
17e24     F2 2A 02 F1 | 	add	local03, objptr
17e28     0C 4E 85 F1 | 	sub	fp, #12
17e2c     06 2A 06 F1 | 	add	local03, #6
17e30     15 FB 51 FC | 	wrword	result1, local03
17e34     14 00 00 FF 
17e38     38 E5 85 F1 | 	sub	objptr, ##10552
17e3c                 | LR__1928
17e3c                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
17e3c     44 4E 05 F1 | 	add	fp, #68
17e40     A7 12 02 FB | 	rdlong	arg01, fp
17e44     44 4E 85 F1 | 	sub	fp, #68
17e48     00 14 06 F6 | 	mov	arg02, #0
17e4c     01 16 06 F6 | 	mov	arg03, #1
17e50     8C 1B B1 FD | 	call	#__system___float_cmp
17e54     00 FA 55 F2 | 	cmps	result1, #0 wc
17e58     24 00 90 CD |  if_b	jmp	#LR__1929
17e5c     44 4E 05 F1 | 	add	fp, #68
17e60     A7 12 02 FB | 	rdlong	arg01, fp
17e64     44 4E 85 F1 | 	sub	fp, #68
17e68     89 C1 20 FF 
17e6c     6F 14 06 F6 | 	mov	arg02, ##1099108975
17e70     01 16 66 F6 | 	neg	arg03, #1
17e74     68 1B B1 FD | 	call	#__system___float_cmp
17e78     01 FA 55 F2 | 	cmps	result1, #1 wc
17e7c     44 00 90 CD |  if_b	jmp	#LR__1930
17e80                 | LR__1929
17e80     0C 4E 05 F1 | 	add	fp, #12
17e84     A7 28 02 FB | 	rdlong	local02, fp
17e88     14 2B 02 F6 | 	mov	local03, local02
17e8c     01 2A 66 F0 | 	shl	local03, #1
17e90     14 2B 02 F1 | 	add	local03, local02
17e94     03 2A 66 F0 | 	shl	local03, #3
17e98     14 00 00 FF 
17e9c     38 E5 05 F1 | 	add	objptr, ##10552
17ea0     F2 2A 02 F1 | 	add	local03, objptr
17ea4     0C 2A 06 F1 | 	add	local03, #12
17ea8     15 31 02 FB | 	rdlong	local06, local03
17eac     68 4E 05 F1 | 	add	fp, #104
17eb0     A7 30 62 FC | 	wrlong	local06, fp
17eb4     74 4E 85 F1 | 	sub	fp, #116
17eb8     14 00 00 FF 
17ebc     38 E5 85 F1 | 	sub	objptr, ##10552
17ec0     48 00 90 FD | 	jmp	#LR__1931
17ec4                 | LR__1930
17ec4     44 4E 05 F1 | 	add	fp, #68
17ec8     A7 2C 02 FB | 	rdlong	local04, fp
17ecc     30 4E 05 F1 | 	add	fp, #48
17ed0     A7 2C 62 FC | 	wrlong	local04, fp
17ed4     68 4E 85 F1 | 	sub	fp, #104
17ed8     A7 28 02 FB | 	rdlong	local02, fp
17edc     14 2B 02 F6 | 	mov	local03, local02
17ee0     01 2A 66 F0 | 	shl	local03, #1
17ee4     14 2B 02 F1 | 	add	local03, local02
17ee8     03 2A 66 F0 | 	shl	local03, #3
17eec     14 00 00 FF 
17ef0     38 E5 05 F1 | 	add	objptr, ##10552
17ef4     F2 2A 02 F1 | 	add	local03, objptr
17ef8     0C 4E 85 F1 | 	sub	fp, #12
17efc     0C 2A 06 F1 | 	add	local03, #12
17f00     15 2D 62 FC | 	wrlong	local04, local03
17f04     14 00 00 FF 
17f08     38 E5 85 F1 | 	sub	objptr, ##10552
17f0c                 | LR__1931
17f0c                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
17f0c     48 4E 05 F1 | 	add	fp, #72
17f10     A7 12 02 FB | 	rdlong	arg01, fp
17f14     48 4E 85 F1 | 	sub	fp, #72
17f18     00 14 06 F6 | 	mov	arg02, #0
17f1c     01 16 06 F6 | 	mov	arg03, #1
17f20     BC 1A B1 FD | 	call	#__system___float_cmp
17f24     00 FA 55 F2 | 	cmps	result1, #0 wc
17f28     24 00 90 CD |  if_b	jmp	#LR__1932
17f2c     48 4E 05 F1 | 	add	fp, #72
17f30     A7 12 02 FB | 	rdlong	arg01, fp
17f34     48 4E 85 F1 | 	sub	fp, #72
17f38     00 00 21 FF 
17f3c     00 14 06 F6 | 	mov	arg02, ##1107296256
17f40     01 16 66 F6 | 	neg	arg03, #1
17f44     98 1A B1 FD | 	call	#__system___float_cmp
17f48     01 FA 55 F2 | 	cmps	result1, #1 wc
17f4c     48 00 90 CD |  if_b	jmp	#LR__1933
17f50                 | LR__1932
17f50     0C 4E 05 F1 | 	add	fp, #12
17f54     A7 2A 02 FB | 	rdlong	local03, fp
17f58     15 33 02 F6 | 	mov	local07, local03
17f5c     01 32 66 F0 | 	shl	local07, #1
17f60     15 33 02 F1 | 	add	local07, local03
17f64     03 32 66 F0 | 	shl	local07, #3
17f68     14 00 00 FF 
17f6c     38 E5 05 F1 | 	add	objptr, ##10552
17f70     F2 32 02 F1 | 	add	local07, objptr
17f74     04 32 06 F1 | 	add	local07, #4
17f78     19 2F C2 FA | 	rdbyte	local05, local07
17f7c     17 2D E2 F8 | 	getbyte	local04, local05, #0
17f80     14 4E 05 F1 | 	add	fp, #20
17f84     A7 2C 62 FC | 	wrlong	local04, fp
17f88     20 4E 85 F1 | 	sub	fp, #32
17f8c     14 00 00 FF 
17f90     38 E5 85 F1 | 	sub	objptr, ##10552
17f94     54 00 90 FD | 	jmp	#LR__1934
17f98                 | LR__1933
17f98     48 4E 05 F1 | 	add	fp, #72
17f9c     A7 12 02 FB | 	rdlong	arg01, fp
17fa0     48 4E 85 F1 | 	sub	fp, #72
17fa4     01 14 06 F6 | 	mov	arg02, #1
17fa8     C8 1A B1 FD | 	call	#__system___float_tointeger
17fac     20 4E 05 F1 | 	add	fp, #32
17fb0     A7 FA 61 FC | 	wrlong	result1, fp
17fb4     14 4E 85 F1 | 	sub	fp, #20
17fb8     A7 28 02 FB | 	rdlong	local02, fp
17fbc     14 2B 02 F6 | 	mov	local03, local02
17fc0     01 2A 66 F0 | 	shl	local03, #1
17fc4     14 2B 02 F1 | 	add	local03, local02
17fc8     03 2A 66 F0 | 	shl	local03, #3
17fcc     14 00 00 FF 
17fd0     38 E5 05 F1 | 	add	objptr, ##10552
17fd4     F2 2A 02 F1 | 	add	local03, objptr
17fd8     0C 4E 85 F1 | 	sub	fp, #12
17fdc     04 2A 06 F1 | 	add	local03, #4
17fe0     15 FB 41 FC | 	wrbyte	result1, local03
17fe4     14 00 00 FF 
17fe8     38 E5 85 F1 | 	sub	objptr, ##10552
17fec                 | LR__1934
17fec                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
17fec     4C 4E 05 F1 | 	add	fp, #76
17ff0     A7 12 02 FB | 	rdlong	arg01, fp
17ff4     4C 4E 85 F1 | 	sub	fp, #76
17ff8     00 14 06 F6 | 	mov	arg02, #0
17ffc     01 16 06 F6 | 	mov	arg03, #1
18000     DC 19 B1 FD | 	call	#__system___float_cmp
18004     00 FA 55 F2 | 	cmps	result1, #0 wc
18008     24 00 90 CD |  if_b	jmp	#LR__1935
1800c     4C 4E 05 F1 | 	add	fp, #76
18010     A7 12 02 FB | 	rdlong	arg01, fp
18014     4C 4E 85 F1 | 	sub	fp, #76
18018     00 80 20 FF 
1801c     00 14 06 F6 | 	mov	arg02, ##1090519040
18020     01 16 66 F6 | 	neg	arg03, #1
18024     B8 19 B1 FD | 	call	#__system___float_cmp
18028     01 FA 55 F2 | 	cmps	result1, #1 wc
1802c     48 00 90 CD |  if_b	jmp	#LR__1936
18030                 | LR__1935
18030     0C 4E 05 F1 | 	add	fp, #12
18034     A7 2A 02 FB | 	rdlong	local03, fp
18038     15 33 02 F6 | 	mov	local07, local03
1803c     01 32 66 F0 | 	shl	local07, #1
18040     15 33 02 F1 | 	add	local07, local03
18044     03 32 66 F0 | 	shl	local07, #3
18048     14 00 00 FF 
1804c     38 E5 05 F1 | 	add	objptr, ##10552
18050     F2 32 02 F1 | 	add	local07, objptr
18054     05 32 06 F1 | 	add	local07, #5
18058     19 2F C2 FA | 	rdbyte	local05, local07
1805c     17 2D E2 F8 | 	getbyte	local04, local05, #0
18060     18 4E 05 F1 | 	add	fp, #24
18064     A7 2C 62 FC | 	wrlong	local04, fp
18068     24 4E 85 F1 | 	sub	fp, #36
1806c     14 00 00 FF 
18070     38 E5 85 F1 | 	sub	objptr, ##10552
18074     54 00 90 FD | 	jmp	#LR__1937
18078                 | LR__1936
18078     4C 4E 05 F1 | 	add	fp, #76
1807c     A7 12 02 FB | 	rdlong	arg01, fp
18080     4C 4E 85 F1 | 	sub	fp, #76
18084     01 14 06 F6 | 	mov	arg02, #1
18088     E8 19 B1 FD | 	call	#__system___float_tointeger
1808c     24 4E 05 F1 | 	add	fp, #36
18090     A7 FA 61 FC | 	wrlong	result1, fp
18094     18 4E 85 F1 | 	sub	fp, #24
18098     A7 28 02 FB | 	rdlong	local02, fp
1809c     14 2B 02 F6 | 	mov	local03, local02
180a0     01 2A 66 F0 | 	shl	local03, #1
180a4     14 2B 02 F1 | 	add	local03, local02
180a8     03 2A 66 F0 | 	shl	local03, #3
180ac     14 00 00 FF 
180b0     38 E5 05 F1 | 	add	objptr, ##10552
180b4     F2 2A 02 F1 | 	add	local03, objptr
180b8     0C 4E 85 F1 | 	sub	fp, #12
180bc     05 2A 06 F1 | 	add	local03, #5
180c0     15 FB 41 FC | 	wrbyte	result1, local03
180c4     14 00 00 FF 
180c8     38 E5 85 F1 | 	sub	objptr, ##10552
180cc                 | LR__1937
180cc                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
180cc     50 4E 05 F1 | 	add	fp, #80
180d0     A7 12 02 FB | 	rdlong	arg01, fp
180d4     50 4E 85 F1 | 	sub	fp, #80
180d8     00 14 06 F6 | 	mov	arg02, #0
180dc     01 16 06 F6 | 	mov	arg03, #1
180e0     FC 18 B1 FD | 	call	#__system___float_cmp
180e4     00 FA 55 F2 | 	cmps	result1, #0 wc
180e8     24 00 90 CD |  if_b	jmp	#LR__1938
180ec     50 4E 05 F1 | 	add	fp, #80
180f0     A7 12 02 FB | 	rdlong	arg01, fp
180f4     50 4E 85 F1 | 	sub	fp, #80
180f8     00 3D 22 FF 
180fc     00 14 06 F6 | 	mov	arg02, ##1148846080
18100     01 16 66 F6 | 	neg	arg03, #1
18104     D8 18 B1 FD | 	call	#__system___float_cmp
18108     01 FA 55 F2 | 	cmps	result1, #1 wc
1810c     44 00 90 CD |  if_b	jmp	#LR__1939
18110                 | LR__1938
18110     0C 4E 05 F1 | 	add	fp, #12
18114     A7 28 02 FB | 	rdlong	local02, fp
18118     14 2B 02 F6 | 	mov	local03, local02
1811c     01 2A 66 F0 | 	shl	local03, #1
18120     14 2B 02 F1 | 	add	local03, local02
18124     03 2A 66 F0 | 	shl	local03, #3
18128     14 00 00 FF 
1812c     38 E5 05 F1 | 	add	objptr, ##10552
18130     F2 2A 02 F1 | 	add	local03, objptr
18134     08 2A 06 F1 | 	add	local03, #8
18138     15 31 02 FB | 	rdlong	local06, local03
1813c     6C 4E 05 F1 | 	add	fp, #108
18140     A7 30 62 FC | 	wrlong	local06, fp
18144     78 4E 85 F1 | 	sub	fp, #120
18148     14 00 00 FF 
1814c     38 E5 85 F1 | 	sub	objptr, ##10552
18150     48 00 90 FD | 	jmp	#LR__1940
18154                 | LR__1939
18154     50 4E 05 F1 | 	add	fp, #80
18158     A7 30 02 FB | 	rdlong	local06, fp
1815c     28 4E 05 F1 | 	add	fp, #40
18160     A7 30 62 FC | 	wrlong	local06, fp
18164     6C 4E 85 F1 | 	sub	fp, #108
18168     A7 28 02 FB | 	rdlong	local02, fp
1816c     14 2B 02 F6 | 	mov	local03, local02
18170     01 2A 66 F0 | 	shl	local03, #1
18174     14 2B 02 F1 | 	add	local03, local02
18178     03 2A 66 F0 | 	shl	local03, #3
1817c     14 00 00 FF 
18180     38 E5 05 F1 | 	add	objptr, ##10552
18184     F2 2A 02 F1 | 	add	local03, objptr
18188     0C 4E 85 F1 | 	sub	fp, #12
1818c     08 2A 06 F1 | 	add	local03, #8
18190     15 31 62 FC | 	wrlong	local06, local03
18194     14 00 00 FF 
18198     38 E5 85 F1 | 	sub	objptr, ##10552
1819c                 | LR__1940
1819c                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
1819c     54 4E 05 F1 | 	add	fp, #84
181a0     A7 12 02 FB | 	rdlong	arg01, fp
181a4     54 4E 85 F1 | 	sub	fp, #84
181a8     00 C0 5F FF 
181ac     00 14 06 F6 | 	mov	arg02, ##-1082130432
181b0     01 16 06 F6 | 	mov	arg03, #1
181b4     28 18 B1 FD | 	call	#__system___float_cmp
181b8     00 FA 55 F2 | 	cmps	result1, #0 wc
181bc     24 00 90 CD |  if_b	jmp	#LR__1941
181c0     54 4E 05 F1 | 	add	fp, #84
181c4     A7 12 02 FB | 	rdlong	arg01, fp
181c8     54 4E 85 F1 | 	sub	fp, #84
181cc     00 C0 1F FF 
181d0     00 14 06 F6 | 	mov	arg02, ##1065353216
181d4     01 16 66 F6 | 	neg	arg03, #1
181d8     04 18 B1 FD | 	call	#__system___float_cmp
181dc     01 FA 55 F2 | 	cmps	result1, #1 wc
181e0     44 00 90 CD |  if_b	jmp	#LR__1942
181e4                 | LR__1941
181e4     0C 4E 05 F1 | 	add	fp, #12
181e8     A7 28 02 FB | 	rdlong	local02, fp
181ec     14 2B 02 F6 | 	mov	local03, local02
181f0     01 2A 66 F0 | 	shl	local03, #1
181f4     14 2B 02 F1 | 	add	local03, local02
181f8     03 2A 66 F0 | 	shl	local03, #3
181fc     14 00 00 FF 
18200     38 E5 05 F1 | 	add	objptr, ##10552
18204     F2 2A 02 F1 | 	add	local03, objptr
18208     10 2A 06 F1 | 	add	local03, #16
1820c     15 31 02 FB | 	rdlong	local06, local03
18210     64 4E 05 F1 | 	add	fp, #100
18214     A7 30 62 FC | 	wrlong	local06, fp
18218     70 4E 85 F1 | 	sub	fp, #112
1821c     14 00 00 FF 
18220     38 E5 85 F1 | 	sub	objptr, ##10552
18224     48 00 90 FD | 	jmp	#LR__1943
18228                 | LR__1942
18228     54 4E 05 F1 | 	add	fp, #84
1822c     A7 30 02 FB | 	rdlong	local06, fp
18230     1C 4E 05 F1 | 	add	fp, #28
18234     A7 30 62 FC | 	wrlong	local06, fp
18238     64 4E 85 F1 | 	sub	fp, #100
1823c     A7 28 02 FB | 	rdlong	local02, fp
18240     14 2B 02 F6 | 	mov	local03, local02
18244     01 2A 66 F0 | 	shl	local03, #1
18248     14 2B 02 F1 | 	add	local03, local02
1824c     03 2A 66 F0 | 	shl	local03, #3
18250     14 00 00 FF 
18254     38 E5 05 F1 | 	add	objptr, ##10552
18258     F2 2A 02 F1 | 	add	local03, objptr
1825c     0C 4E 85 F1 | 	sub	fp, #12
18260     10 2A 06 F1 | 	add	local03, #16
18264     15 31 62 FC | 	wrlong	local06, local03
18268     14 00 00 FF 
1826c     38 E5 85 F1 | 	sub	objptr, ##10552
18270                 | LR__1943
18270                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
18270     58 4E 05 F1 | 	add	fp, #88
18274     A7 12 02 FB | 	rdlong	arg01, fp
18278     58 4E 85 F1 | 	sub	fp, #88
1827c     00 14 06 F6 | 	mov	arg02, #0
18280     01 16 06 F6 | 	mov	arg03, #1
18284     58 17 B1 FD | 	call	#__system___float_cmp
18288     00 FA 55 F2 | 	cmps	result1, #0 wc
1828c     24 00 90 CD |  if_b	jmp	#LR__1944
18290     58 4E 05 F1 | 	add	fp, #88
18294     A7 12 02 FB | 	rdlong	arg01, fp
18298     58 4E 85 F1 | 	sub	fp, #88
1829c     80 BF 21 FF 
182a0     00 14 06 F6 | 	mov	arg02, ##1132396544
182a4     01 16 66 F6 | 	neg	arg03, #1
182a8     34 17 B1 FD | 	call	#__system___float_cmp
182ac     01 FA 55 F2 | 	cmps	result1, #1 wc
182b0     44 00 90 CD |  if_b	jmp	#LR__1945
182b4                 | LR__1944
182b4     0C 4E 05 F1 | 	add	fp, #12
182b8     A7 2A 02 FB | 	rdlong	local03, fp
182bc     15 33 02 F6 | 	mov	local07, local03
182c0     01 32 66 F0 | 	shl	local07, #1
182c4     15 33 02 F1 | 	add	local07, local03
182c8     03 32 66 F0 | 	shl	local07, #3
182cc     14 00 00 FF 
182d0     38 E5 05 F1 | 	add	objptr, ##10552
182d4     F2 32 02 F1 | 	add	local07, objptr
182d8     14 32 06 F1 | 	add	local07, #20
182dc     19 2D E2 FA | 	rdword	local04, local07
182e0     20 4E 05 F1 | 	add	fp, #32
182e4     A7 2C 62 FC | 	wrlong	local04, fp
182e8     2C 4E 85 F1 | 	sub	fp, #44
182ec     14 00 00 FF 
182f0     38 E5 85 F1 | 	sub	objptr, ##10552
182f4     54 00 90 FD | 	jmp	#LR__1946
182f8                 | LR__1945
182f8     58 4E 05 F1 | 	add	fp, #88
182fc     A7 12 02 FB | 	rdlong	arg01, fp
18300     58 4E 85 F1 | 	sub	fp, #88
18304     01 14 06 F6 | 	mov	arg02, #1
18308     68 17 B1 FD | 	call	#__system___float_tointeger
1830c     2C 4E 05 F1 | 	add	fp, #44
18310     A7 FA 61 FC | 	wrlong	result1, fp
18314     20 4E 85 F1 | 	sub	fp, #32
18318     A7 28 02 FB | 	rdlong	local02, fp
1831c     14 2B 02 F6 | 	mov	local03, local02
18320     01 2A 66 F0 | 	shl	local03, #1
18324     14 2B 02 F1 | 	add	local03, local02
18328     03 2A 66 F0 | 	shl	local03, #3
1832c     14 00 00 FF 
18330     38 E5 05 F1 | 	add	objptr, ##10552
18334     F2 2A 02 F1 | 	add	local03, objptr
18338     0C 4E 85 F1 | 	sub	fp, #12
1833c     14 2A 06 F1 | 	add	local03, #20
18340     15 FB 51 FC | 	wrword	result1, local03
18344     14 00 00 FF 
18348     38 E5 85 F1 | 	sub	objptr, ##10552
1834c                 | LR__1946
1834c     6C 4E 05 F1 | 	add	fp, #108
18350     A7 14 02 FB | 	rdlong	arg02, fp
18354     6C 4E 85 F1 | 	sub	fp, #108
18358     FC 16 20 FF 
1835c     54 12 06 F6 | 	mov	arg01, ##1076754516
18360     18 22 B1 FD | 	call	#__system____builtin_logbase
18364     FD 2C 02 F6 | 	mov	local04, result1
18368     1E 14 C6 F9 | 	decod	arg02, #30
1836c     FC 16 20 FF 
18370     54 12 06 F6 | 	mov	arg01, ##1076754516
18374     04 22 B1 FD | 	call	#__system____builtin_logbase
18378     FD 14 02 F6 | 	mov	arg02, result1
1837c     16 13 02 F6 | 	mov	arg01, local04
18380     2C 14 B1 FD | 	call	#__system___float_div
18384     FD 12 02 F6 | 	mov	arg01, result1
18388     00 14 06 F6 | 	mov	arg02, #0
1838c     E4 16 B1 FD | 	call	#__system___float_tointeger
18390     30 4E 05 F1 | 	add	fp, #48
18394     A7 FA 61 FC | 	wrlong	result1, fp
18398     1E 2C C6 F9 | 	decod	local04, #30
1839c     FD 12 02 F6 | 	mov	arg01, result1
183a0     30 4E 85 F1 | 	sub	fp, #48
183a4     05 12 06 F1 | 	add	arg01, #5
183a8     09 13 52 F6 | 	abs	arg01, arg01 wc
183ac     1F 34 C6 C9 |  if_b	decod	local08, #31
183b0     00 34 06 36 |  if_ae	mov	local08, #0
183b4     F0 0D B1 FD | 	call	#__system___float_fromuns
183b8     1A FB 61 F5 | 	xor	result1, local08
183bc     FD 14 02 F6 | 	mov	arg02, result1
183c0     16 13 02 F6 | 	mov	arg01, local04
183c4     EC 20 B1 FD | 	call	#__system____builtin_powf
183c8     FD 12 02 F6 | 	mov	arg01, result1
183cc     01 14 06 F6 | 	mov	arg02, #1
183d0     A0 16 B1 FD | 	call	#__system___float_tointeger
183d4     10 4E 05 F1 | 	add	fp, #16
183d8     A7 FA 61 FC | 	wrlong	result1, fp
183dc                 | ' skip=round(2^(lfreq+5))
183dc                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
183dc     10 4E 85 F1 | 	sub	fp, #16
183e0     40 00 00 FF 
183e4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
183e8     30 00 90 CD |  if_b	jmp	#LR__1947
183ec     10 4E 05 F1 | 	add	fp, #16
183f0     A7 26 02 FB | 	rdlong	local01, fp
183f4     13 2D 52 F6 | 	abs	local04, local01 wc
183f8     0F 2C 46 F0 | 	shr	local04, #15
183fc     16 2D 82 F6 | 	negc	local04, local04
18400     0C 4E 85 F1 | 	sub	fp, #12
18404     A7 2C 62 FC | 	wrlong	local04, fp
18408     0C 4E 05 F1 | 	add	fp, #12
1840c     40 00 80 FF 
18410     A7 00 68 FC | 	wrlong	##32768, fp
18414     10 4E 85 F1 | 	sub	fp, #16
18418     0C 00 90 FD | 	jmp	#LR__1948
1841c                 | LR__1947
1841c     04 4E 05 F1 | 	add	fp, #4
18420     A7 02 68 FC | 	wrlong	#1, fp
18424     04 4E 85 F1 | 	sub	fp, #4
18428                 | LR__1948
18428     6C 4E 05 F1 | 	add	fp, #108
1842c     A7 14 02 FB | 	rdlong	arg02, fp
18430     6C 4E 85 F1 | 	sub	fp, #108
18434     3E 2C 25 FF 
18438     3C 12 06 F6 | 	mov	arg01, ##1247312956
1843c     70 13 B1 FD | 	call	#__system___float_div
18440     FD 2C 02 F6 | 	mov	local04, result1
18444     04 4E 05 F1 | 	add	fp, #4
18448     A7 12 02 FB | 	rdlong	arg01, fp
1844c     04 4E 85 F1 | 	sub	fp, #4
18450     09 13 52 F6 | 	abs	arg01, arg01 wc
18454     1F 34 C6 C9 |  if_b	decod	local08, #31
18458     00 34 06 36 |  if_ae	mov	local08, #0
1845c     48 0D B1 FD | 	call	#__system___float_fromuns
18460     1A FB 61 F5 | 	xor	result1, local08
18464     FD 26 02 F6 | 	mov	local01, result1
18468     1E 28 C6 F9 | 	decod	local02, #30
1846c     0D 12 06 F6 | 	mov	arg01, #13
18470     30 4E 05 F1 | 	add	fp, #48
18474     A7 30 02 FB | 	rdlong	local06, fp
18478     30 4E 85 F1 | 	sub	fp, #48
1847c     18 13 82 F1 | 	sub	arg01, local06
18480     09 13 52 F6 | 	abs	arg01, arg01 wc
18484     1F 34 C6 C9 |  if_b	decod	local08, #31
18488     00 34 06 36 |  if_ae	mov	local08, #0
1848c     18 0D B1 FD | 	call	#__system___float_fromuns
18490     1A FB 61 F5 | 	xor	result1, local08
18494     FD 14 02 F6 | 	mov	arg02, result1
18498     14 13 02 F6 | 	mov	arg01, local02
1849c     14 20 B1 FD | 	call	#__system____builtin_powf
184a0     FD 14 02 F6 | 	mov	arg02, result1
184a4     13 13 02 F6 | 	mov	arg01, local01
184a8     00 11 B1 FD | 	call	#__system___float_mul
184ac     FD 14 02 F6 | 	mov	arg02, result1
184b0     16 13 02 F6 | 	mov	arg01, local04
184b4     F8 12 B1 FD | 	call	#__system___float_div
184b8     FD 12 02 F6 | 	mov	arg01, result1
184bc     01 14 06 F6 | 	mov	arg02, #1
184c0     B0 15 B1 FD | 	call	#__system___float_tointeger
184c4     34 4E 05 F1 | 	add	fp, #52
184c8     A7 FA 61 FC | 	wrlong	result1, fp
184cc     34 4E 05 F1 | 	add	fp, #52
184d0     A7 12 02 FB | 	rdlong	arg01, fp
184d4     10 4E 05 F1 | 	add	fp, #16
184d8     A7 14 02 FB | 	rdlong	arg02, fp
184dc     78 4E 85 F1 | 	sub	fp, #120
184e0     CC 12 B1 FD | 	call	#__system___float_div
184e4     FD 12 02 F6 | 	mov	arg01, result1
184e8     01 14 06 F6 | 	mov	arg02, #1
184ec     84 15 B1 FD | 	call	#__system___float_tointeger
184f0     FD 2C 02 F6 | 	mov	local04, result1
184f4     14 4E 05 F1 | 	add	fp, #20
184f8     A7 2C 62 FC | 	wrlong	local04, fp
184fc     5C 4E 05 F1 | 	add	fp, #92
18500     A7 14 02 FB | 	rdlong	arg02, fp
18504     70 4E 85 F1 | 	sub	fp, #112
18508     00 00 23 FF 
1850c     00 12 06 F6 | 	mov	arg01, ##1174405120
18510     98 10 B1 FD | 	call	#__system___float_mul
18514     FD 12 02 F6 | 	mov	arg01, result1
18518     01 14 06 F6 | 	mov	arg02, #1
1851c     54 15 B1 FD | 	call	#__system___float_tointeger
18520     0D 2C C6 F9 | 	decod	local04, #13
18524     FD 2C 02 F1 | 	add	local04, result1
18528     18 4E 05 F1 | 	add	fp, #24
1852c     A7 2C 62 FC | 	wrlong	local04, fp
18530     5C 4E 05 F1 | 	add	fp, #92
18534     A7 14 02 FB | 	rdlong	arg02, fp
18538     74 4E 85 F1 | 	sub	fp, #116
1853c     00 3D 22 FF 
18540     00 12 06 F6 | 	mov	arg01, ##1148846080
18544     64 10 B1 FD | 	call	#__system___float_mul
18548     FD 12 02 F6 | 	mov	arg01, result1
1854c     01 14 06 F6 | 	mov	arg02, #1
18550     20 15 B1 FD | 	call	#__system___float_tointeger
18554     1C 4E 05 F1 | 	add	fp, #28
18558     A7 FA 61 FC | 	wrlong	result1, fp
1855c     37 00 00 FF 
18560     10 E4 05 F1 | 	add	objptr, ##28176
18564     F2 2C 02 FB | 	rdlong	local04, objptr
18568     37 00 00 FF 
1856c     10 E4 85 F1 | 	sub	objptr, ##28176
18570     10 4E 85 F1 | 	sub	fp, #16
18574     A7 28 02 FB | 	rdlong	local02, fp
18578     06 28 66 F0 | 	shl	local02, #6
1857c     14 2D 02 F1 | 	add	local04, local02
18580     04 4E 85 F1 | 	sub	fp, #4
18584     A7 2C 62 FC | 	wrlong	local04, fp
18588                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
18588                 | ' speed=round(speed_coeff/slen)
18588                 | ' ipan=8192+round(8192*pan)
18588                 | ' ivol=round(1000.0*vol)
18588                 | ' base2=base+64*channel
18588                 | ' if wave <32 then 
18588     18 4E 05 F1 | 	add	fp, #24
1858c     A7 2C 02 FB | 	rdlong	local04, fp
18590     20 4E 85 F1 | 	sub	fp, #32
18594     20 2C 56 F2 | 	cmps	local04, #32 wc
18598     2C 00 90 3D |  if_ae	jmp	#LR__1949
1859c     08 4E 05 F1 | 	add	fp, #8
185a0     A7 12 02 FB | 	rdlong	arg01, fp
185a4     08 12 06 F1 | 	add	arg01, #8
185a8     18 4E 05 F1 | 	add	fp, #24
185ac     A7 14 02 FB | 	rdlong	arg02, fp
185b0     20 4E 85 F1 | 	sub	fp, #32
185b4     0B 14 66 F0 | 	shl	arg02, #11
185b8     00 00 60 FF 
185bc     00 14 06 F1 | 	add	arg02, ##-1073741824
185c0     09 15 62 FC | 	wrlong	arg02, arg01
185c4     18 00 90 FD | 	jmp	#LR__1950
185c8                 | LR__1949
185c8     08 4E 05 F1 | 	add	fp, #8
185cc     A7 12 02 FB | 	rdlong	arg01, fp
185d0     08 4E 85 F1 | 	sub	fp, #8
185d4     08 12 06 F1 | 	add	arg01, #8
185d8     00 00 E4 FF 
185dc     09 01 68 FC | 	wrlong	##-939524096, arg01
185e0                 | LR__1950
185e0     08 4E 05 F1 | 	add	fp, #8
185e4     A7 12 02 FB | 	rdlong	arg01, fp
185e8     10 12 06 F1 | 	add	arg01, #16
185ec     04 00 80 FF 
185f0     09 01 68 FC | 	wrlong	##2048, arg01
185f4     A7 12 02 FB | 	rdlong	arg01, fp
185f8     0C 12 06 F1 | 	add	arg01, #12
185fc     09 01 68 FC | 	wrlong	#0, arg01
18600     A7 12 02 FB | 	rdlong	arg01, fp
18604     14 12 06 F1 | 	add	arg01, #20
18608     14 4E 05 F1 | 	add	fp, #20
1860c     A7 14 02 FB | 	rdlong	arg02, fp
18610     09 15 52 FC | 	wrword	arg02, arg01
18614     14 4E 85 F1 | 	sub	fp, #20
18618     A7 12 02 FB | 	rdlong	arg01, fp
1861c     16 12 06 F1 | 	add	arg01, #22
18620     10 4E 05 F1 | 	add	fp, #16
18624     A7 14 02 FB | 	rdlong	arg02, fp
18628     09 15 52 FC | 	wrword	arg02, arg01
1862c                 | ' lpoke base2+16,2048
1862c                 | ' lpoke base2+12,0
1862c                 | ' dpoke base2+20,ivol 
1862c                 | ' dpoke base2+22,ipan 
1862c                 | ' if wave<32 then
1862c     08 4E 05 F1 | 	add	fp, #8
18630     A7 2C 02 FB | 	rdlong	local04, fp
18634     20 4E 85 F1 | 	sub	fp, #32
18638     20 2C 56 F2 | 	cmps	local04, #32 wc
1863c     38 00 90 3D |  if_ae	jmp	#LR__1951
18640     08 4E 05 F1 | 	add	fp, #8
18644     A7 12 02 FB | 	rdlong	arg01, fp
18648     18 12 06 F1 | 	add	arg01, #24
1864c     2C 4E 05 F1 | 	add	fp, #44
18650     A7 14 02 FB | 	rdlong	arg02, fp
18654     09 15 52 FC | 	wrword	arg02, arg01
18658     2C 4E 85 F1 | 	sub	fp, #44
1865c     A7 12 02 FB | 	rdlong	arg01, fp
18660     1A 12 06 F1 | 	add	arg01, #26
18664     08 4E 05 F1 | 	add	fp, #8
18668     A7 14 02 FB | 	rdlong	arg02, fp
1866c     10 4E 85 F1 | 	sub	fp, #16
18670     09 15 52 FC | 	wrword	arg02, arg01
18674     48 00 90 FD | 	jmp	#LR__1952
18678                 | LR__1951
18678     08 4E 05 F1 | 	add	fp, #8
1867c     A7 2C 02 FB | 	rdlong	local04, fp
18680     18 2C 06 F1 | 	add	local04, #24
18684     64 4E 05 F1 | 	add	fp, #100
18688     A7 14 02 FB | 	rdlong	arg02, fp
1868c     6C 4E 85 F1 | 	sub	fp, #108
18690     3E 2C 25 FF 
18694     3C 12 06 F6 | 	mov	arg01, ##1247312956
18698     14 11 B1 FD | 	call	#__system___float_div
1869c     FD 12 02 F6 | 	mov	arg01, result1
186a0     01 14 06 F6 | 	mov	arg02, #1
186a4     CC 13 B1 FD | 	call	#__system___float_tointeger
186a8     16 FB 51 FC | 	wrword	result1, local04
186ac     08 4E 05 F1 | 	add	fp, #8
186b0     A7 12 02 FB | 	rdlong	arg01, fp
186b4     08 4E 85 F1 | 	sub	fp, #8
186b8     1A 12 06 F1 | 	add	arg01, #26
186bc     09 01 5A FC | 	wrword	#256, arg01
186c0                 | LR__1952
186c0     08 4E 05 F1 | 	add	fp, #8
186c4     A7 12 02 FB | 	rdlong	arg01, fp
186c8     1C 12 06 F1 | 	add	arg01, #28
186cc     09 01 68 FC | 	wrlong	#0, arg01
186d0     A7 12 02 FB | 	rdlong	arg01, fp
186d4     20 12 06 F1 | 	add	arg01, #32
186d8     09 01 68 FC | 	wrlong	#0, arg01
186dc                 | ' lpoke base2+28,$0000_0000
186dc                 | ' lpoke base2+32,0 
186dc                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
186dc     1C 4E 05 F1 | 	add	fp, #28
186e0     A7 2C 02 FB | 	rdlong	local04, fp
186e4     24 4E 85 F1 | 	sub	fp, #36
186e8     08 2C 0E F2 | 	cmp	local04, #8 wz
186ec     18 00 90 5D |  if_ne	jmp	#LR__1953
186f0     08 4E 05 F1 | 	add	fp, #8
186f4     A7 12 02 FB | 	rdlong	arg01, fp
186f8     08 4E 85 F1 | 	sub	fp, #8
186fc     24 12 06 F1 | 	add	arg01, #36
18700     09 01 68 FC | 	wrlong	#0, arg01
18704     34 00 90 FD | 	jmp	#LR__1954
18708                 | LR__1953
18708     08 4E 05 F1 | 	add	fp, #8
1870c     A7 12 02 FB | 	rdlong	arg01, fp
18710     24 12 06 F1 | 	add	arg01, #36
18714     1C 4E 05 F1 | 	add	fp, #28
18718     A7 14 02 FB | 	rdlong	arg02, fp
1871c     24 4E 85 F1 | 	sub	fp, #36
18720     09 14 66 F0 | 	shl	arg02, #9
18724     0C 00 00 FF 
18728     D8 E4 05 F1 | 	add	objptr, ##6360
1872c     F2 14 02 F1 | 	add	arg02, objptr
18730     0C 00 00 FF 
18734     D8 E4 85 F1 | 	sub	objptr, ##6360
18738     09 15 62 FC | 	wrlong	arg02, arg01
1873c                 | LR__1954
1873c     08 4E 05 F1 | 	add	fp, #8
18740     A7 12 02 FB | 	rdlong	arg01, fp
18744     28 12 06 F1 | 	add	arg01, #40
18748     0C 4E 05 F1 | 	add	fp, #12
1874c     A7 14 02 FB | 	rdlong	arg02, fp
18750     09 15 62 FC | 	wrlong	arg02, arg01
18754     0C 4E 85 F1 | 	sub	fp, #12
18758     A7 12 02 FB | 	rdlong	arg01, fp
1875c     2C 12 06 F1 | 	add	arg01, #44
18760     24 4E 05 F1 | 	add	fp, #36
18764     A7 14 02 FB | 	rdlong	arg02, fp
18768     09 15 62 FC | 	wrlong	arg02, arg01
1876c                 | ' lpoke base2+40,speed 
1876c                 | ' lpoke base2+44,sus 
1876c                 | ' if delay>0 then waitms(delay) 
1876c     04 4E 85 F1 | 	sub	fp, #4
18770     A7 2C 02 FB | 	rdlong	local04, fp
18774     28 4E 85 F1 | 	sub	fp, #40
18778     01 2C 56 F2 | 	cmps	local04, #1 wc
1877c     28 4E 05 31 |  if_ae	add	fp, #40
18780     A7 12 02 3B |  if_ae	rdlong	arg01, fp
18784     28 4E 85 31 |  if_ae	sub	fp, #40
18788     9C E2 B0 3D |  if_ae	call	#__system___waitms
1878c     A7 F0 03 F6 | 	mov	ptra, fp
18790     B2 00 A0 FD | 	call	#popregs_
18794                 | _do_play_ret
18794     2D 00 64 FD | 	ret
18798                 | 
18798                 | ' 
18798                 | ' '-------------------- plot
18798                 | ' 
18798                 | ' sub do_plot
18798                 | _do_plot
18798     00 4A 05 F6 | 	mov	COUNT_, #0
1879c     A8 00 A0 FD | 	call	#pushregs_
187a0     20 F0 07 F1 | 	add	ptra, #32
187a4     AC 4D BF FD | 	call	#_pop
187a8     FD 16 02 F6 | 	mov	arg03, result1
187ac     FE 14 02 F6 | 	mov	arg02, result2
187b0     FF 12 02 F6 | 	mov	arg01, result3
187b4     0C 4E 05 F1 | 	add	fp, #12
187b8     A7 16 62 FC | 	wrlong	arg03, fp
187bc     04 4E 05 F1 | 	add	fp, #4
187c0     A7 14 62 FC | 	wrlong	arg02, fp
187c4     04 4E 05 F1 | 	add	fp, #4
187c8     A7 12 62 FC | 	wrlong	arg01, fp
187cc     14 4E 85 F1 | 	sub	fp, #20
187d0     80 4D BF FD | 	call	#_pop
187d4     FF 16 02 F6 | 	mov	arg03, result3
187d8     A7 FA 61 FC | 	wrlong	result1, fp
187dc     04 4E 05 F1 | 	add	fp, #4
187e0     A7 FC 61 FC | 	wrlong	result2, fp
187e4     04 4E 05 F1 | 	add	fp, #4
187e8     A7 16 62 FC | 	wrlong	arg03, fp
187ec     08 4E 85 F1 | 	sub	fp, #8
187f0     A7 12 02 F6 | 	mov	arg01, fp
187f4     40 4F BF FD | 	call	#_converttoint
187f8     18 4E 05 F1 | 	add	fp, #24
187fc     A7 FA 61 FC | 	wrlong	result1, fp
18800     0C 4E 85 F1 | 	sub	fp, #12
18804     A7 12 02 F6 | 	mov	arg01, fp
18808     0C 4E 85 F1 | 	sub	fp, #12
1880c     28 4F BF FD | 	call	#_converttoint
18810     1C 4E 05 F1 | 	add	fp, #28
18814     A7 FA 61 FC | 	wrlong	result1, fp
18818     04 4E 85 F1 | 	sub	fp, #4
1881c     A7 16 02 FB | 	rdlong	arg03, fp
18820     37 00 00 FF 
18824     2C E4 05 F1 | 	add	objptr, ##28204
18828     F2 16 62 FC | 	wrlong	arg03, objptr
1882c     04 4E 05 F1 | 	add	fp, #4
18830     A7 14 02 FB | 	rdlong	arg02, fp
18834     1C 4E 85 F1 | 	sub	fp, #28
18838     04 E4 05 F1 | 	add	objptr, #4
1883c     F2 14 62 FC | 	wrlong	arg02, objptr
18840     04 E4 85 F1 | 	sub	objptr, #4
18844     F2 12 02 FB | 	rdlong	arg01, objptr
18848     04 E4 85 F1 | 	sub	objptr, #4
1884c     F2 16 02 FB | 	rdlong	arg03, objptr
18850     37 00 00 FF 
18854     28 E4 85 F1 | 	sub	objptr, ##28200
18858     80 B5 B0 FD | 	call	#_hg010b_spin2_putpixel
1885c     A7 F0 03 F6 | 	mov	ptra, fp
18860     B2 00 A0 FD | 	call	#popregs_
18864                 | _do_plot_ret
18864     2D 00 64 FD | 	ret
18868                 | 
18868                 | ' 
18868                 | ' '-------------------- poke
18868                 | ' 
18868                 | ' sub do_poke
18868                 | _do_poke
18868     01 4A 05 F6 | 	mov	COUNT_, #1
1886c     A8 00 A0 FD | 	call	#pushregs_
18870     20 F0 07 F1 | 	add	ptra, #32
18874     DC 4C BF FD | 	call	#_pop
18878     FD 14 02 F6 | 	mov	arg02, result1
1887c     FE 12 02 F6 | 	mov	arg01, result2
18880     FF 26 02 F6 | 	mov	local01, result3
18884     A7 14 62 FC | 	wrlong	arg02, fp
18888     04 4E 05 F1 | 	add	fp, #4
1888c     A7 12 62 FC | 	wrlong	arg01, fp
18890     04 4E 05 F1 | 	add	fp, #4
18894     A7 26 62 FC | 	wrlong	local01, fp
18898     08 4E 85 F1 | 	sub	fp, #8
1889c     B4 4C BF FD | 	call	#_pop
188a0     FF 26 02 F6 | 	mov	local01, result3
188a4     0C 4E 05 F1 | 	add	fp, #12
188a8     A7 FA 61 FC | 	wrlong	result1, fp
188ac     04 4E 05 F1 | 	add	fp, #4
188b0     A7 FC 61 FC | 	wrlong	result2, fp
188b4     04 4E 05 F1 | 	add	fp, #4
188b8     A7 26 62 FC | 	wrlong	local01, fp
188bc     08 4E 85 F1 | 	sub	fp, #8
188c0     A7 12 02 F6 | 	mov	arg01, fp
188c4     0C 4E 85 F1 | 	sub	fp, #12
188c8     6C 4E BF FD | 	call	#_converttoint
188cc     18 4E 05 F1 | 	add	fp, #24
188d0     A7 FA 61 FC | 	wrlong	result1, fp
188d4     18 4E 85 F1 | 	sub	fp, #24
188d8     A7 12 02 F6 | 	mov	arg01, fp
188dc     58 4E BF FD | 	call	#_converttoint
188e0     1C 4E 05 F1 | 	add	fp, #28
188e4     A7 FA 61 FC | 	wrlong	result1, fp
188e8                 | ' t1=pop() 'value
188e8                 | ' t2=pop() 
188e8                 | ' a=converttoint(t2) : v=converttoint(t1)
188e8                 | ' if a<$80000 then poke a,v else pspoke a,v
188e8     04 4E 85 F1 | 	sub	fp, #4
188ec     A7 26 02 FB | 	rdlong	local01, fp
188f0     18 4E 85 F1 | 	sub	fp, #24
188f4     00 04 00 FF 
188f8     00 26 16 F2 | 	cmp	local01, ##524288 wc
188fc     1C 00 90 3D |  if_ae	jmp	#LR__1960
18900     18 4E 05 F1 | 	add	fp, #24
18904     A7 12 02 FB | 	rdlong	arg01, fp
18908     04 4E 05 F1 | 	add	fp, #4
1890c     A7 14 02 FB | 	rdlong	arg02, fp
18910     1C 4E 85 F1 | 	sub	fp, #28
18914     09 15 42 FC | 	wrbyte	arg02, arg01
18918     18 00 90 FD | 	jmp	#LR__1961
1891c                 | LR__1960
1891c     18 4E 05 F1 | 	add	fp, #24
18920     A7 12 02 FB | 	rdlong	arg01, fp
18924     04 4E 05 F1 | 	add	fp, #4
18928     A7 14 02 FB | 	rdlong	arg02, fp
1892c     1C 4E 85 F1 | 	sub	fp, #28
18930     44 A6 B0 FD | 	call	#_pspoke
18934                 | LR__1961
18934     A7 F0 03 F6 | 	mov	ptra, fp
18938     B2 00 A0 FD | 	call	#popregs_
1893c                 | _do_poke_ret
1893c     2D 00 64 FD | 	ret
18940                 | 
18940                 | ' 
18940                 | ' '-------------------- pop
18940                 | ' 
18940                 | ' sub do_pop()
18940                 | _do_pop
18940                 | ' if gosubtop>0 then  gosubtop -=1 
18940     50 00 00 FF 
18944     34 E5 05 F1 | 	add	objptr, ##41268
18948     F2 00 02 FB | 	rdlong	_var01, objptr
1894c     50 00 00 FF 
18950     34 E5 85 F1 | 	sub	objptr, ##41268
18954     01 00 56 F2 | 	cmps	_var01, #1 wc
18958     50 00 00 3F 
1895c     34 E5 05 31 |  if_ae	add	objptr, ##41268
18960     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
18964     01 00 86 31 |  if_ae	sub	_var01, #1
18968     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
1896c     50 00 00 3F 
18970     34 E5 85 31 |  if_ae	sub	objptr, ##41268
18974                 | _do_pop_ret
18974     2D 00 64 FD | 	ret
18978                 | 
18978                 | ' 
18978                 | ' '-------------------- position
18978                 | ' 
18978                 | ' sub do_position
18978                 | _do_position
18978     01 4A 05 F6 | 	mov	COUNT_, #1
1897c     A8 00 A0 FD | 	call	#pushregs_
18980     18 F0 07 F1 | 	add	ptra, #24
18984     CC 4B BF FD | 	call	#_pop
18988     FD 14 02 F6 | 	mov	arg02, result1
1898c     FE 12 02 F6 | 	mov	arg01, result2
18990     FF 26 02 F6 | 	mov	local01, result3
18994     A7 14 62 FC | 	wrlong	arg02, fp
18998     04 4E 05 F1 | 	add	fp, #4
1899c     A7 12 62 FC | 	wrlong	arg01, fp
189a0     04 4E 05 F1 | 	add	fp, #4
189a4     A7 26 62 FC | 	wrlong	local01, fp
189a8     08 4E 85 F1 | 	sub	fp, #8
189ac     A4 4B BF FD | 	call	#_pop
189b0     FF 26 02 F6 | 	mov	local01, result3
189b4     0C 4E 05 F1 | 	add	fp, #12
189b8     A7 FA 61 FC | 	wrlong	result1, fp
189bc     04 4E 05 F1 | 	add	fp, #4
189c0     A7 FC 61 FC | 	wrlong	result2, fp
189c4     04 4E 05 F1 | 	add	fp, #4
189c8     A7 26 62 FC | 	wrlong	local01, fp
189cc     08 4E 85 F1 | 	sub	fp, #8
189d0     A7 12 02 F6 | 	mov	arg01, fp
189d4     0C 4E 85 F1 | 	sub	fp, #12
189d8     5C 4D BF FD | 	call	#_converttoint
189dc     FD 26 02 F6 | 	mov	local01, result1
189e0     A7 12 02 F6 | 	mov	arg01, fp
189e4     50 4D BF FD | 	call	#_converttoint
189e8     FD 14 02 F6 | 	mov	arg02, result1
189ec     13 13 02 F6 | 	mov	arg01, local01
189f0     AC BF B0 FD | 	call	#_hg010b_spin2_setcursorpos
189f4     A7 F0 03 F6 | 	mov	ptra, fp
189f8     B2 00 A0 FD | 	call	#popregs_
189fc                 | _do_position_ret
189fc     2D 00 64 FD | 	ret
18a00                 | 
18a00                 | ' 
18a00                 | ' '-------------------- print
18a00                 | ' 
18a00                 | ' sub do_print  
18a00                 | _do_print
18a00     0B 4A 05 F6 | 	mov	COUNT_, #11
18a04     A8 00 A0 FD | 	call	#pushregs_
18a08     00 2C 06 F6 | 	mov	local04, #0
18a0c     44 4B BF FD | 	call	#_pop
18a10     FD 2E 02 F6 | 	mov	local05, result1
18a14     FE 30 02 F6 | 	mov	local06, result2
18a18     FF 32 02 F6 | 	mov	local07, result3
18a1c     17 27 02 F6 | 	mov	local01, local05
18a20     18 29 02 F6 | 	mov	local02, local06
18a24     19 2B 02 F6 | 	mov	local03, local07
18a28                 | '  
18a28                 | ' r=0
18a28                 | ' t1=pop() 
18a28                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18a28     21 2A 0E F2 | 	cmp	local03, #33 wz
18a2c     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
18a30     20 00 90 5D |  if_ne	jmp	#LR__1970
18a34     15 2D 02 F6 | 	mov	local04, local03
18a38     18 4B BF FD | 	call	#_pop
18a3c     FD 2E 02 F6 | 	mov	local05, result1
18a40     FE 30 02 F6 | 	mov	local06, result2
18a44     FF 32 02 F6 | 	mov	local07, result3
18a48     17 27 02 F6 | 	mov	local01, local05
18a4c     18 29 02 F6 | 	mov	local02, local06
18a50     19 2B 02 F6 | 	mov	local03, local07
18a54                 | LR__1970
18a54                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18a54     20 2A 0E F2 | 	cmp	local03, #32 wz
18a58     15 2D 02 A6 |  if_e	mov	local04, local03
18a5c                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18a5c     FF 2A 0E F2 | 	cmp	local03, #255 wz
18a60     10 00 90 5D |  if_ne	jmp	#LR__1971
18a64     13 13 02 F6 | 	mov	arg01, local01
18a68     00 14 06 F6 | 	mov	arg02, #0
18a6c     D8 A2 B0 FD | 	call	#_printerror
18a70     D4 04 90 FD | 	jmp	#LR__1990
18a74                 | LR__1971
18a74                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18a74     2B 2A 0E F2 | 	cmp	local03, #43 wz
18a78     14 00 90 5D |  if_ne	jmp	#LR__1972
18a7c     13 13 02 F6 | 	mov	arg01, local01
18a80     48 4C BF FD | 	call	#_convertstring
18a84     FD 2E 02 F6 | 	mov	local05, result1
18a88     17 27 02 F6 | 	mov	local01, local05
18a8c     1F 2A 06 F6 | 	mov	local03, #31
18a90                 | LR__1972
18a90                 | ' 
18a90                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
18a90     2C 2A 0E F2 | 	cmp	local03, #44 wz
18a94     80 00 90 5D |  if_ne	jmp	#LR__1973
18a98     00 12 06 F6 | 	mov	arg01, #0
18a9c     BC 39 B1 FD | 	call	#__system___getiolock_0603
18aa0     FD 12 02 F6 | 	mov	arg01, result1
18aa4     8C DC B0 FD | 	call	#__system___lockmem
18aa8     B6 01 00 FF 
18aac     64 15 06 F6 | 	mov	arg02, ##@LR__5943
18ab0     00 12 06 F6 | 	mov	arg01, #0
18ab4     00 16 06 F6 | 	mov	arg03, #0
18ab8     6C E9 B0 FD | 	call	#__system___basic_print_string
18abc     0A 34 06 F6 | 	mov	local08, #10
18ac0     00 12 06 F6 | 	mov	arg01, #0
18ac4     13 15 02 F6 | 	mov	arg02, local01
18ac8     00 16 06 F6 | 	mov	arg03, #0
18acc     0A 18 06 F6 | 	mov	arg04, #10
18ad0     98 E9 B0 FD | 	call	#__system___basic_print_integer
18ad4     FD 36 02 F6 | 	mov	local09, result1
18ad8     00 12 06 F6 | 	mov	arg01, #0
18adc     0A 14 06 F6 | 	mov	arg02, #10
18ae0     00 16 06 F6 | 	mov	arg03, #0
18ae4     E8 E8 B0 FD | 	call	#__system___basic_print_char
18ae8     01 38 06 F6 | 	mov	local10, #1
18aec     00 12 06 F6 | 	mov	arg01, #0
18af0     68 39 B1 FD | 	call	#__system___getiolock_0603
18af4     FD 00 68 FC | 	wrlong	#0, result1
18af8     00 3A 06 F6 | 	mov	local11, #0
18afc     54 4A BF FD | 	call	#_pop
18b00     FD 2E 02 F6 | 	mov	local05, result1
18b04     FE 30 02 F6 | 	mov	local06, result2
18b08     FF 32 02 F6 | 	mov	local07, result3
18b0c     17 27 02 F6 | 	mov	local01, local05
18b10     18 29 02 F6 | 	mov	local02, local06
18b14     19 2B 02 F6 | 	mov	local03, local07
18b18                 | LR__1973
18b18                 | ' 
18b18                 | ' if r=print_mod_comma  then
18b18     21 2C 0E F2 | 	cmp	local04, #33 wz
18b1c     AC 01 90 5D |  if_ne	jmp	#LR__1978
18b20                 | '   if t1.result_type=result_int then print t1.result.iresult,
18b20     1C 2A 0E F2 | 	cmp	local03, #28 wz
18b24     64 00 90 5D |  if_ne	jmp	#LR__1974
18b28     00 12 06 F6 | 	mov	arg01, #0
18b2c     2C 39 B1 FD | 	call	#__system___getiolock_0603
18b30     FD 12 02 F6 | 	mov	arg01, result1
18b34     FC DB B0 FD | 	call	#__system___lockmem
18b38     00 30 06 F6 | 	mov	local06, #0
18b3c     00 12 06 F6 | 	mov	arg01, #0
18b40     13 15 02 F6 | 	mov	arg02, local01
18b44     00 16 06 F6 | 	mov	arg03, #0
18b48     0A 18 06 F6 | 	mov	arg04, #10
18b4c     1C E9 B0 FD | 	call	#__system___basic_print_integer
18b50     FD 32 02 F6 | 	mov	local07, result1
18b54     18 2F 02 F6 | 	mov	local05, local06
18b58     19 2F 02 F1 | 	add	local05, local07
18b5c     00 3A 06 F6 | 	mov	local11, #0
18b60     00 12 06 F6 | 	mov	arg01, #0
18b64     09 14 06 F6 | 	mov	arg02, #9
18b68     00 16 06 F6 | 	mov	arg03, #0
18b6c     60 E8 B0 FD | 	call	#__system___basic_print_char
18b70     FD 36 02 F6 | 	mov	local09, result1
18b74     FD 2E 02 F1 | 	add	local05, result1
18b78     00 12 06 F6 | 	mov	arg01, #0
18b7c     DC 38 B1 FD | 	call	#__system___getiolock_0603
18b80     FD 00 68 FC | 	wrlong	#0, result1
18b84     00 FA 05 F6 | 	mov	result1, #0
18b88     00 38 06 F6 | 	mov	local10, #0
18b8c                 | LR__1974
18b8c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
18b8c     1D 2A 0E F2 | 	cmp	local03, #29 wz
18b90     64 00 90 5D |  if_ne	jmp	#LR__1975
18b94     00 12 06 F6 | 	mov	arg01, #0
18b98     C0 38 B1 FD | 	call	#__system___getiolock_0603
18b9c     FD 12 02 F6 | 	mov	arg01, result1
18ba0     90 DB B0 FD | 	call	#__system___lockmem
18ba4     00 30 06 F6 | 	mov	local06, #0
18ba8     00 12 06 F6 | 	mov	arg01, #0
18bac     13 15 02 F6 | 	mov	arg02, local01
18bb0     00 16 06 F6 | 	mov	arg03, #0
18bb4     0A 18 06 F6 | 	mov	arg04, #10
18bb8     F0 E8 B0 FD | 	call	#__system___basic_print_unsigned
18bbc     FD 32 02 F6 | 	mov	local07, result1
18bc0     18 2F 02 F6 | 	mov	local05, local06
18bc4     19 2F 02 F1 | 	add	local05, local07
18bc8     00 3A 06 F6 | 	mov	local11, #0
18bcc     00 12 06 F6 | 	mov	arg01, #0
18bd0     09 14 06 F6 | 	mov	arg02, #9
18bd4     00 16 06 F6 | 	mov	arg03, #0
18bd8     F4 E7 B0 FD | 	call	#__system___basic_print_char
18bdc     FD 36 02 F6 | 	mov	local09, result1
18be0     FD 2E 02 F1 | 	add	local05, result1
18be4     00 12 06 F6 | 	mov	arg01, #0
18be8     70 38 B1 FD | 	call	#__system___getiolock_0603
18bec     FD 00 68 FC | 	wrlong	#0, result1
18bf0     00 FA 05 F6 | 	mov	result1, #0
18bf4     00 38 06 F6 | 	mov	local10, #0
18bf8                 | LR__1975
18bf8                 | '   if t1.result_type=result_float then print t1.result.fresult,
18bf8     1E 2A 0E F2 | 	cmp	local03, #30 wz
18bfc     64 00 90 5D |  if_ne	jmp	#LR__1976
18c00     00 12 06 F6 | 	mov	arg01, #0
18c04     54 38 B1 FD | 	call	#__system___getiolock_0603
18c08     FD 12 02 F6 | 	mov	arg01, result1
18c0c     24 DB B0 FD | 	call	#__system___lockmem
18c10     00 30 06 F6 | 	mov	local06, #0
18c14     00 12 06 F6 | 	mov	arg01, #0
18c18     13 15 02 F6 | 	mov	arg02, local01
18c1c     00 16 06 F6 | 	mov	arg03, #0
18c20     23 18 06 F6 | 	mov	arg04, #35
18c24     9C 0F B1 FD | 	call	#__system___basic_print_float
18c28     FD 32 02 F6 | 	mov	local07, result1
18c2c     18 2F 02 F6 | 	mov	local05, local06
18c30     19 2F 02 F1 | 	add	local05, local07
18c34     00 3A 06 F6 | 	mov	local11, #0
18c38     00 12 06 F6 | 	mov	arg01, #0
18c3c     09 14 06 F6 | 	mov	arg02, #9
18c40     00 16 06 F6 | 	mov	arg03, #0
18c44     88 E7 B0 FD | 	call	#__system___basic_print_char
18c48     FD 36 02 F6 | 	mov	local09, result1
18c4c     FD 2E 02 F1 | 	add	local05, result1
18c50     00 12 06 F6 | 	mov	arg01, #0
18c54     04 38 B1 FD | 	call	#__system___getiolock_0603
18c58     FD 00 68 FC | 	wrlong	#0, result1
18c5c     00 FA 05 F6 | 	mov	result1, #0
18c60     00 38 06 F6 | 	mov	local10, #0
18c64                 | LR__1976
18c64                 | '   if t1.result_type=result_string then print t1.result.sresult,
18c64     1F 2A 0E F2 | 	cmp	local03, #31 wz
18c68     60 00 90 5D |  if_ne	jmp	#LR__1977
18c6c     00 12 06 F6 | 	mov	arg01, #0
18c70     E8 37 B1 FD | 	call	#__system___getiolock_0603
18c74     FD 12 02 F6 | 	mov	arg01, result1
18c78     B8 DA B0 FD | 	call	#__system___lockmem
18c7c     00 30 06 F6 | 	mov	local06, #0
18c80     00 12 06 F6 | 	mov	arg01, #0
18c84     13 15 02 F6 | 	mov	arg02, local01
18c88     00 16 06 F6 | 	mov	arg03, #0
18c8c     98 E7 B0 FD | 	call	#__system___basic_print_string
18c90     FD 32 02 F6 | 	mov	local07, result1
18c94     18 2F 02 F6 | 	mov	local05, local06
18c98     19 2F 02 F1 | 	add	local05, local07
18c9c     00 3A 06 F6 | 	mov	local11, #0
18ca0     00 12 06 F6 | 	mov	arg01, #0
18ca4     09 14 06 F6 | 	mov	arg02, #9
18ca8     00 16 06 F6 | 	mov	arg03, #0
18cac     20 E7 B0 FD | 	call	#__system___basic_print_char
18cb0     FD 36 02 F6 | 	mov	local09, result1
18cb4     FD 2E 02 F1 | 	add	local05, result1
18cb8     00 12 06 F6 | 	mov	arg01, #0
18cbc     9C 37 B1 FD | 	call	#__system___getiolock_0603
18cc0     FD 00 68 FC | 	wrlong	#0, result1
18cc4     00 FA 05 F6 | 	mov	result1, #0
18cc8     00 38 06 F6 | 	mov	local10, #0
18ccc                 | LR__1977
18ccc                 | LR__1978
18ccc                 | ' if r=print_mod_semicolon then 
18ccc     22 2C 0E F2 | 	cmp	local04, #34 wz
18cd0     1C 01 90 5D |  if_ne	jmp	#LR__1983
18cd4                 | '   if t1.result_type=result_int then print t1.result.iresult;
18cd4     1C 2A 0E F2 | 	cmp	local03, #28 wz
18cd8     50 00 90 5D |  if_ne	jmp	#LR__1979
18cdc     00 12 06 F6 | 	mov	arg01, #0
18ce0     78 37 B1 FD | 	call	#__system___getiolock_0603
18ce4     FD 12 02 F6 | 	mov	arg01, result1
18ce8     48 DA B0 FD | 	call	#__system___lockmem
18cec     00 30 06 F6 | 	mov	local06, #0
18cf0     00 38 06 F6 | 	mov	local10, #0
18cf4     0A 3A 06 F6 | 	mov	local11, #10
18cf8     00 12 06 F6 | 	mov	arg01, #0
18cfc     13 15 02 F6 | 	mov	arg02, local01
18d00     00 16 06 F6 | 	mov	arg03, #0
18d04     0A 18 06 F6 | 	mov	arg04, #10
18d08     60 E7 B0 FD | 	call	#__system___basic_print_integer
18d0c     FD 32 02 F6 | 	mov	local07, result1
18d10     18 2F 02 F6 | 	mov	local05, local06
18d14     19 2F 02 F1 | 	add	local05, local07
18d18     00 12 06 F6 | 	mov	arg01, #0
18d1c     3C 37 B1 FD | 	call	#__system___getiolock_0603
18d20     FD 00 68 FC | 	wrlong	#0, result1
18d24     00 FA 05 F6 | 	mov	result1, #0
18d28     00 36 06 F6 | 	mov	local09, #0
18d2c                 | LR__1979
18d2c                 | '   if t1.result_type=result_uint then print t1.result.uresult;
18d2c     1D 2A 0E F2 | 	cmp	local03, #29 wz
18d30     50 00 90 5D |  if_ne	jmp	#LR__1980
18d34     00 12 06 F6 | 	mov	arg01, #0
18d38     20 37 B1 FD | 	call	#__system___getiolock_0603
18d3c     FD 12 02 F6 | 	mov	arg01, result1
18d40     F0 D9 B0 FD | 	call	#__system___lockmem
18d44     00 30 06 F6 | 	mov	local06, #0
18d48     00 38 06 F6 | 	mov	local10, #0
18d4c     0A 3A 06 F6 | 	mov	local11, #10
18d50     00 12 06 F6 | 	mov	arg01, #0
18d54     13 15 02 F6 | 	mov	arg02, local01
18d58     00 16 06 F6 | 	mov	arg03, #0
18d5c     0A 18 06 F6 | 	mov	arg04, #10
18d60     48 E7 B0 FD | 	call	#__system___basic_print_unsigned
18d64     FD 32 02 F6 | 	mov	local07, result1
18d68     18 2F 02 F6 | 	mov	local05, local06
18d6c     19 2F 02 F1 | 	add	local05, local07
18d70     00 12 06 F6 | 	mov	arg01, #0
18d74     E4 36 B1 FD | 	call	#__system___getiolock_0603
18d78     FD 00 68 FC | 	wrlong	#0, result1
18d7c     00 FA 05 F6 | 	mov	result1, #0
18d80     00 36 06 F6 | 	mov	local09, #0
18d84                 | LR__1980
18d84                 | '   if t1.result_type=result_float then print t1.result.fresult;
18d84     1E 2A 0E F2 | 	cmp	local03, #30 wz
18d88     30 00 90 5D |  if_ne	jmp	#LR__1981
18d8c     00 12 06 F6 | 	mov	arg01, #0
18d90     C8 36 B1 FD | 	call	#__system___getiolock_0603
18d94     FD 12 02 F6 | 	mov	arg01, result1
18d98     98 D9 B0 FD | 	call	#__system___lockmem
18d9c     00 12 06 F6 | 	mov	arg01, #0
18da0     13 15 02 F6 | 	mov	arg02, local01
18da4     00 16 06 F6 | 	mov	arg03, #0
18da8     23 18 06 F6 | 	mov	arg04, #35
18dac     14 0E B1 FD | 	call	#__system___basic_print_float
18db0     00 12 06 F6 | 	mov	arg01, #0
18db4     A4 36 B1 FD | 	call	#__system___getiolock_0603
18db8     FD 00 68 FC | 	wrlong	#0, result1
18dbc                 | LR__1981
18dbc                 | '   if t1.result_type=result_string then print t1.result.sresult;
18dbc     1F 2A 0E F2 | 	cmp	local03, #31 wz
18dc0     2C 00 90 5D |  if_ne	jmp	#LR__1982
18dc4     00 12 06 F6 | 	mov	arg01, #0
18dc8     90 36 B1 FD | 	call	#__system___getiolock_0603
18dcc     FD 12 02 F6 | 	mov	arg01, result1
18dd0     60 D9 B0 FD | 	call	#__system___lockmem
18dd4     00 12 06 F6 | 	mov	arg01, #0
18dd8     13 15 02 F6 | 	mov	arg02, local01
18ddc     00 16 06 F6 | 	mov	arg03, #0
18de0     44 E6 B0 FD | 	call	#__system___basic_print_string
18de4     00 12 06 F6 | 	mov	arg01, #0
18de8     70 36 B1 FD | 	call	#__system___getiolock_0603
18dec     FD 00 68 FC | 	wrlong	#0, result1
18df0                 | LR__1982
18df0                 | LR__1983
18df0                 | ' if r=0 then 
18df0     00 2C 0E F2 | 	cmp	local04, #0 wz
18df4     1C 01 90 5D |  if_ne	jmp	#LR__1988
18df8                 | '   if t1.result_type=result_int then print t1.result.iresult
18df8     1C 2A 0E F2 | 	cmp	local03, #28 wz
18dfc     40 00 90 5D |  if_ne	jmp	#LR__1984
18e00     00 12 06 F6 | 	mov	arg01, #0
18e04     54 36 B1 FD | 	call	#__system___getiolock_0603
18e08     FD 12 02 F6 | 	mov	arg01, result1
18e0c     24 D9 B0 FD | 	call	#__system___lockmem
18e10     00 12 06 F6 | 	mov	arg01, #0
18e14     13 15 02 F6 | 	mov	arg02, local01
18e18     00 16 06 F6 | 	mov	arg03, #0
18e1c     0A 18 06 F6 | 	mov	arg04, #10
18e20     48 E6 B0 FD | 	call	#__system___basic_print_integer
18e24     00 12 06 F6 | 	mov	arg01, #0
18e28     0A 14 06 F6 | 	mov	arg02, #10
18e2c     00 16 06 F6 | 	mov	arg03, #0
18e30     9C E5 B0 FD | 	call	#__system___basic_print_char
18e34     00 12 06 F6 | 	mov	arg01, #0
18e38     20 36 B1 FD | 	call	#__system___getiolock_0603
18e3c     FD 00 68 FC | 	wrlong	#0, result1
18e40                 | LR__1984
18e40                 | '   if t1.result_type=result_uint then print t1.result.uresult
18e40     1D 2A 0E F2 | 	cmp	local03, #29 wz
18e44     40 00 90 5D |  if_ne	jmp	#LR__1985
18e48     00 12 06 F6 | 	mov	arg01, #0
18e4c     0C 36 B1 FD | 	call	#__system___getiolock_0603
18e50     FD 12 02 F6 | 	mov	arg01, result1
18e54     DC D8 B0 FD | 	call	#__system___lockmem
18e58     00 12 06 F6 | 	mov	arg01, #0
18e5c     13 15 02 F6 | 	mov	arg02, local01
18e60     00 16 06 F6 | 	mov	arg03, #0
18e64     0A 18 06 F6 | 	mov	arg04, #10
18e68     40 E6 B0 FD | 	call	#__system___basic_print_unsigned
18e6c     00 12 06 F6 | 	mov	arg01, #0
18e70     0A 14 06 F6 | 	mov	arg02, #10
18e74     00 16 06 F6 | 	mov	arg03, #0
18e78     54 E5 B0 FD | 	call	#__system___basic_print_char
18e7c     00 12 06 F6 | 	mov	arg01, #0
18e80     D8 35 B1 FD | 	call	#__system___getiolock_0603
18e84     FD 00 68 FC | 	wrlong	#0, result1
18e88                 | LR__1985
18e88                 | '   if t1.result_type=result_float then print t1.result.fresult
18e88     1E 2A 0E F2 | 	cmp	local03, #30 wz
18e8c     40 00 90 5D |  if_ne	jmp	#LR__1986
18e90     00 12 06 F6 | 	mov	arg01, #0
18e94     C4 35 B1 FD | 	call	#__system___getiolock_0603
18e98     FD 12 02 F6 | 	mov	arg01, result1
18e9c     94 D8 B0 FD | 	call	#__system___lockmem
18ea0     00 12 06 F6 | 	mov	arg01, #0
18ea4     13 15 02 F6 | 	mov	arg02, local01
18ea8     00 16 06 F6 | 	mov	arg03, #0
18eac     23 18 06 F6 | 	mov	arg04, #35
18eb0     10 0D B1 FD | 	call	#__system___basic_print_float
18eb4     00 12 06 F6 | 	mov	arg01, #0
18eb8     0A 14 06 F6 | 	mov	arg02, #10
18ebc     00 16 06 F6 | 	mov	arg03, #0
18ec0     0C E5 B0 FD | 	call	#__system___basic_print_char
18ec4     00 12 06 F6 | 	mov	arg01, #0
18ec8     90 35 B1 FD | 	call	#__system___getiolock_0603
18ecc     FD 00 68 FC | 	wrlong	#0, result1
18ed0                 | LR__1986
18ed0                 | '   if t1.result_type=result_string then print t1.result.sresult
18ed0     1F 2A 0E F2 | 	cmp	local03, #31 wz
18ed4     3C 00 90 5D |  if_ne	jmp	#LR__1987
18ed8     00 12 06 F6 | 	mov	arg01, #0
18edc     7C 35 B1 FD | 	call	#__system___getiolock_0603
18ee0     FD 12 02 F6 | 	mov	arg01, result1
18ee4     4C D8 B0 FD | 	call	#__system___lockmem
18ee8     00 12 06 F6 | 	mov	arg01, #0
18eec     13 15 02 F6 | 	mov	arg02, local01
18ef0     00 16 06 F6 | 	mov	arg03, #0
18ef4     30 E5 B0 FD | 	call	#__system___basic_print_string
18ef8     00 12 06 F6 | 	mov	arg01, #0
18efc     0A 14 06 F6 | 	mov	arg02, #10
18f00     00 16 06 F6 | 	mov	arg03, #0
18f04     C8 E4 B0 FD | 	call	#__system___basic_print_char
18f08     00 12 06 F6 | 	mov	arg01, #0
18f0c     4C 35 B1 FD | 	call	#__system___getiolock_0603
18f10     FD 00 68 FC | 	wrlong	#0, result1
18f14                 | LR__1987
18f14                 | LR__1988
18f14                 | ' if r=print_mod_empty then print
18f14     20 2C 0E F2 | 	cmp	local04, #32 wz
18f18     2C 00 90 5D |  if_ne	jmp	#LR__1989
18f1c     00 12 06 F6 | 	mov	arg01, #0
18f20     38 35 B1 FD | 	call	#__system___getiolock_0603
18f24     FD 12 02 F6 | 	mov	arg01, result1
18f28     08 D8 B0 FD | 	call	#__system___lockmem
18f2c     00 12 06 F6 | 	mov	arg01, #0
18f30     0A 14 06 F6 | 	mov	arg02, #10
18f34     00 16 06 F6 | 	mov	arg03, #0
18f38     94 E4 B0 FD | 	call	#__system___basic_print_char
18f3c     00 12 06 F6 | 	mov	arg01, #0
18f40     18 35 B1 FD | 	call	#__system___getiolock_0603
18f44     FD 00 68 FC | 	wrlong	#0, result1
18f48                 | LR__1989
18f48                 | LR__1990
18f48     A7 F0 03 F6 | 	mov	ptra, fp
18f4c     B2 00 A0 FD | 	call	#popregs_
18f50                 | _do_print_ret
18f50     2D 00 64 FD | 	ret
18f54                 | 
18f54                 | ' 
18f54                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
18f54                 | ' 
18f54                 | ' sub do_push
18f54                 | _do_push
18f54                 | ' if stackpointer<maxstack then 
18f54     43 00 00 FF 
18f58     58 E4 05 F1 | 	add	objptr, ##34392
18f5c     F2 00 02 FB | 	rdlong	_var01, objptr
18f60     43 00 00 FF 
18f64     58 E4 85 F1 | 	sub	objptr, ##34392
18f68     01 00 00 FF 
18f6c     00 00 56 F2 | 	cmps	_var01, ##512 wc
18f70     F8 00 90 3D |  if_ae	jmp	#LR__2000
18f74     4A 00 00 FF 
18f78     80 E4 05 F1 | 	add	objptr, ##38016
18f7c     F2 02 02 FB | 	rdlong	_var02, objptr
18f80     01 05 02 F6 | 	mov	_var03, _var02
18f84     01 04 66 F0 | 	shl	_var03, #1
18f88     01 05 02 F1 | 	add	_var03, _var02
18f8c     02 04 66 F0 | 	shl	_var03, #2
18f90     03 00 00 FF 
18f94     04 E4 85 F1 | 	sub	objptr, ##1540
18f98     F2 04 02 F1 | 	add	_var03, objptr
18f9c     02 01 02 FB | 	rdlong	_var01, _var03
18fa0     04 04 06 F1 | 	add	_var03, #4
18fa4     02 07 02 FB | 	rdlong	_var04, _var03
18fa8     01 05 02 F6 | 	mov	_var03, _var02
18fac     01 04 66 F0 | 	shl	_var03, #1
18fb0     01 05 02 F1 | 	add	_var03, _var02
18fb4     02 04 66 F0 | 	shl	_var03, #2
18fb8     F2 04 02 F1 | 	add	_var03, objptr
18fbc     08 04 06 F1 | 	add	_var03, #8
18fc0     02 03 02 FB | 	rdlong	_var02, _var03
18fc4     04 00 00 FF 
18fc8     24 E4 85 F1 | 	sub	objptr, ##2084
18fcc     F2 04 02 FB | 	rdlong	_var03, objptr
18fd0     02 09 02 F6 | 	mov	_var05, _var03
18fd4     01 08 66 F0 | 	shl	_var05, #1
18fd8     02 09 02 F1 | 	add	_var05, _var03
18fdc     02 08 66 F0 | 	shl	_var05, #2
18fe0     0C 00 00 FF 
18fe4     0C E4 85 F1 | 	sub	objptr, ##6156
18fe8     F2 08 02 F1 | 	add	_var05, objptr
18fec     04 01 62 FC | 	wrlong	_var01, _var05
18ff0     0C 00 00 FF 
18ff4     0C E4 05 F1 | 	add	objptr, ##6156
18ff8     F2 08 02 FB | 	rdlong	_var05, objptr
18ffc     04 05 02 F6 | 	mov	_var03, _var05
19000     01 04 66 F0 | 	shl	_var03, #1
19004     04 05 02 F1 | 	add	_var03, _var05
19008     02 04 66 F0 | 	shl	_var03, #2
1900c     0C 00 00 FF 
19010     0C E4 85 F1 | 	sub	objptr, ##6156
19014     F2 04 02 F1 | 	add	_var03, objptr
19018     04 04 06 F1 | 	add	_var03, #4
1901c     02 07 62 FC | 	wrlong	_var04, _var03
19020     0C 00 00 FF 
19024     0C E4 05 F1 | 	add	objptr, ##6156
19028     F2 08 02 FB | 	rdlong	_var05, objptr
1902c     04 07 02 F6 | 	mov	_var04, _var05
19030     01 06 66 F0 | 	shl	_var04, #1
19034     04 07 02 F1 | 	add	_var04, _var05
19038     02 06 66 F0 | 	shl	_var04, #2
1903c     0C 00 00 FF 
19040     0C E4 85 F1 | 	sub	objptr, ##6156
19044     F2 06 02 F1 | 	add	_var04, objptr
19048     08 06 06 F1 | 	add	_var04, #8
1904c     03 03 62 FC | 	wrlong	_var02, _var04
19050     0C 00 00 FF 
19054     0C E4 05 F1 | 	add	objptr, ##6156
19058     F2 00 02 FB | 	rdlong	_var01, objptr
1905c     01 00 06 F1 | 	add	_var01, #1
19060     F2 00 62 FC | 	wrlong	_var01, objptr
19064     43 00 00 FF 
19068     58 E4 85 F1 | 	sub	objptr, ##34392
1906c                 | LR__2000
1906c                 | _do_push_ret
1906c     2D 00 64 FD | 	ret
19070                 | 
19070                 | ' 
19070                 | ' '-------------------- put
19070                 | ' 
19070                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
19070                 | _do_put
19070     03 4A 05 F6 | 	mov	COUNT_, #3
19074     A8 00 A0 FD | 	call	#pushregs_
19078     28 F0 07 F1 | 	add	ptra, #40
1907c     4A 00 00 FF 
19080     80 E4 05 F1 | 	add	objptr, ##38016
19084     F2 1A 02 FB | 	rdlong	arg05, objptr
19088     0D 19 02 F6 | 	mov	arg04, arg05
1908c     01 18 66 F0 | 	shl	arg04, #1
19090     0D 19 02 F1 | 	add	arg04, arg05
19094     02 18 66 F0 | 	shl	arg04, #2
19098     03 00 00 FF 
1909c     04 E4 85 F1 | 	sub	objptr, ##1540
190a0     F2 18 02 F1 | 	add	arg04, objptr
190a4     0C 1B 02 FB | 	rdlong	arg05, arg04
190a8     A7 1A 62 FC | 	wrlong	arg05, fp
190ac                 | ' 
190ac                 | ' numpar=compiledline(lineptr_e).result.uresult
190ac                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
190ac     04 1A 0E F2 | 	cmp	arg05, #4 wz
190b0     47 00 00 FF 
190b4     7C E4 85 F1 | 	sub	objptr, ##36476
190b8     48 00 90 5D |  if_ne	jmp	#LR__2010
190bc     94 44 BF FD | 	call	#_pop
190c0     FF 1A 02 F6 | 	mov	arg05, result3
190c4     1C 4E 05 F1 | 	add	fp, #28
190c8     A7 FA 61 FC | 	wrlong	result1, fp
190cc     04 4E 05 F1 | 	add	fp, #4
190d0     A7 FC 61 FC | 	wrlong	result2, fp
190d4     04 4E 05 F1 | 	add	fp, #4
190d8     A7 1A 62 FC | 	wrlong	arg05, fp
190dc     08 4E 85 F1 | 	sub	fp, #8
190e0     A7 12 02 F6 | 	mov	arg01, fp
190e4     1C 4E 85 F1 | 	sub	fp, #28
190e8     4C 46 BF FD | 	call	#_converttoint
190ec     52 00 00 FF 
190f0     0C E5 05 F1 | 	add	objptr, ##42252
190f4     F2 FA 61 FC | 	wrlong	result1, objptr
190f8     52 00 00 FF 
190fc     0C E5 85 F1 | 	sub	objptr, ##42252
19100     18 00 90 FD | 	jmp	#LR__2011
19104                 | LR__2010
19104     52 00 00 FF 
19108     0C E5 05 F1 | 	add	objptr, ##42252
1910c     FF FF FF FF 
19110     F2 FE 6B FC | 	wrlong	##-1, objptr
19114     52 00 00 FF 
19118     0C E5 85 F1 | 	sub	objptr, ##42252
1911c                 | LR__2011
1911c                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
1911c     A7 1A 02 FB | 	rdlong	arg05, fp
19120     03 1A 56 F2 | 	cmps	arg05, #3 wc
19124     40 00 90 CD |  if_b	jmp	#LR__2012
19128     28 44 BF FD | 	call	#_pop
1912c     FF 1A 02 F6 | 	mov	arg05, result3
19130     1C 4E 05 F1 | 	add	fp, #28
19134     A7 FA 61 FC | 	wrlong	result1, fp
19138     04 4E 05 F1 | 	add	fp, #4
1913c     A7 FC 61 FC | 	wrlong	result2, fp
19140     04 4E 05 F1 | 	add	fp, #4
19144     A7 1A 62 FC | 	wrlong	arg05, fp
19148     08 4E 85 F1 | 	sub	fp, #8
1914c     A7 12 02 F6 | 	mov	arg01, fp
19150     1C 4E 85 F1 | 	sub	fp, #28
19154     E0 45 BF FD | 	call	#_converttoint
19158     08 4E 05 F1 | 	add	fp, #8
1915c     A7 FA 61 FC | 	wrlong	result1, fp
19160     08 4E 85 F1 | 	sub	fp, #8
19164     0C 00 90 FD | 	jmp	#LR__2013
19168                 | LR__2012
19168     08 4E 05 F1 | 	add	fp, #8
1916c     A7 02 68 FC | 	wrlong	#1, fp
19170     08 4E 85 F1 | 	sub	fp, #8
19174                 | LR__2013
19174                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
19174     A7 18 02 FB | 	rdlong	arg04, fp
19178     02 18 56 F2 | 	cmps	arg04, #2 wc
1917c     3C 00 90 CD |  if_b	jmp	#LR__2014
19180     D0 43 BF FD | 	call	#_pop
19184     FF 18 02 F6 | 	mov	arg04, result3
19188     1C 4E 05 F1 | 	add	fp, #28
1918c     A7 FA 61 FC | 	wrlong	result1, fp
19190     04 4E 05 F1 | 	add	fp, #4
19194     A7 FC 61 FC | 	wrlong	result2, fp
19198     04 4E 05 F1 | 	add	fp, #4
1919c     A7 18 62 FC | 	wrlong	arg04, fp
191a0     08 4E 85 F1 | 	sub	fp, #8
191a4     A7 12 02 F6 | 	mov	arg01, fp
191a8     1C 4E 85 F1 | 	sub	fp, #28
191ac     88 45 BF FD | 	call	#_converttoint
191b0     0C 4E 05 F1 | 	add	fp, #12
191b4     A7 FA 61 FC | 	wrlong	result1, fp
191b8     0C 4E 85 F1 | 	sub	fp, #12
191bc                 | LR__2014
191bc     94 43 BF FD | 	call	#_pop
191c0     FF 18 02 F6 | 	mov	arg04, result3
191c4     1C 4E 05 F1 | 	add	fp, #28
191c8     A7 FA 61 FC | 	wrlong	result1, fp
191cc     04 4E 05 F1 | 	add	fp, #4
191d0     A7 FC 61 FC | 	wrlong	result2, fp
191d4     04 4E 05 F1 | 	add	fp, #4
191d8     A7 18 62 FC | 	wrlong	arg04, fp
191dc     08 4E 85 F1 | 	sub	fp, #8
191e0     A7 12 02 F6 | 	mov	arg01, fp
191e4     1C 4E 85 F1 | 	sub	fp, #28
191e8     4C 45 BF FD | 	call	#_converttoint
191ec     04 4E 05 F1 | 	add	fp, #4
191f0     A7 FA 61 FC | 	wrlong	result1, fp
191f4     10 4E 05 F1 | 	add	fp, #16
191f8     A7 26 02 FB | 	rdlong	local01, fp
191fc     14 4E 85 F1 | 	sub	fp, #20
19200     02 26 66 F0 | 	shl	local01, #2
19204     50 00 00 FF 
19208     C4 E4 05 F1 | 	add	objptr, ##41156
1920c     F2 26 02 F1 | 	add	local01, objptr
19210     13 01 68 FC | 	wrlong	#0, local01
19214                 | ' t1=pop() : channel=converttoint(t1)
19214                 | ' getres(j)=0
19214                 | ' if pos>=0 then
19214     02 00 00 FF 
19218     48 E4 05 F1 | 	add	objptr, ##1096
1921c     F2 28 02 FB | 	rdlong	local02, objptr
19220     52 00 00 FF 
19224     0C E5 85 F1 | 	sub	objptr, ##42252
19228     00 28 56 F2 | 	cmps	local02, #0 wc
1922c     C0 01 90 CD |  if_b	jmp	#LR__2020
19230     10 4E 05 F1 | 	add	fp, #16
19234     A7 00 68 FC | 	wrlong	#0, fp
19238     10 4E 85 F1 | 	sub	fp, #16
1923c                 | '    i=0: do
1923c                 | LR__2015
1923c     14 4E 05 F1 | 	add	fp, #20
19240     A7 00 68 FC | 	wrlong	#0, fp
19244     14 4E 85 F1 | 	sub	fp, #20
19248                 | '    j=0: do    
19248                 | LR__2016
19248                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
19248     0C 4E 05 F1 | 	add	fp, #12
1924c     A7 28 02 FB | 	rdlong	local02, fp
19250     0C 4E 85 F1 | 	sub	fp, #12
19254     00 04 00 FF 
19258     00 28 56 F2 | 	cmps	local02, ##524288 wc
1925c     4C 00 90 3D |  if_ae	jmp	#LR__2017
19260     14 4E 05 F1 | 	add	fp, #20
19264     A7 28 02 FB | 	rdlong	local02, fp
19268     14 27 02 F6 | 	mov	local01, local02
1926c     4E 00 00 FF 
19270     B4 E4 05 F1 | 	add	objptr, ##40116
19274     F2 26 02 F1 | 	add	local01, objptr
19278     08 4E 85 F1 | 	sub	fp, #8
1927c     A7 12 02 FB | 	rdlong	arg01, fp
19280     04 4E 05 F1 | 	add	fp, #4
19284     A7 18 02 FB | 	rdlong	arg04, fp
19288     0A 18 66 F0 | 	shl	arg04, #10
1928c     0C 13 02 F1 | 	add	arg01, arg04
19290     10 4E 85 F1 | 	sub	fp, #16
19294     14 13 02 F1 | 	add	arg01, local02
19298     09 FB C1 FA | 	rdbyte	result1, arg01
1929c     4E 00 00 FF 
192a0     B4 E4 85 F1 | 	sub	objptr, ##40116
192a4     13 FB 41 FC | 	wrbyte	result1, local01
192a8     48 00 90 FD | 	jmp	#LR__2018
192ac                 | LR__2017
192ac     14 4E 05 F1 | 	add	fp, #20
192b0     A7 28 02 FB | 	rdlong	local02, fp
192b4     14 27 02 F6 | 	mov	local01, local02
192b8     4E 00 00 FF 
192bc     B4 E4 05 F1 | 	add	objptr, ##40116
192c0     F2 26 02 F1 | 	add	local01, objptr
192c4     08 4E 85 F1 | 	sub	fp, #8
192c8     A7 12 02 FB | 	rdlong	arg01, fp
192cc     04 4E 05 F1 | 	add	fp, #4
192d0     A7 18 02 FB | 	rdlong	arg04, fp
192d4     0A 18 66 F0 | 	shl	arg04, #10
192d8     0C 13 02 F1 | 	add	arg01, arg04
192dc     10 4E 85 F1 | 	sub	fp, #16
192e0     14 13 02 F1 | 	add	arg01, local02
192e4     4E 00 00 FF 
192e8     B4 E4 85 F1 | 	sub	objptr, ##40116
192ec     D0 9C B0 FD | 	call	#_pspeek
192f0     13 FB 41 FC | 	wrbyte	result1, local01
192f4                 | LR__2018
192f4     14 4E 05 F1 | 	add	fp, #20
192f8     A7 28 02 FB | 	rdlong	local02, fp
192fc     01 28 06 F1 | 	add	local02, #1
19300     A7 28 62 FC | 	wrlong	local02, fp
19304     14 4E 85 F1 | 	sub	fp, #20
19308     02 00 00 FF 
1930c     00 28 56 F2 | 	cmps	local02, ##1024 wc
19310     2C 00 90 3D |  if_ae	jmp	#LR__2019
19314     10 4E 05 F1 | 	add	fp, #16
19318     A7 26 02 FB | 	rdlong	local01, fp
1931c     0A 26 66 F0 | 	shl	local01, #10
19320     04 4E 05 F1 | 	add	fp, #4
19324     A7 28 02 FB | 	rdlong	local02, fp
19328     14 27 02 F1 | 	add	local01, local02
1932c     0C 4E 85 F1 | 	sub	fp, #12
19330     A7 28 02 FB | 	rdlong	local02, fp
19334     08 4E 85 F1 | 	sub	fp, #8
19338     14 27 5A F2 | 	cmps	local01, local02 wcz
1933c     08 FF 9F ED |  if_be	jmp	#LR__2016
19340                 | LR__2019
19340                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
19340     04 4E 05 F1 | 	add	fp, #4
19344     A7 12 02 FB | 	rdlong	arg01, fp
19348     52 00 00 FF 
1934c     0C E5 05 F1 | 	add	objptr, ##42252
19350     F2 14 02 FB | 	rdlong	arg02, objptr
19354     01 14 06 F1 | 	add	arg02, #1
19358     04 00 00 FF 
1935c     58 E4 85 F1 | 	sub	objptr, ##2136
19360     F2 16 02 F6 | 	mov	arg03, objptr
19364     4E 00 00 FF 
19368     B4 E4 85 F1 | 	sub	objptr, ##40116
1936c     04 4E 05 F1 | 	add	fp, #4
19370     A7 18 02 FB | 	rdlong	arg04, fp
19374     08 4E 85 F1 | 	sub	fp, #8
19378     01 1A 06 F6 | 	mov	arg05, #1
1937c     B8 E1 B0 FD | 	call	#__system___basic_put
19380     18 4E 05 F1 | 	add	fp, #24
19384     A7 FA 61 FC | 	wrlong	result1, fp
19388     14 4E 85 F1 | 	sub	fp, #20
1938c     A7 26 02 FB | 	rdlong	local01, fp
19390     02 26 66 F0 | 	shl	local01, #2
19394     50 00 00 FF 
19398     C4 E4 05 F1 | 	add	objptr, ##41156
1939c     F2 26 02 F1 | 	add	local01, objptr
193a0     13 FB 61 FC | 	wrlong	result1, local01
193a4                 | '    if 1024*i+j>amount then exit loop
193a4     0C 4E 05 F1 | 	add	fp, #12
193a8     A7 28 02 FB | 	rdlong	local02, fp
193ac     0A 28 66 F0 | 	shl	local02, #10
193b0     04 4E 05 F1 | 	add	fp, #4
193b4     A7 26 02 FB | 	rdlong	local01, fp
193b8     13 29 02 F1 | 	add	local02, local01
193bc     0C 4E 85 F1 | 	sub	fp, #12
193c0     A7 26 02 FB | 	rdlong	local01, fp
193c4     08 4E 85 F1 | 	sub	fp, #8
193c8     13 29 5A F2 | 	cmps	local02, local01 wcz
193cc     50 00 00 FF 
193d0     C4 E4 85 F1 | 	sub	objptr, ##41156
193d4     CC 01 90 1D |  if_a	jmp	#LR__2027
193d8     10 4E 05 F1 | 	add	fp, #16
193dc     A7 28 02 FB | 	rdlong	local02, fp
193e0     01 28 06 F1 | 	add	local02, #1
193e4     A7 28 62 FC | 	wrlong	local02, fp
193e8     10 4E 85 F1 | 	sub	fp, #16
193ec     4C FE 9F FD | 	jmp	#LR__2015
193f0                 | LR__2020
193f0     10 4E 05 F1 | 	add	fp, #16
193f4     A7 00 68 FC | 	wrlong	#0, fp
193f8     10 4E 85 F1 | 	sub	fp, #16
193fc                 | '    i=0: do
193fc                 | LR__2021
193fc     14 4E 05 F1 | 	add	fp, #20
19400     A7 00 68 FC | 	wrlong	#0, fp
19404     14 4E 85 F1 | 	sub	fp, #20
19408                 | '    j=0: do  
19408                 | LR__2022
19408                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
19408     0C 4E 05 F1 | 	add	fp, #12
1940c     A7 28 02 FB | 	rdlong	local02, fp
19410     0C 4E 85 F1 | 	sub	fp, #12
19414     00 04 00 FF 
19418     00 28 56 F2 | 	cmps	local02, ##524288 wc
1941c     4C 00 90 3D |  if_ae	jmp	#LR__2023
19420     14 4E 05 F1 | 	add	fp, #20
19424     A7 28 02 FB | 	rdlong	local02, fp
19428     14 27 02 F6 | 	mov	local01, local02
1942c     4E 00 00 FF 
19430     B4 E4 05 F1 | 	add	objptr, ##40116
19434     F2 26 02 F1 | 	add	local01, objptr
19438     08 4E 85 F1 | 	sub	fp, #8
1943c     A7 12 02 FB | 	rdlong	arg01, fp
19440     04 4E 05 F1 | 	add	fp, #4
19444     A7 18 02 FB | 	rdlong	arg04, fp
19448     0A 18 66 F0 | 	shl	arg04, #10
1944c     0C 13 02 F1 | 	add	arg01, arg04
19450     10 4E 85 F1 | 	sub	fp, #16
19454     14 13 02 F1 | 	add	arg01, local02
19458     09 FB C1 FA | 	rdbyte	result1, arg01
1945c     4E 00 00 FF 
19460     B4 E4 85 F1 | 	sub	objptr, ##40116
19464     13 FB 41 FC | 	wrbyte	result1, local01
19468     48 00 90 FD | 	jmp	#LR__2024
1946c                 | LR__2023
1946c     14 4E 05 F1 | 	add	fp, #20
19470     A7 28 02 FB | 	rdlong	local02, fp
19474     14 27 02 F6 | 	mov	local01, local02
19478     4E 00 00 FF 
1947c     B4 E4 05 F1 | 	add	objptr, ##40116
19480     F2 26 02 F1 | 	add	local01, objptr
19484     08 4E 85 F1 | 	sub	fp, #8
19488     A7 12 02 FB | 	rdlong	arg01, fp
1948c     04 4E 05 F1 | 	add	fp, #4
19490     A7 18 02 FB | 	rdlong	arg04, fp
19494     0A 18 66 F0 | 	shl	arg04, #10
19498     0C 13 02 F1 | 	add	arg01, arg04
1949c     10 4E 85 F1 | 	sub	fp, #16
194a0     14 13 02 F1 | 	add	arg01, local02
194a4     4E 00 00 FF 
194a8     B4 E4 85 F1 | 	sub	objptr, ##40116
194ac     10 9B B0 FD | 	call	#_pspeek
194b0     13 FB 41 FC | 	wrbyte	result1, local01
194b4                 | LR__2024
194b4     14 4E 05 F1 | 	add	fp, #20
194b8     A7 28 02 FB | 	rdlong	local02, fp
194bc     01 28 06 F1 | 	add	local02, #1
194c0     A7 28 62 FC | 	wrlong	local02, fp
194c4     14 4E 85 F1 | 	sub	fp, #20
194c8     02 00 00 FF 
194cc     00 28 56 F2 | 	cmps	local02, ##1024 wc
194d0     2C 00 90 3D |  if_ae	jmp	#LR__2025
194d4     10 4E 05 F1 | 	add	fp, #16
194d8     A7 26 02 FB | 	rdlong	local01, fp
194dc     0A 26 66 F0 | 	shl	local01, #10
194e0     04 4E 05 F1 | 	add	fp, #4
194e4     A7 28 02 FB | 	rdlong	local02, fp
194e8     14 27 02 F1 | 	add	local01, local02
194ec     0C 4E 85 F1 | 	sub	fp, #12
194f0     A7 28 02 FB | 	rdlong	local02, fp
194f4     08 4E 85 F1 | 	sub	fp, #8
194f8     14 27 5A F2 | 	cmps	local01, local02 wcz
194fc     08 FF 9F ED |  if_be	jmp	#LR__2022
19500                 | LR__2025
19500                 | '    put #channel,,block(0),amount, r : getres(channel)=r
19500     04 4E 05 F1 | 	add	fp, #4
19504     A7 12 02 FB | 	rdlong	arg01, fp
19508     4E 00 00 FF 
1950c     B4 E4 05 F1 | 	add	objptr, ##40116
19510     F2 16 02 F6 | 	mov	arg03, objptr
19514     4E 00 00 FF 
19518     B4 E4 85 F1 | 	sub	objptr, ##40116
1951c     04 4E 05 F1 | 	add	fp, #4
19520     A7 18 02 FB | 	rdlong	arg04, fp
19524     08 4E 85 F1 | 	sub	fp, #8
19528     00 14 06 F6 | 	mov	arg02, #0
1952c     01 1A 06 F6 | 	mov	arg05, #1
19530     04 E0 B0 FD | 	call	#__system___basic_put
19534     18 4E 05 F1 | 	add	fp, #24
19538     A7 FA 61 FC | 	wrlong	result1, fp
1953c     14 4E 85 F1 | 	sub	fp, #20
19540     A7 26 02 FB | 	rdlong	local01, fp
19544     02 26 66 F0 | 	shl	local01, #2
19548     50 00 00 FF 
1954c     C4 E4 05 F1 | 	add	objptr, ##41156
19550     F2 26 02 F1 | 	add	local01, objptr
19554     13 FB 61 FC | 	wrlong	result1, local01
19558                 | '    if 1024*i+j>amount then exit loop
19558     0C 4E 05 F1 | 	add	fp, #12
1955c     A7 28 02 FB | 	rdlong	local02, fp
19560     0A 28 66 F0 | 	shl	local02, #10
19564     04 4E 05 F1 | 	add	fp, #4
19568     A7 26 02 FB | 	rdlong	local01, fp
1956c     13 29 02 F1 | 	add	local02, local01
19570     0C 4E 85 F1 | 	sub	fp, #12
19574     A7 2A 02 FB | 	rdlong	local03, fp
19578     08 4E 85 F1 | 	sub	fp, #8
1957c     15 29 5A F2 | 	cmps	local02, local03 wcz
19580     50 00 00 FF 
19584     C4 E4 85 F1 | 	sub	objptr, ##41156
19588     18 00 90 1D |  if_a	jmp	#LR__2026
1958c     10 4E 05 F1 | 	add	fp, #16
19590     A7 28 02 FB | 	rdlong	local02, fp
19594     01 28 06 F1 | 	add	local02, #1
19598     A7 28 62 FC | 	wrlong	local02, fp
1959c     10 4E 85 F1 | 	sub	fp, #16
195a0     58 FE 9F FD | 	jmp	#LR__2021
195a4                 | LR__2026
195a4                 | LR__2027
195a4     A7 F0 03 F6 | 	mov	ptra, fp
195a8     B2 00 A0 FD | 	call	#popregs_
195ac                 | _do_put_ret
195ac     2D 00 64 FD | 	ret
195b0                 | 
195b0                 | ' 
195b0                 | ' '-------------------- rad
195b0                 | ' 
195b0                 | ' sub do_rad
195b0                 | _do_rad
195b0     52 00 00 FF 
195b4     A8 E4 05 F1 | 	add	objptr, ##42152
195b8     00 C0 9F FF 
195bc     F2 00 68 FC | 	wrlong	##1065353216, objptr
195c0     04 E4 05 F1 | 	add	objptr, #4
195c4     00 C0 9F FF 
195c8     F2 00 68 FC | 	wrlong	##1065353216, objptr
195cc     52 00 00 FF 
195d0     AC E4 85 F1 | 	sub	objptr, ##42156
195d4                 | _do_rad_ret
195d4     2D 00 64 FD | 	ret
195d8                 | 
195d8                 | ' 
195d8                 | ' '-------------------- rdpin
195d8                 | ' 
195d8                 | ' sub do_rdpin
195d8                 | _do_rdpin
195d8     00 4A 05 F6 | 	mov	COUNT_, #0
195dc     A8 00 A0 FD | 	call	#pushregs_
195e0     0C F0 07 F1 | 	add	ptra, #12
195e4     6C 3F BF FD | 	call	#_pop
195e8     A7 FA 61 FC | 	wrlong	result1, fp
195ec     04 4E 05 F1 | 	add	fp, #4
195f0     A7 FC 61 FC | 	wrlong	result2, fp
195f4     04 4E 05 F1 | 	add	fp, #4
195f8     A7 FE 61 FC | 	wrlong	result3, fp
195fc     08 4E 85 F1 | 	sub	fp, #8
19600     A7 12 02 F6 | 	mov	arg01, fp
19604     30 41 BF FD | 	call	#_converttoint
19608     FD FA 89 FA | 	rdpin	result1, result1
1960c     52 00 00 FF 
19610     10 E5 05 F1 | 	add	objptr, ##42256
19614     F2 FA 61 FC | 	wrlong	result1, objptr
19618     52 00 00 FF 
1961c     10 E5 85 F1 | 	sub	objptr, ##42256
19620     08 4E 05 F1 | 	add	fp, #8
19624     A7 3A 68 FC | 	wrlong	#29, fp
19628     08 4E 85 F1 | 	sub	fp, #8
1962c     A7 08 68 FC | 	wrlong	#4, fp
19630     A7 12 02 F6 | 	mov	arg01, fp
19634     B4 3F BF FD | 	call	#_push
19638     A7 F0 03 F6 | 	mov	ptra, fp
1963c     B2 00 A0 FD | 	call	#popregs_
19640                 | _do_rdpin_ret
19640     2D 00 64 FD | 	ret
19644                 | 
19644                 | ' 
19644                 | ' ' ----------------  read
19644                 | ' 
19644                 | ' function read_next_line() as string
19644                 | _read_next_line
19644     07 4A 05 F6 | 	mov	COUNT_, #7
19648     A8 00 A0 FD | 	call	#pushregs_
1964c                 | ' if dataptr=$7FFFFFFF then return("")
1964c     50 00 00 FF 
19650     2C E5 05 F1 | 	add	objptr, ##41260
19654     F2 26 02 FB | 	rdlong	local01, objptr
19658     50 00 00 FF 
1965c     2C E5 85 F1 | 	sub	objptr, ##41260
19660     FF FF 3F FF 
19664     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
19668     B6 01 00 AF 
1966c     8B FB 05 A6 |  if_e	mov	result1, ##@LR__5944
19670     BC 01 90 AD |  if_e	jmp	#LR__2037
19674                 | ' do
19674                 | LR__2030
19674     50 00 00 FF 
19678     08 E5 05 F1 | 	add	objptr, ##41224
1967c     F2 12 02 F6 | 	mov	arg01, objptr
19680     24 E4 05 F1 | 	add	objptr, #36
19684     F2 14 02 FB | 	rdlong	arg02, objptr
19688     24 16 06 F6 | 	mov	arg03, #36
1968c     45 00 00 FF 
19690     60 E4 85 F1 | 	sub	objptr, ##35424
19694     14 C4 B0 FD | 	call	#_psram_spin2_read1
19698                 | '  ' print dataptr
19698                 | '   psram.read1(varptr(dataheader),dataptr,36) 
19698                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
19698     45 00 00 FF 
1969c     3C E4 05 F1 | 	add	objptr, ##35388
196a0     F2 26 02 FB | 	rdlong	local01, objptr
196a4     50 00 00 FF 
196a8     08 E5 85 F1 | 	sub	objptr, ##41224
196ac     FF FF 7F FF 
196b0     FF 27 0E F2 | 	cmp	local01, ##-1 wz
196b4     50 00 00 5F 
196b8     1C E5 05 51 |  if_ne	add	objptr, ##41244
196bc     F2 26 02 5B |  if_ne	rdlong	local01, objptr
196c0     10 E4 05 51 |  if_ne	add	objptr, #16
196c4     F2 26 62 5C |  if_ne	wrlong	local01, objptr
196c8     50 00 00 5F 
196cc     2C E5 85 51 |  if_ne	sub	objptr, ##41260
196d0     50 00 00 FF 
196d4     1C E5 05 F1 | 	add	objptr, ##41244
196d8     F2 26 02 FB | 	rdlong	local01, objptr
196dc     50 00 00 FF 
196e0     1C E5 85 F1 | 	sub	objptr, ##41244
196e4     FF FF 3F FF 
196e8     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
196ec     50 00 00 5F 
196f0     08 E5 05 51 |  if_ne	add	objptr, ##41224
196f4     F2 28 02 5B |  if_ne	rdlong	local02, objptr
196f8     50 00 00 5F 
196fc     08 E5 85 51 |  if_ne	sub	objptr, ##41224
19700     FF FF 7F 5F 
19704     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
19708     50 00 00 5F 
1970c     28 E5 05 51 |  if_ne	add	objptr, ##41256
19710     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
19714     50 00 00 5F 
19718     28 E5 85 51 |  if_ne	sub	objptr, ##41256
1971c     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
19720     50 FF 9F 5D |  if_ne	jmp	#LR__2030
19724                 | ' if dataheader(8)=token_data then 
19724     50 00 00 FF 
19728     28 E5 05 F1 | 	add	objptr, ##41256
1972c     F2 26 02 FB | 	rdlong	local01, objptr
19730     50 00 00 FF 
19734     28 E5 85 F1 | 	sub	objptr, ##41256
19738     B7 26 0E F2 | 	cmp	local01, #183 wz
1973c     E0 00 90 5D |  if_ne	jmp	#LR__2035
19740     50 00 00 FF 
19744     10 E5 05 F1 | 	add	objptr, ##41232
19748     F2 26 02 FB | 	rdlong	local01, objptr
1974c     01 00 00 FF 
19750     E0 E5 05 F1 | 	add	objptr, ##992
19754     F2 26 62 FC | 	wrlong	local01, objptr
19758     01 00 00 FF 
1975c     DC E5 85 F1 | 	sub	objptr, ##988
19760     F2 2C 02 FB | 	rdlong	local04, objptr
19764     01 00 00 FF 
19768     D4 E5 05 F1 | 	add	objptr, ##980
1976c     F2 2C 62 FC | 	wrlong	local04, objptr
19770                 | '  'print "data found at line "; dataheader(0)
19770                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
19770     00 2E 06 F6 | 	mov	local05, #0
19774     52 00 00 FF 
19778     E8 E4 85 F1 | 	sub	objptr, ##42216
1977c                 | LR__2031
1977c     16 2F 52 F2 | 	cmps	local05, local04 wc
19780     3C 00 90 3D |  if_ae	jmp	#LR__2032
19784     52 00 00 FF 
19788     F0 E4 05 F1 | 	add	objptr, ##42224
1978c     F2 12 02 FB | 	rdlong	arg01, objptr
19790     52 00 00 FF 
19794     F0 E4 85 F1 | 	sub	objptr, ##42224
19798     17 13 02 F1 | 	add	arg01, local05
1979c     20 98 B0 FD | 	call	#_pspeek
197a0     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
197a4     CC F1 B0 FD | 	call	#__system__Chr_S
197a8     FD 14 02 F6 | 	mov	arg02, result1
197ac     18 13 02 F6 | 	mov	arg01, local06
197b0     DC CF B0 FD | 	call	#__system___string_concat
197b4     FD 30 02 F6 | 	mov	local06, result1
197b8     01 2E 06 F1 | 	add	local05, #1
197bc     BC FF 9F FD | 	jmp	#LR__2031
197c0                 | LR__2032
197c0     B6 01 00 FF 
197c4     8C 17 06 F6 | 	mov	arg03, ##@LR__5945
197c8     01 12 06 F6 | 	mov	arg01, #1
197cc     18 15 02 F6 | 	mov	arg02, local06
197d0     24 F5 B0 FD | 	call	#__system__Instr
197d4     FD 2E 02 F6 | 	mov	local05, result1
197d8     18 13 02 F6 | 	mov	arg01, local06
197dc     09 33 02 F6 | 	mov	local07, arg01
197e0     97 06 48 FB | 	callpa	#(@LR__2034-@LR__2033)>>2,fcache_load_ptr_
197e4                 | LR__2033
197e4     19 FB C9 FA | 	rdbyte	result1, local07 wz
197e8     01 32 06 51 |  if_ne	add	local07, #1
197ec     F4 FF 9F 5D |  if_ne	jmp	#LR__2033
197f0                 | LR__2034
197f0     09 33 82 F1 | 	sub	local07, arg01
197f4     19 15 02 F6 | 	mov	arg02, local07
197f8     17 15 82 F1 | 	sub	arg02, local05
197fc     04 14 86 F1 | 	sub	arg02, #4
19800     18 13 02 F6 | 	mov	arg01, local06
19804     30 F0 B0 FD | 	call	#__system__Right_S
19808     FD 12 02 F6 | 	mov	arg01, result1
1980c     30 F4 B0 FD | 	call	#__system__RTrim_S
19810     FD 12 02 F6 | 	mov	arg01, result1
19814     68 F3 B0 FD | 	call	#__system__LTrim_S
19818     FD 30 02 F6 | 	mov	local06, result1
1981c     0C 00 90 FD | 	jmp	#LR__2036
19820                 | LR__2035
19820                 | '   return ("") 'todo proper err
19820     B6 01 00 FF 
19824     91 FB 05 F6 | 	mov	result1, ##@LR__5946
19828     04 00 90 FD | 	jmp	#LR__2037
1982c                 | LR__2036
1982c                 | ' return readline
1982c     18 FB 01 F6 | 	mov	result1, local06
19830                 | LR__2037
19830     A7 F0 03 F6 | 	mov	ptra, fp
19834     B2 00 A0 FD | 	call	#popregs_
19838                 | _read_next_line_ret
19838     2D 00 64 FD | 	ret
1983c                 | 
1983c                 | ' 
1983c                 | ' sub do_read
1983c                 | _do_read
1983c     11 4A 05 F6 | 	mov	COUNT_, #17
19840     A8 00 A0 FD | 	call	#pushregs_
19844     58 F1 07 F1 | 	add	ptra, #344
19848     4A 00 00 FF 
1984c     80 E4 05 F1 | 	add	objptr, ##38016
19850     F2 FE 01 FB | 	rdlong	result3, objptr
19854     FF FC 01 F6 | 	mov	result2, result3
19858     01 FC 65 F0 | 	shl	result2, #1
1985c     FF FC 01 F1 | 	add	result2, result3
19860     02 FC 65 F0 | 	shl	result2, #2
19864     03 00 00 FF 
19868     04 E4 85 F1 | 	sub	objptr, ##1540
1986c     F2 FC 01 F1 | 	add	result2, objptr
19870     FE FC 01 FB | 	rdlong	result2, result2
19874     08 4E 05 F1 | 	add	fp, #8
19878     A7 FC 61 FC | 	wrlong	result2, fp
1987c                 | ' 
1987c                 | ' 
1987c                 | ' numpar=compiledline(lineptr_e).result.uresult
1987c                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
1987c     08 4E 85 F1 | 	sub	fp, #8
19880     01 FC 15 F2 | 	cmp	result2, #1 wc
19884     47 00 00 FF 
19888     7C E4 85 F1 | 	sub	objptr, ##36476
1988c     14 00 90 CD |  if_b	jmp	#LR__2040
19890     08 4E 05 F1 | 	add	fp, #8
19894     A7 FC 01 FB | 	rdlong	result2, fp
19898     08 4E 85 F1 | 	sub	fp, #8
1989c     41 FC 15 F2 | 	cmp	result2, #65 wc
198a0     50 00 90 CD |  if_b	jmp	#LR__2041
198a4                 | LR__2040
198a4     00 12 06 F6 | 	mov	arg01, #0
198a8     B0 2B B1 FD | 	call	#__system___getiolock_0603
198ac     FD 12 02 F6 | 	mov	arg01, result1
198b0     80 CE B0 FD | 	call	#__system___lockmem
198b4     B6 01 00 FF 
198b8     92 15 06 F6 | 	mov	arg02, ##@LR__5947
198bc     00 12 06 F6 | 	mov	arg01, #0
198c0     00 16 06 F6 | 	mov	arg03, #0
198c4     60 DB B0 FD | 	call	#__system___basic_print_string
198c8     00 12 06 F6 | 	mov	arg01, #0
198cc     8C 2B B1 FD | 	call	#__system___getiolock_0603
198d0     FD 00 68 FC | 	wrlong	#0, result1
198d4     50 00 00 FF 
198d8     F0 E4 05 F1 | 	add	objptr, ##41200
198dc     F2 14 02 FB | 	rdlong	arg02, objptr
198e0     50 00 00 FF 
198e4     F0 E4 85 F1 | 	sub	objptr, ##41200
198e8     27 12 06 F6 | 	mov	arg01, #39
198ec     58 94 B0 FD | 	call	#_printerror
198f0     5C 0C 90 FD | 	jmp	#LR__2090
198f4                 | LR__2041
198f4     08 4E 05 F1 | 	add	fp, #8
198f8     A7 16 02 FB | 	rdlong	arg03, fp
198fc     01 16 86 F1 | 	sub	arg03, #1
19900     28 4F 05 F1 | 	add	fp, #296
19904     A7 16 62 FC | 	wrlong	arg03, fp
19908     30 4F 85 F1 | 	sub	fp, #304
1990c                 | ' i=numpar-1
1990c                 | ' if readline="" then readline=read_next_line() ': print readline
1990c     52 00 00 FF 
19910     DC E4 05 F1 | 	add	objptr, ##42204
19914     F2 12 02 FB | 	rdlong	arg01, objptr
19918     52 00 00 FF 
1991c     DC E4 85 F1 | 	sub	objptr, ##42204
19920     B6 01 00 FF 
19924     9C 15 06 F6 | 	mov	arg02, ##@LR__5948
19928     30 CE B0 FD | 	call	#__system___string_cmp
1992c     00 FA 0D F2 | 	cmp	result1, #0 wz
19930     18 00 90 5D |  if_ne	jmp	#LR__2042
19934     0C FD BF FD | 	call	#_read_next_line
19938     52 00 00 FF 
1993c     DC E4 05 F1 | 	add	objptr, ##42204
19940     F2 FA 61 FC | 	wrlong	result1, objptr
19944     52 00 00 FF 
19948     DC E4 85 F1 | 	sub	objptr, ##42204
1994c                 | LR__2042
1994c                 | ' if readline="" then printerror(55,runheader(0)) :return
1994c     52 00 00 FF 
19950     DC E4 05 F1 | 	add	objptr, ##42204
19954     F2 12 02 FB | 	rdlong	arg01, objptr
19958     52 00 00 FF 
1995c     DC E4 85 F1 | 	sub	objptr, ##42204
19960     B6 01 00 FF 
19964     9D 15 06 F6 | 	mov	arg02, ##@LR__5949
19968     F0 CD B0 FD | 	call	#__system___string_cmp
1996c     00 FA 0D F2 | 	cmp	result1, #0 wz
19970     20 00 90 5D |  if_ne	jmp	#LR__2043
19974     50 00 00 FF 
19978     F0 E4 05 F1 | 	add	objptr, ##41200
1997c     F2 14 02 FB | 	rdlong	arg02, objptr
19980     50 00 00 FF 
19984     F0 E4 85 F1 | 	sub	objptr, ##41200
19988     37 12 06 F6 | 	mov	arg01, #55
1998c     B8 93 B0 FD | 	call	#_printerror
19990     BC 0B 90 FD | 	jmp	#LR__2090
19994                 | LR__2043
19994     34 4F 05 F1 | 	add	fp, #308
19998     A7 00 68 FC | 	wrlong	#0, fp
1999c     2C 4F 85 F1 | 	sub	fp, #300
199a0     A7 26 02 FB | 	rdlong	local01, fp
199a4     01 26 86 F1 | 	sub	local01, #1
199a8     28 4F 05 F1 | 	add	fp, #296
199ac     A7 26 62 FC | 	wrlong	local01, fp
199b0     30 4F 85 F1 | 	sub	fp, #304
199b4                 | ' j=0
199b4                 | ' i=numpar-1
199b4                 | ' do
199b4                 | LR__2044
199b4                 | '   do
199b4                 | LR__2045
199b4     52 00 00 FF 
199b8     DC E4 05 F1 | 	add	objptr, ##42204
199bc     F2 14 02 FB | 	rdlong	arg02, objptr
199c0     52 00 00 FF 
199c4     DC E4 85 F1 | 	sub	objptr, ##42204
199c8     B6 01 00 FF 
199cc     9E 17 06 F6 | 	mov	arg03, ##@LR__5950
199d0     01 12 06 F6 | 	mov	arg01, #1
199d4     20 F3 B0 FD | 	call	#__system__Instr
199d8     0C 4E 05 F1 | 	add	fp, #12
199dc     A7 FA 61 FC | 	wrlong	result1, fp
199e0                 | '     comma=instr(1,readline,",")  
199e0                 | '       if comma>0  then 
199e0     0C 4E 85 F1 | 	sub	fp, #12
199e4     01 FA 15 F2 | 	cmp	result1, #1 wc
199e8     98 00 90 CD |  if_b	jmp	#LR__2048
199ec     52 00 00 FF 
199f0     DC E4 05 F1 | 	add	objptr, ##42204
199f4     F2 12 02 FB | 	rdlong	arg01, objptr
199f8     52 00 00 FF 
199fc     DC E4 85 F1 | 	sub	objptr, ##42204
19a00     0C 4E 05 F1 | 	add	fp, #12
19a04     A7 14 02 FB | 	rdlong	arg02, fp
19a08     0C 4E 85 F1 | 	sub	fp, #12
19a0c     01 14 86 F1 | 	sub	arg02, #1
19a10     9C ED B0 FD | 	call	#__system__Left_S
19a14     04 4E 05 F1 | 	add	fp, #4
19a18     A7 FA 61 FC | 	wrlong	result1, fp
19a1c     04 4E 85 F1 | 	sub	fp, #4
19a20     52 00 00 FF 
19a24     DC E4 05 F1 | 	add	objptr, ##42204
19a28     F2 12 02 FB | 	rdlong	arg01, objptr
19a2c     09 27 02 F6 | 	mov	local01, arg01
19a30     52 00 00 FF 
19a34     DC E4 85 F1 | 	sub	objptr, ##42204
19a38     09 29 02 F6 | 	mov	local02, arg01
19a3c     97 06 48 FB | 	callpa	#(@LR__2047-@LR__2046)>>2,fcache_load_ptr_
19a40                 | LR__2046
19a40     14 FB C9 FA | 	rdbyte	result1, local02 wz
19a44     01 28 06 51 |  if_ne	add	local02, #1
19a48     F4 FF 9F 5D |  if_ne	jmp	#LR__2046
19a4c                 | LR__2047
19a4c     09 29 82 F1 | 	sub	local02, arg01
19a50     14 15 02 F6 | 	mov	arg02, local02
19a54     0C 4E 05 F1 | 	add	fp, #12
19a58     A7 16 02 FB | 	rdlong	arg03, fp
19a5c     0C 4E 85 F1 | 	sub	fp, #12
19a60     0B 15 82 F1 | 	sub	arg02, arg03
19a64     13 13 02 F6 | 	mov	arg01, local01
19a68     CC ED B0 FD | 	call	#__system__Right_S
19a6c     52 00 00 FF 
19a70     DC E4 05 F1 | 	add	objptr, ##42204
19a74     F2 FA 61 FC | 	wrlong	result1, objptr
19a78     52 00 00 FF 
19a7c     DC E4 85 F1 | 	sub	objptr, ##42204
19a80     48 00 90 FD | 	jmp	#LR__2049
19a84                 | LR__2048
19a84     52 00 00 FF 
19a88     DC E4 05 F1 | 	add	objptr, ##42204
19a8c     F2 12 02 FB | 	rdlong	arg01, objptr
19a90     52 00 00 FF 
19a94     DC E4 85 F1 | 	sub	objptr, ##42204
19a98     A4 F1 B0 FD | 	call	#__system__RTrim_S
19a9c     FD 12 02 F6 | 	mov	arg01, result1
19aa0     DC F0 B0 FD | 	call	#__system__LTrim_S
19aa4     04 4E 05 F1 | 	add	fp, #4
19aa8     A7 FA 61 FC | 	wrlong	result1, fp
19aac     04 4E 85 F1 | 	sub	fp, #4
19ab0     B6 01 00 FF 
19ab4     A0 27 06 F6 | 	mov	local01, ##@LR__5951
19ab8     52 00 00 FF 
19abc     DC E4 05 F1 | 	add	objptr, ##42204
19ac0     F2 26 62 FC | 	wrlong	local01, objptr
19ac4     52 00 00 FF 
19ac8     DC E4 85 F1 | 	sub	objptr, ##42204
19acc                 | LR__2049
19acc                 | '      if part$<>"" then j=j+1
19acc     04 4E 05 F1 | 	add	fp, #4
19ad0     A7 12 02 FB | 	rdlong	arg01, fp
19ad4     04 4E 85 F1 | 	sub	fp, #4
19ad8     B6 01 00 FF 
19adc     A1 15 06 F6 | 	mov	arg02, ##@LR__5952
19ae0     78 CC B0 FD | 	call	#__system___string_cmp
19ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
19ae8     34 4F 05 51 |  if_ne	add	fp, #308
19aec     A7 26 02 5B |  if_ne	rdlong	local01, fp
19af0     01 26 06 51 |  if_ne	add	local01, #1
19af4     A7 26 62 5C |  if_ne	wrlong	local01, fp
19af8     34 4F 85 51 |  if_ne	sub	fp, #308
19afc     30 4F 05 F1 | 	add	fp, #304
19b00     A7 26 02 FB | 	rdlong	local01, fp
19b04     02 26 66 F0 | 	shl	local01, #2
19b08     04 4F 85 F1 | 	sub	fp, #260
19b0c     A7 26 02 F1 | 	add	local01, fp
19b10     28 4E 85 F1 | 	sub	fp, #40
19b14     A7 FA 01 FB | 	rdlong	result1, fp
19b18     13 FB 61 FC | 	wrlong	result1, local01
19b1c     2C 4F 05 F1 | 	add	fp, #300
19b20     A7 26 02 FB | 	rdlong	local01, fp
19b24     01 26 86 F1 | 	sub	local01, #1
19b28     A7 26 62 FC | 	wrlong	local01, fp
19b2c     30 4F 85 F1 | 	sub	fp, #304
19b30                 | '      args(i)=part$  
19b30                 | '      i=i-1
19b30                 | '     if readline="" then readline=read_next_line() 
19b30     52 00 00 FF 
19b34     DC E4 05 F1 | 	add	objptr, ##42204
19b38     F2 12 02 FB | 	rdlong	arg01, objptr
19b3c     52 00 00 FF 
19b40     DC E4 85 F1 | 	sub	objptr, ##42204
19b44     B6 01 00 FF 
19b48     A2 15 06 F6 | 	mov	arg02, ##@LR__5953
19b4c     0C CC B0 FD | 	call	#__system___string_cmp
19b50     00 FA 0D F2 | 	cmp	result1, #0 wz
19b54     18 00 90 5D |  if_ne	jmp	#LR__2050
19b58     E8 FA BF FD | 	call	#_read_next_line
19b5c     52 00 00 FF 
19b60     DC E4 05 F1 | 	add	objptr, ##42204
19b64     F2 FA 61 FC | 	wrlong	result1, objptr
19b68     52 00 00 FF 
19b6c     DC E4 85 F1 | 	sub	objptr, ##42204
19b70                 | LR__2050
19b70     30 4F 05 F1 | 	add	fp, #304
19b74     A7 26 02 FB | 	rdlong	local01, fp
19b78     30 4F 85 F1 | 	sub	fp, #304
19b7c     00 26 56 F2 | 	cmps	local01, #0 wc
19b80     28 00 90 CD |  if_b	jmp	#LR__2051
19b84     52 00 00 FF 
19b88     DC E4 05 F1 | 	add	objptr, ##42204
19b8c     F2 12 02 FB | 	rdlong	arg01, objptr
19b90     52 00 00 FF 
19b94     DC E4 85 F1 | 	sub	objptr, ##42204
19b98     B6 01 00 FF 
19b9c     A3 15 06 F6 | 	mov	arg02, ##@LR__5954
19ba0     B8 CB B0 FD | 	call	#__system___string_cmp
19ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
19ba8     08 FE 9F 5D |  if_ne	jmp	#LR__2045
19bac                 | LR__2051
19bac     30 4F 05 F1 | 	add	fp, #304
19bb0     A7 26 02 FB | 	rdlong	local01, fp
19bb4     30 4F 85 F1 | 	sub	fp, #304
19bb8     00 26 56 F2 | 	cmps	local01, #0 wc
19bbc     F4 FD 9F 3D |  if_ae	jmp	#LR__2044
19bc0                 | ' if j<numpar then printerror(55,runheader(0))
19bc0     34 4F 05 F1 | 	add	fp, #308
19bc4     A7 26 02 FB | 	rdlong	local01, fp
19bc8     2C 4F 85 F1 | 	sub	fp, #300
19bcc     A7 16 02 FB | 	rdlong	arg03, fp
19bd0     08 4E 85 F1 | 	sub	fp, #8
19bd4     0B 27 52 F2 | 	cmps	local01, arg03 wc
19bd8     50 00 00 CF 
19bdc     F0 E4 05 C1 |  if_b	add	objptr, ##41200
19be0     F2 14 02 CB |  if_b	rdlong	arg02, objptr
19be4     50 00 00 CF 
19be8     F0 E4 85 C1 |  if_b	sub	objptr, ##41200
19bec     37 12 06 C6 |  if_b	mov	arg01, #55
19bf0     54 91 B0 CD |  if_b	call	#_printerror
19bf4                 | ' 
19bf4                 | ' for i=0 to numpar-1
19bf4     30 4F 05 F1 | 	add	fp, #304
19bf8     A7 00 68 FC | 	wrlong	#0, fp
19bfc     28 4F 85 F1 | 	sub	fp, #296
19c00     A7 2A 02 FB | 	rdlong	local03, fp
19c04     08 4E 85 F1 | 	sub	fp, #8
19c08                 | LR__2052
19c08     30 4F 05 F1 | 	add	fp, #304
19c0c     A7 2C 02 FB | 	rdlong	local04, fp
19c10     30 4F 85 F1 | 	sub	fp, #304
19c14     16 27 02 F6 | 	mov	local01, local04
19c18     15 27 52 F2 | 	cmps	local01, local03 wc
19c1c     30 09 90 3D |  if_ae	jmp	#LR__2089
19c20                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
19c20     30 4F 05 F1 | 	add	fp, #304
19c24     A7 16 02 FB | 	rdlong	arg03, fp
19c28     02 16 66 F0 | 	shl	arg03, #2
19c2c     04 4F 85 F1 | 	sub	fp, #260
19c30     A7 16 02 F1 | 	add	arg03, fp
19c34     0B 13 02 FB | 	rdlong	arg01, arg03
19c38     2C 4E 85 F1 | 	sub	fp, #44
19c3c     AC CB BE FD | 	call	#_isnum
19c40     FD 2E 02 F6 | 	mov	local05, result1
19c44     30 4F 05 F1 | 	add	fp, #304
19c48     A7 16 02 FB | 	rdlong	arg03, fp
19c4c     02 16 66 F0 | 	shl	arg03, #2
19c50     04 4F 85 F1 | 	sub	fp, #260
19c54     A7 30 02 F6 | 	mov	local06, fp
19c58     A7 16 02 F1 | 	add	arg03, fp
19c5c     0B 13 02 FB | 	rdlong	arg01, arg03
19c60     2C 4E 85 F1 | 	sub	fp, #44
19c64     70 CF BE FD | 	call	#_isint
19c68     FD 2E 2A F5 | 	andn	local05, result1 wz
19c6c     52 00 00 5F 
19c70     10 E5 05 51 |  if_ne	add	objptr, ##42256
19c74     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
19c78     52 00 00 5F 
19c7c     10 E5 85 51 |  if_ne	sub	objptr, ##42256
19c80                 | '   if isint(args(i)) then r=result_int 
19c80     30 4F 05 F1 | 	add	fp, #304
19c84     A7 2E 02 FB | 	rdlong	local05, fp
19c88     02 2E 66 F0 | 	shl	local05, #2
19c8c     04 4F 85 F1 | 	sub	fp, #260
19c90     A7 2E 02 F1 | 	add	local05, fp
19c94     17 13 02 FB | 	rdlong	arg01, local05
19c98     2C 4E 85 F1 | 	sub	fp, #44
19c9c     38 CF BE FD | 	call	#_isint
19ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
19ca4     52 00 00 5F 
19ca8     10 E5 05 51 |  if_ne	add	objptr, ##42256
19cac     F2 38 68 5C |  if_ne	wrlong	#28, objptr
19cb0     52 00 00 5F 
19cb4     10 E5 85 51 |  if_ne	sub	objptr, ##42256
19cb8                 | '   if isdec(args(i)) then r=result_uint 
19cb8     30 4F 05 F1 | 	add	fp, #304
19cbc     A7 2E 02 FB | 	rdlong	local05, fp
19cc0     02 2E 66 F0 | 	shl	local05, #2
19cc4     04 4F 85 F1 | 	sub	fp, #260
19cc8     A7 2E 02 F1 | 	add	local05, fp
19ccc     17 13 02 FB | 	rdlong	arg01, local05
19cd0     2C 4E 85 F1 | 	sub	fp, #44
19cd4     A4 D1 BE FD | 	call	#_isdec
19cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
19cdc     52 00 00 5F 
19ce0     10 E5 05 51 |  if_ne	add	objptr, ##42256
19ce4     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
19ce8     52 00 00 5F 
19cec     10 E5 85 51 |  if_ne	sub	objptr, ##42256
19cf0                 | '   if not isnum(args(i)) then 
19cf0     30 4F 05 F1 | 	add	fp, #304
19cf4     A7 2E 02 FB | 	rdlong	local05, fp
19cf8     02 2E 66 F0 | 	shl	local05, #2
19cfc     04 4F 85 F1 | 	sub	fp, #260
19d00     A7 2E 02 F1 | 	add	local05, fp
19d04     17 13 02 FB | 	rdlong	arg01, local05
19d08     2C 4E 85 F1 | 	sub	fp, #44
19d0c     DC CA BE FD | 	call	#_isnum
19d10     FD 2E 22 F6 | 	not	local05, result1
19d14     00 2E 0E F2 | 	cmp	local05, #0 wz
19d18     4C 01 90 AD |  if_e	jmp	#LR__2057
19d1c     52 00 00 FF 
19d20     10 E5 05 F1 | 	add	objptr, ##42256
19d24     F2 56 68 FC | 	wrlong	#43, objptr
19d28     52 00 00 FF 
19d2c     10 E5 85 F1 | 	sub	objptr, ##42256
19d30     30 4F 05 F1 | 	add	fp, #304
19d34     A7 16 02 FB | 	rdlong	arg03, fp
19d38     02 16 66 F0 | 	shl	arg03, #2
19d3c     04 4F 85 F1 | 	sub	fp, #260
19d40     A7 16 02 F1 | 	add	arg03, fp
19d44     0B 13 02 FB | 	rdlong	arg01, arg03
19d48     2C 4E 85 F1 | 	sub	fp, #44
19d4c     09 29 02 F6 | 	mov	local02, arg01
19d50     97 06 48 FB | 	callpa	#(@LR__2054-@LR__2053)>>2,fcache_load_ptr_
19d54                 | LR__2053
19d54     14 FB C9 FA | 	rdbyte	result1, local02 wz
19d58     01 28 06 51 |  if_ne	add	local02, #1
19d5c     F4 FF 9F 5D |  if_ne	jmp	#LR__2053
19d60                 | LR__2054
19d60     09 29 82 F1 | 	sub	local02, arg01
19d64     14 FB 01 F6 | 	mov	result1, local02
19d68     38 4F 05 F1 | 	add	fp, #312
19d6c     A7 FA 61 FC | 	wrlong	result1, fp
19d70     52 00 00 FF 
19d74     98 E4 05 F1 | 	add	objptr, ##42136
19d78     F2 12 02 FB | 	rdlong	arg01, objptr
19d7c     FD 12 82 F1 | 	sub	arg01, result1
19d80     04 12 86 F1 | 	sub	arg01, #4
19d84     03 12 26 F5 | 	andn	arg01, #3
19d88     F2 12 62 FC | 	wrlong	arg01, objptr
19d8c     52 00 00 FF 
19d90     98 E4 85 F1 | 	sub	objptr, ##42136
19d94     A7 14 02 FB | 	rdlong	arg02, fp
19d98     38 4F 85 F1 | 	sub	fp, #312
19d9c     48 91 B0 FD | 	call	#_pslpoke
19da0                 | '     pslpoke memtop,l
19da0                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
19da0     34 4F 05 F1 | 	add	fp, #308
19da4     A7 02 68 FC | 	wrlong	#1, fp
19da8     04 4E 05 F1 | 	add	fp, #4
19dac     A7 32 02 FB | 	rdlong	local07, fp
19db0     38 4F 85 F1 | 	sub	fp, #312
19db4     01 32 06 F1 | 	add	local07, #1
19db8                 | LR__2055
19db8     34 4F 05 F1 | 	add	fp, #308
19dbc     A7 2E 02 FB | 	rdlong	local05, fp
19dc0     34 4F 85 F1 | 	sub	fp, #308
19dc4     19 2F 52 F2 | 	cmps	local05, local07 wc
19dc8     7C 00 90 3D |  if_ae	jmp	#LR__2056
19dcc     52 00 00 FF 
19dd0     98 E4 05 F1 | 	add	objptr, ##42136
19dd4     F2 30 02 FB | 	rdlong	local06, objptr
19dd8     52 00 00 FF 
19ddc     98 E4 85 F1 | 	sub	objptr, ##42136
19de0     03 30 06 F1 | 	add	local06, #3
19de4     34 4F 05 F1 | 	add	fp, #308
19de8     A7 34 02 FB | 	rdlong	local08, fp
19dec     1A 31 02 F1 | 	add	local06, local08
19df0     04 4E 85 F1 | 	sub	fp, #4
19df4     A7 36 02 FB | 	rdlong	local09, fp
19df8     02 36 66 F0 | 	shl	local09, #2
19dfc     04 4F 85 F1 | 	sub	fp, #260
19e00     A7 38 02 F6 | 	mov	local10, fp
19e04     A7 36 02 F1 | 	add	local09, fp
19e08     1B 13 02 FB | 	rdlong	arg01, local09
19e0c     2C 4E 85 F1 | 	sub	fp, #44
19e10     01 3A 06 F6 | 	mov	local11, #1
19e14     1A 15 02 F6 | 	mov	arg02, local08
19e18     01 16 06 F6 | 	mov	arg03, #1
19e1c     A8 EA B0 FD | 	call	#__system__Mid_S
19e20     FD 14 C2 FA | 	rdbyte	arg02, result1
19e24     18 13 02 F6 | 	mov	arg01, local06
19e28     4C 91 B0 FD | 	call	#_pspoke
19e2c     34 4F 05 F1 | 	add	fp, #308
19e30     A7 30 02 FB | 	rdlong	local06, fp
19e34     18 2F 02 F6 | 	mov	local05, local06
19e38     01 2E 06 F1 | 	add	local05, #1
19e3c     A7 2E 62 FC | 	wrlong	local05, fp
19e40     34 4F 85 F1 | 	sub	fp, #308
19e44     70 FF 9F FD | 	jmp	#LR__2055
19e48                 | LR__2056
19e48     52 00 00 FF 
19e4c     98 E4 05 F1 | 	add	objptr, ##42136
19e50     F2 2E 02 FB | 	rdlong	local05, objptr
19e54     52 00 00 FF 
19e58     98 E4 85 F1 | 	sub	objptr, ##42136
19e5c     10 4E 05 F1 | 	add	fp, #16
19e60     A7 2E 62 FC | 	wrlong	local05, fp
19e64     10 4E 85 F1 | 	sub	fp, #16
19e68                 | LR__2057
19e68     E8 36 BF FD | 	call	#_pop
19e6c     1C 4E 05 F1 | 	add	fp, #28
19e70     A7 FA 61 FC | 	wrlong	result1, fp
19e74     04 4E 05 F1 | 	add	fp, #4
19e78     A7 FC 61 FC | 	wrlong	result2, fp
19e7c     04 4E 05 F1 | 	add	fp, #4
19e80     A7 FE 61 FC | 	wrlong	result3, fp
19e84                 | '   t1=pop() 
19e84                 | '   if i>=numpar-j then
19e84     1C 4E 85 F1 | 	sub	fp, #28
19e88     A7 2E 02 FB | 	rdlong	local05, fp
19e8c     17 3D 02 F6 | 	mov	local12, local05
19e90     2C 4F 05 F1 | 	add	fp, #300
19e94     A7 3E 02 FB | 	rdlong	local13, fp
19e98     1F 41 02 F6 | 	mov	local14, local13
19e9c     20 3D 82 F1 | 	sub	local12, local14
19ea0     04 4E 85 F1 | 	sub	fp, #4
19ea4     A7 42 02 FB | 	rdlong	local15, fp
19ea8     30 4F 85 F1 | 	sub	fp, #304
19eac     21 45 02 F6 | 	mov	local16, local15
19eb0     1E 45 52 F2 | 	cmps	local16, local12 wc
19eb4     80 06 90 CD |  if_b	jmp	#LR__2088
19eb8     20 4E 05 F1 | 	add	fp, #32
19ebc     A7 3C 02 FB | 	rdlong	local12, fp
19ec0     0C 4E 85 F1 | 	sub	fp, #12
19ec4     A7 3C 62 FC | 	wrlong	local12, fp
19ec8                 | '     vartype=t1.result.twowords(1)
19ec8                 | '     select case vartype
19ec8     14 4E 85 F1 | 	sub	fp, #20
19ecc     1E 47 0A F6 | 	mov	local17, local12 wz
19ed0     64 00 90 AD |  if_e	jmp	#LR__2058
19ed4     00 47 0E F2 | 	cmp	local17, #256 wz
19ed8     6C 00 90 AD |  if_e	jmp	#LR__2059
19edc     01 47 0E F2 | 	cmp	local17, #257 wz
19ee0     74 00 90 AD |  if_e	jmp	#LR__2060
19ee4     02 47 0E F2 | 	cmp	local17, #258 wz
19ee8     7C 00 90 AD |  if_e	jmp	#LR__2061
19eec     03 47 0E F2 | 	cmp	local17, #259 wz
19ef0     84 00 90 AD |  if_e	jmp	#LR__2062
19ef4     04 47 0E F2 | 	cmp	local17, #260 wz
19ef8     8C 00 90 AD |  if_e	jmp	#LR__2063
19efc     05 47 0E F2 | 	cmp	local17, #261 wz
19f00     94 00 90 AD |  if_e	jmp	#LR__2064
19f04     06 47 0E F2 | 	cmp	local17, #262 wz
19f08     9C 00 90 AD |  if_e	jmp	#LR__2065
19f0c     07 47 0E F2 | 	cmp	local17, #263 wz
19f10     A4 00 90 AD |  if_e	jmp	#LR__2066
19f14     08 47 0E F2 | 	cmp	local17, #264 wz
19f18     AC 00 90 AD |  if_e	jmp	#LR__2067
19f1c     09 47 0E F2 | 	cmp	local17, #265 wz
19f20     B4 00 90 AD |  if_e	jmp	#LR__2068
19f24     0A 47 0E F2 | 	cmp	local17, #266 wz
19f28     BC 00 90 AD |  if_e	jmp	#LR__2069
19f2c     0B 47 0E F2 | 	cmp	local17, #267 wz
19f30     C4 00 90 AD |  if_e	jmp	#LR__2070
19f34     D0 00 90 FD | 	jmp	#LR__2071
19f38                 | LR__2058
19f38     18 4E 05 F1 | 	add	fp, #24
19f3c     A7 18 68 FC | 	wrlong	#12, fp
19f40     18 4E 85 F1 | 	sub	fp, #24
19f44     CC 00 90 FD | 	jmp	#LR__2072
19f48                 | LR__2059
19f48     18 4E 05 F1 | 	add	fp, #24
19f4c     A7 18 68 FC | 	wrlong	#12, fp
19f50     18 4E 85 F1 | 	sub	fp, #24
19f54     BC 00 90 FD | 	jmp	#LR__2072
19f58                 | LR__2060
19f58     18 4E 05 F1 | 	add	fp, #24
19f5c     A7 02 68 FC | 	wrlong	#1, fp
19f60     18 4E 85 F1 | 	sub	fp, #24
19f64     AC 00 90 FD | 	jmp	#LR__2072
19f68                 | LR__2061
19f68     18 4E 05 F1 | 	add	fp, #24
19f6c     A7 02 68 FC | 	wrlong	#1, fp
19f70     18 4E 85 F1 | 	sub	fp, #24
19f74     9C 00 90 FD | 	jmp	#LR__2072
19f78                 | LR__2062
19f78     18 4E 05 F1 | 	add	fp, #24
19f7c     A7 04 68 FC | 	wrlong	#2, fp
19f80     18 4E 85 F1 | 	sub	fp, #24
19f84     8C 00 90 FD | 	jmp	#LR__2072
19f88                 | LR__2063
19f88     18 4E 05 F1 | 	add	fp, #24
19f8c     A7 04 68 FC | 	wrlong	#2, fp
19f90     18 4E 85 F1 | 	sub	fp, #24
19f94     7C 00 90 FD | 	jmp	#LR__2072
19f98                 | LR__2064
19f98     18 4E 05 F1 | 	add	fp, #24
19f9c     A7 08 68 FC | 	wrlong	#4, fp
19fa0     18 4E 85 F1 | 	sub	fp, #24
19fa4     6C 00 90 FD | 	jmp	#LR__2072
19fa8                 | LR__2065
19fa8     18 4E 05 F1 | 	add	fp, #24
19fac     A7 08 68 FC | 	wrlong	#4, fp
19fb0     18 4E 85 F1 | 	sub	fp, #24
19fb4     5C 00 90 FD | 	jmp	#LR__2072
19fb8                 | LR__2066
19fb8     18 4E 05 F1 | 	add	fp, #24
19fbc     A7 10 68 FC | 	wrlong	#8, fp
19fc0     18 4E 85 F1 | 	sub	fp, #24
19fc4     4C 00 90 FD | 	jmp	#LR__2072
19fc8                 | LR__2067
19fc8     18 4E 05 F1 | 	add	fp, #24
19fcc     A7 10 68 FC | 	wrlong	#8, fp
19fd0     18 4E 85 F1 | 	sub	fp, #24
19fd4     3C 00 90 FD | 	jmp	#LR__2072
19fd8                 | LR__2068
19fd8     18 4E 05 F1 | 	add	fp, #24
19fdc     A7 0C 68 FC | 	wrlong	#6, fp
19fe0     18 4E 85 F1 | 	sub	fp, #24
19fe4     2C 00 90 FD | 	jmp	#LR__2072
19fe8                 | LR__2069
19fe8     18 4E 05 F1 | 	add	fp, #24
19fec     A7 10 68 FC | 	wrlong	#8, fp
19ff0     18 4E 85 F1 | 	sub	fp, #24
19ff4     1C 00 90 FD | 	jmp	#LR__2072
19ff8                 | LR__2070
19ff8     18 4E 05 F1 | 	add	fp, #24
19ffc     A7 0A 68 FC | 	wrlong	#5, fp
1a000     18 4E 85 F1 | 	sub	fp, #24
1a004     0C 00 90 FD | 	jmp	#LR__2072
1a008                 | LR__2071
1a008     18 4E 05 F1 | 	add	fp, #24
1a00c     A7 18 68 FC | 	wrlong	#12, fp
1a010     18 4E 85 F1 | 	sub	fp, #24
1a014                 | LR__2072
1a014                 | '     if esize=12 andalso t1.result.uresult<$80000 then
1a014     18 4E 05 F1 | 	add	fp, #24
1a018     A7 3C 02 FB | 	rdlong	local12, fp
1a01c     18 4E 85 F1 | 	sub	fp, #24
1a020     0C 3C 0E F2 | 	cmp	local12, #12 wz
1a024     74 01 90 5D |  if_ne	jmp	#LR__2077
1a028     1C 4E 05 F1 | 	add	fp, #28
1a02c     A7 3E 02 FB | 	rdlong	local13, fp
1a030     1C 4E 85 F1 | 	sub	fp, #28
1a034     00 04 00 FF 
1a038     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1a03c     5C 01 90 3D |  if_ae	jmp	#LR__2077
1a040                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
1a040     52 00 00 FF 
1a044     10 E5 05 F1 | 	add	objptr, ##42256
1a048     F2 3C 02 FB | 	rdlong	local12, objptr
1a04c     52 00 00 FF 
1a050     10 E5 85 F1 | 	sub	objptr, ##42256
1a054     1C 3C 0E F2 | 	cmp	local12, #28 wz
1a058     38 00 90 5D |  if_ne	jmp	#LR__2073
1a05c     1C 4E 05 F1 | 	add	fp, #28
1a060     A7 3C 02 FB | 	rdlong	local12, fp
1a064     14 4F 05 F1 | 	add	fp, #276
1a068     A7 3E 02 FB | 	rdlong	local13, fp
1a06c     1F 45 02 F6 | 	mov	local16, local13
1a070     02 44 66 F0 | 	shl	local16, #2
1a074     04 4F 85 F1 | 	sub	fp, #260
1a078     A7 42 02 F6 | 	mov	local15, fp
1a07c     A7 44 02 F1 | 	add	local16, fp
1a080     22 13 02 FB | 	rdlong	arg01, local16
1a084     00 14 06 F6 | 	mov	arg02, #0
1a088     2C 4E 85 F1 | 	sub	fp, #44
1a08c     94 FB B0 FD | 	call	#__system____builtin_atoi
1a090     1E FB 61 FC | 	wrlong	result1, local12
1a094                 | LR__2073
1a094                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
1a094     52 00 00 FF 
1a098     10 E5 05 F1 | 	add	objptr, ##42256
1a09c     F2 3C 02 FB | 	rdlong	local12, objptr
1a0a0     52 00 00 FF 
1a0a4     10 E5 85 F1 | 	sub	objptr, ##42256
1a0a8     1D 3C 0E F2 | 	cmp	local12, #29 wz
1a0ac     38 00 90 5D |  if_ne	jmp	#LR__2074
1a0b0     1C 4E 05 F1 | 	add	fp, #28
1a0b4     A7 3C 02 FB | 	rdlong	local12, fp
1a0b8     14 4F 05 F1 | 	add	fp, #276
1a0bc     A7 3E 02 FB | 	rdlong	local13, fp
1a0c0     1F 45 02 F6 | 	mov	local16, local13
1a0c4     02 44 66 F0 | 	shl	local16, #2
1a0c8     04 4F 85 F1 | 	sub	fp, #260
1a0cc     A7 42 02 F6 | 	mov	local15, fp
1a0d0     A7 44 02 F1 | 	add	local16, fp
1a0d4     22 13 02 FB | 	rdlong	arg01, local16
1a0d8     00 14 06 F6 | 	mov	arg02, #0
1a0dc     2C 4E 85 F1 | 	sub	fp, #44
1a0e0     40 FB B0 FD | 	call	#__system____builtin_atoi
1a0e4     1E FB 61 FC | 	wrlong	result1, local12
1a0e8                 | LR__2074
1a0e8                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
1a0e8     52 00 00 FF 
1a0ec     10 E5 05 F1 | 	add	objptr, ##42256
1a0f0     F2 3C 02 FB | 	rdlong	local12, objptr
1a0f4     52 00 00 FF 
1a0f8     10 E5 85 F1 | 	sub	objptr, ##42256
1a0fc     1E 3C 0E F2 | 	cmp	local12, #30 wz
1a100     3C 00 90 5D |  if_ne	jmp	#LR__2075
1a104     30 4F 05 F1 | 	add	fp, #304
1a108     A7 3E 02 FB | 	rdlong	local13, fp
1a10c     02 3E 66 F0 | 	shl	local13, #2
1a110     04 4F 85 F1 | 	sub	fp, #260
1a114     A7 44 02 F6 | 	mov	local16, fp
1a118     A7 3E 02 F1 | 	add	local13, fp
1a11c     1F 13 02 FB | 	rdlong	arg01, local13
1a120     2C 4E 85 F1 | 	sub	fp, #44
1a124     90 FC B0 FD | 	call	#__system____builtin_atof
1a128     28 4E 05 F1 | 	add	fp, #40
1a12c     A7 FA 61 FC | 	wrlong	result1, fp
1a130     0C 4E 85 F1 | 	sub	fp, #12
1a134     A7 3C 02 FB | 	rdlong	local12, fp
1a138     1C 4E 85 F1 | 	sub	fp, #28
1a13c     1E FB 61 FC | 	wrlong	result1, local12
1a140                 | LR__2075
1a140                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
1a140     52 00 00 FF 
1a144     10 E5 05 F1 | 	add	objptr, ##42256
1a148     F2 3C 02 FB | 	rdlong	local12, objptr
1a14c     52 00 00 FF 
1a150     10 E5 85 F1 | 	sub	objptr, ##42256
1a154     2B 3C 0E F2 | 	cmp	local12, #43 wz
1a158     18 00 90 5D |  if_ne	jmp	#LR__2076
1a15c     1C 4E 05 F1 | 	add	fp, #28
1a160     A7 12 02 FB | 	rdlong	arg01, fp
1a164     0C 4E 85 F1 | 	sub	fp, #12
1a168     A7 14 02 FB | 	rdlong	arg02, fp
1a16c     10 4E 85 F1 | 	sub	fp, #16
1a170     09 15 62 FC | 	wrlong	arg02, arg01
1a174                 | LR__2076
1a174     1C 4E 05 F1 | 	add	fp, #28
1a178     A7 12 02 FB | 	rdlong	arg01, fp
1a17c     1C 4E 85 F1 | 	sub	fp, #28
1a180     08 12 06 F1 | 	add	arg01, #8
1a184     52 00 00 FF 
1a188     10 E5 05 F1 | 	add	objptr, ##42256
1a18c     F2 14 02 FB | 	rdlong	arg02, objptr
1a190     52 00 00 FF 
1a194     10 E5 85 F1 | 	sub	objptr, ##42256
1a198     09 15 62 FC | 	wrlong	arg02, arg01
1a19c                 | LR__2077
1a19c                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
1a19c     18 4E 05 F1 | 	add	fp, #24
1a1a0     A7 3C 02 FB | 	rdlong	local12, fp
1a1a4     18 4E 85 F1 | 	sub	fp, #24
1a1a8     0C 3C 0E F2 | 	cmp	local12, #12 wz
1a1ac     94 01 90 5D |  if_ne	jmp	#LR__2082
1a1b0     1C 4E 05 F1 | 	add	fp, #28
1a1b4     A7 3E 02 FB | 	rdlong	local13, fp
1a1b8     1C 4E 85 F1 | 	sub	fp, #28
1a1bc     00 04 00 FF 
1a1c0     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1a1c4     7C 01 90 CD |  if_b	jmp	#LR__2082
1a1c8                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
1a1c8     52 00 00 FF 
1a1cc     10 E5 05 F1 | 	add	objptr, ##42256
1a1d0     F2 3C 02 FB | 	rdlong	local12, objptr
1a1d4     52 00 00 FF 
1a1d8     10 E5 85 F1 | 	sub	objptr, ##42256
1a1dc     1C 3C 0E F2 | 	cmp	local12, #28 wz
1a1e0     40 00 90 5D |  if_ne	jmp	#LR__2078
1a1e4     1C 4E 05 F1 | 	add	fp, #28
1a1e8     A7 3C 02 FB | 	rdlong	local12, fp
1a1ec     14 4F 05 F1 | 	add	fp, #276
1a1f0     A7 3E 02 FB | 	rdlong	local13, fp
1a1f4     1F 45 02 F6 | 	mov	local16, local13
1a1f8     02 44 66 F0 | 	shl	local16, #2
1a1fc     04 4F 85 F1 | 	sub	fp, #260
1a200     A7 42 02 F6 | 	mov	local15, fp
1a204     A7 44 02 F1 | 	add	local16, fp
1a208     22 13 02 FB | 	rdlong	arg01, local16
1a20c     00 14 06 F6 | 	mov	arg02, #0
1a210     2C 4E 85 F1 | 	sub	fp, #44
1a214     0C FA B0 FD | 	call	#__system____builtin_atoi
1a218     FD 14 02 F6 | 	mov	arg02, result1
1a21c     1E 13 02 F6 | 	mov	arg01, local12
1a220     C4 8C B0 FD | 	call	#_pslpoke
1a224                 | LR__2078
1a224                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
1a224     52 00 00 FF 
1a228     10 E5 05 F1 | 	add	objptr, ##42256
1a22c     F2 3C 02 FB | 	rdlong	local12, objptr
1a230     52 00 00 FF 
1a234     10 E5 85 F1 | 	sub	objptr, ##42256
1a238     1D 3C 0E F2 | 	cmp	local12, #29 wz
1a23c     40 00 90 5D |  if_ne	jmp	#LR__2079
1a240     1C 4E 05 F1 | 	add	fp, #28
1a244     A7 3C 02 FB | 	rdlong	local12, fp
1a248     14 4F 05 F1 | 	add	fp, #276
1a24c     A7 3E 02 FB | 	rdlong	local13, fp
1a250     1F 45 02 F6 | 	mov	local16, local13
1a254     02 44 66 F0 | 	shl	local16, #2
1a258     04 4F 85 F1 | 	sub	fp, #260
1a25c     A7 42 02 F6 | 	mov	local15, fp
1a260     A7 44 02 F1 | 	add	local16, fp
1a264     22 13 02 FB | 	rdlong	arg01, local16
1a268     00 14 06 F6 | 	mov	arg02, #0
1a26c     2C 4E 85 F1 | 	sub	fp, #44
1a270     B0 F9 B0 FD | 	call	#__system____builtin_atoi
1a274     FD 14 02 F6 | 	mov	arg02, result1
1a278     1E 13 02 F6 | 	mov	arg01, local12
1a27c     68 8C B0 FD | 	call	#_pslpoke
1a280                 | LR__2079
1a280                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1a280     52 00 00 FF 
1a284     10 E5 05 F1 | 	add	objptr, ##42256
1a288     F2 3C 02 FB | 	rdlong	local12, objptr
1a28c     52 00 00 FF 
1a290     10 E5 85 F1 | 	sub	objptr, ##42256
1a294     1E 3C 0E F2 | 	cmp	local12, #30 wz
1a298     4C 00 90 5D |  if_ne	jmp	#LR__2080
1a29c     30 4F 05 F1 | 	add	fp, #304
1a2a0     A7 3E 02 FB | 	rdlong	local13, fp
1a2a4     02 3E 66 F0 | 	shl	local13, #2
1a2a8     04 4F 85 F1 | 	sub	fp, #260
1a2ac     A7 44 02 F6 | 	mov	local16, fp
1a2b0     A7 3E 02 F1 | 	add	local13, fp
1a2b4     1F 13 02 FB | 	rdlong	arg01, local13
1a2b8     2C 4E 85 F1 | 	sub	fp, #44
1a2bc     F8 FA B0 FD | 	call	#__system____builtin_atof
1a2c0     28 4E 05 F1 | 	add	fp, #40
1a2c4     A7 FA 61 FC | 	wrlong	result1, fp
1a2c8     0C 4E 85 F1 | 	sub	fp, #12
1a2cc     A7 3C 02 FB | 	rdlong	local12, fp
1a2d0     0C 4E 05 F1 | 	add	fp, #12
1a2d4     A7 12 02 F6 | 	mov	arg01, fp
1a2d8     28 4E 85 F1 | 	sub	fp, #40
1a2dc     09 15 02 FB | 	rdlong	arg02, arg01
1a2e0     1E 13 02 F6 | 	mov	arg01, local12
1a2e4     00 8C B0 FD | 	call	#_pslpoke
1a2e8                 | LR__2080
1a2e8                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
1a2e8     52 00 00 FF 
1a2ec     10 E5 05 F1 | 	add	objptr, ##42256
1a2f0     F2 3C 02 FB | 	rdlong	local12, objptr
1a2f4     52 00 00 FF 
1a2f8     10 E5 85 F1 | 	sub	objptr, ##42256
1a2fc     2B 3C 0E F2 | 	cmp	local12, #43 wz
1a300     18 00 90 5D |  if_ne	jmp	#LR__2081
1a304     1C 4E 05 F1 | 	add	fp, #28
1a308     A7 12 02 FB | 	rdlong	arg01, fp
1a30c     0C 4E 85 F1 | 	sub	fp, #12
1a310     A7 14 02 FB | 	rdlong	arg02, fp
1a314     10 4E 85 F1 | 	sub	fp, #16
1a318     CC 8B B0 FD | 	call	#_pslpoke
1a31c                 | LR__2081
1a31c     1C 4E 05 F1 | 	add	fp, #28
1a320     A7 12 02 FB | 	rdlong	arg01, fp
1a324     1C 4E 85 F1 | 	sub	fp, #28
1a328     08 12 06 F1 | 	add	arg01, #8
1a32c     52 00 00 FF 
1a330     10 E5 05 F1 | 	add	objptr, ##42256
1a334     F2 14 02 FB | 	rdlong	arg02, objptr
1a338     52 00 00 FF 
1a33c     10 E5 85 F1 | 	sub	objptr, ##42256
1a340     A4 8B B0 FD | 	call	#_pslpoke
1a344                 | LR__2082
1a344                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
1a344     18 4E 05 F1 | 	add	fp, #24
1a348     A7 3C 02 FB | 	rdlong	local12, fp
1a34c     18 4E 85 F1 | 	sub	fp, #24
1a350     05 3C 0E F2 | 	cmp	local12, #5 wz
1a354     52 00 00 AF 
1a358     10 E5 05 A1 |  if_e	add	objptr, ##42256
1a35c     F2 40 02 AB |  if_e	rdlong	local14, objptr
1a360     52 00 00 AF 
1a364     10 E5 85 A1 |  if_e	sub	objptr, ##42256
1a368     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
1a36c     18 00 90 5D |  if_ne	jmp	#LR__2083
1a370     1C 4E 05 F1 | 	add	fp, #28
1a374     A7 12 02 FB | 	rdlong	arg01, fp
1a378     0C 4E 85 F1 | 	sub	fp, #12
1a37c     A7 14 02 FB | 	rdlong	arg02, fp
1a380     10 4E 85 F1 | 	sub	fp, #16
1a384     60 8B B0 FD | 	call	#_pslpoke
1a388                 | LR__2083
1a388                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1a388     18 4E 05 F1 | 	add	fp, #24
1a38c     A7 3C 02 FB | 	rdlong	local12, fp
1a390     18 4E 85 F1 | 	sub	fp, #24
1a394     04 3C 0E F2 | 	cmp	local12, #4 wz
1a398     54 00 90 5D |  if_ne	jmp	#LR__2084
1a39c     52 00 00 FF 
1a3a0     10 E5 05 F1 | 	add	objptr, ##42256
1a3a4     F2 40 02 FB | 	rdlong	local14, objptr
1a3a8     52 00 00 FF 
1a3ac     10 E5 85 F1 | 	sub	objptr, ##42256
1a3b0     2B 40 0E F2 | 	cmp	local14, #43 wz
1a3b4     38 00 90 AD |  if_e	jmp	#LR__2084
1a3b8     1C 4E 05 F1 | 	add	fp, #28
1a3bc     A7 3C 02 FB | 	rdlong	local12, fp
1a3c0     14 4F 05 F1 | 	add	fp, #276
1a3c4     A7 44 02 FB | 	rdlong	local16, fp
1a3c8     02 44 66 F0 | 	shl	local16, #2
1a3cc     04 4F 85 F1 | 	sub	fp, #260
1a3d0     A7 44 02 F1 | 	add	local16, fp
1a3d4     22 13 02 FB | 	rdlong	arg01, local16
1a3d8     00 14 06 F6 | 	mov	arg02, #0
1a3dc     2C 4E 85 F1 | 	sub	fp, #44
1a3e0     40 F8 B0 FD | 	call	#__system____builtin_atoi
1a3e4     FD 14 02 F6 | 	mov	arg02, result1
1a3e8     1E 13 02 F6 | 	mov	arg01, local12
1a3ec     F8 8A B0 FD | 	call	#_pslpoke
1a3f0                 | LR__2084
1a3f0                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
1a3f0     18 4E 05 F1 | 	add	fp, #24
1a3f4     A7 3C 02 FB | 	rdlong	local12, fp
1a3f8     18 4E 85 F1 | 	sub	fp, #24
1a3fc     02 3C 0E F2 | 	cmp	local12, #2 wz
1a400     54 00 90 5D |  if_ne	jmp	#LR__2085
1a404     52 00 00 FF 
1a408     10 E5 05 F1 | 	add	objptr, ##42256
1a40c     F2 40 02 FB | 	rdlong	local14, objptr
1a410     52 00 00 FF 
1a414     10 E5 85 F1 | 	sub	objptr, ##42256
1a418     2B 40 0E F2 | 	cmp	local14, #43 wz
1a41c     38 00 90 AD |  if_e	jmp	#LR__2085
1a420     1C 4E 05 F1 | 	add	fp, #28
1a424     A7 3C 02 FB | 	rdlong	local12, fp
1a428     14 4F 05 F1 | 	add	fp, #276
1a42c     A7 44 02 FB | 	rdlong	local16, fp
1a430     02 44 66 F0 | 	shl	local16, #2
1a434     04 4F 85 F1 | 	sub	fp, #260
1a438     A7 44 02 F1 | 	add	local16, fp
1a43c     22 13 02 FB | 	rdlong	arg01, local16
1a440     00 14 06 F6 | 	mov	arg02, #0
1a444     2C 4E 85 F1 | 	sub	fp, #44
1a448     D8 F7 B0 FD | 	call	#__system____builtin_atoi
1a44c     FD 14 02 F6 | 	mov	arg02, result1
1a450     1E 13 02 F6 | 	mov	arg01, local12
1a454     D8 8A B0 FD | 	call	#_psdpoke
1a458                 | LR__2085
1a458                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1a458     18 4E 05 F1 | 	add	fp, #24
1a45c     A7 3C 02 FB | 	rdlong	local12, fp
1a460     18 4E 85 F1 | 	sub	fp, #24
1a464     01 3C 0E F2 | 	cmp	local12, #1 wz
1a468     54 00 90 5D |  if_ne	jmp	#LR__2086
1a46c     52 00 00 FF 
1a470     10 E5 05 F1 | 	add	objptr, ##42256
1a474     F2 40 02 FB | 	rdlong	local14, objptr
1a478     52 00 00 FF 
1a47c     10 E5 85 F1 | 	sub	objptr, ##42256
1a480     2B 40 0E F2 | 	cmp	local14, #43 wz
1a484     38 00 90 AD |  if_e	jmp	#LR__2086
1a488     1C 4E 05 F1 | 	add	fp, #28
1a48c     A7 3C 02 FB | 	rdlong	local12, fp
1a490     14 4F 05 F1 | 	add	fp, #276
1a494     A7 44 02 FB | 	rdlong	local16, fp
1a498     02 44 66 F0 | 	shl	local16, #2
1a49c     04 4F 85 F1 | 	sub	fp, #260
1a4a0     A7 44 02 F1 | 	add	local16, fp
1a4a4     22 13 02 FB | 	rdlong	arg01, local16
1a4a8     00 14 06 F6 | 	mov	arg02, #0
1a4ac     2C 4E 85 F1 | 	sub	fp, #44
1a4b0     70 F7 B0 FD | 	call	#__system____builtin_atoi
1a4b4     FD 14 02 F6 | 	mov	arg02, result1
1a4b8     1E 13 02 F6 | 	mov	arg01, local12
1a4bc     B8 8A B0 FD | 	call	#_pspoke
1a4c0                 | LR__2086
1a4c0                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1a4c0     18 4E 05 F1 | 	add	fp, #24
1a4c4     A7 3C 02 FB | 	rdlong	local12, fp
1a4c8     18 4E 85 F1 | 	sub	fp, #24
1a4cc     06 3C 0E F2 | 	cmp	local12, #6 wz
1a4d0     64 00 90 5D |  if_ne	jmp	#LR__2087
1a4d4     52 00 00 FF 
1a4d8     10 E5 05 F1 | 	add	objptr, ##42256
1a4dc     F2 40 02 FB | 	rdlong	local14, objptr
1a4e0     52 00 00 FF 
1a4e4     10 E5 85 F1 | 	sub	objptr, ##42256
1a4e8     2B 40 0E F2 | 	cmp	local14, #43 wz
1a4ec     48 00 90 AD |  if_e	jmp	#LR__2087
1a4f0     30 4F 05 F1 | 	add	fp, #304
1a4f4     A7 3E 02 FB | 	rdlong	local13, fp
1a4f8     02 3E 66 F0 | 	shl	local13, #2
1a4fc     04 4F 85 F1 | 	sub	fp, #260
1a500     A7 3E 02 F1 | 	add	local13, fp
1a504     1F 13 02 FB | 	rdlong	arg01, local13
1a508     2C 4E 85 F1 | 	sub	fp, #44
1a50c     A8 F8 B0 FD | 	call	#__system____builtin_atof
1a510     28 4E 05 F1 | 	add	fp, #40
1a514     A7 FA 61 FC | 	wrlong	result1, fp
1a518     0C 4E 85 F1 | 	sub	fp, #12
1a51c     A7 3C 02 FB | 	rdlong	local12, fp
1a520     0C 4E 05 F1 | 	add	fp, #12
1a524     A7 12 02 F6 | 	mov	arg01, fp
1a528     28 4E 85 F1 | 	sub	fp, #40
1a52c     09 15 02 FB | 	rdlong	arg02, arg01
1a530     1E 13 02 F6 | 	mov	arg01, local12
1a534     B0 89 B0 FD | 	call	#_pslpoke
1a538                 | LR__2087
1a538                 | LR__2088
1a538     30 4F 05 F1 | 	add	fp, #304
1a53c     A7 40 02 FB | 	rdlong	local14, fp
1a540     01 40 06 F1 | 	add	local14, #1
1a544     A7 40 62 FC | 	wrlong	local14, fp
1a548     30 4F 85 F1 | 	sub	fp, #304
1a54c     B8 F6 9F FD | 	jmp	#LR__2052
1a550                 | LR__2089
1a550                 | LR__2090
1a550     A7 F0 03 F6 | 	mov	ptra, fp
1a554     B2 00 A0 FD | 	call	#popregs_
1a558                 | _do_read_ret
1a558     2D 00 64 FD | 	ret
1a55c                 | 
1a55c                 | ' 
1a55c                 | ' '------------------- release
1a55c                 | ' 
1a55c                 | ' sub do_release
1a55c                 | _do_release
1a55c     00 4A 05 F6 | 	mov	COUNT_, #0
1a560     A8 00 A0 FD | 	call	#pushregs_
1a564     10 F0 07 F1 | 	add	ptra, #16
1a568     E8 2F BF FD | 	call	#_pop
1a56c     FF 14 02 F6 | 	mov	arg02, result3
1a570     A7 FA 61 FC | 	wrlong	result1, fp
1a574     04 4E 05 F1 | 	add	fp, #4
1a578     A7 FC 61 FC | 	wrlong	result2, fp
1a57c     04 4E 05 F1 | 	add	fp, #4
1a580     A7 14 62 FC | 	wrlong	arg02, fp
1a584     08 4E 85 F1 | 	sub	fp, #8
1a588     A7 12 02 F6 | 	mov	arg01, fp
1a58c     A8 31 BF FD | 	call	#_converttoint
1a590     0C 4E 05 F1 | 	add	fp, #12
1a594     A7 FA 61 FC | 	wrlong	result1, fp
1a598                 | ' 
1a598                 | ' t1=pop()
1a598                 | ' channel=converttoint(t1)
1a598                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
1a598     0C 4E 85 F1 | 	sub	fp, #12
1a59c     00 FA 55 F2 | 	cmps	result1, #0 wc
1a5a0     44 00 90 CD |  if_b	jmp	#LR__2100
1a5a4     0C 4E 05 F1 | 	add	fp, #12
1a5a8     A7 14 02 FB | 	rdlong	arg02, fp
1a5ac     0C 4E 85 F1 | 	sub	fp, #12
1a5b0     08 14 56 F2 | 	cmps	arg02, #8 wc
1a5b4     30 00 90 3D |  if_ae	jmp	#LR__2100
1a5b8     37 00 00 FF 
1a5bc     10 E4 05 F1 | 	add	objptr, ##28176
1a5c0     F2 12 02 FB | 	rdlong	arg01, objptr
1a5c4     37 00 00 FF 
1a5c8     10 E4 85 F1 | 	sub	objptr, ##28176
1a5cc     0C 4E 05 F1 | 	add	fp, #12
1a5d0     A7 14 02 FB | 	rdlong	arg02, fp
1a5d4     0C 4E 85 F1 | 	sub	fp, #12
1a5d8     06 14 66 F0 | 	shl	arg02, #6
1a5dc     0A 13 02 F1 | 	add	arg01, arg02
1a5e0     2C 12 06 F1 | 	add	arg01, #44
1a5e4     09 FF 69 FC | 	wrlong	#255, arg01
1a5e8                 | LR__2100
1a5e8     A7 F0 03 F6 | 	mov	ptra, fp
1a5ec     B2 00 A0 FD | 	call	#popregs_
1a5f0                 | _do_release_ret
1a5f0     2D 00 64 FD | 	ret
1a5f4                 | 
1a5f4                 | ' 
1a5f4                 | ' '------------------- restore
1a5f4                 | ' 
1a5f4                 | ' sub do_restore()
1a5f4                 | _do_restore
1a5f4     4A 00 00 FF 
1a5f8     88 E4 05 F1 | 	add	objptr, ##38024
1a5fc     F2 00 02 FB | 	rdlong	_var01, objptr
1a600     06 00 00 FF 
1a604     A4 E4 05 F1 | 	add	objptr, ##3236
1a608     F2 00 62 FC | 	wrlong	_var01, objptr
1a60c     B6 01 00 FF 
1a610     A4 01 06 F6 | 	mov	_var01, ##@LR__5955
1a614     01 00 00 FF 
1a618     B0 E5 05 F1 | 	add	objptr, ##944
1a61c     F2 00 62 FC | 	wrlong	_var01, objptr
1a620     52 00 00 FF 
1a624     DC E4 85 F1 | 	sub	objptr, ##42204
1a628                 | _do_restore_ret
1a628     2D 00 64 FD | 	ret
1a62c                 | 
1a62c                 | ' 
1a62c                 | ' '------------------- return
1a62c                 | ' 
1a62c                 | ' sub do_return()
1a62c                 | _do_return
1a62c                 | ' if gosubtop>0 then
1a62c     50 00 00 FF 
1a630     34 E5 05 F1 | 	add	objptr, ##41268
1a634     F2 00 02 FB | 	rdlong	_var01, objptr
1a638     50 00 00 FF 
1a63c     34 E5 85 F1 | 	sub	objptr, ##41268
1a640     01 00 56 F2 | 	cmps	_var01, #1 wc
1a644     8C 00 90 CD |  if_b	jmp	#LR__2110
1a648     50 00 00 FF 
1a64c     34 E5 05 F1 | 	add	objptr, ##41268
1a650     F2 00 02 FB | 	rdlong	_var01, objptr
1a654     03 00 66 F0 | 	shl	_var01, #3
1a658     03 00 00 FF 
1a65c     88 E5 85 F1 | 	sub	objptr, ##1928
1a660     F2 00 02 F1 | 	add	_var01, objptr
1a664     00 01 02 FB | 	rdlong	_var01, _var01
1a668     03 00 00 FF 
1a66c     0C E5 05 F1 | 	add	objptr, ##1804
1a670     F2 00 62 FC | 	wrlong	_var01, objptr
1a674     7C E4 05 F1 | 	add	objptr, #124
1a678     F2 00 02 FB | 	rdlong	_var01, objptr
1a67c     03 00 66 F0 | 	shl	_var01, #3
1a680     03 00 00 FF 
1a684     88 E5 85 F1 | 	sub	objptr, ##1928
1a688     F2 00 02 F1 | 	add	_var01, objptr
1a68c     04 00 06 F1 | 	add	_var01, #4
1a690     00 01 02 FB | 	rdlong	_var01, _var01
1a694     03 00 00 FF 
1a698     10 E5 05 F1 | 	add	objptr, ##1808
1a69c     F2 00 62 FC | 	wrlong	_var01, objptr
1a6a0     06 00 00 FF 
1a6a4     40 E4 85 F1 | 	sub	objptr, ##3136
1a6a8     F2 00 02 FB | 	rdlong	_var01, objptr
1a6ac     01 00 86 F1 | 	sub	_var01, #1
1a6b0     04 E4 05 F1 | 	add	objptr, #4
1a6b4     F2 00 62 FC | 	wrlong	_var01, objptr
1a6b8     06 00 00 FF 
1a6bc     B4 E4 05 F1 | 	add	objptr, ##3252
1a6c0     F2 00 02 FB | 	rdlong	_var01, objptr
1a6c4     01 00 86 F1 | 	sub	_var01, #1
1a6c8     F2 00 62 FC | 	wrlong	_var01, objptr
1a6cc     50 00 00 FF 
1a6d0     34 E5 85 F1 | 	sub	objptr, ##41268
1a6d4                 | LR__2110
1a6d4                 | _do_return_ret
1a6d4     2D 00 64 FD | 	ret
1a6d8                 | 
1a6d8                 | ' 
1a6d8                 | ' '------------------- right$
1a6d8                 | ' 
1a6d8                 | ' sub do_right
1a6d8                 | _do_right
1a6d8     00 4A 05 F6 | 	mov	COUNT_, #0
1a6dc     A8 00 A0 FD | 	call	#pushregs_
1a6e0     14 F0 07 F1 | 	add	ptra, #20
1a6e4     4A 00 00 FF 
1a6e8     80 E4 05 F1 | 	add	objptr, ##38016
1a6ec     F2 16 02 FB | 	rdlong	arg03, objptr
1a6f0     0B 15 02 F6 | 	mov	arg02, arg03
1a6f4     01 14 66 F0 | 	shl	arg02, #1
1a6f8     0B 15 02 F1 | 	add	arg02, arg03
1a6fc     02 14 66 F0 | 	shl	arg02, #2
1a700     03 00 00 FF 
1a704     04 E4 85 F1 | 	sub	objptr, ##1540
1a708     F2 14 02 F1 | 	add	arg02, objptr
1a70c     0A 17 02 FB | 	rdlong	arg03, arg02
1a710     0C 4E 05 F1 | 	add	fp, #12
1a714     A7 16 62 FC | 	wrlong	arg03, fp
1a718                 | ' 
1a718                 | ' numpar=compiledline(lineptr_e).result.uresult
1a718                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
1a718     0C 4E 85 F1 | 	sub	fp, #12
1a71c     02 16 0E F2 | 	cmp	arg03, #2 wz
1a720     47 00 00 FF 
1a724     7C E4 85 F1 | 	sub	objptr, ##36476
1a728     40 00 90 AD |  if_e	jmp	#LR__2120
1a72c     00 12 06 F6 | 	mov	arg01, #0
1a730     28 1D B1 FD | 	call	#__system___getiolock_0603
1a734     FD 12 02 F6 | 	mov	arg01, result1
1a738     F8 BF B0 FD | 	call	#__system___lockmem
1a73c     B6 01 00 FF 
1a740     A5 15 06 F6 | 	mov	arg02, ##@LR__5956
1a744     00 12 06 F6 | 	mov	arg01, #0
1a748     00 16 06 F6 | 	mov	arg03, #0
1a74c     D8 CC B0 FD | 	call	#__system___basic_print_string
1a750     00 12 06 F6 | 	mov	arg01, #0
1a754     04 1D B1 FD | 	call	#__system___getiolock_0603
1a758     FD 00 68 FC | 	wrlong	#0, result1
1a75c     27 12 06 F6 | 	mov	arg01, #39
1a760     00 14 06 F6 | 	mov	arg02, #0
1a764     E0 85 B0 FD | 	call	#_printerror
1a768     EC 00 90 FD | 	jmp	#LR__2123
1a76c                 | LR__2120
1a76c     E4 2D BF FD | 	call	#_pop
1a770     FF 16 02 F6 | 	mov	arg03, result3
1a774     A7 FA 61 FC | 	wrlong	result1, fp
1a778     04 4E 05 F1 | 	add	fp, #4
1a77c     A7 FC 61 FC | 	wrlong	result2, fp
1a780     04 4E 05 F1 | 	add	fp, #4
1a784     A7 16 62 FC | 	wrlong	arg03, fp
1a788     08 4E 85 F1 | 	sub	fp, #8
1a78c     A7 12 02 F6 | 	mov	arg01, fp
1a790     A4 2F BF FD | 	call	#_converttoint
1a794     FD 16 02 F6 | 	mov	arg03, result1
1a798     10 4E 05 F1 | 	add	fp, #16
1a79c     A7 16 62 FC | 	wrlong	arg03, fp
1a7a0     10 4E 85 F1 | 	sub	fp, #16
1a7a4     AC 2D BF FD | 	call	#_pop
1a7a8     FF 16 02 F6 | 	mov	arg03, result3
1a7ac     A7 FA 61 FC | 	wrlong	result1, fp
1a7b0     04 4E 05 F1 | 	add	fp, #4
1a7b4     A7 FC 61 FC | 	wrlong	result2, fp
1a7b8     04 4E 05 F1 | 	add	fp, #4
1a7bc     A7 16 62 FC | 	wrlong	arg03, fp
1a7c0                 | ' t1=pop() : arg=converttoint(t1)
1a7c0                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1a7c0     08 4E 85 F1 | 	sub	fp, #8
1a7c4     2B 16 0E F2 | 	cmp	arg03, #43 wz
1a7c8     18 00 90 5D |  if_ne	jmp	#LR__2121
1a7cc     A7 12 02 FB | 	rdlong	arg01, fp
1a7d0     F8 2E BF FD | 	call	#_convertstring
1a7d4     A7 FA 61 FC | 	wrlong	result1, fp
1a7d8     08 4E 05 F1 | 	add	fp, #8
1a7dc     A7 3E 68 FC | 	wrlong	#31, fp
1a7e0     08 4E 85 F1 | 	sub	fp, #8
1a7e4                 | LR__2121
1a7e4                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1a7e4     08 4E 05 F1 | 	add	fp, #8
1a7e8     A7 16 02 FB | 	rdlong	arg03, fp
1a7ec     08 4E 85 F1 | 	sub	fp, #8
1a7f0     1F 16 0E F2 | 	cmp	arg03, #31 wz
1a7f4     40 00 90 AD |  if_e	jmp	#LR__2122
1a7f8     00 12 06 F6 | 	mov	arg01, #0
1a7fc     5C 1C B1 FD | 	call	#__system___getiolock_0603
1a800     FD 12 02 F6 | 	mov	arg01, result1
1a804     2C BF B0 FD | 	call	#__system___lockmem
1a808     B6 01 00 FF 
1a80c     AE 15 06 F6 | 	mov	arg02, ##@LR__5957
1a810     00 12 06 F6 | 	mov	arg01, #0
1a814     00 16 06 F6 | 	mov	arg03, #0
1a818     0C CC B0 FD | 	call	#__system___basic_print_string
1a81c     00 12 06 F6 | 	mov	arg01, #0
1a820     38 1C B1 FD | 	call	#__system___getiolock_0603
1a824     FD 00 68 FC | 	wrlong	#0, result1
1a828     0F 12 06 F6 | 	mov	arg01, #15
1a82c     00 14 06 F6 | 	mov	arg02, #0
1a830     14 85 B0 FD | 	call	#_printerror
1a834     20 00 90 FD | 	jmp	#LR__2123
1a838                 | LR__2122
1a838     A7 12 02 FB | 	rdlong	arg01, fp
1a83c     10 4E 05 F1 | 	add	fp, #16
1a840     A7 14 02 FB | 	rdlong	arg02, fp
1a844     10 4E 85 F1 | 	sub	fp, #16
1a848     EC DF B0 FD | 	call	#__system__Right_S
1a84c     A7 FA 61 FC | 	wrlong	result1, fp
1a850     A7 12 02 F6 | 	mov	arg01, fp
1a854     94 2D BF FD | 	call	#_push
1a858                 | LR__2123
1a858     A7 F0 03 F6 | 	mov	ptra, fp
1a85c     B2 00 A0 FD | 	call	#popregs_
1a860                 | _do_right_ret
1a860     2D 00 64 FD | 	ret
1a864                 | 
1a864                 | ' 
1a864                 | ' '------------------- rnd
1a864                 | ' 
1a864                 | ' sub do_rnd
1a864                 | _do_rnd
1a864     01 4A 05 F6 | 	mov	COUNT_, #1
1a868     A8 00 A0 FD | 	call	#pushregs_
1a86c     10 F0 07 F1 | 	add	ptra, #16
1a870     4A 00 00 FF 
1a874     80 E4 05 F1 | 	add	objptr, ##38016
1a878     F2 26 02 FB | 	rdlong	local01, objptr
1a87c     13 17 02 F6 | 	mov	arg03, local01
1a880     01 16 66 F0 | 	shl	arg03, #1
1a884     13 17 02 F1 | 	add	arg03, local01
1a888     02 16 66 F0 | 	shl	arg03, #2
1a88c     03 00 00 FF 
1a890     04 E4 85 F1 | 	sub	objptr, ##1540
1a894     F2 16 02 F1 | 	add	arg03, objptr
1a898     0B 17 02 FB | 	rdlong	arg03, arg03
1a89c     0C 4E 05 F1 | 	add	fp, #12
1a8a0     A7 16 62 FC | 	wrlong	arg03, fp
1a8a4                 | ' 
1a8a4                 | ' numpar=compiledline(lineptr_e).result.uresult
1a8a4                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1a8a4     0C 4E 85 F1 | 	sub	fp, #12
1a8a8     02 16 16 F2 | 	cmp	arg03, #2 wc
1a8ac     47 00 00 FF 
1a8b0     7C E4 85 F1 | 	sub	objptr, ##36476
1a8b4     40 00 90 CD |  if_b	jmp	#LR__2130
1a8b8     00 12 06 F6 | 	mov	arg01, #0
1a8bc     9C 1B B1 FD | 	call	#__system___getiolock_0603
1a8c0     FD 12 02 F6 | 	mov	arg01, result1
1a8c4     6C BE B0 FD | 	call	#__system___lockmem
1a8c8     B6 01 00 FF 
1a8cc     B7 15 06 F6 | 	mov	arg02, ##@LR__5958
1a8d0     00 12 06 F6 | 	mov	arg01, #0
1a8d4     00 16 06 F6 | 	mov	arg03, #0
1a8d8     4C CB B0 FD | 	call	#__system___basic_print_string
1a8dc     00 12 06 F6 | 	mov	arg01, #0
1a8e0     78 1B B1 FD | 	call	#__system___getiolock_0603
1a8e4     FD 00 68 FC | 	wrlong	#0, result1
1a8e8     27 12 06 F6 | 	mov	arg01, #39
1a8ec     00 14 06 F6 | 	mov	arg02, #0
1a8f0     54 84 B0 FD | 	call	#_printerror
1a8f4     30 01 90 FD | 	jmp	#LR__2137
1a8f8                 | LR__2130
1a8f8                 | ' if numpar=0 then
1a8f8     0C 4E 05 F1 | 	add	fp, #12
1a8fc     A7 FE 09 FB | 	rdlong	result3, fp wz
1a900     0C 4E 85 F1 | 	sub	fp, #12
1a904     20 00 90 5D |  if_ne	jmp	#LR__2131
1a908     08 4E 05 F1 | 	add	fp, #8
1a90c     A7 3A 68 FC | 	wrlong	#29, fp
1a910     08 4E 85 F1 | 	sub	fp, #8
1a914     1B FA 61 FD | 	getrnd	result1
1a918     A7 FA 61 FC | 	wrlong	result1, fp
1a91c     A7 12 02 F6 | 	mov	arg01, fp
1a920     C8 2C BF FD | 	call	#_push
1a924     00 01 90 FD | 	jmp	#LR__2136
1a928                 | LR__2131
1a928     28 2C BF FD | 	call	#_pop
1a92c     A7 FA 61 FC | 	wrlong	result1, fp
1a930     04 4E 05 F1 | 	add	fp, #4
1a934     A7 FC 61 FC | 	wrlong	result2, fp
1a938     04 4E 05 F1 | 	add	fp, #4
1a93c     A7 FE 61 FC | 	wrlong	result3, fp
1a940                 | '   t1=pop()
1a940                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1a940     08 4E 85 F1 | 	sub	fp, #8
1a944     1C FE 0D F2 | 	cmp	result3, #28 wz
1a948     08 4E 05 51 |  if_ne	add	fp, #8
1a94c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1a950     08 4E 85 51 |  if_ne	sub	fp, #8
1a954     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1a958     2C 00 90 5D |  if_ne	jmp	#LR__2132
1a95c     1B FA 61 FD | 	getrnd	result1
1a960     A7 26 02 FB | 	rdlong	local01, fp
1a964     13 FB 11 FD | 	qdiv	result1, local01
1a968     A7 12 02 F6 | 	mov	arg01, fp
1a96c     19 26 62 FD | 	getqy	local01
1a970     A7 26 62 FC | 	wrlong	local01, fp
1a974     08 4E 05 F1 | 	add	fp, #8
1a978     A7 3A 68 FC | 	wrlong	#29, fp
1a97c     08 4E 85 F1 | 	sub	fp, #8
1a980     68 2C BF FD | 	call	#_push
1a984     A0 00 90 FD | 	jmp	#LR__2135
1a988                 | LR__2132
1a988     08 4E 05 F1 | 	add	fp, #8
1a98c     A7 26 02 FB | 	rdlong	local01, fp
1a990     08 4E 85 F1 | 	sub	fp, #8
1a994     1E 26 0E F2 | 	cmp	local01, #30 wz
1a998     48 00 90 5D |  if_ne	jmp	#LR__2133
1a99c     A7 12 02 FB | 	rdlong	arg01, fp
1a9a0     00 C0 24 FF 
1a9a4     00 14 06 F6 | 	mov	arg02, ##1233125376
1a9a8     04 EE B0 FD | 	call	#__system___float_div
1a9ac     FD 26 02 F6 | 	mov	local01, result1
1a9b0     1B 12 62 FD | 	getrnd	arg01
1a9b4     74 13 06 F4 | 	bitl	arg01, #372
1a9b8     EC E7 B0 FD | 	call	#__system___float_fromuns
1a9bc     FD 14 02 F6 | 	mov	arg02, result1
1a9c0     13 13 02 F6 | 	mov	arg01, local01
1a9c4     E4 EB B0 FD | 	call	#__system___float_mul
1a9c8     A7 FA 61 FC | 	wrlong	result1, fp
1a9cc     08 4E 05 F1 | 	add	fp, #8
1a9d0     A7 3C 68 FC | 	wrlong	#30, fp
1a9d4     08 4E 85 F1 | 	sub	fp, #8
1a9d8     A7 12 02 F6 | 	mov	arg01, fp
1a9dc     0C 2C BF FD | 	call	#_push
1a9e0     44 00 90 FD | 	jmp	#LR__2134
1a9e4                 | LR__2133
1a9e4                 | '     print "rnd: "; : printerror(40) 
1a9e4     00 12 06 F6 | 	mov	arg01, #0
1a9e8     70 1A B1 FD | 	call	#__system___getiolock_0603
1a9ec     FD 12 02 F6 | 	mov	arg01, result1
1a9f0     40 BD B0 FD | 	call	#__system___lockmem
1a9f4     B6 01 00 FF 
1a9f8     BD 15 06 F6 | 	mov	arg02, ##@LR__5959
1a9fc     00 12 06 F6 | 	mov	arg01, #0
1aa00     00 16 06 F6 | 	mov	arg03, #0
1aa04     20 CA B0 FD | 	call	#__system___basic_print_string
1aa08     00 12 06 F6 | 	mov	arg01, #0
1aa0c     4C 1A B1 FD | 	call	#__system___getiolock_0603
1aa10     FD 00 68 FC | 	wrlong	#0, result1
1aa14     28 12 06 F6 | 	mov	arg01, #40
1aa18     00 14 06 F6 | 	mov	arg02, #0
1aa1c     28 83 B0 FD | 	call	#_printerror
1aa20     A7 12 02 F6 | 	mov	arg01, fp
1aa24     C4 2B BF FD | 	call	#_push
1aa28                 | LR__2134
1aa28                 | LR__2135
1aa28                 | LR__2136
1aa28                 | LR__2137
1aa28     A7 F0 03 F6 | 	mov	ptra, fp
1aa2c     B2 00 A0 FD | 	call	#popregs_
1aa30                 | _do_rnd_ret
1aa30     2D 00 64 FD | 	ret
1aa34                 | 
1aa34                 | ' 
1aa34                 | ' '-------------------- round
1aa34                 | ' 
1aa34                 | ' sub do_round
1aa34                 | _do_round
1aa34     00 4A 05 F6 | 	mov	COUNT_, #0
1aa38     A8 00 A0 FD | 	call	#pushregs_
1aa3c     0C F0 07 F1 | 	add	ptra, #12
1aa40     10 2B BF FD | 	call	#_pop
1aa44     A7 FA 61 FC | 	wrlong	result1, fp
1aa48     04 4E 05 F1 | 	add	fp, #4
1aa4c     A7 FC 61 FC | 	wrlong	result2, fp
1aa50     04 4E 05 F1 | 	add	fp, #4
1aa54     A7 FE 61 FC | 	wrlong	result3, fp
1aa58     08 4E 85 F1 | 	sub	fp, #8
1aa5c     A7 12 02 F6 | 	mov	arg01, fp
1aa60     D4 2C BF FD | 	call	#_converttoint
1aa64     A7 FA 61 FC | 	wrlong	result1, fp
1aa68     08 4E 05 F1 | 	add	fp, #8
1aa6c     A7 38 68 FC | 	wrlong	#28, fp
1aa70     08 4E 85 F1 | 	sub	fp, #8
1aa74     A7 12 02 F6 | 	mov	arg01, fp
1aa78     70 2B BF FD | 	call	#_push
1aa7c     A7 F0 03 F6 | 	mov	ptra, fp
1aa80     B2 00 A0 FD | 	call	#popregs_
1aa84                 | _do_round_ret
1aa84     2D 00 64 FD | 	ret
1aa88                 | 
1aa88                 | ' 
1aa88                 | ' '-------------------- rqpin
1aa88                 | ' 
1aa88                 | ' sub do_rqpin
1aa88                 | _do_rqpin
1aa88     00 4A 05 F6 | 	mov	COUNT_, #0
1aa8c     A8 00 A0 FD | 	call	#pushregs_
1aa90     0C F0 07 F1 | 	add	ptra, #12
1aa94     BC 2A BF FD | 	call	#_pop
1aa98     A7 FA 61 FC | 	wrlong	result1, fp
1aa9c     04 4E 05 F1 | 	add	fp, #4
1aaa0     A7 FC 61 FC | 	wrlong	result2, fp
1aaa4     04 4E 05 F1 | 	add	fp, #4
1aaa8     A7 FE 61 FC | 	wrlong	result3, fp
1aaac     08 4E 85 F1 | 	sub	fp, #8
1aab0     A7 12 02 F6 | 	mov	arg01, fp
1aab4     80 2C BF FD | 	call	#_converttoint
1aab8     FD 12 02 F6 | 	mov	arg01, result1
1aabc     00 FA 05 F6 | 	mov	result1, #0
1aac0     09 FB 81 FA | 	rqpin	result1, arg01
1aac4     52 00 00 FF 
1aac8     10 E5 05 F1 | 	add	objptr, ##42256
1aacc     F2 FA 61 FC | 	wrlong	result1, objptr
1aad0     52 00 00 FF 
1aad4     10 E5 85 F1 | 	sub	objptr, ##42256
1aad8     08 4E 05 F1 | 	add	fp, #8
1aadc     A7 3A 68 FC | 	wrlong	#29, fp
1aae0     08 4E 85 F1 | 	sub	fp, #8
1aae4     A7 08 68 FC | 	wrlong	#4, fp
1aae8     A7 12 02 F6 | 	mov	arg01, fp
1aaec     FC 2A BF FD | 	call	#_push
1aaf0     A7 F0 03 F6 | 	mov	ptra, fp
1aaf4     B2 00 A0 FD | 	call	#popregs_
1aaf8                 | _do_rqpin_ret
1aaf8     2D 00 64 FD | 	ret
1aafc                 | 
1aafc                 | ' 
1aafc                 | ' ' ------------------ run
1aafc                 | ' 
1aafc                 | ' sub do_run
1aafc                 | _do_run
1aafc     04 4A 05 F6 | 	mov	COUNT_, #4
1ab00     A8 00 A0 FD | 	call	#pushregs_
1ab04     4A 00 00 FF 
1ab08     80 E4 05 F1 | 	add	objptr, ##38016
1ab0c     F2 26 02 FB | 	rdlong	local01, objptr
1ab10     06 00 00 FF 
1ab14     38 E4 05 F1 | 	add	objptr, ##3128
1ab18     F2 28 02 FB | 	rdlong	local02, objptr
1ab1c     04 E4 05 F1 | 	add	objptr, #4
1ab20     F2 2A 02 FB | 	rdlong	local03, objptr
1ab24     13 19 02 F6 | 	mov	arg04, local01
1ab28     0C 17 02 F6 | 	mov	arg03, arg04
1ab2c     01 16 66 F0 | 	shl	arg03, #1
1ab30     0C 17 02 F1 | 	add	arg03, arg04
1ab34     02 16 66 F0 | 	shl	arg03, #2
1ab38     09 00 00 FF 
1ab3c     40 E4 85 F1 | 	sub	objptr, ##4672
1ab40     F2 16 02 F1 | 	add	arg03, objptr
1ab44     0B 15 02 FB | 	rdlong	arg02, arg03
1ab48                 | ' 
1ab48                 | ' r_lineptr_e=lineptr_e
1ab48                 | ' r_runptr=runptr
1ab48                 | ' r_runptr2=runptr2
1ab48                 | ' 
1ab48                 | ' numpar=compiledline(lineptr_e).result.uresult
1ab48                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1ab48     01 14 0E F2 | 	cmp	arg02, #1 wz
1ab4c     47 00 00 FF 
1ab50     7C E4 85 F1 | 	sub	objptr, ##36476
1ab54     00 12 06 A6 |  if_e	mov	arg01, #0
1ab58     5C A1 BF AD |  if_e	call	#_do_load
1ab5c     4A 00 00 FF 
1ab60     88 E4 05 F1 | 	add	objptr, ##38024
1ab64     F2 18 02 FB | 	rdlong	arg04, objptr
1ab68     06 00 00 FF 
1ab6c     30 E4 05 F1 | 	add	objptr, ##3120
1ab70     F2 18 62 FC | 	wrlong	arg04, objptr
1ab74     04 E4 05 F1 | 	add	objptr, #4
1ab78     F2 00 68 FC | 	wrlong	#0, objptr
1ab7c     04 E4 05 F1 | 	add	objptr, #4
1ab80     FF FF FF FF 
1ab84     F2 FE 6B FC | 	wrlong	##-1, objptr
1ab88     06 00 00 FF 
1ab8c     38 E4 85 F1 | 	sub	objptr, ##3128
1ab90     F2 18 02 FB | 	rdlong	arg04, objptr
1ab94     06 00 00 FF 
1ab98     A4 E4 05 F1 | 	add	objptr, ##3236
1ab9c     F2 18 62 FC | 	wrlong	arg04, objptr
1aba0     B6 01 00 FF 
1aba4     C3 19 06 F6 | 	mov	arg04, ##@LR__5960
1aba8     01 00 00 FF 
1abac     B0 E5 05 F1 | 	add	objptr, ##944
1abb0     F2 18 62 FC | 	wrlong	arg04, objptr
1abb4                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
1abb4                 | ' dataptr=programstart : readline="" ' reset the data pointer
1abb4                 | ' if inrun>0 then 
1abb4     01 00 00 FF 
1abb8     F0 E5 85 F1 | 	sub	objptr, ##1008
1abbc     F2 18 02 FB | 	rdlong	arg04, objptr
1abc0     50 00 00 FF 
1abc4     EC E4 85 F1 | 	sub	objptr, ##41196
1abc8     01 18 16 F2 | 	cmp	arg04, #1 wc
1abcc     30 00 90 CD |  if_b	jmp	#LR__2140
1abd0     50 00 00 FF 
1abd4     F0 E4 05 F1 | 	add	objptr, ##41200
1abd8     F2 12 02 F6 | 	mov	arg01, objptr
1abdc     38 E4 85 F1 | 	sub	objptr, #56
1abe0     F2 14 02 FB | 	rdlong	arg02, objptr
1abe4     18 16 06 F6 | 	mov	arg03, #24
1abe8     44 00 00 FF 
1abec     EC E5 85 F1 | 	sub	objptr, ##35308
1abf0     B8 AE B0 FD | 	call	#_psram_spin2_read1
1abf4     0B 00 00 FF 
1abf8     CC E4 85 F1 | 	sub	objptr, ##5836
1abfc                 | '   psram.read1(varptr(runheader),runptr,24)  
1abfc                 | '   return
1abfc     0C 03 90 FD | 	jmp	#LR__2147
1ac00                 | LR__2140
1ac00     50 00 00 FF 
1ac04     EC E4 05 F1 | 	add	objptr, ##41196
1ac08     F2 02 68 FC | 	wrlong	#1, objptr
1ac0c     04 E4 05 F1 | 	add	objptr, #4
1ac10     F2 12 02 F6 | 	mov	arg01, objptr
1ac14     38 E4 85 F1 | 	sub	objptr, #56
1ac18     F2 14 02 FB | 	rdlong	arg02, objptr
1ac1c     18 16 06 F6 | 	mov	arg03, #24
1ac20     44 00 00 FF 
1ac24     EC E5 85 F1 | 	sub	objptr, ##35308
1ac28     80 AE B0 FD | 	call	#_psram_spin2_read1
1ac2c                 | ' inrun=1
1ac2c                 | ' psram.read1(varptr(runheader),runptr,24) 
1ac2c                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
1ac2c     45 00 00 FF 
1ac30     24 E4 05 F1 | 	add	objptr, ##35364
1ac34     F2 2C 02 FB | 	rdlong	local04, objptr
1ac38     50 00 00 FF 
1ac3c     F0 E4 85 F1 | 	sub	objptr, ##41200
1ac40     FF FF 7F FF 
1ac44     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1ac48     50 00 00 AF 
1ac4c     EC E4 05 A1 |  if_e	add	objptr, ##41196
1ac50     F2 00 68 AC |  if_e	wrlong	#0, objptr
1ac54     50 00 00 AF 
1ac58     EC E4 85 A1 |  if_e	sub	objptr, ##41196
1ac5c     AC 02 90 AD |  if_e	jmp	#LR__2147
1ac60                 | ' do 
1ac60                 | LR__2141
1ac60                 | '   if runptr<>oldrunptr then
1ac60     50 00 00 FF 
1ac64     B8 E4 05 F1 | 	add	objptr, ##41144
1ac68     F2 2C 02 FB | 	rdlong	local04, objptr
1ac6c     08 E4 05 F1 | 	add	objptr, #8
1ac70     F2 18 02 FB | 	rdlong	arg04, objptr
1ac74     50 00 00 FF 
1ac78     C0 E4 85 F1 | 	sub	objptr, ##41152
1ac7c     0C 2D 0A F2 | 	cmp	local04, arg04 wz
1ac80     CC 00 90 AD |  if_e	jmp	#LR__2142
1ac84     50 00 00 FF 
1ac88     F0 E4 05 F1 | 	add	objptr, ##41200
1ac8c     F2 12 02 F6 | 	mov	arg01, objptr
1ac90     38 E4 85 F1 | 	sub	objptr, #56
1ac94     F2 14 02 FB | 	rdlong	arg02, objptr
1ac98     18 16 06 F6 | 	mov	arg03, #24
1ac9c     44 00 00 FF 
1aca0     EC E5 85 F1 | 	sub	objptr, ##35308
1aca4     04 AE B0 FD | 	call	#_psram_spin2_read1
1aca8     3B 00 00 FF 
1acac     B0 E5 05 F1 | 	add	objptr, ##30640
1acb0     F2 12 02 F6 | 	mov	arg01, objptr
1acb4     09 00 00 FF 
1acb8     3C E4 05 F1 | 	add	objptr, ##4668
1acbc     F2 14 02 FB | 	rdlong	arg02, objptr
1acc0     0B 00 00 FF 
1acc4     54 E4 85 F1 | 	sub	objptr, ##5716
1acc8     F2 2C 02 FB | 	rdlong	local04, objptr
1accc     01 2C 66 F0 | 	shl	local04, #1
1acd0     16 15 02 F1 | 	add	arg02, local04
1acd4     0B 00 00 FF 
1acd8     94 E4 05 F1 | 	add	objptr, ##5780
1acdc     F2 16 02 FB | 	rdlong	arg03, objptr
1ace0     40 E4 85 F1 | 	sub	objptr, #64
1ace4     F2 2C 02 FB | 	rdlong	local04, objptr
1ace8     16 17 82 F1 | 	sub	arg03, local04
1acec     44 00 00 FF 
1acf0     EC E5 85 F1 | 	sub	objptr, ##35308
1acf4     B4 AD B0 FD | 	call	#_psram_spin2_read1
1acf8     45 00 00 FF 
1acfc     2C E4 05 F1 | 	add	objptr, ##35372
1ad00     F2 2C 02 FB | 	rdlong	local04, objptr
1ad04     40 E4 85 F1 | 	sub	objptr, #64
1ad08     F2 14 02 FB | 	rdlong	arg02, objptr
1ad0c     0A 2D 82 F1 | 	sub	local04, arg02
1ad10     0B 00 00 FF 
1ad14     54 E4 85 F1 | 	sub	objptr, ##5716
1ad18     F2 14 02 FB | 	rdlong	arg02, objptr
1ad1c     0A 2D 12 FD | 	qdiv	local04, arg02
1ad20     05 00 00 FF 
1ad24     18 E4 05 F1 | 	add	objptr, ##2584
1ad28     18 2C 62 FD | 	getqx	local04
1ad2c     03 2C 86 F1 | 	sub	local04, #3
1ad30     F2 2C 62 FC | 	wrlong	local04, objptr
1ad34     06 00 00 FF 
1ad38     3C E4 05 F1 | 	add	objptr, ##3132
1ad3c     F2 2C 02 FB | 	rdlong	local04, objptr
1ad40     08 E4 05 F1 | 	add	objptr, #8
1ad44     F2 2C 62 FC | 	wrlong	local04, objptr
1ad48     50 00 00 FF 
1ad4c     C0 E4 85 F1 | 	sub	objptr, ##41152
1ad50                 | LR__2142
1ad50     50 00 00 FF 
1ad54     04 E5 05 F1 | 	add	objptr, ##41220
1ad58     F2 2C 02 FB | 	rdlong	local04, objptr
1ad5c     4C E4 85 F1 | 	sub	objptr, #76
1ad60     F2 2C 62 FC | 	wrlong	local04, objptr
1ad64     04 E4 05 F1 | 	add	objptr, #4
1ad68     F2 12 02 FB | 	rdlong	arg01, objptr
1ad6c     50 00 00 FF 
1ad70     BC E4 85 F1 | 	sub	objptr, ##41148
1ad74     D8 26 BF FD | 	call	#_execute_line
1ad78     50 00 00 FF 
1ad7c     BC E4 05 F1 | 	add	objptr, ##41148
1ad80     F2 FA 61 FC | 	wrlong	result1, objptr
1ad84     04 E4 85 F1 | 	sub	objptr, #4
1ad88     F2 2C 02 FB | 	rdlong	local04, objptr
1ad8c     50 00 00 FF 
1ad90     B8 E4 85 F1 | 	sub	objptr, ##41144
1ad94     FF FF 3F FF 
1ad98     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1ad9c     4C 00 90 AD |  if_e	jmp	#LR__2145
1ada0     E0 12 06 F6 | 	mov	arg01, #224
1ada4     94 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1ada8     00 FA 0D F2 | 	cmp	result1, #0 wz
1adac     10 00 90 5D |  if_ne	jmp	#LR__2143
1adb0     E4 12 06 F6 | 	mov	arg01, #228
1adb4     84 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1adb8     00 FA 0D F2 | 	cmp	result1, #0 wz
1adbc     10 00 90 AD |  if_e	jmp	#LR__2144
1adc0                 | LR__2143
1adc0     06 12 06 F6 | 	mov	arg01, #6
1adc4     74 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1adc8     00 FA 0D F2 | 	cmp	result1, #0 wz
1adcc     1C 00 90 5D |  if_ne	jmp	#LR__2145
1add0                 | LR__2144
1add0     50 00 00 FF 
1add4     EC E4 05 F1 | 	add	objptr, ##41196
1add8     F2 2C 02 FB | 	rdlong	local04, objptr
1addc     50 00 00 FF 
1ade0     EC E4 85 F1 | 	sub	objptr, ##41196
1ade4     02 2C 0E F2 | 	cmp	local04, #2 wz
1ade8     74 FE 9F 5D |  if_ne	jmp	#LR__2141
1adec                 | LR__2145
1adec                 | '   ''do whatever kbm.peek_latest_key()=$106 
1adec                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1adec     50 00 00 FF 
1adf0     B8 E4 05 F1 | 	add	objptr, ##41144
1adf4     F2 2C 02 FB | 	rdlong	local04, objptr
1adf8     50 00 00 FF 
1adfc     B8 E4 85 F1 | 	sub	objptr, ##41144
1ae00     FF FF 3F FF 
1ae04     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1ae08     AC 00 90 AD |  if_e	jmp	#LR__2146
1ae0c     50 00 00 FF 
1ae10     EC E4 05 F1 | 	add	objptr, ##41196
1ae14     F2 2C 02 FB | 	rdlong	local04, objptr
1ae18     50 00 00 FF 
1ae1c     EC E4 85 F1 | 	sub	objptr, ##41196
1ae20     01 2C 0E F2 | 	cmp	local04, #1 wz
1ae24     90 00 90 5D |  if_ne	jmp	#LR__2146
1ae28                 | '   print: print "Stopped at line ";runheader(0) 
1ae28     00 12 06 F6 | 	mov	arg01, #0
1ae2c     2C 16 B1 FD | 	call	#__system___getiolock_0603
1ae30     FD 12 02 F6 | 	mov	arg01, result1
1ae34     FC B8 B0 FD | 	call	#__system___lockmem
1ae38     00 12 06 F6 | 	mov	arg01, #0
1ae3c     0A 14 06 F6 | 	mov	arg02, #10
1ae40     00 16 06 F6 | 	mov	arg03, #0
1ae44     88 C5 B0 FD | 	call	#__system___basic_print_char
1ae48     00 12 06 F6 | 	mov	arg01, #0
1ae4c     0C 16 B1 FD | 	call	#__system___getiolock_0603
1ae50     FD 00 68 FC | 	wrlong	#0, result1
1ae54     00 12 06 F6 | 	mov	arg01, #0
1ae58     00 16 B1 FD | 	call	#__system___getiolock_0603
1ae5c     FD 12 02 F6 | 	mov	arg01, result1
1ae60     D0 B8 B0 FD | 	call	#__system___lockmem
1ae64     B6 01 00 FF 
1ae68     C4 15 06 F6 | 	mov	arg02, ##@LR__5961
1ae6c     00 12 06 F6 | 	mov	arg01, #0
1ae70     00 16 06 F6 | 	mov	arg03, #0
1ae74     B0 C5 B0 FD | 	call	#__system___basic_print_string
1ae78     50 00 00 FF 
1ae7c     F0 E4 05 F1 | 	add	objptr, ##41200
1ae80     F2 14 02 FB | 	rdlong	arg02, objptr
1ae84     50 00 00 FF 
1ae88     F0 E4 85 F1 | 	sub	objptr, ##41200
1ae8c     00 12 06 F6 | 	mov	arg01, #0
1ae90     00 16 06 F6 | 	mov	arg03, #0
1ae94     0A 18 06 F6 | 	mov	arg04, #10
1ae98     10 C6 B0 FD | 	call	#__system___basic_print_unsigned
1ae9c     00 12 06 F6 | 	mov	arg01, #0
1aea0     0A 14 06 F6 | 	mov	arg02, #10
1aea4     00 16 06 F6 | 	mov	arg03, #0
1aea8     24 C5 B0 FD | 	call	#__system___basic_print_char
1aeac     00 12 06 F6 | 	mov	arg01, #0
1aeb0     A8 15 B1 FD | 	call	#__system___getiolock_0603
1aeb4     FD 00 68 FC | 	wrlong	#0, result1
1aeb8                 | LR__2146
1aeb8     50 00 00 FF 
1aebc     EC E4 05 F1 | 	add	objptr, ##41196
1aec0     F2 00 68 FC | 	wrlong	#0, objptr
1aec4     06 00 00 FF 
1aec8     6C E4 85 F1 | 	sub	objptr, ##3180
1aecc     F2 26 62 FC | 	wrlong	local01, objptr
1aed0     06 00 00 FF 
1aed4     38 E4 05 F1 | 	add	objptr, ##3128
1aed8     F2 28 62 FC | 	wrlong	local02, objptr
1aedc     04 E4 05 F1 | 	add	objptr, #4
1aee0     F2 2A 62 FC | 	wrlong	local03, objptr
1aee4     50 00 00 FF 
1aee8     BC E4 85 F1 | 	sub	objptr, ##41148
1aeec     11 12 06 F6 | 	mov	arg01, #17
1aef0     08 14 06 F6 | 	mov	arg02, #8
1aef4     10 16 06 F6 | 	mov	arg03, #16
1aef8     94 8E B0 FD | 	call	#_hg010b_spin2_setspritesize
1aefc     10 12 06 F6 | 	mov	arg01, #16
1af00     20 14 06 F6 | 	mov	arg02, #32
1af04     20 16 06 F6 | 	mov	arg03, #32
1af08     84 8E B0 FD | 	call	#_hg010b_spin2_setspritesize
1af0c                 | LR__2147
1af0c     A7 F0 03 F6 | 	mov	ptra, fp
1af10     B2 00 A0 FD | 	call	#popregs_
1af14                 | _do_run_ret
1af14     2D 00 64 FD | 	ret
1af18                 | 
1af18                 | ' 
1af18                 | ' ' ------------------ save
1af18                 | ' 
1af18                 | ' sub do_save                        
1af18                 | _do_save
1af18     04 4A 05 F6 | 	mov	COUNT_, #4
1af1c     A8 00 A0 FD | 	call	#pushregs_
1af20     B8 F0 07 F1 | 	add	ptra, #184
1af24     4A 00 00 FF 
1af28     80 E4 05 F1 | 	add	objptr, ##38016
1af2c     F2 26 02 FB | 	rdlong	local01, objptr
1af30     13 29 02 F6 | 	mov	local02, local01
1af34     01 28 66 F0 | 	shl	local02, #1
1af38     13 29 02 F1 | 	add	local02, local01
1af3c     02 28 66 F0 | 	shl	local02, #2
1af40     03 00 00 FF 
1af44     04 E4 85 F1 | 	sub	objptr, ##1540
1af48     F2 28 02 F1 | 	add	local02, objptr
1af4c     14 2B 02 FB | 	rdlong	local03, local02
1af50     10 4E 05 F1 | 	add	fp, #16
1af54     A7 2A 62 FC | 	wrlong	local03, fp
1af58                 | ' 
1af58                 | ' numpar=compiledline(lineptr_e).result.uresult
1af58                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1af58     10 4E 85 F1 | 	sub	fp, #16
1af5c     01 2A 56 F2 | 	cmps	local03, #1 wc
1af60     47 00 00 FF 
1af64     7C E4 85 F1 | 	sub	objptr, ##36476
1af68     20 00 90 CD |  if_b	jmp	#LR__2150
1af6c     E4 25 BF FD | 	call	#_pop
1af70     A7 FA 61 FC | 	wrlong	result1, fp
1af74     04 4E 05 F1 | 	add	fp, #4
1af78     A7 FC 61 FC | 	wrlong	result2, fp
1af7c     04 4E 05 F1 | 	add	fp, #4
1af80     A7 FE 61 FC | 	wrlong	result3, fp
1af84     08 4E 85 F1 | 	sub	fp, #8
1af88     24 00 90 FD | 	jmp	#LR__2151
1af8c                 | LR__2150
1af8c     52 00 00 FF 
1af90     C4 E4 05 F1 | 	add	objptr, ##42180
1af94     F2 2A 02 FB | 	rdlong	local03, objptr
1af98     52 00 00 FF 
1af9c     C4 E4 85 F1 | 	sub	objptr, ##42180
1afa0     A7 2A 62 FC | 	wrlong	local03, fp
1afa4     08 4E 05 F1 | 	add	fp, #8
1afa8     A7 3E 68 FC | 	wrlong	#31, fp
1afac     08 4E 85 F1 | 	sub	fp, #8
1afb0                 | LR__2151
1afb0                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1afb0     4A 00 00 FF 
1afb4     88 E4 05 F1 | 	add	objptr, ##38024
1afb8     F2 12 02 FB | 	rdlong	arg01, objptr
1afbc     4A 00 00 FF 
1afc0     88 E4 85 F1 | 	sub	objptr, ##38024
1afc4     50 80 B0 FD | 	call	#_pslpeek
1afc8     FF FF 7F FF 
1afcc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1afd0     10 00 90 5D |  if_ne	jmp	#LR__2152
1afd4     1B 12 06 F6 | 	mov	arg01, #27
1afd8     00 14 06 F6 | 	mov	arg02, #0
1afdc     68 7D B0 FD | 	call	#_printerror
1afe0     CC 02 90 FD | 	jmp	#LR__2158
1afe4                 | LR__2152
1afe4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1afe4     08 4E 05 F1 | 	add	fp, #8
1afe8     A7 2A 02 FB | 	rdlong	local03, fp
1afec     08 4E 85 F1 | 	sub	fp, #8
1aff0     2B 2A 0E F2 | 	cmp	local03, #43 wz
1aff4     18 00 90 5D |  if_ne	jmp	#LR__2153
1aff8     A7 12 02 FB | 	rdlong	arg01, fp
1affc     CC 26 BF FD | 	call	#_convertstring
1b000     A7 FA 61 FC | 	wrlong	result1, fp
1b004     08 4E 05 F1 | 	add	fp, #8
1b008     A7 3E 68 FC | 	wrlong	#31, fp
1b00c     08 4E 85 F1 | 	sub	fp, #8
1b010                 | LR__2153
1b010                 | ' if t1.result_type=result_string then
1b010     08 4E 05 F1 | 	add	fp, #8
1b014     A7 2A 02 FB | 	rdlong	local03, fp
1b018     08 4E 85 F1 | 	sub	fp, #8
1b01c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1b020     8C 02 90 5D |  if_ne	jmp	#LR__2157
1b024                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1b024     A7 12 02 FB | 	rdlong	arg01, fp
1b028     B6 01 00 FF 
1b02c     D5 15 06 F6 | 	mov	arg02, ##@LR__5962
1b030     28 B7 B0 FD | 	call	#__system___string_cmp
1b034     00 FA 0D F2 | 	cmp	result1, #0 wz
1b038     52 00 00 AF 
1b03c     C4 E4 05 A1 |  if_e	add	objptr, ##42180
1b040     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1b044     A7 2A 62 AC |  if_e	wrlong	local03, fp
1b048     52 00 00 AF 
1b04c     C4 E4 85 A1 |  if_e	sub	objptr, ##42180
1b050     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1b054     52 00 00 5F 
1b058     C4 E4 05 51 |  if_ne	add	objptr, ##42180
1b05c     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1b060     52 00 00 5F 
1b064     C4 E4 85 51 |  if_ne	sub	objptr, ##42180
1b068                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1b068     09 12 06 F6 | 	mov	arg01, #9
1b06c     1C 0A B1 FD | 	call	#__system__close
1b070     09 2A 06 F6 | 	mov	local03, #9
1b074     4A 00 00 FF 
1b078     94 E4 05 F1 | 	add	objptr, ##38036
1b07c     F2 12 02 FB | 	rdlong	arg01, objptr
1b080     4A 00 00 FF 
1b084     94 E4 85 F1 | 	sub	objptr, ##38036
1b088     B6 01 00 FF 
1b08c     D6 15 06 F6 | 	mov	arg02, ##@LR__5963
1b090     FC B6 B0 FD | 	call	#__system___string_concat
1b094     FD 12 02 F6 | 	mov	arg01, result1
1b098     A7 14 02 FB | 	rdlong	arg02, fp
1b09c     F0 B6 B0 FD | 	call	#__system___string_concat
1b0a0     FD 14 02 F6 | 	mov	arg02, result1
1b0a4     15 13 02 F6 | 	mov	arg01, local03
1b0a8     0D 16 06 F6 | 	mov	arg03, #13
1b0ac     88 C2 B0 FD | 	call	#__system___basic_open_string
1b0b0     4A 00 00 FF 
1b0b4     88 E4 05 F1 | 	add	objptr, ##38024
1b0b8     F2 2A 02 FB | 	rdlong	local03, objptr
1b0bc     4A 00 00 FF 
1b0c0     88 E4 85 F1 | 	sub	objptr, ##38024
1b0c4     B0 4E 05 F1 | 	add	fp, #176
1b0c8     A7 2A 62 FC | 	wrlong	local03, fp
1b0cc     B0 4E 85 F1 | 	sub	fp, #176
1b0d0                 | '   saveptr=programstart
1b0d0                 | '   do
1b0d0                 | LR__2154
1b0d0     14 4E 05 F1 | 	add	fp, #20
1b0d4     A7 12 02 F6 | 	mov	arg01, fp
1b0d8     9C 4E 05 F1 | 	add	fp, #156
1b0dc     A7 14 02 FB | 	rdlong	arg02, fp
1b0e0     B0 4E 85 F1 | 	sub	fp, #176
1b0e4     18 16 06 F6 | 	mov	arg03, #24
1b0e8     0B 00 00 FF 
1b0ec     CC E4 05 F1 | 	add	objptr, ##5836
1b0f0     B8 A9 B0 FD | 	call	#_psram_spin2_read1
1b0f4     2C 4E 05 F1 | 	add	fp, #44
1b0f8     A7 12 02 F6 | 	mov	arg01, fp
1b0fc     10 4E 85 F1 | 	sub	fp, #16
1b100     A7 14 02 FB | 	rdlong	arg02, fp
1b104     04 4E 05 F1 | 	add	fp, #4
1b108     A7 16 02 FB | 	rdlong	arg03, fp
1b10c     20 4E 85 F1 | 	sub	fp, #32
1b110     98 A9 B0 FD | 	call	#_psram_spin2_read1
1b114     0B 00 00 FF 
1b118     CC E4 85 F1 | 	sub	objptr, ##5836
1b11c     B6 01 00 FF 
1b120     D8 2B 06 F6 | 	mov	local03, ##@LR__5964
1b124     AC 4E 05 F1 | 	add	fp, #172
1b128     A7 2A 62 FC | 	wrlong	local03, fp
1b12c                 | '     psram.read1(varptr(header(0)),saveptr,24)
1b12c                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1b12c                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1b12c     A0 4E 85 F1 | 	sub	fp, #160
1b130     A7 02 68 FC | 	wrlong	#1, fp
1b134     14 4E 05 F1 | 	add	fp, #20
1b138     A7 2C 02 FB | 	rdlong	local04, fp
1b13c     20 4E 85 F1 | 	sub	fp, #32
1b140     01 2C 06 F1 | 	add	local04, #1
1b144                 | LR__2155
1b144     0C 4E 05 F1 | 	add	fp, #12
1b148     A7 2A 02 FB | 	rdlong	local03, fp
1b14c     0C 4E 85 F1 | 	sub	fp, #12
1b150     16 2B 52 F2 | 	cmps	local03, local04 wc
1b154     54 00 90 3D |  if_ae	jmp	#LR__2156
1b158     AC 4E 05 F1 | 	add	fp, #172
1b15c     A7 26 02 FB | 	rdlong	local01, fp
1b160     A0 4E 85 F1 | 	sub	fp, #160
1b164     A7 2A 02 FB | 	rdlong	local03, fp
1b168     01 2A 86 F1 | 	sub	local03, #1
1b16c     20 4E 05 F1 | 	add	fp, #32
1b170     A7 2A 02 F1 | 	add	local03, fp
1b174     15 13 C2 FA | 	rdbyte	arg01, local03
1b178     2C 4E 85 F1 | 	sub	fp, #44
1b17c     F4 D7 B0 FD | 	call	#__system__Chr_S
1b180     FD 14 02 F6 | 	mov	arg02, result1
1b184     13 13 02 F6 | 	mov	arg01, local01
1b188     04 B6 B0 FD | 	call	#__system___string_concat
1b18c     AC 4E 05 F1 | 	add	fp, #172
1b190     A7 FA 61 FC | 	wrlong	result1, fp
1b194     A0 4E 85 F1 | 	sub	fp, #160
1b198     A7 2A 02 FB | 	rdlong	local03, fp
1b19c     01 2A 06 F1 | 	add	local03, #1
1b1a0     A7 2A 62 FC | 	wrlong	local03, fp
1b1a4     0C 4E 85 F1 | 	sub	fp, #12
1b1a8     98 FF 9F FD | 	jmp	#LR__2155
1b1ac                 | LR__2156
1b1ac                 | '     print #9, saveline$
1b1ac     09 12 06 F6 | 	mov	arg01, #9
1b1b0     A8 12 B1 FD | 	call	#__system___getiolock_0603
1b1b4     FD 12 02 F6 | 	mov	arg01, result1
1b1b8     78 B5 B0 FD | 	call	#__system___lockmem
1b1bc     AC 4E 05 F1 | 	add	fp, #172
1b1c0     A7 14 02 FB | 	rdlong	arg02, fp
1b1c4     AC 4E 85 F1 | 	sub	fp, #172
1b1c8     09 12 06 F6 | 	mov	arg01, #9
1b1cc     00 16 06 F6 | 	mov	arg03, #0
1b1d0     54 C2 B0 FD | 	call	#__system___basic_print_string
1b1d4     09 12 06 F6 | 	mov	arg01, #9
1b1d8     0A 14 06 F6 | 	mov	arg02, #10
1b1dc     00 16 06 F6 | 	mov	arg03, #0
1b1e0     EC C1 B0 FD | 	call	#__system___basic_print_char
1b1e4     09 12 06 F6 | 	mov	arg01, #9
1b1e8     70 12 B1 FD | 	call	#__system___getiolock_0603
1b1ec     FD 00 68 FC | 	wrlong	#0, result1
1b1f0     28 4E 05 F1 | 	add	fp, #40
1b1f4     A7 2A 02 FB | 	rdlong	local03, fp
1b1f8     88 4E 05 F1 | 	add	fp, #136
1b1fc     A7 2A 62 FC | 	wrlong	local03, fp
1b200     88 4E 85 F1 | 	sub	fp, #136
1b204     A7 2A 02 FB | 	rdlong	local03, fp
1b208     28 4E 85 F1 | 	sub	fp, #40
1b20c     FF FF 3F FF 
1b210     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1b214     B8 FE 9F 5D |  if_ne	jmp	#LR__2154
1b218                 | '   close #9  
1b218     09 12 06 F6 | 	mov	arg01, #9
1b21c     6C 08 B1 FD | 	call	#__system__close
1b220                 | '   print "Saved as ";currentdir$+"/"+loadname
1b220     00 12 06 F6 | 	mov	arg01, #0
1b224     34 12 B1 FD | 	call	#__system___getiolock_0603
1b228     FD 12 02 F6 | 	mov	arg01, result1
1b22c     04 B5 B0 FD | 	call	#__system___lockmem
1b230     B6 01 00 FF 
1b234     D9 15 06 F6 | 	mov	arg02, ##@LR__5965
1b238     00 12 06 F6 | 	mov	arg01, #0
1b23c     00 16 06 F6 | 	mov	arg03, #0
1b240     E4 C1 B0 FD | 	call	#__system___basic_print_string
1b244     00 28 06 F6 | 	mov	local02, #0
1b248     4A 00 00 FF 
1b24c     94 E4 05 F1 | 	add	objptr, ##38036
1b250     F2 12 02 FB | 	rdlong	arg01, objptr
1b254     4A 00 00 FF 
1b258     94 E4 85 F1 | 	sub	objptr, ##38036
1b25c     B6 01 00 FF 
1b260     E3 15 06 F6 | 	mov	arg02, ##@LR__5966
1b264     28 B5 B0 FD | 	call	#__system___string_concat
1b268     FD 12 02 F6 | 	mov	arg01, result1
1b26c     52 00 00 FF 
1b270     C4 E4 05 F1 | 	add	objptr, ##42180
1b274     F2 14 02 FB | 	rdlong	arg02, objptr
1b278     52 00 00 FF 
1b27c     C4 E4 85 F1 | 	sub	objptr, ##42180
1b280     0C B5 B0 FD | 	call	#__system___string_concat
1b284     FD 14 02 F6 | 	mov	arg02, result1
1b288     14 13 02 F6 | 	mov	arg01, local02
1b28c     00 16 06 F6 | 	mov	arg03, #0
1b290     94 C1 B0 FD | 	call	#__system___basic_print_string
1b294     00 12 06 F6 | 	mov	arg01, #0
1b298     0A 14 06 F6 | 	mov	arg02, #10
1b29c     00 16 06 F6 | 	mov	arg03, #0
1b2a0     2C C1 B0 FD | 	call	#__system___basic_print_char
1b2a4     00 12 06 F6 | 	mov	arg01, #0
1b2a8     B0 11 B1 FD | 	call	#__system___getiolock_0603
1b2ac     FD 00 68 FC | 	wrlong	#0, result1
1b2b0                 | LR__2157
1b2b0                 | LR__2158
1b2b0     A7 F0 03 F6 | 	mov	ptra, fp
1b2b4     B2 00 A0 FD | 	call	#popregs_
1b2b8                 | _do_save_ret
1b2b8     2D 00 64 FD | 	ret
1b2bc                 | 
1b2bc                 | ' 
1b2bc                 | ' ' ------------------ setdelay
1b2bc                 | ' 
1b2bc                 | ' sub do_setdelay
1b2bc                 | _do_setdelay
1b2bc     02 4A 05 F6 | 	mov	COUNT_, #2
1b2c0     A8 00 A0 FD | 	call	#pushregs_
1b2c4     18 F0 07 F1 | 	add	ptra, #24
1b2c8     88 22 BF FD | 	call	#_pop
1b2cc     FD 12 02 F6 | 	mov	arg01, result1
1b2d0     FE 26 02 F6 | 	mov	local01, result2
1b2d4     FF 28 02 F6 | 	mov	local02, result3
1b2d8     A7 12 62 FC | 	wrlong	arg01, fp
1b2dc     04 4E 05 F1 | 	add	fp, #4
1b2e0     A7 26 62 FC | 	wrlong	local01, fp
1b2e4     04 4E 05 F1 | 	add	fp, #4
1b2e8     A7 28 62 FC | 	wrlong	local02, fp
1b2ec     08 4E 85 F1 | 	sub	fp, #8
1b2f0     60 22 BF FD | 	call	#_pop
1b2f4     FD 28 02 F6 | 	mov	local02, result1
1b2f8     0C 4E 05 F1 | 	add	fp, #12
1b2fc     A7 28 62 FC | 	wrlong	local02, fp
1b300     04 4E 05 F1 | 	add	fp, #4
1b304     A7 FC 61 FC | 	wrlong	result2, fp
1b308     04 4E 05 F1 | 	add	fp, #4
1b30c     A7 FE 61 FC | 	wrlong	result3, fp
1b310     08 4E 85 F1 | 	sub	fp, #8
1b314     A7 12 02 F6 | 	mov	arg01, fp
1b318     0C 4E 85 F1 | 	sub	fp, #12
1b31c     18 24 BF FD | 	call	#_converttoint
1b320     FD 28 02 F6 | 	mov	local02, result1
1b324     14 27 02 F6 | 	mov	local01, local02
1b328     01 26 66 F0 | 	shl	local01, #1
1b32c     14 27 02 F1 | 	add	local01, local02
1b330     03 26 66 F0 | 	shl	local01, #3
1b334     14 00 00 FF 
1b338     38 E5 05 F1 | 	add	objptr, ##10552
1b33c     F2 26 02 F1 | 	add	local01, objptr
1b340     A7 12 02 F6 | 	mov	arg01, fp
1b344     14 00 00 FF 
1b348     38 E5 85 F1 | 	sub	objptr, ##10552
1b34c     E8 23 BF FD | 	call	#_converttoint
1b350     06 26 06 F1 | 	add	local01, #6
1b354     13 FB 51 FC | 	wrword	result1, local01
1b358     A7 F0 03 F6 | 	mov	ptra, fp
1b35c     B2 00 A0 FD | 	call	#popregs_
1b360                 | _do_setdelay_ret
1b360     2D 00 64 FD | 	ret
1b364                 | 
1b364                 | ' 
1b364                 | ' ' ------------------ setenv
1b364                 | ' 
1b364                 | ' sub do_setenv
1b364                 | _do_setenv
1b364     02 4A 05 F6 | 	mov	COUNT_, #2
1b368     A8 00 A0 FD | 	call	#pushregs_
1b36c     18 F0 07 F1 | 	add	ptra, #24
1b370     E0 21 BF FD | 	call	#_pop
1b374     FD 12 02 F6 | 	mov	arg01, result1
1b378     FE 26 02 F6 | 	mov	local01, result2
1b37c     FF 28 02 F6 | 	mov	local02, result3
1b380     A7 12 62 FC | 	wrlong	arg01, fp
1b384     04 4E 05 F1 | 	add	fp, #4
1b388     A7 26 62 FC | 	wrlong	local01, fp
1b38c     04 4E 05 F1 | 	add	fp, #4
1b390     A7 28 62 FC | 	wrlong	local02, fp
1b394     08 4E 85 F1 | 	sub	fp, #8
1b398     B8 21 BF FD | 	call	#_pop
1b39c     FD 28 02 F6 | 	mov	local02, result1
1b3a0     0C 4E 05 F1 | 	add	fp, #12
1b3a4     A7 28 62 FC | 	wrlong	local02, fp
1b3a8     04 4E 05 F1 | 	add	fp, #4
1b3ac     A7 FC 61 FC | 	wrlong	result2, fp
1b3b0     04 4E 05 F1 | 	add	fp, #4
1b3b4     A7 FE 61 FC | 	wrlong	result3, fp
1b3b8     08 4E 85 F1 | 	sub	fp, #8
1b3bc     A7 12 02 F6 | 	mov	arg01, fp
1b3c0     0C 4E 85 F1 | 	sub	fp, #12
1b3c4     70 23 BF FD | 	call	#_converttoint
1b3c8     FD 28 02 F6 | 	mov	local02, result1
1b3cc     14 27 02 F6 | 	mov	local01, local02
1b3d0     01 26 66 F0 | 	shl	local01, #1
1b3d4     14 27 02 F1 | 	add	local01, local02
1b3d8     03 26 66 F0 | 	shl	local01, #3
1b3dc     14 00 00 FF 
1b3e0     38 E5 05 F1 | 	add	objptr, ##10552
1b3e4     F2 26 02 F1 | 	add	local01, objptr
1b3e8     A7 12 02 F6 | 	mov	arg01, fp
1b3ec     14 00 00 FF 
1b3f0     38 E5 85 F1 | 	sub	objptr, ##10552
1b3f4     40 23 BF FD | 	call	#_converttoint
1b3f8     05 26 06 F1 | 	add	local01, #5
1b3fc     13 FB 41 FC | 	wrbyte	result1, local01
1b400     A7 F0 03 F6 | 	mov	ptra, fp
1b404     B2 00 A0 FD | 	call	#popregs_
1b408                 | _do_setenv_ret
1b408     2D 00 64 FD | 	ret
1b40c                 | 
1b40c                 | ' 
1b40c                 | ' ' ------------------ setlen
1b40c                 | ' 
1b40c                 | ' sub do_setlen
1b40c                 | _do_setlen
1b40c     02 4A 05 F6 | 	mov	COUNT_, #2
1b410     A8 00 A0 FD | 	call	#pushregs_
1b414     18 F0 07 F1 | 	add	ptra, #24
1b418     38 21 BF FD | 	call	#_pop
1b41c     FD 12 02 F6 | 	mov	arg01, result1
1b420     FE 26 02 F6 | 	mov	local01, result2
1b424     FF 28 02 F6 | 	mov	local02, result3
1b428     A7 12 62 FC | 	wrlong	arg01, fp
1b42c     04 4E 05 F1 | 	add	fp, #4
1b430     A7 26 62 FC | 	wrlong	local01, fp
1b434     04 4E 05 F1 | 	add	fp, #4
1b438     A7 28 62 FC | 	wrlong	local02, fp
1b43c     08 4E 85 F1 | 	sub	fp, #8
1b440     10 21 BF FD | 	call	#_pop
1b444     FD 28 02 F6 | 	mov	local02, result1
1b448     0C 4E 05 F1 | 	add	fp, #12
1b44c     A7 28 62 FC | 	wrlong	local02, fp
1b450     04 4E 05 F1 | 	add	fp, #4
1b454     A7 FC 61 FC | 	wrlong	result2, fp
1b458     04 4E 05 F1 | 	add	fp, #4
1b45c     A7 FE 61 FC | 	wrlong	result3, fp
1b460     08 4E 85 F1 | 	sub	fp, #8
1b464     A7 12 02 F6 | 	mov	arg01, fp
1b468     0C 4E 85 F1 | 	sub	fp, #12
1b46c     C8 22 BF FD | 	call	#_converttoint
1b470     FD 28 02 F6 | 	mov	local02, result1
1b474     14 27 02 F6 | 	mov	local01, local02
1b478     01 26 66 F0 | 	shl	local01, #1
1b47c     14 27 02 F1 | 	add	local01, local02
1b480     03 26 66 F0 | 	shl	local01, #3
1b484     14 00 00 FF 
1b488     38 E5 05 F1 | 	add	objptr, ##10552
1b48c     F2 26 02 F1 | 	add	local01, objptr
1b490     A7 12 02 F6 | 	mov	arg01, fp
1b494     14 00 00 FF 
1b498     38 E5 85 F1 | 	sub	objptr, ##10552
1b49c     54 23 BF FD | 	call	#_converttofloat
1b4a0     08 26 06 F1 | 	add	local01, #8
1b4a4     13 FB 61 FC | 	wrlong	result1, local01
1b4a8     A7 F0 03 F6 | 	mov	ptra, fp
1b4ac     B2 00 A0 FD | 	call	#popregs_
1b4b0                 | _do_setlen_ret
1b4b0     2D 00 64 FD | 	ret
1b4b4                 | 
1b4b4                 | ' 
1b4b4                 | ' ' ------------------ setpan
1b4b4                 | ' 
1b4b4                 | ' sub do_setpan
1b4b4                 | _do_setpan
1b4b4     02 4A 05 F6 | 	mov	COUNT_, #2
1b4b8     A8 00 A0 FD | 	call	#pushregs_
1b4bc     18 F0 07 F1 | 	add	ptra, #24
1b4c0     90 20 BF FD | 	call	#_pop
1b4c4     FD 12 02 F6 | 	mov	arg01, result1
1b4c8     FE 26 02 F6 | 	mov	local01, result2
1b4cc     FF 28 02 F6 | 	mov	local02, result3
1b4d0     A7 12 62 FC | 	wrlong	arg01, fp
1b4d4     04 4E 05 F1 | 	add	fp, #4
1b4d8     A7 26 62 FC | 	wrlong	local01, fp
1b4dc     04 4E 05 F1 | 	add	fp, #4
1b4e0     A7 28 62 FC | 	wrlong	local02, fp
1b4e4     08 4E 85 F1 | 	sub	fp, #8
1b4e8     68 20 BF FD | 	call	#_pop
1b4ec     FD 28 02 F6 | 	mov	local02, result1
1b4f0     0C 4E 05 F1 | 	add	fp, #12
1b4f4     A7 28 62 FC | 	wrlong	local02, fp
1b4f8     04 4E 05 F1 | 	add	fp, #4
1b4fc     A7 FC 61 FC | 	wrlong	result2, fp
1b500     04 4E 05 F1 | 	add	fp, #4
1b504     A7 FE 61 FC | 	wrlong	result3, fp
1b508     08 4E 85 F1 | 	sub	fp, #8
1b50c     A7 12 02 F6 | 	mov	arg01, fp
1b510     0C 4E 85 F1 | 	sub	fp, #12
1b514     20 22 BF FD | 	call	#_converttoint
1b518     FD 28 02 F6 | 	mov	local02, result1
1b51c     14 27 02 F6 | 	mov	local01, local02
1b520     01 26 66 F0 | 	shl	local01, #1
1b524     14 27 02 F1 | 	add	local01, local02
1b528     03 26 66 F0 | 	shl	local01, #3
1b52c     14 00 00 FF 
1b530     38 E5 05 F1 | 	add	objptr, ##10552
1b534     F2 26 02 F1 | 	add	local01, objptr
1b538     A7 12 02 F6 | 	mov	arg01, fp
1b53c     14 00 00 FF 
1b540     38 E5 85 F1 | 	sub	objptr, ##10552
1b544     AC 22 BF FD | 	call	#_converttofloat
1b548     10 26 06 F1 | 	add	local01, #16
1b54c     13 FB 61 FC | 	wrlong	result1, local01
1b550     A7 F0 03 F6 | 	mov	ptra, fp
1b554     B2 00 A0 FD | 	call	#popregs_
1b558                 | _do_setpan_ret
1b558     2D 00 64 FD | 	ret
1b55c                 | 
1b55c                 | ' 
1b55c                 | ' ' ------------------ setsustain
1b55c                 | ' 
1b55c                 | ' sub do_setsustain
1b55c                 | _do_setsustain
1b55c     02 4A 05 F6 | 	mov	COUNT_, #2
1b560     A8 00 A0 FD | 	call	#pushregs_
1b564     18 F0 07 F1 | 	add	ptra, #24
1b568     E8 1F BF FD | 	call	#_pop
1b56c     FD 12 02 F6 | 	mov	arg01, result1
1b570     FE 26 02 F6 | 	mov	local01, result2
1b574     FF 28 02 F6 | 	mov	local02, result3
1b578     A7 12 62 FC | 	wrlong	arg01, fp
1b57c     04 4E 05 F1 | 	add	fp, #4
1b580     A7 26 62 FC | 	wrlong	local01, fp
1b584     04 4E 05 F1 | 	add	fp, #4
1b588     A7 28 62 FC | 	wrlong	local02, fp
1b58c     08 4E 85 F1 | 	sub	fp, #8
1b590     C0 1F BF FD | 	call	#_pop
1b594     FD 28 02 F6 | 	mov	local02, result1
1b598     0C 4E 05 F1 | 	add	fp, #12
1b59c     A7 28 62 FC | 	wrlong	local02, fp
1b5a0     04 4E 05 F1 | 	add	fp, #4
1b5a4     A7 FC 61 FC | 	wrlong	result2, fp
1b5a8     04 4E 05 F1 | 	add	fp, #4
1b5ac     A7 FE 61 FC | 	wrlong	result3, fp
1b5b0     08 4E 85 F1 | 	sub	fp, #8
1b5b4     A7 12 02 F6 | 	mov	arg01, fp
1b5b8     0C 4E 85 F1 | 	sub	fp, #12
1b5bc     78 21 BF FD | 	call	#_converttoint
1b5c0     FD 28 02 F6 | 	mov	local02, result1
1b5c4     14 27 02 F6 | 	mov	local01, local02
1b5c8     01 26 66 F0 | 	shl	local01, #1
1b5cc     14 27 02 F1 | 	add	local01, local02
1b5d0     03 26 66 F0 | 	shl	local01, #3
1b5d4     14 00 00 FF 
1b5d8     38 E5 05 F1 | 	add	objptr, ##10552
1b5dc     F2 26 02 F1 | 	add	local01, objptr
1b5e0     A7 12 02 F6 | 	mov	arg01, fp
1b5e4     14 00 00 FF 
1b5e8     38 E5 85 F1 | 	sub	objptr, ##10552
1b5ec     48 21 BF FD | 	call	#_converttoint
1b5f0     14 26 06 F1 | 	add	local01, #20
1b5f4     13 FB 51 FC | 	wrword	result1, local01
1b5f8     A7 F0 03 F6 | 	mov	ptra, fp
1b5fc     B2 00 A0 FD | 	call	#popregs_
1b600                 | _do_setsustain_ret
1b600     2D 00 64 FD | 	ret
1b604                 | 
1b604                 | ' 
1b604                 | ' ' ------------------ setvol
1b604                 | ' 
1b604                 | ' sub do_setvol
1b604                 | _do_setvol
1b604     02 4A 05 F6 | 	mov	COUNT_, #2
1b608     A8 00 A0 FD | 	call	#pushregs_
1b60c     18 F0 07 F1 | 	add	ptra, #24
1b610     40 1F BF FD | 	call	#_pop
1b614     FD 12 02 F6 | 	mov	arg01, result1
1b618     FE 26 02 F6 | 	mov	local01, result2
1b61c     FF 28 02 F6 | 	mov	local02, result3
1b620     A7 12 62 FC | 	wrlong	arg01, fp
1b624     04 4E 05 F1 | 	add	fp, #4
1b628     A7 26 62 FC | 	wrlong	local01, fp
1b62c     04 4E 05 F1 | 	add	fp, #4
1b630     A7 28 62 FC | 	wrlong	local02, fp
1b634     08 4E 85 F1 | 	sub	fp, #8
1b638     18 1F BF FD | 	call	#_pop
1b63c     FD 28 02 F6 | 	mov	local02, result1
1b640     0C 4E 05 F1 | 	add	fp, #12
1b644     A7 28 62 FC | 	wrlong	local02, fp
1b648     04 4E 05 F1 | 	add	fp, #4
1b64c     A7 FC 61 FC | 	wrlong	result2, fp
1b650     04 4E 05 F1 | 	add	fp, #4
1b654     A7 FE 61 FC | 	wrlong	result3, fp
1b658     08 4E 85 F1 | 	sub	fp, #8
1b65c     A7 12 02 F6 | 	mov	arg01, fp
1b660     0C 4E 85 F1 | 	sub	fp, #12
1b664     D0 20 BF FD | 	call	#_converttoint
1b668     FD 28 02 F6 | 	mov	local02, result1
1b66c     14 27 02 F6 | 	mov	local01, local02
1b670     01 26 66 F0 | 	shl	local01, #1
1b674     14 27 02 F1 | 	add	local01, local02
1b678     03 26 66 F0 | 	shl	local01, #3
1b67c     14 00 00 FF 
1b680     38 E5 05 F1 | 	add	objptr, ##10552
1b684     F2 26 02 F1 | 	add	local01, objptr
1b688     A7 12 02 F6 | 	mov	arg01, fp
1b68c     14 00 00 FF 
1b690     38 E5 85 F1 | 	sub	objptr, ##10552
1b694     5C 21 BF FD | 	call	#_converttofloat
1b698     0C 26 06 F1 | 	add	local01, #12
1b69c     13 FB 61 FC | 	wrlong	result1, local01
1b6a0     A7 F0 03 F6 | 	mov	ptra, fp
1b6a4     B2 00 A0 FD | 	call	#popregs_
1b6a8                 | _do_setvol_ret
1b6a8     2D 00 64 FD | 	ret
1b6ac                 | 
1b6ac                 | ' 
1b6ac                 | ' ' ------------------ setwave
1b6ac                 | ' 
1b6ac                 | ' sub do_setwave
1b6ac                 | _do_setwave
1b6ac     02 4A 05 F6 | 	mov	COUNT_, #2
1b6b0     A8 00 A0 FD | 	call	#pushregs_
1b6b4     18 F0 07 F1 | 	add	ptra, #24
1b6b8     98 1E BF FD | 	call	#_pop
1b6bc     FD 12 02 F6 | 	mov	arg01, result1
1b6c0     FE 26 02 F6 | 	mov	local01, result2
1b6c4     FF 28 02 F6 | 	mov	local02, result3
1b6c8     A7 12 62 FC | 	wrlong	arg01, fp
1b6cc     04 4E 05 F1 | 	add	fp, #4
1b6d0     A7 26 62 FC | 	wrlong	local01, fp
1b6d4     04 4E 05 F1 | 	add	fp, #4
1b6d8     A7 28 62 FC | 	wrlong	local02, fp
1b6dc     08 4E 85 F1 | 	sub	fp, #8
1b6e0     70 1E BF FD | 	call	#_pop
1b6e4     FD 28 02 F6 | 	mov	local02, result1
1b6e8     0C 4E 05 F1 | 	add	fp, #12
1b6ec     A7 28 62 FC | 	wrlong	local02, fp
1b6f0     04 4E 05 F1 | 	add	fp, #4
1b6f4     A7 FC 61 FC | 	wrlong	result2, fp
1b6f8     04 4E 05 F1 | 	add	fp, #4
1b6fc     A7 FE 61 FC | 	wrlong	result3, fp
1b700     08 4E 85 F1 | 	sub	fp, #8
1b704     A7 12 02 F6 | 	mov	arg01, fp
1b708     0C 4E 85 F1 | 	sub	fp, #12
1b70c     28 20 BF FD | 	call	#_converttoint
1b710     FD 28 02 F6 | 	mov	local02, result1
1b714     14 27 02 F6 | 	mov	local01, local02
1b718     01 26 66 F0 | 	shl	local01, #1
1b71c     14 27 02 F1 | 	add	local01, local02
1b720     03 26 66 F0 | 	shl	local01, #3
1b724     14 00 00 FF 
1b728     38 E5 05 F1 | 	add	objptr, ##10552
1b72c     F2 26 02 F1 | 	add	local01, objptr
1b730     A7 12 02 F6 | 	mov	arg01, fp
1b734     14 00 00 FF 
1b738     38 E5 85 F1 | 	sub	objptr, ##10552
1b73c     F8 1F BF FD | 	call	#_converttoint
1b740     04 26 06 F1 | 	add	local01, #4
1b744     13 FB 41 FC | 	wrbyte	result1, local01
1b748     A7 F0 03 F6 | 	mov	ptra, fp
1b74c     B2 00 A0 FD | 	call	#popregs_
1b750                 | _do_setwave_ret
1b750     2D 00 64 FD | 	ret
1b754                 | 
1b754                 | ' 
1b754                 | ' ' ------------------ shutup
1b754                 | ' 
1b754                 | ' sub do_shutup
1b754                 | _do_shutup
1b754     03 4A 05 F6 | 	mov	COUNT_, #3
1b758     A8 00 A0 FD | 	call	#pushregs_
1b75c     18 F0 07 F1 | 	add	ptra, #24
1b760     4A 00 00 FF 
1b764     80 E4 05 F1 | 	add	objptr, ##38016
1b768     F2 26 02 FB | 	rdlong	local01, objptr
1b76c     13 29 02 F6 | 	mov	local02, local01
1b770     01 28 66 F0 | 	shl	local02, #1
1b774     13 29 02 F1 | 	add	local02, local01
1b778     02 28 66 F0 | 	shl	local02, #2
1b77c     03 00 00 FF 
1b780     04 E4 85 F1 | 	sub	objptr, ##1540
1b784     F2 28 02 F1 | 	add	local02, objptr
1b788     14 2B 0A FB | 	rdlong	local03, local02 wz
1b78c     14 4E 05 F1 | 	add	fp, #20
1b790     A7 2A 62 FC | 	wrlong	local03, fp
1b794                 | ' 
1b794                 | ' numpar=compiledline(lineptr_e).result.uresult
1b794                 | ' if numpar=0 then
1b794     14 4E 85 F1 | 	sub	fp, #20
1b798     47 00 00 FF 
1b79c     7C E4 85 F1 | 	sub	objptr, ##36476
1b7a0     50 00 90 5D |  if_ne	jmp	#LR__2162
1b7a4                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1b7a4     10 4E 05 F1 | 	add	fp, #16
1b7a8     A7 00 68 FC | 	wrlong	#0, fp
1b7ac     37 00 00 FF 
1b7b0     10 E4 05 F1 | 	add	objptr, ##28176
1b7b4     97 16 48 FB | 	callpa	#(@LR__2161-@LR__2160)>>2,fcache_load_ptr_
1b7b8                 | LR__2160
1b7b8     F2 12 02 FB | 	rdlong	arg01, objptr
1b7bc     A7 2A 02 FB | 	rdlong	local03, fp
1b7c0     06 2A 66 F0 | 	shl	local03, #6
1b7c4     15 13 02 F1 | 	add	arg01, local03
1b7c8     14 12 06 F1 | 	add	arg01, #20
1b7cc     09 01 58 FC | 	wrword	#0, arg01
1b7d0     A7 2A 02 FB | 	rdlong	local03, fp
1b7d4     01 2A 06 F1 | 	add	local03, #1
1b7d8     A7 2A 62 FC | 	wrlong	local03, fp
1b7dc     08 2A 56 F2 | 	cmps	local03, #8 wc
1b7e0     D4 FF 9F CD |  if_b	jmp	#LR__2160
1b7e4                 | LR__2161
1b7e4     37 00 00 FF 
1b7e8     10 E4 85 F1 | 	sub	objptr, ##28176
1b7ec     10 4E 85 F1 | 	sub	fp, #16
1b7f0     64 00 90 FD | 	jmp	#LR__2163
1b7f4                 | LR__2162
1b7f4     5C 1D BF FD | 	call	#_pop
1b7f8     FF 26 02 F6 | 	mov	local01, result3
1b7fc     A7 FA 61 FC | 	wrlong	result1, fp
1b800     04 4E 05 F1 | 	add	fp, #4
1b804     A7 FC 61 FC | 	wrlong	result2, fp
1b808     04 4E 05 F1 | 	add	fp, #4
1b80c     A7 26 62 FC | 	wrlong	local01, fp
1b810     08 4E 85 F1 | 	sub	fp, #8
1b814     A7 12 02 F6 | 	mov	arg01, fp
1b818     1C 1F BF FD | 	call	#_converttoint
1b81c     FD 2A 52 F6 | 	abs	local03, result1 wc
1b820     07 2A 06 F5 | 	and	local03, #7
1b824     15 29 82 F6 | 	negc	local02, local03
1b828     0C 4E 05 F1 | 	add	fp, #12
1b82c     A7 28 62 FC | 	wrlong	local02, fp
1b830     37 00 00 FF 
1b834     10 E4 05 F1 | 	add	objptr, ##28176
1b838     F2 12 02 FB | 	rdlong	arg01, objptr
1b83c     37 00 00 FF 
1b840     10 E4 85 F1 | 	sub	objptr, ##28176
1b844     0C 4E 85 F1 | 	sub	fp, #12
1b848     06 28 66 F0 | 	shl	local02, #6
1b84c     14 13 02 F1 | 	add	arg01, local02
1b850     14 12 06 F1 | 	add	arg01, #20
1b854     09 01 58 FC | 	wrword	#0, arg01
1b858                 | LR__2163
1b858     A7 F0 03 F6 | 	mov	ptra, fp
1b85c     B2 00 A0 FD | 	call	#popregs_
1b860                 | _do_shutup_ret
1b860     2D 00 64 FD | 	ret
1b864                 | 
1b864                 | ' 
1b864                 | ' ' ------------------ sin
1b864                 | ' 
1b864                 | ' sub do_sin
1b864                 | _do_sin
1b864     01 4A 05 F6 | 	mov	COUNT_, #1
1b868     A8 00 A0 FD | 	call	#pushregs_
1b86c     10 F0 07 F1 | 	add	ptra, #16
1b870     4A 00 00 FF 
1b874     80 E4 05 F1 | 	add	objptr, ##38016
1b878     F2 26 02 FB | 	rdlong	local01, objptr
1b87c     13 17 02 F6 | 	mov	arg03, local01
1b880     01 16 66 F0 | 	shl	arg03, #1
1b884     13 17 02 F1 | 	add	arg03, local01
1b888     02 16 66 F0 | 	shl	arg03, #2
1b88c     03 00 00 FF 
1b890     04 E4 85 F1 | 	sub	objptr, ##1540
1b894     F2 16 02 F1 | 	add	arg03, objptr
1b898     0B 17 02 FB | 	rdlong	arg03, arg03
1b89c     0C 4E 05 F1 | 	add	fp, #12
1b8a0     A7 16 62 FC | 	wrlong	arg03, fp
1b8a4                 | ' 
1b8a4                 | ' numpar=compiledline(lineptr_e).result.uresult
1b8a4                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1b8a4     0C 4E 85 F1 | 	sub	fp, #12
1b8a8     02 16 16 F2 | 	cmp	arg03, #2 wc
1b8ac     47 00 00 FF 
1b8b0     7C E4 85 F1 | 	sub	objptr, ##36476
1b8b4     0C 4E 05 C1 |  if_b	add	fp, #12
1b8b8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1b8bc     0C 4E 85 C1 |  if_b	sub	fp, #12
1b8c0     40 00 90 4D |  if_c_and_nz	jmp	#LR__2170
1b8c4     00 12 06 F6 | 	mov	arg01, #0
1b8c8     90 0B B1 FD | 	call	#__system___getiolock_0603
1b8cc     FD 12 02 F6 | 	mov	arg01, result1
1b8d0     60 AE B0 FD | 	call	#__system___lockmem
1b8d4     B6 01 00 FF 
1b8d8     E5 15 06 F6 | 	mov	arg02, ##@LR__5967
1b8dc     00 12 06 F6 | 	mov	arg01, #0
1b8e0     00 16 06 F6 | 	mov	arg03, #0
1b8e4     40 BB B0 FD | 	call	#__system___basic_print_string
1b8e8     00 12 06 F6 | 	mov	arg01, #0
1b8ec     6C 0B B1 FD | 	call	#__system___getiolock_0603
1b8f0     FD 00 68 FC | 	wrlong	#0, result1
1b8f4     27 12 06 F6 | 	mov	arg01, #39
1b8f8     00 14 06 F6 | 	mov	arg02, #0
1b8fc     48 74 B0 FD | 	call	#_printerror
1b900     64 00 90 FD | 	jmp	#LR__2171
1b904                 | LR__2170
1b904     4C 1C BF FD | 	call	#_pop
1b908     A7 FA 61 FC | 	wrlong	result1, fp
1b90c     04 4E 05 F1 | 	add	fp, #4
1b910     A7 FC 61 FC | 	wrlong	result2, fp
1b914     04 4E 05 F1 | 	add	fp, #4
1b918     A7 FE 61 FC | 	wrlong	result3, fp
1b91c     08 4E 85 F1 | 	sub	fp, #8
1b920     52 00 00 FF 
1b924     A8 E4 05 F1 | 	add	objptr, ##42152
1b928     F2 26 02 FB | 	rdlong	local01, objptr
1b92c     52 00 00 FF 
1b930     A8 E4 85 F1 | 	sub	objptr, ##42152
1b934     A7 12 02 F6 | 	mov	arg01, fp
1b938     B8 1E BF FD | 	call	#_converttofloat
1b93c     FD 14 02 F6 | 	mov	arg02, result1
1b940     13 13 02 F6 | 	mov	arg01, local01
1b944     64 DC B0 FD | 	call	#__system___float_mul
1b948     FD 12 02 F6 | 	mov	arg01, result1
1b94c     BC E5 B0 FD | 	call	#__system____builtin_sinf
1b950     A7 FA 61 FC | 	wrlong	result1, fp
1b954     08 4E 05 F1 | 	add	fp, #8
1b958     A7 3C 68 FC | 	wrlong	#30, fp
1b95c     08 4E 85 F1 | 	sub	fp, #8
1b960     A7 12 02 F6 | 	mov	arg01, fp
1b964     84 1C BF FD | 	call	#_push
1b968                 | LR__2171
1b968     A7 F0 03 F6 | 	mov	ptra, fp
1b96c     B2 00 A0 FD | 	call	#popregs_
1b970                 | _do_sin_ret
1b970     2D 00 64 FD | 	ret
1b974                 | 
1b974                 | ' 
1b974                 | ' ' ------------------ skip
1b974                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1b974                 | ' 
1b974                 | ' sub do_skip
1b974                 | _do_skip
1b974     4A 00 00 FF 
1b978     80 E4 05 F1 | 	add	objptr, ##38016
1b97c     F2 00 02 FB | 	rdlong	_var01, objptr
1b980     00 03 02 F6 | 	mov	_var02, _var01
1b984     01 02 66 F0 | 	shl	_var02, #1
1b988     00 03 02 F1 | 	add	_var02, _var01
1b98c     02 02 66 F0 | 	shl	_var02, #2
1b990     03 00 00 FF 
1b994     04 E4 85 F1 | 	sub	objptr, ##1540
1b998     F2 02 02 F1 | 	add	_var02, objptr
1b99c     01 03 02 FB | 	rdlong	_var02, _var02
1b9a0     01 02 86 F1 | 	sub	_var02, #1
1b9a4     03 00 00 FF 
1b9a8     04 E4 05 F1 | 	add	objptr, ##1540
1b9ac     F2 02 62 FC | 	wrlong	_var02, objptr
1b9b0     4A 00 00 FF 
1b9b4     80 E4 85 F1 | 	sub	objptr, ##38016
1b9b8                 | _do_skip_ret
1b9b8     2D 00 64 FD | 	ret
1b9bc                 | 
1b9bc                 | ' 
1b9bc                 | ' ' ------------------ sprite
1b9bc                 | ' 
1b9bc                 | ' sub do_sprite
1b9bc                 | _do_sprite
1b9bc     00 4A 05 F6 | 	mov	COUNT_, #0
1b9c0     A8 00 A0 FD | 	call	#pushregs_
1b9c4     30 F0 07 F1 | 	add	ptra, #48
1b9c8     88 1B BF FD | 	call	#_pop
1b9cc     FD 16 02 F6 | 	mov	arg03, result1
1b9d0     FE 14 02 F6 | 	mov	arg02, result2
1b9d4     FF 12 02 F6 | 	mov	arg01, result3
1b9d8     18 4E 05 F1 | 	add	fp, #24
1b9dc     A7 16 62 FC | 	wrlong	arg03, fp
1b9e0     04 4E 05 F1 | 	add	fp, #4
1b9e4     A7 14 62 FC | 	wrlong	arg02, fp
1b9e8     04 4E 05 F1 | 	add	fp, #4
1b9ec     A7 12 62 FC | 	wrlong	arg01, fp
1b9f0     20 4E 85 F1 | 	sub	fp, #32
1b9f4     5C 1B BF FD | 	call	#_pop
1b9f8     FD 16 02 F6 | 	mov	arg03, result1
1b9fc     FE 14 02 F6 | 	mov	arg02, result2
1ba00     FF 12 02 F6 | 	mov	arg01, result3
1ba04     0C 4E 05 F1 | 	add	fp, #12
1ba08     A7 16 62 FC | 	wrlong	arg03, fp
1ba0c     04 4E 05 F1 | 	add	fp, #4
1ba10     A7 14 62 FC | 	wrlong	arg02, fp
1ba14     04 4E 05 F1 | 	add	fp, #4
1ba18     A7 12 62 FC | 	wrlong	arg01, fp
1ba1c     14 4E 85 F1 | 	sub	fp, #20
1ba20     30 1B BF FD | 	call	#_pop
1ba24     FF 16 02 F6 | 	mov	arg03, result3
1ba28     A7 FA 61 FC | 	wrlong	result1, fp
1ba2c     04 4E 05 F1 | 	add	fp, #4
1ba30     A7 FC 61 FC | 	wrlong	result2, fp
1ba34     04 4E 05 F1 | 	add	fp, #4
1ba38     A7 16 62 FC | 	wrlong	arg03, fp
1ba3c     08 4E 85 F1 | 	sub	fp, #8
1ba40     A7 12 02 F6 | 	mov	arg01, fp
1ba44     F0 1C BF FD | 	call	#_converttoint
1ba48     24 4E 05 F1 | 	add	fp, #36
1ba4c     A7 FA 61 FC | 	wrlong	result1, fp
1ba50     18 4E 85 F1 | 	sub	fp, #24
1ba54     A7 12 02 F6 | 	mov	arg01, fp
1ba58     0C 4E 85 F1 | 	sub	fp, #12
1ba5c     D8 1C BF FD | 	call	#_converttoint
1ba60     28 4E 05 F1 | 	add	fp, #40
1ba64     A7 FA 61 FC | 	wrlong	result1, fp
1ba68     10 4E 85 F1 | 	sub	fp, #16
1ba6c     A7 12 02 F6 | 	mov	arg01, fp
1ba70     18 4E 85 F1 | 	sub	fp, #24
1ba74     C0 1C BF FD | 	call	#_converttoint
1ba78     2C 4E 05 F1 | 	add	fp, #44
1ba7c     A7 FA 61 FC | 	wrlong	result1, fp
1ba80     08 4E 85 F1 | 	sub	fp, #8
1ba84     A7 12 02 FB | 	rdlong	arg01, fp
1ba88     04 4E 05 F1 | 	add	fp, #4
1ba8c     A7 14 02 FB | 	rdlong	arg02, fp
1ba90     FD 16 02 F6 | 	mov	arg03, result1
1ba94     28 4E 85 F1 | 	sub	fp, #40
1ba98     8C 82 B0 FD | 	call	#_hg010b_spin2_setspritepos
1ba9c     A7 F0 03 F6 | 	mov	ptra, fp
1baa0     B2 00 A0 FD | 	call	#popregs_
1baa4                 | _do_sprite_ret
1baa4     2D 00 64 FD | 	ret
1baa8                 | 
1baa8                 | ' 
1baa8                 | ' ' ------------------ sqr
1baa8                 | ' 
1baa8                 | ' sub do_sqr
1baa8                 | _do_sqr
1baa8     01 4A 05 F6 | 	mov	COUNT_, #1
1baac     A8 00 A0 FD | 	call	#pushregs_
1bab0     10 F0 07 F1 | 	add	ptra, #16
1bab4     4A 00 00 FF 
1bab8     80 E4 05 F1 | 	add	objptr, ##38016
1babc     F2 26 02 FB | 	rdlong	local01, objptr
1bac0     13 17 02 F6 | 	mov	arg03, local01
1bac4     01 16 66 F0 | 	shl	arg03, #1
1bac8     13 17 02 F1 | 	add	arg03, local01
1bacc     02 16 66 F0 | 	shl	arg03, #2
1bad0     03 00 00 FF 
1bad4     04 E4 85 F1 | 	sub	objptr, ##1540
1bad8     F2 16 02 F1 | 	add	arg03, objptr
1badc     0B 17 02 FB | 	rdlong	arg03, arg03
1bae0     0C 4E 05 F1 | 	add	fp, #12
1bae4     A7 16 62 FC | 	wrlong	arg03, fp
1bae8                 | ' 
1bae8                 | ' numpar=compiledline(lineptr_e).result.uresult
1bae8                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1bae8     0C 4E 85 F1 | 	sub	fp, #12
1baec     02 16 16 F2 | 	cmp	arg03, #2 wc
1baf0     47 00 00 FF 
1baf4     7C E4 85 F1 | 	sub	objptr, ##36476
1baf8     0C 4E 05 C1 |  if_b	add	fp, #12
1bafc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1bb00     0C 4E 85 C1 |  if_b	sub	fp, #12
1bb04     40 00 90 4D |  if_c_and_nz	jmp	#LR__2180
1bb08     00 12 06 F6 | 	mov	arg01, #0
1bb0c     4C 09 B1 FD | 	call	#__system___getiolock_0603
1bb10     FD 12 02 F6 | 	mov	arg01, result1
1bb14     1C AC B0 FD | 	call	#__system___lockmem
1bb18     B6 01 00 FF 
1bb1c     EB 15 06 F6 | 	mov	arg02, ##@LR__5968
1bb20     00 12 06 F6 | 	mov	arg01, #0
1bb24     00 16 06 F6 | 	mov	arg03, #0
1bb28     FC B8 B0 FD | 	call	#__system___basic_print_string
1bb2c     00 12 06 F6 | 	mov	arg01, #0
1bb30     28 09 B1 FD | 	call	#__system___getiolock_0603
1bb34     FD 00 68 FC | 	wrlong	#0, result1
1bb38     27 12 06 F6 | 	mov	arg01, #39
1bb3c     00 14 06 F6 | 	mov	arg02, #0
1bb40     04 72 B0 FD | 	call	#_printerror
1bb44     48 00 90 FD | 	jmp	#LR__2181
1bb48                 | LR__2180
1bb48     08 1A BF FD | 	call	#_pop
1bb4c     FF 26 02 F6 | 	mov	local01, result3
1bb50     A7 FA 61 FC | 	wrlong	result1, fp
1bb54     04 4E 05 F1 | 	add	fp, #4
1bb58     A7 FC 61 FC | 	wrlong	result2, fp
1bb5c     04 4E 05 F1 | 	add	fp, #4
1bb60     A7 26 62 FC | 	wrlong	local01, fp
1bb64     08 4E 85 F1 | 	sub	fp, #8
1bb68     A7 12 02 F6 | 	mov	arg01, fp
1bb6c     84 1C BF FD | 	call	#_converttofloat
1bb70     FD 12 02 F6 | 	mov	arg01, result1
1bb74     5C D9 B0 FD | 	call	#__system___float_sqrt
1bb78     A7 FA 61 FC | 	wrlong	result1, fp
1bb7c     08 4E 05 F1 | 	add	fp, #8
1bb80     A7 3C 68 FC | 	wrlong	#30, fp
1bb84     08 4E 85 F1 | 	sub	fp, #8
1bb88     A7 12 02 F6 | 	mov	arg01, fp
1bb8c     5C 1A BF FD | 	call	#_push
1bb90                 | LR__2181
1bb90     A7 F0 03 F6 | 	mov	ptra, fp
1bb94     B2 00 A0 FD | 	call	#popregs_
1bb98                 | _do_sqr_ret
1bb98     2D 00 64 FD | 	ret
1bb9c                 | 
1bb9c                 | ' 
1bb9c                 | ' ' ------------------ stick
1bb9c                 | ' 
1bb9c                 | ' sub do_stick
1bb9c                 | _do_stick
1bb9c     01 4A 05 F6 | 	mov	COUNT_, #1
1bba0     A8 00 A0 FD | 	call	#pushregs_
1bba4     10 F0 07 F1 | 	add	ptra, #16
1bba8     4A 00 00 FF 
1bbac     80 E4 05 F1 | 	add	objptr, ##38016
1bbb0     F2 26 02 FB | 	rdlong	local01, objptr
1bbb4     13 17 02 F6 | 	mov	arg03, local01
1bbb8     01 16 66 F0 | 	shl	arg03, #1
1bbbc     13 17 02 F1 | 	add	arg03, local01
1bbc0     02 16 66 F0 | 	shl	arg03, #2
1bbc4     03 00 00 FF 
1bbc8     04 E4 85 F1 | 	sub	objptr, ##1540
1bbcc     F2 16 02 F1 | 	add	arg03, objptr
1bbd0     0B 17 02 FB | 	rdlong	arg03, arg03
1bbd4     0C 4E 05 F1 | 	add	fp, #12
1bbd8     A7 16 62 FC | 	wrlong	arg03, fp
1bbdc                 | ' 
1bbdc                 | ' numpar=compiledline(lineptr_e).result.uresult
1bbdc                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1bbdc     0C 4E 85 F1 | 	sub	fp, #12
1bbe0     02 16 16 F2 | 	cmp	arg03, #2 wc
1bbe4     47 00 00 FF 
1bbe8     7C E4 85 F1 | 	sub	objptr, ##36476
1bbec     40 00 90 CD |  if_b	jmp	#LR__2190
1bbf0     00 12 06 F6 | 	mov	arg01, #0
1bbf4     64 08 B1 FD | 	call	#__system___getiolock_0603
1bbf8     FD 12 02 F6 | 	mov	arg01, result1
1bbfc     34 AB B0 FD | 	call	#__system___lockmem
1bc00     B6 01 00 FF 
1bc04     F1 15 06 F6 | 	mov	arg02, ##@LR__5969
1bc08     00 12 06 F6 | 	mov	arg01, #0
1bc0c     00 16 06 F6 | 	mov	arg03, #0
1bc10     14 B8 B0 FD | 	call	#__system___basic_print_string
1bc14     00 12 06 F6 | 	mov	arg01, #0
1bc18     40 08 B1 FD | 	call	#__system___getiolock_0603
1bc1c     FD 00 68 FC | 	wrlong	#0, result1
1bc20     27 12 06 F6 | 	mov	arg01, #39
1bc24     00 14 06 F6 | 	mov	arg02, #0
1bc28     1C 71 B0 FD | 	call	#_printerror
1bc2c     F0 00 90 FD | 	jmp	#LR__2194
1bc30                 | LR__2190
1bc30                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1bc30     0C 4E 05 F1 | 	add	fp, #12
1bc34     A7 FE 09 FB | 	rdlong	result3, fp wz
1bc38     0C 4E 85 F1 | 	sub	fp, #12
1bc3c     30 00 90 5D |  if_ne	jmp	#LR__2191
1bc40     52 00 00 FF 
1bc44     1C E4 05 F1 | 	add	objptr, ##42012
1bc48     F2 26 02 FB | 	rdlong	local01, objptr
1bc4c     52 00 00 FF 
1bc50     1C E4 85 F1 | 	sub	objptr, ##42012
1bc54     A7 26 62 FC | 	wrlong	local01, fp
1bc58     08 4E 05 F1 | 	add	fp, #8
1bc5c     A7 3A 68 FC | 	wrlong	#29, fp
1bc60     08 4E 85 F1 | 	sub	fp, #8
1bc64     A7 12 02 F6 | 	mov	arg01, fp
1bc68     80 19 BF FD | 	call	#_push
1bc6c     B0 00 90 FD | 	jmp	#LR__2194
1bc70                 | LR__2191
1bc70     E0 18 BF FD | 	call	#_pop
1bc74     A7 FA 61 FC | 	wrlong	result1, fp
1bc78     04 4E 05 F1 | 	add	fp, #4
1bc7c     A7 FC 61 FC | 	wrlong	result2, fp
1bc80     04 4E 05 F1 | 	add	fp, #4
1bc84     A7 FE 61 FC | 	wrlong	result3, fp
1bc88                 | ' t1=pop()
1bc88                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1bc88     08 4E 85 F1 | 	sub	fp, #8
1bc8c     1C FE 0D F2 | 	cmp	result3, #28 wz
1bc90     08 4E 05 51 |  if_ne	add	fp, #8
1bc94     A7 26 02 5B |  if_ne	rdlong	local01, fp
1bc98     08 4E 85 51 |  if_ne	sub	fp, #8
1bc9c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1bca0     70 00 90 5D |  if_ne	jmp	#LR__2193
1bca4     A7 26 02 FB | 	rdlong	local01, fp
1bca8     52 00 00 FF 
1bcac     08 E5 05 F1 | 	add	objptr, ##42248
1bcb0     F2 26 62 FC | 	wrlong	local01, objptr
1bcb4                 | '   q=t1.result.uresult
1bcb4                 | '   if q<7 then 
1bcb4     52 00 00 FF 
1bcb8     08 E5 85 F1 | 	sub	objptr, ##42248
1bcbc     07 26 56 F2 | 	cmps	local01, #7 wc
1bcc0     40 00 90 3D |  if_ae	jmp	#LR__2192
1bcc4     52 00 00 FF 
1bcc8     08 E5 05 F1 | 	add	objptr, ##42248
1bccc     F2 26 02 FB | 	rdlong	local01, objptr
1bcd0     02 26 66 F0 | 	shl	local01, #2
1bcd4     EC E4 85 F1 | 	sub	objptr, #236
1bcd8     F2 26 02 F1 | 	add	local01, objptr
1bcdc     13 27 02 FB | 	rdlong	local01, local01
1bce0     A7 26 62 FC | 	wrlong	local01, fp
1bce4     08 4E 05 F1 | 	add	fp, #8
1bce8     A7 3A 68 FC | 	wrlong	#29, fp
1bcec     08 4E 85 F1 | 	sub	fp, #8
1bcf0     A7 12 02 F6 | 	mov	arg01, fp
1bcf4     52 00 00 FF 
1bcf8     1C E4 85 F1 | 	sub	objptr, ##42012
1bcfc     EC 18 BF FD | 	call	#_push
1bd00                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1bd00     1C 00 90 FD | 	jmp	#LR__2194
1bd04                 | LR__2192
1bd04     29 12 06 F6 | 	mov	arg01, #41
1bd08     00 14 06 F6 | 	mov	arg02, #0
1bd0c     38 70 B0 FD | 	call	#_printerror
1bd10                 | '      printerror(41) : return
1bd10     0C 00 90 FD | 	jmp	#LR__2194
1bd14                 | LR__2193
1bd14     29 12 06 F6 | 	mov	arg01, #41
1bd18     00 14 06 F6 | 	mov	arg02, #0
1bd1c     28 70 B0 FD | 	call	#_printerror
1bd20                 | LR__2194
1bd20     A7 F0 03 F6 | 	mov	ptra, fp
1bd24     B2 00 A0 FD | 	call	#popregs_
1bd28                 | _do_stick_ret
1bd28     2D 00 64 FD | 	ret
1bd2c                 | 
1bd2c                 | ' 
1bd2c                 | ' ' ------------------ strig
1bd2c                 | ' 
1bd2c                 | ' sub do_strig
1bd2c                 | _do_strig
1bd2c     01 4A 05 F6 | 	mov	COUNT_, #1
1bd30     A8 00 A0 FD | 	call	#pushregs_
1bd34     10 F0 07 F1 | 	add	ptra, #16
1bd38     4A 00 00 FF 
1bd3c     80 E4 05 F1 | 	add	objptr, ##38016
1bd40     F2 26 02 FB | 	rdlong	local01, objptr
1bd44     13 17 02 F6 | 	mov	arg03, local01
1bd48     01 16 66 F0 | 	shl	arg03, #1
1bd4c     13 17 02 F1 | 	add	arg03, local01
1bd50     02 16 66 F0 | 	shl	arg03, #2
1bd54     03 00 00 FF 
1bd58     04 E4 85 F1 | 	sub	objptr, ##1540
1bd5c     F2 16 02 F1 | 	add	arg03, objptr
1bd60     0B 17 02 FB | 	rdlong	arg03, arg03
1bd64     0C 4E 05 F1 | 	add	fp, #12
1bd68     A7 16 62 FC | 	wrlong	arg03, fp
1bd6c                 | ' 
1bd6c                 | ' numpar=compiledline(lineptr_e).result.uresult
1bd6c                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1bd6c     0C 4E 85 F1 | 	sub	fp, #12
1bd70     02 16 16 F2 | 	cmp	arg03, #2 wc
1bd74     47 00 00 FF 
1bd78     7C E4 85 F1 | 	sub	objptr, ##36476
1bd7c     40 00 90 CD |  if_b	jmp	#LR__2200
1bd80     00 12 06 F6 | 	mov	arg01, #0
1bd84     D4 06 B1 FD | 	call	#__system___getiolock_0603
1bd88     FD 12 02 F6 | 	mov	arg01, result1
1bd8c     A4 A9 B0 FD | 	call	#__system___lockmem
1bd90     B6 01 00 FF 
1bd94     F9 15 06 F6 | 	mov	arg02, ##@LR__5970
1bd98     00 12 06 F6 | 	mov	arg01, #0
1bd9c     00 16 06 F6 | 	mov	arg03, #0
1bda0     84 B6 B0 FD | 	call	#__system___basic_print_string
1bda4     00 12 06 F6 | 	mov	arg01, #0
1bda8     B0 06 B1 FD | 	call	#__system___getiolock_0603
1bdac     FD 00 68 FC | 	wrlong	#0, result1
1bdb0     27 12 06 F6 | 	mov	arg01, #39
1bdb4     00 14 06 F6 | 	mov	arg02, #0
1bdb8     8C 6F B0 FD | 	call	#_printerror
1bdbc     F0 00 90 FD | 	jmp	#LR__2204
1bdc0                 | LR__2200
1bdc0                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1bdc0     0C 4E 05 F1 | 	add	fp, #12
1bdc4     A7 FE 09 FB | 	rdlong	result3, fp wz
1bdc8     0C 4E 85 F1 | 	sub	fp, #12
1bdcc     30 00 90 5D |  if_ne	jmp	#LR__2201
1bdd0     52 00 00 FF 
1bdd4     38 E4 05 F1 | 	add	objptr, ##42040
1bdd8     F2 26 02 FB | 	rdlong	local01, objptr
1bddc     52 00 00 FF 
1bde0     38 E4 85 F1 | 	sub	objptr, ##42040
1bde4     A7 26 62 FC | 	wrlong	local01, fp
1bde8     08 4E 05 F1 | 	add	fp, #8
1bdec     A7 3A 68 FC | 	wrlong	#29, fp
1bdf0     08 4E 85 F1 | 	sub	fp, #8
1bdf4     A7 12 02 F6 | 	mov	arg01, fp
1bdf8     F0 17 BF FD | 	call	#_push
1bdfc     B0 00 90 FD | 	jmp	#LR__2204
1be00                 | LR__2201
1be00     50 17 BF FD | 	call	#_pop
1be04     A7 FA 61 FC | 	wrlong	result1, fp
1be08     04 4E 05 F1 | 	add	fp, #4
1be0c     A7 FC 61 FC | 	wrlong	result2, fp
1be10     04 4E 05 F1 | 	add	fp, #4
1be14     A7 FE 61 FC | 	wrlong	result3, fp
1be18                 | ' t1=pop()
1be18                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1be18     08 4E 85 F1 | 	sub	fp, #8
1be1c     1C FE 0D F2 | 	cmp	result3, #28 wz
1be20     08 4E 05 51 |  if_ne	add	fp, #8
1be24     A7 26 02 5B |  if_ne	rdlong	local01, fp
1be28     08 4E 85 51 |  if_ne	sub	fp, #8
1be2c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1be30     70 00 90 5D |  if_ne	jmp	#LR__2203
1be34     A7 26 02 FB | 	rdlong	local01, fp
1be38     52 00 00 FF 
1be3c     08 E5 05 F1 | 	add	objptr, ##42248
1be40     F2 26 62 FC | 	wrlong	local01, objptr
1be44                 | '   q=t1.result.uresult
1be44                 | '   if q<7 then 
1be44     52 00 00 FF 
1be48     08 E5 85 F1 | 	sub	objptr, ##42248
1be4c     07 26 56 F2 | 	cmps	local01, #7 wc
1be50     40 00 90 3D |  if_ae	jmp	#LR__2202
1be54     52 00 00 FF 
1be58     08 E5 05 F1 | 	add	objptr, ##42248
1be5c     F2 26 02 FB | 	rdlong	local01, objptr
1be60     02 26 66 F0 | 	shl	local01, #2
1be64     D0 E4 85 F1 | 	sub	objptr, #208
1be68     F2 26 02 F1 | 	add	local01, objptr
1be6c     13 27 02 FB | 	rdlong	local01, local01
1be70     A7 26 62 FC | 	wrlong	local01, fp
1be74     08 4E 05 F1 | 	add	fp, #8
1be78     A7 3A 68 FC | 	wrlong	#29, fp
1be7c     08 4E 85 F1 | 	sub	fp, #8
1be80     A7 12 02 F6 | 	mov	arg01, fp
1be84     52 00 00 FF 
1be88     38 E4 85 F1 | 	sub	objptr, ##42040
1be8c     5C 17 BF FD | 	call	#_push
1be90                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1be90     1C 00 90 FD | 	jmp	#LR__2204
1be94                 | LR__2202
1be94     29 12 06 F6 | 	mov	arg01, #41
1be98     00 14 06 F6 | 	mov	arg02, #0
1be9c     A8 6E B0 FD | 	call	#_printerror
1bea0                 | '      printerror(41) : return
1bea0     0C 00 90 FD | 	jmp	#LR__2204
1bea4                 | LR__2203
1bea4     29 12 06 F6 | 	mov	arg01, #41
1bea8     00 14 06 F6 | 	mov	arg02, #0
1beac     98 6E B0 FD | 	call	#_printerror
1beb0                 | LR__2204
1beb0     A7 F0 03 F6 | 	mov	ptra, fp
1beb4     B2 00 A0 FD | 	call	#popregs_
1beb8                 | _do_strig_ret
1beb8     2D 00 64 FD | 	ret
1bebc                 | 
1bebc                 | ' 
1bebc                 | ' ' ------------------ tan
1bebc                 | ' 
1bebc                 | ' sub do_tan
1bebc                 | _do_tan
1bebc     01 4A 05 F6 | 	mov	COUNT_, #1
1bec0     A8 00 A0 FD | 	call	#pushregs_
1bec4     10 F0 07 F1 | 	add	ptra, #16
1bec8     4A 00 00 FF 
1becc     80 E4 05 F1 | 	add	objptr, ##38016
1bed0     F2 26 02 FB | 	rdlong	local01, objptr
1bed4     13 17 02 F6 | 	mov	arg03, local01
1bed8     01 16 66 F0 | 	shl	arg03, #1
1bedc     13 17 02 F1 | 	add	arg03, local01
1bee0     02 16 66 F0 | 	shl	arg03, #2
1bee4     03 00 00 FF 
1bee8     04 E4 85 F1 | 	sub	objptr, ##1540
1beec     F2 16 02 F1 | 	add	arg03, objptr
1bef0     0B 17 02 FB | 	rdlong	arg03, arg03
1bef4     0C 4E 05 F1 | 	add	fp, #12
1bef8     A7 16 62 FC | 	wrlong	arg03, fp
1befc                 | ' 
1befc                 | ' numpar=compiledline(lineptr_e).result.uresult
1befc                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1befc     0C 4E 85 F1 | 	sub	fp, #12
1bf00     02 16 16 F2 | 	cmp	arg03, #2 wc
1bf04     47 00 00 FF 
1bf08     7C E4 85 F1 | 	sub	objptr, ##36476
1bf0c     0C 4E 05 C1 |  if_b	add	fp, #12
1bf10     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1bf14     0C 4E 85 C1 |  if_b	sub	fp, #12
1bf18     40 00 90 4D |  if_c_and_nz	jmp	#LR__2210
1bf1c     00 12 06 F6 | 	mov	arg01, #0
1bf20     38 05 B1 FD | 	call	#__system___getiolock_0603
1bf24     FD 12 02 F6 | 	mov	arg01, result1
1bf28     08 A8 B0 FD | 	call	#__system___lockmem
1bf2c     B7 01 00 FF 
1bf30     01 14 06 F6 | 	mov	arg02, ##@LR__5971
1bf34     00 12 06 F6 | 	mov	arg01, #0
1bf38     00 16 06 F6 | 	mov	arg03, #0
1bf3c     E8 B4 B0 FD | 	call	#__system___basic_print_string
1bf40     00 12 06 F6 | 	mov	arg01, #0
1bf44     14 05 B1 FD | 	call	#__system___getiolock_0603
1bf48     FD 00 68 FC | 	wrlong	#0, result1
1bf4c     27 12 06 F6 | 	mov	arg01, #39
1bf50     00 14 06 F6 | 	mov	arg02, #0
1bf54     F0 6D B0 FD | 	call	#_printerror
1bf58     64 00 90 FD | 	jmp	#LR__2211
1bf5c                 | LR__2210
1bf5c     F4 15 BF FD | 	call	#_pop
1bf60     A7 FA 61 FC | 	wrlong	result1, fp
1bf64     04 4E 05 F1 | 	add	fp, #4
1bf68     A7 FC 61 FC | 	wrlong	result2, fp
1bf6c     04 4E 05 F1 | 	add	fp, #4
1bf70     A7 FE 61 FC | 	wrlong	result3, fp
1bf74     08 4E 85 F1 | 	sub	fp, #8
1bf78     52 00 00 FF 
1bf7c     A8 E4 05 F1 | 	add	objptr, ##42152
1bf80     F2 26 02 FB | 	rdlong	local01, objptr
1bf84     52 00 00 FF 
1bf88     A8 E4 85 F1 | 	sub	objptr, ##42152
1bf8c     A7 12 02 F6 | 	mov	arg01, fp
1bf90     60 18 BF FD | 	call	#_converttofloat
1bf94     FD 14 02 F6 | 	mov	arg02, result1
1bf98     13 13 02 F6 | 	mov	arg01, local01
1bf9c     0C D6 B0 FD | 	call	#__system___float_mul
1bfa0     FD 12 02 F6 | 	mov	arg01, result1
1bfa4     B0 E0 B0 FD | 	call	#__system____builtin_tanf
1bfa8     A7 FA 61 FC | 	wrlong	result1, fp
1bfac     08 4E 05 F1 | 	add	fp, #8
1bfb0     A7 3C 68 FC | 	wrlong	#30, fp
1bfb4     08 4E 85 F1 | 	sub	fp, #8
1bfb8     A7 12 02 F6 | 	mov	arg01, fp
1bfbc     2C 16 BF FD | 	call	#_push
1bfc0                 | LR__2211
1bfc0     A7 F0 03 F6 | 	mov	ptra, fp
1bfc4     B2 00 A0 FD | 	call	#popregs_
1bfc8                 | _do_tan_ret
1bfc8     2D 00 64 FD | 	ret
1bfcc                 | 
1bfcc                 | ' 
1bfcc                 | ' ' ------------------ val
1bfcc                 | ' 
1bfcc                 | ' sub do_val
1bfcc                 | _do_val
1bfcc     03 4A 05 F6 | 	mov	COUNT_, #3
1bfd0     A8 00 A0 FD | 	call	#pushregs_
1bfd4     20 F0 07 F1 | 	add	ptra, #32
1bfd8     4A 00 00 FF 
1bfdc     80 E4 05 F1 | 	add	objptr, ##38016
1bfe0     F2 16 02 FB | 	rdlong	arg03, objptr
1bfe4     0B 27 02 F6 | 	mov	local01, arg03
1bfe8     01 26 66 F0 | 	shl	local01, #1
1bfec     0B 27 02 F1 | 	add	local01, arg03
1bff0     02 26 66 F0 | 	shl	local01, #2
1bff4     03 00 00 FF 
1bff8     04 E4 85 F1 | 	sub	objptr, ##1540
1bffc     F2 26 02 F1 | 	add	local01, objptr
1c000     13 17 02 FB | 	rdlong	arg03, local01
1c004     0C 4E 05 F1 | 	add	fp, #12
1c008     A7 16 62 FC | 	wrlong	arg03, fp
1c00c                 | ' 
1c00c                 | ' numpar=compiledline(lineptr_e).result.uresult
1c00c                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1c00c     0C 4E 85 F1 | 	sub	fp, #12
1c010     02 16 16 F2 | 	cmp	arg03, #2 wc
1c014     47 00 00 FF 
1c018     7C E4 85 F1 | 	sub	objptr, ##36476
1c01c     0C 4E 05 C1 |  if_b	add	fp, #12
1c020     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c024     0C 4E 85 C1 |  if_b	sub	fp, #12
1c028     40 00 90 4D |  if_c_and_nz	jmp	#LR__2220
1c02c     00 12 06 F6 | 	mov	arg01, #0
1c030     28 04 B1 FD | 	call	#__system___getiolock_0603
1c034     FD 12 02 F6 | 	mov	arg01, result1
1c038     F8 A6 B0 FD | 	call	#__system___lockmem
1c03c     B7 01 00 FF 
1c040     07 14 06 F6 | 	mov	arg02, ##@LR__5972
1c044     00 12 06 F6 | 	mov	arg01, #0
1c048     00 16 06 F6 | 	mov	arg03, #0
1c04c     D8 B3 B0 FD | 	call	#__system___basic_print_string
1c050     00 12 06 F6 | 	mov	arg01, #0
1c054     04 04 B1 FD | 	call	#__system___getiolock_0603
1c058     FD 00 68 FC | 	wrlong	#0, result1
1c05c     27 12 06 F6 | 	mov	arg01, #39
1c060     00 14 06 F6 | 	mov	arg02, #0
1c064     E0 6C B0 FD | 	call	#_printerror
1c068     60 02 90 FD | 	jmp	#LR__2233
1c06c                 | LR__2220
1c06c     E4 14 BF FD | 	call	#_pop
1c070     FF 16 02 F6 | 	mov	arg03, result3
1c074     A7 FA 61 FC | 	wrlong	result1, fp
1c078     04 4E 05 F1 | 	add	fp, #4
1c07c     A7 FC 61 FC | 	wrlong	result2, fp
1c080     04 4E 05 F1 | 	add	fp, #4
1c084     A7 16 62 FC | 	wrlong	arg03, fp
1c088                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1c088     08 4E 85 F1 | 	sub	fp, #8
1c08c     2B 16 0E F2 | 	cmp	arg03, #43 wz
1c090     18 00 90 5D |  if_ne	jmp	#LR__2221
1c094     A7 12 02 FB | 	rdlong	arg01, fp
1c098     30 16 BF FD | 	call	#_convertstring
1c09c     A7 FA 61 FC | 	wrlong	result1, fp
1c0a0     08 4E 05 F1 | 	add	fp, #8
1c0a4     A7 3E 68 FC | 	wrlong	#31, fp
1c0a8     08 4E 85 F1 | 	sub	fp, #8
1c0ac                 | LR__2221
1c0ac                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1c0ac     08 4E 05 F1 | 	add	fp, #8
1c0b0     A7 16 02 FB | 	rdlong	arg03, fp
1c0b4     08 4E 85 F1 | 	sub	fp, #8
1c0b8     1F 16 0E F2 | 	cmp	arg03, #31 wz
1c0bc     40 00 90 AD |  if_e	jmp	#LR__2222
1c0c0     00 12 06 F6 | 	mov	arg01, #0
1c0c4     94 03 B1 FD | 	call	#__system___getiolock_0603
1c0c8     FD 12 02 F6 | 	mov	arg01, result1
1c0cc     64 A6 B0 FD | 	call	#__system___lockmem
1c0d0     B7 01 00 FF 
1c0d4     0D 14 06 F6 | 	mov	arg02, ##@LR__5973
1c0d8     00 12 06 F6 | 	mov	arg01, #0
1c0dc     00 16 06 F6 | 	mov	arg03, #0
1c0e0     44 B3 B0 FD | 	call	#__system___basic_print_string
1c0e4     00 12 06 F6 | 	mov	arg01, #0
1c0e8     70 03 B1 FD | 	call	#__system___getiolock_0603
1c0ec     FD 00 68 FC | 	wrlong	#0, result1
1c0f0     0F 12 06 F6 | 	mov	arg01, #15
1c0f4     00 14 06 F6 | 	mov	arg02, #0
1c0f8     4C 6C B0 FD | 	call	#_printerror
1c0fc     CC 01 90 FD | 	jmp	#LR__2233
1c100                 | LR__2222
1c100                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1c100     A7 12 02 FB | 	rdlong	arg01, fp
1c104     01 14 06 F6 | 	mov	arg02, #1
1c108     A4 C6 B0 FD | 	call	#__system__Left_S
1c10c     FD 12 02 F6 | 	mov	arg01, result1
1c110     B7 01 00 FF 
1c114     13 14 06 F6 | 	mov	arg02, ##@LR__5974
1c118     40 A6 B0 FD | 	call	#__system___string_cmp
1c11c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c120     48 00 90 5D |  if_ne	jmp	#LR__2225
1c124     B7 01 00 FF 
1c128     15 26 06 F6 | 	mov	local01, ##@LR__5975
1c12c     A7 16 02 FB | 	rdlong	arg03, fp
1c130     0B 13 02 F6 | 	mov	arg01, arg03
1c134     09 29 02 F6 | 	mov	local02, arg01
1c138     97 06 48 FB | 	callpa	#(@LR__2224-@LR__2223)>>2,fcache_load_ptr_
1c13c                 | LR__2223
1c13c     14 FB C9 FA | 	rdbyte	result1, local02 wz
1c140     01 28 06 51 |  if_ne	add	local02, #1
1c144     F4 FF 9F 5D |  if_ne	jmp	#LR__2223
1c148                 | LR__2224
1c148     09 29 82 F1 | 	sub	local02, arg01
1c14c     14 15 02 F6 | 	mov	arg02, local02
1c150     01 14 86 F1 | 	sub	arg02, #1
1c154     0B 13 02 F6 | 	mov	arg01, arg03
1c158     DC C6 B0 FD | 	call	#__system__Right_S
1c15c     FD 14 02 F6 | 	mov	arg02, result1
1c160     13 13 02 F6 | 	mov	arg01, local01
1c164     28 A6 B0 FD | 	call	#__system___string_concat
1c168     A7 FA 61 FC | 	wrlong	result1, fp
1c16c                 | LR__2225
1c16c                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1c16c     A7 12 02 FB | 	rdlong	arg01, fp
1c170     01 14 06 F6 | 	mov	arg02, #1
1c174     38 C6 B0 FD | 	call	#__system__Left_S
1c178     FD 12 02 F6 | 	mov	arg01, result1
1c17c     B7 01 00 FF 
1c180     18 14 06 F6 | 	mov	arg02, ##@LR__5976
1c184     D4 A5 B0 FD | 	call	#__system___string_cmp
1c188     00 FA 0D F2 | 	cmp	result1, #0 wz
1c18c     48 00 90 5D |  if_ne	jmp	#LR__2228
1c190     B7 01 00 FF 
1c194     1A 26 06 F6 | 	mov	local01, ##@LR__5977
1c198     A7 16 02 FB | 	rdlong	arg03, fp
1c19c     0B 13 02 F6 | 	mov	arg01, arg03
1c1a0     09 29 02 F6 | 	mov	local02, arg01
1c1a4     97 06 48 FB | 	callpa	#(@LR__2227-@LR__2226)>>2,fcache_load_ptr_
1c1a8                 | LR__2226
1c1a8     14 FB C9 FA | 	rdbyte	result1, local02 wz
1c1ac     01 28 06 51 |  if_ne	add	local02, #1
1c1b0     F4 FF 9F 5D |  if_ne	jmp	#LR__2226
1c1b4                 | LR__2227
1c1b4     09 29 82 F1 | 	sub	local02, arg01
1c1b8     14 15 02 F6 | 	mov	arg02, local02
1c1bc     01 14 86 F1 | 	sub	arg02, #1
1c1c0     0B 13 02 F6 | 	mov	arg01, arg03
1c1c4     70 C6 B0 FD | 	call	#__system__Right_S
1c1c8     FD 14 02 F6 | 	mov	arg02, result1
1c1cc     13 13 02 F6 | 	mov	arg01, local01
1c1d0     BC A5 B0 FD | 	call	#__system___string_concat
1c1d4     A7 FA 61 FC | 	wrlong	result1, fp
1c1d8                 | LR__2228
1c1d8     A7 12 02 FB | 	rdlong	arg01, fp
1c1dc     D8 DB B0 FD | 	call	#__system____builtin_atof
1c1e0     1C 4E 05 F1 | 	add	fp, #28
1c1e4     A7 FA 61 FC | 	wrlong	result1, fp
1c1e8     1C 4E 85 F1 | 	sub	fp, #28
1c1ec     A7 12 02 FB | 	rdlong	arg01, fp
1c1f0     00 14 06 F6 | 	mov	arg02, #0
1c1f4     2C DA B0 FD | 	call	#__system____builtin_atoi
1c1f8     18 4E 05 F1 | 	add	fp, #24
1c1fc     A7 FA 61 FC | 	wrlong	result1, fp
1c200                 | ' fval=val(t1.result.sresult)
1c200                 | ' ival=val%(t1.result.sresult)
1c200                 | ' if fval=ival then
1c200     04 4E 05 F1 | 	add	fp, #4
1c204     A7 26 02 FB | 	rdlong	local01, fp
1c208     1C 4E 85 F1 | 	sub	fp, #28
1c20c     FD 12 52 F6 | 	abs	arg01, result1 wc
1c210     1F 2A C6 C9 |  if_b	decod	local03, #31
1c214     00 2A 06 36 |  if_ae	mov	local03, #0
1c218     8C CF B0 FD | 	call	#__system___float_fromuns
1c21c     15 FB 61 F5 | 	xor	result1, local03
1c220     FD 14 02 F6 | 	mov	arg02, result1
1c224     13 13 02 F6 | 	mov	arg01, local01
1c228     01 16 06 F6 | 	mov	arg03, #1
1c22c     B0 D7 B0 FD | 	call	#__system___float_cmp
1c230     00 FA 0D F2 | 	cmp	result1, #0 wz
1c234     20 00 90 5D |  if_ne	jmp	#LR__2229
1c238     18 4E 05 F1 | 	add	fp, #24
1c23c     A7 26 02 FB | 	rdlong	local01, fp
1c240     18 4E 85 F1 | 	sub	fp, #24
1c244     A7 26 62 FC | 	wrlong	local01, fp
1c248     08 4E 05 F1 | 	add	fp, #8
1c24c     A7 38 68 FC | 	wrlong	#28, fp
1c250     08 4E 85 F1 | 	sub	fp, #8
1c254     6C 00 90 FD | 	jmp	#LR__2232
1c258                 | LR__2229
1c258                 | '   if fval=0 andalso ival<>0 then
1c258     1C 4E 05 F1 | 	add	fp, #28
1c25c     A7 12 02 FB | 	rdlong	arg01, fp
1c260     1C 4E 85 F1 | 	sub	fp, #28
1c264     00 14 06 F6 | 	mov	arg02, #0
1c268     01 16 06 F6 | 	mov	arg03, #1
1c26c     70 D7 B0 FD | 	call	#__system___float_cmp
1c270     00 FA 0D F2 | 	cmp	result1, #0 wz
1c274     30 00 90 5D |  if_ne	jmp	#LR__2230
1c278     18 4E 05 F1 | 	add	fp, #24
1c27c     A7 26 0A FB | 	rdlong	local01, fp wz
1c280     18 4E 85 F1 | 	sub	fp, #24
1c284     20 00 90 AD |  if_e	jmp	#LR__2230
1c288     18 4E 05 F1 | 	add	fp, #24
1c28c     A7 26 02 FB | 	rdlong	local01, fp
1c290     18 4E 85 F1 | 	sub	fp, #24
1c294     A7 26 62 FC | 	wrlong	local01, fp
1c298     08 4E 05 F1 | 	add	fp, #8
1c29c     A7 38 68 FC | 	wrlong	#28, fp
1c2a0     08 4E 85 F1 | 	sub	fp, #8
1c2a4     1C 00 90 FD | 	jmp	#LR__2231
1c2a8                 | LR__2230
1c2a8     1C 4E 05 F1 | 	add	fp, #28
1c2ac     A7 26 02 FB | 	rdlong	local01, fp
1c2b0     1C 4E 85 F1 | 	sub	fp, #28
1c2b4     A7 26 62 FC | 	wrlong	local01, fp
1c2b8     08 4E 05 F1 | 	add	fp, #8
1c2bc     A7 3C 68 FC | 	wrlong	#30, fp
1c2c0     08 4E 85 F1 | 	sub	fp, #8
1c2c4                 | LR__2231
1c2c4                 | LR__2232
1c2c4     A7 12 02 F6 | 	mov	arg01, fp
1c2c8     20 13 BF FD | 	call	#_push
1c2cc                 | LR__2233
1c2cc     A7 F0 03 F6 | 	mov	ptra, fp
1c2d0     B2 00 A0 FD | 	call	#popregs_
1c2d4                 | _do_val_ret
1c2d4     2D 00 64 FD | 	ret
1c2d8                 | 
1c2d8                 | ' 
1c2d8                 | ' ' ------------------ waitclock
1c2d8                 | ' 
1c2d8                 | ' sub do_waitclock
1c2d8                 | _do_waitclock
1c2d8     52 00 00 FF 
1c2dc     94 E4 05 F1 | 	add	objptr, ##42132
1c2e0     F2 00 02 FB | 	rdlong	_var01, objptr
1c2e4                 | ' c=hkcnt
1c2e4                 | ' do: loop until hkcnt<>c
1c2e4                 | LR__2240
1c2e4     F2 02 02 FB | 	rdlong	_var02, objptr
1c2e8     00 03 0A F2 | 	cmp	_var02, _var01 wz
1c2ec     F4 FF 9F AD |  if_e	jmp	#LR__2240
1c2f0     52 00 00 FF 
1c2f4     94 E4 85 F1 | 	sub	objptr, ##42132
1c2f8                 | _do_waitclock_ret
1c2f8     2D 00 64 FD | 	ret
1c2fc                 | 
1c2fc                 | ' 
1c2fc                 | ' ' ------------------ waitms
1c2fc                 | ' 
1c2fc                 | ' sub do_waitms
1c2fc                 | _do_waitms
1c2fc     01 4A 05 F6 | 	mov	COUNT_, #1
1c300     A8 00 A0 FD | 	call	#pushregs_
1c304     18 F0 07 F1 | 	add	ptra, #24
1c308     48 12 BF FD | 	call	#_pop
1c30c     A7 FA 61 FC | 	wrlong	result1, fp
1c310     04 4E 05 F1 | 	add	fp, #4
1c314     A7 FC 61 FC | 	wrlong	result2, fp
1c318     04 4E 05 F1 | 	add	fp, #4
1c31c     A7 FE 61 FC | 	wrlong	result3, fp
1c320     08 4E 85 F1 | 	sub	fp, #8
1c324     A7 12 02 F6 | 	mov	arg01, fp
1c328     0C 14 BF FD | 	call	#_converttoint
1c32c     0C 4E 05 F1 | 	add	fp, #12
1c330     A7 FA 61 FC | 	wrlong	result1, fp
1c334                 | ' 
1c334                 | ' t1=pop()  
1c334                 | ' t=converttoint(t1)
1c334                 | ' if t<0 then return
1c334     0C 4E 85 F1 | 	sub	fp, #12
1c338     00 FA 55 F2 | 	cmps	result1, #0 wc
1c33c     E4 00 90 CD |  if_b	jmp	#LR__2256
1c340                 | ' if t < 1000 then 
1c340     0C 4E 05 F1 | 	add	fp, #12
1c344     A7 12 02 FB | 	rdlong	arg01, fp
1c348     0C 4E 85 F1 | 	sub	fp, #12
1c34c     01 00 00 FF 
1c350     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1c354     14 00 90 3D |  if_ae	jmp	#LR__2250
1c358     0C 4E 05 F1 | 	add	fp, #12
1c35c     A7 12 02 FB | 	rdlong	arg01, fp
1c360     0C 4E 85 F1 | 	sub	fp, #12
1c364     C0 A6 B0 FD | 	call	#__system___waitms
1c368     B8 00 90 FD | 	jmp	#LR__2255
1c36c                 | LR__2250
1c36c     10 4E 05 F1 | 	add	fp, #16
1c370     A7 02 68 FC | 	wrlong	#1, fp
1c374     04 4E 85 F1 | 	sub	fp, #4
1c378     A7 12 02 FB | 	rdlong	arg01, fp
1c37c     09 13 52 F6 | 	abs	arg01, arg01 wc
1c380     01 00 00 FF 
1c384     E8 13 16 FD | 	qdiv	arg01, ##1000
1c388                 | '   for i=1 to t/1000
1c388     0C 4E 85 F1 | 	sub	fp, #12
1c38c     18 26 62 FD | 	getqx	local01
1c390     13 27 82 F6 | 	negc	local01, local01
1c394     01 26 06 F1 | 	add	local01, #1
1c398                 | LR__2251
1c398     10 4E 05 F1 | 	add	fp, #16
1c39c     A7 12 02 FB | 	rdlong	arg01, fp
1c3a0     10 4E 85 F1 | 	sub	fp, #16
1c3a4     13 13 52 F2 | 	cmps	arg01, local01 wc
1c3a8     54 00 90 3D |  if_ae	jmp	#LR__2254
1c3ac     01 00 00 FF 
1c3b0     E8 13 06 F6 | 	mov	arg01, ##1000
1c3b4     70 A6 B0 FD | 	call	#__system___waitms
1c3b8                 | '     waitms(1000)
1c3b8                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1c3b8     E0 12 06 F6 | 	mov	arg01, #224
1c3bc     7C 9A B0 FD | 	call	#_usbnew_spin2_keystate
1c3c0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c3c4     10 00 90 5D |  if_ne	jmp	#LR__2252
1c3c8     E4 12 06 F6 | 	mov	arg01, #228
1c3cc     6C 9A B0 FD | 	call	#_usbnew_spin2_keystate
1c3d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c3d4     10 00 90 AD |  if_e	jmp	#LR__2253
1c3d8                 | LR__2252
1c3d8     06 12 06 F6 | 	mov	arg01, #6
1c3dc     5C 9A B0 FD | 	call	#_usbnew_spin2_keystate
1c3e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c3e4     3C 00 90 5D |  if_ne	jmp	#LR__2256
1c3e8                 | LR__2253
1c3e8     10 4E 05 F1 | 	add	fp, #16
1c3ec     A7 12 02 FB | 	rdlong	arg01, fp
1c3f0     01 12 06 F1 | 	add	arg01, #1
1c3f4     A7 12 62 FC | 	wrlong	arg01, fp
1c3f8     10 4E 85 F1 | 	sub	fp, #16
1c3fc     98 FF 9F FD | 	jmp	#LR__2251
1c400                 | LR__2254
1c400     0C 4E 05 F1 | 	add	fp, #12
1c404     A7 26 02 FB | 	rdlong	local01, fp
1c408     13 27 52 F6 | 	abs	local01, local01 wc
1c40c     01 00 00 FF 
1c410     E8 27 16 FD | 	qdiv	local01, ##1000
1c414     0C 4E 85 F1 | 	sub	fp, #12
1c418     19 26 62 FD | 	getqy	local01
1c41c     13 13 82 F6 | 	negc	arg01, local01
1c420     04 A6 B0 FD | 	call	#__system___waitms
1c424                 | LR__2255
1c424                 | LR__2256
1c424     A7 F0 03 F6 | 	mov	ptra, fp
1c428     B2 00 A0 FD | 	call	#popregs_
1c42c                 | _do_waitms_ret
1c42c     2D 00 64 FD | 	ret
1c430                 | 
1c430                 | ' 
1c430                 | ' ' ------------------ waitvbl
1c430                 | ' 
1c430                 | ' sub do_waitvbl
1c430                 | _do_waitvbl
1c430     01 12 06 F6 | 	mov	arg01, #1
1c434     08 86 B0 FD | 	call	#_hg010b_spin2_waitvbl
1c438                 | _do_waitvbl_ret
1c438     2D 00 64 FD | 	ret
1c43c                 | 
1c43c                 | ' 
1c43c                 | ' ' ------------------ wrpin
1c43c                 | ' 
1c43c                 | ' sub do_wrpin
1c43c                 | _do_wrpin
1c43c     01 4A 05 F6 | 	mov	COUNT_, #1
1c440     A8 00 A0 FD | 	call	#pushregs_
1c444     18 F0 07 F1 | 	add	ptra, #24
1c448     08 11 BF FD | 	call	#_pop
1c44c     FD 14 02 F6 | 	mov	arg02, result1
1c450     FE 12 02 F6 | 	mov	arg01, result2
1c454     FF 26 02 F6 | 	mov	local01, result3
1c458     A7 14 62 FC | 	wrlong	arg02, fp
1c45c     04 4E 05 F1 | 	add	fp, #4
1c460     A7 12 62 FC | 	wrlong	arg01, fp
1c464     04 4E 05 F1 | 	add	fp, #4
1c468     A7 26 62 FC | 	wrlong	local01, fp
1c46c     08 4E 85 F1 | 	sub	fp, #8
1c470     E0 10 BF FD | 	call	#_pop
1c474     FF 26 02 F6 | 	mov	local01, result3
1c478     0C 4E 05 F1 | 	add	fp, #12
1c47c     A7 FA 61 FC | 	wrlong	result1, fp
1c480     04 4E 05 F1 | 	add	fp, #4
1c484     A7 FC 61 FC | 	wrlong	result2, fp
1c488     04 4E 05 F1 | 	add	fp, #4
1c48c     A7 26 62 FC | 	wrlong	local01, fp
1c490     08 4E 85 F1 | 	sub	fp, #8
1c494     A7 12 02 F6 | 	mov	arg01, fp
1c498     0C 4E 85 F1 | 	sub	fp, #12
1c49c     98 12 BF FD | 	call	#_converttoint
1c4a0     FD 26 02 F6 | 	mov	local01, result1
1c4a4     A7 12 02 F6 | 	mov	arg01, fp
1c4a8     8C 12 BF FD | 	call	#_converttoint
1c4ac     13 FB 01 FC | 	wrpin	result1, local01
1c4b0     A7 F0 03 F6 | 	mov	ptra, fp
1c4b4     B2 00 A0 FD | 	call	#popregs_
1c4b8                 | _do_wrpin_ret
1c4b8     2D 00 64 FD | 	ret
1c4bc                 | 
1c4bc                 | ' 
1c4bc                 | ' ' ------------------ wxpin
1c4bc                 | ' 
1c4bc                 | ' sub do_wxpin
1c4bc                 | _do_wxpin
1c4bc     01 4A 05 F6 | 	mov	COUNT_, #1
1c4c0     A8 00 A0 FD | 	call	#pushregs_
1c4c4     18 F0 07 F1 | 	add	ptra, #24
1c4c8     88 10 BF FD | 	call	#_pop
1c4cc     FD 14 02 F6 | 	mov	arg02, result1
1c4d0     FE 12 02 F6 | 	mov	arg01, result2
1c4d4     FF 26 02 F6 | 	mov	local01, result3
1c4d8     A7 14 62 FC | 	wrlong	arg02, fp
1c4dc     04 4E 05 F1 | 	add	fp, #4
1c4e0     A7 12 62 FC | 	wrlong	arg01, fp
1c4e4     04 4E 05 F1 | 	add	fp, #4
1c4e8     A7 26 62 FC | 	wrlong	local01, fp
1c4ec     08 4E 85 F1 | 	sub	fp, #8
1c4f0     60 10 BF FD | 	call	#_pop
1c4f4     FF 26 02 F6 | 	mov	local01, result3
1c4f8     0C 4E 05 F1 | 	add	fp, #12
1c4fc     A7 FA 61 FC | 	wrlong	result1, fp
1c500     04 4E 05 F1 | 	add	fp, #4
1c504     A7 FC 61 FC | 	wrlong	result2, fp
1c508     04 4E 05 F1 | 	add	fp, #4
1c50c     A7 26 62 FC | 	wrlong	local01, fp
1c510     08 4E 85 F1 | 	sub	fp, #8
1c514     A7 12 02 F6 | 	mov	arg01, fp
1c518     0C 4E 85 F1 | 	sub	fp, #12
1c51c     18 12 BF FD | 	call	#_converttoint
1c520     FD 26 02 F6 | 	mov	local01, result1
1c524     A7 12 02 F6 | 	mov	arg01, fp
1c528     0C 12 BF FD | 	call	#_converttoint
1c52c     13 FB 11 FC | 	wxpin	result1, local01
1c530     A7 F0 03 F6 | 	mov	ptra, fp
1c534     B2 00 A0 FD | 	call	#popregs_
1c538                 | _do_wxpin_ret
1c538     2D 00 64 FD | 	ret
1c53c                 | 
1c53c                 | ' 
1c53c                 | ' ' ------------------ wypin
1c53c                 | ' 
1c53c                 | ' sub do_wypin
1c53c                 | _do_wypin
1c53c     01 4A 05 F6 | 	mov	COUNT_, #1
1c540     A8 00 A0 FD | 	call	#pushregs_
1c544     18 F0 07 F1 | 	add	ptra, #24
1c548     08 10 BF FD | 	call	#_pop
1c54c     FD 14 02 F6 | 	mov	arg02, result1
1c550     FE 12 02 F6 | 	mov	arg01, result2
1c554     FF 26 02 F6 | 	mov	local01, result3
1c558     A7 14 62 FC | 	wrlong	arg02, fp
1c55c     04 4E 05 F1 | 	add	fp, #4
1c560     A7 12 62 FC | 	wrlong	arg01, fp
1c564     04 4E 05 F1 | 	add	fp, #4
1c568     A7 26 62 FC | 	wrlong	local01, fp
1c56c     08 4E 85 F1 | 	sub	fp, #8
1c570     E0 0F BF FD | 	call	#_pop
1c574     FF 26 02 F6 | 	mov	local01, result3
1c578     0C 4E 05 F1 | 	add	fp, #12
1c57c     A7 FA 61 FC | 	wrlong	result1, fp
1c580     04 4E 05 F1 | 	add	fp, #4
1c584     A7 FC 61 FC | 	wrlong	result2, fp
1c588     04 4E 05 F1 | 	add	fp, #4
1c58c     A7 26 62 FC | 	wrlong	local01, fp
1c590     08 4E 85 F1 | 	sub	fp, #8
1c594     A7 12 02 F6 | 	mov	arg01, fp
1c598     0C 4E 85 F1 | 	sub	fp, #12
1c59c     98 11 BF FD | 	call	#_converttoint
1c5a0     FD 26 02 F6 | 	mov	local01, result1
1c5a4     A7 12 02 F6 | 	mov	arg01, fp
1c5a8     8C 11 BF FD | 	call	#_converttoint
1c5ac     13 FB 21 FC | 	wypin	result1, local01
1c5b0     A7 F0 03 F6 | 	mov	ptra, fp
1c5b4     B2 00 A0 FD | 	call	#popregs_
1c5b8                 | _do_wypin_ret
1c5b8     2D 00 64 FD | 	ret
1c5bc                 | 
1c5bc                 | ' 
1c5bc                 | ' 
1c5bc                 | ' 
1c5bc                 | ' 
1c5bc                 | ' 
1c5bc                 | ' 
1c5bc                 | ' 
1c5bc                 | ' 
1c5bc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c5bc                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1c5bc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c5bc                 | ' 
1c5bc                 | ' 
1c5bc                 | ' '------------------ Assign
1c5bc                 | ' 
1c5bc                 | ' sub do_assign
1c5bc                 | _do_assign
1c5bc     05 4A 05 F6 | 	mov	COUNT_, #5
1c5c0     A8 00 A0 FD | 	call	#pushregs_
1c5c4     44 F0 07 F1 | 	add	ptra, #68
1c5c8     4A 00 00 FF 
1c5cc     80 E4 05 F1 | 	add	objptr, ##38016
1c5d0     F2 16 02 FB | 	rdlong	arg03, objptr
1c5d4     0B 15 02 F6 | 	mov	arg02, arg03
1c5d8     01 14 66 F0 | 	shl	arg02, #1
1c5dc     0B 15 02 F1 | 	add	arg02, arg03
1c5e0     02 14 66 F0 | 	shl	arg02, #2
1c5e4     03 00 00 FF 
1c5e8     04 E4 85 F1 | 	sub	objptr, ##1540
1c5ec     F2 14 02 F1 | 	add	arg02, objptr
1c5f0     0A 15 02 FB | 	rdlong	arg02, arg02
1c5f4     18 4E 05 F1 | 	add	fp, #24
1c5f8     A7 14 62 FC | 	wrlong	arg02, fp
1c5fc                 | ' 
1c5fc                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1c5fc                 | ' if variables(varnum).vartype<array_no_type then 
1c5fc     18 4E 85 F1 | 	sub	fp, #24
1c600     04 14 66 F0 | 	shl	arg02, #4
1c604     32 00 00 FF 
1c608     84 E4 85 F1 | 	sub	objptr, ##25732
1c60c     F2 14 02 F1 | 	add	arg02, objptr
1c610     0C 14 06 F1 | 	add	arg02, #12
1c614     0A 17 02 FB | 	rdlong	arg03, arg02
1c618     00 17 16 F2 | 	cmp	arg03, #256 wc
1c61c     14 00 00 FF 
1c620     F8 E5 85 F1 | 	sub	objptr, ##10744
1c624     18 01 90 3D |  if_ae	jmp	#LR__2260
1c628     28 0F BF FD | 	call	#_pop
1c62c     A7 FA 61 FC | 	wrlong	result1, fp
1c630     04 4E 05 F1 | 	add	fp, #4
1c634     A7 FC 61 FC | 	wrlong	result2, fp
1c638     04 4E 05 F1 | 	add	fp, #4
1c63c     A7 FE 61 FC | 	wrlong	result3, fp
1c640     08 4E 85 F1 | 	sub	fp, #8
1c644     A7 16 02 FB | 	rdlong	arg03, fp
1c648     04 4E 05 F1 | 	add	fp, #4
1c64c     A7 14 02 FB | 	rdlong	arg02, fp
1c650     14 4E 05 F1 | 	add	fp, #20
1c654     A7 12 02 FB | 	rdlong	arg01, fp
1c658     04 12 66 F0 | 	shl	arg01, #4
1c65c     14 00 00 FF 
1c660     F8 E5 05 F1 | 	add	objptr, ##10744
1c664     F2 12 02 F1 | 	add	arg01, objptr
1c668     04 12 06 F1 | 	add	arg01, #4
1c66c     09 17 62 FC | 	wrlong	arg03, arg01
1c670     A7 16 02 FB | 	rdlong	arg03, fp
1c674     04 16 66 F0 | 	shl	arg03, #4
1c678     F2 16 02 F1 | 	add	arg03, objptr
1c67c     08 16 06 F1 | 	add	arg03, #8
1c680     0B 15 62 FC | 	wrlong	arg02, arg03
1c684     A7 16 02 FB | 	rdlong	arg03, fp
1c688     04 16 66 F0 | 	shl	arg03, #4
1c68c     F2 16 02 F1 | 	add	arg03, objptr
1c690     10 4E 85 F1 | 	sub	fp, #16
1c694     A7 14 02 FB | 	rdlong	arg02, fp
1c698     0C 16 06 F1 | 	add	arg03, #12
1c69c     0B 15 62 FC | 	wrlong	arg02, arg03
1c6a0                 | '   t1=pop() 
1c6a0                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1c6a0                 | '   if variables(varnum).vartype<>result_string2 then return
1c6a0     10 4E 05 F1 | 	add	fp, #16
1c6a4     A7 16 02 FB | 	rdlong	arg03, fp
1c6a8     18 4E 85 F1 | 	sub	fp, #24
1c6ac     04 16 66 F0 | 	shl	arg03, #4
1c6b0     F2 16 02 F1 | 	add	arg03, objptr
1c6b4     0C 16 06 F1 | 	add	arg03, #12
1c6b8     0B 17 02 FB | 	rdlong	arg03, arg03
1c6bc     2B 16 0E F2 | 	cmp	arg03, #43 wz
1c6c0     14 00 00 FF 
1c6c4     F8 E5 85 F1 | 	sub	objptr, ##10744
1c6c8     EC 04 90 5D |  if_ne	jmp	#LR__2283
1c6cc     18 4E 05 F1 | 	add	fp, #24
1c6d0     A7 16 02 FB | 	rdlong	arg03, fp
1c6d4     0B 27 02 F6 | 	mov	local01, arg03
1c6d8     04 26 66 F0 | 	shl	local01, #4
1c6dc     14 00 00 FF 
1c6e0     F8 E5 05 F1 | 	add	objptr, ##10744
1c6e4     F2 26 02 F1 | 	add	local01, objptr
1c6e8     18 4E 85 F1 | 	sub	fp, #24
1c6ec     04 16 66 F0 | 	shl	arg03, #4
1c6f0     F2 16 02 F1 | 	add	arg03, objptr
1c6f4     04 16 06 F1 | 	add	arg03, #4
1c6f8     0B 13 02 FB | 	rdlong	arg01, arg03
1c6fc     14 00 00 FF 
1c700     F8 E5 85 F1 | 	sub	objptr, ##10744
1c704     C4 0F BF FD | 	call	#_convertstring
1c708     04 26 06 F1 | 	add	local01, #4
1c70c     13 FB 61 FC | 	wrlong	result1, local01
1c710     18 4E 05 F1 | 	add	fp, #24
1c714     A7 26 02 FB | 	rdlong	local01, fp
1c718     18 4E 85 F1 | 	sub	fp, #24
1c71c     04 26 66 F0 | 	shl	local01, #4
1c720     14 00 00 FF 
1c724     F8 E5 05 F1 | 	add	objptr, ##10744
1c728     F2 26 02 F1 | 	add	local01, objptr
1c72c     0C 26 06 F1 | 	add	local01, #12
1c730     13 3F 68 FC | 	wrlong	#31, local01
1c734                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1c734                 | '   variables(varnum).vartype=result_string
1c734                 | '   return
1c734     14 00 00 FF 
1c738     F8 E5 85 F1 | 	sub	objptr, ##10744
1c73c     78 04 90 FD | 	jmp	#LR__2283
1c740                 | LR__2260
1c740                 | ' for i=0 to 2 : arrid(i)=0 : next i
1c740     1C 4E 05 F1 | 	add	fp, #28
1c744     A7 00 68 FC | 	wrlong	#0, fp
1c748     97 16 48 FB | 	callpa	#(@LR__2262-@LR__2261)>>2,fcache_load_ptr_
1c74c                 | LR__2261
1c74c     A7 26 02 FB | 	rdlong	local01, fp
1c750     02 26 66 F0 | 	shl	local01, #2
1c754     18 4E 05 F1 | 	add	fp, #24
1c758     A7 26 02 F1 | 	add	local01, fp
1c75c     13 01 68 FC | 	wrlong	#0, local01
1c760     18 4E 85 F1 | 	sub	fp, #24
1c764     A7 26 02 FB | 	rdlong	local01, fp
1c768     01 26 06 F1 | 	add	local01, #1
1c76c     A7 26 62 FC | 	wrlong	local01, fp
1c770     03 26 16 F2 | 	cmp	local01, #3 wc
1c774     D4 FF 9F CD |  if_b	jmp	#LR__2261
1c778                 | LR__2262
1c778     4A 00 00 FF 
1c77c     80 E4 05 F1 | 	add	objptr, ##38016
1c780     F2 16 02 FB | 	rdlong	arg03, objptr
1c784     0B 27 02 F6 | 	mov	local01, arg03
1c788     01 26 66 F0 | 	shl	local01, #1
1c78c     0B 27 02 F1 | 	add	local01, arg03
1c790     02 26 66 F0 | 	shl	local01, #2
1c794     03 00 00 FF 
1c798     04 E4 85 F1 | 	sub	objptr, ##1540
1c79c     F2 26 02 F1 | 	add	local01, objptr
1c7a0     04 26 06 F1 | 	add	local01, #4
1c7a4     13 29 02 FB | 	rdlong	local02, local01
1c7a8     04 4E 05 F1 | 	add	fp, #4
1c7ac     A7 28 62 FC | 	wrlong	local02, fp
1c7b0     20 4E 85 F1 | 	sub	fp, #32
1c7b4     47 00 00 FF 
1c7b8     7C E4 85 F1 | 	sub	objptr, ##36476
1c7bc     94 0D BF FD | 	call	#_pop
1c7c0     A7 FA 61 FC | 	wrlong	result1, fp
1c7c4     04 4E 05 F1 | 	add	fp, #4
1c7c8     A7 FC 61 FC | 	wrlong	result2, fp
1c7cc     04 4E 05 F1 | 	add	fp, #4
1c7d0     A7 FE 61 FC | 	wrlong	result3, fp
1c7d4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1c7d4                 | ' t1=pop() ' var value
1c7d4                 | ' if numpar>0 then
1c7d4     18 4E 05 F1 | 	add	fp, #24
1c7d8     A7 2A 02 FB | 	rdlong	local03, fp
1c7dc     20 4E 85 F1 | 	sub	fp, #32
1c7e0     01 2A 16 F2 | 	cmp	local03, #1 wc
1c7e4     78 00 90 CD |  if_b	jmp	#LR__2265
1c7e8                 | '   for i=numpar to 1 step -1
1c7e8     20 4E 05 F1 | 	add	fp, #32
1c7ec     A7 2C 0A FB | 	rdlong	local04, fp wz
1c7f0     04 4E 85 F1 | 	sub	fp, #4
1c7f4     A7 2C 62 FC | 	wrlong	local04, fp
1c7f8     1C 4E 85 F1 | 	sub	fp, #28
1c7fc     60 00 90 AD |  if_e	jmp	#LR__2264
1c800                 | LR__2263
1c800     50 0D BF FD | 	call	#_pop
1c804     0C 4E 05 F1 | 	add	fp, #12
1c808     A7 FA 61 FC | 	wrlong	result1, fp
1c80c     04 4E 05 F1 | 	add	fp, #4
1c810     A7 FC 61 FC | 	wrlong	result2, fp
1c814     04 4E 05 F1 | 	add	fp, #4
1c818     A7 FE 61 FC | 	wrlong	result3, fp
1c81c     08 4E 05 F1 | 	add	fp, #8
1c820     A7 2A 02 FB | 	rdlong	local03, fp
1c824     01 2A 86 F1 | 	sub	local03, #1
1c828     02 2A 66 F0 | 	shl	local03, #2
1c82c     18 4E 05 F1 | 	add	fp, #24
1c830     A7 2A 02 F1 | 	add	local03, fp
1c834     28 4E 85 F1 | 	sub	fp, #40
1c838     A7 12 02 F6 | 	mov	arg01, fp
1c83c     0C 4E 85 F1 | 	sub	fp, #12
1c840     F4 0E BF FD | 	call	#_converttoint
1c844     15 FB 61 FC | 	wrlong	result1, local03
1c848     1C 4E 05 F1 | 	add	fp, #28
1c84c     A7 2C 02 FB | 	rdlong	local04, fp
1c850     01 2C 8E F1 | 	sub	local04, #1 wz
1c854     A7 2C 62 FC | 	wrlong	local04, fp
1c858     1C 4E 85 F1 | 	sub	fp, #28
1c85c     A0 FF 9F 5D |  if_ne	jmp	#LR__2263
1c860                 | LR__2264
1c860                 | LR__2265
1c860     18 4E 05 F1 | 	add	fp, #24
1c864     A7 26 02 FB | 	rdlong	local01, fp
1c868     04 26 66 F0 | 	shl	local01, #4
1c86c     14 00 00 FF 
1c870     F8 E5 05 F1 | 	add	objptr, ##10744
1c874     F2 26 02 F1 | 	add	local01, objptr
1c878     04 26 06 F1 | 	add	local01, #4
1c87c     13 13 02 FB | 	rdlong	arg01, local01
1c880     0C 4E 05 F1 | 	add	fp, #12
1c884     A7 12 62 FC | 	wrlong	arg01, fp
1c888     24 4E 85 F1 | 	sub	fp, #36
1c88c     14 00 00 FF 
1c890     F8 E5 85 F1 | 	sub	objptr, ##10744
1c894     80 67 B0 FD | 	call	#_pslpeek
1c898     FD 2C 32 F9 | 	getword	local04, result1, #0
1c89c     28 4E 05 F1 | 	add	fp, #40
1c8a0     A7 2C 62 FC | 	wrlong	local04, fp
1c8a4     04 4E 85 F1 | 	sub	fp, #4
1c8a8     A7 12 02 FB | 	rdlong	arg01, fp
1c8ac     24 4E 85 F1 | 	sub	fp, #36
1c8b0     02 12 06 F1 | 	add	arg01, #2
1c8b4     08 67 B0 FD | 	call	#_pspeek
1c8b8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c8bc     2C 4E 05 F1 | 	add	fp, #44
1c8c0     A7 FA 61 FC | 	wrlong	result1, fp
1c8c4                 | ' esize=pspeek(arrptr+2)
1c8c4                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1c8c4     08 4E 85 F1 | 	sub	fp, #8
1c8c8     A7 12 02 FB | 	rdlong	arg01, fp
1c8cc     24 4E 85 F1 | 	sub	fp, #36
1c8d0     04 12 06 F1 | 	add	arg01, #4
1c8d4     40 67 B0 FD | 	call	#_pslpeek
1c8d8     FD 2C 02 F6 | 	mov	local04, result1
1c8dc     34 4E 05 F1 | 	add	fp, #52
1c8e0     A7 26 02 FB | 	rdlong	local01, fp
1c8e4     34 4E 85 F1 | 	sub	fp, #52
1c8e8     16 27 12 F2 | 	cmp	local01, local04 wc
1c8ec     54 00 90 3D |  if_ae	jmp	#LR__2266
1c8f0     24 4E 05 F1 | 	add	fp, #36
1c8f4     A7 12 02 FB | 	rdlong	arg01, fp
1c8f8     24 4E 85 F1 | 	sub	fp, #36
1c8fc     08 12 06 F1 | 	add	arg01, #8
1c900     14 67 B0 FD | 	call	#_pslpeek
1c904     FD 26 02 F6 | 	mov	local01, result1
1c908     38 4E 05 F1 | 	add	fp, #56
1c90c     A7 2C 02 FB | 	rdlong	local04, fp
1c910     38 4E 85 F1 | 	sub	fp, #56
1c914     13 2D 12 F2 | 	cmp	local04, local01 wc
1c918     28 00 90 3D |  if_ae	jmp	#LR__2266
1c91c     24 4E 05 F1 | 	add	fp, #36
1c920     A7 12 02 FB | 	rdlong	arg01, fp
1c924     24 4E 85 F1 | 	sub	fp, #36
1c928     0C 12 06 F1 | 	add	arg01, #12
1c92c     E8 66 B0 FD | 	call	#_pslpeek
1c930     3C 4E 05 F1 | 	add	fp, #60
1c934     A7 2C 02 FB | 	rdlong	local04, fp
1c938     3C 4E 85 F1 | 	sub	fp, #60
1c93c     FD 2C 12 F2 | 	cmp	local04, result1 wc
1c940     10 00 90 CD |  if_b	jmp	#LR__2267
1c944                 | LR__2266
1c944     31 12 06 F6 | 	mov	arg01, #49
1c948     00 14 06 F6 | 	mov	arg02, #0
1c94c     F8 63 B0 FD | 	call	#_printerror
1c950     64 02 90 FD | 	jmp	#LR__2283
1c954                 | LR__2267
1c954     24 4E 05 F1 | 	add	fp, #36
1c958     A7 12 02 FB | 	rdlong	arg01, fp
1c95c     09 2D 02 F6 | 	mov	local04, arg01
1c960     10 2C 06 F1 | 	add	local04, #16
1c964     24 4E 85 F1 | 	sub	fp, #36
1c968     04 12 06 F1 | 	add	arg01, #4
1c96c     A8 66 B0 FD | 	call	#_pslpeek
1c970     FD 26 02 F6 | 	mov	local01, result1
1c974     38 4E 05 F1 | 	add	fp, #56
1c978     A7 28 02 FB | 	rdlong	local02, fp
1c97c     14 27 02 FD | 	qmul	local01, local02
1c980     04 4E 85 F1 | 	sub	fp, #4
1c984     A7 2A 02 FB | 	rdlong	local03, fp
1c988     10 4E 85 F1 | 	sub	fp, #16
1c98c     A7 12 02 FB | 	rdlong	arg01, fp
1c990     24 4E 85 F1 | 	sub	fp, #36
1c994     08 12 06 F1 | 	add	arg01, #8
1c998     18 28 62 FD | 	getqx	local02
1c99c     14 2B 02 F1 | 	add	local03, local02
1c9a0     74 66 B0 FD | 	call	#_pslpeek
1c9a4     FD 28 02 F6 | 	mov	local02, result1
1c9a8     24 4E 05 F1 | 	add	fp, #36
1c9ac     A7 12 02 FB | 	rdlong	arg01, fp
1c9b0     24 4E 85 F1 | 	sub	fp, #36
1c9b4     04 12 06 F1 | 	add	arg01, #4
1c9b8     5C 66 B0 FD | 	call	#_pslpeek
1c9bc     FD 28 02 FD | 	qmul	local02, result1
1c9c0     3C 4E 05 F1 | 	add	fp, #60
1c9c4     A7 28 02 FB | 	rdlong	local02, fp
1c9c8     18 26 62 FD | 	getqx	local01
1c9cc     14 27 02 FD | 	qmul	local01, local02
1c9d0     10 4E 85 F1 | 	sub	fp, #16
1c9d4     A7 28 02 FB | 	rdlong	local02, fp
1c9d8     18 26 62 FD | 	getqx	local01
1c9dc     13 2B 02 F1 | 	add	local03, local01
1c9e0     15 29 02 FD | 	qmul	local02, local03
1c9e4     04 4E 05 F1 | 	add	fp, #4
1c9e8                 | ' 
1c9e8                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1c9e8                 | ' select case arrtype
1c9e8     18 2A 62 FD | 	getqx	local03
1c9ec     15 2D 02 F1 | 	add	local04, local03
1c9f0     A7 2C 62 FC | 	wrlong	local04, fp
1c9f4     08 4E 85 F1 | 	sub	fp, #8
1c9f8     A7 2E 02 FB | 	rdlong	local05, fp
1c9fc     28 4E 85 F1 | 	sub	fp, #40
1ca00     00 2F 86 F1 | 	sub	local05, #256
1ca04     0C 2E 26 F3 | 	fle	local05, #12
1ca08     30 2E 62 FD | 	jmprel	local05
1ca0c                 | LR__2268
1ca0c     30 00 90 FD | 	jmp	#LR__2269
1ca10     58 00 90 FD | 	jmp	#LR__2270
1ca14     6C 00 90 FD | 	jmp	#LR__2271
1ca18     80 00 90 FD | 	jmp	#LR__2272
1ca1c     B0 00 90 FD | 	jmp	#LR__2273
1ca20     E0 00 90 FD | 	jmp	#LR__2274
1ca24     F4 00 90 FD | 	jmp	#LR__2275
1ca28     08 01 90 FD | 	jmp	#LR__2276
1ca2c     1C 01 90 FD | 	jmp	#LR__2277
1ca30     30 01 90 FD | 	jmp	#LR__2278
1ca34     44 01 90 FD | 	jmp	#LR__2279
1ca38     58 01 90 FD | 	jmp	#LR__2280
1ca3c     6C 01 90 FD | 	jmp	#LR__2281
1ca40                 | LR__2269
1ca40     A7 12 02 F6 | 	mov	arg01, fp
1ca44     30 4E 05 F1 | 	add	fp, #48
1ca48     A7 14 02 FB | 	rdlong	arg02, fp
1ca4c     30 4E 85 F1 | 	sub	fp, #48
1ca50     0C 16 06 F6 | 	mov	arg03, #12
1ca54     0B 00 00 FF 
1ca58     CC E4 05 F1 | 	add	objptr, ##5836
1ca5c     E8 90 B0 FD | 	call	#_psram_spin2_write
1ca60     0B 00 00 FF 
1ca64     CC E4 85 F1 | 	sub	objptr, ##5836
1ca68     4C 01 90 FD | 	jmp	#LR__2282
1ca6c                 | LR__2270
1ca6c     30 4E 05 F1 | 	add	fp, #48
1ca70     A7 12 02 FB | 	rdlong	arg01, fp
1ca74     30 4E 85 F1 | 	sub	fp, #48
1ca78     A7 14 02 FB | 	rdlong	arg02, fp
1ca7c     F8 64 B0 FD | 	call	#_pspoke
1ca80     34 01 90 FD | 	jmp	#LR__2282
1ca84                 | LR__2271
1ca84     30 4E 05 F1 | 	add	fp, #48
1ca88     A7 12 02 FB | 	rdlong	arg01, fp
1ca8c     30 4E 85 F1 | 	sub	fp, #48
1ca90     A7 14 02 FB | 	rdlong	arg02, fp
1ca94     E0 64 B0 FD | 	call	#_pspoke
1ca98     1C 01 90 FD | 	jmp	#LR__2282
1ca9c                 | LR__2272
1ca9c     30 4E 05 F1 | 	add	fp, #48
1caa0     A7 12 02 FB | 	rdlong	arg01, fp
1caa4     30 4E 85 F1 | 	sub	fp, #48
1caa8     A7 14 02 FB | 	rdlong	arg02, fp
1caac     C8 64 B0 FD | 	call	#_pspoke
1cab0     30 4E 05 F1 | 	add	fp, #48
1cab4     A7 12 02 FB | 	rdlong	arg01, fp
1cab8     30 4E 85 F1 | 	sub	fp, #48
1cabc     01 12 06 F1 | 	add	arg01, #1
1cac0     A7 14 02 FB | 	rdlong	arg02, fp
1cac4     08 14 46 F0 | 	shr	arg02, #8
1cac8     AC 64 B0 FD | 	call	#_pspoke
1cacc     E8 00 90 FD | 	jmp	#LR__2282
1cad0                 | LR__2273
1cad0     30 4E 05 F1 | 	add	fp, #48
1cad4     A7 12 02 FB | 	rdlong	arg01, fp
1cad8     30 4E 85 F1 | 	sub	fp, #48
1cadc     A7 14 02 FB | 	rdlong	arg02, fp
1cae0     94 64 B0 FD | 	call	#_pspoke
1cae4     30 4E 05 F1 | 	add	fp, #48
1cae8     A7 12 02 FB | 	rdlong	arg01, fp
1caec     30 4E 85 F1 | 	sub	fp, #48
1caf0     01 12 06 F1 | 	add	arg01, #1
1caf4     A7 14 02 FB | 	rdlong	arg02, fp
1caf8     08 14 46 F0 | 	shr	arg02, #8
1cafc     78 64 B0 FD | 	call	#_pspoke
1cb00     B4 00 90 FD | 	jmp	#LR__2282
1cb04                 | LR__2274
1cb04     30 4E 05 F1 | 	add	fp, #48
1cb08     A7 12 02 FB | 	rdlong	arg01, fp
1cb0c     30 4E 85 F1 | 	sub	fp, #48
1cb10     A7 14 02 FB | 	rdlong	arg02, fp
1cb14     D0 63 B0 FD | 	call	#_pslpoke
1cb18     9C 00 90 FD | 	jmp	#LR__2282
1cb1c                 | LR__2275
1cb1c     30 4E 05 F1 | 	add	fp, #48
1cb20     A7 12 02 FB | 	rdlong	arg01, fp
1cb24     30 4E 85 F1 | 	sub	fp, #48
1cb28     A7 14 02 FB | 	rdlong	arg02, fp
1cb2c     B8 63 B0 FD | 	call	#_pslpoke
1cb30     84 00 90 FD | 	jmp	#LR__2282
1cb34                 | LR__2276
1cb34     30 4E 05 F1 | 	add	fp, #48
1cb38     A7 12 02 FB | 	rdlong	arg01, fp
1cb3c     30 4E 85 F1 | 	sub	fp, #48
1cb40     A7 14 02 FB | 	rdlong	arg02, fp
1cb44     A0 63 B0 FD | 	call	#_pslpoke
1cb48     6C 00 90 FD | 	jmp	#LR__2282
1cb4c                 | LR__2277
1cb4c     30 4E 05 F1 | 	add	fp, #48
1cb50     A7 12 02 FB | 	rdlong	arg01, fp
1cb54     30 4E 85 F1 | 	sub	fp, #48
1cb58     A7 14 02 FB | 	rdlong	arg02, fp
1cb5c     88 63 B0 FD | 	call	#_pslpoke
1cb60     54 00 90 FD | 	jmp	#LR__2282
1cb64                 | LR__2278
1cb64     30 4E 05 F1 | 	add	fp, #48
1cb68     A7 12 02 FB | 	rdlong	arg01, fp
1cb6c     30 4E 85 F1 | 	sub	fp, #48
1cb70     A7 14 02 FB | 	rdlong	arg02, fp
1cb74     70 63 B0 FD | 	call	#_pslpoke
1cb78     3C 00 90 FD | 	jmp	#LR__2282
1cb7c                 | LR__2279
1cb7c     30 4E 05 F1 | 	add	fp, #48
1cb80     A7 12 02 FB | 	rdlong	arg01, fp
1cb84     30 4E 85 F1 | 	sub	fp, #48
1cb88     A7 14 02 FB | 	rdlong	arg02, fp
1cb8c     58 63 B0 FD | 	call	#_pslpoke
1cb90     24 00 90 FD | 	jmp	#LR__2282
1cb94                 | LR__2280
1cb94     30 4E 05 F1 | 	add	fp, #48
1cb98     A7 12 02 FB | 	rdlong	arg01, fp
1cb9c     30 4E 85 F1 | 	sub	fp, #48
1cba0     A7 14 02 FB | 	rdlong	arg02, fp
1cba4     40 63 B0 FD | 	call	#_pslpoke
1cba8     0C 00 90 FD | 	jmp	#LR__2282
1cbac                 | LR__2281
1cbac     32 12 06 F6 | 	mov	arg01, #50
1cbb0     00 14 06 F6 | 	mov	arg02, #0
1cbb4     90 61 B0 FD | 	call	#_printerror
1cbb8                 | LR__2282
1cbb8                 | LR__2283
1cbb8     A7 F0 03 F6 | 	mov	ptra, fp
1cbbc     B2 00 A0 FD | 	call	#popregs_
1cbc0                 | _do_assign_ret
1cbc0     2D 00 64 FD | 	ret
1cbc4                 | 
1cbc4                 | ' 
1cbc4                 | ' 
1cbc4                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1cbc4                 | ' 
1cbc4                 | ' sub do_getvar
1cbc4                 | _do_getvar
1cbc4     04 4A 05 F6 | 	mov	COUNT_, #4
1cbc8     A8 00 A0 FD | 	call	#pushregs_
1cbcc     3C F0 07 F1 | 	add	ptra, #60
1cbd0                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1cbd0     4A 00 00 FF 
1cbd4     80 E4 05 F1 | 	add	objptr, ##38016
1cbd8     F2 26 02 FB | 	rdlong	local01, objptr
1cbdc     13 17 02 F6 | 	mov	arg03, local01
1cbe0     01 16 66 F0 | 	shl	arg03, #1
1cbe4     13 17 02 F1 | 	add	arg03, local01
1cbe8     02 16 66 F0 | 	shl	arg03, #2
1cbec     03 00 00 FF 
1cbf0     04 E4 85 F1 | 	sub	objptr, ##1540
1cbf4     F2 16 02 F1 | 	add	arg03, objptr
1cbf8     04 16 06 F1 | 	add	arg03, #4
1cbfc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1cc00     47 00 00 FF 
1cc04     7C E4 85 F1 | 	sub	objptr, ##36476
1cc08     C4 00 90 5D |  if_ne	jmp	#LR__2291
1cc0c     4A 00 00 FF 
1cc10     80 E4 05 F1 | 	add	objptr, ##38016
1cc14     F2 26 02 FB | 	rdlong	local01, objptr
1cc18     13 13 02 F6 | 	mov	arg01, local01
1cc1c     01 12 66 F0 | 	shl	arg01, #1
1cc20     13 13 02 F1 | 	add	arg01, local01
1cc24     02 12 66 F0 | 	shl	arg01, #2
1cc28     03 00 00 FF 
1cc2c     04 E4 85 F1 | 	sub	objptr, ##1540
1cc30     F2 12 02 F1 | 	add	arg01, objptr
1cc34     09 27 02 FB | 	rdlong	local01, arg01
1cc38     04 26 66 F0 | 	shl	local01, #4
1cc3c     32 00 00 FF 
1cc40     84 E4 85 F1 | 	sub	objptr, ##25732
1cc44     F2 26 02 F1 | 	add	local01, objptr
1cc48     04 26 06 F1 | 	add	local01, #4
1cc4c     13 13 02 FB | 	rdlong	arg01, local01
1cc50     04 26 06 F1 | 	add	local01, #4
1cc54     13 27 02 FB | 	rdlong	local01, local01
1cc58     A7 12 62 FC | 	wrlong	arg01, fp
1cc5c     04 4E 05 F1 | 	add	fp, #4
1cc60     A7 26 62 FC | 	wrlong	local01, fp
1cc64     35 00 00 FF 
1cc68     88 E4 05 F1 | 	add	objptr, ##27272
1cc6c     F2 26 02 FB | 	rdlong	local01, objptr
1cc70     13 13 02 F6 | 	mov	arg01, local01
1cc74     01 12 66 F0 | 	shl	arg01, #1
1cc78     13 13 02 F1 | 	add	arg01, local01
1cc7c     02 12 66 F0 | 	shl	arg01, #2
1cc80     03 00 00 FF 
1cc84     04 E4 85 F1 | 	sub	objptr, ##1540
1cc88     F2 12 02 F1 | 	add	arg01, objptr
1cc8c     09 27 02 FB | 	rdlong	local01, arg01
1cc90     04 26 66 F0 | 	shl	local01, #4
1cc94     32 00 00 FF 
1cc98     84 E4 85 F1 | 	sub	objptr, ##25732
1cc9c     F2 26 02 F1 | 	add	local01, objptr
1cca0     0C 26 06 F1 | 	add	local01, #12
1cca4     13 27 02 FB | 	rdlong	local01, local01
1cca8     04 4E 05 F1 | 	add	fp, #4
1ccac     A7 26 62 FC | 	wrlong	local01, fp
1ccb0                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1ccb0                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1ccb0                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1ccb0     08 4E 85 F1 | 	sub	fp, #8
1ccb4     00 27 16 F2 | 	cmp	local01, #256 wc
1ccb8     14 00 00 FF 
1ccbc     F8 E5 85 F1 | 	sub	objptr, ##10744
1ccc0     0C 00 90 3D |  if_ae	jmp	#LR__2290
1ccc4     A7 12 02 F6 | 	mov	arg01, fp
1ccc8     20 09 BF FD | 	call	#_push
1cccc     A0 04 90 FD | 	jmp	#LR__2312
1ccd0                 | LR__2290
1ccd0                 | LR__2291
1ccd0     4A 00 00 FF 
1ccd4     80 E4 05 F1 | 	add	objptr, ##38016
1ccd8     F2 16 02 FB | 	rdlong	arg03, objptr
1ccdc     0B 15 02 F6 | 	mov	arg02, arg03
1cce0     01 14 66 F0 | 	shl	arg02, #1
1cce4     0B 15 02 F1 | 	add	arg02, arg03
1cce8     02 14 66 F0 | 	shl	arg02, #2
1ccec     03 00 00 FF 
1ccf0     04 E4 85 F1 | 	sub	objptr, ##1540
1ccf4     F2 14 02 F1 | 	add	arg02, objptr
1ccf8     0A 17 02 FB | 	rdlong	arg03, arg02
1ccfc     04 16 66 F0 | 	shl	arg03, #4
1cd00     32 00 00 FF 
1cd04     84 E4 85 F1 | 	sub	objptr, ##25732
1cd08     F2 16 02 F1 | 	add	arg03, objptr
1cd0c     04 16 06 F1 | 	add	arg03, #4
1cd10     0B 13 02 FB | 	rdlong	arg01, arg03
1cd14     0C 4E 05 F1 | 	add	fp, #12
1cd18     A7 12 62 FC | 	wrlong	arg01, fp
1cd1c     0C 4E 85 F1 | 	sub	fp, #12
1cd20     14 00 00 FF 
1cd24     F8 E5 85 F1 | 	sub	objptr, ##10744
1cd28     EC 62 B0 FD | 	call	#_pslpeek
1cd2c     FD FA 31 F9 | 	getword	result1, result1, #0
1cd30     10 4E 05 F1 | 	add	fp, #16
1cd34     A7 FA 61 FC | 	wrlong	result1, fp
1cd38     4A 00 00 FF 
1cd3c     80 E4 05 F1 | 	add	objptr, ##38016
1cd40     F2 16 02 FB | 	rdlong	arg03, objptr
1cd44     0B 15 02 F6 | 	mov	arg02, arg03
1cd48     01 14 66 F0 | 	shl	arg02, #1
1cd4c     0B 15 02 F1 | 	add	arg02, arg03
1cd50     02 14 66 F0 | 	shl	arg02, #2
1cd54     03 00 00 FF 
1cd58     04 E4 85 F1 | 	sub	objptr, ##1540
1cd5c     F2 14 02 F1 | 	add	arg02, objptr
1cd60     04 14 06 F1 | 	add	arg02, #4
1cd64     0A 17 02 FB | 	rdlong	arg03, arg02
1cd68     04 4E 05 F1 | 	add	fp, #4
1cd6c     A7 16 62 FC | 	wrlong	arg03, fp
1cd70     08 4E 85 F1 | 	sub	fp, #8
1cd74     A7 12 02 FB | 	rdlong	arg01, fp
1cd78     0C 4E 85 F1 | 	sub	fp, #12
1cd7c     02 12 06 F1 | 	add	arg01, #2
1cd80     47 00 00 FF 
1cd84     7C E4 85 F1 | 	sub	objptr, ##36476
1cd88     34 62 B0 FD | 	call	#_pspeek
1cd8c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1cd90     18 4E 05 F1 | 	add	fp, #24
1cd94     A7 FA 61 FC | 	wrlong	result1, fp
1cd98     0C 4E 85 F1 | 	sub	fp, #12
1cd9c     A7 12 02 FB | 	rdlong	arg01, fp
1cda0     0C 4E 85 F1 | 	sub	fp, #12
1cda4     04 12 06 F1 | 	add	arg01, #4
1cda8     6C 62 B0 FD | 	call	#_pslpeek
1cdac     1C 4E 05 F1 | 	add	fp, #28
1cdb0     A7 FA 61 FC | 	wrlong	result1, fp
1cdb4     10 4E 85 F1 | 	sub	fp, #16
1cdb8     A7 12 02 FB | 	rdlong	arg01, fp
1cdbc     0C 4E 85 F1 | 	sub	fp, #12
1cdc0     08 12 06 F1 | 	add	arg01, #8
1cdc4     50 62 B0 FD | 	call	#_pslpeek
1cdc8     20 4E 05 F1 | 	add	fp, #32
1cdcc     A7 FA 61 FC | 	wrlong	result1, fp
1cdd0     14 4E 85 F1 | 	sub	fp, #20
1cdd4     A7 12 02 FB | 	rdlong	arg01, fp
1cdd8     0C 4E 85 F1 | 	sub	fp, #12
1cddc     0C 12 06 F1 | 	add	arg01, #12
1cde0     34 62 B0 FD | 	call	#_pslpeek
1cde4     24 4E 05 F1 | 	add	fp, #36
1cde8     A7 FA 61 FC | 	wrlong	result1, fp
1cdec                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1cdec                 | ' esize=pspeek(arrptr+2)
1cdec                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1cdec                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1cdec                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1cdec                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1cdec     10 4E 85 F1 | 	sub	fp, #16
1cdf0     A7 16 02 FB | 	rdlong	arg03, fp
1cdf4     14 4E 85 F1 | 	sub	fp, #20
1cdf8     03 16 16 F2 | 	cmp	arg03, #3 wc
1cdfc     38 00 90 CD |  if_b	jmp	#LR__2292
1ce00     50 07 BF FD | 	call	#_pop
1ce04     FF 16 02 F6 | 	mov	arg03, result3
1ce08     A7 FA 61 FC | 	wrlong	result1, fp
1ce0c     04 4E 05 F1 | 	add	fp, #4
1ce10     A7 FC 61 FC | 	wrlong	result2, fp
1ce14     04 4E 05 F1 | 	add	fp, #4
1ce18     A7 16 62 FC | 	wrlong	arg03, fp
1ce1c     08 4E 85 F1 | 	sub	fp, #8
1ce20     A7 12 02 F6 | 	mov	arg01, fp
1ce24     10 09 BF FD | 	call	#_converttoint
1ce28     30 4E 05 F1 | 	add	fp, #48
1ce2c     A7 FA 61 FC | 	wrlong	result1, fp
1ce30     30 4E 85 F1 | 	sub	fp, #48
1ce34     0C 00 90 FD | 	jmp	#LR__2293
1ce38                 | LR__2292
1ce38     30 4E 05 F1 | 	add	fp, #48
1ce3c     A7 00 68 FC | 	wrlong	#0, fp
1ce40     30 4E 85 F1 | 	sub	fp, #48
1ce44                 | LR__2293
1ce44                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1ce44     14 4E 05 F1 | 	add	fp, #20
1ce48     A7 16 02 FB | 	rdlong	arg03, fp
1ce4c     14 4E 85 F1 | 	sub	fp, #20
1ce50     02 16 16 F2 | 	cmp	arg03, #2 wc
1ce54     38 00 90 CD |  if_b	jmp	#LR__2294
1ce58     F8 06 BF FD | 	call	#_pop
1ce5c     FF 16 02 F6 | 	mov	arg03, result3
1ce60     A7 FA 61 FC | 	wrlong	result1, fp
1ce64     04 4E 05 F1 | 	add	fp, #4
1ce68     A7 FC 61 FC | 	wrlong	result2, fp
1ce6c     04 4E 05 F1 | 	add	fp, #4
1ce70     A7 16 62 FC | 	wrlong	arg03, fp
1ce74     08 4E 85 F1 | 	sub	fp, #8
1ce78     A7 12 02 F6 | 	mov	arg01, fp
1ce7c     B8 08 BF FD | 	call	#_converttoint
1ce80     2C 4E 05 F1 | 	add	fp, #44
1ce84     A7 FA 61 FC | 	wrlong	result1, fp
1ce88     2C 4E 85 F1 | 	sub	fp, #44
1ce8c     0C 00 90 FD | 	jmp	#LR__2295
1ce90                 | LR__2294
1ce90     2C 4E 05 F1 | 	add	fp, #44
1ce94     A7 00 68 FC | 	wrlong	#0, fp
1ce98     2C 4E 85 F1 | 	sub	fp, #44
1ce9c                 | LR__2295
1ce9c                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1ce9c     14 4E 05 F1 | 	add	fp, #20
1cea0     A7 16 02 FB | 	rdlong	arg03, fp
1cea4     14 4E 85 F1 | 	sub	fp, #20
1cea8     01 16 16 F2 | 	cmp	arg03, #1 wc
1ceac     38 00 90 CD |  if_b	jmp	#LR__2296
1ceb0     A0 06 BF FD | 	call	#_pop
1ceb4     FF 16 02 F6 | 	mov	arg03, result3
1ceb8     A7 FA 61 FC | 	wrlong	result1, fp
1cebc     04 4E 05 F1 | 	add	fp, #4
1cec0     A7 FC 61 FC | 	wrlong	result2, fp
1cec4     04 4E 05 F1 | 	add	fp, #4
1cec8     A7 16 62 FC | 	wrlong	arg03, fp
1cecc     08 4E 85 F1 | 	sub	fp, #8
1ced0     A7 12 02 F6 | 	mov	arg01, fp
1ced4     60 08 BF FD | 	call	#_converttoint
1ced8     28 4E 05 F1 | 	add	fp, #40
1cedc     A7 FA 61 FC | 	wrlong	result1, fp
1cee0     28 4E 85 F1 | 	sub	fp, #40
1cee4     0C 00 90 FD | 	jmp	#LR__2297
1cee8                 | LR__2296
1cee8     28 4E 05 F1 | 	add	fp, #40
1ceec     A7 00 68 FC | 	wrlong	#0, fp
1cef0     28 4E 85 F1 | 	sub	fp, #40
1cef4                 | LR__2297
1cef4     0C 4E 05 F1 | 	add	fp, #12
1cef8     A7 28 02 FB | 	rdlong	local02, fp
1cefc     1C 4E 05 F1 | 	add	fp, #28
1cf00     A7 2A 02 FB | 	rdlong	local03, fp
1cf04     04 4E 05 F1 | 	add	fp, #4
1cf08     A7 FC 01 FB | 	rdlong	result2, fp
1cf0c     10 4E 85 F1 | 	sub	fp, #16
1cf10     A7 FE 01 FB | 	rdlong	result3, fp
1cf14     FF FC 01 FD | 	qmul	result2, result3
1cf18     10 28 06 F1 | 	add	local02, #16
1cf1c     14 4E 05 F1 | 	add	fp, #20
1cf20     A7 FC 01 FB | 	rdlong	result2, fp
1cf24     18 FA 61 FD | 	getqx	result1
1cf28     FF FC 01 FD | 	qmul	result2, result3
1cf2c     FD 2A 02 F1 | 	add	local03, result1
1cf30     10 4E 85 F1 | 	sub	fp, #16
1cf34     A7 FE 01 FB | 	rdlong	result3, fp
1cf38     18 FC 61 FD | 	getqx	result2
1cf3c     FF FC 01 FD | 	qmul	result2, result3
1cf40     08 4E 85 F1 | 	sub	fp, #8
1cf44     A7 FE 01 FB | 	rdlong	result3, fp
1cf48     18 FC 61 FD | 	getqx	result2
1cf4c     FE 2A 02 F1 | 	add	local03, result2
1cf50     FF 2A 02 FD | 	qmul	local03, result3
1cf54     1C 4E 05 F1 | 	add	fp, #28
1cf58                 | ' 
1cf58                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1cf58                 | ' 
1cf58                 | ' select case vartype
1cf58     18 FC 61 FD | 	getqx	result2
1cf5c     FE 28 02 F1 | 	add	local02, result2
1cf60     A7 28 62 FC | 	wrlong	local02, fp
1cf64     24 4E 85 F1 | 	sub	fp, #36
1cf68     A7 2C 02 FB | 	rdlong	local04, fp
1cf6c     10 4E 85 F1 | 	sub	fp, #16
1cf70     00 2D 86 F1 | 	sub	local04, #256
1cf74     0C 2C 26 F3 | 	fle	local04, #12
1cf78     30 2C 62 FD | 	jmprel	local04
1cf7c                 | LR__2298
1cf7c     30 00 90 FD | 	jmp	#LR__2299
1cf80     58 00 90 FD | 	jmp	#LR__2300
1cf84     8C 00 90 FD | 	jmp	#LR__2301
1cf88     AC 00 90 FD | 	jmp	#LR__2302
1cf8c     E8 00 90 FD | 	jmp	#LR__2303
1cf90     08 01 90 FD | 	jmp	#LR__2304
1cf94     24 01 90 FD | 	jmp	#LR__2305
1cf98     40 01 90 FD | 	jmp	#LR__2306
1cf9c     50 01 90 FD | 	jmp	#LR__2307
1cfa0     60 01 90 FD | 	jmp	#LR__2308
1cfa4     7C 01 90 FD | 	jmp	#LR__2309
1cfa8     8C 01 90 FD | 	jmp	#LR__2310
1cfac     B8 01 90 FD | 	jmp	#LR__2311
1cfb0                 | LR__2299
1cfb0     A7 12 02 F6 | 	mov	arg01, fp
1cfb4     34 4E 05 F1 | 	add	fp, #52
1cfb8     A7 14 02 FB | 	rdlong	arg02, fp
1cfbc     34 4E 85 F1 | 	sub	fp, #52
1cfc0     0C 16 06 F6 | 	mov	arg03, #12
1cfc4     0B 00 00 FF 
1cfc8     CC E4 05 F1 | 	add	objptr, ##5836
1cfcc     DC 8A B0 FD | 	call	#_psram_spin2_read1
1cfd0     0B 00 00 FF 
1cfd4     CC E4 85 F1 | 	sub	objptr, ##5836
1cfd8     8C 01 90 FD | 	jmp	#LR__2311
1cfdc                 | LR__2300
1cfdc     08 4E 05 F1 | 	add	fp, #8
1cfe0     A7 38 68 FC | 	wrlong	#28, fp
1cfe4     2C 4E 05 F1 | 	add	fp, #44
1cfe8     A7 12 02 FB | 	rdlong	arg01, fp
1cfec     34 4E 85 F1 | 	sub	fp, #52
1cff0     CC 5F B0 FD | 	call	#_pspeek
1cff4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1cff8     A7 FA 61 FC | 	wrlong	result1, fp
1cffc     80 FA 15 F2 | 	cmp	result1, #128 wc
1d000     00 27 66 36 |  if_ae	neg	local01, #256
1d004     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1d008     15 27 42 35 |  if_ae	or	local01, local03
1d00c     A7 26 62 3C |  if_ae	wrlong	local01, fp
1d010     54 01 90 FD | 	jmp	#LR__2311
1d014                 | LR__2301
1d014     08 4E 05 F1 | 	add	fp, #8
1d018     A7 3A 68 FC | 	wrlong	#29, fp
1d01c     2C 4E 05 F1 | 	add	fp, #44
1d020     A7 12 02 FB | 	rdlong	arg01, fp
1d024     34 4E 85 F1 | 	sub	fp, #52
1d028     94 5F B0 FD | 	call	#_pspeek
1d02c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d030     A7 FA 61 FC | 	wrlong	result1, fp
1d034     30 01 90 FD | 	jmp	#LR__2311
1d038                 | LR__2302
1d038     08 4E 05 F1 | 	add	fp, #8
1d03c     A7 38 68 FC | 	wrlong	#28, fp
1d040     2C 4E 05 F1 | 	add	fp, #44
1d044     A7 12 02 FB | 	rdlong	arg01, fp
1d048     34 4E 85 F1 | 	sub	fp, #52
1d04c     C8 5F B0 FD | 	call	#_pslpeek
1d050     FD FA 31 F9 | 	getword	result1, result1, #0
1d054     A7 FA 61 FC | 	wrlong	result1, fp
1d058     40 00 00 FF 
1d05c     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1d060     FF 7F 00 3F 
1d064     00 27 06 36 |  if_ae	mov	local01, ##16776960
1d068     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1d06c     15 27 42 35 |  if_ae	or	local01, local03
1d070     A7 26 62 3C |  if_ae	wrlong	local01, fp
1d074     F0 00 90 FD | 	jmp	#LR__2311
1d078                 | LR__2303
1d078     08 4E 05 F1 | 	add	fp, #8
1d07c     A7 3A 68 FC | 	wrlong	#29, fp
1d080     2C 4E 05 F1 | 	add	fp, #44
1d084     A7 12 02 FB | 	rdlong	arg01, fp
1d088     34 4E 85 F1 | 	sub	fp, #52
1d08c     88 5F B0 FD | 	call	#_pslpeek
1d090     FD FA 31 F9 | 	getword	result1, result1, #0
1d094     A7 FA 61 FC | 	wrlong	result1, fp
1d098     CC 00 90 FD | 	jmp	#LR__2311
1d09c                 | LR__2304
1d09c     08 4E 05 F1 | 	add	fp, #8
1d0a0     A7 38 68 FC | 	wrlong	#28, fp
1d0a4     2C 4E 05 F1 | 	add	fp, #44
1d0a8     A7 12 02 FB | 	rdlong	arg01, fp
1d0ac     34 4E 85 F1 | 	sub	fp, #52
1d0b0     64 5F B0 FD | 	call	#_pslpeek
1d0b4     A7 FA 61 FC | 	wrlong	result1, fp
1d0b8     AC 00 90 FD | 	jmp	#LR__2311
1d0bc                 | LR__2305
1d0bc     08 4E 05 F1 | 	add	fp, #8
1d0c0     A7 3A 68 FC | 	wrlong	#29, fp
1d0c4     2C 4E 05 F1 | 	add	fp, #44
1d0c8     A7 12 02 FB | 	rdlong	arg01, fp
1d0cc     34 4E 85 F1 | 	sub	fp, #52
1d0d0     44 5F B0 FD | 	call	#_pslpeek
1d0d4     A7 FA 61 FC | 	wrlong	result1, fp
1d0d8     8C 00 90 FD | 	jmp	#LR__2311
1d0dc                 | LR__2306
1d0dc     08 4E 05 F1 | 	add	fp, #8
1d0e0     A7 FE 69 FC | 	wrlong	#255, fp
1d0e4     08 4E 85 F1 | 	sub	fp, #8
1d0e8     A7 60 68 FC | 	wrlong	#48, fp
1d0ec     78 00 90 FD | 	jmp	#LR__2311
1d0f0                 | LR__2307
1d0f0     08 4E 05 F1 | 	add	fp, #8
1d0f4     A7 FE 69 FC | 	wrlong	#255, fp
1d0f8     08 4E 85 F1 | 	sub	fp, #8
1d0fc     A7 60 68 FC | 	wrlong	#48, fp
1d100     64 00 90 FD | 	jmp	#LR__2311
1d104                 | LR__2308
1d104     08 4E 05 F1 | 	add	fp, #8
1d108     A7 3C 68 FC | 	wrlong	#30, fp
1d10c     2C 4E 05 F1 | 	add	fp, #44
1d110     A7 12 02 FB | 	rdlong	arg01, fp
1d114     34 4E 85 F1 | 	sub	fp, #52
1d118     FC 5E B0 FD | 	call	#_pslpeek
1d11c     A7 FA 61 FC | 	wrlong	result1, fp
1d120     44 00 90 FD | 	jmp	#LR__2311
1d124                 | LR__2309
1d124     08 4E 05 F1 | 	add	fp, #8
1d128     A7 FE 69 FC | 	wrlong	#255, fp
1d12c     08 4E 85 F1 | 	sub	fp, #8
1d130     A7 60 68 FC | 	wrlong	#48, fp
1d134     30 00 90 FD | 	jmp	#LR__2311
1d138                 | LR__2310
1d138     08 4E 05 F1 | 	add	fp, #8
1d13c     A7 3E 68 FC | 	wrlong	#31, fp
1d140     2C 4E 05 F1 | 	add	fp, #44
1d144     A7 12 02 FB | 	rdlong	arg01, fp
1d148     34 4E 85 F1 | 	sub	fp, #52
1d14c     C8 5E B0 FD | 	call	#_pslpeek
1d150     A7 FA 61 FC | 	wrlong	result1, fp
1d154     00 04 00 FF 
1d158     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1d15c     08 4E 05 31 |  if_ae	add	fp, #8
1d160     A7 56 68 3C |  if_ae	wrlong	#43, fp
1d164     08 4E 85 31 |  if_ae	sub	fp, #8
1d168                 | LR__2311
1d168     A7 12 02 F6 | 	mov	arg01, fp
1d16c     7C 04 BF FD | 	call	#_push
1d170                 | LR__2312
1d170     A7 F0 03 F6 | 	mov	ptra, fp
1d174     B2 00 A0 FD | 	call	#popregs_
1d178                 | _do_getvar_ret
1d178     2D 00 64 FD | 	ret
1d17c                 | 
1d17c                 | ' 
1d17c                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1d17c                 | ' 
1d17c                 | ' sub do_getaddr
1d17c                 | _do_getaddr
1d17c     01 4A 05 F6 | 	mov	COUNT_, #1
1d180     A8 00 A0 FD | 	call	#pushregs_
1d184     38 F0 07 F1 | 	add	ptra, #56
1d188                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1d188                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1d188     4A 00 00 FF 
1d18c     80 E4 05 F1 | 	add	objptr, ##38016
1d190     F2 12 02 FB | 	rdlong	arg01, objptr
1d194     09 FD 01 F6 | 	mov	result2, arg01
1d198     01 FC 65 F0 | 	shl	result2, #1
1d19c     09 FD 01 F1 | 	add	result2, arg01
1d1a0     02 FC 65 F0 | 	shl	result2, #2
1d1a4     03 00 00 FF 
1d1a8     04 E4 85 F1 | 	sub	objptr, ##1540
1d1ac     F2 FC 01 F1 | 	add	result2, objptr
1d1b0     04 FC 05 F1 | 	add	result2, #4
1d1b4     FE FC 09 FB | 	rdlong	result2, result2 wz
1d1b8     47 00 00 FF 
1d1bc     7C E4 85 F1 | 	sub	objptr, ##36476
1d1c0     10 01 90 5D |  if_ne	jmp	#LR__2320
1d1c4     4A 00 00 FF 
1d1c8     80 E4 05 F1 | 	add	objptr, ##38016
1d1cc     F2 12 02 FB | 	rdlong	arg01, objptr
1d1d0     09 FD 01 F6 | 	mov	result2, arg01
1d1d4     01 FC 65 F0 | 	shl	result2, #1
1d1d8     09 FD 01 F1 | 	add	result2, arg01
1d1dc     02 FC 65 F0 | 	shl	result2, #2
1d1e0     03 00 00 FF 
1d1e4     04 E4 85 F1 | 	sub	objptr, ##1540
1d1e8     F2 FC 01 F1 | 	add	result2, objptr
1d1ec     FE 12 02 FB | 	rdlong	arg01, result2
1d1f0     04 12 66 F0 | 	shl	arg01, #4
1d1f4     32 00 00 FF 
1d1f8     84 E4 85 F1 | 	sub	objptr, ##25732
1d1fc     F2 12 02 F1 | 	add	arg01, objptr
1d200     0C 12 06 F1 | 	add	arg01, #12
1d204     09 13 02 FB | 	rdlong	arg01, arg01
1d208     08 4E 05 F1 | 	add	fp, #8
1d20c     A7 12 62 FC | 	wrlong	arg01, fp
1d210                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1d210                 | '    if t1.result_type>=array_no_type then goto 2200
1d210     08 4E 85 F1 | 	sub	fp, #8
1d214     00 13 16 F2 | 	cmp	arg01, #256 wc
1d218     14 00 00 FF 
1d21c     F8 E5 85 F1 | 	sub	objptr, ##10744
1d220     B0 00 90 3D |  if_ae	jmp	#LR__2321
1d224     4A 00 00 FF 
1d228     80 E4 05 F1 | 	add	objptr, ##38016
1d22c     F2 12 02 FB | 	rdlong	arg01, objptr
1d230     09 FF 01 F6 | 	mov	result3, arg01
1d234     01 FE 65 F0 | 	shl	result3, #1
1d238     09 FF 01 F1 | 	add	result3, arg01
1d23c     02 FE 65 F0 | 	shl	result3, #2
1d240     03 00 00 FF 
1d244     04 E4 85 F1 | 	sub	objptr, ##1540
1d248     F2 FE 01 F1 | 	add	result3, objptr
1d24c     FF FA 01 FB | 	rdlong	result1, result3
1d250     04 FA 65 F0 | 	shl	result1, #4
1d254     32 00 00 FF 
1d258     84 E4 85 F1 | 	sub	objptr, ##25732
1d25c     F2 FA 01 F1 | 	add	result1, objptr
1d260     04 FA 05 F1 | 	add	result1, #4
1d264     A7 FA 61 FC | 	wrlong	result1, fp
1d268     35 00 00 FF 
1d26c     88 E4 05 F1 | 	add	objptr, ##27272
1d270     F2 FE 01 FB | 	rdlong	result3, objptr
1d274     FF 12 02 F6 | 	mov	arg01, result3
1d278     01 12 66 F0 | 	shl	arg01, #1
1d27c     FF 12 02 F1 | 	add	arg01, result3
1d280     02 12 66 F0 | 	shl	arg01, #2
1d284     03 00 00 FF 
1d288     04 E4 85 F1 | 	sub	objptr, ##1540
1d28c     F2 12 02 F1 | 	add	arg01, objptr
1d290     09 13 02 FB | 	rdlong	arg01, arg01
1d294     04 12 66 F0 | 	shl	arg01, #4
1d298     32 00 00 FF 
1d29c     84 E4 85 F1 | 	sub	objptr, ##25732
1d2a0     F2 12 02 F1 | 	add	arg01, objptr
1d2a4     0C 12 06 F1 | 	add	arg01, #12
1d2a8     09 13 02 FB | 	rdlong	arg01, arg01
1d2ac     04 4E 05 F1 | 	add	fp, #4
1d2b0     A7 12 62 FC | 	wrlong	arg01, fp
1d2b4     04 4E 05 F1 | 	add	fp, #4
1d2b8     A7 3A 68 FC | 	wrlong	#29, fp
1d2bc     08 4E 85 F1 | 	sub	fp, #8
1d2c0     A7 12 02 F6 | 	mov	arg01, fp
1d2c4     14 00 00 FF 
1d2c8     F8 E5 85 F1 | 	sub	objptr, ##10744
1d2cc     1C 03 BF FD | 	call	#_push
1d2d0                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1d2d0                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1d2d0                 | '   t1.result_type=result_uint
1d2d0                 | '   push t1 : return
1d2d0     2C 03 90 FD | 	jmp	#LR__2330
1d2d4                 | LR__2320
1d2d4                 | LR__2321
1d2d4     4A 00 00 FF 
1d2d8     80 E4 05 F1 | 	add	objptr, ##38016
1d2dc     F2 FE 01 FB | 	rdlong	result3, objptr
1d2e0     FF FC 01 F6 | 	mov	result2, result3
1d2e4     01 FC 65 F0 | 	shl	result2, #1
1d2e8     FF FC 01 F1 | 	add	result2, result3
1d2ec     02 FC 65 F0 | 	shl	result2, #2
1d2f0     03 00 00 FF 
1d2f4     04 E4 85 F1 | 	sub	objptr, ##1540
1d2f8     F2 FC 01 F1 | 	add	result2, objptr
1d2fc     FE FE 01 FB | 	rdlong	result3, result2
1d300     04 FE 65 F0 | 	shl	result3, #4
1d304     32 00 00 FF 
1d308     84 E4 85 F1 | 	sub	objptr, ##25732
1d30c     F2 FE 01 F1 | 	add	result3, objptr
1d310     04 FE 05 F1 | 	add	result3, #4
1d314     FF FE 01 FB | 	rdlong	result3, result3
1d318     0C 4E 05 F1 | 	add	fp, #12
1d31c     A7 FE 61 FC | 	wrlong	result3, fp
1d320     35 00 00 FF 
1d324     88 E4 05 F1 | 	add	objptr, ##27272
1d328     F2 FE 01 FB | 	rdlong	result3, objptr
1d32c     FF 12 02 F6 | 	mov	arg01, result3
1d330     01 12 66 F0 | 	shl	arg01, #1
1d334     FF 12 02 F1 | 	add	arg01, result3
1d338     02 12 66 F0 | 	shl	arg01, #2
1d33c     03 00 00 FF 
1d340     04 E4 85 F1 | 	sub	objptr, ##1540
1d344     F2 12 02 F1 | 	add	arg01, objptr
1d348     09 13 02 FB | 	rdlong	arg01, arg01
1d34c     04 12 66 F0 | 	shl	arg01, #4
1d350     32 00 00 FF 
1d354     84 E4 85 F1 | 	sub	objptr, ##25732
1d358     F2 12 02 F1 | 	add	arg01, objptr
1d35c     0C 12 06 F1 | 	add	arg01, #12
1d360     09 13 02 FB | 	rdlong	arg01, arg01
1d364     08 4E 85 F1 | 	sub	fp, #8
1d368     A7 12 62 FC | 	wrlong	arg01, fp
1d36c     08 4E 05 F1 | 	add	fp, #8
1d370     A7 12 02 FB | 	rdlong	arg01, fp
1d374     0C 4E 85 F1 | 	sub	fp, #12
1d378     14 00 00 FF 
1d37c     F8 E5 85 F1 | 	sub	objptr, ##10744
1d380     94 5C B0 FD | 	call	#_pslpeek
1d384     FD FA 31 F9 | 	getword	result1, result1, #0
1d388     10 4E 05 F1 | 	add	fp, #16
1d38c     A7 FA 61 FC | 	wrlong	result1, fp
1d390     4A 00 00 FF 
1d394     80 E4 05 F1 | 	add	objptr, ##38016
1d398     F2 FE 01 FB | 	rdlong	result3, objptr
1d39c     FF 12 02 F6 | 	mov	arg01, result3
1d3a0     01 12 66 F0 | 	shl	arg01, #1
1d3a4     FF 12 02 F1 | 	add	arg01, result3
1d3a8     02 12 66 F0 | 	shl	arg01, #2
1d3ac     03 00 00 FF 
1d3b0     04 E4 85 F1 | 	sub	objptr, ##1540
1d3b4     F2 12 02 F1 | 	add	arg01, objptr
1d3b8     04 12 06 F1 | 	add	arg01, #4
1d3bc     09 13 02 FB | 	rdlong	arg01, arg01
1d3c0     04 4E 05 F1 | 	add	fp, #4
1d3c4     A7 12 62 FC | 	wrlong	arg01, fp
1d3c8     08 4E 85 F1 | 	sub	fp, #8
1d3cc     A7 12 02 FB | 	rdlong	arg01, fp
1d3d0     0C 4E 85 F1 | 	sub	fp, #12
1d3d4     02 12 06 F1 | 	add	arg01, #2
1d3d8     47 00 00 FF 
1d3dc     7C E4 85 F1 | 	sub	objptr, ##36476
1d3e0     DC 5B B0 FD | 	call	#_pspeek
1d3e4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d3e8     18 4E 05 F1 | 	add	fp, #24
1d3ec     A7 FA 61 FC | 	wrlong	result1, fp
1d3f0     0C 4E 85 F1 | 	sub	fp, #12
1d3f4     A7 12 02 FB | 	rdlong	arg01, fp
1d3f8     0C 4E 85 F1 | 	sub	fp, #12
1d3fc     04 12 06 F1 | 	add	arg01, #4
1d400     14 5C B0 FD | 	call	#_pslpeek
1d404     1C 4E 05 F1 | 	add	fp, #28
1d408     A7 FA 61 FC | 	wrlong	result1, fp
1d40c     10 4E 85 F1 | 	sub	fp, #16
1d410     A7 12 02 FB | 	rdlong	arg01, fp
1d414     0C 4E 85 F1 | 	sub	fp, #12
1d418     08 12 06 F1 | 	add	arg01, #8
1d41c     F8 5B B0 FD | 	call	#_pslpeek
1d420     20 4E 05 F1 | 	add	fp, #32
1d424     A7 FA 61 FC | 	wrlong	result1, fp
1d428     14 4E 85 F1 | 	sub	fp, #20
1d42c     A7 12 02 FB | 	rdlong	arg01, fp
1d430     0C 4E 85 F1 | 	sub	fp, #12
1d434     0C 12 06 F1 | 	add	arg01, #12
1d438     DC 5B B0 FD | 	call	#_pslpeek
1d43c     24 4E 05 F1 | 	add	fp, #36
1d440     A7 FA 61 FC | 	wrlong	result1, fp
1d444                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1d444                 | ' esize=pspeek(arrptr+2)
1d444                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1d444                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1d444                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1d444                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1d444     10 4E 85 F1 | 	sub	fp, #16
1d448     A7 12 02 FB | 	rdlong	arg01, fp
1d44c     14 4E 85 F1 | 	sub	fp, #20
1d450     03 12 16 F2 | 	cmp	arg01, #3 wc
1d454     34 00 90 CD |  if_b	jmp	#LR__2322
1d458     F8 00 BF FD | 	call	#_pop
1d45c     A7 FA 61 FC | 	wrlong	result1, fp
1d460     04 4E 05 F1 | 	add	fp, #4
1d464     A7 FC 61 FC | 	wrlong	result2, fp
1d468     04 4E 05 F1 | 	add	fp, #4
1d46c     A7 FE 61 FC | 	wrlong	result3, fp
1d470     08 4E 85 F1 | 	sub	fp, #8
1d474     A7 12 02 F6 | 	mov	arg01, fp
1d478     BC 02 BF FD | 	call	#_converttoint
1d47c     30 4E 05 F1 | 	add	fp, #48
1d480     A7 FA 61 FC | 	wrlong	result1, fp
1d484     30 4E 85 F1 | 	sub	fp, #48
1d488     0C 00 90 FD | 	jmp	#LR__2323
1d48c                 | LR__2322
1d48c     30 4E 05 F1 | 	add	fp, #48
1d490     A7 00 68 FC | 	wrlong	#0, fp
1d494     30 4E 85 F1 | 	sub	fp, #48
1d498                 | LR__2323
1d498                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1d498     14 4E 05 F1 | 	add	fp, #20
1d49c     A7 12 02 FB | 	rdlong	arg01, fp
1d4a0     14 4E 85 F1 | 	sub	fp, #20
1d4a4     02 12 16 F2 | 	cmp	arg01, #2 wc
1d4a8     34 00 90 CD |  if_b	jmp	#LR__2324
1d4ac     A4 00 BF FD | 	call	#_pop
1d4b0     A7 FA 61 FC | 	wrlong	result1, fp
1d4b4     04 4E 05 F1 | 	add	fp, #4
1d4b8     A7 FC 61 FC | 	wrlong	result2, fp
1d4bc     04 4E 05 F1 | 	add	fp, #4
1d4c0     A7 FE 61 FC | 	wrlong	result3, fp
1d4c4     08 4E 85 F1 | 	sub	fp, #8
1d4c8     A7 12 02 F6 | 	mov	arg01, fp
1d4cc     68 02 BF FD | 	call	#_converttoint
1d4d0     2C 4E 05 F1 | 	add	fp, #44
1d4d4     A7 FA 61 FC | 	wrlong	result1, fp
1d4d8     2C 4E 85 F1 | 	sub	fp, #44
1d4dc     0C 00 90 FD | 	jmp	#LR__2325
1d4e0                 | LR__2324
1d4e0     2C 4E 05 F1 | 	add	fp, #44
1d4e4     A7 00 68 FC | 	wrlong	#0, fp
1d4e8     2C 4E 85 F1 | 	sub	fp, #44
1d4ec                 | LR__2325
1d4ec                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1d4ec     14 4E 05 F1 | 	add	fp, #20
1d4f0     A7 12 02 FB | 	rdlong	arg01, fp
1d4f4     14 4E 85 F1 | 	sub	fp, #20
1d4f8     01 12 16 F2 | 	cmp	arg01, #1 wc
1d4fc     34 00 90 CD |  if_b	jmp	#LR__2326
1d500     50 00 BF FD | 	call	#_pop
1d504     A7 FA 61 FC | 	wrlong	result1, fp
1d508     04 4E 05 F1 | 	add	fp, #4
1d50c     A7 FC 61 FC | 	wrlong	result2, fp
1d510     04 4E 05 F1 | 	add	fp, #4
1d514     A7 FE 61 FC | 	wrlong	result3, fp
1d518     08 4E 85 F1 | 	sub	fp, #8
1d51c     A7 12 02 F6 | 	mov	arg01, fp
1d520     14 02 BF FD | 	call	#_converttoint
1d524     28 4E 05 F1 | 	add	fp, #40
1d528     A7 FA 61 FC | 	wrlong	result1, fp
1d52c     28 4E 85 F1 | 	sub	fp, #40
1d530     0C 00 90 FD | 	jmp	#LR__2327
1d534                 | LR__2326
1d534     28 4E 05 F1 | 	add	fp, #40
1d538     A7 00 68 FC | 	wrlong	#0, fp
1d53c     28 4E 85 F1 | 	sub	fp, #40
1d540                 | LR__2327
1d540                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1d540                 | ' if numpar>0 then
1d540     14 4E 05 F1 | 	add	fp, #20
1d544     A7 FE 01 FB | 	rdlong	result3, fp
1d548     14 4E 85 F1 | 	sub	fp, #20
1d54c     01 FE 15 F2 | 	cmp	result3, #1 wc
1d550     8C 00 90 CD |  if_b	jmp	#LR__2328
1d554     0C 4E 05 F1 | 	add	fp, #12
1d558     A7 FC 01 FB | 	rdlong	result2, fp
1d55c     1C 4E 05 F1 | 	add	fp, #28
1d560     A7 FE 01 FB | 	rdlong	result3, fp
1d564     04 4E 05 F1 | 	add	fp, #4
1d568     A7 12 02 FB | 	rdlong	arg01, fp
1d56c     10 4E 85 F1 | 	sub	fp, #16
1d570     A7 FA 01 FB | 	rdlong	result1, fp
1d574     FD 12 02 FD | 	qmul	arg01, result1
1d578     10 FC 05 F1 | 	add	result2, #16
1d57c     14 4E 05 F1 | 	add	fp, #20
1d580     A7 26 02 FB | 	rdlong	local01, fp
1d584     18 12 62 FD | 	getqx	arg01
1d588     FD 26 02 FD | 	qmul	local01, result1
1d58c     09 FF 01 F1 | 	add	result3, arg01
1d590     10 4E 85 F1 | 	sub	fp, #16
1d594     A7 26 02 FB | 	rdlong	local01, fp
1d598     18 FA 61 FD | 	getqx	result1
1d59c     13 FB 01 FD | 	qmul	result1, local01
1d5a0     08 4E 85 F1 | 	sub	fp, #8
1d5a4     A7 26 02 FB | 	rdlong	local01, fp
1d5a8     18 FA 61 FD | 	getqx	result1
1d5ac     FD FE 01 F1 | 	add	result3, result1
1d5b0     13 FF 01 FD | 	qmul	result3, local01
1d5b4     1C 4E 05 F1 | 	add	fp, #28
1d5b8     18 26 62 FD | 	getqx	local01
1d5bc     13 FD 01 F1 | 	add	result2, local01
1d5c0     A7 FC 61 FC | 	wrlong	result2, fp
1d5c4     2C 4E 85 F1 | 	sub	fp, #44
1d5c8     A7 3A 68 FC | 	wrlong	#29, fp
1d5cc     2C 4E 05 F1 | 	add	fp, #44
1d5d0     A7 26 02 FB | 	rdlong	local01, fp
1d5d4     34 4E 85 F1 | 	sub	fp, #52
1d5d8     A7 26 62 FC | 	wrlong	local01, fp
1d5dc     18 00 90 FD | 	jmp	#LR__2329
1d5e0                 | LR__2328
1d5e0     08 4E 05 F1 | 	add	fp, #8
1d5e4     A7 3A 68 FC | 	wrlong	#29, fp
1d5e8     04 4E 05 F1 | 	add	fp, #4
1d5ec     A7 26 02 FB | 	rdlong	local01, fp
1d5f0     0C 4E 85 F1 | 	sub	fp, #12
1d5f4     A7 26 62 FC | 	wrlong	local01, fp
1d5f8                 | LR__2329
1d5f8     A7 12 02 F6 | 	mov	arg01, fp
1d5fc     EC FF BE FD | 	call	#_push
1d600                 | LR__2330
1d600     A7 F0 03 F6 | 	mov	ptra, fp
1d604     B2 00 A0 FD | 	call	#popregs_
1d608                 | _do_getaddr_ret
1d608     2D 00 64 FD | 	ret
1d60c                 | 
1d60c                 | ' 
1d60c                 | ' 
1d60c                 | ' 
1d60c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1d60c                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1d60c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1d60c                 | ' 
1d60c                 | ' '--------------------------------- AND 
1d60c                 | ' 
1d60c                 | ' sub do_and 
1d60c                 | _do_and
1d60c     03 4A 05 F6 | 	mov	COUNT_, #3
1d610     A8 00 A0 FD | 	call	#pushregs_
1d614     18 F0 07 F1 | 	add	ptra, #24
1d618     38 FF BE FD | 	call	#_pop
1d61c     FD 12 02 F6 | 	mov	arg01, result1
1d620     FE 26 02 F6 | 	mov	local01, result2
1d624     FF 28 02 F6 | 	mov	local02, result3
1d628     0C 4E 05 F1 | 	add	fp, #12
1d62c     A7 12 62 FC | 	wrlong	arg01, fp
1d630     04 4E 05 F1 | 	add	fp, #4
1d634     A7 26 62 FC | 	wrlong	local01, fp
1d638     04 4E 05 F1 | 	add	fp, #4
1d63c     A7 28 62 FC | 	wrlong	local02, fp
1d640     14 4E 85 F1 | 	sub	fp, #20
1d644     0C FF BE FD | 	call	#_pop
1d648     FF 2A 02 F6 | 	mov	local03, result3
1d64c     A7 FA 61 FC | 	wrlong	result1, fp
1d650     04 4E 05 F1 | 	add	fp, #4
1d654     A7 FC 61 FC | 	wrlong	result2, fp
1d658     04 4E 05 F1 | 	add	fp, #4
1d65c     A7 2A 62 FC | 	wrlong	local03, fp
1d660                 | ' 
1d660                 | ' t2=pop()
1d660                 | ' t1=pop()
1d660                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1d660     08 4E 85 F1 | 	sub	fp, #8
1d664     1C 2A 0E F2 | 	cmp	local03, #28 wz
1d668     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d66c     A7 2A 62 AC |  if_e	wrlong	local03, fp
1d670     08 4E 05 A1 |  if_e	add	fp, #8
1d674     A7 3A 68 AC |  if_e	wrlong	#29, fp
1d678     08 4E 85 A1 |  if_e	sub	fp, #8
1d67c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1d67c     14 4E 05 F1 | 	add	fp, #20
1d680     A7 2A 02 FB | 	rdlong	local03, fp
1d684     14 4E 85 F1 | 	sub	fp, #20
1d688     1C 2A 0E F2 | 	cmp	local03, #28 wz
1d68c     18 00 90 5D |  if_ne	jmp	#LR__2340
1d690     0C 4E 05 F1 | 	add	fp, #12
1d694     A7 2A 02 FB | 	rdlong	local03, fp
1d698     A7 2A 62 FC | 	wrlong	local03, fp
1d69c     08 4E 05 F1 | 	add	fp, #8
1d6a0     A7 3A 68 FC | 	wrlong	#29, fp
1d6a4     14 4E 85 F1 | 	sub	fp, #20
1d6a8                 | LR__2340
1d6a8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1d6a8     08 4E 05 F1 | 	add	fp, #8
1d6ac     A7 2A 02 FB | 	rdlong	local03, fp
1d6b0     08 4E 85 F1 | 	sub	fp, #8
1d6b4     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d6b8     14 4E 05 51 |  if_ne	add	fp, #20
1d6bc     A7 28 02 5B |  if_ne	rdlong	local02, fp
1d6c0     14 4E 85 51 |  if_ne	sub	fp, #20
1d6c4     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1d6c8     08 4E 05 51 |  if_ne	add	fp, #8
1d6cc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1d6d0     08 4E 85 51 |  if_ne	sub	fp, #8
1d6d4     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1d6d8     14 4E 05 51 |  if_ne	add	fp, #20
1d6dc     14 4E 85 51 |  if_ne	sub	fp, #20
1d6e0     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1d6e4     A7 0C 68 AC |  if_e	wrlong	#6, fp
1d6e8     08 4E 05 A1 |  if_e	add	fp, #8
1d6ec     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d6f0     08 4E 85 A1 |  if_e	sub	fp, #8
1d6f4     18 00 90 AD |  if_e	jmp	#LR__2341
1d6f8     A7 2A 02 FB | 	rdlong	local03, fp
1d6fc     0C 4E 05 F1 | 	add	fp, #12
1d700     A7 26 02 FB | 	rdlong	local01, fp
1d704     0C 4E 85 F1 | 	sub	fp, #12
1d708     13 2B 02 F5 | 	and	local03, local01
1d70c     A7 2A 62 FC | 	wrlong	local03, fp
1d710                 | LR__2341
1d710     A7 12 02 F6 | 	mov	arg01, fp
1d714     D4 FE BE FD | 	call	#_push
1d718     A7 F0 03 F6 | 	mov	ptra, fp
1d71c     B2 00 A0 FD | 	call	#popregs_
1d720                 | _do_and_ret
1d720     2D 00 64 FD | 	ret
1d724                 | 
1d724                 | ' 
1d724                 | ' '--------------------------------- DIV (integer divide)
1d724                 | ' 
1d724                 | ' sub do_div 
1d724                 | _do_div
1d724     01 4A 05 F6 | 	mov	COUNT_, #1
1d728     A8 00 A0 FD | 	call	#pushregs_
1d72c     18 F0 07 F1 | 	add	ptra, #24
1d730     20 FE BE FD | 	call	#_pop
1d734     FD 92 02 F6 | 	mov	muldivb_, result1
1d738     FE 90 02 F6 | 	mov	muldiva_, result2
1d73c     FF 26 02 F6 | 	mov	local01, result3
1d740     0C 4E 05 F1 | 	add	fp, #12
1d744     A7 92 62 FC | 	wrlong	muldivb_, fp
1d748     04 4E 05 F1 | 	add	fp, #4
1d74c     A7 90 62 FC | 	wrlong	muldiva_, fp
1d750     04 4E 05 F1 | 	add	fp, #4
1d754     A7 26 62 FC | 	wrlong	local01, fp
1d758     14 4E 85 F1 | 	sub	fp, #20
1d75c     F4 FD BE FD | 	call	#_pop
1d760     A7 FA 61 FC | 	wrlong	result1, fp
1d764     04 4E 05 F1 | 	add	fp, #4
1d768     A7 FC 61 FC | 	wrlong	result2, fp
1d76c     04 4E 05 F1 | 	add	fp, #4
1d770     A7 FE 61 FC | 	wrlong	result3, fp
1d774                 | ' 
1d774                 | ' t2=pop()
1d774                 | ' t1=pop()
1d774                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1d774     08 4E 85 F1 | 	sub	fp, #8
1d778     1F FE 0D F2 | 	cmp	result3, #31 wz
1d77c     14 4E 05 51 |  if_ne	add	fp, #20
1d780     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1d784     14 4E 85 51 |  if_ne	sub	fp, #20
1d788     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1d78c     A7 14 68 AC |  if_e	wrlong	#10, fp
1d790     08 4E 05 A1 |  if_e	add	fp, #8
1d794     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d798     08 4E 85 A1 |  if_e	sub	fp, #8
1d79c     90 01 90 AD |  if_e	jmp	#LR__2356
1d7a0                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1d7a0     08 4E 05 F1 | 	add	fp, #8
1d7a4     A7 92 02 FB | 	rdlong	muldivb_, fp
1d7a8     08 4E 85 F1 | 	sub	fp, #8
1d7ac     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1d7b0     1C 00 90 5D |  if_ne	jmp	#LR__2350
1d7b4     08 4E 05 F1 | 	add	fp, #8
1d7b8     A7 38 68 FC | 	wrlong	#28, fp
1d7bc     08 4E 85 F1 | 	sub	fp, #8
1d7c0     A7 12 02 FB | 	rdlong	arg01, fp
1d7c4     00 14 06 F6 | 	mov	arg02, #0
1d7c8     A8 C2 B0 FD | 	call	#__system___float_tointeger
1d7cc     A7 FA 61 FC | 	wrlong	result1, fp
1d7d0                 | LR__2350
1d7d0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1d7d0     14 4E 05 F1 | 	add	fp, #20
1d7d4     A7 92 02 FB | 	rdlong	muldivb_, fp
1d7d8     14 4E 85 F1 | 	sub	fp, #20
1d7dc     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1d7e0     28 00 90 5D |  if_ne	jmp	#LR__2351
1d7e4     14 4E 05 F1 | 	add	fp, #20
1d7e8     A7 38 68 FC | 	wrlong	#28, fp
1d7ec     08 4E 85 F1 | 	sub	fp, #8
1d7f0     A7 12 02 FB | 	rdlong	arg01, fp
1d7f4     0C 4E 85 F1 | 	sub	fp, #12
1d7f8     00 14 06 F6 | 	mov	arg02, #0
1d7fc     74 C2 B0 FD | 	call	#__system___float_tointeger
1d800     0C 4E 05 F1 | 	add	fp, #12
1d804     A7 FA 61 FC | 	wrlong	result1, fp
1d808     0C 4E 85 F1 | 	sub	fp, #12
1d80c                 | LR__2351
1d80c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1d80c     08 4E 05 F1 | 	add	fp, #8
1d810     A7 92 02 FB | 	rdlong	muldivb_, fp
1d814     08 4E 85 F1 | 	sub	fp, #8
1d818     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1d81c     14 4E 05 A1 |  if_e	add	fp, #20
1d820     A7 26 02 AB |  if_e	rdlong	local01, fp
1d824     14 4E 85 A1 |  if_e	sub	fp, #20
1d828     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1d82c     20 00 90 5D |  if_ne	jmp	#LR__2352
1d830     0C 4E 05 F1 | 	add	fp, #12
1d834     A7 26 02 FB | 	rdlong	local01, fp
1d838     0C 4E 85 F1 | 	sub	fp, #12
1d83c     A7 92 02 FB | 	rdlong	muldivb_, fp
1d840     13 93 12 FD | 	qdiv	muldivb_, local01
1d844     18 26 62 FD | 	getqx	local01
1d848     A7 26 62 FC | 	wrlong	local01, fp
1d84c     E0 00 90 FD | 	jmp	#LR__2356
1d850                 | LR__2352
1d850                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1d850     08 4E 05 F1 | 	add	fp, #8
1d854     A7 92 02 FB | 	rdlong	muldivb_, fp
1d858     08 4E 85 F1 | 	sub	fp, #8
1d85c     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1d860     14 4E 05 A1 |  if_e	add	fp, #20
1d864     A7 26 02 AB |  if_e	rdlong	local01, fp
1d868     14 4E 85 A1 |  if_e	sub	fp, #20
1d86c     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1d870     2C 00 90 5D |  if_ne	jmp	#LR__2353
1d874     0C 4E 05 F1 | 	add	fp, #12
1d878     A7 26 02 FB | 	rdlong	local01, fp
1d87c     0C 4E 85 F1 | 	sub	fp, #12
1d880     A7 92 02 FB | 	rdlong	muldivb_, fp
1d884     13 93 12 FD | 	qdiv	muldivb_, local01
1d888     18 26 62 FD | 	getqx	local01
1d88c     A7 26 62 FC | 	wrlong	local01, fp
1d890     08 4E 05 F1 | 	add	fp, #8
1d894     A7 38 68 FC | 	wrlong	#28, fp
1d898     08 4E 85 F1 | 	sub	fp, #8
1d89c     90 00 90 FD | 	jmp	#LR__2356
1d8a0                 | LR__2353
1d8a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1d8a0     08 4E 05 F1 | 	add	fp, #8
1d8a4     A7 92 02 FB | 	rdlong	muldivb_, fp
1d8a8     08 4E 85 F1 | 	sub	fp, #8
1d8ac     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1d8b0     14 4E 05 A1 |  if_e	add	fp, #20
1d8b4     A7 26 02 AB |  if_e	rdlong	local01, fp
1d8b8     14 4E 85 A1 |  if_e	sub	fp, #20
1d8bc     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1d8c0     1C 00 90 5D |  if_ne	jmp	#LR__2354
1d8c4     A7 90 02 FB | 	rdlong	muldiva_, fp
1d8c8     0C 4E 05 F1 | 	add	fp, #12
1d8cc     A7 92 02 FB | 	rdlong	muldivb_, fp
1d8d0     0C 4E 85 F1 | 	sub	fp, #12
1d8d4     BA 00 A0 FD | 	call	#divide_
1d8d8     A7 92 62 FC | 	wrlong	muldivb_, fp
1d8dc     50 00 90 FD | 	jmp	#LR__2356
1d8e0                 | LR__2354
1d8e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1d8e0     08 4E 05 F1 | 	add	fp, #8
1d8e4     A7 92 02 FB | 	rdlong	muldivb_, fp
1d8e8     08 4E 85 F1 | 	sub	fp, #8
1d8ec     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1d8f0     14 4E 05 A1 |  if_e	add	fp, #20
1d8f4     A7 26 02 AB |  if_e	rdlong	local01, fp
1d8f8     14 4E 85 A1 |  if_e	sub	fp, #20
1d8fc     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1d900     1C 00 90 5D |  if_ne	jmp	#LR__2355
1d904     A7 90 02 FB | 	rdlong	muldiva_, fp
1d908     0C 4E 05 F1 | 	add	fp, #12
1d90c     A7 92 02 FB | 	rdlong	muldivb_, fp
1d910     0C 4E 85 F1 | 	sub	fp, #12
1d914     BA 00 A0 FD | 	call	#divide_
1d918     A7 92 62 FC | 	wrlong	muldivb_, fp
1d91c     10 00 90 FD | 	jmp	#LR__2356
1d920                 | LR__2355
1d920     A7 16 68 FC | 	wrlong	#11, fp
1d924     08 4E 05 F1 | 	add	fp, #8
1d928     A7 FE 69 FC | 	wrlong	#255, fp
1d92c     08 4E 85 F1 | 	sub	fp, #8
1d930                 | LR__2356
1d930     A7 12 02 F6 | 	mov	arg01, fp
1d934     B4 FC BE FD | 	call	#_push
1d938     A7 F0 03 F6 | 	mov	ptra, fp
1d93c     B2 00 A0 FD | 	call	#popregs_
1d940                 | _do_div_ret
1d940     2D 00 64 FD | 	ret
1d944                 | 
1d944                 | ' 
1d944                 | ' '--------------------------------- equal (=)
1d944                 | ' 
1d944                 | ' sub do_eq
1d944                 | _do_eq
1d944     05 4A 05 F6 | 	mov	COUNT_, #5
1d948     A8 00 A0 FD | 	call	#pushregs_
1d94c     18 F0 07 F1 | 	add	ptra, #24
1d950     00 FC BE FD | 	call	#_pop
1d954     FD 26 02 F6 | 	mov	local01, result1
1d958     FE 28 02 F6 | 	mov	local02, result2
1d95c     FF 2A 02 F6 | 	mov	local03, result3
1d960     0C 4E 05 F1 | 	add	fp, #12
1d964     A7 26 62 FC | 	wrlong	local01, fp
1d968     04 4E 05 F1 | 	add	fp, #4
1d96c     A7 28 62 FC | 	wrlong	local02, fp
1d970     04 4E 05 F1 | 	add	fp, #4
1d974     A7 2A 62 FC | 	wrlong	local03, fp
1d978     14 4E 85 F1 | 	sub	fp, #20
1d97c     D4 FB BE FD | 	call	#_pop
1d980     FF 2A 02 F6 | 	mov	local03, result3
1d984     A7 FA 61 FC | 	wrlong	result1, fp
1d988     04 4E 05 F1 | 	add	fp, #4
1d98c     A7 FC 61 FC | 	wrlong	result2, fp
1d990     04 4E 05 F1 | 	add	fp, #4
1d994     A7 2A 62 FC | 	wrlong	local03, fp
1d998                 | ' 
1d998                 | ' t2=pop()
1d998                 | ' t1=pop()
1d998                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1d998     08 4E 85 F1 | 	sub	fp, #8
1d99c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d9a0     14 4E 05 A1 |  if_e	add	fp, #20
1d9a4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d9a8     14 4E 85 A1 |  if_e	sub	fp, #20
1d9ac     16 2B 02 A6 |  if_e	mov	local03, local04
1d9b0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d9b4     28 00 90 5D |  if_ne	jmp	#LR__2360
1d9b8     00 26 06 F6 | 	mov	local01, #0
1d9bc     A7 12 02 FB | 	rdlong	arg01, fp
1d9c0     0C 4E 05 F1 | 	add	fp, #12
1d9c4     A7 14 02 FB | 	rdlong	arg02, fp
1d9c8     0C 4E 85 F1 | 	sub	fp, #12
1d9cc     8C 8D B0 FD | 	call	#__system___string_cmp
1d9d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1d9d4     00 26 26 A6 |  if_e	not	local01, #0
1d9d8     A7 26 62 FC | 	wrlong	local01, fp
1d9dc     20 04 90 FD | 	jmp	#LR__2373
1d9e0                 | LR__2360
1d9e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1d9e0     08 4E 05 F1 | 	add	fp, #8
1d9e4     A7 26 02 FB | 	rdlong	local01, fp
1d9e8     08 4E 85 F1 | 	sub	fp, #8
1d9ec     1E 26 0E F2 | 	cmp	local01, #30 wz
1d9f0     14 4E 05 A1 |  if_e	add	fp, #20
1d9f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d9f8     14 4E 85 A1 |  if_e	sub	fp, #20
1d9fc     16 2B 02 A6 |  if_e	mov	local03, local04
1da00     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1da04     2C 00 90 5D |  if_ne	jmp	#LR__2361
1da08     00 26 06 F6 | 	mov	local01, #0
1da0c     A7 12 02 FB | 	rdlong	arg01, fp
1da10     0C 4E 05 F1 | 	add	fp, #12
1da14     A7 14 02 FB | 	rdlong	arg02, fp
1da18     0C 4E 85 F1 | 	sub	fp, #12
1da1c     01 16 06 F6 | 	mov	arg03, #1
1da20     BC BF B0 FD | 	call	#__system___float_cmp
1da24     00 FA 0D F2 | 	cmp	result1, #0 wz
1da28     00 26 26 A6 |  if_e	not	local01, #0
1da2c     A7 26 62 FC | 	wrlong	local01, fp
1da30     CC 03 90 FD | 	jmp	#LR__2373
1da34                 | LR__2361
1da34                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1da34     08 4E 05 F1 | 	add	fp, #8
1da38     A7 26 02 FB | 	rdlong	local01, fp
1da3c     08 4E 85 F1 | 	sub	fp, #8
1da40     1E 26 0E F2 | 	cmp	local01, #30 wz
1da44     14 4E 05 A1 |  if_e	add	fp, #20
1da48     A7 2C 02 AB |  if_e	rdlong	local04, fp
1da4c     14 4E 85 A1 |  if_e	sub	fp, #20
1da50     16 2B 02 A6 |  if_e	mov	local03, local04
1da54     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1da58     48 00 90 5D |  if_ne	jmp	#LR__2362
1da5c     00 26 06 F6 | 	mov	local01, #0
1da60     A7 28 02 FB | 	rdlong	local02, fp
1da64     0C 4E 05 F1 | 	add	fp, #12
1da68     A7 12 02 FB | 	rdlong	arg01, fp
1da6c     0C 4E 85 F1 | 	sub	fp, #12
1da70     09 13 52 F6 | 	abs	arg01, arg01 wc
1da74     1F 2E C6 C9 |  if_b	decod	local05, #31
1da78     00 2E 06 36 |  if_ae	mov	local05, #0
1da7c     28 B7 B0 FD | 	call	#__system___float_fromuns
1da80     17 FB 61 F5 | 	xor	result1, local05
1da84     FD 14 02 F6 | 	mov	arg02, result1
1da88     14 13 02 F6 | 	mov	arg01, local02
1da8c     01 16 06 F6 | 	mov	arg03, #1
1da90     4C BF B0 FD | 	call	#__system___float_cmp
1da94     00 FA 0D F2 | 	cmp	result1, #0 wz
1da98     00 26 26 A6 |  if_e	not	local01, #0
1da9c     A7 26 62 FC | 	wrlong	local01, fp
1daa0     5C 03 90 FD | 	jmp	#LR__2373
1daa4                 | LR__2362
1daa4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1daa4     08 4E 05 F1 | 	add	fp, #8
1daa8     A7 26 02 FB | 	rdlong	local01, fp
1daac     08 4E 85 F1 | 	sub	fp, #8
1dab0     1E 26 0E F2 | 	cmp	local01, #30 wz
1dab4     14 4E 05 A1 |  if_e	add	fp, #20
1dab8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dabc     14 4E 85 A1 |  if_e	sub	fp, #20
1dac0     16 2B 02 A6 |  if_e	mov	local03, local04
1dac4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dac8     38 00 90 5D |  if_ne	jmp	#LR__2363
1dacc     00 26 06 F6 | 	mov	local01, #0
1dad0     A7 28 02 FB | 	rdlong	local02, fp
1dad4     0C 4E 05 F1 | 	add	fp, #12
1dad8     A7 12 02 FB | 	rdlong	arg01, fp
1dadc     0C 4E 85 F1 | 	sub	fp, #12
1dae0     C4 B6 B0 FD | 	call	#__system___float_fromuns
1dae4     FD 14 02 F6 | 	mov	arg02, result1
1dae8     14 13 02 F6 | 	mov	arg01, local02
1daec     01 16 06 F6 | 	mov	arg03, #1
1daf0     EC BE B0 FD | 	call	#__system___float_cmp
1daf4     00 FA 0D F2 | 	cmp	result1, #0 wz
1daf8     00 26 26 A6 |  if_e	not	local01, #0
1dafc     A7 26 62 FC | 	wrlong	local01, fp
1db00     FC 02 90 FD | 	jmp	#LR__2373
1db04                 | LR__2363
1db04                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1db04     08 4E 05 F1 | 	add	fp, #8
1db08     A7 26 02 FB | 	rdlong	local01, fp
1db0c     08 4E 85 F1 | 	sub	fp, #8
1db10     1C 26 0E F2 | 	cmp	local01, #28 wz
1db14     14 4E 05 A1 |  if_e	add	fp, #20
1db18     A7 2C 02 AB |  if_e	rdlong	local04, fp
1db1c     14 4E 85 A1 |  if_e	sub	fp, #20
1db20     16 2B 02 A6 |  if_e	mov	local03, local04
1db24     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1db28     44 00 90 5D |  if_ne	jmp	#LR__2364
1db2c     00 26 06 F6 | 	mov	local01, #0
1db30     A7 12 02 FB | 	rdlong	arg01, fp
1db34     09 13 52 F6 | 	abs	arg01, arg01 wc
1db38     1F 2E C6 C9 |  if_b	decod	local05, #31
1db3c     00 2E 06 36 |  if_ae	mov	local05, #0
1db40     64 B6 B0 FD | 	call	#__system___float_fromuns
1db44     17 FB 61 F5 | 	xor	result1, local05
1db48     FD 12 02 F6 | 	mov	arg01, result1
1db4c     0C 4E 05 F1 | 	add	fp, #12
1db50     A7 14 02 FB | 	rdlong	arg02, fp
1db54     0C 4E 85 F1 | 	sub	fp, #12
1db58     01 16 06 F6 | 	mov	arg03, #1
1db5c     80 BE B0 FD | 	call	#__system___float_cmp
1db60     00 FA 0D F2 | 	cmp	result1, #0 wz
1db64     00 26 26 A6 |  if_e	not	local01, #0
1db68     A7 26 62 FC | 	wrlong	local01, fp
1db6c     90 02 90 FD | 	jmp	#LR__2373
1db70                 | LR__2364
1db70                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1db70     08 4E 05 F1 | 	add	fp, #8
1db74     A7 26 02 FB | 	rdlong	local01, fp
1db78     08 4E 85 F1 | 	sub	fp, #8
1db7c     1C 26 0E F2 | 	cmp	local01, #28 wz
1db80     14 4E 05 A1 |  if_e	add	fp, #20
1db84     A7 2C 02 AB |  if_e	rdlong	local04, fp
1db88     14 4E 85 A1 |  if_e	sub	fp, #20
1db8c     16 2B 02 A6 |  if_e	mov	local03, local04
1db90     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1db94     24 00 90 5D |  if_ne	jmp	#LR__2365
1db98     00 26 06 F6 | 	mov	local01, #0
1db9c     A7 28 02 FB | 	rdlong	local02, fp
1dba0     0C 4E 05 F1 | 	add	fp, #12
1dba4     A7 2A 02 FB | 	rdlong	local03, fp
1dba8     0C 4E 85 F1 | 	sub	fp, #12
1dbac     15 29 0A F2 | 	cmp	local02, local03 wz
1dbb0     01 26 66 A6 |  if_e	neg	local01, #1
1dbb4     A7 26 62 FC | 	wrlong	local01, fp
1dbb8     44 02 90 FD | 	jmp	#LR__2373
1dbbc                 | LR__2365
1dbbc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1dbbc     08 4E 05 F1 | 	add	fp, #8
1dbc0     A7 26 02 FB | 	rdlong	local01, fp
1dbc4     08 4E 85 F1 | 	sub	fp, #8
1dbc8     1C 26 0E F2 | 	cmp	local01, #28 wz
1dbcc     14 4E 05 A1 |  if_e	add	fp, #20
1dbd0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dbd4     14 4E 85 A1 |  if_e	sub	fp, #20
1dbd8     16 2B 02 A6 |  if_e	mov	local03, local04
1dbdc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dbe0     24 00 90 5D |  if_ne	jmp	#LR__2366
1dbe4     00 26 06 F6 | 	mov	local01, #0
1dbe8     A7 28 02 FB | 	rdlong	local02, fp
1dbec     0C 4E 05 F1 | 	add	fp, #12
1dbf0     A7 2A 02 FB | 	rdlong	local03, fp
1dbf4     0C 4E 85 F1 | 	sub	fp, #12
1dbf8     15 29 0A F2 | 	cmp	local02, local03 wz
1dbfc     01 26 66 A6 |  if_e	neg	local01, #1
1dc00     A7 26 62 FC | 	wrlong	local01, fp
1dc04     F8 01 90 FD | 	jmp	#LR__2373
1dc08                 | LR__2366
1dc08                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1dc08     08 4E 05 F1 | 	add	fp, #8
1dc0c     A7 26 02 FB | 	rdlong	local01, fp
1dc10     08 4E 85 F1 | 	sub	fp, #8
1dc14     1D 26 0E F2 | 	cmp	local01, #29 wz
1dc18     14 4E 05 A1 |  if_e	add	fp, #20
1dc1c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dc20     14 4E 85 A1 |  if_e	sub	fp, #20
1dc24     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1dc28     34 00 90 5D |  if_ne	jmp	#LR__2367
1dc2c     00 26 06 F6 | 	mov	local01, #0
1dc30     A7 12 02 FB | 	rdlong	arg01, fp
1dc34     70 B5 B0 FD | 	call	#__system___float_fromuns
1dc38     FD 12 02 F6 | 	mov	arg01, result1
1dc3c     0C 4E 05 F1 | 	add	fp, #12
1dc40     A7 14 02 FB | 	rdlong	arg02, fp
1dc44     0C 4E 85 F1 | 	sub	fp, #12
1dc48     01 16 06 F6 | 	mov	arg03, #1
1dc4c     90 BD B0 FD | 	call	#__system___float_cmp
1dc50     00 FA 0D F2 | 	cmp	result1, #0 wz
1dc54     00 26 26 A6 |  if_e	not	local01, #0
1dc58     A7 26 62 FC | 	wrlong	local01, fp
1dc5c     A0 01 90 FD | 	jmp	#LR__2373
1dc60                 | LR__2367
1dc60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1dc60     08 4E 05 F1 | 	add	fp, #8
1dc64     A7 26 02 FB | 	rdlong	local01, fp
1dc68     08 4E 85 F1 | 	sub	fp, #8
1dc6c     1D 26 0E F2 | 	cmp	local01, #29 wz
1dc70     14 4E 05 A1 |  if_e	add	fp, #20
1dc74     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dc78     14 4E 85 A1 |  if_e	sub	fp, #20
1dc7c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dc80     24 00 90 5D |  if_ne	jmp	#LR__2368
1dc84     00 26 06 F6 | 	mov	local01, #0
1dc88     A7 28 02 FB | 	rdlong	local02, fp
1dc8c     0C 4E 05 F1 | 	add	fp, #12
1dc90     A7 2A 02 FB | 	rdlong	local03, fp
1dc94     0C 4E 85 F1 | 	sub	fp, #12
1dc98     15 29 0A F2 | 	cmp	local02, local03 wz
1dc9c     01 26 66 A6 |  if_e	neg	local01, #1
1dca0     A7 26 62 FC | 	wrlong	local01, fp
1dca4     58 01 90 FD | 	jmp	#LR__2373
1dca8                 | LR__2368
1dca8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1dca8     08 4E 05 F1 | 	add	fp, #8
1dcac     A7 26 02 FB | 	rdlong	local01, fp
1dcb0     08 4E 85 F1 | 	sub	fp, #8
1dcb4     1D 26 0E F2 | 	cmp	local01, #29 wz
1dcb8     14 4E 05 A1 |  if_e	add	fp, #20
1dcbc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dcc0     14 4E 85 A1 |  if_e	sub	fp, #20
1dcc4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dcc8     24 00 90 5D |  if_ne	jmp	#LR__2369
1dccc     00 26 06 F6 | 	mov	local01, #0
1dcd0     A7 28 02 FB | 	rdlong	local02, fp
1dcd4     0C 4E 05 F1 | 	add	fp, #12
1dcd8     A7 2A 02 FB | 	rdlong	local03, fp
1dcdc     0C 4E 85 F1 | 	sub	fp, #12
1dce0     15 29 0A F2 | 	cmp	local02, local03 wz
1dce4     01 26 66 A6 |  if_e	neg	local01, #1
1dce8     A7 26 62 FC | 	wrlong	local01, fp
1dcec     10 01 90 FD | 	jmp	#LR__2373
1dcf0                 | LR__2369
1dcf0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1dcf0     08 4E 05 F1 | 	add	fp, #8
1dcf4     A7 26 02 FB | 	rdlong	local01, fp
1dcf8     08 4E 85 F1 | 	sub	fp, #8
1dcfc     2B 26 0E F2 | 	cmp	local01, #43 wz
1dd00     14 4E 05 A1 |  if_e	add	fp, #20
1dd04     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dd08     14 4E 85 A1 |  if_e	sub	fp, #20
1dd0c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1dd10     30 00 90 5D |  if_ne	jmp	#LR__2370
1dd14     00 26 06 F6 | 	mov	local01, #0
1dd18     A7 12 02 FB | 	rdlong	arg01, fp
1dd1c     AC F9 BE FD | 	call	#_convertstring
1dd20     FD 12 02 F6 | 	mov	arg01, result1
1dd24     0C 4E 05 F1 | 	add	fp, #12
1dd28     A7 14 02 FB | 	rdlong	arg02, fp
1dd2c     0C 4E 85 F1 | 	sub	fp, #12
1dd30     28 8A B0 FD | 	call	#__system___string_cmp
1dd34     00 FA 0D F2 | 	cmp	result1, #0 wz
1dd38     00 26 26 A6 |  if_e	not	local01, #0
1dd3c     A7 26 62 FC | 	wrlong	local01, fp
1dd40     BC 00 90 FD | 	jmp	#LR__2373
1dd44                 | LR__2370
1dd44                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1dd44     08 4E 05 F1 | 	add	fp, #8
1dd48     A7 26 02 FB | 	rdlong	local01, fp
1dd4c     08 4E 85 F1 | 	sub	fp, #8
1dd50     1F 26 0E F2 | 	cmp	local01, #31 wz
1dd54     14 4E 05 A1 |  if_e	add	fp, #20
1dd58     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dd5c     14 4E 85 A1 |  if_e	sub	fp, #20
1dd60     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1dd64     34 00 90 5D |  if_ne	jmp	#LR__2371
1dd68     00 26 06 F6 | 	mov	local01, #0
1dd6c     A7 28 02 FB | 	rdlong	local02, fp
1dd70     0C 4E 05 F1 | 	add	fp, #12
1dd74     A7 12 02 FB | 	rdlong	arg01, fp
1dd78     0C 4E 85 F1 | 	sub	fp, #12
1dd7c     4C F9 BE FD | 	call	#_convertstring
1dd80     FD 14 02 F6 | 	mov	arg02, result1
1dd84     14 13 02 F6 | 	mov	arg01, local02
1dd88     D0 89 B0 FD | 	call	#__system___string_cmp
1dd8c     00 FA 0D F2 | 	cmp	result1, #0 wz
1dd90     00 26 26 A6 |  if_e	not	local01, #0
1dd94     A7 26 62 FC | 	wrlong	local01, fp
1dd98     64 00 90 FD | 	jmp	#LR__2373
1dd9c                 | LR__2371
1dd9c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1dd9c     08 4E 05 F1 | 	add	fp, #8
1dda0     A7 26 02 FB | 	rdlong	local01, fp
1dda4     08 4E 85 F1 | 	sub	fp, #8
1dda8     2B 26 0E F2 | 	cmp	local01, #43 wz
1ddac     14 4E 05 A1 |  if_e	add	fp, #20
1ddb0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ddb4     14 4E 85 A1 |  if_e	sub	fp, #20
1ddb8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ddbc     3C 00 90 5D |  if_ne	jmp	#LR__2372
1ddc0     00 26 06 F6 | 	mov	local01, #0
1ddc4     A7 12 02 FB | 	rdlong	arg01, fp
1ddc8     00 F9 BE FD | 	call	#_convertstring
1ddcc     FD 28 02 F6 | 	mov	local02, result1
1ddd0     0C 4E 05 F1 | 	add	fp, #12
1ddd4     A7 12 02 FB | 	rdlong	arg01, fp
1ddd8     0C 4E 85 F1 | 	sub	fp, #12
1dddc     EC F8 BE FD | 	call	#_convertstring
1dde0     FD 14 02 F6 | 	mov	arg02, result1
1dde4     14 13 02 F6 | 	mov	arg01, local02
1dde8     70 89 B0 FD | 	call	#__system___string_cmp
1ddec     00 FA 0D F2 | 	cmp	result1, #0 wz
1ddf0     00 26 26 A6 |  if_e	not	local01, #0
1ddf4     A7 26 62 FC | 	wrlong	local01, fp
1ddf8     04 00 90 FD | 	jmp	#LR__2373
1ddfc                 | LR__2372
1ddfc     A7 00 68 FC | 	wrlong	#0, fp
1de00                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1de00                 | LR__2373
1de00     08 4E 05 F1 | 	add	fp, #8
1de04     A7 38 68 FC | 	wrlong	#28, fp
1de08     08 4E 85 F1 | 	sub	fp, #8
1de0c     A7 12 02 F6 | 	mov	arg01, fp
1de10     D8 F7 BE FD | 	call	#_push
1de14     A7 F0 03 F6 | 	mov	ptra, fp
1de18     B2 00 A0 FD | 	call	#popregs_
1de1c                 | _do_eq_ret
1de1c     2D 00 64 FD | 	ret
1de20                 | 
1de20                 | ' 
1de20                 | ' '--------------------------------- fdiv (/) - float divide
1de20                 | ' 
1de20                 | ' sub do_fdiv 
1de20                 | _do_fdiv
1de20     02 4A 05 F6 | 	mov	COUNT_, #2
1de24     A8 00 A0 FD | 	call	#pushregs_
1de28     18 F0 07 F1 | 	add	ptra, #24
1de2c     24 F7 BE FD | 	call	#_pop
1de30     FD 14 02 F6 | 	mov	arg02, result1
1de34     FE 12 02 F6 | 	mov	arg01, result2
1de38     FF 26 02 F6 | 	mov	local01, result3
1de3c     0C 4E 05 F1 | 	add	fp, #12
1de40     A7 14 62 FC | 	wrlong	arg02, fp
1de44     04 4E 05 F1 | 	add	fp, #4
1de48     A7 12 62 FC | 	wrlong	arg01, fp
1de4c     04 4E 05 F1 | 	add	fp, #4
1de50     A7 26 62 FC | 	wrlong	local01, fp
1de54     14 4E 85 F1 | 	sub	fp, #20
1de58     F8 F6 BE FD | 	call	#_pop
1de5c     A7 FA 61 FC | 	wrlong	result1, fp
1de60     04 4E 05 F1 | 	add	fp, #4
1de64     A7 FC 61 FC | 	wrlong	result2, fp
1de68     04 4E 05 F1 | 	add	fp, #4
1de6c     A7 FE 61 FC | 	wrlong	result3, fp
1de70                 | ' 
1de70                 | ' t2=pop()
1de70                 | ' t1=pop()
1de70                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1de70     08 4E 85 F1 | 	sub	fp, #8
1de74     1F FE 0D F2 | 	cmp	result3, #31 wz
1de78     14 4E 05 51 |  if_ne	add	fp, #20
1de7c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1de80     14 4E 85 51 |  if_ne	sub	fp, #20
1de84     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1de88     A7 14 68 AC |  if_e	wrlong	#10, fp
1de8c     08 4E 05 A1 |  if_e	add	fp, #8
1de90     A7 FE 69 AC |  if_e	wrlong	#255, fp
1de94     08 4E 85 A1 |  if_e	sub	fp, #8
1de98     38 01 90 AD |  if_e	jmp	#LR__2385
1de9c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1de9c     08 4E 05 F1 | 	add	fp, #8
1dea0     A7 14 02 FB | 	rdlong	arg02, fp
1dea4     08 4E 85 F1 | 	sub	fp, #8
1dea8     1C 14 0E F2 | 	cmp	arg02, #28 wz
1deac     28 00 90 5D |  if_ne	jmp	#LR__2380
1deb0     08 4E 05 F1 | 	add	fp, #8
1deb4     A7 3C 68 FC | 	wrlong	#30, fp
1deb8     08 4E 85 F1 | 	sub	fp, #8
1debc     A7 12 02 FB | 	rdlong	arg01, fp
1dec0     09 13 52 F6 | 	abs	arg01, arg01 wc
1dec4     1F 28 C6 C9 |  if_b	decod	local02, #31
1dec8     00 28 06 36 |  if_ae	mov	local02, #0
1decc     D8 B2 B0 FD | 	call	#__system___float_fromuns
1ded0     14 FB 61 F5 | 	xor	result1, local02
1ded4     A7 FA 61 FC | 	wrlong	result1, fp
1ded8                 | LR__2380
1ded8                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1ded8     08 4E 05 F1 | 	add	fp, #8
1dedc     A7 14 02 FB | 	rdlong	arg02, fp
1dee0     08 4E 85 F1 | 	sub	fp, #8
1dee4     1D 14 0E F2 | 	cmp	arg02, #29 wz
1dee8     18 00 90 5D |  if_ne	jmp	#LR__2381
1deec     08 4E 05 F1 | 	add	fp, #8
1def0     A7 3C 68 FC | 	wrlong	#30, fp
1def4     08 4E 85 F1 | 	sub	fp, #8
1def8     A7 12 02 FB | 	rdlong	arg01, fp
1defc     A8 B2 B0 FD | 	call	#__system___float_fromuns
1df00     A7 FA 61 FC | 	wrlong	result1, fp
1df04                 | LR__2381
1df04                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1df04     14 4E 05 F1 | 	add	fp, #20
1df08     A7 14 02 FB | 	rdlong	arg02, fp
1df0c     14 4E 85 F1 | 	sub	fp, #20
1df10     1C 14 0E F2 | 	cmp	arg02, #28 wz
1df14     34 00 90 5D |  if_ne	jmp	#LR__2382
1df18     14 4E 05 F1 | 	add	fp, #20
1df1c     A7 3C 68 FC | 	wrlong	#30, fp
1df20     08 4E 85 F1 | 	sub	fp, #8
1df24     A7 12 02 FB | 	rdlong	arg01, fp
1df28     0C 4E 85 F1 | 	sub	fp, #12
1df2c     09 13 52 F6 | 	abs	arg01, arg01 wc
1df30     1F 28 C6 C9 |  if_b	decod	local02, #31
1df34     00 28 06 36 |  if_ae	mov	local02, #0
1df38     6C B2 B0 FD | 	call	#__system___float_fromuns
1df3c     14 FB 61 F5 | 	xor	result1, local02
1df40     0C 4E 05 F1 | 	add	fp, #12
1df44     A7 FA 61 FC | 	wrlong	result1, fp
1df48     0C 4E 85 F1 | 	sub	fp, #12
1df4c                 | LR__2382
1df4c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1df4c     14 4E 05 F1 | 	add	fp, #20
1df50     A7 14 02 FB | 	rdlong	arg02, fp
1df54     14 4E 85 F1 | 	sub	fp, #20
1df58     1D 14 0E F2 | 	cmp	arg02, #29 wz
1df5c     24 00 90 5D |  if_ne	jmp	#LR__2383
1df60     14 4E 05 F1 | 	add	fp, #20
1df64     A7 3C 68 FC | 	wrlong	#30, fp
1df68     08 4E 85 F1 | 	sub	fp, #8
1df6c     A7 12 02 FB | 	rdlong	arg01, fp
1df70     0C 4E 85 F1 | 	sub	fp, #12
1df74     30 B2 B0 FD | 	call	#__system___float_fromuns
1df78     0C 4E 05 F1 | 	add	fp, #12
1df7c     A7 FA 61 FC | 	wrlong	result1, fp
1df80     0C 4E 85 F1 | 	sub	fp, #12
1df84                 | LR__2383
1df84                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1df84     08 4E 05 F1 | 	add	fp, #8
1df88     A7 14 02 FB | 	rdlong	arg02, fp
1df8c     08 4E 85 F1 | 	sub	fp, #8
1df90     1E 14 0E F2 | 	cmp	arg02, #30 wz
1df94     14 4E 05 A1 |  if_e	add	fp, #20
1df98     A7 26 02 AB |  if_e	rdlong	local01, fp
1df9c     14 4E 85 A1 |  if_e	sub	fp, #20
1dfa0     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1dfa4     1C 00 90 5D |  if_ne	jmp	#LR__2384
1dfa8     A7 12 02 FB | 	rdlong	arg01, fp
1dfac     0C 4E 05 F1 | 	add	fp, #12
1dfb0     A7 14 02 FB | 	rdlong	arg02, fp
1dfb4     0C 4E 85 F1 | 	sub	fp, #12
1dfb8     F4 B7 B0 FD | 	call	#__system___float_div
1dfbc     A7 FA 61 FC | 	wrlong	result1, fp
1dfc0     10 00 90 FD | 	jmp	#LR__2385
1dfc4                 | LR__2384
1dfc4     A7 16 68 FC | 	wrlong	#11, fp
1dfc8     08 4E 05 F1 | 	add	fp, #8
1dfcc     A7 FE 69 FC | 	wrlong	#255, fp
1dfd0     08 4E 85 F1 | 	sub	fp, #8
1dfd4                 | LR__2385
1dfd4     A7 12 02 F6 | 	mov	arg01, fp
1dfd8     10 F6 BE FD | 	call	#_push
1dfdc     A7 F0 03 F6 | 	mov	ptra, fp
1dfe0     B2 00 A0 FD | 	call	#popregs_
1dfe4                 | _do_fdiv_ret
1dfe4     2D 00 64 FD | 	ret
1dfe8                 | 
1dfe8                 | ' 
1dfe8                 | ' '--------------------------------- greater or equal (>=)
1dfe8                 | ' 
1dfe8                 | ' sub do_ge
1dfe8                 | _do_ge
1dfe8     05 4A 05 F6 | 	mov	COUNT_, #5
1dfec     A8 00 A0 FD | 	call	#pushregs_
1dff0     18 F0 07 F1 | 	add	ptra, #24
1dff4     5C F5 BE FD | 	call	#_pop
1dff8     FD 26 02 F6 | 	mov	local01, result1
1dffc     FE 28 02 F6 | 	mov	local02, result2
1e000     FF 2A 02 F6 | 	mov	local03, result3
1e004     0C 4E 05 F1 | 	add	fp, #12
1e008     A7 26 62 FC | 	wrlong	local01, fp
1e00c     04 4E 05 F1 | 	add	fp, #4
1e010     A7 28 62 FC | 	wrlong	local02, fp
1e014     04 4E 05 F1 | 	add	fp, #4
1e018     A7 2A 62 FC | 	wrlong	local03, fp
1e01c     14 4E 85 F1 | 	sub	fp, #20
1e020     30 F5 BE FD | 	call	#_pop
1e024     FF 2A 02 F6 | 	mov	local03, result3
1e028     A7 FA 61 FC | 	wrlong	result1, fp
1e02c     04 4E 05 F1 | 	add	fp, #4
1e030     A7 FC 61 FC | 	wrlong	result2, fp
1e034     04 4E 05 F1 | 	add	fp, #4
1e038     A7 2A 62 FC | 	wrlong	local03, fp
1e03c                 | ' 
1e03c                 | ' t2=pop()
1e03c                 | ' t1=pop()
1e03c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1e03c     08 4E 85 F1 | 	sub	fp, #8
1e040     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e044     14 4E 05 A1 |  if_e	add	fp, #20
1e048     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e04c     14 4E 85 A1 |  if_e	sub	fp, #20
1e050     16 2B 02 A6 |  if_e	mov	local03, local04
1e054     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e058     28 00 90 5D |  if_ne	jmp	#LR__2390
1e05c     00 26 06 F6 | 	mov	local01, #0
1e060     A7 12 02 FB | 	rdlong	arg01, fp
1e064     0C 4E 05 F1 | 	add	fp, #12
1e068     A7 14 02 FB | 	rdlong	arg02, fp
1e06c     0C 4E 85 F1 | 	sub	fp, #12
1e070     E8 86 B0 FD | 	call	#__system___string_cmp
1e074     00 FA 55 F2 | 	cmps	result1, #0 wc
1e078     00 26 26 36 |  if_ae	not	local01, #0
1e07c     A7 26 62 FC | 	wrlong	local01, fp
1e080     24 04 90 FD | 	jmp	#LR__2403
1e084                 | LR__2390
1e084                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1e084     08 4E 05 F1 | 	add	fp, #8
1e088     A7 26 02 FB | 	rdlong	local01, fp
1e08c     08 4E 85 F1 | 	sub	fp, #8
1e090     1E 26 0E F2 | 	cmp	local01, #30 wz
1e094     14 4E 05 A1 |  if_e	add	fp, #20
1e098     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e09c     14 4E 85 A1 |  if_e	sub	fp, #20
1e0a0     16 2B 02 A6 |  if_e	mov	local03, local04
1e0a4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e0a8     2C 00 90 5D |  if_ne	jmp	#LR__2391
1e0ac     00 26 06 F6 | 	mov	local01, #0
1e0b0     A7 12 02 FB | 	rdlong	arg01, fp
1e0b4     0C 4E 05 F1 | 	add	fp, #12
1e0b8     A7 14 02 FB | 	rdlong	arg02, fp
1e0bc     0C 4E 85 F1 | 	sub	fp, #12
1e0c0     01 16 66 F6 | 	neg	arg03, #1
1e0c4     18 B9 B0 FD | 	call	#__system___float_cmp
1e0c8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e0cc     00 26 26 36 |  if_ae	not	local01, #0
1e0d0     A7 26 62 FC | 	wrlong	local01, fp
1e0d4     D0 03 90 FD | 	jmp	#LR__2403
1e0d8                 | LR__2391
1e0d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1e0d8     08 4E 05 F1 | 	add	fp, #8
1e0dc     A7 26 02 FB | 	rdlong	local01, fp
1e0e0     08 4E 85 F1 | 	sub	fp, #8
1e0e4     1E 26 0E F2 | 	cmp	local01, #30 wz
1e0e8     14 4E 05 A1 |  if_e	add	fp, #20
1e0ec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e0f0     14 4E 85 A1 |  if_e	sub	fp, #20
1e0f4     16 2B 02 A6 |  if_e	mov	local03, local04
1e0f8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e0fc     48 00 90 5D |  if_ne	jmp	#LR__2392
1e100     00 26 06 F6 | 	mov	local01, #0
1e104     A7 28 02 FB | 	rdlong	local02, fp
1e108     0C 4E 05 F1 | 	add	fp, #12
1e10c     A7 12 02 FB | 	rdlong	arg01, fp
1e110     0C 4E 85 F1 | 	sub	fp, #12
1e114     09 13 52 F6 | 	abs	arg01, arg01 wc
1e118     1F 2E C6 C9 |  if_b	decod	local05, #31
1e11c     00 2E 06 36 |  if_ae	mov	local05, #0
1e120     84 B0 B0 FD | 	call	#__system___float_fromuns
1e124     17 FB 61 F5 | 	xor	result1, local05
1e128     FD 14 02 F6 | 	mov	arg02, result1
1e12c     14 13 02 F6 | 	mov	arg01, local02
1e130     01 16 66 F6 | 	neg	arg03, #1
1e134     A8 B8 B0 FD | 	call	#__system___float_cmp
1e138     00 FA 55 F2 | 	cmps	result1, #0 wc
1e13c     00 26 26 36 |  if_ae	not	local01, #0
1e140     A7 26 62 FC | 	wrlong	local01, fp
1e144     60 03 90 FD | 	jmp	#LR__2403
1e148                 | LR__2392
1e148                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1e148     08 4E 05 F1 | 	add	fp, #8
1e14c     A7 26 02 FB | 	rdlong	local01, fp
1e150     08 4E 85 F1 | 	sub	fp, #8
1e154     1E 26 0E F2 | 	cmp	local01, #30 wz
1e158     14 4E 05 A1 |  if_e	add	fp, #20
1e15c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e160     14 4E 85 A1 |  if_e	sub	fp, #20
1e164     16 2B 02 A6 |  if_e	mov	local03, local04
1e168     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e16c     38 00 90 5D |  if_ne	jmp	#LR__2393
1e170     00 26 06 F6 | 	mov	local01, #0
1e174     A7 28 02 FB | 	rdlong	local02, fp
1e178     0C 4E 05 F1 | 	add	fp, #12
1e17c     A7 12 02 FB | 	rdlong	arg01, fp
1e180     0C 4E 85 F1 | 	sub	fp, #12
1e184     20 B0 B0 FD | 	call	#__system___float_fromuns
1e188     FD 14 02 F6 | 	mov	arg02, result1
1e18c     14 13 02 F6 | 	mov	arg01, local02
1e190     01 16 66 F6 | 	neg	arg03, #1
1e194     48 B8 B0 FD | 	call	#__system___float_cmp
1e198     00 FA 55 F2 | 	cmps	result1, #0 wc
1e19c     00 26 26 36 |  if_ae	not	local01, #0
1e1a0     A7 26 62 FC | 	wrlong	local01, fp
1e1a4     00 03 90 FD | 	jmp	#LR__2403
1e1a8                 | LR__2393
1e1a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1e1a8     08 4E 05 F1 | 	add	fp, #8
1e1ac     A7 26 02 FB | 	rdlong	local01, fp
1e1b0     08 4E 85 F1 | 	sub	fp, #8
1e1b4     1C 26 0E F2 | 	cmp	local01, #28 wz
1e1b8     14 4E 05 A1 |  if_e	add	fp, #20
1e1bc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e1c0     14 4E 85 A1 |  if_e	sub	fp, #20
1e1c4     16 2B 02 A6 |  if_e	mov	local03, local04
1e1c8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e1cc     44 00 90 5D |  if_ne	jmp	#LR__2394
1e1d0     00 26 06 F6 | 	mov	local01, #0
1e1d4     A7 12 02 FB | 	rdlong	arg01, fp
1e1d8     09 13 52 F6 | 	abs	arg01, arg01 wc
1e1dc     1F 2E C6 C9 |  if_b	decod	local05, #31
1e1e0     00 2E 06 36 |  if_ae	mov	local05, #0
1e1e4     C0 AF B0 FD | 	call	#__system___float_fromuns
1e1e8     17 FB 61 F5 | 	xor	result1, local05
1e1ec     FD 12 02 F6 | 	mov	arg01, result1
1e1f0     0C 4E 05 F1 | 	add	fp, #12
1e1f4     A7 14 02 FB | 	rdlong	arg02, fp
1e1f8     0C 4E 85 F1 | 	sub	fp, #12
1e1fc     01 16 66 F6 | 	neg	arg03, #1
1e200     DC B7 B0 FD | 	call	#__system___float_cmp
1e204     00 FA 55 F2 | 	cmps	result1, #0 wc
1e208     00 26 26 36 |  if_ae	not	local01, #0
1e20c     A7 26 62 FC | 	wrlong	local01, fp
1e210     94 02 90 FD | 	jmp	#LR__2403
1e214                 | LR__2394
1e214                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1e214     08 4E 05 F1 | 	add	fp, #8
1e218     A7 26 02 FB | 	rdlong	local01, fp
1e21c     08 4E 85 F1 | 	sub	fp, #8
1e220     1C 26 0E F2 | 	cmp	local01, #28 wz
1e224     14 4E 05 A1 |  if_e	add	fp, #20
1e228     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e22c     14 4E 85 A1 |  if_e	sub	fp, #20
1e230     16 2B 02 A6 |  if_e	mov	local03, local04
1e234     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e238     24 00 90 5D |  if_ne	jmp	#LR__2395
1e23c     00 26 06 F6 | 	mov	local01, #0
1e240     A7 28 02 FB | 	rdlong	local02, fp
1e244     0C 4E 05 F1 | 	add	fp, #12
1e248     A7 2A 02 FB | 	rdlong	local03, fp
1e24c     0C 4E 85 F1 | 	sub	fp, #12
1e250     15 29 52 F2 | 	cmps	local02, local03 wc
1e254     01 26 66 36 |  if_ae	neg	local01, #1
1e258     A7 26 62 FC | 	wrlong	local01, fp
1e25c     48 02 90 FD | 	jmp	#LR__2403
1e260                 | LR__2395
1e260                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1e260     08 4E 05 F1 | 	add	fp, #8
1e264     A7 26 02 FB | 	rdlong	local01, fp
1e268     08 4E 85 F1 | 	sub	fp, #8
1e26c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e270     14 4E 05 A1 |  if_e	add	fp, #20
1e274     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e278     14 4E 85 A1 |  if_e	sub	fp, #20
1e27c     16 2B 02 A6 |  if_e	mov	local03, local04
1e280     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e284     24 00 90 5D |  if_ne	jmp	#LR__2396
1e288     00 26 06 F6 | 	mov	local01, #0
1e28c     A7 28 02 FB | 	rdlong	local02, fp
1e290     0C 4E 05 F1 | 	add	fp, #12
1e294     A7 2A 02 FB | 	rdlong	local03, fp
1e298     0C 4E 85 F1 | 	sub	fp, #12
1e29c     15 29 52 F2 | 	cmps	local02, local03 wc
1e2a0     01 26 66 36 |  if_ae	neg	local01, #1
1e2a4     A7 26 62 FC | 	wrlong	local01, fp
1e2a8     FC 01 90 FD | 	jmp	#LR__2403
1e2ac                 | LR__2396
1e2ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1e2ac     08 4E 05 F1 | 	add	fp, #8
1e2b0     A7 26 02 FB | 	rdlong	local01, fp
1e2b4     08 4E 85 F1 | 	sub	fp, #8
1e2b8     1D 26 0E F2 | 	cmp	local01, #29 wz
1e2bc     14 4E 05 A1 |  if_e	add	fp, #20
1e2c0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e2c4     14 4E 85 A1 |  if_e	sub	fp, #20
1e2c8     16 2B 02 A6 |  if_e	mov	local03, local04
1e2cc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e2d0     34 00 90 5D |  if_ne	jmp	#LR__2397
1e2d4     00 26 06 F6 | 	mov	local01, #0
1e2d8     A7 12 02 FB | 	rdlong	arg01, fp
1e2dc     C8 AE B0 FD | 	call	#__system___float_fromuns
1e2e0     FD 12 02 F6 | 	mov	arg01, result1
1e2e4     0C 4E 05 F1 | 	add	fp, #12
1e2e8     A7 14 02 FB | 	rdlong	arg02, fp
1e2ec     0C 4E 85 F1 | 	sub	fp, #12
1e2f0     01 16 66 F6 | 	neg	arg03, #1
1e2f4     E8 B6 B0 FD | 	call	#__system___float_cmp
1e2f8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e2fc     00 26 26 36 |  if_ae	not	local01, #0
1e300     A7 26 62 FC | 	wrlong	local01, fp
1e304     A0 01 90 FD | 	jmp	#LR__2403
1e308                 | LR__2397
1e308                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1e308     08 4E 05 F1 | 	add	fp, #8
1e30c     A7 26 02 FB | 	rdlong	local01, fp
1e310     08 4E 85 F1 | 	sub	fp, #8
1e314     1D 26 0E F2 | 	cmp	local01, #29 wz
1e318     14 4E 05 A1 |  if_e	add	fp, #20
1e31c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e320     14 4E 85 A1 |  if_e	sub	fp, #20
1e324     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1e328     24 00 90 5D |  if_ne	jmp	#LR__2398
1e32c     00 26 06 F6 | 	mov	local01, #0
1e330     A7 28 02 FB | 	rdlong	local02, fp
1e334     0C 4E 05 F1 | 	add	fp, #12
1e338     A7 2A 02 FB | 	rdlong	local03, fp
1e33c     0C 4E 85 F1 | 	sub	fp, #12
1e340     15 29 52 F2 | 	cmps	local02, local03 wc
1e344     01 26 66 36 |  if_ae	neg	local01, #1
1e348     A7 26 62 FC | 	wrlong	local01, fp
1e34c     58 01 90 FD | 	jmp	#LR__2403
1e350                 | LR__2398
1e350                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1e350     08 4E 05 F1 | 	add	fp, #8
1e354     A7 26 02 FB | 	rdlong	local01, fp
1e358     08 4E 85 F1 | 	sub	fp, #8
1e35c     1D 26 0E F2 | 	cmp	local01, #29 wz
1e360     14 4E 05 A1 |  if_e	add	fp, #20
1e364     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e368     14 4E 85 A1 |  if_e	sub	fp, #20
1e36c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e370     24 00 90 5D |  if_ne	jmp	#LR__2399
1e374     00 26 06 F6 | 	mov	local01, #0
1e378     A7 28 02 FB | 	rdlong	local02, fp
1e37c     0C 4E 05 F1 | 	add	fp, #12
1e380     A7 2A 02 FB | 	rdlong	local03, fp
1e384     0C 4E 85 F1 | 	sub	fp, #12
1e388     15 29 12 F2 | 	cmp	local02, local03 wc
1e38c     01 26 66 36 |  if_ae	neg	local01, #1
1e390     A7 26 62 FC | 	wrlong	local01, fp
1e394     10 01 90 FD | 	jmp	#LR__2403
1e398                 | LR__2399
1e398                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1e398     08 4E 05 F1 | 	add	fp, #8
1e39c     A7 26 02 FB | 	rdlong	local01, fp
1e3a0     08 4E 85 F1 | 	sub	fp, #8
1e3a4     2B 26 0E F2 | 	cmp	local01, #43 wz
1e3a8     14 4E 05 A1 |  if_e	add	fp, #20
1e3ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e3b0     14 4E 85 A1 |  if_e	sub	fp, #20
1e3b4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e3b8     30 00 90 5D |  if_ne	jmp	#LR__2400
1e3bc     00 26 06 F6 | 	mov	local01, #0
1e3c0     A7 12 02 FB | 	rdlong	arg01, fp
1e3c4     04 F3 BE FD | 	call	#_convertstring
1e3c8     FD 12 02 F6 | 	mov	arg01, result1
1e3cc     0C 4E 05 F1 | 	add	fp, #12
1e3d0     A7 14 02 FB | 	rdlong	arg02, fp
1e3d4     0C 4E 85 F1 | 	sub	fp, #12
1e3d8     80 83 B0 FD | 	call	#__system___string_cmp
1e3dc     00 FA 55 F2 | 	cmps	result1, #0 wc
1e3e0     00 26 26 36 |  if_ae	not	local01, #0
1e3e4     A7 26 62 FC | 	wrlong	local01, fp
1e3e8     BC 00 90 FD | 	jmp	#LR__2403
1e3ec                 | LR__2400
1e3ec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1e3ec     08 4E 05 F1 | 	add	fp, #8
1e3f0     A7 26 02 FB | 	rdlong	local01, fp
1e3f4     08 4E 85 F1 | 	sub	fp, #8
1e3f8     1F 26 0E F2 | 	cmp	local01, #31 wz
1e3fc     14 4E 05 A1 |  if_e	add	fp, #20
1e400     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e404     14 4E 85 A1 |  if_e	sub	fp, #20
1e408     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e40c     34 00 90 5D |  if_ne	jmp	#LR__2401
1e410     00 26 06 F6 | 	mov	local01, #0
1e414     A7 28 02 FB | 	rdlong	local02, fp
1e418     0C 4E 05 F1 | 	add	fp, #12
1e41c     A7 12 02 FB | 	rdlong	arg01, fp
1e420     0C 4E 85 F1 | 	sub	fp, #12
1e424     A4 F2 BE FD | 	call	#_convertstring
1e428     FD 14 02 F6 | 	mov	arg02, result1
1e42c     14 13 02 F6 | 	mov	arg01, local02
1e430     28 83 B0 FD | 	call	#__system___string_cmp
1e434     00 FA 55 F2 | 	cmps	result1, #0 wc
1e438     00 26 26 36 |  if_ae	not	local01, #0
1e43c     A7 26 62 FC | 	wrlong	local01, fp
1e440     64 00 90 FD | 	jmp	#LR__2403
1e444                 | LR__2401
1e444                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1e444     08 4E 05 F1 | 	add	fp, #8
1e448     A7 26 02 FB | 	rdlong	local01, fp
1e44c     08 4E 85 F1 | 	sub	fp, #8
1e450     2B 26 0E F2 | 	cmp	local01, #43 wz
1e454     14 4E 05 A1 |  if_e	add	fp, #20
1e458     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e45c     14 4E 85 A1 |  if_e	sub	fp, #20
1e460     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e464     3C 00 90 5D |  if_ne	jmp	#LR__2402
1e468     00 26 06 F6 | 	mov	local01, #0
1e46c     A7 12 02 FB | 	rdlong	arg01, fp
1e470     58 F2 BE FD | 	call	#_convertstring
1e474     FD 28 02 F6 | 	mov	local02, result1
1e478     0C 4E 05 F1 | 	add	fp, #12
1e47c     A7 12 02 FB | 	rdlong	arg01, fp
1e480     0C 4E 85 F1 | 	sub	fp, #12
1e484     44 F2 BE FD | 	call	#_convertstring
1e488     FD 14 02 F6 | 	mov	arg02, result1
1e48c     14 13 02 F6 | 	mov	arg01, local02
1e490     C8 82 B0 FD | 	call	#__system___string_cmp
1e494     00 FA 55 F2 | 	cmps	result1, #0 wc
1e498     00 26 26 36 |  if_ae	not	local01, #0
1e49c     A7 26 62 FC | 	wrlong	local01, fp
1e4a0     04 00 90 FD | 	jmp	#LR__2403
1e4a4                 | LR__2402
1e4a4     A7 00 68 FC | 	wrlong	#0, fp
1e4a8                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e4a8                 | LR__2403
1e4a8     08 4E 05 F1 | 	add	fp, #8
1e4ac     A7 38 68 FC | 	wrlong	#28, fp
1e4b0     08 4E 85 F1 | 	sub	fp, #8
1e4b4                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e4b4     A7 26 0A FB | 	rdlong	local01, fp wz
1e4b8     A7 02 68 5C |  if_ne	wrlong	#1, fp
1e4bc     A7 12 02 F6 | 	mov	arg01, fp
1e4c0     28 F1 BE FD | 	call	#_push
1e4c4     A7 F0 03 F6 | 	mov	ptra, fp
1e4c8     B2 00 A0 FD | 	call	#popregs_
1e4cc                 | _do_ge_ret
1e4cc     2D 00 64 FD | 	ret
1e4d0                 | 
1e4d0                 | ' 
1e4d0                 | ' '--------------------------------- greater than (>)
1e4d0                 | ' 
1e4d0                 | ' sub do_gt
1e4d0                 | _do_gt
1e4d0     05 4A 05 F6 | 	mov	COUNT_, #5
1e4d4     A8 00 A0 FD | 	call	#pushregs_
1e4d8     18 F0 07 F1 | 	add	ptra, #24
1e4dc     74 F0 BE FD | 	call	#_pop
1e4e0     FD 26 02 F6 | 	mov	local01, result1
1e4e4     FE 28 02 F6 | 	mov	local02, result2
1e4e8     FF 2A 02 F6 | 	mov	local03, result3
1e4ec     0C 4E 05 F1 | 	add	fp, #12
1e4f0     A7 26 62 FC | 	wrlong	local01, fp
1e4f4     04 4E 05 F1 | 	add	fp, #4
1e4f8     A7 28 62 FC | 	wrlong	local02, fp
1e4fc     04 4E 05 F1 | 	add	fp, #4
1e500     A7 2A 62 FC | 	wrlong	local03, fp
1e504     14 4E 85 F1 | 	sub	fp, #20
1e508     48 F0 BE FD | 	call	#_pop
1e50c     FF 2A 02 F6 | 	mov	local03, result3
1e510     A7 FA 61 FC | 	wrlong	result1, fp
1e514     04 4E 05 F1 | 	add	fp, #4
1e518     A7 FC 61 FC | 	wrlong	result2, fp
1e51c     04 4E 05 F1 | 	add	fp, #4
1e520     A7 2A 62 FC | 	wrlong	local03, fp
1e524                 | ' 
1e524                 | ' t2=pop()
1e524                 | ' t1=pop()
1e524                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1e524     08 4E 85 F1 | 	sub	fp, #8
1e528     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e52c     14 4E 05 A1 |  if_e	add	fp, #20
1e530     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e534     14 4E 85 A1 |  if_e	sub	fp, #20
1e538     16 2B 02 A6 |  if_e	mov	local03, local04
1e53c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e540     28 00 90 5D |  if_ne	jmp	#LR__2410
1e544     00 26 06 F6 | 	mov	local01, #0
1e548     A7 12 02 FB | 	rdlong	arg01, fp
1e54c     0C 4E 05 F1 | 	add	fp, #12
1e550     A7 14 02 FB | 	rdlong	arg02, fp
1e554     0C 4E 85 F1 | 	sub	fp, #12
1e558     00 82 B0 FD | 	call	#__system___string_cmp
1e55c     01 FA 55 F2 | 	cmps	result1, #1 wc
1e560     00 26 26 36 |  if_ae	not	local01, #0
1e564     A7 26 62 FC | 	wrlong	local01, fp
1e568     20 04 90 FD | 	jmp	#LR__2423
1e56c                 | LR__2410
1e56c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1e56c     08 4E 05 F1 | 	add	fp, #8
1e570     A7 26 02 FB | 	rdlong	local01, fp
1e574     08 4E 85 F1 | 	sub	fp, #8
1e578     1E 26 0E F2 | 	cmp	local01, #30 wz
1e57c     14 4E 05 A1 |  if_e	add	fp, #20
1e580     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e584     14 4E 85 A1 |  if_e	sub	fp, #20
1e588     16 2B 02 A6 |  if_e	mov	local03, local04
1e58c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e590     2C 00 90 5D |  if_ne	jmp	#LR__2411
1e594     00 26 06 F6 | 	mov	local01, #0
1e598     A7 12 02 FB | 	rdlong	arg01, fp
1e59c     0C 4E 05 F1 | 	add	fp, #12
1e5a0     A7 14 02 FB | 	rdlong	arg02, fp
1e5a4     0C 4E 85 F1 | 	sub	fp, #12
1e5a8     01 16 66 F6 | 	neg	arg03, #1
1e5ac     30 B4 B0 FD | 	call	#__system___float_cmp
1e5b0     01 FA 55 F2 | 	cmps	result1, #1 wc
1e5b4     00 26 26 36 |  if_ae	not	local01, #0
1e5b8     A7 26 62 FC | 	wrlong	local01, fp
1e5bc     CC 03 90 FD | 	jmp	#LR__2423
1e5c0                 | LR__2411
1e5c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1e5c0     08 4E 05 F1 | 	add	fp, #8
1e5c4     A7 26 02 FB | 	rdlong	local01, fp
1e5c8     08 4E 85 F1 | 	sub	fp, #8
1e5cc     1E 26 0E F2 | 	cmp	local01, #30 wz
1e5d0     14 4E 05 A1 |  if_e	add	fp, #20
1e5d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e5d8     14 4E 85 A1 |  if_e	sub	fp, #20
1e5dc     16 2B 02 A6 |  if_e	mov	local03, local04
1e5e0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e5e4     48 00 90 5D |  if_ne	jmp	#LR__2412
1e5e8     00 26 06 F6 | 	mov	local01, #0
1e5ec     A7 28 02 FB | 	rdlong	local02, fp
1e5f0     0C 4E 05 F1 | 	add	fp, #12
1e5f4     A7 12 02 FB | 	rdlong	arg01, fp
1e5f8     0C 4E 85 F1 | 	sub	fp, #12
1e5fc     09 13 52 F6 | 	abs	arg01, arg01 wc
1e600     1F 2E C6 C9 |  if_b	decod	local05, #31
1e604     00 2E 06 36 |  if_ae	mov	local05, #0
1e608     9C AB B0 FD | 	call	#__system___float_fromuns
1e60c     17 FB 61 F5 | 	xor	result1, local05
1e610     FD 14 02 F6 | 	mov	arg02, result1
1e614     14 13 02 F6 | 	mov	arg01, local02
1e618     01 16 66 F6 | 	neg	arg03, #1
1e61c     C0 B3 B0 FD | 	call	#__system___float_cmp
1e620     01 FA 55 F2 | 	cmps	result1, #1 wc
1e624     00 26 26 36 |  if_ae	not	local01, #0
1e628     A7 26 62 FC | 	wrlong	local01, fp
1e62c     5C 03 90 FD | 	jmp	#LR__2423
1e630                 | LR__2412
1e630                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1e630     08 4E 05 F1 | 	add	fp, #8
1e634     A7 26 02 FB | 	rdlong	local01, fp
1e638     08 4E 85 F1 | 	sub	fp, #8
1e63c     1E 26 0E F2 | 	cmp	local01, #30 wz
1e640     14 4E 05 A1 |  if_e	add	fp, #20
1e644     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e648     14 4E 85 A1 |  if_e	sub	fp, #20
1e64c     16 2B 02 A6 |  if_e	mov	local03, local04
1e650     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e654     38 00 90 5D |  if_ne	jmp	#LR__2413
1e658     00 26 06 F6 | 	mov	local01, #0
1e65c     A7 28 02 FB | 	rdlong	local02, fp
1e660     0C 4E 05 F1 | 	add	fp, #12
1e664     A7 12 02 FB | 	rdlong	arg01, fp
1e668     0C 4E 85 F1 | 	sub	fp, #12
1e66c     38 AB B0 FD | 	call	#__system___float_fromuns
1e670     FD 14 02 F6 | 	mov	arg02, result1
1e674     14 13 02 F6 | 	mov	arg01, local02
1e678     01 16 66 F6 | 	neg	arg03, #1
1e67c     60 B3 B0 FD | 	call	#__system___float_cmp
1e680     01 FA 55 F2 | 	cmps	result1, #1 wc
1e684     00 26 26 36 |  if_ae	not	local01, #0
1e688     A7 26 62 FC | 	wrlong	local01, fp
1e68c     FC 02 90 FD | 	jmp	#LR__2423
1e690                 | LR__2413
1e690                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1e690     08 4E 05 F1 | 	add	fp, #8
1e694     A7 26 02 FB | 	rdlong	local01, fp
1e698     08 4E 85 F1 | 	sub	fp, #8
1e69c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e6a0     14 4E 05 A1 |  if_e	add	fp, #20
1e6a4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e6a8     14 4E 85 A1 |  if_e	sub	fp, #20
1e6ac     16 2B 02 A6 |  if_e	mov	local03, local04
1e6b0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e6b4     44 00 90 5D |  if_ne	jmp	#LR__2414
1e6b8     00 26 06 F6 | 	mov	local01, #0
1e6bc     A7 12 02 FB | 	rdlong	arg01, fp
1e6c0     09 13 52 F6 | 	abs	arg01, arg01 wc
1e6c4     1F 2E C6 C9 |  if_b	decod	local05, #31
1e6c8     00 2E 06 36 |  if_ae	mov	local05, #0
1e6cc     D8 AA B0 FD | 	call	#__system___float_fromuns
1e6d0     17 FB 61 F5 | 	xor	result1, local05
1e6d4     FD 12 02 F6 | 	mov	arg01, result1
1e6d8     0C 4E 05 F1 | 	add	fp, #12
1e6dc     A7 14 02 FB | 	rdlong	arg02, fp
1e6e0     0C 4E 85 F1 | 	sub	fp, #12
1e6e4     01 16 66 F6 | 	neg	arg03, #1
1e6e8     F4 B2 B0 FD | 	call	#__system___float_cmp
1e6ec     01 FA 55 F2 | 	cmps	result1, #1 wc
1e6f0     00 26 26 36 |  if_ae	not	local01, #0
1e6f4     A7 26 62 FC | 	wrlong	local01, fp
1e6f8     90 02 90 FD | 	jmp	#LR__2423
1e6fc                 | LR__2414
1e6fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1e6fc     08 4E 05 F1 | 	add	fp, #8
1e700     A7 26 02 FB | 	rdlong	local01, fp
1e704     08 4E 85 F1 | 	sub	fp, #8
1e708     1C 26 0E F2 | 	cmp	local01, #28 wz
1e70c     14 4E 05 A1 |  if_e	add	fp, #20
1e710     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e714     14 4E 85 A1 |  if_e	sub	fp, #20
1e718     16 2B 02 A6 |  if_e	mov	local03, local04
1e71c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e720     24 00 90 5D |  if_ne	jmp	#LR__2415
1e724     00 26 06 F6 | 	mov	local01, #0
1e728     A7 28 02 FB | 	rdlong	local02, fp
1e72c     0C 4E 05 F1 | 	add	fp, #12
1e730     A7 2A 02 FB | 	rdlong	local03, fp
1e734     0C 4E 85 F1 | 	sub	fp, #12
1e738     15 29 5A F2 | 	cmps	local02, local03 wcz
1e73c     01 26 66 16 |  if_a	neg	local01, #1
1e740     A7 26 62 FC | 	wrlong	local01, fp
1e744     44 02 90 FD | 	jmp	#LR__2423
1e748                 | LR__2415
1e748                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1e748     08 4E 05 F1 | 	add	fp, #8
1e74c     A7 26 02 FB | 	rdlong	local01, fp
1e750     08 4E 85 F1 | 	sub	fp, #8
1e754     1C 26 0E F2 | 	cmp	local01, #28 wz
1e758     14 4E 05 A1 |  if_e	add	fp, #20
1e75c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e760     14 4E 85 A1 |  if_e	sub	fp, #20
1e764     16 2B 02 A6 |  if_e	mov	local03, local04
1e768     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e76c     24 00 90 5D |  if_ne	jmp	#LR__2416
1e770     00 26 06 F6 | 	mov	local01, #0
1e774     A7 28 02 FB | 	rdlong	local02, fp
1e778     0C 4E 05 F1 | 	add	fp, #12
1e77c     A7 2A 02 FB | 	rdlong	local03, fp
1e780     0C 4E 85 F1 | 	sub	fp, #12
1e784     15 29 5A F2 | 	cmps	local02, local03 wcz
1e788     01 26 66 16 |  if_a	neg	local01, #1
1e78c     A7 26 62 FC | 	wrlong	local01, fp
1e790     F8 01 90 FD | 	jmp	#LR__2423
1e794                 | LR__2416
1e794                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1e794     08 4E 05 F1 | 	add	fp, #8
1e798     A7 26 02 FB | 	rdlong	local01, fp
1e79c     08 4E 85 F1 | 	sub	fp, #8
1e7a0     1D 26 0E F2 | 	cmp	local01, #29 wz
1e7a4     14 4E 05 A1 |  if_e	add	fp, #20
1e7a8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e7ac     14 4E 85 A1 |  if_e	sub	fp, #20
1e7b0     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1e7b4     34 00 90 5D |  if_ne	jmp	#LR__2417
1e7b8     00 26 06 F6 | 	mov	local01, #0
1e7bc     A7 12 02 FB | 	rdlong	arg01, fp
1e7c0     E4 A9 B0 FD | 	call	#__system___float_fromuns
1e7c4     FD 12 02 F6 | 	mov	arg01, result1
1e7c8     0C 4E 05 F1 | 	add	fp, #12
1e7cc     A7 14 02 FB | 	rdlong	arg02, fp
1e7d0     0C 4E 85 F1 | 	sub	fp, #12
1e7d4     01 16 66 F6 | 	neg	arg03, #1
1e7d8     04 B2 B0 FD | 	call	#__system___float_cmp
1e7dc     01 FA 55 F2 | 	cmps	result1, #1 wc
1e7e0     00 26 26 36 |  if_ae	not	local01, #0
1e7e4     A7 26 62 FC | 	wrlong	local01, fp
1e7e8     A0 01 90 FD | 	jmp	#LR__2423
1e7ec                 | LR__2417
1e7ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1e7ec     08 4E 05 F1 | 	add	fp, #8
1e7f0     A7 26 02 FB | 	rdlong	local01, fp
1e7f4     08 4E 85 F1 | 	sub	fp, #8
1e7f8     1D 26 0E F2 | 	cmp	local01, #29 wz
1e7fc     14 4E 05 A1 |  if_e	add	fp, #20
1e800     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e804     14 4E 85 A1 |  if_e	sub	fp, #20
1e808     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e80c     24 00 90 5D |  if_ne	jmp	#LR__2418
1e810     00 26 06 F6 | 	mov	local01, #0
1e814     A7 28 02 FB | 	rdlong	local02, fp
1e818     0C 4E 05 F1 | 	add	fp, #12
1e81c     A7 2A 02 FB | 	rdlong	local03, fp
1e820     0C 4E 85 F1 | 	sub	fp, #12
1e824     15 29 5A F2 | 	cmps	local02, local03 wcz
1e828     01 26 66 16 |  if_a	neg	local01, #1
1e82c     A7 26 62 FC | 	wrlong	local01, fp
1e830     58 01 90 FD | 	jmp	#LR__2423
1e834                 | LR__2418
1e834                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1e834     08 4E 05 F1 | 	add	fp, #8
1e838     A7 26 02 FB | 	rdlong	local01, fp
1e83c     08 4E 85 F1 | 	sub	fp, #8
1e840     1D 26 0E F2 | 	cmp	local01, #29 wz
1e844     14 4E 05 A1 |  if_e	add	fp, #20
1e848     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e84c     14 4E 85 A1 |  if_e	sub	fp, #20
1e850     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e854     24 00 90 5D |  if_ne	jmp	#LR__2419
1e858     00 26 06 F6 | 	mov	local01, #0
1e85c     A7 28 02 FB | 	rdlong	local02, fp
1e860     0C 4E 05 F1 | 	add	fp, #12
1e864     A7 2A 02 FB | 	rdlong	local03, fp
1e868     0C 4E 85 F1 | 	sub	fp, #12
1e86c     15 29 1A F2 | 	cmp	local02, local03 wcz
1e870     01 26 66 16 |  if_a	neg	local01, #1
1e874     A7 26 62 FC | 	wrlong	local01, fp
1e878     10 01 90 FD | 	jmp	#LR__2423
1e87c                 | LR__2419
1e87c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1e87c     08 4E 05 F1 | 	add	fp, #8
1e880     A7 26 02 FB | 	rdlong	local01, fp
1e884     08 4E 85 F1 | 	sub	fp, #8
1e888     2B 26 0E F2 | 	cmp	local01, #43 wz
1e88c     14 4E 05 A1 |  if_e	add	fp, #20
1e890     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e894     14 4E 85 A1 |  if_e	sub	fp, #20
1e898     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e89c     30 00 90 5D |  if_ne	jmp	#LR__2420
1e8a0     00 26 06 F6 | 	mov	local01, #0
1e8a4     A7 12 02 FB | 	rdlong	arg01, fp
1e8a8     20 EE BE FD | 	call	#_convertstring
1e8ac     FD 12 02 F6 | 	mov	arg01, result1
1e8b0     0C 4E 05 F1 | 	add	fp, #12
1e8b4     A7 14 02 FB | 	rdlong	arg02, fp
1e8b8     0C 4E 85 F1 | 	sub	fp, #12
1e8bc     9C 7E B0 FD | 	call	#__system___string_cmp
1e8c0     01 FA 55 F2 | 	cmps	result1, #1 wc
1e8c4     00 26 26 36 |  if_ae	not	local01, #0
1e8c8     A7 26 62 FC | 	wrlong	local01, fp
1e8cc     BC 00 90 FD | 	jmp	#LR__2423
1e8d0                 | LR__2420
1e8d0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1e8d0     08 4E 05 F1 | 	add	fp, #8
1e8d4     A7 26 02 FB | 	rdlong	local01, fp
1e8d8     08 4E 85 F1 | 	sub	fp, #8
1e8dc     1F 26 0E F2 | 	cmp	local01, #31 wz
1e8e0     14 4E 05 A1 |  if_e	add	fp, #20
1e8e4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e8e8     14 4E 85 A1 |  if_e	sub	fp, #20
1e8ec     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e8f0     34 00 90 5D |  if_ne	jmp	#LR__2421
1e8f4     00 26 06 F6 | 	mov	local01, #0
1e8f8     A7 28 02 FB | 	rdlong	local02, fp
1e8fc     0C 4E 05 F1 | 	add	fp, #12
1e900     A7 12 02 FB | 	rdlong	arg01, fp
1e904     0C 4E 85 F1 | 	sub	fp, #12
1e908     C0 ED BE FD | 	call	#_convertstring
1e90c     FD 14 02 F6 | 	mov	arg02, result1
1e910     14 13 02 F6 | 	mov	arg01, local02
1e914     44 7E B0 FD | 	call	#__system___string_cmp
1e918     01 FA 55 F2 | 	cmps	result1, #1 wc
1e91c     00 26 26 36 |  if_ae	not	local01, #0
1e920     A7 26 62 FC | 	wrlong	local01, fp
1e924     64 00 90 FD | 	jmp	#LR__2423
1e928                 | LR__2421
1e928                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1e928     08 4E 05 F1 | 	add	fp, #8
1e92c     A7 26 02 FB | 	rdlong	local01, fp
1e930     08 4E 85 F1 | 	sub	fp, #8
1e934     2B 26 0E F2 | 	cmp	local01, #43 wz
1e938     14 4E 05 A1 |  if_e	add	fp, #20
1e93c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e940     14 4E 85 A1 |  if_e	sub	fp, #20
1e944     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e948     3C 00 90 5D |  if_ne	jmp	#LR__2422
1e94c     00 26 06 F6 | 	mov	local01, #0
1e950     A7 12 02 FB | 	rdlong	arg01, fp
1e954     74 ED BE FD | 	call	#_convertstring
1e958     FD 28 02 F6 | 	mov	local02, result1
1e95c     0C 4E 05 F1 | 	add	fp, #12
1e960     A7 12 02 FB | 	rdlong	arg01, fp
1e964     0C 4E 85 F1 | 	sub	fp, #12
1e968     60 ED BE FD | 	call	#_convertstring
1e96c     FD 14 02 F6 | 	mov	arg02, result1
1e970     14 13 02 F6 | 	mov	arg01, local02
1e974     E4 7D B0 FD | 	call	#__system___string_cmp
1e978     01 FA 55 F2 | 	cmps	result1, #1 wc
1e97c     00 26 26 36 |  if_ae	not	local01, #0
1e980     A7 26 62 FC | 	wrlong	local01, fp
1e984     04 00 90 FD | 	jmp	#LR__2423
1e988                 | LR__2422
1e988     A7 00 68 FC | 	wrlong	#0, fp
1e98c                 | LR__2423
1e98c     08 4E 05 F1 | 	add	fp, #8
1e990     A7 38 68 FC | 	wrlong	#28, fp
1e994     08 4E 85 F1 | 	sub	fp, #8
1e998                 | ' t1.result.uresult=0
1e998                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e998     A7 26 0A FB | 	rdlong	local01, fp wz
1e99c     A7 02 68 5C |  if_ne	wrlong	#1, fp
1e9a0     A7 12 02 F6 | 	mov	arg01, fp
1e9a4     44 EC BE FD | 	call	#_push
1e9a8     A7 F0 03 F6 | 	mov	ptra, fp
1e9ac     B2 00 A0 FD | 	call	#popregs_
1e9b0                 | _do_gt_ret
1e9b0     2D 00 64 FD | 	ret
1e9b4                 | 
1e9b4                 | ' 
1e9b4                 | ' '--------------------------------- less or equal (<=)
1e9b4                 | ' 
1e9b4                 | ' sub do_le
1e9b4                 | _do_le
1e9b4     05 4A 05 F6 | 	mov	COUNT_, #5
1e9b8     A8 00 A0 FD | 	call	#pushregs_
1e9bc     18 F0 07 F1 | 	add	ptra, #24
1e9c0     90 EB BE FD | 	call	#_pop
1e9c4     FD 26 02 F6 | 	mov	local01, result1
1e9c8     FE 28 02 F6 | 	mov	local02, result2
1e9cc     FF 2A 02 F6 | 	mov	local03, result3
1e9d0     0C 4E 05 F1 | 	add	fp, #12
1e9d4     A7 26 62 FC | 	wrlong	local01, fp
1e9d8     04 4E 05 F1 | 	add	fp, #4
1e9dc     A7 28 62 FC | 	wrlong	local02, fp
1e9e0     04 4E 05 F1 | 	add	fp, #4
1e9e4     A7 2A 62 FC | 	wrlong	local03, fp
1e9e8     14 4E 85 F1 | 	sub	fp, #20
1e9ec     64 EB BE FD | 	call	#_pop
1e9f0     FF 2A 02 F6 | 	mov	local03, result3
1e9f4     A7 FA 61 FC | 	wrlong	result1, fp
1e9f8     04 4E 05 F1 | 	add	fp, #4
1e9fc     A7 FC 61 FC | 	wrlong	result2, fp
1ea00     04 4E 05 F1 | 	add	fp, #4
1ea04     A7 2A 62 FC | 	wrlong	local03, fp
1ea08                 | ' 
1ea08                 | ' t2=pop()
1ea08                 | ' t1=pop()
1ea08                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1ea08     08 4E 85 F1 | 	sub	fp, #8
1ea0c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ea10     14 4E 05 A1 |  if_e	add	fp, #20
1ea14     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ea18     14 4E 85 A1 |  if_e	sub	fp, #20
1ea1c     16 2B 02 A6 |  if_e	mov	local03, local04
1ea20     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ea24     28 00 90 5D |  if_ne	jmp	#LR__2430
1ea28     00 26 06 F6 | 	mov	local01, #0
1ea2c     A7 12 02 FB | 	rdlong	arg01, fp
1ea30     0C 4E 05 F1 | 	add	fp, #12
1ea34     A7 14 02 FB | 	rdlong	arg02, fp
1ea38     0C 4E 85 F1 | 	sub	fp, #12
1ea3c     1C 7D B0 FD | 	call	#__system___string_cmp
1ea40     01 FA 55 F2 | 	cmps	result1, #1 wc
1ea44     00 26 26 C6 |  if_b	not	local01, #0
1ea48     A7 26 62 FC | 	wrlong	local01, fp
1ea4c     20 04 90 FD | 	jmp	#LR__2443
1ea50                 | LR__2430
1ea50                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1ea50     08 4E 05 F1 | 	add	fp, #8
1ea54     A7 26 02 FB | 	rdlong	local01, fp
1ea58     08 4E 85 F1 | 	sub	fp, #8
1ea5c     1E 26 0E F2 | 	cmp	local01, #30 wz
1ea60     14 4E 05 A1 |  if_e	add	fp, #20
1ea64     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ea68     14 4E 85 A1 |  if_e	sub	fp, #20
1ea6c     16 2B 02 A6 |  if_e	mov	local03, local04
1ea70     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ea74     2C 00 90 5D |  if_ne	jmp	#LR__2431
1ea78     00 26 06 F6 | 	mov	local01, #0
1ea7c     A7 12 02 FB | 	rdlong	arg01, fp
1ea80     0C 4E 05 F1 | 	add	fp, #12
1ea84     A7 14 02 FB | 	rdlong	arg02, fp
1ea88     0C 4E 85 F1 | 	sub	fp, #12
1ea8c     01 16 06 F6 | 	mov	arg03, #1
1ea90     4C AF B0 FD | 	call	#__system___float_cmp
1ea94     01 FA 55 F2 | 	cmps	result1, #1 wc
1ea98     00 26 26 C6 |  if_b	not	local01, #0
1ea9c     A7 26 62 FC | 	wrlong	local01, fp
1eaa0     CC 03 90 FD | 	jmp	#LR__2443
1eaa4                 | LR__2431
1eaa4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1eaa4     08 4E 05 F1 | 	add	fp, #8
1eaa8     A7 26 02 FB | 	rdlong	local01, fp
1eaac     08 4E 85 F1 | 	sub	fp, #8
1eab0     1E 26 0E F2 | 	cmp	local01, #30 wz
1eab4     14 4E 05 A1 |  if_e	add	fp, #20
1eab8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eabc     14 4E 85 A1 |  if_e	sub	fp, #20
1eac0     16 2B 02 A6 |  if_e	mov	local03, local04
1eac4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1eac8     48 00 90 5D |  if_ne	jmp	#LR__2432
1eacc     00 26 06 F6 | 	mov	local01, #0
1ead0     A7 28 02 FB | 	rdlong	local02, fp
1ead4     0C 4E 05 F1 | 	add	fp, #12
1ead8     A7 12 02 FB | 	rdlong	arg01, fp
1eadc     0C 4E 85 F1 | 	sub	fp, #12
1eae0     09 13 52 F6 | 	abs	arg01, arg01 wc
1eae4     1F 2E C6 C9 |  if_b	decod	local05, #31
1eae8     00 2E 06 36 |  if_ae	mov	local05, #0
1eaec     B8 A6 B0 FD | 	call	#__system___float_fromuns
1eaf0     17 FB 61 F5 | 	xor	result1, local05
1eaf4     FD 14 02 F6 | 	mov	arg02, result1
1eaf8     14 13 02 F6 | 	mov	arg01, local02
1eafc     01 16 06 F6 | 	mov	arg03, #1
1eb00     DC AE B0 FD | 	call	#__system___float_cmp
1eb04     01 FA 55 F2 | 	cmps	result1, #1 wc
1eb08     00 26 26 C6 |  if_b	not	local01, #0
1eb0c     A7 26 62 FC | 	wrlong	local01, fp
1eb10     5C 03 90 FD | 	jmp	#LR__2443
1eb14                 | LR__2432
1eb14                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1eb14     08 4E 05 F1 | 	add	fp, #8
1eb18     A7 26 02 FB | 	rdlong	local01, fp
1eb1c     08 4E 85 F1 | 	sub	fp, #8
1eb20     1E 26 0E F2 | 	cmp	local01, #30 wz
1eb24     14 4E 05 A1 |  if_e	add	fp, #20
1eb28     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eb2c     14 4E 85 A1 |  if_e	sub	fp, #20
1eb30     16 2B 02 A6 |  if_e	mov	local03, local04
1eb34     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1eb38     38 00 90 5D |  if_ne	jmp	#LR__2433
1eb3c     00 26 06 F6 | 	mov	local01, #0
1eb40     A7 28 02 FB | 	rdlong	local02, fp
1eb44     0C 4E 05 F1 | 	add	fp, #12
1eb48     A7 12 02 FB | 	rdlong	arg01, fp
1eb4c     0C 4E 85 F1 | 	sub	fp, #12
1eb50     54 A6 B0 FD | 	call	#__system___float_fromuns
1eb54     FD 14 02 F6 | 	mov	arg02, result1
1eb58     14 13 02 F6 | 	mov	arg01, local02
1eb5c     01 16 06 F6 | 	mov	arg03, #1
1eb60     7C AE B0 FD | 	call	#__system___float_cmp
1eb64     01 FA 55 F2 | 	cmps	result1, #1 wc
1eb68     00 26 26 C6 |  if_b	not	local01, #0
1eb6c     A7 26 62 FC | 	wrlong	local01, fp
1eb70     FC 02 90 FD | 	jmp	#LR__2443
1eb74                 | LR__2433
1eb74                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1eb74     08 4E 05 F1 | 	add	fp, #8
1eb78     A7 26 02 FB | 	rdlong	local01, fp
1eb7c     08 4E 85 F1 | 	sub	fp, #8
1eb80     1C 26 0E F2 | 	cmp	local01, #28 wz
1eb84     14 4E 05 A1 |  if_e	add	fp, #20
1eb88     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eb8c     14 4E 85 A1 |  if_e	sub	fp, #20
1eb90     16 2B 02 A6 |  if_e	mov	local03, local04
1eb94     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1eb98     44 00 90 5D |  if_ne	jmp	#LR__2434
1eb9c     00 26 06 F6 | 	mov	local01, #0
1eba0     A7 12 02 FB | 	rdlong	arg01, fp
1eba4     09 13 52 F6 | 	abs	arg01, arg01 wc
1eba8     1F 2E C6 C9 |  if_b	decod	local05, #31
1ebac     00 2E 06 36 |  if_ae	mov	local05, #0
1ebb0     F4 A5 B0 FD | 	call	#__system___float_fromuns
1ebb4     17 FB 61 F5 | 	xor	result1, local05
1ebb8     FD 12 02 F6 | 	mov	arg01, result1
1ebbc     0C 4E 05 F1 | 	add	fp, #12
1ebc0     A7 14 02 FB | 	rdlong	arg02, fp
1ebc4     0C 4E 85 F1 | 	sub	fp, #12
1ebc8     01 16 06 F6 | 	mov	arg03, #1
1ebcc     10 AE B0 FD | 	call	#__system___float_cmp
1ebd0     01 FA 55 F2 | 	cmps	result1, #1 wc
1ebd4     00 26 26 C6 |  if_b	not	local01, #0
1ebd8     A7 26 62 FC | 	wrlong	local01, fp
1ebdc     90 02 90 FD | 	jmp	#LR__2443
1ebe0                 | LR__2434
1ebe0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1ebe0     08 4E 05 F1 | 	add	fp, #8
1ebe4     A7 26 02 FB | 	rdlong	local01, fp
1ebe8     08 4E 85 F1 | 	sub	fp, #8
1ebec     1C 26 0E F2 | 	cmp	local01, #28 wz
1ebf0     14 4E 05 A1 |  if_e	add	fp, #20
1ebf4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ebf8     14 4E 85 A1 |  if_e	sub	fp, #20
1ebfc     16 2B 02 A6 |  if_e	mov	local03, local04
1ec00     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ec04     24 00 90 5D |  if_ne	jmp	#LR__2435
1ec08     00 26 06 F6 | 	mov	local01, #0
1ec0c     A7 28 02 FB | 	rdlong	local02, fp
1ec10     0C 4E 05 F1 | 	add	fp, #12
1ec14     A7 2A 02 FB | 	rdlong	local03, fp
1ec18     0C 4E 85 F1 | 	sub	fp, #12
1ec1c     15 29 5A F2 | 	cmps	local02, local03 wcz
1ec20     01 26 66 E6 |  if_be	neg	local01, #1
1ec24     A7 26 62 FC | 	wrlong	local01, fp
1ec28     44 02 90 FD | 	jmp	#LR__2443
1ec2c                 | LR__2435
1ec2c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1ec2c     08 4E 05 F1 | 	add	fp, #8
1ec30     A7 26 02 FB | 	rdlong	local01, fp
1ec34     08 4E 85 F1 | 	sub	fp, #8
1ec38     1C 26 0E F2 | 	cmp	local01, #28 wz
1ec3c     14 4E 05 A1 |  if_e	add	fp, #20
1ec40     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ec44     14 4E 85 A1 |  if_e	sub	fp, #20
1ec48     16 2B 02 A6 |  if_e	mov	local03, local04
1ec4c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ec50     24 00 90 5D |  if_ne	jmp	#LR__2436
1ec54     00 26 06 F6 | 	mov	local01, #0
1ec58     A7 28 02 FB | 	rdlong	local02, fp
1ec5c     0C 4E 05 F1 | 	add	fp, #12
1ec60     A7 2A 02 FB | 	rdlong	local03, fp
1ec64     0C 4E 85 F1 | 	sub	fp, #12
1ec68     15 29 5A F2 | 	cmps	local02, local03 wcz
1ec6c     01 26 66 E6 |  if_be	neg	local01, #1
1ec70     A7 26 62 FC | 	wrlong	local01, fp
1ec74     F8 01 90 FD | 	jmp	#LR__2443
1ec78                 | LR__2436
1ec78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1ec78     08 4E 05 F1 | 	add	fp, #8
1ec7c     A7 26 02 FB | 	rdlong	local01, fp
1ec80     08 4E 85 F1 | 	sub	fp, #8
1ec84     1D 26 0E F2 | 	cmp	local01, #29 wz
1ec88     14 4E 05 A1 |  if_e	add	fp, #20
1ec8c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ec90     14 4E 85 A1 |  if_e	sub	fp, #20
1ec94     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1ec98     34 00 90 5D |  if_ne	jmp	#LR__2437
1ec9c     00 26 06 F6 | 	mov	local01, #0
1eca0     A7 12 02 FB | 	rdlong	arg01, fp
1eca4     00 A5 B0 FD | 	call	#__system___float_fromuns
1eca8     FD 12 02 F6 | 	mov	arg01, result1
1ecac     0C 4E 05 F1 | 	add	fp, #12
1ecb0     A7 14 02 FB | 	rdlong	arg02, fp
1ecb4     0C 4E 85 F1 | 	sub	fp, #12
1ecb8     01 16 06 F6 | 	mov	arg03, #1
1ecbc     20 AD B0 FD | 	call	#__system___float_cmp
1ecc0     01 FA 55 F2 | 	cmps	result1, #1 wc
1ecc4     00 26 26 C6 |  if_b	not	local01, #0
1ecc8     A7 26 62 FC | 	wrlong	local01, fp
1eccc     A0 01 90 FD | 	jmp	#LR__2443
1ecd0                 | LR__2437
1ecd0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1ecd0     08 4E 05 F1 | 	add	fp, #8
1ecd4     A7 26 02 FB | 	rdlong	local01, fp
1ecd8     08 4E 85 F1 | 	sub	fp, #8
1ecdc     1D 26 0E F2 | 	cmp	local01, #29 wz
1ece0     14 4E 05 A1 |  if_e	add	fp, #20
1ece4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ece8     14 4E 85 A1 |  if_e	sub	fp, #20
1ecec     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ecf0     24 00 90 5D |  if_ne	jmp	#LR__2438
1ecf4     00 26 06 F6 | 	mov	local01, #0
1ecf8     A7 28 02 FB | 	rdlong	local02, fp
1ecfc     0C 4E 05 F1 | 	add	fp, #12
1ed00     A7 2A 02 FB | 	rdlong	local03, fp
1ed04     0C 4E 85 F1 | 	sub	fp, #12
1ed08     15 29 5A F2 | 	cmps	local02, local03 wcz
1ed0c     01 26 66 E6 |  if_be	neg	local01, #1
1ed10     A7 26 62 FC | 	wrlong	local01, fp
1ed14     58 01 90 FD | 	jmp	#LR__2443
1ed18                 | LR__2438
1ed18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1ed18     08 4E 05 F1 | 	add	fp, #8
1ed1c     A7 26 02 FB | 	rdlong	local01, fp
1ed20     08 4E 85 F1 | 	sub	fp, #8
1ed24     1D 26 0E F2 | 	cmp	local01, #29 wz
1ed28     14 4E 05 A1 |  if_e	add	fp, #20
1ed2c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ed30     14 4E 85 A1 |  if_e	sub	fp, #20
1ed34     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ed38     24 00 90 5D |  if_ne	jmp	#LR__2439
1ed3c     00 26 06 F6 | 	mov	local01, #0
1ed40     A7 28 02 FB | 	rdlong	local02, fp
1ed44     0C 4E 05 F1 | 	add	fp, #12
1ed48     A7 2A 02 FB | 	rdlong	local03, fp
1ed4c     0C 4E 85 F1 | 	sub	fp, #12
1ed50     15 29 1A F2 | 	cmp	local02, local03 wcz
1ed54     01 26 66 E6 |  if_be	neg	local01, #1
1ed58     A7 26 62 FC | 	wrlong	local01, fp
1ed5c     10 01 90 FD | 	jmp	#LR__2443
1ed60                 | LR__2439
1ed60                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1ed60     08 4E 05 F1 | 	add	fp, #8
1ed64     A7 26 02 FB | 	rdlong	local01, fp
1ed68     08 4E 85 F1 | 	sub	fp, #8
1ed6c     2B 26 0E F2 | 	cmp	local01, #43 wz
1ed70     14 4E 05 A1 |  if_e	add	fp, #20
1ed74     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ed78     14 4E 85 A1 |  if_e	sub	fp, #20
1ed7c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ed80     30 00 90 5D |  if_ne	jmp	#LR__2440
1ed84     00 26 06 F6 | 	mov	local01, #0
1ed88     A7 12 02 FB | 	rdlong	arg01, fp
1ed8c     3C E9 BE FD | 	call	#_convertstring
1ed90     FD 12 02 F6 | 	mov	arg01, result1
1ed94     0C 4E 05 F1 | 	add	fp, #12
1ed98     A7 14 02 FB | 	rdlong	arg02, fp
1ed9c     0C 4E 85 F1 | 	sub	fp, #12
1eda0     B8 79 B0 FD | 	call	#__system___string_cmp
1eda4     01 FA 55 F2 | 	cmps	result1, #1 wc
1eda8     00 26 26 C6 |  if_b	not	local01, #0
1edac     A7 26 62 FC | 	wrlong	local01, fp
1edb0     BC 00 90 FD | 	jmp	#LR__2443
1edb4                 | LR__2440
1edb4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1edb4     08 4E 05 F1 | 	add	fp, #8
1edb8     A7 26 02 FB | 	rdlong	local01, fp
1edbc     08 4E 85 F1 | 	sub	fp, #8
1edc0     1F 26 0E F2 | 	cmp	local01, #31 wz
1edc4     14 4E 05 A1 |  if_e	add	fp, #20
1edc8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1edcc     14 4E 85 A1 |  if_e	sub	fp, #20
1edd0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1edd4     34 00 90 5D |  if_ne	jmp	#LR__2441
1edd8     00 26 06 F6 | 	mov	local01, #0
1eddc     A7 28 02 FB | 	rdlong	local02, fp
1ede0     0C 4E 05 F1 | 	add	fp, #12
1ede4     A7 12 02 FB | 	rdlong	arg01, fp
1ede8     0C 4E 85 F1 | 	sub	fp, #12
1edec     DC E8 BE FD | 	call	#_convertstring
1edf0     FD 14 02 F6 | 	mov	arg02, result1
1edf4     14 13 02 F6 | 	mov	arg01, local02
1edf8     60 79 B0 FD | 	call	#__system___string_cmp
1edfc     01 FA 55 F2 | 	cmps	result1, #1 wc
1ee00     00 26 26 C6 |  if_b	not	local01, #0
1ee04     A7 26 62 FC | 	wrlong	local01, fp
1ee08     64 00 90 FD | 	jmp	#LR__2443
1ee0c                 | LR__2441
1ee0c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1ee0c     08 4E 05 F1 | 	add	fp, #8
1ee10     A7 26 02 FB | 	rdlong	local01, fp
1ee14     08 4E 85 F1 | 	sub	fp, #8
1ee18     2B 26 0E F2 | 	cmp	local01, #43 wz
1ee1c     14 4E 05 A1 |  if_e	add	fp, #20
1ee20     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ee24     14 4E 85 A1 |  if_e	sub	fp, #20
1ee28     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ee2c     3C 00 90 5D |  if_ne	jmp	#LR__2442
1ee30     00 26 06 F6 | 	mov	local01, #0
1ee34     A7 12 02 FB | 	rdlong	arg01, fp
1ee38     90 E8 BE FD | 	call	#_convertstring
1ee3c     FD 28 02 F6 | 	mov	local02, result1
1ee40     0C 4E 05 F1 | 	add	fp, #12
1ee44     A7 12 02 FB | 	rdlong	arg01, fp
1ee48     0C 4E 85 F1 | 	sub	fp, #12
1ee4c     7C E8 BE FD | 	call	#_convertstring
1ee50     FD 14 02 F6 | 	mov	arg02, result1
1ee54     14 13 02 F6 | 	mov	arg01, local02
1ee58     00 79 B0 FD | 	call	#__system___string_cmp
1ee5c     01 FA 55 F2 | 	cmps	result1, #1 wc
1ee60     00 26 26 C6 |  if_b	not	local01, #0
1ee64     A7 26 62 FC | 	wrlong	local01, fp
1ee68     04 00 90 FD | 	jmp	#LR__2443
1ee6c                 | LR__2442
1ee6c     A7 00 68 FC | 	wrlong	#0, fp
1ee70                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ee70                 | LR__2443
1ee70     08 4E 05 F1 | 	add	fp, #8
1ee74     A7 38 68 FC | 	wrlong	#28, fp
1ee78     08 4E 85 F1 | 	sub	fp, #8
1ee7c     A7 12 02 F6 | 	mov	arg01, fp
1ee80     68 E7 BE FD | 	call	#_push
1ee84     A7 F0 03 F6 | 	mov	ptra, fp
1ee88     B2 00 A0 FD | 	call	#popregs_
1ee8c                 | _do_le_ret
1ee8c     2D 00 64 FD | 	ret
1ee90                 | 
1ee90                 | ' 
1ee90                 | ' '--------------------------------- less than (<)
1ee90                 | ' 
1ee90                 | ' sub do_lt
1ee90                 | _do_lt
1ee90     05 4A 05 F6 | 	mov	COUNT_, #5
1ee94     A8 00 A0 FD | 	call	#pushregs_
1ee98     18 F0 07 F1 | 	add	ptra, #24
1ee9c     B4 E6 BE FD | 	call	#_pop
1eea0     FD 26 02 F6 | 	mov	local01, result1
1eea4     FE 28 02 F6 | 	mov	local02, result2
1eea8     FF 2A 02 F6 | 	mov	local03, result3
1eeac     0C 4E 05 F1 | 	add	fp, #12
1eeb0     A7 26 62 FC | 	wrlong	local01, fp
1eeb4     04 4E 05 F1 | 	add	fp, #4
1eeb8     A7 28 62 FC | 	wrlong	local02, fp
1eebc     04 4E 05 F1 | 	add	fp, #4
1eec0     A7 2A 62 FC | 	wrlong	local03, fp
1eec4     14 4E 85 F1 | 	sub	fp, #20
1eec8     88 E6 BE FD | 	call	#_pop
1eecc     FF 2A 02 F6 | 	mov	local03, result3
1eed0     A7 FA 61 FC | 	wrlong	result1, fp
1eed4     04 4E 05 F1 | 	add	fp, #4
1eed8     A7 FC 61 FC | 	wrlong	result2, fp
1eedc     04 4E 05 F1 | 	add	fp, #4
1eee0     A7 2A 62 FC | 	wrlong	local03, fp
1eee4                 | ' 
1eee4                 | ' t2=pop()
1eee4                 | ' t1=pop()
1eee4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1eee4     08 4E 85 F1 | 	sub	fp, #8
1eee8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1eeec     14 4E 05 A1 |  if_e	add	fp, #20
1eef0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eef4     14 4E 85 A1 |  if_e	sub	fp, #20
1eef8     16 2B 02 A6 |  if_e	mov	local03, local04
1eefc     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ef00     28 00 90 5D |  if_ne	jmp	#LR__2450
1ef04     00 26 06 F6 | 	mov	local01, #0
1ef08     A7 12 02 FB | 	rdlong	arg01, fp
1ef0c     0C 4E 05 F1 | 	add	fp, #12
1ef10     A7 14 02 FB | 	rdlong	arg02, fp
1ef14     0C 4E 85 F1 | 	sub	fp, #12
1ef18     40 78 B0 FD | 	call	#__system___string_cmp
1ef1c     00 FA 55 F2 | 	cmps	result1, #0 wc
1ef20     00 26 26 C6 |  if_b	not	local01, #0
1ef24     A7 26 62 FC | 	wrlong	local01, fp
1ef28     10 04 90 FD | 	jmp	#LR__2463
1ef2c                 | LR__2450
1ef2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1ef2c     08 4E 05 F1 | 	add	fp, #8
1ef30     A7 26 02 FB | 	rdlong	local01, fp
1ef34     08 4E 85 F1 | 	sub	fp, #8
1ef38     1E 26 0E F2 | 	cmp	local01, #30 wz
1ef3c     14 4E 05 A1 |  if_e	add	fp, #20
1ef40     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ef44     14 4E 85 A1 |  if_e	sub	fp, #20
1ef48     16 2B 02 A6 |  if_e	mov	local03, local04
1ef4c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ef50     2C 00 90 5D |  if_ne	jmp	#LR__2451
1ef54     00 26 06 F6 | 	mov	local01, #0
1ef58     A7 12 02 FB | 	rdlong	arg01, fp
1ef5c     0C 4E 05 F1 | 	add	fp, #12
1ef60     A7 14 02 FB | 	rdlong	arg02, fp
1ef64     0C 4E 85 F1 | 	sub	fp, #12
1ef68     01 16 06 F6 | 	mov	arg03, #1
1ef6c     70 AA B0 FD | 	call	#__system___float_cmp
1ef70     00 FA 55 F2 | 	cmps	result1, #0 wc
1ef74     00 26 26 C6 |  if_b	not	local01, #0
1ef78     A7 26 62 FC | 	wrlong	local01, fp
1ef7c     BC 03 90 FD | 	jmp	#LR__2463
1ef80                 | LR__2451
1ef80                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1ef80     08 4E 05 F1 | 	add	fp, #8
1ef84     A7 26 02 FB | 	rdlong	local01, fp
1ef88     08 4E 85 F1 | 	sub	fp, #8
1ef8c     1E 26 0E F2 | 	cmp	local01, #30 wz
1ef90     14 4E 05 A1 |  if_e	add	fp, #20
1ef94     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ef98     14 4E 85 A1 |  if_e	sub	fp, #20
1ef9c     16 2B 02 A6 |  if_e	mov	local03, local04
1efa0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1efa4     48 00 90 5D |  if_ne	jmp	#LR__2452
1efa8     00 26 06 F6 | 	mov	local01, #0
1efac     A7 28 02 FB | 	rdlong	local02, fp
1efb0     0C 4E 05 F1 | 	add	fp, #12
1efb4     A7 12 02 FB | 	rdlong	arg01, fp
1efb8     0C 4E 85 F1 | 	sub	fp, #12
1efbc     09 13 52 F6 | 	abs	arg01, arg01 wc
1efc0     1F 2E C6 C9 |  if_b	decod	local05, #31
1efc4     00 2E 06 36 |  if_ae	mov	local05, #0
1efc8     DC A1 B0 FD | 	call	#__system___float_fromuns
1efcc     17 FB 61 F5 | 	xor	result1, local05
1efd0     FD 14 02 F6 | 	mov	arg02, result1
1efd4     14 13 02 F6 | 	mov	arg01, local02
1efd8     01 16 06 F6 | 	mov	arg03, #1
1efdc     00 AA B0 FD | 	call	#__system___float_cmp
1efe0     00 FA 55 F2 | 	cmps	result1, #0 wc
1efe4     00 26 26 C6 |  if_b	not	local01, #0
1efe8     A7 26 62 FC | 	wrlong	local01, fp
1efec     4C 03 90 FD | 	jmp	#LR__2463
1eff0                 | LR__2452
1eff0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1eff0     08 4E 05 F1 | 	add	fp, #8
1eff4     A7 26 02 FB | 	rdlong	local01, fp
1eff8     08 4E 85 F1 | 	sub	fp, #8
1effc     1E 26 0E F2 | 	cmp	local01, #30 wz
1f000     14 4E 05 A1 |  if_e	add	fp, #20
1f004     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f008     14 4E 85 A1 |  if_e	sub	fp, #20
1f00c     16 2B 02 A6 |  if_e	mov	local03, local04
1f010     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f014     38 00 90 5D |  if_ne	jmp	#LR__2453
1f018     00 26 06 F6 | 	mov	local01, #0
1f01c     A7 28 02 FB | 	rdlong	local02, fp
1f020     0C 4E 05 F1 | 	add	fp, #12
1f024     A7 12 02 FB | 	rdlong	arg01, fp
1f028     0C 4E 85 F1 | 	sub	fp, #12
1f02c     78 A1 B0 FD | 	call	#__system___float_fromuns
1f030     FD 14 02 F6 | 	mov	arg02, result1
1f034     14 13 02 F6 | 	mov	arg01, local02
1f038     01 16 06 F6 | 	mov	arg03, #1
1f03c     A0 A9 B0 FD | 	call	#__system___float_cmp
1f040     00 FA 55 F2 | 	cmps	result1, #0 wc
1f044     00 26 26 C6 |  if_b	not	local01, #0
1f048     A7 26 62 FC | 	wrlong	local01, fp
1f04c     EC 02 90 FD | 	jmp	#LR__2463
1f050                 | LR__2453
1f050                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1f050     08 4E 05 F1 | 	add	fp, #8
1f054     A7 26 02 FB | 	rdlong	local01, fp
1f058     08 4E 85 F1 | 	sub	fp, #8
1f05c     1C 26 0E F2 | 	cmp	local01, #28 wz
1f060     14 4E 05 A1 |  if_e	add	fp, #20
1f064     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f068     14 4E 85 A1 |  if_e	sub	fp, #20
1f06c     16 2B 02 A6 |  if_e	mov	local03, local04
1f070     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f074     44 00 90 5D |  if_ne	jmp	#LR__2454
1f078     00 26 06 F6 | 	mov	local01, #0
1f07c     A7 12 02 FB | 	rdlong	arg01, fp
1f080     09 13 52 F6 | 	abs	arg01, arg01 wc
1f084     1F 2E C6 C9 |  if_b	decod	local05, #31
1f088     00 2E 06 36 |  if_ae	mov	local05, #0
1f08c     18 A1 B0 FD | 	call	#__system___float_fromuns
1f090     17 FB 61 F5 | 	xor	result1, local05
1f094     FD 12 02 F6 | 	mov	arg01, result1
1f098     0C 4E 05 F1 | 	add	fp, #12
1f09c     A7 14 02 FB | 	rdlong	arg02, fp
1f0a0     0C 4E 85 F1 | 	sub	fp, #12
1f0a4     01 16 06 F6 | 	mov	arg03, #1
1f0a8     34 A9 B0 FD | 	call	#__system___float_cmp
1f0ac     00 FA 55 F2 | 	cmps	result1, #0 wc
1f0b0     00 26 26 C6 |  if_b	not	local01, #0
1f0b4     A7 26 62 FC | 	wrlong	local01, fp
1f0b8     80 02 90 FD | 	jmp	#LR__2463
1f0bc                 | LR__2454
1f0bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1f0bc     08 4E 05 F1 | 	add	fp, #8
1f0c0     A7 26 02 FB | 	rdlong	local01, fp
1f0c4     08 4E 85 F1 | 	sub	fp, #8
1f0c8     1C 26 0E F2 | 	cmp	local01, #28 wz
1f0cc     14 4E 05 A1 |  if_e	add	fp, #20
1f0d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f0d4     14 4E 85 A1 |  if_e	sub	fp, #20
1f0d8     16 2B 02 A6 |  if_e	mov	local03, local04
1f0dc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f0e0     20 00 90 5D |  if_ne	jmp	#LR__2455
1f0e4     A7 28 02 FB | 	rdlong	local02, fp
1f0e8     0C 4E 05 F1 | 	add	fp, #12
1f0ec     A7 2A 02 FB | 	rdlong	local03, fp
1f0f0     0C 4E 85 F1 | 	sub	fp, #12
1f0f4     15 29 52 F2 | 	cmps	local02, local03 wc
1f0f8     13 27 A2 F1 | 	subx	local01, local01
1f0fc     A7 26 62 FC | 	wrlong	local01, fp
1f100     38 02 90 FD | 	jmp	#LR__2463
1f104                 | LR__2455
1f104                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1f104     08 4E 05 F1 | 	add	fp, #8
1f108     A7 26 02 FB | 	rdlong	local01, fp
1f10c     08 4E 85 F1 | 	sub	fp, #8
1f110     1C 26 0E F2 | 	cmp	local01, #28 wz
1f114     14 4E 05 A1 |  if_e	add	fp, #20
1f118     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f11c     14 4E 85 A1 |  if_e	sub	fp, #20
1f120     16 2B 02 A6 |  if_e	mov	local03, local04
1f124     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f128     20 00 90 5D |  if_ne	jmp	#LR__2456
1f12c     A7 28 02 FB | 	rdlong	local02, fp
1f130     0C 4E 05 F1 | 	add	fp, #12
1f134     A7 2A 02 FB | 	rdlong	local03, fp
1f138     0C 4E 85 F1 | 	sub	fp, #12
1f13c     15 29 52 F2 | 	cmps	local02, local03 wc
1f140     13 27 A2 F1 | 	subx	local01, local01
1f144     A7 26 62 FC | 	wrlong	local01, fp
1f148     F0 01 90 FD | 	jmp	#LR__2463
1f14c                 | LR__2456
1f14c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1f14c     08 4E 05 F1 | 	add	fp, #8
1f150     A7 26 02 FB | 	rdlong	local01, fp
1f154     08 4E 85 F1 | 	sub	fp, #8
1f158     1D 26 0E F2 | 	cmp	local01, #29 wz
1f15c     14 4E 05 A1 |  if_e	add	fp, #20
1f160     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f164     14 4E 85 A1 |  if_e	sub	fp, #20
1f168     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f16c     34 00 90 5D |  if_ne	jmp	#LR__2457
1f170     00 26 06 F6 | 	mov	local01, #0
1f174     A7 12 02 FB | 	rdlong	arg01, fp
1f178     2C A0 B0 FD | 	call	#__system___float_fromuns
1f17c     FD 12 02 F6 | 	mov	arg01, result1
1f180     0C 4E 05 F1 | 	add	fp, #12
1f184     A7 14 02 FB | 	rdlong	arg02, fp
1f188     0C 4E 85 F1 | 	sub	fp, #12
1f18c     01 16 06 F6 | 	mov	arg03, #1
1f190     4C A8 B0 FD | 	call	#__system___float_cmp
1f194     00 FA 55 F2 | 	cmps	result1, #0 wc
1f198     00 26 26 C6 |  if_b	not	local01, #0
1f19c     A7 26 62 FC | 	wrlong	local01, fp
1f1a0     98 01 90 FD | 	jmp	#LR__2463
1f1a4                 | LR__2457
1f1a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1f1a4     08 4E 05 F1 | 	add	fp, #8
1f1a8     A7 26 02 FB | 	rdlong	local01, fp
1f1ac     08 4E 85 F1 | 	sub	fp, #8
1f1b0     1D 26 0E F2 | 	cmp	local01, #29 wz
1f1b4     14 4E 05 A1 |  if_e	add	fp, #20
1f1b8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f1bc     14 4E 85 A1 |  if_e	sub	fp, #20
1f1c0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f1c4     20 00 90 5D |  if_ne	jmp	#LR__2458
1f1c8     A7 28 02 FB | 	rdlong	local02, fp
1f1cc     0C 4E 05 F1 | 	add	fp, #12
1f1d0     A7 2A 02 FB | 	rdlong	local03, fp
1f1d4     0C 4E 85 F1 | 	sub	fp, #12
1f1d8     15 29 52 F2 | 	cmps	local02, local03 wc
1f1dc     13 27 A2 F1 | 	subx	local01, local01
1f1e0     A7 26 62 FC | 	wrlong	local01, fp
1f1e4     54 01 90 FD | 	jmp	#LR__2463
1f1e8                 | LR__2458
1f1e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1f1e8     08 4E 05 F1 | 	add	fp, #8
1f1ec     A7 26 02 FB | 	rdlong	local01, fp
1f1f0     08 4E 85 F1 | 	sub	fp, #8
1f1f4     1D 26 0E F2 | 	cmp	local01, #29 wz
1f1f8     14 4E 05 A1 |  if_e	add	fp, #20
1f1fc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f200     14 4E 85 A1 |  if_e	sub	fp, #20
1f204     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f208     20 00 90 5D |  if_ne	jmp	#LR__2459
1f20c     A7 28 02 FB | 	rdlong	local02, fp
1f210     0C 4E 05 F1 | 	add	fp, #12
1f214     A7 2A 02 FB | 	rdlong	local03, fp
1f218     0C 4E 85 F1 | 	sub	fp, #12
1f21c     15 29 12 F2 | 	cmp	local02, local03 wc
1f220     13 27 A2 F1 | 	subx	local01, local01
1f224     A7 26 62 FC | 	wrlong	local01, fp
1f228     10 01 90 FD | 	jmp	#LR__2463
1f22c                 | LR__2459
1f22c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1f22c     08 4E 05 F1 | 	add	fp, #8
1f230     A7 26 02 FB | 	rdlong	local01, fp
1f234     08 4E 85 F1 | 	sub	fp, #8
1f238     2B 26 0E F2 | 	cmp	local01, #43 wz
1f23c     14 4E 05 A1 |  if_e	add	fp, #20
1f240     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f244     14 4E 85 A1 |  if_e	sub	fp, #20
1f248     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f24c     30 00 90 5D |  if_ne	jmp	#LR__2460
1f250     00 26 06 F6 | 	mov	local01, #0
1f254     A7 12 02 FB | 	rdlong	arg01, fp
1f258     70 E4 BE FD | 	call	#_convertstring
1f25c     FD 12 02 F6 | 	mov	arg01, result1
1f260     0C 4E 05 F1 | 	add	fp, #12
1f264     A7 14 02 FB | 	rdlong	arg02, fp
1f268     0C 4E 85 F1 | 	sub	fp, #12
1f26c     EC 74 B0 FD | 	call	#__system___string_cmp
1f270     00 FA 55 F2 | 	cmps	result1, #0 wc
1f274     00 26 26 C6 |  if_b	not	local01, #0
1f278     A7 26 62 FC | 	wrlong	local01, fp
1f27c     BC 00 90 FD | 	jmp	#LR__2463
1f280                 | LR__2460
1f280                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1f280     08 4E 05 F1 | 	add	fp, #8
1f284     A7 26 02 FB | 	rdlong	local01, fp
1f288     08 4E 85 F1 | 	sub	fp, #8
1f28c     1F 26 0E F2 | 	cmp	local01, #31 wz
1f290     14 4E 05 A1 |  if_e	add	fp, #20
1f294     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f298     14 4E 85 A1 |  if_e	sub	fp, #20
1f29c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f2a0     34 00 90 5D |  if_ne	jmp	#LR__2461
1f2a4     00 26 06 F6 | 	mov	local01, #0
1f2a8     A7 28 02 FB | 	rdlong	local02, fp
1f2ac     0C 4E 05 F1 | 	add	fp, #12
1f2b0     A7 12 02 FB | 	rdlong	arg01, fp
1f2b4     0C 4E 85 F1 | 	sub	fp, #12
1f2b8     10 E4 BE FD | 	call	#_convertstring
1f2bc     FD 14 02 F6 | 	mov	arg02, result1
1f2c0     14 13 02 F6 | 	mov	arg01, local02
1f2c4     94 74 B0 FD | 	call	#__system___string_cmp
1f2c8     00 FA 55 F2 | 	cmps	result1, #0 wc
1f2cc     00 26 26 C6 |  if_b	not	local01, #0
1f2d0     A7 26 62 FC | 	wrlong	local01, fp
1f2d4     64 00 90 FD | 	jmp	#LR__2463
1f2d8                 | LR__2461
1f2d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1f2d8     08 4E 05 F1 | 	add	fp, #8
1f2dc     A7 26 02 FB | 	rdlong	local01, fp
1f2e0     08 4E 85 F1 | 	sub	fp, #8
1f2e4     2B 26 0E F2 | 	cmp	local01, #43 wz
1f2e8     14 4E 05 A1 |  if_e	add	fp, #20
1f2ec     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f2f0     14 4E 85 A1 |  if_e	sub	fp, #20
1f2f4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f2f8     3C 00 90 5D |  if_ne	jmp	#LR__2462
1f2fc     00 26 06 F6 | 	mov	local01, #0
1f300     A7 12 02 FB | 	rdlong	arg01, fp
1f304     C4 E3 BE FD | 	call	#_convertstring
1f308     FD 28 02 F6 | 	mov	local02, result1
1f30c     0C 4E 05 F1 | 	add	fp, #12
1f310     A7 12 02 FB | 	rdlong	arg01, fp
1f314     0C 4E 85 F1 | 	sub	fp, #12
1f318     B0 E3 BE FD | 	call	#_convertstring
1f31c     FD 14 02 F6 | 	mov	arg02, result1
1f320     14 13 02 F6 | 	mov	arg01, local02
1f324     34 74 B0 FD | 	call	#__system___string_cmp
1f328     00 FA 55 F2 | 	cmps	result1, #0 wc
1f32c     00 26 26 C6 |  if_b	not	local01, #0
1f330     A7 26 62 FC | 	wrlong	local01, fp
1f334     04 00 90 FD | 	jmp	#LR__2463
1f338                 | LR__2462
1f338     A7 00 68 FC | 	wrlong	#0, fp
1f33c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f33c                 | LR__2463
1f33c     08 4E 05 F1 | 	add	fp, #8
1f340     A7 38 68 FC | 	wrlong	#28, fp
1f344     08 4E 85 F1 | 	sub	fp, #8
1f348     A7 12 02 F6 | 	mov	arg01, fp
1f34c     9C E2 BE FD | 	call	#_push
1f350     A7 F0 03 F6 | 	mov	ptra, fp
1f354     B2 00 A0 FD | 	call	#popregs_
1f358                 | _do_lt_ret
1f358     2D 00 64 FD | 	ret
1f35c                 | 
1f35c                 | ' 
1f35c                 | ' '--------------------------------- minus (-)
1f35c                 | ' 
1f35c                 | ' sub do_minus
1f35c                 | _do_minus
1f35c     05 4A 05 F6 | 	mov	COUNT_, #5
1f360     A8 00 A0 FD | 	call	#pushregs_
1f364     18 F0 07 F1 | 	add	ptra, #24
1f368     E8 E1 BE FD | 	call	#_pop
1f36c     FD 26 02 F6 | 	mov	local01, result1
1f370     FE 28 02 F6 | 	mov	local02, result2
1f374     FF 2A 02 F6 | 	mov	local03, result3
1f378     0C 4E 05 F1 | 	add	fp, #12
1f37c     A7 26 62 FC | 	wrlong	local01, fp
1f380     04 4E 05 F1 | 	add	fp, #4
1f384     A7 28 62 FC | 	wrlong	local02, fp
1f388     04 4E 05 F1 | 	add	fp, #4
1f38c     A7 2A 62 FC | 	wrlong	local03, fp
1f390     14 4E 85 F1 | 	sub	fp, #20
1f394     BC E1 BE FD | 	call	#_pop
1f398     FF 2A 02 F6 | 	mov	local03, result3
1f39c     A7 FA 61 FC | 	wrlong	result1, fp
1f3a0     04 4E 05 F1 | 	add	fp, #4
1f3a4     A7 FC 61 FC | 	wrlong	result2, fp
1f3a8     04 4E 05 F1 | 	add	fp, #4
1f3ac     A7 2A 62 FC | 	wrlong	local03, fp
1f3b0                 | ' 
1f3b0                 | ' t2=pop()
1f3b0                 | ' t1=pop()
1f3b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1f3b0     08 4E 85 F1 | 	sub	fp, #8
1f3b4     1D 2A 0E F2 | 	cmp	local03, #29 wz
1f3b8     14 4E 05 A1 |  if_e	add	fp, #20
1f3bc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f3c0     14 4E 85 A1 |  if_e	sub	fp, #20
1f3c4     16 2B 02 A6 |  if_e	mov	local03, local04
1f3c8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f3cc     5C 00 90 5D |  if_ne	jmp	#LR__2471
1f3d0                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1f3d0     0C 4E 05 F1 | 	add	fp, #12
1f3d4     A7 26 02 FB | 	rdlong	local01, fp
1f3d8     0C 4E 85 F1 | 	sub	fp, #12
1f3dc     A7 2A 02 FB | 	rdlong	local03, fp
1f3e0     15 27 12 F2 | 	cmp	local01, local03 wc
1f3e4     1C 00 90 3D |  if_ae	jmp	#LR__2470
1f3e8     A7 26 02 FB | 	rdlong	local01, fp
1f3ec     0C 4E 05 F1 | 	add	fp, #12
1f3f0     A7 28 02 FB | 	rdlong	local02, fp
1f3f4     0C 4E 85 F1 | 	sub	fp, #12
1f3f8     14 27 82 F1 | 	sub	local01, local02
1f3fc     A7 26 62 FC | 	wrlong	local01, fp
1f400     F4 02 90 FD | 	jmp	#LR__2480
1f404                 | LR__2470
1f404     A7 26 02 FB | 	rdlong	local01, fp
1f408     0C 4E 05 F1 | 	add	fp, #12
1f40c     A7 28 02 FB | 	rdlong	local02, fp
1f410     0C 4E 85 F1 | 	sub	fp, #12
1f414     14 27 82 F1 | 	sub	local01, local02
1f418     A7 26 62 FC | 	wrlong	local01, fp
1f41c     08 4E 05 F1 | 	add	fp, #8
1f420     A7 38 68 FC | 	wrlong	#28, fp
1f424     08 4E 85 F1 | 	sub	fp, #8
1f428     CC 02 90 FD | 	jmp	#LR__2480
1f42c                 | LR__2471
1f42c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1f42c     08 4E 05 F1 | 	add	fp, #8
1f430     A7 26 02 FB | 	rdlong	local01, fp
1f434     08 4E 85 F1 | 	sub	fp, #8
1f438     1D 26 0E F2 | 	cmp	local01, #29 wz
1f43c     14 4E 05 A1 |  if_e	add	fp, #20
1f440     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f444     14 4E 85 A1 |  if_e	sub	fp, #20
1f448     16 2B 02 A6 |  if_e	mov	local03, local04
1f44c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f450     28 00 90 5D |  if_ne	jmp	#LR__2472
1f454     A7 26 02 FB | 	rdlong	local01, fp
1f458     0C 4E 05 F1 | 	add	fp, #12
1f45c     A7 28 02 FB | 	rdlong	local02, fp
1f460     0C 4E 85 F1 | 	sub	fp, #12
1f464     14 27 82 F1 | 	sub	local01, local02
1f468     A7 26 62 FC | 	wrlong	local01, fp
1f46c     08 4E 05 F1 | 	add	fp, #8
1f470     A7 38 68 FC | 	wrlong	#28, fp
1f474     08 4E 85 F1 | 	sub	fp, #8
1f478     7C 02 90 FD | 	jmp	#LR__2480
1f47c                 | LR__2472
1f47c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1f47c     08 4E 05 F1 | 	add	fp, #8
1f480     A7 26 02 FB | 	rdlong	local01, fp
1f484     08 4E 85 F1 | 	sub	fp, #8
1f488     1D 26 0E F2 | 	cmp	local01, #29 wz
1f48c     14 4E 05 A1 |  if_e	add	fp, #20
1f490     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f494     14 4E 85 A1 |  if_e	sub	fp, #20
1f498     16 2B 02 A6 |  if_e	mov	local03, local04
1f49c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f4a0     34 00 90 5D |  if_ne	jmp	#LR__2473
1f4a4     A7 12 02 FB | 	rdlong	arg01, fp
1f4a8     FC 9C B0 FD | 	call	#__system___float_fromuns
1f4ac     FD 12 02 F6 | 	mov	arg01, result1
1f4b0     0C 4E 05 F1 | 	add	fp, #12
1f4b4     A7 14 02 FB | 	rdlong	arg02, fp
1f4b8     0C 4E 85 F1 | 	sub	fp, #12
1f4bc     1F 14 E6 F4 | 	bitnot	arg02, #31
1f4c0     18 9D B0 FD | 	call	#__system___float_add
1f4c4     A7 FA 61 FC | 	wrlong	result1, fp
1f4c8     08 4E 05 F1 | 	add	fp, #8
1f4cc     A7 3C 68 FC | 	wrlong	#30, fp
1f4d0     08 4E 85 F1 | 	sub	fp, #8
1f4d4     20 02 90 FD | 	jmp	#LR__2480
1f4d8                 | LR__2473
1f4d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1f4d8     08 4E 05 F1 | 	add	fp, #8
1f4dc     A7 26 02 FB | 	rdlong	local01, fp
1f4e0     08 4E 85 F1 | 	sub	fp, #8
1f4e4     1C 26 0E F2 | 	cmp	local01, #28 wz
1f4e8     14 4E 05 A1 |  if_e	add	fp, #20
1f4ec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f4f0     14 4E 85 A1 |  if_e	sub	fp, #20
1f4f4     16 2B 02 A6 |  if_e	mov	local03, local04
1f4f8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f4fc     1C 00 90 5D |  if_ne	jmp	#LR__2474
1f500     A7 26 02 FB | 	rdlong	local01, fp
1f504     0C 4E 05 F1 | 	add	fp, #12
1f508     A7 28 02 FB | 	rdlong	local02, fp
1f50c     0C 4E 85 F1 | 	sub	fp, #12
1f510     14 27 82 F1 | 	sub	local01, local02
1f514     A7 26 62 FC | 	wrlong	local01, fp
1f518     DC 01 90 FD | 	jmp	#LR__2480
1f51c                 | LR__2474
1f51c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1f51c     08 4E 05 F1 | 	add	fp, #8
1f520     A7 26 02 FB | 	rdlong	local01, fp
1f524     08 4E 85 F1 | 	sub	fp, #8
1f528     1C 26 0E F2 | 	cmp	local01, #28 wz
1f52c     14 4E 05 A1 |  if_e	add	fp, #20
1f530     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f534     14 4E 85 A1 |  if_e	sub	fp, #20
1f538     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1f53c     1C 00 90 5D |  if_ne	jmp	#LR__2475
1f540     A7 26 02 FB | 	rdlong	local01, fp
1f544     0C 4E 05 F1 | 	add	fp, #12
1f548     A7 28 02 FB | 	rdlong	local02, fp
1f54c     0C 4E 85 F1 | 	sub	fp, #12
1f550     14 27 82 F1 | 	sub	local01, local02
1f554     A7 26 62 FC | 	wrlong	local01, fp
1f558     9C 01 90 FD | 	jmp	#LR__2480
1f55c                 | LR__2475
1f55c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1f55c     08 4E 05 F1 | 	add	fp, #8
1f560     A7 26 02 FB | 	rdlong	local01, fp
1f564     08 4E 85 F1 | 	sub	fp, #8
1f568     1C 26 0E F2 | 	cmp	local01, #28 wz
1f56c     14 4E 05 A1 |  if_e	add	fp, #20
1f570     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f574     14 4E 85 A1 |  if_e	sub	fp, #20
1f578     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f57c     44 00 90 5D |  if_ne	jmp	#LR__2476
1f580     A7 12 02 FB | 	rdlong	arg01, fp
1f584     09 13 52 F6 | 	abs	arg01, arg01 wc
1f588     1F 2E C6 C9 |  if_b	decod	local05, #31
1f58c     00 2E 06 36 |  if_ae	mov	local05, #0
1f590     14 9C B0 FD | 	call	#__system___float_fromuns
1f594     17 FB 61 F5 | 	xor	result1, local05
1f598     FD 12 02 F6 | 	mov	arg01, result1
1f59c     0C 4E 05 F1 | 	add	fp, #12
1f5a0     A7 14 02 FB | 	rdlong	arg02, fp
1f5a4     0C 4E 85 F1 | 	sub	fp, #12
1f5a8     1F 14 E6 F4 | 	bitnot	arg02, #31
1f5ac     2C 9C B0 FD | 	call	#__system___float_add
1f5b0     A7 FA 61 FC | 	wrlong	result1, fp
1f5b4     08 4E 05 F1 | 	add	fp, #8
1f5b8     A7 3C 68 FC | 	wrlong	#30, fp
1f5bc     08 4E 85 F1 | 	sub	fp, #8
1f5c0     34 01 90 FD | 	jmp	#LR__2480
1f5c4                 | LR__2476
1f5c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1f5c4     08 4E 05 F1 | 	add	fp, #8
1f5c8     A7 26 02 FB | 	rdlong	local01, fp
1f5cc     08 4E 85 F1 | 	sub	fp, #8
1f5d0     1E 26 0E F2 | 	cmp	local01, #30 wz
1f5d4     14 4E 05 A1 |  if_e	add	fp, #20
1f5d8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f5dc     14 4E 85 A1 |  if_e	sub	fp, #20
1f5e0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f5e4     2C 00 90 5D |  if_ne	jmp	#LR__2477
1f5e8     A7 26 02 FB | 	rdlong	local01, fp
1f5ec     0C 4E 05 F1 | 	add	fp, #12
1f5f0     A7 12 02 FB | 	rdlong	arg01, fp
1f5f4     0C 4E 85 F1 | 	sub	fp, #12
1f5f8     AC 9B B0 FD | 	call	#__system___float_fromuns
1f5fc     FD 14 02 F6 | 	mov	arg02, result1
1f600     13 13 02 F6 | 	mov	arg01, local01
1f604     1F 14 E6 F4 | 	bitnot	arg02, #31
1f608     D0 9B B0 FD | 	call	#__system___float_add
1f60c     A7 FA 61 FC | 	wrlong	result1, fp
1f610     E4 00 90 FD | 	jmp	#LR__2480
1f614                 | LR__2477
1f614                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1f614     08 4E 05 F1 | 	add	fp, #8
1f618     A7 26 02 FB | 	rdlong	local01, fp
1f61c     08 4E 85 F1 | 	sub	fp, #8
1f620     1E 26 0E F2 | 	cmp	local01, #30 wz
1f624     14 4E 05 A1 |  if_e	add	fp, #20
1f628     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f62c     14 4E 85 A1 |  if_e	sub	fp, #20
1f630     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f634     3C 00 90 5D |  if_ne	jmp	#LR__2478
1f638     A7 26 02 FB | 	rdlong	local01, fp
1f63c     0C 4E 05 F1 | 	add	fp, #12
1f640     A7 12 02 FB | 	rdlong	arg01, fp
1f644     0C 4E 85 F1 | 	sub	fp, #12
1f648     09 13 52 F6 | 	abs	arg01, arg01 wc
1f64c     1F 2E C6 C9 |  if_b	decod	local05, #31
1f650     00 2E 06 36 |  if_ae	mov	local05, #0
1f654     50 9B B0 FD | 	call	#__system___float_fromuns
1f658     17 FB 61 F5 | 	xor	result1, local05
1f65c     FD 14 02 F6 | 	mov	arg02, result1
1f660     13 13 02 F6 | 	mov	arg01, local01
1f664     1F 14 E6 F4 | 	bitnot	arg02, #31
1f668     70 9B B0 FD | 	call	#__system___float_add
1f66c     A7 FA 61 FC | 	wrlong	result1, fp
1f670     84 00 90 FD | 	jmp	#LR__2480
1f674                 | LR__2478
1f674                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1f674     08 4E 05 F1 | 	add	fp, #8
1f678     A7 26 02 FB | 	rdlong	local01, fp
1f67c     08 4E 85 F1 | 	sub	fp, #8
1f680     1E 26 0E F2 | 	cmp	local01, #30 wz
1f684     14 4E 05 A1 |  if_e	add	fp, #20
1f688     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f68c     14 4E 85 A1 |  if_e	sub	fp, #20
1f690     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f694     20 00 90 5D |  if_ne	jmp	#LR__2479
1f698     A7 12 02 FB | 	rdlong	arg01, fp
1f69c     0C 4E 05 F1 | 	add	fp, #12
1f6a0     A7 14 02 FB | 	rdlong	arg02, fp
1f6a4     0C 4E 85 F1 | 	sub	fp, #12
1f6a8     1F 14 E6 F4 | 	bitnot	arg02, #31
1f6ac     2C 9B B0 FD | 	call	#__system___float_add
1f6b0     A7 FA 61 FC | 	wrlong	result1, fp
1f6b4     40 00 90 FD | 	jmp	#LR__2480
1f6b8                 | LR__2479
1f6b8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1f6b8     08 4E 05 F1 | 	add	fp, #8
1f6bc     A7 26 02 FB | 	rdlong	local01, fp
1f6c0     08 4E 85 F1 | 	sub	fp, #8
1f6c4     1F 26 0E F2 | 	cmp	local01, #31 wz
1f6c8     14 4E 05 51 |  if_ne	add	fp, #20
1f6cc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1f6d0     14 4E 85 51 |  if_ne	sub	fp, #20
1f6d4     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1f6d8     A7 06 68 AC |  if_e	wrlong	#3, fp
1f6dc     08 4E 05 A1 |  if_e	add	fp, #8
1f6e0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f6e4     08 4E 85 A1 |  if_e	sub	fp, #8
1f6e8     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1f6ec     08 4E 05 51 |  if_ne	add	fp, #8
1f6f0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1f6f4     08 4E 85 51 |  if_ne	sub	fp, #8
1f6f8                 | LR__2480
1f6f8     A7 12 02 F6 | 	mov	arg01, fp
1f6fc     EC DE BE FD | 	call	#_push
1f700     A7 F0 03 F6 | 	mov	ptra, fp
1f704     B2 00 A0 FD | 	call	#popregs_
1f708                 | _do_minus_ret
1f708     2D 00 64 FD | 	ret
1f70c                 | 
1f70c                 | ' 
1f70c                 | ' '--------------------------------- negative (-), one argument negative
1f70c                 | ' 
1f70c                 | ' sub do_negative
1f70c                 | _do_negative
1f70c     02 4A 05 F6 | 	mov	COUNT_, #2
1f710     A8 00 A0 FD | 	call	#pushregs_
1f714     0C F0 07 F1 | 	add	ptra, #12
1f718     38 DE BE FD | 	call	#_pop
1f71c     FF 26 02 F6 | 	mov	local01, result3
1f720     A7 FA 61 FC | 	wrlong	result1, fp
1f724     04 4E 05 F1 | 	add	fp, #4
1f728     A7 FC 61 FC | 	wrlong	result2, fp
1f72c     04 4E 05 F1 | 	add	fp, #4
1f730     A7 26 62 FC | 	wrlong	local01, fp
1f734                 | ' 
1f734                 | ' t1=pop()
1f734                 | ' if t1.result_type=result_int then 
1f734     08 4E 85 F1 | 	sub	fp, #8
1f738     1C 26 0E F2 | 	cmp	local01, #28 wz
1f73c     A7 28 02 AB |  if_e	rdlong	local02, fp
1f740     14 27 62 A6 |  if_e	neg	local01, local02
1f744     A7 26 62 AC |  if_e	wrlong	local01, fp
1f748     5C 00 90 AD |  if_e	jmp	#LR__2492
1f74c     08 4E 05 F1 | 	add	fp, #8
1f750     A7 26 02 FB | 	rdlong	local01, fp
1f754     08 4E 85 F1 | 	sub	fp, #8
1f758     1D 26 0E F2 | 	cmp	local01, #29 wz
1f75c     1C 00 90 5D |  if_ne	jmp	#LR__2490
1f760     A7 28 02 FB | 	rdlong	local02, fp
1f764     14 27 62 F6 | 	neg	local01, local02
1f768     A7 26 62 FC | 	wrlong	local01, fp
1f76c     08 4E 05 F1 | 	add	fp, #8
1f770     A7 38 68 FC | 	wrlong	#28, fp
1f774     08 4E 85 F1 | 	sub	fp, #8
1f778     2C 00 90 FD | 	jmp	#LR__2491
1f77c                 | LR__2490
1f77c     08 4E 05 F1 | 	add	fp, #8
1f780     A7 26 02 FB | 	rdlong	local01, fp
1f784     08 4E 85 F1 | 	sub	fp, #8
1f788     1E 26 0E F2 | 	cmp	local01, #30 wz
1f78c     A7 FA 01 AB |  if_e	rdlong	result1, fp
1f790     1F FA E5 A4 |  if_e	bitnot	result1, #31
1f794     A7 FA 61 AC |  if_e	wrlong	result1, fp
1f798     08 4E 05 51 |  if_ne	add	fp, #8
1f79c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1f7a0     08 4E 85 51 |  if_ne	sub	fp, #8
1f7a4     A7 50 68 5C |  if_ne	wrlong	#40, fp
1f7a8                 | LR__2491
1f7a8                 | LR__2492
1f7a8     A7 12 02 F6 | 	mov	arg01, fp
1f7ac     3C DE BE FD | 	call	#_push
1f7b0     A7 F0 03 F6 | 	mov	ptra, fp
1f7b4     B2 00 A0 FD | 	call	#popregs_
1f7b8                 | _do_negative_ret
1f7b8     2D 00 64 FD | 	ret
1f7bc                 | 
1f7bc                 | ' 
1f7bc                 | ' '--------------------------------- MOD (modulo)
1f7bc                 | ' 
1f7bc                 | ' sub do_mod 
1f7bc                 | _do_mod
1f7bc     01 4A 05 F6 | 	mov	COUNT_, #1
1f7c0     A8 00 A0 FD | 	call	#pushregs_
1f7c4     18 F0 07 F1 | 	add	ptra, #24
1f7c8     88 DD BE FD | 	call	#_pop
1f7cc     FD 92 02 F6 | 	mov	muldivb_, result1
1f7d0     FE 90 02 F6 | 	mov	muldiva_, result2
1f7d4     FF 26 02 F6 | 	mov	local01, result3
1f7d8     0C 4E 05 F1 | 	add	fp, #12
1f7dc     A7 92 62 FC | 	wrlong	muldivb_, fp
1f7e0     04 4E 05 F1 | 	add	fp, #4
1f7e4     A7 90 62 FC | 	wrlong	muldiva_, fp
1f7e8     04 4E 05 F1 | 	add	fp, #4
1f7ec     A7 26 62 FC | 	wrlong	local01, fp
1f7f0     14 4E 85 F1 | 	sub	fp, #20
1f7f4     5C DD BE FD | 	call	#_pop
1f7f8     A7 FA 61 FC | 	wrlong	result1, fp
1f7fc     04 4E 05 F1 | 	add	fp, #4
1f800     A7 FC 61 FC | 	wrlong	result2, fp
1f804     04 4E 05 F1 | 	add	fp, #4
1f808     A7 FE 61 FC | 	wrlong	result3, fp
1f80c                 | ' 
1f80c                 | ' t2=pop()
1f80c                 | ' t1=pop()
1f80c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1f80c     08 4E 85 F1 | 	sub	fp, #8
1f810     1F FE 0D F2 | 	cmp	result3, #31 wz
1f814     14 4E 05 51 |  if_ne	add	fp, #20
1f818     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1f81c     14 4E 85 51 |  if_ne	sub	fp, #20
1f820     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1f824     A7 14 68 AC |  if_e	wrlong	#10, fp
1f828     08 4E 05 A1 |  if_e	add	fp, #8
1f82c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f830     08 4E 85 A1 |  if_e	sub	fp, #8
1f834     90 01 90 AD |  if_e	jmp	#LR__2506
1f838                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1f838     08 4E 05 F1 | 	add	fp, #8
1f83c     A7 92 02 FB | 	rdlong	muldivb_, fp
1f840     08 4E 85 F1 | 	sub	fp, #8
1f844     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1f848     1C 00 90 5D |  if_ne	jmp	#LR__2500
1f84c     08 4E 05 F1 | 	add	fp, #8
1f850     A7 38 68 FC | 	wrlong	#28, fp
1f854     08 4E 85 F1 | 	sub	fp, #8
1f858     A7 12 02 FB | 	rdlong	arg01, fp
1f85c     00 14 06 F6 | 	mov	arg02, #0
1f860     10 A2 B0 FD | 	call	#__system___float_tointeger
1f864     A7 FA 61 FC | 	wrlong	result1, fp
1f868                 | LR__2500
1f868                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1f868     14 4E 05 F1 | 	add	fp, #20
1f86c     A7 92 02 FB | 	rdlong	muldivb_, fp
1f870     14 4E 85 F1 | 	sub	fp, #20
1f874     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1f878     28 00 90 5D |  if_ne	jmp	#LR__2501
1f87c     14 4E 05 F1 | 	add	fp, #20
1f880     A7 38 68 FC | 	wrlong	#28, fp
1f884     08 4E 85 F1 | 	sub	fp, #8
1f888     A7 12 02 FB | 	rdlong	arg01, fp
1f88c     0C 4E 85 F1 | 	sub	fp, #12
1f890     00 14 06 F6 | 	mov	arg02, #0
1f894     DC A1 B0 FD | 	call	#__system___float_tointeger
1f898     0C 4E 05 F1 | 	add	fp, #12
1f89c     A7 FA 61 FC | 	wrlong	result1, fp
1f8a0     0C 4E 85 F1 | 	sub	fp, #12
1f8a4                 | LR__2501
1f8a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1f8a4     08 4E 05 F1 | 	add	fp, #8
1f8a8     A7 92 02 FB | 	rdlong	muldivb_, fp
1f8ac     08 4E 85 F1 | 	sub	fp, #8
1f8b0     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1f8b4     14 4E 05 A1 |  if_e	add	fp, #20
1f8b8     A7 26 02 AB |  if_e	rdlong	local01, fp
1f8bc     14 4E 85 A1 |  if_e	sub	fp, #20
1f8c0     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1f8c4     20 00 90 5D |  if_ne	jmp	#LR__2502
1f8c8     0C 4E 05 F1 | 	add	fp, #12
1f8cc     A7 26 02 FB | 	rdlong	local01, fp
1f8d0     0C 4E 85 F1 | 	sub	fp, #12
1f8d4     A7 92 02 FB | 	rdlong	muldivb_, fp
1f8d8     13 93 12 FD | 	qdiv	muldivb_, local01
1f8dc     19 26 62 FD | 	getqy	local01
1f8e0     A7 26 62 FC | 	wrlong	local01, fp
1f8e4     E0 00 90 FD | 	jmp	#LR__2506
1f8e8                 | LR__2502
1f8e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1f8e8     08 4E 05 F1 | 	add	fp, #8
1f8ec     A7 92 02 FB | 	rdlong	muldivb_, fp
1f8f0     08 4E 85 F1 | 	sub	fp, #8
1f8f4     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1f8f8     14 4E 05 A1 |  if_e	add	fp, #20
1f8fc     A7 26 02 AB |  if_e	rdlong	local01, fp
1f900     14 4E 85 A1 |  if_e	sub	fp, #20
1f904     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1f908     2C 00 90 5D |  if_ne	jmp	#LR__2503
1f90c     0C 4E 05 F1 | 	add	fp, #12
1f910     A7 26 02 FB | 	rdlong	local01, fp
1f914     0C 4E 85 F1 | 	sub	fp, #12
1f918     A7 92 02 FB | 	rdlong	muldivb_, fp
1f91c     13 93 12 FD | 	qdiv	muldivb_, local01
1f920     19 26 62 FD | 	getqy	local01
1f924     A7 26 62 FC | 	wrlong	local01, fp
1f928     08 4E 05 F1 | 	add	fp, #8
1f92c     A7 38 68 FC | 	wrlong	#28, fp
1f930     08 4E 85 F1 | 	sub	fp, #8
1f934     90 00 90 FD | 	jmp	#LR__2506
1f938                 | LR__2503
1f938                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1f938     08 4E 05 F1 | 	add	fp, #8
1f93c     A7 92 02 FB | 	rdlong	muldivb_, fp
1f940     08 4E 85 F1 | 	sub	fp, #8
1f944     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1f948     14 4E 05 A1 |  if_e	add	fp, #20
1f94c     A7 26 02 AB |  if_e	rdlong	local01, fp
1f950     14 4E 85 A1 |  if_e	sub	fp, #20
1f954     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1f958     1C 00 90 5D |  if_ne	jmp	#LR__2504
1f95c     A7 90 02 FB | 	rdlong	muldiva_, fp
1f960     0C 4E 05 F1 | 	add	fp, #12
1f964     A7 92 02 FB | 	rdlong	muldivb_, fp
1f968     0C 4E 85 F1 | 	sub	fp, #12
1f96c     BA 00 A0 FD | 	call	#divide_
1f970     A7 90 62 FC | 	wrlong	muldiva_, fp
1f974     50 00 90 FD | 	jmp	#LR__2506
1f978                 | LR__2504
1f978                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1f978     08 4E 05 F1 | 	add	fp, #8
1f97c     A7 92 02 FB | 	rdlong	muldivb_, fp
1f980     08 4E 85 F1 | 	sub	fp, #8
1f984     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1f988     14 4E 05 A1 |  if_e	add	fp, #20
1f98c     A7 26 02 AB |  if_e	rdlong	local01, fp
1f990     14 4E 85 A1 |  if_e	sub	fp, #20
1f994     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1f998     1C 00 90 5D |  if_ne	jmp	#LR__2505
1f99c     A7 90 02 FB | 	rdlong	muldiva_, fp
1f9a0     0C 4E 05 F1 | 	add	fp, #12
1f9a4     A7 92 02 FB | 	rdlong	muldivb_, fp
1f9a8     0C 4E 85 F1 | 	sub	fp, #12
1f9ac     BA 00 A0 FD | 	call	#divide_
1f9b0     A7 90 62 FC | 	wrlong	muldiva_, fp
1f9b4     10 00 90 FD | 	jmp	#LR__2506
1f9b8                 | LR__2505
1f9b8     A7 16 68 FC | 	wrlong	#11, fp
1f9bc     08 4E 05 F1 | 	add	fp, #8
1f9c0     A7 FE 69 FC | 	wrlong	#255, fp
1f9c4     08 4E 85 F1 | 	sub	fp, #8
1f9c8                 | LR__2506
1f9c8     A7 12 02 F6 | 	mov	arg01, fp
1f9cc     1C DC BE FD | 	call	#_push
1f9d0     A7 F0 03 F6 | 	mov	ptra, fp
1f9d4     B2 00 A0 FD | 	call	#popregs_
1f9d8                 | _do_mod_ret
1f9d8     2D 00 64 FD | 	ret
1f9dc                 | 
1f9dc                 | ' 
1f9dc                 | ' '--------------------------------- mul (*)
1f9dc                 | ' 
1f9dc                 | ' sub do_mul
1f9dc                 | _do_mul
1f9dc     05 4A 05 F6 | 	mov	COUNT_, #5
1f9e0     A8 00 A0 FD | 	call	#pushregs_
1f9e4     18 F0 07 F1 | 	add	ptra, #24
1f9e8     68 DB BE FD | 	call	#_pop
1f9ec     FD 26 02 F6 | 	mov	local01, result1
1f9f0     FE 28 02 F6 | 	mov	local02, result2
1f9f4     FF 2A 02 F6 | 	mov	local03, result3
1f9f8     0C 4E 05 F1 | 	add	fp, #12
1f9fc     A7 26 62 FC | 	wrlong	local01, fp
1fa00     04 4E 05 F1 | 	add	fp, #4
1fa04     A7 28 62 FC | 	wrlong	local02, fp
1fa08     04 4E 05 F1 | 	add	fp, #4
1fa0c     A7 2A 62 FC | 	wrlong	local03, fp
1fa10     14 4E 85 F1 | 	sub	fp, #20
1fa14     3C DB BE FD | 	call	#_pop
1fa18     FF 2A 02 F6 | 	mov	local03, result3
1fa1c     A7 FA 61 FC | 	wrlong	result1, fp
1fa20     04 4E 05 F1 | 	add	fp, #4
1fa24     A7 FC 61 FC | 	wrlong	result2, fp
1fa28     04 4E 05 F1 | 	add	fp, #4
1fa2c     A7 2A 62 FC | 	wrlong	local03, fp
1fa30                 | ' 
1fa30                 | ' t2=pop()
1fa30                 | ' t1=pop()
1fa30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1fa30     08 4E 85 F1 | 	sub	fp, #8
1fa34     1D 2A 0E F2 | 	cmp	local03, #29 wz
1fa38     14 4E 05 A1 |  if_e	add	fp, #20
1fa3c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fa40     14 4E 85 A1 |  if_e	sub	fp, #20
1fa44     16 2B 02 A6 |  if_e	mov	local03, local04
1fa48     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fa4c     20 00 90 5D |  if_ne	jmp	#LR__2510
1fa50     A7 28 02 FB | 	rdlong	local02, fp
1fa54     0C 4E 05 F1 | 	add	fp, #12
1fa58     A7 2A 02 FB | 	rdlong	local03, fp
1fa5c     15 29 02 FD | 	qmul	local02, local03
1fa60     0C 4E 85 F1 | 	sub	fp, #12
1fa64     18 26 62 FD | 	getqx	local01
1fa68     A7 26 62 FC | 	wrlong	local01, fp
1fa6c     C4 02 90 FD | 	jmp	#LR__2519
1fa70                 | LR__2510
1fa70                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1fa70     08 4E 05 F1 | 	add	fp, #8
1fa74     A7 26 02 FB | 	rdlong	local01, fp
1fa78     08 4E 85 F1 | 	sub	fp, #8
1fa7c     1D 26 0E F2 | 	cmp	local01, #29 wz
1fa80     14 4E 05 A1 |  if_e	add	fp, #20
1fa84     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fa88     14 4E 85 A1 |  if_e	sub	fp, #20
1fa8c     16 2B 02 A6 |  if_e	mov	local03, local04
1fa90     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fa94     2C 00 90 5D |  if_ne	jmp	#LR__2511
1fa98     A7 28 02 FB | 	rdlong	local02, fp
1fa9c     0C 4E 05 F1 | 	add	fp, #12
1faa0     A7 2A 02 FB | 	rdlong	local03, fp
1faa4     15 29 02 FD | 	qmul	local02, local03
1faa8     0C 4E 85 F1 | 	sub	fp, #12
1faac     18 26 62 FD | 	getqx	local01
1fab0     A7 26 62 FC | 	wrlong	local01, fp
1fab4     08 4E 05 F1 | 	add	fp, #8
1fab8     A7 38 68 FC | 	wrlong	#28, fp
1fabc     08 4E 85 F1 | 	sub	fp, #8
1fac0     70 02 90 FD | 	jmp	#LR__2519
1fac4                 | LR__2511
1fac4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1fac4     08 4E 05 F1 | 	add	fp, #8
1fac8     A7 26 02 FB | 	rdlong	local01, fp
1facc     08 4E 85 F1 | 	sub	fp, #8
1fad0     1D 26 0E F2 | 	cmp	local01, #29 wz
1fad4     14 4E 05 A1 |  if_e	add	fp, #20
1fad8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fadc     14 4E 85 A1 |  if_e	sub	fp, #20
1fae0     16 2B 02 A6 |  if_e	mov	local03, local04
1fae4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fae8     30 00 90 5D |  if_ne	jmp	#LR__2512
1faec     A7 12 02 FB | 	rdlong	arg01, fp
1faf0     B4 96 B0 FD | 	call	#__system___float_fromuns
1faf4     FD 12 02 F6 | 	mov	arg01, result1
1faf8     0C 4E 05 F1 | 	add	fp, #12
1fafc     A7 14 02 FB | 	rdlong	arg02, fp
1fb00     0C 4E 85 F1 | 	sub	fp, #12
1fb04     A4 9A B0 FD | 	call	#__system___float_mul
1fb08     A7 FA 61 FC | 	wrlong	result1, fp
1fb0c     08 4E 05 F1 | 	add	fp, #8
1fb10     A7 3C 68 FC | 	wrlong	#30, fp
1fb14     08 4E 85 F1 | 	sub	fp, #8
1fb18     18 02 90 FD | 	jmp	#LR__2519
1fb1c                 | LR__2512
1fb1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1fb1c     08 4E 05 F1 | 	add	fp, #8
1fb20     A7 26 02 FB | 	rdlong	local01, fp
1fb24     08 4E 85 F1 | 	sub	fp, #8
1fb28     1C 26 0E F2 | 	cmp	local01, #28 wz
1fb2c     14 4E 05 A1 |  if_e	add	fp, #20
1fb30     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fb34     14 4E 85 A1 |  if_e	sub	fp, #20
1fb38     16 2B 02 A6 |  if_e	mov	local03, local04
1fb3c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fb40     20 00 90 5D |  if_ne	jmp	#LR__2513
1fb44     A7 28 02 FB | 	rdlong	local02, fp
1fb48     0C 4E 05 F1 | 	add	fp, #12
1fb4c     A7 2A 02 FB | 	rdlong	local03, fp
1fb50     15 29 02 FD | 	qmul	local02, local03
1fb54     0C 4E 85 F1 | 	sub	fp, #12
1fb58     18 26 62 FD | 	getqx	local01
1fb5c     A7 26 62 FC | 	wrlong	local01, fp
1fb60     D0 01 90 FD | 	jmp	#LR__2519
1fb64                 | LR__2513
1fb64                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1fb64     08 4E 05 F1 | 	add	fp, #8
1fb68     A7 26 02 FB | 	rdlong	local01, fp
1fb6c     08 4E 85 F1 | 	sub	fp, #8
1fb70     1C 26 0E F2 | 	cmp	local01, #28 wz
1fb74     14 4E 05 A1 |  if_e	add	fp, #20
1fb78     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fb7c     14 4E 85 A1 |  if_e	sub	fp, #20
1fb80     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1fb84     20 00 90 5D |  if_ne	jmp	#LR__2514
1fb88     A7 28 02 FB | 	rdlong	local02, fp
1fb8c     0C 4E 05 F1 | 	add	fp, #12
1fb90     A7 2A 02 FB | 	rdlong	local03, fp
1fb94     15 29 02 FD | 	qmul	local02, local03
1fb98     0C 4E 85 F1 | 	sub	fp, #12
1fb9c     18 26 62 FD | 	getqx	local01
1fba0     A7 26 62 FC | 	wrlong	local01, fp
1fba4     8C 01 90 FD | 	jmp	#LR__2519
1fba8                 | LR__2514
1fba8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1fba8     08 4E 05 F1 | 	add	fp, #8
1fbac     A7 26 02 FB | 	rdlong	local01, fp
1fbb0     08 4E 85 F1 | 	sub	fp, #8
1fbb4     1C 26 0E F2 | 	cmp	local01, #28 wz
1fbb8     14 4E 05 A1 |  if_e	add	fp, #20
1fbbc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fbc0     14 4E 85 A1 |  if_e	sub	fp, #20
1fbc4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fbc8     40 00 90 5D |  if_ne	jmp	#LR__2515
1fbcc     A7 12 02 FB | 	rdlong	arg01, fp
1fbd0     09 13 52 F6 | 	abs	arg01, arg01 wc
1fbd4     1F 2E C6 C9 |  if_b	decod	local05, #31
1fbd8     00 2E 06 36 |  if_ae	mov	local05, #0
1fbdc     C8 95 B0 FD | 	call	#__system___float_fromuns
1fbe0     17 FB 61 F5 | 	xor	result1, local05
1fbe4     FD 12 02 F6 | 	mov	arg01, result1
1fbe8     0C 4E 05 F1 | 	add	fp, #12
1fbec     A7 14 02 FB | 	rdlong	arg02, fp
1fbf0     0C 4E 85 F1 | 	sub	fp, #12
1fbf4     B4 99 B0 FD | 	call	#__system___float_mul
1fbf8     A7 FA 61 FC | 	wrlong	result1, fp
1fbfc     08 4E 05 F1 | 	add	fp, #8
1fc00     A7 3C 68 FC | 	wrlong	#30, fp
1fc04     08 4E 85 F1 | 	sub	fp, #8
1fc08     28 01 90 FD | 	jmp	#LR__2519
1fc0c                 | LR__2515
1fc0c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1fc0c     08 4E 05 F1 | 	add	fp, #8
1fc10     A7 26 02 FB | 	rdlong	local01, fp
1fc14     08 4E 85 F1 | 	sub	fp, #8
1fc18     1E 26 0E F2 | 	cmp	local01, #30 wz
1fc1c     14 4E 05 A1 |  if_e	add	fp, #20
1fc20     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fc24     14 4E 85 A1 |  if_e	sub	fp, #20
1fc28     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fc2c     28 00 90 5D |  if_ne	jmp	#LR__2516
1fc30     A7 26 02 FB | 	rdlong	local01, fp
1fc34     0C 4E 05 F1 | 	add	fp, #12
1fc38     A7 12 02 FB | 	rdlong	arg01, fp
1fc3c     0C 4E 85 F1 | 	sub	fp, #12
1fc40     64 95 B0 FD | 	call	#__system___float_fromuns
1fc44     FD 14 02 F6 | 	mov	arg02, result1
1fc48     13 13 02 F6 | 	mov	arg01, local01
1fc4c     5C 99 B0 FD | 	call	#__system___float_mul
1fc50     A7 FA 61 FC | 	wrlong	result1, fp
1fc54     DC 00 90 FD | 	jmp	#LR__2519
1fc58                 | LR__2516
1fc58                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1fc58     08 4E 05 F1 | 	add	fp, #8
1fc5c     A7 26 02 FB | 	rdlong	local01, fp
1fc60     08 4E 85 F1 | 	sub	fp, #8
1fc64     1E 26 0E F2 | 	cmp	local01, #30 wz
1fc68     14 4E 05 A1 |  if_e	add	fp, #20
1fc6c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fc70     14 4E 85 A1 |  if_e	sub	fp, #20
1fc74     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fc78     38 00 90 5D |  if_ne	jmp	#LR__2517
1fc7c     A7 26 02 FB | 	rdlong	local01, fp
1fc80     0C 4E 05 F1 | 	add	fp, #12
1fc84     A7 12 02 FB | 	rdlong	arg01, fp
1fc88     0C 4E 85 F1 | 	sub	fp, #12
1fc8c     09 13 52 F6 | 	abs	arg01, arg01 wc
1fc90     1F 2E C6 C9 |  if_b	decod	local05, #31
1fc94     00 2E 06 36 |  if_ae	mov	local05, #0
1fc98     0C 95 B0 FD | 	call	#__system___float_fromuns
1fc9c     17 FB 61 F5 | 	xor	result1, local05
1fca0     FD 14 02 F6 | 	mov	arg02, result1
1fca4     13 13 02 F6 | 	mov	arg01, local01
1fca8     00 99 B0 FD | 	call	#__system___float_mul
1fcac     A7 FA 61 FC | 	wrlong	result1, fp
1fcb0     80 00 90 FD | 	jmp	#LR__2519
1fcb4                 | LR__2517
1fcb4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1fcb4     08 4E 05 F1 | 	add	fp, #8
1fcb8     A7 26 02 FB | 	rdlong	local01, fp
1fcbc     08 4E 85 F1 | 	sub	fp, #8
1fcc0     1E 26 0E F2 | 	cmp	local01, #30 wz
1fcc4     14 4E 05 A1 |  if_e	add	fp, #20
1fcc8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fccc     14 4E 85 A1 |  if_e	sub	fp, #20
1fcd0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fcd4     1C 00 90 5D |  if_ne	jmp	#LR__2518
1fcd8     A7 12 02 FB | 	rdlong	arg01, fp
1fcdc     0C 4E 05 F1 | 	add	fp, #12
1fce0     A7 14 02 FB | 	rdlong	arg02, fp
1fce4     0C 4E 85 F1 | 	sub	fp, #12
1fce8     C0 98 B0 FD | 	call	#__system___float_mul
1fcec     A7 FA 61 FC | 	wrlong	result1, fp
1fcf0     40 00 90 FD | 	jmp	#LR__2519
1fcf4                 | LR__2518
1fcf4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1fcf4     08 4E 05 F1 | 	add	fp, #8
1fcf8     A7 26 02 FB | 	rdlong	local01, fp
1fcfc     08 4E 85 F1 | 	sub	fp, #8
1fd00     1F 26 0E F2 | 	cmp	local01, #31 wz
1fd04     14 4E 05 51 |  if_ne	add	fp, #20
1fd08     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1fd0c     14 4E 85 51 |  if_ne	sub	fp, #20
1fd10     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1fd14     A7 10 68 AC |  if_e	wrlong	#8, fp
1fd18     08 4E 05 A1 |  if_e	add	fp, #8
1fd1c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1fd20     08 4E 85 A1 |  if_e	sub	fp, #8
1fd24     A7 12 68 5C |  if_ne	wrlong	#9, fp
1fd28     08 4E 05 51 |  if_ne	add	fp, #8
1fd2c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1fd30     08 4E 85 51 |  if_ne	sub	fp, #8
1fd34                 | LR__2519
1fd34     A7 12 02 F6 | 	mov	arg01, fp
1fd38     B0 D8 BE FD | 	call	#_push
1fd3c     A7 F0 03 F6 | 	mov	ptra, fp
1fd40     B2 00 A0 FD | 	call	#popregs_
1fd44                 | _do_mul_ret
1fd44     2D 00 64 FD | 	ret
1fd48                 | 
1fd48                 | ' 
1fd48                 | ' '--------------------------------- not equal (<>)
1fd48                 | ' 
1fd48                 | ' sub do_ne
1fd48                 | _do_ne
1fd48     05 4A 05 F6 | 	mov	COUNT_, #5
1fd4c     A8 00 A0 FD | 	call	#pushregs_
1fd50     18 F0 07 F1 | 	add	ptra, #24
1fd54     FC D7 BE FD | 	call	#_pop
1fd58     FD 26 02 F6 | 	mov	local01, result1
1fd5c     FE 28 02 F6 | 	mov	local02, result2
1fd60     FF 2A 02 F6 | 	mov	local03, result3
1fd64     0C 4E 05 F1 | 	add	fp, #12
1fd68     A7 26 62 FC | 	wrlong	local01, fp
1fd6c     04 4E 05 F1 | 	add	fp, #4
1fd70     A7 28 62 FC | 	wrlong	local02, fp
1fd74     04 4E 05 F1 | 	add	fp, #4
1fd78     A7 2A 62 FC | 	wrlong	local03, fp
1fd7c     14 4E 85 F1 | 	sub	fp, #20
1fd80     D0 D7 BE FD | 	call	#_pop
1fd84     FF 2A 02 F6 | 	mov	local03, result3
1fd88     A7 FA 61 FC | 	wrlong	result1, fp
1fd8c     04 4E 05 F1 | 	add	fp, #4
1fd90     A7 FC 61 FC | 	wrlong	result2, fp
1fd94     04 4E 05 F1 | 	add	fp, #4
1fd98     A7 2A 62 FC | 	wrlong	local03, fp
1fd9c                 | ' 
1fd9c                 | ' t2=pop()
1fd9c                 | ' t1=pop()
1fd9c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1fd9c     08 4E 85 F1 | 	sub	fp, #8
1fda0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1fda4     14 4E 05 A1 |  if_e	add	fp, #20
1fda8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fdac     14 4E 85 A1 |  if_e	sub	fp, #20
1fdb0     16 2B 02 A6 |  if_e	mov	local03, local04
1fdb4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1fdb8     28 00 90 5D |  if_ne	jmp	#LR__2520
1fdbc     00 26 06 F6 | 	mov	local01, #0
1fdc0     A7 12 02 FB | 	rdlong	arg01, fp
1fdc4     0C 4E 05 F1 | 	add	fp, #12
1fdc8     A7 14 02 FB | 	rdlong	arg02, fp
1fdcc     0C 4E 85 F1 | 	sub	fp, #12
1fdd0     88 69 B0 FD | 	call	#__system___string_cmp
1fdd4     00 FA 0D F2 | 	cmp	result1, #0 wz
1fdd8     00 26 26 56 |  if_ne	not	local01, #0
1fddc     A7 26 62 FC | 	wrlong	local01, fp
1fde0     20 04 90 FD | 	jmp	#LR__2533
1fde4                 | LR__2520
1fde4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1fde4     08 4E 05 F1 | 	add	fp, #8
1fde8     A7 26 02 FB | 	rdlong	local01, fp
1fdec     08 4E 85 F1 | 	sub	fp, #8
1fdf0     1E 26 0E F2 | 	cmp	local01, #30 wz
1fdf4     14 4E 05 A1 |  if_e	add	fp, #20
1fdf8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fdfc     14 4E 85 A1 |  if_e	sub	fp, #20
1fe00     16 2B 02 A6 |  if_e	mov	local03, local04
1fe04     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fe08     2C 00 90 5D |  if_ne	jmp	#LR__2521
1fe0c     00 26 06 F6 | 	mov	local01, #0
1fe10     A7 12 02 FB | 	rdlong	arg01, fp
1fe14     0C 4E 05 F1 | 	add	fp, #12
1fe18     A7 14 02 FB | 	rdlong	arg02, fp
1fe1c     0C 4E 85 F1 | 	sub	fp, #12
1fe20     01 16 06 F6 | 	mov	arg03, #1
1fe24     B8 9B B0 FD | 	call	#__system___float_cmp
1fe28     00 FA 0D F2 | 	cmp	result1, #0 wz
1fe2c     00 26 26 56 |  if_ne	not	local01, #0
1fe30     A7 26 62 FC | 	wrlong	local01, fp
1fe34     CC 03 90 FD | 	jmp	#LR__2533
1fe38                 | LR__2521
1fe38                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1fe38     08 4E 05 F1 | 	add	fp, #8
1fe3c     A7 26 02 FB | 	rdlong	local01, fp
1fe40     08 4E 85 F1 | 	sub	fp, #8
1fe44     1E 26 0E F2 | 	cmp	local01, #30 wz
1fe48     14 4E 05 A1 |  if_e	add	fp, #20
1fe4c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fe50     14 4E 85 A1 |  if_e	sub	fp, #20
1fe54     16 2B 02 A6 |  if_e	mov	local03, local04
1fe58     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fe5c     48 00 90 5D |  if_ne	jmp	#LR__2522
1fe60     00 26 06 F6 | 	mov	local01, #0
1fe64     A7 28 02 FB | 	rdlong	local02, fp
1fe68     0C 4E 05 F1 | 	add	fp, #12
1fe6c     A7 12 02 FB | 	rdlong	arg01, fp
1fe70     0C 4E 85 F1 | 	sub	fp, #12
1fe74     09 13 52 F6 | 	abs	arg01, arg01 wc
1fe78     1F 2E C6 C9 |  if_b	decod	local05, #31
1fe7c     00 2E 06 36 |  if_ae	mov	local05, #0
1fe80     24 93 B0 FD | 	call	#__system___float_fromuns
1fe84     17 FB 61 F5 | 	xor	result1, local05
1fe88     FD 14 02 F6 | 	mov	arg02, result1
1fe8c     14 13 02 F6 | 	mov	arg01, local02
1fe90     01 16 06 F6 | 	mov	arg03, #1
1fe94     48 9B B0 FD | 	call	#__system___float_cmp
1fe98     00 FA 0D F2 | 	cmp	result1, #0 wz
1fe9c     00 26 26 56 |  if_ne	not	local01, #0
1fea0     A7 26 62 FC | 	wrlong	local01, fp
1fea4     5C 03 90 FD | 	jmp	#LR__2533
1fea8                 | LR__2522
1fea8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1fea8     08 4E 05 F1 | 	add	fp, #8
1feac     A7 26 02 FB | 	rdlong	local01, fp
1feb0     08 4E 85 F1 | 	sub	fp, #8
1feb4     1E 26 0E F2 | 	cmp	local01, #30 wz
1feb8     14 4E 05 A1 |  if_e	add	fp, #20
1febc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fec0     14 4E 85 A1 |  if_e	sub	fp, #20
1fec4     16 2B 02 A6 |  if_e	mov	local03, local04
1fec8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fecc     38 00 90 5D |  if_ne	jmp	#LR__2523
1fed0     00 26 06 F6 | 	mov	local01, #0
1fed4     A7 28 02 FB | 	rdlong	local02, fp
1fed8     0C 4E 05 F1 | 	add	fp, #12
1fedc     A7 12 02 FB | 	rdlong	arg01, fp
1fee0     0C 4E 85 F1 | 	sub	fp, #12
1fee4     C0 92 B0 FD | 	call	#__system___float_fromuns
1fee8     FD 14 02 F6 | 	mov	arg02, result1
1feec     14 13 02 F6 | 	mov	arg01, local02
1fef0     01 16 06 F6 | 	mov	arg03, #1
1fef4     E8 9A B0 FD | 	call	#__system___float_cmp
1fef8     00 FA 0D F2 | 	cmp	result1, #0 wz
1fefc     00 26 26 56 |  if_ne	not	local01, #0
1ff00     A7 26 62 FC | 	wrlong	local01, fp
1ff04     FC 02 90 FD | 	jmp	#LR__2533
1ff08                 | LR__2523
1ff08                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1ff08     08 4E 05 F1 | 	add	fp, #8
1ff0c     A7 26 02 FB | 	rdlong	local01, fp
1ff10     08 4E 85 F1 | 	sub	fp, #8
1ff14     1C 26 0E F2 | 	cmp	local01, #28 wz
1ff18     14 4E 05 A1 |  if_e	add	fp, #20
1ff1c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ff20     14 4E 85 A1 |  if_e	sub	fp, #20
1ff24     16 2B 02 A6 |  if_e	mov	local03, local04
1ff28     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ff2c     44 00 90 5D |  if_ne	jmp	#LR__2524
1ff30     00 26 06 F6 | 	mov	local01, #0
1ff34     A7 12 02 FB | 	rdlong	arg01, fp
1ff38     09 13 52 F6 | 	abs	arg01, arg01 wc
1ff3c     1F 2E C6 C9 |  if_b	decod	local05, #31
1ff40     00 2E 06 36 |  if_ae	mov	local05, #0
1ff44     60 92 B0 FD | 	call	#__system___float_fromuns
1ff48     17 FB 61 F5 | 	xor	result1, local05
1ff4c     FD 12 02 F6 | 	mov	arg01, result1
1ff50     0C 4E 05 F1 | 	add	fp, #12
1ff54     A7 14 02 FB | 	rdlong	arg02, fp
1ff58     0C 4E 85 F1 | 	sub	fp, #12
1ff5c     01 16 06 F6 | 	mov	arg03, #1
1ff60     7C 9A B0 FD | 	call	#__system___float_cmp
1ff64     00 FA 0D F2 | 	cmp	result1, #0 wz
1ff68     00 26 26 56 |  if_ne	not	local01, #0
1ff6c     A7 26 62 FC | 	wrlong	local01, fp
1ff70     90 02 90 FD | 	jmp	#LR__2533
1ff74                 | LR__2524
1ff74                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1ff74     08 4E 05 F1 | 	add	fp, #8
1ff78     A7 26 02 FB | 	rdlong	local01, fp
1ff7c     08 4E 85 F1 | 	sub	fp, #8
1ff80     1C 26 0E F2 | 	cmp	local01, #28 wz
1ff84     14 4E 05 A1 |  if_e	add	fp, #20
1ff88     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ff8c     14 4E 85 A1 |  if_e	sub	fp, #20
1ff90     16 2B 02 A6 |  if_e	mov	local03, local04
1ff94     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ff98     24 00 90 5D |  if_ne	jmp	#LR__2525
1ff9c     00 26 06 F6 | 	mov	local01, #0
1ffa0     A7 28 02 FB | 	rdlong	local02, fp
1ffa4     0C 4E 05 F1 | 	add	fp, #12
1ffa8     A7 2A 02 FB | 	rdlong	local03, fp
1ffac     0C 4E 85 F1 | 	sub	fp, #12
1ffb0     15 29 0A F2 | 	cmp	local02, local03 wz
1ffb4     01 26 66 56 |  if_ne	neg	local01, #1
1ffb8     A7 26 62 FC | 	wrlong	local01, fp
1ffbc     44 02 90 FD | 	jmp	#LR__2533
1ffc0                 | LR__2525
1ffc0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1ffc0     08 4E 05 F1 | 	add	fp, #8
1ffc4     A7 26 02 FB | 	rdlong	local01, fp
1ffc8     08 4E 85 F1 | 	sub	fp, #8
1ffcc     1C 26 0E F2 | 	cmp	local01, #28 wz
1ffd0     14 4E 05 A1 |  if_e	add	fp, #20
1ffd4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ffd8     14 4E 85 A1 |  if_e	sub	fp, #20
1ffdc     16 2B 02 A6 |  if_e	mov	local03, local04
1ffe0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ffe4     24 00 90 5D |  if_ne	jmp	#LR__2526
1ffe8     00 26 06 F6 | 	mov	local01, #0
1ffec     A7 28 02 FB | 	rdlong	local02, fp
1fff0     0C 4E 05 F1 | 	add	fp, #12
1fff4     A7 2A 02 FB | 	rdlong	local03, fp
1fff8     0C 4E 85 F1 | 	sub	fp, #12
1fffc     15 29 0A F2 | 	cmp	local02, local03 wz
20000     01 26 66 56 |  if_ne	neg	local01, #1
20004     A7 26 62 FC | 	wrlong	local01, fp
20008     F8 01 90 FD | 	jmp	#LR__2533
2000c                 | LR__2526
2000c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
2000c     08 4E 05 F1 | 	add	fp, #8
20010     A7 26 02 FB | 	rdlong	local01, fp
20014     08 4E 85 F1 | 	sub	fp, #8
20018     1D 26 0E F2 | 	cmp	local01, #29 wz
2001c     14 4E 05 A1 |  if_e	add	fp, #20
20020     A7 2C 02 AB |  if_e	rdlong	local04, fp
20024     14 4E 85 A1 |  if_e	sub	fp, #20
20028     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
2002c     34 00 90 5D |  if_ne	jmp	#LR__2527
20030     00 26 06 F6 | 	mov	local01, #0
20034     A7 12 02 FB | 	rdlong	arg01, fp
20038     6C 91 B0 FD | 	call	#__system___float_fromuns
2003c     FD 12 02 F6 | 	mov	arg01, result1
20040     0C 4E 05 F1 | 	add	fp, #12
20044     A7 14 02 FB | 	rdlong	arg02, fp
20048     0C 4E 85 F1 | 	sub	fp, #12
2004c     01 16 06 F6 | 	mov	arg03, #1
20050     8C 99 B0 FD | 	call	#__system___float_cmp
20054     00 FA 0D F2 | 	cmp	result1, #0 wz
20058     00 26 26 56 |  if_ne	not	local01, #0
2005c     A7 26 62 FC | 	wrlong	local01, fp
20060     A0 01 90 FD | 	jmp	#LR__2533
20064                 | LR__2527
20064                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
20064     08 4E 05 F1 | 	add	fp, #8
20068     A7 26 02 FB | 	rdlong	local01, fp
2006c     08 4E 85 F1 | 	sub	fp, #8
20070     1D 26 0E F2 | 	cmp	local01, #29 wz
20074     14 4E 05 A1 |  if_e	add	fp, #20
20078     A7 2A 02 AB |  if_e	rdlong	local03, fp
2007c     14 4E 85 A1 |  if_e	sub	fp, #20
20080     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20084     24 00 90 5D |  if_ne	jmp	#LR__2528
20088     00 26 06 F6 | 	mov	local01, #0
2008c     A7 28 02 FB | 	rdlong	local02, fp
20090     0C 4E 05 F1 | 	add	fp, #12
20094     A7 2A 02 FB | 	rdlong	local03, fp
20098     0C 4E 85 F1 | 	sub	fp, #12
2009c     15 29 0A F2 | 	cmp	local02, local03 wz
200a0     01 26 66 56 |  if_ne	neg	local01, #1
200a4     A7 26 62 FC | 	wrlong	local01, fp
200a8     58 01 90 FD | 	jmp	#LR__2533
200ac                 | LR__2528
200ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
200ac     08 4E 05 F1 | 	add	fp, #8
200b0     A7 26 02 FB | 	rdlong	local01, fp
200b4     08 4E 85 F1 | 	sub	fp, #8
200b8     1D 26 0E F2 | 	cmp	local01, #29 wz
200bc     14 4E 05 A1 |  if_e	add	fp, #20
200c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
200c4     14 4E 85 A1 |  if_e	sub	fp, #20
200c8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
200cc     24 00 90 5D |  if_ne	jmp	#LR__2529
200d0     00 26 06 F6 | 	mov	local01, #0
200d4     A7 28 02 FB | 	rdlong	local02, fp
200d8     0C 4E 05 F1 | 	add	fp, #12
200dc     A7 2A 02 FB | 	rdlong	local03, fp
200e0     0C 4E 85 F1 | 	sub	fp, #12
200e4     15 29 0A F2 | 	cmp	local02, local03 wz
200e8     01 26 66 56 |  if_ne	neg	local01, #1
200ec     A7 26 62 FC | 	wrlong	local01, fp
200f0     10 01 90 FD | 	jmp	#LR__2533
200f4                 | LR__2529
200f4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
200f4     08 4E 05 F1 | 	add	fp, #8
200f8     A7 26 02 FB | 	rdlong	local01, fp
200fc     08 4E 85 F1 | 	sub	fp, #8
20100     2B 26 0E F2 | 	cmp	local01, #43 wz
20104     14 4E 05 A1 |  if_e	add	fp, #20
20108     A7 2A 02 AB |  if_e	rdlong	local03, fp
2010c     14 4E 85 A1 |  if_e	sub	fp, #20
20110     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20114     30 00 90 5D |  if_ne	jmp	#LR__2530
20118     00 26 06 F6 | 	mov	local01, #0
2011c     A7 12 02 FB | 	rdlong	arg01, fp
20120     A8 D5 BE FD | 	call	#_convertstring
20124     FD 12 02 F6 | 	mov	arg01, result1
20128     0C 4E 05 F1 | 	add	fp, #12
2012c     A7 14 02 FB | 	rdlong	arg02, fp
20130     0C 4E 85 F1 | 	sub	fp, #12
20134     24 66 B0 FD | 	call	#__system___string_cmp
20138     00 FA 0D F2 | 	cmp	result1, #0 wz
2013c     00 26 26 56 |  if_ne	not	local01, #0
20140     A7 26 62 FC | 	wrlong	local01, fp
20144     BC 00 90 FD | 	jmp	#LR__2533
20148                 | LR__2530
20148                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
20148     08 4E 05 F1 | 	add	fp, #8
2014c     A7 26 02 FB | 	rdlong	local01, fp
20150     08 4E 85 F1 | 	sub	fp, #8
20154     1F 26 0E F2 | 	cmp	local01, #31 wz
20158     14 4E 05 A1 |  if_e	add	fp, #20
2015c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20160     14 4E 85 A1 |  if_e	sub	fp, #20
20164     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20168     34 00 90 5D |  if_ne	jmp	#LR__2531
2016c     00 26 06 F6 | 	mov	local01, #0
20170     A7 28 02 FB | 	rdlong	local02, fp
20174     0C 4E 05 F1 | 	add	fp, #12
20178     A7 12 02 FB | 	rdlong	arg01, fp
2017c     0C 4E 85 F1 | 	sub	fp, #12
20180     48 D5 BE FD | 	call	#_convertstring
20184     FD 14 02 F6 | 	mov	arg02, result1
20188     14 13 02 F6 | 	mov	arg01, local02
2018c     CC 65 B0 FD | 	call	#__system___string_cmp
20190     00 FA 0D F2 | 	cmp	result1, #0 wz
20194     00 26 26 56 |  if_ne	not	local01, #0
20198     A7 26 62 FC | 	wrlong	local01, fp
2019c     64 00 90 FD | 	jmp	#LR__2533
201a0                 | LR__2531
201a0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
201a0     08 4E 05 F1 | 	add	fp, #8
201a4     A7 26 02 FB | 	rdlong	local01, fp
201a8     08 4E 85 F1 | 	sub	fp, #8
201ac     2B 26 0E F2 | 	cmp	local01, #43 wz
201b0     14 4E 05 A1 |  if_e	add	fp, #20
201b4     A7 2A 02 AB |  if_e	rdlong	local03, fp
201b8     14 4E 85 A1 |  if_e	sub	fp, #20
201bc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
201c0     3C 00 90 5D |  if_ne	jmp	#LR__2532
201c4     00 26 06 F6 | 	mov	local01, #0
201c8     A7 12 02 FB | 	rdlong	arg01, fp
201cc     FC D4 BE FD | 	call	#_convertstring
201d0     FD 28 02 F6 | 	mov	local02, result1
201d4     0C 4E 05 F1 | 	add	fp, #12
201d8     A7 12 02 FB | 	rdlong	arg01, fp
201dc     0C 4E 85 F1 | 	sub	fp, #12
201e0     E8 D4 BE FD | 	call	#_convertstring
201e4     FD 14 02 F6 | 	mov	arg02, result1
201e8     14 13 02 F6 | 	mov	arg01, local02
201ec     6C 65 B0 FD | 	call	#__system___string_cmp
201f0     00 FA 0D F2 | 	cmp	result1, #0 wz
201f4     00 26 26 56 |  if_ne	not	local01, #0
201f8     A7 26 62 FC | 	wrlong	local01, fp
201fc     04 00 90 FD | 	jmp	#LR__2533
20200                 | LR__2532
20200     A7 00 68 FC | 	wrlong	#0, fp
20204                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
20204                 | LR__2533
20204     08 4E 05 F1 | 	add	fp, #8
20208     A7 38 68 FC | 	wrlong	#28, fp
2020c     08 4E 85 F1 | 	sub	fp, #8
20210     A7 12 02 F6 | 	mov	arg01, fp
20214     D4 D3 BE FD | 	call	#_push
20218     A7 F0 03 F6 | 	mov	ptra, fp
2021c     B2 00 A0 FD | 	call	#popregs_
20220                 | _do_ne_ret
20220     2D 00 64 FD | 	ret
20224                 | 
20224                 | ' 
20224                 | ' '--------------------------------- OR
20224                 | ' 
20224                 | ' sub do_or 
20224                 | _do_or
20224     03 4A 05 F6 | 	mov	COUNT_, #3
20228     A8 00 A0 FD | 	call	#pushregs_
2022c     18 F0 07 F1 | 	add	ptra, #24
20230     20 D3 BE FD | 	call	#_pop
20234     FD 12 02 F6 | 	mov	arg01, result1
20238     FE 26 02 F6 | 	mov	local01, result2
2023c     FF 28 02 F6 | 	mov	local02, result3
20240     0C 4E 05 F1 | 	add	fp, #12
20244     A7 12 62 FC | 	wrlong	arg01, fp
20248     04 4E 05 F1 | 	add	fp, #4
2024c     A7 26 62 FC | 	wrlong	local01, fp
20250     04 4E 05 F1 | 	add	fp, #4
20254     A7 28 62 FC | 	wrlong	local02, fp
20258     14 4E 85 F1 | 	sub	fp, #20
2025c     F4 D2 BE FD | 	call	#_pop
20260     FF 2A 02 F6 | 	mov	local03, result3
20264     A7 FA 61 FC | 	wrlong	result1, fp
20268     04 4E 05 F1 | 	add	fp, #4
2026c     A7 FC 61 FC | 	wrlong	result2, fp
20270     04 4E 05 F1 | 	add	fp, #4
20274     A7 2A 62 FC | 	wrlong	local03, fp
20278                 | ' 
20278                 | ' t2=pop()
20278                 | ' t1=pop()
20278                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
20278     08 4E 85 F1 | 	sub	fp, #8
2027c     1C 2A 0E F2 | 	cmp	local03, #28 wz
20280     A7 2A 02 AB |  if_e	rdlong	local03, fp
20284     A7 2A 62 AC |  if_e	wrlong	local03, fp
20288     08 4E 05 A1 |  if_e	add	fp, #8
2028c     A7 3A 68 AC |  if_e	wrlong	#29, fp
20290     08 4E 85 A1 |  if_e	sub	fp, #8
20294                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
20294     14 4E 05 F1 | 	add	fp, #20
20298     A7 2A 02 FB | 	rdlong	local03, fp
2029c     14 4E 85 F1 | 	sub	fp, #20
202a0     1C 2A 0E F2 | 	cmp	local03, #28 wz
202a4     18 00 90 5D |  if_ne	jmp	#LR__2540
202a8     0C 4E 05 F1 | 	add	fp, #12
202ac     A7 2A 02 FB | 	rdlong	local03, fp
202b0     A7 2A 62 FC | 	wrlong	local03, fp
202b4     08 4E 05 F1 | 	add	fp, #8
202b8     A7 3A 68 FC | 	wrlong	#29, fp
202bc     14 4E 85 F1 | 	sub	fp, #20
202c0                 | LR__2540
202c0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
202c0     08 4E 05 F1 | 	add	fp, #8
202c4     A7 2A 02 FB | 	rdlong	local03, fp
202c8     08 4E 85 F1 | 	sub	fp, #8
202cc     1F 2A 0E F2 | 	cmp	local03, #31 wz
202d0     14 4E 05 51 |  if_ne	add	fp, #20
202d4     A7 28 02 5B |  if_ne	rdlong	local02, fp
202d8     14 4E 85 51 |  if_ne	sub	fp, #20
202dc     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
202e0     08 4E 05 51 |  if_ne	add	fp, #8
202e4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
202e8     08 4E 85 51 |  if_ne	sub	fp, #8
202ec     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
202f0     14 4E 05 51 |  if_ne	add	fp, #20
202f4     14 4E 85 51 |  if_ne	sub	fp, #20
202f8     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
202fc     A7 0C 68 AC |  if_e	wrlong	#6, fp
20300     08 4E 05 A1 |  if_e	add	fp, #8
20304     A7 FE 69 AC |  if_e	wrlong	#255, fp
20308     08 4E 85 A1 |  if_e	sub	fp, #8
2030c     18 00 90 AD |  if_e	jmp	#LR__2541
20310     A7 2A 02 FB | 	rdlong	local03, fp
20314     0C 4E 05 F1 | 	add	fp, #12
20318     A7 26 02 FB | 	rdlong	local01, fp
2031c     0C 4E 85 F1 | 	sub	fp, #12
20320     13 2B 42 F5 | 	or	local03, local01
20324     A7 2A 62 FC | 	wrlong	local03, fp
20328                 | LR__2541
20328     A7 12 02 F6 | 	mov	arg01, fp
2032c     BC D2 BE FD | 	call	#_push
20330     A7 F0 03 F6 | 	mov	ptra, fp
20334     B2 00 A0 FD | 	call	#popregs_
20338                 | _do_or_ret
20338     2D 00 64 FD | 	ret
2033c                 | 
2033c                 | ' 
2033c                 | ' '--------------------------------- plus (+)
2033c                 | ' 
2033c                 | ' sub do_plus 
2033c                 | _do_plus
2033c     05 4A 05 F6 | 	mov	COUNT_, #5
20340     A8 00 A0 FD | 	call	#pushregs_
20344     18 F0 07 F1 | 	add	ptra, #24
20348     08 D2 BE FD | 	call	#_pop
2034c     FD 26 02 F6 | 	mov	local01, result1
20350     FE 28 02 F6 | 	mov	local02, result2
20354     FF 2A 02 F6 | 	mov	local03, result3
20358     0C 4E 05 F1 | 	add	fp, #12
2035c     A7 26 62 FC | 	wrlong	local01, fp
20360     04 4E 05 F1 | 	add	fp, #4
20364     A7 28 62 FC | 	wrlong	local02, fp
20368     04 4E 05 F1 | 	add	fp, #4
2036c     A7 2A 62 FC | 	wrlong	local03, fp
20370     14 4E 85 F1 | 	sub	fp, #20
20374     DC D1 BE FD | 	call	#_pop
20378     FF 2A 02 F6 | 	mov	local03, result3
2037c     A7 FA 61 FC | 	wrlong	result1, fp
20380     04 4E 05 F1 | 	add	fp, #4
20384     A7 FC 61 FC | 	wrlong	result2, fp
20388     04 4E 05 F1 | 	add	fp, #4
2038c     A7 2A 62 FC | 	wrlong	local03, fp
20390                 | ' 
20390                 | ' t2=pop()
20390                 | ' t1=pop()
20390                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
20390     08 4E 85 F1 | 	sub	fp, #8
20394     1D 2A 0E F2 | 	cmp	local03, #29 wz
20398     14 4E 05 A1 |  if_e	add	fp, #20
2039c     A7 2C 02 AB |  if_e	rdlong	local04, fp
203a0     14 4E 85 A1 |  if_e	sub	fp, #20
203a4     16 2B 02 A6 |  if_e	mov	local03, local04
203a8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
203ac     1C 00 90 5D |  if_ne	jmp	#LR__2550
203b0     A7 26 02 FB | 	rdlong	local01, fp
203b4     0C 4E 05 F1 | 	add	fp, #12
203b8     A7 28 02 FB | 	rdlong	local02, fp
203bc     0C 4E 85 F1 | 	sub	fp, #12
203c0     14 27 02 F1 | 	add	local01, local02
203c4     A7 26 62 FC | 	wrlong	local01, fp
203c8     48 04 90 FD | 	jmp	#LR__2565
203cc                 | LR__2550
203cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
203cc     08 4E 05 F1 | 	add	fp, #8
203d0     A7 26 02 FB | 	rdlong	local01, fp
203d4     08 4E 85 F1 | 	sub	fp, #8
203d8     1D 26 0E F2 | 	cmp	local01, #29 wz
203dc     14 4E 05 A1 |  if_e	add	fp, #20
203e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
203e4     14 4E 85 A1 |  if_e	sub	fp, #20
203e8     16 2B 02 A6 |  if_e	mov	local03, local04
203ec     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
203f0     28 00 90 5D |  if_ne	jmp	#LR__2551
203f4     A7 26 02 FB | 	rdlong	local01, fp
203f8     0C 4E 05 F1 | 	add	fp, #12
203fc     A7 28 02 FB | 	rdlong	local02, fp
20400     0C 4E 85 F1 | 	sub	fp, #12
20404     14 27 02 F1 | 	add	local01, local02
20408     A7 26 62 FC | 	wrlong	local01, fp
2040c     08 4E 05 F1 | 	add	fp, #8
20410     A7 38 68 FC | 	wrlong	#28, fp
20414     08 4E 85 F1 | 	sub	fp, #8
20418     F8 03 90 FD | 	jmp	#LR__2565
2041c                 | LR__2551
2041c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
2041c     08 4E 05 F1 | 	add	fp, #8
20420     A7 26 02 FB | 	rdlong	local01, fp
20424     08 4E 85 F1 | 	sub	fp, #8
20428     1D 26 0E F2 | 	cmp	local01, #29 wz
2042c     14 4E 05 A1 |  if_e	add	fp, #20
20430     A7 2C 02 AB |  if_e	rdlong	local04, fp
20434     14 4E 85 A1 |  if_e	sub	fp, #20
20438     16 2B 02 A6 |  if_e	mov	local03, local04
2043c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20440     30 00 90 5D |  if_ne	jmp	#LR__2552
20444     A7 12 02 FB | 	rdlong	arg01, fp
20448     5C 8D B0 FD | 	call	#__system___float_fromuns
2044c     FD 12 02 F6 | 	mov	arg01, result1
20450     0C 4E 05 F1 | 	add	fp, #12
20454     A7 14 02 FB | 	rdlong	arg02, fp
20458     0C 4E 85 F1 | 	sub	fp, #12
2045c     7C 8D B0 FD | 	call	#__system___float_add
20460     A7 FA 61 FC | 	wrlong	result1, fp
20464     08 4E 05 F1 | 	add	fp, #8
20468     A7 3C 68 FC | 	wrlong	#30, fp
2046c     08 4E 85 F1 | 	sub	fp, #8
20470     A0 03 90 FD | 	jmp	#LR__2565
20474                 | LR__2552
20474                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
20474     08 4E 05 F1 | 	add	fp, #8
20478     A7 26 02 FB | 	rdlong	local01, fp
2047c     08 4E 85 F1 | 	sub	fp, #8
20480     1C 26 0E F2 | 	cmp	local01, #28 wz
20484     14 4E 05 A1 |  if_e	add	fp, #20
20488     A7 2C 02 AB |  if_e	rdlong	local04, fp
2048c     14 4E 85 A1 |  if_e	sub	fp, #20
20490     16 2B 02 A6 |  if_e	mov	local03, local04
20494     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20498     1C 00 90 5D |  if_ne	jmp	#LR__2553
2049c     A7 26 02 FB | 	rdlong	local01, fp
204a0     0C 4E 05 F1 | 	add	fp, #12
204a4     A7 28 02 FB | 	rdlong	local02, fp
204a8     0C 4E 85 F1 | 	sub	fp, #12
204ac     14 27 02 F1 | 	add	local01, local02
204b0     A7 26 62 FC | 	wrlong	local01, fp
204b4     5C 03 90 FD | 	jmp	#LR__2565
204b8                 | LR__2553
204b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
204b8     08 4E 05 F1 | 	add	fp, #8
204bc     A7 26 02 FB | 	rdlong	local01, fp
204c0     08 4E 85 F1 | 	sub	fp, #8
204c4     1C 26 0E F2 | 	cmp	local01, #28 wz
204c8     14 4E 05 A1 |  if_e	add	fp, #20
204cc     A7 2C 02 AB |  if_e	rdlong	local04, fp
204d0     14 4E 85 A1 |  if_e	sub	fp, #20
204d4     16 2B 02 A6 |  if_e	mov	local03, local04
204d8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
204dc     1C 00 90 5D |  if_ne	jmp	#LR__2554
204e0     A7 26 02 FB | 	rdlong	local01, fp
204e4     0C 4E 05 F1 | 	add	fp, #12
204e8     A7 28 02 FB | 	rdlong	local02, fp
204ec     0C 4E 85 F1 | 	sub	fp, #12
204f0     14 27 02 F1 | 	add	local01, local02
204f4     A7 26 62 FC | 	wrlong	local01, fp
204f8     18 03 90 FD | 	jmp	#LR__2565
204fc                 | LR__2554
204fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
204fc     08 4E 05 F1 | 	add	fp, #8
20500     A7 26 02 FB | 	rdlong	local01, fp
20504     08 4E 85 F1 | 	sub	fp, #8
20508     1C 26 0E F2 | 	cmp	local01, #28 wz
2050c     14 4E 05 A1 |  if_e	add	fp, #20
20510     A7 2C 02 AB |  if_e	rdlong	local04, fp
20514     14 4E 85 A1 |  if_e	sub	fp, #20
20518     16 2B 02 A6 |  if_e	mov	local03, local04
2051c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20520     40 00 90 5D |  if_ne	jmp	#LR__2555
20524     A7 12 02 FB | 	rdlong	arg01, fp
20528     09 13 52 F6 | 	abs	arg01, arg01 wc
2052c     1F 2E C6 C9 |  if_b	decod	local05, #31
20530     00 2E 06 36 |  if_ae	mov	local05, #0
20534     70 8C B0 FD | 	call	#__system___float_fromuns
20538     17 FB 61 F5 | 	xor	result1, local05
2053c     FD 12 02 F6 | 	mov	arg01, result1
20540     0C 4E 05 F1 | 	add	fp, #12
20544     A7 14 02 FB | 	rdlong	arg02, fp
20548     0C 4E 85 F1 | 	sub	fp, #12
2054c     8C 8C B0 FD | 	call	#__system___float_add
20550     A7 FA 61 FC | 	wrlong	result1, fp
20554     08 4E 05 F1 | 	add	fp, #8
20558     A7 3C 68 FC | 	wrlong	#30, fp
2055c     08 4E 85 F1 | 	sub	fp, #8
20560     B0 02 90 FD | 	jmp	#LR__2565
20564                 | LR__2555
20564                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
20564     08 4E 05 F1 | 	add	fp, #8
20568     A7 26 02 FB | 	rdlong	local01, fp
2056c     08 4E 85 F1 | 	sub	fp, #8
20570     1E 26 0E F2 | 	cmp	local01, #30 wz
20574     14 4E 05 A1 |  if_e	add	fp, #20
20578     A7 2C 02 AB |  if_e	rdlong	local04, fp
2057c     14 4E 85 A1 |  if_e	sub	fp, #20
20580     16 2B 02 A6 |  if_e	mov	local03, local04
20584     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20588     28 00 90 5D |  if_ne	jmp	#LR__2556
2058c     A7 26 02 FB | 	rdlong	local01, fp
20590     0C 4E 05 F1 | 	add	fp, #12
20594     A7 12 02 FB | 	rdlong	arg01, fp
20598     0C 4E 85 F1 | 	sub	fp, #12
2059c     08 8C B0 FD | 	call	#__system___float_fromuns
205a0     FD 14 02 F6 | 	mov	arg02, result1
205a4     13 13 02 F6 | 	mov	arg01, local01
205a8     30 8C B0 FD | 	call	#__system___float_add
205ac     A7 FA 61 FC | 	wrlong	result1, fp
205b0     60 02 90 FD | 	jmp	#LR__2565
205b4                 | LR__2556
205b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
205b4     08 4E 05 F1 | 	add	fp, #8
205b8     A7 26 02 FB | 	rdlong	local01, fp
205bc     08 4E 85 F1 | 	sub	fp, #8
205c0     1E 26 0E F2 | 	cmp	local01, #30 wz
205c4     14 4E 05 A1 |  if_e	add	fp, #20
205c8     A7 2C 02 AB |  if_e	rdlong	local04, fp
205cc     14 4E 85 A1 |  if_e	sub	fp, #20
205d0     16 2B 02 A6 |  if_e	mov	local03, local04
205d4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
205d8     38 00 90 5D |  if_ne	jmp	#LR__2557
205dc     A7 26 02 FB | 	rdlong	local01, fp
205e0     0C 4E 05 F1 | 	add	fp, #12
205e4     A7 12 02 FB | 	rdlong	arg01, fp
205e8     0C 4E 85 F1 | 	sub	fp, #12
205ec     09 13 52 F6 | 	abs	arg01, arg01 wc
205f0     1F 2E C6 C9 |  if_b	decod	local05, #31
205f4     00 2E 06 36 |  if_ae	mov	local05, #0
205f8     AC 8B B0 FD | 	call	#__system___float_fromuns
205fc     17 FB 61 F5 | 	xor	result1, local05
20600     FD 14 02 F6 | 	mov	arg02, result1
20604     13 13 02 F6 | 	mov	arg01, local01
20608     D0 8B B0 FD | 	call	#__system___float_add
2060c     A7 FA 61 FC | 	wrlong	result1, fp
20610     00 02 90 FD | 	jmp	#LR__2565
20614                 | LR__2557
20614                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
20614     08 4E 05 F1 | 	add	fp, #8
20618     A7 26 02 FB | 	rdlong	local01, fp
2061c     08 4E 85 F1 | 	sub	fp, #8
20620     1E 26 0E F2 | 	cmp	local01, #30 wz
20624     14 4E 05 A1 |  if_e	add	fp, #20
20628     A7 2C 02 AB |  if_e	rdlong	local04, fp
2062c     14 4E 85 A1 |  if_e	sub	fp, #20
20630     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
20634     1C 00 90 5D |  if_ne	jmp	#LR__2558
20638     A7 12 02 FB | 	rdlong	arg01, fp
2063c     0C 4E 05 F1 | 	add	fp, #12
20640     A7 14 02 FB | 	rdlong	arg02, fp
20644     0C 4E 85 F1 | 	sub	fp, #12
20648     90 8B B0 FD | 	call	#__system___float_add
2064c     A7 FA 61 FC | 	wrlong	result1, fp
20650     C0 01 90 FD | 	jmp	#LR__2565
20654                 | LR__2558
20654                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
20654     08 4E 05 F1 | 	add	fp, #8
20658     A7 26 02 FB | 	rdlong	local01, fp
2065c     08 4E 85 F1 | 	sub	fp, #8
20660     1F 26 0E F2 | 	cmp	local01, #31 wz
20664     24 00 90 5D |  if_ne	jmp	#LR__2559
20668     14 4E 05 F1 | 	add	fp, #20
2066c     A7 2A 02 FB | 	rdlong	local03, fp
20670     14 4E 85 F1 | 	sub	fp, #20
20674     1F 2A 0E F2 | 	cmp	local03, #31 wz
20678     A7 04 68 5C |  if_ne	wrlong	#2, fp
2067c     08 4E 05 51 |  if_ne	add	fp, #8
20680     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20684     08 4E 85 51 |  if_ne	sub	fp, #8
20688     88 01 90 5D |  if_ne	jmp	#LR__2565
2068c                 | LR__2559
2068c                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
2068c     14 4E 05 F1 | 	add	fp, #20
20690     A7 26 02 FB | 	rdlong	local01, fp
20694     14 4E 85 F1 | 	sub	fp, #20
20698     1F 26 0E F2 | 	cmp	local01, #31 wz
2069c     24 00 90 5D |  if_ne	jmp	#LR__2560
206a0     08 4E 05 F1 | 	add	fp, #8
206a4     A7 2A 02 FB | 	rdlong	local03, fp
206a8     08 4E 85 F1 | 	sub	fp, #8
206ac     1F 2A 0E F2 | 	cmp	local03, #31 wz
206b0     A7 04 68 5C |  if_ne	wrlong	#2, fp
206b4     08 4E 05 51 |  if_ne	add	fp, #8
206b8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
206bc     08 4E 85 51 |  if_ne	sub	fp, #8
206c0     50 01 90 5D |  if_ne	jmp	#LR__2565
206c4                 | LR__2560
206c4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
206c4     08 4E 05 F1 | 	add	fp, #8
206c8     A7 26 02 FB | 	rdlong	local01, fp
206cc     08 4E 85 F1 | 	sub	fp, #8
206d0     1F 26 0E F2 | 	cmp	local01, #31 wz
206d4     14 4E 05 A1 |  if_e	add	fp, #20
206d8     A7 2A 02 AB |  if_e	rdlong	local03, fp
206dc     14 4E 85 A1 |  if_e	sub	fp, #20
206e0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
206e4     1C 00 90 5D |  if_ne	jmp	#LR__2561
206e8     A7 12 02 FB | 	rdlong	arg01, fp
206ec     0C 4E 05 F1 | 	add	fp, #12
206f0     A7 14 02 FB | 	rdlong	arg02, fp
206f4     0C 4E 85 F1 | 	sub	fp, #12
206f8     94 60 B0 FD | 	call	#__system___string_concat
206fc     A7 FA 61 FC | 	wrlong	result1, fp
20700     10 01 90 FD | 	jmp	#LR__2565
20704                 | LR__2561
20704                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
20704     08 4E 05 F1 | 	add	fp, #8
20708     A7 26 02 FB | 	rdlong	local01, fp
2070c     08 4E 85 F1 | 	sub	fp, #8
20710     2B 26 0E F2 | 	cmp	local01, #43 wz
20714     14 4E 05 A1 |  if_e	add	fp, #20
20718     A7 2A 02 AB |  if_e	rdlong	local03, fp
2071c     14 4E 85 A1 |  if_e	sub	fp, #20
20720     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20724     30 00 90 5D |  if_ne	jmp	#LR__2562
20728     A7 12 02 FB | 	rdlong	arg01, fp
2072c     9C CF BE FD | 	call	#_convertstring
20730     FD 12 02 F6 | 	mov	arg01, result1
20734     0C 4E 05 F1 | 	add	fp, #12
20738     A7 14 02 FB | 	rdlong	arg02, fp
2073c     0C 4E 85 F1 | 	sub	fp, #12
20740     4C 60 B0 FD | 	call	#__system___string_concat
20744     A7 FA 61 FC | 	wrlong	result1, fp
20748     08 4E 05 F1 | 	add	fp, #8
2074c     A7 3E 68 FC | 	wrlong	#31, fp
20750     08 4E 85 F1 | 	sub	fp, #8
20754     BC 00 90 FD | 	jmp	#LR__2565
20758                 | LR__2562
20758                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
20758     08 4E 05 F1 | 	add	fp, #8
2075c     A7 26 02 FB | 	rdlong	local01, fp
20760     08 4E 85 F1 | 	sub	fp, #8
20764     1F 26 0E F2 | 	cmp	local01, #31 wz
20768     14 4E 05 A1 |  if_e	add	fp, #20
2076c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20770     14 4E 85 A1 |  if_e	sub	fp, #20
20774     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20778     28 00 90 5D |  if_ne	jmp	#LR__2563
2077c     A7 26 02 FB | 	rdlong	local01, fp
20780     0C 4E 05 F1 | 	add	fp, #12
20784     A7 12 02 FB | 	rdlong	arg01, fp
20788     0C 4E 85 F1 | 	sub	fp, #12
2078c     3C CF BE FD | 	call	#_convertstring
20790     FD 14 02 F6 | 	mov	arg02, result1
20794     13 13 02 F6 | 	mov	arg01, local01
20798     F4 5F B0 FD | 	call	#__system___string_concat
2079c     A7 FA 61 FC | 	wrlong	result1, fp
207a0     70 00 90 FD | 	jmp	#LR__2565
207a4                 | LR__2563
207a4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
207a4     08 4E 05 F1 | 	add	fp, #8
207a8     A7 26 02 FB | 	rdlong	local01, fp
207ac     08 4E 85 F1 | 	sub	fp, #8
207b0     2B 26 0E F2 | 	cmp	local01, #43 wz
207b4     14 4E 05 A1 |  if_e	add	fp, #20
207b8     A7 2A 02 AB |  if_e	rdlong	local03, fp
207bc     14 4E 85 A1 |  if_e	sub	fp, #20
207c0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
207c4     3C 00 90 5D |  if_ne	jmp	#LR__2564
207c8     A7 12 02 FB | 	rdlong	arg01, fp
207cc     FC CE BE FD | 	call	#_convertstring
207d0     FD 26 02 F6 | 	mov	local01, result1
207d4     0C 4E 05 F1 | 	add	fp, #12
207d8     A7 12 02 FB | 	rdlong	arg01, fp
207dc     0C 4E 85 F1 | 	sub	fp, #12
207e0     E8 CE BE FD | 	call	#_convertstring
207e4     FD 14 02 F6 | 	mov	arg02, result1
207e8     13 13 02 F6 | 	mov	arg01, local01
207ec     A0 5F B0 FD | 	call	#__system___string_concat
207f0     A7 FA 61 FC | 	wrlong	result1, fp
207f4     08 4E 05 F1 | 	add	fp, #8
207f8     A7 3E 68 FC | 	wrlong	#31, fp
207fc     08 4E 85 F1 | 	sub	fp, #8
20800     10 00 90 FD | 	jmp	#LR__2565
20804                 | LR__2564
20804     A7 08 68 FC | 	wrlong	#4, fp
20808     08 4E 05 F1 | 	add	fp, #8
2080c     A7 FE 69 FC | 	wrlong	#255, fp
20810     08 4E 85 F1 | 	sub	fp, #8
20814                 | LR__2565
20814     A7 12 02 F6 | 	mov	arg01, fp
20818     D0 CD BE FD | 	call	#_push
2081c     A7 F0 03 F6 | 	mov	ptra, fp
20820     B2 00 A0 FD | 	call	#popregs_
20824                 | _do_plus_ret
20824     2D 00 64 FD | 	ret
20828                 | 
20828                 | ' 
20828                 | ' '--------------------------------- power (^)
20828                 | ' 
20828                 | ' sub do_power 
20828                 | _do_power
20828     02 4A 05 F6 | 	mov	COUNT_, #2
2082c     A8 00 A0 FD | 	call	#pushregs_
20830     18 F0 07 F1 | 	add	ptra, #24
20834     1C CD BE FD | 	call	#_pop
20838     FD 14 02 F6 | 	mov	arg02, result1
2083c     FE 12 02 F6 | 	mov	arg01, result2
20840     FF 26 02 F6 | 	mov	local01, result3
20844     0C 4E 05 F1 | 	add	fp, #12
20848     A7 14 62 FC | 	wrlong	arg02, fp
2084c     04 4E 05 F1 | 	add	fp, #4
20850     A7 12 62 FC | 	wrlong	arg01, fp
20854     04 4E 05 F1 | 	add	fp, #4
20858     A7 26 62 FC | 	wrlong	local01, fp
2085c     14 4E 85 F1 | 	sub	fp, #20
20860     F0 CC BE FD | 	call	#_pop
20864     A7 FA 61 FC | 	wrlong	result1, fp
20868     04 4E 05 F1 | 	add	fp, #4
2086c     A7 FC 61 FC | 	wrlong	result2, fp
20870     04 4E 05 F1 | 	add	fp, #4
20874     A7 FE 61 FC | 	wrlong	result3, fp
20878                 | ' 
20878                 | ' t2=pop()
20878                 | ' t1=pop()
20878                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
20878     08 4E 85 F1 | 	sub	fp, #8
2087c     1F FE 0D F2 | 	cmp	result3, #31 wz
20880     14 4E 05 51 |  if_ne	add	fp, #20
20884     A7 26 02 5B |  if_ne	rdlong	local01, fp
20888     14 4E 85 51 |  if_ne	sub	fp, #20
2088c     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
20890     A7 18 68 AC |  if_e	wrlong	#12, fp
20894     08 4E 05 A1 |  if_e	add	fp, #8
20898     A7 FE 69 AC |  if_e	wrlong	#255, fp
2089c     08 4E 85 A1 |  if_e	sub	fp, #8
208a0     38 01 90 AD |  if_e	jmp	#LR__2575
208a4                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
208a4     08 4E 05 F1 | 	add	fp, #8
208a8     A7 14 02 FB | 	rdlong	arg02, fp
208ac     08 4E 85 F1 | 	sub	fp, #8
208b0     1C 14 0E F2 | 	cmp	arg02, #28 wz
208b4     28 00 90 5D |  if_ne	jmp	#LR__2570
208b8     08 4E 05 F1 | 	add	fp, #8
208bc     A7 3C 68 FC | 	wrlong	#30, fp
208c0     08 4E 85 F1 | 	sub	fp, #8
208c4     A7 12 02 FB | 	rdlong	arg01, fp
208c8     09 13 52 F6 | 	abs	arg01, arg01 wc
208cc     1F 28 C6 C9 |  if_b	decod	local02, #31
208d0     00 28 06 36 |  if_ae	mov	local02, #0
208d4     D0 88 B0 FD | 	call	#__system___float_fromuns
208d8     14 FB 61 F5 | 	xor	result1, local02
208dc     A7 FA 61 FC | 	wrlong	result1, fp
208e0                 | LR__2570
208e0                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
208e0     08 4E 05 F1 | 	add	fp, #8
208e4     A7 14 02 FB | 	rdlong	arg02, fp
208e8     08 4E 85 F1 | 	sub	fp, #8
208ec     1D 14 0E F2 | 	cmp	arg02, #29 wz
208f0     18 00 90 5D |  if_ne	jmp	#LR__2571
208f4     08 4E 05 F1 | 	add	fp, #8
208f8     A7 3C 68 FC | 	wrlong	#30, fp
208fc     08 4E 85 F1 | 	sub	fp, #8
20900     A7 12 02 FB | 	rdlong	arg01, fp
20904     A0 88 B0 FD | 	call	#__system___float_fromuns
20908     A7 FA 61 FC | 	wrlong	result1, fp
2090c                 | LR__2571
2090c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
2090c     14 4E 05 F1 | 	add	fp, #20
20910     A7 14 02 FB | 	rdlong	arg02, fp
20914     14 4E 85 F1 | 	sub	fp, #20
20918     1C 14 0E F2 | 	cmp	arg02, #28 wz
2091c     34 00 90 5D |  if_ne	jmp	#LR__2572
20920     14 4E 05 F1 | 	add	fp, #20
20924     A7 3C 68 FC | 	wrlong	#30, fp
20928     08 4E 85 F1 | 	sub	fp, #8
2092c     A7 12 02 FB | 	rdlong	arg01, fp
20930     0C 4E 85 F1 | 	sub	fp, #12
20934     09 13 52 F6 | 	abs	arg01, arg01 wc
20938     1F 28 C6 C9 |  if_b	decod	local02, #31
2093c     00 28 06 36 |  if_ae	mov	local02, #0
20940     64 88 B0 FD | 	call	#__system___float_fromuns
20944     14 FB 61 F5 | 	xor	result1, local02
20948     0C 4E 05 F1 | 	add	fp, #12
2094c     A7 FA 61 FC | 	wrlong	result1, fp
20950     0C 4E 85 F1 | 	sub	fp, #12
20954                 | LR__2572
20954                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
20954     14 4E 05 F1 | 	add	fp, #20
20958     A7 14 02 FB | 	rdlong	arg02, fp
2095c     14 4E 85 F1 | 	sub	fp, #20
20960     1D 14 0E F2 | 	cmp	arg02, #29 wz
20964     24 00 90 5D |  if_ne	jmp	#LR__2573
20968     14 4E 05 F1 | 	add	fp, #20
2096c     A7 3C 68 FC | 	wrlong	#30, fp
20970     08 4E 85 F1 | 	sub	fp, #8
20974     A7 12 02 FB | 	rdlong	arg01, fp
20978     0C 4E 85 F1 | 	sub	fp, #12
2097c     28 88 B0 FD | 	call	#__system___float_fromuns
20980     0C 4E 05 F1 | 	add	fp, #12
20984     A7 FA 61 FC | 	wrlong	result1, fp
20988     0C 4E 85 F1 | 	sub	fp, #12
2098c                 | LR__2573
2098c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
2098c     08 4E 05 F1 | 	add	fp, #8
20990     A7 14 02 FB | 	rdlong	arg02, fp
20994     08 4E 85 F1 | 	sub	fp, #8
20998     1E 14 0E F2 | 	cmp	arg02, #30 wz
2099c     14 4E 05 A1 |  if_e	add	fp, #20
209a0     A7 26 02 AB |  if_e	rdlong	local01, fp
209a4     14 4E 85 A1 |  if_e	sub	fp, #20
209a8     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
209ac     1C 00 90 5D |  if_ne	jmp	#LR__2574
209b0     A7 12 02 FB | 	rdlong	arg01, fp
209b4     0C 4E 05 F1 | 	add	fp, #12
209b8     A7 14 02 FB | 	rdlong	arg02, fp
209bc     0C 4E 85 F1 | 	sub	fp, #12
209c0     F0 9A B0 FD | 	call	#__system____builtin_powf
209c4     A7 FA 61 FC | 	wrlong	result1, fp
209c8     10 00 90 FD | 	jmp	#LR__2575
209cc                 | LR__2574
209cc     A7 1A 68 FC | 	wrlong	#13, fp
209d0     08 4E 05 F1 | 	add	fp, #8
209d4     A7 FE 69 FC | 	wrlong	#255, fp
209d8     08 4E 85 F1 | 	sub	fp, #8
209dc                 | LR__2575
209dc     A7 12 02 F6 | 	mov	arg01, fp
209e0     08 CC BE FD | 	call	#_push
209e4     A7 F0 03 F6 | 	mov	ptra, fp
209e8     B2 00 A0 FD | 	call	#popregs_
209ec                 | _do_power_ret
209ec     2D 00 64 FD | 	ret
209f0                 | 
209f0                 | ' 
209f0                 | ' '--------------------------------- SHL
209f0                 | ' 
209f0                 | ' sub do_shl 
209f0                 | _do_shl
209f0     03 4A 05 F6 | 	mov	COUNT_, #3
209f4     A8 00 A0 FD | 	call	#pushregs_
209f8     18 F0 07 F1 | 	add	ptra, #24
209fc     54 CB BE FD | 	call	#_pop
20a00     FD 12 02 F6 | 	mov	arg01, result1
20a04     FE 26 02 F6 | 	mov	local01, result2
20a08     FF 28 02 F6 | 	mov	local02, result3
20a0c     0C 4E 05 F1 | 	add	fp, #12
20a10     A7 12 62 FC | 	wrlong	arg01, fp
20a14     04 4E 05 F1 | 	add	fp, #4
20a18     A7 26 62 FC | 	wrlong	local01, fp
20a1c     04 4E 05 F1 | 	add	fp, #4
20a20     A7 28 62 FC | 	wrlong	local02, fp
20a24     14 4E 85 F1 | 	sub	fp, #20
20a28     28 CB BE FD | 	call	#_pop
20a2c     FF 2A 02 F6 | 	mov	local03, result3
20a30     A7 FA 61 FC | 	wrlong	result1, fp
20a34     04 4E 05 F1 | 	add	fp, #4
20a38     A7 FC 61 FC | 	wrlong	result2, fp
20a3c     04 4E 05 F1 | 	add	fp, #4
20a40     A7 2A 62 FC | 	wrlong	local03, fp
20a44                 | ' 
20a44                 | ' t2=pop()
20a44                 | ' t1=pop()
20a44                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
20a44     08 4E 85 F1 | 	sub	fp, #8
20a48     1C 2A 0E F2 | 	cmp	local03, #28 wz
20a4c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20a50     A7 2A 62 AC |  if_e	wrlong	local03, fp
20a54     08 4E 05 A1 |  if_e	add	fp, #8
20a58     A7 3A 68 AC |  if_e	wrlong	#29, fp
20a5c     08 4E 85 A1 |  if_e	sub	fp, #8
20a60                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
20a60     14 4E 05 F1 | 	add	fp, #20
20a64     A7 2A 02 FB | 	rdlong	local03, fp
20a68     14 4E 85 F1 | 	sub	fp, #20
20a6c     1C 2A 0E F2 | 	cmp	local03, #28 wz
20a70     18 00 90 5D |  if_ne	jmp	#LR__2580
20a74     0C 4E 05 F1 | 	add	fp, #12
20a78     A7 2A 02 FB | 	rdlong	local03, fp
20a7c     A7 2A 62 FC | 	wrlong	local03, fp
20a80     08 4E 05 F1 | 	add	fp, #8
20a84     A7 3A 68 FC | 	wrlong	#29, fp
20a88     14 4E 85 F1 | 	sub	fp, #20
20a8c                 | LR__2580
20a8c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
20a8c     08 4E 05 F1 | 	add	fp, #8
20a90     A7 2A 02 FB | 	rdlong	local03, fp
20a94     08 4E 85 F1 | 	sub	fp, #8
20a98     1F 2A 0E F2 | 	cmp	local03, #31 wz
20a9c     14 4E 05 51 |  if_ne	add	fp, #20
20aa0     A7 28 02 5B |  if_ne	rdlong	local02, fp
20aa4     14 4E 85 51 |  if_ne	sub	fp, #20
20aa8     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
20aac     08 4E 05 51 |  if_ne	add	fp, #8
20ab0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20ab4     08 4E 85 51 |  if_ne	sub	fp, #8
20ab8     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
20abc     14 4E 05 51 |  if_ne	add	fp, #20
20ac0     14 4E 85 51 |  if_ne	sub	fp, #20
20ac4     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
20ac8     A7 0C 68 AC |  if_e	wrlong	#6, fp
20acc     08 4E 05 A1 |  if_e	add	fp, #8
20ad0     A7 FE 69 AC |  if_e	wrlong	#255, fp
20ad4     08 4E 85 A1 |  if_e	sub	fp, #8
20ad8     18 00 90 AD |  if_e	jmp	#LR__2581
20adc     A7 2A 02 FB | 	rdlong	local03, fp
20ae0     0C 4E 05 F1 | 	add	fp, #12
20ae4     A7 26 02 FB | 	rdlong	local01, fp
20ae8     0C 4E 85 F1 | 	sub	fp, #12
20aec     13 2B 62 F0 | 	shl	local03, local01
20af0     A7 2A 62 FC | 	wrlong	local03, fp
20af4                 | LR__2581
20af4     A7 12 02 F6 | 	mov	arg01, fp
20af8     F0 CA BE FD | 	call	#_push
20afc     A7 F0 03 F6 | 	mov	ptra, fp
20b00     B2 00 A0 FD | 	call	#popregs_
20b04                 | _do_shl_ret
20b04     2D 00 64 FD | 	ret
20b08                 | 
20b08                 | ' 
20b08                 | ' '--------------------------------- SHR
20b08                 | ' 
20b08                 | ' sub do_shr 
20b08                 | _do_shr
20b08     03 4A 05 F6 | 	mov	COUNT_, #3
20b0c     A8 00 A0 FD | 	call	#pushregs_
20b10     18 F0 07 F1 | 	add	ptra, #24
20b14     3C CA BE FD | 	call	#_pop
20b18     FD 12 02 F6 | 	mov	arg01, result1
20b1c     FE 26 02 F6 | 	mov	local01, result2
20b20     FF 28 02 F6 | 	mov	local02, result3
20b24     0C 4E 05 F1 | 	add	fp, #12
20b28     A7 12 62 FC | 	wrlong	arg01, fp
20b2c     04 4E 05 F1 | 	add	fp, #4
20b30     A7 26 62 FC | 	wrlong	local01, fp
20b34     04 4E 05 F1 | 	add	fp, #4
20b38     A7 28 62 FC | 	wrlong	local02, fp
20b3c     14 4E 85 F1 | 	sub	fp, #20
20b40     10 CA BE FD | 	call	#_pop
20b44     FF 2A 02 F6 | 	mov	local03, result3
20b48     A7 FA 61 FC | 	wrlong	result1, fp
20b4c     04 4E 05 F1 | 	add	fp, #4
20b50     A7 FC 61 FC | 	wrlong	result2, fp
20b54     04 4E 05 F1 | 	add	fp, #4
20b58     A7 2A 62 FC | 	wrlong	local03, fp
20b5c                 | ' 
20b5c                 | ' t2=pop()
20b5c                 | ' t1=pop()
20b5c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
20b5c     08 4E 85 F1 | 	sub	fp, #8
20b60     1C 2A 0E F2 | 	cmp	local03, #28 wz
20b64     A7 2A 02 AB |  if_e	rdlong	local03, fp
20b68     A7 2A 62 AC |  if_e	wrlong	local03, fp
20b6c     08 4E 05 A1 |  if_e	add	fp, #8
20b70     A7 3A 68 AC |  if_e	wrlong	#29, fp
20b74     08 4E 85 A1 |  if_e	sub	fp, #8
20b78                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
20b78     14 4E 05 F1 | 	add	fp, #20
20b7c     A7 2A 02 FB | 	rdlong	local03, fp
20b80     14 4E 85 F1 | 	sub	fp, #20
20b84     1C 2A 0E F2 | 	cmp	local03, #28 wz
20b88     18 00 90 5D |  if_ne	jmp	#LR__2590
20b8c     0C 4E 05 F1 | 	add	fp, #12
20b90     A7 2A 02 FB | 	rdlong	local03, fp
20b94     A7 2A 62 FC | 	wrlong	local03, fp
20b98     08 4E 05 F1 | 	add	fp, #8
20b9c     A7 3A 68 FC | 	wrlong	#29, fp
20ba0     14 4E 85 F1 | 	sub	fp, #20
20ba4                 | LR__2590
20ba4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
20ba4     08 4E 05 F1 | 	add	fp, #8
20ba8     A7 2A 02 FB | 	rdlong	local03, fp
20bac     08 4E 85 F1 | 	sub	fp, #8
20bb0     1F 2A 0E F2 | 	cmp	local03, #31 wz
20bb4     14 4E 05 51 |  if_ne	add	fp, #20
20bb8     A7 28 02 5B |  if_ne	rdlong	local02, fp
20bbc     14 4E 85 51 |  if_ne	sub	fp, #20
20bc0     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
20bc4     08 4E 05 51 |  if_ne	add	fp, #8
20bc8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20bcc     08 4E 85 51 |  if_ne	sub	fp, #8
20bd0     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
20bd4     14 4E 05 51 |  if_ne	add	fp, #20
20bd8     14 4E 85 51 |  if_ne	sub	fp, #20
20bdc     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
20be0     A7 0C 68 AC |  if_e	wrlong	#6, fp
20be4     08 4E 05 A1 |  if_e	add	fp, #8
20be8     A7 FE 69 AC |  if_e	wrlong	#255, fp
20bec     08 4E 85 A1 |  if_e	sub	fp, #8
20bf0     18 00 90 AD |  if_e	jmp	#LR__2591
20bf4     A7 2A 02 FB | 	rdlong	local03, fp
20bf8     0C 4E 05 F1 | 	add	fp, #12
20bfc     A7 26 02 FB | 	rdlong	local01, fp
20c00     0C 4E 85 F1 | 	sub	fp, #12
20c04     13 2B 42 F0 | 	shr	local03, local01
20c08     A7 2A 62 FC | 	wrlong	local03, fp
20c0c                 | LR__2591
20c0c     A7 12 02 F6 | 	mov	arg01, fp
20c10     D8 C9 BE FD | 	call	#_push
20c14     A7 F0 03 F6 | 	mov	ptra, fp
20c18     B2 00 A0 FD | 	call	#popregs_
20c1c                 | _do_shr_ret
20c1c     2D 00 64 FD | 	ret
20c20                 | 
20c20                 | ' 
20c20                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
20c20                 | ' 
20c20                 | ' ''----------------------------------------------------------------------------------------------------
20c20                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
20c20                 | ' ''----------------------------------------------------------------------------------------------------
20c20                 | ' 
20c20                 | ' ''--------------------------- Command function pointers
20c20                 | ' 
20c20                 | ' sub init_commands
20c20                 | _init_commands
20c20                 | ' 
20c20                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
20c20     00 00 06 F6 | 	mov	_var01, #0
20c24     97 16 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
20c28                 | LR__2600
20c28     00 FB 01 F6 | 	mov	result1, _var01
20c2c     02 FA 65 F0 | 	shl	result1, #2
20c30     43 00 00 FF 
20c34     60 E4 05 F1 | 	add	objptr, ##34400
20c38     F2 FA 01 F1 | 	add	result1, objptr
20c3c     43 00 00 FF 
20c40     60 E4 85 F1 | 	sub	objptr, ##34400
20c44     FD E4 61 FC | 	wrlong	objptr, result1
20c48     01 00 06 F1 | 	add	_var01, #1
20c4c     00 01 56 F2 | 	cmps	_var01, #256 wc
20c50     D4 FF 9F CD |  if_b	jmp	#LR__2600
20c54                 | LR__2601
20c54     F2 FA 01 F6 | 	mov	result1, objptr
20c58     14 FA 25 F4 | 	bith	result1, #20
20c5c     43 00 00 FF 
20c60     64 E4 05 F1 | 	add	objptr, ##34404
20c64     F2 FA 61 FC | 	wrlong	result1, objptr
20c68     43 00 00 FF 
20c6c     64 E4 85 F1 | 	sub	objptr, ##34404
20c70     F2 FA 01 F6 | 	mov	result1, objptr
20c74     15 FA 25 F4 | 	bith	result1, #21
20c78     43 00 00 FF 
20c7c     68 E4 05 F1 | 	add	objptr, ##34408
20c80     F2 FA 61 FC | 	wrlong	result1, objptr
20c84     43 00 00 FF 
20c88     68 E4 85 F1 | 	sub	objptr, ##34408
20c8c     F2 FA 01 F6 | 	mov	result1, objptr
20c90     34 FA 25 F4 | 	bith	result1, #52
20c94     43 00 00 FF 
20c98     6C E4 05 F1 | 	add	objptr, ##34412
20c9c     F2 FA 61 FC | 	wrlong	result1, objptr
20ca0     43 00 00 FF 
20ca4     6C E4 85 F1 | 	sub	objptr, ##34412
20ca8     F2 FA 01 F6 | 	mov	result1, objptr
20cac     16 FA 25 F4 | 	bith	result1, #22
20cb0     43 00 00 FF 
20cb4     74 E4 05 F1 | 	add	objptr, ##34420
20cb8     F2 FA 61 FC | 	wrlong	result1, objptr
20cbc     43 00 00 FF 
20cc0     74 E4 85 F1 | 	sub	objptr, ##34420
20cc4     F2 FA 01 F6 | 	mov	result1, objptr
20cc8     00 28 00 FF 
20ccc     00 FA 45 F5 | 	or	result1, ##5242880
20cd0     43 00 00 FF 
20cd4     78 E4 05 F1 | 	add	objptr, ##34424
20cd8     F2 FA 61 FC | 	wrlong	result1, objptr
20cdc     43 00 00 FF 
20ce0     78 E4 85 F1 | 	sub	objptr, ##34424
20ce4     F2 FA 01 F6 | 	mov	result1, objptr
20ce8     35 FA 25 F4 | 	bith	result1, #53
20cec     43 00 00 FF 
20cf0     7C E4 05 F1 | 	add	objptr, ##34428
20cf4     F2 FA 61 FC | 	wrlong	result1, objptr
20cf8     43 00 00 FF 
20cfc     7C E4 85 F1 | 	sub	objptr, ##34428
20d00     F2 FA 01 F6 | 	mov	result1, objptr
20d04     54 FA 25 F4 | 	bith	result1, #84
20d08     43 00 00 FF 
20d0c     80 E4 05 F1 | 	add	objptr, ##34432
20d10     F2 FA 61 FC | 	wrlong	result1, objptr
20d14     43 00 00 FF 
20d18     80 E4 85 F1 | 	sub	objptr, ##34432
20d1c     F2 FA 01 F6 | 	mov	result1, objptr
20d20     17 FA 25 F4 | 	bith	result1, #23
20d24     43 00 00 FF 
20d28     84 E4 05 F1 | 	add	objptr, ##34436
20d2c     F2 FA 61 FC | 	wrlong	result1, objptr
20d30     43 00 00 FF 
20d34     84 E4 85 F1 | 	sub	objptr, ##34436
20d38     F2 FA 01 F6 | 	mov	result1, objptr
20d3c     00 48 00 FF 
20d40     00 FA 45 F5 | 	or	result1, ##9437184
20d44     43 00 00 FF 
20d48     88 E4 05 F1 | 	add	objptr, ##34440
20d4c     F2 FA 61 FC | 	wrlong	result1, objptr
20d50     43 00 00 FF 
20d54     88 E4 85 F1 | 	sub	objptr, ##34440
20d58     F2 FA 01 F6 | 	mov	result1, objptr
20d5c     00 50 00 FF 
20d60     00 FA 45 F5 | 	or	result1, ##10485760
20d64     43 00 00 FF 
20d68     8C E4 05 F1 | 	add	objptr, ##34444
20d6c     F2 FA 61 FC | 	wrlong	result1, objptr
20d70     43 00 00 FF 
20d74     8C E4 85 F1 | 	sub	objptr, ##34444
20d78     F2 FA 01 F6 | 	mov	result1, objptr
20d7c     00 58 00 FF 
20d80     00 FA 45 F5 | 	or	result1, ##11534336
20d84     43 00 00 FF 
20d88     90 E4 05 F1 | 	add	objptr, ##34448
20d8c     F2 FA 61 FC | 	wrlong	result1, objptr
20d90     43 00 00 FF 
20d94     90 E4 85 F1 | 	sub	objptr, ##34448
20d98     F2 FA 01 F6 | 	mov	result1, objptr
20d9c     36 FA 25 F4 | 	bith	result1, #54
20da0     43 00 00 FF 
20da4     A4 E4 05 F1 | 	add	objptr, ##34468
20da8     F2 FA 61 FC | 	wrlong	result1, objptr
20dac     43 00 00 FF 
20db0     A4 E4 85 F1 | 	sub	objptr, ##34468
20db4     F2 FA 01 F6 | 	mov	result1, objptr
20db8     00 68 00 FF 
20dbc     00 FA 45 F5 | 	or	result1, ##13631488
20dc0     43 00 00 FF 
20dc4     D4 E4 05 F1 | 	add	objptr, ##34516
20dc8     F2 FA 61 FC | 	wrlong	result1, objptr
20dcc     43 00 00 FF 
20dd0     D4 E4 85 F1 | 	sub	objptr, ##34516
20dd4     F2 FA 01 F6 | 	mov	result1, objptr
20dd8     00 68 00 FF 
20ddc     00 FA 45 F5 | 	or	result1, ##13631488
20de0     43 00 00 FF 
20de4     D0 E4 05 F1 | 	add	objptr, ##34512
20de8     F2 FA 61 FC | 	wrlong	result1, objptr
20dec     43 00 00 FF 
20df0     D0 E4 85 F1 | 	sub	objptr, ##34512
20df4     F2 FA 01 F6 | 	mov	result1, objptr
20df8     00 68 00 FF 
20dfc     00 FA 45 F5 | 	or	result1, ##13631488
20e00     43 00 00 FF 
20e04     D8 E4 05 F1 | 	add	objptr, ##34520
20e08     F2 FA 61 FC | 	wrlong	result1, objptr
20e0c     43 00 00 FF 
20e10     D8 E4 85 F1 | 	sub	objptr, ##34520
20e14     F2 FA 01 F6 | 	mov	result1, objptr
20e18     00 68 00 FF 
20e1c     00 FA 45 F5 | 	or	result1, ##13631488
20e20     43 00 00 FF 
20e24     DC E4 05 F1 | 	add	objptr, ##34524
20e28     F2 FA 61 FC | 	wrlong	result1, objptr
20e2c     43 00 00 FF 
20e30     DC E4 85 F1 | 	sub	objptr, ##34524
20e34     F2 FA 01 F6 | 	mov	result1, objptr
20e38     00 68 00 FF 
20e3c     00 FA 45 F5 | 	or	result1, ##13631488
20e40     43 00 00 FF 
20e44     0C E5 05 F1 | 	add	objptr, ##34572
20e48     F2 FA 61 FC | 	wrlong	result1, objptr
20e4c     43 00 00 FF 
20e50     0C E5 85 F1 | 	sub	objptr, ##34572
20e54     F2 FA 01 F6 | 	mov	result1, objptr
20e58     55 FA 25 F4 | 	bith	result1, #85
20e5c     43 00 00 FF 
20e60     BC E4 05 F1 | 	add	objptr, ##34492
20e64     F2 FA 61 FC | 	wrlong	result1, objptr
20e68     43 00 00 FF 
20e6c     BC E4 85 F1 | 	sub	objptr, ##34492
20e70     F2 FA 01 F6 | 	mov	result1, objptr
20e74     00 68 00 FF 
20e78     00 FA 45 F5 | 	or	result1, ##13631488
20e7c     43 00 00 FF 
20e80     10 E5 05 F1 | 	add	objptr, ##34576
20e84     F2 FA 61 FC | 	wrlong	result1, objptr
20e88     43 00 00 FF 
20e8c     10 E5 85 F1 | 	sub	objptr, ##34576
20e90     F2 FA 01 F6 | 	mov	result1, objptr
20e94     00 68 00 FF 
20e98     00 FA 45 F5 | 	or	result1, ##13631488
20e9c     43 00 00 FF 
20ea0     E0 E4 05 F1 | 	add	objptr, ##34528
20ea4     F2 FA 61 FC | 	wrlong	result1, objptr
20ea8     43 00 00 FF 
20eac     E0 E4 85 F1 | 	sub	objptr, ##34528
20eb0     F2 FA 01 F6 | 	mov	result1, objptr
20eb4     00 68 00 FF 
20eb8     00 FA 45 F5 | 	or	result1, ##13631488
20ebc     43 00 00 FF 
20ec0     E4 E4 05 F1 | 	add	objptr, ##34532
20ec4     F2 FA 61 FC | 	wrlong	result1, objptr
20ec8     43 00 00 FF 
20ecc     E4 E4 85 F1 | 	sub	objptr, ##34532
20ed0     F2 FA 01 F6 | 	mov	result1, objptr
20ed4     00 68 00 FF 
20ed8     00 FA 45 F5 | 	or	result1, ##13631488
20edc     43 00 00 FF 
20ee0     E8 E4 05 F1 | 	add	objptr, ##34536
20ee4     F2 FA 61 FC | 	wrlong	result1, objptr
20ee8     43 00 00 FF 
20eec     E8 E4 85 F1 | 	sub	objptr, ##34536
20ef0     F2 FA 01 F6 | 	mov	result1, objptr
20ef4     74 FA 25 F4 | 	bith	result1, #116
20ef8     43 00 00 FF 
20efc     60 E5 05 F1 | 	add	objptr, ##34656
20f00     F2 FA 61 FC | 	wrlong	result1, objptr
20f04     43 00 00 FF 
20f08     60 E5 85 F1 | 	sub	objptr, ##34656
20f0c     F2 FA 01 F6 | 	mov	result1, objptr
20f10     18 FA 25 F4 | 	bith	result1, #24
20f14     43 00 00 FF 
20f18     64 E5 05 F1 | 	add	objptr, ##34660
20f1c     F2 FA 61 FC | 	wrlong	result1, objptr
20f20     43 00 00 FF 
20f24     64 E5 85 F1 | 	sub	objptr, ##34660
20f28     F2 FA 01 F6 | 	mov	result1, objptr
20f2c     00 88 00 FF 
20f30     00 FA 45 F5 | 	or	result1, ##17825792
20f34     43 00 00 FF 
20f38     68 E5 05 F1 | 	add	objptr, ##34664
20f3c     F2 FA 61 FC | 	wrlong	result1, objptr
20f40     43 00 00 FF 
20f44     68 E5 85 F1 | 	sub	objptr, ##34664
20f48     F2 FA 01 F6 | 	mov	result1, objptr
20f4c     00 90 00 FF 
20f50     00 FA 45 F5 | 	or	result1, ##18874368
20f54     43 00 00 FF 
20f58     6C E5 05 F1 | 	add	objptr, ##34668
20f5c     F2 FA 61 FC | 	wrlong	result1, objptr
20f60     43 00 00 FF 
20f64     6C E5 85 F1 | 	sub	objptr, ##34668
20f68     F2 FA 01 F6 | 	mov	result1, objptr
20f6c     00 98 00 FF 
20f70     00 FA 45 F5 | 	or	result1, ##19922944
20f74     43 00 00 FF 
20f78     70 E5 05 F1 | 	add	objptr, ##34672
20f7c     F2 FA 61 FC | 	wrlong	result1, objptr
20f80     43 00 00 FF 
20f84     70 E5 85 F1 | 	sub	objptr, ##34672
20f88     F2 FA 01 F6 | 	mov	result1, objptr
20f8c     00 A0 00 FF 
20f90     00 FA 45 F5 | 	or	result1, ##20971520
20f94     43 00 00 FF 
20f98     74 E5 05 F1 | 	add	objptr, ##34676
20f9c     F2 FA 61 FC | 	wrlong	result1, objptr
20fa0     43 00 00 FF 
20fa4     74 E5 85 F1 | 	sub	objptr, ##34676
20fa8     F2 FA 01 F6 | 	mov	result1, objptr
20fac     00 A8 00 FF 
20fb0     00 FA 45 F5 | 	or	result1, ##22020096
20fb4     43 00 00 FF 
20fb8     78 E5 05 F1 | 	add	objptr, ##34680
20fbc     F2 FA 61 FC | 	wrlong	result1, objptr
20fc0     43 00 00 FF 
20fc4     78 E5 85 F1 | 	sub	objptr, ##34680
20fc8     F2 FA 01 F6 | 	mov	result1, objptr
20fcc     00 B0 00 FF 
20fd0     00 FA 45 F5 | 	or	result1, ##23068672
20fd4     43 00 00 FF 
20fd8     7C E5 05 F1 | 	add	objptr, ##34684
20fdc     F2 FA 61 FC | 	wrlong	result1, objptr
20fe0     43 00 00 FF 
20fe4     7C E5 85 F1 | 	sub	objptr, ##34684
20fe8     F2 FA 01 F6 | 	mov	result1, objptr
20fec     00 B8 00 FF 
20ff0     00 FA 45 F5 | 	or	result1, ##24117248
20ff4     43 00 00 FF 
20ff8     80 E5 05 F1 | 	add	objptr, ##34688
20ffc     F2 FA 61 FC | 	wrlong	result1, objptr
21000     43 00 00 FF 
21004     80 E5 85 F1 | 	sub	objptr, ##34688
21008     F2 FA 01 F6 | 	mov	result1, objptr
2100c     37 FA 25 F4 | 	bith	result1, #55
21010     43 00 00 FF 
21014     84 E5 05 F1 | 	add	objptr, ##34692
21018     F2 FA 61 FC | 	wrlong	result1, objptr
2101c     43 00 00 FF 
21020     84 E5 85 F1 | 	sub	objptr, ##34692
21024     F2 FA 01 F6 | 	mov	result1, objptr
21028     00 C8 00 FF 
2102c     00 FA 45 F5 | 	or	result1, ##26214400
21030     43 00 00 FF 
21034     88 E5 05 F1 | 	add	objptr, ##34696
21038     F2 FA 61 FC | 	wrlong	result1, objptr
2103c     43 00 00 FF 
21040     88 E5 85 F1 | 	sub	objptr, ##34696
21044     F2 FA 01 F6 | 	mov	result1, objptr
21048     00 D0 00 FF 
2104c     00 FA 45 F5 | 	or	result1, ##27262976
21050     43 00 00 FF 
21054     8C E5 05 F1 | 	add	objptr, ##34700
21058     F2 FA 61 FC | 	wrlong	result1, objptr
2105c     43 00 00 FF 
21060     8C E5 85 F1 | 	sub	objptr, ##34700
21064     F2 FA 01 F6 | 	mov	result1, objptr
21068     00 D8 00 FF 
2106c     00 FA 45 F5 | 	or	result1, ##28311552
21070     43 00 00 FF 
21074     90 E5 05 F1 | 	add	objptr, ##34704
21078     F2 FA 61 FC | 	wrlong	result1, objptr
2107c     43 00 00 FF 
21080     90 E5 85 F1 | 	sub	objptr, ##34704
21084     F2 FA 01 F6 | 	mov	result1, objptr
21088     56 FA 25 F4 | 	bith	result1, #86
2108c     43 00 00 FF 
21090     94 E5 05 F1 | 	add	objptr, ##34708
21094     F2 FA 61 FC | 	wrlong	result1, objptr
21098     43 00 00 FF 
2109c     94 E5 85 F1 | 	sub	objptr, ##34708
210a0     F2 FA 01 F6 | 	mov	result1, objptr
210a4     00 E8 00 FF 
210a8     00 FA 45 F5 | 	or	result1, ##30408704
210ac     45 00 00 FF 
210b0     5C E4 05 F1 | 	add	objptr, ##35420
210b4     F2 FA 61 FC | 	wrlong	result1, objptr
210b8     45 00 00 FF 
210bc     5C E4 85 F1 | 	sub	objptr, ##35420
210c0     F2 FA 01 F6 | 	mov	result1, objptr
210c4     75 FA 25 F4 | 	bith	result1, #117
210c8     43 00 00 FF 
210cc     98 E5 05 F1 | 	add	objptr, ##34712
210d0     F2 FA 61 FC | 	wrlong	result1, objptr
210d4     43 00 00 FF 
210d8     98 E5 85 F1 | 	sub	objptr, ##34712
210dc     F2 FA 01 F6 | 	mov	result1, objptr
210e0     94 FA 25 F4 | 	bith	result1, #148
210e4     43 00 00 FF 
210e8     AC E5 05 F1 | 	add	objptr, ##34732
210ec     F2 FA 61 FC | 	wrlong	result1, objptr
210f0     43 00 00 FF 
210f4     AC E5 85 F1 | 	sub	objptr, ##34732
210f8     F2 FA 01 F6 | 	mov	result1, objptr
210fc     19 FA 25 F4 | 	bith	result1, #25
21100     43 00 00 FF 
21104     9C E5 05 F1 | 	add	objptr, ##34716
21108     F2 FA 61 FC | 	wrlong	result1, objptr
2110c     43 00 00 FF 
21110     9C E5 85 F1 | 	sub	objptr, ##34716
21114     F2 FA 01 F6 | 	mov	result1, objptr
21118     00 08 01 FF 
2111c     00 FA 45 F5 | 	or	result1, ##34603008
21120     43 00 00 FF 
21124     B8 E4 05 F1 | 	add	objptr, ##34488
21128     F2 FA 61 FC | 	wrlong	result1, objptr
2112c     43 00 00 FF 
21130     B8 E4 85 F1 | 	sub	objptr, ##34488
21134     F2 FA 01 F6 | 	mov	result1, objptr
21138     00 10 01 FF 
2113c     00 FA 45 F5 | 	or	result1, ##35651584
21140     43 00 00 FF 
21144     A4 E5 05 F1 | 	add	objptr, ##34724
21148     F2 FA 61 FC | 	wrlong	result1, objptr
2114c     43 00 00 FF 
21150     A4 E5 85 F1 | 	sub	objptr, ##34724
21154     F2 FA 01 F6 | 	mov	result1, objptr
21158     00 18 01 FF 
2115c     00 FA 45 F5 | 	or	result1, ##36700160
21160     43 00 00 FF 
21164     A8 E5 05 F1 | 	add	objptr, ##34728
21168     F2 FA 61 FC | 	wrlong	result1, objptr
2116c     43 00 00 FF 
21170     A8 E5 85 F1 | 	sub	objptr, ##34728
21174     F2 FA 01 F6 | 	mov	result1, objptr
21178     00 20 01 FF 
2117c     00 FA 45 F5 | 	or	result1, ##37748736
21180     43 00 00 FF 
21184     B4 E5 05 F1 | 	add	objptr, ##34740
21188     F2 FA 61 FC | 	wrlong	result1, objptr
2118c     43 00 00 FF 
21190     B4 E5 85 F1 | 	sub	objptr, ##34740
21194     F2 FA 01 F6 | 	mov	result1, objptr
21198     00 28 01 FF 
2119c     00 FA 45 F5 | 	or	result1, ##38797312
211a0     43 00 00 FF 
211a4     B8 E5 05 F1 | 	add	objptr, ##34744
211a8     F2 FA 61 FC | 	wrlong	result1, objptr
211ac     43 00 00 FF 
211b0     B8 E5 85 F1 | 	sub	objptr, ##34744
211b4     F2 FA 01 F6 | 	mov	result1, objptr
211b8     00 30 01 FF 
211bc     00 FA 45 F5 | 	or	result1, ##39845888
211c0     43 00 00 FF 
211c4     BC E5 05 F1 | 	add	objptr, ##34748
211c8     F2 FA 61 FC | 	wrlong	result1, objptr
211cc     43 00 00 FF 
211d0     BC E5 85 F1 | 	sub	objptr, ##34748
211d4     F2 FA 01 F6 | 	mov	result1, objptr
211d8     00 38 01 FF 
211dc     00 FA 45 F5 | 	or	result1, ##40894464
211e0     43 00 00 FF 
211e4     C0 E5 05 F1 | 	add	objptr, ##34752
211e8     F2 FA 61 FC | 	wrlong	result1, objptr
211ec     43 00 00 FF 
211f0     C0 E5 85 F1 | 	sub	objptr, ##34752
211f4     F2 FA 01 F6 | 	mov	result1, objptr
211f8     00 40 01 FF 
211fc     00 FA 45 F5 | 	or	result1, ##41943040
21200     43 00 00 FF 
21204     C8 E5 05 F1 | 	add	objptr, ##34760
21208     F2 FA 61 FC | 	wrlong	result1, objptr
2120c     43 00 00 FF 
21210     C8 E5 85 F1 | 	sub	objptr, ##34760
21214     F2 FA 01 F6 | 	mov	result1, objptr
21218     00 08 01 FF 
2121c     00 FA 45 F5 | 	or	result1, ##34603008
21220     43 00 00 FF 
21224     CC E5 05 F1 | 	add	objptr, ##34764
21228     F2 FA 61 FC | 	wrlong	result1, objptr
2122c     43 00 00 FF 
21230     CC E5 85 F1 | 	sub	objptr, ##34764
21234     F2 FA 01 F6 | 	mov	result1, objptr
21238     00 48 01 FF 
2123c     00 FA 45 F5 | 	or	result1, ##42991616
21240     43 00 00 FF 
21244     CC E4 05 F1 | 	add	objptr, ##34508
21248     F2 FA 61 FC | 	wrlong	result1, objptr
2124c     43 00 00 FF 
21250     CC E4 85 F1 | 	sub	objptr, ##34508
21254     F2 FA 01 F6 | 	mov	result1, objptr
21258     00 50 01 FF 
2125c     00 FA 45 F5 | 	or	result1, ##44040192
21260     43 00 00 FF 
21264     FC E4 05 F1 | 	add	objptr, ##34556
21268     F2 FA 61 FC | 	wrlong	result1, objptr
2126c     43 00 00 FF 
21270     FC E4 85 F1 | 	sub	objptr, ##34556
21274     F2 FA 01 F6 | 	mov	result1, objptr
21278     00 58 01 FF 
2127c     00 FA 45 F5 | 	or	result1, ##45088768
21280     43 00 00 FF 
21284     F8 E4 05 F1 | 	add	objptr, ##34552
21288     F2 FA 61 FC | 	wrlong	result1, objptr
2128c     43 00 00 FF 
21290     F8 E4 85 F1 | 	sub	objptr, ##34552
21294     F2 FA 01 F6 | 	mov	result1, objptr
21298     00 60 01 FF 
2129c     00 FA 45 F5 | 	or	result1, ##46137344
212a0     43 00 00 FF 
212a4     9C E4 05 F1 | 	add	objptr, ##34460
212a8     F2 FA 61 FC | 	wrlong	result1, objptr
212ac     43 00 00 FF 
212b0     9C E4 85 F1 | 	sub	objptr, ##34460
212b4     F2 FA 01 F6 | 	mov	result1, objptr
212b8     00 68 01 FF 
212bc     00 FA 45 F5 | 	or	result1, ##47185920
212c0     43 00 00 FF 
212c4     A0 E4 05 F1 | 	add	objptr, ##34464
212c8     F2 FA 61 FC | 	wrlong	result1, objptr
212cc     43 00 00 FF 
212d0     A0 E4 85 F1 | 	sub	objptr, ##34464
212d4     F2 FA 01 F6 | 	mov	result1, objptr
212d8     00 70 01 FF 
212dc     00 FA 45 F5 | 	or	result1, ##48234496
212e0     43 00 00 FF 
212e4     08 E5 05 F1 | 	add	objptr, ##34568
212e8     F2 FA 61 FC | 	wrlong	result1, objptr
212ec     43 00 00 FF 
212f0     08 E5 85 F1 | 	sub	objptr, ##34568
212f4     F2 FA 01 F6 | 	mov	result1, objptr
212f8     00 78 01 FF 
212fc     00 FA 45 F5 | 	or	result1, ##49283072
21300     43 00 00 FF 
21304     B0 E5 05 F1 | 	add	objptr, ##34736
21308     F2 FA 61 FC | 	wrlong	result1, objptr
2130c     43 00 00 FF 
21310     B0 E5 85 F1 | 	sub	objptr, ##34736
21314     F2 FA 01 F6 | 	mov	result1, objptr
21318     38 FA 25 F4 | 	bith	result1, #56
2131c     43 00 00 FF 
21320     C4 E5 05 F1 | 	add	objptr, ##34756
21324     F2 FA 61 FC | 	wrlong	result1, objptr
21328     43 00 00 FF 
2132c     C4 E5 85 F1 | 	sub	objptr, ##34756
21330     F2 FA 01 F6 | 	mov	result1, objptr
21334     00 88 01 FF 
21338     00 FA 45 F5 | 	or	result1, ##51380224
2133c     43 00 00 FF 
21340     D0 E5 05 F1 | 	add	objptr, ##34768
21344     F2 FA 61 FC | 	wrlong	result1, objptr
21348     43 00 00 FF 
2134c     D0 E5 85 F1 | 	sub	objptr, ##34768
21350     F2 FA 01 F6 | 	mov	result1, objptr
21354     00 90 01 FF 
21358     00 FA 45 F5 | 	or	result1, ##52428800
2135c     43 00 00 FF 
21360     D4 E5 05 F1 | 	add	objptr, ##34772
21364     F2 FA 61 FC | 	wrlong	result1, objptr
21368     43 00 00 FF 
2136c     D4 E5 85 F1 | 	sub	objptr, ##34772
21370     F2 FA 01 F6 | 	mov	result1, objptr
21374     00 98 01 FF 
21378     00 FA 45 F5 | 	or	result1, ##53477376
2137c     43 00 00 FF 
21380     D8 E5 05 F1 | 	add	objptr, ##34776
21384     F2 FA 61 FC | 	wrlong	result1, objptr
21388     43 00 00 FF 
2138c     D8 E5 85 F1 | 	sub	objptr, ##34776
21390     F2 FA 01 F6 | 	mov	result1, objptr
21394     00 A0 01 FF 
21398     00 FA 45 F5 | 	or	result1, ##54525952
2139c     43 00 00 FF 
213a0     DC E5 05 F1 | 	add	objptr, ##34780
213a4     F2 FA 61 FC | 	wrlong	result1, objptr
213a8     43 00 00 FF 
213ac     DC E5 85 F1 | 	sub	objptr, ##34780
213b0     F2 FA 01 F6 | 	mov	result1, objptr
213b4     00 A8 01 FF 
213b8     00 FA 45 F5 | 	or	result1, ##55574528
213bc     43 00 00 FF 
213c0     E0 E5 05 F1 | 	add	objptr, ##34784
213c4     F2 FA 61 FC | 	wrlong	result1, objptr
213c8     43 00 00 FF 
213cc     E0 E5 85 F1 | 	sub	objptr, ##34784
213d0     F2 FA 01 F6 | 	mov	result1, objptr
213d4     00 B0 01 FF 
213d8     00 FA 45 F5 | 	or	result1, ##56623104
213dc     43 00 00 FF 
213e0     E4 E5 05 F1 | 	add	objptr, ##34788
213e4     F2 FA 61 FC | 	wrlong	result1, objptr
213e8     43 00 00 FF 
213ec     E4 E5 85 F1 | 	sub	objptr, ##34788
213f0     F2 FA 01 F6 | 	mov	result1, objptr
213f4     94 FA 25 F4 | 	bith	result1, #148
213f8     43 00 00 FF 
213fc     AC E5 05 F1 | 	add	objptr, ##34732
21400     F2 FA 61 FC | 	wrlong	result1, objptr
21404     43 00 00 FF 
21408     AC E5 85 F1 | 	sub	objptr, ##34732
2140c     F2 FA 01 F6 | 	mov	result1, objptr
21410     00 B8 01 FF 
21414     00 FA 45 F5 | 	or	result1, ##57671680
21418     43 00 00 FF 
2141c     EC E5 05 F1 | 	add	objptr, ##34796
21420     F2 FA 61 FC | 	wrlong	result1, objptr
21424     43 00 00 FF 
21428     EC E5 85 F1 | 	sub	objptr, ##34796
2142c     F2 FA 01 F6 | 	mov	result1, objptr
21430     57 FA 25 F4 | 	bith	result1, #87
21434     43 00 00 FF 
21438     E8 E5 05 F1 | 	add	objptr, ##34792
2143c     F2 FA 61 FC | 	wrlong	result1, objptr
21440     43 00 00 FF 
21444     E8 E5 85 F1 | 	sub	objptr, ##34792
21448     F2 FA 01 F6 | 	mov	result1, objptr
2144c     00 C8 01 FF 
21450     00 FA 45 F5 | 	or	result1, ##59768832
21454     44 00 00 FF 
21458     00 E4 05 F1 | 	add	objptr, ##34816
2145c     F2 FA 61 FC | 	wrlong	result1, objptr
21460     44 00 00 FF 
21464     00 E4 85 F1 | 	sub	objptr, ##34816
21468     F2 FA 01 F6 | 	mov	result1, objptr
2146c     00 D0 01 FF 
21470     00 FA 45 F5 | 	or	result1, ##60817408
21474     44 00 00 FF 
21478     04 E4 05 F1 | 	add	objptr, ##34820
2147c     F2 FA 61 FC | 	wrlong	result1, objptr
21480     44 00 00 FF 
21484     04 E4 85 F1 | 	sub	objptr, ##34820
21488     F2 FA 01 F6 | 	mov	result1, objptr
2148c     00 D8 01 FF 
21490     00 FA 45 F5 | 	or	result1, ##61865984
21494     43 00 00 FF 
21498     F0 E5 05 F1 | 	add	objptr, ##34800
2149c     F2 FA 61 FC | 	wrlong	result1, objptr
214a0     43 00 00 FF 
214a4     F0 E5 85 F1 | 	sub	objptr, ##34800
214a8     F2 FA 01 F6 | 	mov	result1, objptr
214ac     76 FA 25 F4 | 	bith	result1, #118
214b0     43 00 00 FF 
214b4     F4 E5 05 F1 | 	add	objptr, ##34804
214b8     F2 FA 61 FC | 	wrlong	result1, objptr
214bc     43 00 00 FF 
214c0     F4 E5 85 F1 | 	sub	objptr, ##34804
214c4     F2 FA 01 F6 | 	mov	result1, objptr
214c8     00 E8 01 FF 
214cc     00 FA 45 F5 | 	or	result1, ##63963136
214d0     43 00 00 FF 
214d4     F8 E5 05 F1 | 	add	objptr, ##34808
214d8     F2 FA 61 FC | 	wrlong	result1, objptr
214dc     43 00 00 FF 
214e0     F8 E5 85 F1 | 	sub	objptr, ##34808
214e4     F2 FA 01 F6 | 	mov	result1, objptr
214e8     95 FA 25 F4 | 	bith	result1, #149
214ec     43 00 00 FF 
214f0     FC E5 05 F1 | 	add	objptr, ##34812
214f4     F2 FA 61 FC | 	wrlong	result1, objptr
214f8     43 00 00 FF 
214fc     FC E5 85 F1 | 	sub	objptr, ##34812
21500     F2 FA 01 F6 | 	mov	result1, objptr
21504     B4 FA 25 F4 | 	bith	result1, #180
21508     44 00 00 FF 
2150c     0C E4 05 F1 | 	add	objptr, ##34828
21510     F2 FA 61 FC | 	wrlong	result1, objptr
21514     44 00 00 FF 
21518     0C E4 85 F1 | 	sub	objptr, ##34828
2151c     F2 FA 01 F6 | 	mov	result1, objptr
21520     1A FA 25 F4 | 	bith	result1, #26
21524     44 00 00 FF 
21528     08 E4 05 F1 | 	add	objptr, ##34824
2152c     F2 FA 61 FC | 	wrlong	result1, objptr
21530     44 00 00 FF 
21534     08 E4 85 F1 | 	sub	objptr, ##34824
21538     F2 FA 01 F6 | 	mov	result1, objptr
2153c     00 08 02 FF 
21540     00 FA 45 F5 | 	or	result1, ##68157440
21544     44 00 00 FF 
21548     18 E4 05 F1 | 	add	objptr, ##34840
2154c     F2 FA 61 FC | 	wrlong	result1, objptr
21550     44 00 00 FF 
21554     18 E4 85 F1 | 	sub	objptr, ##34840
21558     F2 FA 01 F6 | 	mov	result1, objptr
2155c     00 10 02 FF 
21560     00 FA 45 F5 | 	or	result1, ##69206016
21564     44 00 00 FF 
21568     14 E4 05 F1 | 	add	objptr, ##34836
2156c     F2 FA 61 FC | 	wrlong	result1, objptr
21570     44 00 00 FF 
21574     14 E4 85 F1 | 	sub	objptr, ##34836
21578     F2 FA 01 F6 | 	mov	result1, objptr
2157c     00 18 02 FF 
21580     00 FA 45 F5 | 	or	result1, ##70254592
21584     44 00 00 FF 
21588     10 E4 05 F1 | 	add	objptr, ##34832
2158c     F2 FA 61 FC | 	wrlong	result1, objptr
21590     44 00 00 FF 
21594     10 E4 85 F1 | 	sub	objptr, ##34832
21598     F2 FA 01 F6 | 	mov	result1, objptr
2159c     00 20 02 FF 
215a0     00 FA 45 F5 | 	or	result1, ##71303168
215a4     44 00 00 FF 
215a8     1C E4 05 F1 | 	add	objptr, ##34844
215ac     F2 FA 61 FC | 	wrlong	result1, objptr
215b0     44 00 00 FF 
215b4     1C E4 85 F1 | 	sub	objptr, ##34844
215b8     F2 FA 01 F6 | 	mov	result1, objptr
215bc     00 28 02 FF 
215c0     00 FA 45 F5 | 	or	result1, ##72351744
215c4     44 00 00 FF 
215c8     20 E4 05 F1 | 	add	objptr, ##34848
215cc     F2 FA 61 FC | 	wrlong	result1, objptr
215d0     44 00 00 FF 
215d4     20 E4 85 F1 | 	sub	objptr, ##34848
215d8     F2 FA 01 F6 | 	mov	result1, objptr
215dc     00 30 02 FF 
215e0     00 FA 45 F5 | 	or	result1, ##73400320
215e4     43 00 00 FF 
215e8     B4 E4 05 F1 | 	add	objptr, ##34484
215ec     F2 FA 61 FC | 	wrlong	result1, objptr
215f0     43 00 00 FF 
215f4     B4 E4 85 F1 | 	sub	objptr, ##34484
215f8     F2 FA 01 F6 | 	mov	result1, objptr
215fc     00 38 02 FF 
21600     00 FA 45 F5 | 	or	result1, ##74448896
21604     44 00 00 FF 
21608     38 E4 05 F1 | 	add	objptr, ##34872
2160c     F2 FA 61 FC | 	wrlong	result1, objptr
21610     44 00 00 FF 
21614     38 E4 85 F1 | 	sub	objptr, ##34872
21618     F2 FA 01 F6 | 	mov	result1, objptr
2161c     00 40 02 FF 
21620     00 FA 45 F5 | 	or	result1, ##75497472
21624     44 00 00 FF 
21628     48 E4 05 F1 | 	add	objptr, ##34888
2162c     F2 FA 61 FC | 	wrlong	result1, objptr
21630     44 00 00 FF 
21634     48 E4 85 F1 | 	sub	objptr, ##34888
21638     F2 FA 01 F6 | 	mov	result1, objptr
2163c     00 48 02 FF 
21640     00 FA 45 F5 | 	or	result1, ##76546048
21644     44 00 00 FF 
21648     4C E4 05 F1 | 	add	objptr, ##34892
2164c     F2 FA 61 FC | 	wrlong	result1, objptr
21650     44 00 00 FF 
21654     4C E4 85 F1 | 	sub	objptr, ##34892
21658     F2 FA 01 F6 | 	mov	result1, objptr
2165c     00 50 02 FF 
21660     00 FA 45 F5 | 	or	result1, ##77594624
21664     44 00 00 FF 
21668     44 E4 05 F1 | 	add	objptr, ##34884
2166c     F2 FA 61 FC | 	wrlong	result1, objptr
21670     44 00 00 FF 
21674     44 E4 85 F1 | 	sub	objptr, ##34884
21678     F2 FA 01 F6 | 	mov	result1, objptr
2167c     00 58 02 FF 
21680     00 FA 45 F5 | 	or	result1, ##78643200
21684     44 00 00 FF 
21688     3C E4 05 F1 | 	add	objptr, ##34876
2168c     F2 FA 61 FC | 	wrlong	result1, objptr
21690     44 00 00 FF 
21694     3C E4 85 F1 | 	sub	objptr, ##34876
21698     F2 FA 01 F6 | 	mov	result1, objptr
2169c     00 60 02 FF 
216a0     00 FA 45 F5 | 	or	result1, ##79691776
216a4     44 00 00 FF 
216a8     40 E4 05 F1 | 	add	objptr, ##34880
216ac     F2 FA 61 FC | 	wrlong	result1, objptr
216b0     44 00 00 FF 
216b4     40 E4 85 F1 | 	sub	objptr, ##34880
216b8     F2 FA 01 F6 | 	mov	result1, objptr
216bc     00 68 02 FF 
216c0     00 FA 45 F5 | 	or	result1, ##80740352
216c4     44 00 00 FF 
216c8     50 E4 05 F1 | 	add	objptr, ##34896
216cc     F2 FA 61 FC | 	wrlong	result1, objptr
216d0     44 00 00 FF 
216d4     50 E4 85 F1 | 	sub	objptr, ##34896
216d8     F2 FA 01 F6 | 	mov	result1, objptr
216dc     00 70 02 FF 
216e0     00 FA 45 F5 | 	or	result1, ##81788928
216e4     44 00 00 FF 
216e8     54 E4 05 F1 | 	add	objptr, ##34900
216ec     F2 FA 61 FC | 	wrlong	result1, objptr
216f0     44 00 00 FF 
216f4     54 E4 85 F1 | 	sub	objptr, ##34900
216f8     F2 FA 01 F6 | 	mov	result1, objptr
216fc     00 78 02 FF 
21700     00 FA 45 F5 | 	or	result1, ##82837504
21704     44 00 00 FF 
21708     58 E4 05 F1 | 	add	objptr, ##34904
2170c     F2 FA 61 FC | 	wrlong	result1, objptr
21710     44 00 00 FF 
21714     58 E4 85 F1 | 	sub	objptr, ##34904
21718     F2 FA 01 F6 | 	mov	result1, objptr
2171c     00 80 02 FF 
21720     00 FA 45 F5 | 	or	result1, ##83886080
21724     44 00 00 FF 
21728     5C E4 05 F1 | 	add	objptr, ##34908
2172c     F2 FA 61 FC | 	wrlong	result1, objptr
21730     44 00 00 FF 
21734     5C E4 85 F1 | 	sub	objptr, ##34908
21738     F2 FA 01 F6 | 	mov	result1, objptr
2173c     00 88 02 FF 
21740     00 FA 45 F5 | 	or	result1, ##84934656
21744     44 00 00 FF 
21748     60 E4 05 F1 | 	add	objptr, ##34912
2174c     F2 FA 61 FC | 	wrlong	result1, objptr
21750     44 00 00 FF 
21754     60 E4 85 F1 | 	sub	objptr, ##34912
21758     F2 FA 01 F6 | 	mov	result1, objptr
2175c     00 90 02 FF 
21760     00 FA 45 F5 | 	or	result1, ##85983232
21764     44 00 00 FF 
21768     64 E4 05 F1 | 	add	objptr, ##34916
2176c     F2 FA 61 FC | 	wrlong	result1, objptr
21770     44 00 00 FF 
21774     64 E4 85 F1 | 	sub	objptr, ##34916
21778     F2 FA 01 F6 | 	mov	result1, objptr
2177c     00 98 02 FF 
21780     00 FA 45 F5 | 	or	result1, ##87031808
21784     44 00 00 FF 
21788     68 E4 05 F1 | 	add	objptr, ##34920
2178c     F2 FA 61 FC | 	wrlong	result1, objptr
21790     44 00 00 FF 
21794     68 E4 85 F1 | 	sub	objptr, ##34920
21798     F2 FA 01 F6 | 	mov	result1, objptr
2179c     00 A0 02 FF 
217a0     00 FA 45 F5 | 	or	result1, ##88080384
217a4     44 00 00 FF 
217a8     6C E4 05 F1 | 	add	objptr, ##34924
217ac     F2 FA 61 FC | 	wrlong	result1, objptr
217b0     44 00 00 FF 
217b4     6C E4 85 F1 | 	sub	objptr, ##34924
217b8     F2 FA 01 F6 | 	mov	result1, objptr
217bc     00 A8 02 FF 
217c0     00 FA 45 F5 | 	or	result1, ##89128960
217c4     44 00 00 FF 
217c8     78 E4 05 F1 | 	add	objptr, ##34936
217cc     F2 FA 61 FC | 	wrlong	result1, objptr
217d0     44 00 00 FF 
217d4     78 E4 85 F1 | 	sub	objptr, ##34936
217d8     F2 FA 01 F6 | 	mov	result1, objptr
217dc     00 B0 02 FF 
217e0     00 FA 45 F5 | 	or	result1, ##90177536
217e4     44 00 00 FF 
217e8     70 E4 05 F1 | 	add	objptr, ##34928
217ec     F2 FA 61 FC | 	wrlong	result1, objptr
217f0     44 00 00 FF 
217f4     70 E4 85 F1 | 	sub	objptr, ##34928
217f8     F2 FA 01 F6 | 	mov	result1, objptr
217fc     00 B8 02 FF 
21800     00 FA 45 F5 | 	or	result1, ##91226112
21804     44 00 00 FF 
21808     74 E4 05 F1 | 	add	objptr, ##34932
2180c     F2 FA 61 FC | 	wrlong	result1, objptr
21810     44 00 00 FF 
21814     74 E4 85 F1 | 	sub	objptr, ##34932
21818     F2 FA 01 F6 | 	mov	result1, objptr
2181c     00 C0 02 FF 
21820     00 FA 45 F5 | 	or	result1, ##92274688
21824     44 00 00 FF 
21828     7C E4 05 F1 | 	add	objptr, ##34940
2182c     F2 FA 61 FC | 	wrlong	result1, objptr
21830     44 00 00 FF 
21834     7C E4 85 F1 | 	sub	objptr, ##34940
21838     F2 FA 01 F6 | 	mov	result1, objptr
2183c     00 C8 02 FF 
21840     00 FA 45 F5 | 	or	result1, ##93323264
21844     44 00 00 FF 
21848     24 E4 05 F1 | 	add	objptr, ##34852
2184c     F2 FA 61 FC | 	wrlong	result1, objptr
21850     44 00 00 FF 
21854     24 E4 85 F1 | 	sub	objptr, ##34852
21858     F2 FA 01 F6 | 	mov	result1, objptr
2185c     00 D0 02 FF 
21860     00 FA 45 F5 | 	or	result1, ##94371840
21864     44 00 00 FF 
21868     2C E4 05 F1 | 	add	objptr, ##34860
2186c     F2 FA 61 FC | 	wrlong	result1, objptr
21870     44 00 00 FF 
21874     2C E4 85 F1 | 	sub	objptr, ##34860
21878     F2 FA 01 F6 | 	mov	result1, objptr
2187c     00 D8 02 FF 
21880     00 FA 45 F5 | 	or	result1, ##95420416
21884     44 00 00 FF 
21888     30 E4 05 F1 | 	add	objptr, ##34864
2188c     F2 FA 61 FC | 	wrlong	result1, objptr
21890     44 00 00 FF 
21894     30 E4 85 F1 | 	sub	objptr, ##34864
21898     F2 FA 01 F6 | 	mov	result1, objptr
2189c     00 E0 02 FF 
218a0     00 FA 45 F5 | 	or	result1, ##96468992
218a4     44 00 00 FF 
218a8     80 E4 05 F1 | 	add	objptr, ##34944
218ac     F2 FA 61 FC | 	wrlong	result1, objptr
218b0     44 00 00 FF 
218b4     80 E4 85 F1 | 	sub	objptr, ##34944
218b8     F2 FA 01 F6 | 	mov	result1, objptr
218bc     00 E8 02 FF 
218c0     00 FA 45 F5 | 	or	result1, ##97517568
218c4     44 00 00 FF 
218c8     84 E4 05 F1 | 	add	objptr, ##34948
218cc     F2 FA 61 FC | 	wrlong	result1, objptr
218d0     44 00 00 FF 
218d4     84 E4 85 F1 | 	sub	objptr, ##34948
218d8     F2 FA 01 F6 | 	mov	result1, objptr
218dc     00 F0 02 FF 
218e0     00 FA 45 F5 | 	or	result1, ##98566144
218e4     44 00 00 FF 
218e8     88 E4 05 F1 | 	add	objptr, ##34952
218ec     F2 FA 61 FC | 	wrlong	result1, objptr
218f0     44 00 00 FF 
218f4     88 E4 85 F1 | 	sub	objptr, ##34952
218f8     F2 FA 01 F6 | 	mov	result1, objptr
218fc     00 F8 02 FF 
21900     00 FA 45 F5 | 	or	result1, ##99614720
21904     44 00 00 FF 
21908     34 E4 05 F1 | 	add	objptr, ##34868
2190c     F2 FA 61 FC | 	wrlong	result1, objptr
21910     44 00 00 FF 
21914     34 E4 85 F1 | 	sub	objptr, ##34868
21918     F2 FA 01 F6 | 	mov	result1, objptr
2191c     39 FA 25 F4 | 	bith	result1, #57
21920     44 00 00 FF 
21924     98 E4 05 F1 | 	add	objptr, ##34968
21928     F2 FA 61 FC | 	wrlong	result1, objptr
2192c     44 00 00 FF 
21930     98 E4 85 F1 | 	sub	objptr, ##34968
21934     F2 FA 01 F6 | 	mov	result1, objptr
21938     00 08 03 FF 
2193c     00 FA 45 F5 | 	or	result1, ##101711872
21940     44 00 00 FF 
21944     A0 E4 05 F1 | 	add	objptr, ##34976
21948     F2 FA 61 FC | 	wrlong	result1, objptr
2194c     44 00 00 FF 
21950     A0 E4 85 F1 | 	sub	objptr, ##34976
21954     F2 FA 01 F6 | 	mov	result1, objptr
21958     00 10 03 FF 
2195c     00 FA 45 F5 | 	or	result1, ##102760448
21960     44 00 00 FF 
21964     94 E4 05 F1 | 	add	objptr, ##34964
21968     F2 FA 61 FC | 	wrlong	result1, objptr
2196c     44 00 00 FF 
21970     94 E4 85 F1 | 	sub	objptr, ##34964
21974     F2 FA 01 F6 | 	mov	result1, objptr
21978     00 18 03 FF 
2197c     00 FA 45 F5 | 	or	result1, ##103809024
21980     44 00 00 FF 
21984     90 E4 05 F1 | 	add	objptr, ##34960
21988     F2 FA 61 FC | 	wrlong	result1, objptr
2198c     44 00 00 FF 
21990     90 E4 85 F1 | 	sub	objptr, ##34960
21994     F2 FA 01 F6 | 	mov	result1, objptr
21998     00 20 03 FF 
2199c     00 FA 45 F5 | 	or	result1, ##104857600
219a0     44 00 00 FF 
219a4     8C E4 05 F1 | 	add	objptr, ##34956
219a8     F2 FA 61 FC | 	wrlong	result1, objptr
219ac     44 00 00 FF 
219b0     8C E4 85 F1 | 	sub	objptr, ##34956
219b4     F2 FA 01 F6 | 	mov	result1, objptr
219b8     00 28 03 FF 
219bc     00 FA 45 F5 | 	or	result1, ##105906176
219c0     44 00 00 FF 
219c4     9C E4 05 F1 | 	add	objptr, ##34972
219c8     F2 FA 61 FC | 	wrlong	result1, objptr
219cc     44 00 00 FF 
219d0     9C E4 85 F1 | 	sub	objptr, ##34972
219d4     F2 FA 01 F6 | 	mov	result1, objptr
219d8     00 30 03 FF 
219dc     00 FA 45 F5 | 	or	result1, ##106954752
219e0     44 00 00 FF 
219e4     A4 E4 05 F1 | 	add	objptr, ##34980
219e8     F2 FA 61 FC | 	wrlong	result1, objptr
219ec     44 00 00 FF 
219f0     A4 E4 85 F1 | 	sub	objptr, ##34980
219f4     F2 FA 01 F6 | 	mov	result1, objptr
219f8     00 38 03 FF 
219fc     00 FA 45 F5 | 	or	result1, ##108003328
21a00     44 00 00 FF 
21a04     A8 E4 05 F1 | 	add	objptr, ##34984
21a08     F2 FA 61 FC | 	wrlong	result1, objptr
21a0c     44 00 00 FF 
21a10     A8 E4 85 F1 | 	sub	objptr, ##34984
21a14     F2 FA 01 F6 | 	mov	result1, objptr
21a18     00 40 03 FF 
21a1c     00 FA 45 F5 | 	or	result1, ##109051904
21a20     44 00 00 FF 
21a24     AC E4 05 F1 | 	add	objptr, ##34988
21a28     F2 FA 61 FC | 	wrlong	result1, objptr
21a2c     44 00 00 FF 
21a30     AC E4 85 F1 | 	sub	objptr, ##34988
21a34     F2 FA 01 F6 | 	mov	result1, objptr
21a38     00 48 03 FF 
21a3c     00 FA 45 F5 | 	or	result1, ##110100480
21a40     44 00 00 FF 
21a44     B4 E4 05 F1 | 	add	objptr, ##34996
21a48     F2 FA 61 FC | 	wrlong	result1, objptr
21a4c     44 00 00 FF 
21a50     B4 E4 85 F1 | 	sub	objptr, ##34996
21a54     F2 FA 01 F6 | 	mov	result1, objptr
21a58     00 50 03 FF 
21a5c     00 FA 45 F5 | 	or	result1, ##111149056
21a60     44 00 00 FF 
21a64     B8 E4 05 F1 | 	add	objptr, ##35000
21a68     F2 FA 61 FC | 	wrlong	result1, objptr
21a6c     44 00 00 FF 
21a70     B8 E4 85 F1 | 	sub	objptr, ##35000
21a74     F2 FA 01 F6 | 	mov	result1, objptr
21a78     00 58 03 FF 
21a7c     00 FA 45 F5 | 	or	result1, ##112197632
21a80     44 00 00 FF 
21a84     BC E4 05 F1 | 	add	objptr, ##35004
21a88     F2 FA 61 FC | 	wrlong	result1, objptr
21a8c     44 00 00 FF 
21a90     BC E4 85 F1 | 	sub	objptr, ##35004
21a94     F2 FA 01 F6 | 	mov	result1, objptr
21a98     00 60 03 FF 
21a9c     00 FA 45 F5 | 	or	result1, ##113246208
21aa0     44 00 00 FF 
21aa4     C0 E4 05 F1 | 	add	objptr, ##35008
21aa8     F2 FA 61 FC | 	wrlong	result1, objptr
21aac     44 00 00 FF 
21ab0     C0 E4 85 F1 | 	sub	objptr, ##35008
21ab4     F2 FA 01 F6 | 	mov	result1, objptr
21ab8     00 68 03 FF 
21abc     00 FA 45 F5 | 	or	result1, ##114294784
21ac0     44 00 00 FF 
21ac4     C4 E4 05 F1 | 	add	objptr, ##35012
21ac8     F2 FA 61 FC | 	wrlong	result1, objptr
21acc     44 00 00 FF 
21ad0     C4 E4 85 F1 | 	sub	objptr, ##35012
21ad4     F2 FA 01 F6 | 	mov	result1, objptr
21ad8     00 70 03 FF 
21adc     00 FA 45 F5 | 	or	result1, ##115343360
21ae0     44 00 00 FF 
21ae4     C8 E4 05 F1 | 	add	objptr, ##35016
21ae8     F2 FA 61 FC | 	wrlong	result1, objptr
21aec     44 00 00 FF 
21af0     C8 E4 85 F1 | 	sub	objptr, ##35016
21af4     F2 FA 01 F6 | 	mov	result1, objptr
21af8     00 08 01 FF 
21afc     00 FA 45 F5 | 	or	result1, ##34603008
21b00     44 00 00 FF 
21b04     CC E4 05 F1 | 	add	objptr, ##35020
21b08     F2 FA 61 FC | 	wrlong	result1, objptr
21b0c     44 00 00 FF 
21b10     CC E4 85 F1 | 	sub	objptr, ##35020
21b14     F2 FA 01 F6 | 	mov	result1, objptr
21b18     00 78 03 FF 
21b1c     00 FA 45 F5 | 	or	result1, ##116391936
21b20     44 00 00 FF 
21b24     D0 E4 05 F1 | 	add	objptr, ##35024
21b28     F2 FA 61 FC | 	wrlong	result1, objptr
21b2c     44 00 00 FF 
21b30     D0 E4 85 F1 | 	sub	objptr, ##35024
21b34     F2 FA 01 F6 | 	mov	result1, objptr
21b38     58 FA 25 F4 | 	bith	result1, #88
21b3c     44 00 00 FF 
21b40     B0 E4 05 F1 | 	add	objptr, ##34992
21b44     F2 FA 61 FC | 	wrlong	result1, objptr
21b48     44 00 00 FF 
21b4c     B0 E4 85 F1 | 	sub	objptr, ##34992
21b50     F2 FA 01 F6 | 	mov	result1, objptr
21b54     00 88 03 FF 
21b58     00 FA 45 F5 | 	or	result1, ##118489088
21b5c     43 00 00 FF 
21b60     A8 E4 05 F1 | 	add	objptr, ##34472
21b64     F2 FA 61 FC | 	wrlong	result1, objptr
21b68     43 00 00 FF 
21b6c     A8 E4 85 F1 | 	sub	objptr, ##34472
21b70     F2 FA 01 F6 | 	mov	result1, objptr
21b74     00 90 03 FF 
21b78     00 FA 45 F5 | 	or	result1, ##119537664
21b7c     44 00 00 FF 
21b80     D4 E4 05 F1 | 	add	objptr, ##35028
21b84     F2 FA 61 FC | 	wrlong	result1, objptr
21b88     44 00 00 FF 
21b8c     D4 E4 85 F1 | 	sub	objptr, ##35028
21b90     F2 FA 01 F6 | 	mov	result1, objptr
21b94     00 98 03 FF 
21b98     00 FA 45 F5 | 	or	result1, ##120586240
21b9c     44 00 00 FF 
21ba0     D8 E4 05 F1 | 	add	objptr, ##35032
21ba4     F2 FA 61 FC | 	wrlong	result1, objptr
21ba8     44 00 00 FF 
21bac     D8 E4 85 F1 | 	sub	objptr, ##35032
21bb0     F2 FA 01 F6 | 	mov	result1, objptr
21bb4     00 A0 03 FF 
21bb8     00 FA 45 F5 | 	or	result1, ##121634816
21bbc     44 00 00 FF 
21bc0     EC E4 05 F1 | 	add	objptr, ##35052
21bc4     F2 FA 61 FC | 	wrlong	result1, objptr
21bc8     44 00 00 FF 
21bcc     EC E4 85 F1 | 	sub	objptr, ##35052
21bd0     F2 FA 01 F6 | 	mov	result1, objptr
21bd4     00 A8 03 FF 
21bd8     00 FA 45 F5 | 	or	result1, ##122683392
21bdc     44 00 00 FF 
21be0     E8 E4 05 F1 | 	add	objptr, ##35048
21be4     F2 FA 61 FC | 	wrlong	result1, objptr
21be8     44 00 00 FF 
21bec     E8 E4 85 F1 | 	sub	objptr, ##35048
21bf0     F2 FA 01 F6 | 	mov	result1, objptr
21bf4     00 B0 03 FF 
21bf8     00 FA 45 F5 | 	or	result1, ##123731968
21bfc     44 00 00 FF 
21c00     E0 E4 05 F1 | 	add	objptr, ##35040
21c04     F2 FA 61 FC | 	wrlong	result1, objptr
21c08     44 00 00 FF 
21c0c     E0 E4 85 F1 | 	sub	objptr, ##35040
21c10     F2 FA 01 F6 | 	mov	result1, objptr
21c14     00 B8 03 FF 
21c18     00 FA 45 F5 | 	or	result1, ##124780544
21c1c     44 00 00 FF 
21c20     DC E4 05 F1 | 	add	objptr, ##35036
21c24     F2 FA 61 FC | 	wrlong	result1, objptr
21c28     44 00 00 FF 
21c2c     DC E4 85 F1 | 	sub	objptr, ##35036
21c30     F2 FA 01 F6 | 	mov	result1, objptr
21c34     77 FA 25 F4 | 	bith	result1, #119
21c38     44 00 00 FF 
21c3c     FC E4 05 F1 | 	add	objptr, ##35068
21c40     F2 FA 61 FC | 	wrlong	result1, objptr
21c44     44 00 00 FF 
21c48     FC E4 85 F1 | 	sub	objptr, ##35068
21c4c     F2 FA 01 F6 | 	mov	result1, objptr
21c50     00 C8 03 FF 
21c54     00 FA 45 F5 | 	or	result1, ##126877696
21c58     44 00 00 FF 
21c5c     F0 E4 05 F1 | 	add	objptr, ##35056
21c60     F2 FA 61 FC | 	wrlong	result1, objptr
21c64     44 00 00 FF 
21c68     F0 E4 85 F1 | 	sub	objptr, ##35056
21c6c     F2 FA 01 F6 | 	mov	result1, objptr
21c70     00 D0 03 FF 
21c74     00 FA 45 F5 | 	or	result1, ##127926272
21c78     44 00 00 FF 
21c7c     F4 E4 05 F1 | 	add	objptr, ##35060
21c80     F2 FA 61 FC | 	wrlong	result1, objptr
21c84     44 00 00 FF 
21c88     F4 E4 85 F1 | 	sub	objptr, ##35060
21c8c     F2 FA 01 F6 | 	mov	result1, objptr
21c90     00 D8 03 FF 
21c94     00 FA 45 F5 | 	or	result1, ##128974848
21c98     44 00 00 FF 
21c9c     F8 E4 05 F1 | 	add	objptr, ##35064
21ca0     F2 FA 61 FC | 	wrlong	result1, objptr
21ca4     44 00 00 FF 
21ca8     F8 E4 85 F1 | 	sub	objptr, ##35064
21cac     F2 FA 01 F6 | 	mov	result1, objptr
21cb0     96 FA 25 F4 | 	bith	result1, #150
21cb4     44 00 00 FF 
21cb8     00 E5 05 F1 | 	add	objptr, ##35072
21cbc     F2 FA 61 FC | 	wrlong	result1, objptr
21cc0     44 00 00 FF 
21cc4     00 E5 85 F1 | 	sub	objptr, ##35072
21cc8     F2 FA 01 F6 | 	mov	result1, objptr
21ccc     00 E8 03 FF 
21cd0     00 FA 45 F5 | 	or	result1, ##131072000
21cd4     44 00 00 FF 
21cd8     04 E5 05 F1 | 	add	objptr, ##35076
21cdc     F2 FA 61 FC | 	wrlong	result1, objptr
21ce0     44 00 00 FF 
21ce4     04 E5 85 F1 | 	sub	objptr, ##35076
21ce8     F2 FA 01 F6 | 	mov	result1, objptr
21cec     B5 FA 25 F4 | 	bith	result1, #181
21cf0     44 00 00 FF 
21cf4     08 E5 05 F1 | 	add	objptr, ##35080
21cf8     F2 FA 61 FC | 	wrlong	result1, objptr
21cfc     44 00 00 FF 
21d00     08 E5 85 F1 | 	sub	objptr, ##35080
21d04     F2 FA 01 F6 | 	mov	result1, objptr
21d08     D4 FA 25 F4 | 	bith	result1, #212
21d0c     44 00 00 FF 
21d10     0C E5 05 F1 | 	add	objptr, ##35084
21d14     F2 FA 61 FC | 	wrlong	result1, objptr
21d18     44 00 00 FF 
21d1c     0C E5 85 F1 | 	sub	objptr, ##35084
21d20     F2 FA 01 F6 | 	mov	result1, objptr
21d24     1B FA 25 F4 | 	bith	result1, #27
21d28     44 00 00 FF 
21d2c     10 E5 05 F1 | 	add	objptr, ##35088
21d30     F2 FA 61 FC | 	wrlong	result1, objptr
21d34     44 00 00 FF 
21d38     10 E5 85 F1 | 	sub	objptr, ##35088
21d3c     F2 FA 01 F6 | 	mov	result1, objptr
21d40     00 08 04 FF 
21d44     00 FA 45 F5 | 	or	result1, ##135266304
21d48     44 00 00 FF 
21d4c     14 E5 05 F1 | 	add	objptr, ##35092
21d50     F2 FA 61 FC | 	wrlong	result1, objptr
21d54     44 00 00 FF 
21d58     14 E5 85 F1 | 	sub	objptr, ##35092
21d5c     F2 FA 01 F6 | 	mov	result1, objptr
21d60     00 10 04 FF 
21d64     00 FA 45 F5 | 	or	result1, ##136314880
21d68     44 00 00 FF 
21d6c     1C E5 05 F1 | 	add	objptr, ##35100
21d70     F2 FA 61 FC | 	wrlong	result1, objptr
21d74     44 00 00 FF 
21d78     1C E5 85 F1 | 	sub	objptr, ##35100
21d7c     F2 FA 01 F6 | 	mov	result1, objptr
21d80     00 18 04 FF 
21d84     00 FA 45 F5 | 	or	result1, ##137363456
21d88     44 00 00 FF 
21d8c     20 E5 05 F1 | 	add	objptr, ##35104
21d90     F2 FA 61 FC | 	wrlong	result1, objptr
21d94     44 00 00 FF 
21d98     20 E5 85 F1 | 	sub	objptr, ##35104
21d9c     F2 FA 01 F6 | 	mov	result1, objptr
21da0     00 20 04 FF 
21da4     00 FA 45 F5 | 	or	result1, ##138412032
21da8     44 00 00 FF 
21dac     24 E5 05 F1 | 	add	objptr, ##35108
21db0     F2 FA 61 FC | 	wrlong	result1, objptr
21db4     44 00 00 FF 
21db8     24 E5 85 F1 | 	sub	objptr, ##35108
21dbc     F2 FA 01 F6 | 	mov	result1, objptr
21dc0     00 28 04 FF 
21dc4     00 FA 45 F5 | 	or	result1, ##139460608
21dc8     44 00 00 FF 
21dcc     18 E5 05 F1 | 	add	objptr, ##35096
21dd0     F2 FA 61 FC | 	wrlong	result1, objptr
21dd4     44 00 00 FF 
21dd8     18 E5 85 F1 | 	sub	objptr, ##35096
21ddc     F2 FA 01 F6 | 	mov	result1, objptr
21de0     00 30 04 FF 
21de4     00 FA 45 F5 | 	or	result1, ##140509184
21de8     44 00 00 FF 
21dec     28 E5 05 F1 | 	add	objptr, ##35112
21df0     F2 FA 61 FC | 	wrlong	result1, objptr
21df4     44 00 00 FF 
21df8     28 E5 85 F1 | 	sub	objptr, ##35112
21dfc     F2 FA 01 F6 | 	mov	result1, objptr
21e00     00 38 04 FF 
21e04     00 FA 45 F5 | 	or	result1, ##141557760
21e08     44 00 00 FF 
21e0c     5C E5 05 F1 | 	add	objptr, ##35164
21e10     F2 FA 61 FC | 	wrlong	result1, objptr
21e14     44 00 00 FF 
21e18     5C E5 85 F1 | 	sub	objptr, ##35164
21e1c     F2 FA 01 F6 | 	mov	result1, objptr
21e20     00 40 04 FF 
21e24     00 FA 45 F5 | 	or	result1, ##142606336
21e28     44 00 00 FF 
21e2c     54 E5 05 F1 | 	add	objptr, ##35156
21e30     F2 FA 61 FC | 	wrlong	result1, objptr
21e34     44 00 00 FF 
21e38     54 E5 85 F1 | 	sub	objptr, ##35156
21e3c     F2 FA 01 F6 | 	mov	result1, objptr
21e40     00 48 04 FF 
21e44     00 FA 45 F5 | 	or	result1, ##143654912
21e48     44 00 00 FF 
21e4c     2C E5 05 F1 | 	add	objptr, ##35116
21e50     F2 FA 61 FC | 	wrlong	result1, objptr
21e54     44 00 00 FF 
21e58     2C E5 85 F1 | 	sub	objptr, ##35116
21e5c     F2 FA 01 F6 | 	mov	result1, objptr
21e60     00 50 04 FF 
21e64     00 FA 45 F5 | 	or	result1, ##144703488
21e68     44 00 00 FF 
21e6c     30 E5 05 F1 | 	add	objptr, ##35120
21e70     F2 FA 61 FC | 	wrlong	result1, objptr
21e74     44 00 00 FF 
21e78     30 E5 85 F1 | 	sub	objptr, ##35120
21e7c     F2 FA 01 F6 | 	mov	result1, objptr
21e80     00 58 04 FF 
21e84     00 FA 45 F5 | 	or	result1, ##145752064
21e88     44 00 00 FF 
21e8c     4C E5 05 F1 | 	add	objptr, ##35148
21e90     F2 FA 61 FC | 	wrlong	result1, objptr
21e94     44 00 00 FF 
21e98     4C E5 85 F1 | 	sub	objptr, ##35148
21e9c     F2 FA 01 F6 | 	mov	result1, objptr
21ea0     00 60 04 FF 
21ea4     00 FA 45 F5 | 	or	result1, ##146800640
21ea8     44 00 00 FF 
21eac     50 E5 05 F1 | 	add	objptr, ##35152
21eb0     F2 FA 61 FC | 	wrlong	result1, objptr
21eb4     44 00 00 FF 
21eb8     50 E5 85 F1 | 	sub	objptr, ##35152
21ebc     F2 FA 01 F6 | 	mov	result1, objptr
21ec0     00 68 04 FF 
21ec4     00 FA 45 F5 | 	or	result1, ##147849216
21ec8     44 00 00 FF 
21ecc     6C E5 05 F1 | 	add	objptr, ##35180
21ed0     F2 FA 61 FC | 	wrlong	result1, objptr
21ed4     44 00 00 FF 
21ed8     6C E5 85 F1 | 	sub	objptr, ##35180
21edc     F2 FA 01 F6 | 	mov	result1, objptr
21ee0     00 70 04 FF 
21ee4     00 FA 45 F5 | 	or	result1, ##148897792
21ee8     44 00 00 FF 
21eec     68 E5 05 F1 | 	add	objptr, ##35176
21ef0     F2 FA 61 FC | 	wrlong	result1, objptr
21ef4     44 00 00 FF 
21ef8     68 E5 85 F1 | 	sub	objptr, ##35176
21efc     F2 FA 01 F6 | 	mov	result1, objptr
21f00     00 78 04 FF 
21f04     00 FA 45 F5 | 	or	result1, ##149946368
21f08     44 00 00 FF 
21f0c     78 E5 05 F1 | 	add	objptr, ##35192
21f10     F2 FA 61 FC | 	wrlong	result1, objptr
21f14     44 00 00 FF 
21f18     78 E5 85 F1 | 	sub	objptr, ##35192
21f1c     F2 FA 01 F6 | 	mov	result1, objptr
21f20     00 80 04 FF 
21f24     00 FA 45 F5 | 	or	result1, ##150994944
21f28     44 00 00 FF 
21f2c     44 E5 05 F1 | 	add	objptr, ##35140
21f30     F2 FA 61 FC | 	wrlong	result1, objptr
21f34     44 00 00 FF 
21f38     44 E5 85 F1 | 	sub	objptr, ##35140
21f3c     F2 FA 01 F6 | 	mov	result1, objptr
21f40     00 88 04 FF 
21f44     00 FA 45 F5 | 	or	result1, ##152043520
21f48     44 00 00 FF 
21f4c     74 E5 05 F1 | 	add	objptr, ##35188
21f50     F2 FA 61 FC | 	wrlong	result1, objptr
21f54     44 00 00 FF 
21f58     74 E5 85 F1 | 	sub	objptr, ##35188
21f5c     F2 FA 01 F6 | 	mov	result1, objptr
21f60     00 90 04 FF 
21f64     00 FA 45 F5 | 	or	result1, ##153092096
21f68     44 00 00 FF 
21f6c     64 E5 05 F1 | 	add	objptr, ##35172
21f70     F2 FA 61 FC | 	wrlong	result1, objptr
21f74     44 00 00 FF 
21f78     64 E5 85 F1 | 	sub	objptr, ##35172
21f7c     F2 FA 01 F6 | 	mov	result1, objptr
21f80     00 98 04 FF 
21f84     00 FA 45 F5 | 	or	result1, ##154140672
21f88     43 00 00 FF 
21f8c     14 E5 05 F1 | 	add	objptr, ##34580
21f90     F2 FA 61 FC | 	wrlong	result1, objptr
21f94     43 00 00 FF 
21f98     14 E5 85 F1 | 	sub	objptr, ##34580
21f9c     F2 FA 01 F6 | 	mov	result1, objptr
21fa0     00 A0 04 FF 
21fa4     00 FA 45 F5 | 	or	result1, ##155189248
21fa8     44 00 00 FF 
21fac     34 E5 05 F1 | 	add	objptr, ##35124
21fb0     F2 FA 61 FC | 	wrlong	result1, objptr
21fb4     44 00 00 FF 
21fb8     34 E5 85 F1 | 	sub	objptr, ##35124
21fbc     F2 FA 01 F6 | 	mov	result1, objptr
21fc0     00 08 01 FF 
21fc4     00 FA 45 F5 | 	or	result1, ##34603008
21fc8     44 00 00 FF 
21fcc     3C E5 05 F1 | 	add	objptr, ##35132
21fd0     F2 FA 61 FC | 	wrlong	result1, objptr
21fd4     44 00 00 FF 
21fd8     3C E5 85 F1 | 	sub	objptr, ##35132
21fdc     F2 FA 01 F6 | 	mov	result1, objptr
21fe0     00 A8 04 FF 
21fe4     00 FA 45 F5 | 	or	result1, ##156237824
21fe8     44 00 00 FF 
21fec     38 E5 05 F1 | 	add	objptr, ##35128
21ff0     F2 FA 61 FC | 	wrlong	result1, objptr
21ff4     44 00 00 FF 
21ff8     38 E5 85 F1 | 	sub	objptr, ##35128
21ffc     F2 FA 01 F6 | 	mov	result1, objptr
22000     00 B0 04 FF 
22004     00 FA 45 F5 | 	or	result1, ##157286400
22008     44 00 00 FF 
2200c     7C E5 05 F1 | 	add	objptr, ##35196
22010     F2 FA 61 FC | 	wrlong	result1, objptr
22014     44 00 00 FF 
22018     7C E5 85 F1 | 	sub	objptr, ##35196
2201c     F2 FA 01 F6 | 	mov	result1, objptr
22020     00 B8 04 FF 
22024     00 FA 45 F5 | 	or	result1, ##158334976
22028     44 00 00 FF 
2202c     80 E5 05 F1 | 	add	objptr, ##35200
22030     F2 FA 61 FC | 	wrlong	result1, objptr
22034     44 00 00 FF 
22038     80 E5 85 F1 | 	sub	objptr, ##35200
2203c     F2 FA 01 F6 | 	mov	result1, objptr
22040     00 C0 04 FF 
22044     00 FA 45 F5 | 	or	result1, ##159383552
22048     44 00 00 FF 
2204c     84 E5 05 F1 | 	add	objptr, ##35204
22050     F2 FA 61 FC | 	wrlong	result1, objptr
22054     44 00 00 FF 
22058     84 E5 85 F1 | 	sub	objptr, ##35204
2205c     F2 FA 01 F6 | 	mov	result1, objptr
22060     00 C8 04 FF 
22064     00 FA 45 F5 | 	or	result1, ##160432128
22068     44 00 00 FF 
2206c     88 E5 05 F1 | 	add	objptr, ##35208
22070     F2 FA 61 FC | 	wrlong	result1, objptr
22074     44 00 00 FF 
22078     88 E5 85 F1 | 	sub	objptr, ##35208
2207c     F2 FA 01 F6 | 	mov	result1, objptr
22080     00 D0 04 FF 
22084     00 FA 45 F5 | 	or	result1, ##161480704
22088     44 00 00 FF 
2208c     90 E5 05 F1 | 	add	objptr, ##35216
22090     F2 FA 61 FC | 	wrlong	result1, objptr
22094     44 00 00 FF 
22098     90 E5 85 F1 | 	sub	objptr, ##35216
2209c     F2 FA 01 F6 | 	mov	result1, objptr
220a0     00 D8 04 FF 
220a4     00 FA 45 F5 | 	or	result1, ##162529280
220a8     44 00 00 FF 
220ac     94 E5 05 F1 | 	add	objptr, ##35220
220b0     F2 FA 61 FC | 	wrlong	result1, objptr
220b4     44 00 00 FF 
220b8     94 E5 85 F1 | 	sub	objptr, ##35220
220bc     F2 FA 01 F6 | 	mov	result1, objptr
220c0     00 E0 04 FF 
220c4     00 FA 45 F5 | 	or	result1, ##163577856
220c8     44 00 00 FF 
220cc     98 E5 05 F1 | 	add	objptr, ##35224
220d0     F2 FA 61 FC | 	wrlong	result1, objptr
220d4     44 00 00 FF 
220d8     98 E5 85 F1 | 	sub	objptr, ##35224
220dc     F2 FA 01 F6 | 	mov	result1, objptr
220e0     00 E8 04 FF 
220e4     00 FA 45 F5 | 	or	result1, ##164626432
220e8     44 00 00 FF 
220ec     8C E5 05 F1 | 	add	objptr, ##35212
220f0     F2 FA 61 FC | 	wrlong	result1, objptr
220f4     44 00 00 FF 
220f8     8C E5 85 F1 | 	sub	objptr, ##35212
220fc     F2 FA 01 F6 | 	mov	result1, objptr
22100     00 F0 04 FF 
22104     00 FA 45 F5 | 	or	result1, ##165675008
22108     44 00 00 FF 
2210c     70 E5 05 F1 | 	add	objptr, ##35184
22110     F2 FA 61 FC | 	wrlong	result1, objptr
22114     44 00 00 FF 
22118     70 E5 85 F1 | 	sub	objptr, ##35184
2211c     F2 FA 01 F6 | 	mov	result1, objptr
22120     00 F8 04 FF 
22124     00 FA 45 F5 | 	or	result1, ##166723584
22128     44 00 00 FF 
2212c     60 E5 05 F1 | 	add	objptr, ##35168
22130     F2 FA 61 FC | 	wrlong	result1, objptr
22134     44 00 00 FF 
22138     60 E5 85 F1 | 	sub	objptr, ##35168
2213c                 | _init_commands_ret
2213c     2D 00 64 FD | 	ret
22140                 | 
22140                 | ' 
22140                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
22140                 | ' 
22140                 | ' sub init_audio
22140                 | _init_audio
22140     06 4A 05 F6 | 	mov	COUNT_, #6
22144     A8 00 A0 FD | 	call	#pushregs_
22148     00 C0 1F FF 
2214c     00 26 06 F6 | 	mov	local01, ##1065353216
22150                 | ' 
22150                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
22150     00 28 06 F6 | 	mov	local02, #0
22154                 | LR__2610
22154     14 2B 02 F6 | 	mov	local03, local02
22158     01 2A 66 F0 | 	shl	local03, #1
2215c     58 7F 23 FF 
22160     00 2C 06 F6 | 	mov	local04, ##1191096320
22164     14 13 52 F6 | 	abs	arg01, local02 wc
22168     1F 2E C6 C9 |  if_b	decod	local05, #31
2216c     00 2E 06 36 |  if_ae	mov	local05, #0
22170     34 70 B0 FD | 	call	#__system___float_fromuns
22174     17 FB 61 F5 | 	xor	result1, local05
22178     FD 12 02 F6 | 	mov	arg01, result1
2217c     87 24 20 FF 
22180     DB 15 06 F6 | 	mov	arg02, ##1078530011
22184     24 74 B0 FD | 	call	#__system___float_mul
22188     FD 12 02 F6 | 	mov	arg01, result1
2218c     00 00 22 FF 
22190     00 14 06 F6 | 	mov	arg02, ##1140850688
22194     18 76 B0 FD | 	call	#__system___float_div
22198     FD 12 02 F6 | 	mov	arg01, result1
2219c     6C 7D B0 FD | 	call	#__system____builtin_sinf
221a0     FD 14 02 F6 | 	mov	arg02, result1
221a4     16 13 02 F6 | 	mov	arg01, local04
221a8     00 74 B0 FD | 	call	#__system___float_mul
221ac     FD 12 02 F6 | 	mov	arg01, result1
221b0     01 14 06 F6 | 	mov	arg02, #1
221b4     BC 78 B0 FD | 	call	#__system___float_tointeger
221b8     FD 14 02 F6 | 	mov	arg02, result1
221bc     15 13 02 F6 | 	mov	arg01, local03
221c0     6C 0D B0 FD | 	call	#_psdpoke
221c4     01 28 06 F1 | 	add	local02, #1
221c8     02 00 00 FF 
221cc     00 28 56 F2 | 	cmps	local02, ##1024 wc
221d0     80 FF 9F CD |  if_b	jmp	#LR__2610
221d4                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
221d4     00 28 06 F6 | 	mov	local02, #0
221d8                 | LR__2611
221d8     14 15 02 F6 | 	mov	arg02, local02
221dc     01 14 66 F0 | 	shl	arg02, #1
221e0     0B 12 C6 F9 | 	decod	arg01, #11
221e4     0A 13 02 F1 | 	add	arg01, arg02
221e8     14 2D 02 F6 | 	mov	local04, local02
221ec     07 2C 66 F0 | 	shl	local04, #7
221f0     14 2D 82 F1 | 	sub	local04, local02
221f4     C0 FF 7F FF 
221f8     00 15 06 F6 | 	mov	arg02, ##-32512
221fc     16 15 02 F1 | 	add	arg02, local04
22200     2C 0D B0 FD | 	call	#_psdpoke
22204     09 2C C6 F9 | 	decod	local04, #9
22208     14 2D 02 F1 | 	add	local04, local02
2220c     01 2C 66 F0 | 	shl	local04, #1
22210     0B 12 C6 F9 | 	decod	arg01, #11
22214     16 13 02 F1 | 	add	arg01, local04
22218     14 2F 02 F6 | 	mov	local05, local02
2221c     07 2E 66 F0 | 	shl	local05, #7
22220     14 2F 82 F1 | 	sub	local05, local02
22224     3F 00 00 FF 
22228     00 15 06 F6 | 	mov	arg02, ##32512
2222c     17 15 82 F1 | 	sub	arg02, local05
22230     FC 0C B0 FD | 	call	#_psdpoke
22234     01 28 06 F1 | 	add	local02, #1
22238     01 00 00 FF 
2223c     00 28 56 F2 | 	cmps	local02, ##512 wc
22240     94 FF 9F CD |  if_b	jmp	#LR__2611
22244                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
22244     00 28 06 F6 | 	mov	local02, #0
22248                 | LR__2612
22248     14 2F 02 F6 | 	mov	local05, local02
2224c     01 2E 66 F0 | 	shl	local05, #1
22250     0C 12 C6 F9 | 	decod	arg01, #12
22254     17 13 02 F1 | 	add	arg01, local05
22258     14 2F 02 F6 | 	mov	local05, local02
2225c     06 2E 66 F0 | 	shl	local05, #6
22260     14 2F 82 F1 | 	sub	local05, local02
22264     C1 FF 7F FF 
22268     00 14 06 F6 | 	mov	arg02, ##-32256
2226c     17 15 02 F1 | 	add	arg02, local05
22270     BC 0C B0 FD | 	call	#_psdpoke
22274     01 28 06 F1 | 	add	local02, #1
22278     02 00 00 FF 
2227c     00 28 56 F2 | 	cmps	local02, ##1024 wc
22280     C4 FF 9F CD |  if_b	jmp	#LR__2612
22284                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
22284     00 28 06 F6 | 	mov	local02, #0
22288                 | LR__2613
22288     14 2F 02 F6 | 	mov	local05, local02
2228c     01 2E 66 F0 | 	shl	local05, #1
22290     0C 00 00 FF 
22294     00 12 06 F6 | 	mov	arg01, ##6144
22298     17 13 02 F1 | 	add	arg01, local05
2229c     C0 FF 7F FF 
222a0     A8 14 06 F6 | 	mov	arg02, ##-32600
222a4     88 0C B0 FD | 	call	#_psdpoke
222a8     01 28 06 F1 | 	add	local02, #1
222ac     80 28 56 F2 | 	cmps	local02, #128 wc
222b0     D4 FF 9F CD |  if_b	jmp	#LR__2613
222b4     80 28 06 F6 | 	mov	local02, #128
222b8                 | LR__2614
222b8     14 2F 02 F6 | 	mov	local05, local02
222bc     01 2E 66 F0 | 	shl	local05, #1
222c0     0C 00 00 FF 
222c4     00 12 06 F6 | 	mov	arg01, ##6144
222c8     17 13 02 F1 | 	add	arg01, local05
222cc     3F 00 00 FF 
222d0     58 15 06 F6 | 	mov	arg02, ##32600
222d4     58 0C B0 FD | 	call	#_psdpoke
222d8     01 28 06 F1 | 	add	local02, #1
222dc     02 00 00 FF 
222e0     00 28 16 F2 | 	cmp	local02, ##1024 wc
222e4     D0 FF 9F CD |  if_b	jmp	#LR__2614
222e8                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
222e8     00 28 06 F6 | 	mov	local02, #0
222ec                 | LR__2615
222ec     14 2F 02 F6 | 	mov	local05, local02
222f0     01 2E 66 F0 | 	shl	local05, #1
222f4     0D 12 C6 F9 | 	decod	arg01, #13
222f8     17 13 02 F1 | 	add	arg01, local05
222fc     C0 FF 7F FF 
22300     A8 14 06 F6 | 	mov	arg02, ##-32600
22304     28 0C B0 FD | 	call	#_psdpoke
22308     01 28 06 F1 | 	add	local02, #1
2230c     01 00 00 FF 
22310     00 28 56 F2 | 	cmps	local02, ##512 wc
22314     D4 FF 9F CD |  if_b	jmp	#LR__2615
22318     09 28 C6 F9 | 	decod	local02, #9
2231c                 | LR__2616
2231c     14 2F 02 F6 | 	mov	local05, local02
22320     01 2E 66 F0 | 	shl	local05, #1
22324     0D 12 C6 F9 | 	decod	arg01, #13
22328     17 13 02 F1 | 	add	arg01, local05
2232c     3F 00 00 FF 
22330     58 15 06 F6 | 	mov	arg02, ##32600
22334     F8 0B B0 FD | 	call	#_psdpoke
22338     01 28 06 F1 | 	add	local02, #1
2233c     02 00 00 FF 
22340     00 28 16 F2 | 	cmp	local02, ##1024 wc
22344     D4 FF 9F CD |  if_b	jmp	#LR__2616
22348                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
22348     00 28 06 F6 | 	mov	local02, #0
2234c                 | LR__2617
2234c     14 2F 02 F6 | 	mov	local05, local02
22350     01 2E 66 F0 | 	shl	local05, #1
22354     14 00 00 FF 
22358     00 12 06 F6 | 	mov	arg01, ##10240
2235c     17 13 02 F1 | 	add	arg01, local05
22360     C0 FF 7F FF 
22364     A8 14 06 F6 | 	mov	arg02, ##-32600
22368     C4 0B B0 FD | 	call	#_psdpoke
2236c     01 28 06 F1 | 	add	local02, #1
22370     00 29 56 F2 | 	cmps	local02, #256 wc
22374     D4 FF 9F CD |  if_b	jmp	#LR__2617
22378     00 29 06 F6 | 	mov	local02, #256
2237c                 | LR__2618
2237c     14 2F 02 F6 | 	mov	local05, local02
22380     01 2E 66 F0 | 	shl	local05, #1
22384     14 00 00 FF 
22388     00 12 06 F6 | 	mov	arg01, ##10240
2238c     17 13 02 F1 | 	add	arg01, local05
22390     3F 00 00 FF 
22394     58 15 06 F6 | 	mov	arg02, ##32600
22398     94 0B B0 FD | 	call	#_psdpoke
2239c     01 28 06 F1 | 	add	local02, #1
223a0     02 00 00 FF 
223a4     00 28 16 F2 | 	cmp	local02, ##1024 wc
223a8     D0 FF 9F CD |  if_b	jmp	#LR__2618
223ac                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
223ac     18 00 00 FF 
223b0     00 28 06 F6 | 	mov	local02, ##12288
223b4                 | LR__2619
223b4     14 13 02 F6 | 	mov	arg01, local02
223b8     00 14 06 F6 | 	mov	arg02, #0
223bc     28 0B B0 FD | 	call	#_pslpoke
223c0     04 28 06 F1 | 	add	local02, #4
223c4     77 00 00 FF 
223c8     FD 29 56 F2 | 	cmps	local02, ##61437 wc
223cc     E4 FF 9F CD |  if_b	jmp	#LR__2619
223d0                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
223d0     00 28 06 F6 | 	mov	local02, #0
223d4                 | LR__2620
223d4     14 2F 02 F6 | 	mov	local05, local02
223d8     01 2E 66 F0 | 	shl	local05, #1
223dc     78 00 00 FF 
223e0     00 2A 06 F6 | 	mov	local03, ##61440
223e4     17 2B 02 F1 | 	add	local03, local05
223e8     12 00 00 FF 
223ec     BA EA 05 F1 | 	add	ptr__dat__, ##9402
223f0     F5 12 02 F6 | 	mov	arg01, ptr__dat__
223f4     12 00 00 FF 
223f8     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
223fc     10 12 06 F1 | 	add	arg01, #16
22400     14 15 02 F6 | 	mov	arg02, local02
22404     01 14 66 F0 | 	shl	arg02, #1
22408     0A 13 02 F1 | 	add	arg01, arg02
2240c     09 15 E2 FA | 	rdword	arg02, arg01
22410     15 13 02 F6 | 	mov	arg01, local03
22414     18 0B B0 FD | 	call	#_psdpoke
22418     01 28 06 F1 | 	add	local02, #1
2241c     02 00 00 FF 
22420     00 28 56 F2 | 	cmps	local02, ##1024 wc
22424     AC FF 9F CD |  if_b	jmp	#LR__2620
22428                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
22428     00 28 06 F6 | 	mov	local02, #0
2242c                 | LR__2621
2242c     14 2F 02 F6 | 	mov	local05, local02
22430     01 2E 66 F0 | 	shl	local05, #1
22434     7C 00 00 FF 
22438     00 2A 06 F6 | 	mov	local03, ##63488
2243c     17 2B 02 F1 | 	add	local03, local05
22440     0E 00 00 FF 
22444     AA EA 05 F1 | 	add	ptr__dat__, ##7338
22448     F5 12 02 F6 | 	mov	arg01, ptr__dat__
2244c     0E 00 00 FF 
22450     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
22454     10 12 06 F1 | 	add	arg01, #16
22458     14 15 02 F6 | 	mov	arg02, local02
2245c     01 14 66 F0 | 	shl	arg02, #1
22460     0A 13 02 F1 | 	add	arg01, arg02
22464     09 15 E2 FA | 	rdword	arg02, arg01
22468     15 13 02 F6 | 	mov	arg01, local03
2246c     C0 0A B0 FD | 	call	#_psdpoke
22470     01 28 06 F1 | 	add	local02, #1
22474     02 00 00 FF 
22478     00 28 56 F2 | 	cmps	local02, ##1024 wc
2247c     AC FF 9F CD |  if_b	jmp	#LR__2621
22480                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
22480     00 28 06 F6 | 	mov	local02, #0
22484     0C 00 00 FF 
22488     D8 E4 05 F1 | 	add	objptr, ##6360
2248c     97 18 48 FB | 	callpa	#(@LR__2623-@LR__2622)>>2,fcache_load_ptr_
22490                 | LR__2622
22490     14 2F 02 F6 | 	mov	local05, local02
22494     01 2E 66 F0 | 	shl	local05, #1
22498     F2 2E 02 F1 | 	add	local05, objptr
2249c     14 2B 02 F6 | 	mov	local03, local02
224a0     08 2A 66 F0 | 	shl	local03, #8
224a4     7F 00 00 FF 
224a8     00 31 06 F6 | 	mov	local06, ##65280
224ac     15 31 82 F1 | 	sub	local06, local03
224b0     17 31 52 FC | 	wrword	local06, local05
224b4     01 28 06 F1 | 	add	local02, #1
224b8     00 29 56 F2 | 	cmps	local02, #256 wc
224bc     D0 FF 9F CD |  if_b	jmp	#LR__2622
224c0                 | LR__2623
224c0     0C 00 00 FF 
224c4     D8 E4 85 F1 | 	sub	objptr, ##6360
224c8                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
224c8     00 28 06 F6 | 	mov	local02, #0
224cc                 | LR__2624
224cc     14 2F 02 F6 | 	mov	local05, local02
224d0     01 2E 66 F0 | 	shl	local05, #1
224d4     0D 00 00 FF 
224d8     D8 E4 05 F1 | 	add	objptr, ##6872
224dc     F2 2E 02 F1 | 	add	local05, objptr
224e0     80 BF 23 FF 
224e4     00 12 06 F6 | 	mov	arg01, ##1199505408
224e8     13 15 02 F6 | 	mov	arg02, local01
224ec     0D 00 00 FF 
224f0     D8 E4 85 F1 | 	sub	objptr, ##6872
224f4     B4 70 B0 FD | 	call	#__system___float_mul
224f8     FD 12 02 F6 | 	mov	arg01, result1
224fc     01 14 06 F6 | 	mov	arg02, #1
22500     70 75 B0 FD | 	call	#__system___float_tointeger
22504     17 FB 51 FC | 	wrword	result1, local05
22508     13 13 02 F6 | 	mov	arg01, local01
2250c     CC BC 1F FF 
22510     9A 15 06 F6 | 	mov	arg02, ##1064933786
22514     94 70 B0 FD | 	call	#__system___float_mul
22518     FD 26 02 F6 | 	mov	local01, result1
2251c     01 28 06 F1 | 	add	local02, #1
22520     00 29 56 F2 | 	cmps	local02, #256 wc
22524     A4 FF 9F CD |  if_b	jmp	#LR__2624
22528     0E 00 00 FF 
2252c     D6 E4 05 F1 | 	add	objptr, ##7382
22530     F2 00 58 FC | 	wrword	#0, objptr
22534                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
22534     00 28 06 F6 | 	mov	local02, #0
22538     02 E4 05 F1 | 	add	objptr, #2
2253c     97 10 48 FB | 	callpa	#(@LR__2626-@LR__2625)>>2,fcache_load_ptr_
22540                 | LR__2625
22540     14 2F 02 F6 | 	mov	local05, local02
22544     01 2E 66 F0 | 	shl	local05, #1
22548     F2 2E 02 F1 | 	add	local05, objptr
2254c     7F 00 80 FF 
22550     17 01 5A FC | 	wrword	##65280, local05
22554     01 28 06 F1 | 	add	local02, #1
22558     FF 28 56 F2 | 	cmps	local02, #255 wc
2255c     E0 FF 9F CD |  if_b	jmp	#LR__2625
22560                 | LR__2626
22560     FE E5 05 F1 | 	add	objptr, #510
22564     F2 00 58 FC | 	wrword	#0, objptr
22568                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
22568     00 28 06 F6 | 	mov	local02, #0
2256c     02 E4 05 F1 | 	add	objptr, #2
22570     97 52 48 FB | 	callpa	#(@LR__2631-@LR__2627)>>2,fcache_load_ptr_
22574                 | LR__2627
22574     14 2F 02 F6 | 	mov	local05, local02
22578     01 2E 66 F0 | 	shl	local05, #1
2257c     F2 2E 02 F1 | 	add	local05, objptr
22580     14 31 02 F6 | 	mov	local06, local02
22584     0C 30 66 F0 | 	shl	local06, #12
22588     17 31 52 FC | 	wrword	local06, local05
2258c     01 28 06 F1 | 	add	local02, #1
22590     10 28 56 F2 | 	cmps	local02, #16 wc
22594     DC FF 9F CD |  if_b	jmp	#LR__2627
22598                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
22598     10 28 06 F6 | 	mov	local02, #16
2259c                 | LR__2628
2259c     14 2F 02 F6 | 	mov	local05, local02
225a0     01 2E 66 F0 | 	shl	local05, #1
225a4     F2 2E 02 F1 | 	add	local05, objptr
225a8     7F 00 80 FF 
225ac     17 01 5A FC | 	wrword	##65280, local05
225b0     01 28 06 F1 | 	add	local02, #1
225b4     F0 28 16 F2 | 	cmp	local02, #240 wc
225b8     E0 FF 9F CD |  if_b	jmp	#LR__2628
225bc                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
225bc     F0 28 06 F6 | 	mov	local02, #240
225c0                 | LR__2629
225c0     14 2F 02 F6 | 	mov	local05, local02
225c4     01 2E 66 F0 | 	shl	local05, #1
225c8     F2 2E 02 F1 | 	add	local05, objptr
225cc     FF 2A 06 F6 | 	mov	local03, #255
225d0     14 2B 82 F1 | 	sub	local03, local02
225d4     0C 2A 66 F0 | 	shl	local03, #12
225d8     17 2B 52 FC | 	wrword	local03, local05
225dc     01 28 06 F1 | 	add	local02, #1
225e0     00 29 16 F2 | 	cmp	local02, #256 wc
225e4     D8 FF 9F CD |  if_b	jmp	#LR__2629
225e8                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
225e8     00 28 06 F6 | 	mov	local02, #0
225ec     01 00 00 FF 
225f0     00 E4 05 F1 | 	add	objptr, ##512
225f4                 | LR__2630
225f4     14 2F 02 F6 | 	mov	local05, local02
225f8     01 2E 66 F0 | 	shl	local05, #1
225fc     F2 2E 02 F1 | 	add	local05, objptr
22600     14 31 02 F6 | 	mov	local06, local02
22604     08 30 66 F0 | 	shl	local06, #8
22608     17 31 52 FC | 	wrword	local06, local05
2260c     01 28 06 F1 | 	add	local02, #1
22610     00 29 56 F2 | 	cmps	local02, #256 wc
22614     DC FF 9F CD |  if_b	jmp	#LR__2630
22618                 | LR__2631
22618     FE E5 05 F1 | 	add	objptr, #510
2261c     F2 00 58 FC | 	wrword	#0, objptr
22620                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
22620     00 28 06 F6 | 	mov	local02, #0
22624     02 E4 05 F1 | 	add	objptr, #2
22628     97 6A 48 FB | 	callpa	#(@LR__2636-@LR__2632)>>2,fcache_load_ptr_
2262c                 | LR__2632
2262c     14 2F 02 F6 | 	mov	local05, local02
22630     01 2E 66 F0 | 	shl	local05, #1
22634     F2 2E 02 F1 | 	add	local05, objptr
22638     14 31 02 F6 | 	mov	local06, local02
2263c     04 30 66 F0 | 	shl	local06, #4
22640     14 31 02 F1 | 	add	local06, local02
22644     04 30 66 F0 | 	shl	local06, #4
22648     17 31 52 FC | 	wrword	local06, local05
2264c     01 28 06 F1 | 	add	local02, #1
22650     F0 28 56 F2 | 	cmps	local02, #240 wc
22654     D4 FF 9F CD |  if_b	jmp	#LR__2632
22658     F0 28 06 F6 | 	mov	local02, #240
2265c                 | LR__2633
2265c     14 2F 02 F6 | 	mov	local05, local02
22660     01 2E 66 F0 | 	shl	local05, #1
22664     F2 2E 02 F1 | 	add	local05, objptr
22668     FF 2A 06 F6 | 	mov	local03, #255
2266c     14 2B 82 F1 | 	sub	local03, local02
22670     0C 2A 66 F0 | 	shl	local03, #12
22674     17 2B 52 FC | 	wrword	local03, local05
22678     01 28 06 F1 | 	add	local02, #1
2267c     00 29 16 F2 | 	cmp	local02, #256 wc
22680     D8 FF 9F CD |  if_b	jmp	#LR__2633
22684                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
22684     00 28 06 F6 | 	mov	local02, #0
22688     01 00 00 FF 
2268c     00 E4 05 F1 | 	add	objptr, ##512
22690                 | LR__2634
22690     14 2F 02 F6 | 	mov	local05, local02
22694     01 2E 66 F0 | 	shl	local05, #1
22698     F2 2E 02 F1 | 	add	local05, objptr
2269c     14 31 02 F6 | 	mov	local06, local02
226a0     09 30 66 F0 | 	shl	local06, #9
226a4     17 31 52 FC | 	wrword	local06, local05
226a8     FF 2E 06 F6 | 	mov	local05, #255
226ac     14 2F 82 F1 | 	sub	local05, local02
226b0     01 2E 66 F0 | 	shl	local05, #1
226b4     F2 2E 02 F1 | 	add	local05, objptr
226b8     14 31 02 F6 | 	mov	local06, local02
226bc     09 30 66 F0 | 	shl	local06, #9
226c0     17 31 52 FC | 	wrword	local06, local05
226c4     01 28 06 F1 | 	add	local02, #1
226c8     80 28 56 F2 | 	cmps	local02, #128 wc
226cc     C0 FF 9F CD |  if_b	jmp	#LR__2634
226d0                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
226d0     00 28 06 F6 | 	mov	local02, #0
226d4     01 00 00 FF 
226d8     00 E4 05 F1 | 	add	objptr, ##512
226dc                 | LR__2635
226dc     14 2F 02 F6 | 	mov	local05, local02
226e0     01 2E 66 F0 | 	shl	local05, #1
226e4     F2 2E 02 F1 | 	add	local05, objptr
226e8     14 31 02 F6 | 	mov	local06, local02
226ec     0D 30 66 F0 | 	shl	local06, #13
226f0     17 31 52 FC | 	wrword	local06, local05
226f4     01 28 06 F1 | 	add	local02, #1
226f8     08 28 56 F2 | 	cmps	local02, #8 wc
226fc     DC FF 9F CD |  if_b	jmp	#LR__2635
22700                 | LR__2636
22700                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
22700     08 28 06 F6 | 	mov	local02, #8
22704     97 42 48 FB | 	callpa	#(@LR__2640-@LR__2637)>>2,fcache_load_ptr_
22708                 | LR__2637
22708     14 2F 02 F6 | 	mov	local05, local02
2270c     01 2E 66 F0 | 	shl	local05, #1
22710     F2 2E 02 F1 | 	add	local05, objptr
22714     14 27 02 F6 | 	mov	local01, local02
22718     08 26 86 F1 | 	sub	local01, #8
2271c     0B 26 66 F0 | 	shl	local01, #11
22720     7F 00 00 FF 
22724     00 31 06 F6 | 	mov	local06, ##65280
22728     13 31 82 F1 | 	sub	local06, local01
2272c     17 31 52 FC | 	wrword	local06, local05
22730     01 28 06 F1 | 	add	local02, #1
22734     18 28 16 F2 | 	cmp	local02, #24 wc
22738     CC FF 9F CD |  if_b	jmp	#LR__2637
2273c                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
2273c     18 28 06 F6 | 	mov	local02, #24
22740                 | LR__2638
22740     14 2F 02 F6 | 	mov	local05, local02
22744     01 2E 66 F0 | 	shl	local05, #1
22748     F2 2E 02 F1 | 	add	local05, objptr
2274c     40 00 80 FF 
22750     17 01 58 FC | 	wrword	##32768, local05
22754     01 28 06 F1 | 	add	local02, #1
22758     81 28 16 F2 | 	cmp	local02, #129 wc
2275c     E0 FF 9F CD |  if_b	jmp	#LR__2638
22760                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
22760     81 28 06 F6 | 	mov	local02, #129
22764                 | LR__2639
22764     14 2F 02 F6 | 	mov	local05, local02
22768     01 2E 66 F0 | 	shl	local05, #1
2276c     F2 2E 02 F1 | 	add	local05, objptr
22770     FF 2A 06 F6 | 	mov	local03, #255
22774     14 2B 82 F1 | 	sub	local03, local02
22778     08 2A 66 F0 | 	shl	local03, #8
2277c     17 2B 52 FC | 	wrword	local03, local05
22780     01 28 06 F1 | 	add	local02, #1
22784     00 29 16 F2 | 	cmp	local02, #256 wc
22788     D8 FF 9F CD |  if_b	jmp	#LR__2639
2278c                 | LR__2640
2278c     3E 00 00 FF 
22790     EA E5 05 F1 | 	add	objptr, ##32234
22794     F2 00 59 FC | 	wrword	#128, objptr
22798     52 00 00 FF 
2279c     C2 E4 85 F1 | 	sub	objptr, ##42178
227a0                 | ' for i=0 to 7
227a0     00 28 06 F6 | 	mov	local02, #0
227a4     97 8E 48 FB | 	callpa	#(@LR__2642-@LR__2641)>>2,fcache_load_ptr_
227a8                 | LR__2641
227a8     14 2F 02 F6 | 	mov	local05, local02
227ac     01 2E 66 F0 | 	shl	local05, #1
227b0     14 2F 02 F1 | 	add	local05, local02
227b4     03 2E 66 F0 | 	shl	local05, #3
227b8     14 00 00 FF 
227bc     38 E5 05 F1 | 	add	objptr, ##10552
227c0     F2 2E 02 F1 | 	add	local05, objptr
227c4     00 EE A1 FF 
227c8     17 01 68 FC | 	wrlong	##1138491392, local05
227cc     14 2F 02 F6 | 	mov	local05, local02
227d0     01 2E 66 F0 | 	shl	local05, #1
227d4     14 2F 02 F1 | 	add	local05, local02
227d8     03 2E 66 F0 | 	shl	local05, #3
227dc     F2 2E 02 F1 | 	add	local05, objptr
227e0     04 2E 06 F1 | 	add	local05, #4
227e4     17 29 42 FC | 	wrbyte	local02, local05
227e8     14 2F 02 F6 | 	mov	local05, local02
227ec     01 2E 66 F0 | 	shl	local05, #1
227f0     14 2F 02 F1 | 	add	local05, local02
227f4     03 2E 66 F0 | 	shl	local05, #3
227f8     F2 2E 02 F1 | 	add	local05, objptr
227fc     05 2E 06 F1 | 	add	local05, #5
22800     17 29 42 FC | 	wrbyte	local02, local05
22804     14 2F 02 F6 | 	mov	local05, local02
22808     01 2E 66 F0 | 	shl	local05, #1
2280c     14 2F 02 F1 | 	add	local05, local02
22810     03 2E 66 F0 | 	shl	local05, #3
22814     F2 2E 02 F1 | 	add	local05, objptr
22818     06 2E 06 F1 | 	add	local05, #6
2281c     17 01 58 FC | 	wrword	#0, local05
22820     14 2F 02 F6 | 	mov	local05, local02
22824     01 2E 66 F0 | 	shl	local05, #1
22828     14 2F 02 F1 | 	add	local05, local02
2282c     03 2E 66 F0 | 	shl	local05, #3
22830     F2 2E 02 F1 | 	add	local05, objptr
22834     08 2E 06 F1 | 	add	local05, #8
22838     00 C0 9F FF 
2283c     17 01 68 FC | 	wrlong	##1065353216, local05
22840     14 2F 02 F6 | 	mov	local05, local02
22844     01 2E 66 F0 | 	shl	local05, #1
22848     14 2F 02 F1 | 	add	local05, local02
2284c     03 2E 66 F0 | 	shl	local05, #3
22850     F2 2E 02 F1 | 	add	local05, objptr
22854     0C 2E 06 F1 | 	add	local05, #12
22858     00 40 A0 FF 
2285c     17 01 68 FC | 	wrlong	##1082130432, local05
22860     14 2F 02 F6 | 	mov	local05, local02
22864     01 2E 66 F0 | 	shl	local05, #1
22868     14 2F 02 F1 | 	add	local05, local02
2286c     03 2E 66 F0 | 	shl	local05, #3
22870     F2 2E 02 F1 | 	add	local05, objptr
22874     10 2E 06 F1 | 	add	local05, #16
22878     17 01 68 FC | 	wrlong	#0, local05
2287c     14 2F 02 F6 | 	mov	local05, local02
22880     01 2E 66 F0 | 	shl	local05, #1
22884     14 2F 02 F1 | 	add	local05, local02
22888     03 2E 66 F0 | 	shl	local05, #3
2288c     F2 2E 02 F1 | 	add	local05, objptr
22890     14 2E 06 F1 | 	add	local05, #20
22894     17 FF 59 FC | 	wrword	#255, local05
22898     14 2F 02 F6 | 	mov	local05, local02
2289c     01 2E 66 F0 | 	shl	local05, #1
228a0     3D 00 00 FF 
228a4     7C E5 05 F1 | 	add	objptr, ##31612
228a8     F2 2E 02 F1 | 	add	local05, objptr
228ac     17 FF 59 FC | 	wrword	#255, local05
228b0     01 28 06 F1 | 	add	local02, #1
228b4     08 28 56 F2 | 	cmps	local02, #8 wc
228b8     52 00 00 FF 
228bc     B4 E4 85 F1 | 	sub	objptr, ##42164
228c0     E4 FE 9F CD |  if_b	jmp	#LR__2641
228c4                 | LR__2642
228c4     00 6E 20 FF 
228c8     00 30 06 F6 | 	mov	local06, ##1088159744
228cc                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
228cc     03 2E 06 F6 | 	mov	local05, #3
228d0                 | LR__2643
228d0     18 13 02 F6 | 	mov	arg01, local06
228d4     CE C3 1F FF 
228d8     7D 14 06 F6 | 	mov	arg02, ##1065852029
228dc     CC 6C B0 FD | 	call	#__system___float_mul
228e0     FD 30 02 F6 | 	mov	local06, result1
228e4     FA 2F 6E FB | 	djnz	local05, #LR__2643
228e8     00 28 06 F6 | 	mov	local02, #0
228ec                 | LR__2644
228ec     14 2D 02 F6 | 	mov	local04, local02
228f0     02 2C 66 F0 | 	shl	local04, #2
228f4     14 00 00 FF 
228f8     D8 E4 05 F1 | 	add	objptr, ##10456
228fc     F2 2C 02 F1 | 	add	local04, objptr
22900     16 31 62 FC | 	wrlong	local06, local04
22904     18 13 02 F6 | 	mov	arg01, local06
22908     CE C3 1F FF 
2290c     7D 14 06 F6 | 	mov	arg02, ##1065852029
22910     14 00 00 FF 
22914     D8 E4 85 F1 | 	sub	objptr, ##10456
22918     90 6C B0 FD | 	call	#__system___float_mul
2291c     FD 30 02 F6 | 	mov	local06, result1
22920     01 28 06 F1 | 	add	local02, #1
22924     0C 28 56 F2 | 	cmps	local02, #12 wc
22928     C0 FF 9F CD |  if_b	jmp	#LR__2644
2292c     14 00 00 FF 
22930     08 E5 05 F1 | 	add	objptr, ##10504
22934     F2 50 6B FC | 	wrlong	#424, objptr
22938     04 E4 05 F1 | 	add	objptr, #4
2293c     F2 20 6B FC | 	wrlong	#400, objptr
22940     04 E4 05 F1 | 	add	objptr, #4
22944     F2 F2 6A FC | 	wrlong	#377, objptr
22948     04 E4 05 F1 | 	add	objptr, #4
2294c     F2 C8 6A FC | 	wrlong	#356, objptr
22950     04 E4 05 F1 | 	add	objptr, #4
22954     F2 A0 6A FC | 	wrlong	#336, objptr
22958     04 E4 05 F1 | 	add	objptr, #4
2295c     F2 7A 6A FC | 	wrlong	#317, objptr
22960     04 E4 05 F1 | 	add	objptr, #4
22964     F2 58 6A FC | 	wrlong	#300, objptr
22968     04 E4 05 F1 | 	add	objptr, #4
2296c     F2 36 6A FC | 	wrlong	#283, objptr
22970     04 E4 05 F1 | 	add	objptr, #4
22974     F2 16 6A FC | 	wrlong	#267, objptr
22978     04 E4 05 F1 | 	add	objptr, #4
2297c     F2 F8 69 FC | 	wrlong	#252, objptr
22980     04 E4 05 F1 | 	add	objptr, #4
22984     F2 DC 69 FC | 	wrlong	#238, objptr
22988     04 E4 05 F1 | 	add	objptr, #4
2298c     F2 C0 69 FC | 	wrlong	#224, objptr
22990     3D 00 00 FF 
22994     8E E5 05 F1 | 	add	objptr, ##31630
22998     F2 00 59 FC | 	wrword	#128, objptr
2299c     02 E4 85 F1 | 	sub	objptr, #2
229a0     F2 00 59 FC | 	wrword	#128, objptr
229a4     52 00 00 FF 
229a8     C0 E4 85 F1 | 	sub	objptr, ##42176
229ac     A7 F0 03 F6 | 	mov	ptra, fp
229b0     B2 00 A0 FD | 	call	#popregs_
229b4                 | _init_audio_ret
229b4     2D 00 64 FD | 	ret
229b8                 | 
229b8                 | ' 
229b8                 | ' '------------------- Error messages
229b8                 | ' 
229b8                 | ' sub init_error_strings
229b8                 | _init_error_strings
229b8     B7 01 00 FF 
229bc     1D 00 06 F6 | 	mov	_var01, ##@LR__5978
229c0     45 00 00 FF 
229c4     7C E4 05 F1 | 	add	objptr, ##35452
229c8     F2 00 62 FC | 	wrlong	_var01, objptr
229cc     B7 01 00 FF 
229d0     1E 00 06 F6 | 	mov	_var01, ##@LR__5979
229d4     04 E4 05 F1 | 	add	objptr, #4
229d8     F2 00 62 FC | 	wrlong	_var01, objptr
229dc     B7 01 00 FF 
229e0     42 00 06 F6 | 	mov	_var01, ##@LR__5980
229e4     04 E4 05 F1 | 	add	objptr, #4
229e8     F2 00 62 FC | 	wrlong	_var01, objptr
229ec     B7 01 00 FF 
229f0     62 00 06 F6 | 	mov	_var01, ##@LR__5981
229f4     04 E4 05 F1 | 	add	objptr, #4
229f8     F2 00 62 FC | 	wrlong	_var01, objptr
229fc     B7 01 00 FF 
22a00     7B 00 06 F6 | 	mov	_var01, ##@LR__5982
22a04     04 E4 05 F1 | 	add	objptr, #4
22a08     F2 00 62 FC | 	wrlong	_var01, objptr
22a0c     B7 01 00 FF 
22a10     96 00 06 F6 | 	mov	_var01, ##@LR__5983
22a14     04 E4 05 F1 | 	add	objptr, #4
22a18     F2 00 62 FC | 	wrlong	_var01, objptr
22a1c     B7 01 00 FF 
22a20     B7 00 06 F6 | 	mov	_var01, ##@LR__5984
22a24     04 E4 05 F1 | 	add	objptr, #4
22a28     F2 00 62 FC | 	wrlong	_var01, objptr
22a2c     B7 01 00 FF 
22a30     E4 00 06 F6 | 	mov	_var01, ##@LR__5985
22a34     04 E4 05 F1 | 	add	objptr, #4
22a38     F2 00 62 FC | 	wrlong	_var01, objptr
22a3c     B7 01 00 FF 
22a40     0E 01 06 F6 | 	mov	_var01, ##@LR__5986
22a44     04 E4 05 F1 | 	add	objptr, #4
22a48     F2 00 62 FC | 	wrlong	_var01, objptr
22a4c     B7 01 00 FF 
22a50     26 01 06 F6 | 	mov	_var01, ##@LR__5987
22a54     04 E4 05 F1 | 	add	objptr, #4
22a58     F2 00 62 FC | 	wrlong	_var01, objptr
22a5c     B7 01 00 FF 
22a60     46 01 06 F6 | 	mov	_var01, ##@LR__5988
22a64     04 E4 05 F1 | 	add	objptr, #4
22a68     F2 00 62 FC | 	wrlong	_var01, objptr
22a6c     B7 01 00 FF 
22a70     5C 01 06 F6 | 	mov	_var01, ##@LR__5989
22a74     04 E4 05 F1 | 	add	objptr, #4
22a78     F2 00 62 FC | 	wrlong	_var01, objptr
22a7c     B7 01 00 FF 
22a80     79 01 06 F6 | 	mov	_var01, ##@LR__5990
22a84     04 E4 05 F1 | 	add	objptr, #4
22a88     F2 00 62 FC | 	wrlong	_var01, objptr
22a8c     B7 01 00 FF 
22a90     9C 01 06 F6 | 	mov	_var01, ##@LR__5991
22a94     04 E4 05 F1 | 	add	objptr, #4
22a98     F2 00 62 FC | 	wrlong	_var01, objptr
22a9c     B7 01 00 FF 
22aa0     C2 01 06 F6 | 	mov	_var01, ##@LR__5992
22aa4     04 E4 05 F1 | 	add	objptr, #4
22aa8     F2 00 62 FC | 	wrlong	_var01, objptr
22aac     B7 01 00 FF 
22ab0     DD 01 06 F6 | 	mov	_var01, ##@LR__5993
22ab4     04 E4 05 F1 | 	add	objptr, #4
22ab8     F2 00 62 FC | 	wrlong	_var01, objptr
22abc     B7 01 00 FF 
22ac0     ED 01 06 F6 | 	mov	_var01, ##@LR__5994
22ac4     04 E4 05 F1 | 	add	objptr, #4
22ac8     F2 00 62 FC | 	wrlong	_var01, objptr
22acc     B7 01 00 FF 
22ad0     FC 01 06 F6 | 	mov	_var01, ##@LR__5995
22ad4     04 E4 05 F1 | 	add	objptr, #4
22ad8     F2 00 62 FC | 	wrlong	_var01, objptr
22adc     B8 01 00 FF 
22ae0     16 00 06 F6 | 	mov	_var01, ##@LR__5996
22ae4     04 E4 05 F1 | 	add	objptr, #4
22ae8     F2 00 62 FC | 	wrlong	_var01, objptr
22aec     B8 01 00 FF 
22af0     27 00 06 F6 | 	mov	_var01, ##@LR__5997
22af4     04 E4 05 F1 | 	add	objptr, #4
22af8     F2 00 62 FC | 	wrlong	_var01, objptr
22afc     B8 01 00 FF 
22b00     3E 00 06 F6 | 	mov	_var01, ##@LR__5998
22b04     04 E4 05 F1 | 	add	objptr, #4
22b08     F2 00 62 FC | 	wrlong	_var01, objptr
22b0c     B8 01 00 FF 
22b10     51 00 06 F6 | 	mov	_var01, ##@LR__5999
22b14     04 E4 05 F1 | 	add	objptr, #4
22b18     F2 00 62 FC | 	wrlong	_var01, objptr
22b1c     B8 01 00 FF 
22b20     60 00 06 F6 | 	mov	_var01, ##@LR__6000
22b24     04 E4 05 F1 | 	add	objptr, #4
22b28     F2 00 62 FC | 	wrlong	_var01, objptr
22b2c     B8 01 00 FF 
22b30     7C 00 06 F6 | 	mov	_var01, ##@LR__6001
22b34     04 E4 05 F1 | 	add	objptr, #4
22b38     F2 00 62 FC | 	wrlong	_var01, objptr
22b3c     B8 01 00 FF 
22b40     8C 00 06 F6 | 	mov	_var01, ##@LR__6002
22b44     04 E4 05 F1 | 	add	objptr, #4
22b48     F2 00 62 FC | 	wrlong	_var01, objptr
22b4c     B8 01 00 FF 
22b50     9C 00 06 F6 | 	mov	_var01, ##@LR__6003
22b54     04 E4 05 F1 | 	add	objptr, #4
22b58     F2 00 62 FC | 	wrlong	_var01, objptr
22b5c     B8 01 00 FF 
22b60     CF 00 06 F6 | 	mov	_var01, ##@LR__6004
22b64     04 E4 05 F1 | 	add	objptr, #4
22b68     F2 00 62 FC | 	wrlong	_var01, objptr
22b6c     B8 01 00 FF 
22b70     EA 00 06 F6 | 	mov	_var01, ##@LR__6005
22b74     04 E4 05 F1 | 	add	objptr, #4
22b78     F2 00 62 FC | 	wrlong	_var01, objptr
22b7c     B8 01 00 FF 
22b80     FF 00 06 F6 | 	mov	_var01, ##@LR__6006
22b84     04 E4 05 F1 | 	add	objptr, #4
22b88     F2 00 62 FC | 	wrlong	_var01, objptr
22b8c     B8 01 00 FF 
22b90     0B 01 06 F6 | 	mov	_var01, ##@LR__6007
22b94     04 E4 05 F1 | 	add	objptr, #4
22b98     F2 00 62 FC | 	wrlong	_var01, objptr
22b9c     B8 01 00 FF 
22ba0     1C 01 06 F6 | 	mov	_var01, ##@LR__6008
22ba4     04 E4 05 F1 | 	add	objptr, #4
22ba8     F2 00 62 FC | 	wrlong	_var01, objptr
22bac     B8 01 00 FF 
22bb0     2C 01 06 F6 | 	mov	_var01, ##@LR__6009
22bb4     04 E4 05 F1 | 	add	objptr, #4
22bb8     F2 00 62 FC | 	wrlong	_var01, objptr
22bbc     B8 01 00 FF 
22bc0     47 01 06 F6 | 	mov	_var01, ##@LR__6010
22bc4     04 E4 05 F1 | 	add	objptr, #4
22bc8     F2 00 62 FC | 	wrlong	_var01, objptr
22bcc     B8 01 00 FF 
22bd0     57 01 06 F6 | 	mov	_var01, ##@LR__6011
22bd4     04 E4 05 F1 | 	add	objptr, #4
22bd8     F2 00 62 FC | 	wrlong	_var01, objptr
22bdc     B8 01 00 FF 
22be0     65 01 06 F6 | 	mov	_var01, ##@LR__6012
22be4     04 E4 05 F1 | 	add	objptr, #4
22be8     F2 00 62 FC | 	wrlong	_var01, objptr
22bec     B8 01 00 FF 
22bf0     7F 01 06 F6 | 	mov	_var01, ##@LR__6013
22bf4     04 E4 05 F1 | 	add	objptr, #4
22bf8     F2 00 62 FC | 	wrlong	_var01, objptr
22bfc     B8 01 00 FF 
22c00     B2 01 06 F6 | 	mov	_var01, ##@LR__6014
22c04     04 E4 05 F1 | 	add	objptr, #4
22c08     F2 00 62 FC | 	wrlong	_var01, objptr
22c0c     B8 01 00 FF 
22c10     CA 01 06 F6 | 	mov	_var01, ##@LR__6015
22c14     04 E4 05 F1 | 	add	objptr, #4
22c18     F2 00 62 FC | 	wrlong	_var01, objptr
22c1c     B8 01 00 FF 
22c20     E5 01 06 F6 | 	mov	_var01, ##@LR__6016
22c24     04 E4 05 F1 | 	add	objptr, #4
22c28     F2 00 62 FC | 	wrlong	_var01, objptr
22c2c     B9 01 00 FF 
22c30     02 00 06 F6 | 	mov	_var01, ##@LR__6017
22c34     04 E4 05 F1 | 	add	objptr, #4
22c38     F2 00 62 FC | 	wrlong	_var01, objptr
22c3c     B9 01 00 FF 
22c40     1B 00 06 F6 | 	mov	_var01, ##@LR__6018
22c44     04 E4 05 F1 | 	add	objptr, #4
22c48     F2 00 62 FC | 	wrlong	_var01, objptr
22c4c     B9 01 00 FF 
22c50     3A 00 06 F6 | 	mov	_var01, ##@LR__6019
22c54     04 E4 05 F1 | 	add	objptr, #4
22c58     F2 00 62 FC | 	wrlong	_var01, objptr
22c5c     B9 01 00 FF 
22c60     48 00 06 F6 | 	mov	_var01, ##@LR__6020
22c64     04 E4 05 F1 | 	add	objptr, #4
22c68     F2 00 62 FC | 	wrlong	_var01, objptr
22c6c     B9 01 00 FF 
22c70     75 00 06 F6 | 	mov	_var01, ##@LR__6021
22c74     04 E4 05 F1 | 	add	objptr, #4
22c78     F2 00 62 FC | 	wrlong	_var01, objptr
22c7c     B9 01 00 FF 
22c80     82 00 06 F6 | 	mov	_var01, ##@LR__6022
22c84     04 E4 05 F1 | 	add	objptr, #4
22c88     F2 00 62 FC | 	wrlong	_var01, objptr
22c8c     B9 01 00 FF 
22c90     96 00 06 F6 | 	mov	_var01, ##@LR__6023
22c94     04 E4 05 F1 | 	add	objptr, #4
22c98     F2 00 62 FC | 	wrlong	_var01, objptr
22c9c     B9 01 00 FF 
22ca0     BA 00 06 F6 | 	mov	_var01, ##@LR__6024
22ca4     04 E4 05 F1 | 	add	objptr, #4
22ca8     F2 00 62 FC | 	wrlong	_var01, objptr
22cac     B9 01 00 FF 
22cb0     D1 00 06 F6 | 	mov	_var01, ##@LR__6025
22cb4     04 E4 05 F1 | 	add	objptr, #4
22cb8     F2 00 62 FC | 	wrlong	_var01, objptr
22cbc     B9 01 00 FF 
22cc0     E4 00 06 F6 | 	mov	_var01, ##@LR__6026
22cc4     04 E4 05 F1 | 	add	objptr, #4
22cc8     F2 00 62 FC | 	wrlong	_var01, objptr
22ccc     B9 01 00 FF 
22cd0     FB 00 06 F6 | 	mov	_var01, ##@LR__6027
22cd4     04 E4 05 F1 | 	add	objptr, #4
22cd8     F2 00 62 FC | 	wrlong	_var01, objptr
22cdc     B9 01 00 FF 
22ce0     14 01 06 F6 | 	mov	_var01, ##@LR__6028
22ce4     04 E4 05 F1 | 	add	objptr, #4
22ce8     F2 00 62 FC | 	wrlong	_var01, objptr
22cec     B9 01 00 FF 
22cf0     36 01 06 F6 | 	mov	_var01, ##@LR__6029
22cf4     04 E4 05 F1 | 	add	objptr, #4
22cf8     F2 00 62 FC | 	wrlong	_var01, objptr
22cfc     B9 01 00 FF 
22d00     49 01 06 F6 | 	mov	_var01, ##@LR__6030
22d04     04 E4 05 F1 | 	add	objptr, #4
22d08     F2 00 62 FC | 	wrlong	_var01, objptr
22d0c     B9 01 00 FF 
22d10     59 01 06 F6 | 	mov	_var01, ##@LR__6031
22d14     04 E4 05 F1 | 	add	objptr, #4
22d18     F2 00 62 FC | 	wrlong	_var01, objptr
22d1c     B9 01 00 FF 
22d20     71 01 06 F6 | 	mov	_var01, ##@LR__6032
22d24     04 E4 05 F1 | 	add	objptr, #4
22d28     F2 00 62 FC | 	wrlong	_var01, objptr
22d2c     B9 01 00 FF 
22d30     88 01 06 F6 | 	mov	_var01, ##@LR__6033
22d34     04 E4 05 F1 | 	add	objptr, #4
22d38     F2 00 62 FC | 	wrlong	_var01, objptr
22d3c     45 00 00 FF 
22d40     58 E5 85 F1 | 	sub	objptr, ##35672
22d44                 | _init_error_strings_ret
22d44     2D 00 64 FD | 	ret
22d48                 | 
22d48                 | '         
22d48                 | ' sub printerror(err as integer, linenum=0 as integer)
22d48                 | _printerror
22d48     02 4A 05 F6 | 	mov	COUNT_, #2
22d4c     A8 00 A0 FD | 	call	#pushregs_
22d50     09 27 02 F6 | 	mov	local01, arg01
22d54     0A 29 02 F6 | 	mov	local02, arg02
22d58     B9 01 00 FF 
22d5c     95 13 06 F6 | 	mov	arg01, ##@LR__6034
22d60     0C 21 B0 FD | 	call	#_hg010b_spin2_write
22d64     13 13 02 F6 | 	mov	arg01, local01
22d68     A8 26 B0 FD | 	call	#_hg010b_spin2_inttostr
22d6c     FD 12 02 F6 | 	mov	arg01, result1
22d70     FC 20 B0 FD | 	call	#_hg010b_spin2_write
22d74     B9 01 00 FF 
22d78     9C 13 06 F6 | 	mov	arg01, ##@LR__6035
22d7c     F0 20 B0 FD | 	call	#_hg010b_spin2_write
22d80     02 26 66 F0 | 	shl	local01, #2
22d84     45 00 00 FF 
22d88     7C E4 05 F1 | 	add	objptr, ##35452
22d8c     F2 26 02 F1 | 	add	local01, objptr
22d90     13 13 02 FB | 	rdlong	arg01, local01
22d94     45 00 00 FF 
22d98     7C E4 85 F1 | 	sub	objptr, ##35452
22d9c     D0 20 B0 FD | 	call	#_hg010b_spin2_write
22da0                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
22da0                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
22da0     01 28 56 F2 | 	cmps	local02, #1 wc
22da4     24 00 90 CD |  if_b	jmp	#LR__2650
22da8     B9 01 00 FF 
22dac     A0 13 06 F6 | 	mov	arg01, ##@LR__6036
22db0     BC 20 B0 FD | 	call	#_hg010b_spin2_write
22db4     14 13 02 F6 | 	mov	arg01, local02
22db8     58 26 B0 FD | 	call	#_hg010b_spin2_inttostr
22dbc     FD 12 02 F6 | 	mov	arg01, result1
22dc0                 | ' 
22dc0                 | ' write(text)
22dc0     AC 20 B0 FD | 	call	#_hg010b_spin2_write
22dc4                 | ' crlf
22dc4     A8 25 B0 FD | 	call	#_hg010b_spin2_crlf
22dc8     10 00 90 FD | 	jmp	#LR__2651
22dcc                 | LR__2650
22dcc     B9 01 00 FF 
22dd0     AA 13 06 F6 | 	mov	arg01, ##@LR__6037
22dd4                 | ' 
22dd4                 | ' write(text)
22dd4     98 20 B0 FD | 	call	#_hg010b_spin2_write
22dd8                 | ' crlf
22dd8     94 25 B0 FD | 	call	#_hg010b_spin2_crlf
22ddc                 | LR__2651
22ddc     A7 F0 03 F6 | 	mov	ptra, fp
22de0     B2 00 A0 FD | 	call	#popregs_
22de4                 | _printerror_ret
22de4     2D 00 64 FD | 	ret
22de8                 | 
22de8                 | ' 
22de8                 | ' '' ------------------------------- Hardware start/stop/initialization 
22de8                 | ' 
22de8                 | ' sub startpsram
22de8                 | _startpsram
22de8     00 12 06 F6 | 	mov	arg01, #0
22dec     0A 14 C6 F9 | 	decod	arg02, #10
22df0     0B 16 06 F6 | 	mov	arg03, #11
22df4     07 18 06 F6 | 	mov	arg04, #7
22df8     0B 00 00 FF 
22dfc     CC E4 05 F1 | 	add	objptr, ##5836
22e00     7C 2A B0 FD | 	call	#_psram_spin2_startx
22e04     2B 00 00 FF 
22e08     3C E5 05 F1 | 	add	objptr, ##22332
22e0c     F2 FA 61 FC | 	wrlong	result1, objptr
22e10                 | '     return $7FF00 + cog*12
22e10     0C E4 05 F1 | 	add	objptr, #12
22e14     FF 03 80 FF 
22e18     F2 00 6A FC | 	wrlong	##524032, objptr
22e1c     37 00 00 FF 
22e20     14 E4 85 F1 | 	sub	objptr, ##28180
22e24                 | _startpsram_ret
22e24     2D 00 64 FD | 	ret
22e28                 | 
22e28                 | ' 
22e28                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
22e28                 | _startvideo
22e28     01 4A 05 F6 | 	mov	COUNT_, #1
22e2c     A8 00 A0 FD | 	call	#pushregs_
22e30     37 00 00 FF 
22e34     14 E4 05 F1 | 	add	objptr, ##28180
22e38     F2 18 02 FB | 	rdlong	arg04, objptr
22e3c     37 00 00 FF 
22e40     14 E4 85 F1 | 	sub	objptr, ##28180
22e44     0A 13 02 F6 | 	mov	arg01, arg02
22e48     0C 15 02 F6 | 	mov	arg02, arg04
22e4c     18 08 B0 FD | 	call	#_hg010b_spin2_start
22e50     37 00 00 FF 
22e54     00 E4 05 F1 | 	add	objptr, ##28160
22e58     F2 FA 61 FC | 	wrlong	result1, objptr
22e5c                 | ' 
22e5c                 | ' videocog=v.start(pin,mbox)
22e5c                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
22e5c     00 26 06 F6 | 	mov	local01, #0
22e60     2B 00 00 FF 
22e64     34 E5 85 F1 | 	sub	objptr, ##22324
22e68                 | LR__2660
22e68     13 13 02 F6 | 	mov	arg01, local01
22e6c     00 28 00 FF 
22e70     00 14 06 F6 | 	mov	arg02, ##5242880
22e74     60 2E B0 FD | 	call	#_psram_spin2_setQos
22e78     01 26 06 F1 | 	add	local01, #1
22e7c     08 26 56 F2 | 	cmps	local01, #8 wc
22e80     E4 FF 9F CD |  if_b	jmp	#LR__2660
22e84     2B 00 00 FF 
22e88     34 E5 05 F1 | 	add	objptr, ##22324
22e8c     F2 12 02 FB | 	rdlong	arg01, objptr
22e90     7A 00 02 FF 
22e94     00 14 06 F6 | 	mov	arg02, ##67171328
22e98     2B 00 00 FF 
22e9c     34 E5 85 F1 | 	sub	objptr, ##22324
22ea0     34 2E B0 FD | 	call	#_psram_spin2_setQos
22ea4     0B 00 00 FF 
22ea8     CC E4 85 F1 | 	sub	objptr, ##5836
22eac                 | ' psram.setQoS(videocog, $0400f400) 
22eac                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
22eac     F2 14 02 F6 | 	mov	arg02, objptr
22eb0     00 00 05 FF 
22eb4     00 14 46 F5 | 	or	arg02, ##167772160
22eb8     00 16 06 F6 | 	mov	arg03, #0
22ebc     00 18 06 F6 | 	mov	arg04, #0
22ec0     00 12 06 F6 | 	mov	arg01, #0
22ec4     14 43 B0 FD | 	call	#__system___basic_open
22ec8                 | ' return videocog
22ec8     37 00 00 FF 
22ecc     00 E4 05 F1 | 	add	objptr, ##28160
22ed0     F2 FA 01 FB | 	rdlong	result1, objptr
22ed4     37 00 00 FF 
22ed8     00 E4 85 F1 | 	sub	objptr, ##28160
22edc     A7 F0 03 F6 | 	mov	ptra, fp
22ee0     B2 00 A0 FD | 	call	#popregs_
22ee4                 | _startvideo_ret
22ee4     2D 00 64 FD | 	ret
22ee8                 | 
22ee8                 | ' 
22ee8                 | ' 
22ee8                 | ' 
22ee8                 | ' '' ------------------------------- Convenient psram peek/poke
22ee8                 | ' 
22ee8                 | ' sub pslpoke(addr as ulong,value as ulong)
22ee8                 | _pslpoke
22ee8     00 4A 05 F6 | 	mov	COUNT_, #0
22eec     A8 00 A0 FD | 	call	#pushregs_
22ef0     08 F0 07 F1 | 	add	ptra, #8
22ef4     A7 12 62 FC | 	wrlong	arg01, fp
22ef8     04 4E 05 F1 | 	add	fp, #4
22efc     A7 14 62 FC | 	wrlong	arg02, fp
22f00     A7 12 02 F6 | 	mov	arg01, fp
22f04     04 4E 85 F1 | 	sub	fp, #4
22f08     A7 14 02 FB | 	rdlong	arg02, fp
22f0c     04 16 06 F6 | 	mov	arg03, #4
22f10     0B 00 00 FF 
22f14     CC E4 05 F1 | 	add	objptr, ##5836
22f18     2C 2C B0 FD | 	call	#_psram_spin2_write
22f1c     0B 00 00 FF 
22f20     CC E4 85 F1 | 	sub	objptr, ##5836
22f24     A7 F0 03 F6 | 	mov	ptra, fp
22f28     B2 00 A0 FD | 	call	#popregs_
22f2c                 | _pslpoke_ret
22f2c     2D 00 64 FD | 	ret
22f30                 | 
22f30                 | ' 
22f30                 | ' sub psdpoke(addr as ulong,value as ulong)
22f30                 | _psdpoke
22f30     00 4A 05 F6 | 	mov	COUNT_, #0
22f34     A8 00 A0 FD | 	call	#pushregs_
22f38     08 F0 07 F1 | 	add	ptra, #8
22f3c     A7 12 62 FC | 	wrlong	arg01, fp
22f40     04 4E 05 F1 | 	add	fp, #4
22f44     A7 14 62 FC | 	wrlong	arg02, fp
22f48     A7 12 02 F6 | 	mov	arg01, fp
22f4c     04 4E 85 F1 | 	sub	fp, #4
22f50     A7 14 02 FB | 	rdlong	arg02, fp
22f54     02 16 06 F6 | 	mov	arg03, #2
22f58     0B 00 00 FF 
22f5c     CC E4 05 F1 | 	add	objptr, ##5836
22f60     E4 2B B0 FD | 	call	#_psram_spin2_write
22f64     0B 00 00 FF 
22f68     CC E4 85 F1 | 	sub	objptr, ##5836
22f6c     A7 F0 03 F6 | 	mov	ptra, fp
22f70     B2 00 A0 FD | 	call	#popregs_
22f74                 | _psdpoke_ret
22f74     2D 00 64 FD | 	ret
22f78                 | 
22f78                 | ' 
22f78                 | ' sub pspoke(addr as ulong,value as ulong)
22f78                 | _pspoke
22f78     00 4A 05 F6 | 	mov	COUNT_, #0
22f7c     A8 00 A0 FD | 	call	#pushregs_
22f80     08 F0 07 F1 | 	add	ptra, #8
22f84     A7 12 62 FC | 	wrlong	arg01, fp
22f88     04 4E 05 F1 | 	add	fp, #4
22f8c     A7 14 62 FC | 	wrlong	arg02, fp
22f90     A7 12 02 F6 | 	mov	arg01, fp
22f94     04 4E 85 F1 | 	sub	fp, #4
22f98     A7 14 02 FB | 	rdlong	arg02, fp
22f9c     01 16 06 F6 | 	mov	arg03, #1
22fa0     0B 00 00 FF 
22fa4     CC E4 05 F1 | 	add	objptr, ##5836
22fa8     9C 2B B0 FD | 	call	#_psram_spin2_write
22fac     0B 00 00 FF 
22fb0     CC E4 85 F1 | 	sub	objptr, ##5836
22fb4     A7 F0 03 F6 | 	mov	ptra, fp
22fb8     B2 00 A0 FD | 	call	#popregs_
22fbc                 | _pspoke_ret
22fbc     2D 00 64 FD | 	ret
22fc0                 | 
22fc0                 | ' 
22fc0                 | ' function pspeek(adr as ulong) as ubyte
22fc0                 | _pspeek
22fc0     00 4A 05 F6 | 	mov	COUNT_, #0
22fc4     A8 00 A0 FD | 	call	#pushregs_
22fc8     0C F0 07 F1 | 	add	ptra, #12
22fcc     04 4E 05 F1 | 	add	fp, #4
22fd0     A7 12 62 FC | 	wrlong	arg01, fp
22fd4     04 4E 05 F1 | 	add	fp, #4
22fd8     A7 12 02 F6 | 	mov	arg01, fp
22fdc     04 4E 85 F1 | 	sub	fp, #4
22fe0     A7 14 02 FB | 	rdlong	arg02, fp
22fe4     04 4E 85 F1 | 	sub	fp, #4
22fe8     01 16 06 F6 | 	mov	arg03, #1
22fec     0B 00 00 FF 
22ff0     CC E4 05 F1 | 	add	objptr, ##5836
22ff4     B4 2A B0 FD | 	call	#_psram_spin2_read1
22ff8     0B 00 00 FF 
22ffc     CC E4 85 F1 | 	sub	objptr, ##5836
23000                 | ' psram.read1(varptr(res),adr,1)
23000                 | ' return res
23000     08 4E 05 F1 | 	add	fp, #8
23004     A7 FA C1 FA | 	rdbyte	result1, fp
23008     08 4E 85 F1 | 	sub	fp, #8
2300c     A7 F0 03 F6 | 	mov	ptra, fp
23010     B2 00 A0 FD | 	call	#popregs_
23014                 | _pspeek_ret
23014     2D 00 64 FD | 	ret
23018                 | 
23018                 | ' 
23018                 | ' function pslpeek(adr as ulong) as ulong
23018                 | _pslpeek
23018     00 4A 05 F6 | 	mov	COUNT_, #0
2301c     A8 00 A0 FD | 	call	#pushregs_
23020     0C F0 07 F1 | 	add	ptra, #12
23024     04 4E 05 F1 | 	add	fp, #4
23028     A7 12 62 FC | 	wrlong	arg01, fp
2302c     04 4E 05 F1 | 	add	fp, #4
23030     A7 12 02 F6 | 	mov	arg01, fp
23034     04 4E 85 F1 | 	sub	fp, #4
23038     A7 14 02 FB | 	rdlong	arg02, fp
2303c     04 4E 85 F1 | 	sub	fp, #4
23040     04 16 06 F6 | 	mov	arg03, #4
23044     0B 00 00 FF 
23048     CC E4 05 F1 | 	add	objptr, ##5836
2304c     5C 2A B0 FD | 	call	#_psram_spin2_read1
23050     0B 00 00 FF 
23054     CC E4 85 F1 | 	sub	objptr, ##5836
23058                 | ' psram.read1(varptr(res),adr,4)
23058                 | ' return res
23058     08 4E 05 F1 | 	add	fp, #8
2305c     A7 FA 01 FB | 	rdlong	result1, fp
23060     08 4E 85 F1 | 	sub	fp, #8
23064     A7 F0 03 F6 | 	mov	ptra, fp
23068     B2 00 A0 FD | 	call	#popregs_
2306c                 | _pslpeek_ret
2306c     2D 00 64 FD | 	ret
23070                 | 
23070                 | ' 
23070                 | ' function psdpeek(adr as ulong) as ulong
23070                 | _psdpeek
23070     00 4A 05 F6 | 	mov	COUNT_, #0
23074     A8 00 A0 FD | 	call	#pushregs_
23078     0C F0 07 F1 | 	add	ptra, #12
2307c     04 4E 05 F1 | 	add	fp, #4
23080     A7 12 62 FC | 	wrlong	arg01, fp
23084     04 4E 05 F1 | 	add	fp, #4
23088     A7 12 02 F6 | 	mov	arg01, fp
2308c     04 4E 85 F1 | 	sub	fp, #4
23090     A7 14 02 FB | 	rdlong	arg02, fp
23094     04 4E 85 F1 | 	sub	fp, #4
23098     02 16 06 F6 | 	mov	arg03, #2
2309c     0B 00 00 FF 
230a0     CC E4 05 F1 | 	add	objptr, ##5836
230a4     04 2A B0 FD | 	call	#_psram_spin2_read1
230a8     0B 00 00 FF 
230ac     CC E4 85 F1 | 	sub	objptr, ##5836
230b0                 | ' psram.read1(varptr(res),adr,2)
230b0                 | ' return res
230b0     08 4E 05 F1 | 	add	fp, #8
230b4     A7 FA E1 FA | 	rdword	result1, fp
230b8     08 4E 85 F1 | 	sub	fp, #8
230bc     A7 F0 03 F6 | 	mov	ptra, fp
230c0     B2 00 A0 FD | 	call	#popregs_
230c4                 | _psdpeek_ret
230c4     2D 00 64 FD | 	ret
230c8                 | 
230c8                 | ' 
230c8                 | ' '' ------------------------------- USB keyboard scan to char translator
230c8                 | ' 
230c8                 | ' function scantochar(key)
230c8                 | _scantochar
230c8                 | ' 
230c8                 | ' select case (key shr 8) and 255
230c8     09 01 02 F6 | 	mov	_var01, arg01
230cc     08 00 C6 F0 | 	sar	_var01, #8
230d0     FF 00 0E F5 | 	and	_var01, #255 wz
230d4     24 00 90 AD |  if_e	jmp	#LR__2670
230d8     02 00 0E F2 | 	cmp	_var01, #2 wz
230dc     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
230e0     30 00 90 AD |  if_e	jmp	#LR__2671
230e4     40 00 0E F2 | 	cmp	_var01, #64 wz
230e8     44 00 90 AD |  if_e	jmp	#LR__2672
230ec     42 00 0E F2 | 	cmp	_var01, #66 wz
230f0     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
230f4     70 00 90 5D |  if_ne	jmp	#LR__2674
230f8     50 00 90 FD | 	jmp	#LR__2673
230fc                 | LR__2670
230fc     09 FB 01 F6 | 	mov	result1, arg01
23100     7F FA 05 F5 | 	and	result1, #127
23104     02 FA 65 F0 | 	shl	result1, #2
23108     F5 FA 01 F1 | 	add	result1, ptr__dat__
2310c     FD FA C1 FA | 	rdbyte	result1, result1
23110     54 00 90 FD | 	jmp	#_scantochar_ret
23114                 | LR__2671
23114     09 FB 01 F6 | 	mov	result1, arg01
23118     7F FA 05 F5 | 	and	result1, #127
2311c     02 FA 65 F0 | 	shl	result1, #2
23120     01 FA 05 F1 | 	add	result1, #1
23124     F5 FA 01 F1 | 	add	result1, ptr__dat__
23128     FD FA C1 FA | 	rdbyte	result1, result1
2312c     38 00 90 FD | 	jmp	#_scantochar_ret
23130                 | LR__2672
23130     09 FB 01 F6 | 	mov	result1, arg01
23134     7F FA 05 F5 | 	and	result1, #127
23138     02 FA 65 F0 | 	shl	result1, #2
2313c     02 FA 05 F1 | 	add	result1, #2
23140     F5 FA 01 F1 | 	add	result1, ptr__dat__
23144     FD FA C1 FA | 	rdbyte	result1, result1
23148     1C 00 90 FD | 	jmp	#_scantochar_ret
2314c                 | LR__2673
2314c     09 FB 01 F6 | 	mov	result1, arg01
23150     7F FA 05 F5 | 	and	result1, #127
23154     02 FA 65 F0 | 	shl	result1, #2
23158     03 FA 05 F1 | 	add	result1, #3
2315c     F5 FA 01 F1 | 	add	result1, ptr__dat__
23160     FD FA C1 FA | 	rdbyte	result1, result1
23164     00 00 90 FD | 	jmp	#_scantochar_ret
23168                 | LR__2674
23168                 | _scantochar_ret
23168     2D 00 64 FD | 	ret
2316c                 | 
2316c                 | _program
2316c     01 4A 05 F6 | 	mov	COUNT_, #1
23170     A8 00 A0 FD | 	call	#pushregs_
23174     70 FC BF FD | 	call	#_startpsram
23178     40 12 06 F6 | 	mov	arg01, #64
2317c     00 14 06 F6 | 	mov	arg02, #0
23180     00 16 06 F6 | 	mov	arg03, #0
23184     A0 FC BF FD | 	call	#_startvideo
23188     37 00 00 FF 
2318c     14 E4 05 F1 | 	add	objptr, ##28180
23190     F2 12 02 FB | 	rdlong	arg01, objptr
23194     00 14 06 F6 | 	mov	arg02, #0
23198     FB 03 00 FF 
2319c     00 17 06 F6 | 	mov	arg03, ##521984
231a0     2B 00 00 FF 
231a4     48 E5 85 F1 | 	sub	objptr, ##22344
231a8     24 2F B0 FD | 	call	#_audio096_spin2_start
231ac     FE 16 02 F6 | 	mov	arg03, result2
231b0     2B 00 00 FF 
231b4     30 E5 05 F1 | 	add	objptr, ##22320
231b8     F2 FA 61 FC | 	wrlong	result1, objptr
231bc     14 E4 05 F1 | 	add	objptr, #20
231c0     F2 16 62 FC | 	wrlong	arg03, objptr
231c4     37 00 00 FF 
231c8     10 E4 85 F1 | 	sub	objptr, ##28176
231cc     32 12 06 F6 | 	mov	arg01, #50
231d0     54 38 B0 FD | 	call	#__system___waitms
231d4     37 00 00 FF 
231d8     10 E4 05 F1 | 	add	objptr, ##28176
231dc     F2 12 02 FB | 	rdlong	arg01, objptr
231e0     37 00 00 FF 
231e4     10 E4 85 F1 | 	sub	objptr, ##28176
231e8     14 12 06 F1 | 	add	arg01, #20
231ec     20 00 80 FF 
231f0     09 01 58 FC | 	wrword	##16384, arg01
231f4     E8 2B B0 FD | 	call	#_usbnew_spin2_start
231f8     37 00 00 FF 
231fc     04 E4 05 F1 | 	add	objptr, ##28164
23200     F2 FA 61 FC | 	wrlong	result1, objptr
23204                 | '   mouse_limits[0] := xlim
23204     0F 00 00 FF 
23208     B8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7864
2320c     01 00 80 FF 
23210     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
23214                 | '   mouse_limits[1] := ylim
23214     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
23218     01 00 80 FF 
2321c     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
23220     36 00 00 FF 
23224     F3 E4 85 F1 | 	sub	objptr, ##27891
23228     F2 12 02 F6 | 	mov	arg01, objptr
2322c     11 E5 85 F1 | 	sub	objptr, #273
23230     C4 12 06 F1 | 	add	arg01, #196
23234                 | '   mouse_outptr := ptr
23234     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
23238     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
2323c     0F 00 00 FF 
23240     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
23244     16 00 00 FF 
23248     CA EA 05 F1 | 	add	ptr__dat__, ##11466
2324c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
23250     16 00 00 FF 
23254     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
23258     10 12 06 F6 | 	mov	arg01, #16
2325c     A0 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
23260     10 12 06 F6 | 	mov	arg01, #16
23264     20 14 06 F6 | 	mov	arg02, #32
23268     20 16 06 F6 | 	mov	arg03, #32
2326c     20 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
23270     09 12 C6 F9 | 	decod	arg01, #9
23274     2C 15 06 F6 | 	mov	arg02, #300
23278     BC 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
2327c     F2 16 02 F6 | 	mov	arg03, objptr
23280     50 00 00 FF 
23284     44 E5 05 F1 | 	add	objptr, ##41284
23288     F2 14 02 F6 | 	mov	arg02, objptr
2328c     0A 17 62 FC | 	wrlong	arg03, arg02
23290     04 14 06 F1 | 	add	arg02, #4
23294     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
23298     EF 14 02 F6 | 	mov	arg02, entryptr__
2329c     1E FA 05 F6 | 	mov	result1, #30
232a0     28 E4 61 FD | 	setq	objptr
232a4     0A FB F1 FC | 	coginit	result1, arg02 wc
232a8     01 FA 65 C6 |  if_b	neg	result1, #1
232ac     04 E4 85 F1 | 	sub	objptr, #4
232b0     F2 FA 61 FC | 	wrlong	result1, objptr
232b4     01 00 00 FF 
232b8     54 E5 05 F1 | 	add	objptr, ##852
232bc     F2 00 68 FC | 	wrlong	#0, objptr
232c0     1B 00 00 FF 
232c4     60 E4 85 F1 | 	sub	objptr, ##13920
232c8     F2 04 68 FC | 	wrlong	#2, objptr
232cc     04 E4 05 F1 | 	add	objptr, #4
232d0     F2 26 69 FC | 	wrlong	#147, objptr
232d4     04 E4 05 F1 | 	add	objptr, #4
232d8     F2 34 69 FC | 	wrlong	#154, objptr
232dc     04 E4 05 F1 | 	add	objptr, #4
232e0     F2 08 68 FC | 	wrlong	#4, objptr
232e4     04 E4 85 F1 | 	sub	objptr, #4
232e8     F2 16 02 FB | 	rdlong	arg03, objptr
232ec     14 E4 85 F1 | 	sub	objptr, #20
232f0     F2 16 62 FC | 	wrlong	arg03, objptr
232f4     04 E4 05 F1 | 	add	objptr, #4
232f8     F2 00 68 FC | 	wrlong	#0, objptr
232fc     04 E4 05 F1 | 	add	objptr, #4
23300     F2 00 68 FC | 	wrlong	#0, objptr
23304     19 00 00 FF 
23308     0C E5 05 F1 | 	add	objptr, ##13068
2330c     F2 02 68 FC | 	wrlong	#1, objptr
23310     01 00 00 FF 
23314     60 E5 05 F1 | 	add	objptr, ##864
23318     F2 00 68 FC | 	wrlong	#0, objptr
2331c     01 00 00 FF 
23320     00 EA 05 F1 | 	add	ptr__dat__, ##512
23324     08 E4 05 F1 | 	add	objptr, #8
23328     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
2332c     04 E4 85 F1 | 	sub	objptr, #4
23330     03 00 80 FF 
23334     F2 3C 69 FC | 	wrlong	##1694, objptr
23338     0D 00 00 FF 
2333c     3C E4 85 F1 | 	sub	objptr, ##6716
23340     F2 18 68 FC | 	wrlong	#12, objptr
23344     45 00 00 FF 
23348     64 E4 85 F1 | 	sub	objptr, ##35428
2334c     01 00 00 FF 
23350     00 EA 85 F1 | 	sub	ptr__dat__, ##512
23354     C8 D8 BF FD | 	call	#_init_commands
23358     5C F6 BF FD | 	call	#_init_error_strings
2335c     E0 ED BF FD | 	call	#_init_audio
23360     80 28 BF FD | 	call	#_do_new
23364     37 00 00 FF 
23368     3C E4 05 F1 | 	add	objptr, ##28220
2336c     F2 12 02 FB | 	rdlong	arg01, objptr
23370     04 E4 85 F1 | 	sub	objptr, #4
23374     F2 14 02 FB | 	rdlong	arg02, objptr
23378     37 00 00 FF 
2337c     38 E4 85 F1 | 	sub	objptr, ##28216
23380     2C 17 B0 FD | 	call	#_hg010b_spin2_cls
23384     37 00 00 FF 
23388     40 E4 05 F1 | 	add	objptr, ##28224
2338c     F2 12 02 FB | 	rdlong	arg01, objptr
23390     37 00 00 FF 
23394     40 E4 85 F1 | 	sub	objptr, ##28224
23398     C4 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
2339c                 | ' 
2339c                 | ' leading_spaces:=amount
2339c     01 00 00 FF 
233a0     B6 E4 05 F1 | 	add	objptr, ##694
233a4     F2 04 68 FC | 	wrlong	#2, objptr
233a8     01 00 00 FF 
233ac     B6 E4 85 F1 | 	sub	objptr, ##694
233b0     B9 01 00 FF 
233b4     AB 27 06 F6 | 	mov	local01, ##@LR__6038
233b8     3D 12 06 F6 | 	mov	arg01, #61
233bc     3C 14 06 F6 | 	mov	arg02, #60
233c0     3B 16 06 F6 | 	mov	arg03, #59
233c4     3A 18 06 F6 | 	mov	arg04, #58
233c8     EC 80 B0 FD | 	call	#__system___vfs_open_sdcardx
233cc     FD 14 02 F6 | 	mov	arg02, result1
233d0     13 13 02 F6 | 	mov	arg01, local01
233d4     28 37 B0 FD | 	call	#__system___mount
233d8     B9 01 00 FF 
233dc     AF 13 06 F6 | 	mov	arg01, ##@LR__6039
233e0     DC 39 B0 FD | 	call	#__system___chdir
233e4     B9 01 00 FF 
233e8     B7 27 06 F6 | 	mov	local01, ##@LR__6040
233ec     4A 00 00 FF 
233f0     94 E4 05 F1 | 	add	objptr, ##38036
233f4     F2 26 62 FC | 	wrlong	local01, objptr
233f8     13 00 00 FF 
233fc     60 E4 85 F1 | 	sub	objptr, ##9824
23400     F2 12 02 FB | 	rdlong	arg01, objptr
23404     37 00 00 FF 
23408     34 E4 85 F1 | 	sub	objptr, ##28212
2340c     01 12 66 F0 | 	shl	arg01, #1
23410     01 14 06 F6 | 	mov	arg02, #1
23414     88 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
23418                 | ' init_commands
23418                 | ' init_error_strings
23418                 | ' init_audio
23418                 | ' do_new
23418                 | ' cls(ink, paper)
23418                 | ' v.setfontfamily(font) 				' use ST Mono font
23418                 | ' v.setleadingspaces(2)
23418                 | ' mount "/sd", _vfs_open_sdcard()
23418                 | ' chdir "/sd/bas"
23418                 | ' currentdir$="/sd/bas"
23418                 | ' position 2*editor_spaces,1 : print ver$
23418     00 12 06 F6 | 	mov	arg01, #0
2341c     3C 90 B0 FD | 	call	#__system___getiolock_0603
23420     FD 12 02 F6 | 	mov	arg01, result1
23424     0C 33 B0 FD | 	call	#__system___lockmem
23428     18 00 00 FF 
2342c     40 EB 05 F1 | 	add	ptr__dat__, ##12608
23430     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
23434     18 00 00 FF 
23438     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
2343c     00 12 06 F6 | 	mov	arg01, #0
23440     00 16 06 F6 | 	mov	arg03, #0
23444     E0 3F B0 FD | 	call	#__system___basic_print_string
23448     00 12 06 F6 | 	mov	arg01, #0
2344c     0A 14 06 F6 | 	mov	arg02, #10
23450     00 16 06 F6 | 	mov	arg03, #0
23454     78 3F B0 FD | 	call	#__system___basic_print_char
23458     00 12 06 F6 | 	mov	arg01, #0
2345c     FC 8F B0 FD | 	call	#__system___getiolock_0603
23460     FD 00 68 FC | 	wrlong	#0, result1
23464     52 00 00 FF 
23468     98 E4 05 F1 | 	add	objptr, ##42136
2346c     F2 12 02 FB | 	rdlong	arg01, objptr
23470     0F 00 00 FF 
23474     3C E4 85 F1 | 	sub	objptr, ##7740
23478     F2 26 02 FB | 	rdlong	local01, objptr
2347c     43 00 00 FF 
23480     5C E4 85 F1 | 	sub	objptr, ##34396
23484     13 13 82 F1 | 	sub	arg01, local01
23488     00 14 06 F6 | 	mov	arg02, #0
2348c     0A 16 06 F6 | 	mov	arg03, #10
23490     70 55 B0 FD | 	call	#__system__Number_S
23494     FD 12 02 F6 | 	mov	arg01, result1
23498     B9 01 00 FF 
2349c     BF 15 06 F6 | 	mov	arg02, ##@LR__6041
234a0     EC 32 B0 FD | 	call	#__system___string_concat
234a4     FD 26 02 F6 | 	mov	local01, result1
234a8     50 00 00 FF 
234ac     38 E5 05 F1 | 	add	objptr, ##41272
234b0     F2 26 62 FC | 	wrlong	local01, objptr
234b4     50 00 00 FF 
234b8     38 E5 85 F1 | 	sub	objptr, ##41272
234bc                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
234bc     00 12 06 F6 | 	mov	arg01, #0
234c0     98 8F B0 FD | 	call	#__system___getiolock_0603
234c4     FD 12 02 F6 | 	mov	arg01, result1
234c8     68 32 B0 FD | 	call	#__system___lockmem
234cc     50 00 00 FF 
234d0     38 E5 05 F1 | 	add	objptr, ##41272
234d4     F2 14 02 FB | 	rdlong	arg02, objptr
234d8     50 00 00 FF 
234dc     38 E5 85 F1 | 	sub	objptr, ##41272
234e0     00 12 06 F6 | 	mov	arg01, #0
234e4     00 16 06 F6 | 	mov	arg03, #0
234e8     3C 3F B0 FD | 	call	#__system___basic_print_string
234ec     00 12 06 F6 | 	mov	arg01, #0
234f0     0A 14 06 F6 | 	mov	arg02, #10
234f4     00 16 06 F6 | 	mov	arg03, #0
234f8     D4 3E B0 FD | 	call	#__system___basic_print_char
234fc     00 12 06 F6 | 	mov	arg01, #0
23500     58 8F B0 FD | 	call	#__system___getiolock_0603
23504     FD 00 68 FC | 	wrlong	#0, result1
23508     37 00 00 FF 
2350c     34 E4 05 F1 | 	add	objptr, ##28212
23510     F2 12 02 FB | 	rdlong	arg01, objptr
23514     37 00 00 FF 
23518     34 E4 85 F1 | 	sub	objptr, ##28212
2351c     01 12 66 F0 | 	shl	arg01, #1
23520     04 14 06 F6 | 	mov	arg02, #4
23524     78 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
23528                 | ' position 2*editor_spaces,4 : print "Ready"
23528     00 12 06 F6 | 	mov	arg01, #0
2352c     2C 8F B0 FD | 	call	#__system___getiolock_0603
23530     FD 12 02 F6 | 	mov	arg01, result1
23534     FC 31 B0 FD | 	call	#__system___lockmem
23538     B9 01 00 FF 
2353c     D1 15 06 F6 | 	mov	arg02, ##@LR__6042
23540     00 12 06 F6 | 	mov	arg01, #0
23544     00 16 06 F6 | 	mov	arg03, #0
23548     DC 3E B0 FD | 	call	#__system___basic_print_string
2354c     00 12 06 F6 | 	mov	arg01, #0
23550     0A 14 06 F6 | 	mov	arg02, #10
23554     00 16 06 F6 | 	mov	arg03, #0
23558     74 3E B0 FD | 	call	#__system___basic_print_char
2355c     00 12 06 F6 | 	mov	arg01, #0
23560     F8 8E B0 FD | 	call	#__system___getiolock_0603
23564     FD 00 68 FC | 	wrlong	#0, result1
23568     00 14 06 F6 | 	mov	arg02, #0
2356c     01 14 D6 F7 | 	test	arg02, #1 wc
23570     5A 4C 64 FD | 	drvc	#38
23574     01 14 D6 F7 | 	test	arg02, #1 wc
23578     5A 4E 64 FD | 	drvc	#39
2357c     B9 01 00 FF 
23580     D7 27 06 F6 | 	mov	local01, ##@LR__6043
23584     52 00 00 FF 
23588     C4 E4 05 F1 | 	add	objptr, ##42180
2358c     F2 26 62 FC | 	wrlong	local01, objptr
23590     04 E4 05 F1 | 	add	objptr, #4
23594     FF FF FF FF 
23598     F2 FE 6B FC | 	wrlong	##-1, objptr
2359c     0C E4 05 F1 | 	add	objptr, #12
235a0     F2 00 68 FC | 	wrlong	#0, objptr
235a4     52 00 00 FF 
235a8     D4 E4 85 F1 | 	sub	objptr, ##42196
235ac                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
235ac                 | ' loadname="noname.bas"
235ac                 | ' do_insert=-1
235ac                 | ' inload=0
235ac                 | ' 
235ac                 | ' open "/sd/bas/autorun.bas" for input as #9
235ac     B9 01 00 FF 
235b0     E2 15 06 F6 | 	mov	arg02, ##@LR__6044
235b4     09 12 06 F6 | 	mov	arg01, #9
235b8     00 16 06 F6 | 	mov	arg03, #0
235bc     78 3D B0 FD | 	call	#__system___basic_open_string
235c0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
235c4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
235c8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
235cc     52 00 00 FF 
235d0     D8 E4 05 F1 | 	add	objptr, ##42200
235d4     F2 FA 61 FC | 	wrlong	result1, objptr
235d8     52 00 00 FF 
235dc     D8 E4 85 F1 | 	sub	objptr, ##42200
235e0                 | ' err=geterr()
235e0                 | ' close #9
235e0     09 12 06 F6 | 	mov	arg01, #9
235e4     A4 84 B0 FD | 	call	#__system__close
235e8                 | ' if err=0 then line$="run autorun.bas" : interpret
235e8     52 00 00 FF 
235ec     D8 E4 05 F1 | 	add	objptr, ##42200
235f0     F2 26 0A FB | 	rdlong	local01, objptr wz
235f4     52 00 00 FF 
235f8     D8 E4 85 F1 | 	sub	objptr, ##42200
235fc     B9 01 00 AF 
23600     F6 27 06 A6 |  if_e	mov	local01, ##@LR__6045
23604     37 00 00 AF 
23608     1C E4 05 A1 |  if_e	add	objptr, ##28188
2360c     F2 26 62 AC |  if_e	wrlong	local01, objptr
23610     37 00 00 AF 
23614     1C E4 85 A1 |  if_e	sub	objptr, ##28188
23618     0C E2 BD AD |  if_e	call	#_interpret
2361c                 | ' 
2361c                 | ' 
2361c                 | ' '-------------------------------------------------------------------------------------------------------- 
2361c                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
2361c                 | ' '--------------------------------------------------------------------------------------------------------
2361c                 | ' 
2361c                 | ' do
2361c                 | LR__2680
2361c     E4 D1 BD FD | 	call	#_edit
23620     FD 26 02 F6 | 	mov	local01, result1
23624     37 00 00 FF 
23628     1C E4 05 F1 | 	add	objptr, ##28188
2362c     F2 26 62 FC | 	wrlong	local01, objptr
23630     37 00 00 FF 
23634     1C E4 85 F1 | 	sub	objptr, ##28188
23638     EC E1 BD FD | 	call	#_interpret
2363c     BA 01 00 FF 
23640     06 26 06 F6 | 	mov	local01, ##@LR__6046
23644     37 00 00 FF 
23648     1C E4 05 F1 | 	add	objptr, ##28188
2364c     F2 26 62 FC | 	wrlong	local01, objptr
23650     37 00 00 FF 
23654     1C E4 85 F1 | 	sub	objptr, ##28188
23658     C0 FF 9F FD | 	jmp	#LR__2680
2365c     A7 F0 03 F6 | 	mov	ptra, fp
23660     B2 00 A0 FD | 	call	#popregs_
23664                 | _program_ret
23664     2D 00 64 FD | 	ret
23668                 | 
23668                 | ' '' this is not a main program.
23668                 | ' 
23668                 | ' '****************************************************************************************************************
23668                 | ' '                                                                                                             	*
23668                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
23668                 | ' '                                                                                                            	*
23668                 | ' ' base - HDMI base pin												*
23668                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
23668                 | ' '														*
23668                 | ' '														*
23668                 | ' '****************************************************************************************************************
23668                 | ' 
23668                 | ' pub start(base,mb):result |i
23668                 | _hg010b_spin2_start
23668                 | ' 
23668                 | ' '--------------------------- initialize pointers and variables
23668                 | ' 
23668                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
23668     34 E4 05 F1 | 	add	objptr, #52
2366c     F2 FA 01 F6 | 	mov	result1, objptr
23670     28 E4 85 F1 | 	sub	objptr, #40
23674     F2 FA 61 FC | 	wrlong	result1, objptr
23678                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
23678                 | ' hdmibase:=base							' HDMI base pin, 8*n
23678     18 E4 05 F1 | 	add	objptr, #24
2367c     F2 12 62 FC | 	wrlong	arg01, objptr
23680                 | ' mailbox_ptr:=mb		
23680     04 E4 05 F1 | 	add	objptr, #4
23684     F2 14 62 FC | 	wrlong	arg02, objptr
23688                 | ' mailbox0:=mb				' PSRAM mailbox pointer
23688     C1 E5 05 F1 | 	add	objptr, #449
2368c     F2 14 62 FC | 	wrlong	arg02, objptr
23690                 | ' sprite_ptr:=@spr1ptr
23690     D8 E4 85 F1 | 	sub	objptr, #216
23694     F2 FA 01 F6 | 	mov	result1, objptr
23698     E5 E4 85 F1 | 	sub	objptr, #229
2369c     F2 FA 61 FC | 	wrlong	result1, objptr
236a0                 | ' 
236a0                 | ' 		'
236a0                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
236a0     E5 E4 05 F1 | 	add	objptr, #229
236a4     F2 FA 01 FB | 	rdlong	result1, objptr
236a8     D0 FA 05 F1 | 	add	result1, #208
236ac     FD 10 58 FC | 	wrword	#8, result1
236b0                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
236b0     F2 16 02 FB | 	rdlong	arg03, objptr
236b4     D2 16 06 F1 | 	add	arg03, #210
236b8     0B 21 58 FC | 	wrword	#16, arg03
236bc                 | ' leading_spaces:=0				'
236bc     A5 E5 05 F1 | 	add	objptr, #421
236c0     F2 00 68 FC | 	wrlong	#0, objptr
236c4                 | ' 
236c4                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
236c4     99 E4 85 F1 | 	sub	objptr, #153
236c8     00 00 A0 FF 
236cc     F2 0E 68 FC | 	wrlong	##1073741831, objptr
236d0                 | ' emptydl[1]:=0
236d0     04 E4 05 F1 | 	add	objptr, #4
236d4     F2 00 68 FC | 	wrlong	#0, objptr
236d8                 | ' 
236d8                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
236d8                 | ' 
236d8                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
236d8     28 E5 85 F1 | 	sub	objptr, #296
236dc     F2 02 68 FC | 	wrlong	#1, objptr
236e0                 | ' if s_debug<>0
236e0                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
236e0     20 00 80 FF 
236e4     F2 00 68 FC | 	wrlong	##16384, objptr
236e8     F9 E4 85 F1 | 	sub	objptr, #249
236ec                 | ' setmode()							' set the mode, see below
236ec     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
236f0                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
236f0     49 E4 05 F1 | 	add	objptr, #73
236f4     F2 FA 01 F6 | 	mov	result1, objptr
236f8     35 E4 85 F1 | 	sub	objptr, #53
236fc     F2 FA 61 FC | 	wrlong	result1, objptr
23700                 | ' cursor_ptr:=@cursor_x						
23700     28 E4 05 F1 | 	add	objptr, #40
23704     F2 16 02 F6 | 	mov	arg03, objptr
23708     2C E4 85 F1 | 	sub	objptr, #44
2370c     F2 16 62 FC | 	wrlong	arg03, objptr
23710                 | ' fontnum:=0  							' start with a PC type font 
23710     55 E4 05 F1 | 	add	objptr, #85
23714     F2 00 68 FC | 	wrlong	#0, objptr
23718                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
23718     1C E4 05 F1 | 	add	objptr, #28
2371c     F2 12 02 F6 | 	mov	arg01, objptr
23720     81 E4 85 F1 | 	sub	objptr, #129
23724     10 00 00 FF 
23728     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
2372c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
23730     10 00 00 FF 
23734     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
23738     10 16 06 F6 | 	mov	arg03, #16
2373c     14 2F B0 FD | 	call	#__system____builtin_memmove
23740                 | ' leading_spaces:=0
23740     01 00 00 FF 
23744     B6 E4 05 F1 | 	add	objptr, ##694
23748     F2 00 68 FC | 	wrlong	#0, objptr
2374c     01 00 00 FF 
23750     B6 E4 85 F1 | 	sub	objptr, ##694
23754                 | ' '---------------------------- initialize a cursor (MSDOS type)
23754                 | ' 
23754                 | ' initcursor(154)
23754     9A 12 06 F6 | 	mov	arg01, #154
23758     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
2375c                 | ' 
2375c                 | ' '---------------------------- start the cog
2375c                 | ' 
2375c                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
2375c     10 00 00 FF 
23760     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
23764     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
23768     10 00 00 FF 
2376c     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
23770     14 E4 05 F1 | 	add	objptr, #20
23774     10 FA 05 F6 | 	mov	result1, #16
23778     28 E4 61 FD | 	setq	objptr
2377c     0A FB F1 FC | 	coginit	result1, arg02 wc
23780     01 FA 65 C6 |  if_b	neg	result1, #1
23784     1C E4 05 F1 | 	add	objptr, #28
23788     F2 FA 61 FC | 	wrlong	result1, objptr
2378c     30 E4 85 F1 | 	sub	objptr, #48
23790                 | ' waitms(40)							' wait for stabilize
23790     28 12 06 F6 | 	mov	arg01, #40
23794     90 32 B0 FD | 	call	#__system___waitms
23798                 | ' return cog							' return the driver's cog #
23798     30 E4 05 F1 | 	add	objptr, #48
2379c     F2 FA 01 FB | 	rdlong	result1, objptr
237a0     30 E4 85 F1 | 	sub	objptr, #48
237a4                 | _hg010b_spin2_start_ret
237a4     2D 00 64 FD | 	ret
237a8                 | 
237a8                 | ' 
237a8                 | ' 
237a8                 | ' '**************************************************************************************************************** 
237a8                 | ' '                                                                                                             	*
237a8                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
237a8                 | ' '  Mode number - see start() above or bits below								*
237a8                 | ' '                                                                                                             	*
237a8                 | ' '****************************************************************************************************************
237a8                 | ' 
237a8                 | ' '---------------------------- initialize a cursor (MSDOS type)
237a8                 | ' pub initcursor(color) |i
237a8                 | _hg010b_spin2_initcursor
237a8     03 4A 05 F6 | 	mov	COUNT_, #3
237ac     A8 00 A0 FD | 	call	#pushregs_
237b0     09 27 02 F6 | 	mov	local01, arg01
237b4                 | ' 
237b4                 | ' cursor_x:=0							' place the cursor at 0:0
237b4     3C E4 05 F1 | 	add	objptr, #60
237b8     F2 00 58 FC | 	wrword	#0, objptr
237bc                 | ' cursor_y:=0
237bc     02 E4 05 F1 | 	add	objptr, #2
237c0     F2 00 48 FC | 	wrbyte	#0, objptr
237c4                 | ' repeat i from 0 to 111
237c4     00 28 06 F6 | 	mov	local02, #0
237c8     F8 E5 05 F1 | 	add	objptr, #504
237cc     97 1A 48 FB | 	callpa	#(@LR__2692-@LR__2690)>>2,fcache_load_ptr_
237d0                 | LR__2690
237d0                 | '   cursor[i]:=0
237d0     14 2B 02 F6 | 	mov	local03, local02
237d4     F2 2A 02 F1 | 	add	local03, objptr
237d8     15 01 48 FC | 	wrbyte	#0, local03
237dc     01 28 06 F1 | 	add	local02, #1
237e0     70 28 56 F2 | 	cmps	local02, #112 wc
237e4     E8 FF 9F CD |  if_b	jmp	#LR__2690
237e8                 | ' repeat i from 112 to 127
237e8     70 28 06 F6 | 	mov	local02, #112
237ec                 | LR__2691
237ec                 | '   cursor[i]:=color  
237ec     14 2B 02 F6 | 	mov	local03, local02
237f0     F2 2A 02 F1 | 	add	local03, objptr
237f4     15 27 42 FC | 	wrbyte	local01, local03
237f8     01 28 06 F1 | 	add	local02, #1
237fc     80 28 16 F2 | 	cmp	local02, #128 wc
23800     E8 FF 9F CD |  if_b	jmp	#LR__2691
23804                 | LR__2692
23804                 | ' 'repeat i from 0 to 127
23804                 | ' '  if ((i/8)//2)
23804                 | ' '    cursor[i]:=15
23804                 | ' '  else
23804                 | ' '    cursor[i]:=0
23804                 | ' '  if i>=120    
23804                 | ' '    cursor[i]:=40
23804                 | ' setspriteptr(17,@cursor)
23804     F2 14 02 F6 | 	mov	arg02, objptr
23808     01 00 00 FF 
2380c     36 E4 85 F1 | 	sub	objptr, ##566
23810     11 12 06 F6 | 	mov	arg01, #17
23814     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
23818                 | ' setspritesize(17,8,16)
23818     11 12 06 F6 | 	mov	arg01, #17
2381c     08 14 06 F6 | 	mov	arg02, #8
23820     10 16 06 F6 | 	mov	arg03, #16
23824     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
23828                 | ' setspritepos(17,0,0)
23828     11 12 06 F6 | 	mov	arg01, #17
2382c     00 14 06 F6 | 	mov	arg02, #0
23830     00 16 06 F6 | 	mov	arg03, #0
23834     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
23838                 | ' cursorshape:=14
23838     0B 00 00 FF 
2383c     C6 E4 05 F1 | 	add	objptr, ##5830
23840     F2 1C 68 FC | 	wrlong	#14, objptr
23844                 | ' cursorcolor:=color
23844     04 E4 85 F1 | 	sub	objptr, #4
23848     F2 26 62 FC | 	wrlong	local01, objptr
2384c     0B 00 00 FF 
23850     C2 E4 85 F1 | 	sub	objptr, ##5826
23854     A7 F0 03 F6 | 	mov	ptra, fp
23858     B2 00 A0 FD | 	call	#popregs_
2385c                 | _hg010b_spin2_initcursor_ret
2385c     2D 00 64 FD | 	ret
23860                 | 
23860                 | ' 
23860                 | ' pub setcursorshape(shape) | i
23860                 | _hg010b_spin2_setcursorshape
23860                 | ' 
23860                 | ' cursorshape:=shape
23860     0B 00 00 FF 
23864     C6 E4 05 F1 | 	add	objptr, ##5830
23868     F2 12 62 FC | 	wrlong	arg01, objptr
2386c                 | ' repeat i from 0 to (8*cursorshape)-1
2386c     00 00 06 F6 | 	mov	_var01, #0
23870     09 03 02 F6 | 	mov	_var02, arg01
23874     03 02 66 F0 | 	shl	_var02, #3
23878     01 02 86 F1 | 	sub	_var02, #1
2387c     00 02 56 F2 | 	cmps	_var02, #0 wc
23880     01 04 86 F6 | 	negc	_var03, #1
23884     02 07 02 F6 | 	mov	_var04, _var03
23888     02 03 02 F1 | 	add	_var02, _var03
2388c     0A 00 00 FF 
23890     90 E4 85 F1 | 	sub	objptr, ##5264
23894     97 0C 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
23898                 | LR__2700
23898                 | '   cursor[i]:=0
23898     00 05 02 F6 | 	mov	_var03, _var01
2389c     F2 04 02 F1 | 	add	_var03, objptr
238a0     02 01 48 FC | 	wrbyte	#0, _var03
238a4     03 01 02 F1 | 	add	_var01, _var04
238a8     01 01 0A F2 | 	cmp	_var01, _var02 wz
238ac     E8 FF 9F 5D |  if_ne	jmp	#LR__2700
238b0                 | LR__2701
238b0                 | ' repeat i from 8*cursorshape to 127
238b0     0A 00 00 FF 
238b4     90 E4 05 F1 | 	add	objptr, ##5264
238b8     F2 06 02 FB | 	rdlong	_var04, objptr
238bc     03 01 02 F6 | 	mov	_var01, _var04
238c0     03 00 66 F0 | 	shl	_var01, #3
238c4     0B 00 00 FF 
238c8     C6 E4 85 F1 | 	sub	objptr, ##5830
238cc     03 06 66 F0 | 	shl	_var04, #3
238d0     80 06 56 F2 | 	cmps	_var04, #128 wc
238d4     01 04 A6 F6 | 	negnc	_var03, #1
238d8     7F 02 06 F6 | 	mov	_var02, #127
238dc     02 03 02 F1 | 	add	_var02, _var03
238e0     97 1A 48 FB | 	callpa	#(@LR__2703-@LR__2702)>>2,fcache_load_ptr_
238e4                 | LR__2702
238e4                 | '   cursor[i]:=cursorcolor
238e4     00 07 02 F6 | 	mov	_var04, _var01
238e8     01 00 00 FF 
238ec     36 E4 05 F1 | 	add	objptr, ##566
238f0     F2 06 02 F1 | 	add	_var04, objptr
238f4     0A 00 00 FF 
238f8     8C E4 05 F1 | 	add	objptr, ##5260
238fc     F2 12 02 FB | 	rdlong	arg01, objptr
23900     0B 00 00 FF 
23904     C2 E4 85 F1 | 	sub	objptr, ##5826
23908     03 13 42 FC | 	wrbyte	arg01, _var04
2390c     02 01 02 F1 | 	add	_var01, _var03
23910     01 01 0A F2 | 	cmp	_var01, _var02 wz
23914     CC FF 9F 5D |  if_ne	jmp	#LR__2702
23918                 | LR__2703
23918                 | _hg010b_spin2_setcursorshape_ret
23918     2D 00 64 FD | 	ret
2391c                 | 
2391c                 | ' 
2391c                 | ' pub setcursorcolor(color) | i
2391c                 | _hg010b_spin2_setcursorcolor
2391c                 | ' 
2391c                 | ' cursorcolor:=color
2391c     0B 00 00 FF 
23920     C2 E4 05 F1 | 	add	objptr, ##5826
23924     F2 12 62 FC | 	wrlong	arg01, objptr
23928                 | ' repeat i from 0 to (8*cursorshape)-1
23928     00 12 06 F6 | 	mov	arg01, #0
2392c     04 E4 05 F1 | 	add	objptr, #4
23930     F2 00 02 FB | 	rdlong	_var01, objptr
23934     03 00 66 F0 | 	shl	_var01, #3
23938     01 00 86 F1 | 	sub	_var01, #1
2393c     00 00 56 F2 | 	cmps	_var01, #0 wc
23940     01 02 86 F6 | 	negc	_var02, #1
23944     01 05 02 F6 | 	mov	_var03, _var02
23948     01 01 02 F1 | 	add	_var01, _var02
2394c     0A 00 00 FF 
23950     90 E4 85 F1 | 	sub	objptr, ##5264
23954     97 0C 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
23958                 | LR__2710
23958                 | '   cursor[i]:=0
23958     09 03 02 F6 | 	mov	_var02, arg01
2395c     F2 02 02 F1 | 	add	_var02, objptr
23960     01 01 48 FC | 	wrbyte	#0, _var02
23964     02 13 02 F1 | 	add	arg01, _var03
23968     00 13 0A F2 | 	cmp	arg01, _var01 wz
2396c     E8 FF 9F 5D |  if_ne	jmp	#LR__2710
23970                 | LR__2711
23970                 | ' repeat i from 8*cursorshape to 127
23970     0A 00 00 FF 
23974     90 E4 05 F1 | 	add	objptr, ##5264
23978     F2 04 02 FB | 	rdlong	_var03, objptr
2397c     02 13 02 F6 | 	mov	arg01, _var03
23980     03 12 66 F0 | 	shl	arg01, #3
23984     0B 00 00 FF 
23988     C6 E4 85 F1 | 	sub	objptr, ##5830
2398c     03 04 66 F0 | 	shl	_var03, #3
23990     80 04 56 F2 | 	cmps	_var03, #128 wc
23994     01 02 A6 F6 | 	negnc	_var02, #1
23998     7F 00 06 F6 | 	mov	_var01, #127
2399c     01 01 02 F1 | 	add	_var01, _var02
239a0     97 1A 48 FB | 	callpa	#(@LR__2713-@LR__2712)>>2,fcache_load_ptr_
239a4                 | LR__2712
239a4                 | '   cursor[i]:=cursorcolor
239a4     09 05 02 F6 | 	mov	_var03, arg01
239a8     01 00 00 FF 
239ac     36 E4 05 F1 | 	add	objptr, ##566
239b0     F2 04 02 F1 | 	add	_var03, objptr
239b4     0A 00 00 FF 
239b8     8C E4 05 F1 | 	add	objptr, ##5260
239bc     F2 06 02 FB | 	rdlong	_var04, objptr
239c0     0B 00 00 FF 
239c4     C2 E4 85 F1 | 	sub	objptr, ##5826
239c8     02 07 42 FC | 	wrbyte	_var04, _var03
239cc     01 13 02 F1 | 	add	arg01, _var02
239d0     00 13 0A F2 | 	cmp	arg01, _var01 wz
239d4     CC FF 9F 5D |  if_ne	jmp	#LR__2712
239d8                 | LR__2713
239d8                 | _hg010b_spin2_setcursorcolor_ret
239d8     2D 00 64 FD | 	ret
239dc                 | 
239dc                 | '   
239dc                 | '   
239dc                 | '   
239dc                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
239dc                 | _hg010b_spin2_setmode
239dc     02 4A 05 F6 | 	mov	COUNT_, #2
239e0     A8 00 A0 FD | 	call	#pushregs_
239e4                 | ' 
239e4                 | ' 
239e4                 | ' dl_ptr:=@emptydl[0]
239e4     01 00 00 FF 
239e8     1D E4 05 F1 | 	add	objptr, ##541
239ec     F2 1A 02 F6 | 	mov	arg05, objptr
239f0     FD E5 85 F1 | 	sub	objptr, #509
239f4     F2 1A 62 FC | 	wrlong	arg05, objptr
239f8                 | ' 
239f8                 | ' if cog>0 
239f8     10 E4 05 F1 | 	add	objptr, #16
239fc     F2 1A 02 FB | 	rdlong	arg05, objptr
23a00     30 E4 85 F1 | 	sub	objptr, #48
23a04     01 1A 56 F2 | 	cmps	arg05, #1 wc
23a08                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
23a08     01 12 06 36 |  if_ae	mov	arg01, #1
23a0c     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
23a10                 | ' xres:=1024
23a10     01 00 00 FF 
23a14     26 E4 05 F1 | 	add	objptr, ##550
23a18     02 00 80 FF 
23a1c     F2 00 68 FC | 	wrlong	##1024, objptr
23a20                 | ' yres:=600
23a20     04 E4 05 F1 | 	add	objptr, #4
23a24     01 00 80 FF 
23a28     F2 B0 68 FC | 	wrlong	##600, objptr
23a2c                 | ' ppl:=(timings[3])
23a2c     10 00 00 FF 
23a30     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
23a34     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
23a38     51 E5 85 F1 | 	sub	objptr, #337
23a3c     F2 1A 62 FC | 	wrlong	arg05, objptr
23a40                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
23a40     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
23a44     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
23a48     01 26 66 F0 | 	shl	local01, #1
23a4c     80 E4 85 F1 | 	sub	objptr, #128
23a50     F2 26 62 FC | 	wrlong	local01, objptr
23a54                 | ' cpl1:=cpl '' todo remove
23a54     04 E4 05 F1 | 	add	objptr, #4
23a58     F2 26 62 FC | 	wrlong	local01, objptr
23a5c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
23a5c     02 00 00 FF 
23a60     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
23a64     41 E4 85 F1 | 	sub	objptr, #65
23a68     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
23a6c                 | ' repeat i from 0 to 3
23a6c     00 28 06 F6 | 	mov	local02, #0
23a70     02 00 00 FF 
23a74     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
23a78     08 E4 05 F1 | 	add	objptr, #8
23a7c     97 20 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
23a80                 | LR__2720
23a80                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
23a80     14 27 02 F6 | 	mov	local01, local02
23a84     02 26 66 F0 | 	shl	local01, #2
23a88     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
23a8c     F2 1A 02 FB | 	rdlong	arg05, objptr
23a90     11 1A 66 F0 | 	shl	arg05, #17
23a94     13 27 02 FB | 	rdlong	local01, local01
23a98     0D 27 02 F1 | 	add	local01, arg05
23a9c     80 40 38 FF 
23aa0     00 26 06 F1 | 	add	local01, ##1887502336
23aa4     14 1B 02 F6 | 	mov	arg05, local02
23aa8     02 1A 66 F0 | 	shl	arg05, #2
23aac     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
23ab0     0D 27 62 FC | 	wrlong	local01, arg05
23ab4     01 28 06 F1 | 	add	local02, #1
23ab8     04 28 56 F2 | 	cmps	local02, #4 wc
23abc     C0 FF 9F CD |  if_b	jmp	#LR__2720
23ac0                 | LR__2721
23ac0     24 E4 85 F1 | 	sub	objptr, #36
23ac4                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
23ac4     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
23ac8     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
23acc     14 26 66 FC | 	wrlong	local01, #20
23ad0                 | ' hubset(timings[10])
23ad0     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
23ad4     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
23ad8     10 00 00 FF 
23adc     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
23ae0     00 12 62 FD | 	hubset	arg01
23ae4                 | ' waitms(1)                                                   	' wait for stabilization
23ae4     01 12 06 F6 | 	mov	arg01, #1
23ae8     3C 2F B0 FD | 	call	#__system___waitms
23aec     10 00 00 FF 
23af0     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
23af4     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
23af8     61 E4 05 F1 | 	add	objptr, #97
23afc     F2 28 62 FC | 	wrlong	local02, objptr
23b00     14 27 52 F6 | 	abs	local01, local02 wc
23b04     04 26 46 F0 | 	shr	local01, #4
23b08     13 27 82 F6 | 	negc	local01, local01
23b0c     9C E4 05 F1 | 	add	objptr, #156
23b10     F2 26 62 FC | 	wrlong	local01, objptr
23b14     A4 E4 85 F1 | 	sub	objptr, #164
23b18     F2 28 02 FB | 	rdlong	local02, objptr
23b1c     08 E4 05 F1 | 	add	objptr, #8
23b20     F2 26 02 FB | 	rdlong	local01, objptr
23b24     13 29 02 FD | 	qmul	local02, local01
23b28                 | ' lines:=timings[11]
23b28                 | ' t_lines:=lines/16
23b28                 | ' buflen:=cpl*lines						' framebuffer length in longs
23b28     29 E4 85 F1 | 	sub	objptr, #41
23b2c     19 26 C6 F9 | 	decod	local01, #25
23b30     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
23b34     18 28 62 FD | 	getqx	local02
23b38     F2 28 62 FC | 	wrlong	local02, objptr
23b3c     38 E4 85 F1 | 	sub	objptr, #56
23b40     02 28 66 F0 | 	shl	local02, #2
23b44     14 27 82 F1 | 	sub	local01, local02
23b48     F2 26 62 FC | 	wrlong	local01, objptr
23b4c     FD E4 05 F1 | 	add	objptr, #253
23b50     F2 28 02 FB | 	rdlong	local02, objptr
23b54     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
23b58     0D 29 02 FD | 	qmul	local02, arg05
23b5c                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
23b5c                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
23b5c     F9 E4 85 F1 | 	sub	objptr, #249
23b60                 | ' mode_ptr:=@timings						' set pointers to timings
23b60     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
23b64                 | ' graphmode:=1024+512+192+48							' det global variable
23b64                 | ' makedl(graphmode)							' make a DL for the mode
23b64     03 00 00 FF 
23b68     F0 12 06 F6 | 	mov	arg01, ##1776
23b6c     18 28 62 FD | 	getqx	local02
23b70     14 27 82 F1 | 	sub	local01, local02
23b74     F2 26 62 FC | 	wrlong	local01, objptr
23b78     14 E4 05 F1 | 	add	objptr, #20
23b7c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
23b80     79 E4 05 F1 | 	add	objptr, #121
23b84     03 00 80 FF 
23b88     F2 E0 69 FC | 	wrlong	##1776, objptr
23b8c     91 E4 85 F1 | 	sub	objptr, #145
23b90     10 00 00 FF 
23b94     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
23b98     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
23b9c                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
23b9c     F2 26 02 FB | 	rdlong	local01, objptr
23ba0     DD E4 05 F1 | 	add	objptr, #221
23ba4     F2 26 62 FC | 	wrlong	local01, objptr
23ba8                 | ' s_font_ptr:=font_ptr
23ba8     D5 E4 85 F1 | 	sub	objptr, #213
23bac     F2 26 02 FB | 	rdlong	local01, objptr
23bb0     D9 E4 05 F1 | 	add	objptr, #217
23bb4     F2 26 62 FC | 	wrlong	local01, objptr
23bb8                 | ' s_lines:=lines
23bb8     80 E4 85 F1 | 	sub	objptr, #128
23bbc     F2 26 02 FB | 	rdlong	local01, objptr
23bc0     84 E4 05 F1 | 	add	objptr, #132
23bc4     F2 26 62 FC | 	wrlong	local01, objptr
23bc8                 | ' s_buflen:=buflen
23bc8     AD E4 85 F1 | 	sub	objptr, #173
23bcc     F2 26 02 FB | 	rdlong	local01, objptr
23bd0     B5 E4 05 F1 | 	add	objptr, #181
23bd4     F2 26 62 FC | 	wrlong	local01, objptr
23bd8                 | ' s_cpl:=cpl
23bd8     94 E4 85 F1 | 	sub	objptr, #148
23bdc     F2 26 02 FB | 	rdlong	local01, objptr
23be0     90 E4 05 F1 | 	add	objptr, #144
23be4     F2 26 62 FC | 	wrlong	local01, objptr
23be8                 | ' s_cpl1:=cpl
23be8     90 E4 85 F1 | 	sub	objptr, #144
23bec     F2 26 02 FB | 	rdlong	local01, objptr
23bf0     98 E4 05 F1 | 	add	objptr, #152
23bf4     F2 26 62 FC | 	wrlong	local01, objptr
23bf8                 | ' st_lines:=t_lines
23bf8     0C E4 05 F1 | 	add	objptr, #12
23bfc     F2 26 02 FB | 	rdlong	local01, objptr
23c00     04 E4 05 F1 | 	add	objptr, #4
23c04     F2 26 62 FC | 	wrlong	local01, objptr
23c08                 | ' ppl:=ppl/xzoom  
23c08     28 E4 85 F1 | 	sub	objptr, #40
23c0c     F2 90 02 FB | 	rdlong	muldiva_, objptr
23c10     2C E4 05 F1 | 	add	objptr, #44
23c14     F2 92 02 FB | 	rdlong	muldivb_, objptr
23c18     05 E5 85 F1 | 	sub	objptr, #261
23c1c     BA 00 A0 FD | 	call	#divide_
23c20     D9 E4 05 F1 | 	add	objptr, #217
23c24     F2 92 62 FC | 	wrlong	muldivb_, objptr
23c28                 | ' s_ppl:=ppl
23c28     1C E4 05 F1 | 	add	objptr, #28
23c2c     F2 92 62 FC | 	wrlong	muldivb_, objptr
23c30     F5 E4 85 F1 | 	sub	objptr, #245
23c34                 | ' waitms(20)							' wait 
23c34     14 12 06 F6 | 	mov	arg01, #20
23c38     EC 2D B0 FD | 	call	#__system___waitms
23c3c                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
23c3c     04 E4 05 F1 | 	add	objptr, #4
23c40     F2 12 02 FB | 	rdlong	arg01, objptr
23c44     04 E4 85 F1 | 	sub	objptr, #4
23c48     F2 16 02 FB | 	rdlong	arg03, objptr
23c4c     09 17 82 F1 | 	sub	arg03, arg01
23c50     20 14 06 F6 | 	mov	arg02, #32
23c54     00 18 06 F6 | 	mov	arg04, #0
23c58     01 1A 06 F6 | 	mov	arg05, #1
23c5c     0B 00 00 FF 
23c60     CC E4 05 F1 | 	add	objptr, ##5836
23c64     7C 1F B0 FD | 	call	#_psram_spin2_fill
23c68     0B 00 00 FF 
23c6c     CC E4 85 F1 | 	sub	objptr, ##5836
23c70     A7 F0 03 F6 | 	mov	ptra, fp
23c74     B2 00 A0 FD | 	call	#popregs_
23c78                 | _hg010b_spin2_setmode_ret
23c78     2D 00 64 FD | 	ret
23c7c                 | 
23c7c                 | ' 
23c7c                 | ' '****************************************************************************************************************
23c7c                 | ' '                                                                                                             	*
23c7c                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
23c7c                 | ' '                                                                                                             	*
23c7c                 | ' '****************************************************************************************************************
23c7c                 | ' 
23c7c                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
23c7c                 | _hg010b_spin2_makedl
23c7c                 | ' 
23c7c                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
23c7c                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
23c7c                 | ' repeat i from 0 to 11                                                           ' clear DL
23c7c     00 00 06 F6 | 	mov	_var01, #0
23c80     ED E5 05 F1 | 	add	objptr, #493
23c84     97 0E 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
23c88                 | LR__2730
23c88                 | '   displaylist[i]:=0 
23c88     00 03 02 F6 | 	mov	_var02, _var01
23c8c     02 02 66 F0 | 	shl	_var02, #2
23c90     F2 02 02 F1 | 	add	_var02, objptr
23c94     01 01 68 FC | 	wrlong	#0, _var02
23c98     01 00 06 F1 | 	add	_var01, #1
23c9c     0C 00 56 F2 | 	cmps	_var01, #12 wc
23ca0     E4 FF 9F CD |  if_b	jmp	#LR__2730
23ca4                 | LR__2731
23ca4                 | '                         ' 
23ca4                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
23ca4     8C E5 85 F1 | 	sub	objptr, #396
23ca8     F2 02 02 FB | 	rdlong	_var02, objptr
23cac     14 02 66 F0 | 	shl	_var02, #20
23cb0     01 02 06 F1 | 	add	_var02, #1
23cb4     04 E4 85 F1 | 	sub	objptr, #4
23cb8     F2 00 02 FB | 	rdlong	_var01, objptr
23cbc     02 00 66 F0 | 	shl	_var01, #2
23cc0     04 00 66 F0 | 	shl	_var01, #4
23cc4     00 03 02 F1 | 	add	_var02, _var01
23cc8     90 E5 05 F1 | 	add	objptr, #400
23ccc     F2 02 62 FC | 	wrlong	_var02, objptr
23cd0     ED E5 85 F1 | 	sub	objptr, #493
23cd4                 | ' displaylist[1]:=buf_ptr<<4+%10  
23cd4     F2 02 02 FB | 	rdlong	_var02, objptr
23cd8     04 02 66 F0 | 	shl	_var02, #4
23cdc     02 02 06 F1 | 	add	_var02, #2
23ce0     F1 E5 05 F1 | 	add	objptr, #497
23ce4     F2 02 62 FC | 	wrlong	_var02, objptr
23ce8                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
23ce8     04 E4 85 F1 | 	sub	objptr, #4
23cec     F2 02 02 F6 | 	mov	_var02, objptr
23cf0     CD E5 85 F1 | 	sub	objptr, #461
23cf4     F2 02 62 FC | 	wrlong	_var02, objptr
23cf8     20 E4 85 F1 | 	sub	objptr, #32
23cfc                 | _hg010b_spin2_makedl_ret
23cfc     2D 00 64 FD | 	ret
23d00                 | 
23d00                 | ' 
23d00                 | ' 
23d00                 | ' '****************************************************************************************************************
23d00                 | ' '                                                                        					*
23d00                 | ' '  Graphic primitives                                                    					*
23d00                 | ' '                                                                        					*
23d00                 | ' '****************************************************************************************************************
23d00                 | ' 
23d00                 | ' pub setspriteptr(num,ptr)
23d00                 | _hg010b_spin2_setspriteptr
23d00                 | ' long[@spr1ptr+12*num]:=ptr
23d00     11 E5 05 F1 | 	add	objptr, #273
23d04     F2 00 02 F6 | 	mov	_var01, objptr
23d08     09 03 02 F6 | 	mov	_var02, arg01
23d0c     01 02 66 F0 | 	shl	_var02, #1
23d10     09 03 02 F1 | 	add	_var02, arg01
23d14     02 02 66 F0 | 	shl	_var02, #2
23d18     01 01 02 F1 | 	add	_var01, _var02
23d1c     00 15 62 FC | 	wrlong	arg02, _var01
23d20     11 E5 85 F1 | 	sub	objptr, #273
23d24                 | _hg010b_spin2_setspriteptr_ret
23d24     2D 00 64 FD | 	ret
23d28                 | 
23d28                 | ' 
23d28                 | ' pub setspritepos(num,x,y)
23d28                 | _hg010b_spin2_setspritepos
23d28                 | ' if y>601
23d28     01 00 00 FF 
23d2c     5A 16 56 F2 | 	cmps	arg03, ##602 wc
23d30                 | '   y:=601
23d30     01 00 00 3F 
23d34     59 16 06 36 |  if_ae	mov	arg03, ##601
23d38                 | ' if x>1024
23d38     02 00 00 FF 
23d3c     01 14 56 F2 | 	cmps	arg02, ##1025 wc
23d40                 | '   x:=1024
23d40     0A 14 C6 39 |  if_ae	decod	arg02, #10
23d44                 | ' word[@spr1ptr+12*num+4]:=x
23d44     11 E5 05 F1 | 	add	objptr, #273
23d48     F2 00 02 F6 | 	mov	_var01, objptr
23d4c     09 03 02 F6 | 	mov	_var02, arg01
23d50     01 02 66 F0 | 	shl	_var02, #1
23d54     09 03 02 F1 | 	add	_var02, arg01
23d58     02 02 66 F0 | 	shl	_var02, #2
23d5c     01 01 02 F1 | 	add	_var01, _var02
23d60     04 00 06 F1 | 	add	_var01, #4
23d64     00 15 52 FC | 	wrword	arg02, _var01
23d68                 | ' word[@spr1ptr+12*num+6]:=y
23d68     F2 00 02 F6 | 	mov	_var01, objptr
23d6c     09 03 02 F6 | 	mov	_var02, arg01
23d70     01 02 66 F0 | 	shl	_var02, #1
23d74     09 03 02 F1 | 	add	_var02, arg01
23d78     02 02 66 F0 | 	shl	_var02, #2
23d7c     01 01 02 F1 | 	add	_var01, _var02
23d80     06 00 06 F1 | 	add	_var01, #6
23d84     00 17 52 FC | 	wrword	arg03, _var01
23d88     11 E5 85 F1 | 	sub	objptr, #273
23d8c                 | _hg010b_spin2_setspritepos_ret
23d8c     2D 00 64 FD | 	ret
23d90                 | 
23d90                 | ' 
23d90                 | ' pub setspritesize(num,w,h)
23d90                 | _hg010b_spin2_setspritesize
23d90                 | ' word[@spr1ptr+12*num+8]:=w
23d90     11 E5 05 F1 | 	add	objptr, #273
23d94     F2 00 02 F6 | 	mov	_var01, objptr
23d98     09 03 02 F6 | 	mov	_var02, arg01
23d9c     01 02 66 F0 | 	shl	_var02, #1
23da0     09 03 02 F1 | 	add	_var02, arg01
23da4     02 02 66 F0 | 	shl	_var02, #2
23da8     01 01 02 F1 | 	add	_var01, _var02
23dac     08 00 06 F1 | 	add	_var01, #8
23db0     00 15 52 FC | 	wrword	arg02, _var01
23db4                 | ' word[@spr1ptr+12*num+10]:=h
23db4     F2 00 02 F6 | 	mov	_var01, objptr
23db8     09 03 02 F6 | 	mov	_var02, arg01
23dbc     01 02 66 F0 | 	shl	_var02, #1
23dc0     09 03 02 F1 | 	add	_var02, arg01
23dc4     02 02 66 F0 | 	shl	_var02, #2
23dc8     01 01 02 F1 | 	add	_var01, _var02
23dcc     0A 00 06 F1 | 	add	_var01, #10
23dd0     00 17 52 FC | 	wrword	arg03, _var01
23dd4     11 E5 85 F1 | 	sub	objptr, #273
23dd8                 | _hg010b_spin2_setspritesize_ret
23dd8     2D 00 64 FD | 	ret
23ddc                 | 
23ddc                 | ' 
23ddc                 | ' 
23ddc                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
23ddc                 | ' 
23ddc                 | ' 
23ddc                 | ' pub putpixel(x,y,c)
23ddc                 | _hg010b_spin2_putpixel
23ddc     04 4A 05 F6 | 	mov	COUNT_, #4
23de0     A8 00 A0 FD | 	call	#pushregs_
23de4     09 27 02 F6 | 	mov	local01, arg01
23de8                 | ' 
23de8                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
23de8     00 28 06 F6 | 	mov	local02, #0
23dec     00 26 56 F2 | 	cmps	local01, #0 wc
23df0     01 28 66 36 |  if_ae	neg	local02, #1
23df4     E9 E4 05 F1 | 	add	objptr, #233
23df8     F2 1A 02 FB | 	rdlong	arg05, objptr
23dfc     02 1A 66 F0 | 	shl	arg05, #2
23e00     0D 27 52 F2 | 	cmps	local01, arg05 wc
23e04     15 2B A2 F1 | 	subx	local03, local03
23e08     15 29 02 F5 | 	and	local02, local03
23e0c     00 2A 06 F6 | 	mov	local03, #0
23e10     00 14 56 F2 | 	cmps	arg02, #0 wc
23e14     01 2A 66 36 |  if_ae	neg	local03, #1
23e18     15 29 02 F5 | 	and	local02, local03
23e1c     04 E4 85 F1 | 	sub	objptr, #4
23e20     F2 2A 02 FB | 	rdlong	local03, objptr
23e24     E5 E4 85 F1 | 	sub	objptr, #229
23e28     15 15 52 F2 | 	cmps	arg02, local03 wc
23e2c     16 2D A2 F1 | 	subx	local04, local04
23e30     16 29 CA F7 | 	test	local02, local04 wz
23e34     48 00 90 AD |  if_e	jmp	#LR__2740
23e38     DD E4 05 F1 | 	add	objptr, #221
23e3c     F2 12 02 FB | 	rdlong	arg01, objptr
23e40     14 E4 05 F1 | 	add	objptr, #20
23e44     F2 2C 02 FB | 	rdlong	local04, objptr
23e48     02 2C 66 F0 | 	shl	local04, #2
23e4c     0A 2D 02 FD | 	qmul	local04, arg02
23e50                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
23e50     0B 15 02 F6 | 	mov	arg02, arg03
23e54     01 16 06 F6 | 	mov	arg03, #1
23e58     00 18 06 F6 | 	mov	arg04, #0
23e5c     01 1A 06 F6 | 	mov	arg05, #1
23e60     0A 00 00 FF 
23e64     DB E5 05 F1 | 	add	objptr, ##5595
23e68     18 2C 62 FD | 	getqx	local04
23e6c     13 2D 02 F1 | 	add	local04, local01
23e70     16 13 02 F1 | 	add	arg01, local04
23e74     6C 1D B0 FD | 	call	#_psram_spin2_fill
23e78     0B 00 00 FF 
23e7c     CC E4 85 F1 | 	sub	objptr, ##5836
23e80                 | LR__2740
23e80     A7 F0 03 F6 | 	mov	ptra, fp
23e84     B2 00 A0 FD | 	call	#popregs_
23e88                 | _hg010b_spin2_putpixel_ret
23e88     2D 00 64 FD | 	ret
23e8c                 | 
23e8c                 | ' 
23e8c                 | ' pub putpixel2(x,y,c)
23e8c                 | _hg010b_spin2_putpixel2
23e8c     02 4A 05 F6 | 	mov	COUNT_, #2
23e90     A8 00 A0 FD | 	call	#pushregs_
23e94     DD E4 05 F1 | 	add	objptr, #221
23e98     F2 26 02 FB | 	rdlong	local01, objptr
23e9c     14 E4 05 F1 | 	add	objptr, #20
23ea0     F2 1A 02 FB | 	rdlong	arg05, objptr
23ea4     02 1A 66 F0 | 	shl	arg05, #2
23ea8     0A 1B 02 FD | 	qmul	arg05, arg02
23eac                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
23eac     0B 15 02 F6 | 	mov	arg02, arg03
23eb0     01 16 06 F6 | 	mov	arg03, #1
23eb4     00 18 06 F6 | 	mov	arg04, #0
23eb8     01 1A 06 F6 | 	mov	arg05, #1
23ebc     0A 00 00 FF 
23ec0     DB E5 05 F1 | 	add	objptr, ##5595
23ec4     18 28 62 FD | 	getqx	local02
23ec8     09 29 02 F1 | 	add	local02, arg01
23ecc     14 27 02 F1 | 	add	local01, local02
23ed0     13 13 02 F6 | 	mov	arg01, local01
23ed4     0C 1D B0 FD | 	call	#_psram_spin2_fill
23ed8     0B 00 00 FF 
23edc     CC E4 85 F1 | 	sub	objptr, ##5836
23ee0     A7 F0 03 F6 | 	mov	ptra, fp
23ee4     B2 00 A0 FD | 	call	#popregs_
23ee8                 | _hg010b_spin2_putpixel2_ret
23ee8     2D 00 64 FD | 	ret
23eec                 | 
23eec                 | ' 
23eec                 | ' pub getpixel2(x,y): c 
23eec                 | _hg010b_spin2_getpixel2
23eec     02 4A 05 F6 | 	mov	COUNT_, #2
23ef0     A8 00 A0 FD | 	call	#pushregs_
23ef4     0C F0 07 F1 | 	add	ptra, #12
23ef8     04 4E 05 F1 | 	add	fp, #4
23efc     A7 12 62 FC | 	wrlong	arg01, fp
23f00     04 4E 05 F1 | 	add	fp, #4
23f04     A7 14 62 FC | 	wrlong	arg02, fp
23f08     08 4E 85 F1 | 	sub	fp, #8
23f0c     A7 00 68 FC | 	wrlong	#0, fp
23f10     A7 12 02 F6 | 	mov	arg01, fp
23f14     DD E4 05 F1 | 	add	objptr, #221
23f18     F2 14 02 FB | 	rdlong	arg02, objptr
23f1c     14 E4 05 F1 | 	add	objptr, #20
23f20     F2 16 02 FB | 	rdlong	arg03, objptr
23f24     02 16 66 F0 | 	shl	arg03, #2
23f28     08 4E 05 F1 | 	add	fp, #8
23f2c     A7 FA 01 FB | 	rdlong	result1, fp
23f30     FD 16 02 FD | 	qmul	arg03, result1
23f34                 | ' 
23f34                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
23f34     04 4E 85 F1 | 	sub	fp, #4
23f38     A7 26 02 FB | 	rdlong	local01, fp
23f3c     04 4E 85 F1 | 	sub	fp, #4
23f40     01 16 06 F6 | 	mov	arg03, #1
23f44     0A 00 00 FF 
23f48     DB E5 05 F1 | 	add	objptr, ##5595
23f4c     18 28 62 FD | 	getqx	local02
23f50     13 29 02 F1 | 	add	local02, local01
23f54     14 15 02 F1 | 	add	arg02, local02
23f58     50 1B B0 FD | 	call	#_psram_spin2_read1
23f5c     0B 00 00 FF 
23f60     CC E4 85 F1 | 	sub	objptr, ##5836
23f64                 | ' return c
23f64     A7 FA 01 FB | 	rdlong	result1, fp
23f68     A7 F0 03 F6 | 	mov	ptra, fp
23f6c     B2 00 A0 FD | 	call	#popregs_
23f70                 | _hg010b_spin2_getpixel2_ret
23f70     2D 00 64 FD | 	ret
23f74                 | 
23f74                 | '   
23f74                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
23f74                 | ' 
23f74                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
23f74                 | _hg010b_spin2_fastline
23f74     02 4A 05 F6 | 	mov	COUNT_, #2
23f78     A8 00 A0 FD | 	call	#pushregs_
23f7c     09 27 02 F6 | 	mov	local01, arg01
23f80     0A 29 02 F6 | 	mov	local02, arg02
23f84                 | ' 
23f84                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
23f84     00 16 56 F2 | 	cmps	arg03, #0 wc
23f88     F4 00 90 CD |  if_b	jmp	#LR__2750
23f8c     01 00 00 FF 
23f90     2A E4 05 F1 | 	add	objptr, ##554
23f94     F2 1A 02 FB | 	rdlong	arg05, objptr
23f98     01 00 00 FF 
23f9c     2A E4 85 F1 | 	sub	objptr, ##554
23fa0     0D 17 52 F2 | 	cmps	arg03, arg05 wc
23fa4     D8 00 90 3D |  if_ae	jmp	#LR__2750
23fa8     00 26 56 F2 | 	cmps	local01, #0 wc
23fac     00 28 56 C2 |  if_b	cmps	local02, #0 wc
23fb0     CC 00 90 CD |  if_b	jmp	#LR__2750
23fb4     01 00 00 FF 
23fb8     26 E4 05 F1 | 	add	objptr, ##550
23fbc     F2 1A 02 FB | 	rdlong	arg05, objptr
23fc0     01 00 00 FF 
23fc4     26 E4 85 F1 | 	sub	objptr, ##550
23fc8     0D 27 5A F2 | 	cmps	local01, arg05 wcz
23fcc     01 00 00 1F 
23fd0     26 E4 05 11 |  if_a	add	objptr, ##550
23fd4     F2 12 02 1B |  if_a	rdlong	arg01, objptr
23fd8     01 00 00 1F 
23fdc     26 E4 85 11 |  if_a	sub	objptr, ##550
23fe0     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
23fe4                 | '   return
23fe4     98 00 90 1D |  if_a	jmp	#LR__2750
23fe8     14 27 5A F2 | 	cmps	local01, local02 wcz
23fec     13 1B 02 16 |  if_a	mov	arg05, local01
23ff0     14 27 02 16 |  if_a	mov	local01, local02
23ff4     0D 29 02 16 |  if_a	mov	local02, arg05
23ff8     00 26 56 F2 | 	cmps	local01, #0 wc
23ffc     00 26 06 C6 |  if_b	mov	local01, #0
24000     01 00 00 FF 
24004     26 E4 05 F1 | 	add	objptr, ##550
24008     F2 1A 02 FB | 	rdlong	arg05, objptr
2400c     01 00 00 FF 
24010     26 E4 85 F1 | 	sub	objptr, ##550
24014     0D 29 52 F2 | 	cmps	local02, arg05 wc
24018     01 00 00 3F 
2401c     26 E4 05 31 |  if_ae	add	objptr, ##550
24020     F2 28 02 3B |  if_ae	rdlong	local02, objptr
24024     01 00 00 3F 
24028     26 E4 85 31 |  if_ae	sub	objptr, ##550
2402c     DD E4 05 F1 | 	add	objptr, #221
24030     F2 12 02 FB | 	rdlong	arg01, objptr
24034     14 E4 05 F1 | 	add	objptr, #20
24038     F2 1A 02 FB | 	rdlong	arg05, objptr
2403c     02 1A 66 F0 | 	shl	arg05, #2
24040     0B 1B 02 FD | 	qmul	arg05, arg03
24044                 | ' if x1>x2
24044                 | '   x1,x2:=x2,x1
24044                 | ' if x1<0 
24044                 | '   x1:=0
24044                 | ' if x2>=xres
24044                 | '   x2:=xres-1  
24044     01 28 86 31 |  if_ae	sub	local02, #1
24048                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
24048     01 16 06 F6 | 	mov	arg03, #1
2404c     14 17 02 F1 | 	add	arg03, local02
24050     13 17 82 F1 | 	sub	arg03, local01
24054     0C 15 02 F6 | 	mov	arg02, arg04
24058     00 18 06 F6 | 	mov	arg04, #0
2405c     01 1A 06 F6 | 	mov	arg05, #1
24060     0A 00 00 FF 
24064     DB E5 05 F1 | 	add	objptr, ##5595
24068     18 28 62 FD | 	getqx	local02
2406c     13 29 02 F1 | 	add	local02, local01
24070     14 13 02 F1 | 	add	arg01, local02
24074     6C 1B B0 FD | 	call	#_psram_spin2_fill
24078     0B 00 00 FF 
2407c     CC E4 85 F1 | 	sub	objptr, ##5836
24080                 | LR__2750
24080     A7 F0 03 F6 | 	mov	ptra, fp
24084     B2 00 A0 FD | 	call	#popregs_
24088                 | _hg010b_spin2_fastline_ret
24088     2D 00 64 FD | 	ret
2408c                 | 
2408c                 | ' 
2408c                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
2408c                 | _hg010b_spin2_draw
2408c     0E 4A 05 F6 | 	mov	COUNT_, #14
24090     A8 00 A0 FD | 	call	#pushregs_
24094     09 27 02 F6 | 	mov	local01, arg01
24098     0A 29 02 F6 | 	mov	local02, arg02
2409c     0B 2B 02 F6 | 	mov	local03, arg03
240a0     0C 2D 02 F6 | 	mov	local04, arg04
240a4     0D 2F 02 F6 | 	mov	local05, arg05
240a8                 | ' 
240a8                 | ' if (y1==y2)
240a8     16 29 0A F2 | 	cmp	local02, local04 wz
240ac     18 00 90 5D |  if_ne	jmp	#LR__2760
240b0                 | '   fastline(x1,x2,y1,c)
240b0     13 13 02 F6 | 	mov	arg01, local01
240b4     15 15 02 F6 | 	mov	arg02, local03
240b8     14 17 02 F6 | 	mov	arg03, local02
240bc     17 19 02 F6 | 	mov	arg04, local05
240c0     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
240c4     F8 00 90 FD | 	jmp	#LR__2766
240c8                 | LR__2760
240c8                 | ' else  
240c8                 | '   x:=x1
240c8     13 31 02 F6 | 	mov	local06, local01
240cc                 | '   y:=y1
240cc     14 33 02 F6 | 	mov	local07, local02
240d0                 | ' 
240d0                 | '   if (x1<x2) 
240d0     15 27 52 F2 | 	cmps	local01, local03 wc
240d4                 | '     xi:=1
240d4     01 34 06 C6 |  if_b	mov	local08, #1
240d8                 | '     dx:=x2-x1
240d8     15 37 02 C6 |  if_b	mov	local09, local03
240dc     13 37 82 C1 |  if_b	sub	local09, local01
240e0                 | '   else
240e0                 | '     xi:=-1
240e0     01 34 66 36 |  if_ae	neg	local08, #1
240e4                 | '     dx:=x1-x2
240e4     15 27 82 31 |  if_ae	sub	local01, local03
240e8     13 37 02 36 |  if_ae	mov	local09, local01
240ec                 | '   
240ec                 | '   if (y1<y2) 
240ec     16 29 52 F2 | 	cmps	local02, local04 wc
240f0                 | '     yi:=1
240f0     01 38 06 C6 |  if_b	mov	local10, #1
240f4                 | '     dy:=y2-y1
240f4     16 3B 02 C6 |  if_b	mov	local11, local04
240f8     14 3B 82 C1 |  if_b	sub	local11, local02
240fc                 | '   else
240fc                 | '     yi:=-1
240fc     01 38 66 36 |  if_ae	neg	local10, #1
24100                 | '     dy:=y1-y2
24100     16 29 82 31 |  if_ae	sub	local02, local04
24104     14 3B 02 36 |  if_ae	mov	local11, local02
24108                 | ' 
24108                 | '   putpixel(x,y,c)
24108     17 17 02 F6 | 	mov	arg03, local05
2410c     18 13 02 F6 | 	mov	arg01, local06
24110     19 15 02 F6 | 	mov	arg02, local07
24114     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
24118                 | ' 
24118                 | '   if (dx>dy)
24118     1D 37 5A F2 | 	cmps	local09, local11 wcz
2411c     50 00 90 ED |  if_be	jmp	#LR__2762
24120                 | '     ai:=(dy-dx)*2
24120     1D 3D 02 F6 | 	mov	local12, local11
24124     1B 3D 82 F1 | 	sub	local12, local09
24128     01 3C 66 F0 | 	shl	local12, #1
2412c                 | '     bi:=dy*2
2412c     01 3A 66 F0 | 	shl	local11, #1
24130     1D 3F 02 F6 | 	mov	local13, local11
24134                 | '     d:= bi-dx
24134     1F 41 02 F6 | 	mov	local14, local13
24138     1B 41 82 F1 | 	sub	local14, local09
2413c                 | '     repeat while (x<>x2) 
2413c                 | LR__2761
2413c     15 31 0A F2 | 	cmp	local06, local03 wz
24140     7C 00 90 AD |  if_e	jmp	#LR__2765
24144                 | '       if (d>=0) 
24144     00 40 56 F2 | 	cmps	local14, #0 wc
24148                 | '         x+=xi
24148     1A 31 02 31 |  if_ae	add	local06, local08
2414c                 | '         y+=yi
2414c     1C 33 02 31 |  if_ae	add	local07, local10
24150                 | '         d+=ai
24150     1E 41 02 31 |  if_ae	add	local14, local12
24154                 | '       else
24154                 | '         d+=bi
24154     1F 41 02 C1 |  if_b	add	local14, local13
24158                 | '         x+=xi
24158     1A 31 02 C1 |  if_b	add	local06, local08
2415c                 | '       putpixel(x,y,c)
2415c     18 13 02 F6 | 	mov	arg01, local06
24160     19 15 02 F6 | 	mov	arg02, local07
24164     17 17 02 F6 | 	mov	arg03, local05
24168     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
2416c     CC FF 9F FD | 	jmp	#LR__2761
24170                 | LR__2762
24170                 | '   else
24170                 | '     ai:=(dx-dy)*2
24170     1B 3D 02 F6 | 	mov	local12, local09
24174     1D 3D 82 F1 | 	sub	local12, local11
24178     01 3C 66 F0 | 	shl	local12, #1
2417c                 | '     bi:=dx*2
2417c     01 36 66 F0 | 	shl	local09, #1
24180     1B 3F 02 F6 | 	mov	local13, local09
24184                 | '     d:=bi-dy
24184     1F 41 02 F6 | 	mov	local14, local13
24188     1D 41 82 F1 | 	sub	local14, local11
2418c                 | '     repeat while (y<>y2)
2418c                 | LR__2763
2418c     16 33 0A F2 | 	cmp	local07, local04 wz
24190     2C 00 90 AD |  if_e	jmp	#LR__2764
24194                 | '       if (d>=0)
24194     00 40 56 F2 | 	cmps	local14, #0 wc
24198                 | '         x+=xi
24198     1A 31 02 31 |  if_ae	add	local06, local08
2419c                 | '         y+=yi
2419c     1C 33 02 31 |  if_ae	add	local07, local10
241a0                 | '         d+=ai
241a0     1E 41 02 31 |  if_ae	add	local14, local12
241a4                 | '       else
241a4                 | '         d+=bi
241a4     1F 41 02 C1 |  if_b	add	local14, local13
241a8                 | '         y+=yi
241a8     1C 33 02 C1 |  if_b	add	local07, local10
241ac                 | '       putpixel(x, y,c)
241ac     18 13 02 F6 | 	mov	arg01, local06
241b0     19 15 02 F6 | 	mov	arg02, local07
241b4     17 17 02 F6 | 	mov	arg03, local05
241b8     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
241bc     CC FF 9F FD | 	jmp	#LR__2763
241c0                 | LR__2764
241c0                 | LR__2765
241c0                 | LR__2766
241c0     A7 F0 03 F6 | 	mov	ptra, fp
241c4     B2 00 A0 FD | 	call	#popregs_
241c8                 | _hg010b_spin2_draw_ret
241c8     2D 00 64 FD | 	ret
241cc                 | 
241cc                 | '  
241cc                 | ' pub fillpush(val) 
241cc                 | _hg010b_spin2_fillpush
241cc                 | ' fillstack[fillptr]:=val
241cc     0B 00 00 FF 
241d0     BA E4 05 F1 | 	add	objptr, ##5818
241d4     F2 00 02 FB | 	rdlong	_var01, objptr
241d8     02 00 66 F0 | 	shl	_var01, #2
241dc     0A 00 00 FF 
241e0     00 E4 85 F1 | 	sub	objptr, ##5120
241e4     F2 00 02 F1 | 	add	_var01, objptr
241e8     00 13 62 FC | 	wrlong	arg01, _var01
241ec                 | ' fillptr+=1   
241ec     0A 00 00 FF 
241f0     00 E4 05 F1 | 	add	objptr, ##5120
241f4     F2 00 02 FB | 	rdlong	_var01, objptr
241f8     01 00 06 F1 | 	add	_var01, #1
241fc     F2 00 62 FC | 	wrlong	_var01, objptr
24200     0B 00 00 FF 
24204     BA E4 85 F1 | 	sub	objptr, ##5818
24208                 | _hg010b_spin2_fillpush_ret
24208     2D 00 64 FD | 	ret
2420c                 | 
2420c                 | ' 
2420c                 | '     
2420c                 | ' pub fillpop() : val
2420c                 | _hg010b_spin2_fillpop
2420c                 | ' 
2420c                 | ' fillptr-=1
2420c     0B 00 00 FF 
24210     BA E4 05 F1 | 	add	objptr, ##5818
24214     F2 FA 01 FB | 	rdlong	result1, objptr
24218     01 FA 85 F1 | 	sub	result1, #1
2421c     F2 FA 61 FC | 	wrlong	result1, objptr
24220                 | ' if fillptr<0
24220     0B 00 00 FF 
24224     BA E4 85 F1 | 	sub	objptr, ##5818
24228     00 FA 55 F2 | 	cmps	result1, #0 wc
2422c                 | '   fillptr:=0
2422c     0B 00 00 CF 
24230     BA E4 05 C1 |  if_b	add	objptr, ##5818
24234     F2 00 68 CC |  if_b	wrlong	#0, objptr
24238     0B 00 00 CF 
2423c     BA E4 85 C1 |  if_b	sub	objptr, ##5818
24240                 | '   val:=-12345
24240     E7 FF 7F CF 
24244     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
24248     28 00 90 CD |  if_b	jmp	#LR__2770
2424c                 | ' else 
2424c                 | '   val:=fillstack[fillptr]
2424c     0B 00 00 FF 
24250     BA E4 05 F1 | 	add	objptr, ##5818
24254     F2 00 02 FB | 	rdlong	_var01, objptr
24258     02 00 66 F0 | 	shl	_var01, #2
2425c     0A 00 00 FF 
24260     00 E4 85 F1 | 	sub	objptr, ##5120
24264     F2 00 02 F1 | 	add	_var01, objptr
24268     00 01 02 FB | 	rdlong	_var01, _var01
2426c     01 00 00 FF 
24270     BA E4 85 F1 | 	sub	objptr, ##698
24274                 | LR__2770
24274                 | ' return val
24274     00 FB 01 F6 | 	mov	result1, _var01
24278                 | _hg010b_spin2_fillpop_ret
24278     2D 00 64 FD | 	ret
2427c                 | 
2427c                 | ' 
2427c                 | '       
2427c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
2427c                 | _hg010b_spin2_fill
2427c     0B 4A 05 F6 | 	mov	COUNT_, #11
24280     A8 00 A0 FD | 	call	#pushregs_
24284                 | ' 
24284                 | ' newcolor:=newcolor & 255
24284     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
24288                 | ' oldcolor:=oldcolor & 255
24288     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
2428c                 | ' 
2428c                 | ' if (oldcolor == newcolor) 
2428c     13 29 0A F2 | 	cmp	local02, local01 wz
24290                 | '   return
24290     70 02 90 AD |  if_e	jmp	#LR__2789
24294                 | ' 
24294                 | ' fillptr:=0
24294     0B 00 00 FF 
24298     BA E4 05 F1 | 	add	objptr, ##5818
2429c     F2 00 68 FC | 	wrlong	#0, objptr
242a0                 | ' fillmax:=0
242a0     04 E4 05 F1 | 	add	objptr, #4
242a4     F2 00 68 FC | 	wrlong	#0, objptr
242a8     0B 00 00 FF 
242ac     BE E4 85 F1 | 	sub	objptr, ##5822
242b0                 | ' fillpush(x)
242b0     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
242b4                 | ' fillpush(y)
242b4     0A 13 02 F6 | 	mov	arg01, arg02
242b8     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
242bc                 | ' y:=fillpop()
242bc     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
242c0     FD 2A 02 F6 | 	mov	local03, result1
242c4                 | ' x:=fillpop()
242c4     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
242c8     FD 2C 02 F6 | 	mov	local04, result1
242cc                 | ' 'pinhigh(38)
242cc                 | ' repeat while (x>-1)       
242cc                 | LR__2780
242cc     00 2C 56 F2 | 	cmps	local04, #0 wc
242d0     30 02 90 CD |  if_b	jmp	#LR__2788
242d4                 | '  ' pintoggle(39)
242d4                 | '   x1 := x
242d4     16 2F 02 F6 | 	mov	local05, local04
242d8                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
242d8                 | LR__2781
242d8     00 30 06 F6 | 	mov	local06, #0
242dc     00 32 06 F6 | 	mov	local07, #0
242e0     00 2E 56 F2 | 	cmps	local05, #0 wc
242e4     01 32 66 36 |  if_ae	neg	local07, #1
242e8     00 32 0E F2 | 	cmp	local07, #0 wz
242ec     00 30 26 56 |  if_ne	not	local06, #0
242f0     00 34 06 F6 | 	mov	local08, #0
242f4     00 36 06 F6 | 	mov	local09, #0
242f8     15 15 02 F6 | 	mov	arg02, local03
242fc     17 13 02 F6 | 	mov	arg01, local05
24300     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
24304     14 FB 09 F2 | 	cmp	result1, local02 wz
24308     00 36 26 A6 |  if_e	not	local09, #0
2430c     00 36 0E F2 | 	cmp	local09, #0 wz
24310     00 34 26 56 |  if_ne	not	local08, #0
24314     1A 31 CA F7 | 	test	local06, local08 wz
24318                 | '     x1--
24318     01 2E 86 51 |  if_ne	sub	local05, #1
2431c     B8 FF 9F 5D |  if_ne	jmp	#LR__2781
24320                 | '   x1++
24320     01 2E 06 F1 | 	add	local05, #1
24324                 | '   spanabove := 0
24324     00 38 06 F6 | 	mov	local10, #0
24328                 | '   spanbelow := 0
24328     00 3A 06 F6 | 	mov	local11, #0
2432c                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
2432c                 | LR__2782
2432c     00 30 06 F6 | 	mov	local06, #0
24330     02 00 00 FF 
24334     00 2E 56 F2 | 	cmps	local05, ##1024 wc
24338     00 30 26 C6 |  if_b	not	local06, #0
2433c     00 34 06 F6 | 	mov	local08, #0
24340     00 36 06 F6 | 	mov	local09, #0
24344     15 15 02 F6 | 	mov	arg02, local03
24348     17 13 02 F6 | 	mov	arg01, local05
2434c     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
24350     14 FB 09 F2 | 	cmp	result1, local02 wz
24354     00 36 26 A6 |  if_e	not	local09, #0
24358     00 36 0E F2 | 	cmp	local09, #0 wz
2435c     00 34 26 56 |  if_ne	not	local08, #0
24360     1A 31 CA F7 | 	test	local06, local08 wz
24364     88 01 90 AD |  if_e	jmp	#LR__2787
24368                 | '     putpixel2 (x1,y, newcolor & 255)
24368     13 17 E2 F8 | 	getbyte	arg03, local01, #0
2436c     17 13 02 F6 | 	mov	arg01, local05
24370     15 15 02 F6 | 	mov	arg02, local03
24374     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
24378                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
24378     00 30 06 F6 | 	mov	local06, #0
2437c     00 32 06 F6 | 	mov	local07, #0
24380     00 38 0E F2 | 	cmp	local10, #0 wz
24384     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
24388     01 32 66 26 |  if_nc_and_z	neg	local07, #1
2438c     00 32 0E F2 | 	cmp	local07, #0 wz
24390     00 30 26 56 |  if_ne	not	local06, #0
24394     00 34 06 F6 | 	mov	local08, #0
24398     00 36 06 F6 | 	mov	local09, #0
2439c     15 15 02 F6 | 	mov	arg02, local03
243a0     01 14 86 F1 | 	sub	arg02, #1
243a4     17 13 02 F6 | 	mov	arg01, local05
243a8     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
243ac     14 FB 09 F2 | 	cmp	result1, local02 wz
243b0     00 36 26 A6 |  if_e	not	local09, #0
243b4     00 36 0E F2 | 	cmp	local09, #0 wz
243b8     00 34 26 56 |  if_ne	not	local08, #0
243bc     1A 31 CA F7 | 	test	local06, local08 wz
243c0     1C 00 90 AD |  if_e	jmp	#LR__2783
243c4                 | '       fillpush(x1)
243c4     17 13 02 F6 | 	mov	arg01, local05
243c8     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
243cc                 | '       fillpush(y-1)
243cc     15 13 02 F6 | 	mov	arg01, local03
243d0     01 12 86 F1 | 	sub	arg01, #1
243d4     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
243d8                 | '       spanabove := 1 
243d8     01 38 06 F6 | 	mov	local10, #1
243dc     4C 00 90 FD | 	jmp	#LR__2784
243e0                 | LR__2783
243e0                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
243e0     00 30 06 F6 | 	mov	local06, #0
243e4     00 32 06 F6 | 	mov	local07, #0
243e8     00 38 0E F2 | 	cmp	local10, #0 wz
243ec     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
243f0     01 32 66 16 |  if_a	neg	local07, #1
243f4     00 32 0E F2 | 	cmp	local07, #0 wz
243f8     00 30 26 56 |  if_ne	not	local06, #0
243fc     00 34 06 F6 | 	mov	local08, #0
24400     00 36 06 F6 | 	mov	local09, #0
24404     15 15 02 F6 | 	mov	arg02, local03
24408     01 14 86 F1 | 	sub	arg02, #1
2440c     17 13 02 F6 | 	mov	arg01, local05
24410     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
24414     14 FB 09 F2 | 	cmp	result1, local02 wz
24418     00 36 26 56 |  if_ne	not	local09, #0
2441c     00 36 0E F2 | 	cmp	local09, #0 wz
24420     00 34 26 56 |  if_ne	not	local08, #0
24424     1A 31 CA F7 | 	test	local06, local08 wz
24428                 | '       spanabove := 0 
24428     00 38 06 56 |  if_ne	mov	local10, #0
2442c                 | LR__2784
2442c                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
2442c     00 30 06 F6 | 	mov	local06, #0
24430     00 32 06 F6 | 	mov	local07, #0
24434     00 3A 0E F2 | 	cmp	local11, #0 wz
24438     01 00 00 AF 
2443c     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
24440     01 32 66 86 |  if_c_and_z	neg	local07, #1
24444     00 32 0E F2 | 	cmp	local07, #0 wz
24448     00 30 26 56 |  if_ne	not	local06, #0
2444c     00 34 06 F6 | 	mov	local08, #0
24450     00 36 06 F6 | 	mov	local09, #0
24454     15 15 02 F6 | 	mov	arg02, local03
24458     01 14 06 F1 | 	add	arg02, #1
2445c     17 13 02 F6 | 	mov	arg01, local05
24460     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
24464     14 FB 09 F2 | 	cmp	result1, local02 wz
24468     00 36 26 A6 |  if_e	not	local09, #0
2446c     00 36 0E F2 | 	cmp	local09, #0 wz
24470     00 34 26 56 |  if_ne	not	local08, #0
24474     1A 31 CA F7 | 	test	local06, local08 wz
24478     1C 00 90 AD |  if_e	jmp	#LR__2785
2447c                 | '       fillpush(x1)
2447c     17 13 02 F6 | 	mov	arg01, local05
24480     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
24484                 | '       fillpush(y + 1)
24484     15 13 02 F6 | 	mov	arg01, local03
24488     01 12 06 F1 | 	add	arg01, #1
2448c     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
24490                 | '       spanBelow := 1
24490     01 3A 06 F6 | 	mov	local11, #1
24494     50 00 90 FD | 	jmp	#LR__2786
24498                 | LR__2785
24498                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
24498     00 30 06 F6 | 	mov	local06, #0
2449c     00 32 06 F6 | 	mov	local07, #0
244a0     00 3A 0E F2 | 	cmp	local11, #0 wz
244a4     01 00 00 5F 
244a8     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
244ac     01 32 66 46 |  if_c_and_nz	neg	local07, #1
244b0     00 32 0E F2 | 	cmp	local07, #0 wz
244b4     00 30 26 56 |  if_ne	not	local06, #0
244b8     00 34 06 F6 | 	mov	local08, #0
244bc     00 36 06 F6 | 	mov	local09, #0
244c0     15 15 02 F6 | 	mov	arg02, local03
244c4     01 14 06 F1 | 	add	arg02, #1
244c8     17 13 02 F6 | 	mov	arg01, local05
244cc     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
244d0     14 FB 09 F2 | 	cmp	result1, local02 wz
244d4     00 36 26 56 |  if_ne	not	local09, #0
244d8     00 36 0E F2 | 	cmp	local09, #0 wz
244dc     00 34 26 56 |  if_ne	not	local08, #0
244e0     1A 31 CA F7 | 	test	local06, local08 wz
244e4                 | '       spanbelow := 0
244e4     00 3A 06 56 |  if_ne	mov	local11, #0
244e8                 | LR__2786
244e8                 | '     x1++
244e8     01 2E 06 F1 | 	add	local05, #1
244ec     3C FE 9F FD | 	jmp	#LR__2782
244f0                 | LR__2787
244f0                 | '   y:=fillpop()
244f0     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
244f4     FD 2A 02 F6 | 	mov	local03, result1
244f8                 | '   x:=fillpop()
244f8     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
244fc     FD 2C 02 F6 | 	mov	local04, result1
24500     C8 FD 9F FD | 	jmp	#LR__2780
24504                 | LR__2788
24504                 | LR__2789
24504     A7 F0 03 F6 | 	mov	ptra, fp
24508     B2 00 A0 FD | 	call	#popregs_
2450c                 | _hg010b_spin2_fill_ret
2450c     2D 00 64 FD | 	ret
24510                 | 
24510                 | ' 'pinlow(38)    
24510                 | ' 
24510                 | ' '-- A filled circle -----------------------------------------------------
24510                 | ' 
24510                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
24510                 | _hg010b_spin2_fcircle
24510     08 4A 05 F6 | 	mov	COUNT_, #8
24514     A8 00 A0 FD | 	call	#pushregs_
24518     0B 27 02 F6 | 	mov	local01, arg03
2451c     FF FF 7F FF 
24520     FE 27 06 FD | 	qmul	local01, ##-2
24524     09 29 02 F6 | 	mov	local02, arg01
24528     0A 2B 02 F6 | 	mov	local03, arg02
2452c     0C 2D 02 F6 | 	mov	local04, arg04
24530                 | ' 
24530                 | ' d:=5-4*r
24530     13 19 02 F6 | 	mov	arg04, local01
24534     02 18 66 F0 | 	shl	arg04, #2
24538     05 2E 06 F6 | 	mov	local05, #5
2453c     0C 2F 82 F1 | 	sub	local05, arg04
24540                 | ' x:=0
24540     00 30 06 F6 | 	mov	local06, #0
24544                 | ' y:=r
24544                 | ' da:=(-2*r+5)*4
24544                 | ' db:=3*4
24544     0C 32 06 F6 | 	mov	local07, #12
24548                 | ' repeat while (x<=y) 
24548     18 34 62 FD | 	getqx	local08
2454c     05 34 06 F1 | 	add	local08, #5
24550     02 34 66 F0 | 	shl	local08, #2
24554                 | LR__2790
24554     13 31 5A F2 | 	cmps	local06, local01 wcz
24558     B4 00 90 1D |  if_a	jmp	#LR__2792
2455c                 | '   fastline(x0-x,x0+x,y0-y,c)
2455c     14 13 02 F6 | 	mov	arg01, local02
24560     18 13 82 F1 | 	sub	arg01, local06
24564     14 15 02 F6 | 	mov	arg02, local02
24568     18 15 02 F1 | 	add	arg02, local06
2456c     15 17 02 F6 | 	mov	arg03, local03
24570     13 17 82 F1 | 	sub	arg03, local01
24574     16 19 02 F6 | 	mov	arg04, local04
24578     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
2457c                 | '   fastline(x0-x,x0+x,y0+y,c)
2457c     14 13 02 F6 | 	mov	arg01, local02
24580     18 13 82 F1 | 	sub	arg01, local06
24584     14 15 02 F6 | 	mov	arg02, local02
24588     18 15 02 F1 | 	add	arg02, local06
2458c     15 17 02 F6 | 	mov	arg03, local03
24590     13 17 02 F1 | 	add	arg03, local01
24594     16 19 02 F6 | 	mov	arg04, local04
24598     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
2459c                 | '   fastline(x0-y,x0+y,y0-x,c)
2459c     14 13 02 F6 | 	mov	arg01, local02
245a0     13 13 82 F1 | 	sub	arg01, local01
245a4     14 15 02 F6 | 	mov	arg02, local02
245a8     13 15 02 F1 | 	add	arg02, local01
245ac     15 17 02 F6 | 	mov	arg03, local03
245b0     18 17 82 F1 | 	sub	arg03, local06
245b4     16 19 02 F6 | 	mov	arg04, local04
245b8     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
245bc                 | '   fastline(x0-y,x0+y,y0+x,c)
245bc     14 13 02 F6 | 	mov	arg01, local02
245c0     13 13 82 F1 | 	sub	arg01, local01
245c4     14 15 02 F6 | 	mov	arg02, local02
245c8     13 15 02 F1 | 	add	arg02, local01
245cc     15 17 02 F6 | 	mov	arg03, local03
245d0     18 17 02 F1 | 	add	arg03, local06
245d4     16 19 02 F6 | 	mov	arg04, local04
245d8     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
245dc                 | '   if d>0 
245dc     01 2E 56 F2 | 	cmps	local05, #1 wc
245e0     18 00 90 CD |  if_b	jmp	#LR__2791
245e4                 | '     d+=da
245e4     1A 2F 02 F1 | 	add	local05, local08
245e8                 | '     y-=1
245e8     01 26 86 F1 | 	sub	local01, #1
245ec                 | '     x+=1
245ec     01 30 06 F1 | 	add	local06, #1
245f0                 | '     da+=4*4
245f0     10 34 06 F1 | 	add	local08, #16
245f4                 | '     db+=2*4
245f4     08 32 06 F1 | 	add	local07, #8
245f8     58 FF 9F FD | 	jmp	#LR__2790
245fc                 | LR__2791
245fc                 | '   else
245fc                 | '     d+=db
245fc     19 2F 02 F1 | 	add	local05, local07
24600                 | '     x+=1
24600     01 30 06 F1 | 	add	local06, #1
24604                 | '     da+=2*4
24604     08 34 06 F1 | 	add	local08, #8
24608                 | '     db+=2*4
24608     08 32 06 F1 | 	add	local07, #8
2460c     44 FF 9F FD | 	jmp	#LR__2790
24610                 | LR__2792
24610     A7 F0 03 F6 | 	mov	ptra, fp
24614     B2 00 A0 FD | 	call	#popregs_
24618                 | _hg010b_spin2_fcircle_ret
24618     2D 00 64 FD | 	ret
2461c                 | 
2461c                 | '  
2461c                 | ' '-- A circle ------------------------------------------------------------ 
2461c                 | '  
2461c                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
2461c                 | _hg010b_spin2_circle
2461c     08 4A 05 F6 | 	mov	COUNT_, #8
24620     A8 00 A0 FD | 	call	#pushregs_
24624     0B 27 02 F6 | 	mov	local01, arg03
24628     FF FF 7F FF 
2462c     FE 27 06 FD | 	qmul	local01, ##-2
24630     09 29 02 F6 | 	mov	local02, arg01
24634     0A 2B 02 F6 | 	mov	local03, arg02
24638     0C 2D 02 F6 | 	mov	local04, arg04
2463c                 | ' 
2463c                 | '  
2463c                 | ' d:=5-4*r
2463c     13 19 02 F6 | 	mov	arg04, local01
24640     02 18 66 F0 | 	shl	arg04, #2
24644     05 2E 06 F6 | 	mov	local05, #5
24648     0C 2F 82 F1 | 	sub	local05, arg04
2464c                 | ' x:=0
2464c     00 30 06 F6 | 	mov	local06, #0
24650                 | ' y:=r
24650                 | ' da:=(-2*r+5)*4
24650                 | ' db:=3*4
24650     0C 32 06 F6 | 	mov	local07, #12
24654                 | ' repeat while (x<=y) 
24654     18 34 62 FD | 	getqx	local08
24658     05 34 06 F1 | 	add	local08, #5
2465c     02 34 66 F0 | 	shl	local08, #2
24660                 | LR__2800
24660     13 31 5A F2 | 	cmps	local06, local01 wcz
24664     F4 00 90 1D |  if_a	jmp	#LR__2802
24668                 | '   putpixel(x0-x,y0-y,c)
24668     14 13 02 F6 | 	mov	arg01, local02
2466c     18 13 82 F1 | 	sub	arg01, local06
24670     15 15 02 F6 | 	mov	arg02, local03
24674     13 15 82 F1 | 	sub	arg02, local01
24678     16 17 02 F6 | 	mov	arg03, local04
2467c     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
24680                 | '   putpixel(x0-x,y0+y,c)
24680     14 13 02 F6 | 	mov	arg01, local02
24684     18 13 82 F1 | 	sub	arg01, local06
24688     15 15 02 F6 | 	mov	arg02, local03
2468c     13 15 02 F1 | 	add	arg02, local01
24690     16 17 02 F6 | 	mov	arg03, local04
24694     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
24698                 | '   putpixel(x0+x,y0-y,c)
24698     14 13 02 F6 | 	mov	arg01, local02
2469c     18 13 02 F1 | 	add	arg01, local06
246a0     15 15 02 F6 | 	mov	arg02, local03
246a4     13 15 82 F1 | 	sub	arg02, local01
246a8     16 17 02 F6 | 	mov	arg03, local04
246ac     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
246b0                 | '   putpixel(x0+x,y0+y,c)
246b0     14 13 02 F6 | 	mov	arg01, local02
246b4     18 13 02 F1 | 	add	arg01, local06
246b8     15 15 02 F6 | 	mov	arg02, local03
246bc     13 15 02 F1 | 	add	arg02, local01
246c0     16 17 02 F6 | 	mov	arg03, local04
246c4     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
246c8                 | '   putpixel(x0-y,y0-x,c)
246c8     14 13 02 F6 | 	mov	arg01, local02
246cc     13 13 82 F1 | 	sub	arg01, local01
246d0     15 15 02 F6 | 	mov	arg02, local03
246d4     18 15 82 F1 | 	sub	arg02, local06
246d8     16 17 02 F6 | 	mov	arg03, local04
246dc     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
246e0                 | '   putpixel(x0-y,y0+x,c)
246e0     14 13 02 F6 | 	mov	arg01, local02
246e4     13 13 82 F1 | 	sub	arg01, local01
246e8     15 15 02 F6 | 	mov	arg02, local03
246ec     18 15 02 F1 | 	add	arg02, local06
246f0     16 17 02 F6 | 	mov	arg03, local04
246f4     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
246f8                 | '   putpixel(x0+y,y0-x,c)
246f8     14 13 02 F6 | 	mov	arg01, local02
246fc     13 13 02 F1 | 	add	arg01, local01
24700     15 15 02 F6 | 	mov	arg02, local03
24704     18 15 82 F1 | 	sub	arg02, local06
24708     16 17 02 F6 | 	mov	arg03, local04
2470c     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
24710                 | '   putpixel(x0+y,y0+x,c)
24710     14 13 02 F6 | 	mov	arg01, local02
24714     13 13 02 F1 | 	add	arg01, local01
24718     15 15 02 F6 | 	mov	arg02, local03
2471c     18 15 02 F1 | 	add	arg02, local06
24720     16 17 02 F6 | 	mov	arg03, local04
24724     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
24728                 | '   if d>0 
24728     01 2E 56 F2 | 	cmps	local05, #1 wc
2472c     18 00 90 CD |  if_b	jmp	#LR__2801
24730                 | '     d+=da
24730     1A 2F 02 F1 | 	add	local05, local08
24734                 | '     y-=1
24734     01 26 86 F1 | 	sub	local01, #1
24738                 | '     x+=1
24738     01 30 06 F1 | 	add	local06, #1
2473c                 | '     da+=4*4
2473c     10 34 06 F1 | 	add	local08, #16
24740                 | '     db+=2*4
24740     08 32 06 F1 | 	add	local07, #8
24744     18 FF 9F FD | 	jmp	#LR__2800
24748                 | LR__2801
24748                 | '   else
24748                 | '     d+=db
24748     19 2F 02 F1 | 	add	local05, local07
2474c                 | '     x+=1
2474c     01 30 06 F1 | 	add	local06, #1
24750                 | '     da+=2*4
24750     08 34 06 F1 | 	add	local08, #8
24754                 | '     db+=2*4
24754     08 32 06 F1 | 	add	local07, #8
24758     04 FF 9F FD | 	jmp	#LR__2800
2475c                 | LR__2802
2475c     A7 F0 03 F6 | 	mov	ptra, fp
24760     B2 00 A0 FD | 	call	#popregs_
24764                 | _hg010b_spin2_circle_ret
24764     2D 00 64 FD | 	ret
24768                 | 
24768                 | '     
24768                 | ' '-- A frame (an empty rectangle) ---------------------------------------
24768                 | ' 
24768                 | ' pub frame(x1,y1,x2,y2,c)
24768                 | _hg010b_spin2_frame
24768     05 4A 05 F6 | 	mov	COUNT_, #5
2476c     A8 00 A0 FD | 	call	#pushregs_
24770     09 27 02 F6 | 	mov	local01, arg01
24774     0A 29 02 F6 | 	mov	local02, arg02
24778     0B 2B 02 F6 | 	mov	local03, arg03
2477c     0C 2D 02 F6 | 	mov	local04, arg04
24780     0D 2F 02 F6 | 	mov	local05, arg05
24784                 | ' 
24784                 | ' fastline(x1,x2,y1,c)
24784     13 13 02 F6 | 	mov	arg01, local01
24788     15 15 02 F6 | 	mov	arg02, local03
2478c     14 17 02 F6 | 	mov	arg03, local02
24790     17 19 02 F6 | 	mov	arg04, local05
24794     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
24798                 | ' fastline(x1,x2,y2,c)
24798     13 13 02 F6 | 	mov	arg01, local01
2479c     15 15 02 F6 | 	mov	arg02, local03
247a0     16 17 02 F6 | 	mov	arg03, local04
247a4     17 19 02 F6 | 	mov	arg04, local05
247a8     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
247ac                 | ' line(x1,y1,x1,y2,c)
247ac     13 13 02 F6 | 	mov	arg01, local01
247b0     14 15 02 F6 | 	mov	arg02, local02
247b4     13 17 02 F6 | 	mov	arg03, local01
247b8     16 19 02 F6 | 	mov	arg04, local04
247bc     17 1B 02 F6 | 	mov	arg05, local05
247c0                 | ' draw(x1,y1,x2,y2,c)
247c0     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
247c4                 | ' line(x2,y1,x2,y2,c)
247c4     15 13 02 F6 | 	mov	arg01, local03
247c8     14 15 02 F6 | 	mov	arg02, local02
247cc     15 17 02 F6 | 	mov	arg03, local03
247d0     16 19 02 F6 | 	mov	arg04, local04
247d4     17 1B 02 F6 | 	mov	arg05, local05
247d8                 | ' draw(x1,y1,x2,y2,c)
247d8     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
247dc     A7 F0 03 F6 | 	mov	ptra, fp
247e0     B2 00 A0 FD | 	call	#popregs_
247e4                 | _hg010b_spin2_frame_ret
247e4     2D 00 64 FD | 	ret
247e8                 | 
247e8                 | ' 
247e8                 | ' '-- A box (a filled rectangle) ----------------------------------------
247e8                 | ' 
247e8                 | ' pub box(x1,y1,x2,y2,c) |yy
247e8                 | _hg010b_spin2_box
247e8     06 4A 05 F6 | 	mov	COUNT_, #6
247ec     A8 00 A0 FD | 	call	#pushregs_
247f0     09 27 02 F6 | 	mov	local01, arg01
247f4     0A 29 02 F6 | 	mov	local02, arg02
247f8     0B 2B 02 F6 | 	mov	local03, arg03
247fc     0C 2D 02 F6 | 	mov	local04, arg04
24800     0D 2F 02 F6 | 	mov	local05, arg05
24804                 | ' 
24804                 | ' repeat yy from y1 to y2
24804     14 2D 52 F2 | 	cmps	local04, local02 wc
24808     01 30 86 F6 | 	negc	local06, #1
2480c     18 2D 02 F1 | 	add	local04, local06
24810                 | LR__2810
24810                 | '   fastline(x1,x2,yy,c)
24810     13 13 02 F6 | 	mov	arg01, local01
24814     15 15 02 F6 | 	mov	arg02, local03
24818     17 19 02 F6 | 	mov	arg04, local05
2481c     14 17 02 F6 | 	mov	arg03, local02
24820     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
24824     18 29 02 F1 | 	add	local02, local06
24828     16 29 0A F2 | 	cmp	local02, local04 wz
2482c     E0 FF 9F 5D |  if_ne	jmp	#LR__2810
24830     A7 F0 03 F6 | 	mov	ptra, fp
24834     B2 00 A0 FD | 	call	#popregs_
24838                 | _hg010b_spin2_box_ret
24838     2D 00 64 FD | 	ret
2483c                 | 
2483c                 | '       
2483c                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
2483c                 | _hg010b_spin2_putcharxycgf
2483c                 | ' 
2483c                 | '  
2483c                 | ' repeat yy from 0 to 15
2483c     00 00 06 F6 | 	mov	_var01, #0
24840     97 8C 48 FB | 	callpa	#(@LR__2822-@LR__2820)>>2,fcache_load_ptr_
24844                 | LR__2820
24844                 | ' 
24844                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
24844     95 E4 05 F1 | 	add	objptr, #149
24848     F2 02 02 FB | 	rdlong	_var02, objptr
2484c     0A 02 66 F0 | 	shl	_var02, #10
24850     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
24854     01 05 02 F1 | 	add	_var03, _var02
24858     0B 03 02 F6 | 	mov	_var02, arg03
2485c     04 02 66 F0 | 	shl	_var02, #4
24860     01 05 02 F1 | 	add	_var03, _var02
24864     00 05 02 F1 | 	add	_var03, _var01
24868     02 05 C2 FA | 	rdbyte	_var03, _var03
2486c                 | '   asm
2486c     00 04 0E F4 | 	testb	_var03, #0 wz
24870     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
24874     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
24878     01 04 0E F4 | 	testb	_var03, #1 wz
2487c     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
24880     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
24884     02 04 0E F4 | 	testb	_var03, #2 wz
24888     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
2488c     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
24890     03 04 0E F4 | 	testb	_var03, #3 wz
24894     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
24898     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
2489c     04 04 0E F4 | 	testb	_var03, #4 wz
248a0     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
248a4     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
248a8     05 04 0E F4 | 	testb	_var03, #5 wz
248ac     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
248b0     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
248b4     06 04 0E F4 | 	testb	_var03, #6 wz
248b8     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
248bc     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
248c0     07 04 0E F4 | 	testb	_var03, #7 wz
248c4     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
248c8     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
248cc                 | '   
248cc                 | '   ccc[0]:=c1
248cc     99 E5 05 F1 | 	add	objptr, #409
248d0     F2 06 62 FC | 	wrlong	_var04, objptr
248d4                 | '   ccc[1]:=c2 
248d4     04 E4 05 F1 | 	add	objptr, #4
248d8     F2 08 62 FC | 	wrlong	_var05, objptr
248dc                 | '   long[mailbox0][2]:=8
248dc     49 E4 85 F1 | 	sub	objptr, #73
248e0     F2 04 02 FB | 	rdlong	_var03, objptr
248e4     08 04 06 F1 | 	add	_var03, #8
248e8     02 11 68 FC | 	wrlong	#8, _var03
248ec                 | '   long[mailbox0][1]:=@ccc
248ec     45 E4 05 F1 | 	add	objptr, #69
248f0     F2 04 02 F6 | 	mov	_var03, objptr
248f4     45 E4 85 F1 | 	sub	objptr, #69
248f8     F2 02 02 FB | 	rdlong	_var02, objptr
248fc     04 02 06 F1 | 	add	_var02, #4
24900     01 05 62 FC | 	wrlong	_var03, _var02
24904                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
24904     0C E5 85 F1 | 	sub	objptr, #268
24908     F2 04 02 FB | 	rdlong	_var03, objptr
2490c     0A 03 02 F6 | 	mov	_var02, arg02
24910     00 03 02 F1 | 	add	_var02, _var01
24914     0A 02 66 F0 | 	shl	_var02, #10
24918     09 0B 02 F6 | 	mov	_var06, arg01
2491c     02 0A 66 F0 | 	shl	_var06, #2
24920     05 03 02 F1 | 	add	_var02, _var06
24924     01 05 02 F1 | 	add	_var03, _var02
24928     00 00 78 FF 
2492c     00 04 06 F1 | 	add	_var03, ##-268435456
24930     0C E5 05 F1 | 	add	objptr, #268
24934     F2 0A 02 FB | 	rdlong	_var06, objptr
24938     05 05 62 FC | 	wrlong	_var03, _var06
2493c                 | '   repeat
2493c                 | LR__2821
2493c     F2 04 02 FB | 	rdlong	_var03, objptr
24940     02 03 02 FB | 	rdlong	_var02, _var03
24944     00 02 56 F2 | 	cmps	_var02, #0 wc
24948     F0 FF 9F CD |  if_b	jmp	#LR__2821
2494c     E9 E5 85 F1 | 	sub	objptr, #489
24950     01 00 06 F1 | 	add	_var01, #1
24954     10 00 56 F2 | 	cmps	_var01, #16 wc
24958     E8 FE 9F CD |  if_b	jmp	#LR__2820
2495c                 | LR__2822
2495c                 | _hg010b_spin2_putcharxycgf_ret
2495c     2D 00 64 FD | 	ret
24960                 | 
24960                 | ' 
24960                 | ' 
24960                 | ' '**********************************************************************r***
24960                 | ' '                                                                        *
24960                 | ' ' Font related functions                                                 *
24960                 | ' '                                                                        *
24960                 | ' '*************************************************************************
24960                 | ' 
24960                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
24960                 | ' 
24960                 | ' pub setfontfamily(afontnum)
24960                 | _hg010b_spin2_setfontfamily
24960                 | ' 
24960                 | ' font_family:=afontnum
24960     95 E4 05 F1 | 	add	objptr, #149
24964     F2 12 62 FC | 	wrlong	arg01, objptr
24968     95 E4 85 F1 | 	sub	objptr, #149
2496c                 | ' 'if afontnum==8
2496c                 | ' '  font_ptr:=@amiga_font
2496c                 | ' 
2496c                 | ' if afontnum==4
2496c     04 12 0E F2 | 	cmp	arg01, #4 wz
24970                 | '   font_ptr:=@st_font
24970     08 00 00 AF 
24974     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
24978     08 E4 05 A1 |  if_e	add	objptr, #8
2497c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
24980     08 E4 85 A1 |  if_e	sub	objptr, #8
24984     08 00 00 AF 
24988     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
2498c                 | ' if afontnum==0
2498c     00 12 0E F2 | 	cmp	arg01, #0 wz
24990                 | '   font_ptr:=@vga_font
24990     08 E4 05 A1 |  if_e	add	objptr, #8
24994     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
24998     08 E4 85 A1 |  if_e	sub	objptr, #8
2499c                 | _hg010b_spin2_setfontfamily_ret
2499c     2D 00 64 FD | 	ret
249a0                 | 
249a0                 | ' 
249a0                 | ' '*************************************************************************
249a0                 | ' '                                                                        *
249a0                 | ' '  Cursor functions                                                      *
249a0                 | ' '                                                                        *
249a0                 | ' '*************************************************************************
249a0                 | ' 
249a0                 | ' 
249a0                 | ' pub setcursorpos(x,y)
249a0                 | _hg010b_spin2_setcursorpos
249a0                 | ' 
249a0                 | ' ''---------- Set the (x,y) position of cursor
249a0                 | ' 
249a0                 | ' cursor_x:=x
249a0     3C E4 05 F1 | 	add	objptr, #60
249a4     F2 12 52 FC | 	wrword	arg01, objptr
249a8                 | ' cursor_y:=y
249a8     02 E4 05 F1 | 	add	objptr, #2
249ac     F2 14 42 FC | 	wrbyte	arg02, objptr
249b0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
249b0     02 E4 85 F1 | 	sub	objptr, #2
249b4     F2 14 E2 FA | 	rdword	arg02, objptr
249b8     02 14 66 F0 | 	shl	arg02, #2
249bc     02 E4 05 F1 | 	add	objptr, #2
249c0     F2 16 C2 FA | 	rdbyte	arg03, objptr
249c4     3E E4 85 F1 | 	sub	objptr, #62
249c8     04 16 66 F0 | 	shl	arg03, #4
249cc     04 16 06 F1 | 	add	arg03, #4
249d0     11 12 06 F6 | 	mov	arg01, #17
249d4     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
249d8                 | _hg010b_spin2_setcursorpos_ret
249d8     2D 00 64 FD | 	ret
249dc                 | 
249dc                 | ' 
249dc                 | ' pub setcursorx(x)
249dc                 | _hg010b_spin2_setcursorx
249dc                 | ' cursor_x:=x
249dc     3C E4 05 F1 | 	add	objptr, #60
249e0     F2 12 52 FC | 	wrword	arg01, objptr
249e4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
249e4     F2 14 E2 FA | 	rdword	arg02, objptr
249e8     02 14 66 F0 | 	shl	arg02, #2
249ec     02 E4 05 F1 | 	add	objptr, #2
249f0     F2 16 C2 FA | 	rdbyte	arg03, objptr
249f4     3E E4 85 F1 | 	sub	objptr, #62
249f8     04 16 66 F0 | 	shl	arg03, #4
249fc     04 16 06 F1 | 	add	arg03, #4
24a00     11 12 06 F6 | 	mov	arg01, #17
24a04     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
24a08                 | _hg010b_spin2_setcursorx_ret
24a08     2D 00 64 FD | 	ret
24a0c                 | 
24a0c                 | ' 
24a0c                 | ' pub setcursory(y) 
24a0c                 | _hg010b_spin2_setcursory
24a0c                 | ' cursor_y:=y
24a0c     3E E4 05 F1 | 	add	objptr, #62
24a10     F2 12 42 FC | 	wrbyte	arg01, objptr
24a14                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
24a14     02 E4 85 F1 | 	sub	objptr, #2
24a18     F2 14 E2 FA | 	rdword	arg02, objptr
24a1c     02 14 66 F0 | 	shl	arg02, #2
24a20     02 E4 05 F1 | 	add	objptr, #2
24a24     F2 16 C2 FA | 	rdbyte	arg03, objptr
24a28     3E E4 85 F1 | 	sub	objptr, #62
24a2c     04 16 66 F0 | 	shl	arg03, #4
24a30     04 16 06 F1 | 	add	arg03, #4
24a34     11 12 06 F6 | 	mov	arg01, #17
24a38     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
24a3c                 | _hg010b_spin2_setcursory_ret
24a3c     2D 00 64 FD | 	ret
24a40                 | 
24a40                 | ' 
24a40                 | ' '*************************************************************************
24a40                 | ' '                                                                        *
24a40                 | ' '  VBlank functions                                                      *
24a40                 | ' '                                                                        *
24a40                 | ' '*************************************************************************
24a40                 | ' 
24a40                 | ' pub waitvbl(amount) | i
24a40                 | _hg010b_spin2_waitvbl
24a40     03 4A 05 F6 | 	mov	COUNT_, #3
24a44     A8 00 A0 FD | 	call	#pushregs_
24a48     09 27 02 F6 | 	mov	local01, arg01
24a4c                 | ' 
24a4c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
24a4c                 | ' 
24a4c                 | ' repeat i from 1 to amount
24a4c     01 28 06 F6 | 	mov	local02, #1
24a50     01 26 56 F2 | 	cmps	local01, #1 wc
24a54     01 2A 86 F6 | 	negc	local03, #1
24a58     15 27 02 F1 | 	add	local01, local03
24a5c                 | LR__2830
24a5c                 | '   repeat until vblank==0
24a5c                 | LR__2831
24a5c     49 E4 05 F1 | 	add	objptr, #73
24a60     F2 12 0A FB | 	rdlong	arg01, objptr wz
24a64     49 E4 85 F1 | 	sub	objptr, #73
24a68     0C 00 90 AD |  if_e	jmp	#LR__2832
24a6c                 | '     waitus(100)
24a6c     64 12 06 F6 | 	mov	arg01, #100
24a70     20 20 B0 FD | 	call	#__system___waitus
24a74     E4 FF 9F FD | 	jmp	#LR__2831
24a78                 | LR__2832
24a78                 | '   repeat until vblank==1
24a78                 | LR__2833
24a78     49 E4 05 F1 | 	add	objptr, #73
24a7c     F2 12 02 FB | 	rdlong	arg01, objptr
24a80     49 E4 85 F1 | 	sub	objptr, #73
24a84     01 12 0E F2 | 	cmp	arg01, #1 wz
24a88     0C 00 90 AD |  if_e	jmp	#LR__2834
24a8c                 | '     waitus(100)
24a8c     64 12 06 F6 | 	mov	arg01, #100
24a90     00 20 B0 FD | 	call	#__system___waitus
24a94     E0 FF 9F FD | 	jmp	#LR__2833
24a98                 | LR__2834
24a98     15 29 02 F1 | 	add	local02, local03
24a9c     13 29 0A F2 | 	cmp	local02, local01 wz
24aa0     B8 FF 9F 5D |  if_ne	jmp	#LR__2830
24aa4     A7 F0 03 F6 | 	mov	ptra, fp
24aa8     B2 00 A0 FD | 	call	#popregs_
24aac                 | _hg010b_spin2_waitvbl_ret
24aac     2D 00 64 FD | 	ret
24ab0                 | 
24ab0                 | ' 
24ab0                 | ' 
24ab0                 | ' pub cls(fc,bc)   :c,i
24ab0                 | _hg010b_spin2_cls
24ab0     02 4A 05 F6 | 	mov	COUNT_, #2
24ab4     A8 00 A0 FD | 	call	#pushregs_
24ab8     09 27 02 F6 | 	mov	local01, arg01
24abc     0A 29 02 F6 | 	mov	local02, arg02
24ac0                 | ' 
24ac0                 | ' c:=bc
24ac0                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
24ac0     DD E4 05 F1 | 	add	objptr, #221
24ac4     F2 12 02 FB | 	rdlong	arg01, objptr
24ac8     A5 E4 85 F1 | 	sub	objptr, #165
24acc     F2 16 02 FB | 	rdlong	arg03, objptr
24ad0     02 16 66 F0 | 	shl	arg03, #2
24ad4     14 15 02 F6 | 	mov	arg02, local02
24ad8     00 18 06 F6 | 	mov	arg04, #0
24adc     01 1A 06 F6 | 	mov	arg05, #1
24ae0     0B 00 00 FF 
24ae4     94 E4 05 F1 | 	add	objptr, ##5780
24ae8     F8 10 B0 FD | 	call	#_psram_spin2_fill
24aec                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
24aec     0B 00 00 FF 
24af0     C8 E4 85 F1 | 	sub	objptr, ##5832
24af4     F2 12 02 FB | 	rdlong	arg01, objptr
24af8     04 E4 85 F1 | 	sub	objptr, #4
24afc     F2 16 02 FB | 	rdlong	arg03, objptr
24b00     09 17 82 F1 | 	sub	arg03, arg01
24b04     20 14 06 F6 | 	mov	arg02, #32
24b08     00 18 06 F6 | 	mov	arg04, #0
24b0c     01 1A 06 F6 | 	mov	arg05, #1
24b10     0B 00 00 FF 
24b14     CC E4 05 F1 | 	add	objptr, ##5836
24b18     C8 10 B0 FD | 	call	#_psram_spin2_fill
24b1c                 | ' setwritecolors(fc,bc)
24b1c                 | ' 
24b1c                 | ' write_color:=ff
24b1c     0B 00 00 FF 
24b20     8B E4 85 F1 | 	sub	objptr, ##5771
24b24     F2 26 62 FC | 	wrlong	local01, objptr
24b28                 | ' write_background:=bb
24b28     04 E4 05 F1 | 	add	objptr, #4
24b2c     F2 28 62 FC | 	wrlong	local02, objptr
24b30                 | ' cursor_x:=0
24b30     09 E4 85 F1 | 	sub	objptr, #9
24b34     F2 00 58 FC | 	wrword	#0, objptr
24b38                 | ' cursor_y:=0
24b38     02 E4 05 F1 | 	add	objptr, #2
24b3c     F2 00 48 FC | 	wrbyte	#0, objptr
24b40                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
24b40     02 E4 85 F1 | 	sub	objptr, #2
24b44     F2 14 E2 FA | 	rdword	arg02, objptr
24b48     02 14 66 F0 | 	shl	arg02, #2
24b4c     02 E4 05 F1 | 	add	objptr, #2
24b50     F2 16 C2 FA | 	rdbyte	arg03, objptr
24b54     3E E4 85 F1 | 	sub	objptr, #62
24b58     04 16 66 F0 | 	shl	arg03, #4
24b5c     04 16 06 F1 | 	add	arg03, #4
24b60     11 12 06 F6 | 	mov	arg01, #17
24b64     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
24b68                 | ' setcursorcolor(fc)
24b68     13 13 02 F6 | 	mov	arg01, local01
24b6c     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
24b70     14 FB 01 F6 | 	mov	result1, local02
24b74     00 FC 05 F6 | 	mov	result2, #0
24b78     A7 F0 03 F6 | 	mov	ptra, fp
24b7c     B2 00 A0 FD | 	call	#popregs_
24b80                 | _hg010b_spin2_cls_ret
24b80     2D 00 64 FD | 	ret
24b84                 | 
24b84                 | ' 
24b84                 | ' ''---------- Output a char at the cursor position, move the cursor 
24b84                 | ' 
24b84                 | ' pub putchar(achar) | c,x,y,l,newcpl
24b84                 | _hg010b_spin2_putchar
24b84     02 4A 05 F6 | 	mov	COUNT_, #2
24b88     A8 00 A0 FD | 	call	#pushregs_
24b8c     09 27 02 F6 | 	mov	local01, arg01
24b90                 | ' 
24b90                 | ' if achar==10
24b90     0A 26 0E F2 | 	cmp	local01, #10 wz
24b94                 | '   crlf()
24b94     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
24b98                 | ' if achar==9
24b98     09 26 0E F2 | 	cmp	local01, #9 wz
24b9c     18 00 90 5D |  if_ne	jmp	#LR__2840
24ba0                 | '   cursor_x:=(cursor_x& %11110000)+16
24ba0     3C E4 05 F1 | 	add	objptr, #60
24ba4     F2 16 E2 FA | 	rdword	arg03, objptr
24ba8     F0 16 06 F5 | 	and	arg03, #240
24bac     10 16 06 F1 | 	add	arg03, #16
24bb0     F2 16 52 FC | 	wrword	arg03, objptr
24bb4     3C E4 85 F1 | 	sub	objptr, #60
24bb8                 | LR__2840
24bb8                 | '   
24bb8                 | ' if (achar<>9) && (achar<>10) 
24bb8     09 26 0E F2 | 	cmp	local01, #9 wz
24bbc     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
24bc0     A8 00 90 AD |  if_e	jmp	#LR__2841
24bc4                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
24bc4     3C E4 05 F1 | 	add	objptr, #60
24bc8     F2 12 E2 FA | 	rdword	arg01, objptr
24bcc     02 E4 05 F1 | 	add	objptr, #2
24bd0     F2 14 C2 FA | 	rdbyte	arg02, objptr
24bd4     04 14 66 F0 | 	shl	arg02, #4
24bd8     04 14 06 F1 | 	add	arg02, #4
24bdc     03 E4 05 F1 | 	add	objptr, #3
24be0     F2 18 02 FB | 	rdlong	arg04, objptr
24be4     04 E4 05 F1 | 	add	objptr, #4
24be8     F2 1A 02 FB | 	rdlong	arg05, objptr
24bec     45 E4 85 F1 | 	sub	objptr, #69
24bf0     13 17 02 F6 | 	mov	arg03, local01
24bf4     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
24bf8     04 E4 05 F1 | 	add	objptr, #4
24bfc     F2 12 02 FB | 	rdlong	arg01, objptr
24c00     10 00 00 FF 
24c04     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24c08     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
24c0c     3A E4 05 F1 | 	add	objptr, #58
24c10     F2 1A C2 FA | 	rdbyte	arg05, objptr
24c14     0D 17 02 FD | 	qmul	arg03, arg05
24c18                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
24c18     10 00 00 FF 
24c1c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
24c20     02 E4 85 F1 | 	sub	objptr, #2
24c24     F2 28 E2 FA | 	rdword	local02, objptr
24c28     01 28 46 F0 | 	shr	local02, #1
24c2c     13 15 02 F6 | 	mov	arg02, local01
24c30     01 16 06 F6 | 	mov	arg03, #1
24c34     00 18 06 F6 | 	mov	arg04, #0
24c38     01 1A 06 F6 | 	mov	arg05, #1
24c3c     0B 00 00 FF 
24c40     90 E4 05 F1 | 	add	objptr, ##5776
24c44     18 26 62 FD | 	getqx	local01
24c48     14 27 02 F1 | 	add	local01, local02
24c4c     13 13 02 F1 | 	add	arg01, local01
24c50     90 0F B0 FD | 	call	#_psram_spin2_fill
24c54                 | '   cursor_x+=2
24c54     0B 00 00 FF 
24c58     90 E4 85 F1 | 	sub	objptr, ##5776
24c5c     F2 28 E2 FA | 	rdword	local02, objptr
24c60     02 28 06 F1 | 	add	local02, #2
24c64     F2 28 52 FC | 	wrword	local02, objptr
24c68     3C E4 85 F1 | 	sub	objptr, #60
24c6c                 | LR__2841
24c6c                 | ' 
24c6c                 | ' if cursor_x>=256
24c6c     3C E4 05 F1 | 	add	objptr, #60
24c70     F2 28 E2 FA | 	rdword	local02, objptr
24c74     3C E4 85 F1 | 	sub	objptr, #60
24c78     00 29 56 F2 | 	cmps	local02, #256 wc
24c7c     64 00 90 CD |  if_b	jmp	#LR__2843
24c80                 | '   cursor_x:=0
24c80     3C E4 05 F1 | 	add	objptr, #60
24c84     F2 00 58 FC | 	wrword	#0, objptr
24c88                 | '   cursor_y+=1
24c88     02 E4 05 F1 | 	add	objptr, #2
24c8c     F2 28 C2 FA | 	rdbyte	local02, objptr
24c90     01 28 06 F1 | 	add	local02, #1
24c94     F2 28 42 FC | 	wrbyte	local02, objptr
24c98                 | '   if cursor_y>st_lines-1
24c98     C3 E4 05 F1 | 	add	objptr, #195
24c9c     F2 28 02 FB | 	rdlong	local02, objptr
24ca0     01 28 86 F1 | 	sub	local02, #1
24ca4     C3 E4 85 F1 | 	sub	objptr, #195
24ca8     F2 16 C2 FA | 	rdbyte	arg03, objptr
24cac     3E E4 85 F1 | 	sub	objptr, #62
24cb0     14 17 5A F2 | 	cmps	arg03, local02 wcz
24cb4     2C 00 90 ED |  if_be	jmp	#LR__2842
24cb8                 | '     scrollup2()
24cb8     00 12 06 F6 | 	mov	arg01, #0
24cbc     01 00 00 FF 
24cc0     58 14 06 F6 | 	mov	arg02, ##600
24cc4     10 16 06 F6 | 	mov	arg03, #16
24cc8     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
24ccc                 | '     cursor_y:=st_lines-1
24ccc     01 E5 05 F1 | 	add	objptr, #257
24cd0     F2 28 02 FB | 	rdlong	local02, objptr
24cd4     01 28 86 F1 | 	sub	local02, #1
24cd8     C3 E4 85 F1 | 	sub	objptr, #195
24cdc     F2 28 42 FC | 	wrbyte	local02, objptr
24ce0     3E E4 85 F1 | 	sub	objptr, #62
24ce4                 | LR__2842
24ce4                 | LR__2843
24ce4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
24ce4     3C E4 05 F1 | 	add	objptr, #60
24ce8     F2 14 E2 FA | 	rdword	arg02, objptr
24cec     02 14 66 F0 | 	shl	arg02, #2
24cf0     02 E4 05 F1 | 	add	objptr, #2
24cf4     F2 16 C2 FA | 	rdbyte	arg03, objptr
24cf8     3E E4 85 F1 | 	sub	objptr, #62
24cfc     04 16 66 F0 | 	shl	arg03, #4
24d00     04 16 06 F1 | 	add	arg03, #4
24d04     11 12 06 F6 | 	mov	arg01, #17
24d08     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
24d0c     A7 F0 03 F6 | 	mov	ptra, fp
24d10     B2 00 A0 FD | 	call	#popregs_
24d14                 | _hg010b_spin2_putchar_ret
24d14     2D 00 64 FD | 	ret
24d18                 | 
24d18                 | '     
24d18                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
24d18                 | ' 
24d18                 | ' pub putchar2(achar) | c,x,y,l,newcpl
24d18                 | _hg010b_spin2_putchar2
24d18     02 4A 05 F6 | 	mov	COUNT_, #2
24d1c     A8 00 A0 FD | 	call	#pushregs_
24d20     09 27 02 F6 | 	mov	local01, arg01
24d24                 | ' 
24d24                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
24d24     3C E4 05 F1 | 	add	objptr, #60
24d28     F2 12 E2 FA | 	rdword	arg01, objptr
24d2c     02 E4 05 F1 | 	add	objptr, #2
24d30     F2 14 C2 FA | 	rdbyte	arg02, objptr
24d34     04 14 66 F0 | 	shl	arg02, #4
24d38     04 14 06 F1 | 	add	arg02, #4
24d3c     03 E4 05 F1 | 	add	objptr, #3
24d40     F2 18 02 FB | 	rdlong	arg04, objptr
24d44     04 E4 05 F1 | 	add	objptr, #4
24d48     F2 1A 02 FB | 	rdlong	arg05, objptr
24d4c     45 E4 85 F1 | 	sub	objptr, #69
24d50     13 17 02 F6 | 	mov	arg03, local01
24d54     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
24d58     04 E4 05 F1 | 	add	objptr, #4
24d5c     F2 12 02 FB | 	rdlong	arg01, objptr
24d60     10 00 00 FF 
24d64     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24d68     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
24d6c     3A E4 05 F1 | 	add	objptr, #58
24d70     F2 1A C2 FA | 	rdbyte	arg05, objptr
24d74     0D 17 02 FD | 	qmul	arg03, arg05
24d78                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
24d78     10 00 00 FF 
24d7c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
24d80     02 E4 85 F1 | 	sub	objptr, #2
24d84     F2 28 E2 FA | 	rdword	local02, objptr
24d88     01 28 46 F0 | 	shr	local02, #1
24d8c     13 15 02 F6 | 	mov	arg02, local01
24d90     01 16 06 F6 | 	mov	arg03, #1
24d94     00 18 06 F6 | 	mov	arg04, #0
24d98     01 1A 06 F6 | 	mov	arg05, #1
24d9c     0B 00 00 FF 
24da0     90 E4 05 F1 | 	add	objptr, ##5776
24da4     18 26 62 FD | 	getqx	local01
24da8     14 27 02 F1 | 	add	local01, local02
24dac     13 13 02 F1 | 	add	arg01, local01
24db0     30 0E B0 FD | 	call	#_psram_spin2_fill
24db4                 | ' 
24db4                 | ' cursor_x+=2
24db4     0B 00 00 FF 
24db8     90 E4 85 F1 | 	sub	objptr, ##5776
24dbc     F2 28 E2 FA | 	rdword	local02, objptr
24dc0     02 28 06 F1 | 	add	local02, #2
24dc4     F2 28 52 FC | 	wrword	local02, objptr
24dc8                 | ' if cursor_x>=256
24dc8     F2 28 E2 FA | 	rdword	local02, objptr
24dcc     3C E4 85 F1 | 	sub	objptr, #60
24dd0     00 29 56 F2 | 	cmps	local02, #256 wc
24dd4     64 00 90 CD |  if_b	jmp	#LR__2851
24dd8                 | '   cursor_x:=0
24dd8     3C E4 05 F1 | 	add	objptr, #60
24ddc     F2 00 58 FC | 	wrword	#0, objptr
24de0                 | '   cursor_y+=1
24de0     02 E4 05 F1 | 	add	objptr, #2
24de4     F2 28 C2 FA | 	rdbyte	local02, objptr
24de8     01 28 06 F1 | 	add	local02, #1
24dec     F2 28 42 FC | 	wrbyte	local02, objptr
24df0                 | '   if cursor_y>st_lines-1
24df0     C3 E4 05 F1 | 	add	objptr, #195
24df4     F2 28 02 FB | 	rdlong	local02, objptr
24df8     01 28 86 F1 | 	sub	local02, #1
24dfc     C3 E4 85 F1 | 	sub	objptr, #195
24e00     F2 16 C2 FA | 	rdbyte	arg03, objptr
24e04     3E E4 85 F1 | 	sub	objptr, #62
24e08     14 17 5A F2 | 	cmps	arg03, local02 wcz
24e0c     2C 00 90 ED |  if_be	jmp	#LR__2850
24e10                 | '     scrollup2()
24e10     00 12 06 F6 | 	mov	arg01, #0
24e14     01 00 00 FF 
24e18     58 14 06 F6 | 	mov	arg02, ##600
24e1c     10 16 06 F6 | 	mov	arg03, #16
24e20     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
24e24                 | '     cursor_y:=st_lines-1
24e24     01 E5 05 F1 | 	add	objptr, #257
24e28     F2 28 02 FB | 	rdlong	local02, objptr
24e2c     01 28 86 F1 | 	sub	local02, #1
24e30     C3 E4 85 F1 | 	sub	objptr, #195
24e34     F2 28 42 FC | 	wrbyte	local02, objptr
24e38     3E E4 85 F1 | 	sub	objptr, #62
24e3c                 | LR__2850
24e3c                 | LR__2851
24e3c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
24e3c     3C E4 05 F1 | 	add	objptr, #60
24e40     F2 14 E2 FA | 	rdword	arg02, objptr
24e44     02 14 66 F0 | 	shl	arg02, #2
24e48     02 E4 05 F1 | 	add	objptr, #2
24e4c     F2 16 C2 FA | 	rdbyte	arg03, objptr
24e50     3E E4 85 F1 | 	sub	objptr, #62
24e54     04 16 66 F0 | 	shl	arg03, #4
24e58     04 16 06 F1 | 	add	arg03, #4
24e5c     11 12 06 F6 | 	mov	arg01, #17
24e60     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
24e64     A7 F0 03 F6 | 	mov	ptra, fp
24e68     B2 00 A0 FD | 	call	#popregs_
24e6c                 | _hg010b_spin2_putchar2_ret
24e6c     2D 00 64 FD | 	ret
24e70                 | 
24e70                 | ' ''--------- Output a string at the cursor position, move the cursor  
24e70                 | ' 
24e70                 | ' pub write(text) | iii,c,ncx,ncy
24e70                 | _hg010b_spin2_write
24e70     04 4A 05 F6 | 	mov	COUNT_, #4
24e74     A8 00 A0 FD | 	call	#pushregs_
24e78     09 27 02 F6 | 	mov	local01, arg01
24e7c                 | ' 
24e7c                 | ' repeat iii from 0 to strsize(text)-1
24e7c     00 28 06 F6 | 	mov	local02, #0
24e80     13 13 02 F6 | 	mov	arg01, local01
24e84     09 2B 02 F6 | 	mov	local03, arg01
24e88     97 06 48 FB | 	callpa	#(@LR__2861-@LR__2860)>>2,fcache_load_ptr_
24e8c                 | LR__2860
24e8c     15 FB C9 FA | 	rdbyte	result1, local03 wz
24e90     01 2A 06 51 |  if_ne	add	local03, #1
24e94     F4 FF 9F 5D |  if_ne	jmp	#LR__2860
24e98                 | LR__2861
24e98     09 2B 82 F1 | 	sub	local03, arg01
24e9c     01 2A 86 F1 | 	sub	local03, #1
24ea0     00 2A 56 F2 | 	cmps	local03, #0 wc
24ea4     01 2C 86 F6 | 	negc	local04, #1
24ea8     16 2B 02 F1 | 	add	local03, local04
24eac                 | LR__2862
24eac                 | '   putchar2(byte[text+iii])
24eac     13 13 02 F6 | 	mov	arg01, local01
24eb0     14 13 02 F1 | 	add	arg01, local02
24eb4     09 13 C2 FA | 	rdbyte	arg01, arg01
24eb8     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
24ebc     16 29 02 F1 | 	add	local02, local04
24ec0     15 29 0A F2 | 	cmp	local02, local03 wz
24ec4     E4 FF 9F 5D |  if_ne	jmp	#LR__2862
24ec8     A7 F0 03 F6 | 	mov	ptra, fp
24ecc     B2 00 A0 FD | 	call	#popregs_
24ed0                 | _hg010b_spin2_write_ret
24ed0     2D 00 64 FD | 	ret
24ed4                 | 
24ed4                 | '    
24ed4                 | ' ' a version for text scrolling in Basic shifted 4 lines down
24ed4                 | ' 
24ed4                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
24ed4                 | _hg010b_spin2_scrollup2
24ed4     03 4A 05 F6 | 	mov	COUNT_, #3
24ed8     A8 00 A0 FD | 	call	#pushregs_
24edc                 | ' 	
24edc                 | ' repeat i from 4 to 579 
24edc     04 26 06 F6 | 	mov	local01, #4
24ee0                 | LR__2870
24ee0     F9 E4 05 F1 | 	add	objptr, #249
24ee4     F2 1A 02 FB | 	rdlong	arg05, objptr
24ee8     1C E4 85 F1 | 	sub	objptr, #28
24eec     F2 14 02 FB | 	rdlong	arg02, objptr
24ef0     13 19 02 F6 | 	mov	arg04, local01
24ef4     10 18 06 F1 | 	add	arg04, #16
24ef8     02 18 66 F0 | 	shl	arg04, #2
24efc     14 E4 05 F1 | 	add	objptr, #20
24f00     F2 16 02 FB | 	rdlong	arg03, objptr
24f04     0B 19 02 FD | 	qmul	arg04, arg03
24f08                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
24f08     F6 03 00 FF 
24f0c     00 12 06 F6 | 	mov	arg01, ##519168
24f10     0D 13 82 F1 | 	sub	arg01, arg05
24f14     02 16 66 F0 | 	shl	arg03, #2
24f18     0A 00 00 FF 
24f1c     DB E5 05 F1 | 	add	objptr, ##5595
24f20     18 1A 62 FD | 	getqx	arg05
24f24     0D 15 02 F1 | 	add	arg02, arg05
24f28     80 0B B0 FD | 	call	#_psram_spin2_read1
24f2c     0A 00 00 FF 
24f30     D3 E5 85 F1 | 	sub	objptr, ##5587
24f34     F2 1A 02 FB | 	rdlong	arg05, objptr
24f38     1C E4 85 F1 | 	sub	objptr, #28
24f3c     F2 14 02 FB | 	rdlong	arg02, objptr
24f40     13 19 02 F6 | 	mov	arg04, local01
24f44     02 18 66 F0 | 	shl	arg04, #2
24f48     14 E4 05 F1 | 	add	objptr, #20
24f4c     F2 16 02 FB | 	rdlong	arg03, objptr
24f50     0B 19 02 FD | 	qmul	arg04, arg03
24f54                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
24f54     F6 03 00 FF 
24f58     00 12 06 F6 | 	mov	arg01, ##519168
24f5c     0D 13 82 F1 | 	sub	arg01, arg05
24f60     02 16 66 F0 | 	shl	arg03, #2
24f64     0A 00 00 FF 
24f68     DB E5 05 F1 | 	add	objptr, ##5595
24f6c     18 1A 62 FD | 	getqx	arg05
24f70     0D 15 02 F1 | 	add	arg02, arg05
24f74     D0 0B B0 FD | 	call	#_psram_spin2_write
24f78     0B 00 00 FF 
24f7c     CC E4 85 F1 | 	sub	objptr, ##5836
24f80     01 26 06 F1 | 	add	local01, #1
24f84     01 00 00 FF 
24f88     44 26 16 F2 | 	cmp	local01, ##580 wc
24f8c     50 FF 9F CD |  if_b	jmp	#LR__2870
24f90                 | ' 
24f90                 | ' repeat i from 580 to 599
24f90     01 00 00 FF 
24f94     44 26 06 F6 | 	mov	local01, ##580
24f98                 | LR__2871
24f98                 | '    fastline(0,1023,i,write_background)   
24f98     45 E4 05 F1 | 	add	objptr, #69
24f9c     F2 18 02 FB | 	rdlong	arg04, objptr
24fa0     45 E4 85 F1 | 	sub	objptr, #69
24fa4     00 12 06 F6 | 	mov	arg01, #0
24fa8     09 14 CE F9 | 	bmask	arg02, #9
24fac     13 17 02 F6 | 	mov	arg03, local01
24fb0     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
24fb4     01 26 06 F1 | 	add	local01, #1
24fb8     01 00 00 FF 
24fbc     58 26 16 F2 | 	cmp	local01, ##600 wc
24fc0     D4 FF 9F CD |  if_b	jmp	#LR__2871
24fc4                 | ' repeat i from 0 to 3
24fc4     00 26 06 F6 | 	mov	local01, #0
24fc8                 | LR__2872
24fc8                 | '    fastline(0,1023,i,write_background)      
24fc8     45 E4 05 F1 | 	add	objptr, #69
24fcc     F2 18 02 FB | 	rdlong	arg04, objptr
24fd0     45 E4 85 F1 | 	sub	objptr, #69
24fd4     00 12 06 F6 | 	mov	arg01, #0
24fd8     09 14 CE F9 | 	bmask	arg02, #9
24fdc     13 17 02 F6 | 	mov	arg03, local01
24fe0     90 EF BF FD | 	call	#_hg010b_spin2_fastline
24fe4     01 26 06 F1 | 	add	local01, #1
24fe8     04 26 56 F2 | 	cmps	local01, #4 wc
24fec     D8 FF 9F CD |  if_b	jmp	#LR__2872
24ff0                 | ' 
24ff0                 | ' repeat i from 0 to 35
24ff0     00 26 06 F6 | 	mov	local01, #0
24ff4                 | LR__2873
24ff4     13 1B 02 F6 | 	mov	arg05, local01
24ff8     01 1A 06 F1 | 	add	arg05, #1
24ffc     10 00 00 FF 
25000     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
25004     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25008     0B 1B 02 FD | 	qmul	arg05, arg03
2500c                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
2500c     F6 03 00 FF 
25010     00 12 06 F6 | 	mov	arg01, ##519168
25014     F9 E4 05 F1 | 	add	objptr, #249
25018     F2 1A 02 FB | 	rdlong	arg05, objptr
2501c     0D 13 82 F1 | 	sub	arg01, arg05
25020     F5 E4 85 F1 | 	sub	objptr, #245
25024     F2 14 02 FB | 	rdlong	arg02, objptr
25028     10 00 00 FF 
2502c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
25030     0B 00 00 FF 
25034     C8 E4 05 F1 | 	add	objptr, ##5832
25038     18 1A 62 FD | 	getqx	arg05
2503c     0D 15 02 F1 | 	add	arg02, arg05
25040     68 0A B0 FD | 	call	#_psram_spin2_read1
25044     10 00 00 FF 
25048     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
2504c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25050     0B 27 02 FD | 	qmul	local01, arg03
25054                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
25054     F6 03 00 FF 
25058     00 12 06 F6 | 	mov	arg01, ##519168
2505c     0A 00 00 FF 
25060     D3 E5 85 F1 | 	sub	objptr, ##5587
25064     F2 1A 02 FB | 	rdlong	arg05, objptr
25068     0D 13 82 F1 | 	sub	arg01, arg05
2506c     F5 E4 85 F1 | 	sub	objptr, #245
25070     F2 14 02 FB | 	rdlong	arg02, objptr
25074     10 00 00 FF 
25078     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
2507c     0B 00 00 FF 
25080     C8 E4 05 F1 | 	add	objptr, ##5832
25084     18 1A 62 FD | 	getqx	arg05
25088     0D 15 02 F1 | 	add	arg02, arg05
2508c     B8 0A B0 FD | 	call	#_psram_spin2_write
25090     0B 00 00 FF 
25094     CC E4 85 F1 | 	sub	objptr, ##5836
25098     01 26 06 F1 | 	add	local01, #1
2509c     24 26 56 F2 | 	cmps	local01, #36 wc
250a0     50 FF 9F CD |  if_b	jmp	#LR__2873
250a4                 | ' repeat i from 0 to timings[7]-1
250a4     00 26 06 F6 | 	mov	local01, #0
250a8     10 00 00 FF 
250ac     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
250b0     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
250b4     10 00 00 FF 
250b8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
250bc     01 28 86 F1 | 	sub	local02, #1
250c0     00 28 56 F2 | 	cmps	local02, #0 wc
250c4     01 2A 86 F6 | 	negc	local03, #1
250c8     15 29 02 F1 | 	add	local02, local03
250cc                 | LR__2874
250cc                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
250cc     04 E4 05 F1 | 	add	objptr, #4
250d0     F2 12 02 FB | 	rdlong	arg01, objptr
250d4     10 00 00 FF 
250d8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
250dc     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
250e0     10 00 00 FF 
250e4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
250e8     0D 19 02 F6 | 	mov	arg04, arg05
250ec     03 18 66 F0 | 	shl	arg04, #3
250f0     0D 19 02 F1 | 	add	arg04, arg05
250f4     02 18 66 F0 | 	shl	arg04, #2
250f8     13 19 02 F1 | 	add	arg04, local01
250fc     0C 13 02 F1 | 	add	arg01, arg04
25100     20 14 06 F6 | 	mov	arg02, #32
25104     01 16 06 F6 | 	mov	arg03, #1
25108     00 18 06 F6 | 	mov	arg04, #0
2510c     01 1A 06 F6 | 	mov	arg05, #1
25110     0B 00 00 FF 
25114     C8 E4 05 F1 | 	add	objptr, ##5832
25118     C8 0A B0 FD | 	call	#_psram_spin2_fill
2511c     0B 00 00 FF 
25120     CC E4 85 F1 | 	sub	objptr, ##5836
25124     15 27 02 F1 | 	add	local01, local03
25128     14 27 0A F2 | 	cmp	local01, local02 wz
2512c     9C FF 9F 5D |  if_ne	jmp	#LR__2874
25130     A7 F0 03 F6 | 	mov	ptra, fp
25134     B2 00 A0 FD | 	call	#popregs_
25138                 | _hg010b_spin2_scrollup2_ret
25138     2D 00 64 FD | 	ret
2513c                 | 
2513c                 | '  
2513c                 | ' ''----------- Scroll the screen one line down 
2513c                 | ' 
2513c                 | ' pub scrolldown(start=0) | i
2513c                 | _hg010b_spin2_scrolldown
2513c     05 4A 05 F6 | 	mov	COUNT_, #5
25140     A8 00 A0 FD | 	call	#pushregs_
25144     09 27 02 F6 | 	mov	local01, arg01
25148                 | ' 
25148                 | ' repeat i from 579 to (start*16)+4
25148     01 00 00 FF 
2514c     43 28 06 F6 | 	mov	local02, ##579
25150     13 2B 02 F6 | 	mov	local03, local01
25154     04 2A 66 F0 | 	shl	local03, #4
25158     04 2A 06 F1 | 	add	local03, #4
2515c     01 00 00 FF 
25160     43 2A 56 F2 | 	cmps	local03, ##579 wc
25164     01 2C 86 F6 | 	negc	local04, #1
25168     16 2F 02 F6 | 	mov	local05, local04
2516c     16 2B 02 F1 | 	add	local03, local04
25170                 | LR__2880
25170     F9 E4 05 F1 | 	add	objptr, #249
25174     F2 2C 02 FB | 	rdlong	local04, objptr
25178     1C E4 85 F1 | 	sub	objptr, #28
2517c     F2 14 02 FB | 	rdlong	arg02, objptr
25180     14 1B 02 F6 | 	mov	arg05, local02
25184     02 1A 66 F0 | 	shl	arg05, #2
25188     14 E4 05 F1 | 	add	objptr, #20
2518c     F2 16 02 FB | 	rdlong	arg03, objptr
25190     0B 1B 02 FD | 	qmul	arg05, arg03
25194                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
25194     F6 03 00 FF 
25198     00 12 06 F6 | 	mov	arg01, ##519168
2519c     16 13 82 F1 | 	sub	arg01, local04
251a0     02 16 66 F0 | 	shl	arg03, #2
251a4     0A 00 00 FF 
251a8     DB E5 05 F1 | 	add	objptr, ##5595
251ac     18 2C 62 FD | 	getqx	local04
251b0     16 15 02 F1 | 	add	arg02, local04
251b4     F4 08 B0 FD | 	call	#_psram_spin2_read1
251b8     0A 00 00 FF 
251bc     D3 E5 85 F1 | 	sub	objptr, ##5587
251c0     F2 2C 02 FB | 	rdlong	local04, objptr
251c4     1C E4 85 F1 | 	sub	objptr, #28
251c8     F2 14 02 FB | 	rdlong	arg02, objptr
251cc     14 1B 02 F6 | 	mov	arg05, local02
251d0     10 1A 06 F1 | 	add	arg05, #16
251d4     02 1A 66 F0 | 	shl	arg05, #2
251d8     14 E4 05 F1 | 	add	objptr, #20
251dc     F2 16 02 FB | 	rdlong	arg03, objptr
251e0     0B 1B 02 FD | 	qmul	arg05, arg03
251e4                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
251e4     F6 03 00 FF 
251e8     00 12 06 F6 | 	mov	arg01, ##519168
251ec     16 13 82 F1 | 	sub	arg01, local04
251f0     02 16 66 F0 | 	shl	arg03, #2
251f4     0A 00 00 FF 
251f8     DB E5 05 F1 | 	add	objptr, ##5595
251fc     18 2C 62 FD | 	getqx	local04
25200     16 15 02 F1 | 	add	arg02, local04
25204     40 09 B0 FD | 	call	#_psram_spin2_write
25208     0B 00 00 FF 
2520c     CC E4 85 F1 | 	sub	objptr, ##5836
25210     17 29 02 F1 | 	add	local02, local05
25214     15 29 0A F2 | 	cmp	local02, local03 wz
25218     54 FF 9F 5D |  if_ne	jmp	#LR__2880
2521c                 | ' 
2521c                 | ' repeat i from (start*16)+4 to (start*16)+19
2521c     13 29 02 F6 | 	mov	local02, local01
25220     04 28 66 F0 | 	shl	local02, #4
25224     04 28 06 F1 | 	add	local02, #4
25228     13 2F 02 F6 | 	mov	local05, local01
2522c     04 2E 66 F0 | 	shl	local05, #4
25230     13 2E 06 F1 | 	add	local05, #19
25234     13 2D 02 F6 | 	mov	local04, local01
25238     04 2C 66 F0 | 	shl	local04, #4
2523c     04 2C 06 F1 | 	add	local04, #4
25240     16 2F 52 F2 | 	cmps	local05, local04 wc
25244     01 2C 86 F6 | 	negc	local04, #1
25248     16 2B 02 F6 | 	mov	local03, local04
2524c     16 2F 02 F1 | 	add	local05, local04
25250                 | LR__2881
25250                 | '    fastline(0,1023,i,write_background)    
25250     45 E4 05 F1 | 	add	objptr, #69
25254     F2 18 02 FB | 	rdlong	arg04, objptr
25258     45 E4 85 F1 | 	sub	objptr, #69
2525c     00 12 06 F6 | 	mov	arg01, #0
25260     09 14 CE F9 | 	bmask	arg02, #9
25264     14 17 02 F6 | 	mov	arg03, local02
25268     08 ED BF FD | 	call	#_hg010b_spin2_fastline
2526c     15 29 02 F1 | 	add	local02, local03
25270     17 29 0A F2 | 	cmp	local02, local05 wz
25274     D8 FF 9F 5D |  if_ne	jmp	#LR__2881
25278                 | '    
25278                 | ' repeat i from 35 to start
25278     23 28 06 F6 | 	mov	local02, #35
2527c     23 26 56 F2 | 	cmps	local01, #35 wc
25280     01 2C 86 F6 | 	negc	local04, #1
25284     13 2F 02 F6 | 	mov	local05, local01
25288     16 2F 02 F1 | 	add	local05, local04
2528c                 | LR__2882
2528c                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
2528c     F6 03 00 FF 
25290     00 12 06 F6 | 	mov	arg01, ##519168
25294     F9 E4 05 F1 | 	add	objptr, #249
25298     F2 2A 02 FB | 	rdlong	local03, objptr
2529c     15 13 82 F1 | 	sub	arg01, local03
252a0     F5 E4 85 F1 | 	sub	objptr, #245
252a4     F2 14 02 FB | 	rdlong	arg02, objptr
252a8     14 2B 02 F6 | 	mov	local03, local02
252ac     07 2A 66 F0 | 	shl	local03, #7
252b0     15 15 02 F1 | 	add	arg02, local03
252b4     80 16 06 F6 | 	mov	arg03, #128
252b8     0B 00 00 FF 
252bc     C8 E4 05 F1 | 	add	objptr, ##5832
252c0     E8 07 B0 FD | 	call	#_psram_spin2_read1
252c4                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
252c4     F6 03 00 FF 
252c8     00 12 06 F6 | 	mov	arg01, ##519168
252cc     0A 00 00 FF 
252d0     D3 E5 85 F1 | 	sub	objptr, ##5587
252d4     F2 2A 02 FB | 	rdlong	local03, objptr
252d8     15 13 82 F1 | 	sub	arg01, local03
252dc     F5 E4 85 F1 | 	sub	objptr, #245
252e0     F2 14 02 FB | 	rdlong	arg02, objptr
252e4     14 2B 02 F6 | 	mov	local03, local02
252e8     01 2A 06 F1 | 	add	local03, #1
252ec     07 2A 66 F0 | 	shl	local03, #7
252f0     15 15 02 F1 | 	add	arg02, local03
252f4     80 16 06 F6 | 	mov	arg03, #128
252f8     0B 00 00 FF 
252fc     C8 E4 05 F1 | 	add	objptr, ##5832
25300     44 08 B0 FD | 	call	#_psram_spin2_write
25304     0B 00 00 FF 
25308     CC E4 85 F1 | 	sub	objptr, ##5836
2530c     16 29 02 F1 | 	add	local02, local04
25310     17 29 0A F2 | 	cmp	local02, local05 wz
25314     74 FF 9F 5D |  if_ne	jmp	#LR__2882
25318                 | ' repeat i from 0 to 127
25318     00 28 06 F6 | 	mov	local02, #0
2531c                 | LR__2883
2531c                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
2531c     04 E4 05 F1 | 	add	objptr, #4
25320     F2 12 02 FB | 	rdlong	arg01, objptr
25324     13 2F 02 F6 | 	mov	local05, local01
25328     07 2E 66 F0 | 	shl	local05, #7
2532c     17 13 02 F1 | 	add	arg01, local05
25330     14 13 02 F1 | 	add	arg01, local02
25334     20 14 06 F6 | 	mov	arg02, #32
25338     01 16 06 F6 | 	mov	arg03, #1
2533c     00 18 06 F6 | 	mov	arg04, #0
25340     01 1A 06 F6 | 	mov	arg05, #1
25344     0B 00 00 FF 
25348     C8 E4 05 F1 | 	add	objptr, ##5832
2534c     94 08 B0 FD | 	call	#_psram_spin2_fill
25350     0B 00 00 FF 
25354     CC E4 85 F1 | 	sub	objptr, ##5836
25358     01 28 06 F1 | 	add	local02, #1
2535c     80 28 56 F2 | 	cmps	local02, #128 wc
25360     B8 FF 9F CD |  if_b	jmp	#LR__2883
25364     A7 F0 03 F6 | 	mov	ptra, fp
25368     B2 00 A0 FD | 	call	#popregs_
2536c                 | _hg010b_spin2_scrolldown_ret
2536c     2D 00 64 FD | 	ret
25370                 | 
25370                 | ' 
25370                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
25370                 | ' 
25370                 | ' pub crlf()
25370                 | _hg010b_spin2_crlf
25370                 | ' 
25370                 | ' cursor_x:=leading_spaces*2
25370     01 00 00 FF 
25374     B6 E4 05 F1 | 	add	objptr, ##694
25378     F2 16 02 FB | 	rdlong	arg03, objptr
2537c     01 16 66 F0 | 	shl	arg03, #1
25380     01 00 00 FF 
25384     7A E4 85 F1 | 	sub	objptr, ##634
25388     F2 16 52 FC | 	wrword	arg03, objptr
2538c                 | ' cursor_y+=1
2538c     02 E4 05 F1 | 	add	objptr, #2
25390     F2 16 C2 FA | 	rdbyte	arg03, objptr
25394     01 16 06 F1 | 	add	arg03, #1
25398     F2 16 42 FC | 	wrbyte	arg03, objptr
2539c                 | ' if cursor_y>st_lines-1
2539c     C3 E4 05 F1 | 	add	objptr, #195
253a0     F2 16 02 FB | 	rdlong	arg03, objptr
253a4     01 16 86 F1 | 	sub	arg03, #1
253a8     C3 E4 85 F1 | 	sub	objptr, #195
253ac     F2 14 C2 FA | 	rdbyte	arg02, objptr
253b0     3E E4 85 F1 | 	sub	objptr, #62
253b4     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
253b8     2C 00 90 ED |  if_be	jmp	#LR__2890
253bc                 | '   scrollup2()
253bc     00 12 06 F6 | 	mov	arg01, #0
253c0     01 00 00 FF 
253c4     58 14 06 F6 | 	mov	arg02, ##600
253c8     10 16 06 F6 | 	mov	arg03, #16
253cc     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
253d0                 | '   cursor_y:=st_lines-1
253d0     01 E5 05 F1 | 	add	objptr, #257
253d4     F2 16 02 FB | 	rdlong	arg03, objptr
253d8     01 16 86 F1 | 	sub	arg03, #1
253dc     C3 E4 85 F1 | 	sub	objptr, #195
253e0     F2 16 42 FC | 	wrbyte	arg03, objptr
253e4     3E E4 85 F1 | 	sub	objptr, #62
253e8                 | LR__2890
253e8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
253e8     3C E4 05 F1 | 	add	objptr, #60
253ec     F2 14 E2 FA | 	rdword	arg02, objptr
253f0     02 14 66 F0 | 	shl	arg02, #2
253f4     02 E4 05 F1 | 	add	objptr, #2
253f8     F2 16 C2 FA | 	rdbyte	arg03, objptr
253fc     3E E4 85 F1 | 	sub	objptr, #62
25400     04 16 66 F0 | 	shl	arg03, #4
25404     04 16 06 F1 | 	add	arg03, #4
25408     11 12 06 F6 | 	mov	arg01, #17
2540c     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
25410                 | _hg010b_spin2_crlf_ret
25410     2D 00 64 FD | 	ret
25414                 | 
25414                 | ' 
25414                 | ' 
25414                 | ' '*************************************************************************
25414                 | ' '                                                                        *
25414                 | ' '  Conversions                                                           *
25414                 | ' '                                                                        *
25414                 | ' '*************************************************************************
25414                 | ' 
25414                 | ' ''---------- Convert a integer to dec string, return a pointer
25414                 | ' 
25414                 | ' pub inttostr(i):result |q,pos,k,j
25414                 | _hg010b_spin2_inttostr
25414     03 4A 05 F6 | 	mov	COUNT_, #3
25418     A8 00 A0 FD | 	call	#pushregs_
2541c     09 27 0A F6 | 	mov	local01, arg01 wz
25420                 | ' 
25420                 | ' j:=i
25420                 | ' pos:=10
25420     0A 28 06 F6 | 	mov	local02, #10
25424                 | ' k:=0
25424     00 2A 06 F6 | 	mov	local03, #0
25428                 | ' 
25428                 | ' if (j==0)
25428     18 00 90 5D |  if_ne	jmp	#LR__2900
2542c                 | '   n_string[0]:=48
2542c     4D E4 05 F1 | 	add	objptr, #77
25430     F2 60 48 FC | 	wrbyte	#48, objptr
25434                 | '   n_string[1]:=0
25434     01 E4 05 F1 | 	add	objptr, #1
25438     F2 00 48 FC | 	wrbyte	#0, objptr
2543c     4E E4 85 F1 | 	sub	objptr, #78
25440     C4 00 90 FD | 	jmp	#LR__2907
25444                 | LR__2900
25444                 | ' 
25444                 | ' else
25444                 | '   if (j<0)
25444     13 27 52 F6 | 	abs	local01, local01 wc
25448                 | '     j:=0-j
25448                 | '     k:=45
25448     2D 2A 06 C6 |  if_b	mov	local03, #45
2544c                 | ' 
2544c                 | '   n_string[11]:=0
2544c     58 E4 05 F1 | 	add	objptr, #88
25450     F2 00 48 FC | 	wrbyte	#0, objptr
25454     58 E4 85 F1 | 	sub	objptr, #88
25458     97 24 48 FB | 	callpa	#(@LR__2902-@LR__2901)>>2,fcache_load_ptr_
2545c                 | '   repeat while (pos>-1)
2545c                 | LR__2901
2545c     00 28 56 F2 | 	cmps	local02, #0 wc
25460     40 00 90 CD |  if_b	jmp	#LR__2903
25464     13 FB 51 F6 | 	abs	result1, local01 wc
25468     0A FA 15 FD | 	qdiv	result1, #10
2546c                 | '     q:=j//10
2546c     19 FA 61 FD | 	getqy	result1
25470     FD FA 81 F6 | 	negc	result1, result1
25474     13 27 52 F6 | 	abs	local01, local01 wc
25478     0A 26 16 FD | 	qdiv	local01, #10
2547c                 | '     q:=48+q
2547c     30 FA 05 F1 | 	add	result1, #48
25480                 | '     n_string[pos]:=q
25480     14 27 02 F6 | 	mov	local01, local02
25484     4D E4 05 F1 | 	add	objptr, #77
25488     F2 26 02 F1 | 	add	local01, objptr
2548c     13 FB 41 FC | 	wrbyte	result1, local01
25490                 | '     j:=j/10
25490     4D E4 85 F1 | 	sub	objptr, #77
25494                 | '     pos-=1
25494     01 28 86 F1 | 	sub	local02, #1
25498     18 26 62 FD | 	getqx	local01
2549c     13 27 82 F6 | 	negc	local01, local01
254a0     B8 FF 9F FD | 	jmp	#LR__2901
254a4                 | LR__2902
254a4                 | LR__2903
254a4                 | '   repeat while n_string[0]==48
254a4                 | LR__2904
254a4     4D E4 05 F1 | 	add	objptr, #77
254a8     F2 16 C2 FA | 	rdbyte	arg03, objptr
254ac     4D E4 85 F1 | 	sub	objptr, #77
254b0     30 16 0E F2 | 	cmp	arg03, #48 wz
254b4     20 00 90 5D |  if_ne	jmp	#LR__2905
254b8                 | '     bytemove(@n_string,@n_string+1,12)
254b8     4D E4 05 F1 | 	add	objptr, #77
254bc     F2 12 02 F6 | 	mov	arg01, objptr
254c0     F2 14 02 F6 | 	mov	arg02, objptr
254c4     4D E4 85 F1 | 	sub	objptr, #77
254c8     01 14 06 F1 | 	add	arg02, #1
254cc     0C 16 06 F6 | 	mov	arg03, #12
254d0     80 11 B0 FD | 	call	#__system____builtin_memmove
254d4     CC FF 9F FD | 	jmp	#LR__2904
254d8                 | LR__2905
254d8                 | ' 
254d8                 | '   if k==45
254d8     2D 2A 0E F2 | 	cmp	local03, #45 wz
254dc     28 00 90 5D |  if_ne	jmp	#LR__2906
254e0                 | '      bytemove(@n_string+1,@n_string,12)
254e0     4D E4 05 F1 | 	add	objptr, #77
254e4     F2 12 02 F6 | 	mov	arg01, objptr
254e8     01 12 06 F1 | 	add	arg01, #1
254ec     F2 14 02 F6 | 	mov	arg02, objptr
254f0     4D E4 85 F1 | 	sub	objptr, #77
254f4     0C 16 06 F6 | 	mov	arg03, #12
254f8     58 11 B0 FD | 	call	#__system____builtin_memmove
254fc                 | '      n_string[0]:=k
254fc     4D E4 05 F1 | 	add	objptr, #77
25500     F2 2A 42 FC | 	wrbyte	local03, objptr
25504     4D E4 85 F1 | 	sub	objptr, #77
25508                 | LR__2906
25508                 | LR__2907
25508                 | ' 
25508                 | ' q:=@n_string
25508     4D E4 05 F1 | 	add	objptr, #77
2550c     F2 FA 01 F6 | 	mov	result1, objptr
25510     4D E4 85 F1 | 	sub	objptr, #77
25514                 | ' return q
25514     A7 F0 03 F6 | 	mov	ptra, fp
25518     B2 00 A0 FD | 	call	#popregs_
2551c                 | _hg010b_spin2_inttostr_ret
2551c     2D 00 64 FD | 	ret
25520                 | 
25520                 | ' 
25520                 | ' '**********************************************************************************
25520                 | ' '
25520                 | ' '        Blitting
25520                 | ' '
25520                 | ' '**********************************************************************************
25520                 | ' 
25520                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
25520                 | _hg010b_spin2_blit
25520     18 4A 05 F6 | 	mov	COUNT_, #24
25524     A8 00 A0 FD | 	call	#pushregs_
25528     09 27 02 F6 | 	mov	local01, arg01
2552c     0A 29 02 F6 | 	mov	local02, arg02
25530     0B 2B 02 F6 | 	mov	local03, arg03
25534     0C 2D 02 F6 | 	mov	local04, arg04
25538     0D 2F 02 F6 | 	mov	local05, arg05
2553c     0E 31 02 F6 | 	mov	local06, arg06
25540     0F 33 02 F6 | 	mov	local07, arg07
25544     10 35 02 F6 | 	mov	local08, arg08
25548     11 37 02 F6 | 	mov	local09, arg09
2554c     12 39 02 F6 | 	mov	local10, arg10
25550                 | ' 
25550                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
25550     00 04 00 FF 
25554     00 26 56 F2 | 	cmps	local01, ##524288 wc
25558     00 04 00 3F 
2555c     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
25560     7C 01 90 CD |  if_b	jmp	#LR__2914
25564     16 29 5A F2 | 	cmps	local02, local04 wcz
25568     14 3B 02 16 |  if_a	mov	local11, local02
2556c     16 29 02 16 |  if_a	mov	local02, local04
25570     1D 2D 02 16 |  if_a	mov	local04, local11
25574     17 2B 5A F2 | 	cmps	local03, local05 wcz
25578     15 3B 02 16 |  if_a	mov	local11, local03
2557c     17 2B 02 16 |  if_a	mov	local03, local05
25580     18 2B 02 FD | 	qmul	local03, local06
25584                 | '   if x1a>x2a
25584                 | '     x1a,x2a:=x2a,x1a
25584                 | '   if y1a>y2a
25584                 | '     y1a,y2a:=y2a,y1a  
25584     1D 2F 02 16 |  if_a	mov	local05, local11
25588                 | ' 
25588                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
25588     19 3D 02 F6 | 	mov	local12, local07
2558c     14 3D 02 F1 | 	add	local12, local02
25590     18 3A 62 FD | 	getqx	local11
25594     1C 37 02 FD | 	qmul	local09, local10
25598     1D 3D 02 F1 | 	add	local12, local11
2559c     13 3F 02 F6 | 	mov	local13, local01
255a0     1A 3F 02 F1 | 	add	local13, local08
255a4     18 3A 62 FD | 	getqx	local11
255a8     1D 3F 02 F1 | 	add	local13, local11
255ac     1F 3D 5A F2 | 	cmps	local12, local13 wcz
255b0     98 00 90 ED |  if_be	jmp	#LR__2911
255b4                 | '     repeat y from y1a to y2a
255b4     15 41 02 F6 | 	mov	local14, local03
255b8     15 2F 52 F2 | 	cmps	local05, local03 wc
255bc     01 42 86 F6 | 	negc	local15, #1
255c0     17 45 02 F6 | 	mov	local16, local05
255c4     21 45 02 F1 | 	add	local16, local15
255c8     0B 00 00 FF 
255cc     CC E4 05 F1 | 	add	objptr, ##5836
255d0                 | LR__2910
255d0     18 41 02 FD | 	qmul	local14, local06
255d4                 | '   '    writeln(string("I am here"))
255d4                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
255d4     13 15 02 F6 | 	mov	arg02, local01
255d8     16 17 02 F6 | 	mov	arg03, local04
255dc     14 17 82 F1 | 	sub	arg03, local02
255e0     01 16 06 F1 | 	add	arg03, #1
255e4     F6 03 00 FF 
255e8     00 12 06 F6 | 	mov	arg01, ##519168
255ec     18 3E 62 FD | 	getqx	local13
255f0     1F 15 02 F1 | 	add	arg02, local13
255f4     14 15 02 F1 | 	add	arg02, local02
255f8     B0 04 B0 FD | 	call	#_psram_spin2_read1
255fc     1B 3F 02 F6 | 	mov	local13, local09
25600     15 3F 82 F1 | 	sub	local13, local03
25604     20 3F 02 F1 | 	add	local13, local14
25608     1C 3F 02 FD | 	qmul	local13, local10
2560c                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
2560c     19 15 02 F6 | 	mov	arg02, local07
25610     16 17 02 F6 | 	mov	arg03, local04
25614     14 17 82 F1 | 	sub	arg03, local02
25618     01 16 06 F1 | 	add	arg03, #1
2561c     F6 03 00 FF 
25620     00 12 06 F6 | 	mov	arg01, ##519168
25624     18 3E 62 FD | 	getqx	local13
25628     1F 15 02 F1 | 	add	arg02, local13
2562c     1A 15 02 F1 | 	add	arg02, local08
25630     14 05 B0 FD | 	call	#_psram_spin2_write
25634     21 41 02 F1 | 	add	local14, local15
25638     22 41 0A F2 | 	cmp	local14, local16 wz
2563c     90 FF 9F 5D |  if_ne	jmp	#LR__2910
25640     0B 00 00 FF 
25644     CC E4 85 F1 | 	sub	objptr, ##5836
25648     94 00 90 FD | 	jmp	#LR__2913
2564c                 | LR__2911
2564c                 | '   else
2564c                 | '     repeat y from y2a to y1a
2564c     17 41 02 F6 | 	mov	local14, local05
25650     17 2B 52 F2 | 	cmps	local03, local05 wc
25654     01 46 86 F6 | 	negc	local17, #1
25658     15 49 02 F6 | 	mov	local18, local03
2565c     23 49 02 F1 | 	add	local18, local17
25660     0B 00 00 FF 
25664     CC E4 05 F1 | 	add	objptr, ##5836
25668                 | LR__2912
25668     18 41 02 FD | 	qmul	local14, local06
2566c                 | '  '     writeln(string("I am there"))
2566c                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
2566c     13 15 02 F6 | 	mov	arg02, local01
25670     16 17 02 F6 | 	mov	arg03, local04
25674     14 17 82 F1 | 	sub	arg03, local02
25678     01 16 06 F1 | 	add	arg03, #1
2567c     F6 03 00 FF 
25680     00 12 06 F6 | 	mov	arg01, ##519168
25684     18 44 62 FD | 	getqx	local16
25688     22 15 02 F1 | 	add	arg02, local16
2568c     14 15 02 F1 | 	add	arg02, local02
25690     18 04 B0 FD | 	call	#_psram_spin2_read1
25694     1B 45 02 F6 | 	mov	local16, local09
25698     15 45 82 F1 | 	sub	local16, local03
2569c     20 45 02 F1 | 	add	local16, local14
256a0     1C 45 02 FD | 	qmul	local16, local10
256a4                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
256a4     19 15 02 F6 | 	mov	arg02, local07
256a8     16 17 02 F6 | 	mov	arg03, local04
256ac     14 17 82 F1 | 	sub	arg03, local02
256b0     01 16 06 F1 | 	add	arg03, #1
256b4     F6 03 00 FF 
256b8     00 12 06 F6 | 	mov	arg01, ##519168
256bc     18 44 62 FD | 	getqx	local16
256c0     22 15 02 F1 | 	add	arg02, local16
256c4     1A 15 02 F1 | 	add	arg02, local08
256c8     7C 04 B0 FD | 	call	#_psram_spin2_write
256cc     23 41 02 F1 | 	add	local14, local17
256d0     24 41 0A F2 | 	cmp	local14, local18 wz
256d4     90 FF 9F 5D |  if_ne	jmp	#LR__2912
256d8     0B 00 00 FF 
256dc     CC E4 85 F1 | 	sub	objptr, ##5836
256e0                 | LR__2913
256e0                 | LR__2914
256e0                 | '     
256e0                 | ' if ((f>=$80000) && (t<$80000)) 
256e0     00 04 00 FF 
256e4     00 26 56 F2 | 	cmps	local01, ##524288 wc
256e8     80 00 90 CD |  if_b	jmp	#LR__2916
256ec     00 04 00 FF 
256f0     00 32 56 F2 | 	cmps	local07, ##524288 wc
256f4     74 00 90 3D |  if_ae	jmp	#LR__2916
256f8                 | '   repeat y from y1a to y2a
256f8     15 41 02 F6 | 	mov	local14, local03
256fc     15 2F 52 F2 | 	cmps	local05, local03 wc
25700     01 4A 86 F6 | 	negc	local19, #1
25704     17 4D 02 F6 | 	mov	local20, local05
25708     25 4D 02 F1 | 	add	local20, local19
2570c     0B 00 00 FF 
25710     CC E4 05 F1 | 	add	objptr, ##5836
25714                 | LR__2915
25714     1B 49 02 F6 | 	mov	local18, local09
25718     15 49 82 F1 | 	sub	local18, local03
2571c     20 49 02 F1 | 	add	local18, local14
25720     1C 49 02 FD | 	qmul	local18, local10
25724                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
25724     19 13 02 F6 | 	mov	arg01, local07
25728     18 48 62 FD | 	getqx	local18
2572c     18 41 02 FD | 	qmul	local14, local06
25730     24 13 02 F1 | 	add	arg01, local18
25734     1A 13 02 F1 | 	add	arg01, local08
25738     13 15 02 F6 | 	mov	arg02, local01
2573c     16 17 02 F6 | 	mov	arg03, local04
25740     14 17 82 F1 | 	sub	arg03, local02
25744     01 16 06 F1 | 	add	arg03, #1
25748     18 48 62 FD | 	getqx	local18
2574c     24 15 02 F1 | 	add	arg02, local18
25750     14 15 02 F1 | 	add	arg02, local02
25754     54 03 B0 FD | 	call	#_psram_spin2_read1
25758     25 41 02 F1 | 	add	local14, local19
2575c     26 41 0A F2 | 	cmp	local14, local20 wz
25760     B0 FF 9F 5D |  if_ne	jmp	#LR__2915
25764     0B 00 00 FF 
25768     CC E4 85 F1 | 	sub	objptr, ##5836
2576c                 | LR__2916
2576c                 | '     
2576c                 | ' if ((f<$80000) && (t>=$80000)) 
2576c     00 04 00 FF 
25770     00 26 56 F2 | 	cmps	local01, ##524288 wc
25774     84 00 90 3D |  if_ae	jmp	#LR__2918
25778     00 04 00 FF 
2577c     00 32 56 F2 | 	cmps	local07, ##524288 wc
25780     78 00 90 CD |  if_b	jmp	#LR__2918
25784                 | '   t:=t & $FFFFFFF
25784     7C 32 06 F4 | 	bitl	local07, #124
25788                 | '   repeat y from y1a to y2a
25788     15 41 02 F6 | 	mov	local14, local03
2578c     15 2F 52 F2 | 	cmps	local05, local03 wc
25790     01 4E 86 F6 | 	negc	local21, #1
25794     17 51 02 F6 | 	mov	local22, local05
25798     27 51 02 F1 | 	add	local22, local21
2579c     0B 00 00 FF 
257a0     CC E4 05 F1 | 	add	objptr, ##5836
257a4                 | LR__2917
257a4     18 41 02 FD | 	qmul	local14, local06
257a8                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
257a8     13 13 02 F6 | 	mov	arg01, local01
257ac     1B 4D 02 F6 | 	mov	local20, local09
257b0     15 4D 82 F1 | 	sub	local20, local03
257b4     20 4D 02 F1 | 	add	local20, local14
257b8     18 4A 62 FD | 	getqx	local19
257bc     1C 4D 02 FD | 	qmul	local20, local10
257c0     25 13 02 F1 | 	add	arg01, local19
257c4     14 13 02 F1 | 	add	arg01, local02
257c8     19 15 02 F6 | 	mov	arg02, local07
257cc     16 17 02 F6 | 	mov	arg03, local04
257d0     14 17 82 F1 | 	sub	arg03, local02
257d4     01 16 06 F1 | 	add	arg03, #1
257d8     18 4C 62 FD | 	getqx	local20
257dc     26 15 02 F1 | 	add	arg02, local20
257e0     1A 15 02 F1 | 	add	arg02, local08
257e4     60 03 B0 FD | 	call	#_psram_spin2_write
257e8     27 41 02 F1 | 	add	local14, local21
257ec     28 41 0A F2 | 	cmp	local14, local22 wz
257f0     B0 FF 9F 5D |  if_ne	jmp	#LR__2917
257f4     0B 00 00 FF 
257f8     CC E4 85 F1 | 	sub	objptr, ##5836
257fc                 | LR__2918
257fc                 | '     
257fc                 | ' if ((f<$80000) && (t<$80000)) 
257fc     00 04 00 FF 
25800     00 26 56 F2 | 	cmps	local01, ##524288 wc
25804     00 04 00 CF 
25808     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
2580c     64 00 90 3D |  if_ae	jmp	#LR__2920
25810                 | '   repeat y from y1a to y2a
25810     15 41 02 F6 | 	mov	local14, local03
25814     15 2F 52 F2 | 	cmps	local05, local03 wc
25818     01 52 86 F6 | 	negc	local23, #1
2581c     17 55 02 F6 | 	mov	local24, local05
25820     29 55 02 F1 | 	add	local24, local23
25824                 | LR__2919
25824     18 41 02 FD | 	qmul	local14, local06
25828                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
25828     13 13 02 F6 | 	mov	arg01, local01
2582c     1B 51 02 F6 | 	mov	local22, local09
25830     15 51 82 F1 | 	sub	local22, local03
25834     20 51 02 F1 | 	add	local22, local14
25838     18 4E 62 FD | 	getqx	local21
2583c     1C 51 02 FD | 	qmul	local22, local10
25840     27 13 02 F1 | 	add	arg01, local21
25844     14 13 02 F1 | 	add	arg01, local02
25848     19 15 02 F6 | 	mov	arg02, local07
2584c     16 17 02 F6 | 	mov	arg03, local04
25850     14 17 82 F1 | 	sub	arg03, local02
25854     01 16 06 F1 | 	add	arg03, #1
25858     18 50 62 FD | 	getqx	local22
2585c     28 15 02 F1 | 	add	arg02, local22
25860     1A 15 02 F1 | 	add	arg02, local08
25864     EC 0D B0 FD | 	call	#__system____builtin_memmove
25868     29 41 02 F1 | 	add	local14, local23
2586c     2A 41 0A F2 | 	cmp	local14, local24 wz
25870     B0 FF 9F 5D |  if_ne	jmp	#LR__2919
25874                 | LR__2920
25874     A7 F0 03 F6 | 	mov	ptra, fp
25878     B2 00 A0 FD | 	call	#popregs_
2587c                 | _hg010b_spin2_blit_ret
2587c     2D 00 64 FD | 	ret
25880                 | 
25880                 | ' 
25880                 | ' '..............................................................................
25880                 | ' 
25880                 | ' {{
25880                 | ' }}
25880                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
25880                 | _psram_spin2_startx
25880     04 4A 05 F6 | 	mov	COUNT_, #4
25884     A8 00 A0 FD | 	call	#pushregs_
25888     09 27 02 F6 | 	mov	local01, arg01
2588c     0B 29 02 F6 | 	mov	local02, arg03
25890     0C 2B 02 F6 | 	mov	local03, arg04
25894                 | '     stop() ' restart driver if required
25894     54 01 B0 FD | 	call	#_psram_spin2_stop
25898     00 26 0E F2 | 	cmp	local01, #0 wz
2589c     14 26 06 AB |  if_e	rdlong	local01, #20
258a0     13 15 52 F6 | 	abs	arg02, local01 wc
258a4     A1 07 00 FF 
258a8     40 14 16 FD | 	qdiv	arg02, ##1000000
258ac                 | ' 
258ac                 | '     ' use current frequency if none specified
258ac                 | ' 
258ac                 | '     if freq == 0 
258ac                 | '         freq := clkfreq 
258ac                 | ' 
258ac                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
258ac                 | ' 
258ac                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
258ac                 | '     if burst < 0
258ac                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
258ac     18 14 62 FD | 	getqx	arg02
258b0     0A 19 82 F6 | 	negc	arg04, arg02
258b4     03 18 66 F0 | 	shl	arg04, #3
258b8     84 18 86 F1 | 	sub	arg04, #132
258bc     04 18 46 F0 | 	shr	arg04, #4
258c0     04 18 66 F0 | 	shl	arg04, #4
258c4     00 18 56 F2 | 	cmps	arg04, #0 wc
258c8     0E FA 65 C6 |  if_b	neg	result1, #14
258cc     10 01 90 CD |  if_b	jmp	#LR__2933
258d0                 | ' 
258d0                 | '     ' compute the input delay
258d0                 | ' 
258d0                 | '     if delay <= 0
258d0     01 28 56 F2 | 	cmps	local02, #1 wc
258d4     10 00 90 3D |  if_ae	jmp	#LR__2930
258d8                 | '         delay := lookupDelay(freq)
258d8     13 13 02 F6 | 	mov	arg01, local01
258dc     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
258e0     FD 28 02 F6 | 	mov	local02, result1
258e4     04 00 90 FD | 	jmp	#LR__2931
258e8                 | LR__2930
258e8                 | '     else
258e8                 | '         delay <#= $f ' limit to 15
258e8     0F 28 66 F3 | 	fles	local02, #15
258ec                 | LR__2931
258ec                 | ' 
258ec                 | '     ' create our lock
258ec                 | ' 
258ec                 | '     driverlock := LOCKNEW()  
258ec     00 FA 05 F6 | 	mov	result1, #0
258f0     04 FA 61 FD | 	locknew	result1
258f4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
258f8     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
258fc                 | '     if driverlock == -1
258fc     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25900     FF FF 7F FF 
25904     FF FB 0D F2 | 	cmp	result1, ##-1 wz
25908                 | '         return ERR_NO_LOCK
25908     1A FA 65 A6 |  if_e	neg	result1, #26
2590c     D0 00 90 AD |  if_e	jmp	#LR__2933
25910                 | ' 
25910                 | '     ' patch in the proper data and HUB addresses to the startup structure
25910                 | ' 
25910                 | '     long[@startupData][0]:=clkfreq
25910     14 26 06 FB | 	rdlong	local01, #20
25914     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
25918     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
2591c                 | ' '    long[@startupData][1]:=$1000_0000
2591c                 | '     long[@startupData][5]:=@deviceData
2591c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
25920     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
25924     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
25928     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
2592c     14 14 06 F1 | 	add	arg02, #20
25930     0A 27 62 FC | 	wrlong	local01, arg02
25934                 | '     long[@startupData][6]:=@qosData
25934     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
25938     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
2593c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
25940     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
25944     18 14 06 F1 | 	add	arg02, #24
25948     0A 27 62 FC | 	wrlong	local01, arg02
2594c                 | '     long[@startupData][7]:=$7FF00
2594c     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
25950     1C 26 06 F1 | 	add	local01, #28
25954     FF 03 80 FF 
25958     13 01 6A FC | 	wrlong	##524032, local01
2595c                 | ' 
2595c                 | '     ' setup some default bank and QoS parameter values
2595c                 | ' 
2595c                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
2595c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
25960     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
25964     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
25968     10 18 66 F0 | 	shl	arg04, #16
2596c     0C 28 66 F0 | 	shl	local02, #12
25970     14 19 42 F5 | 	or	arg04, local02
25974     18 18 46 F5 | 	or	arg04, #24
25978     0C 15 02 F6 | 	mov	arg02, arg04
2597c     02 16 06 F6 | 	mov	arg03, #2
25980     A0 00 A0 FD | 	call	#\builtin_longfill_
25984                 | '     longfill(@qosData, $FFFF0000, 8)
25984     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
25988     07 16 06 F6 | 	mov	arg03, #7
2598c     28 16 62 FD | 	setq	arg03
25990     80 FF FF FF 
25994     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
25998                 | ' 
25998                 | '     ' get the address of the PSRAM memory driver so we can start it
25998                 | ' 
25998                 | '     driverAddr:= driver.getDriverAddr()
25998                 | '     return @driver_start
25998     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
2599c     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
259a0     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
259a4                 | ' 
259a4                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
259a4                 | ' 
259a4                 | '     if desiredcog < 0
259a4     00 2A 56 F2 | 	cmps	local03, #0 wc
259a8                 | '         desiredcog := NEWCOG
259a8     10 2A 06 C6 |  if_b	mov	local03, #16
259ac                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
259ac     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
259b0     15 2D 02 F6 | 	mov	local04, local03
259b4     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
259b8     0A 2D F2 FC | 	coginit	local04, arg02 wc
259bc     01 2C 66 C6 |  if_b	neg	local04, #1
259c0     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
259c4     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
259c8                 | '     repeat until long[@startupData] == 0 
259c8     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
259cc                 | LR__2932
259cc     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
259d0     F8 FF 9F 5D |  if_ne	jmp	#LR__2932
259d4                 | ' 
259d4                 | '     return drivercog
259d4     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
259d8     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
259dc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
259e0                 | LR__2933
259e0     A7 F0 03 F6 | 	mov	ptra, fp
259e4     B2 00 A0 FD | 	call	#popregs_
259e8                 | _psram_spin2_startx_ret
259e8     2D 00 64 FD | 	ret
259ec                 | 
259ec                 | ' 
259ec                 | ' '..............................................................................
259ec                 | ' 
259ec                 | ' {{
259ec                 | ' }}
259ec                 | ' PUB stop() : i
259ec                 | _psram_spin2_stop
259ec     00 00 06 F6 | 	mov	_var01, #0
259f0                 | '     if drivercog <> -1
259f0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
259f4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
259f8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
259fc     FF FF 7F FF 
25a00     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
25a04     70 00 90 AD |  if_e	jmp	#LR__2943
25a08                 | '         cogstop(drivercog) ' a rather brutal stop
25a08     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25a0c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25a10     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25a14     03 12 62 FD | 	cogstop	arg01
25a18     97 26 48 FB | 	callpa	#(@LR__2942-@LR__2940)>>2,fcache_load_ptr_
25a1c                 | '         repeat i from 0 to 7
25a1c                 | LR__2940
25a1c                 | '             if long[$7FF00][i*3] < 0
25a1c     00 FB 01 F6 | 	mov	result1, _var01
25a20     01 FA 65 F0 | 	shl	result1, #1
25a24     00 FB 01 F1 | 	add	result1, _var01
25a28     02 FA 65 F0 | 	shl	result1, #2
25a2c     FF 03 00 FF 
25a30     00 FB 05 F1 | 	add	result1, ##524032
25a34     FD FA 01 FB | 	rdlong	result1, result1
25a38     00 FA 55 F2 | 	cmps	result1, #0 wc
25a3c     1C 00 90 3D |  if_ae	jmp	#LR__2941
25a40                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
25a40     00 FB 01 F6 | 	mov	result1, _var01
25a44     01 FA 65 F0 | 	shl	result1, #1
25a48     00 FB 01 F1 | 	add	result1, _var01
25a4c     02 FA 65 F0 | 	shl	result1, #2
25a50     FF 03 00 FF 
25a54     00 FB 05 F1 | 	add	result1, ##524032
25a58     FD 20 68 FC | 	wrlong	#16, result1
25a5c                 | LR__2941
25a5c     01 00 06 F1 | 	add	_var01, #1
25a60     08 00 56 F2 | 	cmps	_var01, #8 wc
25a64     B4 FF 9F CD |  if_b	jmp	#LR__2940
25a68                 | LR__2942
25a68                 | '         drivercog := -1
25a68     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25a6c     FF FF FF FF 
25a70     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
25a74     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25a78                 | LR__2943
25a78                 | '     if driverlock <> -1
25a78     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
25a7c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
25a80     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25a84     FF FF 7F FF 
25a88     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
25a8c                 | '         LOCKRET(driverlock)
25a8c     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
25a90     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
25a94     05 12 62 5D |  if_ne	lockret	arg01
25a98                 | '         driverlock := -1
25a98     FF FF FF 5F 
25a9c     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
25aa0     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
25aa4     00 FB 01 F6 | 	mov	result1, _var01
25aa8                 | _psram_spin2_stop_ret
25aa8     2D 00 64 FD | 	ret
25aac                 | 
25aac                 | ' 
25aac                 | ' '..............................................................................
25aac                 | ' 
25aac                 | ' {{
25aac                 | ' }}
25aac                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
25aac                 | _psram_spin2_read1
25aac                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
25aac                 | '     if drivercog == -1 ' driver must be running
25aac     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25ab0     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
25ab4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25ab8     FF FF 7F FF 
25abc     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
25ac0                 | '         return ERR_INACTIVE
25ac0     0F FA 65 A6 |  if_e	neg	result1, #15
25ac4     7C 00 90 AD |  if_e	jmp	#LR__2951
25ac8                 | '     if count == 0 ' don't even bother reading
25ac8     00 16 0E F2 | 	cmp	arg03, #0 wz
25acc                 | '         return 0
25acc     00 FA 05 A6 |  if_e	mov	result1, #0
25ad0     70 00 90 AD |  if_e	jmp	#LR__2951
25ad4                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
25ad4     00 FA 05 F6 | 	mov	result1, #0
25ad8     01 FA 61 FD | 	cogid	result1
25adc     FD 00 02 F6 | 	mov	_var01, result1
25ae0     01 00 66 F0 | 	shl	_var01, #1
25ae4     FD 00 02 F1 | 	add	_var01, result1
25ae8     02 00 66 F0 | 	shl	_var01, #2
25aec     FF 03 00 FF 
25af0     00 03 06 F6 | 	mov	_var02, ##524032
25af4     00 03 02 F1 | 	add	_var02, _var01
25af8                 | '     if long[mailbox] < 0
25af8     01 01 02 FB | 	rdlong	_var01, _var02
25afc     00 00 56 F2 | 	cmps	_var01, #0 wc
25b00                 | '         return ERR_MAILBOX_BUSY
25b00     1C FA 65 C6 |  if_b	neg	result1, #28
25b04     3C 00 90 CD |  if_b	jmp	#LR__2951
25b08                 | '     long[mailbox][2] := count
25b08     08 02 06 F1 | 	add	_var02, #8
25b0c     01 17 62 FC | 	wrlong	arg03, _var02
25b10                 | '     long[mailbox][1] := dstHubAddr
25b10     04 02 86 F1 | 	sub	_var02, #4
25b14     01 13 62 FC | 	wrlong	arg01, _var02
25b18     04 02 86 F1 | 	sub	_var02, #4
25b1c                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
25b1c     0A 05 02 F6 | 	mov	_var03, arg02
25b20     D9 04 06 F4 | 	bitl	_var03, #217
25b24     00 00 58 FF 
25b28     00 00 06 F6 | 	mov	_var01, ##-1342177280
25b2c     02 01 02 F1 | 	add	_var01, _var03
25b30     01 01 62 FC | 	wrlong	_var01, _var02
25b34                 | '     repeat
25b34                 | LR__2950
25b34                 | '         result := long[mailbox]    
25b34     01 05 02 FB | 	rdlong	_var03, _var02
25b38     00 04 56 F2 | 	cmps	_var03, #0 wc
25b3c     F4 FF 9F CD |  if_b	jmp	#LR__2950
25b40                 | '     while result < 0   
25b40                 | '     return -result                       'return success or error
25b40     02 FB 61 F6 | 	neg	result1, _var03
25b44                 | LR__2951
25b44                 | _psram_spin2_read1_ret
25b44     2D 00 64 FD | 	ret
25b48                 | 
25b48                 | ' 
25b48                 | ' '..............................................................................
25b48                 | ' 
25b48                 | ' {{
25b48                 | ' }}
25b48                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
25b48                 | _psram_spin2_write
25b48                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
25b48                 | '     if drivercog == -1 ' driver must be running
25b48     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25b4c     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
25b50     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25b54     FF FF 7F FF 
25b58     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
25b5c                 | '         return ERR_INACTIVE
25b5c     0F FA 65 A6 |  if_e	neg	result1, #15
25b60     7C 00 90 AD |  if_e	jmp	#LR__2961
25b64                 | '     if count == 0 ' don't even bother writing
25b64     00 16 0E F2 | 	cmp	arg03, #0 wz
25b68                 | '         return 0
25b68     00 FA 05 A6 |  if_e	mov	result1, #0
25b6c     70 00 90 AD |  if_e	jmp	#LR__2961
25b70                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
25b70     00 FA 05 F6 | 	mov	result1, #0
25b74     01 FA 61 FD | 	cogid	result1
25b78     FD 00 02 F6 | 	mov	_var01, result1
25b7c     01 00 66 F0 | 	shl	_var01, #1
25b80     FD 00 02 F1 | 	add	_var01, result1
25b84     02 00 66 F0 | 	shl	_var01, #2
25b88     FF 03 00 FF 
25b8c     00 03 06 F6 | 	mov	_var02, ##524032
25b90     00 03 02 F1 | 	add	_var02, _var01
25b94                 | '     if long[mailbox] < 0
25b94     01 01 02 FB | 	rdlong	_var01, _var02
25b98     00 00 56 F2 | 	cmps	_var01, #0 wc
25b9c                 | '         return ERR_MAILBOX_BUSY
25b9c     1C FA 65 C6 |  if_b	neg	result1, #28
25ba0     3C 00 90 CD |  if_b	jmp	#LR__2961
25ba4                 | '     long[mailbox][2] := count
25ba4     08 02 06 F1 | 	add	_var02, #8
25ba8     01 17 62 FC | 	wrlong	arg03, _var02
25bac                 | '     long[mailbox][1] := srcHubAddr
25bac     04 02 86 F1 | 	sub	_var02, #4
25bb0     01 13 62 FC | 	wrlong	arg01, _var02
25bb4     04 02 86 F1 | 	sub	_var02, #4
25bb8                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
25bb8     0A 05 02 F6 | 	mov	_var03, arg02
25bbc     D9 04 06 F4 | 	bitl	_var03, #217
25bc0     00 00 78 FF 
25bc4     00 00 06 F6 | 	mov	_var01, ##-268435456
25bc8     02 01 02 F1 | 	add	_var01, _var03
25bcc     01 01 62 FC | 	wrlong	_var01, _var02
25bd0                 | '     repeat
25bd0                 | LR__2960
25bd0                 | '         result := long[mailbox]    
25bd0     01 05 02 FB | 	rdlong	_var03, _var02
25bd4     00 04 56 F2 | 	cmps	_var03, #0 wc
25bd8     F4 FF 9F CD |  if_b	jmp	#LR__2960
25bdc                 | '     while result < 0   
25bdc                 | '     return -result                       'return success or error
25bdc     02 FB 61 F6 | 	neg	result1, _var03
25be0                 | LR__2961
25be0                 | _psram_spin2_write_ret
25be0     2D 00 64 FD | 	ret
25be4                 | 
25be4                 | ' 
25be4                 | ' ' generalized fill
25be4                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
25be4                 | _psram_spin2_fill
25be4     09 01 02 F6 | 	mov	_var01, arg01
25be8     0A 03 02 F6 | 	mov	_var02, arg02
25bec     0B 05 02 F6 | 	mov	_var03, arg03
25bf0     0D 07 02 F6 | 	mov	_var04, arg05
25bf4                 | '     case datasize 
25bf4     01 06 86 F1 | 	sub	_var04, #1
25bf8     04 06 26 F3 | 	fle	_var04, #4
25bfc     30 06 62 FD | 	jmprel	_var04
25c00                 | LR__2970
25c00     10 00 90 FD | 	jmp	#LR__2971
25c04     18 00 90 FD | 	jmp	#LR__2972
25c08     2C 00 90 FD | 	jmp	#LR__2974
25c0c     1C 00 90 FD | 	jmp	#LR__2973
25c10     24 00 90 FD | 	jmp	#LR__2974
25c14                 | LR__2971
25c14                 | '         1: req := driver.R_WRITEBYTE
25c14     00 00 60 FF 
25c18     00 08 06 F6 | 	mov	_var05, ##-1073741824
25c1c     20 00 90 FD | 	jmp	#LR__2975
25c20                 | LR__2972
25c20                 | '         2: req := driver.R_WRITEWORD
25c20     00 00 68 FF 
25c24     00 08 06 F6 | 	mov	_var05, ##-805306368
25c28     14 00 90 FD | 	jmp	#LR__2975
25c2c                 | LR__2973
25c2c                 | '         4: req := driver.R_WRITELONG
25c2c     00 00 70 FF 
25c30     00 08 06 F6 | 	mov	_var05, ##-536870912
25c34     08 00 90 FD | 	jmp	#LR__2975
25c38                 | LR__2974
25c38                 | '         other : return ERR_INVALID
25c38     06 FA 65 F6 | 	neg	result1, #6
25c3c     94 00 90 FD | 	jmp	#LR__2977
25c40                 | LR__2975
25c40                 | '     if count == 0   ' nothing to do
25c40     00 04 0E F2 | 	cmp	_var03, #0 wz
25c44                 | '         return 0
25c44     00 FA 05 A6 |  if_e	mov	result1, #0
25c48     88 00 90 AD |  if_e	jmp	#LR__2977
25c4c                 | '     if drivercog == -1
25c4c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25c50     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
25c54     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25c58     FF FF 7F FF 
25c5c     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
25c60                 | '         return ERR_INACTIVE
25c60     0F FA 65 A6 |  if_e	neg	result1, #15
25c64     6C 00 90 AD |  if_e	jmp	#LR__2977
25c68                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
25c68     00 FA 05 F6 | 	mov	result1, #0
25c6c     01 FA 61 FD | 	cogid	result1
25c70     FD 06 02 F6 | 	mov	_var04, result1
25c74     01 06 66 F0 | 	shl	_var04, #1
25c78     FD 06 02 F1 | 	add	_var04, result1
25c7c     02 06 66 F0 | 	shl	_var04, #2
25c80     FF 03 00 FF 
25c84     00 0B 06 F6 | 	mov	_var06, ##524032
25c88     03 0B 02 F1 | 	add	_var06, _var04
25c8c                 | '     if long[mailbox] < 0
25c8c     05 07 02 FB | 	rdlong	_var04, _var06
25c90     00 06 56 F2 | 	cmps	_var04, #0 wc
25c94                 | '         return ERR_MAILBOX_BUSY
25c94     1C FA 65 C6 |  if_b	neg	result1, #28
25c98     38 00 90 CD |  if_b	jmp	#LR__2977
25c9c                 | '     long[mailbox][2] := count
25c9c     08 0A 06 F1 | 	add	_var06, #8
25ca0     05 05 62 FC | 	wrlong	_var03, _var06
25ca4                 | '     long[mailbox][1] := pattern
25ca4     04 0A 86 F1 | 	sub	_var06, #4
25ca8     05 03 62 FC | 	wrlong	_var02, _var06
25cac     04 0A 86 F1 | 	sub	_var06, #4
25cb0                 | '     long[mailbox] := req + (addr & $1ffffff)
25cb0     04 0D 02 F6 | 	mov	_var07, _var05
25cb4     00 0F 02 F6 | 	mov	_var08, _var01
25cb8     D9 0E 06 F4 | 	bitl	_var08, #217
25cbc     07 0D 02 F1 | 	add	_var07, _var08
25cc0     05 0D 62 FC | 	wrlong	_var07, _var06
25cc4                 | '     repeat
25cc4                 | LR__2976
25cc4                 | '         r := long[mailbox]
25cc4     05 0F 02 FB | 	rdlong	_var08, _var06
25cc8     00 0E 56 F2 | 	cmps	_var08, #0 wc
25ccc     F4 FF 9F CD |  if_b	jmp	#LR__2976
25cd0                 | '     while r < 0
25cd0                 | '     return -r                  ' return 0 for success or negated error code
25cd0     07 FB 61 F6 | 	neg	result1, _var08
25cd4                 | LR__2977
25cd4                 | _psram_spin2_fill_ret
25cd4     2D 00 64 FD | 	ret
25cd8                 | 
25cd8                 | ' 
25cd8                 | ' '..............................................................................
25cd8                 | ' 
25cd8                 | ' {{
25cd8                 | ' }}
25cd8                 | ' PUB setQos(cog, qos) : result | mailbox
25cd8                 | _psram_spin2_setQos
25cd8     09 01 02 F6 | 	mov	_var01, arg01
25cdc                 | '     if drivercog == -1 ' driver must be running
25cdc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25ce0     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
25ce4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25ce8     FF FF 7F FF 
25cec     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
25cf0                 | '         return ERR_INACTIVE
25cf0     0F FA 65 A6 |  if_e	neg	result1, #15
25cf4     9C 00 90 AD |  if_e	jmp	#LR__2984
25cf8                 | '     if cog < 0 or cog > 7 ' enforce cog id range
25cf8     00 00 56 F2 | 	cmps	_var01, #0 wc
25cfc     08 00 90 CD |  if_b	jmp	#LR__2980
25d00     08 00 56 F2 | 	cmps	_var01, #8 wc
25d04     08 00 90 CD |  if_b	jmp	#LR__2981
25d08                 | LR__2980
25d08                 | '         return ERR_INVALID
25d08     06 FA 65 F6 | 	neg	result1, #6
25d0c     84 00 90 FD | 	jmp	#LR__2984
25d10                 | LR__2981
25d10                 | '     long[@qosData][cog] := qos & !$1ff
25d10     FF 15 26 F5 | 	andn	arg02, #511
25d14     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
25d18     02 00 66 F0 | 	shl	_var01, #2
25d1c     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
25d20     00 15 62 FC | 	wrlong	arg02, _var01
25d24                 | '     mailbox := $7FF00 + drivercog*12
25d24     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
25d28     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
25d2c     02 07 02 F6 | 	mov	_var04, _var03
25d30     01 06 66 F0 | 	shl	_var04, #1
25d34     02 07 02 F1 | 	add	_var04, _var03
25d38     02 06 66 F0 | 	shl	_var04, #2
25d3c     FF 03 00 FF 
25d40     00 09 06 F6 | 	mov	_var05, ##524032
25d44     03 09 02 F1 | 	add	_var05, _var04
25d48                 | '     repeat until LOCKTRY(driverlock)
25d48     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
25d4c                 | LR__2982
25d4c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25d50     06 12 72 FD | 	locktry	arg01 wc
25d54     F4 FF 9F 3D |  if_ae	jmp	#LR__2982
25d58     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25d5c                 | '     long[mailbox] := driver.R_CONFIG + cogid()
25d5c     00 06 06 F6 | 	mov	_var04, #0
25d60     01 06 62 FD | 	cogid	_var04
25d64     00 00 78 FF 
25d68     00 02 06 F6 | 	mov	_var02, ##-268435456
25d6c     03 03 02 F1 | 	add	_var02, _var04
25d70     04 03 62 FC | 	wrlong	_var02, _var05
25d74                 | '     repeat while long[mailbox] < 0
25d74                 | LR__2983
25d74     04 03 02 FB | 	rdlong	_var02, _var05
25d78     00 02 56 F2 | 	cmps	_var02, #0 wc
25d7c     F4 FF 9F CD |  if_b	jmp	#LR__2983
25d80                 | '     LOCKREL(driverlock)
25d80     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
25d84     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25d88     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25d8c     07 12 72 FD | 	lockrel	arg01 wc
25d90     00 FA 05 F6 | 	mov	result1, #0
25d94                 | LR__2984
25d94                 | _psram_spin2_setQos_ret
25d94     2D 00 64 FD | 	ret
25d98                 | 
25d98                 | ' 
25d98                 | ' '..............................................................................
25d98                 | ' 
25d98                 | ' {{
25d98                 | ' }}
25d98                 | ' PRI lookupDelay(freq) : delay | profile
25d98                 | _psram_spin2_lookupDelay
25d98                 | '     profile := @delayTable
25d98     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
25d9c     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
25da0                 | '     delay := long[profile][0]
25da0     00 03 02 FB | 	rdlong	_var02, _var01
25da4                 | '     repeat while long[profile][1] 
25da4     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
25da8     97 16 48 FB | 	callpa	#(@LR__2991-@LR__2990)>>2,fcache_load_ptr_
25dac                 | LR__2990
25dac     04 00 06 F1 | 	add	_var01, #4
25db0     00 FB 09 FB | 	rdlong	result1, _var01 wz
25db4     04 00 86 F1 | 	sub	_var01, #4
25db8     1C 00 90 AD |  if_e	jmp	#LR__2992
25dbc                 | '         if freq +< long[profile][1] 
25dbc     04 00 06 F1 | 	add	_var01, #4
25dc0     00 FB 01 FB | 	rdlong	result1, _var01
25dc4     04 00 86 F1 | 	sub	_var01, #4
25dc8     FD 12 12 F2 | 	cmp	arg01, result1 wc
25dcc                 | '             quit
25dcc                 | '         profile += 4
25dcc     04 00 06 31 |  if_ae	add	_var01, #4
25dd0                 | '         delay++
25dd0     01 02 06 31 |  if_ae	add	_var02, #1
25dd4     D4 FF 9F 3D |  if_ae	jmp	#LR__2990
25dd8                 | LR__2991
25dd8                 | LR__2992
25dd8     01 FB 01 F6 | 	mov	result1, _var02
25ddc                 | _psram_spin2_lookupDelay_ret
25ddc     2D 00 64 FD | 	ret
25de0                 | 
25de0                 | ' 
25de0                 | ' PUB start() : r
25de0                 | _usbnew_spin2_start
25de0     00 00 06 F6 | 	mov	_var01, #0
25de4                 | '   ifnot driver_cog
25de4     15 00 00 FF 
25de8     47 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10823
25dec     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
25df0     15 00 00 FF 
25df4     47 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10823
25df8     38 00 90 5D |  if_ne	jmp	#LR__3000
25dfc                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
25dfc     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
25e00     10 00 06 F6 | 	mov	_var01, #16
25e04     00 16 06 F6 | 	mov	arg03, #0
25e08     28 16 62 FD | 	setq	arg03
25e0c     0A 01 F2 FC | 	coginit	_var01, arg02 wc
25e10     01 00 66 C6 |  if_b	neg	_var01, #1
25e14                 | '     if r >= 0
25e14     00 00 56 F2 | 	cmps	_var01, #0 wc
25e18                 | '       driver_cog := r+1
25e18     00 03 02 36 |  if_ae	mov	_var02, _var01
25e1c     01 02 06 31 |  if_ae	add	_var02, #1
25e20     15 00 00 3F 
25e24     47 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10823
25e28     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
25e2c     15 00 00 3F 
25e30     47 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10823
25e34                 | LR__3000
25e34     00 FB 01 F6 | 	mov	result1, _var01
25e38                 | _usbnew_spin2_start_ret
25e38     2D 00 64 FD | 	ret
25e3c                 | 
25e3c                 | '     '' (Always enabled)
25e3c                 | ' 
25e3c                 | ' '' Get current pressed state of a keyboard key
25e3c                 | ' PUB keystate(key) : r | buf[2],tmp
25e3c                 | _usbnew_spin2_keystate
25e3c     00 04 06 F6 | 	mov	_var03, #0
25e40                 | '   if key >= $E0 && key < $E8
25e40     E0 12 56 F2 | 	cmps	arg01, #224 wc
25e44     34 00 90 CD |  if_b	jmp	#LR__3010
25e48     E8 12 56 F2 | 	cmps	arg01, #232 wc
25e4c     2C 00 90 3D |  if_ae	jmp	#LR__3010
25e50                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
25e50     00 FA 05 F6 | 	mov	result1, #0
25e54     13 00 00 FF 
25e58     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
25e5c     09 07 02 F6 | 	mov	_var04, arg01
25e60     E0 06 86 F1 | 	sub	_var04, #224
25e64     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
25e68     03 09 4A F0 | 	shr	_var05, _var04 wz
25e6c     13 00 00 FF 
25e70     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
25e74     01 FA 65 56 |  if_ne	neg	result1, #1
25e78     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
25e7c                 | LR__3010
25e7c                 | '   else
25e7c                 | '     '' Do this in inline ASM to ensure atomicity
25e7c                 | '     tmp := @hkbd_report
25e7c     13 00 00 FF 
25e80     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
25e84     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
25e88                 | '     org
25e88     13 00 00 FF 
25e8c     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
25e90     97 1E 48 FB | 	callpa	#(@LR__3012-@LR__3011)>>2,fcache_load_ptr_
25e94                 | LR__3011
25e94 000             | 	org	0
25e94 000 28 02 64 FD | 	setq	#1
25e98 001 04 01 02 FB | 	rdlong	_var01, _var05
25e9c 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
25ea0 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
25ea4 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
25ea8 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
25eac 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
25eb0 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
25eb4 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
25eb8 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
25ebc 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
25ec0 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
25ec4 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
25ec8 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
25ecc 00e 01 04 66 A6 |  if_e	neg	_var03, #1
25ed0 00f             | LR__3012
25ed0                 | 	orgh
25ed0     02 FB 01 F6 | 	mov	result1, _var03
25ed4                 | _usbnew_spin2_keystate_ret
25ed4     2D 00 64 FD | 	ret
25ed8                 | 
25ed8                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
25ed8                 | ' 
25ed8                 | ' '' Return key event from buffer if there is one
25ed8                 | ' PUB get_key() : r | tail
25ed8                 | _usbnew_spin2_get_key
25ed8                 | '   tail := keyq_tail
25ed8     0F 00 00 FF 
25edc     C5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7877
25ee0     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
25ee4                 | '   if keyq_head == tail
25ee4     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
25ee8     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
25eec     0F 00 00 FF 
25ef0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
25ef4     00 03 0A F2 | 	cmp	_var02, _var01 wz
25ef8                 | '     return 0 ' No event
25ef8     00 FA 05 A6 |  if_e	mov	result1, #0
25efc     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
25f00                 | '   r := keyq_data[tail]
25f00     00 03 02 F6 | 	mov	_var02, _var01
25f04     02 02 66 F0 | 	shl	_var02, #2
25f08     0F 00 00 FF 
25f0c     C6 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7878
25f10     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
25f14     01 FB 01 FB | 	rdlong	result1, _var02
25f18                 | '   if ++tail == KEYQUEUE_SIZE
25f18     01 00 06 F1 | 	add	_var01, #1
25f1c     80 00 0E F2 | 	cmp	_var01, #128 wz
25f20                 | '     tail := 0
25f20     00 00 06 A6 |  if_e	mov	_var01, #0
25f24                 | '   keyq_tail := tail
25f24     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
25f28     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
25f2c     0F 00 00 FF 
25f30     C5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7877
25f34                 | _usbnew_spin2_get_key_ret
25f34     2D 00 64 FD | 	ret
25f38                 | 
25f38                 | ' 
25f38                 | ' '' Emulate mouse movement
25f38                 | ' PUB mouse_move(x,y)
25f38                 | _usbnew_spin2_mouse_move
25f38     02 4A 05 F6 | 	mov	COUNT_, #2
25f3c     A8 00 A0 FD | 	call	#pushregs_
25f40     09 27 02 F6 | 	mov	local01, arg01
25f44     0A 29 02 F6 | 	mov	local02, arg02
25f48                 | '   mouse_lock := 1
25f48     14 00 00 FF 
25f4c     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
25f50     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
25f54     14 00 00 FF 
25f58     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
25f5c                 | '   waitus(2) ' hope driver is now done
25f5c     02 12 06 F6 | 	mov	arg01, #2
25f60     30 0B B0 FD | 	call	#__system___waitus
25f64                 | '   mouse_xacc := x
25f64     14 00 00 FF 
25f68     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
25f6c     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
25f70                 | '   mouse_yacc := y
25f70     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
25f74     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
25f78                 | '   if mouse_outptr
25f78     04 00 00 FF 
25f7c     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
25f80     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
25f84     0F 00 00 FF 
25f88     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
25f8c     24 00 90 AD |  if_e	jmp	#LR__3020
25f90                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
25f90     10 28 66 F0 | 	shl	local02, #16
25f94     13 27 32 F9 | 	getword	local01, local01, #0
25f98     13 29 42 F5 | 	or	local02, local01
25f9c     0F 00 00 FF 
25fa0     C0 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7872
25fa4     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
25fa8     0F 00 00 FF 
25fac     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
25fb0     13 29 62 FC | 	wrlong	local02, local01
25fb4                 | LR__3020
25fb4                 | '   mouse_lock := 0
25fb4     14 00 00 FF 
25fb8     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
25fbc     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
25fc0     14 00 00 FF 
25fc4     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
25fc8     A7 F0 03 F6 | 	mov	ptra, fp
25fcc     B2 00 A0 FD | 	call	#popregs_
25fd0                 | _usbnew_spin2_mouse_move_ret
25fd0     2D 00 64 FD | 	ret
25fd4                 | 
25fd4                 | '     '' Set HAVE_HIDPAD to enable.
25fd4                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
25fd4                 | ' 
25fd4                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
25fd4                 | ' PUB hidpad_id(dev) : r
25fd4                 | _usbnew_spin2_hidpad_id
25fd4                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
25fd4     13 00 00 FF 
25fd8     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
25fdc     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
25fe0     09 01 02 F6 | 	mov	_var01, arg01
25fe4     03 00 66 F0 | 	shl	_var01, #3
25fe8     09 01 82 F1 | 	sub	_var01, arg01
25fec     02 00 66 F0 | 	shl	_var01, #2
25ff0     00 FB 01 F1 | 	add	result1, _var01
25ff4     FD FA 01 FB | 	rdlong	result1, result1
25ff8     13 00 00 FF 
25ffc     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
26000                 | _usbnew_spin2_hidpad_id_ret
26000     2D 00 64 FD | 	ret
26004                 | 
26004                 | ' 
26004                 | ' '' Get all button states for a device
26004                 | ' PUB hidpad_buttons(dev) : r 
26004                 | _usbnew_spin2_hidpad_buttons
26004                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
26004     13 00 00 FF 
26008     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
2600c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
26010     09 01 02 F6 | 	mov	_var01, arg01
26014     03 00 66 F0 | 	shl	_var01, #3
26018     09 01 82 F1 | 	sub	_var01, arg01
2601c     02 00 66 F0 | 	shl	_var01, #2
26020     00 FB 01 F1 | 	add	result1, _var01
26024     14 FA 05 F1 | 	add	result1, #20
26028     FD FA 01 FB | 	rdlong	result1, result1
2602c     13 00 00 FF 
26030     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
26034                 | _usbnew_spin2_hidpad_buttons_ret
26034     2D 00 64 FD | 	ret
26038                 | 
26038                 | ' 
26038                 | ' '' Get state of an axis (normalized between -32768 and 32767)
26038                 | ' PUB hidpad_axis(dev,axnum) : r
26038                 | _usbnew_spin2_hidpad_axis
26038                 | '   if axnum +>= 6
26038     06 14 16 F2 | 	cmp	arg02, #6 wc
2603c                 | '     return 0
2603c     00 FA 05 36 |  if_ae	mov	result1, #0
26040     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
26044                 | '   else 
26044                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
26044     13 00 00 FF 
26048     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
2604c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
26050     09 01 02 F6 | 	mov	_var01, arg01
26054     03 00 66 F0 | 	shl	_var01, #3
26058     09 01 82 F1 | 	sub	_var01, arg01
2605c     02 00 66 F0 | 	shl	_var01, #2
26060     00 FB 01 F1 | 	add	result1, _var01
26064     04 00 06 F6 | 	mov	_var01, #4
26068     0A 01 02 F1 | 	add	_var01, arg02
2606c     01 00 66 F0 | 	shl	_var01, #1
26070     FD 00 02 F1 | 	add	_var01, result1
26074     00 FB E1 FA | 	rdword	result1, _var01
26078     0F FA 65 F7 | 	signx	result1, #15
2607c     13 00 00 FF 
26080     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
26084                 | _usbnew_spin2_hidpad_axis_ret
26084     2D 00 64 FD | 	ret
26088                 | 
26088                 | ' 
26088                 | ' '' Get state of a hat
26088                 | ' PUB hidpad_hat(dev,hatnum) : r
26088                 | _usbnew_spin2_hidpad_hat
26088                 | '   if hatnum +>= 4
26088     04 14 16 F2 | 	cmp	arg02, #4 wc
2608c                 | '     return 0
2608c     00 FA 05 36 |  if_ae	mov	result1, #0
26090     38 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
26094                 | '   else 
26094                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6*4+hatnum]
26094     13 00 00 FF 
26098     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
2609c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
260a0     09 01 02 F6 | 	mov	_var01, arg01
260a4     03 00 66 F0 | 	shl	_var01, #3
260a8     09 01 82 F1 | 	sub	_var01, arg01
260ac     02 00 66 F0 | 	shl	_var01, #2
260b0     00 FB 01 F1 | 	add	result1, _var01
260b4     18 00 06 F6 | 	mov	_var01, #24
260b8     0A 01 02 F1 | 	add	_var01, arg02
260bc     FD 00 02 F1 | 	add	_var01, result1
260c0     00 FB C1 FA | 	rdbyte	result1, _var01
260c4     13 00 00 FF 
260c8     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
260cc                 | _usbnew_spin2_hidpad_hat_ret
260cc     2D 00 64 FD | 	ret
260d0                 | 
260d0                 | ' 
260d0                 | ' 
260d0                 | ' '--------------------------------------------------------------
260d0                 | ' '---------- Init the variables, start the cog. ----------------
260d0                 | ' '--------------------------------------------------------------
260d0                 | ' 
260d0                 | ' pub start(mbox,scope,cache) :cog,base | iii
260d0                 | _audio096_spin2_start
260d0     04 4A 05 F6 | 	mov	COUNT_, #4
260d4     A8 00 A0 FD | 	call	#pushregs_
260d8     09 27 02 F6 | 	mov	local01, arg01
260dc                 | ' 
260dc                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
260dc                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
260dc                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
260dc                 | ' 
260dc                 | ' mailboxaddr:=mbox 
260dc     F2 26 62 FC | 	wrlong	local01, objptr
260e0                 | ' scope_ptr:=scope
260e0     04 E4 05 F1 | 	add	objptr, #4
260e4     F2 14 62 FC | 	wrlong	arg02, objptr
260e8                 | ' cache_ptr:=cache
260e8     04 E4 05 F1 | 	add	objptr, #4
260ec     F2 16 62 FC | 	wrlong	arg03, objptr
260f0                 | ' base:=@channel1[0]
260f0     04 E4 05 F1 | 	add	objptr, #4
260f4     F2 28 02 F6 | 	mov	local02, objptr
260f8                 | ' long[$40]:=mbox
260f8     40 26 66 FC | 	wrlong	local01, #64
260fc                 | ' repeat iii from 0 to 7
260fc     00 2A 06 F6 | 	mov	local03, #0
26100     02 00 00 FF 
26104     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
26108     0C E4 85 F1 | 	sub	objptr, #12
2610c     97 BC 48 FB | 	callpa	#(@LR__3031-@LR__3030)>>2,fcache_load_ptr_
26110                 | LR__3030
26110                 | '   long[base+64*iii]:=0
26110     14 27 02 F6 | 	mov	local01, local02
26114     15 FD 01 F6 | 	mov	result2, local03
26118     06 FC 65 F0 | 	shl	result2, #6
2611c     FE 26 02 F1 | 	add	local01, result2
26120     13 01 68 FC | 	wrlong	#0, local01
26124                 | '   long[base+64*iii+4]:=0
26124     14 27 02 F6 | 	mov	local01, local02
26128     15 FD 01 F6 | 	mov	result2, local03
2612c     06 FC 65 F0 | 	shl	result2, #6
26130     FE 26 02 F1 | 	add	local01, result2
26134     04 26 06 F1 | 	add	local01, #4
26138     13 01 68 FC | 	wrlong	#0, local01
2613c                 | '   long[base+64*iii+12]:=0
2613c     14 2D 02 F6 | 	mov	local04, local02
26140     15 27 02 F6 | 	mov	local01, local03
26144     06 26 66 F0 | 	shl	local01, #6
26148     13 2D 02 F1 | 	add	local04, local01
2614c     0C 2C 06 F1 | 	add	local04, #12
26150     16 01 68 FC | 	wrlong	#0, local04
26154                 | '   long[base+64*iii+16]:=2 
26154     14 2D 02 F6 | 	mov	local04, local02
26158     15 27 02 F6 | 	mov	local01, local03
2615c     06 26 66 F0 | 	shl	local01, #6
26160     13 2D 02 F1 | 	add	local04, local01
26164     10 2C 06 F1 | 	add	local04, #16
26168     16 05 68 FC | 	wrlong	#2, local04
2616c                 | '   word[base+64*iii+20]:=0
2616c     14 2D 02 F6 | 	mov	local04, local02
26170     15 27 02 F6 | 	mov	local01, local03
26174     06 26 66 F0 | 	shl	local01, #6
26178     13 2D 02 F1 | 	add	local04, local01
2617c     14 2C 06 F1 | 	add	local04, #20
26180     16 01 58 FC | 	wrword	#0, local04
26184                 | '   word[base+64*iii+22]:=8192
26184     14 2D 02 F6 | 	mov	local04, local02
26188     15 27 02 F6 | 	mov	local01, local03
2618c     06 26 66 F0 | 	shl	local01, #6
26190     13 2D 02 F1 | 	add	local04, local01
26194     16 2C 06 F1 | 	add	local04, #22
26198     10 00 80 FF 
2619c     16 01 58 FC | 	wrword	##8192, local04
261a0                 | '   word[base+64*iii+24]:=4000+2*iii
261a0     15 2D 02 F6 | 	mov	local04, local03
261a4     01 2C 66 F0 | 	shl	local04, #1
261a8     07 00 00 FF 
261ac     A0 27 06 F6 | 	mov	local01, ##4000
261b0     16 27 02 F1 | 	add	local01, local04
261b4     14 2D 02 F6 | 	mov	local04, local02
261b8     15 FD 01 F6 | 	mov	result2, local03
261bc     06 FC 65 F0 | 	shl	result2, #6
261c0     FE 2C 02 F1 | 	add	local04, result2
261c4     18 2C 06 F1 | 	add	local04, #24
261c8     16 27 52 FC | 	wrword	local01, local04
261cc                 | '   word[base+64*iii+26]:=2
261cc     14 2D 02 F6 | 	mov	local04, local02
261d0     15 27 02 F6 | 	mov	local01, local03
261d4     06 26 66 F0 | 	shl	local01, #6
261d8     13 2D 02 F1 | 	add	local04, local01
261dc     1A 2C 06 F1 | 	add	local04, #26
261e0     16 05 58 FC | 	wrword	#2, local04
261e4                 | '   long [base+64*iii+8]:=@null | $C0000000
261e4     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
261e8     3E 26 26 F4 | 	bith	local01, #62
261ec     14 2D 02 F6 | 	mov	local04, local02
261f0     15 17 02 F6 | 	mov	arg03, local03
261f4     06 16 66 F0 | 	shl	arg03, #6
261f8     0B 2D 02 F1 | 	add	local04, arg03
261fc     08 2C 06 F1 | 	add	local04, #8
26200     16 27 62 FC | 	wrlong	local01, local04
26204                 | '   long[base+64*iii+32]:=0
26204     14 2D 02 F6 | 	mov	local04, local02
26208     15 27 02 F6 | 	mov	local01, local03
2620c     06 26 66 F0 | 	shl	local01, #6
26210     13 2D 02 F1 | 	add	local04, local01
26214     20 2C 06 F1 | 	add	local04, #32
26218     16 01 68 FC | 	wrlong	#0, local04
2621c                 | '   long[base+64*iii+36]:=0
2621c     14 2D 02 F6 | 	mov	local04, local02
26220     15 27 02 F6 | 	mov	local01, local03
26224     06 26 66 F0 | 	shl	local01, #6
26228     13 2D 02 F1 | 	add	local04, local01
2622c     24 2C 06 F1 | 	add	local04, #36
26230     16 01 68 FC | 	wrlong	#0, local04
26234                 | '   long[base+64*iii+40]:=0
26234     14 2D 02 F6 | 	mov	local04, local02
26238     15 27 02 F6 | 	mov	local01, local03
2623c     06 26 66 F0 | 	shl	local01, #6
26240     13 2D 02 F1 | 	add	local04, local01
26244     28 2C 06 F1 | 	add	local04, #40
26248     16 01 68 FC | 	wrlong	#0, local04
2624c                 | '   long[base+64*iii+44]:=0
2624c     14 2D 02 F6 | 	mov	local04, local02
26250     15 27 02 F6 | 	mov	local01, local03
26254     06 26 66 F0 | 	shl	local01, #6
26258     13 2D 02 F1 | 	add	local04, local01
2625c     2C 2C 06 F1 | 	add	local04, #44
26260     16 01 68 FC | 	wrlong	#0, local04
26264                 | '   long[base+64*iii+28]:=0
26264     14 2D 02 F6 | 	mov	local04, local02
26268     15 27 02 F6 | 	mov	local01, local03
2626c     06 26 66 F0 | 	shl	local01, #6
26270     13 2D 02 F1 | 	add	local04, local01
26274     1C 2C 06 F1 | 	add	local04, #28
26278     16 01 68 FC | 	wrlong	#0, local04
2627c     01 2A 06 F1 | 	add	local03, #1
26280     08 2A 56 F2 | 	cmps	local03, #8 wc
26284     88 FE 9F CD |  if_b	jmp	#LR__3030
26288                 | LR__3031
26288     02 00 00 FF 
2628c     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
26290                 | '   
26290                 | ' cog:=coginit(16,@audio,@mailboxaddr)
26290     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
26294     F2 16 02 F6 | 	mov	arg03, objptr
26298     10 2C 06 F6 | 	mov	local04, #16
2629c     28 16 62 FD | 	setq	arg03
262a0     0A 2D F2 FC | 	coginit	local04, arg02 wc
262a4     01 2C 66 C6 |  if_b	neg	local04, #1
262a8                 | ' waitms(100)
262a8     64 12 06 F6 | 	mov	arg01, #100
262ac     78 07 B0 FD | 	call	#__system___waitms
262b0                 | ' return cog,base
262b0     14 FD 01 F6 | 	mov	result2, local02
262b4     16 FB 01 F6 | 	mov	result1, local04
262b8     A7 F0 03 F6 | 	mov	ptra, fp
262bc     B2 00 A0 FD | 	call	#popregs_
262c0                 | _audio096_spin2_start_ret
262c0     2D 00 64 FD | 	ret
262c4                 | 
262c4                 | ' 
262c4                 | ' ' a simple play procedure to not poke everything. 
262c4                 | ' 
262c4                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
262c4                 | _audio096_spin2_play
262c4     0C E4 05 F1 | 	add	objptr, #12
262c8     F2 00 02 F6 | 	mov	_var01, objptr
262cc     06 12 66 F0 | 	shl	arg01, #6
262d0     09 01 02 F1 | 	add	_var01, arg01
262d4     00 13 02 F6 | 	mov	arg01, _var01
262d8     0C 12 06 F1 | 	add	arg01, #12
262dc     09 1B 62 FC | 	wrlong	arg05, arg01
262e0     00 1C 56 F2 | 	cmps	arg06, #0 wc
262e4     00 13 02 36 |  if_ae	mov	arg01, _var01
262e8     10 12 06 31 |  if_ae	add	arg01, #16
262ec     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
262f0     02 1A 06 C1 |  if_b	add	arg05, #2
262f4     00 13 02 C6 |  if_b	mov	arg01, _var01
262f8     10 12 06 C1 |  if_b	add	arg01, #16
262fc     09 1B 62 CC |  if_b	wrlong	arg05, arg01
26300     0B 13 52 F6 | 	abs	arg01, arg03 wc
26304     0F 1B 80 FF 
26308     09 1F 1A FD | 	qdiv	##3546895, arg01
2630c                 | ' 
2630c                 | ' base2:=@channel1[0]+64*channel
2630c                 | ' 
2630c                 | ' 
2630c                 | ' long[base2+12]:= len
2630c                 | ' if loop >=0 
2630c                 | '   long[base2+16]:= loop
2630c     0C E4 85 F1 | 	sub	objptr, #12
26310                 | ' else
26310                 | '   long[base2+16]:= len+2
26310                 | ' word[base2+20]:=vol
26310     00 13 02 F6 | 	mov	arg01, _var01
26314     14 12 06 F1 | 	add	arg01, #20
26318     09 19 52 FC | 	wrword	arg04, arg01
2631c                 | ' word[base2+24]:= 3546895/splfreq 
2631c     00 19 02 F6 | 	mov	arg04, _var01
26320     18 18 06 F1 | 	add	arg04, #24
26324                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
26324                 | ' long[base2+28]:=$40000000    
26324                 | ' long[base2+32]:=0    
26324                 | ' long[base2+36]:=0    
26324                 | ' long[base2+40]:=0    
26324                 | ' long[base2+44]:=0    
26324                 | ' long[base2+8]:=sample+$C0000000     
26324     00 00 60 FF 
26328     00 14 06 F1 | 	add	arg02, ##-1073741824
2632c     18 12 62 FD | 	getqx	arg01
26330     09 13 82 F6 | 	negc	arg01, arg01
26334     0C 13 52 FC | 	wrword	arg01, arg04
26338     00 13 02 F6 | 	mov	arg01, _var01
2633c     1A 12 06 F1 | 	add	arg01, #26
26340     09 01 5A FC | 	wrword	#256, arg01
26344     00 13 02 F6 | 	mov	arg01, _var01
26348     1C 12 06 F1 | 	add	arg01, #28
2634c     00 00 A0 FF 
26350     09 01 68 FC | 	wrlong	##1073741824, arg01
26354     00 13 02 F6 | 	mov	arg01, _var01
26358     20 12 06 F1 | 	add	arg01, #32
2635c     09 01 68 FC | 	wrlong	#0, arg01
26360     00 13 02 F6 | 	mov	arg01, _var01
26364     24 12 06 F1 | 	add	arg01, #36
26368     09 01 68 FC | 	wrlong	#0, arg01
2636c     00 13 02 F6 | 	mov	arg01, _var01
26370     28 12 06 F1 | 	add	arg01, #40
26374     09 01 68 FC | 	wrlong	#0, arg01
26378     00 13 02 F6 | 	mov	arg01, _var01
2637c     2C 12 06 F1 | 	add	arg01, #44
26380     09 01 68 FC | 	wrlong	#0, arg01
26384     08 00 06 F1 | 	add	_var01, #8
26388     00 15 62 FC | 	wrlong	arg02, _var01
2638c                 | _audio096_spin2_play_ret
2638c     2D 00 64 FD | 	ret
26390                 | 
26390                 | ' 
26390                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
26390                 | _audio096_spin2_play8
26390                 | ' 
26390                 | ' base2:=@channel1[0]+64*channel
26390     0C E4 05 F1 | 	add	objptr, #12
26394     F2 00 02 F6 | 	mov	_var01, objptr
26398     06 12 66 F0 | 	shl	arg01, #6
2639c     09 01 02 F1 | 	add	_var01, arg01
263a0                 | ' long[base2]:=0
263a0     00 01 68 FC | 	wrlong	#0, _var01
263a4                 | ' long[base2+8]:=sample+$40000000 
263a4     00 00 20 FF 
263a8     00 14 06 F1 | 	add	arg02, ##1073741824
263ac     00 13 02 F6 | 	mov	arg01, _var01
263b0     08 12 06 F1 | 	add	arg01, #8
263b4     09 15 62 FC | 	wrlong	arg02, arg01
263b8                 | ' if loop>=0
263b8     00 1C 56 F2 | 	cmps	arg06, #0 wc
263bc     0C E4 85 F1 | 	sub	objptr, #12
263c0     1C 00 90 CD |  if_b	jmp	#LR__3040
263c4                 | '   long[base2+12]:=loop
263c4     00 15 02 F6 | 	mov	arg02, _var01
263c8     0C 14 06 F1 | 	add	arg02, #12
263cc     0A 1D 62 FC | 	wrlong	arg06, arg02
263d0                 | '   long[base2+16]:= len
263d0     00 1D 02 F6 | 	mov	arg06, _var01
263d4     10 1C 06 F1 | 	add	arg06, #16
263d8     0E 1B 62 FC | 	wrlong	arg05, arg06
263dc     1C 00 90 FD | 	jmp	#LR__3041
263e0                 | LR__3040
263e0                 | ' else
263e0                 | '   long[base2+12]:= len
263e0     00 1D 02 F6 | 	mov	arg06, _var01
263e4     0C 1C 06 F1 | 	add	arg06, #12
263e8     0E 1B 62 FC | 	wrlong	arg05, arg06
263ec                 | '   long[base2+16]:= len+1
263ec     01 1A 06 F1 | 	add	arg05, #1
263f0     00 13 02 F6 | 	mov	arg01, _var01
263f4     10 12 06 F1 | 	add	arg01, #16
263f8     09 1B 62 FC | 	wrlong	arg05, arg01
263fc                 | LR__3041
263fc     0B 17 52 F6 | 	abs	arg03, arg03 wc
26400     0F 1B 80 FF 
26404     0B 1F 1A FD | 	qdiv	##3546895, arg03
26408                 | ' word[base2+20]:=vol
26408     00 17 02 F6 | 	mov	arg03, _var01
2640c     14 16 06 F1 | 	add	arg03, #20
26410     0B 19 52 FC | 	wrword	arg04, arg03
26414                 | ' word[base2+24]:= 3546895 /splfreq 
26414     00 13 02 F6 | 	mov	arg01, _var01
26418     18 12 06 F1 | 	add	arg01, #24
2641c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
2641c     1A 00 06 F1 | 	add	_var01, #26
26420     18 18 62 FD | 	getqx	arg04
26424     0C 19 82 F6 | 	negc	arg04, arg04
26428     09 19 52 FC | 	wrword	arg04, arg01
2642c     00 01 5A FC | 	wrword	#256, _var01
26430                 | _audio096_spin2_play8_ret
26430     2D 00 64 FD | 	ret
26434                 | 
26434                 | ' 'long[base2+28]:=$40000000
26434                 | ' 
26434                 | '     
26434                 | ' pub stop(channel) 'silence it
26434                 | _audio096_spin2_stop
26434                 | ' 
26434                 | ' word[@channel1[0]+64*channel+20]:=0
26434     0C E4 05 F1 | 	add	objptr, #12
26438     F2 00 02 F6 | 	mov	_var01, objptr
2643c     09 03 02 F6 | 	mov	_var02, arg01
26440     06 02 66 F0 | 	shl	_var02, #6
26444     01 01 02 F1 | 	add	_var01, _var02
26448     14 00 06 F1 | 	add	_var01, #20
2644c     00 01 58 FC | 	wrword	#0, _var01
26450                 | ' word[@channel1[0]+64*channel+20]:=0
26450     F2 00 02 F6 | 	mov	_var01, objptr
26454     06 12 66 F0 | 	shl	arg01, #6
26458     09 01 02 F1 | 	add	_var01, arg01
2645c     14 00 06 F1 | 	add	_var01, #20
26460     00 01 58 FC | 	wrword	#0, _var01
26464     0C E4 85 F1 | 	sub	objptr, #12
26468                 | _audio096_spin2_stop_ret
26468     2D 00 64 FD | 	ret
2646c                 | hubexit
2646c     81 00 80 FD | 	jmp	#cogexit
26470                 | 
26470                 | __system___setbaud
26470     14 90 06 FB | 	rdlong	muldiva_, #20
26474     09 93 02 F6 | 	mov	muldivb_, arg01
26478     BA 00 A0 FD | 	call	#divide_
2647c     97 06 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
26480                 | LR__3050
26480     3E FA 9D FA | 	rdpin	result1, #62 wc
26484     FE FC A1 F1 | 	subx	result2, result2
26488     F4 FF 9F CD |  if_b	jmp	#LR__3050
2648c                 | LR__3051
2648c     40 7C 64 FD | 	dirl	#62
26490     40 7E 64 FD | 	dirl	#63
26494     F3 92 62 FC | 	wrlong	muldivb_, ptr___system__dat__
26498     10 92 66 F0 | 	shl	muldivb_, #16
2649c     07 14 06 F6 | 	mov	arg02, #7
264a0     49 15 02 F1 | 	add	arg02, muldivb_
264a4     3E F8 0C FC | 	wrpin	#124, #62
264a8     3E 14 16 FC | 	wxpin	arg02, #62
264ac     3F 7C 0C FC | 	wrpin	#62, #63
264b0     14 14 06 F1 | 	add	arg02, #20
264b4     3F 14 16 FC | 	wxpin	arg02, #63
264b8     41 7C 64 FD | 	dirh	#62
264bc     41 7E 64 FD | 	dirh	#63
264c0                 | __system___setbaud_ret
264c0     2D 00 64 FD | 	ret
264c4                 | 
264c4                 | __system___txraw
264c4     01 4A 05 F6 | 	mov	COUNT_, #1
264c8     A8 00 A0 FD | 	call	#pushregs_
264cc     09 27 02 F6 | 	mov	local01, arg01
264d0     97 06 48 FB | 	callpa	#(@LR__3061-@LR__3060)>>2,fcache_load_ptr_
264d4                 | LR__3060
264d4     3E FA 9D FA | 	rdpin	result1, #62 wc
264d8     FE FC A1 F1 | 	subx	result2, result2
264dc     F4 FF 9F CD |  if_b	jmp	#LR__3060
264e0                 | LR__3061
264e0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
264e4     C2 01 00 AF 
264e8     00 12 06 A6 |  if_e	mov	arg01, ##230400
264ec     80 FF BF AD |  if_e	call	#__system___setbaud
264f0     58 7C 64 FD | 	drvl	#62
264f4     3E 26 26 FC | 	wypin	local01, #62
264f8     01 FA 05 F6 | 	mov	result1, #1
264fc     A7 F0 03 F6 | 	mov	ptra, fp
26500     B2 00 A0 FD | 	call	#popregs_
26504                 | __system___txraw_ret
26504     2D 00 64 FD | 	ret
26508                 | 
26508                 | __system___rxraw
26508     0D 4A 05 F6 | 	mov	COUNT_, #13
2650c     A8 00 A0 FD | 	call	#pushregs_
26510     09 27 02 F6 | 	mov	local01, arg01
26514     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26518     C2 01 00 AF 
2651c     00 12 06 A6 |  if_e	mov	arg01, ##230400
26520     4C FF BF AD |  if_e	call	#__system___setbaud
26524     00 26 0E F2 | 	cmp	local01, #0 wz
26528     20 00 90 AD |  if_e	jmp	#LR__3070
2652c     14 2A 06 FB | 	rdlong	local03, #20
26530     0A 2A 46 F0 | 	shr	local03, #10
26534     15 27 02 FD | 	qmul	local01, local03
26538     1A FA 61 FD | 	getct	result1
2653c     18 2C 62 FD | 	getqx	local04
26540     16 FB 01 F1 | 	add	result1, local04
26544     FD 2E 02 F6 | 	mov	local05, result1
26548     04 00 90 FD | 	jmp	#LR__3071
2654c                 | LR__3070
2654c     00 2E 06 F6 | 	mov	local05, #0
26550                 | LR__3071
26550     01 30 66 F6 | 	neg	local06, #1
26554     3F 32 06 F6 | 	mov	local07, #63
26558     00 34 06 F6 | 	mov	local08, #0
2655c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26560     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
26564     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
26568                 | LR__3072
26568     08 36 16 F4 | 	testb	local09, #8 wc
2656c     09 36 76 F4 | 	testbn	local09, #9 andc
26570     0A 36 46 F0 | 	shr	local09, #10
26574     01 34 06 C6 |  if_b	mov	local08, #1
26578     40 7E 6C 3D |  if_ae	testp	#63 wz
2657c     01 34 06 26 |  if_nc_and_z	mov	local08, #1
26580     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
26584     04 36 46 20 |  if_nc_and_z	shr	local09, #4
26588                 | LR__3073
26588     00 28 06 F6 | 	mov	local02, #0
2658c     00 34 0E F2 | 	cmp	local08, #0 wz
26590     01 28 66 56 |  if_ne	neg	local02, #1
26594     00 38 06 F6 | 	mov	local10, #0
26598     00 2A 06 F6 | 	mov	local03, #0
2659c     00 26 0E F2 | 	cmp	local01, #0 wz
265a0     01 2A 66 56 |  if_ne	neg	local03, #1
265a4     00 2C 06 F6 | 	mov	local04, #0
265a8     00 3A 06 F6 | 	mov	local11, #0
265ac     17 3D 02 F6 | 	mov	local12, local05
265b0     1A FA 61 FD | 	getct	result1
265b4     FD 3E 02 F6 | 	mov	local13, result1
265b8     1F 3D 82 F1 | 	sub	local12, local13
265bc     00 3C 56 F2 | 	cmps	local12, #0 wc
265c0     00 3A 26 C6 |  if_b	not	local11, #0
265c4     00 3A 0E F2 | 	cmp	local11, #0 wz
265c8     00 2C 26 56 |  if_ne	not	local04, #0
265cc     16 2B CA F7 | 	test	local03, local04 wz
265d0     00 38 26 56 |  if_ne	not	local10, #0
265d4     1C 29 4A F5 | 	or	local02, local10 wz
265d8     8C FF 9F AD |  if_e	jmp	#LR__3072
265dc     00 34 0E F2 | 	cmp	local08, #0 wz
265e0     1B 31 02 56 |  if_ne	mov	local06, local09
265e4     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
265e8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
265ec     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
265f0     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
265f4     18 FB 01 F6 | 	mov	result1, local06
265f8     A7 F0 03 F6 | 	mov	ptra, fp
265fc     B2 00 A0 FD | 	call	#popregs_
26600                 | __system___rxraw_ret
26600     2D 00 64 FD | 	ret
26604                 | 
26604                 | __system___getus
26604     1A FC 71 FD | 	getct	result2 wc
26608     1A 00 62 FD | 	getct	_var01
2660c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
26610     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
26614     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26618     20 00 90 5D |  if_ne	jmp	#LR__3080
2661c     14 02 06 FB | 	rdlong	_var02, #20
26620     A1 07 00 FF 
26624     40 02 16 FD | 	qdiv	_var02, ##1000000
26628     10 E6 05 F1 | 	add	ptr___system__dat__, #16
2662c     18 FA 61 FD | 	getqx	result1
26630     FD 02 02 F6 | 	mov	_var02, result1
26634     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
26638     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
2663c                 | LR__3080
2663c     01 FD 11 FD | 	qdiv	result2, _var02
26640     19 FC 61 FD | 	getqy	result2
26644     28 FC 61 FD | 	setq	result2
26648     01 01 12 FD | 	qdiv	_var01, _var02
2664c     18 FA 61 FD | 	getqx	result1
26650                 | __system___getus_ret
26650     2D 00 64 FD | 	ret
26654                 | 
26654                 | __system____builtin_memmove
26654     09 01 02 F6 | 	mov	_var01, arg01
26658     0A 13 52 F2 | 	cmps	arg01, arg02 wc
2665c     10 00 90 CD |  if_b	jmp	#LR__3090
26660     0A 03 02 F6 | 	mov	_var02, arg02
26664     0B 03 02 F1 | 	add	_var02, arg03
26668     01 13 52 F2 | 	cmps	arg01, _var02 wc
2666c     48 00 90 CD |  if_b	jmp	#LR__3096
26670                 | LR__3090
26670     0B 05 02 F6 | 	mov	_var03, arg03
26674     02 04 4E F0 | 	shr	_var03, #2 wz
26678     18 00 90 AD |  if_e	jmp	#LR__3095
2667c     97 0A 48 FB | 	callpa	#(@LR__3093-@LR__3091)>>2,fcache_load_ptr_
26680                 | LR__3091
26680     02 09 D8 FC | 	rep	@LR__3094, _var03
26684                 | LR__3092
26684     0A 05 02 FB | 	rdlong	_var03, arg02
26688     09 05 62 FC | 	wrlong	_var03, arg01
2668c     04 12 06 F1 | 	add	arg01, #4
26690     04 14 06 F1 | 	add	arg02, #4
26694                 | LR__3093
26694                 | LR__3094
26694                 | LR__3095
26694     02 16 CE F7 | 	test	arg03, #2 wz
26698     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
2669c     09 03 52 5C |  if_ne	wrword	_var02, arg01
266a0     02 12 06 51 |  if_ne	add	arg01, #2
266a4     02 14 06 51 |  if_ne	add	arg02, #2
266a8     01 16 CE F7 | 	test	arg03, #1 wz
266ac     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
266b0     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
266b4     28 00 90 FD | 	jmp	#LR__3102
266b8                 | LR__3096
266b8     0B 13 02 F1 | 	add	arg01, arg03
266bc     0B 15 02 F1 | 	add	arg02, arg03
266c0     0B 07 0A F6 | 	mov	_var04, arg03 wz
266c4     18 00 90 AD |  if_e	jmp	#LR__3101
266c8     97 0A 48 FB | 	callpa	#(@LR__3099-@LR__3097)>>2,fcache_load_ptr_
266cc                 | LR__3097
266cc     03 09 D8 FC | 	rep	@LR__3100, _var04
266d0                 | LR__3098
266d0     01 12 86 F1 | 	sub	arg01, #1
266d4     01 14 86 F1 | 	sub	arg02, #1
266d8     0A 03 C2 FA | 	rdbyte	_var02, arg02
266dc     09 03 42 FC | 	wrbyte	_var02, arg01
266e0                 | LR__3099
266e0                 | LR__3100
266e0                 | LR__3101
266e0                 | LR__3102
266e0     00 FB 01 F6 | 	mov	result1, _var01
266e4                 | __system____builtin_memmove_ret
266e4     2D 00 64 FD | 	ret
266e8                 | 
266e8                 | __system____builtin_strcpy
266e8     09 01 02 F6 | 	mov	_var01, arg01
266ec     97 0A 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
266f0                 | LR__3110
266f0     0A FB C9 FA | 	rdbyte	result1, arg02 wz
266f4     09 FB 41 FC | 	wrbyte	result1, arg01
266f8     01 14 06 F1 | 	add	arg02, #1
266fc     01 12 06 F1 | 	add	arg01, #1
26700     EC FF 9F 5D |  if_ne	jmp	#LR__3110
26704                 | LR__3111
26704     00 FB 01 F6 | 	mov	result1, _var01
26708                 | __system____builtin_strcpy_ret
26708     2D 00 64 FD | 	ret
2670c                 | 
2670c                 | __system____topofstack
2670c     00 4A 05 F6 | 	mov	COUNT_, #0
26710     A8 00 A0 FD | 	call	#pushregs_
26714     08 F0 07 F1 | 	add	ptra, #8
26718     04 4E 05 F1 | 	add	fp, #4
2671c     A7 12 62 FC | 	wrlong	arg01, fp
26720     A7 FA 01 F6 | 	mov	result1, fp
26724     04 4E 85 F1 | 	sub	fp, #4
26728     A7 F0 03 F6 | 	mov	ptra, fp
2672c     B2 00 A0 FD | 	call	#popregs_
26730                 | __system____topofstack_ret
26730     2D 00 64 FD | 	ret
26734                 | 
26734                 | __system___lockmem
26734     00 FA 05 F6 | 	mov	result1, #0
26738     01 FA 61 FD | 	cogid	result1
2673c     00 FB 05 F1 | 	add	result1, #256
26740                 | LR__3120
26740     09 01 0A FB | 	rdlong	_var01, arg01 wz
26744     09 FB 61 AC |  if_e	wrlong	result1, arg01
26748     09 01 02 AB |  if_e	rdlong	_var01, arg01
2674c     09 01 02 AB |  if_e	rdlong	_var01, arg01
26750     FD 00 0A F2 | 	cmp	_var01, result1 wz
26754     E8 FF 9F 5D |  if_ne	jmp	#LR__3120
26758                 | __system___lockmem_ret
26758     2D 00 64 FD | 	ret
2675c                 | 
2675c                 | __system___string_cmp
2675c     97 14 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
26760                 | LR__3130
26760     09 01 C2 FA | 	rdbyte	_var01, arg01
26764     0A 03 C2 FA | 	rdbyte	_var02, arg02
26768     00 05 02 F6 | 	mov	_var03, _var01
2676c     01 05 8A F1 | 	sub	_var03, _var02 wz
26770     01 12 06 F1 | 	add	arg01, #1
26774     01 14 06 F1 | 	add	arg02, #1
26778     0C 00 90 5D |  if_ne	jmp	#LR__3132
2677c     00 00 0E F2 | 	cmp	_var01, #0 wz
26780     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
26784     D8 FF 9F 5D |  if_ne	jmp	#LR__3130
26788                 | LR__3131
26788                 | LR__3132
26788     02 FB 01 F6 | 	mov	result1, _var03
2678c                 | __system___string_cmp_ret
2678c     2D 00 64 FD | 	ret
26790                 | 
26790                 | __system___string_concat
26790     05 4A 05 F6 | 	mov	COUNT_, #5
26794     A8 00 A0 FD | 	call	#pushregs_
26798     09 27 02 F6 | 	mov	local01, arg01
2679c     0A 29 02 F6 | 	mov	local02, arg02
267a0     13 13 02 F6 | 	mov	arg01, local01
267a4     09 2B 02 F6 | 	mov	local03, arg01
267a8     97 06 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
267ac                 | LR__3140
267ac     15 FB C9 FA | 	rdbyte	result1, local03 wz
267b0     01 2A 06 51 |  if_ne	add	local03, #1
267b4     F4 FF 9F 5D |  if_ne	jmp	#LR__3140
267b8                 | LR__3141
267b8     09 2B 82 F1 | 	sub	local03, arg01
267bc     15 2D 02 F6 | 	mov	local04, local03
267c0     14 13 02 F6 | 	mov	arg01, local02
267c4     09 2B 02 F6 | 	mov	local03, arg01
267c8     97 06 48 FB | 	callpa	#(@LR__3143-@LR__3142)>>2,fcache_load_ptr_
267cc                 | LR__3142
267cc     15 FB C9 FA | 	rdbyte	result1, local03 wz
267d0     01 2A 06 51 |  if_ne	add	local03, #1
267d4     F4 FF 9F 5D |  if_ne	jmp	#LR__3142
267d8                 | LR__3143
267d8     09 2B 82 F1 | 	sub	local03, arg01
267dc     16 13 02 F6 | 	mov	arg01, local04
267e0     15 13 02 F1 | 	add	arg01, local03
267e4     01 12 06 F1 | 	add	arg01, #1
267e8     E8 40 B0 FD | 	call	#__system___gc_alloc_managed
267ec     FD 2E 0A F6 | 	mov	local05, result1 wz
267f0     28 00 90 AD |  if_e	jmp	#LR__3144
267f4     17 13 02 F6 | 	mov	arg01, local05
267f8     13 15 02 F6 | 	mov	arg02, local01
267fc     16 17 02 F6 | 	mov	arg03, local04
26800     50 FE BF FD | 	call	#__system____builtin_memmove
26804     17 13 02 F6 | 	mov	arg01, local05
26808     16 13 02 F1 | 	add	arg01, local04
2680c     01 2A 06 F1 | 	add	local03, #1
26810     14 15 02 F6 | 	mov	arg02, local02
26814     15 17 02 F6 | 	mov	arg03, local03
26818     38 FE BF FD | 	call	#__system____builtin_memmove
2681c                 | LR__3144
2681c     17 FB 01 F6 | 	mov	result1, local05
26820     A7 F0 03 F6 | 	mov	ptra, fp
26824     B2 00 A0 FD | 	call	#popregs_
26828                 | __system___string_concat_ret
26828     2D 00 64 FD | 	ret
2682c                 | 
2682c                 | __system___tx
2682c     02 4A 05 F6 | 	mov	COUNT_, #2
26830     A8 00 A0 FD | 	call	#pushregs_
26834     09 27 02 F6 | 	mov	local01, arg01
26838     0A 26 0E F2 | 	cmp	local01, #10 wz
2683c     18 00 90 5D |  if_ne	jmp	#LR__3150
26840     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26844     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
26848     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2684c     02 28 CE F7 | 	test	local02, #2 wz
26850     0D 12 06 56 |  if_ne	mov	arg01, #13
26854     6C FC BF 5D |  if_ne	call	#__system___txraw
26858                 | LR__3150
26858     13 13 02 F6 | 	mov	arg01, local01
2685c     64 FC BF FD | 	call	#__system___txraw
26860     A7 F0 03 F6 | 	mov	ptra, fp
26864     B2 00 A0 FD | 	call	#popregs_
26868                 | __system___tx_ret
26868     2D 00 64 FD | 	ret
2686c                 | 
2686c                 | __system___rx
2686c     01 4A 05 F6 | 	mov	COUNT_, #1
26870     A8 00 A0 FD | 	call	#pushregs_
26874                 | LR__3160
26874     00 12 06 F6 | 	mov	arg01, #0
26878     8C FC BF FD | 	call	#__system___rxraw
2687c     FD 26 02 F6 | 	mov	local01, result1
26880     FF FF 7F FF 
26884     FF 27 0E F2 | 	cmp	local01, ##-1 wz
26888     E8 FF 9F AD |  if_e	jmp	#LR__3160
2688c     0D 26 0E F2 | 	cmp	local01, #13 wz
26890     14 00 90 5D |  if_ne	jmp	#LR__3161
26894     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26898     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2689c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
268a0     02 FA CD F7 | 	test	result1, #2 wz
268a4     0A 26 06 56 |  if_ne	mov	local01, #10
268a8                 | LR__3161
268a8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
268ac     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
268b0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
268b4     01 12 CE F7 | 	test	arg01, #1 wz
268b8     1C 00 90 AD |  if_e	jmp	#LR__3164
268bc     7F 26 0E F2 | 	cmp	local01, #127 wz
268c0     0C 00 90 5D |  if_ne	jmp	#LR__3162
268c4     08 12 06 F6 | 	mov	arg01, #8
268c8     60 FF BF FD | 	call	#__system___tx
268cc     08 00 90 FD | 	jmp	#LR__3163
268d0                 | LR__3162
268d0     13 13 02 F6 | 	mov	arg01, local01
268d4     54 FF BF FD | 	call	#__system___tx
268d8                 | LR__3163
268d8                 | LR__3164
268d8     13 FB 01 F6 | 	mov	result1, local01
268dc     A7 F0 03 F6 | 	mov	ptra, fp
268e0     B2 00 A0 FD | 	call	#popregs_
268e4                 | __system___rx_ret
268e4     2D 00 64 FD | 	ret
268e8                 | 
268e8                 | __system___pinwrite
268e8     09 01 02 F6 | 	mov	_var01, arg01
268ec     1F 00 06 F5 | 	and	_var01, #31
268f0     20 12 CE F7 | 	test	arg01, #32 wz
268f4     06 12 46 F0 | 	shr	arg01, #6
268f8     09 13 CA F9 | 	bmask	arg01, arg01
268fc     00 13 62 F0 | 	shl	arg01, _var01
26900     00 15 62 F0 | 	shl	arg02, _var01
26904     1C 00 90 AD |  if_e	jmp	#LR__3170
26908     09 F7 43 F5 | 	or	dirb, arg01
2690c     FD 01 02 F6 | 	mov	_var01, outb
26910     09 01 22 F5 | 	andn	_var01, arg01
26914     09 15 02 F5 | 	and	arg02, arg01
26918     0A 01 42 F5 | 	or	_var01, arg02
2691c     00 FB 03 F6 | 	mov	outb, _var01
26920     18 00 90 FD | 	jmp	#LR__3171
26924                 | LR__3170
26924     09 F5 43 F5 | 	or	dira, arg01
26928     FC 01 02 F6 | 	mov	_var01, outa
2692c     09 01 22 F5 | 	andn	_var01, arg01
26930     09 15 02 F5 | 	and	arg02, arg01
26934     0A 01 42 F5 | 	or	_var01, arg02
26938     00 F9 03 F6 | 	mov	outa, _var01
2693c                 | LR__3171
2693c                 | __system___pinwrite_ret
2693c     2D 00 64 FD | 	ret
26940                 | 
26940                 | __system___basic_read_line
26940     06 4A 05 F6 | 	mov	COUNT_, #6
26944     A8 00 A0 FD | 	call	#pushregs_
26948     09 27 02 F6 | 	mov	local01, arg01
2694c     00 28 06 F6 | 	mov	local02, #0
26950     18 2A 06 F6 | 	mov	local03, #24
26954     00 2C 06 F6 | 	mov	local04, #0
26958     18 12 06 F6 | 	mov	arg01, #24
2695c     74 3F B0 FD | 	call	#__system___gc_alloc_managed
26960     FD 2E 0A F6 | 	mov	local05, result1 wz
26964     17 FB 01 A6 |  if_e	mov	result1, local05
26968     B0 00 90 AD |  if_e	jmp	#LR__3183
2696c                 | LR__3180
2696c     13 13 02 F6 | 	mov	arg01, local01
26970     78 0B B0 FD | 	call	#__system___basic_get_char
26974     FD 30 02 F6 | 	mov	local06, result1
26978     01 30 56 F2 | 	cmps	local06, #1 wc
2697c     8C 00 90 CD |  if_b	jmp	#LR__3182
26980     0A 30 0E F2 | 	cmp	local06, #10 wz
26984     10 00 90 5D |  if_ne	jmp	#LR__3181
26988     00 2C 0E F2 | 	cmp	local04, #0 wz
2698c     01 28 56 52 |  if_ne	cmps	local02, #1 wc
26990     01 28 86 11 |  if_a	sub	local02, #1
26994     74 00 90 FD | 	jmp	#LR__3182
26998                 | LR__3181
26998     0D 30 0E F2 | 	cmp	local06, #13 wz
2699c     01 2C 06 A6 |  if_e	mov	local04, #1
269a0     00 2C 06 56 |  if_ne	mov	local04, #0
269a4     08 30 0E F2 | 	cmp	local06, #8 wz
269a8     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
269ac     01 28 56 A2 |  if_e	cmps	local02, #1 wc
269b0     01 28 86 21 |  if_nc_and_z	sub	local02, #1
269b4     B4 FF 9F AD |  if_e	jmp	#LR__3180
269b8     17 17 02 F6 | 	mov	arg03, local05
269bc     14 17 02 F1 | 	add	arg03, local02
269c0     0B 31 42 FC | 	wrbyte	local06, arg03
269c4     01 28 06 F1 | 	add	local02, #1
269c8     15 29 0A F2 | 	cmp	local02, local03 wz
269cc     9C FF 9F 5D |  if_ne	jmp	#LR__3180
269d0     15 13 02 F6 | 	mov	arg01, local03
269d4     20 12 06 F1 | 	add	arg01, #32
269d8     F8 3E B0 FD | 	call	#__system___gc_alloc_managed
269dc     FD 30 0A F6 | 	mov	local06, result1 wz
269e0     18 FB 01 A6 |  if_e	mov	result1, local06
269e4     34 00 90 AD |  if_e	jmp	#LR__3183
269e8     18 13 02 F6 | 	mov	arg01, local06
269ec     17 15 02 F6 | 	mov	arg02, local05
269f0     15 17 02 F6 | 	mov	arg03, local03
269f4     5C FC BF FD | 	call	#__system____builtin_memmove
269f8     20 2A 06 F1 | 	add	local03, #32
269fc     17 13 02 F6 | 	mov	arg01, local05
26a00     0C 40 B0 FD | 	call	#__system___gc_free
26a04     18 2F 02 F6 | 	mov	local05, local06
26a08     60 FF 9F FD | 	jmp	#LR__3180
26a0c                 | LR__3182
26a0c     17 31 02 F6 | 	mov	local06, local05
26a10     14 31 02 F1 | 	add	local06, local02
26a14     18 01 48 FC | 	wrbyte	#0, local06
26a18     17 FB 01 F6 | 	mov	result1, local05
26a1c                 | LR__3183
26a1c     A7 F0 03 F6 | 	mov	ptra, fp
26a20     B2 00 A0 FD | 	call	#popregs_
26a24                 | __system___basic_read_line_ret
26a24     2D 00 64 FD | 	ret
26a28                 | 
26a28                 | __system___waitms
26a28     09 01 02 F6 | 	mov	_var01, arg01
26a2c     1A 02 62 FD | 	getct	_var02
26a30     14 04 06 FB | 	rdlong	_var03, #20
26a34     97 14 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
26a38                 | LR__3190
26a38     01 00 00 FF 
26a3c     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
26a40     1C 00 90 CD |  if_b	jmp	#LR__3192
26a44     02 03 02 F1 | 	add	_var02, _var03
26a48     01 13 02 F6 | 	mov	arg01, _var02
26a4c     00 12 66 FA | 	addct1	arg01, #0
26a50     24 22 60 FD | 	waitct1
26a54     01 00 00 FF 
26a58     E8 01 86 F1 | 	sub	_var01, ##1000
26a5c     D8 FF 9F FD | 	jmp	#LR__3190
26a60                 | LR__3191
26a60                 | LR__3192
26a60     01 00 56 F2 | 	cmps	_var01, #1 wc
26a64     28 00 90 CD |  if_b	jmp	#LR__3193
26a68     02 01 02 FD | 	qmul	_var01, _var03
26a6c     01 00 00 FF 
26a70     E8 17 06 F6 | 	mov	arg03, ##1000
26a74     19 FA 61 FD | 	getqy	result1
26a78     18 12 62 FD | 	getqx	arg01
26a7c     28 FA 61 FD | 	setq	result1
26a80     0B 13 12 FD | 	qdiv	arg01, arg03
26a84     18 12 62 FD | 	getqx	arg01
26a88     01 13 62 FA | 	addct1	arg01, _var02
26a8c     24 22 60 FD | 	waitct1
26a90                 | LR__3193
26a90                 | __system___waitms_ret
26a90     2D 00 64 FD | 	ret
26a94                 | 
26a94                 | __system___waitus
26a94     09 01 02 F6 | 	mov	_var01, arg01
26a98     1A 02 62 FD | 	getct	_var02
26a9c     14 04 06 FB | 	rdlong	_var03, #20
26aa0     97 14 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
26aa4                 | LR__3200
26aa4     A1 07 00 FF 
26aa8     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
26aac     1C 00 90 CD |  if_b	jmp	#LR__3202
26ab0     02 03 02 F1 | 	add	_var02, _var03
26ab4     01 13 02 F6 | 	mov	arg01, _var02
26ab8     00 12 66 FA | 	addct1	arg01, #0
26abc     24 22 60 FD | 	waitct1
26ac0     A1 07 00 FF 
26ac4     40 00 86 F1 | 	sub	_var01, ##1000000
26ac8     D8 FF 9F FD | 	jmp	#LR__3200
26acc                 | LR__3201
26acc                 | LR__3202
26acc     01 00 56 F2 | 	cmps	_var01, #1 wc
26ad0     28 00 90 CD |  if_b	jmp	#LR__3203
26ad4     02 01 02 FD | 	qmul	_var01, _var03
26ad8     A1 07 00 FF 
26adc     40 16 06 F6 | 	mov	arg03, ##1000000
26ae0     19 FA 61 FD | 	getqy	result1
26ae4     18 12 62 FD | 	getqx	arg01
26ae8     28 FA 61 FD | 	setq	result1
26aec     0B 13 12 FD | 	qdiv	arg01, arg03
26af0     18 FA 61 FD | 	getqx	result1
26af4     FD 02 62 FA | 	addct1	_var02, result1
26af8     24 22 60 FD | 	waitct1
26afc                 | LR__3203
26afc                 | __system___waitus_ret
26afc     2D 00 64 FD | 	ret
26b00                 | 
26b00                 | __system___mount
26b00     0B 4A 05 F6 | 	mov	COUNT_, #11
26b04     A8 00 A0 FD | 	call	#pushregs_
26b08     09 27 02 F6 | 	mov	local01, arg01
26b0c     0A 29 0A F6 | 	mov	local02, arg02 wz
26b10     01 2A 66 F6 | 	neg	local03, #1
26b14     01 FA 65 A6 |  if_e	neg	result1, #1
26b18     98 02 90 AD |  if_e	jmp	#LR__3225
26b1c     13 FB C1 FA | 	rdbyte	result1, local01
26b20     2F FA 0D F2 | 	cmp	result1, #47 wz
26b24     28 00 90 5D |  if_ne	jmp	#LR__3212
26b28     13 13 02 F6 | 	mov	arg01, local01
26b2c     09 2D 02 F6 | 	mov	local04, arg01
26b30     97 06 48 FB | 	callpa	#(@LR__3211-@LR__3210)>>2,fcache_load_ptr_
26b34                 | LR__3210
26b34     16 FB C9 FA | 	rdbyte	result1, local04 wz
26b38     01 2C 06 51 |  if_ne	add	local04, #1
26b3c     F4 FF 9F 5D |  if_ne	jmp	#LR__3210
26b40                 | LR__3211
26b40     09 2D 82 F1 | 	sub	local04, arg01
26b44     16 FB 01 F6 | 	mov	result1, local04
26b48     10 FA 55 F2 | 	cmps	result1, #16 wc
26b4c     14 00 90 CD |  if_b	jmp	#LR__3213
26b50                 | LR__3212
26b50     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26b54     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
26b58     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26b5c     01 FA 65 F6 | 	neg	result1, #1
26b60     50 02 90 FD | 	jmp	#LR__3225
26b64                 | LR__3213
26b64     00 2E 06 F6 | 	mov	local05, #0
26b68                 | LR__3214
26b68     04 2E 56 F2 | 	cmps	local05, #4 wc
26b6c     B0 00 90 3D |  if_ae	jmp	#LR__3219
26b70     17 13 02 F6 | 	mov	arg01, local05
26b74     02 12 66 F0 | 	shl	arg01, #2
26b78     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26b7c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26b80     09 FB 09 FB | 	rdlong	result1, arg01 wz
26b84     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26b88     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
26b8c     17 2B 02 86 |  if_c_and_z	mov	local03, local05
26b90     84 00 90 8D |  if_c_and_z	jmp	#LR__3218
26b94     17 13 02 F6 | 	mov	arg01, local05
26b98     02 12 66 F0 | 	shl	arg01, #2
26b9c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26ba0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26ba4     09 13 02 FB | 	rdlong	arg01, arg01
26ba8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26bac     09 2D 02 F6 | 	mov	local04, arg01
26bb0     97 06 48 FB | 	callpa	#(@LR__3216-@LR__3215)>>2,fcache_load_ptr_
26bb4                 | LR__3215
26bb4     16 FB C9 FA | 	rdbyte	result1, local04 wz
26bb8     01 2C 06 51 |  if_ne	add	local04, #1
26bbc     F4 FF 9F 5D |  if_ne	jmp	#LR__3215
26bc0                 | LR__3216
26bc0     09 2D 82 F1 | 	sub	local04, arg01
26bc4     16 31 02 F6 | 	mov	local06, local04
26bc8     18 13 02 F6 | 	mov	arg01, local06
26bcc     13 13 02 F1 | 	add	arg01, local01
26bd0     09 FB C1 FA | 	rdbyte	result1, arg01
26bd4     2F FA 0D F2 | 	cmp	result1, #47 wz
26bd8     18 33 02 56 |  if_ne	mov	local07, local06
26bdc     13 33 02 51 |  if_ne	add	local07, local01
26be0     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
26be4     30 00 90 5D |  if_ne	jmp	#LR__3217
26be8     17 17 02 F6 | 	mov	arg03, local05
26bec     02 16 66 F0 | 	shl	arg03, #2
26bf0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26bf4     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
26bf8     0B 15 02 FB | 	rdlong	arg02, arg03
26bfc     13 13 02 F6 | 	mov	arg01, local01
26c00     18 17 02 F6 | 	mov	arg03, local06
26c04     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26c08     48 51 B0 FD | 	call	#__system__strncmp
26c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
26c10     17 2B 02 A6 |  if_e	mov	local03, local05
26c14     08 00 90 AD |  if_e	jmp	#LR__3219
26c18                 | LR__3217
26c18                 | LR__3218
26c18     01 2E 06 F1 | 	add	local05, #1
26c1c     48 FF 9F FD | 	jmp	#LR__3214
26c20                 | LR__3219
26c20     FF FF 7F FF 
26c24     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
26c28     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26c2c     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
26c30     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26c34     01 FA 65 A6 |  if_e	neg	result1, #1
26c38     78 01 90 AD |  if_e	jmp	#LR__3225
26c3c     15 2F 02 F6 | 	mov	local05, local03
26c40     17 33 02 F6 | 	mov	local07, local05
26c44     02 32 66 F0 | 	shl	local07, #2
26c48     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26c4c     F3 32 02 F1 | 	add	local07, ptr___system__dat__
26c50     19 31 0A FB | 	rdlong	local06, local07 wz
26c54     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
26c58     58 00 90 AD |  if_e	jmp	#LR__3220
26c5c     4C 30 06 F1 | 	add	local06, #76
26c60     18 33 0A FB | 	rdlong	local07, local06 wz
26c64     4C 30 86 F1 | 	sub	local06, #76
26c68     48 00 90 AD |  if_e	jmp	#LR__3220
26c6c     4C 30 06 F1 | 	add	local06, #76
26c70     18 33 02 FB | 	rdlong	local07, local06
26c74     19 2B 02 F6 | 	mov	local03, local07
26c78     13 32 46 F7 | 	zerox	local07, #19
26c7c     14 2A 46 F0 | 	shr	local03, #20
26c80     02 2A 66 F0 | 	shl	local03, #2
26c84     ED 2A 02 F1 | 	add	local03, __methods__
26c88     15 2B 02 FB | 	rdlong	local03, local03
26c8c     17 31 02 F6 | 	mov	local06, local05
26c90     02 30 66 F0 | 	shl	local06, #2
26c94     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26c98     F3 30 02 F1 | 	add	local06, ptr___system__dat__
26c9c     18 13 02 FB | 	rdlong	arg01, local06
26ca0     F2 30 02 F6 | 	mov	local06, objptr
26ca4     19 E5 01 F6 | 	mov	objptr, local07
26ca8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26cac     2D 2A 62 FD | 	call	local03
26cb0     18 E5 01 F6 | 	mov	objptr, local06
26cb4                 | LR__3220
26cb4     17 35 02 F6 | 	mov	local08, local05
26cb8     02 34 66 F0 | 	shl	local08, #2
26cbc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26cc0     F3 34 02 F1 | 	add	local08, ptr___system__dat__
26cc4     1A 29 62 FC | 	wrlong	local02, local08
26cc8     00 28 0E F2 | 	cmp	local02, #0 wz
26ccc     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
26cd0     18 00 90 5D |  if_ne	jmp	#LR__3221
26cd4     02 2E 66 F0 | 	shl	local05, #2
26cd8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26cdc     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
26ce0     17 01 68 FC | 	wrlong	#0, local05
26ce4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26ce8     C4 00 90 FD | 	jmp	#LR__3224
26cec                 | LR__3221
26cec     17 37 02 F6 | 	mov	local09, local05
26cf0     04 36 66 F0 | 	shl	local09, #4
26cf4     24 E6 05 F1 | 	add	ptr___system__dat__, #36
26cf8     F3 36 02 F1 | 	add	local09, ptr___system__dat__
26cfc     1B 13 02 F6 | 	mov	arg01, local09
26d00     13 15 02 F6 | 	mov	arg02, local01
26d04     10 16 06 F6 | 	mov	arg03, #16
26d08     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
26d0c     98 4F B0 FD | 	call	#__system__strncpy
26d10     48 28 06 F1 | 	add	local02, #72
26d14     14 35 0A FB | 	rdlong	local08, local02 wz
26d18     48 28 86 F1 | 	sub	local02, #72
26d1c     7C 00 90 AD |  if_e	jmp	#LR__3223
26d20     48 28 06 F1 | 	add	local02, #72
26d24     14 35 02 FB | 	rdlong	local08, local02
26d28     1A 39 02 F6 | 	mov	local10, local08
26d2c     13 34 46 F7 | 	zerox	local08, #19
26d30     14 38 46 F0 | 	shr	local10, #20
26d34     02 38 66 F0 | 	shl	local10, #2
26d38     ED 38 02 F1 | 	add	local10, __methods__
26d3c     1C 39 02 FB | 	rdlong	local10, local10
26d40     1B 13 02 F6 | 	mov	arg01, local09
26d44     F2 3A 02 F6 | 	mov	local11, objptr
26d48     1A E5 01 F6 | 	mov	objptr, local08
26d4c     2D 38 62 FD | 	call	local10
26d50     1D E5 01 F6 | 	mov	objptr, local11
26d54     FD 12 0A F6 | 	mov	arg01, result1 wz
26d58     40 00 90 AD |  if_e	jmp	#LR__3222
26d5c     17 35 02 F6 | 	mov	local08, local05
26d60     02 34 66 F0 | 	shl	local08, #2
26d64     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26d68     F3 34 02 F1 | 	add	local08, ptr___system__dat__
26d6c     1A 01 68 FC | 	wrlong	#0, local08
26d70     02 2E 66 F0 | 	shl	local05, #2
26d74     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26d78     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
26d7c     17 01 68 FC | 	wrlong	#0, local05
26d80     09 13 6A F6 | 	neg	arg01, arg01 wz
26d84     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
26d88     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26d8c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26d90     01 FA 65 56 |  if_ne	neg	result1, #1
26d94     00 FA 05 A6 |  if_e	mov	result1, #0
26d98     18 00 90 FD | 	jmp	#LR__3225
26d9c                 | LR__3222
26d9c                 | LR__3223
26d9c     02 2E 66 F0 | 	shl	local05, #2
26da0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26da4     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
26da8     17 37 62 FC | 	wrlong	local09, local05
26dac     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26db0                 | LR__3224
26db0     00 FA 05 F6 | 	mov	result1, #0
26db4                 | LR__3225
26db4     A7 F0 03 F6 | 	mov	ptra, fp
26db8     B2 00 A0 FD | 	call	#popregs_
26dbc                 | __system___mount_ret
26dbc     2D 00 64 FD | 	ret
26dc0                 | 
26dc0                 | __system___chdir
26dc0     00 4A 05 F6 | 	mov	COUNT_, #0
26dc4     A8 00 A0 FD | 	call	#pushregs_
26dc8     40 F0 07 F1 | 	add	ptra, #64
26dcc     04 4E 05 F1 | 	add	fp, #4
26dd0     A7 12 62 FC | 	wrlong	arg01, fp
26dd4     04 4E 05 F1 | 	add	fp, #4
26dd8     A7 14 02 F6 | 	mov	arg02, fp
26ddc     08 4E 85 F1 | 	sub	fp, #8
26de0     68 4B B0 FD | 	call	#__system__stat
26de4     3C 4E 05 F1 | 	add	fp, #60
26de8     A7 FA 61 FC | 	wrlong	result1, fp
26dec     3C 4E 85 F1 | 	sub	fp, #60
26df0     00 FA 0D F2 | 	cmp	result1, #0 wz
26df4     3C 4E 05 51 |  if_ne	add	fp, #60
26df8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
26dfc     3C 4E 85 51 |  if_ne	sub	fp, #60
26e00     BC 00 90 5D |  if_ne	jmp	#LR__3232
26e04     10 4E 05 F1 | 	add	fp, #16
26e08     A7 12 02 FB | 	rdlong	arg01, fp
26e0c     10 4E 85 F1 | 	sub	fp, #16
26e10     78 00 00 FF 
26e14     00 12 06 F5 | 	and	arg01, ##61440
26e18     08 00 00 FF 
26e1c     00 12 0E F2 | 	cmp	arg01, ##4096 wz
26e20     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
26e24     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
26e28     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
26e2c     01 FA 65 56 |  if_ne	neg	result1, #1
26e30     8C 00 90 5D |  if_ne	jmp	#LR__3232
26e34     04 4E 05 F1 | 	add	fp, #4
26e38     A7 16 02 FB | 	rdlong	arg03, fp
26e3c     04 4E 85 F1 | 	sub	fp, #4
26e40     0B 17 C2 FA | 	rdbyte	arg03, arg03
26e44     2F 16 0E F2 | 	cmp	arg03, #47 wz
26e48     24 00 90 5D |  if_ne	jmp	#LR__3230
26e4c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
26e50     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
26e54     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
26e58     04 4E 05 F1 | 	add	fp, #4
26e5c     A7 14 02 FB | 	rdlong	arg02, fp
26e60     04 4E 85 F1 | 	sub	fp, #4
26e64     00 17 06 F6 | 	mov	arg03, #256
26e68     3C 4E B0 FD | 	call	#__system__strncpy
26e6c     4C 00 90 FD | 	jmp	#LR__3231
26e70                 | LR__3230
26e70     84 E7 05 F1 | 	add	ptr___system__dat__, #388
26e74     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
26e78     38 4E 05 F1 | 	add	fp, #56
26e7c     A7 12 62 FC | 	wrlong	arg01, fp
26e80     38 4E 85 F1 | 	sub	fp, #56
26e84     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
26e88     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
26e8c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
26e90     00 17 06 F6 | 	mov	arg03, #256
26e94     10 4E B0 FD | 	call	#__system__strncpy
26e98     38 4E 05 F1 | 	add	fp, #56
26e9c     A7 12 02 FB | 	rdlong	arg01, fp
26ea0     34 4E 85 F1 | 	sub	fp, #52
26ea4     A7 14 02 FB | 	rdlong	arg02, fp
26ea8     04 4E 85 F1 | 	sub	fp, #4
26eac     84 E6 05 F1 | 	add	ptr___system__dat__, #132
26eb0     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
26eb4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
26eb8     10 00 B0 FD | 	call	#__system____getvfsforfile
26ebc                 | LR__3231
26ebc     00 FA 05 F6 | 	mov	result1, #0
26ec0                 | LR__3232
26ec0     A7 F0 03 F6 | 	mov	ptra, fp
26ec4     B2 00 A0 FD | 	call	#popregs_
26ec8                 | __system___chdir_ret
26ec8     2D 00 64 FD | 	ret
26ecc                 | 
26ecc                 | __system____getvfsforfile
26ecc     0E 4A 05 F6 | 	mov	COUNT_, #14
26ed0     A8 00 A0 FD | 	call	#pushregs_
26ed4     09 27 02 F6 | 	mov	local01, arg01
26ed8     0A 29 02 F6 | 	mov	local02, arg02
26edc     0B 2B 02 F6 | 	mov	local03, arg03
26ee0     97 10 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
26ee4                 | LR__3240
26ee4     14 FB C1 FA | 	rdbyte	result1, local02
26ee8     2F FA 0D F2 | 	cmp	result1, #47 wz
26eec     01 28 06 A1 |  if_e	add	local02, #1
26ef0     14 2D C2 AA |  if_e	rdbyte	local04, local02
26ef4     01 28 86 A1 |  if_e	sub	local02, #1
26ef8     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
26efc     01 28 06 A1 |  if_e	add	local02, #1
26f00     E0 FF 9F AD |  if_e	jmp	#LR__3240
26f04                 | LR__3241
26f04     14 2D C2 FA | 	rdbyte	local04, local02
26f08     2F 2C 0E F2 | 	cmp	local04, #47 wz
26f0c     14 00 90 5D |  if_ne	jmp	#LR__3242
26f10     13 13 02 F6 | 	mov	arg01, local01
26f14     14 15 02 F6 | 	mov	arg02, local02
26f18     00 17 06 F6 | 	mov	arg03, #256
26f1c     88 4D B0 FD | 	call	#__system__strncpy
26f20     7C 00 90 FD | 	jmp	#LR__3244
26f24                 | LR__3242
26f24     84 E6 05 F1 | 	add	ptr___system__dat__, #132
26f28     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
26f2c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
26f30     13 13 02 F6 | 	mov	arg01, local01
26f34     00 17 06 F6 | 	mov	arg03, #256
26f38     6C 4D B0 FD | 	call	#__system__strncpy
26f3c     14 2D CA FA | 	rdbyte	local04, local02 wz
26f40     5C 00 90 AD |  if_e	jmp	#LR__3243
26f44     14 2D C2 FA | 	rdbyte	local04, local02
26f48     2E 2C 0E F2 | 	cmp	local04, #46 wz
26f4c     01 28 06 A1 |  if_e	add	local02, #1
26f50     14 2F C2 AA |  if_e	rdbyte	local05, local02
26f54     01 28 86 A1 |  if_e	sub	local02, #1
26f58     17 31 02 A6 |  if_e	mov	local06, local05
26f5c     07 30 4E A7 |  if_e	zerox	local06, #7 wz
26f60     3C 00 90 AD |  if_e	jmp	#LR__3243
26f64     13 2F C2 FA | 	rdbyte	local05, local01
26f68     2F 2E 0E F2 | 	cmp	local05, #47 wz
26f6c     01 26 06 A1 |  if_e	add	local01, #1
26f70     13 2D C2 AA |  if_e	rdbyte	local04, local01
26f74     01 26 86 A1 |  if_e	sub	local01, #1
26f78     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
26f7c     B1 01 00 5F 
26f80     40 14 06 56 |  if_ne	mov	arg02, ##@LR__5370
26f84     13 13 02 56 |  if_ne	mov	arg01, local01
26f88     00 17 06 56 |  if_ne	mov	arg03, #256
26f8c     64 4D B0 5D |  if_ne	call	#__system__strncat
26f90     13 13 02 F6 | 	mov	arg01, local01
26f94     14 15 02 F6 | 	mov	arg02, local02
26f98     00 17 06 F6 | 	mov	arg03, #256
26f9c     54 4D B0 FD | 	call	#__system__strncat
26fa0                 | LR__3243
26fa0                 | LR__3244
26fa0     13 13 02 F6 | 	mov	arg01, local01
26fa4     0C 4F B0 FD | 	call	#__system___normalizeName
26fa8     13 2D CA FA | 	rdbyte	local04, local01 wz
26fac     1C 00 90 AD |  if_e	jmp	#LR__3245
26fb0     13 2D C2 FA | 	rdbyte	local04, local01
26fb4     2F 2C 0E F2 | 	cmp	local04, #47 wz
26fb8     01 26 06 A1 |  if_e	add	local01, #1
26fbc     13 31 C2 AA |  if_e	rdbyte	local06, local01
26fc0     01 26 86 A1 |  if_e	sub	local01, #1
26fc4     00 30 4E A2 |  if_e	cmps	local06, #0 wz
26fc8     18 00 90 5D |  if_ne	jmp	#LR__3246
26fcc                 | LR__3245
26fcc     01 00 00 FF 
26fd0     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
26fd4     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
26fd8     01 00 00 FF 
26fdc     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
26fe0     EC 01 90 FD | 	jmp	#LR__3260
26fe4                 | LR__3246
26fe4     00 32 06 F6 | 	mov	local07, #0
26fe8                 | LR__3247
26fe8     04 32 56 F2 | 	cmps	local07, #4 wc
26fec     CC 01 90 3D |  if_ae	jmp	#LR__3259
26ff0     19 31 02 F6 | 	mov	local06, local07
26ff4     02 30 66 F0 | 	shl	local06, #2
26ff8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26ffc     F3 30 02 F1 | 	add	local06, ptr___system__dat__
27000     18 31 0A FB | 	rdlong	local06, local06 wz
27004     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27008     A8 01 90 AD |  if_e	jmp	#LR__3258
2700c     19 2D 02 F6 | 	mov	local04, local07
27010     02 2C 66 F0 | 	shl	local04, #2
27014     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27018     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
2701c     16 13 02 FB | 	rdlong	arg01, local04
27020     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27024     09 35 02 F6 | 	mov	local08, arg01
27028     97 06 48 FB | 	callpa	#(@LR__3249-@LR__3248)>>2,fcache_load_ptr_
2702c                 | LR__3248
2702c     1A FB C9 FA | 	rdbyte	result1, local08 wz
27030     01 34 06 51 |  if_ne	add	local08, #1
27034     F4 FF 9F 5D |  if_ne	jmp	#LR__3248
27038                 | LR__3249
27038     09 35 82 F1 | 	sub	local08, arg01
2703c     1A 37 02 F6 | 	mov	local09, local08
27040     1B 2D 02 F6 | 	mov	local04, local09
27044     13 2D 02 F1 | 	add	local04, local01
27048     16 31 C2 FA | 	rdbyte	local06, local04
2704c     2F 30 0E F2 | 	cmp	local06, #47 wz
27050     1B 39 02 56 |  if_ne	mov	local10, local09
27054     13 39 02 51 |  if_ne	add	local10, local01
27058     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
2705c     54 01 90 5D |  if_ne	jmp	#LR__3257
27060     19 17 02 F6 | 	mov	arg03, local07
27064     02 16 66 F0 | 	shl	arg03, #2
27068     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2706c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
27070     0B 15 02 FB | 	rdlong	arg02, arg03
27074     1B 17 02 F6 | 	mov	arg03, local09
27078     13 13 02 F6 | 	mov	arg01, local01
2707c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27080     D0 4C B0 FD | 	call	#__system__strncmp
27084     00 FA 4D F2 | 	cmps	result1, #0 wz
27088     28 01 90 5D |  if_ne	jmp	#LR__3257
2708c     19 3B 02 F6 | 	mov	local11, local07
27090     02 3A 66 F0 | 	shl	local11, #2
27094     74 E6 05 F1 | 	add	ptr___system__dat__, #116
27098     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
2709c     1D 3D 02 FB | 	rdlong	local12, local11
270a0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
270a4     97 22 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
270a8                 | LR__3250
270a8     1B 31 02 F6 | 	mov	local06, local09
270ac     01 30 06 F1 | 	add	local06, #1
270b0     13 31 02 F1 | 	add	local06, local01
270b4     18 3B C2 FA | 	rdbyte	local11, local06
270b8     2E 3A 0E F2 | 	cmp	local11, #46 wz
270bc     2C 00 90 5D |  if_ne	jmp	#LR__3252
270c0     1B 3B 02 F6 | 	mov	local11, local09
270c4     02 3A 06 F1 | 	add	local11, #2
270c8     13 3B 02 F1 | 	add	local11, local01
270cc     1D 39 C2 FA | 	rdbyte	local10, local11
270d0     2F 38 0E F2 | 	cmp	local10, #47 wz
270d4     1B 3F 02 56 |  if_ne	mov	local13, local09
270d8     02 3E 06 51 |  if_ne	add	local13, #2
270dc     13 3F 02 51 |  if_ne	add	local13, local01
270e0     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
270e4     01 36 06 A1 |  if_e	add	local09, #1
270e8     BC FF 9F AD |  if_e	jmp	#LR__3250
270ec                 | LR__3251
270ec                 | LR__3252
270ec     00 2A 0E F2 | 	cmp	local03, #0 wz
270f0     15 13 02 56 |  if_ne	mov	arg01, local03
270f4     13 15 02 56 |  if_ne	mov	arg02, local01
270f8     00 17 06 56 |  if_ne	mov	arg03, #256
270fc     A8 4B B0 5D |  if_ne	call	#__system__strncpy
27100     13 15 02 F6 | 	mov	arg02, local01
27104     1B 15 02 F1 | 	add	arg02, local09
27108     01 14 06 F1 | 	add	arg02, #1
2710c     13 13 02 F6 | 	mov	arg01, local01
27110     D4 F5 BF FD | 	call	#__system____builtin_strcpy
27114     13 13 02 F6 | 	mov	arg01, local01
27118     09 35 02 F6 | 	mov	local08, arg01
2711c     97 06 48 FB | 	callpa	#(@LR__3254-@LR__3253)>>2,fcache_load_ptr_
27120                 | LR__3253
27120     1A FB C9 FA | 	rdbyte	result1, local08 wz
27124     01 34 06 51 |  if_ne	add	local08, #1
27128     F4 FF 9F 5D |  if_ne	jmp	#LR__3253
2712c                 | LR__3254
2712c     09 35 82 F1 | 	sub	local08, arg01
27130     1A 37 02 F6 | 	mov	local09, local08
27134                 | LR__3255
27134     01 36 56 F2 | 	cmps	local09, #1 wc
27138     70 00 90 CD |  if_b	jmp	#LR__3256
2713c     1B 2D 02 F6 | 	mov	local04, local09
27140     13 2D 02 F1 | 	add	local04, local01
27144     16 3B C2 FA | 	rdbyte	local11, local04
27148     2F 3A 0E F2 | 	cmp	local11, #47 wz
2714c     1B 3B 02 A6 |  if_e	mov	local11, local09
27150     13 3B 02 A1 |  if_e	add	local11, local01
27154     1D 01 48 AC |  if_e	wrbyte	#0, local11
27158     01 36 86 A1 |  if_e	sub	local09, #1
2715c     D4 FF 9F AD |  if_e	jmp	#LR__3255
27160     1B 2D 02 F6 | 	mov	local04, local09
27164     13 2D 02 F1 | 	add	local04, local01
27168     16 3B C2 FA | 	rdbyte	local11, local04
2716c     2E 3A 0E F2 | 	cmp	local11, #46 wz
27170     38 00 90 5D |  if_ne	jmp	#LR__3256
27174     02 36 56 F2 | 	cmps	local09, #2 wc
27178     30 00 90 CD |  if_b	jmp	#LR__3256
2717c     1B 41 02 F6 | 	mov	local14, local09
27180     01 40 86 F1 | 	sub	local14, #1
27184     13 41 02 F1 | 	add	local14, local01
27188     20 2F C2 FA | 	rdbyte	local05, local14
2718c     2F 2E 0E F2 | 	cmp	local05, #47 wz
27190     18 00 90 5D |  if_ne	jmp	#LR__3256
27194     1B 2D 02 F6 | 	mov	local04, local09
27198     01 2C 86 F1 | 	sub	local04, #1
2719c     13 2D 02 F1 | 	add	local04, local01
271a0     16 01 48 FC | 	wrbyte	#0, local04
271a4     02 36 86 F1 | 	sub	local09, #2
271a8     88 FF 9F FD | 	jmp	#LR__3255
271ac                 | LR__3256
271ac     1E FB 01 F6 | 	mov	result1, local12
271b0     1C 00 90 FD | 	jmp	#LR__3260
271b4                 | LR__3257
271b4                 | LR__3258
271b4     01 32 06 F1 | 	add	local07, #1
271b8     2C FE 9F FD | 	jmp	#LR__3247
271bc                 | LR__3259
271bc     02 00 00 FF 
271c0     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
271c4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
271c8     02 00 00 FF 
271cc     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
271d0                 | LR__3260
271d0     A7 F0 03 F6 | 	mov	ptra, fp
271d4     B2 00 A0 FD | 	call	#popregs_
271d8                 | __system____getvfsforfile_ret
271d8     2D 00 64 FD | 	ret
271dc                 | 
271dc                 | __system___basic_open
271dc     05 4A 05 F6 | 	mov	COUNT_, #5
271e0     A8 00 A0 FD | 	call	#pushregs_
271e4     0A 27 02 F6 | 	mov	local01, arg02
271e8     0B 29 02 F6 | 	mov	local02, arg03
271ec     0C 2B 02 F6 | 	mov	local03, arg04
271f0     00 2C 06 F6 | 	mov	local04, #0
271f4     88 4A B0 FD | 	call	#__system____getftab
271f8     FD 2E 0A F6 | 	mov	local05, result1 wz
271fc     18 00 90 5D |  if_ne	jmp	#LR__3270
27200     EE 12 02 F6 | 	mov	arg01, abortchain
27204     0C 14 06 F6 | 	mov	arg02, #12
27208     01 16 06 F6 | 	mov	arg03, #1
2720c     DA 00 A0 FD | 	call	#__longjmp
27210     01 FA 65 F6 | 	neg	result1, #1
27214     14 01 90 FD | 	jmp	#LR__3279
27218                 | LR__3270
27218     08 2E 06 F1 | 	add	local05, #8
2721c     17 FB 09 FB | 	rdlong	result1, local05 wz
27220     08 2E 86 F1 | 	sub	local05, #8
27224     17 13 02 56 |  if_ne	mov	arg01, local05
27228     A8 41 B0 5D |  if_ne	call	#__system___closeraw
2722c     00 26 0E F2 | 	cmp	local01, #0 wz
27230     00 28 0E A2 |  if_e	cmp	local02, #0 wz
27234     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
27238     3C 00 90 AD |  if_e	jmp	#LR__3272
2723c     0C 12 06 F6 | 	mov	arg01, #12
27240     90 36 B0 FD | 	call	#__system___gc_alloc_managed
27244     FD 2C 0A F6 | 	mov	local04, result1 wz
27248     18 00 90 5D |  if_ne	jmp	#LR__3271
2724c     EE 12 02 F6 | 	mov	arg01, abortchain
27250     07 14 06 F6 | 	mov	arg02, #7
27254     01 16 06 F6 | 	mov	arg03, #1
27258     DA 00 A0 FD | 	call	#__longjmp
2725c     01 FA 65 F6 | 	neg	result1, #1
27260     C8 00 90 FD | 	jmp	#LR__3279
27264                 | LR__3271
27264     16 01 68 FC | 	wrlong	#0, local04
27268     04 2C 06 F1 | 	add	local04, #4
2726c     16 01 68 FC | 	wrlong	#0, local04
27270     04 2C 86 F1 | 	sub	local04, #4
27274     17 2D 62 FC | 	wrlong	local04, local05
27278                 | LR__3272
27278     00 26 0E F2 | 	cmp	local01, #0 wz
2727c     20 00 90 AD |  if_e	jmp	#LR__3273
27280     16 27 62 FC | 	wrlong	local01, local04
27284     16 FB 01 F6 | 	mov	result1, local04
27288     00 08 05 FF 
2728c     00 FA 45 F5 | 	or	result1, ##168820736
27290     1C 2E 06 F1 | 	add	local05, #28
27294     17 FB 61 FC | 	wrlong	result1, local05
27298     1C 2E 86 F1 | 	sub	local05, #28
2729c     0C 00 90 FD | 	jmp	#LR__3274
272a0                 | LR__3273
272a0     1C 2E 06 F1 | 	add	local05, #28
272a4     17 01 68 FC | 	wrlong	#0, local05
272a8     1C 2E 86 F1 | 	sub	local05, #28
272ac                 | LR__3274
272ac     00 28 0E F2 | 	cmp	local02, #0 wz
272b0     28 00 90 AD |  if_e	jmp	#LR__3275
272b4     04 2C 06 F1 | 	add	local04, #4
272b8     16 29 62 FC | 	wrlong	local02, local04
272bc     04 2C 86 F1 | 	sub	local04, #4
272c0     16 FB 01 F6 | 	mov	result1, local04
272c4     00 10 05 FF 
272c8     00 FA 45 F5 | 	or	result1, ##169869312
272cc     20 2E 06 F1 | 	add	local05, #32
272d0     17 FB 61 FC | 	wrlong	result1, local05
272d4     20 2E 86 F1 | 	sub	local05, #32
272d8     0C 00 90 FD | 	jmp	#LR__3276
272dc                 | LR__3275
272dc     20 2E 06 F1 | 	add	local05, #32
272e0     17 01 68 FC | 	wrlong	#0, local05
272e4     20 2E 86 F1 | 	sub	local05, #32
272e8                 | LR__3276
272e8     00 2A 0E F2 | 	cmp	local03, #0 wz
272ec     24 00 90 AD |  if_e	jmp	#LR__3277
272f0     08 2C 06 F1 | 	add	local04, #8
272f4     16 2B 62 FC | 	wrlong	local03, local04
272f8     08 2C 86 F1 | 	sub	local04, #8
272fc     00 18 05 FF 
27300     00 2C 46 F5 | 	or	local04, ##170917888
27304     24 2E 06 F1 | 	add	local05, #36
27308     17 2D 62 FC | 	wrlong	local04, local05
2730c     24 2E 86 F1 | 	sub	local05, #36
27310     0C 00 90 FD | 	jmp	#LR__3278
27314                 | LR__3277
27314     24 2E 06 F1 | 	add	local05, #36
27318     17 01 68 FC | 	wrlong	#0, local05
2731c     24 2E 86 F1 | 	sub	local05, #36
27320                 | LR__3278
27320     08 2E 06 F1 | 	add	local05, #8
27324     17 0F 68 FC | 	wrlong	#7, local05
27328     00 FA 05 F6 | 	mov	result1, #0
2732c                 | LR__3279
2732c     A7 F0 03 F6 | 	mov	ptra, fp
27330     B2 00 A0 FD | 	call	#popregs_
27334                 | __system___basic_open_ret
27334     2D 00 64 FD | 	ret
27338                 | 
27338                 | __system___basic_open_string
27338     04 4A 05 F6 | 	mov	COUNT_, #4
2733c     A8 00 A0 FD | 	call	#pushregs_
27340     0A 27 02 F6 | 	mov	local01, arg02
27344     0B 29 02 F6 | 	mov	local02, arg03
27348     34 49 B0 FD | 	call	#__system____getftab
2734c     FD 2A 0A F6 | 	mov	local03, result1 wz
27350     18 00 90 5D |  if_ne	jmp	#LR__3280
27354     EE 12 02 F6 | 	mov	arg01, abortchain
27358     0C 14 06 F6 | 	mov	arg02, #12
2735c     01 16 06 F6 | 	mov	arg03, #1
27360     DA 00 A0 FD | 	call	#__longjmp
27364     01 FA 65 F6 | 	neg	result1, #1
27368     58 00 90 FD | 	jmp	#LR__3282
2736c                 | LR__3280
2736c     08 2A 06 F1 | 	add	local03, #8
27370     15 19 0A FB | 	rdlong	arg04, local03 wz
27374     08 2A 86 F1 | 	sub	local03, #8
27378     15 13 02 56 |  if_ne	mov	arg01, local03
2737c     54 40 B0 5D |  if_ne	call	#__system___closeraw
27380     13 15 02 F6 | 	mov	arg02, local01
27384     14 17 02 F6 | 	mov	arg03, local02
27388     15 13 02 F6 | 	mov	arg01, local03
2738c     B6 19 06 F6 | 	mov	arg04, #438
27390     3C 3D B0 FD | 	call	#__system___openraw
27394     FD 2C 02 F6 | 	mov	local04, result1
27398     00 2C 56 F2 | 	cmps	local04, #0 wc
2739c     20 00 90 3D |  if_ae	jmp	#LR__3281
273a0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
273a4     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
273a8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
273ac     EE 12 02 F6 | 	mov	arg01, abortchain
273b0     01 16 06 F6 | 	mov	arg03, #1
273b4     DA 00 A0 FD | 	call	#__longjmp
273b8     01 FA 65 F6 | 	neg	result1, #1
273bc     04 00 90 FD | 	jmp	#LR__3282
273c0                 | LR__3281
273c0     16 FB 01 F6 | 	mov	result1, local04
273c4                 | LR__3282
273c4     A7 F0 03 F6 | 	mov	ptra, fp
273c8     B2 00 A0 FD | 	call	#popregs_
273cc                 | __system___basic_open_string_ret
273cc     2D 00 64 FD | 	ret
273d0                 | 
273d0                 | __system___basic_print_char
273d0     03 4A 05 F6 | 	mov	COUNT_, #3
273d4     A8 00 A0 FD | 	call	#pushregs_
273d8     0A 27 02 F6 | 	mov	local01, arg02
273dc     F4 4F B0 FD | 	call	#__system___gettxfunc
273e0     FD 28 0A F6 | 	mov	local02, result1 wz
273e4     00 FA 05 A6 |  if_e	mov	result1, #0
273e8     30 00 90 AD |  if_e	jmp	#LR__3290
273ec     14 2B 02 F6 | 	mov	local03, local02
273f0     13 28 46 F7 | 	zerox	local02, #19
273f4     14 2A 46 F0 | 	shr	local03, #20
273f8     02 2A 66 F0 | 	shl	local03, #2
273fc     ED 2A 02 F1 | 	add	local03, __methods__
27400     15 2B 02 FB | 	rdlong	local03, local03
27404     13 13 02 F6 | 	mov	arg01, local01
27408     F2 26 02 F6 | 	mov	local01, objptr
2740c     14 E5 01 F6 | 	mov	objptr, local02
27410     2D 2A 62 FD | 	call	local03
27414     13 E5 01 F6 | 	mov	objptr, local01
27418     01 FA 05 F6 | 	mov	result1, #1
2741c                 | LR__3290
2741c     A7 F0 03 F6 | 	mov	ptra, fp
27420     B2 00 A0 FD | 	call	#popregs_
27424                 | __system___basic_print_char_ret
27424     2D 00 64 FD | 	ret
27428                 | 
27428                 | __system___basic_print_string
27428     03 4A 05 F6 | 	mov	COUNT_, #3
2742c     A8 00 A0 FD | 	call	#pushregs_
27430     0A 27 02 F6 | 	mov	local01, arg02
27434     0B 29 02 F6 | 	mov	local02, arg03
27438     98 4F B0 FD | 	call	#__system___gettxfunc
2743c     FD 2A 0A F6 | 	mov	local03, result1 wz
27440     00 FA 05 A6 |  if_e	mov	result1, #0
27444     18 00 90 AD |  if_e	jmp	#LR__3300
27448     00 26 0E F2 | 	cmp	local01, #0 wz
2744c     00 FA 05 A6 |  if_e	mov	result1, #0
27450     15 13 02 56 |  if_ne	mov	arg01, local03
27454     14 15 02 56 |  if_ne	mov	arg02, local02
27458     13 17 02 56 |  if_ne	mov	arg03, local01
2745c     08 02 B0 5D |  if_ne	call	#__system___fmtstr
27460                 | LR__3300
27460     A7 F0 03 F6 | 	mov	ptra, fp
27464     B2 00 A0 FD | 	call	#popregs_
27468                 | __system___basic_print_string_ret
27468     2D 00 64 FD | 	ret
2746c                 | 
2746c                 | __system___basic_print_integer
2746c     04 4A 05 F6 | 	mov	COUNT_, #4
27470     A8 00 A0 FD | 	call	#pushregs_
27474     0A 27 02 F6 | 	mov	local01, arg02
27478     0B 29 02 F6 | 	mov	local02, arg03
2747c     0C 2B 02 F6 | 	mov	local03, arg04
27480     50 4F B0 FD | 	call	#__system___gettxfunc
27484     FD 2C 0A F6 | 	mov	local04, result1 wz
27488     00 FA 05 A6 |  if_e	mov	result1, #0
2748c     16 13 02 56 |  if_ne	mov	arg01, local04
27490     14 15 02 56 |  if_ne	mov	arg02, local02
27494     13 17 02 56 |  if_ne	mov	arg03, local01
27498     15 19 02 56 |  if_ne	mov	arg04, local03
2749c     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
274a0     A7 F0 03 F6 | 	mov	ptra, fp
274a4     B2 00 A0 FD | 	call	#popregs_
274a8                 | __system___basic_print_integer_ret
274a8     2D 00 64 FD | 	ret
274ac                 | 
274ac                 | __system___basic_print_unsigned
274ac     03 4A 05 F6 | 	mov	COUNT_, #3
274b0     A8 00 A0 FD | 	call	#pushregs_
274b4     0A 27 02 F6 | 	mov	local01, arg02
274b8     0B 29 02 F6 | 	mov	local02, arg03
274bc     0C 2B 02 F6 | 	mov	local03, arg04
274c0     10 4F B0 FD | 	call	#__system___gettxfunc
274c4     FD 12 0A F6 | 	mov	arg01, result1 wz
274c8     00 FA 05 A6 |  if_e	mov	result1, #0
274cc     3A 28 26 54 |  if_ne	bith	local02, #58
274d0     14 15 02 56 |  if_ne	mov	arg02, local02
274d4     13 17 02 56 |  if_ne	mov	arg03, local01
274d8     15 19 02 56 |  if_ne	mov	arg04, local03
274dc     74 02 B0 5D |  if_ne	call	#__system___fmtnum
274e0     A7 F0 03 F6 | 	mov	ptra, fp
274e4     B2 00 A0 FD | 	call	#popregs_
274e8                 | __system___basic_print_unsigned_ret
274e8     2D 00 64 FD | 	ret
274ec                 | 
274ec                 | __system___basic_get_char
274ec     03 4A 05 F6 | 	mov	COUNT_, #3
274f0     A8 00 A0 FD | 	call	#pushregs_
274f4     20 4F B0 FD | 	call	#__system___getrxfunc
274f8     FD 26 0A F6 | 	mov	local01, result1 wz
274fc     01 FA 65 A6 |  if_e	neg	result1, #1
27500     28 00 90 AD |  if_e	jmp	#LR__3310
27504     13 29 02 F6 | 	mov	local02, local01
27508     13 26 46 F7 | 	zerox	local01, #19
2750c     14 28 46 F0 | 	shr	local02, #20
27510     02 28 66 F0 | 	shl	local02, #2
27514     ED 28 02 F1 | 	add	local02, __methods__
27518     14 29 02 FB | 	rdlong	local02, local02
2751c     F2 2A 02 F6 | 	mov	local03, objptr
27520     13 E5 01 F6 | 	mov	objptr, local01
27524     2D 28 62 FD | 	call	local02
27528     15 E5 01 F6 | 	mov	objptr, local03
2752c                 | LR__3310
2752c     A7 F0 03 F6 | 	mov	ptra, fp
27530     B2 00 A0 FD | 	call	#popregs_
27534                 | __system___basic_get_char_ret
27534     2D 00 64 FD | 	ret
27538                 | 
27538                 | __system___basic_put
27538     04 4A 05 F6 | 	mov	COUNT_, #4
2753c     A8 00 A0 FD | 	call	#pushregs_
27540     0D 27 02 F6 | 	mov	local01, arg05
27544     13 19 02 FD | 	qmul	arg04, local01
27548     09 29 02 F6 | 	mov	local02, arg01
2754c     0B 2B 02 F6 | 	mov	local03, arg03
27550     00 14 0E F2 | 	cmp	arg02, #0 wz
27554     01 14 86 51 |  if_ne	sub	arg02, #1
27558     14 13 02 56 |  if_ne	mov	arg01, local02
2755c     00 16 06 56 |  if_ne	mov	arg03, #0
27560     18 2C 62 FD | 	getqx	local04
27564     60 45 B0 5D |  if_ne	call	#__system__lseek
27568     15 15 02 F6 | 	mov	arg02, local03
2756c     16 17 02 F6 | 	mov	arg03, local04
27570     14 13 02 F6 | 	mov	arg01, local02
27574     9C 44 B0 FD | 	call	#__system__write
27578     FD 2C 02 F6 | 	mov	local04, result1
2757c     01 2C 56 F2 | 	cmps	local04, #1 wc
27580     10 00 90 CD |  if_b	jmp	#LR__3320
27584     16 91 02 F6 | 	mov	muldiva_, local04
27588     13 93 02 F6 | 	mov	muldivb_, local01
2758c     BA 00 A0 FD | 	call	#divide_
27590     49 2D 02 F6 | 	mov	local04, muldivb_
27594                 | LR__3320
27594     16 FB 01 F6 | 	mov	result1, local04
27598     A7 F0 03 F6 | 	mov	ptra, fp
2759c     B2 00 A0 FD | 	call	#popregs_
275a0                 | __system___basic_put_ret
275a0     2D 00 64 FD | 	ret
275a4                 | 
275a4                 | __system___basic_get
275a4     04 4A 05 F6 | 	mov	COUNT_, #4
275a8     A8 00 A0 FD | 	call	#pushregs_
275ac     0D 27 02 F6 | 	mov	local01, arg05
275b0     13 19 02 FD | 	qmul	arg04, local01
275b4     09 29 02 F6 | 	mov	local02, arg01
275b8     0B 2B 02 F6 | 	mov	local03, arg03
275bc     00 14 0E F2 | 	cmp	arg02, #0 wz
275c0     01 14 86 51 |  if_ne	sub	arg02, #1
275c4     14 13 02 56 |  if_ne	mov	arg01, local02
275c8     00 16 06 56 |  if_ne	mov	arg03, #0
275cc     18 2C 62 FD | 	getqx	local04
275d0     F4 44 B0 5D |  if_ne	call	#__system__lseek
275d4     15 15 02 F6 | 	mov	arg02, local03
275d8     16 17 02 F6 | 	mov	arg03, local04
275dc     14 13 02 F6 | 	mov	arg01, local02
275e0     6C 44 B0 FD | 	call	#__system__read
275e4     FD 2C 02 F6 | 	mov	local04, result1
275e8     01 2C 56 F2 | 	cmps	local04, #1 wc
275ec     10 00 90 CD |  if_b	jmp	#LR__3330
275f0     16 91 02 F6 | 	mov	muldiva_, local04
275f4     13 93 02 F6 | 	mov	muldivb_, local01
275f8     BA 00 A0 FD | 	call	#divide_
275fc     49 2D 02 F6 | 	mov	local04, muldivb_
27600                 | LR__3330
27600     16 FB 01 F6 | 	mov	result1, local04
27604     A7 F0 03 F6 | 	mov	ptra, fp
27608     B2 00 A0 FD | 	call	#popregs_
2760c                 | __system___basic_get_ret
2760c     2D 00 64 FD | 	ret
27610                 | 
27610                 | __system___fmtchar
27610     00 4A 05 F6 | 	mov	COUNT_, #0
27614     A8 00 A0 FD | 	call	#pushregs_
27618     10 F0 07 F1 | 	add	ptra, #16
2761c     04 4E 05 F1 | 	add	fp, #4
27620     A7 12 62 FC | 	wrlong	arg01, fp
27624     04 4E 05 F1 | 	add	fp, #4
27628     A7 14 62 FC | 	wrlong	arg02, fp
2762c     04 4E 05 F1 | 	add	fp, #4
27630     A7 16 62 FC | 	wrlong	arg03, fp
27634     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
27638     A7 16 62 FC | 	wrlong	arg03, fp
2763c     08 4E 85 F1 | 	sub	fp, #8
27640     A7 12 02 FB | 	rdlong	arg01, fp
27644     04 4E 05 F1 | 	add	fp, #4
27648     A7 14 02 FB | 	rdlong	arg02, fp
2764c     04 4E 05 F1 | 	add	fp, #4
27650     A7 16 02 F6 | 	mov	arg03, fp
27654     0C 4E 85 F1 | 	sub	fp, #12
27658     0C 00 B0 FD | 	call	#__system___fmtstr
2765c     A7 F0 03 F6 | 	mov	ptra, fp
27660     B2 00 A0 FD | 	call	#popregs_
27664                 | __system___fmtchar_ret
27664     2D 00 64 FD | 	ret
27668                 | 
27668                 | __system___fmtstr
27668     09 4A 05 F6 | 	mov	COUNT_, #9
2766c     A8 00 A0 FD | 	call	#pushregs_
27670     09 27 02 F6 | 	mov	local01, arg01
27674     0A 29 02 F6 | 	mov	local02, arg02
27678     0B 2B 02 F6 | 	mov	local03, arg03
2767c     14 19 E2 F8 | 	getbyte	arg04, local02, #0
27680     15 13 02 F6 | 	mov	arg01, local03
27684     09 2D 02 F6 | 	mov	local04, arg01
27688     97 06 48 FB | 	callpa	#(@LR__3341-@LR__3340)>>2,fcache_load_ptr_
2768c                 | LR__3340
2768c     16 FB C9 FA | 	rdbyte	result1, local04 wz
27690     01 2C 06 51 |  if_ne	add	local04, #1
27694     F4 FF 9F 5D |  if_ne	jmp	#LR__3340
27698                 | LR__3341
27698     09 2D 82 F1 | 	sub	local04, arg01
2769c     00 18 0E F2 | 	cmp	arg04, #0 wz
276a0     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
276a4     14 15 02 F6 | 	mov	arg02, local02
276a8     16 17 02 F6 | 	mov	arg03, local04
276ac     13 13 02 F6 | 	mov	arg01, local01
276b0     02 18 06 F6 | 	mov	arg04, #2
276b4     BC 49 B0 FD | 	call	#__system___fmtpad
276b8     FD 2E 02 F6 | 	mov	local05, result1
276bc     00 2E 56 F2 | 	cmps	local05, #0 wc
276c0     17 FB 01 C6 |  if_b	mov	result1, local05
276c4     80 00 90 CD |  if_b	jmp	#LR__3344
276c8     01 2C 56 F2 | 	cmps	local04, #1 wc
276cc     50 00 90 CD |  if_b	jmp	#LR__3343
276d0     16 31 02 F6 | 	mov	local06, local04
276d4                 | LR__3342
276d4     13 33 02 F6 | 	mov	local07, local01
276d8     13 35 02 F6 | 	mov	local08, local01
276dc     13 32 46 F7 | 	zerox	local07, #19
276e0     14 34 46 F0 | 	shr	local08, #20
276e4     02 34 66 F0 | 	shl	local08, #2
276e8     ED 34 02 F1 | 	add	local08, __methods__
276ec     1A 35 02 FB | 	rdlong	local08, local08
276f0     15 13 C2 FA | 	rdbyte	arg01, local03
276f4     F2 36 02 F6 | 	mov	local09, objptr
276f8     19 E5 01 F6 | 	mov	objptr, local07
276fc     01 2A 06 F1 | 	add	local03, #1
27700     2D 34 62 FD | 	call	local08
27704     1B E5 01 F6 | 	mov	objptr, local09
27708     FD 36 02 F6 | 	mov	local09, result1
2770c     00 36 56 F2 | 	cmps	local09, #0 wc
27710     1B FB 01 C6 |  if_b	mov	result1, local09
27714     30 00 90 CD |  if_b	jmp	#LR__3344
27718     1B 2F 02 F1 | 	add	local05, local09
2771c     ED 31 6E FB | 	djnz	local06, #LR__3342
27720                 | LR__3343
27720     14 15 02 F6 | 	mov	arg02, local02
27724     16 17 02 F6 | 	mov	arg03, local04
27728     13 13 02 F6 | 	mov	arg01, local01
2772c     01 18 06 F6 | 	mov	arg04, #1
27730     40 49 B0 FD | 	call	#__system___fmtpad
27734     FD 36 02 F6 | 	mov	local09, result1
27738     00 36 56 F2 | 	cmps	local09, #0 wc
2773c     1B FB 01 C6 |  if_b	mov	result1, local09
27740     1B 2F 02 31 |  if_ae	add	local05, local09
27744     17 FB 01 36 |  if_ae	mov	result1, local05
27748                 | LR__3344
27748     A7 F0 03 F6 | 	mov	ptra, fp
2774c     B2 00 A0 FD | 	call	#popregs_
27750                 | __system___fmtstr_ret
27750     2D 00 64 FD | 	ret
27754                 | 
27754                 | __system___fmtnum
27754     0B 4A 05 F6 | 	mov	COUNT_, #11
27758     A8 00 A0 FD | 	call	#pushregs_
2775c     09 27 02 F6 | 	mov	local01, arg01
27760     0A 29 02 F6 | 	mov	local02, arg02
27764     0B 2B 02 F6 | 	mov	local03, arg03
27768     0C 2D 02 F6 | 	mov	local04, arg04
2776c     F8 2F 02 F6 | 	mov	local05, ptra
27770     17 31 02 F6 | 	mov	local06, local05
27774     00 32 06 F6 | 	mov	local07, #0
27778     14 35 02 F6 | 	mov	local08, local02
2777c     10 34 46 F0 | 	shr	local08, #16
27780     3F 34 06 F5 | 	and	local08, #63
27784     14 37 E2 F8 | 	getbyte	local09, local02, #0
27788     14 39 02 F6 | 	mov	local10, local02
2778c     1A 38 46 F0 | 	shr	local10, #26
27790     03 38 06 F5 | 	and	local10, #3
27794     1C 3B 02 F6 | 	mov	local11, local10
27798     01 34 56 F2 | 	cmps	local08, #1 wc
2779c     44 F0 07 F1 | 	add	ptra, #68
277a0     01 34 86 31 |  if_ae	sub	local08, #1
277a4     41 36 56 F2 | 	cmps	local09, #65 wc
277a8     00 36 0E C2 |  if_b	cmp	local09, #0 wz
277ac     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
277b0     03 3A 0E F2 | 	cmp	local11, #3 wz
277b4     00 3A 06 A6 |  if_e	mov	local11, #0
277b8     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
277bc     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
277c0     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
277c4     00 3A 0E F2 | 	cmp	local11, #0 wz
277c8     4C 00 90 AD |  if_e	jmp	#LR__3353
277cc     01 32 06 F6 | 	mov	local07, #1
277d0     1B 35 0A F2 | 	cmp	local08, local09 wz
277d4     18 00 90 5D |  if_ne	jmp	#LR__3351
277d8     05 34 6E FB | 	djnz	local08, #LR__3350
277dc     13 13 02 F6 | 	mov	arg01, local01
277e0     14 15 02 F6 | 	mov	arg02, local02
277e4     23 16 06 F6 | 	mov	arg03, #35
277e8     24 FE BF FD | 	call	#__system___fmtchar
277ec     88 00 90 FD | 	jmp	#LR__3357
277f0                 | LR__3350
277f0                 | LR__3351
277f0     02 3A 0E F2 | 	cmp	local11, #2 wz
277f4     18 39 02 A6 |  if_e	mov	local10, local06
277f8     01 30 06 A1 |  if_e	add	local06, #1
277fc     1C 41 48 AC |  if_e	wrbyte	#32, local10
27800     14 00 90 AD |  if_e	jmp	#LR__3352
27804     04 3A 0E F2 | 	cmp	local11, #4 wz
27808     18 5B 48 AC |  if_e	wrbyte	#45, local06
2780c     01 30 06 A1 |  if_e	add	local06, #1
27810     18 57 48 5C |  if_ne	wrbyte	#43, local06
27814     01 30 06 51 |  if_ne	add	local06, #1
27818                 | LR__3352
27818                 | LR__3353
27818     18 13 02 F6 | 	mov	arg01, local06
2781c     15 15 02 F6 | 	mov	arg02, local03
27820     16 17 02 F6 | 	mov	arg03, local04
27824     1A 19 02 F6 | 	mov	arg04, local08
27828     00 1A 06 F6 | 	mov	arg05, #0
2782c     1D 28 2E F4 | 	testbn	local02, #29 wz
27830     01 1A 06 56 |  if_ne	mov	arg05, #1
27834     04 49 B0 FD | 	call	#__system___uitoa
27838     FD 32 02 F1 | 	add	local07, result1
2783c     1B 33 5A F2 | 	cmps	local07, local09 wcz
27840     24 00 90 ED |  if_be	jmp	#LR__3356
27844     97 0E 48 FB | 	callpa	#(@LR__3355-@LR__3354)>>2,fcache_load_ptr_
27848                 | LR__3354
27848     1B 39 02 F6 | 	mov	local10, local09
2784c     01 38 56 F2 | 	cmps	local10, #1 wc
27850     01 36 86 F1 | 	sub	local09, #1
27854     18 39 02 36 |  if_ae	mov	local10, local06
27858     01 30 06 31 |  if_ae	add	local06, #1
2785c     1C 47 48 3C |  if_ae	wrbyte	#35, local10
27860     E4 FF 9F 3D |  if_ae	jmp	#LR__3354
27864                 | LR__3355
27864     18 01 48 FC | 	wrbyte	#0, local06
27868                 | LR__3356
27868     13 13 02 F6 | 	mov	arg01, local01
2786c     14 15 02 F6 | 	mov	arg02, local02
27870     17 17 02 F6 | 	mov	arg03, local05
27874     F0 FD BF FD | 	call	#__system___fmtstr
27878                 | LR__3357
27878     A7 F0 03 F6 | 	mov	ptra, fp
2787c     B2 00 A0 FD | 	call	#popregs_
27880                 | __system___fmtnum_ret
27880     2D 00 64 FD | 	ret
27884                 | 
27884                 | __system___fmtfloat
27884     10 4A 05 F6 | 	mov	COUNT_, #16
27888     A8 00 A0 FD | 	call	#pushregs_
2788c     24 F1 07 F1 | 	add	ptra, #292
27890     04 4E 05 F1 | 	add	fp, #4
27894     A7 12 62 FC | 	wrlong	arg01, fp
27898     04 4E 05 F1 | 	add	fp, #4
2789c     A7 14 62 FC | 	wrlong	arg02, fp
278a0     04 4E 05 F1 | 	add	fp, #4
278a4     A7 16 62 FC | 	wrlong	arg03, fp
278a8     04 4E 05 F1 | 	add	fp, #4
278ac     A7 18 62 FC | 	wrlong	arg04, fp
278b0     0C 4E 05 F1 | 	add	fp, #12
278b4     A7 14 68 FC | 	wrlong	#10, fp
278b8     08 4E 05 F1 | 	add	fp, #8
278bc     A7 00 68 FC | 	wrlong	#0, fp
278c0     08 4E 05 F1 | 	add	fp, #8
278c4     A7 00 68 FC | 	wrlong	#0, fp
278c8     08 4E 05 F1 | 	add	fp, #8
278cc     A7 00 68 FC | 	wrlong	#0, fp
278d0     04 4E 05 F1 | 	add	fp, #4
278d4     A7 04 68 FC | 	wrlong	#2, fp
278d8     04 4E 05 F1 | 	add	fp, #4
278dc     A7 00 68 FC | 	wrlong	#0, fp
278e0     04 4E 05 F1 | 	add	fp, #4
278e4     A7 00 68 FC | 	wrlong	#0, fp
278e8     04 4E 05 F1 | 	add	fp, #4
278ec     A7 00 68 FC | 	wrlong	#0, fp
278f0     04 4E 05 F1 | 	add	fp, #4
278f4     A7 00 68 FC | 	wrlong	#0, fp
278f8     18 4E 05 F1 | 	add	fp, #24
278fc     A7 00 68 FC | 	wrlong	#0, fp
27900     68 4E 05 F1 | 	add	fp, #104
27904     A7 26 02 F6 | 	mov	local01, fp
27908     08 4E 85 F1 | 	sub	fp, #8
2790c     A7 26 62 FC | 	wrlong	local01, fp
27910     04 4E 05 F1 | 	add	fp, #4
27914     A7 26 62 FC | 	wrlong	local01, fp
27918     BC 4E 85 F1 | 	sub	fp, #188
2791c     A7 26 02 FB | 	rdlong	local01, fp
27920     10 26 46 F0 | 	shr	local01, #16
27924     3F 26 06 F5 | 	and	local01, #63
27928     B0 4E 05 F1 | 	add	fp, #176
2792c     A7 26 62 FC | 	wrlong	local01, fp
27930     B0 4E 85 F1 | 	sub	fp, #176
27934     A7 26 02 FB | 	rdlong	local01, fp
27938     1C 26 46 F0 | 	shr	local01, #28
2793c     01 26 06 F5 | 	and	local01, #1
27940     08 4F 05 F1 | 	add	fp, #264
27944     A7 26 62 FC | 	wrlong	local01, fp
27948     58 4E 85 F1 | 	sub	fp, #88
2794c     A7 26 0A FB | 	rdlong	local01, fp wz
27950     B8 4E 85 F1 | 	sub	fp, #184
27954     3C 00 90 5D |  if_ne	jmp	#LR__3361
27958     10 4E 05 F1 | 	add	fp, #16
2795c     A7 26 02 FB | 	rdlong	local01, fp
27960     10 4E 85 F1 | 	sub	fp, #16
27964     61 26 0E F2 | 	cmp	local01, #97 wz
27968     18 00 90 5D |  if_ne	jmp	#LR__3360
2796c     B8 4E 05 F1 | 	add	fp, #184
27970     A7 1A 68 FC | 	wrlong	#13, fp
27974     84 4E 85 F1 | 	sub	fp, #132
27978     A7 02 68 FC | 	wrlong	#1, fp
2797c     34 4E 85 F1 | 	sub	fp, #52
27980     24 00 90 FD | 	jmp	#LR__3362
27984                 | LR__3360
27984     B8 4E 05 F1 | 	add	fp, #184
27988     A7 0C 68 FC | 	wrlong	#6, fp
2798c     B8 4E 85 F1 | 	sub	fp, #184
27990     14 00 90 FD | 	jmp	#LR__3362
27994                 | LR__3361
27994     B8 4E 05 F1 | 	add	fp, #184
27998     A7 26 02 FB | 	rdlong	local01, fp
2799c     01 26 86 F1 | 	sub	local01, #1
279a0     A7 26 62 FC | 	wrlong	local01, fp
279a4     B8 4E 85 F1 | 	sub	fp, #184
279a8                 | LR__3362
279a8     08 4E 05 F1 | 	add	fp, #8
279ac     A7 26 02 FB | 	rdlong	local01, fp
279b0     16 26 46 F0 | 	shr	local01, #22
279b4     03 26 06 F5 | 	and	local01, #3
279b8     04 4F 05 F1 | 	add	fp, #260
279bc     A7 26 62 FC | 	wrlong	local01, fp
279c0     04 4F 85 F1 | 	sub	fp, #260
279c4     A7 26 02 FB | 	rdlong	local01, fp
279c8     1D 26 46 F0 | 	shr	local01, #29
279cc     01 26 06 F5 | 	and	local01, #1
279d0     B4 4E 05 F1 | 	add	fp, #180
279d4     A7 26 62 FC | 	wrlong	local01, fp
279d8     B4 4E 85 F1 | 	sub	fp, #180
279dc     A7 26 02 FB | 	rdlong	local01, fp
279e0     13 27 EA F8 | 	getbyte	local01, local01, #1
279e4     60 4E 05 F1 | 	add	fp, #96
279e8     A7 26 62 FC | 	wrlong	local01, fp
279ec     60 4E 85 F1 | 	sub	fp, #96
279f0     A7 26 02 FB | 	rdlong	local01, fp
279f4     13 27 E2 F8 | 	getbyte	local01, local01, #0
279f8     64 4E 05 F1 | 	add	fp, #100
279fc     A7 26 62 FC | 	wrlong	local01, fp
27a00     00 26 06 F6 | 	mov	local01, #0
27a04     5C 4E 85 F1 | 	sub	fp, #92
27a08     A7 1A 02 FB | 	rdlong	arg05, fp
27a0c     65 1A 0E F2 | 	cmp	arg05, #101 wz
27a10     01 26 06 A6 |  if_e	mov	local01, #1
27a14     14 4E 05 F1 | 	add	fp, #20
27a18     A7 26 62 FC | 	wrlong	local01, fp
27a1c     98 4E 05 F1 | 	add	fp, #152
27a20     A7 28 0A FB | 	rdlong	local02, fp wz
27a24     45 26 06 56 |  if_ne	mov	local01, #69
27a28     65 26 06 A6 |  if_e	mov	local01, #101
27a2c     8C 4E 85 F1 | 	sub	fp, #140
27a30     A7 26 62 FC | 	wrlong	local01, fp
27a34     20 4E 85 F1 | 	sub	fp, #32
27a38     A7 26 02 FB | 	rdlong	local01, fp
27a3c     10 4E 85 F1 | 	sub	fp, #16
27a40     61 26 0E F2 | 	cmp	local01, #97 wz
27a44     4C 00 90 5D |  if_ne	jmp	#LR__3363
27a48     24 4E 05 F1 | 	add	fp, #36
27a4c     A7 02 68 FC | 	wrlong	#1, fp
27a50     98 4E 05 F1 | 	add	fp, #152
27a54     A7 28 0A FB | 	rdlong	local02, fp wz
27a58     50 26 06 56 |  if_ne	mov	local01, #80
27a5c     70 26 06 A6 |  if_e	mov	local01, #112
27a60     8C 4E 85 F1 | 	sub	fp, #140
27a64     A7 26 62 FC | 	wrlong	local01, fp
27a68     14 4E 85 F1 | 	sub	fp, #20
27a6c     A7 04 68 FC | 	wrlong	#2, fp
27a70     1C 4E 05 F1 | 	add	fp, #28
27a74     A7 02 68 FC | 	wrlong	#1, fp
27a78     84 4E 05 F1 | 	add	fp, #132
27a7c     A7 28 0A FB | 	rdlong	local02, fp wz
27a80     58 26 06 56 |  if_ne	mov	local01, #88
27a84     78 26 06 A6 |  if_e	mov	local01, #120
27a88     7C 4E 85 F1 | 	sub	fp, #124
27a8c     A7 26 62 FC | 	wrlong	local01, fp
27a90     40 4E 85 F1 | 	sub	fp, #64
27a94                 | LR__3363
27a94     10 4E 05 F1 | 	add	fp, #16
27a98     A7 26 02 FB | 	rdlong	local01, fp
27a9c     10 4E 85 F1 | 	sub	fp, #16
27aa0     23 26 0E F2 | 	cmp	local01, #35 wz
27aa4     3C 00 90 5D |  if_ne	jmp	#LR__3366
27aa8     48 4E 05 F1 | 	add	fp, #72
27aac     A7 02 68 FC | 	wrlong	#1, fp
27ab0     C8 4E 05 F1 | 	add	fp, #200
27ab4     A7 26 0A FB | 	rdlong	local01, fp wz
27ab8     10 4F 85 F1 | 	sub	fp, #272
27abc     18 00 90 AD |  if_e	jmp	#LR__3364
27ac0     10 4E 05 F1 | 	add	fp, #16
27ac4     A7 CC 68 FC | 	wrlong	#102, fp
27ac8     00 4F 05 F1 | 	add	fp, #256
27acc     A7 00 68 FC | 	wrlong	#0, fp
27ad0     10 4F 85 F1 | 	sub	fp, #272
27ad4     0C 00 90 FD | 	jmp	#LR__3365
27ad8                 | LR__3364
27ad8     10 4F 05 F1 | 	add	fp, #272
27adc     A7 02 68 FC | 	wrlong	#1, fp
27ae0     10 4F 85 F1 | 	sub	fp, #272
27ae4                 | LR__3365
27ae4                 | LR__3366
27ae4     08 4E 05 F1 | 	add	fp, #8
27ae8     A7 26 02 FB | 	rdlong	local01, fp
27aec     1A 26 46 F0 | 	shr	local01, #26
27af0     03 26 06 F5 | 	and	local01, #3
27af4     5C 4E 05 F1 | 	add	fp, #92
27af8     A7 26 62 FC | 	wrlong	local01, fp
27afc     58 4E 85 F1 | 	sub	fp, #88
27b00     A7 FA 01 FB | 	rdlong	result1, fp
27b04     0C 4E 85 F1 | 	sub	fp, #12
27b08     1F FA 4D F0 | 	shr	result1, #31 wz
27b0c     20 00 90 AD |  if_e	jmp	#LR__3367
27b10     2C 4E 05 F1 | 	add	fp, #44
27b14     A7 5A 68 FC | 	wrlong	#45, fp
27b18     20 4E 85 F1 | 	sub	fp, #32
27b1c     A7 FA 01 FB | 	rdlong	result1, fp
27b20     1F FA E5 F4 | 	bitnot	result1, #31
27b24     A7 FA 61 FC | 	wrlong	result1, fp
27b28     0C 4E 85 F1 | 	sub	fp, #12
27b2c     3C 00 90 FD | 	jmp	#LR__3369
27b30                 | LR__3367
27b30     64 4E 05 F1 | 	add	fp, #100
27b34     A7 26 02 FB | 	rdlong	local01, fp
27b38     64 4E 85 F1 | 	sub	fp, #100
27b3c     01 26 0E F2 | 	cmp	local01, #1 wz
27b40     2C 4E 05 A1 |  if_e	add	fp, #44
27b44     A7 56 68 AC |  if_e	wrlong	#43, fp
27b48     2C 4E 85 A1 |  if_e	sub	fp, #44
27b4c     1C 00 90 AD |  if_e	jmp	#LR__3368
27b50     64 4E 05 F1 | 	add	fp, #100
27b54     A7 26 02 FB | 	rdlong	local01, fp
27b58     64 4E 85 F1 | 	sub	fp, #100
27b5c     02 26 0E F2 | 	cmp	local01, #2 wz
27b60     2C 4E 05 A1 |  if_e	add	fp, #44
27b64     A7 40 68 AC |  if_e	wrlong	#32, fp
27b68     2C 4E 85 A1 |  if_e	sub	fp, #44
27b6c                 | LR__3368
27b6c                 | LR__3369
27b6c     08 4E 05 F1 | 	add	fp, #8
27b70     A7 26 02 FB | 	rdlong	local01, fp
27b74     18 26 46 F0 | 	shr	local01, #24
27b78     03 26 06 F5 | 	and	local01, #3
27b7c     3C 4E 05 F1 | 	add	fp, #60
27b80     A7 26 62 FC | 	wrlong	local01, fp
27b84     00 26 06 F6 | 	mov	local01, #0
27b88     18 4E 85 F1 | 	sub	fp, #24
27b8c     A7 2A 0A FB | 	rdlong	local03, fp wz
27b90     2C 4E 85 F1 | 	sub	fp, #44
27b94     18 00 90 5D |  if_ne	jmp	#LR__3370
27b98     1C 4E 05 F1 | 	add	fp, #28
27b9c     A7 2C 02 FB | 	rdlong	local04, fp
27ba0     1C 4E 85 F1 | 	sub	fp, #28
27ba4     16 2F 02 F6 | 	mov	local05, local04
27ba8     0A 2E 0E F2 | 	cmp	local05, #10 wz
27bac     04 00 90 AD |  if_e	jmp	#LR__3371
27bb0                 | LR__3370
27bb0     01 26 66 F5 | 	xor	local01, #1
27bb4                 | LR__3371
27bb4     3C 4E 05 F1 | 	add	fp, #60
27bb8     A7 26 62 FC | 	wrlong	local01, fp
27bbc     3C 4E 85 F1 | 	sub	fp, #60
27bc0     00 26 0E F2 | 	cmp	local01, #0 wz
27bc4     0C 01 90 AD |  if_e	jmp	#LR__3373
27bc8     44 4E 05 F1 | 	add	fp, #68
27bcc     A7 2E 02 FB | 	rdlong	local05, fp
27bd0     44 4E 85 F1 | 	sub	fp, #68
27bd4     17 2B 02 F6 | 	mov	local03, local05
27bd8     02 2A 0E F2 | 	cmp	local03, #2 wz
27bdc     F4 00 90 5D |  if_ne	jmp	#LR__3373
27be0     0C 4F 05 F1 | 	add	fp, #268
27be4     A7 30 02 FB | 	rdlong	local06, fp
27be8     0C 4F 85 F1 | 	sub	fp, #268
27bec     18 2D 02 F6 | 	mov	local04, local06
27bf0     02 2C 0E F2 | 	cmp	local04, #2 wz
27bf4     DC 00 90 AD |  if_e	jmp	#LR__3373
27bf8     C0 4E 05 F1 | 	add	fp, #192
27bfc     A7 12 02 FB | 	rdlong	arg01, fp
27c00     94 4E 85 F1 | 	sub	fp, #148
27c04     A7 14 02 FB | 	rdlong	arg02, fp
27c08     14 4E 05 F1 | 	add	fp, #20
27c0c     A7 16 02 FB | 	rdlong	arg03, fp
27c10     40 4E 85 F1 | 	sub	fp, #64
27c14     8C 47 B0 FD | 	call	#__system__emitsign_0563
27c18     14 4F 05 F1 | 	add	fp, #276
27c1c     A7 FA 61 FC | 	wrlong	result1, fp
27c20     14 4F 85 F1 | 	sub	fp, #276
27c24     00 FA 55 F2 | 	cmps	result1, #0 wc
27c28     14 4F 05 C1 |  if_b	add	fp, #276
27c2c     A7 FA 01 CB |  if_b	rdlong	result1, fp
27c30     14 4F 85 C1 |  if_b	sub	fp, #276
27c34     6C 0B 90 CD |  if_b	jmp	#LR__3423
27c38     C0 4E 05 F1 | 	add	fp, #192
27c3c     A7 26 02 FB | 	rdlong	local01, fp
27c40     54 4E 05 F1 | 	add	fp, #84
27c44     A7 2E 02 FB | 	rdlong	local05, fp
27c48     17 2B 02 F6 | 	mov	local03, local05
27c4c     17 27 02 F1 | 	add	local01, local05
27c50     54 4E 85 F1 | 	sub	fp, #84
27c54     A7 26 62 FC | 	wrlong	local01, fp
27c58     58 4E 85 F1 | 	sub	fp, #88
27c5c     A7 26 0A FB | 	rdlong	local01, fp wz
27c60     68 4E 85 F1 | 	sub	fp, #104
27c64     60 00 90 AD |  if_e	jmp	#LR__3372
27c68     68 4E 05 F1 | 	add	fp, #104
27c6c     A7 26 02 FB | 	rdlong	local01, fp
27c70     AC 4E 05 F1 | 	add	fp, #172
27c74     A7 2A 02 FB | 	rdlong	local03, fp
27c78     15 27 82 F1 | 	sub	local01, local03
27c7c     AC 4E 85 F1 | 	sub	fp, #172
27c80     A7 26 62 FC | 	wrlong	local01, fp
27c84     68 4E 85 F1 | 	sub	fp, #104
27c88     00 26 56 F2 | 	cmps	local01, #0 wc
27c8c     68 4E 05 C1 |  if_b	add	fp, #104
27c90     A7 00 68 CC |  if_b	wrlong	#0, fp
27c94     68 4E 85 C1 |  if_b	sub	fp, #104
27c98     08 4E 05 F1 | 	add	fp, #8
27c9c     A7 26 02 FB | 	rdlong	local01, fp
27ca0     E8 26 06 F4 | 	bitl	local01, #232
27ca4     A7 26 62 FC | 	wrlong	local01, fp
27ca8     60 4E 05 F1 | 	add	fp, #96
27cac     A7 2E 02 FB | 	rdlong	local05, fp
27cb0     17 2B 02 F6 | 	mov	local03, local05
27cb4     08 2A 66 F0 | 	shl	local03, #8
27cb8     15 27 42 F5 | 	or	local01, local03
27cbc     60 4E 85 F1 | 	sub	fp, #96
27cc0     A7 26 62 FC | 	wrlong	local01, fp
27cc4     08 4E 85 F1 | 	sub	fp, #8
27cc8                 | LR__3372
27cc8     3C 4E 05 F1 | 	add	fp, #60
27ccc     A7 00 68 FC | 	wrlong	#0, fp
27cd0     3C 4E 85 F1 | 	sub	fp, #60
27cd4                 | LR__3373
27cd4     0C 4E 05 F1 | 	add	fp, #12
27cd8     A7 12 02 FB | 	rdlong	arg01, fp
27cdc     0C 4E 85 F1 | 	sub	fp, #12
27ce0     EC 21 B0 FD | 	call	#__system____builtin_ilogb
27ce4     FF FF 3F FF 
27ce8     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
27cec     50 00 90 5D |  if_ne	jmp	#LR__3375
27cf0     2C 4E 05 F1 | 	add	fp, #44
27cf4     A7 26 0A FB | 	rdlong	local01, fp wz
27cf8     2C 4E 85 F1 | 	sub	fp, #44
27cfc     24 00 90 AD |  if_e	jmp	#LR__3374
27d00     C0 4E 05 F1 | 	add	fp, #192
27d04     A7 28 02 FB | 	rdlong	local02, fp
27d08     14 2B 02 F6 | 	mov	local03, local02
27d0c     01 2A 06 F1 | 	add	local03, #1
27d10     A7 2A 62 FC | 	wrlong	local03, fp
27d14     94 4E 85 F1 | 	sub	fp, #148
27d18     A7 2C 02 FB | 	rdlong	local04, fp
27d1c     2C 4E 85 F1 | 	sub	fp, #44
27d20     14 2D 42 FC | 	wrbyte	local04, local02
27d24                 | LR__3374
27d24     C0 4E 05 F1 | 	add	fp, #192
27d28     A7 12 02 FB | 	rdlong	arg01, fp
27d2c     C0 4E 85 F1 | 	sub	fp, #192
27d30     B1 01 00 FF 
27d34     42 14 06 F6 | 	mov	arg02, ##@LR__5371
27d38     AC E9 BF FD | 	call	#__system____builtin_strcpy
27d3c     A4 08 90 FD | 	jmp	#LR__3411
27d40                 | LR__3375
27d40     0C 4E 05 F1 | 	add	fp, #12
27d44     A7 28 02 FB | 	rdlong	local02, fp
27d48     0C 4E 85 F1 | 	sub	fp, #12
27d4c     14 13 02 F6 | 	mov	arg01, local02
27d50     7C 21 B0 FD | 	call	#__system____builtin_ilogb
27d54     00 00 40 FF 
27d58     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
27d5c     50 00 90 5D |  if_ne	jmp	#LR__3377
27d60     2C 4E 05 F1 | 	add	fp, #44
27d64     A7 26 0A FB | 	rdlong	local01, fp wz
27d68     2C 4E 85 F1 | 	sub	fp, #44
27d6c     24 00 90 AD |  if_e	jmp	#LR__3376
27d70     C0 4E 05 F1 | 	add	fp, #192
27d74     A7 28 02 FB | 	rdlong	local02, fp
27d78     14 2B 02 F6 | 	mov	local03, local02
27d7c     01 2A 06 F1 | 	add	local03, #1
27d80     A7 2A 62 FC | 	wrlong	local03, fp
27d84     94 4E 85 F1 | 	sub	fp, #148
27d88     A7 2C 02 FB | 	rdlong	local04, fp
27d8c     2C 4E 85 F1 | 	sub	fp, #44
27d90     14 2D 42 FC | 	wrbyte	local04, local02
27d94                 | LR__3376
27d94     C0 4E 05 F1 | 	add	fp, #192
27d98     A7 12 02 FB | 	rdlong	arg01, fp
27d9c     C0 4E 85 F1 | 	sub	fp, #192
27da0     B1 01 00 FF 
27da4     46 14 06 F6 | 	mov	arg02, ##@LR__5372
27da8     3C E9 BF FD | 	call	#__system____builtin_strcpy
27dac     34 08 90 FD | 	jmp	#LR__3411
27db0                 | LR__3377
27db0     10 4E 05 F1 | 	add	fp, #16
27db4     A7 26 02 FB | 	rdlong	local01, fp
27db8     10 4E 85 F1 | 	sub	fp, #16
27dbc     67 26 0E F2 | 	cmp	local01, #103 wz
27dc0     10 4E 05 51 |  if_ne	add	fp, #16
27dc4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
27dc8     10 4E 85 51 |  if_ne	sub	fp, #16
27dcc     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
27dd0     94 01 90 5D |  if_ne	jmp	#LR__3382
27dd4     0C 4E 05 F1 | 	add	fp, #12
27dd8     A7 12 02 FB | 	rdlong	arg01, fp
27ddc     08 4E 05 F1 | 	add	fp, #8
27de0     A7 14 02 F6 | 	mov	arg02, fp
27de4     0C 4E 05 F1 | 	add	fp, #12
27de8     A7 16 02 F6 | 	mov	arg03, fp
27dec     98 4E 05 F1 | 	add	fp, #152
27df0     A7 18 02 FB | 	rdlong	arg04, fp
27df4     9C 4E 85 F1 | 	sub	fp, #156
27df8     A7 1A 02 FB | 	rdlong	arg05, fp
27dfc     1C 4E 85 F1 | 	sub	fp, #28
27e00     AC 43 B0 FD | 	call	#__system__disassemble_0561
27e04     10 4E 05 F1 | 	add	fp, #16
27e08     A7 26 02 FB | 	rdlong	local01, fp
27e0c     10 4E 85 F1 | 	sub	fp, #16
27e10     23 26 0E F2 | 	cmp	local01, #35 wz
27e14     A0 00 90 5D |  if_ne	jmp	#LR__3379
27e18     20 4E 05 F1 | 	add	fp, #32
27e1c     A7 26 02 FB | 	rdlong	local01, fp
27e20     98 4E 05 F1 | 	add	fp, #152
27e24     A7 2A 02 FB | 	rdlong	local03, fp
27e28     B8 4E 85 F1 | 	sub	fp, #184
27e2c     15 27 5A F2 | 	cmps	local01, local03 wcz
27e30     24 4E 05 11 |  if_a	add	fp, #36
27e34     A7 02 68 1C |  if_a	wrlong	#1, fp
27e38     24 4E 85 11 |  if_a	sub	fp, #36
27e3c     A4 01 90 1D |  if_a	jmp	#LR__3385
27e40     20 4E 05 F1 | 	add	fp, #32
27e44     A7 26 02 FB | 	rdlong	local01, fp
27e48     20 4E 85 F1 | 	sub	fp, #32
27e4c     00 26 56 F2 | 	cmps	local01, #0 wc
27e50     2C 00 90 3D |  if_ae	jmp	#LR__3378
27e54     B8 4E 05 F1 | 	add	fp, #184
27e58     A7 26 02 FB | 	rdlong	local01, fp
27e5c     13 27 62 F6 | 	neg	local01, local01
27e60     98 4E 85 F1 | 	sub	fp, #152
27e64     A7 2A 02 FB | 	rdlong	local03, fp
27e68     20 4E 85 F1 | 	sub	fp, #32
27e6c     13 2B 5A F2 | 	cmps	local03, local01 wcz
27e70     24 4E 05 E1 |  if_be	add	fp, #36
27e74     A7 02 68 EC |  if_be	wrlong	#1, fp
27e78     24 4E 85 E1 |  if_be	sub	fp, #36
27e7c     64 01 90 FD | 	jmp	#LR__3385
27e80                 | LR__3378
27e80     20 4E 05 F1 | 	add	fp, #32
27e84     A7 26 02 FB | 	rdlong	local01, fp
27e88     20 4E 85 F1 | 	sub	fp, #32
27e8c     01 26 56 F2 | 	cmps	local01, #1 wc
27e90     50 01 90 CD |  if_b	jmp	#LR__3385
27e94     B8 4E 05 F1 | 	add	fp, #184
27e98     A7 26 02 FB | 	rdlong	local01, fp
27e9c     98 4E 85 F1 | 	sub	fp, #152
27ea0     A7 2A 02 FB | 	rdlong	local03, fp
27ea4     15 27 82 F1 | 	sub	local01, local03
27ea8     98 4E 05 F1 | 	add	fp, #152
27eac     A7 26 62 FC | 	wrlong	local01, fp
27eb0     B8 4E 85 F1 | 	sub	fp, #184
27eb4     2C 01 90 FD | 	jmp	#LR__3385
27eb8                 | LR__3379
27eb8     00 26 06 F6 | 	mov	local01, #0
27ebc     08 4E 05 F1 | 	add	fp, #8
27ec0     A7 28 02 FB | 	rdlong	local02, fp
27ec4     1C 28 46 F0 | 	shr	local02, #28
27ec8     01 28 0E F5 | 	and	local02, #1 wz
27ecc     01 26 06 A6 |  if_e	mov	local01, #1
27ed0     2C 4E 05 F1 | 	add	fp, #44
27ed4     A7 26 62 FC | 	wrlong	local01, fp
27ed8     14 4E 85 F1 | 	sub	fp, #20
27edc     A7 26 02 FB | 	rdlong	local01, fp
27ee0     98 4E 05 F1 | 	add	fp, #152
27ee4     A7 2A 02 FB | 	rdlong	local03, fp
27ee8     B8 4E 85 F1 | 	sub	fp, #184
27eec     15 27 52 F2 | 	cmps	local01, local03 wc
27ef0     18 00 90 3D |  if_ae	jmp	#LR__3380
27ef4     20 4E 05 F1 | 	add	fp, #32
27ef8     A7 2C 02 FB | 	rdlong	local04, fp
27efc     20 4E 85 F1 | 	sub	fp, #32
27f00     FF FF 7F FF 
27f04     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
27f08     10 00 90 3D |  if_ae	jmp	#LR__3381
27f0c                 | LR__3380
27f0c     24 4E 05 F1 | 	add	fp, #36
27f10     A7 02 68 FC | 	wrlong	#1, fp
27f14     24 4E 85 F1 | 	sub	fp, #36
27f18     C8 00 90 FD | 	jmp	#LR__3385
27f1c                 | LR__3381
27f1c     B8 4E 05 F1 | 	add	fp, #184
27f20     A7 2C 02 FB | 	rdlong	local04, fp
27f24     98 4E 85 F1 | 	sub	fp, #152
27f28     A7 2A 02 FB | 	rdlong	local03, fp
27f2c     15 2D 82 F1 | 	sub	local04, local03
27f30     98 4E 05 F1 | 	add	fp, #152
27f34     A7 2C 62 FC | 	wrlong	local04, fp
27f38     AC 4E 85 F1 | 	sub	fp, #172
27f3c     A7 12 02 FB | 	rdlong	arg01, fp
27f40     08 4E 05 F1 | 	add	fp, #8
27f44     A7 14 02 F6 | 	mov	arg02, fp
27f48     0C 4E 05 F1 | 	add	fp, #12
27f4c     A7 16 02 F6 | 	mov	arg03, fp
27f50     16 19 62 F6 | 	neg	arg04, local04
27f54     04 4E 85 F1 | 	sub	fp, #4
27f58     A7 1A 02 FB | 	rdlong	arg05, fp
27f5c     1C 4E 85 F1 | 	sub	fp, #28
27f60     4C 42 B0 FD | 	call	#__system__disassemble_0561
27f64     7C 00 90 FD | 	jmp	#LR__3385
27f68                 | LR__3382
27f68     24 4E 05 F1 | 	add	fp, #36
27f6c     A7 26 0A FB | 	rdlong	local01, fp wz
27f70     24 4E 85 F1 | 	sub	fp, #36
27f74     34 00 90 AD |  if_e	jmp	#LR__3383
27f78     0C 4E 05 F1 | 	add	fp, #12
27f7c     A7 12 02 FB | 	rdlong	arg01, fp
27f80     08 4E 05 F1 | 	add	fp, #8
27f84     A7 14 02 F6 | 	mov	arg02, fp
27f88     0C 4E 05 F1 | 	add	fp, #12
27f8c     A7 16 02 F6 | 	mov	arg03, fp
27f90     98 4E 05 F1 | 	add	fp, #152
27f94     A7 18 02 FB | 	rdlong	arg04, fp
27f98     9C 4E 85 F1 | 	sub	fp, #156
27f9c     A7 1A 02 FB | 	rdlong	arg05, fp
27fa0     1C 4E 85 F1 | 	sub	fp, #28
27fa4     08 42 B0 FD | 	call	#__system__disassemble_0561
27fa8     38 00 90 FD | 	jmp	#LR__3384
27fac                 | LR__3383
27fac     0C 4E 05 F1 | 	add	fp, #12
27fb0     A7 12 02 FB | 	rdlong	arg01, fp
27fb4     08 4E 05 F1 | 	add	fp, #8
27fb8     A7 14 02 F6 | 	mov	arg02, fp
27fbc     0C 4E 05 F1 | 	add	fp, #12
27fc0     A7 16 02 F6 | 	mov	arg03, fp
27fc4     98 4E 05 F1 | 	add	fp, #152
27fc8     A7 2C 02 FB | 	rdlong	local04, fp
27fcc     01 2C 06 F1 | 	add	local04, #1
27fd0     16 19 62 F6 | 	neg	arg04, local04
27fd4     9C 4E 85 F1 | 	sub	fp, #156
27fd8     A7 1A 02 FB | 	rdlong	arg05, fp
27fdc     1C 4E 85 F1 | 	sub	fp, #28
27fe0     CC 41 B0 FD | 	call	#__system__disassemble_0561
27fe4                 | LR__3384
27fe4                 | LR__3385
27fe4     1C 4E 05 F1 | 	add	fp, #28
27fe8     A7 26 02 FB | 	rdlong	local01, fp
27fec     1C 4E 85 F1 | 	sub	fp, #28
27ff0     02 26 0E F2 | 	cmp	local01, #2 wz
27ff4     4C 00 90 5D |  if_ne	jmp	#LR__3388
27ff8     1C 4E 05 F1 | 	add	fp, #28
27ffc     A7 20 68 FC | 	wrlong	#16, fp
28000     1C 4E 85 F1 | 	sub	fp, #28
28004                 | LR__3386
28004     14 4E 05 F1 | 	add	fp, #20
28008     A7 26 0A FB | 	rdlong	local01, fp wz
2800c     14 4E 85 F1 | 	sub	fp, #20
28010     30 00 90 AD |  if_e	jmp	#LR__3387
28014     14 4E 05 F1 | 	add	fp, #20
28018     A7 2A 02 FB | 	rdlong	local03, fp
2801c     14 4E 85 F1 | 	sub	fp, #20
28020     00 80 00 FF 
28024     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
28028     18 00 90 3D |  if_ae	jmp	#LR__3387
2802c     14 4E 05 F1 | 	add	fp, #20
28030     A7 26 02 FB | 	rdlong	local01, fp
28034     01 26 66 F0 | 	shl	local01, #1
28038     A7 26 62 FC | 	wrlong	local01, fp
2803c     14 4E 85 F1 | 	sub	fp, #20
28040     C0 FF 9F FD | 	jmp	#LR__3386
28044                 | LR__3387
28044                 | LR__3388
28044     70 4E 05 F1 | 	add	fp, #112
28048     A7 12 02 F6 | 	mov	arg01, fp
2804c     5C 4E 85 F1 | 	sub	fp, #92
28050     A7 14 02 FB | 	rdlong	arg02, fp
28054     08 4E 05 F1 | 	add	fp, #8
28058     A7 16 02 FB | 	rdlong	arg03, fp
2805c     A0 4E 05 F1 | 	add	fp, #160
28060     A7 1A 02 FB | 	rdlong	arg05, fp
28064     BC 4E 85 F1 | 	sub	fp, #188
28068     01 18 06 F6 | 	mov	arg04, #1
2806c     CC 40 B0 FD | 	call	#__system___uitoa
28070     58 4E 05 F1 | 	add	fp, #88
28074     A7 FA 61 FC | 	wrlong	result1, fp
28078     38 4E 85 F1 | 	sub	fp, #56
2807c     A7 26 02 FB | 	rdlong	local01, fp
28080     20 4E 85 F1 | 	sub	fp, #32
28084     00 26 56 F2 | 	cmps	local01, #0 wc
28088     50 00 90 3D |  if_ae	jmp	#LR__3389
2808c     60 4E 05 F1 | 	add	fp, #96
28090     A7 5A 68 FC | 	wrlong	#45, fp
28094     50 4E 05 F1 | 	add	fp, #80
28098     A7 12 02 F6 | 	mov	arg01, fp
2809c     90 4E 85 F1 | 	sub	fp, #144
280a0     A7 2A 02 FB | 	rdlong	local03, fp
280a4     15 15 62 F6 | 	neg	arg02, local03
280a8     18 4E 05 F1 | 	add	fp, #24
280ac     A7 18 02 FB | 	rdlong	arg04, fp
280b0     84 4E 05 F1 | 	add	fp, #132
280b4     A7 30 02 FB | 	rdlong	local06, fp
280b8     BC 4E 85 F1 | 	sub	fp, #188
280bc     18 2D 02 F6 | 	mov	local04, local06
280c0     0A 16 06 F6 | 	mov	arg03, #10
280c4     16 1B 02 F6 | 	mov	arg05, local04
280c8     70 40 B0 FD | 	call	#__system___uitoa
280cc     5C 4E 05 F1 | 	add	fp, #92
280d0     A7 FA 61 FC | 	wrlong	result1, fp
280d4     5C 4E 85 F1 | 	sub	fp, #92
280d8     48 00 90 FD | 	jmp	#LR__3390
280dc                 | LR__3389
280dc     60 4E 05 F1 | 	add	fp, #96
280e0     A7 56 68 FC | 	wrlong	#43, fp
280e4     50 4E 05 F1 | 	add	fp, #80
280e8     A7 12 02 F6 | 	mov	arg01, fp
280ec     90 4E 85 F1 | 	sub	fp, #144
280f0     A7 14 02 FB | 	rdlong	arg02, fp
280f4     18 4E 05 F1 | 	add	fp, #24
280f8     A7 18 02 FB | 	rdlong	arg04, fp
280fc     84 4E 05 F1 | 	add	fp, #132
28100     A7 30 02 FB | 	rdlong	local06, fp
28104     BC 4E 85 F1 | 	sub	fp, #188
28108     18 2D 02 F6 | 	mov	local04, local06
2810c     0A 16 06 F6 | 	mov	arg03, #10
28110     16 1B 02 F6 | 	mov	arg05, local04
28114     24 40 B0 FD | 	call	#__system___uitoa
28118     5C 4E 05 F1 | 	add	fp, #92
2811c     A7 FA 61 FC | 	wrlong	result1, fp
28120     5C 4E 85 F1 | 	sub	fp, #92
28124                 | LR__3390
28124     24 4E 05 F1 | 	add	fp, #36
28128     A7 26 0A FB | 	rdlong	local01, fp wz
2812c     24 4E 85 F1 | 	sub	fp, #36
28130     2C 00 90 AD |  if_e	jmp	#LR__3391
28134     50 4E 05 F1 | 	add	fp, #80
28138     A7 00 68 FC | 	wrlong	#0, fp
2813c     04 4E 85 F1 | 	sub	fp, #4
28140     A7 00 68 FC | 	wrlong	#0, fp
28144     6C 4E 05 F1 | 	add	fp, #108
28148     A7 26 02 FB | 	rdlong	local01, fp
2814c     01 26 06 F1 | 	add	local01, #1
28150     64 4E 85 F1 | 	sub	fp, #100
28154     A7 26 62 FC | 	wrlong	local01, fp
28158     54 4E 85 F1 | 	sub	fp, #84
2815c     88 00 90 FD | 	jmp	#LR__3394
28160                 | LR__3391
28160     20 4E 05 F1 | 	add	fp, #32
28164     A7 26 02 FB | 	rdlong	local01, fp
28168     20 4E 85 F1 | 	sub	fp, #32
2816c     00 26 56 F2 | 	cmps	local01, #0 wc
28170     40 00 90 3D |  if_ae	jmp	#LR__3392
28174     20 4E 05 F1 | 	add	fp, #32
28178     A7 28 02 FB | 	rdlong	local02, fp
2817c     30 4E 05 F1 | 	add	fp, #48
28180     A7 28 62 FC | 	wrlong	local02, fp
28184     04 4E 85 F1 | 	sub	fp, #4
28188     A7 28 62 FC | 	wrlong	local02, fp
2818c     2C 4E 85 F1 | 	sub	fp, #44
28190     A7 26 02 FB | 	rdlong	local01, fp
28194     98 4E 05 F1 | 	add	fp, #152
28198     A7 2A 02 FB | 	rdlong	local03, fp
2819c     15 27 02 F1 | 	add	local01, local03
281a0     01 26 06 F1 | 	add	local01, #1
281a4     64 4E 85 F1 | 	sub	fp, #100
281a8     A7 26 62 FC | 	wrlong	local01, fp
281ac     54 4E 85 F1 | 	sub	fp, #84
281b0     34 00 90 FD | 	jmp	#LR__3393
281b4                 | LR__3392
281b4     4C 4E 05 F1 | 	add	fp, #76
281b8     A7 00 68 FC | 	wrlong	#0, fp
281bc     2C 4E 85 F1 | 	sub	fp, #44
281c0     A7 26 02 FB | 	rdlong	local01, fp
281c4     30 4E 05 F1 | 	add	fp, #48
281c8     A7 26 62 FC | 	wrlong	local01, fp
281cc     68 4E 05 F1 | 	add	fp, #104
281d0     A7 2A 02 FB | 	rdlong	local03, fp
281d4     15 27 02 F1 | 	add	local01, local03
281d8     01 26 06 F1 | 	add	local01, #1
281dc     64 4E 85 F1 | 	sub	fp, #100
281e0     A7 26 62 FC | 	wrlong	local01, fp
281e4     54 4E 85 F1 | 	sub	fp, #84
281e8                 | LR__3393
281e8                 | LR__3394
281e8     54 4E 05 F1 | 	add	fp, #84
281ec     A7 26 02 FB | 	rdlong	local01, fp
281f0     08 4E 85 F1 | 	sub	fp, #8
281f4     A7 2A 02 FB | 	rdlong	local03, fp
281f8     15 27 82 F1 | 	sub	local01, local03
281fc     01 26 06 F1 | 	add	local01, #1
28200     24 4E 85 F1 | 	sub	fp, #36
28204     A7 26 62 FC | 	wrlong	local01, fp
28208     04 4E 05 F1 | 	add	fp, #4
2820c     A7 26 0A FB | 	rdlong	local01, fp wz
28210     2C 4E 85 F1 | 	sub	fp, #44
28214     28 4E 05 51 |  if_ne	add	fp, #40
28218     A7 2A 02 5B |  if_ne	rdlong	local03, fp
2821c     01 2A 06 51 |  if_ne	add	local03, #1
28220     A7 2A 62 5C |  if_ne	wrlong	local03, fp
28224     28 4E 85 51 |  if_ne	sub	fp, #40
28228     1C 4E 05 F1 | 	add	fp, #28
2822c     A7 26 02 FB | 	rdlong	local01, fp
28230     1C 4E 85 F1 | 	sub	fp, #28
28234     10 26 0E F2 | 	cmp	local01, #16 wz
28238     28 4E 05 A1 |  if_e	add	fp, #40
2823c     A7 26 02 AB |  if_e	rdlong	local01, fp
28240     02 26 06 A1 |  if_e	add	local01, #2
28244     A7 26 62 AC |  if_e	wrlong	local01, fp
28248     28 4E 85 A1 |  if_e	sub	fp, #40
2824c     24 4E 05 F1 | 	add	fp, #36
28250     A7 26 0A FB | 	rdlong	local01, fp wz
28254     24 4E 85 F1 | 	sub	fp, #36
28258     28 00 90 AD |  if_e	jmp	#LR__3395
2825c     28 4E 05 F1 | 	add	fp, #40
28260     A7 26 02 FB | 	rdlong	local01, fp
28264     02 2A 06 F6 | 	mov	local03, #2
28268     34 4E 05 F1 | 	add	fp, #52
2826c     A7 2E 02 FB | 	rdlong	local05, fp
28270     17 2B 02 F1 | 	add	local03, local05
28274     15 27 02 F1 | 	add	local01, local03
28278     34 4E 85 F1 | 	sub	fp, #52
2827c     A7 26 62 FC | 	wrlong	local01, fp
28280     28 4E 85 F1 | 	sub	fp, #40
28284                 | LR__3395
28284     28 4E 05 F1 | 	add	fp, #40
28288     A7 26 02 FB | 	rdlong	local01, fp
2828c     28 4E 85 F1 | 	sub	fp, #40
28290     41 26 56 F2 | 	cmps	local01, #65 wc
28294     01 FA 65 36 |  if_ae	neg	result1, #1
28298     08 05 90 3D |  if_ae	jmp	#LR__3423
2829c     3C 4E 05 F1 | 	add	fp, #60
282a0     A7 26 0A FB | 	rdlong	local01, fp wz
282a4     3C 4E 85 F1 | 	sub	fp, #60
282a8     60 00 90 AD |  if_e	jmp	#LR__3396
282ac     C0 4E 05 F1 | 	add	fp, #192
282b0     A7 12 02 FB | 	rdlong	arg01, fp
282b4     94 4E 85 F1 | 	sub	fp, #148
282b8     A7 14 02 FB | 	rdlong	arg02, fp
282bc     14 4E 05 F1 | 	add	fp, #20
282c0     A7 16 02 FB | 	rdlong	arg03, fp
282c4     40 4E 85 F1 | 	sub	fp, #64
282c8     D8 40 B0 FD | 	call	#__system__emitsign_0563
282cc     18 4F 05 F1 | 	add	fp, #280
282d0     A7 FA 61 FC | 	wrlong	result1, fp
282d4     18 4F 85 F1 | 	sub	fp, #280
282d8     00 FA 55 F2 | 	cmps	result1, #0 wc
282dc     18 4F 05 C1 |  if_b	add	fp, #280
282e0     A7 FA 01 CB |  if_b	rdlong	result1, fp
282e4     18 4F 85 C1 |  if_b	sub	fp, #280
282e8     B8 04 90 CD |  if_b	jmp	#LR__3423
282ec     C0 4E 05 F1 | 	add	fp, #192
282f0     A7 26 02 FB | 	rdlong	local01, fp
282f4     58 4E 05 F1 | 	add	fp, #88
282f8     A7 2A 02 FB | 	rdlong	local03, fp
282fc     15 27 02 F1 | 	add	local01, local03
28300     58 4E 85 F1 | 	sub	fp, #88
28304     A7 26 62 FC | 	wrlong	local01, fp
28308     C0 4E 85 F1 | 	sub	fp, #192
2830c                 | LR__3396
2830c     4C 4E 05 F1 | 	add	fp, #76
28310     A7 26 02 FB | 	rdlong	local01, fp
28314     34 4E 85 F1 | 	sub	fp, #52
28318     A7 26 62 FC | 	wrlong	local01, fp
2831c     18 4E 85 F1 | 	sub	fp, #24
28320     97 9E 48 FB | 	callpa	#(@LR__3402-@LR__3397)>>2,fcache_load_ptr_
28324                 | LR__3397
28324     18 4E 05 F1 | 	add	fp, #24
28328     A7 28 02 FB | 	rdlong	local02, fp
2832c     3C 4E 05 F1 | 	add	fp, #60
28330     A7 2E 02 FB | 	rdlong	local05, fp
28334     54 4E 85 F1 | 	sub	fp, #84
28338     17 29 52 F2 | 	cmps	local02, local05 wc
2833c     20 01 90 3D |  if_ae	jmp	#LR__3403
28340     18 4E 05 F1 | 	add	fp, #24
28344     A7 30 02 FB | 	rdlong	local06, fp
28348     18 4E 85 F1 | 	sub	fp, #24
2834c     00 30 56 F2 | 	cmps	local06, #0 wc
28350     58 00 90 CD |  if_b	jmp	#LR__3398
28354     18 4E 05 F1 | 	add	fp, #24
28358     A7 30 02 FB | 	rdlong	local06, fp
2835c     40 4E 05 F1 | 	add	fp, #64
28360     A7 32 02 FB | 	rdlong	local07, fp
28364     58 4E 85 F1 | 	sub	fp, #88
28368     19 31 52 F2 | 	cmps	local06, local07 wc
2836c     3C 00 90 3D |  if_ae	jmp	#LR__3398
28370     C0 4E 05 F1 | 	add	fp, #192
28374     A7 34 02 FB | 	rdlong	local08, fp
28378     1A 33 02 F6 | 	mov	local07, local08
2837c     01 32 06 F1 | 	add	local07, #1
28380     A7 32 62 FC | 	wrlong	local07, fp
28384     A8 4E 85 F1 | 	sub	fp, #168
28388     A7 32 02 FB | 	rdlong	local07, fp
2838c     19 37 02 F6 | 	mov	local09, local07
28390     58 4E 05 F1 | 	add	fp, #88
28394     A7 38 02 F6 | 	mov	local10, fp
28398     A7 36 02 F1 | 	add	local09, fp
2839c     1B 3B C2 FA | 	rdbyte	local11, local09
283a0     1A 3B 42 FC | 	wrbyte	local11, local08
283a4     70 4E 85 F1 | 	sub	fp, #112
283a8     20 00 90 FD | 	jmp	#LR__3399
283ac                 | LR__3398
283ac     C0 4E 05 F1 | 	add	fp, #192
283b0     A7 34 02 FB | 	rdlong	local08, fp
283b4     1A 37 02 F6 | 	mov	local09, local08
283b8     01 36 06 F1 | 	add	local09, #1
283bc     A7 36 62 FC | 	wrlong	local09, fp
283c0     C0 4E 85 F1 | 	sub	fp, #192
283c4     30 36 06 F6 | 	mov	local09, #48
283c8     1A 61 48 FC | 	wrbyte	#48, local08
283cc                 | LR__3399
283cc     18 4E 05 F1 | 	add	fp, #24
283d0     A7 30 02 FB | 	rdlong	local06, fp
283d4     38 4E 05 F1 | 	add	fp, #56
283d8     A7 3C 02 FB | 	rdlong	local12, fp
283dc     50 4E 85 F1 | 	sub	fp, #80
283e0     1E 31 0A F2 | 	cmp	local06, local12 wz
283e4     5C 00 90 5D |  if_ne	jmp	#LR__3401
283e8     10 4F 05 F1 | 	add	fp, #272
283ec     A7 32 02 FB | 	rdlong	local07, fp
283f0     10 4F 85 F1 | 	sub	fp, #272
283f4     19 37 0A F6 | 	mov	local09, local07 wz
283f8     28 00 90 5D |  if_ne	jmp	#LR__3400
283fc     54 4E 05 F1 | 	add	fp, #84
28400     A7 3A 02 FB | 	rdlong	local11, fp
28404     1D 39 02 F6 | 	mov	local10, local11
28408     01 38 86 F1 | 	sub	local10, #1
2840c     3C 4E 85 F1 | 	sub	fp, #60
28410     A7 3E 02 FB | 	rdlong	local13, fp
28414     18 4E 85 F1 | 	sub	fp, #24
28418     1F 41 02 F6 | 	mov	local14, local13
2841c     1C 41 52 F2 | 	cmps	local14, local10 wc
28420     20 00 90 3D |  if_ae	jmp	#LR__3401
28424                 | LR__3400
28424     C0 4E 05 F1 | 	add	fp, #192
28428     A7 34 02 FB | 	rdlong	local08, fp
2842c     1A 3D 02 F6 | 	mov	local12, local08
28430     01 3C 06 F1 | 	add	local12, #1
28434     A7 3C 62 FC | 	wrlong	local12, fp
28438     C0 4E 85 F1 | 	sub	fp, #192
2843c     2E 36 06 F6 | 	mov	local09, #46
28440     1A 5D 48 FC | 	wrbyte	#46, local08
28444                 | LR__3401
28444     18 4E 05 F1 | 	add	fp, #24
28448     A7 42 02 FB | 	rdlong	local15, fp
2844c     21 3D 02 F6 | 	mov	local12, local15
28450     01 3C 06 F1 | 	add	local12, #1
28454     A7 3C 62 FC | 	wrlong	local12, fp
28458     18 4E 85 F1 | 	sub	fp, #24
2845c     C4 FE 9F FD | 	jmp	#LR__3397
28460                 | LR__3402
28460                 | LR__3403
28460     34 4E 05 F1 | 	add	fp, #52
28464     A7 26 0A FB | 	rdlong	local01, fp wz
28468     34 4E 85 F1 | 	sub	fp, #52
2846c     A0 00 90 AD |  if_e	jmp	#LR__3407
28470     C0 4E 05 F1 | 	add	fp, #192
28474     A7 26 02 FB | 	rdlong	local01, fp
28478     01 26 86 F1 | 	sub	local01, #1
2847c     A7 26 62 FC | 	wrlong	local01, fp
28480     C0 4E 85 F1 | 	sub	fp, #192
28484     97 26 48 FB | 	callpa	#(@LR__3405-@LR__3404)>>2,fcache_load_ptr_
28488                 | LR__3404
28488     C0 4E 05 F1 | 	add	fp, #192
2848c     A7 26 02 FB | 	rdlong	local01, fp
28490     04 4E 05 F1 | 	add	fp, #4
28494     A7 2A 02 FB | 	rdlong	local03, fp
28498     C4 4E 85 F1 | 	sub	fp, #196
2849c     15 27 5A F2 | 	cmps	local01, local03 wcz
284a0     30 00 90 ED |  if_be	jmp	#LR__3406
284a4     C0 4E 05 F1 | 	add	fp, #192
284a8     A7 30 02 FB | 	rdlong	local06, fp
284ac     C0 4E 85 F1 | 	sub	fp, #192
284b0     18 2D C2 FA | 	rdbyte	local04, local06
284b4     30 2C 0E F2 | 	cmp	local04, #48 wz
284b8     18 00 90 5D |  if_ne	jmp	#LR__3406
284bc     C0 4E 05 F1 | 	add	fp, #192
284c0     A7 26 02 FB | 	rdlong	local01, fp
284c4     01 26 86 F1 | 	sub	local01, #1
284c8     A7 26 62 FC | 	wrlong	local01, fp
284cc     C0 4E 85 F1 | 	sub	fp, #192
284d0     B4 FF 9F FD | 	jmp	#LR__3404
284d4                 | LR__3405
284d4                 | LR__3406
284d4     C0 4E 05 F1 | 	add	fp, #192
284d8     A7 28 02 FB | 	rdlong	local02, fp
284dc     C0 4E 85 F1 | 	sub	fp, #192
284e0     14 27 C2 FA | 	rdbyte	local01, local02
284e4     2E 26 0E F2 | 	cmp	local01, #46 wz
284e8     C0 4E 05 A1 |  if_e	add	fp, #192
284ec     A7 26 02 AB |  if_e	rdlong	local01, fp
284f0     01 26 86 A1 |  if_e	sub	local01, #1
284f4     A7 26 62 AC |  if_e	wrlong	local01, fp
284f8     C0 4E 85 A1 |  if_e	sub	fp, #192
284fc     C0 4E 05 F1 | 	add	fp, #192
28500     A7 2A 02 FB | 	rdlong	local03, fp
28504     01 2A 06 F1 | 	add	local03, #1
28508     A7 2A 62 FC | 	wrlong	local03, fp
2850c     C0 4E 85 F1 | 	sub	fp, #192
28510                 | LR__3407
28510     24 4E 05 F1 | 	add	fp, #36
28514     A7 26 0A FB | 	rdlong	local01, fp wz
28518     24 4E 85 F1 | 	sub	fp, #36
2851c     B4 00 90 AD |  if_e	jmp	#LR__3410
28520     C0 4E 05 F1 | 	add	fp, #192
28524     A7 28 02 FB | 	rdlong	local02, fp
28528     14 2B 02 F6 | 	mov	local03, local02
2852c     01 2A 06 F1 | 	add	local03, #1
28530     A7 2A 62 FC | 	wrlong	local03, fp
28534     90 4E 85 F1 | 	sub	fp, #144
28538     A7 2C 02 FB | 	rdlong	local04, fp
2853c     14 2D 42 FC | 	wrbyte	local04, local02
28540     90 4E 05 F1 | 	add	fp, #144
28544     A7 28 02 FB | 	rdlong	local02, fp
28548     14 2B 02 F6 | 	mov	local03, local02
2854c     01 2A 06 F1 | 	add	local03, #1
28550     A7 2A 62 FC | 	wrlong	local03, fp
28554     60 4E 85 F1 | 	sub	fp, #96
28558     A7 2C 02 FB | 	rdlong	local04, fp
2855c     14 2D 42 FC | 	wrbyte	local04, local02
28560     48 4E 85 F1 | 	sub	fp, #72
28564     A7 00 68 FC | 	wrlong	#0, fp
28568     18 4E 85 F1 | 	sub	fp, #24
2856c                 | LR__3408
2856c     18 4E 05 F1 | 	add	fp, #24
28570     A7 28 02 FB | 	rdlong	local02, fp
28574     44 4E 05 F1 | 	add	fp, #68
28578     A7 2E 02 FB | 	rdlong	local05, fp
2857c     5C 4E 85 F1 | 	sub	fp, #92
28580     17 29 52 F2 | 	cmps	local02, local05 wc
28584     4C 00 90 3D |  if_ae	jmp	#LR__3409
28588     C0 4E 05 F1 | 	add	fp, #192
2858c     A7 34 02 FB | 	rdlong	local08, fp
28590     1A 3D 02 F6 | 	mov	local12, local08
28594     01 3C 06 F1 | 	add	local12, #1
28598     A7 3C 62 FC | 	wrlong	local12, fp
2859c     A8 4E 85 F1 | 	sub	fp, #168
285a0     A7 32 02 FB | 	rdlong	local07, fp
285a4     19 37 02 F6 | 	mov	local09, local07
285a8     98 4E 05 F1 | 	add	fp, #152
285ac     A7 38 02 F6 | 	mov	local10, fp
285b0     A7 36 02 F1 | 	add	local09, fp
285b4     1B 3B C2 FA | 	rdbyte	local11, local09
285b8     1A 3B 42 FC | 	wrbyte	local11, local08
285bc     98 4E 85 F1 | 	sub	fp, #152
285c0     A7 3C 02 FB | 	rdlong	local12, fp
285c4     01 3C 06 F1 | 	add	local12, #1
285c8     A7 3C 62 FC | 	wrlong	local12, fp
285cc     18 4E 85 F1 | 	sub	fp, #24
285d0     98 FF 9F FD | 	jmp	#LR__3408
285d4                 | LR__3409
285d4                 | LR__3410
285d4     C0 4E 05 F1 | 	add	fp, #192
285d8     A7 26 02 FB | 	rdlong	local01, fp
285dc     C0 4E 85 F1 | 	sub	fp, #192
285e0     13 01 48 FC | 	wrbyte	#0, local01
285e4                 | LR__3411
285e4     6C 4E 05 F1 | 	add	fp, #108
285e8     A7 26 0A FB | 	rdlong	local01, fp wz
285ec     6C 4E 85 F1 | 	sub	fp, #108
285f0     90 01 90 AD |  if_e	jmp	#LR__3422
285f4     48 4E 05 F1 | 	add	fp, #72
285f8     A7 2A 0A FB | 	rdlong	local03, fp wz
285fc     48 4E 85 F1 | 	sub	fp, #72
28600     80 01 90 AD |  if_e	jmp	#LR__3422
28604     C4 4E 05 F1 | 	add	fp, #196
28608     A7 12 02 FB | 	rdlong	arg01, fp
2860c     C4 4E 85 F1 | 	sub	fp, #196
28610     09 45 02 F6 | 	mov	local16, arg01
28614     97 06 48 FB | 	callpa	#(@LR__3413-@LR__3412)>>2,fcache_load_ptr_
28618                 | LR__3412
28618     22 FB C9 FA | 	rdbyte	result1, local16 wz
2861c     01 44 06 51 |  if_ne	add	local16, #1
28620     F4 FF 9F 5D |  if_ne	jmp	#LR__3412
28624                 | LR__3413
28624     09 45 82 F1 | 	sub	local16, arg01
28628     22 2D 02 F6 | 	mov	local04, local16
2862c     6C 4E 05 F1 | 	add	fp, #108
28630     A7 30 02 FB | 	rdlong	local06, fp
28634     6C 4E 85 F1 | 	sub	fp, #108
28638     18 2D 5A F2 | 	cmps	local04, local06 wcz
2863c     44 01 90 ED |  if_be	jmp	#LR__3422
28640     C4 4E 05 F1 | 	add	fp, #196
28644     A7 26 02 FB | 	rdlong	local01, fp
28648     5C 4E 05 F1 | 	add	fp, #92
2864c     A7 26 62 FC | 	wrlong	local01, fp
28650     FC 4E 85 F1 | 	sub	fp, #252
28654     A7 26 0A FB | 	rdlong	local01, fp wz
28658     24 4E 85 F1 | 	sub	fp, #36
2865c     20 00 90 AD |  if_e	jmp	#LR__3414
28660     B8 4E 05 F1 | 	add	fp, #184
28664     A7 00 68 FC | 	wrlong	#0, fp
28668     4C 4E 85 F1 | 	sub	fp, #76
2866c     A7 26 02 FB | 	rdlong	local01, fp
28670     B0 4E 05 F1 | 	add	fp, #176
28674     A7 26 62 FC | 	wrlong	local01, fp
28678     1C 4F 85 F1 | 	sub	fp, #284
2867c     24 00 90 FD | 	jmp	#LR__3415
28680                 | LR__3414
28680     6C 4E 05 F1 | 	add	fp, #108
28684     A7 26 02 FB | 	rdlong	local01, fp
28688     01 26 86 F1 | 	sub	local01, #1
2868c     4C 4E 05 F1 | 	add	fp, #76
28690     A7 2A 02 FB | 	rdlong	local03, fp
28694     15 27 82 F1 | 	sub	local01, local03
28698     64 4E 05 F1 | 	add	fp, #100
2869c     A7 26 62 FC | 	wrlong	local01, fp
286a0     1C 4F 85 F1 | 	sub	fp, #284
286a4                 | LR__3415
286a4     97 20 48 FB | 	callpa	#(@LR__3417-@LR__3416)>>2,fcache_load_ptr_
286a8                 | LR__3416
286a8     1C 4F 05 F1 | 	add	fp, #284
286ac     A7 26 0A FB | 	rdlong	local01, fp wz
286b0     1C 4F 85 F1 | 	sub	fp, #284
286b4     30 00 90 AD |  if_e	jmp	#LR__3418
286b8     20 4F 05 F1 | 	add	fp, #288
286bc     A7 28 02 FB | 	rdlong	local02, fp
286c0     14 2B 02 F6 | 	mov	local03, local02
286c4     01 2A 06 F1 | 	add	local03, #1
286c8     A7 2A 62 FC | 	wrlong	local03, fp
286cc     14 55 48 FC | 	wrbyte	#42, local02
286d0     04 4E 85 F1 | 	sub	fp, #4
286d4     A7 26 02 FB | 	rdlong	local01, fp
286d8     01 26 86 F1 | 	sub	local01, #1
286dc     A7 26 62 FC | 	wrlong	local01, fp
286e0     1C 4F 85 F1 | 	sub	fp, #284
286e4     C0 FF 9F FD | 	jmp	#LR__3416
286e8                 | LR__3417
286e8                 | LR__3418
286e8     B8 4E 05 F1 | 	add	fp, #184
286ec     A7 26 0A FB | 	rdlong	local01, fp wz
286f0     B8 4E 85 F1 | 	sub	fp, #184
286f4     70 00 90 AD |  if_e	jmp	#LR__3421
286f8     20 4F 05 F1 | 	add	fp, #288
286fc     A7 28 02 FB | 	rdlong	local02, fp
28700     14 2B 02 F6 | 	mov	local03, local02
28704     01 2A 06 F1 | 	add	local03, #1
28708     A7 2A 62 FC | 	wrlong	local03, fp
2870c     14 5D 48 FC | 	wrbyte	#46, local02
28710     04 4E 85 F1 | 	sub	fp, #4
28714     A7 00 68 FC | 	wrlong	#0, fp
28718     1C 4F 85 F1 | 	sub	fp, #284
2871c                 | LR__3419
2871c     1C 4F 05 F1 | 	add	fp, #284
28720     A7 28 02 FB | 	rdlong	local02, fp
28724     64 4E 85 F1 | 	sub	fp, #100
28728     A7 2E 02 FB | 	rdlong	local05, fp
2872c     B8 4E 85 F1 | 	sub	fp, #184
28730     17 29 52 F2 | 	cmps	local02, local05 wc
28734     30 00 90 3D |  if_ae	jmp	#LR__3420
28738     20 4F 05 F1 | 	add	fp, #288
2873c     A7 34 02 FB | 	rdlong	local08, fp
28740     1A 3D 02 F6 | 	mov	local12, local08
28744     01 3C 06 F1 | 	add	local12, #1
28748     A7 3C 62 FC | 	wrlong	local12, fp
2874c     1A 55 48 FC | 	wrbyte	#42, local08
28750     04 4E 85 F1 | 	sub	fp, #4
28754     A7 3C 02 FB | 	rdlong	local12, fp
28758     01 3C 06 F1 | 	add	local12, #1
2875c     A7 3C 62 FC | 	wrlong	local12, fp
28760     1C 4F 85 F1 | 	sub	fp, #284
28764     B4 FF 9F FD | 	jmp	#LR__3419
28768                 | LR__3420
28768                 | LR__3421
28768     20 4F 05 F1 | 	add	fp, #288
2876c     A7 28 02 FB | 	rdlong	local02, fp
28770     14 2B 02 F6 | 	mov	local03, local02
28774     01 2A 06 F1 | 	add	local03, #1
28778     A7 2A 62 FC | 	wrlong	local03, fp
2877c     20 4F 85 F1 | 	sub	fp, #288
28780     14 01 48 FC | 	wrbyte	#0, local02
28784                 | LR__3422
28784     04 4E 05 F1 | 	add	fp, #4
28788     A7 12 02 FB | 	rdlong	arg01, fp
2878c     04 4E 05 F1 | 	add	fp, #4
28790     A7 14 02 FB | 	rdlong	arg02, fp
28794     BC 4E 05 F1 | 	add	fp, #188
28798     A7 16 02 FB | 	rdlong	arg03, fp
2879c     C4 4E 85 F1 | 	sub	fp, #196
287a0     C4 EE BF FD | 	call	#__system___fmtstr
287a4                 | LR__3423
287a4     A7 F0 03 F6 | 	mov	ptra, fp
287a8     B2 00 A0 FD | 	call	#popregs_
287ac                 | __system___fmtfloat_ret
287ac     2D 00 64 FD | 	ret
287b0                 | 
287b0                 | __system__Left_S
287b0     04 4A 05 F6 | 	mov	COUNT_, #4
287b4     A8 00 A0 FD | 	call	#pushregs_
287b8     09 27 02 F6 | 	mov	local01, arg01
287bc     0A 29 02 F6 | 	mov	local02, arg02
287c0     01 28 56 F2 | 	cmps	local02, #1 wc
287c4     B1 01 00 CF 
287c8     4A FA 05 C6 |  if_b	mov	result1, ##@LR__5373
287cc     5C 00 90 CD |  if_b	jmp	#LR__3433
287d0     13 13 02 F6 | 	mov	arg01, local01
287d4     09 2B 02 F6 | 	mov	local03, arg01
287d8     97 06 48 FB | 	callpa	#(@LR__3431-@LR__3430)>>2,fcache_load_ptr_
287dc                 | LR__3430
287dc     15 FB C9 FA | 	rdbyte	result1, local03 wz
287e0     01 2A 06 51 |  if_ne	add	local03, #1
287e4     F4 FF 9F 5D |  if_ne	jmp	#LR__3430
287e8                 | LR__3431
287e8     09 2B 82 F1 | 	sub	local03, arg01
287ec     15 FB 01 F6 | 	mov	result1, local03
287f0     14 FB 59 F2 | 	cmps	result1, local02 wcz
287f4     13 FB 01 E6 |  if_be	mov	result1, local01
287f8     30 00 90 ED |  if_be	jmp	#LR__3433
287fc     14 13 02 F6 | 	mov	arg01, local02
28800     02 12 06 F1 | 	add	arg01, #2
28804     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
28808     FD 2C 0A F6 | 	mov	local04, result1 wz
2880c     18 00 90 AD |  if_e	jmp	#LR__3432
28810     16 13 02 F6 | 	mov	arg01, local04
28814     13 15 02 F6 | 	mov	arg02, local01
28818     14 17 02 F6 | 	mov	arg03, local02
2881c     34 DE BF FD | 	call	#__system____builtin_memmove
28820     16 29 02 F1 | 	add	local02, local04
28824     14 01 48 FC | 	wrbyte	#0, local02
28828                 | LR__3432
28828     16 FB 01 F6 | 	mov	result1, local04
2882c                 | LR__3433
2882c     A7 F0 03 F6 | 	mov	ptra, fp
28830     B2 00 A0 FD | 	call	#popregs_
28834                 | __system__Left_S_ret
28834     2D 00 64 FD | 	ret
28838                 | 
28838                 | __system__Right_S
28838     05 4A 05 F6 | 	mov	COUNT_, #5
2883c     A8 00 A0 FD | 	call	#pushregs_
28840     09 27 02 F6 | 	mov	local01, arg01
28844     0A 29 02 F6 | 	mov	local02, arg02
28848     01 28 56 F2 | 	cmps	local02, #1 wc
2884c     B1 01 00 CF 
28850     4B FA 05 C6 |  if_b	mov	result1, ##@LR__5374
28854     64 00 90 CD |  if_b	jmp	#LR__3443
28858     13 13 02 F6 | 	mov	arg01, local01
2885c     09 2B 02 F6 | 	mov	local03, arg01
28860     97 06 48 FB | 	callpa	#(@LR__3441-@LR__3440)>>2,fcache_load_ptr_
28864                 | LR__3440
28864     15 FB C9 FA | 	rdbyte	result1, local03 wz
28868     01 2A 06 51 |  if_ne	add	local03, #1
2886c     F4 FF 9F 5D |  if_ne	jmp	#LR__3440
28870                 | LR__3441
28870     09 2B 82 F1 | 	sub	local03, arg01
28874     15 FB 01 F6 | 	mov	result1, local03
28878     FD 2C 02 F6 | 	mov	local04, result1
2887c     14 2D 5A F2 | 	cmps	local04, local02 wcz
28880     13 FB 01 E6 |  if_be	mov	result1, local01
28884     34 00 90 ED |  if_be	jmp	#LR__3443
28888     14 13 02 F6 | 	mov	arg01, local02
2888c     02 12 06 F1 | 	add	arg01, #2
28890     40 20 B0 FD | 	call	#__system___gc_alloc_managed
28894     FD 2E 0A F6 | 	mov	local05, result1 wz
28898     1C 00 90 AD |  if_e	jmp	#LR__3442
2889c     14 2D 82 F1 | 	sub	local04, local02
288a0     13 2D 02 F1 | 	add	local04, local01
288a4     01 28 06 F1 | 	add	local02, #1
288a8     17 13 02 F6 | 	mov	arg01, local05
288ac     16 15 02 F6 | 	mov	arg02, local04
288b0     14 17 02 F6 | 	mov	arg03, local02
288b4     9C DD BF FD | 	call	#__system____builtin_memmove
288b8                 | LR__3442
288b8     17 FB 01 F6 | 	mov	result1, local05
288bc                 | LR__3443
288bc     A7 F0 03 F6 | 	mov	ptra, fp
288c0     B2 00 A0 FD | 	call	#popregs_
288c4                 | __system__Right_S_ret
288c4     2D 00 64 FD | 	ret
288c8                 | 
288c8                 | __system__Mid_S
288c8     05 4A 05 F6 | 	mov	COUNT_, #5
288cc     A8 00 A0 FD | 	call	#pushregs_
288d0     09 27 02 F6 | 	mov	local01, arg01
288d4     0A 29 02 F6 | 	mov	local02, arg02
288d8     01 16 56 F2 | 	cmps	arg03, #1 wc
288dc     B1 01 00 CF 
288e0     4C FA 05 C6 |  if_b	mov	result1, ##@LR__5375
288e4     80 00 90 CD |  if_b	jmp	#LR__3453
288e8     01 28 86 F1 | 	sub	local02, #1
288ec     00 28 56 F3 | 	fges	local02, #0 wc
288f0     13 13 02 F6 | 	mov	arg01, local01
288f4     09 2B 02 F6 | 	mov	local03, arg01
288f8     97 06 48 FB | 	callpa	#(@LR__3451-@LR__3450)>>2,fcache_load_ptr_
288fc                 | LR__3450
288fc     15 FB C9 FA | 	rdbyte	result1, local03 wz
28900     01 2A 06 51 |  if_ne	add	local03, #1
28904     F4 FF 9F 5D |  if_ne	jmp	#LR__3450
28908                 | LR__3451
28908     09 2B 82 F1 | 	sub	local03, arg01
2890c     15 FB 01 F6 | 	mov	result1, local03
28910     FD 14 02 F6 | 	mov	arg02, result1
28914     14 15 52 F2 | 	cmps	arg02, local02 wc
28918     B1 01 00 CF 
2891c     4D FA 05 C6 |  if_b	mov	result1, ##@LR__5376
28920     44 00 90 CD |  if_b	jmp	#LR__3453
28924     0A 2D 02 F6 | 	mov	local04, arg02
28928     14 2D 82 F1 | 	sub	local04, local02
2892c     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
28930     0B 2D 02 16 |  if_a	mov	local04, arg03
28934     16 13 02 F6 | 	mov	arg01, local04
28938     02 12 06 F1 | 	add	arg01, #2
2893c     94 1F B0 FD | 	call	#__system___gc_alloc_managed
28940     FD 2E 0A F6 | 	mov	local05, result1 wz
28944     1C 00 90 AD |  if_e	jmp	#LR__3452
28948     13 29 02 F1 | 	add	local02, local01
2894c     17 13 02 F6 | 	mov	arg01, local05
28950     14 15 02 F6 | 	mov	arg02, local02
28954     16 17 02 F6 | 	mov	arg03, local04
28958     F8 DC BF FD | 	call	#__system____builtin_memmove
2895c     17 2D 02 F1 | 	add	local04, local05
28960     16 01 48 FC | 	wrbyte	#0, local04
28964                 | LR__3452
28964     17 FB 01 F6 | 	mov	result1, local05
28968                 | LR__3453
28968     A7 F0 03 F6 | 	mov	ptra, fp
2896c     B2 00 A0 FD | 	call	#popregs_
28970                 | __system__Mid_S_ret
28970     2D 00 64 FD | 	ret
28974                 | 
28974                 | __system__Chr_S
28974     01 4A 05 F6 | 	mov	COUNT_, #1
28978     A8 00 A0 FD | 	call	#pushregs_
2897c     09 27 02 F6 | 	mov	local01, arg01
28980     03 12 06 F6 | 	mov	arg01, #3
28984     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
28988     00 FA 4D F2 | 	cmps	result1, #0 wz
2898c     FD 26 42 5C |  if_ne	wrbyte	local01, result1
28990     01 FA 05 51 |  if_ne	add	result1, #1
28994     FD 00 48 5C |  if_ne	wrbyte	#0, result1
28998     01 FA 85 51 |  if_ne	sub	result1, #1
2899c     A7 F0 03 F6 | 	mov	ptra, fp
289a0     B2 00 A0 FD | 	call	#popregs_
289a4                 | __system__Chr_S_ret
289a4     2D 00 64 FD | 	ret
289a8                 | 
289a8                 | __system__str_S
289a8     02 4A 05 F6 | 	mov	COUNT_, #2
289ac     A8 00 A0 FD | 	call	#pushregs_
289b0     09 27 02 F6 | 	mov	local01, arg01
289b4     10 12 06 F6 | 	mov	arg01, #16
289b8     18 1F B0 FD | 	call	#__system___gc_alloc_managed
289bc     FD 28 0A F6 | 	mov	local02, result1 wz
289c0     30 00 90 AD |  if_e	jmp	#LR__3460
289c4     F8 13 02 F6 | 	mov	arg01, ptra
289c8     08 F0 07 F1 | 	add	ptra, #8
289cc     09 29 62 FC | 	wrlong	local02, arg01
289d0     04 12 06 F1 | 	add	arg01, #4
289d4     09 01 68 FC | 	wrlong	#0, arg01
289d8     04 12 86 F1 | 	sub	arg01, #4
289dc     00 30 05 FF 
289e0     00 12 46 F5 | 	or	arg01, ##174063616
289e4     00 14 06 F6 | 	mov	arg02, #0
289e8     13 17 02 F6 | 	mov	arg03, local01
289ec     67 18 06 F6 | 	mov	arg04, #103
289f0     90 EE BF FD | 	call	#__system___fmtfloat
289f4                 | LR__3460
289f4     14 FB 01 F6 | 	mov	result1, local02
289f8     A7 F0 03 F6 | 	mov	ptra, fp
289fc     B2 00 A0 FD | 	call	#popregs_
28a00                 | __system__str_S_ret
28a00     2D 00 64 FD | 	ret
28a04                 | 
28a04                 | __system__Number_S
28a04     08 4A 05 F6 | 	mov	COUNT_, #8
28a08     A8 00 A0 FD | 	call	#pushregs_
28a0c     09 27 02 F6 | 	mov	local01, arg01
28a10     0A 29 0A F6 | 	mov	local02, arg02 wz
28a14     0B 2B 02 F6 | 	mov	local03, arg03
28a18     3C 00 90 5D |  if_ne	jmp	#LR__3472
28a1c     01 28 06 F6 | 	mov	local02, #1
28a20     15 2D 02 F6 | 	mov	local04, local03
28a24     01 2E 06 F6 | 	mov	local05, #1
28a28     97 16 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
28a2c                 | LR__3470
28a2c     00 30 06 F6 | 	mov	local06, #0
28a30     13 2D 1A F2 | 	cmp	local04, local01 wcz
28a34     01 30 66 E6 |  if_be	neg	local06, #1
28a38     16 2F 12 F2 | 	cmp	local05, local04 wc
28a3c     19 33 A2 F1 | 	subx	local07, local07
28a40     19 31 CA F7 | 	test	local06, local07 wz
28a44     15 2D 02 5D |  if_ne	qmul	local04, local03
28a48     16 2F 02 56 |  if_ne	mov	local05, local04
28a4c     01 28 06 51 |  if_ne	add	local02, #1
28a50     18 2C 62 5D |  if_ne	getqx	local04
28a54     D4 FF 9F 5D |  if_ne	jmp	#LR__3470
28a58                 | LR__3471
28a58                 | LR__3472
28a58     20 28 36 F3 | 	fle	local02, #32 wc
28a5c     14 13 02 F6 | 	mov	arg01, local02
28a60     02 12 06 F1 | 	add	arg01, #2
28a64     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
28a68     FD 30 02 F6 | 	mov	local06, result1
28a6c     14 33 02 F6 | 	mov	local07, local02
28a70     18 33 02 F1 | 	add	local07, local06
28a74     19 01 48 FC | 	wrbyte	#0, local07
28a78     97 1A 48 FB | 	callpa	#(@LR__3474-@LR__3473)>>2,fcache_load_ptr_
28a7c                 | LR__3473
28a7c     01 28 16 F2 | 	cmp	local02, #1 wc
28a80     2C 00 90 CD |  if_b	jmp	#LR__3475
28a84     15 27 12 FD | 	qdiv	local01, local03
28a88     01 28 86 F1 | 	sub	local02, #1
28a8c     14 33 02 F6 | 	mov	local07, local02
28a90     18 33 02 F1 | 	add	local07, local06
28a94     19 34 62 FD | 	getqy	local08
28a98     0A 34 16 F2 | 	cmp	local08, #10 wc
28a9c     30 34 06 C1 |  if_b	add	local08, #48
28aa0     37 34 06 31 |  if_ae	add	local08, #55
28aa4     19 35 42 FC | 	wrbyte	local08, local07
28aa8     18 26 62 FD | 	getqx	local01
28aac     CC FF 9F FD | 	jmp	#LR__3473
28ab0                 | LR__3474
28ab0                 | LR__3475
28ab0     18 FB 01 F6 | 	mov	result1, local06
28ab4     A7 F0 03 F6 | 	mov	ptra, fp
28ab8     B2 00 A0 FD | 	call	#popregs_
28abc                 | __system__Number_S_ret
28abc     2D 00 64 FD | 	ret
28ac0                 | 
28ac0                 | __system__LCase_S
28ac0     07 4A 05 F6 | 	mov	COUNT_, #7
28ac4     A8 00 A0 FD | 	call	#pushregs_
28ac8     09 27 02 F6 | 	mov	local01, arg01
28acc     09 29 02 F6 | 	mov	local02, arg01
28ad0     97 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
28ad4                 | LR__3480
28ad4     14 FB C9 FA | 	rdbyte	result1, local02 wz
28ad8     01 28 06 51 |  if_ne	add	local02, #1
28adc     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
28ae0                 | LR__3481
28ae0     09 29 82 F1 | 	sub	local02, arg01
28ae4     14 FB 01 F6 | 	mov	result1, local02
28ae8     FD 28 0A F6 | 	mov	local02, result1 wz
28aec     B1 01 00 AF 
28af0     4E FA 05 A6 |  if_e	mov	result1, ##@LR__5377
28af4     7C 00 90 AD |  if_e	jmp	#LR__3487
28af8     14 13 02 F6 | 	mov	arg01, local02
28afc     02 12 06 F1 | 	add	arg01, #2
28b00     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
28b04     FD 2A 0A F6 | 	mov	local03, result1 wz
28b08     64 00 90 AD |  if_e	jmp	#LR__3486
28b0c     01 2C 66 F6 | 	neg	local04, #1
28b10     97 26 48 FB | 	callpa	#(@LR__3485-@LR__3482)>>2,fcache_load_ptr_
28b14                 | LR__3482
28b14     01 2C 06 F1 | 	add	local04, #1
28b18     16 2F 02 F6 | 	mov	local05, local04
28b1c     13 2F 02 F1 | 	add	local05, local01
28b20     17 31 C2 FA | 	rdbyte	local06, local05
28b24     41 30 56 F2 | 	cmps	local06, #65 wc
28b28     18 00 90 CD |  if_b	jmp	#LR__3483
28b2c     5B 30 56 F2 | 	cmps	local06, #91 wc
28b30     16 33 02 C6 |  if_b	mov	local07, local04
28b34     15 33 02 C1 |  if_b	add	local07, local03
28b38     20 30 06 C1 |  if_b	add	local06, #32
28b3c     19 31 42 CC |  if_b	wrbyte	local06, local07
28b40     0C 00 90 CD |  if_b	jmp	#LR__3484
28b44                 | LR__3483
28b44     16 33 02 F6 | 	mov	local07, local04
28b48     15 33 02 F1 | 	add	local07, local03
28b4c     19 31 42 FC | 	wrbyte	local06, local07
28b50                 | LR__3484
28b50     14 31 02 F6 | 	mov	local06, local02
28b54     01 30 86 F1 | 	sub	local06, #1
28b58     18 2D 0A F2 | 	cmp	local04, local06 wz
28b5c     B4 FF 9F 5D |  if_ne	jmp	#LR__3482
28b60                 | LR__3485
28b60     15 29 02 F1 | 	add	local02, local03
28b64     14 01 48 FC | 	wrbyte	#0, local02
28b68     15 FB 01 F6 | 	mov	result1, local03
28b6c     04 00 90 FD | 	jmp	#LR__3487
28b70                 | LR__3486
28b70     15 FB 01 F6 | 	mov	result1, local03
28b74                 | LR__3487
28b74     A7 F0 03 F6 | 	mov	ptra, fp
28b78     B2 00 A0 FD | 	call	#popregs_
28b7c                 | __system__LCase_S_ret
28b7c     2D 00 64 FD | 	ret
28b80                 | 
28b80                 | __system__LTrim_S
28b80     05 4A 05 F6 | 	mov	COUNT_, #5
28b84     A8 00 A0 FD | 	call	#pushregs_
28b88     09 27 02 F6 | 	mov	local01, arg01
28b8c     09 29 02 F6 | 	mov	local02, arg01
28b90     97 06 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
28b94                 | LR__3490
28b94     14 FB C9 FA | 	rdbyte	result1, local02 wz
28b98     01 28 06 51 |  if_ne	add	local02, #1
28b9c     F4 FF 9F 5D |  if_ne	jmp	#LR__3490
28ba0                 | LR__3491
28ba0     09 29 82 F1 | 	sub	local02, arg01
28ba4     14 FB 01 F6 | 	mov	result1, local02
28ba8     FD 28 0A F6 | 	mov	local02, result1 wz
28bac     B1 01 00 AF 
28bb0     4F FA 05 A6 |  if_e	mov	result1, ##@LR__5378
28bb4     7C 00 90 AD |  if_e	jmp	#LR__3496
28bb8     00 2A 06 F6 | 	mov	local03, #0
28bbc     14 2D 02 F6 | 	mov	local04, local02
28bc0                 | LR__3492
28bc0     16 2B 52 F2 | 	cmps	local03, local04 wc
28bc4     68 00 90 3D |  if_ae	jmp	#LR__3495
28bc8     15 17 02 F6 | 	mov	arg03, local03
28bcc     13 17 02 F1 | 	add	arg03, local01
28bd0     0B 17 C2 FA | 	rdbyte	arg03, arg03
28bd4     20 16 0E F2 | 	cmp	arg03, #32 wz
28bd8     4C 00 90 AD |  if_e	jmp	#LR__3494
28bdc     14 13 02 F6 | 	mov	arg01, local02
28be0     15 13 82 F1 | 	sub	arg01, local03
28be4     02 12 06 F1 | 	add	arg01, #2
28be8     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
28bec     FD 2E 0A F6 | 	mov	local05, result1 wz
28bf0     2C 00 90 AD |  if_e	jmp	#LR__3493
28bf4     15 15 02 F6 | 	mov	arg02, local03
28bf8     13 15 02 F1 | 	add	arg02, local01
28bfc     14 17 02 F6 | 	mov	arg03, local02
28c00     15 17 82 F1 | 	sub	arg03, local03
28c04     17 13 02 F6 | 	mov	arg01, local05
28c08     48 DA BF FD | 	call	#__system____builtin_memmove
28c0c     15 29 82 F1 | 	sub	local02, local03
28c10     17 29 02 F1 | 	add	local02, local05
28c14     14 01 48 FC | 	wrbyte	#0, local02
28c18     17 FB 01 F6 | 	mov	result1, local05
28c1c     14 00 90 FD | 	jmp	#LR__3496
28c20                 | LR__3493
28c20     17 FB 01 F6 | 	mov	result1, local05
28c24     0C 00 90 FD | 	jmp	#LR__3496
28c28                 | LR__3494
28c28     01 2A 06 F1 | 	add	local03, #1
28c2c     90 FF 9F FD | 	jmp	#LR__3492
28c30                 | LR__3495
28c30     13 FB 01 F6 | 	mov	result1, local01
28c34                 | LR__3496
28c34     A7 F0 03 F6 | 	mov	ptra, fp
28c38     B2 00 A0 FD | 	call	#popregs_
28c3c                 | __system__LTrim_S_ret
28c3c     2D 00 64 FD | 	ret
28c40                 | 
28c40                 | __system__RTrim_S
28c40     04 4A 05 F6 | 	mov	COUNT_, #4
28c44     A8 00 A0 FD | 	call	#pushregs_
28c48     09 27 02 F6 | 	mov	local01, arg01
28c4c     09 29 02 F6 | 	mov	local02, arg01
28c50     97 06 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
28c54                 | LR__3500
28c54     14 FB C9 FA | 	rdbyte	result1, local02 wz
28c58     01 28 06 51 |  if_ne	add	local02, #1
28c5c     F4 FF 9F 5D |  if_ne	jmp	#LR__3500
28c60                 | LR__3501
28c60     09 29 82 F1 | 	sub	local02, arg01
28c64     14 FB 01 F6 | 	mov	result1, local02
28c68     FD 28 0A F6 | 	mov	local02, result1 wz
28c6c     B1 01 00 AF 
28c70     50 FA 05 A6 |  if_e	mov	result1, ##@LR__5379
28c74     74 00 90 AD |  if_e	jmp	#LR__3505
28c78     14 2B 02 F6 | 	mov	local03, local02
28c7c     01 2A 86 F1 | 	sub	local03, #1
28c80                 | LR__3502
28c80     15 15 02 F6 | 	mov	arg02, local03
28c84     13 15 02 F1 | 	add	arg02, local01
28c88     0A 29 C2 FA | 	rdbyte	local02, arg02
28c8c     20 28 0E F2 | 	cmp	local02, #32 wz
28c90     44 00 90 AD |  if_e	jmp	#LR__3504
28c94     15 13 02 F6 | 	mov	arg01, local03
28c98     02 12 06 F1 | 	add	arg01, #2
28c9c     34 1C B0 FD | 	call	#__system___gc_alloc_managed
28ca0     FD 2C 0A F6 | 	mov	local04, result1 wz
28ca4     28 00 90 AD |  if_e	jmp	#LR__3503
28ca8     15 17 02 F6 | 	mov	arg03, local03
28cac     01 16 06 F1 | 	add	arg03, #1
28cb0     16 13 02 F6 | 	mov	arg01, local04
28cb4     13 15 02 F6 | 	mov	arg02, local01
28cb8     98 D9 BF FD | 	call	#__system____builtin_memmove
28cbc     01 2A 06 F1 | 	add	local03, #1
28cc0     16 2B 02 F1 | 	add	local03, local04
28cc4     15 01 48 FC | 	wrbyte	#0, local03
28cc8     16 FB 01 F6 | 	mov	result1, local04
28ccc     1C 00 90 FD | 	jmp	#LR__3505
28cd0                 | LR__3503
28cd0     16 FB 01 F6 | 	mov	result1, local04
28cd4     14 00 90 FD | 	jmp	#LR__3505
28cd8                 | LR__3504
28cd8     01 2A 86 F1 | 	sub	local03, #1
28cdc     00 2A 56 F2 | 	cmps	local03, #0 wc
28ce0     9C FF 9F 3D |  if_ae	jmp	#LR__3502
28ce4     B1 01 00 FF 
28ce8     51 FA 05 F6 | 	mov	result1, ##@LR__5380
28cec                 | LR__3505
28cec     A7 F0 03 F6 | 	mov	ptra, fp
28cf0     B2 00 A0 FD | 	call	#popregs_
28cf4                 | __system__RTrim_S_ret
28cf4     2D 00 64 FD | 	ret
28cf8                 | 
28cf8                 | __system__Instr
28cf8     07 4A 05 F6 | 	mov	COUNT_, #7
28cfc     A8 00 A0 FD | 	call	#pushregs_
28d00     09 27 02 F6 | 	mov	local01, arg01
28d04     0A 29 02 F6 | 	mov	local02, arg02
28d08     0B 2B 02 F6 | 	mov	local03, arg03
28d0c     15 13 02 F6 | 	mov	arg01, local03
28d10     09 2D 02 F6 | 	mov	local04, arg01
28d14     97 06 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
28d18                 | LR__3510
28d18     16 FB C9 FA | 	rdbyte	result1, local04 wz
28d1c     01 2C 06 51 |  if_ne	add	local04, #1
28d20     F4 FF 9F 5D |  if_ne	jmp	#LR__3510
28d24                 | LR__3511
28d24     09 2D 82 F1 | 	sub	local04, arg01
28d28     16 2F 02 F6 | 	mov	local05, local04
28d2c     14 13 02 F6 | 	mov	arg01, local02
28d30     09 2D 02 F6 | 	mov	local04, arg01
28d34     97 06 48 FB | 	callpa	#(@LR__3513-@LR__3512)>>2,fcache_load_ptr_
28d38                 | LR__3512
28d38     16 FB C9 FA | 	rdbyte	result1, local04 wz
28d3c     01 2C 06 51 |  if_ne	add	local04, #1
28d40     F4 FF 9F 5D |  if_ne	jmp	#LR__3512
28d44                 | LR__3513
28d44     09 2D 82 F1 | 	sub	local04, arg01
28d48     16 FB 01 F6 | 	mov	result1, local04
28d4c     FD 18 0A F6 | 	mov	arg04, result1 wz
28d50     00 FA 05 A6 |  if_e	mov	result1, #0
28d54     98 00 90 AD |  if_e	jmp	#LR__3517
28d58     00 2E 0E F2 | 	cmp	local05, #0 wz
28d5c     00 FA 05 A6 |  if_e	mov	result1, #0
28d60     8C 00 90 AD |  if_e	jmp	#LR__3517
28d64     0C 27 5A F2 | 	cmps	local01, arg04 wcz
28d68     00 FA 05 16 |  if_a	mov	result1, #0
28d6c     80 00 90 1D |  if_a	jmp	#LR__3517
28d70     01 26 56 F2 | 	cmps	local01, #1 wc
28d74     01 26 06 C6 |  if_b	mov	local01, #1
28d78     15 31 C2 FA | 	rdbyte	local06, local03
28d7c     01 2E 0E F2 | 	cmp	local05, #1 wz
28d80     18 00 90 5D |  if_ne	jmp	#LR__3514
28d84     14 13 02 F6 | 	mov	arg01, local02
28d88     18 15 02 F6 | 	mov	arg02, local06
28d8c     13 17 02 F6 | 	mov	arg03, local01
28d90     00 18 06 F6 | 	mov	arg04, #0
28d94     14 37 B0 FD | 	call	#__system____ScanForChar
28d98     54 00 90 FD | 	jmp	#LR__3517
28d9c                 | LR__3514
28d9c     13 33 02 F6 | 	mov	local07, local01
28da0                 | LR__3515
28da0     14 13 02 F6 | 	mov	arg01, local02
28da4     18 15 02 F6 | 	mov	arg02, local06
28da8     19 17 02 F6 | 	mov	arg03, local07
28dac     00 18 06 F6 | 	mov	arg04, #0
28db0     F8 36 B0 FD | 	call	#__system____ScanForChar
28db4     FD 32 0A F6 | 	mov	local07, result1 wz
28db8     30 00 90 AD |  if_e	jmp	#LR__3516
28dbc     17 17 02 F6 | 	mov	arg03, local05
28dc0     14 13 02 F6 | 	mov	arg01, local02
28dc4     19 15 02 F6 | 	mov	arg02, local07
28dc8     FC FA BF FD | 	call	#__system__Mid_S
28dcc     FD 12 02 F6 | 	mov	arg01, result1
28dd0     15 15 02 F6 | 	mov	arg02, local03
28dd4     84 D9 BF FD | 	call	#__system___string_cmp
28dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
28ddc     19 FB 01 A6 |  if_e	mov	result1, local07
28de0     0C 00 90 AD |  if_e	jmp	#LR__3517
28de4     17 33 02 F1 | 	add	local07, local05
28de8     B4 FF 9F FD | 	jmp	#LR__3515
28dec                 | LR__3516
28dec     00 FA 05 F6 | 	mov	result1, #0
28df0                 | LR__3517
28df0     A7 F0 03 F6 | 	mov	ptra, fp
28df4     B2 00 A0 FD | 	call	#popregs_
28df8                 | __system__Instr_ret
28df8     2D 00 64 FD | 	ret
28dfc                 | 
28dfc                 | __system__InstrRev
28dfc     07 4A 05 F6 | 	mov	COUNT_, #7
28e00     A8 00 A0 FD | 	call	#pushregs_
28e04     09 27 02 F6 | 	mov	local01, arg01
28e08     0A 29 02 F6 | 	mov	local02, arg02
28e0c     0B 2B 02 F6 | 	mov	local03, arg03
28e10     15 13 02 F6 | 	mov	arg01, local03
28e14     09 2D 02 F6 | 	mov	local04, arg01
28e18     97 06 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
28e1c                 | LR__3520
28e1c     16 FB C9 FA | 	rdbyte	result1, local04 wz
28e20     01 2C 06 51 |  if_ne	add	local04, #1
28e24     F4 FF 9F 5D |  if_ne	jmp	#LR__3520
28e28                 | LR__3521
28e28     09 2D 82 F1 | 	sub	local04, arg01
28e2c     16 2F 02 F6 | 	mov	local05, local04
28e30     14 13 02 F6 | 	mov	arg01, local02
28e34     09 2D 02 F6 | 	mov	local04, arg01
28e38     97 06 48 FB | 	callpa	#(@LR__3523-@LR__3522)>>2,fcache_load_ptr_
28e3c                 | LR__3522
28e3c     16 FB C9 FA | 	rdbyte	result1, local04 wz
28e40     01 2C 06 51 |  if_ne	add	local04, #1
28e44     F4 FF 9F 5D |  if_ne	jmp	#LR__3522
28e48                 | LR__3523
28e48     09 2D 82 F1 | 	sub	local04, arg01
28e4c     16 FB 01 F6 | 	mov	result1, local04
28e50     FD 18 0A F6 | 	mov	arg04, result1 wz
28e54     00 FA 05 A6 |  if_e	mov	result1, #0
28e58     98 00 90 AD |  if_e	jmp	#LR__3527
28e5c     00 2E 0E F2 | 	cmp	local05, #0 wz
28e60     00 FA 05 A6 |  if_e	mov	result1, #0
28e64     8C 00 90 AD |  if_e	jmp	#LR__3527
28e68     0C 27 5A F2 | 	cmps	local01, arg04 wcz
28e6c     0C 27 02 16 |  if_a	mov	local01, arg04
28e70     01 26 56 F2 | 	cmps	local01, #1 wc
28e74     01 26 06 C6 |  if_b	mov	local01, #1
28e78     15 31 C2 FA | 	rdbyte	local06, local03
28e7c     01 2E 0E F2 | 	cmp	local05, #1 wz
28e80     18 00 90 5D |  if_ne	jmp	#LR__3524
28e84     14 13 02 F6 | 	mov	arg01, local02
28e88     18 15 02 F6 | 	mov	arg02, local06
28e8c     13 17 02 F6 | 	mov	arg03, local01
28e90     01 18 06 F6 | 	mov	arg04, #1
28e94     14 36 B0 FD | 	call	#__system____ScanForChar
28e98     58 00 90 FD | 	jmp	#LR__3527
28e9c                 | LR__3524
28e9c     17 33 02 F6 | 	mov	local07, local05
28ea0     01 32 86 F1 | 	sub	local07, #1
28ea4                 | LR__3525
28ea4     14 13 02 F6 | 	mov	arg01, local02
28ea8     18 15 02 F6 | 	mov	arg02, local06
28eac     19 17 02 F6 | 	mov	arg03, local07
28eb0     01 18 06 F6 | 	mov	arg04, #1
28eb4     F4 35 B0 FD | 	call	#__system____ScanForChar
28eb8     FD 32 0A F6 | 	mov	local07, result1 wz
28ebc     30 00 90 AD |  if_e	jmp	#LR__3526
28ec0     17 17 02 F6 | 	mov	arg03, local05
28ec4     14 13 02 F6 | 	mov	arg01, local02
28ec8     19 15 02 F6 | 	mov	arg02, local07
28ecc     F8 F9 BF FD | 	call	#__system__Mid_S
28ed0     FD 12 02 F6 | 	mov	arg01, result1
28ed4     15 15 02 F6 | 	mov	arg02, local03
28ed8     80 D8 BF FD | 	call	#__system___string_cmp
28edc     00 FA 0D F2 | 	cmp	result1, #0 wz
28ee0     19 FB 01 A6 |  if_e	mov	result1, local07
28ee4     0C 00 90 AD |  if_e	jmp	#LR__3527
28ee8     17 33 82 F1 | 	sub	local07, local05
28eec     B4 FF 9F FD | 	jmp	#LR__3525
28ef0                 | LR__3526
28ef0     00 FA 05 F6 | 	mov	result1, #0
28ef4                 | LR__3527
28ef4     A7 F0 03 F6 | 	mov	ptra, fp
28ef8     B2 00 A0 FD | 	call	#popregs_
28efc                 | __system__InstrRev_ret
28efc     2D 00 64 FD | 	ret
28f00                 | 
28f00                 | __system___remove
28f00     06 4A 05 F6 | 	mov	COUNT_, #6
28f04     A8 00 A0 FD | 	call	#pushregs_
28f08     84 E7 05 F1 | 	add	ptr___system__dat__, #388
28f0c     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
28f10     09 15 02 F6 | 	mov	arg02, arg01
28f14     13 13 02 F6 | 	mov	arg01, local01
28f18     00 16 06 F6 | 	mov	arg03, #0
28f1c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
28f20     A8 DF BF FD | 	call	#__system____getvfsforfile
28f24     FD 28 0A F6 | 	mov	local02, result1 wz
28f28     10 00 90 AD |  if_e	jmp	#LR__3530
28f2c     20 28 06 F1 | 	add	local02, #32
28f30     14 13 0A FB | 	rdlong	arg01, local02 wz
28f34     20 28 86 F1 | 	sub	local02, #32
28f38     14 00 90 5D |  if_ne	jmp	#LR__3531
28f3c                 | LR__3530
28f3c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28f40     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
28f44     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28f48     01 FA 65 F6 | 	neg	result1, #1
28f4c     A8 00 90 FD | 	jmp	#LR__3534
28f50                 | LR__3531
28f50     40 28 06 F1 | 	add	local02, #64
28f54     14 2B 02 FB | 	rdlong	local03, local02
28f58     15 2D 02 F6 | 	mov	local04, local03
28f5c     40 28 86 F1 | 	sub	local02, #64
28f60     13 2C 46 F7 | 	zerox	local04, #19
28f64     14 2A 46 F0 | 	shr	local03, #20
28f68     02 2A 66 F0 | 	shl	local03, #2
28f6c     ED 2A 02 F1 | 	add	local03, __methods__
28f70     15 2B 02 FB | 	rdlong	local03, local03
28f74     13 13 02 F6 | 	mov	arg01, local01
28f78     F2 2E 02 F6 | 	mov	local05, objptr
28f7c     16 E5 01 F6 | 	mov	objptr, local04
28f80     2D 2A 62 FD | 	call	local03
28f84     17 E5 01 F6 | 	mov	objptr, local05
28f88     FD 30 02 F6 | 	mov	local06, result1
28f8c     FF FF 7F FF 
28f90     F2 31 0E F2 | 	cmp	local06, ##-14 wz
28f94     38 00 90 5D |  if_ne	jmp	#LR__3532
28f98     3C 28 06 F1 | 	add	local02, #60
28f9c     14 31 02 FB | 	rdlong	local06, local02
28fa0     18 2B 02 F6 | 	mov	local03, local06
28fa4     13 30 46 F7 | 	zerox	local06, #19
28fa8     14 2A 46 F0 | 	shr	local03, #20
28fac     02 2A 66 F0 | 	shl	local03, #2
28fb0     ED 2A 02 F1 | 	add	local03, __methods__
28fb4     15 2B 02 FB | 	rdlong	local03, local03
28fb8     13 13 02 F6 | 	mov	arg01, local01
28fbc     F2 2E 02 F6 | 	mov	local05, objptr
28fc0     18 E5 01 F6 | 	mov	objptr, local06
28fc4     2D 2A 62 FD | 	call	local03
28fc8     17 E5 01 F6 | 	mov	objptr, local05
28fcc     FD 30 02 F6 | 	mov	local06, result1
28fd0                 | LR__3532
28fd0     00 30 0E F2 | 	cmp	local06, #0 wz
28fd4     1C 00 90 AD |  if_e	jmp	#LR__3533
28fd8     18 13 6A F6 | 	neg	arg01, local06 wz
28fdc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28fe0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
28fe4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28fe8     01 FA 65 56 |  if_ne	neg	result1, #1
28fec     00 FA 05 A6 |  if_e	mov	result1, #0
28ff0     04 00 90 FD | 	jmp	#LR__3534
28ff4                 | LR__3533
28ff4     00 FA 05 F6 | 	mov	result1, #0
28ff8                 | LR__3534
28ff8     A7 F0 03 F6 | 	mov	ptra, fp
28ffc     B2 00 A0 FD | 	call	#popregs_
29000                 | __system___remove_ret
29000     2D 00 64 FD | 	ret
29004                 | 
29004                 | __system___mkdir
29004     05 4A 05 F6 | 	mov	COUNT_, #5
29008     A8 00 A0 FD | 	call	#pushregs_
2900c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
29010     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
29014     09 15 02 F6 | 	mov	arg02, arg01
29018     13 13 02 F6 | 	mov	arg01, local01
2901c     00 16 06 F6 | 	mov	arg03, #0
29020     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
29024     A4 DE BF FD | 	call	#__system____getvfsforfile
29028     FD 28 0A F6 | 	mov	local02, result1 wz
2902c     10 00 90 AD |  if_e	jmp	#LR__3540
29030     20 28 06 F1 | 	add	local02, #32
29034     14 15 0A FB | 	rdlong	arg02, local02 wz
29038     20 28 86 F1 | 	sub	local02, #32
2903c     14 00 90 5D |  if_ne	jmp	#LR__3541
29040                 | LR__3540
29040     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29044     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
29048     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2904c     01 FA 65 F6 | 	neg	result1, #1
29050     60 00 90 FD | 	jmp	#LR__3543
29054                 | LR__3541
29054     38 28 06 F1 | 	add	local02, #56
29058     14 2B 02 FB | 	rdlong	local03, local02
2905c     15 2D 02 F6 | 	mov	local04, local03
29060     13 2A 46 F7 | 	zerox	local03, #19
29064     14 2C 46 F0 | 	shr	local04, #20
29068     02 2C 66 F0 | 	shl	local04, #2
2906c     ED 2C 02 F1 | 	add	local04, __methods__
29070     16 2D 02 FB | 	rdlong	local04, local04
29074     13 13 02 F6 | 	mov	arg01, local01
29078     FF 15 06 F6 | 	mov	arg02, #511
2907c     F2 2E 02 F6 | 	mov	local05, objptr
29080     15 E5 01 F6 | 	mov	objptr, local03
29084     2D 2C 62 FD | 	call	local04
29088     17 E5 01 F6 | 	mov	objptr, local05
2908c     FD 12 0A F6 | 	mov	arg01, result1 wz
29090     1C 00 90 AD |  if_e	jmp	#LR__3542
29094     09 13 6A F6 | 	neg	arg01, arg01 wz
29098     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2909c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
290a0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
290a4     01 FA 65 56 |  if_ne	neg	result1, #1
290a8     00 FA 05 A6 |  if_e	mov	result1, #0
290ac     04 00 90 FD | 	jmp	#LR__3543
290b0                 | LR__3542
290b0     00 FA 05 F6 | 	mov	result1, #0
290b4                 | LR__3543
290b4     A7 F0 03 F6 | 	mov	ptra, fp
290b8     B2 00 A0 FD | 	call	#popregs_
290bc                 | __system___mkdir_ret
290bc     2D 00 64 FD | 	ret
290c0                 | 
290c0                 | __system___strerror
290c0     00 12 56 F2 | 	cmps	arg01, #0 wc
290c4     08 00 90 CD |  if_b	jmp	#LR__3550
290c8     1A 12 56 F2 | 	cmps	arg01, #26 wc
290cc     04 00 90 CD |  if_b	jmp	#LR__3551
290d0                 | LR__3550
290d0     19 12 06 F6 | 	mov	arg01, #25
290d4                 | LR__3551
290d4     02 12 66 F0 | 	shl	arg01, #2
290d8     01 00 00 FF 
290dc     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
290e0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
290e4     09 FB 01 FB | 	rdlong	result1, arg01
290e8     01 00 00 FF 
290ec     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
290f0                 | __system___strerror_ret
290f0     2D 00 64 FD | 	ret
290f4                 | 
290f4                 | __system___int64_shl
290f4     20 16 CE F7 | 	test	arg03, #32 wz
290f8     09 15 02 56 |  if_ne	mov	arg02, arg01
290fc     00 12 06 56 |  if_ne	mov	arg01, #0
29100     1F 16 CE F7 | 	test	arg03, #31 wz
29104     18 00 90 AD |  if_e	jmp	#LR__3560
29108     0B 15 62 F0 | 	shl	arg02, arg03
2910c     09 FB 01 F6 | 	mov	result1, arg01
29110     0B FD 61 F6 | 	neg	result2, arg03
29114     FE FA 41 F0 | 	shr	result1, result2
29118     FD 14 42 F5 | 	or	arg02, result1
2911c     0B 13 62 F0 | 	shl	arg01, arg03
29120                 | LR__3560
29120     0A FD 01 F6 | 	mov	result2, arg02
29124     09 FB 01 F6 | 	mov	result1, arg01
29128                 | __system___int64_shl_ret
29128     2D 00 64 FD | 	ret
2912c                 | 
2912c                 | __system___usepins
2912c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29130     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29134     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
29138     00 13 CA F7 | 	test	arg01, _var01 wz
2913c     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
29140     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
29144     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
29148     01 15 CA A7 |  if_e	test	arg02, _var02 wz
2914c     00 FA 05 56 |  if_ne	mov	result1, #0
29150     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
29154     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29158     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2915c     09 03 42 F5 | 	or	_var02, arg01
29160     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
29164     04 E6 05 F1 | 	add	ptr___system__dat__, #4
29168     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2916c     0A 03 42 F5 | 	or	_var02, arg02
29170     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
29174     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
29178     01 FA 65 F6 | 	neg	result1, #1
2917c                 | __system___usepins_ret
2917c     2D 00 64 FD | 	ret
29180                 | 
29180                 | __system___freepins
29180     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29184     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29188     09 01 22 F5 | 	andn	_var01, arg01
2918c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
29190     04 E6 05 F1 | 	add	ptr___system__dat__, #4
29194     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29198     0A 01 22 F5 | 	andn	_var01, arg02
2919c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
291a0     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
291a4                 | __system___freepins_ret
291a4     2D 00 64 FD | 	ret
291a8                 | 
291a8                 | __system___float_fromuns
291a8     09 17 0A F6 | 	mov	arg03, arg01 wz
291ac     0B FB 01 A6 |  if_e	mov	result1, arg03
291b0     24 00 90 AD |  if_e	jmp	#LR__3570
291b4     0B 15 92 F7 | 	encod	arg02, arg03 wc
291b8     01 14 06 C1 |  if_b	add	arg02, #1
291bc     01 14 86 F1 | 	sub	arg02, #1
291c0     1F 12 06 F6 | 	mov	arg01, #31
291c4     0A 13 82 F1 | 	sub	arg01, arg02
291c8     09 17 62 F0 | 	shl	arg03, arg01
291cc     02 16 46 F0 | 	shr	arg03, #2
291d0     00 12 06 F6 | 	mov	arg01, #0
291d4     4C 09 B0 FD | 	call	#__system___float_Pack
291d8                 | LR__3570
291d8                 | __system___float_fromuns_ret
291d8     2D 00 64 FD | 	ret
291dc                 | 
291dc                 | __system___float_add
291dc     0F 4A 05 F6 | 	mov	COUNT_, #15
291e0     A8 00 A0 FD | 	call	#pushregs_
291e4     09 27 02 F6 | 	mov	local01, arg01
291e8     0A 29 02 F6 | 	mov	local02, arg02
291ec     00 2A 06 F6 | 	mov	local03, #0
291f0     13 2D 02 F6 | 	mov	local04, local01
291f4     16 2F 02 F6 | 	mov	local05, local04
291f8     16 2E 46 F7 | 	zerox	local05, #22
291fc     16 31 02 F6 | 	mov	local06, local04
29200     01 30 66 F0 | 	shl	local06, #1
29204     18 30 46 F0 | 	shr	local06, #24
29208     1F 2C 46 F0 | 	shr	local04, #31
2920c     14 13 02 F6 | 	mov	arg01, local02
29210     09 FB 01 F6 | 	mov	result1, arg01
29214     FD 32 02 F6 | 	mov	local07, result1
29218     19 35 02 F6 | 	mov	local08, local07
2921c     16 34 46 F7 | 	zerox	local08, #22
29220     19 37 02 F6 | 	mov	local09, local07
29224     01 36 66 F0 | 	shl	local09, #1
29228     18 36 46 F0 | 	shr	local09, #24
2922c     1B 39 02 F6 | 	mov	local10, local09
29230     1F 32 46 F0 | 	shr	local07, #31
29234     00 3A 06 F6 | 	mov	local11, #0
29238     00 3C 06 F6 | 	mov	local12, #0
2923c     1C 31 12 F2 | 	cmp	local06, local10 wc
29240     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
29244     2C 00 90 1D |  if_a	jmp	#LR__3580
29248     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
2924c     24 00 90 3D |  if_ae	jmp	#LR__3580
29250     17 3F 02 F6 | 	mov	local13, local05
29254     1A 2F 02 F6 | 	mov	local05, local08
29258     1F 35 02 F6 | 	mov	local08, local13
2925c     18 3F 02 F6 | 	mov	local13, local06
29260     1C 31 02 F6 | 	mov	local06, local10
29264     1F 39 02 F6 | 	mov	local10, local13
29268     16 3F 02 F6 | 	mov	local13, local04
2926c     19 2D 02 F6 | 	mov	local04, local07
29270     1F 33 02 F6 | 	mov	local07, local13
29274                 | LR__3580
29274     FF 30 0E F2 | 	cmp	local06, #255 wz
29278     70 01 90 AD |  if_e	jmp	#LR__3595
2927c     00 30 0E F2 | 	cmp	local06, #0 wz
29280     AC 01 90 AD |  if_e	jmp	#LR__3597
29284     17 2E 26 F4 | 	bith	local05, #23
29288                 | LR__3581
29288     00 38 0E F2 | 	cmp	local10, #0 wz
2928c     F0 01 90 AD |  if_e	jmp	#LR__3601
29290     17 34 26 F4 | 	bith	local08, #23
29294                 | LR__3582
29294     7F 30 86 F1 | 	sub	local06, #127
29298     7F 38 86 F1 | 	sub	local10, #127
2929c     18 41 02 F6 | 	mov	local14, local06
292a0     1C 41 82 F1 | 	sub	local14, local10
292a4     97 14 48 FB | 	callpa	#(@LR__3584-@LR__3583)>>2,fcache_load_ptr_
292a8                 | LR__3583
292a8     20 40 56 F2 | 	cmps	local14, #32 wc
292ac     20 00 90 CD |  if_b	jmp	#LR__3585
292b0     1A 37 02 F6 | 	mov	local09, local08
292b4     00 3A 0E F2 | 	cmp	local11, #0 wz
292b8     6F 3A 62 FD | 	wrnz	local11
292bc     1D 37 42 F5 | 	or	local09, local11
292c0     1B 3B 02 F6 | 	mov	local11, local09
292c4     00 34 06 F6 | 	mov	local08, #0
292c8     20 40 86 F1 | 	sub	local14, #32
292cc     D8 FF 9F FD | 	jmp	#LR__3583
292d0                 | LR__3584
292d0                 | LR__3585
292d0     00 40 0E F2 | 	cmp	local14, #0 wz
292d4     38 00 90 AD |  if_e	jmp	#LR__3586
292d8     1A 3F 02 F6 | 	mov	local13, local08
292dc     20 38 06 F6 | 	mov	local10, #32
292e0     20 39 82 F1 | 	sub	local10, local14
292e4     1C 3F 62 F0 | 	shl	local13, local10
292e8     1D 39 02 F6 | 	mov	local10, local11
292ec     20 36 06 F6 | 	mov	local09, #32
292f0     20 37 82 F1 | 	sub	local09, local14
292f4     1B 39 6A F0 | 	shl	local10, local09 wz
292f8     20 3B 42 F0 | 	shr	local11, local14
292fc     20 35 42 F0 | 	shr	local08, local14
29300     1F 3B 42 F5 | 	or	local11, local13
29304     00 42 06 F6 | 	mov	local15, #0
29308     01 42 06 56 |  if_ne	mov	local15, #1
2930c     21 3B 42 F5 | 	or	local11, local15
29310                 | LR__3586
29310     16 43 02 F6 | 	mov	local15, local04
29314     19 43 62 F5 | 	xor	local15, local07
29318     01 42 CE F7 | 	test	local15, #1 wz
2931c     18 00 90 AD |  if_e	jmp	#LR__3587
29320     1A 35 22 F6 | 	not	local08, local08
29324     1D 3B 22 F6 | 	not	local11, local11
29328     01 3A 0E F1 | 	add	local11, #1 wz
2932c     00 42 06 F6 | 	mov	local15, #0
29330     01 42 06 A6 |  if_e	mov	local15, #1
29334     21 35 02 F1 | 	add	local08, local15
29338                 | LR__3587
29338     1D 3D 12 F1 | 	add	local12, local11 wc
2933c     1A 2F 22 F1 | 	addx	local05, local08
29340     00 2E 56 F2 | 	cmps	local05, #0 wc
29344     1C 00 90 3D |  if_ae	jmp	#LR__3588
29348     01 2C 66 F5 | 	xor	local04, #1
2934c     17 2F 22 F6 | 	not	local05, local05
29350     1E 3D 22 F6 | 	not	local12, local12
29354     01 3C 0E F1 | 	add	local12, #1 wz
29358     00 42 06 F6 | 	mov	local15, #0
2935c     01 42 06 A6 |  if_e	mov	local15, #1
29360     21 2F 02 F1 | 	add	local05, local15
29364                 | LR__3588
29364     00 80 00 FF 
29368     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
2936c     28 00 90 CD |  if_b	jmp	#LR__3589
29370     01 30 06 F1 | 	add	local06, #1
29374     1E 41 02 F6 | 	mov	local14, local12
29378     01 40 06 F5 | 	and	local14, #1
2937c     01 3C 46 F0 | 	shr	local12, #1
29380     17 43 02 F6 | 	mov	local15, local05
29384     1F 42 66 F0 | 	shl	local15, #31
29388     21 3D 42 F5 | 	or	local12, local15
2938c     20 3D 42 F5 | 	or	local12, local14
29390     01 2E 46 F0 | 	shr	local05, #1
29394     3C 00 90 FD | 	jmp	#LR__3594
29398                 | LR__3589
29398     00 40 00 FF 
2939c     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
293a0     30 00 90 3D |  if_ae	jmp	#LR__3593
293a4     00 2E 0E F2 | 	cmp	local05, #0 wz
293a8     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
293ac     08 2C 46 A5 |  if_e	or	local04, #8
293b0     01 2C 26 A5 |  if_e	andn	local04, #1
293b4     1C 00 90 AD |  if_e	jmp	#LR__3592
293b8                 | LR__3590
293b8     00 40 00 FF 
293bc     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
293c0     10 00 90 3D |  if_ae	jmp	#LR__3591
293c4     1E 3D 12 F1 | 	add	local12, local12 wc
293c8     17 2F 22 F1 | 	addx	local05, local05
293cc     01 30 86 F1 | 	sub	local06, #1
293d0     E4 FF 9F FD | 	jmp	#LR__3590
293d4                 | LR__3591
293d4                 | LR__3592
293d4                 | LR__3593
293d4                 | LR__3594
293d4     17 13 02 F6 | 	mov	arg01, local05
293d8     1E 15 02 F6 | 	mov	arg02, local12
293dc     18 17 02 F6 | 	mov	arg03, local06
293e0     16 19 02 F6 | 	mov	arg04, local04
293e4     08 35 B0 FD | 	call	#__system__pack_0675
293e8     DC 00 90 FD | 	jmp	#LR__3605
293ec                 | LR__3595
293ec     FF 38 0E F2 | 	cmp	local10, #255 wz
293f0     10 00 90 5D |  if_ne	jmp	#LR__3596
293f4     16 33 0A F2 | 	cmp	local07, local04 wz
293f8     00 F8 3F 5F 
293fc     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
29400     C4 00 90 5D |  if_ne	jmp	#LR__3605
29404                 | LR__3596
29404     00 2E 0E F2 | 	cmp	local05, #0 wz
29408     00 F8 3F 5F 
2940c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
29410     B4 00 90 5D |  if_ne	jmp	#LR__3605
29414     1E 15 02 F6 | 	mov	arg02, local12
29418     18 17 02 F6 | 	mov	arg03, local06
2941c     16 19 02 F6 | 	mov	arg04, local04
29420     02 18 46 F5 | 	or	arg04, #2
29424     17 13 02 F6 | 	mov	arg01, local05
29428     C4 34 B0 FD | 	call	#__system__pack_0675
2942c     98 00 90 FD | 	jmp	#LR__3605
29430                 | LR__3597
29430     00 2E 0E F2 | 	cmp	local05, #0 wz
29434     28 00 90 AD |  if_e	jmp	#LR__3600
29438     01 2E 66 F0 | 	shl	local05, #1
2943c     97 0E 48 FB | 	callpa	#(@LR__3599-@LR__3598)>>2,fcache_load_ptr_
29440                 | LR__3598
29440     00 40 00 FF 
29444     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29448     18 43 02 C6 |  if_b	mov	local15, local06
2944c     01 42 86 C1 |  if_b	sub	local15, #1
29450     21 31 02 C6 |  if_b	mov	local06, local15
29454     01 2E 66 C0 |  if_b	shl	local05, #1
29458     E4 FF 9F CD |  if_b	jmp	#LR__3598
2945c                 | LR__3599
2945c     28 FE 9F FD | 	jmp	#LR__3581
29460                 | LR__3600
29460     19 2D 02 F5 | 	and	local04, local07
29464     16 19 02 F6 | 	mov	arg04, local04
29468     08 18 46 F5 | 	or	arg04, #8
2946c     00 12 06 F6 | 	mov	arg01, #0
29470     00 14 06 F6 | 	mov	arg02, #0
29474     00 16 06 F6 | 	mov	arg03, #0
29478     74 34 B0 FD | 	call	#__system__pack_0675
2947c     48 00 90 FD | 	jmp	#LR__3605
29480                 | LR__3601
29480     00 34 0E F2 | 	cmp	local08, #0 wz
29484     28 00 90 AD |  if_e	jmp	#LR__3604
29488     01 34 66 F0 | 	shl	local08, #1
2948c     97 0E 48 FB | 	callpa	#(@LR__3603-@LR__3602)>>2,fcache_load_ptr_
29490                 | LR__3602
29490     00 40 00 FF 
29494     00 34 16 F2 | 	cmp	local08, ##8388608 wc
29498     1C 43 02 C6 |  if_b	mov	local15, local10
2949c     01 42 86 C1 |  if_b	sub	local15, #1
294a0     21 39 02 C6 |  if_b	mov	local10, local15
294a4     01 34 66 C0 |  if_b	shl	local08, #1
294a8     E4 FF 9F CD |  if_b	jmp	#LR__3602
294ac                 | LR__3603
294ac     E4 FD 9F FD | 	jmp	#LR__3582
294b0                 | LR__3604
294b0     7F 30 86 F1 | 	sub	local06, #127
294b4     17 13 02 F6 | 	mov	arg01, local05
294b8     1E 15 02 F6 | 	mov	arg02, local12
294bc     18 17 02 F6 | 	mov	arg03, local06
294c0     16 19 02 F6 | 	mov	arg04, local04
294c4     28 34 B0 FD | 	call	#__system__pack_0675
294c8                 | LR__3605
294c8     A7 F0 03 F6 | 	mov	ptra, fp
294cc     B2 00 A0 FD | 	call	#popregs_
294d0                 | __system___float_add_ret
294d0     2D 00 64 FD | 	ret
294d4                 | 
294d4                 | __system___float_sqrt
294d4     04 4A 05 F6 | 	mov	COUNT_, #4
294d8     A8 00 A0 FD | 	call	#pushregs_
294dc     09 27 02 F6 | 	mov	local01, arg01
294e0     09 FB 01 F6 | 	mov	result1, arg01
294e4     FD 28 02 F6 | 	mov	local02, result1
294e8     14 2B 02 F6 | 	mov	local03, local02
294ec     16 2A 46 F7 | 	zerox	local03, #22
294f0     14 2D 02 F6 | 	mov	local04, local02
294f4     01 2C 66 F0 | 	shl	local04, #1
294f8     18 2C 4E F0 | 	shr	local04, #24 wz
294fc     1F 28 46 F0 | 	shr	local02, #31
29500     70 00 90 AD |  if_e	jmp	#LR__3611
29504     17 2A 26 F4 | 	bith	local03, #23
29508                 | LR__3610
29508     00 28 0E F2 | 	cmp	local02, #0 wz
2950c     00 F8 3F 5F 
29510     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
29514     88 00 90 5D |  if_ne	jmp	#LR__3614
29518     FF 2C 0E F2 | 	cmp	local04, #255 wz
2951c     13 FB 01 A6 |  if_e	mov	result1, local01
29520     7C 00 90 AD |  if_e	jmp	#LR__3614
29524     7F 2C 86 F1 | 	sub	local04, #127
29528     01 2C CE F7 | 	test	local04, #1 wz
2952c     01 2A 66 50 |  if_ne	shl	local03, #1
29530     05 2A 66 F0 | 	shl	local03, #5
29534     15 01 38 FD | 	qsqrt	#0, local03
29538     01 2C 86 51 |  if_ne	sub	local04, #1
2953c     16 2D 52 F6 | 	abs	local04, local04 wc
29540     01 2C 46 F0 | 	shr	local04, #1
29544     16 17 82 F6 | 	negc	arg03, local04
29548     14 19 02 F6 | 	mov	arg04, local02
2954c     18 12 62 FD | 	getqx	arg01
29550     09 15 02 F6 | 	mov	arg02, arg01
29554     19 14 66 F0 | 	shl	arg02, #25
29558     07 12 46 F0 | 	shr	arg01, #7
2955c     00 80 00 FF 
29560     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
29564     01 16 06 31 |  if_ae	add	arg03, #1
29568     01 12 46 30 |  if_ae	shr	arg01, #1
2956c     80 33 B0 FD | 	call	#__system__pack_0675
29570     2C 00 90 FD | 	jmp	#LR__3614
29574                 | LR__3611
29574     00 2A 0E F2 | 	cmp	local03, #0 wz
29578     13 FB 01 A6 |  if_e	mov	result1, local01
2957c     20 00 90 AD |  if_e	jmp	#LR__3614
29580     01 2A 66 F0 | 	shl	local03, #1
29584     97 0A 48 FB | 	callpa	#(@LR__3613-@LR__3612)>>2,fcache_load_ptr_
29588                 | LR__3612
29588     00 40 00 FF 
2958c     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
29590     01 2C 86 C1 |  if_b	sub	local04, #1
29594     01 2A 66 C0 |  if_b	shl	local03, #1
29598     EC FF 9F CD |  if_b	jmp	#LR__3612
2959c                 | LR__3613
2959c     68 FF 9F FD | 	jmp	#LR__3610
295a0                 | LR__3614
295a0     A7 F0 03 F6 | 	mov	ptra, fp
295a4     B2 00 A0 FD | 	call	#popregs_
295a8                 | __system___float_sqrt_ret
295a8     2D 00 64 FD | 	ret
295ac                 | 
295ac                 | __system___float_mul
295ac     0B 4A 05 F6 | 	mov	COUNT_, #11
295b0     A8 00 A0 FD | 	call	#pushregs_
295b4     09 27 02 F6 | 	mov	local01, arg01
295b8     0A 29 02 F6 | 	mov	local02, arg02
295bc     13 2B 02 F6 | 	mov	local03, local01
295c0     15 2D 02 F6 | 	mov	local04, local03
295c4     16 2C 46 F7 | 	zerox	local04, #22
295c8     15 2F 02 F6 | 	mov	local05, local03
295cc     01 2E 66 F0 | 	shl	local05, #1
295d0     18 2E 46 F0 | 	shr	local05, #24
295d4     1F 2A 46 F0 | 	shr	local03, #31
295d8     14 FB 01 F6 | 	mov	result1, local02
295dc     FD 30 02 F6 | 	mov	local06, result1
295e0     18 33 02 F6 | 	mov	local07, local06
295e4     16 32 46 F7 | 	zerox	local07, #22
295e8     18 35 02 F6 | 	mov	local08, local06
295ec     01 34 66 F0 | 	shl	local08, #1
295f0     18 34 46 F0 | 	shr	local08, #24
295f4     1F 30 46 F0 | 	shr	local06, #31
295f8     18 2B 62 F5 | 	xor	local03, local06
295fc     FF 2E 0E F2 | 	cmp	local05, #255 wz
29600     90 00 90 AD |  if_e	jmp	#LR__3623
29604     FF 34 0E F2 | 	cmp	local08, #255 wz
29608     D8 00 90 AD |  if_e	jmp	#LR__3625
2960c     00 2E 0E F2 | 	cmp	local05, #0 wz
29610     0C 01 90 AD |  if_e	jmp	#LR__3626
29614     17 2C 26 F4 | 	bith	local04, #23
29618                 | LR__3620
29618     00 34 0E F2 | 	cmp	local08, #0 wz
2961c     44 01 90 AD |  if_e	jmp	#LR__3630
29620     17 32 26 F4 | 	bith	local07, #23
29624                 | LR__3621
29624     16 29 02 F6 | 	mov	local02, local04
29628     04 28 66 F0 | 	shl	local02, #4
2962c     19 31 02 F6 | 	mov	local06, local07
29630     05 30 66 F0 | 	shl	local06, #5
29634     18 29 02 FD | 	qmul	local02, local06
29638     1A 2F 02 F1 | 	add	local05, local08
2963c     FE 2E 86 F1 | 	sub	local05, #254
29640     17 37 02 F6 | 	mov	local09, local05
29644     04 2C 66 F0 | 	shl	local04, #4
29648     05 32 66 F0 | 	shl	local07, #5
2964c     18 38 62 FD | 	getqx	local10
29650     19 2D 02 FD | 	qmul	local04, local07
29654     19 3A 62 FD | 	getqy	local11
29658     00 80 00 FF 
2965c     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
29660     18 00 90 CD |  if_b	jmp	#LR__3622
29664     01 36 06 F1 | 	add	local09, #1
29668     01 38 46 F0 | 	shr	local10, #1
2966c     1D 35 02 F6 | 	mov	local08, local11
29670     1F 34 66 F0 | 	shl	local08, #31
29674     1A 39 42 F5 | 	or	local10, local08
29678     01 3A 46 F0 | 	shr	local11, #1
2967c                 | LR__3622
2967c     1D 13 02 F6 | 	mov	arg01, local11
29680     1C 15 02 F6 | 	mov	arg02, local10
29684     1B 17 02 F6 | 	mov	arg03, local09
29688     15 19 02 F6 | 	mov	arg04, local03
2968c     60 32 B0 FD | 	call	#__system__pack_0675
29690     10 01 90 FD | 	jmp	#LR__3634
29694                 | LR__3623
29694     00 2C 0E F2 | 	cmp	local04, #0 wz
29698     13 FB 01 56 |  if_ne	mov	result1, local01
2969c     04 01 90 5D |  if_ne	jmp	#LR__3634
296a0     FF 34 56 F2 | 	cmps	local08, #255 wc
296a4     00 34 0E C2 |  if_b	cmp	local08, #0 wz
296a8     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
296ac     18 00 90 4D |  if_c_and_nz	jmp	#LR__3624
296b0     00 F8 3F CF 
296b4     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
296b8     E8 00 90 CD |  if_b	jmp	#LR__3634
296bc     00 32 0E F2 | 	cmp	local07, #0 wz
296c0     14 FB 01 56 |  if_ne	mov	result1, local02
296c4     DC 00 90 5D |  if_ne	jmp	#LR__3634
296c8                 | LR__3624
296c8     02 2A 46 F5 | 	or	local03, #2
296cc     00 12 06 F6 | 	mov	arg01, #0
296d0     00 14 06 F6 | 	mov	arg02, #0
296d4     17 17 02 F6 | 	mov	arg03, local05
296d8     15 19 02 F6 | 	mov	arg04, local03
296dc     10 32 B0 FD | 	call	#__system__pack_0675
296e0     C0 00 90 FD | 	jmp	#LR__3634
296e4                 | LR__3625
296e4     00 2E 0E F2 | 	cmp	local05, #0 wz
296e8     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
296ec     00 F8 3F AF 
296f0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
296f4     AC 00 90 AD |  if_e	jmp	#LR__3634
296f8     00 32 0E F2 | 	cmp	local07, #0 wz
296fc     14 FB 01 56 |  if_ne	mov	result1, local02
29700     A0 00 90 5D |  if_ne	jmp	#LR__3634
29704     1A 17 02 F6 | 	mov	arg03, local08
29708     15 19 02 F6 | 	mov	arg04, local03
2970c     02 18 46 F5 | 	or	arg04, #2
29710     00 12 06 F6 | 	mov	arg01, #0
29714     00 14 06 F6 | 	mov	arg02, #0
29718     D4 31 B0 FD | 	call	#__system__pack_0675
2971c     84 00 90 FD | 	jmp	#LR__3634
29720                 | LR__3626
29720     00 2C 0E F2 | 	cmp	local04, #0 wz
29724     20 00 90 AD |  if_e	jmp	#LR__3629
29728     01 2C 66 F0 | 	shl	local04, #1
2972c     97 0A 48 FB | 	callpa	#(@LR__3628-@LR__3627)>>2,fcache_load_ptr_
29730                 | LR__3627
29730     00 40 00 FF 
29734     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
29738     01 2E 86 C1 |  if_b	sub	local05, #1
2973c     01 2C 66 C0 |  if_b	shl	local04, #1
29740     EC FF 9F CD |  if_b	jmp	#LR__3627
29744                 | LR__3628
29744     D0 FE 9F FD | 	jmp	#LR__3620
29748                 | LR__3629
29748     08 2A 46 F5 | 	or	local03, #8
2974c     00 12 06 F6 | 	mov	arg01, #0
29750     00 14 06 F6 | 	mov	arg02, #0
29754     00 16 06 F6 | 	mov	arg03, #0
29758     15 19 02 F6 | 	mov	arg04, local03
2975c     90 31 B0 FD | 	call	#__system__pack_0675
29760     40 00 90 FD | 	jmp	#LR__3634
29764                 | LR__3630
29764     00 32 0E F2 | 	cmp	local07, #0 wz
29768     20 00 90 AD |  if_e	jmp	#LR__3633
2976c     01 32 66 F0 | 	shl	local07, #1
29770     97 0A 48 FB | 	callpa	#(@LR__3632-@LR__3631)>>2,fcache_load_ptr_
29774                 | LR__3631
29774     00 40 00 FF 
29778     00 32 16 F2 | 	cmp	local07, ##8388608 wc
2977c     01 34 86 C1 |  if_b	sub	local08, #1
29780     01 32 66 C0 |  if_b	shl	local07, #1
29784     EC FF 9F CD |  if_b	jmp	#LR__3631
29788                 | LR__3632
29788     98 FE 9F FD | 	jmp	#LR__3621
2978c                 | LR__3633
2978c     08 2A 46 F5 | 	or	local03, #8
29790     00 12 06 F6 | 	mov	arg01, #0
29794     00 14 06 F6 | 	mov	arg02, #0
29798     00 16 06 F6 | 	mov	arg03, #0
2979c     15 19 02 F6 | 	mov	arg04, local03
297a0     4C 31 B0 FD | 	call	#__system__pack_0675
297a4                 | LR__3634
297a4     A7 F0 03 F6 | 	mov	ptra, fp
297a8     B2 00 A0 FD | 	call	#popregs_
297ac                 | __system___float_mul_ret
297ac     2D 00 64 FD | 	ret
297b0                 | 
297b0                 | __system___float_div
297b0     0E 4A 05 F6 | 	mov	COUNT_, #14
297b4     A8 00 A0 FD | 	call	#pushregs_
297b8     09 2B 02 F6 | 	mov	local03, arg01
297bc     0A 2D 02 F6 | 	mov	local04, arg02
297c0     15 2F 02 F6 | 	mov	local05, local03
297c4     17 31 02 F6 | 	mov	local06, local05
297c8     16 30 46 F7 | 	zerox	local06, #22
297cc     17 33 02 F6 | 	mov	local07, local05
297d0     01 32 66 F0 | 	shl	local07, #1
297d4     18 32 46 F0 | 	shr	local07, #24
297d8     1F 2E 46 F0 | 	shr	local05, #31
297dc     16 FB 01 F6 | 	mov	result1, local04
297e0     FD 34 02 F6 | 	mov	local08, result1
297e4     1A 37 02 F6 | 	mov	local09, local08
297e8     16 36 46 F7 | 	zerox	local09, #22
297ec     1A 39 02 F6 | 	mov	local10, local08
297f0     01 38 66 F0 | 	shl	local10, #1
297f4     18 38 46 F0 | 	shr	local10, #24
297f8     1F 34 46 F0 | 	shr	local08, #31
297fc     1A 2F 62 F5 | 	xor	local05, local08
29800     FF 32 0E F2 | 	cmp	local07, #255 wz
29804     D4 00 90 AD |  if_e	jmp	#LR__3645
29808     FF 38 0E F2 | 	cmp	local10, #255 wz
2980c     04 01 90 AD |  if_e	jmp	#LR__3646
29810     00 32 0E F2 | 	cmp	local07, #0 wz
29814     24 01 90 AD |  if_e	jmp	#LR__3647
29818     17 30 26 F4 | 	bith	local06, #23
2981c                 | LR__3640
2981c     00 38 0E F2 | 	cmp	local10, #0 wz
29820     70 01 90 AD |  if_e	jmp	#LR__3651
29824     17 36 26 F4 | 	bith	local09, #23
29828                 | LR__3641
29828     1C 33 82 F1 | 	sub	local07, local10
2982c     19 3B 02 F6 | 	mov	local11, local07
29830     18 13 02 F6 | 	mov	arg01, local06
29834     02 12 46 F0 | 	shr	arg01, #2
29838     1E 30 66 F0 | 	shl	local06, #30
2983c     18 15 02 F6 | 	mov	arg02, local06
29840     1B 17 02 F6 | 	mov	arg03, local09
29844     28 12 62 FD | 	setq	arg01
29848     0B 15 12 FD | 	qdiv	arg02, arg03
2984c     00 3C 06 F6 | 	mov	local12, #0
29850     18 26 62 FD | 	getqx	local01
29854     19 FC 61 FD | 	getqy	result2
29858     FE 28 02 F6 | 	mov	local02, result2
2985c     13 3F 02 F6 | 	mov	local13, local01
29860     00 28 4E F2 | 	cmps	local02, #0 wz
29864     1F 41 02 F6 | 	mov	local14, local13
29868     19 40 66 F0 | 	shl	local14, #25
2986c     01 3C 06 56 |  if_ne	mov	local12, #1
29870     1E 41 42 F5 | 	or	local14, local12
29874     07 3E 46 F0 | 	shr	local13, #7
29878     00 80 00 FF 
2987c     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
29880     1C 00 90 CD |  if_b	jmp	#LR__3642
29884     01 3A 06 F1 | 	add	local11, #1
29888     01 40 46 F0 | 	shr	local14, #1
2988c     1F 3D 02 F6 | 	mov	local12, local13
29890     1F 3C 66 F0 | 	shl	local12, #31
29894     1E 41 42 F5 | 	or	local14, local12
29898     01 3E 46 F0 | 	shr	local13, #1
2989c     24 00 90 FD | 	jmp	#LR__3644
298a0                 | LR__3642
298a0     00 40 00 FF 
298a4     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
298a8     18 00 90 3D |  if_ae	jmp	#LR__3643
298ac     01 3A 86 F1 | 	sub	local11, #1
298b0     01 3E 66 F0 | 	shl	local13, #1
298b4     20 3D 02 F6 | 	mov	local12, local14
298b8     1F 3C 46 F0 | 	shr	local12, #31
298bc     1E 3F 42 F5 | 	or	local13, local12
298c0     01 40 66 F0 | 	shl	local14, #1
298c4                 | LR__3643
298c4                 | LR__3644
298c4     1F 13 02 F6 | 	mov	arg01, local13
298c8     20 15 02 F6 | 	mov	arg02, local14
298cc     1D 17 02 F6 | 	mov	arg03, local11
298d0     17 19 02 F6 | 	mov	arg04, local05
298d4     18 30 B0 FD | 	call	#__system__pack_0675
298d8     F8 00 90 FD | 	jmp	#LR__3655
298dc                 | LR__3645
298dc     00 30 0E F2 | 	cmp	local06, #0 wz
298e0     15 FB 01 56 |  if_ne	mov	result1, local03
298e4     EC 00 90 5D |  if_ne	jmp	#LR__3655
298e8     FF 38 0E F2 | 	cmp	local10, #255 wz
298ec     00 F8 3F AF 
298f0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
298f4     DC 00 90 AD |  if_e	jmp	#LR__3655
298f8     02 2E 46 F5 | 	or	local05, #2
298fc     00 12 06 F6 | 	mov	arg01, #0
29900     00 14 06 F6 | 	mov	arg02, #0
29904     19 17 02 F6 | 	mov	arg03, local07
29908     17 19 02 F6 | 	mov	arg04, local05
2990c     E0 2F B0 FD | 	call	#__system__pack_0675
29910     C0 00 90 FD | 	jmp	#LR__3655
29914                 | LR__3646
29914     00 36 0E F2 | 	cmp	local09, #0 wz
29918     16 FB 01 56 |  if_ne	mov	result1, local04
2991c     B4 00 90 5D |  if_ne	jmp	#LR__3655
29920     17 19 02 F6 | 	mov	arg04, local05
29924     08 18 46 F5 | 	or	arg04, #8
29928     00 12 06 F6 | 	mov	arg01, #0
2992c     00 14 06 F6 | 	mov	arg02, #0
29930     00 16 06 F6 | 	mov	arg03, #0
29934     B8 2F B0 FD | 	call	#__system__pack_0675
29938     98 00 90 FD | 	jmp	#LR__3655
2993c                 | LR__3647
2993c     00 30 0E F2 | 	cmp	local06, #0 wz
29940     20 00 90 AD |  if_e	jmp	#LR__3650
29944     01 30 66 F0 | 	shl	local06, #1
29948     97 0A 48 FB | 	callpa	#(@LR__3649-@LR__3648)>>2,fcache_load_ptr_
2994c                 | LR__3648
2994c     00 40 00 FF 
29950     00 30 16 F2 | 	cmp	local06, ##8388608 wc
29954     01 32 86 C1 |  if_b	sub	local07, #1
29958     01 30 66 C0 |  if_b	shl	local06, #1
2995c     EC FF 9F CD |  if_b	jmp	#LR__3648
29960                 | LR__3649
29960     B8 FE 9F FD | 	jmp	#LR__3640
29964                 | LR__3650
29964     00 38 0E F2 | 	cmp	local10, #0 wz
29968     00 36 0E A2 |  if_e	cmp	local09, #0 wz
2996c     00 F8 3F AF 
29970     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
29974     5C 00 90 AD |  if_e	jmp	#LR__3655
29978     17 19 02 F6 | 	mov	arg04, local05
2997c     08 18 46 F5 | 	or	arg04, #8
29980     00 12 06 F6 | 	mov	arg01, #0
29984     00 14 06 F6 | 	mov	arg02, #0
29988     00 16 06 F6 | 	mov	arg03, #0
2998c     60 2F B0 FD | 	call	#__system__pack_0675
29990     40 00 90 FD | 	jmp	#LR__3655
29994                 | LR__3651
29994     00 36 0E F2 | 	cmp	local09, #0 wz
29998     20 00 90 AD |  if_e	jmp	#LR__3654
2999c     01 36 66 F0 | 	shl	local09, #1
299a0     97 0A 48 FB | 	callpa	#(@LR__3653-@LR__3652)>>2,fcache_load_ptr_
299a4                 | LR__3652
299a4     00 40 00 FF 
299a8     00 36 16 F2 | 	cmp	local09, ##8388608 wc
299ac     01 38 86 C1 |  if_b	sub	local10, #1
299b0     01 36 66 C0 |  if_b	shl	local09, #1
299b4     EC FF 9F CD |  if_b	jmp	#LR__3652
299b8                 | LR__3653
299b8     6C FE 9F FD | 	jmp	#LR__3641
299bc                 | LR__3654
299bc     02 2E 46 F5 | 	or	local05, #2
299c0     00 12 06 F6 | 	mov	arg01, #0
299c4     00 14 06 F6 | 	mov	arg02, #0
299c8     00 16 06 F6 | 	mov	arg03, #0
299cc     17 19 02 F6 | 	mov	arg04, local05
299d0     1C 2F B0 FD | 	call	#__system__pack_0675
299d4                 | LR__3655
299d4     A7 F0 03 F6 | 	mov	ptra, fp
299d8     B2 00 A0 FD | 	call	#popregs_
299dc                 | __system___float_div_ret
299dc     2D 00 64 FD | 	ret
299e0                 | 
299e0                 | __system___float_cmp
299e0     00 C0 3F FF 
299e4     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
299e8     00 C0 3F CF 
299ec     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
299f0     0B FB 01 36 |  if_ae	mov	result1, arg03
299f4     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
299f8     00 C0 7F FF 
299fc     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
29a00     00 C0 7F CF 
29a04     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
29a08     0B FB 01 36 |  if_ae	mov	result1, arg03
29a0c     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
29a10     00 12 56 F2 | 	cmps	arg01, #0 wc
29a14     2C 00 90 3D |  if_ae	jmp	#LR__3660
29a18     00 14 56 F2 | 	cmps	arg02, #0 wc
29a1c     0A FB 01 C6 |  if_b	mov	result1, arg02
29a20     09 FB 81 C1 |  if_b	sub	result1, arg01
29a24     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
29a28     00 14 0E F2 | 	cmp	arg02, #0 wz
29a2c     00 00 40 AF 
29a30     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
29a34     00 FA 05 A6 |  if_e	mov	result1, #0
29a38     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
29a3c     01 FA 65 F6 | 	neg	result1, #1
29a40     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
29a44                 | LR__3660
29a44     00 14 56 F2 | 	cmps	arg02, #0 wc
29a48     1C 00 90 3D |  if_ae	jmp	#LR__3661
29a4c     00 12 0E F2 | 	cmp	arg01, #0 wz
29a50     00 00 40 AF 
29a54     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
29a58     00 FA 05 A6 |  if_e	mov	result1, #0
29a5c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
29a60     01 FA 05 F6 | 	mov	result1, #1
29a64     08 00 90 FD | 	jmp	#__system___float_cmp_ret
29a68                 | LR__3661
29a68     0A 13 82 F1 | 	sub	arg01, arg02
29a6c     09 FB 01 F6 | 	mov	result1, arg01
29a70                 | __system___float_cmp_ret
29a70     2D 00 64 FD | 	ret
29a74                 | 
29a74                 | __system___float_tointeger
29a74     02 4A 05 F6 | 	mov	COUNT_, #2
29a78     A8 00 A0 FD | 	call	#pushregs_
29a7c     50 00 B0 FD | 	call	#__system___float_Unpack
29a80     FF FF 7F FF 
29a84     FF FD 55 F2 | 	cmps	result2, ##-1 wc
29a88     34 00 90 CD |  if_b	jmp	#LR__3670
29a8c     1F FC 55 F2 | 	cmps	result2, #31 wc
29a90     2C 00 90 3D |  if_ae	jmp	#LR__3670
29a94     02 FE 65 F0 | 	shl	result3, #2
29a98     1E 26 06 F6 | 	mov	local01, #30
29a9c     FE 26 82 F1 | 	sub	local01, result2
29aa0     13 FF 41 F0 | 	shr	result3, local01
29aa4     FF 28 02 F6 | 	mov	local02, result3
29aa8     0A 29 02 F1 | 	add	local02, arg02
29aac     01 28 46 F0 | 	shr	local02, #1
29ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
29ab4     14 29 62 56 |  if_ne	neg	local02, local02
29ab8     14 FB 01 F6 | 	mov	result1, local02
29abc     04 00 90 FD | 	jmp	#LR__3671
29ac0                 | LR__3670
29ac0     00 FA 05 F6 | 	mov	result1, #0
29ac4                 | LR__3671
29ac4     A7 F0 03 F6 | 	mov	ptra, fp
29ac8     B2 00 A0 FD | 	call	#popregs_
29acc                 | __system___float_tointeger_ret
29acc     2D 00 64 FD | 	ret
29ad0                 | 
29ad0                 | __system___float_Unpack
29ad0     09 01 02 F6 | 	mov	_var01, arg01
29ad4     1F 00 46 F0 | 	shr	_var01, #31
29ad8     09 03 02 F6 | 	mov	_var02, arg01
29adc     01 02 66 F0 | 	shl	_var02, #1
29ae0     18 02 4E F0 | 	shr	_var02, #24 wz
29ae4     17 13 06 F4 | 	bitl	arg01, #279
29ae8     06 12 66 50 |  if_ne	shl	arg01, #6
29aec     1D 12 26 54 |  if_ne	bith	arg01, #29
29af0     1C 00 90 5D |  if_ne	jmp	#LR__3680
29af4     09 05 92 F7 | 	encod	_var03, arg01 wc
29af8     01 04 06 C1 |  if_b	add	_var03, #1
29afc     17 04 86 F1 | 	sub	_var03, #23
29b00     02 03 02 F6 | 	mov	_var02, _var03
29b04     07 FC 05 F6 | 	mov	result2, #7
29b08     02 FD 81 F1 | 	sub	result2, _var03
29b0c     FE 12 62 F0 | 	shl	arg01, result2
29b10                 | LR__3680
29b10     7F 02 86 F1 | 	sub	_var02, #127
29b14     09 FF 01 F6 | 	mov	result3, arg01
29b18     00 FB 01 F6 | 	mov	result1, _var01
29b1c     01 FD 01 F6 | 	mov	result2, _var02
29b20                 | __system___float_Unpack_ret
29b20     2D 00 64 FD | 	ret
29b24                 | 
29b24                 | __system___float_Pack
29b24     00 00 06 F6 | 	mov	_var01, #0
29b28     00 16 0E F2 | 	cmp	arg03, #0 wz
29b2c     8C 00 90 AD |  if_e	jmp	#LR__3691
29b30     0B 03 92 F7 | 	encod	_var02, arg03 wc
29b34     01 02 06 C1 |  if_b	add	_var02, #1
29b38     21 00 06 F6 | 	mov	_var01, #33
29b3c     01 01 82 F1 | 	sub	_var01, _var02
29b40     00 17 62 F0 | 	shl	arg03, _var01
29b44     03 02 06 F6 | 	mov	_var02, #3
29b48     00 03 82 F1 | 	sub	_var02, _var01
29b4c     01 15 02 F1 | 	add	arg02, _var02
29b50     0A 05 02 F6 | 	mov	_var03, arg02
29b54     00 17 06 F1 | 	add	arg03, #256
29b58     0B 03 02 F6 | 	mov	_var02, arg03
29b5c     FF 02 2E F5 | 	andn	_var02, #255 wz
29b60     01 04 06 A1 |  if_e	add	_var03, #1
29b64     7F 04 06 F1 | 	add	_var03, #127
29b68     FF FF 7F FF 
29b6c     E9 05 46 F3 | 	fges	_var03, ##-23
29b70     FF 04 66 F3 | 	fles	_var03, #255
29b74     01 04 56 F2 | 	cmps	_var03, #1 wc
29b78     1C 00 90 3D |  if_ae	jmp	#LR__3690
29b7c     01 16 46 F0 | 	shr	arg03, #1
29b80     1F 02 C6 F9 | 	decod	_var02, #31
29b84     0B 03 02 F1 | 	add	_var02, arg03
29b88     02 05 62 F6 | 	neg	_var03, _var03
29b8c     02 03 42 F0 | 	shr	_var02, _var03
29b90     01 17 02 F6 | 	mov	arg03, _var02
29b94     00 04 06 F6 | 	mov	_var03, #0
29b98                 | LR__3690
29b98     09 FB 01 F6 | 	mov	result1, arg01
29b9c     1F FA 65 F0 | 	shl	result1, #31
29ba0     02 03 02 F6 | 	mov	_var02, _var03
29ba4     17 02 66 F0 | 	shl	_var02, #23
29ba8     01 FB 41 F5 | 	or	result1, _var02
29bac     0B 07 02 F6 | 	mov	_var04, arg03
29bb0     09 06 46 F0 | 	shr	_var04, #9
29bb4     03 FB 41 F5 | 	or	result1, _var04
29bb8     04 00 90 FD | 	jmp	#__system___float_Pack_ret
29bbc                 | LR__3691
29bbc     00 FB 01 F6 | 	mov	result1, _var01
29bc0                 | __system___float_Pack_ret
29bc0     2D 00 64 FD | 	ret
29bc4                 | 
29bc4                 | __system___basic_print_float
29bc4     05 4A 05 F6 | 	mov	COUNT_, #5
29bc8     A8 00 A0 FD | 	call	#pushregs_
29bcc     09 27 02 F6 | 	mov	local01, arg01
29bd0     0A 29 02 F6 | 	mov	local02, arg02
29bd4     0B 2B 0A F6 | 	mov	local03, arg03 wz
29bd8     0C 2D 02 F6 | 	mov	local04, arg04
29bdc     14 00 90 5D |  if_ne	jmp	#LR__3700
29be0     23 2C 0E F2 | 	cmp	local04, #35 wz
29be4     80 02 10 AF 
29be8     00 2E 06 A6 |  if_e	mov	local05, ##537198592
29bec     1D 2E C6 59 |  if_ne	decod	local05, #29
29bf0     17 2B 02 F6 | 	mov	local03, local05
29bf4                 | LR__3700
29bf4     13 13 02 F6 | 	mov	arg01, local01
29bf8     D8 27 B0 FD | 	call	#__system___gettxfunc
29bfc     FD 2E 0A F6 | 	mov	local05, result1 wz
29c00     00 FA 05 A6 |  if_e	mov	result1, #0
29c04     17 13 02 56 |  if_ne	mov	arg01, local05
29c08     15 15 02 56 |  if_ne	mov	arg02, local03
29c0c     14 17 02 56 |  if_ne	mov	arg03, local02
29c10     16 19 02 56 |  if_ne	mov	arg04, local04
29c14     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
29c18     A7 F0 03 F6 | 	mov	ptra, fp
29c1c     B2 00 A0 FD | 	call	#popregs_
29c20                 | __system___basic_print_float_ret
29c20     2D 00 64 FD | 	ret
29c24                 | 
29c24                 | __system____builtin_atoi
29c24     07 4A 05 F6 | 	mov	COUNT_, #7
29c28     A8 00 A0 FD | 	call	#pushregs_
29c2c                 | __system____builtin_atoi_enter
29c2c     09 27 02 F6 | 	mov	local01, arg01
29c30     0A 29 02 F6 | 	mov	local02, arg02
29c34     00 2A 06 F6 | 	mov	local03, #0
29c38     00 2C 06 F6 | 	mov	local04, #0
29c3c     00 2E 06 F6 | 	mov	local05, #0
29c40     97 1C 48 FB | 	callpa	#(@LR__3712-@LR__3710)>>2,fcache_load_ptr_
29c44                 | LR__3710
29c44     13 31 C2 FA | 	rdbyte	local06, local01
29c48     20 30 0E F2 | 	cmp	local06, #32 wz
29c4c     01 26 06 A1 |  if_e	add	local01, #1
29c50     F0 FF 9F AD |  if_e	jmp	#LR__3710
29c54     13 33 C2 FA | 	rdbyte	local07, local01
29c58                 | LR__3711
29c58     2D 32 0E F2 | 	cmp	local07, #45 wz
29c5c     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
29c60     18 00 90 5D |  if_ne	jmp	#LR__3713
29c64     01 26 06 F1 | 	add	local01, #1
29c68     2D 32 0E F2 | 	cmp	local07, #45 wz
29c6c     01 30 06 A6 |  if_e	mov	local06, #1
29c70     18 2F C2 A2 |  if_e	subr	local05, local06
29c74     13 33 C2 FA | 	rdbyte	local07, local01
29c78     DC FF 9F FD | 	jmp	#LR__3711
29c7c                 | LR__3712
29c7c                 | LR__3713
29c7c     00 28 0E F2 | 	cmp	local02, #0 wz
29c80     1C 00 90 5D |  if_ne	jmp	#LR__3715
29c84     24 32 0E F2 | 	cmp	local07, #36 wz
29c88     10 28 06 A6 |  if_e	mov	local02, #16
29c8c     01 26 06 A1 |  if_e	add	local01, #1
29c90     0C 00 90 AD |  if_e	jmp	#LR__3714
29c94     25 32 0E F2 | 	cmp	local07, #37 wz
29c98     02 28 06 A6 |  if_e	mov	local02, #2
29c9c     01 26 06 A1 |  if_e	add	local01, #1
29ca0                 | LR__3714
29ca0                 | LR__3715
29ca0     97 48 48 FB | 	callpa	#(@LR__3723-@LR__3716)>>2,fcache_load_ptr_
29ca4                 | LR__3716
29ca4                 | LR__3717
29ca4     13 33 C2 FA | 	rdbyte	local07, local01
29ca8     5F 32 0E F2 | 	cmp	local07, #95 wz
29cac     01 26 06 F1 | 	add	local01, #1
29cb0     F0 FF 9F AD |  if_e	jmp	#LR__3717
29cb4     30 32 0E F2 | 	cmp	local07, #48 wz
29cb8     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
29cbc     00 2C 06 A6 |  if_e	mov	local04, #0
29cc0     60 00 90 AD |  if_e	jmp	#LR__3722
29cc4     31 32 56 F2 | 	cmps	local07, #49 wc
29cc8     18 00 90 CD |  if_b	jmp	#LR__3718
29ccc     3A 32 56 F2 | 	cmps	local07, #58 wc
29cd0     19 2D 02 C6 |  if_b	mov	local04, local07
29cd4     30 2C 86 C1 |  if_b	sub	local04, #48
29cd8     00 28 0E C2 |  if_b	cmp	local02, #0 wz
29cdc     0A 28 06 86 |  if_c_and_z	mov	local02, #10
29ce0     40 00 90 CD |  if_b	jmp	#LR__3721
29ce4                 | LR__3718
29ce4     0B 28 56 F2 | 	cmps	local02, #11 wc
29ce8     61 32 56 32 |  if_ae	cmps	local07, #97 wc
29cec     14 00 90 CD |  if_b	jmp	#LR__3719
29cf0     67 32 56 F2 | 	cmps	local07, #103 wc
29cf4     61 32 86 C1 |  if_b	sub	local07, #97
29cf8     0A 2C 06 C6 |  if_b	mov	local04, #10
29cfc     19 2D 02 C1 |  if_b	add	local04, local07
29d00     20 00 90 CD |  if_b	jmp	#LR__3720
29d04                 | LR__3719
29d04     0B 28 56 F2 | 	cmps	local02, #11 wc
29d08     41 32 56 32 |  if_ae	cmps	local07, #65 wc
29d0c     24 00 90 CD |  if_b	jmp	#LR__3724
29d10     47 32 56 F2 | 	cmps	local07, #71 wc
29d14     41 32 86 C1 |  if_b	sub	local07, #65
29d18     0A 2C 06 C6 |  if_b	mov	local04, #10
29d1c     19 2D 02 C1 |  if_b	add	local04, local07
29d20     10 00 90 3D |  if_ae	jmp	#LR__3724
29d24                 | LR__3720
29d24                 | LR__3721
29d24                 | LR__3722
29d24     15 29 02 FD | 	qmul	local02, local03
29d28     18 2A 62 FD | 	getqx	local03
29d2c     16 2B 02 F1 | 	add	local03, local04
29d30     70 FF 9F FD | 	jmp	#LR__3716
29d34                 | LR__3723
29d34                 | LR__3724
29d34     00 28 0E F2 | 	cmp	local02, #0 wz
29d38     64 00 90 5D |  if_ne	jmp	#LR__3730
29d3c     78 32 0E F2 | 	cmp	local07, #120 wz
29d40     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
29d44     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
29d48     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
29d4c     14 00 90 5D |  if_ne	jmp	#LR__3725
29d50     13 13 02 F6 | 	mov	arg01, local01
29d54     10 14 06 F6 | 	mov	arg02, #16
29d58     C8 FE BF FD | 	call	#__system____builtin_atoi
29d5c     FD 2A 02 F6 | 	mov	local03, result1
29d60     3C 00 90 FD | 	jmp	#LR__3729
29d64                 | LR__3725
29d64     62 32 0E F2 | 	cmp	local07, #98 wz
29d68     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
29d6c     14 00 90 5D |  if_ne	jmp	#LR__3726
29d70     13 13 02 F6 | 	mov	arg01, local01
29d74     02 14 06 F6 | 	mov	arg02, #2
29d78     A8 FE BF FD | 	call	#__system____builtin_atoi
29d7c     FD 2A 02 F6 | 	mov	local03, result1
29d80     1C 00 90 FD | 	jmp	#LR__3728
29d84                 | LR__3726
29d84     6F 32 0E F2 | 	cmp	local07, #111 wz
29d88     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
29d8c     10 00 90 5D |  if_ne	jmp	#LR__3727
29d90     13 13 02 F6 | 	mov	arg01, local01
29d94     08 14 06 F6 | 	mov	arg02, #8
29d98     88 FE BF FD | 	call	#__system____builtin_atoi
29d9c     FD 2A 02 F6 | 	mov	local03, result1
29da0                 | LR__3727
29da0                 | LR__3728
29da0                 | LR__3729
29da0                 | LR__3730
29da0     00 2E 0E F2 | 	cmp	local05, #0 wz
29da4     15 2B 62 56 |  if_ne	neg	local03, local03
29da8     15 FB 01 F6 | 	mov	result1, local03
29dac     A7 F0 03 F6 | 	mov	ptra, fp
29db0     B2 00 A0 FD | 	call	#popregs_
29db4                 | __system____builtin_atoi_ret
29db4     2D 00 64 FD | 	ret
29db8                 | 
29db8                 | __system____builtin_atof
29db8     07 4A 05 F6 | 	mov	COUNT_, #7
29dbc     A8 00 A0 FD | 	call	#pushregs_
29dc0     09 27 02 F6 | 	mov	local01, arg01
29dc4     00 28 06 F6 | 	mov	local02, #0
29dc8     00 2A 06 F6 | 	mov	local03, #0
29dcc     00 2C 06 F6 | 	mov	local04, #0
29dd0     00 2E 06 F6 | 	mov	local05, #0
29dd4     97 08 48 FB | 	callpa	#(@LR__3741-@LR__3740)>>2,fcache_load_ptr_
29dd8                 | LR__3740
29dd8     13 17 C2 FA | 	rdbyte	arg03, local01
29ddc     20 16 0E F2 | 	cmp	arg03, #32 wz
29de0     01 26 06 A1 |  if_e	add	local01, #1
29de4     F0 FF 9F AD |  if_e	jmp	#LR__3740
29de8                 | LR__3741
29de8     13 31 C2 FA | 	rdbyte	local06, local01
29dec                 | LR__3742
29dec     2B 30 0E F2 | 	cmp	local06, #43 wz
29df0     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
29df4     14 00 90 5D |  if_ne	jmp	#LR__3743
29df8     2D 30 0E F2 | 	cmp	local06, #45 wz
29dfc     1F 2C E6 A4 |  if_e	bitnot	local04, #31
29e00     01 26 06 F1 | 	add	local01, #1
29e04     13 31 C2 FA | 	rdbyte	local06, local01
29e08     E0 FF 9F FD | 	jmp	#LR__3742
29e0c                 | LR__3743
29e0c                 | LR__3744
29e0c     97 08 48 FB | 	callpa	#(@LR__3746-@LR__3745)>>2,fcache_load_ptr_
29e10                 | LR__3745
29e10     13 31 C2 FA | 	rdbyte	local06, local01
29e14     5F 30 0E F2 | 	cmp	local06, #95 wz
29e18     01 26 06 F1 | 	add	local01, #1
29e1c     F0 FF 9F AD |  if_e	jmp	#LR__3745
29e20                 | LR__3746
29e20     00 30 0E F2 | 	cmp	local06, #0 wz
29e24     5C 00 90 AD |  if_e	jmp	#LR__3748
29e28     30 30 56 F2 | 	cmps	local06, #48 wc
29e2c     44 00 90 CD |  if_b	jmp	#LR__3747
29e30     3A 30 56 F2 | 	cmps	local06, #58 wc
29e34     3C 00 90 3D |  if_ae	jmp	#LR__3747
29e38     14 13 02 F6 | 	mov	arg01, local02
29e3c     00 90 20 FF 
29e40     00 14 06 F6 | 	mov	arg02, ##1092616192
29e44     64 F7 BF FD | 	call	#__system___float_mul
29e48     FD 28 02 F6 | 	mov	local02, result1
29e4c     30 30 86 F1 | 	sub	local06, #48
29e50     18 13 02 F6 | 	mov	arg01, local06
29e54     50 F3 BF FD | 	call	#__system___float_fromuns
29e58     FD 14 02 F6 | 	mov	arg02, result1
29e5c     14 13 02 F6 | 	mov	arg01, local02
29e60     78 F3 BF FD | 	call	#__system___float_add
29e64     FD 28 02 F6 | 	mov	local02, result1
29e68     00 2E 0E F2 | 	cmp	local05, #0 wz
29e6c     01 2A 86 51 |  if_ne	sub	local03, #1
29e70     98 FF 9F FD | 	jmp	#LR__3744
29e74                 | LR__3747
29e74     2E 30 0E F2 | 	cmp	local06, #46 wz
29e78     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
29e7c     01 2E 06 A6 |  if_e	mov	local05, #1
29e80     88 FF 9F AD |  if_e	jmp	#LR__3744
29e84                 | LR__3748
29e84     45 30 0E F2 | 	cmp	local06, #69 wz
29e88     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
29e8c     18 00 90 5D |  if_ne	jmp	#LR__3749
29e90     13 13 02 F6 | 	mov	arg01, local01
29e94     00 14 06 F6 | 	mov	arg02, #0
29e98     88 FD BF FD | 	call	#__system____builtin_atoi
29e9c     15 FB 01 F1 | 	add	result1, local03
29ea0     FD 32 02 F6 | 	mov	local07, result1
29ea4     04 00 90 FD | 	jmp	#LR__3750
29ea8                 | LR__3749
29ea8     15 33 02 F6 | 	mov	local07, local03
29eac                 | LR__3750
29eac     19 17 02 F6 | 	mov	arg03, local07
29eb0     14 13 02 F6 | 	mov	arg01, local02
29eb4     00 90 20 FF 
29eb8     00 14 06 F6 | 	mov	arg02, ##1092616192
29ebc     F4 06 B0 FD | 	call	#__system___float_pow_n
29ec0     16 FB 61 F5 | 	xor	result1, local04
29ec4     A7 F0 03 F6 | 	mov	ptra, fp
29ec8     B2 00 A0 FD | 	call	#popregs_
29ecc                 | __system____builtin_atof_ret
29ecc     2D 00 64 FD | 	ret
29ed0                 | 
29ed0                 | __system____builtin_ilogb
29ed0     FC FB BF FD | 	call	#__system___float_Unpack
29ed4     00 FE 0D F2 | 	cmp	result3, #0 wz
29ed8     00 00 40 AF 
29edc     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
29ee0     24 00 90 AD |  if_e	jmp	#LR__3761
29ee4     80 FC 0D F2 | 	cmp	result2, #128 wz
29ee8     18 00 90 5D |  if_ne	jmp	#LR__3760
29eec     00 00 10 FF 
29ef0     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
29ef4     1E FA CD A9 |  if_e	bmask	result1, #30
29ef8     0C 00 90 AD |  if_e	jmp	#LR__3761
29efc     1F FA C5 F9 | 	decod	result1, #31
29f00     04 00 90 FD | 	jmp	#LR__3761
29f04                 | LR__3760
29f04     FE FA 01 F6 | 	mov	result1, result2
29f08                 | LR__3761
29f08                 | __system____builtin_ilogb_ret
29f08     2D 00 64 FD | 	ret
29f0c                 | 
29f0c                 | __system____builtin_sinf
29f0c     03 4A 05 F6 | 	mov	COUNT_, #3
29f10     A8 00 A0 FD | 	call	#pushregs_
29f14     09 27 02 F6 | 	mov	local01, arg01
29f18     87 64 20 FF 
29f1c     DB 15 06 F6 | 	mov	arg02, ##1086918619
29f20     8C F8 BF FD | 	call	#__system___float_div
29f24     FD 12 02 F6 | 	mov	arg01, result1
29f28     00 14 06 F6 | 	mov	arg02, #0
29f2c     44 FB BF FD | 	call	#__system___float_tointeger
29f30     FD 16 0A F6 | 	mov	arg03, result1 wz
29f34     44 00 90 AD |  if_e	jmp	#LR__3770
29f38     0B 13 52 F6 | 	abs	arg01, arg03 wc
29f3c     1F 28 C6 C9 |  if_b	decod	local02, #31
29f40     00 28 06 36 |  if_ae	mov	local02, #0
29f44     60 F2 BF FD | 	call	#__system___float_fromuns
29f48     14 FB 61 F5 | 	xor	result1, local02
29f4c     FD 12 02 F6 | 	mov	arg01, result1
29f50     1E 14 C6 F9 | 	decod	arg02, #30
29f54     54 F6 BF FD | 	call	#__system___float_mul
29f58     FD 12 02 F6 | 	mov	arg01, result1
29f5c     87 24 20 FF 
29f60     DB 15 06 F6 | 	mov	arg02, ##1078530011
29f64     44 F6 BF FD | 	call	#__system___float_mul
29f68     FD 14 02 F6 | 	mov	arg02, result1
29f6c     13 13 02 F6 | 	mov	arg01, local01
29f70     1F 14 E6 F4 | 	bitnot	arg02, #31
29f74     64 F2 BF FD | 	call	#__system___float_add
29f78     FD 26 02 F6 | 	mov	local01, result1
29f7c                 | LR__3770
29f7c     13 13 02 F6 | 	mov	arg01, local01
29f80     66 E6 1E FF 
29f84     CD 14 06 F6 | 	mov	arg02, ##1036831949
29f88     01 16 06 F6 | 	mov	arg03, #1
29f8c     50 FA BF FD | 	call	#__system___float_cmp
29f90     00 FA 55 F2 | 	cmps	result1, #0 wc
29f94     5C 00 90 3D |  if_ae	jmp	#LR__3771
29f98     13 13 02 F6 | 	mov	arg01, local01
29f9c     66 E6 5E FF 
29fa0     CD 14 06 F6 | 	mov	arg02, ##-1110651699
29fa4     01 16 66 F6 | 	neg	arg03, #1
29fa8     34 FA BF FD | 	call	#__system___float_cmp
29fac     01 FA 55 F2 | 	cmps	result1, #1 wc
29fb0     40 00 90 CD |  if_b	jmp	#LR__3771
29fb4     13 13 02 F6 | 	mov	arg01, local01
29fb8     13 15 02 F6 | 	mov	arg02, local01
29fbc     EC F5 BF FD | 	call	#__system___float_mul
29fc0     FD 12 02 F6 | 	mov	arg01, result1
29fc4     13 15 02 F6 | 	mov	arg02, local01
29fc8     E0 F5 BF FD | 	call	#__system___float_mul
29fcc     FD 12 02 F6 | 	mov	arg01, result1
29fd0     00 60 20 FF 
29fd4     00 14 06 F6 | 	mov	arg02, ##1086324736
29fd8     D4 F7 BF FD | 	call	#__system___float_div
29fdc     FD 14 02 F6 | 	mov	arg02, result1
29fe0     13 13 02 F6 | 	mov	arg01, local01
29fe4     1F 14 E6 F4 | 	bitnot	arg02, #31
29fe8     F0 F1 BF FD | 	call	#__system___float_add
29fec     FD 2A 02 F6 | 	mov	local03, result1
29ff0     54 00 90 FD | 	jmp	#LR__3772
29ff4                 | LR__3771
29ff4     13 13 02 F6 | 	mov	arg01, local01
29ff8     7C 91 26 FF 
29ffc     83 15 06 F6 | 	mov	arg02, ##1294137731
2a000     A8 F5 BF FD | 	call	#__system___float_mul
2a004     FD 12 02 F6 | 	mov	arg01, result1
2a008     00 14 06 F6 | 	mov	arg02, #0
2a00c     64 FA BF FD | 	call	#__system___float_tointeger
2a010     02 FA 65 F0 | 	shl	result1, #2
2a014     00 00 A0 FF 
2a018     FD 00 48 FD | 	qrotate	##1073741824, result1
2a01c     19 12 62 FD | 	getqy	arg01
2a020     09 13 52 F6 | 	abs	arg01, arg01 wc
2a024     1F 28 C6 C9 |  if_b	decod	local02, #31
2a028     00 28 06 36 |  if_ae	mov	local02, #0
2a02c     78 F1 BF FD | 	call	#__system___float_fromuns
2a030     14 FB 61 F5 | 	xor	result1, local02
2a034     FD 12 02 F6 | 	mov	arg01, result1
2a038     00 40 27 FF 
2a03c     00 14 06 F6 | 	mov	arg02, ##1317011456
2a040     6C F7 BF FD | 	call	#__system___float_div
2a044     FD 2A 02 F6 | 	mov	local03, result1
2a048                 | LR__3772
2a048     15 FB 01 F6 | 	mov	result1, local03
2a04c     A7 F0 03 F6 | 	mov	ptra, fp
2a050     B2 00 A0 FD | 	call	#popregs_
2a054                 | __system____builtin_sinf_ret
2a054     2D 00 64 FD | 	ret
2a058                 | 
2a058                 | __system____builtin_tanf
2a058     02 4A 05 F6 | 	mov	COUNT_, #2
2a05c     A8 00 A0 FD | 	call	#pushregs_
2a060     09 27 02 F6 | 	mov	local01, arg01
2a064     A4 FE BF FD | 	call	#__system____builtin_sinf
2a068     FD 28 02 F6 | 	mov	local02, result1
2a06c     13 15 02 F6 | 	mov	arg02, local01
2a070     87 E4 1F FF 
2a074     DB 13 06 F6 | 	mov	arg01, ##1070141403
2a078     1F 14 E6 F4 | 	bitnot	arg02, #31
2a07c     5C F1 BF FD | 	call	#__system___float_add
2a080     FD 12 02 F6 | 	mov	arg01, result1
2a084     84 FE BF FD | 	call	#__system____builtin_sinf
2a088     FD 14 02 F6 | 	mov	arg02, result1
2a08c     14 13 02 F6 | 	mov	arg01, local02
2a090     1C F7 BF FD | 	call	#__system___float_div
2a094     A7 F0 03 F6 | 	mov	ptra, fp
2a098     B2 00 A0 FD | 	call	#popregs_
2a09c                 | __system____builtin_tanf_ret
2a09c     2D 00 64 FD | 	ret
2a0a0                 | 
2a0a0                 | __system____builtin_asinf
2a0a0     01 4A 05 F6 | 	mov	COUNT_, #1
2a0a4     A8 00 A0 FD | 	call	#pushregs_
2a0a8     09 27 02 F6 | 	mov	local01, arg01
2a0ac     13 15 02 F6 | 	mov	arg02, local01
2a0b0     13 13 02 F6 | 	mov	arg01, local01
2a0b4     F4 F4 BF FD | 	call	#__system___float_mul
2a0b8     FD 14 02 F6 | 	mov	arg02, result1
2a0bc     00 C0 1F FF 
2a0c0     00 12 06 F6 | 	mov	arg01, ##1065353216
2a0c4     1F 14 E6 F4 | 	bitnot	arg02, #31
2a0c8     10 F1 BF FD | 	call	#__system___float_add
2a0cc     FD 12 02 F6 | 	mov	arg01, result1
2a0d0     00 F4 BF FD | 	call	#__system___float_sqrt
2a0d4     FD 14 02 F6 | 	mov	arg02, result1
2a0d8     13 13 02 F6 | 	mov	arg01, local01
2a0dc     58 00 B0 FD | 	call	#__system____builtin_atan2f
2a0e0     A7 F0 03 F6 | 	mov	ptra, fp
2a0e4     B2 00 A0 FD | 	call	#popregs_
2a0e8                 | __system____builtin_asinf_ret
2a0e8     2D 00 64 FD | 	ret
2a0ec                 | 
2a0ec                 | __system____builtin_acosf
2a0ec     01 4A 05 F6 | 	mov	COUNT_, #1
2a0f0     A8 00 A0 FD | 	call	#pushregs_
2a0f4     09 27 02 F6 | 	mov	local01, arg01
2a0f8     13 15 02 F6 | 	mov	arg02, local01
2a0fc     13 13 02 F6 | 	mov	arg01, local01
2a100     A8 F4 BF FD | 	call	#__system___float_mul
2a104     FD 14 02 F6 | 	mov	arg02, result1
2a108     00 C0 1F FF 
2a10c     00 12 06 F6 | 	mov	arg01, ##1065353216
2a110     1F 14 E6 F4 | 	bitnot	arg02, #31
2a114     C4 F0 BF FD | 	call	#__system___float_add
2a118     FD 12 02 F6 | 	mov	arg01, result1
2a11c     B4 F3 BF FD | 	call	#__system___float_sqrt
2a120     FD 12 02 F6 | 	mov	arg01, result1
2a124     13 15 02 F6 | 	mov	arg02, local01
2a128     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2a12c     A7 F0 03 F6 | 	mov	ptra, fp
2a130     B2 00 A0 FD | 	call	#popregs_
2a134                 | __system____builtin_acosf_ret
2a134     2D 00 64 FD | 	ret
2a138                 | 
2a138                 | __system____builtin_atan2f
2a138     04 4A 05 F6 | 	mov	COUNT_, #4
2a13c     A8 00 A0 FD | 	call	#pushregs_
2a140     09 27 02 F6 | 	mov	local01, arg01
2a144     0A 29 02 F6 | 	mov	local02, arg02
2a148     13 13 02 F6 | 	mov	arg01, local01
2a14c     00 14 06 F6 | 	mov	arg02, #0
2a150     01 16 06 F6 | 	mov	arg03, #1
2a154     88 F8 BF FD | 	call	#__system___float_cmp
2a158     00 FA 0D F2 | 	cmp	result1, #0 wz
2a15c     28 00 90 5D |  if_ne	jmp	#LR__3780
2a160     14 13 02 F6 | 	mov	arg01, local02
2a164     00 14 06 F6 | 	mov	arg02, #0
2a168     01 16 06 F6 | 	mov	arg03, #1
2a16c     70 F8 BF FD | 	call	#__system___float_cmp
2a170     00 FA 55 F2 | 	cmps	result1, #0 wc
2a174     87 24 60 CF 
2a178     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
2a17c     DC 00 90 CD |  if_b	jmp	#LR__3781
2a180     00 FA 05 F6 | 	mov	result1, #0
2a184     D4 00 90 FD | 	jmp	#LR__3781
2a188                 | LR__3780
2a188     14 13 02 F6 | 	mov	arg01, local02
2a18c     14 15 02 F6 | 	mov	arg02, local02
2a190     18 F4 BF FD | 	call	#__system___float_mul
2a194     FD 2A 02 F6 | 	mov	local03, result1
2a198     13 13 02 F6 | 	mov	arg01, local01
2a19c     13 15 02 F6 | 	mov	arg02, local01
2a1a0     08 F4 BF FD | 	call	#__system___float_mul
2a1a4     FD 14 02 F6 | 	mov	arg02, result1
2a1a8     15 13 02 F6 | 	mov	arg01, local03
2a1ac     2C F0 BF FD | 	call	#__system___float_add
2a1b0     FD 12 02 F6 | 	mov	arg01, result1
2a1b4     1C F3 BF FD | 	call	#__system___float_sqrt
2a1b8     FD 2A 02 F6 | 	mov	local03, result1
2a1bc     14 13 02 F6 | 	mov	arg01, local02
2a1c0     15 15 02 F6 | 	mov	arg02, local03
2a1c4     E8 F5 BF FD | 	call	#__system___float_div
2a1c8     FD 28 02 F6 | 	mov	local02, result1
2a1cc     13 13 02 F6 | 	mov	arg01, local01
2a1d0     15 15 02 F6 | 	mov	arg02, local03
2a1d4     D8 F5 BF FD | 	call	#__system___float_div
2a1d8     FD 26 02 F6 | 	mov	local01, result1
2a1dc     00 40 27 FF 
2a1e0     00 12 06 F6 | 	mov	arg01, ##1317011456
2a1e4     14 15 02 F6 | 	mov	arg02, local02
2a1e8     C0 F3 BF FD | 	call	#__system___float_mul
2a1ec     FD 12 02 F6 | 	mov	arg01, result1
2a1f0     00 14 06 F6 | 	mov	arg02, #0
2a1f4     7C F8 BF FD | 	call	#__system___float_tointeger
2a1f8     FD 2A 02 F6 | 	mov	local03, result1
2a1fc     00 40 27 FF 
2a200     00 12 06 F6 | 	mov	arg01, ##1317011456
2a204     13 15 02 F6 | 	mov	arg02, local01
2a208     A0 F3 BF FD | 	call	#__system___float_mul
2a20c     FD 12 02 F6 | 	mov	arg01, result1
2a210     00 14 06 F6 | 	mov	arg02, #0
2a214     5C F8 BF FD | 	call	#__system___float_tointeger
2a218     FD 2A 52 FD | 	qvector	local03, result1
2a21c     87 24 20 FF 
2a220     DB 2B 06 F6 | 	mov	local03, ##1078530011
2a224     19 12 62 FD | 	getqy	arg01
2a228     01 12 C6 F0 | 	sar	arg01, #1
2a22c     09 13 52 F6 | 	abs	arg01, arg01 wc
2a230     1F 2C C6 C9 |  if_b	decod	local04, #31
2a234     00 2C 06 36 |  if_ae	mov	local04, #0
2a238     6C EF BF FD | 	call	#__system___float_fromuns
2a23c     16 FB 61 F5 | 	xor	result1, local04
2a240     FD 12 02 F6 | 	mov	arg01, result1
2a244     00 40 27 FF 
2a248     00 14 06 F6 | 	mov	arg02, ##1317011456
2a24c     60 F5 BF FD | 	call	#__system___float_div
2a250     FD 14 02 F6 | 	mov	arg02, result1
2a254     15 13 02 F6 | 	mov	arg01, local03
2a258     50 F3 BF FD | 	call	#__system___float_mul
2a25c                 | LR__3781
2a25c     A7 F0 03 F6 | 	mov	ptra, fp
2a260     B2 00 A0 FD | 	call	#popregs_
2a264                 | __system____builtin_atan2f_ret
2a264     2D 00 64 FD | 	ret
2a268                 | 
2a268                 | __system____builtin_exp2f
2a268     04 4A 05 F6 | 	mov	COUNT_, #4
2a26c     A8 00 A0 FD | 	call	#pushregs_
2a270     09 27 02 F6 | 	mov	local01, arg01
2a274     00 7F 21 FF 
2a278     00 14 06 F6 | 	mov	arg02, ##1123942400
2a27c     01 16 66 F6 | 	neg	arg03, #1
2a280     5C F7 BF FD | 	call	#__system___float_cmp
2a284     00 FA 55 F2 | 	cmps	result1, #0 wc
2a288     00 C0 3F 3F 
2a28c     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2a290     DC 00 90 3D |  if_ae	jmp	#LR__3791
2a294     13 13 02 F6 | 	mov	arg01, local01
2a298     00 7F 61 FF 
2a29c     00 14 06 F6 | 	mov	arg02, ##-1023541248
2a2a0     01 16 06 F6 | 	mov	arg03, #1
2a2a4     38 F7 BF FD | 	call	#__system___float_cmp
2a2a8     00 FA 55 F2 | 	cmps	result1, #0 wc
2a2ac     00 FA 05 C6 |  if_b	mov	result1, #0
2a2b0     BC 00 90 CD |  if_b	jmp	#LR__3791
2a2b4     13 13 02 F6 | 	mov	arg01, local01
2a2b8     00 14 06 F6 | 	mov	arg02, #0
2a2bc     B4 F7 BF FD | 	call	#__system___float_tointeger
2a2c0     FD 28 02 F6 | 	mov	local02, result1
2a2c4     14 13 52 F6 | 	abs	arg01, local02 wc
2a2c8     1F 2A C6 C9 |  if_b	decod	local03, #31
2a2cc     00 2A 06 36 |  if_ae	mov	local03, #0
2a2d0     D4 EE BF FD | 	call	#__system___float_fromuns
2a2d4     15 FB 61 F5 | 	xor	result1, local03
2a2d8     FD 14 02 F6 | 	mov	arg02, result1
2a2dc     13 13 02 F6 | 	mov	arg01, local01
2a2e0     1F 14 E6 F4 | 	bitnot	arg02, #31
2a2e4     F4 EE BF FD | 	call	#__system___float_add
2a2e8     FD 2C 02 F6 | 	mov	local04, result1
2a2ec     16 13 02 F6 | 	mov	arg01, local04
2a2f0     00 14 06 F6 | 	mov	arg02, #0
2a2f4     01 16 06 F6 | 	mov	arg03, #1
2a2f8     E4 F6 BF FD | 	call	#__system___float_cmp
2a2fc     00 FA 55 F2 | 	cmps	result1, #0 wc
2a300     18 00 90 3D |  if_ae	jmp	#LR__3790
2a304     16 13 02 F6 | 	mov	arg01, local04
2a308     00 C0 1F FF 
2a30c     00 14 06 F6 | 	mov	arg02, ##1065353216
2a310     C8 EE BF FD | 	call	#__system___float_add
2a314     FD 2C 02 F6 | 	mov	local04, result1
2a318     01 28 86 F1 | 	sub	local02, #1
2a31c                 | LR__3790
2a31c     7F 28 06 F1 | 	add	local02, #127
2a320     17 28 66 F0 | 	shl	local02, #23
2a324     16 13 02 F6 | 	mov	arg01, local04
2a328     00 80 26 FF 
2a32c     00 14 06 F6 | 	mov	arg02, ##1291845632
2a330     78 F2 BF FD | 	call	#__system___float_mul
2a334     FD 12 02 F6 | 	mov	arg01, result1
2a338     00 14 06 F6 | 	mov	arg02, #0
2a33c     34 F7 BF FD | 	call	#__system___float_tointeger
2a340     FD 2C 0A F6 | 	mov	local04, result1 wz
2a344     14 FB 01 A6 |  if_e	mov	result1, local02
2a348     24 00 90 AD |  if_e	jmp	#LR__3791
2a34c     3E 2C 26 F4 | 	bith	local04, #62
2a350     0F 2C 62 FD | 	qexp	local04
2a354     14 13 02 F6 | 	mov	arg01, local02
2a358     18 14 62 FD | 	getqx	arg02
2a35c     01 14 06 F1 | 	add	arg02, #1
2a360     01 14 46 F0 | 	shr	arg02, #1
2a364     00 80 1F FF 
2a368     00 14 06 F1 | 	add	arg02, ##1056964608
2a36c     3C F2 BF FD | 	call	#__system___float_mul
2a370                 | LR__3791
2a370     A7 F0 03 F6 | 	mov	ptra, fp
2a374     B2 00 A0 FD | 	call	#popregs_
2a378                 | __system____builtin_exp2f_ret
2a378     2D 00 64 FD | 	ret
2a37c                 | 
2a37c                 | __system____builtin_log2f
2a37c     06 4A 05 F6 | 	mov	COUNT_, #6
2a380     A8 00 A0 FD | 	call	#pushregs_
2a384     09 27 02 F6 | 	mov	local01, arg01
2a388     09 29 0A F6 | 	mov	local02, arg01 wz
2a38c     00 00 40 5F 
2a390     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
2a394     00 40 00 AF 
2a398     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2a39c     08 01 90 AD |  if_e	jmp	#LR__3804
2a3a0     00 28 56 F2 | 	cmps	local02, #0 wc
2a3a4     00 E0 3F CF 
2a3a8     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2a3ac     F8 00 90 CD |  if_b	jmp	#LR__3804
2a3b0     13 13 02 F6 | 	mov	arg01, local01
2a3b4     00 90 20 FF 
2a3b8     00 14 06 F6 | 	mov	arg02, ##1092616192
2a3bc     01 16 06 F6 | 	mov	arg03, #1
2a3c0     1C F6 BF FD | 	call	#__system___float_cmp
2a3c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a3c8     4D 2A 20 AF 
2a3cc     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2a3d0     D4 00 90 AD |  if_e	jmp	#LR__3804
2a3d4     13 13 02 F6 | 	mov	arg01, local01
2a3d8     FC 16 20 FF 
2a3dc     54 14 06 F6 | 	mov	arg02, ##1076754516
2a3e0     01 16 06 F6 | 	mov	arg03, #1
2a3e4     F8 F5 BF FD | 	call	#__system___float_cmp
2a3e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2a3ec     55 DC 1F AF 
2a3f0     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
2a3f4     B0 00 90 AD |  if_e	jmp	#LR__3804
2a3f8     14 2B 02 F6 | 	mov	local03, local02
2a3fc     17 2A 46 F0 | 	shr	local03, #23
2a400     15 2B E2 F8 | 	getbyte	local03, local03, #0
2a404     17 29 06 F4 | 	bitl	local02, #279
2a408     14 2D 02 F6 | 	mov	local04, local02
2a40c     FF 2A 0E F2 | 	cmp	local03, #255 wz
2a410     1C 00 90 5D |  if_ne	jmp	#LR__3800
2a414     00 2C 0E F2 | 	cmp	local04, #0 wz
2a418     00 C0 3F 5F 
2a41c     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
2a420     00 E0 3F AF 
2a424     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
2a428     17 FB 01 F6 | 	mov	result1, local05
2a42c     78 00 90 FD | 	jmp	#LR__3804
2a430                 | LR__3800
2a430     00 2A 0E F2 | 	cmp	local03, #0 wz
2a434     17 2C 26 54 |  if_ne	bith	local04, #23
2a438     7F 2A 86 51 |  if_ne	sub	local03, #127
2a43c     28 00 90 5D |  if_ne	jmp	#LR__3803
2a440     00 2C 0E F2 | 	cmp	local04, #0 wz
2a444     00 40 00 AF 
2a448     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2a44c     58 00 90 AD |  if_e	jmp	#LR__3804
2a450     7E 2A 66 F6 | 	neg	local03, #126
2a454     97 08 48 FB | 	callpa	#(@LR__3802-@LR__3801)>>2,fcache_load_ptr_
2a458                 | LR__3801
2a458     17 2C 2E F4 | 	testbn	local04, #23 wz
2a45c     01 2C 66 A0 |  if_e	shl	local04, #1
2a460     01 2A 06 A1 |  if_e	add	local03, #1
2a464     F0 FF 9F AD |  if_e	jmp	#LR__3801
2a468                 | LR__3802
2a468                 | LR__3803
2a468     0E 2C 62 FD | 	qlog	local04
2a46c     01 2A 86 F1 | 	sub	local03, #1
2a470     15 13 52 F6 | 	abs	arg01, local03 wc
2a474     1F 30 C6 C9 |  if_b	decod	local06, #31
2a478     00 30 06 36 |  if_ae	mov	local06, #0
2a47c     18 2E 62 FD | 	getqx	local05
2a480     9B 2E 06 F4 | 	bitl	local05, #155
2a484     08 2E 06 F1 | 	add	local05, #8
2a488     04 2E 46 F0 | 	shr	local05, #4
2a48c     00 C0 1F FF 
2a490     00 2E 06 F1 | 	add	local05, ##1065353216
2a494     10 ED BF FD | 	call	#__system___float_fromuns
2a498     18 FB 61 F5 | 	xor	result1, local06
2a49c     FD 14 02 F6 | 	mov	arg02, result1
2a4a0     17 13 02 F6 | 	mov	arg01, local05
2a4a4     34 ED BF FD | 	call	#__system___float_add
2a4a8                 | LR__3804
2a4a8     A7 F0 03 F6 | 	mov	ptra, fp
2a4ac     B2 00 A0 FD | 	call	#popregs_
2a4b0                 | __system____builtin_log2f_ret
2a4b0     2D 00 64 FD | 	ret
2a4b4                 | 
2a4b4                 | __system____builtin_powf
2a4b4     04 4A 05 F6 | 	mov	COUNT_, #4
2a4b8     A8 00 A0 FD | 	call	#pushregs_
2a4bc     09 27 02 F6 | 	mov	local01, arg01
2a4c0     0A 29 02 F6 | 	mov	local02, arg02
2a4c4     14 13 02 F6 | 	mov	arg01, local02
2a4c8     00 14 06 F6 | 	mov	arg02, #0
2a4cc     A4 F5 BF FD | 	call	#__system___float_tointeger
2a4d0     FD 2A 02 F6 | 	mov	local03, result1
2a4d4     15 13 52 F6 | 	abs	arg01, local03 wc
2a4d8     1F 2C C6 C9 |  if_b	decod	local04, #31
2a4dc     00 2C 06 36 |  if_ae	mov	local04, #0
2a4e0     C4 EC BF FD | 	call	#__system___float_fromuns
2a4e4     16 FB 61 F5 | 	xor	result1, local04
2a4e8     FD 12 02 F6 | 	mov	arg01, result1
2a4ec     14 15 02 F6 | 	mov	arg02, local02
2a4f0     01 16 06 F6 | 	mov	arg03, #1
2a4f4     E8 F4 BF FD | 	call	#__system___float_cmp
2a4f8     00 FA 0D F2 | 	cmp	result1, #0 wz
2a4fc     18 00 90 5D |  if_ne	jmp	#LR__3810
2a500     00 C0 1F FF 
2a504     00 12 06 F6 | 	mov	arg01, ##1065353216
2a508     13 15 02 F6 | 	mov	arg02, local01
2a50c     15 17 02 F6 | 	mov	arg03, local03
2a510     A0 00 B0 FD | 	call	#__system___float_pow_n
2a514     58 00 90 FD | 	jmp	#LR__3811
2a518                 | LR__3810
2a518     13 13 02 F6 | 	mov	arg01, local01
2a51c     00 14 06 F6 | 	mov	arg02, #0
2a520     01 16 06 F6 | 	mov	arg03, #1
2a524     B8 F4 BF FD | 	call	#__system___float_cmp
2a528     00 FA 55 F2 | 	cmps	result1, #0 wc
2a52c     00 E0 3F CF 
2a530     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2a534     38 00 90 CD |  if_b	jmp	#LR__3811
2a538     13 13 02 F6 | 	mov	arg01, local01
2a53c     00 14 06 F6 | 	mov	arg02, #0
2a540     01 16 06 F6 | 	mov	arg03, #1
2a544     98 F4 BF FD | 	call	#__system___float_cmp
2a548     00 FA 0D F2 | 	cmp	result1, #0 wz
2a54c     00 FA 05 A6 |  if_e	mov	result1, #0
2a550     1C 00 90 AD |  if_e	jmp	#LR__3811
2a554     13 13 02 F6 | 	mov	arg01, local01
2a558     20 FE BF FD | 	call	#__system____builtin_log2f
2a55c     FD 12 02 F6 | 	mov	arg01, result1
2a560     14 15 02 F6 | 	mov	arg02, local02
2a564     44 F0 BF FD | 	call	#__system___float_mul
2a568     FD 12 02 F6 | 	mov	arg01, result1
2a56c     F8 FC BF FD | 	call	#__system____builtin_exp2f
2a570                 | LR__3811
2a570     A7 F0 03 F6 | 	mov	ptra, fp
2a574     B2 00 A0 FD | 	call	#popregs_
2a578                 | __system____builtin_powf_ret
2a578     2D 00 64 FD | 	ret
2a57c                 | 
2a57c                 | __system____builtin_logbase
2a57c     02 4A 05 F6 | 	mov	COUNT_, #2
2a580     A8 00 A0 FD | 	call	#pushregs_
2a584     09 27 02 F6 | 	mov	local01, arg01
2a588     0A 13 02 F6 | 	mov	arg01, arg02
2a58c     EC FD BF FD | 	call	#__system____builtin_log2f
2a590     FD 28 02 F6 | 	mov	local02, result1
2a594     13 13 02 F6 | 	mov	arg01, local01
2a598     E0 FD BF FD | 	call	#__system____builtin_log2f
2a59c     FD 14 02 F6 | 	mov	arg02, result1
2a5a0     14 13 02 F6 | 	mov	arg01, local02
2a5a4     08 F2 BF FD | 	call	#__system___float_div
2a5a8     A7 F0 03 F6 | 	mov	ptra, fp
2a5ac     B2 00 A0 FD | 	call	#popregs_
2a5b0                 | __system____builtin_logbase_ret
2a5b0     2D 00 64 FD | 	ret
2a5b4                 | 
2a5b4                 | __system___float_pow_n
2a5b4     05 4A 05 F6 | 	mov	COUNT_, #5
2a5b8     A8 00 A0 FD | 	call	#pushregs_
2a5bc     09 27 02 F6 | 	mov	local01, arg01
2a5c0     0A 29 02 F6 | 	mov	local02, arg02
2a5c4     0B 2B 02 F6 | 	mov	local03, arg03
2a5c8     00 2A 56 F2 | 	cmps	local03, #0 wc
2a5cc     18 00 90 3D |  if_ae	jmp	#LR__3820
2a5d0     01 2C 06 F6 | 	mov	local04, #1
2a5d4     15 2B 62 F6 | 	neg	local03, local03
2a5d8     00 2A 56 F2 | 	cmps	local03, #0 wc
2a5dc     00 FA 05 C6 |  if_b	mov	result1, #0
2a5e0     94 00 90 CD |  if_b	jmp	#LR__3828
2a5e4     04 00 90 FD | 	jmp	#LR__3821
2a5e8                 | LR__3820
2a5e8     00 2C 06 F6 | 	mov	local04, #0
2a5ec                 | LR__3821
2a5ec     00 C0 1F FF 
2a5f0     00 2E 06 F6 | 	mov	local05, ##1065353216
2a5f4                 | LR__3822
2a5f4     01 2A 56 F2 | 	cmps	local03, #1 wc
2a5f8     30 00 90 CD |  if_b	jmp	#LR__3824
2a5fc     01 2A CE F7 | 	test	local03, #1 wz
2a600     10 00 90 AD |  if_e	jmp	#LR__3823
2a604     17 13 02 F6 | 	mov	arg01, local05
2a608     14 15 02 F6 | 	mov	arg02, local02
2a60c     9C EF BF FD | 	call	#__system___float_mul
2a610     FD 2E 02 F6 | 	mov	local05, result1
2a614                 | LR__3823
2a614     01 2A C6 F0 | 	sar	local03, #1
2a618     14 13 02 F6 | 	mov	arg01, local02
2a61c     14 15 02 F6 | 	mov	arg02, local02
2a620     88 EF BF FD | 	call	#__system___float_mul
2a624     FD 28 02 F6 | 	mov	local02, result1
2a628     C8 FF 9F FD | 	jmp	#LR__3822
2a62c                 | LR__3824
2a62c     00 2C 0E F2 | 	cmp	local04, #0 wz
2a630     14 00 90 AD |  if_e	jmp	#LR__3825
2a634     13 13 02 F6 | 	mov	arg01, local01
2a638     17 15 02 F6 | 	mov	arg02, local05
2a63c     70 F1 BF FD | 	call	#__system___float_div
2a640     FD 2E 02 F6 | 	mov	local05, result1
2a644     2C 00 90 FD | 	jmp	#LR__3827
2a648                 | LR__3825
2a648     13 13 02 F6 | 	mov	arg01, local01
2a64c     00 C0 1F FF 
2a650     00 14 06 F6 | 	mov	arg02, ##1065353216
2a654     01 16 06 F6 | 	mov	arg03, #1
2a658     84 F3 BF FD | 	call	#__system___float_cmp
2a65c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a660     10 00 90 AD |  if_e	jmp	#LR__3826
2a664     13 13 02 F6 | 	mov	arg01, local01
2a668     17 15 02 F6 | 	mov	arg02, local05
2a66c     3C EF BF FD | 	call	#__system___float_mul
2a670     FD 2E 02 F6 | 	mov	local05, result1
2a674                 | LR__3826
2a674                 | LR__3827
2a674     17 FB 01 F6 | 	mov	result1, local05
2a678                 | LR__3828
2a678     A7 F0 03 F6 | 	mov	ptra, fp
2a67c     B2 00 A0 FD | 	call	#popregs_
2a680                 | __system___float_pow_n_ret
2a680     2D 00 64 FD | 	ret
2a684                 | 
2a684                 | __system___gc_ptrs
2a684     EC 00 02 F6 | 	mov	_var01, __heap_ptr
2a688     00 03 02 F6 | 	mov	_var02, _var01
2a68c     BB 00 00 FF 
2a690     F8 02 06 F1 | 	add	_var02, ##95992
2a694     00 FD 09 FB | 	rdlong	result2, _var01 wz
2a698     74 00 90 5D |  if_ne	jmp	#LR__3830
2a69c     01 FD 01 F6 | 	mov	result2, _var02
2a6a0     00 FD 81 F1 | 	sub	result2, _var01
2a6a4     00 03 58 FC | 	wrword	#1, _var01
2a6a8     00 FB 01 F6 | 	mov	result1, _var01
2a6ac     02 FA 05 F1 | 	add	result1, #2
2a6b0     36 00 80 FF 
2a6b4     FD 20 59 FC | 	wrword	##27792, result1
2a6b8     00 FB 01 F6 | 	mov	result1, _var01
2a6bc     04 FA 05 F1 | 	add	result1, #4
2a6c0     FD 00 58 FC | 	wrword	#0, result1
2a6c4     00 FB 01 F6 | 	mov	result1, _var01
2a6c8     06 FA 05 F1 | 	add	result1, #6
2a6cc     FD 02 58 FC | 	wrword	#1, result1
2a6d0     10 00 06 F1 | 	add	_var01, #16
2a6d4     FE FC 51 F6 | 	abs	result2, result2 wc
2a6d8     04 FC 45 F0 | 	shr	result2, #4
2a6dc     FE FC 81 F6 | 	negc	result2, result2
2a6e0     00 FD 51 FC | 	wrword	result2, _var01
2a6e4     00 FD 01 F6 | 	mov	result2, _var01
2a6e8     02 FC 05 F1 | 	add	result2, #2
2a6ec     36 00 80 FF 
2a6f0     FE 1E 59 FC | 	wrword	##27791, result2
2a6f4     00 FD 01 F6 | 	mov	result2, _var01
2a6f8     04 FC 05 F1 | 	add	result2, #4
2a6fc     FE 00 58 FC | 	wrword	#0, result2
2a700     00 FD 01 F6 | 	mov	result2, _var01
2a704     06 FC 05 F1 | 	add	result2, #6
2a708     FE 00 58 FC | 	wrword	#0, result2
2a70c     10 00 86 F1 | 	sub	_var01, #16
2a710                 | LR__3830
2a710     00 FB 01 F6 | 	mov	result1, _var01
2a714     01 FD 01 F6 | 	mov	result2, _var02
2a718                 | __system___gc_ptrs_ret
2a718     2D 00 64 FD | 	ret
2a71c                 | 
2a71c                 | __system___gc_tryalloc
2a71c     0B 4A 05 F6 | 	mov	COUNT_, #11
2a720     A8 00 A0 FD | 	call	#pushregs_
2a724     09 27 02 F6 | 	mov	local01, arg01
2a728     0A 29 02 F6 | 	mov	local02, arg02
2a72c     54 FF BF FD | 	call	#__system___gc_ptrs
2a730     FD 2A 02 F6 | 	mov	local03, result1
2a734     FE 2C 02 F6 | 	mov	local04, result2
2a738     15 2F 02 F6 | 	mov	local05, local03
2a73c     00 30 06 F6 | 	mov	local06, #0
2a740     97 1E 48 FB | 	callpa	#(@LR__3841-@LR__3840)>>2,fcache_load_ptr_
2a744                 | LR__3840
2a744     17 33 02 F6 | 	mov	local07, local05
2a748     06 2E 06 F1 | 	add	local05, #6
2a74c     17 15 EA FA | 	rdword	arg02, local05 wz
2a750     15 13 02 F6 | 	mov	arg01, local03
2a754     00 FA 05 A6 |  if_e	mov	result1, #0
2a758     04 14 66 50 |  if_ne	shl	arg02, #4
2a75c     0A 13 02 51 |  if_ne	add	arg01, arg02
2a760     09 FB 01 56 |  if_ne	mov	result1, arg01
2a764     FD 2E 0A F6 | 	mov	local05, result1 wz
2a768     17 31 E2 5A |  if_ne	rdword	local06, local05
2a76c     00 2E 0E F2 | 	cmp	local05, #0 wz
2a770     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
2a774     08 00 90 1D |  if_a	jmp	#LR__3842
2a778     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
2a77c     C4 FF 9F 1D |  if_a	jmp	#LR__3840
2a780                 | LR__3841
2a780                 | LR__3842
2a780     00 2E 0E F2 | 	cmp	local05, #0 wz
2a784     17 FB 01 A6 |  if_e	mov	result1, local05
2a788     3C 01 90 AD |  if_e	jmp	#LR__3845
2a78c     17 FD 01 F6 | 	mov	result2, local05
2a790     06 FC 05 F1 | 	add	result2, #6
2a794     FE 34 E2 FA | 	rdword	local08, result2
2a798     18 27 52 F2 | 	cmps	local01, local06 wc
2a79c     C0 00 90 3D |  if_ae	jmp	#LR__3844
2a7a0     17 27 52 FC | 	wrword	local01, local05
2a7a4     17 13 02 F6 | 	mov	arg01, local05
2a7a8     13 35 02 F6 | 	mov	local08, local01
2a7ac     04 34 66 F0 | 	shl	local08, #4
2a7b0     1A 13 02 F1 | 	add	arg01, local08
2a7b4     13 31 82 F1 | 	sub	local06, local01
2a7b8     09 31 52 FC | 	wrword	local06, arg01
2a7bc     09 35 02 F6 | 	mov	local08, arg01
2a7c0     02 34 06 F1 | 	add	local08, #2
2a7c4     36 00 80 FF 
2a7c8     1A 1F 59 FC | 	wrword	##27791, local08
2a7cc     17 15 0A F6 | 	mov	arg02, local05 wz
2a7d0     00 FA 05 A6 |  if_e	mov	result1, #0
2a7d4     15 15 82 51 |  if_ne	sub	arg02, local03
2a7d8     04 14 46 50 |  if_ne	shr	arg02, #4
2a7dc     0A FB 01 56 |  if_ne	mov	result1, arg02
2a7e0     09 35 02 F6 | 	mov	local08, arg01
2a7e4     04 34 06 F1 | 	add	local08, #4
2a7e8     1A FB 51 FC | 	wrword	result1, local08
2a7ec     17 35 02 F6 | 	mov	local08, local05
2a7f0     06 34 06 F1 | 	add	local08, #6
2a7f4     09 15 02 F6 | 	mov	arg02, arg01
2a7f8     1A 35 E2 FA | 	rdword	local08, local08
2a7fc     06 14 06 F1 | 	add	arg02, #6
2a800     0A 35 52 FC | 	wrword	local08, arg02
2a804     09 37 02 F6 | 	mov	local09, arg01
2a808     1B 15 0A F6 | 	mov	arg02, local09 wz
2a80c     00 FA 05 A6 |  if_e	mov	result1, #0
2a810     15 15 82 51 |  if_ne	sub	arg02, local03
2a814     04 14 46 50 |  if_ne	shr	arg02, #4
2a818     0A FB 01 56 |  if_ne	mov	result1, arg02
2a81c     FD 34 02 F6 | 	mov	local08, result1
2a820     09 39 EA FA | 	rdword	local10, arg01 wz
2a824     00 FA 05 A6 |  if_e	mov	result1, #0
2a828     04 38 66 50 |  if_ne	shl	local10, #4
2a82c     1C 13 02 51 |  if_ne	add	arg01, local10
2a830     09 FB 01 56 |  if_ne	mov	result1, arg01
2a834     FD 3A 0A F6 | 	mov	local11, result1 wz
2a838     24 00 90 AD |  if_e	jmp	#LR__3843
2a83c     16 3B 52 F2 | 	cmps	local11, local04 wc
2a840     1C 00 90 3D |  if_ae	jmp	#LR__3843
2a844     1B 15 0A F6 | 	mov	arg02, local09 wz
2a848     00 FA 05 A6 |  if_e	mov	result1, #0
2a84c     15 15 82 51 |  if_ne	sub	arg02, local03
2a850     04 14 46 50 |  if_ne	shr	arg02, #4
2a854     0A FB 01 56 |  if_ne	mov	result1, arg02
2a858     04 3A 06 F1 | 	add	local11, #4
2a85c     1D FB 51 FC | 	wrword	result1, local11
2a860                 | LR__3843
2a860                 | LR__3844
2a860     06 32 06 F1 | 	add	local07, #6
2a864     19 35 52 FC | 	wrword	local08, local07
2a868     36 00 00 FF 
2a86c     80 36 06 F6 | 	mov	local09, ##27776
2a870     14 37 42 F5 | 	or	local09, local02
2a874     00 FA 05 F6 | 	mov	result1, #0
2a878     01 FA 61 FD | 	cogid	result1
2a87c     FD 36 42 F5 | 	or	local09, result1
2a880     17 3B 02 F6 | 	mov	local11, local05
2a884     02 3A 06 F1 | 	add	local11, #2
2a888     1D 37 52 FC | 	wrword	local09, local11
2a88c     15 37 02 F6 | 	mov	local09, local03
2a890     08 36 06 F1 | 	add	local09, #8
2a894     17 3B 02 F6 | 	mov	local11, local05
2a898     1B 37 E2 FA | 	rdword	local09, local09
2a89c     06 3A 06 F1 | 	add	local11, #6
2a8a0     1D 37 52 FC | 	wrword	local09, local11
2a8a4     17 15 0A F6 | 	mov	arg02, local05 wz
2a8a8     00 FA 05 A6 |  if_e	mov	result1, #0
2a8ac     15 15 82 51 |  if_ne	sub	arg02, local03
2a8b0     04 14 46 50 |  if_ne	shr	arg02, #4
2a8b4     0A FB 01 56 |  if_ne	mov	result1, arg02
2a8b8     08 2A 06 F1 | 	add	local03, #8
2a8bc     15 FB 51 FC | 	wrword	result1, local03
2a8c0     08 2E 06 F1 | 	add	local05, #8
2a8c4     17 FB 01 F6 | 	mov	result1, local05
2a8c8                 | LR__3845
2a8c8     A7 F0 03 F6 | 	mov	ptra, fp
2a8cc     B2 00 A0 FD | 	call	#popregs_
2a8d0                 | __system___gc_tryalloc_ret
2a8d0     2D 00 64 FD | 	ret
2a8d4                 | 
2a8d4                 | __system___gc_alloc_managed
2a8d4     01 4A 05 F6 | 	mov	COUNT_, #1
2a8d8     A8 00 A0 FD | 	call	#pushregs_
2a8dc     09 27 02 F6 | 	mov	local01, arg01
2a8e0     00 14 06 F6 | 	mov	arg02, #0
2a8e4     1C 00 B0 FD | 	call	#__system___gc_doalloc
2a8e8     FD 14 0A F6 | 	mov	arg02, result1 wz
2a8ec     01 26 56 A2 |  if_e	cmps	local01, #1 wc
2a8f0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2a8f4     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2a8f8     A7 F0 03 F6 | 	mov	ptra, fp
2a8fc     B2 00 A0 FD | 	call	#popregs_
2a900                 | __system___gc_alloc_managed_ret
2a900     2D 00 64 FD | 	ret
2a904                 | 
2a904                 | __system___gc_doalloc
2a904     06 4A 05 F6 | 	mov	COUNT_, #6
2a908     A8 00 A0 FD | 	call	#pushregs_
2a90c     09 27 0A F6 | 	mov	local01, arg01 wz
2a910     0A 29 02 F6 | 	mov	local02, arg02
2a914     00 FA 05 A6 |  if_e	mov	result1, #0
2a918     8C 00 90 AD |  if_e	jmp	#LR__3857
2a91c     17 26 06 F1 | 	add	local01, #23
2a920     0F 26 26 F5 | 	andn	local01, #15
2a924     04 26 46 F0 | 	shr	local01, #4
2a928     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2a92c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2a930     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2a934     FC BD BF FD | 	call	#__system___lockmem
2a938     13 13 02 F6 | 	mov	arg01, local01
2a93c     14 15 02 F6 | 	mov	arg02, local02
2a940     D8 FD BF FD | 	call	#__system___gc_tryalloc
2a944     FD 2A 0A F6 | 	mov	local03, result1 wz
2a948     14 00 90 5D |  if_ne	jmp	#LR__3850
2a94c     70 03 B0 FD | 	call	#__system___gc_docollect
2a950     13 13 02 F6 | 	mov	arg01, local01
2a954     14 15 02 F6 | 	mov	arg02, local02
2a958     C0 FD BF FD | 	call	#__system___gc_tryalloc
2a95c     FD 2A 02 F6 | 	mov	local03, result1
2a960                 | LR__3850
2a960     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2a964     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2a968     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2a96c     09 01 68 FC | 	wrlong	#0, arg01
2a970     00 2A 0E F2 | 	cmp	local03, #0 wz
2a974     2C 00 90 AD |  if_e	jmp	#LR__3856
2a978     04 26 66 F0 | 	shl	local01, #4
2a97c     08 26 86 F1 | 	sub	local01, #8
2a980     13 2D 52 F6 | 	abs	local04, local01 wc
2a984     02 2C 46 F0 | 	shr	local04, #2
2a988     16 2F 8A F6 | 	negc	local05, local04 wz
2a98c     15 31 02 F6 | 	mov	local06, local03
2a990     10 00 90 AD |  if_e	jmp	#LR__3855
2a994     97 06 48 FB | 	callpa	#(@LR__3853-@LR__3851)>>2,fcache_load_ptr_
2a998                 | LR__3851
2a998     17 05 D8 FC | 	rep	@LR__3854, local05
2a99c                 | LR__3852
2a99c     18 01 68 FC | 	wrlong	#0, local06
2a9a0     04 30 06 F1 | 	add	local06, #4
2a9a4                 | LR__3853
2a9a4                 | LR__3854
2a9a4                 | LR__3855
2a9a4                 | LR__3856
2a9a4     15 FB 01 F6 | 	mov	result1, local03
2a9a8                 | LR__3857
2a9a8     A7 F0 03 F6 | 	mov	ptra, fp
2a9ac     B2 00 A0 FD | 	call	#popregs_
2a9b0                 | __system___gc_doalloc_ret
2a9b0     2D 00 64 FD | 	ret
2a9b4                 | 
2a9b4                 | __system___gc_isvalidptr
2a9b4     F8 16 06 F4 | 	bitl	arg03, #248
2a9b8     08 16 86 F1 | 	sub	arg03, #8
2a9bc     09 17 52 F2 | 	cmps	arg03, arg01 wc
2a9c0     08 00 90 CD |  if_b	jmp	#LR__3860
2a9c4     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2a9c8     08 00 90 CD |  if_b	jmp	#LR__3861
2a9cc                 | LR__3860
2a9cc     00 FA 05 F6 | 	mov	result1, #0
2a9d0     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
2a9d4                 | LR__3861
2a9d4     0B 01 02 F6 | 	mov	_var01, arg03
2a9d8     09 01 62 F5 | 	xor	_var01, arg01
2a9dc     0F 00 CE F7 | 	test	_var01, #15 wz
2a9e0     00 FA 05 56 |  if_ne	mov	result1, #0
2a9e4     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2a9e8     0B 01 02 F6 | 	mov	_var01, arg03
2a9ec     02 00 06 F1 | 	add	_var01, #2
2a9f0     00 01 E2 FA | 	rdword	_var01, _var01
2a9f4     7F 00 00 FF 
2a9f8     C0 01 06 F5 | 	and	_var01, ##65472
2a9fc     36 00 00 FF 
2aa00     80 00 0E F2 | 	cmp	_var01, ##27776 wz
2aa04     00 FA 05 56 |  if_ne	mov	result1, #0
2aa08     0B FB 01 A6 |  if_e	mov	result1, arg03
2aa0c                 | __system___gc_isvalidptr_ret
2aa0c     2D 00 64 FD | 	ret
2aa10                 | 
2aa10                 | __system___gc_free
2aa10     09 17 02 F6 | 	mov	arg03, arg01
2aa14     6C FC BF FD | 	call	#__system___gc_ptrs
2aa18     FD 12 02 F6 | 	mov	arg01, result1
2aa1c     FE 14 02 F6 | 	mov	arg02, result2
2aa20     90 FF BF FD | 	call	#__system___gc_isvalidptr
2aa24     FD 14 0A F6 | 	mov	arg02, result1 wz
2aa28     28 00 90 AD |  if_e	jmp	#LR__3870
2aa2c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2aa30     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2aa34     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2aa38     F8 BC BF FD | 	call	#__system___lockmem
2aa3c     0A 13 02 F6 | 	mov	arg01, arg02
2aa40     14 00 B0 FD | 	call	#__system___gc_dofree
2aa44     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2aa48     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2aa4c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2aa50     09 01 68 FC | 	wrlong	#0, arg01
2aa54                 | LR__3870
2aa54                 | __system___gc_free_ret
2aa54     2D 00 64 FD | 	ret
2aa58                 | 
2aa58                 | __system___gc_dofree
2aa58     06 4A 05 F6 | 	mov	COUNT_, #6
2aa5c     A8 00 A0 FD | 	call	#pushregs_
2aa60     09 27 02 F6 | 	mov	local01, arg01
2aa64     1C FC BF FD | 	call	#__system___gc_ptrs
2aa68     FD 28 02 F6 | 	mov	local02, result1
2aa6c     FE 2A 02 F6 | 	mov	local03, result2
2aa70     13 15 02 F6 | 	mov	arg02, local01
2aa74     02 14 06 F1 | 	add	arg02, #2
2aa78     36 00 80 FF 
2aa7c     0A 1F 59 FC | 	wrword	##27791, arg02
2aa80     13 2D 02 F6 | 	mov	local04, local01
2aa84     13 13 02 F6 | 	mov	arg01, local01
2aa88     09 2F EA FA | 	rdword	local05, arg01 wz
2aa8c     00 FA 05 A6 |  if_e	mov	result1, #0
2aa90     04 2E 66 50 |  if_ne	shl	local05, #4
2aa94     17 13 02 51 |  if_ne	add	arg01, local05
2aa98     09 FB 01 56 |  if_ne	mov	result1, arg01
2aa9c     FD 30 02 F6 | 	mov	local06, result1
2aaa0     97 24 48 FB | 	callpa	#(@LR__3881-@LR__3880)>>2,fcache_load_ptr_
2aaa4                 | LR__3880
2aaa4     04 2C 06 F1 | 	add	local04, #4
2aaa8     16 15 EA FA | 	rdword	arg02, local04 wz
2aaac     14 13 02 F6 | 	mov	arg01, local02
2aab0     00 FA 05 A6 |  if_e	mov	result1, #0
2aab4     04 14 66 50 |  if_ne	shl	arg02, #4
2aab8     0A 13 02 51 |  if_ne	add	arg01, arg02
2aabc     09 FB 01 56 |  if_ne	mov	result1, arg01
2aac0     FD 2C 0A F6 | 	mov	local04, result1 wz
2aac4     24 00 90 AD |  if_e	jmp	#LR__3882
2aac8     16 13 02 F6 | 	mov	arg01, local04
2aacc     00 FA 05 F6 | 	mov	result1, #0
2aad0     02 12 06 F1 | 	add	arg01, #2
2aad4     09 13 E2 FA | 	rdword	arg01, arg01
2aad8     36 00 00 FF 
2aadc     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2aae0     01 FA 65 A6 |  if_e	neg	result1, #1
2aae4     00 FA 0D F2 | 	cmp	result1, #0 wz
2aae8     B8 FF 9F AD |  if_e	jmp	#LR__3880
2aaec                 | LR__3881
2aaec                 | LR__3882
2aaec     00 2C 0E F2 | 	cmp	local04, #0 wz
2aaf0     14 2D 02 A6 |  if_e	mov	local04, local02
2aaf4     16 15 02 F6 | 	mov	arg02, local04
2aaf8     06 14 06 F1 | 	add	arg02, #6
2aafc     13 13 02 F6 | 	mov	arg01, local01
2ab00     0A 15 E2 FA | 	rdword	arg02, arg02
2ab04     06 12 06 F1 | 	add	arg01, #6
2ab08     09 15 52 FC | 	wrword	arg02, arg01
2ab0c     13 15 0A F6 | 	mov	arg02, local01 wz
2ab10     00 FA 05 A6 |  if_e	mov	result1, #0
2ab14     14 15 82 51 |  if_ne	sub	arg02, local02
2ab18     04 14 46 50 |  if_ne	shr	arg02, #4
2ab1c     0A FB 01 56 |  if_ne	mov	result1, arg02
2ab20     16 15 02 F6 | 	mov	arg02, local04
2ab24     06 14 06 F1 | 	add	arg02, #6
2ab28     0A FB 51 FC | 	wrword	result1, arg02
2ab2c     14 2D 0A F2 | 	cmp	local04, local02 wz
2ab30     A4 00 90 AD |  if_e	jmp	#LR__3885
2ab34     16 13 02 F6 | 	mov	arg01, local04
2ab38     09 2F EA FA | 	rdword	local05, arg01 wz
2ab3c     00 FA 05 A6 |  if_e	mov	result1, #0
2ab40     04 2E 66 50 |  if_ne	shl	local05, #4
2ab44     17 13 02 51 |  if_ne	add	arg01, local05
2ab48     09 FB 01 56 |  if_ne	mov	result1, arg01
2ab4c     13 FB 09 F2 | 	cmp	result1, local01 wz
2ab50     84 00 90 5D |  if_ne	jmp	#LR__3884
2ab54     16 31 E2 FA | 	rdword	local06, local04
2ab58     13 15 E2 FA | 	rdword	arg02, local01
2ab5c     0A 31 02 F1 | 	add	local06, arg02
2ab60     16 31 52 FC | 	wrword	local06, local04
2ab64     13 31 02 F6 | 	mov	local06, local01
2ab68     02 30 06 F1 | 	add	local06, #2
2ab6c     18 01 58 FC | 	wrword	#0, local06
2ab70     13 13 02 F6 | 	mov	arg01, local01
2ab74     09 2F EA FA | 	rdword	local05, arg01 wz
2ab78     00 FA 05 A6 |  if_e	mov	result1, #0
2ab7c     04 2E 66 50 |  if_ne	shl	local05, #4
2ab80     17 13 02 51 |  if_ne	add	arg01, local05
2ab84     09 FB 01 56 |  if_ne	mov	result1, arg01
2ab88     FD 30 02 F6 | 	mov	local06, result1
2ab8c     15 31 52 F2 | 	cmps	local06, local03 wc
2ab90     20 00 90 3D |  if_ae	jmp	#LR__3883
2ab94     16 15 0A F6 | 	mov	arg02, local04 wz
2ab98     00 FA 05 A6 |  if_e	mov	result1, #0
2ab9c     14 15 82 51 |  if_ne	sub	arg02, local02
2aba0     04 14 46 50 |  if_ne	shr	arg02, #4
2aba4     0A FB 01 56 |  if_ne	mov	result1, arg02
2aba8     18 15 02 F6 | 	mov	arg02, local06
2abac     04 14 06 F1 | 	add	arg02, #4
2abb0     0A FB 51 FC | 	wrword	result1, arg02
2abb4                 | LR__3883
2abb4     13 15 02 F6 | 	mov	arg02, local01
2abb8     06 14 06 F1 | 	add	arg02, #6
2abbc     16 FD 01 F6 | 	mov	result2, local04
2abc0     0A 15 E2 FA | 	rdword	arg02, arg02
2abc4     06 FC 05 F1 | 	add	result2, #6
2abc8     FE 14 52 FC | 	wrword	arg02, result2
2abcc     06 26 06 F1 | 	add	local01, #6
2abd0     13 01 58 FC | 	wrword	#0, local01
2abd4     16 27 02 F6 | 	mov	local01, local04
2abd8                 | LR__3884
2abd8                 | LR__3885
2abd8     13 13 02 F6 | 	mov	arg01, local01
2abdc     09 2F EA FA | 	rdword	local05, arg01 wz
2abe0     00 FA 05 A6 |  if_e	mov	result1, #0
2abe4     04 2E 66 50 |  if_ne	shl	local05, #4
2abe8     17 13 02 51 |  if_ne	add	arg01, local05
2abec     09 FB 01 56 |  if_ne	mov	result1, arg01
2abf0     FD 14 0A F6 | 	mov	arg02, result1 wz
2abf4     B8 00 90 AD |  if_e	jmp	#LR__3887
2abf8     15 15 52 F2 | 	cmps	arg02, local03 wc
2abfc     B0 00 90 3D |  if_ae	jmp	#LR__3887
2ac00     0A 13 02 F6 | 	mov	arg01, arg02
2ac04     00 FA 05 F6 | 	mov	result1, #0
2ac08     02 12 06 F1 | 	add	arg01, #2
2ac0c     09 13 E2 FA | 	rdword	arg01, arg01
2ac10     36 00 00 FF 
2ac14     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2ac18     01 FA 65 A6 |  if_e	neg	result1, #1
2ac1c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac20     8C 00 90 AD |  if_e	jmp	#LR__3887
2ac24     13 2D 02 F6 | 	mov	local04, local01
2ac28     16 31 E2 FA | 	rdword	local06, local04
2ac2c     0A 13 02 F6 | 	mov	arg01, arg02
2ac30     09 27 E2 FA | 	rdword	local01, arg01
2ac34     13 31 02 F1 | 	add	local06, local01
2ac38     16 31 52 FC | 	wrword	local06, local04
2ac3c     09 31 02 F6 | 	mov	local06, arg01
2ac40     06 30 06 F1 | 	add	local06, #6
2ac44     16 27 02 F6 | 	mov	local01, local04
2ac48     18 31 E2 FA | 	rdword	local06, local06
2ac4c     06 26 06 F1 | 	add	local01, #6
2ac50     13 31 52 FC | 	wrword	local06, local01
2ac54     09 31 02 F6 | 	mov	local06, arg01
2ac58     02 30 06 F1 | 	add	local06, #2
2ac5c     18 55 59 FC | 	wrword	#170, local06
2ac60     09 31 02 F6 | 	mov	local06, arg01
2ac64     06 30 06 F1 | 	add	local06, #6
2ac68     18 01 58 FC | 	wrword	#0, local06
2ac6c     09 2F EA FA | 	rdword	local05, arg01 wz
2ac70     00 FA 05 A6 |  if_e	mov	result1, #0
2ac74     04 2E 66 50 |  if_ne	shl	local05, #4
2ac78     17 13 02 51 |  if_ne	add	arg01, local05
2ac7c     09 FB 01 56 |  if_ne	mov	result1, arg01
2ac80     FD 30 0A F6 | 	mov	local06, result1 wz
2ac84     28 00 90 AD |  if_e	jmp	#LR__3886
2ac88     15 31 52 F2 | 	cmps	local06, local03 wc
2ac8c     20 00 90 3D |  if_ae	jmp	#LR__3886
2ac90     16 15 0A F6 | 	mov	arg02, local04 wz
2ac94     00 FA 05 A6 |  if_e	mov	result1, #0
2ac98     14 15 82 51 |  if_ne	sub	arg02, local02
2ac9c     04 14 46 50 |  if_ne	shr	arg02, #4
2aca0     0A FB 01 56 |  if_ne	mov	result1, arg02
2aca4     18 2D 02 F6 | 	mov	local04, local06
2aca8     04 2C 06 F1 | 	add	local04, #4
2acac     16 FB 51 FC | 	wrword	result1, local04
2acb0                 | LR__3886
2acb0                 | LR__3887
2acb0     18 FB 01 F6 | 	mov	result1, local06
2acb4     A7 F0 03 F6 | 	mov	ptra, fp
2acb8     B2 00 A0 FD | 	call	#popregs_
2acbc                 | __system___gc_dofree_ret
2acbc     2D 00 64 FD | 	ret
2acc0                 | 
2acc0                 | __system___gc_docollect
2acc0     05 4A 05 F6 | 	mov	COUNT_, #5
2acc4     A8 00 A0 FD | 	call	#pushregs_
2acc8     B8 F9 BF FD | 	call	#__system___gc_ptrs
2accc     FE 26 02 F6 | 	mov	local01, result2
2acd0     FD 28 02 F6 | 	mov	local02, result1
2acd4     14 13 02 F6 | 	mov	arg01, local02
2acd8     09 2B EA FA | 	rdword	local03, arg01 wz
2acdc     00 FA 05 A6 |  if_e	mov	result1, #0
2ace0     04 2A 66 50 |  if_ne	shl	local03, #4
2ace4     15 13 02 51 |  if_ne	add	arg01, local03
2ace8     09 FB 01 56 |  if_ne	mov	result1, arg01
2acec     FD 2C 0A F6 | 	mov	local04, result1 wz
2acf0     00 FA 05 F6 | 	mov	result1, #0
2acf4     01 FA 61 FD | 	cogid	result1
2acf8     FD 2E 02 F6 | 	mov	local05, result1
2acfc     48 00 90 AD |  if_e	jmp	#LR__3892
2ad00     97 22 48 FB | 	callpa	#(@LR__3891-@LR__3890)>>2,fcache_load_ptr_
2ad04                 | LR__3890
2ad04     13 2D 52 F2 | 	cmps	local04, local01 wc
2ad08     3C 00 90 3D |  if_ae	jmp	#LR__3892
2ad0c     16 15 02 F6 | 	mov	arg02, local04
2ad10     02 14 06 F1 | 	add	arg02, #2
2ad14     0A 15 E2 FA | 	rdword	arg02, arg02
2ad18     20 14 26 F5 | 	andn	arg02, #32
2ad1c     16 13 02 F6 | 	mov	arg01, local04
2ad20     02 12 06 F1 | 	add	arg01, #2
2ad24     09 15 52 FC | 	wrword	arg02, arg01
2ad28     16 13 02 F6 | 	mov	arg01, local04
2ad2c     09 2B EA FA | 	rdword	local03, arg01 wz
2ad30     00 FA 05 A6 |  if_e	mov	result1, #0
2ad34     04 2A 66 50 |  if_ne	shl	local03, #4
2ad38     15 13 02 51 |  if_ne	add	arg01, local03
2ad3c     09 FB 01 56 |  if_ne	mov	result1, arg01
2ad40     FD 2C 0A F6 | 	mov	local04, result1 wz
2ad44     BC FF 9F 5D |  if_ne	jmp	#LR__3890
2ad48                 | LR__3891
2ad48                 | LR__3892
2ad48     00 2A 06 F6 | 	mov	local03, #0
2ad4c     00 12 06 F6 | 	mov	arg01, #0
2ad50     B8 B9 BF FD | 	call	#__system____topofstack
2ad54     FD 14 02 F6 | 	mov	arg02, result1
2ad58     15 13 02 F6 | 	mov	arg01, local03
2ad5c     90 00 B0 FD | 	call	#__system___gc_markhub
2ad60     1C 01 B0 FD | 	call	#__system___gc_markcog
2ad64     14 13 02 F6 | 	mov	arg01, local02
2ad68     09 2B EA FA | 	rdword	local03, arg01 wz
2ad6c     00 FA 05 A6 |  if_e	mov	result1, #0
2ad70     04 2A 66 50 |  if_ne	shl	local03, #4
2ad74     15 13 02 51 |  if_ne	add	arg01, local03
2ad78     09 FB 01 56 |  if_ne	mov	result1, arg01
2ad7c     FD 28 0A F6 | 	mov	local02, result1 wz
2ad80     60 00 90 AD |  if_e	jmp	#LR__3896
2ad84                 | LR__3893
2ad84     14 2D 02 F6 | 	mov	local04, local02
2ad88     16 13 02 F6 | 	mov	arg01, local04
2ad8c     09 2B EA FA | 	rdword	local03, arg01 wz
2ad90     00 FA 05 A6 |  if_e	mov	result1, #0
2ad94     04 2A 66 50 |  if_ne	shl	local03, #4
2ad98     15 13 02 51 |  if_ne	add	arg01, local03
2ad9c     09 FB 01 56 |  if_ne	mov	result1, arg01
2ada0     FD 28 02 F6 | 	mov	local02, result1
2ada4     16 15 02 F6 | 	mov	arg02, local04
2ada8     02 14 06 F1 | 	add	arg02, #2
2adac     0A 15 E2 FA | 	rdword	arg02, arg02
2adb0     20 14 CE F7 | 	test	arg02, #32 wz
2adb4     10 14 CE A7 |  if_e	test	arg02, #16 wz
2adb8     1C 00 90 5D |  if_ne	jmp	#LR__3895
2adbc     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2adc0     17 15 0A F2 | 	cmp	arg02, local05 wz
2adc4     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2adc8     0C 00 90 5D |  if_ne	jmp	#LR__3894
2adcc     16 13 02 F6 | 	mov	arg01, local04
2add0     84 FC BF FD | 	call	#__system___gc_dofree
2add4     FD 28 02 F6 | 	mov	local02, result1
2add8                 | LR__3894
2add8                 | LR__3895
2add8     00 28 0E F2 | 	cmp	local02, #0 wz
2addc     13 29 52 52 |  if_ne	cmps	local02, local01 wc
2ade0     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3893
2ade4                 | LR__3896
2ade4     A7 F0 03 F6 | 	mov	ptra, fp
2ade8     B2 00 A0 FD | 	call	#popregs_
2adec                 | __system___gc_docollect_ret
2adec     2D 00 64 FD | 	ret
2adf0                 | 
2adf0                 | __system___gc_markhub
2adf0     04 4A 05 F6 | 	mov	COUNT_, #4
2adf4     A8 00 A0 FD | 	call	#pushregs_
2adf8     09 27 02 F6 | 	mov	local01, arg01
2adfc     0A 29 02 F6 | 	mov	local02, arg02
2ae00     80 F8 BF FD | 	call	#__system___gc_ptrs
2ae04     FD 2A 02 F6 | 	mov	local03, result1
2ae08     FE 2C 02 F6 | 	mov	local04, result2
2ae0c                 | LR__3900
2ae0c     14 27 52 F2 | 	cmps	local01, local02 wc
2ae10     60 00 90 3D |  if_ae	jmp	#LR__3901
2ae14     13 17 02 FB | 	rdlong	arg03, local01
2ae18     04 26 06 F1 | 	add	local01, #4
2ae1c     16 15 02 F6 | 	mov	arg02, local04
2ae20     15 13 02 F6 | 	mov	arg01, local03
2ae24     8C FB BF FD | 	call	#__system___gc_isvalidptr
2ae28     FD 16 0A F6 | 	mov	arg03, result1 wz
2ae2c     DC FF 9F AD |  if_e	jmp	#LR__3900
2ae30     0B 13 02 F6 | 	mov	arg01, arg03
2ae34     00 FA 05 F6 | 	mov	result1, #0
2ae38     02 12 06 F1 | 	add	arg01, #2
2ae3c     09 13 E2 FA | 	rdword	arg01, arg01
2ae40     36 00 00 FF 
2ae44     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2ae48     01 FA 65 A6 |  if_e	neg	result1, #1
2ae4c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae50     B8 FF 9F 5D |  if_ne	jmp	#LR__3900
2ae54     0B FD 01 F6 | 	mov	result2, arg03
2ae58     02 FC 05 F1 | 	add	result2, #2
2ae5c     FE FC E1 FA | 	rdword	result2, result2
2ae60     0F FC 25 F5 | 	andn	result2, #15
2ae64     2E FC 45 F5 | 	or	result2, #46
2ae68     02 16 06 F1 | 	add	arg03, #2
2ae6c     0B FD 51 FC | 	wrword	result2, arg03
2ae70     98 FF 9F FD | 	jmp	#LR__3900
2ae74                 | LR__3901
2ae74     A7 F0 03 F6 | 	mov	ptra, fp
2ae78     B2 00 A0 FD | 	call	#popregs_
2ae7c                 | __system___gc_markhub_ret
2ae7c     2D 00 64 FD | 	ret
2ae80                 | 
2ae80                 | __system___gc_markcog
2ae80     04 4A 05 F6 | 	mov	COUNT_, #4
2ae84     A8 00 A0 FD | 	call	#pushregs_
2ae88     F8 F7 BF FD | 	call	#__system___gc_ptrs
2ae8c     FD 26 02 F6 | 	mov	local01, result1
2ae90     FE 28 02 F6 | 	mov	local02, result2
2ae94     EF 2B 06 F6 | 	mov	local03, #495
2ae98                 | LR__3910
2ae98                 | 	'.live	local03
2ae98     00 2A 96 F9 | 	alts	local03, #0
2ae9c     15 2D 02 F6 | 	mov	local04, local03
2aea0     13 13 02 F6 | 	mov	arg01, local01
2aea4     14 15 02 F6 | 	mov	arg02, local02
2aea8     16 17 02 F6 | 	mov	arg03, local04
2aeac     04 FB BF FD | 	call	#__system___gc_isvalidptr
2aeb0     00 FA 0D F2 | 	cmp	result1, #0 wz
2aeb4     18 00 90 AD |  if_e	jmp	#LR__3911
2aeb8     FD 2C 02 F6 | 	mov	local04, result1
2aebc     02 2C 06 F1 | 	add	local04, #2
2aec0     16 2D E2 FA | 	rdword	local04, local04
2aec4     20 2C 46 F5 | 	or	local04, #32
2aec8     02 FA 05 F1 | 	add	result1, #2
2aecc     FD 2C 52 FC | 	wrword	local04, result1
2aed0                 | LR__3911
2aed0     01 2A 86 F1 | 	sub	local03, #1
2aed4     00 2A 56 F2 | 	cmps	local03, #0 wc
2aed8     BC FF 9F 3D |  if_ae	jmp	#LR__3910
2aedc     A7 F0 03 F6 | 	mov	ptra, fp
2aee0     B2 00 A0 FD | 	call	#popregs_
2aee4                 | __system___gc_markcog_ret
2aee4     2D 00 64 FD | 	ret
2aee8                 | 
2aee8                 | __system__opendir
2aee8     06 4A 05 F6 | 	mov	COUNT_, #6
2aeec     A8 00 A0 FD | 	call	#pushregs_
2aef0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2aef4     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2aef8     09 15 02 F6 | 	mov	arg02, arg01
2aefc     13 13 02 F6 | 	mov	arg01, local01
2af00     00 16 06 F6 | 	mov	arg03, #0
2af04     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2af08     C0 BF BF FD | 	call	#__system____getvfsforfile
2af0c     FD 28 0A F6 | 	mov	local02, result1 wz
2af10     10 00 90 AD |  if_e	jmp	#LR__3920
2af14     28 28 06 F1 | 	add	local02, #40
2af18     14 17 0A FB | 	rdlong	arg03, local02 wz
2af1c     28 28 86 F1 | 	sub	local02, #40
2af20     14 00 90 5D |  if_ne	jmp	#LR__3921
2af24                 | LR__3920
2af24     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2af28     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2af2c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2af30     00 FA 05 F6 | 	mov	result1, #0
2af34     90 00 90 FD | 	jmp	#LR__3923
2af38                 | LR__3921
2af38     5C 12 06 F6 | 	mov	arg01, #92
2af3c     10 14 06 F6 | 	mov	arg02, #16
2af40     C0 F9 BF FD | 	call	#__system___gc_doalloc
2af44     FD 2A 0A F6 | 	mov	local03, result1 wz
2af48     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2af4c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2af50     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2af54     00 FA 05 A6 |  if_e	mov	result1, #0
2af58     6C 00 90 AD |  if_e	jmp	#LR__3923
2af5c     28 28 06 F1 | 	add	local02, #40
2af60     14 2D 02 FB | 	rdlong	local04, local02
2af64     16 2F 02 F6 | 	mov	local05, local04
2af68     28 28 86 F1 | 	sub	local02, #40
2af6c     13 2E 46 F7 | 	zerox	local05, #19
2af70     14 2C 46 F0 | 	shr	local04, #20
2af74     02 2C 66 F0 | 	shl	local04, #2
2af78     ED 2C 02 F1 | 	add	local04, __methods__
2af7c     16 2D 02 FB | 	rdlong	local04, local04
2af80     15 13 02 F6 | 	mov	arg01, local03
2af84     13 15 02 F6 | 	mov	arg02, local01
2af88     F2 30 02 F6 | 	mov	local06, objptr
2af8c     17 E5 01 F6 | 	mov	objptr, local05
2af90     2D 2C 62 FD | 	call	local04
2af94     18 E5 01 F6 | 	mov	objptr, local06
2af98     FD 16 0A F6 | 	mov	arg03, result1 wz
2af9c     20 00 90 AD |  if_e	jmp	#LR__3922
2afa0     00 16 4E F2 | 	cmps	arg03, #0 wz
2afa4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2afa8     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2afac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2afb0     15 13 02 F6 | 	mov	arg01, local03
2afb4     58 FA BF FD | 	call	#__system___gc_free
2afb8     00 FA 05 F6 | 	mov	result1, #0
2afbc     08 00 90 FD | 	jmp	#LR__3923
2afc0                 | LR__3922
2afc0     15 29 62 FC | 	wrlong	local02, local03
2afc4     15 FB 01 F6 | 	mov	result1, local03
2afc8                 | LR__3923
2afc8     A7 F0 03 F6 | 	mov	ptra, fp
2afcc     B2 00 A0 FD | 	call	#popregs_
2afd0                 | __system__opendir_ret
2afd0     2D 00 64 FD | 	ret
2afd4                 | 
2afd4                 | __system__closedir
2afd4     04 4A 05 F6 | 	mov	COUNT_, #4
2afd8     A8 00 A0 FD | 	call	#pushregs_
2afdc     09 27 02 F6 | 	mov	local01, arg01
2afe0     13 13 02 FB | 	rdlong	arg01, local01
2afe4     2C 12 06 F1 | 	add	arg01, #44
2afe8     09 29 02 FB | 	rdlong	local02, arg01
2afec     14 2B 02 F6 | 	mov	local03, local02
2aff0     13 2A 46 F7 | 	zerox	local03, #19
2aff4     14 28 46 F0 | 	shr	local02, #20
2aff8     02 28 66 F0 | 	shl	local02, #2
2affc     ED 28 02 F1 | 	add	local02, __methods__
2b000     14 29 02 FB | 	rdlong	local02, local02
2b004     13 13 02 F6 | 	mov	arg01, local01
2b008     F2 2C 02 F6 | 	mov	local04, objptr
2b00c     15 E5 01 F6 | 	mov	objptr, local03
2b010     2D 28 62 FD | 	call	local02
2b014     16 E5 01 F6 | 	mov	objptr, local04
2b018     FD 2C 02 F6 | 	mov	local04, result1
2b01c     13 13 02 F6 | 	mov	arg01, local01
2b020     EC F9 BF FD | 	call	#__system___gc_free
2b024     00 2C 4E F2 | 	cmps	local04, #0 wz
2b028     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b02c     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
2b030     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b034     01 FA 65 56 |  if_ne	neg	result1, #1
2b038     00 FA 05 A6 |  if_e	mov	result1, #0
2b03c     A7 F0 03 F6 | 	mov	ptra, fp
2b040     B2 00 A0 FD | 	call	#popregs_
2b044                 | __system__closedir_ret
2b044     2D 00 64 FD | 	ret
2b048                 | 
2b048                 | __system__readdir
2b048     04 4A 05 F6 | 	mov	COUNT_, #4
2b04c     A8 00 A0 FD | 	call	#pushregs_
2b050     09 15 0A FB | 	rdlong	arg02, arg01 wz
2b054     08 12 06 F1 | 	add	arg01, #8
2b058     09 27 02 F6 | 	mov	local01, arg01
2b05c     08 12 86 F1 | 	sub	arg01, #8
2b060     00 FA 05 A6 |  if_e	mov	result1, #0
2b064     5C 00 90 AD |  if_e	jmp	#LR__3931
2b068     30 14 06 F1 | 	add	arg02, #48
2b06c     0A 29 02 FB | 	rdlong	local02, arg02
2b070     14 2B 02 F6 | 	mov	local03, local02
2b074     13 2A 46 F7 | 	zerox	local03, #19
2b078     14 28 46 F0 | 	shr	local02, #20
2b07c     02 28 66 F0 | 	shl	local02, #2
2b080     ED 28 02 F1 | 	add	local02, __methods__
2b084     14 29 02 FB | 	rdlong	local02, local02
2b088     13 15 02 F6 | 	mov	arg02, local01
2b08c     F2 2C 02 F6 | 	mov	local04, objptr
2b090     15 E5 01 F6 | 	mov	objptr, local03
2b094     2D 28 62 FD | 	call	local02
2b098     16 E5 01 F6 | 	mov	objptr, local04
2b09c     00 FA 4D F2 | 	cmps	result1, #0 wz
2b0a0     1C 00 90 AD |  if_e	jmp	#LR__3930
2b0a4     01 FA 55 F2 | 	cmps	result1, #1 wc
2b0a8     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2b0ac     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2b0b0     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
2b0b4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2b0b8     00 FA 05 F6 | 	mov	result1, #0
2b0bc     04 00 90 FD | 	jmp	#LR__3931
2b0c0                 | LR__3930
2b0c0     13 FB 01 F6 | 	mov	result1, local01
2b0c4                 | LR__3931
2b0c4     A7 F0 03 F6 | 	mov	ptra, fp
2b0c8     B2 00 A0 FD | 	call	#popregs_
2b0cc                 | __system__readdir_ret
2b0cc     2D 00 64 FD | 	ret
2b0d0                 | 
2b0d0                 | __system___openraw
2b0d0     15 4A 05 F6 | 	mov	COUNT_, #21
2b0d4     A8 00 A0 FD | 	call	#pushregs_
2b0d8     09 27 02 F6 | 	mov	local01, arg01
2b0dc     0A 29 02 F6 | 	mov	local02, arg02
2b0e0     0B 2B 02 F6 | 	mov	local03, arg03
2b0e4     0C 2D 02 F6 | 	mov	local04, arg04
2b0e8     04 2E 06 F6 | 	mov	local05, #4
2b0ec     13 31 02 F6 | 	mov	local06, local01
2b0f0     00 32 06 F6 | 	mov	local07, #0
2b0f4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2b0f8     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2b0fc     1A 13 02 F6 | 	mov	arg01, local08
2b100     14 15 02 F6 | 	mov	arg02, local02
2b104     00 16 06 F6 | 	mov	arg03, #0
2b108     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2b10c     BC BD BF FD | 	call	#__system____getvfsforfile
2b110     FD 36 0A F6 | 	mov	local09, result1 wz
2b114     10 00 90 AD |  if_e	jmp	#LR__3940
2b118     20 36 06 F1 | 	add	local09, #32
2b11c     1B FB 09 FB | 	rdlong	result1, local09 wz
2b120     20 36 86 F1 | 	sub	local09, #32
2b124     14 00 90 5D |  if_ne	jmp	#LR__3941
2b128                 | LR__3940
2b128     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b12c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2b130     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b134     01 FA 65 F6 | 	neg	result1, #1
2b138     8C 02 90 FD | 	jmp	#LR__3954
2b13c                 | LR__3941
2b13c     18 13 02 F6 | 	mov	arg01, local06
2b140     00 14 06 F6 | 	mov	arg02, #0
2b144     34 16 06 F6 | 	mov	arg03, #52
2b148     09 39 02 F6 | 	mov	local10, arg01
2b14c     98 00 A0 FD | 	call	#\builtin_bytefill_
2b150     20 36 06 F1 | 	add	local09, #32
2b154     1B 3B 02 FB | 	rdlong	local11, local09
2b158     1D 3D 02 F6 | 	mov	local12, local11
2b15c     1D 3F 02 F6 | 	mov	local13, local11
2b160     20 36 86 F1 | 	sub	local09, #32
2b164     1F 41 02 F6 | 	mov	local14, local13
2b168     13 3C 46 F7 | 	zerox	local12, #19
2b16c     14 40 46 F0 | 	shr	local14, #20
2b170     02 40 66 F0 | 	shl	local14, #2
2b174     ED 40 02 F1 | 	add	local14, __methods__
2b178     20 41 02 FB | 	rdlong	local14, local14
2b17c     18 43 02 F6 | 	mov	local15, local06
2b180     1A 45 02 F6 | 	mov	local16, local08
2b184     15 47 02 F6 | 	mov	local17, local03
2b188     21 13 02 F6 | 	mov	arg01, local15
2b18c     22 15 02 F6 | 	mov	arg02, local16
2b190     23 17 02 F6 | 	mov	arg03, local17
2b194     F2 48 02 F6 | 	mov	local18, objptr
2b198     1E E5 01 F6 | 	mov	objptr, local12
2b19c     2D 40 62 FD | 	call	local14
2b1a0     24 E5 01 F6 | 	mov	objptr, local18
2b1a4     FD 4A 0A F6 | 	mov	local19, result1 wz
2b1a8     04 2A CE 57 |  if_ne	test	local03, #4 wz
2b1ac     58 00 90 AD |  if_e	jmp	#LR__3942
2b1b0     24 36 06 F1 | 	add	local09, #36
2b1b4     1B 3B 02 FB | 	rdlong	local11, local09
2b1b8     1D 3D 02 F6 | 	mov	local12, local11
2b1bc     1D 3F 02 F6 | 	mov	local13, local11
2b1c0     24 36 86 F1 | 	sub	local09, #36
2b1c4     1F 41 02 F6 | 	mov	local14, local13
2b1c8     13 3C 46 F7 | 	zerox	local12, #19
2b1cc     14 40 46 F0 | 	shr	local14, #20
2b1d0     02 40 66 F0 | 	shl	local14, #2
2b1d4     ED 40 02 F1 | 	add	local14, __methods__
2b1d8     20 41 02 FB | 	rdlong	local14, local14
2b1dc     18 43 02 F6 | 	mov	local15, local06
2b1e0     1A 45 02 F6 | 	mov	local16, local08
2b1e4     16 47 02 F6 | 	mov	local17, local04
2b1e8     21 13 02 F6 | 	mov	arg01, local15
2b1ec     22 15 02 F6 | 	mov	arg02, local16
2b1f0     23 17 02 F6 | 	mov	arg03, local17
2b1f4     F2 48 02 F6 | 	mov	local18, objptr
2b1f8     1E E5 01 F6 | 	mov	objptr, local12
2b1fc     2D 40 62 FD | 	call	local14
2b200     24 E5 01 F6 | 	mov	objptr, local18
2b204     FD 4A 02 F6 | 	mov	local19, result1
2b208                 | LR__3942
2b208     00 4A 0E F2 | 	cmp	local19, #0 wz
2b20c     8C 01 90 5D |  if_ne	jmp	#LR__3952
2b210     15 4D 02 F6 | 	mov	local20, local03
2b214     03 4C 0E F5 | 	and	local20, #3 wz
2b218     02 2E 46 55 |  if_ne	or	local05, #2
2b21c     01 4C 0E F2 | 	cmp	local20, #1 wz
2b220     01 2E 46 55 |  if_ne	or	local05, #1
2b224     20 2A CE F7 | 	test	local03, #32 wz
2b228     C0 2E 46 55 |  if_ne	or	local05, #192
2b22c     08 30 06 F1 | 	add	local06, #8
2b230     18 2F 62 FC | 	wrlong	local05, local06
2b234     0C 30 06 F1 | 	add	local06, #12
2b238     18 4F 0A FB | 	rdlong	local21, local06 wz
2b23c     14 30 86 F1 | 	sub	local06, #20
2b240     18 00 90 5D |  if_ne	jmp	#LR__3943
2b244     04 36 06 F1 | 	add	local09, #4
2b248     1B 4F 02 FB | 	rdlong	local21, local09
2b24c     04 36 86 F1 | 	sub	local09, #4
2b250     14 30 06 F1 | 	add	local06, #20
2b254     18 4F 62 FC | 	wrlong	local21, local06
2b258     14 30 86 F1 | 	sub	local06, #20
2b25c                 | LR__3943
2b25c     18 30 06 F1 | 	add	local06, #24
2b260     18 4F 0A FB | 	rdlong	local21, local06 wz
2b264     18 30 86 F1 | 	sub	local06, #24
2b268     18 00 90 5D |  if_ne	jmp	#LR__3944
2b26c     08 36 06 F1 | 	add	local09, #8
2b270     1B 4F 02 FB | 	rdlong	local21, local09
2b274     08 36 86 F1 | 	sub	local09, #8
2b278     18 30 06 F1 | 	add	local06, #24
2b27c     18 4F 62 FC | 	wrlong	local21, local06
2b280     18 30 86 F1 | 	sub	local06, #24
2b284                 | LR__3944
2b284     24 30 06 F1 | 	add	local06, #36
2b288     18 4F 0A FB | 	rdlong	local21, local06 wz
2b28c     24 30 86 F1 | 	sub	local06, #36
2b290     1B 4F 02 AB |  if_e	rdlong	local21, local09
2b294     24 30 06 A1 |  if_e	add	local06, #36
2b298     18 4F 62 AC |  if_e	wrlong	local21, local06
2b29c     24 30 86 A1 |  if_e	sub	local06, #36
2b2a0     28 30 06 F1 | 	add	local06, #40
2b2a4     18 4F 0A FB | 	rdlong	local21, local06 wz
2b2a8     28 30 86 F1 | 	sub	local06, #40
2b2ac     18 00 90 5D |  if_ne	jmp	#LR__3945
2b2b0     10 36 06 F1 | 	add	local09, #16
2b2b4     1B 4F 02 FB | 	rdlong	local21, local09
2b2b8     10 36 86 F1 | 	sub	local09, #16
2b2bc     28 30 06 F1 | 	add	local06, #40
2b2c0     18 4F 62 FC | 	wrlong	local21, local06
2b2c4     28 30 86 F1 | 	sub	local06, #40
2b2c8                 | LR__3945
2b2c8     30 30 06 F1 | 	add	local06, #48
2b2cc     18 4F 0A FB | 	rdlong	local21, local06 wz
2b2d0     30 30 86 F1 | 	sub	local06, #48
2b2d4     18 00 90 5D |  if_ne	jmp	#LR__3946
2b2d8     0C 36 06 F1 | 	add	local09, #12
2b2dc     1B 4F 02 FB | 	rdlong	local21, local09
2b2e0     0C 36 86 F1 | 	sub	local09, #12
2b2e4     30 30 06 F1 | 	add	local06, #48
2b2e8     18 4F 62 FC | 	wrlong	local21, local06
2b2ec     30 30 86 F1 | 	sub	local06, #48
2b2f0                 | LR__3946
2b2f0     1C 30 06 F1 | 	add	local06, #28
2b2f4     18 4F 0A FB | 	rdlong	local21, local06 wz
2b2f8     1C 30 86 F1 | 	sub	local06, #28
2b2fc     1C 00 90 5D |  if_ne	jmp	#LR__3947
2b300     01 32 06 F6 | 	mov	local07, #1
2b304     F2 12 02 F6 | 	mov	arg01, objptr
2b308     00 58 05 FF 
2b30c     00 12 46 F5 | 	or	arg01, ##179306496
2b310     1C 30 06 F1 | 	add	local06, #28
2b314     18 13 62 FC | 	wrlong	arg01, local06
2b318     1C 30 86 F1 | 	sub	local06, #28
2b31c                 | LR__3947
2b31c     20 30 06 F1 | 	add	local06, #32
2b320     18 4F 0A FB | 	rdlong	local21, local06 wz
2b324     20 30 86 F1 | 	sub	local06, #32
2b328     1C 00 90 5D |  if_ne	jmp	#LR__3948
2b32c     01 32 06 F6 | 	mov	local07, #1
2b330     F2 12 02 F6 | 	mov	arg01, objptr
2b334     00 60 05 FF 
2b338     00 12 46 F5 | 	or	arg01, ##180355072
2b33c     20 30 06 F1 | 	add	local06, #32
2b340     18 13 62 FC | 	wrlong	arg01, local06
2b344     20 30 86 F1 | 	sub	local06, #32
2b348                 | LR__3948
2b348     2C 30 06 F1 | 	add	local06, #44
2b34c     18 4F 0A FB | 	rdlong	local21, local06 wz
2b350     2C 30 86 F1 | 	sub	local06, #44
2b354     44 00 90 5D |  if_ne	jmp	#LR__3951
2b358     14 36 06 F1 | 	add	local09, #20
2b35c     1B 4F 0A FB | 	rdlong	local21, local09 wz
2b360     14 36 86 F1 | 	sub	local09, #20
2b364     18 00 90 AD |  if_e	jmp	#LR__3949
2b368     14 36 06 F1 | 	add	local09, #20
2b36c     1B 4F 02 FB | 	rdlong	local21, local09
2b370     2C 30 06 F1 | 	add	local06, #44
2b374     18 4F 62 FC | 	wrlong	local21, local06
2b378     2C 30 86 F1 | 	sub	local06, #44
2b37c     1C 00 90 FD | 	jmp	#LR__3950
2b380                 | LR__3949
2b380     01 32 06 F6 | 	mov	local07, #1
2b384     F2 12 02 F6 | 	mov	arg01, objptr
2b388     00 68 05 FF 
2b38c     00 12 46 F5 | 	or	arg01, ##181403648
2b390     2C 30 06 F1 | 	add	local06, #44
2b394     18 13 62 FC | 	wrlong	arg01, local06
2b398     2C 30 86 F1 | 	sub	local06, #44
2b39c                 | LR__3950
2b39c                 | LR__3951
2b39c                 | LR__3952
2b39c     00 32 0E F2 | 	cmp	local07, #0 wz
2b3a0     18 13 02 56 |  if_ne	mov	arg01, local06
2b3a4     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2b3a8     00 4A 0E F2 | 	cmp	local19, #0 wz
2b3ac     00 12 06 A6 |  if_e	mov	arg01, #0
2b3b0     10 00 90 5D |  if_ne	jmp	#LR__3953
2b3b4     00 12 4E F2 | 	cmps	arg01, #0 wz
2b3b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b3bc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2b3c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b3c4                 | LR__3953
2b3c4     25 FB 01 F6 | 	mov	result1, local19
2b3c8                 | LR__3954
2b3c8     A7 F0 03 F6 | 	mov	ptra, fp
2b3cc     B2 00 A0 FD | 	call	#popregs_
2b3d0                 | __system___openraw_ret
2b3d0     2D 00 64 FD | 	ret
2b3d4                 | 
2b3d4                 | __system___closeraw
2b3d4     05 4A 05 F6 | 	mov	COUNT_, #5
2b3d8     A8 00 A0 FD | 	call	#pushregs_
2b3dc     09 27 02 F6 | 	mov	local01, arg01
2b3e0     00 28 06 F6 | 	mov	local02, #0
2b3e4     08 26 06 F1 | 	add	local01, #8
2b3e8     13 FB 09 FB | 	rdlong	result1, local01 wz
2b3ec     08 26 86 F1 | 	sub	local01, #8
2b3f0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b3f4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2b3f8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b3fc     01 FA 65 A6 |  if_e	neg	result1, #1
2b400     A8 00 90 AD |  if_e	jmp	#LR__3962
2b404     2C 26 06 F1 | 	add	local01, #44
2b408     13 FB 09 FB | 	rdlong	result1, local01 wz
2b40c     2C 26 86 F1 | 	sub	local01, #44
2b410     38 00 90 AD |  if_e	jmp	#LR__3960
2b414     2C 26 06 F1 | 	add	local01, #44
2b418     13 2B 02 FB | 	rdlong	local03, local01
2b41c     15 2D 02 F6 | 	mov	local04, local03
2b420     2C 26 86 F1 | 	sub	local01, #44
2b424     13 2C 46 F7 | 	zerox	local04, #19
2b428     14 2A 46 F0 | 	shr	local03, #20
2b42c     02 2A 66 F0 | 	shl	local03, #2
2b430     ED 2A 02 F1 | 	add	local03, __methods__
2b434     15 2B 02 FB | 	rdlong	local03, local03
2b438     13 13 02 F6 | 	mov	arg01, local01
2b43c     F2 2E 02 F6 | 	mov	local05, objptr
2b440     16 E5 01 F6 | 	mov	objptr, local04
2b444     2D 2A 62 FD | 	call	local03
2b448     17 E5 01 F6 | 	mov	objptr, local05
2b44c                 | LR__3960
2b44c     24 26 06 F1 | 	add	local01, #36
2b450     13 2F 0A FB | 	rdlong	local05, local01 wz
2b454     24 26 86 F1 | 	sub	local01, #36
2b458     3C 00 90 AD |  if_e	jmp	#LR__3961
2b45c     24 26 06 F1 | 	add	local01, #36
2b460     13 2B 02 FB | 	rdlong	local03, local01
2b464     15 2D 02 F6 | 	mov	local04, local03
2b468     24 26 86 F1 | 	sub	local01, #36
2b46c     13 2C 46 F7 | 	zerox	local04, #19
2b470     14 2A 46 F0 | 	shr	local03, #20
2b474     02 2A 66 F0 | 	shl	local03, #2
2b478     ED 2A 02 F1 | 	add	local03, __methods__
2b47c     15 2B 02 FB | 	rdlong	local03, local03
2b480     13 13 02 F6 | 	mov	arg01, local01
2b484     F2 2E 02 F6 | 	mov	local05, objptr
2b488     16 E5 01 F6 | 	mov	objptr, local04
2b48c     2D 2A 62 FD | 	call	local03
2b490     17 E5 01 F6 | 	mov	objptr, local05
2b494     FD 28 02 F6 | 	mov	local02, result1
2b498                 | LR__3961
2b498     13 13 02 F6 | 	mov	arg01, local01
2b49c     00 14 06 F6 | 	mov	arg02, #0
2b4a0     34 16 06 F6 | 	mov	arg03, #52
2b4a4     98 00 A0 FD | 	call	#\builtin_bytefill_
2b4a8     14 FB 01 F6 | 	mov	result1, local02
2b4ac                 | LR__3962
2b4ac     A7 F0 03 F6 | 	mov	ptra, fp
2b4b0     B2 00 A0 FD | 	call	#popregs_
2b4b4                 | __system___closeraw_ret
2b4b4     2D 00 64 FD | 	ret
2b4b8                 | 
2b4b8                 | __system___vfs_open_sdcardx
2b4b8     0B 4A 05 F6 | 	mov	COUNT_, #11
2b4bc     A8 00 A0 FD | 	call	#pushregs_
2b4c0     09 2B 02 F6 | 	mov	local03, arg01
2b4c4     0A 2D 02 F6 | 	mov	local04, arg02
2b4c8     0B 2F 02 F6 | 	mov	local05, arg03
2b4cc     0C 31 02 F6 | 	mov	local06, arg04
2b4d0     01 00 00 FF 
2b4d4     24 12 06 F6 | 	mov	arg01, ##548
2b4d8     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2b4dc     FD 32 02 F6 | 	mov	local07, result1
2b4e0     01 00 00 FF 
2b4e4     34 12 06 F6 | 	mov	arg01, ##564
2b4e8     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2b4ec     FD 34 02 F6 | 	mov	local08, result1
2b4f0     15 19 02 F6 | 	mov	arg04, local03
2b4f4     1F 18 C6 F0 | 	sar	arg04, #31
2b4f8     15 17 02 F6 | 	mov	arg03, local03
2b4fc     01 12 06 F6 | 	mov	arg01, #1
2b500     00 14 06 F6 | 	mov	arg02, #0
2b504     EC DB BF FD | 	call	#__system___int64_shl
2b508     FD 26 02 F6 | 	mov	local01, result1
2b50c     FE 36 02 F6 | 	mov	local09, result2
2b510     16 19 02 F6 | 	mov	arg04, local04
2b514     1F 18 C6 F0 | 	sar	arg04, #31
2b518     16 17 02 F6 | 	mov	arg03, local04
2b51c     01 12 06 F6 | 	mov	arg01, #1
2b520     00 14 06 F6 | 	mov	arg02, #0
2b524     CC DB BF FD | 	call	#__system___int64_shl
2b528     FD 26 42 F5 | 	or	local01, result1
2b52c     FE 36 42 F5 | 	or	local09, result2
2b530     17 19 02 F6 | 	mov	arg04, local05
2b534     1F 18 C6 F0 | 	sar	arg04, #31
2b538     17 17 02 F6 | 	mov	arg03, local05
2b53c     01 12 06 F6 | 	mov	arg01, #1
2b540     00 14 06 F6 | 	mov	arg02, #0
2b544     AC DB BF FD | 	call	#__system___int64_shl
2b548     FD 26 42 F5 | 	or	local01, result1
2b54c     FE 36 42 F5 | 	or	local09, result2
2b550     18 19 02 F6 | 	mov	arg04, local06
2b554     1F 18 C6 F0 | 	sar	arg04, #31
2b558     18 17 02 F6 | 	mov	arg03, local06
2b55c     01 12 06 F6 | 	mov	arg01, #1
2b560     00 14 06 F6 | 	mov	arg02, #0
2b564     8C DB BF FD | 	call	#__system___int64_shl
2b568     1B 15 02 F6 | 	mov	arg02, local09
2b56c     FD 26 42 F5 | 	or	local01, result1
2b570     0A FD 41 F5 | 	or	result2, arg02
2b574     FE 28 02 F6 | 	mov	local02, result2
2b578     13 13 02 F6 | 	mov	arg01, local01
2b57c     14 15 02 F6 | 	mov	arg02, local02
2b580     A8 DB BF FD | 	call	#__system___usepins
2b584     00 FA 0D F2 | 	cmp	result1, #0 wz
2b588     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b58c     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2b590     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b594     00 FA 05 A6 |  if_e	mov	result1, #0
2b598     B4 00 90 AD |  if_e	jmp	#LR__3972
2b59c     13 39 02 F6 | 	mov	local10, local01
2b5a0     14 37 02 F6 | 	mov	local09, local02
2b5a4     01 00 00 FF 
2b5a8     08 32 06 F1 | 	add	local07, ##520
2b5ac     19 39 62 FC | 	wrlong	local10, local07
2b5b0     04 32 06 F1 | 	add	local07, #4
2b5b4     19 37 62 FC | 	wrlong	local09, local07
2b5b8     01 00 00 FF 
2b5bc     0C 32 86 F1 | 	sub	local07, ##524
2b5c0     18 1B 02 F6 | 	mov	arg05, local06
2b5c4     00 12 06 F6 | 	mov	arg01, #0
2b5c8     15 15 02 F6 | 	mov	arg02, local03
2b5cc     16 17 02 F6 | 	mov	arg03, local04
2b5d0     17 19 02 F6 | 	mov	arg04, local05
2b5d4     F2 38 02 F6 | 	mov	local10, objptr
2b5d8     19 E5 01 F6 | 	mov	objptr, local07
2b5dc     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2b5e0     1C E5 01 F6 | 	mov	objptr, local10
2b5e4     FD 3A 0A F6 | 	mov	local11, result1 wz
2b5e8     24 00 90 5D |  if_ne	jmp	#LR__3970
2b5ec     B1 01 00 FF 
2b5f0     AA 14 06 F6 | 	mov	arg02, ##@LR__5387
2b5f4     1A 13 02 F6 | 	mov	arg01, local08
2b5f8     00 16 06 F6 | 	mov	arg03, #0
2b5fc     F2 3A 02 F6 | 	mov	local11, objptr
2b600     19 E5 01 F6 | 	mov	objptr, local07
2b604     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
2b608     1D E5 01 F6 | 	mov	objptr, local11
2b60c     FD 3A 02 F6 | 	mov	local11, result1
2b610                 | LR__3970
2b610     00 3A 0E F2 | 	cmp	local11, #0 wz
2b614     24 00 90 AD |  if_e	jmp	#LR__3971
2b618     13 13 02 F6 | 	mov	arg01, local01
2b61c     14 15 02 F6 | 	mov	arg02, local02
2b620     5C DB BF FD | 	call	#__system___freepins
2b624     1D 13 6A F6 | 	neg	arg01, local11 wz
2b628     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b62c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2b630     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b634     00 FA 05 F6 | 	mov	result1, #0
2b638     14 00 90 FD | 	jmp	#LR__3972
2b63c                 | LR__3971
2b63c     19 13 02 F6 | 	mov	arg01, local07
2b640     F2 3A 02 F6 | 	mov	local11, objptr
2b644     19 E5 01 F6 | 	mov	objptr, local07
2b648     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
2b64c     1D E5 01 F6 | 	mov	objptr, local11
2b650                 | LR__3972
2b650     A7 F0 03 F6 | 	mov	ptra, fp
2b654     B2 00 A0 FD | 	call	#popregs_
2b658                 | __system___vfs_open_sdcardx_ret
2b658     2D 00 64 FD | 	ret
2b65c                 | 
2b65c                 | __system____default_getc
2b65c     03 4A 05 F6 | 	mov	COUNT_, #3
2b660     A8 00 A0 FD | 	call	#pushregs_
2b664     09 27 02 F6 | 	mov	local01, arg01
2b668     13 29 02 FB | 	rdlong	local02, local01
2b66c     08 28 06 F1 | 	add	local02, #8
2b670     14 2B 02 FB | 	rdlong	local03, local02
2b674     02 2A CE F7 | 	test	local03, #2 wz
2b678     13 13 02 56 |  if_ne	mov	arg01, local01
2b67c     00 01 B0 5D |  if_ne	call	#__system____default_flush
2b680     14 2B 02 FB | 	rdlong	local03, local02
2b684     01 2A 46 F5 | 	or	local03, #1
2b688     14 2B 62 FC | 	wrlong	local03, local02
2b68c     08 28 86 F1 | 	sub	local02, #8
2b690     14 2B 0A FB | 	rdlong	local03, local02 wz
2b694     0C 00 90 5D |  if_ne	jmp	#LR__3980
2b698     13 13 02 F6 | 	mov	arg01, local01
2b69c     68 18 B0 FD | 	call	#__system____default_filbuf
2b6a0     FD 2A 02 F6 | 	mov	local03, result1
2b6a4                 | LR__3980
2b6a4     01 2A 56 F2 | 	cmps	local03, #1 wc
2b6a8     01 FA 65 C6 |  if_b	neg	result1, #1
2b6ac     1C 00 90 CD |  if_b	jmp	#LR__3981
2b6b0     01 2A 86 F1 | 	sub	local03, #1
2b6b4     14 2B 62 FC | 	wrlong	local03, local02
2b6b8     04 28 06 F1 | 	add	local02, #4
2b6bc     14 2B 02 FB | 	rdlong	local03, local02
2b6c0     15 FB C1 FA | 	rdbyte	result1, local03
2b6c4     01 2A 06 F1 | 	add	local03, #1
2b6c8     14 2B 62 FC | 	wrlong	local03, local02
2b6cc                 | LR__3981
2b6cc     A7 F0 03 F6 | 	mov	ptra, fp
2b6d0     B2 00 A0 FD | 	call	#popregs_
2b6d4                 | __system____default_getc_ret
2b6d4     2D 00 64 FD | 	ret
2b6d8                 | 
2b6d8                 | __system____default_putc
2b6d8     06 4A 05 F6 | 	mov	COUNT_, #6
2b6dc     A8 00 A0 FD | 	call	#pushregs_
2b6e0     09 27 02 F6 | 	mov	local01, arg01
2b6e4     0A 29 02 F6 | 	mov	local02, arg02
2b6e8     14 2B 02 FB | 	rdlong	local03, local02
2b6ec     08 2A 06 F1 | 	add	local03, #8
2b6f0     15 FB 01 FB | 	rdlong	result1, local03
2b6f4     01 FA CD F7 | 	test	result1, #1 wz
2b6f8     14 13 02 56 |  if_ne	mov	arg01, local02
2b6fc     80 00 B0 5D |  if_ne	call	#__system____default_flush
2b700     15 2D 02 FB | 	rdlong	local04, local03
2b704     02 2C 46 F5 | 	or	local04, #2
2b708     15 2D 62 FC | 	wrlong	local04, local03
2b70c     08 2A 86 F1 | 	sub	local03, #8
2b710     15 2F 02 FB | 	rdlong	local05, local03
2b714     10 2A 06 F1 | 	add	local03, #16
2b718     15 15 02 FB | 	rdlong	arg02, local03
2b71c     10 2A 86 F1 | 	sub	local03, #16
2b720     17 FB 01 F6 | 	mov	result1, local05
2b724     0A FB 01 F1 | 	add	result1, arg02
2b728     FD 26 42 FC | 	wrbyte	local01, result1
2b72c     13 27 E2 F8 | 	getbyte	local01, local01, #0
2b730     01 2E 06 F1 | 	add	local05, #1
2b734     15 2F 62 FC | 	wrlong	local05, local03
2b738     06 28 06 F1 | 	add	local02, #6
2b73c     14 31 EA FA | 	rdword	local06, local02 wz
2b740     06 28 86 F1 | 	sub	local02, #6
2b744     0C 2A 06 51 |  if_ne	add	local03, #12
2b748     15 2D 02 5B |  if_ne	rdlong	local04, local03
2b74c     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2b750     0C 00 90 AD |  if_e	jmp	#LR__3990
2b754     0A 26 0E F2 | 	cmp	local01, #10 wz
2b758     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2b75c     10 00 90 5D |  if_ne	jmp	#LR__3991
2b760                 | LR__3990
2b760     14 13 02 F6 | 	mov	arg01, local02
2b764     18 00 B0 FD | 	call	#__system____default_flush
2b768     00 FA 0D F2 | 	cmp	result1, #0 wz
2b76c     01 26 66 56 |  if_ne	neg	local01, #1
2b770                 | LR__3991
2b770     13 FB 01 F6 | 	mov	result1, local01
2b774     A7 F0 03 F6 | 	mov	ptra, fp
2b778     B2 00 A0 FD | 	call	#popregs_
2b77c                 | __system____default_putc_ret
2b77c     2D 00 64 FD | 	ret
2b780                 | 
2b780                 | __system____default_flush
2b780     06 4A 05 F6 | 	mov	COUNT_, #6
2b784     A8 00 A0 FD | 	call	#pushregs_
2b788     09 27 02 F6 | 	mov	local01, arg01
2b78c     13 29 02 FB | 	rdlong	local02, local01
2b790     14 2B 02 FB | 	rdlong	local03, local02
2b794     08 28 06 F1 | 	add	local02, #8
2b798     14 FB 01 FB | 	rdlong	result1, local02
2b79c     08 28 86 F1 | 	sub	local02, #8
2b7a0     02 FA CD F7 | 	test	result1, #2 wz
2b7a4     D0 00 90 AD |  if_e	jmp	#LR__4002
2b7a8     01 2A 56 F2 | 	cmps	local03, #1 wc
2b7ac     20 01 90 CD |  if_b	jmp	#LR__4004
2b7b0     08 26 06 F1 | 	add	local01, #8
2b7b4     13 FB 01 FB | 	rdlong	result1, local01
2b7b8     08 26 86 F1 | 	sub	local01, #8
2b7bc     40 FA CD F7 | 	test	result1, #64 wz
2b7c0     68 00 90 AD |  if_e	jmp	#LR__4001
2b7c4     08 26 06 F1 | 	add	local01, #8
2b7c8     13 17 02 FB | 	rdlong	arg03, local01
2b7cc     08 26 86 F1 | 	sub	local01, #8
2b7d0     80 16 CE F7 | 	test	arg03, #128 wz
2b7d4     54 00 90 AD |  if_e	jmp	#LR__4000
2b7d8     30 26 06 F1 | 	add	local01, #48
2b7dc     13 2D 02 FB | 	rdlong	local04, local01
2b7e0     16 2F 02 F6 | 	mov	local05, local04
2b7e4     30 26 86 F1 | 	sub	local01, #48
2b7e8     13 2E 46 F7 | 	zerox	local05, #19
2b7ec     14 2C 46 F0 | 	shr	local04, #20
2b7f0     02 2C 66 F0 | 	shl	local04, #2
2b7f4     ED 2C 02 F1 | 	add	local04, __methods__
2b7f8     16 2D 02 FB | 	rdlong	local04, local04
2b7fc     13 13 02 F6 | 	mov	arg01, local01
2b800     00 14 06 F6 | 	mov	arg02, #0
2b804     02 16 06 F6 | 	mov	arg03, #2
2b808     F2 30 02 F6 | 	mov	local06, objptr
2b80c     17 E5 01 F6 | 	mov	objptr, local05
2b810     2D 2C 62 FD | 	call	local04
2b814     18 E5 01 F6 | 	mov	objptr, local06
2b818     08 26 06 F1 | 	add	local01, #8
2b81c     13 31 02 FB | 	rdlong	local06, local01
2b820     80 30 26 F5 | 	andn	local06, #128
2b824     13 31 62 FC | 	wrlong	local06, local01
2b828     08 26 86 F1 | 	sub	local01, #8
2b82c                 | LR__4000
2b82c                 | LR__4001
2b82c     18 26 06 F1 | 	add	local01, #24
2b830     13 2D 02 FB | 	rdlong	local04, local01
2b834     16 2F 02 F6 | 	mov	local05, local04
2b838     18 26 86 F1 | 	sub	local01, #24
2b83c     13 2E 46 F7 | 	zerox	local05, #19
2b840     14 2C 46 F0 | 	shr	local04, #20
2b844     02 2C 66 F0 | 	shl	local04, #2
2b848     ED 2C 02 F1 | 	add	local04, __methods__
2b84c     16 2D 02 FB | 	rdlong	local04, local04
2b850     10 28 06 F1 | 	add	local02, #16
2b854     14 15 02 FB | 	rdlong	arg02, local02
2b858     10 28 86 F1 | 	sub	local02, #16
2b85c     13 13 02 F6 | 	mov	arg01, local01
2b860     15 17 02 F6 | 	mov	arg03, local03
2b864     F2 30 02 F6 | 	mov	local06, objptr
2b868     17 E5 01 F6 | 	mov	objptr, local05
2b86c     2D 2C 62 FD | 	call	local04
2b870     18 E5 01 F6 | 	mov	objptr, local06
2b874     58 00 90 FD | 	jmp	#LR__4004
2b878                 | LR__4002
2b878     08 28 06 F1 | 	add	local02, #8
2b87c     14 31 02 FB | 	rdlong	local06, local02
2b880     08 28 86 F1 | 	sub	local02, #8
2b884     01 30 CE F7 | 	test	local06, #1 wz
2b888     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2b88c     40 00 90 AD |  if_e	jmp	#LR__4003
2b890     30 26 06 F1 | 	add	local01, #48
2b894     13 2D 02 FB | 	rdlong	local04, local01
2b898     16 2F 02 F6 | 	mov	local05, local04
2b89c     30 26 86 F1 | 	sub	local01, #48
2b8a0     13 2E 46 F7 | 	zerox	local05, #19
2b8a4     14 2C 46 F0 | 	shr	local04, #20
2b8a8     02 2C 66 F0 | 	shl	local04, #2
2b8ac     ED 2C 02 F1 | 	add	local04, __methods__
2b8b0     16 2D 02 FB | 	rdlong	local04, local04
2b8b4     13 13 02 F6 | 	mov	arg01, local01
2b8b8     15 15 62 F6 | 	neg	arg02, local03
2b8bc     01 16 06 F6 | 	mov	arg03, #1
2b8c0     F2 30 02 F6 | 	mov	local06, objptr
2b8c4     17 E5 01 F6 | 	mov	objptr, local05
2b8c8     2D 2C 62 FD | 	call	local04
2b8cc     18 E5 01 F6 | 	mov	objptr, local06
2b8d0                 | LR__4003
2b8d0                 | LR__4004
2b8d0     14 01 68 FC | 	wrlong	#0, local02
2b8d4     04 28 06 F1 | 	add	local02, #4
2b8d8     14 01 68 FC | 	wrlong	#0, local02
2b8dc     04 28 06 F1 | 	add	local02, #4
2b8e0     14 01 68 FC | 	wrlong	#0, local02
2b8e4     00 FA 05 F6 | 	mov	result1, #0
2b8e8     A7 F0 03 F6 | 	mov	ptra, fp
2b8ec     B2 00 A0 FD | 	call	#popregs_
2b8f0                 | __system____default_flush_ret
2b8f0     2D 00 64 FD | 	ret
2b8f4                 | 
2b8f4                 | __system____default_buffer_init
2b8f4     02 4A 05 F6 | 	mov	COUNT_, #2
2b8f8     A8 00 A0 FD | 	call	#pushregs_
2b8fc     09 27 02 F6 | 	mov	local01, arg01
2b900     13 29 02 FB | 	rdlong	local02, local01
2b904     13 13 02 F6 | 	mov	arg01, local01
2b908     34 03 B0 FD | 	call	#__system___isatty
2b90c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b910     06 26 06 51 |  if_ne	add	local01, #6
2b914     13 0B 58 5C |  if_ne	wrword	#5, local01
2b918     06 26 06 A1 |  if_e	add	local01, #6
2b91c     13 0D 58 AC |  if_e	wrword	#6, local01
2b920     14 28 06 F1 | 	add	local02, #20
2b924     14 27 02 F6 | 	mov	local01, local02
2b928     04 28 86 F1 | 	sub	local02, #4
2b92c     14 27 62 FC | 	wrlong	local01, local02
2b930     04 28 86 F1 | 	sub	local02, #4
2b934     02 00 80 FF 
2b938     14 01 68 FC | 	wrlong	##1024, local02
2b93c     00 FA 05 F6 | 	mov	result1, #0
2b940     A7 F0 03 F6 | 	mov	ptra, fp
2b944     B2 00 A0 FD | 	call	#popregs_
2b948                 | __system____default_buffer_init_ret
2b948     2D 00 64 FD | 	ret
2b94c                 | 
2b94c                 | __system__stat
2b94c     04 4A 05 F6 | 	mov	COUNT_, #4
2b950     A8 00 A0 FD | 	call	#pushregs_
2b954     0A 27 02 F6 | 	mov	local01, arg02
2b958     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2b95c     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2b960     09 15 02 F6 | 	mov	arg02, arg01
2b964     14 13 02 F6 | 	mov	arg01, local02
2b968     00 16 06 F6 | 	mov	arg03, #0
2b96c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2b970     58 B5 BF FD | 	call	#__system____getvfsforfile
2b974     FD 2A 0A F6 | 	mov	local03, result1 wz
2b978     10 00 90 AD |  if_e	jmp	#LR__4010
2b97c     34 2A 06 F1 | 	add	local03, #52
2b980     15 17 0A FB | 	rdlong	arg03, local03 wz
2b984     34 2A 86 F1 | 	sub	local03, #52
2b988     14 00 90 5D |  if_ne	jmp	#LR__4011
2b98c                 | LR__4010
2b98c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b990     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2b994     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b998     01 FA 65 F6 | 	neg	result1, #1
2b99c     68 00 90 FD | 	jmp	#LR__4012
2b9a0                 | LR__4011
2b9a0     13 13 02 F6 | 	mov	arg01, local01
2b9a4     00 14 06 F6 | 	mov	arg02, #0
2b9a8     30 16 06 F6 | 	mov	arg03, #48
2b9ac     09 2D 02 F6 | 	mov	local04, arg01
2b9b0     98 00 A0 FD | 	call	#\builtin_bytefill_
2b9b4     16 FB 01 F6 | 	mov	result1, local04
2b9b8     14 13 CA FA | 	rdbyte	arg01, local02 wz
2b9bc     08 26 06 A1 |  if_e	add	local01, #8
2b9c0     08 00 80 AF 
2b9c4     13 FF 6B AC |  if_e	wrlong	##4607, local01
2b9c8     00 FA 05 A6 |  if_e	mov	result1, #0
2b9cc     38 00 90 AD |  if_e	jmp	#LR__4012
2b9d0     34 2A 06 F1 | 	add	local03, #52
2b9d4     15 2B 02 FB | 	rdlong	local03, local03
2b9d8     15 2D 02 F6 | 	mov	local04, local03
2b9dc     13 2A 46 F7 | 	zerox	local03, #19
2b9e0     14 2C 46 F0 | 	shr	local04, #20
2b9e4     02 2C 66 F0 | 	shl	local04, #2
2b9e8     ED 2C 02 F1 | 	add	local04, __methods__
2b9ec     16 2D 02 FB | 	rdlong	local04, local04
2b9f0     14 13 02 F6 | 	mov	arg01, local02
2b9f4     13 15 02 F6 | 	mov	arg02, local01
2b9f8     F2 28 02 F6 | 	mov	local02, objptr
2b9fc     15 E5 01 F6 | 	mov	objptr, local03
2ba00     2D 2C 62 FD | 	call	local04
2ba04     14 E5 01 F6 | 	mov	objptr, local02
2ba08                 | LR__4012
2ba08     A7 F0 03 F6 | 	mov	ptra, fp
2ba0c     B2 00 A0 FD | 	call	#popregs_
2ba10                 | __system__stat_ret
2ba10     2D 00 64 FD | 	ret
2ba14                 | 
2ba14                 | __system__write
2ba14     0A 12 16 F2 | 	cmp	arg01, #10 wc
2ba18     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2ba1c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2ba20     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2ba24     01 FA 65 36 |  if_ae	neg	result1, #1
2ba28     20 00 90 3D |  if_ae	jmp	#LR__4020
2ba2c     34 12 06 FD | 	qmul	arg01, #52
2ba30     02 00 00 FF 
2ba34     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2ba38     18 12 62 FD | 	getqx	arg01
2ba3c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2ba40     02 00 00 FF 
2ba44     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2ba48     0C 10 B0 FD | 	call	#__system___vfswrite
2ba4c                 | LR__4020
2ba4c                 | __system__write_ret
2ba4c     2D 00 64 FD | 	ret
2ba50                 | 
2ba50                 | __system__read
2ba50     0A 12 16 F2 | 	cmp	arg01, #10 wc
2ba54     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2ba58     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2ba5c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2ba60     01 FA 65 36 |  if_ae	neg	result1, #1
2ba64     20 00 90 3D |  if_ae	jmp	#LR__4030
2ba68     34 12 06 FD | 	qmul	arg01, #52
2ba6c     02 00 00 FF 
2ba70     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2ba74     18 12 62 FD | 	getqx	arg01
2ba78     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2ba7c     02 00 00 FF 
2ba80     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2ba84     98 11 B0 FD | 	call	#__system___vfsread
2ba88                 | LR__4030
2ba88                 | __system__read_ret
2ba88     2D 00 64 FD | 	ret
2ba8c                 | 
2ba8c                 | __system__close
2ba8c     0A 12 16 F2 | 	cmp	arg01, #10 wc
2ba90     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2ba94     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2ba98     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2ba9c     01 FA 65 36 |  if_ae	neg	result1, #1
2baa0     20 00 90 3D |  if_ae	jmp	#LR__4040
2baa4     34 12 06 FD | 	qmul	arg01, #52
2baa8     02 00 00 FF 
2baac     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2bab0     18 12 62 FD | 	getqx	arg01
2bab4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2bab8     02 00 00 FF 
2babc     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2bac0     10 F9 BF FD | 	call	#__system___closeraw
2bac4                 | LR__4040
2bac4                 | __system__close_ret
2bac4     2D 00 64 FD | 	ret
2bac8                 | 
2bac8                 | __system__lseek
2bac8     06 4A 05 F6 | 	mov	COUNT_, #6
2bacc     A8 00 A0 FD | 	call	#pushregs_
2bad0     0A 12 16 F2 | 	cmp	arg01, #10 wc
2bad4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2bad8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2badc     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2bae0     01 FA 65 36 |  if_ae	neg	result1, #1
2bae4     C4 00 90 3D |  if_ae	jmp	#LR__4051
2bae8     34 12 06 FD | 	qmul	arg01, #52
2baec     02 00 00 FF 
2baf0     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2baf4     18 26 62 FD | 	getqx	local01
2baf8     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2bafc     30 26 06 F1 | 	add	local01, #48
2bb00     13 13 0A FB | 	rdlong	arg01, local01 wz
2bb04     30 26 86 F1 | 	sub	local01, #48
2bb08     02 00 00 FF 
2bb0c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2bb10     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bb14     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2bb18     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bb1c     01 FA 65 A6 |  if_e	neg	result1, #1
2bb20     88 00 90 AD |  if_e	jmp	#LR__4051
2bb24     08 26 06 F1 | 	add	local01, #8
2bb28     13 29 02 FB | 	rdlong	local02, local01
2bb2c     08 26 86 F1 | 	sub	local01, #8
2bb30     40 28 CE F7 | 	test	local02, #64 wz
2bb34     08 26 06 51 |  if_ne	add	local01, #8
2bb38     13 29 02 5B |  if_ne	rdlong	local02, local01
2bb3c     80 28 46 55 |  if_ne	or	local02, #128
2bb40     13 29 62 5C |  if_ne	wrlong	local02, local01
2bb44     08 26 86 51 |  if_ne	sub	local01, #8
2bb48     30 26 06 F1 | 	add	local01, #48
2bb4c     13 2B 02 FB | 	rdlong	local03, local01
2bb50     15 2D 02 F6 | 	mov	local04, local03
2bb54     30 26 86 F1 | 	sub	local01, #48
2bb58     13 2C 46 F7 | 	zerox	local04, #19
2bb5c     14 2A 46 F0 | 	shr	local03, #20
2bb60     02 2A 66 F0 | 	shl	local03, #2
2bb64     ED 2A 02 F1 | 	add	local03, __methods__
2bb68     15 2B 02 FB | 	rdlong	local03, local03
2bb6c     13 13 02 F6 | 	mov	arg01, local01
2bb70     F2 2E 02 F6 | 	mov	local05, objptr
2bb74     16 E5 01 F6 | 	mov	objptr, local04
2bb78     2D 2A 62 FD | 	call	local03
2bb7c     17 E5 01 F6 | 	mov	objptr, local05
2bb80     FD 30 02 F6 | 	mov	local06, result1
2bb84     00 30 56 F2 | 	cmps	local06, #0 wc
2bb88     1C 00 90 3D |  if_ae	jmp	#LR__4050
2bb8c     18 13 6A F6 | 	neg	arg01, local06 wz
2bb90     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bb94     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2bb98     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bb9c     01 FA 65 56 |  if_ne	neg	result1, #1
2bba0     00 FA 05 A6 |  if_e	mov	result1, #0
2bba4     04 00 90 FD | 	jmp	#LR__4051
2bba8                 | LR__4050
2bba8     18 FB 01 F6 | 	mov	result1, local06
2bbac                 | LR__4051
2bbac     A7 F0 03 F6 | 	mov	ptra, fp
2bbb0     B2 00 A0 FD | 	call	#popregs_
2bbb4                 | __system__lseek_ret
2bbb4     2D 00 64 FD | 	ret
2bbb8                 | 
2bbb8                 | __system___ioctl
2bbb8     03 4A 05 F6 | 	mov	COUNT_, #3
2bbbc     A8 00 A0 FD | 	call	#pushregs_
2bbc0     00 12 4E F2 | 	cmps	arg01, #0 wz
2bbc4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bbc8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2bbcc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bbd0     01 FA 65 A6 |  if_e	neg	result1, #1
2bbd4     5C 00 90 AD |  if_e	jmp	#LR__4061
2bbd8     28 12 06 F1 | 	add	arg01, #40
2bbdc     09 27 02 FB | 	rdlong	local01, arg01
2bbe0     13 29 02 F6 | 	mov	local02, local01
2bbe4     28 12 86 F1 | 	sub	arg01, #40
2bbe8     13 28 46 F7 | 	zerox	local02, #19
2bbec     14 26 46 F0 | 	shr	local01, #20
2bbf0     02 26 66 F0 | 	shl	local01, #2
2bbf4     ED 26 02 F1 | 	add	local01, __methods__
2bbf8     13 27 02 FB | 	rdlong	local01, local01
2bbfc     F2 2A 02 F6 | 	mov	local03, objptr
2bc00     14 E5 01 F6 | 	mov	objptr, local02
2bc04     2D 26 62 FD | 	call	local01
2bc08     15 E5 01 F6 | 	mov	objptr, local03
2bc0c     FD 12 0A F6 | 	mov	arg01, result1 wz
2bc10     1C 00 90 AD |  if_e	jmp	#LR__4060
2bc14     00 12 4E F2 | 	cmps	arg01, #0 wz
2bc18     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bc1c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2bc20     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bc24     01 FA 65 56 |  if_ne	neg	result1, #1
2bc28     00 FA 05 A6 |  if_e	mov	result1, #0
2bc2c     04 00 90 FD | 	jmp	#LR__4061
2bc30                 | LR__4060
2bc30     00 FA 05 F6 | 	mov	result1, #0
2bc34                 | LR__4061
2bc34     A7 F0 03 F6 | 	mov	ptra, fp
2bc38     B2 00 A0 FD | 	call	#popregs_
2bc3c                 | __system___ioctl_ret
2bc3c     2D 00 64 FD | 	ret
2bc40                 | 
2bc40                 | __system___isatty
2bc40     00 4A 05 F6 | 	mov	COUNT_, #0
2bc44     A8 00 A0 FD | 	call	#pushregs_
2bc48     0C F0 07 F1 | 	add	ptra, #12
2bc4c     04 4E 05 F1 | 	add	fp, #4
2bc50     A7 12 62 FC | 	wrlong	arg01, fp
2bc54     04 4E 05 F1 | 	add	fp, #4
2bc58     A7 16 02 F6 | 	mov	arg03, fp
2bc5c     08 4E 85 F1 | 	sub	fp, #8
2bc60     00 15 06 F6 | 	mov	arg02, #256
2bc64     50 FF BF FD | 	call	#__system___ioctl
2bc68     00 FA 0D F2 | 	cmp	result1, #0 wz
2bc6c     01 FA 05 A6 |  if_e	mov	result1, #1
2bc70     00 FA 05 56 |  if_ne	mov	result1, #0
2bc74     A7 F0 03 F6 | 	mov	ptra, fp
2bc78     B2 00 A0 FD | 	call	#popregs_
2bc7c                 | __system___isatty_ret
2bc7c     2D 00 64 FD | 	ret
2bc80                 | 
2bc80                 | __system____getftab
2bc80     0A 12 16 F2 | 	cmp	arg01, #10 wc
2bc84     34 12 06 CD |  if_b	qmul	arg01, #52
2bc88     00 FA 05 36 |  if_ae	mov	result1, #0
2bc8c     02 00 00 CF 
2bc90     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2bc94     18 FA 61 CD |  if_b	getqx	result1
2bc98     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2bc9c     02 00 00 CF 
2bca0     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2bca4                 | __system____getftab_ret
2bca4     2D 00 64 FD | 	ret
2bca8                 | 
2bca8                 | __system__strncpy
2bca8     09 01 02 F6 | 	mov	_var01, arg01
2bcac                 | LR__4070
2bcac     01 16 86 F1 | 	sub	arg03, #1
2bcb0     00 16 56 F2 | 	cmps	arg03, #0 wc
2bcb4     18 00 90 CD |  if_b	jmp	#LR__4071
2bcb8     0A FB C1 FA | 	rdbyte	result1, arg02
2bcbc     00 FB 41 FC | 	wrbyte	result1, _var01
2bcc0     01 14 06 F1 | 	add	arg02, #1
2bcc4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2bcc8     01 00 06 F1 | 	add	_var01, #1
2bccc     DC FF 9F 5D |  if_ne	jmp	#LR__4070
2bcd0                 | LR__4071
2bcd0     97 0C 48 FB | 	callpa	#(@LR__4073-@LR__4072)>>2,fcache_load_ptr_
2bcd4                 | LR__4072
2bcd4     01 16 86 F1 | 	sub	arg03, #1
2bcd8     00 16 56 F2 | 	cmps	arg03, #0 wc
2bcdc     00 03 02 36 |  if_ae	mov	_var02, _var01
2bce0     01 00 06 31 |  if_ae	add	_var01, #1
2bce4     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2bce8     E8 FF 9F 3D |  if_ae	jmp	#LR__4072
2bcec                 | LR__4073
2bcec     09 FB 01 F6 | 	mov	result1, arg01
2bcf0                 | __system__strncpy_ret
2bcf0     2D 00 64 FD | 	ret
2bcf4                 | 
2bcf4                 | __system__strncat
2bcf4     00 14 4E F2 | 	cmps	arg02, #0 wz
2bcf8     50 00 90 AD |  if_e	jmp	#LR__4084
2bcfc     01 16 16 F2 | 	cmp	arg03, #1 wc
2bd00     48 00 90 CD |  if_b	jmp	#LR__4084
2bd04     09 01 02 F6 | 	mov	_var01, arg01
2bd08     97 1E 48 FB | 	callpa	#(@LR__4082-@LR__4080)>>2,fcache_load_ptr_
2bd0c                 | LR__4080
2bd0c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2bd10     01 00 06 51 |  if_ne	add	_var01, #1
2bd14     F4 FF 9F 5D |  if_ne	jmp	#LR__4080
2bd18     0B 03 02 F6 | 	mov	_var02, arg03
2bd1c                 | LR__4081
2bd1c     0A 05 C2 FA | 	rdbyte	_var03, arg02
2bd20     02 07 02 F6 | 	mov	_var04, _var03
2bd24     07 06 4E F7 | 	zerox	_var04, #7 wz
2bd28     01 14 06 F1 | 	add	arg02, #1
2bd2c     18 00 90 AD |  if_e	jmp	#LR__4083
2bd30     01 02 86 F1 | 	sub	_var02, #1
2bd34     00 02 56 F2 | 	cmps	_var02, #0 wc
2bd38     00 07 02 36 |  if_ae	mov	_var04, _var01
2bd3c     01 00 06 31 |  if_ae	add	_var01, #1
2bd40     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2bd44     D4 FF 9F 3D |  if_ae	jmp	#LR__4081
2bd48                 | LR__4082
2bd48                 | LR__4083
2bd48     00 01 48 FC | 	wrbyte	#0, _var01
2bd4c                 | LR__4084
2bd4c     09 FB 01 F6 | 	mov	result1, arg01
2bd50                 | __system__strncat_ret
2bd50     2D 00 64 FD | 	ret
2bd54                 | 
2bd54                 | __system__strncmp
2bd54     09 01 0A F6 | 	mov	_var01, arg01 wz
2bd58     14 00 90 5D |  if_ne	jmp	#LR__4090
2bd5c     00 14 0E F2 | 	cmp	arg02, #0 wz
2bd60     01 02 66 56 |  if_ne	neg	_var02, #1
2bd64     00 02 06 A6 |  if_e	mov	_var02, #0
2bd68     01 FB 01 F6 | 	mov	result1, _var02
2bd6c     74 00 90 FD | 	jmp	#__system__strncmp_ret
2bd70                 | LR__4090
2bd70     00 14 0E F2 | 	cmp	arg02, #0 wz
2bd74     01 FA 05 A6 |  if_e	mov	result1, #1
2bd78     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2bd7c     0B 05 02 F6 | 	mov	_var03, arg03
2bd80     97 16 48 FB | 	callpa	#(@LR__4092-@LR__4091)>>2,fcache_load_ptr_
2bd84                 | LR__4091
2bd84     00 07 C2 FA | 	rdbyte	_var04, _var01
2bd88     0A 09 02 F6 | 	mov	_var05, arg02
2bd8c     04 0B C2 FA | 	rdbyte	_var06, _var05
2bd90     01 04 86 F1 | 	sub	_var03, #1
2bd94     00 04 56 F2 | 	cmps	_var03, #0 wc
2bd98     01 00 06 F1 | 	add	_var01, #1
2bd9c     01 14 06 F1 | 	add	arg02, #1
2bda0     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2bda4     08 00 90 2D |  if_nc_and_z	jmp	#LR__4093
2bda8     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2bdac     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4091
2bdb0                 | LR__4092
2bdb0                 | LR__4093
2bdb0     00 04 56 F2 | 	cmps	_var03, #0 wc
2bdb4     00 FA 05 C6 |  if_b	mov	result1, #0
2bdb8     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2bdbc     05 07 0A F2 | 	cmp	_var04, _var06 wz
2bdc0     00 FA 05 A6 |  if_e	mov	result1, #0
2bdc4     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2bdc8     00 06 0E F2 | 	cmp	_var04, #0 wz
2bdcc     01 FA 65 A6 |  if_e	neg	result1, #1
2bdd0     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2bdd4     00 0A 0E F2 | 	cmp	_var06, #0 wz
2bdd8     01 FA 05 A6 |  if_e	mov	result1, #1
2bddc     03 FB 01 56 |  if_ne	mov	result1, _var04
2bde0     05 FB 81 51 |  if_ne	sub	result1, _var06
2bde4                 | __system__strncmp_ret
2bde4     2D 00 64 FD | 	ret
2bde8                 | 
2bde8                 | __system____root_opendir
2bde8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2bdec     04 12 06 F1 | 	add	arg01, #4
2bdf0     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2bdf4     00 FA 05 F6 | 	mov	result1, #0
2bdf8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2bdfc                 | __system____root_opendir_ret
2bdfc     2D 00 64 FD | 	ret
2be00                 | 
2be00                 | __system____root_readdir
2be00     03 4A 05 F6 | 	mov	COUNT_, #3
2be04     A8 00 A0 FD | 	call	#pushregs_
2be08     09 27 02 F6 | 	mov	local01, arg01
2be0c     0A 29 02 F6 | 	mov	local02, arg02
2be10     04 26 06 F1 | 	add	local01, #4
2be14     13 2B 02 FB | 	rdlong	local03, local01
2be18     04 26 86 F1 | 	sub	local01, #4
2be1c                 | LR__4100
2be1c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2be20     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2be24     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2be28     01 FA 65 A6 |  if_e	neg	result1, #1
2be2c     48 00 90 AD |  if_e	jmp	#LR__4101
2be30     15 17 0A FB | 	rdlong	arg03, local03 wz
2be34     04 2A 06 A1 |  if_e	add	local03, #4
2be38     E0 FF 9F AD |  if_e	jmp	#LR__4100
2be3c     15 15 02 FB | 	rdlong	arg02, local03
2be40     01 14 06 F1 | 	add	arg02, #1
2be44     14 13 02 F6 | 	mov	arg01, local02
2be48     40 16 06 F6 | 	mov	arg03, #64
2be4c     58 FE BF FD | 	call	#__system__strncpy
2be50     50 28 06 F1 | 	add	local02, #80
2be54     14 03 48 FC | 	wrbyte	#1, local02
2be58     08 28 86 F1 | 	sub	local02, #8
2be5c     14 01 68 FC | 	wrlong	#0, local02
2be60     04 28 06 F1 | 	add	local02, #4
2be64     14 01 68 FC | 	wrlong	#0, local02
2be68     04 2A 06 F1 | 	add	local03, #4
2be6c     04 26 06 F1 | 	add	local01, #4
2be70     13 2B 62 FC | 	wrlong	local03, local01
2be74     00 FA 05 F6 | 	mov	result1, #0
2be78                 | LR__4101
2be78     A7 F0 03 F6 | 	mov	ptra, fp
2be7c     B2 00 A0 FD | 	call	#popregs_
2be80                 | __system____root_readdir_ret
2be80     2D 00 64 FD | 	ret
2be84                 | 
2be84                 | __system____root_closedir
2be84     00 FA 05 F6 | 	mov	result1, #0
2be88                 | __system____root_closedir_ret
2be88     2D 00 64 FD | 	ret
2be8c                 | 
2be8c                 | __system____root_stat
2be8c     0A 01 02 F6 | 	mov	_var01, arg02
2be90     00 13 02 F6 | 	mov	arg01, _var01
2be94     00 14 06 F6 | 	mov	arg02, #0
2be98     30 16 06 F6 | 	mov	arg03, #48
2be9c     98 00 A0 FD | 	call	#\builtin_bytefill_
2bea0     08 00 06 F1 | 	add	_var01, #8
2bea4     08 00 80 FF 
2bea8     00 FF 6B FC | 	wrlong	##4607, _var01
2beac     00 FA 05 F6 | 	mov	result1, #0
2beb0                 | __system____root_stat_ret
2beb0     2D 00 64 FD | 	ret
2beb4                 | 
2beb4                 | __system___normalizeName
2beb4     00 00 06 F6 | 	mov	_var01, #0
2beb8     09 03 02 F6 | 	mov	_var02, arg01
2bebc     01 05 02 F6 | 	mov	_var03, _var02
2bec0                 | LR__4110
2bec0     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2bec4     5C 01 90 AD |  if_e	jmp	#LR__4129
2bec8     00 00 0E F2 | 	cmp	_var01, #0 wz
2becc     02 07 02 56 |  if_ne	mov	_var04, _var03
2bed0     01 04 06 51 |  if_ne	add	_var03, #1
2bed4     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2bed8     00 00 06 56 |  if_ne	mov	_var01, #0
2bedc     01 07 C2 FA | 	rdbyte	_var04, _var02
2bee0     2E 06 0E F2 | 	cmp	_var04, #46 wz
2bee4     D8 00 90 5D |  if_ne	jmp	#LR__4122
2bee8     01 02 06 F1 | 	add	_var02, #1
2beec     01 07 C2 FA | 	rdbyte	_var04, _var02
2bef0     01 02 86 F1 | 	sub	_var02, #1
2bef4     2F 06 0E F2 | 	cmp	_var04, #47 wz
2bef8     18 00 90 AD |  if_e	jmp	#LR__4111
2befc     01 02 06 F1 | 	add	_var02, #1
2bf00     01 09 C2 FA | 	rdbyte	_var05, _var02
2bf04     01 02 86 F1 | 	sub	_var02, #1
2bf08     04 0B 02 F6 | 	mov	_var06, _var05
2bf0c     07 0A 4E F7 | 	zerox	_var06, #7 wz
2bf10     10 00 90 5D |  if_ne	jmp	#LR__4112
2bf14                 | LR__4111
2bf14     01 0D 02 F6 | 	mov	_var07, _var02
2bf18     01 0C 06 F1 | 	add	_var07, #1
2bf1c     06 03 02 F6 | 	mov	_var02, _var07
2bf20     E0 00 90 FD | 	jmp	#LR__4126
2bf24                 | LR__4112
2bf24     01 02 06 F1 | 	add	_var02, #1
2bf28     01 0D C2 FA | 	rdbyte	_var07, _var02
2bf2c     01 02 86 F1 | 	sub	_var02, #1
2bf30     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2bf34     2E 06 0E F2 | 	cmp	_var04, #46 wz
2bf38     84 00 90 5D |  if_ne	jmp	#LR__4121
2bf3c     02 02 06 F1 | 	add	_var02, #2
2bf40     01 0D C2 FA | 	rdbyte	_var07, _var02
2bf44     02 02 86 F1 | 	sub	_var02, #2
2bf48     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2bf4c     2F 06 0E F2 | 	cmp	_var04, #47 wz
2bf50     18 00 90 AD |  if_e	jmp	#LR__4113
2bf54     02 02 06 F1 | 	add	_var02, #2
2bf58     01 09 C2 FA | 	rdbyte	_var05, _var02
2bf5c     02 02 86 F1 | 	sub	_var02, #2
2bf60     04 0B 02 F6 | 	mov	_var06, _var05
2bf64     07 0A 4E F7 | 	zerox	_var06, #7 wz
2bf68     54 00 90 5D |  if_ne	jmp	#LR__4120
2bf6c                 | LR__4113
2bf6c     02 02 06 F1 | 	add	_var02, #2
2bf70     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2bf74     40 00 90 ED |  if_be	jmp	#LR__4119
2bf78     02 0F 02 F6 | 	mov	_var08, _var03
2bf7c     01 0E 86 F1 | 	sub	_var08, #1
2bf80                 | LR__4114
2bf80     07 07 C2 FA | 	rdbyte	_var04, _var08
2bf84     2F 06 0E F2 | 	cmp	_var04, #47 wz
2bf88     0C 00 90 5D |  if_ne	jmp	#LR__4115
2bf8c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2bf90     01 0E 86 11 |  if_a	sub	_var08, #1
2bf94     E8 FF 9F 1D |  if_a	jmp	#LR__4114
2bf98                 | LR__4115
2bf98     97 0C 48 FB | 	callpa	#(@LR__4117-@LR__4116)>>2,fcache_load_ptr_
2bf9c                 | LR__4116
2bf9c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2bfa0     10 00 90 ED |  if_be	jmp	#LR__4118
2bfa4     07 07 C2 FA | 	rdbyte	_var04, _var08
2bfa8     2F 06 0E F2 | 	cmp	_var04, #47 wz
2bfac     01 0E 86 51 |  if_ne	sub	_var08, #1
2bfb0     E8 FF 9F 5D |  if_ne	jmp	#LR__4116
2bfb4                 | LR__4117
2bfb4                 | LR__4118
2bfb4     07 05 02 F6 | 	mov	_var03, _var08
2bfb8                 | LR__4119
2bfb8     01 00 06 F6 | 	mov	_var01, #1
2bfbc     44 00 90 FD | 	jmp	#LR__4126
2bfc0                 | LR__4120
2bfc0                 | LR__4121
2bfc0                 | LR__4122
2bfc0     97 18 48 FB | 	callpa	#(@LR__4124-@LR__4123)>>2,fcache_load_ptr_
2bfc4                 | LR__4123
2bfc4     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2bfc8     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2bfcc     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2bfd0     20 00 90 AD |  if_e	jmp	#LR__4125
2bfd4     01 0B 02 F6 | 	mov	_var06, _var02
2bfd8     01 09 02 F6 | 	mov	_var05, _var02
2bfdc     01 08 06 F1 | 	add	_var05, #1
2bfe0     05 11 C2 FA | 	rdbyte	_var09, _var06
2bfe4     04 03 02 F6 | 	mov	_var02, _var05
2bfe8     02 11 42 FC | 	wrbyte	_var09, _var03
2bfec     01 04 06 F1 | 	add	_var03, #1
2bff0     D0 FF 9F FD | 	jmp	#LR__4123
2bff4                 | LR__4124
2bff4                 | LR__4125
2bff4     01 07 C2 FA | 	rdbyte	_var04, _var02
2bff8     2F 06 0E F2 | 	cmp	_var04, #47 wz
2bffc     C0 FE 9F 5D |  if_ne	jmp	#LR__4110
2c000     01 00 06 F6 | 	mov	_var01, #1
2c004                 | LR__4126
2c004     97 0C 48 FB | 	callpa	#(@LR__4128-@LR__4127)>>2,fcache_load_ptr_
2c008                 | LR__4127
2c008     01 07 C2 FA | 	rdbyte	_var04, _var02
2c00c     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c010     01 0D 02 A6 |  if_e	mov	_var07, _var02
2c014     01 0C 06 A1 |  if_e	add	_var07, #1
2c018     06 03 02 A6 |  if_e	mov	_var02, _var07
2c01c     E8 FF 9F AD |  if_e	jmp	#LR__4127
2c020                 | LR__4128
2c020     9C FE 9F FD | 	jmp	#LR__4110
2c024                 | LR__4129
2c024     02 01 48 FC | 	wrbyte	#0, _var03
2c028                 | __system___normalizeName_ret
2c028     2D 00 64 FD | 	ret
2c02c                 | 
2c02c                 | __system___strrev
2c02c     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2c030     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
2c034     09 03 02 F6 | 	mov	_var02, arg01
2c038     97 1A 48 FB | 	callpa	#(@LR__4132-@LR__4130)>>2,fcache_load_ptr_
2c03c                 | LR__4130
2c03c     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2c040     01 02 06 51 |  if_ne	add	_var02, #1
2c044     F4 FF 9F 5D |  if_ne	jmp	#LR__4130
2c048     01 02 86 F1 | 	sub	_var02, #1
2c04c                 | LR__4131
2c04c     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2c050     1C 00 90 ED |  if_be	jmp	#LR__4133
2c054     09 01 C2 FA | 	rdbyte	_var01, arg01
2c058     01 05 C2 FA | 	rdbyte	_var03, _var02
2c05c     09 05 42 FC | 	wrbyte	_var03, arg01
2c060     01 01 42 FC | 	wrbyte	_var01, _var02
2c064     01 12 06 F1 | 	add	arg01, #1
2c068     01 02 86 F1 | 	sub	_var02, #1
2c06c     DC FF 9F FD | 	jmp	#LR__4131
2c070                 | LR__4132
2c070                 | LR__4133
2c070                 | __system___strrev_ret
2c070     2D 00 64 FD | 	ret
2c074                 | 
2c074                 | __system___fmtpad
2c074     06 4A 05 F6 | 	mov	COUNT_, #6
2c078     A8 00 A0 FD | 	call	#pushregs_
2c07c     09 27 02 F6 | 	mov	local01, arg01
2c080     0A 29 02 F6 | 	mov	local02, arg02
2c084     0B 2B 02 F6 | 	mov	local03, arg03
2c088     14 13 EA F8 | 	getbyte	arg01, local02, #1
2c08c     16 28 46 F0 | 	shr	local02, #22
2c090     03 28 0E F5 | 	and	local02, #3 wz
2c094     00 2C 06 F6 | 	mov	local04, #0
2c098     01 28 06 A6 |  if_e	mov	local02, #1
2c09c     0C 29 CA F7 | 	test	local02, arg04 wz
2c0a0     00 FA 05 A6 |  if_e	mov	result1, #0
2c0a4     88 00 90 AD |  if_e	jmp	#LR__4143
2c0a8     09 2B C2 F2 | 	subr	local03, arg01
2c0ac     01 2A 56 F2 | 	cmps	local03, #1 wc
2c0b0     00 FA 05 C6 |  if_b	mov	result1, #0
2c0b4     78 00 90 CD |  if_b	jmp	#LR__4143
2c0b8     03 28 0E F2 | 	cmp	local02, #3 wz
2c0bc     18 00 90 5D |  if_ne	jmp	#LR__4140
2c0c0     01 18 0E F2 | 	cmp	arg04, #1 wz
2c0c4     6E 28 62 FD | 	wrz	local02
2c0c8     14 2B 02 F1 | 	add	local03, local02
2c0cc     15 2B 52 F6 | 	abs	local03, local03 wc
2c0d0     01 2A 46 F0 | 	shr	local03, #1
2c0d4     15 2B 82 F6 | 	negc	local03, local03
2c0d8                 | LR__4140
2c0d8     01 2A 56 F2 | 	cmps	local03, #1 wc
2c0dc     4C 00 90 CD |  if_b	jmp	#LR__4142
2c0e0     15 2F 02 F6 | 	mov	local05, local03
2c0e4                 | LR__4141
2c0e4     13 29 02 F6 | 	mov	local02, local01
2c0e8     13 31 02 F6 | 	mov	local06, local01
2c0ec     13 28 46 F7 | 	zerox	local02, #19
2c0f0     14 30 46 F0 | 	shr	local06, #20
2c0f4     02 30 66 F0 | 	shl	local06, #2
2c0f8     ED 30 02 F1 | 	add	local06, __methods__
2c0fc     18 31 02 FB | 	rdlong	local06, local06
2c100     20 12 06 F6 | 	mov	arg01, #32
2c104     F2 2A 02 F6 | 	mov	local03, objptr
2c108     14 E5 01 F6 | 	mov	objptr, local02
2c10c     2D 30 62 FD | 	call	local06
2c110     15 E5 01 F6 | 	mov	objptr, local03
2c114     FD 30 02 F6 | 	mov	local06, result1
2c118     00 30 56 F2 | 	cmps	local06, #0 wc
2c11c     18 FB 01 C6 |  if_b	mov	result1, local06
2c120     0C 00 90 CD |  if_b	jmp	#LR__4143
2c124     18 2D 02 F1 | 	add	local04, local06
2c128     EE 2F 6E FB | 	djnz	local05, #LR__4141
2c12c                 | LR__4142
2c12c     16 FB 01 F6 | 	mov	result1, local04
2c130                 | LR__4143
2c130     A7 F0 03 F6 | 	mov	ptra, fp
2c134     B2 00 A0 FD | 	call	#popregs_
2c138                 | __system___fmtpad_ret
2c138     2D 00 64 FD | 	ret
2c13c                 | 
2c13c                 | __system___uitoa
2c13c     04 4A 05 F6 | 	mov	COUNT_, #4
2c140     A8 00 A0 FD | 	call	#pushregs_
2c144     09 27 02 F6 | 	mov	local01, arg01
2c148     00 1A 4E F2 | 	cmps	arg05, #0 wz
2c14c     13 1B 02 F6 | 	mov	arg05, local01
2c150     00 28 06 F6 | 	mov	local02, #0
2c154     37 2A 06 56 |  if_ne	mov	local03, #55
2c158     57 2A 06 A6 |  if_e	mov	local03, #87
2c15c                 | LR__4150
2c15c     0B 15 12 FD | 	qdiv	arg02, arg03
2c160     19 2C 62 FD | 	getqy	local04
2c164     0B 15 12 FD | 	qdiv	arg02, arg03
2c168     0A 2C 16 F2 | 	cmp	local04, #10 wc
2c16c     30 2C 06 C1 |  if_b	add	local04, #48
2c170     15 2D 02 31 |  if_ae	add	local04, local03
2c174     0D 2D 42 FC | 	wrbyte	local04, arg05
2c178     01 1A 06 F1 | 	add	arg05, #1
2c17c     01 28 06 F1 | 	add	local02, #1
2c180     18 14 62 FD | 	getqx	arg02
2c184     00 14 0E F2 | 	cmp	arg02, #0 wz
2c188     D0 FF 9F 5D |  if_ne	jmp	#LR__4150
2c18c     0C 29 12 F2 | 	cmp	local02, arg04 wc
2c190     C8 FF 9F CD |  if_b	jmp	#LR__4150
2c194     0D 01 48 FC | 	wrbyte	#0, arg05
2c198     13 13 02 F6 | 	mov	arg01, local01
2c19c     8C FE BF FD | 	call	#__system___strrev
2c1a0     14 FB 01 F6 | 	mov	result1, local02
2c1a4     A7 F0 03 F6 | 	mov	ptra, fp
2c1a8     B2 00 A0 FD | 	call	#popregs_
2c1ac                 | __system___uitoa_ret
2c1ac     2D 00 64 FD | 	ret
2c1b0                 | 
2c1b0                 | __system__disassemble_0561
2c1b0     10 4A 05 F6 | 	mov	COUNT_, #16
2c1b4     A8 00 A0 FD | 	call	#pushregs_
2c1b8     09 27 02 F6 | 	mov	local01, arg01
2c1bc     0A 29 02 F6 | 	mov	local02, arg02
2c1c0     0B 2B 02 F6 | 	mov	local03, arg03
2c1c4     0C 2D 02 F6 | 	mov	local04, arg04
2c1c8     0D 2F 02 F6 | 	mov	local05, arg05
2c1cc     17 13 52 F6 | 	abs	arg01, local05 wc
2c1d0     1F 30 C6 C9 |  if_b	decod	local06, #31
2c1d4     00 30 06 36 |  if_ae	mov	local06, #0
2c1d8     CC CF BF FD | 	call	#__system___float_fromuns
2c1dc     18 FB 61 F5 | 	xor	result1, local06
2c1e0     FD 32 02 F6 | 	mov	local07, result1
2c1e4     00 34 06 F6 | 	mov	local08, #0
2c1e8     13 13 02 F6 | 	mov	arg01, local01
2c1ec     00 14 06 F6 | 	mov	arg02, #0
2c1f0     01 16 06 F6 | 	mov	arg03, #1
2c1f4     E8 D7 BF FD | 	call	#__system___float_cmp
2c1f8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c1fc     00 36 06 A6 |  if_e	mov	local09, #0
2c200     14 01 68 AC |  if_e	wrlong	#0, local02
2c204     15 37 62 AC |  if_e	wrlong	local09, local03
2c208     8C 01 90 AD |  if_e	jmp	#LR__4172
2c20c     13 13 02 F6 | 	mov	arg01, local01
2c210     BC DC BF FD | 	call	#__system____builtin_ilogb
2c214     FD 38 02 F6 | 	mov	local10, result1
2c218     0A 2E 0E F2 | 	cmp	local05, #10 wz
2c21c     24 00 90 5D |  if_ne	jmp	#LR__4160
2c220     1C 37 02 F6 | 	mov	local09, local10
2c224     01 36 66 F0 | 	shl	local09, #1
2c228     1C 37 02 F1 | 	add	local09, local10
2c22c     1B 39 52 F6 | 	abs	local10, local09 wc
2c230     0A 38 16 FD | 	qdiv	local10, #10
2c234     09 3A 06 F6 | 	mov	local11, #9
2c238     18 38 62 FD | 	getqx	local10
2c23c     1C 39 82 F6 | 	negc	local10, local10
2c240     04 00 90 FD | 	jmp	#LR__4161
2c244                 | LR__4160
2c244     18 3A 06 F6 | 	mov	local11, #24
2c248                 | LR__4161
2c248                 | LR__4162
2c248     08 34 56 F2 | 	cmps	local08, #8 wc
2c24c     01 34 06 F1 | 	add	local08, #1
2c250     60 00 90 3D |  if_ae	jmp	#LR__4163
2c254     00 C0 1F FF 
2c258     00 12 06 F6 | 	mov	arg01, ##1065353216
2c25c     19 15 02 F6 | 	mov	arg02, local07
2c260     1C 17 02 F6 | 	mov	arg03, local10
2c264     4C E3 BF FD | 	call	#__system___float_pow_n
2c268     FD 14 02 F6 | 	mov	arg02, result1
2c26c     13 13 02 F6 | 	mov	arg01, local01
2c270     3C D5 BF FD | 	call	#__system___float_div
2c274     FD 3C 02 F6 | 	mov	local12, result1
2c278     1E 13 02 F6 | 	mov	arg01, local12
2c27c     00 C0 1F FF 
2c280     00 14 06 F6 | 	mov	arg02, ##1065353216
2c284     01 16 06 F6 | 	mov	arg03, #1
2c288     54 D7 BF FD | 	call	#__system___float_cmp
2c28c     00 FA 55 F2 | 	cmps	result1, #0 wc
2c290     01 38 86 C1 |  if_b	sub	local10, #1
2c294     B0 FF 9F CD |  if_b	jmp	#LR__4162
2c298     19 15 02 F6 | 	mov	arg02, local07
2c29c     1E 13 02 F6 | 	mov	arg01, local12
2c2a0     01 16 66 F6 | 	neg	arg03, #1
2c2a4     38 D7 BF FD | 	call	#__system___float_cmp
2c2a8     00 FA 55 F2 | 	cmps	result1, #0 wc
2c2ac     01 38 06 31 |  if_ae	add	local10, #1
2c2b0     94 FF 9F 3D |  if_ae	jmp	#LR__4162
2c2b4                 | LR__4163
2c2b4     1E 13 02 F6 | 	mov	arg01, local12
2c2b8     14 DC BF FD | 	call	#__system____builtin_ilogb
2c2bc     FD 3E 02 F6 | 	mov	local13, result1
2c2c0     1E 41 02 F6 | 	mov	local14, local12
2c2c4     17 41 06 F4 | 	bitl	local14, #279
2c2c8     17 40 26 F4 | 	bith	local14, #23
2c2cc     1F 41 62 F0 | 	shl	local14, local13
2c2d0     02 2E 0E F2 | 	cmp	local05, #2 wz
2c2d4     02 2C 66 A0 |  if_e	shl	local04, #2
2c2d8     00 42 06 F6 | 	mov	local15, #0
2c2dc     00 2C 56 F2 | 	cmps	local04, #0 wc
2c2e0     10 00 90 3D |  if_ae	jmp	#LR__4164
2c2e4     1C 2D C2 F2 | 	subr	local04, local10
2c2e8     00 2C 56 F2 | 	cmps	local04, #0 wc
2c2ec     A0 00 90 CD |  if_b	jmp	#LR__4171
2c2f0     04 00 90 FD | 	jmp	#LR__4165
2c2f4                 | LR__4164
2c2f4     01 2C 06 F1 | 	add	local04, #1
2c2f8                 | LR__4165
2c2f8     1D 2D 7A F3 | 	fles	local04, local11 wcz
2c2fc     01 44 06 F6 | 	mov	local16, #1
2c300     97 22 48 FB | 	callpa	#(@LR__4167-@LR__4166)>>2,fcache_load_ptr_
2c304                 | LR__4166
2c304     00 40 00 FF 
2c308     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2c30c     38 00 90 3D |  if_ae	jmp	#LR__4168
2c310     01 2C 56 F2 | 	cmps	local04, #1 wc
2c314     01 2C 86 F1 | 	sub	local04, #1
2c318     2C 00 90 CD |  if_b	jmp	#LR__4168
2c31c     17 43 02 FD | 	qmul	local15, local05
2c320     20 3F 02 F6 | 	mov	local13, local14
2c324     17 3E 46 F0 | 	shr	local13, #23
2c328     17 41 06 F4 | 	bitl	local14, #279
2c32c     18 42 62 FD | 	getqx	local15
2c330     17 45 02 FD | 	qmul	local16, local05
2c334     18 44 62 FD | 	getqx	local16
2c338     17 41 02 FD | 	qmul	local14, local05
2c33c     1F 43 02 F1 | 	add	local15, local13
2c340     18 40 62 FD | 	getqx	local14
2c344     BC FF 9F FD | 	jmp	#LR__4166
2c348                 | LR__4167
2c348                 | LR__4168
2c348     17 37 02 F6 | 	mov	local09, local05
2c34c     17 36 66 F0 | 	shl	local09, #23
2c350     1B 3F 52 F6 | 	abs	local13, local09 wc
2c354     01 3E 46 F0 | 	shr	local13, #1
2c358     1F 3F 82 F6 | 	negc	local13, local13
2c35c     1F 41 1A F2 | 	cmp	local14, local13 wcz
2c360     20 00 90 1D |  if_a	jmp	#LR__4169
2c364     17 2E 66 F0 | 	shl	local05, #23
2c368     17 3F 52 F6 | 	abs	local13, local05 wc
2c36c     01 3E 46 F0 | 	shr	local13, #1
2c370     1F 3F 82 F6 | 	negc	local13, local13
2c374     1F 41 0A F2 | 	cmp	local14, local13 wz
2c378     14 00 90 5D |  if_ne	jmp	#LR__4170
2c37c     01 42 CE F7 | 	test	local15, #1 wz
2c380     0C 00 90 AD |  if_e	jmp	#LR__4170
2c384                 | LR__4169
2c384     01 42 06 F1 | 	add	local15, #1
2c388     22 43 0A F2 | 	cmp	local15, local16 wz
2c38c     01 38 06 A1 |  if_e	add	local10, #1
2c390                 | LR__4170
2c390                 | LR__4171
2c390     14 43 62 FC | 	wrlong	local15, local02
2c394     15 39 62 FC | 	wrlong	local10, local03
2c398                 | LR__4172
2c398     A7 F0 03 F6 | 	mov	ptra, fp
2c39c     B2 00 A0 FD | 	call	#popregs_
2c3a0                 | __system__disassemble_0561_ret
2c3a0     2D 00 64 FD | 	ret
2c3a4                 | 
2c3a4                 | __system__emitsign_0563
2c3a4     00 FA 05 F6 | 	mov	result1, #0
2c3a8     00 14 0E F2 | 	cmp	arg02, #0 wz
2c3ac     09 01 02 56 |  if_ne	mov	_var01, arg01
2c3b0     01 12 06 51 |  if_ne	add	arg01, #1
2c3b4     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2c3b8     01 FA 05 56 |  if_ne	mov	result1, #1
2c3bc     00 16 0E F2 | 	cmp	arg03, #0 wz
2c3c0     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2c3c4     01 12 06 51 |  if_ne	add	arg01, #1
2c3c8     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2c3cc     02 FA 05 51 |  if_ne	add	result1, #2
2c3d0                 | __system__emitsign_0563_ret
2c3d0     2D 00 64 FD | 	ret
2c3d4                 | 
2c3d4                 | __system___gettxfunc
2c3d4     01 4A 05 F6 | 	mov	COUNT_, #1
2c3d8     A8 00 A0 FD | 	call	#pushregs_
2c3dc     A0 F8 BF FD | 	call	#__system____getftab
2c3e0     FD 26 0A F6 | 	mov	local01, result1 wz
2c3e4     10 00 90 AD |  if_e	jmp	#LR__4180
2c3e8     08 26 06 F1 | 	add	local01, #8
2c3ec     13 15 0A FB | 	rdlong	arg02, local01 wz
2c3f0     08 26 86 F1 | 	sub	local01, #8
2c3f4     08 00 90 5D |  if_ne	jmp	#LR__4181
2c3f8                 | LR__4180
2c3f8     00 FA 05 F6 | 	mov	result1, #0
2c3fc     0C 00 90 FD | 	jmp	#LR__4182
2c400                 | LR__4181
2c400     00 20 05 FF 
2c404     00 26 46 F5 | 	or	local01, ##171966464
2c408     13 FB 01 F6 | 	mov	result1, local01
2c40c                 | LR__4182
2c40c     A7 F0 03 F6 | 	mov	ptra, fp
2c410     B2 00 A0 FD | 	call	#popregs_
2c414                 | __system___gettxfunc_ret
2c414     2D 00 64 FD | 	ret
2c418                 | 
2c418                 | __system___getrxfunc
2c418     01 4A 05 F6 | 	mov	COUNT_, #1
2c41c     A8 00 A0 FD | 	call	#pushregs_
2c420     5C F8 BF FD | 	call	#__system____getftab
2c424     FD 26 0A F6 | 	mov	local01, result1 wz
2c428     10 00 90 AD |  if_e	jmp	#LR__4190
2c42c     08 26 06 F1 | 	add	local01, #8
2c430     13 15 0A FB | 	rdlong	arg02, local01 wz
2c434     08 26 86 F1 | 	sub	local01, #8
2c438     08 00 90 5D |  if_ne	jmp	#LR__4191
2c43c                 | LR__4190
2c43c     00 FA 05 F6 | 	mov	result1, #0
2c440     0C 00 90 FD | 	jmp	#LR__4192
2c444                 | LR__4191
2c444     00 28 05 FF 
2c448     00 26 46 F5 | 	or	local01, ##173015040
2c44c     13 FB 01 F6 | 	mov	result1, local01
2c450                 | LR__4192
2c450     A7 F0 03 F6 | 	mov	ptra, fp
2c454     B2 00 A0 FD | 	call	#popregs_
2c458                 | __system___getrxfunc_ret
2c458     2D 00 64 FD | 	ret
2c45c                 | 
2c45c                 | __system___getiolock_0603
2c45c     01 4A 05 F6 | 	mov	COUNT_, #1
2c460     A8 00 A0 FD | 	call	#pushregs_
2c464     18 F8 BF FD | 	call	#__system____getftab
2c468     FD 26 0A F6 | 	mov	local01, result1 wz
2c46c     10 00 90 AD |  if_e	jmp	#LR__4200
2c470     08 26 06 F1 | 	add	local01, #8
2c474     13 FB 09 FB | 	rdlong	result1, local01 wz
2c478     08 26 86 F1 | 	sub	local01, #8
2c47c     18 00 90 5D |  if_ne	jmp	#LR__4201
2c480                 | LR__4200
2c480     01 00 00 FF 
2c484     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2c488     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2c48c     01 00 00 FF 
2c490     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2c494     08 00 90 FD | 	jmp	#LR__4202
2c498                 | LR__4201
2c498     0C 26 06 F1 | 	add	local01, #12
2c49c     13 FB 01 F6 | 	mov	result1, local01
2c4a0                 | LR__4202
2c4a0     A7 F0 03 F6 | 	mov	ptra, fp
2c4a4     B2 00 A0 FD | 	call	#popregs_
2c4a8                 | __system___getiolock_0603_ret
2c4a8     2D 00 64 FD | 	ret
2c4ac                 | 
2c4ac                 | __system____ScanForChar
2c4ac     09 01 02 F6 | 	mov	_var01, arg01
2c4b0     09 03 02 F6 | 	mov	_var02, arg01
2c4b4     97 06 48 FB | 	callpa	#(@LR__4211-@LR__4210)>>2,fcache_load_ptr_
2c4b8                 | LR__4210
2c4b8     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2c4bc     01 02 06 51 |  if_ne	add	_var02, #1
2c4c0     F4 FF 9F 5D |  if_ne	jmp	#LR__4210
2c4c4                 | LR__4211
2c4c4     09 03 82 F1 | 	sub	_var02, arg01
2c4c8     01 FB 01 F6 | 	mov	result1, _var02
2c4cc     FD 12 0A F6 | 	mov	arg01, result1 wz
2c4d0     00 FA 05 A6 |  if_e	mov	result1, #0
2c4d4     B8 00 90 AD |  if_e	jmp	#LR__4218
2c4d8     0A 05 02 F6 | 	mov	_var03, arg02
2c4dc     07 04 4E F7 | 	zerox	_var03, #7 wz
2c4e0     00 FA 05 A6 |  if_e	mov	result1, #0
2c4e4     A8 00 90 AD |  if_e	jmp	#LR__4218
2c4e8     01 16 16 F2 | 	cmp	arg03, #1 wc
2c4ec     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2c4f0     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2c4f4     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2c4f8     94 00 90 4D |  if_c_and_nz	jmp	#LR__4218
2c4fc     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2c500     10 00 90 ED |  if_be	jmp	#LR__4212
2c504     00 18 0E F2 | 	cmp	arg04, #0 wz
2c508     00 FA 05 A6 |  if_e	mov	result1, #0
2c50c     80 00 90 AD |  if_e	jmp	#LR__4218
2c510     09 17 02 F6 | 	mov	arg03, arg01
2c514                 | LR__4212
2c514     01 16 86 F1 | 	sub	arg03, #1
2c518     00 18 0E F2 | 	cmp	arg04, #0 wz
2c51c     38 00 90 5D |  if_ne	jmp	#LR__4214
2c520     0B 07 02 F6 | 	mov	_var04, arg03
2c524     09 09 02 F6 | 	mov	_var05, arg01
2c528                 | LR__4213
2c528     04 07 12 F2 | 	cmp	_var04, _var05 wc
2c52c     5C 00 90 3D |  if_ae	jmp	#LR__4217
2c530     03 05 02 F6 | 	mov	_var03, _var04
2c534     00 05 02 F1 | 	add	_var03, _var01
2c538     02 05 C2 FA | 	rdbyte	_var03, _var03
2c53c     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2c540     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2c544     01 06 06 A1 |  if_e	add	_var04, #1
2c548     03 FB 01 A6 |  if_e	mov	result1, _var04
2c54c     40 00 90 AD |  if_e	jmp	#LR__4218
2c550     01 06 06 F1 | 	add	_var04, #1
2c554     D0 FF 9F FD | 	jmp	#LR__4213
2c558                 | LR__4214
2c558     0B 07 02 F6 | 	mov	_var04, arg03
2c55c                 | LR__4215
2c55c     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2c560     28 00 90 1D |  if_a	jmp	#LR__4216
2c564     03 09 02 F6 | 	mov	_var05, _var04
2c568     00 09 02 F1 | 	add	_var05, _var01
2c56c     04 05 C2 FA | 	rdbyte	_var03, _var05
2c570     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2c574     04 05 0A F2 | 	cmp	_var03, _var05 wz
2c578     01 06 06 A1 |  if_e	add	_var04, #1
2c57c     03 FB 01 A6 |  if_e	mov	result1, _var04
2c580     0C 00 90 AD |  if_e	jmp	#LR__4218
2c584     01 06 86 F1 | 	sub	_var04, #1
2c588     D0 FF 9F FD | 	jmp	#LR__4215
2c58c                 | LR__4216
2c58c                 | LR__4217
2c58c     00 FA 05 F6 | 	mov	result1, #0
2c590                 | LR__4218
2c590                 | __system____ScanForChar_ret
2c590     2D 00 64 FD | 	ret
2c594                 | 
2c594                 | __system___basic_dir
2c594     05 4A 05 F6 | 	mov	COUNT_, #5
2c598     A8 00 A0 FD | 	call	#pushregs_
2c59c     4C F0 07 F1 | 	add	ptra, #76
2c5a0     04 4E 05 F1 | 	add	fp, #4
2c5a4     A7 12 62 FC | 	wrlong	arg01, fp
2c5a8     04 4E 05 F1 | 	add	fp, #4
2c5ac     A7 14 62 FC | 	wrlong	arg02, fp
2c5b0     04 4E 85 F1 | 	sub	fp, #4
2c5b4     A7 14 0A FB | 	rdlong	arg02, fp wz
2c5b8     04 4E 85 F1 | 	sub	fp, #4
2c5bc     04 4E 05 51 |  if_ne	add	fp, #4
2c5c0     A7 26 02 5B |  if_ne	rdlong	local01, fp
2c5c4     04 4E 85 51 |  if_ne	sub	fp, #4
2c5c8     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2c5cc     70 00 90 AD |  if_e	jmp	#LR__4220
2c5d0     03 00 00 FF 
2c5d4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c5d8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2c5dc     03 00 00 FF 
2c5e0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c5e4     03 00 00 5F 
2c5e8     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2c5ec     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2c5f0     03 00 00 5F 
2c5f4     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2c5f8     D8 E9 BF 5D |  if_ne	call	#__system__closedir
2c5fc     B1 01 00 FF 
2c600     AC 12 06 F6 | 	mov	arg01, ##@LR__5388
2c604     E0 E8 BF FD | 	call	#__system__opendir
2c608     03 00 00 FF 
2c60c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c610     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2c614     08 4E 05 F1 | 	add	fp, #8
2c618     A7 28 02 FB | 	rdlong	local02, fp
2c61c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2c620     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2c624     04 4E 85 F1 | 	sub	fp, #4
2c628     A7 28 02 FB | 	rdlong	local02, fp
2c62c     04 4E 85 F1 | 	sub	fp, #4
2c630     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2c634     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2c638     03 00 00 FF 
2c63c     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2c640                 | LR__4220
2c640     03 00 00 FF 
2c644     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c648     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2c64c     03 00 00 FF 
2c650     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c654     B1 01 00 AF 
2c658     AE FA 05 A6 |  if_e	mov	result1, ##@LR__5389
2c65c     84 02 90 AD |  if_e	jmp	#LR__4233
2c660                 | LR__4221
2c660     03 00 00 FF 
2c664     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c668     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2c66c     03 00 00 FF 
2c670     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c674     D0 E9 BF FD | 	call	#__system__readdir
2c678     0C 4E 05 F1 | 	add	fp, #12
2c67c     A7 FA 61 FC | 	wrlong	result1, fp
2c680     0C 4E 85 F1 | 	sub	fp, #12
2c684     00 FA 0D F2 | 	cmp	result1, #0 wz
2c688     38 00 90 5D |  if_ne	jmp	#LR__4222
2c68c     03 00 00 FF 
2c690     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c694     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2c698     03 00 00 FF 
2c69c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c6a0     30 E9 BF FD | 	call	#__system__closedir
2c6a4     03 00 00 FF 
2c6a8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c6ac     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2c6b0     03 00 00 FF 
2c6b4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c6b8     B1 01 00 FF 
2c6bc     B0 FA 05 F6 | 	mov	result1, ##@LR__5390
2c6c0     20 02 90 FD | 	jmp	#LR__4233
2c6c4                 | LR__4222
2c6c4     0C 4E 05 F1 | 	add	fp, #12
2c6c8     A7 12 02 FB | 	rdlong	arg01, fp
2c6cc     0C 4E 85 F1 | 	sub	fp, #12
2c6d0     03 00 00 FF 
2c6d4     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2c6d8     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2c6dc     03 00 00 FF 
2c6e0     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2c6e4     10 09 B0 FD | 	call	#__system___pat_match
2c6e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c6ec     70 FF 9F AD |  if_e	jmp	#LR__4221
2c6f0     03 00 00 FF 
2c6f4     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2c6f8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2c6fc     03 00 00 FF 
2c700     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2c704     78 01 90 AD |  if_e	jmp	#LR__4229
2c708     0C 4E 05 F1 | 	add	fp, #12
2c70c     A7 12 02 FB | 	rdlong	arg01, fp
2c710     04 4E 05 F1 | 	add	fp, #4
2c714     A7 14 02 F6 | 	mov	arg02, fp
2c718     10 4E 85 F1 | 	sub	fp, #16
2c71c     2C F2 BF FD | 	call	#__system__stat
2c720     40 4E 05 F1 | 	add	fp, #64
2c724     A7 FA 61 FC | 	wrlong	result1, fp
2c728     40 4E 85 F1 | 	sub	fp, #64
2c72c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c730     B1 01 00 5F 
2c734     B2 FA 05 56 |  if_ne	mov	result1, ##@LR__5391
2c738     A8 01 90 5D |  if_ne	jmp	#LR__4233
2c73c     18 4E 05 F1 | 	add	fp, #24
2c740     A7 28 02 FB | 	rdlong	local02, fp
2c744     78 00 00 FF 
2c748     00 28 06 F5 | 	and	local02, ##61440
2c74c     2C 4E 05 F1 | 	add	fp, #44
2c750     A7 28 62 FC | 	wrlong	local02, fp
2c754     38 4E 85 F1 | 	sub	fp, #56
2c758     A7 28 02 FB | 	rdlong	local02, fp
2c75c     0C 4E 85 F1 | 	sub	fp, #12
2c760     14 29 C2 FA | 	rdbyte	local02, local02
2c764     2E 28 0E F2 | 	cmp	local02, #46 wz
2c768     08 4E 05 A1 |  if_e	add	fp, #8
2c76c     A7 04 68 AC |  if_e	wrlong	#2, fp
2c770     08 4E C5 F3 | 	sumz	fp, #8
2c774     A7 00 68 5C |  if_ne	wrlong	#0, fp
2c778     08 4E 85 51 |  if_ne	sub	fp, #8
2c77c     44 4E 05 F1 | 	add	fp, #68
2c780     A7 28 02 FB | 	rdlong	local02, fp
2c784     44 4E 85 F1 | 	sub	fp, #68
2c788     08 00 00 FF 
2c78c     00 28 0E F2 | 	cmp	local02, ##4096 wz
2c790     18 00 90 5D |  if_ne	jmp	#LR__4223
2c794     08 4E 05 F1 | 	add	fp, #8
2c798     A7 28 02 FB | 	rdlong	local02, fp
2c79c     10 28 46 F5 | 	or	local02, #16
2c7a0     A7 28 62 FC | 	wrlong	local02, fp
2c7a4     08 4E 85 F1 | 	sub	fp, #8
2c7a8     AC 00 90 FD | 	jmp	#LR__4228
2c7ac                 | LR__4223
2c7ac     44 4E 05 F1 | 	add	fp, #68
2c7b0     A7 28 02 FB | 	rdlong	local02, fp
2c7b4     44 4E 85 F1 | 	sub	fp, #68
2c7b8     10 00 00 FF 
2c7bc     00 28 0E F2 | 	cmp	local02, ##8192 wz
2c7c0     44 4E 05 51 |  if_ne	add	fp, #68
2c7c4     A7 26 02 5B |  if_ne	rdlong	local01, fp
2c7c8     44 4E 85 51 |  if_ne	sub	fp, #68
2c7cc     18 00 00 5F 
2c7d0     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2c7d4     44 4E 05 51 |  if_ne	add	fp, #68
2c7d8     13 2B 02 56 |  if_ne	mov	local03, local01
2c7dc     44 4E 85 51 |  if_ne	sub	fp, #68
2c7e0     20 00 00 5F 
2c7e4     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2c7e8     18 00 90 5D |  if_ne	jmp	#LR__4224
2c7ec     08 4E 05 F1 | 	add	fp, #8
2c7f0     A7 28 02 FB | 	rdlong	local02, fp
2c7f4     04 28 46 F5 | 	or	local02, #4
2c7f8     A7 28 62 FC | 	wrlong	local02, fp
2c7fc     08 4E 85 F1 | 	sub	fp, #8
2c800     54 00 90 FD | 	jmp	#LR__4227
2c804                 | LR__4224
2c804     18 4E 05 F1 | 	add	fp, #24
2c808     A7 28 02 FB | 	rdlong	local02, fp
2c80c     18 4E 85 F1 | 	sub	fp, #24
2c810     92 28 CE F7 | 	test	local02, #146 wz
2c814     18 00 90 5D |  if_ne	jmp	#LR__4225
2c818     08 4E 05 F1 | 	add	fp, #8
2c81c     A7 28 02 FB | 	rdlong	local02, fp
2c820     01 28 46 F5 | 	or	local02, #1
2c824     A7 28 62 FC | 	wrlong	local02, fp
2c828     08 4E 85 F1 | 	sub	fp, #8
2c82c     28 00 90 FD | 	jmp	#LR__4226
2c830                 | LR__4225
2c830     44 4E 05 F1 | 	add	fp, #68
2c834     A7 2C 02 FB | 	rdlong	local04, fp
2c838     44 4E 85 F1 | 	sub	fp, #68
2c83c     08 00 00 FF 
2c840     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2c844     08 4E 05 51 |  if_ne	add	fp, #8
2c848     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2c84c     20 2C 46 55 |  if_ne	or	local04, #32
2c850     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2c854     08 4E 85 51 |  if_ne	sub	fp, #8
2c858                 | LR__4226
2c858                 | LR__4227
2c858                 | LR__4228
2c858     08 4E 05 F1 | 	add	fp, #8
2c85c     A7 2C 02 FB | 	rdlong	local04, fp
2c860     08 4E 85 F1 | 	sub	fp, #8
2c864     03 00 00 FF 
2c868     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2c86c     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2c870     03 00 00 FF 
2c874     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2c878     13 2D CA F7 | 	test	local04, local01 wz
2c87c     E0 FD 9F AD |  if_e	jmp	#LR__4221
2c880                 | LR__4229
2c880     0C 4E 05 F1 | 	add	fp, #12
2c884     A7 12 02 FB | 	rdlong	arg01, fp
2c888     0C 4E 85 F1 | 	sub	fp, #12
2c88c     09 2F 02 F6 | 	mov	local05, arg01
2c890     97 06 48 FB | 	callpa	#(@LR__4231-@LR__4230)>>2,fcache_load_ptr_
2c894                 | LR__4230
2c894     17 FB C9 FA | 	rdbyte	result1, local05 wz
2c898     01 2E 06 51 |  if_ne	add	local05, #1
2c89c     F4 FF 9F 5D |  if_ne	jmp	#LR__4230
2c8a0                 | LR__4231
2c8a0     17 13 C2 F2 | 	subr	arg01, local05
2c8a4     01 12 06 F1 | 	add	arg01, #1
2c8a8     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2c8ac     48 4E 05 F1 | 	add	fp, #72
2c8b0     A7 FA 61 FC | 	wrlong	result1, fp
2c8b4     48 4E 85 F1 | 	sub	fp, #72
2c8b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c8bc     18 00 90 AD |  if_e	jmp	#LR__4232
2c8c0     48 4E 05 F1 | 	add	fp, #72
2c8c4     A7 12 02 FB | 	rdlong	arg01, fp
2c8c8     3C 4E 85 F1 | 	sub	fp, #60
2c8cc     A7 14 02 FB | 	rdlong	arg02, fp
2c8d0     0C 4E 85 F1 | 	sub	fp, #12
2c8d4     10 9E BF FD | 	call	#__system____builtin_strcpy
2c8d8                 | LR__4232
2c8d8     48 4E 05 F1 | 	add	fp, #72
2c8dc     A7 FA 01 FB | 	rdlong	result1, fp
2c8e0     48 4E 85 F1 | 	sub	fp, #72
2c8e4                 | LR__4233
2c8e4     A7 F0 03 F6 | 	mov	ptra, fp
2c8e8     B2 00 A0 FD | 	call	#popregs_
2c8ec                 | __system___basic_dir_ret
2c8ec     2D 00 64 FD | 	ret
2c8f0                 | 
2c8f0                 | __system__pack_0675
2c8f0     09 01 02 F6 | 	mov	_var01, arg01
2c8f4     7F 16 06 F1 | 	add	arg03, #127
2c8f8     04 18 CE F7 | 	test	arg04, #4 wz
2c8fc     10 00 90 AD |  if_e	jmp	#LR__4240
2c900     00 00 0E F2 | 	cmp	_var01, #0 wz
2c904     16 00 C6 A9 |  if_e	decod	_var01, #22
2c908     F7 00 26 F4 | 	bith	_var01, #247
2c90c     B4 00 90 FD | 	jmp	#LR__4249
2c910                 | LR__4240
2c910     02 18 CE F7 | 	test	arg04, #2 wz
2c914     00 C0 3F 5F 
2c918     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2c91c     00 14 06 56 |  if_ne	mov	arg02, #0
2c920     A0 00 90 5D |  if_ne	jmp	#LR__4248
2c924     08 18 CE F7 | 	test	arg04, #8 wz
2c928     00 00 06 56 |  if_ne	mov	_var01, #0
2c92c     94 00 90 5D |  if_ne	jmp	#LR__4247
2c930     FF 16 56 F2 | 	cmps	arg03, #255 wc
2c934     00 C0 3F 3F 
2c938     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2c93c     00 14 06 36 |  if_ae	mov	arg02, #0
2c940     80 00 90 3D |  if_ae	jmp	#LR__4246
2c944     01 16 56 F2 | 	cmps	arg03, #1 wc
2c948     6C 00 90 3D |  if_ae	jmp	#LR__4244
2c94c     01 14 46 F0 | 	shr	arg02, #1
2c950     00 03 02 F6 | 	mov	_var02, _var01
2c954     01 02 06 F5 | 	and	_var02, #1
2c958     1F 02 66 F0 | 	shl	_var02, #31
2c95c     01 15 42 F5 | 	or	arg02, _var02
2c960     01 00 46 F0 | 	shr	_var01, #1
2c964     97 1E 48 FB | 	callpa	#(@LR__4242-@LR__4241)>>2,fcache_load_ptr_
2c968                 | LR__4241
2c968     00 16 56 F2 | 	cmps	arg03, #0 wc
2c96c     34 00 90 3D |  if_ae	jmp	#LR__4243
2c970     00 00 0E F2 | 	cmp	_var01, #0 wz
2c974     2C 00 90 AD |  if_e	jmp	#LR__4243
2c978     0A 13 02 F6 | 	mov	arg01, arg02
2c97c     01 12 06 F5 | 	and	arg01, #1
2c980     01 16 06 F1 | 	add	arg03, #1
2c984     01 14 46 F0 | 	shr	arg02, #1
2c988     00 03 02 F6 | 	mov	_var02, _var01
2c98c     01 02 06 F5 | 	and	_var02, #1
2c990     1F 02 66 F0 | 	shl	_var02, #31
2c994     01 15 42 F5 | 	or	arg02, _var02
2c998     09 15 42 F5 | 	or	arg02, arg01
2c99c     01 00 46 F0 | 	shr	_var01, #1
2c9a0     C4 FF 9F FD | 	jmp	#LR__4241
2c9a4                 | LR__4242
2c9a4                 | LR__4243
2c9a4     00 16 56 F2 | 	cmps	arg03, #0 wc
2c9a8     18 00 90 3D |  if_ae	jmp	#LR__4245
2c9ac     00 14 0E F2 | 	cmp	arg02, #0 wz
2c9b0     6F 14 62 FD | 	wrnz	arg02
2c9b4     0C 00 90 FD | 	jmp	#LR__4245
2c9b8                 | LR__4244
2c9b8     17 01 06 F4 | 	bitl	_var01, #279
2c9bc     17 16 66 F0 | 	shl	arg03, #23
2c9c0     0B 01 42 F5 | 	or	_var01, arg03
2c9c4                 | LR__4245
2c9c4                 | LR__4246
2c9c4                 | LR__4247
2c9c4                 | LR__4248
2c9c4                 | LR__4249
2c9c4     01 00 CE F7 | 	test	_var01, #1 wz
2c9c8     01 14 46 55 |  if_ne	or	arg02, #1
2c9cc     0A 17 02 F6 | 	mov	arg03, arg02
2c9d0     00 02 06 F6 | 	mov	_var02, #0
2c9d4     FF FF 3F FF 
2c9d8     FF 15 06 F1 | 	add	arg02, ##2147483647
2c9dc     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2c9e0     01 02 06 C6 |  if_b	mov	_var02, #1
2c9e4     01 01 02 F1 | 	add	_var01, _var02
2c9e8     01 18 CE F7 | 	test	arg04, #1 wz
2c9ec     1F 00 26 54 |  if_ne	bith	_var01, #31
2c9f0     00 FB 01 F6 | 	mov	result1, _var01
2c9f4                 | __system__pack_0675_ret
2c9f4     2D 00 64 FD | 	ret
2c9f8                 | 
2c9f8                 | __system___rxtxioctl_0765
2c9f8     00 15 0E F2 | 	cmp	arg02, #256 wz
2c9fc     0C 00 90 AD |  if_e	jmp	#LR__4250
2ca00     01 15 0E F2 | 	cmp	arg02, #257 wz
2ca04     1C 00 90 AD |  if_e	jmp	#LR__4251
2ca08     30 00 90 FD | 	jmp	#LR__4252
2ca0c                 | LR__4250
2ca0c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2ca10     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2ca14     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2ca18     0B FB 61 FC | 	wrlong	result1, arg03
2ca1c     00 FA 05 F6 | 	mov	result1, #0
2ca20     28 00 90 FD | 	jmp	#LR__4253
2ca24                 | LR__4251
2ca24     0B 13 02 FB | 	rdlong	arg01, arg03
2ca28     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2ca2c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2ca30     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2ca34     00 FA 05 F6 | 	mov	result1, #0
2ca38     10 00 90 FD | 	jmp	#LR__4253
2ca3c                 | LR__4252
2ca3c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ca40     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2ca44     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ca48     01 FA 65 F6 | 	neg	result1, #1
2ca4c                 | LR__4253
2ca4c                 | __system___rxtxioctl_0765_ret
2ca4c     2D 00 64 FD | 	ret
2ca50                 | 
2ca50                 | __system____dummy_flush_0766
2ca50     00 FA 05 F6 | 	mov	result1, #0
2ca54                 | __system____dummy_flush_0766_ret
2ca54     2D 00 64 FD | 	ret
2ca58                 | 
2ca58                 | __system___vfswrite
2ca58     09 4A 05 F6 | 	mov	COUNT_, #9
2ca5c     A8 00 A0 FD | 	call	#pushregs_
2ca60     09 27 02 F6 | 	mov	local01, arg01
2ca64     0A 29 02 F6 | 	mov	local02, arg02
2ca68     0B 2B 02 F6 | 	mov	local03, arg03
2ca6c     14 2D 02 F6 | 	mov	local04, local02
2ca70     08 26 06 F1 | 	add	local01, #8
2ca74     13 13 02 FB | 	rdlong	arg01, local01
2ca78     08 26 86 F1 | 	sub	local01, #8
2ca7c     02 12 CE F7 | 	test	arg01, #2 wz
2ca80     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ca84     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2ca88     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ca8c     01 FA 65 A6 |  if_e	neg	result1, #1
2ca90     80 01 90 AD |  if_e	jmp	#LR__4266
2ca94     08 26 06 F1 | 	add	local01, #8
2ca98     13 FB 01 FB | 	rdlong	result1, local01
2ca9c     08 26 86 F1 | 	sub	local01, #8
2caa0     40 FA CD F7 | 	test	result1, #64 wz
2caa4     68 00 90 AD |  if_e	jmp	#LR__4261
2caa8     08 26 06 F1 | 	add	local01, #8
2caac     13 15 02 FB | 	rdlong	arg02, local01
2cab0     08 26 86 F1 | 	sub	local01, #8
2cab4     80 14 CE F7 | 	test	arg02, #128 wz
2cab8     54 00 90 AD |  if_e	jmp	#LR__4260
2cabc     30 26 06 F1 | 	add	local01, #48
2cac0     13 2F 02 FB | 	rdlong	local05, local01
2cac4     17 31 02 F6 | 	mov	local06, local05
2cac8     30 26 86 F1 | 	sub	local01, #48
2cacc     13 30 46 F7 | 	zerox	local06, #19
2cad0     14 2E 46 F0 | 	shr	local05, #20
2cad4     02 2E 66 F0 | 	shl	local05, #2
2cad8     ED 2E 02 F1 | 	add	local05, __methods__
2cadc     17 2F 02 FB | 	rdlong	local05, local05
2cae0     13 13 02 F6 | 	mov	arg01, local01
2cae4     00 14 06 F6 | 	mov	arg02, #0
2cae8     02 16 06 F6 | 	mov	arg03, #2
2caec     F2 32 02 F6 | 	mov	local07, objptr
2caf0     18 E5 01 F6 | 	mov	objptr, local06
2caf4     2D 2E 62 FD | 	call	local05
2caf8     19 E5 01 F6 | 	mov	objptr, local07
2cafc     08 26 06 F1 | 	add	local01, #8
2cb00     13 33 02 FB | 	rdlong	local07, local01
2cb04     80 32 26 F5 | 	andn	local07, #128
2cb08     13 33 62 FC | 	wrlong	local07, local01
2cb0c     08 26 86 F1 | 	sub	local01, #8
2cb10                 | LR__4260
2cb10                 | LR__4261
2cb10     18 26 06 F1 | 	add	local01, #24
2cb14     13 33 0A FB | 	rdlong	local07, local01 wz
2cb18     18 26 86 F1 | 	sub	local01, #24
2cb1c     80 00 90 AD |  if_e	jmp	#LR__4263
2cb20     18 26 06 F1 | 	add	local01, #24
2cb24     13 2F 02 FB | 	rdlong	local05, local01
2cb28     17 31 02 F6 | 	mov	local06, local05
2cb2c     18 26 86 F1 | 	sub	local01, #24
2cb30     13 30 46 F7 | 	zerox	local06, #19
2cb34     14 2E 46 F0 | 	shr	local05, #20
2cb38     02 2E 66 F0 | 	shl	local05, #2
2cb3c     ED 2E 02 F1 | 	add	local05, __methods__
2cb40     17 2F 02 FB | 	rdlong	local05, local05
2cb44     14 15 02 F6 | 	mov	arg02, local02
2cb48     15 17 02 F6 | 	mov	arg03, local03
2cb4c     13 13 02 F6 | 	mov	arg01, local01
2cb50     F2 32 02 F6 | 	mov	local07, objptr
2cb54     18 E5 01 F6 | 	mov	objptr, local06
2cb58     2D 2E 62 FD | 	call	local05
2cb5c     19 E5 01 F6 | 	mov	objptr, local07
2cb60     FD 34 02 F6 | 	mov	local08, result1
2cb64     00 34 56 F2 | 	cmps	local08, #0 wc
2cb68     2C 00 90 3D |  if_ae	jmp	#LR__4262
2cb6c     08 26 06 F1 | 	add	local01, #8
2cb70     13 33 02 FB | 	rdlong	local07, local01
2cb74     20 32 46 F5 | 	or	local07, #32
2cb78     13 33 62 FC | 	wrlong	local07, local01
2cb7c     00 34 4E F2 | 	cmps	local08, #0 wz
2cb80     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cb84     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2cb88     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cb8c     01 FA 65 56 |  if_ne	neg	result1, #1
2cb90     00 FA 05 A6 |  if_e	mov	result1, #0
2cb94     7C 00 90 FD | 	jmp	#LR__4266
2cb98                 | LR__4262
2cb98     1A FB 01 F6 | 	mov	result1, local08
2cb9c     74 00 90 FD | 	jmp	#LR__4266
2cba0                 | LR__4263
2cba0     1C 26 06 F1 | 	add	local01, #28
2cba4     13 37 0A FB | 	rdlong	local09, local01 wz
2cba8     1C 26 86 F1 | 	sub	local01, #28
2cbac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cbb0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2cbb4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cbb8     01 FA 65 A6 |  if_e	neg	result1, #1
2cbbc     54 00 90 AD |  if_e	jmp	#LR__4266
2cbc0     00 34 06 F6 | 	mov	local08, #0
2cbc4                 | LR__4264
2cbc4     01 2A 16 F2 | 	cmp	local03, #1 wc
2cbc8     44 00 90 CD |  if_b	jmp	#LR__4265
2cbcc     1B 31 02 F6 | 	mov	local06, local09
2cbd0     1B 2F 02 F6 | 	mov	local05, local09
2cbd4     13 30 46 F7 | 	zerox	local06, #19
2cbd8     14 2E 46 F0 | 	shr	local05, #20
2cbdc     02 2E 66 F0 | 	shl	local05, #2
2cbe0     ED 2E 02 F1 | 	add	local05, __methods__
2cbe4     17 2F 02 FB | 	rdlong	local05, local05
2cbe8     16 13 C2 FA | 	rdbyte	arg01, local04
2cbec     13 15 02 F6 | 	mov	arg02, local01
2cbf0     F2 32 02 F6 | 	mov	local07, objptr
2cbf4     18 E5 01 F6 | 	mov	objptr, local06
2cbf8     01 2C 06 F1 | 	add	local04, #1
2cbfc     2D 2E 62 FD | 	call	local05
2cc00     19 E5 01 F6 | 	mov	objptr, local07
2cc04     FD 34 02 F1 | 	add	local08, result1
2cc08     01 2A 86 F1 | 	sub	local03, #1
2cc0c     B4 FF 9F FD | 	jmp	#LR__4264
2cc10                 | LR__4265
2cc10     1A FB 01 F6 | 	mov	result1, local08
2cc14                 | LR__4266
2cc14     A7 F0 03 F6 | 	mov	ptra, fp
2cc18     B2 00 A0 FD | 	call	#popregs_
2cc1c                 | __system___vfswrite_ret
2cc1c     2D 00 64 FD | 	ret
2cc20                 | 
2cc20                 | __system___vfsread
2cc20     03 4A 05 F6 | 	mov	COUNT_, #3
2cc24     A8 00 A0 FD | 	call	#pushregs_
2cc28     28 F0 07 F1 | 	add	ptra, #40
2cc2c     04 4E 05 F1 | 	add	fp, #4
2cc30     A7 12 62 FC | 	wrlong	arg01, fp
2cc34     04 4E 05 F1 | 	add	fp, #4
2cc38     A7 14 62 FC | 	wrlong	arg02, fp
2cc3c     04 4E 05 F1 | 	add	fp, #4
2cc40     A7 16 62 FC | 	wrlong	arg03, fp
2cc44     04 4E 85 F1 | 	sub	fp, #4
2cc48     A7 FA 01 FB | 	rdlong	result1, fp
2cc4c     14 4E 05 F1 | 	add	fp, #20
2cc50     A7 FA 61 FC | 	wrlong	result1, fp
2cc54     04 4E 05 F1 | 	add	fp, #4
2cc58     A7 00 68 FC | 	wrlong	#0, fp
2cc5c     1C 4E 85 F1 | 	sub	fp, #28
2cc60     A7 12 02 FB | 	rdlong	arg01, fp
2cc64     04 4E 85 F1 | 	sub	fp, #4
2cc68     08 12 06 F1 | 	add	arg01, #8
2cc6c     09 FB 01 FB | 	rdlong	result1, arg01
2cc70     01 FA CD F7 | 	test	result1, #1 wz
2cc74     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cc78     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2cc7c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cc80     01 FA 65 A6 |  if_e	neg	result1, #1
2cc84     74 02 90 AD |  if_e	jmp	#LR__4276
2cc88     04 4E 05 F1 | 	add	fp, #4
2cc8c     A7 12 02 FB | 	rdlong	arg01, fp
2cc90     04 4E 85 F1 | 	sub	fp, #4
2cc94     14 12 06 F1 | 	add	arg01, #20
2cc98     09 FB 09 FB | 	rdlong	result1, arg01 wz
2cc9c     B8 00 90 AD |  if_e	jmp	#LR__4271
2cca0     04 4E 05 F1 | 	add	fp, #4
2cca4     A7 12 02 FB | 	rdlong	arg01, fp
2cca8     09 17 02 F6 | 	mov	arg03, arg01
2ccac     14 16 06 F1 | 	add	arg03, #20
2ccb0     0B 27 02 FB | 	rdlong	local01, arg03
2ccb4     13 29 02 F6 | 	mov	local02, local01
2ccb8     13 26 46 F7 | 	zerox	local01, #19
2ccbc     14 28 46 F0 | 	shr	local02, #20
2ccc0     02 28 66 F0 | 	shl	local02, #2
2ccc4     ED 28 02 F1 | 	add	local02, __methods__
2ccc8     14 29 02 FB | 	rdlong	local02, local02
2cccc     04 4E 05 F1 | 	add	fp, #4
2ccd0     A7 14 02 FB | 	rdlong	arg02, fp
2ccd4     04 4E 05 F1 | 	add	fp, #4
2ccd8     A7 16 02 FB | 	rdlong	arg03, fp
2ccdc     0C 4E 85 F1 | 	sub	fp, #12
2cce0     F2 2A 02 F6 | 	mov	local03, objptr
2cce4     13 E5 01 F6 | 	mov	objptr, local01
2cce8     2D 28 62 FD | 	call	local02
2ccec     15 E5 01 F6 | 	mov	objptr, local03
2ccf0     10 4E 05 F1 | 	add	fp, #16
2ccf4     A7 FA 61 FC | 	wrlong	result1, fp
2ccf8     10 4E 85 F1 | 	sub	fp, #16
2ccfc     00 FA 55 F2 | 	cmps	result1, #0 wc
2cd00     44 00 90 3D |  if_ae	jmp	#LR__4270
2cd04     04 4E 05 F1 | 	add	fp, #4
2cd08     A7 2A 02 FB | 	rdlong	local03, fp
2cd0c     15 27 02 F6 | 	mov	local01, local03
2cd10     08 2A 06 F1 | 	add	local03, #8
2cd14     15 29 02 FB | 	rdlong	local02, local03
2cd18     20 28 46 F5 | 	or	local02, #32
2cd1c     08 26 06 F1 | 	add	local01, #8
2cd20     13 29 62 FC | 	wrlong	local02, local01
2cd24     0C 4E 05 F1 | 	add	fp, #12
2cd28     A7 12 0A FB | 	rdlong	arg01, fp wz
2cd2c     10 4E 85 F1 | 	sub	fp, #16
2cd30     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cd34     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2cd38     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cd3c     01 FA 65 56 |  if_ne	neg	result1, #1
2cd40     00 FA 05 A6 |  if_e	mov	result1, #0
2cd44     B4 01 90 FD | 	jmp	#LR__4276
2cd48                 | LR__4270
2cd48     10 4E 05 F1 | 	add	fp, #16
2cd4c     A7 FA 01 FB | 	rdlong	result1, fp
2cd50     10 4E 85 F1 | 	sub	fp, #16
2cd54     A4 01 90 FD | 	jmp	#LR__4276
2cd58                 | LR__4271
2cd58     04 4E 05 F1 | 	add	fp, #4
2cd5c     A7 12 02 FB | 	rdlong	arg01, fp
2cd60     20 12 06 F1 | 	add	arg01, #32
2cd64     09 13 0A FB | 	rdlong	arg01, arg01 wz
2cd68     14 4E 05 F1 | 	add	fp, #20
2cd6c     A7 12 62 FC | 	wrlong	arg01, fp
2cd70     18 4E 85 F1 | 	sub	fp, #24
2cd74     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cd78     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2cd7c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cd80     01 FA 65 A6 |  if_e	neg	result1, #1
2cd84     74 01 90 AD |  if_e	jmp	#LR__4276
2cd88     04 4E 05 F1 | 	add	fp, #4
2cd8c     A7 2A 02 FB | 	rdlong	local03, fp
2cd90     04 4E 85 F1 | 	sub	fp, #4
2cd94     28 2A 06 F1 | 	add	local03, #40
2cd98     15 29 0A FB | 	rdlong	local02, local03 wz
2cd9c     7C 00 90 AD |  if_e	jmp	#LR__4273
2cda0     04 4E 05 F1 | 	add	fp, #4
2cda4     A7 12 02 FB | 	rdlong	arg01, fp
2cda8     09 2B 02 F6 | 	mov	local03, arg01
2cdac     28 2A 06 F1 | 	add	local03, #40
2cdb0     15 27 02 FB | 	rdlong	local01, local03
2cdb4     13 29 02 F6 | 	mov	local02, local01
2cdb8     13 26 46 F7 | 	zerox	local01, #19
2cdbc     14 28 46 F0 | 	shr	local02, #20
2cdc0     02 28 66 F0 | 	shl	local02, #2
2cdc4     ED 28 02 F1 | 	add	local02, __methods__
2cdc8     14 29 02 FB | 	rdlong	local02, local02
2cdcc     20 4E 05 F1 | 	add	fp, #32
2cdd0     A7 16 02 F6 | 	mov	arg03, fp
2cdd4     24 4E 85 F1 | 	sub	fp, #36
2cdd8     00 15 06 F6 | 	mov	arg02, #256
2cddc     F2 2A 02 F6 | 	mov	local03, objptr
2cde0     13 E5 01 F6 | 	mov	objptr, local01
2cde4     2D 28 62 FD | 	call	local02
2cde8     15 E5 01 F6 | 	mov	objptr, local03
2cdec     10 4E 05 F1 | 	add	fp, #16
2cdf0     A7 FA 61 FC | 	wrlong	result1, fp
2cdf4     00 FA 4D F2 | 	cmps	result1, #0 wz
2cdf8     10 4E 85 F1 | 	sub	fp, #16
2cdfc     1C 00 90 5D |  if_ne	jmp	#LR__4272
2ce00     24 4E 05 F1 | 	add	fp, #36
2ce04     A7 28 02 FB | 	rdlong	local02, fp
2ce08     24 4E 85 F1 | 	sub	fp, #36
2ce0c     02 28 CE F7 | 	test	local02, #2 wz
2ce10     20 4E 05 51 |  if_ne	add	fp, #32
2ce14     A7 02 68 5C |  if_ne	wrlong	#1, fp
2ce18     20 4E 85 51 |  if_ne	sub	fp, #32
2ce1c                 | LR__4272
2ce1c                 | LR__4273
2ce1c     10 4E 05 F1 | 	add	fp, #16
2ce20     A7 00 68 FC | 	wrlong	#0, fp
2ce24     10 4E 85 F1 | 	sub	fp, #16
2ce28                 | LR__4274
2ce28     0C 4E 05 F1 | 	add	fp, #12
2ce2c     A7 2A 02 FB | 	rdlong	local03, fp
2ce30     0C 4E 85 F1 | 	sub	fp, #12
2ce34     01 2A 16 F2 | 	cmp	local03, #1 wc
2ce38     B4 00 90 CD |  if_b	jmp	#LR__4275
2ce3c     18 4E 05 F1 | 	add	fp, #24
2ce40     A7 28 02 FB | 	rdlong	local02, fp
2ce44     14 2B 02 F6 | 	mov	local03, local02
2ce48     13 2A 46 F7 | 	zerox	local03, #19
2ce4c     14 28 46 F0 | 	shr	local02, #20
2ce50     02 28 66 F0 | 	shl	local02, #2
2ce54     ED 28 02 F1 | 	add	local02, __methods__
2ce58     14 29 02 FB | 	rdlong	local02, local02
2ce5c     14 4E 85 F1 | 	sub	fp, #20
2ce60     A7 12 02 FB | 	rdlong	arg01, fp
2ce64     04 4E 85 F1 | 	sub	fp, #4
2ce68     F2 26 02 F6 | 	mov	local01, objptr
2ce6c     15 E5 01 F6 | 	mov	objptr, local03
2ce70     2D 28 62 FD | 	call	local02
2ce74     13 E5 01 F6 | 	mov	objptr, local01
2ce78     14 4E 05 F1 | 	add	fp, #20
2ce7c     A7 FA 61 FC | 	wrlong	result1, fp
2ce80     14 4E 85 F1 | 	sub	fp, #20
2ce84     00 FA 55 F2 | 	cmps	result1, #0 wc
2ce88     64 00 90 CD |  if_b	jmp	#LR__4275
2ce8c     1C 4E 05 F1 | 	add	fp, #28
2ce90     A7 2A 02 FB | 	rdlong	local03, fp
2ce94     15 29 02 F6 | 	mov	local02, local03
2ce98     01 28 06 F1 | 	add	local02, #1
2ce9c     A7 28 62 FC | 	wrlong	local02, fp
2cea0     08 4E 85 F1 | 	sub	fp, #8
2cea4     A7 28 02 FB | 	rdlong	local02, fp
2cea8     15 29 42 FC | 	wrbyte	local02, local03
2ceac     04 4E 85 F1 | 	sub	fp, #4
2ceb0     A7 2A 02 FB | 	rdlong	local03, fp
2ceb4     01 2A 06 F1 | 	add	local03, #1
2ceb8     A7 2A 62 FC | 	wrlong	local03, fp
2cebc     04 4E 85 F1 | 	sub	fp, #4
2cec0     A7 2A 02 FB | 	rdlong	local03, fp
2cec4     01 2A 86 F1 | 	sub	local03, #1
2cec8     A7 2A 62 FC | 	wrlong	local03, fp
2cecc     14 4E 05 F1 | 	add	fp, #20
2ced0     A7 2A 0A FB | 	rdlong	local03, fp wz
2ced4     20 4E 85 F1 | 	sub	fp, #32
2ced8     4C FF 9F AD |  if_e	jmp	#LR__4274
2cedc     14 4E 05 F1 | 	add	fp, #20
2cee0     A7 28 02 FB | 	rdlong	local02, fp
2cee4     14 4E 85 F1 | 	sub	fp, #20
2cee8     0A 28 0E F2 | 	cmp	local02, #10 wz
2ceec     38 FF 9F 5D |  if_ne	jmp	#LR__4274
2cef0                 | LR__4275
2cef0     10 4E 05 F1 | 	add	fp, #16
2cef4     A7 FA 01 FB | 	rdlong	result1, fp
2cef8     10 4E 85 F1 | 	sub	fp, #16
2cefc                 | LR__4276
2cefc     A7 F0 03 F6 | 	mov	ptra, fp
2cf00     B2 00 A0 FD | 	call	#popregs_
2cf04                 | __system___vfsread_ret
2cf04     2D 00 64 FD | 	ret
2cf08                 | 
2cf08                 | __system____default_filbuf
2cf08     04 4A 05 F6 | 	mov	COUNT_, #4
2cf0c     A8 00 A0 FD | 	call	#pushregs_
2cf10     09 27 02 F6 | 	mov	local01, arg01
2cf14     13 29 02 FB | 	rdlong	local02, local01
2cf18     0C 28 06 F1 | 	add	local02, #12
2cf1c     14 FB 09 FB | 	rdlong	result1, local02 wz
2cf20     0C 28 86 F1 | 	sub	local02, #12
2cf24     20 00 90 5D |  if_ne	jmp	#LR__4280
2cf28     14 28 06 F1 | 	add	local02, #20
2cf2c     14 FB 01 F6 | 	mov	result1, local02
2cf30     04 28 86 F1 | 	sub	local02, #4
2cf34     14 FB 61 FC | 	wrlong	result1, local02
2cf38     04 28 86 F1 | 	sub	local02, #4
2cf3c     02 00 80 FF 
2cf40     14 01 68 FC | 	wrlong	##1024, local02
2cf44     0C 28 86 F1 | 	sub	local02, #12
2cf48                 | LR__4280
2cf48     14 26 06 F1 | 	add	local01, #20
2cf4c     13 2B 02 FB | 	rdlong	local03, local01
2cf50     15 2D 02 F6 | 	mov	local04, local03
2cf54     14 26 86 F1 | 	sub	local01, #20
2cf58     13 2C 46 F7 | 	zerox	local04, #19
2cf5c     14 2A 46 F0 | 	shr	local03, #20
2cf60     02 2A 66 F0 | 	shl	local03, #2
2cf64     ED 2A 02 F1 | 	add	local03, __methods__
2cf68     15 2B 02 FB | 	rdlong	local03, local03
2cf6c     10 28 06 F1 | 	add	local02, #16
2cf70     14 15 02 FB | 	rdlong	arg02, local02
2cf74     04 28 86 F1 | 	sub	local02, #4
2cf78     14 17 02 FB | 	rdlong	arg03, local02
2cf7c     0C 28 86 F1 | 	sub	local02, #12
2cf80     13 13 02 F6 | 	mov	arg01, local01
2cf84     F2 26 02 F6 | 	mov	local01, objptr
2cf88     16 E5 01 F6 | 	mov	objptr, local04
2cf8c     2D 2A 62 FD | 	call	local03
2cf90     13 E5 01 F6 | 	mov	objptr, local01
2cf94     FD 2C 02 F6 | 	mov	local04, result1
2cf98     00 2C 56 F2 | 	cmps	local04, #0 wc
2cf9c     01 FA 65 C6 |  if_b	neg	result1, #1
2cfa0     28 00 90 CD |  if_b	jmp	#LR__4281
2cfa4     14 2D 62 FC | 	wrlong	local04, local02
2cfa8     10 28 06 F1 | 	add	local02, #16
2cfac     14 2B 02 FB | 	rdlong	local03, local02
2cfb0     0C 28 86 F1 | 	sub	local02, #12
2cfb4     14 2B 62 FC | 	wrlong	local03, local02
2cfb8     04 28 06 F1 | 	add	local02, #4
2cfbc     14 2B 02 FB | 	rdlong	local03, local02
2cfc0     01 2A 46 F5 | 	or	local03, #1
2cfc4     14 2B 62 FC | 	wrlong	local03, local02
2cfc8     16 FB 01 F6 | 	mov	result1, local04
2cfcc                 | LR__4281
2cfcc     A7 F0 03 F6 | 	mov	ptra, fp
2cfd0     B2 00 A0 FD | 	call	#popregs_
2cfd4                 | __system____default_filbuf_ret
2cfd4     2D 00 64 FD | 	ret
2cfd8                 | 
2cfd8                 | __system__getlower_1155
2cfd8     41 12 56 F2 | 	cmps	arg01, #65 wc
2cfdc     10 00 90 CD |  if_b	jmp	#LR__4290
2cfe0     5B 12 56 F2 | 	cmps	arg01, #91 wc
2cfe4     09 FB 01 C6 |  if_b	mov	result1, arg01
2cfe8     20 FA 05 C1 |  if_b	add	result1, #32
2cfec     04 00 90 CD |  if_b	jmp	#__system__getlower_1155_ret
2cff0                 | LR__4290
2cff0     09 FB 01 F6 | 	mov	result1, arg01
2cff4                 | __system__getlower_1155_ret
2cff4     2D 00 64 FD | 	ret
2cff8                 | 
2cff8                 | __system___pat_match
2cff8     08 4A 05 F6 | 	mov	COUNT_, #8
2cffc     A8 00 A0 FD | 	call	#pushregs_
2d000     09 27 02 F6 | 	mov	local01, arg01
2d004                 | LR__4300
2d004     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2d008     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2d00c     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2d010     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2d014     2C 00 90 AD |  if_e	jmp	#LR__4301
2d018     0A 13 C2 FA | 	rdbyte	arg01, arg02
2d01c     B8 FF BF FD | 	call	#__system__getlower_1155
2d020     FD 2A 02 F6 | 	mov	local03, result1
2d024     13 13 C2 FA | 	rdbyte	arg01, local01
2d028     AC FF BF FD | 	call	#__system__getlower_1155
2d02c     15 FB 09 F2 | 	cmp	result1, local03 wz
2d030     00 FA 05 56 |  if_ne	mov	result1, #0
2d034     FC 00 90 5D |  if_ne	jmp	#LR__4309
2d038     01 26 06 F1 | 	add	local01, #1
2d03c     01 14 06 F1 | 	add	arg02, #1
2d040     C0 FF 9F FD | 	jmp	#LR__4300
2d044                 | LR__4301
2d044     0A 2B C2 FA | 	rdbyte	local03, arg02
2d048     2A 2A 0E F2 | 	cmp	local03, #42 wz
2d04c     D4 00 90 5D |  if_ne	jmp	#LR__4308
2d050     01 14 06 F1 | 	add	arg02, #1
2d054     0A 29 C2 FA | 	rdbyte	local02, arg02
2d058     01 14 86 F1 | 	sub	arg02, #1
2d05c     2E 28 0E F2 | 	cmp	local02, #46 wz
2d060     28 00 90 5D |  if_ne	jmp	#LR__4302
2d064     02 14 06 F1 | 	add	arg02, #2
2d068     0A 29 C2 FA | 	rdbyte	local02, arg02
2d06c     02 14 86 F1 | 	sub	arg02, #2
2d070     2A 28 0E F2 | 	cmp	local02, #42 wz
2d074     03 14 06 A1 |  if_e	add	arg02, #3
2d078     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2d07c     03 14 86 A1 |  if_e	sub	arg02, #3
2d080     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2d084     01 FA 05 A6 |  if_e	mov	result1, #1
2d088     A8 00 90 AD |  if_e	jmp	#LR__4309
2d08c                 | LR__4302
2d08c     01 14 06 F1 | 	add	arg02, #1
2d090     00 30 06 F6 | 	mov	local06, #0
2d094     97 1E 48 FB | 	callpa	#(@LR__4305-@LR__4303)>>2,fcache_load_ptr_
2d098                 | LR__4303
2d098     18 33 02 F6 | 	mov	local07, local06
2d09c     0A 33 02 F1 | 	add	local07, arg02
2d0a0     19 33 CA FA | 	rdbyte	local07, local07 wz
2d0a4     18 2F 02 56 |  if_ne	mov	local05, local06
2d0a8     01 2E 06 51 |  if_ne	add	local05, #1
2d0ac     17 31 02 56 |  if_ne	mov	local06, local05
2d0b0     E4 FF 9F 5D |  if_ne	jmp	#LR__4303
2d0b4     00 34 06 F6 | 	mov	local08, #0
2d0b8                 | LR__4304
2d0b8     1A 33 02 F6 | 	mov	local07, local08
2d0bc     13 33 02 F1 | 	add	local07, local01
2d0c0     19 33 CA FA | 	rdbyte	local07, local07 wz
2d0c4     1A 2F 02 56 |  if_ne	mov	local05, local08
2d0c8     01 2E 06 51 |  if_ne	add	local05, #1
2d0cc     17 35 02 56 |  if_ne	mov	local08, local05
2d0d0     E4 FF 9F 5D |  if_ne	jmp	#LR__4304
2d0d4                 | LR__4305
2d0d4     18 35 52 F2 | 	cmps	local08, local06 wc
2d0d8     00 FA 05 C6 |  if_b	mov	result1, #0
2d0dc     54 00 90 CD |  if_b	jmp	#LR__4309
2d0e0     1A 29 02 F6 | 	mov	local02, local08
2d0e4     18 29 82 F1 | 	sub	local02, local06
2d0e8     14 27 02 F1 | 	add	local01, local02
2d0ec                 | LR__4306
2d0ec     01 30 56 F2 | 	cmps	local06, #1 wc
2d0f0     30 00 90 CD |  if_b	jmp	#LR__4307
2d0f4     13 13 C2 FA | 	rdbyte	arg01, local01
2d0f8     DC FE BF FD | 	call	#__system__getlower_1155
2d0fc     FD 34 02 F6 | 	mov	local08, result1
2d100     0A 13 C2 FA | 	rdbyte	arg01, arg02
2d104     D0 FE BF FD | 	call	#__system__getlower_1155
2d108     FD 34 0A F2 | 	cmp	local08, result1 wz
2d10c     00 FA 05 56 |  if_ne	mov	result1, #0
2d110     20 00 90 5D |  if_ne	jmp	#LR__4309
2d114     01 26 06 F1 | 	add	local01, #1
2d118     01 14 06 F1 | 	add	arg02, #1
2d11c     01 30 86 F1 | 	sub	local06, #1
2d120     C8 FF 9F FD | 	jmp	#LR__4306
2d124                 | LR__4307
2d124                 | LR__4308
2d124     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2d128     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2d12c     01 FA 05 A6 |  if_e	mov	result1, #1
2d130     00 FA 05 56 |  if_ne	mov	result1, #0
2d134                 | LR__4309
2d134     A7 F0 03 F6 | 	mov	ptra, fp
2d138     B2 00 A0 FD | 	call	#popregs_
2d13c                 | __system___pat_match_ret
2d13c     2D 00 64 FD | 	ret
2d140                 | 
2d140                 | _fatfs_cc_ff_uni2oem
2d140     00 00 06 F6 | 	mov	_var01, #0
2d144     80 12 16 F2 | 	cmp	arg01, #128 wc
2d148     09 01 02 C6 |  if_b	mov	_var01, arg01
2d14c     58 00 90 CD |  if_b	jmp	#LR__4314
2d150     80 00 00 FF 
2d154     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2d158     4C 00 90 3D |  if_ae	jmp	#LR__4313
2d15c     0A FB 31 F9 | 	getword	result1, arg02, #0
2d160     01 00 00 FF 
2d164     52 FB 0D F2 | 	cmp	result1, ##850 wz
2d168     3C 00 90 5D |  if_ne	jmp	#LR__4313
2d16c                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2d16c     00 00 06 F6 | 	mov	_var01, #0
2d170     97 14 48 FB | 	callpa	#(@LR__4311-@LR__4310)>>2,fcache_load_ptr_
2d174                 | LR__4310
2d174     00 FB 31 F9 | 	getword	result1, _var01, #0
2d178     80 FA 15 F2 | 	cmp	result1, #128 wc
2d17c     1C 00 90 3D |  if_ae	jmp	#LR__4312
2d180     00 FB 31 F9 | 	getword	result1, _var01, #0
2d184     01 FA 65 F0 | 	shl	result1, #1
2d188     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2d18c     FD FA E1 FA | 	rdword	result1, result1
2d190     FD 12 0A F2 | 	cmp	arg01, result1 wz
2d194     01 00 06 51 |  if_ne	add	_var01, #1
2d198     D8 FF 9F 5D |  if_ne	jmp	#LR__4310
2d19c                 | LR__4311
2d19c                 | LR__4312
2d19c     00 01 32 F9 | 	getword	_var01, _var01, #0
2d1a0     80 00 06 F1 | 	add	_var01, #128
2d1a4     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2d1a8                 | LR__4313
2d1a8                 | LR__4314
2d1a8                 | ' 			c = (c + 0x80) & 0xFF;
2d1a8                 | ' 		}
2d1a8                 | ' 	}
2d1a8                 | ' 
2d1a8                 | ' 	return c;
2d1a8     00 FB 01 F6 | 	mov	result1, _var01
2d1ac                 | _fatfs_cc_ff_uni2oem_ret
2d1ac     2D 00 64 FD | 	ret
2d1b0                 | 
2d1b0                 | _fatfs_cc_ff_oem2uni
2d1b0     00 00 06 F6 | 	mov	_var01, #0
2d1b4     09 FB 31 F9 | 	getword	result1, arg01, #0
2d1b8     80 FA 15 F2 | 	cmp	result1, #128 wc
2d1bc     09 01 02 C6 |  if_b	mov	_var01, arg01
2d1c0     2C 00 90 CD |  if_b	jmp	#LR__4321
2d1c4     0A 15 32 F9 | 	getword	arg02, arg02, #0
2d1c8     01 00 00 FF 
2d1cc     52 15 0E F2 | 	cmp	arg02, ##850 wz
2d1d0     1C 00 90 5D |  if_ne	jmp	#LR__4320
2d1d4     09 FB 31 F9 | 	getword	result1, arg01, #0
2d1d8     00 FB 15 F2 | 	cmp	result1, #256 wc
2d1dc     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2d1e0     80 12 86 C1 |  if_b	sub	arg01, #128
2d1e4     01 12 66 C0 |  if_b	shl	arg01, #1
2d1e8     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2d1ec     09 01 E2 CA |  if_b	rdword	_var01, arg01
2d1f0                 | LR__4320
2d1f0                 | LR__4321
2d1f0                 | ' 		}
2d1f0                 | ' 	}
2d1f0                 | ' 
2d1f0                 | ' 	return c;
2d1f0     00 FB 01 F6 | 	mov	result1, _var01
2d1f4                 | _fatfs_cc_ff_oem2uni_ret
2d1f4     2D 00 64 FD | 	ret
2d1f8                 | 
2d1f8                 | _fatfs_cc_ff_wtoupper
2d1f8     09 01 02 F6 | 	mov	_var01, arg01
2d1fc     80 00 00 FF 
2d200     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2d204     60 01 90 3D |  if_ae	jmp	#LR__4343
2d208     00 03 02 F6 | 	mov	_var02, _var01
2d20c     01 01 32 F9 | 	getword	_var01, _var02, #0
2d210     08 00 00 FF 
2d214     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2d218     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2d21c     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2d220     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2d224     01 00 00 3F 
2d228     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2d22c     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2d230     01 00 00 3F 
2d234     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2d238     02 07 02 F6 | 	mov	_var04, _var03
2d23c                 | ' 		uc = (WORD)uni;
2d23c                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2d23c                 | ' 		for (;;) {
2d23c                 | LR__4330
2d23c     03 09 E2 FA | 	rdword	_var05, _var04
2d240     04 05 02 F6 | 	mov	_var03, _var05
2d244     0F 04 4E F7 | 	zerox	_var03, #15 wz
2d248     02 06 06 F1 | 	add	_var04, #2
2d24c     14 01 90 AD |  if_e	jmp	#LR__4342
2d250     01 05 32 F9 | 	getword	_var03, _var02, #0
2d254     04 01 32 F9 | 	getword	_var01, _var05, #0
2d258     00 05 12 F2 | 	cmp	_var03, _var01 wc
2d25c     04 01 90 CD |  if_b	jmp	#LR__4342
2d260     03 0B E2 FA | 	rdword	_var06, _var04
2d264     05 0D 32 F9 | 	getword	_var07, _var06, #0
2d268     08 0C 46 F0 | 	shr	_var07, #8
2d26c     05 0B 32 F9 | 	getword	_var06, _var06, #0
2d270     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2d274     01 05 32 F9 | 	getword	_var03, _var02, #0
2d278     04 0F 32 F9 | 	getword	_var08, _var05, #0
2d27c     05 01 32 F9 | 	getword	_var01, _var06, #0
2d280     00 0F 02 F1 | 	add	_var08, _var01
2d284     07 05 52 F2 | 	cmps	_var03, _var08 wc
2d288     02 06 06 F1 | 	add	_var04, #2
2d28c     C4 00 90 3D |  if_ae	jmp	#LR__4341
2d290                 | ' 				switch (cmd) {
2d290     06 11 32 F9 | 	getword	_var09, _var07, #0
2d294     09 10 26 F3 | 	fle	_var09, #9
2d298     30 10 62 FD | 	jmprel	_var09
2d29c                 | LR__4331
2d29c     24 00 90 FD | 	jmp	#LR__4332
2d2a0     3C 00 90 FD | 	jmp	#LR__4333
2d2a4     54 00 90 FD | 	jmp	#LR__4334
2d2a8     5C 00 90 FD | 	jmp	#LR__4335
2d2ac     64 00 90 FD | 	jmp	#LR__4336
2d2b0     6C 00 90 FD | 	jmp	#LR__4337
2d2b4     74 00 90 FD | 	jmp	#LR__4338
2d2b8     7C 00 90 FD | 	jmp	#LR__4339
2d2bc     84 00 90 FD | 	jmp	#LR__4340
2d2c0     A0 00 90 FD | 	jmp	#LR__4342
2d2c4                 | LR__4332
2d2c4     01 03 32 F9 | 	getword	_var02, _var02, #0
2d2c8     04 09 32 F9 | 	getword	_var05, _var05, #0
2d2cc     04 03 82 F1 | 	sub	_var02, _var05
2d2d0     01 02 66 F0 | 	shl	_var02, #1
2d2d4     03 03 02 F1 | 	add	_var02, _var04
2d2d8     01 03 E2 FA | 	rdword	_var02, _var02
2d2dc     84 00 90 FD | 	jmp	#LR__4342
2d2e0                 | LR__4333
2d2e0     01 05 32 F9 | 	getword	_var03, _var02, #0
2d2e4     01 03 32 F9 | 	getword	_var02, _var02, #0
2d2e8     04 09 32 F9 | 	getword	_var05, _var05, #0
2d2ec     04 03 82 F1 | 	sub	_var02, _var05
2d2f0     01 02 06 F5 | 	and	_var02, #1
2d2f4     02 03 C2 F2 | 	subr	_var02, _var03
2d2f8     68 00 90 FD | 	jmp	#LR__4342
2d2fc                 | LR__4334
2d2fc     01 03 32 F9 | 	getword	_var02, _var02, #0
2d300     10 02 86 F1 | 	sub	_var02, #16
2d304     5C 00 90 FD | 	jmp	#LR__4342
2d308                 | LR__4335
2d308     01 03 32 F9 | 	getword	_var02, _var02, #0
2d30c     20 02 86 F1 | 	sub	_var02, #32
2d310     50 00 90 FD | 	jmp	#LR__4342
2d314                 | LR__4336
2d314     01 03 32 F9 | 	getword	_var02, _var02, #0
2d318     30 02 86 F1 | 	sub	_var02, #48
2d31c     44 00 90 FD | 	jmp	#LR__4342
2d320                 | LR__4337
2d320     01 03 32 F9 | 	getword	_var02, _var02, #0
2d324     1A 02 86 F1 | 	sub	_var02, #26
2d328     38 00 90 FD | 	jmp	#LR__4342
2d32c                 | LR__4338
2d32c     01 03 32 F9 | 	getword	_var02, _var02, #0
2d330     08 02 06 F1 | 	add	_var02, #8
2d334     2C 00 90 FD | 	jmp	#LR__4342
2d338                 | LR__4339
2d338     01 03 32 F9 | 	getword	_var02, _var02, #0
2d33c     50 02 86 F1 | 	sub	_var02, #80
2d340     20 00 90 FD | 	jmp	#LR__4342
2d344                 | LR__4340
2d344     01 03 32 F9 | 	getword	_var02, _var02, #0
2d348     0E 00 00 FF 
2d34c     60 02 86 F1 | 	sub	_var02, ##7264
2d350                 | ' 				}
2d350                 | ' 				break;
2d350     10 00 90 FD | 	jmp	#LR__4342
2d354                 | LR__4341
2d354     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2d358     02 0A 06 AA |  if_e	mul	_var06, #2
2d35c     05 07 02 A1 |  if_e	add	_var04, _var06
2d360     D8 FE 9F FD | 	jmp	#LR__4330
2d364                 | LR__4342
2d364     01 01 32 F9 | 	getword	_var01, _var02, #0
2d368                 | LR__4343
2d368                 | ' 		}
2d368                 | ' 		uni = uc;
2d368                 | ' 	}
2d368                 | ' 
2d368                 | ' 	return uni;
2d368     00 FB 01 F6 | 	mov	result1, _var01
2d36c                 | _fatfs_cc_ff_wtoupper_ret
2d36c     2D 00 64 FD | 	ret
2d370                 | 
2d370                 | _fatfs_cc_strncpy
2d370     09 01 02 F6 | 	mov	_var01, arg01
2d374     97 12 48 FB | 	callpa	#(@LR__4351-@LR__4350)>>2,fcache_load_ptr_
2d378                 | ' 
2d378                 | ' 	dscan = dst;
2d378                 | ' 	sscan = src;
2d378                 | ' 	count = n;
2d378                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2d378                 | LR__4350
2d378     01 16 86 F1 | 	sub	arg03, #1
2d37c     00 16 56 F2 | 	cmps	arg03, #0 wc
2d380     18 00 90 CD |  if_b	jmp	#LR__4352
2d384     0A FB C1 FA | 	rdbyte	result1, arg02
2d388     00 FB 41 FC | 	wrbyte	result1, _var01
2d38c     01 14 06 F1 | 	add	arg02, #1
2d390     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2d394                 | ' 		continue;
2d394     01 00 06 F1 | 	add	_var01, #1
2d398     DC FF 9F 5D |  if_ne	jmp	#LR__4350
2d39c                 | LR__4351
2d39c                 | LR__4352
2d39c     97 0C 48 FB | 	callpa	#(@LR__4354-@LR__4353)>>2,fcache_load_ptr_
2d3a0                 | ' 	while (--count >= 0)
2d3a0                 | LR__4353
2d3a0     01 16 86 F1 | 	sub	arg03, #1
2d3a4     00 16 56 F2 | 	cmps	arg03, #0 wc
2d3a8     00 03 02 36 |  if_ae	mov	_var02, _var01
2d3ac     01 00 06 31 |  if_ae	add	_var01, #1
2d3b0     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2d3b4     E8 FF 9F 3D |  if_ae	jmp	#LR__4353
2d3b8                 | LR__4354
2d3b8                 | ' 		*dscan++ = '\0';
2d3b8                 | ' 	return(dst);
2d3b8     09 FB 01 F6 | 	mov	result1, arg01
2d3bc                 | _fatfs_cc_strncpy_ret
2d3bc     2D 00 64 FD | 	ret
2d3c0                 | 
2d3c0                 | _fatfs_cc_memcmp
2d3c0                 | ' 	for (n = size; n > 0; n--)
2d3c0     00 16 0E F2 | 	cmp	arg03, #0 wz
2d3c4     28 00 90 AD |  if_e	jmp	#LR__4361
2d3c8                 | LR__4360
2d3c8     09 01 C2 FA | 	rdbyte	_var01, arg01
2d3cc     0A 03 C2 FA | 	rdbyte	_var02, arg02
2d3d0     01 01 0A F2 | 	cmp	_var01, _var02 wz
2d3d4     01 12 06 A1 |  if_e	add	arg01, #1
2d3d8     01 14 06 A1 |  if_e	add	arg02, #1
2d3dc                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2d3dc     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2d3e0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2d3e4     01 FB 81 51 |  if_ne	sub	result1, _var02
2d3e8     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2d3ec     F6 17 6E FB | 	djnz	arg03, #LR__4360
2d3f0                 | LR__4361
2d3f0                 | ' 
2d3f0                 | ' 	return(0);
2d3f0     00 FA 05 F6 | 	mov	result1, #0
2d3f4                 | _fatfs_cc_memcmp_ret
2d3f4     2D 00 64 FD | 	ret
2d3f8                 | 
2d3f8                 | _fatfs_cc_strncmp
2d3f8     09 01 0A F6 | 	mov	_var01, arg01 wz
2d3fc     14 00 90 5D |  if_ne	jmp	#LR__4370
2d400                 | ' 		return scan2 ? -1 : 0;
2d400     00 14 0E F2 | 	cmp	arg02, #0 wz
2d404     01 02 66 56 |  if_ne	neg	_var02, #1
2d408     00 02 06 A6 |  if_e	mov	_var02, #0
2d40c     01 FB 01 F6 | 	mov	result1, _var02
2d410     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2d414                 | LR__4370
2d414     00 14 0E F2 | 	cmp	arg02, #0 wz
2d418     01 FA 05 A6 |  if_e	mov	result1, #1
2d41c     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2d420     0B 05 02 F6 | 	mov	_var03, arg03
2d424     97 16 48 FB | 	callpa	#(@LR__4372-@LR__4371)>>2,fcache_load_ptr_
2d428                 | ' 	count = n;
2d428                 | ' 	do {
2d428                 | LR__4371
2d428     00 07 C2 FA | 	rdbyte	_var04, _var01
2d42c     0A 09 02 F6 | 	mov	_var05, arg02
2d430     04 0B C2 FA | 	rdbyte	_var06, _var05
2d434     01 04 86 F1 | 	sub	_var03, #1
2d438     00 04 56 F2 | 	cmps	_var03, #0 wc
2d43c     01 00 06 F1 | 	add	_var01, #1
2d440     01 14 06 F1 | 	add	arg02, #1
2d444     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2d448     08 00 90 2D |  if_nc_and_z	jmp	#LR__4373
2d44c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2d450     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4371
2d454                 | LR__4372
2d454                 | LR__4373
2d454     00 04 56 F2 | 	cmps	_var03, #0 wc
2d458                 | ' 		return(0);
2d458     00 FA 05 C6 |  if_b	mov	result1, #0
2d45c     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2d460     05 07 0A F2 | 	cmp	_var04, _var06 wz
2d464                 | ' 		return(0);
2d464     00 FA 05 A6 |  if_e	mov	result1, #0
2d468     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2d46c     00 06 0E F2 | 	cmp	_var04, #0 wz
2d470                 | ' 		return(-1);
2d470     01 FA 65 A6 |  if_e	neg	result1, #1
2d474     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2d478     00 0A 0E F2 | 	cmp	_var06, #0 wz
2d47c                 | ' 		return(1);
2d47c     01 FA 05 A6 |  if_e	mov	result1, #1
2d480                 | ' 		return(c1 - c2);
2d480     03 FB 01 56 |  if_ne	mov	result1, _var04
2d484     05 FB 81 51 |  if_ne	sub	result1, _var06
2d488                 | _fatfs_cc_strncmp_ret
2d488     2D 00 64 FD | 	ret
2d48c                 | 
2d48c                 | _fatfs_cc_strchr
2d48c                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
2d48c                 | ' 	while ((c = *s++) != (char) charwanted)
2d48c                 | LR__4380
2d48c     09 01 02 F6 | 	mov	_var01, arg01
2d490     00 03 C2 FA | 	rdbyte	_var02, _var01
2d494     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2d498     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2d49c     03 05 0A F2 | 	cmp	_var03, _var04 wz
2d4a0     01 12 06 F1 | 	add	arg01, #1
2d4a4     14 00 90 AD |  if_e	jmp	#LR__4381
2d4a8     01 05 02 F6 | 	mov	_var03, _var02
2d4ac     07 04 4E F7 | 	zerox	_var03, #7 wz
2d4b0     00 FA 05 A6 |  if_e	mov	result1, #0
2d4b4     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2d4b8     D0 FF 9F FD | 	jmp	#LR__4380
2d4bc                 | LR__4381
2d4bc                 | ' 	return((char *)--s);
2d4bc     01 12 86 F1 | 	sub	arg01, #1
2d4c0     09 FB 01 F6 | 	mov	result1, arg01
2d4c4                 | _fatfs_cc_strchr_ret
2d4c4     2D 00 64 FD | 	ret
2d4c8                 | 
2d4c8                 | _fatfs_cc_disk_initialize
2d4c8     04 4A 05 F6 | 	mov	COUNT_, #4
2d4cc     A8 00 A0 FD | 	call	#pushregs_
2d4d0     40 F0 07 F1 | 	add	ptra, #64
2d4d4     04 4E 05 F1 | 	add	fp, #4
2d4d8     A7 12 42 FC | 	wrbyte	arg01, fp
2d4dc     01 00 00 FF 
2d4e0     14 E4 05 F1 | 	add	objptr, ##532
2d4e4     F2 18 02 FB | 	rdlong	arg04, objptr
2d4e8     2C 4E 05 F1 | 	add	fp, #44
2d4ec     A7 18 62 FC | 	wrlong	arg04, fp
2d4f0     04 E4 85 F1 | 	sub	objptr, #4
2d4f4     F2 18 02 FB | 	rdlong	arg04, objptr
2d4f8     04 4E 05 F1 | 	add	fp, #4
2d4fc     A7 18 62 FC | 	wrlong	arg04, fp
2d500     08 E4 05 F1 | 	add	objptr, #8
2d504     F2 18 02 FB | 	rdlong	arg04, objptr
2d508     04 4E 05 F1 | 	add	fp, #4
2d50c     A7 18 62 FC | 	wrlong	arg04, fp
2d510     04 E4 05 F1 | 	add	objptr, #4
2d514     F2 18 02 FB | 	rdlong	arg04, objptr
2d518     04 4E 05 F1 | 	add	fp, #4
2d51c     A7 18 62 FC | 	wrlong	arg04, fp
2d520     04 E4 05 F1 | 	add	objptr, #4
2d524     F2 02 48 FC | 	wrbyte	#1, objptr
2d528     01 00 00 FF 
2d52c     20 E4 85 F1 | 	sub	objptr, ##544
2d530     38 4E 85 F1 | 	sub	fp, #56
2d534     A7 18 CA FA | 	rdbyte	arg04, fp wz
2d538     04 4E 85 F1 | 	sub	fp, #4
2d53c                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2d53c                 | '             return RES_NOTRDY;
2d53c     03 FA 05 56 |  if_ne	mov	result1, #3
2d540     D8 05 90 5D |  if_ne	jmp	#LR__4408
2d544     13 00 00 FF 
2d548     10 13 06 F6 | 	mov	arg01, ##10000
2d54c     44 95 BF FD | 	call	#__system___waitus
2d550     30 4E 05 F1 | 	add	fp, #48
2d554     A7 12 02 FB | 	rdlong	arg01, fp
2d558     09 01 08 FC | 	wrpin	#0, arg01
2d55c     04 4E 05 F1 | 	add	fp, #4
2d560     A7 12 02 FB | 	rdlong	arg01, fp
2d564     09 01 08 FC | 	wrpin	#0, arg01
2d568     04 4E 05 F1 | 	add	fp, #4
2d56c     A7 12 02 FB | 	rdlong	arg01, fp
2d570     09 01 08 FC | 	wrpin	#0, arg01
2d574     04 4E 05 F1 | 	add	fp, #4
2d578     A7 12 02 FB | 	rdlong	arg01, fp
2d57c     09 00 80 FF 
2d580     09 01 08 FC | 	wrpin	##4608, arg01
2d584     0C 4E 85 F1 | 	sub	fp, #12
2d588     A7 12 02 FB | 	rdlong	arg01, fp
2d58c     59 12 62 FD | 	drvh	arg01
2d590     04 4E 05 F1 | 	add	fp, #4
2d594     A7 12 02 FB | 	rdlong	arg01, fp
2d598     59 12 62 FD | 	drvh	arg01
2d59c     04 4E 05 F1 | 	add	fp, #4
2d5a0     A7 12 02 FB | 	rdlong	arg01, fp
2d5a4     59 12 62 FD | 	drvh	arg01
2d5a8     04 4E 05 F1 | 	add	fp, #4
2d5ac     A7 12 02 FB | 	rdlong	arg01, fp
2d5b0     59 12 62 FD | 	drvh	arg01
2d5b4     20 4E 85 F1 | 	sub	fp, #32
2d5b8     00 04 80 FF 
2d5bc     A7 20 68 FC | 	wrlong	##524304, fp
2d5c0     04 4E 05 F1 | 	add	fp, #4
2d5c4     20 03 80 FF 
2d5c8     A7 90 68 FC | 	wrlong	##409672, fp
2d5cc     14 4E 05 F1 | 	add	fp, #20
2d5d0     A7 26 02 FB | 	rdlong	local01, fp
2d5d4     18 4E 85 F1 | 	sub	fp, #24
2d5d8     A7 16 02 FB | 	rdlong	arg03, fp
2d5dc     40 26 62 FD | 	dirl	local01
2d5e0     A0 03 80 FF 
2d5e4     13 91 08 FC | 	wrpin	##475208, local01
2d5e8     13 17 12 FC | 	wxpin	arg03, local01
2d5ec     13 01 28 FC | 	wypin	#0, local01
2d5f0     41 26 62 FD | 	dirh	local01
2d5f4     1C 4E 05 F1 | 	add	fp, #28
2d5f8     A7 28 02 FB | 	rdlong	local02, fp
2d5fc     14 27 82 F1 | 	sub	local01, local02
2d600     07 26 06 F5 | 	and	local01, #7
2d604     18 26 66 F0 | 	shl	local01, #24
2d608     78 14 06 F6 | 	mov	arg02, #120
2d60c     13 15 42 F5 | 	or	arg02, local01
2d610     14 4E 85 F1 | 	sub	fp, #20
2d614     A7 14 62 FC | 	wrlong	arg02, fp
2d618     14 4E 05 F1 | 	add	fp, #20
2d61c     A7 12 02 FB | 	rdlong	arg01, fp
2d620     10 14 26 F4 | 	bith	arg02, #16
2d624     40 12 62 FD | 	dirl	arg01
2d628     09 15 02 FC | 	wrpin	arg02, arg01
2d62c     09 3F 18 FC | 	wxpin	#31, arg01
2d630     FF FF FF FF 
2d634     09 FF 2B FC | 	wypin	##-1, arg01
2d638     41 12 62 FD | 	dirh	arg01
2d63c     04 4E 85 F1 | 	sub	fp, #4
2d640     A7 14 02 FB | 	rdlong	arg02, fp
2d644     08 4E 05 F1 | 	add	fp, #8
2d648     A7 2A 02 FB | 	rdlong	local03, fp
2d64c     15 15 82 F1 | 	sub	arg02, local03
2d650     07 14 06 F5 | 	and	arg02, #7
2d654     18 14 66 F0 | 	shl	arg02, #24
2d658     14 4E 85 F1 | 	sub	fp, #20
2d65c     A7 14 62 FC | 	wrlong	arg02, fp
2d660     29 00 00 FF 
2d664     7A 14 46 F5 | 	or	arg02, ##21114
2d668     A7 14 62 FC | 	wrlong	arg02, fp
2d66c     14 4E 05 F1 | 	add	fp, #20
2d670     A7 12 02 FB | 	rdlong	arg01, fp
2d674     40 12 62 FD | 	dirl	arg01
2d678     09 15 02 FC | 	wrpin	arg02, arg01
2d67c     09 4F 18 FC | 	wxpin	#39, arg01
2d680     09 01 28 FC | 	wypin	#0, arg01
2d684     41 12 62 FD | 	dirh	arg01
2d688     28 4E 85 F1 | 	sub	fp, #40
2d68c     A7 12 02 F6 | 	mov	arg01, fp
2d690     14 4E 85 F1 | 	sub	fp, #20
2d694     0A 14 06 F6 | 	mov	arg02, #10
2d698     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1189
2d69c     00 12 06 F6 | 	mov	arg01, #0
2d6a0     00 14 06 F6 | 	mov	arg02, #0
2d6a4     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2d6a8     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1199
2d6ac     64 12 06 F6 | 	mov	arg01, #100
2d6b0     E0 93 BF FD | 	call	#__system___waitus
2d6b4     14 4E 05 F1 | 	add	fp, #20
2d6b8     A7 12 02 F6 | 	mov	arg01, fp
2d6bc     14 4E 85 F1 | 	sub	fp, #20
2d6c0     0A 14 06 F6 | 	mov	arg02, #10
2d6c4     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1189
2d6c8     0C 4E 05 F1 | 	add	fp, #12
2d6cc     A7 00 48 FC | 	wrbyte	#0, fp
2d6d0     0C 4E 85 F1 | 	sub	fp, #12
2d6d4     00 12 06 F6 | 	mov	arg01, #0
2d6d8     00 14 06 F6 | 	mov	arg02, #0
2d6dc     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2d6e0     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2d6e4     01 18 0E F2 | 	cmp	arg04, #1 wz
2d6e8     B8 03 90 5D |  if_ne	jmp	#LR__4407
2d6ec     08 12 06 F6 | 	mov	arg01, #8
2d6f0     AA 15 06 F6 | 	mov	arg02, #426
2d6f4     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2d6f8     FD FA E1 F8 | 	getbyte	result1, result1, #0
2d6fc     01 FA 0D F2 | 	cmp	result1, #1 wz
2d700     98 01 90 5D |  if_ne	jmp	#LR__4393
2d704     14 4E 05 F1 | 	add	fp, #20
2d708     A7 12 02 F6 | 	mov	arg01, fp
2d70c     14 4E 85 F1 | 	sub	fp, #20
2d710     04 14 06 F6 | 	mov	arg02, #4
2d714     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1189
2d718     16 4E 05 F1 | 	add	fp, #22
2d71c     A7 2C C2 FA | 	rdbyte	local04, fp
2d720     16 4E 85 F1 | 	sub	fp, #22
2d724     01 2C 0E F2 | 	cmp	local04, #1 wz
2d728     17 4E 05 A1 |  if_e	add	fp, #23
2d72c     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2d730     17 4E 85 A1 |  if_e	sub	fp, #23
2d734     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2d738     68 03 90 5D |  if_ne	jmp	#LR__4406
2d73c                 | ' 				for (tmr = 1000; tmr; tmr--) {
2d73c     18 4E 05 F1 | 	add	fp, #24
2d740     01 00 80 FF 
2d744     A7 D0 6B FC | 	wrlong	##1000, fp
2d748     18 4E 85 F1 | 	sub	fp, #24
2d74c                 | LR__4390
2d74c     18 4E 05 F1 | 	add	fp, #24
2d750     A7 26 0A FB | 	rdlong	local01, fp wz
2d754     18 4E 85 F1 | 	sub	fp, #24
2d758     3C 00 90 AD |  if_e	jmp	#LR__4391
2d75c     A9 12 06 F6 | 	mov	arg01, #169
2d760     1E 14 C6 F9 | 	decod	arg02, #30
2d764     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2d768     FD 2C 02 F6 | 	mov	local04, result1
2d76c     07 2C 4E F7 | 	zerox	local04, #7 wz
2d770     24 00 90 AD |  if_e	jmp	#LR__4391
2d774     01 00 00 FF 
2d778     E8 13 06 F6 | 	mov	arg01, ##1000
2d77c     14 93 BF FD | 	call	#__system___waitus
2d780     18 4E 05 F1 | 	add	fp, #24
2d784     A7 2C 02 FB | 	rdlong	local04, fp
2d788     01 2C 86 F1 | 	sub	local04, #1
2d78c     A7 2C 62 FC | 	wrlong	local04, fp
2d790     18 4E 85 F1 | 	sub	fp, #24
2d794     B4 FF 9F FD | 	jmp	#LR__4390
2d798                 | LR__4391
2d798     18 4E 05 F1 | 	add	fp, #24
2d79c     A7 2C 0A FB | 	rdlong	local04, fp wz
2d7a0     18 4E 85 F1 | 	sub	fp, #24
2d7a4     4C 00 90 AD |  if_e	jmp	#LR__4392
2d7a8     3A 12 06 F6 | 	mov	arg01, #58
2d7ac     00 14 06 F6 | 	mov	arg02, #0
2d7b0     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2d7b4     FD 2A 02 F6 | 	mov	local03, result1
2d7b8     07 2A 4E F7 | 	zerox	local03, #7 wz
2d7bc     34 00 90 5D |  if_ne	jmp	#LR__4392
2d7c0     14 4E 05 F1 | 	add	fp, #20
2d7c4     A7 12 02 F6 | 	mov	arg01, fp
2d7c8     14 4E 85 F1 | 	sub	fp, #20
2d7cc     04 14 06 F6 | 	mov	arg02, #4
2d7d0     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1189
2d7d4     14 4E 05 F1 | 	add	fp, #20
2d7d8     A7 26 C2 FA | 	rdbyte	local01, fp
2d7dc     40 26 CE F7 | 	test	local01, #64 wz
2d7e0     0C 2C 06 56 |  if_ne	mov	local04, #12
2d7e4     04 2C 06 A6 |  if_e	mov	local04, #4
2d7e8     08 4E 85 F1 | 	sub	fp, #8
2d7ec     A7 2C 42 FC | 	wrbyte	local04, fp
2d7f0     0C 4E 85 F1 | 	sub	fp, #12
2d7f4                 | LR__4392
2d7f4     14 2C 06 FB | 	rdlong	local04, #20
2d7f8     18 4E 05 F1 | 	add	fp, #24
2d7fc     A7 2C 62 FC | 	wrlong	local04, fp
2d800     0C 4E 05 F1 | 	add	fp, #12
2d804     A7 2C 02 FB | 	rdlong	local04, fp
2d808     1B 2C 26 F4 | 	bith	local04, #27
2d80c     A7 2C 62 FC | 	wrlong	local04, fp
2d810     0C 4E 85 F1 | 	sub	fp, #12
2d814     A7 2C 02 FB | 	rdlong	local04, fp
2d818     18 4E 85 F1 | 	sub	fp, #24
2d81c     68 78 04 FF 
2d820     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2d824     1C 4E 05 C1 |  if_b	add	fp, #28
2d828     00 01 80 CF 
2d82c     A7 08 68 CC |  if_b	wrlong	##131076, fp
2d830     1C 4E 85 C1 |  if_b	sub	fp, #28
2d834     6C 02 90 CD |  if_b	jmp	#LR__4406
2d838     18 4E 05 F1 | 	add	fp, #24
2d83c     A7 2C 02 FB | 	rdlong	local04, fp
2d840     18 4E 85 F1 | 	sub	fp, #24
2d844     E1 F5 05 FF 
2d848     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2d84c     1C 4E 05 C1 |  if_b	add	fp, #28
2d850     00 01 80 CF 
2d854     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2d858     1C 4E 85 C1 |  if_b	sub	fp, #28
2d85c     44 02 90 CD |  if_b	jmp	#LR__4406
2d860     18 4E 05 F1 | 	add	fp, #24
2d864     A7 2C 02 FB | 	rdlong	local04, fp
2d868     18 4E 85 F1 | 	sub	fp, #24
2d86c     3B 58 08 FF 
2d870     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2d874     1C 4E 05 C1 |  if_b	add	fp, #28
2d878     00 01 80 CF 
2d87c     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2d880     1C 4E 85 C1 |  if_b	sub	fp, #28
2d884     1C 02 90 CD |  if_b	jmp	#LR__4406
2d888     1C 4E 05 F1 | 	add	fp, #28
2d88c     80 01 80 FF 
2d890     A7 10 68 FC | 	wrlong	##196616, fp
2d894     1C 4E 85 F1 | 	sub	fp, #28
2d898     08 02 90 FD | 	jmp	#LR__4406
2d89c                 | LR__4393
2d89c     A9 12 06 F6 | 	mov	arg01, #169
2d8a0     00 14 06 F6 | 	mov	arg02, #0
2d8a4     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2d8a8     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2d8ac     02 2C 16 F2 | 	cmp	local04, #2 wc
2d8b0     18 00 90 3D |  if_ae	jmp	#LR__4394
2d8b4     0C 4E 05 F1 | 	add	fp, #12
2d8b8     A7 04 48 FC | 	wrbyte	#2, fp
2d8bc     04 4E 05 F1 | 	add	fp, #4
2d8c0     A7 52 49 FC | 	wrbyte	#169, fp
2d8c4     10 4E 85 F1 | 	sub	fp, #16
2d8c8     14 00 90 FD | 	jmp	#LR__4395
2d8cc                 | LR__4394
2d8cc     0C 4E 05 F1 | 	add	fp, #12
2d8d0     A7 02 48 FC | 	wrbyte	#1, fp
2d8d4     04 4E 05 F1 | 	add	fp, #4
2d8d8     A7 02 48 FC | 	wrbyte	#1, fp
2d8dc     10 4E 85 F1 | 	sub	fp, #16
2d8e0                 | LR__4395
2d8e0                 | ' 				ty =  0x01 ; cmd =  (1) ;
2d8e0                 | ' 			}
2d8e0                 | ' 			for (tmr = 1000; tmr; tmr--) {
2d8e0     18 4E 05 F1 | 	add	fp, #24
2d8e4     01 00 80 FF 
2d8e8     A7 D0 6B FC | 	wrlong	##1000, fp
2d8ec     18 4E 85 F1 | 	sub	fp, #24
2d8f0                 | LR__4396
2d8f0     18 4E 05 F1 | 	add	fp, #24
2d8f4     A7 2A 0A FB | 	rdlong	local03, fp wz
2d8f8     18 4E 85 F1 | 	sub	fp, #24
2d8fc     44 00 90 AD |  if_e	jmp	#LR__4397
2d900     10 4E 05 F1 | 	add	fp, #16
2d904     A7 12 C2 FA | 	rdbyte	arg01, fp
2d908     10 4E 85 F1 | 	sub	fp, #16
2d90c     00 14 06 F6 | 	mov	arg02, #0
2d910     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2d914     FD 2C 02 F6 | 	mov	local04, result1
2d918     07 2C 4E F7 | 	zerox	local04, #7 wz
2d91c     24 00 90 AD |  if_e	jmp	#LR__4397
2d920     01 00 00 FF 
2d924     E8 13 06 F6 | 	mov	arg01, ##1000
2d928     68 91 BF FD | 	call	#__system___waitus
2d92c     18 4E 05 F1 | 	add	fp, #24
2d930     A7 2C 02 FB | 	rdlong	local04, fp
2d934     01 2C 86 F1 | 	sub	local04, #1
2d938     A7 2C 62 FC | 	wrlong	local04, fp
2d93c     18 4E 85 F1 | 	sub	fp, #24
2d940     AC FF 9F FD | 	jmp	#LR__4396
2d944                 | LR__4397
2d944     18 4E 05 F1 | 	add	fp, #24
2d948     A7 2C 0A FB | 	rdlong	local04, fp wz
2d94c     18 4E 85 F1 | 	sub	fp, #24
2d950     14 00 90 AD |  if_e	jmp	#LR__4398
2d954     10 12 06 F6 | 	mov	arg01, #16
2d958     09 14 C6 F9 | 	decod	arg02, #9
2d95c     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2d960     07 FA 4D F7 | 	zerox	result1, #7 wz
2d964     0C 00 90 AD |  if_e	jmp	#LR__4399
2d968                 | LR__4398
2d968     0C 4E 05 F1 | 	add	fp, #12
2d96c     A7 00 48 FC | 	wrbyte	#0, fp
2d970     0C 4E 85 F1 | 	sub	fp, #12
2d974                 | LR__4399
2d974     14 2C 06 FB | 	rdlong	local04, #20
2d978     18 4E 05 F1 | 	add	fp, #24
2d97c     A7 2C 62 FC | 	wrlong	local04, fp
2d980     18 4E 85 F1 | 	sub	fp, #24
2d984     F0 FA 02 FF 
2d988     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2d98c     18 00 90 3D |  if_ae	jmp	#LR__4400
2d990     24 4E 05 F1 | 	add	fp, #36
2d994     A7 2C 02 FB | 	rdlong	local04, fp
2d998     1B 2C 26 F4 | 	bith	local04, #27
2d99c     A7 2C 62 FC | 	wrlong	local04, fp
2d9a0     24 4E 85 F1 | 	sub	fp, #36
2d9a4     2C 00 90 FD | 	jmp	#LR__4401
2d9a8                 | LR__4400
2d9a8     18 4E 05 F1 | 	add	fp, #24
2d9ac     A7 2C 02 FB | 	rdlong	local04, fp
2d9b0     18 4E 85 F1 | 	sub	fp, #24
2d9b4     E1 F5 05 FF 
2d9b8     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2d9bc     24 4E 05 C1 |  if_b	add	fp, #36
2d9c0     A7 2C 02 CB |  if_b	rdlong	local04, fp
2d9c4     80 00 04 CF 
2d9c8     00 2C 46 C5 |  if_b	or	local04, ##134283264
2d9cc     A7 2C 62 CC |  if_b	wrlong	local04, fp
2d9d0     24 4E 85 C1 |  if_b	sub	fp, #36
2d9d4                 | LR__4401
2d9d4     18 4E 05 F1 | 	add	fp, #24
2d9d8     A7 2C 02 FB | 	rdlong	local04, fp
2d9dc     18 4E 85 F1 | 	sub	fp, #24
2d9e0     F0 FA 02 FF 
2d9e4     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2d9e8     1C 4E 05 C1 |  if_b	add	fp, #28
2d9ec     00 01 80 CF 
2d9f0     A7 08 68 CC |  if_b	wrlong	##131076, fp
2d9f4     1C 4E 85 C1 |  if_b	sub	fp, #28
2d9f8     A8 00 90 CD |  if_b	jmp	#LR__4405
2d9fc     18 4E 05 F1 | 	add	fp, #24
2da00     A7 2C 02 FB | 	rdlong	local04, fp
2da04     18 4E 85 F1 | 	sub	fp, #24
2da08     68 78 04 FF 
2da0c     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2da10     1C 4E 05 C1 |  if_b	add	fp, #28
2da14     80 01 80 CF 
2da18     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2da1c     1C 4E 85 C1 |  if_b	sub	fp, #28
2da20     80 00 90 CD |  if_b	jmp	#LR__4404
2da24     18 4E 05 F1 | 	add	fp, #24
2da28     A7 2C 02 FB | 	rdlong	local04, fp
2da2c     18 4E 85 F1 | 	sub	fp, #24
2da30     E1 F5 05 FF 
2da34     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2da38     1C 4E 05 C1 |  if_b	add	fp, #28
2da3c     00 02 80 CF 
2da40     A7 10 68 CC |  if_b	wrlong	##262152, fp
2da44     1C 4E 85 C1 |  if_b	sub	fp, #28
2da48     58 00 90 CD |  if_b	jmp	#LR__4403
2da4c     18 4E 05 F1 | 	add	fp, #24
2da50     A7 2C 02 FB | 	rdlong	local04, fp
2da54     18 4E 85 F1 | 	sub	fp, #24
2da58     59 73 07 FF 
2da5c     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2da60     1C 4E 05 C1 |  if_b	add	fp, #28
2da64     80 02 80 CF 
2da68     A7 14 68 CC |  if_b	wrlong	##327690, fp
2da6c     1C 4E 85 C1 |  if_b	sub	fp, #28
2da70     30 00 90 CD |  if_b	jmp	#LR__4402
2da74     18 4E 05 F1 | 	add	fp, #24
2da78     A7 2C 02 FB | 	rdlong	local04, fp
2da7c     18 4E 85 F1 | 	sub	fp, #24
2da80     D1 F0 08 FF 
2da84     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2da88     1C 4E 05 C1 |  if_b	add	fp, #28
2da8c     00 03 80 CF 
2da90     A7 18 68 CC |  if_b	wrlong	##393228, fp
2da94     1C 4E 85 F3 | 	sumc	fp, #28
2da98     80 03 80 3F 
2da9c     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2daa0     1C 4E 85 31 |  if_ae	sub	fp, #28
2daa4                 | LR__4402
2daa4                 | LR__4403
2daa4                 | LR__4404
2daa4                 | LR__4405
2daa4                 | LR__4406
2daa4                 | LR__4407
2daa4     0C 4E 05 F1 | 	add	fp, #12
2daa8     A7 2C C2 FA | 	rdbyte	local04, fp
2daac     01 00 00 FF 
2dab0     21 E4 05 F1 | 	add	objptr, ##545
2dab4     F2 2C 42 FC | 	wrbyte	local04, objptr
2dab8     A7 26 CA FA | 	rdbyte	local01, fp wz
2dabc     00 2C 06 56 |  if_ne	mov	local04, #0
2dac0     01 2C 06 A6 |  if_e	mov	local04, #1
2dac4     20 4E 05 F1 | 	add	fp, #32
2dac8     A7 2C 42 FC | 	wrbyte	local04, fp
2dacc     A7 2C C2 FA | 	rdbyte	local04, fp
2dad0     2C 4E 85 F1 | 	sub	fp, #44
2dad4     01 E4 85 F1 | 	sub	objptr, #1
2dad8     F2 2C 42 FC | 	wrbyte	local04, objptr
2dadc     01 00 00 FF 
2dae0     20 E4 85 F1 | 	sub	objptr, ##544
2dae4     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1199
2dae8     34 4E 05 F1 | 	add	fp, #52
2daec     A7 12 02 FB | 	rdlong	arg01, fp
2daf0     18 4E 85 F1 | 	sub	fp, #24
2daf4     A7 14 02 FB | 	rdlong	arg02, fp
2daf8     09 15 12 FC | 	wxpin	arg02, arg01
2dafc     1C 4E 05 F1 | 	add	fp, #28
2db00     A7 12 02 FB | 	rdlong	arg01, fp
2db04     14 4E 85 F1 | 	sub	fp, #20
2db08     A7 14 02 FB | 	rdlong	arg02, fp
2db0c     09 15 02 FC | 	wrpin	arg02, arg01
2db10                 | ' 
2db10                 | ' 		}
2db10                 | ' 	}
2db10                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2db10                 | ' 	CardType = ty;
2db10                 | ' 	s = ty ? 0 :  0x01 ;
2db10                 | ' 	Stat = s;
2db10                 | ' 
2db10                 | ' 	deselect();
2db10                 | ' 
2db10                 | ' 
2db10                 | ' 	_wxpin( PIN_CLK, ck_div );
2db10                 | ' 	_wrpin( PIN_DI, spm_tx );
2db10                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2db10                 | ' 	return s;
2db10     08 4E 05 F1 | 	add	fp, #8
2db14     A7 FA C1 FA | 	rdbyte	result1, fp
2db18     2C 4E 85 F1 | 	sub	fp, #44
2db1c                 | LR__4408
2db1c     A7 F0 03 F6 | 	mov	ptra, fp
2db20     B2 00 A0 FD | 	call	#popregs_
2db24                 | _fatfs_cc_disk_initialize_ret
2db24     2D 00 64 FD | 	ret
2db28                 | 
2db28                 | _fatfs_cc_disk_read
2db28     05 4A 05 F6 | 	mov	COUNT_, #5
2db2c     A8 00 A0 FD | 	call	#pushregs_
2db30     0A 27 02 F6 | 	mov	local01, arg02
2db34     0B 29 02 F6 | 	mov	local02, arg03
2db38     0C 2B 02 F6 | 	mov	local03, arg04
2db3c     00 12 0E F2 | 	cmp	arg01, #0 wz
2db40     01 FA 05 56 |  if_ne	mov	result1, #1
2db44                 | ' 
2db44                 | ' 	return Stat;
2db44     01 00 00 AF 
2db48     20 E4 05 A1 |  if_e	add	objptr, ##544
2db4c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2db50     01 00 00 AF 
2db54     20 E4 85 A1 |  if_e	sub	objptr, ##544
2db58     FD FA E1 F8 | 	getbyte	result1, result1, #0
2db5c     01 FA CD F7 | 	test	result1, #1 wz
2db60     03 FA 05 56 |  if_ne	mov	result1, #3
2db64     84 00 90 5D |  if_ne	jmp	#LR__4412
2db68     01 00 00 FF 
2db6c     21 E4 05 F1 | 	add	objptr, ##545
2db70     F2 2C C2 FA | 	rdbyte	local04, objptr
2db74     01 00 00 FF 
2db78     21 E4 85 F1 | 	sub	objptr, ##545
2db7c     08 2C CE F7 | 	test	local04, #8 wz
2db80     09 28 66 A0 |  if_e	shl	local02, #9
2db84     02 2A 16 F2 | 	cmp	local03, #2 wc
2db88     12 2C 06 36 |  if_ae	mov	local04, #18
2db8c     11 2C 06 C6 |  if_b	mov	local04, #17
2db90     14 15 02 F6 | 	mov	arg02, local02
2db94     16 13 02 F6 | 	mov	arg01, local04
2db98     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2db9c     FD 2E 02 F6 | 	mov	local05, result1
2dba0     07 2E 4E F7 | 	zerox	local05, #7 wz
2dba4     30 00 90 5D |  if_ne	jmp	#LR__4411
2dba8                 | ' 		do {
2dba8                 | LR__4410
2dba8     13 13 02 F6 | 	mov	arg01, local01
2dbac     09 14 C6 F9 | 	decod	arg02, #9
2dbb0     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1207
2dbb4     00 FA 0D F2 | 	cmp	result1, #0 wz
2dbb8     01 00 00 5F 
2dbbc     00 26 06 51 |  if_ne	add	local01, ##512
2dbc0     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4410
2dbc4     16 2D E2 F8 | 	getbyte	local04, local04, #0
2dbc8     12 2C 0E F2 | 	cmp	local04, #18 wz
2dbcc     0C 12 06 A6 |  if_e	mov	arg01, #12
2dbd0     00 14 06 A6 |  if_e	mov	arg02, #0
2dbd4     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1213
2dbd8                 | LR__4411
2dbd8     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1199
2dbdc                 | ' 	}
2dbdc                 | ' 	deselect();
2dbdc                 | ' 
2dbdc                 | ' 	return count ? RES_ERROR : RES_OK;
2dbdc     00 2A 0E F2 | 	cmp	local03, #0 wz
2dbe0     01 2E 06 56 |  if_ne	mov	local05, #1
2dbe4     00 2E 06 A6 |  if_e	mov	local05, #0
2dbe8     17 FB 01 F6 | 	mov	result1, local05
2dbec                 | LR__4412
2dbec     A7 F0 03 F6 | 	mov	ptra, fp
2dbf0     B2 00 A0 FD | 	call	#popregs_
2dbf4                 | _fatfs_cc_disk_read_ret
2dbf4     2D 00 64 FD | 	ret
2dbf8                 | 
2dbf8                 | _fatfs_cc_disk_write
2dbf8     04 4A 05 F6 | 	mov	COUNT_, #4
2dbfc     A8 00 A0 FD | 	call	#pushregs_
2dc00     0A 27 02 F6 | 	mov	local01, arg02
2dc04     0C 29 02 F6 | 	mov	local02, arg04
2dc08     0B 2B 02 F6 | 	mov	local03, arg03
2dc0c     00 12 0E F2 | 	cmp	arg01, #0 wz
2dc10     01 FA 05 56 |  if_ne	mov	result1, #1
2dc14                 | ' 
2dc14                 | ' 	return Stat;
2dc14     01 00 00 AF 
2dc18     20 E4 05 A1 |  if_e	add	objptr, ##544
2dc1c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2dc20     01 00 00 AF 
2dc24     20 E4 85 A1 |  if_e	sub	objptr, ##544
2dc28     FD FA E1 F8 | 	getbyte	result1, result1, #0
2dc2c     01 FA CD F7 | 	test	result1, #1 wz
2dc30     03 FA 05 56 |  if_ne	mov	result1, #3
2dc34     D4 00 90 5D |  if_ne	jmp	#LR__4424
2dc38     01 00 00 FF 
2dc3c     21 E4 05 F1 | 	add	objptr, ##545
2dc40     F2 16 C2 FA | 	rdbyte	arg03, objptr
2dc44     01 00 00 FF 
2dc48     21 E4 85 F1 | 	sub	objptr, ##545
2dc4c     08 16 CE F7 | 	test	arg03, #8 wz
2dc50     09 2A 66 A0 |  if_e	shl	local03, #9
2dc54     01 28 0E F2 | 	cmp	local02, #1 wz
2dc58     30 00 90 5D |  if_ne	jmp	#LR__4420
2dc5c     18 12 06 F6 | 	mov	arg01, #24
2dc60     15 15 02 F6 | 	mov	arg02, local03
2dc64     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2dc68     FD 2C 02 F6 | 	mov	local04, result1
2dc6c     07 2C 4E F7 | 	zerox	local04, #7 wz
2dc70     84 00 90 5D |  if_ne	jmp	#LR__4423
2dc74     13 13 02 F6 | 	mov	arg01, local01
2dc78     FE 14 06 F6 | 	mov	arg02, #254
2dc7c     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1209
2dc80     00 FA 0D F2 | 	cmp	result1, #0 wz
2dc84     00 28 06 56 |  if_ne	mov	local02, #0
2dc88     6C 00 90 FD | 	jmp	#LR__4423
2dc8c                 | LR__4420
2dc8c     01 00 00 FF 
2dc90     21 E4 05 F1 | 	add	objptr, ##545
2dc94     F2 2C C2 FA | 	rdbyte	local04, objptr
2dc98     01 00 00 FF 
2dc9c     21 E4 85 F1 | 	sub	objptr, ##545
2dca0     06 2C CE F7 | 	test	local04, #6 wz
2dca4     97 12 06 56 |  if_ne	mov	arg01, #151
2dca8     14 15 02 56 |  if_ne	mov	arg02, local02
2dcac     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1213
2dcb0     15 15 02 F6 | 	mov	arg02, local03
2dcb4     19 12 06 F6 | 	mov	arg01, #25
2dcb8     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2dcbc     FD 2C 02 F6 | 	mov	local04, result1
2dcc0     07 2C 4E F7 | 	zerox	local04, #7 wz
2dcc4     30 00 90 5D |  if_ne	jmp	#LR__4422
2dcc8                 | ' 			do {
2dcc8                 | LR__4421
2dcc8     13 13 02 F6 | 	mov	arg01, local01
2dccc     FC 14 06 F6 | 	mov	arg02, #252
2dcd0     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1209
2dcd4     00 FA 0D F2 | 	cmp	result1, #0 wz
2dcd8     01 00 00 5F 
2dcdc     00 26 06 51 |  if_ne	add	local01, ##512
2dce0     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4421
2dce4     00 12 06 F6 | 	mov	arg01, #0
2dce8     FD 14 06 F6 | 	mov	arg02, #253
2dcec     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1209
2dcf0     00 FA 0D F2 | 	cmp	result1, #0 wz
2dcf4     01 28 06 A6 |  if_e	mov	local02, #1
2dcf8                 | LR__4422
2dcf8                 | LR__4423
2dcf8     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1199
2dcfc                 | ' 				count = 1;
2dcfc                 | ' 		}
2dcfc                 | ' 	}
2dcfc                 | ' 	deselect();
2dcfc                 | ' 
2dcfc                 | ' 	return count ? RES_ERROR : RES_OK;
2dcfc     00 28 0E F2 | 	cmp	local02, #0 wz
2dd00     01 2C 06 56 |  if_ne	mov	local04, #1
2dd04     00 2C 06 A6 |  if_e	mov	local04, #0
2dd08     16 FB 01 F6 | 	mov	result1, local04
2dd0c                 | LR__4424
2dd0c     A7 F0 03 F6 | 	mov	ptra, fp
2dd10     B2 00 A0 FD | 	call	#popregs_
2dd14                 | _fatfs_cc_disk_write_ret
2dd14     2D 00 64 FD | 	ret
2dd18                 | 
2dd18                 | _fatfs_cc_disk_ioctl
2dd18     01 4A 05 F6 | 	mov	COUNT_, #1
2dd1c     A8 00 A0 FD | 	call	#pushregs_
2dd20     30 F0 07 F1 | 	add	ptra, #48
2dd24     04 4E 05 F1 | 	add	fp, #4
2dd28     A7 12 42 FC | 	wrbyte	arg01, fp
2dd2c     04 4E 05 F1 | 	add	fp, #4
2dd30     A7 14 42 FC | 	wrbyte	arg02, fp
2dd34     04 4E 05 F1 | 	add	fp, #4
2dd38     A7 16 62 FC | 	wrlong	arg03, fp
2dd3c     08 4E 85 F1 | 	sub	fp, #8
2dd40     A7 12 CA FA | 	rdbyte	arg01, fp wz
2dd44     04 4E 85 F1 | 	sub	fp, #4
2dd48     01 FA 05 56 |  if_ne	mov	result1, #1
2dd4c                 | ' 
2dd4c                 | ' 	return Stat;
2dd4c     01 00 00 AF 
2dd50     20 E4 05 A1 |  if_e	add	objptr, ##544
2dd54     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2dd58     01 00 00 AF 
2dd5c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2dd60     FD FA E1 F8 | 	getbyte	result1, result1, #0
2dd64     01 FA CD F7 | 	test	result1, #1 wz
2dd68     03 FA 05 56 |  if_ne	mov	result1, #3
2dd6c     E4 01 90 5D |  if_ne	jmp	#LR__4438
2dd70     10 4E 05 F1 | 	add	fp, #16
2dd74     A7 02 68 FC | 	wrlong	#1, fp
2dd78                 | ' 
2dd78                 | ' 	res = RES_ERROR;
2dd78                 | ' 	switch (ctrl) {
2dd78     08 4E 85 F1 | 	sub	fp, #8
2dd7c     A7 26 C2 FA | 	rdbyte	local01, fp
2dd80     08 4E 85 F1 | 	sub	fp, #8
2dd84     04 26 26 F3 | 	fle	local01, #4
2dd88     30 26 62 FD | 	jmprel	local01
2dd8c                 | LR__4430
2dd8c     10 00 90 FD | 	jmp	#LR__4431
2dd90     24 00 90 FD | 	jmp	#LR__4432
2dd94     A0 01 90 FD | 	jmp	#LR__4436
2dd98     80 01 90 FD | 	jmp	#LR__4435
2dd9c     98 01 90 FD | 	jmp	#LR__4436
2dda0                 | LR__4431
2dda0     B4 79 B0 FD | 	call	#_fatfs_cc_select_1203
2dda4     00 FA 0D F2 | 	cmp	result1, #0 wz
2dda8     10 4E 05 51 |  if_ne	add	fp, #16
2ddac     A7 00 68 5C |  if_ne	wrlong	#0, fp
2ddb0     10 4E 85 51 |  if_ne	sub	fp, #16
2ddb4                 | ' 			break;
2ddb4     8C 01 90 FD | 	jmp	#LR__4437
2ddb8                 | LR__4432
2ddb8     09 12 06 F6 | 	mov	arg01, #9
2ddbc     00 14 06 F6 | 	mov	arg02, #0
2ddc0     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2ddc4     FD 26 02 F6 | 	mov	local01, result1
2ddc8     07 26 4E F7 | 	zerox	local01, #7 wz
2ddcc     74 01 90 5D |  if_ne	jmp	#LR__4437
2ddd0     18 4E 05 F1 | 	add	fp, #24
2ddd4     A7 12 02 F6 | 	mov	arg01, fp
2ddd8     18 4E 85 F1 | 	sub	fp, #24
2dddc     10 14 06 F6 | 	mov	arg02, #16
2dde0     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1207
2dde4     00 FA 0D F2 | 	cmp	result1, #0 wz
2dde8     58 01 90 AD |  if_e	jmp	#LR__4437
2ddec     18 4E 05 F1 | 	add	fp, #24
2ddf0     A7 26 C2 FA | 	rdbyte	local01, fp
2ddf4     18 4E 85 F1 | 	sub	fp, #24
2ddf8     06 26 46 F0 | 	shr	local01, #6
2ddfc     01 26 0E F2 | 	cmp	local01, #1 wz
2de00     5C 00 90 5D |  if_ne	jmp	#LR__4433
2de04     21 4E 05 F1 | 	add	fp, #33
2de08     A7 26 C2 FA | 	rdbyte	local01, fp
2de0c     01 4E 85 F1 | 	sub	fp, #1
2de10     A7 FA C1 FA | 	rdbyte	result1, fp
2de14     FD FA 31 F9 | 	getword	result1, result1, #0
2de18     08 FA 65 F0 | 	shl	result1, #8
2de1c     FD 26 02 F1 | 	add	local01, result1
2de20     01 4E 85 F1 | 	sub	fp, #1
2de24     A7 FA C1 FA | 	rdbyte	result1, fp
2de28     3F FA 05 F5 | 	and	result1, #63
2de2c     10 FA 65 F0 | 	shl	result1, #16
2de30     FD 26 02 F1 | 	add	local01, result1
2de34     01 26 06 F1 | 	add	local01, #1
2de38     09 4E 05 F1 | 	add	fp, #9
2de3c     A7 26 62 FC | 	wrlong	local01, fp
2de40     1C 4E 85 F1 | 	sub	fp, #28
2de44     A7 26 02 FB | 	rdlong	local01, fp
2de48     1C 4E 05 F1 | 	add	fp, #28
2de4c     A7 FA 01 FB | 	rdlong	result1, fp
2de50     28 4E 85 F1 | 	sub	fp, #40
2de54     0A FA 65 F0 | 	shl	result1, #10
2de58     13 FB 61 FC | 	wrlong	result1, local01
2de5c     AC 00 90 FD | 	jmp	#LR__4434
2de60                 | LR__4433
2de60     1D 4E 05 F1 | 	add	fp, #29
2de64     A7 26 C2 FA | 	rdbyte	local01, fp
2de68     13 27 42 F8 | 	getnib	local01, local01, #0
2de6c     05 4E 05 F1 | 	add	fp, #5
2de70     A7 FA C1 FA | 	rdbyte	result1, fp
2de74     80 FA 05 F5 | 	and	result1, #128
2de78     07 FA C5 F0 | 	sar	result1, #7
2de7c     FD 26 02 F1 | 	add	local01, result1
2de80     01 4E 85 F1 | 	sub	fp, #1
2de84     A7 FA C1 FA | 	rdbyte	result1, fp
2de88     03 FA 05 F5 | 	and	result1, #3
2de8c     01 FA 65 F0 | 	shl	result1, #1
2de90     FD 26 02 F1 | 	add	local01, result1
2de94     02 26 06 F1 | 	add	local01, #2
2de98     0D 4E 85 F1 | 	sub	fp, #13
2de9c     A7 26 42 FC | 	wrbyte	local01, fp
2dea0     0C 4E 05 F1 | 	add	fp, #12
2dea4     A7 26 C2 FA | 	rdbyte	local01, fp
2dea8     06 26 46 F0 | 	shr	local01, #6
2deac     01 4E 85 F1 | 	sub	fp, #1
2deb0     A7 FA C1 FA | 	rdbyte	result1, fp
2deb4     FD FA 31 F9 | 	getword	result1, result1, #0
2deb8     02 FA 65 F0 | 	shl	result1, #2
2debc     FD 26 02 F1 | 	add	local01, result1
2dec0     01 4E 85 F1 | 	sub	fp, #1
2dec4     A7 FA C1 FA | 	rdbyte	result1, fp
2dec8     03 FA 05 F5 | 	and	result1, #3
2decc     FD FA 31 F9 | 	getword	result1, result1, #0
2ded0     0A FA 65 F0 | 	shl	result1, #10
2ded4     FD 26 02 F1 | 	add	local01, result1
2ded8     01 26 06 F1 | 	add	local01, #1
2dedc     0A 4E 05 F1 | 	add	fp, #10
2dee0     A7 26 62 FC | 	wrlong	local01, fp
2dee4     1C 4E 85 F1 | 	sub	fp, #28
2dee8     A7 26 02 FB | 	rdlong	local01, fp
2deec     1C 4E 05 F1 | 	add	fp, #28
2def0     A7 FA 01 FB | 	rdlong	result1, fp
2def4     14 4E 85 F1 | 	sub	fp, #20
2def8     A7 16 C2 FA | 	rdbyte	arg03, fp
2defc     14 4E 85 F1 | 	sub	fp, #20
2df00     09 16 86 F1 | 	sub	arg03, #9
2df04     0B FB 61 F0 | 	shl	result1, arg03
2df08     13 FB 61 FC | 	wrlong	result1, local01
2df0c                 | LR__4434
2df0c     10 4E 05 F1 | 	add	fp, #16
2df10     A7 00 68 FC | 	wrlong	#0, fp
2df14     10 4E 85 F1 | 	sub	fp, #16
2df18                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2df18                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2df18                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2df18                 | ' 				}
2df18                 | ' 				res = RES_OK;
2df18                 | ' 			}
2df18                 | ' 			break;
2df18     28 00 90 FD | 	jmp	#LR__4437
2df1c                 | LR__4435
2df1c     0C 4E 05 F1 | 	add	fp, #12
2df20     A7 26 02 FB | 	rdlong	local01, fp
2df24     13 01 69 FC | 	wrlong	#128, local01
2df28     04 4E 05 F1 | 	add	fp, #4
2df2c     A7 00 68 FC | 	wrlong	#0, fp
2df30     10 4E 85 F1 | 	sub	fp, #16
2df34                 | ' 			*(DWORD*)buff = 128;
2df34                 | ' 			res = RES_OK;
2df34                 | ' 			break;
2df34     0C 00 90 FD | 	jmp	#LR__4437
2df38                 | LR__4436
2df38     10 4E 05 F1 | 	add	fp, #16
2df3c     A7 08 68 FC | 	wrlong	#4, fp
2df40     10 4E 85 F1 | 	sub	fp, #16
2df44                 | LR__4437
2df44     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1199
2df48                 | ' 			res = RES_PARERR;
2df48                 | ' 	}
2df48                 | ' 
2df48                 | ' 	deselect();
2df48                 | ' 
2df48                 | ' 	return res;
2df48     10 4E 05 F1 | 	add	fp, #16
2df4c     A7 FA 01 FB | 	rdlong	result1, fp
2df50     10 4E 85 F1 | 	sub	fp, #16
2df54                 | LR__4438
2df54     A7 F0 03 F6 | 	mov	ptra, fp
2df58     B2 00 A0 FD | 	call	#popregs_
2df5c                 | _fatfs_cc_disk_ioctl_ret
2df5c     2D 00 64 FD | 	ret
2df60                 | 
2df60                 | _fatfs_cc_disk_setpins
2df60     00 12 0E F2 | 	cmp	arg01, #0 wz
2df64     01 FA 65 56 |  if_ne	neg	result1, #1
2df68     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2df6c     01 00 00 FF 
2df70     10 E4 05 F1 | 	add	objptr, ##528
2df74     F2 14 62 FC | 	wrlong	arg02, objptr
2df78     04 E4 05 F1 | 	add	objptr, #4
2df7c     F2 16 62 FC | 	wrlong	arg03, objptr
2df80     04 E4 05 F1 | 	add	objptr, #4
2df84     F2 18 62 FC | 	wrlong	arg04, objptr
2df88     04 E4 05 F1 | 	add	objptr, #4
2df8c     F2 1A 62 FC | 	wrlong	arg05, objptr
2df90     01 00 00 FF 
2df94     1C E4 85 F1 | 	sub	objptr, ##540
2df98     00 FA 05 F6 | 	mov	result1, #0
2df9c                 | _fatfs_cc_disk_setpins_ret
2df9c     2D 00 64 FD | 	ret
2dfa0                 | 
2dfa0                 | _fatfs_cc_tchar2uni
2dfa0     09 01 02 FB | 	rdlong	_var01, arg01
2dfa4     00 03 02 F6 | 	mov	_var02, _var01
2dfa8     01 00 06 F1 | 	add	_var01, #1
2dfac     00 05 02 F6 | 	mov	_var03, _var01
2dfb0     01 07 C2 FA | 	rdbyte	_var04, _var02
2dfb4     80 06 CE F7 | 	test	_var04, #128 wz
2dfb8     E8 00 90 AD |  if_e	jmp	#LR__4447
2dfbc     03 09 02 F6 | 	mov	_var05, _var04
2dfc0     E0 08 06 F5 | 	and	_var05, #224
2dfc4     C0 08 0E F2 | 	cmp	_var05, #192 wz
2dfc8     1F 06 06 A5 |  if_e	and	_var04, #31
2dfcc     01 0A 06 A6 |  if_e	mov	_var06, #1
2dfd0     34 00 90 AD |  if_e	jmp	#LR__4441
2dfd4     03 09 02 F6 | 	mov	_var05, _var04
2dfd8     F0 08 06 F5 | 	and	_var05, #240
2dfdc     E0 08 0E F2 | 	cmp	_var05, #224 wz
2dfe0     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2dfe4     02 0A 06 A6 |  if_e	mov	_var06, #2
2dfe8     1C 00 90 AD |  if_e	jmp	#LR__4440
2dfec     03 09 02 F6 | 	mov	_var05, _var04
2dff0     F8 08 06 F5 | 	and	_var05, #248
2dff4     F0 08 0E F2 | 	cmp	_var05, #240 wz
2dff8     07 06 06 A5 |  if_e	and	_var04, #7
2dffc     03 0A 06 A6 |  if_e	mov	_var06, #3
2e000                 | ' 			return 0xFFFFFFFF;
2e000     01 FA 65 56 |  if_ne	neg	result1, #1
2e004     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2e008                 | LR__4440
2e008                 | LR__4441
2e008                 | ' 		}
2e008                 | ' 		do {
2e008                 | LR__4442
2e008     02 0D C2 FA | 	rdbyte	_var07, _var03
2e00c     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2e010     C0 08 06 F5 | 	and	_var05, #192
2e014     80 08 0E F2 | 	cmp	_var05, #128 wz
2e018     01 04 06 F1 | 	add	_var03, #1
2e01c     01 FA 65 56 |  if_ne	neg	result1, #1
2e020     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2e024     06 06 66 F0 | 	shl	_var04, #6
2e028     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2e02c     3F 02 06 F5 | 	and	_var02, #63
2e030     01 07 42 F5 | 	or	_var04, _var02
2e034     F4 0B 6E FB | 	djnz	_var06, #LR__4442
2e038     80 06 16 F2 | 	cmp	_var04, #128 wc
2e03c     24 00 90 CD |  if_b	jmp	#LR__4444
2e040     6C 00 00 FF 
2e044     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2e048     0C 00 90 CD |  if_b	jmp	#LR__4443
2e04c     70 00 00 FF 
2e050     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2e054     0C 00 90 CD |  if_b	jmp	#LR__4444
2e058                 | LR__4443
2e058     80 08 00 FF 
2e05c     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2e060     08 00 90 CD |  if_b	jmp	#LR__4445
2e064                 | LR__4444
2e064     01 FA 65 F6 | 	neg	result1, #1
2e068     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2e06c                 | LR__4445
2e06c     80 00 00 FF 
2e070     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2e074     2C 00 90 CD |  if_b	jmp	#LR__4446
2e078     03 03 02 F6 | 	mov	_var02, _var04
2e07c     80 00 00 FF 
2e080     00 02 86 F1 | 	sub	_var02, ##65536
2e084     06 02 66 F0 | 	shl	_var02, #6
2e088     80 FF 01 FF 
2e08c     00 02 06 F5 | 	and	_var02, ##67043328
2e090     6E 00 6C FF 
2e094     00 08 06 F6 | 	mov	_var05, ##-671032320
2e098     01 09 42 F5 | 	or	_var05, _var02
2e09c     09 06 46 F7 | 	zerox	_var04, #9
2e0a0     04 07 42 F5 | 	or	_var04, _var05
2e0a4                 | LR__4446
2e0a4                 | LR__4447
2e0a4     09 05 62 FC | 	wrlong	_var03, arg01
2e0a8                 | ' 	}
2e0a8                 | ' #line 811 "ff.c"
2e0a8                 | ' 	*str = p;
2e0a8                 | ' 	return uc;
2e0a8     03 FB 01 F6 | 	mov	result1, _var04
2e0ac                 | _fatfs_cc_tchar2uni_ret
2e0ac     2D 00 64 FD | 	ret
2e0b0                 | 
2e0b0                 | _fatfs_cc_put_utf
2e0b0     80 12 16 F2 | 	cmp	arg01, #128 wc
2e0b4     18 00 90 3D |  if_ae	jmp	#LR__4450
2e0b8     01 16 16 F2 | 	cmp	arg03, #1 wc
2e0bc     00 FA 05 C6 |  if_b	mov	result1, #0
2e0c0     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e0c4     0A 13 42 FC | 	wrbyte	arg01, arg02
2e0c8                 | ' 		*buf = (TCHAR)chr;
2e0c8                 | ' 		return 1;
2e0c8     01 FA 05 F6 | 	mov	result1, #1
2e0cc     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e0d0                 | LR__4450
2e0d0     04 00 00 FF 
2e0d4     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2e0d8     40 00 90 3D |  if_ae	jmp	#LR__4451
2e0dc     02 16 16 F2 | 	cmp	arg03, #2 wc
2e0e0     00 FA 05 C6 |  if_b	mov	result1, #0
2e0e4     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e0e8     09 FB 01 F6 | 	mov	result1, arg01
2e0ec     06 FA 45 F0 | 	shr	result1, #6
2e0f0     1F FA 05 F5 | 	and	result1, #31
2e0f4     C0 16 06 F6 | 	mov	arg03, #192
2e0f8     FD 16 42 F5 | 	or	arg03, result1
2e0fc     0A 17 42 FC | 	wrbyte	arg03, arg02
2e100     01 14 06 F1 | 	add	arg02, #1
2e104     3F 12 06 F5 | 	and	arg01, #63
2e108     80 FA 05 F6 | 	mov	result1, #128
2e10c     09 FB 41 F5 | 	or	result1, arg01
2e110     0A FB 41 FC | 	wrbyte	result1, arg02
2e114                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2e114                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2e114                 | ' 		return 2;
2e114     02 FA 05 F6 | 	mov	result1, #2
2e118     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e11c                 | LR__4451
2e11c     80 00 00 FF 
2e120     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2e124     70 00 90 3D |  if_ae	jmp	#LR__4454
2e128     03 16 16 F2 | 	cmp	arg03, #3 wc
2e12c     18 00 90 CD |  if_b	jmp	#LR__4452
2e130     6C 00 00 FF 
2e134     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2e138     14 00 90 CD |  if_b	jmp	#LR__4453
2e13c     70 00 00 FF 
2e140     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2e144     08 00 90 3D |  if_ae	jmp	#LR__4453
2e148                 | LR__4452
2e148     00 FA 05 F6 | 	mov	result1, #0
2e14c     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e150                 | LR__4453
2e150     09 FB 59 F8 | 	getnib	result1, arg01, #3
2e154     E0 16 06 F6 | 	mov	arg03, #224
2e158     FD 16 42 F5 | 	or	arg03, result1
2e15c     0A 17 42 FC | 	wrbyte	arg03, arg02
2e160     01 14 06 F1 | 	add	arg02, #1
2e164     09 FB 01 F6 | 	mov	result1, arg01
2e168     06 FA 45 F0 | 	shr	result1, #6
2e16c     3F FA 05 F5 | 	and	result1, #63
2e170     80 16 06 F6 | 	mov	arg03, #128
2e174     FD 16 42 F5 | 	or	arg03, result1
2e178     0A 17 42 FC | 	wrbyte	arg03, arg02
2e17c     01 14 06 F1 | 	add	arg02, #1
2e180     3F 12 06 F5 | 	and	arg01, #63
2e184     80 FA 05 F6 | 	mov	result1, #128
2e188     09 FB 41 F5 | 	or	result1, arg01
2e18c     0A FB 41 FC | 	wrbyte	result1, arg02
2e190                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2e190                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2e190                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2e190                 | ' 		return 3;
2e190     03 FA 05 F6 | 	mov	result1, #3
2e194     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e198                 | LR__4454
2e198     04 16 16 F2 | 	cmp	arg03, #4 wc
2e19c     00 FA 05 C6 |  if_b	mov	result1, #0
2e1a0     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e1a4     09 01 02 F6 | 	mov	_var01, arg01
2e1a8     E0 01 06 F4 | 	bitl	_var01, #480
2e1ac     00 00 6C FF 
2e1b0     00 00 86 F1 | 	sub	_var01, ##-671088640
2e1b4     06 00 46 F0 | 	shr	_var01, #6
2e1b8     09 13 32 F9 | 	getword	arg01, arg01, #0
2e1bc     6E 00 00 FF 
2e1c0     00 12 86 F1 | 	sub	arg01, ##56320
2e1c4     00 08 00 FF 
2e1c8     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2e1cc     02 00 00 CF 
2e1d0     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2e1d4     00 FA 05 36 |  if_ae	mov	result1, #0
2e1d8     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2e1dc     09 01 42 F5 | 	or	_var01, arg01
2e1e0     80 00 00 FF 
2e1e4     00 00 06 F1 | 	add	_var01, ##65536
2e1e8     00 FB 01 F6 | 	mov	result1, _var01
2e1ec     12 FA 45 F0 | 	shr	result1, #18
2e1f0     07 FA 05 F5 | 	and	result1, #7
2e1f4     F0 16 06 F6 | 	mov	arg03, #240
2e1f8     FD 16 42 F5 | 	or	arg03, result1
2e1fc     0A 17 42 FC | 	wrbyte	arg03, arg02
2e200     01 14 06 F1 | 	add	arg02, #1
2e204     00 FB 01 F6 | 	mov	result1, _var01
2e208     0C FA 45 F0 | 	shr	result1, #12
2e20c     3F FA 05 F5 | 	and	result1, #63
2e210     80 16 06 F6 | 	mov	arg03, #128
2e214     FD 16 42 F5 | 	or	arg03, result1
2e218     0A 17 42 FC | 	wrbyte	arg03, arg02
2e21c     01 14 06 F1 | 	add	arg02, #1
2e220     00 FB 01 F6 | 	mov	result1, _var01
2e224     06 FA 45 F0 | 	shr	result1, #6
2e228     3F FA 05 F5 | 	and	result1, #63
2e22c     80 16 06 F6 | 	mov	arg03, #128
2e230     FD 16 42 F5 | 	or	arg03, result1
2e234     0A 17 42 FC | 	wrbyte	arg03, arg02
2e238     01 14 06 F1 | 	add	arg02, #1
2e23c     3F 00 06 F5 | 	and	_var01, #63
2e240     80 FA 05 F6 | 	mov	result1, #128
2e244     00 FB 41 F5 | 	or	result1, _var01
2e248     0A FB 41 FC | 	wrbyte	result1, arg02
2e24c                 | ' 	chr = (hc | chr) + 0x10000;
2e24c                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2e24c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2e24c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2e24c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2e24c                 | ' 	return 4;
2e24c     04 FA 05 F6 | 	mov	result1, #4
2e250                 | _fatfs_cc_put_utf_ret
2e250     2D 00 64 FD | 	ret
2e254                 | 
2e254                 | _fatfs_cc_sync_window
2e254     02 4A 05 F6 | 	mov	COUNT_, #2
2e258     A8 00 A0 FD | 	call	#pushregs_
2e25c     09 27 02 F6 | 	mov	local01, arg01
2e260     00 28 06 F6 | 	mov	local02, #0
2e264     03 26 06 F1 | 	add	local01, #3
2e268     13 FB C9 FA | 	rdbyte	result1, local01 wz
2e26c     03 26 86 F1 | 	sub	local01, #3
2e270     A4 00 90 AD |  if_e	jmp	#LR__4462
2e274     01 26 06 F1 | 	add	local01, #1
2e278     13 13 C2 FA | 	rdbyte	arg01, local01
2e27c     33 26 06 F1 | 	add	local01, #51
2e280     13 15 02 F6 | 	mov	arg02, local01
2e284     04 26 86 F1 | 	sub	local01, #4
2e288     13 17 02 FB | 	rdlong	arg03, local01
2e28c     30 26 86 F1 | 	sub	local01, #48
2e290     01 18 06 F6 | 	mov	arg04, #1
2e294     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2e298     00 FA 0D F2 | 	cmp	result1, #0 wz
2e29c     74 00 90 5D |  if_ne	jmp	#LR__4460
2e2a0     03 26 06 F1 | 	add	local01, #3
2e2a4     13 01 48 FC | 	wrbyte	#0, local01
2e2a8     2D 26 06 F1 | 	add	local01, #45
2e2ac     13 FB 01 FB | 	rdlong	result1, local01
2e2b0     0C 26 86 F1 | 	sub	local01, #12
2e2b4     13 19 02 FB | 	rdlong	arg04, local01
2e2b8     0C FB 81 F1 | 	sub	result1, arg04
2e2bc     08 26 86 F1 | 	sub	local01, #8
2e2c0     13 19 02 FB | 	rdlong	arg04, local01
2e2c4     1C 26 86 F1 | 	sub	local01, #28
2e2c8     0C FB 11 F2 | 	cmp	result1, arg04 wc
2e2cc     48 00 90 3D |  if_ae	jmp	#LR__4461
2e2d0     02 26 06 F1 | 	add	local01, #2
2e2d4     13 19 C2 FA | 	rdbyte	arg04, local01
2e2d8     02 26 86 F1 | 	sub	local01, #2
2e2dc     02 18 0E F2 | 	cmp	arg04, #2 wz
2e2e0     34 00 90 5D |  if_ne	jmp	#LR__4461
2e2e4     01 26 06 F1 | 	add	local01, #1
2e2e8     13 13 C2 FA | 	rdbyte	arg01, local01
2e2ec     33 26 06 F1 | 	add	local01, #51
2e2f0     13 15 02 F6 | 	mov	arg02, local01
2e2f4     04 26 86 F1 | 	sub	local01, #4
2e2f8     13 17 02 FB | 	rdlong	arg03, local01
2e2fc     14 26 86 F1 | 	sub	local01, #20
2e300     13 27 02 FB | 	rdlong	local01, local01
2e304     13 17 02 F1 | 	add	arg03, local01
2e308     01 18 06 F6 | 	mov	arg04, #1
2e30c     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2e310     04 00 90 FD | 	jmp	#LR__4461
2e314                 | LR__4460
2e314     01 28 06 F6 | 	mov	local02, #1
2e318                 | LR__4461
2e318                 | LR__4462
2e318                 | ' 			res = FR_DISK_ERR;
2e318                 | ' 		}
2e318                 | ' 	}
2e318                 | ' 	return res;
2e318     14 FB 01 F6 | 	mov	result1, local02
2e31c     A7 F0 03 F6 | 	mov	ptra, fp
2e320     B2 00 A0 FD | 	call	#popregs_
2e324                 | _fatfs_cc_sync_window_ret
2e324     2D 00 64 FD | 	ret
2e328                 | 
2e328                 | _fatfs_cc_move_window
2e328     03 4A 05 F6 | 	mov	COUNT_, #3
2e32c     A8 00 A0 FD | 	call	#pushregs_
2e330     09 27 02 F6 | 	mov	local01, arg01
2e334     0A 29 02 F6 | 	mov	local02, arg02
2e338     00 2A 06 F6 | 	mov	local03, #0
2e33c     30 26 06 F1 | 	add	local01, #48
2e340     13 19 02 FB | 	rdlong	arg04, local01
2e344     30 26 86 F1 | 	sub	local01, #48
2e348     0C 29 0A F2 | 	cmp	local02, arg04 wz
2e34c     40 00 90 AD |  if_e	jmp	#LR__4471
2e350     13 13 02 F6 | 	mov	arg01, local01
2e354     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2e358     FD 2A 0A F6 | 	mov	local03, result1 wz
2e35c     30 00 90 5D |  if_ne	jmp	#LR__4470
2e360     01 26 06 F1 | 	add	local01, #1
2e364     13 13 C2 FA | 	rdbyte	arg01, local01
2e368     33 26 06 F1 | 	add	local01, #51
2e36c     13 15 02 F6 | 	mov	arg02, local01
2e370     14 17 02 F6 | 	mov	arg03, local02
2e374     01 18 06 F6 | 	mov	arg04, #1
2e378     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2e37c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e380     01 28 66 56 |  if_ne	neg	local02, #1
2e384     01 2A 06 56 |  if_ne	mov	local03, #1
2e388     04 26 86 F1 | 	sub	local01, #4
2e38c     13 29 62 FC | 	wrlong	local02, local01
2e390                 | LR__4470
2e390                 | LR__4471
2e390                 | ' 				sect = (LBA_t)0 - 1;
2e390                 | ' 				res = FR_DISK_ERR;
2e390                 | ' 			}
2e390                 | ' 			fs->winsect = sect;
2e390                 | ' 		}
2e390                 | ' 	}
2e390                 | ' 	return res;
2e390     15 FB 01 F6 | 	mov	result1, local03
2e394     A7 F0 03 F6 | 	mov	ptra, fp
2e398     B2 00 A0 FD | 	call	#popregs_
2e39c                 | _fatfs_cc_move_window_ret
2e39c     2D 00 64 FD | 	ret
2e3a0                 | 
2e3a0                 | _fatfs_cc_sync_fs
2e3a0     02 4A 05 F6 | 	mov	COUNT_, #2
2e3a4     A8 00 A0 FD | 	call	#pushregs_
2e3a8     09 27 02 F6 | 	mov	local01, arg01
2e3ac     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2e3b0     FD 28 0A F6 | 	mov	local02, result1 wz
2e3b4     D8 00 90 5D |  if_ne	jmp	#LR__4481
2e3b8     13 19 C2 FA | 	rdbyte	arg04, local01
2e3bc     03 18 0E F2 | 	cmp	arg04, #3 wz
2e3c0     04 26 06 A1 |  if_e	add	local01, #4
2e3c4     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2e3c8     04 26 86 A1 |  if_e	sub	local01, #4
2e3cc     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2e3d0     A0 00 90 5D |  if_ne	jmp	#LR__4480
2e3d4     34 26 06 F1 | 	add	local01, #52
2e3d8     13 13 02 F6 | 	mov	arg01, local01
2e3dc     00 14 06 F6 | 	mov	arg02, #0
2e3e0     09 16 C6 F9 | 	decod	arg03, #9
2e3e4     98 00 A0 FD | 	call	#\builtin_bytefill_
2e3e8     13 13 02 F6 | 	mov	arg01, local01
2e3ec     FE 13 06 F1 | 	add	arg01, #510
2e3f0     55 00 80 FF 
2e3f4     09 AB 58 FC | 	wrword	##43605, arg01
2e3f8     A9 B0 A0 FF 
2e3fc     13 A5 68 FC | 	wrlong	##1096897106, local01
2e400     13 13 02 F6 | 	mov	arg01, local01
2e404     E4 13 06 F1 | 	add	arg01, #484
2e408     B9 A0 B0 FF 
2e40c     09 E5 68 FC | 	wrlong	##1631679090, arg01
2e410     13 13 02 F6 | 	mov	arg01, local01
2e414     E8 13 06 F1 | 	add	arg01, #488
2e418     20 26 86 F1 | 	sub	local01, #32
2e41c     13 15 02 FB | 	rdlong	arg02, local01
2e420     09 15 62 FC | 	wrlong	arg02, arg01
2e424     20 26 06 F1 | 	add	local01, #32
2e428     13 13 02 F6 | 	mov	arg01, local01
2e42c     EC 13 06 F1 | 	add	arg01, #492
2e430     24 26 86 F1 | 	sub	local01, #36
2e434     13 15 02 FB | 	rdlong	arg02, local01
2e438     09 15 62 FC | 	wrlong	arg02, arg01
2e43c     10 26 06 F1 | 	add	local01, #16
2e440     13 17 02 FB | 	rdlong	arg03, local01
2e444     01 16 06 F1 | 	add	arg03, #1
2e448     10 26 06 F1 | 	add	local01, #16
2e44c     13 17 62 FC | 	wrlong	arg03, local01
2e450     2F 26 86 F1 | 	sub	local01, #47
2e454     13 13 C2 FA | 	rdbyte	arg01, local01
2e458     33 26 06 F1 | 	add	local01, #51
2e45c     13 15 02 F6 | 	mov	arg02, local01
2e460     01 18 06 F6 | 	mov	arg04, #1
2e464     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2e468     30 26 86 F1 | 	sub	local01, #48
2e46c     13 01 48 FC | 	wrbyte	#0, local01
2e470     04 26 86 F1 | 	sub	local01, #4
2e474                 | LR__4480
2e474     01 26 06 F1 | 	add	local01, #1
2e478     13 13 C2 FA | 	rdbyte	arg01, local01
2e47c     00 14 06 F6 | 	mov	arg02, #0
2e480     00 16 06 F6 | 	mov	arg03, #0
2e484     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2e488     00 FA 0D F2 | 	cmp	result1, #0 wz
2e48c     01 28 06 56 |  if_ne	mov	local02, #1
2e490                 | LR__4481
2e490                 | ' 	}
2e490                 | ' 
2e490                 | ' 	return res;
2e490     14 FB 01 F6 | 	mov	result1, local02
2e494     A7 F0 03 F6 | 	mov	ptra, fp
2e498     B2 00 A0 FD | 	call	#popregs_
2e49c                 | _fatfs_cc_sync_fs_ret
2e49c     2D 00 64 FD | 	ret
2e4a0                 | 
2e4a0                 | _fatfs_cc_clst2sect
2e4a0     02 14 86 F1 | 	sub	arg02, #2
2e4a4     18 12 06 F1 | 	add	arg01, #24
2e4a8     09 01 02 FB | 	rdlong	_var01, arg01
2e4ac     18 12 86 F1 | 	sub	arg01, #24
2e4b0     02 00 86 F1 | 	sub	_var01, #2
2e4b4     00 15 12 F2 | 	cmp	arg02, _var01 wc
2e4b8     00 FA 05 36 |  if_ae	mov	result1, #0
2e4bc     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2e4c0     0A 12 06 F1 | 	add	arg01, #10
2e4c4     09 01 E2 FA | 	rdword	_var01, arg01
2e4c8     0A 01 02 FD | 	qmul	_var01, arg02
2e4cc                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2e4cc     22 12 06 F1 | 	add	arg01, #34
2e4d0     09 FB 01 FB | 	rdlong	result1, arg01
2e4d4     18 00 62 FD | 	getqx	_var01
2e4d8     00 FB 01 F1 | 	add	result1, _var01
2e4dc                 | _fatfs_cc_clst2sect_ret
2e4dc     2D 00 64 FD | 	ret
2e4e0                 | 
2e4e0                 | _fatfs_cc_get_fat
2e4e0     07 4A 05 F6 | 	mov	COUNT_, #7
2e4e4     A8 00 A0 FD | 	call	#pushregs_
2e4e8     0A 27 02 F6 | 	mov	local01, arg02
2e4ec     09 29 02 FB | 	rdlong	local02, arg01
2e4f0     02 26 16 F2 | 	cmp	local01, #2 wc
2e4f4     14 00 90 CD |  if_b	jmp	#LR__4490
2e4f8     18 28 06 F1 | 	add	local02, #24
2e4fc     14 2B 02 FB | 	rdlong	local03, local02
2e500     18 28 86 F1 | 	sub	local02, #24
2e504     15 27 12 F2 | 	cmp	local01, local03 wc
2e508     08 00 90 CD |  if_b	jmp	#LR__4491
2e50c                 | LR__4490
2e50c     01 2C 06 F6 | 	mov	local04, #1
2e510     60 01 90 FD | 	jmp	#LR__4498
2e514                 | LR__4491
2e514     01 2C 66 F6 | 	neg	local04, #1
2e518                 | ' 		val = 0xFFFFFFFF;
2e518                 | ' 
2e518                 | ' 		switch (fs->fs_type) {
2e518     14 2F C2 FA | 	rdbyte	local05, local02
2e51c     01 2E 86 F1 | 	sub	local05, #1
2e520     03 2E 26 F3 | 	fle	local05, #3
2e524     30 2E 62 FD | 	jmprel	local05
2e528                 | LR__4492
2e528     0C 00 90 FD | 	jmp	#LR__4493
2e52c     B8 00 90 FD | 	jmp	#LR__4494
2e530     F8 00 90 FD | 	jmp	#LR__4495
2e534     38 01 90 FD | 	jmp	#LR__4496
2e538                 | LR__4493
2e538     13 2F 02 F6 | 	mov	local05, local01
2e53c     13 13 02 F6 | 	mov	arg01, local01
2e540     01 12 46 F0 | 	shr	arg01, #1
2e544     09 2F 02 F1 | 	add	local05, arg01
2e548     14 13 02 F6 | 	mov	arg01, local02
2e54c     17 31 02 F6 | 	mov	local06, local05
2e550     09 30 46 F0 | 	shr	local06, #9
2e554     24 28 06 F1 | 	add	local02, #36
2e558     14 15 02 FB | 	rdlong	arg02, local02
2e55c     24 28 86 F1 | 	sub	local02, #36
2e560     18 15 02 F1 | 	add	arg02, local06
2e564     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2e568     00 FA 0D F2 | 	cmp	result1, #0 wz
2e56c     04 01 90 5D |  if_ne	jmp	#LR__4497
2e570     17 31 02 F6 | 	mov	local06, local05
2e574     FF 31 06 F5 | 	and	local06, #511
2e578     34 28 06 F1 | 	add	local02, #52
2e57c     14 31 02 F1 | 	add	local06, local02
2e580     18 33 C2 FA | 	rdbyte	local07, local06
2e584     34 28 86 F1 | 	sub	local02, #52
2e588     14 13 02 F6 | 	mov	arg01, local02
2e58c     01 2E 06 F1 | 	add	local05, #1
2e590     17 31 02 F6 | 	mov	local06, local05
2e594     09 30 46 F0 | 	shr	local06, #9
2e598     24 28 06 F1 | 	add	local02, #36
2e59c     14 15 02 FB | 	rdlong	arg02, local02
2e5a0     24 28 86 F1 | 	sub	local02, #36
2e5a4     18 15 02 F1 | 	add	arg02, local06
2e5a8     7C FD BF FD | 	call	#_fatfs_cc_move_window
2e5ac     00 FA 0D F2 | 	cmp	result1, #0 wz
2e5b0     C0 00 90 5D |  if_ne	jmp	#LR__4497
2e5b4     FF 2F 06 F5 | 	and	local05, #511
2e5b8     34 28 06 F1 | 	add	local02, #52
2e5bc     14 2F 02 F1 | 	add	local05, local02
2e5c0     17 31 C2 FA | 	rdbyte	local06, local05
2e5c4     08 30 66 F0 | 	shl	local06, #8
2e5c8     18 33 42 F5 | 	or	local07, local06
2e5cc     01 26 CE F7 | 	test	local01, #1 wz
2e5d0     04 32 46 50 |  if_ne	shr	local07, #4
2e5d4     19 2B 02 56 |  if_ne	mov	local03, local07
2e5d8     0B 32 46 A7 |  if_e	zerox	local07, #11
2e5dc     19 2B 02 A6 |  if_e	mov	local03, local07
2e5e0     15 2D 02 F6 | 	mov	local04, local03
2e5e4                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2e5e4                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2e5e4                 | ' 			break;
2e5e4     8C 00 90 FD | 	jmp	#LR__4497
2e5e8                 | LR__4494
2e5e8     14 13 02 F6 | 	mov	arg01, local02
2e5ec     13 31 02 F6 | 	mov	local06, local01
2e5f0     08 30 46 F0 | 	shr	local06, #8
2e5f4     24 28 06 F1 | 	add	local02, #36
2e5f8     14 15 02 FB | 	rdlong	arg02, local02
2e5fc     24 28 86 F1 | 	sub	local02, #36
2e600     18 15 02 F1 | 	add	arg02, local06
2e604     20 FD BF FD | 	call	#_fatfs_cc_move_window
2e608     00 FA 0D F2 | 	cmp	result1, #0 wz
2e60c     64 00 90 5D |  if_ne	jmp	#LR__4497
2e610     34 28 06 F1 | 	add	local02, #52
2e614     01 26 66 F0 | 	shl	local01, #1
2e618     FF 27 06 F5 | 	and	local01, #511
2e61c     13 29 02 F1 | 	add	local02, local01
2e620                 | ' {
2e620                 | ' 
2e620                 | ' 	return *((WORD*)ptr);
2e620     14 FB E1 FA | 	rdword	result1, local02
2e624     FD 2C 32 F9 | 	getword	local04, result1, #0
2e628                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2e628                 | ' 			break;
2e628     48 00 90 FD | 	jmp	#LR__4497
2e62c                 | LR__4495
2e62c     14 13 02 F6 | 	mov	arg01, local02
2e630     13 31 02 F6 | 	mov	local06, local01
2e634     07 30 46 F0 | 	shr	local06, #7
2e638     24 28 06 F1 | 	add	local02, #36
2e63c     14 15 02 FB | 	rdlong	arg02, local02
2e640     24 28 86 F1 | 	sub	local02, #36
2e644     18 15 02 F1 | 	add	arg02, local06
2e648     DC FC BF FD | 	call	#_fatfs_cc_move_window
2e64c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e650     20 00 90 5D |  if_ne	jmp	#LR__4497
2e654     34 28 06 F1 | 	add	local02, #52
2e658     02 26 66 F0 | 	shl	local01, #2
2e65c     FF 27 06 F5 | 	and	local01, #511
2e660     13 29 02 F1 | 	add	local02, local01
2e664                 | ' {
2e664                 | ' 
2e664                 | ' 	return *((DWORD*)ptr);
2e664     14 2D 02 FB | 	rdlong	local04, local02
2e668     7C 2C 06 F4 | 	bitl	local04, #124
2e66c                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2e66c                 | ' 			break;
2e66c     04 00 90 FD | 	jmp	#LR__4497
2e670                 | LR__4496
2e670     01 2C 06 F6 | 	mov	local04, #1
2e674                 | LR__4497
2e674                 | LR__4498
2e674                 | ' 			val = 1;
2e674                 | ' 		}
2e674                 | ' 	}
2e674                 | ' 
2e674                 | ' 	return val;
2e674     16 FB 01 F6 | 	mov	result1, local04
2e678     A7 F0 03 F6 | 	mov	ptra, fp
2e67c     B2 00 A0 FD | 	call	#popregs_
2e680                 | _fatfs_cc_get_fat_ret
2e680     2D 00 64 FD | 	ret
2e684                 | 
2e684                 | _fatfs_cc_put_fat
2e684     08 4A 05 F6 | 	mov	COUNT_, #8
2e688     A8 00 A0 FD | 	call	#pushregs_
2e68c     09 27 02 F6 | 	mov	local01, arg01
2e690     0A 29 02 F6 | 	mov	local02, arg02
2e694     0B 2B 02 F6 | 	mov	local03, arg03
2e698     02 2C 06 F6 | 	mov	local04, #2
2e69c     02 28 16 F2 | 	cmp	local02, #2 wc
2e6a0     E0 01 90 CD |  if_b	jmp	#LR__4507
2e6a4     18 26 06 F1 | 	add	local01, #24
2e6a8     13 2F 02 FB | 	rdlong	local05, local01
2e6ac     18 26 86 F1 | 	sub	local01, #24
2e6b0     17 29 12 F2 | 	cmp	local02, local05 wc
2e6b4     CC 01 90 3D |  if_ae	jmp	#LR__4507
2e6b8                 | ' 		switch (fs->fs_type) {
2e6b8     13 31 C2 FA | 	rdbyte	local06, local01
2e6bc     01 30 86 F1 | 	sub	local06, #1
2e6c0     03 30 26 F3 | 	fle	local06, #3
2e6c4     30 30 62 FD | 	jmprel	local06
2e6c8                 | LR__4500
2e6c8     0C 00 90 FD | 	jmp	#LR__4501
2e6cc     F8 00 90 FD | 	jmp	#LR__4504
2e6d0     40 01 90 FD | 	jmp	#LR__4505
2e6d4     AC 01 90 FD | 	jmp	#LR__4506
2e6d8                 | LR__4501
2e6d8     14 33 02 F6 | 	mov	local07, local02
2e6dc     14 2F 02 F6 | 	mov	local05, local02
2e6e0     01 2E 46 F0 | 	shr	local05, #1
2e6e4     17 33 02 F1 | 	add	local07, local05
2e6e8     13 13 02 F6 | 	mov	arg01, local01
2e6ec     19 31 02 F6 | 	mov	local06, local07
2e6f0     09 30 46 F0 | 	shr	local06, #9
2e6f4     24 26 06 F1 | 	add	local01, #36
2e6f8     13 15 02 FB | 	rdlong	arg02, local01
2e6fc     24 26 86 F1 | 	sub	local01, #36
2e700     18 15 02 F1 | 	add	arg02, local06
2e704     20 FC BF FD | 	call	#_fatfs_cc_move_window
2e708     FD 2C 0A F6 | 	mov	local04, result1 wz
2e70c     74 01 90 5D |  if_ne	jmp	#LR__4506
2e710     34 26 06 F1 | 	add	local01, #52
2e714     13 35 02 F6 | 	mov	local08, local01
2e718     19 2F 02 F6 | 	mov	local05, local07
2e71c     FF 2F 06 F5 | 	and	local05, #511
2e720     17 35 02 F1 | 	add	local08, local05
2e724     01 28 CE F7 | 	test	local02, #1 wz
2e728     34 26 86 F1 | 	sub	local01, #52
2e72c     01 32 06 F1 | 	add	local07, #1
2e730     18 00 90 AD |  if_e	jmp	#LR__4502
2e734     1A 2F C2 FA | 	rdbyte	local05, local08
2e738     17 2F 42 F8 | 	getnib	local05, local05, #0
2e73c     15 31 E2 F8 | 	getbyte	local06, local03, #0
2e740     04 30 66 F0 | 	shl	local06, #4
2e744     18 2F 42 F5 | 	or	local05, local06
2e748     04 00 90 FD | 	jmp	#LR__4503
2e74c                 | LR__4502
2e74c     15 2F 02 F6 | 	mov	local05, local03
2e750                 | LR__4503
2e750     1A 2F 42 FC | 	wrbyte	local05, local08
2e754     03 26 06 F1 | 	add	local01, #3
2e758     13 03 48 FC | 	wrbyte	#1, local01
2e75c     03 26 86 F1 | 	sub	local01, #3
2e760     13 13 02 F6 | 	mov	arg01, local01
2e764     19 35 02 F6 | 	mov	local08, local07
2e768     09 34 46 F0 | 	shr	local08, #9
2e76c     24 26 06 F1 | 	add	local01, #36
2e770     13 15 02 FB | 	rdlong	arg02, local01
2e774     24 26 86 F1 | 	sub	local01, #36
2e778     1A 15 02 F1 | 	add	arg02, local08
2e77c     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2e780     FD 2C 0A F6 | 	mov	local04, result1 wz
2e784     FC 00 90 5D |  if_ne	jmp	#LR__4506
2e788     34 26 06 F1 | 	add	local01, #52
2e78c     13 35 02 F6 | 	mov	local08, local01
2e790     FF 33 06 F5 | 	and	local07, #511
2e794     19 35 02 F1 | 	add	local08, local07
2e798     01 28 CE F7 | 	test	local02, #1 wz
2e79c     04 2A 46 50 |  if_ne	shr	local03, #4
2e7a0     15 2F 02 56 |  if_ne	mov	local05, local03
2e7a4     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2e7a8     F0 2E 06 A5 |  if_e	and	local05, #240
2e7ac     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2e7b0     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2e7b4     15 2F 42 A5 |  if_e	or	local05, local03
2e7b8     1A 2F 42 FC | 	wrbyte	local05, local08
2e7bc     31 26 86 F1 | 	sub	local01, #49
2e7c0     13 03 48 FC | 	wrbyte	#1, local01
2e7c4                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2e7c4                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2e7c4                 | ' 			fs->wflag = 1;
2e7c4                 | ' 			break;
2e7c4     BC 00 90 FD | 	jmp	#LR__4506
2e7c8                 | LR__4504
2e7c8     13 13 02 F6 | 	mov	arg01, local01
2e7cc     14 35 02 F6 | 	mov	local08, local02
2e7d0     08 34 46 F0 | 	shr	local08, #8
2e7d4     24 26 06 F1 | 	add	local01, #36
2e7d8     13 15 02 FB | 	rdlong	arg02, local01
2e7dc     24 26 86 F1 | 	sub	local01, #36
2e7e0     1A 15 02 F1 | 	add	arg02, local08
2e7e4     40 FB BF FD | 	call	#_fatfs_cc_move_window
2e7e8     FD 2C 0A F6 | 	mov	local04, result1 wz
2e7ec     94 00 90 5D |  if_ne	jmp	#LR__4506
2e7f0     34 26 06 F1 | 	add	local01, #52
2e7f4     13 13 02 F6 | 	mov	arg01, local01
2e7f8     01 28 66 F0 | 	shl	local02, #1
2e7fc     FF 29 06 F5 | 	and	local02, #511
2e800     14 13 02 F1 | 	add	arg01, local02
2e804     09 2B 52 FC | 	wrword	local03, arg01
2e808     31 26 86 F1 | 	sub	local01, #49
2e80c     13 03 48 FC | 	wrbyte	#1, local01
2e810                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2e810                 | ' 			fs->wflag = 1;
2e810                 | ' 			break;
2e810     70 00 90 FD | 	jmp	#LR__4506
2e814                 | LR__4505
2e814     13 13 02 F6 | 	mov	arg01, local01
2e818     14 35 02 F6 | 	mov	local08, local02
2e81c     07 34 46 F0 | 	shr	local08, #7
2e820     24 26 06 F1 | 	add	local01, #36
2e824     13 15 02 FB | 	rdlong	arg02, local01
2e828     24 26 86 F1 | 	sub	local01, #36
2e82c     1A 15 02 F1 | 	add	arg02, local08
2e830     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2e834     FD 2C 0A F6 | 	mov	local04, result1 wz
2e838     48 00 90 5D |  if_ne	jmp	#LR__4506
2e83c     7C 2A 06 F4 | 	bitl	local03, #124
2e840     34 26 06 F1 | 	add	local01, #52
2e844     14 35 02 F6 | 	mov	local08, local02
2e848     02 34 66 F0 | 	shl	local08, #2
2e84c     FF 35 06 F5 | 	and	local08, #511
2e850     13 13 02 F6 | 	mov	arg01, local01
2e854     1A 13 02 F1 | 	add	arg01, local08
2e858                 | ' {
2e858                 | ' 
2e858                 | ' 	return *((DWORD*)ptr);
2e858     09 35 02 FB | 	rdlong	local08, arg01
2e85c     00 00 78 FF 
2e860     00 34 06 F5 | 	and	local08, ##-268435456
2e864     1A 2B 42 F5 | 	or	local03, local08
2e868     13 13 02 F6 | 	mov	arg01, local01
2e86c     02 28 66 F0 | 	shl	local02, #2
2e870     FF 29 06 F5 | 	and	local02, #511
2e874     14 13 02 F1 | 	add	arg01, local02
2e878     09 2B 62 FC | 	wrlong	local03, arg01
2e87c     31 26 86 F1 | 	sub	local01, #49
2e880     13 03 48 FC | 	wrbyte	#1, local01
2e884                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2e884                 | ' 			}
2e884                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2e884                 | ' 			fs->wflag = 1;
2e884                 | ' 			break;
2e884                 | LR__4506
2e884                 | LR__4507
2e884                 | ' 		}
2e884                 | ' 	}
2e884                 | ' 	return res;
2e884     16 FB 01 F6 | 	mov	result1, local04
2e888     A7 F0 03 F6 | 	mov	ptra, fp
2e88c     B2 00 A0 FD | 	call	#popregs_
2e890                 | _fatfs_cc_put_fat_ret
2e890     2D 00 64 FD | 	ret
2e894                 | 
2e894                 | _fatfs_cc_remove_chain
2e894     05 4A 05 F6 | 	mov	COUNT_, #5
2e898     A8 00 A0 FD | 	call	#pushregs_
2e89c     09 27 02 F6 | 	mov	local01, arg01
2e8a0     0A 29 02 F6 | 	mov	local02, arg02
2e8a4     0B 2B 02 F6 | 	mov	local03, arg03
2e8a8     13 2D 02 FB | 	rdlong	local04, local01
2e8ac     02 28 16 F2 | 	cmp	local02, #2 wc
2e8b0     14 00 90 CD |  if_b	jmp	#LR__4510
2e8b4     18 2C 06 F1 | 	add	local04, #24
2e8b8     16 FB 01 FB | 	rdlong	result1, local04
2e8bc     18 2C 86 F1 | 	sub	local04, #24
2e8c0     FD 28 12 F2 | 	cmp	local02, result1 wc
2e8c4     08 00 90 CD |  if_b	jmp	#LR__4511
2e8c8                 | LR__4510
2e8c8     02 FA 05 F6 | 	mov	result1, #2
2e8cc     CC 00 90 FD | 	jmp	#LR__4516
2e8d0                 | LR__4511
2e8d0     00 2A 0E F2 | 	cmp	local03, #0 wz
2e8d4     18 00 90 AD |  if_e	jmp	#LR__4512
2e8d8     15 15 02 F6 | 	mov	arg02, local03
2e8dc     16 13 02 F6 | 	mov	arg01, local04
2e8e0     01 16 66 F6 | 	neg	arg03, #1
2e8e4     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2e8e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e8ec     AC 00 90 5D |  if_ne	jmp	#LR__4516
2e8f0                 | LR__4512
2e8f0                 | ' 	}
2e8f0                 | ' 
2e8f0                 | ' 
2e8f0                 | ' 	do {
2e8f0                 | LR__4513
2e8f0     14 15 02 F6 | 	mov	arg02, local02
2e8f4     13 13 02 F6 | 	mov	arg01, local01
2e8f8     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2e8fc     FD 2E 0A F6 | 	mov	local05, result1 wz
2e900     94 00 90 AD |  if_e	jmp	#LR__4515
2e904     01 2E 0E F2 | 	cmp	local05, #1 wz
2e908     02 FA 05 A6 |  if_e	mov	result1, #2
2e90c     8C 00 90 AD |  if_e	jmp	#LR__4516
2e910     FF FF 7F FF 
2e914     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2e918     01 FA 05 A6 |  if_e	mov	result1, #1
2e91c     7C 00 90 AD |  if_e	jmp	#LR__4516
2e920     14 15 02 F6 | 	mov	arg02, local02
2e924     16 13 02 F6 | 	mov	arg01, local04
2e928     00 16 06 F6 | 	mov	arg03, #0
2e92c     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2e930     FD 2A 0A F6 | 	mov	local03, result1 wz
2e934     15 FB 01 56 |  if_ne	mov	result1, local03
2e938     60 00 90 5D |  if_ne	jmp	#LR__4516
2e93c     18 2C 06 F1 | 	add	local04, #24
2e940     16 2B 02 FB | 	rdlong	local03, local04
2e944     02 2A 86 F1 | 	sub	local03, #2
2e948     04 2C 86 F1 | 	sub	local04, #4
2e94c     16 29 02 FB | 	rdlong	local02, local04
2e950     14 2C 86 F1 | 	sub	local04, #20
2e954     15 29 12 F2 | 	cmp	local02, local03 wc
2e958     24 00 90 3D |  if_ae	jmp	#LR__4514
2e95c     14 2C 06 F1 | 	add	local04, #20
2e960     16 2B 02 FB | 	rdlong	local03, local04
2e964     01 2A 06 F1 | 	add	local03, #1
2e968     16 2B 62 FC | 	wrlong	local03, local04
2e96c     10 2C 86 F1 | 	sub	local04, #16
2e970     16 2B C2 FA | 	rdbyte	local03, local04
2e974     01 2A 46 F5 | 	or	local03, #1
2e978     16 2B 42 FC | 	wrbyte	local03, local04
2e97c     04 2C 86 F1 | 	sub	local04, #4
2e980                 | LR__4514
2e980     17 29 02 F6 | 	mov	local02, local05
2e984     18 2C 06 F1 | 	add	local04, #24
2e988     16 2F 02 FB | 	rdlong	local05, local04
2e98c     18 2C 86 F1 | 	sub	local04, #24
2e990     17 29 12 F2 | 	cmp	local02, local05 wc
2e994     58 FF 9F CD |  if_b	jmp	#LR__4513
2e998                 | LR__4515
2e998                 | ' #line 1500 "ff.c"
2e998                 | ' 	return FR_OK;
2e998     00 FA 05 F6 | 	mov	result1, #0
2e99c                 | LR__4516
2e99c     A7 F0 03 F6 | 	mov	ptra, fp
2e9a0     B2 00 A0 FD | 	call	#popregs_
2e9a4                 | _fatfs_cc_remove_chain_ret
2e9a4     2D 00 64 FD | 	ret
2e9a8                 | 
2e9a8                 | _fatfs_cc_create_chain
2e9a8     09 4A 05 F6 | 	mov	COUNT_, #9
2e9ac     A8 00 A0 FD | 	call	#pushregs_
2e9b0     09 27 02 F6 | 	mov	local01, arg01
2e9b4     0A 29 0A F6 | 	mov	local02, arg02 wz
2e9b8     13 2B 02 FB | 	rdlong	local03, local01
2e9bc     28 00 90 5D |  if_ne	jmp	#LR__4520
2e9c0     10 2A 06 F1 | 	add	local03, #16
2e9c4     15 2D 0A FB | 	rdlong	local04, local03 wz
2e9c8     10 2A 86 F1 | 	sub	local03, #16
2e9cc     18 2A 06 51 |  if_ne	add	local03, #24
2e9d0     15 2F 02 5B |  if_ne	rdlong	local05, local03
2e9d4     18 2A 86 51 |  if_ne	sub	local03, #24
2e9d8     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2e9dc     50 00 90 4D |  if_c_and_nz	jmp	#LR__4521
2e9e0     01 2C 06 F6 | 	mov	local04, #1
2e9e4     48 00 90 FD | 	jmp	#LR__4521
2e9e8                 | LR__4520
2e9e8     14 15 02 F6 | 	mov	arg02, local02
2e9ec     13 13 02 F6 | 	mov	arg01, local01
2e9f0     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2e9f4     FD 2C 02 F6 | 	mov	local04, result1
2e9f8     02 2C 16 F2 | 	cmp	local04, #2 wc
2e9fc     01 FA 05 C6 |  if_b	mov	result1, #1
2ea00     BC 01 90 CD |  if_b	jmp	#LR__4531
2ea04     FF FF 7F FF 
2ea08     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2ea0c     16 FB 01 A6 |  if_e	mov	result1, local04
2ea10     AC 01 90 AD |  if_e	jmp	#LR__4531
2ea14     18 2A 06 F1 | 	add	local03, #24
2ea18     15 2F 02 FB | 	rdlong	local05, local03
2ea1c     18 2A 86 F1 | 	sub	local03, #24
2ea20     17 2D 12 F2 | 	cmp	local04, local05 wc
2ea24     16 FB 01 C6 |  if_b	mov	result1, local04
2ea28     94 01 90 CD |  if_b	jmp	#LR__4531
2ea2c     14 2D 02 F6 | 	mov	local04, local02
2ea30                 | LR__4521
2ea30     14 2A 06 F1 | 	add	local03, #20
2ea34     15 2F 0A FB | 	rdlong	local05, local03 wz
2ea38     14 2A 86 F1 | 	sub	local03, #20
2ea3c     00 FA 05 A6 |  if_e	mov	result1, #0
2ea40     7C 01 90 AD |  if_e	jmp	#LR__4531
2ea44     00 30 06 F6 | 	mov	local06, #0
2ea48     14 2D 0A F2 | 	cmp	local04, local02 wz
2ea4c     74 00 90 5D |  if_ne	jmp	#LR__4524
2ea50     16 31 02 F6 | 	mov	local06, local04
2ea54     01 30 06 F1 | 	add	local06, #1
2ea58     18 2A 06 F1 | 	add	local03, #24
2ea5c     15 2F 02 FB | 	rdlong	local05, local03
2ea60     18 2A 86 F1 | 	sub	local03, #24
2ea64     17 31 12 F2 | 	cmp	local06, local05 wc
2ea68     02 30 06 36 |  if_ae	mov	local06, #2
2ea6c     18 15 02 F6 | 	mov	arg02, local06
2ea70     13 13 02 F6 | 	mov	arg01, local01
2ea74     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2ea78     FD 2E 02 F6 | 	mov	local05, result1
2ea7c     01 2E 0E F2 | 	cmp	local05, #1 wz
2ea80     FF FF 7F 5F 
2ea84     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2ea88     17 FB 01 A6 |  if_e	mov	result1, local05
2ea8c     30 01 90 AD |  if_e	jmp	#LR__4531
2ea90     00 2E 0E F2 | 	cmp	local05, #0 wz
2ea94     2C 00 90 AD |  if_e	jmp	#LR__4523
2ea98     10 2A 06 F1 | 	add	local03, #16
2ea9c     15 33 02 FB | 	rdlong	local07, local03
2eaa0     10 2A 86 F1 | 	sub	local03, #16
2eaa4     02 32 16 F2 | 	cmp	local07, #2 wc
2eaa8     14 00 90 CD |  if_b	jmp	#LR__4522
2eaac     18 2A 06 F1 | 	add	local03, #24
2eab0     15 2F 02 FB | 	rdlong	local05, local03
2eab4     18 2A 86 F1 | 	sub	local03, #24
2eab8     17 33 12 F2 | 	cmp	local07, local05 wc
2eabc     19 2D 02 C6 |  if_b	mov	local04, local07
2eac0                 | LR__4522
2eac0     00 30 06 F6 | 	mov	local06, #0
2eac4                 | LR__4523
2eac4                 | LR__4524
2eac4     00 30 0E F2 | 	cmp	local06, #0 wz
2eac8     60 00 90 5D |  if_ne	jmp	#LR__4527
2eacc     16 31 02 F6 | 	mov	local06, local04
2ead0                 | ' 			ncl = scl;
2ead0                 | ' 			for (;;) {
2ead0                 | LR__4525
2ead0     01 30 06 F1 | 	add	local06, #1
2ead4     18 2A 06 F1 | 	add	local03, #24
2ead8     15 2F 02 FB | 	rdlong	local05, local03
2eadc     18 2A 86 F1 | 	sub	local03, #24
2eae0     17 31 12 F2 | 	cmp	local06, local05 wc
2eae4     02 30 06 36 |  if_ae	mov	local06, #2
2eae8     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2eaec     00 FA 05 16 |  if_a	mov	result1, #0
2eaf0     CC 00 90 1D |  if_a	jmp	#LR__4531
2eaf4     18 15 02 F6 | 	mov	arg02, local06
2eaf8     13 13 02 F6 | 	mov	arg01, local01
2eafc     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2eb00     FD 32 0A F6 | 	mov	local07, result1 wz
2eb04     24 00 90 AD |  if_e	jmp	#LR__4526
2eb08     01 32 0E F2 | 	cmp	local07, #1 wz
2eb0c     FF FF 7F 5F 
2eb10     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2eb14     19 FB 01 A6 |  if_e	mov	result1, local07
2eb18     A4 00 90 AD |  if_e	jmp	#LR__4531
2eb1c     16 31 0A F2 | 	cmp	local06, local04 wz
2eb20     00 FA 05 A6 |  if_e	mov	result1, #0
2eb24     98 00 90 AD |  if_e	jmp	#LR__4531
2eb28     A4 FF 9F FD | 	jmp	#LR__4525
2eb2c                 | LR__4526
2eb2c                 | LR__4527
2eb2c     15 13 02 F6 | 	mov	arg01, local03
2eb30     18 15 02 F6 | 	mov	arg02, local06
2eb34     01 16 66 F6 | 	neg	arg03, #1
2eb38     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2eb3c     FD 34 0A F6 | 	mov	local08, result1 wz
2eb40     1C 00 90 5D |  if_ne	jmp	#LR__4528
2eb44     00 28 0E F2 | 	cmp	local02, #0 wz
2eb48     14 00 90 AD |  if_e	jmp	#LR__4528
2eb4c     15 13 02 F6 | 	mov	arg01, local03
2eb50     14 15 02 F6 | 	mov	arg02, local02
2eb54     18 17 02 F6 | 	mov	arg03, local06
2eb58     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2eb5c     FD 34 02 F6 | 	mov	local08, result1
2eb60                 | LR__4528
2eb60     00 34 0E F2 | 	cmp	local08, #0 wz
2eb64     4C 00 90 5D |  if_ne	jmp	#LR__4529
2eb68     10 2A 06 F1 | 	add	local03, #16
2eb6c     15 31 62 FC | 	wrlong	local06, local03
2eb70     08 2A 06 F1 | 	add	local03, #8
2eb74     15 2F 02 FB | 	rdlong	local05, local03
2eb78     02 2E 86 F1 | 	sub	local05, #2
2eb7c     04 2A 86 F1 | 	sub	local03, #4
2eb80     15 37 02 FB | 	rdlong	local09, local03
2eb84     14 2A 86 F1 | 	sub	local03, #20
2eb88     17 37 1A F2 | 	cmp	local09, local05 wcz
2eb8c     14 2A 06 E1 |  if_be	add	local03, #20
2eb90     15 37 02 EB |  if_be	rdlong	local09, local03
2eb94     01 36 86 E1 |  if_be	sub	local09, #1
2eb98     15 37 62 EC |  if_be	wrlong	local09, local03
2eb9c     14 2A 86 E1 |  if_be	sub	local03, #20
2eba0     04 2A 06 F1 | 	add	local03, #4
2eba4     15 2F C2 FA | 	rdbyte	local05, local03
2eba8     01 2E 46 F5 | 	or	local05, #1
2ebac     15 2F 42 FC | 	wrbyte	local05, local03
2ebb0     08 00 90 FD | 	jmp	#LR__4530
2ebb4                 | LR__4529
2ebb4     01 34 0E F2 | 	cmp	local08, #1 wz
2ebb8     01 30 C6 F6 | 	negz	local06, #1
2ebbc                 | LR__4530
2ebbc                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2ebbc                 | ' 	}
2ebbc                 | ' 
2ebbc                 | ' 	return ncl;
2ebbc     18 FB 01 F6 | 	mov	result1, local06
2ebc0                 | LR__4531
2ebc0     A7 F0 03 F6 | 	mov	ptra, fp
2ebc4     B2 00 A0 FD | 	call	#popregs_
2ebc8                 | _fatfs_cc_create_chain_ret
2ebc8     2D 00 64 FD | 	ret
2ebcc                 | 
2ebcc                 | _fatfs_cc_dir_clear
2ebcc     06 4A 05 F6 | 	mov	COUNT_, #6
2ebd0     A8 00 A0 FD | 	call	#pushregs_
2ebd4     09 27 02 F6 | 	mov	local01, arg01
2ebd8     0A 29 02 F6 | 	mov	local02, arg02
2ebdc     13 13 02 F6 | 	mov	arg01, local01
2ebe0     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2ebe4     00 FA 0D F2 | 	cmp	result1, #0 wz
2ebe8     01 FA 05 56 |  if_ne	mov	result1, #1
2ebec     90 00 90 5D |  if_ne	jmp	#LR__4542
2ebf0     13 13 02 F6 | 	mov	arg01, local01
2ebf4     14 15 02 F6 | 	mov	arg02, local02
2ebf8     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2ebfc     FD 2A 02 F6 | 	mov	local03, result1
2ec00     30 26 06 F1 | 	add	local01, #48
2ec04     13 2B 62 FC | 	wrlong	local03, local01
2ec08     04 26 06 F1 | 	add	local01, #4
2ec0c     13 13 02 F6 | 	mov	arg01, local01
2ec10     00 14 06 F6 | 	mov	arg02, #0
2ec14     09 16 C6 F9 | 	decod	arg03, #9
2ec18     98 00 A0 FD | 	call	#\builtin_bytefill_
2ec1c     13 2D 02 F6 | 	mov	local04, local01
2ec20                 | ' #line 1667 "ff.c"
2ec20                 | ' 	{
2ec20                 | ' 		ibuf = fs->win; szb = 1;
2ec20                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2ec20     00 2E 06 F6 | 	mov	local05, #0
2ec24     34 26 86 F1 | 	sub	local01, #52
2ec28                 | LR__4540
2ec28     0A 26 06 F1 | 	add	local01, #10
2ec2c     13 31 E2 FA | 	rdword	local06, local01
2ec30     0A 26 86 F1 | 	sub	local01, #10
2ec34     18 2F 12 F2 | 	cmp	local05, local06 wc
2ec38     2C 00 90 3D |  if_ae	jmp	#LR__4541
2ec3c     01 26 06 F1 | 	add	local01, #1
2ec40     13 13 C2 FA | 	rdbyte	arg01, local01
2ec44     01 26 86 F1 | 	sub	local01, #1
2ec48     16 15 02 F6 | 	mov	arg02, local04
2ec4c     15 17 02 F6 | 	mov	arg03, local03
2ec50     17 17 02 F1 | 	add	arg03, local05
2ec54     01 18 06 F6 | 	mov	arg04, #1
2ec58     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2ec5c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ec60     01 2E 06 A1 |  if_e	add	local05, #1
2ec64     C0 FF 9F AD |  if_e	jmp	#LR__4540
2ec68                 | LR__4541
2ec68                 | ' 	}
2ec68                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2ec68     0A 26 06 F1 | 	add	local01, #10
2ec6c     13 2D E2 FA | 	rdword	local04, local01
2ec70     16 2F 0A F2 | 	cmp	local05, local04 wz
2ec74     00 30 06 A6 |  if_e	mov	local06, #0
2ec78     01 30 06 56 |  if_ne	mov	local06, #1
2ec7c     18 FB 01 F6 | 	mov	result1, local06
2ec80                 | LR__4542
2ec80     A7 F0 03 F6 | 	mov	ptra, fp
2ec84     B2 00 A0 FD | 	call	#popregs_
2ec88                 | _fatfs_cc_dir_clear_ret
2ec88     2D 00 64 FD | 	ret
2ec8c                 | 
2ec8c                 | _fatfs_cc_dir_sdi
2ec8c     06 4A 05 F6 | 	mov	COUNT_, #6
2ec90     A8 00 A0 FD | 	call	#pushregs_
2ec94     09 27 02 F6 | 	mov	local01, arg01
2ec98     0A 29 02 F6 | 	mov	local02, arg02
2ec9c     13 2B 02 FB | 	rdlong	local03, local01
2eca0     00 10 00 FF 
2eca4     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2eca8     1F 28 CE C7 |  if_b	test	local02, #31 wz
2ecac                 | ' 		return FR_INT_ERR;
2ecac     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2ecb0     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4556
2ecb4     10 26 06 F1 | 	add	local01, #16
2ecb8     13 29 62 FC | 	wrlong	local02, local01
2ecbc     08 26 86 F1 | 	sub	local01, #8
2ecc0     13 2D 0A FB | 	rdlong	local04, local01 wz
2ecc4     08 26 86 F1 | 	sub	local01, #8
2ecc8     15 2F C2 AA |  if_e	rdbyte	local05, local03
2eccc     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2ecd0     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2ecd4     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2ecd8     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2ecdc     00 2C 0E F2 | 	cmp	local04, #0 wz
2ece0     3C 00 90 5D |  if_ne	jmp	#LR__4550
2ece4     14 2F 02 F6 | 	mov	local05, local02
2ece8     05 2E 46 F0 | 	shr	local05, #5
2ecec     08 2A 06 F1 | 	add	local03, #8
2ecf0     15 15 E2 FA | 	rdword	arg02, local03
2ecf4     08 2A 86 F1 | 	sub	local03, #8
2ecf8     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2ecfc     02 FA 05 36 |  if_ae	mov	result1, #2
2ed00     E4 00 90 3D |  if_ae	jmp	#LR__4556
2ed04     28 2A 06 F1 | 	add	local03, #40
2ed08     15 2F 02 FB | 	rdlong	local05, local03
2ed0c     28 2A 86 F1 | 	sub	local03, #40
2ed10     18 26 06 F1 | 	add	local01, #24
2ed14     13 2F 62 FC | 	wrlong	local05, local01
2ed18     18 26 86 F1 | 	sub	local01, #24
2ed1c     7C 00 90 FD | 	jmp	#LR__4555
2ed20                 | LR__4550
2ed20     0A 2A 06 F1 | 	add	local03, #10
2ed24     15 31 E2 FA | 	rdword	local06, local03
2ed28     0A 2A 86 F1 | 	sub	local03, #10
2ed2c     09 30 66 F0 | 	shl	local06, #9
2ed30                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2ed30                 | ' 		while (ofs >= csz) {
2ed30                 | LR__4551
2ed30     18 29 12 F2 | 	cmp	local02, local06 wc
2ed34     4C 00 90 CD |  if_b	jmp	#LR__4554
2ed38     13 13 02 F6 | 	mov	arg01, local01
2ed3c     16 15 02 F6 | 	mov	arg02, local04
2ed40     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2ed44     FD 2C 02 F6 | 	mov	local04, result1
2ed48     FF FF 7F FF 
2ed4c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2ed50     01 FA 05 A6 |  if_e	mov	result1, #1
2ed54     90 00 90 AD |  if_e	jmp	#LR__4556
2ed58     02 2C 16 F2 | 	cmp	local04, #2 wc
2ed5c     14 00 90 CD |  if_b	jmp	#LR__4552
2ed60     18 2A 06 F1 | 	add	local03, #24
2ed64     15 2F 02 FB | 	rdlong	local05, local03
2ed68     18 2A 86 F1 | 	sub	local03, #24
2ed6c     17 2D 12 F2 | 	cmp	local04, local05 wc
2ed70     08 00 90 CD |  if_b	jmp	#LR__4553
2ed74                 | LR__4552
2ed74     02 FA 05 F6 | 	mov	result1, #2
2ed78     6C 00 90 FD | 	jmp	#LR__4556
2ed7c                 | LR__4553
2ed7c     18 29 82 F1 | 	sub	local02, local06
2ed80     AC FF 9F FD | 	jmp	#LR__4551
2ed84                 | LR__4554
2ed84     15 13 02 F6 | 	mov	arg01, local03
2ed88     16 15 02 F6 | 	mov	arg02, local04
2ed8c     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2ed90     18 26 06 F1 | 	add	local01, #24
2ed94     13 FB 61 FC | 	wrlong	result1, local01
2ed98     18 26 86 F1 | 	sub	local01, #24
2ed9c                 | LR__4555
2ed9c     14 26 06 F1 | 	add	local01, #20
2eda0     13 2D 62 FC | 	wrlong	local04, local01
2eda4     04 26 06 F1 | 	add	local01, #4
2eda8     13 2F 0A FB | 	rdlong	local05, local01 wz
2edac     18 26 86 F1 | 	sub	local01, #24
2edb0     02 FA 05 A6 |  if_e	mov	result1, #2
2edb4     30 00 90 AD |  if_e	jmp	#LR__4556
2edb8     14 31 02 F6 | 	mov	local06, local02
2edbc     09 30 46 F0 | 	shr	local06, #9
2edc0     18 26 06 F1 | 	add	local01, #24
2edc4     13 2F 02 FB | 	rdlong	local05, local01
2edc8     18 2F 02 F1 | 	add	local05, local06
2edcc     13 2F 62 FC | 	wrlong	local05, local01
2edd0     34 2A 06 F1 | 	add	local03, #52
2edd4     FF 29 06 F5 | 	and	local02, #511
2edd8     14 2B 02 F1 | 	add	local03, local02
2eddc     04 26 06 F1 | 	add	local01, #4
2ede0     13 2B 62 FC | 	wrlong	local03, local01
2ede4                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2ede4                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2ede4                 | ' 
2ede4                 | ' 	return FR_OK;
2ede4     00 FA 05 F6 | 	mov	result1, #0
2ede8                 | LR__4556
2ede8     A7 F0 03 F6 | 	mov	ptra, fp
2edec     B2 00 A0 FD | 	call	#popregs_
2edf0                 | _fatfs_cc_dir_sdi_ret
2edf0     2D 00 64 FD | 	ret
2edf4                 | 
2edf4                 | _fatfs_cc_dir_next
2edf4     05 4A 05 F6 | 	mov	COUNT_, #5
2edf8     A8 00 A0 FD | 	call	#pushregs_
2edfc     09 27 02 F6 | 	mov	local01, arg01
2ee00     0A 29 02 F6 | 	mov	local02, arg02
2ee04     13 2B 02 FB | 	rdlong	local03, local01
2ee08     10 26 06 F1 | 	add	local01, #16
2ee0c     13 2D 02 FB | 	rdlong	local04, local01
2ee10     10 26 86 F1 | 	sub	local01, #16
2ee14     20 2C 06 F1 | 	add	local04, #32
2ee18     00 10 00 FF 
2ee1c     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2ee20     18 26 06 31 |  if_ae	add	local01, #24
2ee24     13 01 68 3C |  if_ae	wrlong	#0, local01
2ee28     18 26 86 31 |  if_ae	sub	local01, #24
2ee2c     18 26 06 F1 | 	add	local01, #24
2ee30     13 15 0A FB | 	rdlong	arg02, local01 wz
2ee34     18 26 86 F1 | 	sub	local01, #24
2ee38     04 FA 05 A6 |  if_e	mov	result1, #4
2ee3c     64 01 90 AD |  if_e	jmp	#LR__4565
2ee40     FF 2D CE F7 | 	test	local04, #511 wz
2ee44     3C 01 90 5D |  if_ne	jmp	#LR__4564
2ee48     18 26 06 F1 | 	add	local01, #24
2ee4c     13 15 02 FB | 	rdlong	arg02, local01
2ee50     01 14 06 F1 | 	add	arg02, #1
2ee54     13 15 62 FC | 	wrlong	arg02, local01
2ee58     04 26 86 F1 | 	sub	local01, #4
2ee5c     13 15 0A FB | 	rdlong	arg02, local01 wz
2ee60     14 26 86 F1 | 	sub	local01, #20
2ee64     2C 00 90 5D |  if_ne	jmp	#LR__4560
2ee68     16 15 02 F6 | 	mov	arg02, local04
2ee6c     05 14 46 F0 | 	shr	arg02, #5
2ee70     08 2A 06 F1 | 	add	local03, #8
2ee74     15 29 E2 FA | 	rdword	local02, local03
2ee78     08 2A 86 F1 | 	sub	local03, #8
2ee7c     14 15 12 F2 | 	cmp	arg02, local02 wc
2ee80     18 26 06 31 |  if_ae	add	local01, #24
2ee84     13 01 68 3C |  if_ae	wrlong	#0, local01
2ee88                 | ' 				dp->sect = 0; return FR_NO_FILE;
2ee88     04 FA 05 36 |  if_ae	mov	result1, #4
2ee8c     14 01 90 3D |  if_ae	jmp	#LR__4565
2ee90     F0 00 90 FD | 	jmp	#LR__4563
2ee94                 | LR__4560
2ee94     16 13 02 F6 | 	mov	arg01, local04
2ee98     09 12 46 F0 | 	shr	arg01, #9
2ee9c     0A 2A 06 F1 | 	add	local03, #10
2eea0     15 15 E2 FA | 	rdword	arg02, local03
2eea4     0A 2A 86 F1 | 	sub	local03, #10
2eea8     01 14 86 F1 | 	sub	arg02, #1
2eeac     0A 13 CA F7 | 	test	arg01, arg02 wz
2eeb0     D0 00 90 5D |  if_ne	jmp	#LR__4562
2eeb4     13 13 02 F6 | 	mov	arg01, local01
2eeb8     14 26 06 F1 | 	add	local01, #20
2eebc     13 15 02 FB | 	rdlong	arg02, local01
2eec0     14 26 86 F1 | 	sub	local01, #20
2eec4     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2eec8     FD 2E 02 F6 | 	mov	local05, result1
2eecc     02 2E 16 F2 | 	cmp	local05, #2 wc
2eed0     02 FA 05 C6 |  if_b	mov	result1, #2
2eed4     CC 00 90 CD |  if_b	jmp	#LR__4565
2eed8     FF FF 7F FF 
2eedc     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2eee0     01 FA 05 A6 |  if_e	mov	result1, #1
2eee4     BC 00 90 AD |  if_e	jmp	#LR__4565
2eee8     18 2A 06 F1 | 	add	local03, #24
2eeec     15 15 02 FB | 	rdlong	arg02, local03
2eef0     18 2A 86 F1 | 	sub	local03, #24
2eef4     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2eef8     68 00 90 CD |  if_b	jmp	#LR__4561
2eefc     00 28 0E F2 | 	cmp	local02, #0 wz
2ef00     18 26 06 A1 |  if_e	add	local01, #24
2ef04     13 01 68 AC |  if_e	wrlong	#0, local01
2ef08                 | ' 						dp->sect = 0; return FR_NO_FILE;
2ef08     04 FA 05 A6 |  if_e	mov	result1, #4
2ef0c     94 00 90 AD |  if_e	jmp	#LR__4565
2ef10     13 13 02 F6 | 	mov	arg01, local01
2ef14     14 26 06 F1 | 	add	local01, #20
2ef18     13 15 02 FB | 	rdlong	arg02, local01
2ef1c     14 26 86 F1 | 	sub	local01, #20
2ef20     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2ef24     FD 2E 0A F6 | 	mov	local05, result1 wz
2ef28     07 FA 05 A6 |  if_e	mov	result1, #7
2ef2c     74 00 90 AD |  if_e	jmp	#LR__4565
2ef30     01 2E 0E F2 | 	cmp	local05, #1 wz
2ef34     02 FA 05 A6 |  if_e	mov	result1, #2
2ef38     68 00 90 AD |  if_e	jmp	#LR__4565
2ef3c     FF FF 7F FF 
2ef40     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2ef44     01 FA 05 A6 |  if_e	mov	result1, #1
2ef48     58 00 90 AD |  if_e	jmp	#LR__4565
2ef4c     17 15 02 F6 | 	mov	arg02, local05
2ef50     15 13 02 F6 | 	mov	arg01, local03
2ef54     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2ef58     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef5c     01 FA 05 56 |  if_ne	mov	result1, #1
2ef60     40 00 90 5D |  if_ne	jmp	#LR__4565
2ef64                 | LR__4561
2ef64     14 26 06 F1 | 	add	local01, #20
2ef68     13 2F 62 FC | 	wrlong	local05, local01
2ef6c     15 13 02 F6 | 	mov	arg01, local03
2ef70     17 15 02 F6 | 	mov	arg02, local05
2ef74     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2ef78     04 26 06 F1 | 	add	local01, #4
2ef7c     13 FB 61 FC | 	wrlong	result1, local01
2ef80     18 26 86 F1 | 	sub	local01, #24
2ef84                 | LR__4562
2ef84                 | LR__4563
2ef84                 | LR__4564
2ef84     10 26 06 F1 | 	add	local01, #16
2ef88     13 2D 62 FC | 	wrlong	local04, local01
2ef8c     34 2A 06 F1 | 	add	local03, #52
2ef90     FF 2D 06 F5 | 	and	local04, #511
2ef94     16 2B 02 F1 | 	add	local03, local04
2ef98     0C 26 06 F1 | 	add	local01, #12
2ef9c     13 2B 62 FC | 	wrlong	local03, local01
2efa0                 | ' #line 1771 "ff.c"
2efa0                 | ' 				}
2efa0                 | ' 				dp->clust = clst;
2efa0                 | ' 				dp->sect = clst2sect(fs, clst);
2efa0                 | ' 			}
2efa0                 | ' 		}
2efa0                 | ' 	}
2efa0                 | ' 	dp->dptr = ofs;
2efa0                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2efa0                 | ' 
2efa0                 | ' 	return FR_OK;
2efa0     00 FA 05 F6 | 	mov	result1, #0
2efa4                 | LR__4565
2efa4     A7 F0 03 F6 | 	mov	ptra, fp
2efa8     B2 00 A0 FD | 	call	#popregs_
2efac                 | _fatfs_cc_dir_next_ret
2efac     2D 00 64 FD | 	ret
2efb0                 | 
2efb0                 | _fatfs_cc_dir_alloc
2efb0     08 4A 05 F6 | 	mov	COUNT_, #8
2efb4     A8 00 A0 FD | 	call	#pushregs_
2efb8     09 27 02 F6 | 	mov	local01, arg01
2efbc     0A 29 02 F6 | 	mov	local02, arg02
2efc0     13 2B 02 FB | 	rdlong	local03, local01
2efc4     13 13 02 F6 | 	mov	arg01, local01
2efc8     00 14 06 F6 | 	mov	arg02, #0
2efcc     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2efd0     FD 2C 0A F6 | 	mov	local04, result1 wz
2efd4     70 00 90 5D |  if_ne	jmp	#LR__4574
2efd8     00 2E 06 F6 | 	mov	local05, #0
2efdc                 | ' 		n = 0;
2efdc                 | ' 		do {
2efdc                 | LR__4570
2efdc     18 26 06 F1 | 	add	local01, #24
2efe0     13 15 02 FB | 	rdlong	arg02, local01
2efe4     18 26 86 F1 | 	sub	local01, #24
2efe8     15 13 02 F6 | 	mov	arg01, local03
2efec     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2eff0     FD 2C 0A F6 | 	mov	local04, result1 wz
2eff4     50 00 90 5D |  if_ne	jmp	#LR__4573
2eff8     1C 26 06 F1 | 	add	local01, #28
2effc     13 31 02 FB | 	rdlong	local06, local01
2f000     1C 26 86 F1 | 	sub	local01, #28
2f004     18 31 C2 FA | 	rdbyte	local06, local06
2f008     E5 30 0E F2 | 	cmp	local06, #229 wz
2f00c     1C 26 06 51 |  if_ne	add	local01, #28
2f010     13 33 02 5B |  if_ne	rdlong	local07, local01
2f014     1C 26 86 51 |  if_ne	sub	local01, #28
2f018     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2f01c     10 00 90 5D |  if_ne	jmp	#LR__4571
2f020     01 2E 06 F1 | 	add	local05, #1
2f024     14 2F 0A F2 | 	cmp	local05, local02 wz
2f028     1C 00 90 AD |  if_e	jmp	#LR__4573
2f02c     04 00 90 FD | 	jmp	#LR__4572
2f030                 | LR__4571
2f030     00 2E 06 F6 | 	mov	local05, #0
2f034                 | LR__4572
2f034     13 13 02 F6 | 	mov	arg01, local01
2f038     01 14 06 F6 | 	mov	arg02, #1
2f03c     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2f040     FD 2C 0A F6 | 	mov	local04, result1 wz
2f044     94 FF 9F AD |  if_e	jmp	#LR__4570
2f048                 | LR__4573
2f048                 | LR__4574
2f048     04 2C 0E F2 | 	cmp	local04, #4 wz
2f04c     07 2C 06 A6 |  if_e	mov	local04, #7
2f050                 | ' 	return res;
2f050     16 FB 01 F6 | 	mov	result1, local04
2f054     A7 F0 03 F6 | 	mov	ptra, fp
2f058     B2 00 A0 FD | 	call	#popregs_
2f05c                 | _fatfs_cc_dir_alloc_ret
2f05c     2D 00 64 FD | 	ret
2f060                 | 
2f060                 | _fatfs_cc_ld_clust
2f060     09 01 02 F6 | 	mov	_var01, arg01
2f064     0A 13 02 F6 | 	mov	arg01, arg02
2f068     1A 12 06 F1 | 	add	arg01, #26
2f06c                 | ' {
2f06c                 | ' 
2f06c                 | ' 	return *((WORD*)ptr);
2f06c     09 FB E1 FA | 	rdword	result1, arg01
2f070     FD 12 32 F9 | 	getword	arg01, result1, #0
2f074     00 01 C2 FA | 	rdbyte	_var01, _var01
2f078     03 00 0E F2 | 	cmp	_var01, #3 wz
2f07c     14 14 06 A1 |  if_e	add	arg02, #20
2f080                 | ' {
2f080                 | ' 
2f080                 | ' 	return *((WORD*)ptr);
2f080     0A FB E1 AA |  if_e	rdword	result1, arg02
2f084     10 FA 65 A0 |  if_e	shl	result1, #16
2f088     FD 12 42 A5 |  if_e	or	arg01, result1
2f08c                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2f08c                 | ' 	}
2f08c                 | ' 
2f08c                 | ' 	return cl;
2f08c     09 FB 01 F6 | 	mov	result1, arg01
2f090                 | _fatfs_cc_ld_clust_ret
2f090     2D 00 64 FD | 	ret
2f094                 | 
2f094                 | _fatfs_cc_st_clust
2f094     09 01 02 F6 | 	mov	_var01, arg01
2f098     0A 13 02 F6 | 	mov	arg01, arg02
2f09c     1A 12 06 F1 | 	add	arg01, #26
2f0a0     09 17 52 FC | 	wrword	arg03, arg01
2f0a4     00 01 C2 FA | 	rdbyte	_var01, _var01
2f0a8     03 00 0E F2 | 	cmp	_var01, #3 wz
2f0ac     14 14 06 A1 |  if_e	add	arg02, #20
2f0b0     10 16 46 A0 |  if_e	shr	arg03, #16
2f0b4     0A 17 52 AC |  if_e	wrword	arg03, arg02
2f0b8                 | _fatfs_cc_st_clust_ret
2f0b8     2D 00 64 FD | 	ret
2f0bc                 | 
2f0bc                 | _fatfs_cc_cmp_lfn
2f0bc     07 4A 05 F6 | 	mov	COUNT_, #7
2f0c0     A8 00 A0 FD | 	call	#pushregs_
2f0c4     09 27 02 F6 | 	mov	local01, arg01
2f0c8     0A 13 02 F6 | 	mov	arg01, arg02
2f0cc     1A 12 06 F1 | 	add	arg01, #26
2f0d0                 | ' {
2f0d0                 | ' 
2f0d0                 | ' 	return *((WORD*)ptr);
2f0d0     09 FB E9 FA | 	rdword	result1, arg01 wz
2f0d4     00 FA 05 56 |  if_ne	mov	result1, #0
2f0d8     E0 00 90 5D |  if_ne	jmp	#LR__4586
2f0dc     0A 29 C2 FA | 	rdbyte	local02, arg02
2f0e0     3F 28 06 F5 | 	and	local02, #63
2f0e4     01 28 86 F1 | 	sub	local02, #1
2f0e8     0D 28 06 FD | 	qmul	local02, #13
2f0ec                 | ' 
2f0ec                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2f0ec                 | ' 
2f0ec                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2f0ec     01 2A 06 F6 | 	mov	local03, #1
2f0f0     00 2C 06 F6 | 	mov	local04, #0
2f0f4     18 2E 62 FD | 	getqx	local05
2f0f8                 | LR__4580
2f0f8     0D 2C 16 F2 | 	cmp	local04, #13 wc
2f0fc     9C 00 90 3D |  if_ae	jmp	#LR__4585
2f100     0A 13 02 F6 | 	mov	arg01, arg02
2f104     16 29 02 F6 | 	mov	local02, local04
2f108     01 00 00 FF 
2f10c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2f110     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2f114     14 29 C2 FA | 	rdbyte	local02, local02
2f118     01 28 06 FA | 	mul	local02, #1
2f11c     14 13 02 F1 | 	add	arg01, local02
2f120     01 00 00 FF 
2f124     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2f128                 | ' {
2f128                 | ' 
2f128                 | ' 	return *((WORD*)ptr);
2f128     09 FB E1 FA | 	rdword	result1, arg01
2f12c     FD 30 02 F6 | 	mov	local06, result1
2f130     15 29 02 F6 | 	mov	local02, local03
2f134     0F 28 4E F7 | 	zerox	local02, #15 wz
2f138     44 00 90 AD |  if_e	jmp	#LR__4583
2f13c     00 2F 16 F2 | 	cmp	local05, #256 wc
2f140     2C 00 90 3D |  if_ae	jmp	#LR__4581
2f144     18 13 32 F9 | 	getword	arg01, local06, #0
2f148     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2f14c     FD 28 02 F6 | 	mov	local02, result1
2f150     17 2B 02 F6 | 	mov	local03, local05
2f154     01 2A 66 F0 | 	shl	local03, #1
2f158     13 2B 02 F1 | 	add	local03, local01
2f15c     15 13 E2 FA | 	rdword	arg01, local03
2f160     01 2E 06 F1 | 	add	local05, #1
2f164     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2f168     FD 28 0A F2 | 	cmp	local02, result1 wz
2f16c     08 00 90 AD |  if_e	jmp	#LR__4582
2f170                 | LR__4581
2f170                 | ' 				return 0;
2f170     00 FA 05 F6 | 	mov	result1, #0
2f174     44 00 90 FD | 	jmp	#LR__4586
2f178                 | LR__4582
2f178     18 2B 02 F6 | 	mov	local03, local06
2f17c     14 00 90 FD | 	jmp	#LR__4584
2f180                 | LR__4583
2f180     18 31 32 F9 | 	getword	local06, local06, #0
2f184     7F 00 00 FF 
2f188     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2f18c     00 FA 05 56 |  if_ne	mov	result1, #0
2f190     28 00 90 5D |  if_ne	jmp	#LR__4586
2f194                 | LR__4584
2f194     01 2C 06 F1 | 	add	local04, #1
2f198     5C FF 9F FD | 	jmp	#LR__4580
2f19c                 | LR__4585
2f19c     0A 29 C2 FA | 	rdbyte	local02, arg02
2f1a0     40 28 CE F7 | 	test	local02, #64 wz
2f1a4     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2f1a8     01 2E 66 50 |  if_ne	shl	local05, #1
2f1ac     13 2F 02 51 |  if_ne	add	local05, local01
2f1b0     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2f1b4     00 FA 05 56 |  if_ne	mov	result1, #0
2f1b8                 | ' 
2f1b8                 | ' 	return 1;
2f1b8     01 FA 05 A6 |  if_e	mov	result1, #1
2f1bc                 | LR__4586
2f1bc     A7 F0 03 F6 | 	mov	ptra, fp
2f1c0     B2 00 A0 FD | 	call	#popregs_
2f1c4                 | _fatfs_cc_cmp_lfn_ret
2f1c4     2D 00 64 FD | 	ret
2f1c8                 | 
2f1c8                 | _fatfs_cc_pick_lfn
2f1c8     09 01 02 F6 | 	mov	_var01, arg01
2f1cc     0A 13 02 F6 | 	mov	arg01, arg02
2f1d0     1A 12 06 F1 | 	add	arg01, #26
2f1d4                 | ' {
2f1d4                 | ' 
2f1d4                 | ' 	return *((WORD*)ptr);
2f1d4     09 FB E9 FA | 	rdword	result1, arg01 wz
2f1d8     00 FA 05 56 |  if_ne	mov	result1, #0
2f1dc     D4 00 90 5D |  if_ne	jmp	#LR__4595
2f1e0     0A 03 C2 FA | 	rdbyte	_var02, arg02
2f1e4     40 02 26 F5 | 	andn	_var02, #64
2f1e8     01 02 86 F1 | 	sub	_var02, #1
2f1ec     0D 02 06 FD | 	qmul	_var02, #13
2f1f0                 | ' 
2f1f0                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2f1f0                 | ' 
2f1f0                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2f1f0     01 04 06 F6 | 	mov	_var03, #1
2f1f4     00 06 06 F6 | 	mov	_var04, #0
2f1f8     18 08 62 FD | 	getqx	_var05
2f1fc                 | LR__4590
2f1fc     0D 06 16 F2 | 	cmp	_var04, #13 wc
2f200     80 00 90 3D |  if_ae	jmp	#LR__4593
2f204     0A 13 02 F6 | 	mov	arg01, arg02
2f208     03 03 02 F6 | 	mov	_var02, _var04
2f20c     01 00 00 FF 
2f210     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2f214     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2f218     01 03 C2 FA | 	rdbyte	_var02, _var02
2f21c     01 02 06 FA | 	mul	_var02, #1
2f220     01 13 02 F1 | 	add	arg01, _var02
2f224     01 00 00 FF 
2f228     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2f22c                 | ' {
2f22c                 | ' 
2f22c                 | ' 	return *((WORD*)ptr);
2f22c     09 FB E1 FA | 	rdword	result1, arg01
2f230     FD 0A 02 F6 | 	mov	_var06, result1
2f234     02 03 02 F6 | 	mov	_var02, _var03
2f238     0F 02 4E F7 | 	zerox	_var02, #15 wz
2f23c     28 00 90 AD |  if_e	jmp	#LR__4591
2f240     00 09 16 F2 | 	cmp	_var05, #256 wc
2f244     00 FA 05 36 |  if_ae	mov	result1, #0
2f248     68 00 90 3D |  if_ae	jmp	#LR__4595
2f24c     04 03 02 F6 | 	mov	_var02, _var05
2f250     01 02 66 F0 | 	shl	_var02, #1
2f254     00 03 02 F1 | 	add	_var02, _var01
2f258     05 05 02 F6 | 	mov	_var03, _var06
2f25c     01 05 52 FC | 	wrword	_var03, _var02
2f260     01 08 06 F1 | 	add	_var05, #1
2f264     14 00 90 FD | 	jmp	#LR__4592
2f268                 | LR__4591
2f268     05 0B 32 F9 | 	getword	_var06, _var06, #0
2f26c     7F 00 00 FF 
2f270     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2f274     00 FA 05 56 |  if_ne	mov	result1, #0
2f278     38 00 90 5D |  if_ne	jmp	#LR__4595
2f27c                 | LR__4592
2f27c     01 06 06 F1 | 	add	_var04, #1
2f280     78 FF 9F FD | 	jmp	#LR__4590
2f284                 | LR__4593
2f284     0A 03 C2 FA | 	rdbyte	_var02, arg02
2f288     40 02 CE F7 | 	test	_var02, #64 wz
2f28c     02 0D 02 56 |  if_ne	mov	_var07, _var03
2f290     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2f294     18 00 90 AD |  if_e	jmp	#LR__4594
2f298     00 09 16 F2 | 	cmp	_var05, #256 wc
2f29c     00 FA 05 36 |  if_ae	mov	result1, #0
2f2a0     10 00 90 3D |  if_ae	jmp	#LR__4595
2f2a4     01 08 66 F0 | 	shl	_var05, #1
2f2a8     00 09 02 F1 | 	add	_var05, _var01
2f2ac     04 01 58 FC | 	wrword	#0, _var05
2f2b0                 | LR__4594
2f2b0                 | ' 		lfnbuf[i] = 0;
2f2b0                 | ' 	}
2f2b0                 | ' 
2f2b0                 | ' 	return 1;
2f2b0     01 FA 05 F6 | 	mov	result1, #1
2f2b4                 | LR__4595
2f2b4                 | _fatfs_cc_pick_lfn_ret
2f2b4     2D 00 64 FD | 	ret
2f2b8                 | 
2f2b8                 | _fatfs_cc_put_lfn
2f2b8     0D 14 06 F1 | 	add	arg02, #13
2f2bc     0A 19 42 FC | 	wrbyte	arg04, arg02
2f2c0     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2f2c4     01 18 86 F1 | 	sub	arg04, #1
2f2c8     0D 18 06 FD | 	qmul	arg04, #13
2f2cc     09 01 02 F6 | 	mov	_var01, arg01
2f2d0     02 14 86 F1 | 	sub	arg02, #2
2f2d4     0A 1F 48 FC | 	wrbyte	#15, arg02
2f2d8     01 14 06 F1 | 	add	arg02, #1
2f2dc     0A 01 48 FC | 	wrbyte	#0, arg02
2f2e0     0C 14 86 F1 | 	sub	arg02, #12
2f2e4     0A 13 02 F6 | 	mov	arg01, arg02
2f2e8     1A 12 06 F1 | 	add	arg01, #26
2f2ec     09 01 58 FC | 	wrword	#0, arg01
2f2f0     00 02 06 F6 | 	mov	_var02, #0
2f2f4     00 04 06 F6 | 	mov	_var03, #0
2f2f8                 | ' 	BYTE* dir,
2f2f8                 | ' 	BYTE ord,
2f2f8                 | ' 	BYTE sum
2f2f8                 | ' )
2f2f8                 | ' {
2f2f8                 | ' 	UINT i, s;
2f2f8                 | ' 	WCHAR wc;
2f2f8                 | ' 
2f2f8                 | ' 
2f2f8                 | ' 	dir[ 13 ] = sum;
2f2f8                 | ' 	dir[ 11 ] =  0x0F ;
2f2f8                 | ' 	dir[ 12 ] = 0;
2f2f8                 | ' 	st_word(dir +  26 , 0);
2f2f8                 | ' 
2f2f8                 | ' 	i = (ord - 1) * 13;
2f2f8                 | ' 	s = wc = 0;
2f2f8                 | ' 	do {
2f2f8     01 00 00 FF 
2f2fc     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2f300     18 06 62 FD | 	getqx	_var04
2f304     97 2A 48 FB | 	callpa	#(@LR__4601-@LR__4600)>>2,fcache_load_ptr_
2f308                 | LR__4600
2f308     01 19 32 F9 | 	getword	arg04, _var02, #0
2f30c     7F 00 00 FF 
2f310     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2f314     03 13 02 56 |  if_ne	mov	arg01, _var04
2f318     01 06 06 51 |  if_ne	add	_var04, #1
2f31c     01 12 66 50 |  if_ne	shl	arg01, #1
2f320     00 13 02 51 |  if_ne	add	arg01, _var01
2f324     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2f328     0A 13 02 F6 | 	mov	arg01, arg02
2f32c     02 19 02 F6 | 	mov	arg04, _var03
2f330     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2f334     0C 19 C2 FA | 	rdbyte	arg04, arg04
2f338     01 18 06 FA | 	mul	arg04, #1
2f33c     0C 13 02 F1 | 	add	arg01, arg04
2f340     09 03 52 FC | 	wrword	_var02, arg01
2f344     01 19 02 F6 | 	mov	arg04, _var02
2f348     0F 18 4E F7 | 	zerox	arg04, #15 wz
2f34c     0F 02 CE A9 |  if_e	bmask	_var02, #15
2f350     01 04 06 F1 | 	add	_var03, #1
2f354     0D 04 16 F2 | 	cmp	_var03, #13 wc
2f358     AC FF 9F CD |  if_b	jmp	#LR__4600
2f35c                 | LR__4601
2f35c     01 00 00 FF 
2f360     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2f364     01 03 32 F9 | 	getword	_var02, _var02, #0
2f368     7F 00 00 FF 
2f36c     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2f370     01 06 66 50 |  if_ne	shl	_var04, #1
2f374     00 07 02 51 |  if_ne	add	_var04, _var01
2f378     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2f37c     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2f380     40 16 46 A5 |  if_e	or	arg03, #64
2f384     0A 17 42 FC | 	wrbyte	arg03, arg02
2f388                 | _fatfs_cc_put_lfn_ret
2f388     2D 00 64 FD | 	ret
2f38c                 | 
2f38c                 | _fatfs_cc_gen_numname
2f38c     08 4A 05 F6 | 	mov	COUNT_, #8
2f390     A8 00 A0 FD | 	call	#pushregs_
2f394     2C F0 07 F1 | 	add	ptra, #44
2f398     09 27 02 F6 | 	mov	local01, arg01
2f39c     0A 29 02 F6 | 	mov	local02, arg02
2f3a0     0B 2B 02 F6 | 	mov	local03, arg03
2f3a4     0C 2D 02 F6 | 	mov	local04, arg04
2f3a8     13 13 02 F6 | 	mov	arg01, local01
2f3ac     14 15 02 F6 | 	mov	arg02, local02
2f3b0     0B 16 06 F6 | 	mov	arg03, #11
2f3b4     9C 72 BF FD | 	call	#__system____builtin_memmove
2f3b8     06 2C 16 F2 | 	cmp	local04, #6 wc
2f3bc     48 00 90 CD |  if_b	jmp	#LR__4615
2f3c0     16 2F 02 F6 | 	mov	local05, local04
2f3c4     97 1E 48 FB | 	callpa	#(@LR__4613-@LR__4610)>>2,fcache_load_ptr_
2f3c8                 | ' 		sreg = seq;
2f3c8                 | ' 		while (*lfn) {
2f3c8                 | LR__4610
2f3c8     15 31 EA FA | 	rdword	local06, local03 wz
2f3cc     34 00 90 AD |  if_e	jmp	#LR__4614
2f3d0     15 33 E2 FA | 	rdword	local07, local03
2f3d4                 | ' 			wc = *lfn++;
2f3d4                 | ' 			for (i = 0; i < 16; i++) {
2f3d4     02 2A 06 F1 | 	add	local03, #2
2f3d8     10 12 DC FC | 	rep	@LR__4612, #16
2f3dc                 | LR__4611
2f3dc     01 2E 66 F0 | 	shl	local05, #1
2f3e0     19 31 32 F9 | 	getword	local06, local07, #0
2f3e4     01 30 06 F5 | 	and	local06, #1
2f3e8     18 2F 02 F1 | 	add	local05, local06
2f3ec     19 33 32 F9 | 	getword	local07, local07, #0
2f3f0     01 32 46 F0 | 	shr	local07, #1
2f3f4     10 2E 2E F4 | 	testbn	local05, #16 wz
2f3f8     88 00 00 5F 
2f3fc     21 2E 66 55 |  if_ne	xor	local05, ##69665
2f400                 | LR__4612
2f400     C4 FF 9F FD | 	jmp	#LR__4610
2f404                 | LR__4613
2f404                 | LR__4614
2f404     17 2D 02 F6 | 	mov	local04, local05
2f408                 | LR__4615
2f408     07 32 06 F6 | 	mov	local07, #7
2f40c                 | ' 			}
2f40c                 | ' 		}
2f40c                 | ' 		seq = (UINT)sreg;
2f40c                 | ' 	}
2f40c                 | ' 
2f40c                 | ' 
2f40c                 | ' 	i = 7;
2f40c                 | ' 	do {
2f40c     10 4E 05 F1 | 	add	fp, #16
2f410     97 1A 48 FB | 	callpa	#(@LR__4617-@LR__4616)>>2,fcache_load_ptr_
2f414                 | LR__4616
2f414     16 2F 42 F8 | 	getnib	local05, local04, #0
2f418     30 2E 06 F1 | 	add	local05, #48
2f41c     04 2C 46 F0 | 	shr	local04, #4
2f420     17 31 E2 F8 | 	getbyte	local06, local05, #0
2f424     3A 30 16 F2 | 	cmp	local06, #58 wc
2f428     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2f42c     07 2E 06 31 |  if_ae	add	local05, #7
2f430     19 31 02 F6 | 	mov	local06, local07
2f434     01 32 8E F1 | 	sub	local07, #1 wz
2f438     A7 30 02 F1 | 	add	local06, fp
2f43c     18 2F 42 FC | 	wrbyte	local05, local06
2f440     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2f444     CC FF 9F 5D |  if_ne	jmp	#LR__4616
2f448                 | LR__4617
2f448     19 31 02 F6 | 	mov	local06, local07
2f44c     A7 30 02 F1 | 	add	local06, fp
2f450     18 FD 48 FC | 	wrbyte	#126, local06
2f454                 | ' 	ns[i] = '~';
2f454                 | ' 
2f454                 | ' 
2f454                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2f454     00 2E 06 F6 | 	mov	local05, #0
2f458     10 4E 85 F1 | 	sub	fp, #16
2f45c     97 2A 48 FB | 	callpa	#(@LR__4620-@LR__4618)>>2,fcache_load_ptr_
2f460                 | LR__4618
2f460     19 2F 12 F2 | 	cmp	local05, local07 wc
2f464     4C 00 90 3D |  if_ae	jmp	#LR__4621
2f468     17 31 02 F6 | 	mov	local06, local05
2f46c     13 31 02 F1 | 	add	local06, local01
2f470     18 31 C2 FA | 	rdbyte	local06, local06
2f474     20 30 0E F2 | 	cmp	local06, #32 wz
2f478     38 00 90 AD |  if_e	jmp	#LR__4621
2f47c     17 13 02 F6 | 	mov	arg01, local05
2f480     13 13 02 F1 | 	add	arg01, local01
2f484     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2f488     00 FA 05 56 |  if_ne	mov	result1, #0
2f48c                 | ' 
2f48c                 | ' 	return 0;
2f48c     00 FA 05 A6 |  if_e	mov	result1, #0
2f490     00 FA 0D F2 | 	cmp	result1, #0 wz
2f494     14 00 90 AD |  if_e	jmp	#LR__4619
2f498     19 31 02 F6 | 	mov	local06, local07
2f49c     01 30 86 F1 | 	sub	local06, #1
2f4a0     18 2F 0A F2 | 	cmp	local05, local06 wz
2f4a4     0C 00 90 AD |  if_e	jmp	#LR__4621
2f4a8     01 2E 06 F1 | 	add	local05, #1
2f4ac                 | LR__4619
2f4ac     01 2E 06 F1 | 	add	local05, #1
2f4b0     AC FF 9F FD | 	jmp	#LR__4618
2f4b4                 | LR__4620
2f4b4                 | LR__4621
2f4b4     97 20 48 FB | 	callpa	#(@LR__4625-@LR__4622)>>2,fcache_load_ptr_
2f4b8                 | ' 			j++;
2f4b8                 | ' 		}
2f4b8                 | ' 	}
2f4b8                 | ' 	do {
2f4b8                 | LR__4622
2f4b8     17 31 02 F6 | 	mov	local06, local05
2f4bc     13 31 02 F1 | 	add	local06, local01
2f4c0     08 32 16 F2 | 	cmp	local07, #8 wc
2f4c4     01 2E 06 F1 | 	add	local05, #1
2f4c8     1C 00 90 3D |  if_ae	jmp	#LR__4623
2f4cc     19 2D 02 F6 | 	mov	local04, local07
2f4d0     10 4E 05 F1 | 	add	fp, #16
2f4d4     A7 2C 02 F1 | 	add	local04, fp
2f4d8     16 35 C2 FA | 	rdbyte	local08, local04
2f4dc     01 32 06 F1 | 	add	local07, #1
2f4e0     10 4E 85 F1 | 	sub	fp, #16
2f4e4     04 00 90 FD | 	jmp	#LR__4624
2f4e8                 | LR__4623
2f4e8     20 34 06 F6 | 	mov	local08, #32
2f4ec                 | LR__4624
2f4ec     18 35 42 FC | 	wrbyte	local08, local06
2f4f0     08 2E 16 F2 | 	cmp	local05, #8 wc
2f4f4     C0 FF 9F CD |  if_b	jmp	#LR__4622
2f4f8                 | LR__4625
2f4f8     A7 F0 03 F6 | 	mov	ptra, fp
2f4fc     B2 00 A0 FD | 	call	#popregs_
2f500                 | _fatfs_cc_gen_numname_ret
2f500     2D 00 64 FD | 	ret
2f504                 | 
2f504                 | _fatfs_cc_sum_sfn
2f504     00 00 06 F6 | 	mov	_var01, #0
2f508                 | ' )
2f508                 | ' {
2f508                 | ' 	BYTE sum = 0;
2f508                 | ' 	UINT n = 11;
2f508                 | ' 
2f508                 | ' 	do {
2f508     97 12 48 FB | 	callpa	#(@LR__4632-@LR__4630)>>2,fcache_load_ptr_
2f50c                 | LR__4630
2f50c     0B 10 DC FC | 	rep	@LR__4633, #11
2f510                 | LR__4631
2f510     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2f514     01 FA 45 F0 | 	shr	result1, #1
2f518     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2f51c     07 00 66 F0 | 	shl	_var01, #7
2f520     00 FB 01 F1 | 	add	result1, _var01
2f524     09 01 C2 FA | 	rdbyte	_var01, arg01
2f528     FD 00 02 F1 | 	add	_var01, result1
2f52c     01 12 06 F1 | 	add	arg01, #1
2f530                 | LR__4632
2f530                 | LR__4633
2f530                 | ' 	return sum;
2f530     00 FB 01 F6 | 	mov	result1, _var01
2f534                 | _fatfs_cc_sum_sfn_ret
2f534     2D 00 64 FD | 	ret
2f538                 | 
2f538                 | _fatfs_cc_dir_read
2f538     0C 4A 05 F6 | 	mov	COUNT_, #12
2f53c     A8 00 A0 FD | 	call	#pushregs_
2f540     09 27 02 F6 | 	mov	local01, arg01
2f544     0A 29 02 F6 | 	mov	local02, arg02
2f548     04 2A 06 F6 | 	mov	local03, #4
2f54c     13 2D 02 FB | 	rdlong	local04, local01
2f550     FF 2E 06 F6 | 	mov	local05, #255
2f554     FF 30 06 F6 | 	mov	local06, #255
2f558                 | ' )
2f558                 | ' {
2f558                 | ' 	FRESULT res = FR_NO_FILE;
2f558                 | ' 	FATFS *fs = dp->obj.fs;
2f558                 | ' 	BYTE attr, b;
2f558                 | ' 
2f558                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2f558                 | ' 
2f558                 | ' 
2f558                 | ' 	while (dp->sect) {
2f558                 | LR__4640
2f558     18 26 06 F1 | 	add	local01, #24
2f55c     13 FB 09 FB | 	rdlong	result1, local01 wz
2f560     18 26 86 F1 | 	sub	local01, #24
2f564     AC 01 90 AD |  if_e	jmp	#LR__4650
2f568     18 26 06 F1 | 	add	local01, #24
2f56c     13 15 02 FB | 	rdlong	arg02, local01
2f570     18 26 86 F1 | 	sub	local01, #24
2f574     16 13 02 F6 | 	mov	arg01, local04
2f578     AC ED BF FD | 	call	#_fatfs_cc_move_window
2f57c     FD 2A 0A F6 | 	mov	local03, result1 wz
2f580     90 01 90 5D |  if_ne	jmp	#LR__4650
2f584     1C 26 06 F1 | 	add	local01, #28
2f588     13 FB 01 FB | 	rdlong	result1, local01
2f58c     1C 26 86 F1 | 	sub	local01, #28
2f590     FD 32 C2 FA | 	rdbyte	local07, result1
2f594     19 FB 01 F6 | 	mov	result1, local07
2f598     07 FA 4D F7 | 	zerox	result1, #7 wz
2f59c     04 2A 06 A6 |  if_e	mov	local03, #4
2f5a0                 | ' 			res = FR_NO_FILE; break;
2f5a0     70 01 90 AD |  if_e	jmp	#LR__4650
2f5a4     1C 26 06 F1 | 	add	local01, #28
2f5a8     13 35 02 FB | 	rdlong	local08, local01
2f5ac     0B 34 06 F1 | 	add	local08, #11
2f5b0     1A 37 C2 FA | 	rdbyte	local09, local08
2f5b4     3F 36 06 F5 | 	and	local09, #63
2f5b8     16 26 86 F1 | 	sub	local01, #22
2f5bc     13 37 42 FC | 	wrbyte	local09, local01
2f5c0     06 26 86 F1 | 	sub	local01, #6
2f5c4     19 FB E1 F8 | 	getbyte	result1, local07, #0
2f5c8     E5 FA 0D F2 | 	cmp	result1, #229 wz
2f5cc     19 35 02 56 |  if_ne	mov	local08, local07
2f5d0     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2f5d4     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2f5d8     1C 00 90 AD |  if_e	jmp	#LR__4641
2f5dc     00 38 06 F6 | 	mov	local10, #0
2f5e0     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2f5e4     20 34 26 F5 | 	andn	local08, #32
2f5e8     08 34 0E F2 | 	cmp	local08, #8 wz
2f5ec     01 38 06 A6 |  if_e	mov	local10, #1
2f5f0     14 39 0A F2 | 	cmp	local10, local02 wz
2f5f4     08 00 90 AD |  if_e	jmp	#LR__4642
2f5f8                 | LR__4641
2f5f8     FF 2E 06 F6 | 	mov	local05, #255
2f5fc     00 01 90 FD | 	jmp	#LR__4649
2f600                 | LR__4642
2f600     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2f604     0F 36 0E F2 | 	cmp	local09, #15 wz
2f608     B4 00 90 5D |  if_ne	jmp	#LR__4646
2f60c     19 3B E2 F8 | 	getbyte	local11, local07, #0
2f610     40 3A CE F7 | 	test	local11, #64 wz
2f614     30 00 90 AD |  if_e	jmp	#LR__4643
2f618     1C 26 06 F1 | 	add	local01, #28
2f61c     13 3B 02 FB | 	rdlong	local11, local01
2f620     0D 3A 06 F1 | 	add	local11, #13
2f624     1D 31 C2 FA | 	rdbyte	local06, local11
2f628     19 33 E2 F8 | 	getbyte	local07, local07, #0
2f62c     BF 32 06 F5 | 	and	local07, #191
2f630     19 2F 02 F6 | 	mov	local05, local07
2f634     0C 26 86 F1 | 	sub	local01, #12
2f638     13 3B 02 FB | 	rdlong	local11, local01
2f63c     1C 26 06 F1 | 	add	local01, #28
2f640     13 3B 62 FC | 	wrlong	local11, local01
2f644     2C 26 86 F1 | 	sub	local01, #44
2f648                 | LR__4643
2f648     19 35 E2 F8 | 	getbyte	local08, local07, #0
2f64c     17 39 E2 F8 | 	getbyte	local10, local05, #0
2f650     1C 35 0A F2 | 	cmp	local08, local10 wz
2f654     5C 00 90 5D |  if_ne	jmp	#LR__4644
2f658     18 39 E2 F8 | 	getbyte	local10, local06, #0
2f65c     1C 26 06 F1 | 	add	local01, #28
2f660     13 37 02 FB | 	rdlong	local09, local01
2f664     1C 26 86 F1 | 	sub	local01, #28
2f668     0D 36 06 F1 | 	add	local09, #13
2f66c     1B 35 C2 FA | 	rdbyte	local08, local09
2f670     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2f674     1B 39 0A F2 | 	cmp	local10, local09 wz
2f678     38 00 90 5D |  if_ne	jmp	#LR__4644
2f67c     0C 2C 06 F1 | 	add	local04, #12
2f680     16 13 02 FB | 	rdlong	arg01, local04
2f684     0C 2C 86 F1 | 	sub	local04, #12
2f688     1C 26 06 F1 | 	add	local01, #28
2f68c     13 3D 02 FB | 	rdlong	local12, local01
2f690     1C 26 86 F1 | 	sub	local01, #28
2f694     1E 15 02 F6 | 	mov	arg02, local12
2f698     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2f69c     00 FA 4D F2 | 	cmps	result1, #0 wz
2f6a0     17 3D 02 56 |  if_ne	mov	local12, local05
2f6a4     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2f6a8     01 3C 86 51 |  if_ne	sub	local12, #1
2f6ac     1E 3B 02 56 |  if_ne	mov	local11, local12
2f6b0     04 00 90 5D |  if_ne	jmp	#LR__4645
2f6b4                 | LR__4644
2f6b4     FF 3A 06 F6 | 	mov	local11, #255
2f6b8                 | LR__4645
2f6b8     1D 2F 02 F6 | 	mov	local05, local11
2f6bc     40 00 90 FD | 	jmp	#LR__4648
2f6c0                 | LR__4646
2f6c0     17 3B 02 F6 | 	mov	local11, local05
2f6c4     07 3A 4E F7 | 	zerox	local11, #7 wz
2f6c8     20 00 90 5D |  if_ne	jmp	#LR__4647
2f6cc     18 31 E2 F8 | 	getbyte	local06, local06, #0
2f6d0     1C 26 06 F1 | 	add	local01, #28
2f6d4     13 13 02 FB | 	rdlong	arg01, local01
2f6d8     1C 26 86 F1 | 	sub	local01, #28
2f6dc     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2f6e0     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f6e4     FD 30 0A F2 | 	cmp	local06, result1 wz
2f6e8     28 00 90 AD |  if_e	jmp	#LR__4650
2f6ec                 | LR__4647
2f6ec     2C 26 06 F1 | 	add	local01, #44
2f6f0     FF FF FF FF 
2f6f4     13 FF 6B FC | 	wrlong	##-1, local01
2f6f8     2C 26 86 F1 | 	sub	local01, #44
2f6fc                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2f6fc                 | ' 					}
2f6fc                 | ' 					break;
2f6fc     14 00 90 FD | 	jmp	#LR__4650
2f700                 | LR__4648
2f700                 | LR__4649
2f700     13 13 02 F6 | 	mov	arg01, local01
2f704     00 14 06 F6 | 	mov	arg02, #0
2f708     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2f70c     FD 2A 0A F6 | 	mov	local03, result1 wz
2f710     44 FE 9F AD |  if_e	jmp	#LR__4640
2f714                 | LR__4650
2f714     00 2A 0E F2 | 	cmp	local03, #0 wz
2f718     18 26 06 51 |  if_ne	add	local01, #24
2f71c     13 01 68 5C |  if_ne	wrlong	#0, local01
2f720                 | ' 	return res;
2f720     15 FB 01 F6 | 	mov	result1, local03
2f724     A7 F0 03 F6 | 	mov	ptra, fp
2f728     B2 00 A0 FD | 	call	#popregs_
2f72c                 | _fatfs_cc_dir_read_ret
2f72c     2D 00 64 FD | 	ret
2f730                 | 
2f730                 | _fatfs_cc_dir_find
2f730     0B 4A 05 F6 | 	mov	COUNT_, #11
2f734     A8 00 A0 FD | 	call	#pushregs_
2f738     09 27 02 F6 | 	mov	local01, arg01
2f73c     13 29 02 FB | 	rdlong	local02, local01
2f740     13 13 02 F6 | 	mov	arg01, local01
2f744     00 14 06 F6 | 	mov	arg02, #0
2f748     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2f74c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f750     18 02 90 5D |  if_ne	jmp	#LR__4672
2f754     FF 2A 06 F6 | 	mov	local03, #255
2f758     FF 2C 06 F6 | 	mov	local04, #255
2f75c     2C 26 06 F1 | 	add	local01, #44
2f760     FF FF FF FF 
2f764     13 FF 6B FC | 	wrlong	##-1, local01
2f768     2C 26 86 F1 | 	sub	local01, #44
2f76c                 | ' #line 2404 "ff.c"
2f76c                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2f76c                 | ' 
2f76c                 | ' 	do {
2f76c                 | LR__4660
2f76c     18 26 06 F1 | 	add	local01, #24
2f770     13 15 02 FB | 	rdlong	arg02, local01
2f774     18 26 86 F1 | 	sub	local01, #24
2f778     14 13 02 F6 | 	mov	arg01, local02
2f77c     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2f780     FD 2E 0A F6 | 	mov	local05, result1 wz
2f784     E0 01 90 5D |  if_ne	jmp	#LR__4671
2f788     1C 26 06 F1 | 	add	local01, #28
2f78c     13 17 02 FB | 	rdlong	arg03, local01
2f790     1C 26 86 F1 | 	sub	local01, #28
2f794     0B 31 C2 FA | 	rdbyte	local06, arg03
2f798     18 17 02 F6 | 	mov	arg03, local06
2f79c     07 16 4E F7 | 	zerox	arg03, #7 wz
2f7a0     04 2E 06 A6 |  if_e	mov	local05, #4
2f7a4     C0 01 90 AD |  if_e	jmp	#LR__4671
2f7a8     1C 26 06 F1 | 	add	local01, #28
2f7ac     13 33 02 FB | 	rdlong	local07, local01
2f7b0     19 17 02 F6 | 	mov	arg03, local07
2f7b4     0B 16 06 F1 | 	add	arg03, #11
2f7b8     0B 35 C2 FA | 	rdbyte	local08, arg03
2f7bc     3F 34 06 F5 | 	and	local08, #63
2f7c0     16 26 86 F1 | 	sub	local01, #22
2f7c4     13 35 42 FC | 	wrbyte	local08, local01
2f7c8     06 26 86 F1 | 	sub	local01, #6
2f7cc     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2f7d0     E5 16 0E F2 | 	cmp	arg03, #229 wz
2f7d4     18 00 90 AD |  if_e	jmp	#LR__4661
2f7d8     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2f7dc     08 16 CE F7 | 	test	arg03, #8 wz
2f7e0     1A 33 02 56 |  if_ne	mov	local07, local08
2f7e4     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2f7e8     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2f7ec     18 00 90 AD |  if_e	jmp	#LR__4662
2f7f0                 | LR__4661
2f7f0     FF 2C 06 F6 | 	mov	local04, #255
2f7f4     2C 26 06 F1 | 	add	local01, #44
2f7f8     FF FF FF FF 
2f7fc     13 FF 6B FC | 	wrlong	##-1, local01
2f800     2C 26 86 F1 | 	sub	local01, #44
2f804     4C 01 90 FD | 	jmp	#LR__4670
2f808                 | LR__4662
2f808     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2f80c     0F 34 0E F2 | 	cmp	local08, #15 wz
2f810     C8 00 90 5D |  if_ne	jmp	#LR__4666
2f814     2B 26 06 F1 | 	add	local01, #43
2f818     13 35 C2 FA | 	rdbyte	local08, local01
2f81c     2B 26 86 F1 | 	sub	local01, #43
2f820     40 34 CE F7 | 	test	local08, #64 wz
2f824     2C 01 90 5D |  if_ne	jmp	#LR__4669
2f828     18 37 E2 F8 | 	getbyte	local09, local06, #0
2f82c     40 36 CE F7 | 	test	local09, #64 wz
2f830     30 00 90 AD |  if_e	jmp	#LR__4663
2f834     1C 26 06 F1 | 	add	local01, #28
2f838     13 37 02 FB | 	rdlong	local09, local01
2f83c     0D 36 06 F1 | 	add	local09, #13
2f840     1B 2B C2 FA | 	rdbyte	local03, local09
2f844     18 31 E2 F8 | 	getbyte	local06, local06, #0
2f848     BF 30 06 F5 | 	and	local06, #191
2f84c     18 2D 02 F6 | 	mov	local04, local06
2f850     0C 26 86 F1 | 	sub	local01, #12
2f854     13 37 02 FB | 	rdlong	local09, local01
2f858     1C 26 06 F1 | 	add	local01, #28
2f85c     13 37 62 FC | 	wrlong	local09, local01
2f860     2C 26 86 F1 | 	sub	local01, #44
2f864                 | LR__4663
2f864     18 39 E2 F8 | 	getbyte	local10, local06, #0
2f868     16 33 E2 F8 | 	getbyte	local07, local04, #0
2f86c     19 39 0A F2 | 	cmp	local10, local07 wz
2f870     5C 00 90 5D |  if_ne	jmp	#LR__4664
2f874     15 35 E2 F8 | 	getbyte	local08, local03, #0
2f878     1C 26 06 F1 | 	add	local01, #28
2f87c     13 33 02 FB | 	rdlong	local07, local01
2f880     1C 26 86 F1 | 	sub	local01, #28
2f884     0D 32 06 F1 | 	add	local07, #13
2f888     19 31 C2 FA | 	rdbyte	local06, local07
2f88c     18 33 E2 F8 | 	getbyte	local07, local06, #0
2f890     19 35 0A F2 | 	cmp	local08, local07 wz
2f894     38 00 90 5D |  if_ne	jmp	#LR__4664
2f898     0C 28 06 F1 | 	add	local02, #12
2f89c     14 13 02 FB | 	rdlong	arg01, local02
2f8a0     0C 28 86 F1 | 	sub	local02, #12
2f8a4     1C 26 06 F1 | 	add	local01, #28
2f8a8     13 3B 02 FB | 	rdlong	local11, local01
2f8ac     1C 26 86 F1 | 	sub	local01, #28
2f8b0     1D 15 02 F6 | 	mov	arg02, local11
2f8b4     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2f8b8     00 FA 4D F2 | 	cmps	result1, #0 wz
2f8bc     16 3B 02 56 |  if_ne	mov	local11, local04
2f8c0     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2f8c4     01 3A 86 51 |  if_ne	sub	local11, #1
2f8c8     1D 37 02 56 |  if_ne	mov	local09, local11
2f8cc     04 00 90 5D |  if_ne	jmp	#LR__4665
2f8d0                 | LR__4664
2f8d0     FF 36 06 F6 | 	mov	local09, #255
2f8d4                 | LR__4665
2f8d4     1B 2D 02 F6 | 	mov	local04, local09
2f8d8     78 00 90 FD | 	jmp	#LR__4669
2f8dc                 | LR__4666
2f8dc     16 37 02 F6 | 	mov	local09, local04
2f8e0     07 36 4E F7 | 	zerox	local09, #7 wz
2f8e4     20 00 90 5D |  if_ne	jmp	#LR__4667
2f8e8     15 39 E2 F8 | 	getbyte	local10, local03, #0
2f8ec     1C 26 06 F1 | 	add	local01, #28
2f8f0     13 13 02 FB | 	rdlong	arg01, local01
2f8f4     1C 26 86 F1 | 	sub	local01, #28
2f8f8     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2f8fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f900     FD 38 0A F2 | 	cmp	local10, result1 wz
2f904     60 00 90 AD |  if_e	jmp	#LR__4671
2f908                 | LR__4667
2f908     2B 26 06 F1 | 	add	local01, #43
2f90c     13 37 C2 FA | 	rdbyte	local09, local01
2f910     2B 26 86 F1 | 	sub	local01, #43
2f914     01 36 CE F7 | 	test	local09, #1 wz
2f918     24 00 90 5D |  if_ne	jmp	#LR__4668
2f91c     1C 26 06 F1 | 	add	local01, #28
2f920     13 13 02 FB | 	rdlong	arg01, local01
2f924     04 26 06 F1 | 	add	local01, #4
2f928     13 15 02 F6 | 	mov	arg02, local01
2f92c     20 26 86 F1 | 	sub	local01, #32
2f930     0B 16 06 F6 | 	mov	arg03, #11
2f934     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2f938     00 FA 0D F2 | 	cmp	result1, #0 wz
2f93c     28 00 90 AD |  if_e	jmp	#LR__4671
2f940                 | LR__4668
2f940     FF 2C 06 F6 | 	mov	local04, #255
2f944     2C 26 06 F1 | 	add	local01, #44
2f948     FF FF FF FF 
2f94c     13 FF 6B FC | 	wrlong	##-1, local01
2f950     2C 26 86 F1 | 	sub	local01, #44
2f954                 | LR__4669
2f954                 | LR__4670
2f954     13 13 02 F6 | 	mov	arg01, local01
2f958     00 14 06 F6 | 	mov	arg02, #0
2f95c     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2f960     FD 2E 0A F6 | 	mov	local05, result1 wz
2f964     04 FE 9F AD |  if_e	jmp	#LR__4660
2f968                 | LR__4671
2f968                 | ' 
2f968                 | ' 	return res;
2f968     17 FB 01 F6 | 	mov	result1, local05
2f96c                 | LR__4672
2f96c     A7 F0 03 F6 | 	mov	ptra, fp
2f970     B2 00 A0 FD | 	call	#popregs_
2f974                 | _fatfs_cc_dir_find_ret
2f974     2D 00 64 FD | 	ret
2f978                 | 
2f978                 | _fatfs_cc_dir_register
2f978     0A 4A 05 F6 | 	mov	COUNT_, #10
2f97c     A8 00 A0 FD | 	call	#pushregs_
2f980     2C F0 07 F1 | 	add	ptra, #44
2f984     04 4E 05 F1 | 	add	fp, #4
2f988     A7 12 62 FC | 	wrlong	arg01, fp
2f98c     09 27 02 FB | 	rdlong	local01, arg01
2f990     08 4E 05 F1 | 	add	fp, #8
2f994     A7 26 62 FC | 	wrlong	local01, fp
2f998     08 4E 85 F1 | 	sub	fp, #8
2f99c     A7 28 02 FB | 	rdlong	local02, fp
2f9a0     04 4E 85 F1 | 	sub	fp, #4
2f9a4     2B 28 06 F1 | 	add	local02, #43
2f9a8     14 29 C2 FA | 	rdbyte	local02, local02
2f9ac     A0 28 CE F7 | 	test	local02, #160 wz
2f9b0     06 FA 05 56 |  if_ne	mov	result1, #6
2f9b4     F8 03 90 5D |  if_ne	jmp	#LR__4695
2f9b8                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2f9b8     14 4E 05 F1 | 	add	fp, #20
2f9bc     A7 00 68 FC | 	wrlong	#0, fp
2f9c0     14 4E 85 F1 | 	sub	fp, #20
2f9c4     97 28 48 FB | 	callpa	#(@LR__4681-@LR__4680)>>2,fcache_load_ptr_
2f9c8                 | LR__4680
2f9c8     0C 4E 05 F1 | 	add	fp, #12
2f9cc     A7 28 02 FB | 	rdlong	local02, fp
2f9d0     0C 28 06 F1 | 	add	local02, #12
2f9d4     14 2B 02 FB | 	rdlong	local03, local02
2f9d8     08 4E 05 F1 | 	add	fp, #8
2f9dc     A7 2C 02 FB | 	rdlong	local04, fp
2f9e0     14 4E 85 F1 | 	sub	fp, #20
2f9e4     01 2C 66 F0 | 	shl	local04, #1
2f9e8     15 2D 02 F1 | 	add	local04, local03
2f9ec     16 29 EA FA | 	rdword	local02, local04 wz
2f9f0     24 00 90 AD |  if_e	jmp	#LR__4682
2f9f4     14 4E 05 F1 | 	add	fp, #20
2f9f8     A7 2E 02 FB | 	rdlong	local05, fp
2f9fc     17 31 02 F6 | 	mov	local06, local05
2fa00     17 33 02 F6 | 	mov	local07, local05
2fa04     19 35 02 F6 | 	mov	local08, local07
2fa08     01 34 06 F1 | 	add	local08, #1
2fa0c     A7 34 62 FC | 	wrlong	local08, fp
2fa10     14 4E 85 F1 | 	sub	fp, #20
2fa14     B0 FF 9F FD | 	jmp	#LR__4680
2fa18                 | LR__4681
2fa18                 | LR__4682
2fa18     1C 4E 05 F1 | 	add	fp, #28
2fa1c     A7 12 02 F6 | 	mov	arg01, fp
2fa20     18 4E 85 F1 | 	sub	fp, #24
2fa24     A7 14 02 FB | 	rdlong	arg02, fp
2fa28     04 4E 85 F1 | 	sub	fp, #4
2fa2c     20 14 06 F1 | 	add	arg02, #32
2fa30     0C 16 06 F6 | 	mov	arg03, #12
2fa34     1C 6C BF FD | 	call	#__system____builtin_memmove
2fa38     27 4E 05 F1 | 	add	fp, #39
2fa3c     A7 36 C2 FA | 	rdbyte	local09, fp
2fa40     27 4E 85 F1 | 	sub	fp, #39
2fa44     01 36 CE F7 | 	test	local09, #1 wz
2fa48     F4 00 90 AD |  if_e	jmp	#LR__4685
2fa4c     04 4E 05 F1 | 	add	fp, #4
2fa50     A7 38 02 FB | 	rdlong	local10, fp
2fa54     2B 38 06 F1 | 	add	local10, #43
2fa58     1C 81 48 FC | 	wrbyte	#64, local10
2fa5c                 | ' 		dp->fn[ 11 ] =  0x40 ;
2fa5c                 | ' 		for (n = 1; n < 100; n++) {
2fa5c     0C 4E 05 F1 | 	add	fp, #12
2fa60     A7 02 68 FC | 	wrlong	#1, fp
2fa64     10 4E 85 F1 | 	sub	fp, #16
2fa68                 | LR__4683
2fa68     10 4E 05 F1 | 	add	fp, #16
2fa6c     A7 28 02 FB | 	rdlong	local02, fp
2fa70     10 4E 85 F1 | 	sub	fp, #16
2fa74     64 28 16 F2 | 	cmp	local02, #100 wc
2fa78     70 00 90 3D |  if_ae	jmp	#LR__4684
2fa7c     04 4E 05 F1 | 	add	fp, #4
2fa80     A7 12 02 FB | 	rdlong	arg01, fp
2fa84     20 12 06 F1 | 	add	arg01, #32
2fa88     18 4E 05 F1 | 	add	fp, #24
2fa8c     A7 14 02 F6 | 	mov	arg02, fp
2fa90     10 4E 85 F1 | 	sub	fp, #16
2fa94     A7 38 02 FB | 	rdlong	local10, fp
2fa98     0C 38 06 F1 | 	add	local10, #12
2fa9c     1C 17 02 FB | 	rdlong	arg03, local10
2faa0     04 4E 05 F1 | 	add	fp, #4
2faa4     A7 18 02 FB | 	rdlong	arg04, fp
2faa8     10 4E 85 F1 | 	sub	fp, #16
2faac     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2fab0     04 4E 05 F1 | 	add	fp, #4
2fab4     A7 12 02 FB | 	rdlong	arg01, fp
2fab8     04 4E 85 F1 | 	sub	fp, #4
2fabc     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2fac0     08 4E 05 F1 | 	add	fp, #8
2fac4     A7 FA 61 FC | 	wrlong	result1, fp
2fac8     00 FA 4D F2 | 	cmps	result1, #0 wz
2facc     08 4E 85 F1 | 	sub	fp, #8
2fad0     18 00 90 5D |  if_ne	jmp	#LR__4684
2fad4     10 4E 05 F1 | 	add	fp, #16
2fad8     A7 38 02 FB | 	rdlong	local10, fp
2fadc     01 38 06 F1 | 	add	local10, #1
2fae0     A7 38 62 FC | 	wrlong	local10, fp
2fae4     10 4E 85 F1 | 	sub	fp, #16
2fae8     7C FF 9F FD | 	jmp	#LR__4683
2faec                 | LR__4684
2faec     10 4E 05 F1 | 	add	fp, #16
2faf0     A7 38 02 FB | 	rdlong	local10, fp
2faf4     10 4E 85 F1 | 	sub	fp, #16
2faf8     64 38 0E F2 | 	cmp	local10, #100 wz
2fafc     07 FA 05 A6 |  if_e	mov	result1, #7
2fb00     AC 02 90 AD |  if_e	jmp	#LR__4695
2fb04     08 4E 05 F1 | 	add	fp, #8
2fb08     A7 38 02 FB | 	rdlong	local10, fp
2fb0c     08 4E 85 F1 | 	sub	fp, #8
2fb10     04 38 0E F2 | 	cmp	local10, #4 wz
2fb14     08 4E 05 51 |  if_ne	add	fp, #8
2fb18     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2fb1c     08 4E 85 51 |  if_ne	sub	fp, #8
2fb20     8C 02 90 5D |  if_ne	jmp	#LR__4695
2fb24     04 4E 05 F1 | 	add	fp, #4
2fb28     A7 38 02 FB | 	rdlong	local10, fp
2fb2c     23 4E 05 F1 | 	add	fp, #35
2fb30     A7 26 C2 FA | 	rdbyte	local01, fp
2fb34     27 4E 85 F1 | 	sub	fp, #39
2fb38     2B 38 06 F1 | 	add	local10, #43
2fb3c     1C 27 42 FC | 	wrbyte	local01, local10
2fb40                 | LR__4685
2fb40     27 4E 05 F1 | 	add	fp, #39
2fb44     A7 28 C2 FA | 	rdbyte	local02, fp
2fb48     27 4E 85 F1 | 	sub	fp, #39
2fb4c     02 28 CE F7 | 	test	local02, #2 wz
2fb50     20 00 90 AD |  if_e	jmp	#LR__4686
2fb54     14 4E 05 F1 | 	add	fp, #20
2fb58     A7 38 02 FB | 	rdlong	local10, fp
2fb5c     0C 38 06 F1 | 	add	local10, #12
2fb60     0D 38 16 FD | 	qdiv	local10, #13
2fb64     14 4E 85 F1 | 	sub	fp, #20
2fb68     18 38 62 FD | 	getqx	local10
2fb6c     01 38 06 F1 | 	add	local10, #1
2fb70     04 00 90 FD | 	jmp	#LR__4687
2fb74                 | LR__4686
2fb74     01 38 06 F6 | 	mov	local10, #1
2fb78                 | LR__4687
2fb78     18 4E 05 F1 | 	add	fp, #24
2fb7c     A7 38 62 FC | 	wrlong	local10, fp
2fb80     14 4E 85 F1 | 	sub	fp, #20
2fb84     A7 12 02 FB | 	rdlong	arg01, fp
2fb88     1C 15 02 F6 | 	mov	arg02, local10
2fb8c     04 4E 85 F1 | 	sub	fp, #4
2fb90     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2fb94     08 4E 05 F1 | 	add	fp, #8
2fb98     A7 FA 61 FC | 	wrlong	result1, fp
2fb9c     08 4E 85 F1 | 	sub	fp, #8
2fba0     00 FA 0D F2 | 	cmp	result1, #0 wz
2fba4     38 01 90 5D |  if_ne	jmp	#LR__4692
2fba8     18 4E 05 F1 | 	add	fp, #24
2fbac     A7 38 02 FB | 	rdlong	local10, fp
2fbb0     01 38 8E F1 | 	sub	local10, #1 wz
2fbb4     A7 38 62 FC | 	wrlong	local10, fp
2fbb8     18 4E 85 F1 | 	sub	fp, #24
2fbbc     20 01 90 AD |  if_e	jmp	#LR__4692
2fbc0     04 4E 05 F1 | 	add	fp, #4
2fbc4     A7 38 02 FB | 	rdlong	local10, fp
2fbc8     1C 13 02 F6 | 	mov	arg01, local10
2fbcc     14 4E 05 F1 | 	add	fp, #20
2fbd0     A7 18 02 FB | 	rdlong	arg04, fp
2fbd4     18 4E 85 F1 | 	sub	fp, #24
2fbd8     05 18 66 F0 | 	shl	arg04, #5
2fbdc     10 38 06 F1 | 	add	local10, #16
2fbe0     1C 15 02 FB | 	rdlong	arg02, local10
2fbe4     0C 15 82 F1 | 	sub	arg02, arg04
2fbe8     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2fbec     08 4E 05 F1 | 	add	fp, #8
2fbf0     A7 FA 61 FC | 	wrlong	result1, fp
2fbf4     08 4E 85 F1 | 	sub	fp, #8
2fbf8     00 FA 0D F2 | 	cmp	result1, #0 wz
2fbfc     E0 00 90 5D |  if_ne	jmp	#LR__4691
2fc00     04 4E 05 F1 | 	add	fp, #4
2fc04     A7 12 02 FB | 	rdlong	arg01, fp
2fc08     04 4E 85 F1 | 	sub	fp, #4
2fc0c     20 12 06 F1 | 	add	arg01, #32
2fc10     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2fc14     FD 38 02 F6 | 	mov	local10, result1
2fc18     28 4E 05 F1 | 	add	fp, #40
2fc1c     A7 38 42 FC | 	wrbyte	local10, fp
2fc20     28 4E 85 F1 | 	sub	fp, #40
2fc24                 | ' 			sum = sum_sfn(dp->fn);
2fc24                 | ' 			do {
2fc24                 | LR__4688
2fc24     0C 4E 05 F1 | 	add	fp, #12
2fc28     A7 12 02 FB | 	rdlong	arg01, fp
2fc2c     08 4E 85 F1 | 	sub	fp, #8
2fc30     A7 26 02 FB | 	rdlong	local01, fp
2fc34     04 4E 85 F1 | 	sub	fp, #4
2fc38     18 26 06 F1 | 	add	local01, #24
2fc3c     13 15 02 FB | 	rdlong	arg02, local01
2fc40     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2fc44     08 4E 05 F1 | 	add	fp, #8
2fc48     A7 FA 61 FC | 	wrlong	result1, fp
2fc4c     00 FA 4D F2 | 	cmps	result1, #0 wz
2fc50     08 4E 85 F1 | 	sub	fp, #8
2fc54     88 00 90 5D |  if_ne	jmp	#LR__4690
2fc58     0C 4E 05 F1 | 	add	fp, #12
2fc5c     A7 28 02 FB | 	rdlong	local02, fp
2fc60     0C 28 06 F1 | 	add	local02, #12
2fc64     14 13 02 FB | 	rdlong	arg01, local02
2fc68     08 4E 85 F1 | 	sub	fp, #8
2fc6c     A7 26 02 FB | 	rdlong	local01, fp
2fc70     1C 26 06 F1 | 	add	local01, #28
2fc74     13 15 02 FB | 	rdlong	arg02, local01
2fc78     14 4E 05 F1 | 	add	fp, #20
2fc7c     A7 16 02 FB | 	rdlong	arg03, fp
2fc80     10 4E 05 F1 | 	add	fp, #16
2fc84     A7 18 C2 FA | 	rdbyte	arg04, fp
2fc88     28 4E 85 F1 | 	sub	fp, #40
2fc8c     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2fc90     0C 4E 05 F1 | 	add	fp, #12
2fc94     A7 38 02 FB | 	rdlong	local10, fp
2fc98     03 38 06 F1 | 	add	local10, #3
2fc9c     1C 03 48 FC | 	wrbyte	#1, local10
2fca0     08 4E 85 F1 | 	sub	fp, #8
2fca4     A7 12 02 FB | 	rdlong	arg01, fp
2fca8     04 4E 85 F1 | 	sub	fp, #4
2fcac     00 14 06 F6 | 	mov	arg02, #0
2fcb0     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2fcb4     08 4E 05 F1 | 	add	fp, #8
2fcb8     A7 FA 61 FC | 	wrlong	result1, fp
2fcbc     00 FA 4D F2 | 	cmps	result1, #0 wz
2fcc0     08 4E 85 F1 | 	sub	fp, #8
2fcc4     18 00 90 5D |  if_ne	jmp	#LR__4689
2fcc8     18 4E 05 F1 | 	add	fp, #24
2fccc     A7 38 02 FB | 	rdlong	local10, fp
2fcd0     01 38 8E F1 | 	sub	local10, #1 wz
2fcd4     A7 38 62 FC | 	wrlong	local10, fp
2fcd8     18 4E 85 F1 | 	sub	fp, #24
2fcdc     44 FF 9F 5D |  if_ne	jmp	#LR__4688
2fce0                 | LR__4689
2fce0                 | LR__4690
2fce0                 | LR__4691
2fce0                 | LR__4692
2fce0     08 4E 05 F1 | 	add	fp, #8
2fce4     A7 38 0A FB | 	rdlong	local10, fp wz
2fce8     08 4E 85 F1 | 	sub	fp, #8
2fcec     B4 00 90 5D |  if_ne	jmp	#LR__4694
2fcf0     0C 4E 05 F1 | 	add	fp, #12
2fcf4     A7 12 02 FB | 	rdlong	arg01, fp
2fcf8     08 4E 85 F1 | 	sub	fp, #8
2fcfc     A7 26 02 FB | 	rdlong	local01, fp
2fd00     04 4E 85 F1 | 	sub	fp, #4
2fd04     18 26 06 F1 | 	add	local01, #24
2fd08     13 15 02 FB | 	rdlong	arg02, local01
2fd0c     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2fd10     08 4E 05 F1 | 	add	fp, #8
2fd14     A7 FA 61 FC | 	wrlong	result1, fp
2fd18     08 4E 85 F1 | 	sub	fp, #8
2fd1c     00 FA 0D F2 | 	cmp	result1, #0 wz
2fd20     80 00 90 5D |  if_ne	jmp	#LR__4693
2fd24     04 4E 05 F1 | 	add	fp, #4
2fd28     A7 28 02 FB | 	rdlong	local02, fp
2fd2c     04 4E 85 F1 | 	sub	fp, #4
2fd30     1C 28 06 F1 | 	add	local02, #28
2fd34     14 13 02 FB | 	rdlong	arg01, local02
2fd38     00 14 06 F6 | 	mov	arg02, #0
2fd3c     20 16 06 F6 | 	mov	arg03, #32
2fd40     98 00 A0 FD | 	call	#\builtin_bytefill_
2fd44     04 4E 05 F1 | 	add	fp, #4
2fd48     A7 14 02 FB | 	rdlong	arg02, fp
2fd4c     0A 27 02 F6 | 	mov	local01, arg02
2fd50     1C 26 06 F1 | 	add	local01, #28
2fd54     13 13 02 FB | 	rdlong	arg01, local01
2fd58     04 4E 85 F1 | 	sub	fp, #4
2fd5c     20 14 06 F1 | 	add	arg02, #32
2fd60     0B 16 06 F6 | 	mov	arg03, #11
2fd64     EC 68 BF FD | 	call	#__system____builtin_memmove
2fd68     04 4E 05 F1 | 	add	fp, #4
2fd6c     A7 36 02 FB | 	rdlong	local09, fp
2fd70     1B 39 02 F6 | 	mov	local10, local09
2fd74     1C 38 06 F1 | 	add	local10, #28
2fd78     1C 27 02 FB | 	rdlong	local01, local10
2fd7c     2B 36 06 F1 | 	add	local09, #43
2fd80     1B 39 C2 FA | 	rdbyte	local10, local09
2fd84     18 38 06 F5 | 	and	local10, #24
2fd88     0C 26 06 F1 | 	add	local01, #12
2fd8c     13 39 42 FC | 	wrbyte	local10, local01
2fd90     08 4E 05 F1 | 	add	fp, #8
2fd94     A7 38 02 FB | 	rdlong	local10, fp
2fd98     0C 4E 85 F1 | 	sub	fp, #12
2fd9c     03 38 06 F1 | 	add	local10, #3
2fda0     1C 03 48 FC | 	wrbyte	#1, local10
2fda4                 | LR__4693
2fda4                 | LR__4694
2fda4                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2fda4                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2fda4                 | ' 
2fda4                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2fda4                 | ' 
2fda4                 | ' 			fs->wflag = 1;
2fda4                 | ' 		}
2fda4                 | ' 	}
2fda4                 | ' 
2fda4                 | ' 	return res;
2fda4     08 4E 05 F1 | 	add	fp, #8
2fda8     A7 FA 01 FB | 	rdlong	result1, fp
2fdac     08 4E 85 F1 | 	sub	fp, #8
2fdb0                 | LR__4695
2fdb0     A7 F0 03 F6 | 	mov	ptra, fp
2fdb4     B2 00 A0 FD | 	call	#popregs_
2fdb8                 | _fatfs_cc_dir_register_ret
2fdb8     2D 00 64 FD | 	ret
2fdbc                 | 
2fdbc                 | _fatfs_cc_dir_remove
2fdbc     05 4A 05 F6 | 	mov	COUNT_, #5
2fdc0     A8 00 A0 FD | 	call	#pushregs_
2fdc4     09 27 02 F6 | 	mov	local01, arg01
2fdc8     13 29 02 FB | 	rdlong	local02, local01
2fdcc     10 26 06 F1 | 	add	local01, #16
2fdd0     13 2B 02 FB | 	rdlong	local03, local01
2fdd4     1C 26 06 F1 | 	add	local01, #28
2fdd8     13 15 02 FB | 	rdlong	arg02, local01
2fddc     2C 26 86 F1 | 	sub	local01, #44
2fde0     FF FF 7F FF 
2fde4     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2fde8     00 2C 06 A6 |  if_e	mov	local04, #0
2fdec     18 00 90 AD |  if_e	jmp	#LR__4700
2fdf0     13 13 02 F6 | 	mov	arg01, local01
2fdf4     2C 26 06 F1 | 	add	local01, #44
2fdf8     13 15 02 FB | 	rdlong	arg02, local01
2fdfc     2C 26 86 F1 | 	sub	local01, #44
2fe00     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2fe04     FD 2C 02 F6 | 	mov	local04, result1
2fe08                 | LR__4700
2fe08     16 2F 0A F6 | 	mov	local05, local04 wz
2fe0c     64 00 90 5D |  if_ne	jmp	#LR__4703
2fe10                 | ' 		do {
2fe10                 | LR__4701
2fe10     18 26 06 F1 | 	add	local01, #24
2fe14     13 15 02 FB | 	rdlong	arg02, local01
2fe18     18 26 86 F1 | 	sub	local01, #24
2fe1c     14 13 02 F6 | 	mov	arg01, local02
2fe20     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2fe24     FD 2E 0A F6 | 	mov	local05, result1 wz
2fe28     40 00 90 5D |  if_ne	jmp	#LR__4702
2fe2c     1C 26 06 F1 | 	add	local01, #28
2fe30     13 2D 02 FB | 	rdlong	local04, local01
2fe34     16 CB 49 FC | 	wrbyte	#229, local04
2fe38     03 28 06 F1 | 	add	local02, #3
2fe3c     14 03 48 FC | 	wrbyte	#1, local02
2fe40     03 28 86 F1 | 	sub	local02, #3
2fe44     0C 26 86 F1 | 	sub	local01, #12
2fe48     13 2D 02 FB | 	rdlong	local04, local01
2fe4c     10 26 86 F1 | 	sub	local01, #16
2fe50     15 2D 12 F2 | 	cmp	local04, local03 wc
2fe54     14 00 90 3D |  if_ae	jmp	#LR__4702
2fe58     13 13 02 F6 | 	mov	arg01, local01
2fe5c     00 14 06 F6 | 	mov	arg02, #0
2fe60     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2fe64     FD 2E 0A F6 | 	mov	local05, result1 wz
2fe68     A4 FF 9F AD |  if_e	jmp	#LR__4701
2fe6c                 | LR__4702
2fe6c     04 2E 0E F2 | 	cmp	local05, #4 wz
2fe70     02 2E 06 A6 |  if_e	mov	local05, #2
2fe74                 | LR__4703
2fe74                 | ' 	}
2fe74                 | ' #line 2590 "ff.c"
2fe74                 | ' 	return res;
2fe74     17 FB 01 F6 | 	mov	result1, local05
2fe78     A7 F0 03 F6 | 	mov	ptra, fp
2fe7c     B2 00 A0 FD | 	call	#popregs_
2fe80                 | _fatfs_cc_dir_remove_ret
2fe80     2D 00 64 FD | 	ret
2fe84                 | 
2fe84                 | _fatfs_cc_get_fileinfo
2fe84     0F 4A 05 F6 | 	mov	COUNT_, #15
2fe88     A8 00 A0 FD | 	call	#pushregs_
2fe8c     09 27 02 F6 | 	mov	local01, arg01
2fe90     0A 29 02 F6 | 	mov	local02, arg02
2fe94     13 2B 02 FB | 	rdlong	local03, local01
2fe98     1C 28 06 F1 | 	add	local02, #28
2fe9c     14 01 48 FC | 	wrbyte	#0, local02
2fea0     1C 28 86 F1 | 	sub	local02, #28
2fea4     18 26 06 F1 | 	add	local01, #24
2fea8     13 2D 0A FB | 	rdlong	local04, local01 wz
2feac     18 26 86 F1 | 	sub	local01, #24
2feb0     90 03 90 AD |  if_e	jmp	#LR__4724
2feb4     2C 26 06 F1 | 	add	local01, #44
2feb8     13 2D 02 FB | 	rdlong	local04, local01
2febc     2C 26 86 F1 | 	sub	local01, #44
2fec0     FF FF 7F FF 
2fec4     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2fec8     D8 00 90 AD |  if_e	jmp	#LR__4713
2fecc     00 2E 06 F6 | 	mov	local05, #0
2fed0     00 30 06 F6 | 	mov	local06, #0
2fed4     00 32 06 F6 | 	mov	local07, #0
2fed8                 | ' 			si = di = 0;
2fed8                 | ' 			hs = 0;
2fed8                 | ' 			while (fs->lfnbuf[si] != 0) {
2fed8                 | LR__4710
2fed8     0C 2A 06 F1 | 	add	local03, #12
2fedc     15 2D 02 FB | 	rdlong	local04, local03
2fee0     0C 2A 86 F1 | 	sub	local03, #12
2fee4     18 35 02 F6 | 	mov	local08, local06
2fee8     01 34 66 F0 | 	shl	local08, #1
2feec     16 35 02 F1 | 	add	local08, local04
2fef0     1A 2D EA FA | 	rdword	local04, local08 wz
2fef4     90 00 90 AD |  if_e	jmp	#LR__4712
2fef8     0C 2A 06 F1 | 	add	local03, #12
2fefc     15 37 02 FB | 	rdlong	local09, local03
2ff00     0C 2A 86 F1 | 	sub	local03, #12
2ff04     18 39 02 F6 | 	mov	local10, local06
2ff08     01 38 66 F0 | 	shl	local10, #1
2ff0c     1B 39 02 F1 | 	add	local10, local09
2ff10     1C 3B E2 FA | 	rdword	local11, local10
2ff14     19 2D 02 F6 | 	mov	local04, local07
2ff18     0F 2C 4E F7 | 	zerox	local04, #15 wz
2ff1c     01 30 06 F1 | 	add	local06, #1
2ff20     24 00 90 5D |  if_ne	jmp	#LR__4711
2ff24     1D 3D 32 F9 | 	getword	local12, local11, #0
2ff28     6C 00 00 FF 
2ff2c     00 3C 16 F2 | 	cmp	local12, ##55296 wc
2ff30     14 00 90 CD |  if_b	jmp	#LR__4711
2ff34     1D 3F 32 F9 | 	getword	local13, local11, #0
2ff38     70 00 00 FF 
2ff3c     00 3E 16 F2 | 	cmp	local13, ##57344 wc
2ff40     1D 33 02 C6 |  if_b	mov	local07, local11
2ff44                 | ' 					hs = wc; continue;
2ff44     90 FF 9F CD |  if_b	jmp	#LR__4710
2ff48                 | LR__4711
2ff48     19 13 32 F9 | 	getword	arg01, local07, #0
2ff4c     10 12 66 F0 | 	shl	arg01, #16
2ff50     1D 3B 32 F9 | 	getword	local11, local11, #0
2ff54     1D 13 42 F5 | 	or	arg01, local11
2ff58     17 15 02 F6 | 	mov	arg02, local05
2ff5c     1C 28 06 F1 | 	add	local02, #28
2ff60     14 15 02 F1 | 	add	arg02, local02
2ff64     FF 16 06 F6 | 	mov	arg03, #255
2ff68     17 17 82 F1 | 	sub	arg03, local05
2ff6c     1C 28 86 F1 | 	sub	local02, #28
2ff70     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2ff74     FD 40 0A F6 | 	mov	local14, result1 wz
2ff78     00 2E 06 A6 |  if_e	mov	local05, #0
2ff7c     20 2F 02 51 |  if_ne	add	local05, local14
2ff80     00 32 06 56 |  if_ne	mov	local07, #0
2ff84     50 FF 9F 5D |  if_ne	jmp	#LR__4710
2ff88                 | LR__4712
2ff88     19 2D 02 F6 | 	mov	local04, local07
2ff8c     0F 2C 4E F7 | 	zerox	local04, #15 wz
2ff90     00 2E 06 56 |  if_ne	mov	local05, #0
2ff94     1C 28 06 F1 | 	add	local02, #28
2ff98     14 2F 02 F1 | 	add	local05, local02
2ff9c     17 01 48 FC | 	wrbyte	#0, local05
2ffa0     1C 28 86 F1 | 	sub	local02, #28
2ffa4                 | LR__4713
2ffa4     00 2E 06 F6 | 	mov	local05, #0
2ffa8     00 30 06 F6 | 	mov	local06, #0
2ffac                 | ' 			fno->fname[di] = 0;
2ffac                 | ' 		}
2ffac                 | ' 	}
2ffac                 | ' 
2ffac                 | ' 	si = di = 0;
2ffac                 | ' 	while (si < 11) {
2ffac                 | LR__4714
2ffac     0B 30 16 F2 | 	cmp	local06, #11 wc
2ffb0     20 01 90 3D |  if_ae	jmp	#LR__4717
2ffb4     1C 26 06 F1 | 	add	local01, #28
2ffb8     13 37 02 FB | 	rdlong	local09, local01
2ffbc     1C 26 86 F1 | 	sub	local01, #28
2ffc0     18 39 02 F6 | 	mov	local10, local06
2ffc4     1B 39 02 F1 | 	add	local10, local09
2ffc8     1C 3B C2 FA | 	rdbyte	local11, local10
2ffcc     1D 2D 32 F9 | 	getword	local04, local11, #0
2ffd0     20 2C 0E F2 | 	cmp	local04, #32 wz
2ffd4     01 30 06 F1 | 	add	local06, #1
2ffd8     D0 FF 9F AD |  if_e	jmp	#LR__4714
2ffdc     1D 2D 32 F9 | 	getword	local04, local11, #0
2ffe0     05 2C 0E F2 | 	cmp	local04, #5 wz
2ffe4     E5 3A 06 A6 |  if_e	mov	local11, #229
2ffe8     09 30 0E F2 | 	cmp	local06, #9 wz
2ffec     20 00 90 5D |  if_ne	jmp	#LR__4715
2fff0     0C 2E 16 F2 | 	cmp	local05, #12 wc
2fff4     18 00 90 3D |  if_ae	jmp	#LR__4715
2fff8     17 3F 02 F6 | 	mov	local13, local05
2fffc     0C 28 06 F1 | 	add	local02, #12
30000     14 3F 02 F1 | 	add	local13, local02
30004     1F 5D 48 FC | 	wrbyte	#46, local13
30008     01 2E 06 F1 | 	add	local05, #1
3000c     0C 28 86 F1 | 	sub	local02, #12
30010                 | LR__4715
30010     1D 13 32 F9 | 	getword	arg01, local11, #0
30014     07 12 4E F7 | 	zerox	arg01, #7 wz
30018     00 FA 05 56 |  if_ne	mov	result1, #0
3001c                 | ' 
3001c                 | ' 	return 0;
3001c     00 FA 05 A6 |  if_e	mov	result1, #0
30020     00 FA 0D F2 | 	cmp	result1, #0 wz
30024     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
30028     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
3002c     50 00 90 AD |  if_e	jmp	#LR__4716
30030     1C 26 06 F1 | 	add	local01, #28
30034     13 39 02 FB | 	rdlong	local10, local01
30038     1C 26 86 F1 | 	sub	local01, #28
3003c     18 35 02 F6 | 	mov	local08, local06
30040     1C 35 02 F1 | 	add	local08, local10
30044     1A 13 CA FA | 	rdbyte	arg01, local08 wz
30048     00 FA 05 56 |  if_ne	mov	result1, #0
3004c                 | ' 
3004c                 | ' 	return 0;
3004c     00 FA 05 A6 |  if_e	mov	result1, #0
30050     00 FA 0D F2 | 	cmp	result1, #0 wz
30054     28 00 90 AD |  if_e	jmp	#LR__4716
30058     1D 3B 32 F9 | 	getword	local11, local11, #0
3005c     08 3A 66 F0 | 	shl	local11, #8
30060     1C 26 06 F1 | 	add	local01, #28
30064     13 41 02 FB | 	rdlong	local14, local01
30068     1C 26 86 F1 | 	sub	local01, #28
3006c     18 37 02 F6 | 	mov	local09, local06
30070     20 37 02 F1 | 	add	local09, local14
30074     1B 3D C2 FA | 	rdbyte	local12, local09
30078     1E 3B 42 F5 | 	or	local11, local12
3007c     01 30 06 F1 | 	add	local06, #1
30080                 | LR__4716
30080     1D 13 02 F6 | 	mov	arg01, local11
30084     01 00 00 FF 
30088     52 15 06 F6 | 	mov	arg02, ##850
3008c     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
30090     FD 3A 02 F6 | 	mov	local11, result1
30094     1D 2D 02 F6 | 	mov	local04, local11
30098     0F 2C 4E F7 | 	zerox	local04, #15 wz
3009c     00 2E 06 A6 |  if_e	mov	local05, #0
300a0     30 00 90 AD |  if_e	jmp	#LR__4717
300a4     1D 13 32 F9 | 	getword	arg01, local11, #0
300a8     17 15 02 F6 | 	mov	arg02, local05
300ac     0C 28 06 F1 | 	add	local02, #12
300b0     14 15 02 F1 | 	add	arg02, local02
300b4     0C 16 06 F6 | 	mov	arg03, #12
300b8     17 17 82 F1 | 	sub	arg03, local05
300bc     0C 28 86 F1 | 	sub	local02, #12
300c0     EC DF BF FD | 	call	#_fatfs_cc_put_utf
300c4     FD 40 0A F6 | 	mov	local14, result1 wz
300c8     00 2E 06 A6 |  if_e	mov	local05, #0
300cc     20 2F 02 51 |  if_ne	add	local05, local14
300d0     D8 FE 9F 5D |  if_ne	jmp	#LR__4714
300d4                 | LR__4717
300d4     17 2D 02 F6 | 	mov	local04, local05
300d8     0C 28 06 F1 | 	add	local02, #12
300dc     14 2D 02 F1 | 	add	local04, local02
300e0     16 01 48 FC | 	wrbyte	#0, local04
300e4     10 28 06 F1 | 	add	local02, #16
300e8     14 2D CA FA | 	rdbyte	local04, local02 wz
300ec     1C 28 86 F1 | 	sub	local02, #28
300f0     F8 00 90 5D |  if_ne	jmp	#LR__4723
300f4     00 2E 0E F2 | 	cmp	local05, #0 wz
300f8     1C 00 90 5D |  if_ne	jmp	#LR__4718
300fc     17 3F 02 F6 | 	mov	local13, local05
30100     1C 28 06 F1 | 	add	local02, #28
30104     14 3F 02 F1 | 	add	local13, local02
30108     1F 7F 48 FC | 	wrbyte	#63, local13
3010c     01 2E 06 F1 | 	add	local05, #1
30110     1C 28 86 F1 | 	sub	local02, #28
30114     A4 00 90 FD | 	jmp	#LR__4722
30118                 | LR__4718
30118                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
30118     00 2E 06 F6 | 	mov	local05, #0
3011c     00 30 06 F6 | 	mov	local06, #0
30120     08 42 06 F6 | 	mov	local15, #8
30124                 | LR__4719
30124     18 2D 02 F6 | 	mov	local04, local06
30128     0C 28 06 F1 | 	add	local02, #12
3012c     14 2D 02 F1 | 	add	local04, local02
30130     16 3F CA FA | 	rdbyte	local13, local04 wz
30134     0C 28 86 F1 | 	sub	local02, #12
30138     80 00 90 AD |  if_e	jmp	#LR__4721
3013c     18 35 02 F6 | 	mov	local08, local06
30140     0C 28 06 F1 | 	add	local02, #12
30144     14 35 02 F1 | 	add	local08, local02
30148     1A 3B C2 FA | 	rdbyte	local11, local08
3014c     1D 41 32 F9 | 	getword	local14, local11, #0
30150     2E 40 0E F2 | 	cmp	local14, #46 wz
30154     0C 28 86 F1 | 	sub	local02, #12
30158     10 42 06 A6 |  if_e	mov	local15, #16
3015c     1D 41 32 F9 | 	getword	local14, local11, #0
30160     41 40 16 F2 | 	cmp	local14, #65 wc
30164     30 00 90 CD |  if_b	jmp	#LR__4720
30168     1D 35 32 F9 | 	getword	local08, local11, #0
3016c     5B 34 16 F2 | 	cmp	local08, #91 wc
30170     24 00 90 3D |  if_ae	jmp	#LR__4720
30174     1C 26 06 F1 | 	add	local01, #28
30178     13 37 02 FB | 	rdlong	local09, local01
3017c     1C 26 86 F1 | 	sub	local01, #28
30180     0C 36 06 F1 | 	add	local09, #12
30184     1B 39 C2 FA | 	rdbyte	local10, local09
30188     21 41 E2 F8 | 	getbyte	local14, local15, #0
3018c     20 39 CA F7 | 	test	local10, local14 wz
30190     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
30194     20 3A 06 51 |  if_ne	add	local11, #32
30198                 | LR__4720
30198     17 41 02 F6 | 	mov	local14, local05
3019c     1C 28 06 F1 | 	add	local02, #28
301a0     14 41 02 F1 | 	add	local14, local02
301a4     1D 3B 32 F9 | 	getword	local11, local11, #0
301a8     20 3B 42 FC | 	wrbyte	local11, local14
301ac     01 30 06 F1 | 	add	local06, #1
301b0     01 2E 06 F1 | 	add	local05, #1
301b4     1C 28 86 F1 | 	sub	local02, #28
301b8     68 FF 9F FD | 	jmp	#LR__4719
301bc                 | LR__4721
301bc                 | LR__4722
301bc     1C 28 06 F1 | 	add	local02, #28
301c0     14 2F 02 F1 | 	add	local05, local02
301c4     17 01 48 FC | 	wrbyte	#0, local05
301c8     1C 26 06 F1 | 	add	local01, #28
301cc     13 2D 02 FB | 	rdlong	local04, local01
301d0     1C 26 86 F1 | 	sub	local01, #28
301d4     0C 2C 06 F1 | 	add	local04, #12
301d8     16 3F CA FA | 	rdbyte	local13, local04 wz
301dc     1C 28 86 F1 | 	sub	local02, #28
301e0     0C 28 06 A1 |  if_e	add	local02, #12
301e4     14 01 48 AC |  if_e	wrbyte	#0, local02
301e8     0C 28 86 A1 |  if_e	sub	local02, #12
301ec                 | LR__4723
301ec     1C 26 06 F1 | 	add	local01, #28
301f0     13 3D 02 FB | 	rdlong	local12, local01
301f4     0B 3C 06 F1 | 	add	local12, #11
301f8     1E 2D C2 FA | 	rdbyte	local04, local12
301fc     3F 2C 06 F5 | 	and	local04, #63
30200     08 28 06 F1 | 	add	local02, #8
30204     14 2D 42 FC | 	wrbyte	local04, local02
30208     08 28 86 F1 | 	sub	local02, #8
3020c     13 13 02 FB | 	rdlong	arg01, local01
30210     1C 12 06 F1 | 	add	arg01, #28
30214                 | ' {
30214                 | ' 
30214                 | ' 	return *((DWORD*)ptr);
30214     09 FB 01 FB | 	rdlong	result1, arg01
30218     14 FB 61 FC | 	wrlong	result1, local02
3021c     13 13 02 FB | 	rdlong	arg01, local01
30220     16 12 06 F1 | 	add	arg01, #22
30224                 | ' {
30224                 | ' 
30224                 | ' 	return *((WORD*)ptr);
30224     09 FB E1 FA | 	rdword	result1, arg01
30228     06 28 06 F1 | 	add	local02, #6
3022c     14 FB 51 FC | 	wrword	result1, local02
30230     13 13 02 FB | 	rdlong	arg01, local01
30234     18 12 06 F1 | 	add	arg01, #24
30238                 | ' {
30238                 | ' 
30238                 | ' 	return *((WORD*)ptr);
30238     09 FB E1 FA | 	rdword	result1, arg01
3023c     02 28 86 F1 | 	sub	local02, #2
30240     14 FB 51 FC | 	wrword	result1, local02
30244                 | LR__4724
30244     A7 F0 03 F6 | 	mov	ptra, fp
30248     B2 00 A0 FD | 	call	#popregs_
3024c                 | _fatfs_cc_get_fileinfo_ret
3024c     2D 00 64 FD | 	ret
30250                 | 
30250                 | _fatfs_cc_create_name
30250     0D 4A 05 F6 | 	mov	COUNT_, #13
30254     A8 00 A0 FD | 	call	#pushregs_
30258     34 F0 07 F1 | 	add	ptra, #52
3025c     04 4E 05 F1 | 	add	fp, #4
30260     A7 12 62 FC | 	wrlong	arg01, fp
30264     04 4E 05 F1 | 	add	fp, #4
30268     A7 14 62 FC | 	wrlong	arg02, fp
3026c     0A FB 01 FB | 	rdlong	result1, arg02
30270     28 4E 05 F1 | 	add	fp, #40
30274     A7 FA 61 FC | 	wrlong	result1, fp
30278     2C 4E 85 F1 | 	sub	fp, #44
3027c     A7 FA 01 FB | 	rdlong	result1, fp
30280     FD 26 02 FB | 	rdlong	local01, result1
30284     0C 26 06 F1 | 	add	local01, #12
30288     13 29 02 FB | 	rdlong	local02, local01
3028c     14 4E 05 F1 | 	add	fp, #20
30290     A7 28 62 FC | 	wrlong	local02, fp
30294     14 4E 05 F1 | 	add	fp, #20
30298     A7 00 68 FC | 	wrlong	#0, fp
3029c     2C 4E 85 F1 | 	sub	fp, #44
302a0                 | ' 
302a0                 | ' 
302a0                 | ' 
302a0                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
302a0                 | ' 	for (;;) {
302a0                 | LR__4730
302a0     30 4E 05 F1 | 	add	fp, #48
302a4     A7 12 02 F6 | 	mov	arg01, fp
302a8     30 4E 85 F1 | 	sub	fp, #48
302ac     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
302b0     1C 4E 05 F1 | 	add	fp, #28
302b4     A7 FA 61 FC | 	wrlong	result1, fp
302b8     1C 4E 85 F1 | 	sub	fp, #28
302bc     FF FF 7F FF 
302c0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
302c4     06 FA 05 A6 |  if_e	mov	result1, #6
302c8     74 08 90 AD |  if_e	jmp	#LR__4770
302cc     1C 4E 05 F1 | 	add	fp, #28
302d0     A7 26 02 FB | 	rdlong	local01, fp
302d4     1C 4E 85 F1 | 	sub	fp, #28
302d8     80 00 00 FF 
302dc     00 26 16 F2 | 	cmp	local01, ##65536 wc
302e0     3C 00 90 CD |  if_b	jmp	#LR__4731
302e4     18 4E 05 F1 | 	add	fp, #24
302e8     A7 2A 02 FB | 	rdlong	local03, fp
302ec     14 4E 05 F1 | 	add	fp, #20
302f0     A7 26 02 FB | 	rdlong	local01, fp
302f4     13 2D 02 F6 | 	mov	local04, local01
302f8     01 2C 06 F1 | 	add	local04, #1
302fc     A7 2C 62 FC | 	wrlong	local04, fp
30300     01 26 66 F0 | 	shl	local01, #1
30304     15 27 02 F1 | 	add	local01, local03
30308     10 4E 85 F1 | 	sub	fp, #16
3030c     A7 2E 02 FB | 	rdlong	local05, fp
30310     1C 4E 85 F1 | 	sub	fp, #28
30314     17 31 02 F6 | 	mov	local06, local05
30318     10 30 46 F0 | 	shr	local06, #16
3031c     13 31 52 FC | 	wrword	local06, local01
30320                 | LR__4731
30320     1C 4E 05 F1 | 	add	fp, #28
30324     A7 26 02 FB | 	rdlong	local01, fp
30328     08 4E 85 F1 | 	sub	fp, #8
3032c     A7 26 52 FC | 	wrword	local01, fp
30330     A7 26 E2 FA | 	rdword	local01, fp
30334     14 4E 85 F1 | 	sub	fp, #20
30338     20 26 16 F2 | 	cmp	local01, #32 wc
3033c     B0 00 90 CD |  if_b	jmp	#LR__4733
30340     14 4E 05 F1 | 	add	fp, #20
30344     A7 26 E2 FA | 	rdword	local01, fp
30348     14 4E 85 F1 | 	sub	fp, #20
3034c     2F 26 0E F2 | 	cmp	local01, #47 wz
30350     14 4E 05 51 |  if_ne	add	fp, #20
30354     A7 2C E2 5A |  if_ne	rdword	local04, fp
30358     14 4E 85 51 |  if_ne	sub	fp, #20
3035c     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
30360     8C 00 90 AD |  if_e	jmp	#LR__4733
30364     14 4E 05 F1 | 	add	fp, #20
30368     A7 12 E2 FA | 	rdword	arg01, fp
3036c     14 4E 85 F1 | 	sub	fp, #20
30370     80 12 16 F2 | 	cmp	arg01, #128 wc
30374     24 00 90 3D |  if_ae	jmp	#LR__4732
30378     B1 01 00 FF 
3037c     B4 12 06 F6 | 	mov	arg01, ##@LR__5392
30380     14 4E 05 F1 | 	add	fp, #20
30384     A7 14 E2 FA | 	rdword	arg02, fp
30388     14 4E 85 F1 | 	sub	fp, #20
3038c     FC D0 BF FD | 	call	#_fatfs_cc_strchr
30390     00 FA 0D F2 | 	cmp	result1, #0 wz
30394     06 FA 05 56 |  if_ne	mov	result1, #6
30398     A4 07 90 5D |  if_ne	jmp	#LR__4770
3039c                 | LR__4732
3039c     2C 4E 05 F1 | 	add	fp, #44
303a0     A7 30 02 FB | 	rdlong	local06, fp
303a4     2C 4E 85 F1 | 	sub	fp, #44
303a8     FF 30 16 F2 | 	cmp	local06, #255 wc
303ac     06 FA 05 36 |  if_ae	mov	result1, #6
303b0     8C 07 90 3D |  if_ae	jmp	#LR__4770
303b4     18 4E 05 F1 | 	add	fp, #24
303b8     A7 2A 02 FB | 	rdlong	local03, fp
303bc     14 4E 05 F1 | 	add	fp, #20
303c0     A7 28 02 FB | 	rdlong	local02, fp
303c4     14 2D 02 F6 | 	mov	local04, local02
303c8     01 2C 06 F1 | 	add	local04, #1
303cc     A7 2C 62 FC | 	wrlong	local04, fp
303d0     14 27 02 F6 | 	mov	local01, local02
303d4     01 26 66 F0 | 	shl	local01, #1
303d8     15 27 02 F1 | 	add	local01, local03
303dc     18 4E 85 F1 | 	sub	fp, #24
303e0     A7 30 E2 FA | 	rdword	local06, fp
303e4     14 4E 85 F1 | 	sub	fp, #20
303e8     13 31 52 FC | 	wrword	local06, local01
303ec     B0 FE 9F FD | 	jmp	#LR__4730
303f0                 | LR__4733
303f0     14 4E 05 F1 | 	add	fp, #20
303f4     A7 32 E2 FA | 	rdword	local07, fp
303f8     14 4E 85 F1 | 	sub	fp, #20
303fc     20 32 16 F2 | 	cmp	local07, #32 wc
30400     10 4E 05 C1 |  if_b	add	fp, #16
30404     A7 08 48 CC |  if_b	wrbyte	#4, fp
30408     10 4E 85 C1 |  if_b	sub	fp, #16
3040c     74 00 90 CD |  if_b	jmp	#LR__4738
30410     97 24 48 FB | 	callpa	#(@LR__4736-@LR__4734)>>2,fcache_load_ptr_
30414                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
30414                 | LR__4734
30414     30 4E 05 F1 | 	add	fp, #48
30418     A7 2C 02 FB | 	rdlong	local04, fp
3041c     30 4E 85 F1 | 	sub	fp, #48
30420     16 33 C2 FA | 	rdbyte	local07, local04
30424     2F 32 0E F2 | 	cmp	local07, #47 wz
30428     18 00 90 AD |  if_e	jmp	#LR__4735
3042c     30 4E 05 F1 | 	add	fp, #48
30430     A7 2C 02 FB | 	rdlong	local04, fp
30434     30 4E 85 F1 | 	sub	fp, #48
30438     16 29 C2 FA | 	rdbyte	local02, local04
3043c     5C 28 0E F2 | 	cmp	local02, #92 wz
30440     18 00 90 5D |  if_ne	jmp	#LR__4737
30444                 | LR__4735
30444     30 4E 05 F1 | 	add	fp, #48
30448     A7 26 02 FB | 	rdlong	local01, fp
3044c     01 26 06 F1 | 	add	local01, #1
30450     A7 26 62 FC | 	wrlong	local01, fp
30454     30 4E 85 F1 | 	sub	fp, #48
30458     B8 FF 9F FD | 	jmp	#LR__4734
3045c                 | LR__4736
3045c                 | LR__4737
3045c     10 4E 05 F1 | 	add	fp, #16
30460     A7 00 48 FC | 	wrbyte	#0, fp
30464     20 4E 05 F1 | 	add	fp, #32
30468     A7 30 02 FB | 	rdlong	local06, fp
3046c     30 4E 85 F1 | 	sub	fp, #48
30470     18 33 C2 FA | 	rdbyte	local07, local06
30474     20 32 16 F2 | 	cmp	local07, #32 wc
30478     10 4E 05 C1 |  if_b	add	fp, #16
3047c     A7 08 48 CC |  if_b	wrbyte	#4, fp
30480     10 4E 85 C1 |  if_b	sub	fp, #16
30484                 | LR__4738
30484     08 4E 05 F1 | 	add	fp, #8
30488     A7 32 02 FB | 	rdlong	local07, fp
3048c     28 4E 05 F1 | 	add	fp, #40
30490     A7 26 02 FB | 	rdlong	local01, fp
30494     30 4E 85 F1 | 	sub	fp, #48
30498     19 27 62 FC | 	wrlong	local01, local07
3049c     97 38 48 FB | 	callpa	#(@LR__4740-@LR__4739)>>2,fcache_load_ptr_
304a0                 | ' 	}
304a0                 | ' 	*path = p;
304a0                 | ' #line 2862 "ff.c"
304a0                 | ' 	while (di) {
304a0                 | LR__4739
304a0     2C 4E 05 F1 | 	add	fp, #44
304a4     A7 32 0A FB | 	rdlong	local07, fp wz
304a8     2C 4E 85 F1 | 	sub	fp, #44
304ac     60 00 90 AD |  if_e	jmp	#LR__4741
304b0     18 4E 05 F1 | 	add	fp, #24
304b4     A7 30 02 FB | 	rdlong	local06, fp
304b8     14 4E 05 F1 | 	add	fp, #20
304bc     A7 2C 02 FB | 	rdlong	local04, fp
304c0     01 2C 86 F1 | 	sub	local04, #1
304c4     01 2C 66 F0 | 	shl	local04, #1
304c8     18 2D 02 F1 | 	add	local04, local06
304cc     16 31 E2 FA | 	rdword	local06, local04
304d0     18 4E 85 F1 | 	sub	fp, #24
304d4     A7 30 52 FC | 	wrword	local06, fp
304d8     A7 32 E2 FA | 	rdword	local07, fp
304dc     14 4E 85 F1 | 	sub	fp, #20
304e0     20 32 0E F2 | 	cmp	local07, #32 wz
304e4     14 4E 05 51 |  if_ne	add	fp, #20
304e8     A7 26 E2 5A |  if_ne	rdword	local01, fp
304ec     14 4E 85 51 |  if_ne	sub	fp, #20
304f0     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
304f4     18 00 90 5D |  if_ne	jmp	#LR__4741
304f8     2C 4E 05 F1 | 	add	fp, #44
304fc     A7 26 02 FB | 	rdlong	local01, fp
30500     01 26 86 F1 | 	sub	local01, #1
30504     A7 26 62 FC | 	wrlong	local01, fp
30508     2C 4E 85 F1 | 	sub	fp, #44
3050c     90 FF 9F FD | 	jmp	#LR__4739
30510                 | LR__4740
30510                 | LR__4741
30510     18 4E 05 F1 | 	add	fp, #24
30514     A7 34 02 FB | 	rdlong	local08, fp
30518     14 4E 05 F1 | 	add	fp, #20
3051c     A7 2C 02 FB | 	rdlong	local04, fp
30520     01 2C 66 F0 | 	shl	local04, #1
30524     1A 2D 02 F1 | 	add	local04, local08
30528     16 01 58 FC | 	wrword	#0, local04
3052c     A7 32 0A FB | 	rdlong	local07, fp wz
30530     2C 4E 85 F1 | 	sub	fp, #44
30534     06 FA 05 A6 |  if_e	mov	result1, #6
30538     04 06 90 AD |  if_e	jmp	#LR__4770
3053c                 | ' 
3053c                 | ' 
3053c                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
3053c     28 4E 05 F1 | 	add	fp, #40
30540     A7 00 68 FC | 	wrlong	#0, fp
30544     28 4E 85 F1 | 	sub	fp, #40
30548     97 22 48 FB | 	callpa	#(@LR__4743-@LR__4742)>>2,fcache_load_ptr_
3054c                 | LR__4742
3054c     18 4E 05 F1 | 	add	fp, #24
30550     A7 36 02 FB | 	rdlong	local09, fp
30554     10 4E 05 F1 | 	add	fp, #16
30558     A7 38 02 FB | 	rdlong	local10, fp
3055c     28 4E 85 F1 | 	sub	fp, #40
30560     01 38 66 F0 | 	shl	local10, #1
30564     1B 39 02 F1 | 	add	local10, local09
30568     1C 3B E2 FA | 	rdword	local11, local10
3056c     20 3A 0E F2 | 	cmp	local11, #32 wz
30570     1C 00 90 5D |  if_ne	jmp	#LR__4744
30574     28 4E 05 F1 | 	add	fp, #40
30578     A7 3C 02 FB | 	rdlong	local12, fp
3057c     1E 2F 02 F6 | 	mov	local05, local12
30580     01 2E 06 F1 | 	add	local05, #1
30584     A7 2E 62 FC | 	wrlong	local05, fp
30588     28 4E 85 F1 | 	sub	fp, #40
3058c     BC FF 9F FD | 	jmp	#LR__4742
30590                 | LR__4743
30590                 | LR__4744
30590     28 4E 05 F1 | 	add	fp, #40
30594     A7 32 02 FB | 	rdlong	local07, fp
30598     28 4E 85 F1 | 	sub	fp, #40
3059c     01 32 16 F2 | 	cmp	local07, #1 wc
305a0     28 00 90 3D |  if_ae	jmp	#LR__4745
305a4     18 4E 05 F1 | 	add	fp, #24
305a8     A7 2A 02 FB | 	rdlong	local03, fp
305ac     10 4E 05 F1 | 	add	fp, #16
305b0     A7 36 02 FB | 	rdlong	local09, fp
305b4     28 4E 85 F1 | 	sub	fp, #40
305b8     01 36 66 F0 | 	shl	local09, #1
305bc     15 37 02 F1 | 	add	local09, local03
305c0     1B 27 E2 FA | 	rdword	local01, local09
305c4     2E 26 0E F2 | 	cmp	local01, #46 wz
305c8     14 00 90 5D |  if_ne	jmp	#LR__4746
305cc                 | LR__4745
305cc     10 4E 05 F1 | 	add	fp, #16
305d0     A7 32 C2 FA | 	rdbyte	local07, fp
305d4     03 32 46 F5 | 	or	local07, #3
305d8     A7 32 42 FC | 	wrbyte	local07, fp
305dc     10 4E 85 F1 | 	sub	fp, #16
305e0                 | LR__4746
305e0     97 2C 48 FB | 	callpa	#(@LR__4748-@LR__4747)>>2,fcache_load_ptr_
305e4                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
305e4                 | LR__4747
305e4     2C 4E 05 F1 | 	add	fp, #44
305e8     A7 32 02 FB | 	rdlong	local07, fp
305ec     2C 4E 85 F1 | 	sub	fp, #44
305f0     01 32 16 F2 | 	cmp	local07, #1 wc
305f4     44 00 90 CD |  if_b	jmp	#LR__4749
305f8     18 4E 05 F1 | 	add	fp, #24
305fc     A7 30 02 FB | 	rdlong	local06, fp
30600     14 4E 05 F1 | 	add	fp, #20
30604     A7 2A 02 FB | 	rdlong	local03, fp
30608     2C 4E 85 F1 | 	sub	fp, #44
3060c     01 2A 86 F1 | 	sub	local03, #1
30610     01 2A 66 F0 | 	shl	local03, #1
30614     18 2B 02 F1 | 	add	local03, local06
30618     15 27 E2 FA | 	rdword	local01, local03
3061c     2E 26 0E F2 | 	cmp	local01, #46 wz
30620     18 00 90 AD |  if_e	jmp	#LR__4749
30624     2C 4E 05 F1 | 	add	fp, #44
30628     A7 26 02 FB | 	rdlong	local01, fp
3062c     01 26 86 F1 | 	sub	local01, #1
30630     A7 26 62 FC | 	wrlong	local01, fp
30634     2C 4E 85 F1 | 	sub	fp, #44
30638     A8 FF 9F FD | 	jmp	#LR__4747
3063c                 | LR__4748
3063c                 | LR__4749
3063c     04 4E 05 F1 | 	add	fp, #4
30640     A7 12 02 FB | 	rdlong	arg01, fp
30644     04 4E 85 F1 | 	sub	fp, #4
30648     20 12 06 F1 | 	add	arg01, #32
3064c     20 14 06 F6 | 	mov	arg02, #32
30650     0B 16 06 F6 | 	mov	arg03, #11
30654     09 3F 02 F6 | 	mov	local13, arg01
30658     98 00 A0 FD | 	call	#\builtin_bytefill_
3065c     1F FB 01 F6 | 	mov	result1, local13
30660     0C 4E 05 F1 | 	add	fp, #12
30664     A7 00 48 FC | 	wrbyte	#0, fp
30668     A7 32 C2 FA | 	rdbyte	local07, fp
3066c     14 4E 05 F1 | 	add	fp, #20
30670     A7 32 62 FC | 	wrlong	local07, fp
30674     04 4E 05 F1 | 	add	fp, #4
30678     A7 10 68 FC | 	wrlong	#8, fp
3067c     24 4E 85 F1 | 	sub	fp, #36
30680                 | ' 
30680                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
30680                 | ' 	i = b = 0; ni = 8;
30680                 | ' 	for (;;) {
30680                 | LR__4750
30680     18 4E 05 F1 | 	add	fp, #24
30684     A7 2A 02 FB | 	rdlong	local03, fp
30688     10 4E 05 F1 | 	add	fp, #16
3068c     A7 36 02 FB | 	rdlong	local09, fp
30690     1B 2D 02 F6 | 	mov	local04, local09
30694     01 2C 06 F1 | 	add	local04, #1
30698     A7 2C 62 FC | 	wrlong	local04, fp
3069c     01 36 66 F0 | 	shl	local09, #1
306a0     15 37 02 F1 | 	add	local09, local03
306a4     1B 31 E2 FA | 	rdword	local06, local09
306a8     14 4E 85 F1 | 	sub	fp, #20
306ac     A7 30 52 FC | 	wrword	local06, fp
306b0     A7 32 EA FA | 	rdword	local07, fp wz
306b4     14 4E 85 F1 | 	sub	fp, #20
306b8     74 03 90 AD |  if_e	jmp	#LR__4766
306bc     14 4E 05 F1 | 	add	fp, #20
306c0     A7 32 E2 FA | 	rdword	local07, fp
306c4     14 4E 85 F1 | 	sub	fp, #20
306c8     20 32 0E F2 | 	cmp	local07, #32 wz
306cc     30 00 90 AD |  if_e	jmp	#LR__4751
306d0     14 4E 05 F1 | 	add	fp, #20
306d4     A7 26 E2 FA | 	rdword	local01, fp
306d8     14 4E 85 F1 | 	sub	fp, #20
306dc     2E 26 0E F2 | 	cmp	local01, #46 wz
306e0     34 00 90 5D |  if_ne	jmp	#LR__4752
306e4     28 4E 05 F1 | 	add	fp, #40
306e8     A7 2C 02 FB | 	rdlong	local04, fp
306ec     04 4E 05 F1 | 	add	fp, #4
306f0     A7 38 02 FB | 	rdlong	local10, fp
306f4     2C 4E 85 F1 | 	sub	fp, #44
306f8     1C 2D 0A F2 | 	cmp	local04, local10 wz
306fc     18 00 90 AD |  if_e	jmp	#LR__4752
30700                 | LR__4751
30700     10 4E 05 F1 | 	add	fp, #16
30704     A7 32 C2 FA | 	rdbyte	local07, fp
30708     03 32 46 F5 | 	or	local07, #3
3070c     A7 32 42 FC | 	wrbyte	local07, fp
30710     10 4E 85 F1 | 	sub	fp, #16
30714                 | ' 			cf |=  0x01  |  0x02 ;
30714                 | ' 			continue;
30714     68 FF 9F FD | 	jmp	#LR__4750
30718                 | LR__4752
30718     20 4E 05 F1 | 	add	fp, #32
3071c     A7 32 02 FB | 	rdlong	local07, fp
30720     04 4E 05 F1 | 	add	fp, #4
30724     A7 26 02 FB | 	rdlong	local01, fp
30728     24 4E 85 F1 | 	sub	fp, #36
3072c     13 33 12 F2 | 	cmp	local07, local01 wc
30730     1C 00 90 3D |  if_ae	jmp	#LR__4753
30734     28 4E 05 F1 | 	add	fp, #40
30738     A7 34 02 FB | 	rdlong	local08, fp
3073c     04 4E 05 F1 | 	add	fp, #4
30740     A7 38 02 FB | 	rdlong	local10, fp
30744     2C 4E 85 F1 | 	sub	fp, #44
30748     1C 35 0A F2 | 	cmp	local08, local10 wz
3074c     B0 00 90 5D |  if_ne	jmp	#LR__4755
30750                 | LR__4753
30750     24 4E 05 F1 | 	add	fp, #36
30754     A7 32 02 FB | 	rdlong	local07, fp
30758     24 4E 85 F1 | 	sub	fp, #36
3075c     0B 32 0E F2 | 	cmp	local07, #11 wz
30760     18 00 90 5D |  if_ne	jmp	#LR__4754
30764     10 4E 05 F1 | 	add	fp, #16
30768     A7 32 C2 FA | 	rdbyte	local07, fp
3076c     03 32 46 F5 | 	or	local07, #3
30770     A7 32 42 FC | 	wrbyte	local07, fp
30774     10 4E 85 F1 | 	sub	fp, #16
30778                 | ' 				cf |=  0x01  |  0x02 ;
30778                 | ' 				break;
30778     B4 02 90 FD | 	jmp	#LR__4766
3077c                 | LR__4754
3077c     28 4E 05 F1 | 	add	fp, #40
30780     A7 32 02 FB | 	rdlong	local07, fp
30784     04 4E 05 F1 | 	add	fp, #4
30788     A7 26 02 FB | 	rdlong	local01, fp
3078c     2C 4E 85 F1 | 	sub	fp, #44
30790     13 33 0A F2 | 	cmp	local07, local01 wz
30794     10 4E 05 51 |  if_ne	add	fp, #16
30798     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
3079c     03 32 46 55 |  if_ne	or	local07, #3
307a0     A7 32 42 5C |  if_ne	wrbyte	local07, fp
307a4     10 4E 85 51 |  if_ne	sub	fp, #16
307a8     28 4E 05 F1 | 	add	fp, #40
307ac     A7 32 02 FB | 	rdlong	local07, fp
307b0     04 4E 05 F1 | 	add	fp, #4
307b4     A7 28 02 FB | 	rdlong	local02, fp
307b8     2C 4E 85 F1 | 	sub	fp, #44
307bc     14 33 1A F2 | 	cmp	local07, local02 wcz
307c0     6C 02 90 1D |  if_a	jmp	#LR__4766
307c4     2C 4E 05 F1 | 	add	fp, #44
307c8     A7 32 02 FB | 	rdlong	local07, fp
307cc     04 4E 85 F1 | 	sub	fp, #4
307d0     A7 32 62 FC | 	wrlong	local07, fp
307d4     08 4E 85 F1 | 	sub	fp, #8
307d8     A7 10 68 FC | 	wrlong	#8, fp
307dc     04 4E 05 F1 | 	add	fp, #4
307e0     A7 16 68 FC | 	wrlong	#11, fp
307e4     18 4E 85 F1 | 	sub	fp, #24
307e8     A7 3A C2 FA | 	rdbyte	local11, fp
307ec     1D 33 E2 F8 | 	getbyte	local07, local11, #0
307f0     02 32 66 F0 | 	shl	local07, #2
307f4     A7 32 42 FC | 	wrbyte	local07, fp
307f8     0C 4E 85 F1 | 	sub	fp, #12
307fc                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
307fc                 | ' 			continue;
307fc     80 FE 9F FD | 	jmp	#LR__4750
30800                 | LR__4755
30800     14 4E 05 F1 | 	add	fp, #20
30804     A7 32 E2 FA | 	rdword	local07, fp
30808     14 4E 85 F1 | 	sub	fp, #20
3080c     80 32 16 F2 | 	cmp	local07, #128 wc
30810     6C 00 90 CD |  if_b	jmp	#LR__4757
30814     10 4E 05 F1 | 	add	fp, #16
30818     A7 32 C2 FA | 	rdbyte	local07, fp
3081c     02 32 46 F5 | 	or	local07, #2
30820     A7 32 42 FC | 	wrbyte	local07, fp
30824     04 4E 05 F1 | 	add	fp, #4
30828     A7 12 E2 FA | 	rdword	arg01, fp
3082c     14 4E 85 F1 | 	sub	fp, #20
30830     01 00 00 FF 
30834     52 15 06 F6 | 	mov	arg02, ##850
30838     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
3083c     14 4E 05 F1 | 	add	fp, #20
30840     A7 FA 51 FC | 	wrword	result1, fp
30844     A7 32 E2 FA | 	rdword	local07, fp
30848     14 4E 85 F1 | 	sub	fp, #20
3084c     80 32 CE F7 | 	test	local07, #128 wz
30850     2C 00 90 AD |  if_e	jmp	#LR__4756
30854     14 4E 05 F1 | 	add	fp, #20
30858     A7 28 E2 FA | 	rdword	local02, fp
3085c     7F 28 06 F5 | 	and	local02, #127
30860     01 00 00 FF 
30864     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
30868     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
3086c     14 33 C2 FA | 	rdbyte	local07, local02
30870     A7 32 52 FC | 	wrword	local07, fp
30874     14 4E 85 F1 | 	sub	fp, #20
30878     01 00 00 FF 
3087c     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
30880                 | LR__4756
30880                 | LR__4757
30880     14 4E 05 F1 | 	add	fp, #20
30884     A7 32 E2 FA | 	rdword	local07, fp
30888     14 4E 85 F1 | 	sub	fp, #20
3088c     00 33 16 F2 | 	cmp	local07, #256 wc
30890     88 00 90 CD |  if_b	jmp	#LR__4759
30894     24 4E 05 F1 | 	add	fp, #36
30898     A7 32 02 FB | 	rdlong	local07, fp
3089c     01 32 86 F1 | 	sub	local07, #1
308a0     04 4E 85 F1 | 	sub	fp, #4
308a4     A7 28 02 FB | 	rdlong	local02, fp
308a8     20 4E 85 F1 | 	sub	fp, #32
308ac     19 29 12 F2 | 	cmp	local02, local07 wc
308b0     2C 00 90 CD |  if_b	jmp	#LR__4758
308b4     10 4E 05 F1 | 	add	fp, #16
308b8     A7 3A C2 FA | 	rdbyte	local11, fp
308bc     1D 33 E2 F8 | 	getbyte	local07, local11, #0
308c0     03 32 46 F5 | 	or	local07, #3
308c4     A7 32 42 FC | 	wrbyte	local07, fp
308c8     14 4E 05 F1 | 	add	fp, #20
308cc     A7 32 02 FB | 	rdlong	local07, fp
308d0     04 4E 85 F1 | 	sub	fp, #4
308d4     A7 32 62 FC | 	wrlong	local07, fp
308d8     20 4E 85 F1 | 	sub	fp, #32
308dc                 | ' 				cf |=  0x01  |  0x02 ;
308dc                 | ' 				i = ni; continue;
308dc     A0 FD 9F FD | 	jmp	#LR__4750
308e0                 | LR__4758
308e0     04 4E 05 F1 | 	add	fp, #4
308e4     A7 36 02 FB | 	rdlong	local09, fp
308e8     1C 4E 05 F1 | 	add	fp, #28
308ec     A7 38 02 FB | 	rdlong	local10, fp
308f0     1C 2D 02 F6 | 	mov	local04, local10
308f4     01 2C 06 F1 | 	add	local04, #1
308f8     A7 2C 62 FC | 	wrlong	local04, fp
308fc     20 36 06 F1 | 	add	local09, #32
30900     1B 39 02 F1 | 	add	local10, local09
30904     0C 4E 85 F1 | 	sub	fp, #12
30908     A7 2A E2 FA | 	rdword	local03, fp
3090c     14 4E 85 F1 | 	sub	fp, #20
30910     08 2A 46 F0 | 	shr	local03, #8
30914     1C 2B 42 FC | 	wrbyte	local03, local10
30918     D4 00 90 FD | 	jmp	#LR__4765
3091c                 | LR__4759
3091c     14 4E 05 F1 | 	add	fp, #20
30920     A7 32 EA FA | 	rdword	local07, fp wz
30924     14 4E 85 F1 | 	sub	fp, #20
30928     20 00 90 AD |  if_e	jmp	#LR__4760
3092c     B1 01 00 FF 
30930     BD 12 06 F6 | 	mov	arg01, ##@LR__5393
30934     14 4E 05 F1 | 	add	fp, #20
30938     A7 14 E2 FA | 	rdword	arg02, fp
3093c     14 4E 85 F1 | 	sub	fp, #20
30940     48 CB BF FD | 	call	#_fatfs_cc_strchr
30944     00 FA 0D F2 | 	cmp	result1, #0 wz
30948     20 00 90 AD |  if_e	jmp	#LR__4761
3094c                 | LR__4760
3094c     14 4E 05 F1 | 	add	fp, #20
30950     A7 BE 58 FC | 	wrword	#95, fp
30954     04 4E 85 F1 | 	sub	fp, #4
30958     A7 32 C2 FA | 	rdbyte	local07, fp
3095c     03 32 46 F5 | 	or	local07, #3
30960     A7 32 42 FC | 	wrbyte	local07, fp
30964     10 4E 85 F1 | 	sub	fp, #16
30968     84 00 90 FD | 	jmp	#LR__4764
3096c                 | LR__4761
3096c     14 4E 05 F1 | 	add	fp, #20
30970     A7 32 E2 FA | 	rdword	local07, fp
30974     14 4E 85 F1 | 	sub	fp, #20
30978     41 32 16 F2 | 	cmp	local07, #65 wc
3097c     24 00 90 CD |  if_b	jmp	#LR__4762
30980     14 4E 05 F1 | 	add	fp, #20
30984     A7 26 E2 FA | 	rdword	local01, fp
30988     14 4E 85 F1 | 	sub	fp, #20
3098c     5B 26 16 F2 | 	cmp	local01, #91 wc
30990     0C 4E 05 C1 |  if_b	add	fp, #12
30994     A7 32 C2 CA |  if_b	rdbyte	local07, fp
30998     02 32 46 C5 |  if_b	or	local07, #2
3099c     A7 32 42 CC |  if_b	wrbyte	local07, fp
309a0     0C 4E 85 C1 |  if_b	sub	fp, #12
309a4                 | LR__4762
309a4     14 4E 05 F1 | 	add	fp, #20
309a8     A7 32 E2 FA | 	rdword	local07, fp
309ac     14 4E 85 F1 | 	sub	fp, #20
309b0     61 32 16 F2 | 	cmp	local07, #97 wc
309b4     38 00 90 CD |  if_b	jmp	#LR__4763
309b8     14 4E 05 F1 | 	add	fp, #20
309bc     A7 26 E2 FA | 	rdword	local01, fp
309c0     14 4E 85 F1 | 	sub	fp, #20
309c4     7B 26 16 F2 | 	cmp	local01, #123 wc
309c8     24 00 90 3D |  if_ae	jmp	#LR__4763
309cc     0C 4E 05 F1 | 	add	fp, #12
309d0     A7 32 C2 FA | 	rdbyte	local07, fp
309d4     01 32 46 F5 | 	or	local07, #1
309d8     A7 32 42 FC | 	wrbyte	local07, fp
309dc     08 4E 05 F1 | 	add	fp, #8
309e0     A7 32 E2 FA | 	rdword	local07, fp
309e4     20 32 86 F1 | 	sub	local07, #32
309e8     A7 32 52 FC | 	wrword	local07, fp
309ec     14 4E 85 F1 | 	sub	fp, #20
309f0                 | LR__4763
309f0                 | LR__4764
309f0                 | LR__4765
309f0     04 4E 05 F1 | 	add	fp, #4
309f4     A7 3A 02 FB | 	rdlong	local11, fp
309f8     1D 37 02 F6 | 	mov	local09, local11
309fc     1C 4E 05 F1 | 	add	fp, #28
30a00     A7 28 02 FB | 	rdlong	local02, fp
30a04     14 2D 02 F6 | 	mov	local04, local02
30a08     01 2C 06 F1 | 	add	local04, #1
30a0c     A7 2C 62 FC | 	wrlong	local04, fp
30a10     14 39 02 F6 | 	mov	local10, local02
30a14     20 36 06 F1 | 	add	local09, #32
30a18     1B 39 02 F1 | 	add	local10, local09
30a1c     0C 4E 85 F1 | 	sub	fp, #12
30a20     A7 2A E2 FA | 	rdword	local03, fp
30a24     14 4E 85 F1 | 	sub	fp, #20
30a28     1C 2B 42 FC | 	wrbyte	local03, local10
30a2c     50 FC 9F FD | 	jmp	#LR__4750
30a30                 | LR__4766
30a30     04 4E 05 F1 | 	add	fp, #4
30a34     A7 3A 02 FB | 	rdlong	local11, fp
30a38     04 4E 85 F1 | 	sub	fp, #4
30a3c     20 3A 06 F1 | 	add	local11, #32
30a40     1D 33 C2 FA | 	rdbyte	local07, local11
30a44     E5 32 0E F2 | 	cmp	local07, #229 wz
30a48     04 4E 05 A1 |  if_e	add	fp, #4
30a4c     A7 32 02 AB |  if_e	rdlong	local07, fp
30a50     04 4E 85 A1 |  if_e	sub	fp, #4
30a54     20 32 06 A1 |  if_e	add	local07, #32
30a58     19 0B 48 AC |  if_e	wrbyte	#5, local07
30a5c     24 4E 05 F1 | 	add	fp, #36
30a60     A7 32 02 FB | 	rdlong	local07, fp
30a64     24 4E 85 F1 | 	sub	fp, #36
30a68     08 32 0E F2 | 	cmp	local07, #8 wz
30a6c     0C 4E 05 A1 |  if_e	add	fp, #12
30a70     A7 32 C2 AA |  if_e	rdbyte	local07, fp
30a74     02 32 66 A0 |  if_e	shl	local07, #2
30a78     A7 32 42 AC |  if_e	wrbyte	local07, fp
30a7c     0C 4E 85 A1 |  if_e	sub	fp, #12
30a80     0C 4E 05 F1 | 	add	fp, #12
30a84     A7 32 C2 FA | 	rdbyte	local07, fp
30a88     0C 4E 85 F1 | 	sub	fp, #12
30a8c     0C 32 06 F5 | 	and	local07, #12
30a90     0C 32 0E F2 | 	cmp	local07, #12 wz
30a94     18 00 90 AD |  if_e	jmp	#LR__4767
30a98     0C 4E 05 F1 | 	add	fp, #12
30a9c     A7 26 C2 FA | 	rdbyte	local01, fp
30aa0     0C 4E 85 F1 | 	sub	fp, #12
30aa4     03 26 06 F5 | 	and	local01, #3
30aa8     03 26 0E F2 | 	cmp	local01, #3 wz
30aac     14 00 90 5D |  if_ne	jmp	#LR__4768
30ab0                 | LR__4767
30ab0     10 4E 05 F1 | 	add	fp, #16
30ab4     A7 32 C2 FA | 	rdbyte	local07, fp
30ab8     02 32 46 F5 | 	or	local07, #2
30abc     A7 32 42 FC | 	wrbyte	local07, fp
30ac0     10 4E 85 F1 | 	sub	fp, #16
30ac4                 | LR__4768
30ac4     10 4E 05 F1 | 	add	fp, #16
30ac8     A7 32 C2 FA | 	rdbyte	local07, fp
30acc     10 4E 85 F1 | 	sub	fp, #16
30ad0     02 32 CE F7 | 	test	local07, #2 wz
30ad4     48 00 90 5D |  if_ne	jmp	#LR__4769
30ad8     0C 4E 05 F1 | 	add	fp, #12
30adc     A7 32 C2 FA | 	rdbyte	local07, fp
30ae0     0C 4E 85 F1 | 	sub	fp, #12
30ae4     01 32 CE F7 | 	test	local07, #1 wz
30ae8     10 4E 05 51 |  if_ne	add	fp, #16
30aec     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
30af0     10 32 46 55 |  if_ne	or	local07, #16
30af4     A7 32 42 5C |  if_ne	wrbyte	local07, fp
30af8     10 4E 85 51 |  if_ne	sub	fp, #16
30afc     0C 4E 05 F1 | 	add	fp, #12
30b00     A7 32 C2 FA | 	rdbyte	local07, fp
30b04     0C 4E 85 F1 | 	sub	fp, #12
30b08     04 32 CE F7 | 	test	local07, #4 wz
30b0c     10 4E 05 51 |  if_ne	add	fp, #16
30b10     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
30b14     08 32 46 55 |  if_ne	or	local07, #8
30b18     A7 32 42 5C |  if_ne	wrbyte	local07, fp
30b1c     10 4E 85 51 |  if_ne	sub	fp, #16
30b20                 | LR__4769
30b20     04 4E 05 F1 | 	add	fp, #4
30b24     A7 32 02 FB | 	rdlong	local07, fp
30b28     0C 4E 05 F1 | 	add	fp, #12
30b2c     A7 26 C2 FA | 	rdbyte	local01, fp
30b30     10 4E 85 F1 | 	sub	fp, #16
30b34     2B 32 06 F1 | 	add	local07, #43
30b38     19 27 42 FC | 	wrbyte	local01, local07
30b3c                 | ' 	}
30b3c                 | ' 
30b3c                 | ' 	dp->fn[ 11 ] = cf;
30b3c                 | ' 
30b3c                 | ' 	return FR_OK;
30b3c     00 FA 05 F6 | 	mov	result1, #0
30b40                 | LR__4770
30b40     A7 F0 03 F6 | 	mov	ptra, fp
30b44     B2 00 A0 FD | 	call	#popregs_
30b48                 | _fatfs_cc_create_name_ret
30b48     2D 00 64 FD | 	ret
30b4c                 | 
30b4c                 | _fatfs_cc_follow_path
30b4c     02 4A 05 F6 | 	mov	COUNT_, #2
30b50     A8 00 A0 FD | 	call	#pushregs_
30b54     18 F0 07 F1 | 	add	ptra, #24
30b58     04 4E 05 F1 | 	add	fp, #4
30b5c     A7 12 62 FC | 	wrlong	arg01, fp
30b60     04 4E 05 F1 | 	add	fp, #4
30b64     A7 14 62 FC | 	wrlong	arg02, fp
30b68     04 4E 85 F1 | 	sub	fp, #4
30b6c     A7 FA 01 FB | 	rdlong	result1, fp
30b70     FD 26 02 FB | 	rdlong	local01, result1
30b74     10 4E 05 F1 | 	add	fp, #16
30b78     A7 26 62 FC | 	wrlong	local01, fp
30b7c     14 4E 85 F1 | 	sub	fp, #20
30b80     97 24 48 FB | 	callpa	#(@LR__4782-@LR__4780)>>2,fcache_load_ptr_
30b84                 | ' )
30b84                 | ' {
30b84                 | ' 	FRESULT res;
30b84                 | ' 	BYTE ns;
30b84                 | ' 	FATFS *fs = dp->obj.fs;
30b84                 | ' #line 3034 "ff.c"
30b84                 | ' 	{
30b84                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
30b84                 | LR__4780
30b84     08 4E 05 F1 | 	add	fp, #8
30b88     A7 26 02 FB | 	rdlong	local01, fp
30b8c     08 4E 85 F1 | 	sub	fp, #8
30b90     13 27 C2 FA | 	rdbyte	local01, local01
30b94     2F 26 0E F2 | 	cmp	local01, #47 wz
30b98     18 00 90 AD |  if_e	jmp	#LR__4781
30b9c     08 4E 05 F1 | 	add	fp, #8
30ba0     A7 26 02 FB | 	rdlong	local01, fp
30ba4     08 4E 85 F1 | 	sub	fp, #8
30ba8     13 27 C2 FA | 	rdbyte	local01, local01
30bac     5C 26 0E F2 | 	cmp	local01, #92 wz
30bb0     18 00 90 5D |  if_ne	jmp	#LR__4783
30bb4                 | LR__4781
30bb4     08 4E 05 F1 | 	add	fp, #8
30bb8     A7 26 02 FB | 	rdlong	local01, fp
30bbc     01 26 06 F1 | 	add	local01, #1
30bc0     A7 26 62 FC | 	wrlong	local01, fp
30bc4     08 4E 85 F1 | 	sub	fp, #8
30bc8     B8 FF 9F FD | 	jmp	#LR__4780
30bcc                 | LR__4782
30bcc                 | LR__4783
30bcc     04 4E 05 F1 | 	add	fp, #4
30bd0     A7 26 02 FB | 	rdlong	local01, fp
30bd4     08 26 06 F1 | 	add	local01, #8
30bd8     13 01 68 FC | 	wrlong	#0, local01
30bdc     04 4E 05 F1 | 	add	fp, #4
30be0     A7 26 02 FB | 	rdlong	local01, fp
30be4     08 4E 85 F1 | 	sub	fp, #8
30be8     13 27 C2 FA | 	rdbyte	local01, local01
30bec     20 26 16 F2 | 	cmp	local01, #32 wc
30bf0     30 00 90 3D |  if_ae	jmp	#LR__4784
30bf4     04 4E 05 F1 | 	add	fp, #4
30bf8     A7 26 02 FB | 	rdlong	local01, fp
30bfc     2B 26 06 F1 | 	add	local01, #43
30c00     13 01 49 FC | 	wrbyte	#128, local01
30c04     A7 12 02 FB | 	rdlong	arg01, fp
30c08     04 4E 85 F1 | 	sub	fp, #4
30c0c     00 14 06 F6 | 	mov	arg02, #0
30c10     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
30c14     0C 4E 05 F1 | 	add	fp, #12
30c18     A7 FA 61 FC | 	wrlong	result1, fp
30c1c     0C 4E 85 F1 | 	sub	fp, #12
30c20     1C 01 90 FD | 	jmp	#LR__4788
30c24                 | LR__4784
30c24                 | ' 		for (;;) {
30c24                 | LR__4785
30c24     04 4E 05 F1 | 	add	fp, #4
30c28     A7 12 02 FB | 	rdlong	arg01, fp
30c2c     04 4E 05 F1 | 	add	fp, #4
30c30     A7 14 02 F6 | 	mov	arg02, fp
30c34     08 4E 85 F1 | 	sub	fp, #8
30c38     14 F6 BF FD | 	call	#_fatfs_cc_create_name
30c3c     0C 4E 05 F1 | 	add	fp, #12
30c40     A7 FA 61 FC | 	wrlong	result1, fp
30c44     00 FA 4D F2 | 	cmps	result1, #0 wz
30c48     0C 4E 85 F1 | 	sub	fp, #12
30c4c     F0 00 90 5D |  if_ne	jmp	#LR__4787
30c50     04 4E 05 F1 | 	add	fp, #4
30c54     A7 12 02 FB | 	rdlong	arg01, fp
30c58     04 4E 85 F1 | 	sub	fp, #4
30c5c     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
30c60     0C 4E 05 F1 | 	add	fp, #12
30c64     A7 FA 61 FC | 	wrlong	result1, fp
30c68     08 4E 85 F1 | 	sub	fp, #8
30c6c     A7 26 02 FB | 	rdlong	local01, fp
30c70     2B 26 06 F1 | 	add	local01, #43
30c74     13 27 C2 FA | 	rdbyte	local01, local01
30c78     0C 4E 05 F1 | 	add	fp, #12
30c7c     A7 26 42 FC | 	wrbyte	local01, fp
30c80     04 4E 85 F1 | 	sub	fp, #4
30c84     A7 26 0A FB | 	rdlong	local01, fp wz
30c88     0C 4E 85 F1 | 	sub	fp, #12
30c8c     34 00 90 AD |  if_e	jmp	#LR__4786
30c90     0C 4E 05 F1 | 	add	fp, #12
30c94     A7 26 02 FB | 	rdlong	local01, fp
30c98     0C 4E 85 F1 | 	sub	fp, #12
30c9c     04 26 0E F2 | 	cmp	local01, #4 wz
30ca0     9C 00 90 5D |  if_ne	jmp	#LR__4787
30ca4     10 4E 05 F1 | 	add	fp, #16
30ca8     A7 26 C2 FA | 	rdbyte	local01, fp
30cac     10 4E 85 F1 | 	sub	fp, #16
30cb0     04 26 CE F7 | 	test	local01, #4 wz
30cb4     0C 4E 05 A1 |  if_e	add	fp, #12
30cb8     A7 0A 68 AC |  if_e	wrlong	#5, fp
30cbc     0C 4E 85 A1 |  if_e	sub	fp, #12
30cc0                 | ' 					}
30cc0                 | ' 				}
30cc0                 | ' 				break;
30cc0     7C 00 90 FD | 	jmp	#LR__4787
30cc4                 | LR__4786
30cc4     10 4E 05 F1 | 	add	fp, #16
30cc8     A7 26 C2 FA | 	rdbyte	local01, fp
30ccc     10 4E 85 F1 | 	sub	fp, #16
30cd0     04 26 CE F7 | 	test	local01, #4 wz
30cd4     68 00 90 5D |  if_ne	jmp	#LR__4787
30cd8     04 4E 05 F1 | 	add	fp, #4
30cdc     A7 26 02 FB | 	rdlong	local01, fp
30ce0     04 4E 85 F1 | 	sub	fp, #4
30ce4     06 26 06 F1 | 	add	local01, #6
30ce8     13 27 C2 FA | 	rdbyte	local01, local01
30cec     10 26 CE F7 | 	test	local01, #16 wz
30cf0     0C 4E 05 A1 |  if_e	add	fp, #12
30cf4     A7 0A 68 AC |  if_e	wrlong	#5, fp
30cf8     0C 4E 85 A1 |  if_e	sub	fp, #12
30cfc                 | ' 				res = FR_NO_PATH; break;
30cfc     40 00 90 AD |  if_e	jmp	#LR__4787
30d00     04 4E 05 F1 | 	add	fp, #4
30d04     A7 28 02 FB | 	rdlong	local02, fp
30d08     14 27 02 F6 | 	mov	local01, local02
30d0c     10 4E 05 F1 | 	add	fp, #16
30d10     A7 14 02 FB | 	rdlong	arg02, fp
30d14     0A 13 02 F6 | 	mov	arg01, arg02
30d18     34 14 06 F1 | 	add	arg02, #52
30d1c     14 4E 85 F1 | 	sub	fp, #20
30d20     10 28 06 F1 | 	add	local02, #16
30d24     14 29 02 FB | 	rdlong	local02, local02
30d28     FF 29 06 F5 | 	and	local02, #511
30d2c     14 15 02 F1 | 	add	arg02, local02
30d30     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
30d34     08 26 06 F1 | 	add	local01, #8
30d38     13 FB 61 FC | 	wrlong	result1, local01
30d3c     E4 FE 9F FD | 	jmp	#LR__4785
30d40                 | LR__4787
30d40                 | LR__4788
30d40                 | ' 			}
30d40                 | ' #line 3090 "ff.c"
30d40                 | ' 			{
30d40                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
30d40                 | ' 			}
30d40                 | ' 		}
30d40                 | ' 	}
30d40                 | ' 
30d40                 | ' 	return res;
30d40     0C 4E 05 F1 | 	add	fp, #12
30d44     A7 FA 01 FB | 	rdlong	result1, fp
30d48     0C 4E 85 F1 | 	sub	fp, #12
30d4c     A7 F0 03 F6 | 	mov	ptra, fp
30d50     B2 00 A0 FD | 	call	#popregs_
30d54                 | _fatfs_cc_follow_path_ret
30d54     2D 00 64 FD | 	ret
30d58                 | 
30d58                 | _fatfs_cc_get_ldnumber
30d58     01 00 66 F6 | 	neg	_var01, #1
30d5c     09 03 0A FB | 	rdlong	_var02, arg01 wz
30d60     01 05 02 F6 | 	mov	_var03, _var02
30d64     01 FA 65 A6 |  if_e	neg	result1, #1
30d68     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
30d6c     97 10 48 FB | 	callpa	#(@LR__4791-@LR__4790)>>2,fcache_load_ptr_
30d70                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
30d70                 | LR__4790
30d70     02 07 C2 FA | 	rdbyte	_var04, _var03
30d74     03 FB E1 F8 | 	getbyte	result1, _var04, #0
30d78     20 FA 15 F2 | 	cmp	result1, #32 wc
30d7c     01 04 06 F1 | 	add	_var03, #1
30d80     03 09 02 36 |  if_ae	mov	_var05, _var04
30d84     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
30d88     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
30d8c     E0 FF 9F 1D |  if_a	jmp	#LR__4790
30d90                 | LR__4791
30d90     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
30d94     3A 06 0E F2 | 	cmp	_var04, #58 wz
30d98     40 00 90 5D |  if_ne	jmp	#LR__4793
30d9c     01 0A 06 F6 | 	mov	_var06, #1
30da0     01 09 C2 FA | 	rdbyte	_var05, _var02
30da4     30 08 16 F2 | 	cmp	_var05, #48 wc
30da8     1C 00 90 CD |  if_b	jmp	#LR__4792
30dac     01 09 C2 FA | 	rdbyte	_var05, _var02
30db0     3A 08 16 F2 | 	cmp	_var05, #58 wc
30db4     01 0D 02 C6 |  if_b	mov	_var07, _var02
30db8     02 0C 06 C1 |  if_b	add	_var07, #2
30dbc     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
30dc0     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
30dc4     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
30dc8                 | LR__4792
30dc8     01 0A 56 F2 | 	cmps	_var06, #1 wc
30dcc     05 01 02 C6 |  if_b	mov	_var01, _var06
30dd0     09 05 62 CC |  if_b	wrlong	_var03, arg01
30dd4                 | ' 			vol = i;
30dd4                 | ' 			*path = tt;
30dd4                 | ' 		}
30dd4                 | ' 		return vol;
30dd4     00 FB 01 F6 | 	mov	result1, _var01
30dd8     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
30ddc                 | LR__4793
30ddc                 | ' 	}
30ddc                 | ' #line 3170 "ff.c"
30ddc                 | ' 	vol = 0;
30ddc                 | ' 
30ddc                 | ' 	return vol;
30ddc     00 FA 05 F6 | 	mov	result1, #0
30de0                 | _fatfs_cc_get_ldnumber_ret
30de0     2D 00 64 FD | 	ret
30de4                 | 
30de4                 | _fatfs_cc_check_fs
30de4     04 4A 05 F6 | 	mov	COUNT_, #4
30de8     A8 00 A0 FD | 	call	#pushregs_
30dec     09 27 02 F6 | 	mov	local01, arg01
30df0     03 26 06 F1 | 	add	local01, #3
30df4     13 01 48 FC | 	wrbyte	#0, local01
30df8     2D 26 06 F1 | 	add	local01, #45
30dfc     FF FF FF FF 
30e00     13 FF 6B FC | 	wrlong	##-1, local01
30e04     30 26 86 F1 | 	sub	local01, #48
30e08     13 13 02 F6 | 	mov	arg01, local01
30e0c     18 D5 BF FD | 	call	#_fatfs_cc_move_window
30e10     00 FA 0D F2 | 	cmp	result1, #0 wz
30e14     04 FA 05 56 |  if_ne	mov	result1, #4
30e18     94 01 90 5D |  if_ne	jmp	#LR__4804
30e1c     34 26 06 F1 | 	add	local01, #52
30e20     13 13 02 F6 | 	mov	arg01, local01
30e24     FE 13 06 F1 | 	add	arg01, #510
30e28                 | ' {
30e28                 | ' 
30e28                 | ' 	return *((WORD*)ptr);
30e28     09 29 E2 FA | 	rdword	local02, arg01
30e2c     13 2B C2 FA | 	rdbyte	local03, local01
30e30     34 26 86 F1 | 	sub	local01, #52
30e34     15 2D E2 F8 | 	getbyte	local04, local03, #0
30e38     EB 2C 0E F2 | 	cmp	local04, #235 wz
30e3c     15 17 02 56 |  if_ne	mov	arg03, local03
30e40     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
30e44     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
30e48     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
30e4c     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
30e50     44 01 90 5D |  if_ne	jmp	#LR__4803
30e54     14 2D 32 F9 | 	getword	local04, local02, #0
30e58     55 00 00 FF 
30e5c     55 2C 0E F2 | 	cmp	local04, ##43605 wz
30e60     2C 00 90 5D |  if_ne	jmp	#LR__4800
30e64     34 26 06 F1 | 	add	local01, #52
30e68     13 13 02 F6 | 	mov	arg01, local01
30e6c     34 26 86 F1 | 	sub	local01, #52
30e70     52 12 06 F1 | 	add	arg01, #82
30e74     B1 01 00 FF 
30e78     C4 14 06 F6 | 	mov	arg02, ##@LR__5394
30e7c     08 16 06 F6 | 	mov	arg03, #8
30e80     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
30e84     00 FA 0D F2 | 	cmp	result1, #0 wz
30e88                 | ' 			return 0;
30e88     00 FA 05 A6 |  if_e	mov	result1, #0
30e8c     20 01 90 AD |  if_e	jmp	#LR__4804
30e90                 | LR__4800
30e90     34 26 06 F1 | 	add	local01, #52
30e94     13 13 02 F6 | 	mov	arg01, local01
30e98     0B 12 06 F1 | 	add	arg01, #11
30e9c                 | ' {
30e9c                 | ' 
30e9c                 | ' 	return *((WORD*)ptr);
30e9c     09 FB E1 FA | 	rdword	result1, arg01
30ea0     0D 26 06 F1 | 	add	local01, #13
30ea4     13 2B C2 FA | 	rdbyte	local03, local01
30ea8     41 26 86 F1 | 	sub	local01, #65
30eac     FD 2C 32 F9 | 	getword	local04, result1, #0
30eb0     FD 14 32 F9 | 	getword	arg02, result1, #0
30eb4     01 14 86 F1 | 	sub	arg02, #1
30eb8     0A 2D CA F7 | 	test	local04, arg02 wz
30ebc     D8 00 90 5D |  if_ne	jmp	#LR__4802
30ec0     FD 14 32 F9 | 	getword	arg02, result1, #0
30ec4     01 00 00 FF 
30ec8     00 14 16 F2 | 	cmp	arg02, ##512 wc
30ecc     C8 00 90 CD |  if_b	jmp	#LR__4802
30ed0     FD 14 32 F9 | 	getword	arg02, result1, #0
30ed4     01 00 00 FF 
30ed8     01 14 16 F2 | 	cmp	arg02, ##513 wc
30edc     B8 00 90 3D |  if_ae	jmp	#LR__4802
30ee0     15 13 02 F6 | 	mov	arg01, local03
30ee4     07 12 4E F7 | 	zerox	arg01, #7 wz
30ee8     AC 00 90 AD |  if_e	jmp	#LR__4802
30eec     15 13 E2 F8 | 	getbyte	arg01, local03, #0
30ef0     15 2B E2 F8 | 	getbyte	local03, local03, #0
30ef4     01 2A 86 F1 | 	sub	local03, #1
30ef8     15 13 CA F7 | 	test	arg01, local03 wz
30efc     98 00 90 5D |  if_ne	jmp	#LR__4802
30f00     34 26 06 F1 | 	add	local01, #52
30f04     13 13 02 F6 | 	mov	arg01, local01
30f08     34 26 86 F1 | 	sub	local01, #52
30f0c     0E 12 06 F1 | 	add	arg01, #14
30f10                 | ' {
30f10                 | ' 
30f10                 | ' 	return *((WORD*)ptr);
30f10     09 FB E9 FA | 	rdword	result1, arg01 wz
30f14     80 00 90 AD |  if_e	jmp	#LR__4802
30f18     44 26 06 F1 | 	add	local01, #68
30f1c     13 13 C2 FA | 	rdbyte	arg01, local01
30f20     44 26 86 F1 | 	sub	local01, #68
30f24     01 12 86 F1 | 	sub	arg01, #1
30f28     02 12 16 F2 | 	cmp	arg01, #2 wc
30f2c     68 00 90 3D |  if_ae	jmp	#LR__4802
30f30     34 26 06 F1 | 	add	local01, #52
30f34     13 13 02 F6 | 	mov	arg01, local01
30f38     34 26 86 F1 | 	sub	local01, #52
30f3c     11 12 06 F1 | 	add	arg01, #17
30f40                 | ' {
30f40                 | ' 
30f40                 | ' 	return *((WORD*)ptr);
30f40     09 FB E9 FA | 	rdword	result1, arg01 wz
30f44     50 00 90 AD |  if_e	jmp	#LR__4802
30f48     34 26 06 F1 | 	add	local01, #52
30f4c     13 13 02 F6 | 	mov	arg01, local01
30f50     34 26 86 F1 | 	sub	local01, #52
30f54     13 12 06 F1 | 	add	arg01, #19
30f58                 | ' {
30f58                 | ' 
30f58                 | ' 	return *((WORD*)ptr);
30f58     09 FB E1 FA | 	rdword	result1, arg01
30f5c     FD 2A 32 F9 | 	getword	local03, result1, #0
30f60     80 2A 16 F2 | 	cmp	local03, #128 wc
30f64     20 00 90 3D |  if_ae	jmp	#LR__4801
30f68     34 26 06 F1 | 	add	local01, #52
30f6c     13 13 02 F6 | 	mov	arg01, local01
30f70     34 26 86 F1 | 	sub	local01, #52
30f74     20 12 06 F1 | 	add	arg01, #32
30f78                 | ' {
30f78                 | ' 
30f78                 | ' 	return *((DWORD*)ptr);
30f78     09 FB 01 FB | 	rdlong	result1, arg01
30f7c     80 00 00 FF 
30f80     00 FA 15 F2 | 	cmp	result1, ##65536 wc
30f84     10 00 90 CD |  if_b	jmp	#LR__4802
30f88                 | LR__4801
30f88     4A 26 06 F1 | 	add	local01, #74
30f8c                 | ' {
30f8c                 | ' 
30f8c                 | ' 	return *((WORD*)ptr);
30f8c     13 FB E9 FA | 	rdword	result1, local01 wz
30f90                 | ' 			&& b != 0 && (b & (b - 1)) == 0
30f90                 | ' 			&& ld_word(fs->win +  14 ) != 0
30f90                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
30f90                 | ' 			&& ld_word(fs->win +  17 ) != 0
30f90                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
30f90                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
30f90                 | ' 				return 0;
30f90     00 FA 05 56 |  if_ne	mov	result1, #0
30f94     18 00 90 5D |  if_ne	jmp	#LR__4804
30f98                 | LR__4802
30f98                 | LR__4803
30f98                 | ' 		}
30f98                 | ' 	}
30f98                 | ' 	return sign == 0xAA55 ? 2 : 3;
30f98     14 2B 32 F9 | 	getword	local03, local02, #0
30f9c     55 00 00 FF 
30fa0     55 2A 0E F2 | 	cmp	local03, ##43605 wz
30fa4     02 2C 06 A6 |  if_e	mov	local04, #2
30fa8     03 2C 06 56 |  if_ne	mov	local04, #3
30fac     16 FB 01 F6 | 	mov	result1, local04
30fb0                 | LR__4804
30fb0     A7 F0 03 F6 | 	mov	ptra, fp
30fb4     B2 00 A0 FD | 	call	#popregs_
30fb8                 | _fatfs_cc_check_fs_ret
30fb8     2D 00 64 FD | 	ret
30fbc                 | 
30fbc                 | _fatfs_cc_find_volume
30fbc     05 4A 05 F6 | 	mov	COUNT_, #5
30fc0     A8 00 A0 FD | 	call	#pushregs_
30fc4     24 F0 07 F1 | 	add	ptra, #36
30fc8     09 27 02 F6 | 	mov	local01, arg01
30fcc     0A 29 02 F6 | 	mov	local02, arg02
30fd0     13 13 02 F6 | 	mov	arg01, local01
30fd4     00 14 06 F6 | 	mov	arg02, #0
30fd8     08 FE BF FD | 	call	#_fatfs_cc_check_fs
30fdc     02 FA 0D F2 | 	cmp	result1, #2 wz
30fe0     0C 00 90 AD |  if_e	jmp	#LR__4810
30fe4     03 FA 15 F2 | 	cmp	result1, #3 wc
30fe8     00 28 0E C2 |  if_b	cmp	local02, #0 wz
30fec     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4818
30ff0                 | LR__4810
30ff0                 | ' 	for (i = 0; i < 4; i++) {
30ff0     00 2A 06 F6 | 	mov	local03, #0
30ff4     97 26 48 FB | 	callpa	#(@LR__4812-@LR__4811)>>2,fcache_load_ptr_
30ff8                 | LR__4811
30ff8     04 2A 16 F2 | 	cmp	local03, #4 wc
30ffc     44 00 90 3D |  if_ae	jmp	#LR__4813
31000     15 2D 02 F6 | 	mov	local04, local03
31004     02 2C 66 F0 | 	shl	local04, #2
31008     14 4E 05 F1 | 	add	fp, #20
3100c     A7 2C 02 F1 | 	add	local04, fp
31010     34 26 06 F1 | 	add	local01, #52
31014     13 13 02 F6 | 	mov	arg01, local01
31018     34 26 86 F1 | 	sub	local01, #52
3101c     BE 13 06 F1 | 	add	arg01, #446
31020     15 15 02 F6 | 	mov	arg02, local03
31024     04 14 66 F0 | 	shl	arg02, #4
31028     0A 13 02 F1 | 	add	arg01, arg02
3102c     08 12 06 F1 | 	add	arg01, #8
31030                 | ' {
31030                 | ' 
31030                 | ' 	return *((DWORD*)ptr);
31030     09 FB 01 FB | 	rdlong	result1, arg01
31034     14 4E 85 F1 | 	sub	fp, #20
31038     16 FB 61 FC | 	wrlong	result1, local04
3103c     01 2A 06 F1 | 	add	local03, #1
31040     B4 FF 9F FD | 	jmp	#LR__4811
31044                 | LR__4812
31044                 | LR__4813
31044     00 28 0E F2 | 	cmp	local02, #0 wz
31048     14 2D 02 56 |  if_ne	mov	local04, local02
3104c     01 2C 86 51 |  if_ne	sub	local04, #1
31050     00 2C 06 A6 |  if_e	mov	local04, #0
31054     16 2B 02 F6 | 	mov	local03, local04
31058                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
31058                 | ' 	}
31058                 | ' 	i = part ? part - 1 : 0;
31058                 | ' 	do {
31058                 | LR__4814
31058     15 2D 02 F6 | 	mov	local04, local03
3105c     02 2C 66 F0 | 	shl	local04, #2
31060     14 4E 05 F1 | 	add	fp, #20
31064     A7 2C 02 F1 | 	add	local04, fp
31068     16 2D 0A FB | 	rdlong	local04, local04 wz
3106c     14 4E 85 F1 | 	sub	fp, #20
31070     28 00 90 AD |  if_e	jmp	#LR__4815
31074     15 2D 02 F6 | 	mov	local04, local03
31078     02 2C 66 F0 | 	shl	local04, #2
3107c     14 4E 05 F1 | 	add	fp, #20
31080     A7 2C 02 F1 | 	add	local04, fp
31084     16 15 02 FB | 	rdlong	arg02, local04
31088     13 13 02 F6 | 	mov	arg01, local01
3108c     14 4E 85 F1 | 	sub	fp, #20
31090     50 FD BF FD | 	call	#_fatfs_cc_check_fs
31094     FD 2C 02 F6 | 	mov	local04, result1
31098     04 00 90 FD | 	jmp	#LR__4816
3109c                 | LR__4815
3109c     03 2C 06 F6 | 	mov	local04, #3
310a0                 | LR__4816
310a0     16 2F 02 F6 | 	mov	local05, local04
310a4     00 28 0E F2 | 	cmp	local02, #0 wz
310a8     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
310ac     0C 00 90 8D |  if_c_and_z	jmp	#LR__4817
310b0     01 2A 06 A1 |  if_e	add	local03, #1
310b4     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
310b8     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4814
310bc                 | LR__4817
310bc                 | ' 	return fmt;
310bc     17 FB 01 F6 | 	mov	result1, local05
310c0                 | LR__4818
310c0     A7 F0 03 F6 | 	mov	ptra, fp
310c4     B2 00 A0 FD | 	call	#popregs_
310c8                 | _fatfs_cc_find_volume_ret
310c8     2D 00 64 FD | 	ret
310cc                 | 
310cc                 | _fatfs_cc_mount_volume
310cc     0B 4A 05 F6 | 	mov	COUNT_, #11
310d0     A8 00 A0 FD | 	call	#pushregs_
310d4     0A 27 02 F6 | 	mov	local01, arg02
310d8     0B 29 02 F6 | 	mov	local02, arg03
310dc     13 01 68 FC | 	wrlong	#0, local01
310e0     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
310e4     FD 2A 02 F6 | 	mov	local03, result1
310e8     00 2A 56 F2 | 	cmps	local03, #0 wc
310ec     0B FA 05 C6 |  if_b	mov	result1, #11
310f0     3C 05 90 CD |  if_b	jmp	#LR__4830
310f4     15 17 02 F6 | 	mov	arg03, local03
310f8     02 16 66 F0 | 	shl	arg03, #2
310fc     F2 16 02 F1 | 	add	arg03, objptr
31100     0B 2D 0A FB | 	rdlong	local04, arg03 wz
31104     0C FA 05 A6 |  if_e	mov	result1, #12
31108     24 05 90 AD |  if_e	jmp	#LR__4830
3110c     13 2D 62 FC | 	wrlong	local04, local01
31110     14 29 E2 F8 | 	getbyte	local02, local02, #0
31114     FE 28 06 F5 | 	and	local02, #254
31118     16 17 CA FA | 	rdbyte	arg03, local04 wz
3111c     4C 00 90 AD |  if_e	jmp	#LR__4821
31120     01 2C 06 F1 | 	add	local04, #1
31124     16 13 CA FA | 	rdbyte	arg01, local04 wz
31128     01 2C 86 F1 | 	sub	local04, #1
3112c     01 FA 05 56 |  if_ne	mov	result1, #1
31130                 | ' 
31130                 | ' 	return Stat;
31130     01 00 00 AF 
31134     20 E4 05 A1 |  if_e	add	objptr, ##544
31138     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
3113c     01 00 00 AF 
31140     20 E4 85 A1 |  if_e	sub	objptr, ##544
31144     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
31148     01 16 CE F7 | 	test	arg03, #1 wz
3114c     1C 00 90 5D |  if_ne	jmp	#LR__4820
31150     00 28 0E F2 | 	cmp	local02, #0 wz
31154     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
31158     04 FA CD 57 |  if_ne	test	result1, #4 wz
3115c                 | ' 				return FR_WRITE_PROTECTED;
3115c     0A FA 05 56 |  if_ne	mov	result1, #10
31160     CC 04 90 5D |  if_ne	jmp	#LR__4830
31164                 | ' 			}
31164                 | ' 			return FR_OK;
31164     00 FA 05 F6 | 	mov	result1, #0
31168     C4 04 90 FD | 	jmp	#LR__4830
3116c                 | LR__4820
3116c                 | LR__4821
3116c     16 01 48 FC | 	wrbyte	#0, local04
31170     01 2C 06 F1 | 	add	local04, #1
31174     16 2B 42 FC | 	wrbyte	local03, local04
31178     16 13 C2 FA | 	rdbyte	arg01, local04
3117c     01 2C 86 F1 | 	sub	local04, #1
31180     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
31184     FD 16 02 F6 | 	mov	arg03, result1
31188     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
3118c     01 2E CE F7 | 	test	local05, #1 wz
31190                 | ' 		return FR_NOT_READY;
31190     03 FA 05 56 |  if_ne	mov	result1, #3
31194     98 04 90 5D |  if_ne	jmp	#LR__4830
31198     00 28 0E F2 | 	cmp	local02, #0 wz
3119c     0B 2F 02 56 |  if_ne	mov	local05, arg03
311a0     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
311a4     04 2E CE 57 |  if_ne	test	local05, #4 wz
311a8                 | ' 		return FR_WRITE_PROTECTED;
311a8     0A FA 05 56 |  if_ne	mov	result1, #10
311ac     80 04 90 5D |  if_ne	jmp	#LR__4830
311b0     16 13 02 F6 | 	mov	arg01, local04
311b4     00 14 06 F6 | 	mov	arg02, #0
311b8     00 FE BF FD | 	call	#_fatfs_cc_find_volume
311bc     FD 12 02 F6 | 	mov	arg01, result1
311c0     04 12 0E F2 | 	cmp	arg01, #4 wz
311c4     01 FA 05 A6 |  if_e	mov	result1, #1
311c8     64 04 90 AD |  if_e	jmp	#LR__4830
311cc     02 12 16 F2 | 	cmp	arg01, #2 wc
311d0     0D FA 05 36 |  if_ae	mov	result1, #13
311d4     58 04 90 3D |  if_ae	jmp	#LR__4830
311d8     30 2C 06 F1 | 	add	local04, #48
311dc     16 31 02 FB | 	rdlong	local06, local04
311e0     04 2C 06 F1 | 	add	local04, #4
311e4     16 13 02 F6 | 	mov	arg01, local04
311e8     34 2C 86 F1 | 	sub	local04, #52
311ec     0B 12 06 F1 | 	add	arg01, #11
311f0                 | ' {
311f0                 | ' 
311f0                 | ' 	return *((WORD*)ptr);
311f0     09 FB E1 FA | 	rdword	result1, arg01
311f4     01 00 00 FF 
311f8     00 FA 0D F2 | 	cmp	result1, ##512 wz
311fc     0D FA 05 56 |  if_ne	mov	result1, #13
31200     2C 04 90 5D |  if_ne	jmp	#LR__4830
31204     34 2C 06 F1 | 	add	local04, #52
31208     16 13 02 F6 | 	mov	arg01, local04
3120c     34 2C 86 F1 | 	sub	local04, #52
31210     16 12 06 F1 | 	add	arg01, #22
31214                 | ' {
31214                 | ' 
31214                 | ' 	return *((WORD*)ptr);
31214     09 FB E1 FA | 	rdword	result1, arg01
31218     FD 32 0A F6 | 	mov	local07, result1 wz
3121c     18 00 90 5D |  if_ne	jmp	#LR__4822
31220     34 2C 06 F1 | 	add	local04, #52
31224     16 13 02 F6 | 	mov	arg01, local04
31228     34 2C 86 F1 | 	sub	local04, #52
3122c     24 12 06 F1 | 	add	arg01, #36
31230                 | ' {
31230                 | ' 
31230                 | ' 	return *((DWORD*)ptr);
31230     09 FB 01 FB | 	rdlong	result1, arg01
31234     FD 32 02 F6 | 	mov	local07, result1
31238                 | LR__4822
31238     1C 2C 06 F1 | 	add	local04, #28
3123c     16 33 62 FC | 	wrlong	local07, local04
31240     28 2C 06 F1 | 	add	local04, #40
31244     16 2F C2 FA | 	rdbyte	local05, local04
31248     42 2C 86 F1 | 	sub	local04, #66
3124c     16 2F 42 FC | 	wrbyte	local05, local04
31250     16 2F C2 FA | 	rdbyte	local05, local04
31254     02 2C 86 F1 | 	sub	local04, #2
31258     01 2E 0E F2 | 	cmp	local05, #1 wz
3125c     02 2C 06 51 |  if_ne	add	local04, #2
31260     16 2F C2 5A |  if_ne	rdbyte	local05, local04
31264     02 2C 86 51 |  if_ne	sub	local04, #2
31268     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
3126c     0D FA 05 56 |  if_ne	mov	result1, #13
31270     BC 03 90 5D |  if_ne	jmp	#LR__4830
31274     02 2C 06 F1 | 	add	local04, #2
31278     16 2F C2 FA | 	rdbyte	local05, local04
3127c     17 33 02 FD | 	qmul	local07, local05
31280     3F 2C 06 F1 | 	add	local04, #63
31284     16 2F C2 FA | 	rdbyte	local05, local04
31288     37 2C 86 F1 | 	sub	local04, #55
3128c     16 2F 52 FC | 	wrword	local05, local04
31290     16 2F EA FA | 	rdword	local05, local04 wz
31294     0A 2C 86 F1 | 	sub	local04, #10
31298     18 32 62 FD | 	getqx	local07
3129c     20 00 90 AD |  if_e	jmp	#LR__4823
312a0     0A 2C 06 F1 | 	add	local04, #10
312a4     16 2F E2 FA | 	rdword	local05, local04
312a8     17 2B 32 F9 | 	getword	local03, local05, #0
312ac     0A 2C 86 F1 | 	sub	local04, #10
312b0     17 2F 32 F9 | 	getword	local05, local05, #0
312b4     01 2E 86 F1 | 	sub	local05, #1
312b8     17 2B CA F7 | 	test	local03, local05 wz
312bc     08 00 90 AD |  if_e	jmp	#LR__4824
312c0                 | LR__4823
312c0     0D FA 05 F6 | 	mov	result1, #13
312c4     68 03 90 FD | 	jmp	#LR__4830
312c8                 | LR__4824
312c8     34 2C 06 F1 | 	add	local04, #52
312cc     16 13 02 F6 | 	mov	arg01, local04
312d0     11 12 06 F1 | 	add	arg01, #17
312d4                 | ' {
312d4                 | ' 
312d4                 | ' 	return *((WORD*)ptr);
312d4     09 FB E1 FA | 	rdword	result1, arg01
312d8     2C 2C 86 F1 | 	sub	local04, #44
312dc     16 FB 51 FC | 	wrword	result1, local04
312e0     16 2F E2 FA | 	rdword	local05, local04
312e4     08 2C 86 F1 | 	sub	local04, #8
312e8     17 13 52 F6 | 	abs	arg01, local05 wc
312ec     09 13 42 F8 | 	getnib	arg01, arg01, #0
312f0     09 13 8A F6 | 	negc	arg01, arg01 wz
312f4     0D FA 05 56 |  if_ne	mov	result1, #13
312f8     34 03 90 5D |  if_ne	jmp	#LR__4830
312fc     34 2C 06 F1 | 	add	local04, #52
31300     16 13 02 F6 | 	mov	arg01, local04
31304     34 2C 86 F1 | 	sub	local04, #52
31308     13 12 06 F1 | 	add	arg01, #19
3130c                 | ' {
3130c                 | ' 
3130c                 | ' 	return *((WORD*)ptr);
3130c     09 FB E1 FA | 	rdword	result1, arg01
31310     FD 34 0A F6 | 	mov	local08, result1 wz
31314     34 2C 06 A1 |  if_e	add	local04, #52
31318     16 13 02 A6 |  if_e	mov	arg01, local04
3131c     34 2C 86 A1 |  if_e	sub	local04, #52
31320     20 12 06 A1 |  if_e	add	arg01, #32
31324                 | ' {
31324                 | ' 
31324                 | ' 	return *((DWORD*)ptr);
31324     09 35 02 AB |  if_e	rdlong	local08, arg01
31328     34 2C 06 F1 | 	add	local04, #52
3132c     16 13 02 F6 | 	mov	arg01, local04
31330     34 2C 86 F1 | 	sub	local04, #52
31334     0E 12 06 F1 | 	add	arg01, #14
31338                 | ' {
31338                 | ' 
31338                 | ' 	return *((WORD*)ptr);
31338     09 FB E1 FA | 	rdword	result1, arg01
3133c     FD 12 02 F6 | 	mov	arg01, result1
31340     09 2F 02 F6 | 	mov	local05, arg01
31344     0F 2E 4E F7 | 	zerox	local05, #15 wz
31348     0D FA 05 A6 |  if_e	mov	result1, #13
3134c     E0 02 90 AD |  if_e	jmp	#LR__4830
31350     09 37 32 F9 | 	getword	local09, arg01, #0
31354     19 37 02 F1 | 	add	local09, local07
31358     08 2C 06 F1 | 	add	local04, #8
3135c     16 2F E2 FA | 	rdword	local05, local04
31360     08 2C 86 F1 | 	sub	local04, #8
31364     17 2F 52 F6 | 	abs	local05, local05 wc
31368     04 2E 46 F0 | 	shr	local05, #4
3136c     17 37 82 F3 | 	sumc	local09, local05
31370     1B 35 12 F2 | 	cmp	local08, local09 wc
31374     0D FA 05 C6 |  if_b	mov	result1, #13
31378     B4 02 90 CD |  if_b	jmp	#LR__4830
3137c     1B 35 82 F1 | 	sub	local08, local09
31380     0A 2C 06 F1 | 	add	local04, #10
31384     16 2F E2 FA | 	rdword	local05, local04
31388     17 35 12 FD | 	qdiv	local08, local05
3138c     0A 2C 86 F1 | 	sub	local04, #10
31390     18 2E 62 FD | 	getqx	local05
31394     00 2E 0E F2 | 	cmp	local05, #0 wz
31398     0D FA 05 A6 |  if_e	mov	result1, #13
3139c     90 02 90 AD |  if_e	jmp	#LR__4830
313a0     00 38 06 F6 | 	mov	local10, #0
313a4     FF FF 07 FF 
313a8     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
313ac     03 38 06 C6 |  if_b	mov	local10, #3
313b0     7F 00 00 FF 
313b4     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
313b8     02 38 06 C6 |  if_b	mov	local10, #2
313bc     07 00 00 FF 
313c0     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
313c4     01 38 06 C6 |  if_b	mov	local10, #1
313c8     00 38 0E F2 | 	cmp	local10, #0 wz
313cc     0D FA 05 A6 |  if_e	mov	result1, #13
313d0     5C 02 90 AD |  if_e	jmp	#LR__4830
313d4     02 2E 06 F1 | 	add	local05, #2
313d8     18 2C 06 F1 | 	add	local04, #24
313dc     16 2F 62 FC | 	wrlong	local05, local04
313e0     08 2C 06 F1 | 	add	local04, #8
313e4     16 31 62 FC | 	wrlong	local06, local04
313e8     18 2F 02 F6 | 	mov	local05, local06
313ec     09 13 32 F9 | 	getword	arg01, arg01, #0
313f0     09 2F 02 F1 | 	add	local05, arg01
313f4     04 2C 06 F1 | 	add	local04, #4
313f8     16 2F 62 FC | 	wrlong	local05, local04
313fc     18 2F 02 F6 | 	mov	local05, local06
31400     1B 2F 02 F1 | 	add	local05, local09
31404     08 2C 06 F1 | 	add	local04, #8
31408     16 2F 62 FC | 	wrlong	local05, local04
3140c     2C 2C 86 F1 | 	sub	local04, #44
31410     03 38 0E F2 | 	cmp	local10, #3 wz
31414     5C 00 90 5D |  if_ne	jmp	#LR__4825
31418     34 2C 06 F1 | 	add	local04, #52
3141c     16 13 02 F6 | 	mov	arg01, local04
31420     34 2C 86 F1 | 	sub	local04, #52
31424     2A 12 06 F1 | 	add	arg01, #42
31428                 | ' {
31428                 | ' 
31428                 | ' 	return *((WORD*)ptr);
31428     09 FB E9 FA | 	rdword	result1, arg01 wz
3142c     0D FA 05 56 |  if_ne	mov	result1, #13
31430     FC 01 90 5D |  if_ne	jmp	#LR__4830
31434     08 2C 06 F1 | 	add	local04, #8
31438     16 2F EA FA | 	rdword	local05, local04 wz
3143c     08 2C 86 F1 | 	sub	local04, #8
31440     0D FA 05 56 |  if_ne	mov	result1, #13
31444     E8 01 90 5D |  if_ne	jmp	#LR__4830
31448     34 2C 06 F1 | 	add	local04, #52
3144c     16 13 02 F6 | 	mov	arg01, local04
31450     2C 12 06 F1 | 	add	arg01, #44
31454                 | ' {
31454                 | ' 
31454                 | ' 	return *((DWORD*)ptr);
31454     09 FB 01 FB | 	rdlong	result1, arg01
31458     0C 2C 86 F1 | 	sub	local04, #12
3145c     16 FB 61 FC | 	wrlong	result1, local04
31460     10 2C 86 F1 | 	sub	local04, #16
31464     16 3B 02 FB | 	rdlong	local11, local04
31468     18 2C 86 F1 | 	sub	local04, #24
3146c     02 3A 66 F0 | 	shl	local11, #2
31470     6C 00 90 FD | 	jmp	#LR__4827
31474                 | LR__4825
31474     08 2C 06 F1 | 	add	local04, #8
31478     16 2F EA FA | 	rdword	local05, local04 wz
3147c     08 2C 86 F1 | 	sub	local04, #8
31480     0D FA 05 A6 |  if_e	mov	result1, #13
31484     A8 01 90 AD |  if_e	jmp	#LR__4830
31488     24 2C 06 F1 | 	add	local04, #36
3148c     16 2F 02 FB | 	rdlong	local05, local04
31490     19 2F 02 F1 | 	add	local05, local07
31494     04 2C 06 F1 | 	add	local04, #4
31498     16 2F 62 FC | 	wrlong	local05, local04
3149c     28 2C 86 F1 | 	sub	local04, #40
314a0     02 38 0E F2 | 	cmp	local10, #2 wz
314a4     18 2C 06 A1 |  if_e	add	local04, #24
314a8     16 2F 02 AB |  if_e	rdlong	local05, local04
314ac     18 2C 86 A1 |  if_e	sub	local04, #24
314b0     01 2E 66 A0 |  if_e	shl	local05, #1
314b4     24 00 90 AD |  if_e	jmp	#LR__4826
314b8     18 2C 06 F1 | 	add	local04, #24
314bc     16 3B 02 FB | 	rdlong	local11, local04
314c0     1D 2F 02 F6 | 	mov	local05, local11
314c4     01 2E 66 F0 | 	shl	local05, #1
314c8     1D 2F 02 F1 | 	add	local05, local11
314cc     01 2E 46 F0 | 	shr	local05, #1
314d0     18 2C 86 F1 | 	sub	local04, #24
314d4     01 3A 06 F5 | 	and	local11, #1
314d8     1D 2F 02 F1 | 	add	local05, local11
314dc                 | LR__4826
314dc     17 3B 02 F6 | 	mov	local11, local05
314e0                 | LR__4827
314e0     FF 3B 06 F1 | 	add	local11, #511
314e4     09 3A 46 F0 | 	shr	local11, #9
314e8     1C 2C 06 F1 | 	add	local04, #28
314ec     16 17 02 FB | 	rdlong	arg03, local04
314f0     1C 2C 86 F1 | 	sub	local04, #28
314f4     1D 17 12 F2 | 	cmp	arg03, local11 wc
314f8     0D FA 05 C6 |  if_b	mov	result1, #13
314fc     30 01 90 CD |  if_b	jmp	#LR__4830
31500     14 2C 06 F1 | 	add	local04, #20
31504     FF FF FF FF 
31508     16 FF 6B FC | 	wrlong	##-1, local04
3150c     04 2C 86 F1 | 	sub	local04, #4
31510     FF FF FF FF 
31514     16 FF 6B FC | 	wrlong	##-1, local04
31518     0C 2C 86 F1 | 	sub	local04, #12
3151c     16 01 49 FC | 	wrbyte	#128, local04
31520     04 2C 86 F1 | 	sub	local04, #4
31524     03 38 0E F2 | 	cmp	local10, #3 wz
31528     D0 00 90 5D |  if_ne	jmp	#LR__4829
3152c     34 2C 06 F1 | 	add	local04, #52
31530     16 13 02 F6 | 	mov	arg01, local04
31534     34 2C 86 F1 | 	sub	local04, #52
31538     30 12 06 F1 | 	add	arg01, #48
3153c                 | ' {
3153c                 | ' 
3153c                 | ' 	return *((WORD*)ptr);
3153c     09 FB E1 FA | 	rdword	result1, arg01
31540     FD 2E 32 F9 | 	getword	local05, result1, #0
31544     01 2E 0E F2 | 	cmp	local05, #1 wz
31548     B0 00 90 5D |  if_ne	jmp	#LR__4829
3154c     01 30 06 F1 | 	add	local06, #1
31550     16 13 02 F6 | 	mov	arg01, local04
31554     18 15 02 F6 | 	mov	arg02, local06
31558     CC CD BF FD | 	call	#_fatfs_cc_move_window
3155c     00 FA 0D F2 | 	cmp	result1, #0 wz
31560     98 00 90 5D |  if_ne	jmp	#LR__4829
31564     04 2C 06 F1 | 	add	local04, #4
31568     16 01 48 FC | 	wrbyte	#0, local04
3156c     30 2C 06 F1 | 	add	local04, #48
31570     16 13 02 F6 | 	mov	arg01, local04
31574     34 2C 86 F1 | 	sub	local04, #52
31578     FE 13 06 F1 | 	add	arg01, #510
3157c                 | ' {
3157c                 | ' 
3157c                 | ' 	return *((WORD*)ptr);
3157c     09 FB E1 FA | 	rdword	result1, arg01
31580     FD 2E 32 F9 | 	getword	local05, result1, #0
31584     55 00 00 FF 
31588     55 2E 0E F2 | 	cmp	local05, ##43605 wz
3158c     34 2C 06 A1 |  if_e	add	local04, #52
31590     16 13 02 A6 |  if_e	mov	arg01, local04
31594     34 2C 86 A1 |  if_e	sub	local04, #52
31598                 | ' {
31598                 | ' 
31598                 | ' 	return *((DWORD*)ptr);
31598     09 FB 01 AB |  if_e	rdlong	result1, arg01
3159c     A9 B0 20 AF 
315a0     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
315a4     54 00 90 5D |  if_ne	jmp	#LR__4828
315a8     34 2C 06 F1 | 	add	local04, #52
315ac     16 13 02 F6 | 	mov	arg01, local04
315b0     34 2C 86 F1 | 	sub	local04, #52
315b4     E4 13 06 F1 | 	add	arg01, #484
315b8                 | ' {
315b8                 | ' 
315b8                 | ' 	return *((DWORD*)ptr);
315b8     09 FB 01 FB | 	rdlong	result1, arg01
315bc     B9 A0 30 FF 
315c0     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
315c4     34 00 90 5D |  if_ne	jmp	#LR__4828
315c8     34 2C 06 F1 | 	add	local04, #52
315cc     16 13 02 F6 | 	mov	arg01, local04
315d0     E8 13 06 F1 | 	add	arg01, #488
315d4                 | ' {
315d4                 | ' 
315d4                 | ' 	return *((DWORD*)ptr);
315d4     09 FB 01 FB | 	rdlong	result1, arg01
315d8     20 2C 86 F1 | 	sub	local04, #32
315dc     16 FB 61 FC | 	wrlong	result1, local04
315e0     20 2C 06 F1 | 	add	local04, #32
315e4     16 13 02 F6 | 	mov	arg01, local04
315e8     EC 13 06 F1 | 	add	arg01, #492
315ec                 | ' {
315ec                 | ' 
315ec                 | ' 	return *((DWORD*)ptr);
315ec     09 FB 01 FB | 	rdlong	result1, arg01
315f0     24 2C 86 F1 | 	sub	local04, #36
315f4     16 FB 61 FC | 	wrlong	result1, local04
315f8     10 2C 86 F1 | 	sub	local04, #16
315fc                 | LR__4828
315fc                 | LR__4829
315fc     16 39 42 FC | 	wrbyte	local10, local04
31600     04 E4 05 F1 | 	add	objptr, #4
31604     F2 2E E2 FA | 	rdword	local05, objptr
31608     01 2E 06 F1 | 	add	local05, #1
3160c     F2 2E 52 FC | 	wrword	local05, objptr
31610     F2 3A E2 FA | 	rdword	local11, objptr
31614     06 2C 06 F1 | 	add	local04, #6
31618     16 3B 52 FC | 	wrword	local11, local04
3161c     04 E4 05 F1 | 	add	objptr, #4
31620     06 2C 06 F1 | 	add	local04, #6
31624     16 E5 61 FC | 	wrlong	objptr, local04
31628                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
31628                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
31628                 | ' 			{
31628                 | ' 
31628                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
31628                 | ' 
31628                 | ' 
31628                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
31628                 | ' 
31628                 | ' 			}
31628                 | ' 		}
31628                 | ' 
31628                 | ' 
31628                 | ' 	}
31628                 | ' 
31628                 | ' 	fs->fs_type = (BYTE)fmt;
31628                 | ' 	fs->id = ++Fsid;
31628                 | ' 
31628                 | ' 	fs->lfnbuf = LfnBuf;
31628                 | ' #line 3567 "ff.c"
31628                 | ' 	return FR_OK;
31628     00 FA 05 F6 | 	mov	result1, #0
3162c     08 E4 85 F1 | 	sub	objptr, #8
31630                 | LR__4830
31630     A7 F0 03 F6 | 	mov	ptra, fp
31634     B2 00 A0 FD | 	call	#popregs_
31638                 | _fatfs_cc_mount_volume_ret
31638     2D 00 64 FD | 	ret
3163c                 | 
3163c                 | _fatfs_cc_validate
3163c     09 01 0A F6 | 	mov	_var01, arg01 wz
31640     09 02 06 F6 | 	mov	_var02, #9
31644     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
31648     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
3164c     50 00 90 AD |  if_e	jmp	#LR__4840
31650     04 00 06 F1 | 	add	_var01, #4
31654     00 07 E2 FA | 	rdword	_var04, _var01
31658     04 00 86 F1 | 	sub	_var01, #4
3165c     00 13 02 FB | 	rdlong	arg01, _var01
31660     06 12 06 F1 | 	add	arg01, #6
31664     09 FB E1 FA | 	rdword	result1, arg01
31668     FD 06 0A F2 | 	cmp	_var04, result1 wz
3166c     30 00 90 5D |  if_ne	jmp	#LR__4840
31670     00 07 02 FB | 	rdlong	_var04, _var01
31674     01 06 06 F1 | 	add	_var04, #1
31678     03 13 CA FA | 	rdbyte	arg01, _var04 wz
3167c     01 FA 05 56 |  if_ne	mov	result1, #1
31680                 | ' 
31680                 | ' 	return Stat;
31680     01 00 00 AF 
31684     20 E4 05 A1 |  if_e	add	objptr, ##544
31688     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
3168c     01 00 00 AF 
31690     20 E4 85 A1 |  if_e	sub	objptr, ##544
31694     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
31698     01 04 CE F7 | 	test	_var03, #1 wz
3169c     00 02 06 A6 |  if_e	mov	_var02, #0
316a0                 | LR__4840
316a0     00 02 0E F2 | 	cmp	_var02, #0 wz
316a4     00 05 02 AB |  if_e	rdlong	_var03, _var01
316a8     00 04 06 56 |  if_ne	mov	_var03, #0
316ac     0A 05 62 FC | 	wrlong	_var03, arg02
316b0                 | ' 			res = FR_OK;
316b0                 | ' 		}
316b0                 | ' 
316b0                 | ' 	}
316b0                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
316b0                 | ' 	return res;
316b0     01 FB 01 F6 | 	mov	result1, _var02
316b4                 | _fatfs_cc_validate_ret
316b4     2D 00 64 FD | 	ret
316b8                 | 
316b8                 | _fatfs_cc_f_mount
316b8     01 4A 05 F6 | 	mov	COUNT_, #1
316bc     A8 00 A0 FD | 	call	#pushregs_
316c0     20 F0 07 F1 | 	add	ptra, #32
316c4     04 4E 05 F1 | 	add	fp, #4
316c8     A7 12 62 FC | 	wrlong	arg01, fp
316cc     04 4E 05 F1 | 	add	fp, #4
316d0     A7 14 62 FC | 	wrlong	arg02, fp
316d4     04 4E 05 F1 | 	add	fp, #4
316d8     A7 16 42 FC | 	wrbyte	arg03, fp
316dc     04 4E 85 F1 | 	sub	fp, #4
316e0     A7 16 02 FB | 	rdlong	arg03, fp
316e4     14 4E 05 F1 | 	add	fp, #20
316e8     A7 16 62 FC | 	wrlong	arg03, fp
316ec     A7 12 02 F6 | 	mov	arg01, fp
316f0     1C 4E 85 F1 | 	sub	fp, #28
316f4     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
316f8     14 4E 05 F1 | 	add	fp, #20
316fc     A7 FA 61 FC | 	wrlong	result1, fp
31700     14 4E 85 F1 | 	sub	fp, #20
31704     00 FA 55 F2 | 	cmps	result1, #0 wc
31708     0B FA 05 C6 |  if_b	mov	result1, #11
3170c     C0 00 90 CD |  if_b	jmp	#LR__4851
31710     14 4E 05 F1 | 	add	fp, #20
31714     A7 16 02 FB | 	rdlong	arg03, fp
31718     02 16 66 F0 | 	shl	arg03, #2
3171c     F2 16 02 F1 | 	add	arg03, objptr
31720     0B 17 0A FB | 	rdlong	arg03, arg03 wz
31724     04 4E 85 F1 | 	sub	fp, #4
31728     A7 16 62 FC | 	wrlong	arg03, fp
3172c     10 4E 85 F1 | 	sub	fp, #16
31730     28 00 90 AD |  if_e	jmp	#LR__4850
31734     10 4E 05 F1 | 	add	fp, #16
31738     A7 16 02 FB | 	rdlong	arg03, fp
3173c     10 4E 85 F1 | 	sub	fp, #16
31740     01 16 06 F1 | 	add	arg03, #1
31744     0B 13 C2 FA | 	rdbyte	arg01, arg03
31748     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
3174c     10 4E 05 F1 | 	add	fp, #16
31750     A7 16 02 FB | 	rdlong	arg03, fp
31754     10 4E 85 F1 | 	sub	fp, #16
31758     0B 01 48 FC | 	wrbyte	#0, arg03
3175c                 | LR__4850
3175c     04 4E 05 F1 | 	add	fp, #4
31760     A7 26 0A FB | 	rdlong	local01, fp wz
31764     04 4E 85 F1 | 	sub	fp, #4
31768     04 4E 05 51 |  if_ne	add	fp, #4
3176c     A7 26 02 5B |  if_ne	rdlong	local01, fp
31770     04 4E 85 51 |  if_ne	sub	fp, #4
31774     13 01 48 5C |  if_ne	wrbyte	#0, local01
31778     14 4E 05 F1 | 	add	fp, #20
3177c     A7 26 02 FB | 	rdlong	local01, fp
31780     02 26 66 F0 | 	shl	local01, #2
31784     F2 26 02 F1 | 	add	local01, objptr
31788     10 4E 85 F1 | 	sub	fp, #16
3178c     A7 16 02 FB | 	rdlong	arg03, fp
31790     13 17 62 FC | 	wrlong	arg03, local01
31794     08 4E 05 F1 | 	add	fp, #8
31798     A7 26 CA FA | 	rdbyte	local01, fp wz
3179c     0C 4E 85 F1 | 	sub	fp, #12
317a0     00 FA 05 A6 |  if_e	mov	result1, #0
317a4     28 00 90 AD |  if_e	jmp	#LR__4851
317a8     08 4E 05 F1 | 	add	fp, #8
317ac     A7 12 02 F6 | 	mov	arg01, fp
317b0     04 4E 85 F1 | 	sub	fp, #4
317b4     A7 14 02 F6 | 	mov	arg02, fp
317b8     04 4E 85 F1 | 	sub	fp, #4
317bc     00 16 06 F6 | 	mov	arg03, #0
317c0     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
317c4     18 4E 05 F1 | 	add	fp, #24
317c8     A7 FA 61 FC | 	wrlong	result1, fp
317cc                 | ' 
317cc                 | ' 	res = mount_volume(&path, &fs, 0);
317cc                 | ' 	return res ;
317cc     18 4E 85 F1 | 	sub	fp, #24
317d0                 | LR__4851
317d0     A7 F0 03 F6 | 	mov	ptra, fp
317d4     B2 00 A0 FD | 	call	#popregs_
317d8                 | _fatfs_cc_f_mount_ret
317d8     2D 00 64 FD | 	ret
317dc                 | 
317dc                 | _fatfs_cc_f_open
317dc     02 4A 05 F6 | 	mov	COUNT_, #2
317e0     A8 00 A0 FD | 	call	#pushregs_
317e4     60 F0 07 F1 | 	add	ptra, #96
317e8     04 4E 05 F1 | 	add	fp, #4
317ec     A7 12 62 FC | 	wrlong	arg01, fp
317f0     04 4E 05 F1 | 	add	fp, #4
317f4     A7 14 62 FC | 	wrlong	arg02, fp
317f8     04 4E 05 F1 | 	add	fp, #4
317fc     A7 16 42 FC | 	wrbyte	arg03, fp
31800     08 4E 85 F1 | 	sub	fp, #8
31804     A7 18 0A FB | 	rdlong	arg04, fp wz
31808     04 4E 85 F1 | 	sub	fp, #4
3180c     09 FA 05 A6 |  if_e	mov	result1, #9
31810     98 06 90 AD |  if_e	jmp	#LR__4877
31814     0C 4E 05 F1 | 	add	fp, #12
31818     A7 18 C2 FA | 	rdbyte	arg04, fp
3181c     3F 18 06 F5 | 	and	arg04, #63
31820     A7 18 42 FC | 	wrbyte	arg04, fp
31824     04 4E 85 F1 | 	sub	fp, #4
31828     A7 12 02 F6 | 	mov	arg01, fp
3182c     3C 4E 05 F1 | 	add	fp, #60
31830     A7 14 02 F6 | 	mov	arg02, fp
31834     38 4E 85 F1 | 	sub	fp, #56
31838     A7 16 C2 FA | 	rdbyte	arg03, fp
3183c     0C 4E 85 F1 | 	sub	fp, #12
31840     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
31844     10 4E 05 F1 | 	add	fp, #16
31848     A7 FA 61 FC | 	wrlong	result1, fp
3184c     10 4E 85 F1 | 	sub	fp, #16
31850     00 FA 0D F2 | 	cmp	result1, #0 wz
31854     2C 06 90 5D |  if_ne	jmp	#LR__4876
31858     44 4E 05 F1 | 	add	fp, #68
3185c     A7 18 02 FB | 	rdlong	arg04, fp
31860     30 4E 85 F1 | 	sub	fp, #48
31864     A7 18 62 FC | 	wrlong	arg04, fp
31868     A7 12 02 F6 | 	mov	arg01, fp
3186c     0C 4E 85 F1 | 	sub	fp, #12
31870     A7 26 02 FB | 	rdlong	local01, fp
31874     08 4E 85 F1 | 	sub	fp, #8
31878     13 15 02 F6 | 	mov	arg02, local01
3187c     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
31880     10 4E 05 F1 | 	add	fp, #16
31884     A7 FA 61 FC | 	wrlong	result1, fp
31888     10 4E 85 F1 | 	sub	fp, #16
3188c     00 FA 0D F2 | 	cmp	result1, #0 wz
31890     1C 00 90 5D |  if_ne	jmp	#LR__4860
31894     3F 4E 05 F1 | 	add	fp, #63
31898     A7 18 C2 FA | 	rdbyte	arg04, fp
3189c     3F 4E 85 F1 | 	sub	fp, #63
318a0     80 18 CE F7 | 	test	arg04, #128 wz
318a4     10 4E 05 51 |  if_ne	add	fp, #16
318a8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
318ac     10 4E 85 51 |  if_ne	sub	fp, #16
318b0                 | LR__4860
318b0     0C 4E 05 F1 | 	add	fp, #12
318b4     A7 18 C2 FA | 	rdbyte	arg04, fp
318b8     0C 4E 85 F1 | 	sub	fp, #12
318bc     1C 18 CE F7 | 	test	arg04, #28 wz
318c0     F0 01 90 AD |  if_e	jmp	#LR__4865
318c4     10 4E 05 F1 | 	add	fp, #16
318c8     A7 26 0A FB | 	rdlong	local01, fp wz
318cc     10 4E 85 F1 | 	sub	fp, #16
318d0     48 00 90 AD |  if_e	jmp	#LR__4862
318d4     10 4E 05 F1 | 	add	fp, #16
318d8     A7 18 02 FB | 	rdlong	arg04, fp
318dc     10 4E 85 F1 | 	sub	fp, #16
318e0     04 18 0E F2 | 	cmp	arg04, #4 wz
318e4     1C 00 90 5D |  if_ne	jmp	#LR__4861
318e8     14 4E 05 F1 | 	add	fp, #20
318ec     A7 12 02 F6 | 	mov	arg01, fp
318f0     14 4E 85 F1 | 	sub	fp, #20
318f4     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
318f8     10 4E 05 F1 | 	add	fp, #16
318fc     A7 FA 61 FC | 	wrlong	result1, fp
31900     10 4E 85 F1 | 	sub	fp, #16
31904                 | LR__4861
31904     0C 4E 05 F1 | 	add	fp, #12
31908     A7 26 C2 FA | 	rdbyte	local01, fp
3190c     08 26 46 F5 | 	or	local01, #8
31910     A7 26 42 FC | 	wrbyte	local01, fp
31914     0C 4E 85 F1 | 	sub	fp, #12
31918     3C 00 90 FD | 	jmp	#LR__4864
3191c                 | LR__4862
3191c     1A 4E 05 F1 | 	add	fp, #26
31920     A7 26 C2 FA | 	rdbyte	local01, fp
31924     1A 4E 85 F1 | 	sub	fp, #26
31928     11 26 CE F7 | 	test	local01, #17 wz
3192c     10 4E 05 51 |  if_ne	add	fp, #16
31930     A7 0E 68 5C |  if_ne	wrlong	#7, fp
31934     10 4E 85 51 |  if_ne	sub	fp, #16
31938     1C 00 90 5D |  if_ne	jmp	#LR__4863
3193c     0C 4E 05 F1 | 	add	fp, #12
31940     A7 26 C2 FA | 	rdbyte	local01, fp
31944     0C 4E 85 F1 | 	sub	fp, #12
31948     04 26 CE F7 | 	test	local01, #4 wz
3194c     10 4E 05 51 |  if_ne	add	fp, #16
31950     A7 10 68 5C |  if_ne	wrlong	#8, fp
31954     10 4E 85 51 |  if_ne	sub	fp, #16
31958                 | LR__4863
31958                 | LR__4864
31958     10 4E 05 F1 | 	add	fp, #16
3195c     A7 26 0A FB | 	rdlong	local01, fp wz
31960     10 4E 85 F1 | 	sub	fp, #16
31964     A8 01 90 5D |  if_ne	jmp	#LR__4868
31968     0C 4E 05 F1 | 	add	fp, #12
3196c     A7 26 C2 FA | 	rdbyte	local01, fp
31970     0C 4E 85 F1 | 	sub	fp, #12
31974     08 26 CE F7 | 	test	local01, #8 wz
31978     94 01 90 AD |  if_e	jmp	#LR__4868
3197c     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
31980     54 4E 05 F1 | 	add	fp, #84
31984     A7 FA 61 FC | 	wrlong	result1, fp
31988     24 4E 85 F1 | 	sub	fp, #36
3198c     A7 12 02 FB | 	rdlong	arg01, fp
31990     0E 12 06 F1 | 	add	arg01, #14
31994     09 FB 61 FC | 	wrlong	result1, arg01
31998     A7 12 02 FB | 	rdlong	arg01, fp
3199c     16 12 06 F1 | 	add	arg01, #22
319a0     24 4E 05 F1 | 	add	fp, #36
319a4     A7 14 02 FB | 	rdlong	arg02, fp
319a8     09 15 62 FC | 	wrlong	arg02, arg01
319ac     10 4E 85 F1 | 	sub	fp, #16
319b0     A7 12 02 FB | 	rdlong	arg01, fp
319b4     14 4E 85 F1 | 	sub	fp, #20
319b8     A7 14 02 FB | 	rdlong	arg02, fp
319bc     30 4E 85 F1 | 	sub	fp, #48
319c0     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
319c4     48 4E 05 F1 | 	add	fp, #72
319c8     A7 FA 61 FC | 	wrlong	result1, fp
319cc     18 4E 85 F1 | 	sub	fp, #24
319d0     A7 26 02 FB | 	rdlong	local01, fp
319d4     0B 26 06 F1 | 	add	local01, #11
319d8     13 41 48 FC | 	wrbyte	#32, local01
319dc     14 4E 05 F1 | 	add	fp, #20
319e0     A7 12 02 FB | 	rdlong	arg01, fp
319e4     14 4E 85 F1 | 	sub	fp, #20
319e8     A7 14 02 FB | 	rdlong	arg02, fp
319ec     30 4E 85 F1 | 	sub	fp, #48
319f0     00 16 06 F6 | 	mov	arg03, #0
319f4     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
319f8     30 4E 05 F1 | 	add	fp, #48
319fc     A7 12 02 FB | 	rdlong	arg01, fp
31a00     1C 12 06 F1 | 	add	arg01, #28
31a04     09 01 68 FC | 	wrlong	#0, arg01
31a08     14 4E 05 F1 | 	add	fp, #20
31a0c     A7 26 02 FB | 	rdlong	local01, fp
31a10     03 26 06 F1 | 	add	local01, #3
31a14     13 03 48 FC | 	wrbyte	#1, local01
31a18     04 4E 05 F1 | 	add	fp, #4
31a1c     A7 26 0A FB | 	rdlong	local01, fp wz
31a20     48 4E 85 F1 | 	sub	fp, #72
31a24     E8 00 90 AD |  if_e	jmp	#LR__4868
31a28     44 4E 05 F1 | 	add	fp, #68
31a2c     A7 26 02 FB | 	rdlong	local01, fp
31a30     30 26 06 F1 | 	add	local01, #48
31a34     13 27 02 FB | 	rdlong	local01, local01
31a38     14 4E 05 F1 | 	add	fp, #20
31a3c     A7 26 62 FC | 	wrlong	local01, fp
31a40     44 4E 85 F1 | 	sub	fp, #68
31a44     A7 12 02 F6 | 	mov	arg01, fp
31a48     34 4E 05 F1 | 	add	fp, #52
31a4c     A7 14 02 FB | 	rdlong	arg02, fp
31a50     48 4E 85 F1 | 	sub	fp, #72
31a54     00 16 06 F6 | 	mov	arg03, #0
31a58     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
31a5c     10 4E 05 F1 | 	add	fp, #16
31a60     A7 FA 61 FC | 	wrlong	result1, fp
31a64     10 4E 85 F1 | 	sub	fp, #16
31a68     00 FA 0D F2 | 	cmp	result1, #0 wz
31a6c     A0 00 90 5D |  if_ne	jmp	#LR__4868
31a70     44 4E 05 F1 | 	add	fp, #68
31a74     A7 12 02 FB | 	rdlong	arg01, fp
31a78     14 4E 05 F1 | 	add	fp, #20
31a7c     A7 14 02 FB | 	rdlong	arg02, fp
31a80     58 4E 85 F1 | 	sub	fp, #88
31a84     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
31a88     10 4E 05 F1 | 	add	fp, #16
31a8c     A7 FA 61 FC | 	wrlong	result1, fp
31a90     34 4E 05 F1 | 	add	fp, #52
31a94     A7 18 02 FB | 	rdlong	arg04, fp
31a98     04 4E 05 F1 | 	add	fp, #4
31a9c     A7 26 02 FB | 	rdlong	local01, fp
31aa0     48 4E 85 F1 | 	sub	fp, #72
31aa4     01 26 86 F1 | 	sub	local01, #1
31aa8     10 18 06 F1 | 	add	arg04, #16
31aac     0C 27 62 FC | 	wrlong	local01, arg04
31ab0     5C 00 90 FD | 	jmp	#LR__4868
31ab4                 | LR__4865
31ab4     10 4E 05 F1 | 	add	fp, #16
31ab8     A7 18 0A FB | 	rdlong	arg04, fp wz
31abc     10 4E 85 F1 | 	sub	fp, #16
31ac0     4C 00 90 5D |  if_ne	jmp	#LR__4867
31ac4     1A 4E 05 F1 | 	add	fp, #26
31ac8     A7 18 C2 FA | 	rdbyte	arg04, fp
31acc     1A 4E 85 F1 | 	sub	fp, #26
31ad0     10 18 CE F7 | 	test	arg04, #16 wz
31ad4     10 4E 05 51 |  if_ne	add	fp, #16
31ad8     A7 08 68 5C |  if_ne	wrlong	#4, fp
31adc     10 4E 85 51 |  if_ne	sub	fp, #16
31ae0     2C 00 90 5D |  if_ne	jmp	#LR__4866
31ae4     0C 4E 05 F1 | 	add	fp, #12
31ae8     A7 18 C2 FA | 	rdbyte	arg04, fp
31aec     0C 4E 85 F1 | 	sub	fp, #12
31af0     02 18 CE F7 | 	test	arg04, #2 wz
31af4     1A 4E 05 51 |  if_ne	add	fp, #26
31af8     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
31afc     1A 4E 85 51 |  if_ne	sub	fp, #26
31b00     01 26 CE 57 |  if_ne	test	local01, #1 wz
31b04     10 4E 05 51 |  if_ne	add	fp, #16
31b08     A7 0E 68 5C |  if_ne	wrlong	#7, fp
31b0c     10 4E 85 51 |  if_ne	sub	fp, #16
31b10                 | LR__4866
31b10                 | LR__4867
31b10                 | LR__4868
31b10     10 4E 05 F1 | 	add	fp, #16
31b14     A7 26 0A FB | 	rdlong	local01, fp wz
31b18     10 4E 85 F1 | 	sub	fp, #16
31b1c     60 00 90 5D |  if_ne	jmp	#LR__4869
31b20     0C 4E 05 F1 | 	add	fp, #12
31b24     A7 28 C2 FA | 	rdbyte	local02, fp
31b28     0C 4E 85 F1 | 	sub	fp, #12
31b2c     08 28 CE F7 | 	test	local02, #8 wz
31b30     0C 4E 05 51 |  if_ne	add	fp, #12
31b34     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
31b38     40 28 46 55 |  if_ne	or	local02, #64
31b3c     A7 28 42 5C |  if_ne	wrbyte	local02, fp
31b40     0C 4E 85 51 |  if_ne	sub	fp, #12
31b44     04 4E 05 F1 | 	add	fp, #4
31b48     A7 28 02 FB | 	rdlong	local02, fp
31b4c     40 4E 05 F1 | 	add	fp, #64
31b50     A7 26 02 FB | 	rdlong	local01, fp
31b54     30 26 06 F1 | 	add	local01, #48
31b58     13 27 02 FB | 	rdlong	local01, local01
31b5c     20 28 06 F1 | 	add	local02, #32
31b60     14 27 62 FC | 	wrlong	local01, local02
31b64     40 4E 85 F1 | 	sub	fp, #64
31b68     A7 28 02 FB | 	rdlong	local02, fp
31b6c     2C 4E 05 F1 | 	add	fp, #44
31b70     A7 26 02 FB | 	rdlong	local01, fp
31b74     30 4E 85 F1 | 	sub	fp, #48
31b78     24 28 06 F1 | 	add	local02, #36
31b7c     14 27 62 FC | 	wrlong	local01, local02
31b80                 | LR__4869
31b80     10 4E 05 F1 | 	add	fp, #16
31b84     A7 28 0A FB | 	rdlong	local02, fp wz
31b88     10 4E 85 F1 | 	sub	fp, #16
31b8c     F4 02 90 5D |  if_ne	jmp	#LR__4875
31b90     04 4E 05 F1 | 	add	fp, #4
31b94     A7 28 02 FB | 	rdlong	local02, fp
31b98     40 4E 05 F1 | 	add	fp, #64
31b9c     A7 12 02 FB | 	rdlong	arg01, fp
31ba0     14 4E 85 F1 | 	sub	fp, #20
31ba4     A7 14 02 FB | 	rdlong	arg02, fp
31ba8     30 4E 85 F1 | 	sub	fp, #48
31bac     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
31bb0     08 28 06 F1 | 	add	local02, #8
31bb4     14 FB 61 FC | 	wrlong	result1, local02
31bb8     04 4E 05 F1 | 	add	fp, #4
31bbc     A7 28 02 FB | 	rdlong	local02, fp
31bc0     2C 4E 05 F1 | 	add	fp, #44
31bc4     A7 12 02 FB | 	rdlong	arg01, fp
31bc8     1C 12 06 F1 | 	add	arg01, #28
31bcc                 | ' {
31bcc                 | ' 
31bcc                 | ' 	return *((DWORD*)ptr);
31bcc     09 FB 01 FB | 	rdlong	result1, arg01
31bd0     0C 28 06 F1 | 	add	local02, #12
31bd4     14 FB 61 FC | 	wrlong	result1, local02
31bd8     2C 4E 85 F1 | 	sub	fp, #44
31bdc     A7 28 02 FB | 	rdlong	local02, fp
31be0     40 4E 05 F1 | 	add	fp, #64
31be4     A7 26 02 FB | 	rdlong	local01, fp
31be8     14 27 62 FC | 	wrlong	local01, local02
31bec     40 4E 85 F1 | 	sub	fp, #64
31bf0     A7 28 02 FB | 	rdlong	local02, fp
31bf4     40 4E 05 F1 | 	add	fp, #64
31bf8     A7 26 02 FB | 	rdlong	local01, fp
31bfc     06 26 06 F1 | 	add	local01, #6
31c00     13 27 E2 FA | 	rdword	local01, local01
31c04     04 28 06 F1 | 	add	local02, #4
31c08     14 27 52 FC | 	wrword	local01, local02
31c0c     40 4E 85 F1 | 	sub	fp, #64
31c10     A7 28 02 FB | 	rdlong	local02, fp
31c14     08 4E 05 F1 | 	add	fp, #8
31c18     A7 26 C2 FA | 	rdbyte	local01, fp
31c1c     10 28 06 F1 | 	add	local02, #16
31c20     14 27 42 FC | 	wrbyte	local01, local02
31c24     08 4E 85 F1 | 	sub	fp, #8
31c28     A7 28 02 FB | 	rdlong	local02, fp
31c2c     11 28 06 F1 | 	add	local02, #17
31c30     14 01 48 FC | 	wrbyte	#0, local02
31c34     A7 28 02 FB | 	rdlong	local02, fp
31c38     1C 28 06 F1 | 	add	local02, #28
31c3c     14 01 68 FC | 	wrlong	#0, local02
31c40     A7 28 02 FB | 	rdlong	local02, fp
31c44     14 28 06 F1 | 	add	local02, #20
31c48     14 01 68 FC | 	wrlong	#0, local02
31c4c     A7 12 02 FB | 	rdlong	arg01, fp
31c50     04 4E 85 F1 | 	sub	fp, #4
31c54     28 12 06 F1 | 	add	arg01, #40
31c58     00 14 06 F6 | 	mov	arg02, #0
31c5c     09 16 C6 F9 | 	decod	arg03, #9
31c60     98 00 A0 FD | 	call	#\builtin_bytefill_
31c64     0C 4E 05 F1 | 	add	fp, #12
31c68     A7 28 C2 FA | 	rdbyte	local02, fp
31c6c     0C 4E 85 F1 | 	sub	fp, #12
31c70     20 28 CE F7 | 	test	local02, #32 wz
31c74     0C 02 90 AD |  if_e	jmp	#LR__4874
31c78     04 4E 05 F1 | 	add	fp, #4
31c7c     A7 26 02 FB | 	rdlong	local01, fp
31c80     04 4E 85 F1 | 	sub	fp, #4
31c84     0C 26 06 F1 | 	add	local01, #12
31c88     13 29 02 FB | 	rdlong	local02, local01
31c8c     01 28 16 F2 | 	cmp	local02, #1 wc
31c90     F0 01 90 CD |  if_b	jmp	#LR__4874
31c94     04 4E 05 F1 | 	add	fp, #4
31c98     A7 26 02 FB | 	rdlong	local01, fp
31c9c     13 29 02 F6 | 	mov	local02, local01
31ca0     0C 26 06 F1 | 	add	local01, #12
31ca4     13 27 02 FB | 	rdlong	local01, local01
31ca8     14 28 06 F1 | 	add	local02, #20
31cac     14 27 62 FC | 	wrlong	local01, local02
31cb0     40 4E 05 F1 | 	add	fp, #64
31cb4     A7 28 02 FB | 	rdlong	local02, fp
31cb8     0A 28 06 F1 | 	add	local02, #10
31cbc     14 29 E2 FA | 	rdword	local02, local02
31cc0     09 28 66 F0 | 	shl	local02, #9
31cc4     08 4E 05 F1 | 	add	fp, #8
31cc8     A7 28 62 FC | 	wrlong	local02, fp
31ccc     48 4E 85 F1 | 	sub	fp, #72
31cd0     A7 28 02 FB | 	rdlong	local02, fp
31cd4     08 28 06 F1 | 	add	local02, #8
31cd8     14 27 02 FB | 	rdlong	local01, local02
31cdc     4C 4E 05 F1 | 	add	fp, #76
31ce0     A7 26 62 FC | 	wrlong	local01, fp
31ce4                 | ' 				fp->fptr = fp->obj.objsize;
31ce4                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
31ce4                 | ' 				clst = fp->obj.sclust;
31ce4                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
31ce4     4C 4E 85 F1 | 	sub	fp, #76
31ce8     A7 28 02 FB | 	rdlong	local02, fp
31cec     0C 28 06 F1 | 	add	local02, #12
31cf0     14 27 02 FB | 	rdlong	local01, local02
31cf4     58 4E 05 F1 | 	add	fp, #88
31cf8     A7 26 62 FC | 	wrlong	local01, fp
31cfc     5C 4E 85 F1 | 	sub	fp, #92
31d00                 | LR__4870
31d00     10 4E 05 F1 | 	add	fp, #16
31d04     A7 28 0A FB | 	rdlong	local02, fp wz
31d08     10 4E 85 F1 | 	sub	fp, #16
31d0c     94 00 90 5D |  if_ne	jmp	#LR__4871
31d10     5C 4E 05 F1 | 	add	fp, #92
31d14     A7 28 02 FB | 	rdlong	local02, fp
31d18     10 4E 85 F1 | 	sub	fp, #16
31d1c     A7 26 02 FB | 	rdlong	local01, fp
31d20     4C 4E 85 F1 | 	sub	fp, #76
31d24     13 29 1A F2 | 	cmp	local02, local01 wcz
31d28     78 00 90 ED |  if_be	jmp	#LR__4871
31d2c     04 4E 05 F1 | 	add	fp, #4
31d30     A7 12 02 FB | 	rdlong	arg01, fp
31d34     4C 4E 05 F1 | 	add	fp, #76
31d38     A7 14 02 FB | 	rdlong	arg02, fp
31d3c     50 4E 85 F1 | 	sub	fp, #80
31d40     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
31d44     50 4E 05 F1 | 	add	fp, #80
31d48     A7 FA 61 FC | 	wrlong	result1, fp
31d4c     50 4E 85 F1 | 	sub	fp, #80
31d50     02 FA 15 F2 | 	cmp	result1, #2 wc
31d54     10 4E 05 C1 |  if_b	add	fp, #16
31d58     A7 04 68 CC |  if_b	wrlong	#2, fp
31d5c     10 4E 85 C1 |  if_b	sub	fp, #16
31d60     50 4E 05 F1 | 	add	fp, #80
31d64     A7 28 02 FB | 	rdlong	local02, fp
31d68     50 4E 85 F1 | 	sub	fp, #80
31d6c     FF FF 7F FF 
31d70     FF 29 0E F2 | 	cmp	local02, ##-1 wz
31d74     10 4E 05 A1 |  if_e	add	fp, #16
31d78     A7 02 68 AC |  if_e	wrlong	#1, fp
31d7c     10 4E 85 A1 |  if_e	sub	fp, #16
31d80     5C 4E 05 F1 | 	add	fp, #92
31d84     A7 28 02 FB | 	rdlong	local02, fp
31d88     10 4E 85 F1 | 	sub	fp, #16
31d8c     A7 26 02 FB | 	rdlong	local01, fp
31d90     13 29 82 F1 | 	sub	local02, local01
31d94     10 4E 05 F1 | 	add	fp, #16
31d98     A7 28 62 FC | 	wrlong	local02, fp
31d9c     5C 4E 85 F1 | 	sub	fp, #92
31da0     5C FF 9F FD | 	jmp	#LR__4870
31da4                 | LR__4871
31da4     04 4E 05 F1 | 	add	fp, #4
31da8     A7 28 02 FB | 	rdlong	local02, fp
31dac     4C 4E 05 F1 | 	add	fp, #76
31db0     A7 26 02 FB | 	rdlong	local01, fp
31db4     18 28 06 F1 | 	add	local02, #24
31db8     14 27 62 FC | 	wrlong	local01, local02
31dbc     40 4E 85 F1 | 	sub	fp, #64
31dc0     A7 28 0A FB | 	rdlong	local02, fp wz
31dc4     10 4E 85 F1 | 	sub	fp, #16
31dc8     B8 00 90 5D |  if_ne	jmp	#LR__4873
31dcc     5C 4E 05 F1 | 	add	fp, #92
31dd0     A7 26 02 FB | 	rdlong	local01, fp
31dd4     5C 4E 85 F1 | 	sub	fp, #92
31dd8     FF 27 CE F7 | 	test	local01, #511 wz
31ddc     A4 00 90 AD |  if_e	jmp	#LR__4873
31de0     44 4E 05 F1 | 	add	fp, #68
31de4     A7 12 02 FB | 	rdlong	arg01, fp
31de8     0C 4E 05 F1 | 	add	fp, #12
31dec     A7 14 02 FB | 	rdlong	arg02, fp
31df0     50 4E 85 F1 | 	sub	fp, #80
31df4     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
31df8     58 4E 05 F1 | 	add	fp, #88
31dfc     A7 FA 61 FC | 	wrlong	result1, fp
31e00     00 FA 4D F2 | 	cmps	result1, #0 wz
31e04     58 4E 85 F1 | 	sub	fp, #88
31e08     10 4E 05 A1 |  if_e	add	fp, #16
31e0c     A7 04 68 AC |  if_e	wrlong	#2, fp
31e10     10 4E 85 A1 |  if_e	sub	fp, #16
31e14     6C 00 90 AD |  if_e	jmp	#LR__4872
31e18     04 4E 05 F1 | 	add	fp, #4
31e1c     A7 28 02 FB | 	rdlong	local02, fp
31e20     54 4E 05 F1 | 	add	fp, #84
31e24     A7 26 02 FB | 	rdlong	local01, fp
31e28     04 4E 05 F1 | 	add	fp, #4
31e2c     A7 18 02 FB | 	rdlong	arg04, fp
31e30     09 18 46 F0 | 	shr	arg04, #9
31e34     0C 27 02 F1 | 	add	local01, arg04
31e38     1C 28 06 F1 | 	add	local02, #28
31e3c     14 27 62 FC | 	wrlong	local01, local02
31e40     18 4E 85 F1 | 	sub	fp, #24
31e44     A7 28 02 FB | 	rdlong	local02, fp
31e48     01 28 06 F1 | 	add	local02, #1
31e4c     14 13 C2 FA | 	rdbyte	arg01, local02
31e50     40 4E 85 F1 | 	sub	fp, #64
31e54     A7 28 02 FB | 	rdlong	local02, fp
31e58     14 15 02 F6 | 	mov	arg02, local02
31e5c     28 14 06 F1 | 	add	arg02, #40
31e60     04 4E 85 F1 | 	sub	fp, #4
31e64     1C 28 06 F1 | 	add	local02, #28
31e68     14 17 02 FB | 	rdlong	arg03, local02
31e6c     01 18 06 F6 | 	mov	arg04, #1
31e70     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
31e74     00 FA 0D F2 | 	cmp	result1, #0 wz
31e78     10 4E 05 51 |  if_ne	add	fp, #16
31e7c     A7 02 68 5C |  if_ne	wrlong	#1, fp
31e80     10 4E 85 51 |  if_ne	sub	fp, #16
31e84                 | LR__4872
31e84                 | LR__4873
31e84                 | LR__4874
31e84                 | LR__4875
31e84                 | LR__4876
31e84     10 4E 05 F1 | 	add	fp, #16
31e88     A7 28 0A FB | 	rdlong	local02, fp wz
31e8c     10 4E 85 F1 | 	sub	fp, #16
31e90     04 4E 05 51 |  if_ne	add	fp, #4
31e94     A7 28 02 5B |  if_ne	rdlong	local02, fp
31e98     04 4E 85 51 |  if_ne	sub	fp, #4
31e9c     14 01 68 5C |  if_ne	wrlong	#0, local02
31ea0                 | ' 
31ea0                 | ' 	return res ;
31ea0     10 4E 05 F1 | 	add	fp, #16
31ea4     A7 FA 01 FB | 	rdlong	result1, fp
31ea8     10 4E 85 F1 | 	sub	fp, #16
31eac                 | LR__4877
31eac     A7 F0 03 F6 | 	mov	ptra, fp
31eb0     B2 00 A0 FD | 	call	#popregs_
31eb4                 | _fatfs_cc_f_open_ret
31eb4     2D 00 64 FD | 	ret
31eb8                 | 
31eb8                 | _fatfs_cc_f_read
31eb8     0E 4A 05 F6 | 	mov	COUNT_, #14
31ebc     A8 00 A0 FD | 	call	#pushregs_
31ec0     38 F0 07 F1 | 	add	ptra, #56
31ec4     04 4E 05 F1 | 	add	fp, #4
31ec8     A7 12 62 FC | 	wrlong	arg01, fp
31ecc     04 4E 05 F1 | 	add	fp, #4
31ed0     A7 14 62 FC | 	wrlong	arg02, fp
31ed4     04 4E 05 F1 | 	add	fp, #4
31ed8     A7 16 62 FC | 	wrlong	arg03, fp
31edc     04 4E 05 F1 | 	add	fp, #4
31ee0     A7 18 62 FC | 	wrlong	arg04, fp
31ee4     08 4E 85 F1 | 	sub	fp, #8
31ee8     A7 FA 01 FB | 	rdlong	result1, fp
31eec     2C 4E 05 F1 | 	add	fp, #44
31ef0     A7 FA 61 FC | 	wrlong	result1, fp
31ef4     24 4E 85 F1 | 	sub	fp, #36
31ef8     A7 FA 01 FB | 	rdlong	result1, fp
31efc     FD 00 68 FC | 	wrlong	#0, result1
31f00     0C 4E 85 F1 | 	sub	fp, #12
31f04     A7 12 02 FB | 	rdlong	arg01, fp
31f08     14 4E 05 F1 | 	add	fp, #20
31f0c     A7 14 02 F6 | 	mov	arg02, fp
31f10     18 4E 85 F1 | 	sub	fp, #24
31f14     24 F7 BF FD | 	call	#_fatfs_cc_validate
31f18     14 4E 05 F1 | 	add	fp, #20
31f1c     A7 FA 61 FC | 	wrlong	result1, fp
31f20     00 FA 4D F2 | 	cmps	result1, #0 wz
31f24     14 4E 85 F1 | 	sub	fp, #20
31f28     20 00 90 5D |  if_ne	jmp	#LR__4880
31f2c     04 4E 05 F1 | 	add	fp, #4
31f30     A7 14 02 FB | 	rdlong	arg02, fp
31f34     11 14 06 F1 | 	add	arg02, #17
31f38     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
31f3c     10 4E 05 F1 | 	add	fp, #16
31f40     A7 14 62 FC | 	wrlong	arg02, fp
31f44     14 4E 85 F1 | 	sub	fp, #20
31f48     10 00 90 AD |  if_e	jmp	#LR__4881
31f4c                 | LR__4880
31f4c     14 4E 05 F1 | 	add	fp, #20
31f50     A7 FA 01 FB | 	rdlong	result1, fp
31f54     14 4E 85 F1 | 	sub	fp, #20
31f58     EC 05 90 FD | 	jmp	#LR__4900
31f5c                 | LR__4881
31f5c     04 4E 05 F1 | 	add	fp, #4
31f60     A7 18 02 FB | 	rdlong	arg04, fp
31f64     04 4E 85 F1 | 	sub	fp, #4
31f68     10 18 06 F1 | 	add	arg04, #16
31f6c     0C 19 C2 FA | 	rdbyte	arg04, arg04
31f70     01 18 CE F7 | 	test	arg04, #1 wz
31f74     07 FA 05 A6 |  if_e	mov	result1, #7
31f78     CC 05 90 AD |  if_e	jmp	#LR__4900
31f7c     04 4E 05 F1 | 	add	fp, #4
31f80     A7 26 02 FB | 	rdlong	local01, fp
31f84     13 29 02 F6 | 	mov	local02, local01
31f88     0C 28 06 F1 | 	add	local02, #12
31f8c     14 2B 02 FB | 	rdlong	local03, local02
31f90     14 26 06 F1 | 	add	local01, #20
31f94     13 27 02 FB | 	rdlong	local01, local01
31f98     13 2B 82 F1 | 	sub	local03, local01
31f9c     20 4E 05 F1 | 	add	fp, #32
31fa0     A7 2A 62 FC | 	wrlong	local03, fp
31fa4     18 4E 85 F1 | 	sub	fp, #24
31fa8     A7 2C 02 FB | 	rdlong	local04, fp
31fac     0C 4E 85 F1 | 	sub	fp, #12
31fb0     15 2D 1A F2 | 	cmp	local04, local03 wcz
31fb4     24 4E 05 11 |  if_a	add	fp, #36
31fb8     A7 2C 02 1B |  if_a	rdlong	local04, fp
31fbc     18 4E 85 11 |  if_a	sub	fp, #24
31fc0     A7 2C 62 1C |  if_a	wrlong	local04, fp
31fc4     0C 4E 85 11 |  if_a	sub	fp, #12
31fc8                 | ' 
31fc8                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
31fc8                 | LR__4882
31fc8     0C 4E 05 F1 | 	add	fp, #12
31fcc     A7 28 02 FB | 	rdlong	local02, fp
31fd0     0C 4E 85 F1 | 	sub	fp, #12
31fd4     14 2D 02 F6 | 	mov	local04, local02
31fd8     01 2C 16 F2 | 	cmp	local04, #1 wc
31fdc     64 05 90 CD |  if_b	jmp	#LR__4899
31fe0     04 4E 05 F1 | 	add	fp, #4
31fe4     A7 2A 02 FB | 	rdlong	local03, fp
31fe8     04 4E 85 F1 | 	sub	fp, #4
31fec     14 2A 06 F1 | 	add	local03, #20
31ff0     15 2B 02 FB | 	rdlong	local03, local03
31ff4     FF 2B CE F7 | 	test	local03, #511 wz
31ff8     3C 04 90 5D |  if_ne	jmp	#LR__4897
31ffc     04 4E 05 F1 | 	add	fp, #4
32000     A7 26 02 FB | 	rdlong	local01, fp
32004     14 26 06 F1 | 	add	local01, #20
32008     13 2B 02 FB | 	rdlong	local03, local01
3200c     09 2A 46 F0 | 	shr	local03, #9
32010     14 4E 05 F1 | 	add	fp, #20
32014     A7 2E 02 FB | 	rdlong	local05, fp
32018     17 31 02 F6 | 	mov	local06, local05
3201c     0A 30 06 F1 | 	add	local06, #10
32020     18 33 E2 FA | 	rdword	local07, local06
32024     0A 30 86 F1 | 	sub	local06, #10
32028     19 35 32 F9 | 	getword	local08, local07, #0
3202c     01 34 86 F1 | 	sub	local08, #1
32030     1A 2B 0A F5 | 	and	local03, local08 wz
32034     18 4E 05 F1 | 	add	fp, #24
32038     A7 2A 62 FC | 	wrlong	local03, fp
3203c     30 4E 85 F1 | 	sub	fp, #48
32040     E0 00 90 5D |  if_ne	jmp	#LR__4887
32044     04 4E 05 F1 | 	add	fp, #4
32048     A7 2A 02 FB | 	rdlong	local03, fp
3204c     04 4E 85 F1 | 	sub	fp, #4
32050     14 2A 06 F1 | 	add	local03, #20
32054     15 2B 0A FB | 	rdlong	local03, local03 wz
32058     20 00 90 5D |  if_ne	jmp	#LR__4883
3205c     04 4E 05 F1 | 	add	fp, #4
32060     A7 2A 02 FB | 	rdlong	local03, fp
32064     08 2A 06 F1 | 	add	local03, #8
32068     15 2B 02 FB | 	rdlong	local03, local03
3206c     18 4E 05 F1 | 	add	fp, #24
32070     A7 2A 62 FC | 	wrlong	local03, fp
32074     1C 4E 85 F1 | 	sub	fp, #28
32078     28 00 90 FD | 	jmp	#LR__4884
3207c                 | LR__4883
3207c     04 4E 05 F1 | 	add	fp, #4
32080     A7 34 02 FB | 	rdlong	local08, fp
32084     1A 13 02 F6 | 	mov	arg01, local08
32088     04 4E 85 F1 | 	sub	fp, #4
3208c     18 34 06 F1 | 	add	local08, #24
32090     1A 15 02 FB | 	rdlong	arg02, local08
32094     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
32098     1C 4E 05 F1 | 	add	fp, #28
3209c     A7 FA 61 FC | 	wrlong	result1, fp
320a0     1C 4E 85 F1 | 	sub	fp, #28
320a4                 | LR__4884
320a4     1C 4E 05 F1 | 	add	fp, #28
320a8     A7 2A 02 FB | 	rdlong	local03, fp
320ac     1C 4E 85 F1 | 	sub	fp, #28
320b0     02 2A 16 F2 | 	cmp	local03, #2 wc
320b4     1C 00 90 3D |  if_ae	jmp	#LR__4885
320b8     04 4E 05 F1 | 	add	fp, #4
320bc     A7 2A 02 FB | 	rdlong	local03, fp
320c0     04 4E 85 F1 | 	sub	fp, #4
320c4     11 2A 06 F1 | 	add	local03, #17
320c8     15 05 48 FC | 	wrbyte	#2, local03
320cc     02 FA 05 F6 | 	mov	result1, #2
320d0     74 04 90 FD | 	jmp	#LR__4900
320d4                 | LR__4885
320d4     1C 4E 05 F1 | 	add	fp, #28
320d8     A7 2A 02 FB | 	rdlong	local03, fp
320dc     1C 4E 85 F1 | 	sub	fp, #28
320e0     FF FF 7F FF 
320e4     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
320e8     1C 00 90 5D |  if_ne	jmp	#LR__4886
320ec     04 4E 05 F1 | 	add	fp, #4
320f0     A7 2A 02 FB | 	rdlong	local03, fp
320f4     04 4E 85 F1 | 	sub	fp, #4
320f8     11 2A 06 F1 | 	add	local03, #17
320fc     15 03 48 FC | 	wrbyte	#1, local03
32100     01 FA 05 F6 | 	mov	result1, #1
32104     40 04 90 FD | 	jmp	#LR__4900
32108                 | LR__4886
32108     04 4E 05 F1 | 	add	fp, #4
3210c     A7 2A 02 FB | 	rdlong	local03, fp
32110     18 4E 05 F1 | 	add	fp, #24
32114     A7 34 02 FB | 	rdlong	local08, fp
32118     1C 4E 85 F1 | 	sub	fp, #28
3211c     18 2A 06 F1 | 	add	local03, #24
32120     15 35 62 FC | 	wrlong	local08, local03
32124                 | LR__4887
32124     18 4E 05 F1 | 	add	fp, #24
32128     A7 12 02 FB | 	rdlong	arg01, fp
3212c     14 4E 85 F1 | 	sub	fp, #20
32130     A7 2A 02 FB | 	rdlong	local03, fp
32134     04 4E 85 F1 | 	sub	fp, #4
32138     18 2A 06 F1 | 	add	local03, #24
3213c     15 15 02 FB | 	rdlong	arg02, local03
32140     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
32144     20 4E 05 F1 | 	add	fp, #32
32148     A7 FA 61 FC | 	wrlong	result1, fp
3214c     20 4E 85 F1 | 	sub	fp, #32
32150     00 FA 0D F2 | 	cmp	result1, #0 wz
32154     1C 00 90 5D |  if_ne	jmp	#LR__4888
32158     04 4E 05 F1 | 	add	fp, #4
3215c     A7 2A 02 FB | 	rdlong	local03, fp
32160     04 4E 85 F1 | 	sub	fp, #4
32164     11 2A 06 F1 | 	add	local03, #17
32168     15 05 48 FC | 	wrbyte	#2, local03
3216c     02 FA 05 F6 | 	mov	result1, #2
32170     D4 03 90 FD | 	jmp	#LR__4900
32174                 | LR__4888
32174     20 4E 05 F1 | 	add	fp, #32
32178     A7 2A 02 FB | 	rdlong	local03, fp
3217c     10 4E 05 F1 | 	add	fp, #16
32180     A7 34 02 FB | 	rdlong	local08, fp
32184     1A 2B 02 F1 | 	add	local03, local08
32188     10 4E 85 F1 | 	sub	fp, #16
3218c     A7 2A 62 FC | 	wrlong	local03, fp
32190     14 4E 85 F1 | 	sub	fp, #20
32194     A7 2A 02 FB | 	rdlong	local03, fp
32198     09 2A 46 F0 | 	shr	local03, #9
3219c     20 4E 05 F1 | 	add	fp, #32
321a0     A7 2A 62 FC | 	wrlong	local03, fp
321a4     2C 4E 85 F1 | 	sub	fp, #44
321a8     01 2A 16 F2 | 	cmp	local03, #1 wc
321ac     5C 01 90 CD |  if_b	jmp	#LR__4892
321b0     30 4E 05 F1 | 	add	fp, #48
321b4     A7 2A 02 FB | 	rdlong	local03, fp
321b8     04 4E 85 F1 | 	sub	fp, #4
321bc     A7 34 02 FB | 	rdlong	local08, fp
321c0     1A 2B 02 F1 | 	add	local03, local08
321c4     14 4E 85 F1 | 	sub	fp, #20
321c8     A7 34 02 FB | 	rdlong	local08, fp
321cc     18 4E 85 F1 | 	sub	fp, #24
321d0     0A 34 06 F1 | 	add	local08, #10
321d4     1A 35 E2 FA | 	rdword	local08, local08
321d8     1A 2B 1A F2 | 	cmp	local03, local08 wcz
321dc     28 00 90 ED |  if_be	jmp	#LR__4889
321e0     18 4E 05 F1 | 	add	fp, #24
321e4     A7 26 02 FB | 	rdlong	local01, fp
321e8     0A 26 06 F1 | 	add	local01, #10
321ec     13 2B E2 FA | 	rdword	local03, local01
321f0     18 4E 05 F1 | 	add	fp, #24
321f4     A7 34 02 FB | 	rdlong	local08, fp
321f8     1A 2B 82 F1 | 	sub	local03, local08
321fc     04 4E 85 F1 | 	sub	fp, #4
32200     A7 2A 62 FC | 	wrlong	local03, fp
32204     2C 4E 85 F1 | 	sub	fp, #44
32208                 | LR__4889
32208     18 4E 05 F1 | 	add	fp, #24
3220c     A7 26 02 FB | 	rdlong	local01, fp
32210     01 26 06 F1 | 	add	local01, #1
32214     13 13 C2 FA | 	rdbyte	arg01, local01
32218     1C 4E 05 F1 | 	add	fp, #28
3221c     A7 14 02 FB | 	rdlong	arg02, fp
32220     14 4E 85 F1 | 	sub	fp, #20
32224     A7 16 02 FB | 	rdlong	arg03, fp
32228     0C 4E 05 F1 | 	add	fp, #12
3222c     A7 18 02 FB | 	rdlong	arg04, fp
32230     2C 4E 85 F1 | 	sub	fp, #44
32234     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
32238     00 FA 0D F2 | 	cmp	result1, #0 wz
3223c     1C 00 90 AD |  if_e	jmp	#LR__4890
32240     04 4E 05 F1 | 	add	fp, #4
32244     A7 2A 02 FB | 	rdlong	local03, fp
32248     04 4E 85 F1 | 	sub	fp, #4
3224c     11 2A 06 F1 | 	add	local03, #17
32250     15 03 48 FC | 	wrbyte	#1, local03
32254     01 FA 05 F6 | 	mov	result1, #1
32258     EC 02 90 FD | 	jmp	#LR__4900
3225c                 | LR__4890
3225c     04 4E 05 F1 | 	add	fp, #4
32260     A7 26 02 FB | 	rdlong	local01, fp
32264     04 4E 85 F1 | 	sub	fp, #4
32268     10 26 06 F1 | 	add	local01, #16
3226c     13 2B C2 FA | 	rdbyte	local03, local01
32270     80 2A CE F7 | 	test	local03, #128 wz
32274     78 00 90 AD |  if_e	jmp	#LR__4891
32278     04 4E 05 F1 | 	add	fp, #4
3227c     A7 34 02 FB | 	rdlong	local08, fp
32280     1C 34 06 F1 | 	add	local08, #28
32284     1A 35 02 FB | 	rdlong	local08, local08
32288     1C 4E 05 F1 | 	add	fp, #28
3228c     A7 36 02 FB | 	rdlong	local09, fp
32290     1B 35 82 F1 | 	sub	local08, local09
32294     0C 4E 05 F1 | 	add	fp, #12
32298     A7 38 02 FB | 	rdlong	local10, fp
3229c     2C 4E 85 F1 | 	sub	fp, #44
322a0     1C 3B 02 F6 | 	mov	local11, local10
322a4     1D 35 12 F2 | 	cmp	local08, local11 wc
322a8     44 00 90 3D |  if_ae	jmp	#LR__4891
322ac     34 4E 05 F1 | 	add	fp, #52
322b0     A7 12 02 FB | 	rdlong	arg01, fp
322b4     30 4E 85 F1 | 	sub	fp, #48
322b8     A7 14 02 FB | 	rdlong	arg02, fp
322bc     0A 3B 02 F6 | 	mov	local11, arg02
322c0     1C 3A 06 F1 | 	add	local11, #28
322c4     1D 37 02 FB | 	rdlong	local09, local11
322c8     1C 4E 05 F1 | 	add	fp, #28
322cc     A7 2E 02 FB | 	rdlong	local05, fp
322d0     17 37 82 F1 | 	sub	local09, local05
322d4     09 36 66 F0 | 	shl	local09, #9
322d8     1B 3B 02 F6 | 	mov	local11, local09
322dc     1B 13 02 F1 | 	add	arg01, local09
322e0     20 4E 85 F1 | 	sub	fp, #32
322e4     28 14 06 F1 | 	add	arg02, #40
322e8     09 16 C6 F9 | 	decod	arg03, #9
322ec     64 43 BF FD | 	call	#__system____builtin_memmove
322f0                 | LR__4891
322f0     2C 4E 05 F1 | 	add	fp, #44
322f4     A7 2A 02 FB | 	rdlong	local03, fp
322f8     09 2A 66 F0 | 	shl	local03, #9
322fc     04 4E 85 F1 | 	sub	fp, #4
32300     A7 2A 62 FC | 	wrlong	local03, fp
32304     28 4E 85 F1 | 	sub	fp, #40
32308                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
32308                 | ' 				}
32308                 | ' 
32308                 | ' 
32308                 | ' 				rcnt =  ((UINT) 512 )  * cc;
32308                 | ' 				continue;
32308     B4 01 90 FD | 	jmp	#LR__4898
3230c                 | LR__4892
3230c     04 4E 05 F1 | 	add	fp, #4
32310     A7 2A 02 FB | 	rdlong	local03, fp
32314     1C 2A 06 F1 | 	add	local03, #28
32318     15 2B 02 FB | 	rdlong	local03, local03
3231c     1C 4E 05 F1 | 	add	fp, #28
32320     A7 26 02 FB | 	rdlong	local01, fp
32324     20 4E 85 F1 | 	sub	fp, #32
32328     13 2B 0A F2 | 	cmp	local03, local01 wz
3232c     EC 00 90 AD |  if_e	jmp	#LR__4896
32330     04 4E 05 F1 | 	add	fp, #4
32334     A7 26 02 FB | 	rdlong	local01, fp
32338     04 4E 85 F1 | 	sub	fp, #4
3233c     10 26 06 F1 | 	add	local01, #16
32340     13 2B C2 FA | 	rdbyte	local03, local01
32344     80 2A CE F7 | 	test	local03, #128 wz
32348     7C 00 90 AD |  if_e	jmp	#LR__4894
3234c     18 4E 05 F1 | 	add	fp, #24
32350     A7 26 02 FB | 	rdlong	local01, fp
32354     01 26 06 F1 | 	add	local01, #1
32358     13 13 C2 FA | 	rdbyte	arg01, local01
3235c     14 4E 85 F1 | 	sub	fp, #20
32360     A7 2A 02 FB | 	rdlong	local03, fp
32364     15 15 02 F6 | 	mov	arg02, local03
32368     28 14 06 F1 | 	add	arg02, #40
3236c     04 4E 85 F1 | 	sub	fp, #4
32370     1C 2A 06 F1 | 	add	local03, #28
32374     15 17 02 FB | 	rdlong	arg03, local03
32378     01 18 06 F6 | 	mov	arg04, #1
3237c     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
32380     00 FA 0D F2 | 	cmp	result1, #0 wz
32384     1C 00 90 AD |  if_e	jmp	#LR__4893
32388     04 4E 05 F1 | 	add	fp, #4
3238c     A7 2A 02 FB | 	rdlong	local03, fp
32390     04 4E 85 F1 | 	sub	fp, #4
32394     11 2A 06 F1 | 	add	local03, #17
32398     15 03 48 FC | 	wrbyte	#1, local03
3239c     01 FA 05 F6 | 	mov	result1, #1
323a0     A4 01 90 FD | 	jmp	#LR__4900
323a4                 | LR__4893
323a4     04 4E 05 F1 | 	add	fp, #4
323a8     A7 3A 02 FB | 	rdlong	local11, fp
323ac     1D 2B 02 F6 | 	mov	local03, local11
323b0     04 4E 85 F1 | 	sub	fp, #4
323b4     10 3A 06 F1 | 	add	local11, #16
323b8     1D 3B C2 FA | 	rdbyte	local11, local11
323bc     7F 3A 06 F5 | 	and	local11, #127
323c0     10 2A 06 F1 | 	add	local03, #16
323c4     15 3B 42 FC | 	wrbyte	local11, local03
323c8                 | LR__4894
323c8     18 4E 05 F1 | 	add	fp, #24
323cc     A7 26 02 FB | 	rdlong	local01, fp
323d0     01 26 06 F1 | 	add	local01, #1
323d4     13 13 C2 FA | 	rdbyte	arg01, local01
323d8     14 4E 85 F1 | 	sub	fp, #20
323dc     A7 14 02 FB | 	rdlong	arg02, fp
323e0     28 14 06 F1 | 	add	arg02, #40
323e4     1C 4E 05 F1 | 	add	fp, #28
323e8     A7 16 02 FB | 	rdlong	arg03, fp
323ec     20 4E 85 F1 | 	sub	fp, #32
323f0     01 18 06 F6 | 	mov	arg04, #1
323f4     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
323f8     00 FA 0D F2 | 	cmp	result1, #0 wz
323fc     1C 00 90 AD |  if_e	jmp	#LR__4895
32400     04 4E 05 F1 | 	add	fp, #4
32404     A7 2A 02 FB | 	rdlong	local03, fp
32408     04 4E 85 F1 | 	sub	fp, #4
3240c     11 2A 06 F1 | 	add	local03, #17
32410     15 03 48 FC | 	wrbyte	#1, local03
32414     01 FA 05 F6 | 	mov	result1, #1
32418     2C 01 90 FD | 	jmp	#LR__4900
3241c                 | LR__4895
3241c                 | LR__4896
3241c     04 4E 05 F1 | 	add	fp, #4
32420     A7 2A 02 FB | 	rdlong	local03, fp
32424     1C 4E 05 F1 | 	add	fp, #28
32428     A7 3A 02 FB | 	rdlong	local11, fp
3242c     20 4E 85 F1 | 	sub	fp, #32
32430     1C 2A 06 F1 | 	add	local03, #28
32434     15 3B 62 FC | 	wrlong	local11, local03
32438                 | LR__4897
32438     04 4E 05 F1 | 	add	fp, #4
3243c     A7 26 02 FB | 	rdlong	local01, fp
32440     14 26 06 F1 | 	add	local01, #20
32444     13 3B 02 FB | 	rdlong	local11, local01
32448     FF 3B 06 F5 | 	and	local11, #511
3244c     09 2A C6 F9 | 	decod	local03, #9
32450     1D 2B 82 F1 | 	sub	local03, local11
32454     24 4E 05 F1 | 	add	fp, #36
32458     A7 2A 62 FC | 	wrlong	local03, fp
3245c     1C 4E 85 F1 | 	sub	fp, #28
32460     A7 3A 02 FB | 	rdlong	local11, fp
32464     0C 4E 85 F1 | 	sub	fp, #12
32468     1D 2B 1A F2 | 	cmp	local03, local11 wcz
3246c     0C 4E 05 11 |  if_a	add	fp, #12
32470     A7 2A 02 1B |  if_a	rdlong	local03, fp
32474     1C 4E 05 11 |  if_a	add	fp, #28
32478     A7 2A 62 1C |  if_a	wrlong	local03, fp
3247c     28 4E 85 11 |  if_a	sub	fp, #40
32480     34 4E 05 F1 | 	add	fp, #52
32484     A7 12 02 FB | 	rdlong	arg01, fp
32488     30 4E 85 F1 | 	sub	fp, #48
3248c     A7 30 02 FB | 	rdlong	local06, fp
32490     18 15 02 F6 | 	mov	arg02, local06
32494     28 14 06 F1 | 	add	arg02, #40
32498     14 30 06 F1 | 	add	local06, #20
3249c     18 3B 02 FB | 	rdlong	local11, local06
324a0     1D 37 02 F6 | 	mov	local09, local11
324a4     1B 39 02 F6 | 	mov	local10, local09
324a8     FF 39 06 F5 | 	and	local10, #511
324ac     1C 15 02 F1 | 	add	arg02, local10
324b0     24 4E 05 F1 | 	add	fp, #36
324b4     A7 16 02 FB | 	rdlong	arg03, fp
324b8     28 4E 85 F1 | 	sub	fp, #40
324bc     94 41 BF FD | 	call	#__system____builtin_memmove
324c0                 | LR__4898
324c0     0C 4E 05 F1 | 	add	fp, #12
324c4     A7 2A 02 FB | 	rdlong	local03, fp
324c8     1C 4E 05 F1 | 	add	fp, #28
324cc     A7 34 02 FB | 	rdlong	local08, fp
324d0     1A 2B 82 F1 | 	sub	local03, local08
324d4     1C 4E 85 F1 | 	sub	fp, #28
324d8     A7 2A 62 FC | 	wrlong	local03, fp
324dc     04 4E 05 F1 | 	add	fp, #4
324e0     A7 26 02 FB | 	rdlong	local01, fp
324e4     13 33 02 FB | 	rdlong	local07, local01
324e8     18 4E 05 F1 | 	add	fp, #24
324ec     A7 34 02 FB | 	rdlong	local08, fp
324f0     1A 33 02 F1 | 	add	local07, local08
324f4     13 33 62 FC | 	wrlong	local07, local01
324f8     0C 4E 05 F1 | 	add	fp, #12
324fc     A7 2A 02 FB | 	rdlong	local03, fp
32500     0C 4E 85 F1 | 	sub	fp, #12
32504     A7 3C 02 FB | 	rdlong	local12, fp
32508     1E 2B 02 F1 | 	add	local03, local12
3250c     0C 4E 05 F1 | 	add	fp, #12
32510     A7 2A 62 FC | 	wrlong	local03, fp
32514     30 4E 85 F1 | 	sub	fp, #48
32518     A7 3E 02 FB | 	rdlong	local13, fp
3251c     1F 2B 02 F6 | 	mov	local03, local13
32520     14 3E 06 F1 | 	add	local13, #20
32524     1F 41 02 FB | 	rdlong	local14, local13
32528     24 4E 05 F1 | 	add	fp, #36
3252c     A7 30 02 FB | 	rdlong	local06, fp
32530     28 4E 85 F1 | 	sub	fp, #40
32534     18 41 02 F1 | 	add	local14, local06
32538     14 2A 06 F1 | 	add	local03, #20
3253c     15 41 62 FC | 	wrlong	local14, local03
32540     84 FA 9F FD | 	jmp	#LR__4882
32544                 | LR__4899
32544                 | ' 
32544                 | ' 
32544                 | ' 
32544                 | ' 
32544                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
32544                 | ' 
32544                 | ' 	}
32544                 | ' 
32544                 | ' 	return FR_OK ;
32544     00 FA 05 F6 | 	mov	result1, #0
32548                 | LR__4900
32548     A7 F0 03 F6 | 	mov	ptra, fp
3254c     B2 00 A0 FD | 	call	#popregs_
32550                 | _fatfs_cc_f_read_ret
32550     2D 00 64 FD | 	ret
32554                 | 
32554                 | _fatfs_cc_f_write
32554     15 4A 05 F6 | 	mov	COUNT_, #21
32558     A8 00 A0 FD | 	call	#pushregs_
3255c     34 F0 07 F1 | 	add	ptra, #52
32560     04 4E 05 F1 | 	add	fp, #4
32564     A7 12 62 FC | 	wrlong	arg01, fp
32568     04 4E 05 F1 | 	add	fp, #4
3256c     A7 14 62 FC | 	wrlong	arg02, fp
32570     04 4E 05 F1 | 	add	fp, #4
32574     A7 16 62 FC | 	wrlong	arg03, fp
32578     04 4E 05 F1 | 	add	fp, #4
3257c     A7 18 62 FC | 	wrlong	arg04, fp
32580     08 4E 85 F1 | 	sub	fp, #8
32584     A7 FA 01 FB | 	rdlong	result1, fp
32588     28 4E 05 F1 | 	add	fp, #40
3258c     A7 FA 61 FC | 	wrlong	result1, fp
32590     20 4E 85 F1 | 	sub	fp, #32
32594     A7 FA 01 FB | 	rdlong	result1, fp
32598     FD 00 68 FC | 	wrlong	#0, result1
3259c     0C 4E 85 F1 | 	sub	fp, #12
325a0     A7 12 02 FB | 	rdlong	arg01, fp
325a4     14 4E 05 F1 | 	add	fp, #20
325a8     A7 14 02 F6 | 	mov	arg02, fp
325ac     18 4E 85 F1 | 	sub	fp, #24
325b0     88 F0 BF FD | 	call	#_fatfs_cc_validate
325b4     14 4E 05 F1 | 	add	fp, #20
325b8     A7 FA 61 FC | 	wrlong	result1, fp
325bc     00 FA 4D F2 | 	cmps	result1, #0 wz
325c0     14 4E 85 F1 | 	sub	fp, #20
325c4     20 00 90 5D |  if_ne	jmp	#LR__4910
325c8     04 4E 05 F1 | 	add	fp, #4
325cc     A7 14 02 FB | 	rdlong	arg02, fp
325d0     11 14 06 F1 | 	add	arg02, #17
325d4     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
325d8     10 4E 05 F1 | 	add	fp, #16
325dc     A7 14 62 FC | 	wrlong	arg02, fp
325e0     14 4E 85 F1 | 	sub	fp, #20
325e4     10 00 90 AD |  if_e	jmp	#LR__4911
325e8                 | LR__4910
325e8     14 4E 05 F1 | 	add	fp, #20
325ec     A7 FA 01 FB | 	rdlong	result1, fp
325f0     14 4E 85 F1 | 	sub	fp, #20
325f4     44 07 90 FD | 	jmp	#LR__4933
325f8                 | LR__4911
325f8     04 4E 05 F1 | 	add	fp, #4
325fc     A7 14 02 FB | 	rdlong	arg02, fp
32600     04 4E 85 F1 | 	sub	fp, #4
32604     10 14 06 F1 | 	add	arg02, #16
32608     0A 15 C2 FA | 	rdbyte	arg02, arg02
3260c     02 14 CE F7 | 	test	arg02, #2 wz
32610     07 FA 05 A6 |  if_e	mov	result1, #7
32614     24 07 90 AD |  if_e	jmp	#LR__4933
32618     04 4E 05 F1 | 	add	fp, #4
3261c     A7 14 02 FB | 	rdlong	arg02, fp
32620     0A 13 02 F6 | 	mov	arg01, arg02
32624     14 12 06 F1 | 	add	arg01, #20
32628     09 13 02 FB | 	rdlong	arg01, arg01
3262c     08 4E 05 F1 | 	add	fp, #8
32630     A7 FA 01 FB | 	rdlong	result1, fp
32634     FD 12 02 F1 | 	add	arg01, result1
32638     0C 4E 85 F1 | 	sub	fp, #12
3263c     14 14 06 F1 | 	add	arg02, #20
32640     0A FB 01 FB | 	rdlong	result1, arg02
32644     FD 12 12 F2 | 	cmp	arg01, result1 wc
32648     24 00 90 3D |  if_ae	jmp	#LR__4912
3264c     04 4E 05 F1 | 	add	fp, #4
32650     A7 14 02 FB | 	rdlong	arg02, fp
32654     01 FA 65 F6 | 	neg	result1, #1
32658     14 14 06 F1 | 	add	arg02, #20
3265c     0A 15 02 FB | 	rdlong	arg02, arg02
32660     0A FB 81 F1 | 	sub	result1, arg02
32664     08 4E 05 F1 | 	add	fp, #8
32668     A7 FA 61 FC | 	wrlong	result1, fp
3266c     0C 4E 85 F1 | 	sub	fp, #12
32670                 | LR__4912
32670                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
32670                 | ' 	}
32670                 | ' 
32670                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
32670                 | LR__4913
32670     0C 4E 05 F1 | 	add	fp, #12
32674     A7 FA 01 FB | 	rdlong	result1, fp
32678     0C 4E 85 F1 | 	sub	fp, #12
3267c     01 FA 15 F2 | 	cmp	result1, #1 wc
32680     90 06 90 CD |  if_b	jmp	#LR__4932
32684     04 4E 05 F1 | 	add	fp, #4
32688     A7 FA 01 FB | 	rdlong	result1, fp
3268c     04 4E 85 F1 | 	sub	fp, #4
32690     14 FA 05 F1 | 	add	result1, #20
32694     FD FA 01 FB | 	rdlong	result1, result1
32698     FF FB CD F7 | 	test	result1, #511 wz
3269c     D8 04 90 5D |  if_ne	jmp	#LR__4928
326a0     04 4E 05 F1 | 	add	fp, #4
326a4     A7 FA 01 FB | 	rdlong	result1, fp
326a8     14 FA 05 F1 | 	add	result1, #20
326ac     FD FA 01 FB | 	rdlong	result1, result1
326b0     09 FA 45 F0 | 	shr	result1, #9
326b4     14 4E 05 F1 | 	add	fp, #20
326b8     A7 14 02 FB | 	rdlong	arg02, fp
326bc     0A 14 06 F1 | 	add	arg02, #10
326c0     0A 19 E2 FA | 	rdword	arg04, arg02
326c4     0C 15 32 F9 | 	getword	arg02, arg04, #0
326c8     01 14 86 F1 | 	sub	arg02, #1
326cc     0A FB 09 F5 | 	and	result1, arg02 wz
326d0     14 4E 05 F1 | 	add	fp, #20
326d4     A7 FA 61 FC | 	wrlong	result1, fp
326d8     2C 4E 85 F1 | 	sub	fp, #44
326dc     44 01 90 5D |  if_ne	jmp	#LR__4919
326e0     04 4E 05 F1 | 	add	fp, #4
326e4     A7 FA 01 FB | 	rdlong	result1, fp
326e8     04 4E 85 F1 | 	sub	fp, #4
326ec     14 FA 05 F1 | 	add	result1, #20
326f0     FD 14 0A FB | 	rdlong	arg02, result1 wz
326f4     44 00 90 5D |  if_ne	jmp	#LR__4914
326f8     04 4E 05 F1 | 	add	fp, #4
326fc     A7 14 02 FB | 	rdlong	arg02, fp
32700     08 14 06 F1 | 	add	arg02, #8
32704     0A 15 0A FB | 	rdlong	arg02, arg02 wz
32708     18 4E 05 F1 | 	add	fp, #24
3270c     A7 14 62 FC | 	wrlong	arg02, fp
32710     1C 4E 85 F1 | 	sub	fp, #28
32714     4C 00 90 5D |  if_ne	jmp	#LR__4915
32718     04 4E 05 F1 | 	add	fp, #4
3271c     A7 12 02 FB | 	rdlong	arg01, fp
32720     04 4E 85 F1 | 	sub	fp, #4
32724     00 14 06 F6 | 	mov	arg02, #0
32728     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
3272c     1C 4E 05 F1 | 	add	fp, #28
32730     A7 FA 61 FC | 	wrlong	result1, fp
32734     1C 4E 85 F1 | 	sub	fp, #28
32738     28 00 90 FD | 	jmp	#LR__4915
3273c                 | LR__4914
3273c     04 4E 05 F1 | 	add	fp, #4
32740     A7 18 02 FB | 	rdlong	arg04, fp
32744     0C 13 02 F6 | 	mov	arg01, arg04
32748     04 4E 85 F1 | 	sub	fp, #4
3274c     18 18 06 F1 | 	add	arg04, #24
32750     0C 15 02 FB | 	rdlong	arg02, arg04
32754     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
32758     1C 4E 05 F1 | 	add	fp, #28
3275c     A7 FA 61 FC | 	wrlong	result1, fp
32760     1C 4E 85 F1 | 	sub	fp, #28
32764                 | LR__4915
32764     1C 4E 05 F1 | 	add	fp, #28
32768     A7 FA 09 FB | 	rdlong	result1, fp wz
3276c     1C 4E 85 F1 | 	sub	fp, #28
32770     A0 05 90 AD |  if_e	jmp	#LR__4932
32774     1C 4E 05 F1 | 	add	fp, #28
32778     A7 FA 01 FB | 	rdlong	result1, fp
3277c     1C 4E 85 F1 | 	sub	fp, #28
32780     01 FA 0D F2 | 	cmp	result1, #1 wz
32784     1C 00 90 5D |  if_ne	jmp	#LR__4916
32788     04 4E 05 F1 | 	add	fp, #4
3278c     A7 FA 01 FB | 	rdlong	result1, fp
32790     04 4E 85 F1 | 	sub	fp, #4
32794     11 FA 05 F1 | 	add	result1, #17
32798     FD 04 48 FC | 	wrbyte	#2, result1
3279c     02 FA 05 F6 | 	mov	result1, #2
327a0     98 05 90 FD | 	jmp	#LR__4933
327a4                 | LR__4916
327a4     1C 4E 05 F1 | 	add	fp, #28
327a8     A7 FA 01 FB | 	rdlong	result1, fp
327ac     1C 4E 85 F1 | 	sub	fp, #28
327b0     FF FF 7F FF 
327b4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
327b8     1C 00 90 5D |  if_ne	jmp	#LR__4917
327bc     04 4E 05 F1 | 	add	fp, #4
327c0     A7 FA 01 FB | 	rdlong	result1, fp
327c4     04 4E 85 F1 | 	sub	fp, #4
327c8     11 FA 05 F1 | 	add	result1, #17
327cc     FD 02 48 FC | 	wrbyte	#1, result1
327d0     01 FA 05 F6 | 	mov	result1, #1
327d4     64 05 90 FD | 	jmp	#LR__4933
327d8                 | LR__4917
327d8     04 4E 05 F1 | 	add	fp, #4
327dc     A7 FA 01 FB | 	rdlong	result1, fp
327e0     18 4E 05 F1 | 	add	fp, #24
327e4     A7 18 02 FB | 	rdlong	arg04, fp
327e8     18 FA 05 F1 | 	add	result1, #24
327ec     FD 18 62 FC | 	wrlong	arg04, result1
327f0     18 4E 85 F1 | 	sub	fp, #24
327f4     A7 FA 01 FB | 	rdlong	result1, fp
327f8     04 4E 85 F1 | 	sub	fp, #4
327fc     08 FA 05 F1 | 	add	result1, #8
32800     FD FA 09 FB | 	rdlong	result1, result1 wz
32804     1C 00 90 5D |  if_ne	jmp	#LR__4918
32808     04 4E 05 F1 | 	add	fp, #4
3280c     A7 18 02 FB | 	rdlong	arg04, fp
32810     18 4E 05 F1 | 	add	fp, #24
32814     A7 FA 01 FB | 	rdlong	result1, fp
32818     1C 4E 85 F1 | 	sub	fp, #28
3281c     08 18 06 F1 | 	add	arg04, #8
32820     0C FB 61 FC | 	wrlong	result1, arg04
32824                 | LR__4918
32824                 | LR__4919
32824     04 4E 05 F1 | 	add	fp, #4
32828     A7 18 02 FB | 	rdlong	arg04, fp
3282c     04 4E 85 F1 | 	sub	fp, #4
32830     10 18 06 F1 | 	add	arg04, #16
32834     0C 19 C2 FA | 	rdbyte	arg04, arg04
32838     80 18 CE F7 | 	test	arg04, #128 wz
3283c     7C 00 90 AD |  if_e	jmp	#LR__4921
32840     18 4E 05 F1 | 	add	fp, #24
32844     A7 18 02 FB | 	rdlong	arg04, fp
32848     01 18 06 F1 | 	add	arg04, #1
3284c     0C 13 C2 FA | 	rdbyte	arg01, arg04
32850     14 4E 85 F1 | 	sub	fp, #20
32854     A7 18 02 FB | 	rdlong	arg04, fp
32858     0C 15 02 F6 | 	mov	arg02, arg04
3285c     28 14 06 F1 | 	add	arg02, #40
32860     04 4E 85 F1 | 	sub	fp, #4
32864     1C 18 06 F1 | 	add	arg04, #28
32868     0C 17 02 FB | 	rdlong	arg03, arg04
3286c     01 18 06 F6 | 	mov	arg04, #1
32870     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
32874     00 FA 0D F2 | 	cmp	result1, #0 wz
32878     1C 00 90 AD |  if_e	jmp	#LR__4920
3287c     04 4E 05 F1 | 	add	fp, #4
32880     A7 FA 01 FB | 	rdlong	result1, fp
32884     04 4E 85 F1 | 	sub	fp, #4
32888     11 FA 05 F1 | 	add	result1, #17
3288c     FD 02 48 FC | 	wrbyte	#1, result1
32890     01 FA 05 F6 | 	mov	result1, #1
32894     A4 04 90 FD | 	jmp	#LR__4933
32898                 | LR__4920
32898     04 4E 05 F1 | 	add	fp, #4
3289c     A7 18 02 FB | 	rdlong	arg04, fp
328a0     0C FB 01 F6 | 	mov	result1, arg04
328a4     04 4E 85 F1 | 	sub	fp, #4
328a8     10 18 06 F1 | 	add	arg04, #16
328ac     0C 19 C2 FA | 	rdbyte	arg04, arg04
328b0     7F 18 06 F5 | 	and	arg04, #127
328b4     10 FA 05 F1 | 	add	result1, #16
328b8     FD 18 42 FC | 	wrbyte	arg04, result1
328bc                 | LR__4921
328bc     18 4E 05 F1 | 	add	fp, #24
328c0     A7 12 02 FB | 	rdlong	arg01, fp
328c4     14 4E 85 F1 | 	sub	fp, #20
328c8     A7 14 02 FB | 	rdlong	arg02, fp
328cc     04 4E 85 F1 | 	sub	fp, #4
328d0     18 14 06 F1 | 	add	arg02, #24
328d4     0A 15 02 FB | 	rdlong	arg02, arg02
328d8     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
328dc     20 4E 05 F1 | 	add	fp, #32
328e0     A7 FA 61 FC | 	wrlong	result1, fp
328e4     20 4E 85 F1 | 	sub	fp, #32
328e8     00 FA 0D F2 | 	cmp	result1, #0 wz
328ec     1C 00 90 5D |  if_ne	jmp	#LR__4922
328f0     04 4E 05 F1 | 	add	fp, #4
328f4     A7 FA 01 FB | 	rdlong	result1, fp
328f8     04 4E 85 F1 | 	sub	fp, #4
328fc     11 FA 05 F1 | 	add	result1, #17
32900     FD 04 48 FC | 	wrbyte	#2, result1
32904     02 FA 05 F6 | 	mov	result1, #2
32908     30 04 90 FD | 	jmp	#LR__4933
3290c                 | LR__4922
3290c     20 4E 05 F1 | 	add	fp, #32
32910     A7 FA 01 FB | 	rdlong	result1, fp
32914     0C 4E 05 F1 | 	add	fp, #12
32918     A7 26 02 FB | 	rdlong	local01, fp
3291c     13 FB 01 F1 | 	add	result1, local01
32920     0C 4E 85 F1 | 	sub	fp, #12
32924     A7 FA 61 FC | 	wrlong	result1, fp
32928     14 4E 85 F1 | 	sub	fp, #20
3292c     A7 FA 01 FB | 	rdlong	result1, fp
32930     09 FA 45 F0 | 	shr	result1, #9
32934     1C 4E 05 F1 | 	add	fp, #28
32938     A7 FA 61 FC | 	wrlong	result1, fp
3293c     28 4E 85 F1 | 	sub	fp, #40
32940     01 FA 15 F2 | 	cmp	result1, #1 wc
32944     60 01 90 CD |  if_b	jmp	#LR__4926
32948     2C 4E 05 F1 | 	add	fp, #44
3294c     A7 FA 01 FB | 	rdlong	result1, fp
32950     04 4E 85 F1 | 	sub	fp, #4
32954     A7 18 02 FB | 	rdlong	arg04, fp
32958     0C FB 01 F1 | 	add	result1, arg04
3295c     10 4E 85 F1 | 	sub	fp, #16
32960     A7 18 02 FB | 	rdlong	arg04, fp
32964     18 4E 85 F1 | 	sub	fp, #24
32968     0A 18 06 F1 | 	add	arg04, #10
3296c     0C 19 E2 FA | 	rdword	arg04, arg04
32970     0C FB 19 F2 | 	cmp	result1, arg04 wcz
32974     28 00 90 ED |  if_be	jmp	#LR__4923
32978     18 4E 05 F1 | 	add	fp, #24
3297c     A7 FA 01 FB | 	rdlong	result1, fp
32980     0A FA 05 F1 | 	add	result1, #10
32984     FD FA E1 FA | 	rdword	result1, result1
32988     14 4E 05 F1 | 	add	fp, #20
3298c     A7 18 02 FB | 	rdlong	arg04, fp
32990     0C FB 81 F1 | 	sub	result1, arg04
32994     04 4E 85 F1 | 	sub	fp, #4
32998     A7 FA 61 FC | 	wrlong	result1, fp
3299c     28 4E 85 F1 | 	sub	fp, #40
329a0                 | LR__4923
329a0     18 4E 05 F1 | 	add	fp, #24
329a4     A7 18 02 FB | 	rdlong	arg04, fp
329a8     01 18 06 F1 | 	add	arg04, #1
329ac     0C 13 C2 FA | 	rdbyte	arg01, arg04
329b0     18 4E 05 F1 | 	add	fp, #24
329b4     A7 14 02 FB | 	rdlong	arg02, fp
329b8     10 4E 85 F1 | 	sub	fp, #16
329bc     A7 16 02 FB | 	rdlong	arg03, fp
329c0     08 4E 05 F1 | 	add	fp, #8
329c4     A7 18 02 FB | 	rdlong	arg04, fp
329c8     28 4E 85 F1 | 	sub	fp, #40
329cc     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
329d0     00 FA 0D F2 | 	cmp	result1, #0 wz
329d4     1C 00 90 AD |  if_e	jmp	#LR__4924
329d8     04 4E 05 F1 | 	add	fp, #4
329dc     A7 26 02 FB | 	rdlong	local01, fp
329e0     04 4E 85 F1 | 	sub	fp, #4
329e4     11 26 06 F1 | 	add	local01, #17
329e8     13 03 48 FC | 	wrbyte	#1, local01
329ec     01 FA 05 F6 | 	mov	result1, #1
329f0     48 03 90 FD | 	jmp	#LR__4933
329f4                 | LR__4924
329f4     04 4E 05 F1 | 	add	fp, #4
329f8     A7 FA 01 FB | 	rdlong	result1, fp
329fc     1C FA 05 F1 | 	add	result1, #28
32a00     FD FA 01 FB | 	rdlong	result1, result1
32a04     1C 4E 05 F1 | 	add	fp, #28
32a08     A7 28 02 FB | 	rdlong	local02, fp
32a0c     14 FB 81 F1 | 	sub	result1, local02
32a10     08 4E 05 F1 | 	add	fp, #8
32a14     A7 18 02 FB | 	rdlong	arg04, fp
32a18     28 4E 85 F1 | 	sub	fp, #40
32a1c     0C FB 11 F2 | 	cmp	result1, arg04 wc
32a20     68 00 90 3D |  if_ae	jmp	#LR__4925
32a24     04 4E 05 F1 | 	add	fp, #4
32a28     A7 12 02 FB | 	rdlong	arg01, fp
32a2c     28 12 06 F1 | 	add	arg01, #40
32a30     2C 4E 05 F1 | 	add	fp, #44
32a34     A7 14 02 FB | 	rdlong	arg02, fp
32a38     2C 4E 85 F1 | 	sub	fp, #44
32a3c     A7 FA 01 FB | 	rdlong	result1, fp
32a40     1C FA 05 F1 | 	add	result1, #28
32a44     FD 2A 02 FB | 	rdlong	local03, result1
32a48     1C 4E 05 F1 | 	add	fp, #28
32a4c     A7 18 02 FB | 	rdlong	arg04, fp
32a50     20 4E 85 F1 | 	sub	fp, #32
32a54     0C 2B 82 F1 | 	sub	local03, arg04
32a58     09 2A 66 F0 | 	shl	local03, #9
32a5c     15 15 02 F1 | 	add	arg02, local03
32a60     09 16 C6 F9 | 	decod	arg03, #9
32a64     EC 3B BF FD | 	call	#__system____builtin_memmove
32a68     04 4E 05 F1 | 	add	fp, #4
32a6c     A7 18 02 FB | 	rdlong	arg04, fp
32a70     0C FB 01 F6 | 	mov	result1, arg04
32a74     04 4E 85 F1 | 	sub	fp, #4
32a78     10 18 06 F1 | 	add	arg04, #16
32a7c     0C 19 C2 FA | 	rdbyte	arg04, arg04
32a80     7F 18 06 F5 | 	and	arg04, #127
32a84     10 FA 05 F1 | 	add	result1, #16
32a88     FD 18 42 FC | 	wrbyte	arg04, result1
32a8c                 | LR__4925
32a8c     28 4E 05 F1 | 	add	fp, #40
32a90     A7 FA 01 FB | 	rdlong	result1, fp
32a94     09 FA 65 F0 | 	shl	result1, #9
32a98     04 4E 85 F1 | 	sub	fp, #4
32a9c     A7 FA 61 FC | 	wrlong	result1, fp
32aa0     24 4E 85 F1 | 	sub	fp, #36
32aa4                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
32aa4                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
32aa4                 | ' 				}
32aa4                 | ' 
32aa4                 | ' 
32aa4                 | ' 				wcnt =  ((UINT) 512 )  * cc;
32aa4                 | ' 				continue;
32aa4     74 01 90 FD | 	jmp	#LR__4929
32aa8                 | LR__4926
32aa8     04 4E 05 F1 | 	add	fp, #4
32aac     A7 28 02 FB | 	rdlong	local02, fp
32ab0     1C 28 06 F1 | 	add	local02, #28
32ab4     14 FB 01 FB | 	rdlong	result1, local02
32ab8     1C 4E 05 F1 | 	add	fp, #28
32abc     A7 28 02 FB | 	rdlong	local02, fp
32ac0     20 4E 85 F1 | 	sub	fp, #32
32ac4     14 FB 09 F2 | 	cmp	result1, local02 wz
32ac8     90 00 90 AD |  if_e	jmp	#LR__4927
32acc     04 4E 05 F1 | 	add	fp, #4
32ad0     A7 FA 01 FB | 	rdlong	result1, fp
32ad4     FD 2A 02 F6 | 	mov	local03, result1
32ad8     04 4E 85 F1 | 	sub	fp, #4
32adc     14 2A 06 F1 | 	add	local03, #20
32ae0     15 2B 02 FB | 	rdlong	local03, local03
32ae4     0C FA 05 F1 | 	add	result1, #12
32ae8     FD 2C 02 FB | 	rdlong	local04, result1
32aec     16 2F 02 F6 | 	mov	local05, local04
32af0     17 2B 12 F2 | 	cmp	local03, local05 wc
32af4     64 00 90 3D |  if_ae	jmp	#LR__4927
32af8     18 4E 05 F1 | 	add	fp, #24
32afc     A7 18 02 FB | 	rdlong	arg04, fp
32b00     01 18 06 F1 | 	add	arg04, #1
32b04     0C 13 C2 FA | 	rdbyte	arg01, arg04
32b08     14 4E 85 F1 | 	sub	fp, #20
32b0c     A7 30 02 FB | 	rdlong	local06, fp
32b10     28 30 06 F1 | 	add	local06, #40
32b14     18 33 02 F6 | 	mov	local07, local06
32b18     1C 4E 05 F1 | 	add	fp, #28
32b1c     A7 34 02 FB | 	rdlong	local08, fp
32b20     20 4E 85 F1 | 	sub	fp, #32
32b24     01 36 06 F6 | 	mov	local09, #1
32b28     19 15 02 F6 | 	mov	arg02, local07
32b2c     1A 17 02 F6 | 	mov	arg03, local08
32b30     01 18 06 F6 | 	mov	arg04, #1
32b34     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
32b38     FD 38 0A F6 | 	mov	local10, result1 wz
32b3c     1C 00 90 AD |  if_e	jmp	#LR__4927
32b40     04 4E 05 F1 | 	add	fp, #4
32b44     A7 38 02 FB | 	rdlong	local10, fp
32b48     04 4E 85 F1 | 	sub	fp, #4
32b4c     11 38 06 F1 | 	add	local10, #17
32b50     1C 03 48 FC | 	wrbyte	#1, local10
32b54                 | ' 				fp->fptr < fp->obj.objsize &&
32b54                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
32b54                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
32b54     01 FA 05 F6 | 	mov	result1, #1
32b58     E0 01 90 FD | 	jmp	#LR__4933
32b5c                 | LR__4927
32b5c     04 4E 05 F1 | 	add	fp, #4
32b60     A7 18 02 FB | 	rdlong	arg04, fp
32b64     1C 4E 05 F1 | 	add	fp, #28
32b68     A7 FA 01 FB | 	rdlong	result1, fp
32b6c     20 4E 85 F1 | 	sub	fp, #32
32b70     1C 18 06 F1 | 	add	arg04, #28
32b74     0C FB 61 FC | 	wrlong	result1, arg04
32b78                 | LR__4928
32b78     04 4E 05 F1 | 	add	fp, #4
32b7c     A7 FA 01 FB | 	rdlong	result1, fp
32b80     14 FA 05 F1 | 	add	result1, #20
32b84     FD FA 01 FB | 	rdlong	result1, result1
32b88     FF FB 05 F5 | 	and	result1, #511
32b8c     09 3A C6 F9 | 	decod	local11, #9
32b90     FD 3A 82 F1 | 	sub	local11, result1
32b94     20 4E 05 F1 | 	add	fp, #32
32b98     A7 3A 62 FC | 	wrlong	local11, fp
32b9c     18 4E 85 F1 | 	sub	fp, #24
32ba0     A7 FA 01 FB | 	rdlong	result1, fp
32ba4     0C 4E 85 F1 | 	sub	fp, #12
32ba8     FD 3A 1A F2 | 	cmp	local11, result1 wcz
32bac     0C 4E 05 11 |  if_a	add	fp, #12
32bb0     A7 3A 02 1B |  if_a	rdlong	local11, fp
32bb4     18 4E 05 11 |  if_a	add	fp, #24
32bb8     A7 3A 62 1C |  if_a	wrlong	local11, fp
32bbc     24 4E 85 11 |  if_a	sub	fp, #36
32bc0     04 4E 05 F1 | 	add	fp, #4
32bc4     A7 3A 02 FB | 	rdlong	local11, fp
32bc8     1D 13 02 F6 | 	mov	arg01, local11
32bcc     28 12 06 F1 | 	add	arg01, #40
32bd0     14 3A 06 F1 | 	add	local11, #20
32bd4     1D 3B 02 FB | 	rdlong	local11, local11
32bd8     FF 3B 06 F5 | 	and	local11, #511
32bdc     1D 13 02 F1 | 	add	arg01, local11
32be0     2C 4E 05 F1 | 	add	fp, #44
32be4     A7 14 02 FB | 	rdlong	arg02, fp
32be8     0C 4E 85 F1 | 	sub	fp, #12
32bec     A7 16 02 FB | 	rdlong	arg03, fp
32bf0     24 4E 85 F1 | 	sub	fp, #36
32bf4     5C 3A BF FD | 	call	#__system____builtin_memmove
32bf8     04 4E 05 F1 | 	add	fp, #4
32bfc     A7 FA 01 FB | 	rdlong	result1, fp
32c00     FD 3A 02 F6 | 	mov	local11, result1
32c04     04 4E 85 F1 | 	sub	fp, #4
32c08     10 FA 05 F1 | 	add	result1, #16
32c0c     FD FA C1 FA | 	rdbyte	result1, result1
32c10     80 FA 45 F5 | 	or	result1, #128
32c14     10 3A 06 F1 | 	add	local11, #16
32c18     1D FB 41 FC | 	wrbyte	result1, local11
32c1c                 | LR__4929
32c1c     0C 4E 05 F1 | 	add	fp, #12
32c20     A7 3A 02 FB | 	rdlong	local11, fp
32c24     18 4E 05 F1 | 	add	fp, #24
32c28     A7 FA 01 FB | 	rdlong	result1, fp
32c2c     FD 3A 82 F1 | 	sub	local11, result1
32c30     18 4E 85 F1 | 	sub	fp, #24
32c34     A7 3A 62 FC | 	wrlong	local11, fp
32c38     04 4E 05 F1 | 	add	fp, #4
32c3c     A7 3C 02 FB | 	rdlong	local12, fp
32c40     1E 3B 02 FB | 	rdlong	local11, local12
32c44     14 4E 05 F1 | 	add	fp, #20
32c48     A7 3E 02 FB | 	rdlong	local13, fp
32c4c     1F 3B 02 F1 | 	add	local11, local13
32c50     1E 3B 62 FC | 	wrlong	local11, local12
32c54     0C 4E 05 F1 | 	add	fp, #12
32c58     A7 3A 02 FB | 	rdlong	local11, fp
32c5c     0C 4E 85 F1 | 	sub	fp, #12
32c60     A7 40 02 FB | 	rdlong	local14, fp
32c64     20 3B 02 F1 | 	add	local11, local14
32c68     0C 4E 05 F1 | 	add	fp, #12
32c6c     A7 3A 62 FC | 	wrlong	local11, fp
32c70     2C 4E 85 F1 | 	sub	fp, #44
32c74     A7 42 02 FB | 	rdlong	local15, fp
32c78     21 3B 02 F6 | 	mov	local11, local15
32c7c     14 42 06 F1 | 	add	local15, #20
32c80     21 43 02 FB | 	rdlong	local15, local15
32c84     20 4E 05 F1 | 	add	fp, #32
32c88     A7 44 02 FB | 	rdlong	local16, fp
32c8c     22 43 02 F1 | 	add	local15, local16
32c90     14 3A 06 F1 | 	add	local11, #20
32c94     1D 43 62 FC | 	wrlong	local15, local11
32c98     20 4E 85 F1 | 	sub	fp, #32
32c9c     A7 46 02 FB | 	rdlong	local17, fp
32ca0     23 3B 02 F6 | 	mov	local11, local17
32ca4     23 49 02 F6 | 	mov	local18, local17
32ca8     04 4E 85 F1 | 	sub	fp, #4
32cac     14 46 06 F1 | 	add	local17, #20
32cb0     23 4B 02 FB | 	rdlong	local19, local17
32cb4     0C 48 06 F1 | 	add	local18, #12
32cb8     24 4D 02 FB | 	rdlong	local20, local18
32cbc     26 4B 1A F2 | 	cmp	local19, local20 wcz
32cc0     24 00 90 ED |  if_be	jmp	#LR__4930
32cc4     04 4E 05 F1 | 	add	fp, #4
32cc8     A7 2E 02 FB | 	rdlong	local05, fp
32ccc     04 4E 85 F1 | 	sub	fp, #4
32cd0     17 2B 02 F6 | 	mov	local03, local05
32cd4     14 2A 06 F1 | 	add	local03, #20
32cd8     15 2D 02 FB | 	rdlong	local04, local03
32cdc     14 2A 86 F1 | 	sub	local03, #20
32ce0     16 4F 02 F6 | 	mov	local21, local04
32ce4     20 00 90 FD | 	jmp	#LR__4931
32ce8                 | LR__4930
32ce8     04 4E 05 F1 | 	add	fp, #4
32cec     A7 32 02 FB | 	rdlong	local07, fp
32cf0     04 4E 85 F1 | 	sub	fp, #4
32cf4     19 39 02 F6 | 	mov	local10, local07
32cf8     0C 38 06 F1 | 	add	local10, #12
32cfc     1C 35 02 FB | 	rdlong	local08, local10
32d00     0C 38 86 F1 | 	sub	local10, #12
32d04     1A 4F 02 F6 | 	mov	local21, local08
32d08                 | LR__4931
32d08     0C 3A 06 F1 | 	add	local11, #12
32d0c     1D 4F 62 FC | 	wrlong	local21, local11
32d10     5C F9 9F FD | 	jmp	#LR__4913
32d14                 | LR__4932
32d14     04 4E 05 F1 | 	add	fp, #4
32d18     A7 3C 02 FB | 	rdlong	local12, fp
32d1c     1E 27 02 F6 | 	mov	local01, local12
32d20     04 4E 85 F1 | 	sub	fp, #4
32d24     10 3C 06 F1 | 	add	local12, #16
32d28     1E 3B C2 FA | 	rdbyte	local11, local12
32d2c     40 3A 46 F5 | 	or	local11, #64
32d30     10 26 06 F1 | 	add	local01, #16
32d34     13 3B 42 FC | 	wrbyte	local11, local01
32d38                 | ' 
32d38                 | ' 
32d38                 | ' 
32d38                 | ' 
32d38                 | ' 
32d38                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
32d38                 | ' 		fp->flag |=  0x80 ;
32d38                 | ' 
32d38                 | ' 	}
32d38                 | ' 
32d38                 | ' 	fp->flag |=  0x40 ;
32d38                 | ' 
32d38                 | ' 	return FR_OK ;
32d38     00 FA 05 F6 | 	mov	result1, #0
32d3c                 | LR__4933
32d3c     A7 F0 03 F6 | 	mov	ptra, fp
32d40     B2 00 A0 FD | 	call	#popregs_
32d44                 | _fatfs_cc_f_write_ret
32d44     2D 00 64 FD | 	ret
32d48                 | 
32d48                 | _fatfs_cc_f_sync
32d48     00 4A 05 F6 | 	mov	COUNT_, #0
32d4c     A8 00 A0 FD | 	call	#pushregs_
32d50     18 F0 07 F1 | 	add	ptra, #24
32d54     04 4E 05 F1 | 	add	fp, #4
32d58     A7 12 62 FC | 	wrlong	arg01, fp
32d5c     08 4E 05 F1 | 	add	fp, #8
32d60     A7 14 02 F6 | 	mov	arg02, fp
32d64     0C 4E 85 F1 | 	sub	fp, #12
32d68     D0 E8 BF FD | 	call	#_fatfs_cc_validate
32d6c     08 4E 05 F1 | 	add	fp, #8
32d70     A7 FA 61 FC | 	wrlong	result1, fp
32d74     08 4E 85 F1 | 	sub	fp, #8
32d78     00 FA 0D F2 | 	cmp	result1, #0 wz
32d7c     C0 01 90 5D |  if_ne	jmp	#LR__4943
32d80     04 4E 05 F1 | 	add	fp, #4
32d84     A7 18 02 FB | 	rdlong	arg04, fp
32d88     04 4E 85 F1 | 	sub	fp, #4
32d8c     10 18 06 F1 | 	add	arg04, #16
32d90     0C 19 C2 FA | 	rdbyte	arg04, arg04
32d94     40 18 CE F7 | 	test	arg04, #64 wz
32d98     A4 01 90 AD |  if_e	jmp	#LR__4942
32d9c     04 4E 05 F1 | 	add	fp, #4
32da0     A7 18 02 FB | 	rdlong	arg04, fp
32da4     04 4E 85 F1 | 	sub	fp, #4
32da8     10 18 06 F1 | 	add	arg04, #16
32dac     0C 19 C2 FA | 	rdbyte	arg04, arg04
32db0     80 18 CE F7 | 	test	arg04, #128 wz
32db4     64 00 90 AD |  if_e	jmp	#LR__4940
32db8     0C 4E 05 F1 | 	add	fp, #12
32dbc     A7 18 02 FB | 	rdlong	arg04, fp
32dc0     01 18 06 F1 | 	add	arg04, #1
32dc4     0C 13 C2 FA | 	rdbyte	arg01, arg04
32dc8     08 4E 85 F1 | 	sub	fp, #8
32dcc     A7 18 02 FB | 	rdlong	arg04, fp
32dd0     0C 15 02 F6 | 	mov	arg02, arg04
32dd4     28 14 06 F1 | 	add	arg02, #40
32dd8     04 4E 85 F1 | 	sub	fp, #4
32ddc     1C 18 06 F1 | 	add	arg04, #28
32de0     0C 17 02 FB | 	rdlong	arg03, arg04
32de4     01 18 06 F6 | 	mov	arg04, #1
32de8     0C AE BF FD | 	call	#_fatfs_cc_disk_write
32dec     00 FA 0D F2 | 	cmp	result1, #0 wz
32df0     01 FA 05 56 |  if_ne	mov	result1, #1
32df4     54 01 90 5D |  if_ne	jmp	#LR__4944
32df8     04 4E 05 F1 | 	add	fp, #4
32dfc     A7 18 02 FB | 	rdlong	arg04, fp
32e00     0C 17 02 F6 | 	mov	arg03, arg04
32e04     04 4E 85 F1 | 	sub	fp, #4
32e08     10 18 06 F1 | 	add	arg04, #16
32e0c     0C 19 C2 FA | 	rdbyte	arg04, arg04
32e10     7F 18 06 F5 | 	and	arg04, #127
32e14     10 16 06 F1 | 	add	arg03, #16
32e18     0B 19 42 FC | 	wrbyte	arg04, arg03
32e1c                 | LR__4940
32e1c     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
32e20     10 4E 05 F1 | 	add	fp, #16
32e24     A7 FA 61 FC | 	wrlong	result1, fp
32e28     04 4E 85 F1 | 	sub	fp, #4
32e2c     A7 12 02 FB | 	rdlong	arg01, fp
32e30     08 4E 85 F1 | 	sub	fp, #8
32e34     A7 18 02 FB | 	rdlong	arg04, fp
32e38     04 4E 85 F1 | 	sub	fp, #4
32e3c     20 18 06 F1 | 	add	arg04, #32
32e40     0C 15 02 FB | 	rdlong	arg02, arg04
32e44     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
32e48     08 4E 05 F1 | 	add	fp, #8
32e4c     A7 FA 61 FC | 	wrlong	result1, fp
32e50     08 4E 85 F1 | 	sub	fp, #8
32e54     00 FA 0D F2 | 	cmp	result1, #0 wz
32e58     E4 00 90 5D |  if_ne	jmp	#LR__4941
32e5c     04 4E 05 F1 | 	add	fp, #4
32e60     A7 18 02 FB | 	rdlong	arg04, fp
32e64     24 18 06 F1 | 	add	arg04, #36
32e68     0C 19 02 FB | 	rdlong	arg04, arg04
32e6c     10 4E 05 F1 | 	add	fp, #16
32e70     A7 18 62 FC | 	wrlong	arg04, fp
32e74     0C 17 02 F6 | 	mov	arg03, arg04
32e78     0B 16 06 F1 | 	add	arg03, #11
32e7c     0B 17 C2 FA | 	rdbyte	arg03, arg03
32e80     20 16 46 F5 | 	or	arg03, #32
32e84     0B 18 06 F1 | 	add	arg04, #11
32e88     0C 17 42 FC | 	wrbyte	arg03, arg04
32e8c     10 4E 85 F1 | 	sub	fp, #16
32e90     A7 18 02 FB | 	rdlong	arg04, fp
32e94     0C 13 02 FB | 	rdlong	arg01, arg04
32e98     10 4E 05 F1 | 	add	fp, #16
32e9c     A7 14 02 FB | 	rdlong	arg02, fp
32ea0     14 4E 85 F1 | 	sub	fp, #20
32ea4     08 18 06 F1 | 	add	arg04, #8
32ea8     0C 17 02 FB | 	rdlong	arg03, arg04
32eac     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
32eb0     14 4E 05 F1 | 	add	fp, #20
32eb4     A7 12 02 FB | 	rdlong	arg01, fp
32eb8     1C 12 06 F1 | 	add	arg01, #28
32ebc     10 4E 85 F1 | 	sub	fp, #16
32ec0     A7 18 02 FB | 	rdlong	arg04, fp
32ec4     0C 18 06 F1 | 	add	arg04, #12
32ec8     0C 15 02 FB | 	rdlong	arg02, arg04
32ecc     09 15 62 FC | 	wrlong	arg02, arg01
32ed0     10 4E 05 F1 | 	add	fp, #16
32ed4     A7 12 02 FB | 	rdlong	arg01, fp
32ed8     16 12 06 F1 | 	add	arg01, #22
32edc     04 4E 85 F1 | 	sub	fp, #4
32ee0     A7 14 02 FB | 	rdlong	arg02, fp
32ee4     09 15 62 FC | 	wrlong	arg02, arg01
32ee8     04 4E 05 F1 | 	add	fp, #4
32eec     A7 12 02 FB | 	rdlong	arg01, fp
32ef0     12 12 06 F1 | 	add	arg01, #18
32ef4     09 01 58 FC | 	wrword	#0, arg01
32ef8     08 4E 85 F1 | 	sub	fp, #8
32efc     A7 18 02 FB | 	rdlong	arg04, fp
32f00     03 18 06 F1 | 	add	arg04, #3
32f04     0C 03 48 FC | 	wrbyte	#1, arg04
32f08     A7 12 02 FB | 	rdlong	arg01, fp
32f0c     0C 4E 85 F1 | 	sub	fp, #12
32f10     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
32f14     08 4E 05 F1 | 	add	fp, #8
32f18     A7 FA 61 FC | 	wrlong	result1, fp
32f1c     04 4E 85 F1 | 	sub	fp, #4
32f20     A7 18 02 FB | 	rdlong	arg04, fp
32f24     0C 17 02 F6 | 	mov	arg03, arg04
32f28     04 4E 85 F1 | 	sub	fp, #4
32f2c     10 18 06 F1 | 	add	arg04, #16
32f30     0C 19 C2 FA | 	rdbyte	arg04, arg04
32f34     BF 18 06 F5 | 	and	arg04, #191
32f38     10 16 06 F1 | 	add	arg03, #16
32f3c     0B 19 42 FC | 	wrbyte	arg04, arg03
32f40                 | LR__4941
32f40                 | LR__4942
32f40                 | LR__4943
32f40                 | ' 					dir = fp->dir_ptr;
32f40                 | ' 					dir[ 11 ] |=  0x20 ;
32f40                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
32f40                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
32f40                 | ' 					st_dword(dir +  22 , tm);
32f40                 | ' 					st_word(dir +  18 , 0);
32f40                 | ' 					fs->wflag = 1;
32f40                 | ' 					res = sync_fs(fs);
32f40                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
32f40                 | ' 				}
32f40                 | ' 			}
32f40                 | ' 		}
32f40                 | ' 	}
32f40                 | ' 
32f40                 | ' 	return res ;
32f40     08 4E 05 F1 | 	add	fp, #8
32f44     A7 FA 01 FB | 	rdlong	result1, fp
32f48     08 4E 85 F1 | 	sub	fp, #8
32f4c                 | LR__4944
32f4c     A7 F0 03 F6 | 	mov	ptra, fp
32f50     B2 00 A0 FD | 	call	#popregs_
32f54                 | _fatfs_cc_f_sync_ret
32f54     2D 00 64 FD | 	ret
32f58                 | 
32f58                 | _fatfs_cc_f_close
32f58     01 4A 05 F6 | 	mov	COUNT_, #1
32f5c     A8 00 A0 FD | 	call	#pushregs_
32f60     10 F0 07 F1 | 	add	ptra, #16
32f64     04 4E 05 F1 | 	add	fp, #4
32f68     A7 12 62 FC | 	wrlong	arg01, fp
32f6c     04 4E 85 F1 | 	sub	fp, #4
32f70     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
32f74     08 4E 05 F1 | 	add	fp, #8
32f78     A7 FA 61 FC | 	wrlong	result1, fp
32f7c     08 4E 85 F1 | 	sub	fp, #8
32f80     00 FA 0D F2 | 	cmp	result1, #0 wz
32f84     38 00 90 5D |  if_ne	jmp	#LR__4950
32f88     04 4E 05 F1 | 	add	fp, #4
32f8c     A7 12 02 FB | 	rdlong	arg01, fp
32f90     08 4E 05 F1 | 	add	fp, #8
32f94     A7 14 02 F6 | 	mov	arg02, fp
32f98     0C 4E 85 F1 | 	sub	fp, #12
32f9c     9C E6 BF FD | 	call	#_fatfs_cc_validate
32fa0     08 4E 05 F1 | 	add	fp, #8
32fa4     A7 FA 61 FC | 	wrlong	result1, fp
32fa8     08 4E 85 F1 | 	sub	fp, #8
32fac     00 FA 0D F2 | 	cmp	result1, #0 wz
32fb0     04 4E 05 A1 |  if_e	add	fp, #4
32fb4     A7 26 02 AB |  if_e	rdlong	local01, fp
32fb8     04 4E 85 A1 |  if_e	sub	fp, #4
32fbc     13 01 68 AC |  if_e	wrlong	#0, local01
32fc0                 | LR__4950
32fc0                 | ' 
32fc0                 | ' 
32fc0                 | ' 
32fc0                 | ' 
32fc0                 | ' 			fp->obj.fs = 0;
32fc0                 | ' #line 4192 "ff.c"
32fc0                 | ' 		}
32fc0                 | ' 	}
32fc0                 | ' 	return res;
32fc0     08 4E 05 F1 | 	add	fp, #8
32fc4     A7 FA 01 FB | 	rdlong	result1, fp
32fc8     08 4E 85 F1 | 	sub	fp, #8
32fcc     A7 F0 03 F6 | 	mov	ptra, fp
32fd0     B2 00 A0 FD | 	call	#popregs_
32fd4                 | _fatfs_cc_f_close_ret
32fd4     2D 00 64 FD | 	ret
32fd8                 | 
32fd8                 | _fatfs_cc_f_lseek
32fd8     00 4A 05 F6 | 	mov	COUNT_, #0
32fdc     A8 00 A0 FD | 	call	#pushregs_
32fe0     24 F0 07 F1 | 	add	ptra, #36
32fe4     04 4E 05 F1 | 	add	fp, #4
32fe8     A7 12 62 FC | 	wrlong	arg01, fp
32fec     04 4E 05 F1 | 	add	fp, #4
32ff0     A7 14 62 FC | 	wrlong	arg02, fp
32ff4     04 4E 85 F1 | 	sub	fp, #4
32ff8     A7 12 02 FB | 	rdlong	arg01, fp
32ffc     0C 4E 05 F1 | 	add	fp, #12
33000     A7 14 02 F6 | 	mov	arg02, fp
33004     10 4E 85 F1 | 	sub	fp, #16
33008     30 E6 BF FD | 	call	#_fatfs_cc_validate
3300c     0C 4E 05 F1 | 	add	fp, #12
33010     A7 FA 61 FC | 	wrlong	result1, fp
33014     0C 4E 85 F1 | 	sub	fp, #12
33018     00 FA 0D F2 | 	cmp	result1, #0 wz
3301c     1C 00 90 5D |  if_ne	jmp	#LR__4960
33020     04 4E 05 F1 | 	add	fp, #4
33024     A7 18 02 FB | 	rdlong	arg04, fp
33028     11 18 06 F1 | 	add	arg04, #17
3302c     0C 19 C2 FA | 	rdbyte	arg04, arg04
33030     08 4E 05 F1 | 	add	fp, #8
33034     A7 18 62 FC | 	wrlong	arg04, fp
33038     0C 4E 85 F1 | 	sub	fp, #12
3303c                 | LR__4960
3303c     0C 4E 05 F1 | 	add	fp, #12
33040     A7 18 0A FB | 	rdlong	arg04, fp wz
33044     0C 4E 85 F1 | 	sub	fp, #12
33048     0C 4E 05 51 |  if_ne	add	fp, #12
3304c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
33050     0C 4E 85 51 |  if_ne	sub	fp, #12
33054     40 06 90 5D |  if_ne	jmp	#LR__4983
33058     04 4E 05 F1 | 	add	fp, #4
3305c     A7 18 02 FB | 	rdlong	arg04, fp
33060     04 4E 05 F1 | 	add	fp, #4
33064     A7 16 02 FB | 	rdlong	arg03, fp
33068     08 4E 85 F1 | 	sub	fp, #8
3306c     0C 18 06 F1 | 	add	arg04, #12
33070     0C 19 02 FB | 	rdlong	arg04, arg04
33074     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
33078     3C 00 90 ED |  if_be	jmp	#LR__4961
3307c     04 4E 05 F1 | 	add	fp, #4
33080     A7 16 02 FB | 	rdlong	arg03, fp
33084     04 4E 85 F1 | 	sub	fp, #4
33088     10 16 06 F1 | 	add	arg03, #16
3308c     0B 17 C2 FA | 	rdbyte	arg03, arg03
33090     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
33094     02 16 CE F7 | 	test	arg03, #2 wz
33098     1C 00 90 5D |  if_ne	jmp	#LR__4961
3309c     04 4E 05 F1 | 	add	fp, #4
330a0     A7 16 02 FB | 	rdlong	arg03, fp
330a4     0C 16 06 F1 | 	add	arg03, #12
330a8     0B 17 02 FB | 	rdlong	arg03, arg03
330ac     04 4E 05 F1 | 	add	fp, #4
330b0     A7 16 62 FC | 	wrlong	arg03, fp
330b4     08 4E 85 F1 | 	sub	fp, #8
330b8                 | LR__4961
330b8     04 4E 05 F1 | 	add	fp, #4
330bc     A7 16 02 FB | 	rdlong	arg03, fp
330c0     14 16 06 F1 | 	add	arg03, #20
330c4     0B 17 02 FB | 	rdlong	arg03, arg03
330c8     1C 4E 05 F1 | 	add	fp, #28
330cc     A7 16 62 FC | 	wrlong	arg03, fp
330d0     1C 4E 85 F1 | 	sub	fp, #28
330d4     A7 16 02 FB | 	rdlong	arg03, fp
330d8     18 4E 05 F1 | 	add	fp, #24
330dc     A7 00 68 FC | 	wrlong	#0, fp
330e0     14 16 06 F1 | 	add	arg03, #20
330e4     0B 01 68 FC | 	wrlong	#0, arg03
330e8     14 4E 85 F1 | 	sub	fp, #20
330ec     A7 16 02 FB | 	rdlong	arg03, fp
330f0     08 4E 85 F1 | 	sub	fp, #8
330f4     01 16 16 F2 | 	cmp	arg03, #1 wc
330f8     E4 03 90 CD |  if_b	jmp	#LR__4977
330fc     10 4E 05 F1 | 	add	fp, #16
33100     A7 16 02 FB | 	rdlong	arg03, fp
33104     0A 16 06 F1 | 	add	arg03, #10
33108     0B 19 E2 FA | 	rdword	arg04, arg03
3310c     09 18 66 F0 | 	shl	arg04, #9
33110     08 4E 05 F1 | 	add	fp, #8
33114     A7 18 62 FC | 	wrlong	arg04, fp
33118     08 4E 05 F1 | 	add	fp, #8
3311c     A7 18 02 FB | 	rdlong	arg04, fp
33120     20 4E 85 F1 | 	sub	fp, #32
33124     01 18 16 F2 | 	cmp	arg04, #1 wc
33128     AC 00 90 CD |  if_b	jmp	#LR__4962
3312c     08 4E 05 F1 | 	add	fp, #8
33130     A7 18 02 FB | 	rdlong	arg04, fp
33134     01 18 86 F1 | 	sub	arg04, #1
33138     10 4E 05 F1 | 	add	fp, #16
3313c     A7 16 02 FB | 	rdlong	arg03, fp
33140     0B 19 12 FD | 	qdiv	arg04, arg03
33144     08 4E 05 F1 | 	add	fp, #8
33148     A7 FA 01 FB | 	rdlong	result1, fp
3314c     01 FA 85 F1 | 	sub	result1, #1
33150     18 18 62 FD | 	getqx	arg04
33154     0B FB 11 FD | 	qdiv	result1, arg03
33158     20 4E 85 F1 | 	sub	fp, #32
3315c     18 16 62 FD | 	getqx	arg03
33160     0B 19 12 F2 | 	cmp	arg04, arg03 wc
33164     70 00 90 CD |  if_b	jmp	#LR__4962
33168     04 4E 05 F1 | 	add	fp, #4
3316c     A7 16 02 FB | 	rdlong	arg03, fp
33170     1C 4E 05 F1 | 	add	fp, #28
33174     A7 FA 01 FB | 	rdlong	result1, fp
33178     01 FA 85 F1 | 	sub	result1, #1
3317c     08 4E 85 F1 | 	sub	fp, #8
33180     A7 18 02 FB | 	rdlong	arg04, fp
33184     01 18 86 F1 | 	sub	arg04, #1
33188     0C FB 21 F5 | 	andn	result1, arg04
3318c     14 16 06 F1 | 	add	arg03, #20
33190     0B FB 61 FC | 	wrlong	result1, arg03
33194     10 4E 85 F1 | 	sub	fp, #16
33198     A7 16 02 FB | 	rdlong	arg03, fp
3319c     04 4E 85 F1 | 	sub	fp, #4
331a0     A7 18 02 FB | 	rdlong	arg04, fp
331a4     14 18 06 F1 | 	add	arg04, #20
331a8     0C 19 02 FB | 	rdlong	arg04, arg04
331ac     0C 17 82 F1 | 	sub	arg03, arg04
331b0     04 4E 05 F1 | 	add	fp, #4
331b4     A7 16 62 FC | 	wrlong	arg03, fp
331b8     04 4E 85 F1 | 	sub	fp, #4
331bc     A7 16 02 FB | 	rdlong	arg03, fp
331c0     18 16 06 F1 | 	add	arg03, #24
331c4     0B 17 02 FB | 	rdlong	arg03, arg03
331c8     10 4E 05 F1 | 	add	fp, #16
331cc     A7 16 62 FC | 	wrlong	arg03, fp
331d0     14 4E 85 F1 | 	sub	fp, #20
331d4     D0 00 90 FD | 	jmp	#LR__4966
331d8                 | LR__4962
331d8     04 4E 05 F1 | 	add	fp, #4
331dc     A7 16 02 FB | 	rdlong	arg03, fp
331e0     08 16 06 F1 | 	add	arg03, #8
331e4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
331e8     10 4E 05 F1 | 	add	fp, #16
331ec     A7 16 62 FC | 	wrlong	arg03, fp
331f0     14 4E 85 F1 | 	sub	fp, #20
331f4     94 00 90 5D |  if_ne	jmp	#LR__4965
331f8     04 4E 05 F1 | 	add	fp, #4
331fc     A7 12 02 FB | 	rdlong	arg01, fp
33200     04 4E 85 F1 | 	sub	fp, #4
33204     00 14 06 F6 | 	mov	arg02, #0
33208     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
3320c     14 4E 05 F1 | 	add	fp, #20
33210     A7 FA 61 FC | 	wrlong	result1, fp
33214     14 4E 85 F1 | 	sub	fp, #20
33218     01 FA 0D F2 | 	cmp	result1, #1 wz
3321c     1C 00 90 5D |  if_ne	jmp	#LR__4963
33220     04 4E 05 F1 | 	add	fp, #4
33224     A7 16 02 FB | 	rdlong	arg03, fp
33228     04 4E 85 F1 | 	sub	fp, #4
3322c     11 16 06 F1 | 	add	arg03, #17
33230     0B 05 48 FC | 	wrbyte	#2, arg03
33234     02 FA 05 F6 | 	mov	result1, #2
33238     5C 04 90 FD | 	jmp	#LR__4983
3323c                 | LR__4963
3323c     14 4E 05 F1 | 	add	fp, #20
33240     A7 FA 01 FB | 	rdlong	result1, fp
33244     14 4E 85 F1 | 	sub	fp, #20
33248     FF FF 7F FF 
3324c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
33250     1C 00 90 5D |  if_ne	jmp	#LR__4964
33254     04 4E 05 F1 | 	add	fp, #4
33258     A7 16 02 FB | 	rdlong	arg03, fp
3325c     04 4E 85 F1 | 	sub	fp, #4
33260     11 16 06 F1 | 	add	arg03, #17
33264     0B 03 48 FC | 	wrbyte	#1, arg03
33268     01 FA 05 F6 | 	mov	result1, #1
3326c     28 04 90 FD | 	jmp	#LR__4983
33270                 | LR__4964
33270     04 4E 05 F1 | 	add	fp, #4
33274     A7 16 02 FB | 	rdlong	arg03, fp
33278     10 4E 05 F1 | 	add	fp, #16
3327c     A7 18 02 FB | 	rdlong	arg04, fp
33280     14 4E 85 F1 | 	sub	fp, #20
33284     08 16 06 F1 | 	add	arg03, #8
33288     0B 19 62 FC | 	wrlong	arg04, arg03
3328c                 | LR__4965
3328c     04 4E 05 F1 | 	add	fp, #4
33290     A7 16 02 FB | 	rdlong	arg03, fp
33294     10 4E 05 F1 | 	add	fp, #16
33298     A7 18 02 FB | 	rdlong	arg04, fp
3329c     14 4E 85 F1 | 	sub	fp, #20
332a0     18 16 06 F1 | 	add	arg03, #24
332a4     0B 19 62 FC | 	wrlong	arg04, arg03
332a8                 | LR__4966
332a8     14 4E 05 F1 | 	add	fp, #20
332ac     A7 16 0A FB | 	rdlong	arg03, fp wz
332b0     14 4E 85 F1 | 	sub	fp, #20
332b4     28 02 90 AD |  if_e	jmp	#LR__4976
332b8                 | ' 				while (ofs > bcs) {
332b8                 | LR__4967
332b8     08 4E 05 F1 | 	add	fp, #8
332bc     A7 18 02 FB | 	rdlong	arg04, fp
332c0     10 4E 05 F1 | 	add	fp, #16
332c4     A7 16 02 FB | 	rdlong	arg03, fp
332c8     18 4E 85 F1 | 	sub	fp, #24
332cc     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
332d0     68 01 90 ED |  if_be	jmp	#LR__4973
332d4     08 4E 05 F1 | 	add	fp, #8
332d8     A7 18 02 FB | 	rdlong	arg04, fp
332dc     10 4E 05 F1 | 	add	fp, #16
332e0     A7 16 02 FB | 	rdlong	arg03, fp
332e4     0B 19 82 F1 | 	sub	arg04, arg03
332e8     10 4E 85 F1 | 	sub	fp, #16
332ec     A7 18 62 FC | 	wrlong	arg04, fp
332f0     04 4E 85 F1 | 	sub	fp, #4
332f4     A7 18 02 FB | 	rdlong	arg04, fp
332f8     0C FB 01 F6 | 	mov	result1, arg04
332fc     14 18 06 F1 | 	add	arg04, #20
33300     0C 19 02 FB | 	rdlong	arg04, arg04
33304     14 4E 05 F1 | 	add	fp, #20
33308     A7 16 02 FB | 	rdlong	arg03, fp
3330c     0B 19 02 F1 | 	add	arg04, arg03
33310     14 FA 05 F1 | 	add	result1, #20
33314     FD 18 62 FC | 	wrlong	arg04, result1
33318     14 4E 85 F1 | 	sub	fp, #20
3331c     A7 16 02 FB | 	rdlong	arg03, fp
33320     04 4E 85 F1 | 	sub	fp, #4
33324     10 16 06 F1 | 	add	arg03, #16
33328     0B 17 C2 FA | 	rdbyte	arg03, arg03
3332c     02 16 CE F7 | 	test	arg03, #2 wz
33330     3C 00 90 AD |  if_e	jmp	#LR__4968
33334     04 4E 05 F1 | 	add	fp, #4
33338     A7 12 02 FB | 	rdlong	arg01, fp
3333c     10 4E 05 F1 | 	add	fp, #16
33340     A7 14 02 FB | 	rdlong	arg02, fp
33344     14 4E 85 F1 | 	sub	fp, #20
33348     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
3334c     14 4E 05 F1 | 	add	fp, #20
33350     A7 FA 61 FC | 	wrlong	result1, fp
33354     00 FA 4D F2 | 	cmps	result1, #0 wz
33358     14 4E 85 F1 | 	sub	fp, #20
3335c     08 4E 05 A1 |  if_e	add	fp, #8
33360     A7 00 68 AC |  if_e	wrlong	#0, fp
33364     08 4E 85 A1 |  if_e	sub	fp, #8
33368                 | ' 							ofs = 0; break;
33368     D0 00 90 AD |  if_e	jmp	#LR__4973
3336c     24 00 90 FD | 	jmp	#LR__4969
33370                 | LR__4968
33370     04 4E 05 F1 | 	add	fp, #4
33374     A7 12 02 FB | 	rdlong	arg01, fp
33378     10 4E 05 F1 | 	add	fp, #16
3337c     A7 14 02 FB | 	rdlong	arg02, fp
33380     14 4E 85 F1 | 	sub	fp, #20
33384     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
33388     14 4E 05 F1 | 	add	fp, #20
3338c     A7 FA 61 FC | 	wrlong	result1, fp
33390     14 4E 85 F1 | 	sub	fp, #20
33394                 | LR__4969
33394     14 4E 05 F1 | 	add	fp, #20
33398     A7 16 02 FB | 	rdlong	arg03, fp
3339c     14 4E 85 F1 | 	sub	fp, #20
333a0     FF FF 7F FF 
333a4     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
333a8     1C 00 90 5D |  if_ne	jmp	#LR__4970
333ac     04 4E 05 F1 | 	add	fp, #4
333b0     A7 16 02 FB | 	rdlong	arg03, fp
333b4     04 4E 85 F1 | 	sub	fp, #4
333b8     11 16 06 F1 | 	add	arg03, #17
333bc     0B 03 48 FC | 	wrbyte	#1, arg03
333c0     01 FA 05 F6 | 	mov	result1, #1
333c4     D0 02 90 FD | 	jmp	#LR__4983
333c8                 | LR__4970
333c8     14 4E 05 F1 | 	add	fp, #20
333cc     A7 16 02 FB | 	rdlong	arg03, fp
333d0     14 4E 85 F1 | 	sub	fp, #20
333d4     02 16 16 F2 | 	cmp	arg03, #2 wc
333d8     24 00 90 CD |  if_b	jmp	#LR__4971
333dc     10 4E 05 F1 | 	add	fp, #16
333e0     A7 18 02 FB | 	rdlong	arg04, fp
333e4     04 4E 05 F1 | 	add	fp, #4
333e8     A7 16 02 FB | 	rdlong	arg03, fp
333ec     14 4E 85 F1 | 	sub	fp, #20
333f0     18 18 06 F1 | 	add	arg04, #24
333f4     0C 19 02 FB | 	rdlong	arg04, arg04
333f8     0C 17 12 F2 | 	cmp	arg03, arg04 wc
333fc     1C 00 90 CD |  if_b	jmp	#LR__4972
33400                 | LR__4971
33400     04 4E 05 F1 | 	add	fp, #4
33404     A7 16 02 FB | 	rdlong	arg03, fp
33408     04 4E 85 F1 | 	sub	fp, #4
3340c     11 16 06 F1 | 	add	arg03, #17
33410     0B 05 48 FC | 	wrbyte	#2, arg03
33414     02 FA 05 F6 | 	mov	result1, #2
33418     7C 02 90 FD | 	jmp	#LR__4983
3341c                 | LR__4972
3341c     04 4E 05 F1 | 	add	fp, #4
33420     A7 18 02 FB | 	rdlong	arg04, fp
33424     10 4E 05 F1 | 	add	fp, #16
33428     A7 16 02 FB | 	rdlong	arg03, fp
3342c     14 4E 85 F1 | 	sub	fp, #20
33430     18 18 06 F1 | 	add	arg04, #24
33434     0C 17 62 FC | 	wrlong	arg03, arg04
33438     7C FE 9F FD | 	jmp	#LR__4967
3343c                 | LR__4973
3343c     04 4E 05 F1 | 	add	fp, #4
33440     A7 16 02 FB | 	rdlong	arg03, fp
33444     0B 13 02 F6 | 	mov	arg01, arg03
33448     14 16 06 F1 | 	add	arg03, #20
3344c     0B 15 02 FB | 	rdlong	arg02, arg03
33450     04 4E 05 F1 | 	add	fp, #4
33454     A7 16 02 FB | 	rdlong	arg03, fp
33458     0B 15 02 F1 | 	add	arg02, arg03
3345c     14 12 06 F1 | 	add	arg01, #20
33460     09 15 62 FC | 	wrlong	arg02, arg01
33464     A7 16 02 FB | 	rdlong	arg03, fp
33468     08 4E 85 F1 | 	sub	fp, #8
3346c     FF 17 CE F7 | 	test	arg03, #511 wz
33470     6C 00 90 AD |  if_e	jmp	#LR__4975
33474     10 4E 05 F1 | 	add	fp, #16
33478     A7 12 02 FB | 	rdlong	arg01, fp
3347c     04 4E 05 F1 | 	add	fp, #4
33480     A7 14 02 FB | 	rdlong	arg02, fp
33484     14 4E 85 F1 | 	sub	fp, #20
33488     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
3348c     1C 4E 05 F1 | 	add	fp, #28
33490     A7 FA 61 FC | 	wrlong	result1, fp
33494     1C 4E 85 F1 | 	sub	fp, #28
33498     00 FA 0D F2 | 	cmp	result1, #0 wz
3349c     1C 00 90 5D |  if_ne	jmp	#LR__4974
334a0     04 4E 05 F1 | 	add	fp, #4
334a4     A7 16 02 FB | 	rdlong	arg03, fp
334a8     04 4E 85 F1 | 	sub	fp, #4
334ac     11 16 06 F1 | 	add	arg03, #17
334b0     0B 05 48 FC | 	wrbyte	#2, arg03
334b4     02 FA 05 F6 | 	mov	result1, #2
334b8     DC 01 90 FD | 	jmp	#LR__4983
334bc                 | LR__4974
334bc     1C 4E 05 F1 | 	add	fp, #28
334c0     A7 18 02 FB | 	rdlong	arg04, fp
334c4     14 4E 85 F1 | 	sub	fp, #20
334c8     A7 16 02 FB | 	rdlong	arg03, fp
334cc     09 16 46 F0 | 	shr	arg03, #9
334d0     0B 19 02 F1 | 	add	arg04, arg03
334d4     14 4E 05 F1 | 	add	fp, #20
334d8     A7 18 62 FC | 	wrlong	arg04, fp
334dc     1C 4E 85 F1 | 	sub	fp, #28
334e0                 | LR__4975
334e0                 | LR__4976
334e0                 | LR__4977
334e0     04 4E 05 F1 | 	add	fp, #4
334e4     A7 18 02 FB | 	rdlong	arg04, fp
334e8     0C 17 02 F6 | 	mov	arg03, arg04
334ec     04 4E 85 F1 | 	sub	fp, #4
334f0     14 16 06 F1 | 	add	arg03, #20
334f4     0B 17 02 FB | 	rdlong	arg03, arg03
334f8     0C 18 06 F1 | 	add	arg04, #12
334fc     0C 19 02 FB | 	rdlong	arg04, arg04
33500     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
33504     3C 00 90 ED |  if_be	jmp	#LR__4978
33508     04 4E 05 F1 | 	add	fp, #4
3350c     A7 18 02 FB | 	rdlong	arg04, fp
33510     0C 17 02 F6 | 	mov	arg03, arg04
33514     14 18 06 F1 | 	add	arg04, #20
33518     0C 19 02 FB | 	rdlong	arg04, arg04
3351c     0C 16 06 F1 | 	add	arg03, #12
33520     0B 19 62 FC | 	wrlong	arg04, arg03
33524     A7 18 02 FB | 	rdlong	arg04, fp
33528     0C 17 02 F6 | 	mov	arg03, arg04
3352c     04 4E 85 F1 | 	sub	fp, #4
33530     10 18 06 F1 | 	add	arg04, #16
33534     0C 19 C2 FA | 	rdbyte	arg04, arg04
33538     40 18 46 F5 | 	or	arg04, #64
3353c     10 16 06 F1 | 	add	arg03, #16
33540     0B 19 42 FC | 	wrbyte	arg04, arg03
33544                 | LR__4978
33544     04 4E 05 F1 | 	add	fp, #4
33548     A7 16 02 FB | 	rdlong	arg03, fp
3354c     04 4E 85 F1 | 	sub	fp, #4
33550     14 16 06 F1 | 	add	arg03, #20
33554     0B 17 02 FB | 	rdlong	arg03, arg03
33558     FF 17 CE F7 | 	test	arg03, #511 wz
3355c     2C 01 90 AD |  if_e	jmp	#LR__4982
33560     04 4E 05 F1 | 	add	fp, #4
33564     A7 18 02 FB | 	rdlong	arg04, fp
33568     18 4E 05 F1 | 	add	fp, #24
3356c     A7 16 02 FB | 	rdlong	arg03, fp
33570     1C 4E 85 F1 | 	sub	fp, #28
33574     1C 18 06 F1 | 	add	arg04, #28
33578     0C 19 02 FB | 	rdlong	arg04, arg04
3357c     0C 17 0A F2 | 	cmp	arg03, arg04 wz
33580     08 01 90 AD |  if_e	jmp	#LR__4982
33584     04 4E 05 F1 | 	add	fp, #4
33588     A7 16 02 FB | 	rdlong	arg03, fp
3358c     04 4E 85 F1 | 	sub	fp, #4
33590     10 16 06 F1 | 	add	arg03, #16
33594     0B 17 C2 FA | 	rdbyte	arg03, arg03
33598     80 16 CE F7 | 	test	arg03, #128 wz
3359c     7C 00 90 AD |  if_e	jmp	#LR__4980
335a0     10 4E 05 F1 | 	add	fp, #16
335a4     A7 16 02 FB | 	rdlong	arg03, fp
335a8     01 16 06 F1 | 	add	arg03, #1
335ac     0B 13 C2 FA | 	rdbyte	arg01, arg03
335b0     0C 4E 85 F1 | 	sub	fp, #12
335b4     A7 16 02 FB | 	rdlong	arg03, fp
335b8     0B 15 02 F6 | 	mov	arg02, arg03
335bc     28 14 06 F1 | 	add	arg02, #40
335c0     04 4E 85 F1 | 	sub	fp, #4
335c4     1C 16 06 F1 | 	add	arg03, #28
335c8     0B 17 02 FB | 	rdlong	arg03, arg03
335cc     01 18 06 F6 | 	mov	arg04, #1
335d0     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
335d4     00 FA 0D F2 | 	cmp	result1, #0 wz
335d8     1C 00 90 AD |  if_e	jmp	#LR__4979
335dc     04 4E 05 F1 | 	add	fp, #4
335e0     A7 16 02 FB | 	rdlong	arg03, fp
335e4     04 4E 85 F1 | 	sub	fp, #4
335e8     11 16 06 F1 | 	add	arg03, #17
335ec     0B 03 48 FC | 	wrbyte	#1, arg03
335f0     01 FA 05 F6 | 	mov	result1, #1
335f4     A0 00 90 FD | 	jmp	#LR__4983
335f8                 | LR__4979
335f8     04 4E 05 F1 | 	add	fp, #4
335fc     A7 18 02 FB | 	rdlong	arg04, fp
33600     0C 17 02 F6 | 	mov	arg03, arg04
33604     04 4E 85 F1 | 	sub	fp, #4
33608     10 18 06 F1 | 	add	arg04, #16
3360c     0C 19 C2 FA | 	rdbyte	arg04, arg04
33610     7F 18 06 F5 | 	and	arg04, #127
33614     10 16 06 F1 | 	add	arg03, #16
33618     0B 19 42 FC | 	wrbyte	arg04, arg03
3361c                 | LR__4980
3361c     10 4E 05 F1 | 	add	fp, #16
33620     A7 16 02 FB | 	rdlong	arg03, fp
33624     01 16 06 F1 | 	add	arg03, #1
33628     0B 13 C2 FA | 	rdbyte	arg01, arg03
3362c     0C 4E 85 F1 | 	sub	fp, #12
33630     A7 14 02 FB | 	rdlong	arg02, fp
33634     28 14 06 F1 | 	add	arg02, #40
33638     18 4E 05 F1 | 	add	fp, #24
3363c     A7 16 02 FB | 	rdlong	arg03, fp
33640     1C 4E 85 F1 | 	sub	fp, #28
33644     01 18 06 F6 | 	mov	arg04, #1
33648     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
3364c     00 FA 0D F2 | 	cmp	result1, #0 wz
33650     1C 00 90 AD |  if_e	jmp	#LR__4981
33654     04 4E 05 F1 | 	add	fp, #4
33658     A7 16 02 FB | 	rdlong	arg03, fp
3365c     04 4E 85 F1 | 	sub	fp, #4
33660     11 16 06 F1 | 	add	arg03, #17
33664     0B 03 48 FC | 	wrbyte	#1, arg03
33668     01 FA 05 F6 | 	mov	result1, #1
3366c     28 00 90 FD | 	jmp	#LR__4983
33670                 | LR__4981
33670     04 4E 05 F1 | 	add	fp, #4
33674     A7 18 02 FB | 	rdlong	arg04, fp
33678     18 4E 05 F1 | 	add	fp, #24
3367c     A7 16 02 FB | 	rdlong	arg03, fp
33680     1C 4E 85 F1 | 	sub	fp, #28
33684     1C 18 06 F1 | 	add	arg04, #28
33688     0C 17 62 FC | 	wrlong	arg03, arg04
3368c                 | LR__4982
3368c                 | ' 
3368c                 | ' 			fp->sect = nsect;
3368c                 | ' 		}
3368c                 | ' 	}
3368c                 | ' 
3368c                 | ' 	return res ;
3368c     0C 4E 05 F1 | 	add	fp, #12
33690     A7 FA 01 FB | 	rdlong	result1, fp
33694     0C 4E 85 F1 | 	sub	fp, #12
33698                 | LR__4983
33698     A7 F0 03 F6 | 	mov	ptra, fp
3369c     B2 00 A0 FD | 	call	#popregs_
336a0                 | _fatfs_cc_f_lseek_ret
336a0     2D 00 64 FD | 	ret
336a4                 | 
336a4                 | _fatfs_cc_f_opendir
336a4     01 4A 05 F6 | 	mov	COUNT_, #1
336a8     A8 00 A0 FD | 	call	#pushregs_
336ac     14 F0 07 F1 | 	add	ptra, #20
336b0     04 4E 05 F1 | 	add	fp, #4
336b4     A7 12 62 FC | 	wrlong	arg01, fp
336b8     04 4E 05 F1 | 	add	fp, #4
336bc     A7 14 62 FC | 	wrlong	arg02, fp
336c0     04 4E 85 F1 | 	sub	fp, #4
336c4     A7 16 0A FB | 	rdlong	arg03, fp wz
336c8     04 4E 85 F1 | 	sub	fp, #4
336cc     09 FA 05 A6 |  if_e	mov	result1, #9
336d0     78 01 90 AD |  if_e	jmp	#LR__4996
336d4     08 4E 05 F1 | 	add	fp, #8
336d8     A7 12 02 F6 | 	mov	arg01, fp
336dc     08 4E 05 F1 | 	add	fp, #8
336e0     A7 14 02 F6 | 	mov	arg02, fp
336e4     10 4E 85 F1 | 	sub	fp, #16
336e8     00 16 06 F6 | 	mov	arg03, #0
336ec     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
336f0     0C 4E 05 F1 | 	add	fp, #12
336f4     A7 FA 61 FC | 	wrlong	result1, fp
336f8     0C 4E 85 F1 | 	sub	fp, #12
336fc     00 FA 0D F2 | 	cmp	result1, #0 wz
33700     20 01 90 5D |  if_ne	jmp	#LR__4995
33704     04 4E 05 F1 | 	add	fp, #4
33708     A7 16 02 FB | 	rdlong	arg03, fp
3370c     0C 4E 05 F1 | 	add	fp, #12
33710     A7 FA 01 FB | 	rdlong	result1, fp
33714     0B FB 61 FC | 	wrlong	result1, arg03
33718     0C 4E 85 F1 | 	sub	fp, #12
3371c     A7 12 02 FB | 	rdlong	arg01, fp
33720     04 4E 05 F1 | 	add	fp, #4
33724     A7 14 02 FB | 	rdlong	arg02, fp
33728     08 4E 85 F1 | 	sub	fp, #8
3372c     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
33730     0C 4E 05 F1 | 	add	fp, #12
33734     A7 FA 61 FC | 	wrlong	result1, fp
33738     0C 4E 85 F1 | 	sub	fp, #12
3373c     00 FA 0D F2 | 	cmp	result1, #0 wz
33740     C4 00 90 5D |  if_ne	jmp	#LR__4994
33744     04 4E 05 F1 | 	add	fp, #4
33748     A7 16 02 FB | 	rdlong	arg03, fp
3374c     04 4E 85 F1 | 	sub	fp, #4
33750     2B 16 06 F1 | 	add	arg03, #43
33754     0B 17 C2 FA | 	rdbyte	arg03, arg03
33758     80 16 CE F7 | 	test	arg03, #128 wz
3375c     58 00 90 5D |  if_ne	jmp	#LR__4992
33760     04 4E 05 F1 | 	add	fp, #4
33764     A7 16 02 FB | 	rdlong	arg03, fp
33768     04 4E 85 F1 | 	sub	fp, #4
3376c     06 16 06 F1 | 	add	arg03, #6
33770     0B 17 C2 FA | 	rdbyte	arg03, arg03
33774     10 16 CE F7 | 	test	arg03, #16 wz
33778     30 00 90 AD |  if_e	jmp	#LR__4990
3377c     04 4E 05 F1 | 	add	fp, #4
33780     A7 16 02 FB | 	rdlong	arg03, fp
33784     0B 27 02 F6 | 	mov	local01, arg03
33788     0C 4E 05 F1 | 	add	fp, #12
3378c     A7 12 02 FB | 	rdlong	arg01, fp
33790     10 4E 85 F1 | 	sub	fp, #16
33794     1C 16 06 F1 | 	add	arg03, #28
33798     0B 15 02 FB | 	rdlong	arg02, arg03
3379c     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
337a0     08 26 06 F1 | 	add	local01, #8
337a4     13 FB 61 FC | 	wrlong	result1, local01
337a8     0C 00 90 FD | 	jmp	#LR__4991
337ac                 | LR__4990
337ac     0C 4E 05 F1 | 	add	fp, #12
337b0     A7 0A 68 FC | 	wrlong	#5, fp
337b4     0C 4E 85 F1 | 	sub	fp, #12
337b8                 | LR__4991
337b8                 | LR__4992
337b8     0C 4E 05 F1 | 	add	fp, #12
337bc     A7 26 0A FB | 	rdlong	local01, fp wz
337c0     0C 4E 85 F1 | 	sub	fp, #12
337c4     40 00 90 5D |  if_ne	jmp	#LR__4993
337c8     04 4E 05 F1 | 	add	fp, #4
337cc     A7 26 02 FB | 	rdlong	local01, fp
337d0     0C 4E 05 F1 | 	add	fp, #12
337d4     A7 16 02 FB | 	rdlong	arg03, fp
337d8     06 16 06 F1 | 	add	arg03, #6
337dc     0B 17 E2 FA | 	rdword	arg03, arg03
337e0     04 26 06 F1 | 	add	local01, #4
337e4     13 17 52 FC | 	wrword	arg03, local01
337e8     0C 4E 85 F1 | 	sub	fp, #12
337ec     A7 12 02 FB | 	rdlong	arg01, fp
337f0     04 4E 85 F1 | 	sub	fp, #4
337f4     00 14 06 F6 | 	mov	arg02, #0
337f8     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
337fc     0C 4E 05 F1 | 	add	fp, #12
33800     A7 FA 61 FC | 	wrlong	result1, fp
33804     0C 4E 85 F1 | 	sub	fp, #12
33808                 | LR__4993
33808                 | LR__4994
33808     0C 4E 05 F1 | 	add	fp, #12
3380c     A7 26 02 FB | 	rdlong	local01, fp
33810     0C 4E 85 F1 | 	sub	fp, #12
33814     04 26 0E F2 | 	cmp	local01, #4 wz
33818     0C 4E 05 A1 |  if_e	add	fp, #12
3381c     A7 0A 68 AC |  if_e	wrlong	#5, fp
33820     0C 4E 85 A1 |  if_e	sub	fp, #12
33824                 | LR__4995
33824     0C 4E 05 F1 | 	add	fp, #12
33828     A7 26 0A FB | 	rdlong	local01, fp wz
3382c     0C 4E 85 F1 | 	sub	fp, #12
33830     04 4E 05 51 |  if_ne	add	fp, #4
33834     A7 26 02 5B |  if_ne	rdlong	local01, fp
33838     04 4E 85 51 |  if_ne	sub	fp, #4
3383c     13 01 68 5C |  if_ne	wrlong	#0, local01
33840                 | ' 
33840                 | ' 	return res ;
33840     0C 4E 05 F1 | 	add	fp, #12
33844     A7 FA 01 FB | 	rdlong	result1, fp
33848     0C 4E 85 F1 | 	sub	fp, #12
3384c                 | LR__4996
3384c     A7 F0 03 F6 | 	mov	ptra, fp
33850     B2 00 A0 FD | 	call	#popregs_
33854                 | _fatfs_cc_f_opendir_ret
33854     2D 00 64 FD | 	ret
33858                 | 
33858                 | _fatfs_cc_f_closedir
33858     00 4A 05 F6 | 	mov	COUNT_, #0
3385c     A8 00 A0 FD | 	call	#pushregs_
33860     10 F0 07 F1 | 	add	ptra, #16
33864     04 4E 05 F1 | 	add	fp, #4
33868     A7 12 62 FC | 	wrlong	arg01, fp
3386c     08 4E 05 F1 | 	add	fp, #8
33870     A7 14 02 F6 | 	mov	arg02, fp
33874     0C 4E 85 F1 | 	sub	fp, #12
33878     C0 DD BF FD | 	call	#_fatfs_cc_validate
3387c     08 4E 05 F1 | 	add	fp, #8
33880     A7 FA 61 FC | 	wrlong	result1, fp
33884     08 4E 85 F1 | 	sub	fp, #8
33888     00 FA 0D F2 | 	cmp	result1, #0 wz
3388c     04 4E 05 A1 |  if_e	add	fp, #4
33890     A7 FA 01 AB |  if_e	rdlong	result1, fp
33894     04 4E 85 A1 |  if_e	sub	fp, #4
33898     FD 00 68 AC |  if_e	wrlong	#0, result1
3389c                 | ' 
3389c                 | ' 
3389c                 | ' 
3389c                 | ' 
3389c                 | ' 		dp->obj.fs = 0;
3389c                 | ' #line 4633 "ff.c"
3389c                 | ' 	}
3389c                 | ' 	return res;
3389c     08 4E 05 F1 | 	add	fp, #8
338a0     A7 FA 01 FB | 	rdlong	result1, fp
338a4     08 4E 85 F1 | 	sub	fp, #8
338a8     A7 F0 03 F6 | 	mov	ptra, fp
338ac     B2 00 A0 FD | 	call	#popregs_
338b0                 | _fatfs_cc_f_closedir_ret
338b0     2D 00 64 FD | 	ret
338b4                 | 
338b4                 | _fatfs_cc_f_readdir
338b4     00 4A 05 F6 | 	mov	COUNT_, #0
338b8     A8 00 A0 FD | 	call	#pushregs_
338bc     14 F0 07 F1 | 	add	ptra, #20
338c0     04 4E 05 F1 | 	add	fp, #4
338c4     A7 12 62 FC | 	wrlong	arg01, fp
338c8     04 4E 05 F1 | 	add	fp, #4
338cc     A7 14 62 FC | 	wrlong	arg02, fp
338d0     04 4E 85 F1 | 	sub	fp, #4
338d4     A7 12 02 FB | 	rdlong	arg01, fp
338d8     0C 4E 05 F1 | 	add	fp, #12
338dc     A7 14 02 F6 | 	mov	arg02, fp
338e0     10 4E 85 F1 | 	sub	fp, #16
338e4     54 DD BF FD | 	call	#_fatfs_cc_validate
338e8     0C 4E 05 F1 | 	add	fp, #12
338ec     A7 FA 61 FC | 	wrlong	result1, fp
338f0     0C 4E 85 F1 | 	sub	fp, #12
338f4     00 FA 0D F2 | 	cmp	result1, #0 wz
338f8     BC 00 90 5D |  if_ne	jmp	#LR__5003
338fc     08 4E 05 F1 | 	add	fp, #8
33900     A7 FA 09 FB | 	rdlong	result1, fp wz
33904     08 4E 85 F1 | 	sub	fp, #8
33908     24 00 90 5D |  if_ne	jmp	#LR__5000
3390c     04 4E 05 F1 | 	add	fp, #4
33910     A7 12 02 FB | 	rdlong	arg01, fp
33914     04 4E 85 F1 | 	sub	fp, #4
33918     00 14 06 F6 | 	mov	arg02, #0
3391c     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
33920     0C 4E 05 F1 | 	add	fp, #12
33924     A7 FA 61 FC | 	wrlong	result1, fp
33928     0C 4E 85 F1 | 	sub	fp, #12
3392c     88 00 90 FD | 	jmp	#LR__5002
33930                 | LR__5000
33930     04 4E 05 F1 | 	add	fp, #4
33934     A7 12 02 FB | 	rdlong	arg01, fp
33938     04 4E 85 F1 | 	sub	fp, #4
3393c     00 14 06 F6 | 	mov	arg02, #0
33940     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
33944     0C 4E 05 F1 | 	add	fp, #12
33948     A7 FA 61 FC | 	wrlong	result1, fp
3394c     0C 4E 85 F1 | 	sub	fp, #12
33950     04 FA 0D F2 | 	cmp	result1, #4 wz
33954     0C 4E 05 A1 |  if_e	add	fp, #12
33958     A7 00 68 AC |  if_e	wrlong	#0, fp
3395c     0C 4E 85 A1 |  if_e	sub	fp, #12
33960     0C 4E 05 F1 | 	add	fp, #12
33964     A7 FA 09 FB | 	rdlong	result1, fp wz
33968     0C 4E 85 F1 | 	sub	fp, #12
3396c     48 00 90 5D |  if_ne	jmp	#LR__5001
33970     04 4E 05 F1 | 	add	fp, #4
33974     A7 12 02 FB | 	rdlong	arg01, fp
33978     04 4E 05 F1 | 	add	fp, #4
3397c     A7 14 02 FB | 	rdlong	arg02, fp
33980     08 4E 85 F1 | 	sub	fp, #8
33984     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
33988     04 4E 05 F1 | 	add	fp, #4
3398c     A7 12 02 FB | 	rdlong	arg01, fp
33990     04 4E 85 F1 | 	sub	fp, #4
33994     00 14 06 F6 | 	mov	arg02, #0
33998     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
3399c     0C 4E 05 F1 | 	add	fp, #12
339a0     A7 FA 61 FC | 	wrlong	result1, fp
339a4     0C 4E 85 F1 | 	sub	fp, #12
339a8     04 FA 0D F2 | 	cmp	result1, #4 wz
339ac     0C 4E 05 A1 |  if_e	add	fp, #12
339b0     A7 00 68 AC |  if_e	wrlong	#0, fp
339b4     0C 4E 85 A1 |  if_e	sub	fp, #12
339b8                 | LR__5001
339b8                 | LR__5002
339b8                 | LR__5003
339b8                 | ' 			}
339b8                 | ' 			;
339b8                 | ' 		}
339b8                 | ' 	}
339b8                 | ' 	return res ;
339b8     0C 4E 05 F1 | 	add	fp, #12
339bc     A7 FA 01 FB | 	rdlong	result1, fp
339c0     0C 4E 85 F1 | 	sub	fp, #12
339c4     A7 F0 03 F6 | 	mov	ptra, fp
339c8     B2 00 A0 FD | 	call	#popregs_
339cc                 | _fatfs_cc_f_readdir_ret
339cc     2D 00 64 FD | 	ret
339d0                 | 
339d0                 | _fatfs_cc_f_stat
339d0     00 4A 05 F6 | 	mov	COUNT_, #0
339d4     A8 00 A0 FD | 	call	#pushregs_
339d8     40 F0 07 F1 | 	add	ptra, #64
339dc     04 4E 05 F1 | 	add	fp, #4
339e0     A7 12 62 FC | 	wrlong	arg01, fp
339e4     04 4E 05 F1 | 	add	fp, #4
339e8     A7 14 62 FC | 	wrlong	arg02, fp
339ec     04 4E 85 F1 | 	sub	fp, #4
339f0     A7 12 02 F6 | 	mov	arg01, fp
339f4     0C 4E 05 F1 | 	add	fp, #12
339f8     A7 14 02 F6 | 	mov	arg02, fp
339fc     10 4E 85 F1 | 	sub	fp, #16
33a00     00 16 06 F6 | 	mov	arg03, #0
33a04     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
33a08     0C 4E 05 F1 | 	add	fp, #12
33a0c     A7 FA 61 FC | 	wrlong	result1, fp
33a10     0C 4E 85 F1 | 	sub	fp, #12
33a14     00 FA 0D F2 | 	cmp	result1, #0 wz
33a18     74 00 90 5D |  if_ne	jmp	#LR__5013
33a1c     10 4E 05 F1 | 	add	fp, #16
33a20     A7 12 02 F6 | 	mov	arg01, fp
33a24     0C 4E 85 F1 | 	sub	fp, #12
33a28     A7 14 02 FB | 	rdlong	arg02, fp
33a2c     04 4E 85 F1 | 	sub	fp, #4
33a30     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
33a34     0C 4E 05 F1 | 	add	fp, #12
33a38     A7 FA 61 FC | 	wrlong	result1, fp
33a3c     0C 4E 85 F1 | 	sub	fp, #12
33a40     00 FA 0D F2 | 	cmp	result1, #0 wz
33a44     48 00 90 5D |  if_ne	jmp	#LR__5012
33a48     3B 4E 05 F1 | 	add	fp, #59
33a4c     A7 FA C1 FA | 	rdbyte	result1, fp
33a50     3B 4E 85 F1 | 	sub	fp, #59
33a54     80 FA CD F7 | 	test	result1, #128 wz
33a58     0C 4E 05 51 |  if_ne	add	fp, #12
33a5c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
33a60     0C 4E 85 51 |  if_ne	sub	fp, #12
33a64     28 00 90 5D |  if_ne	jmp	#LR__5011
33a68     08 4E 05 F1 | 	add	fp, #8
33a6c     A7 FA 09 FB | 	rdlong	result1, fp wz
33a70     08 4E 85 F1 | 	sub	fp, #8
33a74     18 00 90 AD |  if_e	jmp	#LR__5010
33a78     10 4E 05 F1 | 	add	fp, #16
33a7c     A7 12 02 F6 | 	mov	arg01, fp
33a80     08 4E 85 F1 | 	sub	fp, #8
33a84     A7 14 02 FB | 	rdlong	arg02, fp
33a88     08 4E 85 F1 | 	sub	fp, #8
33a8c     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
33a90                 | LR__5010
33a90                 | LR__5011
33a90                 | LR__5012
33a90                 | LR__5013
33a90                 | ' 			}
33a90                 | ' 		}
33a90                 | ' 		;
33a90                 | ' 	}
33a90                 | ' 
33a90                 | ' 	return res ;
33a90     0C 4E 05 F1 | 	add	fp, #12
33a94     A7 FA 01 FB | 	rdlong	result1, fp
33a98     0C 4E 85 F1 | 	sub	fp, #12
33a9c     A7 F0 03 F6 | 	mov	ptra, fp
33aa0     B2 00 A0 FD | 	call	#popregs_
33aa4                 | _fatfs_cc_f_stat_ret
33aa4     2D 00 64 FD | 	ret
33aa8                 | 
33aa8                 | _fatfs_cc_f_unlink
33aa8     00 4A 05 F6 | 	mov	COUNT_, #0
33aac     A8 00 A0 FD | 	call	#pushregs_
33ab0     74 F0 07 F1 | 	add	ptra, #116
33ab4     04 4E 05 F1 | 	add	fp, #4
33ab8     A7 12 62 FC | 	wrlong	arg01, fp
33abc     68 4E 05 F1 | 	add	fp, #104
33ac0     A7 00 68 FC | 	wrlong	#0, fp
33ac4     68 4E 85 F1 | 	sub	fp, #104
33ac8     A7 12 02 F6 | 	mov	arg01, fp
33acc     6C 4E 05 F1 | 	add	fp, #108
33ad0     A7 14 02 F6 | 	mov	arg02, fp
33ad4     70 4E 85 F1 | 	sub	fp, #112
33ad8     02 16 06 F6 | 	mov	arg03, #2
33adc     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
33ae0     08 4E 05 F1 | 	add	fp, #8
33ae4     A7 FA 61 FC | 	wrlong	result1, fp
33ae8     08 4E 85 F1 | 	sub	fp, #8
33aec     00 FA 0D F2 | 	cmp	result1, #0 wz
33af0     E4 01 90 5D |  if_ne	jmp	#LR__5028
33af4     70 4E 05 F1 | 	add	fp, #112
33af8     A7 16 02 FB | 	rdlong	arg03, fp
33afc     64 4E 85 F1 | 	sub	fp, #100
33b00     A7 16 62 FC | 	wrlong	arg03, fp
33b04     A7 12 02 F6 | 	mov	arg01, fp
33b08     08 4E 85 F1 | 	sub	fp, #8
33b0c     A7 14 02 FB | 	rdlong	arg02, fp
33b10     04 4E 85 F1 | 	sub	fp, #4
33b14     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
33b18     08 4E 05 F1 | 	add	fp, #8
33b1c     A7 FA 61 FC | 	wrlong	result1, fp
33b20     00 FA 4D F2 | 	cmps	result1, #0 wz
33b24     08 4E 85 F1 | 	sub	fp, #8
33b28     AC 01 90 5D |  if_ne	jmp	#LR__5027
33b2c     37 4E 05 F1 | 	add	fp, #55
33b30     A7 FA C1 FA | 	rdbyte	result1, fp
33b34     37 4E 85 F1 | 	sub	fp, #55
33b38     80 FA CD F7 | 	test	result1, #128 wz
33b3c     08 4E 05 51 |  if_ne	add	fp, #8
33b40     A7 0C 68 5C |  if_ne	wrlong	#6, fp
33b44     08 4E 85 51 |  if_ne	sub	fp, #8
33b48     1C 00 90 5D |  if_ne	jmp	#LR__5020
33b4c     12 4E 05 F1 | 	add	fp, #18
33b50     A7 FA C1 FA | 	rdbyte	result1, fp
33b54     12 4E 85 F1 | 	sub	fp, #18
33b58     01 FA CD F7 | 	test	result1, #1 wz
33b5c     08 4E 05 51 |  if_ne	add	fp, #8
33b60     A7 0E 68 5C |  if_ne	wrlong	#7, fp
33b64     08 4E 85 51 |  if_ne	sub	fp, #8
33b68                 | LR__5020
33b68     08 4E 05 F1 | 	add	fp, #8
33b6c     A7 FA 09 FB | 	rdlong	result1, fp wz
33b70     08 4E 85 F1 | 	sub	fp, #8
33b74     C8 00 90 5D |  if_ne	jmp	#LR__5023
33b78     70 4E 05 F1 | 	add	fp, #112
33b7c     A7 12 02 FB | 	rdlong	arg01, fp
33b80     48 4E 85 F1 | 	sub	fp, #72
33b84     A7 14 02 FB | 	rdlong	arg02, fp
33b88     28 4E 85 F1 | 	sub	fp, #40
33b8c     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
33b90     6C 4E 05 F1 | 	add	fp, #108
33b94     A7 FA 61 FC | 	wrlong	result1, fp
33b98     5A 4E 85 F1 | 	sub	fp, #90
33b9c     A7 FA C1 FA | 	rdbyte	result1, fp
33ba0     12 4E 85 F1 | 	sub	fp, #18
33ba4     10 FA CD F7 | 	test	result1, #16 wz
33ba8     94 00 90 AD |  if_e	jmp	#LR__5022
33bac     70 4E 05 F1 | 	add	fp, #112
33bb0     A7 FA 01 FB | 	rdlong	result1, fp
33bb4     34 4E 85 F1 | 	sub	fp, #52
33bb8     A7 FA 61 FC | 	wrlong	result1, fp
33bbc     30 4E 05 F1 | 	add	fp, #48
33bc0     A7 16 02 FB | 	rdlong	arg03, fp
33bc4     28 4E 85 F1 | 	sub	fp, #40
33bc8     A7 16 62 FC | 	wrlong	arg03, fp
33bcc     08 4E 85 F1 | 	sub	fp, #8
33bd0     A7 12 02 F6 | 	mov	arg01, fp
33bd4     3C 4E 85 F1 | 	sub	fp, #60
33bd8     00 14 06 F6 | 	mov	arg02, #0
33bdc     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
33be0     08 4E 05 F1 | 	add	fp, #8
33be4     A7 FA 61 FC | 	wrlong	result1, fp
33be8     08 4E 85 F1 | 	sub	fp, #8
33bec     00 FA 0D F2 | 	cmp	result1, #0 wz
33bf0     4C 00 90 5D |  if_ne	jmp	#LR__5021
33bf4     3C 4E 05 F1 | 	add	fp, #60
33bf8     A7 12 02 F6 | 	mov	arg01, fp
33bfc     3C 4E 85 F1 | 	sub	fp, #60
33c00     00 14 06 F6 | 	mov	arg02, #0
33c04     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
33c08     08 4E 05 F1 | 	add	fp, #8
33c0c     A7 FA 61 FC | 	wrlong	result1, fp
33c10     00 FA 4D F2 | 	cmps	result1, #0 wz
33c14     08 4E 85 F1 | 	sub	fp, #8
33c18     08 4E 05 A1 |  if_e	add	fp, #8
33c1c     A7 0E 68 AC |  if_e	wrlong	#7, fp
33c20     08 4E 85 A1 |  if_e	sub	fp, #8
33c24     08 4E 05 F1 | 	add	fp, #8
33c28     A7 FA 01 FB | 	rdlong	result1, fp
33c2c     08 4E 85 F1 | 	sub	fp, #8
33c30     04 FA 0D F2 | 	cmp	result1, #4 wz
33c34     08 4E 05 A1 |  if_e	add	fp, #8
33c38     A7 00 68 AC |  if_e	wrlong	#0, fp
33c3c     08 4E 85 A1 |  if_e	sub	fp, #8
33c40                 | LR__5021
33c40                 | LR__5022
33c40                 | LR__5023
33c40     08 4E 05 F1 | 	add	fp, #8
33c44     A7 FA 09 FB | 	rdlong	result1, fp wz
33c48     08 4E 85 F1 | 	sub	fp, #8
33c4c     88 00 90 5D |  if_ne	jmp	#LR__5026
33c50     0C 4E 05 F1 | 	add	fp, #12
33c54     A7 12 02 F6 | 	mov	arg01, fp
33c58     0C 4E 85 F1 | 	sub	fp, #12
33c5c     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
33c60     08 4E 05 F1 | 	add	fp, #8
33c64     A7 FA 61 FC | 	wrlong	result1, fp
33c68     08 4E 85 F1 | 	sub	fp, #8
33c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
33c70     38 00 90 5D |  if_ne	jmp	#LR__5024
33c74     6C 4E 05 F1 | 	add	fp, #108
33c78     A7 FA 09 FB | 	rdlong	result1, fp wz
33c7c     6C 4E 85 F1 | 	sub	fp, #108
33c80     28 00 90 AD |  if_e	jmp	#LR__5024
33c84     0C 4E 05 F1 | 	add	fp, #12
33c88     A7 12 02 F6 | 	mov	arg01, fp
33c8c     60 4E 05 F1 | 	add	fp, #96
33c90     A7 14 02 FB | 	rdlong	arg02, fp
33c94     6C 4E 85 F1 | 	sub	fp, #108
33c98     00 16 06 F6 | 	mov	arg03, #0
33c9c     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
33ca0     08 4E 05 F1 | 	add	fp, #8
33ca4     A7 FA 61 FC | 	wrlong	result1, fp
33ca8     08 4E 85 F1 | 	sub	fp, #8
33cac                 | LR__5024
33cac     08 4E 05 F1 | 	add	fp, #8
33cb0     A7 FA 09 FB | 	rdlong	result1, fp wz
33cb4     08 4E 85 F1 | 	sub	fp, #8
33cb8     1C 00 90 5D |  if_ne	jmp	#LR__5025
33cbc     70 4E 05 F1 | 	add	fp, #112
33cc0     A7 12 02 FB | 	rdlong	arg01, fp
33cc4     70 4E 85 F1 | 	sub	fp, #112
33cc8     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
33ccc     08 4E 05 F1 | 	add	fp, #8
33cd0     A7 FA 61 FC | 	wrlong	result1, fp
33cd4     08 4E 85 F1 | 	sub	fp, #8
33cd8                 | LR__5025
33cd8                 | LR__5026
33cd8                 | LR__5027
33cd8                 | LR__5028
33cd8                 | ' 			}
33cd8                 | ' 		}
33cd8                 | ' 		;
33cd8                 | ' 	}
33cd8                 | ' 
33cd8                 | ' 	return res ;
33cd8     08 4E 05 F1 | 	add	fp, #8
33cdc     A7 FA 01 FB | 	rdlong	result1, fp
33ce0     08 4E 85 F1 | 	sub	fp, #8
33ce4     A7 F0 03 F6 | 	mov	ptra, fp
33ce8     B2 00 A0 FD | 	call	#popregs_
33cec                 | _fatfs_cc_f_unlink_ret
33cec     2D 00 64 FD | 	ret
33cf0                 | 
33cf0                 | _fatfs_cc_f_mkdir
33cf0     00 4A 05 F6 | 	mov	COUNT_, #0
33cf4     A8 00 A0 FD | 	call	#pushregs_
33cf8     5C F0 07 F1 | 	add	ptra, #92
33cfc     04 4E 05 F1 | 	add	fp, #4
33d00     A7 12 62 FC | 	wrlong	arg01, fp
33d04     A7 12 02 F6 | 	mov	arg01, fp
33d08     48 4E 05 F1 | 	add	fp, #72
33d0c     A7 14 02 F6 | 	mov	arg02, fp
33d10     4C 4E 85 F1 | 	sub	fp, #76
33d14     02 16 06 F6 | 	mov	arg03, #2
33d18     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
33d1c     08 4E 05 F1 | 	add	fp, #8
33d20     A7 FA 61 FC | 	wrlong	result1, fp
33d24     08 4E 85 F1 | 	sub	fp, #8
33d28     00 FA 0D F2 | 	cmp	result1, #0 wz
33d2c     C4 02 90 5D |  if_ne	jmp	#LR__5035
33d30     4C 4E 05 F1 | 	add	fp, #76
33d34     A7 16 02 FB | 	rdlong	arg03, fp
33d38     40 4E 85 F1 | 	sub	fp, #64
33d3c     A7 16 62 FC | 	wrlong	arg03, fp
33d40     A7 12 02 F6 | 	mov	arg01, fp
33d44     08 4E 85 F1 | 	sub	fp, #8
33d48     A7 14 02 FB | 	rdlong	arg02, fp
33d4c     04 4E 85 F1 | 	sub	fp, #4
33d50     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
33d54     08 4E 05 F1 | 	add	fp, #8
33d58     A7 FA 61 FC | 	wrlong	result1, fp
33d5c     00 FA 4D F2 | 	cmps	result1, #0 wz
33d60     08 4E 85 F1 | 	sub	fp, #8
33d64     08 4E 05 A1 |  if_e	add	fp, #8
33d68     A7 10 68 AC |  if_e	wrlong	#8, fp
33d6c     08 4E 85 A1 |  if_e	sub	fp, #8
33d70     08 4E 05 F1 | 	add	fp, #8
33d74     A7 FA 01 FB | 	rdlong	result1, fp
33d78     08 4E 85 F1 | 	sub	fp, #8
33d7c     04 FA 0D F2 | 	cmp	result1, #4 wz
33d80     70 02 90 5D |  if_ne	jmp	#LR__5034
33d84     4C 4E 05 F1 | 	add	fp, #76
33d88     A7 16 02 FB | 	rdlong	arg03, fp
33d8c     10 4E 85 F1 | 	sub	fp, #16
33d90     A7 16 62 FC | 	wrlong	arg03, fp
33d94     A7 12 02 F6 | 	mov	arg01, fp
33d98     3C 4E 85 F1 | 	sub	fp, #60
33d9c     00 14 06 F6 | 	mov	arg02, #0
33da0     04 AC BF FD | 	call	#_fatfs_cc_create_chain
33da4     50 4E 05 F1 | 	add	fp, #80
33da8     A7 FA 61 FC | 	wrlong	result1, fp
33dac     48 4E 85 F1 | 	sub	fp, #72
33db0     A7 00 68 FC | 	wrlong	#0, fp
33db4     48 4E 05 F1 | 	add	fp, #72
33db8     A7 FA 09 FB | 	rdlong	result1, fp wz
33dbc     50 4E 85 F1 | 	sub	fp, #80
33dc0     08 4E 05 A1 |  if_e	add	fp, #8
33dc4     A7 0E 68 AC |  if_e	wrlong	#7, fp
33dc8     08 4E 85 A1 |  if_e	sub	fp, #8
33dcc     50 4E 05 F1 | 	add	fp, #80
33dd0     A7 FA 01 FB | 	rdlong	result1, fp
33dd4     50 4E 85 F1 | 	sub	fp, #80
33dd8     01 FA 0D F2 | 	cmp	result1, #1 wz
33ddc     08 4E 05 A1 |  if_e	add	fp, #8
33de0     A7 04 68 AC |  if_e	wrlong	#2, fp
33de4     08 4E 85 A1 |  if_e	sub	fp, #8
33de8     50 4E 05 F1 | 	add	fp, #80
33dec     A7 16 02 FB | 	rdlong	arg03, fp
33df0     50 4E 85 F1 | 	sub	fp, #80
33df4     FF FF 7F FF 
33df8     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
33dfc     08 4E 05 A1 |  if_e	add	fp, #8
33e00     A7 02 68 AC |  if_e	wrlong	#1, fp
33e04     08 4E 85 A1 |  if_e	sub	fp, #8
33e08     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
33e0c     58 4E 05 F1 | 	add	fp, #88
33e10     A7 FA 61 FC | 	wrlong	result1, fp
33e14     50 4E 85 F1 | 	sub	fp, #80
33e18     A7 FA 09 FB | 	rdlong	result1, fp wz
33e1c     08 4E 85 F1 | 	sub	fp, #8
33e20     1C 01 90 5D |  if_ne	jmp	#LR__5031
33e24     4C 4E 05 F1 | 	add	fp, #76
33e28     A7 12 02 FB | 	rdlong	arg01, fp
33e2c     04 4E 05 F1 | 	add	fp, #4
33e30     A7 14 02 FB | 	rdlong	arg02, fp
33e34     50 4E 85 F1 | 	sub	fp, #80
33e38     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
33e3c     08 4E 05 F1 | 	add	fp, #8
33e40     A7 FA 61 FC | 	wrlong	result1, fp
33e44     00 FA 4D F2 | 	cmps	result1, #0 wz
33e48     08 4E 85 F1 | 	sub	fp, #8
33e4c     F0 00 90 5D |  if_ne	jmp	#LR__5030
33e50     4C 4E 05 F1 | 	add	fp, #76
33e54     A7 12 02 FB | 	rdlong	arg01, fp
33e58     4C 4E 85 F1 | 	sub	fp, #76
33e5c     34 12 06 F1 | 	add	arg01, #52
33e60     20 14 06 F6 | 	mov	arg02, #32
33e64     0B 16 06 F6 | 	mov	arg03, #11
33e68     98 00 A0 FD | 	call	#\builtin_bytefill_
33e6c     4C 4E 05 F1 | 	add	fp, #76
33e70     A7 FA 01 FB | 	rdlong	result1, fp
33e74     34 FA 05 F1 | 	add	result1, #52
33e78     FD 5C 48 FC | 	wrbyte	#46, result1
33e7c     A7 16 02 FB | 	rdlong	arg03, fp
33e80     3F 16 06 F1 | 	add	arg03, #63
33e84     0B 21 48 FC | 	wrbyte	#16, arg03
33e88     A7 12 02 FB | 	rdlong	arg01, fp
33e8c     4A 12 06 F1 | 	add	arg01, #74
33e90     0C 4E 05 F1 | 	add	fp, #12
33e94     A7 14 02 FB | 	rdlong	arg02, fp
33e98     09 15 62 FC | 	wrlong	arg02, arg01
33e9c     0C 4E 85 F1 | 	sub	fp, #12
33ea0     A7 14 02 FB | 	rdlong	arg02, fp
33ea4     0A 13 02 F6 | 	mov	arg01, arg02
33ea8     34 14 06 F1 | 	add	arg02, #52
33eac     04 4E 05 F1 | 	add	fp, #4
33eb0     A7 16 02 FB | 	rdlong	arg03, fp
33eb4     50 4E 85 F1 | 	sub	fp, #80
33eb8     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
33ebc     4C 4E 05 F1 | 	add	fp, #76
33ec0     A7 14 02 FB | 	rdlong	arg02, fp
33ec4     0A 13 02 F6 | 	mov	arg01, arg02
33ec8     54 12 06 F1 | 	add	arg01, #84
33ecc     4C 4E 85 F1 | 	sub	fp, #76
33ed0     34 14 06 F1 | 	add	arg02, #52
33ed4     20 16 06 F6 | 	mov	arg03, #32
33ed8     78 27 BF FD | 	call	#__system____builtin_memmove
33edc     4C 4E 05 F1 | 	add	fp, #76
33ee0     A7 16 02 FB | 	rdlong	arg03, fp
33ee4     55 16 06 F1 | 	add	arg03, #85
33ee8     0B 5D 48 FC | 	wrbyte	#46, arg03
33eec     38 4E 85 F1 | 	sub	fp, #56
33ef0     A7 16 02 FB | 	rdlong	arg03, fp
33ef4     40 4E 05 F1 | 	add	fp, #64
33ef8     A7 16 62 FC | 	wrlong	arg03, fp
33efc     08 4E 85 F1 | 	sub	fp, #8
33f00     A7 14 02 FB | 	rdlong	arg02, fp
33f04     0A 13 02 F6 | 	mov	arg01, arg02
33f08     54 14 06 F1 | 	add	arg02, #84
33f0c     4C 4E 85 F1 | 	sub	fp, #76
33f10     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
33f14     4C 4E 05 F1 | 	add	fp, #76
33f18     A7 16 02 FB | 	rdlong	arg03, fp
33f1c     03 16 06 F1 | 	add	arg03, #3
33f20     0B 03 48 FC | 	wrbyte	#1, arg03
33f24     40 4E 85 F1 | 	sub	fp, #64
33f28     A7 12 02 F6 | 	mov	arg01, fp
33f2c     0C 4E 85 F1 | 	sub	fp, #12
33f30     44 BA BF FD | 	call	#_fatfs_cc_dir_register
33f34     08 4E 05 F1 | 	add	fp, #8
33f38     A7 FA 61 FC | 	wrlong	result1, fp
33f3c     08 4E 85 F1 | 	sub	fp, #8
33f40                 | LR__5030
33f40                 | LR__5031
33f40     08 4E 05 F1 | 	add	fp, #8
33f44     A7 FA 09 FB | 	rdlong	result1, fp wz
33f48     08 4E 85 F1 | 	sub	fp, #8
33f4c     88 00 90 5D |  if_ne	jmp	#LR__5032
33f50     28 4E 05 F1 | 	add	fp, #40
33f54     A7 12 02 FB | 	rdlong	arg01, fp
33f58     16 12 06 F1 | 	add	arg01, #22
33f5c     30 4E 05 F1 | 	add	fp, #48
33f60     A7 14 02 FB | 	rdlong	arg02, fp
33f64     09 15 62 FC | 	wrlong	arg02, arg01
33f68     0C 4E 85 F1 | 	sub	fp, #12
33f6c     A7 12 02 FB | 	rdlong	arg01, fp
33f70     24 4E 85 F1 | 	sub	fp, #36
33f74     A7 14 02 FB | 	rdlong	arg02, fp
33f78     28 4E 05 F1 | 	add	fp, #40
33f7c     A7 16 02 FB | 	rdlong	arg03, fp
33f80     50 4E 85 F1 | 	sub	fp, #80
33f84     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
33f88     28 4E 05 F1 | 	add	fp, #40
33f8c     A7 FA 01 FB | 	rdlong	result1, fp
33f90     0B FA 05 F1 | 	add	result1, #11
33f94     FD 20 48 FC | 	wrbyte	#16, result1
33f98     24 4E 05 F1 | 	add	fp, #36
33f9c     A7 FA 01 FB | 	rdlong	result1, fp
33fa0     03 FA 05 F1 | 	add	result1, #3
33fa4     FD 02 48 FC | 	wrbyte	#1, result1
33fa8     44 4E 85 F1 | 	sub	fp, #68
33fac     A7 FA 09 FB | 	rdlong	result1, fp wz
33fb0     08 4E 85 F1 | 	sub	fp, #8
33fb4     3C 00 90 5D |  if_ne	jmp	#LR__5033
33fb8     4C 4E 05 F1 | 	add	fp, #76
33fbc     A7 12 02 FB | 	rdlong	arg01, fp
33fc0     4C 4E 85 F1 | 	sub	fp, #76
33fc4     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
33fc8     08 4E 05 F1 | 	add	fp, #8
33fcc     A7 FA 61 FC | 	wrlong	result1, fp
33fd0     08 4E 85 F1 | 	sub	fp, #8
33fd4     1C 00 90 FD | 	jmp	#LR__5033
33fd8                 | LR__5032
33fd8     3C 4E 05 F1 | 	add	fp, #60
33fdc     A7 12 02 F6 | 	mov	arg01, fp
33fe0     14 4E 05 F1 | 	add	fp, #20
33fe4     A7 14 02 FB | 	rdlong	arg02, fp
33fe8     50 4E 85 F1 | 	sub	fp, #80
33fec     00 16 06 F6 | 	mov	arg03, #0
33ff0     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
33ff4                 | LR__5033
33ff4                 | LR__5034
33ff4                 | LR__5035
33ff4                 | ' 				remove_chain(&sobj, dcl, 0);
33ff4                 | ' 			}
33ff4                 | ' 		}
33ff4                 | ' 		;
33ff4                 | ' 	}
33ff4                 | ' 
33ff4                 | ' 	return res ;
33ff4     08 4E 05 F1 | 	add	fp, #8
33ff8     A7 FA 01 FB | 	rdlong	result1, fp
33ffc     08 4E 85 F1 | 	sub	fp, #8
34000     A7 F0 03 F6 | 	mov	ptra, fp
34004     B2 00 A0 FD | 	call	#popregs_
34008                 | _fatfs_cc_f_mkdir_ret
34008     2D 00 64 FD | 	ret
3400c                 | 
3400c                 | _fatfs_cc_f_rename
3400c     01 4A 05 F6 | 	mov	COUNT_, #1
34010     A8 00 A0 FD | 	call	#pushregs_
34014     9C F0 07 F1 | 	add	ptra, #156
34018     04 4E 05 F1 | 	add	fp, #4
3401c     A7 12 62 FC | 	wrlong	arg01, fp
34020     04 4E 05 F1 | 	add	fp, #4
34024     A7 14 62 FC | 	wrlong	arg02, fp
34028     A7 12 02 F6 | 	mov	arg01, fp
3402c     08 4E 85 F1 | 	sub	fp, #8
34030     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
34034     04 4E 05 F1 | 	add	fp, #4
34038     A7 12 02 F6 | 	mov	arg01, fp
3403c     6C 4E 05 F1 | 	add	fp, #108
34040     A7 14 02 F6 | 	mov	arg02, fp
34044     70 4E 85 F1 | 	sub	fp, #112
34048     02 16 06 F6 | 	mov	arg03, #2
3404c     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
34050     0C 4E 05 F1 | 	add	fp, #12
34054     A7 FA 61 FC | 	wrlong	result1, fp
34058     0C 4E 85 F1 | 	sub	fp, #12
3405c     00 FA 0D F2 | 	cmp	result1, #0 wz
34060     44 03 90 5D |  if_ne	jmp	#LR__5053
34064     70 4E 05 F1 | 	add	fp, #112
34068     A7 16 02 FB | 	rdlong	arg03, fp
3406c     60 4E 85 F1 | 	sub	fp, #96
34070     A7 16 62 FC | 	wrlong	arg03, fp
34074     A7 12 02 F6 | 	mov	arg01, fp
34078     0C 4E 85 F1 | 	sub	fp, #12
3407c     A7 14 02 FB | 	rdlong	arg02, fp
34080     04 4E 85 F1 | 	sub	fp, #4
34084     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
34088     0C 4E 05 F1 | 	add	fp, #12
3408c     A7 FA 61 FC | 	wrlong	result1, fp
34090     00 FA 4D F2 | 	cmps	result1, #0 wz
34094     0C 4E 85 F1 | 	sub	fp, #12
34098     1C 00 90 5D |  if_ne	jmp	#LR__5040
3409c     3B 4E 05 F1 | 	add	fp, #59
340a0     A7 FA C1 FA | 	rdbyte	result1, fp
340a4     3B 4E 85 F1 | 	sub	fp, #59
340a8     A0 FA CD F7 | 	test	result1, #160 wz
340ac     0C 4E 05 51 |  if_ne	add	fp, #12
340b0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
340b4     0C 4E 85 51 |  if_ne	sub	fp, #12
340b8                 | LR__5040
340b8     0C 4E 05 F1 | 	add	fp, #12
340bc     A7 26 0A FB | 	rdlong	local01, fp wz
340c0     0C 4E 85 F1 | 	sub	fp, #12
340c4     E0 02 90 5D |  if_ne	jmp	#LR__5052
340c8     74 4E 05 F1 | 	add	fp, #116
340cc     A7 12 02 F6 | 	mov	arg01, fp
340d0     48 4E 85 F1 | 	sub	fp, #72
340d4     A7 14 02 FB | 	rdlong	arg02, fp
340d8     2C 4E 85 F1 | 	sub	fp, #44
340dc     20 16 06 F6 | 	mov	arg03, #32
340e0     70 25 BF FD | 	call	#__system____builtin_memmove
340e4     40 4E 05 F1 | 	add	fp, #64
340e8     A7 12 02 F6 | 	mov	arg01, fp
340ec     30 4E 85 F1 | 	sub	fp, #48
340f0     A7 14 02 F6 | 	mov	arg02, fp
340f4     10 4E 85 F1 | 	sub	fp, #16
340f8     30 16 06 F6 | 	mov	arg03, #48
340fc     54 25 BF FD | 	call	#__system____builtin_memmove
34100     40 4E 05 F1 | 	add	fp, #64
34104     A7 12 02 F6 | 	mov	arg01, fp
34108     38 4E 85 F1 | 	sub	fp, #56
3410c     A7 14 02 FB | 	rdlong	arg02, fp
34110     08 4E 85 F1 | 	sub	fp, #8
34114     34 CA BF FD | 	call	#_fatfs_cc_follow_path
34118     0C 4E 05 F1 | 	add	fp, #12
3411c     A7 FA 61 FC | 	wrlong	result1, fp
34120     0C 4E 85 F1 | 	sub	fp, #12
34124     00 FA 0D F2 | 	cmp	result1, #0 wz
34128     4C 00 90 5D |  if_ne	jmp	#LR__5043
3412c     48 4E 05 F1 | 	add	fp, #72
34130     A7 FA 01 FB | 	rdlong	result1, fp
34134     30 4E 85 F1 | 	sub	fp, #48
34138     A7 16 02 FB | 	rdlong	arg03, fp
3413c     18 4E 85 F1 | 	sub	fp, #24
34140     0B FB 09 F2 | 	cmp	result1, arg03 wz
34144     20 00 90 5D |  if_ne	jmp	#LR__5041
34148     50 4E 05 F1 | 	add	fp, #80
3414c     A7 FA 01 FB | 	rdlong	result1, fp
34150     30 4E 85 F1 | 	sub	fp, #48
34154     A7 16 02 FB | 	rdlong	arg03, fp
34158     20 4E 85 F1 | 	sub	fp, #32
3415c     0B FB 09 F2 | 	cmp	result1, arg03 wz
34160     04 26 06 A6 |  if_e	mov	local01, #4
34164     04 00 90 AD |  if_e	jmp	#LR__5042
34168                 | LR__5041
34168     08 26 06 F6 | 	mov	local01, #8
3416c                 | LR__5042
3416c     0C 4E 05 F1 | 	add	fp, #12
34170     A7 26 62 FC | 	wrlong	local01, fp
34174     0C 4E 85 F1 | 	sub	fp, #12
34178                 | LR__5043
34178     0C 4E 05 F1 | 	add	fp, #12
3417c     A7 26 02 FB | 	rdlong	local01, fp
34180     0C 4E 85 F1 | 	sub	fp, #12
34184     04 26 0E F2 | 	cmp	local01, #4 wz
34188     CC 01 90 5D |  if_ne	jmp	#LR__5049
3418c     40 4E 05 F1 | 	add	fp, #64
34190     A7 12 02 F6 | 	mov	arg01, fp
34194     40 4E 85 F1 | 	sub	fp, #64
34198     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
3419c     0C 4E 05 F1 | 	add	fp, #12
341a0     A7 FA 61 FC | 	wrlong	result1, fp
341a4     0C 4E 85 F1 | 	sub	fp, #12
341a8     00 FA 0D F2 | 	cmp	result1, #0 wz
341ac     A8 01 90 5D |  if_ne	jmp	#LR__5048
341b0     5C 4E 05 F1 | 	add	fp, #92
341b4     A7 12 02 FB | 	rdlong	arg01, fp
341b8     38 4E 05 F1 | 	add	fp, #56
341bc     A7 12 62 FC | 	wrlong	arg01, fp
341c0     0D 12 06 F1 | 	add	arg01, #13
341c4     20 4E 85 F1 | 	sub	fp, #32
341c8     A7 14 02 F6 | 	mov	arg02, fp
341cc     74 4E 85 F1 | 	sub	fp, #116
341d0     0D 14 06 F1 | 	add	arg02, #13
341d4     13 16 06 F6 | 	mov	arg03, #19
341d8     78 24 BF FD | 	call	#__system____builtin_memmove
341dc     94 4E 05 F1 | 	add	fp, #148
341e0     A7 26 02 FB | 	rdlong	local01, fp
341e4     15 4E 85 F1 | 	sub	fp, #21
341e8     A7 FA C1 FA | 	rdbyte	result1, fp
341ec     0B 26 06 F1 | 	add	local01, #11
341f0     13 FB 41 FC | 	wrbyte	result1, local01
341f4     15 4E 05 F1 | 	add	fp, #21
341f8     A7 26 02 FB | 	rdlong	local01, fp
341fc     94 4E 85 F1 | 	sub	fp, #148
34200     0B 26 06 F1 | 	add	local01, #11
34204     13 27 C2 FA | 	rdbyte	local01, local01
34208     10 26 CE F7 | 	test	local01, #16 wz
3420c     24 00 90 5D |  if_ne	jmp	#LR__5044
34210     94 4E 05 F1 | 	add	fp, #148
34214     A7 FA 01 FB | 	rdlong	result1, fp
34218     FD 26 02 F6 | 	mov	local01, result1
3421c     94 4E 85 F1 | 	sub	fp, #148
34220     0B FA 05 F1 | 	add	result1, #11
34224     FD FA C1 FA | 	rdbyte	result1, result1
34228     20 FA 45 F5 | 	or	result1, #32
3422c     0B 26 06 F1 | 	add	local01, #11
34230     13 FB 41 FC | 	wrbyte	result1, local01
34234                 | LR__5044
34234     70 4E 05 F1 | 	add	fp, #112
34238     A7 26 02 FB | 	rdlong	local01, fp
3423c     03 26 06 F1 | 	add	local01, #3
34240     13 03 48 FC | 	wrbyte	#1, local01
34244     24 4E 05 F1 | 	add	fp, #36
34248     A7 26 02 FB | 	rdlong	local01, fp
3424c     94 4E 85 F1 | 	sub	fp, #148
34250     0B 26 06 F1 | 	add	local01, #11
34254     13 27 C2 FA | 	rdbyte	local01, local01
34258     10 26 CE F7 | 	test	local01, #16 wz
3425c     F8 00 90 AD |  if_e	jmp	#LR__5047
34260     18 4E 05 F1 | 	add	fp, #24
34264     A7 16 02 FB | 	rdlong	arg03, fp
34268     30 4E 05 F1 | 	add	fp, #48
3426c     A7 26 02 FB | 	rdlong	local01, fp
34270     48 4E 85 F1 | 	sub	fp, #72
34274     13 17 0A F2 | 	cmp	arg03, local01 wz
34278     DC 00 90 AD |  if_e	jmp	#LR__5047
3427c     70 4E 05 F1 | 	add	fp, #112
34280     A7 12 02 FB | 	rdlong	arg01, fp
34284     09 27 02 F6 | 	mov	local01, arg01
34288     24 4E 05 F1 | 	add	fp, #36
3428c     A7 14 02 FB | 	rdlong	arg02, fp
34290     94 4E 85 F1 | 	sub	fp, #148
34294     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
34298     FD 14 02 F6 | 	mov	arg02, result1
3429c     13 13 02 F6 | 	mov	arg01, local01
342a0     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
342a4     98 4E 05 F1 | 	add	fp, #152
342a8     A7 FA 61 FC | 	wrlong	result1, fp
342ac     00 FA 4D F2 | 	cmps	result1, #0 wz
342b0     98 4E 85 F1 | 	sub	fp, #152
342b4     0C 4E 05 A1 |  if_e	add	fp, #12
342b8     A7 04 68 AC |  if_e	wrlong	#2, fp
342bc     0C 4E 85 A1 |  if_e	sub	fp, #12
342c0     94 00 90 AD |  if_e	jmp	#LR__5046
342c4     70 4E 05 F1 | 	add	fp, #112
342c8     A7 12 02 FB | 	rdlong	arg01, fp
342cc     28 4E 05 F1 | 	add	fp, #40
342d0     A7 14 02 FB | 	rdlong	arg02, fp
342d4     98 4E 85 F1 | 	sub	fp, #152
342d8     4C A0 BF FD | 	call	#_fatfs_cc_move_window
342dc     0C 4E 05 F1 | 	add	fp, #12
342e0     A7 FA 61 FC | 	wrlong	result1, fp
342e4     64 4E 05 F1 | 	add	fp, #100
342e8     A7 26 02 FB | 	rdlong	local01, fp
342ec     54 26 06 F1 | 	add	local01, #84
342f0     24 4E 05 F1 | 	add	fp, #36
342f4     A7 26 62 FC | 	wrlong	local01, fp
342f8     88 4E 85 F1 | 	sub	fp, #136
342fc     A7 26 0A FB | 	rdlong	local01, fp wz
34300     0C 4E 85 F1 | 	sub	fp, #12
34304     50 00 90 5D |  if_ne	jmp	#LR__5045
34308     94 4E 05 F1 | 	add	fp, #148
3430c     A7 26 02 FB | 	rdlong	local01, fp
34310     94 4E 85 F1 | 	sub	fp, #148
34314     01 26 06 F1 | 	add	local01, #1
34318     13 27 C2 FA | 	rdbyte	local01, local01
3431c     2E 26 0E F2 | 	cmp	local01, #46 wz
34320     34 00 90 5D |  if_ne	jmp	#LR__5045
34324     70 4E 05 F1 | 	add	fp, #112
34328     A7 12 02 FB | 	rdlong	arg01, fp
3432c     24 4E 05 F1 | 	add	fp, #36
34330     A7 14 02 FB | 	rdlong	arg02, fp
34334     4C 4E 85 F1 | 	sub	fp, #76
34338     A7 16 02 FB | 	rdlong	arg03, fp
3433c     48 4E 85 F1 | 	sub	fp, #72
34340     50 AD BF FD | 	call	#_fatfs_cc_st_clust
34344     70 4E 05 F1 | 	add	fp, #112
34348     A7 26 02 FB | 	rdlong	local01, fp
3434c     70 4E 85 F1 | 	sub	fp, #112
34350     03 26 06 F1 | 	add	local01, #3
34354     13 03 48 FC | 	wrbyte	#1, local01
34358                 | LR__5045
34358                 | LR__5046
34358                 | LR__5047
34358                 | LR__5048
34358                 | LR__5049
34358     0C 4E 05 F1 | 	add	fp, #12
3435c     A7 26 0A FB | 	rdlong	local01, fp wz
34360     0C 4E 85 F1 | 	sub	fp, #12
34364     40 00 90 5D |  if_ne	jmp	#LR__5051
34368     10 4E 05 F1 | 	add	fp, #16
3436c     A7 12 02 F6 | 	mov	arg01, fp
34370     10 4E 85 F1 | 	sub	fp, #16
34374     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
34378     0C 4E 05 F1 | 	add	fp, #12
3437c     A7 FA 61 FC | 	wrlong	result1, fp
34380     0C 4E 85 F1 | 	sub	fp, #12
34384     00 FA 0D F2 | 	cmp	result1, #0 wz
34388     1C 00 90 5D |  if_ne	jmp	#LR__5050
3438c     70 4E 05 F1 | 	add	fp, #112
34390     A7 12 02 FB | 	rdlong	arg01, fp
34394     70 4E 85 F1 | 	sub	fp, #112
34398     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
3439c     0C 4E 05 F1 | 	add	fp, #12
343a0     A7 FA 61 FC | 	wrlong	result1, fp
343a4     0C 4E 85 F1 | 	sub	fp, #12
343a8                 | LR__5050
343a8                 | LR__5051
343a8                 | LR__5052
343a8                 | LR__5053
343a8                 | ' 					res = sync_fs(fs);
343a8                 | ' 				}
343a8                 | ' 			}
343a8                 | ' 
343a8                 | ' 		}
343a8                 | ' 		;
343a8                 | ' 	}
343a8                 | ' 
343a8                 | ' 	return res ;
343a8     0C 4E 05 F1 | 	add	fp, #12
343ac     A7 FA 01 FB | 	rdlong	result1, fp
343b0     0C 4E 85 F1 | 	sub	fp, #12
343b4     A7 F0 03 F6 | 	mov	ptra, fp
343b8     B2 00 A0 FD | 	call	#popregs_
343bc                 | _fatfs_cc_f_rename_ret
343bc     2D 00 64 FD | 	ret
343c0                 | 
343c0                 | _fatfs_cc_time
343c0     00 4A 05 F6 | 	mov	COUNT_, #0
343c4     A8 00 A0 FD | 	call	#pushregs_
343c8     14 F0 07 F1 | 	add	ptra, #20
343cc     04 4E 05 F1 | 	add	fp, #4
343d0     A7 12 62 FC | 	wrlong	arg01, fp
343d4     04 4E 05 F1 | 	add	fp, #4
343d8     A7 12 02 F6 | 	mov	arg01, fp
343dc     08 4E 85 F1 | 	sub	fp, #8
343e0     00 14 06 F6 | 	mov	arg02, #0
343e4     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
343e8     08 4E 05 F1 | 	add	fp, #8
343ec     A7 FA 01 FB | 	rdlong	result1, fp
343f0     08 4E 05 F1 | 	add	fp, #8
343f4     A7 FA 61 FC | 	wrlong	result1, fp
343f8     0C 4E 85 F1 | 	sub	fp, #12
343fc     A7 FA 09 FB | 	rdlong	result1, fp wz
34400     04 4E 85 F1 | 	sub	fp, #4
34404     18 00 90 AD |  if_e	jmp	#LR__5060
34408     04 4E 05 F1 | 	add	fp, #4
3440c     A7 FA 01 FB | 	rdlong	result1, fp
34410     0C 4E 05 F1 | 	add	fp, #12
34414     A7 14 02 FB | 	rdlong	arg02, fp
34418     10 4E 85 F1 | 	sub	fp, #16
3441c     FD 14 62 FC | 	wrlong	arg02, result1
34420                 | LR__5060
34420                 | '         *tp = now;
34420                 | '     return now;
34420     10 4E 05 F1 | 	add	fp, #16
34424     A7 FA 01 FB | 	rdlong	result1, fp
34428     10 4E 85 F1 | 	sub	fp, #16
3442c     A7 F0 03 F6 | 	mov	ptra, fp
34430     B2 00 A0 FD | 	call	#popregs_
34434                 | _fatfs_cc_time_ret
34434     2D 00 64 FD | 	ret
34438                 | 
34438                 | _fatfs_cc_mktime
34438     06 4A 05 F6 | 	mov	COUNT_, #6
3443c     A8 00 A0 FD | 	call	#pushregs_
34440     09 27 02 F6 | 	mov	local01, arg01
34444     14 26 06 F1 | 	add	local01, #20
34448     13 13 02 FB | 	rdlong	arg01, local01
3444c     14 26 86 F1 | 	sub	local01, #20
34450     46 12 56 F2 | 	cmps	arg01, #70 wc
34454                 | '                 return (time_t) -1;
34454     01 FA 65 C6 |  if_b	neg	result1, #1
34458     7C 01 90 CD |  if_b	jmp	#LR__5074
3445c     03 00 00 FF 
34460     6C 29 06 F6 | 	mov	local02, ##1900
34464     14 26 06 F1 | 	add	local01, #20
34468     13 FB 01 FB | 	rdlong	result1, local01
3446c     FD 28 02 F1 | 	add	local02, result1
34470     08 26 86 F1 | 	sub	local01, #8
34474     13 2B 02 FB | 	rdlong	local03, local01
34478     01 2A 86 F1 | 	sub	local03, #1
3447c     04 26 06 F1 | 	add	local01, #4
34480     13 13 02 FB | 	rdlong	arg01, local01
34484     10 26 86 F1 | 	sub	local01, #16
34488     02 12 66 F0 | 	shl	arg01, #2
3448c     02 00 00 FF 
34490     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
34494     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
34498     09 FB 01 FB | 	rdlong	result1, arg01
3449c     FD 2A 02 F1 | 	add	local03, result1
344a0     14 13 02 F6 | 	mov	arg01, local02
344a4     02 00 00 FF 
344a8     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
344ac     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
344b0     00 FA 0D F2 | 	cmp	result1, #0 wz
344b4     1C 00 90 AD |  if_e	jmp	#LR__5070
344b8     00 2C 06 F6 | 	mov	local04, #0
344bc     10 26 06 F1 | 	add	local01, #16
344c0     13 FB 01 FB | 	rdlong	result1, local01
344c4     10 26 86 F1 | 	sub	local01, #16
344c8     02 FA 55 F2 | 	cmps	result1, #2 wc
344cc     01 2C 06 36 |  if_ae	mov	local04, #1
344d0     04 00 90 FD | 	jmp	#LR__5071
344d4                 | LR__5070
344d4     00 2C 06 F6 | 	mov	local04, #0
344d8                 | LR__5071
344d8     04 26 06 F1 | 	add	local01, #4
344dc     13 FB 01 FB | 	rdlong	result1, local01
344e0     04 26 86 F1 | 	sub	local01, #4
344e4     13 2F 02 FB | 	rdlong	local05, local01
344e8     08 26 06 F1 | 	add	local01, #8
344ec     13 13 02 FB | 	rdlong	arg01, local01
344f0     07 00 00 FF 
344f4     10 12 06 FD | 	qmul	arg01, ##3600
344f8     16 2B 02 F1 | 	add	local03, local04
344fc     FD 2C 02 F6 | 	mov	local04, result1
34500     04 2C 66 F0 | 	shl	local04, #4
34504     FD 2C 82 F1 | 	sub	local04, result1
34508     02 2C 66 F0 | 	shl	local04, #2
3450c     16 2F 02 F1 | 	add	local05, local04
34510     08 26 86 F1 | 	sub	local01, #8
34514     18 2C 62 FD | 	getqx	local04
34518     A8 00 00 FF 
3451c     80 2B 06 FD | 	qmul	local03, ##86400
34520     16 2F 02 F1 | 	add	local05, local04
34524     14 2B 02 F6 | 	mov	local03, local02
34528     03 00 00 FF 
3452c     B2 2B 86 F1 | 	sub	local03, ##1970
34530     18 2C 62 FD | 	getqx	local04
34534     99 F0 00 FF 
34538     80 2B 06 FD | 	qmul	local03, ##31536000
3453c     16 2F 02 F1 | 	add	local05, local04
34540     14 2B 02 F6 | 	mov	local03, local02
34544     03 00 00 FF 
34548     B1 2B 86 F1 | 	sub	local03, ##1969
3454c     15 31 52 F6 | 	abs	local06, local03 wc
34550     02 30 46 F0 | 	shr	local06, #2
34554     18 31 82 F6 | 	negc	local06, local06
34558     03 00 00 FF 
3455c     D1 29 56 F2 | 	cmps	local02, ##2001 wc
34560     18 2C 62 FD | 	getqx	local04
34564     16 2F 02 F1 | 	add	local05, local04
34568     18 00 90 CD |  if_b	jmp	#LR__5072
3456c     03 00 00 FF 
34570     D0 29 86 F1 | 	sub	local02, ##2000
34574     14 2D 52 F6 | 	abs	local04, local02 wc
34578     64 2C 16 FD | 	qdiv	local04, #100
3457c     18 2C 62 FD | 	getqx	local04
34580     16 31 A2 F3 | 	sumnc	local06, local04
34584                 | LR__5072
34584     A8 00 00 FF 
34588     80 31 06 FD | 	qmul	local06, ##86400
3458c     18 30 62 FD | 	getqx	local06
34590     18 2F 02 F1 | 	add	local05, local06
34594     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
34598     02 00 00 FF 
3459c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
345a0     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
345a4     18 2F 02 F1 | 	add	local05, local06
345a8     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
345ac     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
345b0     02 00 00 FF 
345b4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
345b8     01 2A 0E F2 | 	cmp	local03, #1 wz
345bc     14 00 90 5D |  if_ne	jmp	#LR__5073
345c0     13 13 02 F6 | 	mov	arg01, local01
345c4     DC 19 B0 FD | 	call	#_fatfs_cc___indst
345c8     00 FA 0D F2 | 	cmp	result1, #0 wz
345cc     07 00 00 5F 
345d0     10 2E 86 51 |  if_ne	sub	local05, ##3600
345d4                 | LR__5073
345d4                 | '                 s -=  (3600L) ;
345d4                 | ' 
345d4                 | '         return s;
345d4     17 FB 01 F6 | 	mov	result1, local05
345d8                 | LR__5074
345d8     A7 F0 03 F6 | 	mov	ptra, fp
345dc     B2 00 A0 FD | 	call	#popregs_
345e0                 | _fatfs_cc_mktime_ret
345e0     2D 00 64 FD | 	ret
345e4                 | 
345e4                 | _fatfs_cc__gmtime_r
345e4     03 4A 05 F6 | 	mov	COUNT_, #3
345e8     A8 00 A0 FD | 	call	#pushregs_
345ec     09 27 02 FB | 	rdlong	local01, arg01
345f0     A8 00 00 FF 
345f4     80 27 16 FD | 	qdiv	local01, ##86400
345f8     18 FA 61 FD | 	getqx	result1
345fc     04 FA 05 F1 | 	add	result1, #4
34600     07 FA 15 FD | 	qdiv	result1, #7
34604     18 14 06 F1 | 	add	arg02, #24
34608     D1 7F 27 FF 
3460c     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
34610     D1 7F 27 3F 
34614     00 26 86 31 |  if_ae	sub	local01, ##1325376000
34618     03 00 00 3F 
3461c     DC 29 06 36 |  if_ae	mov	local02, ##2012
34620     03 00 00 CF 
34624     B2 29 06 C6 |  if_b	mov	local02, ##1970
34628                 | ' 	  year = 1970;
34628                 | ' 	}
34628                 | ' 
34628                 | ' 	for(;;) {
34628     19 FA 61 FD | 	getqy	result1
3462c     0A FB 61 FC | 	wrlong	result1, arg02
34630     18 14 86 F1 | 	sub	arg02, #24
34634                 | LR__5080
34634     14 13 02 F6 | 	mov	arg01, local02
34638     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
3463c     00 FA 0D F2 | 	cmp	result1, #0 wz
34640     42 F1 00 5F 
34644     00 2B 06 56 |  if_ne	mov	local03, ##31622400
34648     99 F0 00 AF 
3464c     80 2B 06 A6 |  if_e	mov	local03, ##31536000
34650     15 27 12 F2 | 	cmp	local01, local03 wc
34654                 | ' 	    break;
34654     01 28 06 31 |  if_ae	add	local02, #1
34658     15 27 82 31 |  if_ae	sub	local01, local03
3465c     D4 FF 9F 3D |  if_ae	jmp	#LR__5080
34660     A8 00 00 FF 
34664     80 27 16 FD | 	qdiv	local01, ##86400
34668     14 2B 02 F6 | 	mov	local03, local02
3466c     03 00 00 FF 
34670     6C 2B 86 F1 | 	sub	local03, ##1900
34674     14 14 06 F1 | 	add	arg02, #20
34678     0A 2B 62 FC | 	wrlong	local03, arg02
3467c     08 14 06 F1 | 	add	arg02, #8
34680     14 13 02 F6 | 	mov	arg01, local02
34684     18 28 62 FD | 	getqx	local02
34688     0A 29 62 FC | 	wrlong	local02, arg02
3468c     1C 14 86 F1 | 	sub	arg02, #28
34690     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
34694     00 FA 0D F2 | 	cmp	result1, #0 wz
34698     1D 2A 06 56 |  if_ne	mov	local03, #29
3469c     1C 2A 06 A6 |  if_e	mov	local03, #28
346a0     02 00 00 FF 
346a4     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
346a8     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
346ac     02 00 00 FF 
346b0     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
346b4                 | ' 
346b4                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
346b4                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
346b4     00 12 06 F6 | 	mov	arg01, #0
346b8     97 2A 48 FB | 	callpa	#(@LR__5082-@LR__5081)>>2,fcache_load_ptr_
346bc                 | LR__5081
346bc     09 2B 02 F6 | 	mov	local03, arg01
346c0     02 2A 66 F0 | 	shl	local03, #2
346c4     02 00 00 FF 
346c8     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
346cc     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
346d0     15 2B 02 FB | 	rdlong	local03, local03
346d4     15 29 52 F2 | 	cmps	local02, local03 wc
346d8     02 00 00 FF 
346dc     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
346e0     2C 00 90 CD |  if_b	jmp	#LR__5083
346e4     09 2B 02 F6 | 	mov	local03, arg01
346e8     02 2A 66 F0 | 	shl	local03, #2
346ec     02 00 00 FF 
346f0     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
346f4     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
346f8     15 2B 02 FB | 	rdlong	local03, local03
346fc     15 29 82 F1 | 	sub	local02, local03
34700     01 12 06 F1 | 	add	arg01, #1
34704     02 00 00 FF 
34708     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
3470c     AC FF 9F FD | 	jmp	#LR__5081
34710                 | LR__5082
34710                 | LR__5083
34710     A8 00 00 FF 
34714     80 27 16 FD | 	qdiv	local01, ##86400
34718     10 14 06 F1 | 	add	arg02, #16
3471c     0A 13 62 FC | 	wrlong	arg01, arg02
34720     01 28 06 F1 | 	add	local02, #1
34724     04 14 86 F1 | 	sub	arg02, #4
34728     0A 29 62 FC | 	wrlong	local02, arg02
3472c     19 26 62 FD | 	getqy	local01
34730     07 00 00 FF 
34734     10 26 16 FD | 	qdiv	local01, ##3600
34738     18 2A 62 FD | 	getqx	local03
3473c     07 00 00 FF 
34740     10 26 16 FD | 	qdiv	local01, ##3600
34744     04 14 86 F1 | 	sub	arg02, #4
34748     0A 2B 62 FC | 	wrlong	local03, arg02
3474c     19 26 62 FD | 	getqy	local01
34750     3C 26 16 FD | 	qdiv	local01, #60
34754     18 2A 62 FD | 	getqx	local03
34758     3C 26 16 FD | 	qdiv	local01, #60
3475c     04 14 86 F1 | 	sub	arg02, #4
34760     0A 2B 62 FC | 	wrlong	local03, arg02
34764     04 14 86 F1 | 	sub	arg02, #4
34768                 | '         stm->tm_isdst = 0;
34768                 | ' 
34768                 | ' ;
34768                 | '         return stm;
34768     0A FB 01 F6 | 	mov	result1, arg02
3476c     19 2A 62 FD | 	getqy	local03
34770     0A 2B 62 FC | 	wrlong	local03, arg02
34774     20 14 06 F1 | 	add	arg02, #32
34778     0A 01 68 FC | 	wrlong	#0, arg02
3477c     A7 F0 03 F6 | 	mov	ptra, fp
34780     B2 00 A0 FD | 	call	#popregs_
34784                 | _fatfs_cc__gmtime_r_ret
34784     2D 00 64 FD | 	ret
34788                 | 
34788                 | _fatfs_cc__tzset
34788     B1 01 00 FF 
3478c     CD 12 06 F6 | 	mov	arg01, ##@LR__5395
34790     34 00 B0 FD | 	call	#_fatfs_cc_getenv
34794     FD 12 02 F6 | 	mov	arg01, result1
34798     02 00 00 FF 
3479c     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
347a0     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
347a4     02 00 00 FF 
347a8     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
347ac     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
347b0     02 00 00 FF 
347b4     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
347b8     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
347bc     02 00 00 FF 
347c0     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
347c4                 | _fatfs_cc__tzset_ret
347c4     2D 00 64 FD | 	ret
347c8                 | 
347c8                 | _fatfs_cc_getenv
347c8     06 4A 05 F6 | 	mov	COUNT_, #6
347cc     A8 00 A0 FD | 	call	#pushregs_
347d0     09 27 02 F6 | 	mov	local01, arg01
347d4     09 29 02 F6 | 	mov	local02, arg01
347d8     97 06 48 FB | 	callpa	#(@LR__5091-@LR__5090)>>2,fcache_load_ptr_
347dc                 | LR__5090
347dc     14 FB C9 FA | 	rdbyte	result1, local02 wz
347e0     01 28 06 51 |  if_ne	add	local02, #1
347e4     F4 FF 9F 5D |  if_ne	jmp	#LR__5090
347e8                 | LR__5091
347e8     09 29 82 F1 | 	sub	local02, arg01
347ec     14 FB 01 F6 | 	mov	result1, local02
347f0     02 00 00 FF 
347f4     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
347f8     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
347fc     02 00 00 FF 
34800     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
34804                 | '             return 0;
34804     00 FA 05 A6 |  if_e	mov	result1, #0
34808     5C 00 90 AD |  if_e	jmp	#LR__5094
3480c                 | ' 
3480c                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
3480c     02 00 00 FF 
34810     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
34814     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
34818     02 00 00 FF 
3481c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
34820                 | LR__5092
34820     15 2D 0A FB | 	rdlong	local04, local03 wz
34824     3C 00 90 AD |  if_e	jmp	#LR__5093
34828     16 13 02 F6 | 	mov	arg01, local04
3482c     13 15 02 F6 | 	mov	arg02, local01
34830     14 17 02 F6 | 	mov	arg03, local02
34834     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
34838     00 FA 0D F2 | 	cmp	result1, #0 wz
3483c     14 2F 02 A6 |  if_e	mov	local05, local02
34840     16 2F 02 A1 |  if_e	add	local05, local04
34844     17 31 C2 AA |  if_e	rdbyte	local06, local05
34848     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
3484c                 | ' 			return name+len+1;
3484c     14 2D 02 A1 |  if_e	add	local04, local02
34850     01 2C 06 A1 |  if_e	add	local04, #1
34854     16 FB 01 A6 |  if_e	mov	result1, local04
34858     0C 00 90 AD |  if_e	jmp	#LR__5094
3485c     04 2A 06 F1 | 	add	local03, #4
34860     BC FF 9F FD | 	jmp	#LR__5092
34864                 | LR__5093
34864                 | ' 	}
34864                 | ' 	return 0;
34864     00 FA 05 F6 | 	mov	result1, #0
34868                 | LR__5094
34868     A7 F0 03 F6 | 	mov	ptra, fp
3486c     B2 00 A0 FD | 	call	#popregs_
34870                 | _fatfs_cc_getenv_ret
34870     2D 00 64 FD | 	ret
34874                 | 
34874                 | _fatfs_cc__get_fattime
34874     00 4A 05 F6 | 	mov	COUNT_, #0
34878     A8 00 A0 FD | 	call	#pushregs_
3487c     34 F0 07 F1 | 	add	ptra, #52
34880     00 12 06 F6 | 	mov	arg01, #0
34884     38 FB BF FD | 	call	#_fatfs_cc_time
34888     04 4E 05 F1 | 	add	fp, #4
3488c     A7 FA 61 FC | 	wrlong	result1, fp
34890     A7 12 02 F6 | 	mov	arg01, fp
34894     0C 4E 05 F1 | 	add	fp, #12
34898     A7 14 02 F6 | 	mov	arg02, fp
3489c     10 4E 85 F1 | 	sub	fp, #16
348a0     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
348a4     24 4E 05 F1 | 	add	fp, #36
348a8     A7 14 02 FB | 	rdlong	arg02, fp
348ac     50 14 86 F1 | 	sub	arg02, #80
348b0     09 14 66 F0 | 	shl	arg02, #9
348b4     04 4E 85 F1 | 	sub	fp, #4
348b8     A7 FA 01 FB | 	rdlong	result1, fp
348bc     01 FA 05 F1 | 	add	result1, #1
348c0     05 FA 65 F0 | 	shl	result1, #5
348c4     FD 14 42 F5 | 	or	arg02, result1
348c8     04 4E 85 F1 | 	sub	fp, #4
348cc     A7 FA 01 FB | 	rdlong	result1, fp
348d0     FD 14 42 F5 | 	or	arg02, result1
348d4     14 4E 85 F1 | 	sub	fp, #20
348d8     A7 14 62 FC | 	wrlong	arg02, fp
348dc     10 4E 05 F1 | 	add	fp, #16
348e0     A7 14 02 FB | 	rdlong	arg02, fp
348e4     0B 14 66 F0 | 	shl	arg02, #11
348e8     04 4E 85 F1 | 	sub	fp, #4
348ec     A7 FA 01 FB | 	rdlong	result1, fp
348f0     05 FA 65 F0 | 	shl	result1, #5
348f4     FD 14 42 F5 | 	or	arg02, result1
348f8     04 4E 85 F1 | 	sub	fp, #4
348fc     A7 FA 01 FB | 	rdlong	result1, fp
34900     FD 14 42 F5 | 	or	arg02, result1
34904     04 4E 85 F1 | 	sub	fp, #4
34908     A7 14 62 FC | 	wrlong	arg02, fp
3490c                 | ' 
3490c                 | '     now = time(0);
3490c                 | '     _gmtime_r (&now, &date);
3490c                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
3490c                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
3490c                 | '     return (ffdate << 16) | fftime;
3490c     04 4E 85 F1 | 	sub	fp, #4
34910     A7 FA 01 FB | 	rdlong	result1, fp
34914     10 FA 65 F0 | 	shl	result1, #16
34918     08 4E 85 F1 | 	sub	fp, #8
3491c     0A FB 41 F5 | 	or	result1, arg02
34920     A7 F0 03 F6 | 	mov	ptra, fp
34924     B2 00 A0 FD | 	call	#popregs_
34928                 | _fatfs_cc__get_fattime_ret
34928     2D 00 64 FD | 	ret
3492c                 | 
3492c                 | _fatfs_cc_unixtime_1029
3492c     00 4A 05 F6 | 	mov	COUNT_, #0
34930     A8 00 A0 FD | 	call	#pushregs_
34934     34 F0 07 F1 | 	add	ptra, #52
34938     04 4E 05 F1 | 	add	fp, #4
3493c     A7 12 62 FC | 	wrlong	arg01, fp
34940     04 4E 05 F1 | 	add	fp, #4
34944     A7 14 62 FC | 	wrlong	arg02, fp
34948     04 4E 85 F1 | 	sub	fp, #4
3494c     A7 14 02 FB | 	rdlong	arg02, fp
34950     09 14 46 F0 | 	shr	arg02, #9
34954     7F 14 06 F5 | 	and	arg02, #127
34958     50 FA 05 F6 | 	mov	result1, #80
3495c     0A FB 01 F1 | 	add	result1, arg02
34960     20 4E 05 F1 | 	add	fp, #32
34964     A7 FA 61 FC | 	wrlong	result1, fp
34968     20 4E 85 F1 | 	sub	fp, #32
3496c     A7 FA 01 FB | 	rdlong	result1, fp
34970     05 FA 45 F0 | 	shr	result1, #5
34974     FD FA 41 F8 | 	getnib	result1, result1, #0
34978     01 FA 85 F1 | 	sub	result1, #1
3497c     1C 4E 05 F1 | 	add	fp, #28
34980     A7 FA 61 FC | 	wrlong	result1, fp
34984     1C 4E 85 F1 | 	sub	fp, #28
34988     A7 FA 01 FB | 	rdlong	result1, fp
3498c     1F FA 05 F5 | 	and	result1, #31
34990     18 4E 05 F1 | 	add	fp, #24
34994     A7 FA 61 FC | 	wrlong	result1, fp
34998     14 4E 85 F1 | 	sub	fp, #20
3499c     A7 FA 01 FB | 	rdlong	result1, fp
349a0     0B FA 45 F0 | 	shr	result1, #11
349a4     1F FA 05 F5 | 	and	result1, #31
349a8     10 4E 05 F1 | 	add	fp, #16
349ac     A7 FA 61 FC | 	wrlong	result1, fp
349b0     10 4E 85 F1 | 	sub	fp, #16
349b4     A7 FA 01 FB | 	rdlong	result1, fp
349b8     05 FA 45 F0 | 	shr	result1, #5
349bc     3F FA 05 F5 | 	and	result1, #63
349c0     0C 4E 05 F1 | 	add	fp, #12
349c4     A7 FA 61 FC | 	wrlong	result1, fp
349c8     0C 4E 85 F1 | 	sub	fp, #12
349cc     A7 14 02 FB | 	rdlong	arg02, fp
349d0     1F 14 06 F5 | 	and	arg02, #31
349d4     01 14 66 F0 | 	shl	arg02, #1
349d8     08 4E 05 F1 | 	add	fp, #8
349dc     A7 14 62 FC | 	wrlong	arg02, fp
349e0     A7 12 02 F6 | 	mov	arg01, fp
349e4     10 4E 85 F1 | 	sub	fp, #16
349e8     4C FA BF FD | 	call	#_fatfs_cc_mktime
349ec     0C 4E 05 F1 | 	add	fp, #12
349f0     A7 FA 61 FC | 	wrlong	result1, fp
349f4                 | ' 
349f4                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
349f4                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
349f4                 | '     date.tm_mday = (dosdate & 0x1f);
349f4                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
349f4                 | '     date.tm_min = (dostime >> 5) & 0x3f;
349f4                 | '     date.tm_sec = (dostime & 0x1f) << 1;
349f4                 | ' 
349f4                 | '     t = mktime(&date);
349f4                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
349f4                 | '     return t;
349f4     0C 4E 85 F1 | 	sub	fp, #12
349f8     A7 F0 03 F6 | 	mov	ptra, fp
349fc     B2 00 A0 FD | 	call	#popregs_
34a00                 | _fatfs_cc_unixtime_1029_ret
34a00     2D 00 64 FD | 	ret
34a04                 | 
34a04                 | _fatfs_cc__set_dos_error_1031
34a04     09 01 02 F6 | 	mov	_var01, arg01
34a08                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34a08                 | '     switch (derr) {
34a08     14 00 26 F3 | 	fle	_var01, #20
34a0c     30 00 62 FD | 	jmprel	_var01
34a10                 | LR__5100
34a10     50 00 90 FD | 	jmp	#LR__5101
34a14     84 00 90 FD | 	jmp	#LR__5115
34a18     80 00 90 FD | 	jmp	#LR__5116
34a1c     7C 00 90 FD | 	jmp	#LR__5117
34a20     48 00 90 FD | 	jmp	#LR__5102
34a24     44 00 90 FD | 	jmp	#LR__5103
34a28     40 00 90 FD | 	jmp	#LR__5104
34a2c     44 00 90 FD | 	jmp	#LR__5105
34a30     48 00 90 FD | 	jmp	#LR__5107
34a34     54 00 90 FD | 	jmp	#LR__5110
34a38     38 00 90 FD | 	jmp	#LR__5106
34a3c     4C 00 90 FD | 	jmp	#LR__5111
34a40     48 00 90 FD | 	jmp	#LR__5112
34a44     44 00 90 FD | 	jmp	#LR__5113
34a48     50 00 90 FD | 	jmp	#LR__5118
34a4c     4C 00 90 FD | 	jmp	#LR__5118
34a50     48 00 90 FD | 	jmp	#LR__5118
34a54     2C 00 90 FD | 	jmp	#LR__5108
34a58     38 00 90 FD | 	jmp	#LR__5114
34a5c     2C 00 90 FD | 	jmp	#LR__5109
34a60     38 00 90 FD | 	jmp	#LR__5118
34a64                 | LR__5101
34a64     00 02 06 F6 | 	mov	_var02, #0
34a68                 | '         r = 0;
34a68                 | '         break;
34a68     34 00 90 FD | 	jmp	#LR__5119
34a6c                 | LR__5102
34a6c                 | LR__5103
34a6c                 | LR__5104
34a6c     04 02 06 F6 | 	mov	_var02, #4
34a70                 | '         r =  4 ;
34a70                 | '         break;
34a70     2C 00 90 FD | 	jmp	#LR__5119
34a74                 | LR__5105
34a74                 | LR__5106
34a74     06 02 06 F6 | 	mov	_var02, #6
34a78                 | '         r =  6 ;
34a78                 | '         break;
34a78     24 00 90 FD | 	jmp	#LR__5119
34a7c                 | LR__5107
34a7c     09 02 06 F6 | 	mov	_var02, #9
34a80                 | '         r =  9 ;
34a80                 | '         break;
34a80     1C 00 90 FD | 	jmp	#LR__5119
34a84                 | LR__5108
34a84     07 02 06 F6 | 	mov	_var02, #7
34a88                 | '         r =  7 ;
34a88                 | '         break;
34a88     14 00 90 FD | 	jmp	#LR__5119
34a8c                 | LR__5109
34a8c                 | LR__5110
34a8c                 | LR__5111
34a8c                 | LR__5112
34a8c                 | LR__5113
34a8c     0A 02 06 F6 | 	mov	_var02, #10
34a90                 | '         r =  10 ;
34a90                 | '         break;
34a90     0C 00 90 FD | 	jmp	#LR__5119
34a94                 | LR__5114
34a94     0B 02 06 F6 | 	mov	_var02, #11
34a98                 | '         r =  11 ;
34a98                 | '         break;
34a98     04 00 90 FD | 	jmp	#LR__5119
34a9c                 | LR__5115
34a9c                 | LR__5116
34a9c                 | LR__5117
34a9c                 | LR__5118
34a9c     0C 02 06 F6 | 	mov	_var02, #12
34aa0                 | '         r =  12 ;
34aa0                 | '         break;
34aa0                 | LR__5119
34aa0                 | '     }
34aa0                 | '     return _seterror(r);
34aa0     00 02 4E F2 | 	cmps	_var02, #0 wz
34aa4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
34aa8     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
34aac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
34ab0     01 FA 65 56 |  if_ne	neg	result1, #1
34ab4     00 FA 05 A6 |  if_e	mov	result1, #0
34ab8                 | _fatfs_cc__set_dos_error_1031_ret
34ab8     2D 00 64 FD | 	ret
34abc                 | 
34abc                 | _fatfs_cc_v_creat
34abc     04 4A 05 F6 | 	mov	COUNT_, #4
34ac0     A8 00 A0 FD | 	call	#pushregs_
34ac4     09 27 02 F6 | 	mov	local01, arg01
34ac8     0A 29 02 F6 | 	mov	local02, arg02
34acc     03 00 00 FF 
34ad0     3C 12 06 F6 | 	mov	arg01, ##1596
34ad4                 | '     return _gc_alloc(size);
34ad4     10 14 06 F6 | 	mov	arg02, #16
34ad8     28 5E BF FD | 	call	#__system___gc_doalloc
34adc     FD 2A 0A F6 | 	mov	local03, result1 wz
34ae0                 | '       return _seterror( 7 );
34ae0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34ae4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
34ae8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34aec     01 FA 65 A6 |  if_e	neg	result1, #1
34af0     58 00 90 AD |  if_e	jmp	#LR__5121
34af4     15 13 02 F6 | 	mov	arg01, local03
34af8     00 14 06 F6 | 	mov	arg02, #0
34afc     03 00 00 FF 
34b00     3C 16 06 F6 | 	mov	arg03, ##1596
34b04     98 00 A0 FD | 	call	#\builtin_bytefill_
34b08     02 00 00 FF 
34b0c     14 2A 06 F1 | 	add	local03, ##1044
34b10     15 13 02 F6 | 	mov	arg01, local03
34b14     02 00 00 FF 
34b18     14 2A 86 F1 | 	sub	local03, ##1044
34b1c     14 15 02 F6 | 	mov	arg02, local02
34b20     07 16 06 F6 | 	mov	arg03, #7
34b24     B4 CC BF FD | 	call	#_fatfs_cc_f_open
34b28     FD 2C 0A F6 | 	mov	local04, result1 wz
34b2c     14 00 90 AD |  if_e	jmp	#LR__5120
34b30     15 13 02 F6 | 	mov	arg01, local03
34b34                 | '     return _gc_free(ptr);
34b34     D8 5E BF FD | 	call	#__system___gc_free
34b38                 | '     free(f);
34b38                 | '     return _set_dos_error(r);
34b38     16 13 02 F6 | 	mov	arg01, local04
34b3c     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1031
34b40     08 00 90 FD | 	jmp	#LR__5121
34b44                 | LR__5120
34b44     13 2B 62 FC | 	wrlong	local03, local01
34b48                 | '   }
34b48                 | '   fil->vfsdata = f;
34b48                 | '   return 0;
34b48     00 FA 05 F6 | 	mov	result1, #0
34b4c                 | LR__5121
34b4c     A7 F0 03 F6 | 	mov	ptra, fp
34b50     B2 00 A0 FD | 	call	#popregs_
34b54                 | _fatfs_cc_v_creat_ret
34b54     2D 00 64 FD | 	ret
34b58                 | 
34b58                 | _fatfs_cc_v_close
34b58     02 4A 05 F6 | 	mov	COUNT_, #2
34b5c     A8 00 A0 FD | 	call	#pushregs_
34b60     09 27 02 FB | 	rdlong	local01, arg01
34b64     02 00 00 FF 
34b68     14 26 06 F1 | 	add	local01, ##1044
34b6c     13 13 02 F6 | 	mov	arg01, local01
34b70     02 00 00 FF 
34b74     14 26 86 F1 | 	sub	local01, ##1044
34b78     DC E3 BF FD | 	call	#_fatfs_cc_f_close
34b7c     FD 28 02 F6 | 	mov	local02, result1
34b80     13 13 02 F6 | 	mov	arg01, local01
34b84                 | '     return _gc_free(ptr);
34b84     88 5E BF FD | 	call	#__system___gc_free
34b88                 | '     FAT_FIL *f = fil->vfsdata;
34b88                 | '     r=f_close(&f->fil);
34b88                 | '     free(f);
34b88                 | '     return _set_dos_error(r);
34b88     14 13 02 F6 | 	mov	arg01, local02
34b8c     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1031
34b90     A7 F0 03 F6 | 	mov	ptra, fp
34b94     B2 00 A0 FD | 	call	#popregs_
34b98                 | _fatfs_cc_v_close_ret
34b98     2D 00 64 FD | 	ret
34b9c                 | 
34b9c                 | _fatfs_cc_v_opendir
34b9c     04 4A 05 F6 | 	mov	COUNT_, #4
34ba0     A8 00 A0 FD | 	call	#pushregs_
34ba4     09 27 02 F6 | 	mov	local01, arg01
34ba8     0A 29 02 F6 | 	mov	local02, arg02
34bac     30 12 06 F6 | 	mov	arg01, #48
34bb0                 | '     return _gc_alloc(size);
34bb0     10 14 06 F6 | 	mov	arg02, #16
34bb4     4C 5D BF FD | 	call	#__system___gc_doalloc
34bb8     FD 2A 0A F6 | 	mov	local03, result1 wz
34bbc                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34bbc                 | '       return _seterror( 7 );
34bbc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34bc0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
34bc4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34bc8     01 FA 65 A6 |  if_e	neg	result1, #1
34bcc     34 00 90 AD |  if_e	jmp	#LR__5131
34bd0     14 15 02 F6 | 	mov	arg02, local02
34bd4     15 13 02 F6 | 	mov	arg01, local03
34bd8     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
34bdc     FD 2C 0A F6 | 	mov	local04, result1 wz
34be0     14 00 90 AD |  if_e	jmp	#LR__5130
34be4     15 13 02 F6 | 	mov	arg01, local03
34be8                 | '     return _gc_free(ptr);
34be8     24 5E BF FD | 	call	#__system___gc_free
34bec                 | '         free(f);
34bec                 | '         return _set_dos_error(r);
34bec     16 13 02 F6 | 	mov	arg01, local04
34bf0     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1031
34bf4     0C 00 90 FD | 	jmp	#LR__5131
34bf8                 | LR__5130
34bf8     04 26 06 F1 | 	add	local01, #4
34bfc     13 2B 62 FC | 	wrlong	local03, local01
34c00                 | '     }
34c00                 | '     dir->vfsdata = f;
34c00                 | '     return 0;
34c00     00 FA 05 F6 | 	mov	result1, #0
34c04                 | LR__5131
34c04     A7 F0 03 F6 | 	mov	ptra, fp
34c08     B2 00 A0 FD | 	call	#popregs_
34c0c                 | _fatfs_cc_v_opendir_ret
34c0c     2D 00 64 FD | 	ret
34c10                 | 
34c10                 | _fatfs_cc_v_closedir
34c10     02 4A 05 F6 | 	mov	COUNT_, #2
34c14     A8 00 A0 FD | 	call	#pushregs_
34c18     04 12 06 F1 | 	add	arg01, #4
34c1c     09 27 02 FB | 	rdlong	local01, arg01
34c20     13 13 02 F6 | 	mov	arg01, local01
34c24     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
34c28     FD 28 02 F6 | 	mov	local02, result1
34c2c     13 13 02 F6 | 	mov	arg01, local01
34c30                 | '     return _gc_free(ptr);
34c30     DC 5D BF FD | 	call	#__system___gc_free
34c34     00 28 0E F2 | 	cmp	local02, #0 wz
34c38     14 13 02 56 |  if_ne	mov	arg01, local02
34c3c     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1031
34c40                 | '     return r;
34c40     14 FB 01 F6 | 	mov	result1, local02
34c44     A7 F0 03 F6 | 	mov	ptra, fp
34c48     B2 00 A0 FD | 	call	#popregs_
34c4c                 | _fatfs_cc_v_closedir_ret
34c4c     2D 00 64 FD | 	ret
34c50                 | 
34c50                 | _fatfs_cc_v_readdir
34c50     01 4A 05 F6 | 	mov	COUNT_, #1
34c54     A8 00 A0 FD | 	call	#pushregs_
34c58     2C F1 07 F1 | 	add	ptra, #300
34c5c     04 4E 05 F1 | 	add	fp, #4
34c60     A7 12 62 FC | 	wrlong	arg01, fp
34c64     04 4E 05 F1 | 	add	fp, #4
34c68     A7 14 62 FC | 	wrlong	arg02, fp
34c6c     04 4E 85 F1 | 	sub	fp, #4
34c70     A7 16 02 FB | 	rdlong	arg03, fp
34c74     04 16 06 F1 | 	add	arg03, #4
34c78     0B 13 02 FB | 	rdlong	arg01, arg03
34c7c     08 4E 05 F1 | 	add	fp, #8
34c80     A7 14 02 F6 | 	mov	arg02, fp
34c84     0C 4E 85 F1 | 	sub	fp, #12
34c88     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
34c8c     28 4F 05 F1 | 	add	fp, #296
34c90     A7 FA 61 FC | 	wrlong	result1, fp
34c94     28 4F 85 F1 | 	sub	fp, #296
34c98     00 FA 0D F2 | 	cmp	result1, #0 wz
34c9c     14 00 90 AD |  if_e	jmp	#LR__5140
34ca0                 | '         return _set_dos_error(r);
34ca0     28 4F 05 F1 | 	add	fp, #296
34ca4     A7 12 02 FB | 	rdlong	arg01, fp
34ca8     28 4F 85 F1 | 	sub	fp, #296
34cac     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1031
34cb0     C4 00 90 FD | 	jmp	#LR__5143
34cb4                 | LR__5140
34cb4     28 4E 05 F1 | 	add	fp, #40
34cb8     A7 16 CA FA | 	rdbyte	arg03, fp wz
34cbc     28 4E 85 F1 | 	sub	fp, #40
34cc0                 | '         return -1;
34cc0     01 FA 65 A6 |  if_e	neg	result1, #1
34cc4     B0 00 90 AD |  if_e	jmp	#LR__5143
34cc8     08 4E 05 F1 | 	add	fp, #8
34ccc     A7 12 02 FB | 	rdlong	arg01, fp
34cd0     20 4E 05 F1 | 	add	fp, #32
34cd4     A7 14 02 F6 | 	mov	arg02, fp
34cd8     28 4E 85 F1 | 	sub	fp, #40
34cdc     3F 16 06 F6 | 	mov	arg03, #63
34ce0     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
34ce4     08 4E 05 F1 | 	add	fp, #8
34ce8     A7 16 02 FB | 	rdlong	arg03, fp
34cec     3F 16 06 F1 | 	add	arg03, #63
34cf0     0B 01 48 FC | 	wrbyte	#0, arg03
34cf4     0C 4E 05 F1 | 	add	fp, #12
34cf8     A7 16 C2 FA | 	rdbyte	arg03, fp
34cfc     14 4E 85 F1 | 	sub	fp, #20
34d00     10 16 CE F7 | 	test	arg03, #16 wz
34d04     18 00 90 AD |  if_e	jmp	#LR__5141
34d08     08 4E 05 F1 | 	add	fp, #8
34d0c     A7 16 02 FB | 	rdlong	arg03, fp
34d10     08 4E 85 F1 | 	sub	fp, #8
34d14     50 16 06 F1 | 	add	arg03, #80
34d18     0B 03 48 FC | 	wrbyte	#1, arg03
34d1c     14 00 90 FD | 	jmp	#LR__5142
34d20                 | LR__5141
34d20     08 4E 05 F1 | 	add	fp, #8
34d24     A7 16 02 FB | 	rdlong	arg03, fp
34d28     08 4E 85 F1 | 	sub	fp, #8
34d2c     50 16 06 F1 | 	add	arg03, #80
34d30     0B 01 48 FC | 	wrbyte	#0, arg03
34d34                 | LR__5142
34d34     08 4E 05 F1 | 	add	fp, #8
34d38     A7 16 02 FB | 	rdlong	arg03, fp
34d3c     04 4E 05 F1 | 	add	fp, #4
34d40     A7 14 02 FB | 	rdlong	arg02, fp
34d44     48 16 06 F1 | 	add	arg03, #72
34d48     0B 15 62 FC | 	wrlong	arg02, arg03
34d4c     04 4E 85 F1 | 	sub	fp, #4
34d50     A7 26 02 FB | 	rdlong	local01, fp
34d54     08 4E 05 F1 | 	add	fp, #8
34d58     A7 12 E2 FA | 	rdword	arg01, fp
34d5c     02 4E 05 F1 | 	add	fp, #2
34d60     A7 14 E2 FA | 	rdword	arg02, fp
34d64     12 4E 85 F1 | 	sub	fp, #18
34d68     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1029
34d6c     4C 26 06 F1 | 	add	local01, #76
34d70     13 FB 61 FC | 	wrlong	result1, local01
34d74                 | '         ent->d_type =  (0) ;
34d74                 | '     }
34d74                 | '     ent->d_size = finfo.fsize;
34d74                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
34d74                 | '     return 0;
34d74     00 FA 05 F6 | 	mov	result1, #0
34d78                 | LR__5143
34d78     A7 F0 03 F6 | 	mov	ptra, fp
34d7c     B2 00 A0 FD | 	call	#popregs_
34d80                 | _fatfs_cc_v_readdir_ret
34d80     2D 00 64 FD | 	ret
34d84                 | 
34d84                 | _fatfs_cc_v_stat
34d84     03 4A 05 F6 | 	mov	COUNT_, #3
34d88     A8 00 A0 FD | 	call	#pushregs_
34d8c     30 F1 07 F1 | 	add	ptra, #304
34d90     04 4E 05 F1 | 	add	fp, #4
34d94     A7 12 62 FC | 	wrlong	arg01, fp
34d98     04 4E 05 F1 | 	add	fp, #4
34d9c     A7 14 62 FC | 	wrlong	arg02, fp
34da0     08 4E 85 F1 | 	sub	fp, #8
34da4     0A 13 02 F6 | 	mov	arg01, arg02
34da8     00 14 06 F6 | 	mov	arg02, #0
34dac     30 16 06 F6 | 	mov	arg03, #48
34db0     98 00 A0 FD | 	call	#\builtin_bytefill_
34db4     04 4E 05 F1 | 	add	fp, #4
34db8     A7 FA 01 FB | 	rdlong	result1, fp
34dbc     04 4E 85 F1 | 	sub	fp, #4
34dc0     FD FA C9 FA | 	rdbyte	result1, result1 wz
34dc4     2C 00 90 AD |  if_e	jmp	#LR__5150
34dc8     04 4E 05 F1 | 	add	fp, #4
34dcc     A7 FA 01 FB | 	rdlong	result1, fp
34dd0     04 4E 85 F1 | 	sub	fp, #4
34dd4     FD FA C1 FA | 	rdbyte	result1, result1
34dd8     2E FA 0D F2 | 	cmp	result1, #46 wz
34ddc     04 4E 05 A1 |  if_e	add	fp, #4
34de0     A7 26 02 AB |  if_e	rdlong	local01, fp
34de4     04 4E 85 A1 |  if_e	sub	fp, #4
34de8     01 26 06 A1 |  if_e	add	local01, #1
34dec     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
34df0     18 00 90 5D |  if_ne	jmp	#LR__5151
34df4                 | LR__5150
34df4     18 4E 05 F1 | 	add	fp, #24
34df8     A7 20 48 FC | 	wrbyte	#16, fp
34dfc     0C 4E 85 F1 | 	sub	fp, #12
34e00     A7 00 68 FC | 	wrlong	#0, fp
34e04     0C 4E 85 F1 | 	sub	fp, #12
34e08     24 00 90 FD | 	jmp	#LR__5152
34e0c                 | LR__5151
34e0c     04 4E 05 F1 | 	add	fp, #4
34e10     A7 12 02 FB | 	rdlong	arg01, fp
34e14     0C 4E 05 F1 | 	add	fp, #12
34e18     A7 14 02 F6 | 	mov	arg02, fp
34e1c     10 4E 85 F1 | 	sub	fp, #16
34e20     AC EB BF FD | 	call	#_fatfs_cc_f_stat
34e24     0C 4E 05 F1 | 	add	fp, #12
34e28     A7 FA 61 FC | 	wrlong	result1, fp
34e2c     0C 4E 85 F1 | 	sub	fp, #12
34e30                 | LR__5152
34e30     0C 4E 05 F1 | 	add	fp, #12
34e34     A7 28 0A FB | 	rdlong	local02, fp wz
34e38     0C 4E 85 F1 | 	sub	fp, #12
34e3c     14 00 90 AD |  if_e	jmp	#LR__5153
34e40                 | '         return _set_dos_error(r);
34e40     0C 4E 05 F1 | 	add	fp, #12
34e44     A7 12 02 FB | 	rdlong	arg01, fp
34e48     0C 4E 85 F1 | 	sub	fp, #12
34e4c     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1031
34e50     14 01 90 FD | 	jmp	#LR__5154
34e54                 | LR__5153
34e54     2C 4F 05 F1 | 	add	fp, #300
34e58     A7 48 6A FC | 	wrlong	#292, fp
34e5c     14 4F 85 F1 | 	sub	fp, #276
34e60     A7 2A C2 FA | 	rdbyte	local03, fp
34e64     18 4E 85 F1 | 	sub	fp, #24
34e68     01 2A CE F7 | 	test	local03, #1 wz
34e6c     2C 4F 05 A1 |  if_e	add	fp, #300
34e70     A7 2A 02 AB |  if_e	rdlong	local03, fp
34e74     92 2A 46 A5 |  if_e	or	local03, #146
34e78     A7 2A 62 AC |  if_e	wrlong	local03, fp
34e7c     2C 4F 85 A1 |  if_e	sub	fp, #300
34e80     18 4E 05 F1 | 	add	fp, #24
34e84     A7 2A C2 FA | 	rdbyte	local03, fp
34e88     18 4E 85 F1 | 	sub	fp, #24
34e8c     10 2A CE F7 | 	test	local03, #16 wz
34e90     2C 4F 05 51 |  if_ne	add	fp, #300
34e94     A7 2A 02 5B |  if_ne	rdlong	local03, fp
34e98     08 00 00 5F 
34e9c     49 2A 46 55 |  if_ne	or	local03, ##4169
34ea0     A7 2A 62 5C |  if_ne	wrlong	local03, fp
34ea4     2C 4F 85 51 |  if_ne	sub	fp, #300
34ea8     08 4E 05 F1 | 	add	fp, #8
34eac     A7 2A 02 FB | 	rdlong	local03, fp
34eb0     24 4F 05 F1 | 	add	fp, #292
34eb4     A7 28 02 FB | 	rdlong	local02, fp
34eb8     08 2A 06 F1 | 	add	local03, #8
34ebc     15 29 62 FC | 	wrlong	local02, local03
34ec0     24 4F 85 F1 | 	sub	fp, #292
34ec4     A7 2A 02 FB | 	rdlong	local03, fp
34ec8     0C 2A 06 F1 | 	add	local03, #12
34ecc     15 03 68 FC | 	wrlong	#1, local03
34ed0     A7 2A 02 FB | 	rdlong	local03, fp
34ed4     08 4E 05 F1 | 	add	fp, #8
34ed8     A7 28 02 FB | 	rdlong	local02, fp
34edc     18 2A 06 F1 | 	add	local03, #24
34ee0     15 29 62 FC | 	wrlong	local02, local03
34ee4     08 4E 85 F1 | 	sub	fp, #8
34ee8     A7 2A 02 FB | 	rdlong	local03, fp
34eec     1C 2A 06 F1 | 	add	local03, #28
34ef0     01 00 80 FF 
34ef4     15 01 68 FC | 	wrlong	##512, local03
34ef8     A7 28 02 FB | 	rdlong	local02, fp
34efc     14 2B 02 F6 | 	mov	local03, local02
34f00     18 28 06 F1 | 	add	local02, #24
34f04     14 29 02 FB | 	rdlong	local02, local02
34f08     FF 29 06 F1 | 	add	local02, #511
34f0c     14 29 52 F6 | 	abs	local02, local02 wc
34f10     09 28 46 F0 | 	shr	local02, #9
34f14     14 29 82 F6 | 	negc	local02, local02
34f18     20 2A 06 F1 | 	add	local03, #32
34f1c     15 29 62 FC | 	wrlong	local02, local03
34f20     A7 28 02 FB | 	rdlong	local02, fp
34f24     14 2B 02 F6 | 	mov	local03, local02
34f28     14 27 02 F6 | 	mov	local01, local02
34f2c     0C 4E 05 F1 | 	add	fp, #12
34f30     A7 12 E2 FA | 	rdword	arg01, fp
34f34     02 4E 05 F1 | 	add	fp, #2
34f38     A7 14 E2 FA | 	rdword	arg02, fp
34f3c     16 4E 85 F1 | 	sub	fp, #22
34f40     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1029
34f44     2C 26 06 F1 | 	add	local01, #44
34f48     13 FB 61 FC | 	wrlong	result1, local01
34f4c     28 28 06 F1 | 	add	local02, #40
34f50     14 FB 61 FC | 	wrlong	result1, local02
34f54     24 2A 06 F1 | 	add	local03, #36
34f58     15 FB 61 FC | 	wrlong	result1, local03
34f5c                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
34f5c                 | '     }
34f5c                 | '     buf->st_mode = mode;
34f5c                 | '     buf->st_nlink = 1;
34f5c                 | '     buf->st_size = finfo.fsize;
34f5c                 | '     buf->st_blksize = 512;
34f5c                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
34f5c                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
34f5c                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34f5c                 | '     return r;
34f5c     0C 4E 05 F1 | 	add	fp, #12
34f60     A7 FA 01 FB | 	rdlong	result1, fp
34f64     0C 4E 85 F1 | 	sub	fp, #12
34f68                 | LR__5154
34f68     A7 F0 03 F6 | 	mov	ptra, fp
34f6c     B2 00 A0 FD | 	call	#popregs_
34f70                 | _fatfs_cc_v_stat_ret
34f70     2D 00 64 FD | 	ret
34f74                 | 
34f74                 | _fatfs_cc_v_read
34f74     00 4A 05 F6 | 	mov	COUNT_, #0
34f78     A8 00 A0 FD | 	call	#pushregs_
34f7c     1C F0 07 F1 | 	add	ptra, #28
34f80     04 4E 05 F1 | 	add	fp, #4
34f84     A7 12 62 FC | 	wrlong	arg01, fp
34f88     04 4E 05 F1 | 	add	fp, #4
34f8c     A7 14 62 FC | 	wrlong	arg02, fp
34f90     04 4E 05 F1 | 	add	fp, #4
34f94     A7 16 62 FC | 	wrlong	arg03, fp
34f98     08 4E 85 F1 | 	sub	fp, #8
34f9c     A7 12 02 FB | 	rdlong	arg01, fp
34fa0     09 13 0A FB | 	rdlong	arg01, arg01 wz
34fa4     0C 4E 05 F1 | 	add	fp, #12
34fa8     A7 12 62 FC | 	wrlong	arg01, fp
34fac     10 4E 85 F1 | 	sub	fp, #16
34fb0                 | '         return _seterror( 5 );
34fb0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34fb4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
34fb8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34fbc     01 FA 65 A6 |  if_e	neg	result1, #1
34fc0     B8 00 90 AD |  if_e	jmp	#LR__5162
34fc4     10 4E 05 F1 | 	add	fp, #16
34fc8     A7 12 02 FB | 	rdlong	arg01, fp
34fcc     02 00 00 FF 
34fd0     14 12 06 F1 | 	add	arg01, ##1044
34fd4     08 4E 85 F1 | 	sub	fp, #8
34fd8     A7 14 02 FB | 	rdlong	arg02, fp
34fdc     04 4E 05 F1 | 	add	fp, #4
34fe0     A7 16 02 FB | 	rdlong	arg03, fp
34fe4     0C 4E 05 F1 | 	add	fp, #12
34fe8     A7 18 02 F6 | 	mov	arg04, fp
34fec     18 4E 85 F1 | 	sub	fp, #24
34ff0     C4 CE BF FD | 	call	#_fatfs_cc_f_read
34ff4     14 4E 05 F1 | 	add	fp, #20
34ff8     A7 FA 61 FC | 	wrlong	result1, fp
34ffc     14 4E 85 F1 | 	sub	fp, #20
35000     00 FA 0D F2 | 	cmp	result1, #0 wz
35004     34 00 90 AD |  if_e	jmp	#LR__5160
35008     04 4E 05 F1 | 	add	fp, #4
3500c     A7 18 02 FB | 	rdlong	arg04, fp
35010     0C 17 02 F6 | 	mov	arg03, arg04
35014     08 18 06 F1 | 	add	arg04, #8
35018     0C 19 02 FB | 	rdlong	arg04, arg04
3501c     20 18 46 F5 | 	or	arg04, #32
35020     08 16 06 F1 | 	add	arg03, #8
35024     0B 19 62 FC | 	wrlong	arg04, arg03
35028                 | '         fil->state |=  (0x20) ;
35028                 | '         return _set_dos_error(r);
35028     10 4E 05 F1 | 	add	fp, #16
3502c     A7 12 02 FB | 	rdlong	arg01, fp
35030     14 4E 85 F1 | 	sub	fp, #20
35034     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
35038     40 00 90 FD | 	jmp	#LR__5162
3503c                 | LR__5160
3503c     18 4E 05 F1 | 	add	fp, #24
35040     A7 FA 09 FB | 	rdlong	result1, fp wz
35044     18 4E 85 F1 | 	sub	fp, #24
35048     24 00 90 5D |  if_ne	jmp	#LR__5161
3504c     04 4E 05 F1 | 	add	fp, #4
35050     A7 FA 01 FB | 	rdlong	result1, fp
35054     FD 18 02 F6 | 	mov	arg04, result1
35058     04 4E 85 F1 | 	sub	fp, #4
3505c     08 FA 05 F1 | 	add	result1, #8
35060     FD FA 01 FB | 	rdlong	result1, result1
35064     10 FA 45 F5 | 	or	result1, #16
35068     08 18 06 F1 | 	add	arg04, #8
3506c     0C FB 61 FC | 	wrlong	result1, arg04
35070                 | LR__5161
35070                 | '         fil->state |=  (0x10) ;
35070                 | '     }
35070                 | '     return x;
35070     18 4E 05 F1 | 	add	fp, #24
35074     A7 FA 01 FB | 	rdlong	result1, fp
35078     18 4E 85 F1 | 	sub	fp, #24
3507c                 | LR__5162
3507c     A7 F0 03 F6 | 	mov	ptra, fp
35080     B2 00 A0 FD | 	call	#popregs_
35084                 | _fatfs_cc_v_read_ret
35084     2D 00 64 FD | 	ret
35088                 | 
35088                 | _fatfs_cc_v_write
35088     00 4A 05 F6 | 	mov	COUNT_, #0
3508c     A8 00 A0 FD | 	call	#pushregs_
35090     1C F0 07 F1 | 	add	ptra, #28
35094     04 4E 05 F1 | 	add	fp, #4
35098     A7 12 62 FC | 	wrlong	arg01, fp
3509c     04 4E 05 F1 | 	add	fp, #4
350a0     A7 14 62 FC | 	wrlong	arg02, fp
350a4     04 4E 05 F1 | 	add	fp, #4
350a8     A7 16 62 FC | 	wrlong	arg03, fp
350ac     08 4E 85 F1 | 	sub	fp, #8
350b0     A7 12 02 FB | 	rdlong	arg01, fp
350b4     09 13 0A FB | 	rdlong	arg01, arg01 wz
350b8     0C 4E 05 F1 | 	add	fp, #12
350bc     A7 12 62 FC | 	wrlong	arg01, fp
350c0     10 4E 85 F1 | 	sub	fp, #16
350c4                 | '         return _seterror( 5 );
350c4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
350c8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
350cc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
350d0     01 FA 65 A6 |  if_e	neg	result1, #1
350d4     84 00 90 AD |  if_e	jmp	#LR__5171
350d8     10 4E 05 F1 | 	add	fp, #16
350dc     A7 12 02 FB | 	rdlong	arg01, fp
350e0     02 00 00 FF 
350e4     14 12 06 F1 | 	add	arg01, ##1044
350e8     08 4E 85 F1 | 	sub	fp, #8
350ec     A7 14 02 FB | 	rdlong	arg02, fp
350f0     04 4E 05 F1 | 	add	fp, #4
350f4     A7 16 02 FB | 	rdlong	arg03, fp
350f8     0C 4E 05 F1 | 	add	fp, #12
350fc     A7 18 02 F6 | 	mov	arg04, fp
35100     18 4E 85 F1 | 	sub	fp, #24
35104     4C D4 BF FD | 	call	#_fatfs_cc_f_write
35108     14 4E 05 F1 | 	add	fp, #20
3510c     A7 FA 61 FC | 	wrlong	result1, fp
35110     14 4E 85 F1 | 	sub	fp, #20
35114     00 FA 0D F2 | 	cmp	result1, #0 wz
35118     34 00 90 AD |  if_e	jmp	#LR__5170
3511c     04 4E 05 F1 | 	add	fp, #4
35120     A7 18 02 FB | 	rdlong	arg04, fp
35124     0C 17 02 F6 | 	mov	arg03, arg04
35128     08 18 06 F1 | 	add	arg04, #8
3512c     0C 19 02 FB | 	rdlong	arg04, arg04
35130     20 18 46 F5 | 	or	arg04, #32
35134     08 16 06 F1 | 	add	arg03, #8
35138     0B 19 62 FC | 	wrlong	arg04, arg03
3513c                 | '         fil->state |=  (0x20) ;
3513c                 | '         return _set_dos_error(r);
3513c     10 4E 05 F1 | 	add	fp, #16
35140     A7 12 02 FB | 	rdlong	arg01, fp
35144     14 4E 85 F1 | 	sub	fp, #20
35148     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
3514c     0C 00 90 FD | 	jmp	#LR__5171
35150                 | LR__5170
35150                 | '     }
35150                 | '     return x;
35150     18 4E 05 F1 | 	add	fp, #24
35154     A7 FA 01 FB | 	rdlong	result1, fp
35158     18 4E 85 F1 | 	sub	fp, #24
3515c                 | LR__5171
3515c     A7 F0 03 F6 | 	mov	ptra, fp
35160     B2 00 A0 FD | 	call	#popregs_
35164                 | _fatfs_cc_v_write_ret
35164     2D 00 64 FD | 	ret
35168                 | 
35168                 | _fatfs_cc_v_lseek
35168     04 4A 05 F6 | 	mov	COUNT_, #4
3516c     A8 00 A0 FD | 	call	#pushregs_
35170     0A 27 02 F6 | 	mov	local01, arg02
35174     0B 29 02 F6 | 	mov	local02, arg03
35178     09 2B 02 FB | 	rdlong	local03, arg01
3517c     02 00 00 FF 
35180     14 2A 0E F1 | 	add	local03, ##1044 wz
35184                 | '         return _seterror( 5 );
35184     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35188     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3518c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35190     01 FA 65 A6 |  if_e	neg	result1, #1
35194     4C 00 90 AD |  if_e	jmp	#LR__5182
35198     00 28 0E F2 | 	cmp	local02, #0 wz
3519c     24 00 90 AD |  if_e	jmp	#LR__5180
351a0     01 28 0E F2 | 	cmp	local02, #1 wz
351a4     14 2A 06 A1 |  if_e	add	local03, #20
351a8     15 2D 02 AB |  if_e	rdlong	local04, local03
351ac     14 2A 86 A1 |  if_e	sub	local03, #20
351b0     16 27 02 A1 |  if_e	add	local01, local04
351b4     0C 2A 06 51 |  if_ne	add	local03, #12
351b8     15 2D 02 5B |  if_ne	rdlong	local04, local03
351bc     0C 2A 86 51 |  if_ne	sub	local03, #12
351c0     16 27 02 51 |  if_ne	add	local01, local04
351c4                 | LR__5180
351c4     13 15 02 F6 | 	mov	arg02, local01
351c8     15 13 02 F6 | 	mov	arg01, local03
351cc     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
351d0     FD 12 0A F6 | 	mov	arg01, result1 wz
351d4     08 00 90 AD |  if_e	jmp	#LR__5181
351d8                 | '         return _set_dos_error(result);
351d8     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
351dc     04 00 90 FD | 	jmp	#LR__5182
351e0                 | LR__5181
351e0                 | '     }
351e0                 | '     return offset;
351e0     13 FB 01 F6 | 	mov	result1, local01
351e4                 | LR__5182
351e4     A7 F0 03 F6 | 	mov	ptra, fp
351e8     B2 00 A0 FD | 	call	#popregs_
351ec                 | _fatfs_cc_v_lseek_ret
351ec     2D 00 64 FD | 	ret
351f0                 | 
351f0                 | _fatfs_cc_v_ioctl
351f0                 | ' {
351f0                 | '     return _seterror( 10 );
351f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
351f4     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
351f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
351fc     01 FA 65 F6 | 	neg	result1, #1
35200                 | _fatfs_cc_v_ioctl_ret
35200     2D 00 64 FD | 	ret
35204                 | 
35204                 | _fatfs_cc_v_mkdir
35204     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
35208     FD 12 02 F6 | 	mov	arg01, result1
3520c                 | ' 
3520c                 | '     r = f_mkdir(name);
3520c                 | '     return _set_dos_error(r);
3520c     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
35210                 | _fatfs_cc_v_mkdir_ret
35210     2D 00 64 FD | 	ret
35214                 | 
35214                 | _fatfs_cc_v_remove
35214     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
35218     FD 12 02 F6 | 	mov	arg01, result1
3521c                 | ' 
3521c                 | '     r = f_unlink(name);
3521c                 | '     return _set_dos_error(r);
3521c     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
35220                 | _fatfs_cc_v_remove_ret
35220     2D 00 64 FD | 	ret
35224                 | 
35224                 | _fatfs_cc_v_rmdir
35224     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
35228     FD 12 02 F6 | 	mov	arg01, result1
3522c                 | ' 
3522c                 | '     r = f_unlink(name);
3522c                 | '     return _set_dos_error(r);
3522c     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
35230                 | _fatfs_cc_v_rmdir_ret
35230     2D 00 64 FD | 	ret
35234                 | 
35234                 | _fatfs_cc_v_rename
35234     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
35238     FD 12 02 F6 | 	mov	arg01, result1
3523c                 | '     return _set_dos_error(r);
3523c     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
35240                 | _fatfs_cc_v_rename_ret
35240     2D 00 64 FD | 	ret
35244                 | 
35244                 | _fatfs_cc_v_open
35244     07 4A 05 F6 | 	mov	COUNT_, #7
35248     A8 00 A0 FD | 	call	#pushregs_
3524c     09 27 02 F6 | 	mov	local01, arg01
35250     0A 29 02 F6 | 	mov	local02, arg02
35254     0B 2B 02 F6 | 	mov	local03, arg03
35258     03 00 00 FF 
3525c     3C 12 06 F6 | 	mov	arg01, ##1596
35260                 | '     return _gc_alloc(size);
35260     10 14 06 F6 | 	mov	arg02, #16
35264     9C 56 BF FD | 	call	#__system___gc_doalloc
35268     FD 2C 0A F6 | 	mov	local04, result1 wz
3526c                 | '       return _seterror( 7 );
3526c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35270     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
35274     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35278     01 FA 65 A6 |  if_e	neg	result1, #1
3527c     98 00 90 AD |  if_e	jmp	#LR__5196
35280     16 13 02 F6 | 	mov	arg01, local04
35284     00 14 06 F6 | 	mov	arg02, #0
35288     03 00 00 FF 
3528c     3C 16 06 F6 | 	mov	arg03, ##1596
35290     98 00 A0 FD | 	call	#\builtin_bytefill_
35294                 | '   switch (flags & 3) {
35294     15 2F 02 F6 | 	mov	local05, local03
35298     03 2E 0E F5 | 	and	local05, #3 wz
3529c     0C 00 90 AD |  if_e	jmp	#LR__5190
352a0     01 2E 0E F2 | 	cmp	local05, #1 wz
352a4     0C 00 90 AD |  if_e	jmp	#LR__5191
352a8     10 00 90 FD | 	jmp	#LR__5192
352ac                 | LR__5190
352ac     01 30 06 F6 | 	mov	local06, #1
352b0                 | '       fs_flags =  0x01 ;
352b0                 | '       break;
352b0     0C 00 90 FD | 	jmp	#LR__5193
352b4                 | LR__5191
352b4     02 30 06 F6 | 	mov	local06, #2
352b8                 | '       fs_flags =  0x02 ;
352b8                 | '       break;
352b8     04 00 90 FD | 	jmp	#LR__5193
352bc                 | LR__5192
352bc     03 30 06 F6 | 	mov	local06, #3
352c0                 | '       fs_flags =  0x01  |  0x02 ;
352c0                 | '       break;
352c0                 | LR__5193
352c0     08 2A CE F7 | 	test	local03, #8 wz
352c4     18 30 46 55 |  if_ne	or	local06, #24
352c8     08 00 90 5D |  if_ne	jmp	#LR__5194
352cc     20 2A CE F7 | 	test	local03, #32 wz
352d0     30 30 46 55 |  if_ne	or	local06, #48
352d4                 | LR__5194
352d4     02 00 00 FF 
352d8     14 2C 06 F1 | 	add	local04, ##1044
352dc     16 13 02 F6 | 	mov	arg01, local04
352e0     02 00 00 FF 
352e4     14 2C 86 F1 | 	sub	local04, ##1044
352e8     14 15 02 F6 | 	mov	arg02, local02
352ec     18 17 02 F6 | 	mov	arg03, local06
352f0     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
352f4     FD 32 0A F6 | 	mov	local07, result1 wz
352f8     14 00 90 AD |  if_e	jmp	#LR__5195
352fc     16 13 02 F6 | 	mov	arg01, local04
35300                 | '     return _gc_free(ptr);
35300     0C 57 BF FD | 	call	#__system___gc_free
35304                 | '     free(f);
35304                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35304                 | '     return _set_dos_error(r);
35304     19 13 02 F6 | 	mov	arg01, local07
35308     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
3530c     08 00 90 FD | 	jmp	#LR__5196
35310                 | LR__5195
35310     13 2D 62 FC | 	wrlong	local04, local01
35314                 | '   }
35314                 | '   fil->vfsdata = f;
35314                 | '   return 0;
35314     00 FA 05 F6 | 	mov	result1, #0
35318                 | LR__5196
35318     A7 F0 03 F6 | 	mov	ptra, fp
3531c     B2 00 A0 FD | 	call	#popregs_
35320                 | _fatfs_cc_v_open_ret
35320     2D 00 64 FD | 	ret
35324                 | 
35324                 | _fatfs_cc_v_flush
35324     09 13 02 FB | 	rdlong	arg01, arg01
35328     02 00 00 FF 
3532c     14 12 0E F1 | 	add	arg01, ##1044 wz
35330                 | '         return _seterror( 5 );
35330     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35334     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35338     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
3533c     01 FA 65 A6 |  if_e	neg	result1, #1
35340     0C 00 90 AD |  if_e	jmp	#LR__5200
35344     00 DA BF FD | 	call	#_fatfs_cc_f_sync
35348     FD 12 02 F6 | 	mov	arg01, result1
3534c                 | '     }
3534c                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
3534c                 | '     result = f_sync(f);
3534c                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
3534c                 | '     return _set_dos_error(result);
3534c     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
35350                 | LR__5200
35350                 | _fatfs_cc_v_flush_ret
35350     2D 00 64 FD | 	ret
35354                 | 
35354                 | _fatfs_cc_v_init
35354                 | ' {
35354                 | '     return 0;
35354     00 FA 05 F6 | 	mov	result1, #0
35358                 | _fatfs_cc_v_init_ret
35358     2D 00 64 FD | 	ret
3535c                 | 
3535c                 | _fatfs_cc_v_deinit
3535c     B1 01 00 FF 
35360     D0 14 06 F6 | 	mov	arg02, ##@LR__5396
35364     00 12 06 F6 | 	mov	arg01, #0
35368     00 16 06 F6 | 	mov	arg03, #0
3536c     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
35370     01 00 00 FF 
35374     08 E4 05 F1 | 	add	objptr, ##520
35378     F2 12 02 FB | 	rdlong	arg01, objptr
3537c     04 E4 05 F1 | 	add	objptr, #4
35380     F2 14 02 FB | 	rdlong	arg02, objptr
35384     01 00 00 FF 
35388     0C E4 85 F1 | 	sub	objptr, ##524
3538c     F0 3D BF FD | 	call	#__system___freepins
35390                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35390                 | '     _freepins(f_pinmask);
35390                 | '     return 0;
35390     00 FA 05 F6 | 	mov	result1, #0
35394                 | _fatfs_cc_v_deinit_ret
35394     2D 00 64 FD | 	ret
35398                 | 
35398                 | _fatfs_cc_get_vfs
35398     01 4A 05 F6 | 	mov	COUNT_, #1
3539c     A8 00 A0 FD | 	call	#pushregs_
353a0     09 27 02 F6 | 	mov	local01, arg01
353a4     50 12 06 F6 | 	mov	arg01, #80
353a8     28 55 BF FD | 	call	#__system___gc_alloc_managed
353ac     FD 12 02 F6 | 	mov	arg01, result1
353b0     F2 FA 01 F6 | 	mov	result1, objptr
353b4     00 70 05 FF 
353b8     00 FA 45 F5 | 	or	result1, ##182452224
353bc     09 FB 61 FC | 	wrlong	result1, arg01
353c0     F2 FA 01 F6 | 	mov	result1, objptr
353c4     00 78 05 FF 
353c8     00 FA 45 F5 | 	or	result1, ##183500800
353cc     04 12 06 F1 | 	add	arg01, #4
353d0     09 FB 61 FC | 	wrlong	result1, arg01
353d4     F2 FA 01 F6 | 	mov	result1, objptr
353d8     00 80 05 FF 
353dc     00 FA 45 F5 | 	or	result1, ##184549376
353e0     04 12 06 F1 | 	add	arg01, #4
353e4     09 FB 61 FC | 	wrlong	result1, arg01
353e8     F2 FA 01 F6 | 	mov	result1, objptr
353ec     00 88 05 FF 
353f0     00 FA 45 F5 | 	or	result1, ##185597952
353f4     04 12 06 F1 | 	add	arg01, #4
353f8     09 FB 61 FC | 	wrlong	result1, arg01
353fc     F2 FA 01 F6 | 	mov	result1, objptr
35400     00 90 05 FF 
35404     00 FA 45 F5 | 	or	result1, ##186646528
35408     04 12 06 F1 | 	add	arg01, #4
3540c     09 FB 61 FC | 	wrlong	result1, arg01
35410     04 12 06 F1 | 	add	arg01, #4
35414     09 01 68 FC | 	wrlong	#0, arg01
35418     04 12 06 F1 | 	add	arg01, #4
3541c     09 27 62 FC | 	wrlong	local01, arg01
35420     04 12 06 F1 | 	add	arg01, #4
35424     09 01 68 FC | 	wrlong	#0, arg01
35428     F2 FA 01 F6 | 	mov	result1, objptr
3542c     00 98 05 FF 
35430     00 FA 45 F5 | 	or	result1, ##187695104
35434     04 12 06 F1 | 	add	arg01, #4
35438     09 FB 61 FC | 	wrlong	result1, arg01
3543c     F2 FA 01 F6 | 	mov	result1, objptr
35440     00 A0 05 FF 
35444     00 FA 45 F5 | 	or	result1, ##188743680
35448     04 12 06 F1 | 	add	arg01, #4
3544c     09 FB 61 FC | 	wrlong	result1, arg01
35450     F2 FA 01 F6 | 	mov	result1, objptr
35454     00 A8 05 FF 
35458     00 FA 45 F5 | 	or	result1, ##189792256
3545c     04 12 06 F1 | 	add	arg01, #4
35460     09 FB 61 FC | 	wrlong	result1, arg01
35464     F2 FA 01 F6 | 	mov	result1, objptr
35468     00 B0 05 FF 
3546c     00 FA 45 F5 | 	or	result1, ##190840832
35470     04 12 06 F1 | 	add	arg01, #4
35474     09 FB 61 FC | 	wrlong	result1, arg01
35478     F2 FA 01 F6 | 	mov	result1, objptr
3547c     00 B8 05 FF 
35480     00 FA 45 F5 | 	or	result1, ##191889408
35484     04 12 06 F1 | 	add	arg01, #4
35488     09 FB 61 FC | 	wrlong	result1, arg01
3548c     F2 FA 01 F6 | 	mov	result1, objptr
35490     00 C0 05 FF 
35494     00 FA 45 F5 | 	or	result1, ##192937984
35498     04 12 06 F1 | 	add	arg01, #4
3549c     09 FB 61 FC | 	wrlong	result1, arg01
354a0     F2 FA 01 F6 | 	mov	result1, objptr
354a4     00 C8 05 FF 
354a8     00 FA 45 F5 | 	or	result1, ##193986560
354ac     04 12 06 F1 | 	add	arg01, #4
354b0     09 FB 61 FC | 	wrlong	result1, arg01
354b4     F2 FA 01 F6 | 	mov	result1, objptr
354b8     00 D0 05 FF 
354bc     00 FA 45 F5 | 	or	result1, ##195035136
354c0     04 12 06 F1 | 	add	arg01, #4
354c4     09 FB 61 FC | 	wrlong	result1, arg01
354c8     F2 FA 01 F6 | 	mov	result1, objptr
354cc     00 D8 05 FF 
354d0     00 FA 45 F5 | 	or	result1, ##196083712
354d4     04 12 06 F1 | 	add	arg01, #4
354d8     09 FB 61 FC | 	wrlong	result1, arg01
354dc     F2 FA 01 F6 | 	mov	result1, objptr
354e0     00 E0 05 FF 
354e4     00 FA 45 F5 | 	or	result1, ##197132288
354e8     04 12 06 F1 | 	add	arg01, #4
354ec     09 FB 61 FC | 	wrlong	result1, arg01
354f0     F2 FA 01 F6 | 	mov	result1, objptr
354f4     00 E8 05 FF 
354f8     00 FA 45 F5 | 	or	result1, ##198180864
354fc     04 12 06 F1 | 	add	arg01, #4
35500     09 FB 61 FC | 	wrlong	result1, arg01
35504     F2 FA 01 F6 | 	mov	result1, objptr
35508     00 F0 05 FF 
3550c     00 FA 45 F5 | 	or	result1, ##199229440
35510     04 12 06 F1 | 	add	arg01, #4
35514     09 FB 61 FC | 	wrlong	result1, arg01
35518     4C 12 86 F1 | 	sub	arg01, #76
3551c                 | ' 
3551c                 | '     v->close = &v_close;
3551c                 | '     v->read = &v_read;
3551c                 | '     v->write = &v_write;
3551c                 | '     v->lseek = &v_lseek;
3551c                 | '     v->ioctl = &v_ioctl;
3551c                 | '     v->flush = 0;
3551c                 | '     v->vfs_data = ptr;
3551c                 | '     v->reserved = 0;
3551c                 | ' 
3551c                 | '     v->open = &v_open;
3551c                 | '     v->creat = &v_creat;
3551c                 | '     v->opendir = &v_opendir;
3551c                 | '     v->closedir = &v_closedir;
3551c                 | '     v->readdir = &v_readdir;
3551c                 | '     v->stat = &v_stat;
3551c                 | ' 
3551c                 | '     v->mkdir = &v_mkdir;
3551c                 | '     v->rmdir = &v_rmdir;
3551c                 | ' 
3551c                 | '     v->remove = &v_remove;
3551c                 | '     v->rename = &v_rename;
3551c                 | ' 
3551c                 | '     v->init = &v_init;
3551c                 | '     v->deinit = &v_deinit;
3551c                 | ' 
3551c                 | '     return v;
3551c     09 FB 01 F6 | 	mov	result1, arg01
35520     A7 F0 03 F6 | 	mov	ptra, fp
35524     B2 00 A0 FD | 	call	#popregs_
35528                 | _fatfs_cc_get_vfs_ret
35528     2D 00 64 FD | 	ret
3552c                 | 
3552c                 | _fatfs_cc_xmit_mmc_1182
3552c     01 00 00 FF 
35530     10 E4 05 F1 | 	add	objptr, ##528
35534     F2 00 02 FB | 	rdlong	_var01, objptr
35538     08 E4 05 F1 | 	add	objptr, #8
3553c     F2 02 02 FB | 	rdlong	_var02, objptr
35540     01 00 00 FF 
35544     18 E4 85 F1 | 	sub	objptr, ##536
35548     40 02 62 FD | 	dirl	_var02
3554c     28 02 64 FD | 	setq	#1
35550     09 05 02 FB | 	rdlong	_var03, arg01
35554     69 04 62 FD | 	rev	_var03
35558     1B 04 FE F9 | 	movbyts	_var03, #27
3555c     01 05 22 FC | 	wypin	_var03, _var02
35560     0A 05 02 F6 | 	mov	_var03, arg02
35564     02 14 4E F0 | 	shr	arg02, #2 wz
35568     03 04 66 F0 | 	shl	_var03, #3
3556c     00 05 22 FC | 	wypin	_var03, _var01
35570     41 02 62 FD | 	dirh	_var02
35574     08 12 06 F1 | 	add	arg01, #8
35578     69 06 62 FD | 	rev	_var04
3557c     1B 06 FE F9 | 	movbyts	_var04, #27
35580                 | LR__5210
35580     01 07 22 5C |  if_ne	wypin	_var04, _var02
35584     09 07 02 5B |  if_ne	rdlong	_var04, arg01
35588     04 12 06 51 |  if_ne	add	arg01, #4
3558c     69 06 62 5D |  if_ne	rev	_var04
35590     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
35594                 | LR__5211
35594     40 02 72 5D |  if_ne	testp	_var02 wc
35598     F8 FF 9F 1D |  if_a	jmp	#LR__5211
3559c     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5210
355a0                 | LR__5212
355a0     40 00 72 FD | 	testp	_var01 wc
355a4     F8 FF 9F 3D |  if_ae	jmp	#LR__5212
355a8     40 02 62 FD | 	dirl	_var02
355ac     FF FF FF FF 
355b0     01 FF 2B FC | 	wypin	##-1, _var02
355b4     41 02 62 FD | 	dirh	_var02
355b8                 | _fatfs_cc_xmit_mmc_1182_ret
355b8     2D 00 64 FD | 	ret
355bc                 | 
355bc                 | _fatfs_cc_rcvr_mmc_1189
355bc     01 00 00 FF 
355c0     10 E4 05 F1 | 	add	objptr, ##528
355c4     F2 00 02 FB | 	rdlong	_var01, objptr
355c8     0C E4 05 F1 | 	add	objptr, #12
355cc     F2 02 02 FB | 	rdlong	_var02, objptr
355d0     01 00 00 FF 
355d4     1C E4 85 F1 | 	sub	objptr, ##540
355d8     01 03 08 FC | 	akpin	_var02
355dc     0A 05 0A F6 | 	mov	_var03, arg02 wz
355e0     02 04 4E F0 | 	shr	_var03, #2 wz
355e4     30 00 90 AD |  if_e	jmp	#LR__5222
355e8     02 07 02 F6 | 	mov	_var04, _var03
355ec     05 06 66 F0 | 	shl	_var04, #5
355f0     00 07 22 FC | 	wypin	_var04, _var01
355f4     01 7F 18 FC | 	wxpin	#63, _var02
355f8                 | LR__5220
355f8                 | LR__5221
355f8     40 02 72 FD | 	testp	_var02 wc
355fc     F8 FF 9F 3D |  if_ae	jmp	#LR__5221
35600     01 07 8A FA | 	rdpin	_var04, _var02
35604     69 06 62 FD | 	rev	_var04
35608     1B 06 FE F9 | 	movbyts	_var04, #27
3560c     09 07 62 FC | 	wrlong	_var04, arg01
35610     04 12 06 F1 | 	add	arg01, #4
35614     F8 05 6E FB | 	djnz	_var03, #LR__5220
35618                 | LR__5222
35618     03 14 0E F5 | 	and	arg02, #3 wz
3561c     24 00 90 AD |  if_e	jmp	#LR__5225
35620     01 4F 18 FC | 	wxpin	#39, _var02
35624                 | LR__5223
35624     00 11 28 FC | 	wypin	#8, _var01
35628                 | LR__5224
35628     40 02 72 FD | 	testp	_var02 wc
3562c     F8 FF 9F 3D |  if_ae	jmp	#LR__5224
35630     01 07 8A FA | 	rdpin	_var04, _var02
35634     69 06 62 FD | 	rev	_var04
35638     09 07 42 FC | 	wrbyte	_var04, arg01
3563c     01 12 06 F1 | 	add	arg01, #1
35640     F8 15 6E FB | 	djnz	arg02, #LR__5223
35644                 | LR__5225
35644                 | _fatfs_cc_rcvr_mmc_1189_ret
35644     2D 00 64 FD | 	ret
35648                 | 
35648                 | _fatfs_cc_wait_ready_1193
35648     01 4A 05 F6 | 	mov	COUNT_, #1
3564c     A8 00 A0 FD | 	call	#pushregs_
35650     10 F0 07 F1 | 	add	ptra, #16
35654     1A FA 61 FD | 	getct	result1
35658     08 4E 05 F1 | 	add	fp, #8
3565c     A7 FA 61 FC | 	wrlong	result1, fp
35660     14 26 06 FB | 	rdlong	local01, #20
35664     01 26 46 F0 | 	shr	local01, #1
35668     04 4E 05 F1 | 	add	fp, #4
3566c     A7 26 62 FC | 	wrlong	local01, fp
35670     0C 4E 85 F1 | 	sub	fp, #12
35674                 | ' {
35674                 | ' 	BYTE d;
35674                 | ' 	UINT tmr, tmout;
35674                 | ' 
35674                 | ' 	tmr = _cnt();
35674                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
35674                 | ' 	for(;;) {
35674                 | LR__5230
35674     04 4E 05 F1 | 	add	fp, #4
35678     A7 12 02 F6 | 	mov	arg01, fp
3567c     04 4E 85 F1 | 	sub	fp, #4
35680     01 14 06 F6 | 	mov	arg02, #1
35684     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
35688     04 4E 05 F1 | 	add	fp, #4
3568c     A7 26 C2 FA | 	rdbyte	local01, fp
35690     04 4E 85 F1 | 	sub	fp, #4
35694     FF 26 0E F2 | 	cmp	local01, #255 wz
35698     01 FA 05 A6 |  if_e	mov	result1, #1
3569c     28 00 90 AD |  if_e	jmp	#LR__5231
356a0     1A FA 61 FD | 	getct	result1
356a4     08 4E 05 F1 | 	add	fp, #8
356a8     A7 26 02 FB | 	rdlong	local01, fp
356ac     13 FB 81 F1 | 	sub	result1, local01
356b0     04 4E 05 F1 | 	add	fp, #4
356b4     A7 26 02 FB | 	rdlong	local01, fp
356b8     0C 4E 85 F1 | 	sub	fp, #12
356bc     13 FB 11 F2 | 	cmp	result1, local01 wc
356c0     00 FA 05 36 |  if_ae	mov	result1, #0
356c4     AC FF 9F CD |  if_b	jmp	#LR__5230
356c8                 | LR__5231
356c8     A7 F0 03 F6 | 	mov	ptra, fp
356cc     B2 00 A0 FD | 	call	#popregs_
356d0                 | _fatfs_cc_wait_ready_1193_ret
356d0     2D 00 64 FD | 	ret
356d4                 | 
356d4                 | _fatfs_cc_deselect_1199
356d4     00 4A 05 F6 | 	mov	COUNT_, #0
356d8     A8 00 A0 FD | 	call	#pushregs_
356dc     14 F0 07 F1 | 	add	ptra, #20
356e0     01 00 00 FF 
356e4     14 E4 05 F1 | 	add	objptr, ##532
356e8     F2 14 02 FB | 	rdlong	arg02, objptr
356ec     04 4E 05 F1 | 	add	fp, #4
356f0     A7 14 62 FC | 	wrlong	arg02, fp
356f4     04 E4 85 F1 | 	sub	objptr, #4
356f8     F2 14 02 FB | 	rdlong	arg02, objptr
356fc     04 4E 05 F1 | 	add	fp, #4
35700     A7 14 62 FC | 	wrlong	arg02, fp
35704     08 E4 05 F1 | 	add	objptr, #8
35708     F2 14 02 FB | 	rdlong	arg02, objptr
3570c     04 4E 05 F1 | 	add	fp, #4
35710     A7 14 62 FC | 	wrlong	arg02, fp
35714     04 E4 05 F1 | 	add	objptr, #4
35718     F2 14 02 FB | 	rdlong	arg02, objptr
3571c     01 00 00 FF 
35720     1C E4 85 F1 | 	sub	objptr, ##540
35724     04 4E 05 F1 | 	add	fp, #4
35728     A7 14 62 FC | 	wrlong	arg02, fp
3572c     0C 4E 85 F1 | 	sub	fp, #12
35730     A7 12 02 FB | 	rdlong	arg01, fp
35734     04 4E 85 F1 | 	sub	fp, #4
35738     59 12 62 FD | 	drvh	arg01
3573c     1F 20 64 FD | 	waitx	#16
35740     A7 12 02 F6 | 	mov	arg01, fp
35744     01 14 06 F6 | 	mov	arg02, #1
35748     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
3574c     A7 F0 03 F6 | 	mov	ptra, fp
35750     B2 00 A0 FD | 	call	#popregs_
35754                 | _fatfs_cc_deselect_1199_ret
35754     2D 00 64 FD | 	ret
35758                 | 
35758                 | _fatfs_cc_select_1203
35758     00 4A 05 F6 | 	mov	COUNT_, #0
3575c     A8 00 A0 FD | 	call	#pushregs_
35760     10 F0 07 F1 | 	add	ptra, #16
35764     01 00 00 FF 
35768     14 E4 05 F1 | 	add	objptr, ##532
3576c     F2 14 02 FB | 	rdlong	arg02, objptr
35770     08 4E 05 F1 | 	add	fp, #8
35774     A7 14 62 FC | 	wrlong	arg02, fp
35778     08 E4 05 F1 | 	add	objptr, #8
3577c     F2 12 02 FB | 	rdlong	arg01, objptr
35780     01 00 00 FF 
35784     1C E4 85 F1 | 	sub	objptr, ##540
35788     04 4E 05 F1 | 	add	fp, #4
3578c     A7 12 62 FC | 	wrlong	arg01, fp
35790     50 12 62 FD | 	fltl	arg01
35794     04 4E 85 F1 | 	sub	fp, #4
35798     A7 12 02 FB | 	rdlong	arg01, fp
3579c     58 12 62 FD | 	drvl	arg01
357a0     1F 20 64 FD | 	waitx	#16
357a4     04 4E 05 F1 | 	add	fp, #4
357a8     A7 12 02 FB | 	rdlong	arg01, fp
357ac     41 12 62 FD | 	dirh	arg01
357b0     08 4E 85 F1 | 	sub	fp, #8
357b4     A7 12 02 F6 | 	mov	arg01, fp
357b8     04 4E 85 F1 | 	sub	fp, #4
357bc     01 14 06 F6 | 	mov	arg02, #1
357c0     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
357c4     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1193
357c8     00 FA 0D F2 | 	cmp	result1, #0 wz
357cc     01 FA 05 56 |  if_ne	mov	result1, #1
357d0     08 00 90 5D |  if_ne	jmp	#LR__5240
357d4     FC FE BF FD | 	call	#_fatfs_cc_deselect_1199
357d8                 | ' 
357d8                 | ' 	deselect();
357d8                 | ' 	return 0;
357d8     00 FA 05 F6 | 	mov	result1, #0
357dc                 | LR__5240
357dc     A7 F0 03 F6 | 	mov	ptra, fp
357e0     B2 00 A0 FD | 	call	#popregs_
357e4                 | _fatfs_cc_select_1203_ret
357e4     2D 00 64 FD | 	ret
357e8                 | 
357e8                 | _fatfs_cc_rcvr_datablock_1207
357e8     01 4A 05 F6 | 	mov	COUNT_, #1
357ec     A8 00 A0 FD | 	call	#pushregs_
357f0     18 F0 07 F1 | 	add	ptra, #24
357f4     04 4E 05 F1 | 	add	fp, #4
357f8     A7 12 62 FC | 	wrlong	arg01, fp
357fc     04 4E 05 F1 | 	add	fp, #4
35800     A7 14 62 FC | 	wrlong	arg02, fp
35804     1A FA 61 FD | 	getct	result1
35808     08 4E 05 F1 | 	add	fp, #8
3580c     A7 FA 61 FC | 	wrlong	result1, fp
35810     14 26 06 FB | 	rdlong	local01, #20
35814     03 26 46 F0 | 	shr	local01, #3
35818     04 4E 05 F1 | 	add	fp, #4
3581c     A7 26 62 FC | 	wrlong	local01, fp
35820     14 4E 85 F1 | 	sub	fp, #20
35824                 | ' 	BYTE *buff,
35824                 | ' 	UINT btr
35824                 | ' )
35824                 | ' {
35824                 | ' 	BYTE d[2];
35824                 | ' 	UINT tmr, tmout;
35824                 | ' 
35824                 | ' 	tmr = _cnt();
35824                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
35824                 | ' 	for(;;) {
35824                 | LR__5250
35824     0C 4E 05 F1 | 	add	fp, #12
35828     A7 12 02 F6 | 	mov	arg01, fp
3582c     0C 4E 85 F1 | 	sub	fp, #12
35830     01 14 06 F6 | 	mov	arg02, #1
35834     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
35838     0C 4E 05 F1 | 	add	fp, #12
3583c     A7 26 C2 FA | 	rdbyte	local01, fp
35840     0C 4E 85 F1 | 	sub	fp, #12
35844     FF 26 0E F2 | 	cmp	local01, #255 wz
35848     28 00 90 5D |  if_ne	jmp	#LR__5251
3584c     1A FA 61 FD | 	getct	result1
35850     FD 26 02 F6 | 	mov	local01, result1
35854     10 4E 05 F1 | 	add	fp, #16
35858     A7 14 02 FB | 	rdlong	arg02, fp
3585c     0A 27 82 F1 | 	sub	local01, arg02
35860     04 4E 05 F1 | 	add	fp, #4
35864     A7 14 02 FB | 	rdlong	arg02, fp
35868     14 4E 85 F1 | 	sub	fp, #20
3586c     0A 27 12 F2 | 	cmp	local01, arg02 wc
35870     B0 FF 9F CD |  if_b	jmp	#LR__5250
35874                 | LR__5251
35874     0C 4E 05 F1 | 	add	fp, #12
35878     A7 26 C2 FA | 	rdbyte	local01, fp
3587c     0C 4E 85 F1 | 	sub	fp, #12
35880     FE 26 0E F2 | 	cmp	local01, #254 wz
35884     00 FA 05 56 |  if_ne	mov	result1, #0
35888     30 00 90 5D |  if_ne	jmp	#LR__5252
3588c     04 4E 05 F1 | 	add	fp, #4
35890     A7 12 02 FB | 	rdlong	arg01, fp
35894     04 4E 05 F1 | 	add	fp, #4
35898     A7 14 02 FB | 	rdlong	arg02, fp
3589c     08 4E 85 F1 | 	sub	fp, #8
358a0     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
358a4     0C 4E 05 F1 | 	add	fp, #12
358a8     A7 12 02 F6 | 	mov	arg01, fp
358ac     0C 4E 85 F1 | 	sub	fp, #12
358b0     02 14 06 F6 | 	mov	arg02, #2
358b4     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
358b8                 | ' 
358b8                 | ' 	rcvr_mmc(buff, btr);
358b8                 | ' 	rcvr_mmc(d, 2);
358b8                 | ' 
358b8                 | ' 	return 1;
358b8     01 FA 05 F6 | 	mov	result1, #1
358bc                 | LR__5252
358bc     A7 F0 03 F6 | 	mov	ptra, fp
358c0     B2 00 A0 FD | 	call	#popregs_
358c4                 | _fatfs_cc_rcvr_datablock_1207_ret
358c4     2D 00 64 FD | 	ret
358c8                 | 
358c8                 | _fatfs_cc_xmit_datablock_1209
358c8     00 4A 05 F6 | 	mov	COUNT_, #0
358cc     A8 00 A0 FD | 	call	#pushregs_
358d0     10 F0 07 F1 | 	add	ptra, #16
358d4     04 4E 05 F1 | 	add	fp, #4
358d8     A7 12 62 FC | 	wrlong	arg01, fp
358dc     04 4E 05 F1 | 	add	fp, #4
358e0     A7 14 42 FC | 	wrbyte	arg02, fp
358e4     08 4E 85 F1 | 	sub	fp, #8
358e8     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1193
358ec     00 FA 0D F2 | 	cmp	result1, #0 wz
358f0     00 FA 05 A6 |  if_e	mov	result1, #0
358f4     90 00 90 AD |  if_e	jmp	#LR__5261
358f8     08 4E 05 F1 | 	add	fp, #8
358fc     A7 14 C2 FA | 	rdbyte	arg02, fp
35900     04 4E 05 F1 | 	add	fp, #4
35904     A7 14 42 FC | 	wrbyte	arg02, fp
35908     A7 12 02 F6 | 	mov	arg01, fp
3590c     0C 4E 85 F1 | 	sub	fp, #12
35910     01 14 06 F6 | 	mov	arg02, #1
35914     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1182
35918     08 4E 05 F1 | 	add	fp, #8
3591c     A7 14 C2 FA | 	rdbyte	arg02, fp
35920     08 4E 85 F1 | 	sub	fp, #8
35924     FD 14 0E F2 | 	cmp	arg02, #253 wz
35928     58 00 90 AD |  if_e	jmp	#LR__5260
3592c     04 4E 05 F1 | 	add	fp, #4
35930     A7 12 02 FB | 	rdlong	arg01, fp
35934     04 4E 85 F1 | 	sub	fp, #4
35938     09 14 C6 F9 | 	decod	arg02, #9
3593c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1182
35940     0C 4E 05 F1 | 	add	fp, #12
35944     A7 12 02 F6 | 	mov	arg01, fp
35948     0C 4E 85 F1 | 	sub	fp, #12
3594c     02 14 06 F6 | 	mov	arg02, #2
35950     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
35954     0C 4E 05 F1 | 	add	fp, #12
35958     A7 12 02 F6 | 	mov	arg01, fp
3595c     0C 4E 85 F1 | 	sub	fp, #12
35960     01 14 06 F6 | 	mov	arg02, #1
35964     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
35968     0C 4E 05 F1 | 	add	fp, #12
3596c     A7 14 C2 FA | 	rdbyte	arg02, fp
35970     0C 4E 85 F1 | 	sub	fp, #12
35974     1F 14 06 F5 | 	and	arg02, #31
35978     05 14 0E F2 | 	cmp	arg02, #5 wz
3597c                 | ' 			return 0;
3597c     00 FA 05 56 |  if_ne	mov	result1, #0
35980     04 00 90 5D |  if_ne	jmp	#LR__5261
35984                 | LR__5260
35984                 | ' 	}
35984                 | ' 
35984                 | ' 	return 1;
35984     01 FA 05 F6 | 	mov	result1, #1
35988                 | LR__5261
35988     A7 F0 03 F6 | 	mov	ptra, fp
3598c     B2 00 A0 FD | 	call	#popregs_
35990                 | _fatfs_cc_xmit_datablock_1209_ret
35990     2D 00 64 FD | 	ret
35994                 | 
35994                 | _fatfs_cc_send_cmd_1213
35994     01 4A 05 F6 | 	mov	COUNT_, #1
35998     A8 00 A0 FD | 	call	#pushregs_
3599c     1C F0 07 F1 | 	add	ptra, #28
359a0                 | _fatfs_cc_send_cmd_1213_enter
359a0     04 4E 05 F1 | 	add	fp, #4
359a4     A7 12 42 FC | 	wrbyte	arg01, fp
359a8     04 4E 05 F1 | 	add	fp, #4
359ac     A7 14 62 FC | 	wrlong	arg02, fp
359b0     04 4E 85 F1 | 	sub	fp, #4
359b4     A7 FA C1 FA | 	rdbyte	result1, fp
359b8     04 4E 85 F1 | 	sub	fp, #4
359bc     80 FA CD F7 | 	test	result1, #128 wz
359c0     44 00 90 AD |  if_e	jmp	#LR__5270
359c4     04 4E 05 F1 | 	add	fp, #4
359c8     A7 14 C2 FA | 	rdbyte	arg02, fp
359cc     7F 14 06 F5 | 	and	arg02, #127
359d0     A7 14 42 FC | 	wrbyte	arg02, fp
359d4     04 4E 85 F1 | 	sub	fp, #4
359d8     37 12 06 F6 | 	mov	arg01, #55
359dc     00 14 06 F6 | 	mov	arg02, #0
359e0     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1213
359e4     0C 4E 05 F1 | 	add	fp, #12
359e8     A7 FA 41 FC | 	wrbyte	result1, fp
359ec     A7 14 C2 FA | 	rdbyte	arg02, fp
359f0     0C 4E 85 F1 | 	sub	fp, #12
359f4     02 14 16 F2 | 	cmp	arg02, #2 wc
359f8     0C 4E 05 31 |  if_ae	add	fp, #12
359fc     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
35a00     0C 4E 85 31 |  if_ae	sub	fp, #12
35a04     6C 01 90 3D |  if_ae	jmp	#LR__5274
35a08                 | LR__5270
35a08     04 4E 05 F1 | 	add	fp, #4
35a0c     A7 14 C2 FA | 	rdbyte	arg02, fp
35a10     04 4E 85 F1 | 	sub	fp, #4
35a14     0C 14 0E F2 | 	cmp	arg02, #12 wz
35a18     14 00 90 AD |  if_e	jmp	#LR__5271
35a1c     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1199
35a20     34 FD BF FD | 	call	#_fatfs_cc_select_1203
35a24     00 FA 0D F2 | 	cmp	result1, #0 wz
35a28     FF FA 05 A6 |  if_e	mov	result1, #255
35a2c     44 01 90 AD |  if_e	jmp	#LR__5274
35a30                 | LR__5271
35a30     04 4E 05 F1 | 	add	fp, #4
35a34     A7 14 C2 FA | 	rdbyte	arg02, fp
35a38     40 FA 05 F6 | 	mov	result1, #64
35a3c     0A FB 41 F5 | 	or	result1, arg02
35a40     10 4E 05 F1 | 	add	fp, #16
35a44     A7 FA 41 FC | 	wrbyte	result1, fp
35a48     0C 4E 85 F1 | 	sub	fp, #12
35a4c     A7 FA 01 FB | 	rdlong	result1, fp
35a50     18 FA 45 F0 | 	shr	result1, #24
35a54     0D 4E 05 F1 | 	add	fp, #13
35a58     A7 FA 41 FC | 	wrbyte	result1, fp
35a5c     0D 4E 85 F1 | 	sub	fp, #13
35a60     A7 FA 01 FB | 	rdlong	result1, fp
35a64     10 FA 45 F0 | 	shr	result1, #16
35a68     0E 4E 05 F1 | 	add	fp, #14
35a6c     A7 FA 41 FC | 	wrbyte	result1, fp
35a70     0E 4E 85 F1 | 	sub	fp, #14
35a74     A7 FA 01 FB | 	rdlong	result1, fp
35a78     08 FA 45 F0 | 	shr	result1, #8
35a7c     0F 4E 05 F1 | 	add	fp, #15
35a80     A7 FA 41 FC | 	wrbyte	result1, fp
35a84     0F 4E 85 F1 | 	sub	fp, #15
35a88     A7 FA 01 FB | 	rdlong	result1, fp
35a8c     10 4E 05 F1 | 	add	fp, #16
35a90     A7 FA 41 FC | 	wrbyte	result1, fp
35a94     0C 4E 85 F1 | 	sub	fp, #12
35a98     A7 02 48 FC | 	wrbyte	#1, fp
35a9c     08 4E 85 F1 | 	sub	fp, #8
35aa0     A7 FA C9 FA | 	rdbyte	result1, fp wz
35aa4     04 4E 85 F1 | 	sub	fp, #4
35aa8     0C 4E 05 A1 |  if_e	add	fp, #12
35aac     A7 2A 49 AC |  if_e	wrbyte	#149, fp
35ab0     0C 4E 85 A1 |  if_e	sub	fp, #12
35ab4     04 4E 05 F1 | 	add	fp, #4
35ab8     A7 FA C1 FA | 	rdbyte	result1, fp
35abc     04 4E 85 F1 | 	sub	fp, #4
35ac0     08 FA 0D F2 | 	cmp	result1, #8 wz
35ac4     0C 4E 05 A1 |  if_e	add	fp, #12
35ac8     A7 0E 49 AC |  if_e	wrbyte	#135, fp
35acc     0C 4E 85 A1 |  if_e	sub	fp, #12
35ad0     0C 4E 05 F1 | 	add	fp, #12
35ad4     A7 14 C2 FA | 	rdbyte	arg02, fp
35ad8     0D 4E 05 F1 | 	add	fp, #13
35adc     A7 14 42 FC | 	wrbyte	arg02, fp
35ae0     05 4E 85 F1 | 	sub	fp, #5
35ae4     A7 12 02 F6 | 	mov	arg01, fp
35ae8     14 4E 85 F1 | 	sub	fp, #20
35aec     06 14 06 F6 | 	mov	arg02, #6
35af0     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1182
35af4     04 4E 05 F1 | 	add	fp, #4
35af8     A7 26 C2 FA | 	rdbyte	local01, fp
35afc     04 4E 85 F1 | 	sub	fp, #4
35b00     0C 26 0E F2 | 	cmp	local01, #12 wz
35b04     10 4E 05 A1 |  if_e	add	fp, #16
35b08     A7 12 02 A6 |  if_e	mov	arg01, fp
35b0c     10 4E 85 A1 |  if_e	sub	fp, #16
35b10     01 14 06 A6 |  if_e	mov	arg02, #1
35b14     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1189
35b18     0C 4E 05 F1 | 	add	fp, #12
35b1c     A7 14 48 FC | 	wrbyte	#10, fp
35b20     0C 4E 85 F1 | 	sub	fp, #12
35b24                 | ' 	n = 10;
35b24                 | ' 	do
35b24                 | LR__5272
35b24     10 4E 05 F1 | 	add	fp, #16
35b28     A7 12 02 F6 | 	mov	arg01, fp
35b2c     10 4E 85 F1 | 	sub	fp, #16
35b30     01 14 06 F6 | 	mov	arg02, #1
35b34     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
35b38     10 4E 05 F1 | 	add	fp, #16
35b3c     A7 26 C2 FA | 	rdbyte	local01, fp
35b40     10 4E 85 F1 | 	sub	fp, #16
35b44     80 26 CE F7 | 	test	local01, #128 wz
35b48     1C 00 90 AD |  if_e	jmp	#LR__5273
35b4c     0C 4E 05 F1 | 	add	fp, #12
35b50     A7 26 C2 FA | 	rdbyte	local01, fp
35b54     01 26 86 F1 | 	sub	local01, #1
35b58     A7 26 42 FC | 	wrbyte	local01, fp
35b5c     A7 26 CA FA | 	rdbyte	local01, fp wz
35b60     0C 4E 85 F1 | 	sub	fp, #12
35b64     BC FF 9F 5D |  if_ne	jmp	#LR__5272
35b68                 | LR__5273
35b68                 | ' 
35b68                 | ' 	return d;
35b68     10 4E 05 F1 | 	add	fp, #16
35b6c     A7 FA C1 FA | 	rdbyte	result1, fp
35b70     10 4E 85 F1 | 	sub	fp, #16
35b74                 | LR__5274
35b74     A7 F0 03 F6 | 	mov	ptra, fp
35b78     B2 00 A0 FD | 	call	#popregs_
35b7c                 | _fatfs_cc_send_cmd_1213_ret
35b7c     2D 00 64 FD | 	ret
35b80                 | 
35b80                 | _fatfs_cc_disk_deinitialize
35b80     03 4A 05 F6 | 	mov	COUNT_, #3
35b84     A8 00 A0 FD | 	call	#pushregs_
35b88     00 12 4E F2 | 	cmps	arg01, #0 wz
35b8c     01 00 00 FF 
35b90     14 E4 05 F1 | 	add	objptr, ##532
35b94     F2 12 02 FB | 	rdlong	arg01, objptr
35b98     04 E4 85 F1 | 	sub	objptr, #4
35b9c     F2 26 02 FB | 	rdlong	local01, objptr
35ba0     08 E4 05 F1 | 	add	objptr, #8
35ba4     F2 28 02 FB | 	rdlong	local02, objptr
35ba8     04 E4 05 F1 | 	add	objptr, #4
35bac     F2 2A 02 FB | 	rdlong	local03, objptr
35bb0     01 00 00 FF 
35bb4     1C E4 85 F1 | 	sub	objptr, ##540
35bb8                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
35bb8                 | '         return RES_NOTRDY;
35bb8     03 FA 05 56 |  if_ne	mov	result1, #3
35bbc     2C 00 90 5D |  if_ne	jmp	#LR__5280
35bc0     50 12 62 FD | 	fltl	arg01
35bc4     09 01 08 FC | 	wrpin	#0, arg01
35bc8     50 26 62 FD | 	fltl	local01
35bcc     13 01 08 FC | 	wrpin	#0, local01
35bd0     50 28 62 FD | 	fltl	local02
35bd4     14 01 08 FC | 	wrpin	#0, local02
35bd8     50 2A 62 FD | 	fltl	local03
35bdc     15 01 08 FC | 	wrpin	#0, local03
35be0     0A 12 06 F6 | 	mov	arg01, #10
35be4     40 0E BF FD | 	call	#__system___waitms
35be8                 | '     }
35be8                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
35be8                 | '     _pinclear(PIN_SS);
35be8                 | '     _pinclear(PIN_CLK);
35be8                 | '     _pinclear(PIN_DI);
35be8                 | '     _pinclear(PIN_DO);
35be8                 | ' 
35be8                 | '     _waitms(10);
35be8                 | ' 
35be8                 | '     return 0;
35be8     00 FA 05 F6 | 	mov	result1, #0
35bec                 | LR__5280
35bec     A7 F0 03 F6 | 	mov	ptra, fp
35bf0     B2 00 A0 FD | 	call	#popregs_
35bf4                 | _fatfs_cc_disk_deinitialize_ret
35bf4     2D 00 64 FD | 	ret
35bf8                 | 
35bf8                 | _fatfs_cc_gettimeofday
35bf8     04 4A 05 F6 | 	mov	COUNT_, #4
35bfc     A8 00 A0 FD | 	call	#pushregs_
35c00     09 27 02 F6 | 	mov	local01, arg01
35c04     FC 09 BF FD | 	call	#__system___getus
35c08     FD 12 02 F6 | 	mov	arg01, result1
35c0c     02 00 00 FF 
35c10     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
35c14     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
35c18     09 FB 01 F6 | 	mov	result1, arg01
35c1c     14 FB 81 F1 | 	sub	result1, local02
35c20     A1 07 00 FF 
35c24     40 FA 15 FD | 	qdiv	result1, ##1000000
35c28     02 00 00 FF 
35c2c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
35c30     18 28 62 FD | 	getqx	local02
35c34     A1 07 00 FF 
35c38     40 FA 15 FD | 	qdiv	result1, ##1000000
35c3c     00 28 0E F2 | 	cmp	local02, #0 wz
35c40     19 2A 62 FD | 	getqy	local03
35c44     28 00 90 AD |  if_e	jmp	#LR__5290
35c48     02 00 00 FF 
35c4c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
35c50     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
35c54     14 2D 02 F1 | 	add	local04, local02
35c58     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
35c5c     15 13 82 F1 | 	sub	arg01, local03
35c60     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
35c64     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
35c68     02 00 00 FF 
35c6c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
35c70                 | LR__5290
35c70     02 00 00 FF 
35c74     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
35c78     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
35c7c     02 00 00 FF 
35c80     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
35c84     13 2D 62 FC | 	wrlong	local04, local01
35c88     04 26 06 F1 | 	add	local01, #4
35c8c     13 2B 62 FC | 	wrlong	local03, local01
35c90                 | '         lastsec += secs;
35c90                 | '         lastus = now - leftover;
35c90                 | '     }
35c90                 | '     tv->tv_sec = lastsec;
35c90                 | '     tv->tv_usec = leftover;
35c90                 | '     return 0;
35c90     00 FA 05 F6 | 	mov	result1, #0
35c94     A7 F0 03 F6 | 	mov	ptra, fp
35c98     B2 00 A0 FD | 	call	#popregs_
35c9c                 | _fatfs_cc_gettimeofday_ret
35c9c     2D 00 64 FD | 	ret
35ca0                 | 
35ca0                 | _fatfs_cc__is_leap_year
35ca0     09 FB 51 F6 | 	abs	result1, arg01 wc
35ca4     03 FA 05 F5 | 	and	result1, #3
35ca8     FD FA 89 F6 | 	negc	result1, result1 wz
35cac     38 00 90 5D |  if_ne	jmp	#LR__5301
35cb0     09 FB 51 F6 | 	abs	result1, arg01 wc
35cb4     64 FA 15 FD | 	qdiv	result1, #100
35cb8     19 FA 61 FD | 	getqy	result1
35cbc     FD FA 89 F6 | 	negc	result1, result1 wz
35cc0     1C 00 90 5D |  if_ne	jmp	#LR__5300
35cc4     09 FB 51 F6 | 	abs	result1, arg01 wc
35cc8     90 FB 15 FD | 	qdiv	result1, #400
35ccc                 | '       return (0 == y % 400);
35ccc     00 FA 05 F6 | 	mov	result1, #0
35cd0     19 00 62 FD | 	getqy	_var01
35cd4     00 01 8A F6 | 	negc	_var01, _var01 wz
35cd8     01 FA 05 A6 |  if_e	mov	result1, #1
35cdc     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
35ce0                 | LR__5300
35ce0                 | '     return 1;
35ce0     01 FA 05 F6 | 	mov	result1, #1
35ce4     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
35ce8                 | LR__5301
35ce8                 | '   }
35ce8                 | '   return 0;
35ce8     00 FA 05 F6 | 	mov	result1, #0
35cec                 | _fatfs_cc__is_leap_year_ret
35cec     2D 00 64 FD | 	ret
35cf0                 | 
35cf0                 | _fatfs_cc___tzoffset
35cf0     09 01 0A F6 | 	mov	_var01, arg01 wz
35cf4     FF FF FF FF 
35cf8     0A FF 6B FC | 	wrlong	##-1, arg02
35cfc     01 02 06 F6 | 	mov	_var02, #1
35d00     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
35d04                 | '                 return 0;
35d04     00 FA 05 A6 |  if_e	mov	result1, #0
35d08     94 02 90 AD |  if_e	jmp	#LR__5327
35d0c     0A 01 68 FC | 	wrlong	#0, arg02
35d10     02 00 00 FF 
35d14     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
35d18     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
35d1c                 | ' 
35d1c                 | '        *hasdst = 0;
35d1c                 | ' 
35d1c                 | ' 	n = stdname;
35d1c                 | '         while (*s && isalpha(*s)) {
35d1c     02 00 00 FF 
35d20     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
35d24     97 28 48 FB | 	callpa	#(@LR__5311-@LR__5310)>>2,fcache_load_ptr_
35d28                 | LR__5310
35d28     00 05 CA FA | 	rdbyte	_var03, _var01 wz
35d2c     48 00 90 AD |  if_e	jmp	#LR__5312
35d30     00 13 C2 FA | 	rdbyte	arg01, _var01
35d34                 | ' {
35d34                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
35d34     80 12 36 F3 | 	fle	arg01, #128 wc
35d38                 | '     return __ctype[c];
35d38     02 00 00 FF 
35d3c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
35d40     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35d44     09 FB C1 FA | 	rdbyte	result1, arg01
35d48     02 00 00 FF 
35d4c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35d50     0C FA CD F7 | 	test	result1, #12 wz
35d54     20 00 90 AD |  if_e	jmp	#LR__5312
35d58     00 09 02 F6 | 	mov	_var05, _var01
35d5c     00 0B 02 F6 | 	mov	_var06, _var01
35d60     01 0A 06 F1 | 	add	_var06, #1
35d64     04 0D C2 FA | 	rdbyte	_var07, _var05
35d68     05 01 02 F6 | 	mov	_var01, _var06
35d6c     03 0D 42 FC | 	wrbyte	_var07, _var04
35d70     01 06 06 F1 | 	add	_var04, #1
35d74     B0 FF 9F FD | 	jmp	#LR__5310
35d78                 | LR__5311
35d78                 | LR__5312
35d78     03 01 48 FC | 	wrbyte	#0, _var04
35d7c     00 0E 06 F6 | 	mov	_var08, #0
35d80     00 05 C2 FA | 	rdbyte	_var03, _var01
35d84     2D 04 0E F2 | 	cmp	_var03, #45 wz
35d88     01 02 66 A6 |  if_e	neg	_var02, #1
35d8c     01 00 06 A1 |  if_e	add	_var01, #1
35d90     97 28 48 FB | 	callpa	#(@LR__5314-@LR__5313)>>2,fcache_load_ptr_
35d94                 | '                 sgn = -1;
35d94                 | '                 s++;
35d94                 | '         }
35d94                 | '         while (isdigit(*s)) {
35d94                 | LR__5313
35d94     00 13 C2 FA | 	rdbyte	arg01, _var01
35d98                 | ' {
35d98                 | '   return  (__ctype_get(c) & 0x02 ) ;
35d98     80 12 36 F3 | 	fle	arg01, #128 wc
35d9c                 | '     return __ctype[c];
35d9c     02 00 00 FF 
35da0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
35da4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35da8     09 FB C1 FA | 	rdbyte	result1, arg01
35dac     02 00 00 FF 
35db0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35db4     02 FA CD F7 | 	test	result1, #2 wz
35db8     28 00 90 AD |  if_e	jmp	#LR__5315
35dbc     07 05 02 F6 | 	mov	_var03, _var08
35dc0     02 04 66 F0 | 	shl	_var03, #2
35dc4     07 05 02 F1 | 	add	_var03, _var08
35dc8     01 04 66 F0 | 	shl	_var03, #1
35dcc     00 09 C2 FA | 	rdbyte	_var05, _var01
35dd0     30 08 86 F1 | 	sub	_var05, #48
35dd4     04 05 02 F1 | 	add	_var03, _var05
35dd8     02 0F 02 F6 | 	mov	_var08, _var03
35ddc     01 00 06 F1 | 	add	_var01, #1
35de0     B0 FF 9F FD | 	jmp	#LR__5313
35de4                 | LR__5314
35de4                 | LR__5315
35de4     07 00 00 FF 
35de8     10 0E 06 FD | 	qmul	_var08, ##3600
35dec     00 05 C2 FA | 	rdbyte	_var03, _var01
35df0     3A 04 0E F2 | 	cmp	_var03, #58 wz
35df4     18 10 62 FD | 	getqx	_var09
35df8     70 00 90 5D |  if_ne	jmp	#LR__5319
35dfc     00 0E 06 F6 | 	mov	_var08, #0
35e00     01 00 06 F1 | 	add	_var01, #1
35e04     97 28 48 FB | 	callpa	#(@LR__5317-@LR__5316)>>2,fcache_load_ptr_
35e08                 | '                 x = 0;
35e08                 | '                 s++;
35e08                 | '                 while (isdigit(*s)) {
35e08                 | LR__5316
35e08     00 13 C2 FA | 	rdbyte	arg01, _var01
35e0c                 | ' {
35e0c                 | '   return  (__ctype_get(c) & 0x02 ) ;
35e0c     80 12 36 F3 | 	fle	arg01, #128 wc
35e10                 | '     return __ctype[c];
35e10     02 00 00 FF 
35e14     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
35e18     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35e1c     09 FB C1 FA | 	rdbyte	result1, arg01
35e20     02 00 00 FF 
35e24     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35e28     02 FA CD F7 | 	test	result1, #2 wz
35e2c     28 00 90 AD |  if_e	jmp	#LR__5318
35e30     07 05 02 F6 | 	mov	_var03, _var08
35e34     02 04 66 F0 | 	shl	_var03, #2
35e38     07 05 02 F1 | 	add	_var03, _var08
35e3c     01 04 66 F0 | 	shl	_var03, #1
35e40     00 09 C2 FA | 	rdbyte	_var05, _var01
35e44     30 08 86 F1 | 	sub	_var05, #48
35e48     04 05 02 F1 | 	add	_var03, _var05
35e4c     02 0F 02 F6 | 	mov	_var08, _var03
35e50     01 00 06 F1 | 	add	_var01, #1
35e54     B0 FF 9F FD | 	jmp	#LR__5316
35e58                 | LR__5317
35e58                 | LR__5318
35e58     07 0D 02 F6 | 	mov	_var07, _var08
35e5c     04 0C 66 F0 | 	shl	_var07, #4
35e60     07 0D 82 F1 | 	sub	_var07, _var08
35e64     02 0C 66 F0 | 	shl	_var07, #2
35e68     06 11 02 F1 | 	add	_var09, _var07
35e6c                 | LR__5319
35e6c     02 00 00 FF 
35e70     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
35e74     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
35e78     00 13 C2 FA | 	rdbyte	arg01, _var01
35e7c                 | ' {
35e7c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
35e7c     80 12 36 F3 | 	fle	arg01, #128 wc
35e80                 | '     return __ctype[c];
35e80     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
35e84     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35e88     09 FB C1 FA | 	rdbyte	result1, arg01
35e8c     02 00 00 FF 
35e90     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35e94     0C FA CD F7 | 	test	result1, #12 wz
35e98     50 00 90 AD |  if_e	jmp	#LR__5322
35e9c     0A 03 68 FC | 	wrlong	#1, arg02
35ea0                 | '                 *hasdst = 1;
35ea0                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
35ea0                 | LR__5320
35ea0     00 05 CA FA | 	rdbyte	_var03, _var01 wz
35ea4     44 00 90 AD |  if_e	jmp	#LR__5321
35ea8     00 13 C2 FA | 	rdbyte	arg01, _var01
35eac                 | ' {
35eac                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
35eac     80 12 36 F3 | 	fle	arg01, #128 wc
35eb0                 | '     return __ctype[c];
35eb0     02 00 00 FF 
35eb4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
35eb8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35ebc     09 FB C1 FA | 	rdbyte	result1, arg01
35ec0     02 00 00 FF 
35ec4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35ec8     0C FA CD F7 | 	test	result1, #12 wz
35ecc     1C 00 90 AD |  if_e	jmp	#LR__5321
35ed0     00 0B 02 F6 | 	mov	_var06, _var01
35ed4     01 0A 06 F1 | 	add	_var06, #1
35ed8     00 0D C2 FA | 	rdbyte	_var07, _var01
35edc     05 01 02 F6 | 	mov	_var01, _var06
35ee0     03 0D 42 FC | 	wrbyte	_var07, _var04
35ee4     01 06 06 F1 | 	add	_var04, #1
35ee8     B4 FF 9F FD | 	jmp	#LR__5320
35eec                 | LR__5321
35eec                 | LR__5322
35eec     03 01 48 FC | 	wrbyte	#0, _var04
35ef0     02 00 00 FF 
35ef4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
35ef8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
35efc     02 00 00 FF 
35f00     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
35f04     20 00 90 AD |  if_e	jmp	#LR__5323
35f08     02 00 00 FF 
35f0c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
35f10     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
35f14     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
35f18     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
35f1c     02 00 00 FF 
35f20     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
35f24     1C 00 90 FD | 	jmp	#LR__5324
35f28                 | LR__5323
35f28     02 00 00 FF 
35f2c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
35f30     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
35f34     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
35f38     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
35f3c     02 00 00 FF 
35f40     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
35f44                 | LR__5324
35f44     02 00 00 FF 
35f48     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
35f4c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
35f50     02 00 00 FF 
35f54     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
35f58     20 00 90 AD |  if_e	jmp	#LR__5325
35f5c     02 00 00 FF 
35f60     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
35f64     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
35f68     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
35f6c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
35f70     02 00 00 FF 
35f74     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
35f78     1C 00 90 FD | 	jmp	#LR__5326
35f7c                 | LR__5325
35f7c     02 00 00 FF 
35f80     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
35f84     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
35f88     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
35f8c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
35f90     02 00 00 FF 
35f94     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
35f98                 | LR__5326
35f98     08 03 02 FD | 	qmul	_var02, _var09
35f9c                 | ' 		_tzname[1] = stdname;
35f9c                 | ' 
35f9c                 | '         return sgn * off;
35f9c     18 FA 61 FD | 	getqx	result1
35fa0                 | LR__5327
35fa0                 | _fatfs_cc___tzoffset_ret
35fa0     2D 00 64 FD | 	ret
35fa4                 | 
35fa4                 | _fatfs_cc___indst
35fa4     10 12 06 F1 | 	add	arg01, #16
35fa8     09 01 02 FB | 	rdlong	_var01, arg01
35fac     10 12 86 F1 | 	sub	arg01, #16
35fb0     02 00 0E F2 | 	cmp	_var01, #2 wz
35fb4     30 00 90 5D |  if_ne	jmp	#LR__5330
35fb8     07 00 06 F6 | 	mov	_var01, #7
35fbc     18 12 06 F1 | 	add	arg01, #24
35fc0     09 03 02 FB | 	rdlong	_var02, arg01
35fc4     01 01 02 F1 | 	add	_var01, _var02
35fc8     0C 12 86 F1 | 	sub	arg01, #12
35fcc     09 05 02 FB | 	rdlong	_var03, arg01
35fd0     02 01 82 F1 | 	sub	_var01, _var03
35fd4     00 00 56 F2 | 	cmps	_var01, #0 wc
35fd8                 | '                         return 1;
35fd8     01 FA 05 C6 |  if_b	mov	result1, #1
35fdc     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
35fe0                 | '                 return 0;
35fe0     00 FA 05 F6 | 	mov	result1, #0
35fe4     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
35fe8                 | LR__5330
35fe8     10 12 06 F1 | 	add	arg01, #16
35fec     09 01 02 FB | 	rdlong	_var01, arg01
35ff0     10 12 86 F1 | 	sub	arg01, #16
35ff4     0A 00 0E F2 | 	cmp	_var01, #10 wz
35ff8     28 00 90 5D |  if_ne	jmp	#LR__5331
35ffc     18 12 06 F1 | 	add	arg01, #24
36000     09 01 02 FB | 	rdlong	_var01, arg01
36004     0C 12 86 F1 | 	sub	arg01, #12
36008     09 07 02 FB | 	rdlong	_var04, arg01
3600c     03 01 82 F1 | 	sub	_var01, _var04
36010     00 00 56 F2 | 	cmps	_var01, #0 wc
36014                 | '                         return 0;
36014     00 FA 05 C6 |  if_b	mov	result1, #0
36018     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
3601c                 | '                 return 1;
3601c     01 FA 05 F6 | 	mov	result1, #1
36020     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
36024                 | LR__5331
36024                 | '         }
36024                 | ' 
36024                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
36024     00 00 06 F6 | 	mov	_var01, #0
36028     10 12 06 F1 | 	add	arg01, #16
3602c     09 03 02 FB | 	rdlong	_var02, arg01
36030     10 12 86 F1 | 	sub	arg01, #16
36034     03 02 56 F2 | 	cmps	_var02, #3 wc
36038     10 00 90 CD |  if_b	jmp	#LR__5332
3603c     10 12 06 F1 | 	add	arg01, #16
36040     09 05 02 FB | 	rdlong	_var03, arg01
36044     0A 04 56 F2 | 	cmps	_var03, #10 wc
36048     01 00 06 C6 |  if_b	mov	_var01, #1
3604c                 | LR__5332
3604c     00 FB 01 F6 | 	mov	result1, _var01
36050                 | _fatfs_cc___indst_ret
36050     2D 00 64 FD | 	ret
36054                 | 
36054                 | ' 	
36054                 | ' 	FUNCTION pfunc(c as integer) as integer
36054                 | ___strs_cl_pfunc
36054                 | ' 		if (i < 16) then
36054     04 E4 05 F1 | 	add	objptr, #4
36058     F2 FA 01 FB | 	rdlong	result1, objptr
3605c     04 E4 85 F1 | 	sub	objptr, #4
36060     10 FA 55 F2 | 	cmps	result1, #16 wc
36064     2C 00 90 3D |  if_ae	jmp	#LR__5340
36068     F2 FA 01 FB | 	rdlong	result1, objptr
3606c     04 E4 05 F1 | 	add	objptr, #4
36070     F2 00 02 FB | 	rdlong	_var01, objptr
36074     FD 00 02 F1 | 	add	_var01, result1
36078     00 13 42 FC | 	wrbyte	arg01, _var01
3607c     F2 FA 01 FB | 	rdlong	result1, objptr
36080     01 FA 05 F1 | 	add	result1, #1
36084     F2 FA 61 FC | 	wrlong	result1, objptr
36088     04 E4 85 F1 | 	sub	objptr, #4
3608c                 | ' 			p(i) = c
3608c                 | ' 			i = i+1
3608c                 | ' 			return 1
3608c     01 FA 05 F6 | 	mov	result1, #1
36090     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
36094                 | LR__5340
36094                 | ' 			return -1
36094     01 FA 65 F6 | 	neg	result1, #1
36098                 | ___strs_cl_pfunc_ret
36098     2D 00 64 FD | 	ret
3609c                 | 
3609c                 | __struct__s_vfs_file_t_putchar
3609c     04 4A 05 F6 | 	mov	COUNT_, #4
360a0     A8 00 A0 FD | 	call	#pushregs_
360a4     1C E4 05 F1 | 	add	objptr, #28
360a8     F2 26 0A FB | 	rdlong	local01, objptr wz
360ac     1C E4 85 F1 | 	sub	objptr, #28
360b0     00 FA 05 A6 |  if_e	mov	result1, #0
360b4     48 00 90 AD |  if_e	jmp	#LR__5350
360b8     1C E4 05 F1 | 	add	objptr, #28
360bc     F2 28 02 FB | 	rdlong	local02, objptr
360c0     14 2B 02 F6 | 	mov	local03, local02
360c4     1C E4 85 F1 | 	sub	objptr, #28
360c8     13 2A 46 F7 | 	zerox	local03, #19
360cc     14 28 46 F0 | 	shr	local02, #20
360d0     02 28 66 F0 | 	shl	local02, #2
360d4     ED 28 02 F1 | 	add	local02, __methods__
360d8     14 29 02 FB | 	rdlong	local02, local02
360dc     F2 14 02 F6 | 	mov	arg02, objptr
360e0     F2 2C 02 F6 | 	mov	local04, objptr
360e4     15 E5 01 F6 | 	mov	objptr, local03
360e8     2D 28 62 FD | 	call	local02
360ec     16 E5 01 F6 | 	mov	objptr, local04
360f0                 | '     return (i < 0) ? 0 : 1;
360f0     00 FA 55 F2 | 	cmps	result1, #0 wc
360f4     00 26 06 C6 |  if_b	mov	local01, #0
360f8     01 26 06 36 |  if_ae	mov	local01, #1
360fc     13 FB 01 F6 | 	mov	result1, local01
36100                 | LR__5350
36100     A7 F0 03 F6 | 	mov	ptra, fp
36104     B2 00 A0 FD | 	call	#popregs_
36108                 | __struct__s_vfs_file_t_putchar_ret
36108     2D 00 64 FD | 	ret
3610c                 | 
3610c                 | __struct__s_vfs_file_t_getchar
3610c     03 4A 05 F6 | 	mov	COUNT_, #3
36110     A8 00 A0 FD | 	call	#pushregs_
36114     20 E4 05 F1 | 	add	objptr, #32
36118     F2 12 0A FB | 	rdlong	arg01, objptr wz
3611c     20 E4 85 F1 | 	sub	objptr, #32
36120     01 FA 65 A6 |  if_e	neg	result1, #1
36124     38 00 90 AD |  if_e	jmp	#LR__5360
36128                 | '     return getcf(__this);
36128     20 E4 05 F1 | 	add	objptr, #32
3612c     F2 26 02 FB | 	rdlong	local01, objptr
36130     13 29 02 F6 | 	mov	local02, local01
36134     20 E4 85 F1 | 	sub	objptr, #32
36138     13 28 46 F7 | 	zerox	local02, #19
3613c     14 26 46 F0 | 	shr	local01, #20
36140     02 26 66 F0 | 	shl	local01, #2
36144     ED 26 02 F1 | 	add	local01, __methods__
36148     13 27 02 FB | 	rdlong	local01, local01
3614c     F2 12 02 F6 | 	mov	arg01, objptr
36150     F2 2A 02 F6 | 	mov	local03, objptr
36154     14 E5 01 F6 | 	mov	objptr, local02
36158     2D 26 62 FD | 	call	local01
3615c     15 E5 01 F6 | 	mov	objptr, local03
36160                 | LR__5360
36160     A7 F0 03 F6 | 	mov	ptra, fp
36164     B2 00 A0 FD | 	call	#popregs_
36168                 | __struct__s_vfs_file_t_getchar_ret
36168     2D 00 64 FD | 	ret
3616c                 | 
3616c                 | __struct___bas_wrap_sender_tx
3616c     03 4A 05 F6 | 	mov	COUNT_, #3
36170     A8 00 A0 FD | 	call	#pushregs_
36174     F2 26 02 FB | 	rdlong	local01, objptr
36178     13 29 02 F6 | 	mov	local02, local01
3617c     13 26 46 F7 | 	zerox	local01, #19
36180     14 28 46 F0 | 	shr	local02, #20
36184     02 28 66 F0 | 	shl	local02, #2
36188     ED 28 02 F1 | 	add	local02, __methods__
3618c     14 29 02 FB | 	rdlong	local02, local02
36190     F2 2A 02 F6 | 	mov	local03, objptr
36194     13 E5 01 F6 | 	mov	objptr, local01
36198     2D 28 62 FD | 	call	local02
3619c     15 E5 01 F6 | 	mov	objptr, local03
361a0     01 FA 05 F6 | 	mov	result1, #1
361a4     A7 F0 03 F6 | 	mov	ptra, fp
361a8     B2 00 A0 FD | 	call	#popregs_
361ac                 | __struct___bas_wrap_sender_tx_ret
361ac     2D 00 64 FD | 	ret
361b0                 | 
361b0                 | __struct___bas_wrap_sender_rx
361b0     03 4A 05 F6 | 	mov	COUNT_, #3
361b4     A8 00 A0 FD | 	call	#pushregs_
361b8     04 E4 05 F1 | 	add	objptr, #4
361bc     F2 26 02 FB | 	rdlong	local01, objptr
361c0     13 29 02 F6 | 	mov	local02, local01
361c4     04 E4 85 F1 | 	sub	objptr, #4
361c8     13 28 46 F7 | 	zerox	local02, #19
361cc     14 26 46 F0 | 	shr	local01, #20
361d0     02 26 66 F0 | 	shl	local01, #2
361d4     ED 26 02 F1 | 	add	local01, __methods__
361d8     13 27 02 FB | 	rdlong	local01, local01
361dc     F2 2A 02 F6 | 	mov	local03, objptr
361e0     14 E5 01 F6 | 	mov	objptr, local02
361e4     2D 26 62 FD | 	call	local01
361e8     15 E5 01 F6 | 	mov	objptr, local03
361ec     A7 F0 03 F6 | 	mov	ptra, fp
361f0     B2 00 A0 FD | 	call	#popregs_
361f4                 | __struct___bas_wrap_sender_rx_ret
361f4     2D 00 64 FD | 	ret
361f8                 | 
361f8                 | __struct___bas_wrap_sender_close
361f8     03 4A 05 F6 | 	mov	COUNT_, #3
361fc     A8 00 A0 FD | 	call	#pushregs_
36200     08 E4 05 F1 | 	add	objptr, #8
36204     F2 26 02 FB | 	rdlong	local01, objptr
36208     13 29 02 F6 | 	mov	local02, local01
3620c     08 E4 85 F1 | 	sub	objptr, #8
36210     13 28 46 F7 | 	zerox	local02, #19
36214     14 26 46 F0 | 	shr	local01, #20
36218     02 26 66 F0 | 	shl	local01, #2
3621c     ED 26 02 F1 | 	add	local01, __methods__
36220     13 27 02 FB | 	rdlong	local01, local01
36224     F2 2A 02 F6 | 	mov	local03, objptr
36228     14 E5 01 F6 | 	mov	objptr, local02
3622c     2D 26 62 FD | 	call	local01
36230     15 E5 01 F6 | 	mov	objptr, local03
36234     A7 F0 03 F6 | 	mov	ptra, fp
36238     B2 00 A0 FD | 	call	#popregs_
3623c                 | __struct___bas_wrap_sender_close_ret
3623c     2D 00 64 FD | 	ret
36240                 | 
36240                 | LR__5370
36240     2F          | 	byte	"/"
36241     00          | 	byte	0
36242                 | LR__5371
36242     69 6E 66    | 	byte	"inf"
36245     00          | 	byte	0
36246                 | LR__5372
36246     6E 61 6E    | 	byte	"nan"
36249     00          | 	byte	0
3624a                 | LR__5373
3624a                 | 	byte	
3624a     00          | 	byte	0
3624b                 | LR__5374
3624b                 | 	byte	
3624b     00          | 	byte	0
3624c                 | LR__5375
3624c                 | 	byte	
3624c     00          | 	byte	0
3624d                 | LR__5376
3624d                 | 	byte	
3624d     00          | 	byte	0
3624e                 | LR__5377
3624e                 | 	byte	
3624e     00          | 	byte	0
3624f                 | LR__5378
3624f                 | 	byte	
3624f     00          | 	byte	0
36250                 | LR__5379
36250                 | 	byte	
36250     00          | 	byte	0
36251                 | LR__5380
36251                 | 	byte	
36251     00          | 	byte	0
36252                 | LR__5381
36252     00          | 	byte	0
36253     00          | 	byte	0
36254                 | LR__5382
36254     00          | 	byte	0
36255     00          | 	byte	0
36256                 | LR__5383
36256     00          | 	byte	0
36257     00          | 	byte	0
36258                 | LR__5384
36258     20 21 21 21 
3625c     20 63 6F 72 
36260     72 75 70 74 
36264     65 64 20 68 
36268     65 61 70 3F 
3626c     3F 3F 20 21 
36270     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
36273     00          | 	byte	0
36274                 | LR__5385
36274     20 21 21 21 
36278     20 6F 75 74 
3627c     20 6F 66 20 
36280     68 65 61 70 
36284     20 6D 65 6D 
36288     6F 72 79 20 
3628c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
36290     00          | 	byte	0
36291                 | LR__5386
36291     20 21 21 21 
36295     20 63 6F 72 
36299     72 75 70 74 
3629d     65 64 20 68 
362a1     65 61 70 20 
362a5     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
362a9     00          | 	byte	0
362aa                 | LR__5387
362aa     00          | 	byte	0
362ab     00          | 	byte	0
362ac                 | LR__5388
362ac     2E          | 	byte	"."
362ad     00          | 	byte	0
362ae                 | LR__5389
362ae     00          | 	byte	0
362af     00          | 	byte	0
362b0                 | LR__5390
362b0     00          | 	byte	0
362b1     00          | 	byte	0
362b2                 | LR__5391
362b2     00          | 	byte	0
362b3     00          | 	byte	0
362b4                 | LR__5392
362b4     2A 3A 3C 3E 
362b8     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
362bc     00          | 	byte	0
362bd                 | LR__5393
362bd     2B 2C 3B 3D 
362c1     5B 5D       | 	byte	"+,;=[]"
362c3     00          | 	byte	0
362c4                 | LR__5394
362c4     46 41 54 33 
362c8     32 20 20 20 | 	byte	"FAT32   "
362cc     00          | 	byte	0
362cd                 | LR__5395
362cd     54 5A       | 	byte	"TZ"
362cf     00          | 	byte	0
362d0                 | LR__5396
362d0     00          | 	byte	0
362d1     00          | 	byte	0
362d2                 | LR__5397
362d2                 | 	byte	
362d2     00          | 	byte	0
362d3                 | LR__5398
362d3                 | 	byte	
362d3     00          | 	byte	0
362d4                 | LR__5399
362d4                 | 	byte	
362d4     00          | 	byte	0
362d5                 | LR__5400
362d5                 | 	byte	
362d5     00          | 	byte	0
362d6                 | LR__5401
362d6     22          | 	byte	34
362d7     00          | 	byte	0
362d8                 | LR__5402
362d8     22          | 	byte	34
362d9     00          | 	byte	0
362da                 | LR__5403
362da     3A          | 	byte	":"
362db     00          | 	byte	0
362dc                 | LR__5404
362dc                 | 	byte	
362dc     00          | 	byte	0
362dd                 | LR__5405
362dd                 | 	byte	
362dd     00          | 	byte	0
362de                 | LR__5406
362de                 | 	byte	
362de     00          | 	byte	0
362df                 | LR__5407
362df                 | 	byte	
362df     00          | 	byte	0
362e0                 | LR__5408
362e0                 | 	byte	
362e0     00          | 	byte	0
362e1                 | LR__5409
362e1                 | 	byte	
362e1     00          | 	byte	0
362e2                 | LR__5410
362e2                 | 	byte	
362e2     00          | 	byte	0
362e3                 | LR__5411
362e3     30          | 	byte	"0"
362e4     00          | 	byte	0
362e5                 | LR__5412
362e5     22          | 	byte	34
362e6     00          | 	byte	0
362e7                 | LR__5413
362e7     22          | 	byte	34
362e8     00          | 	byte	0
362e9                 | LR__5414
362e9     22          | 	byte	34
362ea     00          | 	byte	0
362eb                 | LR__5415
362eb     22          | 	byte	34
362ec     00          | 	byte	0
362ed                 | LR__5416
362ed     22          | 	byte	34
362ee     00          | 	byte	0
362ef                 | LR__5417
362ef     3E          | 	byte	">"
362f0     00          | 	byte	0
362f1                 | LR__5418
362f1     3C          | 	byte	"<"
362f2     00          | 	byte	0
362f3                 | LR__5419
362f3     2B          | 	byte	"+"
362f4     00          | 	byte	0
362f5                 | LR__5420
362f5     2D          | 	byte	"-"
362f6     00          | 	byte	0
362f7                 | LR__5421
362f7     2A          | 	byte	"*"
362f8     00          | 	byte	0
362f9                 | LR__5422
362f9     2F          | 	byte	"/"
362fa     00          | 	byte	0
362fb                 | LR__5423
362fb     5E          | 	byte	"^"
362fc     00          | 	byte	0
362fd                 | LR__5424
362fd     3D          | 	byte	"="
362fe     00          | 	byte	0
362ff                 | LR__5425
362ff     2B          | 	byte	"+"
36300     00          | 	byte	0
36301                 | LR__5426
36301     2B          | 	byte	"+"
36302     00          | 	byte	0
36303                 | LR__5427
36303     2D          | 	byte	"-"
36304     00          | 	byte	0
36305                 | LR__5428
36305     2D          | 	byte	"-"
36306     00          | 	byte	0
36307                 | LR__5429
36307     3C          | 	byte	"<"
36308     00          | 	byte	0
36309                 | LR__5430
36309     3E          | 	byte	">"
3630a     00          | 	byte	0
3630b                 | LR__5431
3630b     22          | 	byte	34
3630c     00          | 	byte	0
3630d                 | LR__5432
3630d     22          | 	byte	34
3630e     00          | 	byte	0
3630f                 | LR__5433
3630f     65 6C 73 65 | 	byte	"else"
36313     00          | 	byte	0
36314                 | LR__5434
36314     74 68 65 6E | 	byte	"then"
36318     00          | 	byte	0
36319                 | LR__5435
36319     3F          | 	byte	"?"
3631a     00          | 	byte	0
3631b                 | LR__5436
3631b     3F          | 	byte	"?"
3631c     00          | 	byte	0
3631d                 | LR__5437
3631d     2E          | 	byte	"."
3631e     00          | 	byte	0
3631f                 | LR__5438
3631f     6D 6F 75 73 
36323     65          | 	byte	"mouse"
36324     00          | 	byte	0
36325                 | LR__5439
36325     63 75 72 73 
36329     6F 72       | 	byte	"cursor"
3632b     00          | 	byte	0
3632c                 | LR__5440
3632c     63 6C 69 63 
36330     6B          | 	byte	"click"
36331     00          | 	byte	0
36332                 | LR__5441
36332     6F 6E       | 	byte	"on"
36334     00          | 	byte	0
36335                 | LR__5442
36335     31          | 	byte	"1"
36336     00          | 	byte	0
36337                 | LR__5443
36337     6F 66 66    | 	byte	"off"
3633a     00          | 	byte	0
3633b                 | LR__5444
3633b     30          | 	byte	"0"
3633c     00          | 	byte	0
3633d                 | LR__5445
3633d     6D 6F 64 65 | 	byte	"mode"
36341     00          | 	byte	0
36342                 | LR__5446
36342     6D 2E       | 	byte	"m."
36344     00          | 	byte	0
36345                 | LR__5447
36345     61 74 61 72 
36349     69          | 	byte	"atari"
3634a     00          | 	byte	0
3634b                 | LR__5448
3634b     30          | 	byte	"0"
3634c     00          | 	byte	0
3634d                 | LR__5449
3634d     70 63 5F 61 
36351     6D 62 65 72 | 	byte	"pc_amber"
36355     00          | 	byte	0
36356                 | LR__5450
36356     31          | 	byte	"1"
36357     00          | 	byte	0
36358                 | LR__5451
36358     70 63 5F 67 
3635c     72 65 65 6E | 	byte	"pc_green"
36360     00          | 	byte	0
36361                 | LR__5452
36361     32          | 	byte	"2"
36362     00          | 	byte	0
36363                 | LR__5453
36363     70 63 5F 77 
36367     68 69 74 65 | 	byte	"pc_white"
3636b     00          | 	byte	0
3636c                 | LR__5454
3636c     33          | 	byte	"3"
3636d     00          | 	byte	0
3636e                 | LR__5455
3636e     73 74       | 	byte	"st"
36370     00          | 	byte	0
36371                 | LR__5456
36371     34          | 	byte	"4"
36372     00          | 	byte	0
36373                 | LR__5457
36373                 | 	byte	
36373     00          | 	byte	0
36374                 | LR__5458
36374     6C 6F 61 64 | 	byte	"load"
36378     00          | 	byte	0
36379                 | LR__5459
36379     73 61 76 65 | 	byte	"save"
3637d     00          | 	byte	0
3637e                 | LR__5460
3637e     62 72 75 6E | 	byte	"brun"
36382     00          | 	byte	0
36383                 | LR__5461
36383     72 75 6E    | 	byte	"run"
36386     00          | 	byte	0
36387                 | LR__5462
36387     6C 6F 2E    | 	byte	"lo."
3638a     00          | 	byte	0
3638b                 | LR__5463
3638b     73 2E       | 	byte	"s."
3638d     00          | 	byte	0
3638e                 | LR__5464
3638e     62 72 2E    | 	byte	"br."
36391     00          | 	byte	0
36392                 | LR__5465
36392     65 6E 74 65 
36396     72          | 	byte	"enter"
36397     00          | 	byte	0
36398                 | LR__5466
36398     65 2E       | 	byte	"e."
3639a     00          | 	byte	0
3639b                 | LR__5467
3639b     24          | 	byte	"$"
3639c     00          | 	byte	0
3639d                 | LR__5468
3639d     64 65 6C 65 
363a1     74 65       | 	byte	"delete"
363a3     00          | 	byte	0
363a4                 | LR__5469
363a4     6D 6B 64 69 
363a8     72          | 	byte	"mkdir"
363a9     00          | 	byte	0
363aa                 | LR__5470
363aa     24          | 	byte	"$"
363ab     00          | 	byte	0
363ac                 | LR__5471
363ac     63 6F 70 79 | 	byte	"copy"
363b0     00          | 	byte	0
363b1                 | LR__5472
363b1     24          | 	byte	"$"
363b2     00          | 	byte	0
363b3                 | LR__5473
363b3     63 6F 70 79 | 	byte	"copy"
363b7     00          | 	byte	0
363b8                 | LR__5474
363b8     24          | 	byte	"$"
363b9     00          | 	byte	0
363ba                 | LR__5475
363ba     63 64       | 	byte	"cd"
363bc     00          | 	byte	0
363bd                 | LR__5476
363bd     63 64 2E    | 	byte	"cd."
363c0     00          | 	byte	0
363c1                 | LR__5477
363c1     2E          | 	byte	"."
363c2     00          | 	byte	0
363c3                 | LR__5478
363c3     2E 2E       | 	byte	".."
363c5     00          | 	byte	0
363c6                 | LR__5479
363c6     63 64       | 	byte	"cd"
363c8     00          | 	byte	0
363c9                 | LR__5480
363c9     2F          | 	byte	"/"
363ca     00          | 	byte	0
363cb                 | LR__5481
363cb                 | 	byte	
363cb     00          | 	byte	0
363cc                 | LR__5482
363cc                 | 	byte	
363cc     00          | 	byte	0
363cd                 | LR__5483
363cd                 | 	byte	
363cd     00          | 	byte	0
363ce                 | LR__5484
363ce                 | 	byte	
363ce     00          | 	byte	0
363cf                 | LR__5485
363cf                 | 	byte	
363cf     00          | 	byte	0
363d0                 | LR__5486
363d0     52 65 61 64 
363d4     79          | 	byte	"Ready"
363d5     00          | 	byte	0
363d6                 | LR__5487
363d6     2B          | 	byte	"+"
363d7     00          | 	byte	0
363d8                 | LR__5488
363d8     2D          | 	byte	"-"
363d9     00          | 	byte	0
363da                 | LR__5489
363da     6F 72       | 	byte	"or"
363dc     00          | 	byte	0
363dd                 | LR__5490
363dd     78 6F 72    | 	byte	"xor"
363e0     00          | 	byte	0
363e1                 | LR__5491
363e1     2A          | 	byte	"*"
363e2     00          | 	byte	0
363e3                 | LR__5492
363e3     2F          | 	byte	"/"
363e4     00          | 	byte	0
363e5                 | LR__5493
363e5     61 6E 64    | 	byte	"and"
363e8     00          | 	byte	0
363e9                 | LR__5494
363e9     64 69 76    | 	byte	"div"
363ec     00          | 	byte	0
363ed                 | LR__5495
363ed     6D 6F 64    | 	byte	"mod"
363f0     00          | 	byte	0
363f1                 | LR__5496
363f1     73 68 6C    | 	byte	"shl"
363f4     00          | 	byte	0
363f5                 | LR__5497
363f5     73 68 72    | 	byte	"shr"
363f8     00          | 	byte	0
363f9                 | LR__5498
363f9     5E          | 	byte	"^"
363fa     00          | 	byte	0
363fb                 | LR__5499
363fb     6E 6F 74    | 	byte	"not"
363fe     00          | 	byte	0
363ff                 | LR__5500
363ff     40          | 	byte	"@"
36400     00          | 	byte	0
36401                 | LR__5501
36401     3D          | 	byte	"="
36402     00          | 	byte	0
36403                 | LR__5502
36403     3E 3D       | 	byte	">="
36405     00          | 	byte	0
36406                 | LR__5503
36406     3C 3D       | 	byte	"<="
36408     00          | 	byte	0
36409                 | LR__5504
36409     3C          | 	byte	"<"
3640a     00          | 	byte	0
3640b                 | LR__5505
3640b     3E          | 	byte	">"
3640c     00          | 	byte	0
3640d                 | LR__5506
3640d     3C 3E       | 	byte	"<>"
3640f     00          | 	byte	0
36410                 | LR__5507
36410     2B 2B       | 	byte	"++"
36412     00          | 	byte	0
36413                 | LR__5508
36413     2D 2D       | 	byte	"--"
36415     00          | 	byte	0
36416                 | LR__5509
36416     23          | 	byte	"#"
36417     00          | 	byte	0
36418                 | LR__5510
36418     30          | 	byte	"0"
36419     00          | 	byte	0
3641a                 | LR__5511
3641a     39          | 	byte	"9"
3641b     00          | 	byte	0
3641c                 | LR__5512
3641c     23 72 65 61 
36420     64          | 	byte	"#read"
36421     00          | 	byte	0
36422                 | LR__5513
36422     23 77 72 69 
36426     74 65       | 	byte	"#write"
36428     00          | 	byte	0
36429                 | LR__5514
36429     23 61 70 70 
3642d     65 6E 64    | 	byte	"#append"
36430     00          | 	byte	0
36431                 | LR__5515
36431     23          | 	byte	"#"
36432     00          | 	byte	0
36433                 | LR__5516
36433     23          | 	byte	"#"
36434     00          | 	byte	0
36435                 | LR__5517
36435     2D          | 	byte	"-"
36436     00          | 	byte	0
36437                 | LR__5518
36437     30          | 	byte	"0"
36438     00          | 	byte	0
36439                 | LR__5519
36439     63          | 	byte	"c"
3643a     00          | 	byte	0
3643b                 | LR__5520
3643b     63 23       | 	byte	"c#"
3643d     00          | 	byte	0
3643e                 | LR__5521
3643e     64          | 	byte	"d"
3643f     00          | 	byte	0
36440                 | LR__5522
36440     64 23       | 	byte	"d#"
36442     00          | 	byte	0
36443                 | LR__5523
36443     65          | 	byte	"e"
36444     00          | 	byte	0
36445                 | LR__5524
36445     66          | 	byte	"f"
36446     00          | 	byte	0
36447                 | LR__5525
36447     66 23       | 	byte	"f#"
36449     00          | 	byte	0
3644a                 | LR__5526
3644a     67          | 	byte	"g"
3644b     00          | 	byte	0
3644c                 | LR__5527
3644c     67 23       | 	byte	"g#"
3644e     00          | 	byte	0
3644f                 | LR__5528
3644f     61          | 	byte	"a"
36450     00          | 	byte	0
36451                 | LR__5529
36451     61 23       | 	byte	"a#"
36453     00          | 	byte	0
36454                 | LR__5530
36454     68          | 	byte	"h"
36455     00          | 	byte	0
36456                 | LR__5531
36456     62          | 	byte	"b"
36457     00          | 	byte	0
36458                 | LR__5532
36458     2B          | 	byte	"+"
36459     00          | 	byte	0
3645a                 | LR__5533
3645a     2D          | 	byte	"-"
3645b     00          | 	byte	0
3645c                 | LR__5534
3645c     3D          | 	byte	"="
3645d     00          | 	byte	0
3645e                 | LR__5535
3645e     2C          | 	byte	","
3645f     00          | 	byte	0
36460                 | LR__5536
36460     2A          | 	byte	"*"
36461     00          | 	byte	0
36462                 | LR__5537
36462     2F          | 	byte	"/"
36463     00          | 	byte	0
36464                 | LR__5538
36464     3B          | 	byte	";"
36465     00          | 	byte	0
36466                 | LR__5539
36466     22          | 	byte	34
36467     00          | 	byte	0
36468                 | LR__5540
36468     5E          | 	byte	"^"
36469     00          | 	byte	0
3646a                 | LR__5541
3646a     29          | 	byte	")"
3646b     00          | 	byte	0
3646c                 | LR__5542
3646c     28          | 	byte	"("
3646d     00          | 	byte	0
3646e                 | LR__5543
3646e     3A          | 	byte	":"
3646f     00          | 	byte	0
36470                 | LR__5544
36470     20          | 	byte	" "
36471     00          | 	byte	0
36472                 | LR__5545
36472     3E          | 	byte	">"
36473     00          | 	byte	0
36474                 | LR__5546
36474     3C          | 	byte	"<"
36475     00          | 	byte	0
36476                 | LR__5547
36476     3D          | 	byte	"="
36477     00          | 	byte	0
36478                 | LR__5548
36478     62 65 65 70 | 	byte	"beep"
3647c     00          | 	byte	0
3647d                 | LR__5549
3647d     62 2E       | 	byte	"b."
3647f     00          | 	byte	0
36480                 | LR__5550
36480     62 6C 69 74 | 	byte	"blit"
36484     00          | 	byte	0
36485                 | LR__5551
36485     62 6F 78    | 	byte	"box"
36488     00          | 	byte	0
36489                 | LR__5552
36489     62 72 75 6E | 	byte	"brun"
3648d     00          | 	byte	0
3648e                 | LR__5553
3648e     62 72 2E    | 	byte	"br."
36491     00          | 	byte	0
36492                 | LR__5554
36492     63 64       | 	byte	"cd"
36494     00          | 	byte	0
36495                 | LR__5555
36495     63 68 61 6E 
36499     67 65 66 72 
3649d     65 71       | 	byte	"changefreq"
3649f     00          | 	byte	0
364a0                 | LR__5556
364a0     63 66 2E    | 	byte	"cf."
364a3     00          | 	byte	0
364a4                 | LR__5557
364a4     63 68 61 6E 
364a8     67 65 70 61 
364ac     6E          | 	byte	"changepan"
364ad     00          | 	byte	0
364ae                 | LR__5558
364ae     63 70 2E    | 	byte	"cp."
364b1     00          | 	byte	0
364b2                 | LR__5559
364b2     63 68 61 6E 
364b6     67 65 76 6F 
364ba     6C          | 	byte	"changevol"
364bb     00          | 	byte	0
364bc                 | LR__5560
364bc     63 76 2E    | 	byte	"cv."
364bf     00          | 	byte	0
364c0                 | LR__5561
364c0     63 68 61 6E 
364c4     67 65 77 61 
364c8     76 65       | 	byte	"changewave"
364ca     00          | 	byte	0
364cb                 | LR__5562
364cb     63 77 2E    | 	byte	"cw."
364ce     00          | 	byte	0
364cf                 | LR__5563
364cf     63 69 72 63 
364d3     6C 65       | 	byte	"circle"
364d5     00          | 	byte	0
364d6                 | LR__5564
364d6     63 69 2E    | 	byte	"ci."
364d9     00          | 	byte	0
364da                 | LR__5565
364da     63 6C 69 63 
364de     6B          | 	byte	"click"
364df     00          | 	byte	0
364e0                 | LR__5566
364e0     63 6C 6F 73 
364e4     65          | 	byte	"close"
364e5     00          | 	byte	0
364e6                 | LR__5567
364e6     63 6C 73    | 	byte	"cls"
364e9     00          | 	byte	0
364ea                 | LR__5568
364ea     63 6F 67 69 
364ee     6E 69 74    | 	byte	"coginit"
364f1     00          | 	byte	0
364f2                 | LR__5569
364f2     63 6F 6C 6F 
364f6     72          | 	byte	"color"
364f7     00          | 	byte	0
364f8                 | LR__5570
364f8     63 2E       | 	byte	"c."
364fa     00          | 	byte	0
364fb                 | LR__5571
364fb     63 6F 70 79 | 	byte	"copy"
364ff     00          | 	byte	0
36500                 | LR__5572
36500     63 75 72 73 
36504     6F 72       | 	byte	"cursor"
36506     00          | 	byte	0
36507                 | LR__5573
36507     64 61 74 61 | 	byte	"data"
3650b     00          | 	byte	0
3650c                 | LR__5574
3650c     64 65 66 73 
36510     6E 64       | 	byte	"defsnd"
36512     00          | 	byte	0
36513                 | LR__5575
36513     64 65 66 65 
36517     6E 76       | 	byte	"defenv"
36519     00          | 	byte	0
3651a                 | LR__5576
3651a     64 65 66 73 
3651e     70 72 69 74 
36522     65          | 	byte	"defsprite"
36523     00          | 	byte	0
36524                 | LR__5577
36524     64 73 2E    | 	byte	"ds."
36527     00          | 	byte	0
36528                 | LR__5578
36528     64 65 67    | 	byte	"deg"
3652b     00          | 	byte	0
3652c                 | LR__5579
3652c     64 65 6C 65 
36530     74 65       | 	byte	"delete"
36532     00          | 	byte	0
36533                 | LR__5580
36533     64 69 6D    | 	byte	"dim"
36536     00          | 	byte	0
36537                 | LR__5581
36537     64 69 72    | 	byte	"dir"
3653a     00          | 	byte	0
3653b                 | LR__5582
3653b     64 70 6F 6B 
3653f     65          | 	byte	"dpoke"
36540     00          | 	byte	0
36541                 | LR__5583
36541     64 72 61 77 | 	byte	"draw"
36545     00          | 	byte	0
36546                 | LR__5584
36546     64 72 61 77 
3654a     74 6F       | 	byte	"drawto"
3654c     00          | 	byte	0
3654d                 | LR__5585
3654d     64 72 2E    | 	byte	"dr."
36550     00          | 	byte	0
36551                 | LR__5586
36551     65 6C 73 65 | 	byte	"else"
36555     00          | 	byte	0
36556                 | LR__5587
36556     65 6E 64    | 	byte	"end"
36559     00          | 	byte	0
3655a                 | LR__5588
3655a     65 6E 74 65 
3655e     72          | 	byte	"enter"
3655f     00          | 	byte	0
36560                 | LR__5589
36560     65 2E       | 	byte	"e."
36562     00          | 	byte	0
36563                 | LR__5590
36563     66 63 69 72 
36567     63 6C 65    | 	byte	"fcircle"
3656a     00          | 	byte	0
3656b                 | LR__5591
3656b     66 63 2E    | 	byte	"fc."
3656e     00          | 	byte	0
3656f                 | LR__5592
3656f     66 69 6C 6C | 	byte	"fill"
36573     00          | 	byte	0
36574                 | LR__5593
36574     66 69 2E    | 	byte	"fi."
36577     00          | 	byte	0
36578                 | LR__5594
36578     66 6F 6E 74 | 	byte	"font"
3657c     00          | 	byte	0
3657d                 | LR__5595
3657d     66 6F 72    | 	byte	"for"
36580     00          | 	byte	0
36581                 | LR__5596
36581     66 2E       | 	byte	"f."
36583     00          | 	byte	0
36584                 | LR__5597
36584     66 72 61 6D 
36588     65          | 	byte	"frame"
36589     00          | 	byte	0
3658a                 | LR__5598
3658a     66 72 2E    | 	byte	"fr."
3658d     00          | 	byte	0
3658e                 | LR__5599
3658e     67 65 74    | 	byte	"get"
36591     00          | 	byte	0
36592                 | LR__5600
36592     67 6F 73 75 
36596     62          | 	byte	"gosub"
36597     00          | 	byte	0
36598                 | LR__5601
36598     67 6F 74 6F | 	byte	"goto"
3659c     00          | 	byte	0
3659d                 | LR__5602
3659d     67 2E       | 	byte	"g."
3659f     00          | 	byte	0
365a0                 | LR__5603
365a0     69 66       | 	byte	"if"
365a2     00          | 	byte	0
365a3                 | LR__5604
365a3     69 6E 6B    | 	byte	"ink"
365a6     00          | 	byte	0
365a7                 | LR__5605
365a7     69 2E       | 	byte	"i."
365a9     00          | 	byte	0
365aa                 | LR__5606
365aa     69 6E 70 75 
365ae     74          | 	byte	"input"
365af     00          | 	byte	0
365b0                 | LR__5607
365b0     6C 69 73 74 | 	byte	"list"
365b4     00          | 	byte	0
365b5                 | LR__5608
365b5     6C 2E       | 	byte	"l."
365b7     00          | 	byte	0
365b8                 | LR__5609
365b8     6C 6F 61 64 | 	byte	"load"
365bc     00          | 	byte	0
365bd                 | LR__5610
365bd     6C 6F 2E    | 	byte	"lo."
365c0     00          | 	byte	0
365c1                 | LR__5611
365c1     6C 70 6F 6B 
365c5     65          | 	byte	"lpoke"
365c6     00          | 	byte	0
365c7                 | LR__5612
365c7     6D 6B 64 69 
365cb     72          | 	byte	"mkdir"
365cc     00          | 	byte	0
365cd                 | LR__5613
365cd     6D 6F 64 65 | 	byte	"mode"
365d1     00          | 	byte	0
365d2                 | LR__5614
365d2     6D 2E       | 	byte	"m."
365d4     00          | 	byte	0
365d5                 | LR__5615
365d5     6D 6F 75 73 
365d9     65          | 	byte	"mouse"
365da     00          | 	byte	0
365db                 | LR__5616
365db     6E 65 77    | 	byte	"new"
365de     00          | 	byte	0
365df                 | LR__5617
365df     6E 65 78 74 | 	byte	"next"
365e3     00          | 	byte	0
365e4                 | LR__5618
365e4     6E 2E       | 	byte	"n."
365e6     00          | 	byte	0
365e7                 | LR__5619
365e7     6F 6E       | 	byte	"on"
365e9     00          | 	byte	0
365ea                 | LR__5620
365ea     6F 70 65 6E | 	byte	"open"
365ee     00          | 	byte	0
365ef                 | LR__5621
365ef     70 61 70 65 
365f3     72          | 	byte	"paper"
365f4     00          | 	byte	0
365f5                 | LR__5622
365f5     70 61 2E    | 	byte	"pa."
365f8     00          | 	byte	0
365f9                 | LR__5623
365f9     70 69 6E 66 
365fd     6C 6F 61 74 | 	byte	"pinfloat"
36601     00          | 	byte	0
36602                 | LR__5624
36602     70 69 6E 68 
36606     69          | 	byte	"pinhi"
36607     00          | 	byte	0
36608                 | LR__5625
36608     70 69 6E 6C 
3660c     6F          | 	byte	"pinlo"
3660d     00          | 	byte	0
3660e                 | LR__5626
3660e     70 69 6E 73 
36612     74 61 72 74 | 	byte	"pinstart"
36616     00          | 	byte	0
36617                 | LR__5627
36617     70 69 6E 74 
3661b     6F 67 67 6C 
3661f     65          | 	byte	"pintoggle"
36620     00          | 	byte	0
36621                 | LR__5628
36621     70 69 6E 77 
36625     72 69 74 65 | 	byte	"pinwrite"
36629     00          | 	byte	0
3662a                 | LR__5629
3662a     70 6C 61 79 | 	byte	"play"
3662e     00          | 	byte	0
3662f                 | LR__5630
3662f     70 2E       | 	byte	"p."
36631     00          | 	byte	0
36632                 | LR__5631
36632     70 6C 61 79 
36636     73 61 6D 70 
3663a     6C 65       | 	byte	"playsample"
3663c     00          | 	byte	0
3663d                 | LR__5632
3663d     70 6C 6F 74 | 	byte	"plot"
36641     00          | 	byte	0
36642                 | LR__5633
36642     70 6C 2E    | 	byte	"pl."
36645     00          | 	byte	0
36646                 | LR__5634
36646     70 6F 6B 65 | 	byte	"poke"
3664a     00          | 	byte	0
3664b                 | LR__5635
3664b     70 6F 70    | 	byte	"pop"
3664e     00          | 	byte	0
3664f                 | LR__5636
3664f     70 6F 73 69 
36653     74 69 6F 6E | 	byte	"position"
36657     00          | 	byte	0
36658                 | LR__5637
36658     70 6F 73 2E | 	byte	"pos."
3665c     00          | 	byte	0
3665d                 | LR__5638
3665d     70 72 69 6E 
36661     74          | 	byte	"print"
36662     00          | 	byte	0
36663                 | LR__5639
36663     3F          | 	byte	"?"
36664     00          | 	byte	0
36665                 | LR__5640
36665     70 75 74    | 	byte	"put"
36668     00          | 	byte	0
36669                 | LR__5641
36669     72 61 64    | 	byte	"rad"
3666c     00          | 	byte	0
3666d                 | LR__5642
3666d     72 65 61 64 | 	byte	"read"
36671     00          | 	byte	0
36672                 | LR__5643
36672     72 65 6C 65 
36676     61 73 65    | 	byte	"release"
36679     00          | 	byte	0
3667a                 | LR__5644
3667a     72 65 6D    | 	byte	"rem"
3667d     00          | 	byte	0
3667e                 | LR__5645
3667e     27          | 	byte	"'"
3667f     00          | 	byte	0
36680                 | LR__5646
36680     72 65 73 74 
36684     6F 72 65    | 	byte	"restore"
36687     00          | 	byte	0
36688                 | LR__5647
36688     72 65 74 75 
3668c     72 6E       | 	byte	"return"
3668e     00          | 	byte	0
3668f                 | LR__5648
3668f     72 75 6E    | 	byte	"run"
36692     00          | 	byte	0
36693                 | LR__5649
36693     73 61 76 65 | 	byte	"save"
36697     00          | 	byte	0
36698                 | LR__5650
36698     73 2E       | 	byte	"s."
3669a     00          | 	byte	0
3669b                 | LR__5651
3669b     73 65 74 64 
3669f     65 6C 61 79 | 	byte	"setdelay"
366a3     00          | 	byte	0
366a4                 | LR__5652
366a4     73 64 2E    | 	byte	"sd."
366a7     00          | 	byte	0
366a8                 | LR__5653
366a8     73 65 74 65 
366ac     6E 76       | 	byte	"setenv"
366ae     00          | 	byte	0
366af                 | LR__5654
366af     73 65 2E    | 	byte	"se."
366b2     00          | 	byte	0
366b3                 | LR__5655
366b3     73 65 74 6C 
366b7     65 6E       | 	byte	"setlen"
366b9     00          | 	byte	0
366ba                 | LR__5656
366ba     73 6C 2E    | 	byte	"sl."
366bd     00          | 	byte	0
366be                 | LR__5657
366be     73 65 74 70 
366c2     61 6E       | 	byte	"setpan"
366c4     00          | 	byte	0
366c5                 | LR__5658
366c5     73 70 2E    | 	byte	"sp."
366c8     00          | 	byte	0
366c9                 | LR__5659
366c9     73 65 74 73 
366cd     75 73 74 61 
366d1     69 6E       | 	byte	"setsustain"
366d3     00          | 	byte	0
366d4                 | LR__5660
366d4     73 73 2E    | 	byte	"ss."
366d7     00          | 	byte	0
366d8                 | LR__5661
366d8     73 65 74 76 
366dc     6F 6C       | 	byte	"setvol"
366de     00          | 	byte	0
366df                 | LR__5662
366df     73 76 2E    | 	byte	"sv."
366e2     00          | 	byte	0
366e3                 | LR__5663
366e3     73 65 74 77 
366e7     61 76 65    | 	byte	"setwave"
366ea     00          | 	byte	0
366eb                 | LR__5664
366eb     73 77 2E    | 	byte	"sw."
366ee     00          | 	byte	0
366ef                 | LR__5665
366ef     73 65 74 77 
366f3     61 76       | 	byte	"setwav"
366f5     00          | 	byte	0
366f6                 | LR__5666
366f6     73 68 75 74 
366fa     75 70       | 	byte	"shutup"
366fc     00          | 	byte	0
366fd                 | LR__5667
366fd     73 68 2E    | 	byte	"sh."
36700     00          | 	byte	0
36701                 | LR__5668
36701     73 6F 75 6E 
36705     64          | 	byte	"sound"
36706     00          | 	byte	0
36707                 | LR__5669
36707     73 6F 2E    | 	byte	"so."
3670a     00          | 	byte	0
3670b                 | LR__5670
3670b     73 70 72 69 
3670f     74 65       | 	byte	"sprite"
36711     00          | 	byte	0
36712                 | LR__5671
36712     73 70 72 2E | 	byte	"spr."
36716     00          | 	byte	0
36717                 | LR__5672
36717     74 68 65 6E | 	byte	"then"
3671b     00          | 	byte	0
3671c                 | LR__5673
3671c     77 61 69 74 
36720     6D 73       | 	byte	"waitms"
36722     00          | 	byte	0
36723                 | LR__5674
36723     77 2E       | 	byte	"w."
36725     00          | 	byte	0
36726                 | LR__5675
36726     77 61 69 74 
3672a     63 6C 6F 63 
3672e     6B          | 	byte	"waitclock"
3672f     00          | 	byte	0
36730                 | LR__5676
36730     77 63 2E    | 	byte	"wc."
36733     00          | 	byte	0
36734                 | LR__5677
36734     77 61 69 74 
36738     76 62 6C    | 	byte	"waitvbl"
3673b     00          | 	byte	0
3673c                 | LR__5678
3673c     77 76 2E    | 	byte	"wv."
3673f     00          | 	byte	0
36740                 | LR__5679
36740     77 72 70 69 
36744     6E          | 	byte	"wrpin"
36745     00          | 	byte	0
36746                 | LR__5680
36746     77 78 70 69 
3674a     6E          | 	byte	"wxpin"
3674b     00          | 	byte	0
3674c                 | LR__5681
3674c     77 79 70 69 
36750     6E          | 	byte	"wypin"
36751     00          | 	byte	0
36752                 | LR__5682
36752     61 62 73    | 	byte	"abs"
36755     00          | 	byte	0
36756                 | LR__5683
36756     61 63 6F 73 | 	byte	"acos"
3675a     00          | 	byte	0
3675b                 | LR__5684
3675b     61 64 72    | 	byte	"adr"
3675e     00          | 	byte	0
3675f                 | LR__5685
3675f     61 64 64 72 | 	byte	"addr"
36763     00          | 	byte	0
36764                 | LR__5686
36764     61 73 63    | 	byte	"asc"
36767     00          | 	byte	0
36768                 | LR__5687
36768     61 73 69 6E | 	byte	"asin"
3676c     00          | 	byte	0
3676d                 | LR__5688
3676d     61 74 6E    | 	byte	"atn"
36770     00          | 	byte	0
36771                 | LR__5689
36771     62 69 6E 24 | 	byte	"bin$"
36775     00          | 	byte	0
36776                 | LR__5690
36776     63 68 72 24 | 	byte	"chr$"
3677a     00          | 	byte	0
3677b                 | LR__5691
3677b     63 6F 73    | 	byte	"cos"
3677e     00          | 	byte	0
3677f                 | LR__5692
3677f     64 70 65 65 
36783     6B          | 	byte	"dpeek"
36784     00          | 	byte	0
36785                 | LR__5693
36785     66 72 61 6D 
36789     65 62 75 66 | 	byte	"framebuf"
3678d     00          | 	byte	0
3678e                 | LR__5694
3678e     66 62 2E    | 	byte	"fb."
36791     00          | 	byte	0
36792                 | LR__5695
36792     66 72 65    | 	byte	"fre"
36795     00          | 	byte	0
36796                 | LR__5696
36796     67 65 74 70 
3679a     69 78 65 6C | 	byte	"getpixel"
3679e     00          | 	byte	0
3679f                 | LR__5697
3679f     67 65 2E    | 	byte	"ge."
367a2     00          | 	byte	0
367a3                 | LR__5698
367a3     67 65 74 65 
367a7     6E 76 73 75 
367ab     73 74 61 69 
367af     6E          | 	byte	"getenvsustain"
367b0     00          | 	byte	0
367b1                 | LR__5699
367b1     67 65 74 6E 
367b5     6F 74 65 76 
367b9     61 6C 75 65 | 	byte	"getnotevalue"
367bd     00          | 	byte	0
367be                 | LR__5700
367be     67 65 74 74 
367c2     69 6D 65    | 	byte	"gettime"
367c5     00          | 	byte	0
367c6                 | LR__5701
367c6     68 65 78 24 | 	byte	"hex$"
367ca     00          | 	byte	0
367cb                 | LR__5702
367cb     69 6E 6B 65 
367cf     79 24       | 	byte	"inkey$"
367d1     00          | 	byte	0
367d2                 | LR__5703
367d2     69 6E 74    | 	byte	"int"
367d5     00          | 	byte	0
367d6                 | LR__5704
367d6     6C 65 66 74 
367da     24          | 	byte	"left$"
367db     00          | 	byte	0
367dc                 | LR__5705
367dc     6C 65 6E    | 	byte	"len"
367df     00          | 	byte	0
367e0                 | LR__5706
367e0     6C 6F 67    | 	byte	"log"
367e3     00          | 	byte	0
367e4                 | LR__5707
367e4     6C 70 65 65 
367e8     6B          | 	byte	"lpeek"
367e9     00          | 	byte	0
367ea                 | LR__5708
367ea     6D 69 64 24 | 	byte	"mid$"
367ee     00          | 	byte	0
367ef                 | LR__5709
367ef     6D 6F 75 73 
367f3     65 6B       | 	byte	"mousek"
367f5     00          | 	byte	0
367f6                 | LR__5710
367f6     6D 6F 75 73 
367fa     65 77       | 	byte	"mousew"
367fc     00          | 	byte	0
367fd                 | LR__5711
367fd     6D 6F 75 73 
36801     65 78       | 	byte	"mousex"
36803     00          | 	byte	0
36804                 | LR__5712
36804     6D 6F 75 73 
36808     65 79       | 	byte	"mousey"
3680a     00          | 	byte	0
3680b                 | LR__5713
3680b     70 61 64 78 | 	byte	"padx"
3680f     00          | 	byte	0
36810                 | LR__5714
36810     70 61 64 79 | 	byte	"pady"
36814     00          | 	byte	0
36815                 | LR__5715
36815     70 61 64 7A | 	byte	"padz"
36819     00          | 	byte	0
3681a                 | LR__5716
3681a     70 61 64 72 
3681e     78          | 	byte	"padrx"
3681f     00          | 	byte	0
36820                 | LR__5717
36820     70 61 64 72 
36824     79          | 	byte	"padry"
36825     00          | 	byte	0
36826                 | LR__5718
36826     70 61 64 72 
3682a     7A          | 	byte	"padrz"
3682b     00          | 	byte	0
3682c                 | LR__5719
3682c     70 61 64 68 | 	byte	"padh"
36830     00          | 	byte	0
36831                 | LR__5720
36831     70 65 65 6B | 	byte	"peek"
36835     00          | 	byte	0
36836                 | LR__5721
36836     70 69 6E 72 
3683a     65 61 64    | 	byte	"pinread"
3683d     00          | 	byte	0
3683e                 | LR__5722
3683e     72 64 70 69 
36842     6E          | 	byte	"rdpin"
36843     00          | 	byte	0
36844                 | LR__5723
36844     72 69 67 68 
36848     74 24       | 	byte	"right$"
3684a     00          | 	byte	0
3684b                 | LR__5724
3684b     72 71 70 69 
3684f     6E          | 	byte	"rqpin"
36850     00          | 	byte	0
36851                 | LR__5725
36851     72 6F 75 6E 
36855     64          | 	byte	"round"
36856     00          | 	byte	0
36857                 | LR__5726
36857     72 6E 64    | 	byte	"rnd"
3685a     00          | 	byte	0
3685b                 | LR__5727
3685b     73 69 6E    | 	byte	"sin"
3685e     00          | 	byte	0
3685f                 | LR__5728
3685f     73 71 72    | 	byte	"sqr"
36862     00          | 	byte	0
36863                 | LR__5729
36863     73 74 69 63 
36867     6B          | 	byte	"stick"
36868     00          | 	byte	0
36869                 | LR__5730
36869     73 74 72 69 
3686d     67          | 	byte	"strig"
3686e     00          | 	byte	0
3686f                 | LR__5731
3686f     73 74 72 24 | 	byte	"str$"
36873     00          | 	byte	0
36874                 | LR__5732
36874     74 61 6E    | 	byte	"tan"
36877     00          | 	byte	0
36878                 | LR__5733
36878     76 61 6C    | 	byte	"val"
3687b     00          | 	byte	0
3687c                 | LR__5734
3687c     76 61 72 70 
36880     74 72       | 	byte	"varptr"
36882     00          | 	byte	0
36883                 | LR__5735
36883     61          | 	byte	"a"
36884     00          | 	byte	0
36885                 | LR__5736
36885     7A          | 	byte	"z"
36886     00          | 	byte	0
36887                 | LR__5737
36887     5F          | 	byte	"_"
36888     00          | 	byte	0
36889                 | LR__5738
36889     61          | 	byte	"a"
3688a     00          | 	byte	0
3688b                 | LR__5739
3688b     7A          | 	byte	"z"
3688c     00          | 	byte	0
3688d                 | LR__5740
3688d     30          | 	byte	"0"
3688e     00          | 	byte	0
3688f                 | LR__5741
3688f     39          | 	byte	"9"
36890     00          | 	byte	0
36891                 | LR__5742
36891     5F          | 	byte	"_"
36892     00          | 	byte	0
36893                 | LR__5743
36893     2E          | 	byte	"."
36894     00          | 	byte	0
36895                 | LR__5744
36895     61          | 	byte	"a"
36896     00          | 	byte	0
36897                 | LR__5745
36897     7A          | 	byte	"z"
36898     00          | 	byte	0
36899                 | LR__5746
36899     30          | 	byte	"0"
3689a     00          | 	byte	0
3689b                 | LR__5747
3689b     39          | 	byte	"9"
3689c     00          | 	byte	0
3689d                 | LR__5748
3689d     5F          | 	byte	"_"
3689e     00          | 	byte	0
3689f                 | LR__5749
3689f     24          | 	byte	"$"
368a0     00          | 	byte	0
368a1                 | LR__5750
368a1     25          | 	byte	"%"
368a2     00          | 	byte	0
368a3                 | LR__5751
368a3     21          | 	byte	"!"
368a4     00          | 	byte	0
368a5                 | LR__5752
368a5     30          | 	byte	"0"
368a6     00          | 	byte	0
368a7                 | LR__5753
368a7     39          | 	byte	"9"
368a8     00          | 	byte	0
368a9                 | LR__5754
368a9     2E          | 	byte	"."
368aa     00          | 	byte	0
368ab                 | LR__5755
368ab     24          | 	byte	"$"
368ac     00          | 	byte	0
368ad                 | LR__5756
368ad     25          | 	byte	"%"
368ae     00          | 	byte	0
368af                 | LR__5757
368af     2D          | 	byte	"-"
368b0     00          | 	byte	0
368b1                 | LR__5758
368b1     2E          | 	byte	"."
368b2     00          | 	byte	0
368b3                 | LR__5759
368b3     24          | 	byte	"$"
368b4     00          | 	byte	0
368b5                 | LR__5760
368b5     25          | 	byte	"%"
368b6     00          | 	byte	0
368b7                 | LR__5761
368b7     30          | 	byte	"0"
368b8     00          | 	byte	0
368b9                 | LR__5762
368b9     39          | 	byte	"9"
368ba     00          | 	byte	0
368bb                 | LR__5763
368bb     5F          | 	byte	"_"
368bc     00          | 	byte	0
368bd                 | LR__5764
368bd     2E          | 	byte	"."
368be     00          | 	byte	0
368bf                 | LR__5765
368bf     45          | 	byte	"E"
368c0     00          | 	byte	0
368c1                 | LR__5766
368c1     65          | 	byte	"e"
368c2     00          | 	byte	0
368c3                 | LR__5767
368c3     2D          | 	byte	"-"
368c4     00          | 	byte	0
368c5                 | LR__5768
368c5     61          | 	byte	"a"
368c6     00          | 	byte	0
368c7                 | LR__5769
368c7     66          | 	byte	"f"
368c8     00          | 	byte	0
368c9                 | LR__5770
368c9     30          | 	byte	"0"
368ca     00          | 	byte	0
368cb                 | LR__5771
368cb     31          | 	byte	"1"
368cc     00          | 	byte	0
368cd                 | LR__5772
368cd     5F          | 	byte	"_"
368ce     00          | 	byte	0
368cf                 | LR__5773
368cf     2D          | 	byte	"-"
368d0     00          | 	byte	0
368d1                 | LR__5774
368d1     65          | 	byte	"e"
368d2     00          | 	byte	0
368d3                 | LR__5775
368d3     2E          | 	byte	"."
368d4     00          | 	byte	0
368d5                 | LR__5776
368d5     45          | 	byte	"E"
368d6     00          | 	byte	0
368d7                 | LR__5777
368d7     65          | 	byte	"e"
368d8     00          | 	byte	0
368d9                 | LR__5778
368d9     30          | 	byte	"0"
368da     00          | 	byte	0
368db                 | LR__5779
368db     39          | 	byte	"9"
368dc     00          | 	byte	0
368dd                 | LR__5780
368dd     24          | 	byte	"$"
368de     00          | 	byte	0
368df                 | LR__5781
368df     25          | 	byte	"%"
368e0     00          | 	byte	0
368e1                 | LR__5782
368e1     2D          | 	byte	"-"
368e2     00          | 	byte	0
368e3                 | LR__5783
368e3     24          | 	byte	"$"
368e4     00          | 	byte	0
368e5                 | LR__5784
368e5     25          | 	byte	"%"
368e6     00          | 	byte	0
368e7                 | LR__5785
368e7     30          | 	byte	"0"
368e8     00          | 	byte	0
368e9                 | LR__5786
368e9     39          | 	byte	"9"
368ea     00          | 	byte	0
368eb                 | LR__5787
368eb     5F          | 	byte	"_"
368ec     00          | 	byte	0
368ed                 | LR__5788
368ed     30          | 	byte	"0"
368ee     00          | 	byte	0
368ef                 | LR__5789
368ef     39          | 	byte	"9"
368f0     00          | 	byte	0
368f1                 | LR__5790
368f1     61          | 	byte	"a"
368f2     00          | 	byte	0
368f3                 | LR__5791
368f3     66          | 	byte	"f"
368f4     00          | 	byte	0
368f5                 | LR__5792
368f5     5F          | 	byte	"_"
368f6     00          | 	byte	0
368f7                 | LR__5793
368f7     30          | 	byte	"0"
368f8     00          | 	byte	0
368f9                 | LR__5794
368f9     31          | 	byte	"1"
368fa     00          | 	byte	0
368fb                 | LR__5795
368fb     5F          | 	byte	"_"
368fc     00          | 	byte	0
368fd                 | LR__5796
368fd     30          | 	byte	"0"
368fe     00          | 	byte	0
368ff                 | LR__5797
368ff     39          | 	byte	"9"
36900     00          | 	byte	0
36901                 | LR__5798
36901     5F          | 	byte	"_"
36902     00          | 	byte	0
36903                 | LR__5799
36903     22          | 	byte	34
36904     00          | 	byte	0
36905                 | LR__5800
36905     22          | 	byte	34
36906     00          | 	byte	0
36907                 | LR__5801
36907     44 69 6D 3A 
3690b     20 61 74 20 
3690f     6C 69 6E 65 
36913     20          | 	byte	"Dim: at line "
36914     00          | 	byte	0
36915                 | LR__5802
36915     3A 20 77 61 
36919     72 6E 69 6E 
3691d     67 3A 20 74 
36921     68 65 20 76 
36925     61 72 69 61 
36929     62 6C 65 20 
3692d     65 78 69 73 
36931     74 65 64 2E | 	byte	": warning: the variable existed."
36935     00          | 	byte	0
36936                 | LR__5803
36936     28          | 	byte	"("
36937     00          | 	byte	0
36938                 | LR__5804
36938     61 73       | 	byte	"as"
3693a     00          | 	byte	0
3693b                 | LR__5805
3693b     61 73       | 	byte	"as"
3693d     00          | 	byte	0
3693e                 | LR__5806
3693e     2C          | 	byte	","
3693f     00          | 	byte	0
36940                 | LR__5807
36940     29          | 	byte	")"
36941     00          | 	byte	0
36942                 | LR__5808
36942     29          | 	byte	")"
36943     00          | 	byte	0
36944                 | LR__5809
36944     61 73       | 	byte	"as"
36946     00          | 	byte	0
36947                 | LR__5810
36947     62 79 74 65 | 	byte	"byte"
3694b     00          | 	byte	0
3694c                 | LR__5811
3694c     75 62 79 74 
36950     65          | 	byte	"ubyte"
36951     00          | 	byte	0
36952                 | LR__5812
36952     73 68 6F 72 
36956     74          | 	byte	"short"
36957     00          | 	byte	0
36958                 | LR__5813
36958     75 73 68 6F 
3695c     72 74       | 	byte	"ushort"
3695e     00          | 	byte	0
3695f                 | LR__5814
3695f     6C 6F 6E 67 | 	byte	"long"
36963     00          | 	byte	0
36964                 | LR__5815
36964     69 6E 74 65 
36968     67 65 72    | 	byte	"integer"
3696b     00          | 	byte	0
3696c                 | LR__5816
3696c     75 6C 6F 6E 
36970     67          | 	byte	"ulong"
36971     00          | 	byte	0
36972                 | LR__5817
36972     69 6E 74 36 
36976     34          | 	byte	"int64"
36977     00          | 	byte	0
36978                 | LR__5818
36978     75 69 6E 74 
3697c     36 34       | 	byte	"uint64"
3697e     00          | 	byte	0
3697f                 | LR__5819
3697f     73 69 6E 67 
36983     6C 65       | 	byte	"single"
36985     00          | 	byte	0
36986                 | LR__5820
36986     64 6F 75 62 
3698a     6C 65       | 	byte	"double"
3698c     00          | 	byte	0
3698d                 | LR__5821
3698d     73 74 72 69 
36991     6E 67       | 	byte	"string"
36993     00          | 	byte	0
36994                 | LR__5822
36994     74 6F       | 	byte	"to"
36996     00          | 	byte	0
36997                 | LR__5823
36997     73 74 65 70 | 	byte	"step"
3699b     00          | 	byte	0
3699c                 | LR__5824
3699c     73 2E       | 	byte	"s."
3699e     00          | 	byte	0
3699f                 | LR__5825
3699f     73 2E       | 	byte	"s."
369a1     00          | 	byte	0
369a2                 | LR__5826
369a2     67 6F 74 6F | 	byte	"goto"
369a6     00          | 	byte	0
369a7                 | LR__5827
369a7     67 6F 73 75 
369ab     62          | 	byte	"gosub"
369ac     00          | 	byte	0
369ad                 | LR__5828
369ad     24          | 	byte	"$"
369ae     00          | 	byte	0
369af                 | LR__5829
369af     26 68       | 	byte	"&h"
369b1     00          | 	byte	0
369b2                 | LR__5830
369b2     25          | 	byte	"%"
369b3     00          | 	byte	0
369b4                 | LR__5831
369b4     26 62       | 	byte	"&b"
369b6     00          | 	byte	0
369b7                 | LR__5832
369b7                 | 	byte	
369b7     00          | 	byte	0
369b8                 | LR__5833
369b8     61 63 6F 73 
369bc     3A 20       | 	byte	"acos: "
369be     00          | 	byte	0
369bf                 | LR__5834
369bf     61 73 63 3A 
369c3     20          | 	byte	"asc: "
369c4     00          | 	byte	0
369c5                 | LR__5835
369c5     61 73 63 3A 
369c9     20          | 	byte	"asc: "
369ca     00          | 	byte	0
369cb                 | LR__5836
369cb     61 73 69 6E 
369cf     3A 20       | 	byte	"asin: "
369d1     00          | 	byte	0
369d2                 | LR__5837
369d2     61 74 6E 3A 
369d6     20          | 	byte	"atn: "
369d7     00          | 	byte	0
369d8                 | LR__5838
369d8     62 6C 69 74 
369dc     3A 20       | 	byte	"blit: "
369de     00          | 	byte	0
369df                 | LR__5839
369df     62 69 6E 24 
369e3     3A 20       | 	byte	"bin$: "
369e5     00          | 	byte	0
369e6                 | LR__5840
369e6     2F          | 	byte	"/"
369e7     00          | 	byte	0
369e8                 | LR__5841
369e8     2F 73 64 2F 
369ec     62 69 6E 2F | 	byte	"/sd/bin/"
369f0     00          | 	byte	0
369f1                 | LR__5842
369f1     53 79 73 74 
369f5     65 6D 20 65 
369f9     72 72 6F 72 
369fd     20          | 	byte	"System error "
369fe     00          | 	byte	0
369ff                 | LR__5843
369ff     3A 20       | 	byte	": "
36a01     00          | 	byte	0
36a02                 | LR__5844
36a02     2A          | 	byte	"*"
36a03     00          | 	byte	0
36a04                 | LR__5845
36a04     2E 2E       | 	byte	".."
36a06     00          | 	byte	0
36a07                 | LR__5846
36a07     2F          | 	byte	"/"
36a08     00          | 	byte	0
36a09                 | LR__5847
36a09     2F          | 	byte	"/"
36a0a     00          | 	byte	0
36a0b                 | LR__5848
36a0b     53 79 73 74 
36a0f     65 6D 20 65 
36a13     72 72 6F 72 
36a17     20          | 	byte	"System error "
36a18     00          | 	byte	0
36a19                 | LR__5849
36a19     3A 20       | 	byte	": "
36a1b     00          | 	byte	0
36a1c                 | LR__5850
36a1c     43 75 72 72 
36a20     65 6E 74 20 
36a24     64 69 72 65 
36a28     63 74 6F 72 
36a2c     79 3A 20    | 	byte	"Current directory: "
36a2f     00          | 	byte	0
36a30                 | LR__5851
36a30     2F          | 	byte	"/"
36a31     00          | 	byte	0
36a32                 | LR__5852
36a32     53 79 73 74 
36a36     65 6D 20 65 
36a3a     72 72 6F 72 
36a3e     20          | 	byte	"System error "
36a3f     00          | 	byte	0
36a40                 | LR__5853
36a40     3A 20       | 	byte	": "
36a42     00          | 	byte	0
36a43                 | LR__5854
36a43     43 75 72 72 
36a47     65 6E 74 20 
36a4b     64 69 72 65 
36a4f     63 74 6F 72 
36a53     79 3A 20    | 	byte	"Current directory: "
36a56     00          | 	byte	0
36a57                 | LR__5855
36a57     2F          | 	byte	"/"
36a58     00          | 	byte	0
36a59                 | LR__5856
36a59     2F          | 	byte	"/"
36a5a     00          | 	byte	0
36a5b                 | LR__5857
36a5b     2F          | 	byte	"/"
36a5c     00          | 	byte	0
36a5d                 | LR__5858
36a5d     53 79 73 74 
36a61     65 6D 20 65 
36a65     72 72 6F 72 
36a69     20          | 	byte	"System error "
36a6a     00          | 	byte	0
36a6b                 | LR__5859
36a6b     3A 20       | 	byte	": "
36a6d     00          | 	byte	0
36a6e                 | LR__5860
36a6e     43 75 72 72 
36a72     65 6E 74 20 
36a76     64 69 72 65 
36a7a     63 74 6F 72 
36a7e     79 3A 20    | 	byte	"Current directory: "
36a81     00          | 	byte	0
36a82                 | LR__5861
36a82     63 68 72 24 
36a86     3A 20       | 	byte	"chr$: "
36a88     00          | 	byte	0
36a89                 | LR__5862
36a89     63 68 61 6E 
36a8d     6E 65 6C 23 
36a91     20 65 78 70 
36a95     65 63 74 65 
36a99     64          | 	byte	"channel# expected"
36a9a     00          | 	byte	0
36a9b                 | LR__5863
36a9b     63 6F 67 69 
36a9f     6E 69 74 3A 
36aa3     20          | 	byte	"coginit: "
36aa4     00          | 	byte	0
36aa5                 | LR__5864
36aa5     53 79 73 74 
36aa9     65 6D 20 65 
36aad     72 72 6F 72 
36ab1     20 2D 20    | 	byte	"System error - "
36ab4     00          | 	byte	0
36ab5                 | LR__5865
36ab5     20 69 6E 20 
36ab9     6C 69 6E 65 
36abd     20          | 	byte	" in line "
36abe     00          | 	byte	0
36abf                 | LR__5866
36abf     3A 20       | 	byte	": "
36ac1     00          | 	byte	0
36ac2                 | LR__5867
36ac2     2C 20 66 69 
36ac6     6C 65 20 6E 
36aca     61 6D 65 3A 
36ace     20          | 	byte	", file name: "
36acf     00          | 	byte	0
36ad0                 | LR__5868
36ad0     53 79 73 74 
36ad4     65 6D 20 65 
36ad8     72 72 6F 72 
36adc     20 2D 20    | 	byte	"System error - "
36adf     00          | 	byte	0
36ae0                 | LR__5869
36ae0     20 69 6E 20 
36ae4     6C 69 6E 65 
36ae8     20          | 	byte	" in line "
36ae9     00          | 	byte	0
36aea                 | LR__5870
36aea     3A 20       | 	byte	": "
36aec     00          | 	byte	0
36aed                 | LR__5871
36aed     2C 20 66 69 
36af1     6C 65 20 6E 
36af5     61 6D 65 3A 
36af9     20          | 	byte	", file name: "
36afa     00          | 	byte	0
36afb                 | LR__5872
36afb     63 6F 73 3A 
36aff     20          | 	byte	"cos: "
36b00     00          | 	byte	0
36b01                 | LR__5873
36b01                 | 	byte	
36b01     00          | 	byte	0
36b02                 | LR__5874
36b02                 | 	byte	
36b02     00          | 	byte	0
36b03                 | LR__5875
36b03     2F 73 64 2F 
36b07     6D 65 64 69 
36b0b     61 2F 68 2F | 	byte	"/sd/media/h/"
36b0f     00          | 	byte	0
36b10                 | LR__5876
36b10     53 79 73 74 
36b14     65 6D 20 65 
36b18     72 72 6F 72 
36b1c     20          | 	byte	"System error "
36b1d     00          | 	byte	0
36b1e                 | LR__5877
36b1e     3A 20       | 	byte	": "
36b20     00          | 	byte	0
36b21                 | LR__5878
36b21                 | 	byte	
36b21     00          | 	byte	0
36b22                 | LR__5879
36b22                 | 	byte	
36b22     00          | 	byte	0
36b23                 | LR__5880
36b23     2F 73 64 2F 
36b27     6D 65 64 69 
36b2b     61 2F 73 2F | 	byte	"/sd/media/s/"
36b2f     00          | 	byte	0
36b30                 | LR__5881
36b30     53 79 73 74 
36b34     65 6D 20 65 
36b38     72 72 6F 72 
36b3c     20          | 	byte	"System error "
36b3d     00          | 	byte	0
36b3e                 | LR__5882
36b3e     3A 20       | 	byte	": "
36b40     00          | 	byte	0
36b41                 | LR__5883
36b41     2F          | 	byte	"/"
36b42     00          | 	byte	0
36b43                 | LR__5884
36b43     2F          | 	byte	"/"
36b44     00          | 	byte	0
36b45                 | LR__5885
36b45     2F          | 	byte	"/"
36b46     00          | 	byte	0
36b47                 | LR__5886
36b47     43 61 6E 6E 
36b4b     6F 74 20 64 
36b4f     65 6C 65 74 
36b53     65 20 66 69 
36b57     6C 65 20 6F 
36b5b     72 20 66 69 
36b5f     6C 65 20 64 
36b63     6F 65 73 6E 
36b67     27 74 20 65 
36b6b     78 69 73 74 
36b6f     3A 20 73 79 
36b73     73 74 65 6D 
36b77     20 65 72 72 
36b7b     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
36b7e     00          | 	byte	0
36b7f                 | LR__5887
36b7f     43 75 72 72 
36b83     65 6E 74 20 
36b87     64 69 72 65 
36b8b     63 74 6F 72 
36b8f     79 3A 20    | 	byte	"Current directory: "
36b92     00          | 	byte	0
36b93                 | LR__5888
36b93                 | 	byte	
36b93     00          | 	byte	0
36b94                 | LR__5889
36b94     2A          | 	byte	"*"
36b95     00          | 	byte	0
36b96                 | LR__5890
36b96                 | 	byte	
36b96     00          | 	byte	0
36b97                 | LR__5891
36b97     5B 64 69 72 
36b9b     5D 20       | 	byte	"[dir] "
36b9d     00          | 	byte	0
36b9e                 | LR__5892
36b9e     4D 6F 72 65 
36ba2     20 74 68 61 
36ba6     6E 20 31 32 
36baa     38 20 65 6E 
36bae     74 72 69 65 
36bb2     73 20 66 6F 
36bb6     75 6E 64 3A 
36bba     20 63 6C 65 
36bbe     61 6E 20 79 
36bc2     6F 75 72 20 
36bc6     64 69 72 65 
36bca     63 74 6F 72 
36bce     79          | 	byte	"More than 128 entries found: clean your directory"
36bcf     00          | 	byte	0
36bd0                 | LR__5893
36bd0     2A          | 	byte	"*"
36bd1     00          | 	byte	0
36bd2                 | LR__5894
36bd2                 | 	byte	
36bd2     00          | 	byte	0
36bd3                 | LR__5895
36bd3     4D 6F 72 65 
36bd7     20 74 68 61 
36bdb     6E 20 31 32 
36bdf     38 20 65 6E 
36be3     74 72 69 65 
36be7     73 20 66 6F 
36beb     75 6E 64 3A 
36bef     20 63 6C 65 
36bf3     61 6E 20 79 
36bf7     6F 75 72 20 
36bfb     64 69 72 65 
36bff     63 74 6F 72 
36c03     79          | 	byte	"More than 128 entries found: clean your directory"
36c04     00          | 	byte	0
36c05                 | LR__5896
36c05     45 72 72 6F 
36c09     72 20       | 	byte	"Error "
36c0b     00          | 	byte	0
36c0c                 | LR__5897
36c0c     3A 20       | 	byte	": "
36c0e     00          | 	byte	0
36c0f                 | LR__5898
36c0f     67 65 74 65 
36c13     6E 76 73 75 
36c17     73 74 61 69 
36c1b     6E 3A 20    | 	byte	"getenvsustain: "
36c1e     00          | 	byte	0
36c1f                 | LR__5899
36c1f     67 65 74 70 
36c23     69 78 65 6C 
36c27     3A 20       | 	byte	"getpixel: "
36c29     00          | 	byte	0
36c2a                 | LR__5900
36c2a     68 65 78 24 
36c2e     3A 20       | 	byte	"hex$: "
36c30     00          | 	byte	0
36c31                 | LR__5901
36c31                 | 	byte	
36c31     00          | 	byte	0
36c32                 | LR__5902
36c32     49 6E 20 69 
36c36     6E 70 75 74 
36c3a     3A 20       | 	byte	"In input: "
36c3c     00          | 	byte	0
36c3d                 | LR__5903
36c3d     2C          | 	byte	","
36c3e     00          | 	byte	0
36c3f                 | LR__5904
36c3f                 | 	byte	
36c3f     00          | 	byte	0
36c40                 | LR__5905
36c40                 | 	byte	
36c40     00          | 	byte	0
36c41                 | LR__5906
36c41     6C 65 66 74 
36c45     24 3A 20    | 	byte	"left$: "
36c48     00          | 	byte	0
36c49                 | LR__5907
36c49     6C 65 66 74 
36c4d     24 3A 20    | 	byte	"left$: "
36c50     00          | 	byte	0
36c51                 | LR__5908
36c51     6C 65 6E 3A 
36c55     20          | 	byte	"len: "
36c56     00          | 	byte	0
36c57                 | LR__5909
36c57     6C 65 6E 3A 
36c5b     20          | 	byte	"len: "
36c5c     00          | 	byte	0
36c5d                 | LR__5910
36c5d                 | 	byte	
36c5d     00          | 	byte	0
36c5e                 | LR__5911
36c5e     2F          | 	byte	"/"
36c5f     00          | 	byte	0
36c60                 | LR__5912
36c60     2F          | 	byte	"/"
36c61     00          | 	byte	0
36c62                 | LR__5913
36c62     2E 62 61 73 | 	byte	".bas"
36c66     00          | 	byte	0
36c67                 | LR__5914
36c67     53 79 73 74 
36c6b     65 6D 20 65 
36c6f     72 72 6F 72 
36c73     20          | 	byte	"System error "
36c74     00          | 	byte	0
36c75                 | LR__5915
36c75     3A 20       | 	byte	": "
36c77     00          | 	byte	0
36c78                 | LR__5916
36c78     2E 62 61 73 | 	byte	".bas"
36c7c     00          | 	byte	0
36c7d                 | LR__5917
36c7d     2F          | 	byte	"/"
36c7e     00          | 	byte	0
36c7f                 | LR__5918
36c7f                 | 	byte	
36c7f     00          | 	byte	0
36c80                 | LR__5919
36c80     4C 6F 61 64 
36c84     65 64 20    | 	byte	"Loaded "
36c87     00          | 	byte	0
36c88                 | LR__5920
36c88     2F          | 	byte	"/"
36c89     00          | 	byte	0
36c8a                 | LR__5921
36c8a     6C 6F 67 3A 
36c8e     20          | 	byte	"log: "
36c8f     00          | 	byte	0
36c90                 | LR__5922
36c90     6D 69 64 24 
36c94     3A 20       | 	byte	"mid$: "
36c96     00          | 	byte	0
36c97                 | LR__5923
36c97     6D 69 64 24 
36c9b     3A 20       | 	byte	"mid$: "
36c9d     00          | 	byte	0
36c9e                 | LR__5924
36c9e     43 61 6E 6E 
36ca2     6F 74 20 63 
36ca6     72 65 61 74 
36caa     65 20 61 20 
36cae     64 69 72 65 
36cb2     63 74 6F 72 
36cb6     79 3A 20 73 
36cba     79 73 74 65 
36cbe     6D 20 65 72 
36cc2     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
36cc6     00          | 	byte	0
36cc7                 | LR__5925
36cc7     20 42 41 53 
36ccb     49 43 20 62 
36ccf     79 74 65 73 
36cd3     20 66 72 65 
36cd7     65          | 	byte	" BASIC bytes free"
36cd8     00          | 	byte	0
36cd9                 | LR__5926
36cd9                 | 	byte	
36cd9     00          | 	byte	0
36cda                 | LR__5927
36cda                 | 	byte	
36cda     00          | 	byte	0
36cdb                 | LR__5928
36cdb                 | 	byte	
36cdb     00          | 	byte	0
36cdc                 | LR__5929
36cdc     6E 6F 6E 61 
36ce0     6D 65 2E 62 
36ce4     61 73       | 	byte	"noname.bas"
36ce6     00          | 	byte	0
36ce7                 | LR__5930
36ce7     66 69 6C 65 
36ceb     6E 61 6D 65 
36cef     20 65 78 70 
36cf3     65 63 74 65 
36cf7     64          | 	byte	"filename expected"
36cf8     00          | 	byte	0
36cf9                 | LR__5931
36cf9     72 65 61 64 | 	byte	"read"
36cfd     00          | 	byte	0
36cfe                 | LR__5932
36cfe     77 72 69 74 
36d02     65          | 	byte	"write"
36d03     00          | 	byte	0
36d04                 | LR__5933
36d04     61 70 70 65 
36d08     6E 64       | 	byte	"append"
36d0a     00          | 	byte	0
36d0b                 | LR__5934
36d0b     63 68 61 6E 
36d0f     6E 65 6C 23 
36d13     20 65 78 70 
36d17     65 63 74 65 
36d1b     64          | 	byte	"channel# expected"
36d1c     00          | 	byte	0
36d1d                 | LR__5935
36d1d     4F 70 65 6E 
36d21     3A 20 69 6E 
36d25     76 61 6C 69 
36d29     64 20 6D 6F 
36d2d     64 65       | 	byte	"Open: invalid mode"
36d2f     00          | 	byte	0
36d30                 | LR__5936
36d30     70 61 64 68 
36d34     3A 20       | 	byte	"padh: "
36d36     00          | 	byte	0
36d37                 | LR__5937
36d37     70 61 64 72 
36d3b     78 3A 20    | 	byte	"padrx: "
36d3e     00          | 	byte	0
36d3f                 | LR__5938
36d3f     70 61 64 72 
36d43     79 3A 20    | 	byte	"padry: "
36d46     00          | 	byte	0
36d47                 | LR__5939
36d47     70 61 64 72 
36d4b     7A 3A 20    | 	byte	"padrz: "
36d4e     00          | 	byte	0
36d4f                 | LR__5940
36d4f     70 61 64 78 
36d53     3A 20       | 	byte	"padx: "
36d55     00          | 	byte	0
36d56                 | LR__5941
36d56     70 61 64 79 
36d5a     3A 20       | 	byte	"pady: "
36d5c     00          | 	byte	0
36d5d                 | LR__5942
36d5d     70 61 64 7A 
36d61     3A 20       | 	byte	"padz: "
36d63     00          | 	byte	0
36d64                 | LR__5943
36d64     50 72 69 6E 
36d68     74 20 74 6F 
36d6c     20 63 68 61 
36d70     6E 6E 65 6C 
36d74     20 28 6E 6F 
36d78     74 20 79 65 
36d7c     74 20 69 6D 
36d80     70 6C 65 6D 
36d84     65 6E 74 65 
36d88     64 29       | 	byte	"Print to channel (not yet implemented)"
36d8a     00          | 	byte	0
36d8b                 | LR__5944
36d8b                 | 	byte	
36d8b     00          | 	byte	0
36d8c                 | LR__5945
36d8c     64 61 74 61 | 	byte	"data"
36d90     00          | 	byte	0
36d91                 | LR__5946
36d91                 | 	byte	
36d91     00          | 	byte	0
36d92                 | LR__5947
36d92     49 6E 20 72 
36d96     65 61 64 3A 
36d9a     20          | 	byte	"In read: "
36d9b     00          | 	byte	0
36d9c                 | LR__5948
36d9c                 | 	byte	
36d9c     00          | 	byte	0
36d9d                 | LR__5949
36d9d                 | 	byte	
36d9d     00          | 	byte	0
36d9e                 | LR__5950
36d9e     2C          | 	byte	","
36d9f     00          | 	byte	0
36da0                 | LR__5951
36da0                 | 	byte	
36da0     00          | 	byte	0
36da1                 | LR__5952
36da1                 | 	byte	
36da1     00          | 	byte	0
36da2                 | LR__5953
36da2                 | 	byte	
36da2     00          | 	byte	0
36da3                 | LR__5954
36da3                 | 	byte	
36da3     00          | 	byte	0
36da4                 | LR__5955
36da4                 | 	byte	
36da4     00          | 	byte	0
36da5                 | LR__5956
36da5     72 69 67 68 
36da9     74 24 3A 20 | 	byte	"right$: "
36dad     00          | 	byte	0
36dae                 | LR__5957
36dae     72 69 67 68 
36db2     74 24 3A 20 | 	byte	"right$: "
36db6     00          | 	byte	0
36db7                 | LR__5958
36db7     72 6E 64 3A 
36dbb     20          | 	byte	"rnd: "
36dbc     00          | 	byte	0
36dbd                 | LR__5959
36dbd     72 6E 64 3A 
36dc1     20          | 	byte	"rnd: "
36dc2     00          | 	byte	0
36dc3                 | LR__5960
36dc3                 | 	byte	
36dc3     00          | 	byte	0
36dc4                 | LR__5961
36dc4     53 74 6F 70 
36dc8     70 65 64 20 
36dcc     61 74 20 6C 
36dd0     69 6E 65 20 | 	byte	"Stopped at line "
36dd4     00          | 	byte	0
36dd5                 | LR__5962
36dd5                 | 	byte	
36dd5     00          | 	byte	0
36dd6                 | LR__5963
36dd6     2F          | 	byte	"/"
36dd7     00          | 	byte	0
36dd8                 | LR__5964
36dd8                 | 	byte	
36dd8     00          | 	byte	0
36dd9                 | LR__5965
36dd9     53 61 76 65 
36ddd     64 20 61 73 
36de1     20          | 	byte	"Saved as "
36de2     00          | 	byte	0
36de3                 | LR__5966
36de3     2F          | 	byte	"/"
36de4     00          | 	byte	0
36de5                 | LR__5967
36de5     73 69 6E 3A 
36de9     20          | 	byte	"sin: "
36dea     00          | 	byte	0
36deb                 | LR__5968
36deb     73 71 72 3A 
36def     20          | 	byte	"sqr: "
36df0     00          | 	byte	0
36df1                 | LR__5969
36df1     73 74 69 63 
36df5     6B 3A 20    | 	byte	"stick: "
36df8     00          | 	byte	0
36df9                 | LR__5970
36df9     73 74 72 69 
36dfd     67 3A 20    | 	byte	"strig: "
36e00     00          | 	byte	0
36e01                 | LR__5971
36e01     74 61 6E 3A 
36e05     20          | 	byte	"tan: "
36e06     00          | 	byte	0
36e07                 | LR__5972
36e07     76 61 6C 3A 
36e0b     20          | 	byte	"val: "
36e0c     00          | 	byte	0
36e0d                 | LR__5973
36e0d     76 61 6C 3A 
36e11     20          | 	byte	"val: "
36e12     00          | 	byte	0
36e13                 | LR__5974
36e13     24          | 	byte	"$"
36e14     00          | 	byte	0
36e15                 | LR__5975
36e15     26 68       | 	byte	"&h"
36e17     00          | 	byte	0
36e18                 | LR__5976
36e18     25          | 	byte	"%"
36e19     00          | 	byte	0
36e1a                 | LR__5977
36e1a     26 62       | 	byte	"&b"
36e1c     00          | 	byte	0
36e1d                 | LR__5978
36e1d                 | 	byte	
36e1d     00          | 	byte	0
36e1e                 | LR__5979
36e1e     45 78 70 65 
36e22     63 74 65 64 
36e26     20 6E 75 6D 
36e2a     62 65 72 2C 
36e2e     20 67 6F 74 
36e32     20 73 6F 6D 
36e36     65 74 68 69 
36e3a     6E 67 20 65 
36e3e     6C 73 65    | 	byte	"Expected number, got something else"
36e41     00          | 	byte	0
36e42                 | LR__5980
36e42     43 61 6E 6E 
36e46     6F 74 20 61 
36e4a     64 64 20 61 
36e4e     20 6E 75 6D 
36e52     62 65 72 20 
36e56     74 6F 20 61 
36e5a     20 73 74 72 
36e5e     69 6E 67    | 	byte	"Cannot add a number to a string"
36e61     00          | 	byte	0
36e62                 | LR__5981
36e62     43 61 6E 6E 
36e66     6F 74 20 73 
36e6a     75 62 73 74 
36e6e     72 61 63 74 
36e72     20 73 74 72 
36e76     69 6E 67 73 | 	byte	"Cannot substract strings"
36e7a     00          | 	byte	0
36e7b                 | LR__5982
36e7b     55 6E 6B 6E 
36e7f     6F 77 6E 20 
36e83     65 72 72 6F 
36e87     72 20 77 68 
36e8b     69 6C 65 20 
36e8f     61 64 64 69 
36e93     6E 67       | 	byte	"Unknown error while adding"
36e95     00          | 	byte	0
36e96                 | LR__5983
36e96     55 6E 6B 6E 
36e9a     6F 77 6E 20 
36e9e     65 72 72 6F 
36ea2     72 20 77 68 
36ea6     69 6C 65 20 
36eaa     73 75 62 73 
36eae     74 72 61 63 
36eb2     74 69 6E 67 | 	byte	"Unknown error while substracting"
36eb6     00          | 	byte	0
36eb7                 | LR__5984
36eb7     43 61 6E 6E 
36ebb     6F 74 20 64 
36ebf     6F 20 6C 6F 
36ec3     67 69 63 20 
36ec7     6F 70 65 72 
36ecb     61 74 69 6F 
36ecf     6E 20 6F 6E 
36ed3     20 73 74 72 
36ed7     69 6E 67 20 
36edb     6F 72 20 66 
36edf     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
36ee3     00          | 	byte	0
36ee4                 | LR__5985
36ee4     55 6E 6B 6E 
36ee8     6F 77 6E 20 
36eec     65 72 72 6F 
36ef0     72 20 77 68 
36ef4     69 6C 65 20 
36ef8     64 6F 69 6E 
36efc     67 20 6C 6F 
36f00     67 69 63 20 
36f04     6F 70 65 72 
36f08     61 74 69 6F 
36f0c     6E          | 	byte	"Unknown error while doing logic operation"
36f0d     00          | 	byte	0
36f0e                 | LR__5986
36f0e     43 61 6E 6E 
36f12     6F 74 20 6D 
36f16     75 6C 74 69 
36f1a     70 6C 79 20 
36f1e     73 74 72 69 
36f22     6E 67 73    | 	byte	"Cannot multiply strings"
36f25     00          | 	byte	0
36f26                 | LR__5987
36f26     55 6E 6B 6E 
36f2a     6F 77 6E 20 
36f2e     65 72 72 6F 
36f32     72 20 77 68 
36f36     69 6C 65 20 
36f3a     6D 75 6C 74 
36f3e     69 70 6C 79 
36f42     69 6E 67    | 	byte	"Unknown error while multiplying"
36f45     00          | 	byte	0
36f46                 | LR__5988
36f46     43 61 6E 6E 
36f4a     6F 74 20 64 
36f4e     69 76 69 64 
36f52     65 20 73 74 
36f56     72 69 6E 67 
36f5a     73          | 	byte	"Cannot divide strings"
36f5b     00          | 	byte	0
36f5c                 | LR__5989
36f5c     55 6E 6B 6E 
36f60     6F 77 6E 20 
36f64     65 72 72 6F 
36f68     72 20 77 68 
36f6c     69 6C 65 20 
36f70     64 69 76 69 
36f74     64 69 6E 67 | 	byte	"Unknown error while dividing"
36f78     00          | 	byte	0
36f79                 | LR__5990
36f79     43 61 6E 6E 
36f7d     6F 74 20 63 
36f81     6F 6D 70 75 
36f85     74 65 20 61 
36f89     20 70 6F 77 
36f8d     65 72 20 6F 
36f91     66 20 61 20 
36f95     73 74 72 69 
36f99     6E 67       | 	byte	"Cannot compute a power of a string"
36f9b     00          | 	byte	0
36f9c                 | LR__5991
36f9c     55 6E 6B 6E 
36fa0     6F 77 6E 20 
36fa4     65 72 72 6F 
36fa8     72 20 77 68 
36fac     69 6C 65 20 
36fb0     63 6F 6D 70 
36fb4     75 74 69 6E 
36fb8     67 20 61 20 
36fbc     70 6F 77 65 
36fc0     72          | 	byte	"Unknown error while computing a power"
36fc1     00          | 	byte	0
36fc2                 | LR__5992
36fc2     52 69 67 68 
36fc6     74 20 70 61 
36fca     72 65 6E 74 
36fce     68 65 73 69 
36fd2     73 20 65 78 
36fd6     70 65 63 74 
36fda     65 64       | 	byte	"Right parenthesis expected"
36fdc     00          | 	byte	0
36fdd                 | LR__5993
36fdd     45 78 70 65 
36fe1     63 74 65 64 
36fe5     20 73 74 72 
36fe9     69 6E 67    | 	byte	"Expected string"
36fec     00          | 	byte	0
36fed                 | LR__5994
36fed     45 78 70 65 
36ff1     63 74 65 64 
36ff5     20 66 6C 6F 
36ff9     61 74       | 	byte	"Expected float"
36ffb     00          | 	byte	0
36ffc                 | LR__5995
36ffc     45 78 70 65 
37000     63 74 65 64 
37004     20 75 6E 73 
37008     69 67 6E 65 
3700c     64 20 69 6E 
37010     74 65 67 65 
37014     72          | 	byte	"Expected unsigned integer"
37015     00          | 	byte	0
37016                 | LR__5996
37016     45 78 70 65 
3701a     63 74 65 64 
3701e     20 69 6E 74 
37022     65 67 65 72 | 	byte	"Expected integer"
37026     00          | 	byte	0
37027                 | LR__5997
37027     4E 6F 20 6D 
3702b     6F 72 65 20 
3702f     76 61 72 69 
37033     61 62 6C 65 
37037     20 73 6C 6F 
3703b     74 73       | 	byte	"No more variable slots"
3703d     00          | 	byte	0
3703e                 | LR__5998
3703e     56 61 72 69 
37042     61 62 6C 65 
37046     20 6E 6F 74 
3704a     20 66 6F 75 
3704e     6E 64       | 	byte	"Variable not found"
37050     00          | 	byte	0
37051                 | LR__5999
37051     43 6F 6D 6D 
37055     61 20 65 78 
37059     70 65 63 74 
3705d     65 64       | 	byte	"Comma expected"
3705f     00          | 	byte	0
37060                 | LR__6000
37060     43 6F 6D 6D 
37064     61 20 6F 72 
37068     20 73 65 6D 
3706c     69 63 6F 6C 
37070     6F 6E 20 65 
37074     78 70 65 63 
37078     74 65 64    | 	byte	"Comma or semicolon expected"
3707b     00          | 	byte	0
3707c                 | LR__6001
3707c     55 6E 6B 6E 
37080     6F 77 6E 20 
37084     63 6F 6D 6D 
37088     61 6E 64    | 	byte	"Unknown command"
3708b     00          | 	byte	0
3708c                 | LR__6002
3708c     53 74 61 63 
37090     6B 20 75 6E 
37094     64 65 72 66 
37098     6C 6F 77    | 	byte	"Stack underflow"
3709b     00          | 	byte	0
3709c                 | LR__6003
3709c     43 61 6E 6E 
370a0     6F 74 20 65 
370a4     78 65 63 75 
370a8     74 65 20 67 
370ac     6F 74 6F 20 
370b0     6F 72 20 67 
370b4     6F 73 75 62 
370b8     20 69 6E 20 
370bc     74 68 65 20 
370c0     69 6D 6D 65 
370c4     64 69 61 74 
370c8     65 20 6D 6F 
370cc     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
370ce     00          | 	byte	0
370cf                 | LR__6004
370cf     43 61 6E 6E 
370d3     6F 74 20 6C 
370d7     6F 61 64 20 
370db     66 72 6F 6D 
370df     20 74 68 69 
370e3     73 20 66 69 
370e7     6C 65       | 	byte	"Cannot load from this file"
370e9     00          | 	byte	0
370ea                 | LR__6005
370ea     54 68 65 20 
370ee     70 72 6F 67 
370f2     72 61 6D 20 
370f6     69 73 20 65 
370fa     6D 70 74 79 | 	byte	"The program is empty"
370fe     00          | 	byte	0
370ff                 | LR__6006
370ff     49 66 20 61 
37103     66 74 65 72 
37107     20 69 66    | 	byte	"If after if"
3710a     00          | 	byte	0
3710b                 | LR__6007
3710b     45 6D 70 74 
3710f     79 20 65 78 
37113     70 72 65 73 
37117     73 69 6F 6E | 	byte	"Empty expression"
3711b     00          | 	byte	0
3711c                 | LR__6008
3711c     53 74 72 69 
37120     6E 67 20 65 
37124     78 70 65 63 
37128     74 65 64    | 	byte	"String expected"
3712b     00          | 	byte	0
3712c                 | LR__6009
3712c     49 6E 74 65 
37130     72 70 72 65 
37134     74 65 72 20 
37138     69 6E 74 65 
3713c     72 6E 61 6C 
37140     20 65 72 72 
37144     6F 72       | 	byte	"Interpreter internal error"
37146     00          | 	byte	0
37147                 | LR__6010
37147     45 78 70 65 
3714b     63 74 65 64 
3714f     20 61 73 73 
37153     69 67 6E    | 	byte	"Expected assign"
37156     00          | 	byte	0
37157                 | LR__6011
37157     45 78 70 65 
3715b     63 74 65 64 
3715f     20 27 74 6F 
37163     27          | 	byte	"Expected 'to'"
37164     00          | 	byte	0
37165                 | LR__6012
37165     45 78 70 65 
37169     63 74 65 64 
3716d     20 69 6E 74 
37171     65 67 65 72 
37175     20 76 61 72 
37179     69 61 62 6C 
3717d     65          | 	byte	"Expected integer variable"
3717e     00          | 	byte	0
3717f                 | LR__6013
3717f     55 6E 69 6E 
37183     69 74 69 61 
37187     6C 69 7A 65 
3718b     64 20 76 61 
3718f     72 69 61 62 
37193     6C 65 20 69 
37197     6E 20 27 6E 
3719b     65 78 74 27 
3719f     2C 20 75 73 
371a3     65 20 27 66 
371a7     6F 72 27 20 
371ab     62 65 66 6F 
371af     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
371b1     00          | 	byte	0
371b2                 | LR__6014
371b2     4E 6F 20 6D 
371b6     6F 72 65 20 
371ba     73 6C 6F 74 
371be     73 20 66 6F 
371c2     72 20 27 66 
371c6     6F 72 27    | 	byte	"No more slots for 'for'"
371c9     00          | 	byte	0
371ca                 | LR__6015
371ca     27 4E 65 78 
371ce     74 27 20 64 
371d2     6F 65 73 6E 
371d6     27 74 20 6D 
371da     61 74 63 68 
371de     20 27 66 6F 
371e2     72 27       | 	byte	"'Next' doesn't match 'for'"
371e4     00          | 	byte	0
371e5                 | LR__6016
371e5     27 47 6F 74 
371e9     6F 27 20 74 
371ed     61 72 67 65 
371f1     74 20 6C 69 
371f5     6E 65 20 6E 
371f9     6F 74 20 66 
371fd     6F 75 6E 64 | 	byte	"'Goto' target line not found"
37201     00          | 	byte	0
37202                 | LR__6017
37202     42 61 64 20 
37206     6E 75 6D 62 
3720a     65 72 20 6F 
3720e     66 20 70 61 
37212     72 61 6D 65 
37216     74 65 72 73 | 	byte	"Bad number of parameters"
3721a     00          | 	byte	0
3721b                 | LR__6018
3721b     46 75 6E 63 
3721f     74 69 6F 6E 
37223     20 75 6E 64 
37227     65 66 69 6E 
3722b     65 64 20 66 
3722f     6F 72 20 73 
37233     74 72 69 6E 
37237     67 73       | 	byte	"Function undefined for strings"
37239     00          | 	byte	0
3723a                 | LR__6019
3723a     42 61 64 20 
3723e     70 61 72 61 
37242     6D 65 74 65 
37246     72          | 	byte	"Bad parameter"
37247     00          | 	byte	0
37248                 | LR__6020
37248     43 61 6E 6E 
3724c     6F 74 20 64 
37250     65 63 6C 61 
37254     72 65 20 61 
37258     6E 20 61 72 
3725c     72 61 79 3A 
37260     20 74 68 65 
37264     20 76 61 72 
37268     69 61 62 6C 
3726c     65 20 65 78 
37270     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
37274     00          | 	byte	0
37275                 | LR__6021
37275     45 78 70 65 
37279     63 74 65 64 
3727d     20 27 28 27 | 	byte	"Expected '('"
37281     00          | 	byte	0
37282                 | LR__6022
37282     45 78 70 65 
37286     63 74 65 64 
3728a     20 27 29 27 
3728e     20 6F 72 20 
37292     27 2C 27    | 	byte	"Expected ')' or ','"
37295     00          | 	byte	0
37296                 | LR__6023
37296     4E 6F 20 6D 
3729a     6F 72 65 20 
3729e     74 68 61 6E 
372a2     20 33 20 64 
372a6     69 6D 65 6E 
372aa     73 69 6F 6E 
372ae     73 20 73 75 
372b2     70 70 6F 72 
372b6     74 65 64    | 	byte	"No more than 3 dimensions supported"
372b9     00          | 	byte	0
372ba                 | LR__6024
372ba     56 61 72 69 
372be     61 62 6C 65 
372c2     20 6E 61 6D 
372c6     65 20 65 78 
372ca     70 65 63 74 
372ce     65 64       | 	byte	"Variable name expected"
372d0     00          | 	byte	0
372d1                 | LR__6025
372d1     54 79 70 65 
372d5     20 6E 61 6D 
372d9     65 20 65 78 
372dd     70 65 63 74 
372e1     65 64       | 	byte	"Type name expected"
372e3     00          | 	byte	0
372e4                 | LR__6026
372e4     54 79 70 65 
372e8     20 6E 6F 74 
372ec     20 73 75 70 
372f0     70 6F 72 74 
372f4     65 64 20 79 
372f8     65 74       | 	byte	"Type not supported yet"
372fa     00          | 	byte	0
372fb                 | LR__6027
372fb     41 72 72 61 
372ff     79 20 69 6E 
37303     64 65 78 20 
37307     6F 75 74 20 
3730b     6F 66 20 72 
3730f     61 6E 67 65 | 	byte	"Array index out of range"
37313     00          | 	byte	0
37314                 | LR__6028
37314     42 61 64 20 
37318     74 79 70 65 
3731c     20 77 68 69 
37320     6C 65 20 61 
37324     73 73 69 67 
37328     6E 69 6E 67 
3732c     20 74 6F 20 
37330     61 72 72 61 
37334     79          | 	byte	"Bad type while assigning to array"
37335     00          | 	byte	0
37336                 | LR__6029
37336     54 6F 6F 20 
3733a     6D 61 6E 79 
3733e     20 76 61 72 
37342     69 61 62 6C 
37346     65 73       | 	byte	"Too many variables"
37348     00          | 	byte	0
37349                 | LR__6030
37349     27 54 68 65 
3734d     6E 27 20 65 
37351     78 70 65 63 
37355     74 65 64    | 	byte	"'Then' expected"
37358     00          | 	byte	0
37359                 | LR__6031
37359     44 69 72 65 
3735d     63 74 6F 72 
37361     79 20 64 6F 
37365     65 73 6E 27 
37369     74 20 65 78 
3736d     69 73 74    | 	byte	"Directory doesn't exist"
37370     00          | 	byte	0
37371                 | LR__6032
37371     55 6E 65 78 
37375     70 65 63 74 
37379     65 64 20 65 
3737d     6E 64 20 6F 
37381     66 20 6C 69 
37385     6E 65       | 	byte	"Unexpected end of line"
37387     00          | 	byte	0
37388                 | LR__6033
37388     4E 6F 20 6D 
3738c     6F 72 65 20 
37390     64 61 74 61 | 	byte	"No more data"
37394     00          | 	byte	0
37395                 | LR__6034
37395     45 72 72 6F 
37399     72 20       | 	byte	"Error "
3739b     00          | 	byte	0
3739c                 | LR__6035
3739c     20 2D 20    | 	byte	" - "
3739f     00          | 	byte	0
373a0                 | LR__6036
373a0     20 69 6E 20 
373a4     6C 69 6E 65 
373a8     20          | 	byte	" in line "
373a9     00          | 	byte	0
373aa                 | LR__6037
373aa                 | 	byte	
373aa     00          | 	byte	0
373ab                 | LR__6038
373ab     2F 73 64    | 	byte	"/sd"
373ae     00          | 	byte	0
373af                 | LR__6039
373af     2F 73 64 2F 
373b3     62 61 73    | 	byte	"/sd/bas"
373b6     00          | 	byte	0
373b7                 | LR__6040
373b7     2F 73 64 2F 
373bb     62 61 73    | 	byte	"/sd/bas"
373be     00          | 	byte	0
373bf                 | LR__6041
373bf     20 42 41 53 
373c3     49 43 20 62 
373c7     79 74 65 73 
373cb     20 66 72 65 
373cf     65          | 	byte	" BASIC bytes free"
373d0     00          | 	byte	0
373d1                 | LR__6042
373d1     52 65 61 64 
373d5     79          | 	byte	"Ready"
373d6     00          | 	byte	0
373d7                 | LR__6043
373d7     6E 6F 6E 61 
373db     6D 65 2E 62 
373df     61 73       | 	byte	"noname.bas"
373e1     00          | 	byte	0
373e2                 | LR__6044
373e2     2F 73 64 2F 
373e6     62 61 73 2F 
373ea     61 75 74 6F 
373ee     72 75 6E 2E 
373f2     62 61 73    | 	byte	"/sd/bas/autorun.bas"
373f5     00          | 	byte	0
373f6                 | LR__6045
373f6     72 75 6E 20 
373fa     61 75 74 6F 
373fe     72 75 6E 2E 
37402     62 61 73    | 	byte	"run autorun.bas"
37405     00          | 	byte	0
37406                 | LR__6046
37406                 | 	byte	
37406     00          | 	byte	0
37407     00          | 	alignl
37408                 | _dat_
37408     00 00 00 00 
3740c     00 00 00 00 
37410     00 00 00 00 
37414     00 00 00 00 | 	byte	$00[16]
37418     61 41 17 0E 
3741c     62 42 00 00 
37420     63 43 19 10 
37424     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
37428     65 45 18 0F 
3742c     66 46 00 00 
37430     67 47 00 00 
37434     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
37438     69 49 00 00 
3743c     6A 4A 00 00 
37440     6B 4B 00 00 
37444     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
37448     6D 4D 00 00 
3744c     6E 4E 1A 11 
37450     6F 4F 1E 15 
37454     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
37458     71 51 00 00 
3745c     72 52 00 00 
37460     73 53 1B 12 
37464     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
37468     75 55 00 00 
3746c     76 56 00 00 
37470     77 57 00 00 
37474     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
37478     79 59 00 00 
3747c     7A 5A 1D 14 
37480     31 21 04 00 
37484     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
37488     33 23 06 00 
3748c     34 24 07 00 
37490     35 25 08 00 
37494     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
37498     37 26 0A 00 
3749c     38 2A 0B 00 
374a0     39 28 0C 00 
374a4     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
374a8     8D 8D 00 00 
374ac     9B 9B 00 00 
374b0     88 88 00 00 
374b4     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
374b8     20 20 00 00 
374bc     2D 5F 00 00 
374c0     3D 2B 00 00 
374c4     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
374c8     5D 7D 00 00 
374cc     5C 7C 00 00 
374d0     23 7E 00 00 
374d4     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
374d8     27 22 00 00 
374dc     60 7E 03 00 
374e0     2C 3C 00 00 
374e4     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
374e8     2F 3F 00 00 
374ec     B9 B9 00 00 
374f0     BA 00 00 00 
374f4     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
374f8     BC 00 00 00 
374fc     BD 00 00 00 
37500     BE 00 00 00 
37504     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
37508     C0 00 00 00 
3750c     C1 00 00 00 
37510     C2 00 00 00 
37514     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
37518     C4 00 00 00 
3751c     C5 00 00 00 
37520     C6 00 00 00 
37524     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
37528     C8 00 00 00 
3752c     C9 00 00 00 
37530     CA 00 00 00 
37534     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
37538     7F 7F 00 00 
3753c     CC 00 00 00 
37540     CD 00 00 00 
37544     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
37548     CF 00 00 00 
3754c     D0 00 00 00 
37550     D1 00 00 00 
37554     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
37558     2F 2F 00 00 
3755c     2A 2A 00 00 
37560     2D 2D 00 00 
37564     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
37568     8D 8D 00 00 
3756c     31 31 00 00 
37570     32 32 00 00 
37574     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
37578     34 34 00 00 
3757c     35 35 00 00 
37580     36 36 00 00 
37584     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
37588     38 38 00 00 
3758c     39 39 00 00 
37590     30 30 00 00 
37594     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
37598     5C 7C 00 00 
3759c     00 00 00 00 
375a0     00 00 00 00 
375a4     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
375a8     00 00 00 00 
      ...             
37600     00 00 00 00 
37604     00 00 00 00 | 	byte	$00[96]
37608     2B 00 A6 F2 
3760c     24 A7 09 80 
37610     5B 88 4D 89 
37614     80 88 A5 88 | atari_spl file "atari.spl"
37618     6D 88 B8 88 
3761c     80 88 CB 88 
37620     92 88 A5 88 
37624     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
37628     A5 88 CA 88 
3762c     A6 88 DD 88 
37630     B8 88 AB 89 
37634     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
37638     C8 AD C6 F1 
3763c     91 06 B6 FF 
37640     13 00 4A 00 
37644     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
37648     5D 00 5E 00 
3764c     5D 00 5E 00 
37650     5E 00 5D 00 
37654     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
37658     38 00 83 00 
3765c     25 00 83 00 
37660     C3 FE D1 04 
37664     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
37668     48 88 38 85 
3766c     41 8A CB 88 
37670     28 89 B8 88 
37674     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
37678     15 89 03 89 
3767c     02 89 15 89 
37680     16 89 15 89 
37684     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
37688     15 89 3A 89 
3768c     72 89 E3 89 
37690     52 83 AD 97 
37694     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
37698     0C 02 B6 FF 
3769c     E1 00 A8 00 
376a0     F3 00 A8 00 
376a4     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
376a8     CE 00 CD 00 
376ac     CD 00 BA 00 
376b0     E1 00 BB 00 
376b4     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
376b8     DF 00 C9 FF 
376bc     E6 01 B6 06 
376c0     EE DD 8D 98 
376c4     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
376c8     97 89 73 89 
376cc     3B 89 60 89 
376d0     60 89 60 89 
376d4     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
376d8     73 89 72 89 
376dc     85 89 73 89 
376e0     AA 89 60 89 
376e4     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
376e8     E8 8A 18 86 
376ec     92 88 A5 C2 
376f0     E0 00 C3 05 
376f4     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
376f8     F2 00 64 01 
376fc     06 01 3E 01 
37700     2B 01 2B 01 
37704     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
37708     2B 01 2A 01 
3770c     2B 01 2B 01 
37710     2B 01 18 01 
37714     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
37718     39 07 61 F3 
3771c     C0 AF 37 85 
37720     0F 88 8B 8A 
37724     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
37728     AB 89 D0 89 
3772c     AB 89 D0 89 
37730     D0 89 CF 89 
37734     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
37738     D0 89 F5 89 
3773c     BD 89 08 8A 
37740     CF 89 E8 8A 
37744     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
37748     53 B3 0D F8 
3774c     F4 07 38 00 
37750     63 01 63 01 
37754     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
37758     88 01 88 01 
3775c     76 01 88 01 
37760     88 01 89 01 
37764     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
37768     75 01 AE 01 
3776c     76 01 88 01 
37770     4A 00 46 06 
37774     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
37778     08 8A 9A 86 
3777c     33 8B 08 8A 
37780     2D 8A F5 89 
37784     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
37788     2D 8A 2D 8A 
3778c     2E 8A 1B 8A 
37790     40 8A 2D 8A 
37794     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
37798     2E 8A 79 8A 
3779c     66 8A C8 8B 
377a0     72 82 2B 97 
377a4     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
377a8     1D 02 05 01 
377ac     F8 01 C0 01 
377b0     0B 02 C0 01 
377b4     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
377b8     F9 01 D3 01 
377bc     F8 01 D3 01 
377c0     F8 01 D2 01 
377c4     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
377c8     E6 01 2B 01 
377cc     8E 02 5F 07 
377d0     F7 E2 ED 9C 
377d4     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
377d8     E8 8A 78 8A 
377dc     78 8A 65 8A 
377e0     8B 8A 78 8A 
377e4     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
377e8     8B 8A 9D 8A 
377ec     9D 8A 8B 8A 
377f0     C2 8A 78 8A 
377f4     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
377f8     70 8C 18 86 
377fc     8B 8A 23 C9 
37800     CB 03 C4 05 
37804     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
37808     0B 02 7B 02 
3780c     1E 02 55 02 
37810     30 02 43 02 
37814     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
37818     43 02 44 02 
3781c     43 02 30 02 
37820     68 02 31 02 
37824     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
37828     07 08 3F F7 
3782c     73 B2 13 85 
37830     15 89 ED 8B 
37834     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
37838     B0 8A FB 8A 
3783c     D5 8A FA 8A 
37840     E8 8A FB 8A 
37844     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
37848     E8 8A 21 8B 
3784c     E7 8A 33 8B 
37850     E8 8A 26 8C 
37854     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
37858     8D B0 27 F6 
3785c     9C 08 AD 01 
37860     7B 02 8D 02 
37864     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
37868     A1 02 A0 02 
3786c     A1 02 A0 02 
37870     A0 02 A0 02 
37874     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
37878     7B 02 D8 02 
3787c     7B 02 C6 02 
37880     3E 01 C3 05 
37884     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
37888     00 8C 2A 86 
3788c     E0 8C FA 8A 
37890     6A 8B FB 8A 
37894     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
37898     45 8B 45 8B 
3789c     45 8B 6B 8B 
378a0     46 8B 59 8B 
378a4     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
378a8     6B 8B 6B 8B 
378ac     6B 8B 6B 8B 
378b0     7D 8B 7D 8B 
378b4     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
378b8     90 8B 91 8B 
378bc     90 8B 90 8B 
378c0     A3 8B A3 8B 
378c4     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
378c8     B5 8B B6 8B 
378cc     B5 8B B5 8B 
378d0     B6 8B C8 8B 
378d4     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
378d8     C8 8B DA 8B 
378dc     DB 8B DB 8B 
378e0     DB 8B DC 8B 
378e4     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
378e8     EE 8B EE 8B 
378ec     00 8C 01 8C 
378f0     00 8C 01 8C 
378f4     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
378f8     12 8C 13 8C 
378fc     13 8C 26 8C 
37900     26 8C 26 8C 
37904     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
37908     38 8C 38 8C 
3790c     38 8C 38 8C 
37910     4B 8C 4B 8C 
37914     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
37918     5E 8C 5E 8C 
3791c     5E 8C 5E 8C 
37920     70 8C 70 8C 
37924     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
37928     70 8C 83 8C 
3792c     83 8C 83 8C 
37930     83 8C 96 8C 
37934     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
37938     95 8C A9 8C 
3793c     A9 8C A8 8C 
37940     A8 8C A8 8C 
37944     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
37948     BB 8C BB 8C 
3794c     BB 8C CE 8C 
37950     CE 8C CE 8C 
37954     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
37958     E0 8C E1 8C 
3795c     E1 8C E0 8C 
37960     F4 8C F2 8C 
37964     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
37968     05 8D 05 8D 
3796c     06 8D 06 8D 
37970     19 8D 19 8D 
37974     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
37978     18 8D 2B 8D 
3797c     2B 8D 2B 8D 
37980     2A 8D 3E 8D 
37984     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
37988     3E 8D 51 8D 
3798c     50 8D 50 8D 
37990     50 8D 51 8D 
37994     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
37998     63 8D 64 8D 
3799c     76 8D 75 8D 
379a0     75 8D 76 8D 
379a4     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
379a8     88 8D 88 8D 
379ac     89 8D 9B 8D 
379b0     9A 8D 9B 8D 
379b4     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
379b8     AD 8D AE 8D 
379bc     AD 8D AE 8D 
379c0     C1 8D C1 8D 
379c4     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
379c8     D3 8D D3 8D 
379cc     D3 8D D3 8D 
379d0     D3 8D E6 8D 
379d4     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
379d8     E6 8D E6 8D 
379dc     F9 8D F9 8D 
379e0     F9 8D F8 8D 
379e4     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
379e8     0B 8E 0B 8E 
379ec     1D 8E 1D 8E 
379f0     1E 8E 1E 8E 
379f4     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
379f8     31 8E 31 8E 
379fc     31 8E 42 8E 
37a00     43 8E 43 8E 
37a04     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
37a08     56 8E 56 8E 
37a0c     55 8E 56 8E 
37a10     68 8E 69 8E 
37a14     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
37a18     69 8E 7B 8E 
37a1c     7C 8E 7B 8E 
37a20     7B 8E 8D 8E 
37a24     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
37a28     8D 8E A1 8E 
37a2c     A0 8E A1 8E 
37a30     A1 8E A0 8E 
37a34     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
37a38     B3 8E B3 8E 
37a3c     C6 8E C5 8E 
37a40     C6 8E C6 8E 
37a44     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
37a48     D8 8E D9 8E 
37a4c     D8 8E EC 8E 
37a50     EB 8E EC 8E 
37a54     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
37a58     FE 8E FE 8E 
37a5c     FE 8E FE 8E 
37a60     10 8F 10 8F 
37a64     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
37a68     11 8F 23 8F 
37a6c     24 8F 23 8F 
37a70     24 8F 37 8F 
37a74     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
37a78     36 8F 36 8F 
37a7c     48 8F 49 8F 
37a80     49 8F 49 8F 
37a84     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
37a88     5B 8F 5C 8F 
37a8c     5B 8F 6E 8F 
37a90     6E 8F 6E 8F 
37a94     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
37a98     81 8F 81 8F 
37a9c     81 8F 81 8F 
37aa0     93 8F 93 8F 
37aa4     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
37aa8     93 8F A6 8F 
37aac     A6 8F A6 8F 
37ab0     A6 8F B9 8F 
37ab4     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
37ab8     B9 8F B9 8F 
37abc     CC 8F CB 8F 
37ac0     CB 8F CC 8F 
37ac4     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
37ac8     DF 8F DE 8F 
37acc     DE 8F F1 8F 
37ad0     F1 8F F1 8F 
37ad4     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
37ad8     03 90 04 90 
37adc     04 90 04 90 
37ae0     16 90 17 90 
37ae4     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
37ae8     29 90 28 90 
37aec     29 90 28 90 
37af0     29 90 3C 90 
37af4     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
37af8     3C 90 4F 90 
37afc     4E 90 4E 90 
37b00     4E 90 4E 90 
37b04     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
37b08     61 90 61 90 
37b0c     73 90 74 90 
37b10     74 90 74 90 
37b14     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
37b18     87 90 86 90 
37b1c     87 90 86 90 
37b20     99 90 99 90 
37b24     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
37b28     AB 90 AB 90 
37b2c     AC 90 AB 90 
37b30     AB 90 BF 90 
37b34     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
37b38     BE 90 D1 90 
37b3c     D0 90 D1 90 
37b40     D1 90 D1 90 
37b44     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
37b48     E3 90 E4 90 
37b4c     F6 90 F6 90 
37b50     F6 90 F6 90 
37b54     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
37b58     09 91 0A 91 
37b5c     0A 91 1C 91 
37b60     1C 91 1C 91 
37b64     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
37b68     2F 91 2E 91 
37b6c     2F 91 2F 91 
37b70     2E 91 41 91 
37b74     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
37b78     41 91 53 91 
37b7c     54 91 54 91 
37b80     53 91 54 91 
37b84     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
37b88     67 91 67 91 
37b8c     79 91 7A 91 
37b90     79 91 78 91 
37b94     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
37b98     8C 91 8B 91 
37b9c     8C 91 8C 91 
37ba0     9E 91 9E 91 
37ba4     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
37ba8     B1 91 B1 91 
37bac     B2 91 B1 91 
37bb0     B1 91 C4 91 
37bb4     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
37bb8     C4 91 D6 91 
37bbc     D7 91 D7 91 
37bc0     D7 91 D6 91 
37bc4     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
37bc8     EA 91 EA 91 
37bcc     EA 91 FC 91 
37bd0     FC 91 FB 91 
37bd4     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
37bd8     0E 92 0F 92 
37bdc     0F 92 0E 92 
37be0     21 92 21 92 
37be4     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
37be8     21 92 34 92 
37bec     33 92 34 92 
37bf0     34 92 47 92 
37bf4     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
37bf8     46 92 47 92 
37bfc     59 92 59 92 
37c00     59 92 59 92 
37c04     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
37c08     6C 92 6C 92 
37c0c     6B 92 7E 92 
37c10     7E 92 7E 92 
37c14     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
37c18     92 92 91 92 
37c1c     91 92 90 92 
37c20     91 92 A4 92 
37c24     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
37c28     A3 92 B6 92 
37c2c     B6 92 B7 92 
37c30     B7 92 B6 92 
37c34     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
37c38     CA 92 C9 92 
37c3c     CA 92 DC 92 
37c40     DC 92 DC 92 
37c44     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
37c48     EF 92 EF 92 
37c4c     EF 92 EF 92 
37c50     01 93 01 93 
37c54     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
37c58     15 93 14 93 
37c5c     14 93 14 93 
37c60     14 93 27 93 
37c64     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
37c68     27 93 39 93 
37c6c     3A 93 39 93 
37c70     39 93 39 93 
37c74     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
37c78     4B 93 4C 93 
37c7c     5F 93 5F 93 
37c80     5F 93 5E 93 
37c84     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
37c88     5F 93 84 93 
37c8c     4C 93 96 93 
37c90     5F 93 AE 94 
37c94     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
37c98     7B C1 00 00 
37c9c     00 00 00 00 
37ca0     00 00 00 00 
37ca4     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37ca8     00 00 00 00 | 	byte	$00, $00, $00, $00
37cac     7A D7 00 80 
37cb0     87 8A 48 8F 
37cb4     EC 8C 76 8D 
37cb8     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
37cbc     3C 8D 82 8D 
37cc0     42 8D 88 8D 
37cc4     8C 8D 8E 8D 
37cc8     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
37ccc     97 8D DE 8D 
37cd0     E1 8D F1 8E 
37cd4     D8 8C A3 83 
37cd8     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
37cdc     65 71 C9 65 
37ce0     FC 64 C4 65 
37ce4     C1 65 BF 65 
37ce8     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
37cec     B6 65 B4 65 
37cf0     B2 65 AE 65 
37cf4     AC 65 ED 65 
37cf8     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
37cfc     5E 65 25 66 
37d00     FA 62 23 6B 
37d04     B5 6C 61 0A 
37d08     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
37d0c     5D 90 BE 8D 
37d10     47 8E C3 8D 
37d14     09 8E C9 8D 
37d18     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
37d1c     15 8E 19 8E 
37d20     1B 8E 62 8E 
37d24     64 8E 68 8E 
37d28     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
37d2c     B5 8E 4C 90 
37d30     FA 84 3C 9D 
37d34     98 13 79 6D 
37d38     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
37d3c     D9 66 50 66 
37d40     D4 66 4B 66 
37d44     8C 66 46 66 
37d48     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
37d4c     81 66 3A 66 
37d50     7C 66 36 66 
37d54     76 66 30 66 
37d58     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
37d5c     6B 66 88 72 
37d60     BF 37 E7 B7 
37d64     75 83 8B 8E 
37d68     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
37d6c     94 8E 96 8E 
37d70     DD 8E 9C 8E 
37d74     E2 8E A2 8E 
37d78     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
37d7c     EE 8E AE 8E 
37d80     38 8F B5 8E 
37d84     3F 8F FD 8E 
37d88     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
37d8c     A5 87 1E E3 
37d90     6D 5D FA 71 
37d94     41 64 25 67 
37d98     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
37d9c     D9 66 1A 67 
37da0     18 67 15 67 
37da4     12 67 0F 67 
37da8     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
37dac     07 67 C0 66 
37db0     01 67 BC 66 
37db4     B8 66 DE 64 
37db8     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
37dbc     43 E5 1F 8B 
37dc0     14 8A F1 90 
37dc4     1C 8F 63 8F 
37dc8     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
37dcc     29 8F 6E 8F 
37dd0     72 8F 75 8F 
37dd4     34 8F BE 8F 
37dd8     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
37ddc     84 8F 87 8F 
37de0     CC 8F 56 90 
37de4     67 91 49 80 
37de8     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
37dec     46 77 A6 66 
37df0     E8 66 B0 67 
37df4     AD 67 ED 67 
37df8     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
37dfc     A2 67 E3 67 
37e00     9D 67 9A 67 
37e04     98 67 94 67 
37e08     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
37e0c     49 67 CD 67 
37e10     28 65 5F 6E 
37e14     82 67 3A 01 
37e18     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
37e1c     C2 91 A9 8F 
37e20     EF 8F AE 8F 
37e24     F4 8F B5 8F 
37e28     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
37e2c     01 90 03 90 
37e30     07 90 09 90 
37e34     0C 90 53 90 
37e38     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
37e3c     18 90 44 93 
37e40     85 84 D6 9D 
37e44     87 1F 2F 75 
37e48     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
37e4c     C4 68 F6 67 
37e50     BE 68 F1 67 
37e54     76 68 2E 68 
37e58     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
37e5c     27 68 24 68 
37e60     64 68 1E 68 
37e64     5F 68 19 68 
37e68     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
37e6c     DC 68 56 72 
37e70     7E 36 C2 B8 
37e74     D7 84 73 90 
37e78     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
37e7c     7B 90 7F 90 
37e80     82 90 84 90 
37e84     CB 90 8B 90 
37e88     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
37e8c     D7 90 96 90 
37e90     20 91 59 90 
37e94     25 91 A2 90 
37e98     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
37e9c     D0 89 40 EE 
37ea0     12 64 C4 71 
37ea4     29 66 0C 69 
37ea8     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
37eac     C0 68 02 69 
37eb0     FE 68 FB 68 
37eb4     F9 68 F6 68 
37eb8     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
37ebc     EE 68 A8 68 
37ec0     2C 69 5F 68 
37ec4     E2 68 81 66 
37ec8     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
37ecc     1E EB A6 8A 
37ed0     73 8B 5E 93 
37ed4     7B 90 48 91 
37ed8     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
37edc     0D 91 11 91 
37ee0     14 91 16 91 
37ee4     5C 91 1C 91 
37ee8     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
37eec     68 91 AF 91 
37ef0     2A 91 B5 91 
37ef4     75 91 1A 94 
37ef8     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
37efc     70 0E CB 6C 
37f00     5D 6E C4 67 
37f04     99 69 54 69 
37f08     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
37f0c     D2 69 49 69 
37f10     89 69 86 69 
37f14     40 69 C4 69 
37f18     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
37f1c     35 69 76 69 
37f20     58 67 EB 6D 
37f24     E9 6D 89 0F 
37f28     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
37f2c     33 94 94 91 
37f30     D9 91 56 91 
37f34     E0 91 9F 91 
37f38     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
37f3c     EC 91 EE 91 
37f40     F1 91 F4 91 
37f44     F7 91 3D 92 
37f48     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
37f4c     46 92 21 94 
37f50     11 89 A4 9D 
37f54     FD 0E 8F 6C 
37f58     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
37f5c     28 6A E1 69 
37f60     65 6A 1F 6A 
37f64     5F 6A 1A 6A 
37f68     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
37f6c     54 6A 0F 6A 
37f70     4F 6A 09 6A 
37f74     06 6A 03 6A 
37f78     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
37f7c     23 68 69 77 
37f80     3A 4D 38 CA 
37f84     38 86 4E 91 
37f88     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
37f8c     64 92 24 92 
37f90     6A 92 2A 92 
37f94     70 92 30 92 
37f98     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
37f9c     7B 92 7E 92 
37fa0     C5 92 84 92 
37fa4     CB 92 8A 92 
37fa8     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
37fac     4D 8D F9 E2 
37fb0     97 59 FE 74 
37fb4     DB 68 6D 6A 
37fb8     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
37fbc     A8 6A A5 6A 
37fc0     A3 6A 9F 6A 
37fc4     9D 6A 9B 6A 
37fc8     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
37fcc     D6 6A 8F 6A 
37fd0     CF 6A 46 6A 
37fd4     CA 6A E1 67 
37fd8     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
37fdc     D3 F7 15 92 
37fe0     90 8C BF 94 
37fe4     A6 92 EB 92 
37fe8     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
37fec     B1 92 F7 92 
37ff0     FA 92 FD 92 
37ff4     00 93 02 93 
37ff8     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
37ffc     4F 93 52 93 
38000     54 93 22 94 
38004     5A 93 8F 88 
38008     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
3800c     1C 77 07 6C 
38010     E8 69 7A 6B 
38014     34 6B 75 6B 
38018     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
3801c     29 6B 26 6B 
38020     24 6B 21 6B 
38024     1D 6B 5E 6B 
38028     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
3802c     12 6B 52 6B 
38030     34 69 34 6E 
38034     BA 73 A4 24 
38038     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
3803c     7A 94 B3 93 
38040     72 93 31 93 
38044     78 93 7A 93 
38048     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
3804c     83 93 86 93 
38050     89 93 D0 93 
38054     D2 93 D5 93 
38058     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
3805c     DD 93 40 96 
38060     30 8B 99 9C 
38064     52 10 94 71 
38068     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
3806c     46 6C 79 6B 
38070     40 6C B7 6B 
38074     F7 6B B1 6B 
38078     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
3807c     EC 6B A5 6B 
38080     A2 6B 9F 6B 
38084     9D 6B 9A 6B 
38088     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
3808c     C8 6A E4 76 
38090     20 4B F9 CE 
38094     2E 8A 1A 92 
38098     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
3809c     FB 93 BA 93 
380a0     01 94 03 94 
380a4     4A 94 09 94 
380a8     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
380ac     55 94 14 94 
380b0     9E 94 1A 94 
380b4     61 94 20 94 
380b8     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
380bc     3E 87 E5 CD 
380c0     5F 50 6C 78 
380c4     B5 6A 04 6C 
380c8     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
380cc     83 6C 7F 6C 
380d0     7C 6C 36 6C 
380d4     76 6C 74 6C 
380d8     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
380dc     6B 6C 25 6C 
380e0     66 6C 1F 6C 
380e4     1D 6C 41 6A 
380e8     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
380ec     BA FA FC 94 
380f0     5B 8D 97 96 
380f4     3B 94 C5 94 
380f8     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
380fc     89 94 8C 94 
38100     8F 94 92 94 
38104     94 94 DB 94 
38108     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
3810c     E4 94 E7 94 
38110     2D 95 74 95 
38114     C8 96 15 89 
38118     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
3811c     CB 75 31 6F 
38120     7E 6B 10 6D 
38124     C9 6C 0A 6D 
38128     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
3812c     BD 6C FF 6C 
38130     FB 6C F9 6C 
38134     B2 6C F3 6C 
38138     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
3813c     A7 6C E8 6C 
38140     0D 6B 85 6F 
38144     C7 74 10 28 
38148     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
3814c     96 96 47 95 
38150     06 95 0A 95 
38154     0C 95 0F 95 
38158     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
3815c     17 95 5E 95 
38160     61 95 63 95 
38164     22 95 AC 95 
38168     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
3816c     72 95 17 98 
38170     59 8E 01 96 
38174     CF FC 5A 68 
38178     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
3817c     96 6D 50 6D 
38180     D5 6D 4A 6D 
38184     8C 6D 89 6D 
38188     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
3818c     80 6D 3A 6D 
38190     7A 6D 77 6D 
38194     75 6D 71 6D 
38198     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
3819c     18 6C BC 78 
381a0     9A 4F 7E CF 
381a4     1F 89 F1 93 
381a8     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
381ac     D2 95 4E 95 
381b0     D7 95 53 95 
381b4     DD 95 E0 95 
381b8     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
381bc     A5 95 EB 95 
381c0     EE 95 F0 95 
381c4     37 96 B3 95 
381c8     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
381cc     1A 98 D5 8D 
381d0     C5 9F CD 0F 
381d4     0F 71 F3 73 
381d8     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
381dc     D9 6D 5E 6E 
381e0     D3 6D 58 6E 
381e4     12 6E 0F 6E 
381e8     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
381ec     49 6E BF 6D 
381f0     87 6E 76 6D 
381f4     81 6E 11 6B 
381f8     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
381fc     3F 09 44 95 
38200     E5 8D 3F 99 
38204     D4 95 A2 96 
38208     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
3820c     23 96 69 96 
38210     6B 96 6E 96 
38214     71 96 74 96 
38218     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
3821c     BF 96 3C 96 
38220     C6 96 C8 96 
38224     A3 98 51 8D 
38228     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
3822c     CF 75 29 73 
38230     90 6C EC 6E 
38234     62 6E E7 6E 
38238     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
3823c     9A 6E 98 6E 
38240     95 6E 91 6E 
38244     8E 6E CF 6E 
38248     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
3824c     40 6E C3 6E 
38250     E8 6C 45 6F 
38254     A5 7B C9 35 
38258     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
3825c     2D 98 23 97 
38260     E1 96 A0 96 
38264     A4 96 EA 96 
38268     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
3826c     AF 96 F4 96 
38270     F8 96 3E 97 
38274     FD 96 43 97 
38278     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
3827c     08 97 6B 99 
38280     D6 92 88 91 
38284     D8 EE 84 66 
38288     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
3828c     2E 6F E7 6E 
38290     6C 6F 24 6F 
38294     21 6F 1F 6F 
38298     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
3829c     17 6F 13 6F 
382a0     54 6F 0E 6F 
382a4     0B 6F 4B 6F 
382a8     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
382ac     27 6D 1C 7B 
382b0     19 59 9F DB 
382b4     66 8E BC 94 
382b8     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
382bc     67 97 26 97 
382c0     6D 97 2B 97 
382c4     72 97 32 97 
382c8     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
382cc     C1 97 7F 97 
382d0     C6 97 85 97 
382d4     CB 97 CE 97 
382d8     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
382dc     EC 8A C4 C6 
382e0     68 4C F4 7D 
382e4     63 6E E8 6E 
382e8     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
382ec     ED 6F A7 6F 
382f0     E7 6F A0 6F 
382f4     E1 6F 9B 6F 
382f8     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
382fc     D5 6F 8F 6F 
38300     CE 6F 45 6F 
38304     86 6F 68 6D 
38308     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
3830c     C0 13 AD A2 
38310     A7 8E 79 99 
38314     E6 97 E8 97 
38318     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
3831c     F1 97 F3 97 
38320     F6 97 F9 97 
38324     FB 97 FE 97 
38328     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
3832c     4A 98 0A 98 
38330     93 98 0F 98 
38334     7F 9B BF 8C 
38338     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
3833c     91 7B 62 73 
38340     1A 6E B9 70 
38344     EB 6F B3 70 
38348     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
3834c     25 70 20 70 
38350     1E 70 1B 70 
38354     18 70 15 70 
38358     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
3835c     0D 70 09 70 
38360     07 70 03 70 
38364     01 70 FD 6F 
38368     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
3836c     F6 6F F2 6F 
38370     EF 6F EC 6F 
38374     2C 70 E6 6F 
38378     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
3837c     DD 6F 97 6F 
38380     D7 6F 84 6E 
38384     8F 6F 3F 7D 
38388     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
3838a     FF FF FF FF 
3838e     FF FF       | atarist_spl file "atarist.spl" '512
38390     00 00 00 00 
38394     00 00 00 00 
38398     00 00       | 	byte	$00[10]
3839a     17 7F F2 7F 
3839e     B2 7F 72 7F 
383a2     33 7F F4 7E 
383a6     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
383aa     36 7E F5 7D 
383ae     E9 51 F2 0D 
383b2     8E 00 F3 FD 
383b6     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
383ba     57 FD 58 FD 
383be     5B FD 5C FD 
383c2     5C FD 60 7D 
383c6     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
383ca     D6 7C 98 7C 
383ce     59 7C 1A 7C 
383d2     DC 7B 9E 7B 
383d6     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
383da     F3 05 00 FD 
383de     41 FB EA FA 
383e2     D9 FA DB FA 
383e6     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
383ea     E4 FA 9B 36 
383ee     F8 7A C0 7A 
383f2     84 7A 45 7A 
383f6     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
383fa     8E 79 51 79 
383fe     15 79 D7 78 
38402     3C 1F EB FF 
38406     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
3840a     6D F8 65 F8 
3840e     68 F8 6D F8 
38412     70 F8 74 F8 
38416     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
3841a     AB 60 79 60 
3841e     4B 60 1A 60 
38422     E9 5F B9 5F 
38426     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
3842a     FB 59 B2 0B 
3842e     92 FA 3A F7 
38432     96 F6 79 F6 
38436     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
3843a     82 F6 86 F6 
3843e     8C F6 DB 5D 
38442     F1 5E C1 5E 
38446     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
3844a     34 5E 04 5E 
3844e     D6 5D A6 5D 
38452     78 5D D4 3E 
38456     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
3845a     27 F5 BA F4 
3845e     AB F4 AD F4 
38462     B2 F4 B8 F4 
38466     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
3846a     26 5D 2B 5D 
3846e     FC 5C CD 5C 
38472     9F 5C 70 5C 
38476     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
3847a     E5 5B B8 5B 
3847e     DB 24 A7 FC 
38482     D1 F4 4D F3 
38486     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
3848a     04 F3 0B F3 
3848e     11 F3 16 F3 
38492     DE 18 98 5B 
38496     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
3849a     4E 4A 29 48 
3849e     A0 47 6A 47 
384a2     43 47 20 47 
384a6     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
384aa     E2 F6 98 F2 
384ae     C5 F1 A3 F1 
384b2     A3 F1 A8 F1 
384b6     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
384ba     BF F1 00 3D 
384be     EF 46 CD 46 
384c2     AA 46 86 46 
384c6     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
384ca     1C 46 F9 45 
384ce     D7 45 EE 43 
384d2     DE 02 E8 F3 
384d6     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
384da     61 F0 65 F0 
384de     6D F0 74 F0 
384e2     7C F0 84 F0 
384e6     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
384ea     8E 45 6D 45 
384ee     49 45 27 45 
384f2     05 45 E1 44 
384f6     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
384fa     F1 2F A9 FB 
384fe     8B F1 9B EF 
38502     40 EF 36 EF 
38506     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
3850a     4D EF 56 EF 
3850e     5E EF 7B 44 
38512     8C 44 69 44 
38516     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
3851a     03 44 E1 43 
3851e     C0 43 F5 37 
38522     69 33 0F 11 
38526     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
3852a     66 EE 37 EE 
3852e     38 EE 40 EE 
38532     48 EE 51 EE 
38536     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
3853a     7D 32 6A 32 
3853e     51 32 37 32 
38542     1F 32 05 32 
38546     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
3854a     B9 31 A1 31 
3854e     F1 04 F4 F1 
38552     50 EE A0 ED 
38556     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
3855a     93 ED 9A ED 
3855e     A4 ED AD ED 
38562     F4 27 C1 31 
38566     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
3856a     78 31 5F 31 
3856e     46 31 2E 31 
38572     15 31 FC 30 
38576     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
3857a     C4 EF 4A ED 
3857e     DC EC CB EC 
38582     D2 EC DA EC 
38586     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
3858a     F9 EC 64 2F 
3858e     0A 31 F1 30 
38592     D9 30 C0 30 
38596     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
3859a     78 30 5F 30 
3859e     46 30 38 23 
385a2     A6 F6 19 EE 
385a6     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
385aa     20 EC 28 EC 
385ae     32 EC 3C EC 
385b2     47 EC 51 EC 
385b6     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
385ba     A3 22 93 22 
385be     7F 22 6E 22 
385c2     5D 22 4C 22 
385c6     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
385ca     77 09 76 F1 
385ce     CC EC F0 EB 
385d2     CD EB CE EB 
385d6     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
385da     ED EB F5 EB 
385de     3E F6 6B 22 
385e2     5F 22 4E 22 
385e6     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
385ea     1B 22 0B 22 
385ee     FA 21 E9 21 
385f2     D8 21 4D FF 
385f6     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
385fa     92 EB 7B EB 
385fe     82 EB 8C EB 
38602     97 EB A1 EB 
38606     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
3860a     15 22 04 22 
3860e     F3 21 E3 21 
38612     D2 21 C0 21 
38616     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
3861a     8E 21 7D 21 
3861e     9A F8 A4 ED 
38622     8E EB 2F EB 
38626     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
3862a     37 EB 42 EB 
3862e     4C EB 57 EB 
38632     B2 17 22 19 
38636     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
3863a     FD 18 EF 18 
3863e     E3 18 D6 18 
38642     CA 18 BD 18 
38646     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
3864a     60 EC 35 EB 
3864e     01 EB 01 EB 
38652     0C EB 16 EB 
38656     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
3865a     34 EB D0 18 
3865e     00 19 F4 18 
38662     E8 18 DA 18 
38666     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
3866a     B6 18 A9 18 
3866e     9D 18 91 05 
38672     F0 EF CA EB 
38676     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3867a     E8 EA F2 EA 
3867e     FE EA 07 EB 
38682     12 EB C2 EF 
38686     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3868a     D9 18 CD 18 
3868e     C0 18 B3 18 
38692     A7 18 9B 18 
38696     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3869a     B8 FC 30 EE 
3869e     61 EB DC EA 
386a2     CD EA D2 EA 
386a6     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
386aa     F3 EA FE EA 
386ae     D2 09 D1 18 
386b2     C3 18 17 18 
386b6     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
386ba     66 11 52 11 
386be     49 11 41 11 
386c2     38 11 E0 F4 
386c6     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
386ca     C9 EA C5 EA 
386ce     CF EA DB EA 
386d2     E6 EA EF EA 
386d6     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
386da     89 11 80 11 
386de     78 11 6E 11 
386e2     67 11 5D 11 
386e6     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
386ea     43 11 32 0D 
386ee     9C F1 07 EC 
386f2     F8 EA CD EA 
386f6     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
386fa     E4 EA ED EA 
386fe     F8 EA 02 EB 
38702     55 11 91 11 
38706     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
3870a     75 11 6E 11 
3870e     64 11 5E 11 
38712     54 11 4A 11 
38716     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
3871a     A8 EB F1 EA 
3871e     D9 EA DC EA 
38722     E8 EA F1 EA 
38726     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
3872a     A6 EB 9E 11 
3872e     A0 11 96 11 
38732     8D 11 85 11 
38736     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
3873a     6A 11 CA 0D 
3873e     36 0B 57 F8 
38742     6C ED 57 EB 
38746     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
3874a     F4 EA FF EA 
3874e     09 EB 15 EB 
38752     1E EB 1A FD 
38756     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
3875a     ED 0A E8 0A 
3875e     E2 0A DC 0A 
38762     D6 0A D1 0A 
38766     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
3876a     F8 F3 BC EC 
3876e     57 EB 1E EB 
38772     18 EB 24 EB 
38776     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3877a     42 EB 4D EB 
3877e     08 09 20 0B 
38782     1A 0B 14 0B 
38786     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3878a     04 0B FE 0A 
3878e     F9 0A F2 0A 
38792     84 08 3A F1 
38796     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3879a     42 EB 42 EB 
3879e     4E EB 57 EB 
387a2     62 EB 6B EB 
387a6     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
387aa     48 0B 43 0B 
387ae     3C 0B 36 0B 
387b2     31 0B 2C 0B 
387b6     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
387ba     1B 0B 5C 00 
387be     6A EF 1B EC 
387c2     81 EB 6A EB 
387c6     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
387ca     85 EB 8E EB 
387ce     99 EB A3 EB 
387d2     DD 05 E5 05 
387d6     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
387da     DB 05 D8 05 
387de     D5 05 D1 05 
387e2     D0 05 CB 05 
387e6     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
387ea     0C EC BB EB 
387ee     B3 EB BB EB 
387f2     C5 EB D0 EB 
387f6     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
387fa     E4 F7 2C 06 
387fe     28 06 24 06 
38802     22 06 1F 06 
38806     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
3880a     16 06 14 06 
3880e     0F 06 D0 F3 
38812     65 ED 2D EC 
38816     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
3881a     01 EC 0A EC 
3881e     14 EC 1E EC 
38822     29 EC FB 03 
38826     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
3882a     63 06 60 06 
3882e     5E 06 59 06 
38832     58 06 54 06 
38836     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
3883a     69 F1 21 ED 
3883e     55 EC 33 EC 
38842     36 EC 40 EC 
38846     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
3884a     5C EC 68 EC 
3884e     92 02 D9 02 
38852     D7 02 D7 02 
38856     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
3885a     D1 02 D1 02 
3885e     CE 02 CD 02 
38862     5D FC 80 EF 
38866     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
3886a     83 EC 8A EC 
3886e     93 EC 9C EC 
38872     A5 EC B1 EC 
38876     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3887a     2B 03 2A 03 
3887e     29 03 26 03 
38882     25 03 24 03 
38886     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3888a     1F 03 70 F7 
3888e     D0 EE 27 ED 
38892     DB EC D4 EC 
38896     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3889a     F0 EC FA EC 
3889e     02 ED F9 F4 
388a2     7B 03 7C 03 
388a6     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
388aa     75 03 73 03 
388ae     72 03 70 03 
388b2     6D 03 6C 03 
388b6     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
388ba     54 ED 22 ED 
388be     22 ED 2C ED 
388c2     35 ED 3F ED 
388c6     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
388ca     14 01 C3 03 
388ce     C1 03 C0 03 
388d2     5F 01 A5 00 
388d6     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
388da     7B 00 7C 00 
388de     20 00 85 F1 
388e2     2A EE 89 ED 
388e6     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
388ea     80 ED 87 ED 
388ee     90 ED 9A ED 
388f2     A3 ED 73 00 
388f6     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
388fa     D0 00 D0 00 
388fe     D0 00 D0 00 
38902     D0 00 CF 00 
38906     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
3890a     80 F0 3D EE 
3890e     D5 ED C7 ED 
38912     CD ED D6 ED 
38916     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
3891a     F2 ED FA ED 
3891e     1D 01 29 01 
38922     27 01 27 01 
38926     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
3892a     25 01 26 01 
3892e     26 01 23 01 
38932     D0 F7 EC EF 
38936     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
3893a     1C EE 24 EE 
3893e     2D EE 37 EE 
38942     40 EE 47 EE 
38946     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
3894a     7D 01 7B 01 
3894e     7A 01 7A 01 
38952     79 01 78 01 
38956     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
3895a     84 FE DE F3 
3895e     6C EF 93 EE 
38962     72 EE 72 EE 
38966     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
3896a     8B EE 95 EE 
3896e     9E EE 15 FC 
38972     67 FE 67 FE 
38976     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3897a     6B FE 6B FE 
3897e     6D FE 6D FE 
38982     6D FE 6F FE 
38986     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3898a     DF EE CC EE 
3898e     CF EE D9 EE 
38992     E1 EE EA EE 
38996     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3899a     5A FE C4 FE 
3899e     C3 FE C5 FE 
389a2     C6 FE C6 FE 
389a6     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
389aa     C8 FE C7 FE 
389ae     DA FB 85 F1 
389b2     8D EF 31 EF 
389b6     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
389ba     34 EF 3E EF 
389be     46 EF 4F EF 
389c2     57 EF 0D FF 
389c6     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
389ca     1F FF 1F FF 
389ce     21 FF 21 FF 
389d2     21 FF 21 FF 
389d6     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
389da     15 F1 BE EF 
389de     84 EF 7E EF 
389e2     88 EF 8F EF 
389e6     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
389ea     A9 EF 06 F2 
389ee     A6 FC AB FC 
389f2     AD FC AE FC 
389f6     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
389fa     B2 FC B4 FC 
389fe     B6 FC B7 FC 
38a02     8B F4 BD F0 
38a06     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
38a0a     E4 EF EE EF 
38a0e     F6 EF FD EF 
38a12     04 F0 0E F0 
38a16     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
38a1a     0B FD 0D FD 
38a1e     0F FD 11 FD 
38a22     11 FD 13 FD 
38a26     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
38a2a     17 FD 64 F3 
38a2e     CD F0 52 F0 
38a32     41 F0 45 F0 
38a36     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
38a3a     5B F0 64 F0 
38a3e     6D F0 FB FC 
38a42     65 FD 68 FD 
38a46     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
38a4a     6C FD 6D FD 
38a4e     6F FD 70 FD 
38a52     72 FD B3 FB 
38a56     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
38a5a     A4 F0 99 F0 
38a5e     A0 F0 A8 F0 
38a62     AE F0 B9 F0 
38a66     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
38a6a     CB FB DD FB 
38a6e     DE FB E0 FB 
38a72     E3 FB E3 FB 
38a76     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
38a7a     E9 FB EC FB 
38a7e     62 F7 27 F2 
38a82     2A F1 FF F0 
38a86     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
38a8a     0C F1 13 F1 
38a8e     1B F1 23 F1 
38a92     33 F2 3C FC 
38a96     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
38a9a     42 FC 45 FC 
38a9e     47 FC 48 FC 
38aa2     4A FC 4C FC 
38aa6     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
38aaa     20 F2 77 F1 
38aae     5C F1 5F F1 
38ab2     64 F1 6C F1 
38ab6     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
38aba     83 F1 DC F8 
38abe     9A FC 9A FC 
38ac2     9B FC 9E FC 
38ac6     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
38aca     A3 FC A4 FC 
38ace     A6 FC A9 FC 
38ad2     90 F4 33 F2 
38ad6     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
38ada     BA F1 BF F1 
38ade     C7 F1 CE F1 
38ae2     D6 F1 DC F1 
38ae6     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
38aea     F3 FC F5 FC 
38aee     FE FB 79 FB 
38af2     62 FB 5F FB 
38af6     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
38afa     6F FA AF F3 
38afe     53 F2 12 F2 
38b02     0F F2 15 F2 
38b06     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
38b0a     2A F2 32 F2 
38b0e     38 F2 9A FB 
38b12     AF FB B1 FB 
38b16     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
38b1a     B7 FB B8 FB 
38b1e     BA FB BC FB 
38b22     C1 FB 3B F8 
38b26     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
38b2a     6E F2 6C F2 
38b2e     74 F2 7A F2 
38b32     81 F2 87 F2 
38b36     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
38b3a     06 FC 09 FC 
38b3e     0C FC 0E FC 
38b42     0F FC 12 FC 
38b46     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
38b4a     17 FC 1A FC 
38b4e     B2 F6 7B F3 
38b52     DD F2 C5 F2 
38b56     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
38b5a     D4 F2 DB F2 
38b5e     E0 F2 E8 F2 
38b62     28 F8 60 FC 
38b66     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
38b6a     64 FC 66 FC 
38b6e     68 FC 6A FC 
38b72     6D FC 52 FC 
38b76     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
38b7a     78 F3 24 F3 
38b7e     1A F3 1E F3 
38b82     24 F3 2A F3 
38b86     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
38b8a     3D F3 80 FA 
38b8e     0C FB 0F FB 
38b92     10 FB 14 FB 
38b96     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
38b9a     1B FB 1D FB 
38b9e     1F FB 92 FA 
38ba2     DE F4 AE F3 
38ba6     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
38baa     79 F3 7E F3 
38bae     84 F3 8C F3 
38bb2     92 F3 97 F3 
38bb6     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
38bba     67 FB 69 FB 
38bbe     6B FB 6F FB 
38bc2     71 FB 72 FB 
38bc6     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
38bca     E3 F8 BA F4 
38bce     EE F3 CC F3 
38bd2     CA F3 CF F3 
38bd6     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
38bda     E2 F3 E8 F3 
38bde     ED F3 B7 FB 
38be2     BC FB BE FB 
38be6     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
38bea     C4 FB C6 FB 
38bee     C8 FB C9 FB 
38bf2     CC FB 8F F7 
38bf6     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
38bfa     1E F4 1E F4 
38bfe     24 F4 2A F4 
38c02     30 F4 38 F4 
38c06     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
38c0a     AD FA B1 FA 
38c0e     B4 FA B6 FA 
38c12     BA FA BB FA 
38c16     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
38c1a     C2 FA C6 FA 
38c1e     55 F6 C6 F4 
38c22     7D F4 72 F4 
38c26     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
38c2a     83 F4 89 F4 
38c2e     8F F4 94 F4 
38c32     66 FA 03 FB 
38c36     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
38c3a     0A FB 0E FB 
38c3e     10 FB 11 FB 
38c42     16 FB 18 FB 
38c46     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
38c4a     F9 F4 CA F4 
38c4e     C5 F4 CB F4 
38c52     D1 F4 D7 F4 
38c56     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
38c5a     E8 F4 3F FB 
38c5e     56 FB 58 FB 
38c62     5A FB 5E FB 
38c66     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
38c6a     64 FB 64 FB 
38c6e     69 FB 99 F9 
38c72     E9 F5 33 F5 
38c76     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
38c7a     1D F5 22 F5 
38c7e     27 F5 2E F5 
38c82     32 F5 37 F5 
38c86     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
38c8a     BC FA BC FA 
38c8e     C1 FA C2 FA 
38c92     C4 FA C8 FA 
38c96     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
38c9a     F9 F7 DB F5 
38c9e     78 F5 69 F5 
38ca2     6A F5 70 F5 
38ca6     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
38caa     7F F5 85 F5 
38cae     6E F7 06 FB 
38cb2     0A FB 0B FB 
38cb6     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
38cba     14 FB 15 FB 
38cbe     18 FB 1B FB 
38cc2     1D FB 70 F7 
38cc6     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
38cca     B6 F5 BB F5 
38cce     C0 F5 C6 F5 
38cd2     CA F5 CF F5 
38cd6     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
38cda     54 FB 56 FB 
38cde     5A FB 5B FB 
38ce2     5E FB 5F FB 
38ce6     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
38cea     67 FB 52 FB 
38cee     29 F7 33 F6 
38cf2     06 F6 02 F6 
38cf6     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
38cfa     10 F6 16 F6 
38cfe     1A F6 1F F6 
38d02     81 FB 9F FB 
38d06     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
38d0a     51 FB F2 FA 
38d0e     E3 FA E3 FA 
38d12     E5 FA E9 FA 
38d16     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
38d1a     64 F6 4D F6 
38d1e     4D F6 53 F6 
38d22     57 F6 5C F6 
38d26     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
38d2a     6A F6 19 FB 
38d2e     1E FB 22 FB 
38d32     23 FB 24 FB 
38d36     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
38d3a     2C FB 2E FB 
38d3e     32 FB F0 F8 
38d42     01 F7 A5 F6 
38d46     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
38d4a     9F F6 A3 F6 
38d4e     A6 F6 AC F6 
38d52     B0 F6 EB F7 
38d56     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
38d5a     68 FB 6C FB 
38d5e     6E FB 71 FB 
38d62     72 FB 74 FB 
38d66     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
38d6a     71 F8 21 F7 
38d6e     E5 F6 DD F6 
38d72     E1 F6 E6 F6 
38d76     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
38d7a     F5 F6 F7 F6 
38d7e     F7 FA AB FB 
38d82     AD FB AF FB 
38d86     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
38d8a     B6 FB B9 FB 
38d8e     BB FB BC FB 
38d92     21 FB 07 F8 
38d96     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
38d9a     22 F7 26 F7 
38d9e     2B F7 2E F7 
38da2     34 F7 38 F7 
38da6     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
38daa     13 FB 16 FB 
38dae     17 FB 1B FB 
38db2     1E FB 20 FB 
38db6     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
38dba     26 FB 77 FA 
38dbe     F3 F7 7C F7 
38dc2     67 F7 6A F7 
38dc6     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
38dca     74 F7 7A F7 
38dce     7E F7 82 F7 
38dd2     53 FB 5A FB 
38dd6     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
38dda     5F FB 63 FB 
38dde     65 FB 67 FB 
38de2     69 FB 6A FB 
38de6     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
38dea     B5 F7 A9 F7 
38dee     AD F7 B0 F7 
38df2     B5 F7 B8 F7 
38df6     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
38dfa     6E F8 99 FB 
38dfe     9C FB 9D FB 
38e02     9F FB A4 FB 
38e06     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
38e0a     A9 FB AB FB 
38e0e     AD FB 46 F9 
38e12     26 F8 F0 F7 
38e16     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
38e1a     F4 F7 F8 F7 
38e1e     FB F7 FF F7 
38e22     03 F8 65 FA 
38e26     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
38e2a     2B FB 2F FB 
38e2e     30 FB 32 FB 
38e32     34 FB 38 FB 
38e36     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
38e3a     E9 F8 4A F8 
38e3e     2E F8 2C F8 
38e42     2F F8 36 F8 
38e46     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
38e4a     41 F8 44 F8 
38e4e     4A FB 67 FB 
38e52     68 FB 6B FB 
38e56     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
38e5a     73 FB 74 FB 
38e5e     78 FB 7A FB 
38e62     14 FB E7 F8 
38e66     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
38e6a     6D F8 70 F8 
38e6e     73 F8 78 F8 
38e72     7C F8 80 F8 
38e76     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
38e7a     A6 FB A7 FB 
38e7e     A9 FB AC FB 
38e82     AF FB B1 FB 
38e86     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
38e8a     B7 FB 73 FA 
38e8e     F8 F8 B4 F8 
38e92     A9 F8 AB F8 
38e96     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
38e9a     B4 F8 B8 F8 
38e9e     BB F8 FA F8 
38ea2     64 FB 65 FB 
38ea6     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
38eaa     6D FB 6F FB 
38eae     70 FB 74 FB 
38eb2     77 FB 77 FB 
38eb6     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
38eba     E9 F8 E4 F8 
38ebe     E8 F8 EB F8 
38ec2     EE F8 F2 F8 
38ec6     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
38eca     B5 FA 9F FB 
38ece     A1 FB A4 FB 
38ed2     A5 FB A9 FB 
38ed6     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
38eda     AE FB B1 FB 
38ede     B2 FB C7 F9 
38ee2     39 F9 22 F9 
38ee6     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
38eea     26 F9 2A F9 
38eee     2E F9 32 F9 
38ef2     33 F9 BA FB 
38ef6     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
38efa     DE FB E1 FB 
38efe     E2 FB E4 FB 
38f02     E5 FB E7 FB 
38f06     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
38f0a     C5 F9 67 F9 
38f0e     57 F9 56 F9 
38f12     5B F9 5F F9 
38f16     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
38f1a     68 F9 6C F9 
38f1e     0B FC 11 FC 
38f22     14 FC 15 FC 
38f26     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
38f2a     B5 FB B5 FB 
38f2e     B6 FB B8 FB 
38f32     E9 FA C8 F9 
38f36     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
38f3a     90 F9 94 F9 
38f3e     95 F9 99 F9 
38f42     9D F9 9F F9 
38f46     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
38f4a     DE FB DF FB 
38f4e     E2 FB E4 FB 
38f52     E6 FB E8 FB 
38f56     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
38f5a     EF FB AC FA 
38f5e     E9 F9 C7 F9 
38f62     C3 F9 C8 F9 
38f66     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
38f6a     D0 F9 D4 F9 
38f6e     D6 F9 0E FB 
38f72     11 FC 13 FC 
38f76     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
38f7a     19 FC 1B FC 
38f7e     1D FC 1E FC 
38f82     21 FC 22 FC 
38f86     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
38f8a     F7 F9 F7 F9 
38f8e     FB F9 FE F9 
38f92     00 FA 03 FA 
38f96     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
38f9a     1B FC 45 FC 
38f9e     46 FC 48 FC 
38fa2     4A FC 4B FC 
38fa6     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
38faa     52 FC 54 FC 
38fae     F3 FB 82 FA 
38fb2     35 FA 28 FA 
38fb6     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
38fba     31 FA 32 FA 
38fbe     37 FA 37 FA 
38fc2     3C FA 00 FC 
38fc6     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
38fca     09 FC 0B FC 
38fce     0F FC 12 FC 
38fd2     12 FC 15 FC 
38fd6     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
38fda     8D FA 60 FA 
38fde     5B FA 5C FA 
38fe2     60 FA 61 FA 
38fe6     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
38fea     6C FA 6D FA 
38fee     37 FC 3A FC 
38ff2     3B FC 3D FC 
38ff6     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
38ffa     43 FC 44 FC 
38ffe     45 FC 47 FC 
39002     51 FB AB FA 
39006     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
3900a     8E FA 91 FA 
3900e     93 FA 95 FA 
39012     98 FA 9B FA 
39016     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
3901a     68 FC 6A FC 
3901e     6C FC 6E FC 
39022     70 FC 72 FC 
39026     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
3902a     76 FC 3B FB 
3902e     D0 FA BB FA 
39032     B9 FA BD FA 
39036     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
3903a     C4 FA C6 FA 
3903e     CA FA 13 FC 
39042     3A FC 3A FC 
39046     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
3904a     41 FC 43 FC 
3904e     44 FC 47 FC 
39052     48 FC 3C FC 
39056     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
3905a     E6 FA E8 FA 
3905e     EB FA EE FA 
39062     F0 FA F2 FA 
39066     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
3906a     61 FC 66 FC 
3906e     68 FC 6B FC 
39072     6C FC 6E FC 
39076     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
3907a     73 FC 75 FC 
3907e     13 FC 3F FB 
39082     17 FB 12 FB 
39086     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
3908a     1A FB 1D FB 
3908e     1F FB 20 FB 
39092     23 FB 92 FC 
39096     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
3909a     96 FC 97 FC 
3909e     9A FC 9C FC 
390a2     9E FC 9F FC 
390a6     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
390aa     5A FB 41 FB 
390ae     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
390b2     73 32 00 04 
390b6     00 00 10 00 
390ba     00 00 00 00 
390be     00 00 00 00 | atari2 file "atari2.s2"
390c2     43 87 43 87 
390c6     43 87 44 87 
390ca     43 87 44 87 
390ce     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
390d2     43 87 43 87 
390d6     43 87 44 87 
390da     43 87 43 87 
390de     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
390e2     44 87 43 87 
390e6     44 87 43 87 
390ea     43 87 43 87 
390ee     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
390f2     43 87 43 87 
390f6     44 87 43 87 
390fa     44 87 44 87 
390fe     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
39102     43 87 43 87 
39106     44 87 43 87 
3910a     43 87 42 87 
3910e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
39112     43 87 43 87 
39116     43 87 43 87 
3911a     44 87 43 87 
3911e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
39122     44 87 44 87 
39126     43 87 44 87 
3912a     43 87 44 87 
3912e     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
39132     44 87 43 87 
39136     44 87 44 87 
3913a     43 87 43 87 
3913e     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39142     43 87 44 87 
39146     44 87 43 87 
3914a     43 87 44 87 
3914e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39152     43 87 43 87 
39156     43 87 43 87 
3915a     43 87 43 87 
3915e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
39162     42 87 43 87 
39166     44 87 42 87 
3916a     43 87 43 87 
3916e     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
39172     43 87 44 87 
39176     44 87 43 87 
3917a     43 87 43 87 
3917e     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39182     43 87 5C 87 
39186     EE 86 AC 87 
3918a     4C 7C A3 78 
3918e     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
39192     BC 78 BB 78 
39196     BD 78 BC 78 
3919a     BB 78 BD 78 
3919e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
391a2     BB 78 BB 78 
391a6     BC 78 BC 78 
391aa     BC 78 BB 78 
391ae     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
391b2     BC 78 BC 78 
391b6     BC 78 BC 78 
391ba     BC 78 BC 78 
391be     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
391c2     BB 78 BC 78 
391c6     A0 78 4C 7C 
391ca     11 7A 29 89 
391ce     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
391d2     44 87 43 87 
391d6     44 87 43 87 
391da     43 87 42 87 
391de     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
391e2     43 87 43 87 
391e6     44 87 ED 85 
391ea     71 85 52 79 
391ee     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
391f2     BC 78 BC 78 
391f6     BC 78 BC 78 
391fa     BC 78 BC 78 
391fe     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39202     BC 78 BC 78 
39206     BC 78 A0 78 
3920a     CF 7A B9 81 
3920e     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
39212     44 87 43 87 
39216     43 87 44 87 
3921a     43 87 44 87 
3921e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39222     43 87 43 87 
39226     43 87 43 87 
3922a     44 87 43 87 
3922e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
39232     43 87 43 87 
39236     44 87 43 87 
3923a     44 87 43 87 
3923e     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39242     44 87 43 87 
39246     43 87 43 87 
3924a     5A 87 39 81 
3924e     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
39252     A5 78 BC 78 
39256     BB 78 BC 78 
3925a     BB 78 BC 78 
3925e     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
39262     BC 78 BC 78 
39266     BC 78 BC 78 
3926a     BC 78 8F 79 
3926e     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
39272     09 85 47 87 
39276     43 87 43 87 
3927a     42 87 42 87 
3927e     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
39282     43 87 43 87 
39286     43 87 43 87 
3928a     43 87 44 87 
3928e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39292     43 87 43 87 
39296     44 87 43 87 
3929a     42 87 43 87 
3929e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
392a2     44 87 43 87 
392a6     43 87 43 87 
392aa     44 87 44 87 
392ae     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
392b2     94 78 55 7A 
392b6     B9 78 BC 78 
392ba     BC 78 BC 78 
392be     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
392c2     BC 78 BB 78 
392c6     BC 78 BC 78 
392ca     BC 78 BC 78 
392ce     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
392d2     BB 78 BC 78 
392d6     BC 78 BC 78 
392da     BB 78 BC 78 
392de     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
392e2     BC 78 BC 78 
392e6     BD 78 BC 78 
392ea     BC 78 BB 78 
392ee     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
392f2     94 78 B3 84 
392f6     36 84 4A 87 
392fa     43 87 43 87 
392fe     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
39302     43 87 44 87 
39306     43 87 43 87 
3930a     43 87 43 87 
3930e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39312     43 87 44 87 
39316     43 87 44 87 
3931a     43 87 43 87 
3931e     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
39322     43 87 43 87 
39326     43 87 45 87 
3932a     43 87 43 87 
3932e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
39332     43 87 44 87 
39336     44 87 44 87 
3933a     43 87 43 87 
3933e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
39342     43 87 42 87 
39346     43 87 43 87 
3934a     44 87 43 87 
3934e     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39352     54 87 3C 82 
39356     36 83 52 79 
3935a     C6 78 BC 78 
3935e     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
39362     BB 78 BB 78 
39366     BC 78 BC 78 
3936a     BC 78 BC 78 
3936e     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39372     BD 78 ED 78 
39376     1B 79 F4 83 
3937a     4D 83 4E 87 
3937e     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
39382     44 87 43 87 
39386     42 87 44 87 
3938a     43 87 42 87 
3938e     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
39392     43 87 54 87 
39396     26 82 B3 84 
3939a     D6 77 BB 78 
3939e     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
393a2     BC 78 BB 78 
393a6     BB 78 BB 78 
393aa     BB 78 BB 78 
393ae     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
393b2     BC 78 BC 78 
393b6     26 79 18 75 
393ba     36 83 1F 84 
393be     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
393c2     43 87 43 87 
393c6     43 87 43 87 
393ca     43 87 44 87 
393ce     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
393d2     43 87 44 87 
393d6     44 87 43 87 
393da     43 87 43 87 
393de     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
393e2     43 87 43 87 
393e6     43 87 43 87 
393ea     44 87 44 87 
393ee     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
393f2     44 87 43 87 
393f6     43 87 43 87 
393fa     43 87 44 87 
393fe     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39402     44 87 44 87 
39406     44 87 43 87 
3940a     44 87 43 87 
3940e     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
39412     43 87 43 87 
39416     43 87 44 87 
3941a     44 87 43 87 
3941e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
39422     43 87 43 87 
39426     43 87 43 87 
3942a     43 87 44 87 
3942e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39432     43 87 44 87 
39436     43 87 44 87 
3943a     19 87 7D 86 
3943e     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
39442     B1 78 BC 78 
39446     BC 78 BC 78 
3944a     BC 78 BC 78 
3944e     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39452     BC 78 BC 78 
39456     BD 78 BC 78 
3945a     B7 78 3B 7B 
3945e     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
39462     96 86 44 87 
39466     43 87 43 87 
3946a     43 87 43 87 
3946e     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
39472     44 87 44 87 
39476     43 87 44 87 
3947a     43 87 44 87 
3947e     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
39482     43 87 44 87 
39486     43 87 44 87 
3948a     43 87 44 87 
3948e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39492     43 87 44 87 
39496     43 87 43 87 
3949a     44 87 43 87 
3949e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
394a2     44 87 44 87 
394a6     43 87 43 87 
394aa     43 87 44 87 
394ae     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
394b2     43 87 43 87 
394b6     43 87 43 87 
394ba     44 87 44 87 
394be     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
394c2     36 83 CF 7A 
394c6     AB 78 BB 78 
394ca     BC 78 BC 78 
394ce     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
394d2     BB 78 BC 78 
394d6     BC 78 BC 78 
394da     BC 78 BC 78 
394de     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
394e2     BC 78 BC 78 
394e6     BC 78 BB 78 
394ea     BC 78 BC 78 
394ee     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
394f2     BB 78 BC 78 
394f6     BB 78 BC 78 
394fa     BC 78 BD 78 
394fe     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
39502     BC 78 BC 78 
39506     BC 78 BC 78 
3950a     BC 78 BD 78 
3950e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
39512     BC 78 BB 78 
39516     BC 78 BB 78 
3951a     BB 78 BC 78 
3951e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
39522     BC 78 BC 78 
39526     BC 78 BC 78 
3952a     BC 78 BB 78 
3952e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
39532     BC 78 BC 78 
39536     BC 78 BD 78 
3953a     BB 78 BC 78 
3953e     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
39542     BC 78 BC 78 
39546     BC 78 BB 78 
3954a     BC 78 BB 78 
3954e     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
39552     BB 78 BC 78 
39556     BC 78 BC 78 
3955a     BC 78 BB 78 
3955e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39562     BC 78 BC 78 
39566     BC 78 BB 78 
3956a     BC 78 BB 78 
3956e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39572     BC 78 BC 78 
39576     BC 78 BC 78 
3957a     BB 78 BC 78 
3957e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
39582     BC 78 9F 78 
39586     52 79 B3 84 
3958a     2F 86 60 87 
3958e     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
39592     44 87 43 87 
39596     43 87 43 87 
3959a     43 87 43 87 
3959e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
395a2     43 87 43 87 
395a6     43 87 44 87 
395aa     43 87 43 87 
395ae     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
395b2     43 87 43 87 
395b6     43 87 43 87 
395ba     43 87 44 87 
395be     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
395c2     44 87 44 87 
395c6     5E 87 BC 80 
395ca     FB 80 94 78 
395ce     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
395d2     BD 78 BC 78 
395d6     BB 78 BC 78 
395da     BB 78 BB 78 
395de     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
395e2     BC 78 BB 78 
395e6     BB 78 6B 79 
395ea     D6 77 AC 87 
395ee     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
395f2     43 87 44 87 
395f6     43 87 43 87 
395fa     44 87 43 87 
395fe     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39602     43 87 44 87 
39606     43 87 5C 87 
3960a     E7 80 00 80 
3960e     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
39612     BC 78 BD 78 
39616     BC 78 BC 78 
3961a     BC 78 BB 78 
3961e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39622     BC 78 BC 78 
39626     BB 78 BC 78 
3962a     BB 78 BC 78 
3962e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39632     BB 78 BC 78 
39636     BC 78 BC 78 
3963a     BC 78 BC 78 
3963e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39642     BC 78 BC 78 
39646     BC 78 BC 78 
3964a     A0 78 8D 7B 
3964e     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
39652     60 87 43 87 
39656     44 87 44 87 
3965a     43 87 43 87 
3965e     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
39662     44 87 43 87 
39666     43 87 43 87 
3966a     44 87 73 86 
3966e     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
39672     51 7B B6 78 
39676     BC 78 BD 78 
3967a     BC 78 BC 78 
3967e     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39682     BB 78 BC 78 
39686     BD 78 BB 78 
3968a     BC 78 BB 78 
3968e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
39692     BC 78 BC 78 
39696     BC 78 BC 78 
3969a     BB 78 BC 78 
3969e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
396a2     BC 78 BB 78 
396a6     BB 78 BC 78 
396aa     BC 78 BB 78 
396ae     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
396b2     22 8C AF 84 
396b6     48 87 43 87 
396ba     44 87 43 87 
396be     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
396c2     43 87 42 87 
396c6     43 87 43 87 
396ca     44 87 43 87 
396ce     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
396d2     43 87 43 87 
396d6     44 87 44 87 
396da     43 87 43 87 
396de     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
396e2     43 87 43 87 
396e6     43 87 43 87 
396ea     44 87 43 87 
396ee     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
396f2     9F 8B D6 77 
396f6     16 7C B3 78 
396fa     BC 78 BB 78 
396fe     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
39702     BB 78 BC 78 
39706     BB 78 BC 78 
3970a     BC 78 BC 78 
3970e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39712     BC 78 BB 78 
39716     BB 78 BC 78 
3971a     BB 78 BC 78 
3971e     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
39722     BB 78 BB 78 
39726     BC 78 BC 78 
3972a     BC 78 BB 78 
3972e     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
39732     BC 78 BC 78 
39736     BC 78 BD 78 
3973a     BB 78 BC 78 
3973e     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
39742     BC 78 BC 78 
39746     BC 78 BB 78 
3974a     BC 78 BC 78 
3974e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39752     A8 78 54 7E 
39756     F4 83 17 82 
3975a     50 87 43 87 
3975e     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
39762     44 87 43 87 
39766     44 87 43 87 
3976a     43 87 44 87 
3976e     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39772     43 87 28 87 
39776     20 85 CF 7A 
3977a     70 7D AD 78 
3977e     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
39782     BB 78 BC 78 
39786     BC 78 BC 78 
3978a     BB 78 BB 78 
3978e     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
39792     BB 78 B2 78 
39796     9A 7C CF 7A 
3979a     4A 87 0D 87 
3979e     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
397a2     43 87 44 87 
397a6     43 87 44 87 
397aa     43 87 43 87 
397ae     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
397b2     44 87 43 87 
397b6     28 87 51 85 
397ba     11 7A 1E 7D 
397be     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
397c2     BC 78 BB 78 
397c6     BC 78 BC 78 
397ca     BC 78 BC 78 
397ce     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
397d2     BB 78 BC 78 
397d6     BB 78 BC 78 
397da     BC 78 BC 78 
397de     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
397e2     BB 78 BC 78 
397e6     BC 78 BC 78 
397ea     BD 78 BB 78 
397ee     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
397f2     BC 78 BB 78 
397f6     BC 78 BC 78 
397fa     BC 78 BB 78 
397fe     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39802     BC 78 BC 78 
39806     BC 78 BC 78 
3980a     BB 78 BC 78 
3980e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39812     BC 78 BD 78 
39816     BC 78 BC 78 
3981a     BC 78 BB 78 
3981e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39822     BC 78 BB 78 
39826     BB 78 BC 78 
3982a     BC 78 BB 78 
3982e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39832     BB 78 BB 78 
39836     BB 78 BC 78 
3983a     B6 78 48 7D 
3983e     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
39842     56 87 43 87 
39846     42 87 44 87 
3984a     44 87 43 87 
3984e     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
39852     43 87 44 87 
39856     43 87 44 87 
3985a     4C 87 7E 83 
3985e     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
39862     F7 78 BC 78 
39866     BC 78 BB 78 
3986a     BB 78 BC 78 
3986e     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39872     BC 78 BB 78 
39876     BC 78 BC 78 
3987a     BB 78 BC 78 
3987e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
39882     BB 78 BC 78 
39886     BC 78 BC 78 
3988a     BC 78 BB 78 
3988e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39892     BC 78 BC 78 
39896     BC 78 BC 78 
3989a     BC 78 BB 78 
3989e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
398a2     BC 78 BB 78 
398a6     BB 78 BC 78 
398aa     BC 78 BB 78 
398ae     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
398b2     BC 78 BC 78 
398b6     BB 78 BC 78 
398ba     BC 78 BC 78 
398be     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
398c2     73 32 00 04 
398c6     00 00 10 00 
398ca     00 00 00 00 
398ce     00 00 00 00 | atari12 file "atari12.s2"
398d2     00 6D 00 6D 
398d6     00 6D 00 6D 
398da     00 6D 00 6D 
398de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
398e2     00 6D 00 6D 
398e6     00 6D 00 6D 
398ea     00 6D 00 6D 
398ee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
398f2     00 6D 00 6D 
398f6     00 6D 00 6D 
398fa     00 6D 00 6D 
398fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39902     00 6D 00 6D 
39906     00 6D 00 6D 
3990a     00 6D 00 6D 
3990e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39912     00 6D 00 6D 
39916     00 6D 00 6D 
3991a     00 6D 00 6D 
3991e     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
39922     00 6C 00 6C 
39926     00 6C 00 6C 
3992a     00 6C 00 6C 
3992e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39932     00 6C 00 6C 
39936     00 6C 00 6C 
3993a     00 6C 00 6C 
3993e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39942     00 6C 00 6C 
39946     00 6C 00 6C 
3994a     00 6C 00 6C 
3994e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39952     00 6C 00 6C 
39956     00 6C 00 6C 
3995a     00 6C 00 6C 
3995e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39962     00 6C 00 6C 
39966     00 6C 00 6C 
3996a     00 6C 00 6C 
3996e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39972     00 6C 00 6C 
39976     00 6C 00 6C 
3997a     00 6C 00 6C 
3997e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39982     00 6C 00 6C 
39986     00 6C 00 6C 
3998a     00 6C 00 6C 
3998e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39992     00 6C 00 6C 
39996     00 6C 00 6C 
3999a     00 6C 00 6C 
3999e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
399a2     00 6C 00 6C 
399a6     00 6C 00 6C 
399aa     00 6C 00 6C 
399ae     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
399b2     00 6C 00 6C 
399b6     00 6C 00 6C 
399ba     00 6C 00 6C 
399be     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
399c2     00 6C 00 6C 
399c6     00 6C 00 6C 
399ca     00 6C 00 6C 
399ce     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
399d2     00 6C 00 6B 
399d6     00 6B 00 6B 
399da     00 6B 00 6B 
399de     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
399e2     00 6B 00 6B 
399e6     00 6B 00 6B 
399ea     00 6B 00 6B 
399ee     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
399f2     00 6B 00 6B 
399f6     00 6B 00 6B 
399fa     00 6B 00 6B 
399fe     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39a02     00 6B 00 6B 
39a06     00 6B 00 6B 
39a0a     00 6B 00 6B 
39a0e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39a12     00 6B 00 6B 
39a16     00 6B 00 6B 
39a1a     00 6B 00 6B 
39a1e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39a22     00 6B 00 6B 
39a26     00 6B 00 6B 
39a2a     00 6B 00 6B 
39a2e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39a32     00 6B 00 6B 
39a36     00 6B 00 6B 
39a3a     00 6B 00 6B 
39a3e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39a42     00 6B 00 6B 
39a46     00 6B 00 6B 
39a4a     00 6B 00 6B 
39a4e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39a52     00 6B 00 6B 
39a56     00 6B 00 6B 
39a5a     00 6B 00 6B 
39a5e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39a62     00 6B 00 6B 
39a66     00 6B 00 6B 
39a6a     00 6A 00 9D 
39a6e     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
39a72     00 9E 00 9E 
39a76     00 9E 00 9E 
39a7a     00 9E 00 9E 
39a7e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39a82     00 9E 00 9E 
39a86     00 9E 00 9E 
39a8a     00 9E 00 9E 
39a8e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39a92     00 9E 00 9E 
39a96     00 9E 00 9E 
39a9a     00 9E 00 9E 
39a9e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39aa2     00 9E 00 9E 
39aa6     00 9E 00 9E 
39aaa     00 9E 00 9E 
39aae     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39ab2     00 9E 00 9E 
39ab6     00 9E 00 9E 
39aba     00 9E 00 9E 
39abe     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39ac2     00 9E 00 9E 
39ac6     00 9E 00 9E 
39aca     00 9E 00 9E 
39ace     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39ad2     00 9E 00 9E 
39ad6     00 9E 00 9E 
39ada     00 9E 00 9E 
39ade     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39ae2     00 9E 00 9E 
39ae6     00 9E 00 9E 
39aea     00 9E 00 9E 
39aee     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39af2     00 9E 00 9E 
39af6     00 9E 00 9E 
39afa     00 9E 00 9E 
39afe     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
39b02     00 9F 00 9F 
39b06     00 9F 00 9F 
39b0a     00 9F 00 9F 
39b0e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39b12     00 9F 00 9F 
39b16     00 9F 00 9F 
39b1a     00 9F 00 9F 
39b1e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39b22     00 9F 00 9F 
39b26     00 9F 00 9F 
39b2a     00 9F 00 9F 
39b2e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39b32     00 9F 00 9F 
39b36     00 9F 00 9F 
39b3a     00 9F 00 9F 
39b3e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39b42     00 9F 00 9F 
39b46     00 9F 00 9F 
39b4a     00 9F 00 9F 
39b4e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39b52     00 9F 00 9F 
39b56     00 9F 00 9F 
39b5a     00 9F 00 9F 
39b5e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39b62     00 9F 00 9F 
39b66     00 9F 00 9F 
39b6a     00 9F 00 9F 
39b6e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39b72     00 9F 00 9F 
39b76     00 9F 00 9F 
39b7a     00 9F 00 9F 
39b7e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39b82     00 9F 00 9F 
39b86     00 9F 00 9F 
39b8a     00 9F 00 9F 
39b8e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39b92     00 9F 00 9F 
39b96     00 9F 00 9F 
39b9a     00 9F 00 9F 
39b9e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39ba2     00 9F 00 9F 
39ba6     00 9F 00 9F 
39baa     00 9F 00 9F 
39bae     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39bb2     00 9F 00 9F 
39bb6     00 9F 00 9F 
39bba     00 9F 00 9F 
39bbe     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39bc2     00 9F 00 9F 
39bc6     00 9F 00 A0 
39bca     00 A0 00 A0 
39bce     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39bd2     00 A0 00 A0 
39bd6     00 A0 00 A0 
39bda     00 A0 00 A0 
39bde     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39be2     00 A0 00 A0 
39be6     00 A0 00 A0 
39bea     00 A0 00 A0 
39bee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39bf2     00 A0 00 A0 
39bf6     00 A0 00 A0 
39bfa     00 A0 00 A0 
39bfe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39c02     00 A0 00 A0 
39c06     00 A0 00 A0 
39c0a     00 A0 00 A0 
39c0e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39c12     00 A0 00 A0 
39c16     00 A0 00 A0 
39c1a     00 A0 00 A0 
39c1e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39c22     00 A0 00 A0 
39c26     00 A0 00 A0 
39c2a     00 A0 00 A0 
39c2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39c32     00 A0 00 A0 
39c36     00 A0 00 A0 
39c3a     00 A0 00 A0 
39c3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39c42     00 A0 00 A0 
39c46     00 A0 00 A0 
39c4a     00 A0 00 A0 
39c4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39c52     00 A0 00 A0 
39c56     00 A0 00 A0 
39c5a     00 A0 00 A0 
39c5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39c62     00 A0 00 A0 
39c66     00 A0 00 A0 
39c6a     00 A0 00 A0 
39c6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39c72     00 A0 00 A0 
39c76     00 A0 00 A0 
39c7a     00 A0 00 A0 
39c7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39c82     00 A0 00 A0 
39c86     00 A0 00 A0 
39c8a     00 A0 00 A0 
39c8e     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
39c92     00 6D 00 6D 
39c96     00 6D 00 6D 
39c9a     00 6D 00 6D 
39c9e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39ca2     00 6D 00 6D 
39ca6     00 6D 00 6D 
39caa     00 6D 00 6D 
39cae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39cb2     00 6D 00 6D 
39cb6     00 6D 00 6D 
39cba     00 6D 00 6D 
39cbe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39cc2     00 6D 00 6D 
39cc6     00 6D 00 6D 
39cca     00 6D 00 6D 
39cce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39cd2     00 6D 00 6D 
39cd6     00 6D 00 6D 
39cda     00 6D 00 6D 
39cde     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39ce2     00 6D 00 6D 
39ce6     00 6D 00 6D 
39cea     00 6D 00 6D 
39cee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39cf2     00 6D 00 6D 
39cf6     00 6D 00 6D 
39cfa     00 6D 00 6D 
39cfe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39d02     00 6D 00 6D 
39d06     00 6D 00 6D 
39d0a     00 6D 00 6D 
39d0e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39d12     00 6D 00 6D 
39d16     00 A0 00 A0 
39d1a     00 A0 00 A0 
39d1e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39d22     00 A0 00 A0 
39d26     00 A0 00 A0 
39d2a     00 A0 00 A0 
39d2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39d32     00 A0 00 A0 
39d36     00 A0 00 A0 
39d3a     00 A0 00 A0 
39d3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39d42     00 A0 00 A0 
39d46     00 A0 00 A0 
39d4a     00 A0 00 A0 
39d4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39d52     00 A0 00 A0 
39d56     00 A0 00 A0 
39d5a     00 A0 00 A0 
39d5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39d62     00 A0 00 A0 
39d66     00 A0 00 A0 
39d6a     00 A0 00 A0 
39d6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39d72     00 A0 00 A0 
39d76     00 A0 00 A0 
39d7a     00 A0 00 A0 
39d7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39d82     00 A0 00 A0 
39d86     00 A0 00 A0 
39d8a     00 A0 00 A0 
39d8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39d92     00 A0 00 A0 
39d96     00 A0 00 A0 
39d9a     00 A0 00 A0 
39d9e     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
39da2     00 6D 00 6D 
39da6     00 6D 00 6D 
39daa     00 6D 00 6D 
39dae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39db2     00 6D 00 6D 
39db6     00 6D 00 6D 
39dba     00 6D 00 6D 
39dbe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39dc2     00 6D 00 6D 
39dc6     00 6D 00 6D 
39dca     00 6D 00 6D 
39dce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39dd2     00 6D 00 6D 
39dd6     00 6D 00 6D 
39dda     00 6D 00 6D 
39dde     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39de2     00 6D 00 6D 
39de6     00 6D 00 6D 
39dea     00 6D 00 6D 
39dee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39df2     00 6D 00 6D 
39df6     00 6D 00 6D 
39dfa     00 6D 00 6D 
39dfe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39e02     00 6D 00 6D 
39e06     00 6D 00 6D 
39e0a     00 6D 00 6D 
39e0e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39e12     00 6D 00 6D 
39e16     00 6D 00 6D 
39e1a     00 6D 00 6D 
39e1e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39e22     00 6D 00 6D 
39e26     00 6C 00 A0 
39e2a     00 9F 00 A0 
39e2e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
39e32     00 A0 00 A0 
39e36     00 A0 00 A0 
39e3a     00 A0 00 A0 
39e3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e42     00 A0 00 A0 
39e46     00 A0 00 A0 
39e4a     00 A0 00 A0 
39e4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e52     00 A0 00 A0 
39e56     00 A0 00 A0 
39e5a     00 A0 00 A0 
39e5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e62     00 A0 00 A0 
39e66     00 A0 00 A0 
39e6a     00 A0 00 A0 
39e6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e72     00 A0 00 A0 
39e76     00 A0 00 A0 
39e7a     00 A0 00 A0 
39e7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e82     00 A0 00 A0 
39e86     00 A0 00 A0 
39e8a     00 A0 00 A0 
39e8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e92     00 A0 00 A0 
39e96     00 A0 00 A0 
39e9a     00 A0 00 A0 
39e9e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39ea2     00 A0 00 A0 
39ea6     00 A0 00 A0 
39eaa     00 A0 00 A0 
39eae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39eb2     00 A0 00 A0 
39eb6     00 A0 00 A0 
39eba     00 A0 00 A0 
39ebe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39ec2     00 A0 00 A0 
39ec6     00 A0 00 A0 
39eca     00 A0 00 A0 
39ece     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39ed2     00 A0 00 A0 
39ed6     00 A0 00 A0 
39eda     00 A0 00 A0 
39ede     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
39ee2     00 A1 00 A1 
39ee6     00 A1 00 A1 
39eea     00 A1 00 A1 
39eee     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
39ef2     00 A1 00 A1 
39ef6     00 A1 00 A1 
39efa     00 A1 00 A1 
39efe     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
39f02     00 A1 00 A1 
39f06     00 A1 00 A1 
39f0a     00 A1 00 A1 
39f0e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
39f12     00 A1 00 A1 
39f16     00 A1 00 A1 
39f1a     00 A1 00 A1 
39f1e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
39f22     00 A1 00 A1 
39f26     00 A1 00 A1 
39f2a     00 A1 00 A1 
39f2e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
39f32     00 A1 00 A1 
39f36     00 A1 00 A1 
39f3a     00 6E 00 6E 
39f3e     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
39f42     00 6E 00 6E 
39f46     00 6E 00 6E 
39f4a     00 6E 00 6E 
39f4e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
39f52     00 6E 00 6E 
39f56     00 6E 00 6E 
39f5a     00 6E 00 6E 
39f5e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
39f62     00 6E 00 6E 
39f66     00 6E 00 6E 
39f6a     00 6E 00 6E 
39f6e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
39f72     00 6E 00 6D 
39f76     00 6D 00 6D 
39f7a     00 6D 00 6D 
39f7e     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39f82     00 6D 00 6D 
39f86     00 6D 00 6D 
39f8a     00 6D 00 6D 
39f8e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39f92     00 6D 00 6D 
39f96     00 6D 00 6D 
39f9a     00 6D 00 6D 
39f9e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39fa2     00 6D 00 6D 
39fa6     00 6D 00 6D 
39faa     00 6D 00 6D 
39fae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39fb2     00 6D 00 6D 
39fb6     00 6D 00 6D 
39fba     00 6D 00 6D 
39fbe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39fc2     00 6D 00 6D 
39fc6     00 6D 00 6D 
39fca     00 6D 00 6D 
39fce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39fd2     00 6D 00 6D 
39fd6     00 6D 00 6D 
39fda     00 6D 00 6D 
39fde     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39fe2     00 6D 00 6D 
39fe6     00 6D 00 6D 
39fea     00 6D 00 6D 
39fee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39ff2     00 6D 00 6D 
39ff6     00 6D 00 6D 
39ffa     00 6D 00 6D 
39ffe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a002     00 6D 00 6D 
3a006     00 6D 00 6D 
3a00a     00 6D 00 6D 
3a00e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a012     00 6D 00 6D 
3a016     00 6D 00 6D 
3a01a     00 6D 00 6D 
3a01e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a022     00 6D 00 6D 
3a026     00 6C 00 6C 
3a02a     00 6C 00 6C 
3a02e     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a032     00 6C 00 6C 
3a036     00 6C 00 6C 
3a03a     00 6C 00 6C 
3a03e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a042     00 6C 00 6C 
3a046     00 6C 00 6C 
3a04a     00 9D 00 9F 
3a04e     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3a052     00 9F 00 9F 
3a056     00 9F 00 9F 
3a05a     00 A0 00 A0 
3a05e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a062     00 A0 00 A0 
3a066     00 A0 00 A0 
3a06a     00 A0 00 A0 
3a06e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a072     00 A0 00 A0 
3a076     00 A0 00 A0 
3a07a     00 A0 00 A0 
3a07e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a082     00 A0 00 A0 
3a086     00 A0 00 A0 
3a08a     00 A0 00 A0 
3a08e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a092     00 A0 00 A0 
3a096     00 A0 00 A0 
3a09a     00 A0 00 A0 
3a09e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a0a2     00 A0 00 A0 
3a0a6     00 A0 00 A0 
3a0aa     00 A0 00 A0 
3a0ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a0b2     00 A0 00 A0 
3a0b6     00 A0 00 A0 
3a0ba     00 A0 00 A0 
3a0be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a0c2     00 A0 00 A0 
3a0c6     00 A0 00 A0 
3a0ca     00 A0 00 A0 
3a0ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a0d2     01 00 00 00 
3a0d6     00 00 00 00 
3a0da     00 00 00 00 
3a0de     00 00 00 00 | mouse  file "mouse2.def"
3a0e2     00 00 00 00 
3a0e6     00 00 00 00 
3a0ea     00 00 00 00 
3a0ee     00 00 00 00 | 	byte	$00[16]
3a0f2     01 01 00 00 
3a0f6     00 00 00 00 
3a0fa     00 00 00 00 
3a0fe     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a102     00 00 00 00 
3a106     00 00 00 00 
3a10a     00 00 00 00 
3a10e     00 00 00 00 | 	byte	$00[16]
3a112     01 0D 01 00 
3a116     00 00 00 00 
3a11a     00 00 00 00 
3a11e     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a122     00 00 00 00 
3a126     00 00 00 00 
3a12a     00 00 00 00 
3a12e     00 00 00 00 | 	byte	$00[16]
3a132     01 0D 0D 01 
3a136     00 00 00 00 
3a13a     00 00 00 00 
3a13e     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a142     00 00 00 00 
3a146     00 00 00 00 
3a14a     00 00 00 00 
3a14e     00 00 00 00 | 	byte	$00[16]
3a152     01 0D 0D 0D 
3a156     01 00 00 00 
3a15a     00 00 00 00 
3a15e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a162     00 00 00 00 
3a166     00 00 00 00 
3a16a     00 00 00 00 
3a16e     00 00 00 00 | 	byte	$00[16]
3a172     01 0D 0D 0D 
3a176     0D 01 00 00 
3a17a     00 00 00 00 
3a17e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a182     00 00 00 00 
3a186     00 00 00 00 
3a18a     00 00 00 00 
3a18e     00 00 00 00 | 	byte	$00[16]
3a192     01 0D 0D 0D 
3a196     0D 0D 01 00 
3a19a     00 00 00 00 
3a19e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a1a2     00 00 00 00 
3a1a6     00 00 00 00 
3a1aa     00 00 00 00 
3a1ae     00 00 00 00 | 	byte	$00[16]
3a1b2     01 0D 0D 0D 
3a1b6     0D 0D 0D 01 
3a1ba     00 00 00 00 
3a1be     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3a1c2     00 00 00 00 
3a1c6     00 00 00 00 
3a1ca     00 00 00 00 
3a1ce     00 00 00 00 | 	byte	$00[16]
3a1d2     01 0D 0D 0D 
3a1d6     0D 0D 0D 0C 
3a1da     01 00 00 00 
3a1de     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3a1e2     00 00 00 00 
3a1e6     00 00 00 00 
3a1ea     00 00 00 00 
3a1ee     00 00 00 00 | 	byte	$00[16]
3a1f2     01 0D 0D 0D 
3a1f6     0D 0D 0D 0D 
3a1fa     0C 01 00 00 
3a1fe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3a202     00 00 00 00 
3a206     00 00 00 00 
3a20a     00 00 00 00 
3a20e     00 00 00 00 | 	byte	$00[16]
3a212     01 0D 0D 0D 
3a216     0D 0D 0D 0D 
3a21a     0D 0C 01 00 
3a21e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3a222     00 00 00 00 
3a226     00 00 00 00 
3a22a     00 00 00 00 
3a22e     00 00 00 00 | 	byte	$00[16]
3a232     01 0D 0D 0D 
3a236     0D 0D 0D 0D 
3a23a     0D 0D 0B 01 
3a23e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3a242     00 00 00 00 
3a246     00 00 00 00 
3a24a     00 00 00 00 
3a24e     00 00 00 00 | 	byte	$00[16]
3a252     01 0D 0D 0D 
3a256     0C 0D 0D 03 
3a25a     01 01 01 01 
3a25e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3a262     00 00 00 00 
3a266     00 00 00 00 
3a26a     00 00 00 00 
3a26e     00 00 00 00 | 	byte	$00[16]
3a272     01 0D 0D 0C 
3a276     01 09 0D 03 
3a27a     00 00 00 00 
3a27e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3a282     00 00 00 00 
3a286     00 00 00 00 
3a28a     00 00 00 00 
3a28e     00 00 00 00 | 	byte	$00[16]
3a292     01 0D 0C 01 
3a296     00 01 0D 0B 
3a29a     01 00 00 00 
3a29e     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3a2a2     00 00 00 00 
3a2a6     00 00 00 00 
3a2aa     00 00 00 00 
3a2ae     00 00 00 00 | 	byte	$00[16]
3a2b2     01 0C 01 00 
3a2b6     00 01 0A 0D 
3a2ba     01 00 00 00 
3a2be     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3a2c2     00 00 00 00 
3a2c6     00 00 00 00 
3a2ca     00 00 00 00 
3a2ce     00 00 00 00 | 	byte	$00[16]
3a2d2     01 01 00 00 
3a2d6     00 00 01 0D 
3a2da     0B 01 00 00 
3a2de     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3a2e2     00 00 00 00 
3a2e6     00 00 00 00 
3a2ea     00 00 00 00 
3a2ee     00 00 00 00 
3a2f2     00 00 00 00 
3a2f6     00 00       | 	byte	$00[22]
3a2f8     01 0B 0D 01 
3a2fc     00 00 00 00 
3a300     00 00 00 00 
3a304     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a308     00 00 00 00 
3a30c     00 00 00 00 
3a310     00 00 00 00 
3a314     00 00 00 00 
3a318     00          | 	byte	$00[17]
3a319     01 01 00 00 
3a31d     00 00 00 00 
3a321     00 00 00 00 
3a325     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a329     00 00 00 00 
      ...             
3a4cd     00 00 00 00 
3a4d1     00          | 	byte	$00[425]
3a4d2                 | 
3a4d2     00 00       |              	org
3a4d4 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3a4d8 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
3a4dc 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3a4e0 003             | 
3a4e0 003 00 30 04 F6 |                 mov     psramaddr,#0
3a4e4 004             | 
3a4e4 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3a4e8 005 20 00 00 FF 
3a4ec 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
3a4f0 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3a4f4 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3a4f8 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
3a4fc 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
3a500 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3a504 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3a508 00d             | 
3a508 00d 20 00 00 FF 
3a50c 00e 00 30 04 F1 |                 add 	psramaddr,##16384
3a510 00f E0 03 00 FF 
3a514 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
3a518 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
3a51c 012             | 
3a51c 012             |                 
3a51c 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
3a520 013             |     
3a520 013 01 2C 60 FD |                 cogid 	t11				' get id
3a524 014 00 00 EC FC |                 coginit #0,#0				' start the new program
3a528 015 03 2C 60 FD |                 cogstop t11				' stop the loader
3a52c 016             | 
3a52c 016 00 00 00 00 | t11 		long 	0
3a530 017 00 FF 07 00 | mailbox 	long 	$7FF00
3a534 018 00 00 00 00 | psramaddr 	long 	0
3a538 019 00 00 00 00 | pslockval	long 	0
3a53c 01a 00 00 00 00 | cmd             long    0
3a540 01b 00 00 00 00 | buf1            long    0
3a544 01c 00 40 00 00 | buf2            long    16384
3a548 01d 4C A5 03 00 | 	long	@@@_dat_ + 12612
3a54c 01e 50 32 20 52 
3a550 01f 65 74 72 6F 
3a554 020 6D 61 63 68 
3a558 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3a55c 022 42 41 53 49 
3a560 023 43 20 76 65 
3a564 024 72 73 69 6F 
3a568 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3a56c 026 33 33 00 00 | 	byte	$33, $33, $00, $00
3a570 027             | 	alignl
3a570 027             | _hg010b_spin2_dat_
3a570 027             | 
3a570 027 00 00 00 00 
3a574 028 00 00 00 00 
3a578 029 00 00 00 00 
3a57c 02a 00 00 00 00 
3a580 02b 00 00 00    | vga_font       file "vgafont.def"
3a583 02b 7E 81 A5 81 
3a587 02c 81 BD 99 81 
3a58b 02d 81 7E 00 00 
3a58f 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3a593 02f 7E FF DB FF 
3a597 030 FF C3 E7 FF 
3a59b 031 FF 7E 00 00 
3a59f 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3a5a3 033 00 36 7F 7F 
3a5a7 034 7F 7F 3E 1C 
3a5ab 035 08 00 00 00 
3a5af 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3a5b3 037 00 08 1C 3E 
3a5b7 038 7F 3E 1C 08 
3a5bb 039 00 00 00 00 
3a5bf 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3a5c3 03b 18 3C 3C E7 
3a5c7 03c E7 E7 18 18 
3a5cb 03d 3C 00 00 00 
3a5cf 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3a5d3 03f 18 3C 7E FF 
3a5d7 040 FF 7E 18 18 
3a5db 041 3C 00 00 00 
3a5df 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3a5e3 043 00 00 00 18 
3a5e7 044 3C 3C 18 00 
3a5eb 045 00 00 00 00 
3a5ef 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3a5f3 047 FF FF FF E7 
3a5f7 048 C3 C3 E7 FF 
3a5fb 049 FF FF FF FF 
3a5ff 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3a603 04b 00 00 3C 66 
3a607 04c 42 42 66 3C 
3a60b 04d 00 00 00 00 
3a60f 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3a613 04f FF FF C3 99 
3a617 050 BD BD 99 C3 
3a61b 051 FF FF FF FF 
3a61f 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3a623 053 78 70 58 4C 
3a627 054 1E 33 33 33 
3a62b 055 33 1E 00 00 
3a62f 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3a633 057 3C 66 66 66 
3a637 058 66 3C 18 7E 
3a63b 059 18 18 00 00 
3a63f 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3a643 05b FC CC FC 0C 
3a647 05c 0C 0C 0C 0E 
3a64b 05d 0F 07 00 00 
3a64f 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3a653 05f FE C6 FE C6 
3a657 060 C6 C6 C6 E6 
3a65b 061 E7 67 03 00 
3a65f 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3a663 063 18 18 DB 3C 
3a667 064 E7 3C DB 18 
3a66b 065 18 00 00 00 
3a66f 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3a673 067 03 07 0F 1F 
3a677 068 7F 1F 0F 07 
3a67b 069 03 01 00 00 
3a67f 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3a683 06b 60 70 78 7C 
3a687 06c 7F 7C 78 70 
3a68b 06d 60 40 00 00 
3a68f 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3a693 06f 18 3C 7E 18 
3a697 070 18 18 7E 3C 
3a69b 071 18 00 00 00 
3a69f 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3a6a3 073 66 66 66 66 
3a6a7 074 66 66 66    | 	byte	$66[7]
3a6aa 075 00 66 66 00 
3a6ae 076 00 00 00 00 
3a6b2 077 00 FE DB DB 
3a6b6 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3a6ba 079 D8 D8 D8 00 
3a6be 07a 00 00 00 3E 
3a6c2 07b 63 06 1C 36 
3a6c6 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3a6ca 07d 30 63 3E 00 
3a6ce 07e 00 00 00 00 
3a6d2 07f 00 00 00 00 
3a6d6 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3a6da 081 7F 7F 7F 00 
3a6de 082 00 00 00 00 
3a6e2 083 00 18 3C 7E 
3a6e6 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3a6ea 085 3C 18 7E 00 
3a6ee 086 00 00 00 00 
3a6f2 087 00 18 3C 7E 
3a6f6 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3a6fa 089 18 18 18 00 
3a6fe 08a 00 00 00 00 
3a702 08b 00 18 18 18 
3a706 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3a70a 08d 7E 3C 18 00 
3a70e 08e 00 00 00 00 
3a712 08f 00 00 00 18 
3a716 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3a71a 091 00 00 00 00 
3a71e 092 00 00 00 00 
3a722 093 00 00 00    | 	byte	$00[11]
3a725 094 0C 06 7F 06 
3a729 095 0C 00 00 00 
3a72d 096 00 00 00 00 
3a731 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a735 098 00 03 03 03 
3a739 099 7F 00 00 00 
3a73d 09a 00 00 00 00 
3a741 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a745 09c 14 36 7F 36 
3a749 09d 14 00 00 00 
3a74d 09e 00 00 00 00 
3a751 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
3a755 0a0 1C 1C 3E 3E 
3a759 0a1 7F 7F 00 00 
3a75d 0a2 00 00 00 00 
3a761 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3a765 0a4 7F 3E 3E 1C 
3a769 0a5 1C 08 00 00 
3a76d 0a6 00 00 00 00 
3a771 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a775 0a8 00 00 00 00 
3a779 0a9 00 00 00 00 
3a77d 0aa 00 00 00 00 
3a781 0ab 00 00       | 	byte	$00[14]
3a783 0ab 18 3C 3C 3C 
3a787 0ac 18 18 18 00 
3a78b 0ad 18 18 00 00 
3a78f 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3a793 0af 66 24 00 00 
3a797 0b0 00 00 00 00 
3a79b 0b1 00 00 00 00 
3a79f 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a7a3 0b3 00 36 36 7F 
3a7a7 0b4 36 36 36 7F 
3a7ab 0b5 36 36 00 00 
3a7af 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3a7b3 0b7 3E 63 43 03 
3a7b7 0b8 3E 60 60 61 
3a7bb 0b9 63 3E 18 18 
3a7bf 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3a7c3 0bb 00 00 43 63 
3a7c7 0bc 30 18 0C 06 
3a7cb 0bd 63 61 00 00 
3a7cf 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3a7d3 0bf 1C 36 36 1C 
3a7d7 0c0 6E 3B 33 33 
3a7db 0c1 33 6E 00 00 
3a7df 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3a7e3 0c3 0C 0C 0C 06 
3a7e7 0c4 00 00 00 00 
3a7eb 0c5 00 00 00 00 
3a7ef 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a7f3 0c7 30 18 0C 0C 
3a7f7 0c8 0C 0C 0C 0C 
3a7fb 0c9 18 30 00 00 
3a7ff 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3a803 0cb 0C 18 30 30 
3a807 0cc 30 30 30 30 
3a80b 0cd 18 0C 00 00 
3a80f 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3a813 0cf 00 00 00 66 
3a817 0d0 3C FF 3C 66 
3a81b 0d1 00 00 00 00 
3a81f 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3a823 0d3 00 00 00 18 
3a827 0d4 18 7E 18 18 
3a82b 0d5 00 00 00 00 
3a82f 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3a833 0d7 00 00 00 00 
3a837 0d8 00 00 00 00 | 	byte	$00[8]
3a83b 0d9 18 18 18 0C 
3a83f 0da 00 00 00 00 
3a843 0db 00 00 00 00 
3a847 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3a84b 0dd 00 00 00 00 
3a84f 0de 00 00 00 00 
3a853 0df 00 00 00 00 
3a857 0e0 00 00 00 00 | 	byte	$00[16]
3a85b 0e1 18 18 00 00 
3a85f 0e2 00 00 00 00 
3a863 0e3 00 00 40 60 
3a867 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3a86b 0e5 03 01 00 00 
3a86f 0e6 00 00 00 00 
3a873 0e7 1C 36 63 63 
3a877 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3a87b 0e9 36 1C 00 00 
3a87f 0ea 00 00 00 00 
3a883 0eb 18 1C 1E 18 
3a887 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3a88b 0ed 18 7E 00 00 
3a88f 0ee 00 00 00 00 
3a893 0ef 3E 63 60 30 
3a897 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3a89b 0f1 63 7F 00 00 
3a89f 0f2 00 00 00 00 
3a8a3 0f3 3E 63 60 60 
3a8a7 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3a8ab 0f5 63 3E 00 00 
3a8af 0f6 00 00 00 00 
3a8b3 0f7 30 38 3C 36 
3a8b7 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3a8bb 0f9 30 78 00 00 
3a8bf 0fa 00 00 00 00 
3a8c3 0fb 7F 03 03 03 
3a8c7 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3a8cb 0fd 63 3E 00 00 
3a8cf 0fe 00 00 00 00 
3a8d3 0ff 1C 06 03 03 
3a8d7 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3a8db 101 63 3E 00 00 
3a8df 102 00 00 00 00 
3a8e3 103 7F 63 60 60 
3a8e7 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3a8eb 105 0C 0C 00 00 
3a8ef 106 00 00 00 00 
3a8f3 107 3E 63 63 63 
3a8f7 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3a8fb 109 63 3E 00 00 
3a8ff 10a 00 00 00 00 
3a903 10b 3E 63 63 63 
3a907 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3a90b 10d 30 1E 00 00 
3a90f 10e 00 00 00 00 
3a913 10f 00 00 00 18 
3a917 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3a91b 111 18 18 00 00 
3a91f 112 00 00 00 00 
3a923 113 00 00 00 18 
3a927 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3a92b 115 18 18 0C 00 
3a92f 116 00 00 00 00 
3a933 117 00 60 30 18 
3a937 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3a93b 119 30 60 00 00 
3a93f 11a 00 00 00 00 
3a943 11b 00 00 00 7E 
3a947 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3a94b 11d 00 00 00 00 
3a94f 11e 00 00 00 00 
3a953 11f 00          | 	byte	$00[9]
3a954 120 06 0C 18 30 
3a958 121 60 30 18 0C 
3a95c 122 06 00 00 00 
3a960 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3a964 124 63 63 30 18 
3a968 125 18 18 00 18 
3a96c 126 18 00 00 00 
3a970 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3a974 128 3E 63 63 7B 
3a978 129 7B 7B 3B 03 
3a97c 12a 3E 00 00 00 
3a980 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3a984 12c 1C 36 63 63 
3a988 12d 7F 63 63 63 
3a98c 12e 63 00 00 00 
3a990 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3a994 130 66 66 66 3E 
3a998 131 66 66 66 66 
3a99c 132 3F 00 00 00 
3a9a0 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3a9a4 134 66 43 03 03 
3a9a8 135 03 03 43 66 
3a9ac 136 3C 00 00 00 
3a9b0 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3a9b4 138 36 66 66 66 
3a9b8 139 66 66 66 36 
3a9bc 13a 1F 00 00 00 
3a9c0 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3a9c4 13c 66 46 16 1E 
3a9c8 13d 16 06 46 66 
3a9cc 13e 7F 00 00 00 
3a9d0 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3a9d4 140 66 46 16 1E 
3a9d8 141 16 06 06 06 
3a9dc 142 0F 00 00 00 
3a9e0 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3a9e4 144 66 43 03 03 
3a9e8 145 7B 63 63 66 
3a9ec 146 5C 00 00 00 
3a9f0 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3a9f4 148 63 63 63 7F 
3a9f8 149 63 63 63 63 
3a9fc 14a 63 00 00 00 
3aa00 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3aa04 14c 18 18 18 18 
3aa08 14d 18 18 18 18 | 	byte	$18[8]
3aa0c 14e 3C 00 00 00 
3aa10 14f 00 00 00 78 
3aa14 150 30 30 30 30 
3aa18 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3aa1c 152 1E 00 00 00 
3aa20 153 00 00 00 67 
3aa24 154 66 66 36 1E 
3aa28 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3aa2c 156 67 00 00 00 
3aa30 157 00 00 00 0F 
3aa34 158 06 06 06 06 
3aa38 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3aa3c 15a 7F 00 00 00 
3aa40 15b 00 00 00 63 
3aa44 15c 77 7F 7F 6B 
3aa48 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3aa4c 15e 63 00 00 00 
3aa50 15f 00 00 00 63 
3aa54 160 67 6F 7F 7B 
3aa58 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3aa5c 162 63 00 00 00 
3aa60 163 00 00 00 3E 
3aa64 164 63 63 63 63 
3aa68 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3aa6c 166 3E 00 00 00 
3aa70 167 00 00 00 3F 
3aa74 168 66 66 66 3E 
3aa78 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3aa7c 16a 0F 00 00 00 
3aa80 16b 00 00 00 3E 
3aa84 16c 63 63 63 63 
3aa88 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3aa8c 16e 3E 30 70 00 
3aa90 16f 00 00 00 3F 
3aa94 170 66 66 66 3E 
3aa98 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3aa9c 172 67 00 00 00 
3aaa0 173 00 00 00 3E 
3aaa4 174 63 63 06 1C 
3aaa8 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3aaac 176 3E 00 00 00 
3aab0 177 00 00 00 7E 
3aab4 178 7E 5A 18 18 
3aab8 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3aabc 17a 3C 00 00 00 
3aac0 17b 00 00 00 63 
3aac4 17c 63 63 63 63 
3aac8 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3aacc 17e 3E 00 00 00 
3aad0 17f 00 00 00 63 
3aad4 180 63 63 63 63 
3aad8 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
3aadc 182 08 00 00 00 
3aae0 183 00 00 00 63 
3aae4 184 63 63 63 6B 
3aae8 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3aaec 186 36 00 00 00 
3aaf0 187 00 00 00 63 
3aaf4 188 63 36 3E 1C 
3aaf8 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
3aafc 18a 63 00 00 00 
3ab00 18b 00 00 00 66 
3ab04 18c 66 66 66 3C 
3ab08 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3ab0c 18e 3C 00 00 00 
3ab10 18f 00 00 00 7F 
3ab14 190 63 61 30 18 
3ab18 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3ab1c 192 7F 00 00 00 
3ab20 193 00 00 00 3C 
3ab24 194 0C 0C 0C 0C 
3ab28 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3ab2c 196 3C 00 00 00 
3ab30 197 00 00 00 00 
3ab34 198 01 03 07 0E 
3ab38 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3ab3c 19a 40 00 00 00 
3ab40 19b 00 00 00 3C 
3ab44 19c 30 30 30 30 
3ab48 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3ab4c 19e 3C 00 00 00 
3ab50 19f 1C 36 00 00 
3ab54 1a0 00 00 00 00 
3ab58 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ab5c 1a2 00 00 00 00 
3ab60 1a3 00 00 00 00 
3ab64 1a4 00 00 00 00 
3ab68 1a5 00 00 00 00 
3ab6c 1a6 00          | 	byte	$00[17]
3ab6d 1a6 FF 00 00 0C 
3ab71 1a7 18 00 00 00 
3ab75 1a8 00 00 00 00 
3ab79 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ab7d 1aa 00 00 00 00 
3ab81 1ab 00 00 00 00 
3ab85 1ac 00          | 	byte	$00[9]
3ab86 1ac 1E 30 3E 33 
3ab8a 1ad 33 33 6E 00 
3ab8e 1ae 00 00 00 00 
3ab92 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3ab96 1b0 1E 36 66 66 
3ab9a 1b1 66 66 3E 00 
3ab9e 1b2 00 00 00 00 
3aba2 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aba6 1b4 3E 63 03 03 
3abaa 1b5 03 63 3E 00 
3abae 1b6 00 00 00 00 
3abb2 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3abb6 1b8 3C 36 33 33 
3abba 1b9 33 33 6E 00 
3abbe 1ba 00 00 00 00 
3abc2 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3abc6 1bc 3E 63 7F 03 
3abca 1bd 03 63 3E 00 
3abce 1be 00 00 00 00 
3abd2 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3abd6 1c0 0C 1E 0C 0C 
3abda 1c1 0C 0C 1E 00 
3abde 1c2 00 00 00 00 
3abe2 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3abe6 1c4 6E 33 33 33 
3abea 1c5 33 33 3E 30 
3abee 1c6 33 1E 00 00 
3abf2 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3abf6 1c8 36 6E 66 66 
3abfa 1c9 66 66 67 00 
3abfe 1ca 00 00 00 00 
3ac02 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3ac06 1cc 1C 18 18 18 
3ac0a 1cd 18 18 3C 00 
3ac0e 1ce 00 00 00 00 
3ac12 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3ac16 1d0 70 60 60 60 
3ac1a 1d1 60 60 60 66 
3ac1e 1d2 66 3C 00 00 
3ac22 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3ac26 1d4 66 36 1E 1E 
3ac2a 1d5 36 66 67 00 
3ac2e 1d6 00 00 00 00 
3ac32 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3ac36 1d8 18 18 18 18 
3ac3a 1d9 18 18       | 	byte	$18[6]
3ac3c 1da 3C 00 00 00 
3ac40 1db 00 00 00 00 
3ac44 1dc 00 00 37 7F 
3ac48 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3ac4c 1de 63 00 00 00 
3ac50 1df 00 00 00 00 
3ac54 1e0 00 00 3B 66 
3ac58 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3ac5c 1e2 66 00 00 00 
3ac60 1e3 00 00 00 00 
3ac64 1e4 00 00 3E 63 
3ac68 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3ac6c 1e6 3E 00 00 00 
3ac70 1e7 00 00 00 00 
3ac74 1e8 00 00 3B 66 
3ac78 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3ac7c 1ea 3E 06 06 0F 
3ac80 1eb 00 00 00 00 
3ac84 1ec 00 00 6E 33 
3ac88 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3ac8c 1ee 3E 30 30 78 
3ac90 1ef 00 00 00 00 
3ac94 1f0 00 00 3B 6E 
3ac98 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3ac9c 1f2 0F 00 00 00 
3aca0 1f3 00 00 00 00 
3aca4 1f4 00 00 3E 63 
3aca8 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3acac 1f6 3E 00 00 00 
3acb0 1f7 00 00 00 08 
3acb4 1f8 0C 0C 3F 0C 
3acb8 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3acbc 1fa 38 00 00 00 
3acc0 1fb 00 00 00 00 
3acc4 1fc 00 00 33 33 
3acc8 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
3accc 1fe 6E 00 00 00 
3acd0 1ff 00 00 00 00 
3acd4 200 00 00 63 63 
3acd8 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
3acdc 202 1C 00 00 00 
3ace0 203 00 00 00 00 
3ace4 204 00 00 63 63 
3ace8 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3acec 206 36 00 00 00 
3acf0 207 00 00 00 00 
3acf4 208 00 00 63 36 
3acf8 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
3acfc 20a 63 00 00 00 
3ad00 20b 00 00 00 00 
3ad04 20c 00 00 63 63 
3ad08 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3ad0c 20e 7E 60 30 1F 
3ad10 20f 00 00 00 00 
3ad14 210 00 00 7F 33 
3ad18 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3ad1c 212 7F 00 00 00 
3ad20 213 00 00 00 70 
3ad24 214 18 18 18 0E 
3ad28 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3ad2c 216 70 00 00 00 
3ad30 217 00 00 00 18 
3ad34 218 18 18 18 18 
3ad38 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3ad3c 21a 18 00 00 00 
3ad40 21b 00 00 00 0E 
3ad44 21c 18 18 18 70 
3ad48 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3ad4c 21e 0E 00 00 00 
3ad50 21f 6E 3B 00 00 
3ad54 220 00 00 00 00 
3ad58 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ad5c 222 00 00 00 00 
3ad60 223 00 00 00 00 
3ad64 224 00 00       | 	byte	$00[10]
3ad66 224 08 1C 36 63 
3ad6a 225 63 63 7F 00 
3ad6e 226 00 00 00 00 
3ad72 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3ad76 228 03 03 03 03 
3ad7a 229 43 66 3C 18 
3ad7e 22a 30 1E 00 00 
3ad82 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3ad86 22c 33 33 33 33 
3ad8a 22d 33 33       | 	byte	$33[6]
3ad8c 22e 6E 00 00 00 
3ad90 22f 00 00 60 30 
3ad94 230 18 00 3E 63 
3ad98 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3ad9c 232 3E 00 00 00 
3ada0 233 00 00 08 1C 
3ada4 234 36 00 1E 30 
3ada8 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
3adac 236 6E 00 00 00 
3adb0 237 00 00 00 00 
3adb4 238 33 00 1E 30 
3adb8 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
3adbc 23a 6E 00 00 00 
3adc0 23b 00 00 1C 36 
3adc4 23c 1C 00 33 33 
3adc8 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
3adcc 23e 6E 00 00 00 
3add0 23f 00 00 60 30 
3add4 240 18 00 3E 63 
3add8 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
3addc 242 3E 00 00 00 
3ade0 243 00 00 00 00 
3ade4 244 00 00 3E 63 
3ade8 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3adec 246 3E 18 30 1E 
3adf0 247 00 00 00 1C 
3adf4 248 58 78 38 18 
3adf8 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
3adfc 24a 3C 00 00 00 
3ae00 24b 00 00 00 00 
3ae04 24c 63 00 3E 63 
3ae08 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3ae0c 24e 3E 00 00 00 
3ae10 24f 66 33 00 3E 
3ae14 250 63 63 63 63 
3ae18 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3ae1c 252 3E 00 00 00 
3ae20 253 00 00 CC 66 
3ae24 254 33 00 3E 63 
3ae28 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3ae2c 256 3E 00 00 00 
3ae30 257 00 00 18 3C 
3ae34 258 66 00 1C 18 
3ae38 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3ae3c 25a 3C 00 00 00 
3ae40 25b 30 18 00 7F 
3ae44 25c 63 61 30 18 
3ae48 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3ae4c 25e 7F 00 00 00 
3ae50 25f 00 63 00 08 
3ae54 260 1C 36 63 63 
3ae58 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3ae5c 262 63 00 00 00 
3ae60 263 30 18 00 3C 
3ae64 264 66 43 03 03 
3ae68 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3ae6c 266 3C 00 00 00 
3ae70 267 30 18 00 7F 
3ae74 268 66 46 16 1E 
3ae78 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3ae7c 26a 7F 00 00 00 
3ae80 26b 0C 06 00 0F 
3ae84 26c 06 06 06 06 
3ae88 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3ae8c 26e 7F 00 00 00 
3ae90 26f 30 18 00 1C 
3ae94 270 18 18 18 18 
3ae98 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3ae9c 272 3C 00 00 00 
3aea0 273 00 00 08 1C 
3aea4 274 36 00 3E 63 
3aea8 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
3aeac 276 3E 00 00 00 
3aeb0 277 00 00 00 00 
3aeb4 278 63 00 3E 63 
3aeb8 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
3aebc 27a 3E 00 00 00 
3aec0 27b 00 00 00 6F 
3aec4 27c 46 26 06 06 
3aec8 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
3aecc 27e 7F 00 00 00 
3aed0 27f 00 00 00 6E 
3aed4 280 4C 2C 0C 0C 
3aed8 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
3aedc 282 1E 00 00 00 
3aee0 283 30 18 00 3E 
3aee4 284 63 63 06 1C 
3aee8 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3aeec 286 3E 00 00 00 
3aef0 287 00 00 60 30 
3aef4 288 18 00 3E 63 
3aef8 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3aefc 28a 3E 00 00 00 
3af00 28b 00 63 00 3E 
3af04 28c 63 63 63 63 
3af08 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3af0c 28e 3E 00 00 00 
3af10 28f 00 63 00 63 
3af14 290 63 63 63 63 
3af18 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3af1c 292 3E 00 00 00 
3af20 293 6C 38 00 7E 
3af24 294 7E 5A 18 18 
3af28 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3af2c 296 3C 00 00 00 
3af30 297 00 00 60 48 
3af34 298 2C 0C 3F 0C 
3af38 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3af3c 29a 38 00 00 00 
3af40 29b 00 00 00 0F 
3af44 29c 26 36 1E 0E 
3af48 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3af4c 29e 7F 00 00 00 
3af50 29f 00 00 00 00 
3af54 2a0 00 63 36 1C 
3af58 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3af5c 2a2 00 00 00 00 
3af60 2a3 00 00       | 	byte	$00[6]
3af62 2a3 36 1C 08 00 
3af66 2a4 3E 63 03 03 
3af6a 2a5 03 63 3E 00 
3af6e 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3af72 2a7 30 18 0C 00 
3af76 2a8 1E 30 3E 33 
3af7a 2a9 33 33 6E 00 
3af7e 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3af82 2ab 60 30 18 00 
3af86 2ac 1C 18 18 18 
3af8a 2ad 18 18 3C 00 
3af8e 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3af92 2af 60 30 18 00 
3af96 2b0 3E 63 63 63 
3af9a 2b1 63 63 3E 00 
3af9e 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3afa2 2b3 30 18 0C 00 
3afa6 2b4 33 33 33 33 
3afaa 2b5 33 33 6E 00 
3afae 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3afb2 2b7 00 08 1C 36 
3afb6 2b8 63 63 7F 63 
3afba 2b9 63 63 63 18 
3afbe 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3afc2 2bb 00 00 00 00 
3afc6 2bc 1E 30 3E 33 
3afca 2bd 33 33 6E 18 
3afce 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3afd2 2bf 00 7F 63 61 
3afd6 2c0 30 18 0C 06 
3afda 2c1 43 63 7F 00 
3afde 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3afe2 2c3 36 1C 08 00 
3afe6 2c4 7F 33 18 0C 
3afea 2c5 06 63 7F 00 
3afee 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3aff2 2c7 00 7F 66 46 
3aff6 2c8 16 1E 16 06 
3affa 2c9 46 66 7F 18 
3affe 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3b002 2cb 00 00 00 00 
3b006 2cc 3E 63 7F 03 
3b00a 2cd 03 63 3E 18 
3b00e 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3b012 2cf 00 3C 66 03 
3b016 2d0 1F 03 0F 03 
3b01a 2d1 03 66 3C 00 
3b01e 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3b022 2d3 60 30 18 00 
3b026 2d4 7F 33 18 0C 
3b02a 2d5 06 63 7F 00 
3b02e 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3b032 2d7 00 3C 66 43 
3b036 2d8 03 03 03 03 
3b03a 2d9 43 66 3C 00 
3b03e 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3b042 2db 00 00 00 00 
3b046 2dc 3E 63 06 1C 
3b04a 2dd 30 63 3E 18 
3b04e 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3b052 2df 00 00 00 00 
3b056 2e0 00 00       | 	byte	$00[6]
3b058 2e1 6C 36 1B 36 
3b05c 2e2 6C 00 00 00 
3b060 2e3 00 00 00 00 
3b064 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b068 2e5 1B 36 6C 36 
3b06c 2e6 1B 00 00 00 
3b070 2e7 88 22 88 22 
3b074 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3b078 2e9 88 22 88 22 
3b07c 2ea 88 22 88 22 
3b080 2eb AA 55 AA 55 
3b084 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3b088 2ed AA 55 AA 55 
3b08c 2ee AA 55 AA 55 
3b090 2ef BB EE BB EE 
3b094 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3b098 2f1 BB EE BB EE 
3b09c 2f2 BB EE BB EE 
3b0a0 2f3 18 18 18 18 
3b0a4 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3b0a8 2f5 18 18 18 18 
3b0ac 2f6 18 18 18 18 
3b0b0 2f7 18 18 18 18 
3b0b4 2f8 18 18 18    | 	byte	$18[15]
3b0b7 2f8 1F 18 18 18 
3b0bb 2f9 18 18 18 18 
3b0bf 2fa 18 30 18 00 
3b0c3 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3b0c7 2fc 63 7F 63 63 
3b0cb 2fd 63 63 00 00 
3b0cf 2fe 00 1C 36 00 
3b0d3 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3b0d7 300 63 7F 63 63 
3b0db 301 63 63 00 00 
3b0df 302 00 36 1C 00 
3b0e3 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3b0e7 304 1E 16 06 46 
3b0eb 305 66 7F 00 00 
3b0ef 306 00 00 00 00 
3b0f3 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3b0f7 308 1C 30 60 63 
3b0fb 309 63 3E 18 30 
3b0ff 30a 1E 6C 6C 6C 
3b103 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3b107 30c 6F 6C 6C 6C 
3b10b 30d 6C 6C 6C 6C 
3b10f 30e 6C 6C 6C 6C 
3b113 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b117 310 6C 6C 6C 6C 
3b11b 311 6C 6C 6C 6C 
3b11f 312 6C          | 	byte	$6c[9]
3b120 313 00 00 00 00 
3b124 314 00          | 	byte	$00[5]
3b125 314 7F 60 6F 6C 
3b129 315 6C 6C 6C 6C 
3b12d 316 6C 6C 6C 6C 
3b131 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b135 318 6F 60 7F 00 
3b139 319 00 00 00 00 
3b13d 31a 00 00 00 18 
3b141 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3b145 31c 61 30 18 0C 
3b149 31d 06 43 63 7F 
3b14d 31e 00 00 00 00 
3b151 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3b155 320 00 7F 33 18 
3b159 321 0C 06 63 7F 
3b15d 322 00 00 00 00 
3b161 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3b165 324 00 00 1F 18 
3b169 325 18 18 18 18 
3b16d 326 18 18 18 18 
3b171 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b175 328 18 18 F8 00 
3b179 329 00 00 00 00 
3b17d 32a 00 00 00 18 
3b181 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3b185 32c 18 18 FF 00 
3b189 32d 00 00 00 00 
3b18d 32e 00 00 00 00 
3b191 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b195 330 00 00 FF 18 
3b199 331 18 18 18 18 
3b19d 332 18 18 18 18 
3b1a1 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b1a5 334 18 18 F8 18 
3b1a9 335 18 18 18 18 
3b1ad 336 18 18 18 00 
3b1b1 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3b1b5 338 00 00 FF 00 
3b1b9 339 00 00 00 00 
3b1bd 33a 00 00 00 18 
3b1c1 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3b1c5 33c 18 18 FF 18 
3b1c9 33d 18 18 18 18 
3b1cd 33e 18 18 18 63 
3b1d1 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3b1d5 340 36 63 63 7F 
3b1d9 341 63 63 63 63 
3b1dd 342 00 00 00 00 
3b1e1 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3b1e5 344 00 1E 30 3E 
3b1e9 345 33 33 33 6E 
3b1ed 346 00 00 00 6C 
3b1f1 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3b1f5 348 EC 0C FC 00 
3b1f9 349 00 00 00 00 
3b1fd 34a 00 00 00 00 
3b201 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b205 34c FC 0C EC 6C 
3b209 34d 6C 6C 6C 6C 
3b20d 34e 6C 6C 6C 6C 
3b211 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b215 350 EF 00 FF 00 
3b219 351 00 00 00 00 
3b21d 352 00 00 00 00 
3b221 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b225 354 FF 00 EF 6C 
3b229 355 6C 6C 6C 6C 
3b22d 356 6C 6C 6C 6C 
3b231 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b235 358 EC 0C EC 6C 
3b239 359 6C 6C 6C 6C 
3b23d 35a 6C 6C 6C 00 
3b241 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3b245 35c FF 00 FF 00 
3b249 35d 00 00 00 00 
3b24d 35e 00 00 00 6C 
3b251 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3b255 360 EF 00 EF 6C 
3b259 361 6C 6C 6C 6C 
3b25d 362 6C 6C 6C 00 
3b261 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3b265 364 63 3E 63 63 
3b269 365 63 63 3E 63 
3b26d 366 00 00 00 00 
3b271 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3b275 368 30 3C 36 33 
3b279 369 33 33 33 6E 
3b27d 36a 00 00 00 00 
3b281 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3b285 36c 66 66 6F 66 
3b289 36d 66 66 36 1F 
3b28d 36e 00 00 00 36 
3b291 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3b295 370 66 66 66 66 
3b299 371 66 66       | 	byte	$66[6]
3b29b 371 36 1F 00 00 
3b29f 372 00 00 63 00 
3b2a3 373 7F 66 46 16 
3b2a7 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3b2ab 375 66 7F 00 00 
3b2af 376 00 6C 38 00 
3b2b3 377 38 30 30 3C 
3b2b7 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3b2bb 379 33 6E 00 00 
3b2bf 37a 00 36 1C 00 
3b2c3 37b 63 67 6F 7F 
3b2c7 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3b2cb 37d 63 63 00 00 
3b2cf 37e 00 30 18 00 
3b2d3 37f 3C 18 18 18 
3b2d7 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3b2db 381 18 3C 00 00 
3b2df 382 00 3C 66 00 
3b2e3 383 3C 18 18 18 
3b2e7 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3b2eb 385 18 3C 00 00 
3b2ef 386 00 00 00 36 
3b2f3 387 1C 08 00 3E 
3b2f7 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3b2fb 389 63 3E 00 00 
3b2ff 38a 00 18 18 18 
3b303 38b 18 18 18 18 
3b307 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3b30b 38d 00 00 00 00 
3b30f 38e 00 00 00 00 
3b313 38f 00 00 00 00 | 	byte	$00[12]
3b317 390 F8 18 18 18 
3b31b 391 18 18 18 18 
3b31f 392 18 FF FF FF 
3b323 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3b327 394 FF FF FF FF 
3b32b 395 FF FF FF FF 
3b32f 396 FF          | 	byte	$ff[9]
3b330 397 00 00 00 00 
3b334 398 00 00 00    | 	byte	$00[7]
3b337 398 FF FF FF FF 
3b33b 399 FF FF FF FF 
3b33f 39a FF          | 	byte	$ff[9]
3b340 39b 00 00 00 7E 
3b344 39c 7E 5A 18 18 
3b348 39d 18 18 18 18 
3b34c 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3b350 39f 1C 36 1C 63 
3b354 3a0 63 63 63 63 
3b358 3a1 63 63 63 63 
3b35c 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b360 3a3 FF FF FF FF 
3b364 3a4 FF FF FF    | 	byte	$ff[7]
3b367 3a4 00 00 00 00 
3b36b 3a5 00 00 00 00 
3b36f 3a6 00          | 	byte	$00[9]
3b370 3a7 30 18 00 3E 
3b374 3a8 63 63 63 63 
3b378 3a9 63 63 63 63 
3b37c 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b380 3ab 00 00 00 1E 
3b384 3ac 33 33 33 1B 
3b388 3ad 33 63 63 63 
3b38c 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3b390 3af 1C 36 00 3E 
3b394 3b0 63 63 63 63 
3b398 3b1 63 63 63 63 
3b39c 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b3a0 3b3 30 18 00 63 
3b3a4 3b4 67 6F 7F 7B 
3b3a8 3b5 73 63 63 63 
3b3ac 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3b3b0 3b7 00 00 60 30 
3b3b4 3b8 18 00 3B 66 
3b3b8 3b9 66 66 66 66 
3b3bc 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3b3c0 3bb 00 00 36 1C 
3b3c4 3bc 08 00 3B 66 
3b3c8 3bd 66 66 66 66 
3b3cc 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3b3d0 3bf 36 1C 00 3E 
3b3d4 3c0 63 63 06 1C 
3b3d8 3c1 30 60 63 63 
3b3dc 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3b3e0 3c3 00 00 36 1C 
3b3e4 3c4 08 00 3E 63 
3b3e8 3c5 06 1C 30 63 
3b3ec 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3b3f0 3c7 30 18 00 3F 
3b3f4 3c8 66 66 66 3E 
3b3f8 3c9 36 66 66 66 
3b3fc 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3b400 3cb 30 18 00 63 
3b404 3cc 63 63 63 63 
3b408 3cd 63 63 63 63 
3b40c 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b410 3cf 00 00 60 30 
3b414 3d0 18 00 3B 6E 
3b418 3d1 66 06 06 06 
3b41c 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3b420 3d3 66 33 00 63 
3b424 3d4 63 63 63 63 
3b428 3d5 63 63 63 63 
3b42c 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b430 3d7 00 00 60 30 
3b434 3d8 18 00 63 63 
3b438 3d9 63 63 63 63 
3b43c 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3b440 3db 30 18 00 66 
3b444 3dc 66 66 66 3C 
3b448 3dd 18 18 18 18 
3b44c 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3b450 3df 00 00 00 08 
3b454 3e0 0C 0C 3F 0C 
3b458 3e1 0C 0C 0C 6C 
3b45c 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3b460 3e3 30 18 00 00 
3b464 3e4 00 00 00 00 
3b468 3e5 00 00 00 00 
3b46c 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b470 3e7 00 00 00 00 
3b474 3e8 00 00 00 00 | 	byte	$00[8]
3b478 3e9 7F 00 00 00 
3b47c 3ea 00 00 00 00 
3b480 3eb 66 33 00 00 
3b484 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3b488 3ed 00 00 00 00 
3b48c 3ee 00 00 00 00 
3b490 3ef 00 00 00 00 
3b494 3f0 00 00 00 00 
3b498 3f1 00 00 00 00 
3b49c 3f2 00          | 	byte	$00[21]
3b49d 3f2 0C 06 3C 36 
3b4a1 3f3 1C 00 00 00 
3b4a5 3f4 00 00 00 00 
3b4a9 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b4ad 3f6 00 00 00 63 
3b4b1 3f7 3E 00 00 00 
3b4b5 3f8 00 00 00 00 
3b4b9 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b4bd 3fa 00 00 00 00 
3b4c1 3fb 3E 63 06 1C 
3b4c5 3fc 36 63 63 36 
3b4c9 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3b4cd 3fe 00 00 00 00 
3b4d1 3ff 00 00 00 00 | 	byte	$00[8]
3b4d5 400 18 00 7E 00 
3b4d9 401 18 00 00 00 
3b4dd 402 00 00 00 00 
3b4e1 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b4e5 404 00 00 00 00 
3b4e9 405 00 00 00 00 | 	byte	$00[8]
3b4ed 406 18 30 1E 00 
3b4f1 407 00 00 1C 36 
3b4f5 408 36 1C 00 00 
3b4f9 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3b4fd 40a 00 00 00 00 
3b501 40b 63 00 00 00 
3b505 40c 00 00 00 00 
3b509 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b50d 40e 00 00 00 18 
3b511 40f 18 00 00 00 
3b515 410 00 00 00 00 
3b519 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b51d 412 00 00 00 00 
3b521 413 00          | 	byte	$00[5]
3b522 413 CC 66 33 00 
3b526 414 33 33 33 33 
3b52a 415 33 33 6E 00 
3b52e 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3b532 417 00 3F 66 66 
3b536 418 66 3E 36 66 
3b53a 419 66 66 6F 00 
3b53e 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3b542 41b 36 1C 08 00 
3b546 41c 3B 6E 66 06 
3b54a 41d 06 06 0F 00 
3b54e 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3b552 41f 00 00 00 7E 
3b556 420 7E 7E 7E 7E 
3b55a 421 7E 7E 00 00 
3b55e 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3b562 423 00 00 00 00 
3b566 424 00 00 00 00 
3b56a 425 00 00 00 00 
3b56e 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b570 427             | 'vga_font       file "vgafont.def"
3b570 427 00 00 00 00 
      ...             
3b5a0 433 00 00 00 00 
3b5a4 434 00 00 00    | st_font        file "st4font.def"
3b5a7 434 FF FF 00 00 
3b5ab 435 00 00 00 00 
3b5af 436 00 18 18 18 
3b5b3 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b5b7 438 18 18 18 18 
3b5bb 439 18 18 18 18 
3b5bf 43a 18          | 	byte	$18[9]
3b5c0 43b 00 00 00 00 
3b5c4 43c 00 00 00    | 	byte	$00[7]
3b5c7 43c FF FF 18 18 
3b5cb 43d 18 18 18 18 
3b5cf 43e 18 18 18 18 
3b5d3 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b5d7 440 FF FF 00 00 
3b5db 441 00 00 00 00 
3b5df 442 00 18 18 18 
3b5e3 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b5e7 444 1F 1F 18 18 
3b5eb 445 18 18 18 18 
3b5ef 446 18 18 18 18 
3b5f3 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b5f7 448 F8 F8 18 18 
3b5fb 449 18 18 18 18 
3b5ff 44a 18 00 00 00 
3b603 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b607 44c 1F 1F 18 18 
3b60b 44d 18 18 18 18 
3b60f 44e 18 00 00 00 
3b613 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b617 450 F8 F8 18 18 
3b61b 451 18 18 18 18 
3b61f 452 18 18 18 18 
3b623 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b627 454 1F 1F 00 00 
3b62b 455 00 00 00 00 
3b62f 456 00 18 18 18 
3b633 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b637 458 F8 F8 00 00 
3b63b 459 00 00 00 00 
3b63f 45a 00 18 18 18 
3b643 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b647 45c FF FF 18 18 
3b64b 45d 18 18 18 18 
3b64f 45e 18 00 00 18 
3b653 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3b657 460 66 7E 7E 66 
3b65b 461 66 66 66 30 
3b65f 462 18 00 00 7E 
3b663 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3b667 464 3E 06 06 06 
3b66b 465 06 7E 7E 18 
3b66f 466 0C 30 18 3C 
3b673 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3b677 468 06 06 06 66 
3b67b 469 66 7E 3C 00 
3b67f 46a 00 30 18 66 
3b683 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3b687 46c 7E 7E 76 76 
3b68b 46d 66 66 66 00 
3b68f 46e 00 30 18 7C 
3b693 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3b697 470 1C 38 70 60 
3b69b 471 60 7E 3E 00 
3b69f 472 00 30 18 7E 
3b6a3 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3b6a7 474 18 0C 0C 06 
3b6ab 475 06 7E 7E 00 
3b6af 476 00 18 18 00 
3b6b3 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3b6b7 478 18 18 0C 0C 
3b6bb 479 06 7E 7E 00 
3b6bf 47a 00 30 18 3C 
3b6c3 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3b6c7 47c 66 66 66 66 
3b6cb 47d 66          | 	byte	$66[5]
3b6cc 47e 7E 3C 00 00 
3b6d0 47f 00 00 06 06 
3b6d4 480 06 06 16 1E 
3b6d8 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3b6dc 482 7E 7E 00 00 
3b6e0 483 00 00 00 00 
3b6e4 484 00 3C 7C 60 
3b6e8 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3b6ec 486 7E 7C 30 18 
3b6f0 487 00 00 00 00 
3b6f4 488 00 3C 7E 66 
3b6f8 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3b6fc 48a 7E 7C 18 0C 
3b700 48b 00 00 30 18 
3b704 48c 00 3C 3E 06 
3b708 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3b70c 48e 7E 7C 00 00 
3b710 48f 00 00 30 18 
3b714 490 00 3E 7E 66 
3b718 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3b71c 492 66 66 00 00 
3b720 493 00 00 30 18 
3b724 494 00 7C 7E 06 
3b728 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3b72c 496 7E 3E 00 00 
3b730 497 00 00 30 18 
3b734 498 00 7E 7E 30 
3b738 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3b73c 49a 7E 7E 00 00 
3b740 49b 00 00 18 18 
3b744 49c 00 7E 7E 30 
3b748 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3b74c 49e 7E 7E 00 00 
3b750 49f 00 00 30 18 
3b754 4a0 00 3C 7E 66 
3b758 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3b75c 4a2 7E 3C 00 00 
3b760 4a3 00 00 1C 1C 
3b764 4a4 18 18 38 3C 
3b768 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3b76c 4a6 3C 3C 00 00 
3b770 4a7 00 00 00 00 
3b774 4a8 00 00 00 00 
3b778 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b77c 4aa 00 00 00 00 
3b780 4ab 00 00       | 	byte	$00[6]
3b782 4ab 18 18 18 18 
3b786 4ac 18 18 18 18 | 	byte	$18[8]
3b78a 4ad 00 00 18 18 
3b78e 4ae 00 00 00 00 
3b792 4af 66 66 66 66 
3b796 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3b79a 4b1 00 00 00 00 
3b79e 4b2 00 00 00 00 
3b7a2 4b3 00          | 	byte	$00[9]
3b7a3 4b3 66 66 FF FF 
3b7a7 4b4 66 66 FF FF 
3b7ab 4b5 66 66 00 00 
3b7af 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3b7b3 4b7 7C 7E 06 06 
3b7b7 4b8 3E 7C 60 60 
3b7bb 4b9 7E 3E 18 18 
3b7bf 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3b7c3 4bb 66 30 30 18 
3b7c7 4bc 18 0C 0C 66 
3b7cb 4bd 66 00 00 00 
3b7cf 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3b7d3 4bf 66 66 3C 1C 
3b7d7 4c0 1C FC FE 66 
3b7db 4c1 66 FE FC 00 
3b7df 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3b7e3 4c3 18 18 18 18 
3b7e7 4c4 00 00 00 00 
3b7eb 4c5 00 00 00 00 
3b7ef 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3b7f3 4c7 18 1C 0C 0C 
3b7f7 4c8 0C 0C 0C 0C 
3b7fb 4c9 1C 18 30 00 
3b7ff 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3b803 4cb 18 38 30 30 
3b807 4cc 30 30 30 30 
3b80b 4cd 38 18 0C 00 
3b80f 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3b813 4cf 66 66 3C 3C 
3b817 4d0 FF FF 3C 3C 
3b81b 4d1 66 66 00 00 
3b81f 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3b823 4d3 00 18 18 18 
3b827 4d4 7E 7E 18 18 
3b82b 4d5 18 00 00 00 
3b82f 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b833 4d7 00 00 00 00 
3b837 4d8 00 00       | 	byte	$00[6]
3b839 4d9 18 18 18 18 
3b83d 4da 18          | 	byte	$18[5]
3b83e 4da 0C 04 00 00 
3b842 4db 00 00 00 00 
3b846 4dc 7E 7E 00 00 
3b84a 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3b84e 4de 00 00 00 00 
3b852 4df 00 00 00 00 
3b856 4e0 00 00 00 00 
3b85a 4e1 00          | 	byte	$00[13]
3b85b 4e1 18 18 18 00 
3b85f 4e2 00 00 00 60 
3b863 4e3 60 60 30 30 
3b867 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3b86b 4e5 06 06 06 00 
3b86f 4e6 00 00 00 3C 
3b873 4e7 7E 66 66 66 
3b877 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3b87b 4e9 66 7E 3C 00 
3b87f 4ea 00 00 00 18 
3b883 4eb 18 1C 1C 18 
3b887 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3b88b 4ed 18 7E 7E 00 
3b88f 4ee 00 00 00 3C 
3b893 4ef 7E 66 66 30 
3b897 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3b89b 4f1 0C 7E 7E 00 
3b89f 4f2 00 00 00 7E 
3b8a3 4f3 7E 30 30 18 
3b8a7 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3b8ab 4f5 66 7E 3C 00 
3b8af 4f6 00 00 00 30 
3b8b3 4f7 30 38 38 3C 
3b8b7 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3b8bb 4f9 7E 30 30 00 
3b8bf 4fa 00 00 00 7E 
3b8c3 4fb 7E 06 06 3E 
3b8c7 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3b8cb 4fd 66 7E 3C 00 
3b8cf 4fe 00 00 00 38 
3b8d3 4ff 3C 0E 06 06 
3b8d7 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3b8db 501 66 7E 3C 00 
3b8df 502 00 00 00 7E 
3b8e3 503 7E 60 60 30 
3b8e7 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3b8eb 505 0C 0C 0C 00 
3b8ef 506 00 00 00 3C 
3b8f3 507 7E 66 66 3C 
3b8f7 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3b8fb 509 66 7E 3C 00 
3b8ff 50a 00 00 00 3C 
3b903 50b 7E 66 66 7E 
3b907 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3b90b 50d 70 3C 1C 00 
3b90f 50e 00 00 00 00 
3b913 50f 00 00 18 18 
3b917 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3b91b 511 18 18 18 00 
3b91f 512 00 00 00 00 
3b923 513 00 00 18 18 
3b927 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3b92b 515 18 18 18 0C 
3b92f 516 04 00 00 00 
3b933 517 70 38 1C 0E 
3b937 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3b93b 519 70 00 00 00 
3b93f 51a 00 00 00 00 
3b943 51b 00 00 7E 7E 
3b947 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3b94b 51d 00 00 00 00 
3b94f 51e 00 00 00 00 | 	byte	$00[8]
3b953 51f 0E 1C 38 70 
3b957 520 E0 70 38 1C 
3b95b 521 0E 00 00 00 
3b95f 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3b963 523 7E 66 66 30 
3b967 524 30 18 18 18 
3b96b 525 00 18 18 00 
3b96f 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3b973 527 7E 66 66 66 
3b977 528 66 36 06 66 
3b97b 529 66 7E 3C 00 
3b97f 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3b983 52b 3C 7E 66 66 
3b987 52c 66 7E 7E 66 
3b98b 52d 66 66 66 00 
3b98f 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3b993 52f 7E 66 66 7E 
3b997 530 3E 66 66 66 
3b99b 531 66 7E 3E 00 
3b99f 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3b9a3 533 7E 66 66 06 
3b9a7 534 06 06 06 66 
3b9ab 535 66 7E 3C 00 
3b9af 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3b9b3 537 7E 66 66 66 
3b9b7 538 66 66 66 66 
3b9bb 539 66 7E 3E 00 
3b9bf 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3b9c3 53b 7E 06 06 3E 
3b9c7 53c 3E 06 06 06 
3b9cb 53d 06 7E 7E 00 
3b9cf 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3b9d3 53f 7E 06 06 3E 
3b9d7 540 3E 06 06 06 
3b9db 541 06 06 06 00 
3b9df 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3b9e3 543 7E 06 06 76 
3b9e7 544 76 66 66 66 
3b9eb 545 66 7E 3C 00 
3b9ef 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3b9f3 547 66 66 66 7E 
3b9f7 548 7E 66 66 66 
3b9fb 549 66 66 66 00 
3b9ff 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3ba03 54b 7E 18 18 18 
3ba07 54c 18 18 18 18 
3ba0b 54d 18 7E 7E 00 
3ba0f 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3ba13 54f 60 60 60 60 
3ba17 550 60 60 60    | 	byte	$60[7]
3ba1a 551 66 66 7E 3C 
3ba1e 552 00 00 00 00 
3ba22 553 66 66 36 36 
3ba26 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3ba2a 555 66 66 C6 C6 
3ba2e 556 00 00 00 00 
3ba32 557 06 06 06 06 
3ba36 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3ba3a 559 06 06 7E 7E 
3ba3e 55a 00 00 00 00 
3ba42 55b C6 C6 EE EE 
3ba46 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3ba4a 55d C6 C6 C6 C6 
3ba4e 55e 00 00 00 00 
3ba52 55f 66 66 66 6E 
3ba56 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3ba5a 561 76 66 66 66 
3ba5e 562 00 00 00 00 
3ba62 563 3C 7E 66 66 
3ba66 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3ba6a 565 66 66 7E 3C 
3ba6e 566 00 00 00 00 
3ba72 567 3E 7E 66 66 
3ba76 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3ba7a 569 06 06 06 06 
3ba7e 56a 00 00 00 00 
3ba82 56b 3C 7E 66 66 
3ba86 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3ba8a 56d 66 56 3E 6C 
3ba8e 56e 00 00 00 00 
3ba92 56f 3E 7E 66 66 
3ba96 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3ba9a 571 66 66 C6 C6 
3ba9e 572 00 00 00 00 
3baa2 573 7C 7E 06 06 
3baa6 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3baaa 575 60 60 7E 3E 
3baae 576 00 00 00 00 
3bab2 577 7E 7E 18 18 
3bab6 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3baba 579 18 18 18 18 
3babe 57a 00 00 00 00 
3bac2 57b 66 66 66 66 
3bac6 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3baca 57d 66 66 7E 3C 
3bace 57e 00 00 00 00 
3bad2 57f 66 66 66 66 
3bad6 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3bada 581 3C 3C 18 18 
3bade 582 00 00 00 00 
3bae2 583 C6 C6 C6 C6 
3bae6 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3baea 585 FE EE C6 82 
3baee 586 00 00 00 00 
3baf2 587 66 66 66 3C 
3baf6 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3bafa 589 3C 66 66 66 
3bafe 58a 00 00 00 00 
3bb02 58b 66 66 66 66 
3bb06 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3bb0a 58d 18 18 18 18 
3bb0e 58e 00 00 00 00 
3bb12 58f 7E 7E 30 30 
3bb16 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3bb1a 591 06 06 7E 7E 
3bb1e 592 00 00 00 00 
3bb22 593 3C 3C 0C 0C 
3bb26 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3bb2a 595 0C 0C 3C 3C 
3bb2e 596 00 00 00 00 
3bb32 597 06 06 0C 0C 
3bb36 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3bb3a 599 60 60 C0 C0 
3bb3e 59a 00 00 00 00 
3bb42 59b 3C 3C 30 30 
3bb46 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3bb4a 59d 30 30 3C 3C 
3bb4e 59e 00 00 00 00 
3bb52 59f 18 18 3C 3C 
3bb56 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3bb5a 5a1 00 00 00 00 
3bb5e 5a2 00 00 00 00 
3bb62 5a3 00 00 00 00 
3bb66 5a4 00 00 00 00 
3bb6a 5a5 00 00       | 	byte	$00[18]
3bb6c 5a6 FE FE 00 00 
3bb70 5a7 00 00 0C 0C 
3bb74 5a8 18 18 00 00 
3bb78 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3bb7c 5aa 00 00 00 00 
3bb80 5ab 00 00 00 00 
3bb84 5ac 00          | 	byte	$00[9]
3bb85 5ac 3C 7C 60 7C 
3bb89 5ad 7E 66 66 7E 
3bb8d 5ae 7C 00 00 00 
3bb91 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3bb95 5b0 3E 7E 66 66 
3bb99 5b1 66 66 66 7E 
3bb9d 5b2 3E 00 00 00 
3bba1 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3bba5 5b4 3C 3E 06 06 
3bba9 5b5 06 06 06 7E 
3bbad 5b6 7C 00 00 00 
3bbb1 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3bbb5 5b8 7C 7E 66 66 
3bbb9 5b9 66 66 66 7E 
3bbbd 5ba 7C 00 00 00 
3bbc1 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3bbc5 5bc 3C 7E 66 66 
3bbc9 5bd 7E 06 06 7E 
3bbcd 5be 7C 00 00 00 
3bbd1 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3bbd5 5c0 18 7E 7E 18 
3bbd9 5c1 18 18 18 18 
3bbdd 5c2 18 00 00 00 
3bbe1 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3bbe5 5c4 7C 7E 66 66 
3bbe9 5c5 66 66 7E 7C 
3bbed 5c6 60 7E 3E 00 
3bbf1 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3bbf5 5c8 3E 7E 66 66 
3bbf9 5c9 66 66 66 66 
3bbfd 5ca 66 00 00 00 
3bc01 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3bc05 5cc 1C 1C 18 18 
3bc09 5cd 18 18 18 3C 
3bc0d 5ce 3C 00 00 00 
3bc11 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3bc15 5d0 30 30 30 30 
3bc19 5d1 30 30 30 30 
3bc1d 5d2 30          | 	byte	$30[9]
3bc1e 5d2 3E 1E 00 00 
3bc22 5d3 06 06 06 36 
3bc26 5d4 36 1E 1E 1E 
3bc2a 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3bc2e 5d6 00 00 00 00 
3bc32 5d7 1C 1C 18 18 
3bc36 5d8 18 18 18 18 
3bc3a 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3bc3e 5da 00 00 00 00 
3bc42 5db 00 00 00    | 	byte	$00[7]
3bc45 5dc 6C FE FE D6 
3bc49 5dd D6 C6 C6 C6 
3bc4d 5de C6 00 00 00 
3bc51 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3bc55 5e0 3E 7E 66 66 
3bc59 5e1 66 66 66 66 
3bc5d 5e2 66 00 00 00 
3bc61 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3bc65 5e4 3C 7E 66 66 
3bc69 5e5 66 66 66 7E 
3bc6d 5e6 3C 00 00 00 
3bc71 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3bc75 5e8 3E 7E 66 66 
3bc79 5e9 66 66 66 7E 
3bc7d 5ea 3E 06 06 00 
3bc81 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3bc85 5ec 7C 7E 66 66 
3bc89 5ed 66 66 66 7E 
3bc8d 5ee 7C 60 60 00 
3bc91 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3bc95 5f0 3E 7E 66 06 
3bc99 5f1 06 06 06 06 
3bc9d 5f2 06 00 00 00 
3bca1 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3bca5 5f4 7C 7E 06 0E 
3bca9 5f5 3C 70 60 7E 
3bcad 5f6 3E 00 00 00 
3bcb1 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3bcb5 5f8 7E 7E 18 18 
3bcb9 5f9 18 18 18 78 
3bcbd 5fa 70 00 00 00 
3bcc1 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3bcc5 5fc 66 66 66 66 
3bcc9 5fd 66 66 66    | 	byte	$66[7]
3bccc 5fe 7E 7C 00 00 
3bcd0 5ff 00 00 00 00 
3bcd4 600 00 66 66 66 
3bcd8 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3bcdc 602 18 18 00 00 
3bce0 603 00 00 00 00 
3bce4 604 00 C6 C6 D6 
3bce8 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3bcec 606 C6 82 00 00 
3bcf0 607 00 00 00 00 
3bcf4 608 00 66 66 3C 
3bcf8 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3bcfc 60a 66 66 00 00 
3bd00 60b 00 00 00 00 
3bd04 60c 00 66 66 66 
3bd08 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3bd0c 60e 7C 60 7E 3E 
3bd10 60f 00 00 00 00 
3bd14 610 00 7E 7E 30 
3bd18 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3bd1c 612 7E 7E 00 00 
3bd20 613 00 00 30 18 
3bd24 614 18 18 18 0C 
3bd28 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3bd2c 616 18 30 00 00 
3bd30 617 00 00 18 18 
3bd34 618 18 18 18 18 
3bd38 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bd3c 61a 18 18 00 00 
3bd40 61b 00 00 0C 18 
3bd44 61c 18 18 18 30 
3bd48 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3bd4c 61e 18 0C 00 00 
3bd50 61f 00 00 6C 7E 
3bd54 620 36 00 00 00 
3bd58 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3bd5c 622 00 00 00 00 
3bd60 623 00 00 00 00 
3bd64 624 00          | 	byte	$00[9]
3bd65 624 18 18 18 18 
3bd69 625 18 18 00 00 
3bd6d 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3bd70 627             | 'amiga_font     file "amigafont.def"
3bd70 627 00 6C FE FE 
3bd74 628 7C 38 10 00 
3bd78 629 18 18 18 F8 
3bd7c 62a F8 18 18 18 | a8_font        file "atari8.fnt"
3bd80 62b C0 C0 C0 C0 
3bd84 62c C0 C0 C0 C0 | 	byte	$c0[8]
3bd88 62d 18 18 18 1F 
3bd8c 62e 1F 00 00 00 
3bd90 62f 18 18 18 1F 
3bd94 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3bd98 631 00 00 00 1F 
3bd9c 632 1F 18 18 18 
3bda0 633 C0 E0 70 38 
3bda4 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3bda8 635 03 07 0E 1C 
3bdac 636 38 70 E0 C0 
3bdb0 637 80 C0 E0 F0 
3bdb4 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3bdb8 639 00 00 00 00 
3bdbc 63a F0 F0 F0 F0 
3bdc0 63b 01 03 07 0F 
3bdc4 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3bdc8 63d F0 F0 F0 F0 
3bdcc 63e 00 00 00 00 
3bdd0 63f 0F 0F 0F 0F 
3bdd4 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3bdd8 641 FF FF 00 00 
3bddc 642 00 00 00 00 
3bde0 643 00 00 00 00 
3bde4 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3bde8 645 00 00 00 00 
3bdec 646 0F 0F 0F 0F 
3bdf0 647 00 38 38 EE 
3bdf4 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3bdf8 649 00 00 00 F8 
3bdfc 64a F8 18 18 18 
3be00 64b 00 00 00 FF 
3be04 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3be08 64d 18 18 18 FF 
3be0c 64e FF 18 18 18 
3be10 64f 00 00 3C 7E 
3be14 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3be18 651 00 00 00 00 
3be1c 652 FF FF FF FF 
3be20 653 03 03 03 03 
3be24 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3be28 655 00 00 00 FF 
3be2c 656 FF 18 18 18 
3be30 657 18 18 18 FF 
3be34 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3be38 659 0F 0F 0F 0F 
3be3c 65a 0F 0F 0F 0F | 	byte	$0f[8]
3be40 65b 18 18 18 F8 
3be44 65c F8 00 00 00 
3be48 65d 1E 06 1E 06 
3be4c 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3be50 65f 00 18 3C 7E 
3be54 660 18 18 18 00 
3be58 661 00 18 18 18 
3be5c 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3be60 663 00 18 0C 7E 
3be64 664 0C 18 00 00 
3be68 665 00 18 30 7E 
3be6c 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3be70 667 00 00 00 00 
3be74 668 00 00 00 00 
3be78 669 00          | 	byte	$00[9]
3be79 669 18 18 18 18 
3be7d 66a 00 18 00 00 
3be81 66b 66 66 66 00 
3be85 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3be89 66d 66 FF 66 66 
3be8d 66e FF 66 00 18 
3be91 66f 7C 06 3C 60 
3be95 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3be99 671 66 36 18 0C 
3be9d 672 66 62 00 38 
3bea1 673 6C 38 1C F6 
3bea5 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3bea9 675 18 18 18 00 
3bead 676 00 00 00 00 
3beb1 677 70 38 18 18 
3beb5 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3beb9 679 0E 1C 18 18 
3bebd 67a 1C 0E 00 00 
3bec1 67b 66 3C FF 3C 
3bec5 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3bec9 67d 18 18 7E 18 
3becd 67e 18 00 00 00 
3bed1 67f 00 00 00 00 
3bed5 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3bed9 681 00 00 7E 00 
3bedd 682 00 00 00 00 
3bee1 683 00 00 00 00 
3bee5 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3bee9 685 60 30 18 0C 
3beed 686 06 02 00 00 
3bef1 687 3C 66 76 6E 
3bef5 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3bef9 689 18 1C 18 18 
3befd 68a 18 7E 00 00 
3bf01 68b 3C 66 30 18 
3bf05 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3bf09 68d 7E 30 18 30 
3bf0d 68e 66 3C 00 00 
3bf11 68f 30 38 3C 36 
3bf15 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3bf19 691 7E 06 3E 60 
3bf1d 692 66 3C 00 00 
3bf21 693 3C 06 3E 66 
3bf25 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3bf29 695 7E 60 30 18 
3bf2d 696 0C 0C 00 00 
3bf31 697 3C 66 3C 66 
3bf35 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3bf39 699 3C 66 7C 60 
3bf3d 69a 30 1C 00 00 
3bf41 69b 00 18 18 00 
3bf45 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3bf49 69d 00 18 18 00 
3bf4d 69e 18 18 0C 60 
3bf51 69f 30 18 0C 18 
3bf55 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3bf59 6a1 00 7E 00 00 
3bf5d 6a2 7E 00 00 06 
3bf61 6a3 0C 18 30 18 
3bf65 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3bf69 6a5 3C 66 30 18 
3bf6d 6a6 00 18 00 00 
3bf71 6a7 3C 66 76 76 
3bf75 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3bf79 6a9 18 3C 66 66 
3bf7d 6aa 7E 66 00 00 
3bf81 6ab 3E 66 3E 66 
3bf85 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3bf89 6ad 3C 66 06 06 
3bf8d 6ae 66 3C 00 00 
3bf91 6af 1E 36 66 66 
3bf95 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3bf99 6b1 7E 06 3E 06 
3bf9d 6b2 06 7E 00 00 
3bfa1 6b3 7E 06 3E 06 
3bfa5 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3bfa9 6b5 7C 06 06 76 
3bfad 6b6 66 7C 00 00 
3bfb1 6b7 66 66 7E 66 
3bfb5 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3bfb9 6b9 7E 18 18 18 
3bfbd 6ba 18 7E 00 00 
3bfc1 6bb 60 60 60 60 
3bfc5 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3bfc9 6bd 66 36 1E 1E 
3bfcd 6be 36 66 00 00 
3bfd1 6bf 06 06 06 06 
3bfd5 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3bfd9 6c1 C6 EE FE D6 
3bfdd 6c2 C6 C6 00 00 
3bfe1 6c3 66 6E 7E 7E 
3bfe5 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3bfe9 6c5 3C 66 66 66 
3bfed 6c6 66 3C 00 00 
3bff1 6c7 3E 66 66 3E 
3bff5 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3bff9 6c9 3C 66 66 66 
3bffd 6ca 36 6C 00 00 
3c001 6cb 3E 66 66 3E 
3c005 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3c009 6cd 3C 06 3C 60 
3c00d 6ce 60 3C 00 00 
3c011 6cf 7E 18 18 18 
3c015 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3c019 6d1 66 66 66 66 
3c01d 6d2 66          | 	byte	$66[5]
3c01e 6d2 7E 00 00 66 
3c022 6d3 66 66 66 3C 
3c026 6d4 18 00 00 C6 
3c02a 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3c02e 6d6 C6 00 00 66 
3c032 6d7 66 3C 3C 66 
3c036 6d8 66 00 00 66 
3c03a 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3c03e 6da 18 00 00 7E 
3c042 6db 30 18 0C 06 
3c046 6dc 7E 00 00 78 
3c04a 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3c04e 6de 78 00 00 02 
3c052 6df 06 0C 18 30 
3c056 6e0 60 00 00 1E 
3c05a 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3c05e 6e2 1E 00 00 10 
3c062 6e3 38 6C C6 00 
3c066 6e4 00 00 00 00 
3c06a 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c06e 6e6 FF 00 00 18 
3c072 6e7 3C 7E 7E 3C 
3c076 6e8 18 00 00 00 
3c07a 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3c07e 6ea 7C 00 00 06 
3c082 6eb 06 3E 66 66 
3c086 6ec 3E 00 00 00 
3c08a 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3c08e 6ee 3C 00 00 60 
3c092 6ef 60 7C 66 66 
3c096 6f0 7C 00 00 00 
3c09a 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3c09e 6f2 3C 00 00 70 
3c0a2 6f3 18 7C 18 18 
3c0a6 6f4 18 00 00 00 
3c0aa 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3c0ae 6f6 60 3E 00 06 
3c0b2 6f7 06 3E 66 66 
3c0b6 6f8 66 00 00 18 
3c0ba 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3c0be 6fa 3C 00 00 60 
3c0c2 6fb 00 60 60 60 
3c0c6 6fc 60 3C 00 06 
3c0ca 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3c0ce 6fe 66 00 00 1C 
3c0d2 6ff 18 18 18 18 
3c0d6 700 3C 00 00 00 
3c0da 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3c0de 702 C6 00 00 00 
3c0e2 703 3E 66 66 66 
3c0e6 704 66 00 00 00 
3c0ea 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3c0ee 706 3C 00 00 00 
3c0f2 707 3E 66 66 3E 
3c0f6 708 06 06 00 00 
3c0fa 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3c0fe 70a 60 60 00 00 
3c102 70b 3E 66 06 06 
3c106 70c 06 00 00 00 
3c10a 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3c10e 70e 3E 00 00 18 
3c112 70f 7E 18 18 18 
3c116 710 70 00 00 00 
3c11a 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3c11e 712 7C 00 00 00 
3c122 713 66 66 66 3C 
3c126 714 18 00 00 00 
3c12a 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3c12e 716 6C 00 00 00 
3c132 717 66 3C 18 3C 
3c136 718 66 00 00 00 
3c13a 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3c13e 71a 30 1E 00 00 
3c142 71b 7E 30 18 0C 
3c146 71c 7E 00 00 18 
3c14a 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3c14e 71e 3C 00 18 18 
3c152 71f 18 18 18 18 
3c156 720 18 18 00 7E 
3c15a 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3c15e 722 60 00 10 18 
3c162 723 1C 1E 1C 18 
3c166 724 10 00 08 18 
3c16a 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3c16e 726 08 00       | 	byte	$08, $00
3c170 727 00 00 00 00 
3c174 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3c175 728 80 00 00 00 
3c179 729 00 80 00 00 
3c17d 72a 80 80 00 00 
3c181 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3c185 72c 80 00 80 00 
3c189 72d 00 40 80 00 
3c18d 72e AA AA AA 00 
3c191 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3c195 730 FF 00 00 00 
3c199 731 00 FF 00 00 
3c19d 732 FF FF 00 00 
3c1a1 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3c1a5 734 FF 00 FF 00 
3c1a9 735 00 FF FF 00 
3c1ad 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3c1b0 737 00 00 00 00 
3c1b4 738 00          | ataripalette   file "ataripalettep2.def"
3c1b5 738 11 11 11 00 
3c1b9 739 22 22 22 00 
3c1bd 73a 33 33 33 00 
3c1c1 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3c1c5 73c 55 55 55 00 
3c1c9 73d 66 66 66 00 
3c1cd 73e 77 77 77 00 
3c1d1 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3c1d5 740 99 99 99 00 
3c1d9 741 AA AA AA 00 
3c1dd 742 BB BB BB 00 
3c1e1 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3c1e5 744 DD DD DD 00 
3c1e9 745 EE EE EE 00 
3c1ed 746 FF FF FF 00 
3c1f1 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3c1f5 748 00 14 40 00 
3c1f9 749 00 1E 60 00 
3c1fd 74a 00 28 80 00 
3c201 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3c205 74c 00 3C BF 00 
3c209 74d 00 46 DF 00 
3c20d 74e 00 50 FF 00 
3c211 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3c215 750 39 77 FF 00 
3c219 751 55 8A FF 00 
3c21d 752 71 9E FF 00 
3c221 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3c225 754 AA C5 FF 00 
3c229 755 C6 D8 FF 00 
3c22d 756 E3 EC FF 00 
3c231 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3c235 758 00 00 40 00 
3c239 759 00 00 60 00 
3c23d 75a 00 00 80 00 
3c241 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3c245 75c 00 00 BF 00 
3c249 75d 00 00 DF 00 
3c24d 75e 00 00 FF 00 
3c251 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3c255 760 39 39 FF 00 
3c259 761 55 55 FF 00 
3c25d 762 71 71 FF 00 
3c261 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3c265 764 AA AA FF 00 
3c269 765 C6 C6 FF 00 
3c26d 766 E3 E3 FF 00 
3c271 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3c275 768 20 00 40 00 
3c279 769 30 00 60 00 
3c27d 76a 40 00 80 00 
3c281 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3c285 76c 60 00 BF 00 
3c289 76d 70 00 DF 00 
3c28d 76e 80 00 FF 00 
3c291 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3c295 770 9C 39 FF 00 
3c299 771 AA 55 FF 00 
3c29d 772 B8 71 FF 00 
3c2a1 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3c2a5 774 D5 AA FF 00 
3c2a9 775 E3 C6 FF 00 
3c2ad 776 F1 E3 FF 00 
3c2b1 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3c2b5 778 40 00 40 00 
3c2b9 779 60 00 60 00 
3c2bd 77a 80 00 80 00 
3c2c1 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3c2c5 77c BF 00 BF 00 
3c2c9 77d DF 00 DF 00 
3c2cd 77e FF 00 FF 00 
3c2d1 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3c2d5 780 FF 39 FF 00 
3c2d9 781 FF 55 FF 00 
3c2dd 782 FF 71 FF 00 
3c2e1 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3c2e5 784 FF AA FF 00 
3c2e9 785 FF C6 FF 00 
3c2ed 786 FF E3 FF 00 
3c2f1 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3c2f5 788 40 00 20 00 
3c2f9 789 60 00 30 00 
3c2fd 78a 80 00 40 00 
3c301 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3c305 78c BF 00 60 00 
3c309 78d DF 00 70 00 
3c30d 78e FF 00 80 00 
3c311 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3c315 790 FF 39 9C 00 
3c319 791 FF 55 AA 00 
3c31d 792 FF 71 B8 00 
3c321 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3c325 794 FF AA D5 00 
3c329 795 FF C6 E3 00 
3c32d 796 FF E3 F1 00 
3c331 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3c335 798 40 00 00 00 
3c339 799 60 00 00 00 
3c33d 79a 80 00 00 00 
3c341 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3c345 79c BF 00 00 00 
3c349 79d DF 00 00 00 
3c34d 79e FF 00 00 00 
3c351 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3c355 7a0 FF 39 39 00 
3c359 7a1 FF 55 55 00 
3c35d 7a2 FF 71 71 00 
3c361 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3c365 7a4 FF AA AA 00 
3c369 7a5 FF C6 C6 00 
3c36d 7a6 FF E3 E3 00 
3c371 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3c375 7a8 40 10 00 00 
3c379 7a9 60 18 00 00 
3c37d 7aa 80 20 00 00 
3c381 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3c385 7ac BF 30 00 00 
3c389 7ad DF 38 00 00 
3c38d 7ae FF 40 00 00 
3c391 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3c395 7b0 FF 6A 39 00 
3c399 7b1 FF 80 55 00 
3c39d 7b2 FF 95 71 00 
3c3a1 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3c3a5 7b4 FF BF AA 00 
3c3a9 7b5 FF D5 C6 00 
3c3ad 7b6 FF EA E3 00 
3c3b1 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3c3b5 7b8 40 20 00 00 
3c3b9 7b9 60 30 00 00 
3c3bd 7ba 80 40 00 00 
3c3c1 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3c3c5 7bc BF 60 00 00 
3c3c9 7bd DF 70 00 00 
3c3cd 7be FF 80 00 00 
3c3d1 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3c3d5 7c0 FF 9C 39 00 
3c3d9 7c1 FF AA 55 00 
3c3dd 7c2 FF B8 71 00 
3c3e1 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3c3e5 7c4 FF D5 AA 00 
3c3e9 7c5 FF E3 C6 00 
3c3ed 7c6 FF F1 E3 00 
3c3f1 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3c3f5 7c8 40 30 00 00 
3c3f9 7c9 60 48 00 00 
3c3fd 7ca 80 60 00 00 
3c401 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3c405 7cc BF 90 00 00 
3c409 7cd DF A8 00 00 
3c40d 7ce FF C0 00 00 
3c411 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3c415 7d0 FF CE 39 00 
3c419 7d1 FF D5 55 00 
3c41d 7d2 FF DC 71 00 
3c421 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3c425 7d4 FF EA AA 00 
3c429 7d5 FF F1 C6 00 
3c42d 7d6 FF F8 E3 00 
3c431 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3c435 7d8 30 40 00 00 
3c439 7d9 48 60 00 00 
3c43d 7da 60 80 00 00 
3c441 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3c445 7dc 90 BF 00 00 
3c449 7dd A8 DF 00 00 
3c44d 7de C0 FF 00 00 
3c451 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3c455 7e0 CE FF 39 00 
3c459 7e1 D5 FF 55 00 
3c45d 7e2 DC FF 71 00 
3c461 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3c465 7e4 EA FF AA 00 
3c469 7e5 F1 FF C6 00 
3c46d 7e6 F8 FF E3 00 
3c471 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3c475 7e8 00 40 00 00 
3c479 7e9 00 60 00 00 
3c47d 7ea 00 80 00 00 
3c481 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3c485 7ec 00 BF 00 00 
3c489 7ed 00 DF 00 00 
3c48d 7ee 00 FF 00 00 
3c491 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3c495 7f0 39 FF 39 00 
3c499 7f1 55 FF 55 00 
3c49d 7f2 71 FF 71 00 
3c4a1 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3c4a5 7f4 AA FF AA 00 
3c4a9 7f5 C6 FF C6 00 
3c4ad 7f6 E3 FF E3 00 
3c4b1 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3c4b5 7f8 00 40 14 00 
3c4b9 7f9 00 60 1E 00 
3c4bd 7fa 00 80 28 00 
3c4c1 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3c4c5 7fc 00 BF 3C 00 
3c4c9 7fd 00 DF 46 00 
3c4cd 7fe 00 FF 50 00 
3c4d1 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3c4d5 800 39 FF 77 00 
3c4d9 801 55 FF 8A 00 
3c4dd 802 71 FF 9E 00 
3c4e1 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3c4e5 804 AA FF C5 00 
3c4e9 805 C6 FF D8 00 
3c4ed 806 E3 FF EC 00 
3c4f1 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3c4f5 808 00 40 28 00 
3c4f9 809 00 60 3C 00 
3c4fd 80a 00 80 50 00 
3c501 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3c505 80c 00 BF 78 00 
3c509 80d 00 DF 8C 00 
3c50d 80e 00 FF A0 00 
3c511 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3c515 810 39 FF B5 00 
3c519 811 55 FF C0 00 
3c51d 812 71 FF CA 00 
3c521 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3c525 814 AA FF DF 00 
3c529 815 C6 FF EA 00 
3c52d 816 E3 FF F4 00 
3c531 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3c535 818 00 40 40 00 
3c539 819 00 60 60 00 
3c53d 81a 00 80 80 00 
3c541 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3c545 81c 00 BF BF 00 
3c549 81d 00 DF DF 00 
3c54d 81e 00 FF FF 00 
3c551 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3c555 820 39 FF FF 00 
3c559 821 55 FF FF 00 
3c55d 822 71 FF FF 00 
3c561 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3c565 824 AA FF FF 00 
3c569 825 C6 FF FF 00 
3c56d 826 E3 FF FF 00 
3c571 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3c575 828 00 28 40 00 
3c579 829 00 3C 60 00 
3c57d 82a 00 50 80 00 
3c581 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3c585 82c 00 78 BF 00 
3c589 82d 00 8C DF 00 
3c58d 82e 00 A0 FF 00 
3c591 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3c595 830 39 B5 FF 00 
3c599 831 55 C0 FF 00 
3c59d 832 71 CA FF 00 
3c5a1 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3c5a5 834 AA DF FF 00 
3c5a9 835 C6 EA FF 00 
3c5ad 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3c5b0 837             | 
3c5b0 837             | '**********************************************************************************
3c5b0 837             | '
3c5b0 837             | '        Timings and colors definitions
3c5b0 837             | '
3c5b0 837             | '**********************************************************************************
3c5b0 837             | 
3c5b0 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3c5b0 837 08 00 00 00 
3c5b4 838 3C 00 00 00 
3c5b8 839 08 00 00 00 
3c5bc 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3c5c0 83b 07 00 00 00 
3c5c4 83c 04 00 00 00 
3c5c8 83d 01 00 00 00 
3c5cc 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3c5d0 83f 58 02 00 00 
3c5d4 840 20 9E 4B 14 
3c5d8 841 FB A8 9E 01 
3c5dc 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3c5e0 843 00 00 00 00 
3c5e4 844 C0 00 00 00 
3c5e8 845 00 00 00 00 
3c5ec 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c5f0 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3c5f0 847 00 75 C7 97 
3c5f4 848 27 47 F6 0A 
3c5f8 849 05 79 CB 9B 
3c5fc 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3c600 84b             | 
3c600 84b             | ''--------  Initialization  ----------------------------------------------------------------
3c600 84b             | 
3c600 84b 28 0C 64 FD | hdmi            setq    #6
3c604 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3c608 84d 28 10 64 FD |                 setq    #8
3c60c 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3c610 84f             | 
3c610 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3c614 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3c618 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3c61c 852 D6 C6 01 F1 |                 add     t1,hbase
3c620 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3c624 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3c628 855 7B 0B 80 5F 
3c62c 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3c630 857 66 66 86 FF 
3c634 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3c638 859             | '
3c638 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3c63c 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
3c640 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3c644 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3c648 85d             | 
3c648 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3c64c 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3c650 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3c654 860             | 
3c654 860             | ''--------  frame rendering main loop  ---------------------------------------------------
3c654 860             | 
3c654 860 28 06 64 FD | p101            setq 	#3
3c658 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
3c65c 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3c660 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3c664 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3c668 865 00 A0 05 F6 |                 mov     dlinum, #0
3c66c 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3c670 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3c674 868             | 
3c674 868             | 
3c674 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3c678 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3c67c 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3c680 86b             |                 
3c680 86b             | 
3c680 86b             | 
3c680 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3c680 86b             |   
3c680 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3c684 86c 29 FE 65 3D |          if_nc  setq2   #255
3c688 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3c68c 86e             | 
3c68c 86e             | '' -----   up porch (before the picture)
3c68c 86e             | 
3c68c 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3c690 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3c694 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3c698 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3c69c 872             |  
3c69c 872             |    
3c69c 872             |  
3c69c 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3c6a0 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
3c6a4 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3c6a8 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3c6ac 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
3c6b0 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3c6b4 878             | 
3c6b4 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3c6b8 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
3c6bc 87a 48 00 B0 FD | 		call    #dli
3c6c0 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3c6c4 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
3c6c8 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3c6cc 87e             |                 	
3c6cc 87e             |                 
3c6cc 87e             | 
3c6cc 87e             |  
3c6cc 87e             | '' ------- the main screen drawing starts here
3c6cc 87e             | 
3c6cc 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3c6d0 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3c6d4 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3c6d8 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
3c6dc 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3c6e0 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3c6e4 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3c6e8 885             |               
3c6e8 885             | 
3c6e8 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3c6ec 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3c6f0 887             | 
3c6f0 887             | ' ---------------- All visible lines displayed now, start vblank  
3c6f0 887             | 
3c6f0 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3c6f4 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3c6f8 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3c6fc 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
3c700 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3c704 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3c708 88d             | 
3c708 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3c708 88d             | 
3c708 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3c708 88d             | 
3c708 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3c70c 88e             | 
3c70c 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3c710 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3c714 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3c718 891             | 
3c718 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3c71c 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3c720 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3c724 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3c728 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3c72c 896             | 
3c72c 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3c730 897 DD C6 41 F8 |                 getnib  t1,dl,#0
3c734 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3c738 899 70 00 90 AD |     if_z        jmp     #preload
3c73c 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3c740 89b 94 00 90 AD |     if_z        jmp     #preload2
3c744 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3c748 89d 0C 00 90 AD |     if_z        jmp     #p390
3c74c 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3c750 89f 28 00 90 AD |     if_z        jmp     #p391  
3c754 8a0             | 
3c754 8a0 2D 00 64 FD | p308            ret
3c758 8a1             |    
3c758 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3c75c 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3c760 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3c764 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3c768 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3c76c 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3c770 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3c774 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3c778 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3c77c 8aa             |  
3c77c 8aa             | '' --------  Reload palette. To do 
3c77c 8aa             | 
3c77c 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3c780 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3c784 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3c788 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3c78c 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3c790 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
3c794 8b0 70 FF 9F FD |         	jmp     #dli                
3c798 8b1             |       
3c798 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3c798 8b1             | 
3c798 8b1             | 
3c798 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3c798 8b1             | 
3c798 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3c79c 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
3c7a0 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3c7a4 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3c7a8 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3c7ac 8b6             |         
3c7ac 8b6             | '' -------------- Preload a line from PSRAM        
3c7ac 8b6             |         
3c7ac 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3c7b0 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3c7b4 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3c7b8 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
3c7bc 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
3c7c0 8bb             | 
3c7c0 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3c7c4 8bc 32 B7 01 F6 |                 mov     buf2,a1024
3c7c8 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3c7cc 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3c7d0 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3c7d4 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3c7d8 8c1             |  
3c7d8 8c1             |  
3c7d8 8c1             | preload2      '  incmod  dlinum,#3
3c7d8 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
3c7dc 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
3c7e0 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3c7e4 8c4 28 02 64 FD |                 setq	#1
3c7e8 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3c7ec 8c6             |                 
3c7ec 8c6             | 
3c7ec 8c6             | '' -------------- Draw sprites
3c7ec 8c6             | 
3c7ec 8c6 CF 5C 02 F6 | sprite          mov t8,frames
3c7f0 8c7 10 5C 0E F5 | 		and t8,#16 wz
3c7f4 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3c7f8 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
3c7fc 8ca             | 		
3c7fc 8ca             | 
3c7fc 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3c800 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3c804 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
3c808 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3c80c 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3c810 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
3c814 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3c818 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
3c81c 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3c820 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3c824 8d4 01 52 86 F1 |                 sub     sprite_h,#1
3c828 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3c82c 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3c830 8d7             | 
3c830 8d7             | 
3c830 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3c834 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3c838 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3c83c 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3c840 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3c844 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3c848 8dd 00 5E 06 F6 |                 mov 	t9,#0
3c84c 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3c850 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3c854 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3c858 8e1             |      
3c858 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3c85c 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3c860 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3c864 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3c868 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3c86c 8e6             |                 
3c86c 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3c870 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3c874 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3c878 8e9             |   		
3c878 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3c87c 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3c880 8eb             | 
3c880 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3c884 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3c888 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3c88c 8ee             |  
3c88c 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3c890 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3c894 8f0 10 00 90 CD |      if_c 	jmp     #p899		
3c898 8f1             | 	
3c898 8f1             | 	
3c898 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3c89c 8f2 28 CD 01 F1 | 		add	t4,sprite_w
3c8a0 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3c8a4 8f4             | 
3c8a4 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3c8a8 8f5             | 
3c8a8 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
3c8ac 8f6 01 58 86 F1 | 	 	sub     t6,#1
3c8b0 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3c8b4 8f8             | 
3c8b4 8f8 28 58 62 FD |                 setq   	t6
3c8b8 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3c8bc 8fa 28 5D 02 F6 |                 mov t8,sprite_w
3c8c0 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3c8c4 8fc 24 00 90 AD |         if_z    jmp #p898
3c8c8 8fd             |          
3c8c8 8fd             |         
3c8c8 8fd 70 5F 06 F6 |                 mov  t9,#368
3c8cc 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3c8d0 8ff             | 
3c8d0 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3c8d4 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
3c8d8 901 FF FF 7F FF 
3c8dc 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3c8e0 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3c8e4 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
3c8e8 905 2D 01 00 F5 |                 and 0-0, t7
3c8ec 906             |                
3c8ec 906             | 
3c8ec 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3c8f0 907 E5 E0 7A FA |                 wmlong 368,t3				
3c8f4 908             |                 
3c8f4 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3c8f8 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3c8fc 90a 2D 00 64 FD |                 ret
3c900 90b             | 	
3c900 90b             | 	
3c900 90b             |                
3c900 90b             |  
3c900 90b             | '' -------------- Graphics line ------------------------------------------------------------
3c900 90b             |  
3c900 90b             | 
3c900 90b             | '' consts and vars
3c900 90b             | 
3c900 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3c904 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3c908 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3c90c 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3c910 90f             | 
3c910 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3c914 910             | 
3c914 910             | '------ these longs will be set by setmode function
3c914 910             | 
3c914 910 00 00 00 00 | m_bs            long    0        'blanks before sync
3c918 911 00 00 00 00 | m_sn            long    0        'sync
3c91c 912 00 00 00 00 | m_bv            long    0        'blanks before visible
3c920 913 00 00 00 00 | m_vi            long    0        'visible pixels #
3c924 914             | 'm_border        long    0        'left/right borders
3c924 914 00 00 00 00 | i_upporch       long    0        'up porch lines
3c928 915 00 00 00 00 | i_vsync         long    0        'vsync lines
3c92c 916 00 00 00 00 | i_downporch     long    0        'down porch lines
3c930 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3c934 918 00 00 00 00 | i_totalvis      long    0
3c938 919             | 
3c938 919             | '-------------------------------------
3c938 919             |  
3c938 919 00 00 00 00 | linenum         long    0
3c93c 91a 00 00 00 00 | frames          long    0
3c940 91b 00 00 00 00 | dlinum long 0
3c944 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3c948 91d             | 
3c948 91d 00 00 00 00 | vblankptr       long    0
3c94c 91e 00 00 00 00 | modeptr         long    0
3c950 91f 00 00 00 00 | paletteptr      long    0
3c954 920 00 00 00 00 | dlptr           long    0
3c958 921 01 00 00 00 | hbase           long    1
3c95c 922 00 00 00 00 | mailbox         long    0
3c960 923 00 00 00 00 | spriteptr          long 0
3c964 924             | 
3c964 924 00 00 00 00 | cmd             long    0
3c968 925 00 B0 07 00 | buf1            long    $80000-16384-4096
3c96c 926 00 04 00 00 | buf2            long    1024
3c970 927 01 00 00 00 | dlptr2          long    1
3c974 928 01 00 00 00 | dl              long    1
3c978 929             | 
3c978 929 00 00 00 00 | buf1c long 0
3c97c 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
3c980 92b 01 00 00 00 | framebuf2       long    1
3c984 92c 01 00 00 00 | hsync0          long    1
3c988 92d 01 00 00 00 | hsync1          long    1
3c98c 92e             | 
3c98c 92e 01 00 00 00 | t1              long    1
3c990 92f 00 00 00 00 | t2 long 0
3c994 930 00 00 00 00 | t3 long 0
3c998 931 00 00 00 00 | t4 long 0
3c99c 932             | 
3c99c 932 00 00 00 00 | rcnt            long    0  'dl repeat count
3c9a0 933 00 00 00 00 | rcnt2           long    0
3c9a4 934 00 00 00 00 | rcnt2a          long    0
3c9a8 935 00 00 00 00 | roffset         long    0
3c9ac 936 00 00 00 00 | rdl             long    0  'dl repeat line
3c9b0 937 00 00 00 00 | dlc             long    0  'dl command
3c9b4 938             | 
3c9b4 938 FF FF FF FF | affffffff       long    $ffffffff
3c9b8 939 00 00 00 00 | sprite1pointer long 0
3c9bc 93a 00 00 00 00 | sprite1xy      long 0
3c9c0 93b 00 00 00 00 | sprite1wh      long 0
3c9c4 93c 00 00 00 00 | sprite2pointer long 0
3c9c8 93d 00 00 00 00 | sprite2xy      long 0
3c9cc 93e 00 00 00 00 | sprite2wh      long 0
3c9d0 93f 00 00 00 00 | sprite3pointer long 0
3c9d4 940 00 00 00 00 | sprite3xy      long 0
3c9d8 941 00 00 00 00 | sprite3wh      long 0
3c9dc 942 00 00 00 00 | sprite4pointer long 0
3c9e0 943 00 00 00 00 | sprite4xy      long 0
3c9e4 944 00 00 00 00 | sprite4wh      long 0
3c9e8 945 00 00 00 00 | sprite5pointer long 0
3c9ec 946 00 00 00 00 | sprite5xy      long 0
3c9f0 947 00 00 00 00 | sprite5wh      long 0
3c9f4 948 00 00 00 00 | sprite6pointer long 0
3c9f8 949 00 00 00 00 | sprite6xy      long 0
3c9fc 94a 00 00 00 00 | sprite6wh      long 0
3ca00 94b 00 00 00 00 | sprite7pointer long 0
3ca04 94c 00 00 00 00 | sprite7xy      long 0
3ca08 94d 00 00 00 00 | sprite7wh      long 0
3ca0c 94e 00 00 00 00 | sprite8pointer long 0
3ca10 94f 00 00 00 00 | sprite8xy      long 0
3ca14 950 00 00 00 00 | sprite8wh      long 0
3ca18 951 00 00 00 00 | sprite9pointer long 0
3ca1c 952 00 00 00 00 | sprite9xy      long 0
3ca20 953 00 00 00 00 | sprite9wh      long 0
3ca24 954 00 00 00 00 | sprite10pointer long 0
3ca28 955 00 00 00 00 | sprite10xy      long 0
3ca2c 956 00 00 00 00 | sprite10wh      long 0
3ca30 957 00 00 00 00 | sprite11pointer long 0
3ca34 958 00 00 00 00 | sprite11xy      long 0
3ca38 959 00 00 00 00 | sprite11wh      long 0
3ca3c 95a 00 00 00 00 | sprite12pointer long 0
3ca40 95b 00 00 00 00 | sprite12xy      long 0
3ca44 95c 00 00 00 00 | sprite12wh      long 0
3ca48 95d 00 00 00 00 | sprite13pointer long 0
3ca4c 95e 00 00 00 00 | sprite13xy      long 0
3ca50 95f 00 00 00 00 | sprite13wh      long 0
3ca54 960 00 00 00 00 | sprite14pointer long 0
3ca58 961 00 00 00 00 | sprite14xy      long 0
3ca5c 962 00 00 00 00 | sprite14wh      long 0
3ca60 963 00 00 00 00 | sprite15pointer long 0
3ca64 964 00 00 00 00 | sprite15xy      long 0
3ca68 965 00 00 00 00 | sprite15wh      long 0
3ca6c 966 00 00 00 00 | sprite16pointer long 0
3ca70 967 00 00 00 00 | sprite16xy      long 0
3ca74 968 00 00 00 00 | sprite16wh      long 0
3ca78 969 00 00 00 00 | sprite17pointer long 0
3ca7c 96a 00 00 00 00 | sprite17xy      long 0
3ca80 96b 00 00 00 00 | sprite17wh      long 0
3ca84 96c 00 00 00 00 | sprite18pointer long 0
3ca88 96d 00 00 00 00 | sprite18xy      long 0
3ca8c 96e 00 00 00 00 | sprite18wh      long 0
3ca90 96f 00 00 00 00 | spritenum long 0
3ca94 970             | 
3ca94 970 00 00 00 00 | spriteline long 0
3ca98 971 84 03 00 00 | sprite_x long 900
3ca9c 972 00 00 00 00 | sprite_y long 0
3caa0 973 10 00 00 00 | sprite_w long 16
3caa4 974 40 00 00 00 | sprite_h long 64
3caa8 975 00 00 00 00 | l2 long 0
3caac 976 00 00 00 00 | t5 long 0
3cab0 977 00 00 00 00 | t6 long 0
3cab4 978 00 00 00 00 | t7 long 0
3cab8 979 00 00 00 00 | t8 long 0
3cabc 97a 00 00 00 00 | t9 long 0
3cac0 97b 00 00 00 00 | preloadaddr long 0
3cac4 97c 00 00 00 00 | preloadlineaddr long 0
3cac8 97d 00 04 00 00 | a1024 long 1024
3cacc 97e             | 
3cacc 97e E0 03 00 00 | aa long 992
3cad0 97f FF 03 00 00 | a1023 long 1023
3cad4 980 00 10 00 00 | a4096 long 4096
3cad8 981             |  fit 368
3cad8 981             | _psram_spin2_dat_
3cad8 981 00 00 00 00 
      ...             
3cbd0 9bf 00 00 00 00 
3cbd4 9c0 00 00 00 00 |     listdata long 0[8*8]
3cbd8 9c1             |             orgh
3cbd8                 | 
3cbd8                 | ' driver state
3cbd8     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3cbdc     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3cbe0                 | 
3cbe0                 | ' delay profile
3cbe0     07 00 00 00 
3cbe4     00 CF 7B 05 
3cbe8     80 D1 F0 08 
3cbec     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3cbf0     80 C4 60 0F 
3cbf4     80 39 7A 12 
3cbf8     40 2D D9 13 
3cbfc     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3cc00                 | 
3cc00                 | ' data to be passed to driver when starting it
3cc00                 | startupData
3cc00     00 00 00 00 |     long    0           ' current frequency
3cc04     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3cc08     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3cc0c     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3cc10     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3cc14     20 CC 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3cc18     A0 CC 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3cc1c     C0 CC 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3cc20                 | 
3cc20                 | ' data for memory
3cc20                 | deviceData
3cc20                 |     ' 16 bank parameters follow (16MB per bank)
3cc20     00 00 00 00 
      ...             
3cc58     00 00 00 00 
3cc5c     00 00 00 00 |     long    0[16]                               ' banks 0-15
3cc60                 |     ' 16 banks of pin parameters follow
3cc60     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3cc64     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3cc68     FF FF FF FF 
      ...             
3cc98     FF FF FF FF 
3cc9c     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3cca0                 | 
3cca0                 | ' data for COG polling
3cca0                 | qosData 
3cca0     00 00 FF FF 
3cca4     00 00 FF FF 
3cca8     00 00 FF FF 
3ccac     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3ccb0     00 00 FF FF 
3ccb4     00 00 FF FF 
3ccb8     00 00 FF FF 
3ccbc     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3ccc0                 |     
3ccc0                 | ' mailbox storage
3ccc0                 | 
3ccc0                 | mailboxes
3ccc0     00 00 00 00 
      ...             
3cd18     00 00 00 00 
3cd1c     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3cd20                 | 	alignl
3cd20                 | _psram16drv_spin2_dat_
3cd20                 |                             orgh
3cd20     00 00 00 00 
      ...             
3cd38     00 00 00 00 
3cd3c     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3cd40                 | 
3cd40                 | driver_start
3cd40                 |                             org
3cd40 000             | '..................................................................................................
3cd40 000             | ' Memory layout for COG RAM once operational:
3cd40 000             | '
3cd40 000             | '  COG RAM address      Usage
3cd40 000             | '  ---------------      ----
3cd40 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3cd40 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3cd40 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3cd40 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3cd40 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3cd40 000             | '  ~$198-$1F3           State and register variables
3cd40 000             | '
3cd40 000             | ' Also during driver COG startup:
3cd40 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3cd40 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3cd40 000             | '..................................................................................................
3cd40 000             |                             
3cd40 000             | ' Mailbox storage after vector initialization
3cd40 000             | 
3cd40 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3cd44 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3cd48 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3cd4c 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3cd50 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3cd54 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3cd58 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3cd5c 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3cd60 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3cd64 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3cd68 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3cd6c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3cd70 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3cd74 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3cd78 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3cd7c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3cd80 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3cd84 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3cd88 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3cd8c 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3cd90 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3cd94 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3cd98 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3cd9c 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3cda0 018             | 
3cda0 018             | ' Mailbox parameter addresses per COG once patched
3cda0 018             |                             
3cda0 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3cda4 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3cda8 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3cdac 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3cdb0 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3cdb4 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3cdb8 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3cdbc 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3cdc0 020             | 
3cdc0 020             | '..................................................................................................
3cdc0 020             | ' Per COG request and state setup and service branching
3cdc0 020             |         
3cdc0 020             | cog0                 
3cdc0 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3cdc4 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3cdc8 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3cdcc 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3cdd0 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3cdd4 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3cdd8 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3cddc 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3cde0 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3cde4 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3cde8 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3cdec 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3cdf0 02c             | cog1                        
3cdf0 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3cdf4 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3cdf8 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3cdfc 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3ce00 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ce04 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ce08 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3ce0c 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3ce10 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3ce14 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ce18 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ce1c 037 33 CA 63 FD |                             execf   request-0               'jump to service
3ce20 038             | cog2                         
3ce20 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3ce24 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3ce28 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3ce2c 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3ce30 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ce34 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ce38 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3ce3c 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3ce40 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3ce44 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ce48 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ce4c 043 33 CA 63 FD |                             execf   request-0               'jump to service
3ce50 044             | cog3                        
3ce50 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3ce54 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3ce58 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3ce5c 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3ce60 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ce64 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ce68 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3ce6c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3ce70 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3ce74 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ce78 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ce7c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3ce80 050             | cog4                        
3ce80 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3ce84 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3ce88 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3ce8c 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3ce90 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3ce94 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3ce98 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3ce9c 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3cea0 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3cea4 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3cea8 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3ceac 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3ceb0 05c             | cog5                        
3ceb0 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3ceb4 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3ceb8 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3cebc 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3cec0 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3cec4 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3cec8 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3cecc 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3ced0 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3ced4 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3ced8 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3cedc 067 33 CA 63 FD |                             execf   request-0               'jump to service
3cee0 068             | cog6                        
3cee0 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3cee4 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3cee8 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3ceec 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3cef0 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3cef4 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3cef8 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3cefc 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3cf00 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3cf04 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3cf08 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3cf0c 073 33 CA 63 FD |                             execf   request-0               'jump to service
3cf10 074             | cog7                        
3cf10 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3cf14 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3cf18 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3cf1c 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3cf20 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3cf24 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3cf28 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3cf2c 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3cf30 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3cf34 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3cf38 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3cf3c 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3cf40 080             |                             fit     128
3cf40 080             | 
3cf40 080             |                             fit     128
3cf40 080             | pad                         long    0[128-$]                'align init code to $80
3cf40 080             | 
3cf40 080             | '..................................................................................................
3cf40 080             | 
3cf40 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3cf40 080             | 
3cf40 080             | init                        
3cf40 080             |                             ' get driver scratch long address in hub
3cf40 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3cf44 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3cf48 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3cf4c 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3cf50 084             |                     
3cf50 084             |                             ' read in the additional LUT RAM code
3cf50 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3cf54 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3cf58 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3cf5c 087             | 
3cf5c 087             |                             ' read the startup parameters
3cf5c 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3cf60 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3cf64 089             | 
3cf64 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3cf64 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3cf68 08a             | 
3cf68 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3cf6c 08b 01 00 00 5F 
3cf70 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3cf74 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3cf78 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3cf7c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3cf80 090             | 
3cf80 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3cf80 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3cf84 091 01 00 00 FF 
3cf88 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3cf8c 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3cf90 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3cf94 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3cf98 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3cf9c 097 08 DE 47 F5 |                             or      a, #8
3cfa0 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3cfa4 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3cfa8 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3cfac 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3cfb0 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3cfb4 09d 01 DE 07 F1 |                             add     a, #1
3cfb8 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3cfbc 09f             |  
3cfbc 09f             |                             ' setup device control pin states
3cfbc 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3cfc0 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3cfc4 0a1 01 00 00 FF 
3cfc8 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3cfcc 0a3             | 
3cfcc 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3cfd0 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3cfd4 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3cfd8 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3cfdc 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3cfe0 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3cfe4 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3cfe8 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3cfec 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3cff0 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3cff4 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3cff8 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3cffc 0af             | pinloop
3cffc 0af             |                             ' generate minimum CE high time before access
3cffc 0af A1 07 00 FF 
3d000 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3d004 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3d008 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3d00c 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3d010 0b4 1F DE 63 FD |                             waitx   a                       'delay
3d014 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3d018 0b6             | 
3d018 0b6             |                             ' setup the COG mailboxes and addresses 
3d018 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3d01c 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3d020 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3d024 0b9             | 
3d024 0b9 28 2E 64 FD |                             setq    #24-1
3d028 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3d02c 0bb             | 
3d02c 0bb             |                             ' setup the polling loop for active COGs 
3d02c 0bb 01 C2 63 FD |                             cogid   id
3d030 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3d034 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3d038 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3d03c 0bf 0A F0 07 F6 |                             mov     ptra, #10
3d040 0c0 E1 F1 03 FA |                             mul     ptra, id
3d044 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3d048 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3d04c 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3d050 0c4 03 C2 07 FA |                             mul     id, #3
3d054 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3d058 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3d05c 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3d060 0c8 D8 01 B0 FD |                             call    #reloadcogs
3d064 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3d068 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3d06c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3d06c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3d070 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3d074 0cd 08 04 DC FC |                             rep     #2, #8
3d078 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3d07c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3d080 0d0             | 
3d080 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3d080 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3d080 0d0 01 C2 63 FD |                             cogid   id
3d084 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3d088 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3d08c 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3d090 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3d094 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3d098 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3d09c 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3d0a0 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3d0a4 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3d0a8 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3d0ac 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3d0b0 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3d0b4 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3d0b8 0de A5 E5 03 F1 |                             add     d, const512
3d0bc 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3d0c0 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3d0c4 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3d0c8 0e2             |                             
3d0c8 0e2             |                             ' setup register values for control vector loop setup after we return
3d0c8 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3d0cc 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3d0d0 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3d0d4 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3d0d8 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3d0dc 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3d0e0 0e8 D0 C3 8F F9 |                             altd    id, #id0
3d0e4 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3d0e8 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3d0ec 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3d0f0 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3d0f4 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3d0f8 0ee             |  
3d0f8 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3d0fc 0ef 07 CA 07 F5 |                             and     request, #7
3d100 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3d104 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3d108 0f2             |                             fit     $100                    'ensure all init code fits this space
3d108 0f2             | 
3d108 0f2             |                             fit     $100                    'ensure all init code fits this space
3d108 0f2             | 
3d108 0f2 00 00 00 00 
      ...             
3d138 0fe 00 00 00 00 
3d13c 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3d140 100             | 
3d140 100             | '..................................................................................................
3d140 100             | ' Error result handling and COG notification of request completion
3d140 100             | 
3d140 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3d144 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3d148 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3d14c 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3d150 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3d154 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3d158 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3d15c 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3d160 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3d164 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3d168 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3d16c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3d170 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3d174 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3d178 10e             | ' Poller re-starts here after a COG is serviced
3d178 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3d17c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3d180 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3d184 111             | ' Main dynamic polling loop repeats until a request arrives
3d184 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3d188 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3d18c 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3d190 114             | 
3d190 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3d194 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3d198 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3d19c 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3d1a0 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3d1a4 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3d1a8 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3d1ac 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3d1b0 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3d1b4 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3d1b8 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3d1bc 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3d1c0 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3d1c4 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3d1c8 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3d1cc 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3d1d0 124             | 
3d1d0 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3d1d4 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3d1d8 126             |  
3d1d8 126             | '..................................................................................................
3d1d8 126             | ' List handler                               
3d1d8 126             | 
3d1d8 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3d1dc 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3d1e0 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3d1e4 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3d1e8 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3d1ec 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3d1f0 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3d1f4 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3d1f8 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3d1fc 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3d200 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3d204 131 33 00 60 FD |                             execf   0-0                     'process the request 
3d208 132             | 
3d208 132             | '..................................................................................................
3d208 132             | ' Restoring per COG state and resuming where we left off
3d208 132             | 
3d208 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3d20c 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3d210 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3d214 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3d218 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3d21c 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3d220 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3d224 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3d228 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3d22c 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3d230 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3d234 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3d238 13e             |                    
3d238 13e             | '..................................................................................................
3d238 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3d238 13e             | 
3d238 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3d23c 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3d240 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3d244 141 D0 DF B7 F9 |                             setd    a, #id0
3d248 142 D8 DF BF F9 |                             sets    a, #addr1
3d24c 143 FE FF FF FF 
3d250 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3d254 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3d258 146 3F DE A7 F9 |                             alti    a, #%111_111 
3d25c 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3d260 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3d264 149 01 E2 63 FD |                             cogid   c
3d268 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3d26c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3d270 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3d274 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3d278 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3d27c 14f 00 E0 03 F6 |                             mov     b, 0-0
3d280 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3d284 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3d288 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3d28c 153 0C 00 90 AD |             if_z            jmp     #excluded               
3d290 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3d294 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3d298 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3d29c 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3d2a0 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3d2a4 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3d2a8 15a             | 
3d2a8 15a             | 'determine priority cogs and build instructions for the polling sequence
3d2a8 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3d2ac 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3d2b0 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3d2b4 15d             | 
3d2b4 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3d2b8 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3d2bc 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3d2c0 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3d2c4 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3d2c8 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3d2cc 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3d2d0 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3d2d4 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3d2d8 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3d2dc 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3d2e0 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3d2e4 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3d2e8 16a             | endprioloop
3d2e8 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3d2ec 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3d2f0 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3d2f4 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3d2f8 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3d2fc 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3d300 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3d304 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3d308 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3d30c 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3d310 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3d314 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3d318 176             | 
3d318 176             | ' populate the round robin COG polling instructions
3d318 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3d31c 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3d320 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3d324 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3d328 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3d32c 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3d330 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3d334 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3d338 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3d33c 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3d340 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3d344 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3d348 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3d34c 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3d350 184             | '..................................................................................................
3d350 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3d350 184             | 
3d350 184             | set_latency                                                 '            (a) set latency
3d350 184             | get_latency                                                 '            (b) get latency
3d350 184             | set_burst                                                   '            (c) set burst size of bank
3d350 184             | get_burst                                                   '            (d) get burst size of bank
3d350 184             |                                                             '            (e) dump state
3d350 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3d354 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3d358 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3d35c 187             |                                                             ' | | | | e  account for following AUGS
3d35c 187 04 00 00 FF 
3d360 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3d364 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3d368 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3d36c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3d370 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3d374 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3d378 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3d37c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3d380 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3d384 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3d388 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3d38c 193             | 
3d38c 193             | '..................................................................................................
3d38c 193             | ' Misc EXECF code
3d38c 193             | 
3d38c 193 33 72 63 FD | start_read_exec             execf   newburstr
3d390 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3d394 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3d398 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3d39c 197             | 
3d39c 197             | '..................................................................................................
3d39c 197             | ' Variables
3d39c 197             | 
3d39c 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3d3a0 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3d3a4 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3d3a8 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3d3ac 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3d3b0 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3d3b4 19d             | 
3d3b4 19d 00 00 00 80 | xfreq1          long    $80000000
3d3b8 19e 00 00 00 40 | xfreq2          long    $40000000
3d3bc 19f 03 00 00 00 | delay           long    3
3d3c0 1a0             | 
3d3c0 1a0             | lutcodeaddr                 
3d3c0 1a0             | startupparams
3d3c0 1a0             | excludedcogs                                    'careful: shared register use!
3d3c0 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3d3c4 1a1 00 00 00 00 | flags           long    0
3d3c8 1a2             | mask                                            'careful: shared register use!
3d3c8 1a2 00 00 00 00 | resetmaskA      long    0
3d3cc 1a3             | limit                                           'careful: shared register use!
3d3cc 1a3 00 00 00 00 | resetmaskB      long    0
3d3d0 1a4 00 00 00 00 | datapins        long    0
3d3d4 1a5             | const512                                        'careful: shared register use!
3d3d4 1a5 00 00 00 00 | devicelist      long    0
3d3d8 1a6 00 00 00 00 | coglist         long    0
3d3dc 1a7 00 00 00 00 | mbox            long    0 
3d3e0 1a8             | 
3d3e0 1a8             | clkpin                                          'shared with code patched during init
3d3e0 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3d3e4 1a9             | cspin                                           'shared with code patched during init
3d3e4 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3d3e8 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3d3ec 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3d3f0 1ac 01 00 00 00 | clkdelay        long    1
3d3f4 1ad 00 00 00 00 | regdatabus      long    0
3d3f8 1ae             | 
3d3f8 1ae 10 00 00 00 | deviceaddr      long    $10
3d3fc 1af             | rrcounter
3d3fc 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3d400 1b0             | 
3d400 1b0             | ' jump addresses for the per COG handlers
3d400 1b0 20 00 00 00 | cog0_handler    long    cog0
3d404 1b1 2C 00 00 00 | cog1_handler    long    cog1
3d408 1b2 38 00 00 00 | cog2_handler    long    cog2
3d40c 1b3 44 00 00 00 | cog3_handler    long    cog3
3d410 1b4 50 00 00 00 | cog4_handler    long    cog4
3d414 1b5 5C 00 00 00 | cog5_handler    long    cog5
3d418 1b6 68 00 00 00 | cog6_handler    long    cog6
3d41c 1b7 74 00 00 00 | cog7_handler    long    cog7
3d420 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3d424 1b9             | 
3d424 1b9             | ' EXECF sequences
3d424 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3d428 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3d42c 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3d430 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3d434 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3d438 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3d43c 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3d440 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3d440 1c0             | 
3d440 1c0             | 
3d440 1c0             | ' SKIPF sequences
3d440 1c0             | skiptable
3d440 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3d444 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3d448 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3d44c 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3d450 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3d454 1c5 00 00 00 00 | pattern2        long    0
3d458 1c6 00 00 00 00 | pattern3        long    0
3d45c 1c7 77 02 00 00 | singlelong      long    %1001110111  
3d460 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3d464 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3d468 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3d46c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3d470 1cc             | 
3d470 1cc             | ' LUT RAM address values
3d470 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3d474 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3d478 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3d47c 1cf F6 02 00 00 | noread          long    noread_lut
3d480 1d0             | 
3d480 1d0 00 00 00 00 | id0             long    0
3d484 1d1 01 00 00 00 | id1             long    1
3d488 1d2 02 00 00 00 | id2             long    2
3d48c 1d3 03 00 00 00 | id3             long    3
3d490 1d4 04 00 00 00 | id4             long    4
3d494 1d5 05 00 00 00 | id5             long    5
3d498 1d6 06 00 00 00 | id6             long    6
3d49c 1d7 07 00 00 00 | id7             long    7
3d4a0 1d8             | 
3d4a0 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3d4a0 1d8             | 'and COG updates and need to follow immediately after id0-id7
3d4a0 1d8 00 00 00 00 | addr1           long    0
3d4a4 1d9 00 00 00 00 | hubdata         long    0
3d4a8 1da 00 00 00 00 | count           long    0
3d4ac 1db 00 00 00 00 | addr2           long    0
3d4b0 1dc 00 00 00 00 | total           long    0
3d4b4 1dd 00 00 00 00 | offset1         long    0
3d4b8 1de 00 00 00 00 | offset2         long    0
3d4bc 1df 00 00 00 00 | link            long    0
3d4c0 1e0             | 
3d4c0 1e0             | burstwrite                                      'note shared register use during init
3d4c0 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3d4c4 1e1 00 00 00 00 | id              long    0
3d4c8 1e2             | 
3d4c8 1e2 00 00 00 00 | header          long    0
3d4cc 1e3 00 00 00 00 | trailer         long    0
3d4d0 1e4 00 00 00 00 | cmdaddr         long    0
3d4d4 1e5 00 00 00 00 | request         long    0
3d4d8 1e6 00 00 00 00 | rrlimit         long    0
3d4dc 1e7 00 00 00 00 | pinconfig       long    0
3d4e0 1e8 00 00 00 00 | clks            long    0
3d4e4 1e9 00 00 00 00 | resume          long    0
3d4e8 1ea 00 00 00 00 | orighubsize     long    0
3d4ec 1eb 00 00 00 00 | wrclks          long    0
3d4f0 1ec             | 
3d4f0 1ec 00 00 00 00 | pattern         long    0
3d4f4 1ed 00 00 00 00 | hubscratch      long    0
3d4f8 1ee 00 10 00 00 | val4k           long    4096
3d4fc 1ef             | 
3d4fc 1ef             | ' temporary general purpose regs
3d4fc 1ef 00 00 00 00 | a               long    0
3d500 1f0 00 00 00 00 | b               long    0
3d504 1f1 00 00 00 00 | c               long    0
3d508 1f2 00 00 00 00 | d               long    0
3d50c 1f3             |                 fit     502
3d50c 1f3             | 
3d50c 1f3             |                 fit     502
3d50c 1f3             | 
3d50c 1f3             | '..................................................................................................
3d50c 1f3             | 
3d50c 1f3             |             orgh
3d50c                 | 
3d50c                 | lut_code
3d50c                 | 'HW init code up to 80 longs
3d50c                 | 
3d50c                 | '..................................................................................................
3d50c                 | ' Memory layout for LUT RAM once operational:
3d50c                 | '
3d50c                 | '  LUT RAM address      Usage
3d50c                 | '  ---------------      ----
3d50c                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3d50c                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3d50c                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3d50c                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3d50c                 | '
3d50c                 | ' Also during driver COG startup:
3d50c                 | ' $230-$24F is used for HW init setup
3d50c                 | ' $250-$26F is used as temporary vector storage 
3d50c                 | '..................................................................................................
3d50c                 | 
3d50c                 |                 org $230    
3d50c 230             | 
3d50c 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3d50c 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3d510 231 24 16 60 FD |                             pollxfi
3d514 232 FF AA 2A FF 
3d518 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3d51c 234 28 00 B0 FD |                             call    #sendqspi
3d520 235 07 F8 07 FF 
3d524 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3d528 237 28 00 B0 FD |                             call    #sendspi
3d52c 238 F8 07 78 FF 
3d530 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3d534 23a 1C 00 B0 FD |                             call    #sendspi
3d538 23b 7F 78 78 FF 
3d53c 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3d540 23d 10 00 B0 FD |                             call    #sendspi 
3d544 23e 2D 00 64 FD |                             ret
3d548 23f             | 
3d548 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3d54c 240 32 0C 64 FD |                             skipf   #%110
3d550 241 9C EF 03 F6 |                             mov     pb, xsendimm
3d554 242             | 
3d554 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3d558 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3d55c 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3d560 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3d564 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3d568 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3d56c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3d570 249 50 48 63 FD |                             fltl    datapins                'float data bus
3d574 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3d578 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3d57c 24c             | 
3d57c 24c 00 00 00 00 
3d580 24d 00 00 00 00 
3d584 24e 00 00 00 00 
3d588 24f 00 00 00 00 |                 long    0[$270-32-$]
3d58c 250             |                 fit     $270-32  ' keep room for 32 vector longs
3d58c 250             |     
3d58c 250             |                 fit     $270-32  ' keep room for 32 vector longs
3d58c 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3d58c 250             | rw_vect ' PSRAM jump vectors
3d58c 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3d590 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3d594 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3d598 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3d59c 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3d5a0 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3d5a4 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3d5a8 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3d5ac 258             | ro_vect ' R/O PSRAM jump vectors
3d5ac 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3d5b0 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3d5b4 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3d5b8 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3d5bc 25c 00 01 00 00 |                 long    unsupported
3d5c0 25d 00 01 00 00 |                 long    unsupported
3d5c4 25e 00 01 00 00 |                 long    unsupported
3d5c8 25f 00 01 00 00 |                 long    unsupported
3d5cc 260             | ctrl_vect ' Control jump vectors
3d5cc 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3d5d0 261 00 01 00 00 |                 long    unsupported
3d5d4 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3d5d8 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3d5dc 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3d5e0 265 00 01 00 00 |                 long    unsupported
3d5e4 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3d5e8 267 3E 01 00 00 |                 long    reconfig 
3d5ec 268             | no_vect ' Invalid bank jump vectors
3d5ec 268 01 01 00 00 |                 long    invalidbank
3d5f0 269 01 01 00 00 |                 long    invalidbank
3d5f4 26a 01 01 00 00 |                 long    invalidbank
3d5f8 26b 01 01 00 00 |                 long    invalidbank
3d5fc 26c 01 01 00 00 |                 long    invalidbank
3d600 26d 01 01 00 00 |                 long    invalidbank
3d604 26e 01 01 00 00 |                 long    invalidbank
3d608 26f 01 01 00 00 |                 long    invalidbank
3d60c 270             |                 fit     $270
3d60c 270             | 
3d60c 270             |                 fit     $270
3d60c 270             | '..................................................................................................
3d60c 270             | ' PSRAM READS
3d60c 270             |                                                             ' a b c d e f
3d60c 270             |                                                             ' B W L B R L  (a) byte read
3d60c 270             |                                                             ' Y O O U E O  (b) word read
3d60c 270             |                                                             ' T R N R S C  (c) long read
3d60c 270             |                                                             ' E D G S U K  (d) new burst read
3d60c 270             |                                                             '       T M E  (e) resumed sub-burst
3d60c 270             |                                                             '         E D  (f) locked sub-burst
3d60c 270             | 
3d60c 270             | 
3d60c 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3d610 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3d614 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3d618 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3d61c 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3d620 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3d624 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3d628 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3d62c 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3d630 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3d634 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3d638 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3d63c 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3d640 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3d644 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3d648 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3d64c 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3d650 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3d654 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3d658 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3d65c 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3d660 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3d664 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3d668 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3d66c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3d670 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3d674 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3d678 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3d67c 28c             | 
3d67c 28c             |                             ' fall through to read bursts
3d67c 28c             |                         
3d67c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3d67c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3d680 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3d684 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3d688 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3d68c 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3d690 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3d694 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3d698 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3d69c 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3d6a0 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3d6a4 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3d6a8 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3d6ac 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3d6b0 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3d6b4 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3d6b8 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3d6bc 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3d6c0 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3d6c4 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3d6c8 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3d6cc 2a0 E8 D1 03 F1 |                             add     clks, clks
3d6d0 2a1             | readcommon
3d6d0 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3d6d4 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3d6d8 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3d6dc 2a4             | 
3d6dc 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3d6e0 2a5 69 C8 63 FD |                             rev     cmdaddr
3d6e4 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3d6e8 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3d6ec 2a8             | 
3d6ec 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3d6f0 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3d6f4 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3d6f4 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3d6f8 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3d6fc 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3d700 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3d704 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3d704 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3d708 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3d70c 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3d710 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3d714 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3d718 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3d71c 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3d71c 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3d720 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3d724 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3d728 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3d72c 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3d730 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3d734 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3d738 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3d73c 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3d740 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3d744 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3d748 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3d74c 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3d750 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3d754 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3d754 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3d758 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3d75c 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3d760 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3d764 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3d768 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3d76c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3d770 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3d774 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3d778 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3d77c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3d780 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3d784 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3d788 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3d78c 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3d790 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3d794 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3d798 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3d79c 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3d7a0 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3d7a4 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3d7a8 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3d7ac 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3d7b0 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3d7b4 2da 10 03 90 FD |                             jmp     #writecommon
3d7b8 2db             | 
3d7b8 2db             | '..................................................................................................
3d7b8 2db             | ' Burst continuation testing
3d7b8 2db             | 
3d7b8 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3d7bc 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3d7c0 2dd             | continue_read_lut          
3d7c0 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3d7c4 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3d7c8 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3d7cc 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3d7d0 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3d7d4 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3d7d8 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3d7dc 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3d7e0 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3d7e4 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3d7e8 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3d7ec 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3d7f0 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3d7f4 2ea             | 
3d7f4 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3d7f8 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3d7fc 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3d800 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3d804 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3d808 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3d80c 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3d810 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3d814 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3d818 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3d81c 2f4 2A 1C 66 0D |             _ret_           push    #poller
3d820 2f5             | 
3d820 2f5             | 
3d820 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3d824 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3d824 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3d828 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3d82c 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3d830 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3d834 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3d838 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3d83c 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3d840 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3d844 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3d848 2ff             | '..................................................................................................
3d848 2ff             | ' Completion of requests
3d848 2ff             | 
3d848 2ff             | complete_rw_lut             
3d848 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3d84c 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3d850 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3d854 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3d858 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3d85c 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3d860 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3d864 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3d868 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3d86c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3d870 309 32 62 64 AD |             if_z            skipf   #%110001
3d874 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3d878 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3d87c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3d880 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3d884 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3d888 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3d88c 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3d890 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3d894 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3d898 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3d89c 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3d8a0 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3d8a4 316             |                                                             ' skipcase (a) gfx copy to/from hub
3d8a4 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3d8a4 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3d8a4 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3d8a8 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3d8ac 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3d8b0 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3d8b4 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3d8b8 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3d8bc 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3d8c0 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3d8c4 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3d8c8 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3d8cc 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3d8d0 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3d8d4 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3d8d8 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3d8dc 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3d8e0 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3d8e4 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3d8e8 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3d8ec 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3d8f0 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3d8f4 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3d8f8 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3d8fc 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3d900 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3d904 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3d908 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3d90c 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3d910 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3d914 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3d918 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3d91c 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3d920 335 DF B7 03 A6 |             if_z            mov     addr2, link
3d924 336 34 FF 9F AD |             if_z            jmp     #checknext
3d928 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3d92c 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3d930 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3d934 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3d938 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3d93c 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3d940 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3d944 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3d948 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3d94c 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3d950 341             | 
3d950 341             | '..................................................................................................
3d950 341             | ' PSRAM WRITES
3d950 341             |                                                             '  a b c d e f g h
3d950 341             | 
3d950 341             |                                                             '  B W L F B R L L (a) byte write(s)
3d950 341             |                                                             '  Y O O I U E O O (b) word write(s)
3d950 341             |                                                             '  T R N L R S C C (c) long write(s)
3d950 341             |                                                             '  E D G L S U K K (d) resumed fill
3d950 341             |                                                             '          T M E E (e) new burst write
3d950 341             |                                                             '            E D D (f) resumed burst
3d950 341             |                                                             '              F B (g) locked fill
3d950 341             |                                                             '              I U (h) locked burst write
3d950 341             |                                                             '              L R 
3d950 341             |                                                             '              L S 
3d950 341             |                                                             '                T 
3d950 341             | 
3d950 341             | w_single                   
3d950 341             | w_fill_cont           
3d950 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3d954 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3d958 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3d95c 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3d960 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3d964 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3d968 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3d96c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3d970 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3d974 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3d978 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3d97c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3d980 34d             |                ' disable call to r_resume_burst for single longs when z=0
3d980 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3d984 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3d988 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3d98c 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3d990 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3d994 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3d998 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3d99c 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3d9a0 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3d9a4 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3d9a8 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3d9ac 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3d9b0 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3d9b4 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3d9b8 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3d9bc 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3d9c0 35d             |         
3d9c0 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3d9c0 35d             |             '
3d9c0 35d             |             '  At least one of these 3 optional components will be sent
3d9c0 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3d9c0 35d             |             '     body - N x full longs of data
3d9c0 35d             |             '     trailer - last partial long of data
3d9c0 35d             |             '
3d9c0 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3d9c0 35d             |             '
3d9c0 35d             |             'Case    Type                           Sends
3d9c0 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3d9c0 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3d9c0 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3d9c0 35d             |             ' 4)     Multiple long fill             body only
3d9c0 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3d9c0 35d             | 
3d9c0 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3d9c0 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3d9c4 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3d9c8 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3d9cc 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3d9d0 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3d9d4 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3d9d8 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3d9dc 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3d9e0 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3d9e4 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3d9e8 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3d9ec 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3d9f0 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3d9f4 36a             |                             
3d9f4 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3d9f8 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3d9fc 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3da00 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3da04 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3da08 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3da0c 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3da10 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3da14 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3da18 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3da1c 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3da20 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3da24 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3da28 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3da2c 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3da30 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3da34 37a             | 
3da34 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3da38 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3da3c 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3da40 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3da44 37e             |                  
3da44 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3da48 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3da4c 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3da50 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3da54 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3da58 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3da5c 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3da60 385             | 
3da60 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3da64 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3da68 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3da6c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3da70 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3da74 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3da78 38b             | 
3da78 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3da78 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3da7c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3da80 38d 2A B0 63 FD |                             push    addr1                   'save address
3da84 38e             | 
3da84 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3da84 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3da88 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3da8c 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3da90 391             |             
3da90 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3da94 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3da98 393 2B B0 63 FD |                             pop     addr1                   'restore address
3da9c 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3daa0 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3daa4 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3daa8 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3daac 398             | 
3daac 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3dab0 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3dab4 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3dab8 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3dabc 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3dac0 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3dac4 39e             | 
3dac4 39e             |                             'trailer is done
3dac4 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3dac8 39f             | 
3dac8 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3dacc 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3dad0 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3dad4 3a2             | 
3dad4 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3dad8 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3dadc 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3dae0 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3dae4 3a6             |                             
3dae4 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3dae8 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3daec 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3daf0 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3daf4 3aa             |                                                          
3daf4 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3daf8 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3dafc 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3db00 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3db04 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3db08 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3db0c 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3db10 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3db14 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3db18 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3db1c 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3db20 3b5             |  
3db20 3b5 59 52 63 FD |                             drvh    cspin
3db24 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3db28 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3db2c 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3db30 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3db34 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3db38 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3db3c 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3db40 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3db44 3be EA E5 03 F6 |                             mov     d, orighubsize
3db48 3bf EF E5 63 F0 |                             shl     d, a
3db4c 3c0 F2 E3 83 F1 |                             sub     c, d
3db50 3c1 DD E3 03 F1 |                             add     c, offset1
3db54 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3db58 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3db5c 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3db60 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3db64 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3db68 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3db6c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3db70 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3db74 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3db78 3cb BB D3 03 F6 |                             mov     resume, restorefill
3db7c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3db80 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3db84 3ce 6C FC BF CD |             if_c            call    #yield
3db88 3cf 2D 00 64 FD |                             ret
3db8c 3d0             |                            
3db8c 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3db8c 3d0             |                       '     rczl    pa                      'rotate left into address offset
3db8c 3d0             |                       '     rczl    c wcz                   'restore count and flags
3db8c 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3db90 3d1 02 EC 67 F0 |                             shl     pa, #2
3db94 3d2 28 06 64 AD |             if_z            setq    #3
3db98 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3db9c 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3dba0 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3dba4 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3dba8 3d7             | 
3dba8 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3dbac 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3dbb0 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3dbb4 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3dbb8 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3dbbc 3dc             |                 fit 1024-32
3dbbc 3dc             |         
3dbbc 3dc             | 
3dbbc 3dc             | '..................................................................................................
3dbbc 3dc             | 
3dbbc 3dc             |                 fit 1024-32
3dbbc 3dc 00 00 00 00 
3dbc0 3dd 00 00 00 00 
3dbc4 3de 00 00 00 00 
3dbc8 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3dbcc 3e0             |                 org 1024-32
3dbcc 000             | 
3dbcc 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3dbcc 000 00 00 00 00 |                 long $0000
3dbd0 001 11 11 00 00 |                 long $1111
3dbd4 002 22 22 00 00 |                 long $2222
3dbd8 003 33 33 00 00 |                 long $3333
3dbdc 004 44 44 00 00 |                 long $4444
3dbe0 005 55 55 00 00 |                 long $5555
3dbe4 006 66 66 00 00 |                 long $6666
3dbe8 007 77 77 00 00 |                 long $7777
3dbec 008 88 88 00 00 |                 long $8888
3dbf0 009 99 99 00 00 |                 long $9999
3dbf4 00a AA AA 00 00 |                 long $aaaa
3dbf8 00b BB BB 00 00 |                 long $bbbb
3dbfc 00c CC CC 00 00 |                 long $cccc
3dc00 00d DD DD 00 00 |                 long $dddd
3dc04 00e EE EE 00 00 |                 long $eeee
3dc08 00f FF FF 00 00 |                 long $ffff
3dc0c 010             | 
3dc0c 010             | 'masks
3dc0c 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3dc10 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3dc14 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3dc18 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3dc1c 014             | 
3dc1c 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3dc20 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3dc24 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3dc28 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3dc2c 018             | 
3dc2c 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3dc30 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3dc34 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3dc38 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3dc3c 01c             | 
3dc3c 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3dc40 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3dc44 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3dc48 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3dc4c 020             |         fit 1024
3dc4c 020             | 
3dc4c 020             |         fit 1024
3dc4c 020             | 
3dc4c 020             | '--------------------------------------------------------------------------------------------------
3dc4c 020             |         orgh
3dc4c                 | 
3dc4c                 | gfxexpansion
3dc4c                 |                             'simple line drawing graphics expansion of memory driver
3dc4c                 |                             'jmp     #donerepeats                'just return for now
3dc4c                 | 
3dc4c     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3dc50     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3dc54     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3dc58     DD E1 03 F6 |                             mov     b, offset1              'get error term
3dc5c     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3dc60     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3dc64     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3dc68     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3dc6c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3dc70     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3dc74     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3dc78     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3dc7c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3dc80     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3dc84     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3dc88     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3dc8c     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3dc90     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3dc94     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3dc98     DC E5 33 F9 |                             getword d, total, #0            'get line width
3dc9c     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3dca0     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3dca4     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3dca8     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3dcac     C3 03 80 FD |                             jmp     #readmask               'continue filling
3dcb0                 | 	alignl
3dcb0                 | _usbnew_spin2_dat_
3dcb0                 |                 org     $000
3dcb0 000             | 
3dcb0 000             | usb_host_start
3dcb0 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3dcb4 001             | 
3dcb4 001 03 00 00 FF 
3dcb8 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3dcbc 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3dcc0 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3dcc4 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3dcc8 006 29 70 63 FD |                 setq2   htmp
3dccc 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3dcd0 008             | 
3dcd0 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3dcd4 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3dcd8 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3dcdc 00b             | 
3dcdc 00b             | '------------------------------------------------------------------------------
3dcdc 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3dcdc 00b             | ' special because the receiving function must not respond with either STALL or
3dcdc 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3dcdc 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3dcdc 00b             | ' corrupt packet, it must ignore the transaction
3dcdc 00b             | '------------------------------------------------------------------------------
3dcdc 00b             | ' On entry:
3dcdc 00b             | '   PTRA - start address of the SETUP data struct.
3dcdc 00b             | ' On exit:
3dcdc 00b             | '   retval - PID_ACK on success, otherwise error code.
3dcdc 00b             | '------------------------------------------------------------------------------
3dcdc 00b             | txn_setup
3dcdc 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3dce0 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3dce4 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3dce8 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3dcec 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3dcf0 010             | .setup
3dcf0 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3dcf4 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3dcf8 012 2D 00 64 AD |         if_z    ret
3dcfc 013 7C 0B B0 FD |                 call    #retry_wait
3dd00 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3dd04 015 2D 00 64 AD |         if_z    ret
3dd08 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3dd0c 017 E0 FF 9F FD |                 jmp     #.setup
3dd10 018             | 
3dd10 018             | '------------------------------------------------------------------------------
3dd10 018             | ' IN/INTERRUPT transaction.
3dd10 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3dd10 018             | '------------------------------------------------------------------------------
3dd10 018             | ' On entry:
3dd10 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3dd10 018             | '     CRC(b19..23).
3dd10 018             | ' On exit:
3dd10 018             | '------------------------------------------------------------------------------
3dd10 018             | txn_in
3dd10 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3dd14 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3dd18 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3dd1c 01b             | 
3dd1c 01b             |                 ' Fall through to urx_packet
3dd1c 01b             | 
3dd1c 01b             | '------------------------------------------------------------------------------
3dd1c 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3dd1c 01b             | ' received are handshakes and IN DATAx.
3dd1c 01b             | '------------------------------------------------------------------------------
3dd1c 01b             | ' On entry:
3dd1c 01b             | ' On exit:
3dd1c 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3dd1c 01b             | '     returned.
3dd1c 01b             | '------------------------------------------------------------------------------
3dd1c 01b             | urx_packet
3dd1c 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3dd20 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3dd24 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3dd28 01e 1A 92 63 FD |                 getct   hct2
3dd2c 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3dd30 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3dd34 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3dd38 022             | .wait_sop
3dd38 022 22 A7 8A FA |                 rdpin   urx, dm
3dd3c 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3dd40 024 08 00 90 CD |         if_c    jmp     #.get_pid
3dd44 025 FC 25 CC FB |                 jnct2   #.wait_sop
3dd48 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3dd4c 027             | .get_pid
3dd4c 027 28 02 B0 FD |                 call    #urx_next
3dd50 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3dd54 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3dd58 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3dd5c 02b             | .chk_pid
3dd5c 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3dd60 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3dd64 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3dd68 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3dd6c 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3dd70 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3dd74 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3dd78 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3dd7c 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3dd80 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3dd84 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3dd88 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3dd8c 037             | .ack_resend
3dd8c 037 22 A7 82 FA |                 rqpin   urx, dm
3dd90 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3dd94 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3dd98 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3dd9c 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3dda0 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3dda4 03d             | .chk_eop
3dda4 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3dda8 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3ddac 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3ddb0 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3ddb4 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3ddb8 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3ddbc 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3ddc0 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3ddc4 045 2D 00 64 FD |                 ret
3ddc8 046             | .idle
3ddc8 046 22 A7 82 FA |                 rqpin   urx, dm
3ddcc 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3ddd0 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3ddd4 049 2D 00 64 FD |                 ret
3ddd8 04a             | 
3ddd8 04a             | '------------------------------------------------------------------------------
3ddd8 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3ddd8 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3ddd8 04a             | ' if one is required.
3ddd8 04a             | '------------------------------------------------------------------------------
3ddd8 04a             | ' On entry:
3ddd8 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3ddd8 04a             | ' On exit:
3ddd8 04a             | '------------------------------------------------------------------------------
3ddd8 04a             | utx_token
3ddd8 04a 22 A7 82 FA |                 rqpin   urx, dm
3dddc 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3dde0 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3dde4 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3dde8 04e 34 0D B0 CD |         if_c    call    #utx_pre
3ddec 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3ddf0 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3ddf4 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3ddf8 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3ddfc 053             | .next_byte
3ddfc 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3de00 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3de04 055             | .wait
3de04 055 40 46 72 FD |                 testp   dp                      wc
3de08 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3de0c 057 23 03 08 FC |                 akpin   dp
3de10 058 22 A5 22 FC |                 wypin   utx, dm
3de14 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3de18 05a             | 
3de18 05a             | '------------------------------------------------------------------------------
3de18 05a             | ' SETUP/OUT/INTERRUPT transaction.
3de18 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3de18 05a             | '------------------------------------------------------------------------------
3de18 05a             | ' On entry:
3de18 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3de18 05a             | '     CRC(b19..23).
3de18 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3de18 05a             | '   pkt_data - count of DATAx payload bytes to send.
3de18 05a             | ' On exit:
3de18 05a             | '------------------------------------------------------------------------------
3de18 05a             | txn_out
3de18 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3de1c 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3de20 05c 00 00 C0 FF 
3de24 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3de28 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3de2c 05f             | 
3de2c 05f             |                 ' Fall through to utx_data
3de2c 05f             | 
3de2c 05f             | '------------------------------------------------------------------------------
3de2c 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3de2c 05f             | ' calculated while the data byte is being shifted out. Since data stage
3de2c 05f             | ' success/fail is not determined until the status stage of the transaction,
3de2c 05f             | ' this routine is only concerned about the current DATAx packet.
3de2c 05f             | '------------------------------------------------------------------------------
3de2c 05f             | ' On entry:
3de2c 05f             | '   PTRA - hub start address of the data to read.
3de2c 05f             | '   pkt_cnt - data payload size.
3de2c 05f             | ' On exit:
3de2c 05f             | '------------------------------------------------------------------------------
3de2c 05f             | utx_data
3de2c 05f 22 A7 82 FA |                 rqpin   urx, dm
3de30 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3de34 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3de38 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3de3c 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3de40 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3de44 065 D8 0C B0 CD |         if_c    call    #utx_pre
3de48 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3de4c 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3de50 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3de54 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3de58 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3de5c 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3de60 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3de64 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3de68 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3de6c 06f             | .read_byte
3de6c 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3de70 070 F0 00 B0 FD |                 call    #utx_byte
3de74 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3de78 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3de7c 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3de80 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3de84 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3de88 076             | .send_crc
3de88 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3de8c 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3de90 078 D0 00 B0 FD |                 call    #utx_byte
3de94 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3de98 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3de9c 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3dea0 07c             | 
3dea0 07c             | '------------------------------------------------------------------------------
3dea0 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3dea0 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3dea0 07c             | ' expects that the packet includes at least the CRC word.
3dea0 07c             | '
3dea0 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3dea0 07c             | ' was requested, which makes it difficult to determine where the data stops
3dea0 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3dea0 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3dea0 07c             | ' USB-16 expected residual value of 0xB001.
3dea0 07c             | '
3dea0 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3dea0 07c             | ' so the caller can verify IN success before writing the data to its final
3dea0 07c             | ' destination.
3dea0 07c             | '------------------------------------------------------------------------------
3dea0 07c             | ' On entry:
3dea0 07c             | '   pkt_data - max byte count expected to be in the packet.
3dea0 07c             | '   newb_flg - signals new byte ready when toggled.
3dea0 07c             | ' On exit:
3dea0 07c             | '   pkt_cnt - actual number of bytes read.
3dea0 07c             | '------------------------------------------------------------------------------
3dea0 07c             | urx_data
3dea0 07c F7 75 03 F6 |                 mov     htmp2, pb
3dea4 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3dea8 07e 00 00 C0 FF 
3deac 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3deb0 080 BA EF 03 F6 |                 mov     pb, htmp2
3deb4 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3deb8 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3debc 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3dec0 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3dec4 085             | .wait_byte
3dec4 085             | ' In-line rx for max speed
3dec4 085 22 A7 82 FA |                 rqpin   urx, dm
3dec8 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3decc 087 53 A5 02 F5 |                 and     utx, urx
3ded0 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3ded4 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3ded8 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3dedc 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3dee0 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3dee4 08d DC FF 9F FD |                 jmp     #.wait_byte
3dee8 08e             | .get_byte
3dee8 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3deec 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3def0 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3def4 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3def8 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3defc 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3df00 094             | .end_crc
3df00 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3df04 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3df08 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3df0c 097 2D 00 64 1D |         if_a    ret
3df10 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3df10 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3df10 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3df10 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3df10 098 22 A7 82 FA |                 rqpin   urx, dm
3df14 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3df18 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3df1c 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3df1c 09b             | .chk_crc
3df1c 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3df20 09c 58 00 00 FF 
3df24 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3df28 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3df2c 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3df30 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3df34 0a1 34 09 B0 FD |                 call    #poll_waitx
3df38 0a2             | 
3df38 0a2             |                 ' Fall through to utx_handshake
3df38 0a2             | 
3df38 0a2             | '------------------------------------------------------------------------------
3df38 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3df38 0a2             | ' the appropriate IP delay has been inserted.
3df38 0a2             | '------------------------------------------------------------------------------
3df38 0a2             | ' On entry:
3df38 0a2             | '   retval - handshake PID to send.
3df38 0a2             | ' On exit:
3df38 0a2             | '   retval unchanged.
3df38 0a2             | '------------------------------------------------------------------------------
3df38 0a2             | utx_handshake
3df38 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3df3c 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3df40 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3df44 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3df48 0a6 5F A5 02 F6 |                 mov     utx, retval
3df4c 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3df50 0a8             | .idle
3df50 0a8 22 A7 82 FA |                 rqpin   urx, dm
3df54 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3df58 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3df5c 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3df60 0ac 08 09 90 FD |                 jmp     #poll_waitx
3df64 0ad             | 
3df64 0ad             | '------------------------------------------------------------------------------
3df64 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3df64 0ad             | '------------------------------------------------------------------------------
3df64 0ad             | ' On entry:
3df64 0ad             | '   utx - byte to transmit.
3df64 0ad             | ' On exit:
3df64 0ad             | '------------------------------------------------------------------------------
3df64 0ad             | utx_byte
3df64 0ad 40 46 72 FD |                 testp   dp                      wc
3df68 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3df6c 0af 23 03 08 FC |                 akpin   dp
3df70 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3df74 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3df78 0b2             | 
3df78 0b2             | '------------------------------------------------------------------------------
3df78 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3df78 0b2             | '------------------------------------------------------------------------------
3df78 0b2             | ' On entry:
3df78 0b2             | ' On exit:
3df78 0b2             | '   retval - the byte read.
3df78 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3df78 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3df78 0b2             | '     received.
3df78 0b2             | '------------------------------------------------------------------------------
3df78 0b2             | urx_next
3df78 0b2 22 A7 8A FA |                 rdpin   urx, dm
3df7c 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3df80 0b4 53 A5 02 F5 |                 and     utx, urx
3df84 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3df88 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3df8c 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3df90 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3df94 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3df98 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3df9c 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3dfa0 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3dfa4 0bd 2D 00 64 FD |                 ret
3dfa8 0be             | 
3dfa8 0be             | '------------------------------------------------------------------------------
3dfa8 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3dfa8 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3dfa8 0be             | ' length, and the PID is not included in the CRC calculation:
3dfa8 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3dfa8 0be             | '  CRC5  ENDP ADDRESS PID
3dfa8 0be             | ' %00000_1111_1111111_xxxxxxxx
3dfa8 0be             | '------------------------------------------------------------------------------
3dfa8 0be             | ' On entry:
3dfa8 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3dfa8 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3dfa8 0be             | ' On exit:
3dfa8 0be             | '   ep_addr_pid - CRC value appended to the packet.
3dfa8 0be             | '------------------------------------------------------------------------------
3dfa8 0be             | calc_crc5
3dfa8 0be FF 03 00 FF 
3dfac 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3dfb0 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
3dfb4 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3dfb8 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3dfbc 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3dfc0 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3dfc4 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3dfc8 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3dfcc 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3dfd0 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3dfd4 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
3dfd8 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3dfdc 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3dfe0 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3dfe4 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3dfe8 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3dfec 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3dff0 0d0             | 
3dff0 0d0             | '------------------------------------------------------------------------------
3dff0 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3dff0 0d0             | '------------------------------------------------------------------------------
3dff0 0d0             | isr1_fsframe
3dff0 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3dff4 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3dff8 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3dffc 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3e000 0d4             | .wait
3e000 0d4 40 46 72 FD |                 testp   dp                      wc
3e004 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3e008 0d6 23 03 08 FC |                 akpin   dp
3e00c 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3e010 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3e014 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3e018 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3e01c 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3e020 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3e024 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3e028 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3e02c 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3e030 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3e034 0e1 2C FF BF FD |                 call    #utx_byte
3e038 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3e03c 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3e040 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3e044 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3e048 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3e04c 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3e050 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3e054 0e9 5B A5 42 F5 |                 or      utx, icrc
3e058 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3e05c 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3e060 0ec 20 00 90 FD |                 jmp     #isr1_wait
3e064 0ed             | isr1_lsframe
3e064 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3e068 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3e06c 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3e070 0f0             | .wait
3e070 0f0 40 46 72 FD |                 testp   dp                      wc
3e074 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3e078 0f2 23 03 08 FC |                 akpin   dp
3e07c 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3e080 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3e084 0f5             | isr1_wait
3e084 0f5 22 A5 82 FA |                 rqpin   utx, dm
3e088 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3e08c 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3e090 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3e094 0f9 03 00 00 FF 
3e098 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3e09c 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3e0a0 0fc F5 FF 3B FB |                 reti1
3e0a4 0fd             | 
3e0a4 0fd             | '------------------------------------------------------------------------------
3e0a4 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3e0a4 0fd             | ' transaction will complete before the next frame is triggered.
3e0a4 0fd             | '------------------------------------------------------------------------------
3e0a4 0fd             | ' On entry:
3e0a4 0fd             | ' On exit:
3e0a4 0fd             | '------------------------------------------------------------------------------
3e0a4 0fd             | wait_txn_ok
3e0a4 0fd 1A 74 63 FD |                 getct   htmp2
3e0a8 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
3e0ac 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3e0b0 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3e0b4 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3e0b8 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3e0bc 103 2D 00 64 FD |                 ret
3e0c0 104             | 
3e0c0 104             | '------------------------------------------------------------------------------
3e0c0 104             | ' A device connection was detected, or a bus reset was requested by the USB
3e0c0 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3e0c0 104             | ' and perform a reset sequence prior to device enumeration.
3e0c0 104             | '------------------------------------------------------------------------------
3e0c0 104             | dev_reset
3e0c0 104 22 A7 82 FA |                 rqpin   urx, dm
3e0c4 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3e0c8 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3e0cc 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3e0d0 108             | reset
3e0d0 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3e0d4 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3e0d8 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3e0dc 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3e0e0 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3e0e4 10d 1A 92 62 FD |                 getct   iframe_ct_base
3e0e8 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3e0ec 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3e0f0 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3e0f4 111 24 70 07 F1 |                 add     htmp, #36
3e0f8 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3e0fc 113             | .framewait
3e0fc 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
3e100 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3e104 115 2D 00 64 FD |                 ret
3e108 116             | 
3e108 116             | '------------------------------------------------------------------------------
3e108 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3e108 116             | '------------------------------------------------------------------------------
3e108 116             | ' On entry:
3e108 116             | '   PTRA - source address.
3e108 116             | '   PB - destination address.
3e108 116             | '   hr0 - length of copy, in bytes.
3e108 116             | ' On exit:
3e108 116             | '------------------------------------------------------------------------------
3e108 116             | hmemcpy
3e108 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
3e10c 117 F7 71 43 FC |                 wrbyte  htmp, pb
3e110 118 01 EE 07 F1 |                 add     pb, #1
3e114 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3e118 11a             | 
3e118 11a             | '------------------------------------------------------------------------------
3e118 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3e118 11a             | ' loop until the errant device is disconnected.
3e118 11a             | '------------------------------------------------------------------------------
3e118 11a             | ' On entry:
3e118 11a             | ' On exit:
3e118 11a             | '------------------------------------------------------------------------------
3e118 11a             | host_error
3e118 11a             |           if ERROR_LED >= 0
3e118 11a             |           end
3e118 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3e11c 11b             | 
3e11c 11b             | '------------------------------------------------------------------------------
3e11c 11b             | ' Get HID descriptor buffer for current port
3e11c 11b             | '------------------------------------------------------------------------------
3e11c 11b             | ' On entry:
3e11c 11b             | ' On exit:
3e11c 11b             | '   PB - HID descriptor buffer pointer
3e11c 11b             | '------------------------------------------------------------------------------
3e11c 11b             | get_hid_descr_buffer
3e11c 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3e120 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3e124 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3e128 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3e12c 11f             | 
3e12c 11f             | 
3e12c 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3e130 120             | 
3e130 120             | ' USB commands and error codes
3e130 120 00 00 00 00 | cmd_data        long    0
3e134 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3e138 122             | 
3e138 122             | ' Parameters block assigned at cog startup
3e138 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3e13c 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3e140 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3e144 125             | if ACTIVITY_LED >= 0
3e144 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3e144 125             | end
3e144 125             | if ERROR_LED >= 0
3e144 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3e144 125             | end
3e144 125 00 00 00 00 | hid_descr_p     long    0
3e148 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3e148 126             | 'hkbd_report_p   long    0
3e148 126 00 00 00 00 | hub_descr_p     long    0
3e14c 127 00 00 00 00 | urx_buff_p      long    0
3e150 128 00 00 00 00 | dev_desc_buff_p long    0
3e154 129 00 00 00 00 | con_desc_buff_p long    0
3e158 12a 00 00 00 00 | cache_start_p   long    0
3e15c 12b 00 00 00 00 | cache_end_p     long    0
3e160 12c             | if EMUPAD_MAX_PLAYER > 0
3e160 12c             | emupad_out_ptr  long    0
3e160 12c             | end
3e160 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3e164 12d             | 
3e164 12d             | hdev_init_start
3e164 12d             | hdev_port       res     1
3e164 12d             | hdev_port       res     1
3e164 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3e164 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3e164 12d             | kbm_next_datax  res     1
3e164 12d             | kbm_next_datax  res     1
3e164 12d             | hub_intf_num    res     1
3e164 12d             | hub_intf_num    res     1
3e164 12d             | hub_next_datax  res     1
3e164 12d             | hub_next_datax  res     1
3e164 12d             | hub_status_chg  res     1
3e164 12d             | hub_status_chg  res     1
3e164 12d             | hub_port_status res     1
3e164 12d             | hub_port_status res     1
3e164 12d             | if HAVE_MOUSE
3e164 12d             | ms_intf_num     res     1
3e164 12d             | ms_intf_num     res     1
3e164 12d             | ms_in_max_pkt   res     1
3e164 12d             | ms_in_max_pkt   res     1
3e164 12d             | end
3e164 12d             | kb_intf_num     res     1
3e164 12d             | kb_intf_num     res     1
3e164 12d             | kb_interval     res     1
3e164 12d             | kb_interval     res     1
3e164 12d             | kb_in_max_pkt   res     1
3e164 12d             | kb_in_max_pkt   res     1
3e164 12d             | kb_max_index    res     1
3e164 12d             | kb_max_index    res     1
3e164 12d             | kb_led_states   res     1
3e164 12d             | kb_led_states   res     1
3e164 12d             | gp_intf_num     res     1
3e164 12d             | gp_intf_num     res     1
3e164 12d             | gp_interval     res     1
3e164 12d             | gp_interval     res     1
3e164 12d             | gp_max_index    res     1
3e164 12d             | gp_max_index    res     1
3e164 12d             | gp_descr_len    res     1+MAX_DEVICES
3e164 12d             | gp_descr_len    res     1+MAX_DEVICES
3e164 12d             | hdev_init_end
3e164 12d             | 
3e164 12d             | ' Initialized at cog startup:
3e164 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3e164 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3e164 12d             | iframe_ct_new   res     1
3e164 12d             | iframe_ct_new   res     1
3e164 12d             | iframe_ct_base  res     1
3e164 12d             | iframe_ct_base  res     1
3e164 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3e164 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3e164 12d             | 
3e164 12d             | ' This register block is reset to zero when a USB device connects
3e164 12d             | hreg_init_start
3e164 12d             | hstatus         res     1         ' Host status flags
3e164 12d             | hstatus         res     1         ' Host status flags
3e164 12d             | hctwait         res     1         ' Poll-based wait clocks
3e164 12d             | hctwait         res     1         ' Poll-based wait clocks
3e164 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3e164 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3e164 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3e164 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3e164 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3e164 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3e164 12d             | xfer_retry      res     1         ' Control transfer retry count
3e164 12d             | xfer_retry      res     1         ' Control transfer retry count
3e164 12d             | retry           res     1         ' Transaction retry count
3e164 12d             | retry           res     1         ' Transaction retry count
3e164 12d             | utx             res     1         ' Byte to transmit on USB
3e164 12d             | utx             res     1         ' Byte to transmit on USB
3e164 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3e164 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3e164 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3e164 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3e164 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3e164 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3e164 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3e164 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3e164 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3e164 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3e164 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3e164 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3e164 12d             | frame           res     1         ' USB 1ms frame counter value
3e164 12d             | frame           res     1         ' USB 1ms frame counter value
3e164 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3e164 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3e164 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3e164 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3e164 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3e164 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3e164 12d             | crc             res     1         ' Used for CRC16 calculation
3e164 12d             | crc             res     1         ' Used for CRC16 calculation
3e164 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3e164 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3e164 12d             | retval          res     1         ' Global success/fail return parameter
3e164 12d             | retval          res     1         ' Global success/fail return parameter
3e164 12d             | context_retval  res     1         ' Operation contextual return parameter
3e164 12d             | context_retval  res     1         ' Operation contextual return parameter
3e164 12d             | ' Device stuff
3e164 12d             | hdev_id         res     1+MAX_DEVICES
3e164 12d             | hdev_id         res     1+MAX_DEVICES
3e164 12d             | hdev_bcd        res     1
3e164 12d             | hdev_bcd        res     1
3e164 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3e164 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3e164 12d             | ' Keyboard/mouse stuff
3e164 12d             | hctrl_ep_addr   res     1
3e164 12d             | hctrl_ep_addr   res     1
3e164 12d             | hctrl_max_pkt   res     1
3e164 12d             | hctrl_max_pkt   res     1
3e164 12d             | hconfig_base    res     1
3e164 12d             | hconfig_base    res     1
3e164 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3e164 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3e164 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3e164 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3e164 12d             | hdev_class      res     1
3e164 12d             | hdev_class      res     1
3e164 12d             | hdev_subclass   res     1
3e164 12d             | hdev_subclass   res     1
3e164 12d             | hdev_protocol   res     1
3e164 12d             | hdev_protocol   res     1
3e164 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3e164 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3e164 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3e164 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3e164 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3e164 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3e164 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3e164 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3e164 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3e164 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3e164 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3e164 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3e164 12d             | if HAVE_MOUSE
3e164 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3e164 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3e164 12d             | end
3e164 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3e164 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3e164 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3e164 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3e164 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3e164 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3e164 12d             | hdev_out_addr   res     1
3e164 12d             | hdev_out_addr   res     1
3e164 12d             | 
3e164 12d             | if EMUPAD_MAX_PLAYER > 0
3e164 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3e164 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3e164 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3e164 12d             | end
3e164 12d             | 
3e164 12d             | hreg_init_end
3e164 12d             | 
3e164 12d             | hidr_start
3e164 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3e164 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3e164 12d             | hidr_flags      res     1
3e164 12d             | hidr_flags      res     1
3e164 12d             | hidr_axis       res     3
3e164 12d             | hidr_axis       res     3
3e164 12d             | hidr_buttons    res     1
3e164 12d             | hidr_buttons    res     1
3e164 12d             | hidr_hats       res     1
3e164 12d             | hidr_hats       res     1
3e164 12d             | '' Above are actually useful values, 6 longs
3e164 12d             | hidr_id         res     1
3e164 12d             | hidr_id         res     1
3e164 12d             | hidr_state      res     1
3e164 12d             | hidr_state      res     1
3e164 12d             | hidr_size       res     1
3e164 12d             | hidr_size       res     1
3e164 12d             | hidr_count      res     1
3e164 12d             | hidr_count      res     1
3e164 12d             | hidr_offset     res     1
3e164 12d             | hidr_offset     res     1
3e164 12d             | hidr_usage_idx  res     1
3e164 12d             | hidr_usage_idx  res     1
3e164 12d             | hidr_lminmax    res     1
3e164 12d             | hidr_lminmax    res     1
3e164 12d             | hidr_pminmax    res     1
3e164 12d             | hidr_pminmax    res     1
3e164 12d             | hidr_type       res     1
3e164 12d             | hidr_type       res     1
3e164 12d             | hidr_end
3e164 12d             | 
3e164 12d             | ' Variables dependent on the system freqency
3e164 12d             | _var_64_lower_  res     1
3e164 12d             | _var_64_lower_  res     1
3e164 12d             | _var_64_upper_  res     1
3e164 12d             | _var_64_upper_  res     1
3e164 12d             | _12Mbps_        res     1
3e164 12d             | _12Mbps_        res     1
3e164 12d             | _1_5Mbps_       res     1
3e164 12d             | _1_5Mbps_       res     1
3e164 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3e164 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3e164 12d             | _1us_           res     1         ' 1us
3e164 12d             | _1us_           res     1         ' 1us
3e164 12d             | _10us_          res     1         ' 10us
3e164 12d             | _10us_          res     1         ' 10us
3e164 12d             | _33us_          res     1         ' 33us
3e164 12d             | _33us_          res     1         ' 33us
3e164 12d             | _txn_err_       res     1         ' 250us
3e164 12d             | _txn_err_       res     1         ' 250us
3e164 12d             | _500us_         res     1         ' 500us
3e164 12d             | _500us_         res     1         ' 500us
3e164 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3e164 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3e164 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3e164 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3e164 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3e164 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3e164 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3e164 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3e164 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3e164 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3e164 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3e164 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3e164 12d             | _preamble_wait_ res     1
3e164 12d             | _preamble_wait_ res     1
3e164 12d             | _1ms_           res     1         ' 1ms
3e164 12d             | _1ms_           res     1         ' 1ms
3e164 12d             | _2ms_           res     1         ' 2ms
3e164 12d             | _2ms_           res     1         ' 2ms
3e164 12d             | _suspend_wait_  res     1         ' 3ms
3e164 12d             | _suspend_wait_  res     1         ' 3ms
3e164 12d             | _4ms_           res     1         ' 4ms
3e164 12d             | _4ms_           res     1         ' 4ms
3e164 12d             | _xfer_wait_     res     1         ' 5ms
3e164 12d             | _xfer_wait_     res     1         ' 5ms
3e164 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3e164 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3e164 12d             | _reset_hold_    res     1         ' 15ms
3e164 12d             | _reset_hold_    res     1         ' 15ms
3e164 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3e164 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3e164 12d             | _21ms_          res     1         ' 21ms
3e164 12d             | _21ms_          res     1         ' 21ms
3e164 12d             | _100ms_         res     1         ' 100ms
3e164 12d             | _100ms_         res     1         ' 100ms
3e164 12d             | _500ms_         res     1         ' 500ms
3e164 12d             | _500ms_         res     1         ' 500ms
3e164 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3e164 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3e164 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3e164 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3e164 12d             | '------------------------------------------------------------------------------
3e164 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3e164 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3e164 12d             | _usb_d_ls_nco_  res     1
3e164 12d             | _usb_d_ls_nco_  res     1
3e164 12d             | _usb_h_fs_nco_  res     1
3e164 12d             | _usb_h_fs_nco_  res     1
3e164 12d             | _usb_d_fs_nco_  res     1
3e164 12d             | _usb_d_fs_nco_  res     1
3e164 12d             | '------------------------------------------------------------------------------
3e164 12d             | ' Scratch registers
3e164 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3e164 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3e164 12d             | htmp1           res     1
3e164 12d             | htmp1           res     1
3e164 12d             | htmp2           res     1
3e164 12d             | htmp2           res     1
3e164 12d             | htmp3           res     1
3e164 12d             | htmp3           res     1
3e164 12d             | hrep            res     1         ' Repeat count
3e164 12d             | hrep            res     1         ' Repeat count
3e164 12d             | hsave0          res     1         ' Subroutine parameter saves
3e164 12d             | hsave0          res     1         ' Subroutine parameter saves
3e164 12d             | hsave1          res     1
3e164 12d             | hsave1          res     1
3e164 12d             | hsave2          res     1
3e164 12d             | hsave2          res     1
3e164 12d             | isrtmp1         res     1
3e164 12d             | isrtmp1         res     1
3e164 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3e164 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3e164 12d             | hr0             res     1         ' Multi-purpose registers
3e164 12d             | hr0             res     1         ' Multi-purpose registers
3e164 12d             | hr1             res     1
3e164 12d             | hr1             res     1
3e164 12d             | hr2             res     1
3e164 12d             | hr2             res     1
3e164 12d             | hr3             res     1
3e164 12d             | hr3             res     1
3e164 12d             | hpar1           res     1         ' Routine entry/exit parameters
3e164 12d             | hpar1           res     1         ' Routine entry/exit parameters
3e164 12d             | hpar2           res     1
3e164 12d             | hpar2           res     1
3e164 12d             | hpar3           res     1
3e164 12d             | hpar3           res     1
3e164 12d             | hct2            res     1         ' Function response bus turn-around timer
3e164 12d             | hct2            res     1         ' Function response bus turn-around timer
3e164 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3e164 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3e164 12d             | mod_cnt         res     1         ' Used in idle loops
3e164 12d             | mod_cnt         res     1         ' Used in idle loops
3e164 12d             |                 fit     $1F0
3e164 12d             |                 org     $200
3e164 200             | hlut_start
3e164 200             | 
3e164 200             | '------------------------------------------------------------------------------
3e164 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3e164 200             | ' settings to startup defaults.
3e164 200             | '------------------------------------------------------------------------------
3e164 200             | ' On entry:
3e164 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3e164 200             | '------------------------------------------------------------------------------
3e164 200             | set_speed_full
3e164 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3e168 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3e16c 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3e170 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3e174 204             | '                ret                             wcz     ' Restore caller flags on exit
3e174 204             | 
3e174 204             | '------------------------------------------------------------------------------
3e174 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3e174 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3e174 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3e174 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3e174 204             | ' putting the smart pins into reset.
3e174 204             | '------------------------------------------------------------------------------
3e174 204             | ' On entry:
3e174 204             | ' On exit: CZ flags restored to caller states
3e174 204             | '------------------------------------------------------------------------------
3e174 204             | set_speed_low
3e174 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3e178 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3e17c 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3e180 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3e184 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3e188 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3e18c 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3e190 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3e194 20c             | 
3e194 20c             | '------------------------------------------------------------------------------
3e194 20c             | ' Perform configuration stuff required when a device intitially connects.
3e194 20c             | '------------------------------------------------------------------------------
3e194 20c             | ' On entry:
3e194 20c             | ' On exit:
3e194 20c             | '------------------------------------------------------------------------------
3e194 20c             | on_connect
3e194 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3e198 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3e19c 20e             | .retry
3e19c 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3e1a0 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3e1a4 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3e1a8 211 00 08 00 FF 
3e1ac 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3e1b0 213 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3e1b4 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e1b8 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3e1bc 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3e1c0 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3e1c4 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e1c8 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3e1cc 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3e1d0 21b 4C 03 B0 FD |                 call    #poll_waitx
3e1d4 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3e1d8 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3e1dc 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3e1e0 21f B8 FF 9F FD |                 jmp     #.retry
3e1e4 220             | .get_dev_desc
3e1e4 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3e1e8 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3e1ec 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3e1f0 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
3e1f4 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3e1f8 225 88 FB BF FD |                 call    #reset
3e1fc 226 30 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3e200 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e204 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3e208 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3e20c 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e210 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3e214 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
3e218 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3e21c 22e 04 00 00 FF 
3e220 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3e224 230 34 FA BF FD |                 call    #calc_crc5
3e228 231 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3e22c 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e230 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3e234 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3e238 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3e23c 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3e240 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e244 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3e248 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3e24c 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3e250 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3e254 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
3e258 23d C4 02 B0 FD |                 call    #poll_waitx
3e25c 23e 20 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3e260 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e264 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3e268 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3e26c 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3e270 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e274 244 2D 00 64 5D |         if_nz   ret
3e278 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3e27c 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3e280 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3e284 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3e288 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3e28c 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3e290 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3e294 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3e298 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3e29c 24e 2C FB 9F CD |         if_b    jmp     #host_error
3e2a0 24f 10 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3e2a4 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3e2a8 251 2D EC 63 FD |                 call    pa
3e2ac 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3e2b0 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3e2b4 254 2C EC 63 FD |                 jmp     pa
3e2b8 255             | 
3e2b8 255             | '------------------------------------------------------------------------------
3e2b8 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3e2b8 255             | ' Status reporting is always in the function-to-host direction.
3e2b8 255             | '------------------------------------------------------------------------------
3e2b8 255             | ' On entry:
3e2b8 255             | '   PTRA - start address of the SETUP data in hub.
3e2b8 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3e2b8 255             | '     stage.
3e2b8 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3e2b8 255             | ' On exit:
3e2b8 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3e2b8 255             | '     contains the count of data stage bytes actually received, which must
3e2b8 255             | '     always be <= the count requested.
3e2b8 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3e2b8 255             | '     more specific USB operation error code.
3e2b8 255             | '------------------------------------------------------------------------------
3e2b8 255             | control_read
3e2b8 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3e2bc 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3e2c0 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3e2c4 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3e2c8 259             | .xfer_start
3e2c8 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3e2cc 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3e2d0 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e2d4 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3e2d8 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3e2dc 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3e2e0 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3e2e4 260 61 00 00 FF 
3e2e8 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3e2ec 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3e2f0 263             | .data
3e2f0 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3e2f4 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3e2f8 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3e2fc 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3e300 267             | .nak_retry
3e300 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3e304 268             | .in_retry
3e304 268 BC F6 BF FD |                 call    #txn_in
3e308 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3e30c 26a 28 00 90 AD |         if_z    jmp     #.commit
3e310 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3e314 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3e318 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3e31c 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3e320 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3e324 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3e328 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3e32c 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3e330 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3e334 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3e338 275             | .commit
3e338 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3e33c 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3e340 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3e344 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
3e348 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3e34c 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3e350 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3e354 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3e358 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3e35c 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3e360 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3e364 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3e368 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3e36c 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3e370 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3e374 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3e378 285             | .pre_status
3e378 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3e37c 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3e380 287 00 B0 06 F6 |                 mov     pkt_data, #0
3e384 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3e388 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3e38c 28a 61 00 00 FF 
3e390 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3e394 28c             | .out_retry
3e394 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3e398 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e39c 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3e3a0 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3e3a4 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3e3a8 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3e3ac 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3e3b0 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3e3b4 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3e3b8 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3e3bc 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3e3c0 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3e3c0 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3e3c0 297             | ' ControlRead() transfer gets things unstuck most of the time...
3e3c0 297             | .xfer_retry
3e3c0 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
3e3c4 298 58 01 B0 FD |                 call    #poll_waitx
3e3c8 299 8C F9 BF FD |                 call    #wait_txn_ok
3e3cc 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3e3d0 29b C7 F1 03 F6 |                 mov     ptra, hpar2
3e3d4 29c C8 EF 03 F6 |                 mov     pb, hpar3
3e3d8 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3e3dc 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3e3e0 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3e3e4 2a0             | 
3e3e4 2a0             | '------------------------------------------------------------------------------
3e3e4 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3e3e4 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3e3e4 2a0             | ' the SETUP data struct is filled with the required values.
3e3e4 2a0             | '------------------------------------------------------------------------------
3e3e4 2a0             | ' On entry:
3e3e4 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3e3e4 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3e3e4 2a0             | '     stage.
3e3e4 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3e3e4 2a0             | ' On exit:
3e3e4 2a0             | '   retval - used to convey the success/failure of each stage.
3e3e4 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3e3e4 2a0             | '     more specific USB operation error code.
3e3e4 2a0             | '------------------------------------------------------------------------------
3e3e4 2a0             | control_write
3e3e4 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3e3e8 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3e3ec 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3e3f0 2a3             | 
3e3f0 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3e3f4 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3e3f8 2a5 F7 91 03 F6 |                 mov     hpar3, pb
3e3fc 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3e400 2a7             | .xfer_start
3e400 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3e404 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3e408 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3e40c 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e410 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3e414 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3e418 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3e41c 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3e420 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3e424 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3e428 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3e42c 2b2             | .data
3e42c 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3e430 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3e434 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3e438 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3e43c 2b6             | .out_retry
3e43c 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3e440 2b7 88 F6 BF FD |                 call    #txn_out
3e444 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e448 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3e44c 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3e450 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3e454 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3e458 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3e45c 2be             | .commit
3e45c 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3e460 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3e464 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3e468 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3e46c 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3e470 2c3             | pre_status_in
3e470 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3e474 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3e478 2c5             | .status_retry
3e478 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3e47c 2c6 44 F5 BF FD |                 call    #txn_in
3e480 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3e484 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3e488 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3e48c 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3e490 2cb 2D 00 64 AD |         if_z    ret
3e494 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3e498 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3e49c 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3e4a0 2cf             | '               ret                                     ' Caller must handle transfer retirement
3e4a0 2cf             | 
3e4a0 2cf             | '------------------------------------------------------------------------------
3e4a0 2cf             | ' Execute an IN interrupt transaction.
3e4a0 2cf             | '------------------------------------------------------------------------------
3e4a0 2cf             | ' On entry:
3e4a0 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3e4a0 2cf             | '   hpar2 - Address of the IN data buffer
3e4a0 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3e4a0 2cf             | ' On exit:
3e4a0 2cf             | '   retval - the result of the operation.
3e4a0 2cf             | '   hpar3 - the count of IN data bytes actually received.
3e4a0 2cf             | '------------------------------------------------------------------------------
3e4a0 2cf             | do_int_in
3e4a0 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3e4a4 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3e4a8 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3e4ac 2d2             | 
3e4ac 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3e4b0 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3e4b4 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3e4b8 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3e4bc 2d6             | .retry
3e4bc 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3e4c0 2d7 00 F5 BF FD |                 call    #txn_in
3e4c4 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3e4c8 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3e4cc 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3e4d0 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3e4d4 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3e4d8 2dd 54 00 B0 FD |                 call    #retry_wait
3e4dc 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3e4e0 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3e4e4 2e0 D4 FF 9F FD |                 jmp     #.retry
3e4e8 2e1             | .commit
3e4e8 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3e4ec 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3e4f0 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3e4f4 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3e4f8 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3e4fc 2e6             | .post_ret
3e4fc 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3e500 2e7             | 
3e500 2e7             | 
3e500 2e7             | '------------------------------------------------------------------------------
3e500 2e7             | ' Resets the downstream hub port to FS
3e500 2e7             | '------------------------------------------------------------------------------
3e500 2e7             | dwnstream_reset
3e500 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3e504 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3e508 2e9             | 
3e508 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3e50c 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3e510 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3e514 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3e518 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3e51c 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3e520 2ef             | 
3e520 2ef             | '------------------------------------------------------------------------------
3e520 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3e520 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3e520 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3e520 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3e520 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3e520 2ef             | '------------------------------------------------------------------------------
3e520 2ef             | ' On entry:
3e520 2ef             | '   hctwait - wait interval in sysclocks.
3e520 2ef             | ' On exit:
3e520 2ef             | '------------------------------------------------------------------------------
3e520 2ef             | poll_waitx
3e520 2ef 1A 92 63 FD |                 getct   hct2
3e524 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3e528 2f1             | .wait
3e528 2f1 FF 25 CC FB |                 jnct2   #.wait
3e52c 2f2 2D 00 64 FD |                 ret
3e530 2f3             | 
3e530 2f3             | '------------------------------------------------------------------------------
3e530 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3e530 2f3             | '------------------------------------------------------------------------------
3e530 2f3             | ' On entry:
3e530 2f3             | '   retval - transaction response PID or error code.
3e530 2f3             | ' On exit:
3e530 2f3             | '------------------------------------------------------------------------------
3e530 2f3             | retry_wait
3e530 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3e534 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3e538 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3e53c 2f6 14 00 90 AD |         if_z    jmp     #.nak
3e540 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3e544 2f8 D8 FF BF FD |                 call    #poll_waitx
3e548 2f9             | .dec
3e548 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3e54c 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3e550 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3e554 2fc             | .nak
3e554 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3e558 2fd C4 FF BF FD |                 call    #poll_waitx
3e55c 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3e560 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3e564 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3e568 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3e56c 302 2D 00 64 FD |                 ret
3e570 303             | 
3e570 303             | host_reset
3e570 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3e574 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3e578 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3e578 305 BD 01 05 FF 
3e57c 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3e580 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3e584 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3e588 309             | ' Check to see if the system clock has been changed.
3e588 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3e58c 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3e590 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3e594 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3e598 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3e59c 30e 40 46 62 FD |                 dirl    dp
3e5a0 30f             | 
3e5a0 30f 28 02 64 FD |                 setq    #1
3e5a4 310 80 00 80 FF 
3e5a8 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3e5ac 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3e5b0 313             | .enable
3e5b0 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3e5b4 314 41 46 62 FD |                 dirh    dp
3e5b8 315 1F 36 63 FD |                 waitx   _1us_
3e5bc 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3e5c0 317             | 
3e5c0 317             |                 ' Handle Port protection enable and startup delay
3e5c0 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3e5c4 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3e5c8 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3e5cc 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3e5d0 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3e5d4 31c             | 
3e5d4 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3e5d8 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3e5dc 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3e5e0 31f 00 00 04 F6 |                 mov     0-0, #0
3e5e4 320             | .regloop
3e5e4 320             | 
3e5e4 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3e5e4 320             | 
3e5e4 320             | discon_entry
3e5e4 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3e5e8 321             | 
3e5e8 321             |               
3e5e8 321             |         if HAVE_HIDPAD
3e5e8 321 D4 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3e5ec 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3e5f0 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3e5f4 324 F7 01 68 FC |                 wrlong  #0,pb
3e5f8 325             |         end
3e5f8 325             |         if EMUPAD_MAX_PLAYER > 0
3e5f8 325             |         end
3e5f8 325             | 
3e5f8 325             |                 ' Fall through to disconnected loop
3e5f8 325             | 
3e5f8 325             | '-----------------------------------------------------------------------------------------------------------------
3e5f8 325             | ' Device connect handling (Section 7.1.7.3).
3e5f8 325             | '-----------------------------------------------------------------------------------------------------------------
3e5f8 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3e5f8 325             | ' device to connect (Section 7.1.7.3).
3e5f8 325             | '-----------------------------------------------------------------------------------------------------------------
3e5f8 325             | disconnected
3e5f8 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3e5fc 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3e600 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3e604 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3e608 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3e60c 32a             |         if ACTIVITY_LED >= 0
3e60c 32a             |         end
3e60c 32a 22 A7 82 FA |                 rqpin   urx, dm
3e610 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3e614 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3e618 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3e61c 32e             | .se1_test
3e61c 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3e620 32f FC FE BF FD |                 call    #poll_waitx
3e624 330 22 A7 82 FA |                 rqpin   urx, dm
3e628 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3e62c 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3e630 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3e634 334             | .se1            'SE1 is a fatal error condition
3e634 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
3e638 335 E4 FE BF FD |                 call    #poll_waitx
3e63c 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3e640 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3e644 338             | .connect_test                                           ' Test lines until stable J/K state seen
3e644 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3e648 339 22 A7 82 FA |                 rqpin   urx, dm
3e64c 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3e650 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3e654 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3e658 33d             | connected
3e658 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3e65c 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3e660 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3e664 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3e668 341             | .set_pulse
3e668 341 1A 64 63 FD |                 getct   _pulse_time_
3e66c 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3e670 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3e670 343             | ' of 1ms and make a correction, if necessary.
3e670 343             | '                mov     htmp, _1ms_
3e670 343             | '                subs    htmp, iframe_delta
3e670 343             | '                adds    _frame1ms_clks_, htmp
3e670 343             | '                debug(udec(_frame1ms_clks_))
3e670 343             | 
3e670 343             |                 ' Fall through to idle/processing loop
3e670 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3e674 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3e678 345             | 
3e678 345             | hidle
3e678 345 22 A7 82 FA |                 rqpin   urx, dm
3e67c 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3e680 347 98 00 90 CD |         if_c    jmp     #.se0_test
3e684 348 24 06 70 FD |                 pollct3                         wc
3e688 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3e68c 34a 1A 94 63 FD |                 getct   hct3
3e690 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3e694 34c             | 
3e694 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3e698 34d 00 70 E3 F8 |                 getbyte htmp
3e69c 34e             | 
3e69c 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3e6a0 34f 84 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3e6a4 350 40 00 90 AD |         if_z    jmp     #.poll
3e6a8 351             | 
3e6a8 351             |         if _HAVE_GAMEPAD
3e6a8 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3e6ac 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3e6b0 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3e6b4 354 0C 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3e6b8 355 2C 00 90 AD |         if_z    jmp     #.poll
3e6bc 356             |         end
3e6bc 356             | 
3e6bc 356             |         if HAVE_MOUSE
3e6bc 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3e6c0 357 30 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3e6c4 358 20 00 90 AD |         if_z    jmp     #.poll
3e6c8 359             |         end
3e6c8 359             | 
3e6c8 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
3e6cc 35a 98 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3e6d0 35b 14 00 90 AD |         if_z    jmp     #.poll
3e6d4 35c             | 
3e6d4 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3e6d8 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3e6dc 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3e6e0 35f 98 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3e6e4 360             |         if HAVE_MOUSE
3e6e4 360 30 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3e6e8 361             |         else
3e6e8 361             |         end
3e6e8 361             | 
3e6e8 361             | .poll
3e6e8 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3e6ec 362 2D EC 63 FD |                 call    pa
3e6f0 363             | .skip_poll
3e6f0 363             | 
3e6f0 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3e6f4 364             | 
3e6f4 364             | .nopoll
3e6f4 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3e6f8 365 44 00 90 AD |         if_z    jmp     #hsuspend
3e6fc 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3e700 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3e704 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3e708 369 1A 84 63 FD |                 getct   hr0
3e70c 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3e710 36b             |         if ACTIVITY_LED >= 0
3e710 36b             |         end
3e710 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3e714 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
3e718 36d 5C FF 9F FD |                 jmp     #hidle
3e71c 36e             | ' Check for extended SE0 state on the bus
3e71c 36e             | .se0_test
3e71c 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3e720 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3e724 370 22 A7 82 FA |                 rqpin   urx, dm
3e728 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3e72c 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3e730 373 24 F6 BF FD |                 call    #wait_txn_ok
3e734 374 00 00 80 FF 
3e738 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3e73c 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3e73c 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3e740 377             | 
3e740 377             | hsuspend
3e740 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3e744 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3e748 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3e74c 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3e750 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3e754 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3e758 37d             | 
3e758 37d             |                 ' Fall through to resume wait loop
3e758 37d             | 
3e758 37d             | hwait_resume
3e758 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3e75c 37e 02 86 47 F0 |                 shr     hr1, #2
3e760 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3e764 380             |         if ACTIVITY_LED >= 0
3e764 380             |         end
3e764 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3e768 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3e76c 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3e770 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3e774 384 18 00 90 AD |         if_z    jmp     #.resume
3e778 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3e77c 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3e780 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3e784 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3e788 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3e78c 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3e790 38b             | .resume
3e790 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3e794 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3e798 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3e79c 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
3e7a0 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3e7a4 390 1F 70 63 FD |                 waitx   htmp
3e7a8 391 22 07 28 FC |                 wypin   #OUT_J, dm
3e7ac 392 01 70 47 F0 |                 shr     htmp, #1
3e7b0 393 1F 70 63 FD |                 waitx   htmp
3e7b4 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3e7b8 395 1A 92 62 FD |                 getct   iframe_ct_base
3e7bc 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3e7c0 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3e7c4 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3e7c8 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
3e7cc 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3e7d0 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3e7d4 39c             | 
3e7d4 39c             | '------------------------------------------------------------------------------
3e7d4 39c             | ' Send preamble to enable low-speed HUB ports
3e7d4 39c             | '------------------------------------------------------------------------------
3e7d4 39c             | ' On entry:
3e7d4 39c             | ' On exit:
3e7d4 39c             | '   USB baud rate set to low-speed
3e7d4 39c             | '------------------------------------------------------------------------------
3e7d4 39c             | utx_pre
3e7d4 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3e7d8 39d 40 46 62 FD |                 dirl    dp
3e7dc 39e 28 02 64 FD |                 setq    #1
3e7e0 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3e7e4 3a0 58 44 62 FD |                 drvl    dm
3e7e8 3a1 59 46 62 FD |                 drvh    dp
3e7ec 3a2             | 
3e7ec 3a2 1E 00 00 FF 
3e7f0 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3e7f4 3a4             | 
3e7f4 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3e7f8 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
3e7fc 3a6 28 02 64 3D |         if_nc   setq    #1
3e800 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3e804 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3e808 3a9             | .l1
3e808 3a9             | 
3e808 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3e80c 3aa 40 46 62 FD |                 dirl    dp
3e810 3ab 28 02 64 FD |                 setq    #1
3e814 3ac 80 00 80 FF 
3e818 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3e81c 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3e820 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3e824 3b0 41 46 62 FD |                 dirh    dp
3e828 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3e82c 3b2             | 
3e82c 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3e830 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3e834 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3e838 3b5             | 
3e838 3b5             | hlut_end
3e838 3b5             |                 fit     $400
3e838 3b5             |                 orgh
3e838                 | if OVERLAP_MEMORY
3e838                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3e838                 | end
3e838                 | '------------------------------------------------------------------------------
3e838                 | ' Routines called from cog space.
3e838                 | '------------------------------------------------------------------------------
3e838                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3e838                 | '------------------------------------------------------------------------------
3e838                 | 
3e838                 | '------------------------------------------------------------------------------
3e838                 | ' USB host cog initialization.
3e838                 | '------------------------------------------------------------------------------
3e838                 | usb_host_init
3e838                 |                 ' Initialize buffer pointers
3e838                 |         if OVERLAP_MEMORY
3e838                 |         else
3e838     3C 15 B0 FE |                 loc     pb, #hid_descr
3e83c                 |         end
3e83c     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3e840                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3e840                 |                 {
3e840                 |                 }
3e840                 |         
3e840                 |                 {
3e840                 |                 }
3e840                 |                 'loc     pb,#hkbd_report
3e840                 |                 'mov     hkbd_report_p,pb
3e840                 | 
3e840     04 1D B0 FE |                 loc     pb, #hub_descr
3e844     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3e848     19 1D B0 FE |                 loc     pb, #urx_buff
3e84c     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3e850     91 1D B0 FE |                 loc     pb, #dev_desc_buff
3e854     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3e858     9B 1D B0 FE |                 loc     pb, #con_desc_buff
3e85c     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3e860     14 15 B0 FE |                 loc     pb, #usb_cache_start
3e864     F7 55 02 F6 |                 mov     cache_start_p, pb
3e868     E5 1C B0 FE |                 loc     pb, #usb_cache_end
3e86c     F7 57 02 F6 |                 mov     cache_end_p, pb
3e870                 | 
3e870                 |         if ERROR_LED >= 0
3e870                 |         end
3e870                 | 
3e870                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3e870                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3e870                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3e870                 | ' Configure and enable the Serial Host USB port.
3e870     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3e874                 | 
3e874                 | '------------------------------------------------------------------------------
3e874                 | ' Timing calculations happen before any interrupt(s) are enabled.
3e874                 | '------------------------------------------------------------------------------
3e874                 | ' On entry:
3e874                 | '   htmp - current CLKFREQ value.
3e874                 | '------------------------------------------------------------------------------
3e874                 | hinit_usb_timings
3e874                 | '                getct   htmp2
3e874     B8 59 02 F6 |                 mov     save_sysclk, htmp
3e878     8D 5B 80 FF 
3e87c     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3e880     18 30 63 FD |                 getqx   _12Mbps_
3e884     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3e888     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3e88c     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3e890     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3e894     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3e898     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3e89c     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
3e8a0     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3e8a4     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3e8a8     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3e8ac     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3e8b0     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3e8b4     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3e8b8     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3e8bc     80 00 00 FF 
3e8c0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3e8c4     18 2C 63 FD |                 getqx   _var_64_lower_
3e8c8     19 2E 63 FD |                 getqy   _var_64_upper_
3e8cc     28 2C 63 FD |                 setq    _var_64_lower_
3e8d0     65 CD 1D FF 
3e8d4     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3e8d8     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3e8dc     01 00 00 FF 
3e8e0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3e8e4     18 2C 63 FD |                 getqx   _var_64_lower_
3e8e8     19 2E 63 FD |                 getqy   _var_64_upper_
3e8ec     28 2C 63 FD |                 setq    _var_64_lower_
3e8f0     A1 07 00 FF 
3e8f4     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3e8f8     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3e8fc     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3e900     09 36 57 F0 |                 shr     _1us_, #9               wc
3e904     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3e908     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3e90c     18 38 63 FD |                 getqx   _10us_
3e910     09 38 57 F0 |                 shr     _10us_, #9              wc
3e914     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
3e918     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3e91c     18 3A 63 FD |                 getqx   _33us_
3e920     09 3A 57 F0 |                 shr     _33us_, #9              wc
3e924     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
3e928     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3e92c     18 3C 63 FD |                 getqx   _txn_err_
3e930     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3e934     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3e938     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3e93c     18 3E 63 FD |                 getqx   _500us_
3e940     09 3E 57 F0 |                 shr     _500us_, #9             wc
3e944     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
3e948     01 00 00 FF 
3e94c     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3e950     18 40 63 FD |                 getqx   _txn_ok_ls_
3e954     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3e958     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3e95c     01 00 00 FF 
3e960     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3e964     18 42 63 FD |                 getqx   _txn_ok_fs_
3e968     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3e96c     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3e970     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3e974     05 00 00 FF 
3e978     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3e97c     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3e980     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3e984     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3e988     1C 00 00 FF 
3e98c     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3e990     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3e994     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3e998     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3e99c     00 00 00 FF 
3e9a0     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3e9a4     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3e9a8     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3e9ac     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3e9b0     04 00 00 FF 
3e9b4     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3e9b8     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3e9bc     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3e9c0     8D 5B 00 FF 
3e9c4     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3e9c8     18 4C 63 FD |                 getqx   _preamble_wait_
3e9cc     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3e9d0     01 00 00 FF 
3e9d4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3e9d8     18 2C 63 FD |                 getqx   _var_64_lower_
3e9dc     19 2E 63 FD |                 getqy   _var_64_upper_
3e9e0     28 2C 63 FD |                 setq    _var_64_lower_
3e9e4     01 00 00 FF 
3e9e8     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3e9ec     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3e9f0     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3e9f4     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3e9f8     FF FF 7F FF 
3e9fc     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3ea00     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3ea04     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3ea08     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3ea0c     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3ea10     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3ea14     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3ea18     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3ea1c     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3ea20     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3ea24     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3ea28     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3ea2c     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3ea30     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3ea34     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3ea38     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3ea3c     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3ea40     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3ea44     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3ea48     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3ea4c     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3ea50     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3ea54     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3ea58     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3ea5c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3ea60     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3ea64     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3ea68                 | '        _ret_   mov     _1sec_, save_sysclk
3ea68                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3ea68                 | '                ret
3ea68                 | {
3ea68                 | }
3ea68                 | 
3ea68                 | '------------------------------------------------------------------------------
3ea68                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3ea68                 | ' one. If it is, start the task progression that will configure the device for
3ea68                 | ' use.
3ea68                 | '------------------------------------------------------------------------------
3ea68                 | ' On entry:
3ea68                 | '   hconfig_base - start address of the cached config descriptor chain.
3ea68                 | ' On exit:
3ea68                 | '------------------------------------------------------------------------------
3ea68                 | hparse_con_desc
3ea68     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3ea6c     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3ea70     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3ea74     4E 70 FF F9 |                 movbyts htmp,#%%1032
3ea78     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3ea7c                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3ea7c                 | 
3ea7c     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3ea80     6E ED 03 F1 |                 add     pa, hconfig_base
3ea84     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3ea88                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3ea88                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3ea88                 | ' that defines a keyboard and/or mouse.
3ea88     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3ea8c                 | .next_intf
3ea8c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3ea90     B8 01 90 3D |         if_ae   jmp     #hset_config
3ea94     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3ea98     75 F3 03 F1 |                 add     ptrb, hnext_desc
3ea9c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3eaa0     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3eaa4     0C 00 90 AD |         if_z    jmp     #.intf
3eaa8     80 71 C7 FA |                 rdbyte  htmp, ptrb
3eaac     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3eab0     D8 FF 9F FD |                 jmp     #.next_intf
3eab4                 | .intf
3eab4     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3eab8     00 90 07 F6 |                 mov     hpar3, #0
3eabc     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3eac0     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3eac4     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3eac8     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3eacc                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3eacc                 | 
3eacc                 | .endp
3eacc     80 71 C7 FA |                 rdbyte  htmp, ptrb
3ead0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3ead4     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3ead8     78 00 90 3D |         if_ae   jmp     #.get_device
3eadc     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3eae0     75 F3 03 F1 |                 add     ptrb, hnext_desc
3eae4     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3eae8     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3eaec     64 00 90 AD |         if_z    jmp     #.get_device
3eaf0     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3eaf4     04 00 90 AD |         if_z    jmp     #.get_ep
3eaf8     D0 FF 9F FD |                 jmp     #.endp
3eafc                 | .get_ep
3eafc     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3eb00     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3eb04     0F 86 67 F0 |                 shl     hr1, #8 + 7
3eb08     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
3eb0c     3F 00 00 FF 
3eb10     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
3eb14     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3eb18     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3eb1c     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3eb20     00 90 0F F2 |                 cmp     hpar3, #0               wz
3eb24     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3eb28     A0 FF 9F FD |                 jmp     #.endp
3eb2c                 | .in_ep
3eb2c     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3eb30     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3eb34                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3eb34     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3eb38     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3eb3c     8C FF 9F FD |                 jmp     #.endp
3eb40                 | .out_ep
3eb40     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3eb44     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3eb48                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3eb48     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3eb4c     C2 8B DB F8 |                 setbyte hr3, hr0, #3
3eb50     78 FF 9F FD |                 jmp     #.endp
3eb54                 | 
3eb54                 | .get_device
3eb54     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3eb58     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3eb5c     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3eb60     64 00 90 AD |         if_z    jmp     #.gamepad
3eb64     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3eb68     A8 00 90 AD |         if_z    jmp     #.hub
3eb6c     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3eb70     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3eb74                 |  '               cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3eb74     00 E6 0E F2 |            cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3eb78     4C 00 90 AD |         if_z    jmp     #.gamepad
3eb7c     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3eb80     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3eb84                 | .keyboard
3eb84     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3eb88                 |         if HAVE_MOUSE
3eb88     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3eb8c                 |         else
3eb8c                 |         end
3eb8c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3eb90     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
3eb94     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3eb98     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3eb9c     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3eba0     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3eba4                 |                 'debug(udec(kb_intf_num))
3eba4                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3eba4     E4 FE 9F FD |                 jmp     #.next_intf
3eba8                 | if HAVE_MOUSE
3eba8                 | .mouse
3eba8     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3ebac     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3ebb0     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3ebb4     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
3ebb8     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3ebbc                 |                 'getbyte ms_interval, hr2, #3
3ebbc     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3ebc0     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3ebc4                 |                 'debug(udec(kb_intf_num))
3ebc4                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3ebc4     C4 FE 9F FD |                 jmp     #.next_intf
3ebc8                 | end
3ebc8                 | .gamepad
3ebc8     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3ebcc     C7 71 63 F5 |                 xor     htmp, hpar2
3ebd0     3F 00 00 FF 
3ebd4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3ebd8     B0 FE 9F AD |         if_z    jmp     #.next_intf
3ebdc                 |         if HAVE_MOUSE
3ebdc     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3ebe0     C7 71 63 F5 |                 xor     htmp, hpar2
3ebe4     3F 00 00 FF 
3ebe8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3ebec     9C FE 9F AD |         if_z    jmp     #.next_intf
3ebf0                 |         end
3ebf0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3ebf4     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3ebf8     90 FE 9F 5D |         if_nz   jmp     #.next_intf
3ebfc                 | 
3ebfc     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3ec00     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3ec04     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3ec08     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3ec0c     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3ec10                 |                 'debug(udec(gp_intf_num))
3ec10                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3ec10     78 FE 9F FD |                 jmp     #.next_intf
3ec14                 | .hub
3ec14     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3ec18     70 FE 9F 5D |         if_nz   jmp     #.next_intf
3ec1c     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3ec20     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3ec24     64 FE 9F 5D |         if_nz   jmp     #.next_intf
3ec28     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3ec2c     5C FE 9F 5D |         if_nz   jmp     #.next_intf
3ec30     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3ec34     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3ec38     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3ec3c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3ec40     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3ec44     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3ec48                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3ec48     40 FE 9F FD |                 jmp     #.next_intf
3ec4c                 | 
3ec4c                 | '------------------------------------------------------------------------------
3ec4c                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3ec4c                 | ' it according to its function, or functions. In the case of this boot protocol
3ec4c                 | ' keyboard/mouse class driver:
3ec4c                 | ' - SetConfiguration(config_num)
3ec4c                 | ' - SetProtocol(boot)
3ec4c                 | ' - SetIdle(indefinite)
3ec4c                 | ' - Enter the device interrupt IN polling task stage.
3ec4c                 | '------------------------------------------------------------------------------
3ec4c                 | ' On entry:
3ec4c                 | ' On exit:
3ec4c                 | '------------------------------------------------------------------------------
3ec4c                 | hset_config
3ec4c                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3ec4c                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3ec4c     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3ec50     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3ec54     00 00 0C F2 |                 cmp     0-0, #0                 wz
3ec58     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3ec5c                 |         if HAVE_MOUSE
3ec5c     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3ec60                 |         end
3ec60     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3ec64     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3ec68                 | .set_config
3ec68     6C 0E D0 FE |                 loc     ptra, #set_config
3ec6c     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3ec70     6E ED 03 F1 |                 add     pa, hconfig_base
3ec74     F6 8D C3 FA |                 rdbyte  hpar1, pa
3ec78     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3ec7c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3ec80     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3ec84     A0 02 A0 FD |                 call    #control_write
3ec88     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ec8c     2D 00 64 5D |         if_nz   ret
3ec90                 | .kbd_config
3ec90     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3ec94     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3ec98                 | 
3ec98     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3ec9c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3eca0     3F 00 00 FF 
3eca4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3eca8     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3ecac                 | 
3ecac     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3ecb0     34 0E D0 FE |                 loc     ptra, #set_protocol
3ecb4     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3ecb8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3ecbc     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3ecc0     A0 02 A0 FD |                 call    #control_write
3ecc4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ecc8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3eccc     E4 02 90 5D |         if_nz   jmp     #.notify_client
3ecd0     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3ecd4     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3ecd8     30 03 B0 FD |                 call    #hset_idle
3ecdc                 |                 'cmp     retval, #PID_ACK        wz
3ecdc                 |         'if_nz   mov     hkbd_ep_addr, #0
3ecdc                 |         'if_nz   jmp     #.notify_client
3ecdc     A8 99 02 F6 |                 mov     hctwait, _2ms_
3ece0     EF 02 A0 FD |                 call    #poll_waitx
3ece4     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3ece8     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3ecec     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3ecf0     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3ecf4     2C 03 B0 FD |                 call    #hset_kbdled_report
3ecf8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ecfc     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3ed00     B0 02 90 5D |         if_nz   jmp     #.notify_client
3ed04     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3ed08     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3ed0c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3ed10     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3ed14     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3ed18     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3ed1c     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3ed20     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3ed24     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3ed28     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3ed2c     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3ed30                 |         if !!HAVE_MOUSE
3ed30                 |         end
3ed30                 | 
3ed30                 | .mouse_config
3ed30                 | if HAVE_MOUSE
3ed30     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3ed34     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3ed38     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3ed3c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3ed40     3F 00 00 FF 
3ed44     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3ed48     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3ed4c                 | 
3ed4c                 |                 debug("mouse passed addr check")
3ed4c                 | 
3ed4c     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3ed50     00 00 80 FF 
3ed54     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3ed58     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3ed5c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ed60     55 02 A0 FD |                 call    #control_read
3ed64     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ed68     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3ed6c     44 02 90 5D |         if_nz   jmp     #.notify_client
3ed70     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3ed74     56 01 00 F6 |                 mov     0-0, total_data
3ed78     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ed7c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3ed7c                 | 
3ed7c     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3ed80     64 0D D0 FE |                 loc     ptra, #set_protocol
3ed84     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3ed88     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3ed8c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3ed90     A0 02 A0 FD |                 call    #control_write
3ed94     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ed98     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3ed9c     14 02 90 5D |         if_nz   jmp     #.notify_client
3eda0                 |                 debug("mouse passed SetProtocol")
3eda0     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3eda4     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3eda8     60 02 B0 FD |                 call    #hset_idle
3edac                 |                 'cmp     retval, #PID_ACK        wz
3edac                 |         'if_nz   mov     hmouse_ep_addr, #0
3edac                 |         'if_nz   jmp     #.notify_client
3edac                 |                 debug("mouse passed SetIdle")
3edac     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3edb0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3edb4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3edb8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3edbc     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3edc0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3edc4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3edc8     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3edcc     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3edd0     3F 00 00 FF 
3edd4     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3edd8     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3eddc     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3ede0     D0 01 90 FD |                 jmp     #.notify_client
3ede4                 | end
3ede4                 | .gamepad_config
3ede4                 | if _HAVE_GAMEPAD
3ede4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3ede8     00 00 0C F2 |                 cmp     0-0, #0                 wz
3edec     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3edf0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3edf4     00 70 03 F6 |                 mov     htmp, 0-0
3edf8     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3edfc     3F 00 00 FF 
3ee00     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3ee04     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3ee08                 | 
3ee08     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3ee0c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3ee10     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3ee14     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3ee18     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3ee1c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3ee20     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3ee24     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3ee28     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3ee2c     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3ee30     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3ee34     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3ee38     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3ee3c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3ee40                 | 
3ee40                 |                 if EMUPAD_MAX_PLAYER > 0
3ee40                 |                 
3ee40                 | .rule_loop           
3ee40                 |                 end
3ee40                 | 
3ee40     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3ee44     5C 00 90 AD |         if_e    jmp     #.xinput
3ee48     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3ee4c     00 70 03 F6 |                 mov     htmp,0-0
3ee50     01 A6 02 FF 
3ee54     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3ee58     7C 00 90 AD |         if_e    jmp     #.ps3
3ee5c                 | 
3ee5c     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3ee60     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3ee64     00 00 80 5F 
3ee68     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3ee6c     03 00 80 AF 
3ee70     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3ee74     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3ee78     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ee7c     55 02 A0 FD |                 call    #control_read
3ee80     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ee84     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3ee88     00 00 04 56 |         if_nz   mov     0-0, #0
3ee8c     24 01 90 5D |         if_nz   jmp     #.notify_client
3ee90     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3ee94     56 01 00 F6 |                 mov     0-0, total_data
3ee98     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ee9c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3ee9c                 | 
3ee9c     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3eea0     10 01 90 FD |                 jmp     #.notify_client
3eea4                 | .xinput
3eea4     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3eea8     2D EF 03 F6 |                 mov     pb,hdev_port
3eeac     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3eeb0     03 EE 27 F3 |                 fle     pb,#3
3eeb4     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3eeb8     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3eebc                 | 
3eebc     03 B0 06 F6 |                 mov     pkt_data, #3
3eec0     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3eec4     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3eec8     5A 00 A0 FD |                 call    #txn_out
3eecc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3eed0                 | 
3eed0     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3eed4     DC 00 90 FD |                 jmp     #.notify_client
3eed8                 | .ps3
3eed8     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3eedc     2D EF 03 F6 |                 mov     pb,hdev_port
3eee0     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3eee4     04 EE 27 F3 |                 fle     pb,#4
3eee8     F7 EF C3 F9 |                 decod   pb
3eeec     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3eef0                 | 
3eef0     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3eef4     00 0C D0 FE |                 loc     ptra, #set_report
3eef8     01 00 80 FF 
3eefc     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3ef00     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3ef04     03 61 5C FC |                 wrword  #48, ptra[wLength]
3ef08     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3ef0c     A0 02 A0 FD |                 call    #control_write
3ef10                 | 
3ef10     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3ef14     E0 0B D0 FE |                 loc     ptra, #set_report
3ef18     01 00 80 FF 
3ef1c     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3ef20     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3ef24     03 09 5C FC |                 wrword  #4, ptra[wLength]
3ef28     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3ef2c     A0 02 A0 FD |                 call    #control_write
3ef30     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3ef34     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3ef38     00 00 04 56 |         if_nz   mov     0-0, #0
3ef3c     74 00 90 5D |         if_nz   jmp     #.notify_client
3ef40                 | 
3ef40     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3ef44     6C 00 90 FD |                 jmp     #.notify_client
3ef48                 | end
3ef48                 | 
3ef48                 | .hub_config
3ef48     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3ef4c     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3ef50     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3ef54     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3ef58     3F 00 00 FF 
3ef5c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3ef60     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3ef64                 | 
3ef64     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3ef68     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3ef6c     26 EF 03 F6 |                 mov     pb, hub_descr_p
3ef70     55 02 A0 FD |                 call    #control_read
3ef74     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ef78     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3ef7c     34 00 90 5D |         if_nz   jmp     #.notify_client
3ef80                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3ef80                 | 
3ef80     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3ef84     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3ef88     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3ef8c                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3ef8c                 | .pwr_loop
3ef8c     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3ef90     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3ef94     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3ef98     A0 02 A0 FD |                 call    #control_write
3ef9c     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3efa0                 | 
3efa0     B1 99 02 F6 |                 mov     hctwait, _500ms_
3efa4     B0 99 02 F1 |                 add     hctwait, _100ms_
3efa8     EF 02 A0 FD |                 call    #poll_waitx
3efac                 | 
3efac     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3efb0     00 00 90 FD |                 jmp     #.notify_client
3efb4                 | 
3efb4                 | .notify_client
3efb4     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3efb8     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3efbc                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3efbc                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3efbc     2D 00 64 FD |                 ret
3efc0                 | 
3efc0                 | '------------------------------------------------------------------------------
3efc0                 | ' Initialize the keyboard/mouse data area to start-up values.
3efc0                 | '------------------------------------------------------------------------------
3efc0                 | ' On entry:
3efc0                 | ' On exit:
3efc0                 | '------------------------------------------------------------------------------
3efc0                 | init_kbdm_data
3efc0     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3efc4     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3efc8                 | 
3efc8     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3efcc     2B ED 03 F6 |                 mov     pa, cache_end_p
3efd0                 | .loop
3efd0     61 01 4C FC |                 wrbyte  #0, ptra++
3efd4     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3efd8     F4 FF 9F CD |         if_b    jmp     #.loop
3efdc                 |         
3efdc                 |         if EMUPAD_MAX_PLAYER > 0
3efdc                 |         end
3efdc                 | 
3efdc                 | 
3efdc     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3efe0                 | .regloop
3efe0     00 EC 8F F9 |                 altd    pa
3efe4     00 00 04 F6 |                 mov     0-0, #0
3efe8     01 EC 07 F1 |                 add     pa, #1
3efec     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3eff0     EC FF 9F 5D |         if_nz   jmp     #.regloop
3eff4                 | 
3eff4     E1 E1 61 FF 
3eff8     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3effc     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3f000     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3f004     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3f008                 | 
3f008     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3f00c                 | 
3f00c                 | '------------------------------------------------------------------------------
3f00c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3f00c                 | ' function.
3f00c                 | '------------------------------------------------------------------------------
3f00c                 | ' On entry:
3f00c                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3f00c                 | '   hpar2 - index number of the target interface.
3f00c                 | ' On exit:
3f00c                 | '------------------------------------------------------------------------------
3f00c                 | hset_idle
3f00c     A8 99 02 F6 |                 mov     hctwait, _2ms_
3f010     EF 02 A0 FD |                 call    #poll_waitx
3f014     D8 0A D0 FE |                 loc     ptra, #set_idle
3f018     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3f01c     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3f020     A0 02 80 FD |                 jmp     #control_write
3f024                 | 
3f024                 | '------------------------------------------------------------------------------
3f024                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3f024                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3f024                 | '------------------------------------------------------------------------------
3f024                 | ' On entry:
3f024                 | '   ep_addr_pid - device address and enpoint for the request.
3f024                 | ' On exit:
3f024                 | '   retval - transaction result.
3f024                 | '------------------------------------------------------------------------------
3f024                 | hset_kbdled_report
3f024     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3f028     CC 0A D0 FE |                 loc     ptra, #set_report
3f02c     01 00 80 FF 
3f030     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3f034     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3f038     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3f03c     27 EF 03 F6 |                 mov     pb, urx_buff_p
3f040     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3f044     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3f048                 | 
3f048                 | '------------------------------------------------------------------------------
3f048                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3f048                 | '------------------------------------------------------------------------------
3f048                 | ' On entry:
3f048                 | ' On exit:
3f048                 | '------------------------------------------------------------------------------
3f048                 | hget_kbd_in_report
3f048     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3f04c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3f050     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3f054     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3f058     CF 02 A0 FD |                 call    #do_int_in
3f05c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f060     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3f064                 | 
3f064     00 90 0F F2 |                 cmp     hpar3, #0               wz
3f068     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3f06c                 | 
3f06c     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3f070     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3f074     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3f078     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3f07c                 | 
3f07c     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3f080     18 00 B0 FD |                 call    #hkbd_compare
3f084                 |         if EMUPAD_MAX_PLAYER > 0
3f084                 |         end
3f084                 | 
3f084                 | .led_check
3f084     3B 71 03 F6 |                 mov     htmp, kb_led_states
3f088     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3f08c     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3f090     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3f094     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3f098     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3f09c                 | 
3f09c                 | '------------------------------------------------------------------------------
3f09c                 | ' Compare current and previous keyboard data buffers for keypress changes.
3f09c                 | '------------------------------------------------------------------------------
3f09c                 | hkbd_compare
3f09c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3f0a0     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3f0a4     61 73 07 FB |                 rdlong  htmp1, ptra++
3f0a8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3f0ac     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3f0b0     61 73 07 FB |                 rdlong  htmp1, ptra++
3f0b4     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3f0b8     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3f0bc     2D 00 64 AD |         if_z    ret
3f0c0                 | 
3f0c0     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3f0c4                 | 
3f0c4                 |                 ' Handle modifiers
3f0c4     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
3f0c8     00 87 C7 FA |                 rdbyte  hr1, ptra
3f0cc     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3f0d0     63 86 63 FD |                 mergew  hr1
3f0d4     08 EC 07 F6 |                 mov     pa,#8
3f0d8                 | .modloop
3f0d8     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3f0dc     E8 8C 07 F6 |                 mov     hpar1,#$E8
3f0e0     F6 8D 83 F1 |                 sub     hpar1,pa
3f0e4     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3f0e8     FB ED 6F FB |                 djnz    pa,#.modloop
3f0ec                 | 
3f0ec     6F E0 75 FD | .release        modc    _set    wc
3f0f0                 |                 'alts    hdev_port, #hid_report_p
3f0f0                 |                 'mov     ptra, hid_report_p
3f0f0     02 F0 07 F1 |                 add     ptra, #2
3f0f4     06 EC 07 F6 |                 mov     pa, #6
3f0f8     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3f0fc     20 00 90 AD |         if_z    jmp     #.rl3
3f100     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3f104     02 F2 07 F1 |                 add     ptrb, #2
3f108     06 EE 07 F6 |                 mov     pb, #6
3f10c     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3f110     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3f114     08 00 90 AD |         if_z    jmp     #.rl3
3f118     FC EF 6F FB |                 djnz    pb, #.rl2
3f11c     68 00 B0 FD |                 call    #hkbd_translate
3f120     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3f124                 | 
3f124     00 90 07 F6 |                 mov     hpar3, #0
3f128     1F 90 27 F4 |                 bith    hpar3, #31
3f12c                 | 
3f12c     6F 00 74 FD | .press          modc    _clr    wc
3f130     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3f134     02 F0 07 F1 |                 add     ptra, #2
3f138     06 EC 07 F6 |                 mov     pa, #6
3f13c     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3f140     20 00 90 AD |         if_z    jmp     #.pl3
3f144     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3f148     02 F2 07 F1 |                 add     ptrb, #2
3f14c     06 EE 07 F6 |                 mov     pb, #6
3f150     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3f154     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3f158     08 00 90 AD |         if_z    jmp     #.pl3
3f15c     FC EF 6F FB |                 djnz    pb, #.pl2
3f160     24 00 B0 FD |                 call    #hkbd_translate
3f164     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3f168                 | 
3f168     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3f16c     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3f170     28 02 64 FD |                 setq #1
3f174     61 73 07 FB |                 rdlong  htmp1, ptra++
3f178     28 02 64 FD |                 setq #1
3f17c     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3f180     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3f184                 | 
3f184     2D 00 64 FD |                 ret
3f188                 | 
3f188                 | '------------------------------------------------------------------------------
3f188                 | ' Translate keyboard scancode to ASCII
3f188                 | '------------------------------------------------------------------------------
3f188                 | ' On entry:
3f188                 | '   hpar1 - scancode
3f188                 | '   hpar2 - key modifiers state
3f188                 | '       c - pressed (0) or released (1) flag
3f188                 | ' On exit:
3f188                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3f188                 | '               30..17 = unused
3f188                 | '                   18 = scroll-lock state 
3f188                 | '                   17 = caps-lock state
3f188                 | '                   16 = num-lock state 
3f188                 | '                15..8 = key modifiers state
3f188                 | '                 7..0 = scancode
3f188                 | '------------------------------------------------------------------------------
3f188                 | hkbd_translate
3f188     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3f18c     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3f190     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3f194     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3f198     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3f19c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3f1a0                 | 
3f1a0                 |         if EMUPAD_MAX_PLAYER > 0
3f1a0                 | 
3f1a0                 |         if EMUPAD_BT0_BIT >= 0
3f1a0                 |         end
3f1a0                 |         if EMUPAD_BT1_BIT >= 0
3f1a0                 |         end
3f1a0                 |         if EMUPAD_BT2_BIT >= 0
3f1a0                 |         end
3f1a0                 |         if EMUPAD_BT3_BIT >= 0
3f1a0                 |         end
3f1a0                 |         if EMUPAD_BT4_BIT >= 0
3f1a0                 |         end
3f1a0                 |         if EMUPAD_BT5_BIT >= 0
3f1a0                 |         end
3f1a0                 |         if EMUPAD_BT6_BIT >= 0
3f1a0                 |         end
3f1a0                 |         if EMUPAD_BT7_BIT >= 0
3f1a0                 |         end
3f1a0                 |         if EMUPAD_BT8_BIT >= 0
3f1a0                 |         end
3f1a0                 |         if EMUPAD_BT9_BIT >= 0
3f1a0                 |         end
3f1a0                 | 
3f1a0                 |         end
3f1a0     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3f1a4     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3f1a8     1F 8C 47 F4 |                 bitc    hpar1, #31
3f1ac                 |         if KEYQUEUE_SIZE > 0
3f1ac     C4 09 B0 FE |                 loc pb,#keyq_head
3f1b0     F7 71 E3 FA |                 rdword htmp,pb
3f1b4     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3f1b8     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3f1bc     B8 75 03 F6 |                 mov htmp2,htmp
3f1c0     04 74 07 FA |                 mul htmp2,#4
3f1c4     F7 75 03 F1 |                 add htmp2,pb
3f1c8     02 74 07 F1 |                 add htmp2,#2
3f1cc     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3f1d0     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3f1d4     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
3f1d8     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3f1dc                 |         end
3f1dc     2D 00 7C FD |                 ret wcz
3f1e0                 | 
3f1e0                 | if HAVE_MOUSE
3f1e0                 | '------------------------------------------------------------------------------
3f1e0                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3f1e0                 | '------------------------------------------------------------------------------
3f1e0                 | ' On entry:
3f1e0                 | ' On exit:
3f1e0                 | '------------------------------------------------------------------------------
3f1e0                 | hget_mouse_in_report
3f1e0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3f1e4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3f1e8     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3f1ec     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3f1f0     CF 02 A0 FD |                 call    #do_int_in
3f1f4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f1f8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3f1fc                 | 
3f1fc     00 90 0F F2 |                 cmp     hpar3, #0               wz
3f200     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3f204                 | 
3f204     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3f208     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3f20c     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3f210     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3f214                 | 
3f214     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3f218     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3f21c     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3f220     01 90 87 31 |         if_ae   sub     hpar3, #1
3f224                 | 
3f224     40 09 90 FE |                 loc     pa, #mouse_limits
3f228     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3f22c                 | 
3f22c                 |                 ' load xacc,yacc,zacc
3f22c     28 04 64 FD |                 setq    #3-1
3f230     80 87 07 FB |                 rdlong  hr1,ptrb
3f234                 |                 ' load limits and outptr
3f234     28 04 64 FD |                 setq    #3-1
3f238     F6 73 03 FB |                 rdlong  htmp1,pa
3f23c                 | 
3f23c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3f240     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3f244     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3f248     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3f24c     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3f250     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3f254     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3f258     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3f25c                 |               
3f25c                 | 
3f25c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3f260     07 70 67 F7 |                 signx   htmp, #7
3f264     B8 87 03 F1 |                 add     hr1,htmp
3f268     00 72 0F F2 |                 cmp     htmp1,#0 wz
3f26c     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3f270     00 86 47 53 |         if_ne   fges    hr1,#0
3f274                 | 
3f274     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3f278     07 70 67 F7 |                 signx   htmp, #7
3f27c     B8 89 03 F1 |                 add     hr2,htmp
3f280     00 74 0F F2 |                 cmp     htmp2,#0 wz
3f284     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3f288     00 88 47 53 |         if_ne   fges    hr2,#0
3f28c                 |                 
3f28c                 | 
3f28c     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3f290     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3f294     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3f298     B8 8B 03 A1 |         if_z    add     hr3,htmp
3f29c                 | 
3f29c     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3f2a0     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3f2a4                 | 
3f2a4                 |                 ' write back accumulators
3f2a4     28 04 64 FD |                 setq    #3-1
3f2a8     80 87 67 FC |                 wrlong  hr1,ptrb
3f2ac                 |                 ' if outptr set, write X/Y words
3f2ac     00 76 0F F2 |                 cmp htmp3,#0                    wz
3f2b0     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3f2b4     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
3f2b8     2D 00 64 FD |                 ret
3f2bc                 | end
3f2bc                 | 
3f2bc                 | '------------------------------------------------------------------------------
3f2bc                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3f2bc                 | '------------------------------------------------------------------------------
3f2bc                 | ' On entry:
3f2bc                 | ' On exit:
3f2bc                 | '------------------------------------------------------------------------------
3f2bc                 | if _HAVE_GAMEPAD
3f2bc                 | hget_gp_in_report
3f2bc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3f2c0     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3f2c4                 | 
3f2c4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3f2c8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3f2cc     00 90 E3 F8 |                 getbyte hpar3
3f2d0     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3f2d4     CF 02 A0 FD |                 call    #do_int_in
3f2d8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f2dc     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3f2e0                 | 
3f2e0     00 90 0F F2 |                 cmp     hpar3, #0               wz
3f2e4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3f2e8                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3f2e8                 | 
3f2e8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3f2ec     00 70 E3 F8 |                 getbyte htmp                            ' |
3f2f0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3f2f4     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3f2f8     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3f2fc     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3f300     B8 01 C0 F8 |                 setbyte htmp                            ' |
3f304                 | 
3f304                 | ' Note: the following code compares the current and previous reports
3f304                 | ' and process the data if there are changes to ease the debug output.
3f304                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3f304                 | ' gpPreReport buffer.
3f304                 | 
3f304                 |                 ' ----- start of block to remove
3f304                 |                 {
3f304                 |                 }
3f304                 |                 ' ----- end of block to remove
3f304     F4 04 90 FE |                 loc pa,#hpad_translate
3f308     2A EC 63 FD |                 push pa
3f30c                 | 
3f30c                 |                 ' FALL THROUGH !!!!
3f30c                 | 
3f30c                 | '------------------------------------------------------------------------------
3f30c                 | ' Decode controller report
3f30c                 | '------------------------------------------------------------------------------
3f30c                 | hid_decode
3f30c                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3f30c     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3f310     00 04 00 FF 
3f314     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3f318                 | 
3f318     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3f31c                 | 
3f31c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3f320     00 2A E3 F8 |                 getbyte hidr_type
3f324     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3f328     34 02 90 AD |         if_z    jmp     #hpad_xinput
3f32c     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3f330     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3f334     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3f338     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3f33c     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3f340                 |                 
3f340                 | 
3f340                 | '------------------------------------------------------------------------------
3f340                 | ' Handle HID controller (or mouse now
3f340                 | ' On entry:
3f340                 | '   ptrb - controller report
3f340                 | '------------------------------------------------------------------------------
3f340                 | hpad_hid
3f340     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3f344     F7 F1 03 F6 |                 mov     ptra, pb
3f348     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3f34c     00 EC 03 F6 |                 mov     pa, 0-0
3f350                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3f350     19 2A 3B FF 
3f354     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3f358                 | 
3f358                 | .next
3f358     00 EC 5F F2 |                 cmps    pa, #0      wcz
3f35c     2D 00 7C ED |         if_be   ret     wcz
3f360                 | 
3f360     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3f364     01 EC 87 F1 |                 sub     pa, #1
3f368     00 8E 07 F6 |                 mov     hpar2, #0
3f36c                 | 
3f36c     C6 71 03 F6 |                 mov     htmp, hpar1
3f370     03 70 07 F5 |                 and     htmp, #$03
3f374     01 70 0F F2 |                 cmp     htmp, #1    wz
3f378     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3f37c     07 8E 67 A7 |         if_z    signx   hpar2,#7
3f380     01 EC 87 A1 |         if_z    sub     pa, #1
3f384     02 70 0F F2 |                 cmp     htmp, #2    wz
3f388     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3f38c     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3f390     02 EC 87 A1 |         if_z    sub     pa, #2
3f394     03 70 0F F2 |                 cmp     htmp, #3    wz
3f398     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3f39c     04 EC 87 A1 |         if_z    sub     pa, #4
3f3a0                 | 
3f3a0     FC 8C 07 F5 |                 and     hpar1, #$FC
3f3a4                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3f3a4                 | 
3f3a4     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3f3a8     0C 01 90 AD |         if_z    jmp     #.report_id
3f3ac     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3f3b0     24 01 90 AD |         if_z    jmp     #.usage_page
3f3b4     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3f3b8     2C 01 90 AD |         if_z    jmp     #.usage
3f3bc     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3f3c0     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3f3c4     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3f3c8     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3f3cc     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3f3d0     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3f3d4     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3f3d8     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3f3dc     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3f3e0     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3f3e4     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3f3e8     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3f3ec     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3f3f0     64 FF 9F 5D |         if_nz   jmp     #.next
3f3f4                 | 
3f3f4     D8 1D A7 FB |                 tjf     hidr_state,#.next
3f3f8                 | 
3f3f8     03 8E 07 F5 |                 and     hpar2, #$03
3f3fc     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3f400     18 00 90 5D |         if_nz   jmp     #.skip
3f404                 | 
3f404     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3f408     20 00 90 AD |         if_z    jmp     #.axes
3f40c     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3f410     5C 00 90 AD |         if_z    jmp     #.hats
3f414     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3f418     70 00 90 AD |         if_z    jmp     #.buttons
3f41c                 | .skip
3f41c     8F 71 03 F6 |                 mov     htmp, hidr_size
3f420     90 71 03 FA |                 mul     htmp, hidr_count
3f424     B8 23 03 F1 |                 add     hidr_offset, htmp
3f428     2C FF 9F FD |                 jmp     #.next
3f42c                 | .axes
3f42c                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3f42c     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3f430     90 87 03 F6 |                 mov     hr1, hidr_count
3f434                 | .l1
3f434     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3f438     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3f43c     04 03 B0 FD |                 call    #hpad_getbits
3f440     64 03 B0 FD |                 call    #hpad_normalize
3f444     06 84 1F F2 |                 cmp     hr0, #6         wcz
3f448     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3f44c     00 88 43 C8 |         if_b    getnib  hr2
3f450     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3f454     5F 01 20 C9 |         if_b    setword retval
3f458     01 84 07 C1 |         if_b    add     hr0, #1
3f45c     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3f460     F4 87 6F FB |                 djnz    hr1, #.l1
3f464                 | 
3f464     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3f468     01 1C 07 F6 |                 mov     hidr_state, #1
3f46c     E8 FE 9F FD |                 jmp     #.next
3f470                 | .hats
3f470                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3f470     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3f474     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3f478     C8 02 B0 FD |                 call    #hpad_getbits
3f47c     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3f480     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3f484     01 1C 07 F6 |                 mov     hidr_state, #1
3f488     90 FF 9F FD |                 jmp     #.skip
3f48c                 | .buttons
3f48c                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3f48c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3f490     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3f494     90 8F 03 FA |                 mul     hpar2, hidr_count
3f498     A8 02 B0 FD |                 call    #hpad_getbits
3f49c     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3f4a0     B8 BF 62 F0 |                 shl     retval, htmp
3f4a4     5F 17 43 F5 |                 or      hidr_buttons, retval
3f4a8     90 71 03 F1 |                 add     htmp, hidr_count
3f4ac     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3f4b0     01 1C 07 F6 |                 mov     hidr_state, #1
3f4b4     64 FF 9F FD |                 jmp     #.skip
3f4b8                 | .report_id
3f4b8     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3f4bc     2D 00 7C 5D |         if_nz   ret     wcz
3f4c0     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3f4c4     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3f4c8     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3f4cc     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3f4d0     01 F2 87 51 |         if_nz   sub     ptrb,#1
3f4d4     80 FE 9F FD |                 jmp     #.next
3f4d8                 | .usage_page
3f4d8     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3f4dc     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3f4e0     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3f4e4     70 FE 9F FD |                 jmp     #.next
3f4e8                 | .usage
3f4e8     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3f4ec     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3f4f0     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3f4f4     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3f4f8     5C FE 9F AD |         if_z    jmp     #.next
3f4fc     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3f500     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3f504     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3f508     4C FE 9F AD |         if_z    jmp     #.next
3f50c     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3f510     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3f514     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3f518     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3f51c     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3f520     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3f524     10 00 90 AD |         if_z    jmp     #.usage_axis
3f528     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3f52c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3f530     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3f534     20 FE 9F FD |                 jmp     #.next
3f538                 | .usage_axis
3f538     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3f53c     18 FE 9F CD |         if_b    jmp     #.next
3f540     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3f544     C7 01 00 F8 |                 setnib  hpar2
3f548                 | 
3f548     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3f54c     C7 8F C3 F9 |                 decod   hpar2
3f550     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3f554                 | 
3f554     01 24 07 F1 |                 add     hidr_usage_idx, #1
3f558     02 1C 07 F6 |                 mov     hidr_state, #2
3f55c     F8 FD 9F FD |                 jmp     #.next
3f560                 | 
3f560                 | '------------------------------------------------------------------------------
3f560                 | ' Handle XInput controller
3f560                 | ' On entry:
3f560                 | '   ptrb - controller report
3f560                 | '------------------------------------------------------------------------------
3f560                 | '   Default implementation translates the report to a pseudo-defacto hid
3f560                 | '   standard and jumps to hpad_translate for actions.
3f560                 | '   Implementors may take specific actions for this kind of controller.
3f560                 | '------------------------------------------------------------------------------
3f560                 | hpad_xinput
3f560     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3f564     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3f568     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3f56c     14 70 0F F2 |                 cmp     htmp, #$14      wz
3f570     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3f574                 | 
3f574                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3f574                 | 
3f574     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3f578     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3f57c                 | 
3f57c     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3f580     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3f584     5F BF 22 F6 |                 not     retval
3f588     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3f58c     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3f590     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3f594     5F BF 22 F6 |                 not     retval
3f598     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3f59c                 | 
3f59c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3f5a0     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3f5a4     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3f5a8     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3f5ac     F8 01 B0 FD |                 call    #hpad_normalize
3f5b0     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3f5b4     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3f5b8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3f5bc     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3f5c0     E4 01 B0 FD |                 call    #hpad_normalize
3f5c4     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3f5c8                 | 
3f5c8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3f5cc     81 BF E6 FA |                 rdword  retval, ptrb[1]
3f5d0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3f5d4     00 16 47 F4 |                 bitc    hidr_buttons, #0
3f5d8     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3f5dc     01 16 47 F4 |                 bitc    hidr_buttons, #1
3f5e0     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3f5e4     02 16 47 F4 |                 bitc    hidr_buttons, #2
3f5e8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3f5ec     03 16 47 F4 |                 bitc    hidr_buttons, #3
3f5f0     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3f5f4     04 16 47 F4 |                 bitc    hidr_buttons, #4
3f5f8     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3f5fc     05 16 47 F4 |                 bitc    hidr_buttons, #5
3f600     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3f604     08 16 47 F4 |                 bitc    hidr_buttons, #8
3f608     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3f60c     09 16 47 F4 |                 bitc    hidr_buttons, #9
3f610     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3f614     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3f618     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3f61c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3f620     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3f624     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3f628                 | 
3f628     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3f62c     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3f630     7A BB 7A FF 
3f634     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3f638     F9 FF 7F FF 
3f63c     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3f640     B9 71 5F F9 |                 altgn   htmp, #htmp1
3f644     00 70 43 F8 |                 getnib  htmp
3f648     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3f64c                 | 
3f64c     AC 01 90 FD |                 jmp     #hpad_translate
3f650                 | 
3f650                 | '------------------------------------------------------------------------------
3f650                 | ' Handle PS3 controller
3f650                 | ' On entry:
3f650                 | '   ptrb - controller report
3f650                 | '------------------------------------------------------------------------------
3f650                 | '   Default implementation translates the report to a pseudo-defacto hid
3f650                 | '   standard and jumps to hpad_translate for actions.
3f650                 | '   Implementors may take specific actions for this kind of controller.
3f650                 | '------------------------------------------------------------------------------
3f650                 | hpad_ps3
3f650     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3f654     01 70 0F F2 |                 cmp     htmp, #$01      wz
3f658     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3f65c                 | 
3f65c                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3f65c                 | 
3f65c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3f660     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3f664     40 01 B0 FD |                 call    #hpad_normalize
3f668     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3f66c     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3f670     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3f674     30 01 B0 FD |                 call    #hpad_normalize
3f678     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3f67c     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3f680     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3f684     20 01 B0 FD |                 call    #hpad_normalize
3f688     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3f68c     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3f690     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3f694     10 01 B0 FD |                 call    #hpad_normalize
3f698     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3f69c     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3f6a0     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3f6a4                 | 
3f6a4     08 8C 07 F6 |                 mov     hpar1, #8
3f6a8     13 8E 07 F6 |                 mov     hpar2, #19
3f6ac     94 00 B0 FD |                 call    #hpad_getbits
3f6b0                 | 
3f6b0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3f6b4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3f6b8     00 16 47 F4 |                 bitc    hidr_buttons, #0
3f6bc     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3f6c0     01 16 47 F4 |                 bitc    hidr_buttons, #1
3f6c4     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3f6c8     02 16 47 F4 |                 bitc    hidr_buttons, #2
3f6cc     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3f6d0     03 16 47 F4 |                 bitc    hidr_buttons, #3
3f6d4     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3f6d8     04 16 47 F4 |                 bitc    hidr_buttons, #4
3f6dc     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3f6e0     05 16 47 F4 |                 bitc    hidr_buttons, #5
3f6e4     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3f6e8     06 16 47 F4 |                 bitc    hidr_buttons, #6
3f6ec     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3f6f0     07 16 47 F4 |                 bitc    hidr_buttons, #7
3f6f4     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3f6f8     08 16 47 F4 |                 bitc    hidr_buttons, #8
3f6fc     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3f700     09 16 47 F4 |                 bitc    hidr_buttons, #9
3f704     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3f708     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3f70c     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3f710     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3f714     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3f718     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3f71c                 | 
3f71c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3f720     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3f724     09 FA 79 FF 
3f728     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3f72c     FF FA 7F FF 
3f730     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3f734     B9 71 5F F9 |                 altgn   htmp, #htmp1
3f738     00 70 43 F8 |                 getnib  htmp
3f73c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3f740                 | 
3f740     B8 00 90 FD |                 jmp     #hpad_translate
3f744                 | 
3f744                 | '------------------------------------------------------------------------------
3f744                 | ' Read bits from report data buffer
3f744                 | '------------------------------------------------------------------------------
3f744                 | ' On entry:
3f744                 | '   PTRB - report buffer
3f744                 | '   hpar1 - start bit
3f744                 | '   hpar2 - number of bits
3f744                 | ' On exit:
3f744                 | '   retval - bits
3f744                 | '------------------------------------------------------------------------------
3f744                 | hpad_getbits
3f744     C6 71 03 F6 |                 mov     htmp, hpar1
3f748     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3f74c     F9 71 03 F1 |                 add     htmp, ptrb
3f750     B8 BF 02 FB |                 rdlong  retval, htmp
3f754                 | 
3f754     C6 73 03 F6 |                 mov     htmp1, hpar1
3f758     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3f75c     B9 BF 42 F0 |                 shr     retval, htmp1
3f760                 | 
3f760     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3f764     10 00 90 1D |         if_a    jmp     #.l1
3f768                 | 
3f768     C7 8F C3 F9 |                 decod   hpar2
3f76c     01 8E 87 F1 |                 sub     hpar2, #1
3f770     C7 BF 02 F5 |                 and     retval, hpar2
3f774     2D 00 64 FD |                 ret
3f778                 | .l1
3f778     FF 7F 00 FF 
3f77c     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3f780     03 70 07 F1 |                 add     htmp, #3
3f784     B8 75 03 FB |                 rdlong  htmp2, htmp
3f788     18 8E 87 F1 |                 sub     hpar2, #24
3f78c     C7 8F C3 F9 |                 decod   hpar2
3f790     01 8E 87 F1 |                 sub     hpar2, #1
3f794     B9 75 43 F0 |                 shr     htmp2, htmp1
3f798     C7 75 03 F5 |                 and     htmp2, hpar2
3f79c     18 74 67 F0 |                 shl     htmp2, #24
3f7a0     BA BF 42 F5 |                 or      retval, htmp2
3f7a4     2D 00 64 FD |                 ret
3f7a8                 | 
3f7a8                 | '------------------------------------------------------------------------------
3f7a8                 | ' Normalize value to signed word (-32768 / 32767)
3f7a8                 | '------------------------------------------------------------------------------
3f7a8                 | ' On entry:
3f7a8                 | '   retval - value to normalize
3f7a8                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3f7a8                 | '   - or -
3f7a8                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3f7a8                 | '   hidr_size - value bits length
3f7a8                 | ' On exit:
3f7a8                 | '   retval - normalized value
3f7a8                 | '------------------------------------------------------------------------------
3f7a8                 | hpad_normalize
3f7a8     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3f7ac     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3f7b0     2D 00 64 AD |         if_z    ret
3f7b4     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3f7b8     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3f7bc     0F 72 77 F7 |                 signx   htmp1, #15      wc
3f7c0     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3f7c4     00 BE 66 C7 |         if_c    signx   retval, #0-0
3f7c8     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3f7cc     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3f7d0     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3f7d4     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3f7d8     B8 71 53 F6 |                 abs     htmp            wc
3f7dc     1F BE 0E F4 |                 testb   retval, #31     wz
3f7e0     5F BF 42 F6 |                 abs     retval
3f7e4     B8 BF 12 FD |                 qdiv    retval, htmp
3f7e8     18 BE 62 FD |                 getqx   retval
3f7ec     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3f7f0     C0 FF 7F FF 
3f7f4     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3f7f8     2D 00 64 FD |                 ret
3f7fc                 | 
3f7fc                 | '------------------------------------------------------------------------------
3f7fc                 | ' Perform controller actions
3f7fc                 | ' On entry:
3f7fc                 | '    hidr_id        report id
3f7fc                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3f7fc                 | '                      X = hidr_axis+0, #0
3f7fc                 | '                      Y = hidr_axis+0, #1
3f7fc                 | '                      Z = hidr_axis+1, #0
3f7fc                 | '                     RX = hidr_axis+1, #1
3f7fc                 | '                     RY = hidr_axis+2, #0
3f7fc                 | '                     RZ = hidr_axis+2, #1
3f7fc                 | '    hidr_buttons   buttons state (bits 0 to 31)
3f7fc                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3f7fc                 | '
3f7fc                 | '                     -------3 -------2 -------1 -------0 byte
3f7fc                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3f7fc                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3f7fc                 | '                                zyx||| |||||||| ++++++++ n. buttons
3f7fc                 | '                                |||||| ||||++++--------- n. axes
3f7fc                 | '                                |||||| ++++------------- n. hats
3f7fc                 | '                                ++++++------------------ valid axes
3f7fc                 | '------------------------------------------------------------------------------
3f7fc                 | hpad_translate
3f7fc                 | 
3f7fc                 | 
3f7fc                 |         if HAVE_HIDPAD
3f7fc     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3f800     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3f804     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3f808     01 70 E7 F2 |                 cmpsub  htmp,#1
3f80c     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3f810     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3f814     2D 00 7C 3D |         if_ae   ret     wcz
3f818     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3f81c     B8 F3 03 F1 |                 add     ptrb,htmp
3f820     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3f824     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3f828     28 0C 64 FD |                 setq    #7-1
3f82c     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3f830                 |         end
3f830                 | 
3f830                 | 
3f830                 |         if EMUPAD_MAX_PLAYER > 0
3f830                 | .emupad_no_hat
3f830                 |         if EMUPAD_BT0_BIT >= 0
3f830                 |         end
3f830                 |         if EMUPAD_BT1_BIT >= 0
3f830                 |         end
3f830                 |         if EMUPAD_BT2_BIT >= 0
3f830                 |         end
3f830                 |         if EMUPAD_BT3_BIT >= 0
3f830                 |         end
3f830                 |         if EMUPAD_BT4_BIT >= 0
3f830                 |         end
3f830                 |         if EMUPAD_BT5_BIT >= 0
3f830                 |         end
3f830                 |         if EMUPAD_BT6_BIT >= 0
3f830                 |         end
3f830                 |         if EMUPAD_BT7_BIT >= 0
3f830                 |         end
3f830                 |         if EMUPAD_BT8_BIT >= 0
3f830                 |         end
3f830                 |         if EMUPAD_BT9_BIT >= 0
3f830                 |         end
3f830                 | .emupad_slot_over
3f830                 |         end
3f830                 | 
3f830                 |         if 0
3f830                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3f830                 | 
3f830                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3f830                 | 
3f830                 |         end
3f830     2D 00 64 FD |                 ret
3f834                 | end
3f834                 | 
3f834                 | if EMUPAD_MAX_PLAYER > 0
3f834                 | '------------------------------------------------------------------------------
3f834                 | ' Clear EmuPad state
3f834                 | '------------------------------------------------------------------------------
3f834                 | emupad_reset
3f834                 | 
3f834                 | '------------------------------------------------------------------------------
3f834                 | ' Get EmuPad Player number for current device (into retval)
3f834                 | ' Z flag is also set if current device is valid
3f834                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3f834                 | '------------------------------------------------------------------------------
3f834                 | emupad_getnum
3f834                 | .loop
3f834                 | '------------------------------------------------------------------------------
3f834                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3f834                 | '------------------------------------------------------------------------------
3f834                 | emupad_discon
3f834                 | .loop         
3f834                 |         
3f834                 |         ' FALL THROUGH!!!
3f834                 | 
3f834                 | '------------------------------------------------------------------------------
3f834                 | ' Update EmuPad reports (all of them...)
3f834                 | '------------------------------------------------------------------------------
3f834                 | emupad_write_reports
3f834                 | .devloop
3f834                 | 
3f834                 | end
3f834                 | 
3f834                 | 
3f834                 | '------------------------------------------------------------------------------
3f834                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3f834                 | '------------------------------------------------------------------------------
3f834                 | ' On entry:
3f834                 | ' On exit:
3f834                 | '------------------------------------------------------------------------------
3f834                 | hget_hub_status
3f834     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3f838     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3f83c     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3f840     01 90 2F F9 |                 setword hpar3, #1, #1
3f844     CF 02 A0 FD |                 call    #do_int_in
3f848     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f84c     0C 00 90 AD |         if_z    jmp     #.data
3f850     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3f854     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3f858     2D 00 64 FD |                 ret
3f85c                 | .data
3f85c     00 90 0F F2 |                 cmp     hpar3, #0               wz
3f860     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3f864                 | 
3f864     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3f868     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3f86c     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3f870     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3f874                 |                 debug(ubin_long(hub_status_chg))
3f874                 | 
3f874     01 5A 06 F6 |                 mov     hdev_port, #1
3f878                 | .loop
3f878     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3f87c     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3f880     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3f884     F0 FF 9F 3D |         if_nc   jmp     #.loop
3f888     2D 00 64 FD |                 ret
3f88c                 | 
3f88c                 | hub_port_handler
3f88c     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3f890     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3f894     27 EF 03 F6 |                 mov     pb, urx_buff_p
3f898     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f89c     55 02 A0 FD |                 call    #control_read
3f8a0     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3f8a4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3f8a4                 | 
3f8a4     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3f8a8     50 01 90 5D |         if_x0   jmp     #.other
3f8ac     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3f8b0     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3f8b4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f8b8     A0 02 A0 FD |                 call    #control_write
3f8bc     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3f8c0     7C 01 90 5D |         if_x0   jmp     #.disconnect
3f8c4     B0 99 02 F6 |                 mov     hctwait, _100ms_
3f8c8     EF 02 A0 FD |                 call    #poll_waitx
3f8cc                 | 
3f8cc     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3f8d0     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3f8d4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f8d8     A0 02 A0 FD |                 call    #control_write
3f8dc                 | 
3f8dc     02 76 07 F6 |                 mov     htmp3, #2
3f8e0                 | .wait_reset
3f8e0     AC 99 02 F6 |                 mov     hctwait, _8ms_
3f8e4     EF 02 A0 FD |                 call    #poll_waitx
3f8e8     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3f8ec     27 EF 03 F6 |                 mov     pb, urx_buff_p
3f8f0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f8f4     55 02 A0 FD |                 call    #control_read
3f8f8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3f8fc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3f900     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3f904                 | 
3f904     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3f908     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3f90c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f910     A0 02 A0 FD |                 call    #control_write
3f914                 | 
3f914     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3f918                 | .wait_recover
3f918     A7 99 02 F6 |                 mov     hctwait, _1ms_
3f91c     EF 02 A0 FD |                 call    #poll_waitx
3f920     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3f924                 | 
3f924     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3f928     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3f92c     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3f930                 | 
3f930     00 08 00 FF 
3f934     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3f938     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3f93c     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3f940     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3f944     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3f948     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f94c     48 01 90 5D |         if_nz   jmp     #.done
3f950                 | .get_dev_desc
3f950     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3f954     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3f958     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3f95c     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3f960     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3f964     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3f968     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3f96c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f970     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3f974     AC 99 02 F6 |                 mov     hctwait, _8ms_
3f978     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3f97c     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3f980     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3f984     BE 00 A0 FD |                 call    #calc_crc5
3f988     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3f98c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3f990     F7 AD C2 FA |                 rdbyte  total_data, pb
3f994     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3f998     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3f99c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f9a0     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3f9a4     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3f9a8     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3f9ac                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3f9ac     9F 99 02 F6 |                 mov     hctwait, _500us_
3f9b0     EF 02 A0 FD |                 call    #poll_waitx
3f9b4     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3f9b8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3f9bc     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3f9c0     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3f9c4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f9c8     CC 00 90 5D |         if_nz   jmp     #.done
3f9cc     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3f9d0     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3f9d4     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3f9d8     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3f9dc     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3f9e0     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3f9e4     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3f9e8     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3f9ec     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3f9f0     A4 00 90 CD |         if_b    jmp     #.done
3f9f4     70 F0 BF FD |                 call    #hparse_con_desc
3f9f8     9C 00 90 FD |                 jmp     #.done
3f9fc                 | 
3f9fc                 | .other
3f9fc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3fa00     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3fa04     28 00 90 AD |         if_x1   jmp     #.reset_feature
3fa08     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3fa0c     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3fa10     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3fa14     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3fa18     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3fa1c     10 00 90 AD |         if_x1   jmp     #.reset_feature
3fa20     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3fa24     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3fa28     04 00 90 AD |         if_x1   jmp     #.reset_feature
3fa2c     68 00 90 FD |                 jmp     #.done
3fa30                 | .reset_feature
3fa30     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3fa34     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fa38     A0 02 A0 FD |                 call    #control_write
3fa3c     58 00 90 FD |                 jmp     #.done
3fa40                 | .disconnect
3fa40                 | 
3fa40     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3fa44     00 70 E3 F8 |                 getbyte htmp
3fa48     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3fa4c     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3fa50     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3fa54     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3fa58     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3fa5c     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3fa60                 |         if EMUPAD_MAX_PLAYER > 0
3fa60                 |         end
3fa60                 |         if HAVE_MOUSE
3fa60     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3fa64     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3fa68     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3fa6c                 |         end
3fa6c                 |         if HAVE_HIDPAD
3fa6c     14 0A F0 FE |                 loc ptrb,#hidpad_report
3fa70     2D 71 03 F6 |                 mov htmp,hdev_port
3fa74     01 70 E7 F2 |                 cmpsub htmp,#1
3fa78     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3fa7c     B8 F3 03 F1 |                 add ptrb,htmp
3fa80     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3fa84     80 01 6C FC |                 wrlong #0,ptrb
3fa88                 |         end
3fa88                 | 
3fa88     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3fa8c     00 00 C4 F8 |                 setbyte #0
3fa90     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3fa94     00 00 04 F6 |                 mov     0-0, #0
3fa98                 | 
3fa98                 | .done
3fa98     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3fa9c     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3faa0     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3faa4     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3faa8     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3faac     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3fab0                 | 
3fab0     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3fab4     27 EF 03 F6 |                 mov     pb, urx_buff_p
3fab8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fabc     55 02 A0 FD |                 call    #control_read
3fac0     00 69 06 FB |                 rdlong  hub_port_status, ptra
3fac4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3fac4     2D 00 64 FD |                 ret
3fac8                 | 
3fac8                 | '------------------------------------------------------------------------------
3fac8                 | ' Partially populated SETUP packets
3fac8                 | '------------------------------------------------------------------------------
3fac8     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3fac9     06          |                 byte    REQ_GET_DESC
3faca     00 01       |                 word    TYPE_DEVICE << 8
3facc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3face     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fad0     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3fad1     06          |                 byte    REQ_GET_DESC
3fad2     00 02       |                 word    TYPE_CONFIG << 8
3fad4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3fad6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fad8     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3fad9     09          |                 byte    REQ_SET_CONFIG
3fada     00 00       |                 word    0       ' Configuration value
3fadc     00 00       |                 word    0       ' Zero
3fade     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3fae0     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3fae1     05          |                 byte    REQ_SET_ADDR
3fae2     00 00       |                 word    0       ' Zero
3fae4     00 00       |                 word    0       ' Zero
3fae6     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3fae8                 | '------------------------------------------------------------------------------
3fae8                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3fae8                 | ' wValue field dictates which protocol should be used.
3fae8                 | '
3fae8                 | ' When initialized, all devices default to report protocol. However the host
3fae8                 | ' should not make any assumptions about the device state and should set the
3fae8                 | ' desired protocol whenever initializing a device.
3fae8                 | '------------------------------------------------------------------------------
3fae8     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3fae9     0B          |                 byte    HID_SET_PROTO
3faea     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3faec                 |                                                 ' (HID 1.11 Section 7.2.6).
3faec     00 00       |                 word    0               ' Interface index number.
3faee     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3faf0                 | '------------------------------------------------------------------------------
3faf0     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3faf1     0A          |                 byte    HID_SET_IDLE
3faf2     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3faf4                 |                                         ' reporting until a change is detected in the report data
3faf4                 | 
3faf4                 |                                         ' (HID 1.11 Section 7.2.4).
3faf4     00 00       |                 word    0       ' Interface index number.
3faf6     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3faf8     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3faf9     09          |                 byte    HID_SET_REPORT
3fafa     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3fafc                 |                                         ' (HID 1.11 Section 7.2.2).
3fafc     00 00       |                 word    0       ' Interface index number.
3fafe     00 00       |                 word    0       ' Size of the report, in bytes.
3fb00     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3fb01     06          |                 byte    REQ_GET_DESC
3fb02     00 22       |                 word    TYPE_REPORT << 8
3fb04     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3fb06     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fb08                 | '------------------------------------------------------------------------------
3fb08     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3fb09     06          |                 byte    REQ_GET_DESC
3fb0a     00 29       |                 word    TYPE_HUB << 8
3fb0c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3fb0e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fb10     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3fb11     03          |                 byte    REQ_SET_FEATURE
3fb12     00 00       |                 word    0       ' port power
3fb14     01 00       |                 word    1       ' Port index number (1+)
3fb16     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fb18     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3fb19     01          |                 byte    REQ_CLEAR_FEATURE
3fb1a     00 00       |                 word    0       ' port power
3fb1c     01 00       |                 word    1       ' Port index number (1+)
3fb1e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fb20     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3fb21     00          |                 byte    REQ_GET_STATUS
3fb22     00 00       |                 word    0
3fb24     01 00       |                 word    1       ' Port index number (1+)
3fb26     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3fb28                 | '------------------------------------------------------------------------------
3fb28                 | if _HAVE_GAMEPAD
3fb28     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3fb2c                 | ps3_command_buff
3fb2c     00 00 00 00 
3fb30     00          |                 byte    $00, $00, $00, $00, $00
3fb31     00 00 00 00 
3fb35     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3fb36     FF 27 10 00 
3fb3a     32          |                 byte    $FF, $27, $10, $00, $32
3fb3b     FF 27 10 00 
3fb3f     32          |                 byte    $FF, $27, $10, $00, $32
3fb40     FF 27 10 00 
3fb44     32          |                 byte    $FF, $27, $10, $00, $32
3fb45     FF 27 10 00 
3fb49     32          |                 byte    $FF, $27, $10, $00, $32
3fb4a     00 00 00 00 
3fb4e     00          |                 byte    $00, $00, $00, $00, $00
3fb4f     00 00 00 00 
3fb53     00          |                 byte    $00, $00, $00, $00, $00
3fb54     00 00 00 00 
3fb58     00          |                 byte    $00, $00, $00, $00, $00
3fb59     00 00 00    |                 byte    $00, $00, $00
3fb5c                 | '------------------------------------------------------------------------------
3fb5c     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3fb5f                 |                                         ' 0x01 All blinking
3fb5f                 |                                         ' 0x02 1 flashes, then on
3fb5f                 |                                         ' 0x03 2 flashes, then on
3fb5f                 |                                         ' 0x04 3 flashes, then on
3fb5f                 |                                         ' 0x05 4 flashes, then on
3fb5f                 |                                         ' 0x06 1 on
3fb5f                 |                                         ' 0x07 2 on
3fb5f                 |                                         ' 0x08 3 on
3fb5f                 |                                         ' 0x09 4 on
3fb5f                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3fb5f                 |                                         ' 0x0B Blinking*
3fb5f                 |                                         ' 0x0C Slow blinking*
3fb5f                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3fb5f     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3fb62     00          |                 byte    $00             ' Left rumble
3fb63     00          |                 byte    $00             ' Right rumble
3fb64     00 00 00    |                 byte    $00, $00, $00
3fb67     00          | end
3fb68                 | alignl
3fb68                 | 
3fb68                 | if HAVE_MOUSE
3fb68     00 00 00 00 
3fb6c     00 00 00 00 | mouse_limits long 0[2]
3fb70     00 00 00 00 | mouse_outptr long 0
3fb74                 | end
3fb74                 | 
3fb74                 | if KEYQUEUE_SIZE > 0
3fb74     00          | keyq_head byte 0
3fb75     00          | keyq_tail byte 0
3fb76     00 00 00 00 
      ...             
3fd72     00 00 00 00 
3fd76     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3fd78                 | alignl
3fd78                 | end
3fd78                 | 
3fd78                 | if EMUPAD_MAX_PLAYER > 0
3fd78                 | emupad_rule_buffer
3fd78                 | if EMUPAD_BUILTIN_RULES
3fd78                 | file "padmap_builtin.dat"
3fd78                 | end
3fd78                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3fd78                 | '' Default rule directly follows!
3fd78                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3fd78                 | end
3fd78                 | 
3fd78                 | '------------------------------------------------------------------------------
3fd78                 | ' The USB data cache area gets zero-filled at every device disconnect
3fd78                 | '------------------------------------------------------------------------------
3fd78                 | usb_cache_start
3fd78                 | 
3fd78                 | ' HID descriptor and report buffers
3fd78                 | if !!OVERLAP_MEMORY
3fd78     00 00 00 00 
      ...             
40470     00 00 00 00 
40474     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
40478                 | end
40478     00 00 00 00 
4047c     00 00 00 00 | hkbd_report     byte    0[8]
40480     00 00 00 00 | hkbd_led_rep    byte    0
40484                 | alignl
40484                 | 
40484                 | if HAVE_HIDPAD
40484     00 00 00 00 
      ...             
40540     00 00 00 00 
40544     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
40548                 | end
40548                 | 
40548                 | ' HUB descriptor
40548     00          | hub_descr       byte    0   ' bDescLength
40549     00          |                 byte    0   ' bDescriptorType
4054a     00          |                 byte    0   ' bNbrPorts
4054b     00 00       |                 word    0   ' wHubCharacteristics
4054d     00          |                 byte    0   ' bPwrOn2PwrGood
4054e     00          |                 byte    0   ' bHubContrCurrent
4054f     00          |                 byte    0   ' DeviceRemoveable
40550     00          |                 byte    0   ' PortPwrCtrlMask
40551                 | 
40551                 | usb_cache_end
40551                 | 
40551                 | if HAVE_MOUSE
40551     00 00 00 00 | mouse_xacc      long 0
40555     00 00 00 00 | mouse_yacc      long 0
40559     00 00 00 00 | mouse_zacc      long 0
4055d     00          | mouse_bstate    byte 0
4055e     00          | mouse_lpending  byte 0
4055f     00          | mouse_rpending  byte 0
40560     00          | mouse_mpending  byte 0
40561     00          | mouse_lock      byte 0
40562     00 00 00    |                 byte 0[3] ' padding
40565                 | end
40565                 | 
40565     00 00 00 00 
      ...             
405dd     00 00 00 00 
405e1     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
405e5     00 00 00 00 
405e9     00 00 00 00 
405ed     00 00 00 00 
405f1     00 00 00 00 
405f5     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
405f7     00 00 00 00 
      ...             
406ef     00 00 00 00 
406f3     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
406f7                 | 
406f7     00          | driver_cog      byte    0                       ' Current driver cog + 1
406f8                 | 	alignl
406f8                 | _audio096_spin2_dat_
406f8                 | 
406f8                 | audio       org     0
406f8                 | 
406f8     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
406fc     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
40700     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
40704                 |  
40704     01 EC 63 FD |             cogid   pa                   ' compute cogid
40708     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
4070c     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
40710     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
40714                 | 
40714     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
40718     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
4071c     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
40720     0F 24 06 FC |             wrpin   dac2,#right
40724     0F 00 1E FC |             wxpin   #256,#right    
40728     41 9C 64 FD |             dirh    #left addpins 1
4072c     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
40730     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
40734     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
40738                 |             
40738                 | '---------------------------------------------------------------------------------        
40738                 | '----------------- The main loop -------------------------------------------------
40738                 | '---------------------------------------------------------------------------------
40738                 | 
40738     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
4073c     10 00 90 CD |       if_c  jmp     #loop1
40740                 |   
40740     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
40744     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
40748     D5 00 80 F1 |             sub     0-0,a40000000
4074c     FD 01 6E FB |             djnz    cn,#p402
40750                 |     
40750     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
40754     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
40758     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
4075c     01 00 06 C6 |     if_c    mov     cn,#1
40760     DA 02 3A F3 |             fle     ct,time3 wcz
40764     02 00 06 C6 |     if_c    mov     cn,#2     
40768     DB 02 3A F3 |             fle     ct,time4 wcz
4076c     03 00 06 C6 |     if_c    mov     cn,#3
40770     DC 02 3A F3 |             fle     ct,time5 wcz
40774     04 00 06 C6 |     if_c    mov     cn,#4
40778     DD 02 3A F3 |             fle     ct,time6 wcz
4077c     05 00 06 C6 |     if_c    mov     cn,#5
40780     DE 02 3A F3 |             fle     ct,time7 wcz
40784     06 00 06 C6 |     if_c    mov     cn,#6
40788     DF 02 3A F3 |             fle     ct,time8 wcz
4078c     07 00 06 C6 |     if_c    mov     cn,#7
40790                 | 
40790                 | 
40790                 | '----------------------------------------------------------------------------------
40790                 | '------------- Compute channel samples --------------------------------------------
40790                 | '----------------------------------------------------------------------------------
40790                 | 
40790                 | 
40790     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
40794     06 C0 65 F0 |             shl     channeladd,#6
40798     E0 F0 03 F1 |             add     ptra,channeladd
4079c                 | 
4079c     28 16 64 FD |             setq    #11                        	' read parameters
407a0     00 D7 05 FB |             rdlong  pointer0,ptra
407a4                 |     	    
407a4     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
407a8     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
407ac     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
407b0     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
407b4     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
407b8     00 C4 0D F2 |             cmp     qq,#0 wz                         
407bc     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
407c0     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
407c4                 |             
407c4     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
407c8     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
407cc     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
407d0                 | 
407d0     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
407d4     EC 08 3A F9 |             getword oldrs,sample0,#1
407d8     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
407dc     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
407e0     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
407e4     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
407e8                 | 
407e8     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
407ec     00 04 02 F6 |             mov     dt0,0-0    
407f0     D7 04 82 F1 |             sub     dt0,time0
407f4                 |             
407f4     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
407f8     FB 00 00 F1 |             add     0-0,afreq0  	
407fc                 |             
407fc                 | '---- envelopes
407fc                 |             
407fc     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
40800     20 00 00 AF 
40804     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
40808     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
4080c                 | 
4080c     FB 48 02 F6 |             mov     envs1,afreq0
40810     F5 48 02 FA |             mul     envs1,envspd0
40814     24 E7 01 F1 |             add     envph0,envs1 
40818                 | 
40818     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
4081c     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
40820     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
40824     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
40828     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
4082c     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
40830     00 46 06 36 |     if_ge   mov     envlo,#0
40834     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
40838     16 E6 65 30 |     if_ge   shl     envph0,#22
4083c                 | 
4083c     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
40840     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
40844     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
40848     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
4084c     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
40850     24 49 32 F9 |             getword envs1,envs1,#0		' current value
40854     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
40858     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
4085c     23 49 02 FA |             mul     envs1,envlo
40860     25 49 02 F1 |             add     envs1,envs2
40864     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
40868                 |             
40868     1B DA 0D F4 | p410        testb   sstart0, #27 wz
4086c     1B C6 61 AD |     if_z    getrnd  spl
40870     58 00 90 AD |     if_z    jmp     #p406
40874                 |  
40874     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
40878     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
4087c     08 D6 45 F0 |             shr     pointer0,#8
40880                 |          
40880     1F DA 0D F4 |             testb   sstart0,#31 wz            
40884     01 D6 65 A0 |     if_z    shl     pointer0,#1        
40888     1C DA 0D F4 |             testb   sstart0,#28 wz            
4088c     01 D6 65 A0 |     if_z    shl     pointer0,#1        
40890                 |         
40890     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
40894     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
40898     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
4089c                 |             
4089c     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
408a0     ED C4 01 F1 |             add     qq,sstart0            
408a4                 | 
408a4     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
408a8     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
408ac     1C 01 B0 1D |     if_gt   call    #cache_read
408b0                 |          
408b0     1F DA 0D F4 |             testb   sstart0,#31 wz 
408b4     08 C6 65 50 |     if_nz   shl     spl,#8
408b8     08 D6 65 50 |     if_nz   shl     pointer0,#8
408bc     07 D6 65 A0 |     if_z    shl     pointer0,#7
408c0     1C DA 0D F4 |             testb   sstart0,#28 wz            
408c4     01 D6 45 A0 |     if_z    shr     pointer0,#1    
408c8     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
408cc                 | 
408cc                 | 
408cc     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
408d0     00 C6 01 F6 |             mov     spl,0-0
408d4     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
408d8     00 C6 01 F6 |             mov     spl,0-0
408dc                 | 
408dc     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
408e0     00 0A 02 F6 |             mov     ls0,0-0
408e4     20 00 00 FF 
408e8     00 C4 05 F6 |             mov     qq,##16384
408ec     FE C4 81 F1 |             sub     qq,apan0
408f0     E2 C6 31 FA |             scas    spl,qq
408f4     00 0C 02 F6 |             mov     rs0, 0-0
408f8                 | 
408f8     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
408fc     06 11 02 F1 |             add     rs,rs0
40900     03 0F 82 F1 |             sub     ls,oldls
40904     05 0F 02 F1 |             add     ls,ls0
40908                 |    
40908     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
4090c     05 D9 21 F9 |             setword sample0,ls0,#0
40910                 |             
40910     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
40914     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
40918     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
4091c                 |   '  if_z    mov     sample0,#0
4091c     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
40920     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
40924     04 00 00 AF 
40928     00 B0 05 A1 |     if_z    add     time1,##2048
4092c     D8 B2 01 A6 |     if_z    mov     time2,time1
40930     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
40934                 | 
40934     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
40938     00 D7 65 FC |             wrlong  pointer0,ptra
4093c     08 E7 65 FC |             wrlong  envph0,ptra[8]
40940     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
40944                 |                       
40944     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
40948     FF C3 25 A7 |     if_z    decmod  front, #511          
4094c                 |          
4094c     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
40950     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
40954     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
40958     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
4095c                 | 	    
4095c                 | 		    
4095c     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
40960     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
40964     04 15 02 F6 |             mov     newsample, oldrs       
40968                 | 
40968     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
4096c     02 AF 01 F1 |             add     time0,dt0    
40970                 |                                      
40970     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
40974     D8 FD 9F AD |     if_z    jmp     #loop1
40978     02 C5 01 F6 |             mov     qq,dt0
4097c                 | 
4097c                 |     
4097c                 |             
4097c     01 4E 36 F0 | p301        rol     dropper,#1 wc
40980     40 00 90 3D |     if_nc   jmp     #p399
40984     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
40988     00 C2 9D F2 |             cmpr    front, #0-0 wcz
4098c     F4 FF 9F AD |     if_e    jmp     #p398   
40990                 | 		
40990     00 1A 0E F2 | 	    cmp     scbase,#0 wz
40994     20 00 90 AD |     if_z    jmp     #p302	   
40998                 |   
40998     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
4099c     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
409a0     02 1E 66 C0 |     if_c    shl     scptr2,#2
409a4     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
409a8     60 1E 66 FC |             wrlong  scptr2,#$60
409ac     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
409b0     01 00 00 CF 
409b4     7F 1C 06 C7 |     if_c    incmod  scptr,##639
409b8                 | 			    
409b8     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
409bc     00 00 00 FF 
409c0     FF C3 05 F7 |             incmod  front, ##511
409c4     ED C5 6D FB | p399        djnz    qq,#p301
409c8                 |             
409c8     6C FD 9F FD |             jmp     #loop            'loop
409cc                 | 
409cc                 | '----------------------------------------------------------------------------------
409cc                 | '------------- This is the end of the main loop -----------------------------------
409cc                 | '----------------------------------------------------------------------------------
409cc                 | 
409cc                 | '----------------------------------------------------------------------------------
409cc                 | '------------- PSRAM cache ----------- --------------------------------------------
409cc                 | '----------------------------------------------------------------------------------
409cc                 | 
409cc                 | ' There are 8 cache pointers for 8 channels
409cc                 | ' if 24 higher bits of address=cache, then get a word from the cache
409cc                 | ' else load the cache from PSRAM, update the pointer, then read a sample
409cc                 | 
409cc                 | 
409cc     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
409d0                 |             
409d0     E2 40 02 F6 | 	    mov     addrhi,qq		
409d4     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
409d8     14 01 96 F9 | 	    alts    cn,#cache1            
409dc     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
409e0     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
409e4                 | 	
409e4     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
409e8     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
409ec     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
409f0     08 38 66 F0 | 	    shl     cmd,#8
409f4     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
409f8     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
409fc     08 3A 66 F0 |             shl     hubaddr,#8                  '
40a00     13 3B 02 F1 |             add     hubaddr,hubptr 
40a04     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
40a08     28 04 64 FD |             setq    #2                          ' write 3 longs
40a0c     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
40a10     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
40a14     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
40a18                 |             
40a18                 | 	
40a18     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
40a1c     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
40a20     13 C5 01 F1 | 	    add     qq,hubptr
40a24     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
40a28     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
40a2c                 |           
40a2c                 | 
40a2c                 | '--------------------------------------------------------------------------
40a2c                 | '------ Interrupt service -------------------------------------------------
40a2c                 | '------ Output the sample, get the next one if exists ---------------------
40a2c                 | '--------------------------------------------------------------------------
40a2c                 | 
40a2c     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
40a30     0F D0 25 FC |             wypin   rsample,#right       '4
40a34     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
40a38     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
40a3c     FF F3 07 57 |     if_ne   incmod  ptrb,#511
40a40     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
40a44     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
40a48                 |     
40a48     F5 FF 3B FB |             reti1                        '17/19 
40a4c                 |           
40a4c                 | '---------------------------------------------------------------------------
40a4c                 | '-------- End of interrupt -------------------------------------------------
40a4c                 | '---------------------------------------------------------------------------    
40a4c                 | 
40a4c                 | 
40a4c                 | '---------------------------------------------------------------------------
40a4c                 | '------- Variables ---------------------------------------------------------
40a4c                 | '---------------------------------------------------------------------------
40a4c                 | 
40a4c                 | ' constants
40a4c                 | 
40a4c     00 00 00 40 | a40000000   long $40000000
40a50     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
40a54                 | 
40a54                 | ' Time variables
40a54                 | 
40a54     00 00 00 00 | time0       long 0    ' Global sample computing time
40a58     01 00 00 00 | time1       long 1    ' Local channels time
40a5c     02 00 00 00 | time2       long 2
40a60     03 00 00 00 | time3       long 3
40a64     04 00 00 00 | time4       long 4
40a68     05 00 00 00 | time5       long 5
40a6c     06 00 00 00 | time6       long 6
40a70     07 00 00 00 | time7       long 7
40a74     08 00 00 00 | time8       long 8
40a78                 | 
40a78     00 00 00 00 | channeladd long 0
40a7c                 | 
40a7c     00 00 00 00 | front       long 0
40a80                 | 
40a80                 | ' temporary variables 
40a80     00 00 00 00 | qq          long 0
40a84     00 00 00 00 | spl         long 0
40a88     00 00 00 00 | zero        long 0
40a8c     00 00 00 00 | mailbox     long 0
40a90     00 00 00 00 | mailbox2 long 0
40a94                 | 
40a94                 | ' Interrupt ISR variables
40a94                 | 
40a94     00 00 00 00 | lsample     long 0
40a98     00 00 00 00 | rsample     long 0
40a9c     00 00 00 00 | lsnext      long 0
40aa0     00 00 00 00 | rsnext      long 0 
40aa4                 | 
40aa4                 | ' channel parameter block
40aa4                 | 
40aa4     00 00 00 00 | pointer0    long 0     
40aa8     00 00 00 00 | sample0     long 0
40aac     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
40ab0     00 00 00 00 | lstart0     long 0
40ab4     00 00 00 00 | lend0       long 0
40ab8     00 00 00 00 | volpan0     long 0
40abc     00 00 00 00 | freqskip0   long 0
40ac0     00 00 00 00 | command0    long 0
40ac4     00 00 00 00 | envph0	    long 0
40ac8     00 00 00 00 | envptr0	    long 0
40acc     00 00 00 00 | envspd0	    long 0
40ad0     00 00 00 00 | envlen0	    long 0
40ad4     00 00 00 00 | res5	    long 0
40ad8     00 00 00 00 | res6	    long 0
40adc     00 00 00 00 | res7	    long 0
40ae0     00 00 00 00 | res8	    long 0
40ae4                 | 
40ae4     00 00 00 00 | afreq0      long 0
40ae8     00 00 00 00 | askip0      long 0
40aec     00 00 00 00 | avol0       long 0
40af0     00 00 00 00 | apan0       long 0
40af4                 | 
40af4     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
40af8     00 00 00 00 | cn          long 0
40afc     00 00 00 00 | ct          long 0
40b00     00 00 00 00 | dt0         long 0
40b04                 | 
40b04                 | ' Samples
40b04     00 00 00 00 | oldls       long 0
40b08     00 00 00 00 | oldrs       long 0
40b0c                 | 
40b0c     00 00 00 00 | ls0         long 0
40b10     00 00 00 00 | rs0         long 0
40b14                 | 
40b14     00 00 00 00 | ls          long 0    
40b18     00 00 00 00 | rs          long 0
40b1c                 | 
40b1c     00 00 00 00 | oldsample   long 0
40b20     00 00 00 00 | newsample   long 0
40b24                 | 
40b24     00 00 00 00 | nrsample    long 0
40b28     00 00 00 00 | nlsample    long 0
40b2c                 | 
40b2c     00 00 00 00 | scbase long 0
40b30     00 00 00 00 | scptr long 0
40b34     00 00 00 00 | scptr2 long 0
40b38     00 00 00 00 | scope long 0
40b3c                 | 
40b3c     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
40b40     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
40b44                 | 
40b44     00 18 07 00 | hubptr      long $71800
40b48     00 00 00 00 | cache1      long 0
40b4c     00 00 00 00 | cache2      long 0
40b50     00 00 00 00 | cache3      long 0
40b54     00 00 00 00 | cache4      long 0
40b58     00 00 00 00 | cache5      long 0
40b5c     00 00 00 00 | cache6      long 0
40b60     00 00 00 00 | cache7      long 0
40b64     00 00 00 00 | cache8      long 0
40b68                 | 
40b68                 | 
40b68     00 00 00 00 | cmd         long 0
40b6c     00 00 00 00 | hubaddr     long 0
40b70     00 01 00 00 | count       long 256
40b74     00 00 00 00 | addrlo long 0
40b78     00 00 00 00 | addrhi long 0
40b7c     00 00 00 00 | pointer00 long 0
40b80     00 00 00 00 | envhi long 0
40b84     00 00 00 00 | envlo long 0
40b88     00 00 00 00 | envs1 long 0
40b8c     00 00 00 00 | envs2 long 0
40b90     00 00 00 00 | noise0 long 0
40b94     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
40b98     00 00 00 00 
40b9c     00 00 00 00 | null  			long 	0,0           ' for channel reset
40ba0                 | 	alignl
40ba0                 | __system__dat_
40ba0     00 00 00 00 
40ba4     00 00 00 00 | 	byte	$00[8]
40ba8     03 00 00 00 
40bac     00 00 00 00 
40bb0     00 00 00 00 
40bb4     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
40bb8     00 00 00 00 
      ...             
40e44     00 00 00 00 
40e48     00 00 00 00 | 	byte	$00[660]
40e4c     00 00 70 0A | 	long	(167 {__system____root_opendir})<<20
40e50     00 00 80 0A | 	long	(168 {__system____root_closedir})<<20
40e54     00 00 90 0A | 	long	(169 {__system____root_readdir})<<20
40e58     00 00 A0 0A | 	long	(170 {__system____root_stat})<<20
40e5c     00 00 00 00 
40e60     00 00 00 00 
40e64     00 00 00 00 
40e68     00 00 00 00 
40e6c     00 00 00 00 
40e70     00 00 00 00 
40e74     00 00 00 00 | 	byte	$00[28]
40e78     E0 0E 04 00 | 	long	@@@__system__dat_ + 832
40e7c     E3 0E 04 00 | 	long	@@@__system__dat_ + 835
40e80     04 0F 04 00 | 	long	@@@__system__dat_ + 868
40e84     1D 0F 04 00 | 	long	@@@__system__dat_ + 893
40e88     38 0F 04 00 | 	long	@@@__system__dat_ + 920
40e8c     52 0F 04 00 | 	long	@@@__system__dat_ + 946
40e90     62 0F 04 00 | 	long	@@@__system__dat_ + 962
40e94     74 0F 04 00 | 	long	@@@__system__dat_ + 980
40e98     86 0F 04 00 | 	long	@@@__system__dat_ + 998
40e9c     98 0F 04 00 | 	long	@@@__system__dat_ + 1016
40ea0     A4 0F 04 00 | 	long	@@@__system__dat_ + 1028
40ea4     B5 0F 04 00 | 	long	@@@__system__dat_ + 1045
40ea8     C9 0F 04 00 | 	long	@@@__system__dat_ + 1065
40eac     D3 0F 04 00 | 	long	@@@__system__dat_ + 1075
40eb0     E3 0F 04 00 | 	long	@@@__system__dat_ + 1091
40eb4     F2 0F 04 00 | 	long	@@@__system__dat_ + 1106
40eb8     08 10 04 00 | 	long	@@@__system__dat_ + 1128
40ebc     21 10 04 00 | 	long	@@@__system__dat_ + 1153
40ec0     35 10 04 00 | 	long	@@@__system__dat_ + 1173
40ec4     43 10 04 00 | 	long	@@@__system__dat_ + 1187
40ec8     57 10 04 00 | 	long	@@@__system__dat_ + 1207
40ecc     63 10 04 00 | 	long	@@@__system__dat_ + 1219
40ed0     75 10 04 00 | 	long	@@@__system__dat_ + 1237
40ed4     8D 10 04 00 | 	long	@@@__system__dat_ + 1261
40ed8     9F 10 04 00 | 	long	@@@__system__dat_ + 1279
40edc     B2 10 04 00 | 	long	@@@__system__dat_ + 1298
40ee0     4F 4B 00 4E 
40ee4     75 6D 65 72 
40ee8     69 63 61 6C 
40eec     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
40ef0     75 6D 65 6E 
40ef4     74 20 6F 75 
40ef8     74 20 6F 66 
40efc     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
40f00     61 69 6E 00 
40f04     52 65 73 75 
40f08     6C 74 20 6E 
40f0c     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
40f10     65 70 72 65 
40f14     73 65 6E 74 
40f18     61 62 6C 65 
40f1c     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
40f20     65 67 61 6C 
40f24     20 6D 75 6C 
40f28     74 69 62 79 
40f2c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
40f30     65 71 75 65 
40f34     6E 63 65 00 
40f38     4E 6F 20 73 
40f3c     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
40f40     66 69 6C 65 
40f44     20 6F 72 20 
40f48     64 69 72 65 
40f4c     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
40f50     79 00 42 61 
40f54     64 20 66 69 
40f58     6C 65 20 6E 
40f5c     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
40f60     72 00 50 65 
40f64     72 6D 69 73 
40f68     73 69 6F 6E 
40f6c     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
40f70     69 65 64 00 
40f74     4E 6F 74 20 
40f78     65 6E 6F 75 
40f7c     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
40f80     65 6D 6F 72 
40f84     79 00 54 65 
40f88     6D 70 6F 72 
40f8c     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
40f90     66 61 69 6C 
40f94     75 72 65 00 
40f98     46 69 6C 65 
40f9c     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
40fa0     73 74 73 00 
40fa4     49 6E 76 61 
40fa8     6C 69 64 20 
40fac     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
40fb0     6D 65 6E 74 
40fb4     00 54 6F 6F 
40fb8     20 6D 61 6E 
40fbc     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
40fc0     65 6E 20 66 
40fc4     69 6C 65 73 
40fc8     00 49 2F 4F 
40fcc     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
40fd0     6F 72 00 4E 
40fd4     6F 74 20 61 
40fd8     20 64 69 72 
40fdc     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
40fe0     72 79 00 49 
40fe4     73 20 61 20 
40fe8     64 69 72 65 
40fec     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
40ff0     79 00 52 65 
40ff4     61 64 20 6F 
40ff8     6E 6C 79 20 
40ffc     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
41000     20 73 79 73 
41004     74 65 6D 00 
41008     46 75 6E 63 
4100c     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
41010     20 6E 6F 74 
41014     20 69 6D 70 
41018     6C 65 6D 65 
4101c     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
41020     00 44 69 72 
41024     65 63 74 6F 
41028     72 79 20 6E 
4102c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
41030     6D 70 74 79 
41034     00 4E 61 6D 
41038     65 20 74 6F 
4103c     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
41040     6E 67 00 44 
41044     65 76 69 63 
41048     65 20 6E 6F 
4104c     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
41050     65 6B 61 62 
41054     6C 65 00 42 
41058     61 64 20 61 
4105c     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
41060     73 73 00 42 
41064     72 6F 6B 65 
41068     6E 20 63 6F 
4106c     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
41070     74 69 6F 6E 
41074     00 44 65 76 
41078     69 63 65 20 
4107c     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
41080     65 73 6F 75 
41084     72 63 65 20 
41088     62 75 73 79 
4108c     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
41090     73 73 20 64 
41094     65 76 69 63 
41098     65 20 6C 69 
4109c     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
410a0     6F 20 73 70 
410a4     61 63 65 20 
410a8     6F 6E 20 64 
410ac     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
410b0     65 00 55 6E 
410b4     6B 6E 6F 77 
410b8     6E 20 65 72 
410bc     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
410c0     00 00 00 00 
410c4     00 00 00 00 
410c8     00 00 00 00 | 	byte	$00[12]
410cc     05 00 00 00 
410d0     00 00 00 00 
410d4     00 00 00 00 
410d8     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
410dc     00 00 00 00 | 	byte	$00, $00, $00, $00
410e0     00 00 F0 0B | 	long	(191 {__system___tx})<<20
410e4     00 00 00 0C | 	long	(192 {__system___rx})<<20
410e8     00 00 00 00 | 	byte	$00, $00, $00, $00
410ec     00 00 10 0C | 	long	(193 {__system___rxtxioctl_0765})<<20
410f0     00 00 20 0C | 	long	(194 {__system____dummy_flush_0766})<<20
410f4     00 00 00 00 
410f8     00 00 00 00 | 	byte	$00[8]
410fc     01 00 00 00 
41100     06 00 00 00 
41104     00 00 00 00 
41108     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
4110c     00 00 00 00 
41110     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
41114     00 00 F0 0B | 	long	(191 {__system___tx})<<20
41118     00 00 00 0C | 	long	(192 {__system___rx})<<20
4111c     00 00 00 00 | 	byte	$00, $00, $00, $00
41120     00 00 10 0C | 	long	(193 {__system___rxtxioctl_0765})<<20
41124     00 00 20 0C | 	long	(194 {__system____dummy_flush_0766})<<20
41128     00 00 00 00 
4112c     00 00 00 00 | 	byte	$00[8]
41130     01 00 00 00 
41134     06 00 00 00 
41138     00 00 00 00 
4113c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
41140     00 00 00 00 
41144     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
41148     00 00 F0 0B | 	long	(191 {__system___tx})<<20
4114c     00 00 00 0C | 	long	(192 {__system___rx})<<20
41150     00 00 00 00 | 	byte	$00, $00, $00, $00
41154     00 00 10 0C | 	long	(193 {__system___rxtxioctl_0765})<<20
41158     00 00 20 0C | 	long	(194 {__system____dummy_flush_0766})<<20
4115c     00 00 00 00 
      ...             
412cc     00 00 00 00 
412d0     00 00 00 00 | 	byte	$00[376]
412d4     D8 12 04 00 | 	long	@@@__system__dat_ + 1848
412d8     00 00 00 00 
412dc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
412e0                 | 	alignl
412e0                 | _fatfs_cc_dat_
412e0     C7 00 FC 00 
412e4     E9 00 E2 00 
412e8     E4 00 E0 00 
412ec     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
412f0     EA 00 EB 00 
412f4     E8 00 EF 00 
412f8     EE 00 EC 00 
412fc     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
41300     C9 00 E6 00 
41304     C6 00 F4 00 
41308     F6 00 F2 00 
4130c     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
41310     FF 00 D6 00 
41314     DC 00 F8 00 
41318     A3 00 D8 00 
4131c     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
41320     E1 00 ED 00 
41324     F3 00 FA 00 
41328     F1 00 D1 00 
4132c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
41330     BF 00 AE 00 
41334     AC 00 BD 00 
41338     BC 00 A1 00 
4133c     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
41340     91 25 92 25 
41344     93 25 02 25 
41348     24 25 C1 00 
4134c     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
41350     A9 00 63 25 
41354     51 25 57 25 
41358     5D 25 A2 00 
4135c     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
41360     14 25 34 25 
41364     2C 25 1C 25 
41368     00 25 3C 25 
4136c     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
41370     5A 25 54 25 
41374     69 25 66 25 
41378     60 25 50 25 
4137c     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
41380     F0 00 D0 00 
41384     CA 00 CB 00 
41388     C8 00 31 01 
4138c     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
41390     CF 00 18 25 
41394     0C 25 88 25 
41398     84 25 A6 00 
4139c     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
413a0     D3 00 DF 00 
413a4     D4 00 D2 00 
413a8     F5 00 D5 00 
413ac     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
413b0     DE 00 DA 00 
413b4     DB 00 D9 00 
413b8     FD 00 DD 00 
413bc     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
413c0     AD 00 B1 00 
413c4     17 20 BE 00 
413c8     B6 00 A7 00 
413cc     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
413d0     B0 00 A8 00 
413d4     B7 00 B9 00 
413d8     B3 00 B2 00 
413dc     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
413e0     61 00 1A 03 
413e4     E0 00 17 03 
413e8     F8 00 07 03 
413ec     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
413f0     78 01 00 01 
413f4     30 01 32 01 
413f8     06 01 39 01 
413fc     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
41400     2E 01 79 01 
41404     06 01 80 01 
41408     4D 00 43 02 
4140c     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
41410     82 01 84 01 
41414     84 01 86 01 
41418     87 01 87 01 
4141c     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
41420     8B 01 8B 01 
41424     8D 01 8E 01 
41428     8F 01 90 01 
4142c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
41430     93 01 94 01 
41434     F6 01 96 01 
41438     97 01 98 01 
4143c     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
41440     9B 01 9C 01 
41444     9D 01 20 02 
41448     9F 01 A0 01 
4144c     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
41450     A2 01 A4 01 
41454     A4 01 A6 01 
41458     A7 01 A7 01 
4145c     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
41460     AB 01 AC 01 
41464     AC 01 AE 01 
41468     AF 01 AF 01 
4146c     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
41470     B3 01 B3 01 
41474     B5 01 B5 01 
41478     B7 01 B8 01 
4147c     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
41480     BB 01 BC 01 
41484     BC 01 BE 01 
41488     F7 01 C0 01 
4148c     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
41490     C3 01 C4 01 
41494     C5 01 C4 01 
41498     C7 01 C8 01 
4149c     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
414a0     CB 01 CA 01 
414a4     CD 01 10 01 
414a8     DD 01 01 00 
414ac     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
414b0     12 01 F3 01 
414b4     03 00 F1 01 
414b8     F4 01 F4 01 
414bc     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
414c0     22 02 12 01 
414c4     3A 02 09 00 
414c8     65 2C 3B 02 
414cc     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
414d0     66 2C 3F 02 
414d4     40 02 41 02 
414d8     41 02 46 02 
414dc     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
414e0     40 00 81 01 
414e4     86 01 55 02 
414e8     89 01 8A 01 
414ec     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
414f0     5A 02 90 01 
414f4     5C 02 5D 02 
414f8     5E 02 5F 02 
414fc     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
41500     62 02 94 01 
41504     64 02 65 02 
41508     66 02 67 02 
4150c     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
41510     6A 02 62 2C 
41514     6C 02 6D 02 
41518     6E 02 9C 01 
4151c     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
41520     9D 01 73 02 
41524     74 02 9F 01 
41528     76 02 77 02 
4152c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
41530     7A 02 7B 02 
41534     7C 02 64 2C 
41538     7E 02 7F 02 
4153c     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
41540     82 02 A9 01 
41544     84 02 85 02 
41548     86 02 87 02 
4154c     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
41550     B1 01 B2 01 
41554     45 02 8D 02 
41558     8E 02 8F 02 
4155c     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
41560     B7 01 7B 03 
41564     03 00 FD 03 
41568     FE 03 FF 03 
4156c     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
41570     86 03 88 03 
41574     89 03 8A 03 
41578     B1 03 11 03 
4157c     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
41580     A3 03 A3 03 
41584     C4 03 08 03 
41588     CC 03 03 00 
4158c     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
41590     8F 03 D8 03 
41594     18 01 F2 03 
41598     0A 00 F9 03 
4159c     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
415a0     F5 03 F6 03 
415a4     F7 03 F7 03 
415a8     F9 03 FA 03 
415ac     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
415b0     20 03 50 04 
415b4     10 07 60 04 
415b8     22 01 8A 04 
415bc     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
415c0     0E 01 CF 04 
415c4     01 00 C0 04 
415c8     D0 04 44 01 
415cc     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
415d0     00 00 7D 1D 
415d4     01 00 63 2C 
415d8     00 1E 96 01 
415dc     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
415e0     00 1F 08 06 
415e4     10 1F 06 06 
415e8     20 1F 08 06 
415ec     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
415f0     40 1F 06 06 
415f4     51 1F 07 00 
415f8     59 1F 52 1F 
415fc     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
41600     5D 1F 56 1F 
41604     5F 1F 60 1F 
41608     08 06 70 1F 
4160c     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
41610     BB 1F C8 1F 
41614     C9 1F CA 1F 
41618     CB 1F DA 1F 
4161c     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
41620     F9 1F EA 1F 
41624     EB 1F FA 1F 
41628     FB 1F 80 1F 
4162c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
41630     08 06 A0 1F 
41634     08 06 B0 1F 
41638     04 00 B8 1F 
4163c     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
41640     BC 1F CC 1F 
41644     01 00 C3 1F 
41648     D0 1F 02 06 
4164c     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
41650     E5 1F 01 00 
41654     EC 1F F3 1F 
41658     01 00 FC 1F 
4165c     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
41660     32 21 70 21 
41664     10 02 84 21 
41668     01 00 83 21 
4166c     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
41670     30 2C 2F 04 
41674     60 2C 02 01 
41678     67 2C 06 01 
4167c     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
41680     80 2C 64 01 
41684     00 2D 26 08 
41688     41 FF 1A 03 
4168c     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
41690     05 07 09 0E 
41694     10 12 14 16 
41698     18 1C 1E 43 
4169c     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
416a0     41 41 43 45 
416a4     45 45 49 49 
416a8     49 41 41 45 
416ac     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
416b0     4F 55 55 59 
416b4     4F 55 4F 9C 
416b8     4F 9E 9F 41 
416bc     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
416c0     A5 A6 A7 A8 
416c4     A9 AA AB AC 
416c8     AD AE AF B0 
416cc     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
416d0     41 41 41 B8 
416d4     B9 BA BB BC 
416d8     BD BE BF C0 
416dc     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
416e0     C5 41 41 C8 
416e4     C9 CA CB CC 
416e8     CD CE CF D1 
416ec     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
416f0     49 49 49 49 
416f4     D9 DA DB DC 
416f8     DD 49 DF 4F 
416fc     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
41700     4F E6 E8 E8 
41704     55 55 55 59 
41708     59 EE EF F0 
4170c     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
41710     F5 F6 F7 F8 
41714     F9 FA FB FC 
41718     FD FE FF 00 
4171c     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
41720     00 00 00 00 | 	byte	$00, $00, $00, $00
41724     00 00 E0 0A | 	long	(174 {_fatfs_cc_v_close})<<20
41728     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_read})<<20
4172c     00 00 00 0B | 	long	(176 {_fatfs_cc_v_write})<<20
41730     00 00 10 0B | 	long	(177 {_fatfs_cc_v_lseek})<<20
41734     00 00 20 0B | 	long	(178 {_fatfs_cc_v_ioctl})<<20
41738     00 00 30 0C | 	long	(195 {_fatfs_cc_v_flush})<<20
4173c     00 00 00 00 
41740     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
41744     00 00 30 0B | 	long	(179 {_fatfs_cc_v_open})<<20
41748     00 00 40 0B | 	long	(180 {_fatfs_cc_v_creat})<<20
4174c     00 00 50 0B | 	long	(181 {_fatfs_cc_v_opendir})<<20
41750     00 00 60 0B | 	long	(182 {_fatfs_cc_v_closedir})<<20
41754     00 00 70 0B | 	long	(183 {_fatfs_cc_v_readdir})<<20
41758     00 00 80 0B | 	long	(184 {_fatfs_cc_v_stat})<<20
4175c     00 00 90 0B | 	long	(185 {_fatfs_cc_v_mkdir})<<20
41760     00 00 A0 0B | 	long	(186 {_fatfs_cc_v_rmdir})<<20
41764     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_remove})<<20
41768     00 00 C0 0B | 	long	(188 {_fatfs_cc_v_rename})<<20
4176c     00 00 D0 0B | 	long	(189 {_fatfs_cc_v_init})<<20
41770     00 00 E0 0B | 	long	(190 {_fatfs_cc_v_deinit})<<20
41774     FF FF FF FF 
41778     1F 00 00 00 
4177c     1C 00 00 00 
41780     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
41784     1E 00 00 00 
41788     1F 00 00 00 
4178c     1E 00 00 00 
41790     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
41794     1F 00 00 00 
41798     1E 00 00 00 
4179c     1F 00 00 00 
417a0     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
417a4     1F 00 00 00 
417a8     00 00 00 00 
417ac     1F 00 00 00 
417b0     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
417b4     5A 00 00 00 
417b8     78 00 00 00 
417bc     97 00 00 00 
417c0     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
417c4     D4 00 00 00 
417c8     F3 00 00 00 
417cc     11 01 00 00 
417d0     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
417d4     4E 01 00 00 
417d8     6D 01 00 00 
417dc     FF FF FF FF 
417e0     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
417e4     00 00 00 00 
      ...             
417fc     00 00 00 00 
41800     00 00 00 00 | 	byte	$00[32]
41804     22 18 04 00 | 	long	@@@_fatfs_cc_dat_ + 1346
41808     26 18 04 00 | 	long	@@@_fatfs_cc_dat_ + 1350
4180c     00 00 00 00 
41810     00 00 00 00 
41814     00 00 00 00 
41818     00 00 00 00 
4181c     00 00       | 	byte	$00[18]
4181e     3F 3F 3F 00 
41822     55 43 54 00 
41826     55 43 54 00 
4182a     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
4182e     00 00 00 00 
41832     00 00 00    | 	byte	$00[7]
41835     CA 9A 3B 00 
41839     00 00 00 01 
4183d     01 01 01 01 
41841     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
41845     91 11 11 11 
41849     11 01 01 01 
4184d     01 01 01 01 
41851     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
41855     01 01 01 01 
41859     01 01 01    | 	byte	$01[7]
4185c     90 20 20 20 
41860     20 20 20 20 
41864     20 20 20 20 
41868     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
4186c     42 42 42 42 
41870     42 42 42 42 
41874     42 42       | 	byte	$42[10]
41876     20 20 20 20 
4187a     20 20 20    | 	byte	$20[7]
4187d     44 44 44 44 
41881     44 44       | 	byte	$44[6]
41883     04 04 04 04 
41887     04 04 04 04 
4188b     04 04 04 04 
4188f     04 04 04 04 
41893     04 04 04 04 | 	byte	$04[20]
41897     20 20 20 20 
4189b     20 20       | 	byte	$20[6]
4189d     48 48 48 48 
418a1     48 48       | 	byte	$48[6]
418a3     08 08 08 08 
418a7     08 08 08 08 
418ab     08 08 08 08 
418af     08 08 08 08 
418b3     08 08 08 08 | 	byte	$08[20]
418b7     20 20 20 20 
418bb     01 00 00 00 
418bf     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
418c0                 | __methodtable__
418c0     18 62 01 00 | 	long	@_do_no_command
418c4     3C 03 02 00 | 	long	@_do_plus
418c8     5C F3 01 00 | 	long	@_do_minus
418cc     24 02 02 00 | 	long	@_do_or
418d0     DC F9 01 00 | 	long	@_do_mul
418d4     20 DE 01 00 | 	long	@_do_fdiv
418d8     0C D6 01 00 | 	long	@_do_and
418dc     24 D7 01 00 | 	long	@_do_div
418e0     BC F7 01 00 | 	long	@_do_mod
418e4     F0 09 02 00 | 	long	@_do_shl
418e8     08 0B 02 00 | 	long	@_do_shr
418ec     28 08 02 00 | 	long	@_do_power
418f0     C4 CB 01 00 | 	long	@_do_getvar
418f4     54 8F 01 00 | 	long	@_do_push
418f8     BC C5 01 00 | 	long	@_do_assign
418fc     58 F5 00 00 | 	long	@_do_cls
41900     E4 5B 01 00 | 	long	@_do_new
41904     98 87 01 00 | 	long	@_do_plot
41908     C0 1C 01 00 | 	long	@_do_draw
4190c     00 8A 01 00 | 	long	@_do_print
41910     38 F3 00 00 | 	long	@_do_circle
41914     F4 1E 01 00 | 	long	@_do_fcircle
41918     2C E2 00 00 | 	long	@_do_box
4191c     D8 23 01 00 | 	long	@_do_frame
41920     28 F7 00 00 | 	long	@_do_color
41924     68 21 01 00 | 	long	@_do_for
41928     50 5E 01 00 | 	long	@_do_next
4192c     1C 4A 01 00 | 	long	@_do_list
41930     FC AA 01 00 | 	long	@_do_run
41934     1C 1E 01 00 | 	long	@_do_error
41938     24 30 01 00 | 	long	@_do_fast_goto
4193c     14 31 01 00 | 	long	@_do_find_goto
41940     28 33 01 00 | 	long	@_do_slow_goto
41944     38 62 01 00 | 	long	@_do_nothing
41948     18 AF 01 00 | 	long	@_do_save
4194c     B8 4C 01 00 | 	long	@_do_load
41950     D4 7A 01 00 | 	long	@_do_pinwrite
41954     FC C2 01 00 | 	long	@_do_waitms
41958     30 C4 01 00 | 	long	@_do_waitvbl
4195c     1C 36 01 00 | 	long	@_do_if
41960     B4 1D 01 00 | 	long	@_do_else
41964     44 D9 01 00 | 	long	@_do_eq
41968     E8 DF 01 00 | 	long	@_do_ge
4196c     B4 E9 01 00 | 	long	@_do_le
41970     D0 E4 01 00 | 	long	@_do_gt
41974     90 EE 01 00 | 	long	@_do_lt
41978     48 FD 01 00 | 	long	@_do_ne
4197c     64 A8 01 00 | 	long	@_do_rnd
41980     14 E4 00 00 | 	long	@_do_brun
41984     B0 DD 00 00 | 	long	@_do_beep
41988     50 15 01 00 | 	long	@_do_dir
4198c     08 77 01 00 | 	long	@_do_paper
41990     D8 39 01 00 | 	long	@_do_ink
41994     EC 20 01 00 | 	long	@_do_font
41998     F4 56 01 00 | 	long	@_do_mode
4199c     A0 5A 01 00 | 	long	@_do_mouse
419a0     A4 2E 01 00 | 	long	@_do_gettime
419a4     5C FC 00 00 | 	long	@_do_cursor
419a8     B0 F4 00 00 | 	long	@_do_click
419ac     5C 5B 01 00 | 	long	@_do_mousex
419b0     A0 5B 01 00 | 	long	@_do_mousey
419b4     D4 5A 01 00 | 	long	@_do_mousek
419b8     18 5B 01 00 | 	long	@_do_mousew
419bc     64 B8 01 00 | 	long	@_do_sin
419c0     9C BB 01 00 | 	long	@_do_stick
419c4     2C BD 01 00 | 	long	@_do_strig
419c8     BC B9 01 00 | 	long	@_do_sprite
419cc     78 10 01 00 | 	long	@_do_defsprite
419d0     50 2D 01 00 | 	long	@_do_getpixel
419d4     D8 C2 01 00 | 	long	@_do_waitclock
419d8     0C F7 01 00 | 	long	@_do_negative
419dc     D8 95 01 00 | 	long	@_do_rdpin
419e0     88 AA 01 00 | 	long	@_do_rqpin
419e4     00 79 01 00 | 	long	@_do_pinread
419e8     3C C4 01 00 | 	long	@_do_wrpin
419ec     BC C4 01 00 | 	long	@_do_wxpin
419f0     3C C5 01 00 | 	long	@_do_wypin
419f4     40 78 01 00 | 	long	@_do_pinfloat
419f8     C0 78 01 00 | 	long	@_do_pinlo
419fc     80 78 01 00 | 	long	@_do_pinhi
41a00     84 79 01 00 | 	long	@_do_pinstart
41a04     94 7A 01 00 | 	long	@_do_pintoggle
41a08     78 89 01 00 | 	long	@_do_position
41a0c     38 FB 00 00 | 	long	@_do_cos
41a10     BC BE 01 00 | 	long	@_do_tan
41a14     98 DC 00 00 | 	long	@_do_atn
41a18     88 DB 00 00 | 	long	@_do_asin
41a1c     18 D9 00 00 | 	long	@_do_acos
41a20     A8 BA 01 00 | 	long	@_do_sqr
41a24     D8 1F 01 00 | 	long	@_do_fill
41a28     8C 07 01 00 | 	long	@_do_defsnd
41a2c     90 FC 00 00 | 	long	@_do_defenv
41a30     B0 95 01 00 | 	long	@_do_rad
41a34     EC 13 01 00 | 	long	@_do_deg
41a38     58 3A 01 00 | 	long	@_do_int
41a3c     5C 7B 01 00 | 	long	@_do_play
41a40     BC B2 01 00 | 	long	@_do_setdelay
41a44     64 B3 01 00 | 	long	@_do_setenv
41a48     0C B4 01 00 | 	long	@_do_setlen
41a4c     B4 B4 01 00 | 	long	@_do_setpan
41a50     04 B6 01 00 | 	long	@_do_setvol
41a54     AC B6 01 00 | 	long	@_do_setwave
41a58     5C B5 01 00 | 	long	@_do_setsustain
41a5c     5C A5 01 00 | 	long	@_do_release
41a60     3C 2B 01 00 | 	long	@_do_getenvsustain
41a64     68 88 01 00 | 	long	@_do_poke
41a68     E8 1B 01 00 | 	long	@_do_dpoke
41a6c     90 53 01 00 | 	long	@_do_lpoke
41a70     90 77 01 00 | 	long	@_do_peek
41a74     3C 1B 01 00 | 	long	@_do_dpeek
41a78     E4 52 01 00 | 	long	@_do_lpeek
41a7c     34 25 01 00 | 	long	@_do_fre
41a80     4C 2C 01 00 | 	long	@_do_getnotevalue
41a84     7C D1 01 00 | 	long	@_do_getaddr
41a88     00 37 01 00 | 	long	@_do_inkey
41a8c     98 D8 00 00 | 	long	@_do_abs
41a90     B8 34 01 00 | 	long	@_do_hex
41a94     C8 E0 00 00 | 	long	@_do_bin
41a98     CC BF 01 00 | 	long	@_do_val
41a9c     38 F2 00 00 | 	long	@_do_chr
41aa0     28 DA 00 00 | 	long	@_do_asc
41aa4     1C 47 01 00 | 	long	@_do_left
41aa8     D8 A6 01 00 | 	long	@_do_right
41aac     68 54 01 00 | 	long	@_do_mid
41ab0     A8 48 01 00 | 	long	@_do_len
41ab4     0C 2F 01 00 | 	long	@_do_gosub
41ab8     2C A6 01 00 | 	long	@_do_return
41abc     D8 1D 01 00 | 	long	@_do_end
41ac0     40 89 01 00 | 	long	@_do_pop
41ac4     68 51 01 00 | 	long	@_do_log
41ac8     2C F0 00 00 | 	long	@_do_changevol
41acc     0C F1 00 00 | 	long	@_do_changewav
41ad0     1C EF 00 00 | 	long	@_do_changepan
41ad4     00 EC 00 00 | 	long	@_do_changefreq
41ad8     54 B7 01 00 | 	long	@_do_shutup
41adc     34 AA 01 00 | 	long	@_do_round
41ae0     0C 1E 01 00 | 	long	@_do_enter
41ae4     60 63 01 00 | 	long	@_do_open
41ae8     DC F4 00 00 | 	long	@_do_close
41aec     98 25 01 00 | 	long	@_do_get
41af0     70 90 01 00 | 	long	@_do_put
41af4     4C E6 00 00 | 	long	@_do_cd
41af8     14 14 01 00 | 	long	@_do_delete
41afc     34 56 01 00 | 	long	@_do_mkdir
41b00     C4 DE 00 00 | 	long	@_do_blit
41b04     00 25 01 00 | 	long	@_do_framebuf
41b08     3C 62 01 00 | 	long	@_do_on
41b0c     74 B9 01 00 | 	long	@_do_skip
41b10     14 3B 01 00 | 	long	@_do_input
41b14     3C 98 01 00 | 	long	@_do_read
41b18     F4 A5 01 00 | 	long	@_do_restore
41b1c     88 6F 01 00 | 	long	@_do_padx
41b20     08 72 01 00 | 	long	@_do_pady
41b24     88 74 01 00 | 	long	@_do_padz
41b28     08 68 01 00 | 	long	@_do_padrx
41b2c     88 6A 01 00 | 	long	@_do_padry
41b30     08 6D 01 00 | 	long	@_do_padrz
41b34     78 66 01 00 | 	long	@_do_padh
41b38     60 F7 00 00 | 	long	@_do_copy
41b3c     98 F5 00 00 | 	long	@_do_coginit
41b40     84 4B 02 00 | 	long	@_hg010b_spin2_putchar
41b44     6C 61 03 00 | 	long	@__struct___bas_wrap_sender_tx
41b48     B0 61 03 00 | 	long	@__struct___bas_wrap_sender_rx
41b4c     F8 61 03 00 | 	long	@__struct___bas_wrap_sender_close
41b50     9C 60 03 00 | 	long	@__struct__s_vfs_file_t_putchar
41b54     0C 61 03 00 | 	long	@__struct__s_vfs_file_t_getchar
41b58     54 60 03 00 | 	long	@___strs_cl_pfunc
41b5c     E8 BD 02 00 | 	long	@__system____root_opendir
41b60     84 BE 02 00 | 	long	@__system____root_closedir
41b64     00 BE 02 00 | 	long	@__system____root_readdir
41b68     8C BE 02 00 | 	long	@__system____root_stat
41b6c     D8 B6 02 00 | 	long	@__system____default_putc
41b70     5C B6 02 00 | 	long	@__system____default_getc
41b74     80 B7 02 00 | 	long	@__system____default_flush
41b78     58 4B 03 00 | 	long	@_fatfs_cc_v_close
41b7c     74 4F 03 00 | 	long	@_fatfs_cc_v_read
41b80     88 50 03 00 | 	long	@_fatfs_cc_v_write
41b84     68 51 03 00 | 	long	@_fatfs_cc_v_lseek
41b88     F0 51 03 00 | 	long	@_fatfs_cc_v_ioctl
41b8c     44 52 03 00 | 	long	@_fatfs_cc_v_open
41b90     BC 4A 03 00 | 	long	@_fatfs_cc_v_creat
41b94     9C 4B 03 00 | 	long	@_fatfs_cc_v_opendir
41b98     10 4C 03 00 | 	long	@_fatfs_cc_v_closedir
41b9c     50 4C 03 00 | 	long	@_fatfs_cc_v_readdir
41ba0     84 4D 03 00 | 	long	@_fatfs_cc_v_stat
41ba4     04 52 03 00 | 	long	@_fatfs_cc_v_mkdir
41ba8     24 52 03 00 | 	long	@_fatfs_cc_v_rmdir
41bac     14 52 03 00 | 	long	@_fatfs_cc_v_remove
41bb0     34 52 03 00 | 	long	@_fatfs_cc_v_rename
41bb4     54 53 03 00 | 	long	@_fatfs_cc_v_init
41bb8     5C 53 03 00 | 	long	@_fatfs_cc_v_deinit
41bbc     2C 68 02 00 | 	long	@__system___tx
41bc0     6C 68 02 00 | 	long	@__system___rx
41bc4     F8 C9 02 00 | 	long	@__system___rxtxioctl_0765
41bc8     50 CA 02 00 | 	long	@__system____dummy_flush_0766
41bcc     24 53 03 00 | 	long	@_fatfs_cc_v_flush
41bd0                 | __heap_base
41bd0     00 00 00 00 
      ...             
592d0     00 00 00 00 
592d4     00 00 00 00 | 	long	0[24002]
592d8                 | objmem
592d8     00 00 00 00 
      ...             
637f0     00 00 00 00 
637f4     00 00 00 00 | 	long	0[10568]
637f8                 | stackspace
637f8     00 00 00 00 | 	long	0[1]
637fc 100             | 	org	COG_BSS_START
637fc 100             | _var01
637fc 100             | 	res	1
637fc 101             | _var02
637fc 101             | 	res	1
637fc 102             | _var03
637fc 102             | 	res	1
637fc 103             | _var04
637fc 103             | 	res	1
637fc 104             | _var05
637fc 104             | 	res	1
637fc 105             | _var06
637fc 105             | 	res	1
637fc 106             | _var07
637fc 106             | 	res	1
637fc 107             | _var08
637fc 107             | 	res	1
637fc 108             | _var09
637fc 108             | 	res	1
637fc 109             | arg01
637fc 109             | 	res	1
637fc 10a             | arg02
637fc 10a             | 	res	1
637fc 10b             | arg03
637fc 10b             | 	res	1
637fc 10c             | arg04
637fc 10c             | 	res	1
637fc 10d             | arg05
637fc 10d             | 	res	1
637fc 10e             | arg06
637fc 10e             | 	res	1
637fc 10f             | arg07
637fc 10f             | 	res	1
637fc 110             | arg08
637fc 110             | 	res	1
637fc 111             | arg09
637fc 111             | 	res	1
637fc 112             | arg10
637fc 112             | 	res	1
637fc 113             | local01
637fc 113             | 	res	1
637fc 114             | local02
637fc 114             | 	res	1
637fc 115             | local03
637fc 115             | 	res	1
637fc 116             | local04
637fc 116             | 	res	1
637fc 117             | local05
637fc 117             | 	res	1
637fc 118             | local06
637fc 118             | 	res	1
637fc 119             | local07
637fc 119             | 	res	1
637fc 11a             | local08
637fc 11a             | 	res	1
637fc 11b             | local09
637fc 11b             | 	res	1
637fc 11c             | local10
637fc 11c             | 	res	1
637fc 11d             | local11
637fc 11d             | 	res	1
637fc 11e             | local12
637fc 11e             | 	res	1
637fc 11f             | local13
637fc 11f             | 	res	1
637fc 120             | local14
637fc 120             | 	res	1
637fc 121             | local15
637fc 121             | 	res	1
637fc 122             | local16
637fc 122             | 	res	1
637fc 123             | local17
637fc 123             | 	res	1
637fc 124             | local18
637fc 124             | 	res	1
637fc 125             | local19
637fc 125             | 	res	1
637fc 126             | local20
637fc 126             | 	res	1
637fc 127             | local21
637fc 127             | 	res	1
637fc 128             | local22
637fc 128             | 	res	1
637fc 129             | local23
637fc 129             | 	res	1
637fc 12a             | local24
637fc 12a             | 	res	1
637fc 12b             | local25
637fc 12b             | 	res	1
637fc 12c             | local26
637fc 12c             | 	res	1
637fc 12d             | local27
637fc 12d             | 	res	1
637fc 12e             | local28
637fc 12e             | 	res	1
637fc 12f             | local29
637fc 12f             | 	res	1
637fc 130             | local30
637fc 130             | 	res	1
637fc 131             | local31
637fc 131             | 	res	1
637fc 132             | local32
637fc 132             | 	res	1
637fc 133             | local33
637fc 133             | 	res	1
637fc 134             | local34
637fc 134             | 	res	1
637fc 135             | local35
637fc 135             | 	res	1
637fc 136             | local36
637fc 136             | 	res	1
637fc 137             | local37
637fc 137             | 	res	1
637fc 138             | local38
637fc 138             | 	res	1
637fc 139             | local39
637fc 139             | 	res	1
637fc 13a             | local40
637fc 13a             | 	res	1
637fc 13b             | local41
637fc 13b             | 	res	1
637fc 13c             | local42
637fc 13c             | 	res	1
637fc 13d             | local43
637fc 13d             | 	res	1
637fc 13e             | local44
637fc 13e             | 	res	1
637fc 13f             | local45
637fc 13f             | 	res	1
637fc 140             | local46
637fc 140             | 	res	1
637fc 141             | local47
637fc 141             | 	res	1
637fc 142             | local48
637fc 142             | 	res	1
637fc 143             | local49
637fc 143             | 	res	1
637fc 144             | local50
637fc 144             | 	res	1
637fc 145             | local51
637fc 145             | 	res	1
637fc 146             | local52
637fc 146             | 	res	1
637fc 147             | local53
637fc 147             | 	res	1
637fc 148             | muldiva_
637fc 148             | 	res	1
637fc 149             | muldivb_
637fc 149             | 	res	1
637fc 14a             | 	fit	480
637fc 14a             | 
