00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic028.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 27
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 C0 AA A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec B0 95 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 14 93 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 B8 83 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 F4 85 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 58 81 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 58 EE 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 34 8D 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 CC 1F 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 7C 47 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 34 45 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 0C 57 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc F4 77 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     49 E4 05 F1 | 	add	objptr, #73
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     79 00 00 FF 
00818     3B E5 05 F1 | 	add	objptr, ##62267
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     79 00 00 FF 
0082c     84 E5 85 F1 | 	sub	objptr, ##62340
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     F0 E5 B1 FD | 	call	#__system___waitms
0083c     79 00 00 FF 
00840     84 E5 05 F1 | 	add	objptr, ##62340
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     79 00 00 FF 
00854     84 E5 85 F1 | 	sub	objptr, ##62340
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     C8 E5 B1 FD | 	call	#__system___waitms
00864     79 00 00 FF 
00868     84 E5 05 F1 | 	add	objptr, ##62340
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     79 00 00 FF 
0087c     84 E5 85 F1 | 	sub	objptr, ##62340
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     A0 E5 B1 FD | 	call	#__system___waitms
0088c     79 00 00 FF 
00890     84 E5 05 F1 | 	add	objptr, ##62340
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     79 00 00 FF 
008a4     84 E5 85 F1 | 	sub	objptr, ##62340
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     79 00 00 FF 
008d4     FC E4 05 F1 | 	add	objptr, ##62204
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     79 00 00 FF 
00914     04 E5 85 F1 | 	sub	objptr, ##62212
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     14 DB B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     64 DB B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     54 DB B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     79 00 00 FF 
00980     0C E5 05 F1 | 	add	objptr, ##62220
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     79 00 00 FF 
009ac     28 E5 85 F1 | 	sub	objptr, ##62248
009b0     B8 DA B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     79 00 00 FF 
009e0     0C E5 05 F1 | 	add	objptr, ##62220
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     79 00 00 FF 
00a08     28 E5 85 F1 | 	sub	objptr, ##62248
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     57 00 00 FF 
00a30     1C E4 05 F1 | 	add	objptr, ##44572
00a34     F2 12 02 FB | 	rdlong	arg01, objptr
00a38     57 00 00 FF 
00a3c     1C E4 85 F1 | 	sub	objptr, ##44572
00a40     CC 05 B2 FD | 	call	#__system__RTrim_S
00a44     FD 12 02 F6 | 	mov	arg01, result1
00a48     04 05 B2 FD | 	call	#__system__LTrim_S
00a4c     57 00 00 FF 
00a50     20 E4 05 F1 | 	add	objptr, ##44576
00a54     F2 FA 61 FC | 	wrlong	result1, objptr
00a58     04 E4 05 F1 | 	add	objptr, #4
00a5c     FF FF FF FF 
00a60     F2 FE 6B FC | 	wrlong	##-1, objptr
00a64     22 00 00 FF 
00a68     7C E5 05 F1 | 	add	objptr, ##17788
00a6c     F2 00 68 FC | 	wrlong	#0, objptr
00a70     0F 00 00 FF 
00a74     24 E5 85 F1 | 	sub	objptr, ##7972
00a78     F2 00 68 FC | 	wrlong	#0, objptr
00a7c     6A 00 00 FF 
00a80     7C E4 85 F1 | 	sub	objptr, ##54396
00a84     00 1E 06 F6 | 	mov	local01, #0
00a88                 | LR__0020
00a88                 | ' 
00a88                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a88                 | ' 
00a88                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
00a88                 | ' 
00a88                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a88     00 20 06 F6 | 	mov	local02, #0
00a8c     20 4E 05 F1 | 	add	fp, #32
00a90     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a94                 | LR__0021
00a94     10 23 02 F6 | 	mov	local03, local02
00a98     02 22 66 F0 | 	shl	local03, #2
00a9c     A7 22 02 F1 | 	add	local03, fp
00aa0     11 01 68 FC | 	wrlong	#0, local03
00aa4     01 20 06 F1 | 	add	local02, #1
00aa8     7E 20 56 F2 | 	cmps	local02, #126 wc
00aac     E4 FF 9F CD |  if_b	jmp	#LR__0021
00ab0                 | LR__0022
00ab0     20 4E 85 F1 | 	sub	fp, #32
00ab4                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00ab4     00 20 06 F6 | 	mov	local02, #0
00ab8     55 00 00 FF 
00abc     0C E4 05 F1 | 	add	objptr, ##43532
00ac0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00ac4                 | LR__0023
00ac4     10 25 02 F6 | 	mov	local04, local02
00ac8     03 24 66 F0 | 	shl	local04, #3
00acc     F2 24 02 F1 | 	add	local04, objptr
00ad0     70 01 00 FF 
00ad4     7E 17 06 F6 | 	mov	arg03, ##@LR__4777
00ad8     12 17 62 FC | 	wrlong	arg03, local04
00adc     10 25 02 F6 | 	mov	local04, local02
00ae0     03 24 66 F0 | 	shl	local04, #3
00ae4     F2 26 02 F6 | 	mov	local05, objptr
00ae8     F2 24 02 F1 | 	add	local04, objptr
00aec     00 28 06 F6 | 	mov	local06, #0
00af0     04 24 06 F1 | 	add	local04, #4
00af4     12 01 68 FC | 	wrlong	#0, local04
00af8     01 20 06 F1 | 	add	local02, #1
00afc     7E 20 56 F2 | 	cmps	local02, #126 wc
00b00     C0 FF 9F CD |  if_b	jmp	#LR__0023
00b04                 | LR__0024
00b04     02 00 00 FF 
00b08     10 E4 05 F1 | 	add	objptr, ##1040
00b0c     F2 12 02 FB | 	rdlong	arg01, objptr
00b10     57 00 00 FF 
00b14     1C E4 85 F1 | 	sub	objptr, ##44572
00b18     F4 04 B2 FD | 	call	#__system__RTrim_S
00b1c     FD 12 02 F6 | 	mov	arg01, result1
00b20     2C 04 B2 FD | 	call	#__system__LTrim_S
00b24     57 00 00 FF 
00b28     1C E4 05 F1 | 	add	objptr, ##44572
00b2c     F2 FA 61 FC | 	wrlong	result1, objptr
00b30     70 01 00 FF 
00b34     7F 25 06 F6 | 	mov	local04, ##@LR__4778
00b38     22 00 00 FF 
00b3c     C4 E5 05 F1 | 	add	objptr, ##17860
00b40     F2 24 62 FC | 	wrlong	local04, objptr
00b44     22 00 00 FF 
00b48     C4 E5 85 F1 | 	sub	objptr, ##17860
00b4c     F2 12 02 FB | 	rdlong	arg01, objptr
00b50     57 00 00 FF 
00b54     1C E4 85 F1 | 	sub	objptr, ##44572
00b58     09 2B 02 F6 | 	mov	local07, arg01
00b5c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b60                 | LR__0025
00b60     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b64     01 2A 06 51 |  if_ne	add	local07, #1
00b68     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b6c                 | LR__0026
00b6c     09 2B 8A F1 | 	sub	local07, arg01 wz
00b70     79 00 00 FF 
00b74     E4 E5 05 F1 | 	add	objptr, ##62436
00b78     F2 2A 62 FC | 	wrlong	local07, objptr
00b7c                 | ' if l=0 then goto 101
00b7c     79 00 00 FF 
00b80     E4 E5 85 F1 | 	sub	objptr, ##62436
00b84     B8 27 90 AD |  if_e	jmp	#LR__0149
00b88     79 00 00 FF 
00b8c     E8 E5 05 F1 | 	add	objptr, ##62440
00b90     F2 00 68 FC | 	wrlong	#0, objptr
00b94                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b94                 | ' for i=1 to len(line$)
00b94     01 20 06 F6 | 	mov	local02, #1
00b98     22 00 00 FF 
00b9c     CC E5 85 F1 | 	sub	objptr, ##17868
00ba0     F2 12 02 FB | 	rdlong	arg01, objptr
00ba4     57 00 00 FF 
00ba8     1C E4 85 F1 | 	sub	objptr, ##44572
00bac     09 2B 02 F6 | 	mov	local07, arg01
00bb0     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb4                 | LR__0027
00bb4     15 FB C9 FA | 	rdbyte	result1, local07 wz
00bb8     01 2A 06 51 |  if_ne	add	local07, #1
00bbc     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bc0                 | LR__0028
00bc0     09 2B 82 F1 | 	sub	local07, arg01
00bc4     15 2D 02 F6 | 	mov	local08, local07
00bc8     01 2C 06 F1 | 	add	local08, #1
00bcc                 | LR__0029
00bcc     16 21 52 F2 | 	cmps	local02, local08 wc
00bd0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bd4                 | ' 
00bd4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bd4     57 00 00 FF 
00bd8     1C E4 05 F1 | 	add	objptr, ##44572
00bdc     F2 12 02 FB | 	rdlong	arg01, objptr
00be0     57 00 00 FF 
00be4     1C E4 85 F1 | 	sub	objptr, ##44572
00be8     10 15 02 F6 | 	mov	arg02, local02
00bec     01 16 06 F6 | 	mov	arg03, #1
00bf0     A4 00 B2 FD | 	call	#__system__Mid_S
00bf4     FD 12 02 F6 | 	mov	arg01, result1
00bf8     70 01 00 FF 
00bfc     80 15 06 F6 | 	mov	arg02, ##@LR__4779
00c00     5C DF B1 FD | 	call	#__system___string_cmp
00c04     00 FA 0D F2 | 	cmp	result1, #0 wz
00c08     2C 00 90 5D |  if_ne	jmp	#LR__0030
00c0c     79 00 00 FF 
00c10     E8 E5 05 F1 | 	add	objptr, ##62440
00c14     F2 22 0A FB | 	rdlong	local03, objptr wz
00c18     79 00 00 FF 
00c1c     E8 E5 85 F1 | 	sub	objptr, ##62440
00c20     79 00 00 AF 
00c24     E8 E5 05 A1 |  if_e	add	objptr, ##62440
00c28     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c2c     79 00 00 AF 
00c30     E8 E5 85 A1 |  if_e	sub	objptr, ##62440
00c34     60 00 90 AD |  if_e	jmp	#LR__0031
00c38                 | LR__0030
00c38     57 00 00 FF 
00c3c     1C E4 05 F1 | 	add	objptr, ##44572
00c40     F2 12 02 FB | 	rdlong	arg01, objptr
00c44     57 00 00 FF 
00c48     1C E4 85 F1 | 	sub	objptr, ##44572
00c4c     10 15 02 F6 | 	mov	arg02, local02
00c50     01 16 06 F6 | 	mov	arg03, #1
00c54     40 00 B2 FD | 	call	#__system__Mid_S
00c58     FD 12 02 F6 | 	mov	arg01, result1
00c5c     70 01 00 FF 
00c60     82 15 06 F6 | 	mov	arg02, ##@LR__4780
00c64     F8 DE B1 FD | 	call	#__system___string_cmp
00c68     00 FA 0D F2 | 	cmp	result1, #0 wz
00c6c     79 00 00 AF 
00c70     E8 E5 05 A1 |  if_e	add	objptr, ##62440
00c74     F2 22 02 AB |  if_e	rdlong	local03, objptr
00c78     79 00 00 AF 
00c7c     E8 E5 85 A1 |  if_e	sub	objptr, ##62440
00c80     01 22 0E A2 |  if_e	cmp	local03, #1 wz
00c84     79 00 00 AF 
00c88     E8 E5 05 A1 |  if_e	add	objptr, ##62440
00c8c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c90     79 00 00 AF 
00c94     E8 E5 85 A1 |  if_e	sub	objptr, ##62440
00c98                 | LR__0031
00c98     10 25 02 F6 | 	mov	local04, local02
00c9c     03 24 66 F0 | 	shl	local04, #3
00ca0     55 00 00 FF 
00ca4     0C E4 05 F1 | 	add	objptr, ##43532
00ca8     F2 26 02 F6 | 	mov	local05, objptr
00cac     F2 24 02 F1 | 	add	local04, objptr
00cb0     24 00 00 FF 
00cb4     DC E5 05 F1 | 	add	objptr, ##18908
00cb8     F2 28 02 FB | 	rdlong	local06, objptr
00cbc     79 00 00 FF 
00cc0     E8 E5 85 F1 | 	sub	objptr, ##62440
00cc4     04 24 06 F1 | 	add	local04, #4
00cc8     12 29 62 FC | 	wrlong	local06, local04
00ccc     01 20 06 F1 | 	add	local02, #1
00cd0     F8 FE 9F FD | 	jmp	#LR__0029
00cd4                 | LR__0032
00cd4     01 20 06 F6 | 	mov	local02, #1
00cd8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cd8                 | LR__0033
00cd8     57 00 00 FF 
00cdc     1C E4 05 F1 | 	add	objptr, ##44572
00ce0     F2 12 02 FB | 	rdlong	arg01, objptr
00ce4     57 00 00 FF 
00ce8     1C E4 85 F1 | 	sub	objptr, ##44572
00cec     10 15 02 F6 | 	mov	arg02, local02
00cf0     01 16 06 F6 | 	mov	arg03, #1
00cf4     A0 FF B1 FD | 	call	#__system__Mid_S
00cf8     FD 12 02 F6 | 	mov	arg01, result1
00cfc     70 01 00 FF 
00d00     84 2F 06 F6 | 	mov	local09, ##@LR__4781
00d04     17 15 02 F6 | 	mov	arg02, local09
00d08     54 DE B1 FD | 	call	#__system___string_cmp
00d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
00d10     34 00 90 5D |  if_ne	jmp	#LR__0034
00d14     10 27 02 F6 | 	mov	local05, local02
00d18     03 26 66 F0 | 	shl	local05, #3
00d1c     55 00 00 FF 
00d20     0C E4 05 F1 | 	add	objptr, ##43532
00d24     F2 28 02 F6 | 	mov	local06, objptr
00d28     F2 26 02 F1 | 	add	local05, objptr
00d2c     04 26 06 F1 | 	add	local05, #4
00d30     13 31 02 FB | 	rdlong	local10, local05
00d34     04 26 86 F1 | 	sub	local05, #4
00d38     18 33 0A F6 | 	mov	local11, local10 wz
00d3c     55 00 00 FF 
00d40     0C E4 85 F1 | 	sub	objptr, ##43532
00d44     24 00 90 AD |  if_e	jmp	#LR__0035
00d48                 | LR__0034
00d48     79 00 00 FF 
00d4c     E4 E5 05 F1 | 	add	objptr, ##62436
00d50     F2 34 02 FB | 	rdlong	local12, objptr
00d54     79 00 00 FF 
00d58     E4 E5 85 F1 | 	sub	objptr, ##62436
00d5c     1A 37 02 F6 | 	mov	local13, local12
00d60     1B 21 52 F2 | 	cmps	local02, local13 wc
00d64     01 20 06 C1 |  if_b	add	local02, #1
00d68     6C FF 9F CD |  if_b	jmp	#LR__0033
00d6c                 | LR__0035
00d6c                 | ' 
00d6c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d6c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d6c     79 00 00 FF 
00d70     E4 E5 05 F1 | 	add	objptr, ##62436
00d74     F2 24 02 FB | 	rdlong	local04, objptr
00d78     79 00 00 FF 
00d7c     E4 E5 85 F1 | 	sub	objptr, ##62436
00d80     12 21 52 F2 | 	cmps	local02, local04 wc
00d84     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d88     57 00 00 FF 
00d8c     1C E4 05 F1 | 	add	objptr, ##44572
00d90     F2 28 02 FB | 	rdlong	local06, objptr
00d94     57 00 00 FF 
00d98     1C E4 85 F1 | 	sub	objptr, ##44572
00d9c     14 13 02 F6 | 	mov	arg01, local06
00da0     09 2B 02 F6 | 	mov	local07, arg01
00da4     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00da8                 | LR__0036
00da8     15 FB C9 FA | 	rdbyte	result1, local07 wz
00dac     01 2A 06 51 |  if_ne	add	local07, #1
00db0     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00db4                 | LR__0037
00db4     09 2B 82 F1 | 	sub	local07, arg01
00db8     15 15 02 F6 | 	mov	arg02, local07
00dbc     10 15 82 F1 | 	sub	arg02, local02
00dc0     14 13 02 F6 | 	mov	arg01, local06
00dc4     40 FE B1 FD | 	call	#__system__Right_S
00dc8     FD 12 02 F6 | 	mov	arg01, result1
00dcc     40 02 B2 FD | 	call	#__system__RTrim_S
00dd0     FD 12 02 F6 | 	mov	arg01, result1
00dd4     78 01 B2 FD | 	call	#__system__LTrim_S
00dd8     79 00 00 FF 
00ddc     EC E5 05 F1 | 	add	objptr, ##62444
00de0     F2 FA 61 FC | 	wrlong	result1, objptr
00de4     22 00 00 FF 
00de8     D0 E5 85 F1 | 	sub	objptr, ##17872
00dec     F2 12 02 FB | 	rdlong	arg01, objptr
00df0     57 00 00 FF 
00df4     1C E4 85 F1 | 	sub	objptr, ##44572
00df8     01 20 86 F1 | 	sub	local02, #1
00dfc     10 15 02 F6 | 	mov	arg02, local02
00e00     7C FD B1 FD | 	call	#__system__Left_S
00e04     FD 12 02 F6 | 	mov	arg01, result1
00e08     04 02 B2 FD | 	call	#__system__RTrim_S
00e0c     FD 12 02 F6 | 	mov	arg01, result1
00e10     3C 01 B2 FD | 	call	#__system__LTrim_S
00e14     57 00 00 FF 
00e18     1C E4 05 F1 | 	add	objptr, ##44572
00e1c     F2 FA 61 FC | 	wrlong	result1, objptr
00e20     57 00 00 FF 
00e24     1C E4 85 F1 | 	sub	objptr, ##44572
00e28     1C 00 90 FD | 	jmp	#LR__0039
00e2c                 | LR__0038
00e2c     70 01 00 FF 
00e30     86 25 06 F6 | 	mov	local04, ##@LR__4782
00e34     79 00 00 FF 
00e38     EC E5 05 F1 | 	add	objptr, ##62444
00e3c     F2 24 62 FC | 	wrlong	local04, objptr
00e40     79 00 00 FF 
00e44     EC E5 85 F1 | 	sub	objptr, ##62444
00e48                 | LR__0039
00e48                 | ' 'print "line$=";line$
00e48                 | ' 'print "rest$=";rest$
00e48                 | ' 
00e48                 | ' 
00e48                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e48     57 00 00 FF 
00e4c     24 E4 05 F1 | 	add	objptr, ##44580
00e50     F2 24 02 FB | 	rdlong	local04, objptr
00e54     57 00 00 FF 
00e58     24 E4 85 F1 | 	sub	objptr, ##44580
00e5c     FF FF 7F FF 
00e60     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00e64     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e68     79 00 00 FF 
00e6c     EC E5 05 F1 | 	add	objptr, ##62444
00e70     F2 12 02 FB | 	rdlong	arg01, objptr
00e74     79 00 00 FF 
00e78     EC E5 85 F1 | 	sub	objptr, ##62444
00e7c     70 01 00 FF 
00e80     87 15 06 F6 | 	mov	arg02, ##@LR__4783
00e84     D8 DC B1 FD | 	call	#__system___string_cmp
00e88     00 FA 0D F2 | 	cmp	result1, #0 wz
00e8c     57 00 00 5F 
00e90     24 E4 05 51 |  if_ne	add	objptr, ##44580
00e94     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e98     57 00 00 5F 
00e9c     24 E4 85 51 |  if_ne	sub	objptr, ##44580
00ea0     08 01 90 5D |  if_ne	jmp	#LR__0044
00ea4                 | LR__0040
00ea4                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00ea4     57 00 00 FF 
00ea8     24 E4 05 F1 | 	add	objptr, ##44580
00eac     F2 24 02 FB | 	rdlong	local04, objptr
00eb0     57 00 00 FF 
00eb4     24 E4 85 F1 | 	sub	objptr, ##44580
00eb8     FF FF 7F FF 
00ebc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00ec0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ec4     79 00 00 FF 
00ec8     EC E5 05 F1 | 	add	objptr, ##62444
00ecc     F2 12 02 FB | 	rdlong	arg01, objptr
00ed0     79 00 00 FF 
00ed4     EC E5 85 F1 | 	sub	objptr, ##62444
00ed8     70 01 00 FF 
00edc     88 15 06 F6 | 	mov	arg02, ##@LR__4784
00ee0     7C DC B1 FD | 	call	#__system___string_cmp
00ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ee8     57 00 00 AF 
00eec     24 E4 05 A1 |  if_e	add	objptr, ##44580
00ef0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ef4     57 00 00 AF 
00ef8     24 E4 85 A1 |  if_e	sub	objptr, ##44580
00efc     AC 00 90 AD |  if_e	jmp	#LR__0044
00f00                 | LR__0041
00f00                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00f00     57 00 00 FF 
00f04     24 E4 05 F1 | 	add	objptr, ##44580
00f08     F2 24 02 FB | 	rdlong	local04, objptr
00f0c     57 00 00 FF 
00f10     24 E4 85 F1 | 	sub	objptr, ##44580
00f14     04 24 0E F2 | 	cmp	local04, #4 wz
00f18     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f1c     79 00 00 FF 
00f20     EC E5 05 F1 | 	add	objptr, ##62444
00f24     F2 12 02 FB | 	rdlong	arg01, objptr
00f28     79 00 00 FF 
00f2c     EC E5 85 F1 | 	sub	objptr, ##62444
00f30     70 01 00 FF 
00f34     89 15 06 F6 | 	mov	arg02, ##@LR__4785
00f38     24 DC B1 FD | 	call	#__system___string_cmp
00f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f40     57 00 00 5F 
00f44     24 E4 05 51 |  if_ne	add	objptr, ##44580
00f48     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f4c     57 00 00 5F 
00f50     24 E4 85 51 |  if_ne	sub	objptr, ##44580
00f54     54 00 90 5D |  if_ne	jmp	#LR__0044
00f58                 | LR__0042
00f58                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f58     57 00 00 FF 
00f5c     24 E4 05 F1 | 	add	objptr, ##44580
00f60     F2 24 02 FB | 	rdlong	local04, objptr
00f64     57 00 00 FF 
00f68     24 E4 85 F1 | 	sub	objptr, ##44580
00f6c     04 24 0E F2 | 	cmp	local04, #4 wz
00f70     38 00 90 5D |  if_ne	jmp	#LR__0043
00f74     79 00 00 FF 
00f78     EC E5 05 F1 | 	add	objptr, ##62444
00f7c     F2 12 02 FB | 	rdlong	arg01, objptr
00f80     79 00 00 FF 
00f84     EC E5 85 F1 | 	sub	objptr, ##62444
00f88     70 01 00 FF 
00f8c     8A 15 06 F6 | 	mov	arg02, ##@LR__4786
00f90     CC DB B1 FD | 	call	#__system___string_cmp
00f94     00 FA 0D F2 | 	cmp	result1, #0 wz
00f98     57 00 00 AF 
00f9c     24 E4 05 A1 |  if_e	add	objptr, ##44580
00fa0     F2 04 68 AC |  if_e	wrlong	#2, objptr
00fa4     57 00 00 AF 
00fa8     24 E4 85 A1 |  if_e	sub	objptr, ##44580
00fac                 | LR__0043
00fac                 | LR__0044
00fac     20 4E 05 F1 | 	add	fp, #32
00fb0     A7 00 68 FC | 	wrlong	#0, fp
00fb4     20 4E 85 F1 | 	sub	fp, #32
00fb8     00 20 06 F6 | 	mov	local02, #0
00fbc     01 38 06 F6 | 	mov	local14, #1
00fc0                 | ' 
00fc0                 | ' ' 1b: find separators
00fc0                 | ' 
00fc0                 | ' 107
00fc0                 | ' separators(0)=0
00fc0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fc0                 | LR__0045
00fc0     01 20 06 F1 | 	add	local02, #1
00fc4     57 00 00 FF 
00fc8     1C E4 05 F1 | 	add	objptr, ##44572
00fcc     F2 12 02 FB | 	rdlong	arg01, objptr
00fd0     57 00 00 FF 
00fd4     1C E4 85 F1 | 	sub	objptr, ##44572
00fd8     10 15 02 F6 | 	mov	arg02, local02
00fdc     01 16 06 F6 | 	mov	arg03, #1
00fe0     B4 FC B1 FD | 	call	#__system__Mid_S
00fe4     79 00 00 FF 
00fe8     F0 E5 05 F1 | 	add	objptr, ##62448
00fec     F2 FA 61 FC | 	wrlong	result1, objptr
00ff0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00ff0     FD 12 02 F6 | 	mov	arg01, result1
00ff4     79 00 00 FF 
00ff8     F0 E5 85 F1 | 	sub	objptr, ##62448
00ffc     B8 29 B0 FD | 	call	#_isseparator
01000     00 FA 0D F2 | 	cmp	result1, #0 wz
01004     1C 00 90 AD |  if_e	jmp	#LR__0046
01008     1C 23 02 F6 | 	mov	local03, local14
0100c     02 22 66 F0 | 	shl	local03, #2
01010     20 4E 05 F1 | 	add	fp, #32
01014     A7 22 02 F1 | 	add	local03, fp
01018     11 21 62 FC | 	wrlong	local02, local03
0101c     01 38 06 F1 | 	add	local14, #1
01020     20 4E 85 F1 | 	sub	fp, #32
01024                 | LR__0046
01024     79 00 00 FF 
01028     E4 E5 05 F1 | 	add	objptr, ##62436
0102c     F2 24 02 FB | 	rdlong	local04, objptr
01030     79 00 00 FF 
01034     E4 E5 85 F1 | 	sub	objptr, ##62436
01038     12 21 5A F2 | 	cmps	local02, local04 wcz
0103c     80 FF 9F ED |  if_be	jmp	#LR__0045
01040     1C 23 02 F6 | 	mov	local03, local14
01044     02 22 66 F0 | 	shl	local03, #2
01048     20 4E 05 F1 | 	add	fp, #32
0104c     A7 22 02 F1 | 	add	local03, fp
01050     11 21 62 FC | 	wrlong	local02, local03
01054     00 3A 06 F6 | 	mov	local15, #0
01058                 | ' for i=0 to j-1 
01058     00 20 06 F6 | 	mov	local02, #0
0105c     1C 3D 02 F6 | 	mov	local16, local14
01060     20 4E 85 F1 | 	sub	fp, #32
01064                 | LR__0047
01064     1E 21 52 F2 | 	cmps	local02, local16 wc
01068     88 01 90 3D |  if_ae	jmp	#LR__0051
0106c     10 23 02 F6 | 	mov	local03, local02
01070     02 22 66 F0 | 	shl	local03, #2
01074     20 4E 05 F1 | 	add	fp, #32
01078     A7 22 02 F1 | 	add	local03, fp
0107c     11 27 02 FB | 	rdlong	local05, local03
01080     79 00 00 FF 
01084     F8 E5 05 F1 | 	add	objptr, ##62456
01088     F2 26 62 FC | 	wrlong	local05, objptr
0108c     10 23 02 F6 | 	mov	local03, local02
01090     01 22 06 F1 | 	add	local03, #1
01094     02 22 66 F0 | 	shl	local03, #2
01098     A7 2E 02 F6 | 	mov	local09, fp
0109c     A7 22 02 F1 | 	add	local03, fp
010a0     11 27 02 FB | 	rdlong	local05, local03
010a4     04 E4 05 F1 | 	add	objptr, #4
010a8     F2 26 62 FC | 	wrlong	local05, objptr
010ac                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
010ac     04 E4 85 F1 | 	sub	objptr, #4
010b0     F2 24 02 FB | 	rdlong	local04, objptr
010b4     79 00 00 FF 
010b8     F8 E5 85 F1 | 	sub	objptr, ##62456
010bc     01 24 56 F2 | 	cmps	local04, #1 wc
010c0     20 4E 85 F1 | 	sub	fp, #32
010c4     84 00 90 CD |  if_b	jmp	#LR__0049
010c8     57 00 00 FF 
010cc     1C E4 05 F1 | 	add	objptr, ##44572
010d0     F2 12 02 FB | 	rdlong	arg01, objptr
010d4     22 00 00 FF 
010d8     DC E5 05 F1 | 	add	objptr, ##17884
010dc     F2 14 02 FB | 	rdlong	arg02, objptr
010e0     79 00 00 FF 
010e4     F8 E5 85 F1 | 	sub	objptr, ##62456
010e8     01 16 06 F6 | 	mov	arg03, #1
010ec     A8 FB B1 FD | 	call	#__system__Mid_S
010f0     7A 00 00 FF 
010f4     00 E4 05 F1 | 	add	objptr, ##62464
010f8     F2 FA 61 FC | 	wrlong	result1, objptr
010fc     7A 00 00 FF 
01100     00 E4 85 F1 | 	sub	objptr, ##62464
01104     FD 12 02 F6 | 	mov	arg01, result1
01108     70 01 00 FF 
0110c     8B 15 06 F6 | 	mov	arg02, ##@LR__4787
01110     4C DA B1 FD | 	call	#__system___string_cmp
01114     00 FA 0D F2 | 	cmp	result1, #0 wz
01118     30 00 90 AD |  if_e	jmp	#LR__0048
0111c     1D 2F 02 F6 | 	mov	local09, local15
01120     03 2E 66 F0 | 	shl	local09, #3
01124     55 00 00 FF 
01128     0C E4 05 F1 | 	add	objptr, ##43532
0112c     F2 2E 02 F1 | 	add	local09, objptr
01130     24 00 00 FF 
01134     F4 E5 05 F1 | 	add	objptr, ##18932
01138     F2 28 02 FB | 	rdlong	local06, objptr
0113c     7A 00 00 FF 
01140     00 E4 85 F1 | 	sub	objptr, ##62464
01144     17 29 62 FC | 	wrlong	local06, local09
01148     01 3A 06 F1 | 	add	local15, #1
0114c                 | LR__0048
0114c                 | LR__0049
0114c     57 00 00 FF 
01150     1C E4 05 F1 | 	add	objptr, ##44572
01154     F2 12 02 FB | 	rdlong	arg01, objptr
01158     22 00 00 FF 
0115c     DC E5 05 F1 | 	add	objptr, ##17884
01160     F2 14 02 FB | 	rdlong	arg02, objptr
01164     01 14 06 F1 | 	add	arg02, #1
01168     04 E4 05 F1 | 	add	objptr, #4
0116c     F2 16 02 FB | 	rdlong	arg03, objptr
01170     04 E4 85 F1 | 	sub	objptr, #4
01174     F2 30 02 FB | 	rdlong	local10, objptr
01178     79 00 00 FF 
0117c     F8 E5 85 F1 | 	sub	objptr, ##62456
01180     18 33 02 F6 | 	mov	local11, local10
01184     19 17 82 F1 | 	sub	arg03, local11
01188     01 16 86 F1 | 	sub	arg03, #1
0118c     08 FB B1 FD | 	call	#__system__Mid_S
01190     7A 00 00 FF 
01194     00 E4 05 F1 | 	add	objptr, ##62464
01198     F2 FA 61 FC | 	wrlong	result1, objptr
0119c     7A 00 00 FF 
011a0     00 E4 85 F1 | 	sub	objptr, ##62464
011a4     FD 12 02 F6 | 	mov	arg01, result1
011a8     70 01 00 FF 
011ac     8C 15 06 F6 | 	mov	arg02, ##@LR__4788
011b0     AC D9 B1 FD | 	call	#__system___string_cmp
011b4     00 FA 0D F2 | 	cmp	result1, #0 wz
011b8     30 00 90 AD |  if_e	jmp	#LR__0050
011bc     1D 2F 02 F6 | 	mov	local09, local15
011c0     03 2E 66 F0 | 	shl	local09, #3
011c4     55 00 00 FF 
011c8     0C E4 05 F1 | 	add	objptr, ##43532
011cc     F2 2E 02 F1 | 	add	local09, objptr
011d0     24 00 00 FF 
011d4     F4 E5 05 F1 | 	add	objptr, ##18932
011d8     F2 28 02 FB | 	rdlong	local06, objptr
011dc     7A 00 00 FF 
011e0     00 E4 85 F1 | 	sub	objptr, ##62464
011e4     17 29 62 FC | 	wrlong	local06, local09
011e8     01 3A 06 F1 | 	add	local15, #1
011ec                 | LR__0050
011ec     01 20 06 F1 | 	add	local02, #1
011f0     70 FE 9F FD | 	jmp	#LR__0047
011f4                 | LR__0051
011f4     00 20 06 F6 | 	mov	local02, #0
011f8                 | ' 
011f8                 | ' ' 1d : find strings
011f8                 | ' 
011f8                 | ' i=0
011f8                 | ' do
011f8                 | LR__0052
011f8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011f8     10 27 02 F6 | 	mov	local05, local02
011fc     03 26 66 F0 | 	shl	local05, #3
01200     55 00 00 FF 
01204     0C E4 05 F1 | 	add	objptr, ##43532
01208     F2 26 02 F1 | 	add	local05, objptr
0120c     13 13 02 FB | 	rdlong	arg01, local05
01210     70 01 00 FF 
01214     8D 15 06 F6 | 	mov	arg02, ##@LR__4789
01218     55 00 00 FF 
0121c     0C E4 85 F1 | 	sub	objptr, ##43532
01220     3C D9 B1 FD | 	call	#__system___string_cmp
01224     00 FA 0D F2 | 	cmp	result1, #0 wz
01228     01 20 06 51 |  if_ne	add	local02, #1
0122c     50 01 90 5D |  if_ne	jmp	#LR__0057
01230     10 3F 02 F6 | 	mov	local17, local02
01234                 | LR__0053
01234     10 2F 02 F6 | 	mov	local09, local02
01238     01 2E 06 F1 | 	add	local09, #1
0123c     03 2E 66 F0 | 	shl	local09, #3
01240     55 00 00 FF 
01244     0C E4 05 F1 | 	add	objptr, ##43532
01248     F2 2E 02 F1 | 	add	local09, objptr
0124c     17 31 02 FB | 	rdlong	local10, local09
01250     24 00 00 FF 
01254     F4 E5 05 F1 | 	add	objptr, ##18932
01258     F2 30 62 FC | 	wrlong	local10, objptr
0125c     1F 2F 02 F6 | 	mov	local09, local17
01260     03 2E 66 F0 | 	shl	local09, #3
01264     24 00 00 FF 
01268     F4 E5 85 F1 | 	sub	objptr, ##18932
0126c     F2 2E 02 F1 | 	add	local09, objptr
01270     1F 37 02 F6 | 	mov	local13, local17
01274     03 36 66 F0 | 	shl	local13, #3
01278     F2 36 02 F1 | 	add	local13, objptr
0127c     1B 13 02 FB | 	rdlong	arg01, local13
01280     55 00 00 FF 
01284     0C E4 85 F1 | 	sub	objptr, ##43532
01288     18 33 02 F6 | 	mov	local11, local10
0128c     19 15 02 F6 | 	mov	arg02, local11
01290     00 D9 B1 FD | 	call	#__system___string_concat
01294     17 FB 61 FC | 	wrlong	result1, local09
01298     10 39 02 F6 | 	mov	local14, local02
0129c     01 38 06 F1 | 	add	local14, #1
012a0     1D 41 02 F6 | 	mov	local18, local15
012a4     01 40 06 F1 | 	add	local18, #1
012a8     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
012ac                 | LR__0054
012ac     20 39 52 F2 | 	cmps	local14, local18 wc
012b0     70 00 90 3D |  if_ae	jmp	#LR__0056
012b4     1C 27 02 F6 | 	mov	local05, local14
012b8     01 26 06 F1 | 	add	local05, #1
012bc     03 26 66 F0 | 	shl	local05, #3
012c0     55 00 00 FF 
012c4     0C E4 05 F1 | 	add	objptr, ##43532
012c8     F2 26 02 F1 | 	add	local05, objptr
012cc     13 25 02 FB | 	rdlong	local04, local05
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     01 28 06 F1 | 	add	local06, #1
012d8     03 28 66 F0 | 	shl	local06, #3
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     04 28 06 F1 | 	add	local06, #4
012e4     14 23 02 FB | 	rdlong	local03, local06
012e8     1C 29 02 F6 | 	mov	local06, local14
012ec     03 28 66 F0 | 	shl	local06, #3
012f0     F2 32 02 F6 | 	mov	local11, objptr
012f4     F2 28 02 F1 | 	add	local06, objptr
012f8     14 25 62 FC | 	wrlong	local04, local06
012fc     1C 31 02 F6 | 	mov	local10, local14
01300     18 35 02 F6 | 	mov	local12, local10
01304     03 34 66 F0 | 	shl	local12, #3
01308     F2 34 02 F1 | 	add	local12, objptr
0130c     04 34 06 F1 | 	add	local12, #4
01310     1A 23 62 FC | 	wrlong	local03, local12
01314     01 38 06 F1 | 	add	local14, #1
01318     55 00 00 FF 
0131c     0C E4 85 F1 | 	sub	objptr, ##43532
01320     88 FF 9F FD | 	jmp	#LR__0054
01324                 | LR__0055
01324                 | LR__0056
01324     01 3A 86 F1 | 	sub	local15, #1
01328     7A 00 00 FF 
0132c     00 E4 05 F1 | 	add	objptr, ##62464
01330     F2 12 02 FB | 	rdlong	arg01, objptr
01334     7A 00 00 FF 
01338     00 E4 85 F1 | 	sub	objptr, ##62464
0133c     70 01 00 FF 
01340     8F 15 06 F6 | 	mov	arg02, ##@LR__4790
01344     18 D8 B1 FD | 	call	#__system___string_cmp
01348     00 FA 0D F2 | 	cmp	result1, #0 wz
0134c     1D 21 52 52 |  if_ne	cmps	local02, local15 wc
01350     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01354                 | '   if p$<>"""" then k+=1:i+=1
01354     7A 00 00 FF 
01358     00 E4 05 F1 | 	add	objptr, ##62464
0135c     F2 12 02 FB | 	rdlong	arg01, objptr
01360     7A 00 00 FF 
01364     00 E4 85 F1 | 	sub	objptr, ##62464
01368     70 01 00 FF 
0136c     91 15 06 F6 | 	mov	arg02, ##@LR__4791
01370     EC D7 B1 FD | 	call	#__system___string_cmp
01374     00 FA 0D F2 | 	cmp	result1, #0 wz
01378     01 3A 06 51 |  if_ne	add	local15, #1
0137c     01 20 06 51 |  if_ne	add	local02, #1
01380                 | LR__0057
01380     1D 21 52 F2 | 	cmps	local02, local15 wc
01384     70 FE 9F CD |  if_b	jmp	#LR__0052
01388     00 20 06 F6 | 	mov	local02, #0
0138c                 | ' 
0138c                 | ' ' 1e : concatenate strings if "" detected between
0138c                 | '  
0138c                 | ' i=0 : do
0138c                 | LR__0058
0138c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0138c     10 27 02 F6 | 	mov	local05, local02
01390     03 26 66 F0 | 	shl	local05, #3
01394     55 00 00 FF 
01398     0C E4 05 F1 | 	add	objptr, ##43532
0139c     F2 26 02 F1 | 	add	local05, objptr
013a0     13 13 02 FB | 	rdlong	arg01, local05
013a4     01 14 06 F6 | 	mov	arg02, #1
013a8     55 00 00 FF 
013ac     0C E4 85 F1 | 	sub	objptr, ##43532
013b0     54 F8 B1 FD | 	call	#__system__Right_S
013b4     FD 12 02 F6 | 	mov	arg01, result1
013b8     70 01 00 FF 
013bc     93 15 06 F6 | 	mov	arg02, ##@LR__4792
013c0     9C D7 B1 FD | 	call	#__system___string_cmp
013c4     00 FA 0D F2 | 	cmp	result1, #0 wz
013c8     78 01 90 5D |  if_ne	jmp	#LR__0064
013cc     10 29 02 F6 | 	mov	local06, local02
013d0     01 28 06 F1 | 	add	local06, #1
013d4     03 28 66 F0 | 	shl	local06, #3
013d8     55 00 00 FF 
013dc     0C E4 05 F1 | 	add	objptr, ##43532
013e0     F2 32 02 F6 | 	mov	local11, objptr
013e4     F2 28 02 F1 | 	add	local06, objptr
013e8     14 13 02 FB | 	rdlong	arg01, local06
013ec     01 14 06 F6 | 	mov	arg02, #1
013f0     55 00 00 FF 
013f4     0C E4 85 F1 | 	sub	objptr, ##43532
013f8     84 F7 B1 FD | 	call	#__system__Left_S
013fc     FD 12 02 F6 | 	mov	arg01, result1
01400     70 01 00 FF 
01404     95 15 06 F6 | 	mov	arg02, ##@LR__4793
01408     54 D7 B1 FD | 	call	#__system___string_cmp
0140c     00 FA 0D F2 | 	cmp	result1, #0 wz
01410     30 01 90 5D |  if_ne	jmp	#LR__0064
01414     10 2F 02 F6 | 	mov	local09, local02
01418     03 2E 66 F0 | 	shl	local09, #3
0141c     55 00 00 FF 
01420     0C E4 05 F1 | 	add	objptr, ##43532
01424     F2 2E 02 F1 | 	add	local09, objptr
01428     10 37 02 F6 | 	mov	local13, local02
0142c     03 36 66 F0 | 	shl	local13, #3
01430     F2 36 02 F1 | 	add	local13, objptr
01434     1B 29 02 FB | 	rdlong	local06, local13
01438     10 35 02 F6 | 	mov	local12, local02
0143c     01 34 06 F1 | 	add	local12, #1
01440     03 34 66 F0 | 	shl	local12, #3
01444     F2 34 02 F1 | 	add	local12, objptr
01448     1A 33 02 FB | 	rdlong	local11, local12
0144c     10 43 02 F6 | 	mov	local19, local02
01450     01 42 06 F1 | 	add	local19, #1
01454     21 45 02 F6 | 	mov	local20, local19
01458     03 44 66 F0 | 	shl	local20, #3
0145c     F2 46 02 F6 | 	mov	local21, objptr
01460     F2 44 02 F1 | 	add	local20, objptr
01464     22 13 02 FB | 	rdlong	arg01, local20
01468     55 00 00 FF 
0146c     0C E4 85 F1 | 	sub	objptr, ##43532
01470     09 2B 02 F6 | 	mov	local07, arg01
01474     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01478                 | LR__0059
01478     15 FB C9 FA | 	rdbyte	result1, local07 wz
0147c     01 2A 06 51 |  if_ne	add	local07, #1
01480     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01484                 | LR__0060
01484     09 2B 82 F1 | 	sub	local07, arg01
01488     15 31 02 F6 | 	mov	local10, local07
0148c     01 30 86 F1 | 	sub	local10, #1
01490     19 13 02 F6 | 	mov	arg01, local11
01494     18 15 02 F6 | 	mov	arg02, local10
01498     6C F7 B1 FD | 	call	#__system__Right_S
0149c     FD 32 02 F6 | 	mov	local11, result1
014a0     14 13 02 F6 | 	mov	arg01, local06
014a4     19 15 02 F6 | 	mov	arg02, local11
014a8     E8 D6 B1 FD | 	call	#__system___string_concat
014ac     17 FB 61 FC | 	wrlong	result1, local09
014b0                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
014b0     10 39 02 F6 | 	mov	local14, local02
014b4     01 38 06 F1 | 	add	local14, #1
014b8     1D 49 02 F6 | 	mov	local22, local15
014bc     01 48 06 F1 | 	add	local22, #1
014c0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014c4                 | LR__0061
014c4     24 39 52 F2 | 	cmps	local14, local22 wc
014c8     70 00 90 3D |  if_ae	jmp	#LR__0063
014cc     1C 27 02 F6 | 	mov	local05, local14
014d0     01 26 06 F1 | 	add	local05, #1
014d4     03 26 66 F0 | 	shl	local05, #3
014d8     55 00 00 FF 
014dc     0C E4 05 F1 | 	add	objptr, ##43532
014e0     F2 26 02 F1 | 	add	local05, objptr
014e4     13 25 02 FB | 	rdlong	local04, local05
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     01 28 06 F1 | 	add	local06, #1
014f0     03 28 66 F0 | 	shl	local06, #3
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     04 28 06 F1 | 	add	local06, #4
014fc     14 23 02 FB | 	rdlong	local03, local06
01500     1C 29 02 F6 | 	mov	local06, local14
01504     03 28 66 F0 | 	shl	local06, #3
01508     F2 32 02 F6 | 	mov	local11, objptr
0150c     F2 28 02 F1 | 	add	local06, objptr
01510     14 25 62 FC | 	wrlong	local04, local06
01514     1C 31 02 F6 | 	mov	local10, local14
01518     18 35 02 F6 | 	mov	local12, local10
0151c     03 34 66 F0 | 	shl	local12, #3
01520     F2 34 02 F1 | 	add	local12, objptr
01524     04 34 06 F1 | 	add	local12, #4
01528     1A 23 62 FC | 	wrlong	local03, local12
0152c     01 38 06 F1 | 	add	local14, #1
01530     55 00 00 FF 
01534     0C E4 85 F1 | 	sub	objptr, ##43532
01538     88 FF 9F FD | 	jmp	#LR__0061
0153c                 | LR__0062
0153c                 | LR__0063
0153c     01 20 86 F1 | 	sub	local02, #1
01540     01 3A 86 F1 | 	sub	local15, #1
01544                 | LR__0064
01544     01 20 06 F1 | 	add	local02, #1
01548     1D 21 52 F2 | 	cmps	local02, local15 wc
0154c     3C FE 9F CD |  if_b	jmp	#LR__0058
01550     00 20 06 F6 | 	mov	local02, #0
01554                 | '  
01554                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01554                 | '  
01554                 | ' i=0 : do
01554                 | LR__0065
01554     10 2F 02 F6 | 	mov	local09, local02
01558     03 2E 66 F0 | 	shl	local09, #3
0155c     55 00 00 FF 
01560     0C E4 05 F1 | 	add	objptr, ##43532
01564     F2 2E 02 F1 | 	add	local09, objptr
01568     17 29 02 FB | 	rdlong	local06, local09
0156c     24 00 00 FF 
01570     FC E5 05 F1 | 	add	objptr, ##18940
01574     F2 28 62 FC | 	wrlong	local06, objptr
01578     10 2F 02 F6 | 	mov	local09, local02
0157c     01 2E 06 F1 | 	add	local09, #1
01580     03 2E 66 F0 | 	shl	local09, #3
01584     24 00 00 FF 
01588     FC E5 85 F1 | 	sub	objptr, ##18940
0158c     F2 2E 02 F1 | 	add	local09, objptr
01590     17 29 02 FB | 	rdlong	local06, local09
01594     25 00 00 FF 
01598     00 E4 05 F1 | 	add	objptr, ##18944
0159c     F2 28 62 FC | 	wrlong	local06, objptr
015a0                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
015a0     04 E4 85 F1 | 	sub	objptr, #4
015a4     F2 12 02 FB | 	rdlong	arg01, objptr
015a8     7A 00 00 FF 
015ac     08 E4 85 F1 | 	sub	objptr, ##62472
015b0     70 01 00 FF 
015b4     97 15 06 F6 | 	mov	arg02, ##@LR__4794
015b8     A4 D5 B1 FD | 	call	#__system___string_cmp
015bc     00 FA 0D F2 | 	cmp	result1, #0 wz
015c0     04 01 90 AD |  if_e	jmp	#LR__0066
015c4     7A 00 00 FF 
015c8     08 E4 05 F1 | 	add	objptr, ##62472
015cc     F2 12 02 FB | 	rdlong	arg01, objptr
015d0     7A 00 00 FF 
015d4     08 E4 85 F1 | 	sub	objptr, ##62472
015d8     70 01 00 FF 
015dc     99 15 06 F6 | 	mov	arg02, ##@LR__4795
015e0     7C D5 B1 FD | 	call	#__system___string_cmp
015e4     FD 22 0A F6 | 	mov	local03, result1 wz
015e8     DC 00 90 AD |  if_e	jmp	#LR__0066
015ec     7A 00 00 FF 
015f0     08 E4 05 F1 | 	add	objptr, ##62472
015f4     F2 12 02 FB | 	rdlong	arg01, objptr
015f8     7A 00 00 FF 
015fc     08 E4 85 F1 | 	sub	objptr, ##62472
01600     70 01 00 FF 
01604     9B 15 06 F6 | 	mov	arg02, ##@LR__4796
01608     54 D5 B1 FD | 	call	#__system___string_cmp
0160c     00 FA 0D F2 | 	cmp	result1, #0 wz
01610     B4 00 90 AD |  if_e	jmp	#LR__0066
01614     7A 00 00 FF 
01618     08 E4 05 F1 | 	add	objptr, ##62472
0161c     F2 12 02 FB | 	rdlong	arg01, objptr
01620     7A 00 00 FF 
01624     08 E4 85 F1 | 	sub	objptr, ##62472
01628     70 01 00 FF 
0162c     9D 33 06 F6 | 	mov	local11, ##@LR__4797
01630     19 15 02 F6 | 	mov	arg02, local11
01634     28 D5 B1 FD | 	call	#__system___string_cmp
01638     00 FA 0D F2 | 	cmp	result1, #0 wz
0163c     88 00 90 AD |  if_e	jmp	#LR__0066
01640     7A 00 00 FF 
01644     08 E4 05 F1 | 	add	objptr, ##62472
01648     F2 12 02 FB | 	rdlong	arg01, objptr
0164c     7A 00 00 FF 
01650     08 E4 85 F1 | 	sub	objptr, ##62472
01654     70 01 00 FF 
01658     9F 31 06 F6 | 	mov	local10, ##@LR__4798
0165c     18 33 02 F6 | 	mov	local11, local10
01660     19 15 02 F6 | 	mov	arg02, local11
01664     F8 D4 B1 FD | 	call	#__system___string_cmp
01668     00 FA 0D F2 | 	cmp	result1, #0 wz
0166c     58 00 90 AD |  if_e	jmp	#LR__0066
01670     7A 00 00 FF 
01674     08 E4 05 F1 | 	add	objptr, ##62472
01678     F2 12 02 FB | 	rdlong	arg01, objptr
0167c     7A 00 00 FF 
01680     08 E4 85 F1 | 	sub	objptr, ##62472
01684     70 01 00 FF 
01688     A1 31 06 F6 | 	mov	local10, ##@LR__4799
0168c     18 15 02 F6 | 	mov	arg02, local10
01690     CC D4 B1 FD | 	call	#__system___string_cmp
01694     FD 32 0A F6 | 	mov	local11, result1 wz
01698     2C 00 90 AD |  if_e	jmp	#LR__0066
0169c     7A 00 00 FF 
016a0     08 E4 05 F1 | 	add	objptr, ##62472
016a4     F2 12 02 FB | 	rdlong	arg01, objptr
016a8     7A 00 00 FF 
016ac     08 E4 85 F1 | 	sub	objptr, ##62472
016b0     70 01 00 FF 
016b4     A3 37 06 F6 | 	mov	local13, ##@LR__4800
016b8     1B 15 02 F6 | 	mov	arg02, local13
016bc     A0 D4 B1 FD | 	call	#__system___string_cmp
016c0     FD 30 0A F6 | 	mov	local10, result1 wz
016c4     30 00 90 5D |  if_ne	jmp	#LR__0067
016c8                 | LR__0066
016c8     7A 00 00 FF 
016cc     0C E4 05 F1 | 	add	objptr, ##62476
016d0     F2 12 02 FB | 	rdlong	arg01, objptr
016d4     7A 00 00 FF 
016d8     0C E4 85 F1 | 	sub	objptr, ##62476
016dc     70 01 00 FF 
016e0     A5 4B 06 F6 | 	mov	local23, ##@LR__4801
016e4     25 35 02 F6 | 	mov	local12, local23
016e8     1A 15 02 F6 | 	mov	arg02, local12
016ec     70 D4 B1 FD | 	call	#__system___string_cmp
016f0     FD 36 0A F6 | 	mov	local13, result1 wz
016f4     18 01 90 AD |  if_e	jmp	#LR__0070
016f8                 | LR__0067
016f8     7A 00 00 FF 
016fc     08 E4 05 F1 | 	add	objptr, ##62472
01700     F2 12 02 FB | 	rdlong	arg01, objptr
01704     7A 00 00 FF 
01708     08 E4 85 F1 | 	sub	objptr, ##62472
0170c     70 01 00 FF 
01710     A7 4B 06 F6 | 	mov	local23, ##@LR__4802
01714     25 15 02 F6 | 	mov	arg02, local23
01718     44 D4 B1 FD | 	call	#__system___string_cmp
0171c     FD 34 0A F6 | 	mov	local12, result1 wz
01720     30 00 90 5D |  if_ne	jmp	#LR__0068
01724     7A 00 00 FF 
01728     0C E4 05 F1 | 	add	objptr, ##62476
0172c     F2 12 02 FB | 	rdlong	arg01, objptr
01730     7A 00 00 FF 
01734     0C E4 85 F1 | 	sub	objptr, ##62476
01738     70 01 00 FF 
0173c     A9 45 06 F6 | 	mov	local20, ##@LR__4803
01740     22 43 02 F6 | 	mov	local19, local20
01744     21 15 02 F6 | 	mov	arg02, local19
01748     14 D4 B1 FD | 	call	#__system___string_cmp
0174c     FD 4A 0A F6 | 	mov	local23, result1 wz
01750     BC 00 90 AD |  if_e	jmp	#LR__0070
01754                 | LR__0068
01754     7A 00 00 FF 
01758     08 E4 05 F1 | 	add	objptr, ##62472
0175c     F2 12 02 FB | 	rdlong	arg01, objptr
01760     7A 00 00 FF 
01764     08 E4 85 F1 | 	sub	objptr, ##62472
01768     70 01 00 FF 
0176c     AB 45 06 F6 | 	mov	local20, ##@LR__4804
01770     22 15 02 F6 | 	mov	arg02, local20
01774     E8 D3 B1 FD | 	call	#__system___string_cmp
01778     FD 42 0A F6 | 	mov	local19, result1 wz
0177c     30 00 90 5D |  if_ne	jmp	#LR__0069
01780     7A 00 00 FF 
01784     0C E4 05 F1 | 	add	objptr, ##62476
01788     F2 12 02 FB | 	rdlong	arg01, objptr
0178c     7A 00 00 FF 
01790     0C E4 85 F1 | 	sub	objptr, ##62476
01794     70 01 00 FF 
01798     AD 4D 06 F6 | 	mov	local24, ##@LR__4805
0179c     26 47 02 F6 | 	mov	local21, local24
017a0     23 15 02 F6 | 	mov	arg02, local21
017a4     B8 D3 B1 FD | 	call	#__system___string_cmp
017a8     FD 44 0A F6 | 	mov	local20, result1 wz
017ac     60 00 90 AD |  if_e	jmp	#LR__0070
017b0                 | LR__0069
017b0     7A 00 00 FF 
017b4     08 E4 05 F1 | 	add	objptr, ##62472
017b8     F2 12 02 FB | 	rdlong	arg01, objptr
017bc     7A 00 00 FF 
017c0     08 E4 85 F1 | 	sub	objptr, ##62472
017c4     70 01 00 FF 
017c8     AF 4F 06 F6 | 	mov	local25, ##@LR__4806
017cc     27 4D 02 F6 | 	mov	local24, local25
017d0     26 15 02 F6 | 	mov	arg02, local24
017d4     88 D3 B1 FD | 	call	#__system___string_cmp
017d8     FD 46 0A F6 | 	mov	local21, result1 wz
017dc     10 01 90 5D |  if_ne	jmp	#LR__0074
017e0     7A 00 00 FF 
017e4     0C E4 05 F1 | 	add	objptr, ##62476
017e8     F2 12 02 FB | 	rdlong	arg01, objptr
017ec     7A 00 00 FF 
017f0     0C E4 85 F1 | 	sub	objptr, ##62476
017f4     70 01 00 FF 
017f8     B1 51 06 F6 | 	mov	local26, ##@LR__4807
017fc     28 4F 02 F6 | 	mov	local25, local26
01800     27 15 02 F6 | 	mov	arg02, local25
01804     58 D3 B1 FD | 	call	#__system___string_cmp
01808     FD 4C 0A F6 | 	mov	local24, result1 wz
0180c     E0 00 90 5D |  if_ne	jmp	#LR__0074
01810                 | LR__0070
01810     10 2F 02 F6 | 	mov	local09, local02
01814     03 2E 66 F0 | 	shl	local09, #3
01818     55 00 00 FF 
0181c     0C E4 05 F1 | 	add	objptr, ##43532
01820     F2 2E 02 F1 | 	add	local09, objptr
01824     24 00 00 FF 
01828     FC E5 05 F1 | 	add	objptr, ##18940
0182c     F2 12 02 FB | 	rdlong	arg01, objptr
01830     04 E4 05 F1 | 	add	objptr, #4
01834     F2 30 02 FB | 	rdlong	local10, objptr
01838     7A 00 00 FF 
0183c     0C E4 85 F1 | 	sub	objptr, ##62476
01840     18 33 02 F6 | 	mov	local11, local10
01844     19 15 02 F6 | 	mov	arg02, local11
01848     48 D3 B1 FD | 	call	#__system___string_concat
0184c     17 FB 61 FC | 	wrlong	result1, local09
01850                 | '     lparts(i).part$=s1$+s2$
01850                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01850     10 39 02 F6 | 	mov	local14, local02
01854     01 38 06 F1 | 	add	local14, #1
01858     1D 53 02 F6 | 	mov	local27, local15
0185c     01 52 06 F1 | 	add	local27, #1
01860     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01864                 | LR__0071
01864     29 39 52 F2 | 	cmps	local14, local27 wc
01868     7C 00 90 3D |  if_ae	jmp	#LR__0073
0186c     1C 27 02 F6 | 	mov	local05, local14
01870     01 26 06 F1 | 	add	local05, #1
01874     03 26 66 F0 | 	shl	local05, #3
01878     55 00 00 FF 
0187c     0C E4 05 F1 | 	add	objptr, ##43532
01880     F2 26 02 F1 | 	add	local05, objptr
01884     13 25 02 FB | 	rdlong	local04, local05
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     01 28 06 F1 | 	add	local06, #1
01890     03 28 66 F0 | 	shl	local06, #3
01894     F2 28 02 F1 | 	add	local06, objptr
01898     04 28 06 F1 | 	add	local06, #4
0189c     14 23 02 FB | 	rdlong	local03, local06
018a0     1C 29 02 F6 | 	mov	local06, local14
018a4     03 28 66 F0 | 	shl	local06, #3
018a8     F2 32 02 F6 | 	mov	local11, objptr
018ac     F2 28 02 F1 | 	add	local06, objptr
018b0     14 25 62 FC | 	wrlong	local04, local06
018b4     1C 31 02 F6 | 	mov	local10, local14
018b8     18 37 02 F6 | 	mov	local13, local10
018bc     1B 35 02 F6 | 	mov	local12, local13
018c0     03 34 66 F0 | 	shl	local12, #3
018c4     F2 4A 02 F6 | 	mov	local23, objptr
018c8     F2 34 02 F1 | 	add	local12, objptr
018cc     04 34 06 F1 | 	add	local12, #4
018d0     1A 23 62 FC | 	wrlong	local03, local12
018d4     04 34 86 F1 | 	sub	local12, #4
018d8     01 38 06 F1 | 	add	local14, #1
018dc     55 00 00 FF 
018e0     0C E4 85 F1 | 	sub	objptr, ##43532
018e4     7C FF 9F FD | 	jmp	#LR__0071
018e8                 | LR__0072
018e8                 | LR__0073
018e8     01 20 86 F1 | 	sub	local02, #1
018ec     01 3A 86 F1 | 	sub	local15, #1
018f0                 | LR__0074
018f0     01 20 06 F1 | 	add	local02, #1
018f4     1D 21 52 F2 | 	cmps	local02, local15 wc
018f8     58 FC 9F CD |  if_b	jmp	#LR__0065
018fc                 | '  
018fc                 | ' ' 1f : now remove parts that are spaces
018fc                 | ' 
018fc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018fc     00 20 06 F6 | 	mov	local02, #0
01900     1D 55 02 F6 | 	mov	local28, local15
01904     01 54 06 F1 | 	add	local28, #1
01908                 | LR__0075
01908     2A 21 52 F2 | 	cmps	local02, local28 wc
0190c     50 00 90 3D |  if_ae	jmp	#LR__0076
01910     10 2F 02 F6 | 	mov	local09, local02
01914     03 2E 66 F0 | 	shl	local09, #3
01918     55 00 00 FF 
0191c     0C E4 05 F1 | 	add	objptr, ##43532
01920     F2 2E 02 F1 | 	add	local09, objptr
01924     10 33 02 F6 | 	mov	local11, local02
01928     19 31 02 F6 | 	mov	local10, local11
0192c     18 37 02 F6 | 	mov	local13, local10
01930     03 36 66 F0 | 	shl	local13, #3
01934     F2 34 02 F6 | 	mov	local12, objptr
01938     F2 36 02 F1 | 	add	local13, objptr
0193c     1B 13 02 FB | 	rdlong	arg01, local13
01940     55 00 00 FF 
01944     0C E4 85 F1 | 	sub	objptr, ##43532
01948     C4 F6 B1 FD | 	call	#__system__RTrim_S
0194c     FD 12 02 F6 | 	mov	arg01, result1
01950     FC F5 B1 FD | 	call	#__system__LTrim_S
01954     17 FB 61 FC | 	wrlong	result1, local09
01958     01 20 06 F1 | 	add	local02, #1
0195c     A8 FF 9F FD | 	jmp	#LR__0075
01960                 | LR__0076
01960     00 20 06 F6 | 	mov	local02, #0
01964     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01968                 | ' 
01968                 | ' i=0
01968                 | ' do 
01968                 | LR__0077
01968                 | '   if len(lparts(i).part$)=0 then 
01968     10 2F 02 F6 | 	mov	local09, local02
0196c     17 27 02 F6 | 	mov	local05, local09
01970     03 26 66 F0 | 	shl	local05, #3
01974     55 00 00 FF 
01978     0C E4 05 F1 | 	add	objptr, ##43532
0197c     F2 26 02 F1 | 	add	local05, objptr
01980     13 13 02 FB | 	rdlong	arg01, local05
01984     55 00 00 FF 
01988     0C E4 85 F1 | 	sub	objptr, ##43532
0198c     09 2B 02 F6 | 	mov	local07, arg01
01990                 | LR__0078
01990     15 FB C9 FA | 	rdbyte	result1, local07 wz
01994     01 2A 06 51 |  if_ne	add	local07, #1
01998     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
0199c     09 2B 8A F1 | 	sub	local07, arg01 wz
019a0     C4 00 90 5D |  if_ne	jmp	#LR__0082
019a4                 | '     if i=k-1 then k-=1  :  exit
019a4     1D 25 02 F6 | 	mov	local04, local15
019a8     01 24 86 F1 | 	sub	local04, #1
019ac     12 21 0A F2 | 	cmp	local02, local04 wz
019b0     01 3A 86 A1 |  if_e	sub	local15, #1
019b4     C4 00 90 AD |  if_e	jmp	#LR__0084
019b8                 | '     if i<k-1 then 
019b8     1D 25 02 F6 | 	mov	local04, local15
019bc     01 24 86 F1 | 	sub	local04, #1
019c0     12 21 52 F2 | 	cmps	local02, local04 wc
019c4     A0 00 90 3D |  if_ae	jmp	#LR__0081
019c8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019c8     10 39 02 F6 | 	mov	local14, local02
019cc     1D 57 02 F6 | 	mov	local29, local15
019d0     01 56 86 F1 | 	sub	local29, #1
019d4                 | LR__0079
019d4     2B 39 52 F2 | 	cmps	local14, local29 wc
019d8     80 00 90 3D |  if_ae	jmp	#LR__0080
019dc     1C 27 02 F6 | 	mov	local05, local14
019e0     01 26 06 F1 | 	add	local05, #1
019e4     03 26 66 F0 | 	shl	local05, #3
019e8     55 00 00 FF 
019ec     0C E4 05 F1 | 	add	objptr, ##43532
019f0     F2 26 02 F1 | 	add	local05, objptr
019f4     13 25 02 FB | 	rdlong	local04, local05
019f8     1C 29 02 F6 | 	mov	local06, local14
019fc     01 28 06 F1 | 	add	local06, #1
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 28 02 F1 | 	add	local06, objptr
01a08     04 28 06 F1 | 	add	local06, #4
01a0c     14 23 02 FB | 	rdlong	local03, local06
01a10     1C 2F 02 F6 | 	mov	local09, local14
01a14     17 29 02 F6 | 	mov	local06, local09
01a18     03 28 66 F0 | 	shl	local06, #3
01a1c     F2 32 02 F6 | 	mov	local11, objptr
01a20     F2 28 02 F1 | 	add	local06, objptr
01a24     14 25 62 FC | 	wrlong	local04, local06
01a28     1C 31 02 F6 | 	mov	local10, local14
01a2c     18 37 02 F6 | 	mov	local13, local10
01a30     1B 35 02 F6 | 	mov	local12, local13
01a34     03 34 66 F0 | 	shl	local12, #3
01a38     F2 4A 02 F6 | 	mov	local23, objptr
01a3c     F2 34 02 F1 | 	add	local12, objptr
01a40     04 34 06 F1 | 	add	local12, #4
01a44     1A 23 62 FC | 	wrlong	local03, local12
01a48     04 34 86 F1 | 	sub	local12, #4
01a4c     01 38 06 F1 | 	add	local14, #1
01a50     55 00 00 FF 
01a54     0C E4 85 F1 | 	sub	objptr, ##43532
01a58     78 FF 9F FD | 	jmp	#LR__0079
01a5c                 | LR__0080
01a5c     01 3A 86 F1 | 	sub	local15, #1
01a60                 | '       if i>0 then i-=1 
01a60     01 20 56 F2 | 	cmps	local02, #1 wc
01a64     01 20 86 31 |  if_ae	sub	local02, #1
01a68                 | LR__0081
01a68                 | LR__0082
01a68     01 20 06 F1 | 	add	local02, #1
01a6c     1D 25 02 F6 | 	mov	local04, local15
01a70     01 24 86 F1 | 	sub	local04, #1
01a74     12 21 5A F2 | 	cmps	local02, local04 wcz
01a78     EC FE 9F ED |  if_be	jmp	#LR__0077
01a7c                 | LR__0083
01a7c                 | LR__0084
01a7c                 | ' 
01a7c                 | ' ' 1g: lowercase all that is not a string
01a7c                 | ' 
01a7c                 | ' for j=0 to k-1
01a7c     00 38 06 F6 | 	mov	local14, #0
01a80     1D 59 02 F6 | 	mov	local30, local15
01a84                 | LR__0085
01a84     2C 39 52 F2 | 	cmps	local14, local30 wc
01a88     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a8c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a8c     1C 27 02 F6 | 	mov	local05, local14
01a90     03 26 66 F0 | 	shl	local05, #3
01a94     55 00 00 FF 
01a98     0C E4 05 F1 | 	add	objptr, ##43532
01a9c     F2 26 02 F1 | 	add	local05, objptr
01aa0     13 13 02 FB | 	rdlong	arg01, local05
01aa4     01 14 06 F6 | 	mov	arg02, #1
01aa8     55 00 00 FF 
01aac     0C E4 85 F1 | 	sub	objptr, ##43532
01ab0     CC F0 B1 FD | 	call	#__system__Left_S
01ab4     FD 12 02 F6 | 	mov	arg01, result1
01ab8     70 01 00 FF 
01abc     B3 15 06 F6 | 	mov	arg02, ##@LR__4808
01ac0     9C D0 B1 FD | 	call	#__system___string_cmp
01ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac8     40 00 90 5D |  if_ne	jmp	#LR__0086
01acc     1C 29 02 F6 | 	mov	local06, local14
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     55 00 00 FF 
01ad8     0C E4 05 F1 | 	add	objptr, ##43532
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     14 13 02 FB | 	rdlong	arg01, local06
01ae4     01 14 06 F6 | 	mov	arg02, #1
01ae8     55 00 00 FF 
01aec     0C E4 85 F1 | 	sub	objptr, ##43532
01af0     14 F1 B1 FD | 	call	#__system__Right_S
01af4     FD 12 02 F6 | 	mov	arg01, result1
01af8     70 01 00 FF 
01afc     B5 15 06 F6 | 	mov	arg02, ##@LR__4809
01b00     5C D0 B1 FD | 	call	#__system___string_cmp
01b04     00 FA 0D F2 | 	cmp	result1, #0 wz
01b08     38 00 90 AD |  if_e	jmp	#LR__0087
01b0c                 | LR__0086
01b0c     1C 2F 02 F6 | 	mov	local09, local14
01b10     03 2E 66 F0 | 	shl	local09, #3
01b14     55 00 00 FF 
01b18     0C E4 05 F1 | 	add	objptr, ##43532
01b1c     F2 2E 02 F1 | 	add	local09, objptr
01b20     1C 37 02 F6 | 	mov	local13, local14
01b24     03 36 66 F0 | 	shl	local13, #3
01b28     F2 34 02 F6 | 	mov	local12, objptr
01b2c     F2 36 02 F1 | 	add	local13, objptr
01b30     1B 13 02 FB | 	rdlong	arg01, local13
01b34     55 00 00 FF 
01b38     0C E4 85 F1 | 	sub	objptr, ##43532
01b3c     50 F3 B1 FD | 	call	#__system__LCase_S
01b40     17 FB 61 FC | 	wrlong	result1, local09
01b44                 | LR__0087
01b44     01 38 06 F1 | 	add	local14, #1
01b48     38 FF 9F FD | 	jmp	#LR__0085
01b4c                 | LR__0088
01b4c                 | ' 
01b4c                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b4c                 | ' 
01b4c                 | ' for i=0 to k: lparts(i).token=-1: next i
01b4c     00 20 06 F6 | 	mov	local02, #0
01b50     1D 5B 02 F6 | 	mov	local31, local15
01b54     01 5A 06 F1 | 	add	local31, #1
01b58     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b5c                 | LR__0089
01b5c     2D 21 52 F2 | 	cmps	local02, local31 wc
01b60     30 00 90 3D |  if_ae	jmp	#LR__0091
01b64     10 2F 02 F6 | 	mov	local09, local02
01b68     03 2E 66 F0 | 	shl	local09, #3
01b6c     55 00 00 FF 
01b70     0C E4 05 F1 | 	add	objptr, ##43532
01b74     F2 2E 02 F1 | 	add	local09, objptr
01b78     04 2E 06 F1 | 	add	local09, #4
01b7c     FF FF FF FF 
01b80     17 FF 6B FC | 	wrlong	##-1, local09
01b84     01 20 06 F1 | 	add	local02, #1
01b88     55 00 00 FF 
01b8c     0C E4 85 F1 | 	sub	objptr, ##43532
01b90     C8 FF 9F FD | 	jmp	#LR__0089
01b94                 | LR__0090
01b94                 | LR__0091
01b94                 | ' 
01b94                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b94                 | ' 
01b94                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b94     55 00 00 FF 
01b98     0C E4 05 F1 | 	add	objptr, ##43532
01b9c     F2 12 02 FB | 	rdlong	arg01, objptr
01ba0     55 00 00 FF 
01ba4     0C E4 85 F1 | 	sub	objptr, ##43532
01ba8     09 2B 02 F6 | 	mov	local07, arg01
01bac     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01bb0                 | LR__0092
01bb0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01bb4     01 2A 06 51 |  if_ne	add	local07, #1
01bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01bbc                 | LR__0093
01bbc     09 2B 8A F1 | 	sub	local07, arg01 wz
01bc0     7C 17 90 AD |  if_e	jmp	#LR__0149
01bc4                 | ' 
01bc4                 | ' 
01bc4                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bc4     55 00 00 FF 
01bc8     0C E4 05 F1 | 	add	objptr, ##43532
01bcc     F2 12 02 FB | 	rdlong	arg01, objptr
01bd0     55 00 00 FF 
01bd4     0C E4 85 F1 | 	sub	objptr, ##43532
01bd8     E0 37 B0 FD | 	call	#_isdec
01bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
01be0     7A 00 00 5F 
01be4     10 E4 05 51 |  if_ne	add	objptr, ##62480
01be8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bec     7A 00 00 FF 
01bf0     10 E4 E5 F3 | 	sumnz	objptr, ##62480
01bf4     F2 00 68 AC |  if_e	wrlong	#0, objptr
01bf8     7A 00 00 AF 
01bfc     10 E4 85 A1 |  if_e	sub	objptr, ##62480
01c00     7A 00 00 FF 
01c04     10 E4 05 F1 | 	add	objptr, ##62480
01c08     F2 26 02 FB | 	rdlong	local05, objptr
01c0c     03 26 66 F0 | 	shl	local05, #3
01c10     25 00 00 FF 
01c14     04 E4 85 F1 | 	sub	objptr, ##18948
01c18     F2 26 02 F1 | 	add	local05, objptr
01c1c     13 33 02 FB | 	rdlong	local11, local05
01c20     25 00 00 FF 
01c24     08 E4 05 F1 | 	add	objptr, ##18952
01c28     F2 32 62 FC | 	wrlong	local11, objptr
01c2c     04 E4 85 F1 | 	sub	objptr, #4
01c30     F2 32 02 FB | 	rdlong	local11, objptr
01c34     03 32 66 F0 | 	shl	local11, #3
01c38     25 00 00 FF 
01c3c     04 E4 85 F1 | 	sub	objptr, ##18948
01c40     F2 30 02 F6 | 	mov	local10, objptr
01c44     F2 32 02 F1 | 	add	local11, objptr
01c48     19 15 02 FB | 	rdlong	arg02, local11
01c4c     70 01 00 FF 
01c50     B7 17 06 F6 | 	mov	arg03, ##@LR__4810
01c54     01 12 06 F6 | 	mov	arg01, #1
01c58     55 00 00 FF 
01c5c     0C E4 85 F1 | 	sub	objptr, ##43532
01c60     64 F4 B1 FD | 	call	#__system__Instr
01c64     7A 00 00 FF 
01c68     18 E4 05 F1 | 	add	objptr, ##62488
01c6c     F2 FA 61 FC | 	wrlong	result1, objptr
01c70                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c70     FD 24 02 F6 | 	mov	local04, result1
01c74     7A 00 00 FF 
01c78     18 E4 85 F1 | 	sub	objptr, ##62488
01c7c     01 24 56 F2 | 	cmps	local04, #1 wc
01c80     DC 01 90 CD |  if_b	jmp	#LR__0100
01c84     7A 00 00 FF 
01c88     10 E4 05 F1 | 	add	objptr, ##62480
01c8c     F2 30 02 FB | 	rdlong	local10, objptr
01c90     03 30 66 F0 | 	shl	local10, #3
01c94     25 00 00 FF 
01c98     04 E4 85 F1 | 	sub	objptr, ##18948
01c9c     F2 36 02 F6 | 	mov	local13, objptr
01ca0     F2 30 02 F1 | 	add	local10, objptr
01ca4     18 13 02 FB | 	rdlong	arg01, local10
01ca8     55 00 00 FF 
01cac     0C E4 85 F1 | 	sub	objptr, ##43532
01cb0     09 2B 02 F6 | 	mov	local07, arg01
01cb4     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01cb8                 | LR__0094
01cb8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01cbc     01 2A 06 51 |  if_ne	add	local07, #1
01cc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cc4                 | LR__0095
01cc4     09 2B 82 F1 | 	sub	local07, arg01
01cc8     15 2F 02 F6 | 	mov	local09, local07
01ccc     7A 00 00 FF 
01cd0     18 E4 05 F1 | 	add	objptr, ##62488
01cd4     F2 26 02 FB | 	rdlong	local05, objptr
01cd8     7A 00 00 FF 
01cdc     18 E4 85 F1 | 	sub	objptr, ##62488
01ce0     17 27 52 F2 | 	cmps	local05, local09 wc
01ce4     78 01 90 3D |  if_ae	jmp	#LR__0100
01ce8     01 3A 06 F1 | 	add	local15, #1
01cec                 | '   k+=1
01cec                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cec     1D 21 02 F6 | 	mov	local02, local15
01cf0     7A 00 00 FF 
01cf4     10 E4 05 F1 | 	add	objptr, ##62480
01cf8     F2 5C 02 FB | 	rdlong	local32, objptr
01cfc     01 5C 06 F1 | 	add	local32, #1
01d00     25 00 00 FF 
01d04     04 E4 85 F1 | 	sub	objptr, ##18948
01d08     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01d0c                 | LR__0096
01d0c     10 29 02 F6 | 	mov	local06, local02
01d10     01 28 86 F1 | 	sub	local06, #1
01d14     03 28 66 F0 | 	shl	local06, #3
01d18     F2 28 02 F1 | 	add	local06, objptr
01d1c     14 23 02 FB | 	rdlong	local03, local06
01d20     10 33 02 F6 | 	mov	local11, local02
01d24     01 32 86 F1 | 	sub	local11, #1
01d28     03 32 66 F0 | 	shl	local11, #3
01d2c     F2 32 02 F1 | 	add	local11, objptr
01d30     04 32 06 F1 | 	add	local11, #4
01d34     19 2F 02 FB | 	rdlong	local09, local11
01d38     10 33 02 F6 | 	mov	local11, local02
01d3c     03 32 66 F0 | 	shl	local11, #3
01d40     F2 32 02 F1 | 	add	local11, objptr
01d44     19 23 62 FC | 	wrlong	local03, local11
01d48     10 4B 02 F6 | 	mov	local23, local02
01d4c     03 4A 66 F0 | 	shl	local23, #3
01d50     F2 4A 02 F1 | 	add	local23, objptr
01d54     04 4A 06 F1 | 	add	local23, #4
01d58     25 2F 62 FC | 	wrlong	local09, local23
01d5c     01 20 86 F1 | 	sub	local02, #1
01d60     2E 21 52 F2 | 	cmps	local02, local32 wc
01d64     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d68                 | LR__0097
01d68     25 00 00 FF 
01d6c     04 E4 05 F1 | 	add	objptr, ##18948
01d70     F2 4A 02 FB | 	rdlong	local23, objptr
01d74     25 27 02 F6 | 	mov	local05, local23
01d78     01 26 06 F1 | 	add	local05, #1
01d7c     03 26 66 F0 | 	shl	local05, #3
01d80     25 00 00 FF 
01d84     04 E4 85 F1 | 	sub	objptr, ##18948
01d88     F2 26 02 F1 | 	add	local05, objptr
01d8c     03 4A 66 F0 | 	shl	local23, #3
01d90     F2 4A 02 F1 | 	add	local23, objptr
01d94     25 33 02 FB | 	rdlong	local11, local23
01d98     25 00 00 FF 
01d9c     04 E4 05 F1 | 	add	objptr, ##18948
01da0     F2 44 02 FB | 	rdlong	local20, objptr
01da4     22 47 02 F6 | 	mov	local21, local20
01da8     03 46 66 F0 | 	shl	local21, #3
01dac     25 00 00 FF 
01db0     04 E4 85 F1 | 	sub	objptr, ##18948
01db4     F2 4C 02 F6 | 	mov	local24, objptr
01db8     F2 46 02 F1 | 	add	local21, objptr
01dbc     23 13 02 FB | 	rdlong	arg01, local21
01dc0     55 00 00 FF 
01dc4     0C E4 85 F1 | 	sub	objptr, ##43532
01dc8     09 2B 02 F6 | 	mov	local07, arg01
01dcc     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01dd0                 | LR__0098
01dd0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dd4     01 2A 06 51 |  if_ne	add	local07, #1
01dd8     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01ddc                 | LR__0099
01ddc     09 2B 82 F1 | 	sub	local07, arg01
01de0     15 15 02 F6 | 	mov	arg02, local07
01de4     7A 00 00 FF 
01de8     18 E4 05 F1 | 	add	objptr, ##62488
01dec     F2 4A 02 FB | 	rdlong	local23, objptr
01df0     7A 00 00 FF 
01df4     18 E4 85 F1 | 	sub	objptr, ##62488
01df8     25 15 82 F1 | 	sub	arg02, local23
01dfc     19 13 02 F6 | 	mov	arg01, local11
01e00     04 EE B1 FD | 	call	#__system__Right_S
01e04     13 FB 61 FC | 	wrlong	result1, local05
01e08     7A 00 00 FF 
01e0c     10 E4 05 F1 | 	add	objptr, ##62480
01e10     F2 34 02 FB | 	rdlong	local12, objptr
01e14     1A 27 02 F6 | 	mov	local05, local12
01e18     03 26 66 F0 | 	shl	local05, #3
01e1c     25 00 00 FF 
01e20     04 E4 85 F1 | 	sub	objptr, ##18948
01e24     F2 26 02 F1 | 	add	local05, objptr
01e28     1A 4B 02 F6 | 	mov	local23, local12
01e2c     03 4A 66 F0 | 	shl	local23, #3
01e30     F2 42 02 F6 | 	mov	local19, objptr
01e34     F2 4A 02 F1 | 	add	local23, objptr
01e38     25 13 02 FB | 	rdlong	arg01, local23
01e3c     25 00 00 FF 
01e40     0C E4 05 F1 | 	add	objptr, ##18956
01e44     F2 36 02 FB | 	rdlong	local13, objptr
01e48     7A 00 00 FF 
01e4c     18 E4 85 F1 | 	sub	objptr, ##62488
01e50     1B 31 02 F6 | 	mov	local10, local13
01e54     18 15 02 F6 | 	mov	arg02, local10
01e58     24 ED B1 FD | 	call	#__system__Left_S
01e5c     13 FB 61 FC | 	wrlong	result1, local05
01e60                 | LR__0100
01e60                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e60     7A 00 00 FF 
01e64     10 E4 05 F1 | 	add	objptr, ##62480
01e68     F2 28 02 FB | 	rdlong	local06, objptr
01e6c     03 28 66 F0 | 	shl	local06, #3
01e70     25 00 00 FF 
01e74     04 E4 85 F1 | 	sub	objptr, ##18948
01e78     F2 28 02 F1 | 	add	local06, objptr
01e7c     14 13 02 FB | 	rdlong	arg01, local06
01e80     01 14 06 F6 | 	mov	arg02, #1
01e84     55 00 00 FF 
01e88     0C E4 85 F1 | 	sub	objptr, ##43532
01e8c     F0 EC B1 FD | 	call	#__system__Left_S
01e90     FD 12 02 F6 | 	mov	arg01, result1
01e94     70 01 00 FF 
01e98     B9 15 06 F6 | 	mov	arg02, ##@LR__4811
01e9c     C0 CC B1 FD | 	call	#__system___string_cmp
01ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ea4     9C 01 90 5D |  if_ne	jmp	#LR__0107
01ea8     7A 00 00 FF 
01eac     10 E4 05 F1 | 	add	objptr, ##62480
01eb0     F2 32 02 FB | 	rdlong	local11, objptr
01eb4     03 32 66 F0 | 	shl	local11, #3
01eb8     25 00 00 FF 
01ebc     04 E4 85 F1 | 	sub	objptr, ##18948
01ec0     F2 30 02 F6 | 	mov	local10, objptr
01ec4     F2 32 02 F1 | 	add	local11, objptr
01ec8     19 13 02 FB | 	rdlong	arg01, local11
01ecc     55 00 00 FF 
01ed0     0C E4 85 F1 | 	sub	objptr, ##43532
01ed4     09 2B 02 F6 | 	mov	local07, arg01
01ed8     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01edc                 | LR__0101
01edc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ee0     01 2A 06 51 |  if_ne	add	local07, #1
01ee4     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ee8                 | LR__0102
01ee8     09 2B 82 F1 | 	sub	local07, arg01
01eec     02 2A 56 F2 | 	cmps	local07, #2 wc
01ef0     50 01 90 CD |  if_b	jmp	#LR__0107
01ef4     01 3A 06 F1 | 	add	local15, #1
01ef8                 | '   k+=1
01ef8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ef8     1D 21 02 F6 | 	mov	local02, local15
01efc     7A 00 00 FF 
01f00     10 E4 05 F1 | 	add	objptr, ##62480
01f04     F2 5E 02 FB | 	rdlong	local33, objptr
01f08     01 5E 06 F1 | 	add	local33, #1
01f0c     25 00 00 FF 
01f10     04 E4 85 F1 | 	sub	objptr, ##18948
01f14     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f18                 | LR__0103
01f18     10 29 02 F6 | 	mov	local06, local02
01f1c     01 28 86 F1 | 	sub	local06, #1
01f20     03 28 66 F0 | 	shl	local06, #3
01f24     F2 28 02 F1 | 	add	local06, objptr
01f28     14 23 02 FB | 	rdlong	local03, local06
01f2c     10 33 02 F6 | 	mov	local11, local02
01f30     01 32 86 F1 | 	sub	local11, #1
01f34     03 32 66 F0 | 	shl	local11, #3
01f38     F2 32 02 F1 | 	add	local11, objptr
01f3c     04 32 06 F1 | 	add	local11, #4
01f40     19 2F 02 FB | 	rdlong	local09, local11
01f44     10 33 02 F6 | 	mov	local11, local02
01f48     03 32 66 F0 | 	shl	local11, #3
01f4c     F2 32 02 F1 | 	add	local11, objptr
01f50     19 23 62 FC | 	wrlong	local03, local11
01f54     10 4B 02 F6 | 	mov	local23, local02
01f58     03 4A 66 F0 | 	shl	local23, #3
01f5c     F2 4A 02 F1 | 	add	local23, objptr
01f60     04 4A 06 F1 | 	add	local23, #4
01f64     25 2F 62 FC | 	wrlong	local09, local23
01f68     01 20 86 F1 | 	sub	local02, #1
01f6c     2F 21 52 F2 | 	cmps	local02, local33 wc
01f70     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f74                 | LR__0104
01f74     25 00 00 FF 
01f78     04 E4 05 F1 | 	add	objptr, ##18948
01f7c     F2 4A 02 FB | 	rdlong	local23, objptr
01f80     25 27 02 F6 | 	mov	local05, local23
01f84     01 26 06 F1 | 	add	local05, #1
01f88     03 26 66 F0 | 	shl	local05, #3
01f8c     25 00 00 FF 
01f90     04 E4 85 F1 | 	sub	objptr, ##18948
01f94     F2 26 02 F1 | 	add	local05, objptr
01f98     03 4A 66 F0 | 	shl	local23, #3
01f9c     F2 4A 02 F1 | 	add	local23, objptr
01fa0     25 33 02 FB | 	rdlong	local11, local23
01fa4     25 00 00 FF 
01fa8     04 E4 05 F1 | 	add	objptr, ##18948
01fac     F2 42 02 FB | 	rdlong	local19, objptr
01fb0     21 4B 02 F6 | 	mov	local23, local19
01fb4     25 45 02 F6 | 	mov	local20, local23
01fb8     22 47 02 F6 | 	mov	local21, local20
01fbc     03 46 66 F0 | 	shl	local21, #3
01fc0     25 00 00 FF 
01fc4     04 E4 85 F1 | 	sub	objptr, ##18948
01fc8     F2 4C 02 F6 | 	mov	local24, objptr
01fcc     F2 46 02 F1 | 	add	local21, objptr
01fd0     23 13 02 FB | 	rdlong	arg01, local21
01fd4     55 00 00 FF 
01fd8     0C E4 85 F1 | 	sub	objptr, ##43532
01fdc     09 2B 02 F6 | 	mov	local07, arg01
01fe0     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fe4                 | LR__0105
01fe4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fe8     01 2A 06 51 |  if_ne	add	local07, #1
01fec     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01ff0                 | LR__0106
01ff0     09 2B 82 F1 | 	sub	local07, arg01
01ff4     15 35 02 F6 | 	mov	local12, local07
01ff8     1A 37 02 F6 | 	mov	local13, local12
01ffc     01 36 86 F1 | 	sub	local13, #1
02000     1B 31 02 F6 | 	mov	local10, local13
02004     19 13 02 F6 | 	mov	arg01, local11
02008     18 15 02 F6 | 	mov	arg02, local10
0200c     F8 EB B1 FD | 	call	#__system__Right_S
02010     13 FB 61 FC | 	wrlong	result1, local05
02014     7A 00 00 FF 
02018     10 E4 05 F1 | 	add	objptr, ##62480
0201c     F2 26 02 FB | 	rdlong	local05, objptr
02020     03 26 66 F0 | 	shl	local05, #3
02024     25 00 00 FF 
02028     04 E4 85 F1 | 	sub	objptr, ##18948
0202c     F2 26 02 F1 | 	add	local05, objptr
02030     70 01 00 FF 
02034     BB 33 06 F6 | 	mov	local11, ##@LR__4812
02038     13 33 62 FC | 	wrlong	local11, local05
0203c     55 00 00 FF 
02040     0C E4 85 F1 | 	sub	objptr, ##43532
02044                 | LR__0107
02044     7A 00 00 FF 
02048     10 E4 05 F1 | 	add	objptr, ##62480
0204c     F2 26 02 FB | 	rdlong	local05, objptr
02050     03 26 66 F0 | 	shl	local05, #3
02054     25 00 00 FF 
02058     04 E4 85 F1 | 	sub	objptr, ##18948
0205c     F2 26 02 F1 | 	add	local05, objptr
02060     13 33 02 FB | 	rdlong	local11, local05
02064     25 00 00 FF 
02068     08 E4 05 F1 | 	add	objptr, ##18952
0206c     F2 32 62 FC | 	wrlong	local11, objptr
02070                 | ' 
02070                 | ' ' process the case when simple load or save is called without ""
02070                 | ' 
02070                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02070     7A 00 00 FF 
02074     14 E4 85 F1 | 	sub	objptr, ##62484
02078     70 01 00 FF 
0207c     BD 15 06 F6 | 	mov	arg02, ##@LR__4813
02080     19 13 02 F6 | 	mov	arg01, local11
02084     D8 CA B1 FD | 	call	#__system___string_cmp
02088     00 FA 0D F2 | 	cmp	result1, #0 wz
0208c     50 00 90 AD |  if_e	jmp	#LR__0108
02090     7A 00 00 FF 
02094     14 E4 05 F1 | 	add	objptr, ##62484
02098     F2 12 02 FB | 	rdlong	arg01, objptr
0209c     7A 00 00 FF 
020a0     14 E4 85 F1 | 	sub	objptr, ##62484
020a4     70 01 00 FF 
020a8     C3 15 06 F6 | 	mov	arg02, ##@LR__4814
020ac     B0 CA B1 FD | 	call	#__system___string_cmp
020b0     00 FA 0D F2 | 	cmp	result1, #0 wz
020b4     28 00 90 AD |  if_e	jmp	#LR__0108
020b8     7A 00 00 FF 
020bc     14 E4 05 F1 | 	add	objptr, ##62484
020c0     F2 12 02 FB | 	rdlong	arg01, objptr
020c4     7A 00 00 FF 
020c8     14 E4 85 F1 | 	sub	objptr, ##62484
020cc     70 01 00 FF 
020d0     CA 15 06 F6 | 	mov	arg02, ##@LR__4815
020d4     88 CA B1 FD | 	call	#__system___string_cmp
020d8     00 FA 0D F2 | 	cmp	result1, #0 wz
020dc     48 01 90 5D |  if_ne	jmp	#LR__0111
020e0                 | LR__0108
020e0                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
020e0     7A 00 00 FF 
020e4     10 E4 05 F1 | 	add	objptr, ##62480
020e8     F2 28 02 FB | 	rdlong	local06, objptr
020ec     01 28 06 F1 | 	add	local06, #1
020f0     03 28 66 F0 | 	shl	local06, #3
020f4     25 00 00 FF 
020f8     04 E4 85 F1 | 	sub	objptr, ##18948
020fc     F2 28 02 F1 | 	add	local06, objptr
02100     14 13 02 FB | 	rdlong	arg01, local06
02104     70 01 00 FF 
02108     D0 15 06 F6 | 	mov	arg02, ##@LR__4816
0210c     55 00 00 FF 
02110     0C E4 85 F1 | 	sub	objptr, ##43532
02114     48 CA B1 FD | 	call	#__system___string_cmp
02118     00 FA 0D F2 | 	cmp	result1, #0 wz
0211c     60 00 90 5D |  if_ne	jmp	#LR__0109
02120     7A 00 00 FF 
02124     10 E4 05 F1 | 	add	objptr, ##62480
02128     F2 26 02 FB | 	rdlong	local05, objptr
0212c     01 26 06 F1 | 	add	local05, #1
02130     03 26 66 F0 | 	shl	local05, #3
02134     25 00 00 FF 
02138     04 E4 85 F1 | 	sub	objptr, ##18948
0213c     F2 26 02 F1 | 	add	local05, objptr
02140     70 01 00 FF 
02144     D3 33 06 F6 | 	mov	local11, ##@LR__4817
02148     13 33 62 FC | 	wrlong	local11, local05
0214c     25 00 00 FF 
02150     04 E4 05 F1 | 	add	objptr, ##18948
02154     F2 26 02 FB | 	rdlong	local05, objptr
02158     01 26 06 F1 | 	add	local05, #1
0215c     03 26 66 F0 | 	shl	local05, #3
02160     25 00 00 FF 
02164     04 E4 85 F1 | 	sub	objptr, ##18948
02168     F2 26 02 F1 | 	add	local05, objptr
0216c     04 26 06 F1 | 	add	local05, #4
02170     01 00 80 FF 
02174     13 01 68 FC | 	wrlong	##512, local05
02178     55 00 00 FF 
0217c     0C E4 85 F1 | 	sub	objptr, ##43532
02180                 | LR__0109
02180                 | '   if lparts(addptr+1).part$="off" then   lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
02180     7A 00 00 FF 
02184     10 E4 05 F1 | 	add	objptr, ##62480
02188     F2 28 02 FB | 	rdlong	local06, objptr
0218c     01 28 06 F1 | 	add	local06, #1
02190     03 28 66 F0 | 	shl	local06, #3
02194     25 00 00 FF 
02198     04 E4 85 F1 | 	sub	objptr, ##18948
0219c     F2 32 02 F6 | 	mov	local11, objptr
021a0     F2 28 02 F1 | 	add	local06, objptr
021a4     14 13 02 FB | 	rdlong	arg01, local06
021a8     70 01 00 FF 
021ac     D5 15 06 F6 | 	mov	arg02, ##@LR__4818
021b0     55 00 00 FF 
021b4     0C E4 85 F1 | 	sub	objptr, ##43532
021b8     A4 C9 B1 FD | 	call	#__system___string_cmp
021bc     00 FA 0D F2 | 	cmp	result1, #0 wz
021c0     64 00 90 5D |  if_ne	jmp	#LR__0110
021c4     7A 00 00 FF 
021c8     10 E4 05 F1 | 	add	objptr, ##62480
021cc     F2 26 02 FB | 	rdlong	local05, objptr
021d0     01 26 06 F1 | 	add	local05, #1
021d4     03 26 66 F0 | 	shl	local05, #3
021d8     25 00 00 FF 
021dc     04 E4 85 F1 | 	sub	objptr, ##18948
021e0     F2 26 02 F1 | 	add	local05, objptr
021e4     70 01 00 FF 
021e8     D9 33 06 F6 | 	mov	local11, ##@LR__4819
021ec     13 33 62 FC | 	wrlong	local11, local05
021f0     25 00 00 FF 
021f4     04 E4 05 F1 | 	add	objptr, ##18948
021f8     F2 26 02 FB | 	rdlong	local05, objptr
021fc     01 26 06 F1 | 	add	local05, #1
02200     03 26 66 F0 | 	shl	local05, #3
02204     25 00 00 FF 
02208     04 E4 85 F1 | 	sub	objptr, ##18948
0220c     F2 26 02 F1 | 	add	local05, objptr
02210     09 32 C6 F9 | 	decod	local11, #9
02214     04 26 06 F1 | 	add	local05, #4
02218     01 00 80 FF 
0221c     13 01 68 FC | 	wrlong	##512, local05
02220     55 00 00 FF 
02224     0C E4 85 F1 | 	sub	objptr, ##43532
02228                 | LR__0110
02228                 | LR__0111
02228                 | ' if (lp$="mode" orelse lp$="m.") then 
02228     7A 00 00 FF 
0222c     14 E4 05 F1 | 	add	objptr, ##62484
02230     F2 12 02 FB | 	rdlong	arg01, objptr
02234     7A 00 00 FF 
02238     14 E4 85 F1 | 	sub	objptr, ##62484
0223c     70 01 00 FF 
02240     DB 15 06 F6 | 	mov	arg02, ##@LR__4820
02244     18 C9 B1 FD | 	call	#__system___string_cmp
02248     00 FA 0D F2 | 	cmp	result1, #0 wz
0224c     28 00 90 AD |  if_e	jmp	#LR__0112
02250     7A 00 00 FF 
02254     14 E4 05 F1 | 	add	objptr, ##62484
02258     F2 12 02 FB | 	rdlong	arg01, objptr
0225c     7A 00 00 FF 
02260     14 E4 85 F1 | 	sub	objptr, ##62484
02264     70 01 00 FF 
02268     E0 15 06 F6 | 	mov	arg02, ##@LR__4821
0226c     F0 C8 B1 FD | 	call	#__system___string_cmp
02270     00 FA 0D F2 | 	cmp	result1, #0 wz
02274     48 02 90 5D |  if_ne	jmp	#LR__0118
02278                 | LR__0112
02278                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
02278     7A 00 00 FF 
0227c     10 E4 05 F1 | 	add	objptr, ##62480
02280     F2 28 02 FB | 	rdlong	local06, objptr
02284     01 28 06 F1 | 	add	local06, #1
02288     03 28 66 F0 | 	shl	local06, #3
0228c     25 00 00 FF 
02290     04 E4 85 F1 | 	sub	objptr, ##18948
02294     F2 28 02 F1 | 	add	local06, objptr
02298     14 13 02 FB | 	rdlong	arg01, local06
0229c     70 01 00 FF 
022a0     E3 15 06 F6 | 	mov	arg02, ##@LR__4822
022a4     55 00 00 FF 
022a8     0C E4 85 F1 | 	sub	objptr, ##43532
022ac     B0 C8 B1 FD | 	call	#__system___string_cmp
022b0     00 FA 0D F2 | 	cmp	result1, #0 wz
022b4     34 00 90 5D |  if_ne	jmp	#LR__0113
022b8     7A 00 00 FF 
022bc     10 E4 05 F1 | 	add	objptr, ##62480
022c0     F2 26 02 FB | 	rdlong	local05, objptr
022c4     01 26 06 F1 | 	add	local05, #1
022c8     03 26 66 F0 | 	shl	local05, #3
022cc     25 00 00 FF 
022d0     04 E4 85 F1 | 	sub	objptr, ##18948
022d4     F2 26 02 F1 | 	add	local05, objptr
022d8     70 01 00 FF 
022dc     E9 33 06 F6 | 	mov	local11, ##@LR__4823
022e0     13 33 62 FC | 	wrlong	local11, local05
022e4     55 00 00 FF 
022e8     0C E4 85 F1 | 	sub	objptr, ##43532
022ec                 | LR__0113
022ec                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
022ec     7A 00 00 FF 
022f0     10 E4 05 F1 | 	add	objptr, ##62480
022f4     F2 28 02 FB | 	rdlong	local06, objptr
022f8     01 28 06 F1 | 	add	local06, #1
022fc     03 28 66 F0 | 	shl	local06, #3
02300     25 00 00 FF 
02304     04 E4 85 F1 | 	sub	objptr, ##18948
02308     F2 28 02 F1 | 	add	local06, objptr
0230c     14 13 02 FB | 	rdlong	arg01, local06
02310     70 01 00 FF 
02314     EB 15 06 F6 | 	mov	arg02, ##@LR__4824
02318     55 00 00 FF 
0231c     0C E4 85 F1 | 	sub	objptr, ##43532
02320     3C C8 B1 FD | 	call	#__system___string_cmp
02324     00 FA 0D F2 | 	cmp	result1, #0 wz
02328     34 00 90 5D |  if_ne	jmp	#LR__0114
0232c     7A 00 00 FF 
02330     10 E4 05 F1 | 	add	objptr, ##62480
02334     F2 26 02 FB | 	rdlong	local05, objptr
02338     01 26 06 F1 | 	add	local05, #1
0233c     03 26 66 F0 | 	shl	local05, #3
02340     25 00 00 FF 
02344     04 E4 85 F1 | 	sub	objptr, ##18948
02348     F2 26 02 F1 | 	add	local05, objptr
0234c     70 01 00 FF 
02350     F4 33 06 F6 | 	mov	local11, ##@LR__4825
02354     13 33 62 FC | 	wrlong	local11, local05
02358     55 00 00 FF 
0235c     0C E4 85 F1 | 	sub	objptr, ##43532
02360                 | LR__0114
02360                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02360     7A 00 00 FF 
02364     10 E4 05 F1 | 	add	objptr, ##62480
02368     F2 28 02 FB | 	rdlong	local06, objptr
0236c     01 28 06 F1 | 	add	local06, #1
02370     03 28 66 F0 | 	shl	local06, #3
02374     25 00 00 FF 
02378     04 E4 85 F1 | 	sub	objptr, ##18948
0237c     F2 28 02 F1 | 	add	local06, objptr
02380     14 13 02 FB | 	rdlong	arg01, local06
02384     70 01 00 FF 
02388     F6 15 06 F6 | 	mov	arg02, ##@LR__4826
0238c     55 00 00 FF 
02390     0C E4 85 F1 | 	sub	objptr, ##43532
02394     C8 C7 B1 FD | 	call	#__system___string_cmp
02398     00 FA 0D F2 | 	cmp	result1, #0 wz
0239c     34 00 90 5D |  if_ne	jmp	#LR__0115
023a0     7A 00 00 FF 
023a4     10 E4 05 F1 | 	add	objptr, ##62480
023a8     F2 26 02 FB | 	rdlong	local05, objptr
023ac     01 26 06 F1 | 	add	local05, #1
023b0     03 26 66 F0 | 	shl	local05, #3
023b4     25 00 00 FF 
023b8     04 E4 85 F1 | 	sub	objptr, ##18948
023bc     F2 26 02 F1 | 	add	local05, objptr
023c0     70 01 00 FF 
023c4     FF 33 06 F6 | 	mov	local11, ##@LR__4827
023c8     13 33 62 FC | 	wrlong	local11, local05
023cc     55 00 00 FF 
023d0     0C E4 85 F1 | 	sub	objptr, ##43532
023d4                 | LR__0115
023d4                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
023d4     7A 00 00 FF 
023d8     10 E4 05 F1 | 	add	objptr, ##62480
023dc     F2 28 02 FB | 	rdlong	local06, objptr
023e0     01 28 06 F1 | 	add	local06, #1
023e4     03 28 66 F0 | 	shl	local06, #3
023e8     25 00 00 FF 
023ec     04 E4 85 F1 | 	sub	objptr, ##18948
023f0     F2 28 02 F1 | 	add	local06, objptr
023f4     14 13 02 FB | 	rdlong	arg01, local06
023f8     71 01 00 FF 
023fc     01 14 06 F6 | 	mov	arg02, ##@LR__4828
02400     55 00 00 FF 
02404     0C E4 85 F1 | 	sub	objptr, ##43532
02408     54 C7 B1 FD | 	call	#__system___string_cmp
0240c     00 FA 0D F2 | 	cmp	result1, #0 wz
02410     34 00 90 5D |  if_ne	jmp	#LR__0116
02414     7A 00 00 FF 
02418     10 E4 05 F1 | 	add	objptr, ##62480
0241c     F2 26 02 FB | 	rdlong	local05, objptr
02420     01 26 06 F1 | 	add	local05, #1
02424     03 26 66 F0 | 	shl	local05, #3
02428     25 00 00 FF 
0242c     04 E4 85 F1 | 	sub	objptr, ##18948
02430     F2 26 02 F1 | 	add	local05, objptr
02434     71 01 00 FF 
02438     0A 32 06 F6 | 	mov	local11, ##@LR__4829
0243c     13 33 62 FC | 	wrlong	local11, local05
02440     55 00 00 FF 
02444     0C E4 85 F1 | 	sub	objptr, ##43532
02448                 | LR__0116
02448                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02448     7A 00 00 FF 
0244c     10 E4 05 F1 | 	add	objptr, ##62480
02450     F2 28 02 FB | 	rdlong	local06, objptr
02454     01 28 06 F1 | 	add	local06, #1
02458     03 28 66 F0 | 	shl	local06, #3
0245c     25 00 00 FF 
02460     04 E4 85 F1 | 	sub	objptr, ##18948
02464     F2 32 02 F6 | 	mov	local11, objptr
02468     F2 28 02 F1 | 	add	local06, objptr
0246c     14 13 02 FB | 	rdlong	arg01, local06
02470     71 01 00 FF 
02474     0C 14 06 F6 | 	mov	arg02, ##@LR__4830
02478     55 00 00 FF 
0247c     0C E4 85 F1 | 	sub	objptr, ##43532
02480     DC C6 B1 FD | 	call	#__system___string_cmp
02484     00 FA 0D F2 | 	cmp	result1, #0 wz
02488     34 00 90 5D |  if_ne	jmp	#LR__0117
0248c     7A 00 00 FF 
02490     10 E4 05 F1 | 	add	objptr, ##62480
02494     F2 26 02 FB | 	rdlong	local05, objptr
02498     01 26 06 F1 | 	add	local05, #1
0249c     03 26 66 F0 | 	shl	local05, #3
024a0     25 00 00 FF 
024a4     04 E4 85 F1 | 	sub	objptr, ##18948
024a8     F2 26 02 F1 | 	add	local05, objptr
024ac     71 01 00 FF 
024b0     0F 32 06 F6 | 	mov	local11, ##@LR__4831
024b4     13 33 62 FC | 	wrlong	local11, local05
024b8     55 00 00 FF 
024bc     0C E4 85 F1 | 	sub	objptr, ##43532
024c0                 | LR__0117
024c0                 | LR__0118
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' ' 2a find part types 
024c0                 | ' 
024c0                 | ' for i=0 to k-1
024c0     00 20 06 F6 | 	mov	local02, #0
024c4     1D 61 02 F6 | 	mov	local34, local15
024c8                 | LR__0119
024c8     30 21 52 F2 | 	cmps	local02, local34 wc
024cc     74 06 90 3D |  if_ae	jmp	#LR__0129
024d0     10 2F 02 F6 | 	mov	local09, local02
024d4     03 2E 66 F0 | 	shl	local09, #3
024d8     55 00 00 FF 
024dc     0C E4 05 F1 | 	add	objptr, ##43532
024e0     F2 2E 02 F1 | 	add	local09, objptr
024e4     10 31 02 F6 | 	mov	local10, local02
024e8     18 35 02 F6 | 	mov	local12, local10
024ec     03 34 66 F0 | 	shl	local12, #3
024f0     F2 4A 02 F6 | 	mov	local23, objptr
024f4     F2 34 02 F1 | 	add	local12, objptr
024f8     1A 13 02 FB | 	rdlong	arg01, local12
024fc     55 00 00 FF 
02500     0C E4 85 F1 | 	sub	objptr, ##43532
02504     B0 14 B0 FD | 	call	#_isseparator
02508     FD FA E1 F8 | 	getbyte	result1, result1, #0
0250c     04 2E 06 F1 | 	add	local09, #4
02510     17 FB 61 FC | 	wrlong	result1, local09
02514                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02514     10 2F 02 F6 | 	mov	local09, local02
02518     03 2E 66 F0 | 	shl	local09, #3
0251c     55 00 00 FF 
02520     0C E4 05 F1 | 	add	objptr, ##43532
02524     F2 2E 02 F1 | 	add	local09, objptr
02528     04 2E 06 F1 | 	add	local09, #4
0252c     17 33 02 FB | 	rdlong	local11, local09
02530     01 32 56 F2 | 	cmps	local11, #1 wc
02534     55 00 00 FF 
02538     0C E4 85 F1 | 	sub	objptr, ##43532
0253c     FC 05 90 3D |  if_ae	jmp	#LR__0128
02540     10 2F 02 F6 | 	mov	local09, local02
02544     03 2E 66 F0 | 	shl	local09, #3
02548     55 00 00 FF 
0254c     0C E4 05 F1 | 	add	objptr, ##43532
02550     F2 2E 02 F1 | 	add	local09, objptr
02554     10 31 02 F6 | 	mov	local10, local02
02558     18 35 02 F6 | 	mov	local12, local10
0255c     03 34 66 F0 | 	shl	local12, #3
02560     F2 4A 02 F6 | 	mov	local23, objptr
02564     F2 34 02 F1 | 	add	local12, objptr
02568     1A 13 02 FB | 	rdlong	arg01, local12
0256c     55 00 00 FF 
02570     0C E4 85 F1 | 	sub	objptr, ##43532
02574     F4 0D B0 FD | 	call	#_isoperator
02578     FD FA E1 F8 | 	getbyte	result1, result1, #0
0257c     04 2E 06 F1 | 	add	local09, #4
02580     17 FB 61 FC | 	wrlong	result1, local09
02584                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
02584     10 2F 02 F6 | 	mov	local09, local02
02588     03 2E 66 F0 | 	shl	local09, #3
0258c     55 00 00 FF 
02590     0C E4 05 F1 | 	add	objptr, ##43532
02594     F2 2E 02 F1 | 	add	local09, objptr
02598     04 2E 06 F1 | 	add	local09, #4
0259c     17 33 02 FB | 	rdlong	local11, local09
025a0     01 32 56 F2 | 	cmps	local11, #1 wc
025a4     55 00 00 FF 
025a8     0C E4 85 F1 | 	sub	objptr, ##43532
025ac     8C 05 90 3D |  if_ae	jmp	#LR__0128
025b0     10 2F 02 F6 | 	mov	local09, local02
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     55 00 00 FF 
025bc     0C E4 05 F1 | 	add	objptr, ##43532
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     10 31 02 F6 | 	mov	local10, local02
025c8     18 35 02 F6 | 	mov	local12, local10
025cc     03 34 66 F0 | 	shl	local12, #3
025d0     F2 4A 02 F6 | 	mov	local23, objptr
025d4     F2 34 02 F1 | 	add	local12, objptr
025d8     1A 13 02 FB | 	rdlong	arg01, local12
025dc     55 00 00 FF 
025e0     0C E4 85 F1 | 	sub	objptr, ##43532
025e4                 | ' 
025e4                 | ' select case s
025e4     71 01 00 FF 
025e8     F0 14 06 F6 | 	mov	arg02, ##@LR__4902
025ec     70 C5 B1 FD | 	call	#__system___string_cmp
025f0     00 FA 0D F2 | 	cmp	result1, #0 wz
025f4     1B FA 05 A6 |  if_e	mov	result1, #27
025f8     00 FA 05 56 |  if_ne	mov	result1, #0
025fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02600     04 2E 06 F1 | 	add	local09, #4
02604     17 FB 61 FC | 	wrlong	result1, local09
02608                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02608     10 2F 02 F6 | 	mov	local09, local02
0260c     03 2E 66 F0 | 	shl	local09, #3
02610     55 00 00 FF 
02614     0C E4 05 F1 | 	add	objptr, ##43532
02618     F2 2E 02 F1 | 	add	local09, objptr
0261c     04 2E 06 F1 | 	add	local09, #4
02620     17 33 02 FB | 	rdlong	local11, local09
02624     01 32 56 F2 | 	cmps	local11, #1 wc
02628     55 00 00 FF 
0262c     0C E4 85 F1 | 	sub	objptr, ##43532
02630     08 05 90 3D |  if_ae	jmp	#LR__0128
02634     10 2F 02 F6 | 	mov	local09, local02
02638     03 2E 66 F0 | 	shl	local09, #3
0263c     55 00 00 FF 
02640     0C E4 05 F1 | 	add	objptr, ##43532
02644     F2 2E 02 F1 | 	add	local09, objptr
02648     10 31 02 F6 | 	mov	local10, local02
0264c     18 35 02 F6 | 	mov	local12, local10
02650     03 34 66 F0 | 	shl	local12, #3
02654     F2 4A 02 F6 | 	mov	local23, objptr
02658     F2 34 02 F1 | 	add	local12, objptr
0265c     1A 13 02 FB | 	rdlong	arg01, local12
02660     55 00 00 FF 
02664     0C E4 85 F1 | 	sub	objptr, ##43532
02668     4C 15 B0 FD | 	call	#_iscommand
0266c     FD FA E1 F8 | 	getbyte	result1, result1, #0
02670     04 2E 06 F1 | 	add	local09, #4
02674     17 FB 61 FC | 	wrlong	result1, local09
02678                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
02678     10 2F 02 F6 | 	mov	local09, local02
0267c     03 2E 66 F0 | 	shl	local09, #3
02680     55 00 00 FF 
02684     0C E4 05 F1 | 	add	objptr, ##43532
02688     F2 2E 02 F1 | 	add	local09, objptr
0268c     04 2E 06 F1 | 	add	local09, #4
02690     17 33 02 FB | 	rdlong	local11, local09
02694     01 32 56 F2 | 	cmps	local11, #1 wc
02698     55 00 00 FF 
0269c     0C E4 85 F1 | 	sub	objptr, ##43532
026a0     98 04 90 3D |  if_ae	jmp	#LR__0128
026a4     10 2F 02 F6 | 	mov	local09, local02
026a8     03 2E 66 F0 | 	shl	local09, #3
026ac     55 00 00 FF 
026b0     0C E4 05 F1 | 	add	objptr, ##43532
026b4     F2 2E 02 F1 | 	add	local09, objptr
026b8     10 31 02 F6 | 	mov	local10, local02
026bc     18 35 02 F6 | 	mov	local12, local10
026c0     03 34 66 F0 | 	shl	local12, #3
026c4     F2 4A 02 F6 | 	mov	local23, objptr
026c8     F2 34 02 F1 | 	add	local12, objptr
026cc     1A 13 02 FB | 	rdlong	arg01, local12
026d0     55 00 00 FF 
026d4     0C E4 85 F1 | 	sub	objptr, ##43532
026d8     FC 20 B0 FD | 	call	#_isfunction
026dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
026e0     04 2E 06 F1 | 	add	local09, #4
026e4     17 FB 61 FC | 	wrlong	result1, local09
026e8                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
026e8     10 2F 02 F6 | 	mov	local09, local02
026ec     03 2E 66 F0 | 	shl	local09, #3
026f0     55 00 00 FF 
026f4     0C E4 05 F1 | 	add	objptr, ##43532
026f8     F2 2E 02 F1 | 	add	local09, objptr
026fc     04 2E 06 F1 | 	add	local09, #4
02700     17 33 02 FB | 	rdlong	local11, local09
02704     01 32 56 F2 | 	cmps	local11, #1 wc
02708     55 00 00 FF 
0270c     0C E4 85 F1 | 	sub	objptr, ##43532
02710     28 04 90 3D |  if_ae	jmp	#LR__0128
02714     10 2F 02 F6 | 	mov	local09, local02
02718     03 2E 66 F0 | 	shl	local09, #3
0271c     55 00 00 FF 
02720     0C E4 05 F1 | 	add	objptr, ##43532
02724     F2 2E 02 F1 | 	add	local09, objptr
02728     10 31 02 F6 | 	mov	local10, local02
0272c     18 37 02 F6 | 	mov	local13, local10
02730     03 36 66 F0 | 	shl	local13, #3
02734     F2 34 02 F6 | 	mov	local12, objptr
02738     F2 36 02 F1 | 	add	local13, objptr
0273c     1B 13 02 FB | 	rdlong	arg01, local13
02740     55 00 00 FF 
02744     0C E4 85 F1 | 	sub	objptr, ##43532
02748     00 0F B0 FD | 	call	#_isnotename
0274c     04 2E 06 F1 | 	add	local09, #4
02750     17 FB 61 FC | 	wrlong	result1, local09
02754                 | ' lparts(i).token=isnotename(lparts(i).part$) 
02754                 | ' if lparts(i).token>0 then 
02754     10 2F 02 F6 | 	mov	local09, local02
02758     03 2E 66 F0 | 	shl	local09, #3
0275c     55 00 00 FF 
02760     0C E4 05 F1 | 	add	objptr, ##43532
02764     F2 2E 02 F1 | 	add	local09, objptr
02768     04 2E 06 F1 | 	add	local09, #4
0276c     17 33 02 FB | 	rdlong	local11, local09
02770     01 32 56 F2 | 	cmps	local11, #1 wc
02774     55 00 00 FF 
02778     0C E4 85 F1 | 	sub	objptr, ##43532
0277c     88 00 90 CD |  if_b	jmp	#LR__0120
02780     10 27 02 F6 | 	mov	local05, local02
02784     03 26 66 F0 | 	shl	local05, #3
02788     55 00 00 FF 
0278c     0C E4 05 F1 | 	add	objptr, ##43532
02790     F2 26 02 F1 | 	add	local05, objptr
02794     04 26 06 F1 | 	add	local05, #4
02798     13 33 02 FB | 	rdlong	local11, local05
0279c     19 13 02 F6 | 	mov	arg01, local11
027a0     55 00 00 FF 
027a4     0C E4 85 F1 | 	sub	objptr, ##43532
027a8     74 7B B1 FD | 	call	#_getnoteval
027ac     FD 62 02 F6 | 	mov	local35, result1
027b0     10 2F 02 F6 | 	mov	local09, local02
027b4     03 2E 66 F0 | 	shl	local09, #3
027b8     55 00 00 FF 
027bc     0C E4 05 F1 | 	add	objptr, ##43532
027c0     F2 2E 02 F1 | 	add	local09, objptr
027c4     31 13 02 F6 | 	mov	arg01, local35
027c8     55 00 00 FF 
027cc     0C E4 85 F1 | 	sub	objptr, ##43532
027d0     A4 E5 B1 FD | 	call	#__system__str_S
027d4     17 FB 61 FC | 	wrlong	result1, local09
027d8     10 23 02 F6 | 	mov	local03, local02
027dc     11 2F 02 F6 | 	mov	local09, local03
027e0     03 2E 66 F0 | 	shl	local09, #3
027e4     55 00 00 FF 
027e8     0C E4 05 F1 | 	add	objptr, ##43532
027ec     F2 2E 02 F1 | 	add	local09, objptr
027f0     04 2E 06 F1 | 	add	local09, #4
027f4     01 00 80 FF 
027f8     17 05 68 FC | 	wrlong	##514, local09
027fc     55 00 00 FF 
02800     0C E4 85 F1 | 	sub	objptr, ##43532
02804     34 03 90 FD | 	jmp	#LR__0128
02808                 | LR__0120
02808     10 27 02 F6 | 	mov	local05, local02
0280c     03 26 66 F0 | 	shl	local05, #3
02810     55 00 00 FF 
02814     0C E4 05 F1 | 	add	objptr, ##43532
02818     F2 26 02 F1 | 	add	local05, objptr
0281c     13 13 02 FB | 	rdlong	arg01, local05
02820     55 00 00 FF 
02824     0C E4 85 F1 | 	sub	objptr, ##43532
02828     60 27 B0 FD | 	call	#_isnum
0282c     FD 24 02 F6 | 	mov	local04, result1
02830     7A 00 00 FF 
02834     1C E4 05 F1 | 	add	objptr, ##62492
02838     F2 24 62 FC | 	wrlong	local04, objptr
0283c     10 27 02 F6 | 	mov	local05, local02
02840     03 26 66 F0 | 	shl	local05, #3
02844     25 00 00 FF 
02848     10 E4 85 F1 | 	sub	objptr, ##18960
0284c     F2 26 02 F1 | 	add	local05, objptr
02850     13 13 02 FB | 	rdlong	arg01, local05
02854     55 00 00 FF 
02858     0C E4 85 F1 | 	sub	objptr, ##43532
0285c     04 2A B0 FD | 	call	#_isint
02860     FD 24 02 F6 | 	mov	local04, result1
02864     7A 00 00 FF 
02868     20 E4 05 F1 | 	add	objptr, ##62496
0286c     F2 24 62 FC | 	wrlong	local04, objptr
02870     10 27 02 F6 | 	mov	local05, local02
02874     03 26 66 F0 | 	shl	local05, #3
02878     25 00 00 FF 
0287c     14 E4 85 F1 | 	sub	objptr, ##18964
02880     F2 28 02 F6 | 	mov	local06, objptr
02884     F2 26 02 F1 | 	add	local05, objptr
02888     13 13 02 FB | 	rdlong	arg01, local05
0288c     55 00 00 FF 
02890     0C E4 85 F1 | 	sub	objptr, ##43532
02894     24 2B B0 FD | 	call	#_isdec
02898     7A 00 00 FF 
0289c     24 E4 05 F1 | 	add	objptr, ##62500
028a0     F2 FA 61 FC | 	wrlong	result1, objptr
028a4                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
028a4     08 E4 85 F1 | 	sub	objptr, #8
028a8     F2 24 0A FB | 	rdlong	local04, objptr wz
028ac     7A 00 00 FF 
028b0     1C E4 85 F1 | 	sub	objptr, ##62492
028b4     60 00 90 AD |  if_e	jmp	#LR__0121
028b8     7A 00 00 FF 
028bc     20 E4 05 F1 | 	add	objptr, ##62496
028c0     F2 2E 0A FB | 	rdlong	local09, objptr wz
028c4     7A 00 00 FF 
028c8     20 E4 85 F1 | 	sub	objptr, ##62496
028cc     48 00 90 AD |  if_e	jmp	#LR__0121
028d0     7A 00 00 FF 
028d4     24 E4 05 F1 | 	add	objptr, ##62500
028d8     F2 32 0A FB | 	rdlong	local11, objptr wz
028dc     7A 00 00 FF 
028e0     24 E4 85 F1 | 	sub	objptr, ##62500
028e4     30 00 90 AD |  if_e	jmp	#LR__0121
028e8     10 23 02 F6 | 	mov	local03, local02
028ec     11 2F 02 F6 | 	mov	local09, local03
028f0     03 2E 66 F0 | 	shl	local09, #3
028f4     55 00 00 FF 
028f8     0C E4 05 F1 | 	add	objptr, ##43532
028fc     F2 2E 02 F1 | 	add	local09, objptr
02900     04 2E 06 F1 | 	add	local09, #4
02904     01 00 80 FF 
02908     17 01 68 FC | 	wrlong	##512, local09
0290c     55 00 00 FF 
02910     0C E4 85 F1 | 	sub	objptr, ##43532
02914     24 02 90 FD | 	jmp	#LR__0128
02918                 | LR__0121
02918                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
02918     7A 00 00 FF 
0291c     1C E4 05 F1 | 	add	objptr, ##62492
02920     F2 24 0A FB | 	rdlong	local04, objptr wz
02924     7A 00 00 FF 
02928     1C E4 85 F1 | 	sub	objptr, ##62492
0292c     64 00 90 AD |  if_e	jmp	#LR__0122
02930     7A 00 00 FF 
02934     20 E4 05 F1 | 	add	objptr, ##62496
02938     F2 2E 0A FB | 	rdlong	local09, objptr wz
0293c     7A 00 00 FF 
02940     20 E4 85 F1 | 	sub	objptr, ##62496
02944     7A 00 00 5F 
02948     24 E4 05 51 |  if_ne	add	objptr, ##62500
0294c     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02950     7A 00 00 5F 
02954     24 E4 85 51 |  if_ne	sub	objptr, ##62500
02958     19 29 22 56 |  if_ne	not	local06, local11
0295c     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02960     30 00 90 AD |  if_e	jmp	#LR__0122
02964     10 23 02 F6 | 	mov	local03, local02
02968     11 2F 02 F6 | 	mov	local09, local03
0296c     03 2E 66 F0 | 	shl	local09, #3
02970     55 00 00 FF 
02974     0C E4 05 F1 | 	add	objptr, ##43532
02978     F2 2E 02 F1 | 	add	local09, objptr
0297c     04 2E 06 F1 | 	add	local09, #4
02980     01 00 80 FF 
02984     17 03 68 FC | 	wrlong	##513, local09
02988     55 00 00 FF 
0298c     0C E4 85 F1 | 	sub	objptr, ##43532
02990     A8 01 90 FD | 	jmp	#LR__0128
02994                 | LR__0122
02994                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
02994     7A 00 00 FF 
02998     1C E4 05 F1 | 	add	objptr, ##62492
0299c     F2 24 0A FB | 	rdlong	local04, objptr wz
029a0     7A 00 00 FF 
029a4     1C E4 85 F1 | 	sub	objptr, ##62492
029a8     7A 00 00 5F 
029ac     20 E4 05 51 |  if_ne	add	objptr, ##62496
029b0     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
029b4     7A 00 00 5F 
029b8     20 E4 85 51 |  if_ne	sub	objptr, ##62496
029bc     17 2F 22 56 |  if_ne	not	local09, local09
029c0     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
029c4     7A 00 00 5F 
029c8     24 E4 05 51 |  if_ne	add	objptr, ##62500
029cc     F2 32 02 5B |  if_ne	rdlong	local11, objptr
029d0     7A 00 00 5F 
029d4     24 E4 85 51 |  if_ne	sub	objptr, ##62500
029d8     19 29 22 56 |  if_ne	not	local06, local11
029dc     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
029e0     30 00 90 AD |  if_e	jmp	#LR__0123
029e4     10 23 02 F6 | 	mov	local03, local02
029e8     11 2F 02 F6 | 	mov	local09, local03
029ec     03 2E 66 F0 | 	shl	local09, #3
029f0     55 00 00 FF 
029f4     0C E4 05 F1 | 	add	objptr, ##43532
029f8     F2 2E 02 F1 | 	add	local09, objptr
029fc     04 2E 06 F1 | 	add	local09, #4
02a00     01 00 80 FF 
02a04     17 05 68 FC | 	wrlong	##514, local09
02a08     55 00 00 FF 
02a0c     0C E4 85 F1 | 	sub	objptr, ##43532
02a10     28 01 90 FD | 	jmp	#LR__0128
02a14                 | LR__0123
02a14                 | ' 
02a14                 | ' if isstring(lparts(i).part$) then 
02a14     10 27 02 F6 | 	mov	local05, local02
02a18     03 26 66 F0 | 	shl	local05, #3
02a1c     55 00 00 FF 
02a20     0C E4 05 F1 | 	add	objptr, ##43532
02a24     F2 26 02 F1 | 	add	local05, objptr
02a28     13 13 02 FB | 	rdlong	arg01, local05
02a2c     55 00 00 FF 
02a30     0C E4 85 F1 | 	sub	objptr, ##43532
02a34     44 2A B0 FD | 	call	#_isstring
02a38     00 FA 0D F2 | 	cmp	result1, #0 wz
02a3c     A0 00 90 AD |  if_e	jmp	#LR__0126
02a40     10 2F 02 F6 | 	mov	local09, local02
02a44     03 2E 66 F0 | 	shl	local09, #3
02a48     55 00 00 FF 
02a4c     0C E4 05 F1 | 	add	objptr, ##43532
02a50     F2 2E 02 F1 | 	add	local09, objptr
02a54     04 2E 06 F1 | 	add	local09, #4
02a58     01 00 80 FF 
02a5c     17 07 68 FC | 	wrlong	##515, local09
02a60     10 23 02 F6 | 	mov	local03, local02
02a64     11 2F 02 F6 | 	mov	local09, local03
02a68     03 2E 66 F0 | 	shl	local09, #3
02a6c     F2 2E 02 F1 | 	add	local09, objptr
02a70     10 37 02 F6 | 	mov	local13, local02
02a74     03 36 66 F0 | 	shl	local13, #3
02a78     F2 36 02 F1 | 	add	local13, objptr
02a7c     1B 29 02 FB | 	rdlong	local06, local13
02a80     02 32 06 F6 | 	mov	local11, #2
02a84     10 4B 02 F6 | 	mov	local23, local02
02a88     25 43 02 F6 | 	mov	local19, local23
02a8c     21 45 02 F6 | 	mov	local20, local19
02a90     03 44 66 F0 | 	shl	local20, #3
02a94     F2 46 02 F6 | 	mov	local21, objptr
02a98     F2 44 02 F1 | 	add	local20, objptr
02a9c     22 13 02 FB | 	rdlong	arg01, local20
02aa0     55 00 00 FF 
02aa4     0C E4 85 F1 | 	sub	objptr, ##43532
02aa8     09 2B 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0125-@LR__0124)>>2,fcache_load_ptr_
02ab0                 | LR__0124
02ab0     15 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 2A 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0124
02abc                 | LR__0125
02abc     09 2B 82 F1 | 	sub	local07, arg01
02ac0     15 31 02 F6 | 	mov	local10, local07
02ac4     02 30 86 F1 | 	sub	local10, #2
02ac8     14 13 02 F6 | 	mov	arg01, local06
02acc     19 15 02 F6 | 	mov	arg02, local11
02ad0     18 17 02 F6 | 	mov	arg03, local10
02ad4     C0 E1 B1 FD | 	call	#__system__Mid_S
02ad8     17 FB 61 FC | 	wrlong	result1, local09
02adc     5C 00 90 FD | 	jmp	#LR__0128
02ae0                 | LR__0126
02ae0                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02ae0     10 23 02 F6 | 	mov	local03, local02
02ae4     11 27 02 F6 | 	mov	local05, local03
02ae8     03 26 66 F0 | 	shl	local05, #3
02aec     55 00 00 FF 
02af0     0C E4 05 F1 | 	add	objptr, ##43532
02af4     F2 26 02 F1 | 	add	local05, objptr
02af8     13 13 02 FB | 	rdlong	arg01, local05
02afc     55 00 00 FF 
02b00     0C E4 85 F1 | 	sub	objptr, ##43532
02b04     10 22 B0 FD | 	call	#_isname
02b08     00 FA 4D F2 | 	cmps	result1, #0 wz
02b0c     2C 00 90 AD |  if_e	jmp	#LR__0127
02b10     10 23 02 F6 | 	mov	local03, local02
02b14     11 2F 02 F6 | 	mov	local09, local03
02b18     03 2E 66 F0 | 	shl	local09, #3
02b1c     55 00 00 FF 
02b20     0C E4 05 F1 | 	add	objptr, ##43532
02b24     F2 2E 02 F1 | 	add	local09, objptr
02b28     04 2E 06 F1 | 	add	local09, #4
02b2c     01 00 80 FF 
02b30     17 09 68 FC | 	wrlong	##516, local09
02b34     55 00 00 FF 
02b38     0C E4 85 F1 | 	sub	objptr, ##43532
02b3c                 | LR__0127
02b3c                 | LR__0128
02b3c     01 20 06 F1 | 	add	local02, #1
02b40     84 F9 9F FD | 	jmp	#LR__0119
02b44                 | LR__0129
02b44     1D 2F 02 F6 | 	mov	local09, local15
02b48     03 2E 66 F0 | 	shl	local09, #3
02b4c     55 00 00 FF 
02b50     0C E4 05 F1 | 	add	objptr, ##43532
02b54     F2 2E 02 F1 | 	add	local09, objptr
02b58     04 2E 06 F1 | 	add	local09, #4
02b5c     17 FD 6B FC | 	wrlong	#510, local09
02b60     1D 2F 02 F6 | 	mov	local09, local15
02b64     03 2E 66 F0 | 	shl	local09, #3
02b68     F2 26 02 F6 | 	mov	local05, objptr
02b6c     F2 2E 02 F1 | 	add	local09, objptr
02b70     71 01 00 FF 
02b74     11 28 06 F6 | 	mov	local06, ##@LR__4832
02b78     17 29 62 FC | 	wrlong	local06, local09
02b7c     10 00 00 FF 
02b80     54 E4 05 F1 | 	add	objptr, ##8276
02b84     F2 3A 62 FC | 	wrlong	local15, objptr
02b88                 | ' 
02b88                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02b88                 | ' 
02b88                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02b88                 | '  
02b88                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02b88     14 00 00 FF 
02b8c     B4 E5 05 F1 | 	add	objptr, ##10676
02b90     F2 12 02 FB | 	rdlong	arg01, objptr
02b94     7A 00 00 FF 
02b98     14 E4 85 F1 | 	sub	objptr, ##62484
02b9c     71 01 00 FF 
02ba0     12 2E 06 F6 | 	mov	local09, ##@LR__4833
02ba4     17 15 02 F6 | 	mov	arg02, local09
02ba8     B4 BF B1 FD | 	call	#__system___string_cmp
02bac     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb0     1C 01 90 AD |  if_e	jmp	#LR__0130
02bb4     7A 00 00 FF 
02bb8     14 E4 05 F1 | 	add	objptr, ##62484
02bbc     F2 12 02 FB | 	rdlong	arg01, objptr
02bc0     7A 00 00 FF 
02bc4     14 E4 85 F1 | 	sub	objptr, ##62484
02bc8     71 01 00 FF 
02bcc     17 26 06 F6 | 	mov	local05, ##@LR__4834
02bd0     13 2F 02 F6 | 	mov	local09, local05
02bd4     17 15 02 F6 | 	mov	arg02, local09
02bd8     84 BF B1 FD | 	call	#__system___string_cmp
02bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02be0     EC 00 90 AD |  if_e	jmp	#LR__0130
02be4     7A 00 00 FF 
02be8     14 E4 05 F1 | 	add	objptr, ##62484
02bec     F2 12 02 FB | 	rdlong	arg01, objptr
02bf0     7A 00 00 FF 
02bf4     14 E4 85 F1 | 	sub	objptr, ##62484
02bf8     71 01 00 FF 
02bfc     1C 28 06 F6 | 	mov	local06, ##@LR__4835
02c00     14 27 02 F6 | 	mov	local05, local06
02c04     13 15 02 F6 | 	mov	arg02, local05
02c08     54 BF B1 FD | 	call	#__system___string_cmp
02c0c     FD 2E 0A F6 | 	mov	local09, result1 wz
02c10     BC 00 90 AD |  if_e	jmp	#LR__0130
02c14     7A 00 00 FF 
02c18     14 E4 05 F1 | 	add	objptr, ##62484
02c1c     F2 12 02 FB | 	rdlong	arg01, objptr
02c20     7A 00 00 FF 
02c24     14 E4 85 F1 | 	sub	objptr, ##62484
02c28     71 01 00 FF 
02c2c     21 32 06 F6 | 	mov	local11, ##@LR__4836
02c30     19 29 02 F6 | 	mov	local06, local11
02c34     14 15 02 F6 | 	mov	arg02, local06
02c38     24 BF B1 FD | 	call	#__system___string_cmp
02c3c     FD 26 0A F6 | 	mov	local05, result1 wz
02c40     8C 00 90 AD |  if_e	jmp	#LR__0130
02c44     7A 00 00 FF 
02c48     14 E4 05 F1 | 	add	objptr, ##62484
02c4c     F2 12 02 FB | 	rdlong	arg01, objptr
02c50     7A 00 00 FF 
02c54     14 E4 85 F1 | 	sub	objptr, ##62484
02c58     71 01 00 FF 
02c5c     25 30 06 F6 | 	mov	local10, ##@LR__4837
02c60     18 33 02 F6 | 	mov	local11, local10
02c64     19 15 02 F6 | 	mov	arg02, local11
02c68     F4 BE B1 FD | 	call	#__system___string_cmp
02c6c     FD 28 0A F6 | 	mov	local06, result1 wz
02c70     5C 00 90 AD |  if_e	jmp	#LR__0130
02c74     7A 00 00 FF 
02c78     14 E4 05 F1 | 	add	objptr, ##62484
02c7c     F2 12 02 FB | 	rdlong	arg01, objptr
02c80     7A 00 00 FF 
02c84     14 E4 85 F1 | 	sub	objptr, ##62484
02c88     71 01 00 FF 
02c8c     29 30 06 F6 | 	mov	local10, ##@LR__4838
02c90     18 15 02 F6 | 	mov	arg02, local10
02c94     C8 BE B1 FD | 	call	#__system___string_cmp
02c98     FD 32 0A F6 | 	mov	local11, result1 wz
02c9c     30 00 90 AD |  if_e	jmp	#LR__0130
02ca0     7A 00 00 FF 
02ca4     14 E4 05 F1 | 	add	objptr, ##62484
02ca8     F2 12 02 FB | 	rdlong	arg01, objptr
02cac     7A 00 00 FF 
02cb0     14 E4 85 F1 | 	sub	objptr, ##62484
02cb4     71 01 00 FF 
02cb8     2C 34 06 F6 | 	mov	local12, ##@LR__4839
02cbc     1A 37 02 F6 | 	mov	local13, local12
02cc0     1B 15 02 F6 | 	mov	arg02, local13
02cc4     98 BE B1 FD | 	call	#__system___string_cmp
02cc8     FD 30 0A F6 | 	mov	local10, result1 wz
02ccc     9C 00 90 5D |  if_ne	jmp	#LR__0131
02cd0                 | LR__0130
02cd0     7A 00 00 FF 
02cd4     10 E4 05 F1 | 	add	objptr, ##62480
02cd8     F2 34 02 FB | 	rdlong	local12, objptr
02cdc     1A 37 02 F6 | 	mov	local13, local12
02ce0     01 36 06 F1 | 	add	local13, #1
02ce4     1B 4B 02 F6 | 	mov	local23, local13
02ce8     25 43 02 F6 | 	mov	local19, local23
02cec     03 42 66 F0 | 	shl	local19, #3
02cf0     25 00 00 FF 
02cf4     04 E4 85 F1 | 	sub	objptr, ##18948
02cf8     F2 44 02 F6 | 	mov	local20, objptr
02cfc     F2 42 02 F1 | 	add	local19, objptr
02d00     04 42 06 F1 | 	add	local19, #4
02d04     21 4D 02 FB | 	rdlong	local24, local19
02d08     04 42 86 F1 | 	sub	local19, #4
02d0c     26 47 02 F6 | 	mov	local21, local24
02d10     01 00 00 FF 
02d14     04 46 0E F2 | 	cmp	local21, ##516 wz
02d18     55 00 00 FF 
02d1c     0C E4 85 F1 | 	sub	objptr, ##43532
02d20     48 00 90 5D |  if_ne	jmp	#LR__0131
02d24     7A 00 00 FF 
02d28     10 E4 05 F1 | 	add	objptr, ##62480
02d2c     F2 2E 02 FB | 	rdlong	local09, objptr
02d30     01 2E 06 F1 | 	add	local09, #1
02d34     17 27 02 F6 | 	mov	local05, local09
02d38     03 26 66 F0 | 	shl	local05, #3
02d3c     25 00 00 FF 
02d40     04 E4 85 F1 | 	sub	objptr, ##18948
02d44     F2 28 02 F6 | 	mov	local06, objptr
02d48     F2 26 02 F1 | 	add	local05, objptr
02d4c     01 00 00 FF 
02d50     03 32 06 F6 | 	mov	local11, ##515
02d54     04 26 06 F1 | 	add	local05, #4
02d58     01 00 80 FF 
02d5c     13 07 68 FC | 	wrlong	##515, local05
02d60     04 26 86 F1 | 	sub	local05, #4
02d64     55 00 00 FF 
02d68     0C E4 85 F1 | 	sub	objptr, ##43532
02d6c                 | LR__0131
02d6c                 | ' 
02d6c                 | ' ' abbreviated command has to be at the position addptr
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' '2b determine a type of the line
02d6c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02d6c     55 00 00 FF 
02d70     0C E4 05 F1 | 	add	objptr, ##43532
02d74     F2 12 02 FB | 	rdlong	arg01, objptr
02d78     55 00 00 FF 
02d7c     0C E4 85 F1 | 	sub	objptr, ##43532
02d80     38 26 B0 FD | 	call	#_isdec
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     30 00 90 AD |  if_e	jmp	#LR__0132
02d8c     55 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##43532
02d94     F2 12 02 FB | 	rdlong	arg01, objptr
02d98     55 00 00 FF 
02d9c     0C E4 85 F1 | 	sub	objptr, ##43532
02da0     00 14 06 F6 | 	mov	arg02, #0
02da4     88 EF B1 FD | 	call	#__system____builtin_atoi
02da8     79 00 00 FF 
02dac     A0 E5 05 F1 | 	add	objptr, ##62368
02db0     F2 FA 61 FC | 	wrlong	result1, objptr
02db4     79 00 00 FF 
02db8     A0 E5 85 F1 | 	sub	objptr, ##62368
02dbc                 | LR__0132
02dbc                 | ' 
02dbc                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02dbc     79 00 00 FF 
02dc0     A0 E5 05 F1 | 	add	objptr, ##62368
02dc4     F2 24 02 FB | 	rdlong	local04, objptr
02dc8     79 00 00 FF 
02dcc     A0 E5 85 F1 | 	sub	objptr, ##62368
02dd0     01 24 16 F2 | 	cmp	local04, #1 wc
02dd4     3C 00 90 CD |  if_b	jmp	#LR__0133
02dd8     01 3A 0E F2 | 	cmp	local15, #1 wz
02ddc     57 00 00 AF 
02de0     24 E4 05 A1 |  if_e	add	objptr, ##44580
02de4     F2 26 02 AB |  if_e	rdlong	local05, objptr
02de8     57 00 00 AF 
02dec     24 E4 85 A1 |  if_e	sub	objptr, ##44580
02df0     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02df4     1C 00 90 5D |  if_ne	jmp	#LR__0133
02df8     79 00 00 FF 
02dfc     A0 E5 05 F1 | 	add	objptr, ##62368
02e00     F2 12 02 FB | 	rdlong	arg01, objptr
02e04     79 00 00 FF 
02e08     A0 E5 85 F1 | 	sub	objptr, ##62368
02e0c     D0 26 B0 FD | 	call	#_deleteline
02e10     4C 05 90 FD | 	jmp	#LR__0150
02e14                 | LR__0133
02e14                 | ' 
02e14                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02e14     79 00 00 FF 
02e18     A0 E5 05 F1 | 	add	objptr, ##62368
02e1c     F2 24 02 FB | 	rdlong	local04, objptr
02e20     79 00 00 FF 
02e24     A0 E5 85 F1 | 	sub	objptr, ##62368
02e28     01 24 16 F2 | 	cmp	local04, #1 wc
02e2c     EC 00 90 CD |  if_b	jmp	#LR__0136
02e30     57 00 00 FF 
02e34     24 E4 05 F1 | 	add	objptr, ##44580
02e38     F2 26 02 FB | 	rdlong	local05, objptr
02e3c     57 00 00 FF 
02e40     24 E4 85 F1 | 	sub	objptr, ##44580
02e44     13 2F 0A F6 | 	mov	local09, local05 wz
02e48     20 00 90 AD |  if_e	jmp	#LR__0134
02e4c     57 00 00 FF 
02e50     24 E4 05 F1 | 	add	objptr, ##44580
02e54     F2 32 02 FB | 	rdlong	local11, objptr
02e58     57 00 00 FF 
02e5c     24 E4 85 F1 | 	sub	objptr, ##44580
02e60     19 29 02 F6 | 	mov	local06, local11
02e64     03 28 0E F2 | 	cmp	local06, #3 wz
02e68     B0 00 90 5D |  if_ne	jmp	#LR__0136
02e6c                 | LR__0134
02e6c     55 00 00 FF 
02e70     20 E4 05 F1 | 	add	objptr, ##43552
02e74     F2 36 02 FB | 	rdlong	local13, objptr
02e78     55 00 00 FF 
02e7c     20 E4 85 F1 | 	sub	objptr, ##43552
02e80     1B 31 02 F6 | 	mov	local10, local13
02e84     1B 30 0E F2 | 	cmp	local10, #27 wz
02e88     90 00 90 AD |  if_e	jmp	#LR__0136
02e8c     79 00 00 FF 
02e90     A0 E5 05 F1 | 	add	objptr, ##62368
02e94     F2 12 02 FB | 	rdlong	arg01, objptr
02e98     22 00 00 FF 
02e9c     7C E5 85 F1 | 	sub	objptr, ##17788
02ea0     F2 16 02 FB | 	rdlong	arg03, objptr
02ea4     57 00 00 FF 
02ea8     24 E4 85 F1 | 	sub	objptr, ##44580
02eac     00 14 06 F6 | 	mov	arg02, #0
02eb0     94 3A B0 FD | 	call	#_compile
02eb4     FD 1E 0A F6 | 	mov	local01, result1 wz
02eb8                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02eb8                 | '   if err<>0 then printerror(err): goto 104
02eb8     0C 00 90 AD |  if_e	jmp	#LR__0135
02ebc     0F 13 02 F6 | 	mov	arg01, local01
02ec0     14 78 B1 FD | 	call	#_printerror
02ec4     98 04 90 FD | 	jmp	#LR__0150
02ec8                 | LR__0135
02ec8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02ec8     79 00 00 FF 
02ecc     EC E5 05 F1 | 	add	objptr, ##62444
02ed0     F2 12 02 FB | 	rdlong	arg01, objptr
02ed4     79 00 00 FF 
02ed8     EC E5 85 F1 | 	sub	objptr, ##62444
02edc     71 01 00 FF 
02ee0     30 14 06 F6 | 	mov	arg02, ##@LR__4840
02ee4     78 BC B1 FD | 	call	#__system___string_cmp
02ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
02eec     70 04 90 AD |  if_e	jmp	#LR__0150
02ef0     79 00 00 FF 
02ef4     EC E5 05 F1 | 	add	objptr, ##62444
02ef8     F2 24 02 FB | 	rdlong	local04, objptr
02efc     22 00 00 FF 
02f00     D0 E5 85 F1 | 	sub	objptr, ##17872
02f04     F2 24 62 FC | 	wrlong	local04, objptr
02f08     08 E4 05 F1 | 	add	objptr, #8
02f0c     F2 08 68 FC | 	wrlong	#4, objptr
02f10     57 00 00 FF 
02f14     24 E4 85 F1 | 	sub	objptr, ##44580
02f18     6C DB 9F FD | 	jmp	#LR__0020
02f1c                 | LR__0136
02f1c                 | '       							
02f1c                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02f1c     79 00 00 FF 
02f20     A0 E5 05 F1 | 	add	objptr, ##62368
02f24     F2 24 02 FB | 	rdlong	local04, objptr
02f28     79 00 00 FF 
02f2c     A0 E5 85 F1 | 	sub	objptr, ##62368
02f30     01 24 16 F2 | 	cmp	local04, #1 wc
02f34     EC 00 90 CD |  if_b	jmp	#LR__0139
02f38     57 00 00 FF 
02f3c     24 E4 05 F1 | 	add	objptr, ##44580
02f40     F2 26 02 FB | 	rdlong	local05, objptr
02f44     57 00 00 FF 
02f48     24 E4 85 F1 | 	sub	objptr, ##44580
02f4c     01 26 0E F2 | 	cmp	local05, #1 wz
02f50     20 00 90 AD |  if_e	jmp	#LR__0137
02f54     57 00 00 FF 
02f58     24 E4 05 F1 | 	add	objptr, ##44580
02f5c     F2 32 02 FB | 	rdlong	local11, objptr
02f60     57 00 00 FF 
02f64     24 E4 85 F1 | 	sub	objptr, ##44580
02f68     19 29 02 F6 | 	mov	local06, local11
02f6c     02 28 0E F2 | 	cmp	local06, #2 wz
02f70     B0 00 90 5D |  if_ne	jmp	#LR__0139
02f74                 | LR__0137
02f74     55 00 00 FF 
02f78     18 E4 05 F1 | 	add	objptr, ##43544
02f7c     F2 36 02 FB | 	rdlong	local13, objptr
02f80     55 00 00 FF 
02f84     18 E4 85 F1 | 	sub	objptr, ##43544
02f88     1B 31 02 F6 | 	mov	local10, local13
02f8c     1B 30 0E F2 | 	cmp	local10, #27 wz
02f90     90 00 90 AD |  if_e	jmp	#LR__0139
02f94     79 00 00 FF 
02f98     A0 E5 05 F1 | 	add	objptr, ##62368
02f9c     F2 12 02 FB | 	rdlong	arg01, objptr
02fa0     22 00 00 FF 
02fa4     7C E5 85 F1 | 	sub	objptr, ##17788
02fa8     F2 16 02 FB | 	rdlong	arg03, objptr
02fac     57 00 00 FF 
02fb0     24 E4 85 F1 | 	sub	objptr, ##44580
02fb4     00 14 06 F6 | 	mov	arg02, #0
02fb8     8C 39 B0 FD | 	call	#_compile
02fbc     FD 1E 0A F6 | 	mov	local01, result1 wz
02fc0                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02fc0                 | '   if err<>0 then printerror(err): goto 104
02fc0     0C 00 90 AD |  if_e	jmp	#LR__0138
02fc4     0F 13 02 F6 | 	mov	arg01, local01
02fc8     0C 77 B1 FD | 	call	#_printerror
02fcc     90 03 90 FD | 	jmp	#LR__0150
02fd0                 | LR__0138
02fd0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02fd0     79 00 00 FF 
02fd4     EC E5 05 F1 | 	add	objptr, ##62444
02fd8     F2 12 02 FB | 	rdlong	arg01, objptr
02fdc     79 00 00 FF 
02fe0     EC E5 85 F1 | 	sub	objptr, ##62444
02fe4     71 01 00 FF 
02fe8     31 14 06 F6 | 	mov	arg02, ##@LR__4841
02fec     70 BB B1 FD | 	call	#__system___string_cmp
02ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff4     68 03 90 AD |  if_e	jmp	#LR__0150
02ff8     79 00 00 FF 
02ffc     EC E5 05 F1 | 	add	objptr, ##62444
03000     F2 24 02 FB | 	rdlong	local04, objptr
03004     22 00 00 FF 
03008     D0 E5 85 F1 | 	sub	objptr, ##17872
0300c     F2 24 62 FC | 	wrlong	local04, objptr
03010     08 E4 05 F1 | 	add	objptr, #8
03014     F2 08 68 FC | 	wrlong	#4, objptr
03018     57 00 00 FF 
0301c     24 E4 85 F1 | 	sub	objptr, ##44580
03020     64 DA 9F FD | 	jmp	#LR__0020
03024                 | LR__0139
03024                 | ' 							 
03024                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
03024     79 00 00 FF 
03028     A0 E5 05 F1 | 	add	objptr, ##62368
0302c     F2 24 02 FB | 	rdlong	local04, objptr
03030     79 00 00 FF 
03034     A0 E5 85 F1 | 	sub	objptr, ##62368
03038     01 24 16 F2 | 	cmp	local04, #1 wc
0303c     D4 00 90 CD |  if_b	jmp	#LR__0141
03040     57 00 00 FF 
03044     24 E4 05 F1 | 	add	objptr, ##44580
03048     F2 26 0A FB | 	rdlong	local05, objptr wz
0304c     57 00 00 FF 
03050     24 E4 85 F1 | 	sub	objptr, ##44580
03054     20 00 90 AD |  if_e	jmp	#LR__0140
03058     57 00 00 FF 
0305c     24 E4 05 F1 | 	add	objptr, ##44580
03060     F2 32 02 FB | 	rdlong	local11, objptr
03064     57 00 00 FF 
03068     24 E4 85 F1 | 	sub	objptr, ##44580
0306c     19 29 02 F6 | 	mov	local06, local11
03070     03 28 0E F2 | 	cmp	local06, #3 wz
03074     9C 00 90 5D |  if_ne	jmp	#LR__0141
03078                 | LR__0140
03078     55 00 00 FF 
0307c     20 E4 05 F1 | 	add	objptr, ##43552
03080     F2 36 02 FB | 	rdlong	local13, objptr
03084     55 00 00 FF 
03088     20 E4 85 F1 | 	sub	objptr, ##43552
0308c     1B 31 02 F6 | 	mov	local10, local13
03090     1B 30 0E F2 | 	cmp	local10, #27 wz
03094     7C 00 90 5D |  if_ne	jmp	#LR__0141
03098     79 00 00 FF 
0309c     A0 E5 05 F1 | 	add	objptr, ##62368
030a0     F2 12 02 FB | 	rdlong	arg01, objptr
030a4     22 00 00 FF 
030a8     7C E5 85 F1 | 	sub	objptr, ##17788
030ac     F2 16 02 FB | 	rdlong	arg03, objptr
030b0     57 00 00 FF 
030b4     24 E4 85 F1 | 	sub	objptr, ##44580
030b8     00 14 06 F6 | 	mov	arg02, #0
030bc     58 39 B0 FD | 	call	#_compile_assign
030c0                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
030c0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
030c0     79 00 00 FF 
030c4     EC E5 05 F1 | 	add	objptr, ##62444
030c8     F2 12 02 FB | 	rdlong	arg01, objptr
030cc     79 00 00 FF 
030d0     EC E5 85 F1 | 	sub	objptr, ##62444
030d4     71 01 00 FF 
030d8     32 14 06 F6 | 	mov	arg02, ##@LR__4842
030dc     80 BA B1 FD | 	call	#__system___string_cmp
030e0     00 FA 0D F2 | 	cmp	result1, #0 wz
030e4     78 02 90 AD |  if_e	jmp	#LR__0150
030e8     79 00 00 FF 
030ec     EC E5 05 F1 | 	add	objptr, ##62444
030f0     F2 24 02 FB | 	rdlong	local04, objptr
030f4     22 00 00 FF 
030f8     D0 E5 85 F1 | 	sub	objptr, ##17872
030fc     F2 24 62 FC | 	wrlong	local04, objptr
03100     08 E4 05 F1 | 	add	objptr, #8
03104     F2 08 68 FC | 	wrlong	#4, objptr
03108     57 00 00 FF 
0310c     24 E4 85 F1 | 	sub	objptr, ##44580
03110     74 D9 9F FD | 	jmp	#LR__0020
03114                 | LR__0141
03114                 | '     							 
03114                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03114     79 00 00 FF 
03118     A0 E5 05 F1 | 	add	objptr, ##62368
0311c     F2 24 02 FB | 	rdlong	local04, objptr
03120     79 00 00 FF 
03124     A0 E5 85 F1 | 	sub	objptr, ##62368
03128     01 24 16 F2 | 	cmp	local04, #1 wc
0312c     CC 00 90 CD |  if_b	jmp	#LR__0142
03130     57 00 00 FF 
03134     24 E4 05 F1 | 	add	objptr, ##44580
03138     F2 26 02 FB | 	rdlong	local05, objptr
0313c     57 00 00 FF 
03140     24 E4 85 F1 | 	sub	objptr, ##44580
03144     01 26 0E F2 | 	cmp	local05, #1 wz
03148     57 00 00 5F 
0314c     24 E4 05 51 |  if_ne	add	objptr, ##44580
03150     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03154     57 00 00 5F 
03158     24 E4 85 51 |  if_ne	sub	objptr, ##44580
0315c     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03160     55 00 00 AF 
03164     18 E4 05 A1 |  if_e	add	objptr, ##43544
03168     F2 36 02 AB |  if_e	rdlong	local13, objptr
0316c     55 00 00 AF 
03170     18 E4 85 A1 |  if_e	sub	objptr, ##43544
03174     1B 31 02 A6 |  if_e	mov	local10, local13
03178     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
0317c     7C 00 90 5D |  if_ne	jmp	#LR__0142
03180     79 00 00 FF 
03184     A0 E5 05 F1 | 	add	objptr, ##62368
03188     F2 12 02 FB | 	rdlong	arg01, objptr
0318c     22 00 00 FF 
03190     7C E5 85 F1 | 	sub	objptr, ##17788
03194     F2 16 02 FB | 	rdlong	arg03, objptr
03198     57 00 00 FF 
0319c     24 E4 85 F1 | 	sub	objptr, ##44580
031a0     00 14 06 F6 | 	mov	arg02, #0
031a4     70 38 B0 FD | 	call	#_compile_assign
031a8                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
031a8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
031a8     79 00 00 FF 
031ac     EC E5 05 F1 | 	add	objptr, ##62444
031b0     F2 12 02 FB | 	rdlong	arg01, objptr
031b4     79 00 00 FF 
031b8     EC E5 85 F1 | 	sub	objptr, ##62444
031bc     71 01 00 FF 
031c0     33 14 06 F6 | 	mov	arg02, ##@LR__4843
031c4     98 B9 B1 FD | 	call	#__system___string_cmp
031c8     00 FA 0D F2 | 	cmp	result1, #0 wz
031cc     90 01 90 AD |  if_e	jmp	#LR__0150
031d0     79 00 00 FF 
031d4     EC E5 05 F1 | 	add	objptr, ##62444
031d8     F2 24 02 FB | 	rdlong	local04, objptr
031dc     22 00 00 FF 
031e0     D0 E5 85 F1 | 	sub	objptr, ##17872
031e4     F2 24 62 FC | 	wrlong	local04, objptr
031e8     08 E4 05 F1 | 	add	objptr, #8
031ec     F2 08 68 FC | 	wrlong	#4, objptr
031f0     57 00 00 FF 
031f4     24 E4 85 F1 | 	sub	objptr, ##44580
031f8     8C D8 9F FD | 	jmp	#LR__0020
031fc                 | LR__0142
031fc                 | ' 
031fc                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
031fc     55 00 00 FF 
03200     10 E4 05 F1 | 	add	objptr, ##43536
03204     F2 24 02 FB | 	rdlong	local04, objptr
03208     55 00 00 FF 
0320c     10 E4 85 F1 | 	sub	objptr, ##43536
03210     01 00 00 FF 
03214     04 24 0E F2 | 	cmp	local04, ##516 wz
03218     55 00 00 AF 
0321c     18 E4 05 A1 |  if_e	add	objptr, ##43544
03220     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03224     55 00 00 AF 
03228     18 E4 85 A1 |  if_e	sub	objptr, ##43544
0322c     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03230     14 00 90 5D |  if_ne	jmp	#LR__0143
03234     00 12 06 F6 | 	mov	arg01, #0
03238     00 14 06 F6 | 	mov	arg02, #0
0323c     00 16 06 F6 | 	mov	arg03, #0
03240     D4 37 B0 FD | 	call	#_compile_assign
03244     90 00 90 FD | 	jmp	#LR__0145
03248                 | LR__0143
03248                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
03248     55 00 00 FF 
0324c     10 E4 05 F1 | 	add	objptr, ##43536
03250     F2 24 02 FB | 	rdlong	local04, objptr
03254     55 00 00 FF 
03258     10 E4 85 F1 | 	sub	objptr, ##43536
0325c     01 00 00 FF 
03260     04 24 0E F2 | 	cmp	local04, ##516 wz
03264     55 00 00 AF 
03268     18 E4 05 A1 |  if_e	add	objptr, ##43544
0326c     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03270     55 00 00 AF 
03274     18 E4 85 A1 |  if_e	sub	objptr, ##43544
03278     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
0327c     44 00 90 5D |  if_ne	jmp	#LR__0144
03280     00 12 06 F6 | 	mov	arg01, #0
03284     48 12 B2 FD | 	call	#__system___getiolock_0484
03288     FD 12 02 F6 | 	mov	arg01, result1
0328c     A8 B8 B1 FD | 	call	#__system___lockmem
03290     71 01 00 FF 
03294     34 14 06 F6 | 	mov	arg02, ##@LR__4844
03298     00 12 06 F6 | 	mov	arg01, #0
0329c     00 16 06 F6 | 	mov	arg03, #0
032a0     9C C5 B1 FD | 	call	#__system___basic_print_string
032a4     00 12 06 F6 | 	mov	arg01, #0
032a8     0A 14 06 F6 | 	mov	arg02, #10
032ac     00 16 06 F6 | 	mov	arg03, #0
032b0     34 C5 B1 FD | 	call	#__system___basic_print_char
032b4     00 12 06 F6 | 	mov	arg01, #0
032b8     14 12 B2 FD | 	call	#__system___getiolock_0484
032bc     FD 00 68 FC | 	wrlong	#0, result1
032c0     7C 00 90 FD | 	jmp	#LR__0149
032c4                 | LR__0144
032c4     00 12 06 F6 | 	mov	arg01, #0
032c8     00 14 06 F6 | 	mov	arg02, #0
032cc     00 16 06 F6 | 	mov	arg03, #0
032d0     74 36 B0 FD | 	call	#_compile
032d4     FD 1E 02 F6 | 	mov	local01, result1
032d8                 | LR__0145
032d8                 | ' 
032d8                 | ' ' if we are here, this is not a program line to add, so try to execute this
032d8                 | ' 
032d8                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
032d8                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
032d8                 | ' if err=0 then execute_line() else printerror(err)
032d8     00 1E 0E F2 | 	cmp	local01, #0 wz
032dc     0C 00 90 5D |  if_ne	jmp	#LR__0146
032e0     00 12 06 F6 | 	mov	arg01, #0
032e4     74 74 B0 FD | 	call	#_execute_line
032e8     08 00 90 FD | 	jmp	#LR__0147
032ec                 | LR__0146
032ec     0F 13 02 F6 | 	mov	arg01, local01
032f0     E4 73 B1 FD | 	call	#_printerror
032f4                 | LR__0147
032f4                 | ' if rest$<>"" then line$=rest$:  goto 108 
032f4     79 00 00 FF 
032f8     EC E5 05 F1 | 	add	objptr, ##62444
032fc     F2 12 02 FB | 	rdlong	arg01, objptr
03300     79 00 00 FF 
03304     EC E5 85 F1 | 	sub	objptr, ##62444
03308     71 01 00 FF 
0330c     63 14 06 F6 | 	mov	arg02, ##@LR__4845
03310     4C B8 B1 FD | 	call	#__system___string_cmp
03314     00 FA 0D F2 | 	cmp	result1, #0 wz
03318     24 00 90 AD |  if_e	jmp	#LR__0148
0331c     79 00 00 FF 
03320     EC E5 05 F1 | 	add	objptr, ##62444
03324     F2 24 02 FB | 	rdlong	local04, objptr
03328     22 00 00 FF 
0332c     D0 E5 85 F1 | 	sub	objptr, ##17872
03330     F2 24 62 FC | 	wrlong	local04, objptr
03334     57 00 00 FF 
03338     1C E4 85 F1 | 	sub	objptr, ##44572
0333c     48 D7 9F FD | 	jmp	#LR__0020
03340                 | LR__0148
03340                 | LR__0149
03340     71 01 00 FF 
03344     64 12 06 F6 | 	mov	arg01, ##@LR__4846
03348                 | ' 
03348                 | ' write(text)
03348     20 A5 B1 FD | 	call	#_hg010b_spin2_write
0334c                 | ' crlf
0334c     E8 A7 B1 FD | 	call	#_hg010b_spin2_crlf
03350     71 01 00 FF 
03354     65 12 06 F6 | 	mov	arg01, ##@LR__4847
03358                 | ' 
03358                 | ' write(text)
03358     10 A5 B1 FD | 	call	#_hg010b_spin2_write
0335c                 | ' crlf
0335c     D8 A7 B1 FD | 	call	#_hg010b_spin2_crlf
03360                 | LR__0150
03360     A7 F0 03 F6 | 	mov	ptra, fp
03364     B2 00 A0 FD | 	call	#popregs_
03368                 | _interpret_ret
03368     2D 00 64 FD | 	ret
0336c                 | 
0336c                 | ' 
0336c                 | ' 
0336c                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
0336c                 | ' 
0336c                 | ' function isoperator(s as string) as ubyte
0336c                 | _isoperator
0336c     01 4A 05 F6 | 	mov	COUNT_, #1
03370     A8 00 A0 FD | 	call	#pushregs_
03374                 | ' 
03374                 | ' select case s
03374     09 1F 02 F6 | 	mov	local01, arg01
03378     71 01 00 FF 
0337c     6B 14 06 F6 | 	mov	arg02, ##@LR__4848
03380     0F 13 02 F6 | 	mov	arg01, local01
03384     D8 B7 B1 FD | 	call	#__system___string_cmp
03388     00 FA 0D F2 | 	cmp	result1, #0 wz
0338c     FC 01 90 AD |  if_e	jmp	#LR__0160
03390     71 01 00 FF 
03394     6D 14 06 F6 | 	mov	arg02, ##@LR__4849
03398     0F 13 02 F6 | 	mov	arg01, local01
0339c     C0 B7 B1 FD | 	call	#__system___string_cmp
033a0     00 FA 0D F2 | 	cmp	result1, #0 wz
033a4     EC 01 90 AD |  if_e	jmp	#LR__0161
033a8     71 01 00 FF 
033ac     6F 14 06 F6 | 	mov	arg02, ##@LR__4850
033b0     0F 13 02 F6 | 	mov	arg01, local01
033b4     A8 B7 B1 FD | 	call	#__system___string_cmp
033b8     00 FA 0D F2 | 	cmp	result1, #0 wz
033bc     DC 01 90 AD |  if_e	jmp	#LR__0162
033c0     71 01 00 FF 
033c4     72 14 06 F6 | 	mov	arg02, ##@LR__4851
033c8     0F 13 02 F6 | 	mov	arg01, local01
033cc     90 B7 B1 FD | 	call	#__system___string_cmp
033d0     00 FA 0D F2 | 	cmp	result1, #0 wz
033d4     CC 01 90 AD |  if_e	jmp	#LR__0163
033d8     71 01 00 FF 
033dc     76 14 06 F6 | 	mov	arg02, ##@LR__4852
033e0     0F 13 02 F6 | 	mov	arg01, local01
033e4     78 B7 B1 FD | 	call	#__system___string_cmp
033e8     00 FA 0D F2 | 	cmp	result1, #0 wz
033ec     BC 01 90 AD |  if_e	jmp	#LR__0164
033f0     71 01 00 FF 
033f4     78 14 06 F6 | 	mov	arg02, ##@LR__4853
033f8     0F 13 02 F6 | 	mov	arg01, local01
033fc     60 B7 B1 FD | 	call	#__system___string_cmp
03400     00 FA 0D F2 | 	cmp	result1, #0 wz
03404     AC 01 90 AD |  if_e	jmp	#LR__0165
03408     71 01 00 FF 
0340c     7A 14 06 F6 | 	mov	arg02, ##@LR__4854
03410     0F 13 02 F6 | 	mov	arg01, local01
03414     48 B7 B1 FD | 	call	#__system___string_cmp
03418     00 FA 0D F2 | 	cmp	result1, #0 wz
0341c     9C 01 90 AD |  if_e	jmp	#LR__0166
03420     71 01 00 FF 
03424     7E 14 06 F6 | 	mov	arg02, ##@LR__4855
03428     0F 13 02 F6 | 	mov	arg01, local01
0342c     30 B7 B1 FD | 	call	#__system___string_cmp
03430     00 FA 0D F2 | 	cmp	result1, #0 wz
03434     8C 01 90 AD |  if_e	jmp	#LR__0167
03438     71 01 00 FF 
0343c     82 14 06 F6 | 	mov	arg02, ##@LR__4856
03440     0F 13 02 F6 | 	mov	arg01, local01
03444     18 B7 B1 FD | 	call	#__system___string_cmp
03448     00 FA 0D F2 | 	cmp	result1, #0 wz
0344c     7C 01 90 AD |  if_e	jmp	#LR__0168
03450     71 01 00 FF 
03454     86 14 06 F6 | 	mov	arg02, ##@LR__4857
03458     0F 13 02 F6 | 	mov	arg01, local01
0345c     00 B7 B1 FD | 	call	#__system___string_cmp
03460     00 FA 0D F2 | 	cmp	result1, #0 wz
03464     6C 01 90 AD |  if_e	jmp	#LR__0169
03468     71 01 00 FF 
0346c     8A 14 06 F6 | 	mov	arg02, ##@LR__4858
03470     0F 13 02 F6 | 	mov	arg01, local01
03474     E8 B6 B1 FD | 	call	#__system___string_cmp
03478     00 FA 0D F2 | 	cmp	result1, #0 wz
0347c     5C 01 90 AD |  if_e	jmp	#LR__0170
03480     71 01 00 FF 
03484     8E 14 06 F6 | 	mov	arg02, ##@LR__4859
03488     0F 13 02 F6 | 	mov	arg01, local01
0348c     D0 B6 B1 FD | 	call	#__system___string_cmp
03490     00 FA 0D F2 | 	cmp	result1, #0 wz
03494     4C 01 90 AD |  if_e	jmp	#LR__0171
03498     71 01 00 FF 
0349c     90 14 06 F6 | 	mov	arg02, ##@LR__4860
034a0     0F 13 02 F6 | 	mov	arg01, local01
034a4     B8 B6 B1 FD | 	call	#__system___string_cmp
034a8     00 FA 0D F2 | 	cmp	result1, #0 wz
034ac     3C 01 90 AD |  if_e	jmp	#LR__0172
034b0     71 01 00 FF 
034b4     94 14 06 F6 | 	mov	arg02, ##@LR__4861
034b8     0F 13 02 F6 | 	mov	arg01, local01
034bc     A0 B6 B1 FD | 	call	#__system___string_cmp
034c0     00 FA 0D F2 | 	cmp	result1, #0 wz
034c4     2C 01 90 AD |  if_e	jmp	#LR__0173
034c8     71 01 00 FF 
034cc     96 14 06 F6 | 	mov	arg02, ##@LR__4862
034d0     0F 13 02 F6 | 	mov	arg01, local01
034d4     88 B6 B1 FD | 	call	#__system___string_cmp
034d8     00 FA 0D F2 | 	cmp	result1, #0 wz
034dc     1C 01 90 AD |  if_e	jmp	#LR__0174
034e0     71 01 00 FF 
034e4     98 14 06 F6 | 	mov	arg02, ##@LR__4863
034e8     0F 13 02 F6 | 	mov	arg01, local01
034ec     70 B6 B1 FD | 	call	#__system___string_cmp
034f0     00 FA 0D F2 | 	cmp	result1, #0 wz
034f4     0C 01 90 AD |  if_e	jmp	#LR__0175
034f8     71 01 00 FF 
034fc     9B 14 06 F6 | 	mov	arg02, ##@LR__4864
03500     0F 13 02 F6 | 	mov	arg01, local01
03504     58 B6 B1 FD | 	call	#__system___string_cmp
03508     00 FA 0D F2 | 	cmp	result1, #0 wz
0350c     FC 00 90 AD |  if_e	jmp	#LR__0176
03510     71 01 00 FF 
03514     9E 14 06 F6 | 	mov	arg02, ##@LR__4865
03518     0F 13 02 F6 | 	mov	arg01, local01
0351c     40 B6 B1 FD | 	call	#__system___string_cmp
03520     00 FA 0D F2 | 	cmp	result1, #0 wz
03524     EC 00 90 AD |  if_e	jmp	#LR__0177
03528     71 01 00 FF 
0352c     A0 14 06 F6 | 	mov	arg02, ##@LR__4866
03530     0F 13 02 F6 | 	mov	arg01, local01
03534     28 B6 B1 FD | 	call	#__system___string_cmp
03538     00 FA 0D F2 | 	cmp	result1, #0 wz
0353c     DC 00 90 AD |  if_e	jmp	#LR__0178
03540     71 01 00 FF 
03544     A2 14 06 F6 | 	mov	arg02, ##@LR__4867
03548     0F 13 02 F6 | 	mov	arg01, local01
0354c     10 B6 B1 FD | 	call	#__system___string_cmp
03550     00 FA 0D F2 | 	cmp	result1, #0 wz
03554     CC 00 90 AD |  if_e	jmp	#LR__0179
03558     71 01 00 FF 
0355c     A5 14 06 F6 | 	mov	arg02, ##@LR__4868
03560     0F 13 02 F6 | 	mov	arg01, local01
03564     F8 B5 B1 FD | 	call	#__system___string_cmp
03568     00 FA 0D F2 | 	cmp	result1, #0 wz
0356c     BC 00 90 AD |  if_e	jmp	#LR__0180
03570     71 01 00 FF 
03574     A8 14 06 F6 | 	mov	arg02, ##@LR__4869
03578     0F 13 02 F6 | 	mov	arg01, local01
0357c     E0 B5 B1 FD | 	call	#__system___string_cmp
03580     00 FA 0D F2 | 	cmp	result1, #0 wz
03584     AC 00 90 AD |  if_e	jmp	#LR__0181
03588     B0 00 90 FD | 	jmp	#LR__0182
0358c                 | LR__0160
0358c     01 FA 05 F6 | 	mov	result1, #1
03590     AC 00 90 FD | 	jmp	#LR__0183
03594                 | LR__0161
03594     02 FA 05 F6 | 	mov	result1, #2
03598     A4 00 90 FD | 	jmp	#LR__0183
0359c                 | LR__0162
0359c     03 FA 05 F6 | 	mov	result1, #3
035a0     9C 00 90 FD | 	jmp	#LR__0183
035a4                 | LR__0163
035a4     04 FA 05 F6 | 	mov	result1, #4
035a8     94 00 90 FD | 	jmp	#LR__0183
035ac                 | LR__0164
035ac     05 FA 05 F6 | 	mov	result1, #5
035b0     8C 00 90 FD | 	jmp	#LR__0183
035b4                 | LR__0165
035b4     06 FA 05 F6 | 	mov	result1, #6
035b8     84 00 90 FD | 	jmp	#LR__0183
035bc                 | LR__0166
035bc     07 FA 05 F6 | 	mov	result1, #7
035c0     7C 00 90 FD | 	jmp	#LR__0183
035c4                 | LR__0167
035c4     08 FA 05 F6 | 	mov	result1, #8
035c8     74 00 90 FD | 	jmp	#LR__0183
035cc                 | LR__0168
035cc     09 FA 05 F6 | 	mov	result1, #9
035d0     6C 00 90 FD | 	jmp	#LR__0183
035d4                 | LR__0169
035d4     0A FA 05 F6 | 	mov	result1, #10
035d8     64 00 90 FD | 	jmp	#LR__0183
035dc                 | LR__0170
035dc     0B FA 05 F6 | 	mov	result1, #11
035e0     5C 00 90 FD | 	jmp	#LR__0183
035e4                 | LR__0171
035e4     0C FA 05 F6 | 	mov	result1, #12
035e8     54 00 90 FD | 	jmp	#LR__0183
035ec                 | LR__0172
035ec     0D FA 05 F6 | 	mov	result1, #13
035f0     4C 00 90 FD | 	jmp	#LR__0183
035f4                 | LR__0173
035f4     0E FA 05 F6 | 	mov	result1, #14
035f8     44 00 90 FD | 	jmp	#LR__0183
035fc                 | LR__0174
035fc     1B FA 05 F6 | 	mov	result1, #27
03600     3C 00 90 FD | 	jmp	#LR__0183
03604                 | LR__0175
03604     27 FA 05 F6 | 	mov	result1, #39
03608     34 00 90 FD | 	jmp	#LR__0183
0360c                 | LR__0176
0360c     26 FA 05 F6 | 	mov	result1, #38
03610     2C 00 90 FD | 	jmp	#LR__0183
03614                 | LR__0177
03614     10 FA 05 F6 | 	mov	result1, #16
03618     24 00 90 FD | 	jmp	#LR__0183
0361c                 | LR__0178
0361c     0F FA 05 F6 | 	mov	result1, #15
03620     1C 00 90 FD | 	jmp	#LR__0183
03624                 | LR__0179
03624     2A FA 05 F6 | 	mov	result1, #42
03628     14 00 90 FD | 	jmp	#LR__0183
0362c                 | LR__0180
0362c     28 FA 05 F6 | 	mov	result1, #40
03630     0C 00 90 FD | 	jmp	#LR__0183
03634                 | LR__0181
03634     29 FA 05 F6 | 	mov	result1, #41
03638     04 00 90 FD | 	jmp	#LR__0183
0363c                 | LR__0182
0363c     00 FA 05 F6 | 	mov	result1, #0
03640                 | LR__0183
03640     A7 F0 03 F6 | 	mov	ptra, fp
03644     B2 00 A0 FD | 	call	#popregs_
03648                 | _isoperator_ret
03648     2D 00 64 FD | 	ret
0364c                 | 
0364c                 | ' 
0364c                 | ' 
0364c                 | ' function isnotename(s as string) as ulong
0364c                 | _isnotename
0364c     07 4A 05 F6 | 	mov	COUNT_, #7
03650     A8 00 A0 FD | 	call	#pushregs_
03654                 | ' if left$(s,1)<>"#" then return 0
03654     09 1F 02 F6 | 	mov	local01, arg01
03658     01 14 06 F6 | 	mov	arg02, #1
0365c     20 D5 B1 FD | 	call	#__system__Left_S
03660     FD 12 02 F6 | 	mov	arg01, result1
03664     71 01 00 FF 
03668     AB 14 06 F6 | 	mov	arg02, ##@LR__4870
0366c     F0 B4 B1 FD | 	call	#__system___string_cmp
03670     00 FA 0D F2 | 	cmp	result1, #0 wz
03674     00 FA 05 56 |  if_ne	mov	result1, #0
03678     30 03 90 5D |  if_ne	jmp	#LR__0213
0367c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0367c     0F 13 02 F6 | 	mov	arg01, local01
03680     03 14 06 F6 | 	mov	arg02, #3
03684     01 16 06 F6 | 	mov	arg03, #1
03688     0C D6 B1 FD | 	call	#__system__Mid_S
0368c     FD 12 02 F6 | 	mov	arg01, result1
03690     71 01 00 FF 
03694     AD 14 06 F6 | 	mov	arg02, ##@LR__4871
03698     C4 B4 B1 FD | 	call	#__system___string_cmp
0369c     00 FA 0D F2 | 	cmp	result1, #0 wz
036a0     18 00 90 5D |  if_ne	jmp	#LR__0190
036a4     0F 13 02 F6 | 	mov	arg01, local01
036a8     02 14 06 F6 | 	mov	arg02, #2
036ac     02 16 06 F6 | 	mov	arg03, #2
036b0     E4 D5 B1 FD | 	call	#__system__Mid_S
036b4     FD 20 02 F6 | 	mov	local02, result1
036b8     14 00 90 FD | 	jmp	#LR__0191
036bc                 | LR__0190
036bc     0F 13 02 F6 | 	mov	arg01, local01
036c0     02 14 06 F6 | 	mov	arg02, #2
036c4     01 16 06 F6 | 	mov	arg03, #1
036c8     CC D5 B1 FD | 	call	#__system__Mid_S
036cc     FD 20 02 F6 | 	mov	local02, result1
036d0                 | LR__0191
036d0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
036d0     0F 13 02 F6 | 	mov	arg01, local01
036d4     09 23 02 F6 | 	mov	local03, arg01
036d8     97 06 48 FB | 	callpa	#(@LR__0193-@LR__0192)>>2,fcache_load_ptr_
036dc                 | LR__0192
036dc     11 FB C9 FA | 	rdbyte	result1, local03 wz
036e0     01 22 06 51 |  if_ne	add	local03, #1
036e4     F4 FF 9F 5D |  if_ne	jmp	#LR__0192
036e8                 | LR__0193
036e8     09 23 82 F1 | 	sub	local03, arg01
036ec     11 15 02 F6 | 	mov	arg02, local03
036f0     01 14 86 F1 | 	sub	arg02, #1
036f4     0F 13 02 F6 | 	mov	arg01, local01
036f8     01 16 06 F6 | 	mov	arg03, #1
036fc     98 D5 B1 FD | 	call	#__system__Mid_S
03700     FD 12 02 F6 | 	mov	arg01, result1
03704     71 01 00 FF 
03708     AF 14 06 F6 | 	mov	arg02, ##@LR__4872
0370c     50 B4 B1 FD | 	call	#__system___string_cmp
03710     00 FA 0D F2 | 	cmp	result1, #0 wz
03714     28 00 90 AD |  if_e	jmp	#LR__0194
03718     0F 13 02 F6 | 	mov	arg01, local01
0371c     01 14 06 F6 | 	mov	arg02, #1
03720     E4 D4 B1 FD | 	call	#__system__Right_S
03724     FD 12 02 F6 | 	mov	arg01, result1
03728     74 E7 B1 FD | 	call	#__system____builtin_atof
0372c     FD 12 02 F6 | 	mov	arg01, result1
03730     00 14 06 F6 | 	mov	arg02, #0
03734     48 E4 B1 FD | 	call	#__system___float_tointeger
03738     FD 24 02 F6 | 	mov	local04, result1
0373c     34 00 90 FD | 	jmp	#LR__0195
03740                 | LR__0194
03740     0F 13 02 F6 | 	mov	arg01, local01
03744     01 14 06 F6 | 	mov	arg02, #1
03748     BC D4 B1 FD | 	call	#__system__Right_S
0374c     FD 12 02 F6 | 	mov	arg01, result1
03750     4C E7 B1 FD | 	call	#__system____builtin_atof
03754     FD 14 02 F6 | 	mov	arg02, result1
03758     00 C0 5F FF 
0375c     00 12 06 F6 | 	mov	arg01, ##-1082130432
03760     54 DF B1 FD | 	call	#__system___float_mul
03764     FD 12 02 F6 | 	mov	arg01, result1
03768     00 14 06 F6 | 	mov	arg02, #0
0376c     10 E4 B1 FD | 	call	#__system___float_tointeger
03770     FD 24 02 F6 | 	mov	local04, result1
03774                 | LR__0195
03774                 | ' 
03774                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
03774     00 24 0E F2 | 	cmp	local04, #0 wz
03778     24 00 90 5D |  if_ne	jmp	#LR__0196
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     01 14 06 F6 | 	mov	arg02, #1
03784     80 D4 B1 FD | 	call	#__system__Right_S
03788     FD 12 02 F6 | 	mov	arg01, result1
0378c     71 01 00 FF 
03790     B1 14 06 F6 | 	mov	arg02, ##@LR__4873
03794     C8 B3 B1 FD | 	call	#__system___string_cmp
03798     00 FA 0D F2 | 	cmp	result1, #0 wz
0379c     04 24 06 56 |  if_ne	mov	local04, #4
037a0                 | LR__0196
037a0                 | ' 
037a0                 | ' select case s1
037a0     10 27 02 F6 | 	mov	local05, local02
037a4     71 01 00 FF 
037a8     B3 14 06 F6 | 	mov	arg02, ##@LR__4874
037ac     13 13 02 F6 | 	mov	arg01, local05
037b0     AC B3 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     24 01 90 AD |  if_e	jmp	#LR__0197
037bc     71 01 00 FF 
037c0     B5 14 06 F6 | 	mov	arg02, ##@LR__4875
037c4     13 13 02 F6 | 	mov	arg01, local05
037c8     94 B3 B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     18 01 90 AD |  if_e	jmp	#LR__0198
037d4     71 01 00 FF 
037d8     B8 14 06 F6 | 	mov	arg02, ##@LR__4876
037dc     13 13 02 F6 | 	mov	arg01, local05
037e0     7C B3 B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     0C 01 90 AD |  if_e	jmp	#LR__0199
037ec     71 01 00 FF 
037f0     BA 14 06 F6 | 	mov	arg02, ##@LR__4877
037f4     13 13 02 F6 | 	mov	arg01, local05
037f8     64 B3 B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     00 01 90 AD |  if_e	jmp	#LR__0200
03804     71 01 00 FF 
03808     BD 14 06 F6 | 	mov	arg02, ##@LR__4878
0380c     13 13 02 F6 | 	mov	arg01, local05
03810     4C B3 B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     F4 00 90 AD |  if_e	jmp	#LR__0201
0381c     71 01 00 FF 
03820     BF 14 06 F6 | 	mov	arg02, ##@LR__4879
03824     13 13 02 F6 | 	mov	arg01, local05
03828     34 B3 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     E8 00 90 AD |  if_e	jmp	#LR__0202
03834     71 01 00 FF 
03838     C1 14 06 F6 | 	mov	arg02, ##@LR__4880
0383c     13 13 02 F6 | 	mov	arg01, local05
03840     1C B3 B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     DC 00 90 AD |  if_e	jmp	#LR__0203
0384c     71 01 00 FF 
03850     C4 14 06 F6 | 	mov	arg02, ##@LR__4881
03854     13 13 02 F6 | 	mov	arg01, local05
03858     04 B3 B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     D0 00 90 AD |  if_e	jmp	#LR__0204
03864     71 01 00 FF 
03868     C6 14 06 F6 | 	mov	arg02, ##@LR__4882
0386c     13 13 02 F6 | 	mov	arg01, local05
03870     EC B2 B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     C4 00 90 AD |  if_e	jmp	#LR__0205
0387c     71 01 00 FF 
03880     C9 14 06 F6 | 	mov	arg02, ##@LR__4883
03884     13 13 02 F6 | 	mov	arg01, local05
03888     D4 B2 B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     B8 00 90 AD |  if_e	jmp	#LR__0206
03894     71 01 00 FF 
03898     CB 14 06 F6 | 	mov	arg02, ##@LR__4884
0389c     13 13 02 F6 | 	mov	arg01, local05
038a0     BC B2 B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     AC 00 90 AD |  if_e	jmp	#LR__0207
038ac     71 01 00 FF 
038b0     CE 14 06 F6 | 	mov	arg02, ##@LR__4885
038b4     13 13 02 F6 | 	mov	arg01, local05
038b8     A4 B2 B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     A0 00 90 AD |  if_e	jmp	#LR__0208
038c4     71 01 00 FF 
038c8     D0 14 06 F6 | 	mov	arg02, ##@LR__4886
038cc     13 13 02 F6 | 	mov	arg01, local05
038d0     8C B2 B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     94 00 90 AD |  if_e	jmp	#LR__0209
038dc     9C 00 90 FD | 	jmp	#LR__0210
038e0                 | LR__0197
038e0     01 00 00 FF 
038e4     00 29 06 F6 | 	mov	local06, ##768
038e8     98 00 90 FD | 	jmp	#LR__0211
038ec                 | LR__0198
038ec     01 00 00 FF 
038f0     01 29 06 F6 | 	mov	local06, ##769
038f4     8C 00 90 FD | 	jmp	#LR__0211
038f8                 | LR__0199
038f8     01 00 00 FF 
038fc     02 29 06 F6 | 	mov	local06, ##770
03900     80 00 90 FD | 	jmp	#LR__0211
03904                 | LR__0200
03904     01 00 00 FF 
03908     03 29 06 F6 | 	mov	local06, ##771
0390c     74 00 90 FD | 	jmp	#LR__0211
03910                 | LR__0201
03910     01 00 00 FF 
03914     04 29 06 F6 | 	mov	local06, ##772
03918     68 00 90 FD | 	jmp	#LR__0211
0391c                 | LR__0202
0391c     01 00 00 FF 
03920     05 29 06 F6 | 	mov	local06, ##773
03924     5C 00 90 FD | 	jmp	#LR__0211
03928                 | LR__0203
03928     01 00 00 FF 
0392c     06 29 06 F6 | 	mov	local06, ##774
03930     50 00 90 FD | 	jmp	#LR__0211
03934                 | LR__0204
03934     01 00 00 FF 
03938     07 29 06 F6 | 	mov	local06, ##775
0393c     44 00 90 FD | 	jmp	#LR__0211
03940                 | LR__0205
03940     01 00 00 FF 
03944     08 29 06 F6 | 	mov	local06, ##776
03948     38 00 90 FD | 	jmp	#LR__0211
0394c                 | LR__0206
0394c     01 00 00 FF 
03950     09 29 06 F6 | 	mov	local06, ##777
03954     2C 00 90 FD | 	jmp	#LR__0211
03958                 | LR__0207
03958     01 00 00 FF 
0395c     0A 29 06 F6 | 	mov	local06, ##778
03960     20 00 90 FD | 	jmp	#LR__0211
03964                 | LR__0208
03964     01 00 00 FF 
03968     0B 29 06 F6 | 	mov	local06, ##779
0396c     14 00 90 FD | 	jmp	#LR__0211
03970                 | LR__0209
03970     01 00 00 FF 
03974     0B 29 06 F6 | 	mov	local06, ##779
03978     08 00 90 FD | 	jmp	#LR__0211
0397c                 | LR__0210
0397c     00 FA 05 F6 | 	mov	result1, #0
03980     28 00 90 FD | 	jmp	#LR__0213
03984                 | LR__0211
03984                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
03984     FF FF 7F FF 
03988     FF 25 56 F2 | 	cmps	local04, ##-1 wc
0398c     18 00 90 CD |  if_b	jmp	#LR__0212
03990     0A 24 56 F2 | 	cmps	local04, #10 wc
03994     12 2B 02 C6 |  if_b	mov	local07, local04
03998     01 2A 66 C0 |  if_b	shl	local07, #1
0399c     12 2B 02 C1 |  if_b	add	local07, local04
039a0     02 2A 66 C0 |  if_b	shl	local07, #2
039a4     15 29 02 C1 |  if_b	add	local06, local07
039a8                 | LR__0212
039a8                 | ' return token
039a8     14 FB 01 F6 | 	mov	result1, local06
039ac                 | LR__0213
039ac     A7 F0 03 F6 | 	mov	ptra, fp
039b0     B2 00 A0 FD | 	call	#popregs_
039b4                 | _isnotename_ret
039b4     2D 00 64 FD | 	ret
039b8                 | 
039b8                 | ' 
039b8                 | ' 
039b8                 | ' function isseparator(s as string) as ubyte
039b8                 | _isseparator
039b8     01 4A 05 F6 | 	mov	COUNT_, #1
039bc     A8 00 A0 FD | 	call	#pushregs_
039c0                 | ' 
039c0                 | ' select case s
039c0     09 1F 02 F6 | 	mov	local01, arg01
039c4     71 01 00 FF 
039c8     D2 14 06 F6 | 	mov	arg02, ##@LR__4887
039cc     0F 13 02 F6 | 	mov	arg01, local01
039d0     8C B1 B1 FD | 	call	#__system___string_cmp
039d4     00 FA 0D F2 | 	cmp	result1, #0 wz
039d8     54 01 90 AD |  if_e	jmp	#LR__0220
039dc     71 01 00 FF 
039e0     D4 14 06 F6 | 	mov	arg02, ##@LR__4888
039e4     0F 13 02 F6 | 	mov	arg01, local01
039e8     74 B1 B1 FD | 	call	#__system___string_cmp
039ec     00 FA 0D F2 | 	cmp	result1, #0 wz
039f0     44 01 90 AD |  if_e	jmp	#LR__0221
039f4     71 01 00 FF 
039f8     D6 14 06 F6 | 	mov	arg02, ##@LR__4889
039fc     0F 13 02 F6 | 	mov	arg01, local01
03a00     5C B1 B1 FD | 	call	#__system___string_cmp
03a04     00 FA 0D F2 | 	cmp	result1, #0 wz
03a08     34 01 90 AD |  if_e	jmp	#LR__0222
03a0c     71 01 00 FF 
03a10     D8 14 06 F6 | 	mov	arg02, ##@LR__4890
03a14     0F 13 02 F6 | 	mov	arg01, local01
03a18     44 B1 B1 FD | 	call	#__system___string_cmp
03a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a20     24 01 90 AD |  if_e	jmp	#LR__0223
03a24     71 01 00 FF 
03a28     DA 14 06 F6 | 	mov	arg02, ##@LR__4891
03a2c     0F 13 02 F6 | 	mov	arg01, local01
03a30     2C B1 B1 FD | 	call	#__system___string_cmp
03a34     00 FA 0D F2 | 	cmp	result1, #0 wz
03a38     14 01 90 AD |  if_e	jmp	#LR__0224
03a3c     71 01 00 FF 
03a40     DC 14 06 F6 | 	mov	arg02, ##@LR__4892
03a44     0F 13 02 F6 | 	mov	arg01, local01
03a48     14 B1 B1 FD | 	call	#__system___string_cmp
03a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a50     04 01 90 AD |  if_e	jmp	#LR__0225
03a54     71 01 00 FF 
03a58     DE 14 06 F6 | 	mov	arg02, ##@LR__4893
03a5c     0F 13 02 F6 | 	mov	arg01, local01
03a60     FC B0 B1 FD | 	call	#__system___string_cmp
03a64     00 FA 0D F2 | 	cmp	result1, #0 wz
03a68     F4 00 90 AD |  if_e	jmp	#LR__0226
03a6c     71 01 00 FF 
03a70     E0 14 06 F6 | 	mov	arg02, ##@LR__4894
03a74     0F 13 02 F6 | 	mov	arg01, local01
03a78     E4 B0 B1 FD | 	call	#__system___string_cmp
03a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a80     E4 00 90 AD |  if_e	jmp	#LR__0227
03a84     71 01 00 FF 
03a88     E2 14 06 F6 | 	mov	arg02, ##@LR__4895
03a8c     0F 13 02 F6 | 	mov	arg01, local01
03a90     CC B0 B1 FD | 	call	#__system___string_cmp
03a94     00 FA 0D F2 | 	cmp	result1, #0 wz
03a98     D4 00 90 AD |  if_e	jmp	#LR__0228
03a9c     71 01 00 FF 
03aa0     E4 14 06 F6 | 	mov	arg02, ##@LR__4896
03aa4     0F 13 02 F6 | 	mov	arg01, local01
03aa8     B4 B0 B1 FD | 	call	#__system___string_cmp
03aac     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab0     C4 00 90 AD |  if_e	jmp	#LR__0229
03ab4     71 01 00 FF 
03ab8     E6 14 06 F6 | 	mov	arg02, ##@LR__4897
03abc     0F 13 02 F6 | 	mov	arg01, local01
03ac0     9C B0 B1 FD | 	call	#__system___string_cmp
03ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ac8     B4 00 90 AD |  if_e	jmp	#LR__0230
03acc     71 01 00 FF 
03ad0     E8 14 06 F6 | 	mov	arg02, ##@LR__4898
03ad4     0F 13 02 F6 | 	mov	arg01, local01
03ad8     84 B0 B1 FD | 	call	#__system___string_cmp
03adc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae0     A4 00 90 AD |  if_e	jmp	#LR__0231
03ae4     71 01 00 FF 
03ae8     EA 14 06 F6 | 	mov	arg02, ##@LR__4899
03aec     0F 13 02 F6 | 	mov	arg01, local01
03af0     6C B0 B1 FD | 	call	#__system___string_cmp
03af4     00 FA 0D F2 | 	cmp	result1, #0 wz
03af8     94 00 90 AD |  if_e	jmp	#LR__0232
03afc     71 01 00 FF 
03b00     EC 14 06 F6 | 	mov	arg02, ##@LR__4900
03b04     0F 13 02 F6 | 	mov	arg01, local01
03b08     54 B0 B1 FD | 	call	#__system___string_cmp
03b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b10     84 00 90 AD |  if_e	jmp	#LR__0233
03b14     71 01 00 FF 
03b18     EE 14 06 F6 | 	mov	arg02, ##@LR__4901
03b1c     0F 13 02 F6 | 	mov	arg01, local01
03b20     3C B0 B1 FD | 	call	#__system___string_cmp
03b24     00 FA 0D F2 | 	cmp	result1, #0 wz
03b28     74 00 90 AD |  if_e	jmp	#LR__0234
03b2c     78 00 90 FD | 	jmp	#LR__0235
03b30                 | LR__0220
03b30     01 FA 05 F6 | 	mov	result1, #1
03b34     74 00 90 FD | 	jmp	#LR__0236
03b38                 | LR__0221
03b38     02 FA 05 F6 | 	mov	result1, #2
03b3c     6C 00 90 FD | 	jmp	#LR__0236
03b40                 | LR__0222
03b40     1B FA 05 F6 | 	mov	result1, #27
03b44     64 00 90 FD | 	jmp	#LR__0236
03b48                 | LR__0223
03b48     11 FA 05 F6 | 	mov	result1, #17
03b4c     5C 00 90 FD | 	jmp	#LR__0236
03b50                 | LR__0224
03b50     05 FA 05 F6 | 	mov	result1, #5
03b54     54 00 90 FD | 	jmp	#LR__0236
03b58                 | LR__0225
03b58     06 FA 05 F6 | 	mov	result1, #6
03b5c     4C 00 90 FD | 	jmp	#LR__0236
03b60                 | LR__0226
03b60     12 FA 05 F6 | 	mov	result1, #18
03b64     44 00 90 FD | 	jmp	#LR__0236
03b68                 | LR__0227
03b68     13 FA 05 F6 | 	mov	result1, #19
03b6c     3C 00 90 FD | 	jmp	#LR__0236
03b70                 | LR__0228
03b70     0C FA 05 F6 | 	mov	result1, #12
03b74     34 00 90 FD | 	jmp	#LR__0236
03b78                 | LR__0229
03b78     14 FA 05 F6 | 	mov	result1, #20
03b7c     2C 00 90 FD | 	jmp	#LR__0236
03b80                 | LR__0230
03b80     15 FA 05 F6 | 	mov	result1, #21
03b84     24 00 90 FD | 	jmp	#LR__0236
03b88                 | LR__0231
03b88     16 FA 05 F6 | 	mov	result1, #22
03b8c     1C 00 90 FD | 	jmp	#LR__0236
03b90                 | LR__0232
03b90     FF FB 05 F6 | 	mov	result1, #511
03b94     14 00 90 FD | 	jmp	#LR__0236
03b98                 | LR__0233
03b98     0F FA 05 F6 | 	mov	result1, #15
03b9c     0C 00 90 FD | 	jmp	#LR__0236
03ba0                 | LR__0234
03ba0     10 FA 05 F6 | 	mov	result1, #16
03ba4     04 00 90 FD | 	jmp	#LR__0236
03ba8                 | LR__0235
03ba8     00 FA 05 F6 | 	mov	result1, #0
03bac                 | LR__0236
03bac     A7 F0 03 F6 | 	mov	ptra, fp
03bb0     B2 00 A0 FD | 	call	#popregs_
03bb4                 | _isseparator_ret
03bb4     2D 00 64 FD | 	ret
03bb8                 | 
03bb8                 | ' 
03bb8                 | ' 
03bb8                 | ' function iscommand(s as string) as ubyte
03bb8                 | _iscommand
03bb8     01 4A 05 F6 | 	mov	COUNT_, #1
03bbc     A8 00 A0 FD | 	call	#pushregs_
03bc0                 | ' 
03bc0                 | ' select case s
03bc0     09 1F 02 F6 | 	mov	local01, arg01
03bc4     71 01 00 FF 
03bc8     F2 14 06 F6 | 	mov	arg02, ##@LR__4903
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     8C AF B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     EC 08 90 AD |  if_e	jmp	#LR__0240
03bdc     71 01 00 FF 
03be0     F7 14 06 F6 | 	mov	arg02, ##@LR__4904
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     74 AF B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     DC 08 90 AD |  if_e	jmp	#LR__0241
03bf4     71 01 00 FF 
03bf8     FA 14 06 F6 | 	mov	arg02, ##@LR__4905
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     5C AF B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     CC 08 90 AD |  if_e	jmp	#LR__0242
03c0c     71 01 00 FF 
03c10     FE 14 06 F6 | 	mov	arg02, ##@LR__4906
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     44 AF B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     BC 08 90 AD |  if_e	jmp	#LR__0243
03c24     71 01 00 FF 
03c28     03 15 06 F6 | 	mov	arg02, ##@LR__4907
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     2C AF B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     AC 08 90 AD |  if_e	jmp	#LR__0244
03c3c     71 01 00 FF 
03c40     07 15 06 F6 | 	mov	arg02, ##@LR__4908
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     14 AF B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     9C 08 90 AD |  if_e	jmp	#LR__0245
03c54     71 01 00 FF 
03c58     0E 15 06 F6 | 	mov	arg02, ##@LR__4909
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     FC AE B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     8C 08 90 AD |  if_e	jmp	#LR__0246
03c6c     71 01 00 FF 
03c70     12 15 06 F6 | 	mov	arg02, ##@LR__4910
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     E4 AE B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     7C 08 90 AD |  if_e	jmp	#LR__0247
03c84     71 01 00 FF 
03c88     18 15 06 F6 | 	mov	arg02, ##@LR__4911
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     CC AE B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     6C 08 90 AD |  if_e	jmp	#LR__0248
03c9c     71 01 00 FF 
03ca0     1C 15 06 F6 | 	mov	arg02, ##@LR__4912
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     B4 AE B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     5C 08 90 AD |  if_e	jmp	#LR__0249
03cb4     71 01 00 FF 
03cb8     22 15 06 F6 | 	mov	arg02, ##@LR__4913
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     9C AE B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     4C 08 90 AD |  if_e	jmp	#LR__0250
03ccc     71 01 00 FF 
03cd0     25 15 06 F6 | 	mov	arg02, ##@LR__4914
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     84 AE B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     3C 08 90 AD |  if_e	jmp	#LR__0251
03ce4     71 01 00 FF 
03ce8     2B 15 06 F6 | 	mov	arg02, ##@LR__4915
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     6C AE B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     2C 08 90 AD |  if_e	jmp	#LR__0252
03cfc     71 01 00 FF 
03d00     2F 15 06 F6 | 	mov	arg02, ##@LR__4916
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     54 AE B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     1C 08 90 AD |  if_e	jmp	#LR__0253
03d14     71 01 00 FF 
03d18     36 15 06 F6 | 	mov	arg02, ##@LR__4917
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     3C AE B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     0C 08 90 AD |  if_e	jmp	#LR__0254
03d2c     71 01 00 FF 
03d30     3D 15 06 F6 | 	mov	arg02, ##@LR__4918
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     24 AE B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     FC 07 90 AD |  if_e	jmp	#LR__0255
03d44     71 01 00 FF 
03d48     44 15 06 F6 | 	mov	arg02, ##@LR__4919
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     0C AE B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     EC 07 90 AD |  if_e	jmp	#LR__0256
03d5c     71 01 00 FF 
03d60     4E 15 06 F6 | 	mov	arg02, ##@LR__4920
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     F4 AD B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     DC 07 90 AD |  if_e	jmp	#LR__0257
03d74     71 01 00 FF 
03d78     52 15 06 F6 | 	mov	arg02, ##@LR__4921
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     DC AD B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     CC 07 90 AD |  if_e	jmp	#LR__0258
03d8c     71 01 00 FF 
03d90     56 15 06 F6 | 	mov	arg02, ##@LR__4922
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     C4 AD B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     BC 07 90 AD |  if_e	jmp	#LR__0259
03da4     71 01 00 FF 
03da8     5A 15 06 F6 | 	mov	arg02, ##@LR__4923
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     AC AD B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     AC 07 90 AD |  if_e	jmp	#LR__0260
03dbc     71 01 00 FF 
03dc0     5E 15 06 F6 | 	mov	arg02, ##@LR__4924
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     94 AD B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     9C 07 90 AD |  if_e	jmp	#LR__0261
03dd4     71 01 00 FF 
03dd8     64 15 06 F6 | 	mov	arg02, ##@LR__4925
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     7C AD B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     8C 07 90 AD |  if_e	jmp	#LR__0262
03dec     71 01 00 FF 
03df0     69 15 06 F6 | 	mov	arg02, ##@LR__4926
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     64 AD B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     7C 07 90 AD |  if_e	jmp	#LR__0263
03e04     71 01 00 FF 
03e08     6D 15 06 F6 | 	mov	arg02, ##@LR__4927
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     4C AD B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     6C 07 90 AD |  if_e	jmp	#LR__0264
03e1c     71 01 00 FF 
03e20     72 15 06 F6 | 	mov	arg02, ##@LR__4928
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     34 AD B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     5C 07 90 AD |  if_e	jmp	#LR__0265
03e34     71 01 00 FF 
03e38     76 15 06 F6 | 	mov	arg02, ##@LR__4929
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     1C AD B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     4C 07 90 AD |  if_e	jmp	#LR__0266
03e4c     71 01 00 FF 
03e50     7E 15 06 F6 | 	mov	arg02, ##@LR__4930
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     04 AD B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     3C 07 90 AD |  if_e	jmp	#LR__0267
03e64     71 01 00 FF 
03e68     82 15 06 F6 | 	mov	arg02, ##@LR__4931
03e6c     0F 13 02 F6 | 	mov	arg01, local01
03e70     EC AC B1 FD | 	call	#__system___string_cmp
03e74     00 FA 0D F2 | 	cmp	result1, #0 wz
03e78     2C 07 90 AD |  if_e	jmp	#LR__0268
03e7c     71 01 00 FF 
03e80     87 15 06 F6 | 	mov	arg02, ##@LR__4932
03e84     0F 13 02 F6 | 	mov	arg01, local01
03e88     D4 AC B1 FD | 	call	#__system___string_cmp
03e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e90     1C 07 90 AD |  if_e	jmp	#LR__0269
03e94     71 01 00 FF 
03e98     8B 15 06 F6 | 	mov	arg02, ##@LR__4933
03e9c     0F 13 02 F6 | 	mov	arg01, local01
03ea0     BC AC B1 FD | 	call	#__system___string_cmp
03ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea8     0C 07 90 AD |  if_e	jmp	#LR__0270
03eac     71 01 00 FF 
03eb0     90 15 06 F6 | 	mov	arg02, ##@LR__4934
03eb4     0F 13 02 F6 | 	mov	arg01, local01
03eb8     A4 AC B1 FD | 	call	#__system___string_cmp
03ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec0     FC 06 90 AD |  if_e	jmp	#LR__0271
03ec4     71 01 00 FF 
03ec8     94 15 06 F6 | 	mov	arg02, ##@LR__4935
03ecc     0F 13 02 F6 | 	mov	arg01, local01
03ed0     8C AC B1 FD | 	call	#__system___string_cmp
03ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ed8     EC 06 90 AD |  if_e	jmp	#LR__0272
03edc     71 01 00 FF 
03ee0     97 15 06 F6 | 	mov	arg02, ##@LR__4936
03ee4     0F 13 02 F6 | 	mov	arg01, local01
03ee8     74 AC B1 FD | 	call	#__system___string_cmp
03eec     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef0     DC 06 90 AD |  if_e	jmp	#LR__0273
03ef4     71 01 00 FF 
03ef8     9D 15 06 F6 | 	mov	arg02, ##@LR__4937
03efc     0F 13 02 F6 | 	mov	arg01, local01
03f00     5C AC B1 FD | 	call	#__system___string_cmp
03f04     00 FA 0D F2 | 	cmp	result1, #0 wz
03f08     CC 06 90 AD |  if_e	jmp	#LR__0274
03f0c     71 01 00 FF 
03f10     A1 15 06 F6 | 	mov	arg02, ##@LR__4938
03f14     0F 13 02 F6 | 	mov	arg01, local01
03f18     44 AC B1 FD | 	call	#__system___string_cmp
03f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f20     BC 06 90 AD |  if_e	jmp	#LR__0275
03f24     71 01 00 FF 
03f28     A7 15 06 F6 | 	mov	arg02, ##@LR__4939
03f2c     0F 13 02 F6 | 	mov	arg01, local01
03f30     2C AC B1 FD | 	call	#__system___string_cmp
03f34     00 FA 0D F2 | 	cmp	result1, #0 wz
03f38     AC 06 90 AD |  if_e	jmp	#LR__0276
03f3c     71 01 00 FF 
03f40     AC 15 06 F6 | 	mov	arg02, ##@LR__4940
03f44     0F 13 02 F6 | 	mov	arg01, local01
03f48     14 AC B1 FD | 	call	#__system___string_cmp
03f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f50     9C 06 90 AD |  if_e	jmp	#LR__0277
03f54     71 01 00 FF 
03f58     AF 15 06 F6 | 	mov	arg02, ##@LR__4941
03f5c     0F 13 02 F6 | 	mov	arg01, local01
03f60     FC AB B1 FD | 	call	#__system___string_cmp
03f64     00 FA 0D F2 | 	cmp	result1, #0 wz
03f68     8C 06 90 AD |  if_e	jmp	#LR__0278
03f6c     71 01 00 FF 
03f70     B2 15 06 F6 | 	mov	arg02, ##@LR__4942
03f74     0F 13 02 F6 | 	mov	arg01, local01
03f78     E4 AB B1 FD | 	call	#__system___string_cmp
03f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f80     7C 06 90 AD |  if_e	jmp	#LR__0279
03f84     71 01 00 FF 
03f88     B6 15 06 F6 | 	mov	arg02, ##@LR__4943
03f8c     0F 13 02 F6 | 	mov	arg01, local01
03f90     CC AB B1 FD | 	call	#__system___string_cmp
03f94     00 FA 0D F2 | 	cmp	result1, #0 wz
03f98     6C 06 90 AD |  if_e	jmp	#LR__0280
03f9c     71 01 00 FF 
03fa0     B9 15 06 F6 | 	mov	arg02, ##@LR__4944
03fa4     0F 13 02 F6 | 	mov	arg01, local01
03fa8     B4 AB B1 FD | 	call	#__system___string_cmp
03fac     00 FA 0D F2 | 	cmp	result1, #0 wz
03fb0     5C 06 90 AD |  if_e	jmp	#LR__0281
03fb4     71 01 00 FF 
03fb8     BD 15 06 F6 | 	mov	arg02, ##@LR__4945
03fbc     0F 13 02 F6 | 	mov	arg01, local01
03fc0     9C AB B1 FD | 	call	#__system___string_cmp
03fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03fc8     4C 06 90 AD |  if_e	jmp	#LR__0282
03fcc     71 01 00 FF 
03fd0     C2 15 06 F6 | 	mov	arg02, ##@LR__4946
03fd4     0F 13 02 F6 | 	mov	arg01, local01
03fd8     84 AB B1 FD | 	call	#__system___string_cmp
03fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fe0     3C 06 90 AD |  if_e	jmp	#LR__0283
03fe4     71 01 00 FF 
03fe8     C5 15 06 F6 | 	mov	arg02, ##@LR__4947
03fec     0F 13 02 F6 | 	mov	arg01, local01
03ff0     6C AB B1 FD | 	call	#__system___string_cmp
03ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ff8     2C 06 90 AD |  if_e	jmp	#LR__0284
03ffc     71 01 00 FF 
04000     CA 15 06 F6 | 	mov	arg02, ##@LR__4948
04004     0F 13 02 F6 | 	mov	arg01, local01
04008     54 AB B1 FD | 	call	#__system___string_cmp
0400c     00 FA 0D F2 | 	cmp	result1, #0 wz
04010     1C 06 90 AD |  if_e	jmp	#LR__0285
04014     71 01 00 FF 
04018     CE 15 06 F6 | 	mov	arg02, ##@LR__4949
0401c     0F 13 02 F6 | 	mov	arg01, local01
04020     3C AB B1 FD | 	call	#__system___string_cmp
04024     00 FA 0D F2 | 	cmp	result1, #0 wz
04028     0C 06 90 AD |  if_e	jmp	#LR__0286
0402c     71 01 00 FF 
04030     D4 15 06 F6 | 	mov	arg02, ##@LR__4950
04034     0F 13 02 F6 | 	mov	arg01, local01
04038     24 AB B1 FD | 	call	#__system___string_cmp
0403c     00 FA 0D F2 | 	cmp	result1, #0 wz
04040     FC 05 90 AD |  if_e	jmp	#LR__0287
04044     71 01 00 FF 
04048     D9 15 06 F6 | 	mov	arg02, ##@LR__4951
0404c     0F 13 02 F6 | 	mov	arg01, local01
04050     0C AB B1 FD | 	call	#__system___string_cmp
04054     00 FA 0D F2 | 	cmp	result1, #0 wz
04058     EC 05 90 AD |  if_e	jmp	#LR__0288
0405c     71 01 00 FF 
04060     DC 15 06 F6 | 	mov	arg02, ##@LR__4952
04064     0F 13 02 F6 | 	mov	arg01, local01
04068     F4 AA B1 FD | 	call	#__system___string_cmp
0406c     00 FA 0D F2 | 	cmp	result1, #0 wz
04070     DC 05 90 AD |  if_e	jmp	#LR__0289
04074     71 01 00 FF 
04078     E2 15 06 F6 | 	mov	arg02, ##@LR__4953
0407c     0F 13 02 F6 | 	mov	arg01, local01
04080     DC AA B1 FD | 	call	#__system___string_cmp
04084     00 FA 0D F2 | 	cmp	result1, #0 wz
04088     CC 05 90 AD |  if_e	jmp	#LR__0290
0408c     71 01 00 FF 
04090     E6 15 06 F6 | 	mov	arg02, ##@LR__4954
04094     0F 13 02 F6 | 	mov	arg01, local01
04098     C4 AA B1 FD | 	call	#__system___string_cmp
0409c     00 FA 0D F2 | 	cmp	result1, #0 wz
040a0     BC 05 90 AD |  if_e	jmp	#LR__0291
040a4     71 01 00 FF 
040a8     EB 15 06 F6 | 	mov	arg02, ##@LR__4955
040ac     0F 13 02 F6 | 	mov	arg01, local01
040b0     AC AA B1 FD | 	call	#__system___string_cmp
040b4     00 FA 0D F2 | 	cmp	result1, #0 wz
040b8     AC 05 90 AD |  if_e	jmp	#LR__0292
040bc     71 01 00 FF 
040c0     EE 15 06 F6 | 	mov	arg02, ##@LR__4956
040c4     0F 13 02 F6 | 	mov	arg01, local01
040c8     94 AA B1 FD | 	call	#__system___string_cmp
040cc     00 FA 0D F2 | 	cmp	result1, #0 wz
040d0     9C 05 90 AD |  if_e	jmp	#LR__0293
040d4     71 01 00 FF 
040d8     F4 15 06 F6 | 	mov	arg02, ##@LR__4957
040dc     0F 13 02 F6 | 	mov	arg01, local01
040e0     7C AA B1 FD | 	call	#__system___string_cmp
040e4     00 FA 0D F2 | 	cmp	result1, #0 wz
040e8     8C 05 90 AD |  if_e	jmp	#LR__0294
040ec     71 01 00 FF 
040f0     F8 15 06 F6 | 	mov	arg02, ##@LR__4958
040f4     0F 13 02 F6 | 	mov	arg01, local01
040f8     64 AA B1 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     7C 05 90 AD |  if_e	jmp	#LR__0295
04104     72 01 00 FF 
04108     01 14 06 F6 | 	mov	arg02, ##@LR__4959
0410c     0F 13 02 F6 | 	mov	arg01, local01
04110     4C AA B1 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     6C 05 90 AD |  if_e	jmp	#LR__0296
0411c     72 01 00 FF 
04120     07 14 06 F6 | 	mov	arg02, ##@LR__4960
04124     0F 13 02 F6 | 	mov	arg01, local01
04128     34 AA B1 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     5C 05 90 AD |  if_e	jmp	#LR__0297
04134     72 01 00 FF 
04138     0D 14 06 F6 | 	mov	arg02, ##@LR__4961
0413c     0F 13 02 F6 | 	mov	arg01, local01
04140     1C AA B1 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     4C 05 90 AD |  if_e	jmp	#LR__0298
0414c     72 01 00 FF 
04150     16 14 06 F6 | 	mov	arg02, ##@LR__4962
04154     0F 13 02 F6 | 	mov	arg01, local01
04158     04 AA B1 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     3C 05 90 AD |  if_e	jmp	#LR__0299
04164     72 01 00 FF 
04168     20 14 06 F6 | 	mov	arg02, ##@LR__4963
0416c     0F 13 02 F6 | 	mov	arg01, local01
04170     EC A9 B1 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     2C 05 90 AD |  if_e	jmp	#LR__0300
0417c     72 01 00 FF 
04180     29 14 06 F6 | 	mov	arg02, ##@LR__4964
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     D4 A9 B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     1C 05 90 AD |  if_e	jmp	#LR__0301
04194     72 01 00 FF 
04198     2E 14 06 F6 | 	mov	arg02, ##@LR__4965
0419c     0F 13 02 F6 | 	mov	arg01, local01
041a0     BC A9 B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     0C 05 90 AD |  if_e	jmp	#LR__0302
041ac     72 01 00 FF 
041b0     31 14 06 F6 | 	mov	arg02, ##@LR__4966
041b4     0F 13 02 F6 | 	mov	arg01, local01
041b8     A4 A9 B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     FC 04 90 AD |  if_e	jmp	#LR__0303
041c4     72 01 00 FF 
041c8     36 14 06 F6 | 	mov	arg02, ##@LR__4967
041cc     0F 13 02 F6 | 	mov	arg01, local01
041d0     8C A9 B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     EC 04 90 AD |  if_e	jmp	#LR__0304
041dc     72 01 00 FF 
041e0     3A 14 06 F6 | 	mov	arg02, ##@LR__4968
041e4     0F 13 02 F6 | 	mov	arg01, local01
041e8     74 A9 B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     DC 04 90 AD |  if_e	jmp	#LR__0305
041f4     72 01 00 FF 
041f8     3F 14 06 F6 | 	mov	arg02, ##@LR__4969
041fc     0F 13 02 F6 | 	mov	arg01, local01
04200     5C A9 B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     CC 04 90 AD |  if_e	jmp	#LR__0306
0420c     72 01 00 FF 
04210     43 14 06 F6 | 	mov	arg02, ##@LR__4970
04214     0F 13 02 F6 | 	mov	arg01, local01
04218     44 A9 B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     BC 04 90 AD |  if_e	jmp	#LR__0307
04224     72 01 00 FF 
04228     4C 14 06 F6 | 	mov	arg02, ##@LR__4971
0422c     0F 13 02 F6 | 	mov	arg01, local01
04230     2C A9 B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     AC 04 90 AD |  if_e	jmp	#LR__0308
0423c     72 01 00 FF 
04240     51 14 06 F6 | 	mov	arg02, ##@LR__4972
04244     0F 13 02 F6 | 	mov	arg01, local01
04248     14 A9 B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     9C 04 90 AD |  if_e	jmp	#LR__0309
04254     72 01 00 FF 
04258     57 14 06 F6 | 	mov	arg02, ##@LR__4973
0425c     0F 13 02 F6 | 	mov	arg01, local01
04260     FC A8 B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     8C 04 90 AD |  if_e	jmp	#LR__0310
0426c     72 01 00 FF 
04270     59 14 06 F6 | 	mov	arg02, ##@LR__4974
04274     0F 13 02 F6 | 	mov	arg01, local01
04278     E4 A8 B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     7C 04 90 AD |  if_e	jmp	#LR__0311
04284     72 01 00 FF 
04288     5D 14 06 F6 | 	mov	arg02, ##@LR__4975
0428c     0F 13 02 F6 | 	mov	arg01, local01
04290     CC A8 B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     6C 04 90 AD |  if_e	jmp	#LR__0312
0429c     72 01 00 FF 
042a0     65 14 06 F6 | 	mov	arg02, ##@LR__4976
042a4     0F 13 02 F6 | 	mov	arg01, local01
042a8     B4 A8 B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     5C 04 90 AD |  if_e	jmp	#LR__0313
042b4     72 01 00 FF 
042b8     6C 14 06 F6 | 	mov	arg02, ##@LR__4977
042bc     0F 13 02 F6 | 	mov	arg01, local01
042c0     9C A8 B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     4C 04 90 AD |  if_e	jmp	#LR__0314
042cc     72 01 00 FF 
042d0     70 14 06 F6 | 	mov	arg02, ##@LR__4978
042d4     0F 13 02 F6 | 	mov	arg01, local01
042d8     84 A8 B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     3C 04 90 AD |  if_e	jmp	#LR__0315
042e4     72 01 00 FF 
042e8     75 14 06 F6 | 	mov	arg02, ##@LR__4979
042ec     0F 13 02 F6 | 	mov	arg01, local01
042f0     6C A8 B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     2C 04 90 AD |  if_e	jmp	#LR__0316
042fc     72 01 00 FF 
04300     78 14 06 F6 | 	mov	arg02, ##@LR__4980
04304     0F 13 02 F6 | 	mov	arg01, local01
04308     54 A8 B1 FD | 	call	#__system___string_cmp
0430c     00 FA 0D F2 | 	cmp	result1, #0 wz
04310     1C 04 90 AD |  if_e	jmp	#LR__0317
04314     72 01 00 FF 
04318     81 14 06 F6 | 	mov	arg02, ##@LR__4981
0431c     0F 13 02 F6 | 	mov	arg01, local01
04320     3C A8 B1 FD | 	call	#__system___string_cmp
04324     00 FA 0D F2 | 	cmp	result1, #0 wz
04328     0C 04 90 AD |  if_e	jmp	#LR__0318
0432c     72 01 00 FF 
04330     88 14 06 F6 | 	mov	arg02, ##@LR__4982
04334     0F 13 02 F6 | 	mov	arg01, local01
04338     24 A8 B1 FD | 	call	#__system___string_cmp
0433c     00 FA 0D F2 | 	cmp	result1, #0 wz
04340     FC 03 90 AD |  if_e	jmp	#LR__0319
04344     72 01 00 FF 
04348     8F 14 06 F6 | 	mov	arg02, ##@LR__4983
0434c     0F 13 02 F6 | 	mov	arg01, local01
04350     0C A8 B1 FD | 	call	#__system___string_cmp
04354     00 FA 0D F2 | 	cmp	result1, #0 wz
04358     EC 03 90 AD |  if_e	jmp	#LR__0320
0435c     72 01 00 FF 
04360     96 14 06 F6 | 	mov	arg02, ##@LR__4984
04364     0F 13 02 F6 | 	mov	arg01, local01
04368     F4 A7 B1 FD | 	call	#__system___string_cmp
0436c     00 FA 0D F2 | 	cmp	result1, #0 wz
04370     DC 03 90 AD |  if_e	jmp	#LR__0321
04374     72 01 00 FF 
04378     A1 14 06 F6 | 	mov	arg02, ##@LR__4985
0437c     0F 13 02 F6 | 	mov	arg01, local01
04380     DC A7 B1 FD | 	call	#__system___string_cmp
04384     00 FA 0D F2 | 	cmp	result1, #0 wz
04388     CC 03 90 AD |  if_e	jmp	#LR__0322
0438c     72 01 00 FF 
04390     A8 14 06 F6 | 	mov	arg02, ##@LR__4986
04394     0F 13 02 F6 | 	mov	arg01, local01
04398     C4 A7 B1 FD | 	call	#__system___string_cmp
0439c     00 FA 0D F2 | 	cmp	result1, #0 wz
043a0     BC 03 90 AD |  if_e	jmp	#LR__0323
043a4     72 01 00 FF 
043a8     B0 14 06 F6 | 	mov	arg02, ##@LR__4987
043ac     0F 13 02 F6 | 	mov	arg01, local01
043b0     AC A7 B1 FD | 	call	#__system___string_cmp
043b4     00 FA 0D F2 | 	cmp	result1, #0 wz
043b8     AC 03 90 AD |  if_e	jmp	#LR__0324
043bc     72 01 00 FF 
043c0     B6 14 06 F6 | 	mov	arg02, ##@LR__4988
043c4     0F 13 02 F6 | 	mov	arg01, local01
043c8     94 A7 B1 FD | 	call	#__system___string_cmp
043cc     00 FA 0D F2 | 	cmp	result1, #0 wz
043d0     9C 03 90 AD |  if_e	jmp	#LR__0325
043d4     72 01 00 FF 
043d8     BA 14 06 F6 | 	mov	arg02, ##@LR__4989
043dc     0F 13 02 F6 | 	mov	arg01, local01
043e0     7C A7 B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     8C 03 90 AD |  if_e	jmp	#LR__0326
043ec     72 01 00 FF 
043f0     C1 14 06 F6 | 	mov	arg02, ##@LR__4990
043f4     0F 13 02 F6 | 	mov	arg01, local01
043f8     64 A7 B1 FD | 	call	#__system___string_cmp
043fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04400     7C 03 90 AD |  if_e	jmp	#LR__0327
04404     72 01 00 FF 
04408     C5 14 06 F6 | 	mov	arg02, ##@LR__4991
0440c     0F 13 02 F6 | 	mov	arg01, local01
04410     4C A7 B1 FD | 	call	#__system___string_cmp
04414     00 FA 0D F2 | 	cmp	result1, #0 wz
04418     6C 03 90 AD |  if_e	jmp	#LR__0328
0441c     72 01 00 FF 
04420     CA 14 06 F6 | 	mov	arg02, ##@LR__4992
04424     0F 13 02 F6 | 	mov	arg01, local01
04428     34 A7 B1 FD | 	call	#__system___string_cmp
0442c     00 FA 0D F2 | 	cmp	result1, #0 wz
04430     5C 03 90 AD |  if_e	jmp	#LR__0329
04434     72 01 00 FF 
04438     D1 14 06 F6 | 	mov	arg02, ##@LR__4993
0443c     0F 13 02 F6 | 	mov	arg01, local01
04440     1C A7 B1 FD | 	call	#__system___string_cmp
04444     00 FA 0D F2 | 	cmp	result1, #0 wz
04448     4C 03 90 AD |  if_e	jmp	#LR__0330
0444c     72 01 00 FF 
04450     DB 14 06 F6 | 	mov	arg02, ##@LR__4994
04454     0F 13 02 F6 | 	mov	arg01, local01
04458     04 A7 B1 FD | 	call	#__system___string_cmp
0445c     00 FA 0D F2 | 	cmp	result1, #0 wz
04460     3C 03 90 AD |  if_e	jmp	#LR__0331
04464     72 01 00 FF 
04468     DF 14 06 F6 | 	mov	arg02, ##@LR__4995
0446c     0F 13 02 F6 | 	mov	arg01, local01
04470     EC A6 B1 FD | 	call	#__system___string_cmp
04474     00 FA 0D F2 | 	cmp	result1, #0 wz
04478     2C 03 90 AD |  if_e	jmp	#LR__0332
0447c     72 01 00 FF 
04480     E7 14 06 F6 | 	mov	arg02, ##@LR__4996
04484     0F 13 02 F6 | 	mov	arg01, local01
04488     D4 A6 B1 FD | 	call	#__system___string_cmp
0448c     00 FA 0D F2 | 	cmp	result1, #0 wz
04490     1C 03 90 AD |  if_e	jmp	#LR__0333
04494     72 01 00 FF 
04498     EB 14 06 F6 | 	mov	arg02, ##@LR__4997
0449c     0F 13 02 F6 | 	mov	arg01, local01
044a0     BC A6 B1 FD | 	call	#__system___string_cmp
044a4     00 FA 0D F2 | 	cmp	result1, #0 wz
044a8     0C 03 90 AD |  if_e	jmp	#LR__0334
044ac     72 01 00 FF 
044b0     F1 14 06 F6 | 	mov	arg02, ##@LR__4998
044b4     0F 13 02 F6 | 	mov	arg01, local01
044b8     A4 A6 B1 FD | 	call	#__system___string_cmp
044bc     00 FA 0D F2 | 	cmp	result1, #0 wz
044c0     FC 02 90 AD |  if_e	jmp	#LR__0335
044c4     00 03 90 FD | 	jmp	#LR__0336
044c8                 | LR__0240
044c8     5C FA 05 F6 | 	mov	result1, #92
044cc     FC 02 90 FD | 	jmp	#LR__0337
044d0                 | LR__0241
044d0     5C FA 05 F6 | 	mov	result1, #92
044d4     F4 02 90 FD | 	jmp	#LR__0337
044d8                 | LR__0242
044d8     47 FA 05 F6 | 	mov	result1, #71
044dc     EC 02 90 FD | 	jmp	#LR__0337
044e0                 | LR__0243
044e0     59 FA 05 F6 | 	mov	result1, #89
044e4     E4 02 90 FD | 	jmp	#LR__0337
044e8                 | LR__0244
044e8     59 FA 05 F6 | 	mov	result1, #89
044ec     DC 02 90 FD | 	jmp	#LR__0337
044f0                 | LR__0245
044f0     45 FA 05 F6 | 	mov	result1, #69
044f4     D4 02 90 FD | 	jmp	#LR__0337
044f8                 | LR__0246
044f8     45 FA 05 F6 | 	mov	result1, #69
044fc     CC 02 90 FD | 	jmp	#LR__0337
04500                 | LR__0247
04500     69 FA 05 F6 | 	mov	result1, #105
04504     C4 02 90 FD | 	jmp	#LR__0337
04508                 | LR__0248
04508     40 FA 05 F6 | 	mov	result1, #64
0450c     BC 02 90 FD | 	jmp	#LR__0337
04510                 | LR__0249
04510     49 FA 05 F6 | 	mov	result1, #73
04514     B4 02 90 FD | 	jmp	#LR__0337
04518                 | LR__0250
04518     49 FA 05 F6 | 	mov	result1, #73
0451c     AC 02 90 FD | 	jmp	#LR__0337
04520                 | LR__0251
04520     50 FA 05 F6 | 	mov	result1, #80
04524     A4 02 90 FD | 	jmp	#LR__0337
04528                 | LR__0252
04528     50 FA 05 F6 | 	mov	result1, #80
0452c     9C 02 90 FD | 	jmp	#LR__0337
04530                 | LR__0253
04530     68 FA 05 F6 | 	mov	result1, #104
04534     94 02 90 FD | 	jmp	#LR__0337
04538                 | LR__0254
04538     73 FA 05 F6 | 	mov	result1, #115
0453c     8C 02 90 FD | 	jmp	#LR__0337
04540                 | LR__0255
04540     74 FA 05 F6 | 	mov	result1, #116
04544     84 02 90 FD | 	jmp	#LR__0337
04548                 | LR__0256
04548     6C FA 05 F6 | 	mov	result1, #108
0454c     7C 02 90 FD | 	jmp	#LR__0337
04550                 | LR__0257
04550     6C FA 05 F6 | 	mov	result1, #108
04554     74 02 90 FD | 	jmp	#LR__0337
04558                 | LR__0258
04558     89 FA 05 F6 | 	mov	result1, #137
0455c     6C 02 90 FD | 	jmp	#LR__0337
04560                 | LR__0259
04560     72 FA 05 F6 | 	mov	result1, #114
04564     64 02 90 FD | 	jmp	#LR__0337
04568                 | LR__0260
04568     5D FA 05 F6 | 	mov	result1, #93
0456c     5C 02 90 FD | 	jmp	#LR__0337
04570                 | LR__0261
04570     96 FA 05 F6 | 	mov	result1, #150
04574     54 02 90 FD | 	jmp	#LR__0337
04578                 | LR__0262
04578     43 FA 05 F6 | 	mov	result1, #67
0457c     4C 02 90 FD | 	jmp	#LR__0337
04580                 | LR__0263
04580     43 FA 05 F6 | 	mov	result1, #67
04584     44 02 90 FD | 	jmp	#LR__0337
04588                 | LR__0264
04588     5A FA 05 F6 | 	mov	result1, #90
0458c     3C 02 90 FD | 	jmp	#LR__0337
04590                 | LR__0265
04590     AB FA 05 F6 | 	mov	result1, #171
04594     34 02 90 FD | 	jmp	#LR__0337
04598                 | LR__0266
04598     46 FA 05 F6 | 	mov	result1, #70
0459c     2C 02 90 FD | 	jmp	#LR__0337
045a0                 | LR__0267
045a0     46 FA 05 F6 | 	mov	result1, #70
045a4     24 02 90 FD | 	jmp	#LR__0337
045a8                 | LR__0268
045a8     71 FA 05 F6 | 	mov	result1, #113
045ac     1C 02 90 FD | 	jmp	#LR__0337
045b0                 | LR__0269
045b0     71 FA 05 F6 | 	mov	result1, #113
045b4     14 02 90 FD | 	jmp	#LR__0337
045b8                 | LR__0270
045b8     60 FA 05 F6 | 	mov	result1, #96
045bc     0C 02 90 FD | 	jmp	#LR__0337
045c0                 | LR__0271
045c0     4A FA 05 F6 | 	mov	result1, #74
045c4     04 02 90 FD | 	jmp	#LR__0337
045c8                 | LR__0272
045c8     4A FA 05 F6 | 	mov	result1, #74
045cc     FC 01 90 FD | 	jmp	#LR__0337
045d0                 | LR__0273
045d0     48 FA 05 F6 | 	mov	result1, #72
045d4     F4 01 90 FD | 	jmp	#LR__0337
045d8                 | LR__0274
045d8     48 FA 05 F6 | 	mov	result1, #72
045dc     EC 01 90 FD | 	jmp	#LR__0337
045e0                 | LR__0275
045e0     A9 FA 05 F6 | 	mov	result1, #169
045e4     E4 01 90 FD | 	jmp	#LR__0337
045e8                 | LR__0276
045e8     4E FA 05 F6 | 	mov	result1, #78
045ec     DC 01 90 FD | 	jmp	#LR__0337
045f0                 | LR__0277
045f0     4E FA 05 F6 | 	mov	result1, #78
045f4     D4 01 90 FD | 	jmp	#LR__0337
045f8                 | LR__0278
045f8     58 FA 05 F6 | 	mov	result1, #88
045fc     CC 01 90 FD | 	jmp	#LR__0337
04600                 | LR__0279
04600     5F FA 05 F6 | 	mov	result1, #95
04604     C4 01 90 FD | 	jmp	#LR__0337
04608                 | LR__0280
04608     5F FA 05 F6 | 	mov	result1, #95
0460c     BC 01 90 FD | 	jmp	#LR__0337
04610                 | LR__0281
04610     8A FA 05 F6 | 	mov	result1, #138
04614     B4 01 90 FD | 	jmp	#LR__0337
04618                 | LR__0282
04618     4C FA 05 F6 | 	mov	result1, #76
0461c     AC 01 90 FD | 	jmp	#LR__0337
04620                 | LR__0283
04620     4C FA 05 F6 | 	mov	result1, #76
04624     A4 01 90 FD | 	jmp	#LR__0337
04628                 | LR__0284
04628     52 FA 05 F6 | 	mov	result1, #82
0462c     9C 01 90 FD | 	jmp	#LR__0337
04630                 | LR__0285
04630     52 FA 05 F6 | 	mov	result1, #82
04634     94 01 90 FD | 	jmp	#LR__0337
04638                 | LR__0286
04638     97 FA 05 F6 | 	mov	result1, #151
0463c     8C 01 90 FD | 	jmp	#LR__0337
04640                 | LR__0287
04640     61 FA 05 F6 | 	mov	result1, #97
04644     84 01 90 FD | 	jmp	#LR__0337
04648                 | LR__0288
04648     61 FA 05 F6 | 	mov	result1, #97
0464c     7C 01 90 FD | 	jmp	#LR__0337
04650                 | LR__0289
04650     63 FA 05 F6 | 	mov	result1, #99
04654     74 01 90 FD | 	jmp	#LR__0337
04658                 | LR__0290
04658     41 FA 05 F6 | 	mov	result1, #65
0465c     6C 01 90 FD | 	jmp	#LR__0337
04660                 | LR__0291
04660     4B FA 05 F6 | 	mov	result1, #75
04664     64 01 90 FD | 	jmp	#LR__0337
04668                 | LR__0292
04668     4B FA 05 F6 | 	mov	result1, #75
0466c     5C 01 90 FD | 	jmp	#LR__0337
04670                 | LR__0293
04670     5E FA 05 F6 | 	mov	result1, #94
04674     54 01 90 FD | 	jmp	#LR__0337
04678                 | LR__0294
04678     5E FA 05 F6 | 	mov	result1, #94
0467c     4C 01 90 FD | 	jmp	#LR__0337
04680                 | LR__0295
04680     7C FA 05 F6 | 	mov	result1, #124
04684     44 01 90 FD | 	jmp	#LR__0337
04688                 | LR__0296
04688     7E FA 05 F6 | 	mov	result1, #126
0468c     3C 01 90 FD | 	jmp	#LR__0337
04690                 | LR__0297
04690     7D FA 05 F6 | 	mov	result1, #125
04694     34 01 90 FD | 	jmp	#LR__0337
04698                 | LR__0298
04698     7F FA 05 F6 | 	mov	result1, #127
0469c     2C 01 90 FD | 	jmp	#LR__0337
046a0                 | LR__0299
046a0     80 FA 05 F6 | 	mov	result1, #128
046a4     24 01 90 FD | 	jmp	#LR__0337
046a8                 | LR__0300
046a8     55 FA 05 F6 | 	mov	result1, #85
046ac     1C 01 90 FD | 	jmp	#LR__0337
046b0                 | LR__0301
046b0     75 FA 05 F6 | 	mov	result1, #117
046b4     14 01 90 FD | 	jmp	#LR__0337
046b8                 | LR__0302
046b8     75 FA 05 F6 | 	mov	result1, #117
046bc     0C 01 90 FD | 	jmp	#LR__0337
046c0                 | LR__0303
046c0     42 FA 05 F6 | 	mov	result1, #66
046c4     04 01 90 FD | 	jmp	#LR__0337
046c8                 | LR__0304
046c8     42 FA 05 F6 | 	mov	result1, #66
046cc     FC 00 90 FD | 	jmp	#LR__0337
046d0                 | LR__0305
046d0     95 FA 05 F6 | 	mov	result1, #149
046d4     F4 00 90 FD | 	jmp	#LR__0337
046d8                 | LR__0306
046d8     AC FA 05 F6 | 	mov	result1, #172
046dc     EC 00 90 FD | 	jmp	#LR__0337
046e0                 | LR__0307
046e0     81 FA 05 F6 | 	mov	result1, #129
046e4     E4 00 90 FD | 	jmp	#LR__0337
046e8                 | LR__0308
046e8     81 FA 05 F6 | 	mov	result1, #129
046ec     DC 00 90 FD | 	jmp	#LR__0337
046f0                 | LR__0309
046f0     44 FA 05 F6 | 	mov	result1, #68
046f4     D4 00 90 FD | 	jmp	#LR__0337
046f8                 | LR__0310
046f8     44 FA 05 F6 | 	mov	result1, #68
046fc     CC 00 90 FD | 	jmp	#LR__0337
04700                 | LR__0311
04700     88 FA 05 F6 | 	mov	result1, #136
04704     C4 00 90 FD | 	jmp	#LR__0337
04708                 | LR__0312
04708     92 FA 05 F6 | 	mov	result1, #146
0470c     BC 00 90 FD | 	jmp	#LR__0337
04710                 | LR__0313
04710     AA FA 05 F6 | 	mov	result1, #170
04714     B4 00 90 FD | 	jmp	#LR__0337
04718                 | LR__0314
04718     4D FA 05 F6 | 	mov	result1, #77
0471c     AC 00 90 FD | 	jmp	#LR__0337
04720                 | LR__0315
04720     51 FA 05 F6 | 	mov	result1, #81
04724     A4 00 90 FD | 	jmp	#LR__0337
04728                 | LR__0316
04728     51 FA 05 F6 | 	mov	result1, #81
0472c     9C 00 90 FD | 	jmp	#LR__0337
04730                 | LR__0317
04730     8E FA 05 F6 | 	mov	result1, #142
04734     94 00 90 FD | 	jmp	#LR__0337
04738                 | LR__0318
04738     90 FA 05 F6 | 	mov	result1, #144
0473c     8C 00 90 FD | 	jmp	#LR__0337
04740                 | LR__0319
04740     8D FA 05 F6 | 	mov	result1, #141
04744     84 00 90 FD | 	jmp	#LR__0337
04748                 | LR__0320
04748     8C FA 05 F6 | 	mov	result1, #140
0474c     7C 00 90 FD | 	jmp	#LR__0337
04750                 | LR__0321
04750     91 FA 05 F6 | 	mov	result1, #145
04754     74 00 90 FD | 	jmp	#LR__0337
04758                 | LR__0322
04758     8B FA 05 F6 | 	mov	result1, #139
0475c     6C 00 90 FD | 	jmp	#LR__0337
04760                 | LR__0323
04760     8F FA 05 F6 | 	mov	result1, #143
04764     64 00 90 FD | 	jmp	#LR__0337
04768                 | LR__0324
04768     75 FA 05 F6 | 	mov	result1, #117
0476c     5C 00 90 FD | 	jmp	#LR__0337
04770                 | LR__0325
04770     75 FA 05 F6 | 	mov	result1, #117
04774     54 00 90 FD | 	jmp	#LR__0337
04778                 | LR__0326
04778     6D FA 05 F6 | 	mov	result1, #109
0477c     4C 00 90 FD | 	jmp	#LR__0337
04780                 | LR__0327
04780     6D FA 05 F6 | 	mov	result1, #109
04784     44 00 90 FD | 	jmp	#LR__0337
04788                 | LR__0328
04788     5B FA 05 F6 | 	mov	result1, #91
0478c     3C 00 90 FD | 	jmp	#LR__0337
04790                 | LR__0329
04790     56 FA 05 F6 | 	mov	result1, #86
04794     34 00 90 FD | 	jmp	#LR__0337
04798                 | LR__0330
04798     70 FA 05 F6 | 	mov	result1, #112
0479c     2C 00 90 FD | 	jmp	#LR__0337
047a0                 | LR__0331
047a0     70 FA 05 F6 | 	mov	result1, #112
047a4     24 00 90 FD | 	jmp	#LR__0337
047a8                 | LR__0332
047a8     57 FA 05 F6 | 	mov	result1, #87
047ac     1C 00 90 FD | 	jmp	#LR__0337
047b0                 | LR__0333
047b0     57 FA 05 F6 | 	mov	result1, #87
047b4     14 00 90 FD | 	jmp	#LR__0337
047b8                 | LR__0334
047b8     77 FA 05 F6 | 	mov	result1, #119
047bc     0C 00 90 FD | 	jmp	#LR__0337
047c0                 | LR__0335
047c0     78 FA 05 F6 | 	mov	result1, #120
047c4     04 00 90 FD | 	jmp	#LR__0337
047c8                 | LR__0336
047c8     00 FA 05 F6 | 	mov	result1, #0
047cc                 | LR__0337
047cc     A7 F0 03 F6 | 	mov	ptra, fp
047d0     B2 00 A0 FD | 	call	#popregs_
047d4                 | _iscommand_ret
047d4     2D 00 64 FD | 	ret
047d8                 | 
047d8                 | ' 
047d8                 | ' function isfunction(s as string) as ubyte
047d8                 | _isfunction
047d8     01 4A 05 F6 | 	mov	COUNT_, #1
047dc     A8 00 A0 FD | 	call	#pushregs_
047e0                 | ' 
047e0                 | ' select case s
047e0     09 1F 02 F6 | 	mov	local01, arg01
047e4     72 01 00 FF 
047e8     F7 14 06 F6 | 	mov	arg02, ##@LR__4999
047ec     0F 13 02 F6 | 	mov	arg01, local01
047f0     6C A3 B1 FD | 	call	#__system___string_cmp
047f4     00 FA 0D F2 | 	cmp	result1, #0 wz
047f8     C4 03 90 AD |  if_e	jmp	#LR__0340
047fc     72 01 00 FF 
04800     FB 14 06 F6 | 	mov	arg02, ##@LR__5000
04804     0F 13 02 F6 | 	mov	arg01, local01
04808     54 A3 B1 FD | 	call	#__system___string_cmp
0480c     00 FA 0D F2 | 	cmp	result1, #0 wz
04810     B4 03 90 AD |  if_e	jmp	#LR__0341
04814     72 01 00 FF 
04818     00 15 06 F6 | 	mov	arg02, ##@LR__5001
0481c     0F 13 02 F6 | 	mov	arg01, local01
04820     3C A3 B1 FD | 	call	#__system___string_cmp
04824     00 FA 0D F2 | 	cmp	result1, #0 wz
04828     A4 03 90 AD |  if_e	jmp	#LR__0342
0482c     72 01 00 FF 
04830     04 15 06 F6 | 	mov	arg02, ##@LR__5002
04834     0F 13 02 F6 | 	mov	arg01, local01
04838     24 A3 B1 FD | 	call	#__system___string_cmp
0483c     00 FA 0D F2 | 	cmp	result1, #0 wz
04840     94 03 90 AD |  if_e	jmp	#LR__0343
04844     72 01 00 FF 
04848     09 15 06 F6 | 	mov	arg02, ##@LR__5003
0484c     0F 13 02 F6 | 	mov	arg01, local01
04850     0C A3 B1 FD | 	call	#__system___string_cmp
04854     00 FA 0D F2 | 	cmp	result1, #0 wz
04858     84 03 90 AD |  if_e	jmp	#LR__0344
0485c     72 01 00 FF 
04860     0D 15 06 F6 | 	mov	arg02, ##@LR__5004
04864     0F 13 02 F6 | 	mov	arg01, local01
04868     F4 A2 B1 FD | 	call	#__system___string_cmp
0486c     00 FA 0D F2 | 	cmp	result1, #0 wz
04870     74 03 90 AD |  if_e	jmp	#LR__0345
04874     72 01 00 FF 
04878     12 15 06 F6 | 	mov	arg02, ##@LR__5005
0487c     0F 13 02 F6 | 	mov	arg01, local01
04880     DC A2 B1 FD | 	call	#__system___string_cmp
04884     00 FA 0D F2 | 	cmp	result1, #0 wz
04888     64 03 90 AD |  if_e	jmp	#LR__0346
0488c     72 01 00 FF 
04890     16 15 06 F6 | 	mov	arg02, ##@LR__5006
04894     0F 13 02 F6 | 	mov	arg01, local01
04898     C4 A2 B1 FD | 	call	#__system___string_cmp
0489c     00 FA 0D F2 | 	cmp	result1, #0 wz
048a0     54 03 90 AD |  if_e	jmp	#LR__0347
048a4     72 01 00 FF 
048a8     1B 15 06 F6 | 	mov	arg02, ##@LR__5007
048ac     0F 13 02 F6 | 	mov	arg01, local01
048b0     AC A2 B1 FD | 	call	#__system___string_cmp
048b4     00 FA 0D F2 | 	cmp	result1, #0 wz
048b8     44 03 90 AD |  if_e	jmp	#LR__0348
048bc     72 01 00 FF 
048c0     20 15 06 F6 | 	mov	arg02, ##@LR__5008
048c4     0F 13 02 F6 | 	mov	arg01, local01
048c8     94 A2 B1 FD | 	call	#__system___string_cmp
048cc     00 FA 0D F2 | 	cmp	result1, #0 wz
048d0     34 03 90 AD |  if_e	jmp	#LR__0349
048d4     72 01 00 FF 
048d8     24 15 06 F6 | 	mov	arg02, ##@LR__5009
048dc     0F 13 02 F6 | 	mov	arg01, local01
048e0     7C A2 B1 FD | 	call	#__system___string_cmp
048e4     00 FA 0D F2 | 	cmp	result1, #0 wz
048e8     24 03 90 AD |  if_e	jmp	#LR__0350
048ec     72 01 00 FF 
048f0     2A 15 06 F6 | 	mov	arg02, ##@LR__5010
048f4     0F 13 02 F6 | 	mov	arg01, local01
048f8     64 A2 B1 FD | 	call	#__system___string_cmp
048fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04900     14 03 90 AD |  if_e	jmp	#LR__0351
04904     72 01 00 FF 
04908     2E 15 06 F6 | 	mov	arg02, ##@LR__5011
0490c     0F 13 02 F6 | 	mov	arg01, local01
04910     4C A2 B1 FD | 	call	#__system___string_cmp
04914     00 FA 0D F2 | 	cmp	result1, #0 wz
04918     04 03 90 AD |  if_e	jmp	#LR__0352
0491c     72 01 00 FF 
04920     37 15 06 F6 | 	mov	arg02, ##@LR__5012
04924     0F 13 02 F6 | 	mov	arg01, local01
04928     34 A2 B1 FD | 	call	#__system___string_cmp
0492c     00 FA 0D F2 | 	cmp	result1, #0 wz
04930     F4 02 90 AD |  if_e	jmp	#LR__0353
04934     72 01 00 FF 
04938     3B 15 06 F6 | 	mov	arg02, ##@LR__5013
0493c     0F 13 02 F6 | 	mov	arg01, local01
04940     1C A2 B1 FD | 	call	#__system___string_cmp
04944     00 FA 0D F2 | 	cmp	result1, #0 wz
04948     E4 02 90 AD |  if_e	jmp	#LR__0354
0494c     72 01 00 FF 
04950     49 15 06 F6 | 	mov	arg02, ##@LR__5014
04954     0F 13 02 F6 | 	mov	arg01, local01
04958     04 A2 B1 FD | 	call	#__system___string_cmp
0495c     00 FA 0D F2 | 	cmp	result1, #0 wz
04960     D4 02 90 AD |  if_e	jmp	#LR__0355
04964     72 01 00 FF 
04968     56 15 06 F6 | 	mov	arg02, ##@LR__5015
0496c     0F 13 02 F6 | 	mov	arg01, local01
04970     EC A1 B1 FD | 	call	#__system___string_cmp
04974     00 FA 0D F2 | 	cmp	result1, #0 wz
04978     C4 02 90 AD |  if_e	jmp	#LR__0356
0497c     72 01 00 FF 
04980     5E 15 06 F6 | 	mov	arg02, ##@LR__5016
04984     0F 13 02 F6 | 	mov	arg01, local01
04988     D4 A1 B1 FD | 	call	#__system___string_cmp
0498c     00 FA 0D F2 | 	cmp	result1, #0 wz
04990     B4 02 90 AD |  if_e	jmp	#LR__0357
04994     72 01 00 FF 
04998     63 15 06 F6 | 	mov	arg02, ##@LR__5017
0499c     0F 13 02 F6 | 	mov	arg01, local01
049a0     BC A1 B1 FD | 	call	#__system___string_cmp
049a4     00 FA 0D F2 | 	cmp	result1, #0 wz
049a8     A4 02 90 AD |  if_e	jmp	#LR__0358
049ac     72 01 00 FF 
049b0     6A 15 06 F6 | 	mov	arg02, ##@LR__5018
049b4     0F 13 02 F6 | 	mov	arg01, local01
049b8     A4 A1 B1 FD | 	call	#__system___string_cmp
049bc     00 FA 0D F2 | 	cmp	result1, #0 wz
049c0     94 02 90 AD |  if_e	jmp	#LR__0359
049c4     72 01 00 FF 
049c8     70 15 06 F6 | 	mov	arg02, ##@LR__5019
049cc     0F 13 02 F6 | 	mov	arg01, local01
049d0     8C A1 B1 FD | 	call	#__system___string_cmp
049d4     00 FA 0D F2 | 	cmp	result1, #0 wz
049d8     84 02 90 AD |  if_e	jmp	#LR__0360
049dc     72 01 00 FF 
049e0     74 15 06 F6 | 	mov	arg02, ##@LR__5020
049e4     0F 13 02 F6 | 	mov	arg01, local01
049e8     74 A1 B1 FD | 	call	#__system___string_cmp
049ec     00 FA 0D F2 | 	cmp	result1, #0 wz
049f0     74 02 90 AD |  if_e	jmp	#LR__0361
049f4     72 01 00 FF 
049f8     7A 15 06 F6 | 	mov	arg02, ##@LR__5021
049fc     0F 13 02 F6 | 	mov	arg01, local01
04a00     5C A1 B1 FD | 	call	#__system___string_cmp
04a04     00 FA 0D F2 | 	cmp	result1, #0 wz
04a08     64 02 90 AD |  if_e	jmp	#LR__0362
04a0c     72 01 00 FF 
04a10     7F 15 06 F6 | 	mov	arg02, ##@LR__5022
04a14     0F 13 02 F6 | 	mov	arg01, local01
04a18     44 A1 B1 FD | 	call	#__system___string_cmp
04a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a20     54 02 90 AD |  if_e	jmp	#LR__0363
04a24     72 01 00 FF 
04a28     86 15 06 F6 | 	mov	arg02, ##@LR__5023
04a2c     0F 13 02 F6 | 	mov	arg01, local01
04a30     2C A1 B1 FD | 	call	#__system___string_cmp
04a34     00 FA 0D F2 | 	cmp	result1, #0 wz
04a38     44 02 90 AD |  if_e	jmp	#LR__0364
04a3c     72 01 00 FF 
04a40     8D 15 06 F6 | 	mov	arg02, ##@LR__5024
04a44     0F 13 02 F6 | 	mov	arg01, local01
04a48     14 A1 B1 FD | 	call	#__system___string_cmp
04a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a50     34 02 90 AD |  if_e	jmp	#LR__0365
04a54     72 01 00 FF 
04a58     94 15 06 F6 | 	mov	arg02, ##@LR__5025
04a5c     0F 13 02 F6 | 	mov	arg01, local01
04a60     FC A0 B1 FD | 	call	#__system___string_cmp
04a64     00 FA 0D F2 | 	cmp	result1, #0 wz
04a68     24 02 90 AD |  if_e	jmp	#LR__0366
04a6c     72 01 00 FF 
04a70     9B 15 06 F6 | 	mov	arg02, ##@LR__5026
04a74     0F 13 02 F6 | 	mov	arg01, local01
04a78     E4 A0 B1 FD | 	call	#__system___string_cmp
04a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a80     14 02 90 AD |  if_e	jmp	#LR__0367
04a84     72 01 00 FF 
04a88     A0 15 06 F6 | 	mov	arg02, ##@LR__5027
04a8c     0F 13 02 F6 | 	mov	arg01, local01
04a90     CC A0 B1 FD | 	call	#__system___string_cmp
04a94     00 FA 0D F2 | 	cmp	result1, #0 wz
04a98     04 02 90 AD |  if_e	jmp	#LR__0368
04a9c     72 01 00 FF 
04aa0     A8 15 06 F6 | 	mov	arg02, ##@LR__5028
04aa4     0F 13 02 F6 | 	mov	arg01, local01
04aa8     B4 A0 B1 FD | 	call	#__system___string_cmp
04aac     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab0     F4 01 90 AD |  if_e	jmp	#LR__0369
04ab4     72 01 00 FF 
04ab8     AE 15 06 F6 | 	mov	arg02, ##@LR__5029
04abc     0F 13 02 F6 | 	mov	arg01, local01
04ac0     9C A0 B1 FD | 	call	#__system___string_cmp
04ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ac8     E4 01 90 AD |  if_e	jmp	#LR__0370
04acc     72 01 00 FF 
04ad0     B5 15 06 F6 | 	mov	arg02, ##@LR__5030
04ad4     0F 13 02 F6 | 	mov	arg01, local01
04ad8     84 A0 B1 FD | 	call	#__system___string_cmp
04adc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae0     D4 01 90 AD |  if_e	jmp	#LR__0371
04ae4     72 01 00 FF 
04ae8     BB 15 06 F6 | 	mov	arg02, ##@LR__5031
04aec     0F 13 02 F6 | 	mov	arg01, local01
04af0     6C A0 B1 FD | 	call	#__system___string_cmp
04af4     00 FA 0D F2 | 	cmp	result1, #0 wz
04af8     C4 01 90 AD |  if_e	jmp	#LR__0372
04afc     72 01 00 FF 
04b00     BF 15 06 F6 | 	mov	arg02, ##@LR__5032
04b04     0F 13 02 F6 | 	mov	arg01, local01
04b08     54 A0 B1 FD | 	call	#__system___string_cmp
04b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b10     B4 01 90 AD |  if_e	jmp	#LR__0373
04b14     72 01 00 FF 
04b18     C3 15 06 F6 | 	mov	arg02, ##@LR__5033
04b1c     0F 13 02 F6 | 	mov	arg01, local01
04b20     3C A0 B1 FD | 	call	#__system___string_cmp
04b24     00 FA 0D F2 | 	cmp	result1, #0 wz
04b28     A4 01 90 AD |  if_e	jmp	#LR__0374
04b2c     72 01 00 FF 
04b30     C7 15 06 F6 | 	mov	arg02, ##@LR__5034
04b34     0F 13 02 F6 | 	mov	arg01, local01
04b38     24 A0 B1 FD | 	call	#__system___string_cmp
04b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b40     94 01 90 AD |  if_e	jmp	#LR__0375
04b44     72 01 00 FF 
04b48     CD 15 06 F6 | 	mov	arg02, ##@LR__5035
04b4c     0F 13 02 F6 | 	mov	arg01, local01
04b50     0C A0 B1 FD | 	call	#__system___string_cmp
04b54     00 FA 0D F2 | 	cmp	result1, #0 wz
04b58     84 01 90 AD |  if_e	jmp	#LR__0376
04b5c     72 01 00 FF 
04b60     D3 15 06 F6 | 	mov	arg02, ##@LR__5036
04b64     0F 13 02 F6 | 	mov	arg01, local01
04b68     F4 9F B1 FD | 	call	#__system___string_cmp
04b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b70     74 01 90 AD |  if_e	jmp	#LR__0377
04b74     72 01 00 FF 
04b78     D8 15 06 F6 | 	mov	arg02, ##@LR__5037
04b7c     0F 13 02 F6 | 	mov	arg01, local01
04b80     DC 9F B1 FD | 	call	#__system___string_cmp
04b84     00 FA 0D F2 | 	cmp	result1, #0 wz
04b88     64 01 90 AD |  if_e	jmp	#LR__0378
04b8c     72 01 00 FF 
04b90     DC 15 06 F6 | 	mov	arg02, ##@LR__5038
04b94     0F 13 02 F6 | 	mov	arg01, local01
04b98     C4 9F B1 FD | 	call	#__system___string_cmp
04b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba0     54 01 90 AD |  if_e	jmp	#LR__0379
04ba4     72 01 00 FF 
04ba8     E0 15 06 F6 | 	mov	arg02, ##@LR__5039
04bac     0F 13 02 F6 | 	mov	arg01, local01
04bb0     AC 9F B1 FD | 	call	#__system___string_cmp
04bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb8     44 01 90 AD |  if_e	jmp	#LR__0380
04bbc     48 01 90 FD | 	jmp	#LR__0381
04bc0                 | LR__0340
04bc0     9E FA 05 F6 | 	mov	result1, #158
04bc4     44 01 90 FD | 	jmp	#LR__0382
04bc8                 | LR__0341
04bc8     85 FA 05 F6 | 	mov	result1, #133
04bcc     3C 01 90 FD | 	jmp	#LR__0382
04bd0                 | LR__0342
04bd0     9B FA 05 F6 | 	mov	result1, #155
04bd4     34 01 90 FD | 	jmp	#LR__0382
04bd8                 | LR__0343
04bd8     9B FA 05 F6 | 	mov	result1, #155
04bdc     2C 01 90 FD | 	jmp	#LR__0382
04be0                 | LR__0344
04be0     A7 FA 05 F6 | 	mov	result1, #167
04be4     24 01 90 FD | 	jmp	#LR__0382
04be8                 | LR__0345
04be8     84 FA 05 F6 | 	mov	result1, #132
04bec     1C 01 90 FD | 	jmp	#LR__0382
04bf0                 | LR__0346
04bf0     86 FA 05 F6 | 	mov	result1, #134
04bf4     14 01 90 FD | 	jmp	#LR__0382
04bf8                 | LR__0347
04bf8     A2 FA 05 F6 | 	mov	result1, #162
04bfc     0C 01 90 FD | 	jmp	#LR__0382
04c00                 | LR__0348
04c00     9F FA 05 F6 | 	mov	result1, #159
04c04     04 01 90 FD | 	jmp	#LR__0382
04c08                 | LR__0349
04c08     82 FA 05 F6 | 	mov	result1, #130
04c0c     FC 00 90 FD | 	jmp	#LR__0382
04c10                 | LR__0350
04c10     99 FA 05 F6 | 	mov	result1, #153
04c14     F4 00 90 FD | 	jmp	#LR__0382
04c18                 | LR__0351
04c18     9C FA 05 F6 | 	mov	result1, #156
04c1c     EC 00 90 FD | 	jmp	#LR__0382
04c20                 | LR__0352
04c20     6F FA 05 F6 | 	mov	result1, #111
04c24     E4 00 90 FD | 	jmp	#LR__0382
04c28                 | LR__0353
04c28     6F FA 05 F6 | 	mov	result1, #111
04c2c     DC 00 90 FD | 	jmp	#LR__0382
04c30                 | LR__0354
04c30     93 FA 05 F6 | 	mov	result1, #147
04c34     D4 00 90 FD | 	jmp	#LR__0382
04c38                 | LR__0355
04c38     94 FA 05 F6 | 	mov	result1, #148
04c3c     CC 00 90 FD | 	jmp	#LR__0382
04c40                 | LR__0356
04c40     62 FA 05 F6 | 	mov	result1, #98
04c44     C4 00 90 FD | 	jmp	#LR__0382
04c48                 | LR__0357
04c48     A3 FA 05 F6 | 	mov	result1, #163
04c4c     BC 00 90 FD | 	jmp	#LR__0382
04c50                 | LR__0358
04c50     9D FA 05 F6 | 	mov	result1, #157
04c54     B4 00 90 FD | 	jmp	#LR__0382
04c58                 | LR__0359
04c58     A4 FA 05 F6 | 	mov	result1, #164
04c5c     AC 00 90 FD | 	jmp	#LR__0382
04c60                 | LR__0360
04c60     A8 FA 05 F6 | 	mov	result1, #168
04c64     A4 00 90 FD | 	jmp	#LR__0382
04c68                 | LR__0361
04c68     9A FA 05 F6 | 	mov	result1, #154
04c6c     9C 00 90 FD | 	jmp	#LR__0382
04c70                 | LR__0362
04c70     A6 FA 05 F6 | 	mov	result1, #166
04c74     94 00 90 FD | 	jmp	#LR__0382
04c78                 | LR__0363
04c78     66 FA 05 F6 | 	mov	result1, #102
04c7c     8C 00 90 FD | 	jmp	#LR__0382
04c80                 | LR__0364
04c80     67 FA 05 F6 | 	mov	result1, #103
04c84     84 00 90 FD | 	jmp	#LR__0382
04c88                 | LR__0365
04c88     64 FA 05 F6 | 	mov	result1, #100
04c8c     7C 00 90 FD | 	jmp	#LR__0382
04c90                 | LR__0366
04c90     65 FA 05 F6 | 	mov	result1, #101
04c94     74 00 90 FD | 	jmp	#LR__0382
04c98                 | LR__0367
04c98     98 FA 05 F6 | 	mov	result1, #152
04c9c     6C 00 90 FD | 	jmp	#LR__0382
04ca0                 | LR__0368
04ca0     7B FA 05 F6 | 	mov	result1, #123
04ca4     64 00 90 FD | 	jmp	#LR__0382
04ca8                 | LR__0369
04ca8     76 FA 05 F6 | 	mov	result1, #118
04cac     5C 00 90 FD | 	jmp	#LR__0382
04cb0                 | LR__0370
04cb0     A5 FA 05 F6 | 	mov	result1, #165
04cb4     54 00 90 FD | 	jmp	#LR__0382
04cb8                 | LR__0371
04cb8     7A FA 05 F6 | 	mov	result1, #122
04cbc     4C 00 90 FD | 	jmp	#LR__0382
04cc0                 | LR__0372
04cc0     54 FA 05 F6 | 	mov	result1, #84
04cc4     44 00 90 FD | 	jmp	#LR__0382
04cc8                 | LR__0373
04cc8     6B FA 05 F6 | 	mov	result1, #107
04ccc     3C 00 90 FD | 	jmp	#LR__0382
04cd0                 | LR__0374
04cd0     87 FA 05 F6 | 	mov	result1, #135
04cd4     34 00 90 FD | 	jmp	#LR__0382
04cd8                 | LR__0375
04cd8     6A FA 05 F6 | 	mov	result1, #106
04cdc     2C 00 90 FD | 	jmp	#LR__0382
04ce0                 | LR__0376
04ce0     6E FA 05 F6 | 	mov	result1, #110
04ce4     24 00 90 FD | 	jmp	#LR__0382
04ce8                 | LR__0377
04ce8     A1 FA 05 F6 | 	mov	result1, #161
04cec     1C 00 90 FD | 	jmp	#LR__0382
04cf0                 | LR__0378
04cf0     83 FA 05 F6 | 	mov	result1, #131
04cf4     14 00 90 FD | 	jmp	#LR__0382
04cf8                 | LR__0379
04cf8     A0 FA 05 F6 | 	mov	result1, #160
04cfc     0C 00 90 FD | 	jmp	#LR__0382
04d00                 | LR__0380
04d00     9B FA 05 F6 | 	mov	result1, #155
04d04     04 00 90 FD | 	jmp	#LR__0382
04d08                 | LR__0381
04d08     00 FA 05 F6 | 	mov	result1, #0
04d0c                 | LR__0382
04d0c     A7 F0 03 F6 | 	mov	ptra, fp
04d10     B2 00 A0 FD | 	call	#popregs_
04d14                 | _isfunction_ret
04d14     2D 00 64 FD | 	ret
04d18                 | 
04d18                 | ' 
04d18                 | ' function isname(s as string) as boolean
04d18                 | _isname
04d18     0D 4A 05 F6 | 	mov	COUNT_, #13
04d1c     A8 00 A0 FD | 	call	#pushregs_
04d20     09 1F 02 F6 | 	mov	local01, arg01
04d24     09 21 02 F6 | 	mov	local02, arg01
04d28     97 06 48 FB | 	callpa	#(@LR__0391-@LR__0390)>>2,fcache_load_ptr_
04d2c                 | LR__0390
04d2c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04d30     01 20 06 51 |  if_ne	add	local02, #1
04d34     F4 FF 9F 5D |  if_ne	jmp	#LR__0390
04d38                 | LR__0391
04d38     09 21 82 F1 | 	sub	local02, arg01
04d3c     10 FB 01 F6 | 	mov	result1, local02
04d40     FD 22 0A F6 | 	mov	local03, result1 wz
04d44     00 FA 05 A6 |  if_e	mov	result1, #0
04d48     34 02 90 AD |  if_e	jmp	#LR__0403
04d4c     0F 13 02 F6 | 	mov	arg01, local01
04d50     01 14 06 F6 | 	mov	arg02, #1
04d54     01 16 06 F6 | 	mov	arg03, #1
04d58     3C BF B1 FD | 	call	#__system__Mid_S
04d5c     FD 24 02 F6 | 	mov	local04, result1
04d60                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04d60     72 01 00 FF 
04d64     E7 15 06 F6 | 	mov	arg02, ##@LR__5040
04d68     12 13 02 F6 | 	mov	arg01, local04
04d6c     F0 9D B1 FD | 	call	#__system___string_cmp
04d70     00 FA 55 F2 | 	cmps	result1, #0 wc
04d74     18 00 90 CD |  if_b	jmp	#LR__0392
04d78     72 01 00 FF 
04d7c     E9 15 06 F6 | 	mov	arg02, ##@LR__5041
04d80     12 13 02 F6 | 	mov	arg01, local04
04d84     D8 9D B1 FD | 	call	#__system___string_cmp
04d88     01 FA 55 F2 | 	cmps	result1, #1 wc
04d8c     1C 00 90 CD |  if_b	jmp	#LR__0393
04d90                 | LR__0392
04d90     72 01 00 FF 
04d94     EB 15 06 F6 | 	mov	arg02, ##@LR__5042
04d98     12 13 02 F6 | 	mov	arg01, local04
04d9c     C0 9D B1 FD | 	call	#__system___string_cmp
04da0     00 FA 0D F2 | 	cmp	result1, #0 wz
04da4     00 FA 05 56 |  if_ne	mov	result1, #0
04da8     D4 01 90 5D |  if_ne	jmp	#LR__0403
04dac                 | LR__0393
04dac                 | ' if l>2 then 
04dac     03 22 56 F2 | 	cmps	local03, #3 wc
04db0     C8 01 90 CD |  if_b	jmp	#LR__0402
04db4                 | '   for i=2 to l
04db4     02 26 06 F6 | 	mov	local05, #2
04db8     11 29 02 F6 | 	mov	local06, local03
04dbc     01 28 06 F1 | 	add	local06, #1
04dc0                 | LR__0394
04dc0     14 27 52 F2 | 	cmps	local05, local06 wc
04dc4     B4 01 90 3D |  if_ae	jmp	#LR__0401
04dc8     0F 13 02 F6 | 	mov	arg01, local01
04dcc     13 15 02 F6 | 	mov	arg02, local05
04dd0     01 16 06 F6 | 	mov	arg03, #1
04dd4     C0 BE B1 FD | 	call	#__system__Mid_S
04dd8     FD 24 02 F6 | 	mov	local04, result1
04ddc                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04ddc     11 27 52 F2 | 	cmps	local05, local03 wc
04de0     9C 00 90 3D |  if_ae	jmp	#LR__0397
04de4     72 01 00 FF 
04de8     ED 15 06 F6 | 	mov	arg02, ##@LR__5043
04dec     12 13 02 F6 | 	mov	arg01, local04
04df0     6C 9D B1 FD | 	call	#__system___string_cmp
04df4     00 FA 55 F2 | 	cmps	result1, #0 wc
04df8     18 00 90 CD |  if_b	jmp	#LR__0395
04dfc     72 01 00 FF 
04e00     EF 15 06 F6 | 	mov	arg02, ##@LR__5044
04e04     12 13 02 F6 | 	mov	arg01, local04
04e08     54 9D B1 FD | 	call	#__system___string_cmp
04e0c     01 FA 55 F2 | 	cmps	result1, #1 wc
04e10     6C 00 90 CD |  if_b	jmp	#LR__0397
04e14                 | LR__0395
04e14     72 01 00 FF 
04e18     F1 15 06 F6 | 	mov	arg02, ##@LR__5045
04e1c     12 13 02 F6 | 	mov	arg01, local04
04e20     3C 9D B1 FD | 	call	#__system___string_cmp
04e24     00 FA 55 F2 | 	cmps	result1, #0 wc
04e28     18 00 90 CD |  if_b	jmp	#LR__0396
04e2c     72 01 00 FF 
04e30     F3 15 06 F6 | 	mov	arg02, ##@LR__5046
04e34     12 13 02 F6 | 	mov	arg01, local04
04e38     24 9D B1 FD | 	call	#__system___string_cmp
04e3c     01 FA 55 F2 | 	cmps	result1, #1 wc
04e40     3C 00 90 CD |  if_b	jmp	#LR__0397
04e44                 | LR__0396
04e44     72 01 00 FF 
04e48     F5 2B 06 F6 | 	mov	local07, ##@LR__5047
04e4c     12 13 02 F6 | 	mov	arg01, local04
04e50     15 15 02 F6 | 	mov	arg02, local07
04e54     08 9D B1 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     20 00 90 AD |  if_e	jmp	#LR__0397
04e60     72 01 00 FF 
04e64     F7 2D 06 F6 | 	mov	local08, ##@LR__5048
04e68     12 13 02 F6 | 	mov	arg01, local04
04e6c     16 15 02 F6 | 	mov	arg02, local08
04e70     EC 9C B1 FD | 	call	#__system___string_cmp
04e74     FD 2E 0A F6 | 	mov	local09, result1 wz
04e78     00 FA 05 56 |  if_ne	mov	result1, #0
04e7c     00 01 90 5D |  if_ne	jmp	#LR__0403
04e80                 | LR__0397
04e80                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04e80     11 27 0A F2 | 	cmp	local05, local03 wz
04e84     EC 00 90 5D |  if_ne	jmp	#LR__0400
04e88     72 01 00 FF 
04e8c     F9 31 06 F6 | 	mov	local10, ##@LR__5049
04e90     12 13 02 F6 | 	mov	arg01, local04
04e94     18 15 02 F6 | 	mov	arg02, local10
04e98     C4 9C B1 FD | 	call	#__system___string_cmp
04e9c     FD 32 02 F6 | 	mov	local11, result1
04ea0     00 32 56 F2 | 	cmps	local11, #0 wc
04ea4     1C 00 90 CD |  if_b	jmp	#LR__0398
04ea8     72 01 00 FF 
04eac     FB 15 06 F6 | 	mov	arg02, ##@LR__5050
04eb0     12 13 02 F6 | 	mov	arg01, local04
04eb4     A8 9C B1 FD | 	call	#__system___string_cmp
04eb8     FD 30 02 F6 | 	mov	local10, result1
04ebc     01 30 56 F2 | 	cmps	local10, #1 wc
04ec0     B0 00 90 CD |  if_b	jmp	#LR__0400
04ec4                 | LR__0398
04ec4     72 01 00 FF 
04ec8     FD 15 06 F6 | 	mov	arg02, ##@LR__5051
04ecc     12 13 02 F6 | 	mov	arg01, local04
04ed0     8C 9C B1 FD | 	call	#__system___string_cmp
04ed4     00 FA 55 F2 | 	cmps	result1, #0 wc
04ed8     1C 00 90 CD |  if_b	jmp	#LR__0399
04edc     72 01 00 FF 
04ee0     FF 2F 06 F6 | 	mov	local09, ##@LR__5052
04ee4     12 13 02 F6 | 	mov	arg01, local04
04ee8     17 15 02 F6 | 	mov	arg02, local09
04eec     70 9C B1 FD | 	call	#__system___string_cmp
04ef0     01 FA 55 F2 | 	cmps	result1, #1 wc
04ef4     7C 00 90 CD |  if_b	jmp	#LR__0400
04ef8                 | LR__0399
04ef8     73 01 00 FF 
04efc     01 2E 06 F6 | 	mov	local09, ##@LR__5053
04f00     12 13 02 F6 | 	mov	arg01, local04
04f04     17 15 02 F6 | 	mov	arg02, local09
04f08     54 9C B1 FD | 	call	#__system___string_cmp
04f0c     00 FA 4D F2 | 	cmps	result1, #0 wz
04f10     60 00 90 AD |  if_e	jmp	#LR__0400
04f14     73 01 00 FF 
04f18     03 2C 06 F6 | 	mov	local08, ##@LR__5054
04f1c     12 13 02 F6 | 	mov	arg01, local04
04f20     16 15 02 F6 | 	mov	arg02, local08
04f24     38 9C B1 FD | 	call	#__system___string_cmp
04f28     FD 2E 0A F6 | 	mov	local09, result1 wz
04f2c     44 00 90 AD |  if_e	jmp	#LR__0400
04f30     73 01 00 FF 
04f34     05 34 06 F6 | 	mov	local12, ##@LR__5055
04f38     1A 2D 02 F6 | 	mov	local08, local12
04f3c     12 13 02 F6 | 	mov	arg01, local04
04f40     16 15 02 F6 | 	mov	arg02, local08
04f44     18 9C B1 FD | 	call	#__system___string_cmp
04f48     FD 2A 0A F6 | 	mov	local07, result1 wz
04f4c     24 00 90 AD |  if_e	jmp	#LR__0400
04f50     73 01 00 FF 
04f54     07 36 06 F6 | 	mov	local13, ##@LR__5056
04f58     1B 35 02 F6 | 	mov	local12, local13
04f5c     12 13 02 F6 | 	mov	arg01, local04
04f60     1A 15 02 F6 | 	mov	arg02, local12
04f64     F8 9B B1 FD | 	call	#__system___string_cmp
04f68     FD 2C 0A F6 | 	mov	local08, result1 wz
04f6c     00 FA 05 56 |  if_ne	mov	result1, #0
04f70     0C 00 90 5D |  if_ne	jmp	#LR__0403
04f74                 | LR__0400
04f74     01 26 06 F1 | 	add	local05, #1
04f78     44 FE 9F FD | 	jmp	#LR__0394
04f7c                 | LR__0401
04f7c                 | LR__0402
04f7c                 | ' return true
04f7c     01 FA 65 F6 | 	neg	result1, #1
04f80                 | LR__0403
04f80     A7 F0 03 F6 | 	mov	ptra, fp
04f84     B2 00 A0 FD | 	call	#popregs_
04f88                 | _isname_ret
04f88     2D 00 64 FD | 	ret
04f8c                 | 
04f8c                 | ' 
04f8c                 | ' function isnum(s as string) as boolean
04f8c                 | _isnum
04f8c     0D 4A 05 F6 | 	mov	COUNT_, #13
04f90     A8 00 A0 FD | 	call	#pushregs_
04f94     09 1F 02 F6 | 	mov	local01, arg01
04f98     00 20 06 F6 | 	mov	local02, #0
04f9c     00 22 06 F6 | 	mov	local03, #0
04fa0     0F 13 02 F6 | 	mov	arg01, local01
04fa4     09 25 02 F6 | 	mov	local04, arg01
04fa8     97 06 48 FB | 	callpa	#(@LR__0411-@LR__0410)>>2,fcache_load_ptr_
04fac                 | LR__0410
04fac     12 FB C9 FA | 	rdbyte	result1, local04 wz
04fb0     01 24 06 51 |  if_ne	add	local04, #1
04fb4     F4 FF 9F 5D |  if_ne	jmp	#LR__0410
04fb8                 | LR__0411
04fb8     09 25 82 F1 | 	sub	local04, arg01
04fbc     12 FB 01 F6 | 	mov	result1, local04
04fc0     FD 26 0A F6 | 	mov	local05, result1 wz
04fc4     00 FA 05 A6 |  if_e	mov	result1, #0
04fc8     8C 02 90 AD |  if_e	jmp	#LR__0422
04fcc     0F 13 02 F6 | 	mov	arg01, local01
04fd0     01 14 06 F6 | 	mov	arg02, #1
04fd4     01 16 06 F6 | 	mov	arg03, #1
04fd8     BC BC B1 FD | 	call	#__system__Mid_S
04fdc     FD 28 02 F6 | 	mov	local06, result1
04fe0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04fe0     73 01 00 FF 
04fe4     09 14 06 F6 | 	mov	arg02, ##@LR__5057
04fe8     14 13 02 F6 | 	mov	arg01, local06
04fec     70 9B B1 FD | 	call	#__system___string_cmp
04ff0     00 FA 55 F2 | 	cmps	result1, #0 wc
04ff4     18 00 90 CD |  if_b	jmp	#LR__0412
04ff8     73 01 00 FF 
04ffc     0B 14 06 F6 | 	mov	arg02, ##@LR__5058
05000     14 13 02 F6 | 	mov	arg01, local06
05004     58 9B B1 FD | 	call	#__system___string_cmp
05008     01 FA 55 F2 | 	cmps	result1, #1 wc
0500c     78 00 90 CD |  if_b	jmp	#LR__0413
05010                 | LR__0412
05010     73 01 00 FF 
05014     0D 14 06 F6 | 	mov	arg02, ##@LR__5059
05018     14 13 02 F6 | 	mov	arg01, local06
0501c     40 9B B1 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     60 00 90 AD |  if_e	jmp	#LR__0413
05028     73 01 00 FF 
0502c     0F 2A 06 F6 | 	mov	local07, ##@LR__5060
05030     14 13 02 F6 | 	mov	arg01, local06
05034     15 15 02 F6 | 	mov	arg02, local07
05038     24 9B B1 FD | 	call	#__system___string_cmp
0503c     00 FA 0D F2 | 	cmp	result1, #0 wz
05040     44 00 90 AD |  if_e	jmp	#LR__0413
05044     73 01 00 FF 
05048     11 2C 06 F6 | 	mov	local08, ##@LR__5061
0504c     16 2B 02 F6 | 	mov	local07, local08
05050     14 13 02 F6 | 	mov	arg01, local06
05054     15 15 02 F6 | 	mov	arg02, local07
05058     04 9B B1 FD | 	call	#__system___string_cmp
0505c     00 FA 4D F2 | 	cmps	result1, #0 wz
05060     24 00 90 AD |  if_e	jmp	#LR__0413
05064     73 01 00 FF 
05068     13 2E 06 F6 | 	mov	local09, ##@LR__5062
0506c     17 2D 02 F6 | 	mov	local08, local09
05070     14 13 02 F6 | 	mov	arg01, local06
05074     16 15 02 F6 | 	mov	arg02, local08
05078     E4 9A B1 FD | 	call	#__system___string_cmp
0507c     FD 2A 0A F6 | 	mov	local07, result1 wz
05080     00 FA 05 56 |  if_ne	mov	result1, #0
05084     D0 01 90 5D |  if_ne	jmp	#LR__0422
05088                 | LR__0413
05088                 | ' if m$="." then ds=1
05088     73 01 00 FF 
0508c     15 14 06 F6 | 	mov	arg02, ##@LR__5063
05090     14 13 02 F6 | 	mov	arg01, local06
05094     C8 9A B1 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     01 20 06 A6 |  if_e	mov	local02, #1
050a0                 | ' if l>1 then 
050a0     02 26 56 F2 | 	cmps	local05, #2 wc
050a4     AC 01 90 CD |  if_b	jmp	#LR__0421
050a8                 | '   for i=2 to l
050a8     02 30 06 F6 | 	mov	local10, #2
050ac     13 33 02 F6 | 	mov	local11, local05
050b0     01 32 06 F1 | 	add	local11, #1
050b4                 | LR__0414
050b4     19 31 52 F2 | 	cmps	local10, local11 wc
050b8     98 01 90 3D |  if_ae	jmp	#LR__0420
050bc     0F 13 02 F6 | 	mov	arg01, local01
050c0     18 15 02 F6 | 	mov	arg02, local10
050c4     01 16 06 F6 | 	mov	arg03, #1
050c8     CC BB B1 FD | 	call	#__system__Mid_S
050cc     FD 28 02 F6 | 	mov	local06, result1
050d0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
050d0     73 01 00 FF 
050d4     17 14 06 F6 | 	mov	arg02, ##@LR__5064
050d8     14 13 02 F6 | 	mov	arg01, local06
050dc     80 9A B1 FD | 	call	#__system___string_cmp
050e0     00 FA 55 F2 | 	cmps	result1, #0 wc
050e4     18 00 90 CD |  if_b	jmp	#LR__0415
050e8     73 01 00 FF 
050ec     19 14 06 F6 | 	mov	arg02, ##@LR__5065
050f0     14 13 02 F6 | 	mov	arg01, local06
050f4     68 9A B1 FD | 	call	#__system___string_cmp
050f8     01 FA 55 F2 | 	cmps	result1, #1 wc
050fc     98 00 90 CD |  if_b	jmp	#LR__0416
05100                 | LR__0415
05100     73 01 00 FF 
05104     1B 14 06 F6 | 	mov	arg02, ##@LR__5066
05108     14 13 02 F6 | 	mov	arg01, local06
0510c     50 9A B1 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     80 00 90 AD |  if_e	jmp	#LR__0416
05118     73 01 00 FF 
0511c     1D 2A 06 F6 | 	mov	local07, ##@LR__5067
05120     14 13 02 F6 | 	mov	arg01, local06
05124     15 15 02 F6 | 	mov	arg02, local07
05128     34 9A B1 FD | 	call	#__system___string_cmp
0512c     00 FA 4D F2 | 	cmps	result1, #0 wz
05130     64 00 90 AD |  if_e	jmp	#LR__0416
05134     73 01 00 FF 
05138     1F 2C 06 F6 | 	mov	local08, ##@LR__5068
0513c     16 2B 02 F6 | 	mov	local07, local08
05140     14 13 02 F6 | 	mov	arg01, local06
05144     15 15 02 F6 | 	mov	arg02, local07
05148     14 9A B1 FD | 	call	#__system___string_cmp
0514c     FD 34 0A F6 | 	mov	local12, result1 wz
05150     44 00 90 AD |  if_e	jmp	#LR__0416
05154     73 01 00 FF 
05158     21 2E 06 F6 | 	mov	local09, ##@LR__5069
0515c     17 2D 02 F6 | 	mov	local08, local09
05160     14 13 02 F6 | 	mov	arg01, local06
05164     16 15 02 F6 | 	mov	arg02, local08
05168     F4 99 B1 FD | 	call	#__system___string_cmp
0516c     FD 2A 0A F6 | 	mov	local07, result1 wz
05170     24 00 90 AD |  if_e	jmp	#LR__0416
05174     73 01 00 FF 
05178     23 36 06 F6 | 	mov	local13, ##@LR__5070
0517c     1B 2F 02 F6 | 	mov	local09, local13
05180     14 13 02 F6 | 	mov	arg01, local06
05184     17 15 02 F6 | 	mov	arg02, local09
05188     D4 99 B1 FD | 	call	#__system___string_cmp
0518c     FD 2C 0A F6 | 	mov	local08, result1 wz
05190     00 FA 05 56 |  if_ne	mov	result1, #0
05194     C0 00 90 5D |  if_ne	jmp	#LR__0422
05198                 | LR__0416
05198                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
05198     73 01 00 FF 
0519c     25 14 06 F6 | 	mov	arg02, ##@LR__5071
051a0     14 13 02 F6 | 	mov	arg01, local06
051a4     B8 99 B1 FD | 	call	#__system___string_cmp
051a8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ac     38 00 90 5D |  if_ne	jmp	#LR__0417
051b0     18 15 02 F6 | 	mov	arg02, local10
051b4     01 14 86 F1 | 	sub	arg02, #1
051b8     0F 13 02 F6 | 	mov	arg01, local01
051bc     01 16 06 F6 | 	mov	arg03, #1
051c0     D4 BA B1 FD | 	call	#__system__Mid_S
051c4     FD 12 02 F6 | 	mov	arg01, result1
051c8     C4 BC B1 FD | 	call	#__system__LCase_S
051cc     FD 12 02 F6 | 	mov	arg01, result1
051d0     73 01 00 FF 
051d4     27 14 06 F6 | 	mov	arg02, ##@LR__5072
051d8     84 99 B1 FD | 	call	#__system___string_cmp
051dc     00 FA 0D F2 | 	cmp	result1, #0 wz
051e0     00 FA 05 56 |  if_ne	mov	result1, #0
051e4     70 00 90 5D |  if_ne	jmp	#LR__0422
051e8                 | LR__0417
051e8                 | '     if m$="." then ds+=1: if ds>1 then return false
051e8     73 01 00 FF 
051ec     29 14 06 F6 | 	mov	arg02, ##@LR__5073
051f0     14 13 02 F6 | 	mov	arg01, local06
051f4     68 99 B1 FD | 	call	#__system___string_cmp
051f8     00 FA 0D F2 | 	cmp	result1, #0 wz
051fc     01 20 06 A1 |  if_e	add	local02, #1
05200     02 20 56 A2 |  if_e	cmps	local02, #2 wc
05204     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
05208     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0422
0520c                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
0520c     73 01 00 FF 
05210     2B 14 06 F6 | 	mov	arg02, ##@LR__5074
05214     14 13 02 F6 | 	mov	arg01, local06
05218     44 99 B1 FD | 	call	#__system___string_cmp
0521c     00 FA 4D F2 | 	cmps	result1, #0 wz
05220     18 00 90 AD |  if_e	jmp	#LR__0418
05224     73 01 00 FF 
05228     2D 14 06 F6 | 	mov	arg02, ##@LR__5075
0522c     14 13 02 F6 | 	mov	arg01, local06
05230     2C 99 B1 FD | 	call	#__system___string_cmp
05234     00 FA 4D F2 | 	cmps	result1, #0 wz
05238     10 00 90 5D |  if_ne	jmp	#LR__0419
0523c                 | LR__0418
0523c     01 22 06 F1 | 	add	local03, #1
05240     02 22 56 F2 | 	cmps	local03, #2 wc
05244     00 FA 05 36 |  if_ae	mov	result1, #0
05248     0C 00 90 3D |  if_ae	jmp	#LR__0422
0524c                 | LR__0419
0524c     01 30 06 F1 | 	add	local10, #1
05250     60 FE 9F FD | 	jmp	#LR__0414
05254                 | LR__0420
05254                 | LR__0421
05254                 | ' return true
05254     01 FA 65 F6 | 	neg	result1, #1
05258                 | LR__0422
05258     A7 F0 03 F6 | 	mov	ptra, fp
0525c     B2 00 A0 FD | 	call	#popregs_
05260                 | _isnum_ret
05260     2D 00 64 FD | 	ret
05264                 | 
05264                 | '   
05264                 | ' function isint(s as string) as boolean
05264                 | _isint
05264     05 4A 05 F6 | 	mov	COUNT_, #5
05268     A8 00 A0 FD | 	call	#pushregs_
0526c     09 1F 02 F6 | 	mov	local01, arg01
05270     09 21 02 F6 | 	mov	local02, arg01
05274     97 06 48 FB | 	callpa	#(@LR__0431-@LR__0430)>>2,fcache_load_ptr_
05278                 | LR__0430
05278     10 FB C9 FA | 	rdbyte	result1, local02 wz
0527c     01 20 06 51 |  if_ne	add	local02, #1
05280     F4 FF 9F 5D |  if_ne	jmp	#LR__0430
05284                 | LR__0431
05284     09 21 82 F1 | 	sub	local02, arg01
05288     10 FB 01 F6 | 	mov	result1, local02
0528c     FD 20 0A F6 | 	mov	local02, result1 wz
05290     00 FA 05 A6 |  if_e	mov	result1, #0
05294     18 01 90 AD |  if_e	jmp	#LR__0439
05298     0F 13 02 F6 | 	mov	arg01, local01
0529c     01 14 06 F6 | 	mov	arg02, #1
052a0     01 16 06 F6 | 	mov	arg03, #1
052a4     F0 B9 B1 FD | 	call	#__system__Mid_S
052a8     FD 22 02 F6 | 	mov	local03, result1
052ac                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
052ac     73 01 00 FF 
052b0     2F 14 06 F6 | 	mov	arg02, ##@LR__5076
052b4     11 13 02 F6 | 	mov	arg01, local03
052b8     A4 98 B1 FD | 	call	#__system___string_cmp
052bc     00 FA 55 F2 | 	cmps	result1, #0 wc
052c0     18 00 90 CD |  if_b	jmp	#LR__0432
052c4     73 01 00 FF 
052c8     31 14 06 F6 | 	mov	arg02, ##@LR__5077
052cc     11 13 02 F6 | 	mov	arg01, local03
052d0     8C 98 B1 FD | 	call	#__system___string_cmp
052d4     01 FA 55 F2 | 	cmps	result1, #1 wc
052d8     4C 00 90 CD |  if_b	jmp	#LR__0433
052dc                 | LR__0432
052dc     73 01 00 FF 
052e0     33 14 06 F6 | 	mov	arg02, ##@LR__5078
052e4     11 13 02 F6 | 	mov	arg01, local03
052e8     74 98 B1 FD | 	call	#__system___string_cmp
052ec     00 FA 0D F2 | 	cmp	result1, #0 wz
052f0     34 00 90 AD |  if_e	jmp	#LR__0433
052f4     73 01 00 FF 
052f8     35 14 06 F6 | 	mov	arg02, ##@LR__5079
052fc     11 13 02 F6 | 	mov	arg01, local03
05300     5C 98 B1 FD | 	call	#__system___string_cmp
05304     00 FA 0D F2 | 	cmp	result1, #0 wz
05308     1C 00 90 AD |  if_e	jmp	#LR__0433
0530c     73 01 00 FF 
05310     37 14 06 F6 | 	mov	arg02, ##@LR__5080
05314     11 13 02 F6 | 	mov	arg01, local03
05318     44 98 B1 FD | 	call	#__system___string_cmp
0531c     00 FA 0D F2 | 	cmp	result1, #0 wz
05320     00 FA 05 56 |  if_ne	mov	result1, #0
05324     88 00 90 5D |  if_ne	jmp	#LR__0439
05328                 | LR__0433
05328                 | ' 
05328                 | ' if l>1 then 
05328     02 20 56 F2 | 	cmps	local02, #2 wc
0532c     7C 00 90 CD |  if_b	jmp	#LR__0438
05330                 | '   for i=2 to l
05330     02 24 06 F6 | 	mov	local04, #2
05334     10 27 02 F6 | 	mov	local05, local02
05338     01 26 06 F1 | 	add	local05, #1
0533c                 | LR__0434
0533c     13 25 52 F2 | 	cmps	local04, local05 wc
05340     68 00 90 3D |  if_ae	jmp	#LR__0437
05344     0F 13 02 F6 | 	mov	arg01, local01
05348     12 15 02 F6 | 	mov	arg02, local04
0534c     01 16 06 F6 | 	mov	arg03, #1
05350     44 B9 B1 FD | 	call	#__system__Mid_S
05354     FD 22 02 F6 | 	mov	local03, result1
05358                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05358     73 01 00 FF 
0535c     39 14 06 F6 | 	mov	arg02, ##@LR__5081
05360     11 13 02 F6 | 	mov	arg01, local03
05364     F8 97 B1 FD | 	call	#__system___string_cmp
05368     00 FA 55 F2 | 	cmps	result1, #0 wc
0536c     18 00 90 CD |  if_b	jmp	#LR__0435
05370     73 01 00 FF 
05374     3B 14 06 F6 | 	mov	arg02, ##@LR__5082
05378     11 13 02 F6 | 	mov	arg01, local03
0537c     E0 97 B1 FD | 	call	#__system___string_cmp
05380     01 FA 55 F2 | 	cmps	result1, #1 wc
05384     1C 00 90 CD |  if_b	jmp	#LR__0436
05388                 | LR__0435
05388     73 01 00 FF 
0538c     3D 14 06 F6 | 	mov	arg02, ##@LR__5083
05390     11 13 02 F6 | 	mov	arg01, local03
05394     C8 97 B1 FD | 	call	#__system___string_cmp
05398     00 FA 0D F2 | 	cmp	result1, #0 wz
0539c     00 FA 05 56 |  if_ne	mov	result1, #0
053a0     0C 00 90 5D |  if_ne	jmp	#LR__0439
053a4                 | LR__0436
053a4     01 24 06 F1 | 	add	local04, #1
053a8     90 FF 9F FD | 	jmp	#LR__0434
053ac                 | LR__0437
053ac                 | LR__0438
053ac                 | ' return true
053ac     01 FA 65 F6 | 	neg	result1, #1
053b0                 | LR__0439
053b0     A7 F0 03 F6 | 	mov	ptra, fp
053b4     B2 00 A0 FD | 	call	#popregs_
053b8                 | _isint_ret
053b8     2D 00 64 FD | 	ret
053bc                 | 
053bc                 | ' 
053bc                 | ' function isdec(s as string) as boolean
053bc                 | _isdec
053bc     05 4A 05 F6 | 	mov	COUNT_, #5
053c0     A8 00 A0 FD | 	call	#pushregs_
053c4     09 1F 02 F6 | 	mov	local01, arg01
053c8     09 21 02 F6 | 	mov	local02, arg01
053cc     97 06 48 FB | 	callpa	#(@LR__0441-@LR__0440)>>2,fcache_load_ptr_
053d0                 | LR__0440
053d0     10 FB C9 FA | 	rdbyte	result1, local02 wz
053d4     01 20 06 51 |  if_ne	add	local02, #1
053d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0440
053dc                 | LR__0441
053dc     09 21 82 F1 | 	sub	local02, arg01
053e0     10 FB 01 F6 | 	mov	result1, local02
053e4     FD 20 0A F6 | 	mov	local02, result1 wz
053e8     00 FA 05 A6 |  if_e	mov	result1, #0
053ec     80 00 90 AD |  if_e	jmp	#LR__0446
053f0                 | ' for i=1 to l
053f0     01 22 06 F6 | 	mov	local03, #1
053f4     10 25 02 F6 | 	mov	local04, local02
053f8     01 24 06 F1 | 	add	local04, #1
053fc                 | LR__0442
053fc     12 23 52 F2 | 	cmps	local03, local04 wc
05400     68 00 90 3D |  if_ae	jmp	#LR__0445
05404     0F 13 02 F6 | 	mov	arg01, local01
05408     11 15 02 F6 | 	mov	arg02, local03
0540c     01 16 06 F6 | 	mov	arg03, #1
05410     84 B8 B1 FD | 	call	#__system__Mid_S
05414     FD 26 02 F6 | 	mov	local05, result1
05418                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05418     73 01 00 FF 
0541c     3F 14 06 F6 | 	mov	arg02, ##@LR__5084
05420     13 13 02 F6 | 	mov	arg01, local05
05424     38 97 B1 FD | 	call	#__system___string_cmp
05428     00 FA 55 F2 | 	cmps	result1, #0 wc
0542c     18 00 90 CD |  if_b	jmp	#LR__0443
05430     73 01 00 FF 
05434     41 14 06 F6 | 	mov	arg02, ##@LR__5085
05438     13 13 02 F6 | 	mov	arg01, local05
0543c     20 97 B1 FD | 	call	#__system___string_cmp
05440     01 FA 55 F2 | 	cmps	result1, #1 wc
05444     1C 00 90 CD |  if_b	jmp	#LR__0444
05448                 | LR__0443
05448     73 01 00 FF 
0544c     43 14 06 F6 | 	mov	arg02, ##@LR__5086
05450     13 13 02 F6 | 	mov	arg01, local05
05454     08 97 B1 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     00 FA 05 56 |  if_ne	mov	result1, #0
05460     0C 00 90 5D |  if_ne	jmp	#LR__0446
05464                 | LR__0444
05464     01 22 06 F1 | 	add	local03, #1
05468     90 FF 9F FD | 	jmp	#LR__0442
0546c                 | LR__0445
0546c                 | ' return true
0546c     01 FA 65 F6 | 	neg	result1, #1
05470                 | LR__0446
05470     A7 F0 03 F6 | 	mov	ptra, fp
05474     B2 00 A0 FD | 	call	#popregs_
05478                 | _isdec_ret
05478     2D 00 64 FD | 	ret
0547c                 | 
0547c                 | ' 
0547c                 | ' function isstring(s as string) as boolean
0547c                 | _isstring
0547c     01 4A 05 F6 | 	mov	COUNT_, #1
05480     A8 00 A0 FD | 	call	#pushregs_
05484                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
05484     09 1F 02 F6 | 	mov	local01, arg01
05488     01 14 06 F6 | 	mov	arg02, #1
0548c     F0 B6 B1 FD | 	call	#__system__Left_S
05490     FD 12 02 F6 | 	mov	arg01, result1
05494     73 01 00 FF 
05498     45 14 06 F6 | 	mov	arg02, ##@LR__5087
0549c     C0 96 B1 FD | 	call	#__system___string_cmp
054a0     00 FA 4D F2 | 	cmps	result1, #0 wz
054a4     28 00 90 5D |  if_ne	jmp	#LR__0450
054a8     0F 13 02 F6 | 	mov	arg01, local01
054ac     01 14 06 F6 | 	mov	arg02, #1
054b0     54 B7 B1 FD | 	call	#__system__Right_S
054b4     FD 12 02 F6 | 	mov	arg01, result1
054b8     73 01 00 FF 
054bc     47 14 06 F6 | 	mov	arg02, ##@LR__5088
054c0     9C 96 B1 FD | 	call	#__system___string_cmp
054c4     00 FA 4D F2 | 	cmps	result1, #0 wz
054c8     01 FA 65 A6 |  if_e	neg	result1, #1
054cc     04 00 90 AD |  if_e	jmp	#LR__0451
054d0                 | LR__0450
054d0     00 FA 05 F6 | 	mov	result1, #0
054d4                 | LR__0451
054d4     A7 F0 03 F6 | 	mov	ptra, fp
054d8     B2 00 A0 FD | 	call	#popregs_
054dc                 | _isstring_ret
054dc     2D 00 64 FD | 	ret
054e0                 | 
054e0                 | ' 
054e0                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
054e0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
054e0                 | ' 
054e0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
054e0                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
054e0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
054e0                 | ' 
054e0                 | ' '----- delete a line from a program
054e0                 | ' 
054e0                 | ' function deleteline(aline as ulong) as integer
054e0                 | _deleteline
054e0     03 4A 05 F6 | 	mov	COUNT_, #3
054e4     A8 00 A0 FD | 	call	#pushregs_
054e8     2C F0 07 F1 | 	add	ptra, #44
054ec     04 4E 05 F1 | 	add	fp, #4
054f0     A7 12 62 FC | 	wrlong	arg01, fp
054f4     6A 00 00 FF 
054f8     84 E4 05 F1 | 	add	objptr, ##54404
054fc     F2 1E 02 FB | 	rdlong	local01, objptr
05500     0C 4E 05 F1 | 	add	fp, #12
05504     A7 1E 62 FC | 	wrlong	local01, fp
05508     10 4E 85 F1 | 	sub	fp, #16
0550c                 | ' 
0550c                 | ' 
0550c                 | ' searchptr=programstart
0550c                 | ' 
0550c                 | ' do
0550c     5E 00 00 FF 
05510     B8 E5 85 F1 | 	sub	objptr, ##48568
05514                 | LR__0460
05514     14 4E 05 F1 | 	add	fp, #20
05518     A7 12 02 F6 | 	mov	arg01, fp
0551c     04 4E 85 F1 | 	sub	fp, #4
05520     A7 14 02 FB | 	rdlong	arg02, fp
05524     10 4E 85 F1 | 	sub	fp, #16
05528     18 16 06 F6 | 	mov	arg03, #24
0552c     E4 89 B1 FD | 	call	#_psram_spin2_read1
05530     10 4E 05 F1 | 	add	fp, #16
05534     A7 1E 02 FB | 	rdlong	local01, fp
05538     08 4E 85 F1 | 	sub	fp, #8
0553c     A7 1E 62 FC | 	wrlong	local01, fp
05540     20 4E 05 F1 | 	add	fp, #32
05544     A7 1E 02 FB | 	rdlong	local01, fp
05548     18 4E 85 F1 | 	sub	fp, #24
0554c     A7 1E 62 FC | 	wrlong	local01, fp
05550     04 4E 05 F1 | 	add	fp, #4
05554     A7 1E 02 FB | 	rdlong	local01, fp
05558     10 4E 85 F1 | 	sub	fp, #16
0555c     A7 16 02 FB | 	rdlong	arg03, fp
05560     04 4E 85 F1 | 	sub	fp, #4
05564     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05568     28 4E 05 C1 |  if_b	add	fp, #40
0556c     A7 20 02 CB |  if_b	rdlong	local02, fp
05570     28 4E 85 C1 |  if_b	sub	fp, #40
05574     FF FF 3F CF 
05578     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0557c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0460
05580     0B 00 00 FF 
05584     CC E4 85 F1 | 	sub	objptr, ##5836
05588                 | ' 
05588                 | ' 
05588                 | ' if header(0)<>aline then return -1
05588     14 4E 05 F1 | 	add	fp, #20
0558c     A7 1E 02 FB | 	rdlong	local01, fp
05590     10 4E 85 F1 | 	sub	fp, #16
05594     A7 22 02 FB | 	rdlong	local03, fp
05598     04 4E 85 F1 | 	sub	fp, #4
0559c     11 1F 0A F2 | 	cmp	local01, local03 wz
055a0     01 FA 65 56 |  if_ne	neg	result1, #1
055a4     C8 02 90 5D |  if_ne	jmp	#LR__0466
055a8     08 4E 05 F1 | 	add	fp, #8
055ac     A7 12 02 FB | 	rdlong	arg01, fp
055b0     08 4E 85 F1 | 	sub	fp, #8
055b4     01 14 66 F6 | 	neg	arg02, #1
055b8     80 52 B1 FD | 	call	#_pslpoke
055bc                 | ' 
055bc                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
055bc                 | ' 
055bc                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
055bc     28 4E 05 F1 | 	add	fp, #40
055c0     A7 1E 02 FB | 	rdlong	local01, fp
055c4     28 4E 85 F1 | 	sub	fp, #40
055c8     FF FF 3F FF 
055cc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
055d0     24 4E 05 A1 |  if_e	add	fp, #36
055d4     A7 22 02 AB |  if_e	rdlong	local03, fp
055d8     24 4E 85 A1 |  if_e	sub	fp, #36
055dc     FF FF 7F AF 
055e0     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
055e4     78 00 90 5D |  if_ne	jmp	#LR__0461
055e8     6A 00 00 FF 
055ec     84 E4 05 F1 | 	add	objptr, ##54404
055f0     F2 00 68 FC | 	wrlong	#0, objptr
055f4     07 00 00 FF 
055f8     28 E4 85 F1 | 	sub	objptr, ##3624
055fc     F2 00 68 FC | 	wrlong	#0, objptr
05600     07 00 00 FF 
05604     2C E4 05 F1 | 	add	objptr, ##3628
05608     F2 00 68 FC | 	wrlong	#0, objptr
0560c     04 E4 05 F1 | 	add	objptr, #4
05610     FF FF FF FF 
05614     F2 FE 6B FC | 	wrlong	##-1, objptr
05618     6A 00 00 FF 
0561c     8C E4 85 F1 | 	sub	objptr, ##54412
05620     00 12 06 F6 | 	mov	arg01, #0
05624     01 14 66 F6 | 	neg	arg02, #1
05628     10 52 B1 FD | 	call	#_pslpoke
0562c     10 12 06 F6 | 	mov	arg01, #16
05630     01 14 66 F6 | 	neg	arg02, #1
05634     04 52 B1 FD | 	call	#_pslpoke
05638     14 12 06 F6 | 	mov	arg01, #20
0563c     1E 14 CE F9 | 	bmask	arg02, #30
05640     F8 51 B1 FD | 	call	#_pslpoke
05644     78 00 00 FF 
05648     BC E4 05 F1 | 	add	objptr, ##61628
0564c     F2 00 68 FC | 	wrlong	#0, objptr
05650     04 E4 05 F1 | 	add	objptr, #4
05654     F2 00 68 FC | 	wrlong	#0, objptr
05658     78 00 00 FF 
0565c     C0 E4 85 F1 | 	sub	objptr, ##61632
05660                 | LR__0461
05660                 | ' 
05660                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
05660     28 4E 05 F1 | 	add	fp, #40
05664     A7 1E 02 FB | 	rdlong	local01, fp
05668     28 4E 85 F1 | 	sub	fp, #40
0566c     FF FF 3F FF 
05670     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05674     74 00 90 5D |  if_ne	jmp	#LR__0462
05678     24 4E 05 F1 | 	add	fp, #36
0567c     A7 22 02 FB | 	rdlong	local03, fp
05680     24 4E 85 F1 | 	sub	fp, #36
05684     FF FF 7F FF 
05688     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0568c     5C 00 90 AD |  if_e	jmp	#LR__0462
05690     24 4E 05 F1 | 	add	fp, #36
05694     A7 12 02 FB | 	rdlong	arg01, fp
05698     24 4E 85 F1 | 	sub	fp, #36
0569c     14 12 06 F1 | 	add	arg01, #20
056a0     1E 14 CE F9 | 	bmask	arg02, #30
056a4     94 51 B1 FD | 	call	#_pslpoke
056a8     24 4E 05 F1 | 	add	fp, #36
056ac     A7 1E 02 FB | 	rdlong	local01, fp
056b0     6A 00 00 FF 
056b4     8C E4 05 F1 | 	add	objptr, ##54412
056b8     F2 1E 62 FC | 	wrlong	local01, objptr
056bc     6A 00 00 FF 
056c0     8C E4 85 F1 | 	sub	objptr, ##54412
056c4     A7 12 02 FB | 	rdlong	arg01, fp
056c8     24 4E 85 F1 | 	sub	fp, #36
056cc     9C 52 B1 FD | 	call	#_pslpeek
056d0     6A 00 00 FF 
056d4     88 E4 05 F1 | 	add	objptr, ##54408
056d8     F2 FA 61 FC | 	wrlong	result1, objptr
056dc     6A 00 00 FF 
056e0     88 E4 85 F1 | 	sub	objptr, ##54408
056e4                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
056e4                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
056e4                 | '   lastline=pslpeek(header(4))
056e4                 | '   return 0
056e4     00 FA 05 F6 | 	mov	result1, #0
056e8     84 01 90 FD | 	jmp	#LR__0466
056ec                 | LR__0462
056ec                 | ' 
056ec                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
056ec     28 4E 05 F1 | 	add	fp, #40
056f0     A7 1E 02 FB | 	rdlong	local01, fp
056f4     28 4E 85 F1 | 	sub	fp, #40
056f8     FF FF 3F FF 
056fc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05700     58 00 90 AD |  if_e	jmp	#LR__0463
05704     24 4E 05 F1 | 	add	fp, #36
05708     A7 22 02 FB | 	rdlong	local03, fp
0570c     24 4E 85 F1 | 	sub	fp, #36
05710     FF FF 7F FF 
05714     FF 23 0E F2 | 	cmp	local03, ##-1 wz
05718     40 00 90 5D |  if_ne	jmp	#LR__0463
0571c     28 4E 05 F1 | 	add	fp, #40
05720     A7 12 02 FB | 	rdlong	arg01, fp
05724     28 4E 85 F1 | 	sub	fp, #40
05728     10 12 06 F1 | 	add	arg01, #16
0572c     01 14 66 F6 | 	neg	arg02, #1
05730     08 51 B1 FD | 	call	#_pslpoke
05734     28 4E 05 F1 | 	add	fp, #40
05738     A7 1E 02 FB | 	rdlong	local01, fp
0573c     28 4E 85 F1 | 	sub	fp, #40
05740     6A 00 00 FF 
05744     84 E4 05 F1 | 	add	objptr, ##54404
05748     F2 1E 62 FC | 	wrlong	local01, objptr
0574c     6A 00 00 FF 
05750     84 E4 85 F1 | 	sub	objptr, ##54404
05754                 | ' '   print "deleted first line"
05754                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
05754                 | '   programstart=header(5) ' adjust the program start to point on the first new line
05754                 | '   return 0
05754     00 FA 05 F6 | 	mov	result1, #0
05758     14 01 90 FD | 	jmp	#LR__0466
0575c                 | LR__0463
0575c                 | ' 
0575c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
0575c     28 4E 05 F1 | 	add	fp, #40
05760     A7 1E 02 FB | 	rdlong	local01, fp
05764     28 4E 85 F1 | 	sub	fp, #40
05768     FF FF 3F FF 
0576c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05770     24 4E 05 51 |  if_ne	add	fp, #36
05774     A7 22 02 5B |  if_ne	rdlong	local03, fp
05778     24 4E 85 51 |  if_ne	sub	fp, #36
0577c     FF FF 7F 5F 
05780     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
05784     40 00 90 AD |  if_e	jmp	#LR__0464
05788     28 4E 05 F1 | 	add	fp, #40
0578c     A7 12 02 FB | 	rdlong	arg01, fp
05790     10 12 06 F1 | 	add	arg01, #16
05794     04 4E 85 F1 | 	sub	fp, #4
05798     A7 14 02 FB | 	rdlong	arg02, fp
0579c     24 4E 85 F1 | 	sub	fp, #36
057a0     98 50 B1 FD | 	call	#_pslpoke
057a4     24 4E 05 F1 | 	add	fp, #36
057a8     A7 12 02 FB | 	rdlong	arg01, fp
057ac     14 12 06 F1 | 	add	arg01, #20
057b0     04 4E 05 F1 | 	add	fp, #4
057b4     A7 14 02 FB | 	rdlong	arg02, fp
057b8     28 4E 85 F1 | 	sub	fp, #40
057bc     7C 50 B1 FD | 	call	#_pslpoke
057c0                 | '    pslpoke(header(5)+16,header(4))  
057c0                 | '    pslpoke(header(4)+20, header(5))
057c0                 | '    return 0
057c0     00 FA 05 F6 | 	mov	result1, #0
057c4     A8 00 90 FD | 	jmp	#LR__0466
057c8                 | LR__0464
057c8     10 4E 05 F1 | 	add	fp, #16
057cc     A7 1E 02 FB | 	rdlong	local01, fp
057d0     08 4E 85 F1 | 	sub	fp, #8
057d4     A7 1E 62 FC | 	wrlong	local01, fp
057d8     6A 00 00 FF 
057dc     84 E4 05 F1 | 	add	objptr, ##54404
057e0     F2 1E 02 FB | 	rdlong	local01, objptr
057e4     08 4E 05 F1 | 	add	fp, #8
057e8     A7 1E 62 FC | 	wrlong	local01, fp
057ec     10 4E 85 F1 | 	sub	fp, #16
057f0                 | ' 
057f0                 | ' 
057f0                 | ' 
057f0                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
057f0                 | ' 
057f0                 | ' lineptr2=searchptr
057f0                 | ' searchptr=programstart
057f0                 | ' 
057f0                 | ' do
057f0     5E 00 00 FF 
057f4     B8 E5 85 F1 | 	sub	objptr, ##48568
057f8                 | LR__0465
057f8     14 4E 05 F1 | 	add	fp, #20
057fc     A7 12 02 F6 | 	mov	arg01, fp
05800     04 4E 85 F1 | 	sub	fp, #4
05804     A7 14 02 FB | 	rdlong	arg02, fp
05808     10 4E 85 F1 | 	sub	fp, #16
0580c     18 16 06 F6 | 	mov	arg03, #24
05810     00 87 B1 FD | 	call	#_psram_spin2_read1
05814     10 4E 05 F1 | 	add	fp, #16
05818     A7 1E 02 FB | 	rdlong	local01, fp
0581c     08 4E 85 F1 | 	sub	fp, #8
05820     A7 1E 62 FC | 	wrlong	local01, fp
05824     20 4E 05 F1 | 	add	fp, #32
05828     A7 1E 02 FB | 	rdlong	local01, fp
0582c     18 4E 85 F1 | 	sub	fp, #24
05830     A7 1E 62 FC | 	wrlong	local01, fp
05834     04 4E 05 F1 | 	add	fp, #4
05838     A7 1E 02 FB | 	rdlong	local01, fp
0583c     10 4E 85 F1 | 	sub	fp, #16
05840     A7 22 02 FB | 	rdlong	local03, fp
05844     04 4E 85 F1 | 	sub	fp, #4
05848     11 1F 12 F2 | 	cmp	local01, local03 wc
0584c     28 4E 05 C1 |  if_b	add	fp, #40
05850     A7 20 02 CB |  if_b	rdlong	local02, fp
05854     28 4E 85 C1 |  if_b	sub	fp, #40
05858     FF FF 3F CF 
0585c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05860     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0465
05864     0B 00 00 FF 
05868     CC E4 85 F1 | 	sub	objptr, ##5836
0586c     00 FA 05 F6 | 	mov	result1, #0
05870                 | LR__0466
05870     A7 F0 03 F6 | 	mov	ptra, fp
05874     B2 00 A0 FD | 	call	#popregs_
05878                 | _deleteline_ret
05878     2D 00 64 FD | 	ret
0587c                 | 
0587c                 | ' 
0587c                 | ' sub save_line
0587c                 | _save_line
0587c     03 4A 05 F6 | 	mov	COUNT_, #3
05880     A8 00 A0 FD | 	call	#pushregs_
05884     6A 00 00 FF 
05888     7C E4 05 F1 | 	add	objptr, ##54396
0588c     F2 16 02 FB | 	rdlong	arg03, objptr
05890     01 16 06 F1 | 	add	arg03, #1
05894     05 00 00 FF 
05898     18 E4 85 F1 | 	sub	objptr, ##2584
0589c     F2 14 02 FB | 	rdlong	arg02, objptr
058a0     0B 15 02 FD | 	qmul	arg02, arg03
058a4     0E 00 00 FF 
058a8     44 E4 85 F1 | 	sub	objptr, ##7236
058ac     F2 12 02 FB | 	rdlong	arg01, objptr
058b0     57 00 00 FF 
058b4     20 E4 85 F1 | 	sub	objptr, ##44576
058b8     09 1F 02 F6 | 	mov	local01, arg01
058bc     18 20 62 FD | 	getqx	local02
058c0     97 06 48 FB | 	callpa	#(@LR__0471-@LR__0470)>>2,fcache_load_ptr_
058c4                 | LR__0470
058c4     0F FB C9 FA | 	rdbyte	result1, local01 wz
058c8     01 1E 06 51 |  if_ne	add	local01, #1
058cc     F4 FF 9F 5D |  if_ne	jmp	#LR__0470
058d0                 | LR__0471
058d0     09 1F 82 F1 | 	sub	local01, arg01
058d4     03 1E CE F7 | 	test	local01, #3 wz
058d8     02 1E 46 50 |  if_ne	shr	local01, #2
058dc     01 1E 06 51 |  if_ne	add	local01, #1
058e0     02 1E 66 50 |  if_ne	shl	local01, #2
058e4     10 23 02 F6 | 	mov	local03, local02
058e8     0F 23 02 F1 | 	add	local03, local01
058ec     63 00 00 FF 
058f0     5C E4 05 F1 | 	add	objptr, ##50780
058f4     F2 16 02 FB | 	rdlong	arg03, objptr
058f8     10 17 02 F1 | 	add	arg03, local02
058fc     04 00 00 FF 
05900     28 E4 05 F1 | 	add	objptr, ##2088
05904     F2 16 62 FC | 	wrlong	arg03, objptr
05908     04 E4 05 F1 | 	add	objptr, #4
0590c     F2 1E 62 FC | 	wrlong	local01, objptr
05910     0C E4 85 F1 | 	sub	objptr, #12
05914     F2 12 02 F6 | 	mov	arg01, objptr
05918     04 00 00 FF 
0591c     20 E4 85 F1 | 	sub	objptr, ##2080
05920     F2 14 02 FB | 	rdlong	arg02, objptr
05924     10 17 02 F6 | 	mov	arg03, local02
05928     57 00 00 FF 
0592c     90 E5 85 F1 | 	sub	objptr, ##44944
05930     7C 86 B1 FD | 	call	#_psram_spin2_write
05934     4B 00 00 FF 
05938     54 E5 05 F1 | 	add	objptr, ##38740
0593c     F2 12 02 FB | 	rdlong	arg01, objptr
05940     0C 00 00 FF 
05944     3C E4 05 F1 | 	add	objptr, ##6204
05948     F2 14 02 FB | 	rdlong	arg02, objptr
0594c     10 15 02 F1 | 	add	arg02, local02
05950     0F 17 02 F6 | 	mov	arg03, local01
05954     57 00 00 FF 
05958     90 E5 85 F1 | 	sub	objptr, ##44944
0595c     50 86 B1 FD | 	call	#_psram_spin2_write
05960     57 00 00 FF 
05964     90 E5 05 F1 | 	add	objptr, ##44944
05968     F2 1E 02 FB | 	rdlong	local01, objptr
0596c     11 1F 02 F1 | 	add	local01, local03
05970     F2 1E 62 FC | 	wrlong	local01, objptr
05974     63 00 00 FF 
05978     5C E4 85 F1 | 	sub	objptr, ##50780
0597c     A7 F0 03 F6 | 	mov	ptra, fp
05980     B2 00 A0 FD | 	call	#popregs_
05984                 | _save_line_ret
05984     2D 00 64 FD | 	ret
05988                 | 
05988                 | ' 
05988                 | ' 
05988                 | ' function insertline(aline as ulong) as integer
05988                 | _insertline
05988     02 4A 05 F6 | 	mov	COUNT_, #2
0598c     A8 00 A0 FD | 	call	#pushregs_
05990     28 F0 07 F1 | 	add	ptra, #40
05994     04 4E 05 F1 | 	add	fp, #4
05998     A7 12 62 FC | 	wrlong	arg01, fp
0599c     6A 00 00 FF 
059a0     84 E4 05 F1 | 	add	objptr, ##54404
059a4     F2 1E 02 FB | 	rdlong	local01, objptr
059a8     04 4E 05 F1 | 	add	fp, #4
059ac     A7 1E 62 FC | 	wrlong	local01, fp
059b0     08 4E 85 F1 | 	sub	fp, #8
059b4                 | ' 
059b4                 | ' do
059b4     5E 00 00 FF 
059b8     B8 E5 85 F1 | 	sub	objptr, ##48568
059bc                 | LR__0480
059bc     10 4E 05 F1 | 	add	fp, #16
059c0     A7 12 02 F6 | 	mov	arg01, fp
059c4     08 4E 85 F1 | 	sub	fp, #8
059c8     A7 14 02 FB | 	rdlong	arg02, fp
059cc     08 4E 85 F1 | 	sub	fp, #8
059d0     18 16 06 F6 | 	mov	arg03, #24
059d4     3C 85 B1 FD | 	call	#_psram_spin2_read1
059d8     08 4E 05 F1 | 	add	fp, #8
059dc     A7 1E 02 FB | 	rdlong	local01, fp
059e0     04 4E 05 F1 | 	add	fp, #4
059e4     A7 1E 62 FC | 	wrlong	local01, fp
059e8     18 4E 05 F1 | 	add	fp, #24
059ec     A7 1E 02 FB | 	rdlong	local01, fp
059f0     1C 4E 85 F1 | 	sub	fp, #28
059f4     A7 1E 62 FC | 	wrlong	local01, fp
059f8     08 4E 05 F1 | 	add	fp, #8
059fc     A7 1E 02 FB | 	rdlong	local01, fp
05a00     0C 4E 85 F1 | 	sub	fp, #12
05a04     A7 16 02 FB | 	rdlong	arg03, fp
05a08     04 4E 85 F1 | 	sub	fp, #4
05a0c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05a10     24 4E 05 C1 |  if_b	add	fp, #36
05a14     A7 20 02 CB |  if_b	rdlong	local02, fp
05a18     24 4E 85 C1 |  if_b	sub	fp, #36
05a1c     FF FF 3F CF 
05a20     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05a24     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0480
05a28     0B 00 00 FF 
05a2c     CC E4 85 F1 | 	sub	objptr, ##5836
05a30                 | ' 
05a30                 | ' if header(0)=aline then return -1 ' delete it first
05a30     10 4E 05 F1 | 	add	fp, #16
05a34     A7 1E 02 FB | 	rdlong	local01, fp
05a38     0C 4E 85 F1 | 	sub	fp, #12
05a3c     A7 20 02 FB | 	rdlong	local02, fp
05a40     04 4E 85 F1 | 	sub	fp, #4
05a44     10 1F 0A F2 | 	cmp	local01, local02 wz
05a48     01 FA 65 A6 |  if_e	neg	result1, #1
05a4c     48 01 90 AD |  if_e	jmp	#LR__0483
05a50                 | ' if header(0)<aline then return -2 ' end of program reached
05a50     10 4E 05 F1 | 	add	fp, #16
05a54     A7 1E 02 FB | 	rdlong	local01, fp
05a58     0C 4E 85 F1 | 	sub	fp, #12
05a5c     A7 16 02 FB | 	rdlong	arg03, fp
05a60     04 4E 85 F1 | 	sub	fp, #4
05a64     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05a68     02 FA 65 C6 |  if_b	neg	result1, #2
05a6c     28 01 90 CD |  if_b	jmp	#LR__0483
05a70                 | ' 
05a70                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
05a70     20 4E 05 F1 | 	add	fp, #32
05a74     A7 1E 02 FB | 	rdlong	local01, fp
05a78     20 4E 85 F1 | 	sub	fp, #32
05a7c     FF FF 7F FF 
05a80     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05a84     78 00 90 5D |  if_ne	jmp	#LR__0481
05a88     63 00 00 FF 
05a8c     5C E4 05 F1 | 	add	objptr, ##50780
05a90     F2 1E 02 FB | 	rdlong	local01, objptr
05a94     07 00 00 FF 
05a98     28 E4 05 F1 | 	add	objptr, ##3624
05a9c     F2 1E 62 FC | 	wrlong	local01, objptr
05aa0     0C 4E 05 F1 | 	add	fp, #12
05aa4     A7 12 02 FB | 	rdlong	arg01, fp
05aa8     0C 4E 85 F1 | 	sub	fp, #12
05aac     10 12 06 F1 | 	add	arg01, #16
05ab0     07 00 00 FF 
05ab4     28 E4 85 F1 | 	sub	objptr, ##3624
05ab8     F2 14 02 FB | 	rdlong	arg02, objptr
05abc     63 00 00 FF 
05ac0     5C E4 85 F1 | 	sub	objptr, ##50780
05ac4     74 4D B1 FD | 	call	#_pslpoke
05ac8     67 00 00 FF 
05acc     8C E4 05 F1 | 	add	objptr, ##52876
05ad0     FF FF FF FF 
05ad4     F2 FE 6B FC | 	wrlong	##-1, objptr
05ad8     0C 4E 05 F1 | 	add	fp, #12
05adc     A7 1E 02 FB | 	rdlong	local01, fp
05ae0     0C 4E 85 F1 | 	sub	fp, #12
05ae4     04 E4 05 F1 | 	add	objptr, #4
05ae8     F2 1E 62 FC | 	wrlong	local01, objptr
05aec     67 00 00 FF 
05af0     90 E4 85 F1 | 	sub	objptr, ##52880
05af4     84 FD BF FD | 	call	#_save_line
05af8                 | '   programstart=programptr
05af8                 | '   pslpoke(lineptr2+16,programptr)
05af8                 | '   ucompiledline(4)=$FFFF_FFFF
05af8                 | '   ucompiledline(5)=lineptr2
05af8                 | '   save_line
05af8                 | '   return 0
05af8     00 FA 05 F6 | 	mov	result1, #0
05afc     98 00 90 FD | 	jmp	#LR__0483
05b00                 | LR__0481
05b00                 | ' 
05b00                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05b00     20 4E 05 F1 | 	add	fp, #32
05b04     A7 1E 02 FB | 	rdlong	local01, fp
05b08     20 4E 85 F1 | 	sub	fp, #32
05b0c     FF FF 7F FF 
05b10     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05b14     7C 00 90 AD |  if_e	jmp	#LR__0482
05b18     20 4E 05 F1 | 	add	fp, #32
05b1c     A7 1E 02 FB | 	rdlong	local01, fp
05b20     67 00 00 FF 
05b24     8C E4 05 F1 | 	add	objptr, ##52876
05b28     F2 1E 62 FC | 	wrlong	local01, objptr
05b2c     14 4E 85 F1 | 	sub	fp, #20
05b30     A7 1E 02 FB | 	rdlong	local01, fp
05b34     04 E4 05 F1 | 	add	objptr, #4
05b38     F2 1E 62 FC | 	wrlong	local01, objptr
05b3c     A7 12 02 FB | 	rdlong	arg01, fp
05b40     0C 4E 85 F1 | 	sub	fp, #12
05b44     10 12 06 F1 | 	add	arg01, #16
05b48     04 00 00 FF 
05b4c     34 E4 85 F1 | 	sub	objptr, ##2100
05b50     F2 14 02 FB | 	rdlong	arg02, objptr
05b54     63 00 00 FF 
05b58     5C E4 85 F1 | 	sub	objptr, ##50780
05b5c     DC 4C B1 FD | 	call	#_pslpoke
05b60     20 4E 05 F1 | 	add	fp, #32
05b64     A7 12 02 FB | 	rdlong	arg01, fp
05b68     20 4E 85 F1 | 	sub	fp, #32
05b6c     14 12 06 F1 | 	add	arg01, #20
05b70     63 00 00 FF 
05b74     5C E4 05 F1 | 	add	objptr, ##50780
05b78     F2 14 02 FB | 	rdlong	arg02, objptr
05b7c     63 00 00 FF 
05b80     5C E4 85 F1 | 	sub	objptr, ##50780
05b84     B4 4C B1 FD | 	call	#_pslpoke
05b88     F0 FC BF FD | 	call	#_save_line
05b8c                 | '   ucompiledline(4)=header(4)
05b8c                 | '   ucompiledline(5)=lineptr2
05b8c                 | '   pslpoke(lineptr2+16,programptr)
05b8c                 | '   pslpoke(header(4)+20,programptr)
05b8c                 | '   save_line
05b8c                 | '   return 0
05b8c     00 FA 05 F6 | 	mov	result1, #0
05b90     04 00 90 FD | 	jmp	#LR__0483
05b94                 | LR__0482
05b94     00 FA 05 F6 | 	mov	result1, #0
05b98                 | LR__0483
05b98     A7 F0 03 F6 | 	mov	ptra, fp
05b9c     B2 00 A0 FD | 	call	#popregs_
05ba0                 | _insertline_ret
05ba0     2D 00 64 FD | 	ret
05ba4                 | 
05ba4                 | ' 
05ba4                 | ' sub add_line_at_end(aline) 
05ba4                 | _add_line_at_end
05ba4     6A 00 00 FF 
05ba8     88 E4 05 F1 | 	add	objptr, ##54408
05bac     F2 12 62 FC | 	wrlong	arg01, objptr
05bb0     04 E4 05 F1 | 	add	objptr, #4
05bb4     F2 14 02 FB | 	rdlong	arg02, objptr
05bb8     03 00 00 FF 
05bbc     00 E4 85 F1 | 	sub	objptr, ##1536
05bc0     F2 14 62 FC | 	wrlong	arg02, objptr
05bc4     03 00 00 FF 
05bc8     00 E4 05 F1 | 	add	objptr, ##1536
05bcc     F2 12 02 FB | 	rdlong	arg01, objptr
05bd0     14 12 06 F1 | 	add	arg01, #20
05bd4     07 00 00 FF 
05bd8     30 E4 85 F1 | 	sub	objptr, ##3632
05bdc     F2 14 02 FB | 	rdlong	arg02, objptr
05be0     63 00 00 FF 
05be4     5C E4 85 F1 | 	sub	objptr, ##50780
05be8     50 4C B1 FD | 	call	#_pslpoke
05bec     63 00 00 FF 
05bf0     5C E4 05 F1 | 	add	objptr, ##50780
05bf4     F2 14 02 FB | 	rdlong	arg02, objptr
05bf8     07 00 00 FF 
05bfc     30 E4 05 F1 | 	add	objptr, ##3632
05c00     F2 14 62 FC | 	wrlong	arg02, objptr
05c04     02 00 00 FF 
05c08     FC E5 85 F1 | 	sub	objptr, ##1532
05c0c     FF FF BF FF 
05c10     F2 FE 6B FC | 	wrlong	##2147483647, objptr
05c14                 | ' 
05c14                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
05c14                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
05c14     04 00 00 FF 
05c18     34 E4 85 F1 | 	sub	objptr, ##2100
05c1c     F2 14 0A FB | 	rdlong	arg02, objptr wz
05c20     63 00 00 FF 
05c24     5C E4 85 F1 | 	sub	objptr, ##50780
05c28     67 00 00 AF 
05c2c     8C E4 05 A1 |  if_e	add	objptr, ##52876
05c30     FF FF FF AF 
05c34     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
05c38     67 00 00 AF 
05c3c     8C E4 85 A1 |  if_e	sub	objptr, ##52876
05c40     38 FC BF FD | 	call	#_save_line
05c44     63 00 00 FF 
05c48     5C E4 05 F1 | 	add	objptr, ##50780
05c4c     F2 12 02 FB | 	rdlong	arg01, objptr
05c50     63 00 00 FF 
05c54     5C E4 85 F1 | 	sub	objptr, ##50780
05c58     01 14 66 F6 | 	neg	arg02, #1
05c5c     DC 4B B1 FD | 	call	#_pslpoke
05c60                 | _add_line_at_end_ret
05c60     2D 00 64 FD | 	ret
05c64                 | 
05c64                 | ' 
05c64                 | ' function compile_immediate(linetype as ulong) as integer
05c64                 | _compile_immediate
05c64     09 4A 05 F6 | 	mov	COUNT_, #9
05c68     A8 00 A0 FD | 	call	#pushregs_
05c6c                 | _compile_immediate_enter
05c6c     09 25 0A F6 | 	mov	local04, arg01 wz
05c70     00 26 06 F6 | 	mov	local05, #0
05c74     00 28 06 F6 | 	mov	local06, #0
05c78                 | ' 
05c78                 | ' ' linetype=cont+1, linetype=0 immediate
05c78                 | ' '  : 1: this is the first part of the line that will continue
05c78                 | ' ' 2 - this is the continuation of the line
05c78                 | ' ' 3 - this is the last continued line
05c78                 | ' ' 4 - this is the one and only part
05c78                 | ' 
05c78                 | ' err=0
05c78                 | ' cmd=0
05c78                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05c78     30 00 90 5D |  if_ne	jmp	#LR__0490
05c7c     55 00 00 FF 
05c80     10 E4 05 F1 | 	add	objptr, ##43536
05c84     F2 28 02 FB | 	rdlong	local06, objptr
05c88     02 00 00 FF 
05c8c     34 E4 05 F1 | 	add	objptr, ##1076
05c90     F2 02 68 FC | 	wrlong	#1, objptr
05c94     00 2A 06 F6 | 	mov	local07, #0
05c98     13 00 00 FF 
05c9c     38 E4 05 F1 | 	add	objptr, ##9784
05ca0     F2 00 68 FC | 	wrlong	#0, objptr
05ca4     6A 00 00 FF 
05ca8     7C E4 85 F1 | 	sub	objptr, ##54396
05cac                 | LR__0490
05cac                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05cac     02 24 0E F2 | 	cmp	local04, #2 wz
05cb0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05cb4     24 00 90 5D |  if_ne	jmp	#LR__0491
05cb8     55 00 00 FF 
05cbc     10 E4 05 F1 | 	add	objptr, ##43536
05cc0     F2 28 02 FB | 	rdlong	local06, objptr
05cc4     01 2A 06 F6 | 	mov	local07, #1
05cc8     02 00 00 FF 
05ccc     34 E4 05 F1 | 	add	objptr, ##1076
05cd0     F2 02 68 FC | 	wrlong	#1, objptr
05cd4     57 00 00 FF 
05cd8     44 E4 85 F1 | 	sub	objptr, ##44612
05cdc                 | LR__0491
05cdc                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05cdc     04 24 0E F2 | 	cmp	local04, #4 wz
05ce0     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05ce4     30 00 90 5D |  if_ne	jmp	#LR__0492
05ce8     55 00 00 FF 
05cec     18 E4 05 F1 | 	add	objptr, ##43544
05cf0     F2 28 02 FB | 	rdlong	local06, objptr
05cf4     02 2A 06 F6 | 	mov	local07, #2
05cf8     02 00 00 FF 
05cfc     2C E4 05 F1 | 	add	objptr, ##1068
05d00     F2 04 68 FC | 	wrlong	#2, objptr
05d04     13 00 00 FF 
05d08     38 E4 05 F1 | 	add	objptr, ##9784
05d0c     F2 04 68 FC | 	wrlong	#2, objptr
05d10     6A 00 00 FF 
05d14     7C E4 85 F1 | 	sub	objptr, ##54396
05d18                 | LR__0492
05d18                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05d18     05 24 0E F2 | 	cmp	local04, #5 wz
05d1c     44 00 90 5D |  if_ne	jmp	#LR__0493
05d20     57 00 00 FF 
05d24     44 E4 05 F1 | 	add	objptr, ##44612
05d28     F2 FA 01 FB | 	rdlong	result1, objptr
05d2c     FD 2A 02 F6 | 	mov	local07, result1
05d30     03 2A 66 F0 | 	shl	local07, #3
05d34     02 00 00 FF 
05d38     38 E4 85 F1 | 	sub	objptr, ##1080
05d3c     F2 2A 02 F1 | 	add	local07, objptr
05d40     04 2A 06 F1 | 	add	local07, #4
05d44     15 29 02 FB | 	rdlong	local06, local07
05d48     FD 2A 02 F6 | 	mov	local07, result1
05d4c     01 2A 06 F1 | 	add	local07, #1
05d50     02 00 00 FF 
05d54     38 E4 05 F1 | 	add	objptr, ##1080
05d58     F2 2A 62 FC | 	wrlong	local07, objptr
05d5c     57 00 00 FF 
05d60     44 E4 85 F1 | 	sub	objptr, ##44612
05d64                 | LR__0493
05d64     00 2C 06 F6 | 	mov	local08, #0
05d68                 | ' vars=0
05d68                 | ' 'print  "In compile_immediate cmd=:", cmd
05d68                 | ' 451 select case cmd
05d68     5C 28 0E F2 | 	cmp	local06, #92 wz
05d6c     28 02 90 AD |  if_e	jmp	#LR__0494
05d70     47 28 0E F2 | 	cmp	local06, #71 wz
05d74     2C 02 90 AD |  if_e	jmp	#LR__0495
05d78     59 28 0E F2 | 	cmp	local06, #89 wz
05d7c     30 02 90 AD |  if_e	jmp	#LR__0496
05d80     45 28 0E F2 | 	cmp	local06, #69 wz
05d84     34 02 90 AD |  if_e	jmp	#LR__0497
05d88     69 28 0E F2 | 	cmp	local06, #105 wz
05d8c     38 02 90 AD |  if_e	jmp	#LR__0498
05d90     40 28 0E F2 | 	cmp	local06, #64 wz
05d94     B8 04 90 AD |  if_e	jmp	#LR__0555
05d98     49 28 0E F2 | 	cmp	local06, #73 wz
05d9c     34 02 90 AD |  if_e	jmp	#LR__0499
05da0     50 28 0E F2 | 	cmp	local06, #80 wz
05da4     38 02 90 AD |  if_e	jmp	#LR__0500
05da8     68 28 0E F2 | 	cmp	local06, #104 wz
05dac     3C 02 90 AD |  if_e	jmp	#LR__0501
05db0     74 28 0E F2 | 	cmp	local06, #116 wz
05db4     40 02 90 AD |  if_e	jmp	#LR__0502
05db8     73 28 0E F2 | 	cmp	local06, #115 wz
05dbc     44 02 90 AD |  if_e	jmp	#LR__0503
05dc0     6C 28 0E F2 | 	cmp	local06, #108 wz
05dc4     48 02 90 AD |  if_e	jmp	#LR__0504
05dc8     89 28 0E F2 | 	cmp	local06, #137 wz
05dcc     80 04 90 AD |  if_e	jmp	#LR__0555
05dd0     72 28 0E F2 | 	cmp	local06, #114 wz
05dd4     44 02 90 AD |  if_e	jmp	#LR__0505
05dd8     5D 28 0E F2 | 	cmp	local06, #93 wz
05ddc     70 04 90 AD |  if_e	jmp	#LR__0555
05de0     96 28 0E F2 | 	cmp	local06, #150 wz
05de4     3C 02 90 AD |  if_e	jmp	#LR__0506
05de8     43 28 0E F2 | 	cmp	local06, #67 wz
05dec     3C 02 90 AD |  if_e	jmp	#LR__0507
05df0     5A 28 0E F2 | 	cmp	local06, #90 wz
05df4     40 02 90 AD |  if_e	jmp	#LR__0508
05df8     AB 28 0E F2 | 	cmp	local06, #171 wz
05dfc     50 04 90 AD |  if_e	jmp	#LR__0555
05e00     4E 28 0E F2 | 	cmp	local06, #78 wz
05e04     38 02 90 AD |  if_e	jmp	#LR__0509
05e08     A9 28 0E F2 | 	cmp	local06, #169 wz
05e0c     4C 02 90 AD |  if_e	jmp	#LR__0511
05e10     46 28 0E F2 | 	cmp	local06, #70 wz
05e14     4C 02 90 AD |  if_e	jmp	#LR__0512
05e18     71 28 0E F2 | 	cmp	local06, #113 wz
05e1c     50 02 90 AD |  if_e	jmp	#LR__0513
05e20     60 28 0E F2 | 	cmp	local06, #96 wz
05e24     54 02 90 AD |  if_e	jmp	#LR__0514
05e28     4A 28 0E F2 | 	cmp	local06, #74 wz
05e2c     58 02 90 AD |  if_e	jmp	#LR__0515
05e30     48 28 0E F2 | 	cmp	local06, #72 wz
05e34     58 02 90 AD |  if_e	jmp	#LR__0516
05e38     58 28 0E F2 | 	cmp	local06, #88 wz
05e3c     5C 02 90 AD |  if_e	jmp	#LR__0517
05e40     5F 28 0E F2 | 	cmp	local06, #95 wz
05e44     5C 02 90 AD |  if_e	jmp	#LR__0518
05e48     8A 28 0E F2 | 	cmp	local06, #138 wz
05e4c     60 02 90 AD |  if_e	jmp	#LR__0519
05e50     4C 28 0E F2 | 	cmp	local06, #76 wz
05e54     64 02 90 AD |  if_e	jmp	#LR__0520
05e58     52 28 0E F2 | 	cmp	local06, #82 wz
05e5c     68 02 90 AD |  if_e	jmp	#LR__0521
05e60     97 28 0E F2 | 	cmp	local06, #151 wz
05e64     6C 02 90 AD |  if_e	jmp	#LR__0522
05e68     61 28 0E F2 | 	cmp	local06, #97 wz
05e6c     70 02 90 AD |  if_e	jmp	#LR__0523
05e70     63 28 0E F2 | 	cmp	local06, #99 wz
05e74     74 02 90 AD |  if_e	jmp	#LR__0524
05e78     41 28 0E F2 | 	cmp	local06, #65 wz
05e7c     D0 03 90 AD |  if_e	jmp	#LR__0555
05e80     4B 28 0E F2 | 	cmp	local06, #75 wz
05e84     70 02 90 AD |  if_e	jmp	#LR__0525
05e88     5E 28 0E F2 | 	cmp	local06, #94 wz
05e8c     70 02 90 AD |  if_e	jmp	#LR__0526
05e90     7C 28 0E F2 | 	cmp	local06, #124 wz
05e94     74 02 90 AD |  if_e	jmp	#LR__0527
05e98     7D 28 0E F2 | 	cmp	local06, #125 wz
05e9c     78 02 90 AD |  if_e	jmp	#LR__0528
05ea0     7E 28 0E F2 | 	cmp	local06, #126 wz
05ea4     7C 02 90 AD |  if_e	jmp	#LR__0529
05ea8     7F 28 0E F2 | 	cmp	local06, #127 wz
05eac     80 02 90 AD |  if_e	jmp	#LR__0530
05eb0     80 28 0E F2 | 	cmp	local06, #128 wz
05eb4     84 02 90 AD |  if_e	jmp	#LR__0531
05eb8     55 28 0E F2 | 	cmp	local06, #85 wz
05ebc     88 02 90 AD |  if_e	jmp	#LR__0532
05ec0     75 28 0E F2 | 	cmp	local06, #117 wz
05ec4     8C 02 90 AD |  if_e	jmp	#LR__0533
05ec8     42 28 0E F2 | 	cmp	local06, #66 wz
05ecc     90 02 90 AD |  if_e	jmp	#LR__0534
05ed0     95 28 0E F2 | 	cmp	local06, #149 wz
05ed4     94 02 90 AD |  if_e	jmp	#LR__0535
05ed8     AC 28 0E F2 | 	cmp	local06, #172 wz
05edc     70 03 90 AD |  if_e	jmp	#LR__0555
05ee0     81 28 0E F2 | 	cmp	local06, #129 wz
05ee4     90 02 90 AD |  if_e	jmp	#LR__0536
05ee8     44 28 0E F2 | 	cmp	local06, #68 wz
05eec     94 02 90 AD |  if_e	jmp	#LR__0537
05ef0     88 28 0E F2 | 	cmp	local06, #136 wz
05ef4     58 03 90 AD |  if_e	jmp	#LR__0555
05ef8     92 28 0E F2 | 	cmp	local06, #146 wz
05efc     90 02 90 AD |  if_e	jmp	#LR__0538
05f00     AA 28 0E F2 | 	cmp	local06, #170 wz
05f04     48 03 90 AD |  if_e	jmp	#LR__0555
05f08     4D 28 0E F2 | 	cmp	local06, #77 wz
05f0c     88 02 90 AD |  if_e	jmp	#LR__0539
05f10     51 28 0E F2 | 	cmp	local06, #81 wz
05f14     8C 02 90 AD |  if_e	jmp	#LR__0540
05f18     8E 28 0E F2 | 	cmp	local06, #142 wz
05f1c     90 02 90 AD |  if_e	jmp	#LR__0541
05f20     90 28 0E F2 | 	cmp	local06, #144 wz
05f24     94 02 90 AD |  if_e	jmp	#LR__0542
05f28     8D 28 0E F2 | 	cmp	local06, #141 wz
05f2c     98 02 90 AD |  if_e	jmp	#LR__0543
05f30     8C 28 0E F2 | 	cmp	local06, #140 wz
05f34     9C 02 90 AD |  if_e	jmp	#LR__0544
05f38     91 28 0E F2 | 	cmp	local06, #145 wz
05f3c     A0 02 90 AD |  if_e	jmp	#LR__0545
05f40     8B 28 0E F2 | 	cmp	local06, #139 wz
05f44     A4 02 90 AD |  if_e	jmp	#LR__0546
05f48     8F 28 0E F2 | 	cmp	local06, #143 wz
05f4c     A8 02 90 AD |  if_e	jmp	#LR__0547
05f50     6D 28 0E F2 | 	cmp	local06, #109 wz
05f54     AC 02 90 AD |  if_e	jmp	#LR__0548
05f58     70 28 0E F2 | 	cmp	local06, #112 wz
05f5c     F0 02 90 AD |  if_e	jmp	#LR__0555
05f60     56 28 0E F2 | 	cmp	local06, #86 wz
05f64     A8 02 90 AD |  if_e	jmp	#LR__0549
05f68     57 28 0E F2 | 	cmp	local06, #87 wz
05f6c     E0 02 90 AD |  if_e	jmp	#LR__0555
05f70     79 28 0E F2 | 	cmp	local06, #121 wz
05f74     A4 02 90 AD |  if_e	jmp	#LR__0550
05f78     77 28 0E F2 | 	cmp	local06, #119 wz
05f7c     A8 02 90 AD |  if_e	jmp	#LR__0551
05f80     78 28 0E F2 | 	cmp	local06, #120 wz
05f84     AC 02 90 AD |  if_e	jmp	#LR__0552
05f88     01 00 00 FF 
05f8c     04 28 0E F2 | 	cmp	local06, ##516 wz
05f90     AC 02 90 AD |  if_e	jmp	#LR__0553
05f94     B0 02 90 FD | 	jmp	#LR__0554
05f98                 | LR__0494
05f98     B4 0C B0 FD | 	call	#_compile_fun_2p
05f9c     FD 26 02 F6 | 	mov	local05, result1
05fa0     AC 02 90 FD | 	jmp	#LR__0555
05fa4                 | LR__0495
05fa4     E8 0D B0 FD | 	call	#_compile_fun_4p
05fa8     FD 26 02 F6 | 	mov	local05, result1
05fac     A0 02 90 FD | 	jmp	#LR__0555
05fb0                 | LR__0496
05fb0     6C 32 B0 FD | 	call	#_expr
05fb4                 | ' expr()
05fb4                 | ' return 0
05fb4     00 26 06 F6 | 	mov	local05, #0
05fb8     94 02 90 FD | 	jmp	#LR__0555
05fbc                 | LR__0497
05fbc     04 0D B0 FD | 	call	#_compile_fun_3p
05fc0     FD 26 02 F6 | 	mov	local05, result1
05fc4     88 02 90 FD | 	jmp	#LR__0555
05fc8                 | LR__0498
05fc8     54 32 B0 FD | 	call	#_expr
05fcc                 | ' expr()
05fcc                 | ' return 0
05fcc     00 26 06 F6 | 	mov	local05, #0
05fd0     7C 02 90 FD | 	jmp	#LR__0555
05fd4                 | LR__0499
05fd4     48 32 B0 FD | 	call	#_expr
05fd8                 | ' expr()
05fd8                 | ' return 0
05fd8     00 26 06 F6 | 	mov	local05, #0
05fdc     70 02 90 FD | 	jmp	#LR__0555
05fe0                 | LR__0500
05fe0     4C 10 B0 FD | 	call	#_compile_fun_varp
05fe4     FD 2C 02 F6 | 	mov	local08, result1
05fe8     64 02 90 FD | 	jmp	#LR__0555
05fec                 | LR__0501
05fec     30 32 B0 FD | 	call	#_expr
05ff0                 | ' expr()
05ff0                 | ' return 0
05ff0     00 26 06 F6 | 	mov	local05, #0
05ff4     58 02 90 FD | 	jmp	#LR__0555
05ff8                 | LR__0502
05ff8     34 10 B0 FD | 	call	#_compile_fun_varp
05ffc     FD 2C 02 F6 | 	mov	local08, result1
06000     4C 02 90 FD | 	jmp	#LR__0555
06004                 | LR__0503
06004     28 10 B0 FD | 	call	#_compile_fun_varp
06008     FD 2C 02 F6 | 	mov	local08, result1
0600c     40 02 90 FD | 	jmp	#LR__0555
06010                 | LR__0504
06010     A0 0E B0 FD | 	call	#_compile_fun_5p
06014     FD 26 02 F6 | 	mov	local05, result1
06018     34 02 90 FD | 	jmp	#LR__0555
0601c                 | LR__0505
0601c     FC 19 B0 FD | 	call	#_compile_dim
06020     E8 02 90 FD | 	jmp	#LR__0556
06024                 | LR__0506
06024     28 0C B0 FD | 	call	#_compile_fun_2p
06028     24 02 90 FD | 	jmp	#LR__0555
0602c                 | LR__0507
0602c     20 0C B0 FD | 	call	#_compile_fun_2p
06030     FD 26 02 F6 | 	mov	local05, result1
06034     18 02 90 FD | 	jmp	#LR__0555
06038                 | LR__0508
06038     B8 18 B0 FD | 	call	#_compile_else
0603c     CC 02 90 FD | 	jmp	#LR__0556
06040                 | LR__0509
06040     01 24 16 F2 | 	cmp	local04, #1 wc
06044     08 00 90 CD |  if_b	jmp	#LR__0510
06048     E4 2D B0 FD | 	call	#_compile_goto
0604c     BC 02 90 FD | 	jmp	#LR__0556
06050                 | LR__0510
06050     19 12 06 F6 | 	mov	arg01, #25
06054     80 46 B1 FD | 	call	#_printerror
06058     B0 02 90 FD | 	jmp	#LR__0556
0605c                 | LR__0511
0605c     68 2D B0 FD | 	call	#_compile_gosub
06060     A8 02 90 FD | 	jmp	#LR__0556
06064                 | LR__0512
06064     5C 0C B0 FD | 	call	#_compile_fun_3p
06068     FD 26 02 F6 | 	mov	local05, result1
0606c     E0 01 90 FD | 	jmp	#LR__0555
06070                 | LR__0513
06070     1C 0D B0 FD | 	call	#_compile_fun_4p
06074     FD 26 02 F6 | 	mov	local05, result1
06078     D4 01 90 FD | 	jmp	#LR__0555
0607c                 | LR__0514
0607c     A0 31 B0 FD | 	call	#_expr
06080                 | ' expr()
06080                 | ' return 0
06080     00 26 06 F6 | 	mov	local05, #0
06084     C8 01 90 FD | 	jmp	#LR__0555
06088                 | LR__0515
06088     A0 20 B0 FD | 	call	#_compile_for
0608c     7C 02 90 FD | 	jmp	#LR__0556
06090                 | LR__0516
06090     FC 0C B0 FD | 	call	#_compile_fun_4p
06094     FD 26 02 F6 | 	mov	local05, result1
06098     B4 01 90 FD | 	jmp	#LR__0555
0609c                 | LR__0517
0609c     14 17 B0 FD | 	call	#_compile_if
060a0     68 02 90 FD | 	jmp	#LR__0556
060a4                 | LR__0518
060a4     78 31 B0 FD | 	call	#_expr
060a8                 | ' expr()
060a8                 | ' return 0
060a8     00 26 06 F6 | 	mov	local05, #0
060ac     A0 01 90 FD | 	jmp	#LR__0555
060b0                 | LR__0519
060b0     6C 31 B0 FD | 	call	#_expr
060b4                 | ' expr()
060b4                 | ' return 0
060b4     00 26 06 F6 | 	mov	local05, #0
060b8     94 01 90 FD | 	jmp	#LR__0555
060bc                 | LR__0520
060bc     70 0F B0 FD | 	call	#_compile_fun_varp
060c0     FD 2C 02 F6 | 	mov	local08, result1
060c4     88 01 90 FD | 	jmp	#LR__0555
060c8                 | LR__0521
060c8     64 0F B0 FD | 	call	#_compile_fun_varp
060cc     FD 2C 02 F6 | 	mov	local08, result1
060d0     7C 01 90 FD | 	jmp	#LR__0555
060d4                 | LR__0522
060d4     78 0B B0 FD | 	call	#_compile_fun_2p
060d8     FD 26 02 F6 | 	mov	local05, result1
060dc     70 01 90 FD | 	jmp	#LR__0555
060e0                 | LR__0523
060e0     3C 31 B0 FD | 	call	#_expr
060e4                 | ' expr()
060e4                 | ' return 0
060e4     00 26 06 F6 | 	mov	local05, #0
060e8     64 01 90 FD | 	jmp	#LR__0555
060ec                 | LR__0524
060ec     30 31 B0 FD | 	call	#_expr
060f0                 | ' expr()
060f0                 | ' return 0
060f0     00 26 06 F6 | 	mov	local05, #0
060f4     58 01 90 FD | 	jmp	#LR__0555
060f8                 | LR__0525
060f8     1C 2B B0 FD | 	call	#_compile_next
060fc     0C 02 90 FD | 	jmp	#LR__0556
06100                 | LR__0526
06100     1C 31 B0 FD | 	call	#_expr
06104                 | ' expr()
06104                 | ' return 0
06104     00 26 06 F6 | 	mov	local05, #0
06108     44 01 90 FD | 	jmp	#LR__0555
0610c                 | LR__0527
0610c     10 31 B0 FD | 	call	#_expr
06110                 | ' expr()
06110                 | ' return 0
06110     00 26 06 F6 | 	mov	local05, #0
06114     38 01 90 FD | 	jmp	#LR__0555
06118                 | LR__0528
06118     04 31 B0 FD | 	call	#_expr
0611c                 | ' expr()
0611c                 | ' return 0
0611c     00 26 06 F6 | 	mov	local05, #0
06120     2C 01 90 FD | 	jmp	#LR__0555
06124                 | LR__0529
06124     F8 30 B0 FD | 	call	#_expr
06128                 | ' expr()
06128                 | ' return 0
06128     00 26 06 F6 | 	mov	local05, #0
0612c     20 01 90 FD | 	jmp	#LR__0555
06130                 | LR__0530
06130     5C 0C B0 FD | 	call	#_compile_fun_4p
06134     FD 26 02 F6 | 	mov	local05, result1
06138     14 01 90 FD | 	jmp	#LR__0555
0613c                 | LR__0531
0613c     E0 30 B0 FD | 	call	#_expr
06140                 | ' expr()
06140                 | ' return 0
06140     00 26 06 F6 | 	mov	local05, #0
06144     08 01 90 FD | 	jmp	#LR__0555
06148                 | LR__0532
06148     04 0B B0 FD | 	call	#_compile_fun_2p
0614c     FD 26 02 F6 | 	mov	local05, result1
06150     FC 00 90 FD | 	jmp	#LR__0555
06154                 | LR__0533
06154     D8 0E B0 FD | 	call	#_compile_fun_varp
06158     FD 2C 02 F6 | 	mov	local08, result1
0615c     F0 00 90 FD | 	jmp	#LR__0555
06160                 | LR__0534
06160     EC 0A B0 FD | 	call	#_compile_fun_2p
06164     FD 26 02 F6 | 	mov	local05, result1
06168     E4 00 90 FD | 	jmp	#LR__0555
0616c                 | LR__0535
0616c     E0 0A B0 FD | 	call	#_compile_fun_2p
06170     FD 26 02 F6 | 	mov	local05, result1
06174     D8 00 90 FD | 	jmp	#LR__0555
06178                 | LR__0536
06178     D4 0A B0 FD | 	call	#_compile_fun_2p
0617c     FD 26 02 F6 | 	mov	local05, result1
06180     CC 00 90 FD | 	jmp	#LR__0555
06184                 | LR__0537
06184     54 0F B0 FD | 	call	#_compile_print
06188     FD 26 02 F6 | 	mov	local05, result1
0618c     7C 01 90 FD | 	jmp	#LR__0556
06190                 | LR__0538
06190     8C 30 B0 FD | 	call	#_expr
06194                 | ' expr()
06194                 | ' return 0
06194     B8 00 90 FD | 	jmp	#LR__0555
06198                 | LR__0539
06198     94 0E B0 FD | 	call	#_compile_fun_varp
0619c     FD 2C 02 F6 | 	mov	local08, result1
061a0     AC 00 90 FD | 	jmp	#LR__0555
061a4                 | LR__0540
061a4     88 0E B0 FD | 	call	#_compile_fun_varp
061a8     FD 2C 02 F6 | 	mov	local08, result1
061ac     A0 00 90 FD | 	jmp	#LR__0555
061b0                 | LR__0541
061b0     9C 0A B0 FD | 	call	#_compile_fun_2p
061b4     FD 26 02 F6 | 	mov	local05, result1
061b8     94 00 90 FD | 	jmp	#LR__0555
061bc                 | LR__0542
061bc     90 0A B0 FD | 	call	#_compile_fun_2p
061c0     FD 26 02 F6 | 	mov	local05, result1
061c4     88 00 90 FD | 	jmp	#LR__0555
061c8                 | LR__0543
061c8     84 0A B0 FD | 	call	#_compile_fun_2p
061cc     FD 26 02 F6 | 	mov	local05, result1
061d0     7C 00 90 FD | 	jmp	#LR__0555
061d4                 | LR__0544
061d4     78 0A B0 FD | 	call	#_compile_fun_2p
061d8     FD 26 02 F6 | 	mov	local05, result1
061dc     70 00 90 FD | 	jmp	#LR__0555
061e0                 | LR__0545
061e0     6C 0A B0 FD | 	call	#_compile_fun_2p
061e4     FD 26 02 F6 | 	mov	local05, result1
061e8     64 00 90 FD | 	jmp	#LR__0555
061ec                 | LR__0546
061ec     60 0A B0 FD | 	call	#_compile_fun_2p
061f0     FD 26 02 F6 | 	mov	local05, result1
061f4     58 00 90 FD | 	jmp	#LR__0555
061f8                 | LR__0547
061f8     54 0A B0 FD | 	call	#_compile_fun_2p
061fc     FD 26 02 F6 | 	mov	local05, result1
06200     4C 00 90 FD | 	jmp	#LR__0555
06204                 | LR__0548
06204     BC 0A B0 FD | 	call	#_compile_fun_3p
06208     FD 26 02 F6 | 	mov	local05, result1
0620c     40 00 90 FD | 	jmp	#LR__0555
06210                 | LR__0549
06210     0C 30 B0 FD | 	call	#_expr
06214                 | ' expr()
06214                 | ' return 0
06214     00 26 06 F6 | 	mov	local05, #0
06218     34 00 90 FD | 	jmp	#LR__0555
0621c                 | LR__0550
0621c     30 0A B0 FD | 	call	#_compile_fun_2p
06220     FD 26 02 F6 | 	mov	local05, result1
06224     28 00 90 FD | 	jmp	#LR__0555
06228                 | LR__0551
06228     24 0A B0 FD | 	call	#_compile_fun_2p
0622c     FD 26 02 F6 | 	mov	local05, result1
06230     1C 00 90 FD | 	jmp	#LR__0555
06234                 | LR__0552
06234     18 0A B0 FD | 	call	#_compile_fun_2p
06238     FD 26 02 F6 | 	mov	local05, result1
0623c     10 00 90 FD | 	jmp	#LR__0555
06240                 | LR__0553
06240     E8 01 B0 FD | 	call	#_compile_array_assign
06244     C4 00 90 FD | 	jmp	#LR__0556
06248                 | LR__0554
06248     48 09 B0 FD | 	call	#_compile_unknown
0624c     BC 00 90 FD | 	jmp	#LR__0556
06250                 | LR__0555
06250     14 23 02 F6 | 	mov	local03, local06
06254     16 1F 02 F6 | 	mov	local01, local08
06258     0F 2B 02 F6 | 	mov	local07, local01
0625c     10 2F 02 F6 | 	mov	local09, local02
06260     11 29 02 F6 | 	mov	local06, local03
06264     6A 00 00 FF 
06268     7C E4 05 F1 | 	add	objptr, ##54396
0626c     F2 1E 02 FB | 	rdlong	local01, objptr
06270     0F 2D 02 F6 | 	mov	local08, local01
06274     01 2C 66 F0 | 	shl	local08, #1
06278     0F 2D 02 F1 | 	add	local08, local01
0627c     02 2C 66 F0 | 	shl	local08, #2
06280     03 00 00 FF 
06284     00 E4 85 F1 | 	sub	objptr, ##1536
06288     F2 2C 02 F1 | 	add	local08, objptr
0628c     16 2B 62 FC | 	wrlong	local07, local08
06290     03 00 00 FF 
06294     00 E4 05 F1 | 	add	objptr, ##1536
06298     F2 1E 02 FB | 	rdlong	local01, objptr
0629c     0F 2D 02 F6 | 	mov	local08, local01
062a0     01 2C 66 F0 | 	shl	local08, #1
062a4     0F 2D 02 F1 | 	add	local08, local01
062a8     02 2C 66 F0 | 	shl	local08, #2
062ac     03 00 00 FF 
062b0     00 E4 85 F1 | 	sub	objptr, ##1536
062b4     F2 2C 02 F1 | 	add	local08, objptr
062b8     04 2C 06 F1 | 	add	local08, #4
062bc     16 2F 62 FC | 	wrlong	local09, local08
062c0     03 00 00 FF 
062c4     00 E4 05 F1 | 	add	objptr, ##1536
062c8     F2 1E 02 FB | 	rdlong	local01, objptr
062cc     0F 2D 02 F6 | 	mov	local08, local01
062d0     01 2C 66 F0 | 	shl	local08, #1
062d4     0F 2D 02 F1 | 	add	local08, local01
062d8     02 2C 66 F0 | 	shl	local08, #2
062dc     03 00 00 FF 
062e0     00 E4 85 F1 | 	sub	objptr, ##1536
062e4     F2 2C 02 F1 | 	add	local08, objptr
062e8     08 2C 06 F1 | 	add	local08, #8
062ec     16 29 62 FC | 	wrlong	local06, local08
062f0     03 00 00 FF 
062f4     00 E4 05 F1 | 	add	objptr, ##1536
062f8     F2 2A 02 FB | 	rdlong	local07, objptr
062fc     01 2A 06 F1 | 	add	local07, #1
06300     F2 2A 62 FC | 	wrlong	local07, objptr
06304     6A 00 00 FF 
06308     7C E4 85 F1 | 	sub	objptr, ##54396
0630c                 | LR__0556
0630c                 | ' 
0630c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
0630c                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
0630c     00 24 0E F2 | 	cmp	local04, #0 wz
06310     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06314     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
06318     38 00 90 5D |  if_ne	jmp	#LR__0557
0631c     6A 00 00 FF 
06320     7C E4 05 F1 | 	add	objptr, ##54396
06324     F2 2C 02 FB | 	rdlong	local08, objptr
06328     16 1F 02 F6 | 	mov	local01, local08
0632c     01 1E 66 F0 | 	shl	local01, #1
06330     16 1F 02 F1 | 	add	local01, local08
06334     02 1E 66 F0 | 	shl	local01, #2
06338     03 00 00 FF 
0633c     00 E4 85 F1 | 	sub	objptr, ##1536
06340     F2 1E 02 F1 | 	add	local01, objptr
06344     08 1E 06 F1 | 	add	local01, #8
06348     0F FD 6B FC | 	wrlong	#510, local01
0634c     67 00 00 FF 
06350     7C E4 85 F1 | 	sub	objptr, ##52860
06354                 | LR__0557
06354                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
06354     6A 00 00 FF 
06358     7C E4 05 F1 | 	add	objptr, ##54396
0635c     F2 1E 02 FB | 	rdlong	local01, objptr
06360     6A 00 00 FF 
06364     7C E4 85 F1 | 	sub	objptr, ##54396
06368     97 58 48 FB | 	callpa	#(@LR__0560-@LR__0558)>>2,fcache_load_ptr_
0636c                 | LR__0558
0636c     0F 2D 02 F6 | 	mov	local08, local01
06370     01 2C 66 F0 | 	shl	local08, #1
06374     0F 2D 02 F1 | 	add	local08, local01
06378     02 2C 66 F0 | 	shl	local08, #2
0637c     67 00 00 FF 
06380     7C E4 05 F1 | 	add	objptr, ##52860
06384     F2 2C 02 F1 | 	add	local08, objptr
06388     08 2C 06 F1 | 	add	local08, #8
0638c     16 2D 02 FB | 	rdlong	local08, local08
06390     9B 2C 0E F2 | 	cmp	local08, #155 wz
06394     67 00 00 FF 
06398     7C E4 85 F1 | 	sub	objptr, ##52860
0639c     70 00 90 5D |  if_ne	jmp	#LR__0559
063a0     0F 2D 02 F6 | 	mov	local08, local01
063a4     01 2C 86 F1 | 	sub	local08, #1
063a8     16 2F 02 F6 | 	mov	local09, local08
063ac     01 2E 66 F0 | 	shl	local09, #1
063b0     16 2F 02 F1 | 	add	local09, local08
063b4     02 2E 66 F0 | 	shl	local09, #2
063b8     67 00 00 FF 
063bc     7C E4 05 F1 | 	add	objptr, ##52860
063c0     F2 2E 02 F1 | 	add	local09, objptr
063c4     08 2E 06 F1 | 	add	local09, #8
063c8     17 2D 02 FB | 	rdlong	local08, local09
063cc     11 2C 0E F2 | 	cmp	local08, #17 wz
063d0     67 00 00 FF 
063d4     7C E4 85 F1 | 	sub	objptr, ##52860
063d8     34 00 90 5D |  if_ne	jmp	#LR__0559
063dc     0F 2F 02 F6 | 	mov	local09, local01
063e0     01 2E 86 F1 | 	sub	local09, #1
063e4     17 2D 02 F6 | 	mov	local08, local09
063e8     01 2C 66 F0 | 	shl	local08, #1
063ec     17 2D 02 F1 | 	add	local08, local09
063f0     02 2C 66 F0 | 	shl	local08, #2
063f4     67 00 00 FF 
063f8     7C E4 05 F1 | 	add	objptr, ##52860
063fc     F2 2C 02 F1 | 	add	local08, objptr
06400     08 2C 06 F1 | 	add	local08, #8
06404     16 25 68 FC | 	wrlong	#18, local08
06408     67 00 00 FF 
0640c     7C E4 85 F1 | 	sub	objptr, ##52860
06410                 | LR__0559
06410     01 1E 86 F1 | 	sub	local01, #1
06414     01 1E 56 F2 | 	cmps	local01, #1 wc
06418     50 FF 9F 3D |  if_ae	jmp	#LR__0558
0641c                 | LR__0560
0641c                 | ' '  print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
0641c                 | ' return err
0641c     13 FB 01 F6 | 	mov	result1, local05
06420     A7 F0 03 F6 | 	mov	ptra, fp
06424     B2 00 A0 FD | 	call	#popregs_
06428                 | _compile_immediate_ret
06428     2D 00 64 FD | 	ret
0642c                 | 
0642c                 | ' 
0642c                 | ' sub compile_array_assign
0642c                 | _compile_array_assign
0642c     0A 4A 05 F6 | 	mov	COUNT_, #10
06430     A8 00 A0 FD | 	call	#pushregs_
06434     00 24 06 F6 | 	mov	local04, #0
06438     57 00 00 FF 
0643c     44 E4 05 F1 | 	add	objptr, ##44612
06440     F2 26 02 FB | 	rdlong	local05, objptr
06444     13 FB 01 F6 | 	mov	result1, local05
06448     01 FA 85 F1 | 	sub	result1, #1
0644c     03 FA 65 F0 | 	shl	result1, #3
06450     02 00 00 FF 
06454     38 E4 85 F1 | 	sub	objptr, ##1080
06458     F2 FA 01 F1 | 	add	result1, objptr
0645c     FD 28 02 FB | 	rdlong	local06, result1
06460                 | ' numpar=0
06460                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
06460                 | ' ' todo here: recognize params and t1.result.twowords=numpar
06460                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
06460                 | ' if lparts(ct).token=token_lpar then
06460     03 26 66 F0 | 	shl	local05, #3
06464     F2 26 02 F1 | 	add	local05, objptr
06468     04 26 06 F1 | 	add	local05, #4
0646c     13 27 02 FB | 	rdlong	local05, local05
06470     15 26 0E F2 | 	cmp	local05, #21 wz
06474     55 00 00 FF 
06478     0C E4 85 F1 | 	sub	objptr, ##43532
0647c     D4 01 90 5D |  if_ne	jmp	#LR__0574
06480     57 00 00 FF 
06484     44 E4 05 F1 | 	add	objptr, ##44612
06488     F2 2A 02 FB | 	rdlong	local07, objptr
0648c     01 2A 06 F1 | 	add	local07, #1
06490     F2 2A 62 FC | 	wrlong	local07, objptr
06494     57 00 00 FF 
06498     44 E4 85 F1 | 	sub	objptr, ##44612
0649c                 | '   ct+=1 											' omit this lpar, this is for expr list
0649c                 | '   do
0649c                 | LR__0570
0649c     80 2D B0 FD | 	call	#_expr
064a0     57 00 00 FF 
064a4     44 E4 05 F1 | 	add	objptr, ##44612
064a8     F2 26 02 FB | 	rdlong	local05, objptr
064ac     01 26 06 F1 | 	add	local05, #1
064b0     F2 26 62 FC | 	wrlong	local05, objptr
064b4     01 24 06 F1 | 	add	local04, #1
064b8     01 26 86 F1 | 	sub	local05, #1
064bc     03 26 66 F0 | 	shl	local05, #3
064c0     02 00 00 FF 
064c4     38 E4 85 F1 | 	sub	objptr, ##1080
064c8     F2 26 02 F1 | 	add	local05, objptr
064cc     04 26 06 F1 | 	add	local05, #4
064d0     13 2B 02 FB | 	rdlong	local07, local05
064d4     14 2A 0E F2 | 	cmp	local07, #20 wz
064d8     55 00 00 FF 
064dc     0C E4 85 F1 | 	sub	objptr, ##43532
064e0     34 00 90 AD |  if_e	jmp	#LR__0571
064e4     57 00 00 FF 
064e8     44 E4 05 F1 | 	add	objptr, ##44612
064ec     F2 2A 02 FB | 	rdlong	local07, objptr
064f0     03 2A 66 F0 | 	shl	local07, #3
064f4     02 00 00 FF 
064f8     38 E4 85 F1 | 	sub	objptr, ##1080
064fc     F2 2A 02 F1 | 	add	local07, objptr
06500     04 2A 06 F1 | 	add	local07, #4
06504     15 2B 02 FB | 	rdlong	local07, local07
06508     FE 2B 0E F2 | 	cmp	local07, #510 wz
0650c     55 00 00 FF 
06510     0C E4 85 F1 | 	sub	objptr, ##43532
06514     84 FF 9F 5D |  if_ne	jmp	#LR__0570
06518                 | LR__0571
06518     57 00 00 FF 
0651c     44 E4 05 F1 | 	add	objptr, ##44612
06520     F2 2A 02 FB | 	rdlong	local07, objptr
06524     01 2A 06 F1 | 	add	local07, #1
06528     F2 2A 62 FC | 	wrlong	local07, objptr
0652c     57 00 00 FF 
06530     44 E4 85 F1 | 	sub	objptr, ##44612
06534     E8 2C B0 FD | 	call	#_expr
06538     01 2C 66 F6 | 	neg	local08, #1
0653c     00 2E 06 F6 | 	mov	local09, #0
06540                 | ' '   print "in array_assign, rpar found, numpar=",numpar
06540                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
06540                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
06540                 | ' ct+=1 : expr()
06540                 | ' ' now find the vae
06540                 | ' 
06540                 | ' j=-1 : i=0 : do : 
06540                 | LR__0572
06540                 | '   if variables(i).name=varname$ then j=i: exit loop
06540     17 27 02 F6 | 	mov	local05, local09
06544     04 26 66 F0 | 	shl	local05, #4
06548     34 00 00 FF 
0654c     F8 E5 05 F1 | 	add	objptr, ##27128
06550     F2 26 02 F1 | 	add	local05, objptr
06554     13 13 02 FB | 	rdlong	arg01, local05
06558     14 15 02 F6 | 	mov	arg02, local06
0655c     34 00 00 FF 
06560     F8 E5 85 F1 | 	sub	objptr, ##27128
06564     F8 85 B1 FD | 	call	#__system___string_cmp
06568     00 FA 0D F2 | 	cmp	result1, #0 wz
0656c     17 2D 02 A6 |  if_e	mov	local08, local09
06570     20 00 90 AD |  if_e	jmp	#LR__0573
06574     01 2E 06 F1 | 	add	local09, #1
06578     55 00 00 FF 
0657c     08 E4 05 F1 | 	add	objptr, ##43528
06580     F2 2A 02 FB | 	rdlong	local07, objptr
06584     55 00 00 FF 
06588     08 E4 85 F1 | 	sub	objptr, ##43528
0658c     15 2F 5A F2 | 	cmps	local09, local07 wcz
06590     AC FF 9F ED |  if_be	jmp	#LR__0572
06594                 | LR__0573
06594     16 1F 02 F6 | 	mov	local01, local08
06598     12 21 02 F6 | 	mov	local02, local04
0659c     17 22 06 F6 | 	mov	local03, #23
065a0     0F 2B 02 F6 | 	mov	local07, local01
065a4     10 31 02 F6 | 	mov	local10, local02
065a8     11 2D 02 F6 | 	mov	local08, local03
065ac     6A 00 00 FF 
065b0     7C E4 05 F1 | 	add	objptr, ##54396
065b4     F2 1E 02 FB | 	rdlong	local01, objptr
065b8     0F 2F 02 F6 | 	mov	local09, local01
065bc     01 2E 66 F0 | 	shl	local09, #1
065c0     0F 2F 02 F1 | 	add	local09, local01
065c4     02 2E 66 F0 | 	shl	local09, #2
065c8     03 00 00 FF 
065cc     00 E4 85 F1 | 	sub	objptr, ##1536
065d0     F2 2E 02 F1 | 	add	local09, objptr
065d4     17 2B 62 FC | 	wrlong	local07, local09
065d8     03 00 00 FF 
065dc     00 E4 05 F1 | 	add	objptr, ##1536
065e0     F2 1E 02 FB | 	rdlong	local01, objptr
065e4     0F 2F 02 F6 | 	mov	local09, local01
065e8     01 2E 66 F0 | 	shl	local09, #1
065ec     0F 2F 02 F1 | 	add	local09, local01
065f0     02 2E 66 F0 | 	shl	local09, #2
065f4     03 00 00 FF 
065f8     00 E4 85 F1 | 	sub	objptr, ##1536
065fc     F2 2E 02 F1 | 	add	local09, objptr
06600     04 2E 06 F1 | 	add	local09, #4
06604     17 31 62 FC | 	wrlong	local10, local09
06608     03 00 00 FF 
0660c     00 E4 05 F1 | 	add	objptr, ##1536
06610     F2 30 02 FB | 	rdlong	local10, objptr
06614     18 1F 02 F6 | 	mov	local01, local10
06618     01 1E 66 F0 | 	shl	local01, #1
0661c     18 1F 02 F1 | 	add	local01, local10
06620     02 1E 66 F0 | 	shl	local01, #2
06624     03 00 00 FF 
06628     00 E4 85 F1 | 	sub	objptr, ##1536
0662c     F2 1E 02 F1 | 	add	local01, objptr
06630     08 1E 06 F1 | 	add	local01, #8
06634     0F 2D 62 FC | 	wrlong	local08, local01
06638     03 00 00 FF 
0663c     00 E4 05 F1 | 	add	objptr, ##1536
06640     F2 2A 02 FB | 	rdlong	local07, objptr
06644     01 2A 06 F1 | 	add	local07, #1
06648     F2 2A 62 FC | 	wrlong	local07, objptr
0664c     6A 00 00 FF 
06650     7C E4 85 F1 | 	sub	objptr, ##54396
06654                 | LR__0574
06654     A7 F0 03 F6 | 	mov	ptra, fp
06658     B2 00 A0 FD | 	call	#popregs_
0665c                 | _compile_array_assign_ret
0665c     2D 00 64 FD | 	ret
06660                 | 
06660                 | ' 
06660                 | ' 
06660                 | ' sub compile_immediate_assign(linetype as ulong)
06660                 | _compile_immediate_assign
06660     09 4A 05 F6 | 	mov	COUNT_, #9
06664     A8 00 A0 FD | 	call	#pushregs_
06668     09 25 0A F6 | 	mov	local04, arg01 wz
0666c     FF 22 06 F6 | 	mov	local03, #255
06670     01 26 66 F6 | 	neg	local05, #1
06674                 | ' 
06674                 | ' t1.result_type=result_error : t1.result.uresult=0
06674                 | ' i=-1: j=-1
06674                 | ' 
06674                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
06674     2C 00 90 5D |  if_ne	jmp	#LR__0580
06678     55 00 00 FF 
0667c     0C E4 05 F1 | 	add	objptr, ##43532
06680     F2 28 02 FB | 	rdlong	local06, objptr
06684     02 00 00 FF 
06688     38 E4 05 F1 | 	add	objptr, ##1080
0668c     F2 04 68 FC | 	wrlong	#2, objptr
06690     13 00 00 FF 
06694     38 E4 05 F1 | 	add	objptr, ##9784
06698     F2 00 68 FC | 	wrlong	#0, objptr
0669c     6A 00 00 FF 
066a0     7C E4 85 F1 | 	sub	objptr, ##54396
066a4                 | LR__0580
066a4                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
066a4     02 24 0E F2 | 	cmp	local04, #2 wz
066a8     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
066ac     55 00 00 AF 
066b0     0C E4 05 A1 |  if_e	add	objptr, ##43532
066b4     F2 28 02 AB |  if_e	rdlong	local06, objptr
066b8     02 00 00 AF 
066bc     38 E4 05 A1 |  if_e	add	objptr, ##1080
066c0     F2 04 68 AC |  if_e	wrlong	#2, objptr
066c4     57 00 00 AF 
066c8     44 E4 85 A1 |  if_e	sub	objptr, ##44612
066cc                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
066cc     04 24 0E F2 | 	cmp	local04, #4 wz
066d0     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
066d4     2C 00 90 5D |  if_ne	jmp	#LR__0581
066d8     55 00 00 FF 
066dc     14 E4 05 F1 | 	add	objptr, ##43540
066e0     F2 28 02 FB | 	rdlong	local06, objptr
066e4     02 00 00 FF 
066e8     30 E4 05 F1 | 	add	objptr, ##1072
066ec     F2 06 68 FC | 	wrlong	#3, objptr
066f0     13 00 00 FF 
066f4     38 E4 05 F1 | 	add	objptr, ##9784
066f8     F2 04 68 FC | 	wrlong	#2, objptr
066fc     6A 00 00 FF 
06700     7C E4 85 F1 | 	sub	objptr, ##54396
06704                 | LR__0581
06704                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
06704     05 24 0E F2 | 	cmp	local04, #5 wz
06708     3C 00 90 5D |  if_ne	jmp	#LR__0582
0670c     57 00 00 FF 
06710     44 E4 05 F1 | 	add	objptr, ##44612
06714     F2 FA 01 FB | 	rdlong	result1, objptr
06718     FD 28 02 F6 | 	mov	local06, result1
0671c     03 28 66 F0 | 	shl	local06, #3
06720     02 00 00 FF 
06724     38 E4 85 F1 | 	sub	objptr, ##1080
06728     F2 28 02 F1 | 	add	local06, objptr
0672c     14 29 02 FB | 	rdlong	local06, local06
06730     02 FA 05 F1 | 	add	result1, #2
06734     02 00 00 FF 
06738     38 E4 05 F1 | 	add	objptr, ##1080
0673c     F2 FA 61 FC | 	wrlong	result1, objptr
06740     57 00 00 FF 
06744     44 E4 85 F1 | 	sub	objptr, ##44612
06748                 | LR__0582
06748     14 13 02 F6 | 	mov	arg01, local06
0674c     01 14 06 F6 | 	mov	arg02, #1
06750     B4 A4 B1 FD | 	call	#__system__Right_S
06754     C8 2A B0 FD | 	call	#_expr
06758                 | '  
06758                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
06758                 | ' 
06758                 | ' suffix2$=right$(varname2$,1)
06758                 | ' expr()
06758                 | ' 
06758                 | ' 
06758                 | ' if varnum>0 then
06758     55 00 00 FF 
0675c     08 E4 05 F1 | 	add	objptr, ##43528
06760     F2 2A 02 FB | 	rdlong	local07, objptr
06764     55 00 00 FF 
06768     08 E4 85 F1 | 	sub	objptr, ##43528
0676c     01 2A 56 F2 | 	cmps	local07, #1 wc
06770     58 00 90 CD |  if_b	jmp	#LR__0585
06774                 | '   for i=0 to varnum-1
06774     00 2C 06 F6 | 	mov	local08, #0
06778     55 00 00 FF 
0677c     08 E4 05 F1 | 	add	objptr, ##43528
06780     F2 2E 02 FB | 	rdlong	local09, objptr
06784     55 00 00 FF 
06788     08 E4 85 F1 | 	sub	objptr, ##43528
0678c                 | LR__0583
0678c     17 2D 52 F2 | 	cmps	local08, local09 wc
06790     38 00 90 3D |  if_ae	jmp	#LR__0584
06794                 | '     if variables(i).name=varname2$ then j=i : exit
06794     16 2B 02 F6 | 	mov	local07, local08
06798     04 2A 66 F0 | 	shl	local07, #4
0679c     34 00 00 FF 
067a0     F8 E5 05 F1 | 	add	objptr, ##27128
067a4     F2 2A 02 F1 | 	add	local07, objptr
067a8     15 13 02 FB | 	rdlong	arg01, local07
067ac     14 15 02 F6 | 	mov	arg02, local06
067b0     34 00 00 FF 
067b4     F8 E5 85 F1 | 	sub	objptr, ##27128
067b8     A4 83 B1 FD | 	call	#__system___string_cmp
067bc     00 FA 0D F2 | 	cmp	result1, #0 wz
067c0     16 27 02 A6 |  if_e	mov	local05, local08
067c4     01 2C 06 51 |  if_ne	add	local08, #1
067c8     C0 FF 9F 5D |  if_ne	jmp	#LR__0583
067cc                 | LR__0584
067cc                 | LR__0585
067cc                 | ' if  j=-1 andalso varnum<maxvars then   
067cc     FF FF 7F FF 
067d0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
067d4     60 00 90 5D |  if_ne	jmp	#LR__0586
067d8     55 00 00 FF 
067dc     08 E4 05 F1 | 	add	objptr, ##43528
067e0     F2 2A 02 FB | 	rdlong	local07, objptr
067e4     55 00 00 FF 
067e8     08 E4 85 F1 | 	sub	objptr, ##43528
067ec     02 00 00 FF 
067f0     00 2A 56 F2 | 	cmps	local07, ##1024 wc
067f4     40 00 90 3D |  if_ae	jmp	#LR__0586
067f8     55 00 00 FF 
067fc     08 E4 05 F1 | 	add	objptr, ##43528
06800     F2 2E 02 FB | 	rdlong	local09, objptr
06804     04 2E 66 F0 | 	shl	local09, #4
06808     20 00 00 FF 
0680c     10 E4 85 F1 | 	sub	objptr, ##16400
06810     F2 2E 02 F1 | 	add	local09, objptr
06814     17 29 62 FC | 	wrlong	local06, local09
06818     20 00 00 FF 
0681c     10 E4 05 F1 | 	add	objptr, ##16400
06820     F2 2A 02 FB | 	rdlong	local07, objptr
06824     15 27 02 F6 | 	mov	local05, local07
06828     01 2A 06 F1 | 	add	local07, #1
0682c     F2 2A 62 FC | 	wrlong	local07, objptr
06830     55 00 00 FF 
06834     08 E4 85 F1 | 	sub	objptr, ##43528
06838                 | LR__0586
06838     13 1F 02 F6 | 	mov	local01, local05
0683c     17 22 06 F6 | 	mov	local03, #23
06840     0F 2B 02 F6 | 	mov	local07, local01
06844     10 2F 02 F6 | 	mov	local09, local02
06848     11 1F 02 F6 | 	mov	local01, local03
0684c     6A 00 00 FF 
06850     7C E4 05 F1 | 	add	objptr, ##54396
06854     F2 2C 02 FB | 	rdlong	local08, objptr
06858     16 29 02 F6 | 	mov	local06, local08
0685c     01 28 66 F0 | 	shl	local06, #1
06860     16 29 02 F1 | 	add	local06, local08
06864     02 28 66 F0 | 	shl	local06, #2
06868     03 00 00 FF 
0686c     00 E4 85 F1 | 	sub	objptr, ##1536
06870     F2 28 02 F1 | 	add	local06, objptr
06874     14 2B 62 FC | 	wrlong	local07, local06
06878     03 00 00 FF 
0687c     00 E4 05 F1 | 	add	objptr, ##1536
06880     F2 2C 02 FB | 	rdlong	local08, objptr
06884     16 2B 02 F6 | 	mov	local07, local08
06888     01 2A 66 F0 | 	shl	local07, #1
0688c     16 2B 02 F1 | 	add	local07, local08
06890     02 2A 66 F0 | 	shl	local07, #2
06894     03 00 00 FF 
06898     00 E4 85 F1 | 	sub	objptr, ##1536
0689c     F2 2A 02 F1 | 	add	local07, objptr
068a0     04 2A 06 F1 | 	add	local07, #4
068a4     15 2F 62 FC | 	wrlong	local09, local07
068a8     03 00 00 FF 
068ac     00 E4 05 F1 | 	add	objptr, ##1536
068b0     F2 2E 02 FB | 	rdlong	local09, objptr
068b4     17 2D 02 F6 | 	mov	local08, local09
068b8     01 2C 66 F0 | 	shl	local08, #1
068bc     17 2D 02 F1 | 	add	local08, local09
068c0     02 2C 66 F0 | 	shl	local08, #2
068c4     03 00 00 FF 
068c8     00 E4 85 F1 | 	sub	objptr, ##1536
068cc     F2 2C 02 F1 | 	add	local08, objptr
068d0     08 2C 06 F1 | 	add	local08, #8
068d4     16 1F 62 FC | 	wrlong	local01, local08
068d8     03 00 00 FF 
068dc     00 E4 05 F1 | 	add	objptr, ##1536
068e0     F2 2A 02 FB | 	rdlong	local07, objptr
068e4     01 2A 06 F1 | 	add	local07, #1
068e8     F2 2A 62 FC | 	wrlong	local07, objptr
068ec     6A 00 00 FF 
068f0     7C E4 85 F1 | 	sub	objptr, ##54396
068f4                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
068f4                 | ' 
068f4                 | ' 
068f4                 | ' 
068f4                 | ' 
068f4                 | ' 
068f4                 | ' 
068f4                 | ' compiledline(lineptr)=t1:  lineptr+=1 
068f4                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
068f4     00 24 0E F2 | 	cmp	local04, #0 wz
068f8     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
068fc     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
06900     38 00 90 5D |  if_ne	jmp	#LR__0587
06904     6A 00 00 FF 
06908     7C E4 05 F1 | 	add	objptr, ##54396
0690c     F2 1E 02 FB | 	rdlong	local01, objptr
06910     0F 2F 02 F6 | 	mov	local09, local01
06914     01 2E 66 F0 | 	shl	local09, #1
06918     0F 2F 02 F1 | 	add	local09, local01
0691c     02 2E 66 F0 | 	shl	local09, #2
06920     03 00 00 FF 
06924     00 E4 85 F1 | 	sub	objptr, ##1536
06928     F2 2E 02 F1 | 	add	local09, objptr
0692c     08 2E 06 F1 | 	add	local09, #8
06930     17 FD 6B FC | 	wrlong	#510, local09
06934     67 00 00 FF 
06938     7C E4 85 F1 | 	sub	objptr, ##52860
0693c                 | LR__0587
0693c     A7 F0 03 F6 | 	mov	ptra, fp
06940     B2 00 A0 FD | 	call	#popregs_
06944                 | _compile_immediate_assign_ret
06944     2D 00 64 FD | 	ret
06948                 | 
06948                 | ' 
06948                 | ' ' ------------------ compile the line that is calling a command 
06948                 | ' 
06948                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
06948                 | _compile
06948     04 4A 05 F6 | 	mov	COUNT_, #4
0694c     A8 00 A0 FD | 	call	#pushregs_
06950     09 1F 0A F6 | 	mov	local01, arg01 wz
06954     0A 21 02 F6 | 	mov	local02, arg02
06958     0B 23 02 F6 | 	mov	local03, arg03
0695c                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
0695c                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
0695c                 | '  
0695c                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
0695c                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
0695c     0C 00 90 5D |  if_ne	jmp	#LR__0590
06960     00 12 06 F6 | 	mov	arg01, #0
06964     FC F2 BF FD | 	call	#_compile_immediate
06968     A0 00 90 FD | 	jmp	#LR__0597
0696c                 | LR__0590
0696c     67 00 00 FF 
06970     7C E4 05 F1 | 	add	objptr, ##52860
06974     F2 1E 62 FC | 	wrlong	local01, objptr
06978     04 E4 05 F1 | 	add	objptr, #4
0697c     F2 20 62 FC | 	wrlong	local02, objptr
06980     67 00 00 FF 
06984     80 E4 85 F1 | 	sub	objptr, ##52864
06988     11 13 02 F6 | 	mov	arg01, local03
0698c     01 12 06 F1 | 	add	arg01, #1
06990     D0 F2 BF FD | 	call	#_compile_immediate
06994     FD 24 0A F6 | 	mov	local04, result1 wz
06998                 | ' 
06998                 | ' ucompiledline(0)=alinemajor
06998                 | ' ucompiledline(1)=alineminor
06998                 | ' 
06998                 | ' 
06998                 | ' ' cont: 0: this is the first part of the line that will continue
06998                 | ' ' 1 - this is the continuation of the line
06998                 | ' ' 2 - this is the last continued line
06998                 | ' ' 3 - this is the ome and only part
06998                 | ' 
06998                 | ' err=compile_immediate(cont+1) 
06998                 | ' if err=0 then
06998     6C 00 90 5D |  if_ne	jmp	#LR__0596
0699c                 | '   if cont=3 orelse cont=2 then 
0699c     03 22 0E F2 | 	cmp	local03, #3 wz
069a0     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
069a4     60 00 90 5D |  if_ne	jmp	#LR__0595
069a8                 | '     if alinemajor >lastline then 
069a8     6A 00 00 FF 
069ac     88 E4 05 F1 | 	add	objptr, ##54408
069b0     F2 16 02 FB | 	rdlong	arg03, objptr
069b4     6A 00 00 FF 
069b8     88 E4 85 F1 | 	sub	objptr, ##54408
069bc     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
069c0     0C 00 90 ED |  if_be	jmp	#LR__0591
069c4     0F 13 02 F6 | 	mov	arg01, local01
069c8     D8 F1 BF FD | 	call	#_add_line_at_end
069cc     38 00 90 FD | 	jmp	#LR__0594
069d0                 | LR__0591
069d0     0F 13 02 F6 | 	mov	arg01, local01
069d4     08 EB BF FD | 	call	#_deleteline
069d8                 | '       deleteline(alinemajor)  
069d8                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
069d8     6A 00 00 FF 
069dc     88 E4 05 F1 | 	add	objptr, ##54408
069e0     F2 16 02 FB | 	rdlong	arg03, objptr
069e4     6A 00 00 FF 
069e8     88 E4 85 F1 | 	sub	objptr, ##54408
069ec     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
069f0     0C 00 90 ED |  if_be	jmp	#LR__0592
069f4     0F 13 02 F6 | 	mov	arg01, local01
069f8     A8 F1 BF FD | 	call	#_add_line_at_end
069fc     08 00 90 FD | 	jmp	#LR__0593
06a00                 | LR__0592
06a00     0F 13 02 F6 | 	mov	arg01, local01
06a04     80 EF BF FD | 	call	#_insertline
06a08                 | LR__0593
06a08                 | LR__0594
06a08                 | LR__0595
06a08                 | LR__0596
06a08                 | ' return err
06a08     12 FB 01 F6 | 	mov	result1, local04
06a0c                 | LR__0597
06a0c     A7 F0 03 F6 | 	mov	ptra, fp
06a10     B2 00 A0 FD | 	call	#popregs_
06a14                 | _compile_ret
06a14     2D 00 64 FD | 	ret
06a18                 | 
06a18                 | ' 
06a18                 | ' ' ------------------ compile the line that is assigning to a variable
06a18                 | ' 
06a18                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
06a18                 | _compile_assign
06a18     03 4A 05 F6 | 	mov	COUNT_, #3
06a1c     A8 00 A0 FD | 	call	#pushregs_
06a20     09 1F 0A F6 | 	mov	local01, arg01 wz
06a24     0A 21 02 F6 | 	mov	local02, arg02
06a28     0B 23 02 F6 | 	mov	local03, arg03
06a2c                 | ' 
06a2c                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
06a2c                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
06a2c     0C 00 90 5D |  if_ne	jmp	#LR__0600
06a30     00 12 06 F6 | 	mov	arg01, #0
06a34     28 FC BF FD | 	call	#_compile_immediate_assign
06a38     94 00 90 FD | 	jmp	#LR__0606
06a3c                 | LR__0600
06a3c     67 00 00 FF 
06a40     7C E4 05 F1 | 	add	objptr, ##52860
06a44     F2 1E 62 FC | 	wrlong	local01, objptr
06a48     04 E4 05 F1 | 	add	objptr, #4
06a4c     F2 20 62 FC | 	wrlong	local02, objptr
06a50     67 00 00 FF 
06a54     80 E4 85 F1 | 	sub	objptr, ##52864
06a58     11 13 02 F6 | 	mov	arg01, local03
06a5c     01 12 06 F1 | 	add	arg01, #1
06a60     FC FB BF FD | 	call	#_compile_immediate_assign
06a64                 | ' 
06a64                 | ' ucompiledline(0)=alinemajor
06a64                 | ' ucompiledline(1)=alineminor
06a64                 | ' 
06a64                 | ' compile_immediate_assign(cont+1) 
06a64                 | ' 
06a64                 | ' if cont=3 orelse cont=2 then 
06a64     03 22 0E F2 | 	cmp	local03, #3 wz
06a68     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06a6c     60 00 90 5D |  if_ne	jmp	#LR__0605
06a70                 | '   if alinemajor >lastline then 
06a70     6A 00 00 FF 
06a74     88 E4 05 F1 | 	add	objptr, ##54408
06a78     F2 16 02 FB | 	rdlong	arg03, objptr
06a7c     6A 00 00 FF 
06a80     88 E4 85 F1 | 	sub	objptr, ##54408
06a84     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06a88     0C 00 90 ED |  if_be	jmp	#LR__0601
06a8c     0F 13 02 F6 | 	mov	arg01, local01
06a90     10 F1 BF FD | 	call	#_add_line_at_end
06a94     38 00 90 FD | 	jmp	#LR__0604
06a98                 | LR__0601
06a98     0F 13 02 F6 | 	mov	arg01, local01
06a9c     40 EA BF FD | 	call	#_deleteline
06aa0                 | '     deleteline(alinemajor)  
06aa0                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
06aa0     6A 00 00 FF 
06aa4     88 E4 05 F1 | 	add	objptr, ##54408
06aa8     F2 16 02 FB | 	rdlong	arg03, objptr
06aac     6A 00 00 FF 
06ab0     88 E4 85 F1 | 	sub	objptr, ##54408
06ab4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06ab8     0C 00 90 ED |  if_be	jmp	#LR__0602
06abc     0F 13 02 F6 | 	mov	arg01, local01
06ac0     E0 F0 BF FD | 	call	#_add_line_at_end
06ac4     08 00 90 FD | 	jmp	#LR__0603
06ac8                 | LR__0602
06ac8     0F 13 02 F6 | 	mov	arg01, local01
06acc     B8 EE BF FD | 	call	#_insertline
06ad0                 | LR__0603
06ad0                 | LR__0604
06ad0                 | LR__0605
06ad0                 | LR__0606
06ad0     A7 F0 03 F6 | 	mov	ptra, fp
06ad4     B2 00 A0 FD | 	call	#popregs_
06ad8                 | _compile_assign_ret
06ad8     2D 00 64 FD | 	ret
06adc                 | 
06adc                 | ' 
06adc                 | ' sub compile_error(errno)
06adc                 | _compile_error
06adc     FF 04 06 F6 | 	mov	_var03, #255
06ae0     01 07 02 F6 | 	mov	_var04, _var02
06ae4     02 09 02 F6 | 	mov	_var05, _var03
06ae8     6A 00 00 FF 
06aec     7C E4 05 F1 | 	add	objptr, ##54396
06af0     F2 0A 02 FB | 	rdlong	_var06, objptr
06af4     05 0D 02 F6 | 	mov	_var07, _var06
06af8     01 0C 66 F0 | 	shl	_var07, #1
06afc     05 0D 02 F1 | 	add	_var07, _var06
06b00     02 0C 66 F0 | 	shl	_var07, #2
06b04     03 00 00 FF 
06b08     00 E4 85 F1 | 	sub	objptr, ##1536
06b0c     F2 0C 02 F1 | 	add	_var07, objptr
06b10     06 13 62 FC | 	wrlong	arg01, _var07
06b14     03 00 00 FF 
06b18     00 E4 05 F1 | 	add	objptr, ##1536
06b1c     F2 0C 02 FB | 	rdlong	_var07, objptr
06b20     06 0B 02 F6 | 	mov	_var06, _var07
06b24     01 0A 66 F0 | 	shl	_var06, #1
06b28     06 0B 02 F1 | 	add	_var06, _var07
06b2c     02 0A 66 F0 | 	shl	_var06, #2
06b30     03 00 00 FF 
06b34     00 E4 85 F1 | 	sub	objptr, ##1536
06b38     F2 0A 02 F1 | 	add	_var06, objptr
06b3c     04 0A 06 F1 | 	add	_var06, #4
06b40     05 07 62 FC | 	wrlong	_var04, _var06
06b44     03 00 00 FF 
06b48     00 E4 05 F1 | 	add	objptr, ##1536
06b4c     F2 0C 02 FB | 	rdlong	_var07, objptr
06b50     06 0B 02 F6 | 	mov	_var06, _var07
06b54     01 0A 66 F0 | 	shl	_var06, #1
06b58     06 0B 02 F1 | 	add	_var06, _var07
06b5c     02 0A 66 F0 | 	shl	_var06, #2
06b60     03 00 00 FF 
06b64     00 E4 85 F1 | 	sub	objptr, ##1536
06b68     F2 0A 02 F1 | 	add	_var06, objptr
06b6c     08 0A 06 F1 | 	add	_var06, #8
06b70     05 09 62 FC | 	wrlong	_var05, _var06
06b74     03 00 00 FF 
06b78     00 E4 05 F1 | 	add	objptr, ##1536
06b7c     F2 12 02 FB | 	rdlong	arg01, objptr
06b80     01 12 06 F1 | 	add	arg01, #1
06b84     F2 12 62 FC | 	wrlong	arg01, objptr
06b88     6A 00 00 FF 
06b8c     7C E4 85 F1 | 	sub	objptr, ##54396
06b90                 | _compile_error_ret
06b90     2D 00 64 FD | 	ret
06b94                 | 
06b94                 | ' 
06b94                 | ' sub compile_unknown() 
06b94                 | _compile_unknown
06b94     FF 04 06 F6 | 	mov	_var03, #255
06b98     17 00 06 F6 | 	mov	_var01, #23
06b9c     01 07 02 F6 | 	mov	_var04, _var02
06ba0     02 01 02 F6 | 	mov	_var01, _var03
06ba4     6A 00 00 FF 
06ba8     7C E4 05 F1 | 	add	objptr, ##54396
06bac     F2 08 02 FB | 	rdlong	_var05, objptr
06bb0     04 0B 02 F6 | 	mov	_var06, _var05
06bb4     01 0A 66 F0 | 	shl	_var06, #1
06bb8     04 0B 02 F1 | 	add	_var06, _var05
06bbc     02 0A 66 F0 | 	shl	_var06, #2
06bc0     03 00 00 FF 
06bc4     00 E4 85 F1 | 	sub	objptr, ##1536
06bc8     F2 0A 02 F1 | 	add	_var06, objptr
06bcc     05 2F 68 FC | 	wrlong	#23, _var06
06bd0     03 00 00 FF 
06bd4     00 E4 05 F1 | 	add	objptr, ##1536
06bd8     F2 0A 02 FB | 	rdlong	_var06, objptr
06bdc     05 09 02 F6 | 	mov	_var05, _var06
06be0     01 08 66 F0 | 	shl	_var05, #1
06be4     05 09 02 F1 | 	add	_var05, _var06
06be8     02 08 66 F0 | 	shl	_var05, #2
06bec     03 00 00 FF 
06bf0     00 E4 85 F1 | 	sub	objptr, ##1536
06bf4     F2 08 02 F1 | 	add	_var05, objptr
06bf8     04 08 06 F1 | 	add	_var05, #4
06bfc     04 07 62 FC | 	wrlong	_var04, _var05
06c00     03 00 00 FF 
06c04     00 E4 05 F1 | 	add	objptr, ##1536
06c08     F2 0A 02 FB | 	rdlong	_var06, objptr
06c0c     05 09 02 F6 | 	mov	_var05, _var06
06c10     01 08 66 F0 | 	shl	_var05, #1
06c14     05 09 02 F1 | 	add	_var05, _var06
06c18     02 08 66 F0 | 	shl	_var05, #2
06c1c     03 00 00 FF 
06c20     00 E4 85 F1 | 	sub	objptr, ##1536
06c24     F2 08 02 F1 | 	add	_var05, objptr
06c28     08 08 06 F1 | 	add	_var05, #8
06c2c     04 01 62 FC | 	wrlong	_var01, _var05
06c30     03 00 00 FF 
06c34     00 E4 05 F1 | 	add	objptr, ##1536
06c38     F2 0A 02 FB | 	rdlong	_var06, objptr
06c3c     01 0A 06 F1 | 	add	_var06, #1
06c40     F2 0A 62 FC | 	wrlong	_var06, objptr
06c44     6A 00 00 FF 
06c48     7C E4 85 F1 | 	sub	objptr, ##54396
06c4c                 | _compile_unknown_ret
06c4c     2D 00 64 FD | 	ret
06c50                 | 
06c50                 | ' 
06c50                 | ' function compile_fun_2p() as ulong
06c50                 | _compile_fun_2p
06c50     01 4A 05 F6 | 	mov	COUNT_, #1
06c54     A8 00 A0 FD | 	call	#pushregs_
06c58     C4 25 B0 FD | 	call	#_expr
06c5c                 | ' 
06c5c                 | ' expr()
06c5c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c5c     57 00 00 FF 
06c60     44 E4 05 F1 | 	add	objptr, ##44612
06c64     F2 1E 02 FB | 	rdlong	local01, objptr
06c68     03 1E 66 F0 | 	shl	local01, #3
06c6c     02 00 00 FF 
06c70     38 E4 85 F1 | 	sub	objptr, ##1080
06c74     F2 1E 02 F1 | 	add	local01, objptr
06c78     04 1E 06 F1 | 	add	local01, #4
06c7c     0F 1F 02 FB | 	rdlong	local01, local01
06c80     11 1E 0E F2 | 	cmp	local01, #17 wz
06c84     55 00 00 FF 
06c88     0C E4 85 F1 | 	sub	objptr, ##43532
06c8c     15 FA 05 56 |  if_ne	mov	result1, #21
06c90     24 00 90 5D |  if_ne	jmp	#LR__0610
06c94     57 00 00 FF 
06c98     44 E4 05 F1 | 	add	objptr, ##44612
06c9c     F2 1E 02 FB | 	rdlong	local01, objptr
06ca0     01 1E 06 F1 | 	add	local01, #1
06ca4     F2 1E 62 FC | 	wrlong	local01, objptr
06ca8     57 00 00 FF 
06cac     44 E4 85 F1 | 	sub	objptr, ##44612
06cb0     6C 25 B0 FD | 	call	#_expr
06cb4     00 FA 05 F6 | 	mov	result1, #0
06cb8                 | LR__0610
06cb8     A7 F0 03 F6 | 	mov	ptra, fp
06cbc     B2 00 A0 FD | 	call	#popregs_
06cc0                 | _compile_fun_2p_ret
06cc0     2D 00 64 FD | 	ret
06cc4                 | 
06cc4                 | ' 
06cc4                 | ' function compile_fun_3p() as ulong
06cc4                 | _compile_fun_3p
06cc4     01 4A 05 F6 | 	mov	COUNT_, #1
06cc8     A8 00 A0 FD | 	call	#pushregs_
06ccc     50 25 B0 FD | 	call	#_expr
06cd0                 | ' 
06cd0                 | ' expr()
06cd0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06cd0     57 00 00 FF 
06cd4     44 E4 05 F1 | 	add	objptr, ##44612
06cd8     F2 1E 02 FB | 	rdlong	local01, objptr
06cdc     03 1E 66 F0 | 	shl	local01, #3
06ce0     02 00 00 FF 
06ce4     38 E4 85 F1 | 	sub	objptr, ##1080
06ce8     F2 1E 02 F1 | 	add	local01, objptr
06cec     04 1E 06 F1 | 	add	local01, #4
06cf0     0F 1F 02 FB | 	rdlong	local01, local01
06cf4     11 1E 0E F2 | 	cmp	local01, #17 wz
06cf8     55 00 00 FF 
06cfc     0C E4 85 F1 | 	sub	objptr, ##43532
06d00     15 FA 05 56 |  if_ne	mov	result1, #21
06d04     7C 00 90 5D |  if_ne	jmp	#LR__0620
06d08     57 00 00 FF 
06d0c     44 E4 05 F1 | 	add	objptr, ##44612
06d10     F2 1E 02 FB | 	rdlong	local01, objptr
06d14     01 1E 06 F1 | 	add	local01, #1
06d18     F2 1E 62 FC | 	wrlong	local01, objptr
06d1c     57 00 00 FF 
06d20     44 E4 85 F1 | 	sub	objptr, ##44612
06d24     F8 24 B0 FD | 	call	#_expr
06d28                 | ' expr()
06d28                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d28     57 00 00 FF 
06d2c     44 E4 05 F1 | 	add	objptr, ##44612
06d30     F2 1E 02 FB | 	rdlong	local01, objptr
06d34     03 1E 66 F0 | 	shl	local01, #3
06d38     02 00 00 FF 
06d3c     38 E4 85 F1 | 	sub	objptr, ##1080
06d40     F2 1E 02 F1 | 	add	local01, objptr
06d44     04 1E 06 F1 | 	add	local01, #4
06d48     0F 1F 02 FB | 	rdlong	local01, local01
06d4c     11 1E 0E F2 | 	cmp	local01, #17 wz
06d50     55 00 00 FF 
06d54     0C E4 85 F1 | 	sub	objptr, ##43532
06d58     15 FA 05 56 |  if_ne	mov	result1, #21
06d5c     24 00 90 5D |  if_ne	jmp	#LR__0620
06d60     57 00 00 FF 
06d64     44 E4 05 F1 | 	add	objptr, ##44612
06d68     F2 1E 02 FB | 	rdlong	local01, objptr
06d6c     01 1E 06 F1 | 	add	local01, #1
06d70     F2 1E 62 FC | 	wrlong	local01, objptr
06d74     57 00 00 FF 
06d78     44 E4 85 F1 | 	sub	objptr, ##44612
06d7c     A0 24 B0 FD | 	call	#_expr
06d80     00 FA 05 F6 | 	mov	result1, #0
06d84                 | LR__0620
06d84     A7 F0 03 F6 | 	mov	ptra, fp
06d88     B2 00 A0 FD | 	call	#popregs_
06d8c                 | _compile_fun_3p_ret
06d8c     2D 00 64 FD | 	ret
06d90                 | 
06d90                 | ' 
06d90                 | ' function compile_fun_4p() as ulong
06d90                 | _compile_fun_4p
06d90     01 4A 05 F6 | 	mov	COUNT_, #1
06d94     A8 00 A0 FD | 	call	#pushregs_
06d98     84 24 B0 FD | 	call	#_expr
06d9c                 | ' 
06d9c                 | ' expr()
06d9c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d9c     57 00 00 FF 
06da0     44 E4 05 F1 | 	add	objptr, ##44612
06da4     F2 1E 02 FB | 	rdlong	local01, objptr
06da8     03 1E 66 F0 | 	shl	local01, #3
06dac     02 00 00 FF 
06db0     38 E4 85 F1 | 	sub	objptr, ##1080
06db4     F2 1E 02 F1 | 	add	local01, objptr
06db8     04 1E 06 F1 | 	add	local01, #4
06dbc     0F 1F 02 FB | 	rdlong	local01, local01
06dc0     11 1E 0E F2 | 	cmp	local01, #17 wz
06dc4     55 00 00 FF 
06dc8     0C E4 85 F1 | 	sub	objptr, ##43532
06dcc     15 FA 05 56 |  if_ne	mov	result1, #21
06dd0     D4 00 90 5D |  if_ne	jmp	#LR__0630
06dd4     57 00 00 FF 
06dd8     44 E4 05 F1 | 	add	objptr, ##44612
06ddc     F2 1E 02 FB | 	rdlong	local01, objptr
06de0     01 1E 06 F1 | 	add	local01, #1
06de4     F2 1E 62 FC | 	wrlong	local01, objptr
06de8     57 00 00 FF 
06dec     44 E4 85 F1 | 	sub	objptr, ##44612
06df0     2C 24 B0 FD | 	call	#_expr
06df4                 | ' expr()
06df4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06df4     57 00 00 FF 
06df8     44 E4 05 F1 | 	add	objptr, ##44612
06dfc     F2 1E 02 FB | 	rdlong	local01, objptr
06e00     03 1E 66 F0 | 	shl	local01, #3
06e04     02 00 00 FF 
06e08     38 E4 85 F1 | 	sub	objptr, ##1080
06e0c     F2 1E 02 F1 | 	add	local01, objptr
06e10     04 1E 06 F1 | 	add	local01, #4
06e14     0F 1F 02 FB | 	rdlong	local01, local01
06e18     11 1E 0E F2 | 	cmp	local01, #17 wz
06e1c     55 00 00 FF 
06e20     0C E4 85 F1 | 	sub	objptr, ##43532
06e24     15 FA 05 56 |  if_ne	mov	result1, #21
06e28     7C 00 90 5D |  if_ne	jmp	#LR__0630
06e2c     57 00 00 FF 
06e30     44 E4 05 F1 | 	add	objptr, ##44612
06e34     F2 1E 02 FB | 	rdlong	local01, objptr
06e38     01 1E 06 F1 | 	add	local01, #1
06e3c     F2 1E 62 FC | 	wrlong	local01, objptr
06e40     57 00 00 FF 
06e44     44 E4 85 F1 | 	sub	objptr, ##44612
06e48     D4 23 B0 FD | 	call	#_expr
06e4c                 | ' expr()
06e4c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06e4c     57 00 00 FF 
06e50     44 E4 05 F1 | 	add	objptr, ##44612
06e54     F2 1E 02 FB | 	rdlong	local01, objptr
06e58     03 1E 66 F0 | 	shl	local01, #3
06e5c     02 00 00 FF 
06e60     38 E4 85 F1 | 	sub	objptr, ##1080
06e64     F2 1E 02 F1 | 	add	local01, objptr
06e68     04 1E 06 F1 | 	add	local01, #4
06e6c     0F 1F 02 FB | 	rdlong	local01, local01
06e70     11 1E 0E F2 | 	cmp	local01, #17 wz
06e74     55 00 00 FF 
06e78     0C E4 85 F1 | 	sub	objptr, ##43532
06e7c     15 FA 05 56 |  if_ne	mov	result1, #21
06e80     24 00 90 5D |  if_ne	jmp	#LR__0630
06e84     57 00 00 FF 
06e88     44 E4 05 F1 | 	add	objptr, ##44612
06e8c     F2 1E 02 FB | 	rdlong	local01, objptr
06e90     01 1E 06 F1 | 	add	local01, #1
06e94     F2 1E 62 FC | 	wrlong	local01, objptr
06e98     57 00 00 FF 
06e9c     44 E4 85 F1 | 	sub	objptr, ##44612
06ea0     7C 23 B0 FD | 	call	#_expr
06ea4     00 FA 05 F6 | 	mov	result1, #0
06ea8                 | LR__0630
06ea8     A7 F0 03 F6 | 	mov	ptra, fp
06eac     B2 00 A0 FD | 	call	#popregs_
06eb0                 | _compile_fun_4p_ret
06eb0     2D 00 64 FD | 	ret
06eb4                 | 
06eb4                 | ' 
06eb4                 | ' 
06eb4                 | ' function compile_fun_5p() as ulong
06eb4                 | _compile_fun_5p
06eb4     01 4A 05 F6 | 	mov	COUNT_, #1
06eb8     A8 00 A0 FD | 	call	#pushregs_
06ebc     60 23 B0 FD | 	call	#_expr
06ec0                 | ' 
06ec0                 | ' expr()
06ec0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06ec0     57 00 00 FF 
06ec4     44 E4 05 F1 | 	add	objptr, ##44612
06ec8     F2 1E 02 FB | 	rdlong	local01, objptr
06ecc     03 1E 66 F0 | 	shl	local01, #3
06ed0     02 00 00 FF 
06ed4     38 E4 85 F1 | 	sub	objptr, ##1080
06ed8     F2 1E 02 F1 | 	add	local01, objptr
06edc     04 1E 06 F1 | 	add	local01, #4
06ee0     0F 1F 02 FB | 	rdlong	local01, local01
06ee4     11 1E 0E F2 | 	cmp	local01, #17 wz
06ee8     55 00 00 FF 
06eec     0C E4 85 F1 | 	sub	objptr, ##43532
06ef0     15 FA 05 56 |  if_ne	mov	result1, #21
06ef4     2C 01 90 5D |  if_ne	jmp	#LR__0640
06ef8     57 00 00 FF 
06efc     44 E4 05 F1 | 	add	objptr, ##44612
06f00     F2 1E 02 FB | 	rdlong	local01, objptr
06f04     01 1E 06 F1 | 	add	local01, #1
06f08     F2 1E 62 FC | 	wrlong	local01, objptr
06f0c     57 00 00 FF 
06f10     44 E4 85 F1 | 	sub	objptr, ##44612
06f14     08 23 B0 FD | 	call	#_expr
06f18                 | ' expr()
06f18                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06f18     57 00 00 FF 
06f1c     44 E4 05 F1 | 	add	objptr, ##44612
06f20     F2 1E 02 FB | 	rdlong	local01, objptr
06f24     03 1E 66 F0 | 	shl	local01, #3
06f28     02 00 00 FF 
06f2c     38 E4 85 F1 | 	sub	objptr, ##1080
06f30     F2 1E 02 F1 | 	add	local01, objptr
06f34     04 1E 06 F1 | 	add	local01, #4
06f38     0F 1F 02 FB | 	rdlong	local01, local01
06f3c     11 1E 0E F2 | 	cmp	local01, #17 wz
06f40     55 00 00 FF 
06f44     0C E4 85 F1 | 	sub	objptr, ##43532
06f48     15 FA 05 56 |  if_ne	mov	result1, #21
06f4c     D4 00 90 5D |  if_ne	jmp	#LR__0640
06f50     57 00 00 FF 
06f54     44 E4 05 F1 | 	add	objptr, ##44612
06f58     F2 1E 02 FB | 	rdlong	local01, objptr
06f5c     01 1E 06 F1 | 	add	local01, #1
06f60     F2 1E 62 FC | 	wrlong	local01, objptr
06f64     57 00 00 FF 
06f68     44 E4 85 F1 | 	sub	objptr, ##44612
06f6c     B0 22 B0 FD | 	call	#_expr
06f70                 | ' expr()
06f70                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06f70     57 00 00 FF 
06f74     44 E4 05 F1 | 	add	objptr, ##44612
06f78     F2 1E 02 FB | 	rdlong	local01, objptr
06f7c     03 1E 66 F0 | 	shl	local01, #3
06f80     02 00 00 FF 
06f84     38 E4 85 F1 | 	sub	objptr, ##1080
06f88     F2 1E 02 F1 | 	add	local01, objptr
06f8c     04 1E 06 F1 | 	add	local01, #4
06f90     0F 1F 02 FB | 	rdlong	local01, local01
06f94     11 1E 0E F2 | 	cmp	local01, #17 wz
06f98     55 00 00 FF 
06f9c     0C E4 85 F1 | 	sub	objptr, ##43532
06fa0     15 FA 05 56 |  if_ne	mov	result1, #21
06fa4     7C 00 90 5D |  if_ne	jmp	#LR__0640
06fa8     57 00 00 FF 
06fac     44 E4 05 F1 | 	add	objptr, ##44612
06fb0     F2 1E 02 FB | 	rdlong	local01, objptr
06fb4     01 1E 06 F1 | 	add	local01, #1
06fb8     F2 1E 62 FC | 	wrlong	local01, objptr
06fbc     57 00 00 FF 
06fc0     44 E4 85 F1 | 	sub	objptr, ##44612
06fc4     58 22 B0 FD | 	call	#_expr
06fc8                 | ' expr()
06fc8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06fc8     57 00 00 FF 
06fcc     44 E4 05 F1 | 	add	objptr, ##44612
06fd0     F2 1E 02 FB | 	rdlong	local01, objptr
06fd4     03 1E 66 F0 | 	shl	local01, #3
06fd8     02 00 00 FF 
06fdc     38 E4 85 F1 | 	sub	objptr, ##1080
06fe0     F2 1E 02 F1 | 	add	local01, objptr
06fe4     04 1E 06 F1 | 	add	local01, #4
06fe8     0F 1F 02 FB | 	rdlong	local01, local01
06fec     11 1E 0E F2 | 	cmp	local01, #17 wz
06ff0     55 00 00 FF 
06ff4     0C E4 85 F1 | 	sub	objptr, ##43532
06ff8     15 FA 05 56 |  if_ne	mov	result1, #21
06ffc     24 00 90 5D |  if_ne	jmp	#LR__0640
07000     57 00 00 FF 
07004     44 E4 05 F1 | 	add	objptr, ##44612
07008     F2 1E 02 FB | 	rdlong	local01, objptr
0700c     01 1E 06 F1 | 	add	local01, #1
07010     F2 1E 62 FC | 	wrlong	local01, objptr
07014     57 00 00 FF 
07018     44 E4 85 F1 | 	sub	objptr, ##44612
0701c     00 22 B0 FD | 	call	#_expr
07020     00 FA 05 F6 | 	mov	result1, #0
07024                 | LR__0640
07024     A7 F0 03 F6 | 	mov	ptra, fp
07028     B2 00 A0 FD | 	call	#popregs_
0702c                 | _compile_fun_5p_ret
0702c     2D 00 64 FD | 	ret
07030                 | 
07030                 | ' 
07030                 | ' function compile_fun_varp() as ulong 
07030                 | _compile_fun_varp
07030     02 4A 05 F6 | 	mov	COUNT_, #2
07034     A8 00 A0 FD | 	call	#pushregs_
07038     00 1E 06 F6 | 	mov	local01, #0
0703c                 | ' i=0
0703c                 | ' if lparts(ct).token<>token_end then
0703c     57 00 00 FF 
07040     44 E4 05 F1 | 	add	objptr, ##44612
07044     F2 20 02 FB | 	rdlong	local02, objptr
07048     03 20 66 F0 | 	shl	local02, #3
0704c     02 00 00 FF 
07050     38 E4 85 F1 | 	sub	objptr, ##1080
07054     F2 20 02 F1 | 	add	local02, objptr
07058     04 20 06 F1 | 	add	local02, #4
0705c     10 21 02 FB | 	rdlong	local02, local02
07060     FE 21 0E F2 | 	cmp	local02, #510 wz
07064     55 00 00 FF 
07068     0C E4 85 F1 | 	sub	objptr, ##43532
0706c     5C 00 90 AD |  if_e	jmp	#LR__0652
07070                 | '   do
07070                 | LR__0650
07070     AC 21 B0 FD | 	call	#_expr
07074     01 1E 06 F1 | 	add	local01, #1
07078                 | '   expr()
07078                 | '    i+=1
07078                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
07078     57 00 00 FF 
0707c     44 E4 05 F1 | 	add	objptr, ##44612
07080     F2 20 02 FB | 	rdlong	local02, objptr
07084     03 20 66 F0 | 	shl	local02, #3
07088     02 00 00 FF 
0708c     38 E4 85 F1 | 	sub	objptr, ##1080
07090     F2 20 02 F1 | 	add	local02, objptr
07094     04 20 06 F1 | 	add	local02, #4
07098     10 21 02 FB | 	rdlong	local02, local02
0709c     11 20 0E F2 | 	cmp	local02, #17 wz
070a0     55 00 00 FF 
070a4     0C E4 85 F1 | 	sub	objptr, ##43532
070a8     20 00 90 5D |  if_ne	jmp	#LR__0651
070ac     57 00 00 FF 
070b0     44 E4 05 F1 | 	add	objptr, ##44612
070b4     F2 20 02 FB | 	rdlong	local02, objptr
070b8     01 20 06 F1 | 	add	local02, #1
070bc     F2 20 62 FC | 	wrlong	local02, objptr
070c0     57 00 00 FF 
070c4     44 E4 85 F1 | 	sub	objptr, ##44612
070c8     A4 FF 9F FD | 	jmp	#LR__0650
070cc                 | LR__0651
070cc                 | LR__0652
070cc                 | ' return i
070cc     0F FB 01 F6 | 	mov	result1, local01
070d0     A7 F0 03 F6 | 	mov	ptra, fp
070d4     B2 00 A0 FD | 	call	#popregs_
070d8                 | _compile_fun_varp_ret
070d8     2D 00 64 FD | 	ret
070dc                 | 
070dc                 | ' 
070dc                 | ' 
070dc                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
070dc                 | _compile_print
070dc     0B 4A 05 F6 | 	mov	COUNT_, #11
070e0     A8 00 A0 FD | 	call	#pushregs_
070e4     00 1E 06 F6 | 	mov	local01, #0
070e8     1D 22 06 F6 | 	mov	local03, #29
070ec                 | ' t1.result.uresult=0 : t1.result_type=result_uint
070ec                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
070ec     57 00 00 FF 
070f0     44 E4 05 F1 | 	add	objptr, ##44612
070f4     F2 24 02 FB | 	rdlong	local04, objptr
070f8     03 24 66 F0 | 	shl	local04, #3
070fc     02 00 00 FF 
07100     38 E4 85 F1 | 	sub	objptr, ##1080
07104     F2 24 02 F1 | 	add	local04, objptr
07108     04 24 06 F1 | 	add	local04, #4
0710c     12 25 02 FB | 	rdlong	local04, local04
07110     FE 25 0E F2 | 	cmp	local04, #510 wz
07114     55 00 00 FF 
07118     0C E4 85 F1 | 	sub	objptr, ##43532
0711c     68 01 90 5D |  if_ne	jmp	#LR__0660
07120     20 22 06 F6 | 	mov	local03, #32
07124     0F 27 02 F6 | 	mov	local05, local01
07128     10 29 02 F6 | 	mov	local06, local02
0712c     11 2B 02 F6 | 	mov	local07, local03
07130     6A 00 00 FF 
07134     7C E4 05 F1 | 	add	objptr, ##54396
07138     F2 2C 02 FB | 	rdlong	local08, objptr
0713c     16 2F 02 F6 | 	mov	local09, local08
07140     01 2E 66 F0 | 	shl	local09, #1
07144     16 2F 02 F1 | 	add	local09, local08
07148     02 2E 66 F0 | 	shl	local09, #2
0714c     03 00 00 FF 
07150     00 E4 85 F1 | 	sub	objptr, ##1536
07154     F2 2E 02 F1 | 	add	local09, objptr
07158     17 27 62 FC | 	wrlong	local05, local09
0715c     03 00 00 FF 
07160     00 E4 05 F1 | 	add	objptr, ##1536
07164     F2 26 02 FB | 	rdlong	local05, objptr
07168     13 31 02 F6 | 	mov	local10, local05
0716c     01 30 66 F0 | 	shl	local10, #1
07170     13 31 02 F1 | 	add	local10, local05
07174     02 30 66 F0 | 	shl	local10, #2
07178     03 00 00 FF 
0717c     00 E4 85 F1 | 	sub	objptr, ##1536
07180     F2 30 02 F1 | 	add	local10, objptr
07184     04 30 06 F1 | 	add	local10, #4
07188     18 29 62 FC | 	wrlong	local06, local10
0718c     03 00 00 FF 
07190     00 E4 05 F1 | 	add	objptr, ##1536
07194     F2 26 02 FB | 	rdlong	local05, objptr
07198     13 33 02 F6 | 	mov	local11, local05
0719c     01 32 66 F0 | 	shl	local11, #1
071a0     13 33 02 F1 | 	add	local11, local05
071a4     02 32 66 F0 | 	shl	local11, #2
071a8     03 00 00 FF 
071ac     00 E4 85 F1 | 	sub	objptr, ##1536
071b0     F2 32 02 F1 | 	add	local11, objptr
071b4     08 32 06 F1 | 	add	local11, #8
071b8     19 2B 62 FC | 	wrlong	local07, local11
071bc     03 00 00 FF 
071c0     00 E4 05 F1 | 	add	objptr, ##1536
071c4     F2 26 02 FB | 	rdlong	local05, objptr
071c8     01 26 06 F1 | 	add	local05, #1
071cc     F2 26 62 FC | 	wrlong	local05, objptr
071d0     44 22 06 F6 | 	mov	local03, #68
071d4     0F 27 02 F6 | 	mov	local05, local01
071d8     10 29 02 F6 | 	mov	local06, local02
071dc     11 2B 02 F6 | 	mov	local07, local03
071e0     F2 2C 02 FB | 	rdlong	local08, objptr
071e4     16 2F 02 F6 | 	mov	local09, local08
071e8     01 2E 66 F0 | 	shl	local09, #1
071ec     16 2F 02 F1 | 	add	local09, local08
071f0     02 2E 66 F0 | 	shl	local09, #2
071f4     03 00 00 FF 
071f8     00 E4 85 F1 | 	sub	objptr, ##1536
071fc     F2 2E 02 F1 | 	add	local09, objptr
07200     17 27 62 FC | 	wrlong	local05, local09
07204     03 00 00 FF 
07208     00 E4 05 F1 | 	add	objptr, ##1536
0720c     F2 32 02 FB | 	rdlong	local11, objptr
07210     19 31 02 F6 | 	mov	local10, local11
07214     01 30 66 F0 | 	shl	local10, #1
07218     19 31 02 F1 | 	add	local10, local11
0721c     02 30 66 F0 | 	shl	local10, #2
07220     03 00 00 FF 
07224     00 E4 85 F1 | 	sub	objptr, ##1536
07228     F2 30 02 F1 | 	add	local10, objptr
0722c     04 30 06 F1 | 	add	local10, #4
07230     18 29 62 FC | 	wrlong	local06, local10
07234     03 00 00 FF 
07238     00 E4 05 F1 | 	add	objptr, ##1536
0723c     F2 30 02 FB | 	rdlong	local10, objptr
07240     18 33 02 F6 | 	mov	local11, local10
07244     01 32 66 F0 | 	shl	local11, #1
07248     18 33 02 F1 | 	add	local11, local10
0724c     02 32 66 F0 | 	shl	local11, #2
07250     03 00 00 FF 
07254     00 E4 85 F1 | 	sub	objptr, ##1536
07258     F2 32 02 F1 | 	add	local11, objptr
0725c     08 32 06 F1 | 	add	local11, #8
07260     19 2B 62 FC | 	wrlong	local07, local11
07264     03 00 00 FF 
07268     00 E4 05 F1 | 	add	objptr, ##1536
0726c     F2 26 02 FB | 	rdlong	local05, objptr
07270     01 26 06 F1 | 	add	local05, #1
07274     F2 26 62 FC | 	wrlong	local05, objptr
07278     6A 00 00 FF 
0727c     7C E4 85 F1 | 	sub	objptr, ##54396
07280     00 FA 05 F6 | 	mov	result1, #0
07284     20 05 90 FD | 	jmp	#LR__0667
07288                 | LR__0660
07288                 | ' do
07288                 | LR__0661
07288     94 1F B0 FD | 	call	#_expr
0728c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0728c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0728c     57 00 00 FF 
07290     44 E4 05 F1 | 	add	objptr, ##44612
07294     F2 24 02 FB | 	rdlong	local04, objptr
07298     03 24 66 F0 | 	shl	local04, #3
0729c     02 00 00 FF 
072a0     38 E4 85 F1 | 	sub	objptr, ##1080
072a4     F2 24 02 F1 | 	add	local04, objptr
072a8     04 24 06 F1 | 	add	local04, #4
072ac     12 2D 02 FB | 	rdlong	local08, local04
072b0     11 2C 0E F2 | 	cmp	local08, #17 wz
072b4     55 00 00 FF 
072b8     0C E4 85 F1 | 	sub	objptr, ##43532
072bc     60 01 90 5D |  if_ne	jmp	#LR__0662
072c0     21 22 06 F6 | 	mov	local03, #33
072c4     0F 27 02 F6 | 	mov	local05, local01
072c8     10 29 02 F6 | 	mov	local06, local02
072cc     11 2B 02 F6 | 	mov	local07, local03
072d0     6A 00 00 FF 
072d4     7C E4 05 F1 | 	add	objptr, ##54396
072d8     F2 2C 02 FB | 	rdlong	local08, objptr
072dc     16 2F 02 F6 | 	mov	local09, local08
072e0     01 2E 66 F0 | 	shl	local09, #1
072e4     16 2F 02 F1 | 	add	local09, local08
072e8     02 2E 66 F0 | 	shl	local09, #2
072ec     03 00 00 FF 
072f0     00 E4 85 F1 | 	sub	objptr, ##1536
072f4     F2 2E 02 F1 | 	add	local09, objptr
072f8     17 27 62 FC | 	wrlong	local05, local09
072fc     03 00 00 FF 
07300     00 E4 05 F1 | 	add	objptr, ##1536
07304     F2 32 02 FB | 	rdlong	local11, objptr
07308     19 31 02 F6 | 	mov	local10, local11
0730c     01 30 66 F0 | 	shl	local10, #1
07310     19 31 02 F1 | 	add	local10, local11
07314     02 30 66 F0 | 	shl	local10, #2
07318     03 00 00 FF 
0731c     00 E4 85 F1 | 	sub	objptr, ##1536
07320     F2 30 02 F1 | 	add	local10, objptr
07324     04 30 06 F1 | 	add	local10, #4
07328     18 29 62 FC | 	wrlong	local06, local10
0732c     03 00 00 FF 
07330     00 E4 05 F1 | 	add	objptr, ##1536
07334     F2 26 02 FB | 	rdlong	local05, objptr
07338     13 33 02 F6 | 	mov	local11, local05
0733c     01 32 66 F0 | 	shl	local11, #1
07340     13 33 02 F1 | 	add	local11, local05
07344     02 32 66 F0 | 	shl	local11, #2
07348     03 00 00 FF 
0734c     00 E4 85 F1 | 	sub	objptr, ##1536
07350     F2 32 02 F1 | 	add	local11, objptr
07354     08 32 06 F1 | 	add	local11, #8
07358     19 2B 62 FC | 	wrlong	local07, local11
0735c     03 00 00 FF 
07360     00 E4 05 F1 | 	add	objptr, ##1536
07364     F2 26 02 FB | 	rdlong	local05, objptr
07368     01 26 06 F1 | 	add	local05, #1
0736c     F2 26 62 FC | 	wrlong	local05, objptr
07370     44 22 06 F6 | 	mov	local03, #68
07374     0F 27 02 F6 | 	mov	local05, local01
07378     10 29 02 F6 | 	mov	local06, local02
0737c     11 2B 02 F6 | 	mov	local07, local03
07380     F2 2C 02 FB | 	rdlong	local08, objptr
07384     16 2F 02 F6 | 	mov	local09, local08
07388     01 2E 66 F0 | 	shl	local09, #1
0738c     16 2F 02 F1 | 	add	local09, local08
07390     02 2E 66 F0 | 	shl	local09, #2
07394     03 00 00 FF 
07398     00 E4 85 F1 | 	sub	objptr, ##1536
0739c     F2 2E 02 F1 | 	add	local09, objptr
073a0     17 27 62 FC | 	wrlong	local05, local09
073a4     03 00 00 FF 
073a8     00 E4 05 F1 | 	add	objptr, ##1536
073ac     F2 32 02 FB | 	rdlong	local11, objptr
073b0     19 31 02 F6 | 	mov	local10, local11
073b4     01 30 66 F0 | 	shl	local10, #1
073b8     19 31 02 F1 | 	add	local10, local11
073bc     02 30 66 F0 | 	shl	local10, #2
073c0     03 00 00 FF 
073c4     00 E4 85 F1 | 	sub	objptr, ##1536
073c8     F2 30 02 F1 | 	add	local10, objptr
073cc     04 30 06 F1 | 	add	local10, #4
073d0     18 29 62 FC | 	wrlong	local06, local10
073d4     03 00 00 FF 
073d8     00 E4 05 F1 | 	add	objptr, ##1536
073dc     F2 30 02 FB | 	rdlong	local10, objptr
073e0     18 33 02 F6 | 	mov	local11, local10
073e4     01 32 66 F0 | 	shl	local11, #1
073e8     18 33 02 F1 | 	add	local11, local10
073ec     02 32 66 F0 | 	shl	local11, #2
073f0     03 00 00 FF 
073f4     00 E4 85 F1 | 	sub	objptr, ##1536
073f8     F2 32 02 F1 | 	add	local11, objptr
073fc     08 32 06 F1 | 	add	local11, #8
07400     19 2B 62 FC | 	wrlong	local07, local11
07404     03 00 00 FF 
07408     00 E4 05 F1 | 	add	objptr, ##1536
0740c     F2 26 02 FB | 	rdlong	local05, objptr
07410     01 26 06 F1 | 	add	local05, #1
07414     F2 26 62 FC | 	wrlong	local05, objptr
07418     6A 00 00 FF 
0741c     7C E4 85 F1 | 	sub	objptr, ##54396
07420                 | LR__0662
07420                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07420     57 00 00 FF 
07424     44 E4 05 F1 | 	add	objptr, ##44612
07428     F2 24 02 FB | 	rdlong	local04, objptr
0742c     03 24 66 F0 | 	shl	local04, #3
07430     02 00 00 FF 
07434     38 E4 85 F1 | 	sub	objptr, ##1080
07438     F2 24 02 F1 | 	add	local04, objptr
0743c     04 24 06 F1 | 	add	local04, #4
07440     12 2D 02 FB | 	rdlong	local08, local04
07444     12 2C 0E F2 | 	cmp	local08, #18 wz
07448     55 00 00 FF 
0744c     0C E4 85 F1 | 	sub	objptr, ##43532
07450     60 01 90 5D |  if_ne	jmp	#LR__0663
07454     22 22 06 F6 | 	mov	local03, #34
07458     0F 27 02 F6 | 	mov	local05, local01
0745c     10 29 02 F6 | 	mov	local06, local02
07460     11 2B 02 F6 | 	mov	local07, local03
07464     6A 00 00 FF 
07468     7C E4 05 F1 | 	add	objptr, ##54396
0746c     F2 2C 02 FB | 	rdlong	local08, objptr
07470     16 2F 02 F6 | 	mov	local09, local08
07474     01 2E 66 F0 | 	shl	local09, #1
07478     16 2F 02 F1 | 	add	local09, local08
0747c     02 2E 66 F0 | 	shl	local09, #2
07480     03 00 00 FF 
07484     00 E4 85 F1 | 	sub	objptr, ##1536
07488     F2 2E 02 F1 | 	add	local09, objptr
0748c     17 27 62 FC | 	wrlong	local05, local09
07490     03 00 00 FF 
07494     00 E4 05 F1 | 	add	objptr, ##1536
07498     F2 32 02 FB | 	rdlong	local11, objptr
0749c     19 31 02 F6 | 	mov	local10, local11
074a0     01 30 66 F0 | 	shl	local10, #1
074a4     19 31 02 F1 | 	add	local10, local11
074a8     02 30 66 F0 | 	shl	local10, #2
074ac     03 00 00 FF 
074b0     00 E4 85 F1 | 	sub	objptr, ##1536
074b4     F2 30 02 F1 | 	add	local10, objptr
074b8     04 30 06 F1 | 	add	local10, #4
074bc     18 29 62 FC | 	wrlong	local06, local10
074c0     03 00 00 FF 
074c4     00 E4 05 F1 | 	add	objptr, ##1536
074c8     F2 26 02 FB | 	rdlong	local05, objptr
074cc     13 33 02 F6 | 	mov	local11, local05
074d0     01 32 66 F0 | 	shl	local11, #1
074d4     13 33 02 F1 | 	add	local11, local05
074d8     02 32 66 F0 | 	shl	local11, #2
074dc     03 00 00 FF 
074e0     00 E4 85 F1 | 	sub	objptr, ##1536
074e4     F2 32 02 F1 | 	add	local11, objptr
074e8     08 32 06 F1 | 	add	local11, #8
074ec     19 2B 62 FC | 	wrlong	local07, local11
074f0     03 00 00 FF 
074f4     00 E4 05 F1 | 	add	objptr, ##1536
074f8     F2 26 02 FB | 	rdlong	local05, objptr
074fc     01 26 06 F1 | 	add	local05, #1
07500     F2 26 62 FC | 	wrlong	local05, objptr
07504     44 22 06 F6 | 	mov	local03, #68
07508     0F 27 02 F6 | 	mov	local05, local01
0750c     10 29 02 F6 | 	mov	local06, local02
07510     11 2B 02 F6 | 	mov	local07, local03
07514     F2 2C 02 FB | 	rdlong	local08, objptr
07518     16 2F 02 F6 | 	mov	local09, local08
0751c     01 2E 66 F0 | 	shl	local09, #1
07520     16 2F 02 F1 | 	add	local09, local08
07524     02 2E 66 F0 | 	shl	local09, #2
07528     03 00 00 FF 
0752c     00 E4 85 F1 | 	sub	objptr, ##1536
07530     F2 2E 02 F1 | 	add	local09, objptr
07534     17 27 62 FC | 	wrlong	local05, local09
07538     03 00 00 FF 
0753c     00 E4 05 F1 | 	add	objptr, ##1536
07540     F2 32 02 FB | 	rdlong	local11, objptr
07544     19 31 02 F6 | 	mov	local10, local11
07548     01 30 66 F0 | 	shl	local10, #1
0754c     19 31 02 F1 | 	add	local10, local11
07550     02 30 66 F0 | 	shl	local10, #2
07554     03 00 00 FF 
07558     00 E4 85 F1 | 	sub	objptr, ##1536
0755c     F2 30 02 F1 | 	add	local10, objptr
07560     04 30 06 F1 | 	add	local10, #4
07564     18 29 62 FC | 	wrlong	local06, local10
07568     03 00 00 FF 
0756c     00 E4 05 F1 | 	add	objptr, ##1536
07570     F2 30 02 FB | 	rdlong	local10, objptr
07574     18 33 02 F6 | 	mov	local11, local10
07578     01 32 66 F0 | 	shl	local11, #1
0757c     18 33 02 F1 | 	add	local11, local10
07580     02 32 66 F0 | 	shl	local11, #2
07584     03 00 00 FF 
07588     00 E4 85 F1 | 	sub	objptr, ##1536
0758c     F2 32 02 F1 | 	add	local11, objptr
07590     08 32 06 F1 | 	add	local11, #8
07594     19 2B 62 FC | 	wrlong	local07, local11
07598     03 00 00 FF 
0759c     00 E4 05 F1 | 	add	objptr, ##1536
075a0     F2 26 02 FB | 	rdlong	local05, objptr
075a4     01 26 06 F1 | 	add	local05, #1
075a8     F2 26 62 FC | 	wrlong	local05, objptr
075ac     6A 00 00 FF 
075b0     7C E4 85 F1 | 	sub	objptr, ##54396
075b4                 | LR__0663
075b4                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
075b4     57 00 00 FF 
075b8     44 E4 05 F1 | 	add	objptr, ##44612
075bc     F2 24 02 FB | 	rdlong	local04, objptr
075c0     03 24 66 F0 | 	shl	local04, #3
075c4     02 00 00 FF 
075c8     38 E4 85 F1 | 	sub	objptr, ##1080
075cc     F2 24 02 F1 | 	add	local04, objptr
075d0     04 24 06 F1 | 	add	local04, #4
075d4     12 2D 02 FB | 	rdlong	local08, local04
075d8     FE 2D 0E F2 | 	cmp	local08, #510 wz
075dc     55 00 00 FF 
075e0     0C E4 85 F1 | 	sub	objptr, ##43532
075e4     B8 00 90 5D |  if_ne	jmp	#LR__0664
075e8     44 22 06 F6 | 	mov	local03, #68
075ec     0F 27 02 F6 | 	mov	local05, local01
075f0     10 29 02 F6 | 	mov	local06, local02
075f4     11 2B 02 F6 | 	mov	local07, local03
075f8     6A 00 00 FF 
075fc     7C E4 05 F1 | 	add	objptr, ##54396
07600     F2 2C 02 FB | 	rdlong	local08, objptr
07604     16 2F 02 F6 | 	mov	local09, local08
07608     01 2E 66 F0 | 	shl	local09, #1
0760c     16 2F 02 F1 | 	add	local09, local08
07610     02 2E 66 F0 | 	shl	local09, #2
07614     03 00 00 FF 
07618     00 E4 85 F1 | 	sub	objptr, ##1536
0761c     F2 2E 02 F1 | 	add	local09, objptr
07620     17 27 62 FC | 	wrlong	local05, local09
07624     03 00 00 FF 
07628     00 E4 05 F1 | 	add	objptr, ##1536
0762c     F2 32 02 FB | 	rdlong	local11, objptr
07630     19 31 02 F6 | 	mov	local10, local11
07634     01 30 66 F0 | 	shl	local10, #1
07638     19 31 02 F1 | 	add	local10, local11
0763c     02 30 66 F0 | 	shl	local10, #2
07640     03 00 00 FF 
07644     00 E4 85 F1 | 	sub	objptr, ##1536
07648     F2 30 02 F1 | 	add	local10, objptr
0764c     04 30 06 F1 | 	add	local10, #4
07650     18 29 62 FC | 	wrlong	local06, local10
07654     03 00 00 FF 
07658     00 E4 05 F1 | 	add	objptr, ##1536
0765c     F2 30 02 FB | 	rdlong	local10, objptr
07660     18 33 02 F6 | 	mov	local11, local10
07664     01 32 66 F0 | 	shl	local11, #1
07668     18 33 02 F1 | 	add	local11, local10
0766c     02 32 66 F0 | 	shl	local11, #2
07670     03 00 00 FF 
07674     00 E4 85 F1 | 	sub	objptr, ##1536
07678     F2 32 02 F1 | 	add	local11, objptr
0767c     08 32 06 F1 | 	add	local11, #8
07680     19 2B 62 FC | 	wrlong	local07, local11
07684     03 00 00 FF 
07688     00 E4 05 F1 | 	add	objptr, ##1536
0768c     F2 26 02 FB | 	rdlong	local05, objptr
07690     01 26 06 F1 | 	add	local05, #1
07694     F2 26 62 FC | 	wrlong	local05, objptr
07698     6A 00 00 FF 
0769c     7C E4 85 F1 | 	sub	objptr, ##54396
076a0                 | LR__0664
076a0                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
076a0     57 00 00 FF 
076a4     44 E4 05 F1 | 	add	objptr, ##44612
076a8     F2 24 02 FB | 	rdlong	local04, objptr
076ac     03 24 66 F0 | 	shl	local04, #3
076b0     02 00 00 FF 
076b4     38 E4 85 F1 | 	sub	objptr, ##1080
076b8     F2 24 02 F1 | 	add	local04, objptr
076bc     04 24 06 F1 | 	add	local04, #4
076c0     12 2D 02 FB | 	rdlong	local08, local04
076c4     11 2C 0E F2 | 	cmp	local08, #17 wz
076c8     55 00 00 FF 
076cc     0C E4 85 F1 | 	sub	objptr, ##43532
076d0     6C 00 90 AD |  if_e	jmp	#LR__0665
076d4     57 00 00 FF 
076d8     44 E4 05 F1 | 	add	objptr, ##44612
076dc     F2 2C 02 FB | 	rdlong	local08, objptr
076e0     03 2C 66 F0 | 	shl	local08, #3
076e4     02 00 00 FF 
076e8     38 E4 85 F1 | 	sub	objptr, ##1080
076ec     F2 2C 02 F1 | 	add	local08, objptr
076f0     04 2C 06 F1 | 	add	local08, #4
076f4     16 2D 02 FB | 	rdlong	local08, local08
076f8     12 2C 0E F2 | 	cmp	local08, #18 wz
076fc     55 00 00 FF 
07700     0C E4 85 F1 | 	sub	objptr, ##43532
07704     38 00 90 AD |  if_e	jmp	#LR__0665
07708     57 00 00 FF 
0770c     44 E4 05 F1 | 	add	objptr, ##44612
07710     F2 32 02 FB | 	rdlong	local11, objptr
07714     03 32 66 F0 | 	shl	local11, #3
07718     02 00 00 FF 
0771c     38 E4 85 F1 | 	sub	objptr, ##1080
07720     F2 32 02 F1 | 	add	local11, objptr
07724     04 32 06 F1 | 	add	local11, #4
07728     19 33 02 FB | 	rdlong	local11, local11
0772c     FE 33 0E F2 | 	cmp	local11, #510 wz
07730     55 00 00 FF 
07734     0C E4 85 F1 | 	sub	objptr, ##43532
07738     16 FA 05 56 |  if_ne	mov	result1, #22
0773c     68 00 90 5D |  if_ne	jmp	#LR__0667
07740                 | LR__0665
07740     57 00 00 FF 
07744     44 E4 05 F1 | 	add	objptr, ##44612
07748     F2 24 02 FB | 	rdlong	local04, objptr
0774c     01 24 06 F1 | 	add	local04, #1
07750     F2 24 62 FC | 	wrlong	local04, objptr
07754     03 24 66 F0 | 	shl	local04, #3
07758     02 00 00 FF 
0775c     38 E4 85 F1 | 	sub	objptr, ##1080
07760     F2 24 02 F1 | 	add	local04, objptr
07764     04 24 06 F1 | 	add	local04, #4
07768     12 2D 02 FB | 	rdlong	local08, local04
0776c     FE 2D 0E F2 | 	cmp	local08, #510 wz
07770     55 00 00 FF 
07774     0C E4 85 F1 | 	sub	objptr, ##43532
07778     28 00 90 AD |  if_e	jmp	#LR__0666
0777c     57 00 00 FF 
07780     44 E4 05 F1 | 	add	objptr, ##44612
07784     F2 32 02 FB | 	rdlong	local11, objptr
07788     0E 00 00 FF 
0778c     1C E4 05 F1 | 	add	objptr, ##7196
07790     F2 30 02 FB | 	rdlong	local10, objptr
07794     65 00 00 FF 
07798     60 E4 85 F1 | 	sub	objptr, ##51808
0779c     18 33 52 F2 | 	cmps	local11, local10 wc
077a0     E4 FA 9F CD |  if_b	jmp	#LR__0661
077a4                 | LR__0666
077a4                 | ' return 0
077a4     00 FA 05 F6 | 	mov	result1, #0
077a8                 | LR__0667
077a8     A7 F0 03 F6 | 	mov	ptra, fp
077ac     B2 00 A0 FD | 	call	#popregs_
077b0                 | _compile_print_ret
077b0     2D 00 64 FD | 	ret
077b4                 | 
077b4                 | ' 
077b4                 | ' function compile_if() as ulong  
077b4                 | _compile_if
077b4     05 4A 05 F6 | 	mov	COUNT_, #5
077b8     A8 00 A0 FD | 	call	#pushregs_
077bc                 | _compile_if_enter
077bc     60 1A B0 FD | 	call	#_expr
077c0                 | ' expr()
077c0                 | ' return 0
077c0     57 00 00 FF 
077c4     44 E4 05 F1 | 	add	objptr, ##44612
077c8     F2 FA 01 FB | 	rdlong	result1, objptr
077cc     01 FA 05 F1 | 	add	result1, #1
077d0     F2 FA 61 FC | 	wrlong	result1, objptr
077d4     58 22 06 F6 | 	mov	local03, #88
077d8     0F 25 02 F6 | 	mov	local04, local01
077dc     10 27 02 F6 | 	mov	local05, local02
077e0     11 1F 02 F6 | 	mov	local01, local03
077e4     13 00 00 FF 
077e8     38 E4 05 F1 | 	add	objptr, ##9784
077ec     F2 12 02 FB | 	rdlong	arg01, objptr
077f0     09 FB 01 F6 | 	mov	result1, arg01
077f4     01 FA 65 F0 | 	shl	result1, #1
077f8     09 FB 01 F1 | 	add	result1, arg01
077fc     02 FA 65 F0 | 	shl	result1, #2
07800     03 00 00 FF 
07804     00 E4 85 F1 | 	sub	objptr, ##1536
07808     F2 FA 01 F1 | 	add	result1, objptr
0780c     FD 24 62 FC | 	wrlong	local04, result1
07810     03 00 00 FF 
07814     00 E4 05 F1 | 	add	objptr, ##1536
07818     F2 12 02 FB | 	rdlong	arg01, objptr
0781c     09 25 02 F6 | 	mov	local04, arg01
07820     01 24 66 F0 | 	shl	local04, #1
07824     09 25 02 F1 | 	add	local04, arg01
07828     02 24 66 F0 | 	shl	local04, #2
0782c     03 00 00 FF 
07830     00 E4 85 F1 | 	sub	objptr, ##1536
07834     F2 24 02 F1 | 	add	local04, objptr
07838     04 24 06 F1 | 	add	local04, #4
0783c     12 27 62 FC | 	wrlong	local05, local04
07840     03 00 00 FF 
07844     00 E4 05 F1 | 	add	objptr, ##1536
07848     F2 24 02 FB | 	rdlong	local04, objptr
0784c     12 27 02 F6 | 	mov	local05, local04
07850     01 26 66 F0 | 	shl	local05, #1
07854     12 27 02 F1 | 	add	local05, local04
07858     02 26 66 F0 | 	shl	local05, #2
0785c     03 00 00 FF 
07860     00 E4 85 F1 | 	sub	objptr, ##1536
07864     F2 26 02 F1 | 	add	local05, objptr
07868     08 26 06 F1 | 	add	local05, #8
0786c     13 1F 62 FC | 	wrlong	local01, local05
07870     03 00 00 FF 
07874     00 E4 05 F1 | 	add	objptr, ##1536
07878     F2 24 02 FB | 	rdlong	local04, objptr
0787c     01 24 06 F1 | 	add	local04, #1
07880     F2 24 62 FC | 	wrlong	local04, objptr
07884                 | ' 
07884                 | ' 'print "In compile_if"
07884                 | ' compile_fun_1p()
07884                 | ' cmd=lparts(ct).token : ct+=1
07884                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
07884                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
07884                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07884     13 00 00 FF 
07888     38 E4 85 F1 | 	sub	objptr, ##9784
0788c     F2 26 02 FB | 	rdlong	local05, objptr
07890     01 26 06 F1 | 	add	local05, #1
07894     03 26 66 F0 | 	shl	local05, #3
07898     02 00 00 FF 
0789c     38 E4 85 F1 | 	sub	objptr, ##1080
078a0     F2 26 02 F1 | 	add	local05, objptr
078a4     13 13 02 FB | 	rdlong	arg01, local05
078a8     55 00 00 FF 
078ac     0C E4 85 F1 | 	sub	objptr, ##43532
078b0                 | ' 
078b0                 | ' select case s
078b0     71 01 00 FF 
078b4     F0 14 06 F6 | 	mov	arg02, ##@LR__4902
078b8     A4 72 B1 FD | 	call	#__system___string_cmp
078bc     00 FA 0D F2 | 	cmp	result1, #0 wz
078c0     1B FA 05 A6 |  if_e	mov	result1, #27
078c4     00 FA 05 56 |  if_ne	mov	result1, #0
078c8     00 FA 0D F2 | 	cmp	result1, #0 wz
078cc     0C 00 90 AD |  if_e	jmp	#LR__0670
078d0     05 12 06 F6 | 	mov	arg01, #5
078d4     88 ED BF FD | 	call	#_compile_immediate_assign
078d8     08 00 90 FD | 	jmp	#LR__0671
078dc                 | LR__0670
078dc     05 12 06 F6 | 	mov	arg01, #5
078e0     80 E3 BF FD | 	call	#_compile_immediate
078e4                 | LR__0671
078e4                 | ' 
078e4                 | ' 
078e4                 | ' return 0
078e4     00 FA 05 F6 | 	mov	result1, #0
078e8     A7 F0 03 F6 | 	mov	ptra, fp
078ec     B2 00 A0 FD | 	call	#popregs_
078f0                 | _compile_if_ret
078f0     2D 00 64 FD | 	ret
078f4                 | 
078f4                 | ' 
078f4                 | ' function compile_else() as ulong  
078f4                 | _compile_else
078f4     05 4A 05 F6 | 	mov	COUNT_, #5
078f8     A8 00 A0 FD | 	call	#pushregs_
078fc                 | _compile_else_enter
078fc     5A 22 06 F6 | 	mov	local03, #90
07900     0F 25 02 F6 | 	mov	local04, local01
07904     10 27 02 F6 | 	mov	local05, local02
07908     11 1F 02 F6 | 	mov	local01, local03
0790c     6A 00 00 FF 
07910     7C E4 05 F1 | 	add	objptr, ##54396
07914     F2 12 02 FB | 	rdlong	arg01, objptr
07918     09 FB 01 F6 | 	mov	result1, arg01
0791c     01 FA 65 F0 | 	shl	result1, #1
07920     09 FB 01 F1 | 	add	result1, arg01
07924     02 FA 65 F0 | 	shl	result1, #2
07928     03 00 00 FF 
0792c     00 E4 85 F1 | 	sub	objptr, ##1536
07930     F2 FA 01 F1 | 	add	result1, objptr
07934     FD 24 62 FC | 	wrlong	local04, result1
07938     03 00 00 FF 
0793c     00 E4 05 F1 | 	add	objptr, ##1536
07940     F2 FA 01 FB | 	rdlong	result1, objptr
07944     FD 24 02 F6 | 	mov	local04, result1
07948     01 24 66 F0 | 	shl	local04, #1
0794c     FD 24 02 F1 | 	add	local04, result1
07950     02 24 66 F0 | 	shl	local04, #2
07954     03 00 00 FF 
07958     00 E4 85 F1 | 	sub	objptr, ##1536
0795c     F2 24 02 F1 | 	add	local04, objptr
07960     04 24 06 F1 | 	add	local04, #4
07964     12 27 62 FC | 	wrlong	local05, local04
07968     03 00 00 FF 
0796c     00 E4 05 F1 | 	add	objptr, ##1536
07970     F2 24 02 FB | 	rdlong	local04, objptr
07974     12 27 02 F6 | 	mov	local05, local04
07978     01 26 66 F0 | 	shl	local05, #1
0797c     12 27 02 F1 | 	add	local05, local04
07980     02 26 66 F0 | 	shl	local05, #2
07984     03 00 00 FF 
07988     00 E4 85 F1 | 	sub	objptr, ##1536
0798c     F2 26 02 F1 | 	add	local05, objptr
07990     08 26 06 F1 | 	add	local05, #8
07994     13 1F 62 FC | 	wrlong	local01, local05
07998     03 00 00 FF 
0799c     00 E4 05 F1 | 	add	objptr, ##1536
079a0     F2 24 02 FB | 	rdlong	local04, objptr
079a4     01 24 06 F1 | 	add	local04, #1
079a8     F2 24 62 FC | 	wrlong	local04, objptr
079ac                 | ' 
079ac                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
079ac                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
079ac     13 00 00 FF 
079b0     38 E4 85 F1 | 	sub	objptr, ##9784
079b4     F2 26 02 FB | 	rdlong	local05, objptr
079b8     01 26 06 F1 | 	add	local05, #1
079bc     03 26 66 F0 | 	shl	local05, #3
079c0     02 00 00 FF 
079c4     38 E4 85 F1 | 	sub	objptr, ##1080
079c8     F2 26 02 F1 | 	add	local05, objptr
079cc     13 13 02 FB | 	rdlong	arg01, local05
079d0     55 00 00 FF 
079d4     0C E4 85 F1 | 	sub	objptr, ##43532
079d8                 | ' 
079d8                 | ' select case s
079d8     71 01 00 FF 
079dc     F0 14 06 F6 | 	mov	arg02, ##@LR__4902
079e0     7C 71 B1 FD | 	call	#__system___string_cmp
079e4     00 FA 0D F2 | 	cmp	result1, #0 wz
079e8     1B FA 05 A6 |  if_e	mov	result1, #27
079ec     00 FA 05 56 |  if_ne	mov	result1, #0
079f0     00 FA 0D F2 | 	cmp	result1, #0 wz
079f4     0C 00 90 AD |  if_e	jmp	#LR__0680
079f8     05 12 06 F6 | 	mov	arg01, #5
079fc     60 EC BF FD | 	call	#_compile_immediate_assign
07a00     08 00 90 FD | 	jmp	#LR__0681
07a04                 | LR__0680
07a04     05 12 06 F6 | 	mov	arg01, #5
07a08     58 E2 BF FD | 	call	#_compile_immediate
07a0c                 | LR__0681
07a0c                 | ' 
07a0c                 | ' 
07a0c                 | ' return 0
07a0c     00 FA 05 F6 | 	mov	result1, #0
07a10     A7 F0 03 F6 | 	mov	ptra, fp
07a14     B2 00 A0 FD | 	call	#popregs_
07a18                 | _compile_else_ret
07a18     2D 00 64 FD | 	ret
07a1c                 | 
07a1c                 | ' 
07a1c                 | ' 
07a1c                 | ' function compile_dim() as ulong  
07a1c                 | _compile_dim
07a1c     11 4A 05 F6 | 	mov	COUNT_, #17
07a20     A8 00 A0 FD | 	call	#pushregs_
07a24     01 1E 06 F6 | 	mov	local01, #1
07a28     01 20 06 F6 | 	mov	local02, #1
07a2c     01 22 06 F6 | 	mov	local03, #1
07a30                 | ' 
07a30                 | ' dims(0)=1: dims(1)=1: dims(2)=1
07a30                 | ' 
07a30                 | ' if isname(lparts(ct).part$) then 
07a30     57 00 00 FF 
07a34     44 E4 05 F1 | 	add	objptr, ##44612
07a38     F2 18 02 FB | 	rdlong	arg04, objptr
07a3c     03 18 66 F0 | 	shl	arg04, #3
07a40     02 00 00 FF 
07a44     38 E4 85 F1 | 	sub	objptr, ##1080
07a48     F2 18 02 F1 | 	add	arg04, objptr
07a4c     0C 13 02 FB | 	rdlong	arg01, arg04
07a50     55 00 00 FF 
07a54     0C E4 85 F1 | 	sub	objptr, ##43532
07a58     BC D2 BF FD | 	call	#_isname
07a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
07a60     AC 05 90 AD |  if_e	jmp	#LR__0714
07a64     57 00 00 FF 
07a68     44 E4 05 F1 | 	add	objptr, ##44612
07a6c     F2 24 02 FB | 	rdlong	local04, objptr
07a70     03 24 66 F0 | 	shl	local04, #3
07a74     02 00 00 FF 
07a78     38 E4 85 F1 | 	sub	objptr, ##1080
07a7c     F2 24 02 F1 | 	add	local04, objptr
07a80     12 27 02 FB | 	rdlong	local05, local04
07a84     01 28 66 F6 | 	neg	local06, #1
07a88                 | '   varname2$=lparts(ct).part$ 
07a88                 | '   j=-1
07a88                 | '   if varnum>0 then
07a88     04 E4 85 F1 | 	sub	objptr, #4
07a8c     F2 2A 02 FB | 	rdlong	local07, objptr
07a90     55 00 00 FF 
07a94     08 E4 85 F1 | 	sub	objptr, ##43528
07a98     01 2A 56 F2 | 	cmps	local07, #1 wc
07a9c     58 00 90 CD |  if_b	jmp	#LR__0692
07aa0                 | '  '   print "in dim, varnum=";varnum
07aa0                 | '     for i=0 to varnum-1
07aa0     00 2C 06 F6 | 	mov	local08, #0
07aa4     55 00 00 FF 
07aa8     08 E4 05 F1 | 	add	objptr, ##43528
07aac     F2 2E 02 FB | 	rdlong	local09, objptr
07ab0     55 00 00 FF 
07ab4     08 E4 85 F1 | 	sub	objptr, ##43528
07ab8                 | LR__0690
07ab8     17 2D 52 F2 | 	cmps	local08, local09 wc
07abc     38 00 90 3D |  if_ae	jmp	#LR__0691
07ac0                 | '       if variables(i).name=varname2$ then j=i : exit
07ac0     16 25 02 F6 | 	mov	local04, local08
07ac4     04 24 66 F0 | 	shl	local04, #4
07ac8     34 00 00 FF 
07acc     F8 E5 05 F1 | 	add	objptr, ##27128
07ad0     F2 24 02 F1 | 	add	local04, objptr
07ad4     12 13 02 FB | 	rdlong	arg01, local04
07ad8     13 15 02 F6 | 	mov	arg02, local05
07adc     34 00 00 FF 
07ae0     F8 E5 85 F1 | 	sub	objptr, ##27128
07ae4     78 70 B1 FD | 	call	#__system___string_cmp
07ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
07aec     16 29 02 A6 |  if_e	mov	local06, local08
07af0     01 2C 06 51 |  if_ne	add	local08, #1
07af4     C0 FF 9F 5D |  if_ne	jmp	#LR__0690
07af8                 | LR__0691
07af8                 | LR__0692
07af8                 | ' '  if j<>-1 then printerror (42) : return 42
07af8                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
07af8     FF FF 7F FF 
07afc     FF 29 0E F2 | 	cmp	local06, ##-1 wz
07b00     55 00 00 AF 
07b04     08 E4 05 A1 |  if_e	add	objptr, ##43528
07b08     F2 28 02 AB |  if_e	rdlong	local06, objptr
07b0c     55 00 00 AF 
07b10     08 E4 85 A1 |  if_e	sub	objptr, ##43528
07b14     78 00 90 AD |  if_e	jmp	#LR__0693
07b18     00 12 06 F6 | 	mov	arg01, #0
07b1c     B0 C9 B1 FD | 	call	#__system___getiolock_0484
07b20     FD 12 02 F6 | 	mov	arg01, result1
07b24     10 70 B1 FD | 	call	#__system___lockmem
07b28     73 01 00 FF 
07b2c     49 14 06 F6 | 	mov	arg02, ##@LR__5089
07b30     00 12 06 F6 | 	mov	arg01, #0
07b34     00 16 06 F6 | 	mov	arg03, #0
07b38     04 7D B1 FD | 	call	#__system___basic_print_string
07b3c     79 00 00 FF 
07b40     A0 E5 05 F1 | 	add	objptr, ##62368
07b44     F2 14 02 FB | 	rdlong	arg02, objptr
07b48     79 00 00 FF 
07b4c     A0 E5 85 F1 | 	sub	objptr, ##62368
07b50     00 12 06 F6 | 	mov	arg01, #0
07b54     00 16 06 F6 | 	mov	arg03, #0
07b58     0A 18 06 F6 | 	mov	arg04, #10
07b5c     64 7D B1 FD | 	call	#__system___basic_print_unsigned
07b60     73 01 00 FF 
07b64     57 14 06 F6 | 	mov	arg02, ##@LR__5090
07b68     00 12 06 F6 | 	mov	arg01, #0
07b6c     00 16 06 F6 | 	mov	arg03, #0
07b70     CC 7C B1 FD | 	call	#__system___basic_print_string
07b74     00 12 06 F6 | 	mov	arg01, #0
07b78     0A 14 06 F6 | 	mov	arg02, #10
07b7c     00 16 06 F6 | 	mov	arg03, #0
07b80     64 7C B1 FD | 	call	#__system___basic_print_char
07b84     00 12 06 F6 | 	mov	arg01, #0
07b88     44 C9 B1 FD | 	call	#__system___getiolock_0484
07b8c     FD 00 68 FC | 	wrlong	#0, result1
07b90                 | LR__0693
07b90                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
07b90     57 00 00 FF 
07b94     44 E4 05 F1 | 	add	objptr, ##44612
07b98     F2 18 02 FB | 	rdlong	arg04, objptr
07b9c     01 18 06 F1 | 	add	arg04, #1
07ba0     03 18 66 F0 | 	shl	arg04, #3
07ba4     02 00 00 FF 
07ba8     38 E4 85 F1 | 	sub	objptr, ##1080
07bac     F2 18 02 F1 | 	add	arg04, objptr
07bb0     0C 13 02 FB | 	rdlong	arg01, arg04
07bb4     73 01 00 FF 
07bb8     78 14 06 F6 | 	mov	arg02, ##@LR__5091
07bbc     55 00 00 FF 
07bc0     0C E4 85 F1 | 	sub	objptr, ##43532
07bc4     98 6F B1 FD | 	call	#__system___string_cmp
07bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
07bcc     50 00 90 AD |  if_e	jmp	#LR__0694
07bd0     57 00 00 FF 
07bd4     44 E4 05 F1 | 	add	objptr, ##44612
07bd8     F2 2E 02 FB | 	rdlong	local09, objptr
07bdc     01 2E 06 F1 | 	add	local09, #1
07be0     03 2E 66 F0 | 	shl	local09, #3
07be4     02 00 00 FF 
07be8     38 E4 85 F1 | 	sub	objptr, ##1080
07bec     F2 2E 02 F1 | 	add	local09, objptr
07bf0     17 13 02 FB | 	rdlong	arg01, local09
07bf4     73 01 00 FF 
07bf8     7A 14 06 F6 | 	mov	arg02, ##@LR__5092
07bfc     55 00 00 FF 
07c00     0C E4 85 F1 | 	sub	objptr, ##43532
07c04     58 6F B1 FD | 	call	#__system___string_cmp
07c08     00 FA 0D F2 | 	cmp	result1, #0 wz
07c0c     10 00 90 AD |  if_e	jmp	#LR__0694
07c10     2B 12 06 F6 | 	mov	arg01, #43
07c14     C0 2A B1 FD | 	call	#_printerror
07c18     2B FA 05 F6 | 	mov	result1, #43
07c1c     00 05 90 FD | 	jmp	#LR__0716
07c20                 | LR__0694
07c20                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
07c20     57 00 00 FF 
07c24     44 E4 05 F1 | 	add	objptr, ##44612
07c28     F2 14 02 FB | 	rdlong	arg02, objptr
07c2c     01 14 06 F1 | 	add	arg02, #1
07c30     03 14 66 F0 | 	shl	arg02, #3
07c34     02 00 00 FF 
07c38     38 E4 85 F1 | 	sub	objptr, ##1080
07c3c     F2 14 02 F1 | 	add	arg02, objptr
07c40     0A 13 02 FB | 	rdlong	arg01, arg02
07c44     73 01 00 FF 
07c48     7D 14 06 F6 | 	mov	arg02, ##@LR__5093
07c4c     55 00 00 FF 
07c50     0C E4 85 F1 | 	sub	objptr, ##43532
07c54     08 6F B1 FD | 	call	#__system___string_cmp
07c58     00 FA 0D F2 | 	cmp	result1, #0 wz
07c5c     57 00 00 AF 
07c60     44 E4 05 A1 |  if_e	add	objptr, ##44612
07c64     F2 30 02 AB |  if_e	rdlong	local10, objptr
07c68     57 00 00 AF 
07c6c     44 E4 85 A1 |  if_e	sub	objptr, ##44612
07c70     01 30 06 A1 |  if_e	add	local10, #1
07c74     7C 01 90 AD |  if_e	jmp	#LR__0700
07c78     57 00 00 FF 
07c7c     44 E4 05 F1 | 	add	objptr, ##44612
07c80     F2 30 02 FB | 	rdlong	local10, objptr
07c84     57 00 00 FF 
07c88     44 E4 85 F1 | 	sub	objptr, ##44612
07c8c     02 30 06 F1 | 	add	local10, #2
07c90     00 32 06 F6 | 	mov	local11, #0
07c94                 | '   l=ct+2 : m=0 : do
07c94                 | LR__0695
07c94                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07c94                 | '     if isdec(lparts(l).part$) then 
07c94     18 25 02 F6 | 	mov	local04, local10
07c98     03 24 66 F0 | 	shl	local04, #3
07c9c     55 00 00 FF 
07ca0     0C E4 05 F1 | 	add	objptr, ##43532
07ca4     F2 24 02 F1 | 	add	local04, objptr
07ca8     12 13 02 FB | 	rdlong	arg01, local04
07cac     55 00 00 FF 
07cb0     0C E4 85 F1 | 	sub	objptr, ##43532
07cb4     04 D7 BF FD | 	call	#_isdec
07cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
07cbc     44 00 90 AD |  if_e	jmp	#LR__0696
07cc0     19 35 02 F6 | 	mov	local12, local11
07cc4     0F 35 06 F1 | 	add	local12, #local01
07cc8     18 2F 02 F6 | 	mov	local09, local10
07ccc     03 2E 66 F0 | 	shl	local09, #3
07cd0     55 00 00 FF 
07cd4     0C E4 05 F1 | 	add	objptr, ##43532
07cd8     F2 2E 02 F1 | 	add	local09, objptr
07cdc     17 13 02 FB | 	rdlong	arg01, local09
07ce0     00 14 06 F6 | 	mov	arg02, #0
07ce4     55 00 00 FF 
07ce8     0C E4 85 F1 | 	sub	objptr, ##43532
07cec     40 A0 B1 FD | 	call	#__system____builtin_atoi
07cf0     FD 36 02 F6 | 	mov	local13, result1
07cf4                 | 	'.live	local13
07cf4                 | 	'.live	local12
07cf4     00 34 8E F9 | 	altd	local12, #0
07cf8     1B 35 02 F6 | 	mov	local12, local13
07cfc     01 32 06 F1 | 	add	local11, #1
07d00     10 00 90 FD | 	jmp	#LR__0697
07d04                 | LR__0696
07d04     11 12 06 F6 | 	mov	arg01, #17
07d08     CC 29 B1 FD | 	call	#_printerror
07d0c                 | '       printerror (17)  : return(17)
07d0c     11 FA 05 F6 | 	mov	result1, #17
07d10     0C 04 90 FD | 	jmp	#LR__0716
07d14                 | LR__0697
07d14                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07d14     18 25 02 F6 | 	mov	local04, local10
07d18     01 24 06 F1 | 	add	local04, #1
07d1c     03 24 66 F0 | 	shl	local04, #3
07d20     55 00 00 FF 
07d24     0C E4 05 F1 | 	add	objptr, ##43532
07d28     F2 24 02 F1 | 	add	local04, objptr
07d2c     12 13 02 FB | 	rdlong	arg01, local04
07d30     73 01 00 FF 
07d34     80 14 06 F6 | 	mov	arg02, ##@LR__5094
07d38     55 00 00 FF 
07d3c     0C E4 85 F1 | 	sub	objptr, ##43532
07d40     1C 6E B1 FD | 	call	#__system___string_cmp
07d44     00 FA 0D F2 | 	cmp	result1, #0 wz
07d48     48 00 90 AD |  if_e	jmp	#LR__0698
07d4c     18 37 02 F6 | 	mov	local13, local10
07d50     01 36 06 F1 | 	add	local13, #1
07d54     03 36 66 F0 | 	shl	local13, #3
07d58     55 00 00 FF 
07d5c     0C E4 05 F1 | 	add	objptr, ##43532
07d60     F2 36 02 F1 | 	add	local13, objptr
07d64     1B 13 02 FB | 	rdlong	arg01, local13
07d68     73 01 00 FF 
07d6c     82 14 06 F6 | 	mov	arg02, ##@LR__5095
07d70     55 00 00 FF 
07d74     0C E4 85 F1 | 	sub	objptr, ##43532
07d78     E4 6D B1 FD | 	call	#__system___string_cmp
07d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
07d80     10 00 90 AD |  if_e	jmp	#LR__0698
07d84     2C 12 06 F6 | 	mov	arg01, #44
07d88     4C 29 B1 FD | 	call	#_printerror
07d8c     2C FA 05 F6 | 	mov	result1, #44
07d90     8C 03 90 FD | 	jmp	#LR__0716
07d94                 | LR__0698
07d94     02 30 06 F1 | 	add	local10, #2
07d98     18 25 02 F6 | 	mov	local04, local10
07d9c     01 24 86 F1 | 	sub	local04, #1
07da0     03 24 66 F0 | 	shl	local04, #3
07da4     55 00 00 FF 
07da8     0C E4 05 F1 | 	add	objptr, ##43532
07dac     F2 24 02 F1 | 	add	local04, objptr
07db0     12 13 02 FB | 	rdlong	arg01, local04
07db4     73 01 00 FF 
07db8     84 14 06 F6 | 	mov	arg02, ##@LR__5096
07dbc     55 00 00 FF 
07dc0     0C E4 85 F1 | 	sub	objptr, ##43532
07dc4     98 6D B1 FD | 	call	#__system___string_cmp
07dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
07dcc     03 32 56 52 |  if_ne	cmps	local11, #3 wc
07dd0     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0695
07dd4                 | '   if m>3 then printerror(45): return(45)
07dd4     04 32 56 F2 | 	cmps	local11, #4 wc
07dd8     10 00 90 CD |  if_b	jmp	#LR__0699
07ddc     2D 12 06 F6 | 	mov	arg01, #45
07de0     F4 28 B1 FD | 	call	#_printerror
07de4     2D FA 05 F6 | 	mov	result1, #45
07de8     34 03 90 FD | 	jmp	#LR__0716
07dec                 | LR__0699
07dec     00 39 06 F6 | 	mov	local14, #256
07df0     0C 3A 06 F6 | 	mov	local15, #12
07df4                 | LR__0700
07df4                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
07df4                 | '   arraytype=array_no_type : esize=12
07df4                 | ' 1350 
07df4                 | '   if lparts(l).part$="as" then
07df4     18 25 02 F6 | 	mov	local04, local10
07df8     03 24 66 F0 | 	shl	local04, #3
07dfc     55 00 00 FF 
07e00     0C E4 05 F1 | 	add	objptr, ##43532
07e04     F2 24 02 F1 | 	add	local04, objptr
07e08     12 13 02 FB | 	rdlong	arg01, local04
07e0c     73 01 00 FF 
07e10     86 14 06 F6 | 	mov	arg02, ##@LR__5097
07e14     55 00 00 FF 
07e18     0C E4 85 F1 | 	sub	objptr, ##43532
07e1c     40 6D B1 FD | 	call	#__system___string_cmp
07e20     00 FA 0D F2 | 	cmp	result1, #0 wz
07e24     F8 01 90 5D |  if_ne	jmp	#LR__0715
07e28                 | '     select case lparts(l+1).part$
07e28     18 35 02 F6 | 	mov	local12, local10
07e2c     01 34 06 F1 | 	add	local12, #1
07e30     03 34 66 F0 | 	shl	local12, #3
07e34     55 00 00 FF 
07e38     0C E4 05 F1 | 	add	objptr, ##43532
07e3c     F2 34 02 F1 | 	add	local12, objptr
07e40     1A 3D 02 FB | 	rdlong	local16, local12
07e44     73 01 00 FF 
07e48     89 14 06 F6 | 	mov	arg02, ##@LR__5098
07e4c     1E 13 02 F6 | 	mov	arg01, local16
07e50     55 00 00 FF 
07e54     0C E4 85 F1 | 	sub	objptr, ##43532
07e58     04 6D B1 FD | 	call	#__system___string_cmp
07e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
07e60     0C 01 90 AD |  if_e	jmp	#LR__0701
07e64     73 01 00 FF 
07e68     8E 14 06 F6 | 	mov	arg02, ##@LR__5099
07e6c     1E 13 02 F6 | 	mov	arg01, local16
07e70     EC 6C B1 FD | 	call	#__system___string_cmp
07e74     00 FA 0D F2 | 	cmp	result1, #0 wz
07e78     00 01 90 AD |  if_e	jmp	#LR__0702
07e7c     73 01 00 FF 
07e80     94 14 06 F6 | 	mov	arg02, ##@LR__5100
07e84     1E 13 02 F6 | 	mov	arg01, local16
07e88     D4 6C B1 FD | 	call	#__system___string_cmp
07e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
07e90     F4 00 90 AD |  if_e	jmp	#LR__0703
07e94     73 01 00 FF 
07e98     9A 14 06 F6 | 	mov	arg02, ##@LR__5101
07e9c     1E 13 02 F6 | 	mov	arg01, local16
07ea0     BC 6C B1 FD | 	call	#__system___string_cmp
07ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ea8     E8 00 90 AD |  if_e	jmp	#LR__0704
07eac     73 01 00 FF 
07eb0     A1 14 06 F6 | 	mov	arg02, ##@LR__5102
07eb4     1E 13 02 F6 | 	mov	arg01, local16
07eb8     A4 6C B1 FD | 	call	#__system___string_cmp
07ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
07ec0     DC 00 90 AD |  if_e	jmp	#LR__0705
07ec4     73 01 00 FF 
07ec8     A6 14 06 F6 | 	mov	arg02, ##@LR__5103
07ecc     1E 13 02 F6 | 	mov	arg01, local16
07ed0     8C 6C B1 FD | 	call	#__system___string_cmp
07ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ed8     D0 00 90 AD |  if_e	jmp	#LR__0706
07edc     73 01 00 FF 
07ee0     AE 14 06 F6 | 	mov	arg02, ##@LR__5104
07ee4     1E 13 02 F6 | 	mov	arg01, local16
07ee8     74 6C B1 FD | 	call	#__system___string_cmp
07eec     00 FA 0D F2 | 	cmp	result1, #0 wz
07ef0     C4 00 90 AD |  if_e	jmp	#LR__0707
07ef4     73 01 00 FF 
07ef8     B4 14 06 F6 | 	mov	arg02, ##@LR__5105
07efc     1E 13 02 F6 | 	mov	arg01, local16
07f00     5C 6C B1 FD | 	call	#__system___string_cmp
07f04     00 FA 0D F2 | 	cmp	result1, #0 wz
07f08     B8 00 90 AD |  if_e	jmp	#LR__0708
07f0c     73 01 00 FF 
07f10     BA 14 06 F6 | 	mov	arg02, ##@LR__5106
07f14     1E 13 02 F6 | 	mov	arg01, local16
07f18     44 6C B1 FD | 	call	#__system___string_cmp
07f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
07f20     AC 00 90 AD |  if_e	jmp	#LR__0709
07f24     73 01 00 FF 
07f28     C1 14 06 F6 | 	mov	arg02, ##@LR__5107
07f2c     1E 13 02 F6 | 	mov	arg01, local16
07f30     2C 6C B1 FD | 	call	#__system___string_cmp
07f34     00 FA 0D F2 | 	cmp	result1, #0 wz
07f38     A0 00 90 AD |  if_e	jmp	#LR__0710
07f3c     73 01 00 FF 
07f40     C8 14 06 F6 | 	mov	arg02, ##@LR__5108
07f44     1E 13 02 F6 | 	mov	arg01, local16
07f48     14 6C B1 FD | 	call	#__system___string_cmp
07f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
07f50     94 00 90 AD |  if_e	jmp	#LR__0711
07f54     73 01 00 FF 
07f58     CF 14 06 F6 | 	mov	arg02, ##@LR__5109
07f5c     1E 13 02 F6 | 	mov	arg01, local16
07f60     FC 6B B1 FD | 	call	#__system___string_cmp
07f64     00 FA 0D F2 | 	cmp	result1, #0 wz
07f68     88 00 90 AD |  if_e	jmp	#LR__0712
07f6c     90 00 90 FD | 	jmp	#LR__0713
07f70                 | LR__0701
07f70     01 39 06 F6 | 	mov	local14, #257
07f74     01 3A 06 F6 | 	mov	local15, #1
07f78     A4 00 90 FD | 	jmp	#LR__0715
07f7c                 | LR__0702
07f7c     02 39 06 F6 | 	mov	local14, #258
07f80     01 3A 06 F6 | 	mov	local15, #1
07f84     98 00 90 FD | 	jmp	#LR__0715
07f88                 | LR__0703
07f88     03 39 06 F6 | 	mov	local14, #259
07f8c     02 3A 06 F6 | 	mov	local15, #2
07f90     8C 00 90 FD | 	jmp	#LR__0715
07f94                 | LR__0704
07f94     04 39 06 F6 | 	mov	local14, #260
07f98     02 3A 06 F6 | 	mov	local15, #2
07f9c     80 00 90 FD | 	jmp	#LR__0715
07fa0                 | LR__0705
07fa0     05 39 06 F6 | 	mov	local14, #261
07fa4     04 3A 06 F6 | 	mov	local15, #4
07fa8     74 00 90 FD | 	jmp	#LR__0715
07fac                 | LR__0706
07fac     05 39 06 F6 | 	mov	local14, #261
07fb0     04 3A 06 F6 | 	mov	local15, #4
07fb4     68 00 90 FD | 	jmp	#LR__0715
07fb8                 | LR__0707
07fb8     06 39 06 F6 | 	mov	local14, #262
07fbc     04 3A 06 F6 | 	mov	local15, #4
07fc0     5C 00 90 FD | 	jmp	#LR__0715
07fc4                 | LR__0708
07fc4     07 39 06 F6 | 	mov	local14, #263
07fc8     08 3A 06 F6 | 	mov	local15, #8
07fcc     50 00 90 FD | 	jmp	#LR__0715
07fd0                 | LR__0709
07fd0     08 39 06 F6 | 	mov	local14, #264
07fd4     08 3A 06 F6 | 	mov	local15, #8
07fd8     44 00 90 FD | 	jmp	#LR__0715
07fdc                 | LR__0710
07fdc     09 39 06 F6 | 	mov	local14, #265
07fe0     04 3A 06 F6 | 	mov	local15, #4
07fe4     38 00 90 FD | 	jmp	#LR__0715
07fe8                 | LR__0711
07fe8     0A 39 06 F6 | 	mov	local14, #266
07fec     08 3A 06 F6 | 	mov	local15, #8
07ff0     2C 00 90 FD | 	jmp	#LR__0715
07ff4                 | LR__0712
07ff4     0B 39 06 F6 | 	mov	local14, #267
07ff8     04 3A 06 F6 | 	mov	local15, #4
07ffc     20 00 90 FD | 	jmp	#LR__0715
08000                 | LR__0713
08000     2F 12 06 F6 | 	mov	arg01, #47
08004     D0 26 B1 FD | 	call	#_printerror
08008     2F FA 05 F6 | 	mov	result1, #47
0800c     10 01 90 FD | 	jmp	#LR__0716
08010                 | LR__0714
08010     2E 12 06 F6 | 	mov	arg01, #46
08014     C0 26 B1 FD | 	call	#_printerror
08018                 | '   printerror(46): return 46
08018     2E FA 05 F6 | 	mov	result1, #46
0801c     00 01 90 FD | 	jmp	#LR__0716
08020                 | LR__0715
08020     0F 3B 02 FD | 	qmul	local15, local01
08024     18 2A 62 FD | 	getqx	local07
08028     10 2B 02 FD | 	qmul	local07, local02
0802c     18 3C 62 FD | 	getqx	local16
08030     11 3D 02 FD | 	qmul	local16, local03
08034     79 00 00 FF 
08038     88 E5 05 F1 | 	add	objptr, ##62344
0803c     F2 3E 02 FB | 	rdlong	local17, objptr
08040     1C 15 02 F6 | 	mov	arg02, local14
08044     18 3C 62 FD | 	getqx	local16
08048     1E 3F 82 F1 | 	sub	local17, local16
0804c     10 3E 86 F1 | 	sub	local17, #16
08050     0F 3E 26 F5 | 	andn	local17, #15
08054     F2 3E 62 FC | 	wrlong	local17, objptr
08058     79 00 00 FF 
0805c     88 E5 85 F1 | 	sub	objptr, ##62344
08060     1F 13 02 F6 | 	mov	arg01, local17
08064     1C 28 B1 FD | 	call	#_psdpoke
08068     1F 13 02 F6 | 	mov	arg01, local17
0806c     02 12 06 F1 | 	add	arg01, #2
08070     1D 15 02 F6 | 	mov	arg02, local15
08074     0C 28 B1 FD | 	call	#_psdpoke
08078     1F 13 02 F6 | 	mov	arg01, local17
0807c     04 12 06 F1 | 	add	arg01, #4
08080     0F 15 02 F6 | 	mov	arg02, local01
08084     B4 27 B1 FD | 	call	#_pslpoke
08088     1F 13 02 F6 | 	mov	arg01, local17
0808c     08 12 06 F1 | 	add	arg01, #8
08090     10 15 02 F6 | 	mov	arg02, local02
08094     A4 27 B1 FD | 	call	#_pslpoke
08098     1F 13 02 F6 | 	mov	arg01, local17
0809c     0C 12 06 F1 | 	add	arg01, #12
080a0     11 15 02 F6 | 	mov	arg02, local03
080a4     94 27 B1 FD | 	call	#_pslpoke
080a8     14 35 02 F6 | 	mov	local12, local06
080ac     04 34 66 F0 | 	shl	local12, #4
080b0     34 00 00 FF 
080b4     F8 E5 05 F1 | 	add	objptr, ##27128
080b8     F2 34 02 F1 | 	add	local12, objptr
080bc     1A 27 62 FC | 	wrlong	local05, local12
080c0     14 35 02 F6 | 	mov	local12, local06
080c4     04 34 66 F0 | 	shl	local12, #4
080c8     F2 34 02 F1 | 	add	local12, objptr
080cc     04 34 06 F1 | 	add	local12, #4
080d0     1A 3F 62 FC | 	wrlong	local17, local12
080d4     14 35 02 F6 | 	mov	local12, local06
080d8     04 34 66 F0 | 	shl	local12, #4
080dc     F2 34 02 F1 | 	add	local12, objptr
080e0     0C 34 06 F1 | 	add	local12, #12
080e4     1A 39 62 FC | 	wrlong	local14, local12
080e8                 | ' memtop=arrayptr
080e8                 | ' 
080e8                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
080e8                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
080e8                 | ' pslpoke arrayptr+4,dims(0)
080e8                 | ' pslpoke arrayptr+8,dims(1)
080e8                 | ' pslpoke arrayptr+12,dims(2)
080e8                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
080e8                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
080e8                 | ' 
080e8                 | ' 
080e8                 | ' variables(j).name=varname2$
080e8                 | ' variables(j).value.uresult=arrayptr
080e8                 | ' variables(j).vartype=arraytype
080e8                 | ' if j=varnum then varnum+=1
080e8     20 00 00 FF 
080ec     10 E4 05 F1 | 	add	objptr, ##16400
080f0     F2 2A 02 FB | 	rdlong	local07, objptr
080f4     55 00 00 FF 
080f8     08 E4 85 F1 | 	sub	objptr, ##43528
080fc     15 29 0A F2 | 	cmp	local06, local07 wz
08100     55 00 00 AF 
08104     08 E4 05 A1 |  if_e	add	objptr, ##43528
08108     F2 2A 02 AB |  if_e	rdlong	local07, objptr
0810c     01 2A 06 A1 |  if_e	add	local07, #1
08110     F2 2A 62 AC |  if_e	wrlong	local07, objptr
08114     55 00 00 AF 
08118     08 E4 85 A1 |  if_e	sub	objptr, ##43528
0811c                 | ' 
0811c                 | ' return 0
0811c     00 FA 05 F6 | 	mov	result1, #0
08120                 | LR__0716
08120     A7 F0 03 F6 | 	mov	ptra, fp
08124     B2 00 A0 FD | 	call	#popregs_
08128                 | _compile_dim_ret
08128     2D 00 64 FD | 	ret
0812c                 | 
0812c                 | ' 
0812c                 | ' 
0812c                 | ' function compile_for() as ulong  
0812c                 | _compile_for
0812c     07 4A 05 F6 | 	mov	COUNT_, #7
08130     A8 00 A0 FD | 	call	#pushregs_
08134                 | ' 
08134                 | ' 
08134                 | ' 
08134                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
08134     57 00 00 FF 
08138     44 E4 05 F1 | 	add	objptr, ##44612
0813c     F2 14 02 FB | 	rdlong	arg02, objptr
08140     01 14 06 F1 | 	add	arg02, #1
08144     03 14 66 F0 | 	shl	arg02, #3
08148     02 00 00 FF 
0814c     38 E4 85 F1 | 	sub	objptr, ##1080
08150     F2 14 02 F1 | 	add	arg02, objptr
08154     0A 13 02 FB | 	rdlong	arg01, arg02
08158     55 00 00 FF 
0815c     0C E4 85 F1 | 	sub	objptr, ##43532
08160                 | ' 
08160                 | ' select case s
08160     71 01 00 FF 
08164     F0 14 06 F6 | 	mov	arg02, ##@LR__4902
08168     F4 69 B1 FD | 	call	#__system___string_cmp
0816c     00 FA 0D F2 | 	cmp	result1, #0 wz
08170     1B FA 05 A6 |  if_e	mov	result1, #27
08174     00 FA 05 56 |  if_ne	mov	result1, #0
08178     00 FA 0D F2 | 	cmp	result1, #0 wz
0817c     0C 00 90 AD |  if_e	jmp	#LR__0720
08180     05 12 06 F6 | 	mov	arg01, #5
08184     D8 E4 BF FD | 	call	#_compile_immediate_assign
08188     10 00 90 FD | 	jmp	#LR__0721
0818c                 | LR__0720
0818c     20 12 06 F6 | 	mov	arg01, #32
08190     48 E9 BF FD | 	call	#_compile_error
08194     20 FA 05 F6 | 	mov	result1, #32
08198     E8 02 90 FD | 	jmp	#LR__0727
0819c                 | LR__0721
0819c     6A 00 00 FF 
081a0     7C E4 05 F1 | 	add	objptr, ##54396
081a4     F2 12 02 FB | 	rdlong	arg01, objptr
081a8     09 25 02 F6 | 	mov	local04, arg01
081ac     01 24 86 F1 | 	sub	local04, #1
081b0     12 15 02 F6 | 	mov	arg02, local04
081b4     01 14 66 F0 | 	shl	arg02, #1
081b8     12 15 02 F1 | 	add	arg02, local04
081bc     02 14 66 F0 | 	shl	arg02, #2
081c0     03 00 00 FF 
081c4     00 E4 85 F1 | 	sub	objptr, ##1536
081c8     F2 14 02 F1 | 	add	arg02, objptr
081cc     0A 1F 02 FB | 	rdlong	local01, arg02
081d0     04 14 06 F1 | 	add	arg02, #4
081d4     0A 27 02 FB | 	rdlong	local05, arg02
081d8     01 12 86 F1 | 	sub	arg01, #1
081dc     09 29 02 F6 | 	mov	local06, arg01
081e0     01 28 66 F0 | 	shl	local06, #1
081e4     09 29 02 F1 | 	add	local06, arg01
081e8     02 28 66 F0 | 	shl	local06, #2
081ec     F2 28 02 F1 | 	add	local06, objptr
081f0     08 28 06 F1 | 	add	local06, #8
081f4     14 13 02 FB | 	rdlong	arg01, local06
081f8     13 21 02 F6 | 	mov	local02, local05
081fc     09 23 02 F6 | 	mov	local03, arg01
08200                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
08200                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
08200     17 22 0E F2 | 	cmp	local03, #23 wz
08204     67 00 00 FF 
08208     7C E4 85 F1 | 	sub	objptr, ##52860
0820c     10 00 90 AD |  if_e	jmp	#LR__0722
08210     22 12 06 F6 | 	mov	arg01, #34
08214     C4 E8 BF FD | 	call	#_compile_error
08218     22 FA 05 F6 | 	mov	result1, #34
0821c     64 02 90 FD | 	jmp	#LR__0727
08220                 | LR__0722
08220     0F 2B 02 F6 | 	mov	local07, local01
08224                 | ' varnum=t1.result.uresult
08224                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
08224     57 00 00 FF 
08228     44 E4 05 F1 | 	add	objptr, ##44612
0822c     F2 24 02 FB | 	rdlong	local04, objptr
08230     03 24 66 F0 | 	shl	local04, #3
08234     02 00 00 FF 
08238     38 E4 85 F1 | 	sub	objptr, ##1080
0823c     F2 24 02 F1 | 	add	local04, objptr
08240     12 13 02 FB | 	rdlong	arg01, local04
08244     73 01 00 FF 
08248     D6 14 06 F6 | 	mov	arg02, ##@LR__5110
0824c     55 00 00 FF 
08250     0C E4 85 F1 | 	sub	objptr, ##43532
08254     08 69 B1 FD | 	call	#__system___string_cmp
08258     00 FA 0D F2 | 	cmp	result1, #0 wz
0825c     10 00 90 AD |  if_e	jmp	#LR__0723
08260     21 12 06 F6 | 	mov	arg01, #33
08264     74 E8 BF FD | 	call	#_compile_error
08268     21 FA 05 F6 | 	mov	result1, #33
0826c     14 02 90 FD | 	jmp	#LR__0727
08270                 | LR__0723
08270     57 00 00 FF 
08274     44 E4 05 F1 | 	add	objptr, ##44612
08278     F2 24 02 FB | 	rdlong	local04, objptr
0827c     01 24 06 F1 | 	add	local04, #1
08280     F2 24 62 FC | 	wrlong	local04, objptr
08284     57 00 00 FF 
08288     44 E4 85 F1 | 	sub	objptr, ##44612
0828c     90 0F B0 FD | 	call	#_expr
08290                 | ' ct+=1
08290                 | ' expr()  ' there is "to" value pushed on the stack
08290                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
08290     57 00 00 FF 
08294     44 E4 05 F1 | 	add	objptr, ##44612
08298     F2 24 02 FB | 	rdlong	local04, objptr
0829c     03 24 66 F0 | 	shl	local04, #3
082a0     02 00 00 FF 
082a4     38 E4 85 F1 | 	sub	objptr, ##1080
082a8     F2 24 02 F1 | 	add	local04, objptr
082ac     12 13 02 FB | 	rdlong	arg01, local04
082b0     73 01 00 FF 
082b4     D9 14 06 F6 | 	mov	arg02, ##@LR__5111
082b8     55 00 00 FF 
082bc     0C E4 85 F1 | 	sub	objptr, ##43532
082c0     9C 68 B1 FD | 	call	#__system___string_cmp
082c4     00 FA 0D F2 | 	cmp	result1, #0 wz
082c8     3C 00 90 AD |  if_e	jmp	#LR__0724
082cc     57 00 00 FF 
082d0     44 E4 05 F1 | 	add	objptr, ##44612
082d4     F2 28 02 FB | 	rdlong	local06, objptr
082d8     03 28 66 F0 | 	shl	local06, #3
082dc     02 00 00 FF 
082e0     38 E4 85 F1 | 	sub	objptr, ##1080
082e4     F2 28 02 F1 | 	add	local06, objptr
082e8     14 13 02 FB | 	rdlong	arg01, local06
082ec     73 01 00 FF 
082f0     DE 14 06 F6 | 	mov	arg02, ##@LR__5112
082f4     55 00 00 FF 
082f8     0C E4 85 F1 | 	sub	objptr, ##43532
082fc     60 68 B1 FD | 	call	#__system___string_cmp
08300     00 FA 0D F2 | 	cmp	result1, #0 wz
08304     24 00 90 5D |  if_ne	jmp	#LR__0725
08308                 | LR__0724
08308     57 00 00 FF 
0830c     44 E4 05 F1 | 	add	objptr, ##44612
08310     F2 28 02 FB | 	rdlong	local06, objptr
08314     01 28 06 F1 | 	add	local06, #1
08318     F2 28 62 FC | 	wrlong	local06, objptr
0831c     57 00 00 FF 
08320     44 E4 85 F1 | 	sub	objptr, ##44612
08324     F8 0E B0 FD | 	call	#_expr
08328     78 00 90 FD | 	jmp	#LR__0726
0832c                 | LR__0725
0832c     6A 00 00 FF 
08330     7C E4 05 F1 | 	add	objptr, ##54396
08334     F2 28 02 FB | 	rdlong	local06, objptr
08338     14 27 02 F6 | 	mov	local05, local06
0833c     01 26 66 F0 | 	shl	local05, #1
08340     14 27 02 F1 | 	add	local05, local06
08344     02 26 66 F0 | 	shl	local05, #2
08348     03 00 00 FF 
0834c     00 E4 85 F1 | 	sub	objptr, ##1536
08350     F2 26 02 F1 | 	add	local05, objptr
08354     08 26 06 F1 | 	add	local05, #8
08358     13 39 68 FC | 	wrlong	#28, local05
0835c     03 00 00 FF 
08360     00 E4 05 F1 | 	add	objptr, ##1536
08364     F2 28 02 FB | 	rdlong	local06, objptr
08368     14 27 02 F6 | 	mov	local05, local06
0836c     01 26 66 F0 | 	shl	local05, #1
08370     14 27 02 F1 | 	add	local05, local06
08374     02 26 66 F0 | 	shl	local05, #2
08378     03 00 00 FF 
0837c     00 E4 85 F1 | 	sub	objptr, ##1536
08380     F2 26 02 F1 | 	add	local05, objptr
08384     13 03 68 FC | 	wrlong	#1, local05
08388     03 00 00 FF 
0838c     00 E4 05 F1 | 	add	objptr, ##1536
08390     F2 28 02 FB | 	rdlong	local06, objptr
08394     01 28 06 F1 | 	add	local06, #1
08398     F2 28 62 FC | 	wrlong	local06, objptr
0839c     6A 00 00 FF 
083a0     7C E4 85 F1 | 	sub	objptr, ##54396
083a4                 | LR__0726
083a4     6A 00 00 FF 
083a8     7C E4 05 F1 | 	add	objptr, ##54396
083ac     F2 28 02 FB | 	rdlong	local06, objptr
083b0     14 27 02 F6 | 	mov	local05, local06
083b4     01 26 66 F0 | 	shl	local05, #1
083b8     14 27 02 F1 | 	add	local05, local06
083bc     02 26 66 F0 | 	shl	local05, #2
083c0     03 00 00 FF 
083c4     00 E4 85 F1 | 	sub	objptr, ##1536
083c8     F2 26 02 F1 | 	add	local05, objptr
083cc     08 26 06 F1 | 	add	local05, #8
083d0     13 39 68 FC | 	wrlong	#28, local05
083d4     03 00 00 FF 
083d8     00 E4 05 F1 | 	add	objptr, ##1536
083dc     F2 28 02 FB | 	rdlong	local06, objptr
083e0     14 27 02 F6 | 	mov	local05, local06
083e4     01 26 66 F0 | 	shl	local05, #1
083e8     14 27 02 F1 | 	add	local05, local06
083ec     02 26 66 F0 | 	shl	local05, #2
083f0     03 00 00 FF 
083f4     00 E4 85 F1 | 	sub	objptr, ##1536
083f8     F2 26 02 F1 | 	add	local05, objptr
083fc     13 2B 62 FC | 	wrlong	local07, local05
08400     03 00 00 FF 
08404     00 E4 05 F1 | 	add	objptr, ##1536
08408     F2 2A 02 FB | 	rdlong	local07, objptr
0840c     01 2A 06 F1 | 	add	local07, #1
08410     F2 2A 62 FC | 	wrlong	local07, objptr
08414     15 29 02 F6 | 	mov	local06, local07
08418     01 28 66 F0 | 	shl	local06, #1
0841c     15 29 02 F1 | 	add	local06, local07
08420     02 28 66 F0 | 	shl	local06, #2
08424     03 00 00 FF 
08428     00 E4 85 F1 | 	sub	objptr, ##1536
0842c     F2 28 02 F1 | 	add	local06, objptr
08430     08 28 06 F1 | 	add	local06, #8
08434     14 95 68 FC | 	wrlong	#74, local06
08438     03 00 00 FF 
0843c     00 E4 05 F1 | 	add	objptr, ##1536
08440     F2 2A 02 FB | 	rdlong	local07, objptr
08444     15 29 02 F6 | 	mov	local06, local07
08448     01 28 66 F0 | 	shl	local06, #1
0844c     15 29 02 F1 | 	add	local06, local07
08450     02 28 66 F0 | 	shl	local06, #2
08454     03 00 00 FF 
08458     00 E4 85 F1 | 	sub	objptr, ##1536
0845c     F2 28 02 F1 | 	add	local06, objptr
08460     14 01 68 FC | 	wrlong	#0, local06
08464     03 00 00 FF 
08468     00 E4 05 F1 | 	add	objptr, ##1536
0846c     F2 2A 02 FB | 	rdlong	local07, objptr
08470     01 2A 06 F1 | 	add	local07, #1
08474     F2 2A 62 FC | 	wrlong	local07, objptr
08478     6A 00 00 FF 
0847c     7C E4 85 F1 | 	sub	objptr, ##54396
08480                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
08480                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
08480                 | ' 
08480                 | ' 
08480                 | ' return 0
08480     00 FA 05 F6 | 	mov	result1, #0
08484                 | LR__0727
08484     A7 F0 03 F6 | 	mov	ptra, fp
08488     B2 00 A0 FD | 	call	#popregs_
0848c                 | _compile_for_ret
0848c     2D 00 64 FD | 	ret
08490                 | 
08490                 | ' 
08490                 | ' 
08490                 | ' sub do_gosub()
08490                 | _do_gosub
08490     78 00 00 FF 
08494     E8 E4 05 F1 | 	add	objptr, ##61672
08498     F2 00 02 FB | 	rdlong	_var01, objptr
0849c     01 00 06 F1 | 	add	_var01, #1
084a0     F2 00 62 FC | 	wrlong	_var01, objptr
084a4                 | ' gosubtop+=1
084a4                 | ' if compiledline(lineptr_e+1).result_type=token_end then
084a4     0E 00 00 FF 
084a8     68 E4 85 F1 | 	sub	objptr, ##7272
084ac     F2 00 02 FB | 	rdlong	_var01, objptr
084b0     01 00 06 F1 | 	add	_var01, #1
084b4     00 03 02 F6 | 	mov	_var02, _var01
084b8     01 02 66 F0 | 	shl	_var02, #1
084bc     00 03 02 F1 | 	add	_var02, _var01
084c0     02 02 66 F0 | 	shl	_var02, #2
084c4     03 00 00 FF 
084c8     04 E4 85 F1 | 	sub	objptr, ##1540
084cc     F2 02 02 F1 | 	add	_var02, objptr
084d0     08 02 06 F1 | 	add	_var02, #8
084d4     01 03 02 FB | 	rdlong	_var02, _var02
084d8     FE 03 0E F2 | 	cmp	_var02, #510 wz
084dc     67 00 00 FF 
084e0     7C E4 85 F1 | 	sub	objptr, ##52860
084e4     58 00 90 5D |  if_ne	jmp	#LR__0730
084e8     78 00 00 FF 
084ec     E8 E4 05 F1 | 	add	objptr, ##61672
084f0     F2 02 02 FB | 	rdlong	_var02, objptr
084f4     03 02 66 F0 | 	shl	_var02, #3
084f8     03 00 00 FF 
084fc     38 E5 85 F1 | 	sub	objptr, ##1848
08500     F2 02 02 F1 | 	add	_var02, objptr
08504     03 00 00 FF 
08508     0C E5 05 F1 | 	add	objptr, ##1804
0850c     F2 00 02 FB | 	rdlong	_var01, objptr
08510     01 01 62 FC | 	wrlong	_var01, _var02
08514     2C E4 05 F1 | 	add	objptr, #44
08518     F2 02 02 FB | 	rdlong	_var02, objptr
0851c     03 02 66 F0 | 	shl	_var02, #3
08520     03 00 00 FF 
08524     38 E5 85 F1 | 	sub	objptr, ##1848
08528     F2 02 02 F1 | 	add	_var02, objptr
0852c     04 02 06 F1 | 	add	_var02, #4
08530     01 01 68 FC | 	wrlong	#0, _var02
08534     74 00 00 FF 
08538     B0 E5 85 F1 | 	sub	objptr, ##59824
0853c     64 00 90 FD | 	jmp	#LR__0731
08540                 | LR__0730
08540     78 00 00 FF 
08544     E8 E4 05 F1 | 	add	objptr, ##61672
08548     F2 02 02 FB | 	rdlong	_var02, objptr
0854c     03 02 66 F0 | 	shl	_var02, #3
08550     03 00 00 FF 
08554     38 E5 85 F1 | 	sub	objptr, ##1848
08558     F2 02 02 F1 | 	add	_var02, objptr
0855c     03 00 00 FF 
08560     14 E5 05 F1 | 	add	objptr, ##1812
08564     F2 00 02 FB | 	rdlong	_var01, objptr
08568     01 01 62 FC | 	wrlong	_var01, _var02
0856c     24 E4 05 F1 | 	add	objptr, #36
08570     F2 02 02 FB | 	rdlong	_var02, objptr
08574     03 02 66 F0 | 	shl	_var02, #3
08578     03 00 00 FF 
0857c     38 E5 85 F1 | 	sub	objptr, ##1848
08580     F2 02 02 F1 | 	add	_var02, objptr
08584     0A 00 00 FF 
08588     30 E5 85 F1 | 	sub	objptr, ##5424
0858c     F2 00 02 FB | 	rdlong	_var01, objptr
08590     6A 00 00 FF 
08594     80 E4 85 F1 | 	sub	objptr, ##54400
08598     02 00 06 F1 | 	add	_var01, #2
0859c     04 02 06 F1 | 	add	_var02, #4
085a0     01 01 62 FC | 	wrlong	_var01, _var02
085a4                 | LR__0731
085a4                 | _do_gosub_ret
085a4     2D 00 64 FD | 	ret
085a8                 | 
085a8                 | ' 
085a8                 | ' 
085a8                 | ' sub do_for()
085a8                 | _do_for
085a8     01 4A 05 F6 | 	mov	COUNT_, #1
085ac     A8 00 A0 FD | 	call	#pushregs_
085b0     10 F0 07 F1 | 	add	ptra, #16
085b4     78 00 00 FF 
085b8     E4 E4 05 F1 | 	add	objptr, ##61668
085bc     F2 12 02 FB | 	rdlong	arg01, objptr
085c0     01 12 06 F1 | 	add	arg01, #1
085c4     F2 12 62 FC | 	wrlong	arg01, objptr
085c8     78 00 00 FF 
085cc     E4 E4 85 F1 | 	sub	objptr, ##61668
085d0     8C 22 B0 FD | 	call	#_pop
085d4     A7 FA 61 FC | 	wrlong	result1, fp
085d8     04 4E 05 F1 | 	add	fp, #4
085dc     A7 FC 61 FC | 	wrlong	result2, fp
085e0     04 4E 05 F1 | 	add	fp, #4
085e4     A7 FE 61 FC | 	wrlong	result3, fp
085e8     08 4E 85 F1 | 	sub	fp, #8
085ec     78 00 00 FF 
085f0     E4 E4 05 F1 | 	add	objptr, ##61668
085f4     F2 12 02 FB | 	rdlong	arg01, objptr
085f8     09 1F 02 F6 | 	mov	local01, arg01
085fc     02 1E 66 F0 | 	shl	local01, #2
08600     09 1F 02 F1 | 	add	local01, arg01
08604     02 1E 66 F0 | 	shl	local01, #2
08608     06 00 00 FF 
0860c     48 E4 85 F1 | 	sub	objptr, ##3144
08610     F2 1E 02 F1 | 	add	local01, objptr
08614     A7 12 02 FB | 	rdlong	arg01, fp
08618     08 1E 06 F1 | 	add	local01, #8
0861c     0F 13 62 FC | 	wrlong	arg01, local01
08620     72 00 00 FF 
08624     9C E4 85 F1 | 	sub	objptr, ##58524
08628     34 22 B0 FD | 	call	#_pop
0862c     A7 FA 61 FC | 	wrlong	result1, fp
08630     04 4E 05 F1 | 	add	fp, #4
08634     A7 FC 61 FC | 	wrlong	result2, fp
08638     04 4E 05 F1 | 	add	fp, #4
0863c     A7 FE 61 FC | 	wrlong	result3, fp
08640     08 4E 85 F1 | 	sub	fp, #8
08644     78 00 00 FF 
08648     E4 E4 05 F1 | 	add	objptr, ##61668
0864c     F2 12 02 FB | 	rdlong	arg01, objptr
08650     09 1F 02 F6 | 	mov	local01, arg01
08654     02 1E 66 F0 | 	shl	local01, #2
08658     09 1F 02 F1 | 	add	local01, arg01
0865c     02 1E 66 F0 | 	shl	local01, #2
08660     06 00 00 FF 
08664     48 E4 85 F1 | 	sub	objptr, ##3144
08668     F2 1E 02 F1 | 	add	local01, objptr
0866c     A7 12 02 F6 | 	mov	arg01, fp
08670     72 00 00 FF 
08674     9C E4 85 F1 | 	sub	objptr, ##58524
08678     78 AE B0 FD | 	call	#_converttoint
0867c     FD 12 02 F6 | 	mov	arg01, result1
08680     0C 1E 06 F1 | 	add	local01, #12
08684     0F 13 62 FC | 	wrlong	arg01, local01
08688     D4 21 B0 FD | 	call	#_pop
0868c     A7 FA 61 FC | 	wrlong	result1, fp
08690     04 4E 05 F1 | 	add	fp, #4
08694     A7 FC 61 FC | 	wrlong	result2, fp
08698     04 4E 05 F1 | 	add	fp, #4
0869c     A7 FE 61 FC | 	wrlong	result3, fp
086a0     08 4E 85 F1 | 	sub	fp, #8
086a4     78 00 00 FF 
086a8     E4 E4 05 F1 | 	add	objptr, ##61668
086ac     F2 12 02 FB | 	rdlong	arg01, objptr
086b0     09 1F 02 F6 | 	mov	local01, arg01
086b4     02 1E 66 F0 | 	shl	local01, #2
086b8     09 1F 02 F1 | 	add	local01, arg01
086bc     02 1E 66 F0 | 	shl	local01, #2
086c0     06 00 00 FF 
086c4     48 E4 85 F1 | 	sub	objptr, ##3144
086c8     F2 1E 02 F1 | 	add	local01, objptr
086cc     A7 12 02 F6 | 	mov	arg01, fp
086d0     72 00 00 FF 
086d4     9C E4 85 F1 | 	sub	objptr, ##58524
086d8     18 AE B0 FD | 	call	#_converttoint
086dc     10 1E 06 F1 | 	add	local01, #16
086e0     0F FB 61 FC | 	wrlong	result1, local01
086e4                 | ' fortop+=1
086e4                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
086e4                 | ' 'if i> maxfor then printerror(36) : return
086e4                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
086e4                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
086e4                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
086e4                 | ' if compiledline(lineptr_e).result_type=token_end then
086e4     6A 00 00 FF 
086e8     80 E4 05 F1 | 	add	objptr, ##54400
086ec     F2 12 02 FB | 	rdlong	arg01, objptr
086f0     09 1F 02 F6 | 	mov	local01, arg01
086f4     01 1E 66 F0 | 	shl	local01, #1
086f8     09 1F 02 F1 | 	add	local01, arg01
086fc     02 1E 66 F0 | 	shl	local01, #2
08700     03 00 00 FF 
08704     04 E4 85 F1 | 	sub	objptr, ##1540
08708     F2 1E 02 F1 | 	add	local01, objptr
0870c     08 1E 06 F1 | 	add	local01, #8
08710     0F 1F 02 FB | 	rdlong	local01, local01
08714     FE 1F 0E F2 | 	cmp	local01, #510 wz
08718     67 00 00 FF 
0871c     7C E4 85 F1 | 	sub	objptr, ##52860
08720     70 00 90 5D |  if_ne	jmp	#LR__0740
08724     78 00 00 FF 
08728     E4 E4 05 F1 | 	add	objptr, ##61668
0872c     F2 12 02 FB | 	rdlong	arg01, objptr
08730     09 1F 02 F6 | 	mov	local01, arg01
08734     02 1E 66 F0 | 	shl	local01, #2
08738     09 1F 02 F1 | 	add	local01, arg01
0873c     02 1E 66 F0 | 	shl	local01, #2
08740     06 00 00 FF 
08744     48 E4 85 F1 | 	sub	objptr, ##3144
08748     F2 1E 02 F1 | 	add	local01, objptr
0874c     06 00 00 FF 
08750     20 E4 05 F1 | 	add	objptr, ##3104
08754     F2 12 02 FB | 	rdlong	arg01, objptr
08758     0F 13 62 FC | 	wrlong	arg01, local01
0875c     28 E4 05 F1 | 	add	objptr, #40
08760     F2 12 02 FB | 	rdlong	arg01, objptr
08764     09 1F 02 F6 | 	mov	local01, arg01
08768     02 1E 66 F0 | 	shl	local01, #2
0876c     09 1F 02 F1 | 	add	local01, arg01
08770     02 1E 66 F0 | 	shl	local01, #2
08774     06 00 00 FF 
08778     48 E4 85 F1 | 	sub	objptr, ##3144
0877c     F2 1E 02 F1 | 	add	local01, objptr
08780     04 1E 06 F1 | 	add	local01, #4
08784     0F 01 68 FC | 	wrlong	#0, local01
08788     72 00 00 FF 
0878c     9C E4 85 F1 | 	sub	objptr, ##58524
08790     7C 00 90 FD | 	jmp	#LR__0741
08794                 | LR__0740
08794     78 00 00 FF 
08798     E4 E4 05 F1 | 	add	objptr, ##61668
0879c     F2 12 02 FB | 	rdlong	arg01, objptr
087a0     09 1F 02 F6 | 	mov	local01, arg01
087a4     02 1E 66 F0 | 	shl	local01, #2
087a8     09 1F 02 F1 | 	add	local01, arg01
087ac     02 1E 66 F0 | 	shl	local01, #2
087b0     06 00 00 FF 
087b4     48 E4 85 F1 | 	sub	objptr, ##3144
087b8     F2 1E 02 F1 | 	add	local01, objptr
087bc     06 00 00 FF 
087c0     28 E4 05 F1 | 	add	objptr, ##3112
087c4     F2 12 02 FB | 	rdlong	arg01, objptr
087c8     0F 13 62 FC | 	wrlong	arg01, local01
087cc     20 E4 05 F1 | 	add	objptr, #32
087d0     F2 12 02 FB | 	rdlong	arg01, objptr
087d4     09 1F 02 F6 | 	mov	local01, arg01
087d8     02 1E 66 F0 | 	shl	local01, #2
087dc     09 1F 02 F1 | 	add	local01, arg01
087e0     02 1E 66 F0 | 	shl	local01, #2
087e4     06 00 00 FF 
087e8     48 E4 85 F1 | 	sub	objptr, ##3144
087ec     F2 1E 02 F1 | 	add	local01, objptr
087f0     08 00 00 FF 
087f4     1C E4 85 F1 | 	sub	objptr, ##4124
087f8     F2 12 02 FB | 	rdlong	arg01, objptr
087fc     6A 00 00 FF 
08800     80 E4 85 F1 | 	sub	objptr, ##54400
08804     01 12 06 F1 | 	add	arg01, #1
08808     04 1E 06 F1 | 	add	local01, #4
0880c     0F 13 62 FC | 	wrlong	arg01, local01
08810                 | LR__0741
08810     A7 F0 03 F6 | 	mov	ptra, fp
08814     B2 00 A0 FD | 	call	#popregs_
08818                 | _do_for_ret
08818     2D 00 64 FD | 	ret
0881c                 | 
0881c                 | ' 
0881c                 | ' ' now do_next todo
0881c                 | ' 
0881c                 | ' sub do_return()
0881c                 | _do_return
0881c                 | ' if gosubtop>0 then
0881c     78 00 00 FF 
08820     E8 E4 05 F1 | 	add	objptr, ##61672
08824     F2 00 02 FB | 	rdlong	_var01, objptr
08828     78 00 00 FF 
0882c     E8 E4 85 F1 | 	sub	objptr, ##61672
08830     01 00 56 F2 | 	cmps	_var01, #1 wc
08834     8C 00 90 CD |  if_b	jmp	#LR__0750
08838     78 00 00 FF 
0883c     E8 E4 05 F1 | 	add	objptr, ##61672
08840     F2 00 02 FB | 	rdlong	_var01, objptr
08844     03 00 66 F0 | 	shl	_var01, #3
08848     03 00 00 FF 
0884c     38 E5 85 F1 | 	sub	objptr, ##1848
08850     F2 00 02 F1 | 	add	_var01, objptr
08854     00 01 02 FB | 	rdlong	_var01, _var01
08858     03 00 00 FF 
0885c     0C E5 05 F1 | 	add	objptr, ##1804
08860     F2 00 62 FC | 	wrlong	_var01, objptr
08864     2C E4 05 F1 | 	add	objptr, #44
08868     F2 00 02 FB | 	rdlong	_var01, objptr
0886c     03 00 66 F0 | 	shl	_var01, #3
08870     03 00 00 FF 
08874     38 E5 85 F1 | 	sub	objptr, ##1848
08878     F2 00 02 F1 | 	add	_var01, objptr
0887c     04 00 06 F1 | 	add	_var01, #4
08880     00 01 02 FB | 	rdlong	_var01, _var01
08884     03 00 00 FF 
08888     10 E5 05 F1 | 	add	objptr, ##1808
0888c     F2 00 62 FC | 	wrlong	_var01, objptr
08890     0E 00 00 FF 
08894     44 E4 85 F1 | 	sub	objptr, ##7236
08898     F2 00 02 FB | 	rdlong	_var01, objptr
0889c     01 00 86 F1 | 	sub	_var01, #1
088a0     04 E4 05 F1 | 	add	objptr, #4
088a4     F2 00 62 FC | 	wrlong	_var01, objptr
088a8     0E 00 00 FF 
088ac     68 E4 05 F1 | 	add	objptr, ##7272
088b0     F2 00 02 FB | 	rdlong	_var01, objptr
088b4     01 00 86 F1 | 	sub	_var01, #1
088b8     F2 00 62 FC | 	wrlong	_var01, objptr
088bc     78 00 00 FF 
088c0     E8 E4 85 F1 | 	sub	objptr, ##61672
088c4                 | LR__0750
088c4                 | _do_return_ret
088c4     2D 00 64 FD | 	ret
088c8                 | 
088c8                 | ' 
088c8                 | ' sub do_pop()
088c8                 | _do_pop
088c8                 | ' if gosubtop>0 then  gosubtop -=1 
088c8     78 00 00 FF 
088cc     E8 E4 05 F1 | 	add	objptr, ##61672
088d0     F2 00 02 FB | 	rdlong	_var01, objptr
088d4     78 00 00 FF 
088d8     E8 E4 85 F1 | 	sub	objptr, ##61672
088dc     01 00 56 F2 | 	cmps	_var01, #1 wc
088e0     78 00 00 3F 
088e4     E8 E4 05 31 |  if_ae	add	objptr, ##61672
088e8     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
088ec     01 00 86 31 |  if_ae	sub	_var01, #1
088f0     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
088f4     78 00 00 3F 
088f8     E8 E4 85 31 |  if_ae	sub	objptr, ##61672
088fc                 | _do_pop_ret
088fc     2D 00 64 FD | 	ret
08900                 | 
08900                 | ' 
08900                 | ' sub do_next()
08900                 | _do_next
08900     04 4A 05 F6 | 	mov	COUNT_, #4
08904     A8 00 A0 FD | 	call	#pushregs_
08908     54 1F B0 FD | 	call	#_pop
0890c     FD 1E 02 F6 | 	mov	local01, result1
08910     FE 20 02 F6 | 	mov	local02, result2
08914     FF 22 02 F6 | 	mov	local03, result3
08918                 | ' 
08918                 | ' t1=pop() :varnum=t1.result.uresult
08918                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
08918     78 00 00 FF 
0891c     E4 E4 05 F1 | 	add	objptr, ##61668
08920     F2 12 02 FB | 	rdlong	arg01, objptr
08924     09 15 02 F6 | 	mov	arg02, arg01
08928     02 14 66 F0 | 	shl	arg02, #2
0892c     09 15 02 F1 | 	add	arg02, arg01
08930     02 14 66 F0 | 	shl	arg02, #2
08934     06 00 00 FF 
08938     48 E4 85 F1 | 	sub	objptr, ##3144
0893c     F2 14 02 F1 | 	add	arg02, objptr
08940     08 14 06 F1 | 	add	arg02, #8
08944     0A 15 02 FB | 	rdlong	arg02, arg02
08948     0F 15 0A F2 | 	cmp	arg02, local01 wz
0894c     72 00 00 FF 
08950     9C E4 85 F1 | 	sub	objptr, ##58524
08954     0C 00 90 AD |  if_e	jmp	#LR__0760
08958     25 12 06 F6 | 	mov	arg01, #37
0895c     78 1D B1 FD | 	call	#_printerror
08960     A8 02 90 FD | 	jmp	#LR__0765
08964                 | LR__0760
08964                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
08964     0F 15 02 F6 | 	mov	arg02, local01
08968     04 14 66 F0 | 	shl	arg02, #4
0896c     34 00 00 FF 
08970     F8 E5 05 F1 | 	add	objptr, ##27128
08974     F2 14 02 F1 | 	add	arg02, objptr
08978     0C 14 06 F1 | 	add	arg02, #12
0897c     0A 15 02 FB | 	rdlong	arg02, arg02
08980     1E 14 0E F2 | 	cmp	arg02, #30 wz
08984     34 00 00 FF 
08988     F8 E5 85 F1 | 	sub	objptr, ##27128
0898c     54 00 90 5D |  if_ne	jmp	#LR__0761
08990     0F 15 02 F6 | 	mov	arg02, local01
08994     04 14 66 F0 | 	shl	arg02, #4
08998     34 00 00 FF 
0899c     F8 E5 05 F1 | 	add	objptr, ##27128
089a0     F2 14 02 F1 | 	add	arg02, objptr
089a4     0C 14 06 F1 | 	add	arg02, #12
089a8     0A 39 68 FC | 	wrlong	#28, arg02
089ac     0F 25 02 F6 | 	mov	local04, local01
089b0     04 24 66 F0 | 	shl	local04, #4
089b4     F2 24 02 F1 | 	add	local04, objptr
089b8     0F 13 02 F6 | 	mov	arg01, local01
089bc     04 12 66 F0 | 	shl	arg01, #4
089c0     F2 12 02 F1 | 	add	arg01, objptr
089c4     04 12 06 F1 | 	add	arg01, #4
089c8     09 13 02 FB | 	rdlong	arg01, arg01
089cc     34 00 00 FF 
089d0     F8 E5 85 F1 | 	sub	objptr, ##27128
089d4     01 14 06 F6 | 	mov	arg02, #1
089d8     A4 91 B1 FD | 	call	#__system___float_tointeger
089dc     04 24 06 F1 | 	add	local04, #4
089e0     12 FB 61 FC | 	wrlong	result1, local04
089e4                 | LR__0761
089e4     78 00 00 FF 
089e8     E4 E4 05 F1 | 	add	objptr, ##61668
089ec     F2 12 02 FB | 	rdlong	arg01, objptr
089f0     09 25 02 F6 | 	mov	local04, arg01
089f4     02 24 66 F0 | 	shl	local04, #2
089f8     09 25 02 F1 | 	add	local04, arg01
089fc     02 24 66 F0 | 	shl	local04, #2
08a00     06 00 00 FF 
08a04     48 E4 85 F1 | 	sub	objptr, ##3144
08a08     F2 24 02 F1 | 	add	local04, objptr
08a0c     0C 24 06 F1 | 	add	local04, #12
08a10     12 25 02 FB | 	rdlong	local04, local04
08a14     0F 13 02 F6 | 	mov	arg01, local01
08a18     04 12 66 F0 | 	shl	arg01, #4
08a1c     3D 00 00 FF 
08a20     A4 E4 85 F1 | 	sub	objptr, ##31396
08a24     F2 12 02 F1 | 	add	arg01, objptr
08a28     0F FF 01 F6 | 	mov	result3, local01
08a2c     04 FE 65 F0 | 	shl	result3, #4
08a30     F2 FE 01 F1 | 	add	result3, objptr
08a34     04 FE 05 F1 | 	add	result3, #4
08a38     FF FE 01 FB | 	rdlong	result3, result3
08a3c     12 FF 01 F1 | 	add	result3, local04
08a40     04 12 06 F1 | 	add	arg01, #4
08a44     09 FF 61 FC | 	wrlong	result3, arg01
08a48                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
08a48                 | ' if fortable(fortop).stepval>=0 then
08a48     43 00 00 FF 
08a4c     EC E4 05 F1 | 	add	objptr, ##34540
08a50     F2 12 02 FB | 	rdlong	arg01, objptr
08a54     09 25 02 F6 | 	mov	local04, arg01
08a58     02 24 66 F0 | 	shl	local04, #2
08a5c     09 25 02 F1 | 	add	local04, arg01
08a60     02 24 66 F0 | 	shl	local04, #2
08a64     06 00 00 FF 
08a68     48 E4 85 F1 | 	sub	objptr, ##3144
08a6c     F2 24 02 F1 | 	add	local04, objptr
08a70     0C 24 06 F1 | 	add	local04, #12
08a74     12 25 02 FB | 	rdlong	local04, local04
08a78     00 24 56 F2 | 	cmps	local04, #0 wc
08a7c     72 00 00 FF 
08a80     9C E4 85 F1 | 	sub	objptr, ##58524
08a84     78 00 90 CD |  if_b	jmp	#LR__0762
08a88                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
08a88     04 1E 66 F0 | 	shl	local01, #4
08a8c     34 00 00 FF 
08a90     F8 E5 05 F1 | 	add	objptr, ##27128
08a94     F2 1E 02 F1 | 	add	local01, objptr
08a98     43 00 00 FF 
08a9c     EC E4 05 F1 | 	add	objptr, ##34540
08aa0     F2 24 02 FB | 	rdlong	local04, objptr
08aa4     12 13 02 F6 | 	mov	arg01, local04
08aa8     02 12 66 F0 | 	shl	arg01, #2
08aac     12 13 02 F1 | 	add	arg01, local04
08ab0     02 12 66 F0 | 	shl	arg01, #2
08ab4     06 00 00 FF 
08ab8     48 E4 85 F1 | 	sub	objptr, ##3144
08abc     F2 12 02 F1 | 	add	arg01, objptr
08ac0     04 1E 06 F1 | 	add	local01, #4
08ac4     0F 25 02 FB | 	rdlong	local04, local01
08ac8     10 12 06 F1 | 	add	arg01, #16
08acc     09 13 02 FB | 	rdlong	arg01, arg01
08ad0     09 25 5A F2 | 	cmps	local04, arg01 wcz
08ad4     72 00 00 FF 
08ad8     9C E4 85 F1 | 	sub	objptr, ##58524
08adc     9C 00 90 ED |  if_be	jmp	#LR__0764
08ae0     78 00 00 FF 
08ae4     E4 E4 05 F1 | 	add	objptr, ##61668
08ae8     F2 24 02 FB | 	rdlong	local04, objptr
08aec     01 24 86 F1 | 	sub	local04, #1
08af0     F2 24 62 FC | 	wrlong	local04, objptr
08af4     78 00 00 FF 
08af8     E4 E4 85 F1 | 	sub	objptr, ##61668
08afc     0C 01 90 FD | 	jmp	#LR__0765
08b00                 | LR__0762
08b00                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
08b00     0F 13 02 F6 | 	mov	arg01, local01
08b04     04 12 66 F0 | 	shl	arg01, #4
08b08     34 00 00 FF 
08b0c     F8 E5 05 F1 | 	add	objptr, ##27128
08b10     F2 12 02 F1 | 	add	arg01, objptr
08b14     43 00 00 FF 
08b18     EC E4 05 F1 | 	add	objptr, ##34540
08b1c     F2 24 02 FB | 	rdlong	local04, objptr
08b20     12 1F 02 F6 | 	mov	local01, local04
08b24     02 1E 66 F0 | 	shl	local01, #2
08b28     12 1F 02 F1 | 	add	local01, local04
08b2c     02 1E 66 F0 | 	shl	local01, #2
08b30     06 00 00 FF 
08b34     48 E4 85 F1 | 	sub	objptr, ##3144
08b38     F2 1E 02 F1 | 	add	local01, objptr
08b3c     04 12 06 F1 | 	add	arg01, #4
08b40     09 13 02 FB | 	rdlong	arg01, arg01
08b44     10 1E 06 F1 | 	add	local01, #16
08b48     0F 1F 02 FB | 	rdlong	local01, local01
08b4c     0F 13 52 F2 | 	cmps	arg01, local01 wc
08b50     72 00 00 FF 
08b54     9C E4 85 F1 | 	sub	objptr, ##58524
08b58     20 00 90 3D |  if_ae	jmp	#LR__0763
08b5c     78 00 00 FF 
08b60     E4 E4 05 F1 | 	add	objptr, ##61668
08b64     F2 24 02 FB | 	rdlong	local04, objptr
08b68     01 24 86 F1 | 	sub	local04, #1
08b6c     F2 24 62 FC | 	wrlong	local04, objptr
08b70     78 00 00 FF 
08b74     E4 E4 85 F1 | 	sub	objptr, ##61668
08b78     90 00 90 FD | 	jmp	#LR__0765
08b7c                 | LR__0763
08b7c                 | LR__0764
08b7c     78 00 00 FF 
08b80     E4 E4 05 F1 | 	add	objptr, ##61668
08b84     F2 1E 02 FB | 	rdlong	local01, objptr
08b88     0F 25 02 F6 | 	mov	local04, local01
08b8c     02 24 66 F0 | 	shl	local04, #2
08b90     0F 25 02 F1 | 	add	local04, local01
08b94     02 24 66 F0 | 	shl	local04, #2
08b98     06 00 00 FF 
08b9c     48 E4 85 F1 | 	sub	objptr, ##3144
08ba0     F2 24 02 F1 | 	add	local04, objptr
08ba4     12 25 02 FB | 	rdlong	local04, local04
08ba8     06 00 00 FF 
08bac     20 E4 05 F1 | 	add	objptr, ##3104
08bb0     F2 24 62 FC | 	wrlong	local04, objptr
08bb4     28 E4 05 F1 | 	add	objptr, #40
08bb8     F2 1E 02 FB | 	rdlong	local01, objptr
08bbc     0F 25 02 F6 | 	mov	local04, local01
08bc0     02 24 66 F0 | 	shl	local04, #2
08bc4     0F 25 02 F1 | 	add	local04, local01
08bc8     02 24 66 F0 | 	shl	local04, #2
08bcc     06 00 00 FF 
08bd0     48 E4 85 F1 | 	sub	objptr, ##3144
08bd4     F2 24 02 F1 | 	add	local04, objptr
08bd8     04 24 06 F1 | 	add	local04, #4
08bdc     12 25 02 FB | 	rdlong	local04, local04
08be0     06 00 00 FF 
08be4     24 E4 05 F1 | 	add	objptr, ##3108
08be8     F2 24 62 FC | 	wrlong	local04, objptr
08bec     0E 00 00 FF 
08bf0     44 E4 85 F1 | 	sub	objptr, ##7236
08bf4     F2 24 02 FB | 	rdlong	local04, objptr
08bf8     01 24 86 F1 | 	sub	local04, #1
08bfc     04 E4 05 F1 | 	add	objptr, #4
08c00     F2 24 62 FC | 	wrlong	local04, objptr
08c04     6A 00 00 FF 
08c08     80 E4 85 F1 | 	sub	objptr, ##54400
08c0c                 | LR__0765
08c0c     A7 F0 03 F6 | 	mov	ptra, fp
08c10     B2 00 A0 FD | 	call	#popregs_
08c14                 | _do_next_ret
08c14     2D 00 64 FD | 	ret
08c18                 | 
08c18                 | ' 
08c18                 | ' 
08c18                 | ' function compile_next() as ulong
08c18                 | _compile_next
08c18     04 4A 05 F6 | 	mov	COUNT_, #4
08c1c     A8 00 A0 FD | 	call	#pushregs_
08c20     57 00 00 FF 
08c24     44 E4 05 F1 | 	add	objptr, ##44612
08c28     F2 12 02 FB | 	rdlong	arg01, objptr
08c2c     03 12 66 F0 | 	shl	arg01, #3
08c30     02 00 00 FF 
08c34     38 E4 85 F1 | 	sub	objptr, ##1080
08c38     F2 12 02 F1 | 	add	arg01, objptr
08c3c     09 1F 02 FB | 	rdlong	local01, arg01
08c40                 | ' 
08c40                 | ' varname$=lparts(ct).part$ 
08c40                 | ' 'suffix$=right$(varname$,1)
08c40                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
08c40                 | ' if varnum=0 then compile_error(35)  : return 35
08c40     04 E4 85 F1 | 	sub	objptr, #4
08c44     F2 14 0A FB | 	rdlong	arg02, objptr wz
08c48     55 00 00 FF 
08c4c     08 E4 85 F1 | 	sub	objptr, ##43528
08c50     10 00 90 5D |  if_ne	jmp	#LR__0770
08c54     23 12 06 F6 | 	mov	arg01, #35
08c58     80 DE BF FD | 	call	#_compile_error
08c5c     23 FA 05 F6 | 	mov	result1, #35
08c60     58 01 90 FD | 	jmp	#LR__0774
08c64                 | LR__0770
08c64     01 20 66 F6 | 	neg	local02, #1
08c68                 | ' j=-1
08c68                 | ' for i=0 to varnum-1
08c68     00 22 06 F6 | 	mov	local03, #0
08c6c     55 00 00 FF 
08c70     08 E4 05 F1 | 	add	objptr, ##43528
08c74     F2 24 02 FB | 	rdlong	local04, objptr
08c78     55 00 00 FF 
08c7c     08 E4 85 F1 | 	sub	objptr, ##43528
08c80                 | LR__0771
08c80     12 23 12 F2 | 	cmp	local03, local04 wc
08c84     38 00 90 3D |  if_ae	jmp	#LR__0772
08c88                 | '   if variables(i).name=varname$ then j=i : exit
08c88     11 15 02 F6 | 	mov	arg02, local03
08c8c     04 14 66 F0 | 	shl	arg02, #4
08c90     34 00 00 FF 
08c94     F8 E5 05 F1 | 	add	objptr, ##27128
08c98     F2 14 02 F1 | 	add	arg02, objptr
08c9c     0A 13 02 FB | 	rdlong	arg01, arg02
08ca0     0F 15 02 F6 | 	mov	arg02, local01
08ca4     34 00 00 FF 
08ca8     F8 E5 85 F1 | 	sub	objptr, ##27128
08cac     B0 5E B1 FD | 	call	#__system___string_cmp
08cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
08cb4     11 21 02 A6 |  if_e	mov	local02, local03
08cb8     01 22 06 51 |  if_ne	add	local03, #1
08cbc     C0 FF 9F 5D |  if_ne	jmp	#LR__0771
08cc0                 | LR__0772
08cc0                 | ' if j=-1 then compile_error(35) : return 35
08cc0     FF FF 7F FF 
08cc4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
08cc8     10 00 90 5D |  if_ne	jmp	#LR__0773
08ccc     23 12 06 F6 | 	mov	arg01, #35
08cd0     08 DE BF FD | 	call	#_compile_error
08cd4     23 FA 05 F6 | 	mov	result1, #35
08cd8     E0 00 90 FD | 	jmp	#LR__0774
08cdc                 | LR__0773
08cdc     6A 00 00 FF 
08ce0     7C E4 05 F1 | 	add	objptr, ##54396
08ce4     F2 24 02 FB | 	rdlong	local04, objptr
08ce8     12 23 02 F6 | 	mov	local03, local04
08cec     01 22 66 F0 | 	shl	local03, #1
08cf0     12 23 02 F1 | 	add	local03, local04
08cf4     02 22 66 F0 | 	shl	local03, #2
08cf8     03 00 00 FF 
08cfc     00 E4 85 F1 | 	sub	objptr, ##1536
08d00     F2 22 02 F1 | 	add	local03, objptr
08d04     08 22 06 F1 | 	add	local03, #8
08d08     11 39 68 FC | 	wrlong	#28, local03
08d0c     03 00 00 FF 
08d10     00 E4 05 F1 | 	add	objptr, ##1536
08d14     F2 24 02 FB | 	rdlong	local04, objptr
08d18     12 23 02 F6 | 	mov	local03, local04
08d1c     01 22 66 F0 | 	shl	local03, #1
08d20     12 23 02 F1 | 	add	local03, local04
08d24     02 22 66 F0 | 	shl	local03, #2
08d28     03 00 00 FF 
08d2c     00 E4 85 F1 | 	sub	objptr, ##1536
08d30     F2 22 02 F1 | 	add	local03, objptr
08d34     11 21 62 FC | 	wrlong	local02, local03
08d38     03 00 00 FF 
08d3c     00 E4 05 F1 | 	add	objptr, ##1536
08d40     F2 24 02 FB | 	rdlong	local04, objptr
08d44     01 24 06 F1 | 	add	local04, #1
08d48     F2 24 62 FC | 	wrlong	local04, objptr
08d4c     12 23 02 F6 | 	mov	local03, local04
08d50     01 22 66 F0 | 	shl	local03, #1
08d54     12 23 02 F1 | 	add	local03, local04
08d58     02 22 66 F0 | 	shl	local03, #2
08d5c     03 00 00 FF 
08d60     00 E4 85 F1 | 	sub	objptr, ##1536
08d64     F2 22 02 F1 | 	add	local03, objptr
08d68     08 22 06 F1 | 	add	local03, #8
08d6c     11 97 68 FC | 	wrlong	#75, local03
08d70     03 00 00 FF 
08d74     00 E4 05 F1 | 	add	objptr, ##1536
08d78     F2 24 02 FB | 	rdlong	local04, objptr
08d7c     12 23 02 F6 | 	mov	local03, local04
08d80     01 22 66 F0 | 	shl	local03, #1
08d84     12 23 02 F1 | 	add	local03, local04
08d88     02 22 66 F0 | 	shl	local03, #2
08d8c     03 00 00 FF 
08d90     00 E4 85 F1 | 	sub	objptr, ##1536
08d94     F2 22 02 F1 | 	add	local03, objptr
08d98     11 01 68 FC | 	wrlong	#0, local03
08d9c     03 00 00 FF 
08da0     00 E4 05 F1 | 	add	objptr, ##1536
08da4     F2 24 02 FB | 	rdlong	local04, objptr
08da8     01 24 06 F1 | 	add	local04, #1
08dac     F2 24 62 FC | 	wrlong	local04, objptr
08db0     6A 00 00 FF 
08db4     7C E4 85 F1 | 	sub	objptr, ##54396
08db8                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
08db8                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
08db8                 | ' return 0
08db8     00 FA 05 F6 | 	mov	result1, #0
08dbc                 | LR__0774
08dbc     A7 F0 03 F6 | 	mov	ptra, fp
08dc0     B2 00 A0 FD | 	call	#popregs_
08dc4                 | _compile_next_ret
08dc4     2D 00 64 FD | 	ret
08dc8                 | 
08dc8                 | ' 
08dc8                 | ' 
08dc8                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
08dc8                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
08dc8                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
08dc8                 | ' 
08dc8                 | ' function compile_gosub() as ulong
08dc8                 | _compile_gosub
08dc8     01 4A 05 F6 | 	mov	COUNT_, #1
08dcc     A8 00 A0 FD | 	call	#pushregs_
08dd0     6A 00 00 FF 
08dd4     7C E4 05 F1 | 	add	objptr, ##54396
08dd8     F2 1E 02 FB | 	rdlong	local01, objptr
08ddc     0F FB 01 F6 | 	mov	result1, local01
08de0     01 FA 65 F0 | 	shl	result1, #1
08de4     0F FB 01 F1 | 	add	result1, local01
08de8     02 FA 65 F0 | 	shl	result1, #2
08dec     03 00 00 FF 
08df0     00 E4 85 F1 | 	sub	objptr, ##1536
08df4     F2 FA 01 F1 | 	add	result1, objptr
08df8     08 FA 05 F1 | 	add	result1, #8
08dfc     FD 52 69 FC | 	wrlong	#169, result1
08e00     03 00 00 FF 
08e04     00 E4 05 F1 | 	add	objptr, ##1536
08e08     F2 1E 02 FB | 	rdlong	local01, objptr
08e0c     01 1E 06 F1 | 	add	local01, #1
08e10     F2 1E 62 FC | 	wrlong	local01, objptr
08e14     6A 00 00 FF 
08e18     7C E4 85 F1 | 	sub	objptr, ##54396
08e1c     10 00 B0 FD | 	call	#_compile_goto
08e20                 | ' 
08e20                 | ' compiledline(lineptr).result_type=token_gosub
08e20                 | ' lineptr+=1
08e20                 | ' compile_goto()
08e20                 | ' return 0
08e20     00 FA 05 F6 | 	mov	result1, #0
08e24     A7 F0 03 F6 | 	mov	ptra, fp
08e28     B2 00 A0 FD | 	call	#popregs_
08e2c                 | _compile_gosub_ret
08e2c     2D 00 64 FD | 	ret
08e30                 | 
08e30                 | ' 
08e30                 | ' function compile_goto( ) as ulong
08e30                 | _compile_goto
08e30     03 4A 05 F6 | 	mov	COUNT_, #3
08e34     A8 00 A0 FD | 	call	#pushregs_
08e38     34 F0 07 F1 | 	add	ptra, #52
08e3c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
08e3c     57 00 00 FF 
08e40     44 E4 05 F1 | 	add	objptr, ##44612
08e44     F2 16 02 FB | 	rdlong	arg03, objptr
08e48     03 16 66 F0 | 	shl	arg03, #3
08e4c     02 00 00 FF 
08e50     38 E4 85 F1 | 	sub	objptr, ##1080
08e54     F2 16 02 F1 | 	add	arg03, objptr
08e58     04 16 06 F1 | 	add	arg03, #4
08e5c     0B 17 02 FB | 	rdlong	arg03, arg03
08e60     01 00 00 FF 
08e64     00 16 0E F2 | 	cmp	arg03, ##512 wz
08e68     55 00 00 FF 
08e6c     0C E4 85 F1 | 	sub	objptr, ##43532
08e70     CC 02 90 5D |  if_ne	jmp	#LR__0785
08e74     57 00 00 FF 
08e78     44 E4 05 F1 | 	add	objptr, ##44612
08e7c     F2 16 02 FB | 	rdlong	arg03, objptr
08e80     01 16 06 F1 | 	add	arg03, #1
08e84     03 16 66 F0 | 	shl	arg03, #3
08e88     02 00 00 FF 
08e8c     38 E4 85 F1 | 	sub	objptr, ##1080
08e90     F2 16 02 F1 | 	add	arg03, objptr
08e94     04 16 06 F1 | 	add	arg03, #4
08e98     0B 17 02 FB | 	rdlong	arg03, arg03
08e9c     FE 17 0E F2 | 	cmp	arg03, #510 wz
08ea0     55 00 00 FF 
08ea4     0C E4 85 F1 | 	sub	objptr, ##43532
08ea8     94 02 90 5D |  if_ne	jmp	#LR__0785
08eac     57 00 00 FF 
08eb0     44 E4 05 F1 | 	add	objptr, ##44612
08eb4     F2 16 02 FB | 	rdlong	arg03, objptr
08eb8     03 16 66 F0 | 	shl	arg03, #3
08ebc     02 00 00 FF 
08ec0     38 E4 85 F1 | 	sub	objptr, ##1080
08ec4     F2 16 02 F1 | 	add	arg03, objptr
08ec8     0B 13 02 FB | 	rdlong	arg01, arg03
08ecc     00 14 06 F6 | 	mov	arg02, #0
08ed0     55 00 00 FF 
08ed4     0C E4 85 F1 | 	sub	objptr, ##43532
08ed8     54 8E B1 FD | 	call	#__system____builtin_atoi
08edc     04 4E 05 F1 | 	add	fp, #4
08ee0     A7 FA 61 FC | 	wrlong	result1, fp
08ee4     6A 00 00 FF 
08ee8     7C E4 05 F1 | 	add	objptr, ##54396
08eec     F2 1E 02 FB | 	rdlong	local01, objptr
08ef0     0F 21 02 F6 | 	mov	local02, local01
08ef4     01 20 66 F0 | 	shl	local02, #1
08ef8     0F 21 02 F1 | 	add	local02, local01
08efc     02 20 66 F0 | 	shl	local02, #2
08f00     03 00 00 FF 
08f04     00 E4 85 F1 | 	sub	objptr, ##1536
08f08     F2 20 02 F1 | 	add	local02, objptr
08f0c     08 20 06 F1 | 	add	local02, #8
08f10     10 9D 68 FC | 	wrlong	#78, local02
08f14     03 00 00 FF 
08f18     08 E4 05 F1 | 	add	objptr, ##1544
08f1c     F2 22 02 FB | 	rdlong	local03, objptr
08f20     6A 00 00 FF 
08f24     84 E4 85 F1 | 	sub	objptr, ##54404
08f28     04 4E 05 F1 | 	add	fp, #4
08f2c     A7 22 62 FC | 	wrlong	local03, fp
08f30     08 4E 85 F1 | 	sub	fp, #8
08f34                 | ' 
08f34                 | '   gotoline=val%(lparts(ct).part$) 
08f34                 | '   compiledline(lineptr).result_type=token_fast_goto
08f34                 | ' ' now find a pointer to goto
08f34                 | '   gotoptr=programstart
08f34                 | '   do
08f34                 | LR__0780
08f34     10 4E 05 F1 | 	add	fp, #16
08f38     A7 12 02 F6 | 	mov	arg01, fp
08f3c     08 4E 85 F1 | 	sub	fp, #8
08f40     A7 14 02 FB | 	rdlong	arg02, fp
08f44     08 4E 85 F1 | 	sub	fp, #8
08f48     18 16 06 F6 | 	mov	arg03, #24
08f4c     0B 00 00 FF 
08f50     CC E4 05 F1 | 	add	objptr, ##5836
08f54     BC 4F B1 FD | 	call	#_psram_spin2_read1
08f58     0B 00 00 FF 
08f5c     CC E4 85 F1 | 	sub	objptr, ##5836
08f60                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08f60                 | '     if gotoheader(0)<>$FFFFFFFF then
08f60     10 4E 05 F1 | 	add	fp, #16
08f64     A7 22 02 FB | 	rdlong	local03, fp
08f68     10 4E 85 F1 | 	sub	fp, #16
08f6c     FF FF 7F FF 
08f70     FF 23 0E F2 | 	cmp	local03, ##-1 wz
08f74     24 00 90 AD |  if_e	jmp	#LR__0781
08f78     08 4E 05 F1 | 	add	fp, #8
08f7c     A7 22 02 FB | 	rdlong	local03, fp
08f80     04 4E 05 F1 | 	add	fp, #4
08f84     A7 22 62 FC | 	wrlong	local03, fp
08f88     18 4E 05 F1 | 	add	fp, #24
08f8c     A7 22 02 FB | 	rdlong	local03, fp
08f90     1C 4E 85 F1 | 	sub	fp, #28
08f94     A7 22 62 FC | 	wrlong	local03, fp
08f98     08 4E 85 F1 | 	sub	fp, #8
08f9c                 | LR__0781
08f9c     24 4E 05 F1 | 	add	fp, #36
08fa0     A7 22 02 FB | 	rdlong	local03, fp
08fa4     24 4E 85 F1 | 	sub	fp, #36
08fa8     FF FF 3F FF 
08fac     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08fb0     10 4E 05 51 |  if_ne	add	fp, #16
08fb4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08fb8     10 4E 85 51 |  if_ne	sub	fp, #16
08fbc     FF FF 7F 5F 
08fc0     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
08fc4     1C 00 90 AD |  if_e	jmp	#LR__0782
08fc8     10 4E 05 F1 | 	add	fp, #16
08fcc     A7 22 02 FB | 	rdlong	local03, fp
08fd0     0C 4E 85 F1 | 	sub	fp, #12
08fd4     A7 20 02 FB | 	rdlong	local02, fp
08fd8     04 4E 85 F1 | 	sub	fp, #4
08fdc     10 23 0A F2 | 	cmp	local03, local02 wz
08fe0     50 FF 9F 5D |  if_ne	jmp	#LR__0780
08fe4                 | LR__0782
08fe4                 | '   if gotoheader(0)=gotoline then
08fe4     10 4E 05 F1 | 	add	fp, #16
08fe8     A7 22 02 FB | 	rdlong	local03, fp
08fec     0C 4E 85 F1 | 	sub	fp, #12
08ff0     A7 1E 02 FB | 	rdlong	local01, fp
08ff4     04 4E 85 F1 | 	sub	fp, #4
08ff8     0F 23 0A F2 | 	cmp	local03, local01 wz
08ffc     7C 00 90 5D |  if_ne	jmp	#LR__0783
09000     6A 00 00 FF 
09004     7C E4 05 F1 | 	add	objptr, ##54396
09008     F2 1E 02 FB | 	rdlong	local01, objptr
0900c     0F 21 02 F6 | 	mov	local02, local01
09010     01 20 66 F0 | 	shl	local02, #1
09014     0F 21 02 F1 | 	add	local02, local01
09018     02 20 66 F0 | 	shl	local02, #2
0901c     03 00 00 FF 
09020     00 E4 85 F1 | 	sub	objptr, ##1536
09024     F2 20 02 F1 | 	add	local02, objptr
09028     0C 4E 05 F1 | 	add	fp, #12
0902c     A7 22 02 FB | 	rdlong	local03, fp
09030     10 23 62 FC | 	wrlong	local03, local02
09034     03 00 00 FF 
09038     00 E4 05 F1 | 	add	objptr, ##1536
0903c     F2 1E 02 FB | 	rdlong	local01, objptr
09040     0F 21 02 F6 | 	mov	local02, local01
09044     01 20 66 F0 | 	shl	local02, #1
09048     0F 21 02 F1 | 	add	local02, local01
0904c     02 20 66 F0 | 	shl	local02, #2
09050     03 00 00 FF 
09054     00 E4 85 F1 | 	sub	objptr, ##1536
09058     F2 20 02 F1 | 	add	local02, objptr
0905c     08 4E 85 F1 | 	sub	fp, #8
09060     A7 22 02 FB | 	rdlong	local03, fp
09064     04 4E 85 F1 | 	sub	fp, #4
09068     04 20 06 F1 | 	add	local02, #4
0906c     10 23 62 FC | 	wrlong	local03, local02
09070     67 00 00 FF 
09074     7C E4 85 F1 | 	sub	objptr, ##52860
09078     A4 00 90 FD | 	jmp	#LR__0784
0907c                 | LR__0783
0907c     6A 00 00 FF 
09080     7C E4 05 F1 | 	add	objptr, ##54396
09084     F2 1E 02 FB | 	rdlong	local01, objptr
09088     0F 21 02 F6 | 	mov	local02, local01
0908c     01 20 66 F0 | 	shl	local02, #1
09090     0F 21 02 F1 | 	add	local02, local01
09094     02 20 66 F0 | 	shl	local02, #2
09098     03 00 00 FF 
0909c     00 E4 85 F1 | 	sub	objptr, ##1536
090a0     F2 20 02 F1 | 	add	local02, objptr
090a4     00 00 C0 FF 
090a8     10 01 68 FC | 	wrlong	##-2147483648, local02
090ac     03 00 00 FF 
090b0     00 E4 05 F1 | 	add	objptr, ##1536
090b4     F2 1E 02 FB | 	rdlong	local01, objptr
090b8     0F 21 02 F6 | 	mov	local02, local01
090bc     01 20 66 F0 | 	shl	local02, #1
090c0     0F 21 02 F1 | 	add	local02, local01
090c4     02 20 66 F0 | 	shl	local02, #2
090c8     03 00 00 FF 
090cc     00 E4 85 F1 | 	sub	objptr, ##1536
090d0     F2 20 02 F1 | 	add	local02, objptr
090d4     04 4E 05 F1 | 	add	fp, #4
090d8     A7 22 02 FB | 	rdlong	local03, fp
090dc     04 4E 85 F1 | 	sub	fp, #4
090e0     04 20 06 F1 | 	add	local02, #4
090e4     10 23 62 FC | 	wrlong	local03, local02
090e8     03 00 00 FF 
090ec     00 E4 05 F1 | 	add	objptr, ##1536
090f0     F2 1E 02 FB | 	rdlong	local01, objptr
090f4     0F 21 02 F6 | 	mov	local02, local01
090f8     01 20 66 F0 | 	shl	local02, #1
090fc     0F 21 02 F1 | 	add	local02, local01
09100     02 20 66 F0 | 	shl	local02, #2
09104     03 00 00 FF 
09108     00 E4 85 F1 | 	sub	objptr, ##1536
0910c     F2 20 02 F1 | 	add	local02, objptr
09110     08 20 06 F1 | 	add	local02, #8
09114     10 A7 68 FC | 	wrlong	#83, local02
09118     67 00 00 FF 
0911c     7C E4 85 F1 | 	sub	objptr, ##52860
09120                 | LR__0784
09120     6A 00 00 FF 
09124     7C E4 05 F1 | 	add	objptr, ##54396
09128     F2 22 02 FB | 	rdlong	local03, objptr
0912c     01 22 06 F1 | 	add	local03, #1
09130     F2 22 62 FC | 	wrlong	local03, objptr
09134     6A 00 00 FF 
09138     7C E4 85 F1 | 	sub	objptr, ##54396
0913c     D0 00 90 FD | 	jmp	#LR__0786
09140                 | LR__0785
09140     DC 00 B0 FD | 	call	#_expr
09144     30 4E 05 F1 | 	add	fp, #48
09148     A7 9E 68 FC | 	wrlong	#79, fp
0914c     08 4E 85 F1 | 	sub	fp, #8
09150     A7 00 68 FC | 	wrlong	#0, fp
09154     04 4E 05 F1 | 	add	fp, #4
09158     A7 22 02 FB | 	rdlong	local03, fp
0915c     04 4E 05 F1 | 	add	fp, #4
09160     A7 1E 02 FB | 	rdlong	local01, fp
09164     30 4E 85 F1 | 	sub	fp, #48
09168     6A 00 00 FF 
0916c     7C E4 05 F1 | 	add	objptr, ##54396
09170     F2 20 02 FB | 	rdlong	local02, objptr
09174     10 17 02 F6 | 	mov	arg03, local02
09178     01 16 66 F0 | 	shl	arg03, #1
0917c     10 17 02 F1 | 	add	arg03, local02
09180     02 16 66 F0 | 	shl	arg03, #2
09184     03 00 00 FF 
09188     00 E4 85 F1 | 	sub	objptr, ##1536
0918c     F2 16 02 F1 | 	add	arg03, objptr
09190     0B 01 68 FC | 	wrlong	#0, arg03
09194     03 00 00 FF 
09198     00 E4 05 F1 | 	add	objptr, ##1536
0919c     F2 20 02 FB | 	rdlong	local02, objptr
091a0     10 17 02 F6 | 	mov	arg03, local02
091a4     01 16 66 F0 | 	shl	arg03, #1
091a8     10 17 02 F1 | 	add	arg03, local02
091ac     02 16 66 F0 | 	shl	arg03, #2
091b0     03 00 00 FF 
091b4     00 E4 85 F1 | 	sub	objptr, ##1536
091b8     F2 16 02 F1 | 	add	arg03, objptr
091bc     04 16 06 F1 | 	add	arg03, #4
091c0     0B 23 62 FC | 	wrlong	local03, arg03
091c4     03 00 00 FF 
091c8     00 E4 05 F1 | 	add	objptr, ##1536
091cc     F2 22 02 FB | 	rdlong	local03, objptr
091d0     11 21 02 F6 | 	mov	local02, local03
091d4     01 20 66 F0 | 	shl	local02, #1
091d8     11 21 02 F1 | 	add	local02, local03
091dc     02 20 66 F0 | 	shl	local02, #2
091e0     03 00 00 FF 
091e4     00 E4 85 F1 | 	sub	objptr, ##1536
091e8     F2 20 02 F1 | 	add	local02, objptr
091ec     08 20 06 F1 | 	add	local02, #8
091f0     10 1F 62 FC | 	wrlong	local01, local02
091f4     03 00 00 FF 
091f8     00 E4 05 F1 | 	add	objptr, ##1536
091fc     F2 22 02 FB | 	rdlong	local03, objptr
09200     01 22 06 F1 | 	add	local03, #1
09204     F2 22 62 FC | 	wrlong	local03, objptr
09208     6A 00 00 FF 
0920c     7C E4 85 F1 | 	sub	objptr, ##54396
09210                 | LR__0786
09210                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
09210                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
09210                 | ' return 0
09210     00 FA 05 F6 | 	mov	result1, #0
09214     A7 F0 03 F6 | 	mov	ptra, fp
09218     B2 00 A0 FD | 	call	#popregs_
0921c                 | _compile_goto_ret
0921c     2D 00 64 FD | 	ret
09220                 | 
09220                 | ' 
09220                 | ' 
09220                 | ' 
09220                 | ' 
09220                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09220                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
09220                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09220                 | ' 
09220                 | ' 
09220                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09220                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
09220                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09220                 | ' 
09220                 | ' 
09220                 | ' function expr() as integer 
09220                 | _expr
09220     07 4A 05 F6 | 	mov	COUNT_, #7
09224     A8 00 A0 FD | 	call	#pushregs_
09228                 | _expr_enter
09228     57 00 00 FF 
0922c     44 E4 05 F1 | 	add	objptr, ##44612
09230     F2 24 02 FB | 	rdlong	local04, objptr
09234     03 24 66 F0 | 	shl	local04, #3
09238     02 00 00 FF 
0923c     38 E4 85 F1 | 	sub	objptr, ##1080
09240     F2 24 02 F1 | 	add	local04, objptr
09244     04 24 06 F1 | 	add	local04, #4
09248     12 27 02 FB | 	rdlong	local05, local04
0924c                 | ' 
0924c                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0924c     FE 27 0E F2 | 	cmp	local05, #510 wz
09250     55 00 00 FF 
09254     0C E4 85 F1 | 	sub	objptr, ##43532
09258     C4 00 90 5D |  if_ne	jmp	#LR__0790
0925c     1D 1E 06 F6 | 	mov	local01, #29
09260     FF 22 06 F6 | 	mov	local03, #255
09264     0F 29 02 F6 | 	mov	local06, local01
09268     10 2B 02 F6 | 	mov	local07, local02
0926c     11 1F 02 F6 | 	mov	local01, local03
09270     6A 00 00 FF 
09274     7C E4 05 F1 | 	add	objptr, ##54396
09278     F2 26 02 FB | 	rdlong	local05, objptr
0927c     13 25 02 F6 | 	mov	local04, local05
09280     01 24 66 F0 | 	shl	local04, #1
09284     13 25 02 F1 | 	add	local04, local05
09288     02 24 66 F0 | 	shl	local04, #2
0928c     03 00 00 FF 
09290     00 E4 85 F1 | 	sub	objptr, ##1536
09294     F2 24 02 F1 | 	add	local04, objptr
09298     12 29 62 FC | 	wrlong	local06, local04
0929c     03 00 00 FF 
092a0     00 E4 05 F1 | 	add	objptr, ##1536
092a4     F2 28 02 FB | 	rdlong	local06, objptr
092a8     14 27 02 F6 | 	mov	local05, local06
092ac     01 26 66 F0 | 	shl	local05, #1
092b0     14 27 02 F1 | 	add	local05, local06
092b4     02 26 66 F0 | 	shl	local05, #2
092b8     03 00 00 FF 
092bc     00 E4 85 F1 | 	sub	objptr, ##1536
092c0     F2 26 02 F1 | 	add	local05, objptr
092c4     04 26 06 F1 | 	add	local05, #4
092c8     13 2B 62 FC | 	wrlong	local07, local05
092cc     03 00 00 FF 
092d0     00 E4 05 F1 | 	add	objptr, ##1536
092d4     F2 2A 02 FB | 	rdlong	local07, objptr
092d8     15 29 02 F6 | 	mov	local06, local07
092dc     01 28 66 F0 | 	shl	local06, #1
092e0     15 29 02 F1 | 	add	local06, local07
092e4     02 28 66 F0 | 	shl	local06, #2
092e8     03 00 00 FF 
092ec     00 E4 85 F1 | 	sub	objptr, ##1536
092f0     F2 28 02 F1 | 	add	local06, objptr
092f4     08 28 06 F1 | 	add	local06, #8
092f8     14 1F 62 FC | 	wrlong	local01, local06
092fc     03 00 00 FF 
09300     00 E4 05 F1 | 	add	objptr, ##1536
09304     F2 28 02 FB | 	rdlong	local06, objptr
09308     01 28 06 F1 | 	add	local06, #1
0930c     F2 28 62 FC | 	wrlong	local06, objptr
09310     6A 00 00 FF 
09314     7C E4 85 F1 | 	sub	objptr, ##54396
09318     1D FA 05 F6 | 	mov	result1, #29
0931c     54 01 90 FD | 	jmp	#LR__0793
09320                 | LR__0790
09320     00 1E 06 F6 | 	mov	local01, #0
09324     58 01 B0 FD | 	call	#_addsub
09328     57 00 00 FF 
0932c     44 E4 05 F1 | 	add	objptr, ##44612
09330     F2 24 02 FB | 	rdlong	local04, objptr
09334     03 24 66 F0 | 	shl	local04, #3
09338     02 00 00 FF 
0933c     38 E4 85 F1 | 	sub	objptr, ##1080
09340     F2 24 02 F1 | 	add	local04, objptr
09344     04 24 06 F1 | 	add	local04, #4
09348     12 27 02 FB | 	rdlong	local05, local04
0934c                 | ' t3.result.uresult=0
0934c                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0934c                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0934c                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0934c     55 00 00 FF 
09350     0C E4 85 F1 | 	sub	objptr, ##43532
09354                 | LR__0791
09354     1B 26 0E F2 | 	cmp	local05, #27 wz
09358     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
0935c     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
09360     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
09364     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
09368     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
0936c     00 01 90 5D |  if_ne	jmp	#LR__0792
09370     57 00 00 FF 
09374     44 E4 05 F1 | 	add	objptr, ##44612
09378     F2 28 02 FB | 	rdlong	local06, objptr
0937c     01 28 06 F1 | 	add	local06, #1
09380     F2 28 62 FC | 	wrlong	local06, objptr
09384     57 00 00 FF 
09388     44 E4 85 F1 | 	sub	objptr, ##44612
0938c     F0 00 B0 FD | 	call	#_addsub
09390     13 23 02 F6 | 	mov	local03, local05
09394     0F 29 02 F6 | 	mov	local06, local01
09398     10 2B 02 F6 | 	mov	local07, local02
0939c     11 27 02 F6 | 	mov	local05, local03
093a0     6A 00 00 FF 
093a4     7C E4 05 F1 | 	add	objptr, ##54396
093a8     F2 24 02 FB | 	rdlong	local04, objptr
093ac     12 FB 01 F6 | 	mov	result1, local04
093b0     01 FA 65 F0 | 	shl	result1, #1
093b4     12 FB 01 F1 | 	add	result1, local04
093b8     02 FA 65 F0 | 	shl	result1, #2
093bc     03 00 00 FF 
093c0     00 E4 85 F1 | 	sub	objptr, ##1536
093c4     F2 FA 01 F1 | 	add	result1, objptr
093c8     FD 28 62 FC | 	wrlong	local06, result1
093cc     03 00 00 FF 
093d0     00 E4 05 F1 | 	add	objptr, ##1536
093d4     F2 28 02 FB | 	rdlong	local06, objptr
093d8     14 25 02 F6 | 	mov	local04, local06
093dc     01 24 66 F0 | 	shl	local04, #1
093e0     14 25 02 F1 | 	add	local04, local06
093e4     02 24 66 F0 | 	shl	local04, #2
093e8     03 00 00 FF 
093ec     00 E4 85 F1 | 	sub	objptr, ##1536
093f0     F2 24 02 F1 | 	add	local04, objptr
093f4     04 24 06 F1 | 	add	local04, #4
093f8     12 2B 62 FC | 	wrlong	local07, local04
093fc     03 00 00 FF 
09400     00 E4 05 F1 | 	add	objptr, ##1536
09404     F2 2A 02 FB | 	rdlong	local07, objptr
09408     15 29 02 F6 | 	mov	local06, local07
0940c     01 28 66 F0 | 	shl	local06, #1
09410     15 29 02 F1 | 	add	local06, local07
09414     02 28 66 F0 | 	shl	local06, #2
09418     03 00 00 FF 
0941c     00 E4 85 F1 | 	sub	objptr, ##1536
09420     F2 28 02 F1 | 	add	local06, objptr
09424     08 28 06 F1 | 	add	local06, #8
09428     14 27 62 FC | 	wrlong	local05, local06
0942c     03 00 00 FF 
09430     00 E4 05 F1 | 	add	objptr, ##1536
09434     F2 28 02 FB | 	rdlong	local06, objptr
09438     01 28 06 F1 | 	add	local06, #1
0943c     F2 28 62 FC | 	wrlong	local06, objptr
09440     13 00 00 FF 
09444     38 E4 85 F1 | 	sub	objptr, ##9784
09448     F2 24 02 FB | 	rdlong	local04, objptr
0944c     03 24 66 F0 | 	shl	local04, #3
09450     02 00 00 FF 
09454     38 E4 85 F1 | 	sub	objptr, ##1080
09458     F2 24 02 F1 | 	add	local04, objptr
0945c     04 24 06 F1 | 	add	local04, #4
09460     12 27 02 FB | 	rdlong	local05, local04
09464     55 00 00 FF 
09468     0C E4 85 F1 | 	sub	objptr, ##43532
0946c     E4 FE 9F FD | 	jmp	#LR__0791
09470                 | LR__0792
09470                 | ' return 0  
09470     00 FA 05 F6 | 	mov	result1, #0
09474                 | LR__0793
09474     A7 F0 03 F6 | 	mov	ptra, fp
09478     B2 00 A0 FD | 	call	#popregs_
0947c                 | _expr_ret
0947c     2D 00 64 FD | 	ret
09480                 | 
09480                 | ' 
09480                 | ' 
09480                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
09480                 | ' 
09480                 | ' function addsub() as integer 
09480                 | _addsub
09480     07 4A 05 F6 | 	mov	COUNT_, #7
09484     A8 00 A0 FD | 	call	#pushregs_
09488                 | _addsub_enter
09488     00 1E 06 F6 | 	mov	local01, #0
0948c     50 01 B0 FD | 	call	#_muldiv
09490     57 00 00 FF 
09494     44 E4 05 F1 | 	add	objptr, ##44612
09498     F2 24 02 FB | 	rdlong	local04, objptr
0949c     03 24 66 F0 | 	shl	local04, #3
094a0     02 00 00 FF 
094a4     38 E4 85 F1 | 	sub	objptr, ##1080
094a8     F2 24 02 F1 | 	add	local04, objptr
094ac     04 24 06 F1 | 	add	local04, #4
094b0     12 27 02 FB | 	rdlong	local05, local04
094b4                 | ' t3.result.uresult=0
094b4                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
094b4                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
094b4                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
094b4     55 00 00 FF 
094b8     0C E4 85 F1 | 	sub	objptr, ##43532
094bc                 | LR__0800
094bc     01 26 0E F2 | 	cmp	local05, #1 wz
094c0     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
094c4     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
094c8     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
094cc     00 01 90 5D |  if_ne	jmp	#LR__0801
094d0     57 00 00 FF 
094d4     44 E4 05 F1 | 	add	objptr, ##44612
094d8     F2 24 02 FB | 	rdlong	local04, objptr
094dc     01 24 06 F1 | 	add	local04, #1
094e0     F2 24 62 FC | 	wrlong	local04, objptr
094e4     57 00 00 FF 
094e8     44 E4 85 F1 | 	sub	objptr, ##44612
094ec     F0 00 B0 FD | 	call	#_muldiv
094f0     13 23 02 F6 | 	mov	local03, local05
094f4     0F 29 02 F6 | 	mov	local06, local01
094f8     10 2B 02 F6 | 	mov	local07, local02
094fc     11 27 02 F6 | 	mov	local05, local03
09500     6A 00 00 FF 
09504     7C E4 05 F1 | 	add	objptr, ##54396
09508     F2 24 02 FB | 	rdlong	local04, objptr
0950c     12 FB 01 F6 | 	mov	result1, local04
09510     01 FA 65 F0 | 	shl	result1, #1
09514     12 FB 01 F1 | 	add	result1, local04
09518     02 FA 65 F0 | 	shl	result1, #2
0951c     03 00 00 FF 
09520     00 E4 85 F1 | 	sub	objptr, ##1536
09524     F2 FA 01 F1 | 	add	result1, objptr
09528     FD 28 62 FC | 	wrlong	local06, result1
0952c     03 00 00 FF 
09530     00 E4 05 F1 | 	add	objptr, ##1536
09534     F2 28 02 FB | 	rdlong	local06, objptr
09538     14 25 02 F6 | 	mov	local04, local06
0953c     01 24 66 F0 | 	shl	local04, #1
09540     14 25 02 F1 | 	add	local04, local06
09544     02 24 66 F0 | 	shl	local04, #2
09548     03 00 00 FF 
0954c     00 E4 85 F1 | 	sub	objptr, ##1536
09550     F2 24 02 F1 | 	add	local04, objptr
09554     04 24 06 F1 | 	add	local04, #4
09558     12 2B 62 FC | 	wrlong	local07, local04
0955c     03 00 00 FF 
09560     00 E4 05 F1 | 	add	objptr, ##1536
09564     F2 2A 02 FB | 	rdlong	local07, objptr
09568     15 29 02 F6 | 	mov	local06, local07
0956c     01 28 66 F0 | 	shl	local06, #1
09570     15 29 02 F1 | 	add	local06, local07
09574     02 28 66 F0 | 	shl	local06, #2
09578     03 00 00 FF 
0957c     00 E4 85 F1 | 	sub	objptr, ##1536
09580     F2 28 02 F1 | 	add	local06, objptr
09584     08 28 06 F1 | 	add	local06, #8
09588     14 27 62 FC | 	wrlong	local05, local06
0958c     03 00 00 FF 
09590     00 E4 05 F1 | 	add	objptr, ##1536
09594     F2 28 02 FB | 	rdlong	local06, objptr
09598     01 28 06 F1 | 	add	local06, #1
0959c     F2 28 62 FC | 	wrlong	local06, objptr
095a0     13 00 00 FF 
095a4     38 E4 85 F1 | 	sub	objptr, ##9784
095a8     F2 24 02 FB | 	rdlong	local04, objptr
095ac     03 24 66 F0 | 	shl	local04, #3
095b0     02 00 00 FF 
095b4     38 E4 85 F1 | 	sub	objptr, ##1080
095b8     F2 24 02 F1 | 	add	local04, objptr
095bc     04 24 06 F1 | 	add	local04, #4
095c0     12 27 02 FB | 	rdlong	local05, local04
095c4     55 00 00 FF 
095c8     0C E4 85 F1 | 	sub	objptr, ##43532
095cc     EC FE 9F FD | 	jmp	#LR__0800
095d0                 | LR__0801
095d0                 | '   return 0
095d0     00 FA 05 F6 | 	mov	result1, #0
095d4     A7 F0 03 F6 | 	mov	ptra, fp
095d8     B2 00 A0 FD | 	call	#popregs_
095dc                 | _addsub_ret
095dc     2D 00 64 FD | 	ret
095e0                 | 
095e0                 | ' 
095e0                 | ' sub muldiv()
095e0                 | _muldiv
095e0     08 4A 05 F6 | 	mov	COUNT_, #8
095e4     A8 00 A0 FD | 	call	#pushregs_
095e8                 | _muldiv_enter
095e8     00 1E 06 F6 | 	mov	local01, #0
095ec     58 01 B0 FD | 	call	#_getvalue
095f0     57 00 00 FF 
095f4     44 E4 05 F1 | 	add	objptr, ##44612
095f8     F2 24 02 FB | 	rdlong	local04, objptr
095fc     03 24 66 F0 | 	shl	local04, #3
09600     02 00 00 FF 
09604     38 E4 85 F1 | 	sub	objptr, ##1080
09608     F2 24 02 F1 | 	add	local04, objptr
0960c     04 24 06 F1 | 	add	local04, #4
09610     12 27 02 FB | 	rdlong	local05, local04
09614                 | ' t3.result.uresult=0
09614                 | ' getvalue()    
09614                 | ' op = lparts(ct).token
09614                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
09614     55 00 00 FF 
09618     0C E4 85 F1 | 	sub	objptr, ##43532
0961c                 | LR__0810
0961c     05 26 0E F2 | 	cmp	local05, #5 wz
09620     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
09624     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09628     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
0962c     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09630     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
09634     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09638     00 01 90 5D |  if_ne	jmp	#LR__0811
0963c     57 00 00 FF 
09640     44 E4 05 F1 | 	add	objptr, ##44612
09644     F2 24 02 FB | 	rdlong	local04, objptr
09648     01 24 06 F1 | 	add	local04, #1
0964c     F2 24 62 FC | 	wrlong	local04, objptr
09650     57 00 00 FF 
09654     44 E4 85 F1 | 	sub	objptr, ##44612
09658     EC 00 B0 FD | 	call	#_getvalue
0965c     13 23 02 F6 | 	mov	local03, local05
09660     0F 29 02 F6 | 	mov	local06, local01
09664     10 2B 02 F6 | 	mov	local07, local02
09668     11 27 02 F6 | 	mov	local05, local03
0966c     6A 00 00 FF 
09670     7C E4 05 F1 | 	add	objptr, ##54396
09674     F2 24 02 FB | 	rdlong	local04, objptr
09678     12 2D 02 F6 | 	mov	local08, local04
0967c     01 2C 66 F0 | 	shl	local08, #1
09680     12 2D 02 F1 | 	add	local08, local04
09684     02 2C 66 F0 | 	shl	local08, #2
09688     03 00 00 FF 
0968c     00 E4 85 F1 | 	sub	objptr, ##1536
09690     F2 2C 02 F1 | 	add	local08, objptr
09694     16 29 62 FC | 	wrlong	local06, local08
09698     03 00 00 FF 
0969c     00 E4 05 F1 | 	add	objptr, ##1536
096a0     F2 2C 02 FB | 	rdlong	local08, objptr
096a4     16 29 02 F6 | 	mov	local06, local08
096a8     01 28 66 F0 | 	shl	local06, #1
096ac     16 29 02 F1 | 	add	local06, local08
096b0     02 28 66 F0 | 	shl	local06, #2
096b4     03 00 00 FF 
096b8     00 E4 85 F1 | 	sub	objptr, ##1536
096bc     F2 28 02 F1 | 	add	local06, objptr
096c0     04 28 06 F1 | 	add	local06, #4
096c4     14 2B 62 FC | 	wrlong	local07, local06
096c8     03 00 00 FF 
096cc     00 E4 05 F1 | 	add	objptr, ##1536
096d0     F2 2C 02 FB | 	rdlong	local08, objptr
096d4     16 2B 02 F6 | 	mov	local07, local08
096d8     01 2A 66 F0 | 	shl	local07, #1
096dc     16 2B 02 F1 | 	add	local07, local08
096e0     02 2A 66 F0 | 	shl	local07, #2
096e4     03 00 00 FF 
096e8     00 E4 85 F1 | 	sub	objptr, ##1536
096ec     F2 2A 02 F1 | 	add	local07, objptr
096f0     08 2A 06 F1 | 	add	local07, #8
096f4     15 27 62 FC | 	wrlong	local05, local07
096f8     03 00 00 FF 
096fc     00 E4 05 F1 | 	add	objptr, ##1536
09700     F2 28 02 FB | 	rdlong	local06, objptr
09704     01 28 06 F1 | 	add	local06, #1
09708     F2 28 62 FC | 	wrlong	local06, objptr
0970c     13 00 00 FF 
09710     38 E4 85 F1 | 	sub	objptr, ##9784
09714     F2 24 02 FB | 	rdlong	local04, objptr
09718     03 24 66 F0 | 	shl	local04, #3
0971c     02 00 00 FF 
09720     38 E4 85 F1 | 	sub	objptr, ##1080
09724     F2 24 02 F1 | 	add	local04, objptr
09728     04 24 06 F1 | 	add	local04, #4
0972c     12 27 02 FB | 	rdlong	local05, local04
09730     55 00 00 FF 
09734     0C E4 85 F1 | 	sub	objptr, ##43532
09738     E0 FE 9F FD | 	jmp	#LR__0810
0973c                 | LR__0811
0973c     A7 F0 03 F6 | 	mov	ptra, fp
09740     B2 00 A0 FD | 	call	#popregs_
09744                 | _muldiv_ret
09744     2D 00 64 FD | 	ret
09748                 | 
09748                 | ' 
09748                 | ' sub getvalue() 
09748                 | _getvalue
09748     0B 4A 05 F6 | 	mov	COUNT_, #11
0974c     A8 00 A0 FD | 	call	#pushregs_
09750                 | _getvalue_enter
09750     01 24 06 F6 | 	mov	local04, #1
09754     00 1E 06 F6 | 	mov	local01, #0
09758     1D 22 06 F6 | 	mov	local03, #29
0975c     57 00 00 FF 
09760     44 E4 05 F1 | 	add	objptr, ##44612
09764     F2 16 02 FB | 	rdlong	arg03, objptr
09768     03 16 66 F0 | 	shl	arg03, #3
0976c     02 00 00 FF 
09770     38 E4 85 F1 | 	sub	objptr, ##1080
09774     F2 16 02 F1 | 	add	arg03, objptr
09778     04 16 06 F1 | 	add	arg03, #4
0977c     0B 27 02 FB | 	rdlong	local05, arg03
09780                 | ' m=1
09780                 | ' t1.result.uresult=0: t1.result_type=result_uint
09780                 | ' op=lparts(ct).token
09780                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
09780     02 26 0E F2 | 	cmp	local05, #2 wz
09784     55 00 00 FF 
09788     0C E4 85 F1 | 	sub	objptr, ##43532
0978c     38 00 90 5D |  if_ne	jmp	#LR__0820
09790     01 24 66 F6 | 	neg	local04, #1
09794     57 00 00 FF 
09798     44 E4 05 F1 | 	add	objptr, ##44612
0979c     F2 26 02 FB | 	rdlong	local05, objptr
097a0     01 26 06 F1 | 	add	local05, #1
097a4     F2 26 62 FC | 	wrlong	local05, objptr
097a8     03 26 66 F0 | 	shl	local05, #3
097ac     02 00 00 FF 
097b0     38 E4 85 F1 | 	sub	objptr, ##1080
097b4     F2 26 02 F1 | 	add	local05, objptr
097b8     04 26 06 F1 | 	add	local05, #4
097bc     13 27 02 FB | 	rdlong	local05, local05
097c0     55 00 00 FF 
097c4     0C E4 85 F1 | 	sub	objptr, ##43532
097c8                 | LR__0820
097c8                 | ' select case op
097c8     01 00 00 FF 
097cc     00 26 0E F2 | 	cmp	local05, ##512 wz
097d0     3C 00 90 AD |  if_e	jmp	#LR__0821
097d4     01 00 00 FF 
097d8     01 26 0E F2 | 	cmp	local05, ##513 wz
097dc     88 01 90 AD |  if_e	jmp	#LR__0824
097e0     01 00 00 FF 
097e4     02 26 0E F2 | 	cmp	local05, ##514 wz
097e8     3C 04 90 AD |  if_e	jmp	#LR__0831
097ec     01 00 00 FF 
097f0     03 26 0E F2 | 	cmp	local05, ##515 wz
097f4     A0 05 90 AD |  if_e	jmp	#LR__0834
097f8     01 00 00 FF 
097fc     04 26 0E F2 | 	cmp	local05, ##516 wz
09800     70 07 90 AD |  if_e	jmp	#LR__0839
09804     15 26 0E F2 | 	cmp	local05, #21 wz
09808     90 07 90 AD |  if_e	jmp	#LR__0840
0980c     00 08 90 FD | 	jmp	#LR__0841
09810                 | LR__0821
09810                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09810     01 24 0E F2 | 	cmp	local04, #1 wz
09814     3C 00 90 5D |  if_ne	jmp	#LR__0822
09818     57 00 00 FF 
0981c     44 E4 05 F1 | 	add	objptr, ##44612
09820     F2 26 02 FB | 	rdlong	local05, objptr
09824     03 26 66 F0 | 	shl	local05, #3
09828     02 00 00 FF 
0982c     38 E4 85 F1 | 	sub	objptr, ##1080
09830     F2 26 02 F1 | 	add	local05, objptr
09834     13 13 02 FB | 	rdlong	arg01, local05
09838     00 14 06 F6 | 	mov	arg02, #0
0983c     55 00 00 FF 
09840     0C E4 85 F1 | 	sub	objptr, ##43532
09844     E8 84 B1 FD | 	call	#__system____builtin_atoi
09848     FD 24 02 FD | 	qmul	local04, result1
0984c     18 1E 62 FD | 	getqx	local01
09850     1C 22 06 F6 | 	mov	local03, #28
09854                 | LR__0822
09854                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09854     FF FF 7F FF 
09858     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0985c     3C 00 90 5D |  if_ne	jmp	#LR__0823
09860     57 00 00 FF 
09864     44 E4 05 F1 | 	add	objptr, ##44612
09868     F2 26 02 FB | 	rdlong	local05, objptr
0986c     03 26 66 F0 | 	shl	local05, #3
09870     02 00 00 FF 
09874     38 E4 85 F1 | 	sub	objptr, ##1080
09878     F2 26 02 F1 | 	add	local05, objptr
0987c     13 13 02 FB | 	rdlong	arg01, local05
09880     00 14 06 F6 | 	mov	arg02, #0
09884     55 00 00 FF 
09888     0C E4 85 F1 | 	sub	objptr, ##43532
0988c     A0 84 B1 FD | 	call	#__system____builtin_atoi
09890     FD 24 02 FD | 	qmul	local04, result1
09894     18 1E 62 FD | 	getqx	local01
09898     1C 22 06 F6 | 	mov	local03, #28
0989c                 | LR__0823
0989c     0F 29 02 F6 | 	mov	local06, local01
098a0     10 2B 02 F6 | 	mov	local07, local02
098a4     11 27 02 F6 | 	mov	local05, local03
098a8     6A 00 00 FF 
098ac     7C E4 05 F1 | 	add	objptr, ##54396
098b0     F2 1E 02 FB | 	rdlong	local01, objptr
098b4     0F 25 02 F6 | 	mov	local04, local01
098b8     01 24 66 F0 | 	shl	local04, #1
098bc     0F 25 02 F1 | 	add	local04, local01
098c0     02 24 66 F0 | 	shl	local04, #2
098c4     03 00 00 FF 
098c8     00 E4 85 F1 | 	sub	objptr, ##1536
098cc     F2 24 02 F1 | 	add	local04, objptr
098d0     12 29 62 FC | 	wrlong	local06, local04
098d4     03 00 00 FF 
098d8     00 E4 05 F1 | 	add	objptr, ##1536
098dc     F2 28 02 FB | 	rdlong	local06, objptr
098e0     14 1F 02 F6 | 	mov	local01, local06
098e4     01 1E 66 F0 | 	shl	local01, #1
098e8     14 1F 02 F1 | 	add	local01, local06
098ec     02 1E 66 F0 | 	shl	local01, #2
098f0     03 00 00 FF 
098f4     00 E4 85 F1 | 	sub	objptr, ##1536
098f8     F2 1E 02 F1 | 	add	local01, objptr
098fc     04 1E 06 F1 | 	add	local01, #4
09900     0F 2B 62 FC | 	wrlong	local07, local01
09904     03 00 00 FF 
09908     00 E4 05 F1 | 	add	objptr, ##1536
0990c     F2 2A 02 FB | 	rdlong	local07, objptr
09910     15 29 02 F6 | 	mov	local06, local07
09914     01 28 66 F0 | 	shl	local06, #1
09918     15 29 02 F1 | 	add	local06, local07
0991c     02 28 66 F0 | 	shl	local06, #2
09920     03 00 00 FF 
09924     00 E4 85 F1 | 	sub	objptr, ##1536
09928     F2 28 02 F1 | 	add	local06, objptr
0992c     08 28 06 F1 | 	add	local06, #8
09930     14 27 62 FC | 	wrlong	local05, local06
09934     03 00 00 FF 
09938     00 E4 05 F1 | 	add	objptr, ##1536
0993c     F2 28 02 FB | 	rdlong	local06, objptr
09940     01 28 06 F1 | 	add	local06, #1
09944     F2 28 62 FC | 	wrlong	local06, objptr
09948     13 00 00 FF 
0994c     38 E4 85 F1 | 	sub	objptr, ##9784
09950     F2 28 02 FB | 	rdlong	local06, objptr
09954     01 28 06 F1 | 	add	local06, #1
09958     F2 28 62 FC | 	wrlong	local06, objptr
0995c     57 00 00 FF 
09960     44 E4 85 F1 | 	sub	objptr, ##44612
09964     CC 06 90 FD | 	jmp	#LR__0842
09968                 | LR__0824
09968                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
09968     57 00 00 FF 
0996c     44 E4 05 F1 | 	add	objptr, ##44612
09970     F2 16 02 FB | 	rdlong	arg03, objptr
09974     03 16 66 F0 | 	shl	arg03, #3
09978     02 00 00 FF 
0997c     38 E4 85 F1 | 	sub	objptr, ##1080
09980     F2 16 02 F1 | 	add	arg03, objptr
09984     0B 13 02 FB | 	rdlong	arg01, arg03
09988     01 14 06 F6 | 	mov	arg02, #1
0998c     55 00 00 FF 
09990     0C E4 85 F1 | 	sub	objptr, ##43532
09994     E8 71 B1 FD | 	call	#__system__Left_S
09998     FD 12 02 F6 | 	mov	arg01, result1
0999c     73 01 00 FF 
099a0     E1 14 06 F6 | 	mov	arg02, ##@LR__5113
099a4     B8 51 B1 FD | 	call	#__system___string_cmp
099a8     00 FA 0D F2 | 	cmp	result1, #0 wz
099ac     94 00 90 5D |  if_ne	jmp	#LR__0827
099b0     57 00 00 FF 
099b4     44 E4 05 F1 | 	add	objptr, ##44612
099b8     F2 2A 02 FB | 	rdlong	local07, objptr
099bc     15 29 02 F6 | 	mov	local06, local07
099c0     03 28 66 F0 | 	shl	local06, #3
099c4     02 00 00 FF 
099c8     38 E4 85 F1 | 	sub	objptr, ##1080
099cc     F2 28 02 F1 | 	add	local06, objptr
099d0     73 01 00 FF 
099d4     E3 26 06 F6 | 	mov	local05, ##@LR__5114
099d8     03 2A 66 F0 | 	shl	local07, #3
099dc     F2 2A 02 F1 | 	add	local07, objptr
099e0     15 2B 02 FB | 	rdlong	local07, local07
099e4     02 00 00 FF 
099e8     38 E4 05 F1 | 	add	objptr, ##1080
099ec     F2 1E 02 FB | 	rdlong	local01, objptr
099f0     03 1E 66 F0 | 	shl	local01, #3
099f4     02 00 00 FF 
099f8     38 E4 85 F1 | 	sub	objptr, ##1080
099fc     F2 1E 02 F1 | 	add	local01, objptr
09a00     0F 13 02 FB | 	rdlong	arg01, local01
09a04     55 00 00 FF 
09a08     0C E4 85 F1 | 	sub	objptr, ##43532
09a0c     09 2D 02 F6 | 	mov	local08, arg01
09a10     97 06 48 FB | 	callpa	#(@LR__0826-@LR__0825)>>2,fcache_load_ptr_
09a14                 | LR__0825
09a14     16 FB C9 FA | 	rdbyte	result1, local08 wz
09a18     01 2C 06 51 |  if_ne	add	local08, #1
09a1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0825
09a20                 | LR__0826
09a20     09 2D 82 F1 | 	sub	local08, arg01
09a24     16 15 02 F6 | 	mov	arg02, local08
09a28     01 14 86 F1 | 	sub	arg02, #1
09a2c     15 13 02 F6 | 	mov	arg01, local07
09a30     D4 71 B1 FD | 	call	#__system__Right_S
09a34     FD 14 02 F6 | 	mov	arg02, result1
09a38     13 13 02 F6 | 	mov	arg01, local05
09a3c     54 51 B1 FD | 	call	#__system___string_concat
09a40     14 FB 61 FC | 	wrlong	result1, local06
09a44                 | LR__0827
09a44                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
09a44     57 00 00 FF 
09a48     44 E4 05 F1 | 	add	objptr, ##44612
09a4c     F2 16 02 FB | 	rdlong	arg03, objptr
09a50     03 16 66 F0 | 	shl	arg03, #3
09a54     02 00 00 FF 
09a58     38 E4 85 F1 | 	sub	objptr, ##1080
09a5c     F2 16 02 F1 | 	add	arg03, objptr
09a60     0B 13 02 FB | 	rdlong	arg01, arg03
09a64     01 14 06 F6 | 	mov	arg02, #1
09a68     55 00 00 FF 
09a6c     0C E4 85 F1 | 	sub	objptr, ##43532
09a70     0C 71 B1 FD | 	call	#__system__Left_S
09a74     FD 12 02 F6 | 	mov	arg01, result1
09a78     73 01 00 FF 
09a7c     E6 14 06 F6 | 	mov	arg02, ##@LR__5115
09a80     DC 50 B1 FD | 	call	#__system___string_cmp
09a84     00 FA 0D F2 | 	cmp	result1, #0 wz
09a88     94 00 90 5D |  if_ne	jmp	#LR__0830
09a8c     57 00 00 FF 
09a90     44 E4 05 F1 | 	add	objptr, ##44612
09a94     F2 2A 02 FB | 	rdlong	local07, objptr
09a98     15 29 02 F6 | 	mov	local06, local07
09a9c     03 28 66 F0 | 	shl	local06, #3
09aa0     02 00 00 FF 
09aa4     38 E4 85 F1 | 	sub	objptr, ##1080
09aa8     F2 28 02 F1 | 	add	local06, objptr
09aac     73 01 00 FF 
09ab0     E8 26 06 F6 | 	mov	local05, ##@LR__5116
09ab4     03 2A 66 F0 | 	shl	local07, #3
09ab8     F2 2A 02 F1 | 	add	local07, objptr
09abc     15 2B 02 FB | 	rdlong	local07, local07
09ac0     02 00 00 FF 
09ac4     38 E4 05 F1 | 	add	objptr, ##1080
09ac8     F2 1E 02 FB | 	rdlong	local01, objptr
09acc     03 1E 66 F0 | 	shl	local01, #3
09ad0     02 00 00 FF 
09ad4     38 E4 85 F1 | 	sub	objptr, ##1080
09ad8     F2 1E 02 F1 | 	add	local01, objptr
09adc     0F 13 02 FB | 	rdlong	arg01, local01
09ae0     55 00 00 FF 
09ae4     0C E4 85 F1 | 	sub	objptr, ##43532
09ae8     09 2D 02 F6 | 	mov	local08, arg01
09aec     97 06 48 FB | 	callpa	#(@LR__0829-@LR__0828)>>2,fcache_load_ptr_
09af0                 | LR__0828
09af0     16 FB C9 FA | 	rdbyte	result1, local08 wz
09af4     01 2C 06 51 |  if_ne	add	local08, #1
09af8     F4 FF 9F 5D |  if_ne	jmp	#LR__0828
09afc                 | LR__0829
09afc     09 2D 82 F1 | 	sub	local08, arg01
09b00     16 15 02 F6 | 	mov	arg02, local08
09b04     01 14 86 F1 | 	sub	arg02, #1
09b08     15 13 02 F6 | 	mov	arg01, local07
09b0c     F8 70 B1 FD | 	call	#__system__Right_S
09b10     FD 14 02 F6 | 	mov	arg02, result1
09b14     13 13 02 F6 | 	mov	arg01, local05
09b18     78 50 B1 FD | 	call	#__system___string_concat
09b1c     14 FB 61 FC | 	wrlong	result1, local06
09b20                 | LR__0830
09b20     57 00 00 FF 
09b24     44 E4 05 F1 | 	add	objptr, ##44612
09b28     F2 28 02 FB | 	rdlong	local06, objptr
09b2c     03 28 66 F0 | 	shl	local06, #3
09b30     02 00 00 FF 
09b34     38 E4 85 F1 | 	sub	objptr, ##1080
09b38     F2 28 02 F1 | 	add	local06, objptr
09b3c     14 13 02 FB | 	rdlong	arg01, local06
09b40     00 14 06 F6 | 	mov	arg02, #0
09b44     55 00 00 FF 
09b48     0C E4 85 F1 | 	sub	objptr, ##43532
09b4c     E0 81 B1 FD | 	call	#__system____builtin_atoi
09b50     FD 24 02 FD | 	qmul	local04, result1
09b54     6A 00 00 FF 
09b58     7C E4 05 F1 | 	add	objptr, ##54396
09b5c     F2 28 02 FB | 	rdlong	local06, objptr
09b60     14 2F 02 F6 | 	mov	local09, local06
09b64     01 2E 66 F0 | 	shl	local09, #1
09b68     14 2F 02 F1 | 	add	local09, local06
09b6c     02 2E 66 F0 | 	shl	local09, #2
09b70     03 00 00 FF 
09b74     00 E4 85 F1 | 	sub	objptr, ##1536
09b78     F2 2E 02 F1 | 	add	local09, objptr
09b7c     03 00 00 FF 
09b80     00 E4 05 F1 | 	add	objptr, ##1536
09b84     18 1E 62 FD | 	getqx	local01
09b88     1C 22 06 F6 | 	mov	local03, #28
09b8c     0F 29 02 F6 | 	mov	local06, local01
09b90     10 2B 02 F6 | 	mov	local07, local02
09b94     17 29 62 FC | 	wrlong	local06, local09
09b98     11 2F 02 F6 | 	mov	local09, local03
09b9c     F2 28 02 FB | 	rdlong	local06, objptr
09ba0     14 27 02 F6 | 	mov	local05, local06
09ba4     01 26 66 F0 | 	shl	local05, #1
09ba8     14 27 02 F1 | 	add	local05, local06
09bac     02 26 66 F0 | 	shl	local05, #2
09bb0     03 00 00 FF 
09bb4     00 E4 85 F1 | 	sub	objptr, ##1536
09bb8     F2 26 02 F1 | 	add	local05, objptr
09bbc     04 26 06 F1 | 	add	local05, #4
09bc0     13 2B 62 FC | 	wrlong	local07, local05
09bc4     03 00 00 FF 
09bc8     00 E4 05 F1 | 	add	objptr, ##1536
09bcc     F2 2A 02 FB | 	rdlong	local07, objptr
09bd0     15 29 02 F6 | 	mov	local06, local07
09bd4     01 28 66 F0 | 	shl	local06, #1
09bd8     15 29 02 F1 | 	add	local06, local07
09bdc     02 28 66 F0 | 	shl	local06, #2
09be0     03 00 00 FF 
09be4     00 E4 85 F1 | 	sub	objptr, ##1536
09be8     F2 28 02 F1 | 	add	local06, objptr
09bec     08 28 06 F1 | 	add	local06, #8
09bf0     14 2F 62 FC | 	wrlong	local09, local06
09bf4     03 00 00 FF 
09bf8     00 E4 05 F1 | 	add	objptr, ##1536
09bfc     F2 28 02 FB | 	rdlong	local06, objptr
09c00     01 28 06 F1 | 	add	local06, #1
09c04     F2 28 62 FC | 	wrlong	local06, objptr
09c08     13 00 00 FF 
09c0c     38 E4 85 F1 | 	sub	objptr, ##9784
09c10     F2 28 02 FB | 	rdlong	local06, objptr
09c14     01 28 06 F1 | 	add	local06, #1
09c18     F2 28 62 FC | 	wrlong	local06, objptr
09c1c     57 00 00 FF 
09c20     44 E4 85 F1 | 	sub	objptr, ##44612
09c24     0C 04 90 FD | 	jmp	#LR__0842
09c28                 | LR__0831
09c28                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
09c28     01 24 0E F2 | 	cmp	local04, #1 wz
09c2c     48 00 90 5D |  if_ne	jmp	#LR__0832
09c30     00 C0 1F FF 
09c34     00 28 06 F6 | 	mov	local06, ##1065353216
09c38     57 00 00 FF 
09c3c     44 E4 05 F1 | 	add	objptr, ##44612
09c40     F2 2E 02 FB | 	rdlong	local09, objptr
09c44     03 2E 66 F0 | 	shl	local09, #3
09c48     02 00 00 FF 
09c4c     38 E4 85 F1 | 	sub	objptr, ##1080
09c50     F2 2E 02 F1 | 	add	local09, objptr
09c54     17 13 02 FB | 	rdlong	arg01, local09
09c58     55 00 00 FF 
09c5c     0C E4 85 F1 | 	sub	objptr, ##43532
09c60     3C 82 B1 FD | 	call	#__system____builtin_atof
09c64     FD 14 02 F6 | 	mov	arg02, result1
09c68     14 13 02 F6 | 	mov	arg01, local06
09c6c     48 7A B1 FD | 	call	#__system___float_mul
09c70     FD 1E 02 F6 | 	mov	local01, result1
09c74     1E 22 06 F6 | 	mov	local03, #30
09c78                 | LR__0832
09c78                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
09c78     FF FF 7F FF 
09c7c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09c80     48 00 90 5D |  if_ne	jmp	#LR__0833
09c84     00 C0 5F FF 
09c88     00 28 06 F6 | 	mov	local06, ##-1082130432
09c8c     57 00 00 FF 
09c90     44 E4 05 F1 | 	add	objptr, ##44612
09c94     F2 2E 02 FB | 	rdlong	local09, objptr
09c98     03 2E 66 F0 | 	shl	local09, #3
09c9c     02 00 00 FF 
09ca0     38 E4 85 F1 | 	sub	objptr, ##1080
09ca4     F2 2E 02 F1 | 	add	local09, objptr
09ca8     17 13 02 FB | 	rdlong	arg01, local09
09cac     55 00 00 FF 
09cb0     0C E4 85 F1 | 	sub	objptr, ##43532
09cb4     E8 81 B1 FD | 	call	#__system____builtin_atof
09cb8     FD 14 02 F6 | 	mov	arg02, result1
09cbc     14 13 02 F6 | 	mov	arg01, local06
09cc0     F4 79 B1 FD | 	call	#__system___float_mul
09cc4     FD 1E 02 F6 | 	mov	local01, result1
09cc8     1E 22 06 F6 | 	mov	local03, #30
09ccc                 | LR__0833
09ccc     0F 29 02 F6 | 	mov	local06, local01
09cd0     10 2B 02 F6 | 	mov	local07, local02
09cd4     11 27 02 F6 | 	mov	local05, local03
09cd8     6A 00 00 FF 
09cdc     7C E4 05 F1 | 	add	objptr, ##54396
09ce0     F2 1E 02 FB | 	rdlong	local01, objptr
09ce4     0F 2F 02 F6 | 	mov	local09, local01
09ce8     01 2E 66 F0 | 	shl	local09, #1
09cec     0F 2F 02 F1 | 	add	local09, local01
09cf0     02 2E 66 F0 | 	shl	local09, #2
09cf4     03 00 00 FF 
09cf8     00 E4 85 F1 | 	sub	objptr, ##1536
09cfc     F2 2E 02 F1 | 	add	local09, objptr
09d00     17 29 62 FC | 	wrlong	local06, local09
09d04     03 00 00 FF 
09d08     00 E4 05 F1 | 	add	objptr, ##1536
09d0c     F2 2E 02 FB | 	rdlong	local09, objptr
09d10     17 29 02 F6 | 	mov	local06, local09
09d14     01 28 66 F0 | 	shl	local06, #1
09d18     17 29 02 F1 | 	add	local06, local09
09d1c     02 28 66 F0 | 	shl	local06, #2
09d20     03 00 00 FF 
09d24     00 E4 85 F1 | 	sub	objptr, ##1536
09d28     F2 28 02 F1 | 	add	local06, objptr
09d2c     04 28 06 F1 | 	add	local06, #4
09d30     14 2B 62 FC | 	wrlong	local07, local06
09d34     03 00 00 FF 
09d38     00 E4 05 F1 | 	add	objptr, ##1536
09d3c     F2 2E 02 FB | 	rdlong	local09, objptr
09d40     17 2B 02 F6 | 	mov	local07, local09
09d44     01 2A 66 F0 | 	shl	local07, #1
09d48     17 2B 02 F1 | 	add	local07, local09
09d4c     02 2A 66 F0 | 	shl	local07, #2
09d50     03 00 00 FF 
09d54     00 E4 85 F1 | 	sub	objptr, ##1536
09d58     F2 2A 02 F1 | 	add	local07, objptr
09d5c     08 2A 06 F1 | 	add	local07, #8
09d60     15 27 62 FC | 	wrlong	local05, local07
09d64     03 00 00 FF 
09d68     00 E4 05 F1 | 	add	objptr, ##1536
09d6c     F2 28 02 FB | 	rdlong	local06, objptr
09d70     01 28 06 F1 | 	add	local06, #1
09d74     F2 28 62 FC | 	wrlong	local06, objptr
09d78     13 00 00 FF 
09d7c     38 E4 85 F1 | 	sub	objptr, ##9784
09d80     F2 28 02 FB | 	rdlong	local06, objptr
09d84     01 28 06 F1 | 	add	local06, #1
09d88     F2 28 62 FC | 	wrlong	local06, objptr
09d8c     57 00 00 FF 
09d90     44 E4 85 F1 | 	sub	objptr, ##44612
09d94     9C 02 90 FD | 	jmp	#LR__0842
09d98                 | LR__0834
09d98     1F 22 06 F6 | 	mov	local03, #31
09d9c     57 00 00 FF 
09da0     44 E4 05 F1 | 	add	objptr, ##44612
09da4     F2 16 02 FB | 	rdlong	arg03, objptr
09da8     03 16 66 F0 | 	shl	arg03, #3
09dac     02 00 00 FF 
09db0     38 E4 85 F1 | 	sub	objptr, ##1080
09db4     F2 16 02 F1 | 	add	arg03, objptr
09db8     0B 13 02 FB | 	rdlong	arg01, arg03
09dbc     55 00 00 FF 
09dc0     0C E4 85 F1 | 	sub	objptr, ##43532
09dc4     09 2D 02 F6 | 	mov	local08, arg01
09dc8     97 06 48 FB | 	callpa	#(@LR__0836-@LR__0835)>>2,fcache_load_ptr_
09dcc                 | LR__0835
09dcc     16 FB C9 FA | 	rdbyte	result1, local08 wz
09dd0     01 2C 06 51 |  if_ne	add	local08, #1
09dd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0835
09dd8                 | LR__0836
09dd8     09 2D 82 F1 | 	sub	local08, arg01
09ddc     16 FB 01 F6 | 	mov	result1, local08
09de0     79 00 00 FF 
09de4     E4 E5 05 F1 | 	add	objptr, ##62436
09de8     F2 FA 61 FC | 	wrlong	result1, objptr
09dec     5C E4 85 F1 | 	sub	objptr, #92
09df0     F2 12 02 FB | 	rdlong	arg01, objptr
09df4     FD 12 82 F1 | 	sub	arg01, result1
09df8     04 12 86 F1 | 	sub	arg01, #4
09dfc     03 12 26 F5 | 	andn	arg01, #3
09e00     F2 12 62 FC | 	wrlong	arg01, objptr
09e04     5C E4 05 F1 | 	add	objptr, #92
09e08     F2 14 02 FB | 	rdlong	arg02, objptr
09e0c     79 00 00 FF 
09e10     E4 E5 85 F1 | 	sub	objptr, ##62436
09e14     24 0A B1 FD | 	call	#_pslpoke
09e18                 | '     pslpoke memtop,l
09e18                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
09e18     01 30 06 F6 | 	mov	local10, #1
09e1c     79 00 00 FF 
09e20     E4 E5 05 F1 | 	add	objptr, ##62436
09e24     F2 32 02 FB | 	rdlong	local11, objptr
09e28     79 00 00 FF 
09e2c     E4 E5 85 F1 | 	sub	objptr, ##62436
09e30     01 32 06 F1 | 	add	local11, #1
09e34                 | LR__0837
09e34     19 31 52 F2 | 	cmps	local10, local11 wc
09e38     5C 00 90 3D |  if_ae	jmp	#LR__0838
09e3c     79 00 00 FF 
09e40     88 E5 05 F1 | 	add	objptr, ##62344
09e44     F2 2A 02 FB | 	rdlong	local07, objptr
09e48     03 2A 06 F1 | 	add	local07, #3
09e4c     18 2B 02 F1 | 	add	local07, local10
09e50     22 00 00 FF 
09e54     44 E5 85 F1 | 	sub	objptr, ##17732
09e58     F2 2E 02 FB | 	rdlong	local09, objptr
09e5c     03 2E 66 F0 | 	shl	local09, #3
09e60     02 00 00 FF 
09e64     38 E4 85 F1 | 	sub	objptr, ##1080
09e68     F2 2E 02 F1 | 	add	local09, objptr
09e6c     17 13 02 FB | 	rdlong	arg01, local09
09e70     18 15 02 F6 | 	mov	arg02, local10
09e74     01 16 06 F6 | 	mov	arg03, #1
09e78     55 00 00 FF 
09e7c     0C E4 85 F1 | 	sub	objptr, ##43532
09e80     14 6E B1 FD | 	call	#__system__Mid_S
09e84     FD 14 C2 FA | 	rdbyte	arg02, result1
09e88     15 13 02 F6 | 	mov	arg01, local07
09e8c     3C 0A B1 FD | 	call	#_pspoke
09e90     01 30 06 F1 | 	add	local10, #1
09e94     9C FF 9F FD | 	jmp	#LR__0837
09e98                 | LR__0838
09e98     79 00 00 FF 
09e9c     88 E5 05 F1 | 	add	objptr, ##62344
09ea0     F2 1E 02 FB | 	rdlong	local01, objptr
09ea4     2B 22 06 F6 | 	mov	local03, #43
09ea8     0F 29 02 F6 | 	mov	local06, local01
09eac     10 2B 02 F6 | 	mov	local07, local02
09eb0     11 33 02 F6 | 	mov	local11, local03
09eb4     0F 00 00 FF 
09eb8     0C E5 85 F1 | 	sub	objptr, ##7948
09ebc     F2 30 02 FB | 	rdlong	local10, objptr
09ec0     18 2F 02 F6 | 	mov	local09, local10
09ec4     01 2E 66 F0 | 	shl	local09, #1
09ec8     18 2F 02 F1 | 	add	local09, local10
09ecc     02 2E 66 F0 | 	shl	local09, #2
09ed0     03 00 00 FF 
09ed4     00 E4 85 F1 | 	sub	objptr, ##1536
09ed8     F2 2E 02 F1 | 	add	local09, objptr
09edc     17 29 62 FC | 	wrlong	local06, local09
09ee0     03 00 00 FF 
09ee4     00 E4 05 F1 | 	add	objptr, ##1536
09ee8     F2 30 02 FB | 	rdlong	local10, objptr
09eec     18 2F 02 F6 | 	mov	local09, local10
09ef0     01 2E 66 F0 | 	shl	local09, #1
09ef4     18 2F 02 F1 | 	add	local09, local10
09ef8     02 2E 66 F0 | 	shl	local09, #2
09efc     03 00 00 FF 
09f00     00 E4 85 F1 | 	sub	objptr, ##1536
09f04     F2 2E 02 F1 | 	add	local09, objptr
09f08     04 2E 06 F1 | 	add	local09, #4
09f0c     17 2B 62 FC | 	wrlong	local07, local09
09f10     03 00 00 FF 
09f14     00 E4 05 F1 | 	add	objptr, ##1536
09f18     F2 30 02 FB | 	rdlong	local10, objptr
09f1c     18 2F 02 F6 | 	mov	local09, local10
09f20     01 2E 66 F0 | 	shl	local09, #1
09f24     18 2F 02 F1 | 	add	local09, local10
09f28     02 2E 66 F0 | 	shl	local09, #2
09f2c     03 00 00 FF 
09f30     00 E4 85 F1 | 	sub	objptr, ##1536
09f34     F2 2E 02 F1 | 	add	local09, objptr
09f38     08 2E 06 F1 | 	add	local09, #8
09f3c     17 33 62 FC | 	wrlong	local11, local09
09f40     03 00 00 FF 
09f44     00 E4 05 F1 | 	add	objptr, ##1536
09f48     F2 28 02 FB | 	rdlong	local06, objptr
09f4c     01 28 06 F1 | 	add	local06, #1
09f50     F2 28 62 FC | 	wrlong	local06, objptr
09f54     13 00 00 FF 
09f58     38 E4 85 F1 | 	sub	objptr, ##9784
09f5c     F2 28 02 FB | 	rdlong	local06, objptr
09f60     01 28 06 F1 | 	add	local06, #1
09f64     F2 28 62 FC | 	wrlong	local06, objptr
09f68     57 00 00 FF 
09f6c     44 E4 85 F1 | 	sub	objptr, ##44612
09f70     C0 00 90 FD | 	jmp	#LR__0842
09f74                 | LR__0839
09f74     12 13 02 F6 | 	mov	arg01, local04
09f78     B8 03 B0 FD | 	call	#_getvar
09f7c     57 00 00 FF 
09f80     44 E4 05 F1 | 	add	objptr, ##44612
09f84     F2 28 02 FB | 	rdlong	local06, objptr
09f88     01 28 06 F1 | 	add	local06, #1
09f8c     F2 28 62 FC | 	wrlong	local06, objptr
09f90     57 00 00 FF 
09f94     44 E4 85 F1 | 	sub	objptr, ##44612
09f98     98 00 90 FD | 	jmp	#LR__0842
09f9c                 | LR__0840
09f9c     57 00 00 FF 
09fa0     44 E4 05 F1 | 	add	objptr, ##44612
09fa4     F2 28 02 FB | 	rdlong	local06, objptr
09fa8     01 28 06 F1 | 	add	local06, #1
09fac     F2 28 62 FC | 	wrlong	local06, objptr
09fb0     57 00 00 FF 
09fb4     44 E4 85 F1 | 	sub	objptr, ##44612
09fb8     64 F2 BF FD | 	call	#_expr
09fbc                 | '     ct+=1
09fbc                 | '     expr() 
09fbc                 | '     if lparts(ct).token=token_rpar then ct+=1
09fbc     57 00 00 FF 
09fc0     44 E4 05 F1 | 	add	objptr, ##44612
09fc4     F2 32 02 FB | 	rdlong	local11, objptr
09fc8     03 32 66 F0 | 	shl	local11, #3
09fcc     02 00 00 FF 
09fd0     38 E4 85 F1 | 	sub	objptr, ##1080
09fd4     F2 32 02 F1 | 	add	local11, objptr
09fd8     04 32 06 F1 | 	add	local11, #4
09fdc     19 33 02 FB | 	rdlong	local11, local11
09fe0     14 32 0E F2 | 	cmp	local11, #20 wz
09fe4     55 00 00 FF 
09fe8     0C E4 85 F1 | 	sub	objptr, ##43532
09fec     44 00 90 5D |  if_ne	jmp	#LR__0842
09ff0     57 00 00 FF 
09ff4     44 E4 05 F1 | 	add	objptr, ##44612
09ff8     F2 28 02 FB | 	rdlong	local06, objptr
09ffc     01 28 06 F1 | 	add	local06, #1
0a000     F2 28 62 FC | 	wrlong	local06, objptr
0a004     57 00 00 FF 
0a008     44 E4 85 F1 | 	sub	objptr, ##44612
0a00c     24 00 90 FD | 	jmp	#LR__0842
0a010                 | LR__0841
0a010     12 13 02 F6 | 	mov	arg01, local04
0a014     28 00 B0 FD | 	call	#_getfun
0a018     57 00 00 FF 
0a01c     44 E4 05 F1 | 	add	objptr, ##44612
0a020     F2 28 02 FB | 	rdlong	local06, objptr
0a024     01 28 06 F1 | 	add	local06, #1
0a028     F2 28 62 FC | 	wrlong	local06, objptr
0a02c     57 00 00 FF 
0a030     44 E4 85 F1 | 	sub	objptr, ##44612
0a034                 | LR__0842
0a034     A7 F0 03 F6 | 	mov	ptra, fp
0a038     B2 00 A0 FD | 	call	#popregs_
0a03c                 | _getvalue_ret
0a03c     2D 00 64 FD | 	ret
0a040                 | 
0a040                 | ' 
0a040                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0a040                 | _getfun
0a040     0A 4A 05 F6 | 	mov	COUNT_, #10
0a044     A8 00 A0 FD | 	call	#pushregs_
0a048                 | _getfun_enter
0a048     09 25 02 F6 | 	mov	local04, arg01
0a04c     57 00 00 FF 
0a050     44 E4 05 F1 | 	add	objptr, ##44612
0a054     F2 26 02 FB | 	rdlong	local05, objptr
0a058     13 29 02 F6 | 	mov	local06, local05
0a05c     00 2A 06 F6 | 	mov	local07, #0
0a060                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
0a060                 | ' oldct=ct
0a060                 | ' numpar=0
0a060                 | '   
0a060                 | ' if lparts(ct+1).token=token_lpar then
0a060     01 26 06 F1 | 	add	local05, #1
0a064     03 26 66 F0 | 	shl	local05, #3
0a068     02 00 00 FF 
0a06c     38 E4 85 F1 | 	sub	objptr, ##1080
0a070     F2 26 02 F1 | 	add	local05, objptr
0a074     04 26 06 F1 | 	add	local05, #4
0a078     13 27 02 FB | 	rdlong	local05, local05
0a07c     15 26 0E F2 | 	cmp	local05, #21 wz
0a080     55 00 00 FF 
0a084     0C E4 85 F1 | 	sub	objptr, ##43532
0a088     08 01 90 5D |  if_ne	jmp	#LR__0854
0a08c     57 00 00 FF 
0a090     44 E4 05 F1 | 	add	objptr, ##44612
0a094     F2 2C 02 FB | 	rdlong	local08, objptr
0a098     01 2C 06 F1 | 	add	local08, #1
0a09c     F2 2C 62 FC | 	wrlong	local08, objptr
0a0a0     57 00 00 FF 
0a0a4     44 E4 85 F1 | 	sub	objptr, ##44612
0a0a8                 | '   ct+=1 											' omit this lpar, this is for expr list
0a0a8                 | '   do
0a0a8                 | LR__0850
0a0a8     57 00 00 FF 
0a0ac     44 E4 05 F1 | 	add	objptr, ##44612
0a0b0     F2 26 02 FB | 	rdlong	local05, objptr
0a0b4     01 26 06 F1 | 	add	local05, #1
0a0b8     F2 26 62 FC | 	wrlong	local05, objptr
0a0bc                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0a0bc                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0a0bc     03 26 66 F0 | 	shl	local05, #3
0a0c0     02 00 00 FF 
0a0c4     38 E4 85 F1 | 	sub	objptr, ##1080
0a0c8     F2 26 02 F1 | 	add	local05, objptr
0a0cc     04 26 06 F1 | 	add	local05, #4
0a0d0     13 2D 02 FB | 	rdlong	local08, local05
0a0d4     15 2C 0E F2 | 	cmp	local08, #21 wz
0a0d8     55 00 00 FF 
0a0dc     0C E4 85 F1 | 	sub	objptr, ##43532
0a0e0     40 00 90 5D |  if_ne	jmp	#LR__0851
0a0e4     57 00 00 FF 
0a0e8     44 E4 05 F1 | 	add	objptr, ##44612
0a0ec     F2 2C 02 FB | 	rdlong	local08, objptr
0a0f0     01 2C 06 F1 | 	add	local08, #1
0a0f4     F2 2C 62 FC | 	wrlong	local08, objptr
0a0f8     57 00 00 FF 
0a0fc     44 E4 85 F1 | 	sub	objptr, ##44612
0a100     1C F1 BF FD | 	call	#_expr
0a104     57 00 00 FF 
0a108     44 E4 05 F1 | 	add	objptr, ##44612
0a10c     F2 2C 02 FB | 	rdlong	local08, objptr
0a110     01 2C 06 F1 | 	add	local08, #1
0a114     F2 2C 62 FC | 	wrlong	local08, objptr
0a118     57 00 00 FF 
0a11c     44 E4 85 F1 | 	sub	objptr, ##44612
0a120     04 00 90 FD | 	jmp	#LR__0852
0a124                 | LR__0851
0a124     F8 F0 BF FD | 	call	#_expr
0a128                 | LR__0852
0a128     01 2A 06 F1 | 	add	local07, #1
0a12c     57 00 00 FF 
0a130     44 E4 05 F1 | 	add	objptr, ##44612
0a134     F2 26 02 FB | 	rdlong	local05, objptr
0a138     03 26 66 F0 | 	shl	local05, #3
0a13c     02 00 00 FF 
0a140     38 E4 85 F1 | 	sub	objptr, ##1080
0a144     F2 26 02 F1 | 	add	local05, objptr
0a148     04 26 06 F1 | 	add	local05, #4
0a14c     13 2D 02 FB | 	rdlong	local08, local05
0a150     14 2C 0E F2 | 	cmp	local08, #20 wz
0a154     55 00 00 FF 
0a158     0C E4 85 F1 | 	sub	objptr, ##43532
0a15c     34 00 90 AD |  if_e	jmp	#LR__0853
0a160     57 00 00 FF 
0a164     44 E4 05 F1 | 	add	objptr, ##44612
0a168     F2 2C 02 FB | 	rdlong	local08, objptr
0a16c     03 2C 66 F0 | 	shl	local08, #3
0a170     02 00 00 FF 
0a174     38 E4 85 F1 | 	sub	objptr, ##1080
0a178     F2 2C 02 F1 | 	add	local08, objptr
0a17c     04 2C 06 F1 | 	add	local08, #4
0a180     16 2D 02 FB | 	rdlong	local08, local08
0a184     FE 2D 0E F2 | 	cmp	local08, #510 wz
0a188     55 00 00 FF 
0a18c     0C E4 85 F1 | 	sub	objptr, ##43532
0a190     14 FF 9F 5D |  if_ne	jmp	#LR__0850
0a194                 | LR__0853
0a194                 | LR__0854
0a194     15 1F 02 F6 | 	mov	local01, local07
0a198     03 28 66 F0 | 	shl	local06, #3
0a19c     55 00 00 FF 
0a1a0     0C E4 05 F1 | 	add	objptr, ##43532
0a1a4     F2 28 02 F1 | 	add	local06, objptr
0a1a8     04 28 06 F1 | 	add	local06, #4
0a1ac     14 23 02 FB | 	rdlong	local03, local06
0a1b0     0F 2D 02 F6 | 	mov	local08, local01
0a1b4     10 2B 02 F6 | 	mov	local07, local02
0a1b8     11 29 02 F6 | 	mov	local06, local03
0a1bc     15 00 00 FF 
0a1c0     70 E4 05 F1 | 	add	objptr, ##10864
0a1c4     F2 26 02 FB | 	rdlong	local05, objptr
0a1c8     13 13 02 F6 | 	mov	arg01, local05
0a1cc     01 12 66 F0 | 	shl	arg01, #1
0a1d0     13 13 02 F1 | 	add	arg01, local05
0a1d4     02 12 66 F0 | 	shl	arg01, #2
0a1d8     03 00 00 FF 
0a1dc     00 E4 85 F1 | 	sub	objptr, ##1536
0a1e0     F2 12 02 F1 | 	add	arg01, objptr
0a1e4     09 2D 62 FC | 	wrlong	local08, arg01
0a1e8     03 00 00 FF 
0a1ec     00 E4 05 F1 | 	add	objptr, ##1536
0a1f0     F2 2C 02 FB | 	rdlong	local08, objptr
0a1f4     16 2F 02 F6 | 	mov	local09, local08
0a1f8     01 2E 66 F0 | 	shl	local09, #1
0a1fc     16 2F 02 F1 | 	add	local09, local08
0a200     02 2E 66 F0 | 	shl	local09, #2
0a204     03 00 00 FF 
0a208     00 E4 85 F1 | 	sub	objptr, ##1536
0a20c     F2 2E 02 F1 | 	add	local09, objptr
0a210     04 2E 06 F1 | 	add	local09, #4
0a214     17 2B 62 FC | 	wrlong	local07, local09
0a218     03 00 00 FF 
0a21c     00 E4 05 F1 | 	add	objptr, ##1536
0a220     F2 2C 02 FB | 	rdlong	local08, objptr
0a224     16 31 02 F6 | 	mov	local10, local08
0a228     01 30 66 F0 | 	shl	local10, #1
0a22c     16 31 02 F1 | 	add	local10, local08
0a230     02 30 66 F0 | 	shl	local10, #2
0a234     03 00 00 FF 
0a238     00 E4 85 F1 | 	sub	objptr, ##1536
0a23c     F2 30 02 F1 | 	add	local10, objptr
0a240     08 30 06 F1 | 	add	local10, #8
0a244     18 29 62 FC | 	wrlong	local06, local10
0a248     03 00 00 FF 
0a24c     00 E4 05 F1 | 	add	objptr, ##1536
0a250     F2 2C 02 FB | 	rdlong	local08, objptr
0a254     01 2C 06 F1 | 	add	local08, #1
0a258     F2 2C 62 FC | 	wrlong	local08, objptr
0a25c     6A 00 00 FF 
0a260     7C E4 85 F1 | 	sub	objptr, ##54396
0a264                 | ' 
0a264                 | ' t2.result.uresult=numpar
0a264                 | ' 
0a264                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0a264                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0a264                 | ' 
0a264                 | '   
0a264                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0a264     FF FF 7F FF 
0a268     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a26c     B8 00 90 5D |  if_ne	jmp	#LR__0855
0a270     15 22 06 F6 | 	mov	local03, #21
0a274     0F 2D 02 F6 | 	mov	local08, local01
0a278     10 2B 02 F6 | 	mov	local07, local02
0a27c     11 29 02 F6 | 	mov	local06, local03
0a280     6A 00 00 FF 
0a284     7C E4 05 F1 | 	add	objptr, ##54396
0a288     F2 26 02 FB | 	rdlong	local05, objptr
0a28c     13 13 02 F6 | 	mov	arg01, local05
0a290     01 12 66 F0 | 	shl	arg01, #1
0a294     13 13 02 F1 | 	add	arg01, local05
0a298     02 12 66 F0 | 	shl	arg01, #2
0a29c     03 00 00 FF 
0a2a0     00 E4 85 F1 | 	sub	objptr, ##1536
0a2a4     F2 12 02 F1 | 	add	arg01, objptr
0a2a8     09 2D 62 FC | 	wrlong	local08, arg01
0a2ac     03 00 00 FF 
0a2b0     00 E4 05 F1 | 	add	objptr, ##1536
0a2b4     F2 30 02 FB | 	rdlong	local10, objptr
0a2b8     18 2F 02 F6 | 	mov	local09, local10
0a2bc     01 2E 66 F0 | 	shl	local09, #1
0a2c0     18 2F 02 F1 | 	add	local09, local10
0a2c4     02 2E 66 F0 | 	shl	local09, #2
0a2c8     03 00 00 FF 
0a2cc     00 E4 85 F1 | 	sub	objptr, ##1536
0a2d0     F2 2E 02 F1 | 	add	local09, objptr
0a2d4     04 2E 06 F1 | 	add	local09, #4
0a2d8     17 2B 62 FC | 	wrlong	local07, local09
0a2dc     03 00 00 FF 
0a2e0     00 E4 05 F1 | 	add	objptr, ##1536
0a2e4     F2 2E 02 FB | 	rdlong	local09, objptr
0a2e8     17 31 02 F6 | 	mov	local10, local09
0a2ec     01 30 66 F0 | 	shl	local10, #1
0a2f0     17 31 02 F1 | 	add	local10, local09
0a2f4     02 30 66 F0 | 	shl	local10, #2
0a2f8     03 00 00 FF 
0a2fc     00 E4 85 F1 | 	sub	objptr, ##1536
0a300     F2 30 02 F1 | 	add	local10, objptr
0a304     08 30 06 F1 | 	add	local10, #8
0a308     18 29 62 FC | 	wrlong	local06, local10
0a30c     03 00 00 FF 
0a310     00 E4 05 F1 | 	add	objptr, ##1536
0a314     F2 2C 02 FB | 	rdlong	local08, objptr
0a318     01 2C 06 F1 | 	add	local08, #1
0a31c     F2 2C 62 FC | 	wrlong	local08, objptr
0a320     6A 00 00 FF 
0a324     7C E4 85 F1 | 	sub	objptr, ##54396
0a328                 | LR__0855
0a328     A7 F0 03 F6 | 	mov	ptra, fp
0a32c     B2 00 A0 FD | 	call	#popregs_
0a330                 | _getfun_ret
0a330     2D 00 64 FD | 	ret
0a334                 | 
0a334                 | '   
0a334                 | '   
0a334                 | ' sub getvar(m as integer) 
0a334                 | _getvar
0a334     0A 4A 05 F6 | 	mov	COUNT_, #10
0a338     A8 00 A0 FD | 	call	#pushregs_
0a33c                 | _getvar_enter
0a33c     09 25 02 F6 | 	mov	local04, arg01
0a340     57 00 00 FF 
0a344     44 E4 05 F1 | 	add	objptr, ##44612
0a348     F2 14 02 FB | 	rdlong	arg02, objptr
0a34c     03 14 66 F0 | 	shl	arg02, #3
0a350     02 00 00 FF 
0a354     38 E4 85 F1 | 	sub	objptr, ##1080
0a358     F2 14 02 F1 | 	add	arg02, objptr
0a35c     0A 27 02 FB | 	rdlong	local05, arg02
0a360     13 13 02 F6 | 	mov	arg01, local05
0a364     01 14 06 F6 | 	mov	arg02, #1
0a368     55 00 00 FF 
0a36c     0C E4 85 F1 | 	sub	objptr, ##43532
0a370     94 68 B1 FD | 	call	#__system__Right_S
0a374     FD 28 02 F6 | 	mov	local06, result1
0a378     01 2A 66 F6 | 	neg	local07, #1
0a37c                 | ' 
0a37c                 | ' varname$=lparts(ct).part$
0a37c                 | ' suffix$=right$(varname$,1)
0a37c                 | ' j=-1
0a37c                 | ' 
0a37c                 | ' for i=0 to varnum-1
0a37c     00 2C 06 F6 | 	mov	local08, #0
0a380     55 00 00 FF 
0a384     08 E4 05 F1 | 	add	objptr, ##43528
0a388     F2 2E 02 FB | 	rdlong	local09, objptr
0a38c     55 00 00 FF 
0a390     08 E4 85 F1 | 	sub	objptr, ##43528
0a394                 | LR__0860
0a394     17 2D 52 F2 | 	cmps	local08, local09 wc
0a398     38 00 90 3D |  if_ae	jmp	#LR__0861
0a39c                 | '   if variables(i).name=varname$ then j=i : exit
0a39c     16 15 02 F6 | 	mov	arg02, local08
0a3a0     04 14 66 F0 | 	shl	arg02, #4
0a3a4     34 00 00 FF 
0a3a8     F8 E5 05 F1 | 	add	objptr, ##27128
0a3ac     F2 14 02 F1 | 	add	arg02, objptr
0a3b0     0A 13 02 FB | 	rdlong	arg01, arg02
0a3b4     13 15 02 F6 | 	mov	arg02, local05
0a3b8     34 00 00 FF 
0a3bc     F8 E5 85 F1 | 	sub	objptr, ##27128
0a3c0     9C 47 B1 FD | 	call	#__system___string_cmp
0a3c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3c8     16 2B 02 A6 |  if_e	mov	local07, local08
0a3cc     01 2C 06 51 |  if_ne	add	local08, #1
0a3d0     C0 FF 9F 5D |  if_ne	jmp	#LR__0860
0a3d4                 | LR__0861
0a3d4                 | ' if  j=-1 andalso varnum<maxvars then   
0a3d4     FF FF 7F FF 
0a3d8     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0a3dc     A8 00 90 5D |  if_ne	jmp	#LR__0862
0a3e0     55 00 00 FF 
0a3e4     08 E4 05 F1 | 	add	objptr, ##43528
0a3e8     F2 2E 02 FB | 	rdlong	local09, objptr
0a3ec     55 00 00 FF 
0a3f0     08 E4 85 F1 | 	sub	objptr, ##43528
0a3f4     02 00 00 FF 
0a3f8     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0a3fc     88 00 90 3D |  if_ae	jmp	#LR__0862
0a400     55 00 00 FF 
0a404     08 E4 05 F1 | 	add	objptr, ##43528
0a408     F2 2E 02 FB | 	rdlong	local09, objptr
0a40c     04 2E 66 F0 | 	shl	local09, #4
0a410     20 00 00 FF 
0a414     10 E4 85 F1 | 	sub	objptr, ##16400
0a418     F2 2E 02 F1 | 	add	local09, objptr
0a41c     17 27 62 FC | 	wrlong	local05, local09
0a420     20 00 00 FF 
0a424     10 E4 05 F1 | 	add	objptr, ##16400
0a428     F2 2E 02 FB | 	rdlong	local09, objptr
0a42c     04 2E 66 F0 | 	shl	local09, #4
0a430     20 00 00 FF 
0a434     10 E4 85 F1 | 	sub	objptr, ##16400
0a438     F2 2E 02 F1 | 	add	local09, objptr
0a43c     04 2E 06 F1 | 	add	local09, #4
0a440     17 01 68 FC | 	wrlong	#0, local09
0a444     20 00 00 FF 
0a448     10 E4 05 F1 | 	add	objptr, ##16400
0a44c     F2 2E 02 FB | 	rdlong	local09, objptr
0a450     04 2E 66 F0 | 	shl	local09, #4
0a454     20 00 00 FF 
0a458     10 E4 85 F1 | 	sub	objptr, ##16400
0a45c     F2 2E 02 F1 | 	add	local09, objptr
0a460     0C 2E 06 F1 | 	add	local09, #12
0a464     17 39 68 FC | 	wrlong	#28, local09
0a468     20 00 00 FF 
0a46c     10 E4 05 F1 | 	add	objptr, ##16400
0a470     F2 2E 02 FB | 	rdlong	local09, objptr
0a474     17 2B 02 F6 | 	mov	local07, local09
0a478     01 2E 06 F1 | 	add	local09, #1
0a47c     F2 2E 62 FC | 	wrlong	local09, objptr
0a480     55 00 00 FF 
0a484     08 E4 85 F1 | 	sub	objptr, ##43528
0a488                 | LR__0862
0a488     00 2E 06 F6 | 	mov	local09, #0
0a48c                 | ' numpar=0
0a48c                 | ' ' check if it is an array
0a48c                 | ' 
0a48c                 | ' if lparts(ct+1).token=token_lpar then
0a48c     57 00 00 FF 
0a490     44 E4 05 F1 | 	add	objptr, ##44612
0a494     F2 2C 02 FB | 	rdlong	local08, objptr
0a498     01 2C 06 F1 | 	add	local08, #1
0a49c     03 2C 66 F0 | 	shl	local08, #3
0a4a0     02 00 00 FF 
0a4a4     38 E4 85 F1 | 	sub	objptr, ##1080
0a4a8     F2 2C 02 F1 | 	add	local08, objptr
0a4ac     04 2C 06 F1 | 	add	local08, #4
0a4b0     16 2D 02 FB | 	rdlong	local08, local08
0a4b4     15 2C 0E F2 | 	cmp	local08, #21 wz
0a4b8     55 00 00 FF 
0a4bc     0C E4 85 F1 | 	sub	objptr, ##43532
0a4c0     08 01 90 5D |  if_ne	jmp	#LR__0867
0a4c4     57 00 00 FF 
0a4c8     44 E4 05 F1 | 	add	objptr, ##44612
0a4cc     F2 30 02 FB | 	rdlong	local10, objptr
0a4d0     01 30 06 F1 | 	add	local10, #1
0a4d4     F2 30 62 FC | 	wrlong	local10, objptr
0a4d8     57 00 00 FF 
0a4dc     44 E4 85 F1 | 	sub	objptr, ##44612
0a4e0                 | '   ct+=1 											' omit this lpar, this is for expr list
0a4e0                 | '   do
0a4e0                 | LR__0863
0a4e0     57 00 00 FF 
0a4e4     44 E4 05 F1 | 	add	objptr, ##44612
0a4e8     F2 2C 02 FB | 	rdlong	local08, objptr
0a4ec     01 2C 06 F1 | 	add	local08, #1
0a4f0     F2 2C 62 FC | 	wrlong	local08, objptr
0a4f4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0a4f4                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0a4f4     03 2C 66 F0 | 	shl	local08, #3
0a4f8     02 00 00 FF 
0a4fc     38 E4 85 F1 | 	sub	objptr, ##1080
0a500     F2 2C 02 F1 | 	add	local08, objptr
0a504     04 2C 06 F1 | 	add	local08, #4
0a508     16 31 02 FB | 	rdlong	local10, local08
0a50c     15 30 0E F2 | 	cmp	local10, #21 wz
0a510     55 00 00 FF 
0a514     0C E4 85 F1 | 	sub	objptr, ##43532
0a518     40 00 90 5D |  if_ne	jmp	#LR__0864
0a51c     57 00 00 FF 
0a520     44 E4 05 F1 | 	add	objptr, ##44612
0a524     F2 30 02 FB | 	rdlong	local10, objptr
0a528     01 30 06 F1 | 	add	local10, #1
0a52c     F2 30 62 FC | 	wrlong	local10, objptr
0a530     57 00 00 FF 
0a534     44 E4 85 F1 | 	sub	objptr, ##44612
0a538     E4 EC BF FD | 	call	#_expr
0a53c     57 00 00 FF 
0a540     44 E4 05 F1 | 	add	objptr, ##44612
0a544     F2 30 02 FB | 	rdlong	local10, objptr
0a548     01 30 06 F1 | 	add	local10, #1
0a54c     F2 30 62 FC | 	wrlong	local10, objptr
0a550     57 00 00 FF 
0a554     44 E4 85 F1 | 	sub	objptr, ##44612
0a558     04 00 90 FD | 	jmp	#LR__0865
0a55c                 | LR__0864
0a55c     C0 EC BF FD | 	call	#_expr
0a560                 | LR__0865
0a560     01 2E 06 F1 | 	add	local09, #1
0a564     57 00 00 FF 
0a568     44 E4 05 F1 | 	add	objptr, ##44612
0a56c     F2 2C 02 FB | 	rdlong	local08, objptr
0a570     03 2C 66 F0 | 	shl	local08, #3
0a574     02 00 00 FF 
0a578     38 E4 85 F1 | 	sub	objptr, ##1080
0a57c     F2 2C 02 F1 | 	add	local08, objptr
0a580     04 2C 06 F1 | 	add	local08, #4
0a584     16 31 02 FB | 	rdlong	local10, local08
0a588     14 30 0E F2 | 	cmp	local10, #20 wz
0a58c     55 00 00 FF 
0a590     0C E4 85 F1 | 	sub	objptr, ##43532
0a594     34 00 90 AD |  if_e	jmp	#LR__0866
0a598     57 00 00 FF 
0a59c     44 E4 05 F1 | 	add	objptr, ##44612
0a5a0     F2 30 02 FB | 	rdlong	local10, objptr
0a5a4     03 30 66 F0 | 	shl	local10, #3
0a5a8     02 00 00 FF 
0a5ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a5b0     F2 30 02 F1 | 	add	local10, objptr
0a5b4     04 30 06 F1 | 	add	local10, #4
0a5b8     18 31 02 FB | 	rdlong	local10, local10
0a5bc     FE 31 0E F2 | 	cmp	local10, #510 wz
0a5c0     55 00 00 FF 
0a5c4     0C E4 85 F1 | 	sub	objptr, ##43532
0a5c8     14 FF 9F 5D |  if_ne	jmp	#LR__0863
0a5cc                 | LR__0866
0a5cc                 | LR__0867
0a5cc     17 21 02 F6 | 	mov	local02, local09
0a5d0     11 22 06 F6 | 	mov	local03, #17
0a5d4     15 1F 02 F6 | 	mov	local01, local07
0a5d8     0F 31 02 F6 | 	mov	local10, local01
0a5dc     10 2F 02 F6 | 	mov	local09, local02
0a5e0     11 2D 02 F6 | 	mov	local08, local03
0a5e4     6A 00 00 FF 
0a5e8     7C E4 05 F1 | 	add	objptr, ##54396
0a5ec     F2 2A 02 FB | 	rdlong	local07, objptr
0a5f0     15 29 02 F6 | 	mov	local06, local07
0a5f4     01 28 66 F0 | 	shl	local06, #1
0a5f8     15 29 02 F1 | 	add	local06, local07
0a5fc     02 28 66 F0 | 	shl	local06, #2
0a600     03 00 00 FF 
0a604     00 E4 85 F1 | 	sub	objptr, ##1536
0a608     F2 28 02 F1 | 	add	local06, objptr
0a60c     14 31 62 FC | 	wrlong	local10, local06
0a610     03 00 00 FF 
0a614     00 E4 05 F1 | 	add	objptr, ##1536
0a618     F2 30 02 FB | 	rdlong	local10, objptr
0a61c     18 27 02 F6 | 	mov	local05, local10
0a620     01 26 66 F0 | 	shl	local05, #1
0a624     18 27 02 F1 | 	add	local05, local10
0a628     02 26 66 F0 | 	shl	local05, #2
0a62c     03 00 00 FF 
0a630     00 E4 85 F1 | 	sub	objptr, ##1536
0a634     F2 26 02 F1 | 	add	local05, objptr
0a638     04 26 06 F1 | 	add	local05, #4
0a63c     13 2F 62 FC | 	wrlong	local09, local05
0a640     03 00 00 FF 
0a644     00 E4 05 F1 | 	add	objptr, ##1536
0a648     F2 30 02 FB | 	rdlong	local10, objptr
0a64c     18 FB 01 F6 | 	mov	result1, local10
0a650     01 FA 65 F0 | 	shl	result1, #1
0a654     18 FB 01 F1 | 	add	result1, local10
0a658     02 FA 65 F0 | 	shl	result1, #2
0a65c     03 00 00 FF 
0a660     00 E4 85 F1 | 	sub	objptr, ##1536
0a664     F2 FA 01 F1 | 	add	result1, objptr
0a668     08 FA 05 F1 | 	add	result1, #8
0a66c     FD 2C 62 FC | 	wrlong	local08, result1
0a670     03 00 00 FF 
0a674     00 E4 05 F1 | 	add	objptr, ##1536
0a678     F2 30 02 FB | 	rdlong	local10, objptr
0a67c     01 30 06 F1 | 	add	local10, #1
0a680     F2 30 62 FC | 	wrlong	local10, objptr
0a684     6A 00 00 FF 
0a688     7C E4 85 F1 | 	sub	objptr, ##54396
0a68c                 | ' 
0a68c                 | ' t2.result.twowords(1)=numpar
0a68c                 | ' 
0a68c                 | ' 
0a68c                 | ' 
0a68c                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0a68c                 | ' 
0a68c                 | ' 
0a68c                 | '  
0a68c                 | ' 
0a68c                 | ' 701 
0a68c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0a68c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0a68c     FF FF 7F FF 
0a690     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a694     B8 00 90 5D |  if_ne	jmp	#LR__0868
0a698     15 22 06 F6 | 	mov	local03, #21
0a69c     0F 31 02 F6 | 	mov	local10, local01
0a6a0     10 2F 02 F6 | 	mov	local09, local02
0a6a4     11 2D 02 F6 | 	mov	local08, local03
0a6a8     6A 00 00 FF 
0a6ac     7C E4 05 F1 | 	add	objptr, ##54396
0a6b0     F2 2A 02 FB | 	rdlong	local07, objptr
0a6b4     15 29 02 F6 | 	mov	local06, local07
0a6b8     01 28 66 F0 | 	shl	local06, #1
0a6bc     15 29 02 F1 | 	add	local06, local07
0a6c0     02 28 66 F0 | 	shl	local06, #2
0a6c4     03 00 00 FF 
0a6c8     00 E4 85 F1 | 	sub	objptr, ##1536
0a6cc     F2 28 02 F1 | 	add	local06, objptr
0a6d0     14 31 62 FC | 	wrlong	local10, local06
0a6d4     03 00 00 FF 
0a6d8     00 E4 05 F1 | 	add	objptr, ##1536
0a6dc     F2 1E 02 FB | 	rdlong	local01, objptr
0a6e0     0F 27 02 F6 | 	mov	local05, local01
0a6e4     01 26 66 F0 | 	shl	local05, #1
0a6e8     0F 27 02 F1 | 	add	local05, local01
0a6ec     02 26 66 F0 | 	shl	local05, #2
0a6f0     03 00 00 FF 
0a6f4     00 E4 85 F1 | 	sub	objptr, ##1536
0a6f8     F2 26 02 F1 | 	add	local05, objptr
0a6fc     04 26 06 F1 | 	add	local05, #4
0a700     13 2F 62 FC | 	wrlong	local09, local05
0a704     03 00 00 FF 
0a708     00 E4 05 F1 | 	add	objptr, ##1536
0a70c     F2 1E 02 FB | 	rdlong	local01, objptr
0a710     0F FB 01 F6 | 	mov	result1, local01
0a714     01 FA 65 F0 | 	shl	result1, #1
0a718     0F FB 01 F1 | 	add	result1, local01
0a71c     02 FA 65 F0 | 	shl	result1, #2
0a720     03 00 00 FF 
0a724     00 E4 85 F1 | 	sub	objptr, ##1536
0a728     F2 FA 01 F1 | 	add	result1, objptr
0a72c     08 FA 05 F1 | 	add	result1, #8
0a730     FD 2C 62 FC | 	wrlong	local08, result1
0a734     03 00 00 FF 
0a738     00 E4 05 F1 | 	add	objptr, ##1536
0a73c     F2 30 02 FB | 	rdlong	local10, objptr
0a740     01 30 06 F1 | 	add	local10, #1
0a744     F2 30 62 FC | 	wrlong	local10, objptr
0a748     6A 00 00 FF 
0a74c     7C E4 85 F1 | 	sub	objptr, ##54396
0a750                 | LR__0868
0a750     A7 F0 03 F6 | 	mov	ptra, fp
0a754     B2 00 A0 FD | 	call	#popregs_
0a758                 | _getvar_ret
0a758     2D 00 64 FD | 	ret
0a75c                 | 
0a75c                 | ' 
0a75c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a75c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0a75c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a75c                 | ' 
0a75c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a75c                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
0a75c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a75c                 | ' 
0a75c                 | ' function execute_line (astart=0 as integer) as integer
0a75c                 | _execute_line
0a75c     04 4A 05 F6 | 	mov	COUNT_, #4
0a760     A8 00 A0 FD | 	call	#pushregs_
0a764     78 00 00 FF 
0a768     C0 E4 05 F1 | 	add	objptr, ##61632
0a76c     F2 00 68 FC | 	wrlong	#0, objptr
0a770                 | ' runptr2=0
0a770                 | ' for lineptr_e=astart to lineptr-1
0a770     0E 00 00 FF 
0a774     40 E4 85 F1 | 	sub	objptr, ##7232
0a778     F2 12 62 FC | 	wrlong	arg01, objptr
0a77c     04 E4 85 F1 | 	sub	objptr, #4
0a780     F2 1E 02 FB | 	rdlong	local01, objptr
0a784     6A 00 00 FF 
0a788     7C E4 85 F1 | 	sub	objptr, ##54396
0a78c                 | LR__0870
0a78c     6A 00 00 FF 
0a790     80 E4 05 F1 | 	add	objptr, ##54400
0a794     F2 FA 01 FB | 	rdlong	result1, objptr
0a798     6A 00 00 FF 
0a79c     80 E4 85 F1 | 	sub	objptr, ##54400
0a7a0     0F FB 51 F2 | 	cmps	result1, local01 wc
0a7a4     98 00 90 3D |  if_ae	jmp	#LR__0871
0a7a8     6A 00 00 FF 
0a7ac     80 E4 05 F1 | 	add	objptr, ##54400
0a7b0     F2 FA 01 FB | 	rdlong	result1, objptr
0a7b4     FD 20 02 F6 | 	mov	local02, result1
0a7b8     01 20 66 F0 | 	shl	local02, #1
0a7bc     FD 20 02 F1 | 	add	local02, result1
0a7c0     02 20 66 F0 | 	shl	local02, #2
0a7c4     03 00 00 FF 
0a7c8     04 E4 85 F1 | 	sub	objptr, ##1540
0a7cc     F2 20 02 F1 | 	add	local02, objptr
0a7d0     08 20 06 F1 | 	add	local02, #8
0a7d4     10 21 02 FB | 	rdlong	local02, local02
0a7d8     10 21 E2 F8 | 	getbyte	local02, local02, #0
0a7dc     02 20 66 F0 | 	shl	local02, #2
0a7e0     04 00 00 FF 
0a7e4     1C E4 85 F1 | 	sub	objptr, ##2076
0a7e8     F2 20 02 F1 | 	add	local02, objptr
0a7ec     10 21 02 FB | 	rdlong	local02, local02
0a7f0     10 23 02 F6 | 	mov	local03, local02
0a7f4     13 20 46 F7 | 	zerox	local02, #19
0a7f8     14 22 46 F0 | 	shr	local03, #20
0a7fc     02 22 66 F0 | 	shl	local03, #2
0a800     ED 22 02 F1 | 	add	local03, __methods__
0a804     11 23 02 FB | 	rdlong	local03, local03
0a808     63 00 00 FF 
0a80c     60 E4 85 F1 | 	sub	objptr, ##50784
0a810     F2 24 02 F6 | 	mov	local04, objptr
0a814     10 E5 01 F6 | 	mov	objptr, local02
0a818     2D 22 62 FD | 	call	local03
0a81c     12 E5 01 F6 | 	mov	objptr, local04
0a820     6A 00 00 FF 
0a824     80 E4 05 F1 | 	add	objptr, ##54400
0a828     F2 24 02 FB | 	rdlong	local04, objptr
0a82c     01 24 06 F1 | 	add	local04, #1
0a830     F2 24 62 FC | 	wrlong	local04, objptr
0a834     6A 00 00 FF 
0a838     80 E4 85 F1 | 	sub	objptr, ##54400
0a83c     4C FF 9F FD | 	jmp	#LR__0870
0a840                 | LR__0871
0a840                 | ' return runptr2
0a840     78 00 00 FF 
0a844     C0 E4 05 F1 | 	add	objptr, ##61632
0a848     F2 FA 01 FB | 	rdlong	result1, objptr
0a84c     78 00 00 FF 
0a850     C0 E4 85 F1 | 	sub	objptr, ##61632
0a854     A7 F0 03 F6 | 	mov	ptra, fp
0a858     B2 00 A0 FD | 	call	#popregs_
0a85c                 | _execute_line_ret
0a85c     2D 00 64 FD | 	ret
0a860                 | 
0a860                 | ' 
0a860                 | ' 
0a860                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0a860                 | ' 
0a860                 | ' function pop() as expr_result
0a860                 | _pop
0a860                 | ' 
0a860                 | ' if stackpointer=0 then
0a860     63 00 00 FF 
0a864     58 E4 05 F1 | 	add	objptr, ##50776
0a868     F2 FA 09 FB | 	rdlong	result1, objptr wz
0a86c     63 00 00 FF 
0a870     58 E4 85 F1 | 	sub	objptr, ##50776
0a874     FF 04 06 A6 |  if_e	mov	_var03, #255
0a878     18 00 06 A6 |  if_e	mov	_var01, #24
0a87c     68 00 90 AD |  if_e	jmp	#LR__0880
0a880     63 00 00 FF 
0a884     58 E4 05 F1 | 	add	objptr, ##50776
0a888     F2 FA 01 FB | 	rdlong	result1, objptr
0a88c     01 FA 85 F1 | 	sub	result1, #1
0a890     F2 FA 61 FC | 	wrlong	result1, objptr
0a894     FD FE 01 F6 | 	mov	result3, result1
0a898     01 FE 65 F0 | 	shl	result3, #1
0a89c     FD FE 01 F1 | 	add	result3, result1
0a8a0     02 FE 65 F0 | 	shl	result3, #2
0a8a4     0C 00 00 FF 
0a8a8     0C E4 85 F1 | 	sub	objptr, ##6156
0a8ac     F2 FE 01 F1 | 	add	result3, objptr
0a8b0     FF 00 02 FB | 	rdlong	_var01, result3
0a8b4     04 FE 05 F1 | 	add	result3, #4
0a8b8     FF FE 01 FB | 	rdlong	result3, result3
0a8bc     FD FC 01 F6 | 	mov	result2, result1
0a8c0     01 FC 65 F0 | 	shl	result2, #1
0a8c4     FD FC 01 F1 | 	add	result2, result1
0a8c8     02 FC 65 F0 | 	shl	result2, #2
0a8cc     F2 FC 01 F1 | 	add	result2, objptr
0a8d0     08 FC 05 F1 | 	add	result2, #8
0a8d4     FE FA 01 FB | 	rdlong	result1, result2
0a8d8     FF 02 02 F6 | 	mov	_var02, result3
0a8dc     FD 04 02 F6 | 	mov	_var03, result1
0a8e0     57 00 00 FF 
0a8e4     4C E4 85 F1 | 	sub	objptr, ##44620
0a8e8                 | LR__0880
0a8e8                 | ' return t1
0a8e8     01 FD 01 F6 | 	mov	result2, _var02
0a8ec     02 FF 01 F6 | 	mov	result3, _var03
0a8f0     00 FB 01 F6 | 	mov	result1, _var01
0a8f4                 | _pop_ret
0a8f4     2D 00 64 FD | 	ret
0a8f8                 | 
0a8f8                 | ' 
0a8f8                 | ' sub push(t1 as expr_result )
0a8f8                 | _push
0a8f8                 | ' 
0a8f8                 | ' 'print "In push: "; t1.result_type
0a8f8                 | ' 'print "In push: "; t1.result.uresult
0a8f8                 | ' 
0a8f8                 | ' if stackpointer<maxstack then 
0a8f8     63 00 00 FF 
0a8fc     58 E4 05 F1 | 	add	objptr, ##50776
0a900     F2 00 02 FB | 	rdlong	_var01, objptr
0a904     63 00 00 FF 
0a908     58 E4 85 F1 | 	sub	objptr, ##50776
0a90c     01 00 00 FF 
0a910     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a914     BC 00 90 3D |  if_ae	jmp	#LR__0890
0a918     09 01 02 FB | 	rdlong	_var01, arg01
0a91c     04 12 06 F1 | 	add	arg01, #4
0a920     09 03 02 FB | 	rdlong	_var02, arg01
0a924     04 12 06 F1 | 	add	arg01, #4
0a928     09 13 02 FB | 	rdlong	arg01, arg01
0a92c     63 00 00 FF 
0a930     58 E4 05 F1 | 	add	objptr, ##50776
0a934     F2 04 02 FB | 	rdlong	_var03, objptr
0a938     02 07 02 F6 | 	mov	_var04, _var03
0a93c     01 06 66 F0 | 	shl	_var04, #1
0a940     02 07 02 F1 | 	add	_var04, _var03
0a944     02 06 66 F0 | 	shl	_var04, #2
0a948     0C 00 00 FF 
0a94c     0C E4 85 F1 | 	sub	objptr, ##6156
0a950     F2 06 02 F1 | 	add	_var04, objptr
0a954     03 01 62 FC | 	wrlong	_var01, _var04
0a958     0C 00 00 FF 
0a95c     0C E4 05 F1 | 	add	objptr, ##6156
0a960     F2 06 02 FB | 	rdlong	_var04, objptr
0a964     03 05 02 F6 | 	mov	_var03, _var04
0a968     01 04 66 F0 | 	shl	_var03, #1
0a96c     03 05 02 F1 | 	add	_var03, _var04
0a970     02 04 66 F0 | 	shl	_var03, #2
0a974     0C 00 00 FF 
0a978     0C E4 85 F1 | 	sub	objptr, ##6156
0a97c     F2 04 02 F1 | 	add	_var03, objptr
0a980     04 04 06 F1 | 	add	_var03, #4
0a984     02 03 62 FC | 	wrlong	_var02, _var03
0a988     0C 00 00 FF 
0a98c     0C E4 05 F1 | 	add	objptr, ##6156
0a990     F2 06 02 FB | 	rdlong	_var04, objptr
0a994     03 05 02 F6 | 	mov	_var03, _var04
0a998     01 04 66 F0 | 	shl	_var03, #1
0a99c     03 05 02 F1 | 	add	_var03, _var04
0a9a0     02 04 66 F0 | 	shl	_var03, #2
0a9a4     0C 00 00 FF 
0a9a8     0C E4 85 F1 | 	sub	objptr, ##6156
0a9ac     F2 04 02 F1 | 	add	_var03, objptr
0a9b0     08 04 06 F1 | 	add	_var03, #8
0a9b4     02 13 62 FC | 	wrlong	arg01, _var03
0a9b8     0C 00 00 FF 
0a9bc     0C E4 05 F1 | 	add	objptr, ##6156
0a9c0     F2 00 02 FB | 	rdlong	_var01, objptr
0a9c4     01 00 06 F1 | 	add	_var01, #1
0a9c8     F2 00 62 FC | 	wrlong	_var01, objptr
0a9cc     63 00 00 FF 
0a9d0     58 E4 85 F1 | 	sub	objptr, ##50776
0a9d4                 | LR__0890
0a9d4                 | _push_ret
0a9d4     2D 00 64 FD | 	ret
0a9d8                 | 
0a9d8                 | ' 
0a9d8                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0a9d8                 | ' 
0a9d8                 | ' sub do_push
0a9d8                 | _do_push
0a9d8                 | ' if stackpointer<maxstack then 
0a9d8     63 00 00 FF 
0a9dc     58 E4 05 F1 | 	add	objptr, ##50776
0a9e0     F2 00 02 FB | 	rdlong	_var01, objptr
0a9e4     63 00 00 FF 
0a9e8     58 E4 85 F1 | 	sub	objptr, ##50776
0a9ec     01 00 00 FF 
0a9f0     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a9f4     F8 00 90 3D |  if_ae	jmp	#LR__0900
0a9f8     6A 00 00 FF 
0a9fc     80 E4 05 F1 | 	add	objptr, ##54400
0aa00     F2 02 02 FB | 	rdlong	_var02, objptr
0aa04     01 05 02 F6 | 	mov	_var03, _var02
0aa08     01 04 66 F0 | 	shl	_var03, #1
0aa0c     01 05 02 F1 | 	add	_var03, _var02
0aa10     02 04 66 F0 | 	shl	_var03, #2
0aa14     03 00 00 FF 
0aa18     04 E4 85 F1 | 	sub	objptr, ##1540
0aa1c     F2 04 02 F1 | 	add	_var03, objptr
0aa20     02 01 02 FB | 	rdlong	_var01, _var03
0aa24     04 04 06 F1 | 	add	_var03, #4
0aa28     02 07 02 FB | 	rdlong	_var04, _var03
0aa2c     01 05 02 F6 | 	mov	_var03, _var02
0aa30     01 04 66 F0 | 	shl	_var03, #1
0aa34     01 05 02 F1 | 	add	_var03, _var02
0aa38     02 04 66 F0 | 	shl	_var03, #2
0aa3c     F2 04 02 F1 | 	add	_var03, objptr
0aa40     08 04 06 F1 | 	add	_var03, #8
0aa44     02 03 02 FB | 	rdlong	_var02, _var03
0aa48     04 00 00 FF 
0aa4c     24 E4 85 F1 | 	sub	objptr, ##2084
0aa50     F2 04 02 FB | 	rdlong	_var03, objptr
0aa54     02 09 02 F6 | 	mov	_var05, _var03
0aa58     01 08 66 F0 | 	shl	_var05, #1
0aa5c     02 09 02 F1 | 	add	_var05, _var03
0aa60     02 08 66 F0 | 	shl	_var05, #2
0aa64     0C 00 00 FF 
0aa68     0C E4 85 F1 | 	sub	objptr, ##6156
0aa6c     F2 08 02 F1 | 	add	_var05, objptr
0aa70     04 01 62 FC | 	wrlong	_var01, _var05
0aa74     0C 00 00 FF 
0aa78     0C E4 05 F1 | 	add	objptr, ##6156
0aa7c     F2 08 02 FB | 	rdlong	_var05, objptr
0aa80     04 05 02 F6 | 	mov	_var03, _var05
0aa84     01 04 66 F0 | 	shl	_var03, #1
0aa88     04 05 02 F1 | 	add	_var03, _var05
0aa8c     02 04 66 F0 | 	shl	_var03, #2
0aa90     0C 00 00 FF 
0aa94     0C E4 85 F1 | 	sub	objptr, ##6156
0aa98     F2 04 02 F1 | 	add	_var03, objptr
0aa9c     04 04 06 F1 | 	add	_var03, #4
0aaa0     02 07 62 FC | 	wrlong	_var04, _var03
0aaa4     0C 00 00 FF 
0aaa8     0C E4 05 F1 | 	add	objptr, ##6156
0aaac     F2 08 02 FB | 	rdlong	_var05, objptr
0aab0     04 07 02 F6 | 	mov	_var04, _var05
0aab4     01 06 66 F0 | 	shl	_var04, #1
0aab8     04 07 02 F1 | 	add	_var04, _var05
0aabc     02 06 66 F0 | 	shl	_var04, #2
0aac0     0C 00 00 FF 
0aac4     0C E4 85 F1 | 	sub	objptr, ##6156
0aac8     F2 06 02 F1 | 	add	_var04, objptr
0aacc     08 06 06 F1 | 	add	_var04, #8
0aad0     03 03 62 FC | 	wrlong	_var02, _var04
0aad4     0C 00 00 FF 
0aad8     0C E4 05 F1 | 	add	objptr, ##6156
0aadc     F2 00 02 FB | 	rdlong	_var01, objptr
0aae0     01 00 06 F1 | 	add	_var01, #1
0aae4     F2 00 62 FC | 	wrlong	_var01, objptr
0aae8     63 00 00 FF 
0aaec     58 E4 85 F1 | 	sub	objptr, ##50776
0aaf0                 | LR__0900
0aaf0                 | _do_push_ret
0aaf0     2D 00 64 FD | 	ret
0aaf4                 | 
0aaf4                 | ' 
0aaf4                 | '   
0aaf4                 | ' sub csave_block(address as ulong)
0aaf4                 | _csave_block
0aaf4     09 01 02 F6 | 	mov	_var01, arg01
0aaf8                 | ' 
0aaf8                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0aaf8                 | ' ' we enter it at the state of playing 1 kHz header tone
0aaf8                 | ' 
0aaf8                 | ' for i=0 to 63 step 2
0aaf8     00 02 06 F6 | 	mov	_var02, #0
0aafc                 | LR__0910
0aafc                 | '   do: loop until lpeek(base+32*7)>32768
0aafc     57 00 00 FF 
0ab00     10 E4 05 F1 | 	add	objptr, ##44560
0ab04     97 0C 48 FB | 	callpa	#(@LR__0912-@LR__0911)>>2,fcache_load_ptr_
0ab08                 | LR__0911
0ab08     F2 12 02 FB | 	rdlong	arg01, objptr
0ab0c     E0 12 06 F1 | 	add	arg01, #224
0ab10     09 FB 01 FB | 	rdlong	result1, arg01
0ab14     40 00 00 FF 
0ab18     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ab1c     E8 FF 9F CD |  if_b	jmp	#LR__0911
0ab20                 | LR__0912
0ab20     00 13 02 F6 | 	mov	arg01, _var01
0ab24     01 05 02 F6 | 	mov	_var03, _var02
0ab28     02 04 66 F0 | 	shl	_var03, #2
0ab2c     02 13 02 F1 | 	add	arg01, _var03
0ab30     09 07 02 FB | 	rdlong	_var04, arg01
0ab34     22 00 00 FF 
0ab38     F4 E5 05 F1 | 	add	objptr, ##17908
0ab3c     F2 06 62 FC | 	wrlong	_var04, objptr
0ab40     7A 00 00 FF 
0ab44     04 E4 85 F1 | 	sub	objptr, ##62468
0ab48                 | '   q=lpeek(address+4*i)
0ab48                 | '      for bit=0 to 31
0ab48     00 08 06 F6 | 	mov	_var05, #0
0ab4c     97 84 48 FB | 	callpa	#(@LR__0917-@LR__0913)>>2,fcache_load_ptr_
0ab50                 | LR__0913
0ab50                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0ab50     7A 00 00 FF 
0ab54     04 E4 05 F1 | 	add	objptr, ##62468
0ab58     F2 06 02 FB | 	rdlong	_var04, objptr
0ab5c     7A 00 00 FF 
0ab60     04 E4 85 F1 | 	sub	objptr, ##62468
0ab64     04 05 C2 F9 | 	decod	_var03, _var05
0ab68     02 07 CA F7 | 	test	_var04, _var03 wz
0ab6c     60 00 90 AD |  if_e	jmp	#LR__0914
0ab70     04 05 02 F6 | 	mov	_var03, _var05
0ab74     02 04 66 F0 | 	shl	_var03, #2
0ab78     75 00 00 FF 
0ab7c     B8 E5 05 F1 | 	add	objptr, ##60344
0ab80     F2 04 02 F1 | 	add	_var03, objptr
0ab84     02 FF 48 FC | 	wrbyte	#127, _var03
0ab88     04 05 02 F6 | 	mov	_var03, _var05
0ab8c     02 04 66 F0 | 	shl	_var03, #2
0ab90     01 04 06 F1 | 	add	_var03, #1
0ab94     F2 04 02 F1 | 	add	_var03, objptr
0ab98     02 01 49 FC | 	wrbyte	#128, _var03
0ab9c     04 05 02 F6 | 	mov	_var03, _var05
0aba0     02 04 66 F0 | 	shl	_var03, #2
0aba4     02 04 06 F1 | 	add	_var03, #2
0aba8     F2 04 02 F1 | 	add	_var03, objptr
0abac     02 FF 48 FC | 	wrbyte	#127, _var03
0abb0     04 05 02 F6 | 	mov	_var03, _var05
0abb4     02 04 66 F0 | 	shl	_var03, #2
0abb8     03 04 06 F1 | 	add	_var03, #3
0abbc     F2 04 02 F1 | 	add	_var03, objptr
0abc0     02 01 49 FC | 	wrbyte	#128, _var03
0abc4     75 00 00 FF 
0abc8     B8 E5 85 F1 | 	sub	objptr, ##60344
0abcc     5C 00 90 FD | 	jmp	#LR__0915
0abd0                 | LR__0914
0abd0     04 05 02 F6 | 	mov	_var03, _var05
0abd4     02 04 66 F0 | 	shl	_var03, #2
0abd8     75 00 00 FF 
0abdc     B8 E5 05 F1 | 	add	objptr, ##60344
0abe0     F2 04 02 F1 | 	add	_var03, objptr
0abe4     02 01 49 FC | 	wrbyte	#128, _var03
0abe8     04 05 02 F6 | 	mov	_var03, _var05
0abec     02 04 66 F0 | 	shl	_var03, #2
0abf0     01 04 06 F1 | 	add	_var03, #1
0abf4     F2 04 02 F1 | 	add	_var03, objptr
0abf8     02 01 49 FC | 	wrbyte	#128, _var03
0abfc     04 05 02 F6 | 	mov	_var03, _var05
0ac00     02 04 66 F0 | 	shl	_var03, #2
0ac04     02 04 06 F1 | 	add	_var03, #2
0ac08     F2 04 02 F1 | 	add	_var03, objptr
0ac0c     02 FF 48 FC | 	wrbyte	#127, _var03
0ac10     04 05 02 F6 | 	mov	_var03, _var05
0ac14     02 04 66 F0 | 	shl	_var03, #2
0ac18     03 04 06 F1 | 	add	_var03, #3
0ac1c     F2 04 02 F1 | 	add	_var03, objptr
0ac20     02 FF 48 FC | 	wrbyte	#127, _var03
0ac24     75 00 00 FF 
0ac28     B8 E5 85 F1 | 	sub	objptr, ##60344
0ac2c                 | LR__0915
0ac2c     01 08 06 F1 | 	add	_var05, #1
0ac30     20 08 56 F2 | 	cmps	_var05, #32 wc
0ac34     18 FF 9F CD |  if_b	jmp	#LR__0913
0ac38                 | '   do: loop until lpeek(base+32*7)<32768
0ac38     57 00 00 FF 
0ac3c     10 E4 05 F1 | 	add	objptr, ##44560
0ac40                 | LR__0916
0ac40     F2 12 02 FB | 	rdlong	arg01, objptr
0ac44     E0 12 06 F1 | 	add	arg01, #224
0ac48     09 FB 01 FB | 	rdlong	result1, arg01
0ac4c     40 00 00 FF 
0ac50     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0ac54     E8 FF 9F 3D |  if_ae	jmp	#LR__0916
0ac58                 | LR__0917
0ac58     00 13 02 F6 | 	mov	arg01, _var01
0ac5c     04 12 06 F1 | 	add	arg01, #4
0ac60     01 05 02 F6 | 	mov	_var03, _var02
0ac64     02 04 66 F0 | 	shl	_var03, #2
0ac68     02 13 02 F1 | 	add	arg01, _var03
0ac6c     09 07 02 FB | 	rdlong	_var04, arg01
0ac70     22 00 00 FF 
0ac74     F4 E5 05 F1 | 	add	objptr, ##17908
0ac78     F2 06 62 FC | 	wrlong	_var04, objptr
0ac7c     7A 00 00 FF 
0ac80     04 E4 85 F1 | 	sub	objptr, ##62468
0ac84                 | '   q=lpeek(address+4+4*i)
0ac84                 | '      for bit=0 to 31
0ac84     00 08 06 F6 | 	mov	_var05, #0
0ac88     97 94 48 FB | 	callpa	#(@LR__0921-@LR__0918)>>2,fcache_load_ptr_
0ac8c                 | LR__0918
0ac8c                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0ac8c     7A 00 00 FF 
0ac90     04 E4 05 F1 | 	add	objptr, ##62468
0ac94     F2 06 02 FB | 	rdlong	_var04, objptr
0ac98     7A 00 00 FF 
0ac9c     04 E4 85 F1 | 	sub	objptr, ##62468
0aca0     04 05 C2 F9 | 	decod	_var03, _var05
0aca4     02 07 CA F7 | 	test	_var04, _var03 wz
0aca8     80 00 90 AD |  if_e	jmp	#LR__0919
0acac     04 0B 02 F6 | 	mov	_var06, _var05
0acb0     02 0A 66 F0 | 	shl	_var06, #2
0acb4     80 04 06 F6 | 	mov	_var03, #128
0acb8     05 05 02 F1 | 	add	_var03, _var06
0acbc     75 00 00 FF 
0acc0     B8 E5 05 F1 | 	add	objptr, ##60344
0acc4     F2 04 02 F1 | 	add	_var03, objptr
0acc8     02 FF 48 FC | 	wrbyte	#127, _var03
0accc     04 0B 02 F6 | 	mov	_var06, _var05
0acd0     02 0A 66 F0 | 	shl	_var06, #2
0acd4     80 04 06 F6 | 	mov	_var03, #128
0acd8     05 05 02 F1 | 	add	_var03, _var06
0acdc     01 04 06 F1 | 	add	_var03, #1
0ace0     F2 04 02 F1 | 	add	_var03, objptr
0ace4     02 01 49 FC | 	wrbyte	#128, _var03
0ace8     04 0B 02 F6 | 	mov	_var06, _var05
0acec     02 0A 66 F0 | 	shl	_var06, #2
0acf0     80 04 06 F6 | 	mov	_var03, #128
0acf4     05 05 02 F1 | 	add	_var03, _var06
0acf8     02 04 06 F1 | 	add	_var03, #2
0acfc     F2 04 02 F1 | 	add	_var03, objptr
0ad00     02 FF 48 FC | 	wrbyte	#127, _var03
0ad04     04 0B 02 F6 | 	mov	_var06, _var05
0ad08     02 0A 66 F0 | 	shl	_var06, #2
0ad0c     80 04 06 F6 | 	mov	_var03, #128
0ad10     05 05 02 F1 | 	add	_var03, _var06
0ad14     03 04 06 F1 | 	add	_var03, #3
0ad18     F2 04 02 F1 | 	add	_var03, objptr
0ad1c     02 01 49 FC | 	wrbyte	#128, _var03
0ad20     75 00 00 FF 
0ad24     B8 E5 85 F1 | 	sub	objptr, ##60344
0ad28     7C 00 90 FD | 	jmp	#LR__0920
0ad2c                 | LR__0919
0ad2c     04 0B 02 F6 | 	mov	_var06, _var05
0ad30     02 0A 66 F0 | 	shl	_var06, #2
0ad34     80 04 06 F6 | 	mov	_var03, #128
0ad38     05 05 02 F1 | 	add	_var03, _var06
0ad3c     75 00 00 FF 
0ad40     B8 E5 05 F1 | 	add	objptr, ##60344
0ad44     F2 04 02 F1 | 	add	_var03, objptr
0ad48     02 01 49 FC | 	wrbyte	#128, _var03
0ad4c     04 0B 02 F6 | 	mov	_var06, _var05
0ad50     02 0A 66 F0 | 	shl	_var06, #2
0ad54     80 04 06 F6 | 	mov	_var03, #128
0ad58     05 05 02 F1 | 	add	_var03, _var06
0ad5c     01 04 06 F1 | 	add	_var03, #1
0ad60     F2 04 02 F1 | 	add	_var03, objptr
0ad64     02 01 49 FC | 	wrbyte	#128, _var03
0ad68     04 0B 02 F6 | 	mov	_var06, _var05
0ad6c     02 0A 66 F0 | 	shl	_var06, #2
0ad70     80 04 06 F6 | 	mov	_var03, #128
0ad74     05 05 02 F1 | 	add	_var03, _var06
0ad78     02 04 06 F1 | 	add	_var03, #2
0ad7c     F2 04 02 F1 | 	add	_var03, objptr
0ad80     02 FF 48 FC | 	wrbyte	#127, _var03
0ad84     04 0B 02 F6 | 	mov	_var06, _var05
0ad88     02 0A 66 F0 | 	shl	_var06, #2
0ad8c     80 04 06 F6 | 	mov	_var03, #128
0ad90     05 05 02 F1 | 	add	_var03, _var06
0ad94     03 04 06 F1 | 	add	_var03, #3
0ad98     F2 04 02 F1 | 	add	_var03, objptr
0ad9c     02 FF 48 FC | 	wrbyte	#127, _var03
0ada0     75 00 00 FF 
0ada4     B8 E5 85 F1 | 	sub	objptr, ##60344
0ada8                 | LR__0920
0ada8     01 08 06 F1 | 	add	_var05, #1
0adac     20 08 56 F2 | 	cmps	_var05, #32 wc
0adb0     D8 FE 9F CD |  if_b	jmp	#LR__0918
0adb4                 | LR__0921
0adb4     02 02 06 F1 | 	add	_var02, #2
0adb8     40 02 56 F2 | 	cmps	_var02, #64 wc
0adbc     3C FD 9F CD |  if_b	jmp	#LR__0910
0adc0                 | ' do: loop until lpeek(base+32*7)>32768
0adc0     57 00 00 FF 
0adc4     10 E4 05 F1 | 	add	objptr, ##44560
0adc8     97 84 48 FB | 	callpa	#(@LR__0930-@LR__0922)>>2,fcache_load_ptr_
0adcc                 | LR__0922
0adcc     F2 12 02 FB | 	rdlong	arg01, objptr
0add0     E0 12 06 F1 | 	add	arg01, #224
0add4     09 FB 01 FB | 	rdlong	result1, arg01
0add8     40 00 00 FF 
0addc     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ade0     E8 FF 9F CD |  if_b	jmp	#LR__0922
0ade4     57 00 00 FF 
0ade8     10 E4 85 F1 | 	sub	objptr, ##44560
0adec                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0adec     00 02 06 F6 | 	mov	_var02, #0
0adf0                 | LR__0923
0adf0     01 07 52 F6 | 	abs	_var04, _var02 wc
0adf4     07 06 06 F5 | 	and	_var04, #7
0adf8     03 07 82 F6 | 	negc	_var04, _var04
0adfc     04 06 56 F2 | 	cmps	_var04, #4 wc
0ae00     20 00 90 3D |  if_ae	jmp	#LR__0924
0ae04     01 0B 02 F6 | 	mov	_var06, _var02
0ae08     75 00 00 FF 
0ae0c     B8 E5 05 F1 | 	add	objptr, ##60344
0ae10     F2 0A 02 F1 | 	add	_var06, objptr
0ae14     05 FF 48 FC | 	wrbyte	#127, _var06
0ae18     75 00 00 FF 
0ae1c     B8 E5 85 F1 | 	sub	objptr, ##60344
0ae20     1C 00 90 FD | 	jmp	#LR__0925
0ae24                 | LR__0924
0ae24     01 0B 02 F6 | 	mov	_var06, _var02
0ae28     75 00 00 FF 
0ae2c     B8 E5 05 F1 | 	add	objptr, ##60344
0ae30     F2 0A 02 F1 | 	add	_var06, objptr
0ae34     05 01 49 FC | 	wrbyte	#128, _var06
0ae38     75 00 00 FF 
0ae3c     B8 E5 85 F1 | 	sub	objptr, ##60344
0ae40                 | LR__0925
0ae40     01 02 06 F1 | 	add	_var02, #1
0ae44     80 02 56 F2 | 	cmps	_var02, #128 wc
0ae48     A4 FF 9F CD |  if_b	jmp	#LR__0923
0ae4c                 | ' 
0ae4c                 | ' do: loop until lpeek(base+32*7)<32768
0ae4c     57 00 00 FF 
0ae50     10 E4 05 F1 | 	add	objptr, ##44560
0ae54                 | LR__0926
0ae54     F2 12 02 FB | 	rdlong	arg01, objptr
0ae58     E0 12 06 F1 | 	add	arg01, #224
0ae5c     09 FB 01 FB | 	rdlong	result1, arg01
0ae60     40 00 00 FF 
0ae64     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0ae68     E8 FF 9F 3D |  if_ae	jmp	#LR__0926
0ae6c     57 00 00 FF 
0ae70     10 E4 85 F1 | 	sub	objptr, ##44560
0ae74                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0ae74     80 02 06 F6 | 	mov	_var02, #128
0ae78                 | LR__0927
0ae78     01 07 52 F6 | 	abs	_var04, _var02 wc
0ae7c     07 06 06 F5 | 	and	_var04, #7
0ae80     03 07 82 F6 | 	negc	_var04, _var04
0ae84     04 06 56 F2 | 	cmps	_var04, #4 wc
0ae88     20 00 90 3D |  if_ae	jmp	#LR__0928
0ae8c     01 0B 02 F6 | 	mov	_var06, _var02
0ae90     75 00 00 FF 
0ae94     B8 E5 05 F1 | 	add	objptr, ##60344
0ae98     F2 0A 02 F1 | 	add	_var06, objptr
0ae9c     05 FF 48 FC | 	wrbyte	#127, _var06
0aea0     75 00 00 FF 
0aea4     B8 E5 85 F1 | 	sub	objptr, ##60344
0aea8     1C 00 90 FD | 	jmp	#LR__0929
0aeac                 | LR__0928
0aeac     01 0B 02 F6 | 	mov	_var06, _var02
0aeb0     75 00 00 FF 
0aeb4     B8 E5 05 F1 | 	add	objptr, ##60344
0aeb8     F2 0A 02 F1 | 	add	_var06, objptr
0aebc     05 01 49 FC | 	wrbyte	#128, _var06
0aec0     75 00 00 FF 
0aec4     B8 E5 85 F1 | 	sub	objptr, ##60344
0aec8                 | LR__0929
0aec8     01 02 06 F1 | 	add	_var02, #1
0aecc     00 03 16 F2 | 	cmp	_var02, #256 wc
0aed0     A4 FF 9F CD |  if_b	jmp	#LR__0927
0aed4                 | LR__0930
0aed4                 | _csave_block_ret
0aed4     2D 00 64 FD | 	ret
0aed8                 | 
0aed8                 | ' 
0aed8                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0aed8                 | _csave_addtoblock
0aed8     04 4A 05 F6 | 	mov	COUNT_, #4
0aedc     A8 00 A0 FD | 	call	#pushregs_
0aee0     09 1F 02 F6 | 	mov	local01, arg01
0aee4                 | ' 
0aee4                 | ' 
0aee4                 | ' if force=0 then
0aee4     07 14 4E F7 | 	zerox	arg02, #7 wz
0aee8     78 00 90 5D |  if_ne	jmp	#LR__0940
0aeec     78 00 00 FF 
0aef0     B8 E4 05 F1 | 	add	objptr, ##61624
0aef4     F2 14 02 FB | 	rdlong	arg02, objptr
0aef8     02 00 00 FF 
0aefc     00 E4 85 F1 | 	sub	objptr, ##1024
0af00     F2 14 02 F1 | 	add	arg02, objptr
0af04     0A 1F 42 FC | 	wrbyte	local01, arg02
0af08     02 00 00 FF 
0af0c     00 E4 05 F1 | 	add	objptr, ##1024
0af10     F2 1E 02 FB | 	rdlong	local01, objptr
0af14     01 1E 06 F1 | 	add	local01, #1
0af18     F2 1E 62 FC | 	wrlong	local01, objptr
0af1c                 | '   block(blockptr)=d
0af1c                 | '   blockptr+=1
0af1c                 | '   if blockptr>=255 then
0af1c     78 00 00 FF 
0af20     B8 E4 85 F1 | 	sub	objptr, ##61624
0af24     FF 1E 16 F2 | 	cmp	local01, #255 wc
0af28     E4 00 90 CD |  if_b	jmp	#LR__0944
0af2c     76 00 00 FF 
0af30     B8 E4 05 F1 | 	add	objptr, ##60600
0af34     F2 12 02 F6 | 	mov	arg01, objptr
0af38     76 00 00 FF 
0af3c     B8 E4 85 F1 | 	sub	objptr, ##60600
0af40     B0 FB BF FD | 	call	#_csave_block
0af44     78 00 00 FF 
0af48     B8 E4 05 F1 | 	add	objptr, ##61624
0af4c     F2 00 68 FC | 	wrlong	#0, objptr
0af50     78 00 00 FF 
0af54     B8 E4 85 F1 | 	sub	objptr, ##61624
0af58     2C 13 06 F6 | 	mov	arg01, #300
0af5c     CC 3E B1 FD | 	call	#__system___waitms
0af60     AC 00 90 FD | 	jmp	#LR__0944
0af64                 | LR__0940
0af64     78 00 00 FF 
0af68     B8 E4 05 F1 | 	add	objptr, ##61624
0af6c     F2 20 02 FB | 	rdlong	local02, objptr
0af70     02 00 00 FF 
0af74     00 E4 85 F1 | 	sub	objptr, ##1024
0af78     F2 20 02 F1 | 	add	local02, objptr
0af7c     10 1F 42 FC | 	wrbyte	local01, local02
0af80                 | '   block(blockptr)=d
0af80                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0af80     02 00 00 FF 
0af84     00 E4 05 F1 | 	add	objptr, ##1024
0af88     F2 22 02 FB | 	rdlong	local03, objptr
0af8c     78 00 00 FF 
0af90     B8 E4 85 F1 | 	sub	objptr, ##61624
0af94     FF 22 16 F2 | 	cmp	local03, #255 wc
0af98     40 00 90 3D |  if_ae	jmp	#LR__0943
0af9c     78 00 00 FF 
0afa0     B8 E4 05 F1 | 	add	objptr, ##61624
0afa4     F2 24 02 FB | 	rdlong	local04, objptr
0afa8     78 00 00 FF 
0afac     B8 E4 85 F1 | 	sub	objptr, ##61624
0afb0                 | LR__0941
0afb0     00 25 56 F2 | 	cmps	local04, #256 wc
0afb4     24 00 90 3D |  if_ae	jmp	#LR__0942
0afb8     12 21 02 F6 | 	mov	local02, local04
0afbc     76 00 00 FF 
0afc0     B8 E4 05 F1 | 	add	objptr, ##60600
0afc4     F2 20 02 F1 | 	add	local02, objptr
0afc8     10 01 48 FC | 	wrbyte	#0, local02
0afcc     01 24 06 F1 | 	add	local04, #1
0afd0     76 00 00 FF 
0afd4     B8 E4 85 F1 | 	sub	objptr, ##60600
0afd8     D4 FF 9F FD | 	jmp	#LR__0941
0afdc                 | LR__0942
0afdc                 | LR__0943
0afdc     76 00 00 FF 
0afe0     B8 E4 05 F1 | 	add	objptr, ##60600
0afe4     F2 12 02 F6 | 	mov	arg01, objptr
0afe8     76 00 00 FF 
0afec     B8 E4 85 F1 | 	sub	objptr, ##60600
0aff0     00 FB BF FD | 	call	#_csave_block
0aff4     78 00 00 FF 
0aff8     B8 E4 05 F1 | 	add	objptr, ##61624
0affc     F2 00 68 FC | 	wrlong	#0, objptr
0b000     78 00 00 FF 
0b004     B8 E4 85 F1 | 	sub	objptr, ##61624
0b008     2C 13 06 F6 | 	mov	arg01, #300
0b00c     1C 3E B1 FD | 	call	#__system___waitms
0b010                 | LR__0944
0b010     A7 F0 03 F6 | 	mov	ptra, fp
0b014     B2 00 A0 FD | 	call	#popregs_
0b018                 | _csave_addtoblock_ret
0b018     2D 00 64 FD | 	ret
0b01c                 | 
0b01c                 | ' 
0b01c                 | ' sub test_csave
0b01c                 | _test_csave
0b01c     04 4A 05 F6 | 	mov	COUNT_, #4
0b020     A8 00 A0 FD | 	call	#pushregs_
0b024     C0 F0 07 F1 | 	add	ptra, #192
0b028                 | ' 'dim fileheader,savestart, saveptr as ulong
0b028                 | ' 
0b028                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0b028     6A 00 00 FF 
0b02c     84 E4 05 F1 | 	add	objptr, ##54404
0b030     F2 12 02 FB | 	rdlong	arg01, objptr
0b034     6A 00 00 FF 
0b038     84 E4 85 F1 | 	sub	objptr, ##54404
0b03c     2C F9 B0 FD | 	call	#_pslpeek
0b040     FF FF 7F FF 
0b044     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0b048     0C 00 90 5D |  if_ne	jmp	#LR__0950
0b04c     1B 12 06 F6 | 	mov	arg01, #27
0b050     84 F6 B0 FD | 	call	#_printerror
0b054     1C 03 90 FD | 	jmp	#LR__0964
0b058                 | LR__0950
0b058     04 F8 BF FD | 	call	#_pop
0b05c     90 4E 05 F1 | 	add	fp, #144
0b060     A7 FA 61 FC | 	wrlong	result1, fp
0b064     04 4E 05 F1 | 	add	fp, #4
0b068     A7 FC 61 FC | 	wrlong	result2, fp
0b06c     04 4E 05 F1 | 	add	fp, #4
0b070     A7 FE 61 FC | 	wrlong	result3, fp
0b074                 | ' t1=pop()
0b074                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0b074     98 4E 85 F1 | 	sub	fp, #152
0b078     1F FE 0D F2 | 	cmp	result3, #31 wz
0b07c     24 00 90 AD |  if_e	jmp	#LR__0951
0b080     79 00 00 FF 
0b084     B4 E5 05 F1 | 	add	objptr, ##62388
0b088     F2 1C 02 FB | 	rdlong	arg06, objptr
0b08c     79 00 00 FF 
0b090     B4 E5 85 F1 | 	sub	objptr, ##62388
0b094     8C 4E 05 F1 | 	add	fp, #140
0b098     A7 1C 62 FC | 	wrlong	arg06, fp
0b09c     8C 4E 85 F1 | 	sub	fp, #140
0b0a0     14 00 90 FD | 	jmp	#LR__0952
0b0a4                 | LR__0951
0b0a4     90 4E 05 F1 | 	add	fp, #144
0b0a8     A7 1C 02 FB | 	rdlong	arg06, fp
0b0ac     04 4E 85 F1 | 	sub	fp, #4
0b0b0     A7 1C 62 FC | 	wrlong	arg06, fp
0b0b4     8C 4E 85 F1 | 	sub	fp, #140
0b0b8                 | LR__0952
0b0b8                 | ' 
0b0b8                 | ' ' prepare 1 kHz header wave
0b0b8                 | ' 
0b0b8                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b0b8     A7 00 68 FC | 	wrlong	#0, fp
0b0bc     97 34 48 FB | 	callpa	#(@LR__0956-@LR__0953)>>2,fcache_load_ptr_
0b0c0                 | LR__0953
0b0c0     A7 1C 02 FB | 	rdlong	arg06, fp
0b0c4     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0b0c8     07 1A 06 F5 | 	and	arg05, #7
0b0cc     0D 1B 82 F6 | 	negc	arg05, arg05
0b0d0     04 1A 56 F2 | 	cmps	arg05, #4 wc
0b0d4     20 00 90 3D |  if_ae	jmp	#LR__0954
0b0d8     A7 1A 02 FB | 	rdlong	arg05, fp
0b0dc     75 00 00 FF 
0b0e0     B8 E5 05 F1 | 	add	objptr, ##60344
0b0e4     F2 1A 02 F1 | 	add	arg05, objptr
0b0e8     0D FF 48 FC | 	wrbyte	#127, arg05
0b0ec     75 00 00 FF 
0b0f0     B8 E5 85 F1 | 	sub	objptr, ##60344
0b0f4     1C 00 90 FD | 	jmp	#LR__0955
0b0f8                 | LR__0954
0b0f8     A7 1A 02 FB | 	rdlong	arg05, fp
0b0fc     75 00 00 FF 
0b100     B8 E5 05 F1 | 	add	objptr, ##60344
0b104     F2 1A 02 F1 | 	add	arg05, objptr
0b108     0D 01 49 FC | 	wrbyte	#128, arg05
0b10c     75 00 00 FF 
0b110     B8 E5 85 F1 | 	sub	objptr, ##60344
0b114                 | LR__0955
0b114     A7 1A 02 FB | 	rdlong	arg05, fp
0b118     01 1A 06 F1 | 	add	arg05, #1
0b11c     A7 1A 62 FC | 	wrlong	arg05, fp
0b120     00 1B 56 F2 | 	cmps	arg05, #256 wc
0b124     98 FF 9F CD |  if_b	jmp	#LR__0953
0b128                 | LR__0956
0b128     75 00 00 FF 
0b12c     B8 E5 05 F1 | 	add	objptr, ##60344
0b130     F2 14 02 F6 | 	mov	arg02, objptr
0b134     07 12 06 F6 | 	mov	arg01, #7
0b138     0F 00 00 FF 
0b13c     40 17 06 F6 | 	mov	arg03, ##8000
0b140     0E 18 C6 F9 | 	decod	arg04, #14
0b144     00 1B 06 F6 | 	mov	arg05, #256
0b148     00 1C 06 F6 | 	mov	arg06, #0
0b14c     6A 00 00 FF 
0b150     EC E4 85 F1 | 	sub	objptr, ##54508
0b154     2C 36 B1 FD | 	call	#_audio096_spin2_play8
0b158     0B 00 00 FF 
0b15c     CC E4 85 F1 | 	sub	objptr, ##5836
0b160     05 00 00 FF 
0b164     B8 13 06 F6 | 	mov	arg01, ##3000
0b168     C0 3C B1 FD | 	call	#__system___waitms
0b16c     78 00 00 FF 
0b170     B8 E4 05 F1 | 	add	objptr, ##61624
0b174     F2 00 68 FC | 	wrlong	#0, objptr
0b178     78 00 00 FF 
0b17c     B8 E4 85 F1 | 	sub	objptr, ##61624
0b180     72 12 06 F6 | 	mov	arg01, #114
0b184     00 14 06 F6 | 	mov	arg02, #0
0b188     4C FD BF FD | 	call	#_csave_addtoblock
0b18c     62 12 06 F6 | 	mov	arg01, #98
0b190     00 14 06 F6 | 	mov	arg02, #0
0b194     40 FD BF FD | 	call	#_csave_addtoblock
0b198     61 12 06 F6 | 	mov	arg01, #97
0b19c     00 14 06 F6 | 	mov	arg02, #0
0b1a0     34 FD BF FD | 	call	#_csave_addtoblock
0b1a4     0D 12 06 F6 | 	mov	arg01, #13
0b1a8     00 14 06 F6 | 	mov	arg02, #0
0b1ac     28 FD BF FD | 	call	#_csave_addtoblock
0b1b0                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0b1b0                 | ' waitms 3000 
0b1b0                 | ' 
0b1b0                 | ' blockptr=0
0b1b0                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0b1b0                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0b1b0     A7 02 68 FC | 	wrlong	#1, fp
0b1b4     8C 4E 05 F1 | 	add	fp, #140
0b1b8     A7 12 02 FB | 	rdlong	arg01, fp
0b1bc     8C 4E 85 F1 | 	sub	fp, #140
0b1c0     09 1F 02 F6 | 	mov	local01, arg01
0b1c4     97 06 48 FB | 	callpa	#(@LR__0958-@LR__0957)>>2,fcache_load_ptr_
0b1c8                 | LR__0957
0b1c8     0F FB C9 FA | 	rdbyte	result1, local01 wz
0b1cc     01 1E 06 51 |  if_ne	add	local01, #1
0b1d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0957
0b1d4                 | LR__0958
0b1d4     09 1F 82 F1 | 	sub	local01, arg01
0b1d8     0F 21 02 F6 | 	mov	local02, local01
0b1dc     01 20 06 F1 | 	add	local02, #1
0b1e0                 | LR__0959
0b1e0     A7 1A 02 FB | 	rdlong	arg05, fp
0b1e4     10 1B 52 F2 | 	cmps	arg05, local02 wc
0b1e8     34 00 90 3D |  if_ae	jmp	#LR__0960
0b1ec     8C 4E 05 F1 | 	add	fp, #140
0b1f0     A7 12 02 FB | 	rdlong	arg01, fp
0b1f4     8C 4E 85 F1 | 	sub	fp, #140
0b1f8     A7 14 02 FB | 	rdlong	arg02, fp
0b1fc     01 16 06 F6 | 	mov	arg03, #1
0b200     94 5A B1 FD | 	call	#__system__Mid_S
0b204     FD 12 C2 FA | 	rdbyte	arg01, result1
0b208     00 14 06 F6 | 	mov	arg02, #0
0b20c     C8 FC BF FD | 	call	#_csave_addtoblock
0b210     A7 1A 02 FB | 	rdlong	arg05, fp
0b214     01 1A 06 F1 | 	add	arg05, #1
0b218     A7 1A 62 FC | 	wrlong	arg05, fp
0b21c     C0 FF 9F FD | 	jmp	#LR__0959
0b220                 | LR__0960
0b220     00 12 06 F6 | 	mov	arg01, #0
0b224     00 14 06 F6 | 	mov	arg02, #0
0b228     AC FC BF FD | 	call	#_csave_addtoblock
0b22c     72 12 06 F6 | 	mov	arg01, #114
0b230     00 14 06 F6 | 	mov	arg02, #0
0b234     A0 FC BF FD | 	call	#_csave_addtoblock
0b238     62 12 06 F6 | 	mov	arg01, #98
0b23c     00 14 06 F6 | 	mov	arg02, #0
0b240     94 FC BF FD | 	call	#_csave_addtoblock
0b244     73 12 06 F6 | 	mov	arg01, #115
0b248     00 14 06 F6 | 	mov	arg02, #0
0b24c     88 FC BF FD | 	call	#_csave_addtoblock
0b250     0D 12 06 F6 | 	mov	arg01, #13
0b254     00 14 06 F6 | 	mov	arg02, #0
0b258     7C FC BF FD | 	call	#_csave_addtoblock
0b25c     6A 00 00 FF 
0b260     84 E4 05 F1 | 	add	objptr, ##54404
0b264     F2 22 02 FB | 	rdlong	local03, objptr
0b268     6A 00 00 FF 
0b26c     84 E4 85 F1 | 	sub	objptr, ##54404
0b270     9C 4E 05 F1 | 	add	fp, #156
0b274     A7 22 62 FC | 	wrlong	local03, fp
0b278     9C 4E 85 F1 | 	sub	fp, #156
0b27c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0b27c                 | ' 
0b27c                 | ' saveptr=programstart
0b27c                 | ' do
0b27c                 | LR__0961
0b27c     A0 4E 05 F1 | 	add	fp, #160
0b280     A7 12 02 F6 | 	mov	arg01, fp
0b284     04 4E 85 F1 | 	sub	fp, #4
0b288     A7 14 02 FB | 	rdlong	arg02, fp
0b28c     9C 4E 85 F1 | 	sub	fp, #156
0b290     18 16 06 F6 | 	mov	arg03, #24
0b294     0B 00 00 FF 
0b298     CC E4 05 F1 | 	add	objptr, ##5836
0b29c     74 2C B1 FD | 	call	#_psram_spin2_read1
0b2a0     0C 4E 05 F1 | 	add	fp, #12
0b2a4     A7 12 02 F6 | 	mov	arg01, fp
0b2a8     9C 4E 05 F1 | 	add	fp, #156
0b2ac     A7 14 02 FB | 	rdlong	arg02, fp
0b2b0     04 4E 05 F1 | 	add	fp, #4
0b2b4     A7 16 02 FB | 	rdlong	arg03, fp
0b2b8     AC 4E 85 F1 | 	sub	fp, #172
0b2bc     54 2C B1 FD | 	call	#_psram_spin2_read1
0b2c0     0B 00 00 FF 
0b2c4     CC E4 85 F1 | 	sub	objptr, ##5836
0b2c8     AC 4E 05 F1 | 	add	fp, #172
0b2cc     A7 12 02 FB | 	rdlong	arg01, fp
0b2d0     AC 4E 85 F1 | 	sub	fp, #172
0b2d4     00 14 06 F6 | 	mov	arg02, #0
0b2d8     FC FB BF FD | 	call	#_csave_addtoblock
0b2dc                 | '   psram.read1(varptr(header(0)),saveptr,24)
0b2dc                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0b2dc                 | '   csave_addtoblock(header(3),0) ' that's always <255
0b2dc                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0b2dc     A7 00 68 FC | 	wrlong	#0, fp
0b2e0     AC 4E 05 F1 | 	add	fp, #172
0b2e4     A7 24 02 FB | 	rdlong	local04, fp
0b2e8     AC 4E 85 F1 | 	sub	fp, #172
0b2ec                 | LR__0962
0b2ec     A7 22 02 FB | 	rdlong	local03, fp
0b2f0     12 23 52 F2 | 	cmps	local03, local04 wc
0b2f4     2C 00 90 3D |  if_ae	jmp	#LR__0963
0b2f8     A7 22 02 FB | 	rdlong	local03, fp
0b2fc     0C 4E 05 F1 | 	add	fp, #12
0b300     A7 22 02 F1 | 	add	local03, fp
0b304     11 13 C2 FA | 	rdbyte	arg01, local03
0b308     00 14 06 F6 | 	mov	arg02, #0
0b30c     0C 4E 85 F1 | 	sub	fp, #12
0b310     C4 FB BF FD | 	call	#_csave_addtoblock
0b314     A7 22 02 FB | 	rdlong	local03, fp
0b318     01 22 06 F1 | 	add	local03, #1
0b31c     A7 22 62 FC | 	wrlong	local03, fp
0b320     C8 FF 9F FD | 	jmp	#LR__0962
0b324                 | LR__0963
0b324     B4 4E 05 F1 | 	add	fp, #180
0b328     A7 22 02 FB | 	rdlong	local03, fp
0b32c     18 4E 85 F1 | 	sub	fp, #24
0b330     A7 22 62 FC | 	wrlong	local03, fp
0b334     18 4E 05 F1 | 	add	fp, #24
0b338     A7 22 02 FB | 	rdlong	local03, fp
0b33c     B4 4E 85 F1 | 	sub	fp, #180
0b340     FF FF 3F FF 
0b344     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0b348     30 FF 9F 5D |  if_ne	jmp	#LR__0961
0b34c     00 12 06 F6 | 	mov	arg01, #0
0b350     01 14 06 F6 | 	mov	arg02, #1
0b354     80 FB BF FD | 	call	#_csave_addtoblock
0b358     57 00 00 FF 
0b35c     10 E4 05 F1 | 	add	objptr, ##44560
0b360     F2 12 02 FB | 	rdlong	arg01, objptr
0b364     57 00 00 FF 
0b368     10 E4 85 F1 | 	sub	objptr, ##44560
0b36c     F4 12 06 F1 | 	add	arg01, #244
0b370     09 01 58 FC | 	wrword	#0, arg01
0b374                 | LR__0964
0b374     A7 F0 03 F6 | 	mov	ptra, fp
0b378     B2 00 A0 FD | 	call	#popregs_
0b37c                 | _test_csave_ret
0b37c     2D 00 64 FD | 	ret
0b380                 | 
0b380                 | ' 
0b380                 | ' ' ----------------- Save the program
0b380                 | ' 
0b380                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0b380                 | _do_save
0b380     04 4A 05 F6 | 	mov	COUNT_, #4
0b384     A8 00 A0 FD | 	call	#pushregs_
0b388     01 00 00 FF 
0b38c     C0 F0 07 F1 | 	add	ptra, ##704
0b390     6A 00 00 FF 
0b394     80 E4 05 F1 | 	add	objptr, ##54400
0b398     F2 1E 02 FB | 	rdlong	local01, objptr
0b39c     0F 21 02 F6 | 	mov	local02, local01
0b3a0     01 20 66 F0 | 	shl	local02, #1
0b3a4     0F 21 02 F1 | 	add	local02, local01
0b3a8     02 20 66 F0 | 	shl	local02, #2
0b3ac     03 00 00 FF 
0b3b0     04 E4 85 F1 | 	sub	objptr, ##1540
0b3b4     F2 20 02 F1 | 	add	local02, objptr
0b3b8     10 23 02 FB | 	rdlong	local03, local02
0b3bc     01 00 00 FF 
0b3c0     10 4E 05 F1 | 	add	fp, ##528
0b3c4     A7 22 62 FC | 	wrlong	local03, fp
0b3c8                 | ' 
0b3c8                 | ' numpar=compiledline(lineptr_e).result.uresult
0b3c8                 | ' 
0b3c8                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0b3c8     01 00 00 FF 
0b3cc     10 4E 85 F1 | 	sub	fp, ##528
0b3d0     01 22 56 F2 | 	cmps	local03, #1 wc
0b3d4     67 00 00 FF 
0b3d8     7C E4 85 F1 | 	sub	objptr, ##52860
0b3dc     20 00 90 CD |  if_b	jmp	#LR__0970
0b3e0     7C F4 BF FD | 	call	#_pop
0b3e4     A7 FA 61 FC | 	wrlong	result1, fp
0b3e8     04 4E 05 F1 | 	add	fp, #4
0b3ec     A7 FC 61 FC | 	wrlong	result2, fp
0b3f0     04 4E 05 F1 | 	add	fp, #4
0b3f4     A7 FE 61 FC | 	wrlong	result3, fp
0b3f8     08 4E 85 F1 | 	sub	fp, #8
0b3fc     24 00 90 FD | 	jmp	#LR__0971
0b400                 | LR__0970
0b400     79 00 00 FF 
0b404     B4 E5 05 F1 | 	add	objptr, ##62388
0b408     F2 22 02 FB | 	rdlong	local03, objptr
0b40c     79 00 00 FF 
0b410     B4 E5 85 F1 | 	sub	objptr, ##62388
0b414     A7 22 62 FC | 	wrlong	local03, fp
0b418     08 4E 05 F1 | 	add	fp, #8
0b41c     A7 3E 68 FC | 	wrlong	#31, fp
0b420     08 4E 85 F1 | 	sub	fp, #8
0b424                 | LR__0971
0b424                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0b424     6A 00 00 FF 
0b428     84 E4 05 F1 | 	add	objptr, ##54404
0b42c     F2 12 02 FB | 	rdlong	arg01, objptr
0b430     6A 00 00 FF 
0b434     84 E4 85 F1 | 	sub	objptr, ##54404
0b438     30 F5 B0 FD | 	call	#_pslpeek
0b43c     FF FF 7F FF 
0b440     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0b444     0C 00 90 5D |  if_ne	jmp	#LR__0972
0b448     1B 12 06 F6 | 	mov	arg01, #27
0b44c     88 F2 B0 FD | 	call	#_printerror
0b450     1C 03 90 FD | 	jmp	#LR__0978
0b454                 | LR__0972
0b454                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0b454     08 4E 05 F1 | 	add	fp, #8
0b458     A7 22 02 FB | 	rdlong	local03, fp
0b45c     08 4E 85 F1 | 	sub	fp, #8
0b460     2B 22 0E F2 | 	cmp	local03, #43 wz
0b464     18 00 90 5D |  if_ne	jmp	#LR__0973
0b468     A7 12 02 FB | 	rdlong	arg01, fp
0b46c     60 38 B0 FD | 	call	#_convertstring
0b470     A7 FA 61 FC | 	wrlong	result1, fp
0b474     08 4E 05 F1 | 	add	fp, #8
0b478     A7 3E 68 FC | 	wrlong	#31, fp
0b47c     08 4E 85 F1 | 	sub	fp, #8
0b480                 | LR__0973
0b480                 | ' if t1.result_type=result_string then
0b480     08 4E 05 F1 | 	add	fp, #8
0b484     A7 22 02 FB | 	rdlong	local03, fp
0b488     08 4E 85 F1 | 	sub	fp, #8
0b48c     1F 22 0E F2 | 	cmp	local03, #31 wz
0b490     DC 02 90 5D |  if_ne	jmp	#LR__0977
0b494                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0b494     A7 12 02 FB | 	rdlong	arg01, fp
0b498     73 01 00 FF 
0b49c     EB 14 06 F6 | 	mov	arg02, ##@LR__5117
0b4a0     BC 36 B1 FD | 	call	#__system___string_cmp
0b4a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b4a8     79 00 00 AF 
0b4ac     B4 E5 05 A1 |  if_e	add	objptr, ##62388
0b4b0     F2 22 02 AB |  if_e	rdlong	local03, objptr
0b4b4     A7 22 62 AC |  if_e	wrlong	local03, fp
0b4b8     79 00 00 AF 
0b4bc     B4 E5 85 A1 |  if_e	sub	objptr, ##62388
0b4c0     A7 22 02 5B |  if_ne	rdlong	local03, fp
0b4c4     79 00 00 5F 
0b4c8     B4 E5 05 51 |  if_ne	add	objptr, ##62388
0b4cc     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0b4d0     79 00 00 5F 
0b4d4     B4 E5 85 51 |  if_ne	sub	objptr, ##62388
0b4d8                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0b4d8     09 12 06 F6 | 	mov	arg01, #9
0b4dc     20 86 B1 FD | 	call	#__system__close
0b4e0     09 22 06 F6 | 	mov	local03, #9
0b4e4     72 00 00 FF 
0b4e8     98 E4 05 F1 | 	add	objptr, ##58520
0b4ec     F2 12 02 FB | 	rdlong	arg01, objptr
0b4f0     72 00 00 FF 
0b4f4     98 E4 85 F1 | 	sub	objptr, ##58520
0b4f8     73 01 00 FF 
0b4fc     EC 14 06 F6 | 	mov	arg02, ##@LR__5118
0b500     90 36 B1 FD | 	call	#__system___string_concat
0b504     FD 12 02 F6 | 	mov	arg01, result1
0b508     A7 14 02 FB | 	rdlong	arg02, fp
0b50c     84 36 B1 FD | 	call	#__system___string_concat
0b510     FD 14 02 F6 | 	mov	arg02, result1
0b514     11 13 02 F6 | 	mov	arg01, local03
0b518     0D 16 06 F6 | 	mov	arg03, #13
0b51c     1C 42 B1 FD | 	call	#__system___basic_open_string
0b520     01 00 00 FF 
0b524     0C 4E 05 F1 | 	add	fp, ##524
0b528     A7 0A 68 FC | 	wrlong	#5, fp
0b52c     6A 00 00 FF 
0b530     84 E4 05 F1 | 	add	objptr, ##54404
0b534     F2 22 02 FB | 	rdlong	local03, objptr
0b538     6A 00 00 FF 
0b53c     84 E4 85 F1 | 	sub	objptr, ##54404
0b540     10 4E 05 F1 | 	add	fp, #16
0b544     A7 22 62 FC | 	wrlong	local03, fp
0b548     01 00 00 FF 
0b54c     1C 4E 85 F1 | 	sub	fp, ##540
0b550                 | ' '  put #9,1,fileheader,1
0b550                 | '   i=5
0b550                 | '   saveptr=programstart
0b550                 | '   do
0b550                 | LR__0974
0b550     01 00 00 FF 
0b554     20 4E 05 F1 | 	add	fp, ##544
0b558     A7 12 02 F6 | 	mov	arg01, fp
0b55c     04 4E 85 F1 | 	sub	fp, #4
0b560     A7 14 02 FB | 	rdlong	arg02, fp
0b564     01 00 00 FF 
0b568     1C 4E 85 F1 | 	sub	fp, ##540
0b56c     18 16 06 F6 | 	mov	arg03, #24
0b570     0B 00 00 FF 
0b574     CC E4 05 F1 | 	add	objptr, ##5836
0b578     98 29 B1 FD | 	call	#_psram_spin2_read1
0b57c     01 00 00 FF 
0b580     38 4E 05 F1 | 	add	fp, ##568
0b584     A7 12 02 F6 | 	mov	arg01, fp
0b588     10 4E 85 F1 | 	sub	fp, #16
0b58c     A7 14 02 FB | 	rdlong	arg02, fp
0b590     04 4E 05 F1 | 	add	fp, #4
0b594     A7 16 02 FB | 	rdlong	arg03, fp
0b598     01 00 00 FF 
0b59c     2C 4E 85 F1 | 	sub	fp, ##556
0b5a0     70 29 B1 FD | 	call	#_psram_spin2_read1
0b5a4     0B 00 00 FF 
0b5a8     CC E4 85 F1 | 	sub	objptr, ##5836
0b5ac     73 01 00 FF 
0b5b0     EE 22 06 F6 | 	mov	local03, ##@LR__5119
0b5b4     01 00 00 FF 
0b5b8     B8 4E 05 F1 | 	add	fp, ##696
0b5bc     A7 22 62 FC | 	wrlong	local03, fp
0b5c0                 | '     psram.read1(varptr(header(0)),saveptr,24)
0b5c0                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0b5c0                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0b5c0     AC 4E 85 F1 | 	sub	fp, #172
0b5c4     A7 02 68 FC | 	wrlong	#1, fp
0b5c8     20 4E 05 F1 | 	add	fp, #32
0b5cc     A7 24 02 FB | 	rdlong	local04, fp
0b5d0     01 00 00 FF 
0b5d4     2C 4E 85 F1 | 	sub	fp, ##556
0b5d8     01 24 06 F1 | 	add	local04, #1
0b5dc                 | LR__0975
0b5dc     01 00 00 FF 
0b5e0     0C 4E 05 F1 | 	add	fp, ##524
0b5e4     A7 22 02 FB | 	rdlong	local03, fp
0b5e8     01 00 00 FF 
0b5ec     0C 4E 85 F1 | 	sub	fp, ##524
0b5f0     12 23 52 F2 | 	cmps	local03, local04 wc
0b5f4     64 00 90 3D |  if_ae	jmp	#LR__0976
0b5f8     01 00 00 FF 
0b5fc     B8 4E 05 F1 | 	add	fp, ##696
0b600     A7 1E 02 FB | 	rdlong	local01, fp
0b604     AC 4E 85 F1 | 	sub	fp, #172
0b608     A7 22 02 FB | 	rdlong	local03, fp
0b60c     01 22 86 F1 | 	sub	local03, #1
0b610     2C 4E 05 F1 | 	add	fp, #44
0b614     A7 22 02 F1 | 	add	local03, fp
0b618     11 13 C2 FA | 	rdbyte	arg01, local03
0b61c     01 00 00 FF 
0b620     38 4E 85 F1 | 	sub	fp, ##568
0b624     1C 57 B1 FD | 	call	#__system__Chr_S
0b628     FD 14 02 F6 | 	mov	arg02, result1
0b62c     0F 13 02 F6 | 	mov	arg01, local01
0b630     60 35 B1 FD | 	call	#__system___string_concat
0b634     01 00 00 FF 
0b638     B8 4E 05 F1 | 	add	fp, ##696
0b63c     A7 FA 61 FC | 	wrlong	result1, fp
0b640     AC 4E 85 F1 | 	sub	fp, #172
0b644     A7 22 02 FB | 	rdlong	local03, fp
0b648     01 22 06 F1 | 	add	local03, #1
0b64c     A7 22 62 FC | 	wrlong	local03, fp
0b650     01 00 00 FF 
0b654     0C 4E 85 F1 | 	sub	fp, ##524
0b658     80 FF 9F FD | 	jmp	#LR__0975
0b65c                 | LR__0976
0b65c                 | '  '   put #9,i,header(3),1 : i+=4
0b65c                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0b65c                 | '      print #9, saveline$
0b65c     09 12 06 F6 | 	mov	arg01, #9
0b660     6C 8E B1 FD | 	call	#__system___getiolock_0484
0b664     FD 12 02 F6 | 	mov	arg01, result1
0b668     CC 34 B1 FD | 	call	#__system___lockmem
0b66c     01 00 00 FF 
0b670     B8 4E 05 F1 | 	add	fp, ##696
0b674     A7 14 02 FB | 	rdlong	arg02, fp
0b678     01 00 00 FF 
0b67c     B8 4E 85 F1 | 	sub	fp, ##696
0b680     09 12 06 F6 | 	mov	arg01, #9
0b684     00 16 06 F6 | 	mov	arg03, #0
0b688     B4 41 B1 FD | 	call	#__system___basic_print_string
0b68c     09 12 06 F6 | 	mov	arg01, #9
0b690     0A 14 06 F6 | 	mov	arg02, #10
0b694     00 16 06 F6 | 	mov	arg03, #0
0b698     4C 41 B1 FD | 	call	#__system___basic_print_char
0b69c     09 12 06 F6 | 	mov	arg01, #9
0b6a0     2C 8E B1 FD | 	call	#__system___getiolock_0484
0b6a4     FD 00 68 FC | 	wrlong	#0, result1
0b6a8     01 00 00 FF 
0b6ac     34 4E 05 F1 | 	add	fp, ##564
0b6b0     A7 22 02 FB | 	rdlong	local03, fp
0b6b4     18 4E 85 F1 | 	sub	fp, #24
0b6b8     A7 22 62 FC | 	wrlong	local03, fp
0b6bc     18 4E 05 F1 | 	add	fp, #24
0b6c0     A7 22 02 FB | 	rdlong	local03, fp
0b6c4     01 00 00 FF 
0b6c8     34 4E 85 F1 | 	sub	fp, ##564
0b6cc     FF FF 3F FF 
0b6d0     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0b6d4     78 FE 9F 5D |  if_ne	jmp	#LR__0974
0b6d8                 | '   close #9  
0b6d8     09 12 06 F6 | 	mov	arg01, #9
0b6dc     20 84 B1 FD | 	call	#__system__close
0b6e0                 | '   print "Saved as ";currentdir$+"/"+loadname
0b6e0     00 12 06 F6 | 	mov	arg01, #0
0b6e4     E8 8D B1 FD | 	call	#__system___getiolock_0484
0b6e8     FD 12 02 F6 | 	mov	arg01, result1
0b6ec     48 34 B1 FD | 	call	#__system___lockmem
0b6f0     73 01 00 FF 
0b6f4     EF 14 06 F6 | 	mov	arg02, ##@LR__5120
0b6f8     00 12 06 F6 | 	mov	arg01, #0
0b6fc     00 16 06 F6 | 	mov	arg03, #0
0b700     3C 41 B1 FD | 	call	#__system___basic_print_string
0b704     00 20 06 F6 | 	mov	local02, #0
0b708     72 00 00 FF 
0b70c     98 E4 05 F1 | 	add	objptr, ##58520
0b710     F2 12 02 FB | 	rdlong	arg01, objptr
0b714     72 00 00 FF 
0b718     98 E4 85 F1 | 	sub	objptr, ##58520
0b71c     73 01 00 FF 
0b720     F9 14 06 F6 | 	mov	arg02, ##@LR__5121
0b724     6C 34 B1 FD | 	call	#__system___string_concat
0b728     FD 12 02 F6 | 	mov	arg01, result1
0b72c     79 00 00 FF 
0b730     B4 E5 05 F1 | 	add	objptr, ##62388
0b734     F2 14 02 FB | 	rdlong	arg02, objptr
0b738     79 00 00 FF 
0b73c     B4 E5 85 F1 | 	sub	objptr, ##62388
0b740     50 34 B1 FD | 	call	#__system___string_concat
0b744     FD 14 02 F6 | 	mov	arg02, result1
0b748     10 13 02 F6 | 	mov	arg01, local02
0b74c     00 16 06 F6 | 	mov	arg03, #0
0b750     EC 40 B1 FD | 	call	#__system___basic_print_string
0b754     00 12 06 F6 | 	mov	arg01, #0
0b758     0A 14 06 F6 | 	mov	arg02, #10
0b75c     00 16 06 F6 | 	mov	arg03, #0
0b760     84 40 B1 FD | 	call	#__system___basic_print_char
0b764     00 12 06 F6 | 	mov	arg01, #0
0b768     64 8D B1 FD | 	call	#__system___getiolock_0484
0b76c     FD 00 68 FC | 	wrlong	#0, result1
0b770                 | LR__0977
0b770                 | LR__0978
0b770     A7 F0 03 F6 | 	mov	ptra, fp
0b774     B2 00 A0 FD | 	call	#popregs_
0b778                 | _do_save_ret
0b778     2D 00 64 FD | 	ret
0b77c                 | 
0b77c                 | ' 
0b77c                 | ' '----------------- Load the program
0b77c                 | ' 'lo todo: errors while loading
0b77c                 | ' sub do_load
0b77c                 | _do_load
0b77c     01 4A 05 F6 | 	mov	COUNT_, #1
0b780     A8 00 A0 FD | 	call	#pushregs_
0b784     A8 F0 07 F1 | 	add	ptra, #168
0b788     6A 00 00 FF 
0b78c     80 E4 05 F1 | 	add	objptr, ##54400
0b790     F2 14 02 FB | 	rdlong	arg02, objptr
0b794     0A 13 02 F6 | 	mov	arg01, arg02
0b798     01 12 66 F0 | 	shl	arg01, #1
0b79c     0A 13 02 F1 | 	add	arg01, arg02
0b7a0     02 12 66 F0 | 	shl	arg01, #2
0b7a4     03 00 00 FF 
0b7a8     04 E4 85 F1 | 	sub	objptr, ##1540
0b7ac     F2 12 02 F1 | 	add	arg01, objptr
0b7b0     09 15 02 FB | 	rdlong	arg02, arg01
0b7b4     18 4E 05 F1 | 	add	fp, #24
0b7b8     A7 14 62 FC | 	wrlong	arg02, fp
0b7bc     8C 4E 05 F1 | 	add	fp, #140
0b7c0     A7 12 02 F6 | 	mov	arg01, fp
0b7c4     67 00 00 FF 
0b7c8     7C E4 85 F1 | 	sub	objptr, ##52860
0b7cc     80 4E 85 F1 | 	sub	fp, #128
0b7d0     09 4F 61 FC | 	wrlong	fp, arg01
0b7d4                 | ' numpar=compiledline(lineptr_e).result.uresult
0b7d4                 | ' lpoke varptr(line2$),varptr(line2)
0b7d4                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0b7d4     0C 4E 85 F1 | 	sub	fp, #12
0b7d8     A7 1E 02 FB | 	rdlong	local01, fp
0b7dc     18 4E 85 F1 | 	sub	fp, #24
0b7e0     01 1E 56 F2 | 	cmps	local01, #1 wc
0b7e4     20 00 90 CD |  if_b	jmp	#LR__0980
0b7e8     74 F0 BF FD | 	call	#_pop
0b7ec     A7 FA 61 FC | 	wrlong	result1, fp
0b7f0     04 4E 05 F1 | 	add	fp, #4
0b7f4     A7 FC 61 FC | 	wrlong	result2, fp
0b7f8     04 4E 05 F1 | 	add	fp, #4
0b7fc     A7 FE 61 FC | 	wrlong	result3, fp
0b800     08 4E 85 F1 | 	sub	fp, #8
0b804     24 00 90 FD | 	jmp	#LR__0981
0b808                 | LR__0980
0b808     79 00 00 FF 
0b80c     B4 E5 05 F1 | 	add	objptr, ##62388
0b810     F2 1E 02 FB | 	rdlong	local01, objptr
0b814     79 00 00 FF 
0b818     B4 E5 85 F1 | 	sub	objptr, ##62388
0b81c     A7 1E 62 FC | 	wrlong	local01, fp
0b820     08 4E 05 F1 | 	add	fp, #8
0b824     A7 3E 68 FC | 	wrlong	#31, fp
0b828     08 4E 85 F1 | 	sub	fp, #8
0b82c                 | LR__0981
0b82c                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0b82c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0b82c     08 4E 05 F1 | 	add	fp, #8
0b830     A7 1E 02 FB | 	rdlong	local01, fp
0b834     08 4E 85 F1 | 	sub	fp, #8
0b838     2B 1E 0E F2 | 	cmp	local01, #43 wz
0b83c     18 00 90 5D |  if_ne	jmp	#LR__0982
0b840     A7 12 02 FB | 	rdlong	arg01, fp
0b844     88 34 B0 FD | 	call	#_convertstring
0b848     A7 FA 61 FC | 	wrlong	result1, fp
0b84c     08 4E 05 F1 | 	add	fp, #8
0b850     A7 3E 68 FC | 	wrlong	#31, fp
0b854     08 4E 85 F1 | 	sub	fp, #8
0b858                 | LR__0982
0b858                 | ' if t1.result_type=result_string then
0b858     08 4E 05 F1 | 	add	fp, #8
0b85c     A7 1E 02 FB | 	rdlong	local01, fp
0b860     08 4E 85 F1 | 	sub	fp, #8
0b864     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b868     20 04 90 5D |  if_ne	jmp	#LR__0990
0b86c     28 2D B0 FD | 	call	#_do_new
0b870                 | '   do_new
0b870                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0b870     A7 12 02 FB | 	rdlong	arg01, fp
0b874     73 01 00 FF 
0b878     FB 14 06 F6 | 	mov	arg02, ##@LR__5122
0b87c     E0 32 B1 FD | 	call	#__system___string_cmp
0b880     00 FA 0D F2 | 	cmp	result1, #0 wz
0b884     79 00 00 AF 
0b888     B4 E5 05 A1 |  if_e	add	objptr, ##62388
0b88c     F2 1E 02 AB |  if_e	rdlong	local01, objptr
0b890     A7 1E 62 AC |  if_e	wrlong	local01, fp
0b894     79 00 00 AF 
0b898     B4 E5 85 A1 |  if_e	sub	objptr, ##62388
0b89c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b8a0     79 00 00 5F 
0b8a4     B4 E5 05 51 |  if_ne	add	objptr, ##62388
0b8a8     F2 1E 62 5C |  if_ne	wrlong	local01, objptr
0b8ac     79 00 00 5F 
0b8b0     B4 E5 85 51 |  if_ne	sub	objptr, ##62388
0b8b4                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0b8b4     09 12 06 F6 | 	mov	arg01, #9
0b8b8     44 82 B1 FD | 	call	#__system__close
0b8bc     09 1E 06 F6 | 	mov	local01, #9
0b8c0     72 00 00 FF 
0b8c4     98 E4 05 F1 | 	add	objptr, ##58520
0b8c8     F2 12 02 FB | 	rdlong	arg01, objptr
0b8cc     72 00 00 FF 
0b8d0     98 E4 85 F1 | 	sub	objptr, ##58520
0b8d4     73 01 00 FF 
0b8d8     FC 14 06 F6 | 	mov	arg02, ##@LR__5123
0b8dc     B4 32 B1 FD | 	call	#__system___string_concat
0b8e0     FD 12 02 F6 | 	mov	arg01, result1
0b8e4     A7 14 02 FB | 	rdlong	arg02, fp
0b8e8     A8 32 B1 FD | 	call	#__system___string_concat
0b8ec     FD 14 02 F6 | 	mov	arg02, result1
0b8f0     0F 13 02 F6 | 	mov	arg01, local01
0b8f4     00 16 06 F6 | 	mov	arg03, #0
0b8f8     40 3E B1 FD | 	call	#__system___basic_open_string
0b8fc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b900     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b904     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b908     10 4E 05 F1 | 	add	fp, #16
0b90c     A7 FA 61 FC | 	wrlong	result1, fp
0b910                 | '   r=geterr() 
0b910                 | '   if r then 
0b910     10 4E 85 F1 | 	sub	fp, #16
0b914     48 01 90 AD |  if_e	jmp	#LR__0984
0b918                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0b918     09 12 06 F6 | 	mov	arg01, #9
0b91c     E0 81 B1 FD | 	call	#__system__close
0b920     09 1E 06 F6 | 	mov	local01, #9
0b924     72 00 00 FF 
0b928     98 E4 05 F1 | 	add	objptr, ##58520
0b92c     F2 12 02 FB | 	rdlong	arg01, objptr
0b930     72 00 00 FF 
0b934     98 E4 85 F1 | 	sub	objptr, ##58520
0b938     73 01 00 FF 
0b93c     FE 14 06 F6 | 	mov	arg02, ##@LR__5124
0b940     50 32 B1 FD | 	call	#__system___string_concat
0b944     FD 12 02 F6 | 	mov	arg01, result1
0b948     A7 14 02 FB | 	rdlong	arg02, fp
0b94c     44 32 B1 FD | 	call	#__system___string_concat
0b950     FD 12 02 F6 | 	mov	arg01, result1
0b954     73 01 00 FF 
0b958     00 15 06 F6 | 	mov	arg02, ##@LR__5125
0b95c     34 32 B1 FD | 	call	#__system___string_concat
0b960     FD 14 02 F6 | 	mov	arg02, result1
0b964     0F 13 02 F6 | 	mov	arg01, local01
0b968     00 16 06 F6 | 	mov	arg03, #0
0b96c     CC 3D B1 FD | 	call	#__system___basic_open_string
0b970     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b974     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b978     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b97c     10 4E 05 F1 | 	add	fp, #16
0b980     A7 FA 61 FC | 	wrlong	result1, fp
0b984                 | '     r=geterr() 
0b984                 | '     if r then 
0b984     10 4E 85 F1 | 	sub	fp, #16
0b988     A0 00 90 AD |  if_e	jmp	#LR__0983
0b98c                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0b98c     00 12 06 F6 | 	mov	arg01, #0
0b990     3C 8B B1 FD | 	call	#__system___getiolock_0484
0b994     FD 12 02 F6 | 	mov	arg01, result1
0b998     9C 31 B1 FD | 	call	#__system___lockmem
0b99c     73 01 00 FF 
0b9a0     05 15 06 F6 | 	mov	arg02, ##@LR__5126
0b9a4     00 12 06 F6 | 	mov	arg01, #0
0b9a8     00 16 06 F6 | 	mov	arg03, #0
0b9ac     90 3E B1 FD | 	call	#__system___basic_print_string
0b9b0     10 4E 05 F1 | 	add	fp, #16
0b9b4     A7 14 02 FB | 	rdlong	arg02, fp
0b9b8     10 4E 85 F1 | 	sub	fp, #16
0b9bc     00 12 06 F6 | 	mov	arg01, #0
0b9c0     00 16 06 F6 | 	mov	arg03, #0
0b9c4     0A 18 06 F6 | 	mov	arg04, #10
0b9c8     B8 3E B1 FD | 	call	#__system___basic_print_integer
0b9cc     73 01 00 FF 
0b9d0     13 15 06 F6 | 	mov	arg02, ##@LR__5127
0b9d4     00 12 06 F6 | 	mov	arg01, #0
0b9d8     00 16 06 F6 | 	mov	arg03, #0
0b9dc     60 3E B1 FD | 	call	#__system___basic_print_string
0b9e0     00 1E 06 F6 | 	mov	local01, #0
0b9e4     10 4E 05 F1 | 	add	fp, #16
0b9e8     A7 12 02 FB | 	rdlong	arg01, fp
0b9ec     10 4E 85 F1 | 	sub	fp, #16
0b9f0     D8 57 B1 FD | 	call	#__system___strerror
0b9f4     FD 14 02 F6 | 	mov	arg02, result1
0b9f8     0F 13 02 F6 | 	mov	arg01, local01
0b9fc     00 16 06 F6 | 	mov	arg03, #0
0ba00     3C 3E B1 FD | 	call	#__system___basic_print_string
0ba04     00 12 06 F6 | 	mov	arg01, #0
0ba08     0A 14 06 F6 | 	mov	arg02, #10
0ba0c     00 16 06 F6 | 	mov	arg03, #0
0ba10     D4 3D B1 FD | 	call	#__system___basic_print_char
0ba14     00 12 06 F6 | 	mov	arg01, #0
0ba18     B4 8A B1 FD | 	call	#__system___getiolock_0484
0ba1c     FD 00 68 FC | 	wrlong	#0, result1
0ba20     09 12 06 F6 | 	mov	arg01, #9
0ba24     D8 80 B1 FD | 	call	#__system__close
0ba28     F8 02 90 FD | 	jmp	#LR__0992
0ba2c                 | LR__0983
0ba2c     79 00 00 FF 
0ba30     B4 E5 05 F1 | 	add	objptr, ##62388
0ba34     F2 12 02 FB | 	rdlong	arg01, objptr
0ba38     79 00 00 FF 
0ba3c     B4 E5 85 F1 | 	sub	objptr, ##62388
0ba40     73 01 00 FF 
0ba44     16 15 06 F6 | 	mov	arg02, ##@LR__5128
0ba48     48 31 B1 FD | 	call	#__system___string_concat
0ba4c     79 00 00 FF 
0ba50     B4 E5 05 F1 | 	add	objptr, ##62388
0ba54     F2 FA 61 FC | 	wrlong	result1, objptr
0ba58     79 00 00 FF 
0ba5c     B4 E5 85 F1 | 	sub	objptr, ##62388
0ba60                 | LR__0984
0ba60     0C 4E 05 F1 | 	add	fp, #12
0ba64     A7 0A 68 FC | 	wrlong	#5, fp
0ba68                 | '   i=5
0ba68                 | '   get #9,1,header,1   
0ba68     10 4E 05 F1 | 	add	fp, #16
0ba6c     A7 16 02 F6 | 	mov	arg03, fp
0ba70     1C 4E 85 F1 | 	sub	fp, #28
0ba74     09 12 06 F6 | 	mov	arg01, #9
0ba78     01 14 06 F6 | 	mov	arg02, #1
0ba7c     01 18 06 F6 | 	mov	arg04, #1
0ba80     04 1A 06 F6 | 	mov	arg05, #4
0ba84     C8 3E B1 FD | 	call	#__system___basic_get
0ba88                 | '   
0ba88                 | '   if header<>$0D616272 then 
0ba88     1C 4E 05 F1 | 	add	fp, #28
0ba8c     A7 1E 02 FB | 	rdlong	local01, fp
0ba90     1C 4E 85 F1 | 	sub	fp, #28
0ba94     B1 B0 06 FF 
0ba98     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0ba9c     00 01 90 AD |  if_e	jmp	#LR__0987
0baa0                 | '     close #9: open currentdir$+"/"+loadname for input as #9
0baa0     09 12 06 F6 | 	mov	arg01, #9
0baa4     58 80 B1 FD | 	call	#__system__close
0baa8     09 1E 06 F6 | 	mov	local01, #9
0baac     72 00 00 FF 
0bab0     98 E4 05 F1 | 	add	objptr, ##58520
0bab4     F2 12 02 FB | 	rdlong	arg01, objptr
0bab8     72 00 00 FF 
0babc     98 E4 85 F1 | 	sub	objptr, ##58520
0bac0     73 01 00 FF 
0bac4     1B 15 06 F6 | 	mov	arg02, ##@LR__5129
0bac8     C8 30 B1 FD | 	call	#__system___string_concat
0bacc     FD 12 02 F6 | 	mov	arg01, result1
0bad0     79 00 00 FF 
0bad4     B4 E5 05 F1 | 	add	objptr, ##62388
0bad8     F2 14 02 FB | 	rdlong	arg02, objptr
0badc     79 00 00 FF 
0bae0     B4 E5 85 F1 | 	sub	objptr, ##62388
0bae4     AC 30 B1 FD | 	call	#__system___string_concat
0bae8     FD 14 02 F6 | 	mov	arg02, result1
0baec     0F 13 02 F6 | 	mov	arg01, local01
0baf0     00 16 06 F6 | 	mov	arg03, #0
0baf4     44 3C B1 FD | 	call	#__system___basic_open_string
0baf8                 | '     do
0baf8                 | LR__0985
0baf8     09 12 06 F6 | 	mov	arg01, #9
0bafc     44 32 B1 FD | 	call	#__system___basic_read_line
0bb00     57 00 00 FF 
0bb04     1C E4 05 F1 | 	add	objptr, ##44572
0bb08     F2 FA 61 FC | 	wrlong	result1, objptr
0bb0c                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0bb0c     57 00 00 FF 
0bb10     1C E4 85 F1 | 	sub	objptr, ##44572
0bb14     FD 12 02 F6 | 	mov	arg01, result1
0bb18     01 14 06 F6 | 	mov	arg02, #1
0bb1c     60 50 B1 FD | 	call	#__system__Left_S
0bb20     FD 12 02 F6 | 	mov	arg01, result1
0bb24     73 01 00 FF 
0bb28     1D 15 06 F6 | 	mov	arg02, ##@LR__5130
0bb2c     30 30 B1 FD | 	call	#__system___string_cmp
0bb30     00 FA 55 F2 | 	cmps	result1, #0 wc
0bb34     34 00 90 CD |  if_b	jmp	#LR__0986
0bb38     57 00 00 FF 
0bb3c     1C E4 05 F1 | 	add	objptr, ##44572
0bb40     F2 12 02 FB | 	rdlong	arg01, objptr
0bb44     57 00 00 FF 
0bb48     1C E4 85 F1 | 	sub	objptr, ##44572
0bb4c     01 14 06 F6 | 	mov	arg02, #1
0bb50     2C 50 B1 FD | 	call	#__system__Left_S
0bb54     FD 12 02 F6 | 	mov	arg01, result1
0bb58     73 01 00 FF 
0bb5c     1F 15 06 F6 | 	mov	arg02, ##@LR__5131
0bb60     FC 2F B1 FD | 	call	#__system___string_cmp
0bb64     01 FA 55 F2 | 	cmps	result1, #1 wc
0bb68     B0 4E BF CD |  if_b	call	#_interpret
0bb6c                 | LR__0986
0bb6c     57 00 00 FF 
0bb70     1C E4 05 F1 | 	add	objptr, ##44572
0bb74     F2 12 02 FB | 	rdlong	arg01, objptr
0bb78     57 00 00 FF 
0bb7c     1C E4 85 F1 | 	sub	objptr, ##44572
0bb80     73 01 00 FF 
0bb84     21 15 06 F6 | 	mov	arg02, ##@LR__5132
0bb88     D4 2F B1 FD | 	call	#__system___string_cmp
0bb8c     00 FA 0D F2 | 	cmp	result1, #0 wz
0bb90     64 FF 9F 5D |  if_ne	jmp	#LR__0985
0bb94                 | '     close #9
0bb94     09 12 06 F6 | 	mov	arg01, #9
0bb98     64 7F B1 FD | 	call	#__system__close
0bb9c     F4 00 90 FD | 	jmp	#LR__0991
0bba0                 | LR__0987
0bba0                 | '   'printerror(26) : close #9 : return
0bba0                 | '     do
0bba0                 | LR__0988
0bba0                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0bba0     0C 4E 05 F1 | 	add	fp, #12
0bba4     A7 14 02 FB | 	rdlong	arg02, fp
0bba8     14 4E 05 F1 | 	add	fp, #20
0bbac     A7 16 02 F6 | 	mov	arg03, fp
0bbb0     20 4E 85 F1 | 	sub	fp, #32
0bbb4     09 12 06 F6 | 	mov	arg01, #9
0bbb8     01 18 06 F6 | 	mov	arg04, #1
0bbbc     04 1A 06 F6 | 	mov	arg05, #4
0bbc0     8C 3D B1 FD | 	call	#__system___basic_get
0bbc4     14 4E 05 F1 | 	add	fp, #20
0bbc8     A7 FA 61 FC | 	wrlong	result1, fp
0bbcc     08 4E 85 F1 | 	sub	fp, #8
0bbd0     A7 1E 02 FB | 	rdlong	local01, fp
0bbd4     04 1E 06 F1 | 	add	local01, #4
0bbd8     A7 1E 62 FC | 	wrlong	local01, fp
0bbdc     14 4E 05 F1 | 	add	fp, #20
0bbe0     A7 1E 02 FB | 	rdlong	local01, fp
0bbe4     04 4E 05 F1 | 	add	fp, #4
0bbe8     A7 1E 02 F1 | 	add	local01, fp
0bbec     0F 01 48 FC | 	wrbyte	#0, local01
0bbf0                 | '       if amount=1 then  
0bbf0     10 4E 85 F1 | 	sub	fp, #16
0bbf4     A7 1E 02 FB | 	rdlong	local01, fp
0bbf8     14 4E 85 F1 | 	sub	fp, #20
0bbfc     01 1E 0E F2 | 	cmp	local01, #1 wz
0bc00     68 00 90 5D |  if_ne	jmp	#LR__0989
0bc04                 | '         get #9,i,line2(0),linelength : i+=linelength
0bc04     0C 4E 05 F1 | 	add	fp, #12
0bc08     A7 14 02 FB | 	rdlong	arg02, fp
0bc0c     18 4E 05 F1 | 	add	fp, #24
0bc10     A7 16 02 F6 | 	mov	arg03, fp
0bc14     04 4E 85 F1 | 	sub	fp, #4
0bc18     A7 18 02 FB | 	rdlong	arg04, fp
0bc1c     20 4E 85 F1 | 	sub	fp, #32
0bc20     09 12 06 F6 | 	mov	arg01, #9
0bc24     01 1A 06 F6 | 	mov	arg05, #1
0bc28     24 3D B1 FD | 	call	#__system___basic_get
0bc2c     0C 4E 05 F1 | 	add	fp, #12
0bc30     A7 1E 02 FB | 	rdlong	local01, fp
0bc34     14 4E 05 F1 | 	add	fp, #20
0bc38     A7 1A 02 FB | 	rdlong	arg05, fp
0bc3c     0D 1F 02 F1 | 	add	local01, arg05
0bc40     14 4E 85 F1 | 	sub	fp, #20
0bc44     A7 1E 62 FC | 	wrlong	local01, fp
0bc48     98 4E 05 F1 | 	add	fp, #152
0bc4c     A7 1E 02 FB | 	rdlong	local01, fp
0bc50     A4 4E 85 F1 | 	sub	fp, #164
0bc54     57 00 00 FF 
0bc58     1C E4 05 F1 | 	add	objptr, ##44572
0bc5c     F2 1E 62 FC | 	wrlong	local01, objptr
0bc60     57 00 00 FF 
0bc64     1C E4 85 F1 | 	sub	objptr, ##44572
0bc68     B0 4D BF FD | 	call	#_interpret
0bc6c                 | LR__0989
0bc6c     14 4E 05 F1 | 	add	fp, #20
0bc70     A7 1E 02 FB | 	rdlong	local01, fp
0bc74     14 4E 85 F1 | 	sub	fp, #20
0bc78     01 1E 56 F2 | 	cmps	local01, #1 wc
0bc7c     20 FF 9F 3D |  if_ae	jmp	#LR__0988
0bc80                 | '     close #9 
0bc80     09 12 06 F6 | 	mov	arg01, #9
0bc84     78 7E B1 FD | 	call	#__system__close
0bc88     08 00 90 FD | 	jmp	#LR__0991
0bc8c                 | LR__0990
0bc8c     1E 12 06 F6 | 	mov	arg01, #30
0bc90     44 EA B0 FD | 	call	#_printerror
0bc94                 | LR__0991
0bc94                 | '   print "Loaded ";currentdir$+"/"+loadname
0bc94     00 12 06 F6 | 	mov	arg01, #0
0bc98     34 88 B1 FD | 	call	#__system___getiolock_0484
0bc9c     FD 12 02 F6 | 	mov	arg01, result1
0bca0     94 2E B1 FD | 	call	#__system___lockmem
0bca4     73 01 00 FF 
0bca8     22 15 06 F6 | 	mov	arg02, ##@LR__5133
0bcac     00 12 06 F6 | 	mov	arg01, #0
0bcb0     00 16 06 F6 | 	mov	arg03, #0
0bcb4     88 3B B1 FD | 	call	#__system___basic_print_string
0bcb8     00 1E 06 F6 | 	mov	local01, #0
0bcbc     72 00 00 FF 
0bcc0     98 E4 05 F1 | 	add	objptr, ##58520
0bcc4     F2 12 02 FB | 	rdlong	arg01, objptr
0bcc8     72 00 00 FF 
0bccc     98 E4 85 F1 | 	sub	objptr, ##58520
0bcd0     73 01 00 FF 
0bcd4     2A 15 06 F6 | 	mov	arg02, ##@LR__5134
0bcd8     B8 2E B1 FD | 	call	#__system___string_concat
0bcdc     FD 12 02 F6 | 	mov	arg01, result1
0bce0     79 00 00 FF 
0bce4     B4 E5 05 F1 | 	add	objptr, ##62388
0bce8     F2 14 02 FB | 	rdlong	arg02, objptr
0bcec     79 00 00 FF 
0bcf0     B4 E5 85 F1 | 	sub	objptr, ##62388
0bcf4     9C 2E B1 FD | 	call	#__system___string_concat
0bcf8     FD 14 02 F6 | 	mov	arg02, result1
0bcfc     0F 13 02 F6 | 	mov	arg01, local01
0bd00     00 16 06 F6 | 	mov	arg03, #0
0bd04     38 3B B1 FD | 	call	#__system___basic_print_string
0bd08     00 12 06 F6 | 	mov	arg01, #0
0bd0c     0A 14 06 F6 | 	mov	arg02, #10
0bd10     00 16 06 F6 | 	mov	arg03, #0
0bd14     D0 3A B1 FD | 	call	#__system___basic_print_char
0bd18     00 12 06 F6 | 	mov	arg01, #0
0bd1c     B0 87 B1 FD | 	call	#__system___getiolock_0484
0bd20     FD 00 68 FC | 	wrlong	#0, result1
0bd24                 | LR__0992
0bd24     A7 F0 03 F6 | 	mov	ptra, fp
0bd28     B2 00 A0 FD | 	call	#popregs_
0bd2c                 | _do_load_ret
0bd2c     2D 00 64 FD | 	ret
0bd30                 | 
0bd30                 | ' 
0bd30                 | ' sub do_end
0bd30                 | _do_end
0bd30     6A 00 00 FF 
0bd34     7C E4 05 F1 | 	add	objptr, ##54396
0bd38     F2 00 02 FB | 	rdlong	_var01, objptr
0bd3c     01 00 86 F1 | 	sub	_var01, #1
0bd40     04 E4 05 F1 | 	add	objptr, #4
0bd44     F2 00 62 FC | 	wrlong	_var01, objptr
0bd48     0E 00 00 FF 
0bd4c     3C E4 05 F1 | 	add	objptr, ##7228
0bd50     FF FF BF FF 
0bd54     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0bd58     78 00 00 FF 
0bd5c     BC E4 85 F1 | 	sub	objptr, ##61628
0bd60                 | _do_end_ret
0bd60     2D 00 64 FD | 	ret
0bd64                 | 
0bd64                 | ' 
0bd64                 | ' '----------------- Run the program 
0bd64                 | ' 
0bd64                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0bd64                 | ' 
0bd64                 | ' sub do_run
0bd64                 | _do_run
0bd64     01 4A 05 F6 | 	mov	COUNT_, #1
0bd68     A8 00 A0 FD | 	call	#pushregs_
0bd6c     6A 00 00 FF 
0bd70     80 E4 05 F1 | 	add	objptr, ##54400
0bd74     F2 1C 02 FB | 	rdlong	arg06, objptr
0bd78     0E 19 02 F6 | 	mov	arg04, arg06
0bd7c     01 18 66 F0 | 	shl	arg04, #1
0bd80     0E 19 02 F1 | 	add	arg04, arg06
0bd84     02 18 66 F0 | 	shl	arg04, #2
0bd88     03 00 00 FF 
0bd8c     04 E4 85 F1 | 	sub	objptr, ##1540
0bd90     F2 18 02 F1 | 	add	arg04, objptr
0bd94     0C 1B 02 FB | 	rdlong	arg05, arg04
0bd98                 | ' numpar=compiledline(lineptr_e).result.uresult
0bd98                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0bd98     01 1A 0E F2 | 	cmp	arg05, #1 wz
0bd9c     67 00 00 FF 
0bda0     7C E4 85 F1 | 	sub	objptr, ##52860
0bda4     D4 F9 BF AD |  if_e	call	#_do_load
0bda8     6A 00 00 FF 
0bdac     84 E4 05 F1 | 	add	objptr, ##54404
0bdb0     F2 1C 02 FB | 	rdlong	arg06, objptr
0bdb4     0E 00 00 FF 
0bdb8     38 E4 05 F1 | 	add	objptr, ##7224
0bdbc     F2 1C 62 FC | 	wrlong	arg06, objptr
0bdc0     04 E4 05 F1 | 	add	objptr, #4
0bdc4     F2 00 68 FC | 	wrlong	#0, objptr
0bdc8     04 E4 05 F1 | 	add	objptr, #4
0bdcc     FF FF FF FF 
0bdd0     F2 FE 6B FC | 	wrlong	##-1, objptr
0bdd4                 | ' if inrun>0 then 
0bdd4     04 E4 05 F1 | 	add	objptr, #4
0bdd8     F2 1C 02 FB | 	rdlong	arg06, objptr
0bddc     78 00 00 FF 
0bde0     C8 E4 85 F1 | 	sub	objptr, ##61640
0bde4     01 1C 16 F2 | 	cmp	arg06, #1 wc
0bde8     30 00 90 CD |  if_b	jmp	#LR__1000
0bdec     78 00 00 FF 
0bdf0     CC E4 05 F1 | 	add	objptr, ##61644
0bdf4     F2 12 02 F6 | 	mov	arg01, objptr
0bdf8     10 E4 85 F1 | 	sub	objptr, #16
0bdfc     F2 14 02 FB | 	rdlong	arg02, objptr
0be00     18 16 06 F6 | 	mov	arg03, #24
0be04     6C 00 00 FF 
0be08     F0 E5 85 F1 | 	sub	objptr, ##55792
0be0c     04 21 B1 FD | 	call	#_psram_spin2_read1
0be10     0B 00 00 FF 
0be14     CC E4 85 F1 | 	sub	objptr, ##5836
0be18                 | '   psram.read1(varptr(runheader),runptr,24)  
0be18                 | '   return
0be18     C4 02 90 FD | 	jmp	#LR__1007
0be1c                 | LR__1000
0be1c     78 00 00 FF 
0be20     C8 E4 05 F1 | 	add	objptr, ##61640
0be24     F2 02 68 FC | 	wrlong	#1, objptr
0be28     04 E4 05 F1 | 	add	objptr, #4
0be2c     F2 12 02 F6 | 	mov	arg01, objptr
0be30     10 E4 85 F1 | 	sub	objptr, #16
0be34     F2 14 02 FB | 	rdlong	arg02, objptr
0be38     18 16 06 F6 | 	mov	arg03, #24
0be3c     6C 00 00 FF 
0be40     F0 E5 85 F1 | 	sub	objptr, ##55792
0be44     CC 20 B1 FD | 	call	#_psram_spin2_read1
0be48                 | ' inrun=1
0be48                 | ' psram.read1(varptr(runheader),runptr,24) 
0be48                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0be48     6D 00 00 FF 
0be4c     00 E4 05 F1 | 	add	objptr, ##55808
0be50     F2 1E 02 FB | 	rdlong	local01, objptr
0be54     78 00 00 FF 
0be58     CC E4 85 F1 | 	sub	objptr, ##61644
0be5c     FF FF 7F FF 
0be60     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0be64     78 00 00 AF 
0be68     C8 E4 05 A1 |  if_e	add	objptr, ##61640
0be6c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0be70     78 00 00 AF 
0be74     C8 E4 85 A1 |  if_e	sub	objptr, ##61640
0be78     64 02 90 AD |  if_e	jmp	#LR__1007
0be7c                 | ' do 
0be7c                 | LR__1001
0be7c                 | '   if runptr<>oldrunptr then
0be7c     78 00 00 FF 
0be80     BC E4 05 F1 | 	add	objptr, ##61628
0be84     F2 1E 02 FB | 	rdlong	local01, objptr
0be88     08 E4 05 F1 | 	add	objptr, #8
0be8c     F2 1C 02 FB | 	rdlong	arg06, objptr
0be90     78 00 00 FF 
0be94     C4 E4 85 F1 | 	sub	objptr, ##61636
0be98     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0be9c     CC 00 90 AD |  if_e	jmp	#LR__1002
0bea0     78 00 00 FF 
0bea4     CC E4 05 F1 | 	add	objptr, ##61644
0bea8     F2 12 02 F6 | 	mov	arg01, objptr
0beac     10 E4 85 F1 | 	sub	objptr, #16
0beb0     F2 14 02 FB | 	rdlong	arg02, objptr
0beb4     18 16 06 F6 | 	mov	arg03, #24
0beb8     6C 00 00 FF 
0bebc     F0 E5 85 F1 | 	sub	objptr, ##55792
0bec0     50 20 B1 FD | 	call	#_psram_spin2_read1
0bec4     5B 00 00 FF 
0bec8     B0 E5 05 F1 | 	add	objptr, ##47024
0becc     F2 12 02 F6 | 	mov	arg01, objptr
0bed0     11 00 00 FF 
0bed4     40 E4 05 F1 | 	add	objptr, ##8768
0bed8     F2 14 02 FB | 	rdlong	arg02, objptr
0bedc     13 00 00 FF 
0bee0     58 E4 85 F1 | 	sub	objptr, ##9816
0bee4     F2 1E 02 FB | 	rdlong	local01, objptr
0bee8     01 1E 66 F0 | 	shl	local01, #1
0beec     0F 15 02 F1 | 	add	arg02, local01
0bef0     13 00 00 FF 
0bef4     70 E4 05 F1 | 	add	objptr, ##9840
0bef8     F2 16 02 FB | 	rdlong	arg03, objptr
0befc     18 E4 85 F1 | 	sub	objptr, #24
0bf00     F2 1E 02 FB | 	rdlong	local01, objptr
0bf04     0F 17 82 F1 | 	sub	arg03, local01
0bf08     6C 00 00 FF 
0bf0c     F0 E5 85 F1 | 	sub	objptr, ##55792
0bf10     00 20 B1 FD | 	call	#_psram_spin2_read1
0bf14     6D 00 00 FF 
0bf18     08 E4 05 F1 | 	add	objptr, ##55816
0bf1c     F2 1E 02 FB | 	rdlong	local01, objptr
0bf20     18 E4 85 F1 | 	sub	objptr, #24
0bf24     F2 16 02 FB | 	rdlong	arg03, objptr
0bf28     0B 1F 82 F1 | 	sub	local01, arg03
0bf2c     13 00 00 FF 
0bf30     58 E4 85 F1 | 	sub	objptr, ##9816
0bf34     F2 16 02 FB | 	rdlong	arg03, objptr
0bf38     0B 1F 12 FD | 	qdiv	local01, arg03
0bf3c     05 00 00 FF 
0bf40     18 E4 05 F1 | 	add	objptr, ##2584
0bf44     18 1E 62 FD | 	getqx	local01
0bf48     03 1E 86 F1 | 	sub	local01, #3
0bf4c     F2 1E 62 FC | 	wrlong	local01, objptr
0bf50     0E 00 00 FF 
0bf54     40 E4 05 F1 | 	add	objptr, ##7232
0bf58     F2 1E 02 FB | 	rdlong	local01, objptr
0bf5c     08 E4 05 F1 | 	add	objptr, #8
0bf60     F2 1E 62 FC | 	wrlong	local01, objptr
0bf64     78 00 00 FF 
0bf68     C4 E4 85 F1 | 	sub	objptr, ##61636
0bf6c                 | LR__1002
0bf6c     78 00 00 FF 
0bf70     E0 E4 05 F1 | 	add	objptr, ##61664
0bf74     F2 1E 02 FB | 	rdlong	local01, objptr
0bf78     24 E4 85 F1 | 	sub	objptr, #36
0bf7c     F2 1E 62 FC | 	wrlong	local01, objptr
0bf80     04 E4 05 F1 | 	add	objptr, #4
0bf84     F2 12 02 FB | 	rdlong	arg01, objptr
0bf88     78 00 00 FF 
0bf8c     C0 E4 85 F1 | 	sub	objptr, ##61632
0bf90     C8 E7 BF FD | 	call	#_execute_line
0bf94     78 00 00 FF 
0bf98     C0 E4 05 F1 | 	add	objptr, ##61632
0bf9c     F2 FA 61 FC | 	wrlong	result1, objptr
0bfa0     04 E4 85 F1 | 	sub	objptr, #4
0bfa4     F2 1E 02 FB | 	rdlong	local01, objptr
0bfa8     78 00 00 FF 
0bfac     BC E4 85 F1 | 	sub	objptr, ##61628
0bfb0     FF FF 3F FF 
0bfb4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0bfb8     30 00 90 AD |  if_e	jmp	#LR__1004
0bfbc     E0 12 06 F6 | 	mov	arg01, #224
0bfc0     E0 22 B1 FD | 	call	#_usbnew_spin2_keystate
0bfc4     00 FA 0D F2 | 	cmp	result1, #0 wz
0bfc8     10 00 90 5D |  if_ne	jmp	#LR__1003
0bfcc     E4 12 06 F6 | 	mov	arg01, #228
0bfd0     D0 22 B1 FD | 	call	#_usbnew_spin2_keystate
0bfd4     00 FA 0D F2 | 	cmp	result1, #0 wz
0bfd8     A0 FE 9F AD |  if_e	jmp	#LR__1001
0bfdc                 | LR__1003
0bfdc     06 12 06 F6 | 	mov	arg01, #6
0bfe0     C0 22 B1 FD | 	call	#_usbnew_spin2_keystate
0bfe4     00 FA 0D F2 | 	cmp	result1, #0 wz
0bfe8     90 FE 9F AD |  if_e	jmp	#LR__1001
0bfec                 | LR__1004
0bfec                 | '   ''do whatever kbm.peek_latest_key()=$106 
0bfec                 | ' if runptr<>$7FFF_FFFF then 
0bfec     78 00 00 FF 
0bff0     BC E4 05 F1 | 	add	objptr, ##61628
0bff4     F2 1E 02 FB | 	rdlong	local01, objptr
0bff8     78 00 00 FF 
0bffc     BC E4 85 F1 | 	sub	objptr, ##61628
0c000     FF FF 3F FF 
0c004     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0c008     C0 00 90 AD |  if_e	jmp	#LR__1006
0c00c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)  : kbm.get_key ' eat ctrl-c
0c00c     78 00 00 FF 
0c010     F0 E4 05 F1 | 	add	objptr, ##61680
0c014     F2 1E 02 FB | 	rdlong	local01, objptr
0c018     78 00 00 FF 
0c01c     F0 E4 85 F1 | 	sub	objptr, ##61680
0c020     01 1E 0E F2 | 	cmp	local01, #1 wz
0c024     40 00 90 5D |  if_ne	jmp	#LR__1005
0c028     79 00 00 FF 
0c02c     94 E5 05 F1 | 	add	objptr, ##62356
0c030     F2 14 02 FB | 	rdlong	arg02, objptr
0c034     04 E4 85 F1 | 	sub	objptr, #4
0c038     F2 1A 02 FB | 	rdlong	arg05, objptr
0c03c     07 12 06 F6 | 	mov	arg01, #7
0c040     56 00 00 FF 
0c044     44 16 06 F6 | 	mov	arg03, ##44100
0c048     0C 18 C6 F9 | 	decod	arg04, #12
0c04c     01 1C 66 F6 | 	neg	arg06, #1
0c050     6E 00 00 FF 
0c054     C4 E4 85 F1 | 	sub	objptr, ##56516
0c058     6C 26 B1 FD | 	call	#_audio096_spin2_play
0c05c     0B 00 00 FF 
0c060     CC E4 85 F1 | 	sub	objptr, ##5836
0c064     D8 22 B1 FD | 	call	#_usbnew_spin2_get_key
0c068                 | LR__1005
0c068                 | '   print "Stopped at line ";runheader(0)
0c068     00 12 06 F6 | 	mov	arg01, #0
0c06c     60 84 B1 FD | 	call	#__system___getiolock_0484
0c070     FD 12 02 F6 | 	mov	arg01, result1
0c074     C0 2A B1 FD | 	call	#__system___lockmem
0c078     73 01 00 FF 
0c07c     2C 15 06 F6 | 	mov	arg02, ##@LR__5135
0c080     00 12 06 F6 | 	mov	arg01, #0
0c084     00 16 06 F6 | 	mov	arg03, #0
0c088     B4 37 B1 FD | 	call	#__system___basic_print_string
0c08c     78 00 00 FF 
0c090     CC E4 05 F1 | 	add	objptr, ##61644
0c094     F2 14 02 FB | 	rdlong	arg02, objptr
0c098     78 00 00 FF 
0c09c     CC E4 85 F1 | 	sub	objptr, ##61644
0c0a0     00 12 06 F6 | 	mov	arg01, #0
0c0a4     00 16 06 F6 | 	mov	arg03, #0
0c0a8     0A 18 06 F6 | 	mov	arg04, #10
0c0ac     14 38 B1 FD | 	call	#__system___basic_print_unsigned
0c0b0     00 12 06 F6 | 	mov	arg01, #0
0c0b4     0A 14 06 F6 | 	mov	arg02, #10
0c0b8     00 16 06 F6 | 	mov	arg03, #0
0c0bc     28 37 B1 FD | 	call	#__system___basic_print_char
0c0c0     00 12 06 F6 | 	mov	arg01, #0
0c0c4     08 84 B1 FD | 	call	#__system___getiolock_0484
0c0c8     FD 00 68 FC | 	wrlong	#0, result1
0c0cc                 | LR__1006
0c0cc     78 00 00 FF 
0c0d0     C8 E4 05 F1 | 	add	objptr, ##61640
0c0d4     F2 00 68 FC | 	wrlong	#0, objptr
0c0d8     78 00 00 FF 
0c0dc     C8 E4 85 F1 | 	sub	objptr, ##61640
0c0e0                 | LR__1007
0c0e0     A7 F0 03 F6 | 	mov	ptra, fp
0c0e4     B2 00 A0 FD | 	call	#popregs_
0c0e8                 | _do_run_ret
0c0e8     2D 00 64 FD | 	ret
0c0ec                 | 
0c0ec                 | ' 
0c0ec                 | ' 
0c0ec                 | ' 
0c0ec                 | ' 
0c0ec                 | ' 
0c0ec                 | ' 
0c0ec                 | ' 
0c0ec                 | ' sub do_defenv
0c0ec                 | _do_defenv
0c0ec     09 4A 05 F6 | 	mov	COUNT_, #9
0c0f0     A8 00 A0 FD | 	call	#pushregs_
0c0f4     B4 F0 07 F1 | 	add	ptra, #180
0c0f8     6A 00 00 FF 
0c0fc     80 E4 05 F1 | 	add	objptr, ##54400
0c100     F2 1E 02 FB | 	rdlong	local01, objptr
0c104     0F 1B 02 F6 | 	mov	arg05, local01
0c108     01 1A 66 F0 | 	shl	arg05, #1
0c10c     0F 1B 02 F1 | 	add	arg05, local01
0c110     02 1A 66 F0 | 	shl	arg05, #2
0c114     03 00 00 FF 
0c118     04 E4 85 F1 | 	sub	objptr, ##1540
0c11c     F2 20 02 F6 | 	mov	local02, objptr
0c120     F2 1A 02 F1 | 	add	arg05, objptr
0c124     0D 1B 02 FB | 	rdlong	arg05, arg05
0c128     10 4E 05 F1 | 	add	fp, #16
0c12c     A7 1A 62 FC | 	wrlong	arg05, fp
0c130                 | ' 
0c130                 | ' numpar=compiledline(lineptr_e).result.uresult
0c130                 | ' 
0c130                 | ' 
0c130                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0c130                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0c130                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0c130                 | ' 
0c130                 | ' 
0c130                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0c130     10 4E 85 F1 | 	sub	fp, #16
0c134     02 1A 0E F2 | 	cmp	arg05, #2 wz
0c138     67 00 00 FF 
0c13c     7C E4 85 F1 | 	sub	objptr, ##52860
0c140     10 4E 05 51 |  if_ne	add	fp, #16
0c144     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c148     10 4E 85 51 |  if_ne	sub	fp, #16
0c14c     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0c150     10 4E 05 51 |  if_ne	add	fp, #16
0c154     0F 21 02 56 |  if_ne	mov	local02, local01
0c158     10 4E 85 51 |  if_ne	sub	fp, #16
0c15c     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0c160     24 0C 90 5D |  if_ne	jmp	#LR__1031
0c164                 | ' 
0c164                 | '  
0c164                 | ' if numpar=2 then
0c164     10 4E 05 F1 | 	add	fp, #16
0c168     A7 20 02 FB | 	rdlong	local02, fp
0c16c     10 4E 85 F1 | 	sub	fp, #16
0c170     02 20 0E F2 | 	cmp	local02, #2 wz
0c174     CC 03 90 5D |  if_ne	jmp	#LR__1022
0c178     E4 E6 BF FD | 	call	#_pop
0c17c     FF 1A 02 F6 | 	mov	arg05, result3
0c180     5C 4E 05 F1 | 	add	fp, #92
0c184     A7 FA 61 FC | 	wrlong	result1, fp
0c188     04 4E 05 F1 | 	add	fp, #4
0c18c     A7 FC 61 FC | 	wrlong	result2, fp
0c190     04 4E 05 F1 | 	add	fp, #4
0c194     A7 1A 62 FC | 	wrlong	arg05, fp
0c198                 | '   t1=pop()
0c198                 | '   if t1.result_type=result_string2 then 
0c198     64 4E 85 F1 | 	sub	fp, #100
0c19c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0c1a0     20 00 90 5D |  if_ne	jmp	#LR__1010
0c1a4     5C 4E 05 F1 | 	add	fp, #92
0c1a8     A7 12 02 FB | 	rdlong	arg01, fp
0c1ac     5C 4E 85 F1 | 	sub	fp, #92
0c1b0     1C 2B B0 FD | 	call	#_convertstring
0c1b4     68 4E 05 F1 | 	add	fp, #104
0c1b8     A7 FA 61 FC | 	wrlong	result1, fp
0c1bc     68 4E 85 F1 | 	sub	fp, #104
0c1c0     58 00 90 FD | 	jmp	#LR__1013
0c1c4                 | LR__1010
0c1c4     64 4E 05 F1 | 	add	fp, #100
0c1c8     A7 20 02 FB | 	rdlong	local02, fp
0c1cc     64 4E 85 F1 | 	sub	fp, #100
0c1d0     1F 20 0E F2 | 	cmp	local02, #31 wz
0c1d4     18 00 90 5D |  if_ne	jmp	#LR__1011
0c1d8     5C 4E 05 F1 | 	add	fp, #92
0c1dc     A7 20 02 FB | 	rdlong	local02, fp
0c1e0     0C 4E 05 F1 | 	add	fp, #12
0c1e4     A7 20 62 FC | 	wrlong	local02, fp
0c1e8     68 4E 85 F1 | 	sub	fp, #104
0c1ec     2C 00 90 FD | 	jmp	#LR__1012
0c1f0                 | LR__1011
0c1f0     73 01 00 FF 
0c1f4     3D 21 06 F6 | 	mov	local02, ##@LR__5136
0c1f8     68 4E 05 F1 | 	add	fp, #104
0c1fc     A7 20 62 FC | 	wrlong	local02, fp
0c200     0C 4E 85 F1 | 	sub	fp, #12
0c204     A7 12 02 F6 | 	mov	arg01, fp
0c208     5C 4E 85 F1 | 	sub	fp, #92
0c20c     E4 72 B0 FD | 	call	#_converttoint
0c210     24 4E 05 F1 | 	add	fp, #36
0c214     A7 FA 61 FC | 	wrlong	result1, fp
0c218     24 4E 85 F1 | 	sub	fp, #36
0c21c                 | LR__1012
0c21c                 | LR__1013
0c21c                 | ' 
0c21c                 | '     
0c21c                 | '   if s1<>"" then 
0c21c     68 4E 05 F1 | 	add	fp, #104
0c220     A7 12 02 FB | 	rdlong	arg01, fp
0c224     68 4E 85 F1 | 	sub	fp, #104
0c228     73 01 00 FF 
0c22c     3E 15 06 F6 | 	mov	arg02, ##@LR__5137
0c230     2C 29 B1 FD | 	call	#__system___string_cmp
0c234     00 FA 0D F2 | 	cmp	result1, #0 wz
0c238     F8 01 90 AD |  if_e	jmp	#LR__1017
0c23c     20 E6 BF FD | 	call	#_pop
0c240     FF 1E 02 F6 | 	mov	local01, result3
0c244     5C 4E 05 F1 | 	add	fp, #92
0c248     A7 FA 61 FC | 	wrlong	result1, fp
0c24c     04 4E 05 F1 | 	add	fp, #4
0c250     A7 FC 61 FC | 	wrlong	result2, fp
0c254     04 4E 05 F1 | 	add	fp, #4
0c258     A7 1E 62 FC | 	wrlong	local01, fp
0c25c     08 4E 85 F1 | 	sub	fp, #8
0c260     A7 12 02 F6 | 	mov	arg01, fp
0c264     5C 4E 85 F1 | 	sub	fp, #92
0c268     88 72 B0 FD | 	call	#_converttoint
0c26c     20 4E 05 F1 | 	add	fp, #32
0c270     A7 FA 61 FC | 	wrlong	result1, fp
0c274     20 4E 85 F1 | 	sub	fp, #32
0c278                 | '     t1=pop()
0c278                 | '     channel=converttoint(t1) 
0c278                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0c278     09 12 06 F6 | 	mov	arg01, #9
0c27c     80 78 B1 FD | 	call	#__system__close
0c280     09 20 06 F6 | 	mov	local02, #9
0c284     73 01 00 FF 
0c288     3F 13 06 F6 | 	mov	arg01, ##@LR__5138
0c28c     68 4E 05 F1 | 	add	fp, #104
0c290     A7 14 02 FB | 	rdlong	arg02, fp
0c294     68 4E 85 F1 | 	sub	fp, #104
0c298     F8 28 B1 FD | 	call	#__system___string_concat
0c29c     FD 14 02 F6 | 	mov	arg02, result1
0c2a0     10 13 02 F6 | 	mov	arg01, local02
0c2a4     00 16 06 F6 | 	mov	arg03, #0
0c2a8     90 34 B1 FD | 	call	#__system___basic_open_string
0c2ac     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0c2b0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0c2b4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0c2b8     0C 4E 05 F1 | 	add	fp, #12
0c2bc     A7 FA 61 FC | 	wrlong	result1, fp
0c2c0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0c2c0     0C 4E 85 F1 | 	sub	fp, #12
0c2c4     A0 00 90 AD |  if_e	jmp	#LR__1014
0c2c8     00 12 06 F6 | 	mov	arg01, #0
0c2cc     00 82 B1 FD | 	call	#__system___getiolock_0484
0c2d0     FD 12 02 F6 | 	mov	arg01, result1
0c2d4     60 28 B1 FD | 	call	#__system___lockmem
0c2d8     73 01 00 FF 
0c2dc     4C 15 06 F6 | 	mov	arg02, ##@LR__5139
0c2e0     00 12 06 F6 | 	mov	arg01, #0
0c2e4     00 16 06 F6 | 	mov	arg03, #0
0c2e8     54 35 B1 FD | 	call	#__system___basic_print_string
0c2ec     0C 4E 05 F1 | 	add	fp, #12
0c2f0     A7 14 02 FB | 	rdlong	arg02, fp
0c2f4     0C 4E 85 F1 | 	sub	fp, #12
0c2f8     00 12 06 F6 | 	mov	arg01, #0
0c2fc     00 16 06 F6 | 	mov	arg03, #0
0c300     0A 18 06 F6 | 	mov	arg04, #10
0c304     7C 35 B1 FD | 	call	#__system___basic_print_integer
0c308     73 01 00 FF 
0c30c     5A 15 06 F6 | 	mov	arg02, ##@LR__5140
0c310     00 12 06 F6 | 	mov	arg01, #0
0c314     00 16 06 F6 | 	mov	arg03, #0
0c318     24 35 B1 FD | 	call	#__system___basic_print_string
0c31c     00 20 06 F6 | 	mov	local02, #0
0c320     0C 4E 05 F1 | 	add	fp, #12
0c324     A7 12 02 FB | 	rdlong	arg01, fp
0c328     0C 4E 85 F1 | 	sub	fp, #12
0c32c     9C 4E B1 FD | 	call	#__system___strerror
0c330     FD 14 02 F6 | 	mov	arg02, result1
0c334     10 13 02 F6 | 	mov	arg01, local02
0c338     00 16 06 F6 | 	mov	arg03, #0
0c33c     00 35 B1 FD | 	call	#__system___basic_print_string
0c340     00 12 06 F6 | 	mov	arg01, #0
0c344     0A 14 06 F6 | 	mov	arg02, #10
0c348     00 16 06 F6 | 	mov	arg03, #0
0c34c     98 34 B1 FD | 	call	#__system___basic_print_char
0c350     00 12 06 F6 | 	mov	arg01, #0
0c354     78 81 B1 FD | 	call	#__system___getiolock_0484
0c358     FD 00 68 FC | 	wrlong	#0, result1
0c35c     09 12 06 F6 | 	mov	arg01, #9
0c360     9C 77 B1 FD | 	call	#__system__close
0c364     20 0A 90 FD | 	jmp	#LR__1031
0c368                 | LR__1014
0c368                 | '     get #9,17,envbuf8(channel,0),256
0c368     20 4E 05 F1 | 	add	fp, #32
0c36c     A7 1A 02 FB | 	rdlong	arg05, fp
0c370     20 4E 85 F1 | 	sub	fp, #32
0c374     0D 17 02 F6 | 	mov	arg03, arg05
0c378     09 16 66 F0 | 	shl	arg03, #9
0c37c     0D 17 02 F1 | 	add	arg03, arg05
0c380     2C 00 00 FF 
0c384     D8 E4 05 F1 | 	add	objptr, ##22744
0c388     F2 16 02 F1 | 	add	arg03, objptr
0c38c     09 12 06 F6 | 	mov	arg01, #9
0c390     11 14 06 F6 | 	mov	arg02, #17
0c394     00 19 06 F6 | 	mov	arg04, #256
0c398     01 1A 06 F6 | 	mov	arg05, #1
0c39c     2C 00 00 FF 
0c3a0     D8 E4 85 F1 | 	sub	objptr, ##22744
0c3a4     A8 35 B1 FD | 	call	#__system___basic_get
0c3a8                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0c3a8     14 4E 05 F1 | 	add	fp, #20
0c3ac     A7 FE 69 FC | 	wrlong	#255, fp
0c3b0     14 4E 85 F1 | 	sub	fp, #20
0c3b4     2C 00 00 FF 
0c3b8     D8 E4 05 F1 | 	add	objptr, ##22744
0c3bc     97 30 48 FB | 	callpa	#(@LR__1016-@LR__1015)>>2,fcache_load_ptr_
0c3c0                 | LR__1015
0c3c0     20 4E 05 F1 | 	add	fp, #32
0c3c4     A7 18 02 FB | 	rdlong	arg04, fp
0c3c8     0C 21 02 F6 | 	mov	local02, arg04
0c3cc     09 20 66 F0 | 	shl	local02, #9
0c3d0     F2 20 02 F1 | 	add	local02, objptr
0c3d4     0C 4E 85 F1 | 	sub	fp, #12
0c3d8     A7 1E 02 FB | 	rdlong	local01, fp
0c3dc     0F 1B 02 F6 | 	mov	arg05, local01
0c3e0     01 1A 66 F0 | 	shl	arg05, #1
0c3e4     10 1B 02 F1 | 	add	arg05, local02
0c3e8     0C 21 02 F6 | 	mov	local02, arg04
0c3ec     09 20 66 F0 | 	shl	local02, #9
0c3f0     0C 21 02 F1 | 	add	local02, arg04
0c3f4     F2 20 02 F1 | 	add	local02, objptr
0c3f8     10 1F 02 F1 | 	add	local01, local02
0c3fc     0F 21 C2 FA | 	rdbyte	local02, local01
0c400     00 21 06 FA | 	mul	local02, #256
0c404     0D 21 52 FC | 	wrword	local02, arg05
0c408     A7 20 02 FB | 	rdlong	local02, fp
0c40c     01 20 86 F1 | 	sub	local02, #1
0c410     A7 20 62 FC | 	wrlong	local02, fp
0c414     14 4E 85 F1 | 	sub	fp, #20
0c418     00 20 56 F2 | 	cmps	local02, #0 wc
0c41c     A0 FF 9F 3D |  if_ae	jmp	#LR__1015
0c420                 | LR__1016
0c420     2C 00 00 FF 
0c424     D8 E4 85 F1 | 	sub	objptr, ##22744
0c428                 | '     close #9
0c428     09 12 06 F6 | 	mov	arg01, #9
0c42c     D0 76 B1 FD | 	call	#__system__close
0c430                 | '                                                                     '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0c430                 | '     return
0c430     54 09 90 FD | 	jmp	#LR__1031
0c434                 | LR__1017
0c434                 | '     if wptr < ($80000 - 2048) then 
0c434     24 4E 05 F1 | 	add	fp, #36
0c438     A7 22 02 FB | 	rdlong	local03, fp
0c43c     24 4E 85 F1 | 	sub	fp, #36
0c440     FC 03 00 FF 
0c444     00 22 56 F2 | 	cmps	local03, ##522240 wc
0c448     7C 00 90 3D |  if_ae	jmp	#LR__1020
0c44c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0c44c     14 4E 05 F1 | 	add	fp, #20
0c450     A7 00 68 FC | 	wrlong	#0, fp
0c454     14 4E 85 F1 | 	sub	fp, #20
0c458     2C 00 00 FF 
0c45c     D8 E4 05 F1 | 	add	objptr, ##22744
0c460     97 2C 48 FB | 	callpa	#(@LR__1019-@LR__1018)>>2,fcache_load_ptr_
0c464                 | LR__1018
0c464     20 4E 05 F1 | 	add	fp, #32
0c468     A7 22 02 FB | 	rdlong	local03, fp
0c46c     09 22 66 F0 | 	shl	local03, #9
0c470     F2 22 02 F1 | 	add	local03, objptr
0c474     0C 4E 85 F1 | 	sub	fp, #12
0c478     A7 20 02 FB | 	rdlong	local02, fp
0c47c     10 1F 02 F6 | 	mov	local01, local02
0c480     01 1E 66 F0 | 	shl	local01, #1
0c484     11 1F 02 F1 | 	add	local01, local03
0c488     10 4E 05 F1 | 	add	fp, #16
0c48c     A7 12 02 FB | 	rdlong	arg01, fp
0c490     01 20 66 F0 | 	shl	local02, #1
0c494     10 13 02 F1 | 	add	arg01, local02
0c498     09 FB E1 FA | 	rdword	result1, arg01
0c49c     0F FB 51 FC | 	wrword	result1, local01
0c4a0     10 4E 85 F1 | 	sub	fp, #16
0c4a4     A7 22 02 FB | 	rdlong	local03, fp
0c4a8     01 22 06 F1 | 	add	local03, #1
0c4ac     A7 22 62 FC | 	wrlong	local03, fp
0c4b0     14 4E 85 F1 | 	sub	fp, #20
0c4b4     00 23 56 F2 | 	cmps	local03, #256 wc
0c4b8     A8 FF 9F CD |  if_b	jmp	#LR__1018
0c4bc                 | LR__1019
0c4bc     2C 00 00 FF 
0c4c0     D8 E4 85 F1 | 	sub	objptr, ##22744
0c4c4     C0 08 90 FD | 	jmp	#LR__1031
0c4c8                 | LR__1020
0c4c8                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0c4c8     14 4E 05 F1 | 	add	fp, #20
0c4cc     A7 00 68 FC | 	wrlong	#0, fp
0c4d0     14 4E 85 F1 | 	sub	fp, #20
0c4d4                 | LR__1021
0c4d4     20 4E 05 F1 | 	add	fp, #32
0c4d8     A7 22 02 FB | 	rdlong	local03, fp
0c4dc     09 22 66 F0 | 	shl	local03, #9
0c4e0     2C 00 00 FF 
0c4e4     D8 E4 05 F1 | 	add	objptr, ##22744
0c4e8     F2 22 02 F1 | 	add	local03, objptr
0c4ec     0C 4E 85 F1 | 	sub	fp, #12
0c4f0     A7 20 02 FB | 	rdlong	local02, fp
0c4f4     10 1F 02 F6 | 	mov	local01, local02
0c4f8     01 1E 66 F0 | 	shl	local01, #1
0c4fc     11 1F 02 F1 | 	add	local01, local03
0c500     10 4E 05 F1 | 	add	fp, #16
0c504     A7 12 02 FB | 	rdlong	arg01, fp
0c508     24 4E 85 F1 | 	sub	fp, #36
0c50c     01 20 66 F0 | 	shl	local02, #1
0c510     10 13 02 F1 | 	add	arg01, local02
0c514     2C 00 00 FF 
0c518     D8 E4 85 F1 | 	sub	objptr, ##22744
0c51c     A4 E4 B0 FD | 	call	#_psdpeek
0c520     0F FB 51 FC | 	wrword	result1, local01
0c524     14 4E 05 F1 | 	add	fp, #20
0c528     A7 24 02 FB | 	rdlong	local04, fp
0c52c     01 24 06 F1 | 	add	local04, #1
0c530     A7 24 62 FC | 	wrlong	local04, fp
0c534     14 4E 85 F1 | 	sub	fp, #20
0c538     00 25 56 F2 | 	cmps	local04, #256 wc
0c53c     94 FF 9F CD |  if_b	jmp	#LR__1021
0c540                 | '     return   
0c540     44 08 90 FD | 	jmp	#LR__1031
0c544                 | LR__1022
0c544                 | ' 
0c544                 | ' if numpar=5 then    'simple adsr
0c544     10 4E 05 F1 | 	add	fp, #16
0c548     A7 22 02 FB | 	rdlong	local03, fp
0c54c     10 4E 85 F1 | 	sub	fp, #16
0c550     05 22 0E F2 | 	cmp	local03, #5 wz
0c554     30 08 90 5D |  if_ne	jmp	#LR__1030
0c558     04 E3 BF FD | 	call	#_pop
0c55c     FF 1E 02 F6 | 	mov	local01, result3
0c560     5C 4E 05 F1 | 	add	fp, #92
0c564     A7 FA 61 FC | 	wrlong	result1, fp
0c568     04 4E 05 F1 | 	add	fp, #4
0c56c     A7 FC 61 FC | 	wrlong	result2, fp
0c570     04 4E 05 F1 | 	add	fp, #4
0c574     A7 1E 62 FC | 	wrlong	local01, fp
0c578     08 4E 85 F1 | 	sub	fp, #8
0c57c     A7 12 02 F6 | 	mov	arg01, fp
0c580     5C 4E 85 F1 | 	sub	fp, #92
0c584     18 70 B0 FD | 	call	#_converttofloat
0c588     FD 22 02 F6 | 	mov	local03, result1
0c58c     34 4E 05 F1 | 	add	fp, #52
0c590     A7 22 62 FC | 	wrlong	local03, fp
0c594     34 4E 85 F1 | 	sub	fp, #52
0c598     C4 E2 BF FD | 	call	#_pop
0c59c     FF 1E 02 F6 | 	mov	local01, result3
0c5a0     5C 4E 05 F1 | 	add	fp, #92
0c5a4     A7 FA 61 FC | 	wrlong	result1, fp
0c5a8     04 4E 05 F1 | 	add	fp, #4
0c5ac     A7 FC 61 FC | 	wrlong	result2, fp
0c5b0     04 4E 05 F1 | 	add	fp, #4
0c5b4     A7 1E 62 FC | 	wrlong	local01, fp
0c5b8     08 4E 85 F1 | 	sub	fp, #8
0c5bc     A7 12 02 F6 | 	mov	arg01, fp
0c5c0     5C 4E 85 F1 | 	sub	fp, #92
0c5c4     D8 6F B0 FD | 	call	#_converttofloat
0c5c8     FD 22 02 F6 | 	mov	local03, result1
0c5cc     30 4E 05 F1 | 	add	fp, #48
0c5d0     A7 22 62 FC | 	wrlong	local03, fp
0c5d4     30 4E 85 F1 | 	sub	fp, #48
0c5d8     84 E2 BF FD | 	call	#_pop
0c5dc     FF 1E 02 F6 | 	mov	local01, result3
0c5e0     5C 4E 05 F1 | 	add	fp, #92
0c5e4     A7 FA 61 FC | 	wrlong	result1, fp
0c5e8     04 4E 05 F1 | 	add	fp, #4
0c5ec     A7 FC 61 FC | 	wrlong	result2, fp
0c5f0     04 4E 05 F1 | 	add	fp, #4
0c5f4     A7 1E 62 FC | 	wrlong	local01, fp
0c5f8     08 4E 85 F1 | 	sub	fp, #8
0c5fc     A7 12 02 F6 | 	mov	arg01, fp
0c600     5C 4E 85 F1 | 	sub	fp, #92
0c604     98 6F B0 FD | 	call	#_converttofloat
0c608     FD 22 02 F6 | 	mov	local03, result1
0c60c     2C 4E 05 F1 | 	add	fp, #44
0c610     A7 22 62 FC | 	wrlong	local03, fp
0c614     2C 4E 85 F1 | 	sub	fp, #44
0c618     44 E2 BF FD | 	call	#_pop
0c61c     FF 1E 02 F6 | 	mov	local01, result3
0c620     5C 4E 05 F1 | 	add	fp, #92
0c624     A7 FA 61 FC | 	wrlong	result1, fp
0c628     04 4E 05 F1 | 	add	fp, #4
0c62c     A7 FC 61 FC | 	wrlong	result2, fp
0c630     04 4E 05 F1 | 	add	fp, #4
0c634     A7 1E 62 FC | 	wrlong	local01, fp
0c638     08 4E 85 F1 | 	sub	fp, #8
0c63c     A7 12 02 F6 | 	mov	arg01, fp
0c640     5C 4E 85 F1 | 	sub	fp, #92
0c644     58 6F B0 FD | 	call	#_converttofloat
0c648     FD 22 02 F6 | 	mov	local03, result1
0c64c     28 4E 05 F1 | 	add	fp, #40
0c650     A7 22 62 FC | 	wrlong	local03, fp
0c654     28 4E 85 F1 | 	sub	fp, #40
0c658     04 E2 BF FD | 	call	#_pop
0c65c     FF 1E 02 F6 | 	mov	local01, result3
0c660     5C 4E 05 F1 | 	add	fp, #92
0c664     A7 FA 61 FC | 	wrlong	result1, fp
0c668     04 4E 05 F1 | 	add	fp, #4
0c66c     A7 FC 61 FC | 	wrlong	result2, fp
0c670     04 4E 05 F1 | 	add	fp, #4
0c674     A7 1E 62 FC | 	wrlong	local01, fp
0c678     08 4E 85 F1 | 	sub	fp, #8
0c67c     A7 12 02 F6 | 	mov	arg01, fp
0c680     5C 4E 85 F1 | 	sub	fp, #92
0c684     6C 6E B0 FD | 	call	#_converttoint
0c688     20 4E 05 F1 | 	add	fp, #32
0c68c     A7 FA 61 FC | 	wrlong	result1, fp
0c690                 | ' 
0c690                 | '   t1=pop() : rr=converttofloat(t1)
0c690                 | '   t1=pop() : ss=converttofloat(t1) 
0c690                 | '   t1=pop() : dd=converttofloat(t1)
0c690                 | '   t1=pop() : aa=converttofloat(t1)
0c690                 | '   t1=pop() : channel=converttoint(t1)
0c690                 | '   if ss<0.0 then ss=0.0 
0c690     10 4E 05 F1 | 	add	fp, #16
0c694     A7 12 02 FB | 	rdlong	arg01, fp
0c698     30 4E 85 F1 | 	sub	fp, #48
0c69c     00 14 06 F6 | 	mov	arg02, #0
0c6a0     01 16 06 F6 | 	mov	arg03, #1
0c6a4     44 54 B1 FD | 	call	#__system___float_cmp
0c6a8     00 FA 55 F2 | 	cmps	result1, #0 wc
0c6ac     30 4E 05 C1 |  if_b	add	fp, #48
0c6b0     A7 00 68 CC |  if_b	wrlong	#0, fp
0c6b4     30 4E 85 C1 |  if_b	sub	fp, #48
0c6b8                 | '   if ss>1.0 then ss=1.0
0c6b8     30 4E 05 F1 | 	add	fp, #48
0c6bc     A7 12 02 FB | 	rdlong	arg01, fp
0c6c0     30 4E 85 F1 | 	sub	fp, #48
0c6c4     00 C0 1F FF 
0c6c8     00 14 06 F6 | 	mov	arg02, ##1065353216
0c6cc     01 16 66 F6 | 	neg	arg03, #1
0c6d0     18 54 B1 FD | 	call	#__system___float_cmp
0c6d4     01 FA 55 F2 | 	cmps	result1, #1 wc
0c6d8     30 4E 05 31 |  if_ae	add	fp, #48
0c6dc     00 C0 9F 3F 
0c6e0     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0c6e4     30 4E 85 31 |  if_ae	sub	fp, #48
0c6e8     28 4E 05 F1 | 	add	fp, #40
0c6ec     A7 12 02 FB | 	rdlong	arg01, fp
0c6f0     04 4E 05 F1 | 	add	fp, #4
0c6f4     A7 14 02 FB | 	rdlong	arg02, fp
0c6f8     2C 4E 85 F1 | 	sub	fp, #44
0c6fc     E8 4B B1 FD | 	call	#__system___float_add
0c700     FD 12 02 F6 | 	mov	arg01, result1
0c704     34 4E 05 F1 | 	add	fp, #52
0c708     A7 14 02 FB | 	rdlong	arg02, fp
0c70c     34 4E 85 F1 | 	sub	fp, #52
0c710     D4 4B B1 FD | 	call	#__system___float_add
0c714     4C 4E 05 F1 | 	add	fp, #76
0c718     A7 FA 61 FC | 	wrlong	result1, fp
0c71c     FD 14 02 F6 | 	mov	arg02, result1
0c720     4C 4E 85 F1 | 	sub	fp, #76
0c724     00 C0 21 FF 
0c728     00 12 06 F6 | 	mov	arg01, ##1132462080
0c72c     8C 51 B1 FD | 	call	#__system___float_div
0c730     50 4E 05 F1 | 	add	fp, #80
0c734     A7 FA 61 FC | 	wrlong	result1, fp
0c738     28 4E 85 F1 | 	sub	fp, #40
0c73c     A7 12 02 FB | 	rdlong	arg01, fp
0c740     FD 14 02 F6 | 	mov	arg02, result1
0c744     28 4E 85 F1 | 	sub	fp, #40
0c748     6C 4F B1 FD | 	call	#__system___float_mul
0c74c     FD 12 02 F6 | 	mov	arg01, result1
0c750     01 14 06 F6 | 	mov	arg02, #1
0c754     28 54 B1 FD | 	call	#__system___float_tointeger
0c758     A7 FA 61 FC | 	wrlong	result1, fp
0c75c     2C 4E 05 F1 | 	add	fp, #44
0c760     A7 12 02 FB | 	rdlong	arg01, fp
0c764     24 4E 05 F1 | 	add	fp, #36
0c768     A7 14 02 FB | 	rdlong	arg02, fp
0c76c     50 4E 85 F1 | 	sub	fp, #80
0c770     44 4F B1 FD | 	call	#__system___float_mul
0c774     FD 12 02 F6 | 	mov	arg01, result1
0c778     01 14 06 F6 | 	mov	arg02, #1
0c77c     00 54 B1 FD | 	call	#__system___float_tointeger
0c780     04 4E 05 F1 | 	add	fp, #4
0c784     A7 FA 61 FC | 	wrlong	result1, fp
0c788     30 4E 05 F1 | 	add	fp, #48
0c78c     A7 12 02 FB | 	rdlong	arg01, fp
0c790     1C 4E 05 F1 | 	add	fp, #28
0c794     A7 14 02 FB | 	rdlong	arg02, fp
0c798     50 4E 85 F1 | 	sub	fp, #80
0c79c     18 4F B1 FD | 	call	#__system___float_mul
0c7a0     FD 12 02 F6 | 	mov	arg01, result1
0c7a4     01 14 06 F6 | 	mov	arg02, #1
0c7a8     D4 53 B1 FD | 	call	#__system___float_tointeger
0c7ac     FD 22 02 F6 | 	mov	local03, result1
0c7b0     0C 4E 05 F1 | 	add	fp, #12
0c7b4     A7 22 62 FC | 	wrlong	local03, fp
0c7b8     0C 4E 85 F1 | 	sub	fp, #12
0c7bc                 | '   fulltime=aa+dd+rr
0c7bc                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0c7bc     00 12 06 F6 | 	mov	arg01, #0
0c7c0     0C 7D B1 FD | 	call	#__system___getiolock_0484
0c7c4     FD 12 02 F6 | 	mov	arg01, result1
0c7c8     6C 23 B1 FD | 	call	#__system___lockmem
0c7cc     A7 14 02 FB | 	rdlong	arg02, fp
0c7d0     00 12 06 F6 | 	mov	arg01, #0
0c7d4     00 16 06 F6 | 	mov	arg03, #0
0c7d8     0A 18 06 F6 | 	mov	arg04, #10
0c7dc     A4 30 B1 FD | 	call	#__system___basic_print_integer
0c7e0     00 12 06 F6 | 	mov	arg01, #0
0c7e4     09 14 06 F6 | 	mov	arg02, #9
0c7e8     00 16 06 F6 | 	mov	arg03, #0
0c7ec     F8 2F B1 FD | 	call	#__system___basic_print_char
0c7f0     04 4E 05 F1 | 	add	fp, #4
0c7f4     A7 14 02 FB | 	rdlong	arg02, fp
0c7f8     04 4E 85 F1 | 	sub	fp, #4
0c7fc     00 12 06 F6 | 	mov	arg01, #0
0c800     00 16 06 F6 | 	mov	arg03, #0
0c804     0A 18 06 F6 | 	mov	arg04, #10
0c808     78 30 B1 FD | 	call	#__system___basic_print_integer
0c80c     00 12 06 F6 | 	mov	arg01, #0
0c810     09 14 06 F6 | 	mov	arg02, #9
0c814     00 16 06 F6 | 	mov	arg03, #0
0c818     CC 2F B1 FD | 	call	#__system___basic_print_char
0c81c     0C 4E 05 F1 | 	add	fp, #12
0c820     A7 14 02 FB | 	rdlong	arg02, fp
0c824     0C 4E 85 F1 | 	sub	fp, #12
0c828     00 12 06 F6 | 	mov	arg01, #0
0c82c     00 16 06 F6 | 	mov	arg03, #0
0c830     0A 18 06 F6 | 	mov	arg04, #10
0c834     4C 30 B1 FD | 	call	#__system___basic_print_integer
0c838     00 12 06 F6 | 	mov	arg01, #0
0c83c     09 14 06 F6 | 	mov	arg02, #9
0c840     00 16 06 F6 | 	mov	arg03, #0
0c844     A0 2F B1 FD | 	call	#__system___basic_print_char
0c848     A7 14 02 FB | 	rdlong	arg02, fp
0c84c     04 4E 05 F1 | 	add	fp, #4
0c850     A7 22 02 FB | 	rdlong	local03, fp
0c854     11 15 02 F1 | 	add	arg02, local03
0c858     08 4E 05 F1 | 	add	fp, #8
0c85c     A7 22 02 FB | 	rdlong	local03, fp
0c860     0C 4E 85 F1 | 	sub	fp, #12
0c864     11 15 02 F1 | 	add	arg02, local03
0c868     00 12 06 F6 | 	mov	arg01, #0
0c86c     00 16 06 F6 | 	mov	arg03, #0
0c870     0A 18 06 F6 | 	mov	arg04, #10
0c874     0C 30 B1 FD | 	call	#__system___basic_print_integer
0c878     00 12 06 F6 | 	mov	arg01, #0
0c87c     0A 14 06 F6 | 	mov	arg02, #10
0c880     00 16 06 F6 | 	mov	arg03, #0
0c884     60 2F B1 FD | 	call	#__system___basic_print_char
0c888     00 12 06 F6 | 	mov	arg01, #0
0c88c     40 7C B1 FD | 	call	#__system___getiolock_0484
0c890     FD 00 68 FC | 	wrlong	#0, result1
0c894     F8 BF 23 FF 
0c898     00 22 06 F6 | 	mov	local03, ##1199566848
0c89c     A7 12 02 FB | 	rdlong	arg01, fp
0c8a0     09 13 52 F6 | 	abs	arg01, arg01 wc
0c8a4     1F 26 C6 C9 |  if_b	decod	local05, #31
0c8a8     00 26 06 36 |  if_ae	mov	local05, #0
0c8ac     04 4A B1 FD | 	call	#__system___float_fromuns
0c8b0     13 FB 61 F5 | 	xor	result1, local05
0c8b4     FD 14 02 F6 | 	mov	arg02, result1
0c8b8     11 13 02 F6 | 	mov	arg01, local03
0c8bc     FC 4F B1 FD | 	call	#__system___float_div
0c8c0     54 4E 05 F1 | 	add	fp, #84
0c8c4     A7 FA 61 FC | 	wrlong	result1, fp
0c8c8     F8 BF 23 FF 
0c8cc     00 22 06 F6 | 	mov	local03, ##1199566848
0c8d0     24 4E 85 F1 | 	sub	fp, #36
0c8d4     A7 14 02 FB | 	rdlong	arg02, fp
0c8d8     30 4E 85 F1 | 	sub	fp, #48
0c8dc     F8 BF 23 FF 
0c8e0     00 12 06 F6 | 	mov	arg01, ##1199566848
0c8e4     D0 4D B1 FD | 	call	#__system___float_mul
0c8e8     FD 14 02 F6 | 	mov	arg02, result1
0c8ec     11 13 02 F6 | 	mov	arg01, local03
0c8f0     1F 14 E6 F4 | 	bitnot	arg02, #31
0c8f4     F0 49 B1 FD | 	call	#__system___float_add
0c8f8     FD 22 02 F6 | 	mov	local03, result1
0c8fc     04 4E 05 F1 | 	add	fp, #4
0c900     A7 12 02 FB | 	rdlong	arg01, fp
0c904     04 4E 85 F1 | 	sub	fp, #4
0c908     09 13 52 F6 | 	abs	arg01, arg01 wc
0c90c     1F 26 C6 C9 |  if_b	decod	local05, #31
0c910     00 26 06 36 |  if_ae	mov	local05, #0
0c914     9C 49 B1 FD | 	call	#__system___float_fromuns
0c918     13 FB 61 F5 | 	xor	result1, local05
0c91c     FD 14 02 F6 | 	mov	arg02, result1
0c920     11 13 02 F6 | 	mov	arg01, local03
0c924     94 4F B1 FD | 	call	#__system___float_div
0c928     2C 4E 05 F1 | 	add	fp, #44
0c92c     A7 FA 61 FC | 	wrlong	result1, fp
0c930     04 4E 05 F1 | 	add	fp, #4
0c934     A7 14 02 FB | 	rdlong	arg02, fp
0c938     30 4E 85 F1 | 	sub	fp, #48
0c93c     F8 BF 23 FF 
0c940     00 12 06 F6 | 	mov	arg01, ##1199566848
0c944     70 4D B1 FD | 	call	#__system___float_mul
0c948     FD 22 02 F6 | 	mov	local03, result1
0c94c     0C 4E 05 F1 | 	add	fp, #12
0c950     A7 12 02 FB | 	rdlong	arg01, fp
0c954     0C 4E 85 F1 | 	sub	fp, #12
0c958     09 13 52 F6 | 	abs	arg01, arg01 wc
0c95c     1F 26 C6 C9 |  if_b	decod	local05, #31
0c960     00 26 06 36 |  if_ae	mov	local05, #0
0c964     4C 49 B1 FD | 	call	#__system___float_fromuns
0c968     13 FB 61 F5 | 	xor	result1, local05
0c96c     FD 14 02 F6 | 	mov	arg02, result1
0c970     11 13 02 F6 | 	mov	arg01, local03
0c974     44 4F B1 FD | 	call	#__system___float_div
0c978     FD 22 02 F6 | 	mov	local03, result1
0c97c     58 4E 05 F1 | 	add	fp, #88
0c980     A7 22 62 FC | 	wrlong	local03, fp
0c984     58 4E 85 F1 | 	sub	fp, #88
0c988                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0c988     00 12 06 F6 | 	mov	arg01, #0
0c98c     40 7B B1 FD | 	call	#__system___getiolock_0484
0c990     FD 12 02 F6 | 	mov	arg01, result1
0c994     A0 21 B1 FD | 	call	#__system___lockmem
0c998     54 4E 05 F1 | 	add	fp, #84
0c99c     A7 14 02 FB | 	rdlong	arg02, fp
0c9a0     54 4E 85 F1 | 	sub	fp, #84
0c9a4     00 12 06 F6 | 	mov	arg01, #0
0c9a8     00 16 06 F6 | 	mov	arg03, #0
0c9ac     23 18 06 F6 | 	mov	arg04, #35
0c9b0     1C 53 B1 FD | 	call	#__system___basic_print_float
0c9b4     00 12 06 F6 | 	mov	arg01, #0
0c9b8     09 14 06 F6 | 	mov	arg02, #9
0c9bc     00 16 06 F6 | 	mov	arg03, #0
0c9c0     24 2E B1 FD | 	call	#__system___basic_print_char
0c9c4     2C 4E 05 F1 | 	add	fp, #44
0c9c8     A7 14 02 FB | 	rdlong	arg02, fp
0c9cc     2C 4E 85 F1 | 	sub	fp, #44
0c9d0     00 12 06 F6 | 	mov	arg01, #0
0c9d4     00 16 06 F6 | 	mov	arg03, #0
0c9d8     23 18 06 F6 | 	mov	arg04, #35
0c9dc     F0 52 B1 FD | 	call	#__system___basic_print_float
0c9e0     00 12 06 F6 | 	mov	arg01, #0
0c9e4     09 14 06 F6 | 	mov	arg02, #9
0c9e8     00 16 06 F6 | 	mov	arg03, #0
0c9ec     F8 2D B1 FD | 	call	#__system___basic_print_char
0c9f0     58 4E 05 F1 | 	add	fp, #88
0c9f4     A7 14 02 FB | 	rdlong	arg02, fp
0c9f8     58 4E 85 F1 | 	sub	fp, #88
0c9fc     00 12 06 F6 | 	mov	arg01, #0
0ca00     00 16 06 F6 | 	mov	arg03, #0
0ca04     23 18 06 F6 | 	mov	arg04, #35
0ca08     C4 52 B1 FD | 	call	#__system___basic_print_float
0ca0c     00 12 06 F6 | 	mov	arg01, #0
0ca10     0A 14 06 F6 | 	mov	arg02, #10
0ca14     00 16 06 F6 | 	mov	arg03, #0
0ca18     CC 2D B1 FD | 	call	#__system___basic_print_char
0ca1c     00 12 06 F6 | 	mov	arg01, #0
0ca20     AC 7A B1 FD | 	call	#__system___getiolock_0484
0ca24     FD 00 68 FC | 	wrlong	#0, result1
0ca28     20 4E 05 F1 | 	add	fp, #32
0ca2c     A7 28 02 FB | 	rdlong	local06, fp
0ca30     20 4E 85 F1 | 	sub	fp, #32
0ca34     01 28 66 F0 | 	shl	local06, #1
0ca38     79 00 00 FF 
0ca3c     A4 E5 05 F1 | 	add	objptr, ##62372
0ca40     F2 28 02 F1 | 	add	local06, objptr
0ca44     A7 2A 02 FB | 	rdlong	local07, fp
0ca48     04 4E 05 F1 | 	add	fp, #4
0ca4c     A7 22 02 FB | 	rdlong	local03, fp
0ca50     11 2B 02 F1 | 	add	local07, local03
0ca54     14 2B 52 FC | 	wrword	local07, local06
0ca58     24 4E 05 F1 | 	add	fp, #36
0ca5c     A7 00 68 FC | 	wrlong	#0, fp
0ca60                 | '   suspoints(channel)=a+d
0ca60                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0ca60     14 4E 85 F1 | 	sub	fp, #20
0ca64     A7 00 68 FC | 	wrlong	#0, fp
0ca68     14 4E 85 F1 | 	sub	fp, #20
0ca6c     A7 2C 02 FB | 	rdlong	local08, fp
0ca70     79 00 00 FF 
0ca74     A4 E5 85 F1 | 	sub	objptr, ##62372
0ca78                 | LR__1023
0ca78     14 4E 05 F1 | 	add	fp, #20
0ca7c     A7 22 02 FB | 	rdlong	local03, fp
0ca80     14 4E 85 F1 | 	sub	fp, #20
0ca84     16 23 52 F2 | 	cmps	local03, local08 wc
0ca88     80 00 90 3D |  if_ae	jmp	#LR__1024
0ca8c     20 4E 05 F1 | 	add	fp, #32
0ca90     A7 28 02 FB | 	rdlong	local06, fp
0ca94     09 28 66 F0 | 	shl	local06, #9
0ca98     2C 00 00 FF 
0ca9c     D8 E4 05 F1 | 	add	objptr, ##22744
0caa0     F2 28 02 F1 | 	add	local06, objptr
0caa4     0C 4E 85 F1 | 	sub	fp, #12
0caa8     A7 22 02 FB | 	rdlong	local03, fp
0caac     01 22 66 F0 | 	shl	local03, #1
0cab0     14 23 02 F1 | 	add	local03, local06
0cab4     14 4E 05 F1 | 	add	fp, #20
0cab8     A7 12 02 FB | 	rdlong	arg01, fp
0cabc     28 4E 85 F1 | 	sub	fp, #40
0cac0     2C 00 00 FF 
0cac4     D8 E4 85 F1 | 	sub	objptr, ##22744
0cac8     01 14 06 F6 | 	mov	arg02, #1
0cacc     B0 50 B1 FD | 	call	#__system___float_tointeger
0cad0     11 FB 51 FC | 	wrword	result1, local03
0cad4     28 4E 05 F1 | 	add	fp, #40
0cad8     A7 12 02 FB | 	rdlong	arg01, fp
0cadc     2C 4E 05 F1 | 	add	fp, #44
0cae0     A7 14 02 FB | 	rdlong	arg02, fp
0cae4     54 4E 85 F1 | 	sub	fp, #84
0cae8     FC 47 B1 FD | 	call	#__system___float_add
0caec     28 4E 05 F1 | 	add	fp, #40
0caf0     A7 FA 61 FC | 	wrlong	result1, fp
0caf4     14 4E 85 F1 | 	sub	fp, #20
0caf8     A7 20 02 FB | 	rdlong	local02, fp
0cafc     01 20 06 F1 | 	add	local02, #1
0cb00     A7 20 62 FC | 	wrlong	local02, fp
0cb04     14 4E 85 F1 | 	sub	fp, #20
0cb08     6C FF 9F FD | 	jmp	#LR__1023
0cb0c                 | LR__1024
0cb0c                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0cb0c     A7 22 02 FB | 	rdlong	local03, fp
0cb10     14 4E 05 F1 | 	add	fp, #20
0cb14     A7 22 62 FC | 	wrlong	local03, fp
0cb18     14 4E 85 F1 | 	sub	fp, #20
0cb1c     A7 2E 02 FB | 	rdlong	local09, fp
0cb20     04 4E 05 F1 | 	add	fp, #4
0cb24     A7 22 02 FB | 	rdlong	local03, fp
0cb28     04 4E 85 F1 | 	sub	fp, #4
0cb2c     11 2F 02 F1 | 	add	local09, local03
0cb30                 | LR__1025
0cb30     14 4E 05 F1 | 	add	fp, #20
0cb34     A7 22 02 FB | 	rdlong	local03, fp
0cb38     14 4E 85 F1 | 	sub	fp, #20
0cb3c     17 23 52 F2 | 	cmps	local03, local09 wc
0cb40     A8 00 90 3D |  if_ae	jmp	#LR__1026
0cb44     20 4E 05 F1 | 	add	fp, #32
0cb48     A7 2C 02 FB | 	rdlong	local08, fp
0cb4c     09 2C 66 F0 | 	shl	local08, #9
0cb50     2C 00 00 FF 
0cb54     D8 E4 05 F1 | 	add	objptr, ##22744
0cb58     F2 2C 02 F1 | 	add	local08, objptr
0cb5c     0C 4E 85 F1 | 	sub	fp, #12
0cb60     A7 2A 02 FB | 	rdlong	local07, fp
0cb64     01 2A 66 F0 | 	shl	local07, #1
0cb68     16 2B 02 F1 | 	add	local07, local08
0cb6c     14 4E 05 F1 | 	add	fp, #20
0cb70     A7 12 02 FB | 	rdlong	arg01, fp
0cb74     28 4E 85 F1 | 	sub	fp, #40
0cb78     2C 00 00 FF 
0cb7c     D8 E4 85 F1 | 	sub	objptr, ##22744
0cb80     01 14 06 F6 | 	mov	arg02, #1
0cb84     F8 4F B1 FD | 	call	#__system___float_tointeger
0cb88     15 FB 51 FC | 	wrword	result1, local07
0cb8c     28 4E 05 F1 | 	add	fp, #40
0cb90     A7 12 02 FB | 	rdlong	arg01, fp
0cb94     04 4E 05 F1 | 	add	fp, #4
0cb98     A7 14 02 FB | 	rdlong	arg02, fp
0cb9c     2C 4E 85 F1 | 	sub	fp, #44
0cba0     1F 14 E6 F4 | 	bitnot	arg02, #31
0cba4     40 47 B1 FD | 	call	#__system___float_add
0cba8     28 4E 05 F1 | 	add	fp, #40
0cbac     A7 FA 61 FC | 	wrlong	result1, fp
0cbb0     28 4E 85 F1 | 	sub	fp, #40
0cbb4     FD 12 02 F6 | 	mov	arg01, result1
0cbb8     00 14 06 F6 | 	mov	arg02, #0
0cbbc     01 16 06 F6 | 	mov	arg03, #1
0cbc0     28 4F B1 FD | 	call	#__system___float_cmp
0cbc4     00 FA 55 F2 | 	cmps	result1, #0 wc
0cbc8     28 4E 05 C1 |  if_b	add	fp, #40
0cbcc     A7 00 68 CC |  if_b	wrlong	#0, fp
0cbd0     28 4E 85 C1 |  if_b	sub	fp, #40
0cbd4     14 4E 05 F1 | 	add	fp, #20
0cbd8     A7 20 02 FB | 	rdlong	local02, fp
0cbdc     01 20 06 F1 | 	add	local02, #1
0cbe0     A7 20 62 FC | 	wrlong	local02, fp
0cbe4     14 4E 85 F1 | 	sub	fp, #20
0cbe8     44 FF 9F FD | 	jmp	#LR__1025
0cbec                 | LR__1026
0cbec                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0cbec     A7 22 02 FB | 	rdlong	local03, fp
0cbf0     04 4E 05 F1 | 	add	fp, #4
0cbf4     A7 2E 02 FB | 	rdlong	local09, fp
0cbf8     17 23 02 F1 | 	add	local03, local09
0cbfc     10 4E 05 F1 | 	add	fp, #16
0cc00     A7 22 62 FC | 	wrlong	local03, fp
0cc04     14 4E 85 F1 | 	sub	fp, #20
0cc08                 | LR__1027
0cc08     14 4E 05 F1 | 	add	fp, #20
0cc0c     A7 28 02 FB | 	rdlong	local06, fp
0cc10     14 4E 85 F1 | 	sub	fp, #20
0cc14     00 29 56 F2 | 	cmps	local06, #256 wc
0cc18     A8 00 90 3D |  if_ae	jmp	#LR__1028
0cc1c     20 4E 05 F1 | 	add	fp, #32
0cc20     A7 2E 02 FB | 	rdlong	local09, fp
0cc24     09 2E 66 F0 | 	shl	local09, #9
0cc28     2C 00 00 FF 
0cc2c     D8 E4 05 F1 | 	add	objptr, ##22744
0cc30     F2 2E 02 F1 | 	add	local09, objptr
0cc34     0C 4E 85 F1 | 	sub	fp, #12
0cc38     A7 2C 02 FB | 	rdlong	local08, fp
0cc3c     01 2C 66 F0 | 	shl	local08, #1
0cc40     17 2D 02 F1 | 	add	local08, local09
0cc44     14 4E 05 F1 | 	add	fp, #20
0cc48     A7 12 02 FB | 	rdlong	arg01, fp
0cc4c     28 4E 85 F1 | 	sub	fp, #40
0cc50     2C 00 00 FF 
0cc54     D8 E4 85 F1 | 	sub	objptr, ##22744
0cc58     01 14 06 F6 | 	mov	arg02, #1
0cc5c     20 4F B1 FD | 	call	#__system___float_tointeger
0cc60     16 FB 51 FC | 	wrword	result1, local08
0cc64     28 4E 05 F1 | 	add	fp, #40
0cc68     A7 12 02 FB | 	rdlong	arg01, fp
0cc6c     30 4E 05 F1 | 	add	fp, #48
0cc70     A7 14 02 FB | 	rdlong	arg02, fp
0cc74     58 4E 85 F1 | 	sub	fp, #88
0cc78     1F 14 E6 F4 | 	bitnot	arg02, #31
0cc7c     68 46 B1 FD | 	call	#__system___float_add
0cc80     28 4E 05 F1 | 	add	fp, #40
0cc84     A7 FA 61 FC | 	wrlong	result1, fp
0cc88     28 4E 85 F1 | 	sub	fp, #40
0cc8c     FD 12 02 F6 | 	mov	arg01, result1
0cc90     00 14 06 F6 | 	mov	arg02, #0
0cc94     01 16 06 F6 | 	mov	arg03, #1
0cc98     50 4E B1 FD | 	call	#__system___float_cmp
0cc9c     00 FA 55 F2 | 	cmps	result1, #0 wc
0cca0     28 4E 05 C1 |  if_b	add	fp, #40
0cca4     A7 00 68 CC |  if_b	wrlong	#0, fp
0cca8     28 4E 85 C1 |  if_b	sub	fp, #40
0ccac     14 4E 05 F1 | 	add	fp, #20
0ccb0     A7 2E 02 FB | 	rdlong	local09, fp
0ccb4     01 2E 06 F1 | 	add	local09, #1
0ccb8     A7 2E 62 FC | 	wrlong	local09, fp
0ccbc     14 4E 85 F1 | 	sub	fp, #20
0ccc0     44 FF 9F FD | 	jmp	#LR__1027
0ccc4                 | LR__1028
0ccc4     20 4E 05 F1 | 	add	fp, #32
0ccc8     A7 28 02 FB | 	rdlong	local06, fp
0cccc     09 28 66 F0 | 	shl	local06, #9
0ccd0     2C 00 00 FF 
0ccd4     D8 E4 05 F1 | 	add	objptr, ##22744
0ccd8     F2 28 02 F1 | 	add	local06, objptr
0ccdc     FE 29 06 F1 | 	add	local06, #510
0cce0     14 01 58 FC | 	wrword	#0, local06
0cce4                 | '   envbuf(channel,255)=0
0cce4                 | '   for i=0 to 255 : print envbuf(channel,i), : next i
0cce4     0C 4E 85 F1 | 	sub	fp, #12
0cce8     A7 00 68 FC | 	wrlong	#0, fp
0ccec     14 4E 85 F1 | 	sub	fp, #20
0ccf0     2C 00 00 FF 
0ccf4     D8 E4 85 F1 | 	sub	objptr, ##22744
0ccf8                 | LR__1029
0ccf8     00 12 06 F6 | 	mov	arg01, #0
0ccfc     D0 77 B1 FD | 	call	#__system___getiolock_0484
0cd00     FD 12 02 F6 | 	mov	arg01, result1
0cd04     30 1E B1 FD | 	call	#__system___lockmem
0cd08     20 4E 05 F1 | 	add	fp, #32
0cd0c     A7 2E 02 FB | 	rdlong	local09, fp
0cd10     09 2E 66 F0 | 	shl	local09, #9
0cd14     2C 00 00 FF 
0cd18     D8 E4 05 F1 | 	add	objptr, ##22744
0cd1c     F2 2E 02 F1 | 	add	local09, objptr
0cd20     0C 4E 85 F1 | 	sub	fp, #12
0cd24     A7 2C 02 FB | 	rdlong	local08, fp
0cd28     14 4E 85 F1 | 	sub	fp, #20
0cd2c     01 2C 66 F0 | 	shl	local08, #1
0cd30     17 2D 02 F1 | 	add	local08, local09
0cd34     16 15 E2 FA | 	rdword	arg02, local08
0cd38     00 12 06 F6 | 	mov	arg01, #0
0cd3c     00 16 06 F6 | 	mov	arg03, #0
0cd40     0A 18 06 F6 | 	mov	arg04, #10
0cd44     2C 00 00 FF 
0cd48     D8 E4 85 F1 | 	sub	objptr, ##22744
0cd4c     74 2B B1 FD | 	call	#__system___basic_print_unsigned
0cd50     00 12 06 F6 | 	mov	arg01, #0
0cd54     09 14 06 F6 | 	mov	arg02, #9
0cd58     00 16 06 F6 | 	mov	arg03, #0
0cd5c     88 2A B1 FD | 	call	#__system___basic_print_char
0cd60     00 12 06 F6 | 	mov	arg01, #0
0cd64     68 77 B1 FD | 	call	#__system___getiolock_0484
0cd68     FD 00 68 FC | 	wrlong	#0, result1
0cd6c     14 4E 05 F1 | 	add	fp, #20
0cd70     A7 2E 02 FB | 	rdlong	local09, fp
0cd74     01 2E 06 F1 | 	add	local09, #1
0cd78     A7 2E 62 FC | 	wrlong	local09, fp
0cd7c     14 4E 85 F1 | 	sub	fp, #20
0cd80     00 2F 56 F2 | 	cmps	local09, #256 wc
0cd84     70 FF 9F CD |  if_b	jmp	#LR__1029
0cd88                 | LR__1030
0cd88                 | LR__1031
0cd88     A7 F0 03 F6 | 	mov	ptra, fp
0cd8c     B2 00 A0 FD | 	call	#popregs_
0cd90                 | _do_defenv_ret
0cd90     2D 00 64 FD | 	ret
0cd94                 | 
0cd94                 | ' 
0cd94                 | ' 
0cd94                 | ' sub do_play
0cd94                 | _do_play
0cd94     05 4A 05 F6 | 	mov	COUNT_, #5
0cd98     A8 00 A0 FD | 	call	#pushregs_
0cd9c     74 F0 07 F1 | 	add	ptra, #116
0cda0     60 4E 05 F1 | 	add	fp, #96
0cda4     F5 25 A2 FF 
0cda8     A7 AA 68 FC | 	wrlong	##1145825877, fp
0cdac                 | ' speed_coeff=815.6614449376854599406528189911
0cdac                 | ' 
0cdac                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0cdac     5C 4E 85 F1 | 	sub	fp, #92
0cdb0     A7 00 68 FC | 	wrlong	#0, fp
0cdb4     97 18 48 FB | 	callpa	#(@LR__1041-@LR__1040)>>2,fcache_load_ptr_
0cdb8                 | LR__1040
0cdb8     A7 16 02 FB | 	rdlong	arg03, fp
0cdbc     02 16 66 F0 | 	shl	arg03, #2
0cdc0     2C 4E 05 F1 | 	add	fp, #44
0cdc4     A7 16 02 F1 | 	add	arg03, fp
0cdc8     00 00 E0 FF 
0cdcc     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0cdd0     2C 4E 85 F1 | 	sub	fp, #44
0cdd4     A7 1E 02 FB | 	rdlong	local01, fp
0cdd8     01 1E 06 F1 | 	add	local01, #1
0cddc     A7 1E 62 FC | 	wrlong	local01, fp
0cde0     09 1E 56 F2 | 	cmps	local01, #9 wc
0cde4     D0 FF 9F CD |  if_b	jmp	#LR__1040
0cde8                 | LR__1041
0cde8     04 4E 85 F1 | 	sub	fp, #4
0cdec     6A 00 00 FF 
0cdf0     80 E4 05 F1 | 	add	objptr, ##54400
0cdf4     F2 20 02 FB | 	rdlong	local02, objptr
0cdf8     10 23 02 F6 | 	mov	local03, local02
0cdfc     01 22 66 F0 | 	shl	local03, #1
0ce00     10 23 02 F1 | 	add	local03, local02
0ce04     02 22 66 F0 | 	shl	local03, #2
0ce08     03 00 00 FF 
0ce0c     04 E4 85 F1 | 	sub	objptr, ##1540
0ce10     F2 22 02 F1 | 	add	local03, objptr
0ce14     11 25 02 FB | 	rdlong	local04, local03
0ce18     A7 24 62 FC | 	wrlong	local04, fp
0ce1c                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0ce1c                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0ce1c                 | ' numpar=compiledline(lineptr_e).result.uresult
0ce1c                 | ' for i=numpar to 1 step -1 
0ce1c     04 4E 05 F1 | 	add	fp, #4
0ce20     A7 24 62 FC | 	wrlong	local04, fp
0ce24     04 4E 85 F1 | 	sub	fp, #4
0ce28     67 00 00 FF 
0ce2c     7C E4 85 F1 | 	sub	objptr, ##52860
0ce30                 | LR__1042
0ce30     2C DA BF FD | 	call	#_pop
0ce34     54 4E 05 F1 | 	add	fp, #84
0ce38     A7 FA 61 FC | 	wrlong	result1, fp
0ce3c     04 4E 05 F1 | 	add	fp, #4
0ce40     A7 FC 61 FC | 	wrlong	result2, fp
0ce44     04 4E 05 F1 | 	add	fp, #4
0ce48     A7 FE 61 FC | 	wrlong	result3, fp
0ce4c     58 4E 85 F1 | 	sub	fp, #88
0ce50     A7 22 02 FB | 	rdlong	local03, fp
0ce54     01 22 86 F1 | 	sub	local03, #1
0ce58     02 22 66 F0 | 	shl	local03, #2
0ce5c     2C 4E 05 F1 | 	add	fp, #44
0ce60     A7 22 02 F1 | 	add	local03, fp
0ce64     24 4E 05 F1 | 	add	fp, #36
0ce68     A7 26 02 F6 | 	mov	local05, fp
0ce6c     13 13 02 F6 | 	mov	arg01, local05
0ce70     54 4E 85 F1 | 	sub	fp, #84
0ce74     28 67 B0 FD | 	call	#_converttofloat
0ce78     11 FB 61 FC | 	wrlong	result1, local03
0ce7c     04 4E 05 F1 | 	add	fp, #4
0ce80     A7 1E 02 FB | 	rdlong	local01, fp
0ce84     01 1E 86 F1 | 	sub	local01, #1
0ce88     A7 1E 62 FC | 	wrlong	local01, fp
0ce8c     04 4E 85 F1 | 	sub	fp, #4
0ce90     01 1E 56 F2 | 	cmps	local01, #1 wc
0ce94     98 FF 9F 3D |  if_ae	jmp	#LR__1042
0ce98                 | ' if params(0)<0 then channel=0 else channel=round(params(0))
0ce98     30 4E 05 F1 | 	add	fp, #48
0ce9c     A7 12 02 FB | 	rdlong	arg01, fp
0cea0     30 4E 85 F1 | 	sub	fp, #48
0cea4     00 14 06 F6 | 	mov	arg02, #0
0cea8     01 16 06 F6 | 	mov	arg03, #1
0ceac     3C 4C B1 FD | 	call	#__system___float_cmp
0ceb0     00 FA 55 F2 | 	cmps	result1, #0 wc
0ceb4     0C 4E 05 C1 |  if_b	add	fp, #12
0ceb8     A7 00 68 CC |  if_b	wrlong	#0, fp
0cebc     0C 4E 85 C1 |  if_b	sub	fp, #12
0cec0     20 00 90 CD |  if_b	jmp	#LR__1043
0cec4     30 4E 05 F1 | 	add	fp, #48
0cec8     A7 12 02 FB | 	rdlong	arg01, fp
0cecc     30 4E 85 F1 | 	sub	fp, #48
0ced0     01 14 06 F6 | 	mov	arg02, #1
0ced4     A8 4C B1 FD | 	call	#__system___float_tointeger
0ced8     0C 4E 05 F1 | 	add	fp, #12
0cedc     A7 FA 61 FC | 	wrlong	result1, fp
0cee0     0C 4E 85 F1 | 	sub	fp, #12
0cee4                 | LR__1043
0cee4                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0cee4     34 4E 05 F1 | 	add	fp, #52
0cee8     A7 12 02 FB | 	rdlong	arg01, fp
0ceec     34 4E 85 F1 | 	sub	fp, #52
0cef0     00 14 06 F6 | 	mov	arg02, #0
0cef4     01 16 06 F6 | 	mov	arg03, #1
0cef8     F0 4B B1 FD | 	call	#__system___float_cmp
0cefc     00 FA 55 F2 | 	cmps	result1, #0 wc
0cf00     40 00 90 3D |  if_ae	jmp	#LR__1044
0cf04     0C 4E 05 F1 | 	add	fp, #12
0cf08     A7 20 02 FB | 	rdlong	local02, fp
0cf0c     10 23 02 F6 | 	mov	local03, local02
0cf10     01 22 66 F0 | 	shl	local03, #1
0cf14     10 23 02 F1 | 	add	local03, local02
0cf18     03 22 66 F0 | 	shl	local03, #3
0cf1c     34 00 00 FF 
0cf20     38 E5 05 F1 | 	add	objptr, ##26936
0cf24     F2 22 02 F1 | 	add	local03, objptr
0cf28     11 23 02 FB | 	rdlong	local03, local03
0cf2c     58 4E 05 F1 | 	add	fp, #88
0cf30     A7 22 62 FC | 	wrlong	local03, fp
0cf34     64 4E 85 F1 | 	sub	fp, #100
0cf38     34 00 00 FF 
0cf3c     38 E5 85 F1 | 	sub	objptr, ##26936
0cf40     44 00 90 FD | 	jmp	#LR__1045
0cf44                 | LR__1044
0cf44     34 4E 05 F1 | 	add	fp, #52
0cf48     A7 24 02 FB | 	rdlong	local04, fp
0cf4c     30 4E 05 F1 | 	add	fp, #48
0cf50     A7 24 62 FC | 	wrlong	local04, fp
0cf54     58 4E 85 F1 | 	sub	fp, #88
0cf58     A7 20 02 FB | 	rdlong	local02, fp
0cf5c     10 23 02 F6 | 	mov	local03, local02
0cf60     01 22 66 F0 | 	shl	local03, #1
0cf64     10 23 02 F1 | 	add	local03, local02
0cf68     03 22 66 F0 | 	shl	local03, #3
0cf6c     34 00 00 FF 
0cf70     38 E5 05 F1 | 	add	objptr, ##26936
0cf74     F2 22 02 F1 | 	add	local03, objptr
0cf78     0C 4E 85 F1 | 	sub	fp, #12
0cf7c     11 25 62 FC | 	wrlong	local04, local03
0cf80     34 00 00 FF 
0cf84     38 E5 85 F1 | 	sub	objptr, ##26936
0cf88                 | LR__1045
0cf88                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
0cf88     3C 4E 05 F1 | 	add	fp, #60
0cf8c     A7 12 02 FB | 	rdlong	arg01, fp
0cf90     3C 4E 85 F1 | 	sub	fp, #60
0cf94     00 14 06 F6 | 	mov	arg02, #0
0cf98     01 16 06 F6 | 	mov	arg03, #1
0cf9c     4C 4B B1 FD | 	call	#__system___float_cmp
0cfa0     00 FA 55 F2 | 	cmps	result1, #0 wc
0cfa4     24 00 90 CD |  if_b	jmp	#LR__1046
0cfa8     3C 4E 05 F1 | 	add	fp, #60
0cfac     A7 12 02 FB | 	rdlong	arg01, fp
0cfb0     3C 4E 85 F1 | 	sub	fp, #60
0cfb4     89 C1 20 FF 
0cfb8     6F 14 06 F6 | 	mov	arg02, ##1099108975
0cfbc     01 16 66 F6 | 	neg	arg03, #1
0cfc0     28 4B B1 FD | 	call	#__system___float_cmp
0cfc4     01 FA 55 F2 | 	cmps	result1, #1 wc
0cfc8     44 00 90 CD |  if_b	jmp	#LR__1047
0cfcc                 | LR__1046
0cfcc     0C 4E 05 F1 | 	add	fp, #12
0cfd0     A7 20 02 FB | 	rdlong	local02, fp
0cfd4     10 23 02 F6 | 	mov	local03, local02
0cfd8     01 22 66 F0 | 	shl	local03, #1
0cfdc     10 23 02 F1 | 	add	local03, local02
0cfe0     03 22 66 F0 | 	shl	local03, #3
0cfe4     34 00 00 FF 
0cfe8     38 E5 05 F1 | 	add	objptr, ##26936
0cfec     F2 22 02 F1 | 	add	local03, objptr
0cff0     0C 22 06 F1 | 	add	local03, #12
0cff4     11 23 02 FB | 	rdlong	local03, local03
0cff8     60 4E 05 F1 | 	add	fp, #96
0cffc     A7 22 62 FC | 	wrlong	local03, fp
0d000     6C 4E 85 F1 | 	sub	fp, #108
0d004     34 00 00 FF 
0d008     38 E5 85 F1 | 	sub	objptr, ##26936
0d00c     48 00 90 FD | 	jmp	#LR__1048
0d010                 | LR__1047
0d010     3C 4E 05 F1 | 	add	fp, #60
0d014     A7 24 02 FB | 	rdlong	local04, fp
0d018     30 4E 05 F1 | 	add	fp, #48
0d01c     A7 24 62 FC | 	wrlong	local04, fp
0d020     60 4E 85 F1 | 	sub	fp, #96
0d024     A7 20 02 FB | 	rdlong	local02, fp
0d028     10 23 02 F6 | 	mov	local03, local02
0d02c     01 22 66 F0 | 	shl	local03, #1
0d030     10 23 02 F1 | 	add	local03, local02
0d034     03 22 66 F0 | 	shl	local03, #3
0d038     34 00 00 FF 
0d03c     38 E5 05 F1 | 	add	objptr, ##26936
0d040     F2 22 02 F1 | 	add	local03, objptr
0d044     0C 4E 85 F1 | 	sub	fp, #12
0d048     0C 22 06 F1 | 	add	local03, #12
0d04c     11 25 62 FC | 	wrlong	local04, local03
0d050     34 00 00 FF 
0d054     38 E5 85 F1 | 	sub	objptr, ##26936
0d058                 | LR__1048
0d058                 | ' if params(4)<0 orelse params(4)>8.0 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
0d058     40 4E 05 F1 | 	add	fp, #64
0d05c     A7 12 02 FB | 	rdlong	arg01, fp
0d060     40 4E 85 F1 | 	sub	fp, #64
0d064     00 14 06 F6 | 	mov	arg02, #0
0d068     01 16 06 F6 | 	mov	arg03, #1
0d06c     7C 4A B1 FD | 	call	#__system___float_cmp
0d070     00 FA 55 F2 | 	cmps	result1, #0 wc
0d074     24 00 90 CD |  if_b	jmp	#LR__1049
0d078     40 4E 05 F1 | 	add	fp, #64
0d07c     A7 12 02 FB | 	rdlong	arg01, fp
0d080     40 4E 85 F1 | 	sub	fp, #64
0d084     00 80 20 FF 
0d088     00 14 06 F6 | 	mov	arg02, ##1090519040
0d08c     01 16 66 F6 | 	neg	arg03, #1
0d090     58 4A B1 FD | 	call	#__system___float_cmp
0d094     01 FA 55 F2 | 	cmps	result1, #1 wc
0d098     48 00 90 CD |  if_b	jmp	#LR__1050
0d09c                 | LR__1049
0d09c     0C 4E 05 F1 | 	add	fp, #12
0d0a0     A7 22 02 FB | 	rdlong	local03, fp
0d0a4     11 27 02 F6 | 	mov	local05, local03
0d0a8     01 26 66 F0 | 	shl	local05, #1
0d0ac     11 27 02 F1 | 	add	local05, local03
0d0b0     03 26 66 F0 | 	shl	local05, #3
0d0b4     34 00 00 FF 
0d0b8     38 E5 05 F1 | 	add	objptr, ##26936
0d0bc     F2 26 02 F1 | 	add	local05, objptr
0d0c0     04 26 06 F1 | 	add	local05, #4
0d0c4     13 27 C2 FA | 	rdbyte	local05, local05
0d0c8     13 25 E2 F8 | 	getbyte	local04, local05, #0
0d0cc     14 4E 05 F1 | 	add	fp, #20
0d0d0     A7 24 62 FC | 	wrlong	local04, fp
0d0d4     20 4E 85 F1 | 	sub	fp, #32
0d0d8     34 00 00 FF 
0d0dc     38 E5 85 F1 | 	sub	objptr, ##26936
0d0e0     54 00 90 FD | 	jmp	#LR__1051
0d0e4                 | LR__1050
0d0e4     40 4E 05 F1 | 	add	fp, #64
0d0e8     A7 12 02 FB | 	rdlong	arg01, fp
0d0ec     40 4E 85 F1 | 	sub	fp, #64
0d0f0     01 14 06 F6 | 	mov	arg02, #1
0d0f4     88 4A B1 FD | 	call	#__system___float_tointeger
0d0f8     20 4E 05 F1 | 	add	fp, #32
0d0fc     A7 FA 61 FC | 	wrlong	result1, fp
0d100     14 4E 85 F1 | 	sub	fp, #20
0d104     A7 20 02 FB | 	rdlong	local02, fp
0d108     10 23 02 F6 | 	mov	local03, local02
0d10c     01 22 66 F0 | 	shl	local03, #1
0d110     10 23 02 F1 | 	add	local03, local02
0d114     03 22 66 F0 | 	shl	local03, #3
0d118     34 00 00 FF 
0d11c     38 E5 05 F1 | 	add	objptr, ##26936
0d120     F2 22 02 F1 | 	add	local03, objptr
0d124     0C 4E 85 F1 | 	sub	fp, #12
0d128     04 22 06 F1 | 	add	local03, #4
0d12c     11 FB 41 FC | 	wrbyte	result1, local03
0d130     34 00 00 FF 
0d134     38 E5 85 F1 | 	sub	objptr, ##26936
0d138                 | LR__1051
0d138                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
0d138     44 4E 05 F1 | 	add	fp, #68
0d13c     A7 12 02 FB | 	rdlong	arg01, fp
0d140     44 4E 85 F1 | 	sub	fp, #68
0d144     00 14 06 F6 | 	mov	arg02, #0
0d148     01 16 06 F6 | 	mov	arg03, #1
0d14c     9C 49 B1 FD | 	call	#__system___float_cmp
0d150     00 FA 55 F2 | 	cmps	result1, #0 wc
0d154     24 00 90 CD |  if_b	jmp	#LR__1052
0d158     44 4E 05 F1 | 	add	fp, #68
0d15c     A7 12 02 FB | 	rdlong	arg01, fp
0d160     44 4E 85 F1 | 	sub	fp, #68
0d164     00 80 20 FF 
0d168     00 14 06 F6 | 	mov	arg02, ##1090519040
0d16c     01 16 66 F6 | 	neg	arg03, #1
0d170     78 49 B1 FD | 	call	#__system___float_cmp
0d174     01 FA 55 F2 | 	cmps	result1, #1 wc
0d178     48 00 90 CD |  if_b	jmp	#LR__1053
0d17c                 | LR__1052
0d17c     0C 4E 05 F1 | 	add	fp, #12
0d180     A7 22 02 FB | 	rdlong	local03, fp
0d184     11 27 02 F6 | 	mov	local05, local03
0d188     01 26 66 F0 | 	shl	local05, #1
0d18c     11 27 02 F1 | 	add	local05, local03
0d190     03 26 66 F0 | 	shl	local05, #3
0d194     34 00 00 FF 
0d198     38 E5 05 F1 | 	add	objptr, ##26936
0d19c     F2 26 02 F1 | 	add	local05, objptr
0d1a0     05 26 06 F1 | 	add	local05, #5
0d1a4     13 27 C2 FA | 	rdbyte	local05, local05
0d1a8     13 25 E2 F8 | 	getbyte	local04, local05, #0
0d1ac     18 4E 05 F1 | 	add	fp, #24
0d1b0     A7 24 62 FC | 	wrlong	local04, fp
0d1b4     24 4E 85 F1 | 	sub	fp, #36
0d1b8     34 00 00 FF 
0d1bc     38 E5 85 F1 | 	sub	objptr, ##26936
0d1c0     54 00 90 FD | 	jmp	#LR__1054
0d1c4                 | LR__1053
0d1c4     44 4E 05 F1 | 	add	fp, #68
0d1c8     A7 12 02 FB | 	rdlong	arg01, fp
0d1cc     44 4E 85 F1 | 	sub	fp, #68
0d1d0     01 14 06 F6 | 	mov	arg02, #1
0d1d4     A8 49 B1 FD | 	call	#__system___float_tointeger
0d1d8     24 4E 05 F1 | 	add	fp, #36
0d1dc     A7 FA 61 FC | 	wrlong	result1, fp
0d1e0     18 4E 85 F1 | 	sub	fp, #24
0d1e4     A7 20 02 FB | 	rdlong	local02, fp
0d1e8     10 23 02 F6 | 	mov	local03, local02
0d1ec     01 22 66 F0 | 	shl	local03, #1
0d1f0     10 23 02 F1 | 	add	local03, local02
0d1f4     03 22 66 F0 | 	shl	local03, #3
0d1f8     34 00 00 FF 
0d1fc     38 E5 05 F1 | 	add	objptr, ##26936
0d200     F2 22 02 F1 | 	add	local03, objptr
0d204     0C 4E 85 F1 | 	sub	fp, #12
0d208     05 22 06 F1 | 	add	local03, #5
0d20c     11 FB 41 FC | 	wrbyte	result1, local03
0d210     34 00 00 FF 
0d214     38 E5 85 F1 | 	sub	objptr, ##26936
0d218                 | LR__1054
0d218                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
0d218     48 4E 05 F1 | 	add	fp, #72
0d21c     A7 12 02 FB | 	rdlong	arg01, fp
0d220     48 4E 85 F1 | 	sub	fp, #72
0d224     00 14 06 F6 | 	mov	arg02, #0
0d228     01 16 06 F6 | 	mov	arg03, #1
0d22c     BC 48 B1 FD | 	call	#__system___float_cmp
0d230     00 FA 55 F2 | 	cmps	result1, #0 wc
0d234     24 00 90 CD |  if_b	jmp	#LR__1055
0d238     48 4E 05 F1 | 	add	fp, #72
0d23c     A7 12 02 FB | 	rdlong	arg01, fp
0d240     48 4E 85 F1 | 	sub	fp, #72
0d244     00 3D 22 FF 
0d248     00 14 06 F6 | 	mov	arg02, ##1148846080
0d24c     01 16 66 F6 | 	neg	arg03, #1
0d250     98 48 B1 FD | 	call	#__system___float_cmp
0d254     01 FA 55 F2 | 	cmps	result1, #1 wc
0d258     44 00 90 CD |  if_b	jmp	#LR__1056
0d25c                 | LR__1055
0d25c     0C 4E 05 F1 | 	add	fp, #12
0d260     A7 20 02 FB | 	rdlong	local02, fp
0d264     10 23 02 F6 | 	mov	local03, local02
0d268     01 22 66 F0 | 	shl	local03, #1
0d26c     10 23 02 F1 | 	add	local03, local02
0d270     03 22 66 F0 | 	shl	local03, #3
0d274     34 00 00 FF 
0d278     38 E5 05 F1 | 	add	objptr, ##26936
0d27c     F2 22 02 F1 | 	add	local03, objptr
0d280     08 22 06 F1 | 	add	local03, #8
0d284     11 25 02 FB | 	rdlong	local04, local03
0d288     64 4E 05 F1 | 	add	fp, #100
0d28c     A7 24 62 FC | 	wrlong	local04, fp
0d290     70 4E 85 F1 | 	sub	fp, #112
0d294     34 00 00 FF 
0d298     38 E5 85 F1 | 	sub	objptr, ##26936
0d29c     48 00 90 FD | 	jmp	#LR__1057
0d2a0                 | LR__1056
0d2a0     48 4E 05 F1 | 	add	fp, #72
0d2a4     A7 24 02 FB | 	rdlong	local04, fp
0d2a8     28 4E 05 F1 | 	add	fp, #40
0d2ac     A7 24 62 FC | 	wrlong	local04, fp
0d2b0     64 4E 85 F1 | 	sub	fp, #100
0d2b4     A7 20 02 FB | 	rdlong	local02, fp
0d2b8     10 23 02 F6 | 	mov	local03, local02
0d2bc     01 22 66 F0 | 	shl	local03, #1
0d2c0     10 23 02 F1 | 	add	local03, local02
0d2c4     03 22 66 F0 | 	shl	local03, #3
0d2c8     34 00 00 FF 
0d2cc     38 E5 05 F1 | 	add	objptr, ##26936
0d2d0     F2 22 02 F1 | 	add	local03, objptr
0d2d4     0C 4E 85 F1 | 	sub	fp, #12
0d2d8     08 22 06 F1 | 	add	local03, #8
0d2dc     11 25 62 FC | 	wrlong	local04, local03
0d2e0     34 00 00 FF 
0d2e4     38 E5 85 F1 | 	sub	objptr, ##26936
0d2e8                 | LR__1057
0d2e8                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
0d2e8     38 4E 05 F1 | 	add	fp, #56
0d2ec     A7 12 02 FB | 	rdlong	arg01, fp
0d2f0     38 4E 85 F1 | 	sub	fp, #56
0d2f4     00 14 06 F6 | 	mov	arg02, #0
0d2f8     01 16 06 F6 | 	mov	arg03, #1
0d2fc     EC 47 B1 FD | 	call	#__system___float_cmp
0d300     00 FA 55 F2 | 	cmps	result1, #0 wc
0d304     24 00 90 CD |  if_b	jmp	#LR__1058
0d308     38 4E 05 F1 | 	add	fp, #56
0d30c     A7 12 02 FB | 	rdlong	arg01, fp
0d310     38 4E 85 F1 | 	sub	fp, #56
0d314     20 0E 23 FF 
0d318     00 14 06 F6 | 	mov	arg02, ##1176256512
0d31c     01 16 66 F6 | 	neg	arg03, #1
0d320     C8 47 B1 FD | 	call	#__system___float_cmp
0d324     01 FA 55 F2 | 	cmps	result1, #1 wc
0d328     48 00 90 CD |  if_b	jmp	#LR__1059
0d32c                 | LR__1058
0d32c     0C 4E 05 F1 | 	add	fp, #12
0d330     A7 22 02 FB | 	rdlong	local03, fp
0d334     11 27 02 F6 | 	mov	local05, local03
0d338     01 26 66 F0 | 	shl	local05, #1
0d33c     11 27 02 F1 | 	add	local05, local03
0d340     03 26 66 F0 | 	shl	local05, #3
0d344     34 00 00 FF 
0d348     38 E5 05 F1 | 	add	objptr, ##26936
0d34c     F2 26 02 F1 | 	add	local05, objptr
0d350     06 26 06 F1 | 	add	local05, #6
0d354     13 27 E2 FA | 	rdword	local05, local05
0d358     13 25 32 F9 | 	getword	local04, local05, #0
0d35c     1C 4E 05 F1 | 	add	fp, #28
0d360     A7 24 62 FC | 	wrlong	local04, fp
0d364     28 4E 85 F1 | 	sub	fp, #40
0d368     34 00 00 FF 
0d36c     38 E5 85 F1 | 	sub	objptr, ##26936
0d370     54 00 90 FD | 	jmp	#LR__1060
0d374                 | LR__1059
0d374     38 4E 05 F1 | 	add	fp, #56
0d378     A7 12 02 FB | 	rdlong	arg01, fp
0d37c     38 4E 85 F1 | 	sub	fp, #56
0d380     01 14 06 F6 | 	mov	arg02, #1
0d384     F8 47 B1 FD | 	call	#__system___float_tointeger
0d388     28 4E 05 F1 | 	add	fp, #40
0d38c     A7 FA 61 FC | 	wrlong	result1, fp
0d390     1C 4E 85 F1 | 	sub	fp, #28
0d394     A7 20 02 FB | 	rdlong	local02, fp
0d398     10 23 02 F6 | 	mov	local03, local02
0d39c     01 22 66 F0 | 	shl	local03, #1
0d3a0     10 23 02 F1 | 	add	local03, local02
0d3a4     03 22 66 F0 | 	shl	local03, #3
0d3a8     34 00 00 FF 
0d3ac     38 E5 05 F1 | 	add	objptr, ##26936
0d3b0     F2 22 02 F1 | 	add	local03, objptr
0d3b4     0C 4E 85 F1 | 	sub	fp, #12
0d3b8     06 22 06 F1 | 	add	local03, #6
0d3bc     11 FB 51 FC | 	wrword	result1, local03
0d3c0     34 00 00 FF 
0d3c4     38 E5 85 F1 | 	sub	objptr, ##26936
0d3c8                 | LR__1060
0d3c8                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0d3c8     4C 4E 05 F1 | 	add	fp, #76
0d3cc     A7 12 02 FB | 	rdlong	arg01, fp
0d3d0     4C 4E 85 F1 | 	sub	fp, #76
0d3d4     00 C0 5F FF 
0d3d8     00 14 06 F6 | 	mov	arg02, ##-1082130432
0d3dc     01 16 06 F6 | 	mov	arg03, #1
0d3e0     08 47 B1 FD | 	call	#__system___float_cmp
0d3e4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d3e8     24 00 90 CD |  if_b	jmp	#LR__1061
0d3ec     4C 4E 05 F1 | 	add	fp, #76
0d3f0     A7 12 02 FB | 	rdlong	arg01, fp
0d3f4     4C 4E 85 F1 | 	sub	fp, #76
0d3f8     00 C0 1F FF 
0d3fc     00 14 06 F6 | 	mov	arg02, ##1065353216
0d400     01 16 66 F6 | 	neg	arg03, #1
0d404     E4 46 B1 FD | 	call	#__system___float_cmp
0d408     01 FA 55 F2 | 	cmps	result1, #1 wc
0d40c     44 00 90 CD |  if_b	jmp	#LR__1062
0d410                 | LR__1061
0d410     0C 4E 05 F1 | 	add	fp, #12
0d414     A7 20 02 FB | 	rdlong	local02, fp
0d418     10 23 02 F6 | 	mov	local03, local02
0d41c     01 22 66 F0 | 	shl	local03, #1
0d420     10 23 02 F1 | 	add	local03, local02
0d424     03 22 66 F0 | 	shl	local03, #3
0d428     34 00 00 FF 
0d42c     38 E5 05 F1 | 	add	objptr, ##26936
0d430     F2 22 02 F1 | 	add	local03, objptr
0d434     10 22 06 F1 | 	add	local03, #16
0d438     11 27 02 FB | 	rdlong	local05, local03
0d43c     5C 4E 05 F1 | 	add	fp, #92
0d440     A7 26 62 FC | 	wrlong	local05, fp
0d444     68 4E 85 F1 | 	sub	fp, #104
0d448     34 00 00 FF 
0d44c     38 E5 85 F1 | 	sub	objptr, ##26936
0d450     48 00 90 FD | 	jmp	#LR__1063
0d454                 | LR__1062
0d454     4C 4E 05 F1 | 	add	fp, #76
0d458     A7 26 02 FB | 	rdlong	local05, fp
0d45c     1C 4E 05 F1 | 	add	fp, #28
0d460     A7 26 62 FC | 	wrlong	local05, fp
0d464     5C 4E 85 F1 | 	sub	fp, #92
0d468     A7 20 02 FB | 	rdlong	local02, fp
0d46c     10 23 02 F6 | 	mov	local03, local02
0d470     01 22 66 F0 | 	shl	local03, #1
0d474     10 23 02 F1 | 	add	local03, local02
0d478     03 22 66 F0 | 	shl	local03, #3
0d47c     34 00 00 FF 
0d480     38 E5 05 F1 | 	add	objptr, ##26936
0d484     F2 22 02 F1 | 	add	local03, objptr
0d488     0C 4E 85 F1 | 	sub	fp, #12
0d48c     10 22 06 F1 | 	add	local03, #16
0d490     11 27 62 FC | 	wrlong	local05, local03
0d494     34 00 00 FF 
0d498     38 E5 85 F1 | 	sub	objptr, ##26936
0d49c                 | LR__1063
0d49c                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0d49c     50 4E 05 F1 | 	add	fp, #80
0d4a0     A7 12 02 FB | 	rdlong	arg01, fp
0d4a4     50 4E 85 F1 | 	sub	fp, #80
0d4a8     00 14 06 F6 | 	mov	arg02, #0
0d4ac     01 16 06 F6 | 	mov	arg03, #1
0d4b0     38 46 B1 FD | 	call	#__system___float_cmp
0d4b4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d4b8     24 00 90 CD |  if_b	jmp	#LR__1064
0d4bc     50 4E 05 F1 | 	add	fp, #80
0d4c0     A7 12 02 FB | 	rdlong	arg01, fp
0d4c4     50 4E 85 F1 | 	sub	fp, #80
0d4c8     80 BF 21 FF 
0d4cc     00 14 06 F6 | 	mov	arg02, ##1132396544
0d4d0     01 16 66 F6 | 	neg	arg03, #1
0d4d4     14 46 B1 FD | 	call	#__system___float_cmp
0d4d8     01 FA 55 F2 | 	cmps	result1, #1 wc
0d4dc     44 00 90 CD |  if_b	jmp	#LR__1065
0d4e0                 | LR__1064
0d4e0     0C 4E 05 F1 | 	add	fp, #12
0d4e4     A7 22 02 FB | 	rdlong	local03, fp
0d4e8     11 27 02 F6 | 	mov	local05, local03
0d4ec     01 26 66 F0 | 	shl	local05, #1
0d4f0     11 27 02 F1 | 	add	local05, local03
0d4f4     03 26 66 F0 | 	shl	local05, #3
0d4f8     34 00 00 FF 
0d4fc     38 E5 05 F1 | 	add	objptr, ##26936
0d500     F2 26 02 F1 | 	add	local05, objptr
0d504     14 26 06 F1 | 	add	local05, #20
0d508     13 25 E2 FA | 	rdword	local04, local05
0d50c     20 4E 05 F1 | 	add	fp, #32
0d510     A7 24 62 FC | 	wrlong	local04, fp
0d514     2C 4E 85 F1 | 	sub	fp, #44
0d518     34 00 00 FF 
0d51c     38 E5 85 F1 | 	sub	objptr, ##26936
0d520     54 00 90 FD | 	jmp	#LR__1066
0d524                 | LR__1065
0d524     50 4E 05 F1 | 	add	fp, #80
0d528     A7 12 02 FB | 	rdlong	arg01, fp
0d52c     50 4E 85 F1 | 	sub	fp, #80
0d530     01 14 06 F6 | 	mov	arg02, #1
0d534     48 46 B1 FD | 	call	#__system___float_tointeger
0d538     2C 4E 05 F1 | 	add	fp, #44
0d53c     A7 FA 61 FC | 	wrlong	result1, fp
0d540     20 4E 85 F1 | 	sub	fp, #32
0d544     A7 20 02 FB | 	rdlong	local02, fp
0d548     10 23 02 F6 | 	mov	local03, local02
0d54c     01 22 66 F0 | 	shl	local03, #1
0d550     10 23 02 F1 | 	add	local03, local02
0d554     03 22 66 F0 | 	shl	local03, #3
0d558     34 00 00 FF 
0d55c     38 E5 05 F1 | 	add	objptr, ##26936
0d560     F2 22 02 F1 | 	add	local03, objptr
0d564     0C 4E 85 F1 | 	sub	fp, #12
0d568     14 22 06 F1 | 	add	local03, #20
0d56c     11 FB 51 FC | 	wrword	result1, local03
0d570     34 00 00 FF 
0d574     38 E5 85 F1 | 	sub	objptr, ##26936
0d578                 | LR__1066
0d578     60 4E 05 F1 | 	add	fp, #96
0d57c     A7 12 02 FB | 	rdlong	arg01, fp
0d580     10 4E 05 F1 | 	add	fp, #16
0d584     A7 14 02 FB | 	rdlong	arg02, fp
0d588     70 4E 85 F1 | 	sub	fp, #112
0d58c     2C 43 B1 FD | 	call	#__system___float_div
0d590     FD 12 02 F6 | 	mov	arg01, result1
0d594     01 14 06 F6 | 	mov	arg02, #1
0d598     E4 45 B1 FD | 	call	#__system___float_tointeger
0d59c     FD 24 02 F6 | 	mov	local04, result1
0d5a0     14 4E 05 F1 | 	add	fp, #20
0d5a4     A7 24 62 FC | 	wrlong	local04, fp
0d5a8     54 4E 05 F1 | 	add	fp, #84
0d5ac     A7 14 02 FB | 	rdlong	arg02, fp
0d5b0     68 4E 85 F1 | 	sub	fp, #104
0d5b4     00 00 23 FF 
0d5b8     00 12 06 F6 | 	mov	arg01, ##1174405120
0d5bc     F8 40 B1 FD | 	call	#__system___float_mul
0d5c0     FD 12 02 F6 | 	mov	arg01, result1
0d5c4     01 14 06 F6 | 	mov	arg02, #1
0d5c8     B4 45 B1 FD | 	call	#__system___float_tointeger
0d5cc     0D 24 C6 F9 | 	decod	local04, #13
0d5d0     FD 24 02 F1 | 	add	local04, result1
0d5d4     18 4E 05 F1 | 	add	fp, #24
0d5d8     A7 24 62 FC | 	wrlong	local04, fp
0d5dc     54 4E 05 F1 | 	add	fp, #84
0d5e0     A7 14 02 FB | 	rdlong	arg02, fp
0d5e4     6C 4E 85 F1 | 	sub	fp, #108
0d5e8     00 3D 22 FF 
0d5ec     00 12 06 F6 | 	mov	arg01, ##1148846080
0d5f0     C4 40 B1 FD | 	call	#__system___float_mul
0d5f4     FD 12 02 F6 | 	mov	arg01, result1
0d5f8     01 14 06 F6 | 	mov	arg02, #1
0d5fc     80 45 B1 FD | 	call	#__system___float_tointeger
0d600     1C 4E 05 F1 | 	add	fp, #28
0d604     A7 FA 61 FC | 	wrlong	result1, fp
0d608     57 00 00 FF 
0d60c     10 E4 05 F1 | 	add	objptr, ##44560
0d610     F2 24 02 FB | 	rdlong	local04, objptr
0d614     57 00 00 FF 
0d618     10 E4 85 F1 | 	sub	objptr, ##44560
0d61c     10 4E 85 F1 | 	sub	fp, #16
0d620     A7 20 02 FB | 	rdlong	local02, fp
0d624     06 20 66 F0 | 	shl	local02, #6
0d628     10 25 02 F1 | 	add	local04, local02
0d62c     04 4E 85 F1 | 	sub	fp, #4
0d630     A7 24 62 FC | 	wrlong	local04, fp
0d634     5C 4E 05 F1 | 	add	fp, #92
0d638     A7 12 02 FB | 	rdlong	arg01, fp
0d63c     64 4E 85 F1 | 	sub	fp, #100
0d640     72 3F 20 FF 
0d644     EA 14 06 F6 | 	mov	arg02, ##1082057962
0d648     6C 40 B1 FD | 	call	#__system___float_mul
0d64c     FD 12 02 F6 | 	mov	arg01, result1
0d650     01 14 06 F6 | 	mov	arg02, #1
0d654     28 45 B1 FD | 	call	#__system___float_tointeger
0d658     10 4E 05 F1 | 	add	fp, #16
0d65c     A7 FA 61 FC | 	wrlong	result1, fp
0d660                 | ' 
0d660                 | ' speed=round(speed_coeff/slen)
0d660                 | ' ipan=8192+round(8192*pan)
0d660                 | ' ivol=round(1000.0*vol)
0d660                 | ' base2=base+64*channel
0d660                 | ' skip=round(freq*3.9827219) 
0d660                 | ' if wave <8 then 
0d660     10 4E 05 F1 | 	add	fp, #16
0d664     A7 24 02 FB | 	rdlong	local04, fp
0d668     20 4E 85 F1 | 	sub	fp, #32
0d66c     08 24 56 F2 | 	cmps	local04, #8 wc
0d670     40 00 90 3D |  if_ae	jmp	#LR__1067
0d674     08 4E 05 F1 | 	add	fp, #8
0d678     A7 12 02 FB | 	rdlong	arg01, fp
0d67c     08 12 06 F1 | 	add	arg01, #8
0d680     18 4E 05 F1 | 	add	fp, #24
0d684     A7 14 02 FB | 	rdlong	arg02, fp
0d688     20 4E 85 F1 | 	sub	fp, #32
0d68c     0B 14 66 F0 | 	shl	arg02, #11
0d690     0C 00 00 FF 
0d694     D8 E4 05 F1 | 	add	objptr, ##6360
0d698     F2 14 02 F1 | 	add	arg02, objptr
0d69c     0C 00 00 FF 
0d6a0     D8 E4 85 F1 | 	sub	objptr, ##6360
0d6a4     00 00 60 FF 
0d6a8     00 14 06 F1 | 	add	arg02, ##-1073741824
0d6ac     09 15 62 FC | 	wrlong	arg02, arg01
0d6b0     18 00 90 FD | 	jmp	#LR__1068
0d6b4                 | LR__1067
0d6b4     08 4E 05 F1 | 	add	fp, #8
0d6b8     A7 12 02 FB | 	rdlong	arg01, fp
0d6bc     08 4E 85 F1 | 	sub	fp, #8
0d6c0     08 12 06 F1 | 	add	arg01, #8
0d6c4     00 00 E4 FF 
0d6c8     09 01 68 FC | 	wrlong	##-939524096, arg01
0d6cc                 | LR__1068
0d6cc     08 4E 05 F1 | 	add	fp, #8
0d6d0     A7 12 02 FB | 	rdlong	arg01, fp
0d6d4     10 12 06 F1 | 	add	arg01, #16
0d6d8     04 00 80 FF 
0d6dc     09 01 68 FC | 	wrlong	##2048, arg01
0d6e0     A7 12 02 FB | 	rdlong	arg01, fp
0d6e4     0C 12 06 F1 | 	add	arg01, #12
0d6e8     09 01 68 FC | 	wrlong	#0, arg01
0d6ec     A7 12 02 FB | 	rdlong	arg01, fp
0d6f0     14 12 06 F1 | 	add	arg01, #20
0d6f4     14 4E 05 F1 | 	add	fp, #20
0d6f8     A7 14 02 FB | 	rdlong	arg02, fp
0d6fc     09 15 52 FC | 	wrword	arg02, arg01
0d700     14 4E 85 F1 | 	sub	fp, #20
0d704     A7 12 02 FB | 	rdlong	arg01, fp
0d708     16 12 06 F1 | 	add	arg01, #22
0d70c     10 4E 05 F1 | 	add	fp, #16
0d710     A7 14 02 FB | 	rdlong	arg02, fp
0d714     09 15 52 FC | 	wrword	arg02, arg01
0d718                 | '   
0d718                 | ' lpoke base2+16,2048
0d718                 | ' lpoke base2+12,0
0d718                 | ' dpoke base2+20,ivol 
0d718                 | ' dpoke base2+22,ipan 
0d718                 | ' if wave<8 then
0d718     08 4E 05 F1 | 	add	fp, #8
0d71c     A7 24 02 FB | 	rdlong	local04, fp
0d720     20 4E 85 F1 | 	sub	fp, #32
0d724     08 24 56 F2 | 	cmps	local04, #8 wc
0d728     2C 00 90 3D |  if_ae	jmp	#LR__1069
0d72c     08 4E 05 F1 | 	add	fp, #8
0d730     A7 12 02 FB | 	rdlong	arg01, fp
0d734     18 12 06 F1 | 	add	arg01, #24
0d738     09 29 58 FC | 	wrword	#20, arg01
0d73c     A7 12 02 FB | 	rdlong	arg01, fp
0d740     1A 12 06 F1 | 	add	arg01, #26
0d744     08 4E 05 F1 | 	add	fp, #8
0d748     A7 14 02 FB | 	rdlong	arg02, fp
0d74c     10 4E 85 F1 | 	sub	fp, #16
0d750     09 15 52 FC | 	wrword	arg02, arg01
0d754     48 00 90 FD | 	jmp	#LR__1070
0d758                 | LR__1069
0d758     08 4E 05 F1 | 	add	fp, #8
0d75c     A7 24 02 FB | 	rdlong	local04, fp
0d760     18 24 06 F1 | 	add	local04, #24
0d764     5C 4E 05 F1 | 	add	fp, #92
0d768     A7 14 02 FB | 	rdlong	arg02, fp
0d76c     64 4E 85 F1 | 	sub	fp, #100
0d770     58 D0 24 FF 
0d774     B0 13 06 F6 | 	mov	arg01, ##1235268016
0d778     40 41 B1 FD | 	call	#__system___float_div
0d77c     FD 12 02 F6 | 	mov	arg01, result1
0d780     01 14 06 F6 | 	mov	arg02, #1
0d784     F8 43 B1 FD | 	call	#__system___float_tointeger
0d788     12 FB 51 FC | 	wrword	result1, local04
0d78c     08 4E 05 F1 | 	add	fp, #8
0d790     A7 12 02 FB | 	rdlong	arg01, fp
0d794     08 4E 85 F1 | 	sub	fp, #8
0d798     1A 12 06 F1 | 	add	arg01, #26
0d79c     09 01 5A FC | 	wrword	#256, arg01
0d7a0                 | LR__1070
0d7a0     08 4E 05 F1 | 	add	fp, #8
0d7a4     A7 12 02 FB | 	rdlong	arg01, fp
0d7a8     20 12 06 F1 | 	add	arg01, #32
0d7ac     09 01 68 FC | 	wrlong	#0, arg01
0d7b0                 | ' 'dpoke base2+28,$4000_0000
0d7b0                 | ' lpoke base2+32,0 
0d7b0                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0d7b0     1C 4E 05 F1 | 	add	fp, #28
0d7b4     A7 24 02 FB | 	rdlong	local04, fp
0d7b8     24 4E 85 F1 | 	sub	fp, #36
0d7bc     08 24 0E F2 | 	cmp	local04, #8 wz
0d7c0     18 00 90 5D |  if_ne	jmp	#LR__1071
0d7c4     08 4E 05 F1 | 	add	fp, #8
0d7c8     A7 12 02 FB | 	rdlong	arg01, fp
0d7cc     08 4E 85 F1 | 	sub	fp, #8
0d7d0     24 12 06 F1 | 	add	arg01, #36
0d7d4     09 01 68 FC | 	wrlong	#0, arg01
0d7d8     34 00 90 FD | 	jmp	#LR__1072
0d7dc                 | LR__1071
0d7dc     08 4E 05 F1 | 	add	fp, #8
0d7e0     A7 12 02 FB | 	rdlong	arg01, fp
0d7e4     24 12 06 F1 | 	add	arg01, #36
0d7e8     1C 4E 05 F1 | 	add	fp, #28
0d7ec     A7 14 02 FB | 	rdlong	arg02, fp
0d7f0     24 4E 85 F1 | 	sub	fp, #36
0d7f4     09 14 66 F0 | 	shl	arg02, #9
0d7f8     2C 00 00 FF 
0d7fc     D8 E4 05 F1 | 	add	objptr, ##22744
0d800     F2 14 02 F1 | 	add	arg02, objptr
0d804     2C 00 00 FF 
0d808     D8 E4 85 F1 | 	sub	objptr, ##22744
0d80c     09 15 62 FC | 	wrlong	arg02, arg01
0d810                 | LR__1072
0d810     08 4E 05 F1 | 	add	fp, #8
0d814     A7 12 02 FB | 	rdlong	arg01, fp
0d818     28 12 06 F1 | 	add	arg01, #40
0d81c     0C 4E 05 F1 | 	add	fp, #12
0d820     A7 14 02 FB | 	rdlong	arg02, fp
0d824     09 15 62 FC | 	wrlong	arg02, arg01
0d828     0C 4E 85 F1 | 	sub	fp, #12
0d82c     A7 12 02 FB | 	rdlong	arg01, fp
0d830     2C 12 06 F1 | 	add	arg01, #44
0d834     24 4E 05 F1 | 	add	fp, #36
0d838     A7 14 02 FB | 	rdlong	arg02, fp
0d83c     09 15 62 FC | 	wrlong	arg02, arg01
0d840                 | ' lpoke base2+40,speed' speed
0d840                 | ' lpoke base2+44,sus 'len
0d840                 | ' 
0d840                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0d840     04 4E 85 F1 | 	sub	fp, #4
0d844     A7 24 02 FB | 	rdlong	local04, fp
0d848     28 4E 85 F1 | 	sub	fp, #40
0d84c     01 24 56 F2 | 	cmps	local04, #1 wc
0d850     28 4E 05 31 |  if_ae	add	fp, #40
0d854     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0d858     28 4E 85 31 |  if_ae	sub	fp, #40
0d85c     CC 15 B1 3D |  if_ae	call	#__system___waitms
0d860     A7 F0 03 F6 | 	mov	ptra, fp
0d864     B2 00 A0 FD | 	call	#popregs_
0d868                 | _do_play_ret
0d868     2D 00 64 FD | 	ret
0d86c                 | 
0d86c                 | ' 
0d86c                 | ' sub do_release
0d86c                 | _do_release
0d86c     00 4A 05 F6 | 	mov	COUNT_, #0
0d870     A8 00 A0 FD | 	call	#pushregs_
0d874     10 F0 07 F1 | 	add	ptra, #16
0d878     E4 CF BF FD | 	call	#_pop
0d87c     FF 14 02 F6 | 	mov	arg02, result3
0d880     A7 FA 61 FC | 	wrlong	result1, fp
0d884     04 4E 05 F1 | 	add	fp, #4
0d888     A7 FC 61 FC | 	wrlong	result2, fp
0d88c     04 4E 05 F1 | 	add	fp, #4
0d890     A7 14 62 FC | 	wrlong	arg02, fp
0d894     08 4E 85 F1 | 	sub	fp, #8
0d898     A7 12 02 F6 | 	mov	arg01, fp
0d89c     54 5C B0 FD | 	call	#_converttoint
0d8a0     0C 4E 05 F1 | 	add	fp, #12
0d8a4     A7 FA 61 FC | 	wrlong	result1, fp
0d8a8                 | ' t1=pop()
0d8a8                 | ' channel=converttoint(t1)
0d8a8                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0d8a8     0C 4E 85 F1 | 	sub	fp, #12
0d8ac     00 FA 55 F2 | 	cmps	result1, #0 wc
0d8b0     44 00 90 CD |  if_b	jmp	#LR__1080
0d8b4     0C 4E 05 F1 | 	add	fp, #12
0d8b8     A7 14 02 FB | 	rdlong	arg02, fp
0d8bc     0C 4E 85 F1 | 	sub	fp, #12
0d8c0     08 14 56 F2 | 	cmps	arg02, #8 wc
0d8c4     30 00 90 3D |  if_ae	jmp	#LR__1080
0d8c8     57 00 00 FF 
0d8cc     10 E4 05 F1 | 	add	objptr, ##44560
0d8d0     F2 12 02 FB | 	rdlong	arg01, objptr
0d8d4     57 00 00 FF 
0d8d8     10 E4 85 F1 | 	sub	objptr, ##44560
0d8dc     0C 4E 05 F1 | 	add	fp, #12
0d8e0     A7 14 02 FB | 	rdlong	arg02, fp
0d8e4     0C 4E 85 F1 | 	sub	fp, #12
0d8e8     06 14 66 F0 | 	shl	arg02, #6
0d8ec     0A 13 02 F1 | 	add	arg01, arg02
0d8f0     2C 12 06 F1 | 	add	arg01, #44
0d8f4     09 FF 69 FC | 	wrlong	#255, arg01
0d8f8                 | LR__1080
0d8f8     A7 F0 03 F6 | 	mov	ptra, fp
0d8fc     B2 00 A0 FD | 	call	#popregs_
0d900                 | _do_release_ret
0d900     2D 00 64 FD | 	ret
0d904                 | 
0d904                 | ' 
0d904                 | ' 
0d904                 | ' sub do_defsnd
0d904                 | _do_defsnd
0d904     05 4A 05 F6 | 	mov	COUNT_, #5
0d908     A8 00 A0 FD | 	call	#pushregs_
0d90c     88 F0 07 F1 | 	add	ptra, #136
0d910     6A 00 00 FF 
0d914     80 E4 05 F1 | 	add	objptr, ##54400
0d918     F2 1A 02 FB | 	rdlong	arg05, objptr
0d91c     0D 19 02 F6 | 	mov	arg04, arg05
0d920     01 18 66 F0 | 	shl	arg04, #1
0d924     0D 19 02 F1 | 	add	arg04, arg05
0d928     02 18 66 F0 | 	shl	arg04, #2
0d92c     03 00 00 FF 
0d930     04 E4 85 F1 | 	sub	objptr, ##1540
0d934     F2 18 02 F1 | 	add	arg04, objptr
0d938     0C 1B 02 FB | 	rdlong	arg05, arg04
0d93c     A7 1A 62 FC | 	wrlong	arg05, fp
0d940                 | ' 
0d940                 | ' numpar=compiledline(lineptr_e).result.uresult
0d940                 | ' 
0d940                 | ' 
0d940                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0d940                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0d940                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0d940                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0d940                 | ' 
0d940                 | ' if numpar<2 then return
0d940     02 1A 56 F2 | 	cmps	arg05, #2 wc
0d944     67 00 00 FF 
0d948     7C E4 85 F1 | 	sub	objptr, ##52860
0d94c     A0 09 90 CD |  if_b	jmp	#LR__1118
0d950                 | ' 
0d950                 | '   
0d950                 | ' if numpar=2 then
0d950     A7 1A 02 FB | 	rdlong	arg05, fp
0d954     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d958     0C 04 90 5D |  if_ne	jmp	#LR__1101
0d95c     00 CF BF FD | 	call	#_pop
0d960     FF 1A 02 F6 | 	mov	arg05, result3
0d964     2C 4E 05 F1 | 	add	fp, #44
0d968     A7 FA 61 FC | 	wrlong	result1, fp
0d96c     04 4E 05 F1 | 	add	fp, #4
0d970     A7 FC 61 FC | 	wrlong	result2, fp
0d974     04 4E 05 F1 | 	add	fp, #4
0d978     A7 1A 62 FC | 	wrlong	arg05, fp
0d97c                 | '   t1=pop()
0d97c                 | '   if t1.result_type=result_string2 then 
0d97c     34 4E 85 F1 | 	sub	fp, #52
0d980     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d984     20 00 90 5D |  if_ne	jmp	#LR__1090
0d988     2C 4E 05 F1 | 	add	fp, #44
0d98c     A7 12 02 FB | 	rdlong	arg01, fp
0d990     2C 4E 85 F1 | 	sub	fp, #44
0d994     38 13 B0 FD | 	call	#_convertstring
0d998     38 4E 05 F1 | 	add	fp, #56
0d99c     A7 FA 61 FC | 	wrlong	result1, fp
0d9a0     38 4E 85 F1 | 	sub	fp, #56
0d9a4     58 00 90 FD | 	jmp	#LR__1093
0d9a8                 | LR__1090
0d9a8     34 4E 05 F1 | 	add	fp, #52
0d9ac     A7 1A 02 FB | 	rdlong	arg05, fp
0d9b0     34 4E 85 F1 | 	sub	fp, #52
0d9b4     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0d9b8     18 00 90 5D |  if_ne	jmp	#LR__1091
0d9bc     2C 4E 05 F1 | 	add	fp, #44
0d9c0     A7 1A 02 FB | 	rdlong	arg05, fp
0d9c4     0C 4E 05 F1 | 	add	fp, #12
0d9c8     A7 1A 62 FC | 	wrlong	arg05, fp
0d9cc     38 4E 85 F1 | 	sub	fp, #56
0d9d0     2C 00 90 FD | 	jmp	#LR__1092
0d9d4                 | LR__1091
0d9d4     73 01 00 FF 
0d9d8     5D 1B 06 F6 | 	mov	arg05, ##@LR__5141
0d9dc     38 4E 05 F1 | 	add	fp, #56
0d9e0     A7 1A 62 FC | 	wrlong	arg05, fp
0d9e4     0C 4E 85 F1 | 	sub	fp, #12
0d9e8     A7 12 02 F6 | 	mov	arg01, fp
0d9ec     2C 4E 85 F1 | 	sub	fp, #44
0d9f0     00 5B B0 FD | 	call	#_converttoint
0d9f4     14 4E 05 F1 | 	add	fp, #20
0d9f8     A7 FA 61 FC | 	wrlong	result1, fp
0d9fc     14 4E 85 F1 | 	sub	fp, #20
0da00                 | LR__1092
0da00                 | LR__1093
0da00                 | ' 
0da00                 | '     
0da00                 | '   if s<>"" then 
0da00     38 4E 05 F1 | 	add	fp, #56
0da04     A7 12 02 FB | 	rdlong	arg01, fp
0da08     38 4E 85 F1 | 	sub	fp, #56
0da0c     73 01 00 FF 
0da10     5E 15 06 F6 | 	mov	arg02, ##@LR__5142
0da14     48 11 B1 FD | 	call	#__system___string_cmp
0da18     00 FA 0D F2 | 	cmp	result1, #0 wz
0da1c     88 01 90 AD |  if_e	jmp	#LR__1095
0da20     3C CE BF FD | 	call	#_pop
0da24     FF 1A 02 F6 | 	mov	arg05, result3
0da28     2C 4E 05 F1 | 	add	fp, #44
0da2c     A7 FA 61 FC | 	wrlong	result1, fp
0da30     04 4E 05 F1 | 	add	fp, #4
0da34     A7 FC 61 FC | 	wrlong	result2, fp
0da38     04 4E 05 F1 | 	add	fp, #4
0da3c     A7 1A 62 FC | 	wrlong	arg05, fp
0da40     08 4E 85 F1 | 	sub	fp, #8
0da44     A7 12 02 F6 | 	mov	arg01, fp
0da48     2C 4E 85 F1 | 	sub	fp, #44
0da4c     A4 5A B0 FD | 	call	#_converttoint
0da50     10 4E 05 F1 | 	add	fp, #16
0da54     A7 FA 61 FC | 	wrlong	result1, fp
0da58     10 4E 85 F1 | 	sub	fp, #16
0da5c                 | '     t1=pop()
0da5c                 | '     channel=converttoint(t1) 
0da5c                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0da5c     09 12 06 F6 | 	mov	arg01, #9
0da60     9C 60 B1 FD | 	call	#__system__close
0da64     09 1E 06 F6 | 	mov	local01, #9
0da68     73 01 00 FF 
0da6c     5F 13 06 F6 | 	mov	arg01, ##@LR__5143
0da70     38 4E 05 F1 | 	add	fp, #56
0da74     A7 14 02 FB | 	rdlong	arg02, fp
0da78     38 4E 85 F1 | 	sub	fp, #56
0da7c     14 11 B1 FD | 	call	#__system___string_concat
0da80     FD 14 02 F6 | 	mov	arg02, result1
0da84     0F 13 02 F6 | 	mov	arg01, local01
0da88     00 16 06 F6 | 	mov	arg03, #0
0da8c     AC 1C B1 FD | 	call	#__system___basic_open_string
0da90     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0da94     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0da98     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0da9c     7A 00 00 FF 
0daa0     30 E4 05 F1 | 	add	objptr, ##62512
0daa4     F2 FA 61 FC | 	wrlong	result1, objptr
0daa8                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0daa8     7A 00 00 FF 
0daac     30 E4 85 F1 | 	sub	objptr, ##62512
0dab0     B0 00 90 AD |  if_e	jmp	#LR__1094
0dab4     00 12 06 F6 | 	mov	arg01, #0
0dab8     14 6A B1 FD | 	call	#__system___getiolock_0484
0dabc     FD 12 02 F6 | 	mov	arg01, result1
0dac0     74 10 B1 FD | 	call	#__system___lockmem
0dac4     73 01 00 FF 
0dac8     6C 15 06 F6 | 	mov	arg02, ##@LR__5144
0dacc     00 12 06 F6 | 	mov	arg01, #0
0dad0     00 16 06 F6 | 	mov	arg03, #0
0dad4     68 1D B1 FD | 	call	#__system___basic_print_string
0dad8     7A 00 00 FF 
0dadc     30 E4 05 F1 | 	add	objptr, ##62512
0dae0     F2 14 02 FB | 	rdlong	arg02, objptr
0dae4     7A 00 00 FF 
0dae8     30 E4 85 F1 | 	sub	objptr, ##62512
0daec     00 12 06 F6 | 	mov	arg01, #0
0daf0     00 16 06 F6 | 	mov	arg03, #0
0daf4     0A 18 06 F6 | 	mov	arg04, #10
0daf8     88 1D B1 FD | 	call	#__system___basic_print_integer
0dafc     73 01 00 FF 
0db00     7A 15 06 F6 | 	mov	arg02, ##@LR__5145
0db04     00 12 06 F6 | 	mov	arg01, #0
0db08     00 16 06 F6 | 	mov	arg03, #0
0db0c     30 1D B1 FD | 	call	#__system___basic_print_string
0db10     00 1E 06 F6 | 	mov	local01, #0
0db14     7A 00 00 FF 
0db18     30 E4 05 F1 | 	add	objptr, ##62512
0db1c     F2 12 02 FB | 	rdlong	arg01, objptr
0db20     7A 00 00 FF 
0db24     30 E4 85 F1 | 	sub	objptr, ##62512
0db28     A0 36 B1 FD | 	call	#__system___strerror
0db2c     FD 14 02 F6 | 	mov	arg02, result1
0db30     0F 13 02 F6 | 	mov	arg01, local01
0db34     00 16 06 F6 | 	mov	arg03, #0
0db38     04 1D B1 FD | 	call	#__system___basic_print_string
0db3c     00 12 06 F6 | 	mov	arg01, #0
0db40     0A 14 06 F6 | 	mov	arg02, #10
0db44     00 16 06 F6 | 	mov	arg03, #0
0db48     9C 1C B1 FD | 	call	#__system___basic_print_char
0db4c     00 12 06 F6 | 	mov	arg01, #0
0db50     7C 69 B1 FD | 	call	#__system___getiolock_0484
0db54     FD 00 68 FC | 	wrlong	#0, result1
0db58     09 12 06 F6 | 	mov	arg01, #9
0db5c     A0 5F B1 FD | 	call	#__system__close
0db60     8C 07 90 FD | 	jmp	#LR__1118
0db64                 | LR__1094
0db64                 | '     get #9,17,samplebuf(channel,0),1024
0db64     10 4E 05 F1 | 	add	fp, #16
0db68     A7 16 02 FB | 	rdlong	arg03, fp
0db6c     10 4E 85 F1 | 	sub	fp, #16
0db70     0B 16 66 F0 | 	shl	arg03, #11
0db74     0C 00 00 FF 
0db78     D8 E4 05 F1 | 	add	objptr, ##6360
0db7c     F2 16 02 F1 | 	add	arg03, objptr
0db80     09 12 06 F6 | 	mov	arg01, #9
0db84     11 14 06 F6 | 	mov	arg02, #17
0db88     0A 18 C6 F9 | 	decod	arg04, #10
0db8c     02 1A 06 F6 | 	mov	arg05, #2
0db90     0C 00 00 FF 
0db94     D8 E4 85 F1 | 	sub	objptr, ##6360
0db98     B4 1D B1 FD | 	call	#__system___basic_get
0db9c                 | '     close #9
0db9c     09 12 06 F6 | 	mov	arg01, #9
0dba0     5C 5F B1 FD | 	call	#__system__close
0dba4                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0dba4                 | '     return
0dba4     48 07 90 FD | 	jmp	#LR__1118
0dba8                 | LR__1095
0dba8                 | '     if wptr < ($80000 - 2048) then 
0dba8     14 4E 05 F1 | 	add	fp, #20
0dbac     A7 1E 02 FB | 	rdlong	local01, fp
0dbb0     14 4E 85 F1 | 	sub	fp, #20
0dbb4     FC 03 00 FF 
0dbb8     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0dbbc     80 00 90 3D |  if_ae	jmp	#LR__1098
0dbc0                 | '       for i=0 to 1023: samplebuf(channel,i)=dpeek(wptr+2*i): next i
0dbc0     04 4E 05 F1 | 	add	fp, #4
0dbc4     A7 00 68 FC | 	wrlong	#0, fp
0dbc8     04 4E 85 F1 | 	sub	fp, #4
0dbcc     0C 00 00 FF 
0dbd0     D8 E4 05 F1 | 	add	objptr, ##6360
0dbd4     97 2E 48 FB | 	callpa	#(@LR__1097-@LR__1096)>>2,fcache_load_ptr_
0dbd8                 | LR__1096
0dbd8     10 4E 05 F1 | 	add	fp, #16
0dbdc     A7 1E 02 FB | 	rdlong	local01, fp
0dbe0     0B 1E 66 F0 | 	shl	local01, #11
0dbe4     F2 1E 02 F1 | 	add	local01, objptr
0dbe8     0C 4E 85 F1 | 	sub	fp, #12
0dbec     A7 1A 02 FB | 	rdlong	arg05, fp
0dbf0     0D 19 02 F6 | 	mov	arg04, arg05
0dbf4     01 18 66 F0 | 	shl	arg04, #1
0dbf8     0F 19 02 F1 | 	add	arg04, local01
0dbfc     10 4E 05 F1 | 	add	fp, #16
0dc00     A7 12 02 FB | 	rdlong	arg01, fp
0dc04     01 1A 66 F0 | 	shl	arg05, #1
0dc08     0D 13 02 F1 | 	add	arg01, arg05
0dc0c     09 FB E1 FA | 	rdword	result1, arg01
0dc10     0C FB 51 FC | 	wrword	result1, arg04
0dc14     10 4E 85 F1 | 	sub	fp, #16
0dc18     A7 1E 02 FB | 	rdlong	local01, fp
0dc1c     01 1E 06 F1 | 	add	local01, #1
0dc20     A7 1E 62 FC | 	wrlong	local01, fp
0dc24     04 4E 85 F1 | 	sub	fp, #4
0dc28     02 00 00 FF 
0dc2c     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0dc30     A4 FF 9F CD |  if_b	jmp	#LR__1096
0dc34                 | LR__1097
0dc34     0C 00 00 FF 
0dc38     D8 E4 85 F1 | 	sub	objptr, ##6360
0dc3c     B0 06 90 FD | 	jmp	#LR__1118
0dc40                 | LR__1098
0dc40                 | '       for i=0 to 1023 : samplebuf(channel,i)=psdpeek(wptr+2*i) : next i
0dc40     04 4E 05 F1 | 	add	fp, #4
0dc44     A7 00 68 FC | 	wrlong	#0, fp
0dc48     04 4E 85 F1 | 	sub	fp, #4
0dc4c                 | LR__1099
0dc4c     10 4E 05 F1 | 	add	fp, #16
0dc50     A7 1A 02 FB | 	rdlong	arg05, fp
0dc54     0B 1A 66 F0 | 	shl	arg05, #11
0dc58     0C 00 00 FF 
0dc5c     D8 E4 05 F1 | 	add	objptr, ##6360
0dc60     F2 1A 02 F1 | 	add	arg05, objptr
0dc64     0C 4E 85 F1 | 	sub	fp, #12
0dc68     A7 18 02 FB | 	rdlong	arg04, fp
0dc6c     0C 21 02 F6 | 	mov	local02, arg04
0dc70     01 20 66 F0 | 	shl	local02, #1
0dc74     0D 21 02 F1 | 	add	local02, arg05
0dc78     10 4E 05 F1 | 	add	fp, #16
0dc7c     A7 12 02 FB | 	rdlong	arg01, fp
0dc80     14 4E 85 F1 | 	sub	fp, #20
0dc84     01 18 66 F0 | 	shl	arg04, #1
0dc88     0C 13 02 F1 | 	add	arg01, arg04
0dc8c     0C 00 00 FF 
0dc90     D8 E4 85 F1 | 	sub	objptr, ##6360
0dc94     2C CD B0 FD | 	call	#_psdpeek
0dc98     10 FB 51 FC | 	wrword	result1, local02
0dc9c     04 4E 05 F1 | 	add	fp, #4
0dca0     A7 22 02 FB | 	rdlong	local03, fp
0dca4     01 22 06 F1 | 	add	local03, #1
0dca8     A7 22 62 FC | 	wrlong	local03, fp
0dcac     04 4E 85 F1 | 	sub	fp, #4
0dcb0     02 00 00 FF 
0dcb4     00 22 56 F2 | 	cmps	local03, ##1024 wc
0dcb8     90 FF 9F CD |  if_b	jmp	#LR__1099
0dcbc                 | '     return 
0dcbc     30 06 90 FD | 	jmp	#LR__1118
0dcc0                 | '   
0dcc0                 | '   par=converttoint(t1)  : print par
0dcc0                 | '   t1=pop()
0dcc0                 | '   channel=converttoint(t1)  
0dcc0                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0dcc0                 | LR__1100
0dcc0     10 4E 05 F1 | 	add	fp, #16
0dcc4     A7 22 02 FB | 	rdlong	local03, fp
0dcc8     0B 22 66 F0 | 	shl	local03, #11
0dccc     0C 00 00 FF 
0dcd0     D8 E4 05 F1 | 	add	objptr, ##6360
0dcd4     F2 22 02 F1 | 	add	local03, objptr
0dcd8     0C 4E 85 F1 | 	sub	fp, #12
0dcdc     A7 12 02 FB | 	rdlong	arg01, fp
0dce0     09 21 02 F6 | 	mov	local02, arg01
0dce4     01 20 66 F0 | 	shl	local02, #1
0dce8     11 21 02 F1 | 	add	local02, local03
0dcec     04 4E 85 F1 | 	sub	fp, #4
0dcf0     0C 00 00 FF 
0dcf4     D8 E4 85 F1 | 	sub	objptr, ##6360
0dcf8     09 13 52 F6 | 	abs	arg01, arg01 wc
0dcfc     1F 24 C6 C9 |  if_b	decod	local04, #31
0dd00     00 24 06 36 |  if_ae	mov	local04, #0
0dd04     AC 35 B1 FD | 	call	#__system___float_fromuns
0dd08     12 FB 61 F5 | 	xor	result1, local04
0dd0c     FD 14 02 F6 | 	mov	arg02, result1
0dd10     87 E4 1D FF 
0dd14     DB 13 06 F6 | 	mov	arg01, ##1003032539
0dd18     9C 39 B1 FD | 	call	#__system___float_mul
0dd1c     FD 12 02 F6 | 	mov	arg01, result1
0dd20     D0 42 B1 FD | 	call	#__system____builtin_sinf
0dd24     FD 14 02 F6 | 	mov	arg02, result1
0dd28     58 7F 23 FF 
0dd2c     00 12 06 F6 | 	mov	arg01, ##1191096320
0dd30     84 39 B1 FD | 	call	#__system___float_mul
0dd34     FD 12 02 F6 | 	mov	arg01, result1
0dd38     01 14 06 F6 | 	mov	arg02, #1
0dd3c     40 3E B1 FD | 	call	#__system___float_tointeger
0dd40     10 FB 51 FC | 	wrword	result1, local02
0dd44     04 4E 05 F1 | 	add	fp, #4
0dd48     A7 22 02 FB | 	rdlong	local03, fp
0dd4c     01 22 06 F1 | 	add	local03, #1
0dd50     A7 22 62 FC | 	wrlong	local03, fp
0dd54     04 4E 85 F1 | 	sub	fp, #4
0dd58     02 00 00 FF 
0dd5c     00 22 56 F2 | 	cmps	local03, ##1024 wc
0dd60     5C FF 9F CD |  if_b	jmp	#LR__1100
0dd64                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0dd64                 | '   return
0dd64     88 05 90 FD | 	jmp	#LR__1118
0dd68                 | LR__1101
0dd68                 | ' for i=0 to 15 : harm(i)=0: next i  
0dd68     04 4E 05 F1 | 	add	fp, #4
0dd6c     A7 00 68 FC | 	wrlong	#0, fp
0dd70     97 16 48 FB | 	callpa	#(@LR__1103-@LR__1102)>>2,fcache_load_ptr_
0dd74                 | LR__1102
0dd74     A7 22 02 FB | 	rdlong	local03, fp
0dd78     02 22 66 F0 | 	shl	local03, #2
0dd7c     38 4E 05 F1 | 	add	fp, #56
0dd80     A7 22 02 F1 | 	add	local03, fp
0dd84     11 01 68 FC | 	wrlong	#0, local03
0dd88     38 4E 85 F1 | 	sub	fp, #56
0dd8c     A7 22 02 FB | 	rdlong	local03, fp
0dd90     01 22 06 F1 | 	add	local03, #1
0dd94     A7 22 62 FC | 	wrlong	local03, fp
0dd98     10 22 56 F2 | 	cmps	local03, #16 wc
0dd9c     D4 FF 9F CD |  if_b	jmp	#LR__1102
0dda0                 | LR__1103
0dda0     04 4E 85 F1 | 	sub	fp, #4
0dda4                 | ' for i=numpar to 2 step -1 
0dda4     A7 1E 02 FB | 	rdlong	local01, fp
0dda8     04 4E 05 F1 | 	add	fp, #4
0ddac     A7 1E 62 FC | 	wrlong	local01, fp
0ddb0     04 4E 85 F1 | 	sub	fp, #4
0ddb4                 | LR__1104
0ddb4     A8 CA BF FD | 	call	#_pop
0ddb8     2C 4E 05 F1 | 	add	fp, #44
0ddbc     A7 FA 61 FC | 	wrlong	result1, fp
0ddc0     04 4E 05 F1 | 	add	fp, #4
0ddc4     A7 FC 61 FC | 	wrlong	result2, fp
0ddc8     04 4E 05 F1 | 	add	fp, #4
0ddcc     A7 FE 61 FC | 	wrlong	result3, fp
0ddd0     30 4E 85 F1 | 	sub	fp, #48
0ddd4     A7 22 02 FB | 	rdlong	local03, fp
0ddd8     02 22 86 F1 | 	sub	local03, #2
0dddc     02 22 66 F0 | 	shl	local03, #2
0dde0     38 4E 05 F1 | 	add	fp, #56
0dde4     A7 22 02 F1 | 	add	local03, fp
0dde8     10 4E 85 F1 | 	sub	fp, #16
0ddec     A7 12 02 F6 | 	mov	arg01, fp
0ddf0     2C 4E 85 F1 | 	sub	fp, #44
0ddf4     A8 57 B0 FD | 	call	#_converttofloat
0ddf8     11 FB 61 FC | 	wrlong	result1, local03
0ddfc     04 4E 05 F1 | 	add	fp, #4
0de00     A7 22 02 FB | 	rdlong	local03, fp
0de04     01 22 86 F1 | 	sub	local03, #1
0de08     A7 22 62 FC | 	wrlong	local03, fp
0de0c     04 4E 85 F1 | 	sub	fp, #4
0de10     02 22 56 F2 | 	cmps	local03, #2 wc
0de14     9C FF 9F 3D |  if_ae	jmp	#LR__1104
0de18     44 CA BF FD | 	call	#_pop
0de1c     FF 1E 02 F6 | 	mov	local01, result3
0de20     2C 4E 05 F1 | 	add	fp, #44
0de24     A7 FA 61 FC | 	wrlong	result1, fp
0de28     04 4E 05 F1 | 	add	fp, #4
0de2c     A7 FC 61 FC | 	wrlong	result2, fp
0de30     04 4E 05 F1 | 	add	fp, #4
0de34     A7 1E 62 FC | 	wrlong	local01, fp
0de38     08 4E 85 F1 | 	sub	fp, #8
0de3c     A7 12 02 F6 | 	mov	arg01, fp
0de40     2C 4E 85 F1 | 	sub	fp, #44
0de44     AC 56 B0 FD | 	call	#_converttoint
0de48     FD 1E 02 F6 | 	mov	local01, result1
0de4c     10 4E 05 F1 | 	add	fp, #16
0de50     A7 1E 62 FC | 	wrlong	local01, fp
0de54     10 4E 85 F1 | 	sub	fp, #16
0de58                 | ' t1=pop()
0de58                 | ' channel=converttoint(t1) : print channel
0de58     00 12 06 F6 | 	mov	arg01, #0
0de5c     70 66 B1 FD | 	call	#__system___getiolock_0484
0de60     FD 12 02 F6 | 	mov	arg01, result1
0de64     D0 0C B1 FD | 	call	#__system___lockmem
0de68     10 4E 05 F1 | 	add	fp, #16
0de6c     A7 14 02 FB | 	rdlong	arg02, fp
0de70     10 4E 85 F1 | 	sub	fp, #16
0de74     00 12 06 F6 | 	mov	arg01, #0
0de78     00 16 06 F6 | 	mov	arg03, #0
0de7c     0A 18 06 F6 | 	mov	arg04, #10
0de80     00 1A B1 FD | 	call	#__system___basic_print_integer
0de84     00 12 06 F6 | 	mov	arg01, #0
0de88     0A 14 06 F6 | 	mov	arg02, #10
0de8c     00 16 06 F6 | 	mov	arg03, #0
0de90     54 19 B1 FD | 	call	#__system___basic_print_char
0de94     00 12 06 F6 | 	mov	arg01, #0
0de98     34 66 B1 FD | 	call	#__system___getiolock_0484
0de9c     FD 00 68 FC | 	wrlong	#0, result1
0dea0                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0dea0     08 4E 05 F1 | 	add	fp, #8
0dea4     02 00 80 FF 
0dea8     A7 00 68 FC | 	wrlong	##1024, fp
0deac     08 4E 85 F1 | 	sub	fp, #8
0deb0     0C 00 00 FF 
0deb4     D8 E4 05 F1 | 	add	objptr, ##6360
0deb8     97 18 48 FB | 	callpa	#(@LR__1107-@LR__1105)>>2,fcache_load_ptr_
0debc                 | LR__1105
0debc     02 00 00 FF 
0dec0     00 14 DC FC | 	rep	@LR__1108, ##1024
0dec4                 | LR__1106
0dec4     10 4E 05 F1 | 	add	fp, #16
0dec8     A7 20 02 FB | 	rdlong	local02, fp
0decc     0B 20 66 F0 | 	shl	local02, #11
0ded0     F2 20 02 F1 | 	add	local02, objptr
0ded4     0C 4E 85 F1 | 	sub	fp, #12
0ded8     A7 22 02 FB | 	rdlong	local03, fp
0dedc     04 4E 85 F1 | 	sub	fp, #4
0dee0     01 22 66 F0 | 	shl	local03, #1
0dee4     10 23 02 F1 | 	add	local03, local02
0dee8     11 01 58 FC | 	wrword	#0, local03
0deec                 | LR__1107
0deec                 | LR__1108
0deec     0C 00 00 FF 
0def0     D8 E4 85 F1 | 	sub	objptr, ##6360
0def4     20 4E 05 F1 | 	add	fp, #32
0def8     A7 00 68 FC | 	wrlong	#0, fp
0defc                 | ' max=0
0defc                 | ' if harm(0)<0 then
0defc     1C 4E 05 F1 | 	add	fp, #28
0df00     A7 12 02 FB | 	rdlong	arg01, fp
0df04     3C 4E 85 F1 | 	sub	fp, #60
0df08     00 14 06 F6 | 	mov	arg02, #0
0df0c     01 16 06 F6 | 	mov	arg03, #1
0df10     D8 3B B1 FD | 	call	#__system___float_cmp
0df14     00 FA 55 F2 | 	cmps	result1, #0 wc
0df18     04 01 90 3D |  if_ae	jmp	#LR__1111
0df1c     3C 4E 05 F1 | 	add	fp, #60
0df20     A7 FA 01 FB | 	rdlong	result1, fp
0df24     1F FA 05 F4 | 	bitl	result1, #31
0df28     24 4E 85 F1 | 	sub	fp, #36
0df2c     A7 FA 61 FC | 	wrlong	result1, fp
0df30     28 4E 05 F1 | 	add	fp, #40
0df34     A7 FA 01 FB | 	rdlong	result1, fp
0df38     1F FA 05 F4 | 	bitl	result1, #31
0df3c     24 4E 85 F1 | 	sub	fp, #36
0df40     A7 FA 61 FC | 	wrlong	result1, fp
0df44     20 4E 05 F1 | 	add	fp, #32
0df48     00 C0 9F FF 
0df4c     A7 00 68 FC | 	wrlong	##1065353216, fp
0df50     24 4E 85 F1 | 	sub	fp, #36
0df54     A7 1E 02 FB | 	rdlong	local01, fp
0df58     28 4E 05 F1 | 	add	fp, #40
0df5c     A7 1E 62 FC | 	wrlong	local01, fp
0df60     24 4E 85 F1 | 	sub	fp, #36
0df64     A7 1E 02 FB | 	rdlong	local01, fp
0df68     28 4E 05 F1 | 	add	fp, #40
0df6c     A7 1E 62 FC | 	wrlong	local01, fp
0df70                 | '   harm(0)=1
0df70                 | '   harm(1)=even
0df70                 | '   harm(2)=odd
0df70                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0df70     40 4E 85 F1 | 	sub	fp, #64
0df74     A7 06 68 FC | 	wrlong	#3, fp
0df78                 | LR__1109
0df78     A7 22 02 FB | 	rdlong	local03, fp
0df7c     11 27 02 F6 | 	mov	local05, local03
0df80     02 26 66 F0 | 	shl	local05, #2
0df84     38 4E 05 F1 | 	add	fp, #56
0df88     A7 26 02 F1 | 	add	local05, fp
0df8c     02 22 86 F1 | 	sub	local03, #2
0df90     02 22 66 F0 | 	shl	local03, #2
0df94     A7 22 02 F1 | 	add	local03, fp
0df98     11 13 02 FB | 	rdlong	arg01, local03
0df9c     24 4E 85 F1 | 	sub	fp, #36
0dfa0     A7 14 02 FB | 	rdlong	arg02, fp
0dfa4     18 4E 85 F1 | 	sub	fp, #24
0dfa8     0C 37 B1 FD | 	call	#__system___float_mul
0dfac     13 FB 61 FC | 	wrlong	result1, local05
0dfb0     04 4E 05 F1 | 	add	fp, #4
0dfb4     A7 22 02 FB | 	rdlong	local03, fp
0dfb8     02 22 06 F1 | 	add	local03, #2
0dfbc     A7 22 62 FC | 	wrlong	local03, fp
0dfc0     10 22 56 F2 | 	cmps	local03, #16 wc
0dfc4     B0 FF 9F CD |  if_b	jmp	#LR__1109
0dfc8                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0dfc8     A7 08 68 FC | 	wrlong	#4, fp
0dfcc                 | LR__1110
0dfcc     A7 22 02 FB | 	rdlong	local03, fp
0dfd0     11 27 02 F6 | 	mov	local05, local03
0dfd4     02 26 66 F0 | 	shl	local05, #2
0dfd8     38 4E 05 F1 | 	add	fp, #56
0dfdc     A7 26 02 F1 | 	add	local05, fp
0dfe0     02 22 86 F1 | 	sub	local03, #2
0dfe4     02 22 66 F0 | 	shl	local03, #2
0dfe8     A7 22 02 F1 | 	add	local03, fp
0dfec     11 13 02 FB | 	rdlong	arg01, local03
0dff0     20 4E 85 F1 | 	sub	fp, #32
0dff4     A7 14 02 FB | 	rdlong	arg02, fp
0dff8     1C 4E 85 F1 | 	sub	fp, #28
0dffc     B8 36 B1 FD | 	call	#__system___float_mul
0e000     13 FB 61 FC | 	wrlong	result1, local05
0e004     04 4E 05 F1 | 	add	fp, #4
0e008     A7 22 02 FB | 	rdlong	local03, fp
0e00c     02 22 06 F1 | 	add	local03, #2
0e010     A7 22 62 FC | 	wrlong	local03, fp
0e014     0F 22 56 F2 | 	cmps	local03, #15 wc
0e018     B0 FF 9F CD |  if_b	jmp	#LR__1110
0e01c     04 4E 85 F1 | 	sub	fp, #4
0e020                 | LR__1111
0e020                 | ' if harm(0)>=0 then ' synthesize with harmonics
0e020     3C 4E 05 F1 | 	add	fp, #60
0e024     A7 12 02 FB | 	rdlong	arg01, fp
0e028     3C 4E 85 F1 | 	sub	fp, #60
0e02c     00 14 06 F6 | 	mov	arg02, #0
0e030     01 16 66 F6 | 	neg	arg03, #1
0e034     B4 3A B1 FD | 	call	#__system___float_cmp
0e038     00 FA 55 F2 | 	cmps	result1, #0 wc
0e03c     B0 02 90 CD |  if_b	jmp	#LR__1117
0e040                 | '   for i=0 to 1023
0e040     04 4E 05 F1 | 	add	fp, #4
0e044     A7 00 68 FC | 	wrlong	#0, fp
0e048     04 4E 85 F1 | 	sub	fp, #4
0e04c                 | LR__1112
0e04c     24 4E 05 F1 | 	add	fp, #36
0e050     A7 00 68 FC | 	wrlong	#0, fp
0e054                 | '     spl=0
0e054                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0e054     1C 4E 85 F1 | 	sub	fp, #28
0e058     A7 00 68 FC | 	wrlong	#0, fp
0e05c                 | LR__1113
0e05c     A7 26 02 FB | 	rdlong	local05, fp
0e060     02 26 66 F0 | 	shl	local05, #2
0e064     34 4E 05 F1 | 	add	fp, #52
0e068     A7 26 02 F1 | 	add	local05, fp
0e06c     13 23 02 FB | 	rdlong	local03, local05
0e070     87 E4 1D FF 
0e074     DB 27 06 F6 | 	mov	local05, ##1003032539
0e078     38 4E 85 F1 | 	sub	fp, #56
0e07c     A7 12 02 FB | 	rdlong	arg01, fp
0e080     04 4E 85 F1 | 	sub	fp, #4
0e084     09 13 52 F6 | 	abs	arg01, arg01 wc
0e088     1F 24 C6 C9 |  if_b	decod	local04, #31
0e08c     00 24 06 36 |  if_ae	mov	local04, #0
0e090     20 32 B1 FD | 	call	#__system___float_fromuns
0e094     12 FB 61 F5 | 	xor	result1, local04
0e098     FD 14 02 F6 | 	mov	arg02, result1
0e09c     13 13 02 F6 | 	mov	arg01, local05
0e0a0     14 36 B1 FD | 	call	#__system___float_mul
0e0a4     FD 26 02 F6 | 	mov	local05, result1
0e0a8     08 4E 05 F1 | 	add	fp, #8
0e0ac     A7 12 02 FB | 	rdlong	arg01, fp
0e0b0     08 4E 85 F1 | 	sub	fp, #8
0e0b4     01 12 06 F1 | 	add	arg01, #1
0e0b8     09 13 52 F6 | 	abs	arg01, arg01 wc
0e0bc     1F 24 C6 C9 |  if_b	decod	local04, #31
0e0c0     00 24 06 36 |  if_ae	mov	local04, #0
0e0c4     EC 31 B1 FD | 	call	#__system___float_fromuns
0e0c8     12 FB 61 F5 | 	xor	result1, local04
0e0cc     FD 14 02 F6 | 	mov	arg02, result1
0e0d0     13 13 02 F6 | 	mov	arg01, local05
0e0d4     E0 35 B1 FD | 	call	#__system___float_mul
0e0d8     FD 12 02 F6 | 	mov	arg01, result1
0e0dc     14 3F B1 FD | 	call	#__system____builtin_sinf
0e0e0     FD 14 02 F6 | 	mov	arg02, result1
0e0e4     11 13 02 F6 | 	mov	arg01, local03
0e0e8     CC 35 B1 FD | 	call	#__system___float_mul
0e0ec     FD 14 02 F6 | 	mov	arg02, result1
0e0f0     24 4E 05 F1 | 	add	fp, #36
0e0f4     A7 12 02 FB | 	rdlong	arg01, fp
0e0f8     24 4E 85 F1 | 	sub	fp, #36
0e0fc     E8 31 B1 FD | 	call	#__system___float_add
0e100     24 4E 05 F1 | 	add	fp, #36
0e104     A7 FA 61 FC | 	wrlong	result1, fp
0e108     1C 4E 85 F1 | 	sub	fp, #28
0e10c     A7 16 02 FB | 	rdlong	arg03, fp
0e110     01 16 06 F1 | 	add	arg03, #1
0e114     A7 16 62 FC | 	wrlong	arg03, fp
0e118     10 16 56 F2 | 	cmps	arg03, #16 wc
0e11c     3C FF 9F CD |  if_b	jmp	#LR__1113
0e120                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0e120     1C 4E 05 F1 | 	add	fp, #28
0e124     A7 12 02 FB | 	rdlong	arg01, fp
0e128     1F 12 06 F4 | 	bitl	arg01, #31
0e12c     04 4E 85 F1 | 	sub	fp, #4
0e130     A7 14 02 FB | 	rdlong	arg02, fp
0e134     20 4E 85 F1 | 	sub	fp, #32
0e138     01 16 66 F6 | 	neg	arg03, #1
0e13c     AC 39 B1 FD | 	call	#__system___float_cmp
0e140     01 FA 55 F2 | 	cmps	result1, #1 wc
0e144     18 00 90 CD |  if_b	jmp	#LR__1114
0e148     24 4E 05 F1 | 	add	fp, #36
0e14c     A7 FA 01 FB | 	rdlong	result1, fp
0e150     1F FA 05 F4 | 	bitl	result1, #31
0e154     04 4E 85 F1 | 	sub	fp, #4
0e158     A7 FA 61 FC | 	wrlong	result1, fp
0e15c     20 4E 85 F1 | 	sub	fp, #32
0e160                 | LR__1114
0e160     04 4E 05 F1 | 	add	fp, #4
0e164     A7 22 02 FB | 	rdlong	local03, fp
0e168     01 22 06 F1 | 	add	local03, #1
0e16c     A7 22 62 FC | 	wrlong	local03, fp
0e170     04 4E 85 F1 | 	sub	fp, #4
0e174     02 00 00 FF 
0e178     00 22 56 F2 | 	cmps	local03, ##1024 wc
0e17c     CC FE 9F CD |  if_b	jmp	#LR__1112
0e180                 | '   for i=0 to 1023
0e180     04 4E 05 F1 | 	add	fp, #4
0e184     A7 00 68 FC | 	wrlong	#0, fp
0e188     04 4E 85 F1 | 	sub	fp, #4
0e18c                 | LR__1115
0e18c     24 4E 05 F1 | 	add	fp, #36
0e190     A7 00 68 FC | 	wrlong	#0, fp
0e194                 | '     spl=0
0e194                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0e194     1C 4E 85 F1 | 	sub	fp, #28
0e198     A7 00 68 FC | 	wrlong	#0, fp
0e19c                 | LR__1116
0e19c     A7 26 02 FB | 	rdlong	local05, fp
0e1a0     02 26 66 F0 | 	shl	local05, #2
0e1a4     34 4E 05 F1 | 	add	fp, #52
0e1a8     A7 26 02 F1 | 	add	local05, fp
0e1ac     13 27 02 FB | 	rdlong	local05, local05
0e1b0     1C 4E 85 F1 | 	sub	fp, #28
0e1b4     A7 14 02 FB | 	rdlong	arg02, fp
0e1b8     20 4E 85 F1 | 	sub	fp, #32
0e1bc     58 7F 23 FF 
0e1c0     00 12 06 F6 | 	mov	arg01, ##1191096320
0e1c4     F4 36 B1 FD | 	call	#__system___float_div
0e1c8     FD 14 02 F6 | 	mov	arg02, result1
0e1cc     13 13 02 F6 | 	mov	arg01, local05
0e1d0     E4 34 B1 FD | 	call	#__system___float_mul
0e1d4     FD 22 02 F6 | 	mov	local03, result1
0e1d8     87 E4 1D FF 
0e1dc     DB 27 06 F6 | 	mov	local05, ##1003032539
0e1e0     04 4E 05 F1 | 	add	fp, #4
0e1e4     A7 12 02 FB | 	rdlong	arg01, fp
0e1e8     04 4E 85 F1 | 	sub	fp, #4
0e1ec     09 13 52 F6 | 	abs	arg01, arg01 wc
0e1f0     1F 24 C6 C9 |  if_b	decod	local04, #31
0e1f4     00 24 06 36 |  if_ae	mov	local04, #0
0e1f8     B8 30 B1 FD | 	call	#__system___float_fromuns
0e1fc     12 FB 61 F5 | 	xor	result1, local04
0e200     FD 14 02 F6 | 	mov	arg02, result1
0e204     13 13 02 F6 | 	mov	arg01, local05
0e208     AC 34 B1 FD | 	call	#__system___float_mul
0e20c     FD 26 02 F6 | 	mov	local05, result1
0e210     08 4E 05 F1 | 	add	fp, #8
0e214     A7 12 02 FB | 	rdlong	arg01, fp
0e218     08 4E 85 F1 | 	sub	fp, #8
0e21c     01 12 06 F1 | 	add	arg01, #1
0e220     09 13 52 F6 | 	abs	arg01, arg01 wc
0e224     1F 24 C6 C9 |  if_b	decod	local04, #31
0e228     00 24 06 36 |  if_ae	mov	local04, #0
0e22c     84 30 B1 FD | 	call	#__system___float_fromuns
0e230     12 FB 61 F5 | 	xor	result1, local04
0e234     FD 14 02 F6 | 	mov	arg02, result1
0e238     13 13 02 F6 | 	mov	arg01, local05
0e23c     78 34 B1 FD | 	call	#__system___float_mul
0e240     FD 12 02 F6 | 	mov	arg01, result1
0e244     AC 3D B1 FD | 	call	#__system____builtin_sinf
0e248     FD 14 02 F6 | 	mov	arg02, result1
0e24c     11 13 02 F6 | 	mov	arg01, local03
0e250     64 34 B1 FD | 	call	#__system___float_mul
0e254     FD 14 02 F6 | 	mov	arg02, result1
0e258     24 4E 05 F1 | 	add	fp, #36
0e25c     A7 12 02 FB | 	rdlong	arg01, fp
0e260     24 4E 85 F1 | 	sub	fp, #36
0e264     80 30 B1 FD | 	call	#__system___float_add
0e268     24 4E 05 F1 | 	add	fp, #36
0e26c     A7 FA 61 FC | 	wrlong	result1, fp
0e270     1C 4E 85 F1 | 	sub	fp, #28
0e274     A7 26 02 FB | 	rdlong	local05, fp
0e278     01 26 06 F1 | 	add	local05, #1
0e27c     A7 26 62 FC | 	wrlong	local05, fp
0e280     10 26 56 F2 | 	cmps	local05, #16 wc
0e284     14 FF 9F CD |  if_b	jmp	#LR__1116
0e288     08 4E 05 F1 | 	add	fp, #8
0e28c     A7 26 02 FB | 	rdlong	local05, fp
0e290     0B 26 66 F0 | 	shl	local05, #11
0e294     0C 00 00 FF 
0e298     D8 E4 05 F1 | 	add	objptr, ##6360
0e29c     F2 26 02 F1 | 	add	local05, objptr
0e2a0     0C 4E 85 F1 | 	sub	fp, #12
0e2a4     A7 20 02 FB | 	rdlong	local02, fp
0e2a8     01 20 66 F0 | 	shl	local02, #1
0e2ac     13 21 02 F1 | 	add	local02, local05
0e2b0     20 4E 05 F1 | 	add	fp, #32
0e2b4     A7 12 02 FB | 	rdlong	arg01, fp
0e2b8     24 4E 85 F1 | 	sub	fp, #36
0e2bc     0C 00 00 FF 
0e2c0     D8 E4 85 F1 | 	sub	objptr, ##6360
0e2c4     01 14 06 F6 | 	mov	arg02, #1
0e2c8     B4 38 B1 FD | 	call	#__system___float_tointeger
0e2cc     10 FB 51 FC | 	wrword	result1, local02
0e2d0     04 4E 05 F1 | 	add	fp, #4
0e2d4     A7 22 02 FB | 	rdlong	local03, fp
0e2d8     01 22 06 F1 | 	add	local03, #1
0e2dc     A7 22 62 FC | 	wrlong	local03, fp
0e2e0     04 4E 85 F1 | 	sub	fp, #4
0e2e4     02 00 00 FF 
0e2e8     00 22 56 F2 | 	cmps	local03, ##1024 wc
0e2ec     9C FE 9F CD |  if_b	jmp	#LR__1115
0e2f0                 | LR__1117
0e2f0                 | LR__1118
0e2f0     A7 F0 03 F6 | 	mov	ptra, fp
0e2f4     B2 00 A0 FD | 	call	#popregs_
0e2f8                 | _do_defsnd_ret
0e2f8     2D 00 64 FD | 	ret
0e2fc                 | 
0e2fc                 | ' 
0e2fc                 | ' ' ---------------  List the program. 
0e2fc                 | ' 
0e2fc                 | ' sub do_list
0e2fc                 | _do_list
0e2fc     02 4A 05 F6 | 	mov	COUNT_, #2
0e300     A8 00 A0 FD | 	call	#pushregs_
0e304     B8 F0 07 F1 | 	add	ptra, #184
0e308     04 4E 05 F1 | 	add	fp, #4
0e30c     A7 00 68 FC | 	wrlong	#0, fp
0e310     04 4E 05 F1 | 	add	fp, #4
0e314     FF FF BF FF 
0e318     A7 FE 6B FC | 	wrlong	##2147483647, fp
0e31c     08 4E 85 F1 | 	sub	fp, #8
0e320     6A 00 00 FF 
0e324     80 E4 05 F1 | 	add	objptr, ##54400
0e328     F2 1E 02 FB | 	rdlong	local01, objptr
0e32c     0F 17 02 F6 | 	mov	arg03, local01
0e330     01 16 66 F0 | 	shl	arg03, #1
0e334     0F 17 02 F1 | 	add	arg03, local01
0e338     02 16 66 F0 | 	shl	arg03, #2
0e33c     03 00 00 FF 
0e340     04 E4 85 F1 | 	sub	objptr, ##1540
0e344     F2 16 02 F1 | 	add	arg03, objptr
0e348     0B 17 02 FB | 	rdlong	arg03, arg03
0e34c     A7 16 62 FC | 	wrlong	arg03, fp
0e350                 | ' 
0e350                 | ' startline=0 : endline=$7FFFFFFF
0e350                 | ' numpar=compiledline(lineptr_e).result.uresult
0e350                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0e350     01 16 0E F2 | 	cmp	arg03, #1 wz
0e354     67 00 00 FF 
0e358     7C E4 85 F1 | 	sub	objptr, ##52860
0e35c     3C 00 90 5D |  if_ne	jmp	#LR__1120
0e360     FC C4 BF FD | 	call	#_pop
0e364     FF 1E 02 F6 | 	mov	local01, result3
0e368     0C 4E 05 F1 | 	add	fp, #12
0e36c     A7 FA 61 FC | 	wrlong	result1, fp
0e370     04 4E 05 F1 | 	add	fp, #4
0e374     A7 FC 61 FC | 	wrlong	result2, fp
0e378     04 4E 05 F1 | 	add	fp, #4
0e37c     A7 1E 62 FC | 	wrlong	local01, fp
0e380     08 4E 85 F1 | 	sub	fp, #8
0e384     A7 12 02 F6 | 	mov	arg01, fp
0e388     0C 4E 85 F1 | 	sub	fp, #12
0e38c     64 51 B0 FD | 	call	#_converttoint
0e390     04 4E 05 F1 | 	add	fp, #4
0e394     A7 FA 61 FC | 	wrlong	result1, fp
0e398     04 4E 85 F1 | 	sub	fp, #4
0e39c                 | LR__1120
0e39c                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0e39c     A7 16 02 FB | 	rdlong	arg03, fp
0e3a0     02 16 0E F2 | 	cmp	arg03, #2 wz
0e3a4     7C 00 90 5D |  if_ne	jmp	#LR__1121
0e3a8     B4 C4 BF FD | 	call	#_pop
0e3ac     FF 1E 02 F6 | 	mov	local01, result3
0e3b0     0C 4E 05 F1 | 	add	fp, #12
0e3b4     A7 FA 61 FC | 	wrlong	result1, fp
0e3b8     04 4E 05 F1 | 	add	fp, #4
0e3bc     A7 FC 61 FC | 	wrlong	result2, fp
0e3c0     04 4E 05 F1 | 	add	fp, #4
0e3c4     A7 1E 62 FC | 	wrlong	local01, fp
0e3c8     08 4E 85 F1 | 	sub	fp, #8
0e3cc     A7 12 02 F6 | 	mov	arg01, fp
0e3d0     0C 4E 85 F1 | 	sub	fp, #12
0e3d4     1C 51 B0 FD | 	call	#_converttoint
0e3d8     FD 1E 02 F6 | 	mov	local01, result1
0e3dc     08 4E 05 F1 | 	add	fp, #8
0e3e0     A7 1E 62 FC | 	wrlong	local01, fp
0e3e4     08 4E 85 F1 | 	sub	fp, #8
0e3e8     74 C4 BF FD | 	call	#_pop
0e3ec     FF 1E 02 F6 | 	mov	local01, result3
0e3f0     0C 4E 05 F1 | 	add	fp, #12
0e3f4     A7 FA 61 FC | 	wrlong	result1, fp
0e3f8     04 4E 05 F1 | 	add	fp, #4
0e3fc     A7 FC 61 FC | 	wrlong	result2, fp
0e400     04 4E 05 F1 | 	add	fp, #4
0e404     A7 1E 62 FC | 	wrlong	local01, fp
0e408     08 4E 85 F1 | 	sub	fp, #8
0e40c     A7 12 02 F6 | 	mov	arg01, fp
0e410     0C 4E 85 F1 | 	sub	fp, #12
0e414     DC 50 B0 FD | 	call	#_converttoint
0e418     04 4E 05 F1 | 	add	fp, #4
0e41c     A7 FA 61 FC | 	wrlong	result1, fp
0e420     04 4E 85 F1 | 	sub	fp, #4
0e424                 | LR__1121
0e424                 | ' 
0e424                 | ' 
0e424                 | ' print
0e424     00 12 06 F6 | 	mov	arg01, #0
0e428     A4 60 B1 FD | 	call	#__system___getiolock_0484
0e42c     FD 12 02 F6 | 	mov	arg01, result1
0e430     04 07 B1 FD | 	call	#__system___lockmem
0e434     00 12 06 F6 | 	mov	arg01, #0
0e438     0A 14 06 F6 | 	mov	arg02, #10
0e43c     00 16 06 F6 | 	mov	arg03, #0
0e440     A4 13 B1 FD | 	call	#__system___basic_print_char
0e444     00 12 06 F6 | 	mov	arg01, #0
0e448     84 60 B1 FD | 	call	#__system___getiolock_0484
0e44c     FD 00 68 FC | 	wrlong	#0, result1
0e450     6A 00 00 FF 
0e454     84 E4 05 F1 | 	add	objptr, ##54404
0e458     F2 20 02 FB | 	rdlong	local02, objptr
0e45c     0F 00 00 FF 
0e460     A4 E5 05 F1 | 	add	objptr, ##8100
0e464     F2 20 62 FC | 	wrlong	local02, objptr
0e468     7A 00 00 FF 
0e46c     28 E4 85 F1 | 	sub	objptr, ##62504
0e470                 | ' do 
0e470                 | LR__1122
0e470     20 4E 05 F1 | 	add	fp, #32
0e474     A7 12 02 F6 | 	mov	arg01, fp
0e478     20 4E 85 F1 | 	sub	fp, #32
0e47c     7A 00 00 FF 
0e480     28 E4 05 F1 | 	add	objptr, ##62504
0e484     F2 14 02 FB | 	rdlong	arg02, objptr
0e488     18 16 06 F6 | 	mov	arg03, #24
0e48c     6E 00 00 FF 
0e490     5C E5 85 F1 | 	sub	objptr, ##56668
0e494     7C FA B0 FD | 	call	#_psram_spin2_read1
0e498     0B 00 00 FF 
0e49c     CC E4 85 F1 | 	sub	objptr, ##5836
0e4a0                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0e4a0                 | '   
0e4a0                 | '   if header(0)<> $FFFFFFFF then
0e4a0     20 4E 05 F1 | 	add	fp, #32
0e4a4     A7 20 02 FB | 	rdlong	local02, fp
0e4a8     20 4E 85 F1 | 	sub	fp, #32
0e4ac     FF FF 7F FF 
0e4b0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0e4b4     A8 00 90 AD |  if_e	jmp	#LR__1124
0e4b8     38 4E 05 F1 | 	add	fp, #56
0e4bc     3F 16 06 F6 | 	mov	arg03, #63
0e4c0     28 16 62 FD | 	setq	arg03
0e4c4     A7 00 68 FC | 	wrlong	#0, fp
0e4c8     A7 12 02 F6 | 	mov	arg01, fp
0e4cc     10 4E 85 F1 | 	sub	fp, #16
0e4d0     A7 14 02 FB | 	rdlong	arg02, fp
0e4d4     04 4E 05 F1 | 	add	fp, #4
0e4d8     A7 16 02 FB | 	rdlong	arg03, fp
0e4dc     2C 4E 85 F1 | 	sub	fp, #44
0e4e0     0B 00 00 FF 
0e4e4     CC E4 05 F1 | 	add	objptr, ##5836
0e4e8     28 FA B0 FD | 	call	#_psram_spin2_read1
0e4ec     0B 00 00 FF 
0e4f0     CC E4 85 F1 | 	sub	objptr, ##5836
0e4f4                 | '     longfill(linebuf,0,64)
0e4f4                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0e4f4                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0e4f4     20 4E 05 F1 | 	add	fp, #32
0e4f8     A7 20 02 FB | 	rdlong	local02, fp
0e4fc     1C 4E 85 F1 | 	sub	fp, #28
0e500     A7 1E 02 FB | 	rdlong	local01, fp
0e504     04 4E 85 F1 | 	sub	fp, #4
0e508     0F 21 52 F2 | 	cmps	local02, local01 wc
0e50c     30 00 90 CD |  if_b	jmp	#LR__1123
0e510     20 4E 05 F1 | 	add	fp, #32
0e514     A7 20 02 FB | 	rdlong	local02, fp
0e518     18 4E 85 F1 | 	sub	fp, #24
0e51c     A7 16 02 FB | 	rdlong	arg03, fp
0e520     08 4E 85 F1 | 	sub	fp, #8
0e524     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0e528     14 00 90 1D |  if_a	jmp	#LR__1123
0e52c     38 4E 05 F1 | 	add	fp, #56
0e530     A7 12 02 F6 | 	mov	arg01, fp
0e534     38 4E 85 F1 | 	sub	fp, #56
0e538                 | ' 
0e538                 | ' write(text)
0e538     30 F3 B0 FD | 	call	#_hg010b_spin2_write
0e53c                 | ' crlf
0e53c     F8 F5 B0 FD | 	call	#_hg010b_spin2_crlf
0e540                 | LR__1123
0e540     34 4E 05 F1 | 	add	fp, #52
0e544     A7 20 02 FB | 	rdlong	local02, fp
0e548     34 4E 85 F1 | 	sub	fp, #52
0e54c     7A 00 00 FF 
0e550     28 E4 05 F1 | 	add	objptr, ##62504
0e554     F2 20 62 FC | 	wrlong	local02, objptr
0e558     7A 00 00 FF 
0e55c     28 E4 85 F1 | 	sub	objptr, ##62504
0e560                 | LR__1124
0e560     34 4E 05 F1 | 	add	fp, #52
0e564     A7 20 02 FB | 	rdlong	local02, fp
0e568     34 4E 85 F1 | 	sub	fp, #52
0e56c     FF FF 3F FF 
0e570     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0e574     20 4E 05 51 |  if_ne	add	fp, #32
0e578     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e57c     20 4E 85 51 |  if_ne	sub	fp, #32
0e580     FF FF 7F 5F 
0e584     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0e588     E4 FE 9F 5D |  if_ne	jmp	#LR__1122
0e58c     A7 F0 03 F6 | 	mov	ptra, fp
0e590     B2 00 A0 FD | 	call	#popregs_
0e594                 | _do_list_ret
0e594     2D 00 64 FD | 	ret
0e598                 | 
0e598                 | ' 
0e598                 | ' '---------------- Clear the program
0e598                 | ' 
0e598                 | ' sub do_new
0e598                 | _do_new
0e598     03 4A 05 F6 | 	mov	COUNT_, #3
0e59c     A8 00 A0 FD | 	call	#pushregs_
0e5a0     00 12 06 F6 | 	mov	arg01, #0
0e5a4     01 14 66 F6 | 	neg	arg02, #1
0e5a8     90 C2 B0 FD | 	call	#_pslpoke
0e5ac     55 00 00 FF 
0e5b0     08 E4 05 F1 | 	add	objptr, ##43528
0e5b4     F2 00 68 FC | 	wrlong	#0, objptr
0e5b8     15 00 00 FF 
0e5bc     7C E4 05 F1 | 	add	objptr, ##10876
0e5c0     F2 00 68 FC | 	wrlong	#0, objptr
0e5c4     0E 00 00 FF 
0e5c8     38 E4 05 F1 | 	add	objptr, ##7224
0e5cc     F2 00 68 FC | 	wrlong	#0, objptr
0e5d0     04 E4 05 F1 | 	add	objptr, #4
0e5d4     F2 00 68 FC | 	wrlong	#0, objptr
0e5d8     15 00 00 FF 
0e5dc     68 E4 85 F1 | 	sub	objptr, ##10856
0e5e0     F2 00 68 FC | 	wrlong	#0, objptr
0e5e4     07 00 00 FF 
0e5e8     24 E4 05 F1 | 	add	objptr, ##3620
0e5ec     F2 00 68 FC | 	wrlong	#0, objptr
0e5f0     07 00 00 FF 
0e5f4     20 E4 85 F1 | 	sub	objptr, ##3616
0e5f8     F2 00 68 FC | 	wrlong	#0, objptr
0e5fc     0F 00 00 FF 
0e600     38 E4 05 F1 | 	add	objptr, ##7736
0e604     F2 00 68 FC | 	wrlong	#0, objptr
0e608     08 00 00 FF 
0e60c     0C E4 85 F1 | 	sub	objptr, ##4108
0e610     F2 00 68 FC | 	wrlong	#0, objptr
0e614     04 E4 05 F1 | 	add	objptr, #4
0e618     FF FF FF FF 
0e61c     F2 FE 6B FC | 	wrlong	##-1, objptr
0e620     0E 00 00 FF 
0e624     58 E4 05 F1 | 	add	objptr, ##7256
0e628     F2 00 68 FC | 	wrlong	#0, objptr
0e62c     04 E4 05 F1 | 	add	objptr, #4
0e630     F2 00 68 FC | 	wrlong	#0, objptr
0e634                 | ' 
0e634                 | ' pslpoke(0,$FFFFFFFF)
0e634                 | ' varnum=0
0e634                 | ' programstart=0 :runptr=0 : runptr2=0
0e634                 | ' stackpointer=0
0e634                 | ' lineptr=0 
0e634                 | ' programptr=0 : stringptr=0
0e634                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
0e634                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0e634     00 1E 06 F6 | 	mov	local01, #0
0e638     06 00 00 FF 
0e63c     4C E4 85 F1 | 	sub	objptr, ##3148
0e640     97 16 48 FB | 	callpa	#(@LR__1131-@LR__1130)>>2,fcache_load_ptr_
0e644                 | LR__1130
0e644     0F 21 02 F6 | 	mov	local02, local01
0e648     02 20 66 F0 | 	shl	local02, #2
0e64c     0F 21 02 F1 | 	add	local02, local01
0e650     02 20 66 F0 | 	shl	local02, #2
0e654     F2 20 02 F1 | 	add	local02, objptr
0e658     08 20 06 F1 | 	add	local02, #8
0e65c     FF FF FF FF 
0e660     10 FF 6B FC | 	wrlong	##-1, local02
0e664     01 1E 06 F1 | 	add	local01, #1
0e668     41 1E 56 F2 | 	cmps	local01, #65 wc
0e66c     D4 FF 9F CD |  if_b	jmp	#LR__1130
0e670                 | LR__1131
0e670     72 00 00 FF 
0e674     9C E4 85 F1 | 	sub	objptr, ##58524
0e678                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
0e678     00 1E 06 F6 | 	mov	local01, #0
0e67c                 | LR__1132
0e67c     0F 21 02 F6 | 	mov	local02, local01
0e680     02 20 66 F0 | 	shl	local02, #2
0e684     79 00 00 FF 
0e688     44 E5 05 F1 | 	add	objptr, ##62276
0e68c     F2 20 02 F1 | 	add	local02, objptr
0e690     10 21 0A FB | 	rdlong	local02, local02 wz
0e694     79 00 00 FF 
0e698     44 E5 85 F1 | 	sub	objptr, ##62276
0e69c     34 00 90 AD |  if_e	jmp	#LR__1133
0e6a0     0F 13 02 F6 | 	mov	arg01, local01
0e6a4     00 14 06 F6 | 	mov	arg02, #0
0e6a8     00 16 06 F6 | 	mov	arg03, #0
0e6ac     DC E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e6b0     0F 21 02 F6 | 	mov	local02, local01
0e6b4     02 20 66 F0 | 	shl	local02, #2
0e6b8     79 00 00 FF 
0e6bc     44 E5 05 F1 | 	add	objptr, ##62276
0e6c0     F2 20 02 F1 | 	add	local02, objptr
0e6c4     10 13 02 FB | 	rdlong	arg01, local02
0e6c8     79 00 00 FF 
0e6cc     44 E5 85 F1 | 	sub	objptr, ##62276
0e6d0     EC 43 B1 FD | 	call	#__system___gc_free
0e6d4                 | LR__1133
0e6d4     01 1E 06 F1 | 	add	local01, #1
0e6d8     10 1E 56 F2 | 	cmps	local01, #16 wc
0e6dc     9C FF 9F CD |  if_b	jmp	#LR__1132
0e6e0     79 00 00 FF 
0e6e4     98 E5 05 F1 | 	add	objptr, ##62360
0e6e8     00 C0 9F FF 
0e6ec     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e6f0     04 E4 05 F1 | 	add	objptr, #4
0e6f4     00 C0 9F FF 
0e6f8     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e6fc     79 00 00 FF 
0e700     98 E5 85 F1 | 	sub	objptr, ##62360
0e704     F2 22 02 FB | 	rdlong	local03, objptr
0e708     79 00 00 FF 
0e70c     84 E5 05 F1 | 	add	objptr, ##62340
0e710     F2 22 62 FC | 	wrlong	local03, objptr
0e714     79 00 00 FF 
0e718     88 E5 85 F1 | 	sub	objptr, ##62344
0e71c     11 12 06 F6 | 	mov	arg01, #17
0e720     08 14 06 F6 | 	mov	arg02, #8
0e724     10 16 06 F6 | 	mov	arg03, #16
0e728     60 E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e72c     10 12 06 F6 | 	mov	arg01, #16
0e730     20 14 06 F6 | 	mov	arg02, #32
0e734     20 16 06 F6 | 	mov	arg03, #32
0e738     50 E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e73c     73 01 00 FF 
0e740     7D 23 06 F6 | 	mov	local03, ##@LR__5146
0e744     79 00 00 FF 
0e748     B4 E5 05 F1 | 	add	objptr, ##62388
0e74c     F2 22 62 FC | 	wrlong	local03, objptr
0e750     79 00 00 FF 
0e754     B4 E5 85 F1 | 	sub	objptr, ##62388
0e758     EC B3 B0 FD | 	call	#_init_audio
0e75c     A7 F0 03 F6 | 	mov	ptra, fp
0e760     B2 00 A0 FD | 	call	#popregs_
0e764                 | _do_new_ret
0e764     2D 00 64 FD | 	ret
0e768                 | 
0e768                 | ' 
0e768                 | ' '----------------------- goto
0e768                 | ' sub do_fast_goto
0e768                 | _do_fast_goto
0e768     02 4A 05 F6 | 	mov	COUNT_, #2
0e76c     A8 00 A0 FD | 	call	#pushregs_
0e770                 | _do_fast_goto_enter
0e770     6A 00 00 FF 
0e774     80 E4 05 F1 | 	add	objptr, ##54400
0e778     F2 12 02 FB | 	rdlong	arg01, objptr
0e77c     09 1F 02 F6 | 	mov	local01, arg01
0e780     01 1E 66 F0 | 	shl	local01, #1
0e784     09 1F 02 F1 | 	add	local01, arg01
0e788     02 1E 66 F0 | 	shl	local01, #2
0e78c     03 00 00 FF 
0e790     04 E4 85 F1 | 	sub	objptr, ##1540
0e794     F2 1E 02 F1 | 	add	local01, objptr
0e798     0F 21 02 FB | 	rdlong	local02, local01
0e79c     10 13 02 F6 | 	mov	arg01, local02
0e7a0     67 00 00 FF 
0e7a4     7C E4 85 F1 | 	sub	objptr, ##52860
0e7a8     C0 C1 B0 FD | 	call	#_pslpeek
0e7ac     FD 12 02 F6 | 	mov	arg01, result1
0e7b0                 | ' 
0e7b0                 | ' testptr=compiledline(lineptr_e).result.uresult
0e7b0                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0e7b0                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0e7b0     6A 00 00 FF 
0e7b4     80 E4 05 F1 | 	add	objptr, ##54400
0e7b8     F2 FA 01 FB | 	rdlong	result1, objptr
0e7bc     FD 1E 02 F6 | 	mov	local01, result1
0e7c0     01 1E 66 F0 | 	shl	local01, #1
0e7c4     FD 1E 02 F1 | 	add	local01, result1
0e7c8     02 1E 66 F0 | 	shl	local01, #2
0e7cc     03 00 00 FF 
0e7d0     04 E4 85 F1 | 	sub	objptr, ##1540
0e7d4     F2 1E 02 F1 | 	add	local01, objptr
0e7d8     04 1E 06 F1 | 	add	local01, #4
0e7dc     0F 1F 02 FB | 	rdlong	local01, local01
0e7e0     0F 13 0A F2 | 	cmp	arg01, local01 wz
0e7e4     67 00 00 FF 
0e7e8     7C E4 85 F1 | 	sub	objptr, ##52860
0e7ec     58 00 90 5D |  if_ne	jmp	#LR__1140
0e7f0     78 00 00 FF 
0e7f4     BC E4 05 F1 | 	add	objptr, ##61628
0e7f8     F2 20 62 FC | 	wrlong	local02, objptr
0e7fc     0E 00 00 FF 
0e800     40 E4 85 F1 | 	sub	objptr, ##7232
0e804     F2 20 02 FB | 	rdlong	local02, objptr
0e808     01 20 86 F1 | 	sub	local02, #1
0e80c     04 E4 05 F1 | 	add	objptr, #4
0e810     F2 20 62 FC | 	wrlong	local02, objptr
0e814                 | '   runptr=testptr
0e814                 | '   lineptr_e=lineptr-1
0e814                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0e814     0E 00 00 FF 
0e818     60 E4 05 F1 | 	add	objptr, ##7264
0e81c     F2 20 02 FB | 	rdlong	local02, objptr
0e820     78 00 00 FF 
0e824     E0 E4 85 F1 | 	sub	objptr, ##61664
0e828     FF FF 3F FF 
0e82c     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0e830     78 00 00 AF 
0e834     E0 E4 05 A1 |  if_e	add	objptr, ##61664
0e838     F2 00 68 AC |  if_e	wrlong	#0, objptr
0e83c     78 00 00 AF 
0e840     E0 E4 85 A1 |  if_e	sub	objptr, ##61664
0e844     04 00 90 FD | 	jmp	#LR__1141
0e848                 | LR__1140
0e848     0C 00 B0 FD | 	call	#_do_find_goto
0e84c                 | LR__1141
0e84c     A7 F0 03 F6 | 	mov	ptra, fp
0e850     B2 00 A0 FD | 	call	#popregs_
0e854                 | _do_fast_goto_ret
0e854     2D 00 64 FD | 	ret
0e858                 | 
0e858                 | ' 
0e858                 | ' 
0e858                 | ' 
0e858                 | ' 
0e858                 | ' sub do_find_goto
0e858                 | _do_find_goto
0e858     03 4A 05 F6 | 	mov	COUNT_, #3
0e85c     A8 00 A0 FD | 	call	#pushregs_
0e860     24 F0 07 F1 | 	add	ptra, #36
0e864                 | _do_find_goto_enter
0e864     6A 00 00 FF 
0e868     80 E4 05 F1 | 	add	objptr, ##54400
0e86c     F2 1E 02 FB | 	rdlong	local01, objptr
0e870     0F 21 02 F6 | 	mov	local02, local01
0e874     01 20 66 F0 | 	shl	local02, #1
0e878     0F 21 02 F1 | 	add	local02, local01
0e87c     02 20 66 F0 | 	shl	local02, #2
0e880     03 00 00 FF 
0e884     04 E4 85 F1 | 	sub	objptr, ##1540
0e888     F2 20 02 F1 | 	add	local02, objptr
0e88c     04 20 06 F1 | 	add	local02, #4
0e890     10 21 02 FB | 	rdlong	local02, local02
0e894     A7 20 62 FC | 	wrlong	local02, fp
0e898     03 00 00 FF 
0e89c     08 E4 05 F1 | 	add	objptr, ##1544
0e8a0     F2 22 02 FB | 	rdlong	local03, objptr
0e8a4     6A 00 00 FF 
0e8a8     84 E4 85 F1 | 	sub	objptr, ##54404
0e8ac     04 4E 05 F1 | 	add	fp, #4
0e8b0     A7 22 62 FC | 	wrlong	local03, fp
0e8b4     04 4E 85 F1 | 	sub	fp, #4
0e8b8                 | ' 
0e8b8                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0e8b8                 | '  ' print "find goto"                                                                     'print gotoline 
0e8b8                 | ' gotoptr=programstart
0e8b8                 | ' do
0e8b8                 | LR__1150
0e8b8     0C 4E 05 F1 | 	add	fp, #12
0e8bc     A7 12 02 F6 | 	mov	arg01, fp
0e8c0     08 4E 85 F1 | 	sub	fp, #8
0e8c4     A7 14 02 FB | 	rdlong	arg02, fp
0e8c8     04 4E 85 F1 | 	sub	fp, #4
0e8cc     18 16 06 F6 | 	mov	arg03, #24
0e8d0     0B 00 00 FF 
0e8d4     CC E4 05 F1 | 	add	objptr, ##5836
0e8d8     38 F6 B0 FD | 	call	#_psram_spin2_read1
0e8dc     0B 00 00 FF 
0e8e0     CC E4 85 F1 | 	sub	objptr, ##5836
0e8e4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0e8e4                 | '   if gotoheader(0)<>$FFFFFFFF then
0e8e4     0C 4E 05 F1 | 	add	fp, #12
0e8e8     A7 22 02 FB | 	rdlong	local03, fp
0e8ec     0C 4E 85 F1 | 	sub	fp, #12
0e8f0     FF FF 7F FF 
0e8f4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0e8f8     24 00 90 AD |  if_e	jmp	#LR__1151
0e8fc     04 4E 05 F1 | 	add	fp, #4
0e900     A7 22 02 FB | 	rdlong	local03, fp
0e904     04 4E 05 F1 | 	add	fp, #4
0e908     A7 22 62 FC | 	wrlong	local03, fp
0e90c     18 4E 05 F1 | 	add	fp, #24
0e910     A7 22 02 FB | 	rdlong	local03, fp
0e914     1C 4E 85 F1 | 	sub	fp, #28
0e918     A7 22 62 FC | 	wrlong	local03, fp
0e91c     04 4E 85 F1 | 	sub	fp, #4
0e920                 | LR__1151
0e920     20 4E 05 F1 | 	add	fp, #32
0e924     A7 22 02 FB | 	rdlong	local03, fp
0e928     20 4E 85 F1 | 	sub	fp, #32
0e92c     FF FF 3F FF 
0e930     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0e934     0C 4E 05 51 |  if_ne	add	fp, #12
0e938     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e93c     0C 4E 85 51 |  if_ne	sub	fp, #12
0e940     FF FF 7F 5F 
0e944     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0e948     18 00 90 AD |  if_e	jmp	#LR__1152
0e94c     0C 4E 05 F1 | 	add	fp, #12
0e950     A7 22 02 FB | 	rdlong	local03, fp
0e954     0C 4E 85 F1 | 	sub	fp, #12
0e958     A7 20 02 FB | 	rdlong	local02, fp
0e95c     10 23 0A F2 | 	cmp	local03, local02 wz
0e960     54 FF 9F 5D |  if_ne	jmp	#LR__1150
0e964                 | LR__1152
0e964                 | ' 
0e964                 | ' if gotoheader(0)=gotoline then
0e964     0C 4E 05 F1 | 	add	fp, #12
0e968     A7 22 02 FB | 	rdlong	local03, fp
0e96c     0C 4E 85 F1 | 	sub	fp, #12
0e970     A7 1E 02 FB | 	rdlong	local01, fp
0e974     0F 23 0A F2 | 	cmp	local03, local01 wz
0e978     D8 00 90 5D |  if_ne	jmp	#LR__1153
0e97c     6A 00 00 FF 
0e980     80 E4 05 F1 | 	add	objptr, ##54400
0e984     F2 1E 02 FB | 	rdlong	local01, objptr
0e988     0F 21 02 F6 | 	mov	local02, local01
0e98c     01 20 66 F0 | 	shl	local02, #1
0e990     0F 21 02 F1 | 	add	local02, local01
0e994     02 20 66 F0 | 	shl	local02, #2
0e998     03 00 00 FF 
0e99c     04 E4 85 F1 | 	sub	objptr, ##1540
0e9a0     F2 20 02 F1 | 	add	local02, objptr
0e9a4     08 4E 05 F1 | 	add	fp, #8
0e9a8     A7 22 02 FB | 	rdlong	local03, fp
0e9ac     10 23 62 FC | 	wrlong	local03, local02
0e9b0     03 00 00 FF 
0e9b4     04 E4 05 F1 | 	add	objptr, ##1540
0e9b8     F2 1E 02 FB | 	rdlong	local01, objptr
0e9bc     0F 21 02 F6 | 	mov	local02, local01
0e9c0     01 20 66 F0 | 	shl	local02, #1
0e9c4     0F 21 02 F1 | 	add	local02, local01
0e9c8     02 20 66 F0 | 	shl	local02, #2
0e9cc     03 00 00 FF 
0e9d0     04 E4 85 F1 | 	sub	objptr, ##1540
0e9d4     F2 20 02 F1 | 	add	local02, objptr
0e9d8     08 20 06 F1 | 	add	local02, #8
0e9dc     10 9D 68 FC | 	wrlong	#78, local02
0e9e0     03 00 00 FF 
0e9e4     04 E4 05 F1 | 	add	objptr, ##1540
0e9e8     F2 20 02 FB | 	rdlong	local02, objptr
0e9ec     10 13 02 F6 | 	mov	arg01, local02
0e9f0     01 12 66 F0 | 	shl	arg01, #1
0e9f4     10 13 02 F1 | 	add	arg01, local02
0e9f8     02 12 66 F0 | 	shl	arg01, #2
0e9fc     03 00 00 FF 
0ea00     04 E4 85 F1 | 	sub	objptr, ##1540
0ea04     F2 12 02 F1 | 	add	arg01, objptr
0ea08     11 00 00 FF 
0ea0c     48 E4 05 F1 | 	add	objptr, ##8776
0ea10     F2 14 02 FB | 	rdlong	arg02, objptr
0ea14     02 22 06 F6 | 	mov	local03, #2
0ea18     10 23 02 F1 | 	add	local03, local02
0ea1c     13 00 00 FF 
0ea20     60 E4 85 F1 | 	sub	objptr, ##9824
0ea24     F2 16 02 FB | 	rdlong	arg03, objptr
0ea28     0B 23 02 FD | 	qmul	local03, arg03
0ea2c     08 4E 85 F1 | 	sub	fp, #8
0ea30     59 00 00 FF 
0ea34     98 E5 85 F1 | 	sub	objptr, ##45976
0ea38     18 22 62 FD | 	getqx	local03
0ea3c     11 15 02 F1 | 	add	arg02, local03
0ea40     6C F5 B0 FD | 	call	#_psram_spin2_write
0ea44     0B 00 00 FF 
0ea48     CC E4 85 F1 | 	sub	objptr, ##5836
0ea4c     18 FD BF FD | 	call	#_do_fast_goto
0ea50     08 00 90 FD | 	jmp	#LR__1154
0ea54                 | LR__1153
0ea54     26 12 06 F6 | 	mov	arg01, #38
0ea58     7C BC B0 FD | 	call	#_printerror
0ea5c                 | LR__1154
0ea5c     A7 F0 03 F6 | 	mov	ptra, fp
0ea60     B2 00 A0 FD | 	call	#popregs_
0ea64                 | _do_find_goto_ret
0ea64     2D 00 64 FD | 	ret
0ea68                 | 
0ea68                 | ' 
0ea68                 | ' sub do_slow_goto
0ea68                 | _do_slow_goto
0ea68     02 4A 05 F6 | 	mov	COUNT_, #2
0ea6c     A8 00 A0 FD | 	call	#pushregs_
0ea70     30 F0 07 F1 | 	add	ptra, #48
0ea74     E8 BD BF FD | 	call	#_pop
0ea78     FF 1E 02 F6 | 	mov	local01, result3
0ea7c     24 4E 05 F1 | 	add	fp, #36
0ea80     A7 FA 61 FC | 	wrlong	result1, fp
0ea84     04 4E 05 F1 | 	add	fp, #4
0ea88     A7 FC 61 FC | 	wrlong	result2, fp
0ea8c     04 4E 05 F1 | 	add	fp, #4
0ea90     A7 1E 62 FC | 	wrlong	local01, fp
0ea94     08 4E 85 F1 | 	sub	fp, #8
0ea98     A7 12 02 F6 | 	mov	arg01, fp
0ea9c     24 4E 85 F1 | 	sub	fp, #36
0eaa0     50 4A B0 FD | 	call	#_converttoint
0eaa4     A7 FA 61 FC | 	wrlong	result1, fp
0eaa8     6A 00 00 FF 
0eaac     84 E4 05 F1 | 	add	objptr, ##54404
0eab0     F2 20 02 FB | 	rdlong	local02, objptr
0eab4     6A 00 00 FF 
0eab8     84 E4 85 F1 | 	sub	objptr, ##54404
0eabc     04 4E 05 F1 | 	add	fp, #4
0eac0     A7 20 62 FC | 	wrlong	local02, fp
0eac4     04 4E 85 F1 | 	sub	fp, #4
0eac8                 | ' 
0eac8                 | ' t1=pop() : gotoline=converttoint(t1)
0eac8                 | ' gotoptr=programstart
0eac8                 | ' do
0eac8                 | LR__1160
0eac8     0C 4E 05 F1 | 	add	fp, #12
0eacc     A7 12 02 F6 | 	mov	arg01, fp
0ead0     08 4E 85 F1 | 	sub	fp, #8
0ead4     A7 14 02 FB | 	rdlong	arg02, fp
0ead8     04 4E 85 F1 | 	sub	fp, #4
0eadc     18 16 06 F6 | 	mov	arg03, #24
0eae0     0B 00 00 FF 
0eae4     CC E4 05 F1 | 	add	objptr, ##5836
0eae8     28 F4 B0 FD | 	call	#_psram_spin2_read1
0eaec     0B 00 00 FF 
0eaf0     CC E4 85 F1 | 	sub	objptr, ##5836
0eaf4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0eaf4                 | '   if gotoheader(0)<>$FFFFFFFF then
0eaf4     0C 4E 05 F1 | 	add	fp, #12
0eaf8     A7 20 02 FB | 	rdlong	local02, fp
0eafc     0C 4E 85 F1 | 	sub	fp, #12
0eb00     FF FF 7F FF 
0eb04     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0eb08     24 00 90 AD |  if_e	jmp	#LR__1161
0eb0c     04 4E 05 F1 | 	add	fp, #4
0eb10     A7 20 02 FB | 	rdlong	local02, fp
0eb14     04 4E 05 F1 | 	add	fp, #4
0eb18     A7 20 62 FC | 	wrlong	local02, fp
0eb1c     18 4E 05 F1 | 	add	fp, #24
0eb20     A7 20 02 FB | 	rdlong	local02, fp
0eb24     1C 4E 85 F1 | 	sub	fp, #28
0eb28     A7 20 62 FC | 	wrlong	local02, fp
0eb2c     04 4E 85 F1 | 	sub	fp, #4
0eb30                 | LR__1161
0eb30     20 4E 05 F1 | 	add	fp, #32
0eb34     A7 20 02 FB | 	rdlong	local02, fp
0eb38     20 4E 85 F1 | 	sub	fp, #32
0eb3c     FF FF 3F FF 
0eb40     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0eb44     0C 4E 05 51 |  if_ne	add	fp, #12
0eb48     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0eb4c     0C 4E 85 51 |  if_ne	sub	fp, #12
0eb50     FF FF 7F 5F 
0eb54     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0eb58     18 00 90 AD |  if_e	jmp	#LR__1162
0eb5c     0C 4E 05 F1 | 	add	fp, #12
0eb60     A7 20 02 FB | 	rdlong	local02, fp
0eb64     0C 4E 85 F1 | 	sub	fp, #12
0eb68     A7 16 02 FB | 	rdlong	arg03, fp
0eb6c     0B 21 0A F2 | 	cmp	local02, arg03 wz
0eb70     54 FF 9F 5D |  if_ne	jmp	#LR__1160
0eb74                 | LR__1162
0eb74                 | ' if gotoheader(0)=gotoline then  
0eb74     0C 4E 05 F1 | 	add	fp, #12
0eb78     A7 20 02 FB | 	rdlong	local02, fp
0eb7c     0C 4E 85 F1 | 	sub	fp, #12
0eb80     A7 1E 02 FB | 	rdlong	local01, fp
0eb84     0F 21 0A F2 | 	cmp	local02, local01 wz
0eb88     60 00 90 5D |  if_ne	jmp	#LR__1163
0eb8c     08 4E 05 F1 | 	add	fp, #8
0eb90     A7 20 02 FB | 	rdlong	local02, fp
0eb94     08 4E 85 F1 | 	sub	fp, #8
0eb98     78 00 00 FF 
0eb9c     BC E4 05 F1 | 	add	objptr, ##61628
0eba0     F2 20 62 FC | 	wrlong	local02, objptr
0eba4     0E 00 00 FF 
0eba8     40 E4 85 F1 | 	sub	objptr, ##7232
0ebac     F2 20 02 FB | 	rdlong	local02, objptr
0ebb0     01 20 86 F1 | 	sub	local02, #1
0ebb4     04 E4 05 F1 | 	add	objptr, #4
0ebb8     F2 20 62 FC | 	wrlong	local02, objptr
0ebbc                 | '    runptr=oldgotoptr
0ebbc                 | '    lineptr_e=lineptr-1
0ebbc                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
0ebbc     0E 00 00 FF 
0ebc0     60 E4 05 F1 | 	add	objptr, ##7264
0ebc4     F2 20 02 FB | 	rdlong	local02, objptr
0ebc8     78 00 00 FF 
0ebcc     E0 E4 85 F1 | 	sub	objptr, ##61664
0ebd0     FF FF 3F FF 
0ebd4     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0ebd8     78 00 00 AF 
0ebdc     E0 E4 05 A1 |  if_e	add	objptr, ##61664
0ebe0     F2 00 68 AC |  if_e	wrlong	#0, objptr
0ebe4     78 00 00 AF 
0ebe8     E0 E4 85 A1 |  if_e	sub	objptr, ##61664
0ebec                 | LR__1163
0ebec     A7 F0 03 F6 | 	mov	ptra, fp
0ebf0     B2 00 A0 FD | 	call	#popregs_
0ebf4                 | _do_slow_goto_ret
0ebf4     2D 00 64 FD | 	ret
0ebf8                 | 
0ebf8                 | ' 
0ebf8                 | ' '----------------------- Error processing
0ebf8                 | ' 
0ebf8                 | ' sub do_error
0ebf8                 | _do_error
0ebf8     01 4A 05 F6 | 	mov	COUNT_, #1
0ebfc     A8 00 A0 FD | 	call	#pushregs_
0ec00     6A 00 00 FF 
0ec04     80 E4 05 F1 | 	add	objptr, ##54400
0ec08     F2 18 02 FB | 	rdlong	arg04, objptr
0ec0c     0C 17 02 F6 | 	mov	arg03, arg04
0ec10     01 16 66 F0 | 	shl	arg03, #1
0ec14     0C 17 02 F1 | 	add	arg03, arg04
0ec18     02 16 66 F0 | 	shl	arg03, #2
0ec1c     03 00 00 FF 
0ec20     04 E4 85 F1 | 	sub	objptr, ##1540
0ec24     F2 16 02 F1 | 	add	arg03, objptr
0ec28     0B 1F 02 FB | 	rdlong	local01, arg03
0ec2c                 | ' r=compiledline(lineptr_e).result.uresult
0ec2c                 | ' print "Error ";r;": ";errors$(r)
0ec2c     00 12 06 F6 | 	mov	arg01, #0
0ec30     67 00 00 FF 
0ec34     7C E4 85 F1 | 	sub	objptr, ##52860
0ec38     94 58 B1 FD | 	call	#__system___getiolock_0484
0ec3c     FD 12 02 F6 | 	mov	arg01, result1
0ec40     F4 FE B0 FD | 	call	#__system___lockmem
0ec44     73 01 00 FF 
0ec48     88 15 06 F6 | 	mov	arg02, ##@LR__5147
0ec4c     00 12 06 F6 | 	mov	arg01, #0
0ec50     00 16 06 F6 | 	mov	arg03, #0
0ec54     E8 0B B1 FD | 	call	#__system___basic_print_string
0ec58     00 12 06 F6 | 	mov	arg01, #0
0ec5c     0F 15 02 F6 | 	mov	arg02, local01
0ec60     00 16 06 F6 | 	mov	arg03, #0
0ec64     0A 18 06 F6 | 	mov	arg04, #10
0ec68     58 0C B1 FD | 	call	#__system___basic_print_unsigned
0ec6c     73 01 00 FF 
0ec70     8F 15 06 F6 | 	mov	arg02, ##@LR__5148
0ec74     00 12 06 F6 | 	mov	arg01, #0
0ec78     00 16 06 F6 | 	mov	arg03, #0
0ec7c     C0 0B B1 FD | 	call	#__system___basic_print_string
0ec80     02 1E 66 F0 | 	shl	local01, #2
0ec84     65 00 00 FF 
0ec88     7C E4 05 F1 | 	add	objptr, ##51836
0ec8c     F2 1E 02 F1 | 	add	local01, objptr
0ec90     0F 15 02 FB | 	rdlong	arg02, local01
0ec94     00 12 06 F6 | 	mov	arg01, #0
0ec98     00 16 06 F6 | 	mov	arg03, #0
0ec9c     65 00 00 FF 
0eca0     7C E4 85 F1 | 	sub	objptr, ##51836
0eca4     98 0B B1 FD | 	call	#__system___basic_print_string
0eca8     00 12 06 F6 | 	mov	arg01, #0
0ecac     0A 14 06 F6 | 	mov	arg02, #10
0ecb0     00 16 06 F6 | 	mov	arg03, #0
0ecb4     30 0B B1 FD | 	call	#__system___basic_print_char
0ecb8     00 12 06 F6 | 	mov	arg01, #0
0ecbc     10 58 B1 FD | 	call	#__system___getiolock_0484
0ecc0     FD 00 68 FC | 	wrlong	#0, result1
0ecc4     A7 F0 03 F6 | 	mov	ptra, fp
0ecc8     B2 00 A0 FD | 	call	#popregs_
0eccc                 | _do_error_ret
0eccc     2D 00 64 FD | 	ret
0ecd0                 | 
0ecd0                 | ' 
0ecd0                 | ' 
0ecd0                 | ' '------------------ Assigning to a variable  
0ecd0                 | ' 
0ecd0                 | ' function  convertstring(psaddr as ulong) as string
0ecd0                 | _convertstring
0ecd0     04 4A 05 F6 | 	mov	COUNT_, #4
0ecd4     A8 00 A0 FD | 	call	#pushregs_
0ecd8     09 1F 02 F6 | 	mov	local01, arg01
0ecdc     8C BC B0 FD | 	call	#_pslpeek
0ece0     FD 20 02 F6 | 	mov	local02, result1
0ece4     73 01 00 FF 
0ece8     92 23 06 F6 | 	mov	local03, ##@LR__5149
0ecec                 | ' 'print "in convertstring: psaddr=";psaddr
0ecec                 | ' l=pslpeek(psaddr)
0ecec                 | ' 'print "in convertstring: len=";l
0ecec                 | ' s="" 
0ecec                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0ecec     01 24 06 F6 | 	mov	local04, #1
0ecf0     01 20 06 F1 | 	add	local02, #1
0ecf4                 | LR__1170
0ecf4     10 25 52 F2 | 	cmps	local04, local02 wc
0ecf8     30 00 90 3D |  if_ae	jmp	#LR__1171
0ecfc     0F 13 02 F6 | 	mov	arg01, local01
0ed00     03 12 06 F1 | 	add	arg01, #3
0ed04     12 13 02 F1 | 	add	arg01, local04
0ed08     08 BC B0 FD | 	call	#_pspeek
0ed0c     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0ed10     30 20 B1 FD | 	call	#__system__Chr_S
0ed14     FD 14 02 F6 | 	mov	arg02, result1
0ed18     11 13 02 F6 | 	mov	arg01, local03
0ed1c     74 FE B0 FD | 	call	#__system___string_concat
0ed20     FD 22 02 F6 | 	mov	local03, result1
0ed24     01 24 06 F1 | 	add	local04, #1
0ed28     C8 FF 9F FD | 	jmp	#LR__1170
0ed2c                 | LR__1171
0ed2c                 | ' 'print "in convertstring: str=";s
0ed2c                 | ' return s
0ed2c     11 FB 01 F6 | 	mov	result1, local03
0ed30     A7 F0 03 F6 | 	mov	ptra, fp
0ed34     B2 00 A0 FD | 	call	#popregs_
0ed38                 | _convertstring_ret
0ed38     2D 00 64 FD | 	ret
0ed3c                 | 
0ed3c                 | ' 
0ed3c                 | ' sub do_assign
0ed3c                 | _do_assign
0ed3c     05 4A 05 F6 | 	mov	COUNT_, #5
0ed40     A8 00 A0 FD | 	call	#pushregs_
0ed44     44 F0 07 F1 | 	add	ptra, #68
0ed48     6A 00 00 FF 
0ed4c     80 E4 05 F1 | 	add	objptr, ##54400
0ed50     F2 16 02 FB | 	rdlong	arg03, objptr
0ed54     0B 15 02 F6 | 	mov	arg02, arg03
0ed58     01 14 66 F0 | 	shl	arg02, #1
0ed5c     0B 15 02 F1 | 	add	arg02, arg03
0ed60     02 14 66 F0 | 	shl	arg02, #2
0ed64     03 00 00 FF 
0ed68     04 E4 85 F1 | 	sub	objptr, ##1540
0ed6c     F2 14 02 F1 | 	add	arg02, objptr
0ed70     0A 15 02 FB | 	rdlong	arg02, arg02
0ed74     18 4E 05 F1 | 	add	fp, #24
0ed78     A7 14 62 FC | 	wrlong	arg02, fp
0ed7c                 | ' 
0ed7c                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0ed7c                 | ' 
0ed7c                 | ' if variables(varnum).vartype<array_no_type then 
0ed7c     18 4E 85 F1 | 	sub	fp, #24
0ed80     04 14 66 F0 | 	shl	arg02, #4
0ed84     32 00 00 FF 
0ed88     84 E4 85 F1 | 	sub	objptr, ##25732
0ed8c     F2 14 02 F1 | 	add	arg02, objptr
0ed90     0C 14 06 F1 | 	add	arg02, #12
0ed94     0A 17 02 FB | 	rdlong	arg03, arg02
0ed98     00 17 16 F2 | 	cmp	arg03, #256 wc
0ed9c     34 00 00 FF 
0eda0     F8 E5 85 F1 | 	sub	objptr, ##27128
0eda4     18 01 90 3D |  if_ae	jmp	#LR__1180
0eda8     B4 BA BF FD | 	call	#_pop
0edac     A7 FA 61 FC | 	wrlong	result1, fp
0edb0     04 4E 05 F1 | 	add	fp, #4
0edb4     A7 FC 61 FC | 	wrlong	result2, fp
0edb8     04 4E 05 F1 | 	add	fp, #4
0edbc     A7 FE 61 FC | 	wrlong	result3, fp
0edc0     08 4E 85 F1 | 	sub	fp, #8
0edc4     A7 16 02 FB | 	rdlong	arg03, fp
0edc8     04 4E 05 F1 | 	add	fp, #4
0edcc     A7 14 02 FB | 	rdlong	arg02, fp
0edd0     14 4E 05 F1 | 	add	fp, #20
0edd4     A7 12 02 FB | 	rdlong	arg01, fp
0edd8     04 12 66 F0 | 	shl	arg01, #4
0eddc     34 00 00 FF 
0ede0     F8 E5 05 F1 | 	add	objptr, ##27128
0ede4     F2 12 02 F1 | 	add	arg01, objptr
0ede8     04 12 06 F1 | 	add	arg01, #4
0edec     09 17 62 FC | 	wrlong	arg03, arg01
0edf0     A7 16 02 FB | 	rdlong	arg03, fp
0edf4     04 16 66 F0 | 	shl	arg03, #4
0edf8     F2 16 02 F1 | 	add	arg03, objptr
0edfc     08 16 06 F1 | 	add	arg03, #8
0ee00     0B 15 62 FC | 	wrlong	arg02, arg03
0ee04     A7 16 02 FB | 	rdlong	arg03, fp
0ee08     04 16 66 F0 | 	shl	arg03, #4
0ee0c     F2 16 02 F1 | 	add	arg03, objptr
0ee10     10 4E 85 F1 | 	sub	fp, #16
0ee14     A7 14 02 FB | 	rdlong	arg02, fp
0ee18     0C 16 06 F1 | 	add	arg03, #12
0ee1c     0B 15 62 FC | 	wrlong	arg02, arg03
0ee20                 | '   t1=pop() 
0ee20                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0ee20                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0ee20                 | '   if variables(varnum).vartype<>result_string2 then return
0ee20     10 4E 05 F1 | 	add	fp, #16
0ee24     A7 16 02 FB | 	rdlong	arg03, fp
0ee28     18 4E 85 F1 | 	sub	fp, #24
0ee2c     04 16 66 F0 | 	shl	arg03, #4
0ee30     F2 16 02 F1 | 	add	arg03, objptr
0ee34     0C 16 06 F1 | 	add	arg03, #12
0ee38     0B 17 02 FB | 	rdlong	arg03, arg03
0ee3c     2B 16 0E F2 | 	cmp	arg03, #43 wz
0ee40     34 00 00 FF 
0ee44     F8 E5 85 F1 | 	sub	objptr, ##27128
0ee48     E4 04 90 5D |  if_ne	jmp	#LR__1203
0ee4c     18 4E 05 F1 | 	add	fp, #24
0ee50     A7 16 02 FB | 	rdlong	arg03, fp
0ee54     0B 1F 02 F6 | 	mov	local01, arg03
0ee58     04 1E 66 F0 | 	shl	local01, #4
0ee5c     34 00 00 FF 
0ee60     F8 E5 05 F1 | 	add	objptr, ##27128
0ee64     F2 1E 02 F1 | 	add	local01, objptr
0ee68     18 4E 85 F1 | 	sub	fp, #24
0ee6c     04 16 66 F0 | 	shl	arg03, #4
0ee70     F2 16 02 F1 | 	add	arg03, objptr
0ee74     04 16 06 F1 | 	add	arg03, #4
0ee78     0B 13 02 FB | 	rdlong	arg01, arg03
0ee7c     34 00 00 FF 
0ee80     F8 E5 85 F1 | 	sub	objptr, ##27128
0ee84     48 FE BF FD | 	call	#_convertstring
0ee88     04 1E 06 F1 | 	add	local01, #4
0ee8c     0F FB 61 FC | 	wrlong	result1, local01
0ee90     18 4E 05 F1 | 	add	fp, #24
0ee94     A7 1E 02 FB | 	rdlong	local01, fp
0ee98     18 4E 85 F1 | 	sub	fp, #24
0ee9c     04 1E 66 F0 | 	shl	local01, #4
0eea0     34 00 00 FF 
0eea4     F8 E5 05 F1 | 	add	objptr, ##27128
0eea8     F2 1E 02 F1 | 	add	local01, objptr
0eeac     0C 1E 06 F1 | 	add	local01, #12
0eeb0     0F 3F 68 FC | 	wrlong	#31, local01
0eeb4                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0eeb4                 | '   variables(varnum).vartype=result_string
0eeb4                 | '   return
0eeb4     34 00 00 FF 
0eeb8     F8 E5 85 F1 | 	sub	objptr, ##27128
0eebc     70 04 90 FD | 	jmp	#LR__1203
0eec0                 | LR__1180
0eec0                 | ' for i=0 to 2 : arrid(i)=0 : next i
0eec0     1C 4E 05 F1 | 	add	fp, #28
0eec4     A7 00 68 FC | 	wrlong	#0, fp
0eec8     97 16 48 FB | 	callpa	#(@LR__1182-@LR__1181)>>2,fcache_load_ptr_
0eecc                 | LR__1181
0eecc     A7 1E 02 FB | 	rdlong	local01, fp
0eed0     02 1E 66 F0 | 	shl	local01, #2
0eed4     18 4E 05 F1 | 	add	fp, #24
0eed8     A7 1E 02 F1 | 	add	local01, fp
0eedc     0F 01 68 FC | 	wrlong	#0, local01
0eee0     18 4E 85 F1 | 	sub	fp, #24
0eee4     A7 1E 02 FB | 	rdlong	local01, fp
0eee8     01 1E 06 F1 | 	add	local01, #1
0eeec     A7 1E 62 FC | 	wrlong	local01, fp
0eef0     03 1E 16 F2 | 	cmp	local01, #3 wc
0eef4     D4 FF 9F CD |  if_b	jmp	#LR__1181
0eef8                 | LR__1182
0eef8     6A 00 00 FF 
0eefc     80 E4 05 F1 | 	add	objptr, ##54400
0ef00     F2 16 02 FB | 	rdlong	arg03, objptr
0ef04     0B 1F 02 F6 | 	mov	local01, arg03
0ef08     01 1E 66 F0 | 	shl	local01, #1
0ef0c     0B 1F 02 F1 | 	add	local01, arg03
0ef10     02 1E 66 F0 | 	shl	local01, #2
0ef14     03 00 00 FF 
0ef18     04 E4 85 F1 | 	sub	objptr, ##1540
0ef1c     F2 1E 02 F1 | 	add	local01, objptr
0ef20     04 1E 06 F1 | 	add	local01, #4
0ef24     0F 21 02 FB | 	rdlong	local02, local01
0ef28     04 4E 05 F1 | 	add	fp, #4
0ef2c     A7 20 62 FC | 	wrlong	local02, fp
0ef30     20 4E 85 F1 | 	sub	fp, #32
0ef34     67 00 00 FF 
0ef38     7C E4 85 F1 | 	sub	objptr, ##52860
0ef3c     20 B9 BF FD | 	call	#_pop
0ef40     A7 FA 61 FC | 	wrlong	result1, fp
0ef44     04 4E 05 F1 | 	add	fp, #4
0ef48     A7 FC 61 FC | 	wrlong	result2, fp
0ef4c     04 4E 05 F1 | 	add	fp, #4
0ef50     A7 FE 61 FC | 	wrlong	result3, fp
0ef54                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0ef54                 | ' t1=pop() ' var value
0ef54                 | ' if numpar>0 then
0ef54     18 4E 05 F1 | 	add	fp, #24
0ef58     A7 22 02 FB | 	rdlong	local03, fp
0ef5c     20 4E 85 F1 | 	sub	fp, #32
0ef60     01 22 16 F2 | 	cmp	local03, #1 wc
0ef64     78 00 90 CD |  if_b	jmp	#LR__1185
0ef68                 | '   for i=numpar to 1 step -1
0ef68     20 4E 05 F1 | 	add	fp, #32
0ef6c     A7 24 0A FB | 	rdlong	local04, fp wz
0ef70     04 4E 85 F1 | 	sub	fp, #4
0ef74     A7 24 62 FC | 	wrlong	local04, fp
0ef78     1C 4E 85 F1 | 	sub	fp, #28
0ef7c     60 00 90 AD |  if_e	jmp	#LR__1184
0ef80                 | LR__1183
0ef80     DC B8 BF FD | 	call	#_pop
0ef84     0C 4E 05 F1 | 	add	fp, #12
0ef88     A7 FA 61 FC | 	wrlong	result1, fp
0ef8c     04 4E 05 F1 | 	add	fp, #4
0ef90     A7 FC 61 FC | 	wrlong	result2, fp
0ef94     04 4E 05 F1 | 	add	fp, #4
0ef98     A7 FE 61 FC | 	wrlong	result3, fp
0ef9c     08 4E 05 F1 | 	add	fp, #8
0efa0     A7 22 02 FB | 	rdlong	local03, fp
0efa4     01 22 86 F1 | 	sub	local03, #1
0efa8     02 22 66 F0 | 	shl	local03, #2
0efac     18 4E 05 F1 | 	add	fp, #24
0efb0     A7 22 02 F1 | 	add	local03, fp
0efb4     28 4E 85 F1 | 	sub	fp, #40
0efb8     A7 12 02 F6 | 	mov	arg01, fp
0efbc     0C 4E 85 F1 | 	sub	fp, #12
0efc0     30 45 B0 FD | 	call	#_converttoint
0efc4     11 FB 61 FC | 	wrlong	result1, local03
0efc8     1C 4E 05 F1 | 	add	fp, #28
0efcc     A7 24 02 FB | 	rdlong	local04, fp
0efd0     01 24 8E F1 | 	sub	local04, #1 wz
0efd4     A7 24 62 FC | 	wrlong	local04, fp
0efd8     1C 4E 85 F1 | 	sub	fp, #28
0efdc     A0 FF 9F 5D |  if_ne	jmp	#LR__1183
0efe0                 | LR__1184
0efe0                 | LR__1185
0efe0     18 4E 05 F1 | 	add	fp, #24
0efe4     A7 1E 02 FB | 	rdlong	local01, fp
0efe8     04 1E 66 F0 | 	shl	local01, #4
0efec     34 00 00 FF 
0eff0     F8 E5 05 F1 | 	add	objptr, ##27128
0eff4     F2 1E 02 F1 | 	add	local01, objptr
0eff8     04 1E 06 F1 | 	add	local01, #4
0effc     0F 13 02 FB | 	rdlong	arg01, local01
0f000     0C 4E 05 F1 | 	add	fp, #12
0f004     A7 12 62 FC | 	wrlong	arg01, fp
0f008     24 4E 85 F1 | 	sub	fp, #36
0f00c     34 00 00 FF 
0f010     F8 E5 85 F1 | 	sub	objptr, ##27128
0f014     54 B9 B0 FD | 	call	#_pslpeek
0f018     FD 24 32 F9 | 	getword	local04, result1, #0
0f01c     28 4E 05 F1 | 	add	fp, #40
0f020     A7 24 62 FC | 	wrlong	local04, fp
0f024     04 4E 85 F1 | 	sub	fp, #4
0f028     A7 12 02 FB | 	rdlong	arg01, fp
0f02c     24 4E 85 F1 | 	sub	fp, #36
0f030     02 12 06 F1 | 	add	arg01, #2
0f034     DC B8 B0 FD | 	call	#_pspeek
0f038     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f03c     2C 4E 05 F1 | 	add	fp, #44
0f040     A7 FA 61 FC | 	wrlong	result1, fp
0f044                 | ' esize=pspeek(arrptr+2)
0f044                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0f044     08 4E 85 F1 | 	sub	fp, #8
0f048     A7 12 02 FB | 	rdlong	arg01, fp
0f04c     24 4E 85 F1 | 	sub	fp, #36
0f050     04 12 06 F1 | 	add	arg01, #4
0f054     14 B9 B0 FD | 	call	#_pslpeek
0f058     FD 24 02 F6 | 	mov	local04, result1
0f05c     34 4E 05 F1 | 	add	fp, #52
0f060     A7 1E 02 FB | 	rdlong	local01, fp
0f064     34 4E 85 F1 | 	sub	fp, #52
0f068     12 1F 12 F2 | 	cmp	local01, local04 wc
0f06c     54 00 90 3D |  if_ae	jmp	#LR__1186
0f070     24 4E 05 F1 | 	add	fp, #36
0f074     A7 12 02 FB | 	rdlong	arg01, fp
0f078     24 4E 85 F1 | 	sub	fp, #36
0f07c     08 12 06 F1 | 	add	arg01, #8
0f080     E8 B8 B0 FD | 	call	#_pslpeek
0f084     FD 1E 02 F6 | 	mov	local01, result1
0f088     38 4E 05 F1 | 	add	fp, #56
0f08c     A7 24 02 FB | 	rdlong	local04, fp
0f090     38 4E 85 F1 | 	sub	fp, #56
0f094     0F 25 12 F2 | 	cmp	local04, local01 wc
0f098     28 00 90 3D |  if_ae	jmp	#LR__1186
0f09c     24 4E 05 F1 | 	add	fp, #36
0f0a0     A7 12 02 FB | 	rdlong	arg01, fp
0f0a4     24 4E 85 F1 | 	sub	fp, #36
0f0a8     0C 12 06 F1 | 	add	arg01, #12
0f0ac     BC B8 B0 FD | 	call	#_pslpeek
0f0b0     3C 4E 05 F1 | 	add	fp, #60
0f0b4     A7 24 02 FB | 	rdlong	local04, fp
0f0b8     3C 4E 85 F1 | 	sub	fp, #60
0f0bc     FD 24 12 F2 | 	cmp	local04, result1 wc
0f0c0     0C 00 90 CD |  if_b	jmp	#LR__1187
0f0c4                 | LR__1186
0f0c4     31 12 06 F6 | 	mov	arg01, #49
0f0c8     0C B6 B0 FD | 	call	#_printerror
0f0cc     60 02 90 FD | 	jmp	#LR__1203
0f0d0                 | LR__1187
0f0d0     24 4E 05 F1 | 	add	fp, #36
0f0d4     A7 12 02 FB | 	rdlong	arg01, fp
0f0d8     09 25 02 F6 | 	mov	local04, arg01
0f0dc     10 24 06 F1 | 	add	local04, #16
0f0e0     24 4E 85 F1 | 	sub	fp, #36
0f0e4     04 12 06 F1 | 	add	arg01, #4
0f0e8     80 B8 B0 FD | 	call	#_pslpeek
0f0ec     FD 1E 02 F6 | 	mov	local01, result1
0f0f0     38 4E 05 F1 | 	add	fp, #56
0f0f4     A7 20 02 FB | 	rdlong	local02, fp
0f0f8     10 1F 02 FD | 	qmul	local01, local02
0f0fc     04 4E 85 F1 | 	sub	fp, #4
0f100     A7 22 02 FB | 	rdlong	local03, fp
0f104     10 4E 85 F1 | 	sub	fp, #16
0f108     A7 12 02 FB | 	rdlong	arg01, fp
0f10c     24 4E 85 F1 | 	sub	fp, #36
0f110     08 12 06 F1 | 	add	arg01, #8
0f114     18 20 62 FD | 	getqx	local02
0f118     10 23 02 F1 | 	add	local03, local02
0f11c     4C B8 B0 FD | 	call	#_pslpeek
0f120     FD 20 02 F6 | 	mov	local02, result1
0f124     24 4E 05 F1 | 	add	fp, #36
0f128     A7 12 02 FB | 	rdlong	arg01, fp
0f12c     24 4E 85 F1 | 	sub	fp, #36
0f130     04 12 06 F1 | 	add	arg01, #4
0f134     34 B8 B0 FD | 	call	#_pslpeek
0f138     FD 20 02 FD | 	qmul	local02, result1
0f13c     3C 4E 05 F1 | 	add	fp, #60
0f140     A7 20 02 FB | 	rdlong	local02, fp
0f144     18 1E 62 FD | 	getqx	local01
0f148     10 1F 02 FD | 	qmul	local01, local02
0f14c     10 4E 85 F1 | 	sub	fp, #16
0f150     A7 20 02 FB | 	rdlong	local02, fp
0f154     18 1E 62 FD | 	getqx	local01
0f158     0F 23 02 F1 | 	add	local03, local01
0f15c     11 21 02 FD | 	qmul	local02, local03
0f160     04 4E 05 F1 | 	add	fp, #4
0f164                 | ' 
0f164                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0f164                 | ' select case arrtype
0f164     18 22 62 FD | 	getqx	local03
0f168     11 25 02 F1 | 	add	local04, local03
0f16c     A7 24 62 FC | 	wrlong	local04, fp
0f170     08 4E 85 F1 | 	sub	fp, #8
0f174     A7 26 02 FB | 	rdlong	local05, fp
0f178     28 4E 85 F1 | 	sub	fp, #40
0f17c     00 27 86 F1 | 	sub	local05, #256
0f180     0C 26 26 F3 | 	fle	local05, #12
0f184     30 26 62 FD | 	jmprel	local05
0f188                 | LR__1188
0f188     30 00 90 FD | 	jmp	#LR__1189
0f18c     58 00 90 FD | 	jmp	#LR__1190
0f190     6C 00 90 FD | 	jmp	#LR__1191
0f194     80 00 90 FD | 	jmp	#LR__1192
0f198     B0 00 90 FD | 	jmp	#LR__1193
0f19c     E0 00 90 FD | 	jmp	#LR__1194
0f1a0     F4 00 90 FD | 	jmp	#LR__1195
0f1a4     08 01 90 FD | 	jmp	#LR__1196
0f1a8     1C 01 90 FD | 	jmp	#LR__1197
0f1ac     30 01 90 FD | 	jmp	#LR__1198
0f1b0     44 01 90 FD | 	jmp	#LR__1199
0f1b4     58 01 90 FD | 	jmp	#LR__1200
0f1b8     6C 01 90 FD | 	jmp	#LR__1201
0f1bc                 | LR__1189
0f1bc     A7 12 02 F6 | 	mov	arg01, fp
0f1c0     30 4E 05 F1 | 	add	fp, #48
0f1c4     A7 14 02 FB | 	rdlong	arg02, fp
0f1c8     30 4E 85 F1 | 	sub	fp, #48
0f1cc     0C 16 06 F6 | 	mov	arg03, #12
0f1d0     0B 00 00 FF 
0f1d4     CC E4 05 F1 | 	add	objptr, ##5836
0f1d8     D4 ED B0 FD | 	call	#_psram_spin2_write
0f1dc     0B 00 00 FF 
0f1e0     CC E4 85 F1 | 	sub	objptr, ##5836
0f1e4     48 01 90 FD | 	jmp	#LR__1202
0f1e8                 | LR__1190
0f1e8     30 4E 05 F1 | 	add	fp, #48
0f1ec     A7 12 02 FB | 	rdlong	arg01, fp
0f1f0     30 4E 85 F1 | 	sub	fp, #48
0f1f4     A7 14 02 FB | 	rdlong	arg02, fp
0f1f8     D0 B6 B0 FD | 	call	#_pspoke
0f1fc     30 01 90 FD | 	jmp	#LR__1202
0f200                 | LR__1191
0f200     30 4E 05 F1 | 	add	fp, #48
0f204     A7 12 02 FB | 	rdlong	arg01, fp
0f208     30 4E 85 F1 | 	sub	fp, #48
0f20c     A7 14 02 FB | 	rdlong	arg02, fp
0f210     B8 B6 B0 FD | 	call	#_pspoke
0f214     18 01 90 FD | 	jmp	#LR__1202
0f218                 | LR__1192
0f218     30 4E 05 F1 | 	add	fp, #48
0f21c     A7 12 02 FB | 	rdlong	arg01, fp
0f220     30 4E 85 F1 | 	sub	fp, #48
0f224     A7 14 02 FB | 	rdlong	arg02, fp
0f228     A0 B6 B0 FD | 	call	#_pspoke
0f22c     30 4E 05 F1 | 	add	fp, #48
0f230     A7 12 02 FB | 	rdlong	arg01, fp
0f234     30 4E 85 F1 | 	sub	fp, #48
0f238     01 12 06 F1 | 	add	arg01, #1
0f23c     A7 14 02 FB | 	rdlong	arg02, fp
0f240     08 14 46 F0 | 	shr	arg02, #8
0f244     84 B6 B0 FD | 	call	#_pspoke
0f248     E4 00 90 FD | 	jmp	#LR__1202
0f24c                 | LR__1193
0f24c     30 4E 05 F1 | 	add	fp, #48
0f250     A7 12 02 FB | 	rdlong	arg01, fp
0f254     30 4E 85 F1 | 	sub	fp, #48
0f258     A7 14 02 FB | 	rdlong	arg02, fp
0f25c     6C B6 B0 FD | 	call	#_pspoke
0f260     30 4E 05 F1 | 	add	fp, #48
0f264     A7 12 02 FB | 	rdlong	arg01, fp
0f268     30 4E 85 F1 | 	sub	fp, #48
0f26c     01 12 06 F1 | 	add	arg01, #1
0f270     A7 14 02 FB | 	rdlong	arg02, fp
0f274     08 14 46 F0 | 	shr	arg02, #8
0f278     50 B6 B0 FD | 	call	#_pspoke
0f27c     B0 00 90 FD | 	jmp	#LR__1202
0f280                 | LR__1194
0f280     30 4E 05 F1 | 	add	fp, #48
0f284     A7 12 02 FB | 	rdlong	arg01, fp
0f288     30 4E 85 F1 | 	sub	fp, #48
0f28c     A7 14 02 FB | 	rdlong	arg02, fp
0f290     A8 B5 B0 FD | 	call	#_pslpoke
0f294     98 00 90 FD | 	jmp	#LR__1202
0f298                 | LR__1195
0f298     30 4E 05 F1 | 	add	fp, #48
0f29c     A7 12 02 FB | 	rdlong	arg01, fp
0f2a0     30 4E 85 F1 | 	sub	fp, #48
0f2a4     A7 14 02 FB | 	rdlong	arg02, fp
0f2a8     90 B5 B0 FD | 	call	#_pslpoke
0f2ac     80 00 90 FD | 	jmp	#LR__1202
0f2b0                 | LR__1196
0f2b0     30 4E 05 F1 | 	add	fp, #48
0f2b4     A7 12 02 FB | 	rdlong	arg01, fp
0f2b8     30 4E 85 F1 | 	sub	fp, #48
0f2bc     A7 14 02 FB | 	rdlong	arg02, fp
0f2c0     78 B5 B0 FD | 	call	#_pslpoke
0f2c4     68 00 90 FD | 	jmp	#LR__1202
0f2c8                 | LR__1197
0f2c8     30 4E 05 F1 | 	add	fp, #48
0f2cc     A7 12 02 FB | 	rdlong	arg01, fp
0f2d0     30 4E 85 F1 | 	sub	fp, #48
0f2d4     A7 14 02 FB | 	rdlong	arg02, fp
0f2d8     60 B5 B0 FD | 	call	#_pslpoke
0f2dc     50 00 90 FD | 	jmp	#LR__1202
0f2e0                 | LR__1198
0f2e0     30 4E 05 F1 | 	add	fp, #48
0f2e4     A7 12 02 FB | 	rdlong	arg01, fp
0f2e8     30 4E 85 F1 | 	sub	fp, #48
0f2ec     A7 14 02 FB | 	rdlong	arg02, fp
0f2f0     48 B5 B0 FD | 	call	#_pslpoke
0f2f4     38 00 90 FD | 	jmp	#LR__1202
0f2f8                 | LR__1199
0f2f8     30 4E 05 F1 | 	add	fp, #48
0f2fc     A7 12 02 FB | 	rdlong	arg01, fp
0f300     30 4E 85 F1 | 	sub	fp, #48
0f304     A7 14 02 FB | 	rdlong	arg02, fp
0f308     30 B5 B0 FD | 	call	#_pslpoke
0f30c     20 00 90 FD | 	jmp	#LR__1202
0f310                 | LR__1200
0f310     30 4E 05 F1 | 	add	fp, #48
0f314     A7 12 02 FB | 	rdlong	arg01, fp
0f318     30 4E 85 F1 | 	sub	fp, #48
0f31c     A7 14 02 FB | 	rdlong	arg02, fp
0f320     18 B5 B0 FD | 	call	#_pslpoke
0f324     08 00 90 FD | 	jmp	#LR__1202
0f328                 | LR__1201
0f328     2F 12 06 F6 | 	mov	arg01, #47
0f32c     A8 B3 B0 FD | 	call	#_printerror
0f330                 | LR__1202
0f330                 | LR__1203
0f330     A7 F0 03 F6 | 	mov	ptra, fp
0f334     B2 00 A0 FD | 	call	#popregs_
0f338                 | _do_assign_ret
0f338     2D 00 64 FD | 	ret
0f33c                 | 
0f33c                 | ' 
0f33c                 | ' 
0f33c                 | ' ' --------------------- Read a variable and push to the stack
0f33c                 | ' 
0f33c                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0f33c                 | ' 
0f33c                 | ' sub do_getvar
0f33c                 | _do_getvar
0f33c     04 4A 05 F6 | 	mov	COUNT_, #4
0f340     A8 00 A0 FD | 	call	#pushregs_
0f344     3C F0 07 F1 | 	add	ptra, #60
0f348                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0f348                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0f348     6A 00 00 FF 
0f34c     80 E4 05 F1 | 	add	objptr, ##54400
0f350     F2 1E 02 FB | 	rdlong	local01, objptr
0f354     0F 17 02 F6 | 	mov	arg03, local01
0f358     01 16 66 F0 | 	shl	arg03, #1
0f35c     0F 17 02 F1 | 	add	arg03, local01
0f360     02 16 66 F0 | 	shl	arg03, #2
0f364     03 00 00 FF 
0f368     04 E4 85 F1 | 	sub	objptr, ##1540
0f36c     F2 16 02 F1 | 	add	arg03, objptr
0f370     04 16 06 F1 | 	add	arg03, #4
0f374     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0f378     67 00 00 FF 
0f37c     7C E4 85 F1 | 	sub	objptr, ##52860
0f380     C4 00 90 5D |  if_ne	jmp	#LR__1211
0f384     6A 00 00 FF 
0f388     80 E4 05 F1 | 	add	objptr, ##54400
0f38c     F2 1E 02 FB | 	rdlong	local01, objptr
0f390     0F 13 02 F6 | 	mov	arg01, local01
0f394     01 12 66 F0 | 	shl	arg01, #1
0f398     0F 13 02 F1 | 	add	arg01, local01
0f39c     02 12 66 F0 | 	shl	arg01, #2
0f3a0     03 00 00 FF 
0f3a4     04 E4 85 F1 | 	sub	objptr, ##1540
0f3a8     F2 12 02 F1 | 	add	arg01, objptr
0f3ac     09 1F 02 FB | 	rdlong	local01, arg01
0f3b0     04 1E 66 F0 | 	shl	local01, #4
0f3b4     32 00 00 FF 
0f3b8     84 E4 85 F1 | 	sub	objptr, ##25732
0f3bc     F2 1E 02 F1 | 	add	local01, objptr
0f3c0     04 1E 06 F1 | 	add	local01, #4
0f3c4     0F 13 02 FB | 	rdlong	arg01, local01
0f3c8     04 1E 06 F1 | 	add	local01, #4
0f3cc     0F 1F 02 FB | 	rdlong	local01, local01
0f3d0     A7 12 62 FC | 	wrlong	arg01, fp
0f3d4     04 4E 05 F1 | 	add	fp, #4
0f3d8     A7 1E 62 FC | 	wrlong	local01, fp
0f3dc     35 00 00 FF 
0f3e0     88 E4 05 F1 | 	add	objptr, ##27272
0f3e4     F2 1E 02 FB | 	rdlong	local01, objptr
0f3e8     0F 13 02 F6 | 	mov	arg01, local01
0f3ec     01 12 66 F0 | 	shl	arg01, #1
0f3f0     0F 13 02 F1 | 	add	arg01, local01
0f3f4     02 12 66 F0 | 	shl	arg01, #2
0f3f8     03 00 00 FF 
0f3fc     04 E4 85 F1 | 	sub	objptr, ##1540
0f400     F2 12 02 F1 | 	add	arg01, objptr
0f404     09 1F 02 FB | 	rdlong	local01, arg01
0f408     04 1E 66 F0 | 	shl	local01, #4
0f40c     32 00 00 FF 
0f410     84 E4 85 F1 | 	sub	objptr, ##25732
0f414     F2 1E 02 F1 | 	add	local01, objptr
0f418     0C 1E 06 F1 | 	add	local01, #12
0f41c     0F 1F 02 FB | 	rdlong	local01, local01
0f420     04 4E 05 F1 | 	add	fp, #4
0f424     A7 1E 62 FC | 	wrlong	local01, fp
0f428                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0f428                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0f428                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0f428     08 4E 85 F1 | 	sub	fp, #8
0f42c     00 1F 16 F2 | 	cmp	local01, #256 wc
0f430     34 00 00 FF 
0f434     F8 E5 85 F1 | 	sub	objptr, ##27128
0f438     0C 00 90 3D |  if_ae	jmp	#LR__1210
0f43c     A7 12 02 F6 | 	mov	arg01, fp
0f440     B4 B4 BF FD | 	call	#_push
0f444     A0 04 90 FD | 	jmp	#LR__1232
0f448                 | LR__1210
0f448                 | LR__1211
0f448     6A 00 00 FF 
0f44c     80 E4 05 F1 | 	add	objptr, ##54400
0f450     F2 16 02 FB | 	rdlong	arg03, objptr
0f454     0B 15 02 F6 | 	mov	arg02, arg03
0f458     01 14 66 F0 | 	shl	arg02, #1
0f45c     0B 15 02 F1 | 	add	arg02, arg03
0f460     02 14 66 F0 | 	shl	arg02, #2
0f464     03 00 00 FF 
0f468     04 E4 85 F1 | 	sub	objptr, ##1540
0f46c     F2 14 02 F1 | 	add	arg02, objptr
0f470     0A 17 02 FB | 	rdlong	arg03, arg02
0f474     04 16 66 F0 | 	shl	arg03, #4
0f478     32 00 00 FF 
0f47c     84 E4 85 F1 | 	sub	objptr, ##25732
0f480     F2 16 02 F1 | 	add	arg03, objptr
0f484     04 16 06 F1 | 	add	arg03, #4
0f488     0B 13 02 FB | 	rdlong	arg01, arg03
0f48c     0C 4E 05 F1 | 	add	fp, #12
0f490     A7 12 62 FC | 	wrlong	arg01, fp
0f494     0C 4E 85 F1 | 	sub	fp, #12
0f498     34 00 00 FF 
0f49c     F8 E5 85 F1 | 	sub	objptr, ##27128
0f4a0     C8 B4 B0 FD | 	call	#_pslpeek
0f4a4     FD FA 31 F9 | 	getword	result1, result1, #0
0f4a8     10 4E 05 F1 | 	add	fp, #16
0f4ac     A7 FA 61 FC | 	wrlong	result1, fp
0f4b0     6A 00 00 FF 
0f4b4     80 E4 05 F1 | 	add	objptr, ##54400
0f4b8     F2 16 02 FB | 	rdlong	arg03, objptr
0f4bc     0B 15 02 F6 | 	mov	arg02, arg03
0f4c0     01 14 66 F0 | 	shl	arg02, #1
0f4c4     0B 15 02 F1 | 	add	arg02, arg03
0f4c8     02 14 66 F0 | 	shl	arg02, #2
0f4cc     03 00 00 FF 
0f4d0     04 E4 85 F1 | 	sub	objptr, ##1540
0f4d4     F2 14 02 F1 | 	add	arg02, objptr
0f4d8     04 14 06 F1 | 	add	arg02, #4
0f4dc     0A 17 02 FB | 	rdlong	arg03, arg02
0f4e0     04 4E 05 F1 | 	add	fp, #4
0f4e4     A7 16 62 FC | 	wrlong	arg03, fp
0f4e8     08 4E 85 F1 | 	sub	fp, #8
0f4ec     A7 12 02 FB | 	rdlong	arg01, fp
0f4f0     0C 4E 85 F1 | 	sub	fp, #12
0f4f4     02 12 06 F1 | 	add	arg01, #2
0f4f8     67 00 00 FF 
0f4fc     7C E4 85 F1 | 	sub	objptr, ##52860
0f500     10 B4 B0 FD | 	call	#_pspeek
0f504     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f508     18 4E 05 F1 | 	add	fp, #24
0f50c     A7 FA 61 FC | 	wrlong	result1, fp
0f510     0C 4E 85 F1 | 	sub	fp, #12
0f514     A7 12 02 FB | 	rdlong	arg01, fp
0f518     0C 4E 85 F1 | 	sub	fp, #12
0f51c     04 12 06 F1 | 	add	arg01, #4
0f520     48 B4 B0 FD | 	call	#_pslpeek
0f524     1C 4E 05 F1 | 	add	fp, #28
0f528     A7 FA 61 FC | 	wrlong	result1, fp
0f52c     10 4E 85 F1 | 	sub	fp, #16
0f530     A7 12 02 FB | 	rdlong	arg01, fp
0f534     0C 4E 85 F1 | 	sub	fp, #12
0f538     08 12 06 F1 | 	add	arg01, #8
0f53c     2C B4 B0 FD | 	call	#_pslpeek
0f540     20 4E 05 F1 | 	add	fp, #32
0f544     A7 FA 61 FC | 	wrlong	result1, fp
0f548     14 4E 85 F1 | 	sub	fp, #20
0f54c     A7 12 02 FB | 	rdlong	arg01, fp
0f550     0C 4E 85 F1 | 	sub	fp, #12
0f554     0C 12 06 F1 | 	add	arg01, #12
0f558     10 B4 B0 FD | 	call	#_pslpeek
0f55c     24 4E 05 F1 | 	add	fp, #36
0f560     A7 FA 61 FC | 	wrlong	result1, fp
0f564                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0f564                 | ' esize=pspeek(arrptr+2)
0f564                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0f564                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0f564                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0f564                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0f564     10 4E 85 F1 | 	sub	fp, #16
0f568     A7 16 02 FB | 	rdlong	arg03, fp
0f56c     14 4E 85 F1 | 	sub	fp, #20
0f570     03 16 16 F2 | 	cmp	arg03, #3 wc
0f574     38 00 90 CD |  if_b	jmp	#LR__1212
0f578     E4 B2 BF FD | 	call	#_pop
0f57c     FF 16 02 F6 | 	mov	arg03, result3
0f580     A7 FA 61 FC | 	wrlong	result1, fp
0f584     04 4E 05 F1 | 	add	fp, #4
0f588     A7 FC 61 FC | 	wrlong	result2, fp
0f58c     04 4E 05 F1 | 	add	fp, #4
0f590     A7 16 62 FC | 	wrlong	arg03, fp
0f594     08 4E 85 F1 | 	sub	fp, #8
0f598     A7 12 02 F6 | 	mov	arg01, fp
0f59c     54 3F B0 FD | 	call	#_converttoint
0f5a0     30 4E 05 F1 | 	add	fp, #48
0f5a4     A7 FA 61 FC | 	wrlong	result1, fp
0f5a8     30 4E 85 F1 | 	sub	fp, #48
0f5ac     0C 00 90 FD | 	jmp	#LR__1213
0f5b0                 | LR__1212
0f5b0     30 4E 05 F1 | 	add	fp, #48
0f5b4     A7 00 68 FC | 	wrlong	#0, fp
0f5b8     30 4E 85 F1 | 	sub	fp, #48
0f5bc                 | LR__1213
0f5bc                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0f5bc     14 4E 05 F1 | 	add	fp, #20
0f5c0     A7 16 02 FB | 	rdlong	arg03, fp
0f5c4     14 4E 85 F1 | 	sub	fp, #20
0f5c8     02 16 16 F2 | 	cmp	arg03, #2 wc
0f5cc     38 00 90 CD |  if_b	jmp	#LR__1214
0f5d0     8C B2 BF FD | 	call	#_pop
0f5d4     FF 16 02 F6 | 	mov	arg03, result3
0f5d8     A7 FA 61 FC | 	wrlong	result1, fp
0f5dc     04 4E 05 F1 | 	add	fp, #4
0f5e0     A7 FC 61 FC | 	wrlong	result2, fp
0f5e4     04 4E 05 F1 | 	add	fp, #4
0f5e8     A7 16 62 FC | 	wrlong	arg03, fp
0f5ec     08 4E 85 F1 | 	sub	fp, #8
0f5f0     A7 12 02 F6 | 	mov	arg01, fp
0f5f4     FC 3E B0 FD | 	call	#_converttoint
0f5f8     2C 4E 05 F1 | 	add	fp, #44
0f5fc     A7 FA 61 FC | 	wrlong	result1, fp
0f600     2C 4E 85 F1 | 	sub	fp, #44
0f604     0C 00 90 FD | 	jmp	#LR__1215
0f608                 | LR__1214
0f608     2C 4E 05 F1 | 	add	fp, #44
0f60c     A7 00 68 FC | 	wrlong	#0, fp
0f610     2C 4E 85 F1 | 	sub	fp, #44
0f614                 | LR__1215
0f614                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0f614     14 4E 05 F1 | 	add	fp, #20
0f618     A7 16 02 FB | 	rdlong	arg03, fp
0f61c     14 4E 85 F1 | 	sub	fp, #20
0f620     01 16 16 F2 | 	cmp	arg03, #1 wc
0f624     38 00 90 CD |  if_b	jmp	#LR__1216
0f628     34 B2 BF FD | 	call	#_pop
0f62c     FF 16 02 F6 | 	mov	arg03, result3
0f630     A7 FA 61 FC | 	wrlong	result1, fp
0f634     04 4E 05 F1 | 	add	fp, #4
0f638     A7 FC 61 FC | 	wrlong	result2, fp
0f63c     04 4E 05 F1 | 	add	fp, #4
0f640     A7 16 62 FC | 	wrlong	arg03, fp
0f644     08 4E 85 F1 | 	sub	fp, #8
0f648     A7 12 02 F6 | 	mov	arg01, fp
0f64c     A4 3E B0 FD | 	call	#_converttoint
0f650     28 4E 05 F1 | 	add	fp, #40
0f654     A7 FA 61 FC | 	wrlong	result1, fp
0f658     28 4E 85 F1 | 	sub	fp, #40
0f65c     0C 00 90 FD | 	jmp	#LR__1217
0f660                 | LR__1216
0f660     28 4E 05 F1 | 	add	fp, #40
0f664     A7 00 68 FC | 	wrlong	#0, fp
0f668     28 4E 85 F1 | 	sub	fp, #40
0f66c                 | LR__1217
0f66c     0C 4E 05 F1 | 	add	fp, #12
0f670     A7 20 02 FB | 	rdlong	local02, fp
0f674     1C 4E 05 F1 | 	add	fp, #28
0f678     A7 22 02 FB | 	rdlong	local03, fp
0f67c     04 4E 05 F1 | 	add	fp, #4
0f680     A7 FC 01 FB | 	rdlong	result2, fp
0f684     10 4E 85 F1 | 	sub	fp, #16
0f688     A7 FE 01 FB | 	rdlong	result3, fp
0f68c     FF FC 01 FD | 	qmul	result2, result3
0f690     10 20 06 F1 | 	add	local02, #16
0f694     14 4E 05 F1 | 	add	fp, #20
0f698     A7 FC 01 FB | 	rdlong	result2, fp
0f69c     18 FA 61 FD | 	getqx	result1
0f6a0     FF FC 01 FD | 	qmul	result2, result3
0f6a4     FD 22 02 F1 | 	add	local03, result1
0f6a8     10 4E 85 F1 | 	sub	fp, #16
0f6ac     A7 FE 01 FB | 	rdlong	result3, fp
0f6b0     18 FC 61 FD | 	getqx	result2
0f6b4     FF FC 01 FD | 	qmul	result2, result3
0f6b8     08 4E 85 F1 | 	sub	fp, #8
0f6bc     A7 FE 01 FB | 	rdlong	result3, fp
0f6c0     18 FC 61 FD | 	getqx	result2
0f6c4     FE 22 02 F1 | 	add	local03, result2
0f6c8     FF 22 02 FD | 	qmul	local03, result3
0f6cc     1C 4E 05 F1 | 	add	fp, #28
0f6d0                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0f6d0                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0f6d0                 | ' 
0f6d0                 | ' select case vartype
0f6d0     18 FC 61 FD | 	getqx	result2
0f6d4     FE 20 02 F1 | 	add	local02, result2
0f6d8     A7 20 62 FC | 	wrlong	local02, fp
0f6dc     24 4E 85 F1 | 	sub	fp, #36
0f6e0     A7 24 02 FB | 	rdlong	local04, fp
0f6e4     10 4E 85 F1 | 	sub	fp, #16
0f6e8     00 25 86 F1 | 	sub	local04, #256
0f6ec     0C 24 26 F3 | 	fle	local04, #12
0f6f0     30 24 62 FD | 	jmprel	local04
0f6f4                 | LR__1218
0f6f4     30 00 90 FD | 	jmp	#LR__1219
0f6f8     58 00 90 FD | 	jmp	#LR__1220
0f6fc     8C 00 90 FD | 	jmp	#LR__1221
0f700     AC 00 90 FD | 	jmp	#LR__1222
0f704     E8 00 90 FD | 	jmp	#LR__1223
0f708     08 01 90 FD | 	jmp	#LR__1224
0f70c     24 01 90 FD | 	jmp	#LR__1225
0f710     40 01 90 FD | 	jmp	#LR__1226
0f714     50 01 90 FD | 	jmp	#LR__1227
0f718     60 01 90 FD | 	jmp	#LR__1228
0f71c     7C 01 90 FD | 	jmp	#LR__1229
0f720     8C 01 90 FD | 	jmp	#LR__1230
0f724     B8 01 90 FD | 	jmp	#LR__1231
0f728                 | LR__1219
0f728     A7 12 02 F6 | 	mov	arg01, fp
0f72c     34 4E 05 F1 | 	add	fp, #52
0f730     A7 14 02 FB | 	rdlong	arg02, fp
0f734     34 4E 85 F1 | 	sub	fp, #52
0f738     0C 16 06 F6 | 	mov	arg03, #12
0f73c     0B 00 00 FF 
0f740     CC E4 05 F1 | 	add	objptr, ##5836
0f744     CC E7 B0 FD | 	call	#_psram_spin2_read1
0f748     0B 00 00 FF 
0f74c     CC E4 85 F1 | 	sub	objptr, ##5836
0f750     8C 01 90 FD | 	jmp	#LR__1231
0f754                 | LR__1220
0f754     08 4E 05 F1 | 	add	fp, #8
0f758     A7 38 68 FC | 	wrlong	#28, fp
0f75c     2C 4E 05 F1 | 	add	fp, #44
0f760     A7 12 02 FB | 	rdlong	arg01, fp
0f764     34 4E 85 F1 | 	sub	fp, #52
0f768     A8 B1 B0 FD | 	call	#_pspeek
0f76c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f770     A7 FA 61 FC | 	wrlong	result1, fp
0f774     80 FA 15 F2 | 	cmp	result1, #128 wc
0f778     00 1F 66 36 |  if_ae	neg	local01, #256
0f77c     A7 22 02 3B |  if_ae	rdlong	local03, fp
0f780     11 1F 42 35 |  if_ae	or	local01, local03
0f784     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0f788     54 01 90 FD | 	jmp	#LR__1231
0f78c                 | LR__1221
0f78c     08 4E 05 F1 | 	add	fp, #8
0f790     A7 3A 68 FC | 	wrlong	#29, fp
0f794     2C 4E 05 F1 | 	add	fp, #44
0f798     A7 12 02 FB | 	rdlong	arg01, fp
0f79c     34 4E 85 F1 | 	sub	fp, #52
0f7a0     70 B1 B0 FD | 	call	#_pspeek
0f7a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f7a8     A7 FA 61 FC | 	wrlong	result1, fp
0f7ac     30 01 90 FD | 	jmp	#LR__1231
0f7b0                 | LR__1222
0f7b0     08 4E 05 F1 | 	add	fp, #8
0f7b4     A7 38 68 FC | 	wrlong	#28, fp
0f7b8     2C 4E 05 F1 | 	add	fp, #44
0f7bc     A7 12 02 FB | 	rdlong	arg01, fp
0f7c0     34 4E 85 F1 | 	sub	fp, #52
0f7c4     A4 B1 B0 FD | 	call	#_pslpeek
0f7c8     FD FA 31 F9 | 	getword	result1, result1, #0
0f7cc     A7 FA 61 FC | 	wrlong	result1, fp
0f7d0     40 00 00 FF 
0f7d4     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0f7d8     FF 7F 00 3F 
0f7dc     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0f7e0     A7 22 02 3B |  if_ae	rdlong	local03, fp
0f7e4     11 1F 42 35 |  if_ae	or	local01, local03
0f7e8     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0f7ec     F0 00 90 FD | 	jmp	#LR__1231
0f7f0                 | LR__1223
0f7f0     08 4E 05 F1 | 	add	fp, #8
0f7f4     A7 3A 68 FC | 	wrlong	#29, fp
0f7f8     2C 4E 05 F1 | 	add	fp, #44
0f7fc     A7 12 02 FB | 	rdlong	arg01, fp
0f800     34 4E 85 F1 | 	sub	fp, #52
0f804     64 B1 B0 FD | 	call	#_pslpeek
0f808     FD FA 31 F9 | 	getword	result1, result1, #0
0f80c     A7 FA 61 FC | 	wrlong	result1, fp
0f810     CC 00 90 FD | 	jmp	#LR__1231
0f814                 | LR__1224
0f814     08 4E 05 F1 | 	add	fp, #8
0f818     A7 38 68 FC | 	wrlong	#28, fp
0f81c     2C 4E 05 F1 | 	add	fp, #44
0f820     A7 12 02 FB | 	rdlong	arg01, fp
0f824     34 4E 85 F1 | 	sub	fp, #52
0f828     40 B1 B0 FD | 	call	#_pslpeek
0f82c     A7 FA 61 FC | 	wrlong	result1, fp
0f830     AC 00 90 FD | 	jmp	#LR__1231
0f834                 | LR__1225
0f834     08 4E 05 F1 | 	add	fp, #8
0f838     A7 3A 68 FC | 	wrlong	#29, fp
0f83c     2C 4E 05 F1 | 	add	fp, #44
0f840     A7 12 02 FB | 	rdlong	arg01, fp
0f844     34 4E 85 F1 | 	sub	fp, #52
0f848     20 B1 B0 FD | 	call	#_pslpeek
0f84c     A7 FA 61 FC | 	wrlong	result1, fp
0f850     8C 00 90 FD | 	jmp	#LR__1231
0f854                 | LR__1226
0f854     08 4E 05 F1 | 	add	fp, #8
0f858     A7 FE 69 FC | 	wrlong	#255, fp
0f85c     08 4E 85 F1 | 	sub	fp, #8
0f860     A7 60 68 FC | 	wrlong	#48, fp
0f864     78 00 90 FD | 	jmp	#LR__1231
0f868                 | LR__1227
0f868     08 4E 05 F1 | 	add	fp, #8
0f86c     A7 FE 69 FC | 	wrlong	#255, fp
0f870     08 4E 85 F1 | 	sub	fp, #8
0f874     A7 60 68 FC | 	wrlong	#48, fp
0f878     64 00 90 FD | 	jmp	#LR__1231
0f87c                 | LR__1228
0f87c     08 4E 05 F1 | 	add	fp, #8
0f880     A7 3C 68 FC | 	wrlong	#30, fp
0f884     2C 4E 05 F1 | 	add	fp, #44
0f888     A7 12 02 FB | 	rdlong	arg01, fp
0f88c     34 4E 85 F1 | 	sub	fp, #52
0f890     D8 B0 B0 FD | 	call	#_pslpeek
0f894     A7 FA 61 FC | 	wrlong	result1, fp
0f898     44 00 90 FD | 	jmp	#LR__1231
0f89c                 | LR__1229
0f89c     08 4E 05 F1 | 	add	fp, #8
0f8a0     A7 FE 69 FC | 	wrlong	#255, fp
0f8a4     08 4E 85 F1 | 	sub	fp, #8
0f8a8     A7 60 68 FC | 	wrlong	#48, fp
0f8ac     30 00 90 FD | 	jmp	#LR__1231
0f8b0                 | LR__1230
0f8b0     08 4E 05 F1 | 	add	fp, #8
0f8b4     A7 3E 68 FC | 	wrlong	#31, fp
0f8b8     2C 4E 05 F1 | 	add	fp, #44
0f8bc     A7 12 02 FB | 	rdlong	arg01, fp
0f8c0     34 4E 85 F1 | 	sub	fp, #52
0f8c4     A4 B0 B0 FD | 	call	#_pslpeek
0f8c8     A7 FA 61 FC | 	wrlong	result1, fp
0f8cc     00 04 00 FF 
0f8d0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0f8d4     08 4E 05 31 |  if_ae	add	fp, #8
0f8d8     A7 56 68 3C |  if_ae	wrlong	#43, fp
0f8dc     08 4E 85 31 |  if_ae	sub	fp, #8
0f8e0                 | LR__1231
0f8e0     A7 12 02 F6 | 	mov	arg01, fp
0f8e4     10 B0 BF FD | 	call	#_push
0f8e8                 | LR__1232
0f8e8     A7 F0 03 F6 | 	mov	ptra, fp
0f8ec     B2 00 A0 FD | 	call	#popregs_
0f8f0                 | _do_getvar_ret
0f8f0     2D 00 64 FD | 	ret
0f8f4                 | 
0f8f4                 | ' 
0f8f4                 | ' 
0f8f4                 | ' sub do_getaddr
0f8f4                 | _do_getaddr
0f8f4     01 4A 05 F6 | 	mov	COUNT_, #1
0f8f8     A8 00 A0 FD | 	call	#pushregs_
0f8fc     38 F0 07 F1 | 	add	ptra, #56
0f900                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0f900                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0f900     6A 00 00 FF 
0f904     80 E4 05 F1 | 	add	objptr, ##54400
0f908     F2 12 02 FB | 	rdlong	arg01, objptr
0f90c     09 FD 01 F6 | 	mov	result2, arg01
0f910     01 FC 65 F0 | 	shl	result2, #1
0f914     09 FD 01 F1 | 	add	result2, arg01
0f918     02 FC 65 F0 | 	shl	result2, #2
0f91c     03 00 00 FF 
0f920     04 E4 85 F1 | 	sub	objptr, ##1540
0f924     F2 FC 01 F1 | 	add	result2, objptr
0f928     04 FC 05 F1 | 	add	result2, #4
0f92c     FE FC 09 FB | 	rdlong	result2, result2 wz
0f930     67 00 00 FF 
0f934     7C E4 85 F1 | 	sub	objptr, ##52860
0f938     C4 00 90 5D |  if_ne	jmp	#LR__1240
0f93c     6A 00 00 FF 
0f940     80 E4 05 F1 | 	add	objptr, ##54400
0f944     F2 12 02 FB | 	rdlong	arg01, objptr
0f948     09 FD 01 F6 | 	mov	result2, arg01
0f94c     01 FC 65 F0 | 	shl	result2, #1
0f950     09 FD 01 F1 | 	add	result2, arg01
0f954     02 FC 65 F0 | 	shl	result2, #2
0f958     03 00 00 FF 
0f95c     04 E4 85 F1 | 	sub	objptr, ##1540
0f960     F2 FC 01 F1 | 	add	result2, objptr
0f964     FE 12 02 FB | 	rdlong	arg01, result2
0f968     04 12 66 F0 | 	shl	arg01, #4
0f96c     32 00 00 FF 
0f970     84 E4 85 F1 | 	sub	objptr, ##25732
0f974     F2 12 02 F1 | 	add	arg01, objptr
0f978     0C 12 06 F1 | 	add	arg01, #12
0f97c     09 13 02 FB | 	rdlong	arg01, arg01
0f980     08 4E 05 F1 | 	add	fp, #8
0f984     A7 12 62 FC | 	wrlong	arg01, fp
0f988                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0f988                 | '    if t1.result_type>=array_no_type then goto 2200
0f988     08 4E 85 F1 | 	sub	fp, #8
0f98c     00 13 16 F2 | 	cmp	arg01, #256 wc
0f990     34 00 00 FF 
0f994     F8 E5 85 F1 | 	sub	objptr, ##27128
0f998     64 00 90 3D |  if_ae	jmp	#LR__1241
0f99c     6A 00 00 FF 
0f9a0     80 E4 05 F1 | 	add	objptr, ##54400
0f9a4     F2 12 02 FB | 	rdlong	arg01, objptr
0f9a8     09 FB 01 F6 | 	mov	result1, arg01
0f9ac     01 FA 65 F0 | 	shl	result1, #1
0f9b0     09 FB 01 F1 | 	add	result1, arg01
0f9b4     02 FA 65 F0 | 	shl	result1, #2
0f9b8     03 00 00 FF 
0f9bc     04 E4 85 F1 | 	sub	objptr, ##1540
0f9c0     F2 FA 01 F1 | 	add	result1, objptr
0f9c4     FD FA 01 FB | 	rdlong	result1, result1
0f9c8     04 FA 65 F0 | 	shl	result1, #4
0f9cc     32 00 00 FF 
0f9d0     84 E4 85 F1 | 	sub	objptr, ##25732
0f9d4     F2 FA 01 F1 | 	add	result1, objptr
0f9d8     04 FA 05 F1 | 	add	result1, #4
0f9dc     34 00 00 FF 
0f9e0     F8 E5 85 F1 | 	sub	objptr, ##27128
0f9e4     A7 FA 61 FC | 	wrlong	result1, fp
0f9e8     08 4E 05 F1 | 	add	fp, #8
0f9ec     A7 3A 68 FC | 	wrlong	#29, fp
0f9f0     08 4E 85 F1 | 	sub	fp, #8
0f9f4     A7 12 02 F6 | 	mov	arg01, fp
0f9f8     FC AE BF FD | 	call	#_push
0f9fc                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
0f9fc                 | '   t1.result_type=result_uint
0f9fc                 | '   push t1 : return
0f9fc     D8 02 90 FD | 	jmp	#LR__1250
0fa00                 | LR__1240
0fa00                 | LR__1241
0fa00     6A 00 00 FF 
0fa04     80 E4 05 F1 | 	add	objptr, ##54400
0fa08     F2 FE 01 FB | 	rdlong	result3, objptr
0fa0c     FF 12 02 F6 | 	mov	arg01, result3
0fa10     01 12 66 F0 | 	shl	arg01, #1
0fa14     FF 12 02 F1 | 	add	arg01, result3
0fa18     02 12 66 F0 | 	shl	arg01, #2
0fa1c     03 00 00 FF 
0fa20     04 E4 85 F1 | 	sub	objptr, ##1540
0fa24     F2 12 02 F1 | 	add	arg01, objptr
0fa28     09 13 02 FB | 	rdlong	arg01, arg01
0fa2c     04 12 66 F0 | 	shl	arg01, #4
0fa30     32 00 00 FF 
0fa34     84 E4 85 F1 | 	sub	objptr, ##25732
0fa38     F2 12 02 F1 | 	add	arg01, objptr
0fa3c     04 12 06 F1 | 	add	arg01, #4
0fa40     09 13 02 FB | 	rdlong	arg01, arg01
0fa44     0C 4E 05 F1 | 	add	fp, #12
0fa48     A7 12 62 FC | 	wrlong	arg01, fp
0fa4c     0C 4E 85 F1 | 	sub	fp, #12
0fa50     34 00 00 FF 
0fa54     F8 E5 85 F1 | 	sub	objptr, ##27128
0fa58     10 AF B0 FD | 	call	#_pslpeek
0fa5c     FD FA 31 F9 | 	getword	result1, result1, #0
0fa60     10 4E 05 F1 | 	add	fp, #16
0fa64     A7 FA 61 FC | 	wrlong	result1, fp
0fa68     6A 00 00 FF 
0fa6c     80 E4 05 F1 | 	add	objptr, ##54400
0fa70     F2 FE 01 FB | 	rdlong	result3, objptr
0fa74     FF 12 02 F6 | 	mov	arg01, result3
0fa78     01 12 66 F0 | 	shl	arg01, #1
0fa7c     FF 12 02 F1 | 	add	arg01, result3
0fa80     02 12 66 F0 | 	shl	arg01, #2
0fa84     03 00 00 FF 
0fa88     04 E4 85 F1 | 	sub	objptr, ##1540
0fa8c     F2 12 02 F1 | 	add	arg01, objptr
0fa90     04 12 06 F1 | 	add	arg01, #4
0fa94     09 13 02 FB | 	rdlong	arg01, arg01
0fa98     04 4E 05 F1 | 	add	fp, #4
0fa9c     A7 12 62 FC | 	wrlong	arg01, fp
0faa0     08 4E 85 F1 | 	sub	fp, #8
0faa4     A7 12 02 FB | 	rdlong	arg01, fp
0faa8     0C 4E 85 F1 | 	sub	fp, #12
0faac     02 12 06 F1 | 	add	arg01, #2
0fab0     67 00 00 FF 
0fab4     7C E4 85 F1 | 	sub	objptr, ##52860
0fab8     58 AE B0 FD | 	call	#_pspeek
0fabc     FD FA E1 F8 | 	getbyte	result1, result1, #0
0fac0     18 4E 05 F1 | 	add	fp, #24
0fac4     A7 FA 61 FC | 	wrlong	result1, fp
0fac8     0C 4E 85 F1 | 	sub	fp, #12
0facc     A7 12 02 FB | 	rdlong	arg01, fp
0fad0     0C 4E 85 F1 | 	sub	fp, #12
0fad4     04 12 06 F1 | 	add	arg01, #4
0fad8     90 AE B0 FD | 	call	#_pslpeek
0fadc     1C 4E 05 F1 | 	add	fp, #28
0fae0     A7 FA 61 FC | 	wrlong	result1, fp
0fae4     10 4E 85 F1 | 	sub	fp, #16
0fae8     A7 12 02 FB | 	rdlong	arg01, fp
0faec     0C 4E 85 F1 | 	sub	fp, #12
0faf0     08 12 06 F1 | 	add	arg01, #8
0faf4     74 AE B0 FD | 	call	#_pslpeek
0faf8     20 4E 05 F1 | 	add	fp, #32
0fafc     A7 FA 61 FC | 	wrlong	result1, fp
0fb00     14 4E 85 F1 | 	sub	fp, #20
0fb04     A7 12 02 FB | 	rdlong	arg01, fp
0fb08     0C 4E 85 F1 | 	sub	fp, #12
0fb0c     0C 12 06 F1 | 	add	arg01, #12
0fb10     58 AE B0 FD | 	call	#_pslpeek
0fb14     24 4E 05 F1 | 	add	fp, #36
0fb18     A7 FA 61 FC | 	wrlong	result1, fp
0fb1c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0fb1c                 | ' esize=pspeek(arrptr+2)
0fb1c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0fb1c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0fb1c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0fb1c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0fb1c     10 4E 85 F1 | 	sub	fp, #16
0fb20     A7 12 02 FB | 	rdlong	arg01, fp
0fb24     14 4E 85 F1 | 	sub	fp, #20
0fb28     03 12 16 F2 | 	cmp	arg01, #3 wc
0fb2c     34 00 90 CD |  if_b	jmp	#LR__1242
0fb30     2C AD BF FD | 	call	#_pop
0fb34     A7 FA 61 FC | 	wrlong	result1, fp
0fb38     04 4E 05 F1 | 	add	fp, #4
0fb3c     A7 FC 61 FC | 	wrlong	result2, fp
0fb40     04 4E 05 F1 | 	add	fp, #4
0fb44     A7 FE 61 FC | 	wrlong	result3, fp
0fb48     08 4E 85 F1 | 	sub	fp, #8
0fb4c     A7 12 02 F6 | 	mov	arg01, fp
0fb50     A0 39 B0 FD | 	call	#_converttoint
0fb54     30 4E 05 F1 | 	add	fp, #48
0fb58     A7 FA 61 FC | 	wrlong	result1, fp
0fb5c     30 4E 85 F1 | 	sub	fp, #48
0fb60     0C 00 90 FD | 	jmp	#LR__1243
0fb64                 | LR__1242
0fb64     30 4E 05 F1 | 	add	fp, #48
0fb68     A7 00 68 FC | 	wrlong	#0, fp
0fb6c     30 4E 85 F1 | 	sub	fp, #48
0fb70                 | LR__1243
0fb70                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0fb70     14 4E 05 F1 | 	add	fp, #20
0fb74     A7 12 02 FB | 	rdlong	arg01, fp
0fb78     14 4E 85 F1 | 	sub	fp, #20
0fb7c     02 12 16 F2 | 	cmp	arg01, #2 wc
0fb80     34 00 90 CD |  if_b	jmp	#LR__1244
0fb84     D8 AC BF FD | 	call	#_pop
0fb88     A7 FA 61 FC | 	wrlong	result1, fp
0fb8c     04 4E 05 F1 | 	add	fp, #4
0fb90     A7 FC 61 FC | 	wrlong	result2, fp
0fb94     04 4E 05 F1 | 	add	fp, #4
0fb98     A7 FE 61 FC | 	wrlong	result3, fp
0fb9c     08 4E 85 F1 | 	sub	fp, #8
0fba0     A7 12 02 F6 | 	mov	arg01, fp
0fba4     4C 39 B0 FD | 	call	#_converttoint
0fba8     2C 4E 05 F1 | 	add	fp, #44
0fbac     A7 FA 61 FC | 	wrlong	result1, fp
0fbb0     2C 4E 85 F1 | 	sub	fp, #44
0fbb4     0C 00 90 FD | 	jmp	#LR__1245
0fbb8                 | LR__1244
0fbb8     2C 4E 05 F1 | 	add	fp, #44
0fbbc     A7 00 68 FC | 	wrlong	#0, fp
0fbc0     2C 4E 85 F1 | 	sub	fp, #44
0fbc4                 | LR__1245
0fbc4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0fbc4     14 4E 05 F1 | 	add	fp, #20
0fbc8     A7 12 02 FB | 	rdlong	arg01, fp
0fbcc     14 4E 85 F1 | 	sub	fp, #20
0fbd0     01 12 16 F2 | 	cmp	arg01, #1 wc
0fbd4     34 00 90 CD |  if_b	jmp	#LR__1246
0fbd8     84 AC BF FD | 	call	#_pop
0fbdc     A7 FA 61 FC | 	wrlong	result1, fp
0fbe0     04 4E 05 F1 | 	add	fp, #4
0fbe4     A7 FC 61 FC | 	wrlong	result2, fp
0fbe8     04 4E 05 F1 | 	add	fp, #4
0fbec     A7 FE 61 FC | 	wrlong	result3, fp
0fbf0     08 4E 85 F1 | 	sub	fp, #8
0fbf4     A7 12 02 F6 | 	mov	arg01, fp
0fbf8     F8 38 B0 FD | 	call	#_converttoint
0fbfc     28 4E 05 F1 | 	add	fp, #40
0fc00     A7 FA 61 FC | 	wrlong	result1, fp
0fc04     28 4E 85 F1 | 	sub	fp, #40
0fc08     0C 00 90 FD | 	jmp	#LR__1247
0fc0c                 | LR__1246
0fc0c     28 4E 05 F1 | 	add	fp, #40
0fc10     A7 00 68 FC | 	wrlong	#0, fp
0fc14     28 4E 85 F1 | 	sub	fp, #40
0fc18                 | LR__1247
0fc18                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0fc18                 | ' if numpar>0 then
0fc18     14 4E 05 F1 | 	add	fp, #20
0fc1c     A7 FE 01 FB | 	rdlong	result3, fp
0fc20     14 4E 85 F1 | 	sub	fp, #20
0fc24     01 FE 15 F2 | 	cmp	result3, #1 wc
0fc28     8C 00 90 CD |  if_b	jmp	#LR__1248
0fc2c     0C 4E 05 F1 | 	add	fp, #12
0fc30     A7 FC 01 FB | 	rdlong	result2, fp
0fc34     1C 4E 05 F1 | 	add	fp, #28
0fc38     A7 FE 01 FB | 	rdlong	result3, fp
0fc3c     04 4E 05 F1 | 	add	fp, #4
0fc40     A7 12 02 FB | 	rdlong	arg01, fp
0fc44     10 4E 85 F1 | 	sub	fp, #16
0fc48     A7 FA 01 FB | 	rdlong	result1, fp
0fc4c     FD 12 02 FD | 	qmul	arg01, result1
0fc50     10 FC 05 F1 | 	add	result2, #16
0fc54     14 4E 05 F1 | 	add	fp, #20
0fc58     A7 1E 02 FB | 	rdlong	local01, fp
0fc5c     18 12 62 FD | 	getqx	arg01
0fc60     FD 1E 02 FD | 	qmul	local01, result1
0fc64     09 FF 01 F1 | 	add	result3, arg01
0fc68     10 4E 85 F1 | 	sub	fp, #16
0fc6c     A7 1E 02 FB | 	rdlong	local01, fp
0fc70     18 FA 61 FD | 	getqx	result1
0fc74     0F FB 01 FD | 	qmul	result1, local01
0fc78     08 4E 85 F1 | 	sub	fp, #8
0fc7c     A7 1E 02 FB | 	rdlong	local01, fp
0fc80     18 FA 61 FD | 	getqx	result1
0fc84     FD FE 01 F1 | 	add	result3, result1
0fc88     0F FF 01 FD | 	qmul	result3, local01
0fc8c     1C 4E 05 F1 | 	add	fp, #28
0fc90     18 1E 62 FD | 	getqx	local01
0fc94     0F FD 01 F1 | 	add	result2, local01
0fc98     A7 FC 61 FC | 	wrlong	result2, fp
0fc9c     2C 4E 85 F1 | 	sub	fp, #44
0fca0     A7 3A 68 FC | 	wrlong	#29, fp
0fca4     2C 4E 05 F1 | 	add	fp, #44
0fca8     A7 1E 02 FB | 	rdlong	local01, fp
0fcac     34 4E 85 F1 | 	sub	fp, #52
0fcb0     A7 1E 62 FC | 	wrlong	local01, fp
0fcb4     18 00 90 FD | 	jmp	#LR__1249
0fcb8                 | LR__1248
0fcb8     08 4E 05 F1 | 	add	fp, #8
0fcbc     A7 3A 68 FC | 	wrlong	#29, fp
0fcc0     04 4E 05 F1 | 	add	fp, #4
0fcc4     A7 1E 02 FB | 	rdlong	local01, fp
0fcc8     0C 4E 85 F1 | 	sub	fp, #12
0fccc     A7 1E 62 FC | 	wrlong	local01, fp
0fcd0                 | LR__1249
0fcd0     A7 12 02 F6 | 	mov	arg01, fp
0fcd4     20 AC BF FD | 	call	#_push
0fcd8                 | LR__1250
0fcd8     A7 F0 03 F6 | 	mov	ptra, fp
0fcdc     B2 00 A0 FD | 	call	#popregs_
0fce0                 | _do_getaddr_ret
0fce0     2D 00 64 FD | 	ret
0fce4                 | 
0fce4                 | ' 
0fce4                 | ' 
0fce4                 | ' sub do_inkey
0fce4                 | _do_inkey
0fce4     02 4A 05 F6 | 	mov	COUNT_, #2
0fce8     A8 00 A0 FD | 	call	#pushregs_
0fcec     0C F0 07 F1 | 	add	ptra, #12
0fcf0     4C E6 B0 FD | 	call	#_usbnew_spin2_get_key
0fcf4     65 00 00 FF 
0fcf8     74 E4 05 F1 | 	add	objptr, ##51828
0fcfc     F2 FA 61 FC | 	wrlong	result1, objptr
0fd00                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
0fd00     65 00 00 FF 
0fd04     74 E4 85 F1 | 	sub	objptr, ##51828
0fd08     00 FA 0D F2 | 	cmp	result1, #0 wz
0fd0c     94 00 90 AD |  if_e	jmp	#LR__1261
0fd10     65 00 00 FF 
0fd14     74 E4 05 F1 | 	add	objptr, ##51828
0fd18     F2 1C 02 FB | 	rdlong	arg06, objptr
0fd1c     65 00 00 FF 
0fd20     74 E4 85 F1 | 	sub	objptr, ##51828
0fd24     00 00 40 FF 
0fd28     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0fd2c     65 00 00 CF 
0fd30     74 E4 05 C1 |  if_b	add	objptr, ##51828
0fd34     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0fd38     65 00 00 CF 
0fd3c     74 E4 85 C1 |  if_b	sub	objptr, ##51828
0fd40     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0fd44     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0fd48     58 00 90 3D |  if_ae	jmp	#LR__1261
0fd4c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
0fd4c     78 00 00 FF 
0fd50     F0 E4 05 F1 | 	add	objptr, ##61680
0fd54     F2 1C 02 FB | 	rdlong	arg06, objptr
0fd58     78 00 00 FF 
0fd5c     F0 E4 85 F1 | 	sub	objptr, ##61680
0fd60     01 1C 0E F2 | 	cmp	arg06, #1 wz
0fd64     3C 00 90 5D |  if_ne	jmp	#LR__1260
0fd68     79 00 00 FF 
0fd6c     94 E5 05 F1 | 	add	objptr, ##62356
0fd70     F2 14 02 FB | 	rdlong	arg02, objptr
0fd74     04 E4 85 F1 | 	sub	objptr, #4
0fd78     F2 1A 02 FB | 	rdlong	arg05, objptr
0fd7c     07 12 06 F6 | 	mov	arg01, #7
0fd80     56 00 00 FF 
0fd84     44 16 06 F6 | 	mov	arg03, ##44100
0fd88     0C 18 C6 F9 | 	decod	arg04, #12
0fd8c     01 1C 66 F6 | 	neg	arg06, #1
0fd90     6E 00 00 FF 
0fd94     C4 E4 85 F1 | 	sub	objptr, ##56516
0fd98     2C E9 B0 FD | 	call	#_audio096_spin2_play
0fd9c     0B 00 00 FF 
0fda0     CC E4 85 F1 | 	sub	objptr, ##5836
0fda4                 | LR__1260
0fda4                 | LR__1261
0fda4                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
0fda4     65 00 00 FF 
0fda8     74 E4 05 F1 | 	add	objptr, ##51828
0fdac     F2 1C 0A FB | 	rdlong	arg06, objptr wz
0fdb0     65 00 00 FF 
0fdb4     74 E4 85 F1 | 	sub	objptr, ##51828
0fdb8     D4 01 90 AD |  if_e	jmp	#LR__1270
0fdbc     65 00 00 FF 
0fdc0     74 E4 05 F1 | 	add	objptr, ##51828
0fdc4     F2 1C 02 FB | 	rdlong	arg06, objptr
0fdc8     65 00 00 FF 
0fdcc     74 E4 85 F1 | 	sub	objptr, ##51828
0fdd0     00 00 40 FF 
0fdd4     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0fdd8     65 00 00 CF 
0fddc     74 E4 05 C1 |  if_b	add	objptr, ##51828
0fde0     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0fde4     65 00 00 CF 
0fde8     74 E4 85 C1 |  if_b	sub	objptr, ##51828
0fdec     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0fdf0     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0fdf4     98 01 90 3D |  if_ae	jmp	#LR__1270
0fdf8                 | '   if leds and 2 = 2 then 
0fdf8     79 00 00 FF 
0fdfc     BC E5 05 F1 | 	add	objptr, ##62396
0fe00     F2 1E 0A FB | 	rdlong	local01, objptr wz
0fe04     79 00 00 FF 
0fe08     BC E5 85 F1 | 	sub	objptr, ##62396
0fe0c     58 01 90 AD |  if_e	jmp	#LR__1269
0fe10                 | '     if key>96 andalso key<123 then
0fe10     65 00 00 FF 
0fe14     74 E4 05 F1 | 	add	objptr, ##51828
0fe18     F2 1E 02 FB | 	rdlong	local01, objptr
0fe1c     65 00 00 FF 
0fe20     74 E4 85 F1 | 	sub	objptr, ##51828
0fe24     61 1E 16 F2 | 	cmp	local01, #97 wc
0fe28     3C 00 90 CD |  if_b	jmp	#LR__1262
0fe2c     65 00 00 FF 
0fe30     74 E4 05 F1 | 	add	objptr, ##51828
0fe34     F2 1E 02 FB | 	rdlong	local01, objptr
0fe38     65 00 00 FF 
0fe3c     74 E4 85 F1 | 	sub	objptr, ##51828
0fe40     7B 1E 16 F2 | 	cmp	local01, #123 wc
0fe44     20 00 90 3D |  if_ae	jmp	#LR__1262
0fe48     65 00 00 FF 
0fe4c     74 E4 05 F1 | 	add	objptr, ##51828
0fe50     F2 1E 02 FB | 	rdlong	local01, objptr
0fe54     20 1E 86 F1 | 	sub	local01, #32
0fe58     F2 1E 62 FC | 	wrlong	local01, objptr
0fe5c     65 00 00 FF 
0fe60     74 E4 85 F1 | 	sub	objptr, ##51828
0fe64     00 01 90 FD | 	jmp	#LR__1268
0fe68                 | LR__1262
0fe68     65 00 00 FF 
0fe6c     74 E4 05 F1 | 	add	objptr, ##51828
0fe70     F2 1E 02 FB | 	rdlong	local01, objptr
0fe74     65 00 00 FF 
0fe78     74 E4 85 F1 | 	sub	objptr, ##51828
0fe7c     41 1E 16 F2 | 	cmp	local01, #65 wc
0fe80     3C 00 90 CD |  if_b	jmp	#LR__1263
0fe84     65 00 00 FF 
0fe88     74 E4 05 F1 | 	add	objptr, ##51828
0fe8c     F2 1E 02 FB | 	rdlong	local01, objptr
0fe90     65 00 00 FF 
0fe94     74 E4 85 F1 | 	sub	objptr, ##51828
0fe98     5B 1E 16 F2 | 	cmp	local01, #91 wc
0fe9c     20 00 90 3D |  if_ae	jmp	#LR__1263
0fea0     65 00 00 FF 
0fea4     74 E4 05 F1 | 	add	objptr, ##51828
0fea8     F2 1E 02 FB | 	rdlong	local01, objptr
0feac     20 1E 06 F1 | 	add	local01, #32
0feb0     F2 1E 62 FC | 	wrlong	local01, objptr
0feb4     65 00 00 FF 
0feb8     74 E4 85 F1 | 	sub	objptr, ##51828
0febc     A8 00 90 FD | 	jmp	#LR__1267
0fec0                 | LR__1263
0fec0     65 00 00 FF 
0fec4     74 E4 05 F1 | 	add	objptr, ##51828
0fec8     F2 1E 02 FB | 	rdlong	local01, objptr
0fecc     65 00 00 FF 
0fed0     74 E4 85 F1 | 	sub	objptr, ##51828
0fed4     17 1E 16 F2 | 	cmp	local01, #23 wc
0fed8     3C 00 90 CD |  if_b	jmp	#LR__1264
0fedc     65 00 00 FF 
0fee0     74 E4 05 F1 | 	add	objptr, ##51828
0fee4     F2 1E 02 FB | 	rdlong	local01, objptr
0fee8     65 00 00 FF 
0feec     74 E4 85 F1 | 	sub	objptr, ##51828
0fef0     20 1E 16 F2 | 	cmp	local01, #32 wc
0fef4     20 00 90 3D |  if_ae	jmp	#LR__1264
0fef8     65 00 00 FF 
0fefc     74 E4 05 F1 | 	add	objptr, ##51828
0ff00     F2 1E 02 FB | 	rdlong	local01, objptr
0ff04     09 1E 86 F1 | 	sub	local01, #9
0ff08     F2 1E 62 FC | 	wrlong	local01, objptr
0ff0c     65 00 00 FF 
0ff10     74 E4 85 F1 | 	sub	objptr, ##51828
0ff14     50 00 90 FD | 	jmp	#LR__1266
0ff18                 | LR__1264
0ff18     65 00 00 FF 
0ff1c     74 E4 05 F1 | 	add	objptr, ##51828
0ff20     F2 20 02 FB | 	rdlong	local02, objptr
0ff24     65 00 00 FF 
0ff28     74 E4 85 F1 | 	sub	objptr, ##51828
0ff2c     0E 20 16 F2 | 	cmp	local02, #14 wc
0ff30     34 00 90 CD |  if_b	jmp	#LR__1265
0ff34     65 00 00 FF 
0ff38     74 E4 05 F1 | 	add	objptr, ##51828
0ff3c     F2 1E 02 FB | 	rdlong	local01, objptr
0ff40     65 00 00 FF 
0ff44     74 E4 85 F1 | 	sub	objptr, ##51828
0ff48     17 1E 16 F2 | 	cmp	local01, #23 wc
0ff4c     79 00 00 CF 
0ff50     CC E5 05 C1 |  if_b	add	objptr, ##62412
0ff54     F2 20 02 CB |  if_b	rdlong	local02, objptr
0ff58     27 20 06 C1 |  if_b	add	local02, #39
0ff5c     F2 20 62 CC |  if_b	wrlong	local02, objptr
0ff60     79 00 00 CF 
0ff64     CC E5 85 C1 |  if_b	sub	objptr, ##62412
0ff68                 | LR__1265
0ff68                 | LR__1266
0ff68                 | LR__1267
0ff68                 | LR__1268
0ff68                 | LR__1269
0ff68     65 00 00 FF 
0ff6c     74 E4 05 F1 | 	add	objptr, ##51828
0ff70     F2 12 02 FB | 	rdlong	arg01, objptr
0ff74     65 00 00 FF 
0ff78     74 E4 85 F1 | 	sub	objptr, ##51828
0ff7c     9C AA B0 FD | 	call	#_scantochar
0ff80     FD 12 02 F6 | 	mov	arg01, result1
0ff84     BC 0D B1 FD | 	call	#__system__Chr_S
0ff88     A7 FA 61 FC | 	wrlong	result1, fp
0ff8c     0C 00 90 FD | 	jmp	#LR__1271
0ff90                 | LR__1270
0ff90     73 01 00 FF 
0ff94     93 21 06 F6 | 	mov	local02, ##@LR__5150
0ff98     A7 20 62 FC | 	wrlong	local02, fp
0ff9c                 | LR__1271
0ff9c     08 4E 05 F1 | 	add	fp, #8
0ffa0     A7 3E 68 FC | 	wrlong	#31, fp
0ffa4     08 4E 85 F1 | 	sub	fp, #8
0ffa8     A7 12 02 F6 | 	mov	arg01, fp
0ffac     48 A9 BF FD | 	call	#_push
0ffb0     A7 F0 03 F6 | 	mov	ptra, fp
0ffb4     B2 00 A0 FD | 	call	#popregs_
0ffb8                 | _do_inkey_ret
0ffb8     2D 00 64 FD | 	ret
0ffbc                 | 
0ffbc                 | '  
0ffbc                 | ' '------------------------ Operators 
0ffbc                 | ' 
0ffbc                 | ' sub do_plus 
0ffbc                 | _do_plus
0ffbc     05 4A 05 F6 | 	mov	COUNT_, #5
0ffc0     A8 00 A0 FD | 	call	#pushregs_
0ffc4     18 F0 07 F1 | 	add	ptra, #24
0ffc8     94 A8 BF FD | 	call	#_pop
0ffcc     FD 1E 02 F6 | 	mov	local01, result1
0ffd0     FE 20 02 F6 | 	mov	local02, result2
0ffd4     FF 22 02 F6 | 	mov	local03, result3
0ffd8     0C 4E 05 F1 | 	add	fp, #12
0ffdc     A7 1E 62 FC | 	wrlong	local01, fp
0ffe0     04 4E 05 F1 | 	add	fp, #4
0ffe4     A7 20 62 FC | 	wrlong	local02, fp
0ffe8     04 4E 05 F1 | 	add	fp, #4
0ffec     A7 22 62 FC | 	wrlong	local03, fp
0fff0     14 4E 85 F1 | 	sub	fp, #20
0fff4     68 A8 BF FD | 	call	#_pop
0fff8     FF 22 02 F6 | 	mov	local03, result3
0fffc     A7 FA 61 FC | 	wrlong	result1, fp
10000     04 4E 05 F1 | 	add	fp, #4
10004     A7 FC 61 FC | 	wrlong	result2, fp
10008     04 4E 05 F1 | 	add	fp, #4
1000c     A7 22 62 FC | 	wrlong	local03, fp
10010                 | ' 
10010                 | ' t2=pop()
10010                 | ' t1=pop()
10010                 | ' 
10010                 | ' 
10010                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
10010     08 4E 85 F1 | 	sub	fp, #8
10014     1D 22 0E F2 | 	cmp	local03, #29 wz
10018     14 4E 05 A1 |  if_e	add	fp, #20
1001c     A7 24 02 AB |  if_e	rdlong	local04, fp
10020     14 4E 85 A1 |  if_e	sub	fp, #20
10024     12 23 02 A6 |  if_e	mov	local03, local04
10028     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1002c     1C 00 90 5D |  if_ne	jmp	#LR__1280
10030     A7 1E 02 FB | 	rdlong	local01, fp
10034     0C 4E 05 F1 | 	add	fp, #12
10038     A7 20 02 FB | 	rdlong	local02, fp
1003c     0C 4E 85 F1 | 	sub	fp, #12
10040     10 1F 02 F1 | 	add	local01, local02
10044     A7 1E 62 FC | 	wrlong	local01, fp
10048     48 04 90 FD | 	jmp	#LR__1295
1004c                 | LR__1280
1004c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1004c     08 4E 05 F1 | 	add	fp, #8
10050     A7 1E 02 FB | 	rdlong	local01, fp
10054     08 4E 85 F1 | 	sub	fp, #8
10058     1D 1E 0E F2 | 	cmp	local01, #29 wz
1005c     14 4E 05 A1 |  if_e	add	fp, #20
10060     A7 24 02 AB |  if_e	rdlong	local04, fp
10064     14 4E 85 A1 |  if_e	sub	fp, #20
10068     12 23 02 A6 |  if_e	mov	local03, local04
1006c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10070     28 00 90 5D |  if_ne	jmp	#LR__1281
10074     A7 1E 02 FB | 	rdlong	local01, fp
10078     0C 4E 05 F1 | 	add	fp, #12
1007c     A7 20 02 FB | 	rdlong	local02, fp
10080     0C 4E 85 F1 | 	sub	fp, #12
10084     10 1F 02 F1 | 	add	local01, local02
10088     A7 1E 62 FC | 	wrlong	local01, fp
1008c     08 4E 05 F1 | 	add	fp, #8
10090     A7 38 68 FC | 	wrlong	#28, fp
10094     08 4E 85 F1 | 	sub	fp, #8
10098     F8 03 90 FD | 	jmp	#LR__1295
1009c                 | LR__1281
1009c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1009c     08 4E 05 F1 | 	add	fp, #8
100a0     A7 1E 02 FB | 	rdlong	local01, fp
100a4     08 4E 85 F1 | 	sub	fp, #8
100a8     1D 1E 0E F2 | 	cmp	local01, #29 wz
100ac     14 4E 05 A1 |  if_e	add	fp, #20
100b0     A7 24 02 AB |  if_e	rdlong	local04, fp
100b4     14 4E 85 A1 |  if_e	sub	fp, #20
100b8     12 23 02 A6 |  if_e	mov	local03, local04
100bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
100c0     30 00 90 5D |  if_ne	jmp	#LR__1282
100c4     A7 12 02 FB | 	rdlong	arg01, fp
100c8     E8 11 B1 FD | 	call	#__system___float_fromuns
100cc     FD 12 02 F6 | 	mov	arg01, result1
100d0     0C 4E 05 F1 | 	add	fp, #12
100d4     A7 14 02 FB | 	rdlong	arg02, fp
100d8     0C 4E 85 F1 | 	sub	fp, #12
100dc     08 12 B1 FD | 	call	#__system___float_add
100e0     A7 FA 61 FC | 	wrlong	result1, fp
100e4     08 4E 05 F1 | 	add	fp, #8
100e8     A7 3C 68 FC | 	wrlong	#30, fp
100ec     08 4E 85 F1 | 	sub	fp, #8
100f0     A0 03 90 FD | 	jmp	#LR__1295
100f4                 | LR__1282
100f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
100f4     08 4E 05 F1 | 	add	fp, #8
100f8     A7 1E 02 FB | 	rdlong	local01, fp
100fc     08 4E 85 F1 | 	sub	fp, #8
10100     1C 1E 0E F2 | 	cmp	local01, #28 wz
10104     14 4E 05 A1 |  if_e	add	fp, #20
10108     A7 24 02 AB |  if_e	rdlong	local04, fp
1010c     14 4E 85 A1 |  if_e	sub	fp, #20
10110     12 23 02 A6 |  if_e	mov	local03, local04
10114     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10118     1C 00 90 5D |  if_ne	jmp	#LR__1283
1011c     A7 1E 02 FB | 	rdlong	local01, fp
10120     0C 4E 05 F1 | 	add	fp, #12
10124     A7 20 02 FB | 	rdlong	local02, fp
10128     0C 4E 85 F1 | 	sub	fp, #12
1012c     10 1F 02 F1 | 	add	local01, local02
10130     A7 1E 62 FC | 	wrlong	local01, fp
10134     5C 03 90 FD | 	jmp	#LR__1295
10138                 | LR__1283
10138                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
10138     08 4E 05 F1 | 	add	fp, #8
1013c     A7 1E 02 FB | 	rdlong	local01, fp
10140     08 4E 85 F1 | 	sub	fp, #8
10144     1C 1E 0E F2 | 	cmp	local01, #28 wz
10148     14 4E 05 A1 |  if_e	add	fp, #20
1014c     A7 24 02 AB |  if_e	rdlong	local04, fp
10150     14 4E 85 A1 |  if_e	sub	fp, #20
10154     12 23 02 A6 |  if_e	mov	local03, local04
10158     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1015c     1C 00 90 5D |  if_ne	jmp	#LR__1284
10160     A7 1E 02 FB | 	rdlong	local01, fp
10164     0C 4E 05 F1 | 	add	fp, #12
10168     A7 20 02 FB | 	rdlong	local02, fp
1016c     0C 4E 85 F1 | 	sub	fp, #12
10170     10 1F 02 F1 | 	add	local01, local02
10174     A7 1E 62 FC | 	wrlong	local01, fp
10178     18 03 90 FD | 	jmp	#LR__1295
1017c                 | LR__1284
1017c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1017c     08 4E 05 F1 | 	add	fp, #8
10180     A7 1E 02 FB | 	rdlong	local01, fp
10184     08 4E 85 F1 | 	sub	fp, #8
10188     1C 1E 0E F2 | 	cmp	local01, #28 wz
1018c     14 4E 05 A1 |  if_e	add	fp, #20
10190     A7 24 02 AB |  if_e	rdlong	local04, fp
10194     14 4E 85 A1 |  if_e	sub	fp, #20
10198     12 23 02 A6 |  if_e	mov	local03, local04
1019c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
101a0     40 00 90 5D |  if_ne	jmp	#LR__1285
101a4     A7 12 02 FB | 	rdlong	arg01, fp
101a8     09 13 52 F6 | 	abs	arg01, arg01 wc
101ac     1F 26 C6 C9 |  if_b	decod	local05, #31
101b0     00 26 06 36 |  if_ae	mov	local05, #0
101b4     FC 10 B1 FD | 	call	#__system___float_fromuns
101b8     13 FB 61 F5 | 	xor	result1, local05
101bc     FD 12 02 F6 | 	mov	arg01, result1
101c0     0C 4E 05 F1 | 	add	fp, #12
101c4     A7 14 02 FB | 	rdlong	arg02, fp
101c8     0C 4E 85 F1 | 	sub	fp, #12
101cc     18 11 B1 FD | 	call	#__system___float_add
101d0     A7 FA 61 FC | 	wrlong	result1, fp
101d4     08 4E 05 F1 | 	add	fp, #8
101d8     A7 3C 68 FC | 	wrlong	#30, fp
101dc     08 4E 85 F1 | 	sub	fp, #8
101e0     B0 02 90 FD | 	jmp	#LR__1295
101e4                 | LR__1285
101e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
101e4     08 4E 05 F1 | 	add	fp, #8
101e8     A7 1E 02 FB | 	rdlong	local01, fp
101ec     08 4E 85 F1 | 	sub	fp, #8
101f0     1E 1E 0E F2 | 	cmp	local01, #30 wz
101f4     14 4E 05 A1 |  if_e	add	fp, #20
101f8     A7 24 02 AB |  if_e	rdlong	local04, fp
101fc     14 4E 85 A1 |  if_e	sub	fp, #20
10200     12 23 02 A6 |  if_e	mov	local03, local04
10204     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10208     28 00 90 5D |  if_ne	jmp	#LR__1286
1020c     A7 1E 02 FB | 	rdlong	local01, fp
10210     0C 4E 05 F1 | 	add	fp, #12
10214     A7 12 02 FB | 	rdlong	arg01, fp
10218     0C 4E 85 F1 | 	sub	fp, #12
1021c     94 10 B1 FD | 	call	#__system___float_fromuns
10220     FD 14 02 F6 | 	mov	arg02, result1
10224     0F 13 02 F6 | 	mov	arg01, local01
10228     BC 10 B1 FD | 	call	#__system___float_add
1022c     A7 FA 61 FC | 	wrlong	result1, fp
10230     60 02 90 FD | 	jmp	#LR__1295
10234                 | LR__1286
10234                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
10234     08 4E 05 F1 | 	add	fp, #8
10238     A7 1E 02 FB | 	rdlong	local01, fp
1023c     08 4E 85 F1 | 	sub	fp, #8
10240     1E 1E 0E F2 | 	cmp	local01, #30 wz
10244     14 4E 05 A1 |  if_e	add	fp, #20
10248     A7 24 02 AB |  if_e	rdlong	local04, fp
1024c     14 4E 85 A1 |  if_e	sub	fp, #20
10250     12 23 02 A6 |  if_e	mov	local03, local04
10254     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10258     38 00 90 5D |  if_ne	jmp	#LR__1287
1025c     A7 1E 02 FB | 	rdlong	local01, fp
10260     0C 4E 05 F1 | 	add	fp, #12
10264     A7 12 02 FB | 	rdlong	arg01, fp
10268     0C 4E 85 F1 | 	sub	fp, #12
1026c     09 13 52 F6 | 	abs	arg01, arg01 wc
10270     1F 26 C6 C9 |  if_b	decod	local05, #31
10274     00 26 06 36 |  if_ae	mov	local05, #0
10278     38 10 B1 FD | 	call	#__system___float_fromuns
1027c     13 FB 61 F5 | 	xor	result1, local05
10280     FD 14 02 F6 | 	mov	arg02, result1
10284     0F 13 02 F6 | 	mov	arg01, local01
10288     5C 10 B1 FD | 	call	#__system___float_add
1028c     A7 FA 61 FC | 	wrlong	result1, fp
10290     00 02 90 FD | 	jmp	#LR__1295
10294                 | LR__1287
10294                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
10294     08 4E 05 F1 | 	add	fp, #8
10298     A7 1E 02 FB | 	rdlong	local01, fp
1029c     08 4E 85 F1 | 	sub	fp, #8
102a0     1E 1E 0E F2 | 	cmp	local01, #30 wz
102a4     14 4E 05 A1 |  if_e	add	fp, #20
102a8     A7 24 02 AB |  if_e	rdlong	local04, fp
102ac     14 4E 85 A1 |  if_e	sub	fp, #20
102b0     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
102b4     1C 00 90 5D |  if_ne	jmp	#LR__1288
102b8     A7 12 02 FB | 	rdlong	arg01, fp
102bc     0C 4E 05 F1 | 	add	fp, #12
102c0     A7 14 02 FB | 	rdlong	arg02, fp
102c4     0C 4E 85 F1 | 	sub	fp, #12
102c8     1C 10 B1 FD | 	call	#__system___float_add
102cc     A7 FA 61 FC | 	wrlong	result1, fp
102d0     C0 01 90 FD | 	jmp	#LR__1295
102d4                 | LR__1288
102d4                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
102d4     08 4E 05 F1 | 	add	fp, #8
102d8     A7 1E 02 FB | 	rdlong	local01, fp
102dc     08 4E 85 F1 | 	sub	fp, #8
102e0     1F 1E 0E F2 | 	cmp	local01, #31 wz
102e4     24 00 90 5D |  if_ne	jmp	#LR__1289
102e8     14 4E 05 F1 | 	add	fp, #20
102ec     A7 22 02 FB | 	rdlong	local03, fp
102f0     14 4E 85 F1 | 	sub	fp, #20
102f4     1F 22 0E F2 | 	cmp	local03, #31 wz
102f8     A7 04 68 5C |  if_ne	wrlong	#2, fp
102fc     08 4E 05 51 |  if_ne	add	fp, #8
10300     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10304     08 4E 85 51 |  if_ne	sub	fp, #8
10308     88 01 90 5D |  if_ne	jmp	#LR__1295
1030c                 | LR__1289
1030c                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1030c     14 4E 05 F1 | 	add	fp, #20
10310     A7 1E 02 FB | 	rdlong	local01, fp
10314     14 4E 85 F1 | 	sub	fp, #20
10318     1F 1E 0E F2 | 	cmp	local01, #31 wz
1031c     24 00 90 5D |  if_ne	jmp	#LR__1290
10320     08 4E 05 F1 | 	add	fp, #8
10324     A7 22 02 FB | 	rdlong	local03, fp
10328     08 4E 85 F1 | 	sub	fp, #8
1032c     1F 22 0E F2 | 	cmp	local03, #31 wz
10330     A7 04 68 5C |  if_ne	wrlong	#2, fp
10334     08 4E 05 51 |  if_ne	add	fp, #8
10338     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1033c     08 4E 85 51 |  if_ne	sub	fp, #8
10340     50 01 90 5D |  if_ne	jmp	#LR__1295
10344                 | LR__1290
10344                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
10344     08 4E 05 F1 | 	add	fp, #8
10348     A7 1E 02 FB | 	rdlong	local01, fp
1034c     08 4E 85 F1 | 	sub	fp, #8
10350     1F 1E 0E F2 | 	cmp	local01, #31 wz
10354     14 4E 05 A1 |  if_e	add	fp, #20
10358     A7 22 02 AB |  if_e	rdlong	local03, fp
1035c     14 4E 85 A1 |  if_e	sub	fp, #20
10360     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10364     1C 00 90 5D |  if_ne	jmp	#LR__1291
10368     A7 12 02 FB | 	rdlong	arg01, fp
1036c     0C 4E 05 F1 | 	add	fp, #12
10370     A7 14 02 FB | 	rdlong	arg02, fp
10374     0C 4E 85 F1 | 	sub	fp, #12
10378     18 E8 B0 FD | 	call	#__system___string_concat
1037c     A7 FA 61 FC | 	wrlong	result1, fp
10380     10 01 90 FD | 	jmp	#LR__1295
10384                 | LR__1291
10384                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
10384     08 4E 05 F1 | 	add	fp, #8
10388     A7 1E 02 FB | 	rdlong	local01, fp
1038c     08 4E 85 F1 | 	sub	fp, #8
10390     2B 1E 0E F2 | 	cmp	local01, #43 wz
10394     14 4E 05 A1 |  if_e	add	fp, #20
10398     A7 22 02 AB |  if_e	rdlong	local03, fp
1039c     14 4E 85 A1 |  if_e	sub	fp, #20
103a0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
103a4     30 00 90 5D |  if_ne	jmp	#LR__1292
103a8     A7 12 02 FB | 	rdlong	arg01, fp
103ac     20 E9 BF FD | 	call	#_convertstring
103b0     FD 12 02 F6 | 	mov	arg01, result1
103b4     0C 4E 05 F1 | 	add	fp, #12
103b8     A7 14 02 FB | 	rdlong	arg02, fp
103bc     0C 4E 85 F1 | 	sub	fp, #12
103c0     D0 E7 B0 FD | 	call	#__system___string_concat
103c4     A7 FA 61 FC | 	wrlong	result1, fp
103c8     08 4E 05 F1 | 	add	fp, #8
103cc     A7 3E 68 FC | 	wrlong	#31, fp
103d0     08 4E 85 F1 | 	sub	fp, #8
103d4     BC 00 90 FD | 	jmp	#LR__1295
103d8                 | LR__1292
103d8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
103d8     08 4E 05 F1 | 	add	fp, #8
103dc     A7 1E 02 FB | 	rdlong	local01, fp
103e0     08 4E 85 F1 | 	sub	fp, #8
103e4     1F 1E 0E F2 | 	cmp	local01, #31 wz
103e8     14 4E 05 A1 |  if_e	add	fp, #20
103ec     A7 22 02 AB |  if_e	rdlong	local03, fp
103f0     14 4E 85 A1 |  if_e	sub	fp, #20
103f4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
103f8     28 00 90 5D |  if_ne	jmp	#LR__1293
103fc     A7 1E 02 FB | 	rdlong	local01, fp
10400     0C 4E 05 F1 | 	add	fp, #12
10404     A7 12 02 FB | 	rdlong	arg01, fp
10408     0C 4E 85 F1 | 	sub	fp, #12
1040c     C0 E8 BF FD | 	call	#_convertstring
10410     FD 14 02 F6 | 	mov	arg02, result1
10414     0F 13 02 F6 | 	mov	arg01, local01
10418     78 E7 B0 FD | 	call	#__system___string_concat
1041c     A7 FA 61 FC | 	wrlong	result1, fp
10420     70 00 90 FD | 	jmp	#LR__1295
10424                 | LR__1293
10424                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
10424     08 4E 05 F1 | 	add	fp, #8
10428     A7 1E 02 FB | 	rdlong	local01, fp
1042c     08 4E 85 F1 | 	sub	fp, #8
10430     2B 1E 0E F2 | 	cmp	local01, #43 wz
10434     14 4E 05 A1 |  if_e	add	fp, #20
10438     A7 22 02 AB |  if_e	rdlong	local03, fp
1043c     14 4E 85 A1 |  if_e	sub	fp, #20
10440     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10444     3C 00 90 5D |  if_ne	jmp	#LR__1294
10448     A7 12 02 FB | 	rdlong	arg01, fp
1044c     80 E8 BF FD | 	call	#_convertstring
10450     FD 1E 02 F6 | 	mov	local01, result1
10454     0C 4E 05 F1 | 	add	fp, #12
10458     A7 12 02 FB | 	rdlong	arg01, fp
1045c     0C 4E 85 F1 | 	sub	fp, #12
10460     6C E8 BF FD | 	call	#_convertstring
10464     FD 14 02 F6 | 	mov	arg02, result1
10468     0F 13 02 F6 | 	mov	arg01, local01
1046c     24 E7 B0 FD | 	call	#__system___string_concat
10470     A7 FA 61 FC | 	wrlong	result1, fp
10474     08 4E 05 F1 | 	add	fp, #8
10478     A7 3E 68 FC | 	wrlong	#31, fp
1047c     08 4E 85 F1 | 	sub	fp, #8
10480     10 00 90 FD | 	jmp	#LR__1295
10484                 | LR__1294
10484     A7 08 68 FC | 	wrlong	#4, fp
10488     08 4E 05 F1 | 	add	fp, #8
1048c     A7 FE 69 FC | 	wrlong	#255, fp
10490     08 4E 85 F1 | 	sub	fp, #8
10494                 | LR__1295
10494     A7 12 02 F6 | 	mov	arg01, fp
10498     5C A4 BF FD | 	call	#_push
1049c     A7 F0 03 F6 | 	mov	ptra, fp
104a0     B2 00 A0 FD | 	call	#popregs_
104a4                 | _do_plus_ret
104a4     2D 00 64 FD | 	ret
104a8                 | 
104a8                 | ' 
104a8                 | ' sub do_minus
104a8                 | _do_minus
104a8     05 4A 05 F6 | 	mov	COUNT_, #5
104ac     A8 00 A0 FD | 	call	#pushregs_
104b0     18 F0 07 F1 | 	add	ptra, #24
104b4     A8 A3 BF FD | 	call	#_pop
104b8     FD 1E 02 F6 | 	mov	local01, result1
104bc     FE 20 02 F6 | 	mov	local02, result2
104c0     FF 22 02 F6 | 	mov	local03, result3
104c4     0C 4E 05 F1 | 	add	fp, #12
104c8     A7 1E 62 FC | 	wrlong	local01, fp
104cc     04 4E 05 F1 | 	add	fp, #4
104d0     A7 20 62 FC | 	wrlong	local02, fp
104d4     04 4E 05 F1 | 	add	fp, #4
104d8     A7 22 62 FC | 	wrlong	local03, fp
104dc     14 4E 85 F1 | 	sub	fp, #20
104e0     7C A3 BF FD | 	call	#_pop
104e4     FF 22 02 F6 | 	mov	local03, result3
104e8     A7 FA 61 FC | 	wrlong	result1, fp
104ec     04 4E 05 F1 | 	add	fp, #4
104f0     A7 FC 61 FC | 	wrlong	result2, fp
104f4     04 4E 05 F1 | 	add	fp, #4
104f8     A7 22 62 FC | 	wrlong	local03, fp
104fc                 | ' 
104fc                 | ' t2=pop()
104fc                 | ' t1=pop()
104fc                 | ' 
104fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
104fc     08 4E 85 F1 | 	sub	fp, #8
10500     1D 22 0E F2 | 	cmp	local03, #29 wz
10504     14 4E 05 A1 |  if_e	add	fp, #20
10508     A7 24 02 AB |  if_e	rdlong	local04, fp
1050c     14 4E 85 A1 |  if_e	sub	fp, #20
10510     12 23 02 A6 |  if_e	mov	local03, local04
10514     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10518     5C 00 90 5D |  if_ne	jmp	#LR__1301
1051c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1051c     0C 4E 05 F1 | 	add	fp, #12
10520     A7 1E 02 FB | 	rdlong	local01, fp
10524     0C 4E 85 F1 | 	sub	fp, #12
10528     A7 22 02 FB | 	rdlong	local03, fp
1052c     11 1F 12 F2 | 	cmp	local01, local03 wc
10530     1C 00 90 3D |  if_ae	jmp	#LR__1300
10534     A7 1E 02 FB | 	rdlong	local01, fp
10538     0C 4E 05 F1 | 	add	fp, #12
1053c     A7 20 02 FB | 	rdlong	local02, fp
10540     0C 4E 85 F1 | 	sub	fp, #12
10544     10 1F 82 F1 | 	sub	local01, local02
10548     A7 1E 62 FC | 	wrlong	local01, fp
1054c     F4 02 90 FD | 	jmp	#LR__1310
10550                 | LR__1300
10550     A7 1E 02 FB | 	rdlong	local01, fp
10554     0C 4E 05 F1 | 	add	fp, #12
10558     A7 20 02 FB | 	rdlong	local02, fp
1055c     0C 4E 85 F1 | 	sub	fp, #12
10560     10 1F 82 F1 | 	sub	local01, local02
10564     A7 1E 62 FC | 	wrlong	local01, fp
10568     08 4E 05 F1 | 	add	fp, #8
1056c     A7 38 68 FC | 	wrlong	#28, fp
10570     08 4E 85 F1 | 	sub	fp, #8
10574     CC 02 90 FD | 	jmp	#LR__1310
10578                 | LR__1301
10578                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
10578     08 4E 05 F1 | 	add	fp, #8
1057c     A7 1E 02 FB | 	rdlong	local01, fp
10580     08 4E 85 F1 | 	sub	fp, #8
10584     1D 1E 0E F2 | 	cmp	local01, #29 wz
10588     14 4E 05 A1 |  if_e	add	fp, #20
1058c     A7 24 02 AB |  if_e	rdlong	local04, fp
10590     14 4E 85 A1 |  if_e	sub	fp, #20
10594     12 23 02 A6 |  if_e	mov	local03, local04
10598     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1059c     28 00 90 5D |  if_ne	jmp	#LR__1302
105a0     A7 1E 02 FB | 	rdlong	local01, fp
105a4     0C 4E 05 F1 | 	add	fp, #12
105a8     A7 20 02 FB | 	rdlong	local02, fp
105ac     0C 4E 85 F1 | 	sub	fp, #12
105b0     10 1F 82 F1 | 	sub	local01, local02
105b4     A7 1E 62 FC | 	wrlong	local01, fp
105b8     08 4E 05 F1 | 	add	fp, #8
105bc     A7 38 68 FC | 	wrlong	#28, fp
105c0     08 4E 85 F1 | 	sub	fp, #8
105c4     7C 02 90 FD | 	jmp	#LR__1310
105c8                 | LR__1302
105c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
105c8     08 4E 05 F1 | 	add	fp, #8
105cc     A7 1E 02 FB | 	rdlong	local01, fp
105d0     08 4E 85 F1 | 	sub	fp, #8
105d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
105d8     14 4E 05 A1 |  if_e	add	fp, #20
105dc     A7 24 02 AB |  if_e	rdlong	local04, fp
105e0     14 4E 85 A1 |  if_e	sub	fp, #20
105e4     12 23 02 A6 |  if_e	mov	local03, local04
105e8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
105ec     34 00 90 5D |  if_ne	jmp	#LR__1303
105f0     A7 12 02 FB | 	rdlong	arg01, fp
105f4     BC 0C B1 FD | 	call	#__system___float_fromuns
105f8     FD 12 02 F6 | 	mov	arg01, result1
105fc     0C 4E 05 F1 | 	add	fp, #12
10600     A7 14 02 FB | 	rdlong	arg02, fp
10604     0C 4E 85 F1 | 	sub	fp, #12
10608     1F 14 E6 F4 | 	bitnot	arg02, #31
1060c     D8 0C B1 FD | 	call	#__system___float_add
10610     A7 FA 61 FC | 	wrlong	result1, fp
10614     08 4E 05 F1 | 	add	fp, #8
10618     A7 3C 68 FC | 	wrlong	#30, fp
1061c     08 4E 85 F1 | 	sub	fp, #8
10620     20 02 90 FD | 	jmp	#LR__1310
10624                 | LR__1303
10624                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
10624     08 4E 05 F1 | 	add	fp, #8
10628     A7 1E 02 FB | 	rdlong	local01, fp
1062c     08 4E 85 F1 | 	sub	fp, #8
10630     1C 1E 0E F2 | 	cmp	local01, #28 wz
10634     14 4E 05 A1 |  if_e	add	fp, #20
10638     A7 24 02 AB |  if_e	rdlong	local04, fp
1063c     14 4E 85 A1 |  if_e	sub	fp, #20
10640     12 23 02 A6 |  if_e	mov	local03, local04
10644     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10648     1C 00 90 5D |  if_ne	jmp	#LR__1304
1064c     A7 1E 02 FB | 	rdlong	local01, fp
10650     0C 4E 05 F1 | 	add	fp, #12
10654     A7 20 02 FB | 	rdlong	local02, fp
10658     0C 4E 85 F1 | 	sub	fp, #12
1065c     10 1F 82 F1 | 	sub	local01, local02
10660     A7 1E 62 FC | 	wrlong	local01, fp
10664     DC 01 90 FD | 	jmp	#LR__1310
10668                 | LR__1304
10668                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
10668     08 4E 05 F1 | 	add	fp, #8
1066c     A7 1E 02 FB | 	rdlong	local01, fp
10670     08 4E 85 F1 | 	sub	fp, #8
10674     1C 1E 0E F2 | 	cmp	local01, #28 wz
10678     14 4E 05 A1 |  if_e	add	fp, #20
1067c     A7 24 02 AB |  if_e	rdlong	local04, fp
10680     14 4E 85 A1 |  if_e	sub	fp, #20
10684     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
10688     1C 00 90 5D |  if_ne	jmp	#LR__1305
1068c     A7 1E 02 FB | 	rdlong	local01, fp
10690     0C 4E 05 F1 | 	add	fp, #12
10694     A7 20 02 FB | 	rdlong	local02, fp
10698     0C 4E 85 F1 | 	sub	fp, #12
1069c     10 1F 82 F1 | 	sub	local01, local02
106a0     A7 1E 62 FC | 	wrlong	local01, fp
106a4     9C 01 90 FD | 	jmp	#LR__1310
106a8                 | LR__1305
106a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
106a8     08 4E 05 F1 | 	add	fp, #8
106ac     A7 1E 02 FB | 	rdlong	local01, fp
106b0     08 4E 85 F1 | 	sub	fp, #8
106b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
106b8     14 4E 05 A1 |  if_e	add	fp, #20
106bc     A7 22 02 AB |  if_e	rdlong	local03, fp
106c0     14 4E 85 A1 |  if_e	sub	fp, #20
106c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
106c8     44 00 90 5D |  if_ne	jmp	#LR__1306
106cc     A7 12 02 FB | 	rdlong	arg01, fp
106d0     09 13 52 F6 | 	abs	arg01, arg01 wc
106d4     1F 26 C6 C9 |  if_b	decod	local05, #31
106d8     00 26 06 36 |  if_ae	mov	local05, #0
106dc     D4 0B B1 FD | 	call	#__system___float_fromuns
106e0     13 FB 61 F5 | 	xor	result1, local05
106e4     FD 12 02 F6 | 	mov	arg01, result1
106e8     0C 4E 05 F1 | 	add	fp, #12
106ec     A7 14 02 FB | 	rdlong	arg02, fp
106f0     0C 4E 85 F1 | 	sub	fp, #12
106f4     1F 14 E6 F4 | 	bitnot	arg02, #31
106f8     EC 0B B1 FD | 	call	#__system___float_add
106fc     A7 FA 61 FC | 	wrlong	result1, fp
10700     08 4E 05 F1 | 	add	fp, #8
10704     A7 3C 68 FC | 	wrlong	#30, fp
10708     08 4E 85 F1 | 	sub	fp, #8
1070c     34 01 90 FD | 	jmp	#LR__1310
10710                 | LR__1306
10710                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
10710     08 4E 05 F1 | 	add	fp, #8
10714     A7 1E 02 FB | 	rdlong	local01, fp
10718     08 4E 85 F1 | 	sub	fp, #8
1071c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10720     14 4E 05 A1 |  if_e	add	fp, #20
10724     A7 22 02 AB |  if_e	rdlong	local03, fp
10728     14 4E 85 A1 |  if_e	sub	fp, #20
1072c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10730     2C 00 90 5D |  if_ne	jmp	#LR__1307
10734     A7 1E 02 FB | 	rdlong	local01, fp
10738     0C 4E 05 F1 | 	add	fp, #12
1073c     A7 12 02 FB | 	rdlong	arg01, fp
10740     0C 4E 85 F1 | 	sub	fp, #12
10744     6C 0B B1 FD | 	call	#__system___float_fromuns
10748     FD 14 02 F6 | 	mov	arg02, result1
1074c     0F 13 02 F6 | 	mov	arg01, local01
10750     1F 14 E6 F4 | 	bitnot	arg02, #31
10754     90 0B B1 FD | 	call	#__system___float_add
10758     A7 FA 61 FC | 	wrlong	result1, fp
1075c     E4 00 90 FD | 	jmp	#LR__1310
10760                 | LR__1307
10760                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
10760     08 4E 05 F1 | 	add	fp, #8
10764     A7 1E 02 FB | 	rdlong	local01, fp
10768     08 4E 85 F1 | 	sub	fp, #8
1076c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10770     14 4E 05 A1 |  if_e	add	fp, #20
10774     A7 22 02 AB |  if_e	rdlong	local03, fp
10778     14 4E 85 A1 |  if_e	sub	fp, #20
1077c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10780     3C 00 90 5D |  if_ne	jmp	#LR__1308
10784     A7 1E 02 FB | 	rdlong	local01, fp
10788     0C 4E 05 F1 | 	add	fp, #12
1078c     A7 12 02 FB | 	rdlong	arg01, fp
10790     0C 4E 85 F1 | 	sub	fp, #12
10794     09 13 52 F6 | 	abs	arg01, arg01 wc
10798     1F 26 C6 C9 |  if_b	decod	local05, #31
1079c     00 26 06 36 |  if_ae	mov	local05, #0
107a0     10 0B B1 FD | 	call	#__system___float_fromuns
107a4     13 FB 61 F5 | 	xor	result1, local05
107a8     FD 14 02 F6 | 	mov	arg02, result1
107ac     0F 13 02 F6 | 	mov	arg01, local01
107b0     1F 14 E6 F4 | 	bitnot	arg02, #31
107b4     30 0B B1 FD | 	call	#__system___float_add
107b8     A7 FA 61 FC | 	wrlong	result1, fp
107bc     84 00 90 FD | 	jmp	#LR__1310
107c0                 | LR__1308
107c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
107c0     08 4E 05 F1 | 	add	fp, #8
107c4     A7 1E 02 FB | 	rdlong	local01, fp
107c8     08 4E 85 F1 | 	sub	fp, #8
107cc     1E 1E 0E F2 | 	cmp	local01, #30 wz
107d0     14 4E 05 A1 |  if_e	add	fp, #20
107d4     A7 22 02 AB |  if_e	rdlong	local03, fp
107d8     14 4E 85 A1 |  if_e	sub	fp, #20
107dc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
107e0     20 00 90 5D |  if_ne	jmp	#LR__1309
107e4     A7 12 02 FB | 	rdlong	arg01, fp
107e8     0C 4E 05 F1 | 	add	fp, #12
107ec     A7 14 02 FB | 	rdlong	arg02, fp
107f0     0C 4E 85 F1 | 	sub	fp, #12
107f4     1F 14 E6 F4 | 	bitnot	arg02, #31
107f8     EC 0A B1 FD | 	call	#__system___float_add
107fc     A7 FA 61 FC | 	wrlong	result1, fp
10800     40 00 90 FD | 	jmp	#LR__1310
10804                 | LR__1309
10804                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
10804     08 4E 05 F1 | 	add	fp, #8
10808     A7 1E 02 FB | 	rdlong	local01, fp
1080c     08 4E 85 F1 | 	sub	fp, #8
10810     1F 1E 0E F2 | 	cmp	local01, #31 wz
10814     14 4E 05 51 |  if_ne	add	fp, #20
10818     A7 22 02 5B |  if_ne	rdlong	local03, fp
1081c     14 4E 85 51 |  if_ne	sub	fp, #20
10820     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
10824     A7 06 68 AC |  if_e	wrlong	#3, fp
10828     08 4E 05 A1 |  if_e	add	fp, #8
1082c     A7 FE 69 AC |  if_e	wrlong	#255, fp
10830     08 4E 85 A1 |  if_e	sub	fp, #8
10834     A7 0A 68 5C |  if_ne	wrlong	#5, fp
10838     08 4E 05 51 |  if_ne	add	fp, #8
1083c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10840     08 4E 85 51 |  if_ne	sub	fp, #8
10844                 | LR__1310
10844     A7 12 02 F6 | 	mov	arg01, fp
10848     AC A0 BF FD | 	call	#_push
1084c     A7 F0 03 F6 | 	mov	ptra, fp
10850     B2 00 A0 FD | 	call	#popregs_
10854                 | _do_minus_ret
10854     2D 00 64 FD | 	ret
10858                 | 
10858                 | ' 
10858                 | ' sub do_and 
10858                 | _do_and
10858     03 4A 05 F6 | 	mov	COUNT_, #3
1085c     A8 00 A0 FD | 	call	#pushregs_
10860     18 F0 07 F1 | 	add	ptra, #24
10864     F8 9F BF FD | 	call	#_pop
10868     FD 12 02 F6 | 	mov	arg01, result1
1086c     FE 1E 02 F6 | 	mov	local01, result2
10870     FF 20 02 F6 | 	mov	local02, result3
10874     0C 4E 05 F1 | 	add	fp, #12
10878     A7 12 62 FC | 	wrlong	arg01, fp
1087c     04 4E 05 F1 | 	add	fp, #4
10880     A7 1E 62 FC | 	wrlong	local01, fp
10884     04 4E 05 F1 | 	add	fp, #4
10888     A7 20 62 FC | 	wrlong	local02, fp
1088c     14 4E 85 F1 | 	sub	fp, #20
10890     CC 9F BF FD | 	call	#_pop
10894     FF 22 02 F6 | 	mov	local03, result3
10898     A7 FA 61 FC | 	wrlong	result1, fp
1089c     04 4E 05 F1 | 	add	fp, #4
108a0     A7 FC 61 FC | 	wrlong	result2, fp
108a4     04 4E 05 F1 | 	add	fp, #4
108a8     A7 22 62 FC | 	wrlong	local03, fp
108ac                 | ' 
108ac                 | ' t2=pop()
108ac                 | ' t1=pop()
108ac                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
108ac     08 4E 85 F1 | 	sub	fp, #8
108b0     1C 22 0E F2 | 	cmp	local03, #28 wz
108b4     A7 22 02 AB |  if_e	rdlong	local03, fp
108b8     A7 22 62 AC |  if_e	wrlong	local03, fp
108bc     08 4E 05 A1 |  if_e	add	fp, #8
108c0     A7 3A 68 AC |  if_e	wrlong	#29, fp
108c4     08 4E 85 A1 |  if_e	sub	fp, #8
108c8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
108c8     14 4E 05 F1 | 	add	fp, #20
108cc     A7 22 02 FB | 	rdlong	local03, fp
108d0     14 4E 85 F1 | 	sub	fp, #20
108d4     1C 22 0E F2 | 	cmp	local03, #28 wz
108d8     18 00 90 5D |  if_ne	jmp	#LR__1320
108dc     0C 4E 05 F1 | 	add	fp, #12
108e0     A7 22 02 FB | 	rdlong	local03, fp
108e4     A7 22 62 FC | 	wrlong	local03, fp
108e8     08 4E 05 F1 | 	add	fp, #8
108ec     A7 3A 68 FC | 	wrlong	#29, fp
108f0     14 4E 85 F1 | 	sub	fp, #20
108f4                 | LR__1320
108f4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
108f4     08 4E 05 F1 | 	add	fp, #8
108f8     A7 22 02 FB | 	rdlong	local03, fp
108fc     08 4E 85 F1 | 	sub	fp, #8
10900     1F 22 0E F2 | 	cmp	local03, #31 wz
10904     14 4E 05 51 |  if_ne	add	fp, #20
10908     A7 20 02 5B |  if_ne	rdlong	local02, fp
1090c     14 4E 85 51 |  if_ne	sub	fp, #20
10910     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10914     08 4E 05 51 |  if_ne	add	fp, #8
10918     A7 22 02 5B |  if_ne	rdlong	local03, fp
1091c     08 4E 85 51 |  if_ne	sub	fp, #8
10920     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10924     14 4E 05 51 |  if_ne	add	fp, #20
10928     14 4E 85 51 |  if_ne	sub	fp, #20
1092c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10930     A7 0C 68 AC |  if_e	wrlong	#6, fp
10934     08 4E 05 A1 |  if_e	add	fp, #8
10938     A7 FE 69 AC |  if_e	wrlong	#255, fp
1093c     08 4E 85 A1 |  if_e	sub	fp, #8
10940     18 00 90 AD |  if_e	jmp	#LR__1321
10944     A7 22 02 FB | 	rdlong	local03, fp
10948     0C 4E 05 F1 | 	add	fp, #12
1094c     A7 1E 02 FB | 	rdlong	local01, fp
10950     0C 4E 85 F1 | 	sub	fp, #12
10954     0F 23 02 F5 | 	and	local03, local01
10958     A7 22 62 FC | 	wrlong	local03, fp
1095c                 | LR__1321
1095c     A7 12 02 F6 | 	mov	arg01, fp
10960     94 9F BF FD | 	call	#_push
10964     A7 F0 03 F6 | 	mov	ptra, fp
10968     B2 00 A0 FD | 	call	#popregs_
1096c                 | _do_and_ret
1096c     2D 00 64 FD | 	ret
10970                 | 
10970                 | ' 
10970                 | ' sub do_or 
10970                 | _do_or
10970     03 4A 05 F6 | 	mov	COUNT_, #3
10974     A8 00 A0 FD | 	call	#pushregs_
10978     18 F0 07 F1 | 	add	ptra, #24
1097c     E0 9E BF FD | 	call	#_pop
10980     FD 12 02 F6 | 	mov	arg01, result1
10984     FE 1E 02 F6 | 	mov	local01, result2
10988     FF 20 02 F6 | 	mov	local02, result3
1098c     0C 4E 05 F1 | 	add	fp, #12
10990     A7 12 62 FC | 	wrlong	arg01, fp
10994     04 4E 05 F1 | 	add	fp, #4
10998     A7 1E 62 FC | 	wrlong	local01, fp
1099c     04 4E 05 F1 | 	add	fp, #4
109a0     A7 20 62 FC | 	wrlong	local02, fp
109a4     14 4E 85 F1 | 	sub	fp, #20
109a8     B4 9E BF FD | 	call	#_pop
109ac     FF 22 02 F6 | 	mov	local03, result3
109b0     A7 FA 61 FC | 	wrlong	result1, fp
109b4     04 4E 05 F1 | 	add	fp, #4
109b8     A7 FC 61 FC | 	wrlong	result2, fp
109bc     04 4E 05 F1 | 	add	fp, #4
109c0     A7 22 62 FC | 	wrlong	local03, fp
109c4                 | ' 
109c4                 | ' t2=pop()
109c4                 | ' t1=pop()
109c4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
109c4     08 4E 85 F1 | 	sub	fp, #8
109c8     1C 22 0E F2 | 	cmp	local03, #28 wz
109cc     A7 22 02 AB |  if_e	rdlong	local03, fp
109d0     A7 22 62 AC |  if_e	wrlong	local03, fp
109d4     08 4E 05 A1 |  if_e	add	fp, #8
109d8     A7 3A 68 AC |  if_e	wrlong	#29, fp
109dc     08 4E 85 A1 |  if_e	sub	fp, #8
109e0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
109e0     14 4E 05 F1 | 	add	fp, #20
109e4     A7 22 02 FB | 	rdlong	local03, fp
109e8     14 4E 85 F1 | 	sub	fp, #20
109ec     1C 22 0E F2 | 	cmp	local03, #28 wz
109f0     18 00 90 5D |  if_ne	jmp	#LR__1330
109f4     0C 4E 05 F1 | 	add	fp, #12
109f8     A7 22 02 FB | 	rdlong	local03, fp
109fc     A7 22 62 FC | 	wrlong	local03, fp
10a00     08 4E 05 F1 | 	add	fp, #8
10a04     A7 3A 68 FC | 	wrlong	#29, fp
10a08     14 4E 85 F1 | 	sub	fp, #20
10a0c                 | LR__1330
10a0c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
10a0c     08 4E 05 F1 | 	add	fp, #8
10a10     A7 22 02 FB | 	rdlong	local03, fp
10a14     08 4E 85 F1 | 	sub	fp, #8
10a18     1F 22 0E F2 | 	cmp	local03, #31 wz
10a1c     14 4E 05 51 |  if_ne	add	fp, #20
10a20     A7 20 02 5B |  if_ne	rdlong	local02, fp
10a24     14 4E 85 51 |  if_ne	sub	fp, #20
10a28     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10a2c     08 4E 05 51 |  if_ne	add	fp, #8
10a30     A7 22 02 5B |  if_ne	rdlong	local03, fp
10a34     08 4E 85 51 |  if_ne	sub	fp, #8
10a38     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10a3c     14 4E 05 51 |  if_ne	add	fp, #20
10a40     14 4E 85 51 |  if_ne	sub	fp, #20
10a44     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10a48     A7 0C 68 AC |  if_e	wrlong	#6, fp
10a4c     08 4E 05 A1 |  if_e	add	fp, #8
10a50     A7 FE 69 AC |  if_e	wrlong	#255, fp
10a54     08 4E 85 A1 |  if_e	sub	fp, #8
10a58     18 00 90 AD |  if_e	jmp	#LR__1331
10a5c     A7 22 02 FB | 	rdlong	local03, fp
10a60     0C 4E 05 F1 | 	add	fp, #12
10a64     A7 1E 02 FB | 	rdlong	local01, fp
10a68     0C 4E 85 F1 | 	sub	fp, #12
10a6c     0F 23 42 F5 | 	or	local03, local01
10a70     A7 22 62 FC | 	wrlong	local03, fp
10a74                 | LR__1331
10a74     A7 12 02 F6 | 	mov	arg01, fp
10a78     7C 9E BF FD | 	call	#_push
10a7c     A7 F0 03 F6 | 	mov	ptra, fp
10a80     B2 00 A0 FD | 	call	#popregs_
10a84                 | _do_or_ret
10a84     2D 00 64 FD | 	ret
10a88                 | 
10a88                 | ' 
10a88                 | ' sub do_mul
10a88                 | _do_mul
10a88     05 4A 05 F6 | 	mov	COUNT_, #5
10a8c     A8 00 A0 FD | 	call	#pushregs_
10a90     18 F0 07 F1 | 	add	ptra, #24
10a94     C8 9D BF FD | 	call	#_pop
10a98     FD 1E 02 F6 | 	mov	local01, result1
10a9c     FE 20 02 F6 | 	mov	local02, result2
10aa0     FF 22 02 F6 | 	mov	local03, result3
10aa4     0C 4E 05 F1 | 	add	fp, #12
10aa8     A7 1E 62 FC | 	wrlong	local01, fp
10aac     04 4E 05 F1 | 	add	fp, #4
10ab0     A7 20 62 FC | 	wrlong	local02, fp
10ab4     04 4E 05 F1 | 	add	fp, #4
10ab8     A7 22 62 FC | 	wrlong	local03, fp
10abc     14 4E 85 F1 | 	sub	fp, #20
10ac0     9C 9D BF FD | 	call	#_pop
10ac4     FF 22 02 F6 | 	mov	local03, result3
10ac8     A7 FA 61 FC | 	wrlong	result1, fp
10acc     04 4E 05 F1 | 	add	fp, #4
10ad0     A7 FC 61 FC | 	wrlong	result2, fp
10ad4     04 4E 05 F1 | 	add	fp, #4
10ad8     A7 22 62 FC | 	wrlong	local03, fp
10adc                 | ' 
10adc                 | ' t2=pop()
10adc                 | ' t1=pop()
10adc                 | ' 
10adc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
10adc     08 4E 85 F1 | 	sub	fp, #8
10ae0     1D 22 0E F2 | 	cmp	local03, #29 wz
10ae4     14 4E 05 A1 |  if_e	add	fp, #20
10ae8     A7 24 02 AB |  if_e	rdlong	local04, fp
10aec     14 4E 85 A1 |  if_e	sub	fp, #20
10af0     12 23 02 A6 |  if_e	mov	local03, local04
10af4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10af8     20 00 90 5D |  if_ne	jmp	#LR__1340
10afc     A7 20 02 FB | 	rdlong	local02, fp
10b00     0C 4E 05 F1 | 	add	fp, #12
10b04     A7 22 02 FB | 	rdlong	local03, fp
10b08     11 21 02 FD | 	qmul	local02, local03
10b0c     0C 4E 85 F1 | 	sub	fp, #12
10b10     18 1E 62 FD | 	getqx	local01
10b14     A7 1E 62 FC | 	wrlong	local01, fp
10b18     C4 02 90 FD | 	jmp	#LR__1349
10b1c                 | LR__1340
10b1c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
10b1c     08 4E 05 F1 | 	add	fp, #8
10b20     A7 1E 02 FB | 	rdlong	local01, fp
10b24     08 4E 85 F1 | 	sub	fp, #8
10b28     1D 1E 0E F2 | 	cmp	local01, #29 wz
10b2c     14 4E 05 A1 |  if_e	add	fp, #20
10b30     A7 24 02 AB |  if_e	rdlong	local04, fp
10b34     14 4E 85 A1 |  if_e	sub	fp, #20
10b38     12 23 02 A6 |  if_e	mov	local03, local04
10b3c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10b40     2C 00 90 5D |  if_ne	jmp	#LR__1341
10b44     A7 20 02 FB | 	rdlong	local02, fp
10b48     0C 4E 05 F1 | 	add	fp, #12
10b4c     A7 22 02 FB | 	rdlong	local03, fp
10b50     11 21 02 FD | 	qmul	local02, local03
10b54     0C 4E 85 F1 | 	sub	fp, #12
10b58     18 1E 62 FD | 	getqx	local01
10b5c     A7 1E 62 FC | 	wrlong	local01, fp
10b60     08 4E 05 F1 | 	add	fp, #8
10b64     A7 38 68 FC | 	wrlong	#28, fp
10b68     08 4E 85 F1 | 	sub	fp, #8
10b6c     70 02 90 FD | 	jmp	#LR__1349
10b70                 | LR__1341
10b70                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
10b70     08 4E 05 F1 | 	add	fp, #8
10b74     A7 1E 02 FB | 	rdlong	local01, fp
10b78     08 4E 85 F1 | 	sub	fp, #8
10b7c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10b80     14 4E 05 A1 |  if_e	add	fp, #20
10b84     A7 24 02 AB |  if_e	rdlong	local04, fp
10b88     14 4E 85 A1 |  if_e	sub	fp, #20
10b8c     12 23 02 A6 |  if_e	mov	local03, local04
10b90     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10b94     30 00 90 5D |  if_ne	jmp	#LR__1342
10b98     A7 12 02 FB | 	rdlong	arg01, fp
10b9c     14 07 B1 FD | 	call	#__system___float_fromuns
10ba0     FD 12 02 F6 | 	mov	arg01, result1
10ba4     0C 4E 05 F1 | 	add	fp, #12
10ba8     A7 14 02 FB | 	rdlong	arg02, fp
10bac     0C 4E 85 F1 | 	sub	fp, #12
10bb0     04 0B B1 FD | 	call	#__system___float_mul
10bb4     A7 FA 61 FC | 	wrlong	result1, fp
10bb8     08 4E 05 F1 | 	add	fp, #8
10bbc     A7 3C 68 FC | 	wrlong	#30, fp
10bc0     08 4E 85 F1 | 	sub	fp, #8
10bc4     18 02 90 FD | 	jmp	#LR__1349
10bc8                 | LR__1342
10bc8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
10bc8     08 4E 05 F1 | 	add	fp, #8
10bcc     A7 1E 02 FB | 	rdlong	local01, fp
10bd0     08 4E 85 F1 | 	sub	fp, #8
10bd4     1C 1E 0E F2 | 	cmp	local01, #28 wz
10bd8     14 4E 05 A1 |  if_e	add	fp, #20
10bdc     A7 24 02 AB |  if_e	rdlong	local04, fp
10be0     14 4E 85 A1 |  if_e	sub	fp, #20
10be4     12 23 02 A6 |  if_e	mov	local03, local04
10be8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10bec     20 00 90 5D |  if_ne	jmp	#LR__1343
10bf0     A7 20 02 FB | 	rdlong	local02, fp
10bf4     0C 4E 05 F1 | 	add	fp, #12
10bf8     A7 22 02 FB | 	rdlong	local03, fp
10bfc     11 21 02 FD | 	qmul	local02, local03
10c00     0C 4E 85 F1 | 	sub	fp, #12
10c04     18 1E 62 FD | 	getqx	local01
10c08     A7 1E 62 FC | 	wrlong	local01, fp
10c0c     D0 01 90 FD | 	jmp	#LR__1349
10c10                 | LR__1343
10c10                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
10c10     08 4E 05 F1 | 	add	fp, #8
10c14     A7 1E 02 FB | 	rdlong	local01, fp
10c18     08 4E 85 F1 | 	sub	fp, #8
10c1c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10c20     14 4E 05 A1 |  if_e	add	fp, #20
10c24     A7 24 02 AB |  if_e	rdlong	local04, fp
10c28     14 4E 85 A1 |  if_e	sub	fp, #20
10c2c     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
10c30     20 00 90 5D |  if_ne	jmp	#LR__1344
10c34     A7 20 02 FB | 	rdlong	local02, fp
10c38     0C 4E 05 F1 | 	add	fp, #12
10c3c     A7 22 02 FB | 	rdlong	local03, fp
10c40     11 21 02 FD | 	qmul	local02, local03
10c44     0C 4E 85 F1 | 	sub	fp, #12
10c48     18 1E 62 FD | 	getqx	local01
10c4c     A7 1E 62 FC | 	wrlong	local01, fp
10c50     8C 01 90 FD | 	jmp	#LR__1349
10c54                 | LR__1344
10c54                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
10c54     08 4E 05 F1 | 	add	fp, #8
10c58     A7 1E 02 FB | 	rdlong	local01, fp
10c5c     08 4E 85 F1 | 	sub	fp, #8
10c60     1C 1E 0E F2 | 	cmp	local01, #28 wz
10c64     14 4E 05 A1 |  if_e	add	fp, #20
10c68     A7 22 02 AB |  if_e	rdlong	local03, fp
10c6c     14 4E 85 A1 |  if_e	sub	fp, #20
10c70     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10c74     40 00 90 5D |  if_ne	jmp	#LR__1345
10c78     A7 12 02 FB | 	rdlong	arg01, fp
10c7c     09 13 52 F6 | 	abs	arg01, arg01 wc
10c80     1F 26 C6 C9 |  if_b	decod	local05, #31
10c84     00 26 06 36 |  if_ae	mov	local05, #0
10c88     28 06 B1 FD | 	call	#__system___float_fromuns
10c8c     13 FB 61 F5 | 	xor	result1, local05
10c90     FD 12 02 F6 | 	mov	arg01, result1
10c94     0C 4E 05 F1 | 	add	fp, #12
10c98     A7 14 02 FB | 	rdlong	arg02, fp
10c9c     0C 4E 85 F1 | 	sub	fp, #12
10ca0     14 0A B1 FD | 	call	#__system___float_mul
10ca4     A7 FA 61 FC | 	wrlong	result1, fp
10ca8     08 4E 05 F1 | 	add	fp, #8
10cac     A7 3C 68 FC | 	wrlong	#30, fp
10cb0     08 4E 85 F1 | 	sub	fp, #8
10cb4     28 01 90 FD | 	jmp	#LR__1349
10cb8                 | LR__1345
10cb8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
10cb8     08 4E 05 F1 | 	add	fp, #8
10cbc     A7 1E 02 FB | 	rdlong	local01, fp
10cc0     08 4E 85 F1 | 	sub	fp, #8
10cc4     1E 1E 0E F2 | 	cmp	local01, #30 wz
10cc8     14 4E 05 A1 |  if_e	add	fp, #20
10ccc     A7 22 02 AB |  if_e	rdlong	local03, fp
10cd0     14 4E 85 A1 |  if_e	sub	fp, #20
10cd4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10cd8     28 00 90 5D |  if_ne	jmp	#LR__1346
10cdc     A7 1E 02 FB | 	rdlong	local01, fp
10ce0     0C 4E 05 F1 | 	add	fp, #12
10ce4     A7 12 02 FB | 	rdlong	arg01, fp
10ce8     0C 4E 85 F1 | 	sub	fp, #12
10cec     C4 05 B1 FD | 	call	#__system___float_fromuns
10cf0     FD 14 02 F6 | 	mov	arg02, result1
10cf4     0F 13 02 F6 | 	mov	arg01, local01
10cf8     BC 09 B1 FD | 	call	#__system___float_mul
10cfc     A7 FA 61 FC | 	wrlong	result1, fp
10d00     DC 00 90 FD | 	jmp	#LR__1349
10d04                 | LR__1346
10d04                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
10d04     08 4E 05 F1 | 	add	fp, #8
10d08     A7 1E 02 FB | 	rdlong	local01, fp
10d0c     08 4E 85 F1 | 	sub	fp, #8
10d10     1E 1E 0E F2 | 	cmp	local01, #30 wz
10d14     14 4E 05 A1 |  if_e	add	fp, #20
10d18     A7 22 02 AB |  if_e	rdlong	local03, fp
10d1c     14 4E 85 A1 |  if_e	sub	fp, #20
10d20     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10d24     38 00 90 5D |  if_ne	jmp	#LR__1347
10d28     A7 1E 02 FB | 	rdlong	local01, fp
10d2c     0C 4E 05 F1 | 	add	fp, #12
10d30     A7 12 02 FB | 	rdlong	arg01, fp
10d34     0C 4E 85 F1 | 	sub	fp, #12
10d38     09 13 52 F6 | 	abs	arg01, arg01 wc
10d3c     1F 26 C6 C9 |  if_b	decod	local05, #31
10d40     00 26 06 36 |  if_ae	mov	local05, #0
10d44     6C 05 B1 FD | 	call	#__system___float_fromuns
10d48     13 FB 61 F5 | 	xor	result1, local05
10d4c     FD 14 02 F6 | 	mov	arg02, result1
10d50     0F 13 02 F6 | 	mov	arg01, local01
10d54     60 09 B1 FD | 	call	#__system___float_mul
10d58     A7 FA 61 FC | 	wrlong	result1, fp
10d5c     80 00 90 FD | 	jmp	#LR__1349
10d60                 | LR__1347
10d60                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
10d60     08 4E 05 F1 | 	add	fp, #8
10d64     A7 1E 02 FB | 	rdlong	local01, fp
10d68     08 4E 85 F1 | 	sub	fp, #8
10d6c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10d70     14 4E 05 A1 |  if_e	add	fp, #20
10d74     A7 22 02 AB |  if_e	rdlong	local03, fp
10d78     14 4E 85 A1 |  if_e	sub	fp, #20
10d7c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10d80     1C 00 90 5D |  if_ne	jmp	#LR__1348
10d84     A7 12 02 FB | 	rdlong	arg01, fp
10d88     0C 4E 05 F1 | 	add	fp, #12
10d8c     A7 14 02 FB | 	rdlong	arg02, fp
10d90     0C 4E 85 F1 | 	sub	fp, #12
10d94     20 09 B1 FD | 	call	#__system___float_mul
10d98     A7 FA 61 FC | 	wrlong	result1, fp
10d9c     40 00 90 FD | 	jmp	#LR__1349
10da0                 | LR__1348
10da0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
10da0     08 4E 05 F1 | 	add	fp, #8
10da4     A7 1E 02 FB | 	rdlong	local01, fp
10da8     08 4E 85 F1 | 	sub	fp, #8
10dac     1F 1E 0E F2 | 	cmp	local01, #31 wz
10db0     14 4E 05 51 |  if_ne	add	fp, #20
10db4     A7 22 02 5B |  if_ne	rdlong	local03, fp
10db8     14 4E 85 51 |  if_ne	sub	fp, #20
10dbc     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
10dc0     A7 10 68 AC |  if_e	wrlong	#8, fp
10dc4     08 4E 05 A1 |  if_e	add	fp, #8
10dc8     A7 FE 69 AC |  if_e	wrlong	#255, fp
10dcc     08 4E 85 A1 |  if_e	sub	fp, #8
10dd0     A7 12 68 5C |  if_ne	wrlong	#9, fp
10dd4     08 4E 05 51 |  if_ne	add	fp, #8
10dd8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10ddc     08 4E 85 51 |  if_ne	sub	fp, #8
10de0                 | LR__1349
10de0     A7 12 02 F6 | 	mov	arg01, fp
10de4     10 9B BF FD | 	call	#_push
10de8     A7 F0 03 F6 | 	mov	ptra, fp
10dec     B2 00 A0 FD | 	call	#popregs_
10df0                 | _do_mul_ret
10df0     2D 00 64 FD | 	ret
10df4                 | 
10df4                 | ' 
10df4                 | ' sub do_div 
10df4                 | _do_div
10df4     01 4A 05 F6 | 	mov	COUNT_, #1
10df8     A8 00 A0 FD | 	call	#pushregs_
10dfc     18 F0 07 F1 | 	add	ptra, #24
10e00     5C 9A BF FD | 	call	#_pop
10e04     FD 66 02 F6 | 	mov	muldivb_, result1
10e08     FE 64 02 F6 | 	mov	muldiva_, result2
10e0c     FF 1E 02 F6 | 	mov	local01, result3
10e10     0C 4E 05 F1 | 	add	fp, #12
10e14     A7 66 62 FC | 	wrlong	muldivb_, fp
10e18     04 4E 05 F1 | 	add	fp, #4
10e1c     A7 64 62 FC | 	wrlong	muldiva_, fp
10e20     04 4E 05 F1 | 	add	fp, #4
10e24     A7 1E 62 FC | 	wrlong	local01, fp
10e28     14 4E 85 F1 | 	sub	fp, #20
10e2c     30 9A BF FD | 	call	#_pop
10e30     A7 FA 61 FC | 	wrlong	result1, fp
10e34     04 4E 05 F1 | 	add	fp, #4
10e38     A7 FC 61 FC | 	wrlong	result2, fp
10e3c     04 4E 05 F1 | 	add	fp, #4
10e40     A7 FE 61 FC | 	wrlong	result3, fp
10e44                 | ' 
10e44                 | ' t2=pop()
10e44                 | ' t1=pop()
10e44                 | ' 
10e44                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
10e44     08 4E 85 F1 | 	sub	fp, #8
10e48     1F FE 0D F2 | 	cmp	result3, #31 wz
10e4c     14 4E 05 51 |  if_ne	add	fp, #20
10e50     A7 12 02 5B |  if_ne	rdlong	arg01, fp
10e54     14 4E 85 51 |  if_ne	sub	fp, #20
10e58     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
10e5c     A7 14 68 AC |  if_e	wrlong	#10, fp
10e60     08 4E 05 A1 |  if_e	add	fp, #8
10e64     A7 FE 69 AC |  if_e	wrlong	#255, fp
10e68     08 4E 85 A1 |  if_e	sub	fp, #8
10e6c     90 01 90 AD |  if_e	jmp	#LR__1356
10e70                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
10e70     08 4E 05 F1 | 	add	fp, #8
10e74     A7 66 02 FB | 	rdlong	muldivb_, fp
10e78     08 4E 85 F1 | 	sub	fp, #8
10e7c     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10e80     1C 00 90 5D |  if_ne	jmp	#LR__1350
10e84     08 4E 05 F1 | 	add	fp, #8
10e88     A7 38 68 FC | 	wrlong	#28, fp
10e8c     08 4E 85 F1 | 	sub	fp, #8
10e90     A7 12 02 FB | 	rdlong	arg01, fp
10e94     00 14 06 F6 | 	mov	arg02, #0
10e98     E4 0C B1 FD | 	call	#__system___float_tointeger
10e9c     A7 FA 61 FC | 	wrlong	result1, fp
10ea0                 | LR__1350
10ea0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
10ea0     14 4E 05 F1 | 	add	fp, #20
10ea4     A7 66 02 FB | 	rdlong	muldivb_, fp
10ea8     14 4E 85 F1 | 	sub	fp, #20
10eac     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10eb0     28 00 90 5D |  if_ne	jmp	#LR__1351
10eb4     14 4E 05 F1 | 	add	fp, #20
10eb8     A7 38 68 FC | 	wrlong	#28, fp
10ebc     08 4E 85 F1 | 	sub	fp, #8
10ec0     A7 12 02 FB | 	rdlong	arg01, fp
10ec4     0C 4E 85 F1 | 	sub	fp, #12
10ec8     00 14 06 F6 | 	mov	arg02, #0
10ecc     B0 0C B1 FD | 	call	#__system___float_tointeger
10ed0     0C 4E 05 F1 | 	add	fp, #12
10ed4     A7 FA 61 FC | 	wrlong	result1, fp
10ed8     0C 4E 85 F1 | 	sub	fp, #12
10edc                 | LR__1351
10edc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
10edc     08 4E 05 F1 | 	add	fp, #8
10ee0     A7 66 02 FB | 	rdlong	muldivb_, fp
10ee4     08 4E 85 F1 | 	sub	fp, #8
10ee8     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10eec     14 4E 05 A1 |  if_e	add	fp, #20
10ef0     A7 1E 02 AB |  if_e	rdlong	local01, fp
10ef4     14 4E 85 A1 |  if_e	sub	fp, #20
10ef8     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10efc     20 00 90 5D |  if_ne	jmp	#LR__1352
10f00     0C 4E 05 F1 | 	add	fp, #12
10f04     A7 1E 02 FB | 	rdlong	local01, fp
10f08     0C 4E 85 F1 | 	sub	fp, #12
10f0c     A7 66 02 FB | 	rdlong	muldivb_, fp
10f10     0F 67 12 FD | 	qdiv	muldivb_, local01
10f14     18 1E 62 FD | 	getqx	local01
10f18     A7 1E 62 FC | 	wrlong	local01, fp
10f1c     E0 00 90 FD | 	jmp	#LR__1356
10f20                 | LR__1352
10f20                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
10f20     08 4E 05 F1 | 	add	fp, #8
10f24     A7 66 02 FB | 	rdlong	muldivb_, fp
10f28     08 4E 85 F1 | 	sub	fp, #8
10f2c     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10f30     14 4E 05 A1 |  if_e	add	fp, #20
10f34     A7 1E 02 AB |  if_e	rdlong	local01, fp
10f38     14 4E 85 A1 |  if_e	sub	fp, #20
10f3c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10f40     2C 00 90 5D |  if_ne	jmp	#LR__1353
10f44     0C 4E 05 F1 | 	add	fp, #12
10f48     A7 1E 02 FB | 	rdlong	local01, fp
10f4c     0C 4E 85 F1 | 	sub	fp, #12
10f50     A7 66 02 FB | 	rdlong	muldivb_, fp
10f54     0F 67 12 FD | 	qdiv	muldivb_, local01
10f58     18 1E 62 FD | 	getqx	local01
10f5c     A7 1E 62 FC | 	wrlong	local01, fp
10f60     08 4E 05 F1 | 	add	fp, #8
10f64     A7 38 68 FC | 	wrlong	#28, fp
10f68     08 4E 85 F1 | 	sub	fp, #8
10f6c     90 00 90 FD | 	jmp	#LR__1356
10f70                 | LR__1353
10f70                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
10f70     08 4E 05 F1 | 	add	fp, #8
10f74     A7 66 02 FB | 	rdlong	muldivb_, fp
10f78     08 4E 85 F1 | 	sub	fp, #8
10f7c     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10f80     14 4E 05 A1 |  if_e	add	fp, #20
10f84     A7 1E 02 AB |  if_e	rdlong	local01, fp
10f88     14 4E 85 A1 |  if_e	sub	fp, #20
10f8c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10f90     1C 00 90 5D |  if_ne	jmp	#LR__1354
10f94     A7 64 02 FB | 	rdlong	muldiva_, fp
10f98     0C 4E 05 F1 | 	add	fp, #12
10f9c     A7 66 02 FB | 	rdlong	muldivb_, fp
10fa0     0C 4E 85 F1 | 	sub	fp, #12
10fa4     BA 00 A0 FD | 	call	#divide_
10fa8     A7 66 62 FC | 	wrlong	muldivb_, fp
10fac     50 00 90 FD | 	jmp	#LR__1356
10fb0                 | LR__1354
10fb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
10fb0     08 4E 05 F1 | 	add	fp, #8
10fb4     A7 66 02 FB | 	rdlong	muldivb_, fp
10fb8     08 4E 85 F1 | 	sub	fp, #8
10fbc     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10fc0     14 4E 05 A1 |  if_e	add	fp, #20
10fc4     A7 1E 02 AB |  if_e	rdlong	local01, fp
10fc8     14 4E 85 A1 |  if_e	sub	fp, #20
10fcc     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10fd0     1C 00 90 5D |  if_ne	jmp	#LR__1355
10fd4     A7 64 02 FB | 	rdlong	muldiva_, fp
10fd8     0C 4E 05 F1 | 	add	fp, #12
10fdc     A7 66 02 FB | 	rdlong	muldivb_, fp
10fe0     0C 4E 85 F1 | 	sub	fp, #12
10fe4     BA 00 A0 FD | 	call	#divide_
10fe8     A7 66 62 FC | 	wrlong	muldivb_, fp
10fec     10 00 90 FD | 	jmp	#LR__1356
10ff0                 | LR__1355
10ff0     A7 16 68 FC | 	wrlong	#11, fp
10ff4     08 4E 05 F1 | 	add	fp, #8
10ff8     A7 FE 69 FC | 	wrlong	#255, fp
10ffc     08 4E 85 F1 | 	sub	fp, #8
11000                 | LR__1356
11000     A7 12 02 F6 | 	mov	arg01, fp
11004     F0 98 BF FD | 	call	#_push
11008     A7 F0 03 F6 | 	mov	ptra, fp
1100c     B2 00 A0 FD | 	call	#popregs_
11010                 | _do_div_ret
11010     2D 00 64 FD | 	ret
11014                 | 
11014                 | ' 
11014                 | ' sub do_fdiv 
11014                 | _do_fdiv
11014     02 4A 05 F6 | 	mov	COUNT_, #2
11018     A8 00 A0 FD | 	call	#pushregs_
1101c     18 F0 07 F1 | 	add	ptra, #24
11020     3C 98 BF FD | 	call	#_pop
11024     FD 14 02 F6 | 	mov	arg02, result1
11028     FE 12 02 F6 | 	mov	arg01, result2
1102c     FF 1E 02 F6 | 	mov	local01, result3
11030     0C 4E 05 F1 | 	add	fp, #12
11034     A7 14 62 FC | 	wrlong	arg02, fp
11038     04 4E 05 F1 | 	add	fp, #4
1103c     A7 12 62 FC | 	wrlong	arg01, fp
11040     04 4E 05 F1 | 	add	fp, #4
11044     A7 1E 62 FC | 	wrlong	local01, fp
11048     14 4E 85 F1 | 	sub	fp, #20
1104c     10 98 BF FD | 	call	#_pop
11050     A7 FA 61 FC | 	wrlong	result1, fp
11054     04 4E 05 F1 | 	add	fp, #4
11058     A7 FC 61 FC | 	wrlong	result2, fp
1105c     04 4E 05 F1 | 	add	fp, #4
11060     A7 FE 61 FC | 	wrlong	result3, fp
11064                 | ' 
11064                 | ' t2=pop()
11064                 | ' t1=pop()
11064                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
11064     08 4E 85 F1 | 	sub	fp, #8
11068     1F FE 0D F2 | 	cmp	result3, #31 wz
1106c     14 4E 05 51 |  if_ne	add	fp, #20
11070     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11074     14 4E 85 51 |  if_ne	sub	fp, #20
11078     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
1107c     A7 14 68 AC |  if_e	wrlong	#10, fp
11080     08 4E 05 A1 |  if_e	add	fp, #8
11084     A7 FE 69 AC |  if_e	wrlong	#255, fp
11088     08 4E 85 A1 |  if_e	sub	fp, #8
1108c     38 01 90 AD |  if_e	jmp	#LR__1365
11090                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
11090     08 4E 05 F1 | 	add	fp, #8
11094     A7 14 02 FB | 	rdlong	arg02, fp
11098     08 4E 85 F1 | 	sub	fp, #8
1109c     1C 14 0E F2 | 	cmp	arg02, #28 wz
110a0     28 00 90 5D |  if_ne	jmp	#LR__1360
110a4     08 4E 05 F1 | 	add	fp, #8
110a8     A7 3C 68 FC | 	wrlong	#30, fp
110ac     08 4E 85 F1 | 	sub	fp, #8
110b0     A7 12 02 FB | 	rdlong	arg01, fp
110b4     09 13 52 F6 | 	abs	arg01, arg01 wc
110b8     1F 20 C6 C9 |  if_b	decod	local02, #31
110bc     00 20 06 36 |  if_ae	mov	local02, #0
110c0     F0 01 B1 FD | 	call	#__system___float_fromuns
110c4     10 FB 61 F5 | 	xor	result1, local02
110c8     A7 FA 61 FC | 	wrlong	result1, fp
110cc                 | LR__1360
110cc                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
110cc     08 4E 05 F1 | 	add	fp, #8
110d0     A7 14 02 FB | 	rdlong	arg02, fp
110d4     08 4E 85 F1 | 	sub	fp, #8
110d8     1D 14 0E F2 | 	cmp	arg02, #29 wz
110dc     18 00 90 5D |  if_ne	jmp	#LR__1361
110e0     08 4E 05 F1 | 	add	fp, #8
110e4     A7 3C 68 FC | 	wrlong	#30, fp
110e8     08 4E 85 F1 | 	sub	fp, #8
110ec     A7 12 02 FB | 	rdlong	arg01, fp
110f0     C0 01 B1 FD | 	call	#__system___float_fromuns
110f4     A7 FA 61 FC | 	wrlong	result1, fp
110f8                 | LR__1361
110f8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
110f8     14 4E 05 F1 | 	add	fp, #20
110fc     A7 14 02 FB | 	rdlong	arg02, fp
11100     14 4E 85 F1 | 	sub	fp, #20
11104     1C 14 0E F2 | 	cmp	arg02, #28 wz
11108     34 00 90 5D |  if_ne	jmp	#LR__1362
1110c     14 4E 05 F1 | 	add	fp, #20
11110     A7 3C 68 FC | 	wrlong	#30, fp
11114     08 4E 85 F1 | 	sub	fp, #8
11118     A7 12 02 FB | 	rdlong	arg01, fp
1111c     0C 4E 85 F1 | 	sub	fp, #12
11120     09 13 52 F6 | 	abs	arg01, arg01 wc
11124     1F 20 C6 C9 |  if_b	decod	local02, #31
11128     00 20 06 36 |  if_ae	mov	local02, #0
1112c     84 01 B1 FD | 	call	#__system___float_fromuns
11130     10 FB 61 F5 | 	xor	result1, local02
11134     0C 4E 05 F1 | 	add	fp, #12
11138     A7 FA 61 FC | 	wrlong	result1, fp
1113c     0C 4E 85 F1 | 	sub	fp, #12
11140                 | LR__1362
11140                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
11140     14 4E 05 F1 | 	add	fp, #20
11144     A7 14 02 FB | 	rdlong	arg02, fp
11148     14 4E 85 F1 | 	sub	fp, #20
1114c     1D 14 0E F2 | 	cmp	arg02, #29 wz
11150     24 00 90 5D |  if_ne	jmp	#LR__1363
11154     14 4E 05 F1 | 	add	fp, #20
11158     A7 3C 68 FC | 	wrlong	#30, fp
1115c     08 4E 85 F1 | 	sub	fp, #8
11160     A7 12 02 FB | 	rdlong	arg01, fp
11164     0C 4E 85 F1 | 	sub	fp, #12
11168     48 01 B1 FD | 	call	#__system___float_fromuns
1116c     0C 4E 05 F1 | 	add	fp, #12
11170     A7 FA 61 FC | 	wrlong	result1, fp
11174     0C 4E 85 F1 | 	sub	fp, #12
11178                 | LR__1363
11178                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
11178     08 4E 05 F1 | 	add	fp, #8
1117c     A7 14 02 FB | 	rdlong	arg02, fp
11180     08 4E 85 F1 | 	sub	fp, #8
11184     1E 14 0E F2 | 	cmp	arg02, #30 wz
11188     14 4E 05 A1 |  if_e	add	fp, #20
1118c     A7 1E 02 AB |  if_e	rdlong	local01, fp
11190     14 4E 85 A1 |  if_e	sub	fp, #20
11194     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
11198     1C 00 90 5D |  if_ne	jmp	#LR__1364
1119c     A7 12 02 FB | 	rdlong	arg01, fp
111a0     0C 4E 05 F1 | 	add	fp, #12
111a4     A7 14 02 FB | 	rdlong	arg02, fp
111a8     0C 4E 85 F1 | 	sub	fp, #12
111ac     0C 07 B1 FD | 	call	#__system___float_div
111b0     A7 FA 61 FC | 	wrlong	result1, fp
111b4     10 00 90 FD | 	jmp	#LR__1365
111b8                 | LR__1364
111b8     A7 16 68 FC | 	wrlong	#11, fp
111bc     08 4E 05 F1 | 	add	fp, #8
111c0     A7 FE 69 FC | 	wrlong	#255, fp
111c4     08 4E 85 F1 | 	sub	fp, #8
111c8                 | LR__1365
111c8     A7 12 02 F6 | 	mov	arg01, fp
111cc     28 97 BF FD | 	call	#_push
111d0     A7 F0 03 F6 | 	mov	ptra, fp
111d4     B2 00 A0 FD | 	call	#popregs_
111d8                 | _do_fdiv_ret
111d8     2D 00 64 FD | 	ret
111dc                 | 
111dc                 | ' 
111dc                 | ' 
111dc                 | ' sub do_mod 
111dc                 | _do_mod
111dc     01 4A 05 F6 | 	mov	COUNT_, #1
111e0     A8 00 A0 FD | 	call	#pushregs_
111e4     18 F0 07 F1 | 	add	ptra, #24
111e8     74 96 BF FD | 	call	#_pop
111ec     FD 66 02 F6 | 	mov	muldivb_, result1
111f0     FE 64 02 F6 | 	mov	muldiva_, result2
111f4     FF 1E 02 F6 | 	mov	local01, result3
111f8     0C 4E 05 F1 | 	add	fp, #12
111fc     A7 66 62 FC | 	wrlong	muldivb_, fp
11200     04 4E 05 F1 | 	add	fp, #4
11204     A7 64 62 FC | 	wrlong	muldiva_, fp
11208     04 4E 05 F1 | 	add	fp, #4
1120c     A7 1E 62 FC | 	wrlong	local01, fp
11210     14 4E 85 F1 | 	sub	fp, #20
11214     48 96 BF FD | 	call	#_pop
11218     A7 FA 61 FC | 	wrlong	result1, fp
1121c     04 4E 05 F1 | 	add	fp, #4
11220     A7 FC 61 FC | 	wrlong	result2, fp
11224     04 4E 05 F1 | 	add	fp, #4
11228     A7 FE 61 FC | 	wrlong	result3, fp
1122c                 | ' 
1122c                 | ' t2=pop()
1122c                 | ' t1=pop()
1122c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1122c     08 4E 85 F1 | 	sub	fp, #8
11230     1F FE 0D F2 | 	cmp	result3, #31 wz
11234     14 4E 05 51 |  if_ne	add	fp, #20
11238     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1123c     14 4E 85 51 |  if_ne	sub	fp, #20
11240     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
11244     A7 14 68 AC |  if_e	wrlong	#10, fp
11248     08 4E 05 A1 |  if_e	add	fp, #8
1124c     A7 FE 69 AC |  if_e	wrlong	#255, fp
11250     08 4E 85 A1 |  if_e	sub	fp, #8
11254     90 01 90 AD |  if_e	jmp	#LR__1376
11258                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
11258     08 4E 05 F1 | 	add	fp, #8
1125c     A7 66 02 FB | 	rdlong	muldivb_, fp
11260     08 4E 85 F1 | 	sub	fp, #8
11264     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
11268     1C 00 90 5D |  if_ne	jmp	#LR__1370
1126c     08 4E 05 F1 | 	add	fp, #8
11270     A7 38 68 FC | 	wrlong	#28, fp
11274     08 4E 85 F1 | 	sub	fp, #8
11278     A7 12 02 FB | 	rdlong	arg01, fp
1127c     00 14 06 F6 | 	mov	arg02, #0
11280     FC 08 B1 FD | 	call	#__system___float_tointeger
11284     A7 FA 61 FC | 	wrlong	result1, fp
11288                 | LR__1370
11288                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
11288     14 4E 05 F1 | 	add	fp, #20
1128c     A7 66 02 FB | 	rdlong	muldivb_, fp
11290     14 4E 85 F1 | 	sub	fp, #20
11294     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
11298     28 00 90 5D |  if_ne	jmp	#LR__1371
1129c     14 4E 05 F1 | 	add	fp, #20
112a0     A7 38 68 FC | 	wrlong	#28, fp
112a4     08 4E 85 F1 | 	sub	fp, #8
112a8     A7 12 02 FB | 	rdlong	arg01, fp
112ac     0C 4E 85 F1 | 	sub	fp, #12
112b0     00 14 06 F6 | 	mov	arg02, #0
112b4     C8 08 B1 FD | 	call	#__system___float_tointeger
112b8     0C 4E 05 F1 | 	add	fp, #12
112bc     A7 FA 61 FC | 	wrlong	result1, fp
112c0     0C 4E 85 F1 | 	sub	fp, #12
112c4                 | LR__1371
112c4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
112c4     08 4E 05 F1 | 	add	fp, #8
112c8     A7 66 02 FB | 	rdlong	muldivb_, fp
112cc     08 4E 85 F1 | 	sub	fp, #8
112d0     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
112d4     14 4E 05 A1 |  if_e	add	fp, #20
112d8     A7 1E 02 AB |  if_e	rdlong	local01, fp
112dc     14 4E 85 A1 |  if_e	sub	fp, #20
112e0     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
112e4     20 00 90 5D |  if_ne	jmp	#LR__1372
112e8     0C 4E 05 F1 | 	add	fp, #12
112ec     A7 1E 02 FB | 	rdlong	local01, fp
112f0     0C 4E 85 F1 | 	sub	fp, #12
112f4     A7 66 02 FB | 	rdlong	muldivb_, fp
112f8     0F 67 12 FD | 	qdiv	muldivb_, local01
112fc     19 1E 62 FD | 	getqy	local01
11300     A7 1E 62 FC | 	wrlong	local01, fp
11304     E0 00 90 FD | 	jmp	#LR__1376
11308                 | LR__1372
11308                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
11308     08 4E 05 F1 | 	add	fp, #8
1130c     A7 66 02 FB | 	rdlong	muldivb_, fp
11310     08 4E 85 F1 | 	sub	fp, #8
11314     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
11318     14 4E 05 A1 |  if_e	add	fp, #20
1131c     A7 1E 02 AB |  if_e	rdlong	local01, fp
11320     14 4E 85 A1 |  if_e	sub	fp, #20
11324     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
11328     2C 00 90 5D |  if_ne	jmp	#LR__1373
1132c     0C 4E 05 F1 | 	add	fp, #12
11330     A7 1E 02 FB | 	rdlong	local01, fp
11334     0C 4E 85 F1 | 	sub	fp, #12
11338     A7 66 02 FB | 	rdlong	muldivb_, fp
1133c     0F 67 12 FD | 	qdiv	muldivb_, local01
11340     19 1E 62 FD | 	getqy	local01
11344     A7 1E 62 FC | 	wrlong	local01, fp
11348     08 4E 05 F1 | 	add	fp, #8
1134c     A7 38 68 FC | 	wrlong	#28, fp
11350     08 4E 85 F1 | 	sub	fp, #8
11354     90 00 90 FD | 	jmp	#LR__1376
11358                 | LR__1373
11358                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
11358     08 4E 05 F1 | 	add	fp, #8
1135c     A7 66 02 FB | 	rdlong	muldivb_, fp
11360     08 4E 85 F1 | 	sub	fp, #8
11364     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
11368     14 4E 05 A1 |  if_e	add	fp, #20
1136c     A7 1E 02 AB |  if_e	rdlong	local01, fp
11370     14 4E 85 A1 |  if_e	sub	fp, #20
11374     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
11378     1C 00 90 5D |  if_ne	jmp	#LR__1374
1137c     A7 64 02 FB | 	rdlong	muldiva_, fp
11380     0C 4E 05 F1 | 	add	fp, #12
11384     A7 66 02 FB | 	rdlong	muldivb_, fp
11388     0C 4E 85 F1 | 	sub	fp, #12
1138c     BA 00 A0 FD | 	call	#divide_
11390     A7 64 62 FC | 	wrlong	muldiva_, fp
11394     50 00 90 FD | 	jmp	#LR__1376
11398                 | LR__1374
11398                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
11398     08 4E 05 F1 | 	add	fp, #8
1139c     A7 66 02 FB | 	rdlong	muldivb_, fp
113a0     08 4E 85 F1 | 	sub	fp, #8
113a4     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
113a8     14 4E 05 A1 |  if_e	add	fp, #20
113ac     A7 1E 02 AB |  if_e	rdlong	local01, fp
113b0     14 4E 85 A1 |  if_e	sub	fp, #20
113b4     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
113b8     1C 00 90 5D |  if_ne	jmp	#LR__1375
113bc     A7 64 02 FB | 	rdlong	muldiva_, fp
113c0     0C 4E 05 F1 | 	add	fp, #12
113c4     A7 66 02 FB | 	rdlong	muldivb_, fp
113c8     0C 4E 85 F1 | 	sub	fp, #12
113cc     BA 00 A0 FD | 	call	#divide_
113d0     A7 64 62 FC | 	wrlong	muldiva_, fp
113d4     10 00 90 FD | 	jmp	#LR__1376
113d8                 | LR__1375
113d8     A7 16 68 FC | 	wrlong	#11, fp
113dc     08 4E 05 F1 | 	add	fp, #8
113e0     A7 FE 69 FC | 	wrlong	#255, fp
113e4     08 4E 85 F1 | 	sub	fp, #8
113e8                 | LR__1376
113e8     A7 12 02 F6 | 	mov	arg01, fp
113ec     08 95 BF FD | 	call	#_push
113f0     A7 F0 03 F6 | 	mov	ptra, fp
113f4     B2 00 A0 FD | 	call	#popregs_
113f8                 | _do_mod_ret
113f8     2D 00 64 FD | 	ret
113fc                 | 
113fc                 | ' 
113fc                 | ' sub do_shl 
113fc                 | _do_shl
113fc     03 4A 05 F6 | 	mov	COUNT_, #3
11400     A8 00 A0 FD | 	call	#pushregs_
11404     18 F0 07 F1 | 	add	ptra, #24
11408     54 94 BF FD | 	call	#_pop
1140c     FD 12 02 F6 | 	mov	arg01, result1
11410     FE 1E 02 F6 | 	mov	local01, result2
11414     FF 20 02 F6 | 	mov	local02, result3
11418     0C 4E 05 F1 | 	add	fp, #12
1141c     A7 12 62 FC | 	wrlong	arg01, fp
11420     04 4E 05 F1 | 	add	fp, #4
11424     A7 1E 62 FC | 	wrlong	local01, fp
11428     04 4E 05 F1 | 	add	fp, #4
1142c     A7 20 62 FC | 	wrlong	local02, fp
11430     14 4E 85 F1 | 	sub	fp, #20
11434     28 94 BF FD | 	call	#_pop
11438     FF 22 02 F6 | 	mov	local03, result3
1143c     A7 FA 61 FC | 	wrlong	result1, fp
11440     04 4E 05 F1 | 	add	fp, #4
11444     A7 FC 61 FC | 	wrlong	result2, fp
11448     04 4E 05 F1 | 	add	fp, #4
1144c     A7 22 62 FC | 	wrlong	local03, fp
11450                 | ' 
11450                 | ' t2=pop()
11450                 | ' t1=pop()
11450                 | ' 
11450                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
11450     08 4E 85 F1 | 	sub	fp, #8
11454     1C 22 0E F2 | 	cmp	local03, #28 wz
11458     A7 22 02 AB |  if_e	rdlong	local03, fp
1145c     A7 22 62 AC |  if_e	wrlong	local03, fp
11460     08 4E 05 A1 |  if_e	add	fp, #8
11464     A7 3A 68 AC |  if_e	wrlong	#29, fp
11468     08 4E 85 A1 |  if_e	sub	fp, #8
1146c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1146c     14 4E 05 F1 | 	add	fp, #20
11470     A7 22 02 FB | 	rdlong	local03, fp
11474     14 4E 85 F1 | 	sub	fp, #20
11478     1C 22 0E F2 | 	cmp	local03, #28 wz
1147c     18 00 90 5D |  if_ne	jmp	#LR__1380
11480     0C 4E 05 F1 | 	add	fp, #12
11484     A7 22 02 FB | 	rdlong	local03, fp
11488     A7 22 62 FC | 	wrlong	local03, fp
1148c     08 4E 05 F1 | 	add	fp, #8
11490     A7 3A 68 FC | 	wrlong	#29, fp
11494     14 4E 85 F1 | 	sub	fp, #20
11498                 | LR__1380
11498                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
11498     08 4E 05 F1 | 	add	fp, #8
1149c     A7 22 02 FB | 	rdlong	local03, fp
114a0     08 4E 85 F1 | 	sub	fp, #8
114a4     1F 22 0E F2 | 	cmp	local03, #31 wz
114a8     14 4E 05 51 |  if_ne	add	fp, #20
114ac     A7 20 02 5B |  if_ne	rdlong	local02, fp
114b0     14 4E 85 51 |  if_ne	sub	fp, #20
114b4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
114b8     08 4E 05 51 |  if_ne	add	fp, #8
114bc     A7 22 02 5B |  if_ne	rdlong	local03, fp
114c0     08 4E 85 51 |  if_ne	sub	fp, #8
114c4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
114c8     14 4E 05 51 |  if_ne	add	fp, #20
114cc     14 4E 85 51 |  if_ne	sub	fp, #20
114d0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
114d4     A7 0C 68 AC |  if_e	wrlong	#6, fp
114d8     08 4E 05 A1 |  if_e	add	fp, #8
114dc     A7 FE 69 AC |  if_e	wrlong	#255, fp
114e0     08 4E 85 A1 |  if_e	sub	fp, #8
114e4     18 00 90 AD |  if_e	jmp	#LR__1381
114e8     A7 22 02 FB | 	rdlong	local03, fp
114ec     0C 4E 05 F1 | 	add	fp, #12
114f0     A7 1E 02 FB | 	rdlong	local01, fp
114f4     0C 4E 85 F1 | 	sub	fp, #12
114f8     0F 23 62 F0 | 	shl	local03, local01
114fc     A7 22 62 FC | 	wrlong	local03, fp
11500                 | LR__1381
11500     A7 12 02 F6 | 	mov	arg01, fp
11504     F0 93 BF FD | 	call	#_push
11508     A7 F0 03 F6 | 	mov	ptra, fp
1150c     B2 00 A0 FD | 	call	#popregs_
11510                 | _do_shl_ret
11510     2D 00 64 FD | 	ret
11514                 | 
11514                 | ' 
11514                 | ' sub do_shr 
11514                 | _do_shr
11514     03 4A 05 F6 | 	mov	COUNT_, #3
11518     A8 00 A0 FD | 	call	#pushregs_
1151c     18 F0 07 F1 | 	add	ptra, #24
11520     3C 93 BF FD | 	call	#_pop
11524     FD 12 02 F6 | 	mov	arg01, result1
11528     FE 1E 02 F6 | 	mov	local01, result2
1152c     FF 20 02 F6 | 	mov	local02, result3
11530     0C 4E 05 F1 | 	add	fp, #12
11534     A7 12 62 FC | 	wrlong	arg01, fp
11538     04 4E 05 F1 | 	add	fp, #4
1153c     A7 1E 62 FC | 	wrlong	local01, fp
11540     04 4E 05 F1 | 	add	fp, #4
11544     A7 20 62 FC | 	wrlong	local02, fp
11548     14 4E 85 F1 | 	sub	fp, #20
1154c     10 93 BF FD | 	call	#_pop
11550     FF 22 02 F6 | 	mov	local03, result3
11554     A7 FA 61 FC | 	wrlong	result1, fp
11558     04 4E 05 F1 | 	add	fp, #4
1155c     A7 FC 61 FC | 	wrlong	result2, fp
11560     04 4E 05 F1 | 	add	fp, #4
11564     A7 22 62 FC | 	wrlong	local03, fp
11568                 | ' t2=pop()
11568                 | ' t1=pop()
11568                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
11568     08 4E 85 F1 | 	sub	fp, #8
1156c     1C 22 0E F2 | 	cmp	local03, #28 wz
11570     A7 22 02 AB |  if_e	rdlong	local03, fp
11574     A7 22 62 AC |  if_e	wrlong	local03, fp
11578     08 4E 05 A1 |  if_e	add	fp, #8
1157c     A7 3A 68 AC |  if_e	wrlong	#29, fp
11580     08 4E 85 A1 |  if_e	sub	fp, #8
11584                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
11584     14 4E 05 F1 | 	add	fp, #20
11588     A7 22 02 FB | 	rdlong	local03, fp
1158c     14 4E 85 F1 | 	sub	fp, #20
11590     1C 22 0E F2 | 	cmp	local03, #28 wz
11594     18 00 90 5D |  if_ne	jmp	#LR__1390
11598     0C 4E 05 F1 | 	add	fp, #12
1159c     A7 22 02 FB | 	rdlong	local03, fp
115a0     A7 22 62 FC | 	wrlong	local03, fp
115a4     08 4E 05 F1 | 	add	fp, #8
115a8     A7 3A 68 FC | 	wrlong	#29, fp
115ac     14 4E 85 F1 | 	sub	fp, #20
115b0                 | LR__1390
115b0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
115b0     08 4E 05 F1 | 	add	fp, #8
115b4     A7 22 02 FB | 	rdlong	local03, fp
115b8     08 4E 85 F1 | 	sub	fp, #8
115bc     1F 22 0E F2 | 	cmp	local03, #31 wz
115c0     14 4E 05 51 |  if_ne	add	fp, #20
115c4     A7 20 02 5B |  if_ne	rdlong	local02, fp
115c8     14 4E 85 51 |  if_ne	sub	fp, #20
115cc     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
115d0     08 4E 05 51 |  if_ne	add	fp, #8
115d4     A7 22 02 5B |  if_ne	rdlong	local03, fp
115d8     08 4E 85 51 |  if_ne	sub	fp, #8
115dc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
115e0     14 4E 05 51 |  if_ne	add	fp, #20
115e4     14 4E 85 51 |  if_ne	sub	fp, #20
115e8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
115ec     A7 0C 68 AC |  if_e	wrlong	#6, fp
115f0     08 4E 05 A1 |  if_e	add	fp, #8
115f4     A7 FE 69 AC |  if_e	wrlong	#255, fp
115f8     08 4E 85 A1 |  if_e	sub	fp, #8
115fc     18 00 90 AD |  if_e	jmp	#LR__1391
11600     A7 22 02 FB | 	rdlong	local03, fp
11604     0C 4E 05 F1 | 	add	fp, #12
11608     A7 1E 02 FB | 	rdlong	local01, fp
1160c     0C 4E 85 F1 | 	sub	fp, #12
11610     0F 23 42 F0 | 	shr	local03, local01
11614     A7 22 62 FC | 	wrlong	local03, fp
11618                 | LR__1391
11618     A7 12 02 F6 | 	mov	arg01, fp
1161c     D8 92 BF FD | 	call	#_push
11620     A7 F0 03 F6 | 	mov	ptra, fp
11624     B2 00 A0 FD | 	call	#popregs_
11628                 | _do_shr_ret
11628     2D 00 64 FD | 	ret
1162c                 | 
1162c                 | ' 
1162c                 | ' sub do_power 
1162c                 | _do_power
1162c     02 4A 05 F6 | 	mov	COUNT_, #2
11630     A8 00 A0 FD | 	call	#pushregs_
11634     18 F0 07 F1 | 	add	ptra, #24
11638     24 92 BF FD | 	call	#_pop
1163c     FD 14 02 F6 | 	mov	arg02, result1
11640     FE 12 02 F6 | 	mov	arg01, result2
11644     FF 1E 02 F6 | 	mov	local01, result3
11648     0C 4E 05 F1 | 	add	fp, #12
1164c     A7 14 62 FC | 	wrlong	arg02, fp
11650     04 4E 05 F1 | 	add	fp, #4
11654     A7 12 62 FC | 	wrlong	arg01, fp
11658     04 4E 05 F1 | 	add	fp, #4
1165c     A7 1E 62 FC | 	wrlong	local01, fp
11660     14 4E 85 F1 | 	sub	fp, #20
11664     F8 91 BF FD | 	call	#_pop
11668     A7 FA 61 FC | 	wrlong	result1, fp
1166c     04 4E 05 F1 | 	add	fp, #4
11670     A7 FC 61 FC | 	wrlong	result2, fp
11674     04 4E 05 F1 | 	add	fp, #4
11678     A7 FE 61 FC | 	wrlong	result3, fp
1167c                 | ' t2=pop()
1167c                 | ' t1=pop()
1167c                 | ' 
1167c                 | ' 
1167c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1167c     08 4E 85 F1 | 	sub	fp, #8
11680     1F FE 0D F2 | 	cmp	result3, #31 wz
11684     14 4E 05 51 |  if_ne	add	fp, #20
11688     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1168c     14 4E 85 51 |  if_ne	sub	fp, #20
11690     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
11694     A7 18 68 AC |  if_e	wrlong	#12, fp
11698     08 4E 05 A1 |  if_e	add	fp, #8
1169c     A7 FE 69 AC |  if_e	wrlong	#255, fp
116a0     08 4E 85 A1 |  if_e	sub	fp, #8
116a4     38 01 90 AD |  if_e	jmp	#LR__1405
116a8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
116a8     08 4E 05 F1 | 	add	fp, #8
116ac     A7 14 02 FB | 	rdlong	arg02, fp
116b0     08 4E 85 F1 | 	sub	fp, #8
116b4     1C 14 0E F2 | 	cmp	arg02, #28 wz
116b8     28 00 90 5D |  if_ne	jmp	#LR__1400
116bc     08 4E 05 F1 | 	add	fp, #8
116c0     A7 3C 68 FC | 	wrlong	#30, fp
116c4     08 4E 85 F1 | 	sub	fp, #8
116c8     A7 12 02 FB | 	rdlong	arg01, fp
116cc     09 13 52 F6 | 	abs	arg01, arg01 wc
116d0     1F 20 C6 C9 |  if_b	decod	local02, #31
116d4     00 20 06 36 |  if_ae	mov	local02, #0
116d8     D8 FB B0 FD | 	call	#__system___float_fromuns
116dc     10 FB 61 F5 | 	xor	result1, local02
116e0     A7 FA 61 FC | 	wrlong	result1, fp
116e4                 | LR__1400
116e4                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
116e4     08 4E 05 F1 | 	add	fp, #8
116e8     A7 14 02 FB | 	rdlong	arg02, fp
116ec     08 4E 85 F1 | 	sub	fp, #8
116f0     1D 14 0E F2 | 	cmp	arg02, #29 wz
116f4     18 00 90 5D |  if_ne	jmp	#LR__1401
116f8     08 4E 05 F1 | 	add	fp, #8
116fc     A7 3C 68 FC | 	wrlong	#30, fp
11700     08 4E 85 F1 | 	sub	fp, #8
11704     A7 12 02 FB | 	rdlong	arg01, fp
11708     A8 FB B0 FD | 	call	#__system___float_fromuns
1170c     A7 FA 61 FC | 	wrlong	result1, fp
11710                 | LR__1401
11710                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
11710     14 4E 05 F1 | 	add	fp, #20
11714     A7 14 02 FB | 	rdlong	arg02, fp
11718     14 4E 85 F1 | 	sub	fp, #20
1171c     1C 14 0E F2 | 	cmp	arg02, #28 wz
11720     34 00 90 5D |  if_ne	jmp	#LR__1402
11724     14 4E 05 F1 | 	add	fp, #20
11728     A7 3C 68 FC | 	wrlong	#30, fp
1172c     08 4E 85 F1 | 	sub	fp, #8
11730     A7 12 02 FB | 	rdlong	arg01, fp
11734     0C 4E 85 F1 | 	sub	fp, #12
11738     09 13 52 F6 | 	abs	arg01, arg01 wc
1173c     1F 20 C6 C9 |  if_b	decod	local02, #31
11740     00 20 06 36 |  if_ae	mov	local02, #0
11744     6C FB B0 FD | 	call	#__system___float_fromuns
11748     10 FB 61 F5 | 	xor	result1, local02
1174c     0C 4E 05 F1 | 	add	fp, #12
11750     A7 FA 61 FC | 	wrlong	result1, fp
11754     0C 4E 85 F1 | 	sub	fp, #12
11758                 | LR__1402
11758                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
11758     14 4E 05 F1 | 	add	fp, #20
1175c     A7 14 02 FB | 	rdlong	arg02, fp
11760     14 4E 85 F1 | 	sub	fp, #20
11764     1D 14 0E F2 | 	cmp	arg02, #29 wz
11768     24 00 90 5D |  if_ne	jmp	#LR__1403
1176c     14 4E 05 F1 | 	add	fp, #20
11770     A7 3C 68 FC | 	wrlong	#30, fp
11774     08 4E 85 F1 | 	sub	fp, #8
11778     A7 12 02 FB | 	rdlong	arg01, fp
1177c     0C 4E 85 F1 | 	sub	fp, #12
11780     30 FB B0 FD | 	call	#__system___float_fromuns
11784     0C 4E 05 F1 | 	add	fp, #12
11788     A7 FA 61 FC | 	wrlong	result1, fp
1178c     0C 4E 85 F1 | 	sub	fp, #12
11790                 | LR__1403
11790                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
11790     08 4E 05 F1 | 	add	fp, #8
11794     A7 14 02 FB | 	rdlong	arg02, fp
11798     08 4E 85 F1 | 	sub	fp, #8
1179c     1E 14 0E F2 | 	cmp	arg02, #30 wz
117a0     14 4E 05 A1 |  if_e	add	fp, #20
117a4     A7 1E 02 AB |  if_e	rdlong	local01, fp
117a8     14 4E 85 A1 |  if_e	sub	fp, #20
117ac     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
117b0     1C 00 90 5D |  if_ne	jmp	#LR__1404
117b4     A7 12 02 FB | 	rdlong	arg01, fp
117b8     0C 4E 05 F1 | 	add	fp, #12
117bc     A7 14 02 FB | 	rdlong	arg02, fp
117c0     0C 4E 85 F1 | 	sub	fp, #12
117c4     D4 0D B1 FD | 	call	#__system____builtin_powf
117c8     A7 FA 61 FC | 	wrlong	result1, fp
117cc     10 00 90 FD | 	jmp	#LR__1405
117d0                 | LR__1404
117d0     A7 1A 68 FC | 	wrlong	#13, fp
117d4     08 4E 05 F1 | 	add	fp, #8
117d8     A7 FE 69 FC | 	wrlong	#255, fp
117dc     08 4E 85 F1 | 	sub	fp, #8
117e0                 | LR__1405
117e0     A7 12 02 F6 | 	mov	arg01, fp
117e4     10 91 BF FD | 	call	#_push
117e8     A7 F0 03 F6 | 	mov	ptra, fp
117ec     B2 00 A0 FD | 	call	#popregs_
117f0                 | _do_power_ret
117f0     2D 00 64 FD | 	ret
117f4                 | 
117f4                 | ' 
117f4                 | ' 
117f4                 | ' sub do_eq
117f4                 | _do_eq
117f4     05 4A 05 F6 | 	mov	COUNT_, #5
117f8     A8 00 A0 FD | 	call	#pushregs_
117fc     18 F0 07 F1 | 	add	ptra, #24
11800     5C 90 BF FD | 	call	#_pop
11804     FD 1E 02 F6 | 	mov	local01, result1
11808     FE 20 02 F6 | 	mov	local02, result2
1180c     FF 22 02 F6 | 	mov	local03, result3
11810     0C 4E 05 F1 | 	add	fp, #12
11814     A7 1E 62 FC | 	wrlong	local01, fp
11818     04 4E 05 F1 | 	add	fp, #4
1181c     A7 20 62 FC | 	wrlong	local02, fp
11820     04 4E 05 F1 | 	add	fp, #4
11824     A7 22 62 FC | 	wrlong	local03, fp
11828     14 4E 85 F1 | 	sub	fp, #20
1182c     30 90 BF FD | 	call	#_pop
11830     FF 22 02 F6 | 	mov	local03, result3
11834     A7 FA 61 FC | 	wrlong	result1, fp
11838     04 4E 05 F1 | 	add	fp, #4
1183c     A7 FC 61 FC | 	wrlong	result2, fp
11840     04 4E 05 F1 | 	add	fp, #4
11844     A7 22 62 FC | 	wrlong	local03, fp
11848                 | ' t2=pop()
11848                 | ' t1=pop()
11848                 | ' 
11848                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
11848     08 4E 85 F1 | 	sub	fp, #8
1184c     1F 22 0E F2 | 	cmp	local03, #31 wz
11850     14 4E 05 A1 |  if_e	add	fp, #20
11854     A7 24 02 AB |  if_e	rdlong	local04, fp
11858     14 4E 85 A1 |  if_e	sub	fp, #20
1185c     12 23 02 A6 |  if_e	mov	local03, local04
11860     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11864     28 00 90 5D |  if_ne	jmp	#LR__1410
11868     00 1E 06 F6 | 	mov	local01, #0
1186c     A7 12 02 FB | 	rdlong	arg01, fp
11870     0C 4E 05 F1 | 	add	fp, #12
11874     A7 14 02 FB | 	rdlong	arg02, fp
11878     0C 4E 85 F1 | 	sub	fp, #12
1187c     E0 D2 B0 FD | 	call	#__system___string_cmp
11880     00 FA 0D F2 | 	cmp	result1, #0 wz
11884     00 1E 26 A6 |  if_e	not	local01, #0
11888     A7 1E 62 FC | 	wrlong	local01, fp
1188c     1C 04 90 FD | 	jmp	#LR__1423
11890                 | LR__1410
11890                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
11890     08 4E 05 F1 | 	add	fp, #8
11894     A7 1E 02 FB | 	rdlong	local01, fp
11898     08 4E 85 F1 | 	sub	fp, #8
1189c     1E 1E 0E F2 | 	cmp	local01, #30 wz
118a0     14 4E 05 A1 |  if_e	add	fp, #20
118a4     A7 24 02 AB |  if_e	rdlong	local04, fp
118a8     14 4E 85 A1 |  if_e	sub	fp, #20
118ac     12 23 02 A6 |  if_e	mov	local03, local04
118b0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
118b4     2C 00 90 5D |  if_ne	jmp	#LR__1411
118b8     00 1E 06 F6 | 	mov	local01, #0
118bc     A7 12 02 FB | 	rdlong	arg01, fp
118c0     0C 4E 05 F1 | 	add	fp, #12
118c4     A7 14 02 FB | 	rdlong	arg02, fp
118c8     0C 4E 85 F1 | 	sub	fp, #12
118cc     01 16 06 F6 | 	mov	arg03, #1
118d0     18 02 B1 FD | 	call	#__system___float_cmp
118d4     00 FA 0D F2 | 	cmp	result1, #0 wz
118d8     00 1E 26 A6 |  if_e	not	local01, #0
118dc     A7 1E 62 FC | 	wrlong	local01, fp
118e0     C8 03 90 FD | 	jmp	#LR__1423
118e4                 | LR__1411
118e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
118e4     08 4E 05 F1 | 	add	fp, #8
118e8     A7 1E 02 FB | 	rdlong	local01, fp
118ec     08 4E 85 F1 | 	sub	fp, #8
118f0     1E 1E 0E F2 | 	cmp	local01, #30 wz
118f4     14 4E 05 A1 |  if_e	add	fp, #20
118f8     A7 24 02 AB |  if_e	rdlong	local04, fp
118fc     14 4E 85 A1 |  if_e	sub	fp, #20
11900     12 23 02 A6 |  if_e	mov	local03, local04
11904     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11908     48 00 90 5D |  if_ne	jmp	#LR__1412
1190c     00 1E 06 F6 | 	mov	local01, #0
11910     A7 20 02 FB | 	rdlong	local02, fp
11914     0C 4E 05 F1 | 	add	fp, #12
11918     A7 12 02 FB | 	rdlong	arg01, fp
1191c     0C 4E 85 F1 | 	sub	fp, #12
11920     09 13 52 F6 | 	abs	arg01, arg01 wc
11924     1F 26 C6 C9 |  if_b	decod	local05, #31
11928     00 26 06 36 |  if_ae	mov	local05, #0
1192c     84 F9 B0 FD | 	call	#__system___float_fromuns
11930     13 FB 61 F5 | 	xor	result1, local05
11934     FD 14 02 F6 | 	mov	arg02, result1
11938     10 13 02 F6 | 	mov	arg01, local02
1193c     01 16 06 F6 | 	mov	arg03, #1
11940     A8 01 B1 FD | 	call	#__system___float_cmp
11944     00 FA 0D F2 | 	cmp	result1, #0 wz
11948     00 1E 26 A6 |  if_e	not	local01, #0
1194c     A7 1E 62 FC | 	wrlong	local01, fp
11950     58 03 90 FD | 	jmp	#LR__1423
11954                 | LR__1412
11954                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
11954     08 4E 05 F1 | 	add	fp, #8
11958     A7 1E 02 FB | 	rdlong	local01, fp
1195c     08 4E 85 F1 | 	sub	fp, #8
11960     1E 1E 0E F2 | 	cmp	local01, #30 wz
11964     14 4E 05 A1 |  if_e	add	fp, #20
11968     A7 24 02 AB |  if_e	rdlong	local04, fp
1196c     14 4E 85 A1 |  if_e	sub	fp, #20
11970     12 23 02 A6 |  if_e	mov	local03, local04
11974     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11978     38 00 90 5D |  if_ne	jmp	#LR__1413
1197c     00 1E 06 F6 | 	mov	local01, #0
11980     A7 20 02 FB | 	rdlong	local02, fp
11984     0C 4E 05 F1 | 	add	fp, #12
11988     A7 12 02 FB | 	rdlong	arg01, fp
1198c     0C 4E 85 F1 | 	sub	fp, #12
11990     20 F9 B0 FD | 	call	#__system___float_fromuns
11994     FD 14 02 F6 | 	mov	arg02, result1
11998     10 13 02 F6 | 	mov	arg01, local02
1199c     01 16 06 F6 | 	mov	arg03, #1
119a0     48 01 B1 FD | 	call	#__system___float_cmp
119a4     00 FA 0D F2 | 	cmp	result1, #0 wz
119a8     00 1E 26 A6 |  if_e	not	local01, #0
119ac     A7 1E 62 FC | 	wrlong	local01, fp
119b0     F8 02 90 FD | 	jmp	#LR__1423
119b4                 | LR__1413
119b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
119b4     08 4E 05 F1 | 	add	fp, #8
119b8     A7 1E 02 FB | 	rdlong	local01, fp
119bc     08 4E 85 F1 | 	sub	fp, #8
119c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
119c4     14 4E 05 A1 |  if_e	add	fp, #20
119c8     A7 24 02 AB |  if_e	rdlong	local04, fp
119cc     14 4E 85 A1 |  if_e	sub	fp, #20
119d0     12 23 02 A6 |  if_e	mov	local03, local04
119d4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
119d8     44 00 90 5D |  if_ne	jmp	#LR__1414
119dc     00 1E 06 F6 | 	mov	local01, #0
119e0     A7 12 02 FB | 	rdlong	arg01, fp
119e4     09 13 52 F6 | 	abs	arg01, arg01 wc
119e8     1F 26 C6 C9 |  if_b	decod	local05, #31
119ec     00 26 06 36 |  if_ae	mov	local05, #0
119f0     C0 F8 B0 FD | 	call	#__system___float_fromuns
119f4     13 FB 61 F5 | 	xor	result1, local05
119f8     FD 12 02 F6 | 	mov	arg01, result1
119fc     0C 4E 05 F1 | 	add	fp, #12
11a00     A7 14 02 FB | 	rdlong	arg02, fp
11a04     0C 4E 85 F1 | 	sub	fp, #12
11a08     01 16 06 F6 | 	mov	arg03, #1
11a0c     DC 00 B1 FD | 	call	#__system___float_cmp
11a10     00 FA 0D F2 | 	cmp	result1, #0 wz
11a14     00 1E 26 A6 |  if_e	not	local01, #0
11a18     A7 1E 62 FC | 	wrlong	local01, fp
11a1c     8C 02 90 FD | 	jmp	#LR__1423
11a20                 | LR__1414
11a20                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
11a20     08 4E 05 F1 | 	add	fp, #8
11a24     A7 1E 02 FB | 	rdlong	local01, fp
11a28     08 4E 85 F1 | 	sub	fp, #8
11a2c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11a30     14 4E 05 A1 |  if_e	add	fp, #20
11a34     A7 24 02 AB |  if_e	rdlong	local04, fp
11a38     14 4E 85 A1 |  if_e	sub	fp, #20
11a3c     12 23 02 A6 |  if_e	mov	local03, local04
11a40     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11a44     24 00 90 5D |  if_ne	jmp	#LR__1415
11a48     00 1E 06 F6 | 	mov	local01, #0
11a4c     A7 20 02 FB | 	rdlong	local02, fp
11a50     0C 4E 05 F1 | 	add	fp, #12
11a54     A7 22 02 FB | 	rdlong	local03, fp
11a58     0C 4E 85 F1 | 	sub	fp, #12
11a5c     11 21 0A F2 | 	cmp	local02, local03 wz
11a60     01 1E 66 A6 |  if_e	neg	local01, #1
11a64     A7 1E 62 FC | 	wrlong	local01, fp
11a68     40 02 90 FD | 	jmp	#LR__1423
11a6c                 | LR__1415
11a6c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
11a6c     08 4E 05 F1 | 	add	fp, #8
11a70     A7 1E 02 FB | 	rdlong	local01, fp
11a74     08 4E 85 F1 | 	sub	fp, #8
11a78     1C 1E 0E F2 | 	cmp	local01, #28 wz
11a7c     14 4E 05 A1 |  if_e	add	fp, #20
11a80     A7 24 02 AB |  if_e	rdlong	local04, fp
11a84     14 4E 85 A1 |  if_e	sub	fp, #20
11a88     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11a8c     24 00 90 5D |  if_ne	jmp	#LR__1416
11a90     00 1E 06 F6 | 	mov	local01, #0
11a94     A7 20 02 FB | 	rdlong	local02, fp
11a98     0C 4E 05 F1 | 	add	fp, #12
11a9c     A7 22 02 FB | 	rdlong	local03, fp
11aa0     0C 4E 85 F1 | 	sub	fp, #12
11aa4     11 21 0A F2 | 	cmp	local02, local03 wz
11aa8     01 1E 66 A6 |  if_e	neg	local01, #1
11aac     A7 1E 62 FC | 	wrlong	local01, fp
11ab0     F8 01 90 FD | 	jmp	#LR__1423
11ab4                 | LR__1416
11ab4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
11ab4     08 4E 05 F1 | 	add	fp, #8
11ab8     A7 1E 02 FB | 	rdlong	local01, fp
11abc     08 4E 85 F1 | 	sub	fp, #8
11ac0     1D 1E 0E F2 | 	cmp	local01, #29 wz
11ac4     14 4E 05 A1 |  if_e	add	fp, #20
11ac8     A7 22 02 AB |  if_e	rdlong	local03, fp
11acc     14 4E 85 A1 |  if_e	sub	fp, #20
11ad0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11ad4     34 00 90 5D |  if_ne	jmp	#LR__1417
11ad8     00 1E 06 F6 | 	mov	local01, #0
11adc     A7 12 02 FB | 	rdlong	arg01, fp
11ae0     D0 F7 B0 FD | 	call	#__system___float_fromuns
11ae4     FD 12 02 F6 | 	mov	arg01, result1
11ae8     0C 4E 05 F1 | 	add	fp, #12
11aec     A7 14 02 FB | 	rdlong	arg02, fp
11af0     0C 4E 85 F1 | 	sub	fp, #12
11af4     01 16 06 F6 | 	mov	arg03, #1
11af8     F0 FF B0 FD | 	call	#__system___float_cmp
11afc     00 FA 0D F2 | 	cmp	result1, #0 wz
11b00     00 1E 26 A6 |  if_e	not	local01, #0
11b04     A7 1E 62 FC | 	wrlong	local01, fp
11b08     A0 01 90 FD | 	jmp	#LR__1423
11b0c                 | LR__1417
11b0c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
11b0c     08 4E 05 F1 | 	add	fp, #8
11b10     A7 1E 02 FB | 	rdlong	local01, fp
11b14     08 4E 85 F1 | 	sub	fp, #8
11b18     1D 1E 0E F2 | 	cmp	local01, #29 wz
11b1c     14 4E 05 A1 |  if_e	add	fp, #20
11b20     A7 22 02 AB |  if_e	rdlong	local03, fp
11b24     14 4E 85 A1 |  if_e	sub	fp, #20
11b28     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11b2c     24 00 90 5D |  if_ne	jmp	#LR__1418
11b30     00 1E 06 F6 | 	mov	local01, #0
11b34     A7 20 02 FB | 	rdlong	local02, fp
11b38     0C 4E 05 F1 | 	add	fp, #12
11b3c     A7 22 02 FB | 	rdlong	local03, fp
11b40     0C 4E 85 F1 | 	sub	fp, #12
11b44     11 21 0A F2 | 	cmp	local02, local03 wz
11b48     01 1E 66 A6 |  if_e	neg	local01, #1
11b4c     A7 1E 62 FC | 	wrlong	local01, fp
11b50     58 01 90 FD | 	jmp	#LR__1423
11b54                 | LR__1418
11b54                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
11b54     08 4E 05 F1 | 	add	fp, #8
11b58     A7 1E 02 FB | 	rdlong	local01, fp
11b5c     08 4E 85 F1 | 	sub	fp, #8
11b60     1D 1E 0E F2 | 	cmp	local01, #29 wz
11b64     14 4E 05 A1 |  if_e	add	fp, #20
11b68     A7 22 02 AB |  if_e	rdlong	local03, fp
11b6c     14 4E 85 A1 |  if_e	sub	fp, #20
11b70     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11b74     24 00 90 5D |  if_ne	jmp	#LR__1419
11b78     00 1E 06 F6 | 	mov	local01, #0
11b7c     A7 20 02 FB | 	rdlong	local02, fp
11b80     0C 4E 05 F1 | 	add	fp, #12
11b84     A7 22 02 FB | 	rdlong	local03, fp
11b88     0C 4E 85 F1 | 	sub	fp, #12
11b8c     11 21 0A F2 | 	cmp	local02, local03 wz
11b90     01 1E 66 A6 |  if_e	neg	local01, #1
11b94     A7 1E 62 FC | 	wrlong	local01, fp
11b98     10 01 90 FD | 	jmp	#LR__1423
11b9c                 | LR__1419
11b9c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
11b9c     08 4E 05 F1 | 	add	fp, #8
11ba0     A7 1E 02 FB | 	rdlong	local01, fp
11ba4     08 4E 85 F1 | 	sub	fp, #8
11ba8     2B 1E 0E F2 | 	cmp	local01, #43 wz
11bac     14 4E 05 A1 |  if_e	add	fp, #20
11bb0     A7 22 02 AB |  if_e	rdlong	local03, fp
11bb4     14 4E 85 A1 |  if_e	sub	fp, #20
11bb8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11bbc     30 00 90 5D |  if_ne	jmp	#LR__1420
11bc0     00 1E 06 F6 | 	mov	local01, #0
11bc4     A7 12 02 FB | 	rdlong	arg01, fp
11bc8     04 D1 BF FD | 	call	#_convertstring
11bcc     FD 12 02 F6 | 	mov	arg01, result1
11bd0     0C 4E 05 F1 | 	add	fp, #12
11bd4     A7 14 02 FB | 	rdlong	arg02, fp
11bd8     0C 4E 85 F1 | 	sub	fp, #12
11bdc     80 CF B0 FD | 	call	#__system___string_cmp
11be0     00 FA 0D F2 | 	cmp	result1, #0 wz
11be4     00 1E 26 A6 |  if_e	not	local01, #0
11be8     A7 1E 62 FC | 	wrlong	local01, fp
11bec     BC 00 90 FD | 	jmp	#LR__1423
11bf0                 | LR__1420
11bf0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
11bf0     08 4E 05 F1 | 	add	fp, #8
11bf4     A7 1E 02 FB | 	rdlong	local01, fp
11bf8     08 4E 85 F1 | 	sub	fp, #8
11bfc     1F 1E 0E F2 | 	cmp	local01, #31 wz
11c00     14 4E 05 A1 |  if_e	add	fp, #20
11c04     A7 22 02 AB |  if_e	rdlong	local03, fp
11c08     14 4E 85 A1 |  if_e	sub	fp, #20
11c0c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11c10     34 00 90 5D |  if_ne	jmp	#LR__1421
11c14     00 1E 06 F6 | 	mov	local01, #0
11c18     A7 20 02 FB | 	rdlong	local02, fp
11c1c     0C 4E 05 F1 | 	add	fp, #12
11c20     A7 12 02 FB | 	rdlong	arg01, fp
11c24     0C 4E 85 F1 | 	sub	fp, #12
11c28     A4 D0 BF FD | 	call	#_convertstring
11c2c     FD 14 02 F6 | 	mov	arg02, result1
11c30     10 13 02 F6 | 	mov	arg01, local02
11c34     28 CF B0 FD | 	call	#__system___string_cmp
11c38     00 FA 0D F2 | 	cmp	result1, #0 wz
11c3c     00 1E 26 A6 |  if_e	not	local01, #0
11c40     A7 1E 62 FC | 	wrlong	local01, fp
11c44     64 00 90 FD | 	jmp	#LR__1423
11c48                 | LR__1421
11c48                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
11c48     08 4E 05 F1 | 	add	fp, #8
11c4c     A7 1E 02 FB | 	rdlong	local01, fp
11c50     08 4E 85 F1 | 	sub	fp, #8
11c54     2B 1E 0E F2 | 	cmp	local01, #43 wz
11c58     14 4E 05 A1 |  if_e	add	fp, #20
11c5c     A7 22 02 AB |  if_e	rdlong	local03, fp
11c60     14 4E 85 A1 |  if_e	sub	fp, #20
11c64     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11c68     3C 00 90 5D |  if_ne	jmp	#LR__1422
11c6c     00 1E 06 F6 | 	mov	local01, #0
11c70     A7 12 02 FB | 	rdlong	arg01, fp
11c74     58 D0 BF FD | 	call	#_convertstring
11c78     FD 20 02 F6 | 	mov	local02, result1
11c7c     0C 4E 05 F1 | 	add	fp, #12
11c80     A7 12 02 FB | 	rdlong	arg01, fp
11c84     0C 4E 85 F1 | 	sub	fp, #12
11c88     44 D0 BF FD | 	call	#_convertstring
11c8c     FD 14 02 F6 | 	mov	arg02, result1
11c90     10 13 02 F6 | 	mov	arg01, local02
11c94     C8 CE B0 FD | 	call	#__system___string_cmp
11c98     00 FA 0D F2 | 	cmp	result1, #0 wz
11c9c     00 1E 26 A6 |  if_e	not	local01, #0
11ca0     A7 1E 62 FC | 	wrlong	local01, fp
11ca4     04 00 90 FD | 	jmp	#LR__1423
11ca8                 | LR__1422
11ca8     A7 00 68 FC | 	wrlong	#0, fp
11cac                 | LR__1423
11cac     08 4E 05 F1 | 	add	fp, #8
11cb0     A7 38 68 FC | 	wrlong	#28, fp
11cb4     08 4E 85 F1 | 	sub	fp, #8
11cb8     A7 12 02 F6 | 	mov	arg01, fp
11cbc     38 8C BF FD | 	call	#_push
11cc0     A7 F0 03 F6 | 	mov	ptra, fp
11cc4     B2 00 A0 FD | 	call	#popregs_
11cc8                 | _do_eq_ret
11cc8     2D 00 64 FD | 	ret
11ccc                 | 
11ccc                 | ' 
11ccc                 | ' sub do_gt
11ccc                 | _do_gt
11ccc     05 4A 05 F6 | 	mov	COUNT_, #5
11cd0     A8 00 A0 FD | 	call	#pushregs_
11cd4     18 F0 07 F1 | 	add	ptra, #24
11cd8     84 8B BF FD | 	call	#_pop
11cdc     FD 1E 02 F6 | 	mov	local01, result1
11ce0     FE 20 02 F6 | 	mov	local02, result2
11ce4     FF 22 02 F6 | 	mov	local03, result3
11ce8     0C 4E 05 F1 | 	add	fp, #12
11cec     A7 1E 62 FC | 	wrlong	local01, fp
11cf0     04 4E 05 F1 | 	add	fp, #4
11cf4     A7 20 62 FC | 	wrlong	local02, fp
11cf8     04 4E 05 F1 | 	add	fp, #4
11cfc     A7 22 62 FC | 	wrlong	local03, fp
11d00     14 4E 85 F1 | 	sub	fp, #20
11d04     58 8B BF FD | 	call	#_pop
11d08     FF 22 02 F6 | 	mov	local03, result3
11d0c     A7 FA 61 FC | 	wrlong	result1, fp
11d10     04 4E 05 F1 | 	add	fp, #4
11d14     A7 FC 61 FC | 	wrlong	result2, fp
11d18     04 4E 05 F1 | 	add	fp, #4
11d1c     A7 22 62 FC | 	wrlong	local03, fp
11d20                 | ' t2=pop()
11d20                 | ' t1=pop()
11d20                 | ' 
11d20                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
11d20     08 4E 85 F1 | 	sub	fp, #8
11d24     1F 22 0E F2 | 	cmp	local03, #31 wz
11d28     14 4E 05 A1 |  if_e	add	fp, #20
11d2c     A7 24 02 AB |  if_e	rdlong	local04, fp
11d30     14 4E 85 A1 |  if_e	sub	fp, #20
11d34     12 23 02 A6 |  if_e	mov	local03, local04
11d38     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11d3c     28 00 90 5D |  if_ne	jmp	#LR__1430
11d40     00 1E 06 F6 | 	mov	local01, #0
11d44     A7 12 02 FB | 	rdlong	arg01, fp
11d48     0C 4E 05 F1 | 	add	fp, #12
11d4c     A7 14 02 FB | 	rdlong	arg02, fp
11d50     0C 4E 85 F1 | 	sub	fp, #12
11d54     08 CE B0 FD | 	call	#__system___string_cmp
11d58     01 FA 55 F2 | 	cmps	result1, #1 wc
11d5c     00 1E 26 36 |  if_ae	not	local01, #0
11d60     A7 1E 62 FC | 	wrlong	local01, fp
11d64     1C 04 90 FD | 	jmp	#LR__1443
11d68                 | LR__1430
11d68                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
11d68     08 4E 05 F1 | 	add	fp, #8
11d6c     A7 1E 02 FB | 	rdlong	local01, fp
11d70     08 4E 85 F1 | 	sub	fp, #8
11d74     1E 1E 0E F2 | 	cmp	local01, #30 wz
11d78     14 4E 05 A1 |  if_e	add	fp, #20
11d7c     A7 24 02 AB |  if_e	rdlong	local04, fp
11d80     14 4E 85 A1 |  if_e	sub	fp, #20
11d84     12 23 02 A6 |  if_e	mov	local03, local04
11d88     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11d8c     2C 00 90 5D |  if_ne	jmp	#LR__1431
11d90     00 1E 06 F6 | 	mov	local01, #0
11d94     A7 12 02 FB | 	rdlong	arg01, fp
11d98     0C 4E 05 F1 | 	add	fp, #12
11d9c     A7 14 02 FB | 	rdlong	arg02, fp
11da0     0C 4E 85 F1 | 	sub	fp, #12
11da4     01 16 66 F6 | 	neg	arg03, #1
11da8     40 FD B0 FD | 	call	#__system___float_cmp
11dac     01 FA 55 F2 | 	cmps	result1, #1 wc
11db0     00 1E 26 36 |  if_ae	not	local01, #0
11db4     A7 1E 62 FC | 	wrlong	local01, fp
11db8     C8 03 90 FD | 	jmp	#LR__1443
11dbc                 | LR__1431
11dbc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
11dbc     08 4E 05 F1 | 	add	fp, #8
11dc0     A7 1E 02 FB | 	rdlong	local01, fp
11dc4     08 4E 85 F1 | 	sub	fp, #8
11dc8     1E 1E 0E F2 | 	cmp	local01, #30 wz
11dcc     14 4E 05 A1 |  if_e	add	fp, #20
11dd0     A7 24 02 AB |  if_e	rdlong	local04, fp
11dd4     14 4E 85 A1 |  if_e	sub	fp, #20
11dd8     12 23 02 A6 |  if_e	mov	local03, local04
11ddc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11de0     48 00 90 5D |  if_ne	jmp	#LR__1432
11de4     00 1E 06 F6 | 	mov	local01, #0
11de8     A7 20 02 FB | 	rdlong	local02, fp
11dec     0C 4E 05 F1 | 	add	fp, #12
11df0     A7 12 02 FB | 	rdlong	arg01, fp
11df4     0C 4E 85 F1 | 	sub	fp, #12
11df8     09 13 52 F6 | 	abs	arg01, arg01 wc
11dfc     1F 26 C6 C9 |  if_b	decod	local05, #31
11e00     00 26 06 36 |  if_ae	mov	local05, #0
11e04     AC F4 B0 FD | 	call	#__system___float_fromuns
11e08     13 FB 61 F5 | 	xor	result1, local05
11e0c     FD 14 02 F6 | 	mov	arg02, result1
11e10     10 13 02 F6 | 	mov	arg01, local02
11e14     01 16 66 F6 | 	neg	arg03, #1
11e18     D0 FC B0 FD | 	call	#__system___float_cmp
11e1c     01 FA 55 F2 | 	cmps	result1, #1 wc
11e20     00 1E 26 36 |  if_ae	not	local01, #0
11e24     A7 1E 62 FC | 	wrlong	local01, fp
11e28     58 03 90 FD | 	jmp	#LR__1443
11e2c                 | LR__1432
11e2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
11e2c     08 4E 05 F1 | 	add	fp, #8
11e30     A7 1E 02 FB | 	rdlong	local01, fp
11e34     08 4E 85 F1 | 	sub	fp, #8
11e38     1E 1E 0E F2 | 	cmp	local01, #30 wz
11e3c     14 4E 05 A1 |  if_e	add	fp, #20
11e40     A7 24 02 AB |  if_e	rdlong	local04, fp
11e44     14 4E 85 A1 |  if_e	sub	fp, #20
11e48     12 23 02 A6 |  if_e	mov	local03, local04
11e4c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11e50     38 00 90 5D |  if_ne	jmp	#LR__1433
11e54     00 1E 06 F6 | 	mov	local01, #0
11e58     A7 20 02 FB | 	rdlong	local02, fp
11e5c     0C 4E 05 F1 | 	add	fp, #12
11e60     A7 12 02 FB | 	rdlong	arg01, fp
11e64     0C 4E 85 F1 | 	sub	fp, #12
11e68     48 F4 B0 FD | 	call	#__system___float_fromuns
11e6c     FD 14 02 F6 | 	mov	arg02, result1
11e70     10 13 02 F6 | 	mov	arg01, local02
11e74     01 16 66 F6 | 	neg	arg03, #1
11e78     70 FC B0 FD | 	call	#__system___float_cmp
11e7c     01 FA 55 F2 | 	cmps	result1, #1 wc
11e80     00 1E 26 36 |  if_ae	not	local01, #0
11e84     A7 1E 62 FC | 	wrlong	local01, fp
11e88     F8 02 90 FD | 	jmp	#LR__1443
11e8c                 | LR__1433
11e8c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
11e8c     08 4E 05 F1 | 	add	fp, #8
11e90     A7 1E 02 FB | 	rdlong	local01, fp
11e94     08 4E 85 F1 | 	sub	fp, #8
11e98     1C 1E 0E F2 | 	cmp	local01, #28 wz
11e9c     14 4E 05 A1 |  if_e	add	fp, #20
11ea0     A7 24 02 AB |  if_e	rdlong	local04, fp
11ea4     14 4E 85 A1 |  if_e	sub	fp, #20
11ea8     12 23 02 A6 |  if_e	mov	local03, local04
11eac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11eb0     44 00 90 5D |  if_ne	jmp	#LR__1434
11eb4     00 1E 06 F6 | 	mov	local01, #0
11eb8     A7 12 02 FB | 	rdlong	arg01, fp
11ebc     09 13 52 F6 | 	abs	arg01, arg01 wc
11ec0     1F 26 C6 C9 |  if_b	decod	local05, #31
11ec4     00 26 06 36 |  if_ae	mov	local05, #0
11ec8     E8 F3 B0 FD | 	call	#__system___float_fromuns
11ecc     13 FB 61 F5 | 	xor	result1, local05
11ed0     FD 12 02 F6 | 	mov	arg01, result1
11ed4     0C 4E 05 F1 | 	add	fp, #12
11ed8     A7 14 02 FB | 	rdlong	arg02, fp
11edc     0C 4E 85 F1 | 	sub	fp, #12
11ee0     01 16 66 F6 | 	neg	arg03, #1
11ee4     04 FC B0 FD | 	call	#__system___float_cmp
11ee8     01 FA 55 F2 | 	cmps	result1, #1 wc
11eec     00 1E 26 36 |  if_ae	not	local01, #0
11ef0     A7 1E 62 FC | 	wrlong	local01, fp
11ef4     8C 02 90 FD | 	jmp	#LR__1443
11ef8                 | LR__1434
11ef8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
11ef8     08 4E 05 F1 | 	add	fp, #8
11efc     A7 1E 02 FB | 	rdlong	local01, fp
11f00     08 4E 85 F1 | 	sub	fp, #8
11f04     1C 1E 0E F2 | 	cmp	local01, #28 wz
11f08     14 4E 05 A1 |  if_e	add	fp, #20
11f0c     A7 24 02 AB |  if_e	rdlong	local04, fp
11f10     14 4E 85 A1 |  if_e	sub	fp, #20
11f14     12 23 02 A6 |  if_e	mov	local03, local04
11f18     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11f1c     24 00 90 5D |  if_ne	jmp	#LR__1435
11f20     00 1E 06 F6 | 	mov	local01, #0
11f24     A7 20 02 FB | 	rdlong	local02, fp
11f28     0C 4E 05 F1 | 	add	fp, #12
11f2c     A7 22 02 FB | 	rdlong	local03, fp
11f30     0C 4E 85 F1 | 	sub	fp, #12
11f34     11 21 5A F2 | 	cmps	local02, local03 wcz
11f38     01 1E 66 16 |  if_a	neg	local01, #1
11f3c     A7 1E 62 FC | 	wrlong	local01, fp
11f40     40 02 90 FD | 	jmp	#LR__1443
11f44                 | LR__1435
11f44                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
11f44     08 4E 05 F1 | 	add	fp, #8
11f48     A7 1E 02 FB | 	rdlong	local01, fp
11f4c     08 4E 85 F1 | 	sub	fp, #8
11f50     1C 1E 0E F2 | 	cmp	local01, #28 wz
11f54     14 4E 05 A1 |  if_e	add	fp, #20
11f58     A7 24 02 AB |  if_e	rdlong	local04, fp
11f5c     14 4E 85 A1 |  if_e	sub	fp, #20
11f60     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11f64     24 00 90 5D |  if_ne	jmp	#LR__1436
11f68     00 1E 06 F6 | 	mov	local01, #0
11f6c     A7 20 02 FB | 	rdlong	local02, fp
11f70     0C 4E 05 F1 | 	add	fp, #12
11f74     A7 22 02 FB | 	rdlong	local03, fp
11f78     0C 4E 85 F1 | 	sub	fp, #12
11f7c     11 21 5A F2 | 	cmps	local02, local03 wcz
11f80     01 1E 66 16 |  if_a	neg	local01, #1
11f84     A7 1E 62 FC | 	wrlong	local01, fp
11f88     F8 01 90 FD | 	jmp	#LR__1443
11f8c                 | LR__1436
11f8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
11f8c     08 4E 05 F1 | 	add	fp, #8
11f90     A7 1E 02 FB | 	rdlong	local01, fp
11f94     08 4E 85 F1 | 	sub	fp, #8
11f98     1D 1E 0E F2 | 	cmp	local01, #29 wz
11f9c     14 4E 05 A1 |  if_e	add	fp, #20
11fa0     A7 22 02 AB |  if_e	rdlong	local03, fp
11fa4     14 4E 85 A1 |  if_e	sub	fp, #20
11fa8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11fac     34 00 90 5D |  if_ne	jmp	#LR__1437
11fb0     00 1E 06 F6 | 	mov	local01, #0
11fb4     A7 12 02 FB | 	rdlong	arg01, fp
11fb8     F8 F2 B0 FD | 	call	#__system___float_fromuns
11fbc     FD 12 02 F6 | 	mov	arg01, result1
11fc0     0C 4E 05 F1 | 	add	fp, #12
11fc4     A7 14 02 FB | 	rdlong	arg02, fp
11fc8     0C 4E 85 F1 | 	sub	fp, #12
11fcc     01 16 66 F6 | 	neg	arg03, #1
11fd0     18 FB B0 FD | 	call	#__system___float_cmp
11fd4     01 FA 55 F2 | 	cmps	result1, #1 wc
11fd8     00 1E 26 36 |  if_ae	not	local01, #0
11fdc     A7 1E 62 FC | 	wrlong	local01, fp
11fe0     A0 01 90 FD | 	jmp	#LR__1443
11fe4                 | LR__1437
11fe4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
11fe4     08 4E 05 F1 | 	add	fp, #8
11fe8     A7 1E 02 FB | 	rdlong	local01, fp
11fec     08 4E 85 F1 | 	sub	fp, #8
11ff0     1D 1E 0E F2 | 	cmp	local01, #29 wz
11ff4     14 4E 05 A1 |  if_e	add	fp, #20
11ff8     A7 22 02 AB |  if_e	rdlong	local03, fp
11ffc     14 4E 85 A1 |  if_e	sub	fp, #20
12000     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12004     24 00 90 5D |  if_ne	jmp	#LR__1438
12008     00 1E 06 F6 | 	mov	local01, #0
1200c     A7 20 02 FB | 	rdlong	local02, fp
12010     0C 4E 05 F1 | 	add	fp, #12
12014     A7 22 02 FB | 	rdlong	local03, fp
12018     0C 4E 85 F1 | 	sub	fp, #12
1201c     11 21 5A F2 | 	cmps	local02, local03 wcz
12020     01 1E 66 16 |  if_a	neg	local01, #1
12024     A7 1E 62 FC | 	wrlong	local01, fp
12028     58 01 90 FD | 	jmp	#LR__1443
1202c                 | LR__1438
1202c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1202c     08 4E 05 F1 | 	add	fp, #8
12030     A7 1E 02 FB | 	rdlong	local01, fp
12034     08 4E 85 F1 | 	sub	fp, #8
12038     1D 1E 0E F2 | 	cmp	local01, #29 wz
1203c     14 4E 05 A1 |  if_e	add	fp, #20
12040     A7 22 02 AB |  if_e	rdlong	local03, fp
12044     14 4E 85 A1 |  if_e	sub	fp, #20
12048     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1204c     24 00 90 5D |  if_ne	jmp	#LR__1439
12050     00 1E 06 F6 | 	mov	local01, #0
12054     A7 20 02 FB | 	rdlong	local02, fp
12058     0C 4E 05 F1 | 	add	fp, #12
1205c     A7 22 02 FB | 	rdlong	local03, fp
12060     0C 4E 85 F1 | 	sub	fp, #12
12064     11 21 1A F2 | 	cmp	local02, local03 wcz
12068     01 1E 66 16 |  if_a	neg	local01, #1
1206c     A7 1E 62 FC | 	wrlong	local01, fp
12070     10 01 90 FD | 	jmp	#LR__1443
12074                 | LR__1439
12074                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
12074     08 4E 05 F1 | 	add	fp, #8
12078     A7 1E 02 FB | 	rdlong	local01, fp
1207c     08 4E 85 F1 | 	sub	fp, #8
12080     2B 1E 0E F2 | 	cmp	local01, #43 wz
12084     14 4E 05 A1 |  if_e	add	fp, #20
12088     A7 22 02 AB |  if_e	rdlong	local03, fp
1208c     14 4E 85 A1 |  if_e	sub	fp, #20
12090     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12094     30 00 90 5D |  if_ne	jmp	#LR__1440
12098     00 1E 06 F6 | 	mov	local01, #0
1209c     A7 12 02 FB | 	rdlong	arg01, fp
120a0     2C CC BF FD | 	call	#_convertstring
120a4     FD 12 02 F6 | 	mov	arg01, result1
120a8     0C 4E 05 F1 | 	add	fp, #12
120ac     A7 14 02 FB | 	rdlong	arg02, fp
120b0     0C 4E 85 F1 | 	sub	fp, #12
120b4     A8 CA B0 FD | 	call	#__system___string_cmp
120b8     01 FA 55 F2 | 	cmps	result1, #1 wc
120bc     00 1E 26 36 |  if_ae	not	local01, #0
120c0     A7 1E 62 FC | 	wrlong	local01, fp
120c4     BC 00 90 FD | 	jmp	#LR__1443
120c8                 | LR__1440
120c8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
120c8     08 4E 05 F1 | 	add	fp, #8
120cc     A7 1E 02 FB | 	rdlong	local01, fp
120d0     08 4E 85 F1 | 	sub	fp, #8
120d4     1F 1E 0E F2 | 	cmp	local01, #31 wz
120d8     14 4E 05 A1 |  if_e	add	fp, #20
120dc     A7 22 02 AB |  if_e	rdlong	local03, fp
120e0     14 4E 85 A1 |  if_e	sub	fp, #20
120e4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
120e8     34 00 90 5D |  if_ne	jmp	#LR__1441
120ec     00 1E 06 F6 | 	mov	local01, #0
120f0     A7 20 02 FB | 	rdlong	local02, fp
120f4     0C 4E 05 F1 | 	add	fp, #12
120f8     A7 12 02 FB | 	rdlong	arg01, fp
120fc     0C 4E 85 F1 | 	sub	fp, #12
12100     CC CB BF FD | 	call	#_convertstring
12104     FD 14 02 F6 | 	mov	arg02, result1
12108     10 13 02 F6 | 	mov	arg01, local02
1210c     50 CA B0 FD | 	call	#__system___string_cmp
12110     01 FA 55 F2 | 	cmps	result1, #1 wc
12114     00 1E 26 36 |  if_ae	not	local01, #0
12118     A7 1E 62 FC | 	wrlong	local01, fp
1211c     64 00 90 FD | 	jmp	#LR__1443
12120                 | LR__1441
12120                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
12120     08 4E 05 F1 | 	add	fp, #8
12124     A7 1E 02 FB | 	rdlong	local01, fp
12128     08 4E 85 F1 | 	sub	fp, #8
1212c     2B 1E 0E F2 | 	cmp	local01, #43 wz
12130     14 4E 05 A1 |  if_e	add	fp, #20
12134     A7 22 02 AB |  if_e	rdlong	local03, fp
12138     14 4E 85 A1 |  if_e	sub	fp, #20
1213c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12140     3C 00 90 5D |  if_ne	jmp	#LR__1442
12144     00 1E 06 F6 | 	mov	local01, #0
12148     A7 12 02 FB | 	rdlong	arg01, fp
1214c     80 CB BF FD | 	call	#_convertstring
12150     FD 20 02 F6 | 	mov	local02, result1
12154     0C 4E 05 F1 | 	add	fp, #12
12158     A7 12 02 FB | 	rdlong	arg01, fp
1215c     0C 4E 85 F1 | 	sub	fp, #12
12160     6C CB BF FD | 	call	#_convertstring
12164     FD 14 02 F6 | 	mov	arg02, result1
12168     10 13 02 F6 | 	mov	arg01, local02
1216c     F0 C9 B0 FD | 	call	#__system___string_cmp
12170     01 FA 55 F2 | 	cmps	result1, #1 wc
12174     00 1E 26 36 |  if_ae	not	local01, #0
12178     A7 1E 62 FC | 	wrlong	local01, fp
1217c     04 00 90 FD | 	jmp	#LR__1443
12180                 | LR__1442
12180     A7 00 68 FC | 	wrlong	#0, fp
12184                 | LR__1443
12184     08 4E 05 F1 | 	add	fp, #8
12188     A7 38 68 FC | 	wrlong	#28, fp
1218c     08 4E 85 F1 | 	sub	fp, #8
12190     A7 12 02 F6 | 	mov	arg01, fp
12194     60 87 BF FD | 	call	#_push
12198     A7 F0 03 F6 | 	mov	ptra, fp
1219c     B2 00 A0 FD | 	call	#popregs_
121a0                 | _do_gt_ret
121a0     2D 00 64 FD | 	ret
121a4                 | 
121a4                 | ' 
121a4                 | ' sub do_lt
121a4                 | _do_lt
121a4     05 4A 05 F6 | 	mov	COUNT_, #5
121a8     A8 00 A0 FD | 	call	#pushregs_
121ac     18 F0 07 F1 | 	add	ptra, #24
121b0     AC 86 BF FD | 	call	#_pop
121b4     FD 1E 02 F6 | 	mov	local01, result1
121b8     FE 20 02 F6 | 	mov	local02, result2
121bc     FF 22 02 F6 | 	mov	local03, result3
121c0     0C 4E 05 F1 | 	add	fp, #12
121c4     A7 1E 62 FC | 	wrlong	local01, fp
121c8     04 4E 05 F1 | 	add	fp, #4
121cc     A7 20 62 FC | 	wrlong	local02, fp
121d0     04 4E 05 F1 | 	add	fp, #4
121d4     A7 22 62 FC | 	wrlong	local03, fp
121d8     14 4E 85 F1 | 	sub	fp, #20
121dc     80 86 BF FD | 	call	#_pop
121e0     FF 22 02 F6 | 	mov	local03, result3
121e4     A7 FA 61 FC | 	wrlong	result1, fp
121e8     04 4E 05 F1 | 	add	fp, #4
121ec     A7 FC 61 FC | 	wrlong	result2, fp
121f0     04 4E 05 F1 | 	add	fp, #4
121f4     A7 22 62 FC | 	wrlong	local03, fp
121f8                 | ' t2=pop()
121f8                 | ' t1=pop()
121f8                 | ' 
121f8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
121f8     08 4E 85 F1 | 	sub	fp, #8
121fc     1F 22 0E F2 | 	cmp	local03, #31 wz
12200     14 4E 05 A1 |  if_e	add	fp, #20
12204     A7 24 02 AB |  if_e	rdlong	local04, fp
12208     14 4E 85 A1 |  if_e	sub	fp, #20
1220c     12 23 02 A6 |  if_e	mov	local03, local04
12210     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12214     28 00 90 5D |  if_ne	jmp	#LR__1450
12218     00 1E 06 F6 | 	mov	local01, #0
1221c     A7 12 02 FB | 	rdlong	arg01, fp
12220     0C 4E 05 F1 | 	add	fp, #12
12224     A7 14 02 FB | 	rdlong	arg02, fp
12228     0C 4E 85 F1 | 	sub	fp, #12
1222c     30 C9 B0 FD | 	call	#__system___string_cmp
12230     00 FA 55 F2 | 	cmps	result1, #0 wc
12234     00 1E 26 C6 |  if_b	not	local01, #0
12238     A7 1E 62 FC | 	wrlong	local01, fp
1223c     0C 04 90 FD | 	jmp	#LR__1463
12240                 | LR__1450
12240                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
12240     08 4E 05 F1 | 	add	fp, #8
12244     A7 1E 02 FB | 	rdlong	local01, fp
12248     08 4E 85 F1 | 	sub	fp, #8
1224c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12250     14 4E 05 A1 |  if_e	add	fp, #20
12254     A7 24 02 AB |  if_e	rdlong	local04, fp
12258     14 4E 85 A1 |  if_e	sub	fp, #20
1225c     12 23 02 A6 |  if_e	mov	local03, local04
12260     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12264     2C 00 90 5D |  if_ne	jmp	#LR__1451
12268     00 1E 06 F6 | 	mov	local01, #0
1226c     A7 12 02 FB | 	rdlong	arg01, fp
12270     0C 4E 05 F1 | 	add	fp, #12
12274     A7 14 02 FB | 	rdlong	arg02, fp
12278     0C 4E 85 F1 | 	sub	fp, #12
1227c     01 16 06 F6 | 	mov	arg03, #1
12280     68 F8 B0 FD | 	call	#__system___float_cmp
12284     00 FA 55 F2 | 	cmps	result1, #0 wc
12288     00 1E 26 C6 |  if_b	not	local01, #0
1228c     A7 1E 62 FC | 	wrlong	local01, fp
12290     B8 03 90 FD | 	jmp	#LR__1463
12294                 | LR__1451
12294                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
12294     08 4E 05 F1 | 	add	fp, #8
12298     A7 1E 02 FB | 	rdlong	local01, fp
1229c     08 4E 85 F1 | 	sub	fp, #8
122a0     1E 1E 0E F2 | 	cmp	local01, #30 wz
122a4     14 4E 05 A1 |  if_e	add	fp, #20
122a8     A7 24 02 AB |  if_e	rdlong	local04, fp
122ac     14 4E 85 A1 |  if_e	sub	fp, #20
122b0     12 23 02 A6 |  if_e	mov	local03, local04
122b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
122b8     48 00 90 5D |  if_ne	jmp	#LR__1452
122bc     00 1E 06 F6 | 	mov	local01, #0
122c0     A7 20 02 FB | 	rdlong	local02, fp
122c4     0C 4E 05 F1 | 	add	fp, #12
122c8     A7 12 02 FB | 	rdlong	arg01, fp
122cc     0C 4E 85 F1 | 	sub	fp, #12
122d0     09 13 52 F6 | 	abs	arg01, arg01 wc
122d4     1F 26 C6 C9 |  if_b	decod	local05, #31
122d8     00 26 06 36 |  if_ae	mov	local05, #0
122dc     D4 EF B0 FD | 	call	#__system___float_fromuns
122e0     13 FB 61 F5 | 	xor	result1, local05
122e4     FD 14 02 F6 | 	mov	arg02, result1
122e8     10 13 02 F6 | 	mov	arg01, local02
122ec     01 16 06 F6 | 	mov	arg03, #1
122f0     F8 F7 B0 FD | 	call	#__system___float_cmp
122f4     00 FA 55 F2 | 	cmps	result1, #0 wc
122f8     00 1E 26 C6 |  if_b	not	local01, #0
122fc     A7 1E 62 FC | 	wrlong	local01, fp
12300     48 03 90 FD | 	jmp	#LR__1463
12304                 | LR__1452
12304                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
12304     08 4E 05 F1 | 	add	fp, #8
12308     A7 1E 02 FB | 	rdlong	local01, fp
1230c     08 4E 85 F1 | 	sub	fp, #8
12310     1E 1E 0E F2 | 	cmp	local01, #30 wz
12314     14 4E 05 A1 |  if_e	add	fp, #20
12318     A7 24 02 AB |  if_e	rdlong	local04, fp
1231c     14 4E 85 A1 |  if_e	sub	fp, #20
12320     12 23 02 A6 |  if_e	mov	local03, local04
12324     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12328     38 00 90 5D |  if_ne	jmp	#LR__1453
1232c     00 1E 06 F6 | 	mov	local01, #0
12330     A7 20 02 FB | 	rdlong	local02, fp
12334     0C 4E 05 F1 | 	add	fp, #12
12338     A7 12 02 FB | 	rdlong	arg01, fp
1233c     0C 4E 85 F1 | 	sub	fp, #12
12340     70 EF B0 FD | 	call	#__system___float_fromuns
12344     FD 14 02 F6 | 	mov	arg02, result1
12348     10 13 02 F6 | 	mov	arg01, local02
1234c     01 16 06 F6 | 	mov	arg03, #1
12350     98 F7 B0 FD | 	call	#__system___float_cmp
12354     00 FA 55 F2 | 	cmps	result1, #0 wc
12358     00 1E 26 C6 |  if_b	not	local01, #0
1235c     A7 1E 62 FC | 	wrlong	local01, fp
12360     E8 02 90 FD | 	jmp	#LR__1463
12364                 | LR__1453
12364                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
12364     08 4E 05 F1 | 	add	fp, #8
12368     A7 1E 02 FB | 	rdlong	local01, fp
1236c     08 4E 85 F1 | 	sub	fp, #8
12370     1C 1E 0E F2 | 	cmp	local01, #28 wz
12374     14 4E 05 A1 |  if_e	add	fp, #20
12378     A7 24 02 AB |  if_e	rdlong	local04, fp
1237c     14 4E 85 A1 |  if_e	sub	fp, #20
12380     12 23 02 A6 |  if_e	mov	local03, local04
12384     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12388     44 00 90 5D |  if_ne	jmp	#LR__1454
1238c     00 1E 06 F6 | 	mov	local01, #0
12390     A7 12 02 FB | 	rdlong	arg01, fp
12394     09 13 52 F6 | 	abs	arg01, arg01 wc
12398     1F 26 C6 C9 |  if_b	decod	local05, #31
1239c     00 26 06 36 |  if_ae	mov	local05, #0
123a0     10 EF B0 FD | 	call	#__system___float_fromuns
123a4     13 FB 61 F5 | 	xor	result1, local05
123a8     FD 12 02 F6 | 	mov	arg01, result1
123ac     0C 4E 05 F1 | 	add	fp, #12
123b0     A7 14 02 FB | 	rdlong	arg02, fp
123b4     0C 4E 85 F1 | 	sub	fp, #12
123b8     01 16 06 F6 | 	mov	arg03, #1
123bc     2C F7 B0 FD | 	call	#__system___float_cmp
123c0     00 FA 55 F2 | 	cmps	result1, #0 wc
123c4     00 1E 26 C6 |  if_b	not	local01, #0
123c8     A7 1E 62 FC | 	wrlong	local01, fp
123cc     7C 02 90 FD | 	jmp	#LR__1463
123d0                 | LR__1454
123d0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
123d0     08 4E 05 F1 | 	add	fp, #8
123d4     A7 1E 02 FB | 	rdlong	local01, fp
123d8     08 4E 85 F1 | 	sub	fp, #8
123dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
123e0     14 4E 05 A1 |  if_e	add	fp, #20
123e4     A7 24 02 AB |  if_e	rdlong	local04, fp
123e8     14 4E 85 A1 |  if_e	sub	fp, #20
123ec     12 23 02 A6 |  if_e	mov	local03, local04
123f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
123f4     20 00 90 5D |  if_ne	jmp	#LR__1455
123f8     A7 20 02 FB | 	rdlong	local02, fp
123fc     0C 4E 05 F1 | 	add	fp, #12
12400     A7 22 02 FB | 	rdlong	local03, fp
12404     0C 4E 85 F1 | 	sub	fp, #12
12408     11 21 52 F2 | 	cmps	local02, local03 wc
1240c     0F 1F A2 F1 | 	subx	local01, local01
12410     A7 1E 62 FC | 	wrlong	local01, fp
12414     34 02 90 FD | 	jmp	#LR__1463
12418                 | LR__1455
12418                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
12418     08 4E 05 F1 | 	add	fp, #8
1241c     A7 1E 02 FB | 	rdlong	local01, fp
12420     08 4E 85 F1 | 	sub	fp, #8
12424     1C 1E 0E F2 | 	cmp	local01, #28 wz
12428     14 4E 05 A1 |  if_e	add	fp, #20
1242c     A7 24 02 AB |  if_e	rdlong	local04, fp
12430     14 4E 85 A1 |  if_e	sub	fp, #20
12434     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12438     20 00 90 5D |  if_ne	jmp	#LR__1456
1243c     A7 20 02 FB | 	rdlong	local02, fp
12440     0C 4E 05 F1 | 	add	fp, #12
12444     A7 22 02 FB | 	rdlong	local03, fp
12448     0C 4E 85 F1 | 	sub	fp, #12
1244c     11 21 52 F2 | 	cmps	local02, local03 wc
12450     0F 1F A2 F1 | 	subx	local01, local01
12454     A7 1E 62 FC | 	wrlong	local01, fp
12458     F0 01 90 FD | 	jmp	#LR__1463
1245c                 | LR__1456
1245c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1245c     08 4E 05 F1 | 	add	fp, #8
12460     A7 1E 02 FB | 	rdlong	local01, fp
12464     08 4E 85 F1 | 	sub	fp, #8
12468     1D 1E 0E F2 | 	cmp	local01, #29 wz
1246c     14 4E 05 A1 |  if_e	add	fp, #20
12470     A7 22 02 AB |  if_e	rdlong	local03, fp
12474     14 4E 85 A1 |  if_e	sub	fp, #20
12478     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1247c     34 00 90 5D |  if_ne	jmp	#LR__1457
12480     00 1E 06 F6 | 	mov	local01, #0
12484     A7 12 02 FB | 	rdlong	arg01, fp
12488     28 EE B0 FD | 	call	#__system___float_fromuns
1248c     FD 12 02 F6 | 	mov	arg01, result1
12490     0C 4E 05 F1 | 	add	fp, #12
12494     A7 14 02 FB | 	rdlong	arg02, fp
12498     0C 4E 85 F1 | 	sub	fp, #12
1249c     01 16 06 F6 | 	mov	arg03, #1
124a0     48 F6 B0 FD | 	call	#__system___float_cmp
124a4     00 FA 55 F2 | 	cmps	result1, #0 wc
124a8     00 1E 26 C6 |  if_b	not	local01, #0
124ac     A7 1E 62 FC | 	wrlong	local01, fp
124b0     98 01 90 FD | 	jmp	#LR__1463
124b4                 | LR__1457
124b4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
124b4     08 4E 05 F1 | 	add	fp, #8
124b8     A7 1E 02 FB | 	rdlong	local01, fp
124bc     08 4E 85 F1 | 	sub	fp, #8
124c0     1D 1E 0E F2 | 	cmp	local01, #29 wz
124c4     14 4E 05 A1 |  if_e	add	fp, #20
124c8     A7 22 02 AB |  if_e	rdlong	local03, fp
124cc     14 4E 85 A1 |  if_e	sub	fp, #20
124d0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
124d4     20 00 90 5D |  if_ne	jmp	#LR__1458
124d8     A7 20 02 FB | 	rdlong	local02, fp
124dc     0C 4E 05 F1 | 	add	fp, #12
124e0     A7 22 02 FB | 	rdlong	local03, fp
124e4     0C 4E 85 F1 | 	sub	fp, #12
124e8     11 21 52 F2 | 	cmps	local02, local03 wc
124ec     0F 1F A2 F1 | 	subx	local01, local01
124f0     A7 1E 62 FC | 	wrlong	local01, fp
124f4     54 01 90 FD | 	jmp	#LR__1463
124f8                 | LR__1458
124f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
124f8     08 4E 05 F1 | 	add	fp, #8
124fc     A7 1E 02 FB | 	rdlong	local01, fp
12500     08 4E 85 F1 | 	sub	fp, #8
12504     1D 1E 0E F2 | 	cmp	local01, #29 wz
12508     14 4E 05 A1 |  if_e	add	fp, #20
1250c     A7 22 02 AB |  if_e	rdlong	local03, fp
12510     14 4E 85 A1 |  if_e	sub	fp, #20
12514     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12518     20 00 90 5D |  if_ne	jmp	#LR__1459
1251c     A7 20 02 FB | 	rdlong	local02, fp
12520     0C 4E 05 F1 | 	add	fp, #12
12524     A7 22 02 FB | 	rdlong	local03, fp
12528     0C 4E 85 F1 | 	sub	fp, #12
1252c     11 21 12 F2 | 	cmp	local02, local03 wc
12530     0F 1F A2 F1 | 	subx	local01, local01
12534     A7 1E 62 FC | 	wrlong	local01, fp
12538     10 01 90 FD | 	jmp	#LR__1463
1253c                 | LR__1459
1253c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1253c     08 4E 05 F1 | 	add	fp, #8
12540     A7 1E 02 FB | 	rdlong	local01, fp
12544     08 4E 85 F1 | 	sub	fp, #8
12548     2B 1E 0E F2 | 	cmp	local01, #43 wz
1254c     14 4E 05 A1 |  if_e	add	fp, #20
12550     A7 22 02 AB |  if_e	rdlong	local03, fp
12554     14 4E 85 A1 |  if_e	sub	fp, #20
12558     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1255c     30 00 90 5D |  if_ne	jmp	#LR__1460
12560     00 1E 06 F6 | 	mov	local01, #0
12564     A7 12 02 FB | 	rdlong	arg01, fp
12568     64 C7 BF FD | 	call	#_convertstring
1256c     FD 12 02 F6 | 	mov	arg01, result1
12570     0C 4E 05 F1 | 	add	fp, #12
12574     A7 14 02 FB | 	rdlong	arg02, fp
12578     0C 4E 85 F1 | 	sub	fp, #12
1257c     E0 C5 B0 FD | 	call	#__system___string_cmp
12580     00 FA 55 F2 | 	cmps	result1, #0 wc
12584     00 1E 26 C6 |  if_b	not	local01, #0
12588     A7 1E 62 FC | 	wrlong	local01, fp
1258c     BC 00 90 FD | 	jmp	#LR__1463
12590                 | LR__1460
12590                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
12590     08 4E 05 F1 | 	add	fp, #8
12594     A7 1E 02 FB | 	rdlong	local01, fp
12598     08 4E 85 F1 | 	sub	fp, #8
1259c     1F 1E 0E F2 | 	cmp	local01, #31 wz
125a0     14 4E 05 A1 |  if_e	add	fp, #20
125a4     A7 22 02 AB |  if_e	rdlong	local03, fp
125a8     14 4E 85 A1 |  if_e	sub	fp, #20
125ac     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
125b0     34 00 90 5D |  if_ne	jmp	#LR__1461
125b4     00 1E 06 F6 | 	mov	local01, #0
125b8     A7 20 02 FB | 	rdlong	local02, fp
125bc     0C 4E 05 F1 | 	add	fp, #12
125c0     A7 12 02 FB | 	rdlong	arg01, fp
125c4     0C 4E 85 F1 | 	sub	fp, #12
125c8     04 C7 BF FD | 	call	#_convertstring
125cc     FD 14 02 F6 | 	mov	arg02, result1
125d0     10 13 02 F6 | 	mov	arg01, local02
125d4     88 C5 B0 FD | 	call	#__system___string_cmp
125d8     00 FA 55 F2 | 	cmps	result1, #0 wc
125dc     00 1E 26 C6 |  if_b	not	local01, #0
125e0     A7 1E 62 FC | 	wrlong	local01, fp
125e4     64 00 90 FD | 	jmp	#LR__1463
125e8                 | LR__1461
125e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
125e8     08 4E 05 F1 | 	add	fp, #8
125ec     A7 1E 02 FB | 	rdlong	local01, fp
125f0     08 4E 85 F1 | 	sub	fp, #8
125f4     2B 1E 0E F2 | 	cmp	local01, #43 wz
125f8     14 4E 05 A1 |  if_e	add	fp, #20
125fc     A7 22 02 AB |  if_e	rdlong	local03, fp
12600     14 4E 85 A1 |  if_e	sub	fp, #20
12604     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12608     3C 00 90 5D |  if_ne	jmp	#LR__1462
1260c     00 1E 06 F6 | 	mov	local01, #0
12610     A7 12 02 FB | 	rdlong	arg01, fp
12614     B8 C6 BF FD | 	call	#_convertstring
12618     FD 20 02 F6 | 	mov	local02, result1
1261c     0C 4E 05 F1 | 	add	fp, #12
12620     A7 12 02 FB | 	rdlong	arg01, fp
12624     0C 4E 85 F1 | 	sub	fp, #12
12628     A4 C6 BF FD | 	call	#_convertstring
1262c     FD 14 02 F6 | 	mov	arg02, result1
12630     10 13 02 F6 | 	mov	arg01, local02
12634     28 C5 B0 FD | 	call	#__system___string_cmp
12638     00 FA 55 F2 | 	cmps	result1, #0 wc
1263c     00 1E 26 C6 |  if_b	not	local01, #0
12640     A7 1E 62 FC | 	wrlong	local01, fp
12644     04 00 90 FD | 	jmp	#LR__1463
12648                 | LR__1462
12648     A7 00 68 FC | 	wrlong	#0, fp
1264c                 | LR__1463
1264c     08 4E 05 F1 | 	add	fp, #8
12650     A7 38 68 FC | 	wrlong	#28, fp
12654     08 4E 85 F1 | 	sub	fp, #8
12658     A7 12 02 F6 | 	mov	arg01, fp
1265c     98 82 BF FD | 	call	#_push
12660     A7 F0 03 F6 | 	mov	ptra, fp
12664     B2 00 A0 FD | 	call	#popregs_
12668                 | _do_lt_ret
12668     2D 00 64 FD | 	ret
1266c                 | 
1266c                 | ' 
1266c                 | ' sub do_ge
1266c                 | _do_ge
1266c     05 4A 05 F6 | 	mov	COUNT_, #5
12670     A8 00 A0 FD | 	call	#pushregs_
12674     18 F0 07 F1 | 	add	ptra, #24
12678     E4 81 BF FD | 	call	#_pop
1267c     FD 1E 02 F6 | 	mov	local01, result1
12680     FE 20 02 F6 | 	mov	local02, result2
12684     FF 22 02 F6 | 	mov	local03, result3
12688     0C 4E 05 F1 | 	add	fp, #12
1268c     A7 1E 62 FC | 	wrlong	local01, fp
12690     04 4E 05 F1 | 	add	fp, #4
12694     A7 20 62 FC | 	wrlong	local02, fp
12698     04 4E 05 F1 | 	add	fp, #4
1269c     A7 22 62 FC | 	wrlong	local03, fp
126a0     14 4E 85 F1 | 	sub	fp, #20
126a4     B8 81 BF FD | 	call	#_pop
126a8     FF 22 02 F6 | 	mov	local03, result3
126ac     A7 FA 61 FC | 	wrlong	result1, fp
126b0     04 4E 05 F1 | 	add	fp, #4
126b4     A7 FC 61 FC | 	wrlong	result2, fp
126b8     04 4E 05 F1 | 	add	fp, #4
126bc     A7 22 62 FC | 	wrlong	local03, fp
126c0                 | ' t2=pop()
126c0                 | ' t1=pop()
126c0                 | ' 
126c0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
126c0     08 4E 85 F1 | 	sub	fp, #8
126c4     1F 22 0E F2 | 	cmp	local03, #31 wz
126c8     14 4E 05 A1 |  if_e	add	fp, #20
126cc     A7 24 02 AB |  if_e	rdlong	local04, fp
126d0     14 4E 85 A1 |  if_e	sub	fp, #20
126d4     12 23 02 A6 |  if_e	mov	local03, local04
126d8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
126dc     28 00 90 5D |  if_ne	jmp	#LR__1470
126e0     00 1E 06 F6 | 	mov	local01, #0
126e4     A7 12 02 FB | 	rdlong	arg01, fp
126e8     0C 4E 05 F1 | 	add	fp, #12
126ec     A7 14 02 FB | 	rdlong	arg02, fp
126f0     0C 4E 85 F1 | 	sub	fp, #12
126f4     68 C4 B0 FD | 	call	#__system___string_cmp
126f8     00 FA 55 F2 | 	cmps	result1, #0 wc
126fc     00 1E 26 36 |  if_ae	not	local01, #0
12700     A7 1E 62 FC | 	wrlong	local01, fp
12704     1C 04 90 FD | 	jmp	#LR__1483
12708                 | LR__1470
12708                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
12708     08 4E 05 F1 | 	add	fp, #8
1270c     A7 1E 02 FB | 	rdlong	local01, fp
12710     08 4E 85 F1 | 	sub	fp, #8
12714     1E 1E 0E F2 | 	cmp	local01, #30 wz
12718     14 4E 05 A1 |  if_e	add	fp, #20
1271c     A7 24 02 AB |  if_e	rdlong	local04, fp
12720     14 4E 85 A1 |  if_e	sub	fp, #20
12724     12 23 02 A6 |  if_e	mov	local03, local04
12728     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1272c     2C 00 90 5D |  if_ne	jmp	#LR__1471
12730     00 1E 06 F6 | 	mov	local01, #0
12734     A7 12 02 FB | 	rdlong	arg01, fp
12738     0C 4E 05 F1 | 	add	fp, #12
1273c     A7 14 02 FB | 	rdlong	arg02, fp
12740     0C 4E 85 F1 | 	sub	fp, #12
12744     01 16 66 F6 | 	neg	arg03, #1
12748     A0 F3 B0 FD | 	call	#__system___float_cmp
1274c     00 FA 55 F2 | 	cmps	result1, #0 wc
12750     00 1E 26 36 |  if_ae	not	local01, #0
12754     A7 1E 62 FC | 	wrlong	local01, fp
12758     C8 03 90 FD | 	jmp	#LR__1483
1275c                 | LR__1471
1275c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1275c     08 4E 05 F1 | 	add	fp, #8
12760     A7 1E 02 FB | 	rdlong	local01, fp
12764     08 4E 85 F1 | 	sub	fp, #8
12768     1E 1E 0E F2 | 	cmp	local01, #30 wz
1276c     14 4E 05 A1 |  if_e	add	fp, #20
12770     A7 24 02 AB |  if_e	rdlong	local04, fp
12774     14 4E 85 A1 |  if_e	sub	fp, #20
12778     12 23 02 A6 |  if_e	mov	local03, local04
1277c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12780     48 00 90 5D |  if_ne	jmp	#LR__1472
12784     00 1E 06 F6 | 	mov	local01, #0
12788     A7 20 02 FB | 	rdlong	local02, fp
1278c     0C 4E 05 F1 | 	add	fp, #12
12790     A7 12 02 FB | 	rdlong	arg01, fp
12794     0C 4E 85 F1 | 	sub	fp, #12
12798     09 13 52 F6 | 	abs	arg01, arg01 wc
1279c     1F 26 C6 C9 |  if_b	decod	local05, #31
127a0     00 26 06 36 |  if_ae	mov	local05, #0
127a4     0C EB B0 FD | 	call	#__system___float_fromuns
127a8     13 FB 61 F5 | 	xor	result1, local05
127ac     FD 14 02 F6 | 	mov	arg02, result1
127b0     10 13 02 F6 | 	mov	arg01, local02
127b4     01 16 66 F6 | 	neg	arg03, #1
127b8     30 F3 B0 FD | 	call	#__system___float_cmp
127bc     00 FA 55 F2 | 	cmps	result1, #0 wc
127c0     00 1E 26 36 |  if_ae	not	local01, #0
127c4     A7 1E 62 FC | 	wrlong	local01, fp
127c8     58 03 90 FD | 	jmp	#LR__1483
127cc                 | LR__1472
127cc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
127cc     08 4E 05 F1 | 	add	fp, #8
127d0     A7 1E 02 FB | 	rdlong	local01, fp
127d4     08 4E 85 F1 | 	sub	fp, #8
127d8     1E 1E 0E F2 | 	cmp	local01, #30 wz
127dc     14 4E 05 A1 |  if_e	add	fp, #20
127e0     A7 24 02 AB |  if_e	rdlong	local04, fp
127e4     14 4E 85 A1 |  if_e	sub	fp, #20
127e8     12 23 02 A6 |  if_e	mov	local03, local04
127ec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
127f0     38 00 90 5D |  if_ne	jmp	#LR__1473
127f4     00 1E 06 F6 | 	mov	local01, #0
127f8     A7 20 02 FB | 	rdlong	local02, fp
127fc     0C 4E 05 F1 | 	add	fp, #12
12800     A7 12 02 FB | 	rdlong	arg01, fp
12804     0C 4E 85 F1 | 	sub	fp, #12
12808     A8 EA B0 FD | 	call	#__system___float_fromuns
1280c     FD 14 02 F6 | 	mov	arg02, result1
12810     10 13 02 F6 | 	mov	arg01, local02
12814     01 16 66 F6 | 	neg	arg03, #1
12818     D0 F2 B0 FD | 	call	#__system___float_cmp
1281c     00 FA 55 F2 | 	cmps	result1, #0 wc
12820     00 1E 26 36 |  if_ae	not	local01, #0
12824     A7 1E 62 FC | 	wrlong	local01, fp
12828     F8 02 90 FD | 	jmp	#LR__1483
1282c                 | LR__1473
1282c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1282c     08 4E 05 F1 | 	add	fp, #8
12830     A7 1E 02 FB | 	rdlong	local01, fp
12834     08 4E 85 F1 | 	sub	fp, #8
12838     1C 1E 0E F2 | 	cmp	local01, #28 wz
1283c     14 4E 05 A1 |  if_e	add	fp, #20
12840     A7 24 02 AB |  if_e	rdlong	local04, fp
12844     14 4E 85 A1 |  if_e	sub	fp, #20
12848     12 23 02 A6 |  if_e	mov	local03, local04
1284c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12850     44 00 90 5D |  if_ne	jmp	#LR__1474
12854     00 1E 06 F6 | 	mov	local01, #0
12858     A7 12 02 FB | 	rdlong	arg01, fp
1285c     09 13 52 F6 | 	abs	arg01, arg01 wc
12860     1F 26 C6 C9 |  if_b	decod	local05, #31
12864     00 26 06 36 |  if_ae	mov	local05, #0
12868     48 EA B0 FD | 	call	#__system___float_fromuns
1286c     13 FB 61 F5 | 	xor	result1, local05
12870     FD 12 02 F6 | 	mov	arg01, result1
12874     0C 4E 05 F1 | 	add	fp, #12
12878     A7 14 02 FB | 	rdlong	arg02, fp
1287c     0C 4E 85 F1 | 	sub	fp, #12
12880     01 16 66 F6 | 	neg	arg03, #1
12884     64 F2 B0 FD | 	call	#__system___float_cmp
12888     00 FA 55 F2 | 	cmps	result1, #0 wc
1288c     00 1E 26 36 |  if_ae	not	local01, #0
12890     A7 1E 62 FC | 	wrlong	local01, fp
12894     8C 02 90 FD | 	jmp	#LR__1483
12898                 | LR__1474
12898                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
12898     08 4E 05 F1 | 	add	fp, #8
1289c     A7 1E 02 FB | 	rdlong	local01, fp
128a0     08 4E 85 F1 | 	sub	fp, #8
128a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
128a8     14 4E 05 A1 |  if_e	add	fp, #20
128ac     A7 24 02 AB |  if_e	rdlong	local04, fp
128b0     14 4E 85 A1 |  if_e	sub	fp, #20
128b4     12 23 02 A6 |  if_e	mov	local03, local04
128b8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
128bc     24 00 90 5D |  if_ne	jmp	#LR__1475
128c0     00 1E 06 F6 | 	mov	local01, #0
128c4     A7 20 02 FB | 	rdlong	local02, fp
128c8     0C 4E 05 F1 | 	add	fp, #12
128cc     A7 22 02 FB | 	rdlong	local03, fp
128d0     0C 4E 85 F1 | 	sub	fp, #12
128d4     11 21 52 F2 | 	cmps	local02, local03 wc
128d8     01 1E 66 36 |  if_ae	neg	local01, #1
128dc     A7 1E 62 FC | 	wrlong	local01, fp
128e0     40 02 90 FD | 	jmp	#LR__1483
128e4                 | LR__1475
128e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
128e4     08 4E 05 F1 | 	add	fp, #8
128e8     A7 1E 02 FB | 	rdlong	local01, fp
128ec     08 4E 85 F1 | 	sub	fp, #8
128f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
128f4     14 4E 05 A1 |  if_e	add	fp, #20
128f8     A7 24 02 AB |  if_e	rdlong	local04, fp
128fc     14 4E 85 A1 |  if_e	sub	fp, #20
12900     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12904     24 00 90 5D |  if_ne	jmp	#LR__1476
12908     00 1E 06 F6 | 	mov	local01, #0
1290c     A7 20 02 FB | 	rdlong	local02, fp
12910     0C 4E 05 F1 | 	add	fp, #12
12914     A7 22 02 FB | 	rdlong	local03, fp
12918     0C 4E 85 F1 | 	sub	fp, #12
1291c     11 21 52 F2 | 	cmps	local02, local03 wc
12920     01 1E 66 36 |  if_ae	neg	local01, #1
12924     A7 1E 62 FC | 	wrlong	local01, fp
12928     F8 01 90 FD | 	jmp	#LR__1483
1292c                 | LR__1476
1292c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1292c     08 4E 05 F1 | 	add	fp, #8
12930     A7 1E 02 FB | 	rdlong	local01, fp
12934     08 4E 85 F1 | 	sub	fp, #8
12938     1D 1E 0E F2 | 	cmp	local01, #29 wz
1293c     14 4E 05 A1 |  if_e	add	fp, #20
12940     A7 22 02 AB |  if_e	rdlong	local03, fp
12944     14 4E 85 A1 |  if_e	sub	fp, #20
12948     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1294c     34 00 90 5D |  if_ne	jmp	#LR__1477
12950     00 1E 06 F6 | 	mov	local01, #0
12954     A7 12 02 FB | 	rdlong	arg01, fp
12958     58 E9 B0 FD | 	call	#__system___float_fromuns
1295c     FD 12 02 F6 | 	mov	arg01, result1
12960     0C 4E 05 F1 | 	add	fp, #12
12964     A7 14 02 FB | 	rdlong	arg02, fp
12968     0C 4E 85 F1 | 	sub	fp, #12
1296c     01 16 66 F6 | 	neg	arg03, #1
12970     78 F1 B0 FD | 	call	#__system___float_cmp
12974     00 FA 55 F2 | 	cmps	result1, #0 wc
12978     00 1E 26 36 |  if_ae	not	local01, #0
1297c     A7 1E 62 FC | 	wrlong	local01, fp
12980     A0 01 90 FD | 	jmp	#LR__1483
12984                 | LR__1477
12984                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
12984     08 4E 05 F1 | 	add	fp, #8
12988     A7 1E 02 FB | 	rdlong	local01, fp
1298c     08 4E 85 F1 | 	sub	fp, #8
12990     1D 1E 0E F2 | 	cmp	local01, #29 wz
12994     14 4E 05 A1 |  if_e	add	fp, #20
12998     A7 22 02 AB |  if_e	rdlong	local03, fp
1299c     14 4E 85 A1 |  if_e	sub	fp, #20
129a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
129a4     24 00 90 5D |  if_ne	jmp	#LR__1478
129a8     00 1E 06 F6 | 	mov	local01, #0
129ac     A7 20 02 FB | 	rdlong	local02, fp
129b0     0C 4E 05 F1 | 	add	fp, #12
129b4     A7 22 02 FB | 	rdlong	local03, fp
129b8     0C 4E 85 F1 | 	sub	fp, #12
129bc     11 21 52 F2 | 	cmps	local02, local03 wc
129c0     01 1E 66 36 |  if_ae	neg	local01, #1
129c4     A7 1E 62 FC | 	wrlong	local01, fp
129c8     58 01 90 FD | 	jmp	#LR__1483
129cc                 | LR__1478
129cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
129cc     08 4E 05 F1 | 	add	fp, #8
129d0     A7 1E 02 FB | 	rdlong	local01, fp
129d4     08 4E 85 F1 | 	sub	fp, #8
129d8     1D 1E 0E F2 | 	cmp	local01, #29 wz
129dc     14 4E 05 A1 |  if_e	add	fp, #20
129e0     A7 22 02 AB |  if_e	rdlong	local03, fp
129e4     14 4E 85 A1 |  if_e	sub	fp, #20
129e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
129ec     24 00 90 5D |  if_ne	jmp	#LR__1479
129f0     00 1E 06 F6 | 	mov	local01, #0
129f4     A7 20 02 FB | 	rdlong	local02, fp
129f8     0C 4E 05 F1 | 	add	fp, #12
129fc     A7 22 02 FB | 	rdlong	local03, fp
12a00     0C 4E 85 F1 | 	sub	fp, #12
12a04     11 21 12 F2 | 	cmp	local02, local03 wc
12a08     01 1E 66 36 |  if_ae	neg	local01, #1
12a0c     A7 1E 62 FC | 	wrlong	local01, fp
12a10     10 01 90 FD | 	jmp	#LR__1483
12a14                 | LR__1479
12a14                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
12a14     08 4E 05 F1 | 	add	fp, #8
12a18     A7 1E 02 FB | 	rdlong	local01, fp
12a1c     08 4E 85 F1 | 	sub	fp, #8
12a20     2B 1E 0E F2 | 	cmp	local01, #43 wz
12a24     14 4E 05 A1 |  if_e	add	fp, #20
12a28     A7 22 02 AB |  if_e	rdlong	local03, fp
12a2c     14 4E 85 A1 |  if_e	sub	fp, #20
12a30     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12a34     30 00 90 5D |  if_ne	jmp	#LR__1480
12a38     00 1E 06 F6 | 	mov	local01, #0
12a3c     A7 12 02 FB | 	rdlong	arg01, fp
12a40     8C C2 BF FD | 	call	#_convertstring
12a44     FD 12 02 F6 | 	mov	arg01, result1
12a48     0C 4E 05 F1 | 	add	fp, #12
12a4c     A7 14 02 FB | 	rdlong	arg02, fp
12a50     0C 4E 85 F1 | 	sub	fp, #12
12a54     08 C1 B0 FD | 	call	#__system___string_cmp
12a58     00 FA 55 F2 | 	cmps	result1, #0 wc
12a5c     00 1E 26 36 |  if_ae	not	local01, #0
12a60     A7 1E 62 FC | 	wrlong	local01, fp
12a64     BC 00 90 FD | 	jmp	#LR__1483
12a68                 | LR__1480
12a68                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
12a68     08 4E 05 F1 | 	add	fp, #8
12a6c     A7 1E 02 FB | 	rdlong	local01, fp
12a70     08 4E 85 F1 | 	sub	fp, #8
12a74     1F 1E 0E F2 | 	cmp	local01, #31 wz
12a78     14 4E 05 A1 |  if_e	add	fp, #20
12a7c     A7 22 02 AB |  if_e	rdlong	local03, fp
12a80     14 4E 85 A1 |  if_e	sub	fp, #20
12a84     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12a88     34 00 90 5D |  if_ne	jmp	#LR__1481
12a8c     00 1E 06 F6 | 	mov	local01, #0
12a90     A7 20 02 FB | 	rdlong	local02, fp
12a94     0C 4E 05 F1 | 	add	fp, #12
12a98     A7 12 02 FB | 	rdlong	arg01, fp
12a9c     0C 4E 85 F1 | 	sub	fp, #12
12aa0     2C C2 BF FD | 	call	#_convertstring
12aa4     FD 14 02 F6 | 	mov	arg02, result1
12aa8     10 13 02 F6 | 	mov	arg01, local02
12aac     B0 C0 B0 FD | 	call	#__system___string_cmp
12ab0     00 FA 55 F2 | 	cmps	result1, #0 wc
12ab4     00 1E 26 36 |  if_ae	not	local01, #0
12ab8     A7 1E 62 FC | 	wrlong	local01, fp
12abc     64 00 90 FD | 	jmp	#LR__1483
12ac0                 | LR__1481
12ac0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
12ac0     08 4E 05 F1 | 	add	fp, #8
12ac4     A7 1E 02 FB | 	rdlong	local01, fp
12ac8     08 4E 85 F1 | 	sub	fp, #8
12acc     2B 1E 0E F2 | 	cmp	local01, #43 wz
12ad0     14 4E 05 A1 |  if_e	add	fp, #20
12ad4     A7 22 02 AB |  if_e	rdlong	local03, fp
12ad8     14 4E 85 A1 |  if_e	sub	fp, #20
12adc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12ae0     3C 00 90 5D |  if_ne	jmp	#LR__1482
12ae4     00 1E 06 F6 | 	mov	local01, #0
12ae8     A7 12 02 FB | 	rdlong	arg01, fp
12aec     E0 C1 BF FD | 	call	#_convertstring
12af0     FD 20 02 F6 | 	mov	local02, result1
12af4     0C 4E 05 F1 | 	add	fp, #12
12af8     A7 12 02 FB | 	rdlong	arg01, fp
12afc     0C 4E 85 F1 | 	sub	fp, #12
12b00     CC C1 BF FD | 	call	#_convertstring
12b04     FD 14 02 F6 | 	mov	arg02, result1
12b08     10 13 02 F6 | 	mov	arg01, local02
12b0c     50 C0 B0 FD | 	call	#__system___string_cmp
12b10     00 FA 55 F2 | 	cmps	result1, #0 wc
12b14     00 1E 26 36 |  if_ae	not	local01, #0
12b18     A7 1E 62 FC | 	wrlong	local01, fp
12b1c     04 00 90 FD | 	jmp	#LR__1483
12b20                 | LR__1482
12b20     A7 00 68 FC | 	wrlong	#0, fp
12b24                 | LR__1483
12b24     08 4E 05 F1 | 	add	fp, #8
12b28     A7 38 68 FC | 	wrlong	#28, fp
12b2c     08 4E 85 F1 | 	sub	fp, #8
12b30     A7 12 02 F6 | 	mov	arg01, fp
12b34     C0 7D BF FD | 	call	#_push
12b38     A7 F0 03 F6 | 	mov	ptra, fp
12b3c     B2 00 A0 FD | 	call	#popregs_
12b40                 | _do_ge_ret
12b40     2D 00 64 FD | 	ret
12b44                 | 
12b44                 | ' 
12b44                 | ' sub do_le
12b44                 | _do_le
12b44     05 4A 05 F6 | 	mov	COUNT_, #5
12b48     A8 00 A0 FD | 	call	#pushregs_
12b4c     18 F0 07 F1 | 	add	ptra, #24
12b50     0C 7D BF FD | 	call	#_pop
12b54     FD 1E 02 F6 | 	mov	local01, result1
12b58     FE 20 02 F6 | 	mov	local02, result2
12b5c     FF 22 02 F6 | 	mov	local03, result3
12b60     0C 4E 05 F1 | 	add	fp, #12
12b64     A7 1E 62 FC | 	wrlong	local01, fp
12b68     04 4E 05 F1 | 	add	fp, #4
12b6c     A7 20 62 FC | 	wrlong	local02, fp
12b70     04 4E 05 F1 | 	add	fp, #4
12b74     A7 22 62 FC | 	wrlong	local03, fp
12b78     14 4E 85 F1 | 	sub	fp, #20
12b7c     E0 7C BF FD | 	call	#_pop
12b80     FF 22 02 F6 | 	mov	local03, result3
12b84     A7 FA 61 FC | 	wrlong	result1, fp
12b88     04 4E 05 F1 | 	add	fp, #4
12b8c     A7 FC 61 FC | 	wrlong	result2, fp
12b90     04 4E 05 F1 | 	add	fp, #4
12b94     A7 22 62 FC | 	wrlong	local03, fp
12b98                 | ' t2=pop()
12b98                 | ' t1=pop()
12b98                 | ' 
12b98                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
12b98     08 4E 85 F1 | 	sub	fp, #8
12b9c     1F 22 0E F2 | 	cmp	local03, #31 wz
12ba0     14 4E 05 A1 |  if_e	add	fp, #20
12ba4     A7 24 02 AB |  if_e	rdlong	local04, fp
12ba8     14 4E 85 A1 |  if_e	sub	fp, #20
12bac     12 23 02 A6 |  if_e	mov	local03, local04
12bb0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12bb4     28 00 90 5D |  if_ne	jmp	#LR__1490
12bb8     00 1E 06 F6 | 	mov	local01, #0
12bbc     A7 12 02 FB | 	rdlong	arg01, fp
12bc0     0C 4E 05 F1 | 	add	fp, #12
12bc4     A7 14 02 FB | 	rdlong	arg02, fp
12bc8     0C 4E 85 F1 | 	sub	fp, #12
12bcc     90 BF B0 FD | 	call	#__system___string_cmp
12bd0     01 FA 55 F2 | 	cmps	result1, #1 wc
12bd4     00 1E 26 C6 |  if_b	not	local01, #0
12bd8     A7 1E 62 FC | 	wrlong	local01, fp
12bdc     1C 04 90 FD | 	jmp	#LR__1503
12be0                 | LR__1490
12be0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
12be0     08 4E 05 F1 | 	add	fp, #8
12be4     A7 1E 02 FB | 	rdlong	local01, fp
12be8     08 4E 85 F1 | 	sub	fp, #8
12bec     1E 1E 0E F2 | 	cmp	local01, #30 wz
12bf0     14 4E 05 A1 |  if_e	add	fp, #20
12bf4     A7 24 02 AB |  if_e	rdlong	local04, fp
12bf8     14 4E 85 A1 |  if_e	sub	fp, #20
12bfc     12 23 02 A6 |  if_e	mov	local03, local04
12c00     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12c04     2C 00 90 5D |  if_ne	jmp	#LR__1491
12c08     00 1E 06 F6 | 	mov	local01, #0
12c0c     A7 12 02 FB | 	rdlong	arg01, fp
12c10     0C 4E 05 F1 | 	add	fp, #12
12c14     A7 14 02 FB | 	rdlong	arg02, fp
12c18     0C 4E 85 F1 | 	sub	fp, #12
12c1c     01 16 06 F6 | 	mov	arg03, #1
12c20     C8 EE B0 FD | 	call	#__system___float_cmp
12c24     01 FA 55 F2 | 	cmps	result1, #1 wc
12c28     00 1E 26 C6 |  if_b	not	local01, #0
12c2c     A7 1E 62 FC | 	wrlong	local01, fp
12c30     C8 03 90 FD | 	jmp	#LR__1503
12c34                 | LR__1491
12c34                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
12c34     08 4E 05 F1 | 	add	fp, #8
12c38     A7 1E 02 FB | 	rdlong	local01, fp
12c3c     08 4E 85 F1 | 	sub	fp, #8
12c40     1E 1E 0E F2 | 	cmp	local01, #30 wz
12c44     14 4E 05 A1 |  if_e	add	fp, #20
12c48     A7 24 02 AB |  if_e	rdlong	local04, fp
12c4c     14 4E 85 A1 |  if_e	sub	fp, #20
12c50     12 23 02 A6 |  if_e	mov	local03, local04
12c54     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12c58     48 00 90 5D |  if_ne	jmp	#LR__1492
12c5c     00 1E 06 F6 | 	mov	local01, #0
12c60     A7 20 02 FB | 	rdlong	local02, fp
12c64     0C 4E 05 F1 | 	add	fp, #12
12c68     A7 12 02 FB | 	rdlong	arg01, fp
12c6c     0C 4E 85 F1 | 	sub	fp, #12
12c70     09 13 52 F6 | 	abs	arg01, arg01 wc
12c74     1F 26 C6 C9 |  if_b	decod	local05, #31
12c78     00 26 06 36 |  if_ae	mov	local05, #0
12c7c     34 E6 B0 FD | 	call	#__system___float_fromuns
12c80     13 FB 61 F5 | 	xor	result1, local05
12c84     FD 14 02 F6 | 	mov	arg02, result1
12c88     10 13 02 F6 | 	mov	arg01, local02
12c8c     01 16 06 F6 | 	mov	arg03, #1
12c90     58 EE B0 FD | 	call	#__system___float_cmp
12c94     01 FA 55 F2 | 	cmps	result1, #1 wc
12c98     00 1E 26 C6 |  if_b	not	local01, #0
12c9c     A7 1E 62 FC | 	wrlong	local01, fp
12ca0     58 03 90 FD | 	jmp	#LR__1503
12ca4                 | LR__1492
12ca4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
12ca4     08 4E 05 F1 | 	add	fp, #8
12ca8     A7 1E 02 FB | 	rdlong	local01, fp
12cac     08 4E 85 F1 | 	sub	fp, #8
12cb0     1E 1E 0E F2 | 	cmp	local01, #30 wz
12cb4     14 4E 05 A1 |  if_e	add	fp, #20
12cb8     A7 24 02 AB |  if_e	rdlong	local04, fp
12cbc     14 4E 85 A1 |  if_e	sub	fp, #20
12cc0     12 23 02 A6 |  if_e	mov	local03, local04
12cc4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12cc8     38 00 90 5D |  if_ne	jmp	#LR__1493
12ccc     00 1E 06 F6 | 	mov	local01, #0
12cd0     A7 20 02 FB | 	rdlong	local02, fp
12cd4     0C 4E 05 F1 | 	add	fp, #12
12cd8     A7 12 02 FB | 	rdlong	arg01, fp
12cdc     0C 4E 85 F1 | 	sub	fp, #12
12ce0     D0 E5 B0 FD | 	call	#__system___float_fromuns
12ce4     FD 14 02 F6 | 	mov	arg02, result1
12ce8     10 13 02 F6 | 	mov	arg01, local02
12cec     01 16 06 F6 | 	mov	arg03, #1
12cf0     F8 ED B0 FD | 	call	#__system___float_cmp
12cf4     01 FA 55 F2 | 	cmps	result1, #1 wc
12cf8     00 1E 26 C6 |  if_b	not	local01, #0
12cfc     A7 1E 62 FC | 	wrlong	local01, fp
12d00     F8 02 90 FD | 	jmp	#LR__1503
12d04                 | LR__1493
12d04                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
12d04     08 4E 05 F1 | 	add	fp, #8
12d08     A7 1E 02 FB | 	rdlong	local01, fp
12d0c     08 4E 85 F1 | 	sub	fp, #8
12d10     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d14     14 4E 05 A1 |  if_e	add	fp, #20
12d18     A7 24 02 AB |  if_e	rdlong	local04, fp
12d1c     14 4E 85 A1 |  if_e	sub	fp, #20
12d20     12 23 02 A6 |  if_e	mov	local03, local04
12d24     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12d28     44 00 90 5D |  if_ne	jmp	#LR__1494
12d2c     00 1E 06 F6 | 	mov	local01, #0
12d30     A7 12 02 FB | 	rdlong	arg01, fp
12d34     09 13 52 F6 | 	abs	arg01, arg01 wc
12d38     1F 26 C6 C9 |  if_b	decod	local05, #31
12d3c     00 26 06 36 |  if_ae	mov	local05, #0
12d40     70 E5 B0 FD | 	call	#__system___float_fromuns
12d44     13 FB 61 F5 | 	xor	result1, local05
12d48     FD 12 02 F6 | 	mov	arg01, result1
12d4c     0C 4E 05 F1 | 	add	fp, #12
12d50     A7 14 02 FB | 	rdlong	arg02, fp
12d54     0C 4E 85 F1 | 	sub	fp, #12
12d58     01 16 06 F6 | 	mov	arg03, #1
12d5c     8C ED B0 FD | 	call	#__system___float_cmp
12d60     01 FA 55 F2 | 	cmps	result1, #1 wc
12d64     00 1E 26 C6 |  if_b	not	local01, #0
12d68     A7 1E 62 FC | 	wrlong	local01, fp
12d6c     8C 02 90 FD | 	jmp	#LR__1503
12d70                 | LR__1494
12d70                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
12d70     08 4E 05 F1 | 	add	fp, #8
12d74     A7 1E 02 FB | 	rdlong	local01, fp
12d78     08 4E 85 F1 | 	sub	fp, #8
12d7c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d80     14 4E 05 A1 |  if_e	add	fp, #20
12d84     A7 24 02 AB |  if_e	rdlong	local04, fp
12d88     14 4E 85 A1 |  if_e	sub	fp, #20
12d8c     12 23 02 A6 |  if_e	mov	local03, local04
12d90     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12d94     24 00 90 5D |  if_ne	jmp	#LR__1495
12d98     00 1E 06 F6 | 	mov	local01, #0
12d9c     A7 20 02 FB | 	rdlong	local02, fp
12da0     0C 4E 05 F1 | 	add	fp, #12
12da4     A7 22 02 FB | 	rdlong	local03, fp
12da8     0C 4E 85 F1 | 	sub	fp, #12
12dac     11 21 5A F2 | 	cmps	local02, local03 wcz
12db0     01 1E 66 E6 |  if_be	neg	local01, #1
12db4     A7 1E 62 FC | 	wrlong	local01, fp
12db8     40 02 90 FD | 	jmp	#LR__1503
12dbc                 | LR__1495
12dbc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
12dbc     08 4E 05 F1 | 	add	fp, #8
12dc0     A7 1E 02 FB | 	rdlong	local01, fp
12dc4     08 4E 85 F1 | 	sub	fp, #8
12dc8     1C 1E 0E F2 | 	cmp	local01, #28 wz
12dcc     14 4E 05 A1 |  if_e	add	fp, #20
12dd0     A7 24 02 AB |  if_e	rdlong	local04, fp
12dd4     14 4E 85 A1 |  if_e	sub	fp, #20
12dd8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12ddc     24 00 90 5D |  if_ne	jmp	#LR__1496
12de0     00 1E 06 F6 | 	mov	local01, #0
12de4     A7 20 02 FB | 	rdlong	local02, fp
12de8     0C 4E 05 F1 | 	add	fp, #12
12dec     A7 22 02 FB | 	rdlong	local03, fp
12df0     0C 4E 85 F1 | 	sub	fp, #12
12df4     11 21 5A F2 | 	cmps	local02, local03 wcz
12df8     01 1E 66 E6 |  if_be	neg	local01, #1
12dfc     A7 1E 62 FC | 	wrlong	local01, fp
12e00     F8 01 90 FD | 	jmp	#LR__1503
12e04                 | LR__1496
12e04                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
12e04     08 4E 05 F1 | 	add	fp, #8
12e08     A7 1E 02 FB | 	rdlong	local01, fp
12e0c     08 4E 85 F1 | 	sub	fp, #8
12e10     1D 1E 0E F2 | 	cmp	local01, #29 wz
12e14     14 4E 05 A1 |  if_e	add	fp, #20
12e18     A7 22 02 AB |  if_e	rdlong	local03, fp
12e1c     14 4E 85 A1 |  if_e	sub	fp, #20
12e20     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12e24     34 00 90 5D |  if_ne	jmp	#LR__1497
12e28     00 1E 06 F6 | 	mov	local01, #0
12e2c     A7 12 02 FB | 	rdlong	arg01, fp
12e30     80 E4 B0 FD | 	call	#__system___float_fromuns
12e34     FD 12 02 F6 | 	mov	arg01, result1
12e38     0C 4E 05 F1 | 	add	fp, #12
12e3c     A7 14 02 FB | 	rdlong	arg02, fp
12e40     0C 4E 85 F1 | 	sub	fp, #12
12e44     01 16 06 F6 | 	mov	arg03, #1
12e48     A0 EC B0 FD | 	call	#__system___float_cmp
12e4c     01 FA 55 F2 | 	cmps	result1, #1 wc
12e50     00 1E 26 C6 |  if_b	not	local01, #0
12e54     A7 1E 62 FC | 	wrlong	local01, fp
12e58     A0 01 90 FD | 	jmp	#LR__1503
12e5c                 | LR__1497
12e5c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
12e5c     08 4E 05 F1 | 	add	fp, #8
12e60     A7 1E 02 FB | 	rdlong	local01, fp
12e64     08 4E 85 F1 | 	sub	fp, #8
12e68     1D 1E 0E F2 | 	cmp	local01, #29 wz
12e6c     14 4E 05 A1 |  if_e	add	fp, #20
12e70     A7 22 02 AB |  if_e	rdlong	local03, fp
12e74     14 4E 85 A1 |  if_e	sub	fp, #20
12e78     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12e7c     24 00 90 5D |  if_ne	jmp	#LR__1498
12e80     00 1E 06 F6 | 	mov	local01, #0
12e84     A7 20 02 FB | 	rdlong	local02, fp
12e88     0C 4E 05 F1 | 	add	fp, #12
12e8c     A7 22 02 FB | 	rdlong	local03, fp
12e90     0C 4E 85 F1 | 	sub	fp, #12
12e94     11 21 5A F2 | 	cmps	local02, local03 wcz
12e98     01 1E 66 E6 |  if_be	neg	local01, #1
12e9c     A7 1E 62 FC | 	wrlong	local01, fp
12ea0     58 01 90 FD | 	jmp	#LR__1503
12ea4                 | LR__1498
12ea4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
12ea4     08 4E 05 F1 | 	add	fp, #8
12ea8     A7 1E 02 FB | 	rdlong	local01, fp
12eac     08 4E 85 F1 | 	sub	fp, #8
12eb0     1D 1E 0E F2 | 	cmp	local01, #29 wz
12eb4     14 4E 05 A1 |  if_e	add	fp, #20
12eb8     A7 22 02 AB |  if_e	rdlong	local03, fp
12ebc     14 4E 85 A1 |  if_e	sub	fp, #20
12ec0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12ec4     24 00 90 5D |  if_ne	jmp	#LR__1499
12ec8     00 1E 06 F6 | 	mov	local01, #0
12ecc     A7 20 02 FB | 	rdlong	local02, fp
12ed0     0C 4E 05 F1 | 	add	fp, #12
12ed4     A7 22 02 FB | 	rdlong	local03, fp
12ed8     0C 4E 85 F1 | 	sub	fp, #12
12edc     11 21 1A F2 | 	cmp	local02, local03 wcz
12ee0     01 1E 66 E6 |  if_be	neg	local01, #1
12ee4     A7 1E 62 FC | 	wrlong	local01, fp
12ee8     10 01 90 FD | 	jmp	#LR__1503
12eec                 | LR__1499
12eec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
12eec     08 4E 05 F1 | 	add	fp, #8
12ef0     A7 1E 02 FB | 	rdlong	local01, fp
12ef4     08 4E 85 F1 | 	sub	fp, #8
12ef8     2B 1E 0E F2 | 	cmp	local01, #43 wz
12efc     14 4E 05 A1 |  if_e	add	fp, #20
12f00     A7 22 02 AB |  if_e	rdlong	local03, fp
12f04     14 4E 85 A1 |  if_e	sub	fp, #20
12f08     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12f0c     30 00 90 5D |  if_ne	jmp	#LR__1500
12f10     00 1E 06 F6 | 	mov	local01, #0
12f14     A7 12 02 FB | 	rdlong	arg01, fp
12f18     B4 BD BF FD | 	call	#_convertstring
12f1c     FD 12 02 F6 | 	mov	arg01, result1
12f20     0C 4E 05 F1 | 	add	fp, #12
12f24     A7 14 02 FB | 	rdlong	arg02, fp
12f28     0C 4E 85 F1 | 	sub	fp, #12
12f2c     30 BC B0 FD | 	call	#__system___string_cmp
12f30     01 FA 55 F2 | 	cmps	result1, #1 wc
12f34     00 1E 26 C6 |  if_b	not	local01, #0
12f38     A7 1E 62 FC | 	wrlong	local01, fp
12f3c     BC 00 90 FD | 	jmp	#LR__1503
12f40                 | LR__1500
12f40                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
12f40     08 4E 05 F1 | 	add	fp, #8
12f44     A7 1E 02 FB | 	rdlong	local01, fp
12f48     08 4E 85 F1 | 	sub	fp, #8
12f4c     1F 1E 0E F2 | 	cmp	local01, #31 wz
12f50     14 4E 05 A1 |  if_e	add	fp, #20
12f54     A7 22 02 AB |  if_e	rdlong	local03, fp
12f58     14 4E 85 A1 |  if_e	sub	fp, #20
12f5c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12f60     34 00 90 5D |  if_ne	jmp	#LR__1501
12f64     00 1E 06 F6 | 	mov	local01, #0
12f68     A7 20 02 FB | 	rdlong	local02, fp
12f6c     0C 4E 05 F1 | 	add	fp, #12
12f70     A7 12 02 FB | 	rdlong	arg01, fp
12f74     0C 4E 85 F1 | 	sub	fp, #12
12f78     54 BD BF FD | 	call	#_convertstring
12f7c     FD 14 02 F6 | 	mov	arg02, result1
12f80     10 13 02 F6 | 	mov	arg01, local02
12f84     D8 BB B0 FD | 	call	#__system___string_cmp
12f88     01 FA 55 F2 | 	cmps	result1, #1 wc
12f8c     00 1E 26 C6 |  if_b	not	local01, #0
12f90     A7 1E 62 FC | 	wrlong	local01, fp
12f94     64 00 90 FD | 	jmp	#LR__1503
12f98                 | LR__1501
12f98                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
12f98     08 4E 05 F1 | 	add	fp, #8
12f9c     A7 1E 02 FB | 	rdlong	local01, fp
12fa0     08 4E 85 F1 | 	sub	fp, #8
12fa4     2B 1E 0E F2 | 	cmp	local01, #43 wz
12fa8     14 4E 05 A1 |  if_e	add	fp, #20
12fac     A7 22 02 AB |  if_e	rdlong	local03, fp
12fb0     14 4E 85 A1 |  if_e	sub	fp, #20
12fb4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12fb8     3C 00 90 5D |  if_ne	jmp	#LR__1502
12fbc     00 1E 06 F6 | 	mov	local01, #0
12fc0     A7 12 02 FB | 	rdlong	arg01, fp
12fc4     08 BD BF FD | 	call	#_convertstring
12fc8     FD 20 02 F6 | 	mov	local02, result1
12fcc     0C 4E 05 F1 | 	add	fp, #12
12fd0     A7 12 02 FB | 	rdlong	arg01, fp
12fd4     0C 4E 85 F1 | 	sub	fp, #12
12fd8     F4 BC BF FD | 	call	#_convertstring
12fdc     FD 14 02 F6 | 	mov	arg02, result1
12fe0     10 13 02 F6 | 	mov	arg01, local02
12fe4     78 BB B0 FD | 	call	#__system___string_cmp
12fe8     01 FA 55 F2 | 	cmps	result1, #1 wc
12fec     00 1E 26 C6 |  if_b	not	local01, #0
12ff0     A7 1E 62 FC | 	wrlong	local01, fp
12ff4     04 00 90 FD | 	jmp	#LR__1503
12ff8                 | LR__1502
12ff8     A7 00 68 FC | 	wrlong	#0, fp
12ffc                 | LR__1503
12ffc     08 4E 05 F1 | 	add	fp, #8
13000     A7 38 68 FC | 	wrlong	#28, fp
13004     08 4E 85 F1 | 	sub	fp, #8
13008     A7 12 02 F6 | 	mov	arg01, fp
1300c     E8 78 BF FD | 	call	#_push
13010     A7 F0 03 F6 | 	mov	ptra, fp
13014     B2 00 A0 FD | 	call	#popregs_
13018                 | _do_le_ret
13018     2D 00 64 FD | 	ret
1301c                 | 
1301c                 | ' 
1301c                 | ' 
1301c                 | ' sub do_ne
1301c                 | _do_ne
1301c     05 4A 05 F6 | 	mov	COUNT_, #5
13020     A8 00 A0 FD | 	call	#pushregs_
13024     18 F0 07 F1 | 	add	ptra, #24
13028     34 78 BF FD | 	call	#_pop
1302c     FD 1E 02 F6 | 	mov	local01, result1
13030     FE 20 02 F6 | 	mov	local02, result2
13034     FF 22 02 F6 | 	mov	local03, result3
13038     0C 4E 05 F1 | 	add	fp, #12
1303c     A7 1E 62 FC | 	wrlong	local01, fp
13040     04 4E 05 F1 | 	add	fp, #4
13044     A7 20 62 FC | 	wrlong	local02, fp
13048     04 4E 05 F1 | 	add	fp, #4
1304c     A7 22 62 FC | 	wrlong	local03, fp
13050     14 4E 85 F1 | 	sub	fp, #20
13054     08 78 BF FD | 	call	#_pop
13058     FF 22 02 F6 | 	mov	local03, result3
1305c     A7 FA 61 FC | 	wrlong	result1, fp
13060     04 4E 05 F1 | 	add	fp, #4
13064     A7 FC 61 FC | 	wrlong	result2, fp
13068     04 4E 05 F1 | 	add	fp, #4
1306c     A7 22 62 FC | 	wrlong	local03, fp
13070                 | ' t2=pop()
13070                 | ' t1=pop()
13070                 | ' 
13070                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
13070     08 4E 85 F1 | 	sub	fp, #8
13074     1F 22 0E F2 | 	cmp	local03, #31 wz
13078     14 4E 05 A1 |  if_e	add	fp, #20
1307c     A7 24 02 AB |  if_e	rdlong	local04, fp
13080     14 4E 85 A1 |  if_e	sub	fp, #20
13084     12 23 02 A6 |  if_e	mov	local03, local04
13088     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1308c     28 00 90 5D |  if_ne	jmp	#LR__1510
13090     00 1E 06 F6 | 	mov	local01, #0
13094     A7 12 02 FB | 	rdlong	arg01, fp
13098     0C 4E 05 F1 | 	add	fp, #12
1309c     A7 14 02 FB | 	rdlong	arg02, fp
130a0     0C 4E 85 F1 | 	sub	fp, #12
130a4     B8 BA B0 FD | 	call	#__system___string_cmp
130a8     00 FA 0D F2 | 	cmp	result1, #0 wz
130ac     00 1E 26 56 |  if_ne	not	local01, #0
130b0     A7 1E 62 FC | 	wrlong	local01, fp
130b4     1C 04 90 FD | 	jmp	#LR__1523
130b8                 | LR__1510
130b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
130b8     08 4E 05 F1 | 	add	fp, #8
130bc     A7 1E 02 FB | 	rdlong	local01, fp
130c0     08 4E 85 F1 | 	sub	fp, #8
130c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
130c8     14 4E 05 A1 |  if_e	add	fp, #20
130cc     A7 24 02 AB |  if_e	rdlong	local04, fp
130d0     14 4E 85 A1 |  if_e	sub	fp, #20
130d4     12 23 02 A6 |  if_e	mov	local03, local04
130d8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
130dc     2C 00 90 5D |  if_ne	jmp	#LR__1511
130e0     00 1E 06 F6 | 	mov	local01, #0
130e4     A7 12 02 FB | 	rdlong	arg01, fp
130e8     0C 4E 05 F1 | 	add	fp, #12
130ec     A7 14 02 FB | 	rdlong	arg02, fp
130f0     0C 4E 85 F1 | 	sub	fp, #12
130f4     01 16 06 F6 | 	mov	arg03, #1
130f8     F0 E9 B0 FD | 	call	#__system___float_cmp
130fc     00 FA 0D F2 | 	cmp	result1, #0 wz
13100     00 1E 26 56 |  if_ne	not	local01, #0
13104     A7 1E 62 FC | 	wrlong	local01, fp
13108     C8 03 90 FD | 	jmp	#LR__1523
1310c                 | LR__1511
1310c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1310c     08 4E 05 F1 | 	add	fp, #8
13110     A7 1E 02 FB | 	rdlong	local01, fp
13114     08 4E 85 F1 | 	sub	fp, #8
13118     1E 1E 0E F2 | 	cmp	local01, #30 wz
1311c     14 4E 05 A1 |  if_e	add	fp, #20
13120     A7 24 02 AB |  if_e	rdlong	local04, fp
13124     14 4E 85 A1 |  if_e	sub	fp, #20
13128     12 23 02 A6 |  if_e	mov	local03, local04
1312c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13130     48 00 90 5D |  if_ne	jmp	#LR__1512
13134     00 1E 06 F6 | 	mov	local01, #0
13138     A7 20 02 FB | 	rdlong	local02, fp
1313c     0C 4E 05 F1 | 	add	fp, #12
13140     A7 12 02 FB | 	rdlong	arg01, fp
13144     0C 4E 85 F1 | 	sub	fp, #12
13148     09 13 52 F6 | 	abs	arg01, arg01 wc
1314c     1F 26 C6 C9 |  if_b	decod	local05, #31
13150     00 26 06 36 |  if_ae	mov	local05, #0
13154     5C E1 B0 FD | 	call	#__system___float_fromuns
13158     13 FB 61 F5 | 	xor	result1, local05
1315c     FD 14 02 F6 | 	mov	arg02, result1
13160     10 13 02 F6 | 	mov	arg01, local02
13164     01 16 06 F6 | 	mov	arg03, #1
13168     80 E9 B0 FD | 	call	#__system___float_cmp
1316c     00 FA 0D F2 | 	cmp	result1, #0 wz
13170     00 1E 26 56 |  if_ne	not	local01, #0
13174     A7 1E 62 FC | 	wrlong	local01, fp
13178     58 03 90 FD | 	jmp	#LR__1523
1317c                 | LR__1512
1317c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1317c     08 4E 05 F1 | 	add	fp, #8
13180     A7 1E 02 FB | 	rdlong	local01, fp
13184     08 4E 85 F1 | 	sub	fp, #8
13188     1E 1E 0E F2 | 	cmp	local01, #30 wz
1318c     14 4E 05 A1 |  if_e	add	fp, #20
13190     A7 24 02 AB |  if_e	rdlong	local04, fp
13194     14 4E 85 A1 |  if_e	sub	fp, #20
13198     12 23 02 A6 |  if_e	mov	local03, local04
1319c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
131a0     38 00 90 5D |  if_ne	jmp	#LR__1513
131a4     00 1E 06 F6 | 	mov	local01, #0
131a8     A7 20 02 FB | 	rdlong	local02, fp
131ac     0C 4E 05 F1 | 	add	fp, #12
131b0     A7 12 02 FB | 	rdlong	arg01, fp
131b4     0C 4E 85 F1 | 	sub	fp, #12
131b8     F8 E0 B0 FD | 	call	#__system___float_fromuns
131bc     FD 14 02 F6 | 	mov	arg02, result1
131c0     10 13 02 F6 | 	mov	arg01, local02
131c4     01 16 06 F6 | 	mov	arg03, #1
131c8     20 E9 B0 FD | 	call	#__system___float_cmp
131cc     00 FA 0D F2 | 	cmp	result1, #0 wz
131d0     00 1E 26 56 |  if_ne	not	local01, #0
131d4     A7 1E 62 FC | 	wrlong	local01, fp
131d8     F8 02 90 FD | 	jmp	#LR__1523
131dc                 | LR__1513
131dc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
131dc     08 4E 05 F1 | 	add	fp, #8
131e0     A7 1E 02 FB | 	rdlong	local01, fp
131e4     08 4E 85 F1 | 	sub	fp, #8
131e8     1C 1E 0E F2 | 	cmp	local01, #28 wz
131ec     14 4E 05 A1 |  if_e	add	fp, #20
131f0     A7 24 02 AB |  if_e	rdlong	local04, fp
131f4     14 4E 85 A1 |  if_e	sub	fp, #20
131f8     12 23 02 A6 |  if_e	mov	local03, local04
131fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13200     44 00 90 5D |  if_ne	jmp	#LR__1514
13204     00 1E 06 F6 | 	mov	local01, #0
13208     A7 12 02 FB | 	rdlong	arg01, fp
1320c     09 13 52 F6 | 	abs	arg01, arg01 wc
13210     1F 26 C6 C9 |  if_b	decod	local05, #31
13214     00 26 06 36 |  if_ae	mov	local05, #0
13218     98 E0 B0 FD | 	call	#__system___float_fromuns
1321c     13 FB 61 F5 | 	xor	result1, local05
13220     FD 12 02 F6 | 	mov	arg01, result1
13224     0C 4E 05 F1 | 	add	fp, #12
13228     A7 14 02 FB | 	rdlong	arg02, fp
1322c     0C 4E 85 F1 | 	sub	fp, #12
13230     01 16 06 F6 | 	mov	arg03, #1
13234     B4 E8 B0 FD | 	call	#__system___float_cmp
13238     00 FA 0D F2 | 	cmp	result1, #0 wz
1323c     00 1E 26 56 |  if_ne	not	local01, #0
13240     A7 1E 62 FC | 	wrlong	local01, fp
13244     8C 02 90 FD | 	jmp	#LR__1523
13248                 | LR__1514
13248                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
13248     08 4E 05 F1 | 	add	fp, #8
1324c     A7 1E 02 FB | 	rdlong	local01, fp
13250     08 4E 85 F1 | 	sub	fp, #8
13254     1C 1E 0E F2 | 	cmp	local01, #28 wz
13258     14 4E 05 A1 |  if_e	add	fp, #20
1325c     A7 24 02 AB |  if_e	rdlong	local04, fp
13260     14 4E 85 A1 |  if_e	sub	fp, #20
13264     12 23 02 A6 |  if_e	mov	local03, local04
13268     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1326c     24 00 90 5D |  if_ne	jmp	#LR__1515
13270     00 1E 06 F6 | 	mov	local01, #0
13274     A7 20 02 FB | 	rdlong	local02, fp
13278     0C 4E 05 F1 | 	add	fp, #12
1327c     A7 22 02 FB | 	rdlong	local03, fp
13280     0C 4E 85 F1 | 	sub	fp, #12
13284     11 21 0A F2 | 	cmp	local02, local03 wz
13288     01 1E 66 56 |  if_ne	neg	local01, #1
1328c     A7 1E 62 FC | 	wrlong	local01, fp
13290     40 02 90 FD | 	jmp	#LR__1523
13294                 | LR__1515
13294                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
13294     08 4E 05 F1 | 	add	fp, #8
13298     A7 1E 02 FB | 	rdlong	local01, fp
1329c     08 4E 85 F1 | 	sub	fp, #8
132a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
132a4     14 4E 05 A1 |  if_e	add	fp, #20
132a8     A7 24 02 AB |  if_e	rdlong	local04, fp
132ac     14 4E 85 A1 |  if_e	sub	fp, #20
132b0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
132b4     24 00 90 5D |  if_ne	jmp	#LR__1516
132b8     00 1E 06 F6 | 	mov	local01, #0
132bc     A7 20 02 FB | 	rdlong	local02, fp
132c0     0C 4E 05 F1 | 	add	fp, #12
132c4     A7 22 02 FB | 	rdlong	local03, fp
132c8     0C 4E 85 F1 | 	sub	fp, #12
132cc     11 21 0A F2 | 	cmp	local02, local03 wz
132d0     01 1E 66 56 |  if_ne	neg	local01, #1
132d4     A7 1E 62 FC | 	wrlong	local01, fp
132d8     F8 01 90 FD | 	jmp	#LR__1523
132dc                 | LR__1516
132dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
132dc     08 4E 05 F1 | 	add	fp, #8
132e0     A7 1E 02 FB | 	rdlong	local01, fp
132e4     08 4E 85 F1 | 	sub	fp, #8
132e8     1D 1E 0E F2 | 	cmp	local01, #29 wz
132ec     14 4E 05 A1 |  if_e	add	fp, #20
132f0     A7 22 02 AB |  if_e	rdlong	local03, fp
132f4     14 4E 85 A1 |  if_e	sub	fp, #20
132f8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
132fc     34 00 90 5D |  if_ne	jmp	#LR__1517
13300     00 1E 06 F6 | 	mov	local01, #0
13304     A7 12 02 FB | 	rdlong	arg01, fp
13308     A8 DF B0 FD | 	call	#__system___float_fromuns
1330c     FD 12 02 F6 | 	mov	arg01, result1
13310     0C 4E 05 F1 | 	add	fp, #12
13314     A7 14 02 FB | 	rdlong	arg02, fp
13318     0C 4E 85 F1 | 	sub	fp, #12
1331c     01 16 06 F6 | 	mov	arg03, #1
13320     C8 E7 B0 FD | 	call	#__system___float_cmp
13324     00 FA 0D F2 | 	cmp	result1, #0 wz
13328     00 1E 26 56 |  if_ne	not	local01, #0
1332c     A7 1E 62 FC | 	wrlong	local01, fp
13330     A0 01 90 FD | 	jmp	#LR__1523
13334                 | LR__1517
13334                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
13334     08 4E 05 F1 | 	add	fp, #8
13338     A7 1E 02 FB | 	rdlong	local01, fp
1333c     08 4E 85 F1 | 	sub	fp, #8
13340     1D 1E 0E F2 | 	cmp	local01, #29 wz
13344     14 4E 05 A1 |  if_e	add	fp, #20
13348     A7 22 02 AB |  if_e	rdlong	local03, fp
1334c     14 4E 85 A1 |  if_e	sub	fp, #20
13350     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13354     24 00 90 5D |  if_ne	jmp	#LR__1518
13358     00 1E 06 F6 | 	mov	local01, #0
1335c     A7 20 02 FB | 	rdlong	local02, fp
13360     0C 4E 05 F1 | 	add	fp, #12
13364     A7 22 02 FB | 	rdlong	local03, fp
13368     0C 4E 85 F1 | 	sub	fp, #12
1336c     11 21 0A F2 | 	cmp	local02, local03 wz
13370     01 1E 66 56 |  if_ne	neg	local01, #1
13374     A7 1E 62 FC | 	wrlong	local01, fp
13378     58 01 90 FD | 	jmp	#LR__1523
1337c                 | LR__1518
1337c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1337c     08 4E 05 F1 | 	add	fp, #8
13380     A7 1E 02 FB | 	rdlong	local01, fp
13384     08 4E 85 F1 | 	sub	fp, #8
13388     1D 1E 0E F2 | 	cmp	local01, #29 wz
1338c     14 4E 05 A1 |  if_e	add	fp, #20
13390     A7 22 02 AB |  if_e	rdlong	local03, fp
13394     14 4E 85 A1 |  if_e	sub	fp, #20
13398     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1339c     24 00 90 5D |  if_ne	jmp	#LR__1519
133a0     00 1E 06 F6 | 	mov	local01, #0
133a4     A7 20 02 FB | 	rdlong	local02, fp
133a8     0C 4E 05 F1 | 	add	fp, #12
133ac     A7 22 02 FB | 	rdlong	local03, fp
133b0     0C 4E 85 F1 | 	sub	fp, #12
133b4     11 21 0A F2 | 	cmp	local02, local03 wz
133b8     01 1E 66 56 |  if_ne	neg	local01, #1
133bc     A7 1E 62 FC | 	wrlong	local01, fp
133c0     10 01 90 FD | 	jmp	#LR__1523
133c4                 | LR__1519
133c4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
133c4     08 4E 05 F1 | 	add	fp, #8
133c8     A7 1E 02 FB | 	rdlong	local01, fp
133cc     08 4E 85 F1 | 	sub	fp, #8
133d0     2B 1E 0E F2 | 	cmp	local01, #43 wz
133d4     14 4E 05 A1 |  if_e	add	fp, #20
133d8     A7 22 02 AB |  if_e	rdlong	local03, fp
133dc     14 4E 85 A1 |  if_e	sub	fp, #20
133e0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
133e4     30 00 90 5D |  if_ne	jmp	#LR__1520
133e8     00 1E 06 F6 | 	mov	local01, #0
133ec     A7 12 02 FB | 	rdlong	arg01, fp
133f0     DC B8 BF FD | 	call	#_convertstring
133f4     FD 12 02 F6 | 	mov	arg01, result1
133f8     0C 4E 05 F1 | 	add	fp, #12
133fc     A7 14 02 FB | 	rdlong	arg02, fp
13400     0C 4E 85 F1 | 	sub	fp, #12
13404     58 B7 B0 FD | 	call	#__system___string_cmp
13408     00 FA 0D F2 | 	cmp	result1, #0 wz
1340c     00 1E 26 56 |  if_ne	not	local01, #0
13410     A7 1E 62 FC | 	wrlong	local01, fp
13414     BC 00 90 FD | 	jmp	#LR__1523
13418                 | LR__1520
13418                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
13418     08 4E 05 F1 | 	add	fp, #8
1341c     A7 1E 02 FB | 	rdlong	local01, fp
13420     08 4E 85 F1 | 	sub	fp, #8
13424     1F 1E 0E F2 | 	cmp	local01, #31 wz
13428     14 4E 05 A1 |  if_e	add	fp, #20
1342c     A7 22 02 AB |  if_e	rdlong	local03, fp
13430     14 4E 85 A1 |  if_e	sub	fp, #20
13434     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
13438     34 00 90 5D |  if_ne	jmp	#LR__1521
1343c     00 1E 06 F6 | 	mov	local01, #0
13440     A7 20 02 FB | 	rdlong	local02, fp
13444     0C 4E 05 F1 | 	add	fp, #12
13448     A7 12 02 FB | 	rdlong	arg01, fp
1344c     0C 4E 85 F1 | 	sub	fp, #12
13450     7C B8 BF FD | 	call	#_convertstring
13454     FD 14 02 F6 | 	mov	arg02, result1
13458     10 13 02 F6 | 	mov	arg01, local02
1345c     00 B7 B0 FD | 	call	#__system___string_cmp
13460     00 FA 0D F2 | 	cmp	result1, #0 wz
13464     00 1E 26 56 |  if_ne	not	local01, #0
13468     A7 1E 62 FC | 	wrlong	local01, fp
1346c     64 00 90 FD | 	jmp	#LR__1523
13470                 | LR__1521
13470                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
13470     08 4E 05 F1 | 	add	fp, #8
13474     A7 1E 02 FB | 	rdlong	local01, fp
13478     08 4E 85 F1 | 	sub	fp, #8
1347c     2B 1E 0E F2 | 	cmp	local01, #43 wz
13480     14 4E 05 A1 |  if_e	add	fp, #20
13484     A7 22 02 AB |  if_e	rdlong	local03, fp
13488     14 4E 85 A1 |  if_e	sub	fp, #20
1348c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
13490     3C 00 90 5D |  if_ne	jmp	#LR__1522
13494     00 1E 06 F6 | 	mov	local01, #0
13498     A7 12 02 FB | 	rdlong	arg01, fp
1349c     30 B8 BF FD | 	call	#_convertstring
134a0     FD 20 02 F6 | 	mov	local02, result1
134a4     0C 4E 05 F1 | 	add	fp, #12
134a8     A7 12 02 FB | 	rdlong	arg01, fp
134ac     0C 4E 85 F1 | 	sub	fp, #12
134b0     1C B8 BF FD | 	call	#_convertstring
134b4     FD 14 02 F6 | 	mov	arg02, result1
134b8     10 13 02 F6 | 	mov	arg01, local02
134bc     A0 B6 B0 FD | 	call	#__system___string_cmp
134c0     00 FA 0D F2 | 	cmp	result1, #0 wz
134c4     00 1E 26 56 |  if_ne	not	local01, #0
134c8     A7 1E 62 FC | 	wrlong	local01, fp
134cc     04 00 90 FD | 	jmp	#LR__1523
134d0                 | LR__1522
134d0     A7 00 68 FC | 	wrlong	#0, fp
134d4                 | LR__1523
134d4     08 4E 05 F1 | 	add	fp, #8
134d8     A7 38 68 FC | 	wrlong	#28, fp
134dc     08 4E 85 F1 | 	sub	fp, #8
134e0     A7 12 02 F6 | 	mov	arg01, fp
134e4     10 74 BF FD | 	call	#_push
134e8     A7 F0 03 F6 | 	mov	ptra, fp
134ec     B2 00 A0 FD | 	call	#popregs_
134f0                 | _do_ne_ret
134f0     2D 00 64 FD | 	ret
134f4                 | 
134f4                 | ' 
134f4                 | ' 
134f4                 | ' 
134f4                 | ' ' -------------------   convert a variable on the top of stack to integer
134f4                 | ' 
134f4                 | ' 'sub do_converttoint'
134f4                 | ' 
134f4                 | ' 'dim t1 as expr_result 
134f4                 | ' 'dim a1,r as integer
134f4                 | ' 't1=pop() 
134f4                 | ' 'select case t1.result_type
134f4                 | ' '  case result_int: a1=t1.result.iresult : r=result_int
134f4                 | ' '  case result_uint: a1=t1.result.uresult : r=result_int
134f4                 | ' '  case result_float: a1=round(t1.result.fresult) : r=result_int
134f4                 | ' '  case result_string: a1=val(t1.result.sresult) :r=result_int
134f4                 | ' '  case result_string2: a1=val(convertstring(t1.result.uresult)) :r=result_int
134f4                 | ' '  case result_error: a1=0: r=t1.result.uresult
134f4                 | ' '  case else : a1=0 : r=1
134f4                 | ' 
134f4                 | ' 'end select
134f4                 | ' 't1.result.iresult=a1 : t1.result_type=r : push t1 
134f4                 | ' 
134f4                 | ' 'end sub
134f4                 | ' 
134f4                 | ' function converttoint (t1 as expr_result) as integer
134f4                 | _converttoint
134f4     02 4A 05 F6 | 	mov	COUNT_, #2
134f8     A8 00 A0 FD | 	call	#pushregs_
134fc     09 1F 02 F6 | 	mov	local01, arg01
13500                 | ' 
13500                 | ' select case t1.result_type
13500     08 1E 06 F1 | 	add	local01, #8
13504     0F 21 02 FB | 	rdlong	local02, local01
13508     08 1E 86 F1 | 	sub	local01, #8
1350c     1C 20 0E F2 | 	cmp	local02, #28 wz
13510     24 00 90 AD |  if_e	jmp	#LR__1530
13514     1D 20 0E F2 | 	cmp	local02, #29 wz
13518     24 00 90 AD |  if_e	jmp	#LR__1531
1351c     1E 20 0E F2 | 	cmp	local02, #30 wz
13520     24 00 90 AD |  if_e	jmp	#LR__1532
13524     1F 20 0E F2 | 	cmp	local02, #31 wz
13528     2C 00 90 AD |  if_e	jmp	#LR__1533
1352c     2B 20 0E F2 | 	cmp	local02, #43 wz
13530     3C 00 90 AD |  if_e	jmp	#LR__1534
13534     58 00 90 FD | 	jmp	#LR__1535
13538                 | LR__1530
13538     0F FB 01 FB | 	rdlong	result1, local01
1353c     54 00 90 FD | 	jmp	#LR__1536
13540                 | LR__1531
13540     0F FB 01 FB | 	rdlong	result1, local01
13544     4C 00 90 FD | 	jmp	#LR__1536
13548                 | LR__1532
13548     0F 13 02 FB | 	rdlong	arg01, local01
1354c     01 14 06 F6 | 	mov	arg02, #1
13550     2C E6 B0 FD | 	call	#__system___float_tointeger
13554     3C 00 90 FD | 	jmp	#LR__1536
13558                 | LR__1533
13558     0F 13 02 FB | 	rdlong	arg01, local01
1355c     40 E9 B0 FD | 	call	#__system____builtin_atof
13560     FD 12 02 F6 | 	mov	arg01, result1
13564     00 14 06 F6 | 	mov	arg02, #0
13568     14 E6 B0 FD | 	call	#__system___float_tointeger
1356c     24 00 90 FD | 	jmp	#LR__1536
13570                 | LR__1534
13570     0F 13 02 FB | 	rdlong	arg01, local01
13574     58 B7 BF FD | 	call	#_convertstring
13578     FD 12 02 F6 | 	mov	arg01, result1
1357c     20 E9 B0 FD | 	call	#__system____builtin_atof
13580     FD 12 02 F6 | 	mov	arg01, result1
13584     00 14 06 F6 | 	mov	arg02, #0
13588     F4 E5 B0 FD | 	call	#__system___float_tointeger
1358c     04 00 90 FD | 	jmp	#LR__1536
13590                 | LR__1535
13590     00 FA 05 F6 | 	mov	result1, #0
13594                 | LR__1536
13594     A7 F0 03 F6 | 	mov	ptra, fp
13598     B2 00 A0 FD | 	call	#popregs_
1359c                 | _converttoint_ret
1359c     2D 00 64 FD | 	ret
135a0                 | 
135a0                 | ' 
135a0                 | ' function converttofloat (t1 as expr_result) as single
135a0                 | _converttofloat
135a0     03 4A 05 F6 | 	mov	COUNT_, #3
135a4     A8 00 A0 FD | 	call	#pushregs_
135a8     09 1F 02 F6 | 	mov	local01, arg01
135ac                 | ' 
135ac                 | ' select case t1.result_type
135ac     08 1E 06 F1 | 	add	local01, #8
135b0     0F 21 02 FB | 	rdlong	local02, local01
135b4     08 1E 86 F1 | 	sub	local01, #8
135b8     1C 20 0E F2 | 	cmp	local02, #28 wz
135bc     24 00 90 AD |  if_e	jmp	#LR__1540
135c0     1D 20 0E F2 | 	cmp	local02, #29 wz
135c4     38 00 90 AD |  if_e	jmp	#LR__1541
135c8     1E 20 0E F2 | 	cmp	local02, #30 wz
135cc     3C 00 90 AD |  if_e	jmp	#LR__1542
135d0     1F 20 0E F2 | 	cmp	local02, #31 wz
135d4     3C 00 90 AD |  if_e	jmp	#LR__1543
135d8     2B 20 0E F2 | 	cmp	local02, #43 wz
135dc     40 00 90 AD |  if_e	jmp	#LR__1544
135e0     50 00 90 FD | 	jmp	#LR__1545
135e4                 | LR__1540
135e4     0F 13 02 FB | 	rdlong	arg01, local01
135e8     09 13 52 F6 | 	abs	arg01, arg01 wc
135ec     1F 22 C6 C9 |  if_b	decod	local03, #31
135f0     00 22 06 36 |  if_ae	mov	local03, #0
135f4     BC DC B0 FD | 	call	#__system___float_fromuns
135f8     11 FB 61 F5 | 	xor	result1, local03
135fc     38 00 90 FD | 	jmp	#LR__1546
13600                 | LR__1541
13600     0F 13 02 FB | 	rdlong	arg01, local01
13604     AC DC B0 FD | 	call	#__system___float_fromuns
13608     2C 00 90 FD | 	jmp	#LR__1546
1360c                 | LR__1542
1360c     0F FB 01 FB | 	rdlong	result1, local01
13610     24 00 90 FD | 	jmp	#LR__1546
13614                 | LR__1543
13614     0F 13 02 FB | 	rdlong	arg01, local01
13618     84 E8 B0 FD | 	call	#__system____builtin_atof
1361c     18 00 90 FD | 	jmp	#LR__1546
13620                 | LR__1544
13620     0F 13 02 FB | 	rdlong	arg01, local01
13624     A8 B6 BF FD | 	call	#_convertstring
13628     FD 12 02 F6 | 	mov	arg01, result1
1362c     70 E8 B0 FD | 	call	#__system____builtin_atof
13630     04 00 90 FD | 	jmp	#LR__1546
13634                 | LR__1545
13634     00 FA 05 F6 | 	mov	result1, #0
13638                 | LR__1546
13638     A7 F0 03 F6 | 	mov	ptra, fp
1363c     B2 00 A0 FD | 	call	#popregs_
13640                 | _converttofloat_ret
13640     2D 00 64 FD | 	ret
13644                 | 
13644                 | ' 
13644                 | ' sub do_rnd
13644                 | _do_rnd
13644     01 4A 05 F6 | 	mov	COUNT_, #1
13648     A8 00 A0 FD | 	call	#pushregs_
1364c     10 F0 07 F1 | 	add	ptra, #16
13650     6A 00 00 FF 
13654     80 E4 05 F1 | 	add	objptr, ##54400
13658     F2 1E 02 FB | 	rdlong	local01, objptr
1365c     0F 17 02 F6 | 	mov	arg03, local01
13660     01 16 66 F0 | 	shl	arg03, #1
13664     0F 17 02 F1 | 	add	arg03, local01
13668     02 16 66 F0 | 	shl	arg03, #2
1366c     03 00 00 FF 
13670     04 E4 85 F1 | 	sub	objptr, ##1540
13674     F2 16 02 F1 | 	add	arg03, objptr
13678     0B 17 02 FB | 	rdlong	arg03, arg03
1367c     0C 4E 05 F1 | 	add	fp, #12
13680     A7 16 62 FC | 	wrlong	arg03, fp
13684                 | ' 
13684                 | ' numpar=compiledline(lineptr_e).result.uresult
13684                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
13684     0C 4E 85 F1 | 	sub	fp, #12
13688     02 16 16 F2 | 	cmp	arg03, #2 wc
1368c     67 00 00 FF 
13690     7C E4 85 F1 | 	sub	objptr, ##52860
13694     3C 00 90 CD |  if_b	jmp	#LR__1550
13698     00 12 06 F6 | 	mov	arg01, #0
1369c     30 0E B1 FD | 	call	#__system___getiolock_0484
136a0     FD 12 02 F6 | 	mov	arg01, result1
136a4     90 B4 B0 FD | 	call	#__system___lockmem
136a8     73 01 00 FF 
136ac     94 15 06 F6 | 	mov	arg02, ##@LR__5151
136b0     00 12 06 F6 | 	mov	arg01, #0
136b4     00 16 06 F6 | 	mov	arg03, #0
136b8     84 C1 B0 FD | 	call	#__system___basic_print_string
136bc     00 12 06 F6 | 	mov	arg01, #0
136c0     0C 0E B1 FD | 	call	#__system___getiolock_0484
136c4     FD 00 68 FC | 	wrlong	#0, result1
136c8     27 12 06 F6 | 	mov	arg01, #39
136cc     08 70 B0 FD | 	call	#_printerror
136d0     2C 01 90 FD | 	jmp	#LR__1557
136d4                 | LR__1550
136d4                 | ' if numpar=0 then
136d4     0C 4E 05 F1 | 	add	fp, #12
136d8     A7 FE 09 FB | 	rdlong	result3, fp wz
136dc     0C 4E 85 F1 | 	sub	fp, #12
136e0     20 00 90 5D |  if_ne	jmp	#LR__1551
136e4     08 4E 05 F1 | 	add	fp, #8
136e8     A7 3A 68 FC | 	wrlong	#29, fp
136ec     08 4E 85 F1 | 	sub	fp, #8
136f0     1B FA 61 FD | 	getrnd	result1
136f4     A7 FA 61 FC | 	wrlong	result1, fp
136f8     A7 12 02 F6 | 	mov	arg01, fp
136fc     F8 71 BF FD | 	call	#_push
13700     FC 00 90 FD | 	jmp	#LR__1556
13704                 | LR__1551
13704     58 71 BF FD | 	call	#_pop
13708     A7 FA 61 FC | 	wrlong	result1, fp
1370c     04 4E 05 F1 | 	add	fp, #4
13710     A7 FC 61 FC | 	wrlong	result2, fp
13714     04 4E 05 F1 | 	add	fp, #4
13718     A7 FE 61 FC | 	wrlong	result3, fp
1371c                 | '   t1=pop()
1371c                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1371c     08 4E 85 F1 | 	sub	fp, #8
13720     1C FE 0D F2 | 	cmp	result3, #28 wz
13724     08 4E 05 51 |  if_ne	add	fp, #8
13728     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1372c     08 4E 85 51 |  if_ne	sub	fp, #8
13730     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13734     2C 00 90 5D |  if_ne	jmp	#LR__1552
13738     1B FA 61 FD | 	getrnd	result1
1373c     A7 1E 02 FB | 	rdlong	local01, fp
13740     0F FB 11 FD | 	qdiv	result1, local01
13744     A7 12 02 F6 | 	mov	arg01, fp
13748     19 1E 62 FD | 	getqy	local01
1374c     A7 1E 62 FC | 	wrlong	local01, fp
13750     08 4E 05 F1 | 	add	fp, #8
13754     A7 3A 68 FC | 	wrlong	#29, fp
13758     08 4E 85 F1 | 	sub	fp, #8
1375c     98 71 BF FD | 	call	#_push
13760     9C 00 90 FD | 	jmp	#LR__1555
13764                 | LR__1552
13764     08 4E 05 F1 | 	add	fp, #8
13768     A7 1E 02 FB | 	rdlong	local01, fp
1376c     08 4E 85 F1 | 	sub	fp, #8
13770     1E 1E 0E F2 | 	cmp	local01, #30 wz
13774     48 00 90 5D |  if_ne	jmp	#LR__1553
13778     A7 12 02 FB | 	rdlong	arg01, fp
1377c     00 C0 24 FF 
13780     00 14 06 F6 | 	mov	arg02, ##1233125376
13784     34 E1 B0 FD | 	call	#__system___float_div
13788     FD 1E 02 F6 | 	mov	local01, result1
1378c     1B 12 62 FD | 	getrnd	arg01
13790     74 13 06 F4 | 	bitl	arg01, #372
13794     1C DB B0 FD | 	call	#__system___float_fromuns
13798     FD 14 02 F6 | 	mov	arg02, result1
1379c     0F 13 02 F6 | 	mov	arg01, local01
137a0     14 DF B0 FD | 	call	#__system___float_mul
137a4     A7 FA 61 FC | 	wrlong	result1, fp
137a8     08 4E 05 F1 | 	add	fp, #8
137ac     A7 3C 68 FC | 	wrlong	#30, fp
137b0     08 4E 85 F1 | 	sub	fp, #8
137b4     A7 12 02 F6 | 	mov	arg01, fp
137b8     3C 71 BF FD | 	call	#_push
137bc     40 00 90 FD | 	jmp	#LR__1554
137c0                 | LR__1553
137c0                 | '     print "rnd: "; : printerror(40) 
137c0     00 12 06 F6 | 	mov	arg01, #0
137c4     08 0D B1 FD | 	call	#__system___getiolock_0484
137c8     FD 12 02 F6 | 	mov	arg01, result1
137cc     68 B3 B0 FD | 	call	#__system___lockmem
137d0     73 01 00 FF 
137d4     9A 15 06 F6 | 	mov	arg02, ##@LR__5152
137d8     00 12 06 F6 | 	mov	arg01, #0
137dc     00 16 06 F6 | 	mov	arg03, #0
137e0     5C C0 B0 FD | 	call	#__system___basic_print_string
137e4     00 12 06 F6 | 	mov	arg01, #0
137e8     E4 0C B1 FD | 	call	#__system___getiolock_0484
137ec     FD 00 68 FC | 	wrlong	#0, result1
137f0     28 12 06 F6 | 	mov	arg01, #40
137f4     E0 6E B0 FD | 	call	#_printerror
137f8     A7 12 02 F6 | 	mov	arg01, fp
137fc     F8 70 BF FD | 	call	#_push
13800                 | LR__1554
13800                 | LR__1555
13800                 | LR__1556
13800                 | LR__1557
13800     A7 F0 03 F6 | 	mov	ptra, fp
13804     B2 00 A0 FD | 	call	#popregs_
13808                 | _do_rnd_ret
13808     2D 00 64 FD | 	ret
1380c                 | 
1380c                 | ' 
1380c                 | ' sub do_getenvsustain
1380c                 | _do_getenvsustain
1380c     01 4A 05 F6 | 	mov	COUNT_, #1
13810     A8 00 A0 FD | 	call	#pushregs_
13814     10 F0 07 F1 | 	add	ptra, #16
13818     6A 00 00 FF 
1381c     80 E4 05 F1 | 	add	objptr, ##54400
13820     F2 1E 02 FB | 	rdlong	local01, objptr
13824     0F 17 02 F6 | 	mov	arg03, local01
13828     01 16 66 F0 | 	shl	arg03, #1
1382c     0F 17 02 F1 | 	add	arg03, local01
13830     02 16 66 F0 | 	shl	arg03, #2
13834     03 00 00 FF 
13838     04 E4 85 F1 | 	sub	objptr, ##1540
1383c     F2 16 02 F1 | 	add	arg03, objptr
13840     0B 17 02 FB | 	rdlong	arg03, arg03
13844     0C 4E 05 F1 | 	add	fp, #12
13848     A7 16 62 FC | 	wrlong	arg03, fp
1384c                 | ' 
1384c                 | ' numpar=compiledline(lineptr_e).result.uresult
1384c                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
1384c     0C 4E 85 F1 | 	sub	fp, #12
13850     02 16 16 F2 | 	cmp	arg03, #2 wc
13854     67 00 00 FF 
13858     7C E4 85 F1 | 	sub	objptr, ##52860
1385c     0C 4E 05 C1 |  if_b	add	fp, #12
13860     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13864     0C 4E 85 C1 |  if_b	sub	fp, #12
13868     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1560
1386c     00 12 06 F6 | 	mov	arg01, #0
13870     5C 0C B1 FD | 	call	#__system___getiolock_0484
13874     FD 12 02 F6 | 	mov	arg01, result1
13878     BC B2 B0 FD | 	call	#__system___lockmem
1387c     73 01 00 FF 
13880     A0 15 06 F6 | 	mov	arg02, ##@LR__5153
13884     00 12 06 F6 | 	mov	arg01, #0
13888     00 16 06 F6 | 	mov	arg03, #0
1388c     B0 BF B0 FD | 	call	#__system___basic_print_string
13890     00 12 06 F6 | 	mov	arg01, #0
13894     38 0C B1 FD | 	call	#__system___getiolock_0484
13898     FD 00 68 FC | 	wrlong	#0, result1
1389c     27 12 06 F6 | 	mov	arg01, #39
138a0     34 6E B0 FD | 	call	#_printerror
138a4     64 00 90 FD | 	jmp	#LR__1561
138a8                 | LR__1560
138a8     B4 6F BF FD | 	call	#_pop
138ac     FD 1E 02 F6 | 	mov	local01, result1
138b0     FE 16 02 F6 | 	mov	arg03, result2
138b4     A7 1E 62 FC | 	wrlong	local01, fp
138b8     04 4E 05 F1 | 	add	fp, #4
138bc     A7 16 62 FC | 	wrlong	arg03, fp
138c0     04 4E 05 F1 | 	add	fp, #4
138c4     A7 FE 61 FC | 	wrlong	result3, fp
138c8     08 4E 85 F1 | 	sub	fp, #8
138cc     A7 12 02 F6 | 	mov	arg01, fp
138d0     20 FC BF FD | 	call	#_converttoint
138d4     FD 1E 02 F6 | 	mov	local01, result1
138d8     01 1E 66 F0 | 	shl	local01, #1
138dc     79 00 00 FF 
138e0     A4 E5 05 F1 | 	add	objptr, ##62372
138e4     F2 1E 02 F1 | 	add	local01, objptr
138e8     0F 1F E2 FA | 	rdword	local01, local01
138ec     A7 1E 62 FC | 	wrlong	local01, fp
138f0     08 4E 05 F1 | 	add	fp, #8
138f4     A7 38 68 FC | 	wrlong	#28, fp
138f8     08 4E 85 F1 | 	sub	fp, #8
138fc     A7 12 02 F6 | 	mov	arg01, fp
13900     79 00 00 FF 
13904     A4 E5 85 F1 | 	sub	objptr, ##62372
13908     EC 6F BF FD | 	call	#_push
1390c                 | LR__1561
1390c     A7 F0 03 F6 | 	mov	ptra, fp
13910     B2 00 A0 FD | 	call	#popregs_
13914                 | _do_getenvsustain_ret
13914     2D 00 64 FD | 	ret
13918                 | 
13918                 | ' 
13918                 | ' sub do_sin
13918                 | _do_sin
13918     01 4A 05 F6 | 	mov	COUNT_, #1
1391c     A8 00 A0 FD | 	call	#pushregs_
13920     10 F0 07 F1 | 	add	ptra, #16
13924     6A 00 00 FF 
13928     80 E4 05 F1 | 	add	objptr, ##54400
1392c     F2 1E 02 FB | 	rdlong	local01, objptr
13930     0F 17 02 F6 | 	mov	arg03, local01
13934     01 16 66 F0 | 	shl	arg03, #1
13938     0F 17 02 F1 | 	add	arg03, local01
1393c     02 16 66 F0 | 	shl	arg03, #2
13940     03 00 00 FF 
13944     04 E4 85 F1 | 	sub	objptr, ##1540
13948     F2 16 02 F1 | 	add	arg03, objptr
1394c     0B 17 02 FB | 	rdlong	arg03, arg03
13950     0C 4E 05 F1 | 	add	fp, #12
13954     A7 16 62 FC | 	wrlong	arg03, fp
13958                 | ' 
13958                 | ' numpar=compiledline(lineptr_e).result.uresult
13958                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
13958     0C 4E 85 F1 | 	sub	fp, #12
1395c     02 16 16 F2 | 	cmp	arg03, #2 wc
13960     67 00 00 FF 
13964     7C E4 85 F1 | 	sub	objptr, ##52860
13968     0C 4E 05 C1 |  if_b	add	fp, #12
1396c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13970     0C 4E 85 C1 |  if_b	sub	fp, #12
13974     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1570
13978     00 12 06 F6 | 	mov	arg01, #0
1397c     50 0B B1 FD | 	call	#__system___getiolock_0484
13980     FD 12 02 F6 | 	mov	arg01, result1
13984     B0 B1 B0 FD | 	call	#__system___lockmem
13988     73 01 00 FF 
1398c     B0 15 06 F6 | 	mov	arg02, ##@LR__5154
13990     00 12 06 F6 | 	mov	arg01, #0
13994     00 16 06 F6 | 	mov	arg03, #0
13998     A4 BE B0 FD | 	call	#__system___basic_print_string
1399c     00 12 06 F6 | 	mov	arg01, #0
139a0     2C 0B B1 FD | 	call	#__system___getiolock_0484
139a4     FD 00 68 FC | 	wrlong	#0, result1
139a8     27 12 06 F6 | 	mov	arg01, #39
139ac     28 6D B0 FD | 	call	#_printerror
139b0     64 00 90 FD | 	jmp	#LR__1571
139b4                 | LR__1570
139b4     A8 6E BF FD | 	call	#_pop
139b8     A7 FA 61 FC | 	wrlong	result1, fp
139bc     04 4E 05 F1 | 	add	fp, #4
139c0     A7 FC 61 FC | 	wrlong	result2, fp
139c4     04 4E 05 F1 | 	add	fp, #4
139c8     A7 FE 61 FC | 	wrlong	result3, fp
139cc     08 4E 85 F1 | 	sub	fp, #8
139d0     79 00 00 FF 
139d4     98 E5 05 F1 | 	add	objptr, ##62360
139d8     F2 1E 02 FB | 	rdlong	local01, objptr
139dc     79 00 00 FF 
139e0     98 E5 85 F1 | 	sub	objptr, ##62360
139e4     A7 12 02 F6 | 	mov	arg01, fp
139e8     B4 FB BF FD | 	call	#_converttofloat
139ec     FD 14 02 F6 | 	mov	arg02, result1
139f0     0F 13 02 F6 | 	mov	arg01, local01
139f4     C0 DC B0 FD | 	call	#__system___float_mul
139f8     FD 12 02 F6 | 	mov	arg01, result1
139fc     F4 E5 B0 FD | 	call	#__system____builtin_sinf
13a00     A7 FA 61 FC | 	wrlong	result1, fp
13a04     08 4E 05 F1 | 	add	fp, #8
13a08     A7 3C 68 FC | 	wrlong	#30, fp
13a0c     08 4E 85 F1 | 	sub	fp, #8
13a10     A7 12 02 F6 | 	mov	arg01, fp
13a14     E0 6E BF FD | 	call	#_push
13a18                 | LR__1571
13a18     A7 F0 03 F6 | 	mov	ptra, fp
13a1c     B2 00 A0 FD | 	call	#popregs_
13a20                 | _do_sin_ret
13a20     2D 00 64 FD | 	ret
13a24                 | 
13a24                 | ' 
13a24                 | ' 
13a24                 | ' sub do_mid
13a24                 | _do_mid
13a24     00 4A 05 F6 | 	mov	COUNT_, #0
13a28     A8 00 A0 FD | 	call	#pushregs_
13a2c     18 F0 07 F1 | 	add	ptra, #24
13a30     6A 00 00 FF 
13a34     80 E4 05 F1 | 	add	objptr, ##54400
13a38     F2 16 02 FB | 	rdlong	arg03, objptr
13a3c     0B 15 02 F6 | 	mov	arg02, arg03
13a40     01 14 66 F0 | 	shl	arg02, #1
13a44     0B 15 02 F1 | 	add	arg02, arg03
13a48     02 14 66 F0 | 	shl	arg02, #2
13a4c     03 00 00 FF 
13a50     04 E4 85 F1 | 	sub	objptr, ##1540
13a54     F2 14 02 F1 | 	add	arg02, objptr
13a58     0A 17 02 FB | 	rdlong	arg03, arg02
13a5c     0C 4E 05 F1 | 	add	fp, #12
13a60     A7 16 62 FC | 	wrlong	arg03, fp
13a64                 | ' 
13a64                 | ' numpar=compiledline(lineptr_e).result.uresult
13a64                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
13a64     0C 4E 85 F1 | 	sub	fp, #12
13a68     03 16 0E F2 | 	cmp	arg03, #3 wz
13a6c     67 00 00 FF 
13a70     7C E4 85 F1 | 	sub	objptr, ##52860
13a74     3C 00 90 AD |  if_e	jmp	#LR__1580
13a78     00 12 06 F6 | 	mov	arg01, #0
13a7c     50 0A B1 FD | 	call	#__system___getiolock_0484
13a80     FD 12 02 F6 | 	mov	arg01, result1
13a84     B0 B0 B0 FD | 	call	#__system___lockmem
13a88     73 01 00 FF 
13a8c     B6 15 06 F6 | 	mov	arg02, ##@LR__5155
13a90     00 12 06 F6 | 	mov	arg01, #0
13a94     00 16 06 F6 | 	mov	arg03, #0
13a98     A4 BD B0 FD | 	call	#__system___basic_print_string
13a9c     00 12 06 F6 | 	mov	arg01, #0
13aa0     2C 0A B1 FD | 	call	#__system___getiolock_0484
13aa4     FD 00 68 FC | 	wrlong	#0, result1
13aa8     27 12 06 F6 | 	mov	arg01, #39
13aac     28 6C B0 FD | 	call	#_printerror
13ab0     28 01 90 FD | 	jmp	#LR__1583
13ab4                 | LR__1580
13ab4     A8 6D BF FD | 	call	#_pop
13ab8     FF 16 02 F6 | 	mov	arg03, result3
13abc     A7 FA 61 FC | 	wrlong	result1, fp
13ac0     04 4E 05 F1 | 	add	fp, #4
13ac4     A7 FC 61 FC | 	wrlong	result2, fp
13ac8     04 4E 05 F1 | 	add	fp, #4
13acc     A7 16 62 FC | 	wrlong	arg03, fp
13ad0     08 4E 85 F1 | 	sub	fp, #8
13ad4     A7 12 02 F6 | 	mov	arg01, fp
13ad8     18 FA BF FD | 	call	#_converttoint
13adc     FD 16 02 F6 | 	mov	arg03, result1
13ae0     14 4E 05 F1 | 	add	fp, #20
13ae4     A7 16 62 FC | 	wrlong	arg03, fp
13ae8     14 4E 85 F1 | 	sub	fp, #20
13aec     70 6D BF FD | 	call	#_pop
13af0     FF 16 02 F6 | 	mov	arg03, result3
13af4     A7 FA 61 FC | 	wrlong	result1, fp
13af8     04 4E 05 F1 | 	add	fp, #4
13afc     A7 FC 61 FC | 	wrlong	result2, fp
13b00     04 4E 05 F1 | 	add	fp, #4
13b04     A7 16 62 FC | 	wrlong	arg03, fp
13b08     08 4E 85 F1 | 	sub	fp, #8
13b0c     A7 12 02 F6 | 	mov	arg01, fp
13b10     E0 F9 BF FD | 	call	#_converttoint
13b14     FD 16 02 F6 | 	mov	arg03, result1
13b18     10 4E 05 F1 | 	add	fp, #16
13b1c     A7 16 62 FC | 	wrlong	arg03, fp
13b20     10 4E 85 F1 | 	sub	fp, #16
13b24     38 6D BF FD | 	call	#_pop
13b28     FF 16 02 F6 | 	mov	arg03, result3
13b2c     A7 FA 61 FC | 	wrlong	result1, fp
13b30     04 4E 05 F1 | 	add	fp, #4
13b34     A7 FC 61 FC | 	wrlong	result2, fp
13b38     04 4E 05 F1 | 	add	fp, #4
13b3c     A7 16 62 FC | 	wrlong	arg03, fp
13b40                 | ' t1=pop() : arg2=converttoint(t1)
13b40                 | ' t1=pop() : arg1=converttoint(t1)
13b40                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13b40     08 4E 85 F1 | 	sub	fp, #8
13b44     2B 16 0E F2 | 	cmp	arg03, #43 wz
13b48     18 00 90 5D |  if_ne	jmp	#LR__1581
13b4c     A7 12 02 FB | 	rdlong	arg01, fp
13b50     7C B1 BF FD | 	call	#_convertstring
13b54     A7 FA 61 FC | 	wrlong	result1, fp
13b58     08 4E 05 F1 | 	add	fp, #8
13b5c     A7 3E 68 FC | 	wrlong	#31, fp
13b60     08 4E 85 F1 | 	sub	fp, #8
13b64                 | LR__1581
13b64                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
13b64     08 4E 05 F1 | 	add	fp, #8
13b68     A7 16 02 FB | 	rdlong	arg03, fp
13b6c     08 4E 85 F1 | 	sub	fp, #8
13b70     1F 16 0E F2 | 	cmp	arg03, #31 wz
13b74     3C 00 90 AD |  if_e	jmp	#LR__1582
13b78     00 12 06 F6 | 	mov	arg01, #0
13b7c     50 09 B1 FD | 	call	#__system___getiolock_0484
13b80     FD 12 02 F6 | 	mov	arg01, result1
13b84     B0 AF B0 FD | 	call	#__system___lockmem
13b88     73 01 00 FF 
13b8c     BD 15 06 F6 | 	mov	arg02, ##@LR__5156
13b90     00 12 06 F6 | 	mov	arg01, #0
13b94     00 16 06 F6 | 	mov	arg03, #0
13b98     A4 BC B0 FD | 	call	#__system___basic_print_string
13b9c     00 12 06 F6 | 	mov	arg01, #0
13ba0     2C 09 B1 FD | 	call	#__system___getiolock_0484
13ba4     FD 00 68 FC | 	wrlong	#0, result1
13ba8     0F 12 06 F6 | 	mov	arg01, #15
13bac     28 6B B0 FD | 	call	#_printerror
13bb0     28 00 90 FD | 	jmp	#LR__1583
13bb4                 | LR__1582
13bb4     A7 12 02 FB | 	rdlong	arg01, fp
13bb8     10 4E 05 F1 | 	add	fp, #16
13bbc     A7 14 02 FB | 	rdlong	arg02, fp
13bc0     04 4E 05 F1 | 	add	fp, #4
13bc4     A7 16 02 FB | 	rdlong	arg03, fp
13bc8     14 4E 85 F1 | 	sub	fp, #20
13bcc     C8 D0 B0 FD | 	call	#__system__Mid_S
13bd0     A7 FA 61 FC | 	wrlong	result1, fp
13bd4     A7 12 02 F6 | 	mov	arg01, fp
13bd8     1C 6D BF FD | 	call	#_push
13bdc                 | LR__1583
13bdc     A7 F0 03 F6 | 	mov	ptra, fp
13be0     B2 00 A0 FD | 	call	#popregs_
13be4                 | _do_mid_ret
13be4     2D 00 64 FD | 	ret
13be8                 | 
13be8                 | ' 
13be8                 | ' sub do_right
13be8                 | _do_right
13be8     00 4A 05 F6 | 	mov	COUNT_, #0
13bec     A8 00 A0 FD | 	call	#pushregs_
13bf0     14 F0 07 F1 | 	add	ptra, #20
13bf4     6A 00 00 FF 
13bf8     80 E4 05 F1 | 	add	objptr, ##54400
13bfc     F2 16 02 FB | 	rdlong	arg03, objptr
13c00     0B 15 02 F6 | 	mov	arg02, arg03
13c04     01 14 66 F0 | 	shl	arg02, #1
13c08     0B 15 02 F1 | 	add	arg02, arg03
13c0c     02 14 66 F0 | 	shl	arg02, #2
13c10     03 00 00 FF 
13c14     04 E4 85 F1 | 	sub	objptr, ##1540
13c18     F2 14 02 F1 | 	add	arg02, objptr
13c1c     0A 17 02 FB | 	rdlong	arg03, arg02
13c20     0C 4E 05 F1 | 	add	fp, #12
13c24     A7 16 62 FC | 	wrlong	arg03, fp
13c28                 | ' 
13c28                 | ' numpar=compiledline(lineptr_e).result.uresult
13c28                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
13c28     0C 4E 85 F1 | 	sub	fp, #12
13c2c     02 16 0E F2 | 	cmp	arg03, #2 wz
13c30     67 00 00 FF 
13c34     7C E4 85 F1 | 	sub	objptr, ##52860
13c38     3C 00 90 AD |  if_e	jmp	#LR__1590
13c3c     00 12 06 F6 | 	mov	arg01, #0
13c40     8C 08 B1 FD | 	call	#__system___getiolock_0484
13c44     FD 12 02 F6 | 	mov	arg01, result1
13c48     EC AE B0 FD | 	call	#__system___lockmem
13c4c     73 01 00 FF 
13c50     C4 15 06 F6 | 	mov	arg02, ##@LR__5157
13c54     00 12 06 F6 | 	mov	arg01, #0
13c58     00 16 06 F6 | 	mov	arg03, #0
13c5c     E0 BB B0 FD | 	call	#__system___basic_print_string
13c60     00 12 06 F6 | 	mov	arg01, #0
13c64     68 08 B1 FD | 	call	#__system___getiolock_0484
13c68     FD 00 68 FC | 	wrlong	#0, result1
13c6c     27 12 06 F6 | 	mov	arg01, #39
13c70     64 6A B0 FD | 	call	#_printerror
13c74     E8 00 90 FD | 	jmp	#LR__1593
13c78                 | LR__1590
13c78     E4 6B BF FD | 	call	#_pop
13c7c     FF 16 02 F6 | 	mov	arg03, result3
13c80     A7 FA 61 FC | 	wrlong	result1, fp
13c84     04 4E 05 F1 | 	add	fp, #4
13c88     A7 FC 61 FC | 	wrlong	result2, fp
13c8c     04 4E 05 F1 | 	add	fp, #4
13c90     A7 16 62 FC | 	wrlong	arg03, fp
13c94     08 4E 85 F1 | 	sub	fp, #8
13c98     A7 12 02 F6 | 	mov	arg01, fp
13c9c     54 F8 BF FD | 	call	#_converttoint
13ca0     FD 16 02 F6 | 	mov	arg03, result1
13ca4     10 4E 05 F1 | 	add	fp, #16
13ca8     A7 16 62 FC | 	wrlong	arg03, fp
13cac     10 4E 85 F1 | 	sub	fp, #16
13cb0     AC 6B BF FD | 	call	#_pop
13cb4     FF 16 02 F6 | 	mov	arg03, result3
13cb8     A7 FA 61 FC | 	wrlong	result1, fp
13cbc     04 4E 05 F1 | 	add	fp, #4
13cc0     A7 FC 61 FC | 	wrlong	result2, fp
13cc4     04 4E 05 F1 | 	add	fp, #4
13cc8     A7 16 62 FC | 	wrlong	arg03, fp
13ccc                 | ' t1=pop() : arg=converttoint(t1)
13ccc                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13ccc     08 4E 85 F1 | 	sub	fp, #8
13cd0     2B 16 0E F2 | 	cmp	arg03, #43 wz
13cd4     18 00 90 5D |  if_ne	jmp	#LR__1591
13cd8     A7 12 02 FB | 	rdlong	arg01, fp
13cdc     F0 AF BF FD | 	call	#_convertstring
13ce0     A7 FA 61 FC | 	wrlong	result1, fp
13ce4     08 4E 05 F1 | 	add	fp, #8
13ce8     A7 3E 68 FC | 	wrlong	#31, fp
13cec     08 4E 85 F1 | 	sub	fp, #8
13cf0                 | LR__1591
13cf0                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
13cf0     08 4E 05 F1 | 	add	fp, #8
13cf4     A7 16 02 FB | 	rdlong	arg03, fp
13cf8     08 4E 85 F1 | 	sub	fp, #8
13cfc     1F 16 0E F2 | 	cmp	arg03, #31 wz
13d00     3C 00 90 AD |  if_e	jmp	#LR__1592
13d04     00 12 06 F6 | 	mov	arg01, #0
13d08     C4 07 B1 FD | 	call	#__system___getiolock_0484
13d0c     FD 12 02 F6 | 	mov	arg01, result1
13d10     24 AE B0 FD | 	call	#__system___lockmem
13d14     73 01 00 FF 
13d18     CD 15 06 F6 | 	mov	arg02, ##@LR__5158
13d1c     00 12 06 F6 | 	mov	arg01, #0
13d20     00 16 06 F6 | 	mov	arg03, #0
13d24     18 BB B0 FD | 	call	#__system___basic_print_string
13d28     00 12 06 F6 | 	mov	arg01, #0
13d2c     A0 07 B1 FD | 	call	#__system___getiolock_0484
13d30     FD 00 68 FC | 	wrlong	#0, result1
13d34     0F 12 06 F6 | 	mov	arg01, #15
13d38     9C 69 B0 FD | 	call	#_printerror
13d3c     20 00 90 FD | 	jmp	#LR__1593
13d40                 | LR__1592
13d40     A7 12 02 FB | 	rdlong	arg01, fp
13d44     10 4E 05 F1 | 	add	fp, #16
13d48     A7 14 02 FB | 	rdlong	arg02, fp
13d4c     10 4E 85 F1 | 	sub	fp, #16
13d50     B4 CE B0 FD | 	call	#__system__Right_S
13d54     A7 FA 61 FC | 	wrlong	result1, fp
13d58     A7 12 02 F6 | 	mov	arg01, fp
13d5c     98 6B BF FD | 	call	#_push
13d60                 | LR__1593
13d60     A7 F0 03 F6 | 	mov	ptra, fp
13d64     B2 00 A0 FD | 	call	#popregs_
13d68                 | _do_right_ret
13d68     2D 00 64 FD | 	ret
13d6c                 | 
13d6c                 | ' 
13d6c                 | ' sub do_left
13d6c                 | _do_left
13d6c     00 4A 05 F6 | 	mov	COUNT_, #0
13d70     A8 00 A0 FD | 	call	#pushregs_
13d74     14 F0 07 F1 | 	add	ptra, #20
13d78     6A 00 00 FF 
13d7c     80 E4 05 F1 | 	add	objptr, ##54400
13d80     F2 16 02 FB | 	rdlong	arg03, objptr
13d84     0B 15 02 F6 | 	mov	arg02, arg03
13d88     01 14 66 F0 | 	shl	arg02, #1
13d8c     0B 15 02 F1 | 	add	arg02, arg03
13d90     02 14 66 F0 | 	shl	arg02, #2
13d94     03 00 00 FF 
13d98     04 E4 85 F1 | 	sub	objptr, ##1540
13d9c     F2 14 02 F1 | 	add	arg02, objptr
13da0     0A 17 02 FB | 	rdlong	arg03, arg02
13da4     0C 4E 05 F1 | 	add	fp, #12
13da8     A7 16 62 FC | 	wrlong	arg03, fp
13dac                 | ' 
13dac                 | ' numpar=compiledline(lineptr_e).result.uresult
13dac                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
13dac     0C 4E 85 F1 | 	sub	fp, #12
13db0     02 16 0E F2 | 	cmp	arg03, #2 wz
13db4     67 00 00 FF 
13db8     7C E4 85 F1 | 	sub	objptr, ##52860
13dbc     3C 00 90 AD |  if_e	jmp	#LR__1600
13dc0     00 12 06 F6 | 	mov	arg01, #0
13dc4     08 07 B1 FD | 	call	#__system___getiolock_0484
13dc8     FD 12 02 F6 | 	mov	arg01, result1
13dcc     68 AD B0 FD | 	call	#__system___lockmem
13dd0     73 01 00 FF 
13dd4     D6 15 06 F6 | 	mov	arg02, ##@LR__5159
13dd8     00 12 06 F6 | 	mov	arg01, #0
13ddc     00 16 06 F6 | 	mov	arg03, #0
13de0     5C BA B0 FD | 	call	#__system___basic_print_string
13de4     00 12 06 F6 | 	mov	arg01, #0
13de8     E4 06 B1 FD | 	call	#__system___getiolock_0484
13dec     FD 00 68 FC | 	wrlong	#0, result1
13df0     27 12 06 F6 | 	mov	arg01, #39
13df4     E0 68 B0 FD | 	call	#_printerror
13df8     E8 00 90 FD | 	jmp	#LR__1603
13dfc                 | LR__1600
13dfc     60 6A BF FD | 	call	#_pop
13e00     FF 16 02 F6 | 	mov	arg03, result3
13e04     A7 FA 61 FC | 	wrlong	result1, fp
13e08     04 4E 05 F1 | 	add	fp, #4
13e0c     A7 FC 61 FC | 	wrlong	result2, fp
13e10     04 4E 05 F1 | 	add	fp, #4
13e14     A7 16 62 FC | 	wrlong	arg03, fp
13e18     08 4E 85 F1 | 	sub	fp, #8
13e1c     A7 12 02 F6 | 	mov	arg01, fp
13e20     D0 F6 BF FD | 	call	#_converttoint
13e24     FD 16 02 F6 | 	mov	arg03, result1
13e28     10 4E 05 F1 | 	add	fp, #16
13e2c     A7 16 62 FC | 	wrlong	arg03, fp
13e30     10 4E 85 F1 | 	sub	fp, #16
13e34     28 6A BF FD | 	call	#_pop
13e38     FF 16 02 F6 | 	mov	arg03, result3
13e3c     A7 FA 61 FC | 	wrlong	result1, fp
13e40     04 4E 05 F1 | 	add	fp, #4
13e44     A7 FC 61 FC | 	wrlong	result2, fp
13e48     04 4E 05 F1 | 	add	fp, #4
13e4c     A7 16 62 FC | 	wrlong	arg03, fp
13e50                 | ' t1=pop() : arg=converttoint(t1)
13e50                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13e50     08 4E 85 F1 | 	sub	fp, #8
13e54     2B 16 0E F2 | 	cmp	arg03, #43 wz
13e58     18 00 90 5D |  if_ne	jmp	#LR__1601
13e5c     A7 12 02 FB | 	rdlong	arg01, fp
13e60     6C AE BF FD | 	call	#_convertstring
13e64     A7 FA 61 FC | 	wrlong	result1, fp
13e68     08 4E 05 F1 | 	add	fp, #8
13e6c     A7 3E 68 FC | 	wrlong	#31, fp
13e70     08 4E 85 F1 | 	sub	fp, #8
13e74                 | LR__1601
13e74                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
13e74     08 4E 05 F1 | 	add	fp, #8
13e78     A7 16 02 FB | 	rdlong	arg03, fp
13e7c     08 4E 85 F1 | 	sub	fp, #8
13e80     1F 16 0E F2 | 	cmp	arg03, #31 wz
13e84     3C 00 90 AD |  if_e	jmp	#LR__1602
13e88     00 12 06 F6 | 	mov	arg01, #0
13e8c     40 06 B1 FD | 	call	#__system___getiolock_0484
13e90     FD 12 02 F6 | 	mov	arg01, result1
13e94     A0 AC B0 FD | 	call	#__system___lockmem
13e98     73 01 00 FF 
13e9c     DE 15 06 F6 | 	mov	arg02, ##@LR__5160
13ea0     00 12 06 F6 | 	mov	arg01, #0
13ea4     00 16 06 F6 | 	mov	arg03, #0
13ea8     94 B9 B0 FD | 	call	#__system___basic_print_string
13eac     00 12 06 F6 | 	mov	arg01, #0
13eb0     1C 06 B1 FD | 	call	#__system___getiolock_0484
13eb4     FD 00 68 FC | 	wrlong	#0, result1
13eb8     0F 12 06 F6 | 	mov	arg01, #15
13ebc     18 68 B0 FD | 	call	#_printerror
13ec0     20 00 90 FD | 	jmp	#LR__1603
13ec4                 | LR__1602
13ec4     A7 12 02 FB | 	rdlong	arg01, fp
13ec8     10 4E 05 F1 | 	add	fp, #16
13ecc     A7 14 02 FB | 	rdlong	arg02, fp
13ed0     10 4E 85 F1 | 	sub	fp, #16
13ed4     A8 CC B0 FD | 	call	#__system__Left_S
13ed8     A7 FA 61 FC | 	wrlong	result1, fp
13edc     A7 12 02 F6 | 	mov	arg01, fp
13ee0     14 6A BF FD | 	call	#_push
13ee4                 | LR__1603
13ee4     A7 F0 03 F6 | 	mov	ptra, fp
13ee8     B2 00 A0 FD | 	call	#popregs_
13eec                 | _do_left_ret
13eec     2D 00 64 FD | 	ret
13ef0                 | 
13ef0                 | ' 
13ef0                 | ' sub do_asc
13ef0                 | _do_asc
13ef0     01 4A 05 F6 | 	mov	COUNT_, #1
13ef4     A8 00 A0 FD | 	call	#pushregs_
13ef8     14 F0 07 F1 | 	add	ptra, #20
13efc     6A 00 00 FF 
13f00     80 E4 05 F1 | 	add	objptr, ##54400
13f04     F2 1E 02 FB | 	rdlong	local01, objptr
13f08     0F 17 02 F6 | 	mov	arg03, local01
13f0c     01 16 66 F0 | 	shl	arg03, #1
13f10     0F 17 02 F1 | 	add	arg03, local01
13f14     02 16 66 F0 | 	shl	arg03, #2
13f18     03 00 00 FF 
13f1c     04 E4 85 F1 | 	sub	objptr, ##1540
13f20     F2 16 02 F1 | 	add	arg03, objptr
13f24     0B 17 02 FB | 	rdlong	arg03, arg03
13f28     0C 4E 05 F1 | 	add	fp, #12
13f2c     A7 16 62 FC | 	wrlong	arg03, fp
13f30                 | ' 
13f30                 | ' numpar=compiledline(lineptr_e).result.uresult
13f30                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
13f30     0C 4E 85 F1 | 	sub	fp, #12
13f34     02 16 16 F2 | 	cmp	arg03, #2 wc
13f38     67 00 00 FF 
13f3c     7C E4 85 F1 | 	sub	objptr, ##52860
13f40     0C 4E 05 C1 |  if_b	add	fp, #12
13f44     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13f48     0C 4E 85 C1 |  if_b	sub	fp, #12
13f4c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1610
13f50     00 12 06 F6 | 	mov	arg01, #0
13f54     78 05 B1 FD | 	call	#__system___getiolock_0484
13f58     FD 12 02 F6 | 	mov	arg01, result1
13f5c     D8 AB B0 FD | 	call	#__system___lockmem
13f60     73 01 00 FF 
13f64     E6 15 06 F6 | 	mov	arg02, ##@LR__5161
13f68     00 12 06 F6 | 	mov	arg01, #0
13f6c     00 16 06 F6 | 	mov	arg03, #0
13f70     CC B8 B0 FD | 	call	#__system___basic_print_string
13f74     00 12 06 F6 | 	mov	arg01, #0
13f78     54 05 B1 FD | 	call	#__system___getiolock_0484
13f7c     FD 00 68 FC | 	wrlong	#0, result1
13f80     27 12 06 F6 | 	mov	arg01, #39
13f84     50 67 B0 FD | 	call	#_printerror
13f88     B0 00 90 FD | 	jmp	#LR__1613
13f8c                 | LR__1610
13f8c     D0 68 BF FD | 	call	#_pop
13f90     FF 16 02 F6 | 	mov	arg03, result3
13f94     A7 FA 61 FC | 	wrlong	result1, fp
13f98     04 4E 05 F1 | 	add	fp, #4
13f9c     A7 FC 61 FC | 	wrlong	result2, fp
13fa0     04 4E 05 F1 | 	add	fp, #4
13fa4     A7 16 62 FC | 	wrlong	arg03, fp
13fa8                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13fa8     08 4E 85 F1 | 	sub	fp, #8
13fac     2B 16 0E F2 | 	cmp	arg03, #43 wz
13fb0     18 00 90 5D |  if_ne	jmp	#LR__1611
13fb4     A7 12 02 FB | 	rdlong	arg01, fp
13fb8     14 AD BF FD | 	call	#_convertstring
13fbc     A7 FA 61 FC | 	wrlong	result1, fp
13fc0     08 4E 05 F1 | 	add	fp, #8
13fc4     A7 3E 68 FC | 	wrlong	#31, fp
13fc8     08 4E 85 F1 | 	sub	fp, #8
13fcc                 | LR__1611
13fcc                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
13fcc     08 4E 05 F1 | 	add	fp, #8
13fd0     A7 16 02 FB | 	rdlong	arg03, fp
13fd4     08 4E 85 F1 | 	sub	fp, #8
13fd8     1F 16 0E F2 | 	cmp	arg03, #31 wz
13fdc     3C 00 90 AD |  if_e	jmp	#LR__1612
13fe0     00 12 06 F6 | 	mov	arg01, #0
13fe4     E8 04 B1 FD | 	call	#__system___getiolock_0484
13fe8     FD 12 02 F6 | 	mov	arg01, result1
13fec     48 AB B0 FD | 	call	#__system___lockmem
13ff0     73 01 00 FF 
13ff4     EC 15 06 F6 | 	mov	arg02, ##@LR__5162
13ff8     00 12 06 F6 | 	mov	arg01, #0
13ffc     00 16 06 F6 | 	mov	arg03, #0
14000     3C B8 B0 FD | 	call	#__system___basic_print_string
14004     00 12 06 F6 | 	mov	arg01, #0
14008     C4 04 B1 FD | 	call	#__system___getiolock_0484
1400c     FD 00 68 FC | 	wrlong	#0, result1
14010     0F 12 06 F6 | 	mov	arg01, #15
14014     C0 66 B0 FD | 	call	#_printerror
14018     20 00 90 FD | 	jmp	#LR__1613
1401c                 | LR__1612
1401c     A7 1E 02 FB | 	rdlong	local01, fp
14020     0F 1F C2 FA | 	rdbyte	local01, local01
14024     A7 1E 62 FC | 	wrlong	local01, fp
14028     08 4E 05 F1 | 	add	fp, #8
1402c     A7 38 68 FC | 	wrlong	#28, fp
14030     08 4E 85 F1 | 	sub	fp, #8
14034     A7 12 02 F6 | 	mov	arg01, fp
14038     BC 68 BF FD | 	call	#_push
1403c                 | LR__1613
1403c     A7 F0 03 F6 | 	mov	ptra, fp
14040     B2 00 A0 FD | 	call	#popregs_
14044                 | _do_asc_ret
14044     2D 00 64 FD | 	ret
14048                 | 
14048                 | ' 
14048                 | ' sub do_len
14048                 | _do_len
14048     02 4A 05 F6 | 	mov	COUNT_, #2
1404c     A8 00 A0 FD | 	call	#pushregs_
14050     14 F0 07 F1 | 	add	ptra, #20
14054     6A 00 00 FF 
14058     80 E4 05 F1 | 	add	objptr, ##54400
1405c     F2 1E 02 FB | 	rdlong	local01, objptr
14060     0F 17 02 F6 | 	mov	arg03, local01
14064     01 16 66 F0 | 	shl	arg03, #1
14068     0F 17 02 F1 | 	add	arg03, local01
1406c     02 16 66 F0 | 	shl	arg03, #2
14070     03 00 00 FF 
14074     04 E4 85 F1 | 	sub	objptr, ##1540
14078     F2 16 02 F1 | 	add	arg03, objptr
1407c     0B 17 02 FB | 	rdlong	arg03, arg03
14080     0C 4E 05 F1 | 	add	fp, #12
14084     A7 16 62 FC | 	wrlong	arg03, fp
14088                 | ' 
14088                 | ' numpar=compiledline(lineptr_e).result.uresult
14088                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
14088     0C 4E 85 F1 | 	sub	fp, #12
1408c     02 16 16 F2 | 	cmp	arg03, #2 wc
14090     67 00 00 FF 
14094     7C E4 85 F1 | 	sub	objptr, ##52860
14098     0C 4E 05 C1 |  if_b	add	fp, #12
1409c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
140a0     0C 4E 85 C1 |  if_b	sub	fp, #12
140a4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1620
140a8     00 12 06 F6 | 	mov	arg01, #0
140ac     20 04 B1 FD | 	call	#__system___getiolock_0484
140b0     FD 12 02 F6 | 	mov	arg01, result1
140b4     80 AA B0 FD | 	call	#__system___lockmem
140b8     73 01 00 FF 
140bc     F2 15 06 F6 | 	mov	arg02, ##@LR__5163
140c0     00 12 06 F6 | 	mov	arg01, #0
140c4     00 16 06 F6 | 	mov	arg03, #0
140c8     74 B7 B0 FD | 	call	#__system___basic_print_string
140cc     00 12 06 F6 | 	mov	arg01, #0
140d0     FC 03 B1 FD | 	call	#__system___getiolock_0484
140d4     FD 00 68 FC | 	wrlong	#0, result1
140d8     27 12 06 F6 | 	mov	arg01, #39
140dc     F8 65 B0 FD | 	call	#_printerror
140e0     C4 00 90 FD | 	jmp	#LR__1625
140e4                 | LR__1620
140e4     78 67 BF FD | 	call	#_pop
140e8     FF 16 02 F6 | 	mov	arg03, result3
140ec     A7 FA 61 FC | 	wrlong	result1, fp
140f0     04 4E 05 F1 | 	add	fp, #4
140f4     A7 FC 61 FC | 	wrlong	result2, fp
140f8     04 4E 05 F1 | 	add	fp, #4
140fc     A7 16 62 FC | 	wrlong	arg03, fp
14100                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14100     08 4E 85 F1 | 	sub	fp, #8
14104     2B 16 0E F2 | 	cmp	arg03, #43 wz
14108     18 00 90 5D |  if_ne	jmp	#LR__1621
1410c     A7 12 02 FB | 	rdlong	arg01, fp
14110     BC AB BF FD | 	call	#_convertstring
14114     A7 FA 61 FC | 	wrlong	result1, fp
14118     08 4E 05 F1 | 	add	fp, #8
1411c     A7 3E 68 FC | 	wrlong	#31, fp
14120     08 4E 85 F1 | 	sub	fp, #8
14124                 | LR__1621
14124                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
14124     08 4E 05 F1 | 	add	fp, #8
14128     A7 16 02 FB | 	rdlong	arg03, fp
1412c     08 4E 85 F1 | 	sub	fp, #8
14130     1F 16 0E F2 | 	cmp	arg03, #31 wz
14134     3C 00 90 AD |  if_e	jmp	#LR__1622
14138     00 12 06 F6 | 	mov	arg01, #0
1413c     90 03 B1 FD | 	call	#__system___getiolock_0484
14140     FD 12 02 F6 | 	mov	arg01, result1
14144     F0 A9 B0 FD | 	call	#__system___lockmem
14148     73 01 00 FF 
1414c     F8 15 06 F6 | 	mov	arg02, ##@LR__5164
14150     00 12 06 F6 | 	mov	arg01, #0
14154     00 16 06 F6 | 	mov	arg03, #0
14158     E4 B6 B0 FD | 	call	#__system___basic_print_string
1415c     00 12 06 F6 | 	mov	arg01, #0
14160     6C 03 B1 FD | 	call	#__system___getiolock_0484
14164     FD 00 68 FC | 	wrlong	#0, result1
14168     0F 12 06 F6 | 	mov	arg01, #15
1416c     68 65 B0 FD | 	call	#_printerror
14170     34 00 90 FD | 	jmp	#LR__1625
14174                 | LR__1622
14174     A7 12 02 FB | 	rdlong	arg01, fp
14178     09 21 02 F6 | 	mov	local02, arg01
1417c     97 06 48 FB | 	callpa	#(@LR__1624-@LR__1623)>>2,fcache_load_ptr_
14180                 | LR__1623
14180     10 FB C9 FA | 	rdbyte	result1, local02 wz
14184     01 20 06 51 |  if_ne	add	local02, #1
14188     F4 FF 9F 5D |  if_ne	jmp	#LR__1623
1418c                 | LR__1624
1418c     09 21 82 F1 | 	sub	local02, arg01
14190     A7 20 62 FC | 	wrlong	local02, fp
14194     08 4E 05 F1 | 	add	fp, #8
14198     A7 38 68 FC | 	wrlong	#28, fp
1419c     08 4E 85 F1 | 	sub	fp, #8
141a0     A7 12 02 F6 | 	mov	arg01, fp
141a4     50 67 BF FD | 	call	#_push
141a8                 | LR__1625
141a8     A7 F0 03 F6 | 	mov	ptra, fp
141ac     B2 00 A0 FD | 	call	#popregs_
141b0                 | _do_len_ret
141b0     2D 00 64 FD | 	ret
141b4                 | 
141b4                 | ' 
141b4                 | ' sub do_chr
141b4                 | _do_chr
141b4     01 4A 05 F6 | 	mov	COUNT_, #1
141b8     A8 00 A0 FD | 	call	#pushregs_
141bc     14 F0 07 F1 | 	add	ptra, #20
141c0     6A 00 00 FF 
141c4     80 E4 05 F1 | 	add	objptr, ##54400
141c8     F2 1E 02 FB | 	rdlong	local01, objptr
141cc     0F 17 02 F6 | 	mov	arg03, local01
141d0     01 16 66 F0 | 	shl	arg03, #1
141d4     0F 17 02 F1 | 	add	arg03, local01
141d8     02 16 66 F0 | 	shl	arg03, #2
141dc     03 00 00 FF 
141e0     04 E4 85 F1 | 	sub	objptr, ##1540
141e4     F2 16 02 F1 | 	add	arg03, objptr
141e8     0B 17 02 FB | 	rdlong	arg03, arg03
141ec     0C 4E 05 F1 | 	add	fp, #12
141f0     A7 16 62 FC | 	wrlong	arg03, fp
141f4                 | ' 
141f4                 | ' numpar=compiledline(lineptr_e).result.uresult
141f4                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
141f4     0C 4E 85 F1 | 	sub	fp, #12
141f8     02 16 16 F2 | 	cmp	arg03, #2 wc
141fc     67 00 00 FF 
14200     7C E4 85 F1 | 	sub	objptr, ##52860
14204     0C 4E 05 C1 |  if_b	add	fp, #12
14208     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1420c     0C 4E 85 C1 |  if_b	sub	fp, #12
14210     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1630
14214     00 12 06 F6 | 	mov	arg01, #0
14218     B4 02 B1 FD | 	call	#__system___getiolock_0484
1421c     FD 12 02 F6 | 	mov	arg01, result1
14220     14 A9 B0 FD | 	call	#__system___lockmem
14224     73 01 00 FF 
14228     FE 15 06 F6 | 	mov	arg02, ##@LR__5165
1422c     00 12 06 F6 | 	mov	arg01, #0
14230     00 16 06 F6 | 	mov	arg03, #0
14234     08 B6 B0 FD | 	call	#__system___basic_print_string
14238     00 12 06 F6 | 	mov	arg01, #0
1423c     90 02 B1 FD | 	call	#__system___getiolock_0484
14240     FD 00 68 FC | 	wrlong	#0, result1
14244     27 12 06 F6 | 	mov	arg01, #39
14248     8C 64 B0 FD | 	call	#_printerror
1424c     54 00 90 FD | 	jmp	#LR__1631
14250                 | LR__1630
14250     0C 66 BF FD | 	call	#_pop
14254     FF 1E 02 F6 | 	mov	local01, result3
14258     A7 FA 61 FC | 	wrlong	result1, fp
1425c     04 4E 05 F1 | 	add	fp, #4
14260     A7 FC 61 FC | 	wrlong	result2, fp
14264     04 4E 05 F1 | 	add	fp, #4
14268     A7 1E 62 FC | 	wrlong	local01, fp
1426c     08 4E 85 F1 | 	sub	fp, #8
14270     A7 12 02 F6 | 	mov	arg01, fp
14274     7C F2 BF FD | 	call	#_converttoint
14278     10 4E 05 F1 | 	add	fp, #16
1427c     A7 FA 61 FC | 	wrlong	result1, fp
14280     FD 12 02 F6 | 	mov	arg01, result1
14284     10 4E 85 F1 | 	sub	fp, #16
14288     B8 CA B0 FD | 	call	#__system__Chr_S
1428c     A7 FA 61 FC | 	wrlong	result1, fp
14290     08 4E 05 F1 | 	add	fp, #8
14294     A7 3E 68 FC | 	wrlong	#31, fp
14298     08 4E 85 F1 | 	sub	fp, #8
1429c     A7 12 02 F6 | 	mov	arg01, fp
142a0     54 66 BF FD | 	call	#_push
142a4                 | LR__1631
142a4     A7 F0 03 F6 | 	mov	ptra, fp
142a8     B2 00 A0 FD | 	call	#popregs_
142ac                 | _do_chr_ret
142ac     2D 00 64 FD | 	ret
142b0                 | 
142b0                 | ' 
142b0                 | ' sub do_val
142b0                 | _do_val
142b0     03 4A 05 F6 | 	mov	COUNT_, #3
142b4     A8 00 A0 FD | 	call	#pushregs_
142b8     20 F0 07 F1 | 	add	ptra, #32
142bc     6A 00 00 FF 
142c0     80 E4 05 F1 | 	add	objptr, ##54400
142c4     F2 16 02 FB | 	rdlong	arg03, objptr
142c8     0B 1F 02 F6 | 	mov	local01, arg03
142cc     01 1E 66 F0 | 	shl	local01, #1
142d0     0B 1F 02 F1 | 	add	local01, arg03
142d4     02 1E 66 F0 | 	shl	local01, #2
142d8     03 00 00 FF 
142dc     04 E4 85 F1 | 	sub	objptr, ##1540
142e0     F2 1E 02 F1 | 	add	local01, objptr
142e4     0F 17 02 FB | 	rdlong	arg03, local01
142e8     0C 4E 05 F1 | 	add	fp, #12
142ec     A7 16 62 FC | 	wrlong	arg03, fp
142f0                 | ' 
142f0                 | ' numpar=compiledline(lineptr_e).result.uresult
142f0                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
142f0     0C 4E 85 F1 | 	sub	fp, #12
142f4     02 16 16 F2 | 	cmp	arg03, #2 wc
142f8     67 00 00 FF 
142fc     7C E4 85 F1 | 	sub	objptr, ##52860
14300     0C 4E 05 C1 |  if_b	add	fp, #12
14304     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14308     0C 4E 85 C1 |  if_b	sub	fp, #12
1430c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1640
14310     00 12 06 F6 | 	mov	arg01, #0
14314     B8 01 B1 FD | 	call	#__system___getiolock_0484
14318     FD 12 02 F6 | 	mov	arg01, result1
1431c     18 A8 B0 FD | 	call	#__system___lockmem
14320     74 01 00 FF 
14324     05 14 06 F6 | 	mov	arg02, ##@LR__5166
14328     00 12 06 F6 | 	mov	arg01, #0
1432c     00 16 06 F6 | 	mov	arg03, #0
14330     0C B5 B0 FD | 	call	#__system___basic_print_string
14334     00 12 06 F6 | 	mov	arg01, #0
14338     94 01 B1 FD | 	call	#__system___getiolock_0484
1433c     FD 00 68 FC | 	wrlong	#0, result1
14340     27 12 06 F6 | 	mov	arg01, #39
14344     90 63 B0 FD | 	call	#_printerror
14348     5C 02 90 FD | 	jmp	#LR__1653
1434c                 | LR__1640
1434c     10 65 BF FD | 	call	#_pop
14350     FF 16 02 F6 | 	mov	arg03, result3
14354     A7 FA 61 FC | 	wrlong	result1, fp
14358     04 4E 05 F1 | 	add	fp, #4
1435c     A7 FC 61 FC | 	wrlong	result2, fp
14360     04 4E 05 F1 | 	add	fp, #4
14364     A7 16 62 FC | 	wrlong	arg03, fp
14368                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14368     08 4E 85 F1 | 	sub	fp, #8
1436c     2B 16 0E F2 | 	cmp	arg03, #43 wz
14370     18 00 90 5D |  if_ne	jmp	#LR__1641
14374     A7 12 02 FB | 	rdlong	arg01, fp
14378     54 A9 BF FD | 	call	#_convertstring
1437c     A7 FA 61 FC | 	wrlong	result1, fp
14380     08 4E 05 F1 | 	add	fp, #8
14384     A7 3E 68 FC | 	wrlong	#31, fp
14388     08 4E 85 F1 | 	sub	fp, #8
1438c                 | LR__1641
1438c                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1438c     08 4E 05 F1 | 	add	fp, #8
14390     A7 16 02 FB | 	rdlong	arg03, fp
14394     08 4E 85 F1 | 	sub	fp, #8
14398     1F 16 0E F2 | 	cmp	arg03, #31 wz
1439c     3C 00 90 AD |  if_e	jmp	#LR__1642
143a0     00 12 06 F6 | 	mov	arg01, #0
143a4     28 01 B1 FD | 	call	#__system___getiolock_0484
143a8     FD 12 02 F6 | 	mov	arg01, result1
143ac     88 A7 B0 FD | 	call	#__system___lockmem
143b0     74 01 00 FF 
143b4     0B 14 06 F6 | 	mov	arg02, ##@LR__5167
143b8     00 12 06 F6 | 	mov	arg01, #0
143bc     00 16 06 F6 | 	mov	arg03, #0
143c0     7C B4 B0 FD | 	call	#__system___basic_print_string
143c4     00 12 06 F6 | 	mov	arg01, #0
143c8     04 01 B1 FD | 	call	#__system___getiolock_0484
143cc     FD 00 68 FC | 	wrlong	#0, result1
143d0     0F 12 06 F6 | 	mov	arg01, #15
143d4     00 63 B0 FD | 	call	#_printerror
143d8     CC 01 90 FD | 	jmp	#LR__1653
143dc                 | LR__1642
143dc                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
143dc     A7 12 02 FB | 	rdlong	arg01, fp
143e0     01 14 06 F6 | 	mov	arg02, #1
143e4     98 C7 B0 FD | 	call	#__system__Left_S
143e8     FD 12 02 F6 | 	mov	arg01, result1
143ec     74 01 00 FF 
143f0     11 14 06 F6 | 	mov	arg02, ##@LR__5168
143f4     68 A7 B0 FD | 	call	#__system___string_cmp
143f8     00 FA 0D F2 | 	cmp	result1, #0 wz
143fc     48 00 90 5D |  if_ne	jmp	#LR__1645
14400     74 01 00 FF 
14404     13 1E 06 F6 | 	mov	local01, ##@LR__5169
14408     A7 16 02 FB | 	rdlong	arg03, fp
1440c     0B 13 02 F6 | 	mov	arg01, arg03
14410     09 21 02 F6 | 	mov	local02, arg01
14414     97 06 48 FB | 	callpa	#(@LR__1644-@LR__1643)>>2,fcache_load_ptr_
14418                 | LR__1643
14418     10 FB C9 FA | 	rdbyte	result1, local02 wz
1441c     01 20 06 51 |  if_ne	add	local02, #1
14420     F4 FF 9F 5D |  if_ne	jmp	#LR__1643
14424                 | LR__1644
14424     09 21 82 F1 | 	sub	local02, arg01
14428     10 15 02 F6 | 	mov	arg02, local02
1442c     01 14 86 F1 | 	sub	arg02, #1
14430     0B 13 02 F6 | 	mov	arg01, arg03
14434     D0 C7 B0 FD | 	call	#__system__Right_S
14438     FD 14 02 F6 | 	mov	arg02, result1
1443c     0F 13 02 F6 | 	mov	arg01, local01
14440     50 A7 B0 FD | 	call	#__system___string_concat
14444     A7 FA 61 FC | 	wrlong	result1, fp
14448                 | LR__1645
14448                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
14448     A7 12 02 FB | 	rdlong	arg01, fp
1444c     01 14 06 F6 | 	mov	arg02, #1
14450     2C C7 B0 FD | 	call	#__system__Left_S
14454     FD 12 02 F6 | 	mov	arg01, result1
14458     74 01 00 FF 
1445c     16 14 06 F6 | 	mov	arg02, ##@LR__5170
14460     FC A6 B0 FD | 	call	#__system___string_cmp
14464     00 FA 0D F2 | 	cmp	result1, #0 wz
14468     48 00 90 5D |  if_ne	jmp	#LR__1648
1446c     74 01 00 FF 
14470     18 1E 06 F6 | 	mov	local01, ##@LR__5171
14474     A7 16 02 FB | 	rdlong	arg03, fp
14478     0B 13 02 F6 | 	mov	arg01, arg03
1447c     09 21 02 F6 | 	mov	local02, arg01
14480     97 06 48 FB | 	callpa	#(@LR__1647-@LR__1646)>>2,fcache_load_ptr_
14484                 | LR__1646
14484     10 FB C9 FA | 	rdbyte	result1, local02 wz
14488     01 20 06 51 |  if_ne	add	local02, #1
1448c     F4 FF 9F 5D |  if_ne	jmp	#LR__1646
14490                 | LR__1647
14490     09 21 82 F1 | 	sub	local02, arg01
14494     10 15 02 F6 | 	mov	arg02, local02
14498     01 14 86 F1 | 	sub	arg02, #1
1449c     0B 13 02 F6 | 	mov	arg01, arg03
144a0     64 C7 B0 FD | 	call	#__system__Right_S
144a4     FD 14 02 F6 | 	mov	arg02, result1
144a8     0F 13 02 F6 | 	mov	arg01, local01
144ac     E4 A6 B0 FD | 	call	#__system___string_concat
144b0     A7 FA 61 FC | 	wrlong	result1, fp
144b4                 | LR__1648
144b4     A7 12 02 FB | 	rdlong	arg01, fp
144b8     E4 D9 B0 FD | 	call	#__system____builtin_atof
144bc     1C 4E 05 F1 | 	add	fp, #28
144c0     A7 FA 61 FC | 	wrlong	result1, fp
144c4     1C 4E 85 F1 | 	sub	fp, #28
144c8     A7 12 02 FB | 	rdlong	arg01, fp
144cc     00 14 06 F6 | 	mov	arg02, #0
144d0     5C D8 B0 FD | 	call	#__system____builtin_atoi
144d4     18 4E 05 F1 | 	add	fp, #24
144d8     A7 FA 61 FC | 	wrlong	result1, fp
144dc                 | ' fval=val(t1.result.sresult)
144dc                 | ' ival=val%(t1.result.sresult)
144dc                 | ' if fval=ival then
144dc     04 4E 05 F1 | 	add	fp, #4
144e0     A7 1E 02 FB | 	rdlong	local01, fp
144e4     1C 4E 85 F1 | 	sub	fp, #28
144e8     FD 12 52 F6 | 	abs	arg01, result1 wc
144ec     1F 22 C6 C9 |  if_b	decod	local03, #31
144f0     00 22 06 36 |  if_ae	mov	local03, #0
144f4     BC CD B0 FD | 	call	#__system___float_fromuns
144f8     11 FB 61 F5 | 	xor	result1, local03
144fc     FD 14 02 F6 | 	mov	arg02, result1
14500     0F 13 02 F6 | 	mov	arg01, local01
14504     01 16 06 F6 | 	mov	arg03, #1
14508     E0 D5 B0 FD | 	call	#__system___float_cmp
1450c     00 FA 0D F2 | 	cmp	result1, #0 wz
14510     20 00 90 5D |  if_ne	jmp	#LR__1649
14514     18 4E 05 F1 | 	add	fp, #24
14518     A7 1E 02 FB | 	rdlong	local01, fp
1451c     18 4E 85 F1 | 	sub	fp, #24
14520     A7 1E 62 FC | 	wrlong	local01, fp
14524     08 4E 05 F1 | 	add	fp, #8
14528     A7 38 68 FC | 	wrlong	#28, fp
1452c     08 4E 85 F1 | 	sub	fp, #8
14530     6C 00 90 FD | 	jmp	#LR__1652
14534                 | LR__1649
14534                 | '   if fval=0 andalso ival<>0 then
14534     1C 4E 05 F1 | 	add	fp, #28
14538     A7 12 02 FB | 	rdlong	arg01, fp
1453c     1C 4E 85 F1 | 	sub	fp, #28
14540     00 14 06 F6 | 	mov	arg02, #0
14544     01 16 06 F6 | 	mov	arg03, #1
14548     A0 D5 B0 FD | 	call	#__system___float_cmp
1454c     00 FA 0D F2 | 	cmp	result1, #0 wz
14550     30 00 90 5D |  if_ne	jmp	#LR__1650
14554     18 4E 05 F1 | 	add	fp, #24
14558     A7 1E 0A FB | 	rdlong	local01, fp wz
1455c     18 4E 85 F1 | 	sub	fp, #24
14560     20 00 90 AD |  if_e	jmp	#LR__1650
14564     18 4E 05 F1 | 	add	fp, #24
14568     A7 1E 02 FB | 	rdlong	local01, fp
1456c     18 4E 85 F1 | 	sub	fp, #24
14570     A7 1E 62 FC | 	wrlong	local01, fp
14574     08 4E 05 F1 | 	add	fp, #8
14578     A7 38 68 FC | 	wrlong	#28, fp
1457c     08 4E 85 F1 | 	sub	fp, #8
14580     1C 00 90 FD | 	jmp	#LR__1651
14584                 | LR__1650
14584     1C 4E 05 F1 | 	add	fp, #28
14588     A7 1E 02 FB | 	rdlong	local01, fp
1458c     1C 4E 85 F1 | 	sub	fp, #28
14590     A7 1E 62 FC | 	wrlong	local01, fp
14594     08 4E 05 F1 | 	add	fp, #8
14598     A7 3C 68 FC | 	wrlong	#30, fp
1459c     08 4E 85 F1 | 	sub	fp, #8
145a0                 | LR__1651
145a0                 | LR__1652
145a0     A7 12 02 F6 | 	mov	arg01, fp
145a4     50 63 BF FD | 	call	#_push
145a8                 | LR__1653
145a8     A7 F0 03 F6 | 	mov	ptra, fp
145ac     B2 00 A0 FD | 	call	#popregs_
145b0                 | _do_val_ret
145b0     2D 00 64 FD | 	ret
145b4                 | 
145b4                 | ' 
145b4                 | ' 
145b4                 | ' sub do_hex
145b4                 | _do_hex
145b4     01 4A 05 F6 | 	mov	COUNT_, #1
145b8     A8 00 A0 FD | 	call	#pushregs_
145bc     18 F0 07 F1 | 	add	ptra, #24
145c0     6A 00 00 FF 
145c4     80 E4 05 F1 | 	add	objptr, ##54400
145c8     F2 1E 02 FB | 	rdlong	local01, objptr
145cc     0F 17 02 F6 | 	mov	arg03, local01
145d0     01 16 66 F0 | 	shl	arg03, #1
145d4     0F 17 02 F1 | 	add	arg03, local01
145d8     02 16 66 F0 | 	shl	arg03, #2
145dc     03 00 00 FF 
145e0     04 E4 85 F1 | 	sub	objptr, ##1540
145e4     F2 16 02 F1 | 	add	arg03, objptr
145e8     0B 17 02 FB | 	rdlong	arg03, arg03
145ec     0C 4E 05 F1 | 	add	fp, #12
145f0     A7 16 62 FC | 	wrlong	arg03, fp
145f4                 | ' 
145f4                 | ' numpar=compiledline(lineptr_e).result.uresult
145f4                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
145f4     0C 4E 85 F1 | 	sub	fp, #12
145f8     03 16 16 F2 | 	cmp	arg03, #3 wc
145fc     67 00 00 FF 
14600     7C E4 85 F1 | 	sub	objptr, ##52860
14604     0C 4E 05 C1 |  if_b	add	fp, #12
14608     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1460c     0C 4E 85 C1 |  if_b	sub	fp, #12
14610     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1660
14614     00 12 06 F6 | 	mov	arg01, #0
14618     B4 FE B0 FD | 	call	#__system___getiolock_0484
1461c     FD 12 02 F6 | 	mov	arg01, result1
14620     14 A5 B0 FD | 	call	#__system___lockmem
14624     74 01 00 FF 
14628     1B 14 06 F6 | 	mov	arg02, ##@LR__5172
1462c     00 12 06 F6 | 	mov	arg01, #0
14630     00 16 06 F6 | 	mov	arg03, #0
14634     08 B2 B0 FD | 	call	#__system___basic_print_string
14638     00 12 06 F6 | 	mov	arg01, #0
1463c     90 FE B0 FD | 	call	#__system___getiolock_0484
14640     FD 00 68 FC | 	wrlong	#0, result1
14644     27 12 06 F6 | 	mov	arg01, #39
14648     8C 60 B0 FD | 	call	#_printerror
1464c     B8 00 90 FD | 	jmp	#LR__1663
14650                 | LR__1660
14650                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
14650     0C 4E 05 F1 | 	add	fp, #12
14654     A7 1E 02 FB | 	rdlong	local01, fp
14658     0C 4E 85 F1 | 	sub	fp, #12
1465c     02 1E 0E F2 | 	cmp	local01, #2 wz
14660     38 00 90 5D |  if_ne	jmp	#LR__1661
14664     F8 61 BF FD | 	call	#_pop
14668     FF 1E 02 F6 | 	mov	local01, result3
1466c     A7 FA 61 FC | 	wrlong	result1, fp
14670     04 4E 05 F1 | 	add	fp, #4
14674     A7 FC 61 FC | 	wrlong	result2, fp
14678     04 4E 05 F1 | 	add	fp, #4
1467c     A7 1E 62 FC | 	wrlong	local01, fp
14680     08 4E 85 F1 | 	sub	fp, #8
14684     A7 12 02 F6 | 	mov	arg01, fp
14688     68 EE BF FD | 	call	#_converttoint
1468c     14 4E 05 F1 | 	add	fp, #20
14690     A7 FA 61 FC | 	wrlong	result1, fp
14694     14 4E 85 F1 | 	sub	fp, #20
14698     0C 00 90 FD | 	jmp	#LR__1662
1469c                 | LR__1661
1469c     14 4E 05 F1 | 	add	fp, #20
146a0     A7 10 68 FC | 	wrlong	#8, fp
146a4     14 4E 85 F1 | 	sub	fp, #20
146a8                 | LR__1662
146a8     B4 61 BF FD | 	call	#_pop
146ac     FF 1E 02 F6 | 	mov	local01, result3
146b0     A7 FA 61 FC | 	wrlong	result1, fp
146b4     04 4E 05 F1 | 	add	fp, #4
146b8     A7 FC 61 FC | 	wrlong	result2, fp
146bc     04 4E 05 F1 | 	add	fp, #4
146c0     A7 1E 62 FC | 	wrlong	local01, fp
146c4     08 4E 85 F1 | 	sub	fp, #8
146c8     A7 12 02 F6 | 	mov	arg01, fp
146cc     24 EE BF FD | 	call	#_converttoint
146d0     10 4E 05 F1 | 	add	fp, #16
146d4     A7 FA 61 FC | 	wrlong	result1, fp
146d8     FD 12 02 F6 | 	mov	arg01, result1
146dc     04 4E 05 F1 | 	add	fp, #4
146e0     A7 14 02 FB | 	rdlong	arg02, fp
146e4     14 4E 85 F1 | 	sub	fp, #20
146e8     10 16 06 F6 | 	mov	arg03, #16
146ec     E4 C6 B0 FD | 	call	#__system__Number_S
146f0     A7 FA 61 FC | 	wrlong	result1, fp
146f4     08 4E 05 F1 | 	add	fp, #8
146f8     A7 3E 68 FC | 	wrlong	#31, fp
146fc     08 4E 85 F1 | 	sub	fp, #8
14700     A7 12 02 F6 | 	mov	arg01, fp
14704     F0 61 BF FD | 	call	#_push
14708                 | LR__1663
14708     A7 F0 03 F6 | 	mov	ptra, fp
1470c     B2 00 A0 FD | 	call	#popregs_
14710                 | _do_hex_ret
14710     2D 00 64 FD | 	ret
14714                 | 
14714                 | ' 
14714                 | ' sub do_bin
14714                 | _do_bin
14714     01 4A 05 F6 | 	mov	COUNT_, #1
14718     A8 00 A0 FD | 	call	#pushregs_
1471c     18 F0 07 F1 | 	add	ptra, #24
14720     6A 00 00 FF 
14724     80 E4 05 F1 | 	add	objptr, ##54400
14728     F2 1E 02 FB | 	rdlong	local01, objptr
1472c     0F 17 02 F6 | 	mov	arg03, local01
14730     01 16 66 F0 | 	shl	arg03, #1
14734     0F 17 02 F1 | 	add	arg03, local01
14738     02 16 66 F0 | 	shl	arg03, #2
1473c     03 00 00 FF 
14740     04 E4 85 F1 | 	sub	objptr, ##1540
14744     F2 16 02 F1 | 	add	arg03, objptr
14748     0B 17 02 FB | 	rdlong	arg03, arg03
1474c     0C 4E 05 F1 | 	add	fp, #12
14750     A7 16 62 FC | 	wrlong	arg03, fp
14754                 | ' 
14754                 | ' numpar=compiledline(lineptr_e).result.uresult
14754                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
14754     0C 4E 85 F1 | 	sub	fp, #12
14758     03 16 16 F2 | 	cmp	arg03, #3 wc
1475c     67 00 00 FF 
14760     7C E4 85 F1 | 	sub	objptr, ##52860
14764     0C 4E 05 C1 |  if_b	add	fp, #12
14768     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1476c     0C 4E 85 C1 |  if_b	sub	fp, #12
14770     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1670
14774     00 12 06 F6 | 	mov	arg01, #0
14778     54 FD B0 FD | 	call	#__system___getiolock_0484
1477c     FD 12 02 F6 | 	mov	arg01, result1
14780     B4 A3 B0 FD | 	call	#__system___lockmem
14784     74 01 00 FF 
14788     22 14 06 F6 | 	mov	arg02, ##@LR__5173
1478c     00 12 06 F6 | 	mov	arg01, #0
14790     00 16 06 F6 | 	mov	arg03, #0
14794     A8 B0 B0 FD | 	call	#__system___basic_print_string
14798     00 12 06 F6 | 	mov	arg01, #0
1479c     30 FD B0 FD | 	call	#__system___getiolock_0484
147a0     FD 00 68 FC | 	wrlong	#0, result1
147a4     27 12 06 F6 | 	mov	arg01, #39
147a8     2C 5F B0 FD | 	call	#_printerror
147ac     B8 00 90 FD | 	jmp	#LR__1673
147b0                 | LR__1670
147b0                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
147b0     0C 4E 05 F1 | 	add	fp, #12
147b4     A7 1E 02 FB | 	rdlong	local01, fp
147b8     0C 4E 85 F1 | 	sub	fp, #12
147bc     02 1E 0E F2 | 	cmp	local01, #2 wz
147c0     38 00 90 5D |  if_ne	jmp	#LR__1671
147c4     98 60 BF FD | 	call	#_pop
147c8     FF 1E 02 F6 | 	mov	local01, result3
147cc     A7 FA 61 FC | 	wrlong	result1, fp
147d0     04 4E 05 F1 | 	add	fp, #4
147d4     A7 FC 61 FC | 	wrlong	result2, fp
147d8     04 4E 05 F1 | 	add	fp, #4
147dc     A7 1E 62 FC | 	wrlong	local01, fp
147e0     08 4E 85 F1 | 	sub	fp, #8
147e4     A7 12 02 F6 | 	mov	arg01, fp
147e8     08 ED BF FD | 	call	#_converttoint
147ec     14 4E 05 F1 | 	add	fp, #20
147f0     A7 FA 61 FC | 	wrlong	result1, fp
147f4     14 4E 85 F1 | 	sub	fp, #20
147f8     0C 00 90 FD | 	jmp	#LR__1672
147fc                 | LR__1671
147fc     14 4E 05 F1 | 	add	fp, #20
14800     A7 00 68 FC | 	wrlong	#0, fp
14804     14 4E 85 F1 | 	sub	fp, #20
14808                 | LR__1672
14808     54 60 BF FD | 	call	#_pop
1480c     FF 1E 02 F6 | 	mov	local01, result3
14810     A7 FA 61 FC | 	wrlong	result1, fp
14814     04 4E 05 F1 | 	add	fp, #4
14818     A7 FC 61 FC | 	wrlong	result2, fp
1481c     04 4E 05 F1 | 	add	fp, #4
14820     A7 1E 62 FC | 	wrlong	local01, fp
14824     08 4E 85 F1 | 	sub	fp, #8
14828     A7 12 02 F6 | 	mov	arg01, fp
1482c     C4 EC BF FD | 	call	#_converttoint
14830     10 4E 05 F1 | 	add	fp, #16
14834     A7 FA 61 FC | 	wrlong	result1, fp
14838     FD 12 02 F6 | 	mov	arg01, result1
1483c     04 4E 05 F1 | 	add	fp, #4
14840     A7 14 02 FB | 	rdlong	arg02, fp
14844     14 4E 85 F1 | 	sub	fp, #20
14848     02 16 06 F6 | 	mov	arg03, #2
1484c     84 C5 B0 FD | 	call	#__system__Number_S
14850     A7 FA 61 FC | 	wrlong	result1, fp
14854     08 4E 05 F1 | 	add	fp, #8
14858     A7 3E 68 FC | 	wrlong	#31, fp
1485c     08 4E 85 F1 | 	sub	fp, #8
14860     A7 12 02 F6 | 	mov	arg01, fp
14864     90 60 BF FD | 	call	#_push
14868                 | LR__1673
14868     A7 F0 03 F6 | 	mov	ptra, fp
1486c     B2 00 A0 FD | 	call	#popregs_
14870                 | _do_bin_ret
14870     2D 00 64 FD | 	ret
14874                 | 
14874                 | ' 
14874                 | ' sub do_cos
14874                 | _do_cos
14874     01 4A 05 F6 | 	mov	COUNT_, #1
14878     A8 00 A0 FD | 	call	#pushregs_
1487c     10 F0 07 F1 | 	add	ptra, #16
14880     6A 00 00 FF 
14884     80 E4 05 F1 | 	add	objptr, ##54400
14888     F2 1E 02 FB | 	rdlong	local01, objptr
1488c     0F 17 02 F6 | 	mov	arg03, local01
14890     01 16 66 F0 | 	shl	arg03, #1
14894     0F 17 02 F1 | 	add	arg03, local01
14898     02 16 66 F0 | 	shl	arg03, #2
1489c     03 00 00 FF 
148a0     04 E4 85 F1 | 	sub	objptr, ##1540
148a4     F2 16 02 F1 | 	add	arg03, objptr
148a8     0B 17 02 FB | 	rdlong	arg03, arg03
148ac     0C 4E 05 F1 | 	add	fp, #12
148b0     A7 16 62 FC | 	wrlong	arg03, fp
148b4                 | ' 
148b4                 | ' numpar=compiledline(lineptr_e).result.uresult
148b4                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
148b4     0C 4E 85 F1 | 	sub	fp, #12
148b8     02 16 16 F2 | 	cmp	arg03, #2 wc
148bc     67 00 00 FF 
148c0     7C E4 85 F1 | 	sub	objptr, ##52860
148c4     0C 4E 05 C1 |  if_b	add	fp, #12
148c8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
148cc     0C 4E 85 C1 |  if_b	sub	fp, #12
148d0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1680
148d4     00 12 06 F6 | 	mov	arg01, #0
148d8     F4 FB B0 FD | 	call	#__system___getiolock_0484
148dc     FD 12 02 F6 | 	mov	arg01, result1
148e0     54 A2 B0 FD | 	call	#__system___lockmem
148e4     74 01 00 FF 
148e8     29 14 06 F6 | 	mov	arg02, ##@LR__5174
148ec     00 12 06 F6 | 	mov	arg01, #0
148f0     00 16 06 F6 | 	mov	arg03, #0
148f4     48 AF B0 FD | 	call	#__system___basic_print_string
148f8     00 12 06 F6 | 	mov	arg01, #0
148fc     D0 FB B0 FD | 	call	#__system___getiolock_0484
14900     FD 00 68 FC | 	wrlong	#0, result1
14904     27 12 06 F6 | 	mov	arg01, #39
14908     CC 5D B0 FD | 	call	#_printerror
1490c     78 00 90 FD | 	jmp	#LR__1681
14910                 | LR__1680
14910     4C 5F BF FD | 	call	#_pop
14914     A7 FA 61 FC | 	wrlong	result1, fp
14918     04 4E 05 F1 | 	add	fp, #4
1491c     A7 FC 61 FC | 	wrlong	result2, fp
14920     04 4E 05 F1 | 	add	fp, #4
14924     A7 FE 61 FC | 	wrlong	result3, fp
14928     08 4E 85 F1 | 	sub	fp, #8
1492c     79 00 00 FF 
14930     98 E5 05 F1 | 	add	objptr, ##62360
14934     F2 1E 02 FB | 	rdlong	local01, objptr
14938     79 00 00 FF 
1493c     98 E5 85 F1 | 	sub	objptr, ##62360
14940     A7 12 02 F6 | 	mov	arg01, fp
14944     58 EC BF FD | 	call	#_converttofloat
14948     FD 14 02 F6 | 	mov	arg02, result1
1494c     0F 13 02 F6 | 	mov	arg01, local01
14950     64 CD B0 FD | 	call	#__system___float_mul
14954     FD 14 02 F6 | 	mov	arg02, result1
14958     87 E4 1F FF 
1495c     DB 13 06 F6 | 	mov	arg01, ##1070141403
14960     1F 14 E6 F4 | 	bitnot	arg02, #31
14964     80 C9 B0 FD | 	call	#__system___float_add
14968     FD 12 02 F6 | 	mov	arg01, result1
1496c     84 D6 B0 FD | 	call	#__system____builtin_sinf
14970     A7 FA 61 FC | 	wrlong	result1, fp
14974     08 4E 05 F1 | 	add	fp, #8
14978     A7 3C 68 FC | 	wrlong	#30, fp
1497c     08 4E 85 F1 | 	sub	fp, #8
14980     A7 12 02 F6 | 	mov	arg01, fp
14984     70 5F BF FD | 	call	#_push
14988                 | LR__1681
14988     A7 F0 03 F6 | 	mov	ptra, fp
1498c     B2 00 A0 FD | 	call	#popregs_
14990                 | _do_cos_ret
14990     2D 00 64 FD | 	ret
14994                 | 
14994                 | ' 
14994                 | ' sub do_tan
14994                 | _do_tan
14994     01 4A 05 F6 | 	mov	COUNT_, #1
14998     A8 00 A0 FD | 	call	#pushregs_
1499c     10 F0 07 F1 | 	add	ptra, #16
149a0     6A 00 00 FF 
149a4     80 E4 05 F1 | 	add	objptr, ##54400
149a8     F2 1E 02 FB | 	rdlong	local01, objptr
149ac     0F 17 02 F6 | 	mov	arg03, local01
149b0     01 16 66 F0 | 	shl	arg03, #1
149b4     0F 17 02 F1 | 	add	arg03, local01
149b8     02 16 66 F0 | 	shl	arg03, #2
149bc     03 00 00 FF 
149c0     04 E4 85 F1 | 	sub	objptr, ##1540
149c4     F2 16 02 F1 | 	add	arg03, objptr
149c8     0B 17 02 FB | 	rdlong	arg03, arg03
149cc     0C 4E 05 F1 | 	add	fp, #12
149d0     A7 16 62 FC | 	wrlong	arg03, fp
149d4                 | ' 
149d4                 | ' numpar=compiledline(lineptr_e).result.uresult
149d4                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
149d4     0C 4E 85 F1 | 	sub	fp, #12
149d8     02 16 16 F2 | 	cmp	arg03, #2 wc
149dc     67 00 00 FF 
149e0     7C E4 85 F1 | 	sub	objptr, ##52860
149e4     0C 4E 05 C1 |  if_b	add	fp, #12
149e8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
149ec     0C 4E 85 C1 |  if_b	sub	fp, #12
149f0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1690
149f4     00 12 06 F6 | 	mov	arg01, #0
149f8     D4 FA B0 FD | 	call	#__system___getiolock_0484
149fc     FD 12 02 F6 | 	mov	arg01, result1
14a00     34 A1 B0 FD | 	call	#__system___lockmem
14a04     74 01 00 FF 
14a08     2F 14 06 F6 | 	mov	arg02, ##@LR__5175
14a0c     00 12 06 F6 | 	mov	arg01, #0
14a10     00 16 06 F6 | 	mov	arg03, #0
14a14     28 AE B0 FD | 	call	#__system___basic_print_string
14a18     00 12 06 F6 | 	mov	arg01, #0
14a1c     B0 FA B0 FD | 	call	#__system___getiolock_0484
14a20     FD 00 68 FC | 	wrlong	#0, result1
14a24     27 12 06 F6 | 	mov	arg01, #39
14a28     AC 5C B0 FD | 	call	#_printerror
14a2c     64 00 90 FD | 	jmp	#LR__1691
14a30                 | LR__1690
14a30     2C 5E BF FD | 	call	#_pop
14a34     A7 FA 61 FC | 	wrlong	result1, fp
14a38     04 4E 05 F1 | 	add	fp, #4
14a3c     A7 FC 61 FC | 	wrlong	result2, fp
14a40     04 4E 05 F1 | 	add	fp, #4
14a44     A7 FE 61 FC | 	wrlong	result3, fp
14a48     08 4E 85 F1 | 	sub	fp, #8
14a4c     79 00 00 FF 
14a50     98 E5 05 F1 | 	add	objptr, ##62360
14a54     F2 1E 02 FB | 	rdlong	local01, objptr
14a58     79 00 00 FF 
14a5c     98 E5 85 F1 | 	sub	objptr, ##62360
14a60     A7 12 02 F6 | 	mov	arg01, fp
14a64     38 EB BF FD | 	call	#_converttofloat
14a68     FD 14 02 F6 | 	mov	arg02, result1
14a6c     0F 13 02 F6 | 	mov	arg01, local01
14a70     44 CC B0 FD | 	call	#__system___float_mul
14a74     FD 12 02 F6 | 	mov	arg01, result1
14a78     C4 D6 B0 FD | 	call	#__system____builtin_tanf
14a7c     A7 FA 61 FC | 	wrlong	result1, fp
14a80     08 4E 05 F1 | 	add	fp, #8
14a84     A7 3C 68 FC | 	wrlong	#30, fp
14a88     08 4E 85 F1 | 	sub	fp, #8
14a8c     A7 12 02 F6 | 	mov	arg01, fp
14a90     64 5E BF FD | 	call	#_push
14a94                 | LR__1691
14a94     A7 F0 03 F6 | 	mov	ptra, fp
14a98     B2 00 A0 FD | 	call	#popregs_
14a9c                 | _do_tan_ret
14a9c     2D 00 64 FD | 	ret
14aa0                 | 
14aa0                 | ' 
14aa0                 | ' sub do_asin
14aa0                 | _do_asin
14aa0     01 4A 05 F6 | 	mov	COUNT_, #1
14aa4     A8 00 A0 FD | 	call	#pushregs_
14aa8     10 F0 07 F1 | 	add	ptra, #16
14aac     6A 00 00 FF 
14ab0     80 E4 05 F1 | 	add	objptr, ##54400
14ab4     F2 1E 02 FB | 	rdlong	local01, objptr
14ab8     0F 17 02 F6 | 	mov	arg03, local01
14abc     01 16 66 F0 | 	shl	arg03, #1
14ac0     0F 17 02 F1 | 	add	arg03, local01
14ac4     02 16 66 F0 | 	shl	arg03, #2
14ac8     03 00 00 FF 
14acc     04 E4 85 F1 | 	sub	objptr, ##1540
14ad0     F2 16 02 F1 | 	add	arg03, objptr
14ad4     0B 17 02 FB | 	rdlong	arg03, arg03
14ad8     0C 4E 05 F1 | 	add	fp, #12
14adc     A7 16 62 FC | 	wrlong	arg03, fp
14ae0                 | ' 
14ae0                 | ' numpar=compiledline(lineptr_e).result.uresult
14ae0                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
14ae0     0C 4E 85 F1 | 	sub	fp, #12
14ae4     02 16 16 F2 | 	cmp	arg03, #2 wc
14ae8     67 00 00 FF 
14aec     7C E4 85 F1 | 	sub	objptr, ##52860
14af0     0C 4E 05 C1 |  if_b	add	fp, #12
14af4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14af8     0C 4E 85 C1 |  if_b	sub	fp, #12
14afc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1700
14b00     00 12 06 F6 | 	mov	arg01, #0
14b04     C8 F9 B0 FD | 	call	#__system___getiolock_0484
14b08     FD 12 02 F6 | 	mov	arg01, result1
14b0c     28 A0 B0 FD | 	call	#__system___lockmem
14b10     74 01 00 FF 
14b14     35 14 06 F6 | 	mov	arg02, ##@LR__5176
14b18     00 12 06 F6 | 	mov	arg01, #0
14b1c     00 16 06 F6 | 	mov	arg03, #0
14b20     1C AD B0 FD | 	call	#__system___basic_print_string
14b24     00 12 06 F6 | 	mov	arg01, #0
14b28     A4 F9 B0 FD | 	call	#__system___getiolock_0484
14b2c     FD 00 68 FC | 	wrlong	#0, result1
14b30     27 12 06 F6 | 	mov	arg01, #39
14b34     A0 5B B0 FD | 	call	#_printerror
14b38     64 00 90 FD | 	jmp	#LR__1701
14b3c                 | LR__1700
14b3c     20 5D BF FD | 	call	#_pop
14b40     FF 1E 02 F6 | 	mov	local01, result3
14b44     A7 FA 61 FC | 	wrlong	result1, fp
14b48     04 4E 05 F1 | 	add	fp, #4
14b4c     A7 FC 61 FC | 	wrlong	result2, fp
14b50     04 4E 05 F1 | 	add	fp, #4
14b54     A7 1E 62 FC | 	wrlong	local01, fp
14b58     08 4E 85 F1 | 	sub	fp, #8
14b5c     A7 12 02 F6 | 	mov	arg01, fp
14b60     3C EA BF FD | 	call	#_converttofloat
14b64     FD 12 02 F6 | 	mov	arg01, result1
14b68     1C D6 B0 FD | 	call	#__system____builtin_asinf
14b6c     FD 12 02 F6 | 	mov	arg01, result1
14b70     79 00 00 FF 
14b74     9C E5 05 F1 | 	add	objptr, ##62364
14b78     F2 14 02 FB | 	rdlong	arg02, objptr
14b7c     79 00 00 FF 
14b80     9C E5 85 F1 | 	sub	objptr, ##62364
14b84     30 CB B0 FD | 	call	#__system___float_mul
14b88     A7 FA 61 FC | 	wrlong	result1, fp
14b8c     08 4E 05 F1 | 	add	fp, #8
14b90     A7 3C 68 FC | 	wrlong	#30, fp
14b94     08 4E 85 F1 | 	sub	fp, #8
14b98     A7 12 02 F6 | 	mov	arg01, fp
14b9c     58 5D BF FD | 	call	#_push
14ba0                 | LR__1701
14ba0     A7 F0 03 F6 | 	mov	ptra, fp
14ba4     B2 00 A0 FD | 	call	#popregs_
14ba8                 | _do_asin_ret
14ba8     2D 00 64 FD | 	ret
14bac                 | 
14bac                 | ' 
14bac                 | ' sub do_acos
14bac                 | _do_acos
14bac     01 4A 05 F6 | 	mov	COUNT_, #1
14bb0     A8 00 A0 FD | 	call	#pushregs_
14bb4     10 F0 07 F1 | 	add	ptra, #16
14bb8     6A 00 00 FF 
14bbc     80 E4 05 F1 | 	add	objptr, ##54400
14bc0     F2 1E 02 FB | 	rdlong	local01, objptr
14bc4     0F 17 02 F6 | 	mov	arg03, local01
14bc8     01 16 66 F0 | 	shl	arg03, #1
14bcc     0F 17 02 F1 | 	add	arg03, local01
14bd0     02 16 66 F0 | 	shl	arg03, #2
14bd4     03 00 00 FF 
14bd8     04 E4 85 F1 | 	sub	objptr, ##1540
14bdc     F2 16 02 F1 | 	add	arg03, objptr
14be0     0B 17 02 FB | 	rdlong	arg03, arg03
14be4     0C 4E 05 F1 | 	add	fp, #12
14be8     A7 16 62 FC | 	wrlong	arg03, fp
14bec                 | ' 
14bec                 | ' numpar=compiledline(lineptr_e).result.uresult
14bec                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
14bec     0C 4E 85 F1 | 	sub	fp, #12
14bf0     02 16 16 F2 | 	cmp	arg03, #2 wc
14bf4     67 00 00 FF 
14bf8     7C E4 85 F1 | 	sub	objptr, ##52860
14bfc     0C 4E 05 C1 |  if_b	add	fp, #12
14c00     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14c04     0C 4E 85 C1 |  if_b	sub	fp, #12
14c08     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1710
14c0c     00 12 06 F6 | 	mov	arg01, #0
14c10     BC F8 B0 FD | 	call	#__system___getiolock_0484
14c14     FD 12 02 F6 | 	mov	arg01, result1
14c18     1C 9F B0 FD | 	call	#__system___lockmem
14c1c     74 01 00 FF 
14c20     3C 14 06 F6 | 	mov	arg02, ##@LR__5177
14c24     00 12 06 F6 | 	mov	arg01, #0
14c28     00 16 06 F6 | 	mov	arg03, #0
14c2c     10 AC B0 FD | 	call	#__system___basic_print_string
14c30     00 12 06 F6 | 	mov	arg01, #0
14c34     98 F8 B0 FD | 	call	#__system___getiolock_0484
14c38     FD 00 68 FC | 	wrlong	#0, result1
14c3c     27 12 06 F6 | 	mov	arg01, #39
14c40     94 5A B0 FD | 	call	#_printerror
14c44     64 00 90 FD | 	jmp	#LR__1711
14c48                 | LR__1710
14c48     14 5C BF FD | 	call	#_pop
14c4c     FF 1E 02 F6 | 	mov	local01, result3
14c50     A7 FA 61 FC | 	wrlong	result1, fp
14c54     04 4E 05 F1 | 	add	fp, #4
14c58     A7 FC 61 FC | 	wrlong	result2, fp
14c5c     04 4E 05 F1 | 	add	fp, #4
14c60     A7 1E 62 FC | 	wrlong	local01, fp
14c64     08 4E 85 F1 | 	sub	fp, #8
14c68     A7 12 02 F6 | 	mov	arg01, fp
14c6c     30 E9 BF FD | 	call	#_converttofloat
14c70     FD 12 02 F6 | 	mov	arg01, result1
14c74     5C D5 B0 FD | 	call	#__system____builtin_acosf
14c78     FD 12 02 F6 | 	mov	arg01, result1
14c7c     79 00 00 FF 
14c80     9C E5 05 F1 | 	add	objptr, ##62364
14c84     F2 14 02 FB | 	rdlong	arg02, objptr
14c88     79 00 00 FF 
14c8c     9C E5 85 F1 | 	sub	objptr, ##62364
14c90     24 CA B0 FD | 	call	#__system___float_mul
14c94     A7 FA 61 FC | 	wrlong	result1, fp
14c98     08 4E 05 F1 | 	add	fp, #8
14c9c     A7 3C 68 FC | 	wrlong	#30, fp
14ca0     08 4E 85 F1 | 	sub	fp, #8
14ca4     A7 12 02 F6 | 	mov	arg01, fp
14ca8     4C 5C BF FD | 	call	#_push
14cac                 | LR__1711
14cac     A7 F0 03 F6 | 	mov	ptra, fp
14cb0     B2 00 A0 FD | 	call	#popregs_
14cb4                 | _do_acos_ret
14cb4     2D 00 64 FD | 	ret
14cb8                 | 
14cb8                 | ' 
14cb8                 | ' sub do_atn
14cb8                 | _do_atn
14cb8     01 4A 05 F6 | 	mov	COUNT_, #1
14cbc     A8 00 A0 FD | 	call	#pushregs_
14cc0     10 F0 07 F1 | 	add	ptra, #16
14cc4     6A 00 00 FF 
14cc8     80 E4 05 F1 | 	add	objptr, ##54400
14ccc     F2 1E 02 FB | 	rdlong	local01, objptr
14cd0     0F 17 02 F6 | 	mov	arg03, local01
14cd4     01 16 66 F0 | 	shl	arg03, #1
14cd8     0F 17 02 F1 | 	add	arg03, local01
14cdc     02 16 66 F0 | 	shl	arg03, #2
14ce0     03 00 00 FF 
14ce4     04 E4 85 F1 | 	sub	objptr, ##1540
14ce8     F2 16 02 F1 | 	add	arg03, objptr
14cec     0B 17 02 FB | 	rdlong	arg03, arg03
14cf0     0C 4E 05 F1 | 	add	fp, #12
14cf4     A7 16 62 FC | 	wrlong	arg03, fp
14cf8                 | ' 
14cf8                 | ' numpar=compiledline(lineptr_e).result.uresult
14cf8                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
14cf8     0C 4E 85 F1 | 	sub	fp, #12
14cfc     02 16 16 F2 | 	cmp	arg03, #2 wc
14d00     67 00 00 FF 
14d04     7C E4 85 F1 | 	sub	objptr, ##52860
14d08     0C 4E 05 C1 |  if_b	add	fp, #12
14d0c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14d10     0C 4E 85 C1 |  if_b	sub	fp, #12
14d14     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1720
14d18     00 12 06 F6 | 	mov	arg01, #0
14d1c     B0 F7 B0 FD | 	call	#__system___getiolock_0484
14d20     FD 12 02 F6 | 	mov	arg01, result1
14d24     10 9E B0 FD | 	call	#__system___lockmem
14d28     74 01 00 FF 
14d2c     43 14 06 F6 | 	mov	arg02, ##@LR__5178
14d30     00 12 06 F6 | 	mov	arg01, #0
14d34     00 16 06 F6 | 	mov	arg03, #0
14d38     04 AB B0 FD | 	call	#__system___basic_print_string
14d3c     00 12 06 F6 | 	mov	arg01, #0
14d40     8C F7 B0 FD | 	call	#__system___getiolock_0484
14d44     FD 00 68 FC | 	wrlong	#0, result1
14d48     27 12 06 F6 | 	mov	arg01, #39
14d4c     88 59 B0 FD | 	call	#_printerror
14d50     6C 00 90 FD | 	jmp	#LR__1721
14d54                 | LR__1720
14d54     08 5B BF FD | 	call	#_pop
14d58     FF 1E 02 F6 | 	mov	local01, result3
14d5c     A7 FA 61 FC | 	wrlong	result1, fp
14d60     04 4E 05 F1 | 	add	fp, #4
14d64     A7 FC 61 FC | 	wrlong	result2, fp
14d68     04 4E 05 F1 | 	add	fp, #4
14d6c     A7 1E 62 FC | 	wrlong	local01, fp
14d70     08 4E 85 F1 | 	sub	fp, #8
14d74     A7 12 02 F6 | 	mov	arg01, fp
14d78     24 E8 BF FD | 	call	#_converttofloat
14d7c     FD 12 02 F6 | 	mov	arg01, result1
14d80     00 C0 1F FF 
14d84     00 14 06 F6 | 	mov	arg02, ##1065353216
14d88     94 D4 B0 FD | 	call	#__system____builtin_atan2f
14d8c     FD 12 02 F6 | 	mov	arg01, result1
14d90     79 00 00 FF 
14d94     9C E5 05 F1 | 	add	objptr, ##62364
14d98     F2 14 02 FB | 	rdlong	arg02, objptr
14d9c     79 00 00 FF 
14da0     9C E5 85 F1 | 	sub	objptr, ##62364
14da4     10 C9 B0 FD | 	call	#__system___float_mul
14da8     A7 FA 61 FC | 	wrlong	result1, fp
14dac     08 4E 05 F1 | 	add	fp, #8
14db0     A7 3C 68 FC | 	wrlong	#30, fp
14db4     08 4E 85 F1 | 	sub	fp, #8
14db8     A7 12 02 F6 | 	mov	arg01, fp
14dbc     38 5B BF FD | 	call	#_push
14dc0                 | LR__1721
14dc0     A7 F0 03 F6 | 	mov	ptra, fp
14dc4     B2 00 A0 FD | 	call	#popregs_
14dc8                 | _do_atn_ret
14dc8     2D 00 64 FD | 	ret
14dcc                 | 
14dcc                 | ' 
14dcc                 | ' sub do_sqr
14dcc                 | _do_sqr
14dcc     01 4A 05 F6 | 	mov	COUNT_, #1
14dd0     A8 00 A0 FD | 	call	#pushregs_
14dd4     10 F0 07 F1 | 	add	ptra, #16
14dd8     6A 00 00 FF 
14ddc     80 E4 05 F1 | 	add	objptr, ##54400
14de0     F2 1E 02 FB | 	rdlong	local01, objptr
14de4     0F 17 02 F6 | 	mov	arg03, local01
14de8     01 16 66 F0 | 	shl	arg03, #1
14dec     0F 17 02 F1 | 	add	arg03, local01
14df0     02 16 66 F0 | 	shl	arg03, #2
14df4     03 00 00 FF 
14df8     04 E4 85 F1 | 	sub	objptr, ##1540
14dfc     F2 16 02 F1 | 	add	arg03, objptr
14e00     0B 17 02 FB | 	rdlong	arg03, arg03
14e04     0C 4E 05 F1 | 	add	fp, #12
14e08     A7 16 62 FC | 	wrlong	arg03, fp
14e0c                 | ' 
14e0c                 | ' numpar=compiledline(lineptr_e).result.uresult
14e0c                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
14e0c     0C 4E 85 F1 | 	sub	fp, #12
14e10     02 16 16 F2 | 	cmp	arg03, #2 wc
14e14     67 00 00 FF 
14e18     7C E4 85 F1 | 	sub	objptr, ##52860
14e1c     0C 4E 05 C1 |  if_b	add	fp, #12
14e20     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14e24     0C 4E 85 C1 |  if_b	sub	fp, #12
14e28     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1730
14e2c     00 12 06 F6 | 	mov	arg01, #0
14e30     9C F6 B0 FD | 	call	#__system___getiolock_0484
14e34     FD 12 02 F6 | 	mov	arg01, result1
14e38     FC 9C B0 FD | 	call	#__system___lockmem
14e3c     74 01 00 FF 
14e40     49 14 06 F6 | 	mov	arg02, ##@LR__5179
14e44     00 12 06 F6 | 	mov	arg01, #0
14e48     00 16 06 F6 | 	mov	arg03, #0
14e4c     F0 A9 B0 FD | 	call	#__system___basic_print_string
14e50     00 12 06 F6 | 	mov	arg01, #0
14e54     78 F6 B0 FD | 	call	#__system___getiolock_0484
14e58     FD 00 68 FC | 	wrlong	#0, result1
14e5c     27 12 06 F6 | 	mov	arg01, #39
14e60     74 58 B0 FD | 	call	#_printerror
14e64     48 00 90 FD | 	jmp	#LR__1731
14e68                 | LR__1730
14e68     F4 59 BF FD | 	call	#_pop
14e6c     FF 1E 02 F6 | 	mov	local01, result3
14e70     A7 FA 61 FC | 	wrlong	result1, fp
14e74     04 4E 05 F1 | 	add	fp, #4
14e78     A7 FC 61 FC | 	wrlong	result2, fp
14e7c     04 4E 05 F1 | 	add	fp, #4
14e80     A7 1E 62 FC | 	wrlong	local01, fp
14e84     08 4E 85 F1 | 	sub	fp, #8
14e88     A7 12 02 F6 | 	mov	arg01, fp
14e8c     10 E7 BF FD | 	call	#_converttofloat
14e90     FD 12 02 F6 | 	mov	arg01, result1
14e94     48 C7 B0 FD | 	call	#__system___float_sqrt
14e98     A7 FA 61 FC | 	wrlong	result1, fp
14e9c     08 4E 05 F1 | 	add	fp, #8
14ea0     A7 3C 68 FC | 	wrlong	#30, fp
14ea4     08 4E 85 F1 | 	sub	fp, #8
14ea8     A7 12 02 F6 | 	mov	arg01, fp
14eac     48 5A BF FD | 	call	#_push
14eb0                 | LR__1731
14eb0     A7 F0 03 F6 | 	mov	ptra, fp
14eb4     B2 00 A0 FD | 	call	#popregs_
14eb8                 | _do_sqr_ret
14eb8     2D 00 64 FD | 	ret
14ebc                 | 
14ebc                 | ' 
14ebc                 | ' sub do_stick
14ebc                 | _do_stick
14ebc     01 4A 05 F6 | 	mov	COUNT_, #1
14ec0     A8 00 A0 FD | 	call	#pushregs_
14ec4     10 F0 07 F1 | 	add	ptra, #16
14ec8     6A 00 00 FF 
14ecc     80 E4 05 F1 | 	add	objptr, ##54400
14ed0     F2 1E 02 FB | 	rdlong	local01, objptr
14ed4     0F 17 02 F6 | 	mov	arg03, local01
14ed8     01 16 66 F0 | 	shl	arg03, #1
14edc     0F 17 02 F1 | 	add	arg03, local01
14ee0     02 16 66 F0 | 	shl	arg03, #2
14ee4     03 00 00 FF 
14ee8     04 E4 85 F1 | 	sub	objptr, ##1540
14eec     F2 16 02 F1 | 	add	arg03, objptr
14ef0     0B 17 02 FB | 	rdlong	arg03, arg03
14ef4     0C 4E 05 F1 | 	add	fp, #12
14ef8     A7 16 62 FC | 	wrlong	arg03, fp
14efc                 | ' 
14efc                 | ' numpar=compiledline(lineptr_e).result.uresult
14efc                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
14efc     0C 4E 85 F1 | 	sub	fp, #12
14f00     02 16 16 F2 | 	cmp	arg03, #2 wc
14f04     67 00 00 FF 
14f08     7C E4 85 F1 | 	sub	objptr, ##52860
14f0c     3C 00 90 CD |  if_b	jmp	#LR__1740
14f10     00 12 06 F6 | 	mov	arg01, #0
14f14     B8 F5 B0 FD | 	call	#__system___getiolock_0484
14f18     FD 12 02 F6 | 	mov	arg01, result1
14f1c     18 9C B0 FD | 	call	#__system___lockmem
14f20     74 01 00 FF 
14f24     4F 14 06 F6 | 	mov	arg02, ##@LR__5180
14f28     00 12 06 F6 | 	mov	arg01, #0
14f2c     00 16 06 F6 | 	mov	arg03, #0
14f30     0C A9 B0 FD | 	call	#__system___basic_print_string
14f34     00 12 06 F6 | 	mov	arg01, #0
14f38     94 F5 B0 FD | 	call	#__system___getiolock_0484
14f3c     FD 00 68 FC | 	wrlong	#0, result1
14f40     27 12 06 F6 | 	mov	arg01, #39
14f44     90 57 B0 FD | 	call	#_printerror
14f48     E8 00 90 FD | 	jmp	#LR__1744
14f4c                 | LR__1740
14f4c                 | ' 
14f4c                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
14f4c     0C 4E 05 F1 | 	add	fp, #12
14f50     A7 FE 09 FB | 	rdlong	result3, fp wz
14f54     0C 4E 85 F1 | 	sub	fp, #12
14f58     30 00 90 5D |  if_ne	jmp	#LR__1741
14f5c     79 00 00 FF 
14f60     0C E5 05 F1 | 	add	objptr, ##62220
14f64     F2 1E 02 FB | 	rdlong	local01, objptr
14f68     79 00 00 FF 
14f6c     0C E5 85 F1 | 	sub	objptr, ##62220
14f70     A7 1E 62 FC | 	wrlong	local01, fp
14f74     08 4E 05 F1 | 	add	fp, #8
14f78     A7 3A 68 FC | 	wrlong	#29, fp
14f7c     08 4E 85 F1 | 	sub	fp, #8
14f80     A7 12 02 F6 | 	mov	arg01, fp
14f84     70 59 BF FD | 	call	#_push
14f88     A8 00 90 FD | 	jmp	#LR__1744
14f8c                 | LR__1741
14f8c     D0 58 BF FD | 	call	#_pop
14f90     A7 FA 61 FC | 	wrlong	result1, fp
14f94     04 4E 05 F1 | 	add	fp, #4
14f98     A7 FC 61 FC | 	wrlong	result2, fp
14f9c     04 4E 05 F1 | 	add	fp, #4
14fa0     A7 FE 61 FC | 	wrlong	result3, fp
14fa4                 | ' 
14fa4                 | ' t1=pop()
14fa4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
14fa4     08 4E 85 F1 | 	sub	fp, #8
14fa8     1C FE 0D F2 | 	cmp	result3, #28 wz
14fac     08 4E 05 51 |  if_ne	add	fp, #8
14fb0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14fb4     08 4E 85 51 |  if_ne	sub	fp, #8
14fb8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14fbc     6C 00 90 5D |  if_ne	jmp	#LR__1743
14fc0     A7 1E 02 FB | 	rdlong	local01, fp
14fc4     7A 00 00 FF 
14fc8     04 E4 05 F1 | 	add	objptr, ##62468
14fcc     F2 1E 62 FC | 	wrlong	local01, objptr
14fd0                 | '   q=t1.result.uresult
14fd0                 | '   if q<7 then 
14fd0     7A 00 00 FF 
14fd4     04 E4 85 F1 | 	sub	objptr, ##62468
14fd8     07 1E 56 F2 | 	cmps	local01, #7 wc
14fdc     40 00 90 3D |  if_ae	jmp	#LR__1742
14fe0     7A 00 00 FF 
14fe4     04 E4 05 F1 | 	add	objptr, ##62468
14fe8     F2 1E 02 FB | 	rdlong	local01, objptr
14fec     02 1E 66 F0 | 	shl	local01, #2
14ff0     F8 E4 85 F1 | 	sub	objptr, #248
14ff4     F2 1E 02 F1 | 	add	local01, objptr
14ff8     0F 1F 02 FB | 	rdlong	local01, local01
14ffc     A7 1E 62 FC | 	wrlong	local01, fp
15000     08 4E 05 F1 | 	add	fp, #8
15004     A7 3A 68 FC | 	wrlong	#29, fp
15008     08 4E 85 F1 | 	sub	fp, #8
1500c     A7 12 02 F6 | 	mov	arg01, fp
15010     79 00 00 FF 
15014     0C E5 85 F1 | 	sub	objptr, ##62220
15018     DC 58 BF FD | 	call	#_push
1501c                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1501c     14 00 90 FD | 	jmp	#LR__1744
15020                 | LR__1742
15020     29 12 06 F6 | 	mov	arg01, #41
15024     B0 56 B0 FD | 	call	#_printerror
15028                 | '      printerror(41) : return
15028     08 00 90 FD | 	jmp	#LR__1744
1502c                 | LR__1743
1502c     29 12 06 F6 | 	mov	arg01, #41
15030     A4 56 B0 FD | 	call	#_printerror
15034                 | LR__1744
15034     A7 F0 03 F6 | 	mov	ptra, fp
15038     B2 00 A0 FD | 	call	#popregs_
1503c                 | _do_stick_ret
1503c     2D 00 64 FD | 	ret
15040                 | 
15040                 | ' 
15040                 | ' sub do_strig
15040                 | _do_strig
15040     01 4A 05 F6 | 	mov	COUNT_, #1
15044     A8 00 A0 FD | 	call	#pushregs_
15048     10 F0 07 F1 | 	add	ptra, #16
1504c     6A 00 00 FF 
15050     80 E4 05 F1 | 	add	objptr, ##54400
15054     F2 1E 02 FB | 	rdlong	local01, objptr
15058     0F 17 02 F6 | 	mov	arg03, local01
1505c     01 16 66 F0 | 	shl	arg03, #1
15060     0F 17 02 F1 | 	add	arg03, local01
15064     02 16 66 F0 | 	shl	arg03, #2
15068     03 00 00 FF 
1506c     04 E4 85 F1 | 	sub	objptr, ##1540
15070     F2 16 02 F1 | 	add	arg03, objptr
15074     0B 17 02 FB | 	rdlong	arg03, arg03
15078     0C 4E 05 F1 | 	add	fp, #12
1507c     A7 16 62 FC | 	wrlong	arg03, fp
15080                 | ' 
15080                 | ' numpar=compiledline(lineptr_e).result.uresult
15080                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
15080     0C 4E 85 F1 | 	sub	fp, #12
15084     02 16 16 F2 | 	cmp	arg03, #2 wc
15088     67 00 00 FF 
1508c     7C E4 85 F1 | 	sub	objptr, ##52860
15090     3C 00 90 CD |  if_b	jmp	#LR__1750
15094     00 12 06 F6 | 	mov	arg01, #0
15098     34 F4 B0 FD | 	call	#__system___getiolock_0484
1509c     FD 12 02 F6 | 	mov	arg01, result1
150a0     94 9A B0 FD | 	call	#__system___lockmem
150a4     74 01 00 FF 
150a8     57 14 06 F6 | 	mov	arg02, ##@LR__5181
150ac     00 12 06 F6 | 	mov	arg01, #0
150b0     00 16 06 F6 | 	mov	arg03, #0
150b4     88 A7 B0 FD | 	call	#__system___basic_print_string
150b8     00 12 06 F6 | 	mov	arg01, #0
150bc     10 F4 B0 FD | 	call	#__system___getiolock_0484
150c0     FD 00 68 FC | 	wrlong	#0, result1
150c4     27 12 06 F6 | 	mov	arg01, #39
150c8     0C 56 B0 FD | 	call	#_printerror
150cc     E8 00 90 FD | 	jmp	#LR__1754
150d0                 | LR__1750
150d0                 | ' 
150d0                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
150d0     0C 4E 05 F1 | 	add	fp, #12
150d4     A7 FE 09 FB | 	rdlong	result3, fp wz
150d8     0C 4E 85 F1 | 	sub	fp, #12
150dc     30 00 90 5D |  if_ne	jmp	#LR__1751
150e0     79 00 00 FF 
150e4     28 E5 05 F1 | 	add	objptr, ##62248
150e8     F2 1E 02 FB | 	rdlong	local01, objptr
150ec     79 00 00 FF 
150f0     28 E5 85 F1 | 	sub	objptr, ##62248
150f4     A7 1E 62 FC | 	wrlong	local01, fp
150f8     08 4E 05 F1 | 	add	fp, #8
150fc     A7 3A 68 FC | 	wrlong	#29, fp
15100     08 4E 85 F1 | 	sub	fp, #8
15104     A7 12 02 F6 | 	mov	arg01, fp
15108     EC 57 BF FD | 	call	#_push
1510c     A8 00 90 FD | 	jmp	#LR__1754
15110                 | LR__1751
15110     4C 57 BF FD | 	call	#_pop
15114     A7 FA 61 FC | 	wrlong	result1, fp
15118     04 4E 05 F1 | 	add	fp, #4
1511c     A7 FC 61 FC | 	wrlong	result2, fp
15120     04 4E 05 F1 | 	add	fp, #4
15124     A7 FE 61 FC | 	wrlong	result3, fp
15128                 | ' 
15128                 | ' t1=pop()
15128                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
15128     08 4E 85 F1 | 	sub	fp, #8
1512c     1C FE 0D F2 | 	cmp	result3, #28 wz
15130     08 4E 05 51 |  if_ne	add	fp, #8
15134     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15138     08 4E 85 51 |  if_ne	sub	fp, #8
1513c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15140     6C 00 90 5D |  if_ne	jmp	#LR__1753
15144     A7 1E 02 FB | 	rdlong	local01, fp
15148     7A 00 00 FF 
1514c     04 E4 05 F1 | 	add	objptr, ##62468
15150     F2 1E 62 FC | 	wrlong	local01, objptr
15154                 | '   q=t1.result.uresult
15154                 | '   if q<7 then 
15154     7A 00 00 FF 
15158     04 E4 85 F1 | 	sub	objptr, ##62468
1515c     07 1E 56 F2 | 	cmps	local01, #7 wc
15160     40 00 90 3D |  if_ae	jmp	#LR__1752
15164     7A 00 00 FF 
15168     04 E4 05 F1 | 	add	objptr, ##62468
1516c     F2 1E 02 FB | 	rdlong	local01, objptr
15170     02 1E 66 F0 | 	shl	local01, #2
15174     DC E4 85 F1 | 	sub	objptr, #220
15178     F2 1E 02 F1 | 	add	local01, objptr
1517c     0F 1F 02 FB | 	rdlong	local01, local01
15180     A7 1E 62 FC | 	wrlong	local01, fp
15184     08 4E 05 F1 | 	add	fp, #8
15188     A7 3A 68 FC | 	wrlong	#29, fp
1518c     08 4E 85 F1 | 	sub	fp, #8
15190     A7 12 02 F6 | 	mov	arg01, fp
15194     79 00 00 FF 
15198     28 E5 85 F1 | 	sub	objptr, ##62248
1519c     58 57 BF FD | 	call	#_push
151a0                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
151a0     14 00 90 FD | 	jmp	#LR__1754
151a4                 | LR__1752
151a4     29 12 06 F6 | 	mov	arg01, #41
151a8     2C 55 B0 FD | 	call	#_printerror
151ac                 | '      printerror(41) : return
151ac     08 00 90 FD | 	jmp	#LR__1754
151b0                 | LR__1753
151b0     29 12 06 F6 | 	mov	arg01, #41
151b4     20 55 B0 FD | 	call	#_printerror
151b8                 | LR__1754
151b8     A7 F0 03 F6 | 	mov	ptra, fp
151bc     B2 00 A0 FD | 	call	#popregs_
151c0                 | _do_strig_ret
151c0     2D 00 64 FD | 	ret
151c4                 | 
151c4                 | ' 
151c4                 | ' sub do_getpixel
151c4                 | _do_getpixel
151c4     00 4A 05 F6 | 	mov	COUNT_, #0
151c8     A8 00 A0 FD | 	call	#pushregs_
151cc     24 F0 07 F1 | 	add	ptra, #36
151d0     6A 00 00 FF 
151d4     80 E4 05 F1 | 	add	objptr, ##54400
151d8     F2 16 02 FB | 	rdlong	arg03, objptr
151dc     0B 15 02 F6 | 	mov	arg02, arg03
151e0     01 14 66 F0 | 	shl	arg02, #1
151e4     0B 15 02 F1 | 	add	arg02, arg03
151e8     02 14 66 F0 | 	shl	arg02, #2
151ec     03 00 00 FF 
151f0     04 E4 85 F1 | 	sub	objptr, ##1540
151f4     F2 14 02 F1 | 	add	arg02, objptr
151f8     0A 17 02 FB | 	rdlong	arg03, arg02
151fc     18 4E 05 F1 | 	add	fp, #24
15200     A7 16 62 FC | 	wrlong	arg03, fp
15204                 | ' 
15204                 | ' numpar=compiledline(lineptr_e).result.uresult
15204                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
15204     18 4E 85 F1 | 	sub	fp, #24
15208     02 16 0E F2 | 	cmp	arg03, #2 wz
1520c     67 00 00 FF 
15210     7C E4 85 F1 | 	sub	objptr, ##52860
15214     3C 00 90 AD |  if_e	jmp	#LR__1760
15218     00 12 06 F6 | 	mov	arg01, #0
1521c     B0 F2 B0 FD | 	call	#__system___getiolock_0484
15220     FD 12 02 F6 | 	mov	arg01, result1
15224     10 99 B0 FD | 	call	#__system___lockmem
15228     74 01 00 FF 
1522c     5F 14 06 F6 | 	mov	arg02, ##@LR__5182
15230     00 12 06 F6 | 	mov	arg01, #0
15234     00 16 06 F6 | 	mov	arg03, #0
15238     04 A6 B0 FD | 	call	#__system___basic_print_string
1523c     00 12 06 F6 | 	mov	arg01, #0
15240     8C F2 B0 FD | 	call	#__system___getiolock_0484
15244     FD 00 68 FC | 	wrlong	#0, result1
15248     27 12 06 F6 | 	mov	arg01, #39
1524c     88 54 B0 FD | 	call	#_printerror
15250     B4 00 90 FD | 	jmp	#LR__1761
15254                 | LR__1760
15254     08 56 BF FD | 	call	#_pop
15258     FD 16 02 F6 | 	mov	arg03, result1
1525c     FE 14 02 F6 | 	mov	arg02, result2
15260     FF 12 02 F6 | 	mov	arg01, result3
15264     0C 4E 05 F1 | 	add	fp, #12
15268     A7 16 62 FC | 	wrlong	arg03, fp
1526c     04 4E 05 F1 | 	add	fp, #4
15270     A7 14 62 FC | 	wrlong	arg02, fp
15274     04 4E 05 F1 | 	add	fp, #4
15278     A7 12 62 FC | 	wrlong	arg01, fp
1527c     14 4E 85 F1 | 	sub	fp, #20
15280     DC 55 BF FD | 	call	#_pop
15284     FF 16 02 F6 | 	mov	arg03, result3
15288     A7 FA 61 FC | 	wrlong	result1, fp
1528c     04 4E 05 F1 | 	add	fp, #4
15290     A7 FC 61 FC | 	wrlong	result2, fp
15294     04 4E 05 F1 | 	add	fp, #4
15298     A7 16 62 FC | 	wrlong	arg03, fp
1529c     08 4E 85 F1 | 	sub	fp, #8
152a0     A7 12 02 F6 | 	mov	arg01, fp
152a4     4C E2 BF FD | 	call	#_converttoint
152a8     1C 4E 05 F1 | 	add	fp, #28
152ac     A7 FA 61 FC | 	wrlong	result1, fp
152b0     10 4E 85 F1 | 	sub	fp, #16
152b4     A7 12 02 F6 | 	mov	arg01, fp
152b8     0C 4E 85 F1 | 	sub	fp, #12
152bc     34 E2 BF FD | 	call	#_converttoint
152c0     FD 16 02 F6 | 	mov	arg03, result1
152c4     20 4E 05 F1 | 	add	fp, #32
152c8     A7 16 62 FC | 	wrlong	arg03, fp
152cc     F2 12 02 FB | 	rdlong	arg01, objptr
152d0     04 4E 85 F1 | 	sub	fp, #4
152d4     A7 FE 01 FB | 	rdlong	result3, fp
152d8     FF 12 02 F1 | 	add	arg01, result3
152dc     1C 4E 85 F1 | 	sub	fp, #28
152e0     0A 16 66 F0 | 	shl	arg03, #10
152e4     0B 13 02 F1 | 	add	arg01, arg03
152e8     28 56 B0 FD | 	call	#_pspeek
152ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
152f0     A7 FA 61 FC | 	wrlong	result1, fp
152f4     08 4E 05 F1 | 	add	fp, #8
152f8     A7 3A 68 FC | 	wrlong	#29, fp
152fc     08 4E 85 F1 | 	sub	fp, #8
15300     A7 12 02 F6 | 	mov	arg01, fp
15304     F0 55 BF FD | 	call	#_push
15308                 | LR__1761
15308     A7 F0 03 F6 | 	mov	ptra, fp
1530c     B2 00 A0 FD | 	call	#popregs_
15310                 | _do_getpixel_ret
15310     2D 00 64 FD | 	ret
15314                 | 
15314                 | ' 
15314                 | ' 
15314                 | ' 
15314                 | ' sub do_defsprite
15314                 | _do_defsprite
15314     07 4A 05 F6 | 	mov	COUNT_, #7
15318     A8 00 A0 FD | 	call	#pushregs_
1531c     60 F0 07 F1 | 	add	ptra, #96
15320     3C 55 BF FD | 	call	#_pop
15324     FD 16 02 F6 | 	mov	arg03, result1
15328     FE 14 02 F6 | 	mov	arg02, result2
1532c     FF 12 02 F6 | 	mov	arg01, result3
15330     30 4E 05 F1 | 	add	fp, #48
15334     A7 16 62 FC | 	wrlong	arg03, fp
15338     04 4E 05 F1 | 	add	fp, #4
1533c     A7 14 62 FC | 	wrlong	arg02, fp
15340     04 4E 05 F1 | 	add	fp, #4
15344     A7 12 62 FC | 	wrlong	arg01, fp
15348     38 4E 85 F1 | 	sub	fp, #56
1534c     10 55 BF FD | 	call	#_pop
15350     FD 16 02 F6 | 	mov	arg03, result1
15354     FE 14 02 F6 | 	mov	arg02, result2
15358     FF 12 02 F6 | 	mov	arg01, result3
1535c     24 4E 05 F1 | 	add	fp, #36
15360     A7 16 62 FC | 	wrlong	arg03, fp
15364     04 4E 05 F1 | 	add	fp, #4
15368     A7 14 62 FC | 	wrlong	arg02, fp
1536c     04 4E 05 F1 | 	add	fp, #4
15370     A7 12 62 FC | 	wrlong	arg01, fp
15374     2C 4E 85 F1 | 	sub	fp, #44
15378     E4 54 BF FD | 	call	#_pop
1537c     FD 16 02 F6 | 	mov	arg03, result1
15380     FE 14 02 F6 | 	mov	arg02, result2
15384     FF 12 02 F6 | 	mov	arg01, result3
15388     18 4E 05 F1 | 	add	fp, #24
1538c     A7 16 62 FC | 	wrlong	arg03, fp
15390     04 4E 05 F1 | 	add	fp, #4
15394     A7 14 62 FC | 	wrlong	arg02, fp
15398     04 4E 05 F1 | 	add	fp, #4
1539c     A7 12 62 FC | 	wrlong	arg01, fp
153a0     20 4E 85 F1 | 	sub	fp, #32
153a4     B8 54 BF FD | 	call	#_pop
153a8     FD 16 02 F6 | 	mov	arg03, result1
153ac     FE 14 02 F6 | 	mov	arg02, result2
153b0     FF 12 02 F6 | 	mov	arg01, result3
153b4     0C 4E 05 F1 | 	add	fp, #12
153b8     A7 16 62 FC | 	wrlong	arg03, fp
153bc     04 4E 05 F1 | 	add	fp, #4
153c0     A7 14 62 FC | 	wrlong	arg02, fp
153c4     04 4E 05 F1 | 	add	fp, #4
153c8     A7 12 62 FC | 	wrlong	arg01, fp
153cc     14 4E 85 F1 | 	sub	fp, #20
153d0     8C 54 BF FD | 	call	#_pop
153d4     FF 16 02 F6 | 	mov	arg03, result3
153d8     A7 FA 61 FC | 	wrlong	result1, fp
153dc     04 4E 05 F1 | 	add	fp, #4
153e0     A7 FC 61 FC | 	wrlong	result2, fp
153e4     04 4E 05 F1 | 	add	fp, #4
153e8     A7 16 62 FC | 	wrlong	arg03, fp
153ec     08 4E 85 F1 | 	sub	fp, #8
153f0     A7 12 02 F6 | 	mov	arg01, fp
153f4     FC E0 BF FD | 	call	#_converttoint
153f8     3C 4E 05 F1 | 	add	fp, #60
153fc     A7 FA 61 FC | 	wrlong	result1, fp
15400     30 4E 85 F1 | 	sub	fp, #48
15404     A7 12 02 F6 | 	mov	arg01, fp
15408     0C 4E 85 F1 | 	sub	fp, #12
1540c     E4 E0 BF FD | 	call	#_converttoint
15410     40 4E 05 F1 | 	add	fp, #64
15414     A7 FA 61 FC | 	wrlong	result1, fp
15418     28 4E 85 F1 | 	sub	fp, #40
1541c     A7 12 02 F6 | 	mov	arg01, fp
15420     18 4E 85 F1 | 	sub	fp, #24
15424     CC E0 BF FD | 	call	#_converttoint
15428     44 4E 05 F1 | 	add	fp, #68
1542c     A7 FA 61 FC | 	wrlong	result1, fp
15430     20 4E 85 F1 | 	sub	fp, #32
15434     A7 12 02 F6 | 	mov	arg01, fp
15438     24 4E 85 F1 | 	sub	fp, #36
1543c     B4 E0 BF FD | 	call	#_converttoint
15440     48 4E 05 F1 | 	add	fp, #72
15444     A7 FA 61 FC | 	wrlong	result1, fp
15448     18 4E 85 F1 | 	sub	fp, #24
1544c     A7 12 02 F6 | 	mov	arg01, fp
15450     30 4E 85 F1 | 	sub	fp, #48
15454     9C E0 BF FD | 	call	#_converttoint
15458     4C 4E 05 F1 | 	add	fp, #76
1545c     A7 FA 61 FC | 	wrlong	result1, fp
15460                 | ' 
15460                 | ' t5=pop()
15460                 | ' t4=pop()
15460                 | ' t3=pop()
15460                 | ' t2=pop()
15460                 | ' t1=pop()
15460                 | ' 
15460                 | ' ' do convert, defsprite is not a racing command
15460                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
15460                 | '  
15460                 | ' ' todo: check parameters for linits
15460                 | ' if sprite(a1)<> nil then delete(sprite(a1))
15460     10 4E 85 F1 | 	sub	fp, #16
15464     A7 16 02 FB | 	rdlong	arg03, fp
15468     3C 4E 85 F1 | 	sub	fp, #60
1546c     02 16 66 F0 | 	shl	arg03, #2
15470     79 00 00 FF 
15474     44 E5 05 F1 | 	add	objptr, ##62276
15478     F2 16 02 F1 | 	add	arg03, objptr
1547c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
15480     79 00 00 FF 
15484     44 E5 85 F1 | 	sub	objptr, ##62276
15488     2C 00 90 AD |  if_e	jmp	#LR__1770
1548c     3C 4E 05 F1 | 	add	fp, #60
15490     A7 16 02 FB | 	rdlong	arg03, fp
15494     3C 4E 85 F1 | 	sub	fp, #60
15498     02 16 66 F0 | 	shl	arg03, #2
1549c     79 00 00 FF 
154a0     44 E5 05 F1 | 	add	objptr, ##62276
154a4     F2 16 02 F1 | 	add	arg03, objptr
154a8     0B 13 02 FB | 	rdlong	arg01, arg03
154ac     79 00 00 FF 
154b0     44 E5 85 F1 | 	sub	objptr, ##62276
154b4     08 D6 B0 FD | 	call	#__system___gc_free
154b8                 | LR__1770
154b8     3C 4E 05 F1 | 	add	fp, #60
154bc     A7 1E 02 FB | 	rdlong	local01, fp
154c0     0C 4E 05 F1 | 	add	fp, #12
154c4     A7 16 02 FB | 	rdlong	arg03, fp
154c8     04 4E 05 F1 | 	add	fp, #4
154cc     A7 14 02 FB | 	rdlong	arg02, fp
154d0     0A 17 02 FD | 	qmul	arg03, arg02
154d4     02 1E 66 F0 | 	shl	local01, #2
154d8     79 00 00 FF 
154dc     44 E5 05 F1 | 	add	objptr, ##62276
154e0     F2 1E 02 F1 | 	add	local01, objptr
154e4     4C 4E 85 F1 | 	sub	fp, #76
154e8     79 00 00 FF 
154ec     44 E5 85 F1 | 	sub	objptr, ##62276
154f0     18 12 62 FD | 	getqx	arg01
154f4     8C D4 B0 FD | 	call	#__system___gc_alloc_managed
154f8     0F FB 61 FC | 	wrlong	result1, local01
154fc                 | ' for y=a3 to a3+a5-1
154fc     44 4E 05 F1 | 	add	fp, #68
15500     A7 20 02 FB | 	rdlong	local02, fp
15504     0C 4E 05 F1 | 	add	fp, #12
15508     A7 20 62 FC | 	wrlong	local02, fp
1550c     0C 4E 85 F1 | 	sub	fp, #12
15510     A7 22 02 FB | 	rdlong	local03, fp
15514     08 4E 05 F1 | 	add	fp, #8
15518     A7 24 02 FB | 	rdlong	local04, fp
1551c     4C 4E 85 F1 | 	sub	fp, #76
15520     12 23 02 F1 | 	add	local03, local04
15524                 | LR__1771
15524     50 4E 05 F1 | 	add	fp, #80
15528     A7 20 02 FB | 	rdlong	local02, fp
1552c     50 4E 85 F1 | 	sub	fp, #80
15530     11 21 52 F2 | 	cmps	local02, local03 wc
15534     F4 00 90 3D |  if_ae	jmp	#LR__1774
15538                 | '   for x=a2 to a4+a2-1
15538     40 4E 05 F1 | 	add	fp, #64
1553c     A7 1E 02 FB | 	rdlong	local01, fp
15540     14 4E 05 F1 | 	add	fp, #20
15544     A7 1E 62 FC | 	wrlong	local01, fp
15548     0C 4E 85 F1 | 	sub	fp, #12
1554c     A7 26 02 FB | 	rdlong	local05, fp
15550     08 4E 85 F1 | 	sub	fp, #8
15554     A7 28 02 FB | 	rdlong	local06, fp
15558     40 4E 85 F1 | 	sub	fp, #64
1555c     14 27 02 F1 | 	add	local05, local06
15560                 | LR__1772
15560     54 4E 05 F1 | 	add	fp, #84
15564     A7 1E 02 FB | 	rdlong	local01, fp
15568     54 4E 85 F1 | 	sub	fp, #84
1556c     13 1F 52 F2 | 	cmps	local01, local05 wc
15570     A0 00 90 3D |  if_ae	jmp	#LR__1773
15574     3C 4E 05 F1 | 	add	fp, #60
15578     A7 28 02 FB | 	rdlong	local06, fp
1557c     18 4E 05 F1 | 	add	fp, #24
15580     A7 24 02 FB | 	rdlong	local04, fp
15584     14 4E 85 F1 | 	sub	fp, #20
15588     A7 20 02 FB | 	rdlong	local02, fp
1558c     10 4E 05 F1 | 	add	fp, #16
15590     A7 1E 02 FB | 	rdlong	local01, fp
15594     0F 17 02 F6 | 	mov	arg03, local01
15598     0C 4E 85 F1 | 	sub	fp, #12
1559c     A7 14 02 FB | 	rdlong	arg02, fp
155a0     0A 17 82 F1 | 	sub	arg03, arg02
155a4     04 4E 05 F1 | 	add	fp, #4
155a8     A7 14 02 FB | 	rdlong	arg02, fp
155ac     0A 17 02 FD | 	qmul	arg03, arg02
155b0     02 28 66 F0 | 	shl	local06, #2
155b4     79 00 00 FF 
155b8     44 E5 05 F1 | 	add	objptr, ##62276
155bc     F2 28 02 F1 | 	add	local06, objptr
155c0     14 29 02 FB | 	rdlong	local06, local06
155c4     12 2B 02 F6 | 	mov	local07, local04
155c8     10 2B 82 F1 | 	sub	local07, local02
155cc     79 00 00 FF 
155d0     44 E5 85 F1 | 	sub	objptr, ##62276
155d4     F2 12 02 FB | 	rdlong	arg01, objptr
155d8     12 13 02 F1 | 	add	arg01, local04
155dc     48 4E 85 F1 | 	sub	fp, #72
155e0     0A 1E 66 F0 | 	shl	local01, #10
155e4     0F 13 02 F1 | 	add	arg01, local01
155e8     18 24 62 FD | 	getqx	local04
155ec     12 2B 02 F1 | 	add	local07, local04
155f0     14 2B 02 F1 | 	add	local07, local06
155f4     1C 53 B0 FD | 	call	#_pspeek
155f8     15 FB 41 FC | 	wrbyte	result1, local07
155fc     54 4E 05 F1 | 	add	fp, #84
15600     A7 2A 02 FB | 	rdlong	local07, fp
15604     01 2A 06 F1 | 	add	local07, #1
15608     A7 2A 62 FC | 	wrlong	local07, fp
1560c     54 4E 85 F1 | 	sub	fp, #84
15610     4C FF 9F FD | 	jmp	#LR__1772
15614                 | LR__1773
15614     50 4E 05 F1 | 	add	fp, #80
15618     A7 2A 02 FB | 	rdlong	local07, fp
1561c     01 2A 06 F1 | 	add	local07, #1
15620     A7 2A 62 FC | 	wrlong	local07, fp
15624     50 4E 85 F1 | 	sub	fp, #80
15628     F8 FE 9F FD | 	jmp	#LR__1771
1562c                 | LR__1774
1562c     3C 4E 05 F1 | 	add	fp, #60
15630     A7 2A 02 FB | 	rdlong	local07, fp
15634     15 13 02 F6 | 	mov	arg01, local07
15638     3C 4E 85 F1 | 	sub	fp, #60
1563c     02 2A 66 F0 | 	shl	local07, #2
15640     79 00 00 FF 
15644     44 E5 05 F1 | 	add	objptr, ##62276
15648     F2 2A 02 F1 | 	add	local07, objptr
1564c     15 15 02 FB | 	rdlong	arg02, local07
15650     79 00 00 FF 
15654     44 E5 85 F1 | 	sub	objptr, ##62276
15658     A0 70 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1565c     3C 4E 05 F1 | 	add	fp, #60
15660     A7 12 02 FB | 	rdlong	arg01, fp
15664     0C 4E 05 F1 | 	add	fp, #12
15668     A7 14 02 FB | 	rdlong	arg02, fp
1566c     04 4E 05 F1 | 	add	fp, #4
15670     A7 16 02 FB | 	rdlong	arg03, fp
15674     4C 4E 85 F1 | 	sub	fp, #76
15678     10 71 B0 FD | 	call	#_hg010b_spin2_setspritesize
1567c     A7 F0 03 F6 | 	mov	ptra, fp
15680     B2 00 A0 FD | 	call	#popregs_
15684                 | _do_defsprite_ret
15684     2D 00 64 FD | 	ret
15688                 | 
15688                 | ' 
15688                 | ' sub do_sprite
15688                 | _do_sprite
15688     00 4A 05 F6 | 	mov	COUNT_, #0
1568c     A8 00 A0 FD | 	call	#pushregs_
15690     30 F0 07 F1 | 	add	ptra, #48
15694     C8 51 BF FD | 	call	#_pop
15698     FD 16 02 F6 | 	mov	arg03, result1
1569c     FE 14 02 F6 | 	mov	arg02, result2
156a0     FF 12 02 F6 | 	mov	arg01, result3
156a4     18 4E 05 F1 | 	add	fp, #24
156a8     A7 16 62 FC | 	wrlong	arg03, fp
156ac     04 4E 05 F1 | 	add	fp, #4
156b0     A7 14 62 FC | 	wrlong	arg02, fp
156b4     04 4E 05 F1 | 	add	fp, #4
156b8     A7 12 62 FC | 	wrlong	arg01, fp
156bc     20 4E 85 F1 | 	sub	fp, #32
156c0     9C 51 BF FD | 	call	#_pop
156c4     FD 16 02 F6 | 	mov	arg03, result1
156c8     FE 14 02 F6 | 	mov	arg02, result2
156cc     FF 12 02 F6 | 	mov	arg01, result3
156d0     0C 4E 05 F1 | 	add	fp, #12
156d4     A7 16 62 FC | 	wrlong	arg03, fp
156d8     04 4E 05 F1 | 	add	fp, #4
156dc     A7 14 62 FC | 	wrlong	arg02, fp
156e0     04 4E 05 F1 | 	add	fp, #4
156e4     A7 12 62 FC | 	wrlong	arg01, fp
156e8     14 4E 85 F1 | 	sub	fp, #20
156ec     70 51 BF FD | 	call	#_pop
156f0     FF 16 02 F6 | 	mov	arg03, result3
156f4     A7 FA 61 FC | 	wrlong	result1, fp
156f8     04 4E 05 F1 | 	add	fp, #4
156fc     A7 FC 61 FC | 	wrlong	result2, fp
15700     04 4E 05 F1 | 	add	fp, #4
15704     A7 16 62 FC | 	wrlong	arg03, fp
15708     08 4E 85 F1 | 	sub	fp, #8
1570c     A7 12 02 F6 | 	mov	arg01, fp
15710     E0 DD BF FD | 	call	#_converttoint
15714     24 4E 05 F1 | 	add	fp, #36
15718     A7 FA 61 FC | 	wrlong	result1, fp
1571c     18 4E 85 F1 | 	sub	fp, #24
15720     A7 12 02 F6 | 	mov	arg01, fp
15724     0C 4E 85 F1 | 	sub	fp, #12
15728     C8 DD BF FD | 	call	#_converttoint
1572c     28 4E 05 F1 | 	add	fp, #40
15730     A7 FA 61 FC | 	wrlong	result1, fp
15734     10 4E 85 F1 | 	sub	fp, #16
15738     A7 12 02 F6 | 	mov	arg01, fp
1573c     18 4E 85 F1 | 	sub	fp, #24
15740     B0 DD BF FD | 	call	#_converttoint
15744     2C 4E 05 F1 | 	add	fp, #44
15748     A7 FA 61 FC | 	wrlong	result1, fp
1574c     08 4E 85 F1 | 	sub	fp, #8
15750     A7 12 02 FB | 	rdlong	arg01, fp
15754     04 4E 05 F1 | 	add	fp, #4
15758     A7 14 02 FB | 	rdlong	arg02, fp
1575c     FD 16 02 F6 | 	mov	arg03, result1
15760     28 4E 85 F1 | 	sub	fp, #40
15764     BC 6F B0 FD | 	call	#_hg010b_spin2_setspritepos
15768     A7 F0 03 F6 | 	mov	ptra, fp
1576c     B2 00 A0 FD | 	call	#popregs_
15770                 | _do_sprite_ret
15770     2D 00 64 FD | 	ret
15774                 | 
15774                 | ' 
15774                 | ' sub do_mousex
15774                 | _do_mousex
15774     00 4A 05 F6 | 	mov	COUNT_, #0
15778     A8 00 A0 FD | 	call	#pushregs_
1577c     0C F0 07 F1 | 	add	ptra, #12
15780     08 4E 05 F1 | 	add	fp, #8
15784     A7 3A 68 FC | 	wrlong	#29, fp
15788     08 4E 85 F1 | 	sub	fp, #8
1578c     79 00 00 FF 
15790     FC E4 05 F1 | 	add	objptr, ##62204
15794     F2 12 02 FB | 	rdlong	arg01, objptr
15798     79 00 00 FF 
1579c     FC E4 85 F1 | 	sub	objptr, ##62204
157a0     A7 12 62 FC | 	wrlong	arg01, fp
157a4     A7 12 02 F6 | 	mov	arg01, fp
157a8     4C 51 BF FD | 	call	#_push
157ac     A7 F0 03 F6 | 	mov	ptra, fp
157b0     B2 00 A0 FD | 	call	#popregs_
157b4                 | _do_mousex_ret
157b4     2D 00 64 FD | 	ret
157b8                 | 
157b8                 | ' 
157b8                 | ' sub do_mousey
157b8                 | _do_mousey
157b8     00 4A 05 F6 | 	mov	COUNT_, #0
157bc     A8 00 A0 FD | 	call	#pushregs_
157c0     0C F0 07 F1 | 	add	ptra, #12
157c4     08 4E 05 F1 | 	add	fp, #8
157c8     A7 3A 68 FC | 	wrlong	#29, fp
157cc     08 4E 85 F1 | 	sub	fp, #8
157d0     79 00 00 FF 
157d4     00 E5 05 F1 | 	add	objptr, ##62208
157d8     F2 12 02 FB | 	rdlong	arg01, objptr
157dc     79 00 00 FF 
157e0     00 E5 85 F1 | 	sub	objptr, ##62208
157e4     A7 12 62 FC | 	wrlong	arg01, fp
157e8     A7 12 02 F6 | 	mov	arg01, fp
157ec     08 51 BF FD | 	call	#_push
157f0     A7 F0 03 F6 | 	mov	ptra, fp
157f4     B2 00 A0 FD | 	call	#popregs_
157f8                 | _do_mousey_ret
157f8     2D 00 64 FD | 	ret
157fc                 | 
157fc                 | ' 
157fc                 | ' sub do_mousew
157fc                 | _do_mousew
157fc     00 4A 05 F6 | 	mov	COUNT_, #0
15800     A8 00 A0 FD | 	call	#pushregs_
15804     0C F0 07 F1 | 	add	ptra, #12
15808     08 4E 05 F1 | 	add	fp, #8
1580c     A7 38 68 FC | 	wrlong	#28, fp
15810     08 4E 85 F1 | 	sub	fp, #8
15814     79 00 00 FF 
15818     08 E5 05 F1 | 	add	objptr, ##62216
1581c     F2 12 02 FB | 	rdlong	arg01, objptr
15820     79 00 00 FF 
15824     08 E5 85 F1 | 	sub	objptr, ##62216
15828     A7 12 62 FC | 	wrlong	arg01, fp
1582c     A7 12 02 F6 | 	mov	arg01, fp
15830     C4 50 BF FD | 	call	#_push
15834     A7 F0 03 F6 | 	mov	ptra, fp
15838     B2 00 A0 FD | 	call	#popregs_
1583c                 | _do_mousew_ret
1583c     2D 00 64 FD | 	ret
15840                 | 
15840                 | ' 
15840                 | ' sub do_mousek
15840                 | _do_mousek
15840     00 4A 05 F6 | 	mov	COUNT_, #0
15844     A8 00 A0 FD | 	call	#pushregs_
15848     0C F0 07 F1 | 	add	ptra, #12
1584c     08 4E 05 F1 | 	add	fp, #8
15850     A7 3A 68 FC | 	wrlong	#29, fp
15854     08 4E 85 F1 | 	sub	fp, #8
15858     79 00 00 FF 
1585c     04 E5 05 F1 | 	add	objptr, ##62212
15860     F2 12 02 FB | 	rdlong	arg01, objptr
15864     79 00 00 FF 
15868     04 E5 85 F1 | 	sub	objptr, ##62212
1586c     A7 12 62 FC | 	wrlong	arg01, fp
15870     A7 12 02 F6 | 	mov	arg01, fp
15874     80 50 BF FD | 	call	#_push
15878     A7 F0 03 F6 | 	mov	ptra, fp
1587c     B2 00 A0 FD | 	call	#popregs_
15880                 | _do_mousek_ret
15880     2D 00 64 FD | 	ret
15884                 | 
15884                 | ' 
15884                 | ' 
15884                 | ' sub do_rdpin
15884                 | _do_rdpin
15884     00 4A 05 F6 | 	mov	COUNT_, #0
15888     A8 00 A0 FD | 	call	#pushregs_
1588c     0C F0 07 F1 | 	add	ptra, #12
15890     CC 4F BF FD | 	call	#_pop
15894     A7 FA 61 FC | 	wrlong	result1, fp
15898     04 4E 05 F1 | 	add	fp, #4
1589c     A7 FC 61 FC | 	wrlong	result2, fp
158a0     04 4E 05 F1 | 	add	fp, #4
158a4     A7 FE 61 FC | 	wrlong	result3, fp
158a8     08 4E 85 F1 | 	sub	fp, #8
158ac     A7 12 02 F6 | 	mov	arg01, fp
158b0     40 DC BF FD | 	call	#_converttoint
158b4     FD FA 89 FA | 	rdpin	result1, result1
158b8     7A 00 00 FF 
158bc     30 E4 05 F1 | 	add	objptr, ##62512
158c0     F2 FA 61 FC | 	wrlong	result1, objptr
158c4     7A 00 00 FF 
158c8     30 E4 85 F1 | 	sub	objptr, ##62512
158cc     08 4E 05 F1 | 	add	fp, #8
158d0     A7 3A 68 FC | 	wrlong	#29, fp
158d4     08 4E 85 F1 | 	sub	fp, #8
158d8     A7 08 68 FC | 	wrlong	#4, fp
158dc     A7 12 02 F6 | 	mov	arg01, fp
158e0     14 50 BF FD | 	call	#_push
158e4     A7 F0 03 F6 | 	mov	ptra, fp
158e8     B2 00 A0 FD | 	call	#popregs_
158ec                 | _do_rdpin_ret
158ec     2D 00 64 FD | 	ret
158f0                 | 
158f0                 | ' 
158f0                 | ' sub do_rqpin
158f0                 | _do_rqpin
158f0     00 4A 05 F6 | 	mov	COUNT_, #0
158f4     A8 00 A0 FD | 	call	#pushregs_
158f8     0C F0 07 F1 | 	add	ptra, #12
158fc     60 4F BF FD | 	call	#_pop
15900     A7 FA 61 FC | 	wrlong	result1, fp
15904     04 4E 05 F1 | 	add	fp, #4
15908     A7 FC 61 FC | 	wrlong	result2, fp
1590c     04 4E 05 F1 | 	add	fp, #4
15910     A7 FE 61 FC | 	wrlong	result3, fp
15914     08 4E 85 F1 | 	sub	fp, #8
15918     A7 12 02 F6 | 	mov	arg01, fp
1591c     D4 DB BF FD | 	call	#_converttoint
15920     FD 12 02 F6 | 	mov	arg01, result1
15924     00 FA 05 F6 | 	mov	result1, #0
15928     09 FB 81 FA | 	rqpin	result1, arg01
1592c     7A 00 00 FF 
15930     30 E4 05 F1 | 	add	objptr, ##62512
15934     F2 FA 61 FC | 	wrlong	result1, objptr
15938     7A 00 00 FF 
1593c     30 E4 85 F1 | 	sub	objptr, ##62512
15940     08 4E 05 F1 | 	add	fp, #8
15944     A7 3A 68 FC | 	wrlong	#29, fp
15948     08 4E 85 F1 | 	sub	fp, #8
1594c     A7 08 68 FC | 	wrlong	#4, fp
15950     A7 12 02 F6 | 	mov	arg01, fp
15954     A0 4F BF FD | 	call	#_push
15958     A7 F0 03 F6 | 	mov	ptra, fp
1595c     B2 00 A0 FD | 	call	#popregs_
15960                 | _do_rqpin_ret
15960     2D 00 64 FD | 	ret
15964                 | 
15964                 | ' 
15964                 | ' sub do_pinread
15964                 | _do_pinread
15964     00 4A 05 F6 | 	mov	COUNT_, #0
15968     A8 00 A0 FD | 	call	#pushregs_
1596c     0C F0 07 F1 | 	add	ptra, #12
15970     EC 4E BF FD | 	call	#_pop
15974     A7 FA 61 FC | 	wrlong	result1, fp
15978     04 4E 05 F1 | 	add	fp, #4
1597c     A7 FC 61 FC | 	wrlong	result2, fp
15980     04 4E 05 F1 | 	add	fp, #4
15984     A7 FE 61 FC | 	wrlong	result3, fp
15988     08 4E 85 F1 | 	sub	fp, #8
1598c     A7 12 02 F6 | 	mov	arg01, fp
15990     60 DB BF FD | 	call	#_converttoint
15994     FD 12 02 F6 | 	mov	arg01, result1
15998     20 12 CE F7 | 	test	arg01, #32 wz
1599c     FF FB 01 56 |  if_ne	mov	result1, inb
159a0     FE FB 01 A6 |  if_e	mov	result1, ina
159a4     09 FB 41 F0 | 	shr	result1, arg01
159a8     06 12 46 F0 | 	shr	arg01, #6
159ac     09 FB 41 F7 | 	zerox	result1, arg01
159b0     7A 00 00 FF 
159b4     30 E4 05 F1 | 	add	objptr, ##62512
159b8     F2 FA 61 FC | 	wrlong	result1, objptr
159bc     7A 00 00 FF 
159c0     30 E4 85 F1 | 	sub	objptr, ##62512
159c4     08 4E 05 F1 | 	add	fp, #8
159c8     A7 3A 68 FC | 	wrlong	#29, fp
159cc     08 4E 85 F1 | 	sub	fp, #8
159d0     A7 08 68 FC | 	wrlong	#4, fp
159d4     A7 12 02 F6 | 	mov	arg01, fp
159d8     1C 4F BF FD | 	call	#_push
159dc     A7 F0 03 F6 | 	mov	ptra, fp
159e0     B2 00 A0 FD | 	call	#popregs_
159e4                 | _do_pinread_ret
159e4     2D 00 64 FD | 	ret
159e8                 | 
159e8                 | ' 
159e8                 | ' sub do_gettime
159e8                 | _do_gettime
159e8     02 4A 05 F6 | 	mov	COUNT_, #2
159ec     A8 00 A0 FD | 	call	#pushregs_
159f0     14 F0 07 F1 | 	add	ptra, #20
159f4                 | ' 
159f4                 | ' const asm 
159f4     1A 1E 72 FD | 	getct	local01 wc
159f8     1A 20 62 FD | 	getct	local02
159fc                 | ' 
159fc                 | ' return hi1, lo1
159fc     10 FD 01 F6 | 	mov	result2, local02
15a00     A7 1E 62 FC | 	wrlong	local01, fp
15a04     04 4E 05 F1 | 	add	fp, #4
15a08     A7 FC 61 FC | 	wrlong	result2, fp
15a0c     0C 4E 05 F1 | 	add	fp, #12
15a10     A7 3A 68 FC | 	wrlong	#29, fp
15a14     0C 4E 85 F1 | 	sub	fp, #12
15a18     A7 12 02 FB | 	rdlong	arg01, fp
15a1c     04 4E 05 F1 | 	add	fp, #4
15a20     A7 12 62 FC | 	wrlong	arg01, fp
15a24     08 4E 85 F1 | 	sub	fp, #8
15a28     A7 12 02 FB | 	rdlong	arg01, fp
15a2c     0C 4E 05 F1 | 	add	fp, #12
15a30     A7 12 62 FC | 	wrlong	arg01, fp
15a34     04 4E 85 F1 | 	sub	fp, #4
15a38     A7 12 02 F6 | 	mov	arg01, fp
15a3c     08 4E 85 F1 | 	sub	fp, #8
15a40     B4 4E BF FD | 	call	#_push
15a44     A7 F0 03 F6 | 	mov	ptra, fp
15a48     B2 00 A0 FD | 	call	#popregs_
15a4c                 | _do_gettime_ret
15a4c     2D 00 64 FD | 	ret
15a50                 | 
15a50                 | '    
15a50                 | ' 
15a50                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
15a50                 | ' 
15a50                 | ' '' ----------------------------- Clear the screen
15a50                 | ' 
15a50                 | ' sub do_cls
15a50                 | _do_cls
15a50     57 00 00 FF 
15a54     3C E4 05 F1 | 	add	objptr, ##44604
15a58     F2 12 02 FB | 	rdlong	arg01, objptr
15a5c     04 E4 85 F1 | 	sub	objptr, #4
15a60     F2 14 02 FB | 	rdlong	arg02, objptr
15a64     57 00 00 FF 
15a68     38 E4 85 F1 | 	sub	objptr, ##44600
15a6c     3C 7A B0 FD | 	call	#_hg010b_spin2_cls
15a70     57 00 00 FF 
15a74     3C E4 05 F1 | 	add	objptr, ##44604
15a78     F2 14 02 FB | 	rdlong	arg02, objptr
15a7c     14 E4 85 F1 | 	sub	objptr, #20
15a80     F2 14 62 FC | 	wrlong	arg02, objptr
15a84     57 00 00 FF 
15a88     28 E4 85 F1 | 	sub	objptr, ##44584
15a8c                 | ' cls(ink,paper): plot_color=ink: print
15a8c     00 12 06 F6 | 	mov	arg01, #0
15a90     3C EA B0 FD | 	call	#__system___getiolock_0484
15a94     FD 12 02 F6 | 	mov	arg01, result1
15a98     9C 90 B0 FD | 	call	#__system___lockmem
15a9c     00 12 06 F6 | 	mov	arg01, #0
15aa0     0A 14 06 F6 | 	mov	arg02, #10
15aa4     00 16 06 F6 | 	mov	arg03, #0
15aa8     3C 9D B0 FD | 	call	#__system___basic_print_char
15aac     00 12 06 F6 | 	mov	arg01, #0
15ab0     1C EA B0 FD | 	call	#__system___getiolock_0484
15ab4     FD 00 68 FC | 	wrlong	#0, result1
15ab8                 | _do_cls_ret
15ab8     2D 00 64 FD | 	ret
15abc                 | 
15abc                 | ' 
15abc                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
15abc                 | ' 
15abc                 | ' sub do_color
15abc                 | _do_color
15abc     03 4A 05 F6 | 	mov	COUNT_, #3
15ac0     A8 00 A0 FD | 	call	#pushregs_
15ac4     98 4D BF FD | 	call	#_pop
15ac8     FD 1E 02 F6 | 	mov	local01, result1
15acc     FE 20 02 F6 | 	mov	local02, result2
15ad0     FF 22 02 F6 | 	mov	local03, result3
15ad4     57 00 00 FF 
15ad8     28 E4 05 F1 | 	add	objptr, ##44584
15adc     F2 1E 62 FC | 	wrlong	local01, objptr
15ae0     57 00 00 FF 
15ae4     28 E4 85 F1 | 	sub	objptr, ##44584
15ae8     A7 F0 03 F6 | 	mov	ptra, fp
15aec     B2 00 A0 FD | 	call	#popregs_
15af0                 | _do_color_ret
15af0     2D 00 64 FD | 	ret
15af4                 | 
15af4                 | ' 
15af4                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
15af4                 | ' 
15af4                 | ' sub do_plot
15af4                 | _do_plot
15af4     00 4A 05 F6 | 	mov	COUNT_, #0
15af8     A8 00 A0 FD | 	call	#pushregs_
15afc     20 F0 07 F1 | 	add	ptra, #32
15b00     5C 4D BF FD | 	call	#_pop
15b04     FD 16 02 F6 | 	mov	arg03, result1
15b08     FE 14 02 F6 | 	mov	arg02, result2
15b0c     FF 12 02 F6 | 	mov	arg01, result3
15b10     0C 4E 05 F1 | 	add	fp, #12
15b14     A7 16 62 FC | 	wrlong	arg03, fp
15b18     04 4E 05 F1 | 	add	fp, #4
15b1c     A7 14 62 FC | 	wrlong	arg02, fp
15b20     04 4E 05 F1 | 	add	fp, #4
15b24     A7 12 62 FC | 	wrlong	arg01, fp
15b28     14 4E 85 F1 | 	sub	fp, #20
15b2c     30 4D BF FD | 	call	#_pop
15b30     FF 16 02 F6 | 	mov	arg03, result3
15b34     A7 FA 61 FC | 	wrlong	result1, fp
15b38     04 4E 05 F1 | 	add	fp, #4
15b3c     A7 FC 61 FC | 	wrlong	result2, fp
15b40     04 4E 05 F1 | 	add	fp, #4
15b44     A7 16 62 FC | 	wrlong	arg03, fp
15b48     08 4E 85 F1 | 	sub	fp, #8
15b4c     A7 12 02 F6 | 	mov	arg01, fp
15b50     A0 D9 BF FD | 	call	#_converttoint
15b54     18 4E 05 F1 | 	add	fp, #24
15b58     A7 FA 61 FC | 	wrlong	result1, fp
15b5c     0C 4E 85 F1 | 	sub	fp, #12
15b60     A7 12 02 F6 | 	mov	arg01, fp
15b64     0C 4E 85 F1 | 	sub	fp, #12
15b68     88 D9 BF FD | 	call	#_converttoint
15b6c     1C 4E 05 F1 | 	add	fp, #28
15b70     A7 FA 61 FC | 	wrlong	result1, fp
15b74     04 4E 85 F1 | 	sub	fp, #4
15b78     A7 16 02 FB | 	rdlong	arg03, fp
15b7c     57 00 00 FF 
15b80     2C E4 05 F1 | 	add	objptr, ##44588
15b84     F2 16 62 FC | 	wrlong	arg03, objptr
15b88     04 4E 05 F1 | 	add	fp, #4
15b8c     A7 14 02 FB | 	rdlong	arg02, fp
15b90     1C 4E 85 F1 | 	sub	fp, #28
15b94     04 E4 05 F1 | 	add	objptr, #4
15b98     F2 14 62 FC | 	wrlong	arg02, objptr
15b9c     04 E4 85 F1 | 	sub	objptr, #4
15ba0     F2 12 02 FB | 	rdlong	arg01, objptr
15ba4     04 E4 85 F1 | 	sub	objptr, #4
15ba8     F2 16 02 FB | 	rdlong	arg03, objptr
15bac     57 00 00 FF 
15bb0     28 E4 85 F1 | 	sub	objptr, ##44584
15bb4     20 6C B0 FD | 	call	#_hg010b_spin2_putpixel
15bb8     A7 F0 03 F6 | 	mov	ptra, fp
15bbc     B2 00 A0 FD | 	call	#popregs_
15bc0                 | _do_plot_ret
15bc0     2D 00 64 FD | 	ret
15bc4                 | 
15bc4                 | ' 
15bc4                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
15bc4                 | ' 
15bc4                 | ' sub do_draw
15bc4                 | _do_draw
15bc4     00 4A 05 F6 | 	mov	COUNT_, #0
15bc8     A8 00 A0 FD | 	call	#pushregs_
15bcc     20 F0 07 F1 | 	add	ptra, #32
15bd0     8C 4C BF FD | 	call	#_pop
15bd4     FD 1A 02 F6 | 	mov	arg05, result1
15bd8     FE 18 02 F6 | 	mov	arg04, result2
15bdc     FF 16 02 F6 | 	mov	arg03, result3
15be0     0C 4E 05 F1 | 	add	fp, #12
15be4     A7 1A 62 FC | 	wrlong	arg05, fp
15be8     04 4E 05 F1 | 	add	fp, #4
15bec     A7 18 62 FC | 	wrlong	arg04, fp
15bf0     04 4E 05 F1 | 	add	fp, #4
15bf4     A7 16 62 FC | 	wrlong	arg03, fp
15bf8     14 4E 85 F1 | 	sub	fp, #20
15bfc     60 4C BF FD | 	call	#_pop
15c00     FF 1A 02 F6 | 	mov	arg05, result3
15c04     A7 FA 61 FC | 	wrlong	result1, fp
15c08     04 4E 05 F1 | 	add	fp, #4
15c0c     A7 FC 61 FC | 	wrlong	result2, fp
15c10     04 4E 05 F1 | 	add	fp, #4
15c14     A7 1A 62 FC | 	wrlong	arg05, fp
15c18     08 4E 85 F1 | 	sub	fp, #8
15c1c     A7 12 02 F6 | 	mov	arg01, fp
15c20     D0 D8 BF FD | 	call	#_converttoint
15c24     18 4E 05 F1 | 	add	fp, #24
15c28     A7 FA 61 FC | 	wrlong	result1, fp
15c2c     0C 4E 85 F1 | 	sub	fp, #12
15c30     A7 12 02 F6 | 	mov	arg01, fp
15c34     0C 4E 85 F1 | 	sub	fp, #12
15c38     B8 D8 BF FD | 	call	#_converttoint
15c3c     1C 4E 05 F1 | 	add	fp, #28
15c40     A7 FA 61 FC | 	wrlong	result1, fp
15c44     57 00 00 FF 
15c48     2C E4 05 F1 | 	add	objptr, ##44588
15c4c     F2 12 02 FB | 	rdlong	arg01, objptr
15c50     04 E4 05 F1 | 	add	objptr, #4
15c54     F2 14 02 FB | 	rdlong	arg02, objptr
15c58     04 4E 85 F1 | 	sub	fp, #4
15c5c     A7 16 02 FB | 	rdlong	arg03, fp
15c60     FD 18 02 F6 | 	mov	arg04, result1
15c64     18 4E 85 F1 | 	sub	fp, #24
15c68     08 E4 85 F1 | 	sub	objptr, #8
15c6c     F2 1A 02 FB | 	rdlong	arg05, objptr
15c70     57 00 00 FF 
15c74     28 E4 85 F1 | 	sub	objptr, ##44584
15c78     0C 6E B0 FD | 	call	#_hg010b_spin2_draw
15c7c     18 4E 05 F1 | 	add	fp, #24
15c80     A7 1A 02 FB | 	rdlong	arg05, fp
15c84     57 00 00 FF 
15c88     2C E4 05 F1 | 	add	objptr, ##44588
15c8c     F2 1A 62 FC | 	wrlong	arg05, objptr
15c90     04 4E 05 F1 | 	add	fp, #4
15c94     A7 1A 02 FB | 	rdlong	arg05, fp
15c98     1C 4E 85 F1 | 	sub	fp, #28
15c9c     04 E4 05 F1 | 	add	objptr, #4
15ca0     F2 1A 62 FC | 	wrlong	arg05, objptr
15ca4     57 00 00 FF 
15ca8     30 E4 85 F1 | 	sub	objptr, ##44592
15cac     A7 F0 03 F6 | 	mov	ptra, fp
15cb0     B2 00 A0 FD | 	call	#popregs_
15cb4                 | _do_draw_ret
15cb4     2D 00 64 FD | 	ret
15cb8                 | 
15cb8                 | ' 
15cb8                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
15cb8                 | ' 
15cb8                 | ' sub do_fcircle
15cb8                 | _do_fcircle
15cb8     02 4A 05 F6 | 	mov	COUNT_, #2
15cbc     A8 00 A0 FD | 	call	#pushregs_
15cc0     24 F0 07 F1 | 	add	ptra, #36
15cc4     98 4B BF FD | 	call	#_pop
15cc8     FD 18 02 F6 | 	mov	arg04, result1
15ccc     FE 16 02 F6 | 	mov	arg03, result2
15cd0     FF 14 02 F6 | 	mov	arg02, result3
15cd4     18 4E 05 F1 | 	add	fp, #24
15cd8     A7 18 62 FC | 	wrlong	arg04, fp
15cdc     04 4E 05 F1 | 	add	fp, #4
15ce0     A7 16 62 FC | 	wrlong	arg03, fp
15ce4     04 4E 05 F1 | 	add	fp, #4
15ce8     A7 14 62 FC | 	wrlong	arg02, fp
15cec     20 4E 85 F1 | 	sub	fp, #32
15cf0     6C 4B BF FD | 	call	#_pop
15cf4     FD 18 02 F6 | 	mov	arg04, result1
15cf8     FE 16 02 F6 | 	mov	arg03, result2
15cfc     FF 1E 02 F6 | 	mov	local01, result3
15d00     0C 4E 05 F1 | 	add	fp, #12
15d04     A7 18 62 FC | 	wrlong	arg04, fp
15d08     04 4E 05 F1 | 	add	fp, #4
15d0c     A7 16 62 FC | 	wrlong	arg03, fp
15d10     04 4E 05 F1 | 	add	fp, #4
15d14     A7 1E 62 FC | 	wrlong	local01, fp
15d18     14 4E 85 F1 | 	sub	fp, #20
15d1c     40 4B BF FD | 	call	#_pop
15d20     A7 FA 61 FC | 	wrlong	result1, fp
15d24     04 4E 05 F1 | 	add	fp, #4
15d28     A7 FC 61 FC | 	wrlong	result2, fp
15d2c     04 4E 05 F1 | 	add	fp, #4
15d30     A7 FE 61 FC | 	wrlong	result3, fp
15d34                 | ' 
15d34                 | ' t3=pop()
15d34                 | ' t2=pop()
15d34                 | ' t1=pop()
15d34                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
15d34     FF 18 02 F6 | 	mov	arg04, result3
15d38     08 4E 85 F1 | 	sub	fp, #8
15d3c     1C 18 0E F2 | 	cmp	arg04, #28 wz
15d40     08 4E 05 51 |  if_ne	add	fp, #8
15d44     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15d48     08 4E 85 51 |  if_ne	sub	fp, #8
15d4c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15d50     7C 00 90 5D |  if_ne	jmp	#LR__1780
15d54     14 4E 05 F1 | 	add	fp, #20
15d58     A7 1E 02 FB | 	rdlong	local01, fp
15d5c     14 4E 85 F1 | 	sub	fp, #20
15d60     1C 1E 0E F2 | 	cmp	local01, #28 wz
15d64     14 4E 05 51 |  if_ne	add	fp, #20
15d68     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15d6c     14 4E 85 51 |  if_ne	sub	fp, #20
15d70     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15d74     58 00 90 5D |  if_ne	jmp	#LR__1780
15d78     20 4E 05 F1 | 	add	fp, #32
15d7c     A7 1E 02 FB | 	rdlong	local01, fp
15d80     20 4E 85 F1 | 	sub	fp, #32
15d84     1C 1E 0E F2 | 	cmp	local01, #28 wz
15d88     20 4E 05 51 |  if_ne	add	fp, #32
15d8c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15d90     20 4E 85 51 |  if_ne	sub	fp, #32
15d94     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15d98     34 00 90 5D |  if_ne	jmp	#LR__1780
15d9c     A7 12 02 FB | 	rdlong	arg01, fp
15da0     0C 4E 05 F1 | 	add	fp, #12
15da4     A7 14 02 FB | 	rdlong	arg02, fp
15da8     0C 4E 05 F1 | 	add	fp, #12
15dac     A7 16 02 FB | 	rdlong	arg03, fp
15db0     18 4E 85 F1 | 	sub	fp, #24
15db4     57 00 00 FF 
15db8     28 E4 05 F1 | 	add	objptr, ##44584
15dbc     F2 18 02 FB | 	rdlong	arg04, objptr
15dc0     57 00 00 FF 
15dc4     28 E4 85 F1 | 	sub	objptr, ##44584
15dc8     40 71 B0 FD | 	call	#_hg010b_spin2_fcircle
15dcc                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
15dcc     54 00 90 FD | 	jmp	#LR__1781
15dd0                 | LR__1780
15dd0     A7 12 02 F6 | 	mov	arg01, fp
15dd4     1C D7 BF FD | 	call	#_converttoint
15dd8     FD 1E 02 F6 | 	mov	local01, result1
15ddc     0C 4E 05 F1 | 	add	fp, #12
15de0     A7 12 02 F6 | 	mov	arg01, fp
15de4     0C 4E 85 F1 | 	sub	fp, #12
15de8     08 D7 BF FD | 	call	#_converttoint
15dec     FD 20 02 F6 | 	mov	local02, result1
15df0     18 4E 05 F1 | 	add	fp, #24
15df4     A7 12 02 F6 | 	mov	arg01, fp
15df8     18 4E 85 F1 | 	sub	fp, #24
15dfc     F4 D6 BF FD | 	call	#_converttoint
15e00     FD 16 02 F6 | 	mov	arg03, result1
15e04     57 00 00 FF 
15e08     28 E4 05 F1 | 	add	objptr, ##44584
15e0c     F2 18 02 FB | 	rdlong	arg04, objptr
15e10     57 00 00 FF 
15e14     28 E4 85 F1 | 	sub	objptr, ##44584
15e18     0F 13 02 F6 | 	mov	arg01, local01
15e1c     10 15 02 F6 | 	mov	arg02, local02
15e20     E8 70 B0 FD | 	call	#_hg010b_spin2_fcircle
15e24                 | LR__1781
15e24     A7 F0 03 F6 | 	mov	ptra, fp
15e28     B2 00 A0 FD | 	call	#popregs_
15e2c                 | _do_fcircle_ret
15e2c     2D 00 64 FD | 	ret
15e30                 | 
15e30                 | ' 
15e30                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
15e30                 | ' 
15e30                 | ' sub do_circle
15e30                 | _do_circle
15e30     02 4A 05 F6 | 	mov	COUNT_, #2
15e34     A8 00 A0 FD | 	call	#pushregs_
15e38     24 F0 07 F1 | 	add	ptra, #36
15e3c     20 4A BF FD | 	call	#_pop
15e40     FD 18 02 F6 | 	mov	arg04, result1
15e44     FE 16 02 F6 | 	mov	arg03, result2
15e48     FF 14 02 F6 | 	mov	arg02, result3
15e4c     18 4E 05 F1 | 	add	fp, #24
15e50     A7 18 62 FC | 	wrlong	arg04, fp
15e54     04 4E 05 F1 | 	add	fp, #4
15e58     A7 16 62 FC | 	wrlong	arg03, fp
15e5c     04 4E 05 F1 | 	add	fp, #4
15e60     A7 14 62 FC | 	wrlong	arg02, fp
15e64     20 4E 85 F1 | 	sub	fp, #32
15e68     F4 49 BF FD | 	call	#_pop
15e6c     FD 18 02 F6 | 	mov	arg04, result1
15e70     FE 16 02 F6 | 	mov	arg03, result2
15e74     FF 1E 02 F6 | 	mov	local01, result3
15e78     0C 4E 05 F1 | 	add	fp, #12
15e7c     A7 18 62 FC | 	wrlong	arg04, fp
15e80     04 4E 05 F1 | 	add	fp, #4
15e84     A7 16 62 FC | 	wrlong	arg03, fp
15e88     04 4E 05 F1 | 	add	fp, #4
15e8c     A7 1E 62 FC | 	wrlong	local01, fp
15e90     14 4E 85 F1 | 	sub	fp, #20
15e94     C8 49 BF FD | 	call	#_pop
15e98     A7 FA 61 FC | 	wrlong	result1, fp
15e9c     04 4E 05 F1 | 	add	fp, #4
15ea0     A7 FC 61 FC | 	wrlong	result2, fp
15ea4     04 4E 05 F1 | 	add	fp, #4
15ea8     A7 FE 61 FC | 	wrlong	result3, fp
15eac                 | ' 
15eac                 | ' t3=pop()
15eac                 | ' t2=pop()
15eac                 | ' t1=pop()
15eac                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
15eac     FF 18 02 F6 | 	mov	arg04, result3
15eb0     08 4E 85 F1 | 	sub	fp, #8
15eb4     1C 18 0E F2 | 	cmp	arg04, #28 wz
15eb8     08 4E 05 51 |  if_ne	add	fp, #8
15ebc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15ec0     08 4E 85 51 |  if_ne	sub	fp, #8
15ec4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15ec8     7C 00 90 5D |  if_ne	jmp	#LR__1790
15ecc     14 4E 05 F1 | 	add	fp, #20
15ed0     A7 1E 02 FB | 	rdlong	local01, fp
15ed4     14 4E 85 F1 | 	sub	fp, #20
15ed8     1C 1E 0E F2 | 	cmp	local01, #28 wz
15edc     14 4E 05 51 |  if_ne	add	fp, #20
15ee0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15ee4     14 4E 85 51 |  if_ne	sub	fp, #20
15ee8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15eec     58 00 90 5D |  if_ne	jmp	#LR__1790
15ef0     20 4E 05 F1 | 	add	fp, #32
15ef4     A7 1E 02 FB | 	rdlong	local01, fp
15ef8     20 4E 85 F1 | 	sub	fp, #32
15efc     1C 1E 0E F2 | 	cmp	local01, #28 wz
15f00     20 4E 05 51 |  if_ne	add	fp, #32
15f04     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15f08     20 4E 85 51 |  if_ne	sub	fp, #32
15f0c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15f10     34 00 90 5D |  if_ne	jmp	#LR__1790
15f14     A7 12 02 FB | 	rdlong	arg01, fp
15f18     0C 4E 05 F1 | 	add	fp, #12
15f1c     A7 14 02 FB | 	rdlong	arg02, fp
15f20     0C 4E 05 F1 | 	add	fp, #12
15f24     A7 16 02 FB | 	rdlong	arg03, fp
15f28     18 4E 85 F1 | 	sub	fp, #24
15f2c     57 00 00 FF 
15f30     28 E4 05 F1 | 	add	objptr, ##44584
15f34     F2 18 02 FB | 	rdlong	arg04, objptr
15f38     57 00 00 FF 
15f3c     28 E4 85 F1 | 	sub	objptr, ##44584
15f40     D4 70 B0 FD | 	call	#_hg010b_spin2_circle
15f44                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
15f44     54 00 90 FD | 	jmp	#LR__1791
15f48                 | LR__1790
15f48     A7 12 02 F6 | 	mov	arg01, fp
15f4c     A4 D5 BF FD | 	call	#_converttoint
15f50     FD 1E 02 F6 | 	mov	local01, result1
15f54     0C 4E 05 F1 | 	add	fp, #12
15f58     A7 12 02 F6 | 	mov	arg01, fp
15f5c     0C 4E 85 F1 | 	sub	fp, #12
15f60     90 D5 BF FD | 	call	#_converttoint
15f64     FD 20 02 F6 | 	mov	local02, result1
15f68     18 4E 05 F1 | 	add	fp, #24
15f6c     A7 12 02 F6 | 	mov	arg01, fp
15f70     18 4E 85 F1 | 	sub	fp, #24
15f74     7C D5 BF FD | 	call	#_converttoint
15f78     FD 16 02 F6 | 	mov	arg03, result1
15f7c     57 00 00 FF 
15f80     28 E4 05 F1 | 	add	objptr, ##44584
15f84     F2 18 02 FB | 	rdlong	arg04, objptr
15f88     57 00 00 FF 
15f8c     28 E4 85 F1 | 	sub	objptr, ##44584
15f90     0F 13 02 F6 | 	mov	arg01, local01
15f94     10 15 02 F6 | 	mov	arg02, local02
15f98     7C 70 B0 FD | 	call	#_hg010b_spin2_circle
15f9c                 | LR__1791
15f9c     A7 F0 03 F6 | 	mov	ptra, fp
15fa0     B2 00 A0 FD | 	call	#popregs_
15fa4                 | _do_circle_ret
15fa4     2D 00 64 FD | 	ret
15fa8                 | 
15fa8                 | ' 
15fa8                 | ' ' -------------------------- Draw a rectangle
15fa8                 | ' 
15fa8                 | ' sub do_box
15fa8                 | _do_box
15fa8     03 4A 05 F6 | 	mov	COUNT_, #3
15fac     A8 00 A0 FD | 	call	#pushregs_
15fb0     30 F0 07 F1 | 	add	ptra, #48
15fb4     A8 48 BF FD | 	call	#_pop
15fb8     FD 1A 02 F6 | 	mov	arg05, result1
15fbc     FE 18 02 F6 | 	mov	arg04, result2
15fc0     FF 16 02 F6 | 	mov	arg03, result3
15fc4     24 4E 05 F1 | 	add	fp, #36
15fc8     A7 1A 62 FC | 	wrlong	arg05, fp
15fcc     04 4E 05 F1 | 	add	fp, #4
15fd0     A7 18 62 FC | 	wrlong	arg04, fp
15fd4     04 4E 05 F1 | 	add	fp, #4
15fd8     A7 16 62 FC | 	wrlong	arg03, fp
15fdc     2C 4E 85 F1 | 	sub	fp, #44
15fe0     7C 48 BF FD | 	call	#_pop
15fe4     FD 1A 02 F6 | 	mov	arg05, result1
15fe8     FE 18 02 F6 | 	mov	arg04, result2
15fec     FF 16 02 F6 | 	mov	arg03, result3
15ff0     18 4E 05 F1 | 	add	fp, #24
15ff4     A7 1A 62 FC | 	wrlong	arg05, fp
15ff8     04 4E 05 F1 | 	add	fp, #4
15ffc     A7 18 62 FC | 	wrlong	arg04, fp
16000     04 4E 05 F1 | 	add	fp, #4
16004     A7 16 62 FC | 	wrlong	arg03, fp
16008     20 4E 85 F1 | 	sub	fp, #32
1600c     50 48 BF FD | 	call	#_pop
16010     FD 1A 02 F6 | 	mov	arg05, result1
16014     FE 18 02 F6 | 	mov	arg04, result2
16018     FF 1E 02 F6 | 	mov	local01, result3
1601c     0C 4E 05 F1 | 	add	fp, #12
16020     A7 1A 62 FC | 	wrlong	arg05, fp
16024     04 4E 05 F1 | 	add	fp, #4
16028     A7 18 62 FC | 	wrlong	arg04, fp
1602c     04 4E 05 F1 | 	add	fp, #4
16030     A7 1E 62 FC | 	wrlong	local01, fp
16034     14 4E 85 F1 | 	sub	fp, #20
16038     24 48 BF FD | 	call	#_pop
1603c     A7 FA 61 FC | 	wrlong	result1, fp
16040     04 4E 05 F1 | 	add	fp, #4
16044     A7 FC 61 FC | 	wrlong	result2, fp
16048     04 4E 05 F1 | 	add	fp, #4
1604c     A7 FE 61 FC | 	wrlong	result3, fp
16050                 | ' 
16050                 | ' t4=pop()
16050                 | ' t3=pop()
16050                 | ' t2=pop()
16050                 | ' t1=pop()
16050                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
16050     FF 1A 02 F6 | 	mov	arg05, result3
16054     08 4E 85 F1 | 	sub	fp, #8
16058     1C 1A 0E F2 | 	cmp	arg05, #28 wz
1605c     08 4E 05 51 |  if_ne	add	fp, #8
16060     A7 1E 02 5B |  if_ne	rdlong	local01, fp
16064     08 4E 85 51 |  if_ne	sub	fp, #8
16068     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1606c     A8 00 90 5D |  if_ne	jmp	#LR__1800
16070     14 4E 05 F1 | 	add	fp, #20
16074     A7 1E 02 FB | 	rdlong	local01, fp
16078     14 4E 85 F1 | 	sub	fp, #20
1607c     1C 1E 0E F2 | 	cmp	local01, #28 wz
16080     14 4E 05 51 |  if_ne	add	fp, #20
16084     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16088     14 4E 85 51 |  if_ne	sub	fp, #20
1608c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
16090     84 00 90 5D |  if_ne	jmp	#LR__1800
16094     20 4E 05 F1 | 	add	fp, #32
16098     A7 1E 02 FB | 	rdlong	local01, fp
1609c     20 4E 85 F1 | 	sub	fp, #32
160a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
160a4     20 4E 05 51 |  if_ne	add	fp, #32
160a8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
160ac     20 4E 85 51 |  if_ne	sub	fp, #32
160b0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
160b4     60 00 90 5D |  if_ne	jmp	#LR__1800
160b8     2C 4E 05 F1 | 	add	fp, #44
160bc     A7 1E 02 FB | 	rdlong	local01, fp
160c0     2C 4E 85 F1 | 	sub	fp, #44
160c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
160c8     2C 4E 05 51 |  if_ne	add	fp, #44
160cc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
160d0     2C 4E 85 51 |  if_ne	sub	fp, #44
160d4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
160d8     3C 00 90 5D |  if_ne	jmp	#LR__1800
160dc     A7 12 02 FB | 	rdlong	arg01, fp
160e0     0C 4E 05 F1 | 	add	fp, #12
160e4     A7 14 02 FB | 	rdlong	arg02, fp
160e8     0C 4E 05 F1 | 	add	fp, #12
160ec     A7 16 02 FB | 	rdlong	arg03, fp
160f0     0C 4E 05 F1 | 	add	fp, #12
160f4     A7 18 02 FB | 	rdlong	arg04, fp
160f8     24 4E 85 F1 | 	sub	fp, #36
160fc     57 00 00 FF 
16100     28 E4 05 F1 | 	add	objptr, ##44584
16104     F2 1A 02 FB | 	rdlong	arg05, objptr
16108     57 00 00 FF 
1610c     28 E4 85 F1 | 	sub	objptr, ##44584
16110     D0 70 B0 FD | 	call	#_hg010b_spin2_box
16114                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
16114     6C 00 90 FD | 	jmp	#LR__1801
16118                 | LR__1800
16118     A7 12 02 F6 | 	mov	arg01, fp
1611c     D4 D3 BF FD | 	call	#_converttoint
16120     FD 20 02 F6 | 	mov	local02, result1
16124     0C 4E 05 F1 | 	add	fp, #12
16128     A7 12 02 F6 | 	mov	arg01, fp
1612c     0C 4E 85 F1 | 	sub	fp, #12
16130     C0 D3 BF FD | 	call	#_converttoint
16134     FD 22 02 F6 | 	mov	local03, result1
16138     18 4E 05 F1 | 	add	fp, #24
1613c     A7 12 02 F6 | 	mov	arg01, fp
16140     18 4E 85 F1 | 	sub	fp, #24
16144     AC D3 BF FD | 	call	#_converttoint
16148     FD 1E 02 F6 | 	mov	local01, result1
1614c     24 4E 05 F1 | 	add	fp, #36
16150     A7 12 02 F6 | 	mov	arg01, fp
16154     24 4E 85 F1 | 	sub	fp, #36
16158     98 D3 BF FD | 	call	#_converttoint
1615c     FD 18 02 F6 | 	mov	arg04, result1
16160     57 00 00 FF 
16164     28 E4 05 F1 | 	add	objptr, ##44584
16168     F2 1A 02 FB | 	rdlong	arg05, objptr
1616c     57 00 00 FF 
16170     28 E4 85 F1 | 	sub	objptr, ##44584
16174     10 13 02 F6 | 	mov	arg01, local02
16178     11 15 02 F6 | 	mov	arg02, local03
1617c     0F 17 02 F6 | 	mov	arg03, local01
16180     60 70 B0 FD | 	call	#_hg010b_spin2_box
16184                 | LR__1801
16184     A7 F0 03 F6 | 	mov	ptra, fp
16188     B2 00 A0 FD | 	call	#popregs_
1618c                 | _do_box_ret
1618c     2D 00 64 FD | 	ret
16190                 | 
16190                 | ' 
16190                 | ' sub do_fill
16190                 | _do_fill
16190     03 4A 05 F6 | 	mov	COUNT_, #3
16194     A8 00 A0 FD | 	call	#pushregs_
16198     30 F0 07 F1 | 	add	ptra, #48
1619c     C0 46 BF FD | 	call	#_pop
161a0     FD 18 02 F6 | 	mov	arg04, result1
161a4     FE 16 02 F6 | 	mov	arg03, result2
161a8     FF 14 02 F6 | 	mov	arg02, result3
161ac     24 4E 05 F1 | 	add	fp, #36
161b0     A7 18 62 FC | 	wrlong	arg04, fp
161b4     04 4E 05 F1 | 	add	fp, #4
161b8     A7 16 62 FC | 	wrlong	arg03, fp
161bc     04 4E 05 F1 | 	add	fp, #4
161c0     A7 14 62 FC | 	wrlong	arg02, fp
161c4     2C 4E 85 F1 | 	sub	fp, #44
161c8     94 46 BF FD | 	call	#_pop
161cc     FD 18 02 F6 | 	mov	arg04, result1
161d0     FE 16 02 F6 | 	mov	arg03, result2
161d4     FF 14 02 F6 | 	mov	arg02, result3
161d8     18 4E 05 F1 | 	add	fp, #24
161dc     A7 18 62 FC | 	wrlong	arg04, fp
161e0     04 4E 05 F1 | 	add	fp, #4
161e4     A7 16 62 FC | 	wrlong	arg03, fp
161e8     04 4E 05 F1 | 	add	fp, #4
161ec     A7 14 62 FC | 	wrlong	arg02, fp
161f0     20 4E 85 F1 | 	sub	fp, #32
161f4     68 46 BF FD | 	call	#_pop
161f8     FD 18 02 F6 | 	mov	arg04, result1
161fc     FE 16 02 F6 | 	mov	arg03, result2
16200     FF 1E 02 F6 | 	mov	local01, result3
16204     0C 4E 05 F1 | 	add	fp, #12
16208     A7 18 62 FC | 	wrlong	arg04, fp
1620c     04 4E 05 F1 | 	add	fp, #4
16210     A7 16 62 FC | 	wrlong	arg03, fp
16214     04 4E 05 F1 | 	add	fp, #4
16218     A7 1E 62 FC | 	wrlong	local01, fp
1621c     14 4E 85 F1 | 	sub	fp, #20
16220     3C 46 BF FD | 	call	#_pop
16224     A7 FA 61 FC | 	wrlong	result1, fp
16228     04 4E 05 F1 | 	add	fp, #4
1622c     A7 FC 61 FC | 	wrlong	result2, fp
16230     04 4E 05 F1 | 	add	fp, #4
16234     A7 FE 61 FC | 	wrlong	result3, fp
16238                 | ' 
16238                 | ' t4=pop()
16238                 | ' t3=pop()
16238                 | ' t2=pop()
16238                 | ' t1=pop()
16238                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
16238     FF 18 02 F6 | 	mov	arg04, result3
1623c     08 4E 85 F1 | 	sub	fp, #8
16240     1C 18 0E F2 | 	cmp	arg04, #28 wz
16244     08 4E 05 51 |  if_ne	add	fp, #8
16248     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1624c     08 4E 85 51 |  if_ne	sub	fp, #8
16250     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
16254     94 00 90 5D |  if_ne	jmp	#LR__1810
16258     14 4E 05 F1 | 	add	fp, #20
1625c     A7 1E 02 FB | 	rdlong	local01, fp
16260     14 4E 85 F1 | 	sub	fp, #20
16264     1C 1E 0E F2 | 	cmp	local01, #28 wz
16268     14 4E 05 51 |  if_ne	add	fp, #20
1626c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
16270     14 4E 85 51 |  if_ne	sub	fp, #20
16274     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
16278     70 00 90 5D |  if_ne	jmp	#LR__1810
1627c     20 4E 05 F1 | 	add	fp, #32
16280     A7 1E 02 FB | 	rdlong	local01, fp
16284     20 4E 85 F1 | 	sub	fp, #32
16288     1C 1E 0E F2 | 	cmp	local01, #28 wz
1628c     20 4E 05 51 |  if_ne	add	fp, #32
16290     A7 18 02 5B |  if_ne	rdlong	arg04, fp
16294     20 4E 85 51 |  if_ne	sub	fp, #32
16298     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1629c     4C 00 90 5D |  if_ne	jmp	#LR__1810
162a0     2C 4E 05 F1 | 	add	fp, #44
162a4     A7 1E 02 FB | 	rdlong	local01, fp
162a8     2C 4E 85 F1 | 	sub	fp, #44
162ac     1C 1E 0E F2 | 	cmp	local01, #28 wz
162b0     2C 4E 05 51 |  if_ne	add	fp, #44
162b4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
162b8     2C 4E 85 51 |  if_ne	sub	fp, #44
162bc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
162c0     28 00 90 5D |  if_ne	jmp	#LR__1810
162c4     A7 12 02 FB | 	rdlong	arg01, fp
162c8     0C 4E 05 F1 | 	add	fp, #12
162cc     A7 14 02 FB | 	rdlong	arg02, fp
162d0     0C 4E 05 F1 | 	add	fp, #12
162d4     A7 16 02 FB | 	rdlong	arg03, fp
162d8     0C 4E 05 F1 | 	add	fp, #12
162dc     A7 18 02 FB | 	rdlong	arg04, fp
162e0     24 4E 85 F1 | 	sub	fp, #36
162e4     90 69 B0 FD | 	call	#_hg010b_spin2_fill
162e8                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
162e8     58 00 90 FD | 	jmp	#LR__1811
162ec                 | LR__1810
162ec     A7 12 02 F6 | 	mov	arg01, fp
162f0     00 D2 BF FD | 	call	#_converttoint
162f4     FD 20 02 F6 | 	mov	local02, result1
162f8     0C 4E 05 F1 | 	add	fp, #12
162fc     A7 12 02 F6 | 	mov	arg01, fp
16300     0C 4E 85 F1 | 	sub	fp, #12
16304     EC D1 BF FD | 	call	#_converttoint
16308     FD 22 02 F6 | 	mov	local03, result1
1630c     18 4E 05 F1 | 	add	fp, #24
16310     A7 12 02 F6 | 	mov	arg01, fp
16314     18 4E 85 F1 | 	sub	fp, #24
16318     D8 D1 BF FD | 	call	#_converttoint
1631c     FD 1E 02 F6 | 	mov	local01, result1
16320     24 4E 05 F1 | 	add	fp, #36
16324     A7 12 02 F6 | 	mov	arg01, fp
16328     24 4E 85 F1 | 	sub	fp, #36
1632c     C4 D1 BF FD | 	call	#_converttoint
16330     FD 18 02 F6 | 	mov	arg04, result1
16334     10 13 02 F6 | 	mov	arg01, local02
16338     11 15 02 F6 | 	mov	arg02, local03
1633c     0F 17 02 F6 | 	mov	arg03, local01
16340     34 69 B0 FD | 	call	#_hg010b_spin2_fill
16344                 | LR__1811
16344     A7 F0 03 F6 | 	mov	ptra, fp
16348     B2 00 A0 FD | 	call	#popregs_
1634c                 | _do_fill_ret
1634c     2D 00 64 FD | 	ret
16350                 | 
16350                 | ' 
16350                 | ' ' -------------------------- Draw a frane
16350                 | ' 
16350                 | ' sub do_frame
16350                 | _do_frame
16350     03 4A 05 F6 | 	mov	COUNT_, #3
16354     A8 00 A0 FD | 	call	#pushregs_
16358     30 F0 07 F1 | 	add	ptra, #48
1635c     00 45 BF FD | 	call	#_pop
16360     FD 1A 02 F6 | 	mov	arg05, result1
16364     FE 18 02 F6 | 	mov	arg04, result2
16368     FF 16 02 F6 | 	mov	arg03, result3
1636c     24 4E 05 F1 | 	add	fp, #36
16370     A7 1A 62 FC | 	wrlong	arg05, fp
16374     04 4E 05 F1 | 	add	fp, #4
16378     A7 18 62 FC | 	wrlong	arg04, fp
1637c     04 4E 05 F1 | 	add	fp, #4
16380     A7 16 62 FC | 	wrlong	arg03, fp
16384     2C 4E 85 F1 | 	sub	fp, #44
16388     D4 44 BF FD | 	call	#_pop
1638c     FD 1A 02 F6 | 	mov	arg05, result1
16390     FE 18 02 F6 | 	mov	arg04, result2
16394     FF 16 02 F6 | 	mov	arg03, result3
16398     18 4E 05 F1 | 	add	fp, #24
1639c     A7 1A 62 FC | 	wrlong	arg05, fp
163a0     04 4E 05 F1 | 	add	fp, #4
163a4     A7 18 62 FC | 	wrlong	arg04, fp
163a8     04 4E 05 F1 | 	add	fp, #4
163ac     A7 16 62 FC | 	wrlong	arg03, fp
163b0     20 4E 85 F1 | 	sub	fp, #32
163b4     A8 44 BF FD | 	call	#_pop
163b8     FD 1A 02 F6 | 	mov	arg05, result1
163bc     FE 18 02 F6 | 	mov	arg04, result2
163c0     FF 1E 02 F6 | 	mov	local01, result3
163c4     0C 4E 05 F1 | 	add	fp, #12
163c8     A7 1A 62 FC | 	wrlong	arg05, fp
163cc     04 4E 05 F1 | 	add	fp, #4
163d0     A7 18 62 FC | 	wrlong	arg04, fp
163d4     04 4E 05 F1 | 	add	fp, #4
163d8     A7 1E 62 FC | 	wrlong	local01, fp
163dc     14 4E 85 F1 | 	sub	fp, #20
163e0     7C 44 BF FD | 	call	#_pop
163e4     A7 FA 61 FC | 	wrlong	result1, fp
163e8     04 4E 05 F1 | 	add	fp, #4
163ec     A7 FC 61 FC | 	wrlong	result2, fp
163f0     04 4E 05 F1 | 	add	fp, #4
163f4     A7 FE 61 FC | 	wrlong	result3, fp
163f8                 | ' 
163f8                 | ' t4=pop()
163f8                 | ' t3=pop()
163f8                 | ' t2=pop()
163f8                 | ' t1=pop()
163f8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
163f8     FF 1A 02 F6 | 	mov	arg05, result3
163fc     08 4E 85 F1 | 	sub	fp, #8
16400     1C 1A 0E F2 | 	cmp	arg05, #28 wz
16404     08 4E 05 51 |  if_ne	add	fp, #8
16408     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1640c     08 4E 85 51 |  if_ne	sub	fp, #8
16410     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
16414     A8 00 90 5D |  if_ne	jmp	#LR__1820
16418     14 4E 05 F1 | 	add	fp, #20
1641c     A7 1E 02 FB | 	rdlong	local01, fp
16420     14 4E 85 F1 | 	sub	fp, #20
16424     1C 1E 0E F2 | 	cmp	local01, #28 wz
16428     14 4E 05 51 |  if_ne	add	fp, #20
1642c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16430     14 4E 85 51 |  if_ne	sub	fp, #20
16434     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
16438     84 00 90 5D |  if_ne	jmp	#LR__1820
1643c     20 4E 05 F1 | 	add	fp, #32
16440     A7 1E 02 FB | 	rdlong	local01, fp
16444     20 4E 85 F1 | 	sub	fp, #32
16448     1C 1E 0E F2 | 	cmp	local01, #28 wz
1644c     20 4E 05 51 |  if_ne	add	fp, #32
16450     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16454     20 4E 85 51 |  if_ne	sub	fp, #32
16458     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1645c     60 00 90 5D |  if_ne	jmp	#LR__1820
16460     2C 4E 05 F1 | 	add	fp, #44
16464     A7 1E 02 FB | 	rdlong	local01, fp
16468     2C 4E 85 F1 | 	sub	fp, #44
1646c     1C 1E 0E F2 | 	cmp	local01, #28 wz
16470     2C 4E 05 51 |  if_ne	add	fp, #44
16474     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16478     2C 4E 85 51 |  if_ne	sub	fp, #44
1647c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
16480     3C 00 90 5D |  if_ne	jmp	#LR__1820
16484     A7 12 02 FB | 	rdlong	arg01, fp
16488     0C 4E 05 F1 | 	add	fp, #12
1648c     A7 14 02 FB | 	rdlong	arg02, fp
16490     0C 4E 05 F1 | 	add	fp, #12
16494     A7 16 02 FB | 	rdlong	arg03, fp
16498     0C 4E 05 F1 | 	add	fp, #12
1649c     A7 18 02 FB | 	rdlong	arg04, fp
164a0     24 4E 85 F1 | 	sub	fp, #36
164a4     57 00 00 FF 
164a8     28 E4 05 F1 | 	add	objptr, ##44584
164ac     F2 1A 02 FB | 	rdlong	arg05, objptr
164b0     57 00 00 FF 
164b4     28 E4 85 F1 | 	sub	objptr, ##44584
164b8     A8 6C B0 FD | 	call	#_hg010b_spin2_frame
164bc                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
164bc     6C 00 90 FD | 	jmp	#LR__1821
164c0                 | LR__1820
164c0     A7 12 02 F6 | 	mov	arg01, fp
164c4     2C D0 BF FD | 	call	#_converttoint
164c8     FD 20 02 F6 | 	mov	local02, result1
164cc     0C 4E 05 F1 | 	add	fp, #12
164d0     A7 12 02 F6 | 	mov	arg01, fp
164d4     0C 4E 85 F1 | 	sub	fp, #12
164d8     18 D0 BF FD | 	call	#_converttoint
164dc     FD 22 02 F6 | 	mov	local03, result1
164e0     18 4E 05 F1 | 	add	fp, #24
164e4     A7 12 02 F6 | 	mov	arg01, fp
164e8     18 4E 85 F1 | 	sub	fp, #24
164ec     04 D0 BF FD | 	call	#_converttoint
164f0     FD 1E 02 F6 | 	mov	local01, result1
164f4     24 4E 05 F1 | 	add	fp, #36
164f8     A7 12 02 F6 | 	mov	arg01, fp
164fc     24 4E 85 F1 | 	sub	fp, #36
16500     F0 CF BF FD | 	call	#_converttoint
16504     FD 18 02 F6 | 	mov	arg04, result1
16508     57 00 00 FF 
1650c     28 E4 05 F1 | 	add	objptr, ##44584
16510     F2 1A 02 FB | 	rdlong	arg05, objptr
16514     57 00 00 FF 
16518     28 E4 85 F1 | 	sub	objptr, ##44584
1651c     10 13 02 F6 | 	mov	arg01, local02
16520     11 15 02 F6 | 	mov	arg02, local03
16524     0F 17 02 F6 | 	mov	arg03, local01
16528     38 6C B0 FD | 	call	#_hg010b_spin2_frame
1652c                 | LR__1821
1652c     A7 F0 03 F6 | 	mov	ptra, fp
16530     B2 00 A0 FD | 	call	#popregs_
16534                 | _do_frame_ret
16534     2D 00 64 FD | 	ret
16538                 | 
16538                 | ' 
16538                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
16538                 | ' 
16538                 | ' ' ------------------------- Print to the screem
16538                 | ' 
16538                 | ' sub do_print  
16538                 | _do_print
16538     0A 4A 05 F6 | 	mov	COUNT_, #10
1653c     A8 00 A0 FD | 	call	#pushregs_
16540     00 24 06 F6 | 	mov	local04, #0
16544     18 43 BF FD | 	call	#_pop
16548     FD 26 02 F6 | 	mov	local05, result1
1654c     FE 28 02 F6 | 	mov	local06, result2
16550     FF 2A 02 F6 | 	mov	local07, result3
16554     13 1F 02 F6 | 	mov	local01, local05
16558     14 21 02 F6 | 	mov	local02, local06
1655c     15 23 02 F6 | 	mov	local03, local07
16560                 | '  
16560                 | ' r=0
16560                 | ' t1=pop() 
16560                 | ' 'print t1.result_type,t1.result.uresult
16560                 | ' 
16560                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
16560     21 22 0E F2 | 	cmp	local03, #33 wz
16564     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
16568     20 00 90 5D |  if_ne	jmp	#LR__1830
1656c     11 25 02 F6 | 	mov	local04, local03
16570     EC 42 BF FD | 	call	#_pop
16574     FD 26 02 F6 | 	mov	local05, result1
16578     FE 28 02 F6 | 	mov	local06, result2
1657c     FF 2A 02 F6 | 	mov	local07, result3
16580     13 1F 02 F6 | 	mov	local01, local05
16584     14 21 02 F6 | 	mov	local02, local06
16588     15 23 02 F6 | 	mov	local03, local07
1658c                 | LR__1830
1658c                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
1658c     20 22 0E F2 | 	cmp	local03, #32 wz
16590     11 25 02 A6 |  if_e	mov	local04, local03
16594                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
16594     FF 22 0E F2 | 	cmp	local03, #255 wz
16598     0C 00 90 5D |  if_ne	jmp	#LR__1831
1659c     0F 13 02 F6 | 	mov	arg01, local01
165a0     34 41 B0 FD | 	call	#_printerror
165a4     4C 04 90 FD | 	jmp	#LR__1849
165a8                 | LR__1831
165a8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
165a8     2B 22 0E F2 | 	cmp	local03, #43 wz
165ac     14 00 90 5D |  if_ne	jmp	#LR__1832
165b0     0F 13 02 F6 | 	mov	arg01, local01
165b4     18 87 BF FD | 	call	#_convertstring
165b8     FD 26 02 F6 | 	mov	local05, result1
165bc     13 1F 02 F6 | 	mov	local01, local05
165c0     1F 22 06 F6 | 	mov	local03, #31
165c4                 | LR__1832
165c4                 | ' 
165c4                 | ' if r=print_mod_comma  then
165c4     21 24 0E F2 | 	cmp	local04, #33 wz
165c8     AC 01 90 5D |  if_ne	jmp	#LR__1837
165cc                 | '   if t1.result_type=result_int then print t1.result.iresult,
165cc     1C 22 0E F2 | 	cmp	local03, #28 wz
165d0     64 00 90 5D |  if_ne	jmp	#LR__1833
165d4     00 12 06 F6 | 	mov	arg01, #0
165d8     F4 DE B0 FD | 	call	#__system___getiolock_0484
165dc     FD 12 02 F6 | 	mov	arg01, result1
165e0     54 85 B0 FD | 	call	#__system___lockmem
165e4     00 28 06 F6 | 	mov	local06, #0
165e8     00 12 06 F6 | 	mov	arg01, #0
165ec     0F 15 02 F6 | 	mov	arg02, local01
165f0     00 16 06 F6 | 	mov	arg03, #0
165f4     0A 18 06 F6 | 	mov	arg04, #10
165f8     88 92 B0 FD | 	call	#__system___basic_print_integer
165fc     FD 2A 02 F6 | 	mov	local07, result1
16600     14 27 02 F6 | 	mov	local05, local06
16604     15 27 02 F1 | 	add	local05, local07
16608     00 2C 06 F6 | 	mov	local08, #0
1660c     00 12 06 F6 | 	mov	arg01, #0
16610     09 14 06 F6 | 	mov	arg02, #9
16614     00 16 06 F6 | 	mov	arg03, #0
16618     CC 91 B0 FD | 	call	#__system___basic_print_char
1661c     FD 2E 02 F6 | 	mov	local09, result1
16620     FD 26 02 F1 | 	add	local05, result1
16624     00 12 06 F6 | 	mov	arg01, #0
16628     A4 DE B0 FD | 	call	#__system___getiolock_0484
1662c     FD 00 68 FC | 	wrlong	#0, result1
16630     00 FA 05 F6 | 	mov	result1, #0
16634     00 30 06 F6 | 	mov	local10, #0
16638                 | LR__1833
16638                 | '   if t1.result_type=result_uint then print t1.result.uresult,
16638     1D 22 0E F2 | 	cmp	local03, #29 wz
1663c     64 00 90 5D |  if_ne	jmp	#LR__1834
16640     00 12 06 F6 | 	mov	arg01, #0
16644     88 DE B0 FD | 	call	#__system___getiolock_0484
16648     FD 12 02 F6 | 	mov	arg01, result1
1664c     E8 84 B0 FD | 	call	#__system___lockmem
16650     00 28 06 F6 | 	mov	local06, #0
16654     00 12 06 F6 | 	mov	arg01, #0
16658     0F 15 02 F6 | 	mov	arg02, local01
1665c     00 16 06 F6 | 	mov	arg03, #0
16660     0A 18 06 F6 | 	mov	arg04, #10
16664     5C 92 B0 FD | 	call	#__system___basic_print_unsigned
16668     FD 2A 02 F6 | 	mov	local07, result1
1666c     14 27 02 F6 | 	mov	local05, local06
16670     15 27 02 F1 | 	add	local05, local07
16674     00 2C 06 F6 | 	mov	local08, #0
16678     00 12 06 F6 | 	mov	arg01, #0
1667c     09 14 06 F6 | 	mov	arg02, #9
16680     00 16 06 F6 | 	mov	arg03, #0
16684     60 91 B0 FD | 	call	#__system___basic_print_char
16688     FD 2E 02 F6 | 	mov	local09, result1
1668c     FD 26 02 F1 | 	add	local05, result1
16690     00 12 06 F6 | 	mov	arg01, #0
16694     38 DE B0 FD | 	call	#__system___getiolock_0484
16698     FD 00 68 FC | 	wrlong	#0, result1
1669c     00 FA 05 F6 | 	mov	result1, #0
166a0     00 30 06 F6 | 	mov	local10, #0
166a4                 | LR__1834
166a4                 | '   if t1.result_type=result_float then print t1.result.fresult,
166a4     1E 22 0E F2 | 	cmp	local03, #30 wz
166a8     64 00 90 5D |  if_ne	jmp	#LR__1835
166ac     00 12 06 F6 | 	mov	arg01, #0
166b0     1C DE B0 FD | 	call	#__system___getiolock_0484
166b4     FD 12 02 F6 | 	mov	arg01, result1
166b8     7C 84 B0 FD | 	call	#__system___lockmem
166bc     00 28 06 F6 | 	mov	local06, #0
166c0     00 12 06 F6 | 	mov	arg01, #0
166c4     0F 15 02 F6 | 	mov	arg02, local01
166c8     00 16 06 F6 | 	mov	arg03, #0
166cc     23 18 06 F6 | 	mov	arg04, #35
166d0     FC B5 B0 FD | 	call	#__system___basic_print_float
166d4     FD 2A 02 F6 | 	mov	local07, result1
166d8     14 27 02 F6 | 	mov	local05, local06
166dc     15 27 02 F1 | 	add	local05, local07
166e0     00 2C 06 F6 | 	mov	local08, #0
166e4     00 12 06 F6 | 	mov	arg01, #0
166e8     09 14 06 F6 | 	mov	arg02, #9
166ec     00 16 06 F6 | 	mov	arg03, #0
166f0     F4 90 B0 FD | 	call	#__system___basic_print_char
166f4     FD 2E 02 F6 | 	mov	local09, result1
166f8     FD 26 02 F1 | 	add	local05, result1
166fc     00 12 06 F6 | 	mov	arg01, #0
16700     CC DD B0 FD | 	call	#__system___getiolock_0484
16704     FD 00 68 FC | 	wrlong	#0, result1
16708     00 FA 05 F6 | 	mov	result1, #0
1670c     00 30 06 F6 | 	mov	local10, #0
16710                 | LR__1835
16710                 | '   if t1.result_type=result_string then print t1.result.sresult,
16710     1F 22 0E F2 | 	cmp	local03, #31 wz
16714     60 00 90 5D |  if_ne	jmp	#LR__1836
16718     00 12 06 F6 | 	mov	arg01, #0
1671c     B0 DD B0 FD | 	call	#__system___getiolock_0484
16720     FD 12 02 F6 | 	mov	arg01, result1
16724     10 84 B0 FD | 	call	#__system___lockmem
16728     00 28 06 F6 | 	mov	local06, #0
1672c     00 12 06 F6 | 	mov	arg01, #0
16730     0F 15 02 F6 | 	mov	arg02, local01
16734     00 16 06 F6 | 	mov	arg03, #0
16738     04 91 B0 FD | 	call	#__system___basic_print_string
1673c     FD 2A 02 F6 | 	mov	local07, result1
16740     14 27 02 F6 | 	mov	local05, local06
16744     15 27 02 F1 | 	add	local05, local07
16748     00 2C 06 F6 | 	mov	local08, #0
1674c     00 12 06 F6 | 	mov	arg01, #0
16750     09 14 06 F6 | 	mov	arg02, #9
16754     00 16 06 F6 | 	mov	arg03, #0
16758     8C 90 B0 FD | 	call	#__system___basic_print_char
1675c     FD 2E 02 F6 | 	mov	local09, result1
16760     FD 26 02 F1 | 	add	local05, result1
16764     00 12 06 F6 | 	mov	arg01, #0
16768     64 DD B0 FD | 	call	#__system___getiolock_0484
1676c     FD 00 68 FC | 	wrlong	#0, result1
16770     00 FA 05 F6 | 	mov	result1, #0
16774     00 30 06 F6 | 	mov	local10, #0
16778                 | LR__1836
16778                 | LR__1837
16778                 | ' if r=print_mod_semicolon then 
16778     22 24 0E F2 | 	cmp	local04, #34 wz
1677c     1C 01 90 5D |  if_ne	jmp	#LR__1842
16780                 | '   if t1.result_type=result_int then print t1.result.iresult;
16780     1C 22 0E F2 | 	cmp	local03, #28 wz
16784     50 00 90 5D |  if_ne	jmp	#LR__1838
16788     00 12 06 F6 | 	mov	arg01, #0
1678c     40 DD B0 FD | 	call	#__system___getiolock_0484
16790     FD 12 02 F6 | 	mov	arg01, result1
16794     A0 83 B0 FD | 	call	#__system___lockmem
16798     00 28 06 F6 | 	mov	local06, #0
1679c     00 30 06 F6 | 	mov	local10, #0
167a0     0A 2C 06 F6 | 	mov	local08, #10
167a4     00 12 06 F6 | 	mov	arg01, #0
167a8     0F 15 02 F6 | 	mov	arg02, local01
167ac     00 16 06 F6 | 	mov	arg03, #0
167b0     0A 18 06 F6 | 	mov	arg04, #10
167b4     CC 90 B0 FD | 	call	#__system___basic_print_integer
167b8     FD 2A 02 F6 | 	mov	local07, result1
167bc     14 27 02 F6 | 	mov	local05, local06
167c0     15 27 02 F1 | 	add	local05, local07
167c4     00 12 06 F6 | 	mov	arg01, #0
167c8     04 DD B0 FD | 	call	#__system___getiolock_0484
167cc     FD 00 68 FC | 	wrlong	#0, result1
167d0     00 FA 05 F6 | 	mov	result1, #0
167d4     00 2E 06 F6 | 	mov	local09, #0
167d8                 | LR__1838
167d8                 | '   if t1.result_type=result_uint then print t1.result.uresult;
167d8     1D 22 0E F2 | 	cmp	local03, #29 wz
167dc     50 00 90 5D |  if_ne	jmp	#LR__1839
167e0     00 12 06 F6 | 	mov	arg01, #0
167e4     E8 DC B0 FD | 	call	#__system___getiolock_0484
167e8     FD 12 02 F6 | 	mov	arg01, result1
167ec     48 83 B0 FD | 	call	#__system___lockmem
167f0     00 28 06 F6 | 	mov	local06, #0
167f4     00 30 06 F6 | 	mov	local10, #0
167f8     0A 2C 06 F6 | 	mov	local08, #10
167fc     00 12 06 F6 | 	mov	arg01, #0
16800     0F 15 02 F6 | 	mov	arg02, local01
16804     00 16 06 F6 | 	mov	arg03, #0
16808     0A 18 06 F6 | 	mov	arg04, #10
1680c     B4 90 B0 FD | 	call	#__system___basic_print_unsigned
16810     FD 2A 02 F6 | 	mov	local07, result1
16814     14 27 02 F6 | 	mov	local05, local06
16818     15 27 02 F1 | 	add	local05, local07
1681c     00 12 06 F6 | 	mov	arg01, #0
16820     AC DC B0 FD | 	call	#__system___getiolock_0484
16824     FD 00 68 FC | 	wrlong	#0, result1
16828     00 FA 05 F6 | 	mov	result1, #0
1682c     00 2E 06 F6 | 	mov	local09, #0
16830                 | LR__1839
16830                 | '   if t1.result_type=result_float then print t1.result.fresult;
16830     1E 22 0E F2 | 	cmp	local03, #30 wz
16834     30 00 90 5D |  if_ne	jmp	#LR__1840
16838     00 12 06 F6 | 	mov	arg01, #0
1683c     90 DC B0 FD | 	call	#__system___getiolock_0484
16840     FD 12 02 F6 | 	mov	arg01, result1
16844     F0 82 B0 FD | 	call	#__system___lockmem
16848     00 12 06 F6 | 	mov	arg01, #0
1684c     0F 15 02 F6 | 	mov	arg02, local01
16850     00 16 06 F6 | 	mov	arg03, #0
16854     23 18 06 F6 | 	mov	arg04, #35
16858     74 B4 B0 FD | 	call	#__system___basic_print_float
1685c     00 12 06 F6 | 	mov	arg01, #0
16860     6C DC B0 FD | 	call	#__system___getiolock_0484
16864     FD 00 68 FC | 	wrlong	#0, result1
16868                 | LR__1840
16868                 | '   if t1.result_type=result_string then print t1.result.sresult;
16868     1F 22 0E F2 | 	cmp	local03, #31 wz
1686c     2C 00 90 5D |  if_ne	jmp	#LR__1841
16870     00 12 06 F6 | 	mov	arg01, #0
16874     58 DC B0 FD | 	call	#__system___getiolock_0484
16878     FD 12 02 F6 | 	mov	arg01, result1
1687c     B8 82 B0 FD | 	call	#__system___lockmem
16880     00 12 06 F6 | 	mov	arg01, #0
16884     0F 15 02 F6 | 	mov	arg02, local01
16888     00 16 06 F6 | 	mov	arg03, #0
1688c     B0 8F B0 FD | 	call	#__system___basic_print_string
16890     00 12 06 F6 | 	mov	arg01, #0
16894     38 DC B0 FD | 	call	#__system___getiolock_0484
16898     FD 00 68 FC | 	wrlong	#0, result1
1689c                 | LR__1841
1689c                 | LR__1842
1689c                 | ' if r=0 then 
1689c     00 24 0E F2 | 	cmp	local04, #0 wz
168a0     1C 01 90 5D |  if_ne	jmp	#LR__1847
168a4                 | '   if t1.result_type=result_int then print t1.result.iresult
168a4     1C 22 0E F2 | 	cmp	local03, #28 wz
168a8     40 00 90 5D |  if_ne	jmp	#LR__1843
168ac     00 12 06 F6 | 	mov	arg01, #0
168b0     1C DC B0 FD | 	call	#__system___getiolock_0484
168b4     FD 12 02 F6 | 	mov	arg01, result1
168b8     7C 82 B0 FD | 	call	#__system___lockmem
168bc     00 12 06 F6 | 	mov	arg01, #0
168c0     0F 15 02 F6 | 	mov	arg02, local01
168c4     00 16 06 F6 | 	mov	arg03, #0
168c8     0A 18 06 F6 | 	mov	arg04, #10
168cc     B4 8F B0 FD | 	call	#__system___basic_print_integer
168d0     00 12 06 F6 | 	mov	arg01, #0
168d4     0A 14 06 F6 | 	mov	arg02, #10
168d8     00 16 06 F6 | 	mov	arg03, #0
168dc     08 8F B0 FD | 	call	#__system___basic_print_char
168e0     00 12 06 F6 | 	mov	arg01, #0
168e4     E8 DB B0 FD | 	call	#__system___getiolock_0484
168e8     FD 00 68 FC | 	wrlong	#0, result1
168ec                 | LR__1843
168ec                 | '   if t1.result_type=result_uint then print t1.result.uresult
168ec     1D 22 0E F2 | 	cmp	local03, #29 wz
168f0     40 00 90 5D |  if_ne	jmp	#LR__1844
168f4     00 12 06 F6 | 	mov	arg01, #0
168f8     D4 DB B0 FD | 	call	#__system___getiolock_0484
168fc     FD 12 02 F6 | 	mov	arg01, result1
16900     34 82 B0 FD | 	call	#__system___lockmem
16904     00 12 06 F6 | 	mov	arg01, #0
16908     0F 15 02 F6 | 	mov	arg02, local01
1690c     00 16 06 F6 | 	mov	arg03, #0
16910     0A 18 06 F6 | 	mov	arg04, #10
16914     AC 8F B0 FD | 	call	#__system___basic_print_unsigned
16918     00 12 06 F6 | 	mov	arg01, #0
1691c     0A 14 06 F6 | 	mov	arg02, #10
16920     00 16 06 F6 | 	mov	arg03, #0
16924     C0 8E B0 FD | 	call	#__system___basic_print_char
16928     00 12 06 F6 | 	mov	arg01, #0
1692c     A0 DB B0 FD | 	call	#__system___getiolock_0484
16930     FD 00 68 FC | 	wrlong	#0, result1
16934                 | LR__1844
16934                 | '   if t1.result_type=result_float then print t1.result.fresult
16934     1E 22 0E F2 | 	cmp	local03, #30 wz
16938     40 00 90 5D |  if_ne	jmp	#LR__1845
1693c     00 12 06 F6 | 	mov	arg01, #0
16940     8C DB B0 FD | 	call	#__system___getiolock_0484
16944     FD 12 02 F6 | 	mov	arg01, result1
16948     EC 81 B0 FD | 	call	#__system___lockmem
1694c     00 12 06 F6 | 	mov	arg01, #0
16950     0F 15 02 F6 | 	mov	arg02, local01
16954     00 16 06 F6 | 	mov	arg03, #0
16958     23 18 06 F6 | 	mov	arg04, #35
1695c     70 B3 B0 FD | 	call	#__system___basic_print_float
16960     00 12 06 F6 | 	mov	arg01, #0
16964     0A 14 06 F6 | 	mov	arg02, #10
16968     00 16 06 F6 | 	mov	arg03, #0
1696c     78 8E B0 FD | 	call	#__system___basic_print_char
16970     00 12 06 F6 | 	mov	arg01, #0
16974     58 DB B0 FD | 	call	#__system___getiolock_0484
16978     FD 00 68 FC | 	wrlong	#0, result1
1697c                 | LR__1845
1697c                 | '   if t1.result_type=result_string then print t1.result.sresult
1697c     1F 22 0E F2 | 	cmp	local03, #31 wz
16980     3C 00 90 5D |  if_ne	jmp	#LR__1846
16984     00 12 06 F6 | 	mov	arg01, #0
16988     44 DB B0 FD | 	call	#__system___getiolock_0484
1698c     FD 12 02 F6 | 	mov	arg01, result1
16990     A4 81 B0 FD | 	call	#__system___lockmem
16994     00 12 06 F6 | 	mov	arg01, #0
16998     0F 15 02 F6 | 	mov	arg02, local01
1699c     00 16 06 F6 | 	mov	arg03, #0
169a0     9C 8E B0 FD | 	call	#__system___basic_print_string
169a4     00 12 06 F6 | 	mov	arg01, #0
169a8     0A 14 06 F6 | 	mov	arg02, #10
169ac     00 16 06 F6 | 	mov	arg03, #0
169b0     34 8E B0 FD | 	call	#__system___basic_print_char
169b4     00 12 06 F6 | 	mov	arg01, #0
169b8     14 DB B0 FD | 	call	#__system___getiolock_0484
169bc     FD 00 68 FC | 	wrlong	#0, result1
169c0                 | LR__1846
169c0                 | LR__1847
169c0                 | ' if r=print_mod_empty then print
169c0     20 24 0E F2 | 	cmp	local04, #32 wz
169c4     2C 00 90 5D |  if_ne	jmp	#LR__1848
169c8     00 12 06 F6 | 	mov	arg01, #0
169cc     00 DB B0 FD | 	call	#__system___getiolock_0484
169d0     FD 12 02 F6 | 	mov	arg01, result1
169d4     60 81 B0 FD | 	call	#__system___lockmem
169d8     00 12 06 F6 | 	mov	arg01, #0
169dc     0A 14 06 F6 | 	mov	arg02, #10
169e0     00 16 06 F6 | 	mov	arg03, #0
169e4     00 8E B0 FD | 	call	#__system___basic_print_char
169e8     00 12 06 F6 | 	mov	arg01, #0
169ec     E0 DA B0 FD | 	call	#__system___getiolock_0484
169f0     FD 00 68 FC | 	wrlong	#0, result1
169f4                 | LR__1848
169f4                 | LR__1849
169f4     A7 F0 03 F6 | 	mov	ptra, fp
169f8     B2 00 A0 FD | 	call	#popregs_
169fc                 | _do_print_ret
169fc     2D 00 64 FD | 	ret
16a00                 | 
16a00                 | ' 
16a00                 | ' 
16a00                 | ' sub do_paper
16a00                 | _do_paper
16a00     03 4A 05 F6 | 	mov	COUNT_, #3
16a04     A8 00 A0 FD | 	call	#pushregs_
16a08     54 3E BF FD | 	call	#_pop
16a0c     FD 1E 02 F6 | 	mov	local01, result1
16a10     FE 20 02 F6 | 	mov	local02, result2
16a14     FF 22 02 F6 | 	mov	local03, result3
16a18                 | ' t1=pop() 
16a18                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16a18     1E 22 0E F2 | 	cmp	local03, #30 wz
16a1c     10 00 90 5D |  if_ne	jmp	#LR__1850
16a20     0F 13 02 F6 | 	mov	arg01, local01
16a24     00 14 06 F6 | 	mov	arg02, #0
16a28     54 B1 B0 FD | 	call	#__system___float_tointeger
16a2c     FD 1E 02 F6 | 	mov	local01, result1
16a30                 | LR__1850
16a30                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16a30     1F 22 0E F2 | 	cmp	local03, #31 wz
16a34     18 00 90 5D |  if_ne	jmp	#LR__1851
16a38     0F 13 02 F6 | 	mov	arg01, local01
16a3c     60 B4 B0 FD | 	call	#__system____builtin_atof
16a40     FD 12 02 F6 | 	mov	arg01, result1
16a44     00 14 06 F6 | 	mov	arg02, #0
16a48     34 B1 B0 FD | 	call	#__system___float_tointeger
16a4c     FD 1E 02 F6 | 	mov	local01, result1
16a50                 | LR__1851
16a50     57 00 00 FF 
16a54     38 E4 05 F1 | 	add	objptr, ##44600
16a58     F2 1E 62 FC | 	wrlong	local01, objptr
16a5c     04 E4 05 F1 | 	add	objptr, #4
16a60     F2 12 02 FB | 	rdlong	arg01, objptr
16a64                 | ' 
16a64                 | ' write_color:=ff
16a64     56 00 00 FF 
16a68     FB E5 85 F1 | 	sub	objptr, ##44539
16a6c     F2 12 62 FC | 	wrlong	arg01, objptr
16a70                 | ' write_background:=bb
16a70     04 E4 05 F1 | 	add	objptr, #4
16a74     F2 1E 62 FC | 	wrlong	local01, objptr
16a78     45 E4 85 F1 | 	sub	objptr, #69
16a7c     A7 F0 03 F6 | 	mov	ptra, fp
16a80     B2 00 A0 FD | 	call	#popregs_
16a84                 | _do_paper_ret
16a84     2D 00 64 FD | 	ret
16a88                 | 
16a88                 | ' 
16a88                 | ' sub do_ink
16a88                 | _do_ink
16a88     03 4A 05 F6 | 	mov	COUNT_, #3
16a8c     A8 00 A0 FD | 	call	#pushregs_
16a90     CC 3D BF FD | 	call	#_pop
16a94     FD 1E 02 F6 | 	mov	local01, result1
16a98     FE 20 02 F6 | 	mov	local02, result2
16a9c     FF 22 02 F6 | 	mov	local03, result3
16aa0                 | ' t1=pop() 
16aa0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16aa0     1E 22 0E F2 | 	cmp	local03, #30 wz
16aa4     10 00 90 5D |  if_ne	jmp	#LR__1860
16aa8     0F 13 02 F6 | 	mov	arg01, local01
16aac     00 14 06 F6 | 	mov	arg02, #0
16ab0     CC B0 B0 FD | 	call	#__system___float_tointeger
16ab4     FD 1E 02 F6 | 	mov	local01, result1
16ab8                 | LR__1860
16ab8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16ab8     1F 22 0E F2 | 	cmp	local03, #31 wz
16abc     18 00 90 5D |  if_ne	jmp	#LR__1861
16ac0     0F 13 02 F6 | 	mov	arg01, local01
16ac4     D8 B3 B0 FD | 	call	#__system____builtin_atof
16ac8     FD 12 02 F6 | 	mov	arg01, result1
16acc     00 14 06 F6 | 	mov	arg02, #0
16ad0     AC B0 B0 FD | 	call	#__system___float_tointeger
16ad4     FD 1E 02 F6 | 	mov	local01, result1
16ad8                 | LR__1861
16ad8     57 00 00 FF 
16adc     3C E4 05 F1 | 	add	objptr, ##44604
16ae0     F2 1E 62 FC | 	wrlong	local01, objptr
16ae4     04 E4 85 F1 | 	sub	objptr, #4
16ae8     F2 14 02 FB | 	rdlong	arg02, objptr
16aec                 | ' 
16aec                 | ' write_color:=ff
16aec     56 00 00 FF 
16af0     F7 E5 85 F1 | 	sub	objptr, ##44535
16af4     F2 1E 62 FC | 	wrlong	local01, objptr
16af8                 | ' write_background:=bb
16af8     04 E4 05 F1 | 	add	objptr, #4
16afc     F2 14 62 FC | 	wrlong	arg02, objptr
16b00     56 00 00 FF 
16b04     F7 E5 05 F1 | 	add	objptr, ##44535
16b08     F2 12 02 FB | 	rdlong	arg01, objptr
16b0c     57 00 00 FF 
16b10     3C E4 85 F1 | 	sub	objptr, ##44604
16b14     00 58 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
16b18     A7 F0 03 F6 | 	mov	ptra, fp
16b1c     B2 00 A0 FD | 	call	#popregs_
16b20                 | _do_ink_ret
16b20     2D 00 64 FD | 	ret
16b24                 | 
16b24                 | ' 
16b24                 | ' 
16b24                 | ' sub do_font
16b24                 | _do_font
16b24     03 4A 05 F6 | 	mov	COUNT_, #3
16b28     A8 00 A0 FD | 	call	#pushregs_
16b2c     30 3D BF FD | 	call	#_pop
16b30     FD 1E 02 F6 | 	mov	local01, result1
16b34     FE 20 02 F6 | 	mov	local02, result2
16b38     FF 22 02 F6 | 	mov	local03, result3
16b3c                 | ' t1=pop() 
16b3c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16b3c     1E 22 0E F2 | 	cmp	local03, #30 wz
16b40     10 00 90 5D |  if_ne	jmp	#LR__1870
16b44     0F 13 02 F6 | 	mov	arg01, local01
16b48     00 14 06 F6 | 	mov	arg02, #0
16b4c     30 B0 B0 FD | 	call	#__system___float_tointeger
16b50     FD 1E 02 F6 | 	mov	local01, result1
16b54                 | LR__1870
16b54                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16b54     1F 22 0E F2 | 	cmp	local03, #31 wz
16b58     18 00 90 5D |  if_ne	jmp	#LR__1871
16b5c     0F 13 02 F6 | 	mov	arg01, local01
16b60     3C B3 B0 FD | 	call	#__system____builtin_atof
16b64     FD 12 02 F6 | 	mov	arg01, result1
16b68     00 14 06 F6 | 	mov	arg02, #0
16b6c     10 B0 B0 FD | 	call	#__system___float_tointeger
16b70     FD 1E 02 F6 | 	mov	local01, result1
16b74                 | LR__1871
16b74     57 00 00 FF 
16b78     40 E4 05 F1 | 	add	objptr, ##44608
16b7c     F2 1E 62 FC | 	wrlong	local01, objptr
16b80     57 00 00 FF 
16b84     40 E4 85 F1 | 	sub	objptr, ##44608
16b88     02 1E 66 F0 | 	shl	local01, #2
16b8c     0F 13 02 F6 | 	mov	arg01, local01
16b90     C8 67 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16b94     A7 F0 03 F6 | 	mov	ptra, fp
16b98     B2 00 A0 FD | 	call	#popregs_
16b9c                 | _do_font_ret
16b9c     2D 00 64 FD | 	ret
16ba0                 | 
16ba0                 | ' 
16ba0                 | ' sub do_mode
16ba0                 | _do_mode
16ba0     05 4A 05 F6 | 	mov	COUNT_, #5
16ba4     A8 00 A0 FD | 	call	#pushregs_
16ba8     B4 3C BF FD | 	call	#_pop
16bac     FD 1E 02 F6 | 	mov	local01, result1
16bb0     FE 20 02 F6 | 	mov	local02, result2
16bb4     FF 22 02 F6 | 	mov	local03, result3
16bb8                 | ' t1=pop() 
16bb8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16bb8     1E 22 0E F2 | 	cmp	local03, #30 wz
16bbc     10 00 90 5D |  if_ne	jmp	#LR__1880
16bc0     0F 13 02 F6 | 	mov	arg01, local01
16bc4     00 14 06 F6 | 	mov	arg02, #0
16bc8     B4 AF B0 FD | 	call	#__system___float_tointeger
16bcc     FD 1E 02 F6 | 	mov	local01, result1
16bd0                 | LR__1880
16bd0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16bd0     1F 22 0E F2 | 	cmp	local03, #31 wz
16bd4     18 00 90 5D |  if_ne	jmp	#LR__1881
16bd8     0F 13 02 F6 | 	mov	arg01, local01
16bdc     C0 B2 B0 FD | 	call	#__system____builtin_atof
16be0     FD 12 02 F6 | 	mov	arg01, result1
16be4     00 14 06 F6 | 	mov	arg02, #0
16be8     94 AF B0 FD | 	call	#__system___float_tointeger
16bec     FD 1E 02 F6 | 	mov	local01, result1
16bf0                 | LR__1881
16bf0                 | ' select case t1.result.iresult
16bf0     0F 25 02 F6 | 	mov	local04, local01
16bf4     05 24 26 F3 | 	fle	local04, #5
16bf8     30 24 62 FD | 	jmprel	local04
16bfc                 | LR__1882
16bfc     14 00 90 FD | 	jmp	#LR__1883
16c00     A8 00 90 FD | 	jmp	#LR__1884
16c04     10 01 90 FD | 	jmp	#LR__1885
16c08     78 01 90 FD | 	jmp	#LR__1886
16c0c     E0 01 90 FD | 	jmp	#LR__1887
16c10     70 02 90 FD | 	jmp	#LR__1888
16c14                 | LR__1883
16c14     57 00 00 FF 
16c18     40 E4 05 F1 | 	add	objptr, ##44608
16c1c     F2 02 68 FC | 	wrlong	#1, objptr
16c20     04 E4 85 F1 | 	sub	objptr, #4
16c24     F2 34 69 FC | 	wrlong	#154, objptr
16c28     21 00 00 FF 
16c2c     B4 E4 05 F1 | 	add	objptr, ##17076
16c30     F2 02 68 FC | 	wrlong	#1, objptr
16c34     21 00 00 FF 
16c38     B8 E4 85 F1 | 	sub	objptr, ##17080
16c3c     F2 26 69 FC | 	wrlong	#147, objptr
16c40     57 00 00 FF 
16c44     38 E4 85 F1 | 	sub	objptr, ##44600
16c48     04 12 06 F6 | 	mov	arg01, #4
16c4c     0C 67 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16c50     57 00 00 FF 
16c54     3C E4 05 F1 | 	add	objptr, ##44604
16c58     F2 12 02 FB | 	rdlong	arg01, objptr
16c5c     04 E4 85 F1 | 	sub	objptr, #4
16c60     F2 14 02 FB | 	rdlong	arg02, objptr
16c64                 | ' 
16c64                 | ' write_color:=ff
16c64     56 00 00 FF 
16c68     F7 E5 85 F1 | 	sub	objptr, ##44535
16c6c     F2 12 62 FC | 	wrlong	arg01, objptr
16c70                 | ' write_background:=bb
16c70     04 E4 05 F1 | 	add	objptr, #4
16c74     F2 14 62 FC | 	wrlong	arg02, objptr
16c78     01 00 00 FF 
16c7c     00 EA 05 F1 | 	add	ptr__dat__, ##512
16c80     79 00 00 FF 
16c84     4F E5 05 F1 | 	add	objptr, ##62287
16c88     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
16c8c     04 E4 85 F1 | 	sub	objptr, #4
16c90     03 00 80 FF 
16c94     F2 30 69 FC | 	wrlong	##1688, objptr
16c98     79 00 00 FF 
16c9c     90 E5 85 F1 | 	sub	objptr, ##62352
16ca0     01 00 00 FF 
16ca4     00 EA 85 F1 | 	sub	ptr__dat__, ##512
16ca8     D8 01 90 FD | 	jmp	#LR__1888
16cac                 | LR__1884
16cac     57 00 00 FF 
16cb0     40 E4 05 F1 | 	add	objptr, ##44608
16cb4     F2 00 68 FC | 	wrlong	#0, objptr
16cb8     04 E4 85 F1 | 	sub	objptr, #4
16cbc     F2 2E 68 FC | 	wrlong	#23, objptr
16cc0     21 00 00 FF 
16cc4     B4 E4 05 F1 | 	add	objptr, ##17076
16cc8     F2 00 68 FC | 	wrlong	#0, objptr
16ccc     21 00 00 FF 
16cd0     B8 E4 85 F1 | 	sub	objptr, ##17080
16cd4     F2 00 68 FC | 	wrlong	#0, objptr
16cd8     57 00 00 FF 
16cdc     38 E4 85 F1 | 	sub	objptr, ##44600
16ce0     00 12 06 F6 | 	mov	arg01, #0
16ce4     74 66 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16ce8     57 00 00 FF 
16cec     3C E4 05 F1 | 	add	objptr, ##44604
16cf0     F2 12 02 FB | 	rdlong	arg01, objptr
16cf4     04 E4 85 F1 | 	sub	objptr, #4
16cf8     F2 14 02 FB | 	rdlong	arg02, objptr
16cfc                 | ' 
16cfc                 | ' write_color:=ff
16cfc     56 00 00 FF 
16d00     F7 E5 85 F1 | 	sub	objptr, ##44535
16d04     F2 12 62 FC | 	wrlong	arg01, objptr
16d08                 | ' write_background:=bb
16d08     04 E4 05 F1 | 	add	objptr, #4
16d0c     F2 14 62 FC | 	wrlong	arg02, objptr
16d10     45 E4 85 F1 | 	sub	objptr, #69
16d14     6C 01 90 FD | 	jmp	#LR__1888
16d18                 | LR__1885
16d18     57 00 00 FF 
16d1c     40 E4 05 F1 | 	add	objptr, ##44608
16d20     F2 00 68 FC | 	wrlong	#0, objptr
16d24     04 E4 85 F1 | 	sub	objptr, #4
16d28     F2 6A 69 FC | 	wrlong	#181, objptr
16d2c     21 00 00 FF 
16d30     B4 E4 05 F1 | 	add	objptr, ##17076
16d34     F2 00 68 FC | 	wrlong	#0, objptr
16d38     21 00 00 FF 
16d3c     B8 E4 85 F1 | 	sub	objptr, ##17080
16d40     F2 00 68 FC | 	wrlong	#0, objptr
16d44     57 00 00 FF 
16d48     38 E4 85 F1 | 	sub	objptr, ##44600
16d4c     00 12 06 F6 | 	mov	arg01, #0
16d50     08 66 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16d54     57 00 00 FF 
16d58     3C E4 05 F1 | 	add	objptr, ##44604
16d5c     F2 12 02 FB | 	rdlong	arg01, objptr
16d60     04 E4 85 F1 | 	sub	objptr, #4
16d64     F2 14 02 FB | 	rdlong	arg02, objptr
16d68                 | ' 
16d68                 | ' write_color:=ff
16d68     56 00 00 FF 
16d6c     F7 E5 85 F1 | 	sub	objptr, ##44535
16d70     F2 12 62 FC | 	wrlong	arg01, objptr
16d74                 | ' write_background:=bb
16d74     04 E4 05 F1 | 	add	objptr, #4
16d78     F2 14 62 FC | 	wrlong	arg02, objptr
16d7c     45 E4 85 F1 | 	sub	objptr, #69
16d80     00 01 90 FD | 	jmp	#LR__1888
16d84                 | LR__1886
16d84     57 00 00 FF 
16d88     40 E4 05 F1 | 	add	objptr, ##44608
16d8c     F2 00 68 FC | 	wrlong	#0, objptr
16d90     04 E4 85 F1 | 	sub	objptr, #4
16d94     F2 1E 68 FC | 	wrlong	#15, objptr
16d98     21 00 00 FF 
16d9c     B4 E4 05 F1 | 	add	objptr, ##17076
16da0     F2 00 68 FC | 	wrlong	#0, objptr
16da4     21 00 00 FF 
16da8     B8 E4 85 F1 | 	sub	objptr, ##17080
16dac     F2 00 68 FC | 	wrlong	#0, objptr
16db0     57 00 00 FF 
16db4     38 E4 85 F1 | 	sub	objptr, ##44600
16db8     00 12 06 F6 | 	mov	arg01, #0
16dbc     9C 65 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16dc0     57 00 00 FF 
16dc4     3C E4 05 F1 | 	add	objptr, ##44604
16dc8     F2 12 02 FB | 	rdlong	arg01, objptr
16dcc     04 E4 85 F1 | 	sub	objptr, #4
16dd0     F2 14 02 FB | 	rdlong	arg02, objptr
16dd4                 | ' 
16dd4                 | ' write_color:=ff
16dd4     56 00 00 FF 
16dd8     F7 E5 85 F1 | 	sub	objptr, ##44535
16ddc     F2 12 62 FC | 	wrlong	arg01, objptr
16de0                 | ' write_background:=bb
16de0     04 E4 05 F1 | 	add	objptr, #4
16de4     F2 14 62 FC | 	wrlong	arg02, objptr
16de8     45 E4 85 F1 | 	sub	objptr, #69
16dec     94 00 90 FD | 	jmp	#LR__1888
16df0                 | LR__1887
16df0     57 00 00 FF 
16df4     40 E4 05 F1 | 	add	objptr, ##44608
16df8     F2 02 68 FC | 	wrlong	#1, objptr
16dfc     04 E4 85 F1 | 	sub	objptr, #4
16e00     F2 02 68 FC | 	wrlong	#1, objptr
16e04     21 00 00 FF 
16e08     B4 E4 05 F1 | 	add	objptr, ##17076
16e0c     F2 02 68 FC | 	wrlong	#1, objptr
16e10     21 00 00 FF 
16e14     B8 E4 85 F1 | 	sub	objptr, ##17080
16e18     F2 1C 68 FC | 	wrlong	#14, objptr
16e1c     57 00 00 FF 
16e20     38 E4 85 F1 | 	sub	objptr, ##44600
16e24     04 12 06 F6 | 	mov	arg01, #4
16e28     30 65 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16e2c     57 00 00 FF 
16e30     3C E4 05 F1 | 	add	objptr, ##44604
16e34     F2 12 02 FB | 	rdlong	arg01, objptr
16e38     04 E4 85 F1 | 	sub	objptr, #4
16e3c     F2 14 02 FB | 	rdlong	arg02, objptr
16e40                 | ' 
16e40                 | ' write_color:=ff
16e40     56 00 00 FF 
16e44     F7 E5 85 F1 | 	sub	objptr, ##44535
16e48     F2 12 62 FC | 	wrlong	arg01, objptr
16e4c                 | ' write_background:=bb
16e4c     04 E4 05 F1 | 	add	objptr, #4
16e50     F2 14 62 FC | 	wrlong	arg02, objptr
16e54     07 00 00 FF 
16e58     8A EB 05 F1 | 	add	ptr__dat__, ##3978
16e5c     79 00 00 FF 
16e60     4F E5 05 F1 | 	add	objptr, ##62287
16e64     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
16e68     04 E4 85 F1 | 	sub	objptr, #4
16e6c     03 00 80 FF 
16e70     F2 30 69 FC | 	wrlong	##1688, objptr
16e74     79 00 00 FF 
16e78     90 E5 85 F1 | 	sub	objptr, ##62352
16e7c     07 00 00 FF 
16e80     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
16e84                 | LR__1888
16e84     79 00 00 FF 
16e88     8C E5 05 F1 | 	add	objptr, ##62348
16e8c     F2 1E 62 FC | 	wrlong	local01, objptr
16e90     04 E4 85 F1 | 	sub	objptr, #4
16e94     F2 12 02 FB | 	rdlong	arg01, objptr
16e98     16 00 00 FF 
16e9c     2C E5 85 F1 | 	sub	objptr, ##11564
16ea0     F2 26 02 FB | 	rdlong	local05, objptr
16ea4     63 00 00 FF 
16ea8     5C E4 85 F1 | 	sub	objptr, ##50780
16eac     13 13 82 F1 | 	sub	arg01, local05
16eb0     00 14 06 F6 | 	mov	arg02, #0
16eb4     0A 16 06 F6 | 	mov	arg03, #10
16eb8     18 9F B0 FD | 	call	#__system__Number_S
16ebc     FD 12 02 F6 | 	mov	arg01, result1
16ec0     74 01 00 FF 
16ec4     6A 14 06 F6 | 	mov	arg02, ##@LR__5183
16ec8     C8 7C B0 FD | 	call	#__system___string_concat
16ecc     78 00 00 FF 
16ed0     EC E4 05 F1 | 	add	objptr, ##61676
16ed4     F2 FA 61 FC | 	wrlong	result1, objptr
16ed8     21 00 00 FF 
16edc     B0 E4 85 F1 | 	sub	objptr, ##17072
16ee0     F2 12 02 FB | 	rdlong	arg01, objptr
16ee4     04 E4 85 F1 | 	sub	objptr, #4
16ee8     F2 14 02 FB | 	rdlong	arg02, objptr
16eec     57 00 00 FF 
16ef0     38 E4 85 F1 | 	sub	objptr, ##44600
16ef4     B4 65 B0 FD | 	call	#_hg010b_spin2_cls
16ef8     74 01 00 FF 
16efc     7C 12 06 F6 | 	mov	arg01, ##@LR__5184
16f00                 | ' 
16f00                 | ' write(text)
16f00     68 69 B0 FD | 	call	#_hg010b_spin2_write
16f04                 | ' crlf
16f04     30 6C B0 FD | 	call	#_hg010b_spin2_crlf
16f08     18 00 00 FF 
16f0c     4C EB 05 F1 | 	add	ptr__dat__, ##12620
16f10     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
16f14     18 00 00 FF 
16f18     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
16f1c                 | ' 
16f1c                 | ' write(text)
16f1c     4C 69 B0 FD | 	call	#_hg010b_spin2_write
16f20                 | ' crlf
16f20     14 6C B0 FD | 	call	#_hg010b_spin2_crlf
16f24     78 00 00 FF 
16f28     EC E4 05 F1 | 	add	objptr, ##61676
16f2c     F2 12 02 FB | 	rdlong	arg01, objptr
16f30     78 00 00 FF 
16f34     EC E4 85 F1 | 	sub	objptr, ##61676
16f38                 | ' 
16f38                 | ' write(text)
16f38     30 69 B0 FD | 	call	#_hg010b_spin2_write
16f3c                 | ' crlf
16f3c     F8 6B B0 FD | 	call	#_hg010b_spin2_crlf
16f40     A7 F0 03 F6 | 	mov	ptra, fp
16f44     B2 00 A0 FD | 	call	#popregs_
16f48                 | _do_mode_ret
16f48     2D 00 64 FD | 	ret
16f4c                 | 
16f4c                 | ' 
16f4c                 | ' sub do_setwave
16f4c                 | _do_setwave
16f4c     02 4A 05 F6 | 	mov	COUNT_, #2
16f50     A8 00 A0 FD | 	call	#pushregs_
16f54     18 F0 07 F1 | 	add	ptra, #24
16f58     04 39 BF FD | 	call	#_pop
16f5c     FD 12 02 F6 | 	mov	arg01, result1
16f60     FE 1E 02 F6 | 	mov	local01, result2
16f64     FF 20 02 F6 | 	mov	local02, result3
16f68     A7 12 62 FC | 	wrlong	arg01, fp
16f6c     04 4E 05 F1 | 	add	fp, #4
16f70     A7 1E 62 FC | 	wrlong	local01, fp
16f74     04 4E 05 F1 | 	add	fp, #4
16f78     A7 20 62 FC | 	wrlong	local02, fp
16f7c     08 4E 85 F1 | 	sub	fp, #8
16f80     DC 38 BF FD | 	call	#_pop
16f84     FD 20 02 F6 | 	mov	local02, result1
16f88     0C 4E 05 F1 | 	add	fp, #12
16f8c     A7 20 62 FC | 	wrlong	local02, fp
16f90     04 4E 05 F1 | 	add	fp, #4
16f94     A7 FC 61 FC | 	wrlong	result2, fp
16f98     04 4E 05 F1 | 	add	fp, #4
16f9c     A7 FE 61 FC | 	wrlong	result3, fp
16fa0     08 4E 85 F1 | 	sub	fp, #8
16fa4     A7 12 02 F6 | 	mov	arg01, fp
16fa8     0C 4E 85 F1 | 	sub	fp, #12
16fac     44 C5 BF FD | 	call	#_converttoint
16fb0     FD 20 02 F6 | 	mov	local02, result1
16fb4     10 1F 02 F6 | 	mov	local01, local02
16fb8     01 1E 66 F0 | 	shl	local01, #1
16fbc     10 1F 02 F1 | 	add	local01, local02
16fc0     03 1E 66 F0 | 	shl	local01, #3
16fc4     34 00 00 FF 
16fc8     38 E5 05 F1 | 	add	objptr, ##26936
16fcc     F2 1E 02 F1 | 	add	local01, objptr
16fd0     A7 12 02 F6 | 	mov	arg01, fp
16fd4     34 00 00 FF 
16fd8     38 E5 85 F1 | 	sub	objptr, ##26936
16fdc     14 C5 BF FD | 	call	#_converttoint
16fe0     04 1E 06 F1 | 	add	local01, #4
16fe4     0F FB 41 FC | 	wrbyte	result1, local01
16fe8     A7 F0 03 F6 | 	mov	ptra, fp
16fec     B2 00 A0 FD | 	call	#popregs_
16ff0                 | _do_setwave_ret
16ff0     2D 00 64 FD | 	ret
16ff4                 | 
16ff4                 | ' 
16ff4                 | ' sub do_setsustain
16ff4                 | _do_setsustain
16ff4     02 4A 05 F6 | 	mov	COUNT_, #2
16ff8     A8 00 A0 FD | 	call	#pushregs_
16ffc     18 F0 07 F1 | 	add	ptra, #24
17000     5C 38 BF FD | 	call	#_pop
17004     FD 12 02 F6 | 	mov	arg01, result1
17008     FE 1E 02 F6 | 	mov	local01, result2
1700c     FF 20 02 F6 | 	mov	local02, result3
17010     A7 12 62 FC | 	wrlong	arg01, fp
17014     04 4E 05 F1 | 	add	fp, #4
17018     A7 1E 62 FC | 	wrlong	local01, fp
1701c     04 4E 05 F1 | 	add	fp, #4
17020     A7 20 62 FC | 	wrlong	local02, fp
17024     08 4E 85 F1 | 	sub	fp, #8
17028     34 38 BF FD | 	call	#_pop
1702c     FD 20 02 F6 | 	mov	local02, result1
17030     0C 4E 05 F1 | 	add	fp, #12
17034     A7 20 62 FC | 	wrlong	local02, fp
17038     04 4E 05 F1 | 	add	fp, #4
1703c     A7 FC 61 FC | 	wrlong	result2, fp
17040     04 4E 05 F1 | 	add	fp, #4
17044     A7 FE 61 FC | 	wrlong	result3, fp
17048     08 4E 85 F1 | 	sub	fp, #8
1704c     A7 12 02 F6 | 	mov	arg01, fp
17050     0C 4E 85 F1 | 	sub	fp, #12
17054     9C C4 BF FD | 	call	#_converttoint
17058     FD 20 02 F6 | 	mov	local02, result1
1705c     10 1F 02 F6 | 	mov	local01, local02
17060     01 1E 66 F0 | 	shl	local01, #1
17064     10 1F 02 F1 | 	add	local01, local02
17068     03 1E 66 F0 | 	shl	local01, #3
1706c     34 00 00 FF 
17070     38 E5 05 F1 | 	add	objptr, ##26936
17074     F2 1E 02 F1 | 	add	local01, objptr
17078     A7 12 02 F6 | 	mov	arg01, fp
1707c     34 00 00 FF 
17080     38 E5 85 F1 | 	sub	objptr, ##26936
17084     6C C4 BF FD | 	call	#_converttoint
17088     14 1E 06 F1 | 	add	local01, #20
1708c     0F FB 51 FC | 	wrword	result1, local01
17090     A7 F0 03 F6 | 	mov	ptra, fp
17094     B2 00 A0 FD | 	call	#popregs_
17098                 | _do_setsustain_ret
17098     2D 00 64 FD | 	ret
1709c                 | 
1709c                 | ' 
1709c                 | ' sub do_setenv
1709c                 | _do_setenv
1709c     02 4A 05 F6 | 	mov	COUNT_, #2
170a0     A8 00 A0 FD | 	call	#pushregs_
170a4     18 F0 07 F1 | 	add	ptra, #24
170a8     B4 37 BF FD | 	call	#_pop
170ac     FD 12 02 F6 | 	mov	arg01, result1
170b0     FE 1E 02 F6 | 	mov	local01, result2
170b4     FF 20 02 F6 | 	mov	local02, result3
170b8     A7 12 62 FC | 	wrlong	arg01, fp
170bc     04 4E 05 F1 | 	add	fp, #4
170c0     A7 1E 62 FC | 	wrlong	local01, fp
170c4     04 4E 05 F1 | 	add	fp, #4
170c8     A7 20 62 FC | 	wrlong	local02, fp
170cc     08 4E 85 F1 | 	sub	fp, #8
170d0     8C 37 BF FD | 	call	#_pop
170d4     FD 20 02 F6 | 	mov	local02, result1
170d8     0C 4E 05 F1 | 	add	fp, #12
170dc     A7 20 62 FC | 	wrlong	local02, fp
170e0     04 4E 05 F1 | 	add	fp, #4
170e4     A7 FC 61 FC | 	wrlong	result2, fp
170e8     04 4E 05 F1 | 	add	fp, #4
170ec     A7 FE 61 FC | 	wrlong	result3, fp
170f0     08 4E 85 F1 | 	sub	fp, #8
170f4     A7 12 02 F6 | 	mov	arg01, fp
170f8     0C 4E 85 F1 | 	sub	fp, #12
170fc     F4 C3 BF FD | 	call	#_converttoint
17100     FD 20 02 F6 | 	mov	local02, result1
17104     10 1F 02 F6 | 	mov	local01, local02
17108     01 1E 66 F0 | 	shl	local01, #1
1710c     10 1F 02 F1 | 	add	local01, local02
17110     03 1E 66 F0 | 	shl	local01, #3
17114     34 00 00 FF 
17118     38 E5 05 F1 | 	add	objptr, ##26936
1711c     F2 1E 02 F1 | 	add	local01, objptr
17120     A7 12 02 F6 | 	mov	arg01, fp
17124     34 00 00 FF 
17128     38 E5 85 F1 | 	sub	objptr, ##26936
1712c     C4 C3 BF FD | 	call	#_converttoint
17130     05 1E 06 F1 | 	add	local01, #5
17134     0F FB 41 FC | 	wrbyte	result1, local01
17138     A7 F0 03 F6 | 	mov	ptra, fp
1713c     B2 00 A0 FD | 	call	#popregs_
17140                 | _do_setenv_ret
17140     2D 00 64 FD | 	ret
17144                 | 
17144                 | ' 
17144                 | ' sub do_setdelay
17144                 | _do_setdelay
17144     02 4A 05 F6 | 	mov	COUNT_, #2
17148     A8 00 A0 FD | 	call	#pushregs_
1714c     18 F0 07 F1 | 	add	ptra, #24
17150     0C 37 BF FD | 	call	#_pop
17154     FD 12 02 F6 | 	mov	arg01, result1
17158     FE 1E 02 F6 | 	mov	local01, result2
1715c     FF 20 02 F6 | 	mov	local02, result3
17160     A7 12 62 FC | 	wrlong	arg01, fp
17164     04 4E 05 F1 | 	add	fp, #4
17168     A7 1E 62 FC | 	wrlong	local01, fp
1716c     04 4E 05 F1 | 	add	fp, #4
17170     A7 20 62 FC | 	wrlong	local02, fp
17174     08 4E 85 F1 | 	sub	fp, #8
17178     E4 36 BF FD | 	call	#_pop
1717c     FD 20 02 F6 | 	mov	local02, result1
17180     0C 4E 05 F1 | 	add	fp, #12
17184     A7 20 62 FC | 	wrlong	local02, fp
17188     04 4E 05 F1 | 	add	fp, #4
1718c     A7 FC 61 FC | 	wrlong	result2, fp
17190     04 4E 05 F1 | 	add	fp, #4
17194     A7 FE 61 FC | 	wrlong	result3, fp
17198     08 4E 85 F1 | 	sub	fp, #8
1719c     A7 12 02 F6 | 	mov	arg01, fp
171a0     0C 4E 85 F1 | 	sub	fp, #12
171a4     4C C3 BF FD | 	call	#_converttoint
171a8     FD 20 02 F6 | 	mov	local02, result1
171ac     10 1F 02 F6 | 	mov	local01, local02
171b0     01 1E 66 F0 | 	shl	local01, #1
171b4     10 1F 02 F1 | 	add	local01, local02
171b8     03 1E 66 F0 | 	shl	local01, #3
171bc     34 00 00 FF 
171c0     38 E5 05 F1 | 	add	objptr, ##26936
171c4     F2 1E 02 F1 | 	add	local01, objptr
171c8     A7 12 02 F6 | 	mov	arg01, fp
171cc     34 00 00 FF 
171d0     38 E5 85 F1 | 	sub	objptr, ##26936
171d4     1C C3 BF FD | 	call	#_converttoint
171d8     06 1E 06 F1 | 	add	local01, #6
171dc     0F FB 51 FC | 	wrword	result1, local01
171e0     A7 F0 03 F6 | 	mov	ptra, fp
171e4     B2 00 A0 FD | 	call	#popregs_
171e8                 | _do_setdelay_ret
171e8     2D 00 64 FD | 	ret
171ec                 | 
171ec                 | ' 
171ec                 | ' sub do_setlen
171ec                 | _do_setlen
171ec     02 4A 05 F6 | 	mov	COUNT_, #2
171f0     A8 00 A0 FD | 	call	#pushregs_
171f4     18 F0 07 F1 | 	add	ptra, #24
171f8     64 36 BF FD | 	call	#_pop
171fc     FD 12 02 F6 | 	mov	arg01, result1
17200     FE 1E 02 F6 | 	mov	local01, result2
17204     FF 20 02 F6 | 	mov	local02, result3
17208     A7 12 62 FC | 	wrlong	arg01, fp
1720c     04 4E 05 F1 | 	add	fp, #4
17210     A7 1E 62 FC | 	wrlong	local01, fp
17214     04 4E 05 F1 | 	add	fp, #4
17218     A7 20 62 FC | 	wrlong	local02, fp
1721c     08 4E 85 F1 | 	sub	fp, #8
17220     3C 36 BF FD | 	call	#_pop
17224     FD 20 02 F6 | 	mov	local02, result1
17228     0C 4E 05 F1 | 	add	fp, #12
1722c     A7 20 62 FC | 	wrlong	local02, fp
17230     04 4E 05 F1 | 	add	fp, #4
17234     A7 FC 61 FC | 	wrlong	result2, fp
17238     04 4E 05 F1 | 	add	fp, #4
1723c     A7 FE 61 FC | 	wrlong	result3, fp
17240     08 4E 85 F1 | 	sub	fp, #8
17244     A7 12 02 F6 | 	mov	arg01, fp
17248     0C 4E 85 F1 | 	sub	fp, #12
1724c     A4 C2 BF FD | 	call	#_converttoint
17250     FD 20 02 F6 | 	mov	local02, result1
17254     10 1F 02 F6 | 	mov	local01, local02
17258     01 1E 66 F0 | 	shl	local01, #1
1725c     10 1F 02 F1 | 	add	local01, local02
17260     03 1E 66 F0 | 	shl	local01, #3
17264     34 00 00 FF 
17268     38 E5 05 F1 | 	add	objptr, ##26936
1726c     F2 1E 02 F1 | 	add	local01, objptr
17270     A7 12 02 F6 | 	mov	arg01, fp
17274     34 00 00 FF 
17278     38 E5 85 F1 | 	sub	objptr, ##26936
1727c     20 C3 BF FD | 	call	#_converttofloat
17280     08 1E 06 F1 | 	add	local01, #8
17284     0F FB 61 FC | 	wrlong	result1, local01
17288     A7 F0 03 F6 | 	mov	ptra, fp
1728c     B2 00 A0 FD | 	call	#popregs_
17290                 | _do_setlen_ret
17290     2D 00 64 FD | 	ret
17294                 | 
17294                 | ' 
17294                 | ' sub do_setvol
17294                 | _do_setvol
17294     02 4A 05 F6 | 	mov	COUNT_, #2
17298     A8 00 A0 FD | 	call	#pushregs_
1729c     18 F0 07 F1 | 	add	ptra, #24
172a0     BC 35 BF FD | 	call	#_pop
172a4     FD 12 02 F6 | 	mov	arg01, result1
172a8     FE 1E 02 F6 | 	mov	local01, result2
172ac     FF 20 02 F6 | 	mov	local02, result3
172b0     A7 12 62 FC | 	wrlong	arg01, fp
172b4     04 4E 05 F1 | 	add	fp, #4
172b8     A7 1E 62 FC | 	wrlong	local01, fp
172bc     04 4E 05 F1 | 	add	fp, #4
172c0     A7 20 62 FC | 	wrlong	local02, fp
172c4     08 4E 85 F1 | 	sub	fp, #8
172c8     94 35 BF FD | 	call	#_pop
172cc     FD 20 02 F6 | 	mov	local02, result1
172d0     0C 4E 05 F1 | 	add	fp, #12
172d4     A7 20 62 FC | 	wrlong	local02, fp
172d8     04 4E 05 F1 | 	add	fp, #4
172dc     A7 FC 61 FC | 	wrlong	result2, fp
172e0     04 4E 05 F1 | 	add	fp, #4
172e4     A7 FE 61 FC | 	wrlong	result3, fp
172e8     08 4E 85 F1 | 	sub	fp, #8
172ec     A7 12 02 F6 | 	mov	arg01, fp
172f0     0C 4E 85 F1 | 	sub	fp, #12
172f4     FC C1 BF FD | 	call	#_converttoint
172f8     FD 20 02 F6 | 	mov	local02, result1
172fc     10 1F 02 F6 | 	mov	local01, local02
17300     01 1E 66 F0 | 	shl	local01, #1
17304     10 1F 02 F1 | 	add	local01, local02
17308     03 1E 66 F0 | 	shl	local01, #3
1730c     34 00 00 FF 
17310     38 E5 05 F1 | 	add	objptr, ##26936
17314     F2 1E 02 F1 | 	add	local01, objptr
17318     A7 12 02 F6 | 	mov	arg01, fp
1731c     34 00 00 FF 
17320     38 E5 85 F1 | 	sub	objptr, ##26936
17324     78 C2 BF FD | 	call	#_converttofloat
17328     0C 1E 06 F1 | 	add	local01, #12
1732c     0F FB 61 FC | 	wrlong	result1, local01
17330     A7 F0 03 F6 | 	mov	ptra, fp
17334     B2 00 A0 FD | 	call	#popregs_
17338                 | _do_setvol_ret
17338     2D 00 64 FD | 	ret
1733c                 | 
1733c                 | ' 
1733c                 | ' sub do_setpan
1733c                 | _do_setpan
1733c     02 4A 05 F6 | 	mov	COUNT_, #2
17340     A8 00 A0 FD | 	call	#pushregs_
17344     18 F0 07 F1 | 	add	ptra, #24
17348     14 35 BF FD | 	call	#_pop
1734c     FD 12 02 F6 | 	mov	arg01, result1
17350     FE 1E 02 F6 | 	mov	local01, result2
17354     FF 20 02 F6 | 	mov	local02, result3
17358     A7 12 62 FC | 	wrlong	arg01, fp
1735c     04 4E 05 F1 | 	add	fp, #4
17360     A7 1E 62 FC | 	wrlong	local01, fp
17364     04 4E 05 F1 | 	add	fp, #4
17368     A7 20 62 FC | 	wrlong	local02, fp
1736c     08 4E 85 F1 | 	sub	fp, #8
17370     EC 34 BF FD | 	call	#_pop
17374     FD 20 02 F6 | 	mov	local02, result1
17378     0C 4E 05 F1 | 	add	fp, #12
1737c     A7 20 62 FC | 	wrlong	local02, fp
17380     04 4E 05 F1 | 	add	fp, #4
17384     A7 FC 61 FC | 	wrlong	result2, fp
17388     04 4E 05 F1 | 	add	fp, #4
1738c     A7 FE 61 FC | 	wrlong	result3, fp
17390     08 4E 85 F1 | 	sub	fp, #8
17394     A7 12 02 F6 | 	mov	arg01, fp
17398     0C 4E 85 F1 | 	sub	fp, #12
1739c     54 C1 BF FD | 	call	#_converttoint
173a0     FD 20 02 F6 | 	mov	local02, result1
173a4     10 1F 02 F6 | 	mov	local01, local02
173a8     01 1E 66 F0 | 	shl	local01, #1
173ac     10 1F 02 F1 | 	add	local01, local02
173b0     03 1E 66 F0 | 	shl	local01, #3
173b4     34 00 00 FF 
173b8     38 E5 05 F1 | 	add	objptr, ##26936
173bc     F2 1E 02 F1 | 	add	local01, objptr
173c0     A7 12 02 F6 | 	mov	arg01, fp
173c4     34 00 00 FF 
173c8     38 E5 85 F1 | 	sub	objptr, ##26936
173cc     D0 C1 BF FD | 	call	#_converttofloat
173d0     10 1E 06 F1 | 	add	local01, #16
173d4     0F FB 61 FC | 	wrlong	result1, local01
173d8     A7 F0 03 F6 | 	mov	ptra, fp
173dc     B2 00 A0 FD | 	call	#popregs_
173e0                 | _do_setpan_ret
173e0     2D 00 64 FD | 	ret
173e4                 | 
173e4                 | ' 
173e4                 | ' 
173e4                 | ' sub do_pinwrite
173e4                 | _do_pinwrite
173e4     01 4A 05 F6 | 	mov	COUNT_, #1
173e8     A8 00 A0 FD | 	call	#pushregs_
173ec     18 F0 07 F1 | 	add	ptra, #24
173f0     6C 34 BF FD | 	call	#_pop
173f4     FD 14 02 F6 | 	mov	arg02, result1
173f8     FE 12 02 F6 | 	mov	arg01, result2
173fc     FF 1E 02 F6 | 	mov	local01, result3
17400     A7 14 62 FC | 	wrlong	arg02, fp
17404     04 4E 05 F1 | 	add	fp, #4
17408     A7 12 62 FC | 	wrlong	arg01, fp
1740c     04 4E 05 F1 | 	add	fp, #4
17410     A7 1E 62 FC | 	wrlong	local01, fp
17414     08 4E 85 F1 | 	sub	fp, #8
17418     44 34 BF FD | 	call	#_pop
1741c     FF 1E 02 F6 | 	mov	local01, result3
17420     0C 4E 05 F1 | 	add	fp, #12
17424     A7 FA 61 FC | 	wrlong	result1, fp
17428     04 4E 05 F1 | 	add	fp, #4
1742c     A7 FC 61 FC | 	wrlong	result2, fp
17430     04 4E 05 F1 | 	add	fp, #4
17434     A7 1E 62 FC | 	wrlong	local01, fp
17438     08 4E 85 F1 | 	sub	fp, #8
1743c     A7 12 02 F6 | 	mov	arg01, fp
17440     0C 4E 85 F1 | 	sub	fp, #12
17444     AC C0 BF FD | 	call	#_converttoint
17448     FD 1E 02 F6 | 	mov	local01, result1
1744c     A7 12 02 F6 | 	mov	arg01, fp
17450     A0 C0 BF FD | 	call	#_converttoint
17454     FD 14 02 F6 | 	mov	arg02, result1
17458     0F 13 02 F6 | 	mov	arg01, local01
1745c     8C 78 B0 FD | 	call	#__system___pinwrite
17460     A7 F0 03 F6 | 	mov	ptra, fp
17464     B2 00 A0 FD | 	call	#popregs_
17468                 | _do_pinwrite_ret
17468     2D 00 64 FD | 	ret
1746c                 | 
1746c                 | ' 
1746c                 | ' sub do_pinfloat
1746c                 | _do_pinfloat
1746c     00 4A 05 F6 | 	mov	COUNT_, #0
17470     A8 00 A0 FD | 	call	#pushregs_
17474     0C F0 07 F1 | 	add	ptra, #12
17478     E4 33 BF FD | 	call	#_pop
1747c     A7 FA 61 FC | 	wrlong	result1, fp
17480     04 4E 05 F1 | 	add	fp, #4
17484     A7 FC 61 FC | 	wrlong	result2, fp
17488     04 4E 05 F1 | 	add	fp, #4
1748c     A7 FE 61 FC | 	wrlong	result3, fp
17490     08 4E 85 F1 | 	sub	fp, #8
17494     A7 12 02 F6 | 	mov	arg01, fp
17498     58 C0 BF FD | 	call	#_converttoint
1749c     50 FA 61 FD | 	fltl	result1
174a0     A7 F0 03 F6 | 	mov	ptra, fp
174a4     B2 00 A0 FD | 	call	#popregs_
174a8                 | _do_pinfloat_ret
174a8     2D 00 64 FD | 	ret
174ac                 | 
174ac                 | ' 
174ac                 | ' sub do_pinlo
174ac                 | _do_pinlo
174ac     00 4A 05 F6 | 	mov	COUNT_, #0
174b0     A8 00 A0 FD | 	call	#pushregs_
174b4     0C F0 07 F1 | 	add	ptra, #12
174b8     A4 33 BF FD | 	call	#_pop
174bc     A7 FA 61 FC | 	wrlong	result1, fp
174c0     04 4E 05 F1 | 	add	fp, #4
174c4     A7 FC 61 FC | 	wrlong	result2, fp
174c8     04 4E 05 F1 | 	add	fp, #4
174cc     A7 FE 61 FC | 	wrlong	result3, fp
174d0     08 4E 85 F1 | 	sub	fp, #8
174d4     A7 12 02 F6 | 	mov	arg01, fp
174d8     18 C0 BF FD | 	call	#_converttoint
174dc     58 FA 61 FD | 	drvl	result1
174e0     A7 F0 03 F6 | 	mov	ptra, fp
174e4     B2 00 A0 FD | 	call	#popregs_
174e8                 | _do_pinlo_ret
174e8     2D 00 64 FD | 	ret
174ec                 | 
174ec                 | ' 
174ec                 | ' sub do_pinhi
174ec                 | _do_pinhi
174ec     00 4A 05 F6 | 	mov	COUNT_, #0
174f0     A8 00 A0 FD | 	call	#pushregs_
174f4     0C F0 07 F1 | 	add	ptra, #12
174f8     64 33 BF FD | 	call	#_pop
174fc     A7 FA 61 FC | 	wrlong	result1, fp
17500     04 4E 05 F1 | 	add	fp, #4
17504     A7 FC 61 FC | 	wrlong	result2, fp
17508     04 4E 05 F1 | 	add	fp, #4
1750c     A7 FE 61 FC | 	wrlong	result3, fp
17510     08 4E 85 F1 | 	sub	fp, #8
17514     A7 12 02 F6 | 	mov	arg01, fp
17518     D8 BF BF FD | 	call	#_converttoint
1751c     59 FA 61 FD | 	drvh	result1
17520     A7 F0 03 F6 | 	mov	ptra, fp
17524     B2 00 A0 FD | 	call	#popregs_
17528                 | _do_pinhi_ret
17528     2D 00 64 FD | 	ret
1752c                 | 
1752c                 | ' 
1752c                 | ' sub do_pintoggle
1752c                 | _do_pintoggle
1752c     00 4A 05 F6 | 	mov	COUNT_, #0
17530     A8 00 A0 FD | 	call	#pushregs_
17534     0C F0 07 F1 | 	add	ptra, #12
17538     24 33 BF FD | 	call	#_pop
1753c     A7 FA 61 FC | 	wrlong	result1, fp
17540     04 4E 05 F1 | 	add	fp, #4
17544     A7 FC 61 FC | 	wrlong	result2, fp
17548     04 4E 05 F1 | 	add	fp, #4
1754c     A7 FE 61 FC | 	wrlong	result3, fp
17550     08 4E 85 F1 | 	sub	fp, #8
17554     A7 12 02 F6 | 	mov	arg01, fp
17558     98 BF BF FD | 	call	#_converttoint
1755c     5F FA 61 FD | 	drvnot	result1
17560     A7 F0 03 F6 | 	mov	ptra, fp
17564     B2 00 A0 FD | 	call	#popregs_
17568                 | _do_pintoggle_ret
17568     2D 00 64 FD | 	ret
1756c                 | 
1756c                 | ' 
1756c                 | ' 
1756c                 | ' sub do_pinstart
1756c                 | _do_pinstart
1756c     03 4A 05 F6 | 	mov	COUNT_, #3
17570     A8 00 A0 FD | 	call	#pushregs_
17574     30 F0 07 F1 | 	add	ptra, #48
17578     E4 32 BF FD | 	call	#_pop
1757c     FD 16 02 F6 | 	mov	arg03, result1
17580     FE 14 02 F6 | 	mov	arg02, result2
17584     FF 18 02 F6 | 	mov	arg04, result3
17588     A7 16 62 FC | 	wrlong	arg03, fp
1758c     04 4E 05 F1 | 	add	fp, #4
17590     A7 14 62 FC | 	wrlong	arg02, fp
17594     04 4E 05 F1 | 	add	fp, #4
17598     A7 18 62 FC | 	wrlong	arg04, fp
1759c     08 4E 85 F1 | 	sub	fp, #8
175a0     BC 32 BF FD | 	call	#_pop
175a4     FD 16 02 F6 | 	mov	arg03, result1
175a8     FE 14 02 F6 | 	mov	arg02, result2
175ac     FF 18 02 F6 | 	mov	arg04, result3
175b0     0C 4E 05 F1 | 	add	fp, #12
175b4     A7 16 62 FC | 	wrlong	arg03, fp
175b8     04 4E 05 F1 | 	add	fp, #4
175bc     A7 14 62 FC | 	wrlong	arg02, fp
175c0     04 4E 05 F1 | 	add	fp, #4
175c4     A7 18 62 FC | 	wrlong	arg04, fp
175c8     14 4E 85 F1 | 	sub	fp, #20
175cc     90 32 BF FD | 	call	#_pop
175d0     FD 16 02 F6 | 	mov	arg03, result1
175d4     FE 14 02 F6 | 	mov	arg02, result2
175d8     FF 18 02 F6 | 	mov	arg04, result3
175dc     18 4E 05 F1 | 	add	fp, #24
175e0     A7 16 62 FC | 	wrlong	arg03, fp
175e4     04 4E 05 F1 | 	add	fp, #4
175e8     A7 14 62 FC | 	wrlong	arg02, fp
175ec     04 4E 05 F1 | 	add	fp, #4
175f0     A7 18 62 FC | 	wrlong	arg04, fp
175f4     20 4E 85 F1 | 	sub	fp, #32
175f8     64 32 BF FD | 	call	#_pop
175fc     FF 16 02 F6 | 	mov	arg03, result3
17600     24 4E 05 F1 | 	add	fp, #36
17604     A7 FA 61 FC | 	wrlong	result1, fp
17608     04 4E 05 F1 | 	add	fp, #4
1760c     A7 FC 61 FC | 	wrlong	result2, fp
17610     04 4E 05 F1 | 	add	fp, #4
17614     A7 16 62 FC | 	wrlong	arg03, fp
17618     08 4E 85 F1 | 	sub	fp, #8
1761c     A7 12 02 F6 | 	mov	arg01, fp
17620     24 4E 85 F1 | 	sub	fp, #36
17624     CC BE BF FD | 	call	#_converttoint
17628     FD 1E 02 F6 | 	mov	local01, result1
1762c     18 4E 05 F1 | 	add	fp, #24
17630     A7 12 02 F6 | 	mov	arg01, fp
17634     18 4E 85 F1 | 	sub	fp, #24
17638     B8 BE BF FD | 	call	#_converttoint
1763c     FD 20 02 F6 | 	mov	local02, result1
17640     0C 4E 05 F1 | 	add	fp, #12
17644     A7 12 02 F6 | 	mov	arg01, fp
17648     0C 4E 85 F1 | 	sub	fp, #12
1764c     A4 BE BF FD | 	call	#_converttoint
17650     FD 22 02 F6 | 	mov	local03, result1
17654     A7 12 02 F6 | 	mov	arg01, fp
17658     98 BE BF FD | 	call	#_converttoint
1765c     40 1E 62 FD | 	dirl	local01
17660     0F 21 02 FC | 	wrpin	local02, local01
17664     0F 23 12 FC | 	wxpin	local03, local01
17668     0F FB 21 FC | 	wypin	result1, local01
1766c     41 1E 62 FD | 	dirh	local01
17670     A7 F0 03 F6 | 	mov	ptra, fp
17674     B2 00 A0 FD | 	call	#popregs_
17678                 | _do_pinstart_ret
17678     2D 00 64 FD | 	ret
1767c                 | 
1767c                 | ' 
1767c                 | ' 
1767c                 | ' sub do_wrpin
1767c                 | _do_wrpin
1767c     01 4A 05 F6 | 	mov	COUNT_, #1
17680     A8 00 A0 FD | 	call	#pushregs_
17684     18 F0 07 F1 | 	add	ptra, #24
17688     D4 31 BF FD | 	call	#_pop
1768c     FD 14 02 F6 | 	mov	arg02, result1
17690     FE 12 02 F6 | 	mov	arg01, result2
17694     FF 1E 02 F6 | 	mov	local01, result3
17698     A7 14 62 FC | 	wrlong	arg02, fp
1769c     04 4E 05 F1 | 	add	fp, #4
176a0     A7 12 62 FC | 	wrlong	arg01, fp
176a4     04 4E 05 F1 | 	add	fp, #4
176a8     A7 1E 62 FC | 	wrlong	local01, fp
176ac     08 4E 85 F1 | 	sub	fp, #8
176b0     AC 31 BF FD | 	call	#_pop
176b4     FF 1E 02 F6 | 	mov	local01, result3
176b8     0C 4E 05 F1 | 	add	fp, #12
176bc     A7 FA 61 FC | 	wrlong	result1, fp
176c0     04 4E 05 F1 | 	add	fp, #4
176c4     A7 FC 61 FC | 	wrlong	result2, fp
176c8     04 4E 05 F1 | 	add	fp, #4
176cc     A7 1E 62 FC | 	wrlong	local01, fp
176d0     08 4E 85 F1 | 	sub	fp, #8
176d4     A7 12 02 F6 | 	mov	arg01, fp
176d8     0C 4E 85 F1 | 	sub	fp, #12
176dc     14 BE BF FD | 	call	#_converttoint
176e0     FD 1E 02 F6 | 	mov	local01, result1
176e4     A7 12 02 F6 | 	mov	arg01, fp
176e8     08 BE BF FD | 	call	#_converttoint
176ec     0F FB 01 FC | 	wrpin	result1, local01
176f0     A7 F0 03 F6 | 	mov	ptra, fp
176f4     B2 00 A0 FD | 	call	#popregs_
176f8                 | _do_wrpin_ret
176f8     2D 00 64 FD | 	ret
176fc                 | 
176fc                 | ' 
176fc                 | ' sub do_wxpin
176fc                 | _do_wxpin
176fc     01 4A 05 F6 | 	mov	COUNT_, #1
17700     A8 00 A0 FD | 	call	#pushregs_
17704     18 F0 07 F1 | 	add	ptra, #24
17708     54 31 BF FD | 	call	#_pop
1770c     FD 14 02 F6 | 	mov	arg02, result1
17710     FE 12 02 F6 | 	mov	arg01, result2
17714     FF 1E 02 F6 | 	mov	local01, result3
17718     A7 14 62 FC | 	wrlong	arg02, fp
1771c     04 4E 05 F1 | 	add	fp, #4
17720     A7 12 62 FC | 	wrlong	arg01, fp
17724     04 4E 05 F1 | 	add	fp, #4
17728     A7 1E 62 FC | 	wrlong	local01, fp
1772c     08 4E 85 F1 | 	sub	fp, #8
17730     2C 31 BF FD | 	call	#_pop
17734     FF 1E 02 F6 | 	mov	local01, result3
17738     0C 4E 05 F1 | 	add	fp, #12
1773c     A7 FA 61 FC | 	wrlong	result1, fp
17740     04 4E 05 F1 | 	add	fp, #4
17744     A7 FC 61 FC | 	wrlong	result2, fp
17748     04 4E 05 F1 | 	add	fp, #4
1774c     A7 1E 62 FC | 	wrlong	local01, fp
17750     08 4E 85 F1 | 	sub	fp, #8
17754     A7 12 02 F6 | 	mov	arg01, fp
17758     0C 4E 85 F1 | 	sub	fp, #12
1775c     94 BD BF FD | 	call	#_converttoint
17760     FD 1E 02 F6 | 	mov	local01, result1
17764     A7 12 02 F6 | 	mov	arg01, fp
17768     88 BD BF FD | 	call	#_converttoint
1776c     0F FB 11 FC | 	wxpin	result1, local01
17770     A7 F0 03 F6 | 	mov	ptra, fp
17774     B2 00 A0 FD | 	call	#popregs_
17778                 | _do_wxpin_ret
17778     2D 00 64 FD | 	ret
1777c                 | 
1777c                 | ' 
1777c                 | ' sub do_wypin
1777c                 | _do_wypin
1777c     01 4A 05 F6 | 	mov	COUNT_, #1
17780     A8 00 A0 FD | 	call	#pushregs_
17784     18 F0 07 F1 | 	add	ptra, #24
17788     D4 30 BF FD | 	call	#_pop
1778c     FD 14 02 F6 | 	mov	arg02, result1
17790     FE 12 02 F6 | 	mov	arg01, result2
17794     FF 1E 02 F6 | 	mov	local01, result3
17798     A7 14 62 FC | 	wrlong	arg02, fp
1779c     04 4E 05 F1 | 	add	fp, #4
177a0     A7 12 62 FC | 	wrlong	arg01, fp
177a4     04 4E 05 F1 | 	add	fp, #4
177a8     A7 1E 62 FC | 	wrlong	local01, fp
177ac     08 4E 85 F1 | 	sub	fp, #8
177b0     AC 30 BF FD | 	call	#_pop
177b4     FF 1E 02 F6 | 	mov	local01, result3
177b8     0C 4E 05 F1 | 	add	fp, #12
177bc     A7 FA 61 FC | 	wrlong	result1, fp
177c0     04 4E 05 F1 | 	add	fp, #4
177c4     A7 FC 61 FC | 	wrlong	result2, fp
177c8     04 4E 05 F1 | 	add	fp, #4
177cc     A7 1E 62 FC | 	wrlong	local01, fp
177d0     08 4E 85 F1 | 	sub	fp, #8
177d4     A7 12 02 F6 | 	mov	arg01, fp
177d8     0C 4E 85 F1 | 	sub	fp, #12
177dc     14 BD BF FD | 	call	#_converttoint
177e0     FD 1E 02 F6 | 	mov	local01, result1
177e4     A7 12 02 F6 | 	mov	arg01, fp
177e8     08 BD BF FD | 	call	#_converttoint
177ec     0F FB 21 FC | 	wypin	result1, local01
177f0     A7 F0 03 F6 | 	mov	ptra, fp
177f4     B2 00 A0 FD | 	call	#popregs_
177f8                 | _do_wypin_ret
177f8     2D 00 64 FD | 	ret
177fc                 | 
177fc                 | ' 
177fc                 | ' sub do_position
177fc                 | _do_position
177fc     01 4A 05 F6 | 	mov	COUNT_, #1
17800     A8 00 A0 FD | 	call	#pushregs_
17804     18 F0 07 F1 | 	add	ptra, #24
17808     54 30 BF FD | 	call	#_pop
1780c     FD 14 02 F6 | 	mov	arg02, result1
17810     FE 12 02 F6 | 	mov	arg01, result2
17814     FF 1E 02 F6 | 	mov	local01, result3
17818     A7 14 62 FC | 	wrlong	arg02, fp
1781c     04 4E 05 F1 | 	add	fp, #4
17820     A7 12 62 FC | 	wrlong	arg01, fp
17824     04 4E 05 F1 | 	add	fp, #4
17828     A7 1E 62 FC | 	wrlong	local01, fp
1782c     08 4E 85 F1 | 	sub	fp, #8
17830     2C 30 BF FD | 	call	#_pop
17834     FF 1E 02 F6 | 	mov	local01, result3
17838     0C 4E 05 F1 | 	add	fp, #12
1783c     A7 FA 61 FC | 	wrlong	result1, fp
17840     04 4E 05 F1 | 	add	fp, #4
17844     A7 FC 61 FC | 	wrlong	result2, fp
17848     04 4E 05 F1 | 	add	fp, #4
1784c     A7 1E 62 FC | 	wrlong	local01, fp
17850     08 4E 85 F1 | 	sub	fp, #8
17854     A7 12 02 F6 | 	mov	arg01, fp
17858     0C 4E 85 F1 | 	sub	fp, #12
1785c     94 BC BF FD | 	call	#_converttoint
17860     FD 1E 02 F6 | 	mov	local01, result1
17864     A7 12 02 F6 | 	mov	arg01, fp
17868     88 BC BF FD | 	call	#_converttoint
1786c     FD 14 02 F6 | 	mov	arg02, result1
17870     0F 13 02 F6 | 	mov	arg01, local01
17874     24 5B B0 FD | 	call	#_hg010b_spin2_setcursorpos
17878     A7 F0 03 F6 | 	mov	ptra, fp
1787c     B2 00 A0 FD | 	call	#popregs_
17880                 | _do_position_ret
17880     2D 00 64 FD | 	ret
17884                 | 
17884                 | ' 
17884                 | ' sub do_poke
17884                 | _do_poke
17884     01 4A 05 F6 | 	mov	COUNT_, #1
17888     A8 00 A0 FD | 	call	#pushregs_
1788c     20 F0 07 F1 | 	add	ptra, #32
17890     CC 2F BF FD | 	call	#_pop
17894     FD 14 02 F6 | 	mov	arg02, result1
17898     FE 12 02 F6 | 	mov	arg01, result2
1789c     FF 1E 02 F6 | 	mov	local01, result3
178a0     A7 14 62 FC | 	wrlong	arg02, fp
178a4     04 4E 05 F1 | 	add	fp, #4
178a8     A7 12 62 FC | 	wrlong	arg01, fp
178ac     04 4E 05 F1 | 	add	fp, #4
178b0     A7 1E 62 FC | 	wrlong	local01, fp
178b4     08 4E 85 F1 | 	sub	fp, #8
178b8     A4 2F BF FD | 	call	#_pop
178bc     FF 1E 02 F6 | 	mov	local01, result3
178c0     0C 4E 05 F1 | 	add	fp, #12
178c4     A7 FA 61 FC | 	wrlong	result1, fp
178c8     04 4E 05 F1 | 	add	fp, #4
178cc     A7 FC 61 FC | 	wrlong	result2, fp
178d0     04 4E 05 F1 | 	add	fp, #4
178d4     A7 1E 62 FC | 	wrlong	local01, fp
178d8     08 4E 85 F1 | 	sub	fp, #8
178dc     A7 12 02 F6 | 	mov	arg01, fp
178e0     0C 4E 85 F1 | 	sub	fp, #12
178e4     0C BC BF FD | 	call	#_converttoint
178e8     18 4E 05 F1 | 	add	fp, #24
178ec     A7 FA 61 FC | 	wrlong	result1, fp
178f0     18 4E 85 F1 | 	sub	fp, #24
178f4     A7 12 02 F6 | 	mov	arg01, fp
178f8     F8 BB BF FD | 	call	#_converttoint
178fc     1C 4E 05 F1 | 	add	fp, #28
17900     A7 FA 61 FC | 	wrlong	result1, fp
17904                 | ' t1=pop() 'value
17904                 | ' t2=pop() 
17904                 | ' a=converttoint(t2) : v=converttoint(t1)
17904                 | ' if a<$80000 then poke a,v else pspoke a,v
17904     04 4E 85 F1 | 	sub	fp, #4
17908     A7 1E 02 FB | 	rdlong	local01, fp
1790c     18 4E 85 F1 | 	sub	fp, #24
17910     00 04 00 FF 
17914     00 1E 16 F2 | 	cmp	local01, ##524288 wc
17918     1C 00 90 3D |  if_ae	jmp	#LR__1890
1791c     18 4E 05 F1 | 	add	fp, #24
17920     A7 12 02 FB | 	rdlong	arg01, fp
17924     04 4E 05 F1 | 	add	fp, #4
17928     A7 14 02 FB | 	rdlong	arg02, fp
1792c     1C 4E 85 F1 | 	sub	fp, #28
17930     09 15 42 FC | 	wrbyte	arg02, arg01
17934     18 00 90 FD | 	jmp	#LR__1891
17938                 | LR__1890
17938     18 4E 05 F1 | 	add	fp, #24
1793c     A7 12 02 FB | 	rdlong	arg01, fp
17940     04 4E 05 F1 | 	add	fp, #4
17944     A7 14 02 FB | 	rdlong	arg02, fp
17948     1C 4E 85 F1 | 	sub	fp, #28
1794c     7C 2F B0 FD | 	call	#_pspoke
17950                 | LR__1891
17950     A7 F0 03 F6 | 	mov	ptra, fp
17954     B2 00 A0 FD | 	call	#popregs_
17958                 | _do_poke_ret
17958     2D 00 64 FD | 	ret
1795c                 | 
1795c                 | ' 
1795c                 | ' sub do_dpoke
1795c                 | _do_dpoke
1795c     01 4A 05 F6 | 	mov	COUNT_, #1
17960     A8 00 A0 FD | 	call	#pushregs_
17964     20 F0 07 F1 | 	add	ptra, #32
17968     F4 2E BF FD | 	call	#_pop
1796c     FD 14 02 F6 | 	mov	arg02, result1
17970     FE 12 02 F6 | 	mov	arg01, result2
17974     FF 1E 02 F6 | 	mov	local01, result3
17978     A7 14 62 FC | 	wrlong	arg02, fp
1797c     04 4E 05 F1 | 	add	fp, #4
17980     A7 12 62 FC | 	wrlong	arg01, fp
17984     04 4E 05 F1 | 	add	fp, #4
17988     A7 1E 62 FC | 	wrlong	local01, fp
1798c     08 4E 85 F1 | 	sub	fp, #8
17990     CC 2E BF FD | 	call	#_pop
17994     FF 1E 02 F6 | 	mov	local01, result3
17998     0C 4E 05 F1 | 	add	fp, #12
1799c     A7 FA 61 FC | 	wrlong	result1, fp
179a0     04 4E 05 F1 | 	add	fp, #4
179a4     A7 FC 61 FC | 	wrlong	result2, fp
179a8     04 4E 05 F1 | 	add	fp, #4
179ac     A7 1E 62 FC | 	wrlong	local01, fp
179b0     08 4E 85 F1 | 	sub	fp, #8
179b4     A7 12 02 F6 | 	mov	arg01, fp
179b8     0C 4E 85 F1 | 	sub	fp, #12
179bc     34 BB BF FD | 	call	#_converttoint
179c0     18 4E 05 F1 | 	add	fp, #24
179c4     A7 FA 61 FC | 	wrlong	result1, fp
179c8     18 4E 85 F1 | 	sub	fp, #24
179cc     A7 12 02 F6 | 	mov	arg01, fp
179d0     20 BB BF FD | 	call	#_converttoint
179d4     1C 4E 05 F1 | 	add	fp, #28
179d8     A7 FA 61 FC | 	wrlong	result1, fp
179dc                 | ' t1=pop() 'value
179dc                 | ' t2=pop() 
179dc                 | ' a=converttoint(t2) : v=converttoint(t1)
179dc                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
179dc     04 4E 85 F1 | 	sub	fp, #4
179e0     A7 1E 02 FB | 	rdlong	local01, fp
179e4     18 4E 85 F1 | 	sub	fp, #24
179e8     00 04 00 FF 
179ec     00 1E 16 F2 | 	cmp	local01, ##524288 wc
179f0     1C 00 90 3D |  if_ae	jmp	#LR__1900
179f4     18 4E 05 F1 | 	add	fp, #24
179f8     A7 12 02 FB | 	rdlong	arg01, fp
179fc     04 4E 05 F1 | 	add	fp, #4
17a00     A7 14 02 FB | 	rdlong	arg02, fp
17a04     1C 4E 85 F1 | 	sub	fp, #28
17a08     09 15 52 FC | 	wrword	arg02, arg01
17a0c     18 00 90 FD | 	jmp	#LR__1901
17a10                 | LR__1900
17a10     18 4E 05 F1 | 	add	fp, #24
17a14     A7 12 02 FB | 	rdlong	arg01, fp
17a18     04 4E 05 F1 | 	add	fp, #4
17a1c     A7 14 02 FB | 	rdlong	arg02, fp
17a20     1C 4E 85 F1 | 	sub	fp, #28
17a24     5C 2E B0 FD | 	call	#_psdpoke
17a28                 | LR__1901
17a28     A7 F0 03 F6 | 	mov	ptra, fp
17a2c     B2 00 A0 FD | 	call	#popregs_
17a30                 | _do_dpoke_ret
17a30     2D 00 64 FD | 	ret
17a34                 | 
17a34                 | ' 
17a34                 | ' sub do_lpoke
17a34                 | _do_lpoke
17a34     01 4A 05 F6 | 	mov	COUNT_, #1
17a38     A8 00 A0 FD | 	call	#pushregs_
17a3c     20 F0 07 F1 | 	add	ptra, #32
17a40     1C 2E BF FD | 	call	#_pop
17a44     FD 14 02 F6 | 	mov	arg02, result1
17a48     FE 12 02 F6 | 	mov	arg01, result2
17a4c     FF 1E 02 F6 | 	mov	local01, result3
17a50     A7 14 62 FC | 	wrlong	arg02, fp
17a54     04 4E 05 F1 | 	add	fp, #4
17a58     A7 12 62 FC | 	wrlong	arg01, fp
17a5c     04 4E 05 F1 | 	add	fp, #4
17a60     A7 1E 62 FC | 	wrlong	local01, fp
17a64     08 4E 85 F1 | 	sub	fp, #8
17a68     F4 2D BF FD | 	call	#_pop
17a6c     FF 1E 02 F6 | 	mov	local01, result3
17a70     0C 4E 05 F1 | 	add	fp, #12
17a74     A7 FA 61 FC | 	wrlong	result1, fp
17a78     04 4E 05 F1 | 	add	fp, #4
17a7c     A7 FC 61 FC | 	wrlong	result2, fp
17a80     04 4E 05 F1 | 	add	fp, #4
17a84     A7 1E 62 FC | 	wrlong	local01, fp
17a88     08 4E 85 F1 | 	sub	fp, #8
17a8c     A7 12 02 F6 | 	mov	arg01, fp
17a90     0C 4E 85 F1 | 	sub	fp, #12
17a94     5C BA BF FD | 	call	#_converttoint
17a98     18 4E 05 F1 | 	add	fp, #24
17a9c     A7 FA 61 FC | 	wrlong	result1, fp
17aa0     18 4E 85 F1 | 	sub	fp, #24
17aa4     A7 12 02 F6 | 	mov	arg01, fp
17aa8     48 BA BF FD | 	call	#_converttoint
17aac     1C 4E 05 F1 | 	add	fp, #28
17ab0     A7 FA 61 FC | 	wrlong	result1, fp
17ab4                 | ' t1=pop() 'value
17ab4                 | ' t2=pop() 
17ab4                 | ' a=converttoint(t2) : v=converttoint(t1)
17ab4                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
17ab4     04 4E 85 F1 | 	sub	fp, #4
17ab8     A7 1E 02 FB | 	rdlong	local01, fp
17abc     18 4E 85 F1 | 	sub	fp, #24
17ac0     00 04 00 FF 
17ac4     00 1E 16 F2 | 	cmp	local01, ##524288 wc
17ac8     1C 00 90 3D |  if_ae	jmp	#LR__1910
17acc     18 4E 05 F1 | 	add	fp, #24
17ad0     A7 12 02 FB | 	rdlong	arg01, fp
17ad4     04 4E 05 F1 | 	add	fp, #4
17ad8     A7 14 02 FB | 	rdlong	arg02, fp
17adc     1C 4E 85 F1 | 	sub	fp, #28
17ae0     09 15 62 FC | 	wrlong	arg02, arg01
17ae4     18 00 90 FD | 	jmp	#LR__1911
17ae8                 | LR__1910
17ae8     18 4E 05 F1 | 	add	fp, #24
17aec     A7 12 02 FB | 	rdlong	arg01, fp
17af0     04 4E 05 F1 | 	add	fp, #4
17af4     A7 14 02 FB | 	rdlong	arg02, fp
17af8     1C 4E 85 F1 | 	sub	fp, #28
17afc     3C 2D B0 FD | 	call	#_pslpoke
17b00                 | LR__1911
17b00     A7 F0 03 F6 | 	mov	ptra, fp
17b04     B2 00 A0 FD | 	call	#popregs_
17b08                 | _do_lpoke_ret
17b08     2D 00 64 FD | 	ret
17b0c                 | 
17b0c                 | ' 
17b0c                 | ' sub do_peek
17b0c                 | _do_peek
17b0c     00 4A 05 F6 | 	mov	COUNT_, #0
17b10     A8 00 A0 FD | 	call	#pushregs_
17b14     14 F0 07 F1 | 	add	ptra, #20
17b18     44 2D BF FD | 	call	#_pop
17b1c     A7 FA 61 FC | 	wrlong	result1, fp
17b20     04 4E 05 F1 | 	add	fp, #4
17b24     A7 FC 61 FC | 	wrlong	result2, fp
17b28     04 4E 05 F1 | 	add	fp, #4
17b2c     A7 FE 61 FC | 	wrlong	result3, fp
17b30     08 4E 85 F1 | 	sub	fp, #8
17b34     A7 12 02 F6 | 	mov	arg01, fp
17b38     B8 B9 BF FD | 	call	#_converttoint
17b3c     0C 4E 05 F1 | 	add	fp, #12
17b40     A7 FA 61 FC | 	wrlong	result1, fp
17b44                 | ' t1=pop()
17b44                 | ' a=converttoint(t1)
17b44                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
17b44     0C 4E 85 F1 | 	sub	fp, #12
17b48     00 04 00 FF 
17b4c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17b50     1C 00 90 3D |  if_ae	jmp	#LR__1920
17b54     0C 4E 05 F1 | 	add	fp, #12
17b58     A7 12 02 FB | 	rdlong	arg01, fp
17b5c     09 FB C1 FA | 	rdbyte	result1, arg01
17b60     04 4E 05 F1 | 	add	fp, #4
17b64     A7 FA 61 FC | 	wrlong	result1, fp
17b68     10 4E 85 F1 | 	sub	fp, #16
17b6c     20 00 90 FD | 	jmp	#LR__1921
17b70                 | LR__1920
17b70     0C 4E 05 F1 | 	add	fp, #12
17b74     A7 12 02 FB | 	rdlong	arg01, fp
17b78     0C 4E 85 F1 | 	sub	fp, #12
17b7c     94 2D B0 FD | 	call	#_pspeek
17b80     FD FA E1 F8 | 	getbyte	result1, result1, #0
17b84     10 4E 05 F1 | 	add	fp, #16
17b88     A7 FA 61 FC | 	wrlong	result1, fp
17b8c     10 4E 85 F1 | 	sub	fp, #16
17b90                 | LR__1921
17b90     08 4E 05 F1 | 	add	fp, #8
17b94     A7 3A 68 FC | 	wrlong	#29, fp
17b98     08 4E 05 F1 | 	add	fp, #8
17b9c     A7 12 02 FB | 	rdlong	arg01, fp
17ba0     10 4E 85 F1 | 	sub	fp, #16
17ba4     A7 12 62 FC | 	wrlong	arg01, fp
17ba8     A7 12 02 F6 | 	mov	arg01, fp
17bac     48 2D BF FD | 	call	#_push
17bb0     A7 F0 03 F6 | 	mov	ptra, fp
17bb4     B2 00 A0 FD | 	call	#popregs_
17bb8                 | _do_peek_ret
17bb8     2D 00 64 FD | 	ret
17bbc                 | 
17bbc                 | ' 
17bbc                 | ' sub do_dpeek
17bbc                 | _do_dpeek
17bbc     00 4A 05 F6 | 	mov	COUNT_, #0
17bc0     A8 00 A0 FD | 	call	#pushregs_
17bc4     14 F0 07 F1 | 	add	ptra, #20
17bc8     94 2C BF FD | 	call	#_pop
17bcc     A7 FA 61 FC | 	wrlong	result1, fp
17bd0     04 4E 05 F1 | 	add	fp, #4
17bd4     A7 FC 61 FC | 	wrlong	result2, fp
17bd8     04 4E 05 F1 | 	add	fp, #4
17bdc     A7 FE 61 FC | 	wrlong	result3, fp
17be0     08 4E 85 F1 | 	sub	fp, #8
17be4     A7 12 02 F6 | 	mov	arg01, fp
17be8     08 B9 BF FD | 	call	#_converttoint
17bec     0C 4E 05 F1 | 	add	fp, #12
17bf0     A7 FA 61 FC | 	wrlong	result1, fp
17bf4                 | ' t1=pop()
17bf4                 | ' a=converttoint(t1)
17bf4                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
17bf4     0C 4E 85 F1 | 	sub	fp, #12
17bf8     00 04 00 FF 
17bfc     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17c00     1C 00 90 3D |  if_ae	jmp	#LR__1930
17c04     0C 4E 05 F1 | 	add	fp, #12
17c08     A7 12 02 FB | 	rdlong	arg01, fp
17c0c     09 FB E1 FA | 	rdword	result1, arg01
17c10     04 4E 05 F1 | 	add	fp, #4
17c14     A7 FA 61 FC | 	wrlong	result1, fp
17c18     10 4E 85 F1 | 	sub	fp, #16
17c1c     1C 00 90 FD | 	jmp	#LR__1931
17c20                 | LR__1930
17c20     0C 4E 05 F1 | 	add	fp, #12
17c24     A7 12 02 FB | 	rdlong	arg01, fp
17c28     0C 4E 85 F1 | 	sub	fp, #12
17c2c     94 2D B0 FD | 	call	#_psdpeek
17c30     10 4E 05 F1 | 	add	fp, #16
17c34     A7 FA 61 FC | 	wrlong	result1, fp
17c38     10 4E 85 F1 | 	sub	fp, #16
17c3c                 | LR__1931
17c3c     08 4E 05 F1 | 	add	fp, #8
17c40     A7 3A 68 FC | 	wrlong	#29, fp
17c44     08 4E 05 F1 | 	add	fp, #8
17c48     A7 12 02 FB | 	rdlong	arg01, fp
17c4c     10 4E 85 F1 | 	sub	fp, #16
17c50     A7 12 62 FC | 	wrlong	arg01, fp
17c54     A7 12 02 F6 | 	mov	arg01, fp
17c58     9C 2C BF FD | 	call	#_push
17c5c     A7 F0 03 F6 | 	mov	ptra, fp
17c60     B2 00 A0 FD | 	call	#popregs_
17c64                 | _do_dpeek_ret
17c64     2D 00 64 FD | 	ret
17c68                 | 
17c68                 | ' 
17c68                 | ' 
17c68                 | ' sub do_lpeek
17c68                 | _do_lpeek
17c68     00 4A 05 F6 | 	mov	COUNT_, #0
17c6c     A8 00 A0 FD | 	call	#pushregs_
17c70     14 F0 07 F1 | 	add	ptra, #20
17c74     E8 2B BF FD | 	call	#_pop
17c78     A7 FA 61 FC | 	wrlong	result1, fp
17c7c     04 4E 05 F1 | 	add	fp, #4
17c80     A7 FC 61 FC | 	wrlong	result2, fp
17c84     04 4E 05 F1 | 	add	fp, #4
17c88     A7 FE 61 FC | 	wrlong	result3, fp
17c8c     08 4E 85 F1 | 	sub	fp, #8
17c90     A7 12 02 F6 | 	mov	arg01, fp
17c94     5C B8 BF FD | 	call	#_converttoint
17c98     0C 4E 05 F1 | 	add	fp, #12
17c9c     A7 FA 61 FC | 	wrlong	result1, fp
17ca0                 | ' t1=pop()
17ca0                 | ' a=converttoint(t1)
17ca0                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
17ca0     0C 4E 85 F1 | 	sub	fp, #12
17ca4     00 04 00 FF 
17ca8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17cac     1C 00 90 3D |  if_ae	jmp	#LR__1940
17cb0     0C 4E 05 F1 | 	add	fp, #12
17cb4     A7 12 02 FB | 	rdlong	arg01, fp
17cb8     09 FB 01 FB | 	rdlong	result1, arg01
17cbc     04 4E 05 F1 | 	add	fp, #4
17cc0     A7 FA 61 FC | 	wrlong	result1, fp
17cc4     10 4E 85 F1 | 	sub	fp, #16
17cc8     1C 00 90 FD | 	jmp	#LR__1941
17ccc                 | LR__1940
17ccc     0C 4E 05 F1 | 	add	fp, #12
17cd0     A7 12 02 FB | 	rdlong	arg01, fp
17cd4     0C 4E 85 F1 | 	sub	fp, #12
17cd8     90 2C B0 FD | 	call	#_pslpeek
17cdc     10 4E 05 F1 | 	add	fp, #16
17ce0     A7 FA 61 FC | 	wrlong	result1, fp
17ce4     10 4E 85 F1 | 	sub	fp, #16
17ce8                 | LR__1941
17ce8     08 4E 05 F1 | 	add	fp, #8
17cec     A7 3A 68 FC | 	wrlong	#29, fp
17cf0     08 4E 05 F1 | 	add	fp, #8
17cf4     A7 12 02 FB | 	rdlong	arg01, fp
17cf8     10 4E 85 F1 | 	sub	fp, #16
17cfc     A7 12 62 FC | 	wrlong	arg01, fp
17d00     A7 12 02 F6 | 	mov	arg01, fp
17d04     F0 2B BF FD | 	call	#_push
17d08     A7 F0 03 F6 | 	mov	ptra, fp
17d0c     B2 00 A0 FD | 	call	#popregs_
17d10                 | _do_lpeek_ret
17d10     2D 00 64 FD | 	ret
17d14                 | 
17d14                 | ' 
17d14                 | ' sub do_fre
17d14                 | _do_fre
17d14     01 4A 05 F6 | 	mov	COUNT_, #1
17d18     A8 00 A0 FD | 	call	#pushregs_
17d1c     0C F0 07 F1 | 	add	ptra, #12
17d20     79 00 00 FF 
17d24     88 E5 05 F1 | 	add	objptr, ##62344
17d28     F2 12 02 FB | 	rdlong	arg01, objptr
17d2c     16 00 00 FF 
17d30     2C E5 85 F1 | 	sub	objptr, ##11564
17d34     F2 1E 02 FB | 	rdlong	local01, objptr
17d38     0F 13 82 F1 | 	sub	arg01, local01
17d3c     16 00 00 FF 
17d40     D4 E5 05 F1 | 	add	objptr, ##11732
17d44     F2 12 62 FC | 	wrlong	arg01, objptr
17d48     08 4E 05 F1 | 	add	fp, #8
17d4c     A7 3A 68 FC | 	wrlong	#29, fp
17d50     08 4E 85 F1 | 	sub	fp, #8
17d54     F2 1E 02 FB | 	rdlong	local01, objptr
17d58     7A 00 00 FF 
17d5c     30 E4 85 F1 | 	sub	objptr, ##62512
17d60     A7 1E 62 FC | 	wrlong	local01, fp
17d64     A7 12 02 F6 | 	mov	arg01, fp
17d68     8C 2B BF FD | 	call	#_push
17d6c     A7 F0 03 F6 | 	mov	ptra, fp
17d70     B2 00 A0 FD | 	call	#popregs_
17d74                 | _do_fre_ret
17d74     2D 00 64 FD | 	ret
17d78                 | 
17d78                 | ' 
17d78                 | ' sub do_adr
17d78                 | _do_adr
17d78                 | _do_adr_ret
17d78     2D 00 64 FD | 	ret
17d7c                 | 
17d7c                 | ' 
17d7c                 | ' sub do_getnotevalue
17d7c                 | _do_getnotevalue
17d7c     01 4A 05 F6 | 	mov	COUNT_, #1
17d80     A8 00 A0 FD | 	call	#pushregs_
17d84     1C F0 07 F1 | 	add	ptra, #28
17d88     D4 2A BF FD | 	call	#_pop
17d8c     FF 14 02 F6 | 	mov	arg02, result3
17d90     10 4E 05 F1 | 	add	fp, #16
17d94     A7 FA 61 FC | 	wrlong	result1, fp
17d98     04 4E 05 F1 | 	add	fp, #4
17d9c     A7 FC 61 FC | 	wrlong	result2, fp
17da0     04 4E 05 F1 | 	add	fp, #4
17da4     A7 14 62 FC | 	wrlong	arg02, fp
17da8     08 4E 85 F1 | 	sub	fp, #8
17dac     A7 12 02 F6 | 	mov	arg01, fp
17db0     10 4E 85 F1 | 	sub	fp, #16
17db4     3C B7 BF FD | 	call	#_converttoint
17db8     FD 14 52 F6 | 	abs	arg02, result1 wc
17dbc     0C 14 16 FD | 	qdiv	arg02, #12
17dc0     0C 4E 05 F1 | 	add	fp, #12
17dc4     A7 FA 61 FC | 	wrlong	result1, fp
17dc8     34 00 00 FF 
17dcc     D8 E4 05 F1 | 	add	objptr, ##26840
17dd0     08 4E 85 F1 | 	sub	fp, #8
17dd4     19 14 62 FD | 	getqy	arg02
17dd8     0A 15 82 F6 | 	negc	arg02, arg02
17ddc     02 14 66 F0 | 	shl	arg02, #2
17de0     F2 14 02 F1 | 	add	arg02, objptr
17de4     0A 15 02 FB | 	rdlong	arg02, arg02
17de8     A7 14 62 FC | 	wrlong	arg02, fp
17dec     08 4E 05 F1 | 	add	fp, #8
17df0     A7 14 02 FB | 	rdlong	arg02, fp
17df4     0A 15 52 F6 | 	abs	arg02, arg02 wc
17df8     0C 14 16 FD | 	qdiv	arg02, #12
17dfc     0C 4E 85 F1 | 	sub	fp, #12
17e00     34 00 00 FF 
17e04     D8 E4 85 F1 | 	sub	objptr, ##26840
17e08     18 14 62 FD | 	getqx	arg02
17e0c     0A 13 82 F6 | 	negc	arg01, arg02
17e10     09 13 52 F6 | 	abs	arg01, arg01 wc
17e14     1F 1E C6 C9 |  if_b	decod	local01, #31
17e18     00 1E 06 36 |  if_ae	mov	local01, #0
17e1c     94 94 B0 FD | 	call	#__system___float_fromuns
17e20     0F FB 61 F5 | 	xor	result1, local01
17e24     08 4E 05 F1 | 	add	fp, #8
17e28     A7 FA 61 FC | 	wrlong	result1, fp
17e2c     FD 14 02 F6 | 	mov	arg02, result1
17e30     08 4E 85 F1 | 	sub	fp, #8
17e34     1E 12 C6 F9 | 	decod	arg01, #30
17e38     60 A7 B0 FD | 	call	#__system____builtin_powf
17e3c     FD 12 02 F6 | 	mov	arg01, result1
17e40     04 4E 05 F1 | 	add	fp, #4
17e44     A7 14 02 FB | 	rdlong	arg02, fp
17e48     04 4E 85 F1 | 	sub	fp, #4
17e4c     68 98 B0 FD | 	call	#__system___float_mul
17e50     A7 FA 61 FC | 	wrlong	result1, fp
17e54     10 4E 05 F1 | 	add	fp, #16
17e58     A7 FA 61 FC | 	wrlong	result1, fp
17e5c     08 4E 05 F1 | 	add	fp, #8
17e60     A7 3C 68 FC | 	wrlong	#30, fp
17e64     08 4E 85 F1 | 	sub	fp, #8
17e68     A7 12 02 F6 | 	mov	arg01, fp
17e6c     10 4E 85 F1 | 	sub	fp, #16
17e70     84 2A BF FD | 	call	#_push
17e74     A7 F0 03 F6 | 	mov	ptra, fp
17e78     B2 00 A0 FD | 	call	#popregs_
17e7c                 | _do_getnotevalue_ret
17e7c     2D 00 64 FD | 	ret
17e80                 | 
17e80                 | ' 
17e80                 | ' 
17e80                 | ' sub do_waitms
17e80                 | _do_waitms
17e80     01 4A 05 F6 | 	mov	COUNT_, #1
17e84     A8 00 A0 FD | 	call	#pushregs_
17e88     18 F0 07 F1 | 	add	ptra, #24
17e8c     D0 29 BF FD | 	call	#_pop
17e90     A7 FA 61 FC | 	wrlong	result1, fp
17e94     04 4E 05 F1 | 	add	fp, #4
17e98     A7 FC 61 FC | 	wrlong	result2, fp
17e9c     04 4E 05 F1 | 	add	fp, #4
17ea0     A7 FE 61 FC | 	wrlong	result3, fp
17ea4                 | ' 
17ea4                 | ' t1=pop() 'value
17ea4                 | ' 
17ea4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
17ea4     08 4E 85 F1 | 	sub	fp, #8
17ea8     1C FE 0D F2 | 	cmp	result3, #28 wz
17eac     08 4E 05 51 |  if_ne	add	fp, #8
17eb0     A7 12 02 5B |  if_ne	rdlong	arg01, fp
17eb4     08 4E 85 51 |  if_ne	sub	fp, #8
17eb8     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
17ebc     A7 12 02 AB |  if_e	rdlong	arg01, fp
17ec0     0C 4E 05 A1 |  if_e	add	fp, #12
17ec4     A7 12 62 AC |  if_e	wrlong	arg01, fp
17ec8     0C 4E 85 A1 |  if_e	sub	fp, #12
17ecc     14 00 90 AD |  if_e	jmp	#LR__1950
17ed0     A7 12 02 F6 | 	mov	arg01, fp
17ed4     1C B6 BF FD | 	call	#_converttoint
17ed8     0C 4E 05 F1 | 	add	fp, #12
17edc     A7 FA 61 FC | 	wrlong	result1, fp
17ee0     0C 4E 85 F1 | 	sub	fp, #12
17ee4                 | LR__1950
17ee4                 | ' if t<0 then return
17ee4     0C 4E 05 F1 | 	add	fp, #12
17ee8     A7 12 02 FB | 	rdlong	arg01, fp
17eec     0C 4E 85 F1 | 	sub	fp, #12
17ef0     00 12 56 F2 | 	cmps	arg01, #0 wc
17ef4     B8 00 90 CD |  if_b	jmp	#LR__1955
17ef8                 | ' if t < 5000 then 
17ef8     0C 4E 05 F1 | 	add	fp, #12
17efc     A7 12 02 FB | 	rdlong	arg01, fp
17f00     0C 4E 85 F1 | 	sub	fp, #12
17f04     09 00 00 FF 
17f08     88 13 56 F2 | 	cmps	arg01, ##5000 wc
17f0c     14 00 90 3D |  if_ae	jmp	#LR__1951
17f10     0C 4E 05 F1 | 	add	fp, #12
17f14     A7 12 02 FB | 	rdlong	arg01, fp
17f18     0C 4E 85 F1 | 	sub	fp, #12
17f1c     0C 6F B0 FD | 	call	#__system___waitms
17f20     8C 00 90 FD | 	jmp	#LR__1954
17f24                 | LR__1951
17f24     10 4E 05 F1 | 	add	fp, #16
17f28     A7 02 68 FC | 	wrlong	#1, fp
17f2c     04 4E 85 F1 | 	sub	fp, #4
17f30     A7 12 02 FB | 	rdlong	arg01, fp
17f34     09 13 52 F6 | 	abs	arg01, arg01 wc
17f38     09 00 00 FF 
17f3c     88 13 16 FD | 	qdiv	arg01, ##5000
17f40                 | '   for i=1 to t/5000
17f40     0C 4E 85 F1 | 	sub	fp, #12
17f44     18 1E 62 FD | 	getqx	local01
17f48     0F 1F 82 F6 | 	negc	local01, local01
17f4c     01 1E 06 F1 | 	add	local01, #1
17f50                 | LR__1952
17f50     10 4E 05 F1 | 	add	fp, #16
17f54     A7 12 02 FB | 	rdlong	arg01, fp
17f58     10 4E 85 F1 | 	sub	fp, #16
17f5c     0F 13 52 F2 | 	cmps	arg01, local01 wc
17f60     28 00 90 3D |  if_ae	jmp	#LR__1953
17f64     0C 4E 05 F1 | 	add	fp, #12
17f68     A7 12 02 FB | 	rdlong	arg01, fp
17f6c     0C 4E 85 F1 | 	sub	fp, #12
17f70     B8 6E B0 FD | 	call	#__system___waitms
17f74     10 4E 05 F1 | 	add	fp, #16
17f78     A7 12 02 FB | 	rdlong	arg01, fp
17f7c     01 12 06 F1 | 	add	arg01, #1
17f80     A7 12 62 FC | 	wrlong	arg01, fp
17f84     10 4E 85 F1 | 	sub	fp, #16
17f88     C4 FF 9F FD | 	jmp	#LR__1952
17f8c                 | LR__1953
17f8c     0C 4E 05 F1 | 	add	fp, #12
17f90     A7 1E 02 FB | 	rdlong	local01, fp
17f94     0F 1F 52 F6 | 	abs	local01, local01 wc
17f98     09 00 00 FF 
17f9c     88 1F 16 FD | 	qdiv	local01, ##5000
17fa0     0C 4E 85 F1 | 	sub	fp, #12
17fa4     19 1E 62 FD | 	getqy	local01
17fa8     0F 13 82 F6 | 	negc	arg01, local01
17fac     7C 6E B0 FD | 	call	#__system___waitms
17fb0                 | LR__1954
17fb0                 | LR__1955
17fb0     A7 F0 03 F6 | 	mov	ptra, fp
17fb4     B2 00 A0 FD | 	call	#popregs_
17fb8                 | _do_waitms_ret
17fb8     2D 00 64 FD | 	ret
17fbc                 | 
17fbc                 | ' 
17fbc                 | ' sub do_waitvbl
17fbc                 | _do_waitvbl
17fbc     01 12 06 F6 | 	mov	arg01, #1
17fc0     78 54 B0 FD | 	call	#_hg010b_spin2_waitvbl
17fc4                 | _do_waitvbl_ret
17fc4     2D 00 64 FD | 	ret
17fc8                 | 
17fc8                 | ' 
17fc8                 | ' sub do_waitclock
17fc8                 | _do_waitclock
17fc8     79 00 00 FF 
17fcc     84 E5 05 F1 | 	add	objptr, ##62340
17fd0     F2 00 02 FB | 	rdlong	_var01, objptr
17fd4                 | ' c=hkcnt
17fd4                 | ' do: loop until hkcnt<>c
17fd4                 | LR__1960
17fd4     F2 02 02 FB | 	rdlong	_var02, objptr
17fd8     00 03 0A F2 | 	cmp	_var02, _var01 wz
17fdc     F4 FF 9F AD |  if_e	jmp	#LR__1960
17fe0     79 00 00 FF 
17fe4     84 E5 85 F1 | 	sub	objptr, ##62340
17fe8                 | _do_waitclock_ret
17fe8     2D 00 64 FD | 	ret
17fec                 | 
17fec                 | ' 
17fec                 | ' sub do_dir
17fec                 | _do_dir
17fec     05 4A 05 F6 | 	mov	COUNT_, #5
17ff0     A8 00 A0 FD | 	call	#pushregs_
17ff4     74 01 00 FF 
17ff8     7D 12 06 F6 | 	mov	arg01, ##@LR__5185
17ffc     C4 71 B0 FD | 	call	#__system___chdir
18000                 | ' chdir("/sd/bas")       ' set working directory
18000                 | ' print "Working directory: "; currentdir$ 
18000     00 12 06 F6 | 	mov	arg01, #0
18004     C8 C4 B0 FD | 	call	#__system___getiolock_0484
18008     FD 12 02 F6 | 	mov	arg01, result1
1800c     28 6B B0 FD | 	call	#__system___lockmem
18010     74 01 00 FF 
18014     85 14 06 F6 | 	mov	arg02, ##@LR__5186
18018     00 12 06 F6 | 	mov	arg01, #0
1801c     00 16 06 F6 | 	mov	arg03, #0
18020     1C 78 B0 FD | 	call	#__system___basic_print_string
18024     72 00 00 FF 
18028     98 E4 05 F1 | 	add	objptr, ##58520
1802c     F2 14 02 FB | 	rdlong	arg02, objptr
18030     72 00 00 FF 
18034     98 E4 85 F1 | 	sub	objptr, ##58520
18038     00 12 06 F6 | 	mov	arg01, #0
1803c     00 16 06 F6 | 	mov	arg03, #0
18040     FC 77 B0 FD | 	call	#__system___basic_print_string
18044     00 12 06 F6 | 	mov	arg01, #0
18048     0A 14 06 F6 | 	mov	arg02, #10
1804c     00 16 06 F6 | 	mov	arg03, #0
18050     94 77 B0 FD | 	call	#__system___basic_print_char
18054     00 12 06 F6 | 	mov	arg01, #0
18058     74 C4 B0 FD | 	call	#__system___getiolock_0484
1805c     FD 00 68 FC | 	wrlong	#0, result1
18060     00 1E 06 F6 | 	mov	local01, #0
18064     74 01 00 FF 
18068     99 12 06 F6 | 	mov	arg01, ##@LR__5187
1806c     10 14 06 F6 | 	mov	arg02, #16
18070     94 C5 B0 FD | 	call	#__system___basic_dir
18074     FD 20 02 F6 | 	mov	local02, result1
18078                 | ' px=0:
18078                 | ' filename=dir$("*", fbDirectory)
18078                 | ' while filename <> "" and filename <> nil
18078                 | LR__1970
18078     00 22 06 F6 | 	mov	local03, #0
1807c     74 01 00 FF 
18080     9B 14 06 F6 | 	mov	arg02, ##@LR__5188
18084     10 13 02 F6 | 	mov	arg01, local02
18088     D4 6A B0 FD | 	call	#__system___string_cmp
1808c     00 FA 0D F2 | 	cmp	result1, #0 wz
18090     00 22 26 56 |  if_ne	not	local03, #0
18094     00 24 06 F6 | 	mov	local04, #0
18098     10 13 02 F6 | 	mov	arg01, local02
1809c     00 14 06 F6 | 	mov	arg02, #0
180a0     BC 6A B0 FD | 	call	#__system___string_cmp
180a4     00 FA 0D F2 | 	cmp	result1, #0 wz
180a8     00 24 26 56 |  if_ne	not	local04, #0
180ac     12 23 CA F7 | 	test	local03, local04 wz
180b0     9C 00 90 AD |  if_e	jmp	#LR__1972
180b4                 | '   print "[dir] ";filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
180b4     00 12 06 F6 | 	mov	arg01, #0
180b8     14 C4 B0 FD | 	call	#__system___getiolock_0484
180bc     FD 12 02 F6 | 	mov	arg01, result1
180c0     74 6A B0 FD | 	call	#__system___lockmem
180c4     74 01 00 FF 
180c8     9C 14 06 F6 | 	mov	arg02, ##@LR__5189
180cc     00 12 06 F6 | 	mov	arg01, #0
180d0     00 16 06 F6 | 	mov	arg03, #0
180d4     68 77 B0 FD | 	call	#__system___basic_print_string
180d8     00 26 06 F6 | 	mov	local05, #0
180dc     00 12 06 F6 | 	mov	arg01, #0
180e0     10 15 02 F6 | 	mov	arg02, local02
180e4     00 16 06 F6 | 	mov	arg03, #0
180e8     54 77 B0 FD | 	call	#__system___basic_print_string
180ec     00 12 06 F6 | 	mov	arg01, #0
180f0     DC C3 B0 FD | 	call	#__system___getiolock_0484
180f4     FD 00 68 FC | 	wrlong	#0, result1
180f8     40 1E 06 F1 | 	add	local01, #64
180fc     0F 13 02 F6 | 	mov	arg01, local01
18100     D4 52 B0 FD | 	call	#_hg010b_spin2_setcursorx
18104     00 1F 56 F2 | 	cmps	local01, #256 wc
18108     30 00 90 CD |  if_b	jmp	#LR__1971
1810c     00 1E 06 F6 | 	mov	local01, #0
18110     00 12 06 F6 | 	mov	arg01, #0
18114     B8 C3 B0 FD | 	call	#__system___getiolock_0484
18118     FD 12 02 F6 | 	mov	arg01, result1
1811c     18 6A B0 FD | 	call	#__system___lockmem
18120     00 12 06 F6 | 	mov	arg01, #0
18124     0A 14 06 F6 | 	mov	arg02, #10
18128     00 16 06 F6 | 	mov	arg03, #0
1812c     B8 76 B0 FD | 	call	#__system___basic_print_char
18130     00 12 06 F6 | 	mov	arg01, #0
18134     98 C3 B0 FD | 	call	#__system___getiolock_0484
18138     FD 00 68 FC | 	wrlong	#0, result1
1813c                 | LR__1971
1813c     00 12 06 F6 | 	mov	arg01, #0
18140     00 14 06 F6 | 	mov	arg02, #0
18144     C0 C4 B0 FD | 	call	#__system___basic_dir
18148     FD 20 02 F6 | 	mov	local02, result1
1814c     28 FF 9F FD | 	jmp	#LR__1970
18150                 | LR__1972
18150                 | ' print
18150     00 12 06 F6 | 	mov	arg01, #0
18154     78 C3 B0 FD | 	call	#__system___getiolock_0484
18158     FD 12 02 F6 | 	mov	arg01, result1
1815c     D8 69 B0 FD | 	call	#__system___lockmem
18160     00 12 06 F6 | 	mov	arg01, #0
18164     0A 14 06 F6 | 	mov	arg02, #10
18168     00 16 06 F6 | 	mov	arg03, #0
1816c     78 76 B0 FD | 	call	#__system___basic_print_char
18170     00 12 06 F6 | 	mov	arg01, #0
18174     58 C3 B0 FD | 	call	#__system___getiolock_0484
18178     FD 00 68 FC | 	wrlong	#0, result1
1817c     00 1E 06 F6 | 	mov	local01, #0
18180                 | ' return cursor_y
18180     74 01 00 FF 
18184     A3 12 06 F6 | 	mov	arg01, ##@LR__5190
18188     21 14 06 F6 | 	mov	arg02, #33
1818c     78 C4 B0 FD | 	call	#__system___basic_dir
18190     FD 20 02 F6 | 	mov	local02, result1
18194                 | ' px=0: py=v.getcursory()
18194                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
18194                 | ' do while filename <> "" and filename <> nil
18194                 | LR__1973
18194     00 22 06 F6 | 	mov	local03, #0
18198     74 01 00 FF 
1819c     A5 14 06 F6 | 	mov	arg02, ##@LR__5191
181a0     10 13 02 F6 | 	mov	arg01, local02
181a4     B8 69 B0 FD | 	call	#__system___string_cmp
181a8     00 FA 0D F2 | 	cmp	result1, #0 wz
181ac     00 22 26 56 |  if_ne	not	local03, #0
181b0     00 24 06 F6 | 	mov	local04, #0
181b4     10 13 02 F6 | 	mov	arg01, local02
181b8     00 14 06 F6 | 	mov	arg02, #0
181bc     A0 69 B0 FD | 	call	#__system___string_cmp
181c0     00 FA 0D F2 | 	cmp	result1, #0 wz
181c4     00 24 26 56 |  if_ne	not	local04, #0
181c8     12 23 CA F7 | 	test	local03, local04 wz
181cc     80 01 90 AD |  if_e	jmp	#LR__1978
181d0                 | '   print filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
181d0     00 12 06 F6 | 	mov	arg01, #0
181d4     F8 C2 B0 FD | 	call	#__system___getiolock_0484
181d8     FD 12 02 F6 | 	mov	arg01, result1
181dc     58 69 B0 FD | 	call	#__system___lockmem
181e0     00 12 06 F6 | 	mov	arg01, #0
181e4     10 15 02 F6 | 	mov	arg02, local02
181e8     00 16 06 F6 | 	mov	arg03, #0
181ec     50 76 B0 FD | 	call	#__system___basic_print_string
181f0     00 12 06 F6 | 	mov	arg01, #0
181f4     D8 C2 B0 FD | 	call	#__system___getiolock_0484
181f8     FD 00 68 FC | 	wrlong	#0, result1
181fc     40 1E 06 F1 | 	add	local01, #64
18200     0F 13 02 F6 | 	mov	arg01, local01
18204     D0 51 B0 FD | 	call	#_hg010b_spin2_setcursorx
18208     00 1F 56 F2 | 	cmps	local01, #256 wc
1820c     30 00 90 CD |  if_b	jmp	#LR__1974
18210     00 1E 06 F6 | 	mov	local01, #0
18214     00 12 06 F6 | 	mov	arg01, #0
18218     B4 C2 B0 FD | 	call	#__system___getiolock_0484
1821c     FD 12 02 F6 | 	mov	arg01, result1
18220     14 69 B0 FD | 	call	#__system___lockmem
18224     00 12 06 F6 | 	mov	arg01, #0
18228     0A 14 06 F6 | 	mov	arg02, #10
1822c     00 16 06 F6 | 	mov	arg03, #0
18230     B4 75 B0 FD | 	call	#__system___basic_print_char
18234     00 12 06 F6 | 	mov	arg01, #0
18238     94 C2 B0 FD | 	call	#__system___getiolock_0484
1823c     FD 00 68 FC | 	wrlong	#0, result1
18240                 | LR__1974
18240     00 12 06 F6 | 	mov	arg01, #0
18244     00 14 06 F6 | 	mov	arg02, #0
18248     BC C3 B0 FD | 	call	#__system___basic_dir
1824c     FD 20 02 F6 | 	mov	local02, result1
18250                 | '   filename = dir$()      ' continue scan
18250                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
18250                 | ' return cursor_y
18250     3E E4 05 F1 | 	add	objptr, #62
18254     F2 FA C1 FA | 	rdbyte	result1, objptr
18258     3E E4 85 F1 | 	sub	objptr, #62
1825c     22 FA 0D F2 | 	cmp	result1, #34 wz
18260     30 FF 9F 5D |  if_ne	jmp	#LR__1973
18264                 | '     print "-----more, press any key";
18264     00 12 06 F6 | 	mov	arg01, #0
18268     64 C2 B0 FD | 	call	#__system___getiolock_0484
1826c     FD 12 02 F6 | 	mov	arg01, result1
18270     C4 68 B0 FD | 	call	#__system___lockmem
18274     74 01 00 FF 
18278     A6 14 06 F6 | 	mov	arg02, ##@LR__5192
1827c     00 12 06 F6 | 	mov	arg01, #0
18280     00 16 06 F6 | 	mov	arg03, #0
18284     B8 75 B0 FD | 	call	#__system___basic_print_string
18288     00 12 06 F6 | 	mov	arg01, #0
1828c     40 C2 B0 FD | 	call	#__system___getiolock_0484
18290     FD 00 68 FC | 	wrlong	#0, result1
18294                 | '     do 
18294                 | LR__1975
18294     A8 60 B0 FD | 	call	#_usbnew_spin2_get_key
18298     00 FA 0D F2 | 	cmp	result1, #0 wz
1829c     F4 FF 9F 5D |  if_ne	jmp	#LR__1975
182a0                 | '     do
182a0                 | LR__1976
182a0     9C 60 B0 FD | 	call	#_usbnew_spin2_get_key
182a4     00 FA 0D F2 | 	cmp	result1, #0 wz
182a8     F4 FF 9F AD |  if_e	jmp	#LR__1976
182ac                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
182ac     78 00 00 FF 
182b0     F0 E4 05 F1 | 	add	objptr, ##61680
182b4     F2 22 02 FB | 	rdlong	local03, objptr
182b8     78 00 00 FF 
182bc     F0 E4 85 F1 | 	sub	objptr, ##61680
182c0     01 22 0E F2 | 	cmp	local03, #1 wz
182c4     3C 00 90 5D |  if_ne	jmp	#LR__1977
182c8     79 00 00 FF 
182cc     94 E5 05 F1 | 	add	objptr, ##62356
182d0     F2 14 02 FB | 	rdlong	arg02, objptr
182d4     04 E4 85 F1 | 	sub	objptr, #4
182d8     F2 1A 02 FB | 	rdlong	arg05, objptr
182dc     07 12 06 F6 | 	mov	arg01, #7
182e0     56 00 00 FF 
182e4     44 16 06 F6 | 	mov	arg03, ##44100
182e8     0C 18 C6 F9 | 	decod	arg04, #12
182ec     01 1C 66 F6 | 	neg	arg06, #1
182f0     6E 00 00 FF 
182f4     C4 E4 85 F1 | 	sub	objptr, ##56516
182f8     CC 63 B0 FD | 	call	#_audio096_spin2_play
182fc     0B 00 00 FF 
18300     CC E4 85 F1 | 	sub	objptr, ##5836
18304                 | LR__1977
18304     00 12 06 F6 | 	mov	arg01, #0
18308     23 14 06 F6 | 	mov	arg02, #35
1830c     8C 50 B0 FD | 	call	#_hg010b_spin2_setcursorpos
18310                 | '     position 0,35: print "                             ";: position 4,35  
18310     00 12 06 F6 | 	mov	arg01, #0
18314     B8 C1 B0 FD | 	call	#__system___getiolock_0484
18318     FD 12 02 F6 | 	mov	arg01, result1
1831c     18 68 B0 FD | 	call	#__system___lockmem
18320     74 01 00 FF 
18324     BF 14 06 F6 | 	mov	arg02, ##@LR__5193
18328     00 12 06 F6 | 	mov	arg01, #0
1832c     00 16 06 F6 | 	mov	arg03, #0
18330     0C 75 B0 FD | 	call	#__system___basic_print_string
18334     00 12 06 F6 | 	mov	arg01, #0
18338     94 C1 B0 FD | 	call	#__system___getiolock_0484
1833c     FD 00 68 FC | 	wrlong	#0, result1
18340     04 12 06 F6 | 	mov	arg01, #4
18344     23 14 06 F6 | 	mov	arg02, #35
18348     50 50 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1834c     44 FE 9F FD | 	jmp	#LR__1973
18350                 | LR__1978
18350     A7 F0 03 F6 | 	mov	ptra, fp
18354     B2 00 A0 FD | 	call	#popregs_
18358                 | _do_dir_ret
18358     2D 00 64 FD | 	ret
1835c                 | 
1835c                 | ' 
1835c                 | ' sub do_if
1835c                 | _do_if
1835c     05 4A 05 F6 | 	mov	COUNT_, #5
18360     A8 00 A0 FD | 	call	#pushregs_
18364     F8 24 BF FD | 	call	#_pop
18368     FD 1E 0A F6 | 	mov	local01, result1 wz
1836c     FE 20 02 F6 | 	mov	local02, result2
18370     FF 22 02 F6 | 	mov	local03, result3
18374                 | ' t1=pop()
18374                 | ' ' if uresult=0, jump over else
18374                 | ' if t1.result.uresult = 0 then 
18374     BC 00 90 5D |  if_ne	jmp	#LR__1982
18378                 | '   for i=lineptr_e to lineptr-1
18378     6A 00 00 FF 
1837c     80 E4 05 F1 | 	add	objptr, ##54400
18380     F2 24 02 FB | 	rdlong	local04, objptr
18384     04 E4 85 F1 | 	sub	objptr, #4
18388     F2 26 02 FB | 	rdlong	local05, objptr
1838c     6A 00 00 FF 
18390     7C E4 85 F1 | 	sub	objptr, ##54396
18394                 | LR__1980
18394     13 25 52 F2 | 	cmps	local04, local05 wc
18398     78 00 90 3D |  if_ae	jmp	#LR__1981
1839c     12 FF 01 F6 | 	mov	result3, local04
183a0     01 FE 65 F0 | 	shl	result3, #1
183a4     12 FF 01 F1 | 	add	result3, local04
183a8     02 FE 65 F0 | 	shl	result3, #2
183ac     67 00 00 FF 
183b0     7C E4 05 F1 | 	add	objptr, ##52860
183b4     F2 FE 01 F1 | 	add	result3, objptr
183b8     FF 1E 02 FB | 	rdlong	local01, result3
183bc     04 FE 05 F1 | 	add	result3, #4
183c0     FF FC 01 FB | 	rdlong	result2, result3
183c4     12 FF 01 F6 | 	mov	result3, local04
183c8     01 FE 65 F0 | 	shl	result3, #1
183cc     12 FF 01 F1 | 	add	result3, local04
183d0     02 FE 65 F0 | 	shl	result3, #2
183d4     F2 FE 01 F1 | 	add	result3, objptr
183d8     08 FE 05 F1 | 	add	result3, #8
183dc     FF FE 01 FB | 	rdlong	result3, result3
183e0     FE 20 02 F6 | 	mov	local02, result2
183e4     FF 22 02 F6 | 	mov	local03, result3
183e8                 | '     t1=compiledline(i)
183e8                 | '     if t1.result_type=token_else then lineptr_e=i : return
183e8     5A 22 0E F2 | 	cmp	local03, #90 wz
183ec     67 00 00 FF 
183f0     7C E4 85 F1 | 	sub	objptr, ##52860
183f4     6A 00 00 AF 
183f8     80 E4 05 A1 |  if_e	add	objptr, ##54400
183fc     F2 24 62 AC |  if_e	wrlong	local04, objptr
18400     6A 00 00 AF 
18404     80 E4 85 A1 |  if_e	sub	objptr, ##54400
18408     28 00 90 AD |  if_e	jmp	#LR__1983
1840c     01 24 06 F1 | 	add	local04, #1
18410     80 FF 9F FD | 	jmp	#LR__1980
18414                 | LR__1981
18414     6A 00 00 FF 
18418     7C E4 05 F1 | 	add	objptr, ##54396
1841c     F2 26 02 FB | 	rdlong	local05, objptr
18420     01 26 86 F1 | 	sub	local05, #1
18424     04 E4 05 F1 | 	add	objptr, #4
18428     F2 26 62 FC | 	wrlong	local05, objptr
1842c     6A 00 00 FF 
18430     80 E4 85 F1 | 	sub	objptr, ##54400
18434                 | LR__1982
18434                 | LR__1983
18434     A7 F0 03 F6 | 	mov	ptra, fp
18438     B2 00 A0 FD | 	call	#popregs_
1843c                 | _do_if_ret
1843c     2D 00 64 FD | 	ret
18440                 | 
18440                 | ' 
18440                 | ' sub do_else
18440                 | _do_else
18440     6A 00 00 FF 
18444     7C E4 05 F1 | 	add	objptr, ##54396
18448     F2 00 02 FB | 	rdlong	_var01, objptr
1844c     01 00 86 F1 | 	sub	_var01, #1
18450     04 E4 05 F1 | 	add	objptr, #4
18454     F2 00 62 FC | 	wrlong	_var01, objptr
18458     6A 00 00 FF 
1845c     80 E4 85 F1 | 	sub	objptr, ##54400
18460                 | _do_else_ret
18460     2D 00 64 FD | 	ret
18464                 | 
18464                 | ' 
18464                 | ' sub do_rad
18464                 | _do_rad
18464     79 00 00 FF 
18468     98 E5 05 F1 | 	add	objptr, ##62360
1846c     00 C0 9F FF 
18470     F2 00 68 FC | 	wrlong	##1065353216, objptr
18474     04 E4 05 F1 | 	add	objptr, #4
18478     00 C0 9F FF 
1847c     F2 00 68 FC | 	wrlong	##1065353216, objptr
18480     79 00 00 FF 
18484     9C E5 85 F1 | 	sub	objptr, ##62364
18488                 | _do_rad_ret
18488     2D 00 64 FD | 	ret
1848c                 | 
1848c                 | ' 
1848c                 | ' sub do_deg
1848c                 | _do_deg
1848c     79 00 00 FF 
18490     98 E5 05 F1 | 	add	objptr, ##62360
18494     7D 47 9E FF 
18498     F2 6A 68 FC | 	wrlong	##1016003125, objptr
1849c     04 E4 05 F1 | 	add	objptr, #4
184a0     97 32 A1 FF 
184a4     F2 C2 69 FC | 	wrlong	##1113927393, objptr
184a8     79 00 00 FF 
184ac     9C E5 85 F1 | 	sub	objptr, ##62364
184b0                 | _do_deg_ret
184b0     2D 00 64 FD | 	ret
184b4                 | 
184b4                 | ' 
184b4                 | ' sub do_int
184b4                 | _do_int
184b4     00 4A 05 F6 | 	mov	COUNT_, #0
184b8     A8 00 A0 FD | 	call	#pushregs_
184bc     0C F0 07 F1 | 	add	ptra, #12
184c0     9C 23 BF FD | 	call	#_pop
184c4     A7 FA 61 FC | 	wrlong	result1, fp
184c8     04 4E 05 F1 | 	add	fp, #4
184cc     A7 FC 61 FC | 	wrlong	result2, fp
184d0     04 4E 05 F1 | 	add	fp, #4
184d4     A7 FE 61 FC | 	wrlong	result3, fp
184d8     08 4E 85 F1 | 	sub	fp, #8
184dc     A7 12 02 F6 | 	mov	arg01, fp
184e0     10 B0 BF FD | 	call	#_converttoint
184e4     A7 FA 61 FC | 	wrlong	result1, fp
184e8     08 4E 05 F1 | 	add	fp, #8
184ec     A7 38 68 FC | 	wrlong	#28, fp
184f0     08 4E 85 F1 | 	sub	fp, #8
184f4     A7 12 02 F6 | 	mov	arg01, fp
184f8     FC 23 BF FD | 	call	#_push
184fc     A7 F0 03 F6 | 	mov	ptra, fp
18500     B2 00 A0 FD | 	call	#popregs_
18504                 | _do_int_ret
18504     2D 00 64 FD | 	ret
18508                 | 
18508                 | ' 
18508                 | ' sub do_nothing
18508                 | _do_nothing
18508                 | _do_nothing_ret
18508     2D 00 64 FD | 	ret
1850c                 | 
1850c                 | ' 
1850c                 | ' sub do_brun
1850c                 | _do_brun
1850c     08 4A 05 F6 | 	mov	COUNT_, #8
18510     A8 00 A0 FD | 	call	#pushregs_
18514     48 23 BF FD | 	call	#_pop
18518     FE 1A 02 F6 | 	mov	arg05, result2
1851c     FF 18 02 F6 | 	mov	arg04, result3
18520     FD 1E 02 F6 | 	mov	local01, result1
18524     0D 21 02 F6 | 	mov	local02, arg05
18528     0C 23 02 F6 | 	mov	local03, arg04
1852c                 | ' 
1852c                 | ' t1=pop() 
1852c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1852c     2B 22 0E F2 | 	cmp	local03, #43 wz
18530     10 00 90 5D |  if_ne	jmp	#LR__1990
18534     0F 13 02 F6 | 	mov	arg01, local01
18538     94 67 BF FD | 	call	#_convertstring
1853c     FD 1E 02 F6 | 	mov	local01, result1
18540     1F 22 06 F6 | 	mov	local03, #31
18544                 | LR__1990
18544                 | ' if t1.result_type=result_string then
18544     1F 22 0E F2 | 	cmp	local03, #31 wz
18548     EC 01 90 5D |  if_ne	jmp	#LR__1994
1854c     0F 25 02 F6 | 	mov	local04, local01
18550                 | '   filename=t1.result.sresult
18550                 | '   if left$(filename,1)="/" then 
18550     12 13 02 F6 | 	mov	arg01, local04
18554     01 14 06 F6 | 	mov	arg02, #1
18558     24 86 B0 FD | 	call	#__system__Left_S
1855c     FD 12 02 F6 | 	mov	arg01, result1
18560     74 01 00 FF 
18564     DD 14 06 F6 | 	mov	arg02, ##@LR__5194
18568     F4 65 B0 FD | 	call	#__system___string_cmp
1856c     00 FA 0D F2 | 	cmp	result1, #0 wz
18570     12 27 02 A6 |  if_e	mov	local05, local04
18574     14 00 90 AD |  if_e	jmp	#LR__1991
18578     74 01 00 FF 
1857c     DF 12 06 F6 | 	mov	arg01, ##@LR__5195
18580     12 15 02 F6 | 	mov	arg02, local04
18584     0C 66 B0 FD | 	call	#__system___string_concat
18588     FD 26 02 F6 | 	mov	local05, result1
1858c                 | LR__1991
1858c                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
1858c                 | '   open fullfilename for input as #9
1858c     09 12 06 F6 | 	mov	arg01, #9
18590     13 15 02 F6 | 	mov	arg02, local05
18594     00 16 06 F6 | 	mov	arg03, #0
18598     A0 71 B0 FD | 	call	#__system___basic_open_string
1859c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
185a0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
185a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
185a8     FD 28 0A F6 | 	mov	local06, result1 wz
185ac                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
185ac     8C 00 90 AD |  if_e	jmp	#LR__1992
185b0     00 12 06 F6 | 	mov	arg01, #0
185b4     18 BF B0 FD | 	call	#__system___getiolock_0484
185b8     FD 12 02 F6 | 	mov	arg01, result1
185bc     78 65 B0 FD | 	call	#__system___lockmem
185c0     74 01 00 FF 
185c4     E8 14 06 F6 | 	mov	arg02, ##@LR__5196
185c8     00 12 06 F6 | 	mov	arg01, #0
185cc     00 16 06 F6 | 	mov	arg03, #0
185d0     6C 72 B0 FD | 	call	#__system___basic_print_string
185d4     00 12 06 F6 | 	mov	arg01, #0
185d8     14 15 02 F6 | 	mov	arg02, local06
185dc     00 16 06 F6 | 	mov	arg03, #0
185e0     0A 18 06 F6 | 	mov	arg04, #10
185e4     9C 72 B0 FD | 	call	#__system___basic_print_integer
185e8     74 01 00 FF 
185ec     F6 14 06 F6 | 	mov	arg02, ##@LR__5197
185f0     00 12 06 F6 | 	mov	arg01, #0
185f4     00 16 06 F6 | 	mov	arg03, #0
185f8     44 72 B0 FD | 	call	#__system___basic_print_string
185fc     14 13 02 F6 | 	mov	arg01, local06
18600     C8 8B B0 FD | 	call	#__system___strerror
18604     FD 14 02 F6 | 	mov	arg02, result1
18608     00 12 06 F6 | 	mov	arg01, #0
1860c     00 16 06 F6 | 	mov	arg03, #0
18610     2C 72 B0 FD | 	call	#__system___basic_print_string
18614     00 12 06 F6 | 	mov	arg01, #0
18618     0A 14 06 F6 | 	mov	arg02, #10
1861c     00 16 06 F6 | 	mov	arg03, #0
18620     C4 71 B0 FD | 	call	#__system___basic_print_char
18624     00 12 06 F6 | 	mov	arg01, #0
18628     A4 BE B0 FD | 	call	#__system___getiolock_0484
1862c     FD 00 68 FC | 	wrlong	#0, result1
18630     09 12 06 F6 | 	mov	arg01, #9
18634     C8 B4 B0 FD | 	call	#__system__close
18638     FC 00 90 FD | 	jmp	#LR__1995
1863c                 | LR__1992
1863c     01 2A 06 F6 | 	mov	local07, #1
18640     00 2C 06 F6 | 	mov	local08, #0
18644                 | '   do
18644                 | LR__1993
18644                 | '     get #9,pos,block(0),1024,r : pos+=r	
18644     76 00 00 FF 
18648     B8 E4 05 F1 | 	add	objptr, ##60600
1864c     F2 16 02 F6 | 	mov	arg03, objptr
18650     76 00 00 FF 
18654     B8 E4 85 F1 | 	sub	objptr, ##60600
18658     09 12 06 F6 | 	mov	arg01, #9
1865c     15 15 02 F6 | 	mov	arg02, local07
18660     0A 18 C6 F9 | 	decod	arg04, #10
18664     01 1A 06 F6 | 	mov	arg05, #1
18668     E4 72 B0 FD | 	call	#__system___basic_get
1866c     FD 28 02 F6 | 	mov	local06, result1
18670     FD 2A 02 F1 | 	add	local07, result1
18674     76 00 00 FF 
18678     B8 E4 05 F1 | 	add	objptr, ##60600
1867c     F2 12 02 F6 | 	mov	arg01, objptr
18680     16 15 02 F6 | 	mov	arg02, local08
18684     0A 16 C6 F9 | 	decod	arg03, #10
18688     6A 00 00 FF 
1868c     EC E5 85 F1 | 	sub	objptr, ##54764
18690     1C 59 B0 FD | 	call	#_psram_spin2_write
18694     0B 00 00 FF 
18698     CC E4 85 F1 | 	sub	objptr, ##5836
1869c     14 2D 02 F1 | 	add	local08, local06
186a0     02 00 00 FF 
186a4     00 28 0E F2 | 	cmp	local06, ##1024 wz
186a8     E0 03 00 AF 
186ac     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
186b0     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1993
186b4     56 00 00 FF 
186b8     FC E5 05 F1 | 	add	objptr, ##44540
186bc     F2 12 02 FB | 	rdlong	arg01, objptr
186c0     03 12 62 FD | 	cogstop	arg01
186c4     04 E4 05 F1 | 	add	objptr, #4
186c8     F2 12 02 FB | 	rdlong	arg01, objptr
186cc     03 12 62 FD | 	cogstop	arg01
186d0     04 E4 05 F1 | 	add	objptr, #4
186d4     F2 12 02 FB | 	rdlong	arg01, objptr
186d8     03 12 62 FD | 	cogstop	arg01
186dc     21 00 00 FF 
186e0     F0 E4 05 F1 | 	add	objptr, ##17136
186e4     F2 12 02 FB | 	rdlong	arg01, objptr
186e8     03 12 62 FD | 	cogstop	arg01
186ec     18 00 00 FF 
186f0     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
186f4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
186f8     18 00 00 FF 
186fc     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
18700     21 00 00 FF 
18704     E8 E4 85 F1 | 	sub	objptr, ##17128
18708     1E 2C 06 F6 | 	mov	local08, #30
1870c     28 E4 61 FD | 	setq	objptr
18710     0A 2D F2 FC | 	coginit	local08, arg02 wc
18714     01 2C 66 C6 |  if_b	neg	local08, #1
18718     23 00 00 FF 
1871c     2C E4 05 F1 | 	add	objptr, ##17964
18720     F2 2C 62 FC | 	wrlong	local08, objptr
18724     7A 00 00 FF 
18728     38 E4 85 F1 | 	sub	objptr, ##62520
1872c     00 12 06 F6 | 	mov	arg01, #0
18730     01 12 62 FD | 	cogid	arg01
18734     03 12 62 FD | 	cogstop	arg01
18738                 | LR__1994
18738                 | LR__1995
18738     A7 F0 03 F6 | 	mov	ptra, fp
1873c     B2 00 A0 FD | 	call	#popregs_
18740                 | _do_brun_ret
18740     2D 00 64 FD | 	ret
18744                 | 
18744                 | ' 
18744                 | ' 
18744                 | ' sub do_mouse
18744                 | _do_mouse
18744     18 21 BF FD | 	call	#_pop
18748     00 FA 4D F2 | 	cmps	result1, #0 wz
1874c                 | ' t1=pop()
1874c                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1874c     14 00 90 5D |  if_ne	jmp	#LR__2000
18750     10 12 06 F6 | 	mov	arg01, #16
18754     00 14 06 F6 | 	mov	arg02, #0
18758     00 16 06 F6 | 	mov	arg03, #0
1875c     2C 40 B0 FD | 	call	#_hg010b_spin2_setspritesize
18760     10 00 90 FD | 	jmp	#LR__2001
18764                 | LR__2000
18764     10 12 06 F6 | 	mov	arg01, #16
18768     20 14 06 F6 | 	mov	arg02, #32
1876c     20 16 06 F6 | 	mov	arg03, #32
18770     18 40 B0 FD | 	call	#_hg010b_spin2_setspritesize
18774                 | LR__2001
18774                 | _do_mouse_ret
18774     2D 00 64 FD | 	ret
18778                 | 
18778                 | ' 
18778                 | ' sub do_cursor
18778                 | _do_cursor
18778     E4 20 BF FD | 	call	#_pop
1877c     00 FA 4D F2 | 	cmps	result1, #0 wz
18780                 | ' t1=pop()
18780                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
18780     14 00 90 5D |  if_ne	jmp	#LR__2010
18784     11 12 06 F6 | 	mov	arg01, #17
18788     00 14 06 F6 | 	mov	arg02, #0
1878c     00 16 06 F6 | 	mov	arg03, #0
18790     F8 3F B0 FD | 	call	#_hg010b_spin2_setspritesize
18794     10 00 90 FD | 	jmp	#LR__2011
18798                 | LR__2010
18798     11 12 06 F6 | 	mov	arg01, #17
1879c     08 14 06 F6 | 	mov	arg02, #8
187a0     10 16 06 F6 | 	mov	arg03, #16
187a4     E4 3F B0 FD | 	call	#_hg010b_spin2_setspritesize
187a8                 | LR__2011
187a8                 | _do_cursor_ret
187a8     2D 00 64 FD | 	ret
187ac                 | 
187ac                 | ' 
187ac                 | ' 
187ac                 | ' sub do_click
187ac                 | _do_click
187ac     B0 20 BF FD | 	call	#_pop
187b0     00 FA 4D F2 | 	cmps	result1, #0 wz
187b4                 | ' t1=pop()
187b4                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
187b4     78 00 00 AF 
187b8     F0 E4 05 A1 |  if_e	add	objptr, ##61680
187bc     F2 00 68 AC |  if_e	wrlong	#0, objptr
187c0     78 00 00 FF 
187c4     F0 E4 C5 F3 | 	sumz	objptr, ##61680
187c8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
187cc     78 00 00 5F 
187d0     F0 E4 85 51 |  if_ne	sub	objptr, ##61680
187d4                 | _do_click_ret
187d4     2D 00 64 FD | 	ret
187d8                 | 
187d8                 | ' 
187d8                 | ' 
187d8                 | ' sub do_beep
187d8                 | _do_beep
187d8     02 4A 05 F6 | 	mov	COUNT_, #2
187dc     A8 00 A0 FD | 	call	#pushregs_
187e0     20 F0 07 F1 | 	add	ptra, #32
187e4     78 20 BF FD | 	call	#_pop
187e8     FD 1E 02 F6 | 	mov	local01, result1
187ec     FE 1C 02 F6 | 	mov	arg06, result2
187f0     FF 20 02 F6 | 	mov	local02, result3
187f4     0C 4E 05 F1 | 	add	fp, #12
187f8     A7 1E 62 FC | 	wrlong	local01, fp
187fc     04 4E 05 F1 | 	add	fp, #4
18800     A7 1C 62 FC | 	wrlong	arg06, fp
18804     04 4E 05 F1 | 	add	fp, #4
18808     A7 20 62 FC | 	wrlong	local02, fp
1880c     14 4E 85 F1 | 	sub	fp, #20
18810     4C 20 BF FD | 	call	#_pop
18814     A7 FA 61 FC | 	wrlong	result1, fp
18818     04 4E 05 F1 | 	add	fp, #4
1881c     A7 FC 61 FC | 	wrlong	result2, fp
18820     04 4E 05 F1 | 	add	fp, #4
18824     A7 FE 61 FC | 	wrlong	result3, fp
18828                 | ' 
18828                 | ' t2=pop()
18828                 | ' t1=pop()
18828                 | ' 
18828                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
18828     08 4E 85 F1 | 	sub	fp, #8
1882c     1C FE 0D F2 | 	cmp	result3, #28 wz
18830     08 4E 05 51 |  if_ne	add	fp, #8
18834     A7 20 02 5B |  if_ne	rdlong	local02, fp
18838     08 4E 85 51 |  if_ne	sub	fp, #8
1883c     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
18840     A7 1E 02 AB |  if_e	rdlong	local01, fp
18844     18 4E 05 A1 |  if_e	add	fp, #24
18848     A7 1E 62 AC |  if_e	wrlong	local01, fp
1884c     18 4E 85 A1 |  if_e	sub	fp, #24
18850     14 00 90 AD |  if_e	jmp	#LR__2020
18854     A7 12 02 F6 | 	mov	arg01, fp
18858     98 AC BF FD | 	call	#_converttoint
1885c     18 4E 05 F1 | 	add	fp, #24
18860     A7 FA 61 FC | 	wrlong	result1, fp
18864     18 4E 85 F1 | 	sub	fp, #24
18868                 | LR__2020
18868     1C 4E 05 F1 | 	add	fp, #28
1886c     A7 FE 48 FC | 	wrbyte	#127, fp
18870     01 4E 05 F1 | 	add	fp, #1
18874     A7 00 49 FC | 	wrbyte	#128, fp
18878     01 4E 85 F1 | 	sub	fp, #1
1887c     A7 14 02 F6 | 	mov	arg02, fp
18880     04 4E 85 F1 | 	sub	fp, #4
18884     A7 16 02 FB | 	rdlong	arg03, fp
18888     18 4E 85 F1 | 	sub	fp, #24
1888c     01 16 66 F0 | 	shl	arg03, #1
18890     07 12 06 F6 | 	mov	arg01, #7
18894     0E 18 C6 F9 | 	decod	arg04, #14
18898     02 1A 06 F6 | 	mov	arg05, #2
1889c     00 1C 06 F6 | 	mov	arg06, #0
188a0     0B 00 00 FF 
188a4     CC E4 05 F1 | 	add	objptr, ##5836
188a8     D8 5E B0 FD | 	call	#_audio096_spin2_play8
188ac     0B 00 00 FF 
188b0     CC E4 85 F1 | 	sub	objptr, ##5836
188b4     0C 4E 05 F1 | 	add	fp, #12
188b8     A7 12 02 F6 | 	mov	arg01, fp
188bc     0C 4E 85 F1 | 	sub	fp, #12
188c0     34 20 BF FD | 	call	#_push
188c4     B8 F5 BF FD | 	call	#_do_waitms
188c8     07 12 06 F6 | 	mov	arg01, #7
188cc     0B 00 00 FF 
188d0     CC E4 05 F1 | 	add	objptr, ##5836
188d4     60 5F B0 FD | 	call	#_audio096_spin2_stop
188d8     0B 00 00 FF 
188dc     CC E4 85 F1 | 	sub	objptr, ##5836
188e0     A7 F0 03 F6 | 	mov	ptra, fp
188e4     B2 00 A0 FD | 	call	#popregs_
188e8                 | _do_beep_ret
188e8     2D 00 64 FD | 	ret
188ec                 | 
188ec                 | ' 
188ec                 | ' sub do_no_command
188ec                 | _do_no_command
188ec     17 12 06 F6 | 	mov	arg01, #23
188f0     E4 1D B0 FD | 	call	#_printerror
188f4                 | _do_no_command_ret
188f4     2D 00 64 FD | 	ret
188f8                 | 
188f8                 | ' 
188f8                 | ' sub do_negative
188f8                 | _do_negative
188f8     02 4A 05 F6 | 	mov	COUNT_, #2
188fc     A8 00 A0 FD | 	call	#pushregs_
18900     0C F0 07 F1 | 	add	ptra, #12
18904     58 1F BF FD | 	call	#_pop
18908     FF 1E 02 F6 | 	mov	local01, result3
1890c     A7 FA 61 FC | 	wrlong	result1, fp
18910     04 4E 05 F1 | 	add	fp, #4
18914     A7 FC 61 FC | 	wrlong	result2, fp
18918     04 4E 05 F1 | 	add	fp, #4
1891c     A7 1E 62 FC | 	wrlong	local01, fp
18920                 | ' t1=pop()
18920                 | ' if t1.result_type=result_int then 
18920     08 4E 85 F1 | 	sub	fp, #8
18924     1C 1E 0E F2 | 	cmp	local01, #28 wz
18928     A7 20 02 AB |  if_e	rdlong	local02, fp
1892c     10 1F 62 A6 |  if_e	neg	local01, local02
18930     A7 1E 62 AC |  if_e	wrlong	local01, fp
18934     5C 00 90 AD |  if_e	jmp	#LR__2032
18938     08 4E 05 F1 | 	add	fp, #8
1893c     A7 1E 02 FB | 	rdlong	local01, fp
18940     08 4E 85 F1 | 	sub	fp, #8
18944     1D 1E 0E F2 | 	cmp	local01, #29 wz
18948     1C 00 90 5D |  if_ne	jmp	#LR__2030
1894c     A7 20 02 FB | 	rdlong	local02, fp
18950     10 1F 62 F6 | 	neg	local01, local02
18954     A7 1E 62 FC | 	wrlong	local01, fp
18958     08 4E 05 F1 | 	add	fp, #8
1895c     A7 38 68 FC | 	wrlong	#28, fp
18960     08 4E 85 F1 | 	sub	fp, #8
18964     2C 00 90 FD | 	jmp	#LR__2031
18968                 | LR__2030
18968     08 4E 05 F1 | 	add	fp, #8
1896c     A7 1E 02 FB | 	rdlong	local01, fp
18970     08 4E 85 F1 | 	sub	fp, #8
18974     1E 1E 0E F2 | 	cmp	local01, #30 wz
18978     A7 FA 01 AB |  if_e	rdlong	result1, fp
1897c     1F FA E5 A4 |  if_e	bitnot	result1, #31
18980     A7 FA 61 AC |  if_e	wrlong	result1, fp
18984     08 4E 05 51 |  if_ne	add	fp, #8
18988     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1898c     08 4E 85 51 |  if_ne	sub	fp, #8
18990     A7 50 68 5C |  if_ne	wrlong	#40, fp
18994                 | LR__2031
18994                 | LR__2032
18994     A7 12 02 F6 | 	mov	arg01, fp
18998     5C 1F BF FD | 	call	#_push
1899c     A7 F0 03 F6 | 	mov	ptra, fp
189a0     B2 00 A0 FD | 	call	#popregs_
189a4                 | _do_negative_ret
189a4     2D 00 64 FD | 	ret
189a8                 | 
189a8                 | ' 
189a8                 | ' sub do_abs
189a8                 | _do_abs
189a8     01 4A 05 F6 | 	mov	COUNT_, #1
189ac     A8 00 A0 FD | 	call	#pushregs_
189b0     0C F0 07 F1 | 	add	ptra, #12
189b4     A8 1E BF FD | 	call	#_pop
189b8     FF 1E 02 F6 | 	mov	local01, result3
189bc     A7 FA 61 FC | 	wrlong	result1, fp
189c0     04 4E 05 F1 | 	add	fp, #4
189c4     A7 FC 61 FC | 	wrlong	result2, fp
189c8     04 4E 05 F1 | 	add	fp, #4
189cc     A7 1E 62 FC | 	wrlong	local01, fp
189d0                 | ' t1=pop()
189d0                 | ' if t1.result_type=result_int then 
189d0     08 4E 85 F1 | 	sub	fp, #8
189d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
189d8     A7 12 02 AB |  if_e	rdlong	arg01, fp
189dc     09 1F 42 A6 |  if_e	abs	local01, arg01
189e0     A7 1E 62 AC |  if_e	wrlong	local01, fp
189e4     2C 00 90 AD |  if_e	jmp	#LR__2040
189e8     08 4E 05 F1 | 	add	fp, #8
189ec     A7 1E 02 FB | 	rdlong	local01, fp
189f0     08 4E 85 F1 | 	sub	fp, #8
189f4     1E 1E 0E F2 | 	cmp	local01, #30 wz
189f8     A7 FA 01 AB |  if_e	rdlong	result1, fp
189fc     1F FA 05 A4 |  if_e	bitl	result1, #31
18a00     A7 FA 61 AC |  if_e	wrlong	result1, fp
18a04     08 4E 05 51 |  if_ne	add	fp, #8
18a08     A7 FE 69 5C |  if_ne	wrlong	#255, fp
18a0c     08 4E 85 51 |  if_ne	sub	fp, #8
18a10     A7 50 68 5C |  if_ne	wrlong	#40, fp
18a14                 | LR__2040
18a14     A7 12 02 F6 | 	mov	arg01, fp
18a18     DC 1E BF FD | 	call	#_push
18a1c     A7 F0 03 F6 | 	mov	ptra, fp
18a20     B2 00 A0 FD | 	call	#popregs_
18a24                 | _do_abs_ret
18a24     2D 00 64 FD | 	ret
18a28                 | 
18a28                 | ' 
18a28                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
18a28                 | ' 
18a28                 | ' ''----------------------------------------------------------------------------------------------------
18a28                 | ' ''------------------ Initialization procedures -------------------------------------------------------
18a28                 | ' ''----------------------------------------------------------------------------------------------------
18a28                 | ' 
18a28                 | ' ''--------------------------- Command function pointers
18a28                 | ' 
18a28                 | ' sub init_commands
18a28                 | _init_commands
18a28                 | ' 
18a28                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
18a28     00 00 06 F6 | 	mov	_var01, #0
18a2c     97 16 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
18a30                 | LR__2050
18a30     00 FB 01 F6 | 	mov	result1, _var01
18a34     02 FA 65 F0 | 	shl	result1, #2
18a38     63 00 00 FF 
18a3c     60 E4 05 F1 | 	add	objptr, ##50784
18a40     F2 FA 01 F1 | 	add	result1, objptr
18a44     63 00 00 FF 
18a48     60 E4 85 F1 | 	sub	objptr, ##50784
18a4c     FD E4 61 FC | 	wrlong	objptr, result1
18a50     01 00 06 F1 | 	add	_var01, #1
18a54     00 01 56 F2 | 	cmps	_var01, #256 wc
18a58     D4 FF 9F CD |  if_b	jmp	#LR__2050
18a5c                 | LR__2051
18a5c     F2 FA 01 F6 | 	mov	result1, objptr
18a60     14 FA 25 F4 | 	bith	result1, #20
18a64     63 00 00 FF 
18a68     64 E4 05 F1 | 	add	objptr, ##50788
18a6c     F2 FA 61 FC | 	wrlong	result1, objptr
18a70     63 00 00 FF 
18a74     64 E4 85 F1 | 	sub	objptr, ##50788
18a78     F2 FA 01 F6 | 	mov	result1, objptr
18a7c     15 FA 25 F4 | 	bith	result1, #21
18a80     63 00 00 FF 
18a84     68 E4 05 F1 | 	add	objptr, ##50792
18a88     F2 FA 61 FC | 	wrlong	result1, objptr
18a8c     63 00 00 FF 
18a90     68 E4 85 F1 | 	sub	objptr, ##50792
18a94     F2 FA 01 F6 | 	mov	result1, objptr
18a98     34 FA 25 F4 | 	bith	result1, #52
18a9c     63 00 00 FF 
18aa0     6C E4 05 F1 | 	add	objptr, ##50796
18aa4     F2 FA 61 FC | 	wrlong	result1, objptr
18aa8     63 00 00 FF 
18aac     6C E4 85 F1 | 	sub	objptr, ##50796
18ab0     F2 FA 01 F6 | 	mov	result1, objptr
18ab4     16 FA 25 F4 | 	bith	result1, #22
18ab8     63 00 00 FF 
18abc     74 E4 05 F1 | 	add	objptr, ##50804
18ac0     F2 FA 61 FC | 	wrlong	result1, objptr
18ac4     63 00 00 FF 
18ac8     74 E4 85 F1 | 	sub	objptr, ##50804
18acc     F2 FA 01 F6 | 	mov	result1, objptr
18ad0     00 28 00 FF 
18ad4     00 FA 45 F5 | 	or	result1, ##5242880
18ad8     63 00 00 FF 
18adc     78 E4 05 F1 | 	add	objptr, ##50808
18ae0     F2 FA 61 FC | 	wrlong	result1, objptr
18ae4     63 00 00 FF 
18ae8     78 E4 85 F1 | 	sub	objptr, ##50808
18aec     F2 FA 01 F6 | 	mov	result1, objptr
18af0     35 FA 25 F4 | 	bith	result1, #53
18af4     63 00 00 FF 
18af8     7C E4 05 F1 | 	add	objptr, ##50812
18afc     F2 FA 61 FC | 	wrlong	result1, objptr
18b00     63 00 00 FF 
18b04     7C E4 85 F1 | 	sub	objptr, ##50812
18b08     F2 FA 01 F6 | 	mov	result1, objptr
18b0c     54 FA 25 F4 | 	bith	result1, #84
18b10     63 00 00 FF 
18b14     80 E4 05 F1 | 	add	objptr, ##50816
18b18     F2 FA 61 FC | 	wrlong	result1, objptr
18b1c     63 00 00 FF 
18b20     80 E4 85 F1 | 	sub	objptr, ##50816
18b24     F2 FA 01 F6 | 	mov	result1, objptr
18b28     17 FA 25 F4 | 	bith	result1, #23
18b2c     63 00 00 FF 
18b30     84 E4 05 F1 | 	add	objptr, ##50820
18b34     F2 FA 61 FC | 	wrlong	result1, objptr
18b38     63 00 00 FF 
18b3c     84 E4 85 F1 | 	sub	objptr, ##50820
18b40     F2 FA 01 F6 | 	mov	result1, objptr
18b44     00 48 00 FF 
18b48     00 FA 45 F5 | 	or	result1, ##9437184
18b4c     63 00 00 FF 
18b50     88 E4 05 F1 | 	add	objptr, ##50824
18b54     F2 FA 61 FC | 	wrlong	result1, objptr
18b58     63 00 00 FF 
18b5c     88 E4 85 F1 | 	sub	objptr, ##50824
18b60     F2 FA 01 F6 | 	mov	result1, objptr
18b64     00 50 00 FF 
18b68     00 FA 45 F5 | 	or	result1, ##10485760
18b6c     63 00 00 FF 
18b70     8C E4 05 F1 | 	add	objptr, ##50828
18b74     F2 FA 61 FC | 	wrlong	result1, objptr
18b78     63 00 00 FF 
18b7c     8C E4 85 F1 | 	sub	objptr, ##50828
18b80     F2 FA 01 F6 | 	mov	result1, objptr
18b84     00 58 00 FF 
18b88     00 FA 45 F5 | 	or	result1, ##11534336
18b8c     63 00 00 FF 
18b90     90 E4 05 F1 | 	add	objptr, ##50832
18b94     F2 FA 61 FC | 	wrlong	result1, objptr
18b98     63 00 00 FF 
18b9c     90 E4 85 F1 | 	sub	objptr, ##50832
18ba0     F2 FA 01 F6 | 	mov	result1, objptr
18ba4     36 FA 25 F4 | 	bith	result1, #54
18ba8     63 00 00 FF 
18bac     A4 E4 05 F1 | 	add	objptr, ##50852
18bb0     F2 FA 61 FC | 	wrlong	result1, objptr
18bb4     63 00 00 FF 
18bb8     A4 E4 85 F1 | 	sub	objptr, ##50852
18bbc     F2 FA 01 F6 | 	mov	result1, objptr
18bc0     00 68 00 FF 
18bc4     00 FA 45 F5 | 	or	result1, ##13631488
18bc8     63 00 00 FF 
18bcc     D4 E4 05 F1 | 	add	objptr, ##50900
18bd0     F2 FA 61 FC | 	wrlong	result1, objptr
18bd4     63 00 00 FF 
18bd8     D4 E4 85 F1 | 	sub	objptr, ##50900
18bdc     F2 FA 01 F6 | 	mov	result1, objptr
18be0     00 68 00 FF 
18be4     00 FA 45 F5 | 	or	result1, ##13631488
18be8     63 00 00 FF 
18bec     D0 E4 05 F1 | 	add	objptr, ##50896
18bf0     F2 FA 61 FC | 	wrlong	result1, objptr
18bf4     63 00 00 FF 
18bf8     D0 E4 85 F1 | 	sub	objptr, ##50896
18bfc     F2 FA 01 F6 | 	mov	result1, objptr
18c00     00 68 00 FF 
18c04     00 FA 45 F5 | 	or	result1, ##13631488
18c08     63 00 00 FF 
18c0c     D8 E4 05 F1 | 	add	objptr, ##50904
18c10     F2 FA 61 FC | 	wrlong	result1, objptr
18c14     63 00 00 FF 
18c18     D8 E4 85 F1 | 	sub	objptr, ##50904
18c1c     F2 FA 01 F6 | 	mov	result1, objptr
18c20     00 68 00 FF 
18c24     00 FA 45 F5 | 	or	result1, ##13631488
18c28     63 00 00 FF 
18c2c     DC E4 05 F1 | 	add	objptr, ##50908
18c30     F2 FA 61 FC | 	wrlong	result1, objptr
18c34     63 00 00 FF 
18c38     DC E4 85 F1 | 	sub	objptr, ##50908
18c3c     F2 FA 01 F6 | 	mov	result1, objptr
18c40     00 68 00 FF 
18c44     00 FA 45 F5 | 	or	result1, ##13631488
18c48     63 00 00 FF 
18c4c     0C E5 05 F1 | 	add	objptr, ##50956
18c50     F2 FA 61 FC | 	wrlong	result1, objptr
18c54     63 00 00 FF 
18c58     0C E5 85 F1 | 	sub	objptr, ##50956
18c5c     F2 FA 01 F6 | 	mov	result1, objptr
18c60     55 FA 25 F4 | 	bith	result1, #85
18c64     63 00 00 FF 
18c68     BC E4 05 F1 | 	add	objptr, ##50876
18c6c     F2 FA 61 FC | 	wrlong	result1, objptr
18c70     63 00 00 FF 
18c74     BC E4 85 F1 | 	sub	objptr, ##50876
18c78     F2 FA 01 F6 | 	mov	result1, objptr
18c7c     00 68 00 FF 
18c80     00 FA 45 F5 | 	or	result1, ##13631488
18c84     63 00 00 FF 
18c88     E0 E4 05 F1 | 	add	objptr, ##50912
18c8c     F2 FA 61 FC | 	wrlong	result1, objptr
18c90     63 00 00 FF 
18c94     E0 E4 85 F1 | 	sub	objptr, ##50912
18c98     F2 FA 01 F6 | 	mov	result1, objptr
18c9c     00 68 00 FF 
18ca0     00 FA 45 F5 | 	or	result1, ##13631488
18ca4     63 00 00 FF 
18ca8     E4 E4 05 F1 | 	add	objptr, ##50916
18cac     F2 FA 61 FC | 	wrlong	result1, objptr
18cb0     63 00 00 FF 
18cb4     E4 E4 85 F1 | 	sub	objptr, ##50916
18cb8     F2 FA 01 F6 | 	mov	result1, objptr
18cbc     00 68 00 FF 
18cc0     00 FA 45 F5 | 	or	result1, ##13631488
18cc4     63 00 00 FF 
18cc8     E8 E4 05 F1 | 	add	objptr, ##50920
18ccc     F2 FA 61 FC | 	wrlong	result1, objptr
18cd0     63 00 00 FF 
18cd4     E8 E4 85 F1 | 	sub	objptr, ##50920
18cd8     F2 FA 01 F6 | 	mov	result1, objptr
18cdc     74 FA 25 F4 | 	bith	result1, #116
18ce0     63 00 00 FF 
18ce4     60 E5 05 F1 | 	add	objptr, ##51040
18ce8     F2 FA 61 FC | 	wrlong	result1, objptr
18cec     63 00 00 FF 
18cf0     60 E5 85 F1 | 	sub	objptr, ##51040
18cf4     F2 FA 01 F6 | 	mov	result1, objptr
18cf8     18 FA 25 F4 | 	bith	result1, #24
18cfc     63 00 00 FF 
18d00     64 E5 05 F1 | 	add	objptr, ##51044
18d04     F2 FA 61 FC | 	wrlong	result1, objptr
18d08     63 00 00 FF 
18d0c     64 E5 85 F1 | 	sub	objptr, ##51044
18d10     F2 FA 01 F6 | 	mov	result1, objptr
18d14     00 88 00 FF 
18d18     00 FA 45 F5 | 	or	result1, ##17825792
18d1c     63 00 00 FF 
18d20     68 E5 05 F1 | 	add	objptr, ##51048
18d24     F2 FA 61 FC | 	wrlong	result1, objptr
18d28     63 00 00 FF 
18d2c     68 E5 85 F1 | 	sub	objptr, ##51048
18d30     F2 FA 01 F6 | 	mov	result1, objptr
18d34     00 90 00 FF 
18d38     00 FA 45 F5 | 	or	result1, ##18874368
18d3c     63 00 00 FF 
18d40     6C E5 05 F1 | 	add	objptr, ##51052
18d44     F2 FA 61 FC | 	wrlong	result1, objptr
18d48     63 00 00 FF 
18d4c     6C E5 85 F1 | 	sub	objptr, ##51052
18d50     F2 FA 01 F6 | 	mov	result1, objptr
18d54     00 98 00 FF 
18d58     00 FA 45 F5 | 	or	result1, ##19922944
18d5c     63 00 00 FF 
18d60     70 E5 05 F1 | 	add	objptr, ##51056
18d64     F2 FA 61 FC | 	wrlong	result1, objptr
18d68     63 00 00 FF 
18d6c     70 E5 85 F1 | 	sub	objptr, ##51056
18d70     F2 FA 01 F6 | 	mov	result1, objptr
18d74     00 A0 00 FF 
18d78     00 FA 45 F5 | 	or	result1, ##20971520
18d7c     63 00 00 FF 
18d80     74 E5 05 F1 | 	add	objptr, ##51060
18d84     F2 FA 61 FC | 	wrlong	result1, objptr
18d88     63 00 00 FF 
18d8c     74 E5 85 F1 | 	sub	objptr, ##51060
18d90     F2 FA 01 F6 | 	mov	result1, objptr
18d94     00 A8 00 FF 
18d98     00 FA 45 F5 | 	or	result1, ##22020096
18d9c     63 00 00 FF 
18da0     78 E5 05 F1 | 	add	objptr, ##51064
18da4     F2 FA 61 FC | 	wrlong	result1, objptr
18da8     63 00 00 FF 
18dac     78 E5 85 F1 | 	sub	objptr, ##51064
18db0     F2 FA 01 F6 | 	mov	result1, objptr
18db4     00 B0 00 FF 
18db8     00 FA 45 F5 | 	or	result1, ##23068672
18dbc     63 00 00 FF 
18dc0     7C E5 05 F1 | 	add	objptr, ##51068
18dc4     F2 FA 61 FC | 	wrlong	result1, objptr
18dc8     63 00 00 FF 
18dcc     7C E5 85 F1 | 	sub	objptr, ##51068
18dd0     F2 FA 01 F6 | 	mov	result1, objptr
18dd4     00 B8 00 FF 
18dd8     00 FA 45 F5 | 	or	result1, ##24117248
18ddc     63 00 00 FF 
18de0     80 E5 05 F1 | 	add	objptr, ##51072
18de4     F2 FA 61 FC | 	wrlong	result1, objptr
18de8     63 00 00 FF 
18dec     80 E5 85 F1 | 	sub	objptr, ##51072
18df0     F2 FA 01 F6 | 	mov	result1, objptr
18df4     37 FA 25 F4 | 	bith	result1, #55
18df8     63 00 00 FF 
18dfc     84 E5 05 F1 | 	add	objptr, ##51076
18e00     F2 FA 61 FC | 	wrlong	result1, objptr
18e04     63 00 00 FF 
18e08     84 E5 85 F1 | 	sub	objptr, ##51076
18e0c     F2 FA 01 F6 | 	mov	result1, objptr
18e10     00 C8 00 FF 
18e14     00 FA 45 F5 | 	or	result1, ##26214400
18e18     63 00 00 FF 
18e1c     88 E5 05 F1 | 	add	objptr, ##51080
18e20     F2 FA 61 FC | 	wrlong	result1, objptr
18e24     63 00 00 FF 
18e28     88 E5 85 F1 | 	sub	objptr, ##51080
18e2c     F2 FA 01 F6 | 	mov	result1, objptr
18e30     00 D0 00 FF 
18e34     00 FA 45 F5 | 	or	result1, ##27262976
18e38     63 00 00 FF 
18e3c     8C E5 05 F1 | 	add	objptr, ##51084
18e40     F2 FA 61 FC | 	wrlong	result1, objptr
18e44     63 00 00 FF 
18e48     8C E5 85 F1 | 	sub	objptr, ##51084
18e4c     F2 FA 01 F6 | 	mov	result1, objptr
18e50     00 D8 00 FF 
18e54     00 FA 45 F5 | 	or	result1, ##28311552
18e58     63 00 00 FF 
18e5c     90 E5 05 F1 | 	add	objptr, ##51088
18e60     F2 FA 61 FC | 	wrlong	result1, objptr
18e64     63 00 00 FF 
18e68     90 E5 85 F1 | 	sub	objptr, ##51088
18e6c     F2 FA 01 F6 | 	mov	result1, objptr
18e70     56 FA 25 F4 | 	bith	result1, #86
18e74     63 00 00 FF 
18e78     94 E5 05 F1 | 	add	objptr, ##51092
18e7c     F2 FA 61 FC | 	wrlong	result1, objptr
18e80     63 00 00 FF 
18e84     94 E5 85 F1 | 	sub	objptr, ##51092
18e88     F2 FA 01 F6 | 	mov	result1, objptr
18e8c     00 E8 00 FF 
18e90     00 FA 45 F5 | 	or	result1, ##30408704
18e94     65 00 00 FF 
18e98     5C E4 05 F1 | 	add	objptr, ##51804
18e9c     F2 FA 61 FC | 	wrlong	result1, objptr
18ea0     65 00 00 FF 
18ea4     5C E4 85 F1 | 	sub	objptr, ##51804
18ea8     F2 FA 01 F6 | 	mov	result1, objptr
18eac     75 FA 25 F4 | 	bith	result1, #117
18eb0     63 00 00 FF 
18eb4     98 E5 05 F1 | 	add	objptr, ##51096
18eb8     F2 FA 61 FC | 	wrlong	result1, objptr
18ebc     63 00 00 FF 
18ec0     98 E5 85 F1 | 	sub	objptr, ##51096
18ec4     F2 FA 01 F6 | 	mov	result1, objptr
18ec8     94 FA 25 F4 | 	bith	result1, #148
18ecc     63 00 00 FF 
18ed0     AC E5 05 F1 | 	add	objptr, ##51116
18ed4     F2 FA 61 FC | 	wrlong	result1, objptr
18ed8     63 00 00 FF 
18edc     AC E5 85 F1 | 	sub	objptr, ##51116
18ee0     F2 FA 01 F6 | 	mov	result1, objptr
18ee4     19 FA 25 F4 | 	bith	result1, #25
18ee8     63 00 00 FF 
18eec     9C E5 05 F1 | 	add	objptr, ##51100
18ef0     F2 FA 61 FC | 	wrlong	result1, objptr
18ef4     63 00 00 FF 
18ef8     9C E5 85 F1 | 	sub	objptr, ##51100
18efc     F2 FA 01 F6 | 	mov	result1, objptr
18f00     00 08 01 FF 
18f04     00 FA 45 F5 | 	or	result1, ##34603008
18f08     63 00 00 FF 
18f0c     B8 E4 05 F1 | 	add	objptr, ##50872
18f10     F2 FA 61 FC | 	wrlong	result1, objptr
18f14     63 00 00 FF 
18f18     B8 E4 85 F1 | 	sub	objptr, ##50872
18f1c     F2 FA 01 F6 | 	mov	result1, objptr
18f20     00 10 01 FF 
18f24     00 FA 45 F5 | 	or	result1, ##35651584
18f28     63 00 00 FF 
18f2c     A0 E5 05 F1 | 	add	objptr, ##51104
18f30     F2 FA 61 FC | 	wrlong	result1, objptr
18f34     63 00 00 FF 
18f38     A0 E5 85 F1 | 	sub	objptr, ##51104
18f3c     F2 FA 01 F6 | 	mov	result1, objptr
18f40     00 18 01 FF 
18f44     00 FA 45 F5 | 	or	result1, ##36700160
18f48     63 00 00 FF 
18f4c     A4 E5 05 F1 | 	add	objptr, ##51108
18f50     F2 FA 61 FC | 	wrlong	result1, objptr
18f54     63 00 00 FF 
18f58     A4 E5 85 F1 | 	sub	objptr, ##51108
18f5c     F2 FA 01 F6 | 	mov	result1, objptr
18f60     00 20 01 FF 
18f64     00 FA 45 F5 | 	or	result1, ##37748736
18f68     63 00 00 FF 
18f6c     A8 E5 05 F1 | 	add	objptr, ##51112
18f70     F2 FA 61 FC | 	wrlong	result1, objptr
18f74     63 00 00 FF 
18f78     A8 E5 85 F1 | 	sub	objptr, ##51112
18f7c     F2 FA 01 F6 | 	mov	result1, objptr
18f80     00 28 01 FF 
18f84     00 FA 45 F5 | 	or	result1, ##38797312
18f88     63 00 00 FF 
18f8c     B4 E5 05 F1 | 	add	objptr, ##51124
18f90     F2 FA 61 FC | 	wrlong	result1, objptr
18f94     63 00 00 FF 
18f98     B4 E5 85 F1 | 	sub	objptr, ##51124
18f9c     F2 FA 01 F6 | 	mov	result1, objptr
18fa0     00 30 01 FF 
18fa4     00 FA 45 F5 | 	or	result1, ##39845888
18fa8     63 00 00 FF 
18fac     B8 E5 05 F1 | 	add	objptr, ##51128
18fb0     F2 FA 61 FC | 	wrlong	result1, objptr
18fb4     63 00 00 FF 
18fb8     B8 E5 85 F1 | 	sub	objptr, ##51128
18fbc     F2 FA 01 F6 | 	mov	result1, objptr
18fc0     00 38 01 FF 
18fc4     00 FA 45 F5 | 	or	result1, ##40894464
18fc8     63 00 00 FF 
18fcc     BC E5 05 F1 | 	add	objptr, ##51132
18fd0     F2 FA 61 FC | 	wrlong	result1, objptr
18fd4     63 00 00 FF 
18fd8     BC E5 85 F1 | 	sub	objptr, ##51132
18fdc     F2 FA 01 F6 | 	mov	result1, objptr
18fe0     00 40 01 FF 
18fe4     00 FA 45 F5 | 	or	result1, ##41943040
18fe8     63 00 00 FF 
18fec     C0 E5 05 F1 | 	add	objptr, ##51136
18ff0     F2 FA 61 FC | 	wrlong	result1, objptr
18ff4     63 00 00 FF 
18ff8     C0 E5 85 F1 | 	sub	objptr, ##51136
18ffc     F2 FA 01 F6 | 	mov	result1, objptr
19000     00 48 01 FF 
19004     00 FA 45 F5 | 	or	result1, ##42991616
19008     63 00 00 FF 
1900c     C8 E5 05 F1 | 	add	objptr, ##51144
19010     F2 FA 61 FC | 	wrlong	result1, objptr
19014     63 00 00 FF 
19018     C8 E5 85 F1 | 	sub	objptr, ##51144
1901c     F2 FA 01 F6 | 	mov	result1, objptr
19020     00 08 01 FF 
19024     00 FA 45 F5 | 	or	result1, ##34603008
19028     63 00 00 FF 
1902c     CC E5 05 F1 | 	add	objptr, ##51148
19030     F2 FA 61 FC | 	wrlong	result1, objptr
19034     63 00 00 FF 
19038     CC E5 85 F1 | 	sub	objptr, ##51148
1903c     F2 FA 01 F6 | 	mov	result1, objptr
19040     00 50 01 FF 
19044     00 FA 45 F5 | 	or	result1, ##44040192
19048     63 00 00 FF 
1904c     CC E4 05 F1 | 	add	objptr, ##50892
19050     F2 FA 61 FC | 	wrlong	result1, objptr
19054     63 00 00 FF 
19058     CC E4 85 F1 | 	sub	objptr, ##50892
1905c     F2 FA 01 F6 | 	mov	result1, objptr
19060     00 58 01 FF 
19064     00 FA 45 F5 | 	or	result1, ##45088768
19068     63 00 00 FF 
1906c     FC E4 05 F1 | 	add	objptr, ##50940
19070     F2 FA 61 FC | 	wrlong	result1, objptr
19074     63 00 00 FF 
19078     FC E4 85 F1 | 	sub	objptr, ##50940
1907c     F2 FA 01 F6 | 	mov	result1, objptr
19080     00 60 01 FF 
19084     00 FA 45 F5 | 	or	result1, ##46137344
19088     63 00 00 FF 
1908c     F8 E4 05 F1 | 	add	objptr, ##50936
19090     F2 FA 61 FC | 	wrlong	result1, objptr
19094     63 00 00 FF 
19098     F8 E4 85 F1 | 	sub	objptr, ##50936
1909c     F2 FA 01 F6 | 	mov	result1, objptr
190a0     00 68 01 FF 
190a4     00 FA 45 F5 | 	or	result1, ##47185920
190a8     63 00 00 FF 
190ac     9C E4 05 F1 | 	add	objptr, ##50844
190b0     F2 FA 61 FC | 	wrlong	result1, objptr
190b4     63 00 00 FF 
190b8     9C E4 85 F1 | 	sub	objptr, ##50844
190bc     F2 FA 01 F6 | 	mov	result1, objptr
190c0     00 70 01 FF 
190c4     00 FA 45 F5 | 	or	result1, ##48234496
190c8     63 00 00 FF 
190cc     A0 E4 05 F1 | 	add	objptr, ##50848
190d0     F2 FA 61 FC | 	wrlong	result1, objptr
190d4     63 00 00 FF 
190d8     A0 E4 85 F1 | 	sub	objptr, ##50848
190dc     F2 FA 01 F6 | 	mov	result1, objptr
190e0     00 78 01 FF 
190e4     00 FA 45 F5 | 	or	result1, ##49283072
190e8     63 00 00 FF 
190ec     08 E5 05 F1 | 	add	objptr, ##50952
190f0     F2 FA 61 FC | 	wrlong	result1, objptr
190f4     63 00 00 FF 
190f8     08 E5 85 F1 | 	sub	objptr, ##50952
190fc     F2 FA 01 F6 | 	mov	result1, objptr
19100     38 FA 25 F4 | 	bith	result1, #56
19104     63 00 00 FF 
19108     B0 E5 05 F1 | 	add	objptr, ##51120
1910c     F2 FA 61 FC | 	wrlong	result1, objptr
19110     63 00 00 FF 
19114     B0 E5 85 F1 | 	sub	objptr, ##51120
19118     F2 FA 01 F6 | 	mov	result1, objptr
1911c     00 88 01 FF 
19120     00 FA 45 F5 | 	or	result1, ##51380224
19124     63 00 00 FF 
19128     C4 E5 05 F1 | 	add	objptr, ##51140
1912c     F2 FA 61 FC | 	wrlong	result1, objptr
19130     63 00 00 FF 
19134     C4 E5 85 F1 | 	sub	objptr, ##51140
19138     F2 FA 01 F6 | 	mov	result1, objptr
1913c     00 90 01 FF 
19140     00 FA 45 F5 | 	or	result1, ##52428800
19144     63 00 00 FF 
19148     D0 E5 05 F1 | 	add	objptr, ##51152
1914c     F2 FA 61 FC | 	wrlong	result1, objptr
19150     63 00 00 FF 
19154     D0 E5 85 F1 | 	sub	objptr, ##51152
19158     F2 FA 01 F6 | 	mov	result1, objptr
1915c     00 98 01 FF 
19160     00 FA 45 F5 | 	or	result1, ##53477376
19164     63 00 00 FF 
19168     D4 E5 05 F1 | 	add	objptr, ##51156
1916c     F2 FA 61 FC | 	wrlong	result1, objptr
19170     63 00 00 FF 
19174     D4 E5 85 F1 | 	sub	objptr, ##51156
19178     F2 FA 01 F6 | 	mov	result1, objptr
1917c     00 A0 01 FF 
19180     00 FA 45 F5 | 	or	result1, ##54525952
19184     63 00 00 FF 
19188     D8 E5 05 F1 | 	add	objptr, ##51160
1918c     F2 FA 61 FC | 	wrlong	result1, objptr
19190     63 00 00 FF 
19194     D8 E5 85 F1 | 	sub	objptr, ##51160
19198     F2 FA 01 F6 | 	mov	result1, objptr
1919c     00 A8 01 FF 
191a0     00 FA 45 F5 | 	or	result1, ##55574528
191a4     63 00 00 FF 
191a8     DC E5 05 F1 | 	add	objptr, ##51164
191ac     F2 FA 61 FC | 	wrlong	result1, objptr
191b0     63 00 00 FF 
191b4     DC E5 85 F1 | 	sub	objptr, ##51164
191b8     F2 FA 01 F6 | 	mov	result1, objptr
191bc     00 B0 01 FF 
191c0     00 FA 45 F5 | 	or	result1, ##56623104
191c4     63 00 00 FF 
191c8     E0 E5 05 F1 | 	add	objptr, ##51168
191cc     F2 FA 61 FC | 	wrlong	result1, objptr
191d0     63 00 00 FF 
191d4     E0 E5 85 F1 | 	sub	objptr, ##51168
191d8     F2 FA 01 F6 | 	mov	result1, objptr
191dc     00 B8 01 FF 
191e0     00 FA 45 F5 | 	or	result1, ##57671680
191e4     63 00 00 FF 
191e8     E4 E5 05 F1 | 	add	objptr, ##51172
191ec     F2 FA 61 FC | 	wrlong	result1, objptr
191f0     63 00 00 FF 
191f4     E4 E5 85 F1 | 	sub	objptr, ##51172
191f8     F2 FA 01 F6 | 	mov	result1, objptr
191fc     94 FA 25 F4 | 	bith	result1, #148
19200     63 00 00 FF 
19204     AC E5 05 F1 | 	add	objptr, ##51116
19208     F2 FA 61 FC | 	wrlong	result1, objptr
1920c     63 00 00 FF 
19210     AC E5 85 F1 | 	sub	objptr, ##51116
19214     F2 FA 01 F6 | 	mov	result1, objptr
19218     57 FA 25 F4 | 	bith	result1, #87
1921c     63 00 00 FF 
19220     EC E5 05 F1 | 	add	objptr, ##51180
19224     F2 FA 61 FC | 	wrlong	result1, objptr
19228     63 00 00 FF 
1922c     EC E5 85 F1 | 	sub	objptr, ##51180
19230     F2 FA 01 F6 | 	mov	result1, objptr
19234     00 C8 01 FF 
19238     00 FA 45 F5 | 	or	result1, ##59768832
1923c     63 00 00 FF 
19240     E8 E5 05 F1 | 	add	objptr, ##51176
19244     F2 FA 61 FC | 	wrlong	result1, objptr
19248     63 00 00 FF 
1924c     E8 E5 85 F1 | 	sub	objptr, ##51176
19250     F2 FA 01 F6 | 	mov	result1, objptr
19254     00 D0 01 FF 
19258     00 FA 45 F5 | 	or	result1, ##60817408
1925c     64 00 00 FF 
19260     00 E4 05 F1 | 	add	objptr, ##51200
19264     F2 FA 61 FC | 	wrlong	result1, objptr
19268     64 00 00 FF 
1926c     00 E4 85 F1 | 	sub	objptr, ##51200
19270     F2 FA 01 F6 | 	mov	result1, objptr
19274     00 D8 01 FF 
19278     00 FA 45 F5 | 	or	result1, ##61865984
1927c     64 00 00 FF 
19280     04 E4 05 F1 | 	add	objptr, ##51204
19284     F2 FA 61 FC | 	wrlong	result1, objptr
19288     64 00 00 FF 
1928c     04 E4 85 F1 | 	sub	objptr, ##51204
19290     F2 FA 01 F6 | 	mov	result1, objptr
19294     76 FA 25 F4 | 	bith	result1, #118
19298     63 00 00 FF 
1929c     F0 E5 05 F1 | 	add	objptr, ##51184
192a0     F2 FA 61 FC | 	wrlong	result1, objptr
192a4     63 00 00 FF 
192a8     F0 E5 85 F1 | 	sub	objptr, ##51184
192ac     F2 FA 01 F6 | 	mov	result1, objptr
192b0     00 E8 01 FF 
192b4     00 FA 45 F5 | 	or	result1, ##63963136
192b8     63 00 00 FF 
192bc     F4 E5 05 F1 | 	add	objptr, ##51188
192c0     F2 FA 61 FC | 	wrlong	result1, objptr
192c4     63 00 00 FF 
192c8     F4 E5 85 F1 | 	sub	objptr, ##51188
192cc     F2 FA 01 F6 | 	mov	result1, objptr
192d0     95 FA 25 F4 | 	bith	result1, #149
192d4     63 00 00 FF 
192d8     F8 E5 05 F1 | 	add	objptr, ##51192
192dc     F2 FA 61 FC | 	wrlong	result1, objptr
192e0     63 00 00 FF 
192e4     F8 E5 85 F1 | 	sub	objptr, ##51192
192e8     F2 FA 01 F6 | 	mov	result1, objptr
192ec     B4 FA 25 F4 | 	bith	result1, #180
192f0     63 00 00 FF 
192f4     FC E5 05 F1 | 	add	objptr, ##51196
192f8     F2 FA 61 FC | 	wrlong	result1, objptr
192fc     63 00 00 FF 
19300     FC E5 85 F1 | 	sub	objptr, ##51196
19304     F2 FA 01 F6 | 	mov	result1, objptr
19308     1A FA 25 F4 | 	bith	result1, #26
1930c     64 00 00 FF 
19310     0C E4 05 F1 | 	add	objptr, ##51212
19314     F2 FA 61 FC | 	wrlong	result1, objptr
19318     64 00 00 FF 
1931c     0C E4 85 F1 | 	sub	objptr, ##51212
19320     F2 FA 01 F6 | 	mov	result1, objptr
19324     00 08 02 FF 
19328     00 FA 45 F5 | 	or	result1, ##68157440
1932c     64 00 00 FF 
19330     08 E4 05 F1 | 	add	objptr, ##51208
19334     F2 FA 61 FC | 	wrlong	result1, objptr
19338     64 00 00 FF 
1933c     08 E4 85 F1 | 	sub	objptr, ##51208
19340     F2 FA 01 F6 | 	mov	result1, objptr
19344     00 10 02 FF 
19348     00 FA 45 F5 | 	or	result1, ##69206016
1934c     64 00 00 FF 
19350     18 E4 05 F1 | 	add	objptr, ##51224
19354     F2 FA 61 FC | 	wrlong	result1, objptr
19358     64 00 00 FF 
1935c     18 E4 85 F1 | 	sub	objptr, ##51224
19360     F2 FA 01 F6 | 	mov	result1, objptr
19364     00 18 02 FF 
19368     00 FA 45 F5 | 	or	result1, ##70254592
1936c     64 00 00 FF 
19370     14 E4 05 F1 | 	add	objptr, ##51220
19374     F2 FA 61 FC | 	wrlong	result1, objptr
19378     64 00 00 FF 
1937c     14 E4 85 F1 | 	sub	objptr, ##51220
19380     F2 FA 01 F6 | 	mov	result1, objptr
19384     00 20 02 FF 
19388     00 FA 45 F5 | 	or	result1, ##71303168
1938c     64 00 00 FF 
19390     10 E4 05 F1 | 	add	objptr, ##51216
19394     F2 FA 61 FC | 	wrlong	result1, objptr
19398     64 00 00 FF 
1939c     10 E4 85 F1 | 	sub	objptr, ##51216
193a0     F2 FA 01 F6 | 	mov	result1, objptr
193a4     00 28 02 FF 
193a8     00 FA 45 F5 | 	or	result1, ##72351744
193ac     64 00 00 FF 
193b0     1C E4 05 F1 | 	add	objptr, ##51228
193b4     F2 FA 61 FC | 	wrlong	result1, objptr
193b8     64 00 00 FF 
193bc     1C E4 85 F1 | 	sub	objptr, ##51228
193c0     F2 FA 01 F6 | 	mov	result1, objptr
193c4     00 30 02 FF 
193c8     00 FA 45 F5 | 	or	result1, ##73400320
193cc     64 00 00 FF 
193d0     20 E4 05 F1 | 	add	objptr, ##51232
193d4     F2 FA 61 FC | 	wrlong	result1, objptr
193d8     64 00 00 FF 
193dc     20 E4 85 F1 | 	sub	objptr, ##51232
193e0     F2 FA 01 F6 | 	mov	result1, objptr
193e4     00 38 02 FF 
193e8     00 FA 45 F5 | 	or	result1, ##74448896
193ec     63 00 00 FF 
193f0     B4 E4 05 F1 | 	add	objptr, ##50868
193f4     F2 FA 61 FC | 	wrlong	result1, objptr
193f8     63 00 00 FF 
193fc     B4 E4 85 F1 | 	sub	objptr, ##50868
19400     F2 FA 01 F6 | 	mov	result1, objptr
19404     00 40 02 FF 
19408     00 FA 45 F5 | 	or	result1, ##75497472
1940c     64 00 00 FF 
19410     38 E4 05 F1 | 	add	objptr, ##51256
19414     F2 FA 61 FC | 	wrlong	result1, objptr
19418     64 00 00 FF 
1941c     38 E4 85 F1 | 	sub	objptr, ##51256
19420     F2 FA 01 F6 | 	mov	result1, objptr
19424     00 48 02 FF 
19428     00 FA 45 F5 | 	or	result1, ##76546048
1942c     64 00 00 FF 
19430     48 E4 05 F1 | 	add	objptr, ##51272
19434     F2 FA 61 FC | 	wrlong	result1, objptr
19438     64 00 00 FF 
1943c     48 E4 85 F1 | 	sub	objptr, ##51272
19440     F2 FA 01 F6 | 	mov	result1, objptr
19444     00 50 02 FF 
19448     00 FA 45 F5 | 	or	result1, ##77594624
1944c     64 00 00 FF 
19450     4C E4 05 F1 | 	add	objptr, ##51276
19454     F2 FA 61 FC | 	wrlong	result1, objptr
19458     64 00 00 FF 
1945c     4C E4 85 F1 | 	sub	objptr, ##51276
19460     F2 FA 01 F6 | 	mov	result1, objptr
19464     00 58 02 FF 
19468     00 FA 45 F5 | 	or	result1, ##78643200
1946c     64 00 00 FF 
19470     44 E4 05 F1 | 	add	objptr, ##51268
19474     F2 FA 61 FC | 	wrlong	result1, objptr
19478     64 00 00 FF 
1947c     44 E4 85 F1 | 	sub	objptr, ##51268
19480     F2 FA 01 F6 | 	mov	result1, objptr
19484     00 60 02 FF 
19488     00 FA 45 F5 | 	or	result1, ##79691776
1948c     64 00 00 FF 
19490     3C E4 05 F1 | 	add	objptr, ##51260
19494     F2 FA 61 FC | 	wrlong	result1, objptr
19498     64 00 00 FF 
1949c     3C E4 85 F1 | 	sub	objptr, ##51260
194a0     F2 FA 01 F6 | 	mov	result1, objptr
194a4     00 68 02 FF 
194a8     00 FA 45 F5 | 	or	result1, ##80740352
194ac     64 00 00 FF 
194b0     40 E4 05 F1 | 	add	objptr, ##51264
194b4     F2 FA 61 FC | 	wrlong	result1, objptr
194b8     64 00 00 FF 
194bc     40 E4 85 F1 | 	sub	objptr, ##51264
194c0     F2 FA 01 F6 | 	mov	result1, objptr
194c4     00 70 02 FF 
194c8     00 FA 45 F5 | 	or	result1, ##81788928
194cc     64 00 00 FF 
194d0     50 E4 05 F1 | 	add	objptr, ##51280
194d4     F2 FA 61 FC | 	wrlong	result1, objptr
194d8     64 00 00 FF 
194dc     50 E4 85 F1 | 	sub	objptr, ##51280
194e0     F2 FA 01 F6 | 	mov	result1, objptr
194e4     00 78 02 FF 
194e8     00 FA 45 F5 | 	or	result1, ##82837504
194ec     64 00 00 FF 
194f0     54 E4 05 F1 | 	add	objptr, ##51284
194f4     F2 FA 61 FC | 	wrlong	result1, objptr
194f8     64 00 00 FF 
194fc     54 E4 85 F1 | 	sub	objptr, ##51284
19500     F2 FA 01 F6 | 	mov	result1, objptr
19504     00 80 02 FF 
19508     00 FA 45 F5 | 	or	result1, ##83886080
1950c     64 00 00 FF 
19510     58 E4 05 F1 | 	add	objptr, ##51288
19514     F2 FA 61 FC | 	wrlong	result1, objptr
19518     64 00 00 FF 
1951c     58 E4 85 F1 | 	sub	objptr, ##51288
19520     F2 FA 01 F6 | 	mov	result1, objptr
19524     00 88 02 FF 
19528     00 FA 45 F5 | 	or	result1, ##84934656
1952c     64 00 00 FF 
19530     5C E4 05 F1 | 	add	objptr, ##51292
19534     F2 FA 61 FC | 	wrlong	result1, objptr
19538     64 00 00 FF 
1953c     5C E4 85 F1 | 	sub	objptr, ##51292
19540     F2 FA 01 F6 | 	mov	result1, objptr
19544     00 90 02 FF 
19548     00 FA 45 F5 | 	or	result1, ##85983232
1954c     64 00 00 FF 
19550     60 E4 05 F1 | 	add	objptr, ##51296
19554     F2 FA 61 FC | 	wrlong	result1, objptr
19558     64 00 00 FF 
1955c     60 E4 85 F1 | 	sub	objptr, ##51296
19560     F2 FA 01 F6 | 	mov	result1, objptr
19564     00 98 02 FF 
19568     00 FA 45 F5 | 	or	result1, ##87031808
1956c     64 00 00 FF 
19570     64 E4 05 F1 | 	add	objptr, ##51300
19574     F2 FA 61 FC | 	wrlong	result1, objptr
19578     64 00 00 FF 
1957c     64 E4 85 F1 | 	sub	objptr, ##51300
19580     F2 FA 01 F6 | 	mov	result1, objptr
19584     00 A0 02 FF 
19588     00 FA 45 F5 | 	or	result1, ##88080384
1958c     64 00 00 FF 
19590     68 E4 05 F1 | 	add	objptr, ##51304
19594     F2 FA 61 FC | 	wrlong	result1, objptr
19598     64 00 00 FF 
1959c     68 E4 85 F1 | 	sub	objptr, ##51304
195a0     F2 FA 01 F6 | 	mov	result1, objptr
195a4     00 A8 02 FF 
195a8     00 FA 45 F5 | 	or	result1, ##89128960
195ac     64 00 00 FF 
195b0     6C E4 05 F1 | 	add	objptr, ##51308
195b4     F2 FA 61 FC | 	wrlong	result1, objptr
195b8     64 00 00 FF 
195bc     6C E4 85 F1 | 	sub	objptr, ##51308
195c0     F2 FA 01 F6 | 	mov	result1, objptr
195c4     00 B0 02 FF 
195c8     00 FA 45 F5 | 	or	result1, ##90177536
195cc     64 00 00 FF 
195d0     78 E4 05 F1 | 	add	objptr, ##51320
195d4     F2 FA 61 FC | 	wrlong	result1, objptr
195d8     64 00 00 FF 
195dc     78 E4 85 F1 | 	sub	objptr, ##51320
195e0     F2 FA 01 F6 | 	mov	result1, objptr
195e4     00 B8 02 FF 
195e8     00 FA 45 F5 | 	or	result1, ##91226112
195ec     64 00 00 FF 
195f0     70 E4 05 F1 | 	add	objptr, ##51312
195f4     F2 FA 61 FC | 	wrlong	result1, objptr
195f8     64 00 00 FF 
195fc     70 E4 85 F1 | 	sub	objptr, ##51312
19600     F2 FA 01 F6 | 	mov	result1, objptr
19604     00 C0 02 FF 
19608     00 FA 45 F5 | 	or	result1, ##92274688
1960c     64 00 00 FF 
19610     74 E4 05 F1 | 	add	objptr, ##51316
19614     F2 FA 61 FC | 	wrlong	result1, objptr
19618     64 00 00 FF 
1961c     74 E4 85 F1 | 	sub	objptr, ##51316
19620     F2 FA 01 F6 | 	mov	result1, objptr
19624     00 C8 02 FF 
19628     00 FA 45 F5 | 	or	result1, ##93323264
1962c     64 00 00 FF 
19630     7C E4 05 F1 | 	add	objptr, ##51324
19634     F2 FA 61 FC | 	wrlong	result1, objptr
19638     64 00 00 FF 
1963c     7C E4 85 F1 | 	sub	objptr, ##51324
19640     F2 FA 01 F6 | 	mov	result1, objptr
19644     00 D0 02 FF 
19648     00 FA 45 F5 | 	or	result1, ##94371840
1964c     64 00 00 FF 
19650     24 E4 05 F1 | 	add	objptr, ##51236
19654     F2 FA 61 FC | 	wrlong	result1, objptr
19658     64 00 00 FF 
1965c     24 E4 85 F1 | 	sub	objptr, ##51236
19660     F2 FA 01 F6 | 	mov	result1, objptr
19664     00 D8 02 FF 
19668     00 FA 45 F5 | 	or	result1, ##95420416
1966c     64 00 00 FF 
19670     2C E4 05 F1 | 	add	objptr, ##51244
19674     F2 FA 61 FC | 	wrlong	result1, objptr
19678     64 00 00 FF 
1967c     2C E4 85 F1 | 	sub	objptr, ##51244
19680     F2 FA 01 F6 | 	mov	result1, objptr
19684     00 E0 02 FF 
19688     00 FA 45 F5 | 	or	result1, ##96468992
1968c     64 00 00 FF 
19690     30 E4 05 F1 | 	add	objptr, ##51248
19694     F2 FA 61 FC | 	wrlong	result1, objptr
19698     64 00 00 FF 
1969c     30 E4 85 F1 | 	sub	objptr, ##51248
196a0     F2 FA 01 F6 | 	mov	result1, objptr
196a4     00 E8 02 FF 
196a8     00 FA 45 F5 | 	or	result1, ##97517568
196ac     64 00 00 FF 
196b0     80 E4 05 F1 | 	add	objptr, ##51328
196b4     F2 FA 61 FC | 	wrlong	result1, objptr
196b8     64 00 00 FF 
196bc     80 E4 85 F1 | 	sub	objptr, ##51328
196c0     F2 FA 01 F6 | 	mov	result1, objptr
196c4     00 F0 02 FF 
196c8     00 FA 45 F5 | 	or	result1, ##98566144
196cc     64 00 00 FF 
196d0     84 E4 05 F1 | 	add	objptr, ##51332
196d4     F2 FA 61 FC | 	wrlong	result1, objptr
196d8     64 00 00 FF 
196dc     84 E4 85 F1 | 	sub	objptr, ##51332
196e0     F2 FA 01 F6 | 	mov	result1, objptr
196e4     00 F8 02 FF 
196e8     00 FA 45 F5 | 	or	result1, ##99614720
196ec     64 00 00 FF 
196f0     88 E4 05 F1 | 	add	objptr, ##51336
196f4     F2 FA 61 FC | 	wrlong	result1, objptr
196f8     64 00 00 FF 
196fc     88 E4 85 F1 | 	sub	objptr, ##51336
19700     F2 FA 01 F6 | 	mov	result1, objptr
19704     39 FA 25 F4 | 	bith	result1, #57
19708     64 00 00 FF 
1970c     34 E4 05 F1 | 	add	objptr, ##51252
19710     F2 FA 61 FC | 	wrlong	result1, objptr
19714     64 00 00 FF 
19718     34 E4 85 F1 | 	sub	objptr, ##51252
1971c     F2 FA 01 F6 | 	mov	result1, objptr
19720     00 08 03 FF 
19724     00 FA 45 F5 | 	or	result1, ##101711872
19728     64 00 00 FF 
1972c     98 E4 05 F1 | 	add	objptr, ##51352
19730     F2 FA 61 FC | 	wrlong	result1, objptr
19734     64 00 00 FF 
19738     98 E4 85 F1 | 	sub	objptr, ##51352
1973c     F2 FA 01 F6 | 	mov	result1, objptr
19740     00 10 03 FF 
19744     00 FA 45 F5 | 	or	result1, ##102760448
19748     64 00 00 FF 
1974c     A0 E4 05 F1 | 	add	objptr, ##51360
19750     F2 FA 61 FC | 	wrlong	result1, objptr
19754     64 00 00 FF 
19758     A0 E4 85 F1 | 	sub	objptr, ##51360
1975c     F2 FA 01 F6 | 	mov	result1, objptr
19760     00 18 03 FF 
19764     00 FA 45 F5 | 	or	result1, ##103809024
19768     64 00 00 FF 
1976c     94 E4 05 F1 | 	add	objptr, ##51348
19770     F2 FA 61 FC | 	wrlong	result1, objptr
19774     64 00 00 FF 
19778     94 E4 85 F1 | 	sub	objptr, ##51348
1977c     F2 FA 01 F6 | 	mov	result1, objptr
19780     00 20 03 FF 
19784     00 FA 45 F5 | 	or	result1, ##104857600
19788     64 00 00 FF 
1978c     90 E4 05 F1 | 	add	objptr, ##51344
19790     F2 FA 61 FC | 	wrlong	result1, objptr
19794     64 00 00 FF 
19798     90 E4 85 F1 | 	sub	objptr, ##51344
1979c     F2 FA 01 F6 | 	mov	result1, objptr
197a0     00 28 03 FF 
197a4     00 FA 45 F5 | 	or	result1, ##105906176
197a8     64 00 00 FF 
197ac     8C E4 05 F1 | 	add	objptr, ##51340
197b0     F2 FA 61 FC | 	wrlong	result1, objptr
197b4     64 00 00 FF 
197b8     8C E4 85 F1 | 	sub	objptr, ##51340
197bc     F2 FA 01 F6 | 	mov	result1, objptr
197c0     00 30 03 FF 
197c4     00 FA 45 F5 | 	or	result1, ##106954752
197c8     64 00 00 FF 
197cc     9C E4 05 F1 | 	add	objptr, ##51356
197d0     F2 FA 61 FC | 	wrlong	result1, objptr
197d4     64 00 00 FF 
197d8     9C E4 85 F1 | 	sub	objptr, ##51356
197dc     F2 FA 01 F6 | 	mov	result1, objptr
197e0     00 38 03 FF 
197e4     00 FA 45 F5 | 	or	result1, ##108003328
197e8     64 00 00 FF 
197ec     A4 E4 05 F1 | 	add	objptr, ##51364
197f0     F2 FA 61 FC | 	wrlong	result1, objptr
197f4     64 00 00 FF 
197f8     A4 E4 85 F1 | 	sub	objptr, ##51364
197fc     F2 FA 01 F6 | 	mov	result1, objptr
19800     00 40 03 FF 
19804     00 FA 45 F5 | 	or	result1, ##109051904
19808     64 00 00 FF 
1980c     A8 E4 05 F1 | 	add	objptr, ##51368
19810     F2 FA 61 FC | 	wrlong	result1, objptr
19814     64 00 00 FF 
19818     A8 E4 85 F1 | 	sub	objptr, ##51368
1981c     F2 FA 01 F6 | 	mov	result1, objptr
19820     00 48 03 FF 
19824     00 FA 45 F5 | 	or	result1, ##110100480
19828     64 00 00 FF 
1982c     AC E4 05 F1 | 	add	objptr, ##51372
19830     F2 FA 61 FC | 	wrlong	result1, objptr
19834     64 00 00 FF 
19838     AC E4 85 F1 | 	sub	objptr, ##51372
1983c     F2 FA 01 F6 | 	mov	result1, objptr
19840     00 50 03 FF 
19844     00 FA 45 F5 | 	or	result1, ##111149056
19848     64 00 00 FF 
1984c     B4 E4 05 F1 | 	add	objptr, ##51380
19850     F2 FA 61 FC | 	wrlong	result1, objptr
19854     64 00 00 FF 
19858     B4 E4 85 F1 | 	sub	objptr, ##51380
1985c     F2 FA 01 F6 | 	mov	result1, objptr
19860     00 58 03 FF 
19864     00 FA 45 F5 | 	or	result1, ##112197632
19868     64 00 00 FF 
1986c     B8 E4 05 F1 | 	add	objptr, ##51384
19870     F2 FA 61 FC | 	wrlong	result1, objptr
19874     64 00 00 FF 
19878     B8 E4 85 F1 | 	sub	objptr, ##51384
1987c     F2 FA 01 F6 | 	mov	result1, objptr
19880     00 60 03 FF 
19884     00 FA 45 F5 | 	or	result1, ##113246208
19888     64 00 00 FF 
1988c     BC E4 05 F1 | 	add	objptr, ##51388
19890     F2 FA 61 FC | 	wrlong	result1, objptr
19894     64 00 00 FF 
19898     BC E4 85 F1 | 	sub	objptr, ##51388
1989c     F2 FA 01 F6 | 	mov	result1, objptr
198a0     00 68 03 FF 
198a4     00 FA 45 F5 | 	or	result1, ##114294784
198a8     64 00 00 FF 
198ac     C0 E4 05 F1 | 	add	objptr, ##51392
198b0     F2 FA 61 FC | 	wrlong	result1, objptr
198b4     64 00 00 FF 
198b8     C0 E4 85 F1 | 	sub	objptr, ##51392
198bc     F2 FA 01 F6 | 	mov	result1, objptr
198c0     00 70 03 FF 
198c4     00 FA 45 F5 | 	or	result1, ##115343360
198c8     64 00 00 FF 
198cc     C4 E4 05 F1 | 	add	objptr, ##51396
198d0     F2 FA 61 FC | 	wrlong	result1, objptr
198d4     64 00 00 FF 
198d8     C4 E4 85 F1 | 	sub	objptr, ##51396
198dc     F2 FA 01 F6 | 	mov	result1, objptr
198e0     00 78 03 FF 
198e4     00 FA 45 F5 | 	or	result1, ##116391936
198e8     64 00 00 FF 
198ec     C8 E4 05 F1 | 	add	objptr, ##51400
198f0     F2 FA 61 FC | 	wrlong	result1, objptr
198f4     64 00 00 FF 
198f8     C8 E4 85 F1 | 	sub	objptr, ##51400
198fc     F2 FA 01 F6 | 	mov	result1, objptr
19900     58 FA 25 F4 | 	bith	result1, #88
19904     64 00 00 FF 
19908     CC E4 05 F1 | 	add	objptr, ##51404
1990c     F2 FA 61 FC | 	wrlong	result1, objptr
19910     64 00 00 FF 
19914     CC E4 85 F1 | 	sub	objptr, ##51404
19918     F2 FA 01 F6 | 	mov	result1, objptr
1991c     00 88 03 FF 
19920     00 FA 45 F5 | 	or	result1, ##118489088
19924     64 00 00 FF 
19928     D0 E4 05 F1 | 	add	objptr, ##51408
1992c     F2 FA 61 FC | 	wrlong	result1, objptr
19930     64 00 00 FF 
19934     D0 E4 85 F1 | 	sub	objptr, ##51408
19938     F2 FA 01 F6 | 	mov	result1, objptr
1993c     00 90 03 FF 
19940     00 FA 45 F5 | 	or	result1, ##119537664
19944     64 00 00 FF 
19948     B0 E4 05 F1 | 	add	objptr, ##51376
1994c     F2 FA 61 FC | 	wrlong	result1, objptr
19950     64 00 00 FF 
19954     B0 E4 85 F1 | 	sub	objptr, ##51376
19958     F2 FA 01 F6 | 	mov	result1, objptr
1995c     00 98 03 FF 
19960     00 FA 45 F5 | 	or	result1, ##120586240
19964     63 00 00 FF 
19968     A8 E4 05 F1 | 	add	objptr, ##50856
1996c     F2 FA 61 FC | 	wrlong	result1, objptr
19970     63 00 00 FF 
19974     A8 E4 85 F1 | 	sub	objptr, ##50856
19978     F2 FA 01 F6 | 	mov	result1, objptr
1997c     00 A0 03 FF 
19980     00 FA 45 F5 | 	or	result1, ##121634816
19984     64 00 00 FF 
19988     D4 E4 05 F1 | 	add	objptr, ##51412
1998c     F2 FA 61 FC | 	wrlong	result1, objptr
19990     64 00 00 FF 
19994     D4 E4 85 F1 | 	sub	objptr, ##51412
19998     F2 FA 01 F6 | 	mov	result1, objptr
1999c     00 A8 03 FF 
199a0     00 FA 45 F5 | 	or	result1, ##122683392
199a4     64 00 00 FF 
199a8     D8 E4 05 F1 | 	add	objptr, ##51416
199ac     F2 FA 61 FC | 	wrlong	result1, objptr
199b0     64 00 00 FF 
199b4     D8 E4 85 F1 | 	sub	objptr, ##51416
199b8     F2 FA 01 F6 | 	mov	result1, objptr
199bc     00 B0 03 FF 
199c0     00 FA 45 F5 | 	or	result1, ##123731968
199c4     64 00 00 FF 
199c8     EC E4 05 F1 | 	add	objptr, ##51436
199cc     F2 FA 61 FC | 	wrlong	result1, objptr
199d0     64 00 00 FF 
199d4     EC E4 85 F1 | 	sub	objptr, ##51436
199d8     F2 FA 01 F6 | 	mov	result1, objptr
199dc     00 B8 03 FF 
199e0     00 FA 45 F5 | 	or	result1, ##124780544
199e4     64 00 00 FF 
199e8     E8 E4 05 F1 | 	add	objptr, ##51432
199ec     F2 FA 61 FC | 	wrlong	result1, objptr
199f0     64 00 00 FF 
199f4     E8 E4 85 F1 | 	sub	objptr, ##51432
199f8     F2 FA 01 F6 | 	mov	result1, objptr
199fc     77 FA 25 F4 | 	bith	result1, #119
19a00     64 00 00 FF 
19a04     E0 E4 05 F1 | 	add	objptr, ##51424
19a08     F2 FA 61 FC | 	wrlong	result1, objptr
19a0c     64 00 00 FF 
19a10     E0 E4 85 F1 | 	sub	objptr, ##51424
19a14     F2 FA 01 F6 | 	mov	result1, objptr
19a18     00 C8 03 FF 
19a1c     00 FA 45 F5 | 	or	result1, ##126877696
19a20     64 00 00 FF 
19a24     DC E4 05 F1 | 	add	objptr, ##51420
19a28     F2 FA 61 FC | 	wrlong	result1, objptr
19a2c     64 00 00 FF 
19a30     DC E4 85 F1 | 	sub	objptr, ##51420
19a34     F2 FA 01 F6 | 	mov	result1, objptr
19a38     00 D0 03 FF 
19a3c     00 FA 45 F5 | 	or	result1, ##127926272
19a40     64 00 00 FF 
19a44     FC E4 05 F1 | 	add	objptr, ##51452
19a48     F2 FA 61 FC | 	wrlong	result1, objptr
19a4c     64 00 00 FF 
19a50     FC E4 85 F1 | 	sub	objptr, ##51452
19a54     F2 FA 01 F6 | 	mov	result1, objptr
19a58     00 D8 03 FF 
19a5c     00 FA 45 F5 | 	or	result1, ##128974848
19a60     64 00 00 FF 
19a64     F0 E4 05 F1 | 	add	objptr, ##51440
19a68     F2 FA 61 FC | 	wrlong	result1, objptr
19a6c     64 00 00 FF 
19a70     F0 E4 85 F1 | 	sub	objptr, ##51440
19a74     F2 FA 01 F6 | 	mov	result1, objptr
19a78     96 FA 25 F4 | 	bith	result1, #150
19a7c     64 00 00 FF 
19a80     F4 E4 05 F1 | 	add	objptr, ##51444
19a84     F2 FA 61 FC | 	wrlong	result1, objptr
19a88     64 00 00 FF 
19a8c     F4 E4 85 F1 | 	sub	objptr, ##51444
19a90     F2 FA 01 F6 | 	mov	result1, objptr
19a94     00 E8 03 FF 
19a98     00 FA 45 F5 | 	or	result1, ##131072000
19a9c     64 00 00 FF 
19aa0     F8 E4 05 F1 | 	add	objptr, ##51448
19aa4     F2 FA 61 FC | 	wrlong	result1, objptr
19aa8     64 00 00 FF 
19aac     F8 E4 85 F1 | 	sub	objptr, ##51448
19ab0     F2 FA 01 F6 | 	mov	result1, objptr
19ab4     B5 FA 25 F4 | 	bith	result1, #181
19ab8     64 00 00 FF 
19abc     00 E5 05 F1 | 	add	objptr, ##51456
19ac0     F2 FA 61 FC | 	wrlong	result1, objptr
19ac4     64 00 00 FF 
19ac8     00 E5 85 F1 | 	sub	objptr, ##51456
19acc     F2 FA 01 F6 | 	mov	result1, objptr
19ad0     D4 FA 25 F4 | 	bith	result1, #212
19ad4     64 00 00 FF 
19ad8     04 E5 05 F1 | 	add	objptr, ##51460
19adc     F2 FA 61 FC | 	wrlong	result1, objptr
19ae0     64 00 00 FF 
19ae4     04 E5 85 F1 | 	sub	objptr, ##51460
19ae8     F2 FA 01 F6 | 	mov	result1, objptr
19aec     1B FA 25 F4 | 	bith	result1, #27
19af0     64 00 00 FF 
19af4     08 E5 05 F1 | 	add	objptr, ##51464
19af8     F2 FA 61 FC | 	wrlong	result1, objptr
19afc     64 00 00 FF 
19b00     08 E5 85 F1 | 	sub	objptr, ##51464
19b04     F2 FA 01 F6 | 	mov	result1, objptr
19b08     00 08 04 FF 
19b0c     00 FA 45 F5 | 	or	result1, ##135266304
19b10     64 00 00 FF 
19b14     0C E5 05 F1 | 	add	objptr, ##51468
19b18     F2 FA 61 FC | 	wrlong	result1, objptr
19b1c     64 00 00 FF 
19b20     0C E5 85 F1 | 	sub	objptr, ##51468
19b24     F2 FA 01 F6 | 	mov	result1, objptr
19b28     00 10 04 FF 
19b2c     00 FA 45 F5 | 	or	result1, ##136314880
19b30     64 00 00 FF 
19b34     10 E5 05 F1 | 	add	objptr, ##51472
19b38     F2 FA 61 FC | 	wrlong	result1, objptr
19b3c     64 00 00 FF 
19b40     10 E5 85 F1 | 	sub	objptr, ##51472
19b44                 | _init_commands_ret
19b44     2D 00 64 FD | 	ret
19b48                 | 
19b48                 | ' 
19b48                 | ' ''--------------------------------Error strings -------------------------------------
19b48                 | ' sub init_audio
19b48                 | _init_audio
19b48     05 4A 05 F6 | 	mov	COUNT_, #5
19b4c     A8 00 A0 FD | 	call	#pushregs_
19b50     00 C0 1F FF 
19b54     00 1E 06 F6 | 	mov	local01, ##1065353216
19b58                 | ' for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
19b58     00 20 06 F6 | 	mov	local02, #0
19b5c                 | LR__2060
19b5c     10 23 02 F6 | 	mov	local03, local02
19b60     01 22 66 F0 | 	shl	local03, #1
19b64     0C 00 00 FF 
19b68     D8 E4 05 F1 | 	add	objptr, ##6360
19b6c     F2 22 02 F1 | 	add	local03, objptr
19b70     58 7F 23 FF 
19b74     00 24 06 F6 | 	mov	local04, ##1191096320
19b78     0C 00 00 FF 
19b7c     D8 E4 85 F1 | 	sub	objptr, ##6360
19b80     10 13 52 F6 | 	abs	arg01, local02 wc
19b84     1F 26 C6 C9 |  if_b	decod	local05, #31
19b88     00 26 06 36 |  if_ae	mov	local05, #0
19b8c     24 77 B0 FD | 	call	#__system___float_fromuns
19b90     13 FB 61 F5 | 	xor	result1, local05
19b94     FD 12 02 F6 | 	mov	arg01, result1
19b98     87 24 20 FF 
19b9c     DB 15 06 F6 | 	mov	arg02, ##1078530011
19ba0     14 7B B0 FD | 	call	#__system___float_mul
19ba4     FD 12 02 F6 | 	mov	arg01, result1
19ba8     00 00 22 FF 
19bac     00 14 06 F6 | 	mov	arg02, ##1140850688
19bb0     08 7D B0 FD | 	call	#__system___float_div
19bb4     FD 12 02 F6 | 	mov	arg01, result1
19bb8     38 84 B0 FD | 	call	#__system____builtin_sinf
19bbc     FD 14 02 F6 | 	mov	arg02, result1
19bc0     12 13 02 F6 | 	mov	arg01, local04
19bc4     F0 7A B0 FD | 	call	#__system___float_mul
19bc8     FD 12 02 F6 | 	mov	arg01, result1
19bcc     01 14 06 F6 | 	mov	arg02, #1
19bd0     AC 7F B0 FD | 	call	#__system___float_tointeger
19bd4     11 FB 51 FC | 	wrword	result1, local03
19bd8     01 20 06 F1 | 	add	local02, #1
19bdc     02 00 00 FF 
19be0     00 20 56 F2 | 	cmps	local02, ##1024 wc
19be4     74 FF 9F CD |  if_b	jmp	#LR__2060
19be8                 | ' for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
19be8     00 20 06 F6 | 	mov	local02, #0
19bec     10 00 00 FF 
19bf0     D8 E4 05 F1 | 	add	objptr, ##8408
19bf4     97 6A 48 FB | 	callpa	#(@LR__2064-@LR__2061)>>2,fcache_load_ptr_
19bf8                 | LR__2061
19bf8     10 23 02 F6 | 	mov	local03, local02
19bfc     01 22 66 F0 | 	shl	local03, #1
19c00     F2 22 02 F1 | 	add	local03, objptr
19c04     10 27 02 F6 | 	mov	local05, local02
19c08     07 26 66 F0 | 	shl	local05, #7
19c0c     10 27 82 F1 | 	sub	local05, local02
19c10     C0 FF 7F FF 
19c14     00 25 06 F6 | 	mov	local04, ##-32512
19c18     13 25 02 F1 | 	add	local04, local05
19c1c     11 25 52 FC | 	wrword	local04, local03
19c20     09 22 C6 F9 | 	decod	local03, #9
19c24     10 23 02 F1 | 	add	local03, local02
19c28     01 22 66 F0 | 	shl	local03, #1
19c2c     F2 22 02 F1 | 	add	local03, objptr
19c30     10 25 02 F6 | 	mov	local04, local02
19c34     01 24 66 F0 | 	shl	local04, #1
19c38     F2 24 02 F1 | 	add	local04, objptr
19c3c     12 25 E2 FA | 	rdword	local04, local04
19c40     0F 24 66 F7 | 	signx	local04, #15
19c44     12 25 62 F6 | 	neg	local04, local04
19c48     11 25 52 FC | 	wrword	local04, local03
19c4c     01 20 06 F1 | 	add	local02, #1
19c50     01 00 00 FF 
19c54     00 20 56 F2 | 	cmps	local02, ##512 wc
19c58     9C FF 9F CD |  if_b	jmp	#LR__2061
19c5c                 | ' for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
19c5c     00 20 06 F6 | 	mov	local02, #0
19c60     04 00 00 FF 
19c64     00 E4 05 F1 | 	add	objptr, ##2048
19c68                 | LR__2062
19c68     10 23 02 F6 | 	mov	local03, local02
19c6c     01 22 66 F0 | 	shl	local03, #1
19c70     F2 22 02 F1 | 	add	local03, objptr
19c74     10 27 02 F6 | 	mov	local05, local02
19c78     06 26 66 F0 | 	shl	local05, #6
19c7c     10 27 82 F1 | 	sub	local05, local02
19c80     C1 FF 7F FF 
19c84     00 24 06 F6 | 	mov	local04, ##-32256
19c88     13 25 02 F1 | 	add	local04, local05
19c8c     11 25 52 FC | 	wrword	local04, local03
19c90     01 20 06 F1 | 	add	local02, #1
19c94     02 00 00 FF 
19c98     00 20 56 F2 | 	cmps	local02, ##1024 wc
19c9c     C8 FF 9F CD |  if_b	jmp	#LR__2062
19ca0                 | ' for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
19ca0     00 20 06 F6 | 	mov	local02, #0
19ca4     04 00 00 FF 
19ca8     00 E4 05 F1 | 	add	objptr, ##2048
19cac                 | LR__2063
19cac     10 23 02 F6 | 	mov	local03, local02
19cb0     01 22 66 F0 | 	shl	local03, #1
19cb4     F2 22 02 F1 | 	add	local03, objptr
19cb8     40 00 80 FF 
19cbc     11 51 59 FC | 	wrword	##32936, local03
19cc0     01 20 06 F1 | 	add	local02, #1
19cc4     80 20 56 F2 | 	cmps	local02, #128 wc
19cc8     E0 FF 9F CD |  if_b	jmp	#LR__2063
19ccc                 | LR__2064
19ccc     80 20 06 F6 | 	mov	local02, #128
19cd0     97 68 48 FB | 	callpa	#(@LR__2070-@LR__2065)>>2,fcache_load_ptr_
19cd4                 | LR__2065
19cd4     10 23 02 F6 | 	mov	local03, local02
19cd8     01 22 66 F0 | 	shl	local03, #1
19cdc     F2 22 02 F1 | 	add	local03, objptr
19ce0     3F 00 80 FF 
19ce4     11 B1 5A FC | 	wrword	##32600, local03
19ce8     01 20 06 F1 | 	add	local02, #1
19cec     02 00 00 FF 
19cf0     00 20 16 F2 | 	cmp	local02, ##1024 wc
19cf4     DC FF 9F CD |  if_b	jmp	#LR__2065
19cf8                 | ' for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
19cf8     00 20 06 F6 | 	mov	local02, #0
19cfc     04 00 00 FF 
19d00     00 E4 05 F1 | 	add	objptr, ##2048
19d04                 | LR__2066
19d04     10 23 02 F6 | 	mov	local03, local02
19d08     01 22 66 F0 | 	shl	local03, #1
19d0c     F2 22 02 F1 | 	add	local03, objptr
19d10     40 00 80 FF 
19d14     11 51 59 FC | 	wrword	##32936, local03
19d18     01 20 06 F1 | 	add	local02, #1
19d1c     01 00 00 FF 
19d20     00 20 56 F2 | 	cmps	local02, ##512 wc
19d24     DC FF 9F CD |  if_b	jmp	#LR__2066
19d28     09 20 C6 F9 | 	decod	local02, #9
19d2c                 | LR__2067
19d2c     10 23 02 F6 | 	mov	local03, local02
19d30     01 22 66 F0 | 	shl	local03, #1
19d34     F2 22 02 F1 | 	add	local03, objptr
19d38     3F 00 80 FF 
19d3c     11 B1 5A FC | 	wrword	##32600, local03
19d40     01 20 06 F1 | 	add	local02, #1
19d44     02 00 00 FF 
19d48     00 20 16 F2 | 	cmp	local02, ##1024 wc
19d4c     DC FF 9F CD |  if_b	jmp	#LR__2067
19d50                 | ' for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
19d50     00 20 06 F6 | 	mov	local02, #0
19d54     04 00 00 FF 
19d58     00 E4 05 F1 | 	add	objptr, ##2048
19d5c                 | LR__2068
19d5c     10 23 02 F6 | 	mov	local03, local02
19d60     01 22 66 F0 | 	shl	local03, #1
19d64     F2 22 02 F1 | 	add	local03, objptr
19d68     40 00 80 FF 
19d6c     11 51 59 FC | 	wrword	##32936, local03
19d70     01 20 06 F1 | 	add	local02, #1
19d74     00 21 56 F2 | 	cmps	local02, #256 wc
19d78     E0 FF 9F CD |  if_b	jmp	#LR__2068
19d7c     00 21 06 F6 | 	mov	local02, #256
19d80                 | LR__2069
19d80     10 23 02 F6 | 	mov	local03, local02
19d84     01 22 66 F0 | 	shl	local03, #1
19d88     F2 22 02 F1 | 	add	local03, objptr
19d8c     3F 00 80 FF 
19d90     11 B1 5A FC | 	wrword	##32600, local03
19d94     01 20 06 F1 | 	add	local02, #1
19d98     02 00 00 FF 
19d9c     00 20 16 F2 | 	cmp	local02, ##1024 wc
19da0     DC FF 9F CD |  if_b	jmp	#LR__2069
19da4                 | LR__2070
19da4                 | ' for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
19da4     00 20 06 F6 | 	mov	local02, #0
19da8     04 00 00 FF 
19dac     00 E4 05 F1 | 	add	objptr, ##2048
19db0     14 00 00 FF 
19db4     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
19db8     97 1C 48 FB | 	callpa	#(@LR__2072-@LR__2071)>>2,fcache_load_ptr_
19dbc                 | LR__2071
19dbc     10 23 02 F6 | 	mov	local03, local02
19dc0     01 22 66 F0 | 	shl	local03, #1
19dc4     F2 22 02 F1 | 	add	local03, objptr
19dc8     F5 12 02 F6 | 	mov	arg01, ptr__dat__
19dcc     10 12 06 F1 | 	add	arg01, #16
19dd0     10 FB 01 F6 | 	mov	result1, local02
19dd4     01 FA 65 F0 | 	shl	result1, #1
19dd8     FD 12 02 F1 | 	add	arg01, result1
19ddc     09 FB E1 FA | 	rdword	result1, arg01
19de0     11 FB 51 FC | 	wrword	result1, local03
19de4     01 20 06 F1 | 	add	local02, #1
19de8     02 00 00 FF 
19dec     00 20 56 F2 | 	cmps	local02, ##1024 wc
19df0     C8 FF 9F CD |  if_b	jmp	#LR__2071
19df4                 | LR__2072
19df4                 | ' for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
19df4     00 20 06 F6 | 	mov	local02, #0
19df8     04 00 00 FF 
19dfc     00 E4 05 F1 | 	add	objptr, ##2048
19e00     04 00 00 FF 
19e04     10 EA 85 F1 | 	sub	ptr__dat__, ##2064
19e08     97 1C 48 FB | 	callpa	#(@LR__2074-@LR__2073)>>2,fcache_load_ptr_
19e0c                 | LR__2073
19e0c     10 23 02 F6 | 	mov	local03, local02
19e10     01 22 66 F0 | 	shl	local03, #1
19e14     F2 22 02 F1 | 	add	local03, objptr
19e18     F5 12 02 F6 | 	mov	arg01, ptr__dat__
19e1c     10 12 06 F1 | 	add	arg01, #16
19e20     10 FB 01 F6 | 	mov	result1, local02
19e24     01 FA 65 F0 | 	shl	result1, #1
19e28     FD 12 02 F1 | 	add	arg01, result1
19e2c     09 FB E1 FA | 	rdword	result1, arg01
19e30     11 FB 51 FC | 	wrword	result1, local03
19e34     01 20 06 F1 | 	add	local02, #1
19e38     02 00 00 FF 
19e3c     00 20 56 F2 | 	cmps	local02, ##1024 wc
19e40     C8 FF 9F CD |  if_b	jmp	#LR__2073
19e44                 | LR__2074
19e44     10 00 00 FF 
19e48     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
19e4c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
19e4c     00 20 06 F6 | 	mov	local02, #0
19e50     04 00 00 FF 
19e54     00 E4 05 F1 | 	add	objptr, ##2048
19e58     97 18 48 FB | 	callpa	#(@LR__2076-@LR__2075)>>2,fcache_load_ptr_
19e5c                 | LR__2075
19e5c     10 23 02 F6 | 	mov	local03, local02
19e60     01 22 66 F0 | 	shl	local03, #1
19e64     F2 22 02 F1 | 	add	local03, objptr
19e68     10 27 02 F6 | 	mov	local05, local02
19e6c     08 26 66 F0 | 	shl	local05, #8
19e70     7F 00 00 FF 
19e74     00 25 06 F6 | 	mov	local04, ##65280
19e78     13 25 82 F1 | 	sub	local04, local05
19e7c     11 25 52 FC | 	wrword	local04, local03
19e80     01 20 06 F1 | 	add	local02, #1
19e84     00 21 56 F2 | 	cmps	local02, #256 wc
19e88     D0 FF 9F CD |  if_b	jmp	#LR__2075
19e8c                 | LR__2076
19e8c     2C 00 00 FF 
19e90     D8 E4 85 F1 | 	sub	objptr, ##22744
19e94                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
19e94     00 20 06 F6 | 	mov	local02, #0
19e98                 | LR__2077
19e98     10 23 02 F6 | 	mov	local03, local02
19e9c     01 22 66 F0 | 	shl	local03, #1
19ea0     2D 00 00 FF 
19ea4     D8 E4 05 F1 | 	add	objptr, ##23256
19ea8     F2 22 02 F1 | 	add	local03, objptr
19eac     80 BF 23 FF 
19eb0     00 12 06 F6 | 	mov	arg01, ##1199505408
19eb4     0F 15 02 F6 | 	mov	arg02, local01
19eb8     2D 00 00 FF 
19ebc     D8 E4 85 F1 | 	sub	objptr, ##23256
19ec0     F4 77 B0 FD | 	call	#__system___float_mul
19ec4     FD 12 02 F6 | 	mov	arg01, result1
19ec8     01 14 06 F6 | 	mov	arg02, #1
19ecc     B0 7C B0 FD | 	call	#__system___float_tointeger
19ed0     11 FB 51 FC | 	wrword	result1, local03
19ed4     0F 13 02 F6 | 	mov	arg01, local01
19ed8     CC BC 1F FF 
19edc     9A 15 06 F6 | 	mov	arg02, ##1064933786
19ee0     D4 77 B0 FD | 	call	#__system___float_mul
19ee4     FD 1E 02 F6 | 	mov	local01, result1
19ee8     01 20 06 F1 | 	add	local02, #1
19eec     00 21 56 F2 | 	cmps	local02, #256 wc
19ef0     A4 FF 9F CD |  if_b	jmp	#LR__2077
19ef4     2E 00 00 FF 
19ef8     D6 E4 05 F1 | 	add	objptr, ##23766
19efc     F2 00 58 FC | 	wrword	#0, objptr
19f00                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
19f00     00 20 06 F6 | 	mov	local02, #0
19f04     02 E4 05 F1 | 	add	objptr, #2
19f08     97 10 48 FB | 	callpa	#(@LR__2079-@LR__2078)>>2,fcache_load_ptr_
19f0c                 | LR__2078
19f0c     10 23 02 F6 | 	mov	local03, local02
19f10     01 22 66 F0 | 	shl	local03, #1
19f14     F2 22 02 F1 | 	add	local03, objptr
19f18     7F 00 80 FF 
19f1c     11 01 5A FC | 	wrword	##65280, local03
19f20     01 20 06 F1 | 	add	local02, #1
19f24     FF 20 56 F2 | 	cmps	local02, #255 wc
19f28     E0 FF 9F CD |  if_b	jmp	#LR__2078
19f2c                 | LR__2079
19f2c     FE E5 05 F1 | 	add	objptr, #510
19f30     F2 00 58 FC | 	wrword	#0, objptr
19f34                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
19f34     00 20 06 F6 | 	mov	local02, #0
19f38     02 E4 05 F1 | 	add	objptr, #2
19f3c     97 52 48 FB | 	callpa	#(@LR__2084-@LR__2080)>>2,fcache_load_ptr_
19f40                 | LR__2080
19f40     10 23 02 F6 | 	mov	local03, local02
19f44     01 22 66 F0 | 	shl	local03, #1
19f48     F2 22 02 F1 | 	add	local03, objptr
19f4c     10 25 02 F6 | 	mov	local04, local02
19f50     0C 24 66 F0 | 	shl	local04, #12
19f54     11 25 52 FC | 	wrword	local04, local03
19f58     01 20 06 F1 | 	add	local02, #1
19f5c     10 20 56 F2 | 	cmps	local02, #16 wc
19f60     DC FF 9F CD |  if_b	jmp	#LR__2080
19f64                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
19f64     10 20 06 F6 | 	mov	local02, #16
19f68                 | LR__2081
19f68     10 23 02 F6 | 	mov	local03, local02
19f6c     01 22 66 F0 | 	shl	local03, #1
19f70     F2 22 02 F1 | 	add	local03, objptr
19f74     7F 00 80 FF 
19f78     11 01 5A FC | 	wrword	##65280, local03
19f7c     01 20 06 F1 | 	add	local02, #1
19f80     F0 20 16 F2 | 	cmp	local02, #240 wc
19f84     E0 FF 9F CD |  if_b	jmp	#LR__2081
19f88                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
19f88     F0 20 06 F6 | 	mov	local02, #240
19f8c                 | LR__2082
19f8c     10 23 02 F6 | 	mov	local03, local02
19f90     01 22 66 F0 | 	shl	local03, #1
19f94     F2 22 02 F1 | 	add	local03, objptr
19f98     FF 26 06 F6 | 	mov	local05, #255
19f9c     10 27 82 F1 | 	sub	local05, local02
19fa0     0C 26 66 F0 | 	shl	local05, #12
19fa4     11 27 52 FC | 	wrword	local05, local03
19fa8     01 20 06 F1 | 	add	local02, #1
19fac     00 21 16 F2 | 	cmp	local02, #256 wc
19fb0     D8 FF 9F CD |  if_b	jmp	#LR__2082
19fb4                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
19fb4     00 20 06 F6 | 	mov	local02, #0
19fb8     01 00 00 FF 
19fbc     00 E4 05 F1 | 	add	objptr, ##512
19fc0                 | LR__2083
19fc0     10 23 02 F6 | 	mov	local03, local02
19fc4     01 22 66 F0 | 	shl	local03, #1
19fc8     F2 22 02 F1 | 	add	local03, objptr
19fcc     10 25 02 F6 | 	mov	local04, local02
19fd0     08 24 66 F0 | 	shl	local04, #8
19fd4     11 25 52 FC | 	wrword	local04, local03
19fd8     01 20 06 F1 | 	add	local02, #1
19fdc     00 21 56 F2 | 	cmps	local02, #256 wc
19fe0     DC FF 9F CD |  if_b	jmp	#LR__2083
19fe4                 | LR__2084
19fe4     FE E5 05 F1 | 	add	objptr, #510
19fe8     F2 00 58 FC | 	wrword	#0, objptr
19fec                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
19fec     00 20 06 F6 | 	mov	local02, #0
19ff0     02 E4 05 F1 | 	add	objptr, #2
19ff4     97 6A 48 FB | 	callpa	#(@LR__2089-@LR__2085)>>2,fcache_load_ptr_
19ff8                 | LR__2085
19ff8     10 23 02 F6 | 	mov	local03, local02
19ffc     01 22 66 F0 | 	shl	local03, #1
1a000     F2 22 02 F1 | 	add	local03, objptr
1a004     10 25 02 F6 | 	mov	local04, local02
1a008     04 24 66 F0 | 	shl	local04, #4
1a00c     10 25 02 F1 | 	add	local04, local02
1a010     04 24 66 F0 | 	shl	local04, #4
1a014     11 25 52 FC | 	wrword	local04, local03
1a018     01 20 06 F1 | 	add	local02, #1
1a01c     F0 20 56 F2 | 	cmps	local02, #240 wc
1a020     D4 FF 9F CD |  if_b	jmp	#LR__2085
1a024     F0 20 06 F6 | 	mov	local02, #240
1a028                 | LR__2086
1a028     10 23 02 F6 | 	mov	local03, local02
1a02c     01 22 66 F0 | 	shl	local03, #1
1a030     F2 22 02 F1 | 	add	local03, objptr
1a034     FF 26 06 F6 | 	mov	local05, #255
1a038     10 27 82 F1 | 	sub	local05, local02
1a03c     0C 26 66 F0 | 	shl	local05, #12
1a040     11 27 52 FC | 	wrword	local05, local03
1a044     01 20 06 F1 | 	add	local02, #1
1a048     00 21 16 F2 | 	cmp	local02, #256 wc
1a04c     D8 FF 9F CD |  if_b	jmp	#LR__2086
1a050                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1a050     00 20 06 F6 | 	mov	local02, #0
1a054     01 00 00 FF 
1a058     00 E4 05 F1 | 	add	objptr, ##512
1a05c                 | LR__2087
1a05c     10 23 02 F6 | 	mov	local03, local02
1a060     01 22 66 F0 | 	shl	local03, #1
1a064     F2 22 02 F1 | 	add	local03, objptr
1a068     10 25 02 F6 | 	mov	local04, local02
1a06c     09 24 66 F0 | 	shl	local04, #9
1a070     11 25 52 FC | 	wrword	local04, local03
1a074     FF 22 06 F6 | 	mov	local03, #255
1a078     10 23 82 F1 | 	sub	local03, local02
1a07c     01 22 66 F0 | 	shl	local03, #1
1a080     F2 22 02 F1 | 	add	local03, objptr
1a084     10 25 02 F6 | 	mov	local04, local02
1a088     09 24 66 F0 | 	shl	local04, #9
1a08c     11 25 52 FC | 	wrword	local04, local03
1a090     01 20 06 F1 | 	add	local02, #1
1a094     80 20 56 F2 | 	cmps	local02, #128 wc
1a098     C0 FF 9F CD |  if_b	jmp	#LR__2087
1a09c                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1a09c     00 20 06 F6 | 	mov	local02, #0
1a0a0     01 00 00 FF 
1a0a4     00 E4 05 F1 | 	add	objptr, ##512
1a0a8                 | LR__2088
1a0a8     10 23 02 F6 | 	mov	local03, local02
1a0ac     01 22 66 F0 | 	shl	local03, #1
1a0b0     F2 22 02 F1 | 	add	local03, objptr
1a0b4     10 25 02 F6 | 	mov	local04, local02
1a0b8     0D 24 66 F0 | 	shl	local04, #13
1a0bc     11 25 52 FC | 	wrword	local04, local03
1a0c0     01 20 06 F1 | 	add	local02, #1
1a0c4     08 20 56 F2 | 	cmps	local02, #8 wc
1a0c8     DC FF 9F CD |  if_b	jmp	#LR__2088
1a0cc                 | LR__2089
1a0cc                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1a0cc     08 20 06 F6 | 	mov	local02, #8
1a0d0     97 42 48 FB | 	callpa	#(@LR__2093-@LR__2090)>>2,fcache_load_ptr_
1a0d4                 | LR__2090
1a0d4     10 23 02 F6 | 	mov	local03, local02
1a0d8     01 22 66 F0 | 	shl	local03, #1
1a0dc     F2 22 02 F1 | 	add	local03, objptr
1a0e0     10 1F 02 F6 | 	mov	local01, local02
1a0e4     08 1E 86 F1 | 	sub	local01, #8
1a0e8     0B 1E 66 F0 | 	shl	local01, #11
1a0ec     7F 00 00 FF 
1a0f0     00 25 06 F6 | 	mov	local04, ##65280
1a0f4     0F 25 82 F1 | 	sub	local04, local01
1a0f8     11 25 52 FC | 	wrword	local04, local03
1a0fc     01 20 06 F1 | 	add	local02, #1
1a100     18 20 16 F2 | 	cmp	local02, #24 wc
1a104     CC FF 9F CD |  if_b	jmp	#LR__2090
1a108                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1a108     18 20 06 F6 | 	mov	local02, #24
1a10c                 | LR__2091
1a10c     10 23 02 F6 | 	mov	local03, local02
1a110     01 22 66 F0 | 	shl	local03, #1
1a114     F2 22 02 F1 | 	add	local03, objptr
1a118     40 00 80 FF 
1a11c     11 01 58 FC | 	wrword	##32768, local03
1a120     01 20 06 F1 | 	add	local02, #1
1a124     81 20 16 F2 | 	cmp	local02, #129 wc
1a128     E0 FF 9F CD |  if_b	jmp	#LR__2091
1a12c                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1a12c     81 20 06 F6 | 	mov	local02, #129
1a130                 | LR__2092
1a130     10 23 02 F6 | 	mov	local03, local02
1a134     01 22 66 F0 | 	shl	local03, #1
1a138     F2 22 02 F1 | 	add	local03, objptr
1a13c     FF 26 06 F6 | 	mov	local05, #255
1a140     10 27 82 F1 | 	sub	local05, local02
1a144     08 26 66 F0 | 	shl	local05, #8
1a148     11 27 52 FC | 	wrword	local05, local03
1a14c     01 20 06 F1 | 	add	local02, #1
1a150     00 21 16 F2 | 	cmp	local02, #256 wc
1a154     D8 FF 9F CD |  if_b	jmp	#LR__2092
1a158                 | LR__2093
1a158     46 00 00 FF 
1a15c     DA E4 05 F1 | 	add	objptr, ##36058
1a160     F2 00 59 FC | 	wrword	#128, objptr
1a164     79 00 00 FF 
1a168     B2 E5 85 F1 | 	sub	objptr, ##62386
1a16c                 | ' for i=0 to 7
1a16c     00 20 06 F6 | 	mov	local02, #0
1a170     97 8E 48 FB | 	callpa	#(@LR__2095-@LR__2094)>>2,fcache_load_ptr_
1a174                 | LR__2094
1a174     10 23 02 F6 | 	mov	local03, local02
1a178     01 22 66 F0 | 	shl	local03, #1
1a17c     10 23 02 F1 | 	add	local03, local02
1a180     03 22 66 F0 | 	shl	local03, #3
1a184     34 00 00 FF 
1a188     38 E5 05 F1 | 	add	objptr, ##26936
1a18c     F2 22 02 F1 | 	add	local03, objptr
1a190     00 EE A1 FF 
1a194     11 01 68 FC | 	wrlong	##1138491392, local03
1a198     10 23 02 F6 | 	mov	local03, local02
1a19c     01 22 66 F0 | 	shl	local03, #1
1a1a0     10 23 02 F1 | 	add	local03, local02
1a1a4     03 22 66 F0 | 	shl	local03, #3
1a1a8     F2 22 02 F1 | 	add	local03, objptr
1a1ac     04 22 06 F1 | 	add	local03, #4
1a1b0     11 21 42 FC | 	wrbyte	local02, local03
1a1b4     10 23 02 F6 | 	mov	local03, local02
1a1b8     01 22 66 F0 | 	shl	local03, #1
1a1bc     10 23 02 F1 | 	add	local03, local02
1a1c0     03 22 66 F0 | 	shl	local03, #3
1a1c4     F2 22 02 F1 | 	add	local03, objptr
1a1c8     05 22 06 F1 | 	add	local03, #5
1a1cc     11 21 42 FC | 	wrbyte	local02, local03
1a1d0     10 23 02 F6 | 	mov	local03, local02
1a1d4     01 22 66 F0 | 	shl	local03, #1
1a1d8     10 23 02 F1 | 	add	local03, local02
1a1dc     03 22 66 F0 | 	shl	local03, #3
1a1e0     F2 22 02 F1 | 	add	local03, objptr
1a1e4     06 22 06 F1 | 	add	local03, #6
1a1e8     11 01 58 FC | 	wrword	#0, local03
1a1ec     10 23 02 F6 | 	mov	local03, local02
1a1f0     01 22 66 F0 | 	shl	local03, #1
1a1f4     10 23 02 F1 | 	add	local03, local02
1a1f8     03 22 66 F0 | 	shl	local03, #3
1a1fc     F2 22 02 F1 | 	add	local03, objptr
1a200     08 22 06 F1 | 	add	local03, #8
1a204     00 C0 9F FF 
1a208     11 01 68 FC | 	wrlong	##1065353216, local03
1a20c     10 23 02 F6 | 	mov	local03, local02
1a210     01 22 66 F0 | 	shl	local03, #1
1a214     10 23 02 F1 | 	add	local03, local02
1a218     03 22 66 F0 | 	shl	local03, #3
1a21c     F2 22 02 F1 | 	add	local03, objptr
1a220     0C 22 06 F1 | 	add	local03, #12
1a224     00 40 A0 FF 
1a228     11 01 68 FC | 	wrlong	##1082130432, local03
1a22c     10 23 02 F6 | 	mov	local03, local02
1a230     01 22 66 F0 | 	shl	local03, #1
1a234     10 23 02 F1 | 	add	local03, local02
1a238     03 22 66 F0 | 	shl	local03, #3
1a23c     F2 22 02 F1 | 	add	local03, objptr
1a240     10 22 06 F1 | 	add	local03, #16
1a244     11 01 68 FC | 	wrlong	#0, local03
1a248     10 23 02 F6 | 	mov	local03, local02
1a24c     01 22 66 F0 | 	shl	local03, #1
1a250     10 23 02 F1 | 	add	local03, local02
1a254     03 22 66 F0 | 	shl	local03, #3
1a258     F2 22 02 F1 | 	add	local03, objptr
1a25c     14 22 06 F1 | 	add	local03, #20
1a260     11 FF 59 FC | 	wrword	#255, local03
1a264     10 23 02 F6 | 	mov	local03, local02
1a268     01 22 66 F0 | 	shl	local03, #1
1a26c     45 00 00 FF 
1a270     6C E4 05 F1 | 	add	objptr, ##35436
1a274     F2 22 02 F1 | 	add	local03, objptr
1a278     11 FF 59 FC | 	wrword	#255, local03
1a27c     01 20 06 F1 | 	add	local02, #1
1a280     08 20 56 F2 | 	cmps	local02, #8 wc
1a284     79 00 00 FF 
1a288     A4 E5 85 F1 | 	sub	objptr, ##62372
1a28c     E4 FE 9F CD |  if_b	jmp	#LR__2094
1a290                 | LR__2095
1a290     00 6E 20 FF 
1a294     00 1E 06 F6 | 	mov	local01, ##1088159744
1a298                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1a298     03 26 06 F6 | 	mov	local05, #3
1a29c                 | LR__2096
1a29c     0F 13 02 F6 | 	mov	arg01, local01
1a2a0     CE C3 1F FF 
1a2a4     7D 14 06 F6 | 	mov	arg02, ##1065852029
1a2a8     0C 74 B0 FD | 	call	#__system___float_mul
1a2ac     FD 1E 02 F6 | 	mov	local01, result1
1a2b0     FA 27 6E FB | 	djnz	local05, #LR__2096
1a2b4     00 20 06 F6 | 	mov	local02, #0
1a2b8                 | LR__2097
1a2b8     10 27 02 F6 | 	mov	local05, local02
1a2bc     02 26 66 F0 | 	shl	local05, #2
1a2c0     34 00 00 FF 
1a2c4     D8 E4 05 F1 | 	add	objptr, ##26840
1a2c8     F2 26 02 F1 | 	add	local05, objptr
1a2cc     13 1F 62 FC | 	wrlong	local01, local05
1a2d0     0F 13 02 F6 | 	mov	arg01, local01
1a2d4     CE C3 1F FF 
1a2d8     7D 14 06 F6 | 	mov	arg02, ##1065852029
1a2dc     34 00 00 FF 
1a2e0     D8 E4 85 F1 | 	sub	objptr, ##26840
1a2e4     D0 73 B0 FD | 	call	#__system___float_mul
1a2e8     FD 1E 02 F6 | 	mov	local01, result1
1a2ec     01 20 06 F1 | 	add	local02, #1
1a2f0     0C 20 56 F2 | 	cmps	local02, #12 wc
1a2f4     C0 FF 9F CD |  if_b	jmp	#LR__2097
1a2f8     79 00 00 FF 
1a2fc     B2 E5 05 F1 | 	add	objptr, ##62386
1a300     F2 00 59 FC | 	wrword	#128, objptr
1a304     02 E4 85 F1 | 	sub	objptr, #2
1a308     F2 00 59 FC | 	wrword	#128, objptr
1a30c     79 00 00 FF 
1a310     B0 E5 85 F1 | 	sub	objptr, ##62384
1a314     A7 F0 03 F6 | 	mov	ptra, fp
1a318     B2 00 A0 FD | 	call	#popregs_
1a31c                 | _init_audio_ret
1a31c     2D 00 64 FD | 	ret
1a320                 | 
1a320                 | ' 
1a320                 | ' 
1a320                 | ' function getnoteval(token) as single
1a320                 | _getnoteval
1a320     02 4A 05 F6 | 	mov	COUNT_, #2
1a324     A8 00 A0 FD | 	call	#pushregs_
1a328     01 00 00 FF 
1a32c     00 13 86 F1 | 	sub	arg01, ##768
1a330     09 15 52 F6 | 	abs	arg02, arg01 wc
1a334     0C 14 16 FD | 	qdiv	arg02, #12
1a338     34 00 00 FF 
1a33c     D8 E4 05 F1 | 	add	objptr, ##26840
1a340     19 14 62 FD | 	getqy	arg02
1a344     0A 15 82 F6 | 	negc	arg02, arg02
1a348     02 14 66 F0 | 	shl	arg02, #2
1a34c     F2 14 02 F1 | 	add	arg02, objptr
1a350     0A 1F 02 FB | 	rdlong	local01, arg02
1a354     09 15 52 F6 | 	abs	arg02, arg01 wc
1a358     0C 14 16 FD | 	qdiv	arg02, #12
1a35c     34 00 00 FF 
1a360     D8 E4 85 F1 | 	sub	objptr, ##26840
1a364     01 12 06 F6 | 	mov	arg01, #1
1a368                 | ' noteexp=1+(note/12) 
1a368                 | ' return (2.0^noteexp)*notebase
1a368     18 14 62 FD | 	getqx	arg02
1a36c     0A 13 82 F3 | 	sumc	arg01, arg02
1a370     09 13 52 F6 | 	abs	arg01, arg01 wc
1a374     1F 20 C6 C9 |  if_b	decod	local02, #31
1a378     00 20 06 36 |  if_ae	mov	local02, #0
1a37c     34 6F B0 FD | 	call	#__system___float_fromuns
1a380     10 FB 61 F5 | 	xor	result1, local02
1a384     FD 14 02 F6 | 	mov	arg02, result1
1a388     1E 12 C6 F9 | 	decod	arg01, #30
1a38c     0C 82 B0 FD | 	call	#__system____builtin_powf
1a390     FD 12 02 F6 | 	mov	arg01, result1
1a394     0F 15 02 F6 | 	mov	arg02, local01
1a398     1C 73 B0 FD | 	call	#__system___float_mul
1a39c     A7 F0 03 F6 | 	mov	ptra, fp
1a3a0     B2 00 A0 FD | 	call	#popregs_
1a3a4                 | _getnoteval_ret
1a3a4     2D 00 64 FD | 	ret
1a3a8                 | 
1a3a8                 | ' 
1a3a8                 | ' 
1a3a8                 | ' 
1a3a8                 | ' sub init_error_strings
1a3a8                 | _init_error_strings
1a3a8     74 01 00 FF 
1a3ac     F9 00 06 F6 | 	mov	_var01, ##@LR__5198
1a3b0     65 00 00 FF 
1a3b4     7C E4 05 F1 | 	add	objptr, ##51836
1a3b8     F2 00 62 FC | 	wrlong	_var01, objptr
1a3bc     74 01 00 FF 
1a3c0     FA 00 06 F6 | 	mov	_var01, ##@LR__5199
1a3c4     04 E4 05 F1 | 	add	objptr, #4
1a3c8     F2 00 62 FC | 	wrlong	_var01, objptr
1a3cc     74 01 00 FF 
1a3d0     1F 01 06 F6 | 	mov	_var01, ##@LR__5200
1a3d4     04 E4 05 F1 | 	add	objptr, #4
1a3d8     F2 00 62 FC | 	wrlong	_var01, objptr
1a3dc     74 01 00 FF 
1a3e0     40 01 06 F6 | 	mov	_var01, ##@LR__5201
1a3e4     04 E4 05 F1 | 	add	objptr, #4
1a3e8     F2 00 62 FC | 	wrlong	_var01, objptr
1a3ec     74 01 00 FF 
1a3f0     5A 01 06 F6 | 	mov	_var01, ##@LR__5202
1a3f4     04 E4 05 F1 | 	add	objptr, #4
1a3f8     F2 00 62 FC | 	wrlong	_var01, objptr
1a3fc     74 01 00 FF 
1a400     76 01 06 F6 | 	mov	_var01, ##@LR__5203
1a404     04 E4 05 F1 | 	add	objptr, #4
1a408     F2 00 62 FC | 	wrlong	_var01, objptr
1a40c     74 01 00 FF 
1a410     98 01 06 F6 | 	mov	_var01, ##@LR__5204
1a414     04 E4 05 F1 | 	add	objptr, #4
1a418     F2 00 62 FC | 	wrlong	_var01, objptr
1a41c     74 01 00 FF 
1a420     C6 01 06 F6 | 	mov	_var01, ##@LR__5205
1a424     04 E4 05 F1 | 	add	objptr, #4
1a428     F2 00 62 FC | 	wrlong	_var01, objptr
1a42c     74 01 00 FF 
1a430     F1 01 06 F6 | 	mov	_var01, ##@LR__5206
1a434     04 E4 05 F1 | 	add	objptr, #4
1a438     F2 00 62 FC | 	wrlong	_var01, objptr
1a43c     75 01 00 FF 
1a440     0A 00 06 F6 | 	mov	_var01, ##@LR__5207
1a444     04 E4 05 F1 | 	add	objptr, #4
1a448     F2 00 62 FC | 	wrlong	_var01, objptr
1a44c     75 01 00 FF 
1a450     2B 00 06 F6 | 	mov	_var01, ##@LR__5208
1a454     04 E4 05 F1 | 	add	objptr, #4
1a458     F2 00 62 FC | 	wrlong	_var01, objptr
1a45c     75 01 00 FF 
1a460     42 00 06 F6 | 	mov	_var01, ##@LR__5209
1a464     04 E4 05 F1 | 	add	objptr, #4
1a468     F2 00 62 FC | 	wrlong	_var01, objptr
1a46c     75 01 00 FF 
1a470     60 00 06 F6 | 	mov	_var01, ##@LR__5210
1a474     04 E4 05 F1 | 	add	objptr, #4
1a478     F2 00 62 FC | 	wrlong	_var01, objptr
1a47c     75 01 00 FF 
1a480     84 00 06 F6 | 	mov	_var01, ##@LR__5211
1a484     04 E4 05 F1 | 	add	objptr, #4
1a488     F2 00 62 FC | 	wrlong	_var01, objptr
1a48c     75 01 00 FF 
1a490     AB 00 06 F6 | 	mov	_var01, ##@LR__5212
1a494     04 E4 05 F1 | 	add	objptr, #4
1a498     F2 00 62 FC | 	wrlong	_var01, objptr
1a49c     75 01 00 FF 
1a4a0     C7 00 06 F6 | 	mov	_var01, ##@LR__5213
1a4a4     04 E4 05 F1 | 	add	objptr, #4
1a4a8     F2 00 62 FC | 	wrlong	_var01, objptr
1a4ac     75 01 00 FF 
1a4b0     D8 00 06 F6 | 	mov	_var01, ##@LR__5214
1a4b4     04 E4 05 F1 | 	add	objptr, #4
1a4b8     F2 00 62 FC | 	wrlong	_var01, objptr
1a4bc     75 01 00 FF 
1a4c0     E8 00 06 F6 | 	mov	_var01, ##@LR__5215
1a4c4     04 E4 05 F1 | 	add	objptr, #4
1a4c8     F2 00 62 FC | 	wrlong	_var01, objptr
1a4cc     75 01 00 FF 
1a4d0     03 01 06 F6 | 	mov	_var01, ##@LR__5216
1a4d4     04 E4 05 F1 | 	add	objptr, #4
1a4d8     F2 00 62 FC | 	wrlong	_var01, objptr
1a4dc     75 01 00 FF 
1a4e0     15 01 06 F6 | 	mov	_var01, ##@LR__5217
1a4e4     04 E4 05 F1 | 	add	objptr, #4
1a4e8     F2 00 62 FC | 	wrlong	_var01, objptr
1a4ec     75 01 00 FF 
1a4f0     2D 01 06 F6 | 	mov	_var01, ##@LR__5218
1a4f4     04 E4 05 F1 | 	add	objptr, #4
1a4f8     F2 00 62 FC | 	wrlong	_var01, objptr
1a4fc     75 01 00 FF 
1a500     41 01 06 F6 | 	mov	_var01, ##@LR__5219
1a504     04 E4 05 F1 | 	add	objptr, #4
1a508     F2 00 62 FC | 	wrlong	_var01, objptr
1a50c     75 01 00 FF 
1a510     51 01 06 F6 | 	mov	_var01, ##@LR__5220
1a514     04 E4 05 F1 | 	add	objptr, #4
1a518     F2 00 62 FC | 	wrlong	_var01, objptr
1a51c     75 01 00 FF 
1a520     6E 01 06 F6 | 	mov	_var01, ##@LR__5221
1a524     04 E4 05 F1 | 	add	objptr, #4
1a528     F2 00 62 FC | 	wrlong	_var01, objptr
1a52c     75 01 00 FF 
1a530     7F 01 06 F6 | 	mov	_var01, ##@LR__5222
1a534     04 E4 05 F1 | 	add	objptr, #4
1a538     F2 00 62 FC | 	wrlong	_var01, objptr
1a53c     75 01 00 FF 
1a540     90 01 06 F6 | 	mov	_var01, ##@LR__5223
1a544     04 E4 05 F1 | 	add	objptr, #4
1a548     F2 00 62 FC | 	wrlong	_var01, objptr
1a54c     75 01 00 FF 
1a550     BB 01 06 F6 | 	mov	_var01, ##@LR__5224
1a554     04 E4 05 F1 | 	add	objptr, #4
1a558     F2 00 62 FC | 	wrlong	_var01, objptr
1a55c     75 01 00 FF 
1a560     D7 01 06 F6 | 	mov	_var01, ##@LR__5225
1a564     04 E4 05 F1 | 	add	objptr, #4
1a568     F2 00 62 FC | 	wrlong	_var01, objptr
1a56c     75 01 00 FF 
1a570     ED 01 06 F6 | 	mov	_var01, ##@LR__5226
1a574     04 E4 05 F1 | 	add	objptr, #4
1a578     F2 00 62 FC | 	wrlong	_var01, objptr
1a57c     75 01 00 FF 
1a580     FA 01 06 F6 | 	mov	_var01, ##@LR__5227
1a584     04 E4 05 F1 | 	add	objptr, #4
1a588     F2 00 62 FC | 	wrlong	_var01, objptr
1a58c     76 01 00 FF 
1a590     0C 00 06 F6 | 	mov	_var01, ##@LR__5228
1a594     04 E4 05 F1 | 	add	objptr, #4
1a598     F2 00 62 FC | 	wrlong	_var01, objptr
1a59c     76 01 00 FF 
1a5a0     1D 00 06 F6 | 	mov	_var01, ##@LR__5229
1a5a4     04 E4 05 F1 | 	add	objptr, #4
1a5a8     F2 00 62 FC | 	wrlong	_var01, objptr
1a5ac     76 01 00 FF 
1a5b0     39 00 06 F6 | 	mov	_var01, ##@LR__5230
1a5b4     04 E4 05 F1 | 	add	objptr, #4
1a5b8     F2 00 62 FC | 	wrlong	_var01, objptr
1a5bc     76 01 00 FF 
1a5c0     4A 00 06 F6 | 	mov	_var01, ##@LR__5231
1a5c4     04 E4 05 F1 | 	add	objptr, #4
1a5c8     F2 00 62 FC | 	wrlong	_var01, objptr
1a5cc     76 01 00 FF 
1a5d0     59 00 06 F6 | 	mov	_var01, ##@LR__5232
1a5d4     04 E4 05 F1 | 	add	objptr, #4
1a5d8     F2 00 62 FC | 	wrlong	_var01, objptr
1a5dc     76 01 00 FF 
1a5e0     74 00 06 F6 | 	mov	_var01, ##@LR__5233
1a5e4     04 E4 05 F1 | 	add	objptr, #4
1a5e8     F2 00 62 FC | 	wrlong	_var01, objptr
1a5ec     76 01 00 FF 
1a5f0     A8 00 06 F6 | 	mov	_var01, ##@LR__5234
1a5f4     04 E4 05 F1 | 	add	objptr, #4
1a5f8     F2 00 62 FC | 	wrlong	_var01, objptr
1a5fc     76 01 00 FF 
1a600     C1 00 06 F6 | 	mov	_var01, ##@LR__5235
1a604     04 E4 05 F1 | 	add	objptr, #4
1a608     F2 00 62 FC | 	wrlong	_var01, objptr
1a60c     76 01 00 FF 
1a610     DD 00 06 F6 | 	mov	_var01, ##@LR__5236
1a614     04 E4 05 F1 | 	add	objptr, #4
1a618     F2 00 62 FC | 	wrlong	_var01, objptr
1a61c     76 01 00 FF 
1a620     FB 00 06 F6 | 	mov	_var01, ##@LR__5237
1a624     04 E4 05 F1 | 	add	objptr, #4
1a628     F2 00 62 FC | 	wrlong	_var01, objptr
1a62c     76 01 00 FF 
1a630     14 01 06 F6 | 	mov	_var01, ##@LR__5238
1a634     04 E4 05 F1 | 	add	objptr, #4
1a638     F2 00 62 FC | 	wrlong	_var01, objptr
1a63c     76 01 00 FF 
1a640     33 01 06 F6 | 	mov	_var01, ##@LR__5239
1a644     04 E4 05 F1 | 	add	objptr, #4
1a648     F2 00 62 FC | 	wrlong	_var01, objptr
1a64c     76 01 00 FF 
1a650     42 01 06 F6 | 	mov	_var01, ##@LR__5240
1a654     04 E4 05 F1 | 	add	objptr, #4
1a658     F2 00 62 FC | 	wrlong	_var01, objptr
1a65c     76 01 00 FF 
1a660     70 01 06 F6 | 	mov	_var01, ##@LR__5241
1a664     04 E4 05 F1 | 	add	objptr, #4
1a668     F2 00 62 FC | 	wrlong	_var01, objptr
1a66c     76 01 00 FF 
1a670     7E 01 06 F6 | 	mov	_var01, ##@LR__5242
1a674     04 E4 05 F1 | 	add	objptr, #4
1a678     F2 00 62 FC | 	wrlong	_var01, objptr
1a67c     76 01 00 FF 
1a680     93 01 06 F6 | 	mov	_var01, ##@LR__5243
1a684     04 E4 05 F1 | 	add	objptr, #4
1a688     F2 00 62 FC | 	wrlong	_var01, objptr
1a68c     76 01 00 FF 
1a690     B7 01 06 F6 | 	mov	_var01, ##@LR__5244
1a694     04 E4 05 F1 | 	add	objptr, #4
1a698     F2 00 62 FC | 	wrlong	_var01, objptr
1a69c     76 01 00 FF 
1a6a0     CE 01 06 F6 | 	mov	_var01, ##@LR__5245
1a6a4     04 E4 05 F1 | 	add	objptr, #4
1a6a8     F2 00 62 FC | 	wrlong	_var01, objptr
1a6ac     76 01 00 FF 
1a6b0     E1 01 06 F6 | 	mov	_var01, ##@LR__5246
1a6b4     04 E4 05 F1 | 	add	objptr, #4
1a6b8     F2 00 62 FC | 	wrlong	_var01, objptr
1a6bc     76 01 00 FF 
1a6c0     F8 01 06 F6 | 	mov	_var01, ##@LR__5247
1a6c4     04 E4 05 F1 | 	add	objptr, #4
1a6c8     F2 00 62 FC | 	wrlong	_var01, objptr
1a6cc     65 00 00 FF 
1a6d0     40 E5 85 F1 | 	sub	objptr, ##52032
1a6d4                 | _init_error_strings_ret
1a6d4     2D 00 64 FD | 	ret
1a6d8                 | 
1a6d8                 | '         
1a6d8                 | ' sub printerror(err as integer)
1a6d8                 | _printerror
1a6d8     01 4A 05 F6 | 	mov	COUNT_, #1
1a6dc     A8 00 A0 FD | 	call	#pushregs_
1a6e0     09 1F 02 F6 | 	mov	local01, arg01
1a6e4     77 01 00 FF 
1a6e8     11 12 06 F6 | 	mov	arg01, ##@LR__5248
1a6ec     7C 31 B0 FD | 	call	#_hg010b_spin2_write
1a6f0     0F 13 02 F6 | 	mov	arg01, local01
1a6f4     E4 34 B0 FD | 	call	#_hg010b_spin2_inttostr
1a6f8     FD 12 02 F6 | 	mov	arg01, result1
1a6fc     6C 31 B0 FD | 	call	#_hg010b_spin2_write
1a700     77 01 00 FF 
1a704     18 12 06 F6 | 	mov	arg01, ##@LR__5249
1a708     60 31 B0 FD | 	call	#_hg010b_spin2_write
1a70c     02 1E 66 F0 | 	shl	local01, #2
1a710     65 00 00 FF 
1a714     7C E4 05 F1 | 	add	objptr, ##51836
1a718     F2 1E 02 F1 | 	add	local01, objptr
1a71c     0F 13 02 FB | 	rdlong	arg01, local01
1a720     65 00 00 FF 
1a724     7C E4 85 F1 | 	sub	objptr, ##51836
1a728                 | ' 
1a728                 | ' write(text)
1a728     40 31 B0 FD | 	call	#_hg010b_spin2_write
1a72c                 | ' crlf
1a72c     08 34 B0 FD | 	call	#_hg010b_spin2_crlf
1a730     A7 F0 03 F6 | 	mov	ptra, fp
1a734     B2 00 A0 FD | 	call	#popregs_
1a738                 | _printerror_ret
1a738     2D 00 64 FD | 	ret
1a73c                 | 
1a73c                 | ' 
1a73c                 | ' '' ------------------------------- Hardware start/stop/initialization 
1a73c                 | ' 
1a73c                 | ' sub startpsram
1a73c                 | _startpsram
1a73c     00 12 06 F6 | 	mov	arg01, #0
1a740     0A 14 C6 F9 | 	decod	arg02, #10
1a744     0B 16 06 F6 | 	mov	arg03, #11
1a748     07 18 06 F6 | 	mov	arg04, #7
1a74c     0B 00 00 FF 
1a750     CC E4 05 F1 | 	add	objptr, ##5836
1a754     90 35 B0 FD | 	call	#_psram_spin2_startx
1a758     4B 00 00 FF 
1a75c     3C E5 05 F1 | 	add	objptr, ##38716
1a760     F2 FA 61 FC | 	wrlong	result1, objptr
1a764                 | '     return $7FF00 + cog*12
1a764     0C E4 05 F1 | 	add	objptr, #12
1a768     FF 03 80 FF 
1a76c     F2 00 6A FC | 	wrlong	##524032, objptr
1a770     57 00 00 FF 
1a774     14 E4 85 F1 | 	sub	objptr, ##44564
1a778                 | _startpsram_ret
1a778     2D 00 64 FD | 	ret
1a77c                 | 
1a77c                 | ' 
1a77c                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1a77c                 | _startvideo
1a77c     01 4A 05 F6 | 	mov	COUNT_, #1
1a780     A8 00 A0 FD | 	call	#pushregs_
1a784     57 00 00 FF 
1a788     14 E4 05 F1 | 	add	objptr, ##44564
1a78c     F2 18 02 FB | 	rdlong	arg04, objptr
1a790     57 00 00 FF 
1a794     14 E4 85 F1 | 	sub	objptr, ##44564
1a798     0A 13 02 F6 | 	mov	arg01, arg02
1a79c     0C 15 02 F6 | 	mov	arg02, arg04
1a7a0     C0 18 B0 FD | 	call	#_hg010b_spin2_start
1a7a4     57 00 00 FF 
1a7a8     00 E4 05 F1 | 	add	objptr, ##44544
1a7ac     F2 FA 61 FC | 	wrlong	result1, objptr
1a7b0                 | ' 
1a7b0                 | ' videocog=v.start(pin,mbox)
1a7b0                 | ' 
1a7b0                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1a7b0     00 1E 06 F6 | 	mov	local01, #0
1a7b4     4B 00 00 FF 
1a7b8     34 E5 85 F1 | 	sub	objptr, ##38708
1a7bc                 | LR__2100
1a7bc     0F 13 02 F6 | 	mov	arg01, local01
1a7c0     00 28 00 FF 
1a7c4     00 14 06 F6 | 	mov	arg02, ##5242880
1a7c8     74 39 B0 FD | 	call	#_psram_spin2_setQos
1a7cc     01 1E 06 F1 | 	add	local01, #1
1a7d0     08 1E 56 F2 | 	cmps	local01, #8 wc
1a7d4     E4 FF 9F CD |  if_b	jmp	#LR__2100
1a7d8     4B 00 00 FF 
1a7dc     34 E5 05 F1 | 	add	objptr, ##38708
1a7e0     F2 12 02 FB | 	rdlong	arg01, objptr
1a7e4     7A 00 02 FF 
1a7e8     00 14 06 F6 | 	mov	arg02, ##67171328
1a7ec     4B 00 00 FF 
1a7f0     34 E5 85 F1 | 	sub	objptr, ##38708
1a7f4     48 39 B0 FD | 	call	#_psram_spin2_setQos
1a7f8     0B 00 00 FF 
1a7fc     CC E4 85 F1 | 	sub	objptr, ##5836
1a800                 | ' psram.setQoS(videocog, $0400f400) 
1a800                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1a800     F2 14 02 F6 | 	mov	arg02, objptr
1a804     00 18 04 FF 
1a808     00 14 46 F5 | 	or	arg02, ##137363456
1a80c     00 16 06 F6 | 	mov	arg03, #0
1a810     00 18 06 F6 | 	mov	arg04, #0
1a814     00 12 06 F6 | 	mov	arg01, #0
1a818     C4 4D B0 FD | 	call	#__system___basic_open
1a81c                 | ' return videocog
1a81c     57 00 00 FF 
1a820     00 E4 05 F1 | 	add	objptr, ##44544
1a824     F2 FA 01 FB | 	rdlong	result1, objptr
1a828     57 00 00 FF 
1a82c     00 E4 85 F1 | 	sub	objptr, ##44544
1a830     A7 F0 03 F6 | 	mov	ptra, fp
1a834     B2 00 A0 FD | 	call	#popregs_
1a838                 | _startvideo_ret
1a838     2D 00 64 FD | 	ret
1a83c                 | 
1a83c                 | ' 
1a83c                 | ' 
1a83c                 | ' 
1a83c                 | ' 
1a83c                 | ' '' ------------------------------- Convenient psram peek/poke
1a83c                 | ' 
1a83c                 | ' sub pslpoke(addr as ulong,value as ulong)
1a83c                 | _pslpoke
1a83c     00 4A 05 F6 | 	mov	COUNT_, #0
1a840     A8 00 A0 FD | 	call	#pushregs_
1a844     08 F0 07 F1 | 	add	ptra, #8
1a848     A7 12 62 FC | 	wrlong	arg01, fp
1a84c     04 4E 05 F1 | 	add	fp, #4
1a850     A7 14 62 FC | 	wrlong	arg02, fp
1a854     A7 12 02 F6 | 	mov	arg01, fp
1a858     04 4E 85 F1 | 	sub	fp, #4
1a85c     A7 14 02 FB | 	rdlong	arg02, fp
1a860     04 16 06 F6 | 	mov	arg03, #4
1a864     0B 00 00 FF 
1a868     CC E4 05 F1 | 	add	objptr, ##5836
1a86c     40 37 B0 FD | 	call	#_psram_spin2_write
1a870     0B 00 00 FF 
1a874     CC E4 85 F1 | 	sub	objptr, ##5836
1a878     A7 F0 03 F6 | 	mov	ptra, fp
1a87c     B2 00 A0 FD | 	call	#popregs_
1a880                 | _pslpoke_ret
1a880     2D 00 64 FD | 	ret
1a884                 | 
1a884                 | ' 
1a884                 | ' sub psdpoke(addr as ulong,value as ulong)
1a884                 | _psdpoke
1a884     00 4A 05 F6 | 	mov	COUNT_, #0
1a888     A8 00 A0 FD | 	call	#pushregs_
1a88c     08 F0 07 F1 | 	add	ptra, #8
1a890     A7 12 62 FC | 	wrlong	arg01, fp
1a894     04 4E 05 F1 | 	add	fp, #4
1a898     A7 14 62 FC | 	wrlong	arg02, fp
1a89c     A7 12 02 F6 | 	mov	arg01, fp
1a8a0     04 4E 85 F1 | 	sub	fp, #4
1a8a4     A7 14 02 FB | 	rdlong	arg02, fp
1a8a8     02 16 06 F6 | 	mov	arg03, #2
1a8ac     0B 00 00 FF 
1a8b0     CC E4 05 F1 | 	add	objptr, ##5836
1a8b4     F8 36 B0 FD | 	call	#_psram_spin2_write
1a8b8     0B 00 00 FF 
1a8bc     CC E4 85 F1 | 	sub	objptr, ##5836
1a8c0     A7 F0 03 F6 | 	mov	ptra, fp
1a8c4     B2 00 A0 FD | 	call	#popregs_
1a8c8                 | _psdpoke_ret
1a8c8     2D 00 64 FD | 	ret
1a8cc                 | 
1a8cc                 | ' 
1a8cc                 | ' sub pspoke(addr as ulong,value as ulong)
1a8cc                 | _pspoke
1a8cc     00 4A 05 F6 | 	mov	COUNT_, #0
1a8d0     A8 00 A0 FD | 	call	#pushregs_
1a8d4     08 F0 07 F1 | 	add	ptra, #8
1a8d8     A7 12 62 FC | 	wrlong	arg01, fp
1a8dc     04 4E 05 F1 | 	add	fp, #4
1a8e0     A7 14 62 FC | 	wrlong	arg02, fp
1a8e4     A7 12 02 F6 | 	mov	arg01, fp
1a8e8     04 4E 85 F1 | 	sub	fp, #4
1a8ec     A7 14 02 FB | 	rdlong	arg02, fp
1a8f0     01 16 06 F6 | 	mov	arg03, #1
1a8f4     0B 00 00 FF 
1a8f8     CC E4 05 F1 | 	add	objptr, ##5836
1a8fc     B0 36 B0 FD | 	call	#_psram_spin2_write
1a900     0B 00 00 FF 
1a904     CC E4 85 F1 | 	sub	objptr, ##5836
1a908     A7 F0 03 F6 | 	mov	ptra, fp
1a90c     B2 00 A0 FD | 	call	#popregs_
1a910                 | _pspoke_ret
1a910     2D 00 64 FD | 	ret
1a914                 | 
1a914                 | ' 
1a914                 | ' function pspeek(adr as ulong) as ubyte
1a914                 | _pspeek
1a914     00 4A 05 F6 | 	mov	COUNT_, #0
1a918     A8 00 A0 FD | 	call	#pushregs_
1a91c     0C F0 07 F1 | 	add	ptra, #12
1a920     04 4E 05 F1 | 	add	fp, #4
1a924     A7 12 62 FC | 	wrlong	arg01, fp
1a928     04 4E 05 F1 | 	add	fp, #4
1a92c     A7 12 02 F6 | 	mov	arg01, fp
1a930     04 4E 85 F1 | 	sub	fp, #4
1a934     A7 14 02 FB | 	rdlong	arg02, fp
1a938     04 4E 85 F1 | 	sub	fp, #4
1a93c     01 16 06 F6 | 	mov	arg03, #1
1a940     0B 00 00 FF 
1a944     CC E4 05 F1 | 	add	objptr, ##5836
1a948     C8 35 B0 FD | 	call	#_psram_spin2_read1
1a94c     0B 00 00 FF 
1a950     CC E4 85 F1 | 	sub	objptr, ##5836
1a954                 | ' psram.read1(varptr(res),adr,1)
1a954                 | ' return res
1a954     08 4E 05 F1 | 	add	fp, #8
1a958     A7 FA C1 FA | 	rdbyte	result1, fp
1a95c     08 4E 85 F1 | 	sub	fp, #8
1a960     A7 F0 03 F6 | 	mov	ptra, fp
1a964     B2 00 A0 FD | 	call	#popregs_
1a968                 | _pspeek_ret
1a968     2D 00 64 FD | 	ret
1a96c                 | 
1a96c                 | ' 
1a96c                 | ' function pslpeek(adr as ulong) as ulong
1a96c                 | _pslpeek
1a96c     00 4A 05 F6 | 	mov	COUNT_, #0
1a970     A8 00 A0 FD | 	call	#pushregs_
1a974     0C F0 07 F1 | 	add	ptra, #12
1a978     04 4E 05 F1 | 	add	fp, #4
1a97c     A7 12 62 FC | 	wrlong	arg01, fp
1a980     04 4E 05 F1 | 	add	fp, #4
1a984     A7 12 02 F6 | 	mov	arg01, fp
1a988     04 4E 85 F1 | 	sub	fp, #4
1a98c     A7 14 02 FB | 	rdlong	arg02, fp
1a990     04 4E 85 F1 | 	sub	fp, #4
1a994     04 16 06 F6 | 	mov	arg03, #4
1a998     0B 00 00 FF 
1a99c     CC E4 05 F1 | 	add	objptr, ##5836
1a9a0     70 35 B0 FD | 	call	#_psram_spin2_read1
1a9a4     0B 00 00 FF 
1a9a8     CC E4 85 F1 | 	sub	objptr, ##5836
1a9ac                 | ' psram.read1(varptr(res),adr,4)
1a9ac                 | ' return res
1a9ac     08 4E 05 F1 | 	add	fp, #8
1a9b0     A7 FA 01 FB | 	rdlong	result1, fp
1a9b4     08 4E 85 F1 | 	sub	fp, #8
1a9b8     A7 F0 03 F6 | 	mov	ptra, fp
1a9bc     B2 00 A0 FD | 	call	#popregs_
1a9c0                 | _pslpeek_ret
1a9c0     2D 00 64 FD | 	ret
1a9c4                 | 
1a9c4                 | ' 
1a9c4                 | ' function psdpeek(adr as ulong) as ulong
1a9c4                 | _psdpeek
1a9c4     00 4A 05 F6 | 	mov	COUNT_, #0
1a9c8     A8 00 A0 FD | 	call	#pushregs_
1a9cc     0C F0 07 F1 | 	add	ptra, #12
1a9d0     04 4E 05 F1 | 	add	fp, #4
1a9d4     A7 12 62 FC | 	wrlong	arg01, fp
1a9d8     04 4E 05 F1 | 	add	fp, #4
1a9dc     A7 12 02 F6 | 	mov	arg01, fp
1a9e0     04 4E 85 F1 | 	sub	fp, #4
1a9e4     A7 14 02 FB | 	rdlong	arg02, fp
1a9e8     04 4E 85 F1 | 	sub	fp, #4
1a9ec     02 16 06 F6 | 	mov	arg03, #2
1a9f0     0B 00 00 FF 
1a9f4     CC E4 05 F1 | 	add	objptr, ##5836
1a9f8     18 35 B0 FD | 	call	#_psram_spin2_read1
1a9fc     0B 00 00 FF 
1aa00     CC E4 85 F1 | 	sub	objptr, ##5836
1aa04                 | ' psram.read1(varptr(res),adr,2)
1aa04                 | ' return res
1aa04     08 4E 05 F1 | 	add	fp, #8
1aa08     A7 FA E1 FA | 	rdword	result1, fp
1aa0c     08 4E 85 F1 | 	sub	fp, #8
1aa10     A7 F0 03 F6 | 	mov	ptra, fp
1aa14     B2 00 A0 FD | 	call	#popregs_
1aa18                 | _psdpeek_ret
1aa18     2D 00 64 FD | 	ret
1aa1c                 | 
1aa1c                 | ' 
1aa1c                 | ' '' ------------------------------- USB keyboard scan to char translator
1aa1c                 | ' 
1aa1c                 | ' function scantochar(key)
1aa1c                 | _scantochar
1aa1c                 | ' 
1aa1c                 | ' select case (key shr 8) and 255
1aa1c     09 01 02 F6 | 	mov	_var01, arg01
1aa20     08 00 C6 F0 | 	sar	_var01, #8
1aa24     FF 00 0E F5 | 	and	_var01, #255 wz
1aa28     24 00 90 AD |  if_e	jmp	#LR__2110
1aa2c     02 00 0E F2 | 	cmp	_var01, #2 wz
1aa30     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1aa34     30 00 90 AD |  if_e	jmp	#LR__2111
1aa38     40 00 0E F2 | 	cmp	_var01, #64 wz
1aa3c     44 00 90 AD |  if_e	jmp	#LR__2112
1aa40     42 00 0E F2 | 	cmp	_var01, #66 wz
1aa44     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1aa48     70 00 90 5D |  if_ne	jmp	#LR__2114
1aa4c     50 00 90 FD | 	jmp	#LR__2113
1aa50                 | LR__2110
1aa50     09 FB 01 F6 | 	mov	result1, arg01
1aa54     7F FA 05 F5 | 	and	result1, #127
1aa58     02 FA 65 F0 | 	shl	result1, #2
1aa5c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1aa60     FD FA C1 FA | 	rdbyte	result1, result1
1aa64     54 00 90 FD | 	jmp	#_scantochar_ret
1aa68                 | LR__2111
1aa68     09 FB 01 F6 | 	mov	result1, arg01
1aa6c     7F FA 05 F5 | 	and	result1, #127
1aa70     02 FA 65 F0 | 	shl	result1, #2
1aa74     01 FA 05 F1 | 	add	result1, #1
1aa78     F5 FA 01 F1 | 	add	result1, ptr__dat__
1aa7c     FD FA C1 FA | 	rdbyte	result1, result1
1aa80     38 00 90 FD | 	jmp	#_scantochar_ret
1aa84                 | LR__2112
1aa84     09 FB 01 F6 | 	mov	result1, arg01
1aa88     7F FA 05 F5 | 	and	result1, #127
1aa8c     02 FA 65 F0 | 	shl	result1, #2
1aa90     02 FA 05 F1 | 	add	result1, #2
1aa94     F5 FA 01 F1 | 	add	result1, ptr__dat__
1aa98     FD FA C1 FA | 	rdbyte	result1, result1
1aa9c     1C 00 90 FD | 	jmp	#_scantochar_ret
1aaa0                 | LR__2113
1aaa0     09 FB 01 F6 | 	mov	result1, arg01
1aaa4     7F FA 05 F5 | 	and	result1, #127
1aaa8     02 FA 65 F0 | 	shl	result1, #2
1aaac     03 FA 05 F1 | 	add	result1, #3
1aab0     F5 FA 01 F1 | 	add	result1, ptr__dat__
1aab4     FD FA C1 FA | 	rdbyte	result1, result1
1aab8     00 00 90 FD | 	jmp	#_scantochar_ret
1aabc                 | LR__2114
1aabc                 | _scantochar_ret
1aabc     2D 00 64 FD | 	ret
1aac0                 | 
1aac0                 | _program
1aac0     13 4A 05 F6 | 	mov	COUNT_, #19
1aac4     A8 00 A0 FD | 	call	#pushregs_
1aac8     70 FC BF FD | 	call	#_startpsram
1aacc     40 12 06 F6 | 	mov	arg01, #64
1aad0     00 14 06 F6 | 	mov	arg02, #0
1aad4     00 16 06 F6 | 	mov	arg03, #0
1aad8     A0 FC BF FD | 	call	#_startvideo
1aadc     00 12 06 F6 | 	mov	arg01, #0
1aae0     00 14 06 F6 | 	mov	arg02, #0
1aae4     00 16 06 F6 | 	mov	arg03, #0
1aae8     0B 00 00 FF 
1aaec     CC E4 05 F1 | 	add	objptr, ##5836
1aaf0     FC 39 B0 FD | 	call	#_audio096_spin2_start
1aaf4     FE 1C 02 F6 | 	mov	arg06, result2
1aaf8     4B 00 00 FF 
1aafc     30 E5 05 F1 | 	add	objptr, ##38704
1ab00     F2 FA 61 FC | 	wrlong	result1, objptr
1ab04     14 E4 05 F1 | 	add	objptr, #20
1ab08     F2 1C 62 FC | 	wrlong	arg06, objptr
1ab0c     57 00 00 FF 
1ab10     10 E4 85 F1 | 	sub	objptr, ##44560
1ab14     32 12 06 F6 | 	mov	arg01, #50
1ab18     10 43 B0 FD | 	call	#__system___waitms
1ab1c     57 00 00 FF 
1ab20     10 E4 05 F1 | 	add	objptr, ##44560
1ab24     F2 12 02 FB | 	rdlong	arg01, objptr
1ab28     57 00 00 FF 
1ab2c     10 E4 85 F1 | 	sub	objptr, ##44560
1ab30     14 12 06 F1 | 	add	arg01, #20
1ab34     20 00 80 FF 
1ab38     09 01 58 FC | 	wrword	##16384, arg01
1ab3c     08 37 B0 FD | 	call	#_usbnew_spin2_start
1ab40     57 00 00 FF 
1ab44     04 E4 05 F1 | 	add	objptr, ##44548
1ab48     F2 FA 61 FC | 	wrlong	result1, objptr
1ab4c                 | '   mouse_limits[0] := xlim
1ab4c     0F 00 00 FF 
1ab50     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1ab54     01 00 80 FF 
1ab58     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1ab5c                 | '   mouse_limits[1] := ylim
1ab5c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1ab60     01 00 80 FF 
1ab64     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1ab68     56 00 00 FF 
1ab6c     F3 E4 85 F1 | 	sub	objptr, ##44275
1ab70     F2 12 02 F6 | 	mov	arg01, objptr
1ab74     11 E5 85 F1 | 	sub	objptr, #273
1ab78     C4 12 06 F1 | 	add	arg01, #196
1ab7c                 | '   mouse_outptr := ptr
1ab7c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1ab80     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1ab84     0F 00 00 FF 
1ab88     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1ab8c     0E 00 00 FF 
1ab90     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
1ab94     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1ab98     0E 00 00 FF 
1ab9c     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
1aba0     10 12 06 F6 | 	mov	arg01, #16
1aba4     54 1B B0 FD | 	call	#_hg010b_spin2_setspriteptr
1aba8     10 12 06 F6 | 	mov	arg01, #16
1abac     20 14 06 F6 | 	mov	arg02, #32
1abb0     20 16 06 F6 | 	mov	arg03, #32
1abb4     D4 1B B0 FD | 	call	#_hg010b_spin2_setspritesize
1abb8     09 12 C6 F9 | 	decod	arg01, #9
1abbc     2C 15 06 F6 | 	mov	arg02, #300
1abc0     DC 37 B0 FD | 	call	#_usbnew_spin2_mouse_move
1abc4     F2 1C 02 F6 | 	mov	arg06, objptr
1abc8     78 00 00 FF 
1abcc     F8 E4 05 F1 | 	add	objptr, ##61688
1abd0     F2 1A 02 F6 | 	mov	arg05, objptr
1abd4     0D 1D 62 FC | 	wrlong	arg06, arg05
1abd8     04 1A 06 F1 | 	add	arg05, #4
1abdc     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
1abe0     EF 14 02 F6 | 	mov	arg02, entryptr__
1abe4     F2 1E 02 F6 | 	mov	local01, objptr
1abe8     1E FA 05 F6 | 	mov	result1, #30
1abec     28 1E 62 FD | 	setq	local01
1abf0     0A FB F1 FC | 	coginit	result1, arg02 wc
1abf4     01 FA 65 C6 |  if_b	neg	result1, #1
1abf8     04 E4 85 F1 | 	sub	objptr, #4
1abfc     F2 FA 61 FC | 	wrlong	result1, objptr
1ac00     01 00 00 FF 
1ac04     90 E4 05 F1 | 	add	objptr, ##656
1ac08     F2 00 68 FC | 	wrlong	#0, objptr
1ac0c     22 00 00 FF 
1ac10     50 E5 85 F1 | 	sub	objptr, ##17744
1ac14     F2 04 68 FC | 	wrlong	#2, objptr
1ac18     04 E4 05 F1 | 	add	objptr, #4
1ac1c     F2 26 69 FC | 	wrlong	#147, objptr
1ac20     04 E4 05 F1 | 	add	objptr, #4
1ac24     F2 34 69 FC | 	wrlong	#154, objptr
1ac28     04 E4 05 F1 | 	add	objptr, #4
1ac2c     F2 08 68 FC | 	wrlong	#4, objptr
1ac30     04 E4 85 F1 | 	sub	objptr, #4
1ac34     F2 1C 02 FB | 	rdlong	arg06, objptr
1ac38     14 E4 85 F1 | 	sub	objptr, #20
1ac3c     F2 1C 62 FC | 	wrlong	arg06, objptr
1ac40     04 E4 05 F1 | 	add	objptr, #4
1ac44     F2 00 68 FC | 	wrlong	#0, objptr
1ac48     04 E4 05 F1 | 	add	objptr, #4
1ac4c     F2 00 68 FC | 	wrlong	#0, objptr
1ac50     21 00 00 FF 
1ac54     C0 E4 05 F1 | 	add	objptr, ##17088
1ac58     F2 02 68 FC | 	wrlong	#1, objptr
1ac5c     01 00 00 FF 
1ac60     9C E4 05 F1 | 	add	objptr, ##668
1ac64     F2 00 68 FC | 	wrlong	#0, objptr
1ac68     01 00 00 FF 
1ac6c     00 EA 05 F1 | 	add	ptr__dat__, ##512
1ac70     08 E4 05 F1 | 	add	objptr, #8
1ac74     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1ac78     04 E4 85 F1 | 	sub	objptr, #4
1ac7c     03 00 80 FF 
1ac80     F2 3C 69 FC | 	wrlong	##1694, objptr
1ac84     14 00 00 FF 
1ac88     2C E5 85 F1 | 	sub	objptr, ##10540
1ac8c     F2 18 68 FC | 	wrlong	#12, objptr
1ac90     65 00 00 FF 
1ac94     64 E4 85 F1 | 	sub	objptr, ##51812
1ac98     01 00 00 FF 
1ac9c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1aca0     84 DD BF FD | 	call	#_init_commands
1aca4     00 F7 BF FD | 	call	#_init_error_strings
1aca8     9C EE BF FD | 	call	#_init_audio
1acac     E8 38 BF FD | 	call	#_do_new
1acb0     57 00 00 FF 
1acb4     3C E4 05 F1 | 	add	objptr, ##44604
1acb8     F2 12 02 FB | 	rdlong	arg01, objptr
1acbc     04 E4 85 F1 | 	sub	objptr, #4
1acc0     F2 14 02 FB | 	rdlong	arg02, objptr
1acc4     57 00 00 FF 
1acc8     38 E4 85 F1 | 	sub	objptr, ##44600
1accc     DC 27 B0 FD | 	call	#_hg010b_spin2_cls
1acd0     57 00 00 FF 
1acd4     40 E4 05 F1 | 	add	objptr, ##44608
1acd8     F2 12 02 FB | 	rdlong	arg01, objptr
1acdc     57 00 00 FF 
1ace0     40 E4 85 F1 | 	sub	objptr, ##44608
1ace4     74 26 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1ace8                 | ' 
1ace8                 | ' leading_spaces:=amount
1ace8     01 00 00 FF 
1acec     B6 E4 05 F1 | 	add	objptr, ##694
1acf0     F2 04 68 FC | 	wrlong	#2, objptr
1acf4     01 00 00 FF 
1acf8     B6 E4 85 F1 | 	sub	objptr, ##694
1acfc     77 01 00 FF 
1ad00     1B 20 06 F6 | 	mov	local02, ##@LR__5250
1ad04     3D 12 06 F6 | 	mov	arg01, #61
1ad08     3C 14 06 F6 | 	mov	arg02, #60
1ad0c     3B 16 06 F6 | 	mov	arg03, #59
1ad10     3A 18 06 F6 | 	mov	arg04, #58
1ad14     50 88 B0 FD | 	call	#__system___vfs_open_sdcardx
1ad18     FD 14 02 F6 | 	mov	arg02, result1
1ad1c     10 13 02 F6 | 	mov	arg01, local02
1ad20     E0 41 B0 FD | 	call	#__system___mount
1ad24     77 01 00 FF 
1ad28     1F 12 06 F6 | 	mov	arg01, ##@LR__5251
1ad2c     94 44 B0 FD | 	call	#__system___chdir
1ad30     77 01 00 FF 
1ad34     27 20 06 F6 | 	mov	local02, ##@LR__5252
1ad38     72 00 00 FF 
1ad3c     98 E4 05 F1 | 	add	objptr, ##58520
1ad40     F2 20 62 FC | 	wrlong	local02, objptr
1ad44     1B 00 00 FF 
1ad48     64 E4 85 F1 | 	sub	objptr, ##13924
1ad4c     F2 12 02 FB | 	rdlong	arg01, objptr
1ad50     57 00 00 FF 
1ad54     34 E4 85 F1 | 	sub	objptr, ##44596
1ad58     01 12 66 F0 | 	shl	arg01, #1
1ad5c     01 14 06 F6 | 	mov	arg02, #1
1ad60     38 26 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1ad64                 | ' 
1ad64                 | ' init_commands
1ad64                 | ' init_error_strings
1ad64                 | ' init_audio
1ad64                 | ' do_new
1ad64                 | ' 
1ad64                 | ' 
1ad64                 | ' cls(ink, paper)
1ad64                 | ' v.setfontfamily(font) 				' use ST Mono font
1ad64                 | ' v.setleadingspaces(2)
1ad64                 | ' mount "/sd", _vfs_open_sdcard()
1ad64                 | ' chdir "/sd/bas"
1ad64                 | ' 
1ad64                 | ' currentdir$="/sd/bas"
1ad64                 | ' 
1ad64                 | ' position 2*editor_spaces,1 : print ver$
1ad64     00 12 06 F6 | 	mov	arg01, #0
1ad68     64 97 B0 FD | 	call	#__system___getiolock_0484
1ad6c     FD 12 02 F6 | 	mov	arg01, result1
1ad70     C4 3D B0 FD | 	call	#__system___lockmem
1ad74     18 00 00 FF 
1ad78     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1ad7c     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1ad80     18 00 00 FF 
1ad84     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1ad88     00 12 06 F6 | 	mov	arg01, #0
1ad8c     00 16 06 F6 | 	mov	arg03, #0
1ad90     AC 4A B0 FD | 	call	#__system___basic_print_string
1ad94     00 12 06 F6 | 	mov	arg01, #0
1ad98     0A 14 06 F6 | 	mov	arg02, #10
1ad9c     00 16 06 F6 | 	mov	arg03, #0
1ada0     44 4A B0 FD | 	call	#__system___basic_print_char
1ada4     00 12 06 F6 | 	mov	arg01, #0
1ada8     24 97 B0 FD | 	call	#__system___getiolock_0484
1adac     FD 00 68 FC | 	wrlong	#0, result1
1adb0     79 00 00 FF 
1adb4     88 E5 05 F1 | 	add	objptr, ##62344
1adb8     F2 12 02 FB | 	rdlong	arg01, objptr
1adbc     16 00 00 FF 
1adc0     2C E5 85 F1 | 	sub	objptr, ##11564
1adc4     F2 20 02 FB | 	rdlong	local02, objptr
1adc8     63 00 00 FF 
1adcc     5C E4 85 F1 | 	sub	objptr, ##50780
1add0     10 13 82 F1 | 	sub	arg01, local02
1add4     00 14 06 F6 | 	mov	arg02, #0
1add8     0A 16 06 F6 | 	mov	arg03, #10
1addc     F4 5F B0 FD | 	call	#__system__Number_S
1ade0     FD 12 02 F6 | 	mov	arg01, result1
1ade4     77 01 00 FF 
1ade8     2F 14 06 F6 | 	mov	arg02, ##@LR__5253
1adec     A4 3D B0 FD | 	call	#__system___string_concat
1adf0     FD 20 02 F6 | 	mov	local02, result1
1adf4     78 00 00 FF 
1adf8     EC E4 05 F1 | 	add	objptr, ##61676
1adfc     F2 20 62 FC | 	wrlong	local02, objptr
1ae00     78 00 00 FF 
1ae04     EC E4 85 F1 | 	sub	objptr, ##61676
1ae08                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1ae08     00 12 06 F6 | 	mov	arg01, #0
1ae0c     C0 96 B0 FD | 	call	#__system___getiolock_0484
1ae10     FD 12 02 F6 | 	mov	arg01, result1
1ae14     20 3D B0 FD | 	call	#__system___lockmem
1ae18     78 00 00 FF 
1ae1c     EC E4 05 F1 | 	add	objptr, ##61676
1ae20     F2 14 02 FB | 	rdlong	arg02, objptr
1ae24     78 00 00 FF 
1ae28     EC E4 85 F1 | 	sub	objptr, ##61676
1ae2c     00 12 06 F6 | 	mov	arg01, #0
1ae30     00 16 06 F6 | 	mov	arg03, #0
1ae34     08 4A B0 FD | 	call	#__system___basic_print_string
1ae38     00 12 06 F6 | 	mov	arg01, #0
1ae3c     0A 14 06 F6 | 	mov	arg02, #10
1ae40     00 16 06 F6 | 	mov	arg03, #0
1ae44     A0 49 B0 FD | 	call	#__system___basic_print_char
1ae48     00 12 06 F6 | 	mov	arg01, #0
1ae4c     80 96 B0 FD | 	call	#__system___getiolock_0484
1ae50     FD 00 68 FC | 	wrlong	#0, result1
1ae54     57 00 00 FF 
1ae58     34 E4 05 F1 | 	add	objptr, ##44596
1ae5c     F2 12 02 FB | 	rdlong	arg01, objptr
1ae60     57 00 00 FF 
1ae64     34 E4 85 F1 | 	sub	objptr, ##44596
1ae68     01 12 66 F0 | 	shl	arg01, #1
1ae6c     04 14 06 F6 | 	mov	arg02, #4
1ae70     28 25 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1ae74                 | ' position 2*editor_spaces,4 : print "Ready"
1ae74     00 12 06 F6 | 	mov	arg01, #0
1ae78     54 96 B0 FD | 	call	#__system___getiolock_0484
1ae7c     FD 12 02 F6 | 	mov	arg01, result1
1ae80     B4 3C B0 FD | 	call	#__system___lockmem
1ae84     77 01 00 FF 
1ae88     41 14 06 F6 | 	mov	arg02, ##@LR__5254
1ae8c     00 12 06 F6 | 	mov	arg01, #0
1ae90     00 16 06 F6 | 	mov	arg03, #0
1ae94     A8 49 B0 FD | 	call	#__system___basic_print_string
1ae98     FD 22 02 F6 | 	mov	local03, result1
1ae9c     00 12 06 F6 | 	mov	arg01, #0
1aea0     0A 14 06 F6 | 	mov	arg02, #10
1aea4     00 16 06 F6 | 	mov	arg03, #0
1aea8     3C 49 B0 FD | 	call	#__system___basic_print_char
1aeac     01 24 06 F6 | 	mov	local04, #1
1aeb0     00 12 06 F6 | 	mov	arg01, #0
1aeb4     18 96 B0 FD | 	call	#__system___getiolock_0484
1aeb8     FD 00 68 FC | 	wrlong	#0, result1
1aebc     00 26 06 F6 | 	mov	local05, #0
1aec0     00 14 06 F6 | 	mov	arg02, #0
1aec4     01 14 D6 F7 | 	test	arg02, #1 wc
1aec8     5A 4C 64 FD | 	drvc	#38
1aecc     01 14 D6 F7 | 	test	arg02, #1 wc
1aed0     5A 4E 64 FD | 	drvc	#39
1aed4     77 01 00 FF 
1aed8     47 20 06 F6 | 	mov	local02, ##@LR__5255
1aedc     79 00 00 FF 
1aee0     B4 E5 05 F1 | 	add	objptr, ##62388
1aee4     F2 20 62 FC | 	wrlong	local02, objptr
1aee8     04 E4 05 F1 | 	add	objptr, #4
1aeec     FF FF FF FF 
1aef0     F2 FE 6B FC | 	wrlong	##-1, objptr
1aef4     79 00 00 FF 
1aef8     B8 E5 85 F1 | 	sub	objptr, ##62392
1aefc                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
1aefc                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1aefc                 | ' 
1aefc                 | ' loadname="noname.bas"
1aefc                 | ' do_insert=-1
1aefc                 | ' 
1aefc                 | ' 
1aefc                 | ' '-------------------------------------------------------------------------------------------------------- 
1aefc                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1aefc                 | ' '--------------------------------------------------------------------------------------------------------
1aefc                 | ' 
1aefc                 | ' do
1aefc                 | LR__2120
1aefc     01 12 06 F6 | 	mov	arg01, #1
1af00     38 25 B0 FD | 	call	#_hg010b_spin2_waitvbl
1af04     07 12 06 F6 | 	mov	arg01, #7
1af08     0B 00 00 FF 
1af0c     CC E4 05 F1 | 	add	objptr, ##5836
1af10     24 39 B0 FD | 	call	#_audio096_spin2_stop
1af14     0B 00 00 FF 
1af18     CC E4 85 F1 | 	sub	objptr, ##5836
1af1c     20 34 B0 FD | 	call	#_usbnew_spin2_get_key
1af20     65 00 00 FF 
1af24     74 E4 05 F1 | 	add	objptr, ##51828
1af28     F2 FA 61 FC | 	wrlong	result1, objptr
1af2c                 | '   return hkbd_led_rep
1af2c     13 00 00 FF 
1af30     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
1af34     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
1af38     13 00 00 FF 
1af3c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
1af40     14 00 00 FF 
1af44     48 E5 05 F1 | 	add	objptr, ##10568
1af48     F2 FA 61 FC | 	wrlong	result1, objptr
1af4c                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
1af4c     14 00 00 FF 
1af50     48 E5 85 F1 | 	sub	objptr, ##10568
1af54     F2 20 02 FB | 	rdlong	local02, objptr
1af58     65 00 00 FF 
1af5c     74 E4 85 F1 | 	sub	objptr, ##51828
1af60     01 20 16 F2 | 	cmp	local02, #1 wc
1af64     BC 00 90 CD |  if_b	jmp	#LR__2121
1af68     65 00 00 FF 
1af6c     74 E4 05 F1 | 	add	objptr, ##51828
1af70     F2 24 02 FB | 	rdlong	local04, objptr
1af74     65 00 00 FF 
1af78     74 E4 85 F1 | 	sub	objptr, ##51828
1af7c     12 23 02 F6 | 	mov	local03, local04
1af80     04 22 16 F2 | 	cmp	local03, #4 wc
1af84     9C 00 90 3D |  if_ae	jmp	#LR__2121
1af88     78 00 00 FF 
1af8c     F0 E4 05 F1 | 	add	objptr, ##61680
1af90     F2 1E 02 FB | 	rdlong	local01, objptr
1af94     78 00 00 FF 
1af98     F0 E4 85 F1 | 	sub	objptr, ##61680
1af9c     0F 27 02 F6 | 	mov	local05, local01
1afa0     01 26 0E F2 | 	cmp	local05, #1 wz
1afa4     7C 00 90 5D |  if_ne	jmp	#LR__2121
1afa8     04 00 00 FF 
1afac     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1afb0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1afb4     04 00 00 FF 
1afb8     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1afbc     56 00 00 FF 
1afc0     44 22 06 F6 | 	mov	local03, ##44100
1afc4     0C 24 C6 F9 | 	decod	local04, #12
1afc8     00 26 06 F6 | 	mov	local05, #0
1afcc     03 00 00 FF 
1afd0     DE 1E 06 F6 | 	mov	local01, ##1758
1afd4     07 12 06 F6 | 	mov	arg01, #7
1afd8     56 00 00 FF 
1afdc     44 16 06 F6 | 	mov	arg03, ##44100
1afe0     0C 18 C6 F9 | 	decod	arg04, #12
1afe4     00 1A 06 F6 | 	mov	arg05, #0
1afe8     03 00 00 FF 
1afec     DE 1C 06 F6 | 	mov	arg06, ##1758
1aff0     0B 00 00 FF 
1aff4     CC E4 05 F1 | 	add	objptr, ##5836
1aff8     CC 36 B0 FD | 	call	#_audio096_spin2_play
1affc     0B 00 00 FF 
1b000     CC E4 85 F1 | 	sub	objptr, ##5836
1b004     0A 12 06 F6 | 	mov	arg01, #10
1b008     20 3E B0 FD | 	call	#__system___waitms
1b00c     07 12 06 F6 | 	mov	arg01, #7
1b010     0B 00 00 FF 
1b014     CC E4 05 F1 | 	add	objptr, ##5836
1b018     1C 38 B0 FD | 	call	#_audio096_spin2_stop
1b01c     0B 00 00 FF 
1b020     CC E4 85 F1 | 	sub	objptr, ##5836
1b024                 | LR__2121
1b024                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
1b024     65 00 00 FF 
1b028     74 E4 05 F1 | 	add	objptr, ##51828
1b02c     F2 20 02 FB | 	rdlong	local02, objptr
1b030     65 00 00 FF 
1b034     74 E4 85 F1 | 	sub	objptr, ##51828
1b038     04 20 16 F2 | 	cmp	local02, #4 wc
1b03c     80 00 90 CD |  if_b	jmp	#LR__2122
1b040     65 00 00 FF 
1b044     74 E4 05 F1 | 	add	objptr, ##51828
1b048     F2 24 02 FB | 	rdlong	local04, objptr
1b04c     65 00 00 FF 
1b050     74 E4 85 F1 | 	sub	objptr, ##51828
1b054     12 23 02 F6 | 	mov	local03, local04
1b058     00 00 40 FF 
1b05c     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
1b060     65 00 00 CF 
1b064     74 E4 05 C1 |  if_b	add	objptr, ##51828
1b068     F2 1E 02 CB |  if_b	rdlong	local01, objptr
1b06c     65 00 00 CF 
1b070     74 E4 85 C1 |  if_b	sub	objptr, ##51828
1b074     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
1b078     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
1b07c     40 00 90 3D |  if_ae	jmp	#LR__2122
1b080     65 00 00 FF 
1b084     74 E4 05 F1 | 	add	objptr, ##51828
1b088     F2 20 02 FB | 	rdlong	local02, objptr
1b08c     04 E4 05 F1 | 	add	objptr, #4
1b090     F2 20 62 FC | 	wrlong	local02, objptr
1b094     14 00 00 FF 
1b098     48 E5 05 F1 | 	add	objptr, ##10568
1b09c     F2 02 68 FC | 	wrlong	#1, objptr
1b0a0     14 00 00 FF 
1b0a4     48 E5 85 F1 | 	sub	objptr, ##10568
1b0a8     F2 20 02 FB | 	rdlong	local02, objptr
1b0ac     14 00 00 FF 
1b0b0     4C E5 05 F1 | 	add	objptr, ##10572
1b0b4     F2 20 62 FC | 	wrlong	local02, objptr
1b0b8     79 00 00 FF 
1b0bc     C4 E5 85 F1 | 	sub	objptr, ##62404
1b0c0                 | LR__2122
1b0c0                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
1b0c0     65 00 00 FF 
1b0c4     74 E4 05 F1 | 	add	objptr, ##51828
1b0c8     F2 20 02 FB | 	rdlong	local02, objptr
1b0cc     65 00 00 FF 
1b0d0     74 E4 85 F1 | 	sub	objptr, ##51828
1b0d4     00 00 40 FF 
1b0d8     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
1b0dc     79 00 00 3F 
1b0e0     C8 E5 05 31 |  if_ae	add	objptr, ##62408
1b0e4     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1b0e8     08 E4 85 31 |  if_ae	sub	objptr, #8
1b0ec     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1b0f0     79 00 00 3F 
1b0f4     C0 E5 85 31 |  if_ae	sub	objptr, ##62400
1b0f8                 | ' if key=0 andalso rpt=1 then rptcnt+=1
1b0f8     65 00 00 FF 
1b0fc     74 E4 05 F1 | 	add	objptr, ##51828
1b100     F2 20 0A FB | 	rdlong	local02, objptr wz
1b104     65 00 00 FF 
1b108     74 E4 85 F1 | 	sub	objptr, ##51828
1b10c     79 00 00 AF 
1b110     C0 E5 05 A1 |  if_e	add	objptr, ##62400
1b114     F2 24 02 AB |  if_e	rdlong	local04, objptr
1b118     79 00 00 AF 
1b11c     C0 E5 85 A1 |  if_e	sub	objptr, ##62400
1b120     12 23 02 A6 |  if_e	mov	local03, local04
1b124     01 22 0E A2 |  if_e	cmp	local03, #1 wz
1b128     79 00 00 AF 
1b12c     C8 E5 05 A1 |  if_e	add	objptr, ##62408
1b130     F2 20 02 AB |  if_e	rdlong	local02, objptr
1b134     01 20 06 A1 |  if_e	add	local02, #1
1b138     F2 20 62 AC |  if_e	wrlong	local02, objptr
1b13c     79 00 00 AF 
1b140     C8 E5 85 A1 |  if_e	sub	objptr, ##62408
1b144                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
1b144     65 00 00 FF 
1b148     74 E4 05 F1 | 	add	objptr, ##51828
1b14c     F2 20 02 FB | 	rdlong	local02, objptr
1b150     65 00 00 FF 
1b154     74 E4 85 F1 | 	sub	objptr, ##51828
1b158     00 00 40 FF 
1b15c     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
1b160     44 00 90 3D |  if_ae	jmp	#LR__2124
1b164     79 00 00 FF 
1b168     C8 E5 05 F1 | 	add	objptr, ##62408
1b16c     F2 20 02 FB | 	rdlong	local02, objptr
1b170     79 00 00 FF 
1b174     C8 E5 85 F1 | 	sub	objptr, ##62408
1b178     19 20 0E F2 | 	cmp	local02, #25 wz
1b17c     28 00 90 5D |  if_ne	jmp	#LR__2123
1b180     65 00 00 FF 
1b184     78 E4 05 F1 | 	add	objptr, ##51832
1b188     F2 20 02 FB | 	rdlong	local02, objptr
1b18c     14 00 00 FF 
1b190     4C E5 05 F1 | 	add	objptr, ##10572
1b194     F2 20 62 FC | 	wrlong	local02, objptr
1b198     04 E4 05 F1 | 	add	objptr, #4
1b19c     F2 2A 68 FC | 	wrlong	#21, objptr
1b1a0     79 00 00 FF 
1b1a4     C8 E5 85 F1 | 	sub	objptr, ##62408
1b1a8                 | LR__2123
1b1a8                 | LR__2124
1b1a8                 | ' 
1b1a8                 | ' 
1b1a8                 | ' if key3<>0 then
1b1a8     79 00 00 FF 
1b1ac     C4 E5 05 F1 | 	add	objptr, ##62404
1b1b0     F2 28 0A FB | 	rdlong	local06, objptr wz
1b1b4     79 00 00 FF 
1b1b8     C4 E5 85 F1 | 	sub	objptr, ##62404
1b1bc     3C FD 9F AD |  if_e	jmp	#LR__2120
1b1c0                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
1b1c0     78 00 00 FF 
1b1c4     F0 E4 05 F1 | 	add	objptr, ##61680
1b1c8     F2 20 02 FB | 	rdlong	local02, objptr
1b1cc     78 00 00 FF 
1b1d0     F0 E4 85 F1 | 	sub	objptr, ##61680
1b1d4     01 20 0E F2 | 	cmp	local02, #1 wz
1b1d8     50 00 90 5D |  if_ne	jmp	#LR__2125
1b1dc     79 00 00 FF 
1b1e0     94 E5 05 F1 | 	add	objptr, ##62356
1b1e4     F2 14 02 FB | 	rdlong	arg02, objptr
1b1e8     56 00 00 FF 
1b1ec     44 22 06 F6 | 	mov	local03, ##44100
1b1f0     0C 24 C6 F9 | 	decod	local04, #12
1b1f4     04 E4 85 F1 | 	sub	objptr, #4
1b1f8     F2 26 02 FB | 	rdlong	local05, objptr
1b1fc     01 1E 66 F6 | 	neg	local01, #1
1b200     07 12 06 F6 | 	mov	arg01, #7
1b204     56 00 00 FF 
1b208     44 16 06 F6 | 	mov	arg03, ##44100
1b20c     0C 18 C6 F9 | 	decod	arg04, #12
1b210     13 1B 02 F6 | 	mov	arg05, local05
1b214     01 1C 66 F6 | 	neg	arg06, #1
1b218     6E 00 00 FF 
1b21c     C4 E4 85 F1 | 	sub	objptr, ##56516
1b220     A4 34 B0 FD | 	call	#_audio096_spin2_play
1b224     0B 00 00 FF 
1b228     CC E4 85 F1 | 	sub	objptr, ##5836
1b22c                 | LR__2125
1b22c     79 00 00 FF 
1b230     C4 E5 05 F1 | 	add	objptr, ##62404
1b234     F2 12 02 FB | 	rdlong	arg01, objptr
1b238     79 00 00 FF 
1b23c     C4 E5 85 F1 | 	sub	objptr, ##62404
1b240     D8 F7 BF FD | 	call	#_scantochar
1b244     79 00 00 FF 
1b248     CC E5 05 F1 | 	add	objptr, ##62412
1b24c     F2 FA 61 FC | 	wrlong	result1, objptr
1b250                 | '   if leds and 2 = 2 then 
1b250     10 E4 85 F1 | 	sub	objptr, #16
1b254     F2 20 0A FB | 	rdlong	local02, objptr wz
1b258     79 00 00 FF 
1b25c     BC E5 85 F1 | 	sub	objptr, ##62396
1b260     68 01 90 AD |  if_e	jmp	#LR__2133
1b264                 | '     if key4>96 andalso key4<123 then
1b264     79 00 00 FF 
1b268     CC E5 05 F1 | 	add	objptr, ##62412
1b26c     F2 20 02 FB | 	rdlong	local02, objptr
1b270     79 00 00 FF 
1b274     CC E5 85 F1 | 	sub	objptr, ##62412
1b278     61 20 56 F2 | 	cmps	local02, #97 wc
1b27c     40 00 90 CD |  if_b	jmp	#LR__2126
1b280     79 00 00 FF 
1b284     CC E5 05 F1 | 	add	objptr, ##62412
1b288     F2 24 02 FB | 	rdlong	local04, objptr
1b28c     79 00 00 FF 
1b290     CC E5 85 F1 | 	sub	objptr, ##62412
1b294     12 23 02 F6 | 	mov	local03, local04
1b298     7B 22 56 F2 | 	cmps	local03, #123 wc
1b29c     20 00 90 3D |  if_ae	jmp	#LR__2126
1b2a0     79 00 00 FF 
1b2a4     CC E5 05 F1 | 	add	objptr, ##62412
1b2a8     F2 20 02 FB | 	rdlong	local02, objptr
1b2ac     20 20 86 F1 | 	sub	local02, #32
1b2b0     F2 20 62 FC | 	wrlong	local02, objptr
1b2b4     79 00 00 FF 
1b2b8     CC E5 85 F1 | 	sub	objptr, ##62412
1b2bc     0C 01 90 FD | 	jmp	#LR__2132
1b2c0                 | LR__2126
1b2c0     79 00 00 FF 
1b2c4     CC E5 05 F1 | 	add	objptr, ##62412
1b2c8     F2 20 02 FB | 	rdlong	local02, objptr
1b2cc     79 00 00 FF 
1b2d0     CC E5 85 F1 | 	sub	objptr, ##62412
1b2d4     41 20 56 F2 | 	cmps	local02, #65 wc
1b2d8     40 00 90 CD |  if_b	jmp	#LR__2127
1b2dc     79 00 00 FF 
1b2e0     CC E5 05 F1 | 	add	objptr, ##62412
1b2e4     F2 24 02 FB | 	rdlong	local04, objptr
1b2e8     79 00 00 FF 
1b2ec     CC E5 85 F1 | 	sub	objptr, ##62412
1b2f0     12 23 02 F6 | 	mov	local03, local04
1b2f4     5B 22 56 F2 | 	cmps	local03, #91 wc
1b2f8     20 00 90 3D |  if_ae	jmp	#LR__2127
1b2fc     79 00 00 FF 
1b300     CC E5 05 F1 | 	add	objptr, ##62412
1b304     F2 20 02 FB | 	rdlong	local02, objptr
1b308     20 20 06 F1 | 	add	local02, #32
1b30c     F2 20 62 FC | 	wrlong	local02, objptr
1b310     79 00 00 FF 
1b314     CC E5 85 F1 | 	sub	objptr, ##62412
1b318     B0 00 90 FD | 	jmp	#LR__2131
1b31c                 | LR__2127
1b31c     79 00 00 FF 
1b320     CC E5 05 F1 | 	add	objptr, ##62412
1b324     F2 20 02 FB | 	rdlong	local02, objptr
1b328     79 00 00 FF 
1b32c     CC E5 85 F1 | 	sub	objptr, ##62412
1b330     17 20 56 F2 | 	cmps	local02, #23 wc
1b334     40 00 90 CD |  if_b	jmp	#LR__2128
1b338     79 00 00 FF 
1b33c     CC E5 05 F1 | 	add	objptr, ##62412
1b340     F2 24 02 FB | 	rdlong	local04, objptr
1b344     79 00 00 FF 
1b348     CC E5 85 F1 | 	sub	objptr, ##62412
1b34c     12 23 02 F6 | 	mov	local03, local04
1b350     20 22 56 F2 | 	cmps	local03, #32 wc
1b354     20 00 90 3D |  if_ae	jmp	#LR__2128
1b358     79 00 00 FF 
1b35c     CC E5 05 F1 | 	add	objptr, ##62412
1b360     F2 20 02 FB | 	rdlong	local02, objptr
1b364     09 20 86 F1 | 	sub	local02, #9
1b368     F2 20 62 FC | 	wrlong	local02, objptr
1b36c     79 00 00 FF 
1b370     CC E5 85 F1 | 	sub	objptr, ##62412
1b374     54 00 90 FD | 	jmp	#LR__2130
1b378                 | LR__2128
1b378     79 00 00 FF 
1b37c     CC E5 05 F1 | 	add	objptr, ##62412
1b380     F2 20 02 FB | 	rdlong	local02, objptr
1b384     79 00 00 FF 
1b388     CC E5 85 F1 | 	sub	objptr, ##62412
1b38c     0E 20 56 F2 | 	cmps	local02, #14 wc
1b390     38 00 90 CD |  if_b	jmp	#LR__2129
1b394     79 00 00 FF 
1b398     CC E5 05 F1 | 	add	objptr, ##62412
1b39c     F2 24 02 FB | 	rdlong	local04, objptr
1b3a0     79 00 00 FF 
1b3a4     CC E5 85 F1 | 	sub	objptr, ##62412
1b3a8     12 23 02 F6 | 	mov	local03, local04
1b3ac     17 22 56 F2 | 	cmps	local03, #23 wc
1b3b0     79 00 00 CF 
1b3b4     CC E5 05 C1 |  if_b	add	objptr, ##62412
1b3b8     F2 20 02 CB |  if_b	rdlong	local02, objptr
1b3bc     27 20 06 C1 |  if_b	add	local02, #39
1b3c0     F2 20 62 CC |  if_b	wrlong	local02, objptr
1b3c4     79 00 00 CF 
1b3c8     CC E5 85 C1 |  if_b	sub	objptr, ##62412
1b3cc                 | LR__2129
1b3cc                 | LR__2130
1b3cc                 | LR__2131
1b3cc                 | LR__2132
1b3cc                 | LR__2133
1b3cc                 | '  
1b3cc                 | '  
1b3cc                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then 
1b3cc     79 00 00 FF 
1b3d0     CC E5 05 F1 | 	add	objptr, ##62412
1b3d4     F2 20 02 FB | 	rdlong	local02, objptr
1b3d8     79 00 00 FF 
1b3dc     CC E5 85 F1 | 	sub	objptr, ##62412
1b3e0     01 20 56 F2 | 	cmps	local02, #1 wc
1b3e4     E4 01 90 CD |  if_b	jmp	#LR__2138
1b3e8     79 00 00 FF 
1b3ec     CC E5 05 F1 | 	add	objptr, ##62412
1b3f0     F2 24 02 FB | 	rdlong	local04, objptr
1b3f4     79 00 00 FF 
1b3f8     CC E5 85 F1 | 	sub	objptr, ##62412
1b3fc     12 23 02 F6 | 	mov	local03, local04
1b400     7F 22 56 F2 | 	cmps	local03, #127 wc
1b404     3C E4 05 C1 |  if_b	add	objptr, #60
1b408     F2 1E E2 CA |  if_b	rdword	local01, objptr
1b40c     3C E4 85 C1 |  if_b	sub	objptr, #60
1b410     0F 27 32 C9 |  if_b	getword	local05, local01, #0
1b414     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
1b418     B0 01 90 3D |  if_ae	jmp	#LR__2138
1b41c                 | '     if do_insert then
1b41c     79 00 00 FF 
1b420     B8 E5 05 F1 | 	add	objptr, ##62392
1b424     F2 20 0A FB | 	rdlong	local02, objptr wz
1b428     79 00 00 FF 
1b42c     B8 E5 85 F1 | 	sub	objptr, ##62392
1b430     80 01 90 AD |  if_e	jmp	#LR__2137
1b434                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) step -1 : pspoke i,pspeek(i-1) : next i 
1b434     3E E4 05 F1 | 	add	objptr, #62
1b438     F2 22 C2 FA | 	rdbyte	local03, objptr
1b43c     11 25 E2 F8 | 	getbyte	local04, local03, #0
1b440     80 24 06 FA | 	mul	local04, #128
1b444     3A E4 85 F1 | 	sub	objptr, #58
1b448     F2 2A 02 FB | 	rdlong	local07, objptr
1b44c     15 2D 02 F6 | 	mov	local08, local07
1b450     12 2D 02 F1 | 	add	local08, local04
1b454     7F 2C 06 F1 | 	add	local08, #127
1b458     11 23 E2 F8 | 	getbyte	local03, local03, #0
1b45c     80 22 06 FA | 	mul	local03, #128
1b460     11 2B 02 F1 | 	add	local07, local03
1b464     38 E4 05 F1 | 	add	objptr, #56
1b468     F2 26 E2 FA | 	rdword	local05, objptr
1b46c     3C E4 85 F1 | 	sub	objptr, #60
1b470     13 2F 52 F6 | 	abs	local09, local05 wc
1b474     01 2E 46 F0 | 	shr	local09, #1
1b478     17 2B 82 F3 | 	sumc	local07, local09
1b47c                 | LR__2134
1b47c     16 31 02 F6 | 	mov	local10, local08
1b480     01 30 86 F1 | 	sub	local10, #1
1b484     18 13 02 F6 | 	mov	arg01, local10
1b488     88 F4 BF FD | 	call	#_pspeek
1b48c     FD 32 02 F6 | 	mov	local11, result1
1b490     19 35 E2 F8 | 	getbyte	local12, local11, #0
1b494     1A 37 02 F6 | 	mov	local13, local12
1b498     16 13 02 F6 | 	mov	arg01, local08
1b49c     1B 15 02 F6 | 	mov	arg02, local13
1b4a0     28 F4 BF FD | 	call	#_pspoke
1b4a4     01 2C 86 F1 | 	sub	local08, #1
1b4a8     15 2D 52 F2 | 	cmps	local08, local07 wc
1b4ac     CC FF 9F 3D |  if_ae	jmp	#LR__2134
1b4b0     79 00 00 FF 
1b4b4     D0 E5 05 F1 | 	add	objptr, ##62416
1b4b8     F2 00 68 FC | 	wrlong	#0, objptr
1b4bc     79 00 00 FF 
1b4c0     92 E5 85 F1 | 	sub	objptr, ##62354
1b4c4     F2 22 C2 FA | 	rdbyte	local03, objptr
1b4c8     11 25 E2 F8 | 	getbyte	local04, local03, #0
1b4cc     80 24 06 FA | 	mul	local04, #128
1b4d0     3A E4 85 F1 | 	sub	objptr, #58
1b4d4     F2 26 02 FB | 	rdlong	local05, objptr
1b4d8     13 2D 02 F6 | 	mov	local08, local05
1b4dc     12 2D 02 F1 | 	add	local08, local04
1b4e0     38 E4 05 F1 | 	add	objptr, #56
1b4e4     F2 2E E2 FA | 	rdword	local09, objptr
1b4e8     17 1F 32 F9 | 	getword	local01, local09, #0
1b4ec     0F 39 52 F6 | 	abs	local14, local01 wc
1b4f0     01 38 46 F0 | 	shr	local14, #1
1b4f4     1C 39 82 F6 | 	negc	local14, local14
1b4f8     1C 2D 02 F1 | 	add	local08, local14
1b4fc     11 23 E2 F8 | 	getbyte	local03, local03, #0
1b500     80 22 06 FA | 	mul	local03, #128
1b504     13 25 02 F6 | 	mov	local04, local05
1b508     3C E4 85 F1 | 	sub	objptr, #60
1b50c     12 3B 02 F6 | 	mov	local15, local04
1b510     11 3B 02 F1 | 	add	local15, local03
1b514     80 3A 06 F1 | 	add	local15, #128
1b518                 | LR__2135
1b518     1D 2D 52 F2 | 	cmps	local08, local15 wc
1b51c     94 00 90 3D |  if_ae	jmp	#LR__2136
1b520     3C E4 05 F1 | 	add	objptr, #60
1b524     F2 20 E2 FA | 	rdword	local02, objptr
1b528     79 00 00 FF 
1b52c     94 E5 05 F1 | 	add	objptr, ##62356
1b530     F2 24 02 FB | 	rdlong	local04, objptr
1b534     01 24 66 F0 | 	shl	local04, #1
1b538     12 21 02 F1 | 	add	local02, local04
1b53c     79 00 00 FF 
1b540     92 E5 85 F1 | 	sub	objptr, ##62354
1b544     F2 28 C2 FA | 	rdbyte	local06, objptr
1b548     3E E4 85 F1 | 	sub	objptr, #62
1b54c     10 28 06 FA | 	mul	local06, #16
1b550     04 28 06 F1 | 	add	local06, #4
1b554     16 13 02 F6 | 	mov	arg01, local08
1b558     B8 F3 BF FD | 	call	#_pspeek
1b55c     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1b560     41 E4 05 F1 | 	add	objptr, #65
1b564     F2 24 02 FB | 	rdlong	local04, objptr
1b568     04 E4 05 F1 | 	add	objptr, #4
1b56c     F2 1E 02 FB | 	rdlong	local01, objptr
1b570     45 E4 85 F1 | 	sub	objptr, #69
1b574     0F 27 02 F6 | 	mov	local05, local01
1b578     10 13 02 F6 | 	mov	arg01, local02
1b57c     14 15 02 F6 | 	mov	arg02, local06
1b580     11 17 02 F6 | 	mov	arg03, local03
1b584     12 19 02 F6 | 	mov	arg04, local04
1b588     13 1B 02 F6 | 	mov	arg05, local05
1b58c     A8 1C B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1b590     79 00 00 FF 
1b594     D0 E5 05 F1 | 	add	objptr, ##62416
1b598     F2 20 02 FB | 	rdlong	local02, objptr
1b59c     01 20 06 F1 | 	add	local02, #1
1b5a0     F2 20 62 FC | 	wrlong	local02, objptr
1b5a4     79 00 00 FF 
1b5a8     D0 E5 85 F1 | 	sub	objptr, ##62416
1b5ac     01 2C 06 F1 | 	add	local08, #1
1b5b0     64 FF 9F FD | 	jmp	#LR__2135
1b5b4                 | LR__2136
1b5b4                 | LR__2137
1b5b4     79 00 00 FF 
1b5b8     CC E5 05 F1 | 	add	objptr, ##62412
1b5bc     F2 12 02 FB | 	rdlong	arg01, objptr
1b5c0     79 00 00 FF 
1b5c4     CC E5 85 F1 | 	sub	objptr, ##62412
1b5c8     B4 1F B0 FD | 	call	#_hg010b_spin2_putchar
1b5cc                 | LR__2138
1b5cc                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
1b5cc     79 00 00 FF 
1b5d0     CC E5 05 F1 | 	add	objptr, ##62412
1b5d4     F2 20 02 FB | 	rdlong	local02, objptr
1b5d8     79 00 00 FF 
1b5dc     CC E5 85 F1 | 	sub	objptr, ##62412
1b5e0     01 20 56 F2 | 	cmps	local02, #1 wc
1b5e4     D0 00 90 CD |  if_b	jmp	#LR__2139
1b5e8     79 00 00 FF 
1b5ec     CC E5 05 F1 | 	add	objptr, ##62412
1b5f0     F2 24 02 FB | 	rdlong	local04, objptr
1b5f4     79 00 00 FF 
1b5f8     CC E5 85 F1 | 	sub	objptr, ##62412
1b5fc     12 23 02 F6 | 	mov	local03, local04
1b600     7F 22 56 F2 | 	cmps	local03, #127 wc
1b604     B0 00 90 3D |  if_ae	jmp	#LR__2139
1b608     3C E4 05 F1 | 	add	objptr, #60
1b60c     F2 1E E2 FA | 	rdword	local01, objptr
1b610     3C E4 85 F1 | 	sub	objptr, #60
1b614     0F 27 32 F9 | 	getword	local05, local01, #0
1b618     FE 26 0E F2 | 	cmp	local05, #254 wz
1b61c     78 00 00 AF 
1b620     F0 E4 05 A1 |  if_e	add	objptr, ##61680
1b624     F2 38 02 AB |  if_e	rdlong	local14, objptr
1b628     78 00 00 AF 
1b62c     F0 E4 85 A1 |  if_e	sub	objptr, ##61680
1b630     1C 2F 02 A6 |  if_e	mov	local09, local14
1b634     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
1b638     7C 00 90 5D |  if_ne	jmp	#LR__2139
1b63c     04 00 00 FF 
1b640     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1b644     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b648     04 00 00 FF 
1b64c     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1b650     56 00 00 FF 
1b654     44 22 06 F6 | 	mov	local03, ##44100
1b658     0C 24 C6 F9 | 	decod	local04, #12
1b65c     00 26 06 F6 | 	mov	local05, #0
1b660     03 00 00 FF 
1b664     DE 1E 06 F6 | 	mov	local01, ##1758
1b668     07 12 06 F6 | 	mov	arg01, #7
1b66c     56 00 00 FF 
1b670     44 16 06 F6 | 	mov	arg03, ##44100
1b674     0C 18 C6 F9 | 	decod	arg04, #12
1b678     00 1A 06 F6 | 	mov	arg05, #0
1b67c     03 00 00 FF 
1b680     DE 1C 06 F6 | 	mov	arg06, ##1758
1b684     0B 00 00 FF 
1b688     CC E4 05 F1 | 	add	objptr, ##5836
1b68c     38 30 B0 FD | 	call	#_audio096_spin2_play
1b690     0B 00 00 FF 
1b694     CC E4 85 F1 | 	sub	objptr, ##5836
1b698     2C 13 06 F6 | 	mov	arg01, #300
1b69c     8C 37 B0 FD | 	call	#__system___waitms
1b6a0     07 12 06 F6 | 	mov	arg01, #7
1b6a4     0B 00 00 FF 
1b6a8     CC E4 05 F1 | 	add	objptr, ##5836
1b6ac     88 31 B0 FD | 	call	#_audio096_spin2_stop
1b6b0     0B 00 00 FF 
1b6b4     CC E4 85 F1 | 	sub	objptr, ##5836
1b6b8                 | LR__2139
1b6b8                 | '  
1b6b8                 | '   if key4=key_enter then 
1b6b8     79 00 00 FF 
1b6bc     CC E5 05 F1 | 	add	objptr, ##62412
1b6c0     F2 20 02 FB | 	rdlong	local02, objptr
1b6c4     79 00 00 FF 
1b6c8     CC E5 85 F1 | 	sub	objptr, ##62412
1b6cc     8D 20 0E F2 | 	cmp	local02, #141 wz
1b6d0     F0 00 90 5D |  if_ne	jmp	#LR__2142
1b6d4     77 01 00 FF 
1b6d8     52 20 06 F6 | 	mov	local02, ##@LR__5256
1b6dc     57 00 00 FF 
1b6e0     1C E4 05 F1 | 	add	objptr, ##44572
1b6e4     F2 20 62 FC | 	wrlong	local02, objptr
1b6e8                 | ' 
1b6e8                 | ' ''      interpret: line$="" :let t1=getct()-t1 :rpt=0: rptcnt=0
1b6e8                 | '     line$="" : for i=editor_spaces to 127
1b6e8     18 E4 05 F1 | 	add	objptr, #24
1b6ec     F2 2C 02 FB | 	rdlong	local08, objptr
1b6f0     57 00 00 FF 
1b6f4     34 E4 85 F1 | 	sub	objptr, ##44596
1b6f8                 | LR__2140
1b6f8     80 2C 56 F2 | 	cmps	local08, #128 wc
1b6fc     8C 00 90 3D |  if_ae	jmp	#LR__2141
1b700     3E E4 05 F1 | 	add	objptr, #62
1b704     F2 1E C2 FA | 	rdbyte	local01, objptr
1b708     0F 27 E2 F8 | 	getbyte	local05, local01, #0
1b70c     13 2F 02 F6 | 	mov	local09, local05
1b710     80 2E 06 FA | 	mul	local09, #128
1b714     3A E4 85 F1 | 	sub	objptr, #58
1b718     F2 38 02 FB | 	rdlong	local14, objptr
1b71c     04 E4 85 F1 | 	sub	objptr, #4
1b720     1C 13 02 F6 | 	mov	arg01, local14
1b724     17 13 02 F1 | 	add	arg01, local09
1b728     16 13 02 F1 | 	add	arg01, local08
1b72c     E4 F1 BF FD | 	call	#_pspeek
1b730     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1b734     79 00 00 FF 
1b738     D4 E5 05 F1 | 	add	objptr, ##62420
1b73c     F2 24 62 FC | 	wrlong	local04, objptr
1b740     22 00 00 FF 
1b744     B8 E5 85 F1 | 	sub	objptr, ##17848
1b748     F2 28 02 FB | 	rdlong	local06, objptr
1b74c     57 00 00 FF 
1b750     1C E4 85 F1 | 	sub	objptr, ##44572
1b754     12 13 02 F6 | 	mov	arg01, local04
1b758     E8 55 B0 FD | 	call	#__system__Chr_S
1b75c     FD 14 02 F6 | 	mov	arg02, result1
1b760     14 13 02 F6 | 	mov	arg01, local06
1b764     2C 34 B0 FD | 	call	#__system___string_concat
1b768     57 00 00 FF 
1b76c     1C E4 05 F1 | 	add	objptr, ##44572
1b770     F2 FA 61 FC | 	wrlong	result1, objptr
1b774     57 00 00 FF 
1b778     1C E4 85 F1 | 	sub	objptr, ##44572
1b77c     16 23 02 F6 | 	mov	local03, local08
1b780     01 22 06 F1 | 	add	local03, #1
1b784     11 2D 02 F6 | 	mov	local08, local03
1b788     6C FF 9F FD | 	jmp	#LR__2140
1b78c                 | LR__2141
1b78c     A8 23 B0 FD | 	call	#_hg010b_spin2_crlf
1b790     88 52 BE FD | 	call	#_interpret
1b794     77 01 00 FF 
1b798     53 20 06 F6 | 	mov	local02, ##@LR__5257
1b79c     57 00 00 FF 
1b7a0     1C E4 05 F1 | 	add	objptr, ##44572
1b7a4     F2 20 62 FC | 	wrlong	local02, objptr
1b7a8     22 00 00 FF 
1b7ac     A4 E5 05 F1 | 	add	objptr, ##17828
1b7b0     F2 00 68 FC | 	wrlong	#0, objptr
1b7b4     08 E4 05 F1 | 	add	objptr, #8
1b7b8     F2 00 68 FC | 	wrlong	#0, objptr
1b7bc     79 00 00 FF 
1b7c0     C8 E5 85 F1 | 	sub	objptr, ##62408
1b7c4                 | LR__2142
1b7c4     79 00 00 FF 
1b7c8     C4 E5 05 F1 | 	add	objptr, ##62404
1b7cc     F2 20 02 FB | 	rdlong	local02, objptr
1b7d0     10 21 E2 F8 | 	getbyte	local02, local02, #0
1b7d4     08 E4 05 F1 | 	add	objptr, #8
1b7d8     F2 20 62 FC | 	wrlong	local02, objptr
1b7dc                 | '   'tab
1b7dc                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1b7dc     79 00 00 FF 
1b7e0     CC E5 85 F1 | 	sub	objptr, ##62412
1b7e4     2B 20 0E F2 | 	cmp	local02, #43 wz
1b7e8     B4 00 90 5D |  if_ne	jmp	#LR__2143
1b7ec     3C E4 05 F1 | 	add	objptr, #60
1b7f0     F2 24 E2 FA | 	rdword	local04, objptr
1b7f4     3C E4 85 F1 | 	sub	objptr, #60
1b7f8     12 23 32 F9 | 	getword	local03, local04, #0
1b7fc     F0 22 16 F2 | 	cmp	local03, #240 wc
1b800     9C 00 90 CD |  if_b	jmp	#LR__2143
1b804     78 00 00 FF 
1b808     F0 E4 05 F1 | 	add	objptr, ##61680
1b80c     F2 1E 02 FB | 	rdlong	local01, objptr
1b810     78 00 00 FF 
1b814     F0 E4 85 F1 | 	sub	objptr, ##61680
1b818     0F 27 02 F6 | 	mov	local05, local01
1b81c     01 26 0E F2 | 	cmp	local05, #1 wz
1b820     7C 00 90 5D |  if_ne	jmp	#LR__2143
1b824     04 00 00 FF 
1b828     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1b82c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b830     04 00 00 FF 
1b834     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1b838     56 00 00 FF 
1b83c     44 22 06 F6 | 	mov	local03, ##44100
1b840     0E 24 C6 F9 | 	decod	local04, #14
1b844     00 26 06 F6 | 	mov	local05, #0
1b848     03 00 00 FF 
1b84c     DE 1E 06 F6 | 	mov	local01, ##1758
1b850     00 12 06 F6 | 	mov	arg01, #0
1b854     56 00 00 FF 
1b858     44 16 06 F6 | 	mov	arg03, ##44100
1b85c     0E 18 C6 F9 | 	decod	arg04, #14
1b860     00 1A 06 F6 | 	mov	arg05, #0
1b864     03 00 00 FF 
1b868     DE 1C 06 F6 | 	mov	arg06, ##1758
1b86c     0B 00 00 FF 
1b870     CC E4 05 F1 | 	add	objptr, ##5836
1b874     50 2E B0 FD | 	call	#_audio096_spin2_play
1b878     0B 00 00 FF 
1b87c     CC E4 85 F1 | 	sub	objptr, ##5836
1b880     2C 13 06 F6 | 	mov	arg01, #300
1b884     A4 35 B0 FD | 	call	#__system___waitms
1b888     00 12 06 F6 | 	mov	arg01, #0
1b88c     0B 00 00 FF 
1b890     CC E4 05 F1 | 	add	objptr, ##5836
1b894     A0 2F B0 FD | 	call	#_audio096_spin2_stop
1b898     0B 00 00 FF 
1b89c     CC E4 85 F1 | 	sub	objptr, ##5836
1b8a0                 | LR__2143
1b8a0                 | '   if key4 = 43 andalso v.cursor_x<240 then v.setcursorx((v.cursor_x+8) and $F8)  
1b8a0     79 00 00 FF 
1b8a4     CC E5 05 F1 | 	add	objptr, ##62412
1b8a8     F2 20 02 FB | 	rdlong	local02, objptr
1b8ac     79 00 00 FF 
1b8b0     CC E5 85 F1 | 	sub	objptr, ##62412
1b8b4     2B 20 0E F2 | 	cmp	local02, #43 wz
1b8b8     34 00 90 5D |  if_ne	jmp	#LR__2144
1b8bc     3C E4 05 F1 | 	add	objptr, #60
1b8c0     F2 24 E2 FA | 	rdword	local04, objptr
1b8c4     3C E4 85 F1 | 	sub	objptr, #60
1b8c8     12 23 32 F9 | 	getword	local03, local04, #0
1b8cc     F0 22 16 F2 | 	cmp	local03, #240 wc
1b8d0     1C 00 90 3D |  if_ae	jmp	#LR__2144
1b8d4     3C E4 05 F1 | 	add	objptr, #60
1b8d8     F2 22 E2 FA | 	rdword	local03, objptr
1b8dc     3C E4 85 F1 | 	sub	objptr, #60
1b8e0     11 13 32 F9 | 	getword	arg01, local03, #0
1b8e4     08 12 06 F1 | 	add	arg01, #8
1b8e8     F8 12 06 F5 | 	and	arg01, #248
1b8ec     E8 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1b8f0                 | LR__2144
1b8f0                 | '  ' tab43 del 76 home74 end 77 pgup=75 pgdn 78
1b8f0                 | '   if key4=77 then i=127 : do: 
1b8f0     79 00 00 FF 
1b8f4     CC E5 05 F1 | 	add	objptr, ##62412
1b8f8     F2 20 02 FB | 	rdlong	local02, objptr
1b8fc     79 00 00 FF 
1b900     CC E5 85 F1 | 	sub	objptr, ##62412
1b904     4D 20 0E F2 | 	cmp	local02, #77 wz
1b908     74 00 90 5D |  if_ne	jmp	#LR__2148
1b90c     7F 2C 06 F6 | 	mov	local08, #127
1b910                 | LR__2145
1b910                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then v.setcursorx(2*i) : exit loop 
1b910     3E E4 05 F1 | 	add	objptr, #62
1b914     F2 26 C2 FA | 	rdbyte	local05, objptr
1b918     13 25 E2 F8 | 	getbyte	local04, local05, #0
1b91c     12 1F 02 F6 | 	mov	local01, local04
1b920     80 1E 06 FA | 	mul	local01, #128
1b924     3A E4 85 F1 | 	sub	objptr, #58
1b928     F2 2E 02 FB | 	rdlong	local09, objptr
1b92c     04 E4 85 F1 | 	sub	objptr, #4
1b930     17 23 02 F6 | 	mov	local03, local09
1b934     0F 23 02 F1 | 	add	local03, local01
1b938     16 23 02 F1 | 	add	local03, local08
1b93c     11 13 02 F6 | 	mov	arg01, local03
1b940     D0 EF BF FD | 	call	#_pspeek
1b944     FD 20 E2 F8 | 	getbyte	local02, result1, #0
1b948     20 20 0E F2 | 	cmp	local02, #32 wz
1b94c     10 00 90 AD |  if_e	jmp	#LR__2146
1b950     16 13 02 F6 | 	mov	arg01, local08
1b954     01 12 66 F0 | 	shl	arg01, #1
1b958     7C 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1b95c     20 00 90 FD | 	jmp	#LR__2147
1b960                 | LR__2146
1b960     01 2C 86 F1 | 	sub	local08, #1
1b964     57 00 00 FF 
1b968     34 E4 05 F1 | 	add	objptr, ##44596
1b96c     F2 20 02 FB | 	rdlong	local02, objptr
1b970     57 00 00 FF 
1b974     34 E4 85 F1 | 	sub	objptr, ##44596
1b978     10 2D 0A F2 | 	cmp	local08, local02 wz
1b97c     90 FF 9F 5D |  if_ne	jmp	#LR__2145
1b980                 | LR__2147
1b980                 | LR__2148
1b980                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
1b980     57 00 00 FF 
1b984     34 E4 05 F1 | 	add	objptr, ##44596
1b988     F2 20 02 FB | 	rdlong	local02, objptr
1b98c     57 00 00 FF 
1b990     34 E4 85 F1 | 	sub	objptr, ##44596
1b994     10 2D 0A F2 | 	cmp	local08, local02 wz
1b998     24 00 90 5D |  if_ne	jmp	#LR__2149
1b99c     57 00 00 FF 
1b9a0     34 E4 05 F1 | 	add	objptr, ##44596
1b9a4     F2 24 02 FB | 	rdlong	local04, objptr
1b9a8     57 00 00 FF 
1b9ac     34 E4 85 F1 | 	sub	objptr, ##44596
1b9b0     12 23 02 F6 | 	mov	local03, local04
1b9b4     11 13 02 F6 | 	mov	arg01, local03
1b9b8     01 12 66 F0 | 	shl	arg01, #1
1b9bc     18 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1b9c0                 | LR__2149
1b9c0                 | '   
1b9c0                 | '   
1b9c0                 | '   if key4=74 then v.setcursorx(editor_spaces*2)
1b9c0     79 00 00 FF 
1b9c4     CC E5 05 F1 | 	add	objptr, ##62412
1b9c8     F2 20 02 FB | 	rdlong	local02, objptr
1b9cc     79 00 00 FF 
1b9d0     CC E5 85 F1 | 	sub	objptr, ##62412
1b9d4     4A 20 0E F2 | 	cmp	local02, #74 wz
1b9d8     24 00 90 5D |  if_ne	jmp	#LR__2150
1b9dc     57 00 00 FF 
1b9e0     34 E4 05 F1 | 	add	objptr, ##44596
1b9e4     F2 24 02 FB | 	rdlong	local04, objptr
1b9e8     57 00 00 FF 
1b9ec     34 E4 85 F1 | 	sub	objptr, ##44596
1b9f0     12 23 02 F6 | 	mov	local03, local04
1b9f4     11 13 02 F6 | 	mov	arg01, local03
1b9f8     01 12 66 F0 | 	shl	arg01, #1
1b9fc     D8 19 B0 FD | 	call	#_hg010b_spin2_setcursorx
1ba00                 | LR__2150
1ba00                 | '   if key4=75 then v.setcursory(0)
1ba00     79 00 00 FF 
1ba04     CC E5 05 F1 | 	add	objptr, ##62412
1ba08     F2 20 02 FB | 	rdlong	local02, objptr
1ba0c     79 00 00 FF 
1ba10     CC E5 85 F1 | 	sub	objptr, ##62412
1ba14     4B 20 0E F2 | 	cmp	local02, #75 wz
1ba18     00 12 06 A6 |  if_e	mov	arg01, #0
1ba1c     E8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1ba20                 | '   if key4=78 then v.setcursory(36) ' todo: parameter instead 36
1ba20     79 00 00 FF 
1ba24     CC E5 05 F1 | 	add	objptr, ##62412
1ba28     F2 20 02 FB | 	rdlong	local02, objptr
1ba2c     79 00 00 FF 
1ba30     CC E5 85 F1 | 	sub	objptr, ##62412
1ba34     4E 20 0E F2 | 	cmp	local02, #78 wz
1ba38     24 12 06 A6 |  if_e	mov	arg01, #36
1ba3c     C8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1ba40                 | '   
1ba40                 | '   if key4=76 then 'del
1ba40     79 00 00 FF 
1ba44     CC E5 05 F1 | 	add	objptr, ##62412
1ba48     F2 20 02 FB | 	rdlong	local02, objptr
1ba4c     79 00 00 FF 
1ba50     CC E5 85 F1 | 	sub	objptr, ##62412
1ba54     4C 20 0E F2 | 	cmp	local02, #76 wz
1ba58     9C 01 90 5D |  if_ne	jmp	#LR__2155
1ba5c                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1ba5c     3E E4 05 F1 | 	add	objptr, #62
1ba60     F2 22 C2 FA | 	rdbyte	local03, objptr
1ba64     11 25 E2 F8 | 	getbyte	local04, local03, #0
1ba68     80 24 06 FA | 	mul	local04, #128
1ba6c     3A E4 85 F1 | 	sub	objptr, #58
1ba70     F2 3C 02 FB | 	rdlong	local16, objptr
1ba74     1E 2D 02 F6 | 	mov	local08, local16
1ba78     12 2D 02 F1 | 	add	local08, local04
1ba7c     38 E4 05 F1 | 	add	objptr, #56
1ba80     F2 1E E2 FA | 	rdword	local01, objptr
1ba84     0F 39 52 F6 | 	abs	local14, local01 wc
1ba88     01 38 46 F0 | 	shr	local14, #1
1ba8c     1C 2D 82 F3 | 	sumc	local08, local14
1ba90     11 23 E2 F8 | 	getbyte	local03, local03, #0
1ba94     80 22 06 FA | 	mul	local03, #128
1ba98     3C E4 85 F1 | 	sub	objptr, #60
1ba9c     11 3D 02 F1 | 	add	local16, local03
1baa0     80 3C 06 F1 | 	add	local16, #128
1baa4                 | LR__2151
1baa4     1E 2D 52 F2 | 	cmps	local08, local16 wc
1baa8     20 00 90 3D |  if_ae	jmp	#LR__2152
1baac     16 13 02 F6 | 	mov	arg01, local08
1bab0     01 12 06 F1 | 	add	arg01, #1
1bab4     5C EE BF FD | 	call	#_pspeek
1bab8     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1babc     16 13 02 F6 | 	mov	arg01, local08
1bac0     08 EE BF FD | 	call	#_pspoke
1bac4     01 2C 06 F1 | 	add	local08, #1
1bac8     D8 FF 9F FD | 	jmp	#LR__2151
1bacc                 | LR__2152
1bacc     3E E4 05 F1 | 	add	objptr, #62
1bad0     F2 26 C2 FA | 	rdbyte	local05, objptr
1bad4     80 26 06 FA | 	mul	local05, #128
1bad8     3A E4 85 F1 | 	sub	objptr, #58
1badc     F2 12 02 FB | 	rdlong	arg01, objptr
1bae0     04 E4 85 F1 | 	sub	objptr, #4
1bae4     13 13 02 F1 | 	add	arg01, local05
1bae8     7F 12 06 F1 | 	add	arg01, #127
1baec     20 14 06 F6 | 	mov	arg02, #32
1baf0     D8 ED BF FD | 	call	#_pspoke
1baf4     79 00 00 FF 
1baf8     D0 E5 05 F1 | 	add	objptr, ##62416
1bafc     F2 00 68 FC | 	wrlong	#0, objptr
1bb00     79 00 00 FF 
1bb04     92 E5 85 F1 | 	sub	objptr, ##62354
1bb08     F2 22 C2 FA | 	rdbyte	local03, objptr
1bb0c     11 25 E2 F8 | 	getbyte	local04, local03, #0
1bb10     80 24 06 FA | 	mul	local04, #128
1bb14     3A E4 85 F1 | 	sub	objptr, #58
1bb18     F2 26 02 FB | 	rdlong	local05, objptr
1bb1c     13 2D 02 F6 | 	mov	local08, local05
1bb20     12 2D 02 F1 | 	add	local08, local04
1bb24     38 E4 05 F1 | 	add	objptr, #56
1bb28     F2 2E E2 FA | 	rdword	local09, objptr
1bb2c     17 1F 32 F9 | 	getword	local01, local09, #0
1bb30     0F 39 52 F6 | 	abs	local14, local01 wc
1bb34     01 38 46 F0 | 	shr	local14, #1
1bb38     1C 39 82 F6 | 	negc	local14, local14
1bb3c     1C 2D 02 F1 | 	add	local08, local14
1bb40     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bb44     80 22 06 FA | 	mul	local03, #128
1bb48     13 25 02 F6 | 	mov	local04, local05
1bb4c     3C E4 85 F1 | 	sub	objptr, #60
1bb50     12 3F 02 F6 | 	mov	local17, local04
1bb54     11 3F 02 F1 | 	add	local17, local03
1bb58     80 3E 06 F1 | 	add	local17, #128
1bb5c                 | LR__2153
1bb5c     1F 2D 52 F2 | 	cmps	local08, local17 wc
1bb60     94 00 90 3D |  if_ae	jmp	#LR__2154
1bb64     3C E4 05 F1 | 	add	objptr, #60
1bb68     F2 20 E2 FA | 	rdword	local02, objptr
1bb6c     79 00 00 FF 
1bb70     94 E5 05 F1 | 	add	objptr, ##62356
1bb74     F2 24 02 FB | 	rdlong	local04, objptr
1bb78     01 24 66 F0 | 	shl	local04, #1
1bb7c     12 21 02 F1 | 	add	local02, local04
1bb80     79 00 00 FF 
1bb84     92 E5 85 F1 | 	sub	objptr, ##62354
1bb88     F2 28 C2 FA | 	rdbyte	local06, objptr
1bb8c     3E E4 85 F1 | 	sub	objptr, #62
1bb90     10 28 06 FA | 	mul	local06, #16
1bb94     04 28 06 F1 | 	add	local06, #4
1bb98     16 13 02 F6 | 	mov	arg01, local08
1bb9c     74 ED BF FD | 	call	#_pspeek
1bba0     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1bba4     41 E4 05 F1 | 	add	objptr, #65
1bba8     F2 24 02 FB | 	rdlong	local04, objptr
1bbac     04 E4 05 F1 | 	add	objptr, #4
1bbb0     F2 1E 02 FB | 	rdlong	local01, objptr
1bbb4     45 E4 85 F1 | 	sub	objptr, #69
1bbb8     0F 27 02 F6 | 	mov	local05, local01
1bbbc     10 13 02 F6 | 	mov	arg01, local02
1bbc0     14 15 02 F6 | 	mov	arg02, local06
1bbc4     11 17 02 F6 | 	mov	arg03, local03
1bbc8     12 19 02 F6 | 	mov	arg04, local04
1bbcc     13 1B 02 F6 | 	mov	arg05, local05
1bbd0     64 16 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1bbd4     79 00 00 FF 
1bbd8     D0 E5 05 F1 | 	add	objptr, ##62416
1bbdc     F2 20 02 FB | 	rdlong	local02, objptr
1bbe0     01 20 06 F1 | 	add	local02, #1
1bbe4     F2 20 62 FC | 	wrlong	local02, objptr
1bbe8     79 00 00 FF 
1bbec     D0 E5 85 F1 | 	sub	objptr, ##62416
1bbf0     01 2C 06 F1 | 	add	local08, #1
1bbf4     64 FF 9F FD | 	jmp	#LR__2153
1bbf8                 | LR__2154
1bbf8                 | LR__2155
1bbf8                 | '    
1bbf8                 | '   'backspace
1bbf8                 | '   if key4 = 42 then 
1bbf8     79 00 00 FF 
1bbfc     CC E5 05 F1 | 	add	objptr, ##62412
1bc00     F2 20 02 FB | 	rdlong	local02, objptr
1bc04     79 00 00 FF 
1bc08     CC E5 85 F1 | 	sub	objptr, ##62412
1bc0c     2A 20 0E F2 | 	cmp	local02, #42 wz
1bc10     0C 02 90 5D |  if_ne	jmp	#LR__2161
1bc14                 | '       if v.cursor_x>editor_spaces*2 then 
1bc14     3C E4 05 F1 | 	add	objptr, #60
1bc18     F2 20 E2 FA | 	rdword	local02, objptr
1bc1c     56 00 00 FF 
1bc20     F8 E5 05 F1 | 	add	objptr, ##44536
1bc24     F2 26 02 FB | 	rdlong	local05, objptr
1bc28     57 00 00 FF 
1bc2c     34 E4 85 F1 | 	sub	objptr, ##44596
1bc30     13 25 02 F6 | 	mov	local04, local05
1bc34     12 23 02 F6 | 	mov	local03, local04
1bc38     01 22 66 F0 | 	shl	local03, #1
1bc3c     11 21 5A F2 | 	cmps	local02, local03 wcz
1bc40     B8 01 90 ED |  if_be	jmp	#LR__2159
1bc44     3C E4 05 F1 | 	add	objptr, #60
1bc48     F2 12 E2 FA | 	rdword	arg01, objptr
1bc4c     02 12 86 F1 | 	sub	arg01, #2
1bc50     02 E4 05 F1 | 	add	objptr, #2
1bc54     F2 14 C2 FA | 	rdbyte	arg02, objptr
1bc58     3E E4 85 F1 | 	sub	objptr, #62
1bc5c     3C 17 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1bc60                 | '          position v.cursor_x-2,v.cursor_y
1bc60                 | '          for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1bc60     3E E4 05 F1 | 	add	objptr, #62
1bc64     F2 22 C2 FA | 	rdbyte	local03, objptr
1bc68     11 25 E2 F8 | 	getbyte	local04, local03, #0
1bc6c     80 24 06 FA | 	mul	local04, #128
1bc70     3A E4 85 F1 | 	sub	objptr, #58
1bc74     F2 40 02 FB | 	rdlong	local18, objptr
1bc78     20 2D 02 F6 | 	mov	local08, local18
1bc7c     12 2D 02 F1 | 	add	local08, local04
1bc80     38 E4 05 F1 | 	add	objptr, #56
1bc84     F2 1E E2 FA | 	rdword	local01, objptr
1bc88     0F 39 52 F6 | 	abs	local14, local01 wc
1bc8c     01 38 46 F0 | 	shr	local14, #1
1bc90     1C 2D 82 F3 | 	sumc	local08, local14
1bc94     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bc98     80 22 06 FA | 	mul	local03, #128
1bc9c     3C E4 85 F1 | 	sub	objptr, #60
1bca0     11 41 02 F1 | 	add	local18, local03
1bca4     80 40 06 F1 | 	add	local18, #128
1bca8                 | LR__2156
1bca8     20 2D 52 F2 | 	cmps	local08, local18 wc
1bcac     20 00 90 3D |  if_ae	jmp	#LR__2157
1bcb0     16 13 02 F6 | 	mov	arg01, local08
1bcb4     01 12 06 F1 | 	add	arg01, #1
1bcb8     58 EC BF FD | 	call	#_pspeek
1bcbc     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1bcc0     16 13 02 F6 | 	mov	arg01, local08
1bcc4     04 EC BF FD | 	call	#_pspoke
1bcc8     01 2C 06 F1 | 	add	local08, #1
1bccc     D8 FF 9F FD | 	jmp	#LR__2156
1bcd0                 | LR__2157
1bcd0     3E E4 05 F1 | 	add	objptr, #62
1bcd4     F2 26 C2 FA | 	rdbyte	local05, objptr
1bcd8     80 26 06 FA | 	mul	local05, #128
1bcdc     3A E4 85 F1 | 	sub	objptr, #58
1bce0     F2 12 02 FB | 	rdlong	arg01, objptr
1bce4     04 E4 85 F1 | 	sub	objptr, #4
1bce8     13 13 02 F1 | 	add	arg01, local05
1bcec     7F 12 06 F1 | 	add	arg01, #127
1bcf0     20 14 06 F6 | 	mov	arg02, #32
1bcf4     D4 EB BF FD | 	call	#_pspoke
1bcf8     79 00 00 FF 
1bcfc     D0 E5 05 F1 | 	add	objptr, ##62416
1bd00     F2 00 68 FC | 	wrlong	#0, objptr
1bd04     79 00 00 FF 
1bd08     92 E5 85 F1 | 	sub	objptr, ##62354
1bd0c     F2 22 C2 FA | 	rdbyte	local03, objptr
1bd10     11 25 E2 F8 | 	getbyte	local04, local03, #0
1bd14     80 24 06 FA | 	mul	local04, #128
1bd18     3A E4 85 F1 | 	sub	objptr, #58
1bd1c     F2 26 02 FB | 	rdlong	local05, objptr
1bd20     13 2D 02 F6 | 	mov	local08, local05
1bd24     12 2D 02 F1 | 	add	local08, local04
1bd28     38 E4 05 F1 | 	add	objptr, #56
1bd2c     F2 2E E2 FA | 	rdword	local09, objptr
1bd30     17 1F 32 F9 | 	getword	local01, local09, #0
1bd34     0F 39 52 F6 | 	abs	local14, local01 wc
1bd38     01 38 46 F0 | 	shr	local14, #1
1bd3c     1C 39 82 F6 | 	negc	local14, local14
1bd40     1C 2D 02 F1 | 	add	local08, local14
1bd44     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bd48     80 22 06 FA | 	mul	local03, #128
1bd4c     13 25 02 F6 | 	mov	local04, local05
1bd50     3C E4 85 F1 | 	sub	objptr, #60
1bd54     12 43 02 F6 | 	mov	local19, local04
1bd58     11 43 02 F1 | 	add	local19, local03
1bd5c     80 42 06 F1 | 	add	local19, #128
1bd60                 | LR__2158
1bd60     21 2D 52 F2 | 	cmps	local08, local19 wc
1bd64     B8 00 90 3D |  if_ae	jmp	#LR__2160
1bd68     3C E4 05 F1 | 	add	objptr, #60
1bd6c     F2 20 E2 FA | 	rdword	local02, objptr
1bd70     79 00 00 FF 
1bd74     94 E5 05 F1 | 	add	objptr, ##62356
1bd78     F2 24 02 FB | 	rdlong	local04, objptr
1bd7c     01 24 66 F0 | 	shl	local04, #1
1bd80     12 21 02 F1 | 	add	local02, local04
1bd84     79 00 00 FF 
1bd88     92 E5 85 F1 | 	sub	objptr, ##62354
1bd8c     F2 28 C2 FA | 	rdbyte	local06, objptr
1bd90     3E E4 85 F1 | 	sub	objptr, #62
1bd94     10 28 06 FA | 	mul	local06, #16
1bd98     04 28 06 F1 | 	add	local06, #4
1bd9c     16 13 02 F6 | 	mov	arg01, local08
1bda0     70 EB BF FD | 	call	#_pspeek
1bda4     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1bda8     41 E4 05 F1 | 	add	objptr, #65
1bdac     F2 24 02 FB | 	rdlong	local04, objptr
1bdb0     04 E4 05 F1 | 	add	objptr, #4
1bdb4     F2 1E 02 FB | 	rdlong	local01, objptr
1bdb8     45 E4 85 F1 | 	sub	objptr, #69
1bdbc     0F 27 02 F6 | 	mov	local05, local01
1bdc0     10 13 02 F6 | 	mov	arg01, local02
1bdc4     14 15 02 F6 | 	mov	arg02, local06
1bdc8     11 17 02 F6 | 	mov	arg03, local03
1bdcc     12 19 02 F6 | 	mov	arg04, local04
1bdd0     13 1B 02 F6 | 	mov	arg05, local05
1bdd4     60 14 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1bdd8     79 00 00 FF 
1bddc     D0 E5 05 F1 | 	add	objptr, ##62416
1bde0     F2 20 02 FB | 	rdlong	local02, objptr
1bde4     01 20 06 F1 | 	add	local02, #1
1bde8     F2 20 62 FC | 	wrlong	local02, objptr
1bdec     79 00 00 FF 
1bdf0     D0 E5 85 F1 | 	sub	objptr, ##62416
1bdf4     01 2C 06 F1 | 	add	local08, #1
1bdf8     64 FF 9F FD | 	jmp	#LR__2158
1bdfc                 | LR__2159
1bdfc     77 01 00 FF 
1be00     54 20 06 F6 | 	mov	local02, ##@LR__5258
1be04     57 00 00 FF 
1be08     1C E4 05 F1 | 	add	objptr, ##44572
1be0c     F2 20 62 FC | 	wrlong	local02, objptr
1be10     56 00 00 FF 
1be14     E0 E5 85 F1 | 	sub	objptr, ##44512
1be18     F2 08 58 FC | 	wrword	#4, objptr
1be1c     3C E4 85 F1 | 	sub	objptr, #60
1be20                 | LR__2160
1be20                 | LR__2161
1be20                 | '      if key4= 82 then 
1be20     79 00 00 FF 
1be24     CC E5 05 F1 | 	add	objptr, ##62412
1be28     F2 20 02 FB | 	rdlong	local02, objptr
1be2c     79 00 00 FF 
1be30     CC E5 85 F1 | 	sub	objptr, ##62412
1be34     52 20 0E F2 | 	cmp	local02, #82 wz
1be38     50 00 90 5D |  if_ne	jmp	#LR__2162
1be3c                 | ' return cursor_y
1be3c     3E E4 05 F1 | 	add	objptr, #62
1be40     F2 20 C2 FA | 	rdbyte	local02, objptr
1be44     01 20 86 F1 | 	sub	local02, #1
1be48     79 00 00 FF 
1be4c     9A E5 05 F1 | 	add	objptr, ##62362
1be50     F2 20 62 FC | 	wrlong	local02, objptr
1be54     79 00 00 FF 
1be58     D8 E5 85 F1 | 	sub	objptr, ##62424
1be5c     00 20 56 F2 | 	cmps	local02, #0 wc
1be60     79 00 00 CF 
1be64     D8 E5 05 C1 |  if_b	add	objptr, ##62424
1be68     F2 00 68 CC |  if_b	wrlong	#0, objptr
1be6c     79 00 00 CF 
1be70     D8 E5 85 C1 |  if_b	sub	objptr, ##62424
1be74     79 00 00 FF 
1be78     D8 E5 05 F1 | 	add	objptr, ##62424
1be7c     F2 12 02 FB | 	rdlong	arg01, objptr
1be80     79 00 00 FF 
1be84     D8 E5 85 F1 | 	sub	objptr, ##62424
1be88     7C 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1be8c                 | LR__2162
1be8c                 | '    if key4= 81 then
1be8c     79 00 00 FF 
1be90     CC E5 05 F1 | 	add	objptr, ##62412
1be94     F2 20 02 FB | 	rdlong	local02, objptr
1be98     79 00 00 FF 
1be9c     CC E5 85 F1 | 	sub	objptr, ##62412
1bea0     51 20 0E F2 | 	cmp	local02, #81 wz
1bea4     50 00 90 5D |  if_ne	jmp	#LR__2163
1bea8                 | ' return cursor_y
1bea8     3E E4 05 F1 | 	add	objptr, #62
1beac     F2 20 C2 FA | 	rdbyte	local02, objptr
1beb0     01 20 06 F1 | 	add	local02, #1
1beb4     79 00 00 FF 
1beb8     9A E5 05 F1 | 	add	objptr, ##62362
1bebc     F2 20 62 FC | 	wrlong	local02, objptr
1bec0     79 00 00 FF 
1bec4     D8 E5 85 F1 | 	sub	objptr, ##62424
1bec8     25 20 56 F2 | 	cmps	local02, #37 wc
1becc     79 00 00 3F 
1bed0     D8 E5 05 31 |  if_ae	add	objptr, ##62424
1bed4     F2 48 68 3C |  if_ae	wrlong	#36, objptr
1bed8     79 00 00 3F 
1bedc     D8 E5 85 31 |  if_ae	sub	objptr, ##62424
1bee0     79 00 00 FF 
1bee4     D8 E5 05 F1 | 	add	objptr, ##62424
1bee8     F2 12 02 FB | 	rdlong	arg01, objptr
1beec     79 00 00 FF 
1bef0     D8 E5 85 F1 | 	sub	objptr, ##62424
1bef4     10 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1bef8                 | LR__2163
1bef8                 | '    if key4= 80 then
1bef8     79 00 00 FF 
1befc     CC E5 05 F1 | 	add	objptr, ##62412
1bf00     F2 20 02 FB | 	rdlong	local02, objptr
1bf04     79 00 00 FF 
1bf08     CC E5 85 F1 | 	sub	objptr, ##62412
1bf0c     50 20 0E F2 | 	cmp	local02, #80 wz
1bf10     6C 00 90 5D |  if_ne	jmp	#LR__2164
1bf14                 | ' return cursor_x
1bf14     3C E4 05 F1 | 	add	objptr, #60
1bf18     F2 20 E2 FA | 	rdword	local02, objptr
1bf1c     02 20 86 F1 | 	sub	local02, #2
1bf20     79 00 00 FF 
1bf24     A0 E5 05 F1 | 	add	objptr, ##62368
1bf28     F2 20 62 FC | 	wrlong	local02, objptr
1bf2c                 | '      if cx<editor_spaces then cx=editor_spaces
1bf2c     22 00 00 FF 
1bf30     A8 E5 85 F1 | 	sub	objptr, ##17832
1bf34     F2 24 02 FB | 	rdlong	local04, objptr
1bf38     57 00 00 FF 
1bf3c     34 E4 85 F1 | 	sub	objptr, ##44596
1bf40     12 23 02 F6 | 	mov	local03, local04
1bf44     11 21 52 F2 | 	cmps	local02, local03 wc
1bf48     57 00 00 CF 
1bf4c     34 E4 05 C1 |  if_b	add	objptr, ##44596
1bf50     F2 20 02 CB |  if_b	rdlong	local02, objptr
1bf54     22 00 00 CF 
1bf58     A8 E5 05 C1 |  if_b	add	objptr, ##17832
1bf5c     F2 20 62 CC |  if_b	wrlong	local02, objptr
1bf60     79 00 00 CF 
1bf64     DC E5 85 C1 |  if_b	sub	objptr, ##62428
1bf68     79 00 00 FF 
1bf6c     DC E5 05 F1 | 	add	objptr, ##62428
1bf70     F2 12 02 FB | 	rdlong	arg01, objptr
1bf74     79 00 00 FF 
1bf78     DC E5 85 F1 | 	sub	objptr, ##62428
1bf7c     58 14 B0 FD | 	call	#_hg010b_spin2_setcursorx
1bf80                 | LR__2164
1bf80                 | '    if key4= 79 then
1bf80     79 00 00 FF 
1bf84     CC E5 05 F1 | 	add	objptr, ##62412
1bf88     F2 20 02 FB | 	rdlong	local02, objptr
1bf8c     79 00 00 FF 
1bf90     CC E5 85 F1 | 	sub	objptr, ##62412
1bf94     4F 20 0E F2 | 	cmp	local02, #79 wz
1bf98     50 00 90 5D |  if_ne	jmp	#LR__2165
1bf9c                 | ' return cursor_x
1bf9c     3C E4 05 F1 | 	add	objptr, #60
1bfa0     F2 20 E2 FA | 	rdword	local02, objptr
1bfa4     02 20 06 F1 | 	add	local02, #2
1bfa8     79 00 00 FF 
1bfac     A0 E5 05 F1 | 	add	objptr, ##62368
1bfb0     F2 20 62 FC | 	wrlong	local02, objptr
1bfb4                 | '      if cx>254  then cx=254 
1bfb4     79 00 00 FF 
1bfb8     DC E5 85 F1 | 	sub	objptr, ##62428
1bfbc     FF 20 56 F2 | 	cmps	local02, #255 wc
1bfc0     79 00 00 3F 
1bfc4     DC E5 05 31 |  if_ae	add	objptr, ##62428
1bfc8     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
1bfcc     79 00 00 3F 
1bfd0     DC E5 85 31 |  if_ae	sub	objptr, ##62428
1bfd4     79 00 00 FF 
1bfd8     DC E5 05 F1 | 	add	objptr, ##62428
1bfdc     F2 12 02 FB | 	rdlong	arg01, objptr
1bfe0     79 00 00 FF 
1bfe4     DC E5 85 F1 | 	sub	objptr, ##62428
1bfe8     EC 13 B0 FD | 	call	#_hg010b_spin2_setcursorx
1bfec                 | LR__2165
1bfec                 | '   ' print key3 and 255
1bfec                 | '    
1bfec                 | '    if key4=73 then ' ins
1bfec     79 00 00 FF 
1bff0     CC E5 05 F1 | 	add	objptr, ##62412
1bff4     F2 28 02 FB | 	rdlong	local06, objptr
1bff8     79 00 00 FF 
1bffc     CC E5 85 F1 | 	sub	objptr, ##62412
1c000     49 28 0E F2 | 	cmp	local06, #73 wz
1c004     38 00 90 5D |  if_ne	jmp	#LR__2168
1c008     79 00 00 FF 
1c00c     B8 E5 05 F1 | 	add	objptr, ##62392
1c010     F2 20 02 FB | 	rdlong	local02, objptr
1c014     10 29 22 F6 | 	not	local06, local02
1c018     F2 28 62 FC | 	wrlong	local06, objptr
1c01c                 | '      if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
1c01c     79 00 00 FF 
1c020     B8 E5 85 F1 | 	sub	objptr, ##62392
1c024     00 28 0E F2 | 	cmp	local06, #0 wz
1c028     0C 00 90 AD |  if_e	jmp	#LR__2166
1c02c     0E 12 06 F6 | 	mov	arg01, #14
1c030     28 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1c034     08 00 90 FD | 	jmp	#LR__2167
1c038                 | LR__2166
1c038     00 12 06 F6 | 	mov	arg01, #0
1c03c     1C 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1c040                 | LR__2167
1c040                 | LR__2168
1c040     79 00 00 FF 
1c044     C4 E5 05 F1 | 	add	objptr, ##62404
1c048     F2 00 68 FC | 	wrlong	#0, objptr
1c04c     79 00 00 FF 
1c050     C4 E5 85 F1 | 	sub	objptr, ##62404
1c054     A4 EE 9F FD | 	jmp	#LR__2120
1c058     A7 F0 03 F6 | 	mov	ptra, fp
1c05c     B2 00 A0 FD | 	call	#popregs_
1c060                 | _program_ret
1c060     2D 00 64 FD | 	ret
1c064                 | 
1c064                 | ' '' this is not a main program.
1c064                 | ' 
1c064                 | ' '****************************************************************************************************************
1c064                 | ' '                                                                                                             	*
1c064                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1c064                 | ' '                                                                                                            	*
1c064                 | ' ' base - HDMI base pin												*
1c064                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1c064                 | ' '														*
1c064                 | ' '														*
1c064                 | ' '****************************************************************************************************************
1c064                 | ' 
1c064                 | ' pub start(base,mb):result |i
1c064                 | _hg010b_spin2_start
1c064                 | ' 
1c064                 | ' '--------------------------- initialize pointers and variables
1c064                 | ' 
1c064                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1c064     34 E4 05 F1 | 	add	objptr, #52
1c068     F2 FA 01 F6 | 	mov	result1, objptr
1c06c     28 E4 85 F1 | 	sub	objptr, #40
1c070     F2 FA 61 FC | 	wrlong	result1, objptr
1c074                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1c074                 | ' hdmibase:=base							' HDMI base pin, 8*n
1c074     18 E4 05 F1 | 	add	objptr, #24
1c078     F2 12 62 FC | 	wrlong	arg01, objptr
1c07c                 | ' mailbox_ptr:=mb		
1c07c     04 E4 05 F1 | 	add	objptr, #4
1c080     F2 14 62 FC | 	wrlong	arg02, objptr
1c084                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1c084     C1 E5 05 F1 | 	add	objptr, #449
1c088     F2 14 62 FC | 	wrlong	arg02, objptr
1c08c                 | ' sprite_ptr:=@spr1ptr
1c08c     D8 E4 85 F1 | 	sub	objptr, #216
1c090     F2 FA 01 F6 | 	mov	result1, objptr
1c094     E5 E4 85 F1 | 	sub	objptr, #229
1c098     F2 FA 61 FC | 	wrlong	result1, objptr
1c09c                 | ' 
1c09c                 | ' 		'
1c09c                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1c09c     E5 E4 05 F1 | 	add	objptr, #229
1c0a0     F2 FA 01 FB | 	rdlong	result1, objptr
1c0a4     D0 FA 05 F1 | 	add	result1, #208
1c0a8     FD 10 58 FC | 	wrword	#8, result1
1c0ac                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1c0ac     F2 16 02 FB | 	rdlong	arg03, objptr
1c0b0     D2 16 06 F1 | 	add	arg03, #210
1c0b4     0B 21 58 FC | 	wrword	#16, arg03
1c0b8                 | ' leading_spaces:=0				'
1c0b8     A5 E5 05 F1 | 	add	objptr, #421
1c0bc     F2 00 68 FC | 	wrlong	#0, objptr
1c0c0                 | ' 
1c0c0                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1c0c0     99 E4 85 F1 | 	sub	objptr, #153
1c0c4     00 00 A0 FF 
1c0c8     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1c0cc                 | ' emptydl[1]:=0
1c0cc     04 E4 05 F1 | 	add	objptr, #4
1c0d0     F2 00 68 FC | 	wrlong	#0, objptr
1c0d4                 | ' 
1c0d4                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1c0d4                 | ' 
1c0d4                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1c0d4     28 E5 85 F1 | 	sub	objptr, #296
1c0d8     F2 02 68 FC | 	wrlong	#1, objptr
1c0dc                 | ' if s_debug<>0
1c0dc                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1c0dc     20 00 80 FF 
1c0e0     F2 00 68 FC | 	wrlong	##16384, objptr
1c0e4     F9 E4 85 F1 | 	sub	objptr, #249
1c0e8                 | ' setmode()							' set the mode, see below
1c0e8     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1c0ec                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1c0ec     49 E4 05 F1 | 	add	objptr, #73
1c0f0     F2 FA 01 F6 | 	mov	result1, objptr
1c0f4     35 E4 85 F1 | 	sub	objptr, #53
1c0f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c0fc                 | ' cursor_ptr:=@cursor_x						
1c0fc     28 E4 05 F1 | 	add	objptr, #40
1c100     F2 16 02 F6 | 	mov	arg03, objptr
1c104     2C E4 85 F1 | 	sub	objptr, #44
1c108     F2 16 62 FC | 	wrlong	arg03, objptr
1c10c                 | ' fontnum:=0  							' start with a PC type font 
1c10c     55 E4 05 F1 | 	add	objptr, #85
1c110     F2 00 68 FC | 	wrlong	#0, objptr
1c114                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1c114     1C E4 05 F1 | 	add	objptr, #28
1c118     F2 12 02 F6 | 	mov	arg01, objptr
1c11c     81 E4 85 F1 | 	sub	objptr, #129
1c120     10 00 00 FF 
1c124     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1c128     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1c12c     10 00 00 FF 
1c130     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1c134     10 16 06 F6 | 	mov	arg03, #16
1c138     1C 29 B0 FD | 	call	#__system____builtin_memmove
1c13c                 | ' leading_spaces:=0
1c13c     01 00 00 FF 
1c140     B6 E4 05 F1 | 	add	objptr, ##694
1c144     F2 00 68 FC | 	wrlong	#0, objptr
1c148     01 00 00 FF 
1c14c     B6 E4 85 F1 | 	sub	objptr, ##694
1c150                 | ' '---------------------------- initialize a cursor (MSDOS type)
1c150                 | ' 
1c150                 | ' initcursor(154)
1c150     9A 12 06 F6 | 	mov	arg01, #154
1c154     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1c158                 | ' 
1c158                 | ' '---------------------------- start the cog
1c158                 | ' 
1c158                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1c158     10 00 00 FF 
1c15c     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1c160     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1c164     10 00 00 FF 
1c168     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1c16c     14 E4 05 F1 | 	add	objptr, #20
1c170     10 FA 05 F6 | 	mov	result1, #16
1c174     28 E4 61 FD | 	setq	objptr
1c178     0A FB F1 FC | 	coginit	result1, arg02 wc
1c17c     01 FA 65 C6 |  if_b	neg	result1, #1
1c180     1C E4 05 F1 | 	add	objptr, #28
1c184     F2 FA 61 FC | 	wrlong	result1, objptr
1c188     30 E4 85 F1 | 	sub	objptr, #48
1c18c                 | ' waitms(40)							' wait for stabilize
1c18c     28 12 06 F6 | 	mov	arg01, #40
1c190     98 2C B0 FD | 	call	#__system___waitms
1c194                 | ' return cog							' return the driver's cog #
1c194     30 E4 05 F1 | 	add	objptr, #48
1c198     F2 FA 01 FB | 	rdlong	result1, objptr
1c19c     30 E4 85 F1 | 	sub	objptr, #48
1c1a0                 | _hg010b_spin2_start_ret
1c1a0     2D 00 64 FD | 	ret
1c1a4                 | 
1c1a4                 | ' 
1c1a4                 | ' 
1c1a4                 | ' '**************************************************************************************************************** 
1c1a4                 | ' '                                                                                                             	*
1c1a4                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1c1a4                 | ' '  Mode number - see start() above or bits below								*
1c1a4                 | ' '                                                                                                             	*
1c1a4                 | ' '****************************************************************************************************************
1c1a4                 | ' 
1c1a4                 | ' '---------------------------- initialize a cursor (MSDOS type)
1c1a4                 | ' pub initcursor(color) |i
1c1a4                 | _hg010b_spin2_initcursor
1c1a4     03 4A 05 F6 | 	mov	COUNT_, #3
1c1a8     A8 00 A0 FD | 	call	#pushregs_
1c1ac     09 1F 02 F6 | 	mov	local01, arg01
1c1b0                 | ' 
1c1b0                 | ' cursor_x:=0							' place the cursor at 0:0
1c1b0     3C E4 05 F1 | 	add	objptr, #60
1c1b4     F2 00 58 FC | 	wrword	#0, objptr
1c1b8                 | ' cursor_y:=0
1c1b8     02 E4 05 F1 | 	add	objptr, #2
1c1bc     F2 00 48 FC | 	wrbyte	#0, objptr
1c1c0                 | ' repeat i from 0 to 111
1c1c0     00 20 06 F6 | 	mov	local02, #0
1c1c4     F8 E5 05 F1 | 	add	objptr, #504
1c1c8     97 1A 48 FB | 	callpa	#(@LR__2172-@LR__2170)>>2,fcache_load_ptr_
1c1cc                 | LR__2170
1c1cc                 | '   cursor[i]:=0
1c1cc     10 23 02 F6 | 	mov	local03, local02
1c1d0     F2 22 02 F1 | 	add	local03, objptr
1c1d4     11 01 48 FC | 	wrbyte	#0, local03
1c1d8     01 20 06 F1 | 	add	local02, #1
1c1dc     70 20 56 F2 | 	cmps	local02, #112 wc
1c1e0     E8 FF 9F CD |  if_b	jmp	#LR__2170
1c1e4                 | ' repeat i from 112 to 127
1c1e4     70 20 06 F6 | 	mov	local02, #112
1c1e8                 | LR__2171
1c1e8                 | '   cursor[i]:=color  
1c1e8     10 23 02 F6 | 	mov	local03, local02
1c1ec     F2 22 02 F1 | 	add	local03, objptr
1c1f0     11 1F 42 FC | 	wrbyte	local01, local03
1c1f4     01 20 06 F1 | 	add	local02, #1
1c1f8     80 20 16 F2 | 	cmp	local02, #128 wc
1c1fc     E8 FF 9F CD |  if_b	jmp	#LR__2171
1c200                 | LR__2172
1c200                 | ' 'repeat i from 0 to 127
1c200                 | ' '  if ((i/8)//2)
1c200                 | ' '    cursor[i]:=15
1c200                 | ' '  else
1c200                 | ' '    cursor[i]:=0
1c200                 | ' '  if i>=120    
1c200                 | ' '    cursor[i]:=40
1c200                 | ' setspriteptr(17,@cursor)
1c200     F2 14 02 F6 | 	mov	arg02, objptr
1c204     01 00 00 FF 
1c208     36 E4 85 F1 | 	sub	objptr, ##566
1c20c     11 12 06 F6 | 	mov	arg01, #17
1c210     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1c214                 | ' setspritesize(17,8,16)
1c214     11 12 06 F6 | 	mov	arg01, #17
1c218     08 14 06 F6 | 	mov	arg02, #8
1c21c     10 16 06 F6 | 	mov	arg03, #16
1c220     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1c224                 | ' setspritepos(17,0,0)
1c224     11 12 06 F6 | 	mov	arg01, #17
1c228     00 14 06 F6 | 	mov	arg02, #0
1c22c     00 16 06 F6 | 	mov	arg03, #0
1c230     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1c234                 | ' cursorshape:=14
1c234     0B 00 00 FF 
1c238     C6 E4 05 F1 | 	add	objptr, ##5830
1c23c     F2 1C 68 FC | 	wrlong	#14, objptr
1c240                 | ' cursorcolor:=color
1c240     04 E4 85 F1 | 	sub	objptr, #4
1c244     F2 1E 62 FC | 	wrlong	local01, objptr
1c248     0B 00 00 FF 
1c24c     C2 E4 85 F1 | 	sub	objptr, ##5826
1c250     A7 F0 03 F6 | 	mov	ptra, fp
1c254     B2 00 A0 FD | 	call	#popregs_
1c258                 | _hg010b_spin2_initcursor_ret
1c258     2D 00 64 FD | 	ret
1c25c                 | 
1c25c                 | ' 
1c25c                 | ' pub setcursorshape(shape) | i
1c25c                 | _hg010b_spin2_setcursorshape
1c25c                 | ' 
1c25c                 | ' cursorshape:=shape
1c25c     0B 00 00 FF 
1c260     C6 E4 05 F1 | 	add	objptr, ##5830
1c264     F2 12 62 FC | 	wrlong	arg01, objptr
1c268                 | ' repeat i from 0 to (8*cursorshape)-1
1c268     00 00 06 F6 | 	mov	_var01, #0
1c26c     09 03 02 F6 | 	mov	_var02, arg01
1c270     03 02 66 F0 | 	shl	_var02, #3
1c274     01 02 86 F1 | 	sub	_var02, #1
1c278     00 02 56 F2 | 	cmps	_var02, #0 wc
1c27c     01 04 86 F6 | 	negc	_var03, #1
1c280     02 07 02 F6 | 	mov	_var04, _var03
1c284     02 03 02 F1 | 	add	_var02, _var03
1c288     0A 00 00 FF 
1c28c     90 E4 85 F1 | 	sub	objptr, ##5264
1c290     97 0C 48 FB | 	callpa	#(@LR__2181-@LR__2180)>>2,fcache_load_ptr_
1c294                 | LR__2180
1c294                 | '   cursor[i]:=0
1c294     00 05 02 F6 | 	mov	_var03, _var01
1c298     F2 04 02 F1 | 	add	_var03, objptr
1c29c     02 01 48 FC | 	wrbyte	#0, _var03
1c2a0     03 01 02 F1 | 	add	_var01, _var04
1c2a4     01 01 0A F2 | 	cmp	_var01, _var02 wz
1c2a8     E8 FF 9F 5D |  if_ne	jmp	#LR__2180
1c2ac                 | LR__2181
1c2ac                 | ' repeat i from 8*cursorshape to 127
1c2ac     0A 00 00 FF 
1c2b0     90 E4 05 F1 | 	add	objptr, ##5264
1c2b4     F2 06 02 FB | 	rdlong	_var04, objptr
1c2b8     03 01 02 F6 | 	mov	_var01, _var04
1c2bc     03 00 66 F0 | 	shl	_var01, #3
1c2c0     0B 00 00 FF 
1c2c4     C6 E4 85 F1 | 	sub	objptr, ##5830
1c2c8     03 06 66 F0 | 	shl	_var04, #3
1c2cc     80 06 56 F2 | 	cmps	_var04, #128 wc
1c2d0     01 04 A6 F6 | 	negnc	_var03, #1
1c2d4     7F 02 06 F6 | 	mov	_var02, #127
1c2d8     02 03 02 F1 | 	add	_var02, _var03
1c2dc     97 1A 48 FB | 	callpa	#(@LR__2183-@LR__2182)>>2,fcache_load_ptr_
1c2e0                 | LR__2182
1c2e0                 | '   cursor[i]:=cursorcolor
1c2e0     00 07 02 F6 | 	mov	_var04, _var01
1c2e4     01 00 00 FF 
1c2e8     36 E4 05 F1 | 	add	objptr, ##566
1c2ec     F2 06 02 F1 | 	add	_var04, objptr
1c2f0     0A 00 00 FF 
1c2f4     8C E4 05 F1 | 	add	objptr, ##5260
1c2f8     F2 12 02 FB | 	rdlong	arg01, objptr
1c2fc     0B 00 00 FF 
1c300     C2 E4 85 F1 | 	sub	objptr, ##5826
1c304     03 13 42 FC | 	wrbyte	arg01, _var04
1c308     02 01 02 F1 | 	add	_var01, _var03
1c30c     01 01 0A F2 | 	cmp	_var01, _var02 wz
1c310     CC FF 9F 5D |  if_ne	jmp	#LR__2182
1c314                 | LR__2183
1c314                 | _hg010b_spin2_setcursorshape_ret
1c314     2D 00 64 FD | 	ret
1c318                 | 
1c318                 | ' 
1c318                 | ' pub setcursorcolor(color) | i
1c318                 | _hg010b_spin2_setcursorcolor
1c318                 | ' 
1c318                 | ' cursorcolor:=color
1c318     0B 00 00 FF 
1c31c     C2 E4 05 F1 | 	add	objptr, ##5826
1c320     F2 12 62 FC | 	wrlong	arg01, objptr
1c324                 | ' repeat i from 0 to (8*cursorshape)-1
1c324     00 12 06 F6 | 	mov	arg01, #0
1c328     04 E4 05 F1 | 	add	objptr, #4
1c32c     F2 00 02 FB | 	rdlong	_var01, objptr
1c330     03 00 66 F0 | 	shl	_var01, #3
1c334     01 00 86 F1 | 	sub	_var01, #1
1c338     00 00 56 F2 | 	cmps	_var01, #0 wc
1c33c     01 02 86 F6 | 	negc	_var02, #1
1c340     01 05 02 F6 | 	mov	_var03, _var02
1c344     01 01 02 F1 | 	add	_var01, _var02
1c348     0A 00 00 FF 
1c34c     90 E4 85 F1 | 	sub	objptr, ##5264
1c350     97 0C 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
1c354                 | LR__2190
1c354                 | '   cursor[i]:=0
1c354     09 03 02 F6 | 	mov	_var02, arg01
1c358     F2 02 02 F1 | 	add	_var02, objptr
1c35c     01 01 48 FC | 	wrbyte	#0, _var02
1c360     02 13 02 F1 | 	add	arg01, _var03
1c364     00 13 0A F2 | 	cmp	arg01, _var01 wz
1c368     E8 FF 9F 5D |  if_ne	jmp	#LR__2190
1c36c                 | LR__2191
1c36c                 | ' repeat i from 8*cursorshape to 127
1c36c     0A 00 00 FF 
1c370     90 E4 05 F1 | 	add	objptr, ##5264
1c374     F2 04 02 FB | 	rdlong	_var03, objptr
1c378     02 13 02 F6 | 	mov	arg01, _var03
1c37c     03 12 66 F0 | 	shl	arg01, #3
1c380     0B 00 00 FF 
1c384     C6 E4 85 F1 | 	sub	objptr, ##5830
1c388     03 04 66 F0 | 	shl	_var03, #3
1c38c     80 04 56 F2 | 	cmps	_var03, #128 wc
1c390     01 02 A6 F6 | 	negnc	_var02, #1
1c394     7F 00 06 F6 | 	mov	_var01, #127
1c398     01 01 02 F1 | 	add	_var01, _var02
1c39c     97 1A 48 FB | 	callpa	#(@LR__2193-@LR__2192)>>2,fcache_load_ptr_
1c3a0                 | LR__2192
1c3a0                 | '   cursor[i]:=cursorcolor
1c3a0     09 05 02 F6 | 	mov	_var03, arg01
1c3a4     01 00 00 FF 
1c3a8     36 E4 05 F1 | 	add	objptr, ##566
1c3ac     F2 04 02 F1 | 	add	_var03, objptr
1c3b0     0A 00 00 FF 
1c3b4     8C E4 05 F1 | 	add	objptr, ##5260
1c3b8     F2 06 02 FB | 	rdlong	_var04, objptr
1c3bc     0B 00 00 FF 
1c3c0     C2 E4 85 F1 | 	sub	objptr, ##5826
1c3c4     02 07 42 FC | 	wrbyte	_var04, _var03
1c3c8     01 13 02 F1 | 	add	arg01, _var02
1c3cc     00 13 0A F2 | 	cmp	arg01, _var01 wz
1c3d0     CC FF 9F 5D |  if_ne	jmp	#LR__2192
1c3d4                 | LR__2193
1c3d4                 | _hg010b_spin2_setcursorcolor_ret
1c3d4     2D 00 64 FD | 	ret
1c3d8                 | 
1c3d8                 | '   
1c3d8                 | '   
1c3d8                 | '   
1c3d8                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1c3d8                 | _hg010b_spin2_setmode
1c3d8     02 4A 05 F6 | 	mov	COUNT_, #2
1c3dc     A8 00 A0 FD | 	call	#pushregs_
1c3e0                 | ' 
1c3e0                 | ' 
1c3e0                 | ' dl_ptr:=@emptydl[0]
1c3e0     01 00 00 FF 
1c3e4     1D E4 05 F1 | 	add	objptr, ##541
1c3e8     F2 1A 02 F6 | 	mov	arg05, objptr
1c3ec     FD E5 85 F1 | 	sub	objptr, #509
1c3f0     F2 1A 62 FC | 	wrlong	arg05, objptr
1c3f4                 | ' 
1c3f4                 | ' if cog>0 
1c3f4     10 E4 05 F1 | 	add	objptr, #16
1c3f8     F2 1A 02 FB | 	rdlong	arg05, objptr
1c3fc     30 E4 85 F1 | 	sub	objptr, #48
1c400     01 1A 56 F2 | 	cmps	arg05, #1 wc
1c404                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1c404     01 12 06 36 |  if_ae	mov	arg01, #1
1c408     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1c40c                 | ' xres:=1024
1c40c     01 00 00 FF 
1c410     26 E4 05 F1 | 	add	objptr, ##550
1c414     02 00 80 FF 
1c418     F2 00 68 FC | 	wrlong	##1024, objptr
1c41c                 | ' yres:=600
1c41c     04 E4 05 F1 | 	add	objptr, #4
1c420     01 00 80 FF 
1c424     F2 B0 68 FC | 	wrlong	##600, objptr
1c428                 | ' ppl:=(timings[3])
1c428     10 00 00 FF 
1c42c     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1c430     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1c434     51 E5 85 F1 | 	sub	objptr, #337
1c438     F2 1A 62 FC | 	wrlong	arg05, objptr
1c43c                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1c43c     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1c440     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1c444     01 1E 66 F0 | 	shl	local01, #1
1c448     80 E4 85 F1 | 	sub	objptr, #128
1c44c     F2 1E 62 FC | 	wrlong	local01, objptr
1c450                 | ' cpl1:=cpl '' todo remove
1c450     04 E4 05 F1 | 	add	objptr, #4
1c454     F2 1E 62 FC | 	wrlong	local01, objptr
1c458                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1c458     02 00 00 FF 
1c45c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1c460     41 E4 85 F1 | 	sub	objptr, #65
1c464     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1c468                 | ' repeat i from 0 to 3
1c468     00 20 06 F6 | 	mov	local02, #0
1c46c     02 00 00 FF 
1c470     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1c474     08 E4 05 F1 | 	add	objptr, #8
1c478     97 20 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
1c47c                 | LR__2200
1c47c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1c47c     10 1F 02 F6 | 	mov	local01, local02
1c480     02 1E 66 F0 | 	shl	local01, #2
1c484     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1c488     F2 1A 02 FB | 	rdlong	arg05, objptr
1c48c     11 1A 66 F0 | 	shl	arg05, #17
1c490     0F 1F 02 FB | 	rdlong	local01, local01
1c494     0D 1F 02 F1 | 	add	local01, arg05
1c498     80 40 38 FF 
1c49c     00 1E 06 F1 | 	add	local01, ##1887502336
1c4a0     10 1B 02 F6 | 	mov	arg05, local02
1c4a4     02 1A 66 F0 | 	shl	arg05, #2
1c4a8     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1c4ac     0D 1F 62 FC | 	wrlong	local01, arg05
1c4b0     01 20 06 F1 | 	add	local02, #1
1c4b4     04 20 56 F2 | 	cmps	local02, #4 wc
1c4b8     C0 FF 9F CD |  if_b	jmp	#LR__2200
1c4bc                 | LR__2201
1c4bc     24 E4 85 F1 | 	sub	objptr, #36
1c4c0                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1c4c0     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1c4c4     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1c4c8     14 1E 66 FC | 	wrlong	local01, #20
1c4cc                 | ' hubset(timings[10])
1c4cc     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1c4d0     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1c4d4     10 00 00 FF 
1c4d8     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1c4dc     00 12 62 FD | 	hubset	arg01
1c4e0                 | ' waitms(1)                                                   	' wait for stabilization
1c4e0     01 12 06 F6 | 	mov	arg01, #1
1c4e4     44 29 B0 FD | 	call	#__system___waitms
1c4e8     10 00 00 FF 
1c4ec     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1c4f0     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1c4f4     61 E4 05 F1 | 	add	objptr, #97
1c4f8     F2 20 62 FC | 	wrlong	local02, objptr
1c4fc     10 1F 52 F6 | 	abs	local01, local02 wc
1c500     04 1E 46 F0 | 	shr	local01, #4
1c504     0F 1F 82 F6 | 	negc	local01, local01
1c508     9C E4 05 F1 | 	add	objptr, #156
1c50c     F2 1E 62 FC | 	wrlong	local01, objptr
1c510     A4 E4 85 F1 | 	sub	objptr, #164
1c514     F2 20 02 FB | 	rdlong	local02, objptr
1c518     08 E4 05 F1 | 	add	objptr, #8
1c51c     F2 1E 02 FB | 	rdlong	local01, objptr
1c520     0F 21 02 FD | 	qmul	local02, local01
1c524                 | ' lines:=timings[11]
1c524                 | ' t_lines:=lines/16
1c524                 | ' buflen:=cpl*lines						' framebuffer length in longs
1c524     29 E4 85 F1 | 	sub	objptr, #41
1c528     19 1E C6 F9 | 	decod	local01, #25
1c52c     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1c530     18 20 62 FD | 	getqx	local02
1c534     F2 20 62 FC | 	wrlong	local02, objptr
1c538     38 E4 85 F1 | 	sub	objptr, #56
1c53c     02 20 66 F0 | 	shl	local02, #2
1c540     10 1F 82 F1 | 	sub	local01, local02
1c544     F2 1E 62 FC | 	wrlong	local01, objptr
1c548     FD E4 05 F1 | 	add	objptr, #253
1c54c     F2 20 02 FB | 	rdlong	local02, objptr
1c550     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1c554     0D 21 02 FD | 	qmul	local02, arg05
1c558                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1c558                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1c558     F9 E4 85 F1 | 	sub	objptr, #249
1c55c                 | ' mode_ptr:=@timings						' set pointers to timings
1c55c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1c560                 | ' graphmode:=1024+512+192+48							' det global variable
1c560                 | ' makedl(graphmode)							' make a DL for the mode
1c560     03 00 00 FF 
1c564     F0 12 06 F6 | 	mov	arg01, ##1776
1c568     18 20 62 FD | 	getqx	local02
1c56c     10 1F 82 F1 | 	sub	local01, local02
1c570     F2 1E 62 FC | 	wrlong	local01, objptr
1c574     14 E4 05 F1 | 	add	objptr, #20
1c578     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1c57c     79 E4 05 F1 | 	add	objptr, #121
1c580     03 00 80 FF 
1c584     F2 E0 69 FC | 	wrlong	##1776, objptr
1c588     91 E4 85 F1 | 	sub	objptr, #145
1c58c     10 00 00 FF 
1c590     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1c594     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1c598                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1c598     F2 1E 02 FB | 	rdlong	local01, objptr
1c59c     DD E4 05 F1 | 	add	objptr, #221
1c5a0     F2 1E 62 FC | 	wrlong	local01, objptr
1c5a4                 | ' s_font_ptr:=font_ptr
1c5a4     D5 E4 85 F1 | 	sub	objptr, #213
1c5a8     F2 1E 02 FB | 	rdlong	local01, objptr
1c5ac     D9 E4 05 F1 | 	add	objptr, #217
1c5b0     F2 1E 62 FC | 	wrlong	local01, objptr
1c5b4                 | ' s_lines:=lines
1c5b4     80 E4 85 F1 | 	sub	objptr, #128
1c5b8     F2 1E 02 FB | 	rdlong	local01, objptr
1c5bc     84 E4 05 F1 | 	add	objptr, #132
1c5c0     F2 1E 62 FC | 	wrlong	local01, objptr
1c5c4                 | ' s_buflen:=buflen
1c5c4     AD E4 85 F1 | 	sub	objptr, #173
1c5c8     F2 1E 02 FB | 	rdlong	local01, objptr
1c5cc     B5 E4 05 F1 | 	add	objptr, #181
1c5d0     F2 1E 62 FC | 	wrlong	local01, objptr
1c5d4                 | ' s_cpl:=cpl
1c5d4     94 E4 85 F1 | 	sub	objptr, #148
1c5d8     F2 1E 02 FB | 	rdlong	local01, objptr
1c5dc     90 E4 05 F1 | 	add	objptr, #144
1c5e0     F2 1E 62 FC | 	wrlong	local01, objptr
1c5e4                 | ' s_cpl1:=cpl
1c5e4     90 E4 85 F1 | 	sub	objptr, #144
1c5e8     F2 1E 02 FB | 	rdlong	local01, objptr
1c5ec     98 E4 05 F1 | 	add	objptr, #152
1c5f0     F2 1E 62 FC | 	wrlong	local01, objptr
1c5f4                 | ' st_lines:=t_lines
1c5f4     0C E4 05 F1 | 	add	objptr, #12
1c5f8     F2 1E 02 FB | 	rdlong	local01, objptr
1c5fc     04 E4 05 F1 | 	add	objptr, #4
1c600     F2 1E 62 FC | 	wrlong	local01, objptr
1c604                 | ' ppl:=ppl/xzoom  
1c604     28 E4 85 F1 | 	sub	objptr, #40
1c608     F2 64 02 FB | 	rdlong	muldiva_, objptr
1c60c     2C E4 05 F1 | 	add	objptr, #44
1c610     F2 66 02 FB | 	rdlong	muldivb_, objptr
1c614     05 E5 85 F1 | 	sub	objptr, #261
1c618     BA 00 A0 FD | 	call	#divide_
1c61c     D9 E4 05 F1 | 	add	objptr, #217
1c620     F2 66 62 FC | 	wrlong	muldivb_, objptr
1c624                 | ' s_ppl:=ppl
1c624     1C E4 05 F1 | 	add	objptr, #28
1c628     F2 66 62 FC | 	wrlong	muldivb_, objptr
1c62c     F5 E4 85 F1 | 	sub	objptr, #245
1c630                 | ' waitms(20)							' wait 
1c630     14 12 06 F6 | 	mov	arg01, #20
1c634     F4 27 B0 FD | 	call	#__system___waitms
1c638                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1c638     04 E4 05 F1 | 	add	objptr, #4
1c63c     F2 12 02 FB | 	rdlong	arg01, objptr
1c640     04 E4 85 F1 | 	sub	objptr, #4
1c644     F2 16 02 FB | 	rdlong	arg03, objptr
1c648     09 17 82 F1 | 	sub	arg03, arg01
1c64c     20 14 06 F6 | 	mov	arg02, #32
1c650     00 18 06 F6 | 	mov	arg04, #0
1c654     01 1A 06 F6 | 	mov	arg05, #1
1c658     0B 00 00 FF 
1c65c     CC E4 05 F1 | 	add	objptr, ##5836
1c660     E8 19 B0 FD | 	call	#_psram_spin2_fill
1c664     0B 00 00 FF 
1c668     CC E4 85 F1 | 	sub	objptr, ##5836
1c66c     A7 F0 03 F6 | 	mov	ptra, fp
1c670     B2 00 A0 FD | 	call	#popregs_
1c674                 | _hg010b_spin2_setmode_ret
1c674     2D 00 64 FD | 	ret
1c678                 | 
1c678                 | ' 
1c678                 | ' '****************************************************************************************************************
1c678                 | ' '                                                                                                             	*
1c678                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1c678                 | ' '                                                                                                             	*
1c678                 | ' '****************************************************************************************************************
1c678                 | ' 
1c678                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1c678                 | _hg010b_spin2_makedl
1c678                 | ' 
1c678                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1c678                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1c678                 | ' repeat i from 0 to 11                                                           ' clear DL
1c678     00 00 06 F6 | 	mov	_var01, #0
1c67c     ED E5 05 F1 | 	add	objptr, #493
1c680     97 0E 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
1c684                 | LR__2210
1c684                 | '   displaylist[i]:=0 
1c684     00 03 02 F6 | 	mov	_var02, _var01
1c688     02 02 66 F0 | 	shl	_var02, #2
1c68c     F2 02 02 F1 | 	add	_var02, objptr
1c690     01 01 68 FC | 	wrlong	#0, _var02
1c694     01 00 06 F1 | 	add	_var01, #1
1c698     0C 00 56 F2 | 	cmps	_var01, #12 wc
1c69c     E4 FF 9F CD |  if_b	jmp	#LR__2210
1c6a0                 | LR__2211
1c6a0                 | '                         ' 
1c6a0                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1c6a0     8C E5 85 F1 | 	sub	objptr, #396
1c6a4     F2 02 02 FB | 	rdlong	_var02, objptr
1c6a8     14 02 66 F0 | 	shl	_var02, #20
1c6ac     01 02 06 F1 | 	add	_var02, #1
1c6b0     04 E4 85 F1 | 	sub	objptr, #4
1c6b4     F2 00 02 FB | 	rdlong	_var01, objptr
1c6b8     02 00 66 F0 | 	shl	_var01, #2
1c6bc     04 00 66 F0 | 	shl	_var01, #4
1c6c0     00 03 02 F1 | 	add	_var02, _var01
1c6c4     90 E5 05 F1 | 	add	objptr, #400
1c6c8     F2 02 62 FC | 	wrlong	_var02, objptr
1c6cc     ED E5 85 F1 | 	sub	objptr, #493
1c6d0                 | ' displaylist[1]:=buf_ptr<<4+%10  
1c6d0     F2 02 02 FB | 	rdlong	_var02, objptr
1c6d4     04 02 66 F0 | 	shl	_var02, #4
1c6d8     02 02 06 F1 | 	add	_var02, #2
1c6dc     F1 E5 05 F1 | 	add	objptr, #497
1c6e0     F2 02 62 FC | 	wrlong	_var02, objptr
1c6e4                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1c6e4     04 E4 85 F1 | 	sub	objptr, #4
1c6e8     F2 02 02 F6 | 	mov	_var02, objptr
1c6ec     CD E5 85 F1 | 	sub	objptr, #461
1c6f0     F2 02 62 FC | 	wrlong	_var02, objptr
1c6f4     20 E4 85 F1 | 	sub	objptr, #32
1c6f8                 | _hg010b_spin2_makedl_ret
1c6f8     2D 00 64 FD | 	ret
1c6fc                 | 
1c6fc                 | ' 
1c6fc                 | ' 
1c6fc                 | ' '****************************************************************************************************************
1c6fc                 | ' '                                                                        					*
1c6fc                 | ' '  Graphic primitives                                                    					*
1c6fc                 | ' '                                                                        					*
1c6fc                 | ' '****************************************************************************************************************
1c6fc                 | ' 
1c6fc                 | ' pub setspriteptr(num,ptr)
1c6fc                 | _hg010b_spin2_setspriteptr
1c6fc                 | ' long[@spr1ptr+12*num]:=ptr
1c6fc     11 E5 05 F1 | 	add	objptr, #273
1c700     F2 00 02 F6 | 	mov	_var01, objptr
1c704     09 03 02 F6 | 	mov	_var02, arg01
1c708     01 02 66 F0 | 	shl	_var02, #1
1c70c     09 03 02 F1 | 	add	_var02, arg01
1c710     02 02 66 F0 | 	shl	_var02, #2
1c714     01 01 02 F1 | 	add	_var01, _var02
1c718     00 15 62 FC | 	wrlong	arg02, _var01
1c71c     11 E5 85 F1 | 	sub	objptr, #273
1c720                 | _hg010b_spin2_setspriteptr_ret
1c720     2D 00 64 FD | 	ret
1c724                 | 
1c724                 | ' 
1c724                 | ' pub setspritepos(num,x,y)
1c724                 | _hg010b_spin2_setspritepos
1c724                 | ' if y>601
1c724     01 00 00 FF 
1c728     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1c72c                 | '   y:=601
1c72c     01 00 00 3F 
1c730     59 16 06 36 |  if_ae	mov	arg03, ##601
1c734                 | ' if x>1024
1c734     02 00 00 FF 
1c738     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1c73c                 | '   x:=1024
1c73c     0A 14 C6 39 |  if_ae	decod	arg02, #10
1c740                 | ' word[@spr1ptr+12*num+4]:=x
1c740     11 E5 05 F1 | 	add	objptr, #273
1c744     F2 00 02 F6 | 	mov	_var01, objptr
1c748     09 03 02 F6 | 	mov	_var02, arg01
1c74c     01 02 66 F0 | 	shl	_var02, #1
1c750     09 03 02 F1 | 	add	_var02, arg01
1c754     02 02 66 F0 | 	shl	_var02, #2
1c758     01 01 02 F1 | 	add	_var01, _var02
1c75c     04 00 06 F1 | 	add	_var01, #4
1c760     00 15 52 FC | 	wrword	arg02, _var01
1c764                 | ' word[@spr1ptr+12*num+6]:=y
1c764     F2 00 02 F6 | 	mov	_var01, objptr
1c768     09 03 02 F6 | 	mov	_var02, arg01
1c76c     01 02 66 F0 | 	shl	_var02, #1
1c770     09 03 02 F1 | 	add	_var02, arg01
1c774     02 02 66 F0 | 	shl	_var02, #2
1c778     01 01 02 F1 | 	add	_var01, _var02
1c77c     06 00 06 F1 | 	add	_var01, #6
1c780     00 17 52 FC | 	wrword	arg03, _var01
1c784     11 E5 85 F1 | 	sub	objptr, #273
1c788                 | _hg010b_spin2_setspritepos_ret
1c788     2D 00 64 FD | 	ret
1c78c                 | 
1c78c                 | ' 
1c78c                 | ' pub setspritesize(num,w,h)
1c78c                 | _hg010b_spin2_setspritesize
1c78c                 | ' word[@spr1ptr+12*num+8]:=w
1c78c     11 E5 05 F1 | 	add	objptr, #273
1c790     F2 00 02 F6 | 	mov	_var01, objptr
1c794     09 03 02 F6 | 	mov	_var02, arg01
1c798     01 02 66 F0 | 	shl	_var02, #1
1c79c     09 03 02 F1 | 	add	_var02, arg01
1c7a0     02 02 66 F0 | 	shl	_var02, #2
1c7a4     01 01 02 F1 | 	add	_var01, _var02
1c7a8     08 00 06 F1 | 	add	_var01, #8
1c7ac     00 15 52 FC | 	wrword	arg02, _var01
1c7b0                 | ' word[@spr1ptr+12*num+10]:=h
1c7b0     F2 00 02 F6 | 	mov	_var01, objptr
1c7b4     09 03 02 F6 | 	mov	_var02, arg01
1c7b8     01 02 66 F0 | 	shl	_var02, #1
1c7bc     09 03 02 F1 | 	add	_var02, arg01
1c7c0     02 02 66 F0 | 	shl	_var02, #2
1c7c4     01 01 02 F1 | 	add	_var01, _var02
1c7c8     0A 00 06 F1 | 	add	_var01, #10
1c7cc     00 17 52 FC | 	wrword	arg03, _var01
1c7d0     11 E5 85 F1 | 	sub	objptr, #273
1c7d4                 | _hg010b_spin2_setspritesize_ret
1c7d4     2D 00 64 FD | 	ret
1c7d8                 | 
1c7d8                 | ' 
1c7d8                 | ' 
1c7d8                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1c7d8                 | ' 
1c7d8                 | ' 
1c7d8                 | ' pub putpixel(x,y,c)
1c7d8                 | _hg010b_spin2_putpixel
1c7d8     04 4A 05 F6 | 	mov	COUNT_, #4
1c7dc     A8 00 A0 FD | 	call	#pushregs_
1c7e0     09 1F 02 F6 | 	mov	local01, arg01
1c7e4                 | ' 
1c7e4                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1c7e4     00 20 06 F6 | 	mov	local02, #0
1c7e8     00 1E 56 F2 | 	cmps	local01, #0 wc
1c7ec     01 20 66 36 |  if_ae	neg	local02, #1
1c7f0     E9 E4 05 F1 | 	add	objptr, #233
1c7f4     F2 1A 02 FB | 	rdlong	arg05, objptr
1c7f8     02 1A 66 F0 | 	shl	arg05, #2
1c7fc     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1c800     11 23 A2 F1 | 	subx	local03, local03
1c804     11 21 02 F5 | 	and	local02, local03
1c808     00 22 06 F6 | 	mov	local03, #0
1c80c     00 14 56 F2 | 	cmps	arg02, #0 wc
1c810     01 22 66 36 |  if_ae	neg	local03, #1
1c814     11 21 02 F5 | 	and	local02, local03
1c818     04 E4 85 F1 | 	sub	objptr, #4
1c81c     F2 22 02 FB | 	rdlong	local03, objptr
1c820     E5 E4 85 F1 | 	sub	objptr, #229
1c824     11 15 52 F2 | 	cmps	arg02, local03 wc
1c828     12 25 A2 F1 | 	subx	local04, local04
1c82c     12 21 CA F7 | 	test	local02, local04 wz
1c830     48 00 90 AD |  if_e	jmp	#LR__2220
1c834     DD E4 05 F1 | 	add	objptr, #221
1c838     F2 12 02 FB | 	rdlong	arg01, objptr
1c83c     14 E4 05 F1 | 	add	objptr, #20
1c840     F2 24 02 FB | 	rdlong	local04, objptr
1c844     02 24 66 F0 | 	shl	local04, #2
1c848     0A 25 02 FD | 	qmul	local04, arg02
1c84c                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1c84c     0B 15 02 F6 | 	mov	arg02, arg03
1c850     01 16 06 F6 | 	mov	arg03, #1
1c854     00 18 06 F6 | 	mov	arg04, #0
1c858     01 1A 06 F6 | 	mov	arg05, #1
1c85c     0A 00 00 FF 
1c860     DB E5 05 F1 | 	add	objptr, ##5595
1c864     18 24 62 FD | 	getqx	local04
1c868     0F 25 02 F1 | 	add	local04, local01
1c86c     12 13 02 F1 | 	add	arg01, local04
1c870     D8 17 B0 FD | 	call	#_psram_spin2_fill
1c874     0B 00 00 FF 
1c878     CC E4 85 F1 | 	sub	objptr, ##5836
1c87c                 | LR__2220
1c87c     A7 F0 03 F6 | 	mov	ptra, fp
1c880     B2 00 A0 FD | 	call	#popregs_
1c884                 | _hg010b_spin2_putpixel_ret
1c884     2D 00 64 FD | 	ret
1c888                 | 
1c888                 | ' 
1c888                 | ' pub putpixel2(x,y,c)
1c888                 | _hg010b_spin2_putpixel2
1c888     02 4A 05 F6 | 	mov	COUNT_, #2
1c88c     A8 00 A0 FD | 	call	#pushregs_
1c890     DD E4 05 F1 | 	add	objptr, #221
1c894     F2 1E 02 FB | 	rdlong	local01, objptr
1c898     14 E4 05 F1 | 	add	objptr, #20
1c89c     F2 1A 02 FB | 	rdlong	arg05, objptr
1c8a0     02 1A 66 F0 | 	shl	arg05, #2
1c8a4     0A 1B 02 FD | 	qmul	arg05, arg02
1c8a8                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1c8a8     0B 15 02 F6 | 	mov	arg02, arg03
1c8ac     01 16 06 F6 | 	mov	arg03, #1
1c8b0     00 18 06 F6 | 	mov	arg04, #0
1c8b4     01 1A 06 F6 | 	mov	arg05, #1
1c8b8     0A 00 00 FF 
1c8bc     DB E5 05 F1 | 	add	objptr, ##5595
1c8c0     18 20 62 FD | 	getqx	local02
1c8c4     09 21 02 F1 | 	add	local02, arg01
1c8c8     10 1F 02 F1 | 	add	local01, local02
1c8cc     0F 13 02 F6 | 	mov	arg01, local01
1c8d0     78 17 B0 FD | 	call	#_psram_spin2_fill
1c8d4     0B 00 00 FF 
1c8d8     CC E4 85 F1 | 	sub	objptr, ##5836
1c8dc     A7 F0 03 F6 | 	mov	ptra, fp
1c8e0     B2 00 A0 FD | 	call	#popregs_
1c8e4                 | _hg010b_spin2_putpixel2_ret
1c8e4     2D 00 64 FD | 	ret
1c8e8                 | 
1c8e8                 | ' 
1c8e8                 | ' pub getpixel2(x,y): c 
1c8e8                 | _hg010b_spin2_getpixel2
1c8e8     02 4A 05 F6 | 	mov	COUNT_, #2
1c8ec     A8 00 A0 FD | 	call	#pushregs_
1c8f0     0C F0 07 F1 | 	add	ptra, #12
1c8f4     04 4E 05 F1 | 	add	fp, #4
1c8f8     A7 12 62 FC | 	wrlong	arg01, fp
1c8fc     04 4E 05 F1 | 	add	fp, #4
1c900     A7 14 62 FC | 	wrlong	arg02, fp
1c904     08 4E 85 F1 | 	sub	fp, #8
1c908     A7 00 68 FC | 	wrlong	#0, fp
1c90c     A7 12 02 F6 | 	mov	arg01, fp
1c910     DD E4 05 F1 | 	add	objptr, #221
1c914     F2 14 02 FB | 	rdlong	arg02, objptr
1c918     14 E4 05 F1 | 	add	objptr, #20
1c91c     F2 16 02 FB | 	rdlong	arg03, objptr
1c920     02 16 66 F0 | 	shl	arg03, #2
1c924     08 4E 05 F1 | 	add	fp, #8
1c928     A7 FA 01 FB | 	rdlong	result1, fp
1c92c     FD 16 02 FD | 	qmul	arg03, result1
1c930                 | ' 
1c930                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1c930     04 4E 85 F1 | 	sub	fp, #4
1c934     A7 1E 02 FB | 	rdlong	local01, fp
1c938     04 4E 85 F1 | 	sub	fp, #4
1c93c     01 16 06 F6 | 	mov	arg03, #1
1c940     0A 00 00 FF 
1c944     DB E5 05 F1 | 	add	objptr, ##5595
1c948     18 20 62 FD | 	getqx	local02
1c94c     0F 21 02 F1 | 	add	local02, local01
1c950     10 15 02 F1 | 	add	arg02, local02
1c954     BC 15 B0 FD | 	call	#_psram_spin2_read1
1c958     0B 00 00 FF 
1c95c     CC E4 85 F1 | 	sub	objptr, ##5836
1c960                 | ' return c
1c960     A7 FA 01 FB | 	rdlong	result1, fp
1c964     A7 F0 03 F6 | 	mov	ptra, fp
1c968     B2 00 A0 FD | 	call	#popregs_
1c96c                 | _hg010b_spin2_getpixel2_ret
1c96c     2D 00 64 FD | 	ret
1c970                 | 
1c970                 | '   
1c970                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1c970                 | ' 
1c970                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1c970                 | _hg010b_spin2_fastline
1c970     02 4A 05 F6 | 	mov	COUNT_, #2
1c974     A8 00 A0 FD | 	call	#pushregs_
1c978     09 1F 02 F6 | 	mov	local01, arg01
1c97c     0A 21 02 F6 | 	mov	local02, arg02
1c980                 | ' 
1c980                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1c980     00 16 56 F2 | 	cmps	arg03, #0 wc
1c984     F4 00 90 CD |  if_b	jmp	#LR__2230
1c988     01 00 00 FF 
1c98c     2A E4 05 F1 | 	add	objptr, ##554
1c990     F2 1A 02 FB | 	rdlong	arg05, objptr
1c994     01 00 00 FF 
1c998     2A E4 85 F1 | 	sub	objptr, ##554
1c99c     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1c9a0     D8 00 90 3D |  if_ae	jmp	#LR__2230
1c9a4     00 1E 56 F2 | 	cmps	local01, #0 wc
1c9a8     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1c9ac     CC 00 90 CD |  if_b	jmp	#LR__2230
1c9b0     01 00 00 FF 
1c9b4     26 E4 05 F1 | 	add	objptr, ##550
1c9b8     F2 1A 02 FB | 	rdlong	arg05, objptr
1c9bc     01 00 00 FF 
1c9c0     26 E4 85 F1 | 	sub	objptr, ##550
1c9c4     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1c9c8     01 00 00 1F 
1c9cc     26 E4 05 11 |  if_a	add	objptr, ##550
1c9d0     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1c9d4     01 00 00 1F 
1c9d8     26 E4 85 11 |  if_a	sub	objptr, ##550
1c9dc     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1c9e0                 | '   return
1c9e0     98 00 90 1D |  if_a	jmp	#LR__2230
1c9e4     10 1F 5A F2 | 	cmps	local01, local02 wcz
1c9e8     0F 1B 02 16 |  if_a	mov	arg05, local01
1c9ec     10 1F 02 16 |  if_a	mov	local01, local02
1c9f0     0D 21 02 16 |  if_a	mov	local02, arg05
1c9f4     00 1E 56 F2 | 	cmps	local01, #0 wc
1c9f8     00 1E 06 C6 |  if_b	mov	local01, #0
1c9fc     01 00 00 FF 
1ca00     26 E4 05 F1 | 	add	objptr, ##550
1ca04     F2 1A 02 FB | 	rdlong	arg05, objptr
1ca08     01 00 00 FF 
1ca0c     26 E4 85 F1 | 	sub	objptr, ##550
1ca10     0D 21 52 F2 | 	cmps	local02, arg05 wc
1ca14     01 00 00 3F 
1ca18     26 E4 05 31 |  if_ae	add	objptr, ##550
1ca1c     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1ca20     01 00 00 3F 
1ca24     26 E4 85 31 |  if_ae	sub	objptr, ##550
1ca28     DD E4 05 F1 | 	add	objptr, #221
1ca2c     F2 12 02 FB | 	rdlong	arg01, objptr
1ca30     14 E4 05 F1 | 	add	objptr, #20
1ca34     F2 1A 02 FB | 	rdlong	arg05, objptr
1ca38     02 1A 66 F0 | 	shl	arg05, #2
1ca3c     0B 1B 02 FD | 	qmul	arg05, arg03
1ca40                 | ' if x1>x2
1ca40                 | '   x1,x2:=x2,x1
1ca40                 | ' if x1<0 
1ca40                 | '   x1:=0
1ca40                 | ' if x2>=xres
1ca40                 | '   x2:=xres-1  
1ca40     01 20 86 31 |  if_ae	sub	local02, #1
1ca44                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1ca44     01 16 06 F6 | 	mov	arg03, #1
1ca48     10 17 02 F1 | 	add	arg03, local02
1ca4c     0F 17 82 F1 | 	sub	arg03, local01
1ca50     0C 15 02 F6 | 	mov	arg02, arg04
1ca54     00 18 06 F6 | 	mov	arg04, #0
1ca58     01 1A 06 F6 | 	mov	arg05, #1
1ca5c     0A 00 00 FF 
1ca60     DB E5 05 F1 | 	add	objptr, ##5595
1ca64     18 20 62 FD | 	getqx	local02
1ca68     0F 21 02 F1 | 	add	local02, local01
1ca6c     10 13 02 F1 | 	add	arg01, local02
1ca70     D8 15 B0 FD | 	call	#_psram_spin2_fill
1ca74     0B 00 00 FF 
1ca78     CC E4 85 F1 | 	sub	objptr, ##5836
1ca7c                 | LR__2230
1ca7c     A7 F0 03 F6 | 	mov	ptra, fp
1ca80     B2 00 A0 FD | 	call	#popregs_
1ca84                 | _hg010b_spin2_fastline_ret
1ca84     2D 00 64 FD | 	ret
1ca88                 | 
1ca88                 | ' 
1ca88                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1ca88                 | _hg010b_spin2_draw
1ca88     0E 4A 05 F6 | 	mov	COUNT_, #14
1ca8c     A8 00 A0 FD | 	call	#pushregs_
1ca90     09 1F 02 F6 | 	mov	local01, arg01
1ca94     0A 21 02 F6 | 	mov	local02, arg02
1ca98     0B 23 02 F6 | 	mov	local03, arg03
1ca9c     0C 25 02 F6 | 	mov	local04, arg04
1caa0     0D 27 02 F6 | 	mov	local05, arg05
1caa4                 | ' 
1caa4                 | ' if (y1==y2)
1caa4     12 21 0A F2 | 	cmp	local02, local04 wz
1caa8     18 00 90 5D |  if_ne	jmp	#LR__2240
1caac                 | '   fastline(x1,x2,y1,c)
1caac     0F 13 02 F6 | 	mov	arg01, local01
1cab0     11 15 02 F6 | 	mov	arg02, local03
1cab4     10 17 02 F6 | 	mov	arg03, local02
1cab8     13 19 02 F6 | 	mov	arg04, local05
1cabc     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1cac0     F8 00 90 FD | 	jmp	#LR__2246
1cac4                 | LR__2240
1cac4                 | ' else  
1cac4                 | '   x:=x1
1cac4     0F 29 02 F6 | 	mov	local06, local01
1cac8                 | '   y:=y1
1cac8     10 2B 02 F6 | 	mov	local07, local02
1cacc                 | ' 
1cacc                 | '   if (x1<x2) 
1cacc     11 1F 52 F2 | 	cmps	local01, local03 wc
1cad0                 | '     xi:=1
1cad0     01 2C 06 C6 |  if_b	mov	local08, #1
1cad4                 | '     dx:=x2-x1
1cad4     11 2F 02 C6 |  if_b	mov	local09, local03
1cad8     0F 2F 82 C1 |  if_b	sub	local09, local01
1cadc                 | '   else
1cadc                 | '     xi:=-1
1cadc     01 2C 66 36 |  if_ae	neg	local08, #1
1cae0                 | '     dx:=x1-x2
1cae0     11 1F 82 31 |  if_ae	sub	local01, local03
1cae4     0F 2F 02 36 |  if_ae	mov	local09, local01
1cae8                 | '   
1cae8                 | '   if (y1<y2) 
1cae8     12 21 52 F2 | 	cmps	local02, local04 wc
1caec                 | '     yi:=1
1caec     01 30 06 C6 |  if_b	mov	local10, #1
1caf0                 | '     dy:=y2-y1
1caf0     12 33 02 C6 |  if_b	mov	local11, local04
1caf4     10 33 82 C1 |  if_b	sub	local11, local02
1caf8                 | '   else
1caf8                 | '     yi:=-1
1caf8     01 30 66 36 |  if_ae	neg	local10, #1
1cafc                 | '     dy:=y1-y2
1cafc     12 21 82 31 |  if_ae	sub	local02, local04
1cb00     10 33 02 36 |  if_ae	mov	local11, local02
1cb04                 | ' 
1cb04                 | '   putpixel(x,y,c)
1cb04     13 17 02 F6 | 	mov	arg03, local05
1cb08     14 13 02 F6 | 	mov	arg01, local06
1cb0c     15 15 02 F6 | 	mov	arg02, local07
1cb10     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1cb14                 | ' 
1cb14                 | '   if (dx>dy)
1cb14     19 2F 5A F2 | 	cmps	local09, local11 wcz
1cb18     50 00 90 ED |  if_be	jmp	#LR__2242
1cb1c                 | '     ai:=(dy-dx)*2
1cb1c     19 35 02 F6 | 	mov	local12, local11
1cb20     17 35 82 F1 | 	sub	local12, local09
1cb24     01 34 66 F0 | 	shl	local12, #1
1cb28                 | '     bi:=dy*2
1cb28     01 32 66 F0 | 	shl	local11, #1
1cb2c     19 37 02 F6 | 	mov	local13, local11
1cb30                 | '     d:= bi-dx
1cb30     1B 39 02 F6 | 	mov	local14, local13
1cb34     17 39 82 F1 | 	sub	local14, local09
1cb38                 | '     repeat while (x<>x2) 
1cb38                 | LR__2241
1cb38     11 29 0A F2 | 	cmp	local06, local03 wz
1cb3c     7C 00 90 AD |  if_e	jmp	#LR__2245
1cb40                 | '       if (d>=0) 
1cb40     00 38 56 F2 | 	cmps	local14, #0 wc
1cb44                 | '         x+=xi
1cb44     16 29 02 31 |  if_ae	add	local06, local08
1cb48                 | '         y+=yi
1cb48     18 2B 02 31 |  if_ae	add	local07, local10
1cb4c                 | '         d+=ai
1cb4c     1A 39 02 31 |  if_ae	add	local14, local12
1cb50                 | '       else
1cb50                 | '         d+=bi
1cb50     1B 39 02 C1 |  if_b	add	local14, local13
1cb54                 | '         x+=xi
1cb54     16 29 02 C1 |  if_b	add	local06, local08
1cb58                 | '       putpixel(x,y,c)
1cb58     14 13 02 F6 | 	mov	arg01, local06
1cb5c     15 15 02 F6 | 	mov	arg02, local07
1cb60     13 17 02 F6 | 	mov	arg03, local05
1cb64     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1cb68     CC FF 9F FD | 	jmp	#LR__2241
1cb6c                 | LR__2242
1cb6c                 | '   else
1cb6c                 | '     ai:=(dx-dy)*2
1cb6c     17 35 02 F6 | 	mov	local12, local09
1cb70     19 35 82 F1 | 	sub	local12, local11
1cb74     01 34 66 F0 | 	shl	local12, #1
1cb78                 | '     bi:=dx*2
1cb78     01 2E 66 F0 | 	shl	local09, #1
1cb7c     17 37 02 F6 | 	mov	local13, local09
1cb80                 | '     d:=bi-dy
1cb80     1B 39 02 F6 | 	mov	local14, local13
1cb84     19 39 82 F1 | 	sub	local14, local11
1cb88                 | '     repeat while (y<>y2)
1cb88                 | LR__2243
1cb88     12 2B 0A F2 | 	cmp	local07, local04 wz
1cb8c     2C 00 90 AD |  if_e	jmp	#LR__2244
1cb90                 | '       if (d>=0)
1cb90     00 38 56 F2 | 	cmps	local14, #0 wc
1cb94                 | '         x+=xi
1cb94     16 29 02 31 |  if_ae	add	local06, local08
1cb98                 | '         y+=yi
1cb98     18 2B 02 31 |  if_ae	add	local07, local10
1cb9c                 | '         d+=ai
1cb9c     1A 39 02 31 |  if_ae	add	local14, local12
1cba0                 | '       else
1cba0                 | '         d+=bi
1cba0     1B 39 02 C1 |  if_b	add	local14, local13
1cba4                 | '         y+=yi
1cba4     18 2B 02 C1 |  if_b	add	local07, local10
1cba8                 | '       putpixel(x, y,c)
1cba8     14 13 02 F6 | 	mov	arg01, local06
1cbac     15 15 02 F6 | 	mov	arg02, local07
1cbb0     13 17 02 F6 | 	mov	arg03, local05
1cbb4     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1cbb8     CC FF 9F FD | 	jmp	#LR__2243
1cbbc                 | LR__2244
1cbbc                 | LR__2245
1cbbc                 | LR__2246
1cbbc     A7 F0 03 F6 | 	mov	ptra, fp
1cbc0     B2 00 A0 FD | 	call	#popregs_
1cbc4                 | _hg010b_spin2_draw_ret
1cbc4     2D 00 64 FD | 	ret
1cbc8                 | 
1cbc8                 | '  
1cbc8                 | ' pub fillpush(val) 
1cbc8                 | _hg010b_spin2_fillpush
1cbc8                 | ' fillstack[fillptr]:=val
1cbc8     0B 00 00 FF 
1cbcc     BA E4 05 F1 | 	add	objptr, ##5818
1cbd0     F2 00 02 FB | 	rdlong	_var01, objptr
1cbd4     02 00 66 F0 | 	shl	_var01, #2
1cbd8     0A 00 00 FF 
1cbdc     00 E4 85 F1 | 	sub	objptr, ##5120
1cbe0     F2 00 02 F1 | 	add	_var01, objptr
1cbe4     00 13 62 FC | 	wrlong	arg01, _var01
1cbe8                 | ' fillptr+=1   
1cbe8     0A 00 00 FF 
1cbec     00 E4 05 F1 | 	add	objptr, ##5120
1cbf0     F2 00 02 FB | 	rdlong	_var01, objptr
1cbf4     01 00 06 F1 | 	add	_var01, #1
1cbf8     F2 00 62 FC | 	wrlong	_var01, objptr
1cbfc     0B 00 00 FF 
1cc00     BA E4 85 F1 | 	sub	objptr, ##5818
1cc04                 | _hg010b_spin2_fillpush_ret
1cc04     2D 00 64 FD | 	ret
1cc08                 | 
1cc08                 | ' 
1cc08                 | '     
1cc08                 | ' pub fillpop() : val
1cc08                 | _hg010b_spin2_fillpop
1cc08                 | ' 
1cc08                 | ' fillptr-=1
1cc08     0B 00 00 FF 
1cc0c     BA E4 05 F1 | 	add	objptr, ##5818
1cc10     F2 FA 01 FB | 	rdlong	result1, objptr
1cc14     01 FA 85 F1 | 	sub	result1, #1
1cc18     F2 FA 61 FC | 	wrlong	result1, objptr
1cc1c                 | ' if fillptr<0
1cc1c     0B 00 00 FF 
1cc20     BA E4 85 F1 | 	sub	objptr, ##5818
1cc24     00 FA 55 F2 | 	cmps	result1, #0 wc
1cc28                 | '   fillptr:=0
1cc28     0B 00 00 CF 
1cc2c     BA E4 05 C1 |  if_b	add	objptr, ##5818
1cc30     F2 00 68 CC |  if_b	wrlong	#0, objptr
1cc34     0B 00 00 CF 
1cc38     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1cc3c                 | '   val:=-12345
1cc3c     E7 FF 7F CF 
1cc40     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1cc44     28 00 90 CD |  if_b	jmp	#LR__2250
1cc48                 | ' else 
1cc48                 | '   val:=fillstack[fillptr]
1cc48     0B 00 00 FF 
1cc4c     BA E4 05 F1 | 	add	objptr, ##5818
1cc50     F2 00 02 FB | 	rdlong	_var01, objptr
1cc54     02 00 66 F0 | 	shl	_var01, #2
1cc58     0A 00 00 FF 
1cc5c     00 E4 85 F1 | 	sub	objptr, ##5120
1cc60     F2 00 02 F1 | 	add	_var01, objptr
1cc64     00 01 02 FB | 	rdlong	_var01, _var01
1cc68     01 00 00 FF 
1cc6c     BA E4 85 F1 | 	sub	objptr, ##698
1cc70                 | LR__2250
1cc70                 | ' return val
1cc70     00 FB 01 F6 | 	mov	result1, _var01
1cc74                 | _hg010b_spin2_fillpop_ret
1cc74     2D 00 64 FD | 	ret
1cc78                 | 
1cc78                 | ' 
1cc78                 | '       
1cc78                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1cc78                 | _hg010b_spin2_fill
1cc78     0B 4A 05 F6 | 	mov	COUNT_, #11
1cc7c     A8 00 A0 FD | 	call	#pushregs_
1cc80                 | ' 
1cc80                 | ' newcolor:=newcolor & 255
1cc80     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1cc84                 | ' oldcolor:=oldcolor & 255
1cc84     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1cc88                 | ' 
1cc88                 | ' if (oldcolor == newcolor) 
1cc88     0F 21 0A F2 | 	cmp	local02, local01 wz
1cc8c                 | '   return
1cc8c     70 02 90 AD |  if_e	jmp	#LR__2269
1cc90                 | ' 
1cc90                 | ' fillptr:=0
1cc90     0B 00 00 FF 
1cc94     BA E4 05 F1 | 	add	objptr, ##5818
1cc98     F2 00 68 FC | 	wrlong	#0, objptr
1cc9c                 | ' fillmax:=0
1cc9c     04 E4 05 F1 | 	add	objptr, #4
1cca0     F2 00 68 FC | 	wrlong	#0, objptr
1cca4     0B 00 00 FF 
1cca8     BE E4 85 F1 | 	sub	objptr, ##5822
1ccac                 | ' fillpush(x)
1ccac     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1ccb0                 | ' fillpush(y)
1ccb0     0A 13 02 F6 | 	mov	arg01, arg02
1ccb4     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1ccb8                 | ' y:=fillpop()
1ccb8     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1ccbc     FD 22 02 F6 | 	mov	local03, result1
1ccc0                 | ' x:=fillpop()
1ccc0     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1ccc4     FD 24 02 F6 | 	mov	local04, result1
1ccc8                 | ' 'pinhigh(38)
1ccc8                 | ' repeat while (x>-1)       
1ccc8                 | LR__2260
1ccc8     00 24 56 F2 | 	cmps	local04, #0 wc
1cccc     30 02 90 CD |  if_b	jmp	#LR__2268
1ccd0                 | '  ' pintoggle(39)
1ccd0                 | '   x1 := x
1ccd0     12 27 02 F6 | 	mov	local05, local04
1ccd4                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1ccd4                 | LR__2261
1ccd4     00 28 06 F6 | 	mov	local06, #0
1ccd8     00 2A 06 F6 | 	mov	local07, #0
1ccdc     00 26 56 F2 | 	cmps	local05, #0 wc
1cce0     01 2A 66 36 |  if_ae	neg	local07, #1
1cce4     00 2A 0E F2 | 	cmp	local07, #0 wz
1cce8     00 28 26 56 |  if_ne	not	local06, #0
1ccec     00 2C 06 F6 | 	mov	local08, #0
1ccf0     00 2E 06 F6 | 	mov	local09, #0
1ccf4     11 15 02 F6 | 	mov	arg02, local03
1ccf8     13 13 02 F6 | 	mov	arg01, local05
1ccfc     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1cd00     10 FB 09 F2 | 	cmp	result1, local02 wz
1cd04     00 2E 26 A6 |  if_e	not	local09, #0
1cd08     00 2E 0E F2 | 	cmp	local09, #0 wz
1cd0c     00 2C 26 56 |  if_ne	not	local08, #0
1cd10     16 29 CA F7 | 	test	local06, local08 wz
1cd14                 | '     x1--
1cd14     01 26 86 51 |  if_ne	sub	local05, #1
1cd18     B8 FF 9F 5D |  if_ne	jmp	#LR__2261
1cd1c                 | '   x1++
1cd1c     01 26 06 F1 | 	add	local05, #1
1cd20                 | '   spanabove := 0
1cd20     00 30 06 F6 | 	mov	local10, #0
1cd24                 | '   spanbelow := 0
1cd24     00 32 06 F6 | 	mov	local11, #0
1cd28                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1cd28                 | LR__2262
1cd28     00 28 06 F6 | 	mov	local06, #0
1cd2c     02 00 00 FF 
1cd30     00 26 56 F2 | 	cmps	local05, ##1024 wc
1cd34     00 28 26 C6 |  if_b	not	local06, #0
1cd38     00 2C 06 F6 | 	mov	local08, #0
1cd3c     00 2E 06 F6 | 	mov	local09, #0
1cd40     11 15 02 F6 | 	mov	arg02, local03
1cd44     13 13 02 F6 | 	mov	arg01, local05
1cd48     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1cd4c     10 FB 09 F2 | 	cmp	result1, local02 wz
1cd50     00 2E 26 A6 |  if_e	not	local09, #0
1cd54     00 2E 0E F2 | 	cmp	local09, #0 wz
1cd58     00 2C 26 56 |  if_ne	not	local08, #0
1cd5c     16 29 CA F7 | 	test	local06, local08 wz
1cd60     88 01 90 AD |  if_e	jmp	#LR__2267
1cd64                 | '     putpixel2 (x1,y, newcolor & 255)
1cd64     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1cd68     13 13 02 F6 | 	mov	arg01, local05
1cd6c     11 15 02 F6 | 	mov	arg02, local03
1cd70     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1cd74                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1cd74     00 28 06 F6 | 	mov	local06, #0
1cd78     00 2A 06 F6 | 	mov	local07, #0
1cd7c     00 30 0E F2 | 	cmp	local10, #0 wz
1cd80     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1cd84     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1cd88     00 2A 0E F2 | 	cmp	local07, #0 wz
1cd8c     00 28 26 56 |  if_ne	not	local06, #0
1cd90     00 2C 06 F6 | 	mov	local08, #0
1cd94     00 2E 06 F6 | 	mov	local09, #0
1cd98     11 15 02 F6 | 	mov	arg02, local03
1cd9c     01 14 86 F1 | 	sub	arg02, #1
1cda0     13 13 02 F6 | 	mov	arg01, local05
1cda4     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1cda8     10 FB 09 F2 | 	cmp	result1, local02 wz
1cdac     00 2E 26 A6 |  if_e	not	local09, #0
1cdb0     00 2E 0E F2 | 	cmp	local09, #0 wz
1cdb4     00 2C 26 56 |  if_ne	not	local08, #0
1cdb8     16 29 CA F7 | 	test	local06, local08 wz
1cdbc     1C 00 90 AD |  if_e	jmp	#LR__2263
1cdc0                 | '       fillpush(x1)
1cdc0     13 13 02 F6 | 	mov	arg01, local05
1cdc4     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1cdc8                 | '       fillpush(y-1)
1cdc8     11 13 02 F6 | 	mov	arg01, local03
1cdcc     01 12 86 F1 | 	sub	arg01, #1
1cdd0     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1cdd4                 | '       spanabove := 1 
1cdd4     01 30 06 F6 | 	mov	local10, #1
1cdd8     4C 00 90 FD | 	jmp	#LR__2264
1cddc                 | LR__2263
1cddc                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1cddc     00 28 06 F6 | 	mov	local06, #0
1cde0     00 2A 06 F6 | 	mov	local07, #0
1cde4     00 30 0E F2 | 	cmp	local10, #0 wz
1cde8     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1cdec     01 2A 66 16 |  if_a	neg	local07, #1
1cdf0     00 2A 0E F2 | 	cmp	local07, #0 wz
1cdf4     00 28 26 56 |  if_ne	not	local06, #0
1cdf8     00 2C 06 F6 | 	mov	local08, #0
1cdfc     00 2E 06 F6 | 	mov	local09, #0
1ce00     11 15 02 F6 | 	mov	arg02, local03
1ce04     01 14 86 F1 | 	sub	arg02, #1
1ce08     13 13 02 F6 | 	mov	arg01, local05
1ce0c     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ce10     10 FB 09 F2 | 	cmp	result1, local02 wz
1ce14     00 2E 26 56 |  if_ne	not	local09, #0
1ce18     00 2E 0E F2 | 	cmp	local09, #0 wz
1ce1c     00 2C 26 56 |  if_ne	not	local08, #0
1ce20     16 29 CA F7 | 	test	local06, local08 wz
1ce24                 | '       spanabove := 0 
1ce24     00 30 06 56 |  if_ne	mov	local10, #0
1ce28                 | LR__2264
1ce28                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1ce28     00 28 06 F6 | 	mov	local06, #0
1ce2c     00 2A 06 F6 | 	mov	local07, #0
1ce30     00 32 0E F2 | 	cmp	local11, #0 wz
1ce34     01 00 00 AF 
1ce38     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1ce3c     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1ce40     00 2A 0E F2 | 	cmp	local07, #0 wz
1ce44     00 28 26 56 |  if_ne	not	local06, #0
1ce48     00 2C 06 F6 | 	mov	local08, #0
1ce4c     00 2E 06 F6 | 	mov	local09, #0
1ce50     11 15 02 F6 | 	mov	arg02, local03
1ce54     01 14 06 F1 | 	add	arg02, #1
1ce58     13 13 02 F6 | 	mov	arg01, local05
1ce5c     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ce60     10 FB 09 F2 | 	cmp	result1, local02 wz
1ce64     00 2E 26 A6 |  if_e	not	local09, #0
1ce68     00 2E 0E F2 | 	cmp	local09, #0 wz
1ce6c     00 2C 26 56 |  if_ne	not	local08, #0
1ce70     16 29 CA F7 | 	test	local06, local08 wz
1ce74     1C 00 90 AD |  if_e	jmp	#LR__2265
1ce78                 | '       fillpush(x1)
1ce78     13 13 02 F6 | 	mov	arg01, local05
1ce7c     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1ce80                 | '       fillpush(y + 1)
1ce80     11 13 02 F6 | 	mov	arg01, local03
1ce84     01 12 06 F1 | 	add	arg01, #1
1ce88     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1ce8c                 | '       spanBelow := 1
1ce8c     01 32 06 F6 | 	mov	local11, #1
1ce90     50 00 90 FD | 	jmp	#LR__2266
1ce94                 | LR__2265
1ce94                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1ce94     00 28 06 F6 | 	mov	local06, #0
1ce98     00 2A 06 F6 | 	mov	local07, #0
1ce9c     00 32 0E F2 | 	cmp	local11, #0 wz
1cea0     01 00 00 5F 
1cea4     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1cea8     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1ceac     00 2A 0E F2 | 	cmp	local07, #0 wz
1ceb0     00 28 26 56 |  if_ne	not	local06, #0
1ceb4     00 2C 06 F6 | 	mov	local08, #0
1ceb8     00 2E 06 F6 | 	mov	local09, #0
1cebc     11 15 02 F6 | 	mov	arg02, local03
1cec0     01 14 06 F1 | 	add	arg02, #1
1cec4     13 13 02 F6 | 	mov	arg01, local05
1cec8     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1cecc     10 FB 09 F2 | 	cmp	result1, local02 wz
1ced0     00 2E 26 56 |  if_ne	not	local09, #0
1ced4     00 2E 0E F2 | 	cmp	local09, #0 wz
1ced8     00 2C 26 56 |  if_ne	not	local08, #0
1cedc     16 29 CA F7 | 	test	local06, local08 wz
1cee0                 | '       spanbelow := 0
1cee0     00 32 06 56 |  if_ne	mov	local11, #0
1cee4                 | LR__2266
1cee4                 | '     x1++
1cee4     01 26 06 F1 | 	add	local05, #1
1cee8     3C FE 9F FD | 	jmp	#LR__2262
1ceec                 | LR__2267
1ceec                 | '   y:=fillpop()
1ceec     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1cef0     FD 22 02 F6 | 	mov	local03, result1
1cef4                 | '   x:=fillpop()
1cef4     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1cef8     FD 24 02 F6 | 	mov	local04, result1
1cefc     C8 FD 9F FD | 	jmp	#LR__2260
1cf00                 | LR__2268
1cf00                 | LR__2269
1cf00     A7 F0 03 F6 | 	mov	ptra, fp
1cf04     B2 00 A0 FD | 	call	#popregs_
1cf08                 | _hg010b_spin2_fill_ret
1cf08     2D 00 64 FD | 	ret
1cf0c                 | 
1cf0c                 | ' 'pinlow(38)    
1cf0c                 | ' 
1cf0c                 | ' '-- A filled circle -----------------------------------------------------
1cf0c                 | ' 
1cf0c                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1cf0c                 | _hg010b_spin2_fcircle
1cf0c     08 4A 05 F6 | 	mov	COUNT_, #8
1cf10     A8 00 A0 FD | 	call	#pushregs_
1cf14     0B 1F 02 F6 | 	mov	local01, arg03
1cf18     FF FF 7F FF 
1cf1c     FE 1F 06 FD | 	qmul	local01, ##-2
1cf20     09 21 02 F6 | 	mov	local02, arg01
1cf24     0A 23 02 F6 | 	mov	local03, arg02
1cf28     0C 25 02 F6 | 	mov	local04, arg04
1cf2c                 | ' 
1cf2c                 | ' d:=5-4*r
1cf2c     0F 19 02 F6 | 	mov	arg04, local01
1cf30     02 18 66 F0 | 	shl	arg04, #2
1cf34     05 26 06 F6 | 	mov	local05, #5
1cf38     0C 27 82 F1 | 	sub	local05, arg04
1cf3c                 | ' x:=0
1cf3c     00 28 06 F6 | 	mov	local06, #0
1cf40                 | ' y:=r
1cf40                 | ' da:=(-2*r+5)*4
1cf40                 | ' db:=3*4
1cf40     0C 2A 06 F6 | 	mov	local07, #12
1cf44                 | ' repeat while (x<=y) 
1cf44     18 2C 62 FD | 	getqx	local08
1cf48     05 2C 06 F1 | 	add	local08, #5
1cf4c     02 2C 66 F0 | 	shl	local08, #2
1cf50                 | LR__2270
1cf50     0F 29 5A F2 | 	cmps	local06, local01 wcz
1cf54     B4 00 90 1D |  if_a	jmp	#LR__2272
1cf58                 | '   fastline(x0-x,x0+x,y0-y,c)
1cf58     10 13 02 F6 | 	mov	arg01, local02
1cf5c     14 13 82 F1 | 	sub	arg01, local06
1cf60     10 15 02 F6 | 	mov	arg02, local02
1cf64     14 15 02 F1 | 	add	arg02, local06
1cf68     11 17 02 F6 | 	mov	arg03, local03
1cf6c     0F 17 82 F1 | 	sub	arg03, local01
1cf70     12 19 02 F6 | 	mov	arg04, local04
1cf74     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1cf78                 | '   fastline(x0-x,x0+x,y0+y,c)
1cf78     10 13 02 F6 | 	mov	arg01, local02
1cf7c     14 13 82 F1 | 	sub	arg01, local06
1cf80     10 15 02 F6 | 	mov	arg02, local02
1cf84     14 15 02 F1 | 	add	arg02, local06
1cf88     11 17 02 F6 | 	mov	arg03, local03
1cf8c     0F 17 02 F1 | 	add	arg03, local01
1cf90     12 19 02 F6 | 	mov	arg04, local04
1cf94     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1cf98                 | '   fastline(x0-y,x0+y,y0-x,c)
1cf98     10 13 02 F6 | 	mov	arg01, local02
1cf9c     0F 13 82 F1 | 	sub	arg01, local01
1cfa0     10 15 02 F6 | 	mov	arg02, local02
1cfa4     0F 15 02 F1 | 	add	arg02, local01
1cfa8     11 17 02 F6 | 	mov	arg03, local03
1cfac     14 17 82 F1 | 	sub	arg03, local06
1cfb0     12 19 02 F6 | 	mov	arg04, local04
1cfb4     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1cfb8                 | '   fastline(x0-y,x0+y,y0+x,c)
1cfb8     10 13 02 F6 | 	mov	arg01, local02
1cfbc     0F 13 82 F1 | 	sub	arg01, local01
1cfc0     10 15 02 F6 | 	mov	arg02, local02
1cfc4     0F 15 02 F1 | 	add	arg02, local01
1cfc8     11 17 02 F6 | 	mov	arg03, local03
1cfcc     14 17 02 F1 | 	add	arg03, local06
1cfd0     12 19 02 F6 | 	mov	arg04, local04
1cfd4     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1cfd8                 | '   if d>0 
1cfd8     01 26 56 F2 | 	cmps	local05, #1 wc
1cfdc     18 00 90 CD |  if_b	jmp	#LR__2271
1cfe0                 | '     d+=da
1cfe0     16 27 02 F1 | 	add	local05, local08
1cfe4                 | '     y-=1
1cfe4     01 1E 86 F1 | 	sub	local01, #1
1cfe8                 | '     x+=1
1cfe8     01 28 06 F1 | 	add	local06, #1
1cfec                 | '     da+=4*4
1cfec     10 2C 06 F1 | 	add	local08, #16
1cff0                 | '     db+=2*4
1cff0     08 2A 06 F1 | 	add	local07, #8
1cff4     58 FF 9F FD | 	jmp	#LR__2270
1cff8                 | LR__2271
1cff8                 | '   else
1cff8                 | '     d+=db
1cff8     15 27 02 F1 | 	add	local05, local07
1cffc                 | '     x+=1
1cffc     01 28 06 F1 | 	add	local06, #1
1d000                 | '     da+=2*4
1d000     08 2C 06 F1 | 	add	local08, #8
1d004                 | '     db+=2*4
1d004     08 2A 06 F1 | 	add	local07, #8
1d008     44 FF 9F FD | 	jmp	#LR__2270
1d00c                 | LR__2272
1d00c     A7 F0 03 F6 | 	mov	ptra, fp
1d010     B2 00 A0 FD | 	call	#popregs_
1d014                 | _hg010b_spin2_fcircle_ret
1d014     2D 00 64 FD | 	ret
1d018                 | 
1d018                 | '  
1d018                 | ' '-- A circle ------------------------------------------------------------ 
1d018                 | '  
1d018                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1d018                 | _hg010b_spin2_circle
1d018     08 4A 05 F6 | 	mov	COUNT_, #8
1d01c     A8 00 A0 FD | 	call	#pushregs_
1d020     0B 1F 02 F6 | 	mov	local01, arg03
1d024     FF FF 7F FF 
1d028     FE 1F 06 FD | 	qmul	local01, ##-2
1d02c     09 21 02 F6 | 	mov	local02, arg01
1d030     0A 23 02 F6 | 	mov	local03, arg02
1d034     0C 25 02 F6 | 	mov	local04, arg04
1d038                 | ' 
1d038                 | '  
1d038                 | ' d:=5-4*r
1d038     0F 19 02 F6 | 	mov	arg04, local01
1d03c     02 18 66 F0 | 	shl	arg04, #2
1d040     05 26 06 F6 | 	mov	local05, #5
1d044     0C 27 82 F1 | 	sub	local05, arg04
1d048                 | ' x:=0
1d048     00 28 06 F6 | 	mov	local06, #0
1d04c                 | ' y:=r
1d04c                 | ' da:=(-2*r+5)*4
1d04c                 | ' db:=3*4
1d04c     0C 2A 06 F6 | 	mov	local07, #12
1d050                 | ' repeat while (x<=y) 
1d050     18 2C 62 FD | 	getqx	local08
1d054     05 2C 06 F1 | 	add	local08, #5
1d058     02 2C 66 F0 | 	shl	local08, #2
1d05c                 | LR__2280
1d05c     0F 29 5A F2 | 	cmps	local06, local01 wcz
1d060     F4 00 90 1D |  if_a	jmp	#LR__2282
1d064                 | '   putpixel(x0-x,y0-y,c)
1d064     10 13 02 F6 | 	mov	arg01, local02
1d068     14 13 82 F1 | 	sub	arg01, local06
1d06c     11 15 02 F6 | 	mov	arg02, local03
1d070     0F 15 82 F1 | 	sub	arg02, local01
1d074     12 17 02 F6 | 	mov	arg03, local04
1d078     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d07c                 | '   putpixel(x0-x,y0+y,c)
1d07c     10 13 02 F6 | 	mov	arg01, local02
1d080     14 13 82 F1 | 	sub	arg01, local06
1d084     11 15 02 F6 | 	mov	arg02, local03
1d088     0F 15 02 F1 | 	add	arg02, local01
1d08c     12 17 02 F6 | 	mov	arg03, local04
1d090     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d094                 | '   putpixel(x0+x,y0-y,c)
1d094     10 13 02 F6 | 	mov	arg01, local02
1d098     14 13 02 F1 | 	add	arg01, local06
1d09c     11 15 02 F6 | 	mov	arg02, local03
1d0a0     0F 15 82 F1 | 	sub	arg02, local01
1d0a4     12 17 02 F6 | 	mov	arg03, local04
1d0a8     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d0ac                 | '   putpixel(x0+x,y0+y,c)
1d0ac     10 13 02 F6 | 	mov	arg01, local02
1d0b0     14 13 02 F1 | 	add	arg01, local06
1d0b4     11 15 02 F6 | 	mov	arg02, local03
1d0b8     0F 15 02 F1 | 	add	arg02, local01
1d0bc     12 17 02 F6 | 	mov	arg03, local04
1d0c0     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d0c4                 | '   putpixel(x0-y,y0-x,c)
1d0c4     10 13 02 F6 | 	mov	arg01, local02
1d0c8     0F 13 82 F1 | 	sub	arg01, local01
1d0cc     11 15 02 F6 | 	mov	arg02, local03
1d0d0     14 15 82 F1 | 	sub	arg02, local06
1d0d4     12 17 02 F6 | 	mov	arg03, local04
1d0d8     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d0dc                 | '   putpixel(x0-y,y0+x,c)
1d0dc     10 13 02 F6 | 	mov	arg01, local02
1d0e0     0F 13 82 F1 | 	sub	arg01, local01
1d0e4     11 15 02 F6 | 	mov	arg02, local03
1d0e8     14 15 02 F1 | 	add	arg02, local06
1d0ec     12 17 02 F6 | 	mov	arg03, local04
1d0f0     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d0f4                 | '   putpixel(x0+y,y0-x,c)
1d0f4     10 13 02 F6 | 	mov	arg01, local02
1d0f8     0F 13 02 F1 | 	add	arg01, local01
1d0fc     11 15 02 F6 | 	mov	arg02, local03
1d100     14 15 82 F1 | 	sub	arg02, local06
1d104     12 17 02 F6 | 	mov	arg03, local04
1d108     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d10c                 | '   putpixel(x0+y,y0+x,c)
1d10c     10 13 02 F6 | 	mov	arg01, local02
1d110     0F 13 02 F1 | 	add	arg01, local01
1d114     11 15 02 F6 | 	mov	arg02, local03
1d118     14 15 02 F1 | 	add	arg02, local06
1d11c     12 17 02 F6 | 	mov	arg03, local04
1d120     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d124                 | '   if d>0 
1d124     01 26 56 F2 | 	cmps	local05, #1 wc
1d128     18 00 90 CD |  if_b	jmp	#LR__2281
1d12c                 | '     d+=da
1d12c     16 27 02 F1 | 	add	local05, local08
1d130                 | '     y-=1
1d130     01 1E 86 F1 | 	sub	local01, #1
1d134                 | '     x+=1
1d134     01 28 06 F1 | 	add	local06, #1
1d138                 | '     da+=4*4
1d138     10 2C 06 F1 | 	add	local08, #16
1d13c                 | '     db+=2*4
1d13c     08 2A 06 F1 | 	add	local07, #8
1d140     18 FF 9F FD | 	jmp	#LR__2280
1d144                 | LR__2281
1d144                 | '   else
1d144                 | '     d+=db
1d144     15 27 02 F1 | 	add	local05, local07
1d148                 | '     x+=1
1d148     01 28 06 F1 | 	add	local06, #1
1d14c                 | '     da+=2*4
1d14c     08 2C 06 F1 | 	add	local08, #8
1d150                 | '     db+=2*4
1d150     08 2A 06 F1 | 	add	local07, #8
1d154     04 FF 9F FD | 	jmp	#LR__2280
1d158                 | LR__2282
1d158     A7 F0 03 F6 | 	mov	ptra, fp
1d15c     B2 00 A0 FD | 	call	#popregs_
1d160                 | _hg010b_spin2_circle_ret
1d160     2D 00 64 FD | 	ret
1d164                 | 
1d164                 | '     
1d164                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1d164                 | ' 
1d164                 | ' pub frame(x1,y1,x2,y2,c)
1d164                 | _hg010b_spin2_frame
1d164     05 4A 05 F6 | 	mov	COUNT_, #5
1d168     A8 00 A0 FD | 	call	#pushregs_
1d16c     09 1F 02 F6 | 	mov	local01, arg01
1d170     0A 21 02 F6 | 	mov	local02, arg02
1d174     0B 23 02 F6 | 	mov	local03, arg03
1d178     0C 25 02 F6 | 	mov	local04, arg04
1d17c     0D 27 02 F6 | 	mov	local05, arg05
1d180                 | ' 
1d180                 | ' fastline(x1,x2,y1,c)
1d180     0F 13 02 F6 | 	mov	arg01, local01
1d184     11 15 02 F6 | 	mov	arg02, local03
1d188     10 17 02 F6 | 	mov	arg03, local02
1d18c     13 19 02 F6 | 	mov	arg04, local05
1d190     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1d194                 | ' fastline(x1,x2,y2,c)
1d194     0F 13 02 F6 | 	mov	arg01, local01
1d198     11 15 02 F6 | 	mov	arg02, local03
1d19c     12 17 02 F6 | 	mov	arg03, local04
1d1a0     13 19 02 F6 | 	mov	arg04, local05
1d1a4     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1d1a8                 | ' line(x1,y1,x1,y2,c)
1d1a8     0F 13 02 F6 | 	mov	arg01, local01
1d1ac     10 15 02 F6 | 	mov	arg02, local02
1d1b0     0F 17 02 F6 | 	mov	arg03, local01
1d1b4     12 19 02 F6 | 	mov	arg04, local04
1d1b8     13 1B 02 F6 | 	mov	arg05, local05
1d1bc                 | ' draw(x1,y1,x2,y2,c)
1d1bc     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1d1c0                 | ' line(x2,y1,x2,y2,c)
1d1c0     11 13 02 F6 | 	mov	arg01, local03
1d1c4     10 15 02 F6 | 	mov	arg02, local02
1d1c8     11 17 02 F6 | 	mov	arg03, local03
1d1cc     12 19 02 F6 | 	mov	arg04, local04
1d1d0     13 1B 02 F6 | 	mov	arg05, local05
1d1d4                 | ' draw(x1,y1,x2,y2,c)
1d1d4     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1d1d8     A7 F0 03 F6 | 	mov	ptra, fp
1d1dc     B2 00 A0 FD | 	call	#popregs_
1d1e0                 | _hg010b_spin2_frame_ret
1d1e0     2D 00 64 FD | 	ret
1d1e4                 | 
1d1e4                 | ' 
1d1e4                 | ' '-- A box (a filled rectangle) ----------------------------------------
1d1e4                 | ' 
1d1e4                 | ' pub box(x1,y1,x2,y2,c) |yy
1d1e4                 | _hg010b_spin2_box
1d1e4     06 4A 05 F6 | 	mov	COUNT_, #6
1d1e8     A8 00 A0 FD | 	call	#pushregs_
1d1ec     09 1F 02 F6 | 	mov	local01, arg01
1d1f0     0A 21 02 F6 | 	mov	local02, arg02
1d1f4     0B 23 02 F6 | 	mov	local03, arg03
1d1f8     0C 25 02 F6 | 	mov	local04, arg04
1d1fc     0D 27 02 F6 | 	mov	local05, arg05
1d200                 | ' 
1d200                 | ' repeat yy from y1 to y2
1d200     10 25 52 F2 | 	cmps	local04, local02 wc
1d204     01 28 86 F6 | 	negc	local06, #1
1d208     14 25 02 F1 | 	add	local04, local06
1d20c                 | LR__2290
1d20c                 | '   fastline(x1,x2,yy,c)
1d20c     0F 13 02 F6 | 	mov	arg01, local01
1d210     11 15 02 F6 | 	mov	arg02, local03
1d214     13 19 02 F6 | 	mov	arg04, local05
1d218     10 17 02 F6 | 	mov	arg03, local02
1d21c     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1d220     14 21 02 F1 | 	add	local02, local06
1d224     12 21 0A F2 | 	cmp	local02, local04 wz
1d228     E0 FF 9F 5D |  if_ne	jmp	#LR__2290
1d22c     A7 F0 03 F6 | 	mov	ptra, fp
1d230     B2 00 A0 FD | 	call	#popregs_
1d234                 | _hg010b_spin2_box_ret
1d234     2D 00 64 FD | 	ret
1d238                 | 
1d238                 | '       
1d238                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1d238                 | _hg010b_spin2_putcharxycgf
1d238                 | ' 
1d238                 | '  
1d238                 | ' repeat yy from 0 to 15
1d238     00 00 06 F6 | 	mov	_var01, #0
1d23c     97 8C 48 FB | 	callpa	#(@LR__2302-@LR__2300)>>2,fcache_load_ptr_
1d240                 | LR__2300
1d240                 | ' 
1d240                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1d240     95 E4 05 F1 | 	add	objptr, #149
1d244     F2 02 02 FB | 	rdlong	_var02, objptr
1d248     0A 02 66 F0 | 	shl	_var02, #10
1d24c     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1d250     01 05 02 F1 | 	add	_var03, _var02
1d254     0B 03 02 F6 | 	mov	_var02, arg03
1d258     04 02 66 F0 | 	shl	_var02, #4
1d25c     01 05 02 F1 | 	add	_var03, _var02
1d260     00 05 02 F1 | 	add	_var03, _var01
1d264     02 05 C2 FA | 	rdbyte	_var03, _var03
1d268                 | '   asm
1d268     00 04 0E F4 | 	testb	_var03, #0 wz
1d26c     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1d270     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1d274     01 04 0E F4 | 	testb	_var03, #1 wz
1d278     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1d27c     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1d280     02 04 0E F4 | 	testb	_var03, #2 wz
1d284     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1d288     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1d28c     03 04 0E F4 | 	testb	_var03, #3 wz
1d290     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1d294     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1d298     04 04 0E F4 | 	testb	_var03, #4 wz
1d29c     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1d2a0     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1d2a4     05 04 0E F4 | 	testb	_var03, #5 wz
1d2a8     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1d2ac     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1d2b0     06 04 0E F4 | 	testb	_var03, #6 wz
1d2b4     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1d2b8     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1d2bc     07 04 0E F4 | 	testb	_var03, #7 wz
1d2c0     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1d2c4     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1d2c8                 | '   
1d2c8                 | '   ccc[0]:=c1
1d2c8     99 E5 05 F1 | 	add	objptr, #409
1d2cc     F2 06 62 FC | 	wrlong	_var04, objptr
1d2d0                 | '   ccc[1]:=c2 
1d2d0     04 E4 05 F1 | 	add	objptr, #4
1d2d4     F2 08 62 FC | 	wrlong	_var05, objptr
1d2d8                 | '   long[mailbox0][2]:=8
1d2d8     49 E4 85 F1 | 	sub	objptr, #73
1d2dc     F2 04 02 FB | 	rdlong	_var03, objptr
1d2e0     08 04 06 F1 | 	add	_var03, #8
1d2e4     02 11 68 FC | 	wrlong	#8, _var03
1d2e8                 | '   long[mailbox0][1]:=@ccc
1d2e8     45 E4 05 F1 | 	add	objptr, #69
1d2ec     F2 04 02 F6 | 	mov	_var03, objptr
1d2f0     45 E4 85 F1 | 	sub	objptr, #69
1d2f4     F2 02 02 FB | 	rdlong	_var02, objptr
1d2f8     04 02 06 F1 | 	add	_var02, #4
1d2fc     01 05 62 FC | 	wrlong	_var03, _var02
1d300                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1d300     0C E5 85 F1 | 	sub	objptr, #268
1d304     F2 04 02 FB | 	rdlong	_var03, objptr
1d308     0A 03 02 F6 | 	mov	_var02, arg02
1d30c     00 03 02 F1 | 	add	_var02, _var01
1d310     0A 02 66 F0 | 	shl	_var02, #10
1d314     09 0B 02 F6 | 	mov	_var06, arg01
1d318     02 0A 66 F0 | 	shl	_var06, #2
1d31c     05 03 02 F1 | 	add	_var02, _var06
1d320     01 05 02 F1 | 	add	_var03, _var02
1d324     00 00 78 FF 
1d328     00 04 06 F1 | 	add	_var03, ##-268435456
1d32c     0C E5 05 F1 | 	add	objptr, #268
1d330     F2 0A 02 FB | 	rdlong	_var06, objptr
1d334     05 05 62 FC | 	wrlong	_var03, _var06
1d338                 | '   repeat
1d338                 | LR__2301
1d338     F2 04 02 FB | 	rdlong	_var03, objptr
1d33c     02 03 02 FB | 	rdlong	_var02, _var03
1d340     00 02 56 F2 | 	cmps	_var02, #0 wc
1d344     F0 FF 9F CD |  if_b	jmp	#LR__2301
1d348     E9 E5 85 F1 | 	sub	objptr, #489
1d34c     01 00 06 F1 | 	add	_var01, #1
1d350     10 00 56 F2 | 	cmps	_var01, #16 wc
1d354     E8 FE 9F CD |  if_b	jmp	#LR__2300
1d358                 | LR__2302
1d358                 | _hg010b_spin2_putcharxycgf_ret
1d358     2D 00 64 FD | 	ret
1d35c                 | 
1d35c                 | ' 
1d35c                 | ' 
1d35c                 | ' '**********************************************************************r***
1d35c                 | ' '                                                                        *
1d35c                 | ' ' Font related functions                                                 *
1d35c                 | ' '                                                                        *
1d35c                 | ' '*************************************************************************
1d35c                 | ' 
1d35c                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1d35c                 | ' 
1d35c                 | ' pub setfontfamily(afontnum)
1d35c                 | _hg010b_spin2_setfontfamily
1d35c                 | ' 
1d35c                 | ' font_family:=afontnum
1d35c     95 E4 05 F1 | 	add	objptr, #149
1d360     F2 12 62 FC | 	wrlong	arg01, objptr
1d364     95 E4 85 F1 | 	sub	objptr, #149
1d368                 | ' 'if afontnum==8
1d368                 | ' '  font_ptr:=@amiga_font
1d368                 | ' 
1d368                 | ' if afontnum==4
1d368     04 12 0E F2 | 	cmp	arg01, #4 wz
1d36c                 | '   font_ptr:=@st_font
1d36c     08 00 00 AF 
1d370     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1d374     08 E4 05 A1 |  if_e	add	objptr, #8
1d378     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1d37c     08 E4 85 A1 |  if_e	sub	objptr, #8
1d380     08 00 00 AF 
1d384     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1d388                 | ' if afontnum==0
1d388     00 12 0E F2 | 	cmp	arg01, #0 wz
1d38c                 | '   font_ptr:=@vga_font
1d38c     08 E4 05 A1 |  if_e	add	objptr, #8
1d390     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1d394     08 E4 85 A1 |  if_e	sub	objptr, #8
1d398                 | _hg010b_spin2_setfontfamily_ret
1d398     2D 00 64 FD | 	ret
1d39c                 | 
1d39c                 | ' 
1d39c                 | ' '*************************************************************************
1d39c                 | ' '                                                                        *
1d39c                 | ' '  Cursor functions                                                      *
1d39c                 | ' '                                                                        *
1d39c                 | ' '*************************************************************************
1d39c                 | ' 
1d39c                 | ' 
1d39c                 | ' pub setcursorpos(x,y)
1d39c                 | _hg010b_spin2_setcursorpos
1d39c                 | ' 
1d39c                 | ' ''---------- Set the (x,y) position of cursor
1d39c                 | ' 
1d39c                 | ' cursor_x:=x
1d39c     3C E4 05 F1 | 	add	objptr, #60
1d3a0     F2 12 52 FC | 	wrword	arg01, objptr
1d3a4                 | ' cursor_y:=y
1d3a4     02 E4 05 F1 | 	add	objptr, #2
1d3a8     F2 14 42 FC | 	wrbyte	arg02, objptr
1d3ac                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d3ac     02 E4 85 F1 | 	sub	objptr, #2
1d3b0     F2 14 E2 FA | 	rdword	arg02, objptr
1d3b4     02 14 66 F0 | 	shl	arg02, #2
1d3b8     02 E4 05 F1 | 	add	objptr, #2
1d3bc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d3c0     3E E4 85 F1 | 	sub	objptr, #62
1d3c4     04 16 66 F0 | 	shl	arg03, #4
1d3c8     04 16 06 F1 | 	add	arg03, #4
1d3cc     11 12 06 F6 | 	mov	arg01, #17
1d3d0     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1d3d4                 | _hg010b_spin2_setcursorpos_ret
1d3d4     2D 00 64 FD | 	ret
1d3d8                 | 
1d3d8                 | ' 
1d3d8                 | ' pub setcursorx(x)
1d3d8                 | _hg010b_spin2_setcursorx
1d3d8                 | ' cursor_x:=x
1d3d8     3C E4 05 F1 | 	add	objptr, #60
1d3dc     F2 12 52 FC | 	wrword	arg01, objptr
1d3e0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d3e0     F2 14 E2 FA | 	rdword	arg02, objptr
1d3e4     02 14 66 F0 | 	shl	arg02, #2
1d3e8     02 E4 05 F1 | 	add	objptr, #2
1d3ec     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d3f0     3E E4 85 F1 | 	sub	objptr, #62
1d3f4     04 16 66 F0 | 	shl	arg03, #4
1d3f8     04 16 06 F1 | 	add	arg03, #4
1d3fc     11 12 06 F6 | 	mov	arg01, #17
1d400     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1d404                 | _hg010b_spin2_setcursorx_ret
1d404     2D 00 64 FD | 	ret
1d408                 | 
1d408                 | ' 
1d408                 | ' pub setcursory(y) 
1d408                 | _hg010b_spin2_setcursory
1d408                 | ' cursor_y:=y
1d408     3E E4 05 F1 | 	add	objptr, #62
1d40c     F2 12 42 FC | 	wrbyte	arg01, objptr
1d410                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1d410     02 E4 85 F1 | 	sub	objptr, #2
1d414     F2 14 E2 FA | 	rdword	arg02, objptr
1d418     02 14 66 F0 | 	shl	arg02, #2
1d41c     02 E4 05 F1 | 	add	objptr, #2
1d420     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d424     3E E4 85 F1 | 	sub	objptr, #62
1d428     04 16 66 F0 | 	shl	arg03, #4
1d42c     04 16 06 F1 | 	add	arg03, #4
1d430     11 12 06 F6 | 	mov	arg01, #17
1d434     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1d438                 | _hg010b_spin2_setcursory_ret
1d438     2D 00 64 FD | 	ret
1d43c                 | 
1d43c                 | ' 
1d43c                 | ' '*************************************************************************
1d43c                 | ' '                                                                        *
1d43c                 | ' '  VBlank functions                                                      *
1d43c                 | ' '                                                                        *
1d43c                 | ' '*************************************************************************
1d43c                 | ' 
1d43c                 | ' pub waitvbl(amount) | i
1d43c                 | _hg010b_spin2_waitvbl
1d43c     03 4A 05 F6 | 	mov	COUNT_, #3
1d440     A8 00 A0 FD | 	call	#pushregs_
1d444     09 1F 02 F6 | 	mov	local01, arg01
1d448                 | ' 
1d448                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1d448                 | ' 
1d448                 | ' repeat i from 1 to amount
1d448     01 20 06 F6 | 	mov	local02, #1
1d44c     01 1E 56 F2 | 	cmps	local01, #1 wc
1d450     01 22 86 F6 | 	negc	local03, #1
1d454     11 1F 02 F1 | 	add	local01, local03
1d458                 | LR__2310
1d458                 | '   repeat until vblank==0
1d458                 | LR__2311
1d458     49 E4 05 F1 | 	add	objptr, #73
1d45c     F2 12 0A FB | 	rdlong	arg01, objptr wz
1d460     49 E4 85 F1 | 	sub	objptr, #73
1d464     0C 00 90 AD |  if_e	jmp	#LR__2312
1d468                 | '     waitus(100)
1d468     64 12 06 F6 | 	mov	arg01, #100
1d46c     28 1A B0 FD | 	call	#__system___waitus
1d470     E4 FF 9F FD | 	jmp	#LR__2311
1d474                 | LR__2312
1d474                 | '   repeat until vblank==1
1d474                 | LR__2313
1d474     49 E4 05 F1 | 	add	objptr, #73
1d478     F2 12 02 FB | 	rdlong	arg01, objptr
1d47c     49 E4 85 F1 | 	sub	objptr, #73
1d480     01 12 0E F2 | 	cmp	arg01, #1 wz
1d484     0C 00 90 AD |  if_e	jmp	#LR__2314
1d488                 | '     waitus(100)
1d488     64 12 06 F6 | 	mov	arg01, #100
1d48c     08 1A B0 FD | 	call	#__system___waitus
1d490     E0 FF 9F FD | 	jmp	#LR__2313
1d494                 | LR__2314
1d494     11 21 02 F1 | 	add	local02, local03
1d498     0F 21 0A F2 | 	cmp	local02, local01 wz
1d49c     B8 FF 9F 5D |  if_ne	jmp	#LR__2310
1d4a0     A7 F0 03 F6 | 	mov	ptra, fp
1d4a4     B2 00 A0 FD | 	call	#popregs_
1d4a8                 | _hg010b_spin2_waitvbl_ret
1d4a8     2D 00 64 FD | 	ret
1d4ac                 | 
1d4ac                 | ' 
1d4ac                 | ' 
1d4ac                 | ' pub cls(fc,bc)   :c,i
1d4ac                 | _hg010b_spin2_cls
1d4ac     02 4A 05 F6 | 	mov	COUNT_, #2
1d4b0     A8 00 A0 FD | 	call	#pushregs_
1d4b4     09 1F 02 F6 | 	mov	local01, arg01
1d4b8     0A 21 02 F6 | 	mov	local02, arg02
1d4bc                 | ' 
1d4bc                 | ' c:=bc
1d4bc                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1d4bc     DD E4 05 F1 | 	add	objptr, #221
1d4c0     F2 12 02 FB | 	rdlong	arg01, objptr
1d4c4     A5 E4 85 F1 | 	sub	objptr, #165
1d4c8     F2 16 02 FB | 	rdlong	arg03, objptr
1d4cc     02 16 66 F0 | 	shl	arg03, #2
1d4d0     10 15 02 F6 | 	mov	arg02, local02
1d4d4     00 18 06 F6 | 	mov	arg04, #0
1d4d8     01 1A 06 F6 | 	mov	arg05, #1
1d4dc     0B 00 00 FF 
1d4e0     94 E4 05 F1 | 	add	objptr, ##5780
1d4e4     64 0B B0 FD | 	call	#_psram_spin2_fill
1d4e8                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1d4e8     0B 00 00 FF 
1d4ec     C8 E4 85 F1 | 	sub	objptr, ##5832
1d4f0     F2 12 02 FB | 	rdlong	arg01, objptr
1d4f4     04 E4 85 F1 | 	sub	objptr, #4
1d4f8     F2 16 02 FB | 	rdlong	arg03, objptr
1d4fc     09 17 82 F1 | 	sub	arg03, arg01
1d500     20 14 06 F6 | 	mov	arg02, #32
1d504     00 18 06 F6 | 	mov	arg04, #0
1d508     01 1A 06 F6 | 	mov	arg05, #1
1d50c     0B 00 00 FF 
1d510     CC E4 05 F1 | 	add	objptr, ##5836
1d514     34 0B B0 FD | 	call	#_psram_spin2_fill
1d518                 | ' setwritecolors(fc,bc)
1d518                 | ' 
1d518                 | ' write_color:=ff
1d518     0B 00 00 FF 
1d51c     8B E4 85 F1 | 	sub	objptr, ##5771
1d520     F2 1E 62 FC | 	wrlong	local01, objptr
1d524                 | ' write_background:=bb
1d524     04 E4 05 F1 | 	add	objptr, #4
1d528     F2 20 62 FC | 	wrlong	local02, objptr
1d52c                 | ' cursor_x:=0
1d52c     09 E4 85 F1 | 	sub	objptr, #9
1d530     F2 00 58 FC | 	wrword	#0, objptr
1d534                 | ' cursor_y:=0
1d534     02 E4 05 F1 | 	add	objptr, #2
1d538     F2 00 48 FC | 	wrbyte	#0, objptr
1d53c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d53c     02 E4 85 F1 | 	sub	objptr, #2
1d540     F2 14 E2 FA | 	rdword	arg02, objptr
1d544     02 14 66 F0 | 	shl	arg02, #2
1d548     02 E4 05 F1 | 	add	objptr, #2
1d54c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d550     3E E4 85 F1 | 	sub	objptr, #62
1d554     04 16 66 F0 | 	shl	arg03, #4
1d558     04 16 06 F1 | 	add	arg03, #4
1d55c     11 12 06 F6 | 	mov	arg01, #17
1d560     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1d564                 | ' setcursorcolor(fc)
1d564     0F 13 02 F6 | 	mov	arg01, local01
1d568     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1d56c     10 FB 01 F6 | 	mov	result1, local02
1d570     00 FC 05 F6 | 	mov	result2, #0
1d574     A7 F0 03 F6 | 	mov	ptra, fp
1d578     B2 00 A0 FD | 	call	#popregs_
1d57c                 | _hg010b_spin2_cls_ret
1d57c     2D 00 64 FD | 	ret
1d580                 | 
1d580                 | ' 
1d580                 | ' ''---------- Output a char at the cursor position, move the cursor 
1d580                 | ' 
1d580                 | ' pub putchar(achar) | c,x,y,l,newcpl
1d580                 | _hg010b_spin2_putchar
1d580     02 4A 05 F6 | 	mov	COUNT_, #2
1d584     A8 00 A0 FD | 	call	#pushregs_
1d588     09 1F 02 F6 | 	mov	local01, arg01
1d58c                 | ' 
1d58c                 | ' if achar==10
1d58c     0A 1E 0E F2 | 	cmp	local01, #10 wz
1d590                 | '   crlf()
1d590     A4 05 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1d594                 | ' if achar==9
1d594     09 1E 0E F2 | 	cmp	local01, #9 wz
1d598     18 00 90 5D |  if_ne	jmp	#LR__2320
1d59c                 | '   cursor_x:=(cursor_x& %11110000)+16
1d59c     3C E4 05 F1 | 	add	objptr, #60
1d5a0     F2 16 E2 FA | 	rdword	arg03, objptr
1d5a4     F0 16 06 F5 | 	and	arg03, #240
1d5a8     10 16 06 F1 | 	add	arg03, #16
1d5ac     F2 16 52 FC | 	wrword	arg03, objptr
1d5b0     3C E4 85 F1 | 	sub	objptr, #60
1d5b4                 | LR__2320
1d5b4                 | '   
1d5b4                 | ' if (achar<>9) && (achar<>10) 
1d5b4     09 1E 0E F2 | 	cmp	local01, #9 wz
1d5b8     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1d5bc     A8 00 90 AD |  if_e	jmp	#LR__2321
1d5c0                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1d5c0     3C E4 05 F1 | 	add	objptr, #60
1d5c4     F2 12 E2 FA | 	rdword	arg01, objptr
1d5c8     02 E4 05 F1 | 	add	objptr, #2
1d5cc     F2 14 C2 FA | 	rdbyte	arg02, objptr
1d5d0     04 14 66 F0 | 	shl	arg02, #4
1d5d4     04 14 06 F1 | 	add	arg02, #4
1d5d8     03 E4 05 F1 | 	add	objptr, #3
1d5dc     F2 18 02 FB | 	rdlong	arg04, objptr
1d5e0     04 E4 05 F1 | 	add	objptr, #4
1d5e4     F2 1A 02 FB | 	rdlong	arg05, objptr
1d5e8     45 E4 85 F1 | 	sub	objptr, #69
1d5ec     0F 17 02 F6 | 	mov	arg03, local01
1d5f0     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1d5f4     04 E4 05 F1 | 	add	objptr, #4
1d5f8     F2 12 02 FB | 	rdlong	arg01, objptr
1d5fc     10 00 00 FF 
1d600     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d604     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1d608     3A E4 05 F1 | 	add	objptr, #58
1d60c     F2 1A C2 FA | 	rdbyte	arg05, objptr
1d610     0D 17 02 FD | 	qmul	arg03, arg05
1d614                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1d614     10 00 00 FF 
1d618     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1d61c     02 E4 85 F1 | 	sub	objptr, #2
1d620     F2 20 E2 FA | 	rdword	local02, objptr
1d624     01 20 46 F0 | 	shr	local02, #1
1d628     0F 15 02 F6 | 	mov	arg02, local01
1d62c     01 16 06 F6 | 	mov	arg03, #1
1d630     00 18 06 F6 | 	mov	arg04, #0
1d634     01 1A 06 F6 | 	mov	arg05, #1
1d638     0B 00 00 FF 
1d63c     90 E4 05 F1 | 	add	objptr, ##5776
1d640     18 1E 62 FD | 	getqx	local01
1d644     10 1F 02 F1 | 	add	local01, local02
1d648     0F 13 02 F1 | 	add	arg01, local01
1d64c     FC 09 B0 FD | 	call	#_psram_spin2_fill
1d650                 | '   cursor_x+=2
1d650     0B 00 00 FF 
1d654     90 E4 85 F1 | 	sub	objptr, ##5776
1d658     F2 20 E2 FA | 	rdword	local02, objptr
1d65c     02 20 06 F1 | 	add	local02, #2
1d660     F2 20 52 FC | 	wrword	local02, objptr
1d664     3C E4 85 F1 | 	sub	objptr, #60
1d668                 | LR__2321
1d668                 | ' 
1d668                 | ' if cursor_x>=256
1d668     3C E4 05 F1 | 	add	objptr, #60
1d66c     F2 20 E2 FA | 	rdword	local02, objptr
1d670     3C E4 85 F1 | 	sub	objptr, #60
1d674     00 21 56 F2 | 	cmps	local02, #256 wc
1d678     64 00 90 CD |  if_b	jmp	#LR__2323
1d67c                 | '   cursor_x:=0
1d67c     3C E4 05 F1 | 	add	objptr, #60
1d680     F2 00 58 FC | 	wrword	#0, objptr
1d684                 | '   cursor_y+=1
1d684     02 E4 05 F1 | 	add	objptr, #2
1d688     F2 20 C2 FA | 	rdbyte	local02, objptr
1d68c     01 20 06 F1 | 	add	local02, #1
1d690     F2 20 42 FC | 	wrbyte	local02, objptr
1d694                 | '   if cursor_y>st_lines-1
1d694     C3 E4 05 F1 | 	add	objptr, #195
1d698     F2 20 02 FB | 	rdlong	local02, objptr
1d69c     01 20 86 F1 | 	sub	local02, #1
1d6a0     C3 E4 85 F1 | 	sub	objptr, #195
1d6a4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d6a8     3E E4 85 F1 | 	sub	objptr, #62
1d6ac     10 17 5A F2 | 	cmps	arg03, local02 wcz
1d6b0     2C 00 90 ED |  if_be	jmp	#LR__2322
1d6b4                 | '     scrollup2()
1d6b4     00 12 06 F6 | 	mov	arg01, #0
1d6b8     01 00 00 FF 
1d6bc     58 14 06 F6 | 	mov	arg02, ##600
1d6c0     10 16 06 F6 | 	mov	arg03, #16
1d6c4     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1d6c8                 | '     cursor_y:=st_lines-1
1d6c8     01 E5 05 F1 | 	add	objptr, #257
1d6cc     F2 20 02 FB | 	rdlong	local02, objptr
1d6d0     01 20 86 F1 | 	sub	local02, #1
1d6d4     C3 E4 85 F1 | 	sub	objptr, #195
1d6d8     F2 20 42 FC | 	wrbyte	local02, objptr
1d6dc     3E E4 85 F1 | 	sub	objptr, #62
1d6e0                 | LR__2322
1d6e0                 | LR__2323
1d6e0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d6e0     3C E4 05 F1 | 	add	objptr, #60
1d6e4     F2 14 E2 FA | 	rdword	arg02, objptr
1d6e8     02 14 66 F0 | 	shl	arg02, #2
1d6ec     02 E4 05 F1 | 	add	objptr, #2
1d6f0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d6f4     3E E4 85 F1 | 	sub	objptr, #62
1d6f8     04 16 66 F0 | 	shl	arg03, #4
1d6fc     04 16 06 F1 | 	add	arg03, #4
1d700     11 12 06 F6 | 	mov	arg01, #17
1d704     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1d708     A7 F0 03 F6 | 	mov	ptra, fp
1d70c     B2 00 A0 FD | 	call	#popregs_
1d710                 | _hg010b_spin2_putchar_ret
1d710     2D 00 64 FD | 	ret
1d714                 | 
1d714                 | '     
1d714                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1d714                 | ' 
1d714                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1d714                 | _hg010b_spin2_putchar2
1d714     02 4A 05 F6 | 	mov	COUNT_, #2
1d718     A8 00 A0 FD | 	call	#pushregs_
1d71c     09 1F 02 F6 | 	mov	local01, arg01
1d720                 | ' 
1d720                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1d720     3C E4 05 F1 | 	add	objptr, #60
1d724     F2 12 E2 FA | 	rdword	arg01, objptr
1d728     02 E4 05 F1 | 	add	objptr, #2
1d72c     F2 14 C2 FA | 	rdbyte	arg02, objptr
1d730     04 14 66 F0 | 	shl	arg02, #4
1d734     04 14 06 F1 | 	add	arg02, #4
1d738     03 E4 05 F1 | 	add	objptr, #3
1d73c     F2 18 02 FB | 	rdlong	arg04, objptr
1d740     04 E4 05 F1 | 	add	objptr, #4
1d744     F2 1A 02 FB | 	rdlong	arg05, objptr
1d748     45 E4 85 F1 | 	sub	objptr, #69
1d74c     0F 17 02 F6 | 	mov	arg03, local01
1d750     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1d754     04 E4 05 F1 | 	add	objptr, #4
1d758     F2 12 02 FB | 	rdlong	arg01, objptr
1d75c     10 00 00 FF 
1d760     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d764     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1d768     3A E4 05 F1 | 	add	objptr, #58
1d76c     F2 1A C2 FA | 	rdbyte	arg05, objptr
1d770     0D 17 02 FD | 	qmul	arg03, arg05
1d774                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1d774     10 00 00 FF 
1d778     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1d77c     02 E4 85 F1 | 	sub	objptr, #2
1d780     F2 20 E2 FA | 	rdword	local02, objptr
1d784     01 20 46 F0 | 	shr	local02, #1
1d788     0F 15 02 F6 | 	mov	arg02, local01
1d78c     01 16 06 F6 | 	mov	arg03, #1
1d790     00 18 06 F6 | 	mov	arg04, #0
1d794     01 1A 06 F6 | 	mov	arg05, #1
1d798     0B 00 00 FF 
1d79c     90 E4 05 F1 | 	add	objptr, ##5776
1d7a0     18 1E 62 FD | 	getqx	local01
1d7a4     10 1F 02 F1 | 	add	local01, local02
1d7a8     0F 13 02 F1 | 	add	arg01, local01
1d7ac     9C 08 B0 FD | 	call	#_psram_spin2_fill
1d7b0                 | ' 
1d7b0                 | ' cursor_x+=2
1d7b0     0B 00 00 FF 
1d7b4     90 E4 85 F1 | 	sub	objptr, ##5776
1d7b8     F2 20 E2 FA | 	rdword	local02, objptr
1d7bc     02 20 06 F1 | 	add	local02, #2
1d7c0     F2 20 52 FC | 	wrword	local02, objptr
1d7c4                 | ' if cursor_x>=256
1d7c4     F2 20 E2 FA | 	rdword	local02, objptr
1d7c8     3C E4 85 F1 | 	sub	objptr, #60
1d7cc     00 21 56 F2 | 	cmps	local02, #256 wc
1d7d0     64 00 90 CD |  if_b	jmp	#LR__2331
1d7d4                 | '   cursor_x:=0
1d7d4     3C E4 05 F1 | 	add	objptr, #60
1d7d8     F2 00 58 FC | 	wrword	#0, objptr
1d7dc                 | '   cursor_y+=1
1d7dc     02 E4 05 F1 | 	add	objptr, #2
1d7e0     F2 20 C2 FA | 	rdbyte	local02, objptr
1d7e4     01 20 06 F1 | 	add	local02, #1
1d7e8     F2 20 42 FC | 	wrbyte	local02, objptr
1d7ec                 | '   if cursor_y>st_lines-1
1d7ec     C3 E4 05 F1 | 	add	objptr, #195
1d7f0     F2 20 02 FB | 	rdlong	local02, objptr
1d7f4     01 20 86 F1 | 	sub	local02, #1
1d7f8     C3 E4 85 F1 | 	sub	objptr, #195
1d7fc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d800     3E E4 85 F1 | 	sub	objptr, #62
1d804     10 17 5A F2 | 	cmps	arg03, local02 wcz
1d808     2C 00 90 ED |  if_be	jmp	#LR__2330
1d80c                 | '     scrollup2()
1d80c     00 12 06 F6 | 	mov	arg01, #0
1d810     01 00 00 FF 
1d814     58 14 06 F6 | 	mov	arg02, ##600
1d818     10 16 06 F6 | 	mov	arg03, #16
1d81c     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1d820                 | '     cursor_y:=st_lines-1
1d820     01 E5 05 F1 | 	add	objptr, #257
1d824     F2 20 02 FB | 	rdlong	local02, objptr
1d828     01 20 86 F1 | 	sub	local02, #1
1d82c     C3 E4 85 F1 | 	sub	objptr, #195
1d830     F2 20 42 FC | 	wrbyte	local02, objptr
1d834     3E E4 85 F1 | 	sub	objptr, #62
1d838                 | LR__2330
1d838                 | LR__2331
1d838                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1d838     3C E4 05 F1 | 	add	objptr, #60
1d83c     F2 14 E2 FA | 	rdword	arg02, objptr
1d840     02 14 66 F0 | 	shl	arg02, #2
1d844     02 E4 05 F1 | 	add	objptr, #2
1d848     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d84c     3E E4 85 F1 | 	sub	objptr, #62
1d850     04 16 66 F0 | 	shl	arg03, #4
1d854     04 16 06 F1 | 	add	arg03, #4
1d858     11 12 06 F6 | 	mov	arg01, #17
1d85c     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1d860     A7 F0 03 F6 | 	mov	ptra, fp
1d864     B2 00 A0 FD | 	call	#popregs_
1d868                 | _hg010b_spin2_putchar2_ret
1d868     2D 00 64 FD | 	ret
1d86c                 | 
1d86c                 | ' ''--------- Output a string at the cursor position, move the cursor  
1d86c                 | ' 
1d86c                 | ' pub write(text) | iii,c,ncx,ncy
1d86c                 | _hg010b_spin2_write
1d86c     04 4A 05 F6 | 	mov	COUNT_, #4
1d870     A8 00 A0 FD | 	call	#pushregs_
1d874     09 1F 02 F6 | 	mov	local01, arg01
1d878                 | ' 
1d878                 | ' repeat iii from 0 to strsize(text)-1
1d878     00 20 06 F6 | 	mov	local02, #0
1d87c     0F 13 02 F6 | 	mov	arg01, local01
1d880     09 23 02 F6 | 	mov	local03, arg01
1d884     97 06 48 FB | 	callpa	#(@LR__2341-@LR__2340)>>2,fcache_load_ptr_
1d888                 | LR__2340
1d888     11 FB C9 FA | 	rdbyte	result1, local03 wz
1d88c     01 22 06 51 |  if_ne	add	local03, #1
1d890     F4 FF 9F 5D |  if_ne	jmp	#LR__2340
1d894                 | LR__2341
1d894     09 23 82 F1 | 	sub	local03, arg01
1d898     01 22 86 F1 | 	sub	local03, #1
1d89c     00 22 56 F2 | 	cmps	local03, #0 wc
1d8a0     01 24 86 F6 | 	negc	local04, #1
1d8a4     12 23 02 F1 | 	add	local03, local04
1d8a8                 | LR__2342
1d8a8                 | '   putchar2(byte[text+iii])
1d8a8     0F 13 02 F6 | 	mov	arg01, local01
1d8ac     10 13 02 F1 | 	add	arg01, local02
1d8b0     09 13 C2 FA | 	rdbyte	arg01, arg01
1d8b4     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1d8b8     12 21 02 F1 | 	add	local02, local04
1d8bc     11 21 0A F2 | 	cmp	local02, local03 wz
1d8c0     E4 FF 9F 5D |  if_ne	jmp	#LR__2342
1d8c4     A7 F0 03 F6 | 	mov	ptra, fp
1d8c8     B2 00 A0 FD | 	call	#popregs_
1d8cc                 | _hg010b_spin2_write_ret
1d8cc     2D 00 64 FD | 	ret
1d8d0                 | 
1d8d0                 | '    
1d8d0                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1d8d0                 | ' 
1d8d0                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1d8d0                 | _hg010b_spin2_scrollup2
1d8d0     03 4A 05 F6 | 	mov	COUNT_, #3
1d8d4     A8 00 A0 FD | 	call	#pushregs_
1d8d8                 | ' 	
1d8d8                 | ' repeat i from 4 to 579 
1d8d8     04 1E 06 F6 | 	mov	local01, #4
1d8dc                 | LR__2350
1d8dc     F9 E4 05 F1 | 	add	objptr, #249
1d8e0     F2 1A 02 FB | 	rdlong	arg05, objptr
1d8e4     1C E4 85 F1 | 	sub	objptr, #28
1d8e8     F2 14 02 FB | 	rdlong	arg02, objptr
1d8ec     0F 19 02 F6 | 	mov	arg04, local01
1d8f0     10 18 06 F1 | 	add	arg04, #16
1d8f4     02 18 66 F0 | 	shl	arg04, #2
1d8f8     14 E4 05 F1 | 	add	objptr, #20
1d8fc     F2 16 02 FB | 	rdlong	arg03, objptr
1d900     0B 19 02 FD | 	qmul	arg04, arg03
1d904                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1d904     F6 03 00 FF 
1d908     00 12 06 F6 | 	mov	arg01, ##519168
1d90c     0D 13 82 F1 | 	sub	arg01, arg05
1d910     02 16 66 F0 | 	shl	arg03, #2
1d914     0A 00 00 FF 
1d918     DB E5 05 F1 | 	add	objptr, ##5595
1d91c     18 1A 62 FD | 	getqx	arg05
1d920     0D 15 02 F1 | 	add	arg02, arg05
1d924     EC 05 B0 FD | 	call	#_psram_spin2_read1
1d928     0A 00 00 FF 
1d92c     D3 E5 85 F1 | 	sub	objptr, ##5587
1d930     F2 1A 02 FB | 	rdlong	arg05, objptr
1d934     1C E4 85 F1 | 	sub	objptr, #28
1d938     F2 14 02 FB | 	rdlong	arg02, objptr
1d93c     0F 19 02 F6 | 	mov	arg04, local01
1d940     02 18 66 F0 | 	shl	arg04, #2
1d944     14 E4 05 F1 | 	add	objptr, #20
1d948     F2 16 02 FB | 	rdlong	arg03, objptr
1d94c     0B 19 02 FD | 	qmul	arg04, arg03
1d950                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1d950     F6 03 00 FF 
1d954     00 12 06 F6 | 	mov	arg01, ##519168
1d958     0D 13 82 F1 | 	sub	arg01, arg05
1d95c     02 16 66 F0 | 	shl	arg03, #2
1d960     0A 00 00 FF 
1d964     DB E5 05 F1 | 	add	objptr, ##5595
1d968     18 1A 62 FD | 	getqx	arg05
1d96c     0D 15 02 F1 | 	add	arg02, arg05
1d970     3C 06 B0 FD | 	call	#_psram_spin2_write
1d974     0B 00 00 FF 
1d978     CC E4 85 F1 | 	sub	objptr, ##5836
1d97c     01 1E 06 F1 | 	add	local01, #1
1d980     01 00 00 FF 
1d984     44 1E 16 F2 | 	cmp	local01, ##580 wc
1d988     50 FF 9F CD |  if_b	jmp	#LR__2350
1d98c                 | ' 
1d98c                 | ' repeat i from 580 to 599
1d98c     01 00 00 FF 
1d990     44 1E 06 F6 | 	mov	local01, ##580
1d994                 | LR__2351
1d994                 | '    fastline(0,1023,i,write_background)   
1d994     45 E4 05 F1 | 	add	objptr, #69
1d998     F2 18 02 FB | 	rdlong	arg04, objptr
1d99c     45 E4 85 F1 | 	sub	objptr, #69
1d9a0     00 12 06 F6 | 	mov	arg01, #0
1d9a4     09 14 CE F9 | 	bmask	arg02, #9
1d9a8     0F 17 02 F6 | 	mov	arg03, local01
1d9ac     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1d9b0     01 1E 06 F1 | 	add	local01, #1
1d9b4     01 00 00 FF 
1d9b8     58 1E 16 F2 | 	cmp	local01, ##600 wc
1d9bc     D4 FF 9F CD |  if_b	jmp	#LR__2351
1d9c0                 | ' repeat i from 0 to 3
1d9c0     00 1E 06 F6 | 	mov	local01, #0
1d9c4                 | LR__2352
1d9c4                 | '    fastline(0,1023,i,write_background)      
1d9c4     45 E4 05 F1 | 	add	objptr, #69
1d9c8     F2 18 02 FB | 	rdlong	arg04, objptr
1d9cc     45 E4 85 F1 | 	sub	objptr, #69
1d9d0     00 12 06 F6 | 	mov	arg01, #0
1d9d4     09 14 CE F9 | 	bmask	arg02, #9
1d9d8     0F 17 02 F6 | 	mov	arg03, local01
1d9dc     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1d9e0     01 1E 06 F1 | 	add	local01, #1
1d9e4     04 1E 56 F2 | 	cmps	local01, #4 wc
1d9e8     D8 FF 9F CD |  if_b	jmp	#LR__2352
1d9ec                 | ' 
1d9ec                 | ' repeat i from 0 to 35
1d9ec     00 1E 06 F6 | 	mov	local01, #0
1d9f0                 | LR__2353
1d9f0     0F 1B 02 F6 | 	mov	arg05, local01
1d9f4     01 1A 06 F1 | 	add	arg05, #1
1d9f8     10 00 00 FF 
1d9fc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1da00     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1da04     0B 1B 02 FD | 	qmul	arg05, arg03
1da08                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1da08     F6 03 00 FF 
1da0c     00 12 06 F6 | 	mov	arg01, ##519168
1da10     F9 E4 05 F1 | 	add	objptr, #249
1da14     F2 1A 02 FB | 	rdlong	arg05, objptr
1da18     0D 13 82 F1 | 	sub	arg01, arg05
1da1c     F5 E4 85 F1 | 	sub	objptr, #245
1da20     F2 14 02 FB | 	rdlong	arg02, objptr
1da24     10 00 00 FF 
1da28     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1da2c     0B 00 00 FF 
1da30     C8 E4 05 F1 | 	add	objptr, ##5832
1da34     18 1A 62 FD | 	getqx	arg05
1da38     0D 15 02 F1 | 	add	arg02, arg05
1da3c     D4 04 B0 FD | 	call	#_psram_spin2_read1
1da40     10 00 00 FF 
1da44     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1da48     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1da4c     0B 1F 02 FD | 	qmul	local01, arg03
1da50                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1da50     F6 03 00 FF 
1da54     00 12 06 F6 | 	mov	arg01, ##519168
1da58     0A 00 00 FF 
1da5c     D3 E5 85 F1 | 	sub	objptr, ##5587
1da60     F2 1A 02 FB | 	rdlong	arg05, objptr
1da64     0D 13 82 F1 | 	sub	arg01, arg05
1da68     F5 E4 85 F1 | 	sub	objptr, #245
1da6c     F2 14 02 FB | 	rdlong	arg02, objptr
1da70     10 00 00 FF 
1da74     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1da78     0B 00 00 FF 
1da7c     C8 E4 05 F1 | 	add	objptr, ##5832
1da80     18 1A 62 FD | 	getqx	arg05
1da84     0D 15 02 F1 | 	add	arg02, arg05
1da88     24 05 B0 FD | 	call	#_psram_spin2_write
1da8c     0B 00 00 FF 
1da90     CC E4 85 F1 | 	sub	objptr, ##5836
1da94     01 1E 06 F1 | 	add	local01, #1
1da98     24 1E 56 F2 | 	cmps	local01, #36 wc
1da9c     50 FF 9F CD |  if_b	jmp	#LR__2353
1daa0                 | ' repeat i from 0 to timings[7]-1
1daa0     00 1E 06 F6 | 	mov	local01, #0
1daa4     10 00 00 FF 
1daa8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1daac     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1dab0     10 00 00 FF 
1dab4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1dab8     01 20 86 F1 | 	sub	local02, #1
1dabc     00 20 56 F2 | 	cmps	local02, #0 wc
1dac0     01 22 86 F6 | 	negc	local03, #1
1dac4     11 21 02 F1 | 	add	local02, local03
1dac8                 | LR__2354
1dac8                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1dac8     04 E4 05 F1 | 	add	objptr, #4
1dacc     F2 12 02 FB | 	rdlong	arg01, objptr
1dad0     10 00 00 FF 
1dad4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1dad8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1dadc     10 00 00 FF 
1dae0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1dae4     0D 19 02 F6 | 	mov	arg04, arg05
1dae8     03 18 66 F0 | 	shl	arg04, #3
1daec     0D 19 02 F1 | 	add	arg04, arg05
1daf0     02 18 66 F0 | 	shl	arg04, #2
1daf4     0F 19 02 F1 | 	add	arg04, local01
1daf8     0C 13 02 F1 | 	add	arg01, arg04
1dafc     20 14 06 F6 | 	mov	arg02, #32
1db00     01 16 06 F6 | 	mov	arg03, #1
1db04     00 18 06 F6 | 	mov	arg04, #0
1db08     01 1A 06 F6 | 	mov	arg05, #1
1db0c     0B 00 00 FF 
1db10     C8 E4 05 F1 | 	add	objptr, ##5832
1db14     34 05 B0 FD | 	call	#_psram_spin2_fill
1db18     0B 00 00 FF 
1db1c     CC E4 85 F1 | 	sub	objptr, ##5836
1db20     11 1F 02 F1 | 	add	local01, local03
1db24     10 1F 0A F2 | 	cmp	local01, local02 wz
1db28     9C FF 9F 5D |  if_ne	jmp	#LR__2354
1db2c     A7 F0 03 F6 | 	mov	ptra, fp
1db30     B2 00 A0 FD | 	call	#popregs_
1db34                 | _hg010b_spin2_scrollup2_ret
1db34     2D 00 64 FD | 	ret
1db38                 | 
1db38                 | ' 
1db38                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1db38                 | ' 
1db38                 | ' pub crlf()
1db38                 | _hg010b_spin2_crlf
1db38                 | ' 
1db38                 | ' cursor_x:=leading_spaces*2
1db38     01 00 00 FF 
1db3c     B6 E4 05 F1 | 	add	objptr, ##694
1db40     F2 16 02 FB | 	rdlong	arg03, objptr
1db44     01 16 66 F0 | 	shl	arg03, #1
1db48     01 00 00 FF 
1db4c     7A E4 85 F1 | 	sub	objptr, ##634
1db50     F2 16 52 FC | 	wrword	arg03, objptr
1db54                 | ' cursor_y+=1
1db54     02 E4 05 F1 | 	add	objptr, #2
1db58     F2 16 C2 FA | 	rdbyte	arg03, objptr
1db5c     01 16 06 F1 | 	add	arg03, #1
1db60     F2 16 42 FC | 	wrbyte	arg03, objptr
1db64                 | ' if cursor_y>st_lines-1
1db64     C3 E4 05 F1 | 	add	objptr, #195
1db68     F2 16 02 FB | 	rdlong	arg03, objptr
1db6c     01 16 86 F1 | 	sub	arg03, #1
1db70     C3 E4 85 F1 | 	sub	objptr, #195
1db74     F2 14 C2 FA | 	rdbyte	arg02, objptr
1db78     3E E4 85 F1 | 	sub	objptr, #62
1db7c     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1db80     2C 00 90 ED |  if_be	jmp	#LR__2360
1db84                 | '   scrollup2()
1db84     00 12 06 F6 | 	mov	arg01, #0
1db88     01 00 00 FF 
1db8c     58 14 06 F6 | 	mov	arg02, ##600
1db90     10 16 06 F6 | 	mov	arg03, #16
1db94     38 FD BF FD | 	call	#_hg010b_spin2_scrollup2
1db98                 | '   cursor_y:=st_lines-1
1db98     01 E5 05 F1 | 	add	objptr, #257
1db9c     F2 16 02 FB | 	rdlong	arg03, objptr
1dba0     01 16 86 F1 | 	sub	arg03, #1
1dba4     C3 E4 85 F1 | 	sub	objptr, #195
1dba8     F2 16 42 FC | 	wrbyte	arg03, objptr
1dbac     3E E4 85 F1 | 	sub	objptr, #62
1dbb0                 | LR__2360
1dbb0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1dbb0     3C E4 05 F1 | 	add	objptr, #60
1dbb4     F2 14 E2 FA | 	rdword	arg02, objptr
1dbb8     02 14 66 F0 | 	shl	arg02, #2
1dbbc     02 E4 05 F1 | 	add	objptr, #2
1dbc0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1dbc4     3E E4 85 F1 | 	sub	objptr, #62
1dbc8     04 16 66 F0 | 	shl	arg03, #4
1dbcc     04 16 06 F1 | 	add	arg03, #4
1dbd0     11 12 06 F6 | 	mov	arg01, #17
1dbd4     4C EB BF FD | 	call	#_hg010b_spin2_setspritepos
1dbd8                 | _hg010b_spin2_crlf_ret
1dbd8     2D 00 64 FD | 	ret
1dbdc                 | 
1dbdc                 | ' 
1dbdc                 | ' 
1dbdc                 | ' '*************************************************************************
1dbdc                 | ' '                                                                        *
1dbdc                 | ' '  Conversions                                                           *
1dbdc                 | ' '                                                                        *
1dbdc                 | ' '*************************************************************************
1dbdc                 | ' 
1dbdc                 | ' ''---------- Convert a integer to dec string, return a pointer
1dbdc                 | ' 
1dbdc                 | ' pub inttostr(i):result |q,pos,k,j
1dbdc                 | _hg010b_spin2_inttostr
1dbdc     03 4A 05 F6 | 	mov	COUNT_, #3
1dbe0     A8 00 A0 FD | 	call	#pushregs_
1dbe4     09 1F 0A F6 | 	mov	local01, arg01 wz
1dbe8                 | ' 
1dbe8                 | ' j:=i
1dbe8                 | ' pos:=10
1dbe8     0A 20 06 F6 | 	mov	local02, #10
1dbec                 | ' k:=0
1dbec     00 22 06 F6 | 	mov	local03, #0
1dbf0                 | ' 
1dbf0                 | ' if (j==0)
1dbf0     18 00 90 5D |  if_ne	jmp	#LR__2370
1dbf4                 | '   n_string[0]:=48
1dbf4     4D E4 05 F1 | 	add	objptr, #77
1dbf8     F2 60 48 FC | 	wrbyte	#48, objptr
1dbfc                 | '   n_string[1]:=0
1dbfc     01 E4 05 F1 | 	add	objptr, #1
1dc00     F2 00 48 FC | 	wrbyte	#0, objptr
1dc04     4E E4 85 F1 | 	sub	objptr, #78
1dc08     C4 00 90 FD | 	jmp	#LR__2377
1dc0c                 | LR__2370
1dc0c                 | ' 
1dc0c                 | ' else
1dc0c                 | '   if (j<0)
1dc0c     0F 1F 52 F6 | 	abs	local01, local01 wc
1dc10                 | '     j:=0-j
1dc10                 | '     k:=45
1dc10     2D 22 06 C6 |  if_b	mov	local03, #45
1dc14                 | ' 
1dc14                 | '   n_string[11]:=0
1dc14     58 E4 05 F1 | 	add	objptr, #88
1dc18     F2 00 48 FC | 	wrbyte	#0, objptr
1dc1c     58 E4 85 F1 | 	sub	objptr, #88
1dc20     97 24 48 FB | 	callpa	#(@LR__2372-@LR__2371)>>2,fcache_load_ptr_
1dc24                 | '   repeat while (pos>-1)
1dc24                 | LR__2371
1dc24     00 20 56 F2 | 	cmps	local02, #0 wc
1dc28     40 00 90 CD |  if_b	jmp	#LR__2373
1dc2c     0F FB 51 F6 | 	abs	result1, local01 wc
1dc30     0A FA 15 FD | 	qdiv	result1, #10
1dc34                 | '     q:=j//10
1dc34     19 FA 61 FD | 	getqy	result1
1dc38     FD FA 81 F6 | 	negc	result1, result1
1dc3c     0F 1F 52 F6 | 	abs	local01, local01 wc
1dc40     0A 1E 16 FD | 	qdiv	local01, #10
1dc44                 | '     q:=48+q
1dc44     30 FA 05 F1 | 	add	result1, #48
1dc48                 | '     n_string[pos]:=q
1dc48     10 1F 02 F6 | 	mov	local01, local02
1dc4c     4D E4 05 F1 | 	add	objptr, #77
1dc50     F2 1E 02 F1 | 	add	local01, objptr
1dc54     0F FB 41 FC | 	wrbyte	result1, local01
1dc58                 | '     j:=j/10
1dc58     4D E4 85 F1 | 	sub	objptr, #77
1dc5c                 | '     pos-=1
1dc5c     01 20 86 F1 | 	sub	local02, #1
1dc60     18 1E 62 FD | 	getqx	local01
1dc64     0F 1F 82 F6 | 	negc	local01, local01
1dc68     B8 FF 9F FD | 	jmp	#LR__2371
1dc6c                 | LR__2372
1dc6c                 | LR__2373
1dc6c                 | '   repeat while n_string[0]==48
1dc6c                 | LR__2374
1dc6c     4D E4 05 F1 | 	add	objptr, #77
1dc70     F2 16 C2 FA | 	rdbyte	arg03, objptr
1dc74     4D E4 85 F1 | 	sub	objptr, #77
1dc78     30 16 0E F2 | 	cmp	arg03, #48 wz
1dc7c     20 00 90 5D |  if_ne	jmp	#LR__2375
1dc80                 | '     bytemove(@n_string,@n_string+1,12)
1dc80     4D E4 05 F1 | 	add	objptr, #77
1dc84     F2 12 02 F6 | 	mov	arg01, objptr
1dc88     F2 14 02 F6 | 	mov	arg02, objptr
1dc8c     4D E4 85 F1 | 	sub	objptr, #77
1dc90     01 14 06 F1 | 	add	arg02, #1
1dc94     0C 16 06 F6 | 	mov	arg03, #12
1dc98     BC 0D B0 FD | 	call	#__system____builtin_memmove
1dc9c     CC FF 9F FD | 	jmp	#LR__2374
1dca0                 | LR__2375
1dca0                 | ' 
1dca0                 | '   if k==45
1dca0     2D 22 0E F2 | 	cmp	local03, #45 wz
1dca4     28 00 90 5D |  if_ne	jmp	#LR__2376
1dca8                 | '      bytemove(@n_string+1,@n_string,12)
1dca8     4D E4 05 F1 | 	add	objptr, #77
1dcac     F2 12 02 F6 | 	mov	arg01, objptr
1dcb0     01 12 06 F1 | 	add	arg01, #1
1dcb4     F2 14 02 F6 | 	mov	arg02, objptr
1dcb8     4D E4 85 F1 | 	sub	objptr, #77
1dcbc     0C 16 06 F6 | 	mov	arg03, #12
1dcc0     94 0D B0 FD | 	call	#__system____builtin_memmove
1dcc4                 | '      n_string[0]:=k
1dcc4     4D E4 05 F1 | 	add	objptr, #77
1dcc8     F2 22 42 FC | 	wrbyte	local03, objptr
1dccc     4D E4 85 F1 | 	sub	objptr, #77
1dcd0                 | LR__2376
1dcd0                 | LR__2377
1dcd0                 | ' 
1dcd0                 | ' q:=@n_string
1dcd0     4D E4 05 F1 | 	add	objptr, #77
1dcd4     F2 FA 01 F6 | 	mov	result1, objptr
1dcd8     4D E4 85 F1 | 	sub	objptr, #77
1dcdc                 | ' return q
1dcdc     A7 F0 03 F6 | 	mov	ptra, fp
1dce0     B2 00 A0 FD | 	call	#popregs_
1dce4                 | _hg010b_spin2_inttostr_ret
1dce4     2D 00 64 FD | 	ret
1dce8                 | 
1dce8                 | ' 
1dce8                 | ' '..............................................................................
1dce8                 | ' 
1dce8                 | ' {{
1dce8                 | ' }}
1dce8                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1dce8                 | _psram_spin2_startx
1dce8     04 4A 05 F6 | 	mov	COUNT_, #4
1dcec     A8 00 A0 FD | 	call	#pushregs_
1dcf0     09 1F 02 F6 | 	mov	local01, arg01
1dcf4     0B 21 02 F6 | 	mov	local02, arg03
1dcf8     0C 23 02 F6 | 	mov	local03, arg04
1dcfc                 | '     stop() ' restart driver if required
1dcfc     54 01 B0 FD | 	call	#_psram_spin2_stop
1dd00     00 1E 0E F2 | 	cmp	local01, #0 wz
1dd04     14 1E 06 AB |  if_e	rdlong	local01, #20
1dd08     0F 15 52 F6 | 	abs	arg02, local01 wc
1dd0c     A1 07 00 FF 
1dd10     40 14 16 FD | 	qdiv	arg02, ##1000000
1dd14                 | ' 
1dd14                 | '     ' use current frequency if none specified
1dd14                 | ' 
1dd14                 | '     if freq == 0 
1dd14                 | '         freq := clkfreq 
1dd14                 | ' 
1dd14                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1dd14                 | ' 
1dd14                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1dd14                 | '     if burst < 0
1dd14                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1dd14     18 14 62 FD | 	getqx	arg02
1dd18     0A 19 82 F6 | 	negc	arg04, arg02
1dd1c     03 18 66 F0 | 	shl	arg04, #3
1dd20     84 18 86 F1 | 	sub	arg04, #132
1dd24     04 18 46 F0 | 	shr	arg04, #4
1dd28     04 18 66 F0 | 	shl	arg04, #4
1dd2c     00 18 56 F2 | 	cmps	arg04, #0 wc
1dd30     0E FA 65 C6 |  if_b	neg	result1, #14
1dd34     10 01 90 CD |  if_b	jmp	#LR__2383
1dd38                 | ' 
1dd38                 | '     ' compute the input delay
1dd38                 | ' 
1dd38                 | '     if delay <= 0
1dd38     01 20 56 F2 | 	cmps	local02, #1 wc
1dd3c     10 00 90 3D |  if_ae	jmp	#LR__2380
1dd40                 | '         delay := lookupDelay(freq)
1dd40     0F 13 02 F6 | 	mov	arg01, local01
1dd44     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1dd48     FD 20 02 F6 | 	mov	local02, result1
1dd4c     04 00 90 FD | 	jmp	#LR__2381
1dd50                 | LR__2380
1dd50                 | '     else
1dd50                 | '         delay <#= $f ' limit to 15
1dd50     0F 20 66 F3 | 	fles	local02, #15
1dd54                 | LR__2381
1dd54                 | ' 
1dd54                 | '     ' create our lock
1dd54                 | ' 
1dd54                 | '     driverlock := LOCKNEW()  
1dd54     00 FA 05 F6 | 	mov	result1, #0
1dd58     04 FA 61 FD | 	locknew	result1
1dd5c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1dd60     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1dd64                 | '     if driverlock == -1
1dd64     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1dd68     FF FF 7F FF 
1dd6c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1dd70                 | '         return ERR_NO_LOCK
1dd70     1A FA 65 A6 |  if_e	neg	result1, #26
1dd74     D0 00 90 AD |  if_e	jmp	#LR__2383
1dd78                 | ' 
1dd78                 | '     ' patch in the proper data and HUB addresses to the startup structure
1dd78                 | ' 
1dd78                 | '     long[@startupData][0]:=clkfreq
1dd78     14 1E 06 FB | 	rdlong	local01, #20
1dd7c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1dd80     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1dd84                 | ' '    long[@startupData][1]:=$1000_0000
1dd84                 | '     long[@startupData][5]:=@deviceData
1dd84     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1dd88     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1dd8c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1dd90     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1dd94     14 14 06 F1 | 	add	arg02, #20
1dd98     0A 1F 62 FC | 	wrlong	local01, arg02
1dd9c                 | '     long[@startupData][6]:=@qosData
1dd9c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1dda0     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1dda4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1dda8     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1ddac     18 14 06 F1 | 	add	arg02, #24
1ddb0     0A 1F 62 FC | 	wrlong	local01, arg02
1ddb4                 | '     long[@startupData][7]:=$7FF00
1ddb4     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1ddb8     1C 1E 06 F1 | 	add	local01, #28
1ddbc     FF 03 80 FF 
1ddc0     0F 01 6A FC | 	wrlong	##524032, local01
1ddc4                 | ' 
1ddc4                 | '     ' setup some default bank and QoS parameter values
1ddc4                 | ' 
1ddc4                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1ddc4     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1ddc8     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1ddcc     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1ddd0     10 18 66 F0 | 	shl	arg04, #16
1ddd4     0C 20 66 F0 | 	shl	local02, #12
1ddd8     10 19 42 F5 | 	or	arg04, local02
1dddc     18 18 46 F5 | 	or	arg04, #24
1dde0     0C 15 02 F6 | 	mov	arg02, arg04
1dde4     02 16 06 F6 | 	mov	arg03, #2
1dde8     A0 00 A0 FD | 	call	#\builtin_longfill_
1ddec                 | '     longfill(@qosData, $FFFF0000, 8)
1ddec     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1ddf0     07 16 06 F6 | 	mov	arg03, #7
1ddf4     28 16 62 FD | 	setq	arg03
1ddf8     80 FF FF FF 
1ddfc     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1de00                 | ' 
1de00                 | '     ' get the address of the PSRAM memory driver so we can start it
1de00                 | ' 
1de00                 | '     driverAddr:= driver.getDriverAddr()
1de00                 | '     return @driver_start
1de00     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1de04     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1de08     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1de0c                 | ' 
1de0c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1de0c                 | ' 
1de0c                 | '     if desiredcog < 0
1de0c     00 22 56 F2 | 	cmps	local03, #0 wc
1de10                 | '         desiredcog := NEWCOG
1de10     10 22 06 C6 |  if_b	mov	local03, #16
1de14                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1de14     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1de18     11 25 02 F6 | 	mov	local04, local03
1de1c     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1de20     0A 25 F2 FC | 	coginit	local04, arg02 wc
1de24     01 24 66 C6 |  if_b	neg	local04, #1
1de28     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1de2c     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1de30                 | '     repeat until long[@startupData] == 0 
1de30     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1de34                 | LR__2382
1de34     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1de38     F8 FF 9F 5D |  if_ne	jmp	#LR__2382
1de3c                 | ' 
1de3c                 | '     return drivercog
1de3c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1de40     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1de44     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1de48                 | LR__2383
1de48     A7 F0 03 F6 | 	mov	ptra, fp
1de4c     B2 00 A0 FD | 	call	#popregs_
1de50                 | _psram_spin2_startx_ret
1de50     2D 00 64 FD | 	ret
1de54                 | 
1de54                 | ' 
1de54                 | ' '..............................................................................
1de54                 | ' 
1de54                 | ' {{
1de54                 | ' }}
1de54                 | ' PUB stop() : i
1de54                 | _psram_spin2_stop
1de54     00 00 06 F6 | 	mov	_var01, #0
1de58                 | '     if drivercog <> -1
1de58     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1de5c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1de60     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1de64     FF FF 7F FF 
1de68     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1de6c     70 00 90 AD |  if_e	jmp	#LR__2393
1de70                 | '         cogstop(drivercog) ' a rather brutal stop
1de70     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1de74     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1de78     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1de7c     03 12 62 FD | 	cogstop	arg01
1de80     97 26 48 FB | 	callpa	#(@LR__2392-@LR__2390)>>2,fcache_load_ptr_
1de84                 | '         repeat i from 0 to 7
1de84                 | LR__2390
1de84                 | '             if long[$7FF00][i*3] < 0
1de84     00 FB 01 F6 | 	mov	result1, _var01
1de88     01 FA 65 F0 | 	shl	result1, #1
1de8c     00 FB 01 F1 | 	add	result1, _var01
1de90     02 FA 65 F0 | 	shl	result1, #2
1de94     FF 03 00 FF 
1de98     00 FB 05 F1 | 	add	result1, ##524032
1de9c     FD FA 01 FB | 	rdlong	result1, result1
1dea0     00 FA 55 F2 | 	cmps	result1, #0 wc
1dea4     1C 00 90 3D |  if_ae	jmp	#LR__2391
1dea8                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1dea8     00 FB 01 F6 | 	mov	result1, _var01
1deac     01 FA 65 F0 | 	shl	result1, #1
1deb0     00 FB 01 F1 | 	add	result1, _var01
1deb4     02 FA 65 F0 | 	shl	result1, #2
1deb8     FF 03 00 FF 
1debc     00 FB 05 F1 | 	add	result1, ##524032
1dec0     FD 20 68 FC | 	wrlong	#16, result1
1dec4                 | LR__2391
1dec4     01 00 06 F1 | 	add	_var01, #1
1dec8     08 00 56 F2 | 	cmps	_var01, #8 wc
1decc     B4 FF 9F CD |  if_b	jmp	#LR__2390
1ded0                 | LR__2392
1ded0                 | '         drivercog := -1
1ded0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1ded4     FF FF FF FF 
1ded8     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1dedc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1dee0                 | LR__2393
1dee0                 | '     if driverlock <> -1
1dee0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1dee4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1dee8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1deec     FF FF 7F FF 
1def0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1def4                 | '         LOCKRET(driverlock)
1def4     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1def8     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1defc     05 12 62 5D |  if_ne	lockret	arg01
1df00                 | '         driverlock := -1
1df00     FF FF FF 5F 
1df04     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1df08     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1df0c     00 FB 01 F6 | 	mov	result1, _var01
1df10                 | _psram_spin2_stop_ret
1df10     2D 00 64 FD | 	ret
1df14                 | 
1df14                 | ' 
1df14                 | ' '..............................................................................
1df14                 | ' 
1df14                 | ' {{
1df14                 | ' }}
1df14                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1df14                 | _psram_spin2_read1
1df14                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1df14                 | '     if drivercog == -1 ' driver must be running
1df14     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1df18     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1df1c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1df20     FF FF 7F FF 
1df24     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1df28                 | '         return ERR_INACTIVE
1df28     0F FA 65 A6 |  if_e	neg	result1, #15
1df2c     7C 00 90 AD |  if_e	jmp	#LR__2401
1df30                 | '     if count == 0 ' don't even bother reading
1df30     00 16 0E F2 | 	cmp	arg03, #0 wz
1df34                 | '         return 0
1df34     00 FA 05 A6 |  if_e	mov	result1, #0
1df38     70 00 90 AD |  if_e	jmp	#LR__2401
1df3c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1df3c     00 FA 05 F6 | 	mov	result1, #0
1df40     01 FA 61 FD | 	cogid	result1
1df44     FD 00 02 F6 | 	mov	_var01, result1
1df48     01 00 66 F0 | 	shl	_var01, #1
1df4c     FD 00 02 F1 | 	add	_var01, result1
1df50     02 00 66 F0 | 	shl	_var01, #2
1df54     FF 03 00 FF 
1df58     00 03 06 F6 | 	mov	_var02, ##524032
1df5c     00 03 02 F1 | 	add	_var02, _var01
1df60                 | '     if long[mailbox] < 0
1df60     01 01 02 FB | 	rdlong	_var01, _var02
1df64     00 00 56 F2 | 	cmps	_var01, #0 wc
1df68                 | '         return ERR_MAILBOX_BUSY
1df68     1C FA 65 C6 |  if_b	neg	result1, #28
1df6c     3C 00 90 CD |  if_b	jmp	#LR__2401
1df70                 | '     long[mailbox][2] := count
1df70     08 02 06 F1 | 	add	_var02, #8
1df74     01 17 62 FC | 	wrlong	arg03, _var02
1df78                 | '     long[mailbox][1] := dstHubAddr
1df78     04 02 86 F1 | 	sub	_var02, #4
1df7c     01 13 62 FC | 	wrlong	arg01, _var02
1df80     04 02 86 F1 | 	sub	_var02, #4
1df84                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1df84     0A 05 02 F6 | 	mov	_var03, arg02
1df88     D9 04 06 F4 | 	bitl	_var03, #217
1df8c     00 00 58 FF 
1df90     00 00 06 F6 | 	mov	_var01, ##-1342177280
1df94     02 01 02 F1 | 	add	_var01, _var03
1df98     01 01 62 FC | 	wrlong	_var01, _var02
1df9c                 | '     repeat
1df9c                 | LR__2400
1df9c                 | '         result := long[mailbox]    
1df9c     01 05 02 FB | 	rdlong	_var03, _var02
1dfa0     00 04 56 F2 | 	cmps	_var03, #0 wc
1dfa4     F4 FF 9F CD |  if_b	jmp	#LR__2400
1dfa8                 | '     while result < 0   
1dfa8                 | '     return -result                       'return success or error
1dfa8     02 FB 61 F6 | 	neg	result1, _var03
1dfac                 | LR__2401
1dfac                 | _psram_spin2_read1_ret
1dfac     2D 00 64 FD | 	ret
1dfb0                 | 
1dfb0                 | ' 
1dfb0                 | ' '..............................................................................
1dfb0                 | ' 
1dfb0                 | ' {{
1dfb0                 | ' }}
1dfb0                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1dfb0                 | _psram_spin2_write
1dfb0                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1dfb0                 | '     if drivercog == -1 ' driver must be running
1dfb0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1dfb4     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1dfb8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1dfbc     FF FF 7F FF 
1dfc0     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1dfc4                 | '         return ERR_INACTIVE
1dfc4     0F FA 65 A6 |  if_e	neg	result1, #15
1dfc8     7C 00 90 AD |  if_e	jmp	#LR__2411
1dfcc                 | '     if count == 0 ' don't even bother writing
1dfcc     00 16 0E F2 | 	cmp	arg03, #0 wz
1dfd0                 | '         return 0
1dfd0     00 FA 05 A6 |  if_e	mov	result1, #0
1dfd4     70 00 90 AD |  if_e	jmp	#LR__2411
1dfd8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1dfd8     00 FA 05 F6 | 	mov	result1, #0
1dfdc     01 FA 61 FD | 	cogid	result1
1dfe0     FD 00 02 F6 | 	mov	_var01, result1
1dfe4     01 00 66 F0 | 	shl	_var01, #1
1dfe8     FD 00 02 F1 | 	add	_var01, result1
1dfec     02 00 66 F0 | 	shl	_var01, #2
1dff0     FF 03 00 FF 
1dff4     00 03 06 F6 | 	mov	_var02, ##524032
1dff8     00 03 02 F1 | 	add	_var02, _var01
1dffc                 | '     if long[mailbox] < 0
1dffc     01 01 02 FB | 	rdlong	_var01, _var02
1e000     00 00 56 F2 | 	cmps	_var01, #0 wc
1e004                 | '         return ERR_MAILBOX_BUSY
1e004     1C FA 65 C6 |  if_b	neg	result1, #28
1e008     3C 00 90 CD |  if_b	jmp	#LR__2411
1e00c                 | '     long[mailbox][2] := count
1e00c     08 02 06 F1 | 	add	_var02, #8
1e010     01 17 62 FC | 	wrlong	arg03, _var02
1e014                 | '     long[mailbox][1] := srcHubAddr
1e014     04 02 86 F1 | 	sub	_var02, #4
1e018     01 13 62 FC | 	wrlong	arg01, _var02
1e01c     04 02 86 F1 | 	sub	_var02, #4
1e020                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1e020     0A 05 02 F6 | 	mov	_var03, arg02
1e024     D9 04 06 F4 | 	bitl	_var03, #217
1e028     00 00 78 FF 
1e02c     00 00 06 F6 | 	mov	_var01, ##-268435456
1e030     02 01 02 F1 | 	add	_var01, _var03
1e034     01 01 62 FC | 	wrlong	_var01, _var02
1e038                 | '     repeat
1e038                 | LR__2410
1e038                 | '         result := long[mailbox]    
1e038     01 05 02 FB | 	rdlong	_var03, _var02
1e03c     00 04 56 F2 | 	cmps	_var03, #0 wc
1e040     F4 FF 9F CD |  if_b	jmp	#LR__2410
1e044                 | '     while result < 0   
1e044                 | '     return -result                       'return success or error
1e044     02 FB 61 F6 | 	neg	result1, _var03
1e048                 | LR__2411
1e048                 | _psram_spin2_write_ret
1e048     2D 00 64 FD | 	ret
1e04c                 | 
1e04c                 | ' 
1e04c                 | ' ' generalized fill
1e04c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1e04c                 | _psram_spin2_fill
1e04c     09 01 02 F6 | 	mov	_var01, arg01
1e050     0A 03 02 F6 | 	mov	_var02, arg02
1e054     0B 05 02 F6 | 	mov	_var03, arg03
1e058     0D 07 02 F6 | 	mov	_var04, arg05
1e05c                 | '     case datasize 
1e05c     01 06 86 F1 | 	sub	_var04, #1
1e060     04 06 26 F3 | 	fle	_var04, #4
1e064     30 06 62 FD | 	jmprel	_var04
1e068                 | LR__2420
1e068     10 00 90 FD | 	jmp	#LR__2421
1e06c     18 00 90 FD | 	jmp	#LR__2422
1e070     2C 00 90 FD | 	jmp	#LR__2424
1e074     1C 00 90 FD | 	jmp	#LR__2423
1e078     24 00 90 FD | 	jmp	#LR__2424
1e07c                 | LR__2421
1e07c                 | '         1: req := driver.R_WRITEBYTE
1e07c     00 00 60 FF 
1e080     00 08 06 F6 | 	mov	_var05, ##-1073741824
1e084     20 00 90 FD | 	jmp	#LR__2425
1e088                 | LR__2422
1e088                 | '         2: req := driver.R_WRITEWORD
1e088     00 00 68 FF 
1e08c     00 08 06 F6 | 	mov	_var05, ##-805306368
1e090     14 00 90 FD | 	jmp	#LR__2425
1e094                 | LR__2423
1e094                 | '         4: req := driver.R_WRITELONG
1e094     00 00 70 FF 
1e098     00 08 06 F6 | 	mov	_var05, ##-536870912
1e09c     08 00 90 FD | 	jmp	#LR__2425
1e0a0                 | LR__2424
1e0a0                 | '         other : return ERR_INVALID
1e0a0     06 FA 65 F6 | 	neg	result1, #6
1e0a4     94 00 90 FD | 	jmp	#LR__2427
1e0a8                 | LR__2425
1e0a8                 | '     if count == 0   ' nothing to do
1e0a8     00 04 0E F2 | 	cmp	_var03, #0 wz
1e0ac                 | '         return 0
1e0ac     00 FA 05 A6 |  if_e	mov	result1, #0
1e0b0     88 00 90 AD |  if_e	jmp	#LR__2427
1e0b4                 | '     if drivercog == -1
1e0b4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1e0b8     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1e0bc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1e0c0     FF FF 7F FF 
1e0c4     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1e0c8                 | '         return ERR_INACTIVE
1e0c8     0F FA 65 A6 |  if_e	neg	result1, #15
1e0cc     6C 00 90 AD |  if_e	jmp	#LR__2427
1e0d0                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1e0d0     00 FA 05 F6 | 	mov	result1, #0
1e0d4     01 FA 61 FD | 	cogid	result1
1e0d8     FD 06 02 F6 | 	mov	_var04, result1
1e0dc     01 06 66 F0 | 	shl	_var04, #1
1e0e0     FD 06 02 F1 | 	add	_var04, result1
1e0e4     02 06 66 F0 | 	shl	_var04, #2
1e0e8     FF 03 00 FF 
1e0ec     00 0B 06 F6 | 	mov	_var06, ##524032
1e0f0     03 0B 02 F1 | 	add	_var06, _var04
1e0f4                 | '     if long[mailbox] < 0
1e0f4     05 07 02 FB | 	rdlong	_var04, _var06
1e0f8     00 06 56 F2 | 	cmps	_var04, #0 wc
1e0fc                 | '         return ERR_MAILBOX_BUSY
1e0fc     1C FA 65 C6 |  if_b	neg	result1, #28
1e100     38 00 90 CD |  if_b	jmp	#LR__2427
1e104                 | '     long[mailbox][2] := count
1e104     08 0A 06 F1 | 	add	_var06, #8
1e108     05 05 62 FC | 	wrlong	_var03, _var06
1e10c                 | '     long[mailbox][1] := pattern
1e10c     04 0A 86 F1 | 	sub	_var06, #4
1e110     05 03 62 FC | 	wrlong	_var02, _var06
1e114     04 0A 86 F1 | 	sub	_var06, #4
1e118                 | '     long[mailbox] := req + (addr & $1ffffff)
1e118     04 0D 02 F6 | 	mov	_var07, _var05
1e11c     00 0F 02 F6 | 	mov	_var08, _var01
1e120     D9 0E 06 F4 | 	bitl	_var08, #217
1e124     07 0D 02 F1 | 	add	_var07, _var08
1e128     05 0D 62 FC | 	wrlong	_var07, _var06
1e12c                 | '     repeat
1e12c                 | LR__2426
1e12c                 | '         r := long[mailbox]
1e12c     05 0F 02 FB | 	rdlong	_var08, _var06
1e130     00 0E 56 F2 | 	cmps	_var08, #0 wc
1e134     F4 FF 9F CD |  if_b	jmp	#LR__2426
1e138                 | '     while r < 0
1e138                 | '     return -r                  ' return 0 for success or negated error code
1e138     07 FB 61 F6 | 	neg	result1, _var08
1e13c                 | LR__2427
1e13c                 | _psram_spin2_fill_ret
1e13c     2D 00 64 FD | 	ret
1e140                 | 
1e140                 | ' 
1e140                 | ' '..............................................................................
1e140                 | ' 
1e140                 | ' {{
1e140                 | ' }}
1e140                 | ' PUB setQos(cog, qos) : result | mailbox
1e140                 | _psram_spin2_setQos
1e140     09 01 02 F6 | 	mov	_var01, arg01
1e144                 | '     if drivercog == -1 ' driver must be running
1e144     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1e148     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1e14c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1e150     FF FF 7F FF 
1e154     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1e158                 | '         return ERR_INACTIVE
1e158     0F FA 65 A6 |  if_e	neg	result1, #15
1e15c     9C 00 90 AD |  if_e	jmp	#LR__2434
1e160                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1e160     00 00 56 F2 | 	cmps	_var01, #0 wc
1e164     08 00 90 CD |  if_b	jmp	#LR__2430
1e168     08 00 56 F2 | 	cmps	_var01, #8 wc
1e16c     08 00 90 CD |  if_b	jmp	#LR__2431
1e170                 | LR__2430
1e170                 | '         return ERR_INVALID
1e170     06 FA 65 F6 | 	neg	result1, #6
1e174     84 00 90 FD | 	jmp	#LR__2434
1e178                 | LR__2431
1e178                 | '     long[@qosData][cog] := qos & !$1ff
1e178     FF 15 26 F5 | 	andn	arg02, #511
1e17c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1e180     02 00 66 F0 | 	shl	_var01, #2
1e184     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1e188     00 15 62 FC | 	wrlong	arg02, _var01
1e18c                 | '     mailbox := $7FF00 + drivercog*12
1e18c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1e190     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1e194     02 07 02 F6 | 	mov	_var04, _var03
1e198     01 06 66 F0 | 	shl	_var04, #1
1e19c     02 07 02 F1 | 	add	_var04, _var03
1e1a0     02 06 66 F0 | 	shl	_var04, #2
1e1a4     FF 03 00 FF 
1e1a8     00 09 06 F6 | 	mov	_var05, ##524032
1e1ac     03 09 02 F1 | 	add	_var05, _var04
1e1b0                 | '     repeat until LOCKTRY(driverlock)
1e1b0     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1e1b4                 | LR__2432
1e1b4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1e1b8     06 12 72 FD | 	locktry	arg01 wc
1e1bc     F4 FF 9F 3D |  if_ae	jmp	#LR__2432
1e1c0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1e1c4                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1e1c4     00 06 06 F6 | 	mov	_var04, #0
1e1c8     01 06 62 FD | 	cogid	_var04
1e1cc     00 00 78 FF 
1e1d0     00 02 06 F6 | 	mov	_var02, ##-268435456
1e1d4     03 03 02 F1 | 	add	_var02, _var04
1e1d8     04 03 62 FC | 	wrlong	_var02, _var05
1e1dc                 | '     repeat while long[mailbox] < 0
1e1dc                 | LR__2433
1e1dc     04 03 02 FB | 	rdlong	_var02, _var05
1e1e0     00 02 56 F2 | 	cmps	_var02, #0 wc
1e1e4     F4 FF 9F CD |  if_b	jmp	#LR__2433
1e1e8                 | '     LOCKREL(driverlock)
1e1e8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1e1ec     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1e1f0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1e1f4     07 12 72 FD | 	lockrel	arg01 wc
1e1f8     00 FA 05 F6 | 	mov	result1, #0
1e1fc                 | LR__2434
1e1fc                 | _psram_spin2_setQos_ret
1e1fc     2D 00 64 FD | 	ret
1e200                 | 
1e200                 | ' 
1e200                 | ' '..............................................................................
1e200                 | ' 
1e200                 | ' {{
1e200                 | ' }}
1e200                 | ' PRI lookupDelay(freq) : delay | profile
1e200                 | _psram_spin2_lookupDelay
1e200                 | '     profile := @delayTable
1e200     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1e204     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1e208                 | '     delay := long[profile][0]
1e208     00 03 02 FB | 	rdlong	_var02, _var01
1e20c                 | '     repeat while long[profile][1] 
1e20c     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1e210     97 16 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1e214                 | LR__2440
1e214     04 00 06 F1 | 	add	_var01, #4
1e218     00 FB 09 FB | 	rdlong	result1, _var01 wz
1e21c     04 00 86 F1 | 	sub	_var01, #4
1e220     1C 00 90 AD |  if_e	jmp	#LR__2442
1e224                 | '         if freq +< long[profile][1] 
1e224     04 00 06 F1 | 	add	_var01, #4
1e228     00 FB 01 FB | 	rdlong	result1, _var01
1e22c     04 00 86 F1 | 	sub	_var01, #4
1e230     FD 12 12 F2 | 	cmp	arg01, result1 wc
1e234                 | '             quit
1e234                 | '         profile += 4
1e234     04 00 06 31 |  if_ae	add	_var01, #4
1e238                 | '         delay++
1e238     01 02 06 31 |  if_ae	add	_var02, #1
1e23c     D4 FF 9F 3D |  if_ae	jmp	#LR__2440
1e240                 | LR__2441
1e240                 | LR__2442
1e240     01 FB 01 F6 | 	mov	result1, _var02
1e244                 | _psram_spin2_lookupDelay_ret
1e244     2D 00 64 FD | 	ret
1e248                 | 
1e248                 | ' 
1e248                 | ' PUB start() : r
1e248                 | _usbnew_spin2_start
1e248     00 00 06 F6 | 	mov	_var01, #0
1e24c                 | '   ifnot driver_cog
1e24c     15 00 00 FF 
1e250     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1e254     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1e258     15 00 00 FF 
1e25c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1e260     38 00 90 5D |  if_ne	jmp	#LR__2450
1e264                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1e264     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1e268     10 00 06 F6 | 	mov	_var01, #16
1e26c     00 16 06 F6 | 	mov	arg03, #0
1e270     28 16 62 FD | 	setq	arg03
1e274     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1e278     01 00 66 C6 |  if_b	neg	_var01, #1
1e27c                 | '     if r >= 0
1e27c     00 00 56 F2 | 	cmps	_var01, #0 wc
1e280                 | '       driver_cog := r+1
1e280     00 03 02 36 |  if_ae	mov	_var02, _var01
1e284     01 02 06 31 |  if_ae	add	_var02, #1
1e288     15 00 00 3F 
1e28c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1e290     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1e294     15 00 00 3F 
1e298     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1e29c                 | LR__2450
1e29c     00 FB 01 F6 | 	mov	result1, _var01
1e2a0                 | _usbnew_spin2_start_ret
1e2a0     2D 00 64 FD | 	ret
1e2a4                 | 
1e2a4                 | '     '' (Always enabled)
1e2a4                 | ' 
1e2a4                 | ' '' Get current pressed state of a keyboard key
1e2a4                 | ' PUB keystate(key) : r | buf[2],tmp
1e2a4                 | _usbnew_spin2_keystate
1e2a4     00 04 06 F6 | 	mov	_var03, #0
1e2a8                 | '   if key >= $E0 && key < $E8
1e2a8     E0 12 56 F2 | 	cmps	arg01, #224 wc
1e2ac     34 00 90 CD |  if_b	jmp	#LR__2460
1e2b0     E8 12 56 F2 | 	cmps	arg01, #232 wc
1e2b4     2C 00 90 3D |  if_ae	jmp	#LR__2460
1e2b8                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
1e2b8     00 FA 05 F6 | 	mov	result1, #0
1e2bc     13 00 00 FF 
1e2c0     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1e2c4     09 07 02 F6 | 	mov	_var04, arg01
1e2c8     E0 06 86 F1 | 	sub	_var04, #224
1e2cc     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
1e2d0     03 09 4A F0 | 	shr	_var05, _var04 wz
1e2d4     13 00 00 FF 
1e2d8     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1e2dc     01 FA 65 56 |  if_ne	neg	result1, #1
1e2e0     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
1e2e4                 | LR__2460
1e2e4                 | '   else
1e2e4                 | '     '' Do this in inline ASM to ensure atomicity
1e2e4                 | '     tmp := @hkbd_report
1e2e4     13 00 00 FF 
1e2e8     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1e2ec     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
1e2f0                 | '     org
1e2f0     13 00 00 FF 
1e2f4     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1e2f8     97 1E 48 FB | 	callpa	#(@LR__2462-@LR__2461)>>2,fcache_load_ptr_
1e2fc                 | LR__2461
1e2fc 000             | 	org	0
1e2fc 000 28 02 64 FD | 	setq	#1
1e300 001 04 01 02 FB | 	rdlong	_var01, _var05
1e304 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
1e308 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
1e30c 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
1e310 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e314 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
1e318 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e31c 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
1e320 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e324 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
1e328 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e32c 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
1e330 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e334 00e 01 04 66 A6 |  if_e	neg	_var03, #1
1e338 00f             | LR__2462
1e338                 | 	orgh
1e338     02 FB 01 F6 | 	mov	result1, _var03
1e33c                 | _usbnew_spin2_keystate_ret
1e33c     2D 00 64 FD | 	ret
1e340                 | 
1e340                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1e340                 | ' 
1e340                 | ' '' Return key event from buffer if there is one
1e340                 | ' PUB get_key() : r | tail
1e340                 | _usbnew_spin2_get_key
1e340                 | '   tail := keyq_tail
1e340     0F 00 00 FF 
1e344     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1e348     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1e34c                 | '   if keyq_head == tail
1e34c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1e350     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1e354     0F 00 00 FF 
1e358     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1e35c     00 03 0A F2 | 	cmp	_var02, _var01 wz
1e360                 | '     return 0 ' No event
1e360     00 FA 05 A6 |  if_e	mov	result1, #0
1e364     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1e368                 | '   r := keyq_data[tail]
1e368     00 03 02 F6 | 	mov	_var02, _var01
1e36c     02 02 66 F0 | 	shl	_var02, #2
1e370     0F 00 00 FF 
1e374     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1e378     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1e37c     01 FB 01 FB | 	rdlong	result1, _var02
1e380                 | '   if ++tail == KEYQUEUE_SIZE
1e380     01 00 06 F1 | 	add	_var01, #1
1e384     80 00 0E F2 | 	cmp	_var01, #128 wz
1e388                 | '     tail := 0
1e388     00 00 06 A6 |  if_e	mov	_var01, #0
1e38c                 | '   keyq_tail := tail
1e38c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1e390     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1e394     0F 00 00 FF 
1e398     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
1e39c                 | _usbnew_spin2_get_key_ret
1e39c     2D 00 64 FD | 	ret
1e3a0                 | 
1e3a0                 | ' 
1e3a0                 | ' '' Emulate mouse movement
1e3a0                 | ' PUB mouse_move(x,y)
1e3a0                 | _usbnew_spin2_mouse_move
1e3a0     02 4A 05 F6 | 	mov	COUNT_, #2
1e3a4     A8 00 A0 FD | 	call	#pushregs_
1e3a8     09 1F 02 F6 | 	mov	local01, arg01
1e3ac     0A 21 02 F6 | 	mov	local02, arg02
1e3b0                 | '   mouse_lock := 1
1e3b0     14 00 00 FF 
1e3b4     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1e3b8     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
1e3bc     14 00 00 FF 
1e3c0     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1e3c4                 | '   waitus(2) ' hope driver is now done
1e3c4     02 12 06 F6 | 	mov	arg01, #2
1e3c8     CC 0A B0 FD | 	call	#__system___waitus
1e3cc                 | '   mouse_xacc := x
1e3cc     14 00 00 FF 
1e3d0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1e3d4     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1e3d8                 | '   mouse_yacc := y
1e3d8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1e3dc     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1e3e0                 | '   if mouse_outptr
1e3e0     04 00 00 FF 
1e3e4     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1e3e8     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
1e3ec     0F 00 00 FF 
1e3f0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1e3f4     24 00 90 AD |  if_e	jmp	#LR__2470
1e3f8                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1e3f8     10 20 66 F0 | 	shl	local02, #16
1e3fc     0F 1F 32 F9 | 	getword	local01, local01, #0
1e400     0F 21 42 F5 | 	or	local02, local01
1e404     0F 00 00 FF 
1e408     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1e40c     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1e410     0F 00 00 FF 
1e414     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1e418     0F 21 62 FC | 	wrlong	local02, local01
1e41c                 | LR__2470
1e41c                 | '   mouse_lock := 0
1e41c     14 00 00 FF 
1e420     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1e424     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1e428     14 00 00 FF 
1e42c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1e430     A7 F0 03 F6 | 	mov	ptra, fp
1e434     B2 00 A0 FD | 	call	#popregs_
1e438                 | _usbnew_spin2_mouse_move_ret
1e438     2D 00 64 FD | 	ret
1e43c                 | 
1e43c                 | '     '' Set HAVE_HIDPAD to enable.
1e43c                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
1e43c                 | ' 
1e43c                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
1e43c                 | ' PUB hidpad_id(dev) : r
1e43c                 | _usbnew_spin2_hidpad_id
1e43c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
1e43c     13 00 00 FF 
1e440     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1e444     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1e448     09 01 02 F6 | 	mov	_var01, arg01
1e44c     03 00 66 F0 | 	shl	_var01, #3
1e450     09 01 82 F1 | 	sub	_var01, arg01
1e454     02 00 66 F0 | 	shl	_var01, #2
1e458     00 FB 01 F1 | 	add	result1, _var01
1e45c     FD FA 01 FB | 	rdlong	result1, result1
1e460     13 00 00 FF 
1e464     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1e468                 | _usbnew_spin2_hidpad_id_ret
1e468     2D 00 64 FD | 	ret
1e46c                 | 
1e46c                 | ' 
1e46c                 | ' '' Get all button states for a device
1e46c                 | ' PUB hidpad_buttons(dev) : r 
1e46c                 | _usbnew_spin2_hidpad_buttons
1e46c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
1e46c     13 00 00 FF 
1e470     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1e474     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1e478     09 01 02 F6 | 	mov	_var01, arg01
1e47c     03 00 66 F0 | 	shl	_var01, #3
1e480     09 01 82 F1 | 	sub	_var01, arg01
1e484     02 00 66 F0 | 	shl	_var01, #2
1e488     00 FB 01 F1 | 	add	result1, _var01
1e48c     14 FA 05 F1 | 	add	result1, #20
1e490     FD FA 01 FB | 	rdlong	result1, result1
1e494     13 00 00 FF 
1e498     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1e49c                 | _usbnew_spin2_hidpad_buttons_ret
1e49c     2D 00 64 FD | 	ret
1e4a0                 | 
1e4a0                 | ' 
1e4a0                 | ' '' Get state of an axis (normalized between -32768 and 32767)
1e4a0                 | ' PUB hidpad_axis(dev,axnum) : r
1e4a0                 | _usbnew_spin2_hidpad_axis
1e4a0                 | '   if axnum +>= 6
1e4a0     06 14 16 F2 | 	cmp	arg02, #6 wc
1e4a4                 | '     return 0
1e4a4     00 FA 05 36 |  if_ae	mov	result1, #0
1e4a8     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
1e4ac                 | '   else 
1e4ac                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
1e4ac     13 00 00 FF 
1e4b0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1e4b4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1e4b8     09 01 02 F6 | 	mov	_var01, arg01
1e4bc     03 00 66 F0 | 	shl	_var01, #3
1e4c0     09 01 82 F1 | 	sub	_var01, arg01
1e4c4     02 00 66 F0 | 	shl	_var01, #2
1e4c8     00 FB 01 F1 | 	add	result1, _var01
1e4cc     04 00 06 F6 | 	mov	_var01, #4
1e4d0     0A 01 02 F1 | 	add	_var01, arg02
1e4d4     01 00 66 F0 | 	shl	_var01, #1
1e4d8     FD 00 02 F1 | 	add	_var01, result1
1e4dc     00 FB E1 FA | 	rdword	result1, _var01
1e4e0     0F FA 65 F7 | 	signx	result1, #15
1e4e4     13 00 00 FF 
1e4e8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1e4ec                 | _usbnew_spin2_hidpad_axis_ret
1e4ec     2D 00 64 FD | 	ret
1e4f0                 | 
1e4f0                 | ' 
1e4f0                 | ' 
1e4f0                 | ' '--------------------------------------------------------------
1e4f0                 | ' '---------- Init the variables, start the cog. ----------------
1e4f0                 | ' '--------------------------------------------------------------
1e4f0                 | ' 
1e4f0                 | ' pub start(mbox,scope,cache) :cog,base | iii
1e4f0                 | _audio096_spin2_start
1e4f0     04 4A 05 F6 | 	mov	COUNT_, #4
1e4f4     A8 00 A0 FD | 	call	#pushregs_
1e4f8     09 1F 02 F6 | 	mov	local01, arg01
1e4fc                 | ' 
1e4fc                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
1e4fc                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
1e4fc                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
1e4fc                 | ' 
1e4fc                 | ' mailboxaddr:=mbox 
1e4fc     F2 1E 62 FC | 	wrlong	local01, objptr
1e500                 | ' scope_ptr:=scope
1e500     04 E4 05 F1 | 	add	objptr, #4
1e504     F2 14 62 FC | 	wrlong	arg02, objptr
1e508                 | ' cache_ptr:=cache
1e508     04 E4 05 F1 | 	add	objptr, #4
1e50c     F2 16 62 FC | 	wrlong	arg03, objptr
1e510                 | ' base:=@channel1[0]
1e510     04 E4 05 F1 | 	add	objptr, #4
1e514     F2 20 02 F6 | 	mov	local02, objptr
1e518                 | ' 
1e518                 | ' repeat iii from 0 to 7
1e518     00 22 06 F6 | 	mov	local03, #0
1e51c     02 00 00 FF 
1e520     94 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1172
1e524     0C E4 85 F1 | 	sub	objptr, #12
1e528     97 B0 48 FB | 	callpa	#(@LR__2481-@LR__2480)>>2,fcache_load_ptr_
1e52c                 | LR__2480
1e52c                 | '   long[base+64*iii]:=0
1e52c     10 1F 02 F6 | 	mov	local01, local02
1e530     11 FD 01 F6 | 	mov	result2, local03
1e534     06 FC 65 F0 | 	shl	result2, #6
1e538     FE 1E 02 F1 | 	add	local01, result2
1e53c     0F 01 68 FC | 	wrlong	#0, local01
1e540                 | '   long[base+64*iii+4]:=0
1e540     10 1F 02 F6 | 	mov	local01, local02
1e544     11 FD 01 F6 | 	mov	result2, local03
1e548     06 FC 65 F0 | 	shl	result2, #6
1e54c     FE 1E 02 F1 | 	add	local01, result2
1e550     04 1E 06 F1 | 	add	local01, #4
1e554     0F 01 68 FC | 	wrlong	#0, local01
1e558                 | '   long[base+64*iii+12]:=0
1e558     10 25 02 F6 | 	mov	local04, local02
1e55c     11 1F 02 F6 | 	mov	local01, local03
1e560     06 1E 66 F0 | 	shl	local01, #6
1e564     0F 25 02 F1 | 	add	local04, local01
1e568     0C 24 06 F1 | 	add	local04, #12
1e56c     12 01 68 FC | 	wrlong	#0, local04
1e570                 | '   long[base+64*iii+16]:=2 
1e570     10 25 02 F6 | 	mov	local04, local02
1e574     11 1F 02 F6 | 	mov	local01, local03
1e578     06 1E 66 F0 | 	shl	local01, #6
1e57c     0F 25 02 F1 | 	add	local04, local01
1e580     10 24 06 F1 | 	add	local04, #16
1e584     12 05 68 FC | 	wrlong	#2, local04
1e588                 | '   word[base+64*iii+20]:=0
1e588     10 25 02 F6 | 	mov	local04, local02
1e58c     11 1F 02 F6 | 	mov	local01, local03
1e590     06 1E 66 F0 | 	shl	local01, #6
1e594     0F 25 02 F1 | 	add	local04, local01
1e598     14 24 06 F1 | 	add	local04, #20
1e59c     12 01 58 FC | 	wrword	#0, local04
1e5a0                 | '   word[base+64*iii+22]:=8192
1e5a0     10 25 02 F6 | 	mov	local04, local02
1e5a4     11 1F 02 F6 | 	mov	local01, local03
1e5a8     06 1E 66 F0 | 	shl	local01, #6
1e5ac     0F 25 02 F1 | 	add	local04, local01
1e5b0     16 24 06 F1 | 	add	local04, #22
1e5b4     10 00 80 FF 
1e5b8     12 01 58 FC | 	wrword	##8192, local04
1e5bc                 | '   word[base+64*iii+24]:=4000+2*iii
1e5bc     11 25 02 F6 | 	mov	local04, local03
1e5c0     01 24 66 F0 | 	shl	local04, #1
1e5c4     07 00 00 FF 
1e5c8     A0 1F 06 F6 | 	mov	local01, ##4000
1e5cc     12 1F 02 F1 | 	add	local01, local04
1e5d0     10 25 02 F6 | 	mov	local04, local02
1e5d4     11 FD 01 F6 | 	mov	result2, local03
1e5d8     06 FC 65 F0 | 	shl	result2, #6
1e5dc     FE 24 02 F1 | 	add	local04, result2
1e5e0     18 24 06 F1 | 	add	local04, #24
1e5e4     12 1F 52 FC | 	wrword	local01, local04
1e5e8                 | '   word[base+64*iii+26]:=2
1e5e8     10 25 02 F6 | 	mov	local04, local02
1e5ec     11 1F 02 F6 | 	mov	local01, local03
1e5f0     06 1E 66 F0 | 	shl	local01, #6
1e5f4     0F 25 02 F1 | 	add	local04, local01
1e5f8     1A 24 06 F1 | 	add	local04, #26
1e5fc     12 05 58 FC | 	wrword	#2, local04
1e600                 | '   long [base+64*iii+8]:=@null | $C0000000
1e600     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
1e604     3E 1E 26 F4 | 	bith	local01, #62
1e608     10 25 02 F6 | 	mov	local04, local02
1e60c     11 17 02 F6 | 	mov	arg03, local03
1e610     06 16 66 F0 | 	shl	arg03, #6
1e614     0B 25 02 F1 | 	add	local04, arg03
1e618     08 24 06 F1 | 	add	local04, #8
1e61c     12 1F 62 FC | 	wrlong	local01, local04
1e620                 | '   long[base+64*iii+32]:=0
1e620     10 25 02 F6 | 	mov	local04, local02
1e624     11 1F 02 F6 | 	mov	local01, local03
1e628     06 1E 66 F0 | 	shl	local01, #6
1e62c     0F 25 02 F1 | 	add	local04, local01
1e630     20 24 06 F1 | 	add	local04, #32
1e634     12 01 68 FC | 	wrlong	#0, local04
1e638                 | '   long[base+64*iii+36]:=0
1e638     10 25 02 F6 | 	mov	local04, local02
1e63c     11 1F 02 F6 | 	mov	local01, local03
1e640     06 1E 66 F0 | 	shl	local01, #6
1e644     0F 25 02 F1 | 	add	local04, local01
1e648     24 24 06 F1 | 	add	local04, #36
1e64c     12 01 68 FC | 	wrlong	#0, local04
1e650                 | '   long[base+64*iii+40]:=0
1e650     10 25 02 F6 | 	mov	local04, local02
1e654     11 1F 02 F6 | 	mov	local01, local03
1e658     06 1E 66 F0 | 	shl	local01, #6
1e65c     0F 25 02 F1 | 	add	local04, local01
1e660     28 24 06 F1 | 	add	local04, #40
1e664     12 01 68 FC | 	wrlong	#0, local04
1e668                 | '   long[base+64*iii+44]:=0
1e668     10 25 02 F6 | 	mov	local04, local02
1e66c     11 1F 02 F6 | 	mov	local01, local03
1e670     06 1E 66 F0 | 	shl	local01, #6
1e674     0F 25 02 F1 | 	add	local04, local01
1e678     2C 24 06 F1 | 	add	local04, #44
1e67c     12 01 68 FC | 	wrlong	#0, local04
1e680     01 22 06 F1 | 	add	local03, #1
1e684     08 22 56 F2 | 	cmps	local03, #8 wc
1e688     A0 FE 9F CD |  if_b	jmp	#LR__2480
1e68c                 | LR__2481
1e68c     02 00 00 FF 
1e690     94 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1172
1e694                 | '   
1e694                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1e694     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
1e698     F2 16 02 F6 | 	mov	arg03, objptr
1e69c     10 24 06 F6 | 	mov	local04, #16
1e6a0     28 16 62 FD | 	setq	arg03
1e6a4     0A 25 F2 FC | 	coginit	local04, arg02 wc
1e6a8     01 24 66 C6 |  if_b	neg	local04, #1
1e6ac                 | ' waitms(100)
1e6ac     64 12 06 F6 | 	mov	arg01, #100
1e6b0     78 07 B0 FD | 	call	#__system___waitms
1e6b4                 | ' return cog,base
1e6b4     10 FD 01 F6 | 	mov	result2, local02
1e6b8     12 FB 01 F6 | 	mov	result1, local04
1e6bc     A7 F0 03 F6 | 	mov	ptra, fp
1e6c0     B2 00 A0 FD | 	call	#popregs_
1e6c4                 | _audio096_spin2_start_ret
1e6c4     2D 00 64 FD | 	ret
1e6c8                 | 
1e6c8                 | ' 
1e6c8                 | ' ' a simple play procedure to not poke everything. 
1e6c8                 | ' 
1e6c8                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1e6c8                 | _audio096_spin2_play
1e6c8     0C E4 05 F1 | 	add	objptr, #12
1e6cc     F2 00 02 F6 | 	mov	_var01, objptr
1e6d0     06 12 66 F0 | 	shl	arg01, #6
1e6d4     09 01 02 F1 | 	add	_var01, arg01
1e6d8     00 13 02 F6 | 	mov	arg01, _var01
1e6dc     0C 12 06 F1 | 	add	arg01, #12
1e6e0     09 1B 62 FC | 	wrlong	arg05, arg01
1e6e4     00 1C 56 F2 | 	cmps	arg06, #0 wc
1e6e8     00 13 02 36 |  if_ae	mov	arg01, _var01
1e6ec     10 12 06 31 |  if_ae	add	arg01, #16
1e6f0     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
1e6f4     02 1A 06 C1 |  if_b	add	arg05, #2
1e6f8     00 13 02 C6 |  if_b	mov	arg01, _var01
1e6fc     10 12 06 C1 |  if_b	add	arg01, #16
1e700     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1e704     0B 13 52 F6 | 	abs	arg01, arg03 wc
1e708     0B 0A 80 FF 
1e70c     09 6D 18 FD | 	qdiv	##1316406, arg01
1e710                 | ' 
1e710                 | ' base2:=@channel1[0]+64*channel
1e710                 | ' 
1e710                 | ' 
1e710                 | ' long[base2+12]:= len
1e710                 | ' if loop >=0 
1e710                 | '   long[base2+16]:= loop
1e710     0C E4 85 F1 | 	sub	objptr, #12
1e714                 | ' else
1e714                 | '   long[base2+16]:= len+2
1e714                 | ' word[base2+20]:=vol
1e714     00 13 02 F6 | 	mov	arg01, _var01
1e718     14 12 06 F1 | 	add	arg01, #20
1e71c     09 19 52 FC | 	wrword	arg04, arg01
1e720                 | ' word[base2+24]:= 1316406/splfreq 
1e720     00 19 02 F6 | 	mov	arg04, _var01
1e724     18 18 06 F1 | 	add	arg04, #24
1e728                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1e728                 | ' long[base2+32]:=0    
1e728                 | ' long[base2+36]:=0    
1e728                 | ' long[base2+40]:=0    
1e728                 | ' long[base2+44]:=0    
1e728                 | ' long[base2+8]:=sample+$C0000000     
1e728     00 00 60 FF 
1e72c     00 14 06 F1 | 	add	arg02, ##-1073741824
1e730     18 12 62 FD | 	getqx	arg01
1e734     09 13 82 F6 | 	negc	arg01, arg01
1e738     0C 13 52 FC | 	wrword	arg01, arg04
1e73c     00 13 02 F6 | 	mov	arg01, _var01
1e740     1A 12 06 F1 | 	add	arg01, #26
1e744     09 01 5A FC | 	wrword	#256, arg01
1e748     00 13 02 F6 | 	mov	arg01, _var01
1e74c     20 12 06 F1 | 	add	arg01, #32
1e750     09 01 68 FC | 	wrlong	#0, arg01
1e754     00 13 02 F6 | 	mov	arg01, _var01
1e758     24 12 06 F1 | 	add	arg01, #36
1e75c     09 01 68 FC | 	wrlong	#0, arg01
1e760     00 13 02 F6 | 	mov	arg01, _var01
1e764     28 12 06 F1 | 	add	arg01, #40
1e768     09 01 68 FC | 	wrlong	#0, arg01
1e76c     00 13 02 F6 | 	mov	arg01, _var01
1e770     2C 12 06 F1 | 	add	arg01, #44
1e774     09 01 68 FC | 	wrlong	#0, arg01
1e778     08 00 06 F1 | 	add	_var01, #8
1e77c     00 15 62 FC | 	wrlong	arg02, _var01
1e780                 | _audio096_spin2_play_ret
1e780     2D 00 64 FD | 	ret
1e784                 | 
1e784                 | ' 
1e784                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
1e784                 | _audio096_spin2_play8
1e784                 | ' 
1e784                 | ' base2:=@channel1[0]+64*channel
1e784     0C E4 05 F1 | 	add	objptr, #12
1e788     F2 00 02 F6 | 	mov	_var01, objptr
1e78c     06 12 66 F0 | 	shl	arg01, #6
1e790     09 01 02 F1 | 	add	_var01, arg01
1e794                 | ' long[base2]:=0
1e794     00 01 68 FC | 	wrlong	#0, _var01
1e798                 | ' long[base2+8]:=sample+$40000000 
1e798     00 00 20 FF 
1e79c     00 14 06 F1 | 	add	arg02, ##1073741824
1e7a0     00 13 02 F6 | 	mov	arg01, _var01
1e7a4     08 12 06 F1 | 	add	arg01, #8
1e7a8     09 15 62 FC | 	wrlong	arg02, arg01
1e7ac                 | ' if loop>=0
1e7ac     00 1C 56 F2 | 	cmps	arg06, #0 wc
1e7b0     0C E4 85 F1 | 	sub	objptr, #12
1e7b4     1C 00 90 CD |  if_b	jmp	#LR__2490
1e7b8                 | '   long[base2+12]:=loop
1e7b8     00 15 02 F6 | 	mov	arg02, _var01
1e7bc     0C 14 06 F1 | 	add	arg02, #12
1e7c0     0A 1D 62 FC | 	wrlong	arg06, arg02
1e7c4                 | '   long[base2+16]:= len
1e7c4     00 1D 02 F6 | 	mov	arg06, _var01
1e7c8     10 1C 06 F1 | 	add	arg06, #16
1e7cc     0E 1B 62 FC | 	wrlong	arg05, arg06
1e7d0     1C 00 90 FD | 	jmp	#LR__2491
1e7d4                 | LR__2490
1e7d4                 | ' else
1e7d4                 | '   long[base2+12]:= len
1e7d4     00 1D 02 F6 | 	mov	arg06, _var01
1e7d8     0C 1C 06 F1 | 	add	arg06, #12
1e7dc     0E 1B 62 FC | 	wrlong	arg05, arg06
1e7e0                 | '   long[base2+16]:= len+1
1e7e0     01 1A 06 F1 | 	add	arg05, #1
1e7e4     00 13 02 F6 | 	mov	arg01, _var01
1e7e8     10 12 06 F1 | 	add	arg01, #16
1e7ec     09 1B 62 FC | 	wrlong	arg05, arg01
1e7f0                 | LR__2491
1e7f0     0B 17 52 F6 | 	abs	arg03, arg03 wc
1e7f4     0B 0A 80 FF 
1e7f8     0B 6D 18 FD | 	qdiv	##1316406, arg03
1e7fc                 | ' word[base2+20]:=vol
1e7fc     00 17 02 F6 | 	mov	arg03, _var01
1e800     14 16 06 F1 | 	add	arg03, #20
1e804     0B 19 52 FC | 	wrword	arg04, arg03
1e808                 | ' word[base2+24]:= 1316406 /splfreq 
1e808     00 13 02 F6 | 	mov	arg01, _var01
1e80c     18 12 06 F1 | 	add	arg01, #24
1e810                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1e810                 | ' long[base2+28]:=$40000000
1e810     18 18 62 FD | 	getqx	arg04
1e814     0C 19 82 F6 | 	negc	arg04, arg04
1e818     09 19 52 FC | 	wrword	arg04, arg01
1e81c     00 19 02 F6 | 	mov	arg04, _var01
1e820     1A 18 06 F1 | 	add	arg04, #26
1e824     0C 01 5A FC | 	wrword	#256, arg04
1e828     1C 00 06 F1 | 	add	_var01, #28
1e82c     00 00 A0 FF 
1e830     00 01 68 FC | 	wrlong	##1073741824, _var01
1e834                 | _audio096_spin2_play8_ret
1e834     2D 00 64 FD | 	ret
1e838                 | 
1e838                 | ' 
1e838                 | '     
1e838                 | ' pub stop(channel) 'silence it
1e838                 | _audio096_spin2_stop
1e838                 | ' 
1e838                 | ' word[@channel1[0]+64*channel+20]:=0
1e838     0C E4 05 F1 | 	add	objptr, #12
1e83c     F2 00 02 F6 | 	mov	_var01, objptr
1e840     09 03 02 F6 | 	mov	_var02, arg01
1e844     06 02 66 F0 | 	shl	_var02, #6
1e848     01 01 02 F1 | 	add	_var01, _var02
1e84c     14 00 06 F1 | 	add	_var01, #20
1e850     00 01 58 FC | 	wrword	#0, _var01
1e854                 | ' word[@channel1[0]+64*channel+20]:=0
1e854     F2 00 02 F6 | 	mov	_var01, objptr
1e858     06 12 66 F0 | 	shl	arg01, #6
1e85c     09 01 02 F1 | 	add	_var01, arg01
1e860     14 00 06 F1 | 	add	_var01, #20
1e864     00 01 58 FC | 	wrword	#0, _var01
1e868     0C E4 85 F1 | 	sub	objptr, #12
1e86c                 | _audio096_spin2_stop_ret
1e86c     2D 00 64 FD | 	ret
1e870                 | hubexit
1e870     81 00 80 FD | 	jmp	#cogexit
1e874                 | 
1e874                 | __system___setbaud
1e874     14 64 06 FB | 	rdlong	muldiva_, #20
1e878     09 67 02 F6 | 	mov	muldivb_, arg01
1e87c     BA 00 A0 FD | 	call	#divide_
1e880     97 06 48 FB | 	callpa	#(@LR__2501-@LR__2500)>>2,fcache_load_ptr_
1e884                 | LR__2500
1e884     3E FA 9D FA | 	rdpin	result1, #62 wc
1e888     FE FC A1 F1 | 	subx	result2, result2
1e88c     F4 FF 9F CD |  if_b	jmp	#LR__2500
1e890                 | LR__2501
1e890     40 7C 64 FD | 	dirl	#62
1e894     40 7E 64 FD | 	dirl	#63
1e898     F3 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1e89c     10 66 66 F0 | 	shl	muldivb_, #16
1e8a0     07 14 06 F6 | 	mov	arg02, #7
1e8a4     33 15 02 F1 | 	add	arg02, muldivb_
1e8a8     3E F8 0C FC | 	wrpin	#124, #62
1e8ac     3E 14 16 FC | 	wxpin	arg02, #62
1e8b0     3F 7C 0C FC | 	wrpin	#62, #63
1e8b4     14 14 06 F1 | 	add	arg02, #20
1e8b8     3F 14 16 FC | 	wxpin	arg02, #63
1e8bc     41 7C 64 FD | 	dirh	#62
1e8c0     41 7E 64 FD | 	dirh	#63
1e8c4                 | __system___setbaud_ret
1e8c4     2D 00 64 FD | 	ret
1e8c8                 | 
1e8c8                 | __system___txraw
1e8c8     01 4A 05 F6 | 	mov	COUNT_, #1
1e8cc     A8 00 A0 FD | 	call	#pushregs_
1e8d0     09 1F 02 F6 | 	mov	local01, arg01
1e8d4     97 06 48 FB | 	callpa	#(@LR__2511-@LR__2510)>>2,fcache_load_ptr_
1e8d8                 | LR__2510
1e8d8     3E FA 9D FA | 	rdpin	result1, #62 wc
1e8dc     FE FC A1 F1 | 	subx	result2, result2
1e8e0     F4 FF 9F CD |  if_b	jmp	#LR__2510
1e8e4                 | LR__2511
1e8e4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1e8e8     C2 01 00 AF 
1e8ec     00 12 06 A6 |  if_e	mov	arg01, ##230400
1e8f0     80 FF BF AD |  if_e	call	#__system___setbaud
1e8f4     58 7C 64 FD | 	drvl	#62
1e8f8     3E 1E 26 FC | 	wypin	local01, #62
1e8fc     01 FA 05 F6 | 	mov	result1, #1
1e900     A7 F0 03 F6 | 	mov	ptra, fp
1e904     B2 00 A0 FD | 	call	#popregs_
1e908                 | __system___txraw_ret
1e908     2D 00 64 FD | 	ret
1e90c                 | 
1e90c                 | __system___rxraw
1e90c     0D 4A 05 F6 | 	mov	COUNT_, #13
1e910     A8 00 A0 FD | 	call	#pushregs_
1e914     09 1F 02 F6 | 	mov	local01, arg01
1e918     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e91c     C2 01 00 AF 
1e920     00 12 06 A6 |  if_e	mov	arg01, ##230400
1e924     4C FF BF AD |  if_e	call	#__system___setbaud
1e928     00 1E 0E F2 | 	cmp	local01, #0 wz
1e92c     20 00 90 AD |  if_e	jmp	#LR__2520
1e930     14 22 06 FB | 	rdlong	local03, #20
1e934     0A 22 46 F0 | 	shr	local03, #10
1e938     11 1F 02 FD | 	qmul	local01, local03
1e93c     1A FA 61 FD | 	getct	result1
1e940     18 24 62 FD | 	getqx	local04
1e944     12 FB 01 F1 | 	add	result1, local04
1e948     FD 26 02 F6 | 	mov	local05, result1
1e94c     04 00 90 FD | 	jmp	#LR__2521
1e950                 | LR__2520
1e950     00 26 06 F6 | 	mov	local05, #0
1e954                 | LR__2521
1e954     01 28 66 F6 | 	neg	local06, #1
1e958     3F 2A 06 F6 | 	mov	local07, #63
1e95c     00 2C 06 F6 | 	mov	local08, #0
1e960     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1e964     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
1e968     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1e96c                 | LR__2522
1e96c     08 2E 16 F4 | 	testb	local09, #8 wc
1e970     09 2E 76 F4 | 	testbn	local09, #9 andc
1e974     0A 2E 46 F0 | 	shr	local09, #10
1e978     01 2C 06 C6 |  if_b	mov	local08, #1
1e97c     40 7E 6C 3D |  if_ae	testp	#63 wz
1e980     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
1e984     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
1e988     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1e98c                 | LR__2523
1e98c     00 20 06 F6 | 	mov	local02, #0
1e990     00 2C 0E F2 | 	cmp	local08, #0 wz
1e994     01 20 66 56 |  if_ne	neg	local02, #1
1e998     00 30 06 F6 | 	mov	local10, #0
1e99c     00 22 06 F6 | 	mov	local03, #0
1e9a0     00 1E 0E F2 | 	cmp	local01, #0 wz
1e9a4     01 22 66 56 |  if_ne	neg	local03, #1
1e9a8     00 24 06 F6 | 	mov	local04, #0
1e9ac     00 32 06 F6 | 	mov	local11, #0
1e9b0     1A FA 61 FD | 	getct	result1
1e9b4     FD 34 02 F6 | 	mov	local12, result1
1e9b8     1A 37 02 F6 | 	mov	local13, local12
1e9bc     13 37 82 F1 | 	sub	local13, local05
1e9c0     00 36 56 F2 | 	cmps	local13, #0 wc
1e9c4     00 32 26 C6 |  if_b	not	local11, #0
1e9c8     00 32 0E F2 | 	cmp	local11, #0 wz
1e9cc     00 24 26 56 |  if_ne	not	local04, #0
1e9d0     12 23 CA F7 | 	test	local03, local04 wz
1e9d4     00 30 26 56 |  if_ne	not	local10, #0
1e9d8     18 21 4A F5 | 	or	local02, local10 wz
1e9dc     8C FF 9F AD |  if_e	jmp	#LR__2522
1e9e0     00 2C 0E F2 | 	cmp	local08, #0 wz
1e9e4     17 29 02 56 |  if_ne	mov	local06, local09
1e9e8     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1e9ec     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1e9f0     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1e9f4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1e9f8     14 FB 01 F6 | 	mov	result1, local06
1e9fc     A7 F0 03 F6 | 	mov	ptra, fp
1ea00     B2 00 A0 FD | 	call	#popregs_
1ea04                 | __system___rxraw_ret
1ea04     2D 00 64 FD | 	ret
1ea08                 | 
1ea08                 | __system___getus
1ea08     1A FC 71 FD | 	getct	result2 wc
1ea0c     1A 00 62 FD | 	getct	_var01
1ea10     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1ea14     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1ea18     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1ea1c     20 00 90 5D |  if_ne	jmp	#LR__2530
1ea20     14 02 06 FB | 	rdlong	_var02, #20
1ea24     A1 07 00 FF 
1ea28     40 02 16 FD | 	qdiv	_var02, ##1000000
1ea2c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1ea30     18 FA 61 FD | 	getqx	result1
1ea34     FD 02 02 F6 | 	mov	_var02, result1
1ea38     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1ea3c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1ea40                 | LR__2530
1ea40     01 FD 11 FD | 	qdiv	result2, _var02
1ea44     19 FC 61 FD | 	getqy	result2
1ea48     28 FC 61 FD | 	setq	result2
1ea4c     01 01 12 FD | 	qdiv	_var01, _var02
1ea50     18 FA 61 FD | 	getqx	result1
1ea54                 | __system___getus_ret
1ea54     2D 00 64 FD | 	ret
1ea58                 | 
1ea58                 | __system____builtin_memmove
1ea58     09 01 02 F6 | 	mov	_var01, arg01
1ea5c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
1ea60     10 00 90 CD |  if_b	jmp	#LR__2540
1ea64     0A 03 02 F6 | 	mov	_var02, arg02
1ea68     0B 03 02 F1 | 	add	_var02, arg03
1ea6c     01 13 52 F2 | 	cmps	arg01, _var02 wc
1ea70     48 00 90 CD |  if_b	jmp	#LR__2546
1ea74                 | LR__2540
1ea74     0B 05 02 F6 | 	mov	_var03, arg03
1ea78     02 04 4E F0 | 	shr	_var03, #2 wz
1ea7c     18 00 90 AD |  if_e	jmp	#LR__2545
1ea80     97 0A 48 FB | 	callpa	#(@LR__2543-@LR__2541)>>2,fcache_load_ptr_
1ea84                 | LR__2541
1ea84     02 09 D8 FC | 	rep	@LR__2544, _var03
1ea88                 | LR__2542
1ea88     0A 05 02 FB | 	rdlong	_var03, arg02
1ea8c     09 05 62 FC | 	wrlong	_var03, arg01
1ea90     04 12 06 F1 | 	add	arg01, #4
1ea94     04 14 06 F1 | 	add	arg02, #4
1ea98                 | LR__2543
1ea98                 | LR__2544
1ea98                 | LR__2545
1ea98     02 16 CE F7 | 	test	arg03, #2 wz
1ea9c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
1eaa0     09 03 52 5C |  if_ne	wrword	_var02, arg01
1eaa4     02 12 06 51 |  if_ne	add	arg01, #2
1eaa8     02 14 06 51 |  if_ne	add	arg02, #2
1eaac     01 16 CE F7 | 	test	arg03, #1 wz
1eab0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1eab4     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
1eab8     28 00 90 FD | 	jmp	#LR__2552
1eabc                 | LR__2546
1eabc     0B 13 02 F1 | 	add	arg01, arg03
1eac0     0B 15 02 F1 | 	add	arg02, arg03
1eac4     0B 07 0A F6 | 	mov	_var04, arg03 wz
1eac8     18 00 90 AD |  if_e	jmp	#LR__2551
1eacc     97 0A 48 FB | 	callpa	#(@LR__2549-@LR__2547)>>2,fcache_load_ptr_
1ead0                 | LR__2547
1ead0     03 09 D8 FC | 	rep	@LR__2550, _var04
1ead4                 | LR__2548
1ead4     01 12 86 F1 | 	sub	arg01, #1
1ead8     01 14 86 F1 | 	sub	arg02, #1
1eadc     0A 03 C2 FA | 	rdbyte	_var02, arg02
1eae0     09 03 42 FC | 	wrbyte	_var02, arg01
1eae4                 | LR__2549
1eae4                 | LR__2550
1eae4                 | LR__2551
1eae4                 | LR__2552
1eae4     00 FB 01 F6 | 	mov	result1, _var01
1eae8                 | __system____builtin_memmove_ret
1eae8     2D 00 64 FD | 	ret
1eaec                 | 
1eaec                 | __system____builtin_strcpy
1eaec     09 01 02 F6 | 	mov	_var01, arg01
1eaf0     97 0A 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
1eaf4                 | LR__2560
1eaf4     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1eaf8     09 FB 41 FC | 	wrbyte	result1, arg01
1eafc     01 14 06 F1 | 	add	arg02, #1
1eb00     01 12 06 F1 | 	add	arg01, #1
1eb04     EC FF 9F 5D |  if_ne	jmp	#LR__2560
1eb08                 | LR__2561
1eb08     00 FB 01 F6 | 	mov	result1, _var01
1eb0c                 | __system____builtin_strcpy_ret
1eb0c     2D 00 64 FD | 	ret
1eb10                 | 
1eb10                 | __system____topofstack
1eb10     00 4A 05 F6 | 	mov	COUNT_, #0
1eb14     A8 00 A0 FD | 	call	#pushregs_
1eb18     08 F0 07 F1 | 	add	ptra, #8
1eb1c     04 4E 05 F1 | 	add	fp, #4
1eb20     A7 12 62 FC | 	wrlong	arg01, fp
1eb24     A7 FA 01 F6 | 	mov	result1, fp
1eb28     04 4E 85 F1 | 	sub	fp, #4
1eb2c     A7 F0 03 F6 | 	mov	ptra, fp
1eb30     B2 00 A0 FD | 	call	#popregs_
1eb34                 | __system____topofstack_ret
1eb34     2D 00 64 FD | 	ret
1eb38                 | 
1eb38                 | __system___lockmem
1eb38     00 FA 05 F6 | 	mov	result1, #0
1eb3c     01 FA 61 FD | 	cogid	result1
1eb40     00 FB 05 F1 | 	add	result1, #256
1eb44                 | LR__2570
1eb44     09 01 0A FB | 	rdlong	_var01, arg01 wz
1eb48     09 FB 61 AC |  if_e	wrlong	result1, arg01
1eb4c     09 01 02 AB |  if_e	rdlong	_var01, arg01
1eb50     09 01 02 AB |  if_e	rdlong	_var01, arg01
1eb54     FD 00 0A F2 | 	cmp	_var01, result1 wz
1eb58     E8 FF 9F 5D |  if_ne	jmp	#LR__2570
1eb5c                 | __system___lockmem_ret
1eb5c     2D 00 64 FD | 	ret
1eb60                 | 
1eb60                 | __system___string_cmp
1eb60     97 14 48 FB | 	callpa	#(@LR__2581-@LR__2580)>>2,fcache_load_ptr_
1eb64                 | LR__2580
1eb64     09 01 C2 FA | 	rdbyte	_var01, arg01
1eb68     0A 03 C2 FA | 	rdbyte	_var02, arg02
1eb6c     00 05 02 F6 | 	mov	_var03, _var01
1eb70     01 05 8A F1 | 	sub	_var03, _var02 wz
1eb74     01 12 06 F1 | 	add	arg01, #1
1eb78     01 14 06 F1 | 	add	arg02, #1
1eb7c     0C 00 90 5D |  if_ne	jmp	#LR__2582
1eb80     00 00 0E F2 | 	cmp	_var01, #0 wz
1eb84     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
1eb88     D8 FF 9F 5D |  if_ne	jmp	#LR__2580
1eb8c                 | LR__2581
1eb8c                 | LR__2582
1eb8c     02 FB 01 F6 | 	mov	result1, _var03
1eb90                 | __system___string_cmp_ret
1eb90     2D 00 64 FD | 	ret
1eb94                 | 
1eb94                 | __system___string_concat
1eb94     05 4A 05 F6 | 	mov	COUNT_, #5
1eb98     A8 00 A0 FD | 	call	#pushregs_
1eb9c     09 1F 02 F6 | 	mov	local01, arg01
1eba0     0A 21 02 F6 | 	mov	local02, arg02
1eba4     0F 13 02 F6 | 	mov	arg01, local01
1eba8     09 23 02 F6 | 	mov	local03, arg01
1ebac     97 06 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
1ebb0                 | LR__2590
1ebb0     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ebb4     01 22 06 51 |  if_ne	add	local03, #1
1ebb8     F4 FF 9F 5D |  if_ne	jmp	#LR__2590
1ebbc                 | LR__2591
1ebbc     09 23 82 F1 | 	sub	local03, arg01
1ebc0     11 25 02 F6 | 	mov	local04, local03
1ebc4     10 13 02 F6 | 	mov	arg01, local02
1ebc8     09 23 02 F6 | 	mov	local03, arg01
1ebcc     97 06 48 FB | 	callpa	#(@LR__2593-@LR__2592)>>2,fcache_load_ptr_
1ebd0                 | LR__2592
1ebd0     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ebd4     01 22 06 51 |  if_ne	add	local03, #1
1ebd8     F4 FF 9F 5D |  if_ne	jmp	#LR__2592
1ebdc                 | LR__2593
1ebdc     09 23 82 F1 | 	sub	local03, arg01
1ebe0     12 13 02 F6 | 	mov	arg01, local04
1ebe4     11 13 02 F1 | 	add	arg01, local03
1ebe8     01 12 06 F1 | 	add	arg01, #1
1ebec     94 3D B0 FD | 	call	#__system___gc_alloc_managed
1ebf0     FD 26 0A F6 | 	mov	local05, result1 wz
1ebf4     28 00 90 AD |  if_e	jmp	#LR__2594
1ebf8     13 13 02 F6 | 	mov	arg01, local05
1ebfc     0F 15 02 F6 | 	mov	arg02, local01
1ec00     12 17 02 F6 | 	mov	arg03, local04
1ec04     50 FE BF FD | 	call	#__system____builtin_memmove
1ec08     13 13 02 F6 | 	mov	arg01, local05
1ec0c     12 13 02 F1 | 	add	arg01, local04
1ec10     01 22 06 F1 | 	add	local03, #1
1ec14     10 15 02 F6 | 	mov	arg02, local02
1ec18     11 17 02 F6 | 	mov	arg03, local03
1ec1c     38 FE BF FD | 	call	#__system____builtin_memmove
1ec20                 | LR__2594
1ec20     13 FB 01 F6 | 	mov	result1, local05
1ec24     A7 F0 03 F6 | 	mov	ptra, fp
1ec28     B2 00 A0 FD | 	call	#popregs_
1ec2c                 | __system___string_concat_ret
1ec2c     2D 00 64 FD | 	ret
1ec30                 | 
1ec30                 | __system___tx
1ec30     02 4A 05 F6 | 	mov	COUNT_, #2
1ec34     A8 00 A0 FD | 	call	#pushregs_
1ec38     09 1F 02 F6 | 	mov	local01, arg01
1ec3c     0A 1E 0E F2 | 	cmp	local01, #10 wz
1ec40     18 00 90 5D |  if_ne	jmp	#LR__2600
1ec44     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ec48     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
1ec4c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ec50     02 20 CE F7 | 	test	local02, #2 wz
1ec54     0D 12 06 56 |  if_ne	mov	arg01, #13
1ec58     6C FC BF 5D |  if_ne	call	#__system___txraw
1ec5c                 | LR__2600
1ec5c     0F 13 02 F6 | 	mov	arg01, local01
1ec60     64 FC BF FD | 	call	#__system___txraw
1ec64     A7 F0 03 F6 | 	mov	ptra, fp
1ec68     B2 00 A0 FD | 	call	#popregs_
1ec6c                 | __system___tx_ret
1ec6c     2D 00 64 FD | 	ret
1ec70                 | 
1ec70                 | __system___rx
1ec70     01 4A 05 F6 | 	mov	COUNT_, #1
1ec74     A8 00 A0 FD | 	call	#pushregs_
1ec78                 | LR__2610
1ec78     00 12 06 F6 | 	mov	arg01, #0
1ec7c     8C FC BF FD | 	call	#__system___rxraw
1ec80     FD 1E 02 F6 | 	mov	local01, result1
1ec84     FF FF 7F FF 
1ec88     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1ec8c     E8 FF 9F AD |  if_e	jmp	#LR__2610
1ec90     0D 1E 0E F2 | 	cmp	local01, #13 wz
1ec94     14 00 90 5D |  if_ne	jmp	#LR__2611
1ec98     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ec9c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1eca0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1eca4     02 FA CD F7 | 	test	result1, #2 wz
1eca8     0A 1E 06 56 |  if_ne	mov	local01, #10
1ecac                 | LR__2611
1ecac     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ecb0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1ecb4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ecb8     01 12 CE F7 | 	test	arg01, #1 wz
1ecbc     1C 00 90 AD |  if_e	jmp	#LR__2614
1ecc0     7F 1E 0E F2 | 	cmp	local01, #127 wz
1ecc4     0C 00 90 5D |  if_ne	jmp	#LR__2612
1ecc8     08 12 06 F6 | 	mov	arg01, #8
1eccc     60 FF BF FD | 	call	#__system___tx
1ecd0     08 00 90 FD | 	jmp	#LR__2613
1ecd4                 | LR__2612
1ecd4     0F 13 02 F6 | 	mov	arg01, local01
1ecd8     54 FF BF FD | 	call	#__system___tx
1ecdc                 | LR__2613
1ecdc                 | LR__2614
1ecdc     0F FB 01 F6 | 	mov	result1, local01
1ece0     A7 F0 03 F6 | 	mov	ptra, fp
1ece4     B2 00 A0 FD | 	call	#popregs_
1ece8                 | __system___rx_ret
1ece8     2D 00 64 FD | 	ret
1ecec                 | 
1ecec                 | __system___pinwrite
1ecec     09 01 02 F6 | 	mov	_var01, arg01
1ecf0     1F 00 06 F5 | 	and	_var01, #31
1ecf4     20 12 CE F7 | 	test	arg01, #32 wz
1ecf8     06 12 46 F0 | 	shr	arg01, #6
1ecfc     09 13 CA F9 | 	bmask	arg01, arg01
1ed00     00 13 62 F0 | 	shl	arg01, _var01
1ed04     00 15 62 F0 | 	shl	arg02, _var01
1ed08     1C 00 90 AD |  if_e	jmp	#LR__2620
1ed0c     09 F7 43 F5 | 	or	dirb, arg01
1ed10     FD 01 02 F6 | 	mov	_var01, outb
1ed14     09 01 22 F5 | 	andn	_var01, arg01
1ed18     09 15 02 F5 | 	and	arg02, arg01
1ed1c     0A 01 42 F5 | 	or	_var01, arg02
1ed20     00 FB 03 F6 | 	mov	outb, _var01
1ed24     18 00 90 FD | 	jmp	#LR__2621
1ed28                 | LR__2620
1ed28     09 F5 43 F5 | 	or	dira, arg01
1ed2c     FC 01 02 F6 | 	mov	_var01, outa
1ed30     09 01 22 F5 | 	andn	_var01, arg01
1ed34     09 15 02 F5 | 	and	arg02, arg01
1ed38     0A 01 42 F5 | 	or	_var01, arg02
1ed3c     00 F9 03 F6 | 	mov	outa, _var01
1ed40                 | LR__2621
1ed40                 | __system___pinwrite_ret
1ed40     2D 00 64 FD | 	ret
1ed44                 | 
1ed44                 | __system___basic_read_line
1ed44     06 4A 05 F6 | 	mov	COUNT_, #6
1ed48     A8 00 A0 FD | 	call	#pushregs_
1ed4c     09 1F 02 F6 | 	mov	local01, arg01
1ed50     00 20 06 F6 | 	mov	local02, #0
1ed54     18 22 06 F6 | 	mov	local03, #24
1ed58     00 24 06 F6 | 	mov	local04, #0
1ed5c     18 12 06 F6 | 	mov	arg01, #24
1ed60     20 3C B0 FD | 	call	#__system___gc_alloc_managed
1ed64     FD 26 0A F6 | 	mov	local05, result1 wz
1ed68     13 FB 01 A6 |  if_e	mov	result1, local05
1ed6c     B0 00 90 AD |  if_e	jmp	#LR__2633
1ed70                 | LR__2630
1ed70     0F 13 02 F6 | 	mov	arg01, local01
1ed74     8C 0B B0 FD | 	call	#__system___basic_get_char
1ed78     FD 28 02 F6 | 	mov	local06, result1
1ed7c     01 28 56 F2 | 	cmps	local06, #1 wc
1ed80     8C 00 90 CD |  if_b	jmp	#LR__2632
1ed84     0A 28 0E F2 | 	cmp	local06, #10 wz
1ed88     10 00 90 5D |  if_ne	jmp	#LR__2631
1ed8c     00 24 0E F2 | 	cmp	local04, #0 wz
1ed90     01 20 56 52 |  if_ne	cmps	local02, #1 wc
1ed94     01 20 86 11 |  if_a	sub	local02, #1
1ed98     74 00 90 FD | 	jmp	#LR__2632
1ed9c                 | LR__2631
1ed9c     0D 28 0E F2 | 	cmp	local06, #13 wz
1eda0     01 24 06 A6 |  if_e	mov	local04, #1
1eda4     00 24 06 56 |  if_ne	mov	local04, #0
1eda8     08 28 0E F2 | 	cmp	local06, #8 wz
1edac     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1edb0     01 20 56 A2 |  if_e	cmps	local02, #1 wc
1edb4     01 20 86 21 |  if_nc_and_z	sub	local02, #1
1edb8     B4 FF 9F AD |  if_e	jmp	#LR__2630
1edbc     13 17 02 F6 | 	mov	arg03, local05
1edc0     10 17 02 F1 | 	add	arg03, local02
1edc4     0B 29 42 FC | 	wrbyte	local06, arg03
1edc8     01 20 06 F1 | 	add	local02, #1
1edcc     11 21 0A F2 | 	cmp	local02, local03 wz
1edd0     9C FF 9F 5D |  if_ne	jmp	#LR__2630
1edd4     11 13 02 F6 | 	mov	arg01, local03
1edd8     20 12 06 F1 | 	add	arg01, #32
1eddc     A4 3B B0 FD | 	call	#__system___gc_alloc_managed
1ede0     FD 28 0A F6 | 	mov	local06, result1 wz
1ede4     14 FB 01 A6 |  if_e	mov	result1, local06
1ede8     34 00 90 AD |  if_e	jmp	#LR__2633
1edec     14 13 02 F6 | 	mov	arg01, local06
1edf0     13 15 02 F6 | 	mov	arg02, local05
1edf4     11 17 02 F6 | 	mov	arg03, local03
1edf8     5C FC BF FD | 	call	#__system____builtin_memmove
1edfc     20 22 06 F1 | 	add	local03, #32
1ee00     13 13 02 F6 | 	mov	arg01, local05
1ee04     B8 3C B0 FD | 	call	#__system___gc_free
1ee08     14 27 02 F6 | 	mov	local05, local06
1ee0c     60 FF 9F FD | 	jmp	#LR__2630
1ee10                 | LR__2632
1ee10     13 29 02 F6 | 	mov	local06, local05
1ee14     10 29 02 F1 | 	add	local06, local02
1ee18     14 01 48 FC | 	wrbyte	#0, local06
1ee1c     13 FB 01 F6 | 	mov	result1, local05
1ee20                 | LR__2633
1ee20     A7 F0 03 F6 | 	mov	ptra, fp
1ee24     B2 00 A0 FD | 	call	#popregs_
1ee28                 | __system___basic_read_line_ret
1ee28     2D 00 64 FD | 	ret
1ee2c                 | 
1ee2c                 | __system___waitms
1ee2c     09 01 02 F6 | 	mov	_var01, arg01
1ee30     1A 02 62 FD | 	getct	_var02
1ee34     14 04 06 FB | 	rdlong	_var03, #20
1ee38     97 14 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
1ee3c                 | LR__2640
1ee3c     01 00 00 FF 
1ee40     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
1ee44     1C 00 90 CD |  if_b	jmp	#LR__2642
1ee48     02 03 02 F1 | 	add	_var02, _var03
1ee4c     01 13 02 F6 | 	mov	arg01, _var02
1ee50     00 12 66 FA | 	addct1	arg01, #0
1ee54     24 22 60 FD | 	waitct1
1ee58     01 00 00 FF 
1ee5c     E8 01 86 F1 | 	sub	_var01, ##1000
1ee60     D8 FF 9F FD | 	jmp	#LR__2640
1ee64                 | LR__2641
1ee64                 | LR__2642
1ee64     01 00 56 F2 | 	cmps	_var01, #1 wc
1ee68     28 00 90 CD |  if_b	jmp	#LR__2643
1ee6c     02 01 02 FD | 	qmul	_var01, _var03
1ee70     01 00 00 FF 
1ee74     E8 17 06 F6 | 	mov	arg03, ##1000
1ee78     19 FA 61 FD | 	getqy	result1
1ee7c     18 12 62 FD | 	getqx	arg01
1ee80     28 FA 61 FD | 	setq	result1
1ee84     0B 13 12 FD | 	qdiv	arg01, arg03
1ee88     18 12 62 FD | 	getqx	arg01
1ee8c     01 13 62 FA | 	addct1	arg01, _var02
1ee90     24 22 60 FD | 	waitct1
1ee94                 | LR__2643
1ee94                 | __system___waitms_ret
1ee94     2D 00 64 FD | 	ret
1ee98                 | 
1ee98                 | __system___waitus
1ee98     09 01 02 F6 | 	mov	_var01, arg01
1ee9c     1A 02 62 FD | 	getct	_var02
1eea0     14 04 06 FB | 	rdlong	_var03, #20
1eea4     97 14 48 FB | 	callpa	#(@LR__2651-@LR__2650)>>2,fcache_load_ptr_
1eea8                 | LR__2650
1eea8     A1 07 00 FF 
1eeac     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1eeb0     1C 00 90 CD |  if_b	jmp	#LR__2652
1eeb4     02 03 02 F1 | 	add	_var02, _var03
1eeb8     01 13 02 F6 | 	mov	arg01, _var02
1eebc     00 12 66 FA | 	addct1	arg01, #0
1eec0     24 22 60 FD | 	waitct1
1eec4     A1 07 00 FF 
1eec8     40 00 86 F1 | 	sub	_var01, ##1000000
1eecc     D8 FF 9F FD | 	jmp	#LR__2650
1eed0                 | LR__2651
1eed0                 | LR__2652
1eed0     01 00 56 F2 | 	cmps	_var01, #1 wc
1eed4     28 00 90 CD |  if_b	jmp	#LR__2653
1eed8     02 01 02 FD | 	qmul	_var01, _var03
1eedc     A1 07 00 FF 
1eee0     40 16 06 F6 | 	mov	arg03, ##1000000
1eee4     19 FA 61 FD | 	getqy	result1
1eee8     18 12 62 FD | 	getqx	arg01
1eeec     28 FA 61 FD | 	setq	result1
1eef0     0B 13 12 FD | 	qdiv	arg01, arg03
1eef4     18 FA 61 FD | 	getqx	result1
1eef8     FD 02 62 FA | 	addct1	_var02, result1
1eefc     24 22 60 FD | 	waitct1
1ef00                 | LR__2653
1ef00                 | __system___waitus_ret
1ef00     2D 00 64 FD | 	ret
1ef04                 | 
1ef04                 | __system___mount
1ef04     0B 4A 05 F6 | 	mov	COUNT_, #11
1ef08     A8 00 A0 FD | 	call	#pushregs_
1ef0c     09 1F 02 F6 | 	mov	local01, arg01
1ef10     0A 21 0A F6 | 	mov	local02, arg02 wz
1ef14     01 22 66 F6 | 	neg	local03, #1
1ef18     01 FA 65 A6 |  if_e	neg	result1, #1
1ef1c     98 02 90 AD |  if_e	jmp	#LR__2675
1ef20     0F FB C1 FA | 	rdbyte	result1, local01
1ef24     2F FA 0D F2 | 	cmp	result1, #47 wz
1ef28     28 00 90 5D |  if_ne	jmp	#LR__2662
1ef2c     0F 13 02 F6 | 	mov	arg01, local01
1ef30     09 25 02 F6 | 	mov	local04, arg01
1ef34     97 06 48 FB | 	callpa	#(@LR__2661-@LR__2660)>>2,fcache_load_ptr_
1ef38                 | LR__2660
1ef38     12 FB C9 FA | 	rdbyte	result1, local04 wz
1ef3c     01 24 06 51 |  if_ne	add	local04, #1
1ef40     F4 FF 9F 5D |  if_ne	jmp	#LR__2660
1ef44                 | LR__2661
1ef44     09 25 82 F1 | 	sub	local04, arg01
1ef48     12 FB 01 F6 | 	mov	result1, local04
1ef4c     10 FA 55 F2 | 	cmps	result1, #16 wc
1ef50     14 00 90 CD |  if_b	jmp	#LR__2663
1ef54                 | LR__2662
1ef54     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1ef58     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
1ef5c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1ef60     01 FA 65 F6 | 	neg	result1, #1
1ef64     50 02 90 FD | 	jmp	#LR__2675
1ef68                 | LR__2663
1ef68     00 26 06 F6 | 	mov	local05, #0
1ef6c                 | LR__2664
1ef6c     04 26 56 F2 | 	cmps	local05, #4 wc
1ef70     B0 00 90 3D |  if_ae	jmp	#LR__2669
1ef74     13 13 02 F6 | 	mov	arg01, local05
1ef78     02 12 66 F0 | 	shl	arg01, #2
1ef7c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1ef80     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1ef84     09 FB 09 FB | 	rdlong	result1, arg01 wz
1ef88     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1ef8c     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1ef90     13 23 02 86 |  if_c_and_z	mov	local03, local05
1ef94     84 00 90 8D |  if_c_and_z	jmp	#LR__2668
1ef98     13 13 02 F6 | 	mov	arg01, local05
1ef9c     02 12 66 F0 | 	shl	arg01, #2
1efa0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1efa4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1efa8     09 13 02 FB | 	rdlong	arg01, arg01
1efac     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1efb0     09 25 02 F6 | 	mov	local04, arg01
1efb4     97 06 48 FB | 	callpa	#(@LR__2666-@LR__2665)>>2,fcache_load_ptr_
1efb8                 | LR__2665
1efb8     12 FB C9 FA | 	rdbyte	result1, local04 wz
1efbc     01 24 06 51 |  if_ne	add	local04, #1
1efc0     F4 FF 9F 5D |  if_ne	jmp	#LR__2665
1efc4                 | LR__2666
1efc4     09 25 82 F1 | 	sub	local04, arg01
1efc8     12 29 02 F6 | 	mov	local06, local04
1efcc     14 13 02 F6 | 	mov	arg01, local06
1efd0     0F 13 02 F1 | 	add	arg01, local01
1efd4     09 FB C1 FA | 	rdbyte	result1, arg01
1efd8     2F FA 0D F2 | 	cmp	result1, #47 wz
1efdc     14 2B 02 56 |  if_ne	mov	local07, local06
1efe0     0F 2B 02 51 |  if_ne	add	local07, local01
1efe4     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
1efe8     30 00 90 5D |  if_ne	jmp	#LR__2667
1efec     13 17 02 F6 | 	mov	arg03, local05
1eff0     02 16 66 F0 | 	shl	arg03, #2
1eff4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1eff8     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1effc     0B 15 02 FB | 	rdlong	arg02, arg03
1f000     0F 13 02 F6 | 	mov	arg01, local01
1f004     14 17 02 F6 | 	mov	arg03, local06
1f008     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f00c     B8 4D B0 FD | 	call	#__system__strncmp
1f010     00 FA 0D F2 | 	cmp	result1, #0 wz
1f014     13 23 02 A6 |  if_e	mov	local03, local05
1f018     08 00 90 AD |  if_e	jmp	#LR__2669
1f01c                 | LR__2667
1f01c                 | LR__2668
1f01c     01 26 06 F1 | 	add	local05, #1
1f020     48 FF 9F FD | 	jmp	#LR__2664
1f024                 | LR__2669
1f024     FF FF 7F FF 
1f028     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1f02c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1f030     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
1f034     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1f038     01 FA 65 A6 |  if_e	neg	result1, #1
1f03c     78 01 90 AD |  if_e	jmp	#LR__2675
1f040     11 27 02 F6 | 	mov	local05, local03
1f044     13 2B 02 F6 | 	mov	local07, local05
1f048     02 2A 66 F0 | 	shl	local07, #2
1f04c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f050     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
1f054     15 29 0A FB | 	rdlong	local06, local07 wz
1f058     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1f05c     58 00 90 AD |  if_e	jmp	#LR__2670
1f060     4C 28 06 F1 | 	add	local06, #76
1f064     14 2B 0A FB | 	rdlong	local07, local06 wz
1f068     4C 28 86 F1 | 	sub	local06, #76
1f06c     48 00 90 AD |  if_e	jmp	#LR__2670
1f070     4C 28 06 F1 | 	add	local06, #76
1f074     14 2B 02 FB | 	rdlong	local07, local06
1f078     15 23 02 F6 | 	mov	local03, local07
1f07c     13 2A 46 F7 | 	zerox	local07, #19
1f080     14 22 46 F0 | 	shr	local03, #20
1f084     02 22 66 F0 | 	shl	local03, #2
1f088     ED 22 02 F1 | 	add	local03, __methods__
1f08c     11 23 02 FB | 	rdlong	local03, local03
1f090     13 29 02 F6 | 	mov	local06, local05
1f094     02 28 66 F0 | 	shl	local06, #2
1f098     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f09c     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1f0a0     14 13 02 FB | 	rdlong	arg01, local06
1f0a4     F2 28 02 F6 | 	mov	local06, objptr
1f0a8     15 E5 01 F6 | 	mov	objptr, local07
1f0ac     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f0b0     2D 22 62 FD | 	call	local03
1f0b4     14 E5 01 F6 | 	mov	objptr, local06
1f0b8                 | LR__2670
1f0b8     13 2D 02 F6 | 	mov	local08, local05
1f0bc     02 2C 66 F0 | 	shl	local08, #2
1f0c0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f0c4     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1f0c8     16 21 62 FC | 	wrlong	local02, local08
1f0cc     00 20 0E F2 | 	cmp	local02, #0 wz
1f0d0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1f0d4     18 00 90 5D |  if_ne	jmp	#LR__2671
1f0d8     02 26 66 F0 | 	shl	local05, #2
1f0dc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f0e0     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1f0e4     13 01 68 FC | 	wrlong	#0, local05
1f0e8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f0ec     C4 00 90 FD | 	jmp	#LR__2674
1f0f0                 | LR__2671
1f0f0     13 2F 02 F6 | 	mov	local09, local05
1f0f4     04 2E 66 F0 | 	shl	local09, #4
1f0f8     24 E6 05 F1 | 	add	ptr___system__dat__, #36
1f0fc     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
1f100     17 13 02 F6 | 	mov	arg01, local09
1f104     0F 15 02 F6 | 	mov	arg02, local01
1f108     10 16 06 F6 | 	mov	arg03, #16
1f10c     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
1f110     08 4C B0 FD | 	call	#__system__strncpy
1f114     48 20 06 F1 | 	add	local02, #72
1f118     10 2D 0A FB | 	rdlong	local08, local02 wz
1f11c     48 20 86 F1 | 	sub	local02, #72
1f120     7C 00 90 AD |  if_e	jmp	#LR__2673
1f124     48 20 06 F1 | 	add	local02, #72
1f128     10 2D 02 FB | 	rdlong	local08, local02
1f12c     16 31 02 F6 | 	mov	local10, local08
1f130     13 2C 46 F7 | 	zerox	local08, #19
1f134     14 30 46 F0 | 	shr	local10, #20
1f138     02 30 66 F0 | 	shl	local10, #2
1f13c     ED 30 02 F1 | 	add	local10, __methods__
1f140     18 31 02 FB | 	rdlong	local10, local10
1f144     17 13 02 F6 | 	mov	arg01, local09
1f148     F2 32 02 F6 | 	mov	local11, objptr
1f14c     16 E5 01 F6 | 	mov	objptr, local08
1f150     2D 30 62 FD | 	call	local10
1f154     19 E5 01 F6 | 	mov	objptr, local11
1f158     FD 12 0A F6 | 	mov	arg01, result1 wz
1f15c     40 00 90 AD |  if_e	jmp	#LR__2672
1f160     13 2D 02 F6 | 	mov	local08, local05
1f164     02 2C 66 F0 | 	shl	local08, #2
1f168     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f16c     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1f170     16 01 68 FC | 	wrlong	#0, local08
1f174     02 26 66 F0 | 	shl	local05, #2
1f178     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1f17c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1f180     13 01 68 FC | 	wrlong	#0, local05
1f184     09 13 6A F6 | 	neg	arg01, arg01 wz
1f188     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
1f18c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1f190     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f194     01 FA 65 56 |  if_ne	neg	result1, #1
1f198     00 FA 05 A6 |  if_e	mov	result1, #0
1f19c     18 00 90 FD | 	jmp	#LR__2675
1f1a0                 | LR__2672
1f1a0                 | LR__2673
1f1a0     02 26 66 F0 | 	shl	local05, #2
1f1a4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f1a8     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1f1ac     13 2F 62 FC | 	wrlong	local09, local05
1f1b0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f1b4                 | LR__2674
1f1b4     00 FA 05 F6 | 	mov	result1, #0
1f1b8                 | LR__2675
1f1b8     A7 F0 03 F6 | 	mov	ptra, fp
1f1bc     B2 00 A0 FD | 	call	#popregs_
1f1c0                 | __system___mount_ret
1f1c0     2D 00 64 FD | 	ret
1f1c4                 | 
1f1c4                 | __system___chdir
1f1c4     00 4A 05 F6 | 	mov	COUNT_, #0
1f1c8     A8 00 A0 FD | 	call	#pushregs_
1f1cc     40 F0 07 F1 | 	add	ptra, #64
1f1d0     04 4E 05 F1 | 	add	fp, #4
1f1d4     A7 12 62 FC | 	wrlong	arg01, fp
1f1d8     04 4E 05 F1 | 	add	fp, #4
1f1dc     A7 14 02 F6 | 	mov	arg02, fp
1f1e0     08 4E 85 F1 | 	sub	fp, #8
1f1e4     14 48 B0 FD | 	call	#__system__stat
1f1e8     3C 4E 05 F1 | 	add	fp, #60
1f1ec     A7 FA 61 FC | 	wrlong	result1, fp
1f1f0     3C 4E 85 F1 | 	sub	fp, #60
1f1f4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f1f8     3C 4E 05 51 |  if_ne	add	fp, #60
1f1fc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1f200     3C 4E 85 51 |  if_ne	sub	fp, #60
1f204     BC 00 90 5D |  if_ne	jmp	#LR__2682
1f208     10 4E 05 F1 | 	add	fp, #16
1f20c     A7 12 02 FB | 	rdlong	arg01, fp
1f210     10 4E 85 F1 | 	sub	fp, #16
1f214     78 00 00 FF 
1f218     00 12 06 F5 | 	and	arg01, ##61440
1f21c     08 00 00 FF 
1f220     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1f224     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
1f228     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1f22c     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
1f230     01 FA 65 56 |  if_ne	neg	result1, #1
1f234     8C 00 90 5D |  if_ne	jmp	#LR__2682
1f238     04 4E 05 F1 | 	add	fp, #4
1f23c     A7 16 02 FB | 	rdlong	arg03, fp
1f240     04 4E 85 F1 | 	sub	fp, #4
1f244     0B 17 C2 FA | 	rdbyte	arg03, arg03
1f248     2F 16 0E F2 | 	cmp	arg03, #47 wz
1f24c     24 00 90 5D |  if_ne	jmp	#LR__2680
1f250     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1f254     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1f258     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f25c     04 4E 05 F1 | 	add	fp, #4
1f260     A7 14 02 FB | 	rdlong	arg02, fp
1f264     04 4E 85 F1 | 	sub	fp, #4
1f268     00 17 06 F6 | 	mov	arg03, #256
1f26c     AC 4A B0 FD | 	call	#__system__strncpy
1f270     4C 00 90 FD | 	jmp	#LR__2681
1f274                 | LR__2680
1f274     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1f278     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1f27c     38 4E 05 F1 | 	add	fp, #56
1f280     A7 12 62 FC | 	wrlong	arg01, fp
1f284     38 4E 85 F1 | 	sub	fp, #56
1f288     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
1f28c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1f290     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f294     00 17 06 F6 | 	mov	arg03, #256
1f298     80 4A B0 FD | 	call	#__system__strncpy
1f29c     38 4E 05 F1 | 	add	fp, #56
1f2a0     A7 12 02 FB | 	rdlong	arg01, fp
1f2a4     34 4E 85 F1 | 	sub	fp, #52
1f2a8     A7 14 02 FB | 	rdlong	arg02, fp
1f2ac     04 4E 85 F1 | 	sub	fp, #4
1f2b0     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1f2b4     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
1f2b8     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f2bc     10 00 B0 FD | 	call	#__system____getvfsforfile
1f2c0                 | LR__2681
1f2c0     00 FA 05 F6 | 	mov	result1, #0
1f2c4                 | LR__2682
1f2c4     A7 F0 03 F6 | 	mov	ptra, fp
1f2c8     B2 00 A0 FD | 	call	#popregs_
1f2cc                 | __system___chdir_ret
1f2cc     2D 00 64 FD | 	ret
1f2d0                 | 
1f2d0                 | __system____getvfsforfile
1f2d0     0E 4A 05 F6 | 	mov	COUNT_, #14
1f2d4     A8 00 A0 FD | 	call	#pushregs_
1f2d8     09 1F 02 F6 | 	mov	local01, arg01
1f2dc     0A 21 02 F6 | 	mov	local02, arg02
1f2e0     0B 23 02 F6 | 	mov	local03, arg03
1f2e4     97 10 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
1f2e8                 | LR__2690
1f2e8     10 FB C1 FA | 	rdbyte	result1, local02
1f2ec     2F FA 0D F2 | 	cmp	result1, #47 wz
1f2f0     01 20 06 A1 |  if_e	add	local02, #1
1f2f4     10 25 C2 AA |  if_e	rdbyte	local04, local02
1f2f8     01 20 86 A1 |  if_e	sub	local02, #1
1f2fc     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1f300     01 20 06 A1 |  if_e	add	local02, #1
1f304     E0 FF 9F AD |  if_e	jmp	#LR__2690
1f308                 | LR__2691
1f308     10 25 C2 FA | 	rdbyte	local04, local02
1f30c     2F 24 0E F2 | 	cmp	local04, #47 wz
1f310     14 00 90 5D |  if_ne	jmp	#LR__2692
1f314     0F 13 02 F6 | 	mov	arg01, local01
1f318     10 15 02 F6 | 	mov	arg02, local02
1f31c     00 17 06 F6 | 	mov	arg03, #256
1f320     F8 49 B0 FD | 	call	#__system__strncpy
1f324     7C 00 90 FD | 	jmp	#LR__2694
1f328                 | LR__2692
1f328     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1f32c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1f330     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f334     0F 13 02 F6 | 	mov	arg01, local01
1f338     00 17 06 F6 | 	mov	arg03, #256
1f33c     DC 49 B0 FD | 	call	#__system__strncpy
1f340     10 25 CA FA | 	rdbyte	local04, local02 wz
1f344     5C 00 90 AD |  if_e	jmp	#LR__2693
1f348     10 25 C2 FA | 	rdbyte	local04, local02
1f34c     2E 24 0E F2 | 	cmp	local04, #46 wz
1f350     01 20 06 A1 |  if_e	add	local02, #1
1f354     10 27 C2 AA |  if_e	rdbyte	local05, local02
1f358     01 20 86 A1 |  if_e	sub	local02, #1
1f35c     13 29 02 A6 |  if_e	mov	local06, local05
1f360     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1f364     3C 00 90 AD |  if_e	jmp	#LR__2693
1f368     0F 27 C2 FA | 	rdbyte	local05, local01
1f36c     2F 26 0E F2 | 	cmp	local05, #47 wz
1f370     01 1E 06 A1 |  if_e	add	local01, #1
1f374     0F 25 C2 AA |  if_e	rdbyte	local04, local01
1f378     01 1E 86 A1 |  if_e	sub	local01, #1
1f37c     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1f380     70 01 00 5F 
1f384     EC 14 06 56 |  if_ne	mov	arg02, ##@LR__4750
1f388     0F 13 02 56 |  if_ne	mov	arg01, local01
1f38c     00 17 06 56 |  if_ne	mov	arg03, #256
1f390     D4 49 B0 5D |  if_ne	call	#__system__strncat
1f394     0F 13 02 F6 | 	mov	arg01, local01
1f398     10 15 02 F6 | 	mov	arg02, local02
1f39c     00 17 06 F6 | 	mov	arg03, #256
1f3a0     C4 49 B0 FD | 	call	#__system__strncat
1f3a4                 | LR__2693
1f3a4                 | LR__2694
1f3a4     0F 13 02 F6 | 	mov	arg01, local01
1f3a8     7C 4B B0 FD | 	call	#__system___normalizeName
1f3ac     0F 25 CA FA | 	rdbyte	local04, local01 wz
1f3b0     1C 00 90 AD |  if_e	jmp	#LR__2695
1f3b4     0F 25 C2 FA | 	rdbyte	local04, local01
1f3b8     2F 24 0E F2 | 	cmp	local04, #47 wz
1f3bc     01 1E 06 A1 |  if_e	add	local01, #1
1f3c0     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1f3c4     01 1E 86 A1 |  if_e	sub	local01, #1
1f3c8     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1f3cc     18 00 90 5D |  if_ne	jmp	#LR__2696
1f3d0                 | LR__2695
1f3d0     01 00 00 FF 
1f3d4     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
1f3d8     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
1f3dc     01 00 00 FF 
1f3e0     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
1f3e4     EC 01 90 FD | 	jmp	#LR__2710
1f3e8                 | LR__2696
1f3e8     00 2A 06 F6 | 	mov	local07, #0
1f3ec                 | LR__2697
1f3ec     04 2A 56 F2 | 	cmps	local07, #4 wc
1f3f0     CC 01 90 3D |  if_ae	jmp	#LR__2709
1f3f4     15 29 02 F6 | 	mov	local06, local07
1f3f8     02 28 66 F0 | 	shl	local06, #2
1f3fc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f400     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1f404     14 29 0A FB | 	rdlong	local06, local06 wz
1f408     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f40c     A8 01 90 AD |  if_e	jmp	#LR__2708
1f410     15 25 02 F6 | 	mov	local04, local07
1f414     02 24 66 F0 | 	shl	local04, #2
1f418     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f41c     F3 24 02 F1 | 	add	local04, ptr___system__dat__
1f420     12 13 02 FB | 	rdlong	arg01, local04
1f424     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f428     09 2D 02 F6 | 	mov	local08, arg01
1f42c     97 06 48 FB | 	callpa	#(@LR__2699-@LR__2698)>>2,fcache_load_ptr_
1f430                 | LR__2698
1f430     16 FB C9 FA | 	rdbyte	result1, local08 wz
1f434     01 2C 06 51 |  if_ne	add	local08, #1
1f438     F4 FF 9F 5D |  if_ne	jmp	#LR__2698
1f43c                 | LR__2699
1f43c     09 2D 82 F1 | 	sub	local08, arg01
1f440     16 2F 02 F6 | 	mov	local09, local08
1f444     17 25 02 F6 | 	mov	local04, local09
1f448     0F 25 02 F1 | 	add	local04, local01
1f44c     12 29 C2 FA | 	rdbyte	local06, local04
1f450     2F 28 0E F2 | 	cmp	local06, #47 wz
1f454     17 31 02 56 |  if_ne	mov	local10, local09
1f458     0F 31 02 51 |  if_ne	add	local10, local01
1f45c     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1f460     54 01 90 5D |  if_ne	jmp	#LR__2707
1f464     15 17 02 F6 | 	mov	arg03, local07
1f468     02 16 66 F0 | 	shl	arg03, #2
1f46c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f470     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1f474     0B 15 02 FB | 	rdlong	arg02, arg03
1f478     17 17 02 F6 | 	mov	arg03, local09
1f47c     0F 13 02 F6 | 	mov	arg01, local01
1f480     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f484     40 49 B0 FD | 	call	#__system__strncmp
1f488     00 FA 4D F2 | 	cmps	result1, #0 wz
1f48c     28 01 90 5D |  if_ne	jmp	#LR__2707
1f490     15 33 02 F6 | 	mov	local11, local07
1f494     02 32 66 F0 | 	shl	local11, #2
1f498     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f49c     F3 32 02 F1 | 	add	local11, ptr___system__dat__
1f4a0     19 35 02 FB | 	rdlong	local12, local11
1f4a4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1f4a8     97 22 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
1f4ac                 | LR__2700
1f4ac     17 29 02 F6 | 	mov	local06, local09
1f4b0     01 28 06 F1 | 	add	local06, #1
1f4b4     0F 29 02 F1 | 	add	local06, local01
1f4b8     14 33 C2 FA | 	rdbyte	local11, local06
1f4bc     2E 32 0E F2 | 	cmp	local11, #46 wz
1f4c0     2C 00 90 5D |  if_ne	jmp	#LR__2702
1f4c4     17 33 02 F6 | 	mov	local11, local09
1f4c8     02 32 06 F1 | 	add	local11, #2
1f4cc     0F 33 02 F1 | 	add	local11, local01
1f4d0     19 31 C2 FA | 	rdbyte	local10, local11
1f4d4     2F 30 0E F2 | 	cmp	local10, #47 wz
1f4d8     17 37 02 56 |  if_ne	mov	local13, local09
1f4dc     02 36 06 51 |  if_ne	add	local13, #2
1f4e0     0F 37 02 51 |  if_ne	add	local13, local01
1f4e4     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
1f4e8     01 2E 06 A1 |  if_e	add	local09, #1
1f4ec     BC FF 9F AD |  if_e	jmp	#LR__2700
1f4f0                 | LR__2701
1f4f0                 | LR__2702
1f4f0     00 22 0E F2 | 	cmp	local03, #0 wz
1f4f4     11 13 02 56 |  if_ne	mov	arg01, local03
1f4f8     0F 15 02 56 |  if_ne	mov	arg02, local01
1f4fc     00 17 06 56 |  if_ne	mov	arg03, #256
1f500     18 48 B0 5D |  if_ne	call	#__system__strncpy
1f504     0F 15 02 F6 | 	mov	arg02, local01
1f508     17 15 02 F1 | 	add	arg02, local09
1f50c     01 14 06 F1 | 	add	arg02, #1
1f510     0F 13 02 F6 | 	mov	arg01, local01
1f514     D4 F5 BF FD | 	call	#__system____builtin_strcpy
1f518     0F 13 02 F6 | 	mov	arg01, local01
1f51c     09 2D 02 F6 | 	mov	local08, arg01
1f520     97 06 48 FB | 	callpa	#(@LR__2704-@LR__2703)>>2,fcache_load_ptr_
1f524                 | LR__2703
1f524     16 FB C9 FA | 	rdbyte	result1, local08 wz
1f528     01 2C 06 51 |  if_ne	add	local08, #1
1f52c     F4 FF 9F 5D |  if_ne	jmp	#LR__2703
1f530                 | LR__2704
1f530     09 2D 82 F1 | 	sub	local08, arg01
1f534     16 2F 02 F6 | 	mov	local09, local08
1f538                 | LR__2705
1f538     01 2E 56 F2 | 	cmps	local09, #1 wc
1f53c     70 00 90 CD |  if_b	jmp	#LR__2706
1f540     17 25 02 F6 | 	mov	local04, local09
1f544     0F 25 02 F1 | 	add	local04, local01
1f548     12 33 C2 FA | 	rdbyte	local11, local04
1f54c     2F 32 0E F2 | 	cmp	local11, #47 wz
1f550     17 33 02 A6 |  if_e	mov	local11, local09
1f554     0F 33 02 A1 |  if_e	add	local11, local01
1f558     19 01 48 AC |  if_e	wrbyte	#0, local11
1f55c     01 2E 86 A1 |  if_e	sub	local09, #1
1f560     D4 FF 9F AD |  if_e	jmp	#LR__2705
1f564     17 25 02 F6 | 	mov	local04, local09
1f568     0F 25 02 F1 | 	add	local04, local01
1f56c     12 33 C2 FA | 	rdbyte	local11, local04
1f570     2E 32 0E F2 | 	cmp	local11, #46 wz
1f574     38 00 90 5D |  if_ne	jmp	#LR__2706
1f578     02 2E 56 F2 | 	cmps	local09, #2 wc
1f57c     30 00 90 CD |  if_b	jmp	#LR__2706
1f580     17 39 02 F6 | 	mov	local14, local09
1f584     01 38 86 F1 | 	sub	local14, #1
1f588     0F 39 02 F1 | 	add	local14, local01
1f58c     1C 27 C2 FA | 	rdbyte	local05, local14
1f590     2F 26 0E F2 | 	cmp	local05, #47 wz
1f594     18 00 90 5D |  if_ne	jmp	#LR__2706
1f598     17 25 02 F6 | 	mov	local04, local09
1f59c     01 24 86 F1 | 	sub	local04, #1
1f5a0     0F 25 02 F1 | 	add	local04, local01
1f5a4     12 01 48 FC | 	wrbyte	#0, local04
1f5a8     02 2E 86 F1 | 	sub	local09, #2
1f5ac     88 FF 9F FD | 	jmp	#LR__2705
1f5b0                 | LR__2706
1f5b0     1A FB 01 F6 | 	mov	result1, local12
1f5b4     1C 00 90 FD | 	jmp	#LR__2710
1f5b8                 | LR__2707
1f5b8                 | LR__2708
1f5b8     01 2A 06 F1 | 	add	local07, #1
1f5bc     2C FE 9F FD | 	jmp	#LR__2697
1f5c0                 | LR__2709
1f5c0     03 00 00 FF 
1f5c4     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
1f5c8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1f5cc     03 00 00 FF 
1f5d0     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
1f5d4                 | LR__2710
1f5d4     A7 F0 03 F6 | 	mov	ptra, fp
1f5d8     B2 00 A0 FD | 	call	#popregs_
1f5dc                 | __system____getvfsforfile_ret
1f5dc     2D 00 64 FD | 	ret
1f5e0                 | 
1f5e0                 | __system___basic_open
1f5e0     05 4A 05 F6 | 	mov	COUNT_, #5
1f5e4     A8 00 A0 FD | 	call	#pushregs_
1f5e8     0A 1F 02 F6 | 	mov	local01, arg02
1f5ec     0B 21 02 F6 | 	mov	local02, arg03
1f5f0     0C 23 02 F6 | 	mov	local03, arg04
1f5f4     00 24 06 F6 | 	mov	local04, #0
1f5f8     F8 46 B0 FD | 	call	#__system____getftab
1f5fc     FD 26 0A F6 | 	mov	local05, result1 wz
1f600     18 00 90 5D |  if_ne	jmp	#LR__2720
1f604     EE 12 02 F6 | 	mov	arg01, abortchain
1f608     0C 14 06 F6 | 	mov	arg02, #12
1f60c     01 16 06 F6 | 	mov	arg03, #1
1f610     DA 00 A0 FD | 	call	#__longjmp
1f614     01 FA 65 F6 | 	neg	result1, #1
1f618     14 01 90 FD | 	jmp	#LR__2729
1f61c                 | LR__2720
1f61c     08 26 06 F1 | 	add	local05, #8
1f620     13 FB 09 FB | 	rdlong	result1, local05 wz
1f624     08 26 86 F1 | 	sub	local05, #8
1f628     13 13 02 56 |  if_ne	mov	arg01, local05
1f62c     54 3E B0 5D |  if_ne	call	#__system___closeraw
1f630     00 1E 0E F2 | 	cmp	local01, #0 wz
1f634     00 20 0E A2 |  if_e	cmp	local02, #0 wz
1f638     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1f63c     3C 00 90 AD |  if_e	jmp	#LR__2722
1f640     0C 12 06 F6 | 	mov	arg01, #12
1f644     3C 33 B0 FD | 	call	#__system___gc_alloc_managed
1f648     FD 24 0A F6 | 	mov	local04, result1 wz
1f64c     18 00 90 5D |  if_ne	jmp	#LR__2721
1f650     EE 12 02 F6 | 	mov	arg01, abortchain
1f654     07 14 06 F6 | 	mov	arg02, #7
1f658     01 16 06 F6 | 	mov	arg03, #1
1f65c     DA 00 A0 FD | 	call	#__longjmp
1f660     01 FA 65 F6 | 	neg	result1, #1
1f664     C8 00 90 FD | 	jmp	#LR__2729
1f668                 | LR__2721
1f668     12 01 68 FC | 	wrlong	#0, local04
1f66c     04 24 06 F1 | 	add	local04, #4
1f670     12 01 68 FC | 	wrlong	#0, local04
1f674     04 24 86 F1 | 	sub	local04, #4
1f678     13 25 62 FC | 	wrlong	local04, local05
1f67c                 | LR__2722
1f67c     00 1E 0E F2 | 	cmp	local01, #0 wz
1f680     20 00 90 AD |  if_e	jmp	#LR__2723
1f684     12 1F 62 FC | 	wrlong	local01, local04
1f688     12 FB 01 F6 | 	mov	result1, local04
1f68c     00 20 04 FF 
1f690     00 FA 45 F5 | 	or	result1, ##138412032
1f694     1C 26 06 F1 | 	add	local05, #28
1f698     13 FB 61 FC | 	wrlong	result1, local05
1f69c     1C 26 86 F1 | 	sub	local05, #28
1f6a0     0C 00 90 FD | 	jmp	#LR__2724
1f6a4                 | LR__2723
1f6a4     1C 26 06 F1 | 	add	local05, #28
1f6a8     13 01 68 FC | 	wrlong	#0, local05
1f6ac     1C 26 86 F1 | 	sub	local05, #28
1f6b0                 | LR__2724
1f6b0     00 20 0E F2 | 	cmp	local02, #0 wz
1f6b4     28 00 90 AD |  if_e	jmp	#LR__2725
1f6b8     04 24 06 F1 | 	add	local04, #4
1f6bc     12 21 62 FC | 	wrlong	local02, local04
1f6c0     04 24 86 F1 | 	sub	local04, #4
1f6c4     12 FB 01 F6 | 	mov	result1, local04
1f6c8     00 28 04 FF 
1f6cc     00 FA 45 F5 | 	or	result1, ##139460608
1f6d0     20 26 06 F1 | 	add	local05, #32
1f6d4     13 FB 61 FC | 	wrlong	result1, local05
1f6d8     20 26 86 F1 | 	sub	local05, #32
1f6dc     0C 00 90 FD | 	jmp	#LR__2726
1f6e0                 | LR__2725
1f6e0     20 26 06 F1 | 	add	local05, #32
1f6e4     13 01 68 FC | 	wrlong	#0, local05
1f6e8     20 26 86 F1 | 	sub	local05, #32
1f6ec                 | LR__2726
1f6ec     00 22 0E F2 | 	cmp	local03, #0 wz
1f6f0     24 00 90 AD |  if_e	jmp	#LR__2727
1f6f4     08 24 06 F1 | 	add	local04, #8
1f6f8     12 23 62 FC | 	wrlong	local03, local04
1f6fc     08 24 86 F1 | 	sub	local04, #8
1f700     00 30 04 FF 
1f704     00 24 46 F5 | 	or	local04, ##140509184
1f708     24 26 06 F1 | 	add	local05, #36
1f70c     13 25 62 FC | 	wrlong	local04, local05
1f710     24 26 86 F1 | 	sub	local05, #36
1f714     0C 00 90 FD | 	jmp	#LR__2728
1f718                 | LR__2727
1f718     24 26 06 F1 | 	add	local05, #36
1f71c     13 01 68 FC | 	wrlong	#0, local05
1f720     24 26 86 F1 | 	sub	local05, #36
1f724                 | LR__2728
1f724     08 26 06 F1 | 	add	local05, #8
1f728     13 0F 68 FC | 	wrlong	#7, local05
1f72c     00 FA 05 F6 | 	mov	result1, #0
1f730                 | LR__2729
1f730     A7 F0 03 F6 | 	mov	ptra, fp
1f734     B2 00 A0 FD | 	call	#popregs_
1f738                 | __system___basic_open_ret
1f738     2D 00 64 FD | 	ret
1f73c                 | 
1f73c                 | __system___basic_open_string
1f73c     04 4A 05 F6 | 	mov	COUNT_, #4
1f740     A8 00 A0 FD | 	call	#pushregs_
1f744     0A 1F 02 F6 | 	mov	local01, arg02
1f748     0B 21 02 F6 | 	mov	local02, arg03
1f74c     A4 45 B0 FD | 	call	#__system____getftab
1f750     FD 22 0A F6 | 	mov	local03, result1 wz
1f754     18 00 90 5D |  if_ne	jmp	#LR__2730
1f758     EE 12 02 F6 | 	mov	arg01, abortchain
1f75c     0C 14 06 F6 | 	mov	arg02, #12
1f760     01 16 06 F6 | 	mov	arg03, #1
1f764     DA 00 A0 FD | 	call	#__longjmp
1f768     01 FA 65 F6 | 	neg	result1, #1
1f76c     58 00 90 FD | 	jmp	#LR__2732
1f770                 | LR__2730
1f770     08 22 06 F1 | 	add	local03, #8
1f774     11 19 0A FB | 	rdlong	arg04, local03 wz
1f778     08 22 86 F1 | 	sub	local03, #8
1f77c     11 13 02 56 |  if_ne	mov	arg01, local03
1f780     00 3D B0 5D |  if_ne	call	#__system___closeraw
1f784     0F 15 02 F6 | 	mov	arg02, local01
1f788     10 17 02 F6 | 	mov	arg03, local02
1f78c     11 13 02 F6 | 	mov	arg01, local03
1f790     B6 19 06 F6 | 	mov	arg04, #438
1f794     E8 39 B0 FD | 	call	#__system___openraw
1f798     FD 24 02 F6 | 	mov	local04, result1
1f79c     00 24 56 F2 | 	cmps	local04, #0 wc
1f7a0     20 00 90 3D |  if_ae	jmp	#LR__2731
1f7a4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f7a8     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1f7ac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f7b0     EE 12 02 F6 | 	mov	arg01, abortchain
1f7b4     01 16 06 F6 | 	mov	arg03, #1
1f7b8     DA 00 A0 FD | 	call	#__longjmp
1f7bc     01 FA 65 F6 | 	neg	result1, #1
1f7c0     04 00 90 FD | 	jmp	#LR__2732
1f7c4                 | LR__2731
1f7c4     12 FB 01 F6 | 	mov	result1, local04
1f7c8                 | LR__2732
1f7c8     A7 F0 03 F6 | 	mov	ptra, fp
1f7cc     B2 00 A0 FD | 	call	#popregs_
1f7d0                 | __system___basic_open_string_ret
1f7d0     2D 00 64 FD | 	ret
1f7d4                 | 
1f7d4                 | __system___basic_print_nl
1f7d4     0A 14 06 F6 | 	mov	arg02, #10
1f7d8     00 16 06 F6 | 	mov	arg03, #0
1f7dc     08 00 B0 FD | 	call	#__system___basic_print_char
1f7e0     01 FA 05 F6 | 	mov	result1, #1
1f7e4                 | __system___basic_print_nl_ret
1f7e4     2D 00 64 FD | 	ret
1f7e8                 | 
1f7e8                 | __system___basic_print_char
1f7e8     03 4A 05 F6 | 	mov	COUNT_, #3
1f7ec     A8 00 A0 FD | 	call	#pushregs_
1f7f0     0A 1F 02 F6 | 	mov	local01, arg02
1f7f4     50 4C B0 FD | 	call	#__system___gettxfunc
1f7f8     FD 20 0A F6 | 	mov	local02, result1 wz
1f7fc     00 FA 05 A6 |  if_e	mov	result1, #0
1f800     30 00 90 AD |  if_e	jmp	#LR__2740
1f804     10 23 02 F6 | 	mov	local03, local02
1f808     13 20 46 F7 | 	zerox	local02, #19
1f80c     14 22 46 F0 | 	shr	local03, #20
1f810     02 22 66 F0 | 	shl	local03, #2
1f814     ED 22 02 F1 | 	add	local03, __methods__
1f818     11 23 02 FB | 	rdlong	local03, local03
1f81c     0F 13 02 F6 | 	mov	arg01, local01
1f820     F2 1E 02 F6 | 	mov	local01, objptr
1f824     10 E5 01 F6 | 	mov	objptr, local02
1f828     2D 22 62 FD | 	call	local03
1f82c     0F E5 01 F6 | 	mov	objptr, local01
1f830     01 FA 05 F6 | 	mov	result1, #1
1f834                 | LR__2740
1f834     A7 F0 03 F6 | 	mov	ptra, fp
1f838     B2 00 A0 FD | 	call	#popregs_
1f83c                 | __system___basic_print_char_ret
1f83c     2D 00 64 FD | 	ret
1f840                 | 
1f840                 | __system___basic_print_string
1f840     03 4A 05 F6 | 	mov	COUNT_, #3
1f844     A8 00 A0 FD | 	call	#pushregs_
1f848     0A 1F 02 F6 | 	mov	local01, arg02
1f84c     0B 21 02 F6 | 	mov	local02, arg03
1f850     F4 4B B0 FD | 	call	#__system___gettxfunc
1f854     FD 22 0A F6 | 	mov	local03, result1 wz
1f858     00 FA 05 A6 |  if_e	mov	result1, #0
1f85c     18 00 90 AD |  if_e	jmp	#LR__2750
1f860     00 1E 0E F2 | 	cmp	local01, #0 wz
1f864     00 FA 05 A6 |  if_e	mov	result1, #0
1f868     11 13 02 56 |  if_ne	mov	arg01, local03
1f86c     10 15 02 56 |  if_ne	mov	arg02, local02
1f870     0F 17 02 56 |  if_ne	mov	arg03, local01
1f874     C0 01 B0 5D |  if_ne	call	#__system___fmtstr
1f878                 | LR__2750
1f878     A7 F0 03 F6 | 	mov	ptra, fp
1f87c     B2 00 A0 FD | 	call	#popregs_
1f880                 | __system___basic_print_string_ret
1f880     2D 00 64 FD | 	ret
1f884                 | 
1f884                 | __system___basic_print_integer
1f884     04 4A 05 F6 | 	mov	COUNT_, #4
1f888     A8 00 A0 FD | 	call	#pushregs_
1f88c     0A 1F 02 F6 | 	mov	local01, arg02
1f890     0B 21 02 F6 | 	mov	local02, arg03
1f894     0C 23 02 F6 | 	mov	local03, arg04
1f898     AC 4B B0 FD | 	call	#__system___gettxfunc
1f89c     FD 24 0A F6 | 	mov	local04, result1 wz
1f8a0     00 FA 05 A6 |  if_e	mov	result1, #0
1f8a4     12 13 02 56 |  if_ne	mov	arg01, local04
1f8a8     10 15 02 56 |  if_ne	mov	arg02, local02
1f8ac     0F 17 02 56 |  if_ne	mov	arg03, local01
1f8b0     11 19 02 56 |  if_ne	mov	arg04, local03
1f8b4     6C 02 B0 5D |  if_ne	call	#__system___fmtnum
1f8b8     A7 F0 03 F6 | 	mov	ptra, fp
1f8bc     B2 00 A0 FD | 	call	#popregs_
1f8c0                 | __system___basic_print_integer_ret
1f8c0     2D 00 64 FD | 	ret
1f8c4                 | 
1f8c4                 | __system___basic_print_unsigned
1f8c4     03 4A 05 F6 | 	mov	COUNT_, #3
1f8c8     A8 00 A0 FD | 	call	#pushregs_
1f8cc     0A 1F 02 F6 | 	mov	local01, arg02
1f8d0     0B 21 02 F6 | 	mov	local02, arg03
1f8d4     0C 23 02 F6 | 	mov	local03, arg04
1f8d8     6C 4B B0 FD | 	call	#__system___gettxfunc
1f8dc     FD 12 0A F6 | 	mov	arg01, result1 wz
1f8e0     00 FA 05 A6 |  if_e	mov	result1, #0
1f8e4     3A 20 26 54 |  if_ne	bith	local02, #58
1f8e8     10 15 02 56 |  if_ne	mov	arg02, local02
1f8ec     0F 17 02 56 |  if_ne	mov	arg03, local01
1f8f0     11 19 02 56 |  if_ne	mov	arg04, local03
1f8f4     2C 02 B0 5D |  if_ne	call	#__system___fmtnum
1f8f8     A7 F0 03 F6 | 	mov	ptra, fp
1f8fc     B2 00 A0 FD | 	call	#popregs_
1f900                 | __system___basic_print_unsigned_ret
1f900     2D 00 64 FD | 	ret
1f904                 | 
1f904                 | __system___basic_get_char
1f904     03 4A 05 F6 | 	mov	COUNT_, #3
1f908     A8 00 A0 FD | 	call	#pushregs_
1f90c     7C 4B B0 FD | 	call	#__system___getrxfunc
1f910     FD 1E 0A F6 | 	mov	local01, result1 wz
1f914     01 FA 65 A6 |  if_e	neg	result1, #1
1f918     28 00 90 AD |  if_e	jmp	#LR__2760
1f91c     0F 21 02 F6 | 	mov	local02, local01
1f920     13 1E 46 F7 | 	zerox	local01, #19
1f924     14 20 46 F0 | 	shr	local02, #20
1f928     02 20 66 F0 | 	shl	local02, #2
1f92c     ED 20 02 F1 | 	add	local02, __methods__
1f930     10 21 02 FB | 	rdlong	local02, local02
1f934     F2 22 02 F6 | 	mov	local03, objptr
1f938     0F E5 01 F6 | 	mov	objptr, local01
1f93c     2D 20 62 FD | 	call	local02
1f940     11 E5 01 F6 | 	mov	objptr, local03
1f944                 | LR__2760
1f944     A7 F0 03 F6 | 	mov	ptra, fp
1f948     B2 00 A0 FD | 	call	#popregs_
1f94c                 | __system___basic_get_char_ret
1f94c     2D 00 64 FD | 	ret
1f950                 | 
1f950                 | __system___basic_get
1f950     04 4A 05 F6 | 	mov	COUNT_, #4
1f954     A8 00 A0 FD | 	call	#pushregs_
1f958     0D 1F 02 F6 | 	mov	local01, arg05
1f95c     0F 19 02 FD | 	qmul	arg04, local01
1f960     09 21 02 F6 | 	mov	local02, arg01
1f964     0B 23 02 F6 | 	mov	local03, arg03
1f968     00 14 0E F2 | 	cmp	arg02, #0 wz
1f96c     01 14 86 51 |  if_ne	sub	arg02, #1
1f970     10 13 02 56 |  if_ne	mov	arg01, local02
1f974     00 16 06 56 |  if_ne	mov	arg03, #0
1f978     18 24 62 FD | 	getqx	local04
1f97c     BC 41 B0 5D |  if_ne	call	#__system__lseek
1f980     11 15 02 F6 | 	mov	arg02, local03
1f984     12 17 02 F6 | 	mov	arg03, local04
1f988     10 13 02 F6 | 	mov	arg01, local02
1f98c     34 41 B0 FD | 	call	#__system__read
1f990     FD 24 02 F6 | 	mov	local04, result1
1f994     01 24 56 F2 | 	cmps	local04, #1 wc
1f998     10 00 90 CD |  if_b	jmp	#LR__2770
1f99c     12 65 02 F6 | 	mov	muldiva_, local04
1f9a0     0F 67 02 F6 | 	mov	muldivb_, local01
1f9a4     BA 00 A0 FD | 	call	#divide_
1f9a8     33 25 02 F6 | 	mov	local04, muldivb_
1f9ac                 | LR__2770
1f9ac     12 FB 01 F6 | 	mov	result1, local04
1f9b0     A7 F0 03 F6 | 	mov	ptra, fp
1f9b4     B2 00 A0 FD | 	call	#popregs_
1f9b8                 | __system___basic_get_ret
1f9b8     2D 00 64 FD | 	ret
1f9bc                 | 
1f9bc                 | __system____lockio
1f9bc     10 4B B0 FD | 	call	#__system___getiolock_0484
1f9c0     FD 12 02 F6 | 	mov	arg01, result1
1f9c4     70 F1 BF FD | 	call	#__system___lockmem
1f9c8     00 FA 05 F6 | 	mov	result1, #0
1f9cc                 | __system____lockio_ret
1f9cc     2D 00 64 FD | 	ret
1f9d0                 | 
1f9d0                 | __system____unlockio
1f9d0     FC 4A B0 FD | 	call	#__system___getiolock_0484
1f9d4     FD 00 68 FC | 	wrlong	#0, result1
1f9d8     00 FA 05 F6 | 	mov	result1, #0
1f9dc                 | __system____unlockio_ret
1f9dc     2D 00 64 FD | 	ret
1f9e0                 | 
1f9e0                 | __system___fmtchar
1f9e0     00 4A 05 F6 | 	mov	COUNT_, #0
1f9e4     A8 00 A0 FD | 	call	#pushregs_
1f9e8     10 F0 07 F1 | 	add	ptra, #16
1f9ec     04 4E 05 F1 | 	add	fp, #4
1f9f0     A7 12 62 FC | 	wrlong	arg01, fp
1f9f4     04 4E 05 F1 | 	add	fp, #4
1f9f8     A7 14 62 FC | 	wrlong	arg02, fp
1f9fc     04 4E 05 F1 | 	add	fp, #4
1fa00     A7 16 62 FC | 	wrlong	arg03, fp
1fa04     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1fa08     A7 16 62 FC | 	wrlong	arg03, fp
1fa0c     08 4E 85 F1 | 	sub	fp, #8
1fa10     A7 12 02 FB | 	rdlong	arg01, fp
1fa14     04 4E 05 F1 | 	add	fp, #4
1fa18     A7 14 02 FB | 	rdlong	arg02, fp
1fa1c     04 4E 05 F1 | 	add	fp, #4
1fa20     A7 16 02 F6 | 	mov	arg03, fp
1fa24     0C 4E 85 F1 | 	sub	fp, #12
1fa28     0C 00 B0 FD | 	call	#__system___fmtstr
1fa2c     A7 F0 03 F6 | 	mov	ptra, fp
1fa30     B2 00 A0 FD | 	call	#popregs_
1fa34                 | __system___fmtchar_ret
1fa34     2D 00 64 FD | 	ret
1fa38                 | 
1fa38                 | __system___fmtstr
1fa38     09 4A 05 F6 | 	mov	COUNT_, #9
1fa3c     A8 00 A0 FD | 	call	#pushregs_
1fa40     09 1F 02 F6 | 	mov	local01, arg01
1fa44     0A 21 02 F6 | 	mov	local02, arg02
1fa48     0B 23 02 F6 | 	mov	local03, arg03
1fa4c     10 19 E2 F8 | 	getbyte	arg04, local02, #0
1fa50     11 13 02 F6 | 	mov	arg01, local03
1fa54     09 25 02 F6 | 	mov	local04, arg01
1fa58     97 06 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
1fa5c                 | LR__2780
1fa5c     12 FB C9 FA | 	rdbyte	result1, local04 wz
1fa60     01 24 06 51 |  if_ne	add	local04, #1
1fa64     F4 FF 9F 5D |  if_ne	jmp	#LR__2780
1fa68                 | LR__2781
1fa68     09 25 82 F1 | 	sub	local04, arg01
1fa6c     00 18 0E F2 | 	cmp	arg04, #0 wz
1fa70     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1fa74     10 15 02 F6 | 	mov	arg02, local02
1fa78     12 17 02 F6 | 	mov	arg03, local04
1fa7c     0F 13 02 F6 | 	mov	arg01, local01
1fa80     02 18 06 F6 | 	mov	arg04, #2
1fa84     60 46 B0 FD | 	call	#__system___fmtpad
1fa88     FD 26 02 F6 | 	mov	local05, result1
1fa8c     00 26 56 F2 | 	cmps	local05, #0 wc
1fa90     13 FB 01 C6 |  if_b	mov	result1, local05
1fa94     80 00 90 CD |  if_b	jmp	#LR__2784
1fa98     01 24 56 F2 | 	cmps	local04, #1 wc
1fa9c     50 00 90 CD |  if_b	jmp	#LR__2783
1faa0     12 29 02 F6 | 	mov	local06, local04
1faa4                 | LR__2782
1faa4     0F 2B 02 F6 | 	mov	local07, local01
1faa8     0F 2D 02 F6 | 	mov	local08, local01
1faac     13 2A 46 F7 | 	zerox	local07, #19
1fab0     14 2C 46 F0 | 	shr	local08, #20
1fab4     02 2C 66 F0 | 	shl	local08, #2
1fab8     ED 2C 02 F1 | 	add	local08, __methods__
1fabc     16 2D 02 FB | 	rdlong	local08, local08
1fac0     11 13 C2 FA | 	rdbyte	arg01, local03
1fac4     F2 2E 02 F6 | 	mov	local09, objptr
1fac8     15 E5 01 F6 | 	mov	objptr, local07
1facc     01 22 06 F1 | 	add	local03, #1
1fad0     2D 2C 62 FD | 	call	local08
1fad4     17 E5 01 F6 | 	mov	objptr, local09
1fad8     FD 2E 02 F6 | 	mov	local09, result1
1fadc     00 2E 56 F2 | 	cmps	local09, #0 wc
1fae0     17 FB 01 C6 |  if_b	mov	result1, local09
1fae4     30 00 90 CD |  if_b	jmp	#LR__2784
1fae8     17 27 02 F1 | 	add	local05, local09
1faec     ED 29 6E FB | 	djnz	local06, #LR__2782
1faf0                 | LR__2783
1faf0     10 15 02 F6 | 	mov	arg02, local02
1faf4     12 17 02 F6 | 	mov	arg03, local04
1faf8     0F 13 02 F6 | 	mov	arg01, local01
1fafc     01 18 06 F6 | 	mov	arg04, #1
1fb00     E4 45 B0 FD | 	call	#__system___fmtpad
1fb04     FD 2E 02 F6 | 	mov	local09, result1
1fb08     00 2E 56 F2 | 	cmps	local09, #0 wc
1fb0c     17 FB 01 C6 |  if_b	mov	result1, local09
1fb10     17 27 02 31 |  if_ae	add	local05, local09
1fb14     13 FB 01 36 |  if_ae	mov	result1, local05
1fb18                 | LR__2784
1fb18     A7 F0 03 F6 | 	mov	ptra, fp
1fb1c     B2 00 A0 FD | 	call	#popregs_
1fb20                 | __system___fmtstr_ret
1fb20     2D 00 64 FD | 	ret
1fb24                 | 
1fb24                 | __system___fmtnum
1fb24     0B 4A 05 F6 | 	mov	COUNT_, #11
1fb28     A8 00 A0 FD | 	call	#pushregs_
1fb2c     09 1F 02 F6 | 	mov	local01, arg01
1fb30     0A 21 02 F6 | 	mov	local02, arg02
1fb34     0B 23 02 F6 | 	mov	local03, arg03
1fb38     0C 25 02 F6 | 	mov	local04, arg04
1fb3c     F8 27 02 F6 | 	mov	local05, ptra
1fb40     13 29 02 F6 | 	mov	local06, local05
1fb44     00 2A 06 F6 | 	mov	local07, #0
1fb48     10 2D 02 F6 | 	mov	local08, local02
1fb4c     10 2C 46 F0 | 	shr	local08, #16
1fb50     3F 2C 06 F5 | 	and	local08, #63
1fb54     10 2F E2 F8 | 	getbyte	local09, local02, #0
1fb58     10 31 02 F6 | 	mov	local10, local02
1fb5c     1A 30 46 F0 | 	shr	local10, #26
1fb60     03 30 06 F5 | 	and	local10, #3
1fb64     18 33 02 F6 | 	mov	local11, local10
1fb68     01 2C 56 F2 | 	cmps	local08, #1 wc
1fb6c     44 F0 07 F1 | 	add	ptra, #68
1fb70     01 2C 86 31 |  if_ae	sub	local08, #1
1fb74     41 2E 56 F2 | 	cmps	local09, #65 wc
1fb78     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1fb7c     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
1fb80     03 32 0E F2 | 	cmp	local11, #3 wz
1fb84     00 32 06 A6 |  if_e	mov	local11, #0
1fb88     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1fb8c     04 32 06 46 |  if_c_and_nz	mov	local11, #4
1fb90     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1fb94     00 32 0E F2 | 	cmp	local11, #0 wz
1fb98     4C 00 90 AD |  if_e	jmp	#LR__2793
1fb9c     01 2A 06 F6 | 	mov	local07, #1
1fba0     17 2D 0A F2 | 	cmp	local08, local09 wz
1fba4     18 00 90 5D |  if_ne	jmp	#LR__2791
1fba8     05 2C 6E FB | 	djnz	local08, #LR__2790
1fbac     0F 13 02 F6 | 	mov	arg01, local01
1fbb0     10 15 02 F6 | 	mov	arg02, local02
1fbb4     23 16 06 F6 | 	mov	arg03, #35
1fbb8     24 FE BF FD | 	call	#__system___fmtchar
1fbbc     88 00 90 FD | 	jmp	#LR__2797
1fbc0                 | LR__2790
1fbc0                 | LR__2791
1fbc0     02 32 0E F2 | 	cmp	local11, #2 wz
1fbc4     14 31 02 A6 |  if_e	mov	local10, local06
1fbc8     01 28 06 A1 |  if_e	add	local06, #1
1fbcc     18 41 48 AC |  if_e	wrbyte	#32, local10
1fbd0     14 00 90 AD |  if_e	jmp	#LR__2792
1fbd4     04 32 0E F2 | 	cmp	local11, #4 wz
1fbd8     14 5B 48 AC |  if_e	wrbyte	#45, local06
1fbdc     01 28 06 A1 |  if_e	add	local06, #1
1fbe0     14 57 48 5C |  if_ne	wrbyte	#43, local06
1fbe4     01 28 06 51 |  if_ne	add	local06, #1
1fbe8                 | LR__2792
1fbe8                 | LR__2793
1fbe8     14 13 02 F6 | 	mov	arg01, local06
1fbec     11 15 02 F6 | 	mov	arg02, local03
1fbf0     12 17 02 F6 | 	mov	arg03, local04
1fbf4     16 19 02 F6 | 	mov	arg04, local08
1fbf8     00 1A 06 F6 | 	mov	arg05, #0
1fbfc     1D 20 2E F4 | 	testbn	local02, #29 wz
1fc00     01 1A 06 56 |  if_ne	mov	arg05, #1
1fc04     A8 45 B0 FD | 	call	#__system___uitoa
1fc08     FD 2A 02 F1 | 	add	local07, result1
1fc0c     17 2B 5A F2 | 	cmps	local07, local09 wcz
1fc10     24 00 90 ED |  if_be	jmp	#LR__2796
1fc14     97 0E 48 FB | 	callpa	#(@LR__2795-@LR__2794)>>2,fcache_load_ptr_
1fc18                 | LR__2794
1fc18     17 31 02 F6 | 	mov	local10, local09
1fc1c     01 30 56 F2 | 	cmps	local10, #1 wc
1fc20     01 2E 86 F1 | 	sub	local09, #1
1fc24     14 31 02 36 |  if_ae	mov	local10, local06
1fc28     01 28 06 31 |  if_ae	add	local06, #1
1fc2c     18 47 48 3C |  if_ae	wrbyte	#35, local10
1fc30     E4 FF 9F 3D |  if_ae	jmp	#LR__2794
1fc34                 | LR__2795
1fc34     14 01 48 FC | 	wrbyte	#0, local06
1fc38                 | LR__2796
1fc38     0F 13 02 F6 | 	mov	arg01, local01
1fc3c     10 15 02 F6 | 	mov	arg02, local02
1fc40     13 17 02 F6 | 	mov	arg03, local05
1fc44     F0 FD BF FD | 	call	#__system___fmtstr
1fc48                 | LR__2797
1fc48     A7 F0 03 F6 | 	mov	ptra, fp
1fc4c     B2 00 A0 FD | 	call	#popregs_
1fc50                 | __system___fmtnum_ret
1fc50     2D 00 64 FD | 	ret
1fc54                 | 
1fc54                 | __system___fmtfloat
1fc54     10 4A 05 F6 | 	mov	COUNT_, #16
1fc58     A8 00 A0 FD | 	call	#pushregs_
1fc5c     24 F1 07 F1 | 	add	ptra, #292
1fc60     04 4E 05 F1 | 	add	fp, #4
1fc64     A7 12 62 FC | 	wrlong	arg01, fp
1fc68     04 4E 05 F1 | 	add	fp, #4
1fc6c     A7 14 62 FC | 	wrlong	arg02, fp
1fc70     04 4E 05 F1 | 	add	fp, #4
1fc74     A7 16 62 FC | 	wrlong	arg03, fp
1fc78     04 4E 05 F1 | 	add	fp, #4
1fc7c     A7 18 62 FC | 	wrlong	arg04, fp
1fc80     0C 4E 05 F1 | 	add	fp, #12
1fc84     A7 14 68 FC | 	wrlong	#10, fp
1fc88     08 4E 05 F1 | 	add	fp, #8
1fc8c     A7 00 68 FC | 	wrlong	#0, fp
1fc90     08 4E 05 F1 | 	add	fp, #8
1fc94     A7 00 68 FC | 	wrlong	#0, fp
1fc98     08 4E 05 F1 | 	add	fp, #8
1fc9c     A7 00 68 FC | 	wrlong	#0, fp
1fca0     04 4E 05 F1 | 	add	fp, #4
1fca4     A7 04 68 FC | 	wrlong	#2, fp
1fca8     04 4E 05 F1 | 	add	fp, #4
1fcac     A7 00 68 FC | 	wrlong	#0, fp
1fcb0     04 4E 05 F1 | 	add	fp, #4
1fcb4     A7 00 68 FC | 	wrlong	#0, fp
1fcb8     04 4E 05 F1 | 	add	fp, #4
1fcbc     A7 00 68 FC | 	wrlong	#0, fp
1fcc0     04 4E 05 F1 | 	add	fp, #4
1fcc4     A7 00 68 FC | 	wrlong	#0, fp
1fcc8     18 4E 05 F1 | 	add	fp, #24
1fccc     A7 00 68 FC | 	wrlong	#0, fp
1fcd0     68 4E 05 F1 | 	add	fp, #104
1fcd4     A7 1E 02 F6 | 	mov	local01, fp
1fcd8     08 4E 85 F1 | 	sub	fp, #8
1fcdc     A7 1E 62 FC | 	wrlong	local01, fp
1fce0     04 4E 05 F1 | 	add	fp, #4
1fce4     A7 1E 62 FC | 	wrlong	local01, fp
1fce8     BC 4E 85 F1 | 	sub	fp, #188
1fcec     A7 1E 02 FB | 	rdlong	local01, fp
1fcf0     10 1E 46 F0 | 	shr	local01, #16
1fcf4     3F 1E 06 F5 | 	and	local01, #63
1fcf8     B0 4E 05 F1 | 	add	fp, #176
1fcfc     A7 1E 62 FC | 	wrlong	local01, fp
1fd00     B0 4E 85 F1 | 	sub	fp, #176
1fd04     A7 1E 02 FB | 	rdlong	local01, fp
1fd08     1C 1E 46 F0 | 	shr	local01, #28
1fd0c     01 1E 06 F5 | 	and	local01, #1
1fd10     08 4F 05 F1 | 	add	fp, #264
1fd14     A7 1E 62 FC | 	wrlong	local01, fp
1fd18     58 4E 85 F1 | 	sub	fp, #88
1fd1c     A7 1E 0A FB | 	rdlong	local01, fp wz
1fd20     B8 4E 85 F1 | 	sub	fp, #184
1fd24     3C 00 90 5D |  if_ne	jmp	#LR__2801
1fd28     10 4E 05 F1 | 	add	fp, #16
1fd2c     A7 1E 02 FB | 	rdlong	local01, fp
1fd30     10 4E 85 F1 | 	sub	fp, #16
1fd34     61 1E 0E F2 | 	cmp	local01, #97 wz
1fd38     18 00 90 5D |  if_ne	jmp	#LR__2800
1fd3c     B8 4E 05 F1 | 	add	fp, #184
1fd40     A7 1A 68 FC | 	wrlong	#13, fp
1fd44     84 4E 85 F1 | 	sub	fp, #132
1fd48     A7 02 68 FC | 	wrlong	#1, fp
1fd4c     34 4E 85 F1 | 	sub	fp, #52
1fd50     24 00 90 FD | 	jmp	#LR__2802
1fd54                 | LR__2800
1fd54     B8 4E 05 F1 | 	add	fp, #184
1fd58     A7 0C 68 FC | 	wrlong	#6, fp
1fd5c     B8 4E 85 F1 | 	sub	fp, #184
1fd60     14 00 90 FD | 	jmp	#LR__2802
1fd64                 | LR__2801
1fd64     B8 4E 05 F1 | 	add	fp, #184
1fd68     A7 1E 02 FB | 	rdlong	local01, fp
1fd6c     01 1E 86 F1 | 	sub	local01, #1
1fd70     A7 1E 62 FC | 	wrlong	local01, fp
1fd74     B8 4E 85 F1 | 	sub	fp, #184
1fd78                 | LR__2802
1fd78     08 4E 05 F1 | 	add	fp, #8
1fd7c     A7 1E 02 FB | 	rdlong	local01, fp
1fd80     16 1E 46 F0 | 	shr	local01, #22
1fd84     03 1E 06 F5 | 	and	local01, #3
1fd88     04 4F 05 F1 | 	add	fp, #260
1fd8c     A7 1E 62 FC | 	wrlong	local01, fp
1fd90     04 4F 85 F1 | 	sub	fp, #260
1fd94     A7 1E 02 FB | 	rdlong	local01, fp
1fd98     1D 1E 46 F0 | 	shr	local01, #29
1fd9c     01 1E 06 F5 | 	and	local01, #1
1fda0     B4 4E 05 F1 | 	add	fp, #180
1fda4     A7 1E 62 FC | 	wrlong	local01, fp
1fda8     B4 4E 85 F1 | 	sub	fp, #180
1fdac     A7 1E 02 FB | 	rdlong	local01, fp
1fdb0     0F 1F EA F8 | 	getbyte	local01, local01, #1
1fdb4     60 4E 05 F1 | 	add	fp, #96
1fdb8     A7 1E 62 FC | 	wrlong	local01, fp
1fdbc     60 4E 85 F1 | 	sub	fp, #96
1fdc0     A7 1E 02 FB | 	rdlong	local01, fp
1fdc4     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1fdc8     64 4E 05 F1 | 	add	fp, #100
1fdcc     A7 1E 62 FC | 	wrlong	local01, fp
1fdd0     00 1E 06 F6 | 	mov	local01, #0
1fdd4     5C 4E 85 F1 | 	sub	fp, #92
1fdd8     A7 1A 02 FB | 	rdlong	arg05, fp
1fddc     65 1A 0E F2 | 	cmp	arg05, #101 wz
1fde0     01 1E 06 A6 |  if_e	mov	local01, #1
1fde4     14 4E 05 F1 | 	add	fp, #20
1fde8     A7 1E 62 FC | 	wrlong	local01, fp
1fdec     98 4E 05 F1 | 	add	fp, #152
1fdf0     A7 20 0A FB | 	rdlong	local02, fp wz
1fdf4     45 1E 06 56 |  if_ne	mov	local01, #69
1fdf8     65 1E 06 A6 |  if_e	mov	local01, #101
1fdfc     8C 4E 85 F1 | 	sub	fp, #140
1fe00     A7 1E 62 FC | 	wrlong	local01, fp
1fe04     20 4E 85 F1 | 	sub	fp, #32
1fe08     A7 1E 02 FB | 	rdlong	local01, fp
1fe0c     10 4E 85 F1 | 	sub	fp, #16
1fe10     61 1E 0E F2 | 	cmp	local01, #97 wz
1fe14     4C 00 90 5D |  if_ne	jmp	#LR__2803
1fe18     24 4E 05 F1 | 	add	fp, #36
1fe1c     A7 02 68 FC | 	wrlong	#1, fp
1fe20     98 4E 05 F1 | 	add	fp, #152
1fe24     A7 20 0A FB | 	rdlong	local02, fp wz
1fe28     50 1E 06 56 |  if_ne	mov	local01, #80
1fe2c     70 1E 06 A6 |  if_e	mov	local01, #112
1fe30     8C 4E 85 F1 | 	sub	fp, #140
1fe34     A7 1E 62 FC | 	wrlong	local01, fp
1fe38     14 4E 85 F1 | 	sub	fp, #20
1fe3c     A7 04 68 FC | 	wrlong	#2, fp
1fe40     1C 4E 05 F1 | 	add	fp, #28
1fe44     A7 02 68 FC | 	wrlong	#1, fp
1fe48     84 4E 05 F1 | 	add	fp, #132
1fe4c     A7 20 0A FB | 	rdlong	local02, fp wz
1fe50     58 1E 06 56 |  if_ne	mov	local01, #88
1fe54     78 1E 06 A6 |  if_e	mov	local01, #120
1fe58     7C 4E 85 F1 | 	sub	fp, #124
1fe5c     A7 1E 62 FC | 	wrlong	local01, fp
1fe60     40 4E 85 F1 | 	sub	fp, #64
1fe64                 | LR__2803
1fe64     10 4E 05 F1 | 	add	fp, #16
1fe68     A7 1E 02 FB | 	rdlong	local01, fp
1fe6c     10 4E 85 F1 | 	sub	fp, #16
1fe70     23 1E 0E F2 | 	cmp	local01, #35 wz
1fe74     3C 00 90 5D |  if_ne	jmp	#LR__2806
1fe78     48 4E 05 F1 | 	add	fp, #72
1fe7c     A7 02 68 FC | 	wrlong	#1, fp
1fe80     C8 4E 05 F1 | 	add	fp, #200
1fe84     A7 1E 0A FB | 	rdlong	local01, fp wz
1fe88     10 4F 85 F1 | 	sub	fp, #272
1fe8c     18 00 90 AD |  if_e	jmp	#LR__2804
1fe90     10 4E 05 F1 | 	add	fp, #16
1fe94     A7 CC 68 FC | 	wrlong	#102, fp
1fe98     00 4F 05 F1 | 	add	fp, #256
1fe9c     A7 00 68 FC | 	wrlong	#0, fp
1fea0     10 4F 85 F1 | 	sub	fp, #272
1fea4     0C 00 90 FD | 	jmp	#LR__2805
1fea8                 | LR__2804
1fea8     10 4F 05 F1 | 	add	fp, #272
1feac     A7 02 68 FC | 	wrlong	#1, fp
1feb0     10 4F 85 F1 | 	sub	fp, #272
1feb4                 | LR__2805
1feb4                 | LR__2806
1feb4     08 4E 05 F1 | 	add	fp, #8
1feb8     A7 1E 02 FB | 	rdlong	local01, fp
1febc     1A 1E 46 F0 | 	shr	local01, #26
1fec0     03 1E 06 F5 | 	and	local01, #3
1fec4     5C 4E 05 F1 | 	add	fp, #92
1fec8     A7 1E 62 FC | 	wrlong	local01, fp
1fecc     58 4E 85 F1 | 	sub	fp, #88
1fed0     A7 FA 01 FB | 	rdlong	result1, fp
1fed4     0C 4E 85 F1 | 	sub	fp, #12
1fed8     1F FA 4D F0 | 	shr	result1, #31 wz
1fedc     20 00 90 AD |  if_e	jmp	#LR__2807
1fee0     2C 4E 05 F1 | 	add	fp, #44
1fee4     A7 5A 68 FC | 	wrlong	#45, fp
1fee8     20 4E 85 F1 | 	sub	fp, #32
1feec     A7 FA 01 FB | 	rdlong	result1, fp
1fef0     1F FA E5 F4 | 	bitnot	result1, #31
1fef4     A7 FA 61 FC | 	wrlong	result1, fp
1fef8     0C 4E 85 F1 | 	sub	fp, #12
1fefc     3C 00 90 FD | 	jmp	#LR__2809
1ff00                 | LR__2807
1ff00     64 4E 05 F1 | 	add	fp, #100
1ff04     A7 1E 02 FB | 	rdlong	local01, fp
1ff08     64 4E 85 F1 | 	sub	fp, #100
1ff0c     01 1E 0E F2 | 	cmp	local01, #1 wz
1ff10     2C 4E 05 A1 |  if_e	add	fp, #44
1ff14     A7 56 68 AC |  if_e	wrlong	#43, fp
1ff18     2C 4E 85 A1 |  if_e	sub	fp, #44
1ff1c     1C 00 90 AD |  if_e	jmp	#LR__2808
1ff20     64 4E 05 F1 | 	add	fp, #100
1ff24     A7 1E 02 FB | 	rdlong	local01, fp
1ff28     64 4E 85 F1 | 	sub	fp, #100
1ff2c     02 1E 0E F2 | 	cmp	local01, #2 wz
1ff30     2C 4E 05 A1 |  if_e	add	fp, #44
1ff34     A7 40 68 AC |  if_e	wrlong	#32, fp
1ff38     2C 4E 85 A1 |  if_e	sub	fp, #44
1ff3c                 | LR__2808
1ff3c                 | LR__2809
1ff3c     08 4E 05 F1 | 	add	fp, #8
1ff40     A7 1E 02 FB | 	rdlong	local01, fp
1ff44     18 1E 46 F0 | 	shr	local01, #24
1ff48     03 1E 06 F5 | 	and	local01, #3
1ff4c     3C 4E 05 F1 | 	add	fp, #60
1ff50     A7 1E 62 FC | 	wrlong	local01, fp
1ff54     00 1E 06 F6 | 	mov	local01, #0
1ff58     18 4E 85 F1 | 	sub	fp, #24
1ff5c     A7 22 0A FB | 	rdlong	local03, fp wz
1ff60     2C 4E 85 F1 | 	sub	fp, #44
1ff64     18 00 90 5D |  if_ne	jmp	#LR__2810
1ff68     1C 4E 05 F1 | 	add	fp, #28
1ff6c     A7 24 02 FB | 	rdlong	local04, fp
1ff70     1C 4E 85 F1 | 	sub	fp, #28
1ff74     12 27 02 F6 | 	mov	local05, local04
1ff78     0A 26 0E F2 | 	cmp	local05, #10 wz
1ff7c     04 00 90 AD |  if_e	jmp	#LR__2811
1ff80                 | LR__2810
1ff80     01 1E 66 F5 | 	xor	local01, #1
1ff84                 | LR__2811
1ff84     3C 4E 05 F1 | 	add	fp, #60
1ff88     A7 1E 62 FC | 	wrlong	local01, fp
1ff8c     3C 4E 85 F1 | 	sub	fp, #60
1ff90     00 1E 0E F2 | 	cmp	local01, #0 wz
1ff94     0C 01 90 AD |  if_e	jmp	#LR__2813
1ff98     44 4E 05 F1 | 	add	fp, #68
1ff9c     A7 26 02 FB | 	rdlong	local05, fp
1ffa0     44 4E 85 F1 | 	sub	fp, #68
1ffa4     13 23 02 F6 | 	mov	local03, local05
1ffa8     02 22 0E F2 | 	cmp	local03, #2 wz
1ffac     F4 00 90 5D |  if_ne	jmp	#LR__2813
1ffb0     0C 4F 05 F1 | 	add	fp, #268
1ffb4     A7 28 02 FB | 	rdlong	local06, fp
1ffb8     0C 4F 85 F1 | 	sub	fp, #268
1ffbc     14 25 02 F6 | 	mov	local04, local06
1ffc0     02 24 0E F2 | 	cmp	local04, #2 wz
1ffc4     DC 00 90 AD |  if_e	jmp	#LR__2813
1ffc8     C0 4E 05 F1 | 	add	fp, #192
1ffcc     A7 12 02 FB | 	rdlong	arg01, fp
1ffd0     94 4E 85 F1 | 	sub	fp, #148
1ffd4     A7 14 02 FB | 	rdlong	arg02, fp
1ffd8     14 4E 05 F1 | 	add	fp, #20
1ffdc     A7 16 02 FB | 	rdlong	arg03, fp
1ffe0     40 4E 85 F1 | 	sub	fp, #64
1ffe4     30 44 B0 FD | 	call	#__system__emitsign_0444
1ffe8     14 4F 05 F1 | 	add	fp, #276
1ffec     A7 FA 61 FC | 	wrlong	result1, fp
1fff0     14 4F 85 F1 | 	sub	fp, #276
1fff4     00 FA 55 F2 | 	cmps	result1, #0 wc
1fff8     14 4F 05 C1 |  if_b	add	fp, #276
1fffc     A7 FA 01 CB |  if_b	rdlong	result1, fp
20000     14 4F 85 C1 |  if_b	sub	fp, #276
20004     6C 0B 90 CD |  if_b	jmp	#LR__2863
20008     C0 4E 05 F1 | 	add	fp, #192
2000c     A7 1E 02 FB | 	rdlong	local01, fp
20010     54 4E 05 F1 | 	add	fp, #84
20014     A7 26 02 FB | 	rdlong	local05, fp
20018     13 23 02 F6 | 	mov	local03, local05
2001c     13 1F 02 F1 | 	add	local01, local05
20020     54 4E 85 F1 | 	sub	fp, #84
20024     A7 1E 62 FC | 	wrlong	local01, fp
20028     58 4E 85 F1 | 	sub	fp, #88
2002c     A7 1E 0A FB | 	rdlong	local01, fp wz
20030     68 4E 85 F1 | 	sub	fp, #104
20034     60 00 90 AD |  if_e	jmp	#LR__2812
20038     68 4E 05 F1 | 	add	fp, #104
2003c     A7 1E 02 FB | 	rdlong	local01, fp
20040     AC 4E 05 F1 | 	add	fp, #172
20044     A7 22 02 FB | 	rdlong	local03, fp
20048     11 1F 82 F1 | 	sub	local01, local03
2004c     AC 4E 85 F1 | 	sub	fp, #172
20050     A7 1E 62 FC | 	wrlong	local01, fp
20054     68 4E 85 F1 | 	sub	fp, #104
20058     00 1E 56 F2 | 	cmps	local01, #0 wc
2005c     68 4E 05 C1 |  if_b	add	fp, #104
20060     A7 00 68 CC |  if_b	wrlong	#0, fp
20064     68 4E 85 C1 |  if_b	sub	fp, #104
20068     08 4E 05 F1 | 	add	fp, #8
2006c     A7 1E 02 FB | 	rdlong	local01, fp
20070     E8 1E 06 F4 | 	bitl	local01, #232
20074     A7 1E 62 FC | 	wrlong	local01, fp
20078     60 4E 05 F1 | 	add	fp, #96
2007c     A7 26 02 FB | 	rdlong	local05, fp
20080     13 23 02 F6 | 	mov	local03, local05
20084     08 22 66 F0 | 	shl	local03, #8
20088     11 1F 42 F5 | 	or	local01, local03
2008c     60 4E 85 F1 | 	sub	fp, #96
20090     A7 1E 62 FC | 	wrlong	local01, fp
20094     08 4E 85 F1 | 	sub	fp, #8
20098                 | LR__2812
20098     3C 4E 05 F1 | 	add	fp, #60
2009c     A7 00 68 FC | 	wrlong	#0, fp
200a0     3C 4E 85 F1 | 	sub	fp, #60
200a4                 | LR__2813
200a4     0C 4E 05 F1 | 	add	fp, #12
200a8     A7 12 02 FB | 	rdlong	arg01, fp
200ac     0C 4E 85 F1 | 	sub	fp, #12
200b0     04 1F B0 FD | 	call	#__system____builtin_ilogb
200b4     FF FF 3F FF 
200b8     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
200bc     50 00 90 5D |  if_ne	jmp	#LR__2815
200c0     2C 4E 05 F1 | 	add	fp, #44
200c4     A7 1E 0A FB | 	rdlong	local01, fp wz
200c8     2C 4E 85 F1 | 	sub	fp, #44
200cc     24 00 90 AD |  if_e	jmp	#LR__2814
200d0     C0 4E 05 F1 | 	add	fp, #192
200d4     A7 20 02 FB | 	rdlong	local02, fp
200d8     10 23 02 F6 | 	mov	local03, local02
200dc     01 22 06 F1 | 	add	local03, #1
200e0     A7 22 62 FC | 	wrlong	local03, fp
200e4     94 4E 85 F1 | 	sub	fp, #148
200e8     A7 24 02 FB | 	rdlong	local04, fp
200ec     2C 4E 85 F1 | 	sub	fp, #44
200f0     10 25 42 FC | 	wrbyte	local04, local02
200f4                 | LR__2814
200f4     C0 4E 05 F1 | 	add	fp, #192
200f8     A7 12 02 FB | 	rdlong	arg01, fp
200fc     C0 4E 85 F1 | 	sub	fp, #192
20100     70 01 00 FF 
20104     EE 14 06 F6 | 	mov	arg02, ##@LR__4751
20108     E0 E9 BF FD | 	call	#__system____builtin_strcpy
2010c     A4 08 90 FD | 	jmp	#LR__2851
20110                 | LR__2815
20110     0C 4E 05 F1 | 	add	fp, #12
20114     A7 20 02 FB | 	rdlong	local02, fp
20118     0C 4E 85 F1 | 	sub	fp, #12
2011c     10 13 02 F6 | 	mov	arg01, local02
20120     94 1E B0 FD | 	call	#__system____builtin_ilogb
20124     00 00 40 FF 
20128     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
2012c     50 00 90 5D |  if_ne	jmp	#LR__2817
20130     2C 4E 05 F1 | 	add	fp, #44
20134     A7 1E 0A FB | 	rdlong	local01, fp wz
20138     2C 4E 85 F1 | 	sub	fp, #44
2013c     24 00 90 AD |  if_e	jmp	#LR__2816
20140     C0 4E 05 F1 | 	add	fp, #192
20144     A7 20 02 FB | 	rdlong	local02, fp
20148     10 23 02 F6 | 	mov	local03, local02
2014c     01 22 06 F1 | 	add	local03, #1
20150     A7 22 62 FC | 	wrlong	local03, fp
20154     94 4E 85 F1 | 	sub	fp, #148
20158     A7 24 02 FB | 	rdlong	local04, fp
2015c     2C 4E 85 F1 | 	sub	fp, #44
20160     10 25 42 FC | 	wrbyte	local04, local02
20164                 | LR__2816
20164     C0 4E 05 F1 | 	add	fp, #192
20168     A7 12 02 FB | 	rdlong	arg01, fp
2016c     C0 4E 85 F1 | 	sub	fp, #192
20170     70 01 00 FF 
20174     F2 14 06 F6 | 	mov	arg02, ##@LR__4752
20178     70 E9 BF FD | 	call	#__system____builtin_strcpy
2017c     34 08 90 FD | 	jmp	#LR__2851
20180                 | LR__2817
20180     10 4E 05 F1 | 	add	fp, #16
20184     A7 1E 02 FB | 	rdlong	local01, fp
20188     10 4E 85 F1 | 	sub	fp, #16
2018c     67 1E 0E F2 | 	cmp	local01, #103 wz
20190     10 4E 05 51 |  if_ne	add	fp, #16
20194     A7 22 02 5B |  if_ne	rdlong	local03, fp
20198     10 4E 85 51 |  if_ne	sub	fp, #16
2019c     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
201a0     94 01 90 5D |  if_ne	jmp	#LR__2822
201a4     0C 4E 05 F1 | 	add	fp, #12
201a8     A7 12 02 FB | 	rdlong	arg01, fp
201ac     08 4E 05 F1 | 	add	fp, #8
201b0     A7 14 02 F6 | 	mov	arg02, fp
201b4     0C 4E 05 F1 | 	add	fp, #12
201b8     A7 16 02 F6 | 	mov	arg03, fp
201bc     98 4E 05 F1 | 	add	fp, #152
201c0     A7 18 02 FB | 	rdlong	arg04, fp
201c4     9C 4E 85 F1 | 	sub	fp, #156
201c8     A7 1A 02 FB | 	rdlong	arg05, fp
201cc     1C 4E 85 F1 | 	sub	fp, #28
201d0     50 40 B0 FD | 	call	#__system__disassemble_0442
201d4     10 4E 05 F1 | 	add	fp, #16
201d8     A7 1E 02 FB | 	rdlong	local01, fp
201dc     10 4E 85 F1 | 	sub	fp, #16
201e0     23 1E 0E F2 | 	cmp	local01, #35 wz
201e4     A0 00 90 5D |  if_ne	jmp	#LR__2819
201e8     20 4E 05 F1 | 	add	fp, #32
201ec     A7 1E 02 FB | 	rdlong	local01, fp
201f0     98 4E 05 F1 | 	add	fp, #152
201f4     A7 22 02 FB | 	rdlong	local03, fp
201f8     B8 4E 85 F1 | 	sub	fp, #184
201fc     11 1F 5A F2 | 	cmps	local01, local03 wcz
20200     24 4E 05 11 |  if_a	add	fp, #36
20204     A7 02 68 1C |  if_a	wrlong	#1, fp
20208     24 4E 85 11 |  if_a	sub	fp, #36
2020c     A4 01 90 1D |  if_a	jmp	#LR__2825
20210     20 4E 05 F1 | 	add	fp, #32
20214     A7 1E 02 FB | 	rdlong	local01, fp
20218     20 4E 85 F1 | 	sub	fp, #32
2021c     00 1E 56 F2 | 	cmps	local01, #0 wc
20220     2C 00 90 3D |  if_ae	jmp	#LR__2818
20224     B8 4E 05 F1 | 	add	fp, #184
20228     A7 1E 02 FB | 	rdlong	local01, fp
2022c     0F 1F 62 F6 | 	neg	local01, local01
20230     98 4E 85 F1 | 	sub	fp, #152
20234     A7 22 02 FB | 	rdlong	local03, fp
20238     20 4E 85 F1 | 	sub	fp, #32
2023c     0F 23 5A F2 | 	cmps	local03, local01 wcz
20240     24 4E 05 E1 |  if_be	add	fp, #36
20244     A7 02 68 EC |  if_be	wrlong	#1, fp
20248     24 4E 85 E1 |  if_be	sub	fp, #36
2024c     64 01 90 FD | 	jmp	#LR__2825
20250                 | LR__2818
20250     20 4E 05 F1 | 	add	fp, #32
20254     A7 1E 02 FB | 	rdlong	local01, fp
20258     20 4E 85 F1 | 	sub	fp, #32
2025c     01 1E 56 F2 | 	cmps	local01, #1 wc
20260     50 01 90 CD |  if_b	jmp	#LR__2825
20264     B8 4E 05 F1 | 	add	fp, #184
20268     A7 1E 02 FB | 	rdlong	local01, fp
2026c     98 4E 85 F1 | 	sub	fp, #152
20270     A7 22 02 FB | 	rdlong	local03, fp
20274     11 1F 82 F1 | 	sub	local01, local03
20278     98 4E 05 F1 | 	add	fp, #152
2027c     A7 1E 62 FC | 	wrlong	local01, fp
20280     B8 4E 85 F1 | 	sub	fp, #184
20284     2C 01 90 FD | 	jmp	#LR__2825
20288                 | LR__2819
20288     00 1E 06 F6 | 	mov	local01, #0
2028c     08 4E 05 F1 | 	add	fp, #8
20290     A7 20 02 FB | 	rdlong	local02, fp
20294     1C 20 46 F0 | 	shr	local02, #28
20298     01 20 0E F5 | 	and	local02, #1 wz
2029c     01 1E 06 A6 |  if_e	mov	local01, #1
202a0     2C 4E 05 F1 | 	add	fp, #44
202a4     A7 1E 62 FC | 	wrlong	local01, fp
202a8     14 4E 85 F1 | 	sub	fp, #20
202ac     A7 1E 02 FB | 	rdlong	local01, fp
202b0     98 4E 05 F1 | 	add	fp, #152
202b4     A7 22 02 FB | 	rdlong	local03, fp
202b8     B8 4E 85 F1 | 	sub	fp, #184
202bc     11 1F 52 F2 | 	cmps	local01, local03 wc
202c0     18 00 90 3D |  if_ae	jmp	#LR__2820
202c4     20 4E 05 F1 | 	add	fp, #32
202c8     A7 24 02 FB | 	rdlong	local04, fp
202cc     20 4E 85 F1 | 	sub	fp, #32
202d0     FF FF 7F FF 
202d4     FC 25 56 F2 | 	cmps	local04, ##-4 wc
202d8     10 00 90 3D |  if_ae	jmp	#LR__2821
202dc                 | LR__2820
202dc     24 4E 05 F1 | 	add	fp, #36
202e0     A7 02 68 FC | 	wrlong	#1, fp
202e4     24 4E 85 F1 | 	sub	fp, #36
202e8     C8 00 90 FD | 	jmp	#LR__2825
202ec                 | LR__2821
202ec     B8 4E 05 F1 | 	add	fp, #184
202f0     A7 24 02 FB | 	rdlong	local04, fp
202f4     98 4E 85 F1 | 	sub	fp, #152
202f8     A7 22 02 FB | 	rdlong	local03, fp
202fc     11 25 82 F1 | 	sub	local04, local03
20300     98 4E 05 F1 | 	add	fp, #152
20304     A7 24 62 FC | 	wrlong	local04, fp
20308     AC 4E 85 F1 | 	sub	fp, #172
2030c     A7 12 02 FB | 	rdlong	arg01, fp
20310     08 4E 05 F1 | 	add	fp, #8
20314     A7 14 02 F6 | 	mov	arg02, fp
20318     0C 4E 05 F1 | 	add	fp, #12
2031c     A7 16 02 F6 | 	mov	arg03, fp
20320     12 19 62 F6 | 	neg	arg04, local04
20324     04 4E 85 F1 | 	sub	fp, #4
20328     A7 1A 02 FB | 	rdlong	arg05, fp
2032c     1C 4E 85 F1 | 	sub	fp, #28
20330     F0 3E B0 FD | 	call	#__system__disassemble_0442
20334     7C 00 90 FD | 	jmp	#LR__2825
20338                 | LR__2822
20338     24 4E 05 F1 | 	add	fp, #36
2033c     A7 1E 0A FB | 	rdlong	local01, fp wz
20340     24 4E 85 F1 | 	sub	fp, #36
20344     34 00 90 AD |  if_e	jmp	#LR__2823
20348     0C 4E 05 F1 | 	add	fp, #12
2034c     A7 12 02 FB | 	rdlong	arg01, fp
20350     08 4E 05 F1 | 	add	fp, #8
20354     A7 14 02 F6 | 	mov	arg02, fp
20358     0C 4E 05 F1 | 	add	fp, #12
2035c     A7 16 02 F6 | 	mov	arg03, fp
20360     98 4E 05 F1 | 	add	fp, #152
20364     A7 18 02 FB | 	rdlong	arg04, fp
20368     9C 4E 85 F1 | 	sub	fp, #156
2036c     A7 1A 02 FB | 	rdlong	arg05, fp
20370     1C 4E 85 F1 | 	sub	fp, #28
20374     AC 3E B0 FD | 	call	#__system__disassemble_0442
20378     38 00 90 FD | 	jmp	#LR__2824
2037c                 | LR__2823
2037c     0C 4E 05 F1 | 	add	fp, #12
20380     A7 12 02 FB | 	rdlong	arg01, fp
20384     08 4E 05 F1 | 	add	fp, #8
20388     A7 14 02 F6 | 	mov	arg02, fp
2038c     0C 4E 05 F1 | 	add	fp, #12
20390     A7 16 02 F6 | 	mov	arg03, fp
20394     98 4E 05 F1 | 	add	fp, #152
20398     A7 24 02 FB | 	rdlong	local04, fp
2039c     01 24 06 F1 | 	add	local04, #1
203a0     12 19 62 F6 | 	neg	arg04, local04
203a4     9C 4E 85 F1 | 	sub	fp, #156
203a8     A7 1A 02 FB | 	rdlong	arg05, fp
203ac     1C 4E 85 F1 | 	sub	fp, #28
203b0     70 3E B0 FD | 	call	#__system__disassemble_0442
203b4                 | LR__2824
203b4                 | LR__2825
203b4     1C 4E 05 F1 | 	add	fp, #28
203b8     A7 1E 02 FB | 	rdlong	local01, fp
203bc     1C 4E 85 F1 | 	sub	fp, #28
203c0     02 1E 0E F2 | 	cmp	local01, #2 wz
203c4     4C 00 90 5D |  if_ne	jmp	#LR__2828
203c8     1C 4E 05 F1 | 	add	fp, #28
203cc     A7 20 68 FC | 	wrlong	#16, fp
203d0     1C 4E 85 F1 | 	sub	fp, #28
203d4                 | LR__2826
203d4     14 4E 05 F1 | 	add	fp, #20
203d8     A7 1E 0A FB | 	rdlong	local01, fp wz
203dc     14 4E 85 F1 | 	sub	fp, #20
203e0     30 00 90 AD |  if_e	jmp	#LR__2827
203e4     14 4E 05 F1 | 	add	fp, #20
203e8     A7 22 02 FB | 	rdlong	local03, fp
203ec     14 4E 85 F1 | 	sub	fp, #20
203f0     00 80 00 FF 
203f4     00 22 16 F2 | 	cmp	local03, ##16777216 wc
203f8     18 00 90 3D |  if_ae	jmp	#LR__2827
203fc     14 4E 05 F1 | 	add	fp, #20
20400     A7 1E 02 FB | 	rdlong	local01, fp
20404     01 1E 66 F0 | 	shl	local01, #1
20408     A7 1E 62 FC | 	wrlong	local01, fp
2040c     14 4E 85 F1 | 	sub	fp, #20
20410     C0 FF 9F FD | 	jmp	#LR__2826
20414                 | LR__2827
20414                 | LR__2828
20414     70 4E 05 F1 | 	add	fp, #112
20418     A7 12 02 F6 | 	mov	arg01, fp
2041c     5C 4E 85 F1 | 	sub	fp, #92
20420     A7 14 02 FB | 	rdlong	arg02, fp
20424     08 4E 05 F1 | 	add	fp, #8
20428     A7 16 02 FB | 	rdlong	arg03, fp
2042c     A0 4E 05 F1 | 	add	fp, #160
20430     A7 1A 02 FB | 	rdlong	arg05, fp
20434     BC 4E 85 F1 | 	sub	fp, #188
20438     01 18 06 F6 | 	mov	arg04, #1
2043c     70 3D B0 FD | 	call	#__system___uitoa
20440     58 4E 05 F1 | 	add	fp, #88
20444     A7 FA 61 FC | 	wrlong	result1, fp
20448     38 4E 85 F1 | 	sub	fp, #56
2044c     A7 1E 02 FB | 	rdlong	local01, fp
20450     20 4E 85 F1 | 	sub	fp, #32
20454     00 1E 56 F2 | 	cmps	local01, #0 wc
20458     50 00 90 3D |  if_ae	jmp	#LR__2829
2045c     60 4E 05 F1 | 	add	fp, #96
20460     A7 5A 68 FC | 	wrlong	#45, fp
20464     50 4E 05 F1 | 	add	fp, #80
20468     A7 12 02 F6 | 	mov	arg01, fp
2046c     90 4E 85 F1 | 	sub	fp, #144
20470     A7 22 02 FB | 	rdlong	local03, fp
20474     11 15 62 F6 | 	neg	arg02, local03
20478     18 4E 05 F1 | 	add	fp, #24
2047c     A7 18 02 FB | 	rdlong	arg04, fp
20480     84 4E 05 F1 | 	add	fp, #132
20484     A7 28 02 FB | 	rdlong	local06, fp
20488     BC 4E 85 F1 | 	sub	fp, #188
2048c     14 25 02 F6 | 	mov	local04, local06
20490     0A 16 06 F6 | 	mov	arg03, #10
20494     12 1B 02 F6 | 	mov	arg05, local04
20498     14 3D B0 FD | 	call	#__system___uitoa
2049c     5C 4E 05 F1 | 	add	fp, #92
204a0     A7 FA 61 FC | 	wrlong	result1, fp
204a4     5C 4E 85 F1 | 	sub	fp, #92
204a8     48 00 90 FD | 	jmp	#LR__2830
204ac                 | LR__2829
204ac     60 4E 05 F1 | 	add	fp, #96
204b0     A7 56 68 FC | 	wrlong	#43, fp
204b4     50 4E 05 F1 | 	add	fp, #80
204b8     A7 12 02 F6 | 	mov	arg01, fp
204bc     90 4E 85 F1 | 	sub	fp, #144
204c0     A7 14 02 FB | 	rdlong	arg02, fp
204c4     18 4E 05 F1 | 	add	fp, #24
204c8     A7 18 02 FB | 	rdlong	arg04, fp
204cc     84 4E 05 F1 | 	add	fp, #132
204d0     A7 28 02 FB | 	rdlong	local06, fp
204d4     BC 4E 85 F1 | 	sub	fp, #188
204d8     14 25 02 F6 | 	mov	local04, local06
204dc     0A 16 06 F6 | 	mov	arg03, #10
204e0     12 1B 02 F6 | 	mov	arg05, local04
204e4     C8 3C B0 FD | 	call	#__system___uitoa
204e8     5C 4E 05 F1 | 	add	fp, #92
204ec     A7 FA 61 FC | 	wrlong	result1, fp
204f0     5C 4E 85 F1 | 	sub	fp, #92
204f4                 | LR__2830
204f4     24 4E 05 F1 | 	add	fp, #36
204f8     A7 1E 0A FB | 	rdlong	local01, fp wz
204fc     24 4E 85 F1 | 	sub	fp, #36
20500     2C 00 90 AD |  if_e	jmp	#LR__2831
20504     50 4E 05 F1 | 	add	fp, #80
20508     A7 00 68 FC | 	wrlong	#0, fp
2050c     04 4E 85 F1 | 	sub	fp, #4
20510     A7 00 68 FC | 	wrlong	#0, fp
20514     6C 4E 05 F1 | 	add	fp, #108
20518     A7 1E 02 FB | 	rdlong	local01, fp
2051c     01 1E 06 F1 | 	add	local01, #1
20520     64 4E 85 F1 | 	sub	fp, #100
20524     A7 1E 62 FC | 	wrlong	local01, fp
20528     54 4E 85 F1 | 	sub	fp, #84
2052c     88 00 90 FD | 	jmp	#LR__2834
20530                 | LR__2831
20530     20 4E 05 F1 | 	add	fp, #32
20534     A7 1E 02 FB | 	rdlong	local01, fp
20538     20 4E 85 F1 | 	sub	fp, #32
2053c     00 1E 56 F2 | 	cmps	local01, #0 wc
20540     40 00 90 3D |  if_ae	jmp	#LR__2832
20544     20 4E 05 F1 | 	add	fp, #32
20548     A7 20 02 FB | 	rdlong	local02, fp
2054c     30 4E 05 F1 | 	add	fp, #48
20550     A7 20 62 FC | 	wrlong	local02, fp
20554     04 4E 85 F1 | 	sub	fp, #4
20558     A7 20 62 FC | 	wrlong	local02, fp
2055c     2C 4E 85 F1 | 	sub	fp, #44
20560     A7 1E 02 FB | 	rdlong	local01, fp
20564     98 4E 05 F1 | 	add	fp, #152
20568     A7 22 02 FB | 	rdlong	local03, fp
2056c     11 1F 02 F1 | 	add	local01, local03
20570     01 1E 06 F1 | 	add	local01, #1
20574     64 4E 85 F1 | 	sub	fp, #100
20578     A7 1E 62 FC | 	wrlong	local01, fp
2057c     54 4E 85 F1 | 	sub	fp, #84
20580     34 00 90 FD | 	jmp	#LR__2833
20584                 | LR__2832
20584     4C 4E 05 F1 | 	add	fp, #76
20588     A7 00 68 FC | 	wrlong	#0, fp
2058c     2C 4E 85 F1 | 	sub	fp, #44
20590     A7 1E 02 FB | 	rdlong	local01, fp
20594     30 4E 05 F1 | 	add	fp, #48
20598     A7 1E 62 FC | 	wrlong	local01, fp
2059c     68 4E 05 F1 | 	add	fp, #104
205a0     A7 22 02 FB | 	rdlong	local03, fp
205a4     11 1F 02 F1 | 	add	local01, local03
205a8     01 1E 06 F1 | 	add	local01, #1
205ac     64 4E 85 F1 | 	sub	fp, #100
205b0     A7 1E 62 FC | 	wrlong	local01, fp
205b4     54 4E 85 F1 | 	sub	fp, #84
205b8                 | LR__2833
205b8                 | LR__2834
205b8     54 4E 05 F1 | 	add	fp, #84
205bc     A7 1E 02 FB | 	rdlong	local01, fp
205c0     08 4E 85 F1 | 	sub	fp, #8
205c4     A7 22 02 FB | 	rdlong	local03, fp
205c8     11 1F 82 F1 | 	sub	local01, local03
205cc     01 1E 06 F1 | 	add	local01, #1
205d0     24 4E 85 F1 | 	sub	fp, #36
205d4     A7 1E 62 FC | 	wrlong	local01, fp
205d8     04 4E 05 F1 | 	add	fp, #4
205dc     A7 1E 0A FB | 	rdlong	local01, fp wz
205e0     2C 4E 85 F1 | 	sub	fp, #44
205e4     28 4E 05 51 |  if_ne	add	fp, #40
205e8     A7 22 02 5B |  if_ne	rdlong	local03, fp
205ec     01 22 06 51 |  if_ne	add	local03, #1
205f0     A7 22 62 5C |  if_ne	wrlong	local03, fp
205f4     28 4E 85 51 |  if_ne	sub	fp, #40
205f8     1C 4E 05 F1 | 	add	fp, #28
205fc     A7 1E 02 FB | 	rdlong	local01, fp
20600     1C 4E 85 F1 | 	sub	fp, #28
20604     10 1E 0E F2 | 	cmp	local01, #16 wz
20608     28 4E 05 A1 |  if_e	add	fp, #40
2060c     A7 1E 02 AB |  if_e	rdlong	local01, fp
20610     02 1E 06 A1 |  if_e	add	local01, #2
20614     A7 1E 62 AC |  if_e	wrlong	local01, fp
20618     28 4E 85 A1 |  if_e	sub	fp, #40
2061c     24 4E 05 F1 | 	add	fp, #36
20620     A7 1E 0A FB | 	rdlong	local01, fp wz
20624     24 4E 85 F1 | 	sub	fp, #36
20628     28 00 90 AD |  if_e	jmp	#LR__2835
2062c     28 4E 05 F1 | 	add	fp, #40
20630     A7 1E 02 FB | 	rdlong	local01, fp
20634     02 22 06 F6 | 	mov	local03, #2
20638     34 4E 05 F1 | 	add	fp, #52
2063c     A7 26 02 FB | 	rdlong	local05, fp
20640     13 23 02 F1 | 	add	local03, local05
20644     11 1F 02 F1 | 	add	local01, local03
20648     34 4E 85 F1 | 	sub	fp, #52
2064c     A7 1E 62 FC | 	wrlong	local01, fp
20650     28 4E 85 F1 | 	sub	fp, #40
20654                 | LR__2835
20654     28 4E 05 F1 | 	add	fp, #40
20658     A7 1E 02 FB | 	rdlong	local01, fp
2065c     28 4E 85 F1 | 	sub	fp, #40
20660     41 1E 56 F2 | 	cmps	local01, #65 wc
20664     01 FA 65 36 |  if_ae	neg	result1, #1
20668     08 05 90 3D |  if_ae	jmp	#LR__2863
2066c     3C 4E 05 F1 | 	add	fp, #60
20670     A7 1E 0A FB | 	rdlong	local01, fp wz
20674     3C 4E 85 F1 | 	sub	fp, #60
20678     60 00 90 AD |  if_e	jmp	#LR__2836
2067c     C0 4E 05 F1 | 	add	fp, #192
20680     A7 12 02 FB | 	rdlong	arg01, fp
20684     94 4E 85 F1 | 	sub	fp, #148
20688     A7 14 02 FB | 	rdlong	arg02, fp
2068c     14 4E 05 F1 | 	add	fp, #20
20690     A7 16 02 FB | 	rdlong	arg03, fp
20694     40 4E 85 F1 | 	sub	fp, #64
20698     7C 3D B0 FD | 	call	#__system__emitsign_0444
2069c     18 4F 05 F1 | 	add	fp, #280
206a0     A7 FA 61 FC | 	wrlong	result1, fp
206a4     18 4F 85 F1 | 	sub	fp, #280
206a8     00 FA 55 F2 | 	cmps	result1, #0 wc
206ac     18 4F 05 C1 |  if_b	add	fp, #280
206b0     A7 FA 01 CB |  if_b	rdlong	result1, fp
206b4     18 4F 85 C1 |  if_b	sub	fp, #280
206b8     B8 04 90 CD |  if_b	jmp	#LR__2863
206bc     C0 4E 05 F1 | 	add	fp, #192
206c0     A7 1E 02 FB | 	rdlong	local01, fp
206c4     58 4E 05 F1 | 	add	fp, #88
206c8     A7 22 02 FB | 	rdlong	local03, fp
206cc     11 1F 02 F1 | 	add	local01, local03
206d0     58 4E 85 F1 | 	sub	fp, #88
206d4     A7 1E 62 FC | 	wrlong	local01, fp
206d8     C0 4E 85 F1 | 	sub	fp, #192
206dc                 | LR__2836
206dc     4C 4E 05 F1 | 	add	fp, #76
206e0     A7 1E 02 FB | 	rdlong	local01, fp
206e4     34 4E 85 F1 | 	sub	fp, #52
206e8     A7 1E 62 FC | 	wrlong	local01, fp
206ec     18 4E 85 F1 | 	sub	fp, #24
206f0     97 9E 48 FB | 	callpa	#(@LR__2842-@LR__2837)>>2,fcache_load_ptr_
206f4                 | LR__2837
206f4     18 4E 05 F1 | 	add	fp, #24
206f8     A7 20 02 FB | 	rdlong	local02, fp
206fc     3C 4E 05 F1 | 	add	fp, #60
20700     A7 26 02 FB | 	rdlong	local05, fp
20704     54 4E 85 F1 | 	sub	fp, #84
20708     13 21 52 F2 | 	cmps	local02, local05 wc
2070c     20 01 90 3D |  if_ae	jmp	#LR__2843
20710     18 4E 05 F1 | 	add	fp, #24
20714     A7 28 02 FB | 	rdlong	local06, fp
20718     18 4E 85 F1 | 	sub	fp, #24
2071c     00 28 56 F2 | 	cmps	local06, #0 wc
20720     58 00 90 CD |  if_b	jmp	#LR__2838
20724     18 4E 05 F1 | 	add	fp, #24
20728     A7 28 02 FB | 	rdlong	local06, fp
2072c     40 4E 05 F1 | 	add	fp, #64
20730     A7 2A 02 FB | 	rdlong	local07, fp
20734     58 4E 85 F1 | 	sub	fp, #88
20738     15 29 52 F2 | 	cmps	local06, local07 wc
2073c     3C 00 90 3D |  if_ae	jmp	#LR__2838
20740     C0 4E 05 F1 | 	add	fp, #192
20744     A7 2C 02 FB | 	rdlong	local08, fp
20748     16 2B 02 F6 | 	mov	local07, local08
2074c     01 2A 06 F1 | 	add	local07, #1
20750     A7 2A 62 FC | 	wrlong	local07, fp
20754     A8 4E 85 F1 | 	sub	fp, #168
20758     A7 2A 02 FB | 	rdlong	local07, fp
2075c     15 2F 02 F6 | 	mov	local09, local07
20760     58 4E 05 F1 | 	add	fp, #88
20764     A7 30 02 F6 | 	mov	local10, fp
20768     A7 2E 02 F1 | 	add	local09, fp
2076c     17 33 C2 FA | 	rdbyte	local11, local09
20770     16 33 42 FC | 	wrbyte	local11, local08
20774     70 4E 85 F1 | 	sub	fp, #112
20778     20 00 90 FD | 	jmp	#LR__2839
2077c                 | LR__2838
2077c     C0 4E 05 F1 | 	add	fp, #192
20780     A7 2C 02 FB | 	rdlong	local08, fp
20784     16 2F 02 F6 | 	mov	local09, local08
20788     01 2E 06 F1 | 	add	local09, #1
2078c     A7 2E 62 FC | 	wrlong	local09, fp
20790     C0 4E 85 F1 | 	sub	fp, #192
20794     30 2E 06 F6 | 	mov	local09, #48
20798     16 61 48 FC | 	wrbyte	#48, local08
2079c                 | LR__2839
2079c     18 4E 05 F1 | 	add	fp, #24
207a0     A7 28 02 FB | 	rdlong	local06, fp
207a4     38 4E 05 F1 | 	add	fp, #56
207a8     A7 34 02 FB | 	rdlong	local12, fp
207ac     50 4E 85 F1 | 	sub	fp, #80
207b0     1A 29 0A F2 | 	cmp	local06, local12 wz
207b4     5C 00 90 5D |  if_ne	jmp	#LR__2841
207b8     10 4F 05 F1 | 	add	fp, #272
207bc     A7 2A 02 FB | 	rdlong	local07, fp
207c0     10 4F 85 F1 | 	sub	fp, #272
207c4     15 2F 0A F6 | 	mov	local09, local07 wz
207c8     28 00 90 5D |  if_ne	jmp	#LR__2840
207cc     54 4E 05 F1 | 	add	fp, #84
207d0     A7 32 02 FB | 	rdlong	local11, fp
207d4     19 31 02 F6 | 	mov	local10, local11
207d8     01 30 86 F1 | 	sub	local10, #1
207dc     3C 4E 85 F1 | 	sub	fp, #60
207e0     A7 36 02 FB | 	rdlong	local13, fp
207e4     18 4E 85 F1 | 	sub	fp, #24
207e8     1B 39 02 F6 | 	mov	local14, local13
207ec     18 39 52 F2 | 	cmps	local14, local10 wc
207f0     20 00 90 3D |  if_ae	jmp	#LR__2841
207f4                 | LR__2840
207f4     C0 4E 05 F1 | 	add	fp, #192
207f8     A7 2C 02 FB | 	rdlong	local08, fp
207fc     16 35 02 F6 | 	mov	local12, local08
20800     01 34 06 F1 | 	add	local12, #1
20804     A7 34 62 FC | 	wrlong	local12, fp
20808     C0 4E 85 F1 | 	sub	fp, #192
2080c     2E 2E 06 F6 | 	mov	local09, #46
20810     16 5D 48 FC | 	wrbyte	#46, local08
20814                 | LR__2841
20814     18 4E 05 F1 | 	add	fp, #24
20818     A7 3A 02 FB | 	rdlong	local15, fp
2081c     1D 35 02 F6 | 	mov	local12, local15
20820     01 34 06 F1 | 	add	local12, #1
20824     A7 34 62 FC | 	wrlong	local12, fp
20828     18 4E 85 F1 | 	sub	fp, #24
2082c     C4 FE 9F FD | 	jmp	#LR__2837
20830                 | LR__2842
20830                 | LR__2843
20830     34 4E 05 F1 | 	add	fp, #52
20834     A7 1E 0A FB | 	rdlong	local01, fp wz
20838     34 4E 85 F1 | 	sub	fp, #52
2083c     A0 00 90 AD |  if_e	jmp	#LR__2847
20840     C0 4E 05 F1 | 	add	fp, #192
20844     A7 1E 02 FB | 	rdlong	local01, fp
20848     01 1E 86 F1 | 	sub	local01, #1
2084c     A7 1E 62 FC | 	wrlong	local01, fp
20850     C0 4E 85 F1 | 	sub	fp, #192
20854     97 26 48 FB | 	callpa	#(@LR__2845-@LR__2844)>>2,fcache_load_ptr_
20858                 | LR__2844
20858     C0 4E 05 F1 | 	add	fp, #192
2085c     A7 1E 02 FB | 	rdlong	local01, fp
20860     04 4E 05 F1 | 	add	fp, #4
20864     A7 22 02 FB | 	rdlong	local03, fp
20868     C4 4E 85 F1 | 	sub	fp, #196
2086c     11 1F 5A F2 | 	cmps	local01, local03 wcz
20870     30 00 90 ED |  if_be	jmp	#LR__2846
20874     C0 4E 05 F1 | 	add	fp, #192
20878     A7 28 02 FB | 	rdlong	local06, fp
2087c     C0 4E 85 F1 | 	sub	fp, #192
20880     14 25 C2 FA | 	rdbyte	local04, local06
20884     30 24 0E F2 | 	cmp	local04, #48 wz
20888     18 00 90 5D |  if_ne	jmp	#LR__2846
2088c     C0 4E 05 F1 | 	add	fp, #192
20890     A7 1E 02 FB | 	rdlong	local01, fp
20894     01 1E 86 F1 | 	sub	local01, #1
20898     A7 1E 62 FC | 	wrlong	local01, fp
2089c     C0 4E 85 F1 | 	sub	fp, #192
208a0     B4 FF 9F FD | 	jmp	#LR__2844
208a4                 | LR__2845
208a4                 | LR__2846
208a4     C0 4E 05 F1 | 	add	fp, #192
208a8     A7 20 02 FB | 	rdlong	local02, fp
208ac     C0 4E 85 F1 | 	sub	fp, #192
208b0     10 1F C2 FA | 	rdbyte	local01, local02
208b4     2E 1E 0E F2 | 	cmp	local01, #46 wz
208b8     C0 4E 05 A1 |  if_e	add	fp, #192
208bc     A7 1E 02 AB |  if_e	rdlong	local01, fp
208c0     01 1E 86 A1 |  if_e	sub	local01, #1
208c4     A7 1E 62 AC |  if_e	wrlong	local01, fp
208c8     C0 4E 85 A1 |  if_e	sub	fp, #192
208cc     C0 4E 05 F1 | 	add	fp, #192
208d0     A7 22 02 FB | 	rdlong	local03, fp
208d4     01 22 06 F1 | 	add	local03, #1
208d8     A7 22 62 FC | 	wrlong	local03, fp
208dc     C0 4E 85 F1 | 	sub	fp, #192
208e0                 | LR__2847
208e0     24 4E 05 F1 | 	add	fp, #36
208e4     A7 1E 0A FB | 	rdlong	local01, fp wz
208e8     24 4E 85 F1 | 	sub	fp, #36
208ec     B4 00 90 AD |  if_e	jmp	#LR__2850
208f0     C0 4E 05 F1 | 	add	fp, #192
208f4     A7 20 02 FB | 	rdlong	local02, fp
208f8     10 23 02 F6 | 	mov	local03, local02
208fc     01 22 06 F1 | 	add	local03, #1
20900     A7 22 62 FC | 	wrlong	local03, fp
20904     90 4E 85 F1 | 	sub	fp, #144
20908     A7 24 02 FB | 	rdlong	local04, fp
2090c     10 25 42 FC | 	wrbyte	local04, local02
20910     90 4E 05 F1 | 	add	fp, #144
20914     A7 20 02 FB | 	rdlong	local02, fp
20918     10 23 02 F6 | 	mov	local03, local02
2091c     01 22 06 F1 | 	add	local03, #1
20920     A7 22 62 FC | 	wrlong	local03, fp
20924     60 4E 85 F1 | 	sub	fp, #96
20928     A7 24 02 FB | 	rdlong	local04, fp
2092c     10 25 42 FC | 	wrbyte	local04, local02
20930     48 4E 85 F1 | 	sub	fp, #72
20934     A7 00 68 FC | 	wrlong	#0, fp
20938     18 4E 85 F1 | 	sub	fp, #24
2093c                 | LR__2848
2093c     18 4E 05 F1 | 	add	fp, #24
20940     A7 20 02 FB | 	rdlong	local02, fp
20944     44 4E 05 F1 | 	add	fp, #68
20948     A7 26 02 FB | 	rdlong	local05, fp
2094c     5C 4E 85 F1 | 	sub	fp, #92
20950     13 21 52 F2 | 	cmps	local02, local05 wc
20954     4C 00 90 3D |  if_ae	jmp	#LR__2849
20958     C0 4E 05 F1 | 	add	fp, #192
2095c     A7 2C 02 FB | 	rdlong	local08, fp
20960     16 35 02 F6 | 	mov	local12, local08
20964     01 34 06 F1 | 	add	local12, #1
20968     A7 34 62 FC | 	wrlong	local12, fp
2096c     A8 4E 85 F1 | 	sub	fp, #168
20970     A7 2A 02 FB | 	rdlong	local07, fp
20974     15 2F 02 F6 | 	mov	local09, local07
20978     98 4E 05 F1 | 	add	fp, #152
2097c     A7 30 02 F6 | 	mov	local10, fp
20980     A7 2E 02 F1 | 	add	local09, fp
20984     17 33 C2 FA | 	rdbyte	local11, local09
20988     16 33 42 FC | 	wrbyte	local11, local08
2098c     98 4E 85 F1 | 	sub	fp, #152
20990     A7 34 02 FB | 	rdlong	local12, fp
20994     01 34 06 F1 | 	add	local12, #1
20998     A7 34 62 FC | 	wrlong	local12, fp
2099c     18 4E 85 F1 | 	sub	fp, #24
209a0     98 FF 9F FD | 	jmp	#LR__2848
209a4                 | LR__2849
209a4                 | LR__2850
209a4     C0 4E 05 F1 | 	add	fp, #192
209a8     A7 1E 02 FB | 	rdlong	local01, fp
209ac     C0 4E 85 F1 | 	sub	fp, #192
209b0     0F 01 48 FC | 	wrbyte	#0, local01
209b4                 | LR__2851
209b4     6C 4E 05 F1 | 	add	fp, #108
209b8     A7 1E 0A FB | 	rdlong	local01, fp wz
209bc     6C 4E 85 F1 | 	sub	fp, #108
209c0     90 01 90 AD |  if_e	jmp	#LR__2862
209c4     48 4E 05 F1 | 	add	fp, #72
209c8     A7 22 0A FB | 	rdlong	local03, fp wz
209cc     48 4E 85 F1 | 	sub	fp, #72
209d0     80 01 90 AD |  if_e	jmp	#LR__2862
209d4     C4 4E 05 F1 | 	add	fp, #196
209d8     A7 12 02 FB | 	rdlong	arg01, fp
209dc     C4 4E 85 F1 | 	sub	fp, #196
209e0     09 3D 02 F6 | 	mov	local16, arg01
209e4     97 06 48 FB | 	callpa	#(@LR__2853-@LR__2852)>>2,fcache_load_ptr_
209e8                 | LR__2852
209e8     1E FB C9 FA | 	rdbyte	result1, local16 wz
209ec     01 3C 06 51 |  if_ne	add	local16, #1
209f0     F4 FF 9F 5D |  if_ne	jmp	#LR__2852
209f4                 | LR__2853
209f4     09 3D 82 F1 | 	sub	local16, arg01
209f8     1E 25 02 F6 | 	mov	local04, local16
209fc     6C 4E 05 F1 | 	add	fp, #108
20a00     A7 28 02 FB | 	rdlong	local06, fp
20a04     6C 4E 85 F1 | 	sub	fp, #108
20a08     14 25 5A F2 | 	cmps	local04, local06 wcz
20a0c     44 01 90 ED |  if_be	jmp	#LR__2862
20a10     C4 4E 05 F1 | 	add	fp, #196
20a14     A7 1E 02 FB | 	rdlong	local01, fp
20a18     5C 4E 05 F1 | 	add	fp, #92
20a1c     A7 1E 62 FC | 	wrlong	local01, fp
20a20     FC 4E 85 F1 | 	sub	fp, #252
20a24     A7 1E 0A FB | 	rdlong	local01, fp wz
20a28     24 4E 85 F1 | 	sub	fp, #36
20a2c     20 00 90 AD |  if_e	jmp	#LR__2854
20a30     B8 4E 05 F1 | 	add	fp, #184
20a34     A7 00 68 FC | 	wrlong	#0, fp
20a38     4C 4E 85 F1 | 	sub	fp, #76
20a3c     A7 1E 02 FB | 	rdlong	local01, fp
20a40     B0 4E 05 F1 | 	add	fp, #176
20a44     A7 1E 62 FC | 	wrlong	local01, fp
20a48     1C 4F 85 F1 | 	sub	fp, #284
20a4c     24 00 90 FD | 	jmp	#LR__2855
20a50                 | LR__2854
20a50     6C 4E 05 F1 | 	add	fp, #108
20a54     A7 1E 02 FB | 	rdlong	local01, fp
20a58     01 1E 86 F1 | 	sub	local01, #1
20a5c     4C 4E 05 F1 | 	add	fp, #76
20a60     A7 22 02 FB | 	rdlong	local03, fp
20a64     11 1F 82 F1 | 	sub	local01, local03
20a68     64 4E 05 F1 | 	add	fp, #100
20a6c     A7 1E 62 FC | 	wrlong	local01, fp
20a70     1C 4F 85 F1 | 	sub	fp, #284
20a74                 | LR__2855
20a74     97 20 48 FB | 	callpa	#(@LR__2857-@LR__2856)>>2,fcache_load_ptr_
20a78                 | LR__2856
20a78     1C 4F 05 F1 | 	add	fp, #284
20a7c     A7 1E 0A FB | 	rdlong	local01, fp wz
20a80     1C 4F 85 F1 | 	sub	fp, #284
20a84     30 00 90 AD |  if_e	jmp	#LR__2858
20a88     20 4F 05 F1 | 	add	fp, #288
20a8c     A7 20 02 FB | 	rdlong	local02, fp
20a90     10 23 02 F6 | 	mov	local03, local02
20a94     01 22 06 F1 | 	add	local03, #1
20a98     A7 22 62 FC | 	wrlong	local03, fp
20a9c     10 55 48 FC | 	wrbyte	#42, local02
20aa0     04 4E 85 F1 | 	sub	fp, #4
20aa4     A7 1E 02 FB | 	rdlong	local01, fp
20aa8     01 1E 86 F1 | 	sub	local01, #1
20aac     A7 1E 62 FC | 	wrlong	local01, fp
20ab0     1C 4F 85 F1 | 	sub	fp, #284
20ab4     C0 FF 9F FD | 	jmp	#LR__2856
20ab8                 | LR__2857
20ab8                 | LR__2858
20ab8     B8 4E 05 F1 | 	add	fp, #184
20abc     A7 1E 0A FB | 	rdlong	local01, fp wz
20ac0     B8 4E 85 F1 | 	sub	fp, #184
20ac4     70 00 90 AD |  if_e	jmp	#LR__2861
20ac8     20 4F 05 F1 | 	add	fp, #288
20acc     A7 20 02 FB | 	rdlong	local02, fp
20ad0     10 23 02 F6 | 	mov	local03, local02
20ad4     01 22 06 F1 | 	add	local03, #1
20ad8     A7 22 62 FC | 	wrlong	local03, fp
20adc     10 5D 48 FC | 	wrbyte	#46, local02
20ae0     04 4E 85 F1 | 	sub	fp, #4
20ae4     A7 00 68 FC | 	wrlong	#0, fp
20ae8     1C 4F 85 F1 | 	sub	fp, #284
20aec                 | LR__2859
20aec     1C 4F 05 F1 | 	add	fp, #284
20af0     A7 20 02 FB | 	rdlong	local02, fp
20af4     64 4E 85 F1 | 	sub	fp, #100
20af8     A7 26 02 FB | 	rdlong	local05, fp
20afc     B8 4E 85 F1 | 	sub	fp, #184
20b00     13 21 52 F2 | 	cmps	local02, local05 wc
20b04     30 00 90 3D |  if_ae	jmp	#LR__2860
20b08     20 4F 05 F1 | 	add	fp, #288
20b0c     A7 2C 02 FB | 	rdlong	local08, fp
20b10     16 35 02 F6 | 	mov	local12, local08
20b14     01 34 06 F1 | 	add	local12, #1
20b18     A7 34 62 FC | 	wrlong	local12, fp
20b1c     16 55 48 FC | 	wrbyte	#42, local08
20b20     04 4E 85 F1 | 	sub	fp, #4
20b24     A7 34 02 FB | 	rdlong	local12, fp
20b28     01 34 06 F1 | 	add	local12, #1
20b2c     A7 34 62 FC | 	wrlong	local12, fp
20b30     1C 4F 85 F1 | 	sub	fp, #284
20b34     B4 FF 9F FD | 	jmp	#LR__2859
20b38                 | LR__2860
20b38                 | LR__2861
20b38     20 4F 05 F1 | 	add	fp, #288
20b3c     A7 20 02 FB | 	rdlong	local02, fp
20b40     10 23 02 F6 | 	mov	local03, local02
20b44     01 22 06 F1 | 	add	local03, #1
20b48     A7 22 62 FC | 	wrlong	local03, fp
20b4c     20 4F 85 F1 | 	sub	fp, #288
20b50     10 01 48 FC | 	wrbyte	#0, local02
20b54                 | LR__2862
20b54     04 4E 05 F1 | 	add	fp, #4
20b58     A7 12 02 FB | 	rdlong	arg01, fp
20b5c     04 4E 05 F1 | 	add	fp, #4
20b60     A7 14 02 FB | 	rdlong	arg02, fp
20b64     BC 4E 05 F1 | 	add	fp, #188
20b68     A7 16 02 FB | 	rdlong	arg03, fp
20b6c     C4 4E 85 F1 | 	sub	fp, #196
20b70     C4 EE BF FD | 	call	#__system___fmtstr
20b74                 | LR__2863
20b74     A7 F0 03 F6 | 	mov	ptra, fp
20b78     B2 00 A0 FD | 	call	#popregs_
20b7c                 | __system___fmtfloat_ret
20b7c     2D 00 64 FD | 	ret
20b80                 | 
20b80                 | __system__Left_S
20b80     04 4A 05 F6 | 	mov	COUNT_, #4
20b84     A8 00 A0 FD | 	call	#pushregs_
20b88     09 1F 02 F6 | 	mov	local01, arg01
20b8c     0A 21 02 F6 | 	mov	local02, arg02
20b90     01 20 56 F2 | 	cmps	local02, #1 wc
20b94     70 01 00 CF 
20b98     F6 FA 05 C6 |  if_b	mov	result1, ##@LR__4753
20b9c     5C 00 90 CD |  if_b	jmp	#LR__2873
20ba0     0F 13 02 F6 | 	mov	arg01, local01
20ba4     09 23 02 F6 | 	mov	local03, arg01
20ba8     97 06 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
20bac                 | LR__2870
20bac     11 FB C9 FA | 	rdbyte	result1, local03 wz
20bb0     01 22 06 51 |  if_ne	add	local03, #1
20bb4     F4 FF 9F 5D |  if_ne	jmp	#LR__2870
20bb8                 | LR__2871
20bb8     09 23 82 F1 | 	sub	local03, arg01
20bbc     11 FB 01 F6 | 	mov	result1, local03
20bc0     10 FB 59 F2 | 	cmps	result1, local02 wcz
20bc4     0F FB 01 E6 |  if_be	mov	result1, local01
20bc8     30 00 90 ED |  if_be	jmp	#LR__2873
20bcc     10 13 02 F6 | 	mov	arg01, local02
20bd0     02 12 06 F1 | 	add	arg01, #2
20bd4     AC 1D B0 FD | 	call	#__system___gc_alloc_managed
20bd8     FD 24 0A F6 | 	mov	local04, result1 wz
20bdc     18 00 90 AD |  if_e	jmp	#LR__2872
20be0     12 13 02 F6 | 	mov	arg01, local04
20be4     0F 15 02 F6 | 	mov	arg02, local01
20be8     10 17 02 F6 | 	mov	arg03, local02
20bec     68 DE BF FD | 	call	#__system____builtin_memmove
20bf0     12 21 02 F1 | 	add	local02, local04
20bf4     10 01 48 FC | 	wrbyte	#0, local02
20bf8                 | LR__2872
20bf8     12 FB 01 F6 | 	mov	result1, local04
20bfc                 | LR__2873
20bfc     A7 F0 03 F6 | 	mov	ptra, fp
20c00     B2 00 A0 FD | 	call	#popregs_
20c04                 | __system__Left_S_ret
20c04     2D 00 64 FD | 	ret
20c08                 | 
20c08                 | __system__Right_S
20c08     05 4A 05 F6 | 	mov	COUNT_, #5
20c0c     A8 00 A0 FD | 	call	#pushregs_
20c10     09 1F 02 F6 | 	mov	local01, arg01
20c14     0A 21 02 F6 | 	mov	local02, arg02
20c18     01 20 56 F2 | 	cmps	local02, #1 wc
20c1c     70 01 00 CF 
20c20     F7 FA 05 C6 |  if_b	mov	result1, ##@LR__4754
20c24     64 00 90 CD |  if_b	jmp	#LR__2883
20c28     0F 13 02 F6 | 	mov	arg01, local01
20c2c     09 23 02 F6 | 	mov	local03, arg01
20c30     97 06 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
20c34                 | LR__2880
20c34     11 FB C9 FA | 	rdbyte	result1, local03 wz
20c38     01 22 06 51 |  if_ne	add	local03, #1
20c3c     F4 FF 9F 5D |  if_ne	jmp	#LR__2880
20c40                 | LR__2881
20c40     09 23 82 F1 | 	sub	local03, arg01
20c44     11 FB 01 F6 | 	mov	result1, local03
20c48     FD 24 02 F6 | 	mov	local04, result1
20c4c     10 25 5A F2 | 	cmps	local04, local02 wcz
20c50     0F FB 01 E6 |  if_be	mov	result1, local01
20c54     34 00 90 ED |  if_be	jmp	#LR__2883
20c58     10 13 02 F6 | 	mov	arg01, local02
20c5c     02 12 06 F1 | 	add	arg01, #2
20c60     20 1D B0 FD | 	call	#__system___gc_alloc_managed
20c64     FD 26 0A F6 | 	mov	local05, result1 wz
20c68     1C 00 90 AD |  if_e	jmp	#LR__2882
20c6c     10 25 82 F1 | 	sub	local04, local02
20c70     0F 25 02 F1 | 	add	local04, local01
20c74     01 20 06 F1 | 	add	local02, #1
20c78     13 13 02 F6 | 	mov	arg01, local05
20c7c     12 15 02 F6 | 	mov	arg02, local04
20c80     10 17 02 F6 | 	mov	arg03, local02
20c84     D0 DD BF FD | 	call	#__system____builtin_memmove
20c88                 | LR__2882
20c88     13 FB 01 F6 | 	mov	result1, local05
20c8c                 | LR__2883
20c8c     A7 F0 03 F6 | 	mov	ptra, fp
20c90     B2 00 A0 FD | 	call	#popregs_
20c94                 | __system__Right_S_ret
20c94     2D 00 64 FD | 	ret
20c98                 | 
20c98                 | __system__Mid_S
20c98     05 4A 05 F6 | 	mov	COUNT_, #5
20c9c     A8 00 A0 FD | 	call	#pushregs_
20ca0     09 1F 02 F6 | 	mov	local01, arg01
20ca4     0A 21 02 F6 | 	mov	local02, arg02
20ca8     01 16 56 F2 | 	cmps	arg03, #1 wc
20cac     70 01 00 CF 
20cb0     F8 FA 05 C6 |  if_b	mov	result1, ##@LR__4755
20cb4     80 00 90 CD |  if_b	jmp	#LR__2893
20cb8     01 20 86 F1 | 	sub	local02, #1
20cbc     00 20 56 F3 | 	fges	local02, #0 wc
20cc0     0F 13 02 F6 | 	mov	arg01, local01
20cc4     09 23 02 F6 | 	mov	local03, arg01
20cc8     97 06 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
20ccc                 | LR__2890
20ccc     11 FB C9 FA | 	rdbyte	result1, local03 wz
20cd0     01 22 06 51 |  if_ne	add	local03, #1
20cd4     F4 FF 9F 5D |  if_ne	jmp	#LR__2890
20cd8                 | LR__2891
20cd8     09 23 82 F1 | 	sub	local03, arg01
20cdc     11 FB 01 F6 | 	mov	result1, local03
20ce0     FD 14 02 F6 | 	mov	arg02, result1
20ce4     10 15 52 F2 | 	cmps	arg02, local02 wc
20ce8     70 01 00 CF 
20cec     F9 FA 05 C6 |  if_b	mov	result1, ##@LR__4756
20cf0     44 00 90 CD |  if_b	jmp	#LR__2893
20cf4     0A 25 02 F6 | 	mov	local04, arg02
20cf8     10 25 82 F1 | 	sub	local04, local02
20cfc     0B 25 5A F2 | 	cmps	local04, arg03 wcz
20d00     0B 25 02 16 |  if_a	mov	local04, arg03
20d04     12 13 02 F6 | 	mov	arg01, local04
20d08     02 12 06 F1 | 	add	arg01, #2
20d0c     74 1C B0 FD | 	call	#__system___gc_alloc_managed
20d10     FD 26 0A F6 | 	mov	local05, result1 wz
20d14     1C 00 90 AD |  if_e	jmp	#LR__2892
20d18     0F 21 02 F1 | 	add	local02, local01
20d1c     13 13 02 F6 | 	mov	arg01, local05
20d20     10 15 02 F6 | 	mov	arg02, local02
20d24     12 17 02 F6 | 	mov	arg03, local04
20d28     2C DD BF FD | 	call	#__system____builtin_memmove
20d2c     13 25 02 F1 | 	add	local04, local05
20d30     12 01 48 FC | 	wrbyte	#0, local04
20d34                 | LR__2892
20d34     13 FB 01 F6 | 	mov	result1, local05
20d38                 | LR__2893
20d38     A7 F0 03 F6 | 	mov	ptra, fp
20d3c     B2 00 A0 FD | 	call	#popregs_
20d40                 | __system__Mid_S_ret
20d40     2D 00 64 FD | 	ret
20d44                 | 
20d44                 | __system__Chr_S
20d44     01 4A 05 F6 | 	mov	COUNT_, #1
20d48     A8 00 A0 FD | 	call	#pushregs_
20d4c     09 1F 02 F6 | 	mov	local01, arg01
20d50     03 12 06 F6 | 	mov	arg01, #3
20d54     2C 1C B0 FD | 	call	#__system___gc_alloc_managed
20d58     00 FA 4D F2 | 	cmps	result1, #0 wz
20d5c     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
20d60     01 FA 05 51 |  if_ne	add	result1, #1
20d64     FD 00 48 5C |  if_ne	wrbyte	#0, result1
20d68     01 FA 85 51 |  if_ne	sub	result1, #1
20d6c     A7 F0 03 F6 | 	mov	ptra, fp
20d70     B2 00 A0 FD | 	call	#popregs_
20d74                 | __system__Chr_S_ret
20d74     2D 00 64 FD | 	ret
20d78                 | 
20d78                 | __system__str_S
20d78     02 4A 05 F6 | 	mov	COUNT_, #2
20d7c     A8 00 A0 FD | 	call	#pushregs_
20d80     09 1F 02 F6 | 	mov	local01, arg01
20d84     10 12 06 F6 | 	mov	arg01, #16
20d88     F8 1B B0 FD | 	call	#__system___gc_alloc_managed
20d8c     FD 20 0A F6 | 	mov	local02, result1 wz
20d90     30 00 90 AD |  if_e	jmp	#LR__2900
20d94     F8 13 02 F6 | 	mov	arg01, ptra
20d98     08 F0 07 F1 | 	add	ptra, #8
20d9c     09 21 62 FC | 	wrlong	local02, arg01
20da0     04 12 06 F1 | 	add	arg01, #4
20da4     09 01 68 FC | 	wrlong	#0, arg01
20da8     04 12 86 F1 | 	sub	arg01, #4
20dac     00 48 04 FF 
20db0     00 12 46 F5 | 	or	arg01, ##143654912
20db4     00 14 06 F6 | 	mov	arg02, #0
20db8     0F 17 02 F6 | 	mov	arg03, local01
20dbc     67 18 06 F6 | 	mov	arg04, #103
20dc0     90 EE BF FD | 	call	#__system___fmtfloat
20dc4                 | LR__2900
20dc4     10 FB 01 F6 | 	mov	result1, local02
20dc8     A7 F0 03 F6 | 	mov	ptra, fp
20dcc     B2 00 A0 FD | 	call	#popregs_
20dd0                 | __system__str_S_ret
20dd0     2D 00 64 FD | 	ret
20dd4                 | 
20dd4                 | __system__Number_S
20dd4     08 4A 05 F6 | 	mov	COUNT_, #8
20dd8     A8 00 A0 FD | 	call	#pushregs_
20ddc     09 1F 02 F6 | 	mov	local01, arg01
20de0     0A 21 0A F6 | 	mov	local02, arg02 wz
20de4     0B 23 02 F6 | 	mov	local03, arg03
20de8     3C 00 90 5D |  if_ne	jmp	#LR__2912
20dec     01 20 06 F6 | 	mov	local02, #1
20df0     11 25 02 F6 | 	mov	local04, local03
20df4     01 26 06 F6 | 	mov	local05, #1
20df8     97 16 48 FB | 	callpa	#(@LR__2911-@LR__2910)>>2,fcache_load_ptr_
20dfc                 | LR__2910
20dfc     00 28 06 F6 | 	mov	local06, #0
20e00     0F 25 1A F2 | 	cmp	local04, local01 wcz
20e04     01 28 66 E6 |  if_be	neg	local06, #1
20e08     12 27 12 F2 | 	cmp	local05, local04 wc
20e0c     15 2B A2 F1 | 	subx	local07, local07
20e10     15 29 CA F7 | 	test	local06, local07 wz
20e14     11 25 02 5D |  if_ne	qmul	local04, local03
20e18     12 27 02 56 |  if_ne	mov	local05, local04
20e1c     01 20 06 51 |  if_ne	add	local02, #1
20e20     18 24 62 5D |  if_ne	getqx	local04
20e24     D4 FF 9F 5D |  if_ne	jmp	#LR__2910
20e28                 | LR__2911
20e28                 | LR__2912
20e28     20 20 36 F3 | 	fle	local02, #32 wc
20e2c     10 13 02 F6 | 	mov	arg01, local02
20e30     02 12 06 F1 | 	add	arg01, #2
20e34     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
20e38     FD 28 02 F6 | 	mov	local06, result1
20e3c     10 2B 02 F6 | 	mov	local07, local02
20e40     14 2B 02 F1 | 	add	local07, local06
20e44     15 01 48 FC | 	wrbyte	#0, local07
20e48     97 1A 48 FB | 	callpa	#(@LR__2914-@LR__2913)>>2,fcache_load_ptr_
20e4c                 | LR__2913
20e4c     01 20 16 F2 | 	cmp	local02, #1 wc
20e50     2C 00 90 CD |  if_b	jmp	#LR__2915
20e54     11 1F 12 FD | 	qdiv	local01, local03
20e58     01 20 86 F1 | 	sub	local02, #1
20e5c     10 2B 02 F6 | 	mov	local07, local02
20e60     14 2B 02 F1 | 	add	local07, local06
20e64     19 2C 62 FD | 	getqy	local08
20e68     0A 2C 16 F2 | 	cmp	local08, #10 wc
20e6c     30 2C 06 C1 |  if_b	add	local08, #48
20e70     37 2C 06 31 |  if_ae	add	local08, #55
20e74     15 2D 42 FC | 	wrbyte	local08, local07
20e78     18 1E 62 FD | 	getqx	local01
20e7c     CC FF 9F FD | 	jmp	#LR__2913
20e80                 | LR__2914
20e80                 | LR__2915
20e80     14 FB 01 F6 | 	mov	result1, local06
20e84     A7 F0 03 F6 | 	mov	ptra, fp
20e88     B2 00 A0 FD | 	call	#popregs_
20e8c                 | __system__Number_S_ret
20e8c     2D 00 64 FD | 	ret
20e90                 | 
20e90                 | __system__LCase_S
20e90     07 4A 05 F6 | 	mov	COUNT_, #7
20e94     A8 00 A0 FD | 	call	#pushregs_
20e98     09 1F 02 F6 | 	mov	local01, arg01
20e9c     09 21 02 F6 | 	mov	local02, arg01
20ea0     97 06 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
20ea4                 | LR__2920
20ea4     10 FB C9 FA | 	rdbyte	result1, local02 wz
20ea8     01 20 06 51 |  if_ne	add	local02, #1
20eac     F4 FF 9F 5D |  if_ne	jmp	#LR__2920
20eb0                 | LR__2921
20eb0     09 21 82 F1 | 	sub	local02, arg01
20eb4     10 FB 01 F6 | 	mov	result1, local02
20eb8     FD 20 0A F6 | 	mov	local02, result1 wz
20ebc     70 01 00 AF 
20ec0     FA FA 05 A6 |  if_e	mov	result1, ##@LR__4757
20ec4     7C 00 90 AD |  if_e	jmp	#LR__2927
20ec8     10 13 02 F6 | 	mov	arg01, local02
20ecc     02 12 06 F1 | 	add	arg01, #2
20ed0     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
20ed4     FD 22 0A F6 | 	mov	local03, result1 wz
20ed8     64 00 90 AD |  if_e	jmp	#LR__2926
20edc     01 24 66 F6 | 	neg	local04, #1
20ee0     97 26 48 FB | 	callpa	#(@LR__2925-@LR__2922)>>2,fcache_load_ptr_
20ee4                 | LR__2922
20ee4     01 24 06 F1 | 	add	local04, #1
20ee8     12 27 02 F6 | 	mov	local05, local04
20eec     0F 27 02 F1 | 	add	local05, local01
20ef0     13 29 C2 FA | 	rdbyte	local06, local05
20ef4     41 28 56 F2 | 	cmps	local06, #65 wc
20ef8     18 00 90 CD |  if_b	jmp	#LR__2923
20efc     5B 28 56 F2 | 	cmps	local06, #91 wc
20f00     12 2B 02 C6 |  if_b	mov	local07, local04
20f04     11 2B 02 C1 |  if_b	add	local07, local03
20f08     20 28 06 C1 |  if_b	add	local06, #32
20f0c     15 29 42 CC |  if_b	wrbyte	local06, local07
20f10     0C 00 90 CD |  if_b	jmp	#LR__2924
20f14                 | LR__2923
20f14     12 2B 02 F6 | 	mov	local07, local04
20f18     11 2B 02 F1 | 	add	local07, local03
20f1c     15 29 42 FC | 	wrbyte	local06, local07
20f20                 | LR__2924
20f20     10 29 02 F6 | 	mov	local06, local02
20f24     01 28 86 F1 | 	sub	local06, #1
20f28     14 25 0A F2 | 	cmp	local04, local06 wz
20f2c     B4 FF 9F 5D |  if_ne	jmp	#LR__2922
20f30                 | LR__2925
20f30     11 21 02 F1 | 	add	local02, local03
20f34     10 01 48 FC | 	wrbyte	#0, local02
20f38     11 FB 01 F6 | 	mov	result1, local03
20f3c     04 00 90 FD | 	jmp	#LR__2927
20f40                 | LR__2926
20f40     11 FB 01 F6 | 	mov	result1, local03
20f44                 | LR__2927
20f44     A7 F0 03 F6 | 	mov	ptra, fp
20f48     B2 00 A0 FD | 	call	#popregs_
20f4c                 | __system__LCase_S_ret
20f4c     2D 00 64 FD | 	ret
20f50                 | 
20f50                 | __system__LTrim_S
20f50     05 4A 05 F6 | 	mov	COUNT_, #5
20f54     A8 00 A0 FD | 	call	#pushregs_
20f58     09 1F 02 F6 | 	mov	local01, arg01
20f5c     09 21 02 F6 | 	mov	local02, arg01
20f60     97 06 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
20f64                 | LR__2930
20f64     10 FB C9 FA | 	rdbyte	result1, local02 wz
20f68     01 20 06 51 |  if_ne	add	local02, #1
20f6c     F4 FF 9F 5D |  if_ne	jmp	#LR__2930
20f70                 | LR__2931
20f70     09 21 82 F1 | 	sub	local02, arg01
20f74     10 FB 01 F6 | 	mov	result1, local02
20f78     FD 20 0A F6 | 	mov	local02, result1 wz
20f7c     70 01 00 AF 
20f80     FB FA 05 A6 |  if_e	mov	result1, ##@LR__4758
20f84     7C 00 90 AD |  if_e	jmp	#LR__2936
20f88     00 22 06 F6 | 	mov	local03, #0
20f8c     10 25 02 F6 | 	mov	local04, local02
20f90                 | LR__2932
20f90     12 23 52 F2 | 	cmps	local03, local04 wc
20f94     68 00 90 3D |  if_ae	jmp	#LR__2935
20f98     11 17 02 F6 | 	mov	arg03, local03
20f9c     0F 17 02 F1 | 	add	arg03, local01
20fa0     0B 17 C2 FA | 	rdbyte	arg03, arg03
20fa4     20 16 0E F2 | 	cmp	arg03, #32 wz
20fa8     4C 00 90 AD |  if_e	jmp	#LR__2934
20fac     10 13 02 F6 | 	mov	arg01, local02
20fb0     11 13 82 F1 | 	sub	arg01, local03
20fb4     02 12 06 F1 | 	add	arg01, #2
20fb8     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
20fbc     FD 26 0A F6 | 	mov	local05, result1 wz
20fc0     2C 00 90 AD |  if_e	jmp	#LR__2933
20fc4     11 15 02 F6 | 	mov	arg02, local03
20fc8     0F 15 02 F1 | 	add	arg02, local01
20fcc     10 17 02 F6 | 	mov	arg03, local02
20fd0     11 17 82 F1 | 	sub	arg03, local03
20fd4     13 13 02 F6 | 	mov	arg01, local05
20fd8     7C DA BF FD | 	call	#__system____builtin_memmove
20fdc     11 21 82 F1 | 	sub	local02, local03
20fe0     13 21 02 F1 | 	add	local02, local05
20fe4     10 01 48 FC | 	wrbyte	#0, local02
20fe8     13 FB 01 F6 | 	mov	result1, local05
20fec     14 00 90 FD | 	jmp	#LR__2936
20ff0                 | LR__2933
20ff0     13 FB 01 F6 | 	mov	result1, local05
20ff4     0C 00 90 FD | 	jmp	#LR__2936
20ff8                 | LR__2934
20ff8     01 22 06 F1 | 	add	local03, #1
20ffc     90 FF 9F FD | 	jmp	#LR__2932
21000                 | LR__2935
21000     0F FB 01 F6 | 	mov	result1, local01
21004                 | LR__2936
21004     A7 F0 03 F6 | 	mov	ptra, fp
21008     B2 00 A0 FD | 	call	#popregs_
2100c                 | __system__LTrim_S_ret
2100c     2D 00 64 FD | 	ret
21010                 | 
21010                 | __system__RTrim_S
21010     04 4A 05 F6 | 	mov	COUNT_, #4
21014     A8 00 A0 FD | 	call	#pushregs_
21018     09 1F 02 F6 | 	mov	local01, arg01
2101c     09 21 02 F6 | 	mov	local02, arg01
21020     97 06 48 FB | 	callpa	#(@LR__2941-@LR__2940)>>2,fcache_load_ptr_
21024                 | LR__2940
21024     10 FB C9 FA | 	rdbyte	result1, local02 wz
21028     01 20 06 51 |  if_ne	add	local02, #1
2102c     F4 FF 9F 5D |  if_ne	jmp	#LR__2940
21030                 | LR__2941
21030     09 21 82 F1 | 	sub	local02, arg01
21034     10 FB 01 F6 | 	mov	result1, local02
21038     FD 20 0A F6 | 	mov	local02, result1 wz
2103c     70 01 00 AF 
21040     FC FA 05 A6 |  if_e	mov	result1, ##@LR__4759
21044     74 00 90 AD |  if_e	jmp	#LR__2945
21048     10 23 02 F6 | 	mov	local03, local02
2104c     01 22 86 F1 | 	sub	local03, #1
21050                 | LR__2942
21050     11 15 02 F6 | 	mov	arg02, local03
21054     0F 15 02 F1 | 	add	arg02, local01
21058     0A 21 C2 FA | 	rdbyte	local02, arg02
2105c     20 20 0E F2 | 	cmp	local02, #32 wz
21060     44 00 90 AD |  if_e	jmp	#LR__2944
21064     11 13 02 F6 | 	mov	arg01, local03
21068     02 12 06 F1 | 	add	arg01, #2
2106c     14 19 B0 FD | 	call	#__system___gc_alloc_managed
21070     FD 24 0A F6 | 	mov	local04, result1 wz
21074     28 00 90 AD |  if_e	jmp	#LR__2943
21078     11 17 02 F6 | 	mov	arg03, local03
2107c     01 16 06 F1 | 	add	arg03, #1
21080     12 13 02 F6 | 	mov	arg01, local04
21084     0F 15 02 F6 | 	mov	arg02, local01
21088     CC D9 BF FD | 	call	#__system____builtin_memmove
2108c     01 22 06 F1 | 	add	local03, #1
21090     12 23 02 F1 | 	add	local03, local04
21094     11 01 48 FC | 	wrbyte	#0, local03
21098     12 FB 01 F6 | 	mov	result1, local04
2109c     1C 00 90 FD | 	jmp	#LR__2945
210a0                 | LR__2943
210a0     12 FB 01 F6 | 	mov	result1, local04
210a4     14 00 90 FD | 	jmp	#LR__2945
210a8                 | LR__2944
210a8     01 22 86 F1 | 	sub	local03, #1
210ac     00 22 56 F2 | 	cmps	local03, #0 wc
210b0     9C FF 9F 3D |  if_ae	jmp	#LR__2942
210b4     70 01 00 FF 
210b8     FD FA 05 F6 | 	mov	result1, ##@LR__4760
210bc                 | LR__2945
210bc     A7 F0 03 F6 | 	mov	ptra, fp
210c0     B2 00 A0 FD | 	call	#popregs_
210c4                 | __system__RTrim_S_ret
210c4     2D 00 64 FD | 	ret
210c8                 | 
210c8                 | __system__Instr
210c8     07 4A 05 F6 | 	mov	COUNT_, #7
210cc     A8 00 A0 FD | 	call	#pushregs_
210d0     09 1F 02 F6 | 	mov	local01, arg01
210d4     0A 21 02 F6 | 	mov	local02, arg02
210d8     0B 23 02 F6 | 	mov	local03, arg03
210dc     11 13 02 F6 | 	mov	arg01, local03
210e0     09 25 02 F6 | 	mov	local04, arg01
210e4     97 06 48 FB | 	callpa	#(@LR__2951-@LR__2950)>>2,fcache_load_ptr_
210e8                 | LR__2950
210e8     12 FB C9 FA | 	rdbyte	result1, local04 wz
210ec     01 24 06 51 |  if_ne	add	local04, #1
210f0     F4 FF 9F 5D |  if_ne	jmp	#LR__2950
210f4                 | LR__2951
210f4     09 25 82 F1 | 	sub	local04, arg01
210f8     12 27 02 F6 | 	mov	local05, local04
210fc     10 13 02 F6 | 	mov	arg01, local02
21100     09 25 02 F6 | 	mov	local04, arg01
21104     97 06 48 FB | 	callpa	#(@LR__2953-@LR__2952)>>2,fcache_load_ptr_
21108                 | LR__2952
21108     12 FB C9 FA | 	rdbyte	result1, local04 wz
2110c     01 24 06 51 |  if_ne	add	local04, #1
21110     F4 FF 9F 5D |  if_ne	jmp	#LR__2952
21114                 | LR__2953
21114     09 25 82 F1 | 	sub	local04, arg01
21118     12 FB 01 F6 | 	mov	result1, local04
2111c     FD 18 0A F6 | 	mov	arg04, result1 wz
21120     00 FA 05 A6 |  if_e	mov	result1, #0
21124     98 00 90 AD |  if_e	jmp	#LR__2957
21128     00 26 0E F2 | 	cmp	local05, #0 wz
2112c     00 FA 05 A6 |  if_e	mov	result1, #0
21130     8C 00 90 AD |  if_e	jmp	#LR__2957
21134     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
21138     00 FA 05 16 |  if_a	mov	result1, #0
2113c     80 00 90 1D |  if_a	jmp	#LR__2957
21140     01 1E 56 F2 | 	cmps	local01, #1 wc
21144     01 1E 06 C6 |  if_b	mov	local01, #1
21148     11 29 C2 FA | 	rdbyte	local06, local03
2114c     01 26 0E F2 | 	cmp	local05, #1 wz
21150     18 00 90 5D |  if_ne	jmp	#LR__2954
21154     10 13 02 F6 | 	mov	arg01, local02
21158     14 15 02 F6 | 	mov	arg02, local06
2115c     0F 17 02 F6 | 	mov	arg03, local01
21160     00 18 06 F6 | 	mov	arg04, #0
21164     B8 33 B0 FD | 	call	#__system____ScanForChar
21168     54 00 90 FD | 	jmp	#LR__2957
2116c                 | LR__2954
2116c     0F 2B 02 F6 | 	mov	local07, local01
21170                 | LR__2955
21170     10 13 02 F6 | 	mov	arg01, local02
21174     14 15 02 F6 | 	mov	arg02, local06
21178     15 17 02 F6 | 	mov	arg03, local07
2117c     00 18 06 F6 | 	mov	arg04, #0
21180     9C 33 B0 FD | 	call	#__system____ScanForChar
21184     FD 2A 0A F6 | 	mov	local07, result1 wz
21188     30 00 90 AD |  if_e	jmp	#LR__2956
2118c     13 17 02 F6 | 	mov	arg03, local05
21190     10 13 02 F6 | 	mov	arg01, local02
21194     15 15 02 F6 | 	mov	arg02, local07
21198     FC FA BF FD | 	call	#__system__Mid_S
2119c     FD 12 02 F6 | 	mov	arg01, result1
211a0     11 15 02 F6 | 	mov	arg02, local03
211a4     B8 D9 BF FD | 	call	#__system___string_cmp
211a8     00 FA 0D F2 | 	cmp	result1, #0 wz
211ac     15 FB 01 A6 |  if_e	mov	result1, local07
211b0     0C 00 90 AD |  if_e	jmp	#LR__2957
211b4     13 2B 02 F1 | 	add	local07, local05
211b8     B4 FF 9F FD | 	jmp	#LR__2955
211bc                 | LR__2956
211bc     00 FA 05 F6 | 	mov	result1, #0
211c0                 | LR__2957
211c0     A7 F0 03 F6 | 	mov	ptra, fp
211c4     B2 00 A0 FD | 	call	#popregs_
211c8                 | __system__Instr_ret
211c8     2D 00 64 FD | 	ret
211cc                 | 
211cc                 | __system___strerror
211cc     00 12 56 F2 | 	cmps	arg01, #0 wc
211d0     08 00 90 CD |  if_b	jmp	#LR__2960
211d4     1A 12 56 F2 | 	cmps	arg01, #26 wc
211d8     04 00 90 CD |  if_b	jmp	#LR__2961
211dc                 | LR__2960
211dc     19 12 06 F6 | 	mov	arg01, #25
211e0                 | LR__2961
211e0     02 12 66 F0 | 	shl	arg01, #2
211e4     01 00 00 FF 
211e8     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
211ec     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
211f0     09 FB 01 FB | 	rdlong	result1, arg01
211f4     01 00 00 FF 
211f8     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
211fc                 | __system___strerror_ret
211fc     2D 00 64 FD | 	ret
21200                 | 
21200                 | __system___int64_shl
21200     20 16 CE F7 | 	test	arg03, #32 wz
21204     09 15 02 56 |  if_ne	mov	arg02, arg01
21208     00 12 06 56 |  if_ne	mov	arg01, #0
2120c     1F 16 CE F7 | 	test	arg03, #31 wz
21210     18 00 90 AD |  if_e	jmp	#LR__2970
21214     0B 15 62 F0 | 	shl	arg02, arg03
21218     09 FB 01 F6 | 	mov	result1, arg01
2121c     0B FD 61 F6 | 	neg	result2, arg03
21220     FE FA 41 F0 | 	shr	result1, result2
21224     FD 14 42 F5 | 	or	arg02, result1
21228     0B 13 62 F0 | 	shl	arg01, arg03
2122c                 | LR__2970
2122c     0A FD 01 F6 | 	mov	result2, arg02
21230     09 FB 01 F6 | 	mov	result1, arg01
21234                 | __system___int64_shl_ret
21234     2D 00 64 FD | 	ret
21238                 | 
21238                 | __system___usepins
21238     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2123c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
21240     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
21244     00 13 CA F7 | 	test	arg01, _var01 wz
21248     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
2124c     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
21250     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
21254     01 15 CA A7 |  if_e	test	arg02, _var02 wz
21258     00 FA 05 56 |  if_ne	mov	result1, #0
2125c     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
21260     14 E6 05 F1 | 	add	ptr___system__dat__, #20
21264     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
21268     09 03 42 F5 | 	or	_var02, arg01
2126c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
21270     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21274     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
21278     0A 03 42 F5 | 	or	_var02, arg02
2127c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
21280     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
21284     01 FA 65 F6 | 	neg	result1, #1
21288                 | __system___usepins_ret
21288     2D 00 64 FD | 	ret
2128c                 | 
2128c                 | __system___freepins
2128c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
21290     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
21294     09 01 22 F5 | 	andn	_var01, arg01
21298     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
2129c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
212a0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
212a4     0A 01 22 F5 | 	andn	_var01, arg02
212a8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
212ac     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
212b0                 | __system___freepins_ret
212b0     2D 00 64 FD | 	ret
212b4                 | 
212b4                 | __system___float_fromuns
212b4     09 17 0A F6 | 	mov	arg03, arg01 wz
212b8     0B FB 01 A6 |  if_e	mov	result1, arg03
212bc     24 00 90 AD |  if_e	jmp	#LR__2980
212c0     0B 15 92 F7 | 	encod	arg02, arg03 wc
212c4     01 14 06 C1 |  if_b	add	arg02, #1
212c8     01 14 86 F1 | 	sub	arg02, #1
212cc     1F 12 06 F6 | 	mov	arg01, #31
212d0     0A 13 82 F1 | 	sub	arg01, arg02
212d4     09 17 62 F0 | 	shl	arg03, arg01
212d8     02 16 46 F0 | 	shr	arg03, #2
212dc     00 12 06 F6 | 	mov	arg01, #0
212e0     4C 09 B0 FD | 	call	#__system___float_Pack
212e4                 | LR__2980
212e4                 | __system___float_fromuns_ret
212e4     2D 00 64 FD | 	ret
212e8                 | 
212e8                 | __system___float_add
212e8     0F 4A 05 F6 | 	mov	COUNT_, #15
212ec     A8 00 A0 FD | 	call	#pushregs_
212f0     09 1F 02 F6 | 	mov	local01, arg01
212f4     0A 21 02 F6 | 	mov	local02, arg02
212f8     00 22 06 F6 | 	mov	local03, #0
212fc     0F 25 02 F6 | 	mov	local04, local01
21300     12 27 02 F6 | 	mov	local05, local04
21304     16 26 46 F7 | 	zerox	local05, #22
21308     12 29 02 F6 | 	mov	local06, local04
2130c     01 28 66 F0 | 	shl	local06, #1
21310     18 28 46 F0 | 	shr	local06, #24
21314     1F 24 46 F0 | 	shr	local04, #31
21318     10 13 02 F6 | 	mov	arg01, local02
2131c     09 FB 01 F6 | 	mov	result1, arg01
21320     FD 2A 02 F6 | 	mov	local07, result1
21324     15 2D 02 F6 | 	mov	local08, local07
21328     16 2C 46 F7 | 	zerox	local08, #22
2132c     15 2F 02 F6 | 	mov	local09, local07
21330     01 2E 66 F0 | 	shl	local09, #1
21334     18 2E 46 F0 | 	shr	local09, #24
21338     17 31 02 F6 | 	mov	local10, local09
2133c     1F 2A 46 F0 | 	shr	local07, #31
21340     00 32 06 F6 | 	mov	local11, #0
21344     00 34 06 F6 | 	mov	local12, #0
21348     18 29 12 F2 | 	cmp	local06, local10 wc
2134c     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
21350     2C 00 90 1D |  if_a	jmp	#LR__2990
21354     16 27 12 32 |  if_ae	cmp	local05, local08 wc
21358     24 00 90 3D |  if_ae	jmp	#LR__2990
2135c     13 37 02 F6 | 	mov	local13, local05
21360     16 27 02 F6 | 	mov	local05, local08
21364     1B 2D 02 F6 | 	mov	local08, local13
21368     14 37 02 F6 | 	mov	local13, local06
2136c     18 29 02 F6 | 	mov	local06, local10
21370     1B 31 02 F6 | 	mov	local10, local13
21374     12 37 02 F6 | 	mov	local13, local04
21378     15 25 02 F6 | 	mov	local04, local07
2137c     1B 2B 02 F6 | 	mov	local07, local13
21380                 | LR__2990
21380     FF 28 0E F2 | 	cmp	local06, #255 wz
21384     70 01 90 AD |  if_e	jmp	#LR__3005
21388     00 28 0E F2 | 	cmp	local06, #0 wz
2138c     AC 01 90 AD |  if_e	jmp	#LR__3007
21390     17 26 26 F4 | 	bith	local05, #23
21394                 | LR__2991
21394     00 30 0E F2 | 	cmp	local10, #0 wz
21398     F0 01 90 AD |  if_e	jmp	#LR__3011
2139c     17 2C 26 F4 | 	bith	local08, #23
213a0                 | LR__2992
213a0     7F 28 86 F1 | 	sub	local06, #127
213a4     7F 30 86 F1 | 	sub	local10, #127
213a8     14 39 02 F6 | 	mov	local14, local06
213ac     18 39 82 F1 | 	sub	local14, local10
213b0     97 14 48 FB | 	callpa	#(@LR__2994-@LR__2993)>>2,fcache_load_ptr_
213b4                 | LR__2993
213b4     20 38 56 F2 | 	cmps	local14, #32 wc
213b8     20 00 90 CD |  if_b	jmp	#LR__2995
213bc     16 2F 02 F6 | 	mov	local09, local08
213c0     00 32 0E F2 | 	cmp	local11, #0 wz
213c4     6F 32 62 FD | 	wrnz	local11
213c8     19 2F 42 F5 | 	or	local09, local11
213cc     17 33 02 F6 | 	mov	local11, local09
213d0     00 2C 06 F6 | 	mov	local08, #0
213d4     20 38 86 F1 | 	sub	local14, #32
213d8     D8 FF 9F FD | 	jmp	#LR__2993
213dc                 | LR__2994
213dc                 | LR__2995
213dc     00 38 0E F2 | 	cmp	local14, #0 wz
213e0     38 00 90 AD |  if_e	jmp	#LR__2996
213e4     16 37 02 F6 | 	mov	local13, local08
213e8     20 30 06 F6 | 	mov	local10, #32
213ec     1C 31 82 F1 | 	sub	local10, local14
213f0     18 37 62 F0 | 	shl	local13, local10
213f4     19 31 02 F6 | 	mov	local10, local11
213f8     20 2E 06 F6 | 	mov	local09, #32
213fc     1C 2F 82 F1 | 	sub	local09, local14
21400     17 31 6A F0 | 	shl	local10, local09 wz
21404     1C 33 42 F0 | 	shr	local11, local14
21408     1C 2D 42 F0 | 	shr	local08, local14
2140c     1B 33 42 F5 | 	or	local11, local13
21410     00 3A 06 F6 | 	mov	local15, #0
21414     01 3A 06 56 |  if_ne	mov	local15, #1
21418     1D 33 42 F5 | 	or	local11, local15
2141c                 | LR__2996
2141c     12 3B 02 F6 | 	mov	local15, local04
21420     15 3B 62 F5 | 	xor	local15, local07
21424     01 3A CE F7 | 	test	local15, #1 wz
21428     18 00 90 AD |  if_e	jmp	#LR__2997
2142c     16 2D 22 F6 | 	not	local08, local08
21430     19 33 22 F6 | 	not	local11, local11
21434     01 32 0E F1 | 	add	local11, #1 wz
21438     00 3A 06 F6 | 	mov	local15, #0
2143c     01 3A 06 A6 |  if_e	mov	local15, #1
21440     1D 2D 02 F1 | 	add	local08, local15
21444                 | LR__2997
21444     19 35 12 F1 | 	add	local12, local11 wc
21448     16 27 22 F1 | 	addx	local05, local08
2144c     00 26 56 F2 | 	cmps	local05, #0 wc
21450     1C 00 90 3D |  if_ae	jmp	#LR__2998
21454     01 24 66 F5 | 	xor	local04, #1
21458     13 27 22 F6 | 	not	local05, local05
2145c     1A 35 22 F6 | 	not	local12, local12
21460     01 34 0E F1 | 	add	local12, #1 wz
21464     00 3A 06 F6 | 	mov	local15, #0
21468     01 3A 06 A6 |  if_e	mov	local15, #1
2146c     1D 27 02 F1 | 	add	local05, local15
21470                 | LR__2998
21470     00 80 00 FF 
21474     00 26 16 F2 | 	cmp	local05, ##16777216 wc
21478     28 00 90 CD |  if_b	jmp	#LR__2999
2147c     01 28 06 F1 | 	add	local06, #1
21480     1A 39 02 F6 | 	mov	local14, local12
21484     01 38 06 F5 | 	and	local14, #1
21488     01 34 46 F0 | 	shr	local12, #1
2148c     13 3B 02 F6 | 	mov	local15, local05
21490     1F 3A 66 F0 | 	shl	local15, #31
21494     1D 35 42 F5 | 	or	local12, local15
21498     1C 35 42 F5 | 	or	local12, local14
2149c     01 26 46 F0 | 	shr	local05, #1
214a0     3C 00 90 FD | 	jmp	#LR__3004
214a4                 | LR__2999
214a4     00 40 00 FF 
214a8     00 26 16 F2 | 	cmp	local05, ##8388608 wc
214ac     30 00 90 3D |  if_ae	jmp	#LR__3003
214b0     00 26 0E F2 | 	cmp	local05, #0 wz
214b4     00 34 0E A2 |  if_e	cmp	local12, #0 wz
214b8     08 24 46 A5 |  if_e	or	local04, #8
214bc     01 24 26 A5 |  if_e	andn	local04, #1
214c0     1C 00 90 AD |  if_e	jmp	#LR__3002
214c4                 | LR__3000
214c4     00 40 00 FF 
214c8     00 26 16 F2 | 	cmp	local05, ##8388608 wc
214cc     10 00 90 3D |  if_ae	jmp	#LR__3001
214d0     1A 35 12 F1 | 	add	local12, local12 wc
214d4     13 27 22 F1 | 	addx	local05, local05
214d8     01 28 86 F1 | 	sub	local06, #1
214dc     E4 FF 9F FD | 	jmp	#LR__3000
214e0                 | LR__3001
214e0                 | LR__3002
214e0                 | LR__3003
214e0                 | LR__3004
214e0     13 13 02 F6 | 	mov	arg01, local05
214e4     1A 15 02 F6 | 	mov	arg02, local12
214e8     14 17 02 F6 | 	mov	arg03, local06
214ec     12 19 02 F6 | 	mov	arg04, local04
214f0     70 34 B0 FD | 	call	#__system__pack_0550
214f4     DC 00 90 FD | 	jmp	#LR__3015
214f8                 | LR__3005
214f8     FF 30 0E F2 | 	cmp	local10, #255 wz
214fc     10 00 90 5D |  if_ne	jmp	#LR__3006
21500     12 2B 0A F2 | 	cmp	local07, local04 wz
21504     00 F8 3F 5F 
21508     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2150c     C4 00 90 5D |  if_ne	jmp	#LR__3015
21510                 | LR__3006
21510     00 26 0E F2 | 	cmp	local05, #0 wz
21514     00 F8 3F 5F 
21518     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2151c     B4 00 90 5D |  if_ne	jmp	#LR__3015
21520     1A 15 02 F6 | 	mov	arg02, local12
21524     14 17 02 F6 | 	mov	arg03, local06
21528     12 19 02 F6 | 	mov	arg04, local04
2152c     02 18 46 F5 | 	or	arg04, #2
21530     13 13 02 F6 | 	mov	arg01, local05
21534     2C 34 B0 FD | 	call	#__system__pack_0550
21538     98 00 90 FD | 	jmp	#LR__3015
2153c                 | LR__3007
2153c     00 26 0E F2 | 	cmp	local05, #0 wz
21540     28 00 90 AD |  if_e	jmp	#LR__3010
21544     01 26 66 F0 | 	shl	local05, #1
21548     97 0E 48 FB | 	callpa	#(@LR__3009-@LR__3008)>>2,fcache_load_ptr_
2154c                 | LR__3008
2154c     00 40 00 FF 
21550     00 26 16 F2 | 	cmp	local05, ##8388608 wc
21554     14 3B 02 C6 |  if_b	mov	local15, local06
21558     01 3A 86 C1 |  if_b	sub	local15, #1
2155c     1D 29 02 C6 |  if_b	mov	local06, local15
21560     01 26 66 C0 |  if_b	shl	local05, #1
21564     E4 FF 9F CD |  if_b	jmp	#LR__3008
21568                 | LR__3009
21568     28 FE 9F FD | 	jmp	#LR__2991
2156c                 | LR__3010
2156c     15 25 02 F5 | 	and	local04, local07
21570     12 19 02 F6 | 	mov	arg04, local04
21574     08 18 46 F5 | 	or	arg04, #8
21578     00 12 06 F6 | 	mov	arg01, #0
2157c     00 14 06 F6 | 	mov	arg02, #0
21580     00 16 06 F6 | 	mov	arg03, #0
21584     DC 33 B0 FD | 	call	#__system__pack_0550
21588     48 00 90 FD | 	jmp	#LR__3015
2158c                 | LR__3011
2158c     00 2C 0E F2 | 	cmp	local08, #0 wz
21590     28 00 90 AD |  if_e	jmp	#LR__3014
21594     01 2C 66 F0 | 	shl	local08, #1
21598     97 0E 48 FB | 	callpa	#(@LR__3013-@LR__3012)>>2,fcache_load_ptr_
2159c                 | LR__3012
2159c     00 40 00 FF 
215a0     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
215a4     18 3B 02 C6 |  if_b	mov	local15, local10
215a8     01 3A 86 C1 |  if_b	sub	local15, #1
215ac     1D 31 02 C6 |  if_b	mov	local10, local15
215b0     01 2C 66 C0 |  if_b	shl	local08, #1
215b4     E4 FF 9F CD |  if_b	jmp	#LR__3012
215b8                 | LR__3013
215b8     E4 FD 9F FD | 	jmp	#LR__2992
215bc                 | LR__3014
215bc     7F 28 86 F1 | 	sub	local06, #127
215c0     13 13 02 F6 | 	mov	arg01, local05
215c4     1A 15 02 F6 | 	mov	arg02, local12
215c8     14 17 02 F6 | 	mov	arg03, local06
215cc     12 19 02 F6 | 	mov	arg04, local04
215d0     90 33 B0 FD | 	call	#__system__pack_0550
215d4                 | LR__3015
215d4     A7 F0 03 F6 | 	mov	ptra, fp
215d8     B2 00 A0 FD | 	call	#popregs_
215dc                 | __system___float_add_ret
215dc     2D 00 64 FD | 	ret
215e0                 | 
215e0                 | __system___float_sqrt
215e0     04 4A 05 F6 | 	mov	COUNT_, #4
215e4     A8 00 A0 FD | 	call	#pushregs_
215e8     09 1F 02 F6 | 	mov	local01, arg01
215ec     09 FB 01 F6 | 	mov	result1, arg01
215f0     FD 20 02 F6 | 	mov	local02, result1
215f4     10 23 02 F6 | 	mov	local03, local02
215f8     16 22 46 F7 | 	zerox	local03, #22
215fc     10 25 02 F6 | 	mov	local04, local02
21600     01 24 66 F0 | 	shl	local04, #1
21604     18 24 4E F0 | 	shr	local04, #24 wz
21608     1F 20 46 F0 | 	shr	local02, #31
2160c     70 00 90 AD |  if_e	jmp	#LR__3021
21610     17 22 26 F4 | 	bith	local03, #23
21614                 | LR__3020
21614     00 20 0E F2 | 	cmp	local02, #0 wz
21618     00 F8 3F 5F 
2161c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
21620     88 00 90 5D |  if_ne	jmp	#LR__3024
21624     FF 24 0E F2 | 	cmp	local04, #255 wz
21628     0F FB 01 A6 |  if_e	mov	result1, local01
2162c     7C 00 90 AD |  if_e	jmp	#LR__3024
21630     7F 24 86 F1 | 	sub	local04, #127
21634     01 24 CE F7 | 	test	local04, #1 wz
21638     01 22 66 50 |  if_ne	shl	local03, #1
2163c     05 22 66 F0 | 	shl	local03, #5
21640     11 01 38 FD | 	qsqrt	#0, local03
21644     01 24 86 51 |  if_ne	sub	local04, #1
21648     12 25 52 F6 | 	abs	local04, local04 wc
2164c     01 24 46 F0 | 	shr	local04, #1
21650     12 17 82 F6 | 	negc	arg03, local04
21654     10 19 02 F6 | 	mov	arg04, local02
21658     18 12 62 FD | 	getqx	arg01
2165c     09 15 02 F6 | 	mov	arg02, arg01
21660     19 14 66 F0 | 	shl	arg02, #25
21664     07 12 46 F0 | 	shr	arg01, #7
21668     00 80 00 FF 
2166c     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
21670     01 16 06 31 |  if_ae	add	arg03, #1
21674     01 12 46 30 |  if_ae	shr	arg01, #1
21678     E8 32 B0 FD | 	call	#__system__pack_0550
2167c     2C 00 90 FD | 	jmp	#LR__3024
21680                 | LR__3021
21680     00 22 0E F2 | 	cmp	local03, #0 wz
21684     0F FB 01 A6 |  if_e	mov	result1, local01
21688     20 00 90 AD |  if_e	jmp	#LR__3024
2168c     01 22 66 F0 | 	shl	local03, #1
21690     97 0A 48 FB | 	callpa	#(@LR__3023-@LR__3022)>>2,fcache_load_ptr_
21694                 | LR__3022
21694     00 40 00 FF 
21698     00 22 16 F2 | 	cmp	local03, ##8388608 wc
2169c     01 24 86 C1 |  if_b	sub	local04, #1
216a0     01 22 66 C0 |  if_b	shl	local03, #1
216a4     EC FF 9F CD |  if_b	jmp	#LR__3022
216a8                 | LR__3023
216a8     68 FF 9F FD | 	jmp	#LR__3020
216ac                 | LR__3024
216ac     A7 F0 03 F6 | 	mov	ptra, fp
216b0     B2 00 A0 FD | 	call	#popregs_
216b4                 | __system___float_sqrt_ret
216b4     2D 00 64 FD | 	ret
216b8                 | 
216b8                 | __system___float_mul
216b8     0B 4A 05 F6 | 	mov	COUNT_, #11
216bc     A8 00 A0 FD | 	call	#pushregs_
216c0     09 1F 02 F6 | 	mov	local01, arg01
216c4     0A 21 02 F6 | 	mov	local02, arg02
216c8     0F 23 02 F6 | 	mov	local03, local01
216cc     11 25 02 F6 | 	mov	local04, local03
216d0     16 24 46 F7 | 	zerox	local04, #22
216d4     11 27 02 F6 | 	mov	local05, local03
216d8     01 26 66 F0 | 	shl	local05, #1
216dc     18 26 46 F0 | 	shr	local05, #24
216e0     1F 22 46 F0 | 	shr	local03, #31
216e4     10 FB 01 F6 | 	mov	result1, local02
216e8     FD 28 02 F6 | 	mov	local06, result1
216ec     14 2B 02 F6 | 	mov	local07, local06
216f0     16 2A 46 F7 | 	zerox	local07, #22
216f4     14 2D 02 F6 | 	mov	local08, local06
216f8     01 2C 66 F0 | 	shl	local08, #1
216fc     18 2C 46 F0 | 	shr	local08, #24
21700     1F 28 46 F0 | 	shr	local06, #31
21704     14 23 62 F5 | 	xor	local03, local06
21708     FF 26 0E F2 | 	cmp	local05, #255 wz
2170c     90 00 90 AD |  if_e	jmp	#LR__3033
21710     FF 2C 0E F2 | 	cmp	local08, #255 wz
21714     D8 00 90 AD |  if_e	jmp	#LR__3035
21718     00 26 0E F2 | 	cmp	local05, #0 wz
2171c     0C 01 90 AD |  if_e	jmp	#LR__3036
21720     17 24 26 F4 | 	bith	local04, #23
21724                 | LR__3030
21724     00 2C 0E F2 | 	cmp	local08, #0 wz
21728     44 01 90 AD |  if_e	jmp	#LR__3040
2172c     17 2A 26 F4 | 	bith	local07, #23
21730                 | LR__3031
21730     12 21 02 F6 | 	mov	local02, local04
21734     04 20 66 F0 | 	shl	local02, #4
21738     15 29 02 F6 | 	mov	local06, local07
2173c     05 28 66 F0 | 	shl	local06, #5
21740     14 21 02 FD | 	qmul	local02, local06
21744     16 27 02 F1 | 	add	local05, local08
21748     FE 26 86 F1 | 	sub	local05, #254
2174c     13 2F 02 F6 | 	mov	local09, local05
21750     04 24 66 F0 | 	shl	local04, #4
21754     05 2A 66 F0 | 	shl	local07, #5
21758     18 30 62 FD | 	getqx	local10
2175c     15 25 02 FD | 	qmul	local04, local07
21760     19 32 62 FD | 	getqy	local11
21764     00 80 00 FF 
21768     00 32 16 F2 | 	cmp	local11, ##16777216 wc
2176c     18 00 90 CD |  if_b	jmp	#LR__3032
21770     01 2E 06 F1 | 	add	local09, #1
21774     01 30 46 F0 | 	shr	local10, #1
21778     19 2D 02 F6 | 	mov	local08, local11
2177c     1F 2C 66 F0 | 	shl	local08, #31
21780     16 31 42 F5 | 	or	local10, local08
21784     01 32 46 F0 | 	shr	local11, #1
21788                 | LR__3032
21788     19 13 02 F6 | 	mov	arg01, local11
2178c     18 15 02 F6 | 	mov	arg02, local10
21790     17 17 02 F6 | 	mov	arg03, local09
21794     11 19 02 F6 | 	mov	arg04, local03
21798     C8 31 B0 FD | 	call	#__system__pack_0550
2179c     10 01 90 FD | 	jmp	#LR__3044
217a0                 | LR__3033
217a0     00 24 0E F2 | 	cmp	local04, #0 wz
217a4     0F FB 01 56 |  if_ne	mov	result1, local01
217a8     04 01 90 5D |  if_ne	jmp	#LR__3044
217ac     FF 2C 56 F2 | 	cmps	local08, #255 wc
217b0     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
217b4     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
217b8     18 00 90 4D |  if_c_and_nz	jmp	#LR__3034
217bc     00 F8 3F CF 
217c0     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
217c4     E8 00 90 CD |  if_b	jmp	#LR__3044
217c8     00 2A 0E F2 | 	cmp	local07, #0 wz
217cc     10 FB 01 56 |  if_ne	mov	result1, local02
217d0     DC 00 90 5D |  if_ne	jmp	#LR__3044
217d4                 | LR__3034
217d4     02 22 46 F5 | 	or	local03, #2
217d8     00 12 06 F6 | 	mov	arg01, #0
217dc     00 14 06 F6 | 	mov	arg02, #0
217e0     13 17 02 F6 | 	mov	arg03, local05
217e4     11 19 02 F6 | 	mov	arg04, local03
217e8     78 31 B0 FD | 	call	#__system__pack_0550
217ec     C0 00 90 FD | 	jmp	#LR__3044
217f0                 | LR__3035
217f0     00 26 0E F2 | 	cmp	local05, #0 wz
217f4     00 24 0E A2 |  if_e	cmp	local04, #0 wz
217f8     00 F8 3F AF 
217fc     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
21800     AC 00 90 AD |  if_e	jmp	#LR__3044
21804     00 2A 0E F2 | 	cmp	local07, #0 wz
21808     10 FB 01 56 |  if_ne	mov	result1, local02
2180c     A0 00 90 5D |  if_ne	jmp	#LR__3044
21810     16 17 02 F6 | 	mov	arg03, local08
21814     11 19 02 F6 | 	mov	arg04, local03
21818     02 18 46 F5 | 	or	arg04, #2
2181c     00 12 06 F6 | 	mov	arg01, #0
21820     00 14 06 F6 | 	mov	arg02, #0
21824     3C 31 B0 FD | 	call	#__system__pack_0550
21828     84 00 90 FD | 	jmp	#LR__3044
2182c                 | LR__3036
2182c     00 24 0E F2 | 	cmp	local04, #0 wz
21830     20 00 90 AD |  if_e	jmp	#LR__3039
21834     01 24 66 F0 | 	shl	local04, #1
21838     97 0A 48 FB | 	callpa	#(@LR__3038-@LR__3037)>>2,fcache_load_ptr_
2183c                 | LR__3037
2183c     00 40 00 FF 
21840     00 24 16 F2 | 	cmp	local04, ##8388608 wc
21844     01 26 86 C1 |  if_b	sub	local05, #1
21848     01 24 66 C0 |  if_b	shl	local04, #1
2184c     EC FF 9F CD |  if_b	jmp	#LR__3037
21850                 | LR__3038
21850     D0 FE 9F FD | 	jmp	#LR__3030
21854                 | LR__3039
21854     08 22 46 F5 | 	or	local03, #8
21858     00 12 06 F6 | 	mov	arg01, #0
2185c     00 14 06 F6 | 	mov	arg02, #0
21860     00 16 06 F6 | 	mov	arg03, #0
21864     11 19 02 F6 | 	mov	arg04, local03
21868     F8 30 B0 FD | 	call	#__system__pack_0550
2186c     40 00 90 FD | 	jmp	#LR__3044
21870                 | LR__3040
21870     00 2A 0E F2 | 	cmp	local07, #0 wz
21874     20 00 90 AD |  if_e	jmp	#LR__3043
21878     01 2A 66 F0 | 	shl	local07, #1
2187c     97 0A 48 FB | 	callpa	#(@LR__3042-@LR__3041)>>2,fcache_load_ptr_
21880                 | LR__3041
21880     00 40 00 FF 
21884     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
21888     01 2C 86 C1 |  if_b	sub	local08, #1
2188c     01 2A 66 C0 |  if_b	shl	local07, #1
21890     EC FF 9F CD |  if_b	jmp	#LR__3041
21894                 | LR__3042
21894     98 FE 9F FD | 	jmp	#LR__3031
21898                 | LR__3043
21898     08 22 46 F5 | 	or	local03, #8
2189c     00 12 06 F6 | 	mov	arg01, #0
218a0     00 14 06 F6 | 	mov	arg02, #0
218a4     00 16 06 F6 | 	mov	arg03, #0
218a8     11 19 02 F6 | 	mov	arg04, local03
218ac     B4 30 B0 FD | 	call	#__system__pack_0550
218b0                 | LR__3044
218b0     A7 F0 03 F6 | 	mov	ptra, fp
218b4     B2 00 A0 FD | 	call	#popregs_
218b8                 | __system___float_mul_ret
218b8     2D 00 64 FD | 	ret
218bc                 | 
218bc                 | __system___float_div
218bc     0E 4A 05 F6 | 	mov	COUNT_, #14
218c0     A8 00 A0 FD | 	call	#pushregs_
218c4     09 23 02 F6 | 	mov	local03, arg01
218c8     0A 25 02 F6 | 	mov	local04, arg02
218cc     11 27 02 F6 | 	mov	local05, local03
218d0     13 29 02 F6 | 	mov	local06, local05
218d4     16 28 46 F7 | 	zerox	local06, #22
218d8     13 2B 02 F6 | 	mov	local07, local05
218dc     01 2A 66 F0 | 	shl	local07, #1
218e0     18 2A 46 F0 | 	shr	local07, #24
218e4     1F 26 46 F0 | 	shr	local05, #31
218e8     12 FB 01 F6 | 	mov	result1, local04
218ec     FD 2C 02 F6 | 	mov	local08, result1
218f0     16 2F 02 F6 | 	mov	local09, local08
218f4     16 2E 46 F7 | 	zerox	local09, #22
218f8     16 31 02 F6 | 	mov	local10, local08
218fc     01 30 66 F0 | 	shl	local10, #1
21900     18 30 46 F0 | 	shr	local10, #24
21904     1F 2C 46 F0 | 	shr	local08, #31
21908     16 27 62 F5 | 	xor	local05, local08
2190c     FF 2A 0E F2 | 	cmp	local07, #255 wz
21910     D4 00 90 AD |  if_e	jmp	#LR__3055
21914     FF 30 0E F2 | 	cmp	local10, #255 wz
21918     04 01 90 AD |  if_e	jmp	#LR__3056
2191c     00 2A 0E F2 | 	cmp	local07, #0 wz
21920     24 01 90 AD |  if_e	jmp	#LR__3057
21924     17 28 26 F4 | 	bith	local06, #23
21928                 | LR__3050
21928     00 30 0E F2 | 	cmp	local10, #0 wz
2192c     70 01 90 AD |  if_e	jmp	#LR__3061
21930     17 2E 26 F4 | 	bith	local09, #23
21934                 | LR__3051
21934     18 2B 82 F1 | 	sub	local07, local10
21938     15 33 02 F6 | 	mov	local11, local07
2193c     14 13 02 F6 | 	mov	arg01, local06
21940     02 12 46 F0 | 	shr	arg01, #2
21944     1E 28 66 F0 | 	shl	local06, #30
21948     14 15 02 F6 | 	mov	arg02, local06
2194c     17 17 02 F6 | 	mov	arg03, local09
21950     28 12 62 FD | 	setq	arg01
21954     0B 15 12 FD | 	qdiv	arg02, arg03
21958     00 34 06 F6 | 	mov	local12, #0
2195c     18 1E 62 FD | 	getqx	local01
21960     19 FC 61 FD | 	getqy	result2
21964     FE 20 02 F6 | 	mov	local02, result2
21968     0F 37 02 F6 | 	mov	local13, local01
2196c     00 20 4E F2 | 	cmps	local02, #0 wz
21970     1B 39 02 F6 | 	mov	local14, local13
21974     19 38 66 F0 | 	shl	local14, #25
21978     01 34 06 56 |  if_ne	mov	local12, #1
2197c     1A 39 42 F5 | 	or	local14, local12
21980     07 36 46 F0 | 	shr	local13, #7
21984     00 80 00 FF 
21988     00 36 16 F2 | 	cmp	local13, ##16777216 wc
2198c     1C 00 90 CD |  if_b	jmp	#LR__3052
21990     01 32 06 F1 | 	add	local11, #1
21994     01 38 46 F0 | 	shr	local14, #1
21998     1B 35 02 F6 | 	mov	local12, local13
2199c     1F 34 66 F0 | 	shl	local12, #31
219a0     1A 39 42 F5 | 	or	local14, local12
219a4     01 36 46 F0 | 	shr	local13, #1
219a8     24 00 90 FD | 	jmp	#LR__3054
219ac                 | LR__3052
219ac     00 40 00 FF 
219b0     00 36 16 F2 | 	cmp	local13, ##8388608 wc
219b4     18 00 90 3D |  if_ae	jmp	#LR__3053
219b8     01 32 86 F1 | 	sub	local11, #1
219bc     01 36 66 F0 | 	shl	local13, #1
219c0     1C 35 02 F6 | 	mov	local12, local14
219c4     1F 34 46 F0 | 	shr	local12, #31
219c8     1A 37 42 F5 | 	or	local13, local12
219cc     01 38 66 F0 | 	shl	local14, #1
219d0                 | LR__3053
219d0                 | LR__3054
219d0     1B 13 02 F6 | 	mov	arg01, local13
219d4     1C 15 02 F6 | 	mov	arg02, local14
219d8     19 17 02 F6 | 	mov	arg03, local11
219dc     13 19 02 F6 | 	mov	arg04, local05
219e0     80 2F B0 FD | 	call	#__system__pack_0550
219e4     F8 00 90 FD | 	jmp	#LR__3065
219e8                 | LR__3055
219e8     00 28 0E F2 | 	cmp	local06, #0 wz
219ec     11 FB 01 56 |  if_ne	mov	result1, local03
219f0     EC 00 90 5D |  if_ne	jmp	#LR__3065
219f4     FF 30 0E F2 | 	cmp	local10, #255 wz
219f8     00 F8 3F AF 
219fc     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
21a00     DC 00 90 AD |  if_e	jmp	#LR__3065
21a04     02 26 46 F5 | 	or	local05, #2
21a08     00 12 06 F6 | 	mov	arg01, #0
21a0c     00 14 06 F6 | 	mov	arg02, #0
21a10     15 17 02 F6 | 	mov	arg03, local07
21a14     13 19 02 F6 | 	mov	arg04, local05
21a18     48 2F B0 FD | 	call	#__system__pack_0550
21a1c     C0 00 90 FD | 	jmp	#LR__3065
21a20                 | LR__3056
21a20     00 2E 0E F2 | 	cmp	local09, #0 wz
21a24     12 FB 01 56 |  if_ne	mov	result1, local04
21a28     B4 00 90 5D |  if_ne	jmp	#LR__3065
21a2c     13 19 02 F6 | 	mov	arg04, local05
21a30     08 18 46 F5 | 	or	arg04, #8
21a34     00 12 06 F6 | 	mov	arg01, #0
21a38     00 14 06 F6 | 	mov	arg02, #0
21a3c     00 16 06 F6 | 	mov	arg03, #0
21a40     20 2F B0 FD | 	call	#__system__pack_0550
21a44     98 00 90 FD | 	jmp	#LR__3065
21a48                 | LR__3057
21a48     00 28 0E F2 | 	cmp	local06, #0 wz
21a4c     20 00 90 AD |  if_e	jmp	#LR__3060
21a50     01 28 66 F0 | 	shl	local06, #1
21a54     97 0A 48 FB | 	callpa	#(@LR__3059-@LR__3058)>>2,fcache_load_ptr_
21a58                 | LR__3058
21a58     00 40 00 FF 
21a5c     00 28 16 F2 | 	cmp	local06, ##8388608 wc
21a60     01 2A 86 C1 |  if_b	sub	local07, #1
21a64     01 28 66 C0 |  if_b	shl	local06, #1
21a68     EC FF 9F CD |  if_b	jmp	#LR__3058
21a6c                 | LR__3059
21a6c     B8 FE 9F FD | 	jmp	#LR__3050
21a70                 | LR__3060
21a70     00 30 0E F2 | 	cmp	local10, #0 wz
21a74     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
21a78     00 F8 3F AF 
21a7c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
21a80     5C 00 90 AD |  if_e	jmp	#LR__3065
21a84     13 19 02 F6 | 	mov	arg04, local05
21a88     08 18 46 F5 | 	or	arg04, #8
21a8c     00 12 06 F6 | 	mov	arg01, #0
21a90     00 14 06 F6 | 	mov	arg02, #0
21a94     00 16 06 F6 | 	mov	arg03, #0
21a98     C8 2E B0 FD | 	call	#__system__pack_0550
21a9c     40 00 90 FD | 	jmp	#LR__3065
21aa0                 | LR__3061
21aa0     00 2E 0E F2 | 	cmp	local09, #0 wz
21aa4     20 00 90 AD |  if_e	jmp	#LR__3064
21aa8     01 2E 66 F0 | 	shl	local09, #1
21aac     97 0A 48 FB | 	callpa	#(@LR__3063-@LR__3062)>>2,fcache_load_ptr_
21ab0                 | LR__3062
21ab0     00 40 00 FF 
21ab4     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
21ab8     01 30 86 C1 |  if_b	sub	local10, #1
21abc     01 2E 66 C0 |  if_b	shl	local09, #1
21ac0     EC FF 9F CD |  if_b	jmp	#LR__3062
21ac4                 | LR__3063
21ac4     6C FE 9F FD | 	jmp	#LR__3051
21ac8                 | LR__3064
21ac8     02 26 46 F5 | 	or	local05, #2
21acc     00 12 06 F6 | 	mov	arg01, #0
21ad0     00 14 06 F6 | 	mov	arg02, #0
21ad4     00 16 06 F6 | 	mov	arg03, #0
21ad8     13 19 02 F6 | 	mov	arg04, local05
21adc     84 2E B0 FD | 	call	#__system__pack_0550
21ae0                 | LR__3065
21ae0     A7 F0 03 F6 | 	mov	ptra, fp
21ae4     B2 00 A0 FD | 	call	#popregs_
21ae8                 | __system___float_div_ret
21ae8     2D 00 64 FD | 	ret
21aec                 | 
21aec                 | __system___float_cmp
21aec     00 C0 3F FF 
21af0     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
21af4     00 C0 3F CF 
21af8     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
21afc     0B FB 01 36 |  if_ae	mov	result1, arg03
21b00     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
21b04     00 C0 7F FF 
21b08     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
21b0c     00 C0 7F CF 
21b10     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
21b14     0B FB 01 36 |  if_ae	mov	result1, arg03
21b18     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
21b1c     00 12 56 F2 | 	cmps	arg01, #0 wc
21b20     2C 00 90 3D |  if_ae	jmp	#LR__3070
21b24     00 14 56 F2 | 	cmps	arg02, #0 wc
21b28     0A FB 01 C6 |  if_b	mov	result1, arg02
21b2c     09 FB 81 C1 |  if_b	sub	result1, arg01
21b30     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
21b34     00 14 0E F2 | 	cmp	arg02, #0 wz
21b38     00 00 40 AF 
21b3c     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
21b40     00 FA 05 A6 |  if_e	mov	result1, #0
21b44     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
21b48     01 FA 65 F6 | 	neg	result1, #1
21b4c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
21b50                 | LR__3070
21b50     00 14 56 F2 | 	cmps	arg02, #0 wc
21b54     1C 00 90 3D |  if_ae	jmp	#LR__3071
21b58     00 12 0E F2 | 	cmp	arg01, #0 wz
21b5c     00 00 40 AF 
21b60     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
21b64     00 FA 05 A6 |  if_e	mov	result1, #0
21b68     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
21b6c     01 FA 05 F6 | 	mov	result1, #1
21b70     08 00 90 FD | 	jmp	#__system___float_cmp_ret
21b74                 | LR__3071
21b74     0A 13 82 F1 | 	sub	arg01, arg02
21b78     09 FB 01 F6 | 	mov	result1, arg01
21b7c                 | __system___float_cmp_ret
21b7c     2D 00 64 FD | 	ret
21b80                 | 
21b80                 | __system___float_tointeger
21b80     02 4A 05 F6 | 	mov	COUNT_, #2
21b84     A8 00 A0 FD | 	call	#pushregs_
21b88     50 00 B0 FD | 	call	#__system___float_Unpack
21b8c     FF FF 7F FF 
21b90     FF FD 55 F2 | 	cmps	result2, ##-1 wc
21b94     34 00 90 CD |  if_b	jmp	#LR__3080
21b98     1F FC 55 F2 | 	cmps	result2, #31 wc
21b9c     2C 00 90 3D |  if_ae	jmp	#LR__3080
21ba0     02 FE 65 F0 | 	shl	result3, #2
21ba4     1E 1E 06 F6 | 	mov	local01, #30
21ba8     FE 1E 82 F1 | 	sub	local01, result2
21bac     0F FF 41 F0 | 	shr	result3, local01
21bb0     FF 20 02 F6 | 	mov	local02, result3
21bb4     0A 21 02 F1 | 	add	local02, arg02
21bb8     01 20 46 F0 | 	shr	local02, #1
21bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
21bc0     10 21 62 56 |  if_ne	neg	local02, local02
21bc4     10 FB 01 F6 | 	mov	result1, local02
21bc8     04 00 90 FD | 	jmp	#LR__3081
21bcc                 | LR__3080
21bcc     00 FA 05 F6 | 	mov	result1, #0
21bd0                 | LR__3081
21bd0     A7 F0 03 F6 | 	mov	ptra, fp
21bd4     B2 00 A0 FD | 	call	#popregs_
21bd8                 | __system___float_tointeger_ret
21bd8     2D 00 64 FD | 	ret
21bdc                 | 
21bdc                 | __system___float_Unpack
21bdc     09 01 02 F6 | 	mov	_var01, arg01
21be0     1F 00 46 F0 | 	shr	_var01, #31
21be4     09 03 02 F6 | 	mov	_var02, arg01
21be8     01 02 66 F0 | 	shl	_var02, #1
21bec     18 02 4E F0 | 	shr	_var02, #24 wz
21bf0     17 13 06 F4 | 	bitl	arg01, #279
21bf4     06 12 66 50 |  if_ne	shl	arg01, #6
21bf8     1D 12 26 54 |  if_ne	bith	arg01, #29
21bfc     1C 00 90 5D |  if_ne	jmp	#LR__3090
21c00     09 05 92 F7 | 	encod	_var03, arg01 wc
21c04     01 04 06 C1 |  if_b	add	_var03, #1
21c08     17 04 86 F1 | 	sub	_var03, #23
21c0c     02 03 02 F6 | 	mov	_var02, _var03
21c10     07 FC 05 F6 | 	mov	result2, #7
21c14     02 FD 81 F1 | 	sub	result2, _var03
21c18     FE 12 62 F0 | 	shl	arg01, result2
21c1c                 | LR__3090
21c1c     7F 02 86 F1 | 	sub	_var02, #127
21c20     09 FF 01 F6 | 	mov	result3, arg01
21c24     00 FB 01 F6 | 	mov	result1, _var01
21c28     01 FD 01 F6 | 	mov	result2, _var02
21c2c                 | __system___float_Unpack_ret
21c2c     2D 00 64 FD | 	ret
21c30                 | 
21c30                 | __system___float_Pack
21c30     00 00 06 F6 | 	mov	_var01, #0
21c34     00 16 0E F2 | 	cmp	arg03, #0 wz
21c38     8C 00 90 AD |  if_e	jmp	#LR__3101
21c3c     0B 03 92 F7 | 	encod	_var02, arg03 wc
21c40     01 02 06 C1 |  if_b	add	_var02, #1
21c44     21 00 06 F6 | 	mov	_var01, #33
21c48     01 01 82 F1 | 	sub	_var01, _var02
21c4c     00 17 62 F0 | 	shl	arg03, _var01
21c50     03 02 06 F6 | 	mov	_var02, #3
21c54     00 03 82 F1 | 	sub	_var02, _var01
21c58     01 15 02 F1 | 	add	arg02, _var02
21c5c     0A 05 02 F6 | 	mov	_var03, arg02
21c60     00 17 06 F1 | 	add	arg03, #256
21c64     0B 03 02 F6 | 	mov	_var02, arg03
21c68     FF 02 2E F5 | 	andn	_var02, #255 wz
21c6c     01 04 06 A1 |  if_e	add	_var03, #1
21c70     7F 04 06 F1 | 	add	_var03, #127
21c74     FF FF 7F FF 
21c78     E9 05 46 F3 | 	fges	_var03, ##-23
21c7c     FF 04 66 F3 | 	fles	_var03, #255
21c80     01 04 56 F2 | 	cmps	_var03, #1 wc
21c84     1C 00 90 3D |  if_ae	jmp	#LR__3100
21c88     01 16 46 F0 | 	shr	arg03, #1
21c8c     1F 02 C6 F9 | 	decod	_var02, #31
21c90     0B 03 02 F1 | 	add	_var02, arg03
21c94     02 05 62 F6 | 	neg	_var03, _var03
21c98     02 03 42 F0 | 	shr	_var02, _var03
21c9c     01 17 02 F6 | 	mov	arg03, _var02
21ca0     00 04 06 F6 | 	mov	_var03, #0
21ca4                 | LR__3100
21ca4     09 FB 01 F6 | 	mov	result1, arg01
21ca8     1F FA 65 F0 | 	shl	result1, #31
21cac     02 03 02 F6 | 	mov	_var02, _var03
21cb0     17 02 66 F0 | 	shl	_var02, #23
21cb4     01 FB 41 F5 | 	or	result1, _var02
21cb8     0B 07 02 F6 | 	mov	_var04, arg03
21cbc     09 06 46 F0 | 	shr	_var04, #9
21cc0     03 FB 41 F5 | 	or	result1, _var04
21cc4     04 00 90 FD | 	jmp	#__system___float_Pack_ret
21cc8                 | LR__3101
21cc8     00 FB 01 F6 | 	mov	result1, _var01
21ccc                 | __system___float_Pack_ret
21ccc     2D 00 64 FD | 	ret
21cd0                 | 
21cd0                 | __system___basic_print_float
21cd0     05 4A 05 F6 | 	mov	COUNT_, #5
21cd4     A8 00 A0 FD | 	call	#pushregs_
21cd8     09 1F 02 F6 | 	mov	local01, arg01
21cdc     0A 21 02 F6 | 	mov	local02, arg02
21ce0     0B 23 0A F6 | 	mov	local03, arg03 wz
21ce4     0C 25 02 F6 | 	mov	local04, arg04
21ce8     14 00 90 5D |  if_ne	jmp	#LR__3110
21cec     23 24 0E F2 | 	cmp	local04, #35 wz
21cf0     80 02 10 AF 
21cf4     00 26 06 A6 |  if_e	mov	local05, ##537198592
21cf8     1D 26 C6 59 |  if_ne	decod	local05, #29
21cfc     13 23 02 F6 | 	mov	local03, local05
21d00                 | LR__3110
21d00     0F 13 02 F6 | 	mov	arg01, local01
21d04     40 27 B0 FD | 	call	#__system___gettxfunc
21d08     FD 26 0A F6 | 	mov	local05, result1 wz
21d0c     00 FA 05 A6 |  if_e	mov	result1, #0
21d10     13 13 02 56 |  if_ne	mov	arg01, local05
21d14     11 15 02 56 |  if_ne	mov	arg02, local03
21d18     10 17 02 56 |  if_ne	mov	arg03, local02
21d1c     12 19 02 56 |  if_ne	mov	arg04, local04
21d20     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
21d24     A7 F0 03 F6 | 	mov	ptra, fp
21d28     B2 00 A0 FD | 	call	#popregs_
21d2c                 | __system___basic_print_float_ret
21d2c     2D 00 64 FD | 	ret
21d30                 | 
21d30                 | __system____builtin_atoi
21d30     07 4A 05 F6 | 	mov	COUNT_, #7
21d34     A8 00 A0 FD | 	call	#pushregs_
21d38                 | __system____builtin_atoi_enter
21d38     09 1F 02 F6 | 	mov	local01, arg01
21d3c     0A 21 02 F6 | 	mov	local02, arg02
21d40     00 22 06 F6 | 	mov	local03, #0
21d44     00 24 06 F6 | 	mov	local04, #0
21d48     00 26 06 F6 | 	mov	local05, #0
21d4c     97 08 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
21d50                 | LR__3120
21d50     0F 29 C2 FA | 	rdbyte	local06, local01
21d54     20 28 0E F2 | 	cmp	local06, #32 wz
21d58     01 1E 06 A1 |  if_e	add	local01, #1
21d5c     F0 FF 9F AD |  if_e	jmp	#LR__3120
21d60                 | LR__3121
21d60     0F 2B C2 FA | 	rdbyte	local07, local01
21d64                 | LR__3122
21d64     2D 2A 0E F2 | 	cmp	local07, #45 wz
21d68     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
21d6c     18 00 90 5D |  if_ne	jmp	#LR__3123
21d70     01 1E 06 F1 | 	add	local01, #1
21d74     2D 2A 0E F2 | 	cmp	local07, #45 wz
21d78     01 28 06 A6 |  if_e	mov	local06, #1
21d7c     14 27 C2 A2 |  if_e	subr	local05, local06
21d80     0F 2B C2 FA | 	rdbyte	local07, local01
21d84     DC FF 9F FD | 	jmp	#LR__3122
21d88                 | LR__3123
21d88     97 48 48 FB | 	callpa	#(@LR__3131-@LR__3124)>>2,fcache_load_ptr_
21d8c                 | LR__3124
21d8c                 | LR__3125
21d8c     0F 2B C2 FA | 	rdbyte	local07, local01
21d90     5F 2A 0E F2 | 	cmp	local07, #95 wz
21d94     01 1E 06 F1 | 	add	local01, #1
21d98     F0 FF 9F AD |  if_e	jmp	#LR__3125
21d9c     30 2A 0E F2 | 	cmp	local07, #48 wz
21da0     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
21da4     00 24 06 A6 |  if_e	mov	local04, #0
21da8     60 00 90 AD |  if_e	jmp	#LR__3130
21dac     31 2A 56 F2 | 	cmps	local07, #49 wc
21db0     18 00 90 CD |  if_b	jmp	#LR__3126
21db4     3A 2A 56 F2 | 	cmps	local07, #58 wc
21db8     15 25 02 C6 |  if_b	mov	local04, local07
21dbc     30 24 86 C1 |  if_b	sub	local04, #48
21dc0     00 20 0E C2 |  if_b	cmp	local02, #0 wz
21dc4     0A 20 06 86 |  if_c_and_z	mov	local02, #10
21dc8     40 00 90 CD |  if_b	jmp	#LR__3129
21dcc                 | LR__3126
21dcc     0B 20 56 F2 | 	cmps	local02, #11 wc
21dd0     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
21dd4     14 00 90 CD |  if_b	jmp	#LR__3127
21dd8     67 2A 56 F2 | 	cmps	local07, #103 wc
21ddc     61 2A 86 C1 |  if_b	sub	local07, #97
21de0     0A 24 06 C6 |  if_b	mov	local04, #10
21de4     15 25 02 C1 |  if_b	add	local04, local07
21de8     20 00 90 CD |  if_b	jmp	#LR__3128
21dec                 | LR__3127
21dec     0B 20 56 F2 | 	cmps	local02, #11 wc
21df0     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
21df4     24 00 90 CD |  if_b	jmp	#LR__3132
21df8     47 2A 56 F2 | 	cmps	local07, #71 wc
21dfc     41 2A 86 C1 |  if_b	sub	local07, #65
21e00     0A 24 06 C6 |  if_b	mov	local04, #10
21e04     15 25 02 C1 |  if_b	add	local04, local07
21e08     10 00 90 3D |  if_ae	jmp	#LR__3132
21e0c                 | LR__3128
21e0c                 | LR__3129
21e0c                 | LR__3130
21e0c     11 21 02 FD | 	qmul	local02, local03
21e10     18 22 62 FD | 	getqx	local03
21e14     12 23 02 F1 | 	add	local03, local04
21e18     70 FF 9F FD | 	jmp	#LR__3124
21e1c                 | LR__3131
21e1c                 | LR__3132
21e1c     00 20 0E F2 | 	cmp	local02, #0 wz
21e20     64 00 90 5D |  if_ne	jmp	#LR__3138
21e24     78 2A 0E F2 | 	cmp	local07, #120 wz
21e28     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
21e2c     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
21e30     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
21e34     14 00 90 5D |  if_ne	jmp	#LR__3133
21e38     0F 13 02 F6 | 	mov	arg01, local01
21e3c     10 14 06 F6 | 	mov	arg02, #16
21e40     EC FE BF FD | 	call	#__system____builtin_atoi
21e44     FD 22 02 F6 | 	mov	local03, result1
21e48     3C 00 90 FD | 	jmp	#LR__3137
21e4c                 | LR__3133
21e4c     62 2A 0E F2 | 	cmp	local07, #98 wz
21e50     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
21e54     14 00 90 5D |  if_ne	jmp	#LR__3134
21e58     0F 13 02 F6 | 	mov	arg01, local01
21e5c     02 14 06 F6 | 	mov	arg02, #2
21e60     CC FE BF FD | 	call	#__system____builtin_atoi
21e64     FD 22 02 F6 | 	mov	local03, result1
21e68     1C 00 90 FD | 	jmp	#LR__3136
21e6c                 | LR__3134
21e6c     6F 2A 0E F2 | 	cmp	local07, #111 wz
21e70     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
21e74     10 00 90 5D |  if_ne	jmp	#LR__3135
21e78     0F 13 02 F6 | 	mov	arg01, local01
21e7c     08 14 06 F6 | 	mov	arg02, #8
21e80     AC FE BF FD | 	call	#__system____builtin_atoi
21e84     FD 22 02 F6 | 	mov	local03, result1
21e88                 | LR__3135
21e88                 | LR__3136
21e88                 | LR__3137
21e88                 | LR__3138
21e88     00 26 0E F2 | 	cmp	local05, #0 wz
21e8c     11 23 62 56 |  if_ne	neg	local03, local03
21e90     11 FB 01 F6 | 	mov	result1, local03
21e94     A7 F0 03 F6 | 	mov	ptra, fp
21e98     B2 00 A0 FD | 	call	#popregs_
21e9c                 | __system____builtin_atoi_ret
21e9c     2D 00 64 FD | 	ret
21ea0                 | 
21ea0                 | __system____builtin_atof
21ea0     07 4A 05 F6 | 	mov	COUNT_, #7
21ea4     A8 00 A0 FD | 	call	#pushregs_
21ea8     09 1F 02 F6 | 	mov	local01, arg01
21eac     00 20 06 F6 | 	mov	local02, #0
21eb0     00 22 06 F6 | 	mov	local03, #0
21eb4     00 24 06 F6 | 	mov	local04, #0
21eb8     00 26 06 F6 | 	mov	local05, #0
21ebc     97 08 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
21ec0                 | LR__3140
21ec0     0F 17 C2 FA | 	rdbyte	arg03, local01
21ec4     20 16 0E F2 | 	cmp	arg03, #32 wz
21ec8     01 1E 06 A1 |  if_e	add	local01, #1
21ecc     F0 FF 9F AD |  if_e	jmp	#LR__3140
21ed0                 | LR__3141
21ed0     0F 29 C2 FA | 	rdbyte	local06, local01
21ed4                 | LR__3142
21ed4     2B 28 0E F2 | 	cmp	local06, #43 wz
21ed8     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
21edc     14 00 90 5D |  if_ne	jmp	#LR__3143
21ee0     2D 28 0E F2 | 	cmp	local06, #45 wz
21ee4     1F 24 E6 A4 |  if_e	bitnot	local04, #31
21ee8     01 1E 06 F1 | 	add	local01, #1
21eec     0F 29 C2 FA | 	rdbyte	local06, local01
21ef0     E0 FF 9F FD | 	jmp	#LR__3142
21ef4                 | LR__3143
21ef4                 | LR__3144
21ef4     97 08 48 FB | 	callpa	#(@LR__3146-@LR__3145)>>2,fcache_load_ptr_
21ef8                 | LR__3145
21ef8     0F 29 C2 FA | 	rdbyte	local06, local01
21efc     5F 28 0E F2 | 	cmp	local06, #95 wz
21f00     01 1E 06 F1 | 	add	local01, #1
21f04     F0 FF 9F AD |  if_e	jmp	#LR__3145
21f08                 | LR__3146
21f08     00 28 0E F2 | 	cmp	local06, #0 wz
21f0c     5C 00 90 AD |  if_e	jmp	#LR__3148
21f10     30 28 56 F2 | 	cmps	local06, #48 wc
21f14     44 00 90 CD |  if_b	jmp	#LR__3147
21f18     3A 28 56 F2 | 	cmps	local06, #58 wc
21f1c     3C 00 90 3D |  if_ae	jmp	#LR__3147
21f20     10 13 02 F6 | 	mov	arg01, local02
21f24     00 90 20 FF 
21f28     00 14 06 F6 | 	mov	arg02, ##1092616192
21f2c     88 F7 BF FD | 	call	#__system___float_mul
21f30     FD 20 02 F6 | 	mov	local02, result1
21f34     30 28 86 F1 | 	sub	local06, #48
21f38     14 13 02 F6 | 	mov	arg01, local06
21f3c     74 F3 BF FD | 	call	#__system___float_fromuns
21f40     FD 14 02 F6 | 	mov	arg02, result1
21f44     10 13 02 F6 | 	mov	arg01, local02
21f48     9C F3 BF FD | 	call	#__system___float_add
21f4c     FD 20 02 F6 | 	mov	local02, result1
21f50     00 26 0E F2 | 	cmp	local05, #0 wz
21f54     01 22 86 51 |  if_ne	sub	local03, #1
21f58     98 FF 9F FD | 	jmp	#LR__3144
21f5c                 | LR__3147
21f5c     2E 28 0E F2 | 	cmp	local06, #46 wz
21f60     00 26 0E A2 |  if_e	cmp	local05, #0 wz
21f64     01 26 06 A6 |  if_e	mov	local05, #1
21f68     88 FF 9F AD |  if_e	jmp	#LR__3144
21f6c                 | LR__3148
21f6c     45 28 0E F2 | 	cmp	local06, #69 wz
21f70     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
21f74     18 00 90 5D |  if_ne	jmp	#LR__3149
21f78     0F 13 02 F6 | 	mov	arg01, local01
21f7c     00 14 06 F6 | 	mov	arg02, #0
21f80     AC FD BF FD | 	call	#__system____builtin_atoi
21f84     11 FB 01 F1 | 	add	result1, local03
21f88     FD 2A 02 F6 | 	mov	local07, result1
21f8c     04 00 90 FD | 	jmp	#LR__3150
21f90                 | LR__3149
21f90     11 2B 02 F6 | 	mov	local07, local03
21f94                 | LR__3150
21f94     15 17 02 F6 | 	mov	arg03, local07
21f98     10 13 02 F6 | 	mov	arg01, local02
21f9c     00 90 20 FF 
21fa0     00 14 06 F6 | 	mov	arg02, ##1092616192
21fa4     BC 06 B0 FD | 	call	#__system___float_pow_n
21fa8     12 FB 61 F5 | 	xor	result1, local04
21fac     A7 F0 03 F6 | 	mov	ptra, fp
21fb0     B2 00 A0 FD | 	call	#popregs_
21fb4                 | __system____builtin_atof_ret
21fb4     2D 00 64 FD | 	ret
21fb8                 | 
21fb8                 | __system____builtin_ilogb
21fb8     20 FC BF FD | 	call	#__system___float_Unpack
21fbc     00 FE 0D F2 | 	cmp	result3, #0 wz
21fc0     00 00 40 AF 
21fc4     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
21fc8     24 00 90 AD |  if_e	jmp	#LR__3161
21fcc     80 FC 0D F2 | 	cmp	result2, #128 wz
21fd0     18 00 90 5D |  if_ne	jmp	#LR__3160
21fd4     00 00 10 FF 
21fd8     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
21fdc     1E FA CD A9 |  if_e	bmask	result1, #30
21fe0     0C 00 90 AD |  if_e	jmp	#LR__3161
21fe4     1F FA C5 F9 | 	decod	result1, #31
21fe8     04 00 90 FD | 	jmp	#LR__3161
21fec                 | LR__3160
21fec     FE FA 01 F6 | 	mov	result1, result2
21ff0                 | LR__3161
21ff0                 | __system____builtin_ilogb_ret
21ff0     2D 00 64 FD | 	ret
21ff4                 | 
21ff4                 | __system____builtin_sinf
21ff4     03 4A 05 F6 | 	mov	COUNT_, #3
21ff8     A8 00 A0 FD | 	call	#pushregs_
21ffc     09 1F 02 F6 | 	mov	local01, arg01
22000     87 64 20 FF 
22004     DB 15 06 F6 | 	mov	arg02, ##1086918619
22008     B0 F8 BF FD | 	call	#__system___float_div
2200c     FD 12 02 F6 | 	mov	arg01, result1
22010     00 14 06 F6 | 	mov	arg02, #0
22014     68 FB BF FD | 	call	#__system___float_tointeger
22018     FD 16 0A F6 | 	mov	arg03, result1 wz
2201c     44 00 90 AD |  if_e	jmp	#LR__3170
22020     0B 13 52 F6 | 	abs	arg01, arg03 wc
22024     1F 20 C6 C9 |  if_b	decod	local02, #31
22028     00 20 06 36 |  if_ae	mov	local02, #0
2202c     84 F2 BF FD | 	call	#__system___float_fromuns
22030     10 FB 61 F5 | 	xor	result1, local02
22034     FD 12 02 F6 | 	mov	arg01, result1
22038     1E 14 C6 F9 | 	decod	arg02, #30
2203c     78 F6 BF FD | 	call	#__system___float_mul
22040     FD 12 02 F6 | 	mov	arg01, result1
22044     87 24 20 FF 
22048     DB 15 06 F6 | 	mov	arg02, ##1078530011
2204c     68 F6 BF FD | 	call	#__system___float_mul
22050     FD 14 02 F6 | 	mov	arg02, result1
22054     0F 13 02 F6 | 	mov	arg01, local01
22058     1F 14 E6 F4 | 	bitnot	arg02, #31
2205c     88 F2 BF FD | 	call	#__system___float_add
22060     FD 1E 02 F6 | 	mov	local01, result1
22064                 | LR__3170
22064     0F 13 02 F6 | 	mov	arg01, local01
22068     66 E6 1E FF 
2206c     CD 14 06 F6 | 	mov	arg02, ##1036831949
22070     01 16 06 F6 | 	mov	arg03, #1
22074     74 FA BF FD | 	call	#__system___float_cmp
22078     00 FA 55 F2 | 	cmps	result1, #0 wc
2207c     5C 00 90 3D |  if_ae	jmp	#LR__3171
22080     0F 13 02 F6 | 	mov	arg01, local01
22084     66 E6 5E FF 
22088     CD 14 06 F6 | 	mov	arg02, ##-1110651699
2208c     01 16 66 F6 | 	neg	arg03, #1
22090     58 FA BF FD | 	call	#__system___float_cmp
22094     01 FA 55 F2 | 	cmps	result1, #1 wc
22098     40 00 90 CD |  if_b	jmp	#LR__3171
2209c     0F 13 02 F6 | 	mov	arg01, local01
220a0     0F 15 02 F6 | 	mov	arg02, local01
220a4     10 F6 BF FD | 	call	#__system___float_mul
220a8     FD 12 02 F6 | 	mov	arg01, result1
220ac     0F 15 02 F6 | 	mov	arg02, local01
220b0     04 F6 BF FD | 	call	#__system___float_mul
220b4     FD 12 02 F6 | 	mov	arg01, result1
220b8     00 60 20 FF 
220bc     00 14 06 F6 | 	mov	arg02, ##1086324736
220c0     F8 F7 BF FD | 	call	#__system___float_div
220c4     FD 14 02 F6 | 	mov	arg02, result1
220c8     0F 13 02 F6 | 	mov	arg01, local01
220cc     1F 14 E6 F4 | 	bitnot	arg02, #31
220d0     14 F2 BF FD | 	call	#__system___float_add
220d4     FD 22 02 F6 | 	mov	local03, result1
220d8     54 00 90 FD | 	jmp	#LR__3172
220dc                 | LR__3171
220dc     0F 13 02 F6 | 	mov	arg01, local01
220e0     7C 91 26 FF 
220e4     83 15 06 F6 | 	mov	arg02, ##1294137731
220e8     CC F5 BF FD | 	call	#__system___float_mul
220ec     FD 12 02 F6 | 	mov	arg01, result1
220f0     00 14 06 F6 | 	mov	arg02, #0
220f4     88 FA BF FD | 	call	#__system___float_tointeger
220f8     02 FA 65 F0 | 	shl	result1, #2
220fc     00 00 A0 FF 
22100     FD 00 48 FD | 	qrotate	##1073741824, result1
22104     19 12 62 FD | 	getqy	arg01
22108     09 13 52 F6 | 	abs	arg01, arg01 wc
2210c     1F 20 C6 C9 |  if_b	decod	local02, #31
22110     00 20 06 36 |  if_ae	mov	local02, #0
22114     9C F1 BF FD | 	call	#__system___float_fromuns
22118     10 FB 61 F5 | 	xor	result1, local02
2211c     FD 12 02 F6 | 	mov	arg01, result1
22120     00 40 27 FF 
22124     00 14 06 F6 | 	mov	arg02, ##1317011456
22128     90 F7 BF FD | 	call	#__system___float_div
2212c     FD 22 02 F6 | 	mov	local03, result1
22130                 | LR__3172
22130     11 FB 01 F6 | 	mov	result1, local03
22134     A7 F0 03 F6 | 	mov	ptra, fp
22138     B2 00 A0 FD | 	call	#popregs_
2213c                 | __system____builtin_sinf_ret
2213c     2D 00 64 FD | 	ret
22140                 | 
22140                 | __system____builtin_tanf
22140     02 4A 05 F6 | 	mov	COUNT_, #2
22144     A8 00 A0 FD | 	call	#pushregs_
22148     09 1F 02 F6 | 	mov	local01, arg01
2214c     A4 FE BF FD | 	call	#__system____builtin_sinf
22150     FD 20 02 F6 | 	mov	local02, result1
22154     0F 15 02 F6 | 	mov	arg02, local01
22158     87 E4 1F FF 
2215c     DB 13 06 F6 | 	mov	arg01, ##1070141403
22160     1F 14 E6 F4 | 	bitnot	arg02, #31
22164     80 F1 BF FD | 	call	#__system___float_add
22168     FD 12 02 F6 | 	mov	arg01, result1
2216c     84 FE BF FD | 	call	#__system____builtin_sinf
22170     FD 14 02 F6 | 	mov	arg02, result1
22174     10 13 02 F6 | 	mov	arg01, local02
22178     40 F7 BF FD | 	call	#__system___float_div
2217c     A7 F0 03 F6 | 	mov	ptra, fp
22180     B2 00 A0 FD | 	call	#popregs_
22184                 | __system____builtin_tanf_ret
22184     2D 00 64 FD | 	ret
22188                 | 
22188                 | __system____builtin_asinf
22188     01 4A 05 F6 | 	mov	COUNT_, #1
2218c     A8 00 A0 FD | 	call	#pushregs_
22190     09 1F 02 F6 | 	mov	local01, arg01
22194     0F 15 02 F6 | 	mov	arg02, local01
22198     0F 13 02 F6 | 	mov	arg01, local01
2219c     18 F5 BF FD | 	call	#__system___float_mul
221a0     FD 14 02 F6 | 	mov	arg02, result1
221a4     00 C0 1F FF 
221a8     00 12 06 F6 | 	mov	arg01, ##1065353216
221ac     1F 14 E6 F4 | 	bitnot	arg02, #31
221b0     34 F1 BF FD | 	call	#__system___float_add
221b4     FD 12 02 F6 | 	mov	arg01, result1
221b8     24 F4 BF FD | 	call	#__system___float_sqrt
221bc     FD 14 02 F6 | 	mov	arg02, result1
221c0     0F 13 02 F6 | 	mov	arg01, local01
221c4     58 00 B0 FD | 	call	#__system____builtin_atan2f
221c8     A7 F0 03 F6 | 	mov	ptra, fp
221cc     B2 00 A0 FD | 	call	#popregs_
221d0                 | __system____builtin_asinf_ret
221d0     2D 00 64 FD | 	ret
221d4                 | 
221d4                 | __system____builtin_acosf
221d4     01 4A 05 F6 | 	mov	COUNT_, #1
221d8     A8 00 A0 FD | 	call	#pushregs_
221dc     09 1F 02 F6 | 	mov	local01, arg01
221e0     0F 15 02 F6 | 	mov	arg02, local01
221e4     0F 13 02 F6 | 	mov	arg01, local01
221e8     CC F4 BF FD | 	call	#__system___float_mul
221ec     FD 14 02 F6 | 	mov	arg02, result1
221f0     00 C0 1F FF 
221f4     00 12 06 F6 | 	mov	arg01, ##1065353216
221f8     1F 14 E6 F4 | 	bitnot	arg02, #31
221fc     E8 F0 BF FD | 	call	#__system___float_add
22200     FD 12 02 F6 | 	mov	arg01, result1
22204     D8 F3 BF FD | 	call	#__system___float_sqrt
22208     FD 12 02 F6 | 	mov	arg01, result1
2220c     0F 15 02 F6 | 	mov	arg02, local01
22210     0C 00 B0 FD | 	call	#__system____builtin_atan2f
22214     A7 F0 03 F6 | 	mov	ptra, fp
22218     B2 00 A0 FD | 	call	#popregs_
2221c                 | __system____builtin_acosf_ret
2221c     2D 00 64 FD | 	ret
22220                 | 
22220                 | __system____builtin_atan2f
22220     04 4A 05 F6 | 	mov	COUNT_, #4
22224     A8 00 A0 FD | 	call	#pushregs_
22228     09 1F 02 F6 | 	mov	local01, arg01
2222c     0A 21 02 F6 | 	mov	local02, arg02
22230     0F 13 02 F6 | 	mov	arg01, local01
22234     00 14 06 F6 | 	mov	arg02, #0
22238     01 16 06 F6 | 	mov	arg03, #1
2223c     AC F8 BF FD | 	call	#__system___float_cmp
22240     00 FA 0D F2 | 	cmp	result1, #0 wz
22244     28 00 90 5D |  if_ne	jmp	#LR__3180
22248     10 13 02 F6 | 	mov	arg01, local02
2224c     00 14 06 F6 | 	mov	arg02, #0
22250     01 16 06 F6 | 	mov	arg03, #1
22254     94 F8 BF FD | 	call	#__system___float_cmp
22258     00 FA 55 F2 | 	cmps	result1, #0 wc
2225c     87 24 60 CF 
22260     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
22264     DC 00 90 CD |  if_b	jmp	#LR__3181
22268     00 FA 05 F6 | 	mov	result1, #0
2226c     D4 00 90 FD | 	jmp	#LR__3181
22270                 | LR__3180
22270     10 13 02 F6 | 	mov	arg01, local02
22274     10 15 02 F6 | 	mov	arg02, local02
22278     3C F4 BF FD | 	call	#__system___float_mul
2227c     FD 22 02 F6 | 	mov	local03, result1
22280     0F 13 02 F6 | 	mov	arg01, local01
22284     0F 15 02 F6 | 	mov	arg02, local01
22288     2C F4 BF FD | 	call	#__system___float_mul
2228c     FD 14 02 F6 | 	mov	arg02, result1
22290     11 13 02 F6 | 	mov	arg01, local03
22294     50 F0 BF FD | 	call	#__system___float_add
22298     FD 12 02 F6 | 	mov	arg01, result1
2229c     40 F3 BF FD | 	call	#__system___float_sqrt
222a0     FD 22 02 F6 | 	mov	local03, result1
222a4     10 13 02 F6 | 	mov	arg01, local02
222a8     11 15 02 F6 | 	mov	arg02, local03
222ac     0C F6 BF FD | 	call	#__system___float_div
222b0     FD 20 02 F6 | 	mov	local02, result1
222b4     0F 13 02 F6 | 	mov	arg01, local01
222b8     11 15 02 F6 | 	mov	arg02, local03
222bc     FC F5 BF FD | 	call	#__system___float_div
222c0     FD 1E 02 F6 | 	mov	local01, result1
222c4     00 40 27 FF 
222c8     00 12 06 F6 | 	mov	arg01, ##1317011456
222cc     10 15 02 F6 | 	mov	arg02, local02
222d0     E4 F3 BF FD | 	call	#__system___float_mul
222d4     FD 12 02 F6 | 	mov	arg01, result1
222d8     00 14 06 F6 | 	mov	arg02, #0
222dc     A0 F8 BF FD | 	call	#__system___float_tointeger
222e0     FD 22 02 F6 | 	mov	local03, result1
222e4     00 40 27 FF 
222e8     00 12 06 F6 | 	mov	arg01, ##1317011456
222ec     0F 15 02 F6 | 	mov	arg02, local01
222f0     C4 F3 BF FD | 	call	#__system___float_mul
222f4     FD 12 02 F6 | 	mov	arg01, result1
222f8     00 14 06 F6 | 	mov	arg02, #0
222fc     80 F8 BF FD | 	call	#__system___float_tointeger
22300     FD 22 52 FD | 	qvector	local03, result1
22304     87 24 20 FF 
22308     DB 23 06 F6 | 	mov	local03, ##1078530011
2230c     19 12 62 FD | 	getqy	arg01
22310     01 12 C6 F0 | 	sar	arg01, #1
22314     09 13 52 F6 | 	abs	arg01, arg01 wc
22318     1F 24 C6 C9 |  if_b	decod	local04, #31
2231c     00 24 06 36 |  if_ae	mov	local04, #0
22320     90 EF BF FD | 	call	#__system___float_fromuns
22324     12 FB 61 F5 | 	xor	result1, local04
22328     FD 12 02 F6 | 	mov	arg01, result1
2232c     00 40 27 FF 
22330     00 14 06 F6 | 	mov	arg02, ##1317011456
22334     84 F5 BF FD | 	call	#__system___float_div
22338     FD 14 02 F6 | 	mov	arg02, result1
2233c     11 13 02 F6 | 	mov	arg01, local03
22340     74 F3 BF FD | 	call	#__system___float_mul
22344                 | LR__3181
22344     A7 F0 03 F6 | 	mov	ptra, fp
22348     B2 00 A0 FD | 	call	#popregs_
2234c                 | __system____builtin_atan2f_ret
2234c     2D 00 64 FD | 	ret
22350                 | 
22350                 | __system____builtin_exp2f
22350     04 4A 05 F6 | 	mov	COUNT_, #4
22354     A8 00 A0 FD | 	call	#pushregs_
22358     09 1F 02 F6 | 	mov	local01, arg01
2235c     00 7F 21 FF 
22360     00 14 06 F6 | 	mov	arg02, ##1123942400
22364     01 16 66 F6 | 	neg	arg03, #1
22368     80 F7 BF FD | 	call	#__system___float_cmp
2236c     00 FA 55 F2 | 	cmps	result1, #0 wc
22370     00 C0 3F 3F 
22374     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
22378     DC 00 90 3D |  if_ae	jmp	#LR__3191
2237c     0F 13 02 F6 | 	mov	arg01, local01
22380     00 7F 61 FF 
22384     00 14 06 F6 | 	mov	arg02, ##-1023541248
22388     01 16 06 F6 | 	mov	arg03, #1
2238c     5C F7 BF FD | 	call	#__system___float_cmp
22390     00 FA 55 F2 | 	cmps	result1, #0 wc
22394     00 FA 05 C6 |  if_b	mov	result1, #0
22398     BC 00 90 CD |  if_b	jmp	#LR__3191
2239c     0F 13 02 F6 | 	mov	arg01, local01
223a0     00 14 06 F6 | 	mov	arg02, #0
223a4     D8 F7 BF FD | 	call	#__system___float_tointeger
223a8     FD 20 02 F6 | 	mov	local02, result1
223ac     10 13 52 F6 | 	abs	arg01, local02 wc
223b0     1F 22 C6 C9 |  if_b	decod	local03, #31
223b4     00 22 06 36 |  if_ae	mov	local03, #0
223b8     F8 EE BF FD | 	call	#__system___float_fromuns
223bc     11 FB 61 F5 | 	xor	result1, local03
223c0     FD 14 02 F6 | 	mov	arg02, result1
223c4     0F 13 02 F6 | 	mov	arg01, local01
223c8     1F 14 E6 F4 | 	bitnot	arg02, #31
223cc     18 EF BF FD | 	call	#__system___float_add
223d0     FD 24 02 F6 | 	mov	local04, result1
223d4     12 13 02 F6 | 	mov	arg01, local04
223d8     00 14 06 F6 | 	mov	arg02, #0
223dc     01 16 06 F6 | 	mov	arg03, #1
223e0     08 F7 BF FD | 	call	#__system___float_cmp
223e4     00 FA 55 F2 | 	cmps	result1, #0 wc
223e8     18 00 90 3D |  if_ae	jmp	#LR__3190
223ec     12 13 02 F6 | 	mov	arg01, local04
223f0     00 C0 1F FF 
223f4     00 14 06 F6 | 	mov	arg02, ##1065353216
223f8     EC EE BF FD | 	call	#__system___float_add
223fc     FD 24 02 F6 | 	mov	local04, result1
22400     01 20 86 F1 | 	sub	local02, #1
22404                 | LR__3190
22404     7F 20 06 F1 | 	add	local02, #127
22408     17 20 66 F0 | 	shl	local02, #23
2240c     12 13 02 F6 | 	mov	arg01, local04
22410     00 80 26 FF 
22414     00 14 06 F6 | 	mov	arg02, ##1291845632
22418     9C F2 BF FD | 	call	#__system___float_mul
2241c     FD 12 02 F6 | 	mov	arg01, result1
22420     00 14 06 F6 | 	mov	arg02, #0
22424     58 F7 BF FD | 	call	#__system___float_tointeger
22428     FD 24 0A F6 | 	mov	local04, result1 wz
2242c     10 FB 01 A6 |  if_e	mov	result1, local02
22430     24 00 90 AD |  if_e	jmp	#LR__3191
22434     3E 24 26 F4 | 	bith	local04, #62
22438     0F 24 62 FD | 	qexp	local04
2243c     10 13 02 F6 | 	mov	arg01, local02
22440     18 14 62 FD | 	getqx	arg02
22444     01 14 06 F1 | 	add	arg02, #1
22448     01 14 46 F0 | 	shr	arg02, #1
2244c     00 80 1F FF 
22450     00 14 06 F1 | 	add	arg02, ##1056964608
22454     60 F2 BF FD | 	call	#__system___float_mul
22458                 | LR__3191
22458     A7 F0 03 F6 | 	mov	ptra, fp
2245c     B2 00 A0 FD | 	call	#popregs_
22460                 | __system____builtin_exp2f_ret
22460     2D 00 64 FD | 	ret
22464                 | 
22464                 | __system____builtin_log2f
22464     06 4A 05 F6 | 	mov	COUNT_, #6
22468     A8 00 A0 FD | 	call	#pushregs_
2246c     09 1F 02 F6 | 	mov	local01, arg01
22470     09 21 0A F6 | 	mov	local02, arg01 wz
22474     00 00 40 5F 
22478     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
2247c     00 40 00 AF 
22480     00 FA 65 A6 |  if_e	neg	result1, ##8388608
22484     08 01 90 AD |  if_e	jmp	#LR__3204
22488     00 20 56 F2 | 	cmps	local02, #0 wc
2248c     00 E0 3F CF 
22490     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
22494     F8 00 90 CD |  if_b	jmp	#LR__3204
22498     0F 13 02 F6 | 	mov	arg01, local01
2249c     00 90 20 FF 
224a0     00 14 06 F6 | 	mov	arg02, ##1092616192
224a4     01 16 06 F6 | 	mov	arg03, #1
224a8     40 F6 BF FD | 	call	#__system___float_cmp
224ac     00 FA 0D F2 | 	cmp	result1, #0 wz
224b0     4D 2A 20 AF 
224b4     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
224b8     D4 00 90 AD |  if_e	jmp	#LR__3204
224bc     0F 13 02 F6 | 	mov	arg01, local01
224c0     FC 16 20 FF 
224c4     54 14 06 F6 | 	mov	arg02, ##1076754516
224c8     01 16 06 F6 | 	mov	arg03, #1
224cc     1C F6 BF FD | 	call	#__system___float_cmp
224d0     00 FA 0D F2 | 	cmp	result1, #0 wz
224d4     55 DC 1F AF 
224d8     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
224dc     B0 00 90 AD |  if_e	jmp	#LR__3204
224e0     10 23 02 F6 | 	mov	local03, local02
224e4     17 22 46 F0 | 	shr	local03, #23
224e8     11 23 E2 F8 | 	getbyte	local03, local03, #0
224ec     17 21 06 F4 | 	bitl	local02, #279
224f0     10 25 02 F6 | 	mov	local04, local02
224f4     FF 22 0E F2 | 	cmp	local03, #255 wz
224f8     1C 00 90 5D |  if_ne	jmp	#LR__3200
224fc     00 24 0E F2 | 	cmp	local04, #0 wz
22500     00 C0 3F 5F 
22504     00 26 06 56 |  if_ne	mov	local05, ##2139095040
22508     00 E0 3F AF 
2250c     00 26 06 A6 |  if_e	mov	local05, ##2143289344
22510     13 FB 01 F6 | 	mov	result1, local05
22514     78 00 90 FD | 	jmp	#LR__3204
22518                 | LR__3200
22518     00 22 0E F2 | 	cmp	local03, #0 wz
2251c     17 24 26 54 |  if_ne	bith	local04, #23
22520     7F 22 86 51 |  if_ne	sub	local03, #127
22524     28 00 90 5D |  if_ne	jmp	#LR__3203
22528     00 24 0E F2 | 	cmp	local04, #0 wz
2252c     00 40 00 AF 
22530     00 FA 65 A6 |  if_e	neg	result1, ##8388608
22534     58 00 90 AD |  if_e	jmp	#LR__3204
22538     7E 22 66 F6 | 	neg	local03, #126
2253c     97 08 48 FB | 	callpa	#(@LR__3202-@LR__3201)>>2,fcache_load_ptr_
22540                 | LR__3201
22540     17 24 2E F4 | 	testbn	local04, #23 wz
22544     01 24 66 A0 |  if_e	shl	local04, #1
22548     01 22 06 A1 |  if_e	add	local03, #1
2254c     F0 FF 9F AD |  if_e	jmp	#LR__3201
22550                 | LR__3202
22550                 | LR__3203
22550     0E 24 62 FD | 	qlog	local04
22554     01 22 86 F1 | 	sub	local03, #1
22558     11 13 52 F6 | 	abs	arg01, local03 wc
2255c     1F 28 C6 C9 |  if_b	decod	local06, #31
22560     00 28 06 36 |  if_ae	mov	local06, #0
22564     18 26 62 FD | 	getqx	local05
22568     9B 26 06 F4 | 	bitl	local05, #155
2256c     08 26 06 F1 | 	add	local05, #8
22570     04 26 46 F0 | 	shr	local05, #4
22574     00 C0 1F FF 
22578     00 26 06 F1 | 	add	local05, ##1065353216
2257c     34 ED BF FD | 	call	#__system___float_fromuns
22580     14 FB 61 F5 | 	xor	result1, local06
22584     FD 14 02 F6 | 	mov	arg02, result1
22588     13 13 02 F6 | 	mov	arg01, local05
2258c     58 ED BF FD | 	call	#__system___float_add
22590                 | LR__3204
22590     A7 F0 03 F6 | 	mov	ptra, fp
22594     B2 00 A0 FD | 	call	#popregs_
22598                 | __system____builtin_log2f_ret
22598     2D 00 64 FD | 	ret
2259c                 | 
2259c                 | __system____builtin_powf
2259c     04 4A 05 F6 | 	mov	COUNT_, #4
225a0     A8 00 A0 FD | 	call	#pushregs_
225a4     09 1F 02 F6 | 	mov	local01, arg01
225a8     0A 21 02 F6 | 	mov	local02, arg02
225ac     10 13 02 F6 | 	mov	arg01, local02
225b0     00 14 06 F6 | 	mov	arg02, #0
225b4     C8 F5 BF FD | 	call	#__system___float_tointeger
225b8     FD 22 02 F6 | 	mov	local03, result1
225bc     11 13 52 F6 | 	abs	arg01, local03 wc
225c0     1F 24 C6 C9 |  if_b	decod	local04, #31
225c4     00 24 06 36 |  if_ae	mov	local04, #0
225c8     E8 EC BF FD | 	call	#__system___float_fromuns
225cc     12 FB 61 F5 | 	xor	result1, local04
225d0     FD 12 02 F6 | 	mov	arg01, result1
225d4     10 15 02 F6 | 	mov	arg02, local02
225d8     01 16 06 F6 | 	mov	arg03, #1
225dc     0C F5 BF FD | 	call	#__system___float_cmp
225e0     00 FA 0D F2 | 	cmp	result1, #0 wz
225e4     18 00 90 5D |  if_ne	jmp	#LR__3210
225e8     00 C0 1F FF 
225ec     00 12 06 F6 | 	mov	arg01, ##1065353216
225f0     0F 15 02 F6 | 	mov	arg02, local01
225f4     11 17 02 F6 | 	mov	arg03, local03
225f8     68 00 B0 FD | 	call	#__system___float_pow_n
225fc     58 00 90 FD | 	jmp	#LR__3211
22600                 | LR__3210
22600     0F 13 02 F6 | 	mov	arg01, local01
22604     00 14 06 F6 | 	mov	arg02, #0
22608     01 16 06 F6 | 	mov	arg03, #1
2260c     DC F4 BF FD | 	call	#__system___float_cmp
22610     00 FA 55 F2 | 	cmps	result1, #0 wc
22614     00 E0 3F CF 
22618     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2261c     38 00 90 CD |  if_b	jmp	#LR__3211
22620     0F 13 02 F6 | 	mov	arg01, local01
22624     00 14 06 F6 | 	mov	arg02, #0
22628     01 16 06 F6 | 	mov	arg03, #1
2262c     BC F4 BF FD | 	call	#__system___float_cmp
22630     00 FA 0D F2 | 	cmp	result1, #0 wz
22634     00 FA 05 A6 |  if_e	mov	result1, #0
22638     1C 00 90 AD |  if_e	jmp	#LR__3211
2263c     0F 13 02 F6 | 	mov	arg01, local01
22640     20 FE BF FD | 	call	#__system____builtin_log2f
22644     FD 12 02 F6 | 	mov	arg01, result1
22648     10 15 02 F6 | 	mov	arg02, local02
2264c     68 F0 BF FD | 	call	#__system___float_mul
22650     FD 12 02 F6 | 	mov	arg01, result1
22654     F8 FC BF FD | 	call	#__system____builtin_exp2f
22658                 | LR__3211
22658     A7 F0 03 F6 | 	mov	ptra, fp
2265c     B2 00 A0 FD | 	call	#popregs_
22660                 | __system____builtin_powf_ret
22660     2D 00 64 FD | 	ret
22664                 | 
22664                 | __system___float_pow_n
22664     05 4A 05 F6 | 	mov	COUNT_, #5
22668     A8 00 A0 FD | 	call	#pushregs_
2266c     09 1F 02 F6 | 	mov	local01, arg01
22670     0A 21 02 F6 | 	mov	local02, arg02
22674     0B 23 02 F6 | 	mov	local03, arg03
22678     00 22 56 F2 | 	cmps	local03, #0 wc
2267c     18 00 90 3D |  if_ae	jmp	#LR__3220
22680     01 24 06 F6 | 	mov	local04, #1
22684     11 23 62 F6 | 	neg	local03, local03
22688     00 22 56 F2 | 	cmps	local03, #0 wc
2268c     00 FA 05 C6 |  if_b	mov	result1, #0
22690     94 00 90 CD |  if_b	jmp	#LR__3228
22694     04 00 90 FD | 	jmp	#LR__3221
22698                 | LR__3220
22698     00 24 06 F6 | 	mov	local04, #0
2269c                 | LR__3221
2269c     00 C0 1F FF 
226a0     00 26 06 F6 | 	mov	local05, ##1065353216
226a4                 | LR__3222
226a4     01 22 56 F2 | 	cmps	local03, #1 wc
226a8     30 00 90 CD |  if_b	jmp	#LR__3224
226ac     01 22 CE F7 | 	test	local03, #1 wz
226b0     10 00 90 AD |  if_e	jmp	#LR__3223
226b4     13 13 02 F6 | 	mov	arg01, local05
226b8     10 15 02 F6 | 	mov	arg02, local02
226bc     F8 EF BF FD | 	call	#__system___float_mul
226c0     FD 26 02 F6 | 	mov	local05, result1
226c4                 | LR__3223
226c4     01 22 C6 F0 | 	sar	local03, #1
226c8     10 13 02 F6 | 	mov	arg01, local02
226cc     10 15 02 F6 | 	mov	arg02, local02
226d0     E4 EF BF FD | 	call	#__system___float_mul
226d4     FD 20 02 F6 | 	mov	local02, result1
226d8     C8 FF 9F FD | 	jmp	#LR__3222
226dc                 | LR__3224
226dc     00 24 0E F2 | 	cmp	local04, #0 wz
226e0     14 00 90 AD |  if_e	jmp	#LR__3225
226e4     0F 13 02 F6 | 	mov	arg01, local01
226e8     13 15 02 F6 | 	mov	arg02, local05
226ec     CC F1 BF FD | 	call	#__system___float_div
226f0     FD 26 02 F6 | 	mov	local05, result1
226f4     2C 00 90 FD | 	jmp	#LR__3227
226f8                 | LR__3225
226f8     0F 13 02 F6 | 	mov	arg01, local01
226fc     00 C0 1F FF 
22700     00 14 06 F6 | 	mov	arg02, ##1065353216
22704     01 16 06 F6 | 	mov	arg03, #1
22708     E0 F3 BF FD | 	call	#__system___float_cmp
2270c     00 FA 0D F2 | 	cmp	result1, #0 wz
22710     10 00 90 AD |  if_e	jmp	#LR__3226
22714     0F 13 02 F6 | 	mov	arg01, local01
22718     13 15 02 F6 | 	mov	arg02, local05
2271c     98 EF BF FD | 	call	#__system___float_mul
22720     FD 26 02 F6 | 	mov	local05, result1
22724                 | LR__3226
22724                 | LR__3227
22724     13 FB 01 F6 | 	mov	result1, local05
22728                 | LR__3228
22728     A7 F0 03 F6 | 	mov	ptra, fp
2272c     B2 00 A0 FD | 	call	#popregs_
22730                 | __system___float_pow_n_ret
22730     2D 00 64 FD | 	ret
22734                 | 
22734                 | __system___gc_ptrs
22734     EC 00 02 F6 | 	mov	_var01, __heap_ptr
22738     00 03 02 F6 | 	mov	_var02, _var01
2273c     76 01 00 FF 
22740     F8 03 06 F1 | 	add	_var02, ##191992
22744     00 FD 09 FB | 	rdlong	result2, _var01 wz
22748     74 00 90 5D |  if_ne	jmp	#LR__3230
2274c     01 FD 01 F6 | 	mov	result2, _var02
22750     00 FD 81 F1 | 	sub	result2, _var01
22754     00 03 58 FC | 	wrword	#1, _var01
22758     00 FB 01 F6 | 	mov	result1, _var01
2275c     02 FA 05 F1 | 	add	result1, #2
22760     36 00 80 FF 
22764     FD 20 59 FC | 	wrword	##27792, result1
22768     00 FB 01 F6 | 	mov	result1, _var01
2276c     04 FA 05 F1 | 	add	result1, #4
22770     FD 00 58 FC | 	wrword	#0, result1
22774     00 FB 01 F6 | 	mov	result1, _var01
22778     06 FA 05 F1 | 	add	result1, #6
2277c     FD 02 58 FC | 	wrword	#1, result1
22780     10 00 06 F1 | 	add	_var01, #16
22784     FE FC 51 F6 | 	abs	result2, result2 wc
22788     04 FC 45 F0 | 	shr	result2, #4
2278c     FE FC 81 F6 | 	negc	result2, result2
22790     00 FD 51 FC | 	wrword	result2, _var01
22794     00 FD 01 F6 | 	mov	result2, _var01
22798     02 FC 05 F1 | 	add	result2, #2
2279c     36 00 80 FF 
227a0     FE 1E 59 FC | 	wrword	##27791, result2
227a4     00 FD 01 F6 | 	mov	result2, _var01
227a8     04 FC 05 F1 | 	add	result2, #4
227ac     FE 00 58 FC | 	wrword	#0, result2
227b0     00 FD 01 F6 | 	mov	result2, _var01
227b4     06 FC 05 F1 | 	add	result2, #6
227b8     FE 00 58 FC | 	wrword	#0, result2
227bc     10 00 86 F1 | 	sub	_var01, #16
227c0                 | LR__3230
227c0     00 FB 01 F6 | 	mov	result1, _var01
227c4     01 FD 01 F6 | 	mov	result2, _var02
227c8                 | __system___gc_ptrs_ret
227c8     2D 00 64 FD | 	ret
227cc                 | 
227cc                 | __system___gc_tryalloc
227cc     0B 4A 05 F6 | 	mov	COUNT_, #11
227d0     A8 00 A0 FD | 	call	#pushregs_
227d4     09 1F 02 F6 | 	mov	local01, arg01
227d8     0A 21 02 F6 | 	mov	local02, arg02
227dc     54 FF BF FD | 	call	#__system___gc_ptrs
227e0     FD 22 02 F6 | 	mov	local03, result1
227e4     FE 24 02 F6 | 	mov	local04, result2
227e8     11 27 02 F6 | 	mov	local05, local03
227ec     00 28 06 F6 | 	mov	local06, #0
227f0     97 1E 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
227f4                 | LR__3240
227f4     13 2B 02 F6 | 	mov	local07, local05
227f8     06 26 06 F1 | 	add	local05, #6
227fc     13 15 EA FA | 	rdword	arg02, local05 wz
22800     11 13 02 F6 | 	mov	arg01, local03
22804     00 FA 05 A6 |  if_e	mov	result1, #0
22808     04 14 66 50 |  if_ne	shl	arg02, #4
2280c     0A 13 02 51 |  if_ne	add	arg01, arg02
22810     09 FB 01 56 |  if_ne	mov	result1, arg01
22814     FD 26 0A F6 | 	mov	local05, result1 wz
22818     13 29 E2 5A |  if_ne	rdword	local06, local05
2281c     00 26 0E F2 | 	cmp	local05, #0 wz
22820     12 27 52 52 |  if_ne	cmps	local05, local04 wc
22824     08 00 90 1D |  if_a	jmp	#LR__3242
22828     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
2282c     C4 FF 9F 1D |  if_a	jmp	#LR__3240
22830                 | LR__3241
22830                 | LR__3242
22830     00 26 0E F2 | 	cmp	local05, #0 wz
22834     13 FB 01 A6 |  if_e	mov	result1, local05
22838     3C 01 90 AD |  if_e	jmp	#LR__3245
2283c     13 FD 01 F6 | 	mov	result2, local05
22840     06 FC 05 F1 | 	add	result2, #6
22844     FE 2C E2 FA | 	rdword	local08, result2
22848     14 1F 52 F2 | 	cmps	local01, local06 wc
2284c     C0 00 90 3D |  if_ae	jmp	#LR__3244
22850     13 1F 52 FC | 	wrword	local01, local05
22854     13 13 02 F6 | 	mov	arg01, local05
22858     0F 2D 02 F6 | 	mov	local08, local01
2285c     04 2C 66 F0 | 	shl	local08, #4
22860     16 13 02 F1 | 	add	arg01, local08
22864     0F 29 82 F1 | 	sub	local06, local01
22868     09 29 52 FC | 	wrword	local06, arg01
2286c     09 2D 02 F6 | 	mov	local08, arg01
22870     02 2C 06 F1 | 	add	local08, #2
22874     36 00 80 FF 
22878     16 1F 59 FC | 	wrword	##27791, local08
2287c     13 15 0A F6 | 	mov	arg02, local05 wz
22880     00 FA 05 A6 |  if_e	mov	result1, #0
22884     11 15 82 51 |  if_ne	sub	arg02, local03
22888     04 14 46 50 |  if_ne	shr	arg02, #4
2288c     0A FB 01 56 |  if_ne	mov	result1, arg02
22890     09 2D 02 F6 | 	mov	local08, arg01
22894     04 2C 06 F1 | 	add	local08, #4
22898     16 FB 51 FC | 	wrword	result1, local08
2289c     13 2D 02 F6 | 	mov	local08, local05
228a0     06 2C 06 F1 | 	add	local08, #6
228a4     09 15 02 F6 | 	mov	arg02, arg01
228a8     16 2D E2 FA | 	rdword	local08, local08
228ac     06 14 06 F1 | 	add	arg02, #6
228b0     0A 2D 52 FC | 	wrword	local08, arg02
228b4     09 2F 02 F6 | 	mov	local09, arg01
228b8     17 15 0A F6 | 	mov	arg02, local09 wz
228bc     00 FA 05 A6 |  if_e	mov	result1, #0
228c0     11 15 82 51 |  if_ne	sub	arg02, local03
228c4     04 14 46 50 |  if_ne	shr	arg02, #4
228c8     0A FB 01 56 |  if_ne	mov	result1, arg02
228cc     FD 2C 02 F6 | 	mov	local08, result1
228d0     09 31 EA FA | 	rdword	local10, arg01 wz
228d4     00 FA 05 A6 |  if_e	mov	result1, #0
228d8     04 30 66 50 |  if_ne	shl	local10, #4
228dc     18 13 02 51 |  if_ne	add	arg01, local10
228e0     09 FB 01 56 |  if_ne	mov	result1, arg01
228e4     FD 32 0A F6 | 	mov	local11, result1 wz
228e8     24 00 90 AD |  if_e	jmp	#LR__3243
228ec     12 33 52 F2 | 	cmps	local11, local04 wc
228f0     1C 00 90 3D |  if_ae	jmp	#LR__3243
228f4     17 15 0A F6 | 	mov	arg02, local09 wz
228f8     00 FA 05 A6 |  if_e	mov	result1, #0
228fc     11 15 82 51 |  if_ne	sub	arg02, local03
22900     04 14 46 50 |  if_ne	shr	arg02, #4
22904     0A FB 01 56 |  if_ne	mov	result1, arg02
22908     04 32 06 F1 | 	add	local11, #4
2290c     19 FB 51 FC | 	wrword	result1, local11
22910                 | LR__3243
22910                 | LR__3244
22910     06 2A 06 F1 | 	add	local07, #6
22914     15 2D 52 FC | 	wrword	local08, local07
22918     36 00 00 FF 
2291c     80 2E 06 F6 | 	mov	local09, ##27776
22920     10 2F 42 F5 | 	or	local09, local02
22924     00 FA 05 F6 | 	mov	result1, #0
22928     01 FA 61 FD | 	cogid	result1
2292c     FD 2E 42 F5 | 	or	local09, result1
22930     13 33 02 F6 | 	mov	local11, local05
22934     02 32 06 F1 | 	add	local11, #2
22938     19 2F 52 FC | 	wrword	local09, local11
2293c     11 2F 02 F6 | 	mov	local09, local03
22940     08 2E 06 F1 | 	add	local09, #8
22944     13 33 02 F6 | 	mov	local11, local05
22948     17 2F E2 FA | 	rdword	local09, local09
2294c     06 32 06 F1 | 	add	local11, #6
22950     19 2F 52 FC | 	wrword	local09, local11
22954     13 15 0A F6 | 	mov	arg02, local05 wz
22958     00 FA 05 A6 |  if_e	mov	result1, #0
2295c     11 15 82 51 |  if_ne	sub	arg02, local03
22960     04 14 46 50 |  if_ne	shr	arg02, #4
22964     0A FB 01 56 |  if_ne	mov	result1, arg02
22968     08 22 06 F1 | 	add	local03, #8
2296c     11 FB 51 FC | 	wrword	result1, local03
22970     08 26 06 F1 | 	add	local05, #8
22974     13 FB 01 F6 | 	mov	result1, local05
22978                 | LR__3245
22978     A7 F0 03 F6 | 	mov	ptra, fp
2297c     B2 00 A0 FD | 	call	#popregs_
22980                 | __system___gc_tryalloc_ret
22980     2D 00 64 FD | 	ret
22984                 | 
22984                 | __system___gc_alloc_managed
22984     01 4A 05 F6 | 	mov	COUNT_, #1
22988     A8 00 A0 FD | 	call	#pushregs_
2298c     09 1F 02 F6 | 	mov	local01, arg01
22990     00 14 06 F6 | 	mov	arg02, #0
22994     1C 00 B0 FD | 	call	#__system___gc_doalloc
22998     FD 14 0A F6 | 	mov	arg02, result1 wz
2299c     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
229a0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
229a4     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
229a8     A7 F0 03 F6 | 	mov	ptra, fp
229ac     B2 00 A0 FD | 	call	#popregs_
229b0                 | __system___gc_alloc_managed_ret
229b0     2D 00 64 FD | 	ret
229b4                 | 
229b4                 | __system___gc_doalloc
229b4     06 4A 05 F6 | 	mov	COUNT_, #6
229b8     A8 00 A0 FD | 	call	#pushregs_
229bc     09 1F 0A F6 | 	mov	local01, arg01 wz
229c0     0A 21 02 F6 | 	mov	local02, arg02
229c4     00 FA 05 A6 |  if_e	mov	result1, #0
229c8     8C 00 90 AD |  if_e	jmp	#LR__3257
229cc     17 1E 06 F1 | 	add	local01, #23
229d0     0F 1E 26 F5 | 	andn	local01, #15
229d4     04 1E 46 F0 | 	shr	local01, #4
229d8     1C E6 05 F1 | 	add	ptr___system__dat__, #28
229dc     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
229e0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
229e4     50 C1 BF FD | 	call	#__system___lockmem
229e8     0F 13 02 F6 | 	mov	arg01, local01
229ec     10 15 02 F6 | 	mov	arg02, local02
229f0     D8 FD BF FD | 	call	#__system___gc_tryalloc
229f4     FD 22 0A F6 | 	mov	local03, result1 wz
229f8     14 00 90 5D |  if_ne	jmp	#LR__3250
229fc     70 03 B0 FD | 	call	#__system___gc_docollect
22a00     0F 13 02 F6 | 	mov	arg01, local01
22a04     10 15 02 F6 | 	mov	arg02, local02
22a08     C0 FD BF FD | 	call	#__system___gc_tryalloc
22a0c     FD 22 02 F6 | 	mov	local03, result1
22a10                 | LR__3250
22a10     1C E6 05 F1 | 	add	ptr___system__dat__, #28
22a14     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22a18     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
22a1c     09 01 68 FC | 	wrlong	#0, arg01
22a20     00 22 0E F2 | 	cmp	local03, #0 wz
22a24     2C 00 90 AD |  if_e	jmp	#LR__3256
22a28     04 1E 66 F0 | 	shl	local01, #4
22a2c     08 1E 86 F1 | 	sub	local01, #8
22a30     0F 25 52 F6 | 	abs	local04, local01 wc
22a34     02 24 46 F0 | 	shr	local04, #2
22a38     12 27 8A F6 | 	negc	local05, local04 wz
22a3c     11 29 02 F6 | 	mov	local06, local03
22a40     10 00 90 AD |  if_e	jmp	#LR__3255
22a44     97 06 48 FB | 	callpa	#(@LR__3253-@LR__3251)>>2,fcache_load_ptr_
22a48                 | LR__3251
22a48     13 05 D8 FC | 	rep	@LR__3254, local05
22a4c                 | LR__3252
22a4c     14 01 68 FC | 	wrlong	#0, local06
22a50     04 28 06 F1 | 	add	local06, #4
22a54                 | LR__3253
22a54                 | LR__3254
22a54                 | LR__3255
22a54                 | LR__3256
22a54     11 FB 01 F6 | 	mov	result1, local03
22a58                 | LR__3257
22a58     A7 F0 03 F6 | 	mov	ptra, fp
22a5c     B2 00 A0 FD | 	call	#popregs_
22a60                 | __system___gc_doalloc_ret
22a60     2D 00 64 FD | 	ret
22a64                 | 
22a64                 | __system___gc_isvalidptr
22a64     F8 16 06 F4 | 	bitl	arg03, #248
22a68     08 16 86 F1 | 	sub	arg03, #8
22a6c     09 17 52 F2 | 	cmps	arg03, arg01 wc
22a70     08 00 90 CD |  if_b	jmp	#LR__3260
22a74     0A 17 52 F2 | 	cmps	arg03, arg02 wc
22a78     08 00 90 CD |  if_b	jmp	#LR__3261
22a7c                 | LR__3260
22a7c     00 FA 05 F6 | 	mov	result1, #0
22a80     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
22a84                 | LR__3261
22a84     0B 01 02 F6 | 	mov	_var01, arg03
22a88     09 01 62 F5 | 	xor	_var01, arg01
22a8c     0F 00 CE F7 | 	test	_var01, #15 wz
22a90     00 FA 05 56 |  if_ne	mov	result1, #0
22a94     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
22a98     0B 01 02 F6 | 	mov	_var01, arg03
22a9c     02 00 06 F1 | 	add	_var01, #2
22aa0     00 01 E2 FA | 	rdword	_var01, _var01
22aa4     7F 00 00 FF 
22aa8     C0 01 06 F5 | 	and	_var01, ##65472
22aac     36 00 00 FF 
22ab0     80 00 0E F2 | 	cmp	_var01, ##27776 wz
22ab4     00 FA 05 56 |  if_ne	mov	result1, #0
22ab8     0B FB 01 A6 |  if_e	mov	result1, arg03
22abc                 | __system___gc_isvalidptr_ret
22abc     2D 00 64 FD | 	ret
22ac0                 | 
22ac0                 | __system___gc_free
22ac0     09 17 02 F6 | 	mov	arg03, arg01
22ac4     6C FC BF FD | 	call	#__system___gc_ptrs
22ac8     FD 12 02 F6 | 	mov	arg01, result1
22acc     FE 14 02 F6 | 	mov	arg02, result2
22ad0     90 FF BF FD | 	call	#__system___gc_isvalidptr
22ad4     FD 14 0A F6 | 	mov	arg02, result1 wz
22ad8     28 00 90 AD |  if_e	jmp	#LR__3270
22adc     1C E6 05 F1 | 	add	ptr___system__dat__, #28
22ae0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22ae4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
22ae8     4C C0 BF FD | 	call	#__system___lockmem
22aec     0A 13 02 F6 | 	mov	arg01, arg02
22af0     14 00 B0 FD | 	call	#__system___gc_dofree
22af4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
22af8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22afc     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
22b00     09 01 68 FC | 	wrlong	#0, arg01
22b04                 | LR__3270
22b04                 | __system___gc_free_ret
22b04     2D 00 64 FD | 	ret
22b08                 | 
22b08                 | __system___gc_dofree
22b08     06 4A 05 F6 | 	mov	COUNT_, #6
22b0c     A8 00 A0 FD | 	call	#pushregs_
22b10     09 1F 02 F6 | 	mov	local01, arg01
22b14     1C FC BF FD | 	call	#__system___gc_ptrs
22b18     FD 20 02 F6 | 	mov	local02, result1
22b1c     FE 22 02 F6 | 	mov	local03, result2
22b20     0F 15 02 F6 | 	mov	arg02, local01
22b24     02 14 06 F1 | 	add	arg02, #2
22b28     36 00 80 FF 
22b2c     0A 1F 59 FC | 	wrword	##27791, arg02
22b30     0F 25 02 F6 | 	mov	local04, local01
22b34     0F 13 02 F6 | 	mov	arg01, local01
22b38     09 27 EA FA | 	rdword	local05, arg01 wz
22b3c     00 FA 05 A6 |  if_e	mov	result1, #0
22b40     04 26 66 50 |  if_ne	shl	local05, #4
22b44     13 13 02 51 |  if_ne	add	arg01, local05
22b48     09 FB 01 56 |  if_ne	mov	result1, arg01
22b4c     FD 28 02 F6 | 	mov	local06, result1
22b50     97 24 48 FB | 	callpa	#(@LR__3281-@LR__3280)>>2,fcache_load_ptr_
22b54                 | LR__3280
22b54     04 24 06 F1 | 	add	local04, #4
22b58     12 15 EA FA | 	rdword	arg02, local04 wz
22b5c     10 13 02 F6 | 	mov	arg01, local02
22b60     00 FA 05 A6 |  if_e	mov	result1, #0
22b64     04 14 66 50 |  if_ne	shl	arg02, #4
22b68     0A 13 02 51 |  if_ne	add	arg01, arg02
22b6c     09 FB 01 56 |  if_ne	mov	result1, arg01
22b70     FD 24 0A F6 | 	mov	local04, result1 wz
22b74     24 00 90 AD |  if_e	jmp	#LR__3282
22b78     12 13 02 F6 | 	mov	arg01, local04
22b7c     00 FA 05 F6 | 	mov	result1, #0
22b80     02 12 06 F1 | 	add	arg01, #2
22b84     09 13 E2 FA | 	rdword	arg01, arg01
22b88     36 00 00 FF 
22b8c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
22b90     01 FA 65 A6 |  if_e	neg	result1, #1
22b94     00 FA 0D F2 | 	cmp	result1, #0 wz
22b98     B8 FF 9F AD |  if_e	jmp	#LR__3280
22b9c                 | LR__3281
22b9c                 | LR__3282
22b9c     00 24 0E F2 | 	cmp	local04, #0 wz
22ba0     10 25 02 A6 |  if_e	mov	local04, local02
22ba4     12 15 02 F6 | 	mov	arg02, local04
22ba8     06 14 06 F1 | 	add	arg02, #6
22bac     0F 13 02 F6 | 	mov	arg01, local01
22bb0     0A 15 E2 FA | 	rdword	arg02, arg02
22bb4     06 12 06 F1 | 	add	arg01, #6
22bb8     09 15 52 FC | 	wrword	arg02, arg01
22bbc     0F 15 0A F6 | 	mov	arg02, local01 wz
22bc0     00 FA 05 A6 |  if_e	mov	result1, #0
22bc4     10 15 82 51 |  if_ne	sub	arg02, local02
22bc8     04 14 46 50 |  if_ne	shr	arg02, #4
22bcc     0A FB 01 56 |  if_ne	mov	result1, arg02
22bd0     12 15 02 F6 | 	mov	arg02, local04
22bd4     06 14 06 F1 | 	add	arg02, #6
22bd8     0A FB 51 FC | 	wrword	result1, arg02
22bdc     10 25 0A F2 | 	cmp	local04, local02 wz
22be0     A4 00 90 AD |  if_e	jmp	#LR__3285
22be4     12 13 02 F6 | 	mov	arg01, local04
22be8     09 27 EA FA | 	rdword	local05, arg01 wz
22bec     00 FA 05 A6 |  if_e	mov	result1, #0
22bf0     04 26 66 50 |  if_ne	shl	local05, #4
22bf4     13 13 02 51 |  if_ne	add	arg01, local05
22bf8     09 FB 01 56 |  if_ne	mov	result1, arg01
22bfc     0F FB 09 F2 | 	cmp	result1, local01 wz
22c00     84 00 90 5D |  if_ne	jmp	#LR__3284
22c04     12 29 E2 FA | 	rdword	local06, local04
22c08     0F 15 E2 FA | 	rdword	arg02, local01
22c0c     0A 29 02 F1 | 	add	local06, arg02
22c10     12 29 52 FC | 	wrword	local06, local04
22c14     0F 29 02 F6 | 	mov	local06, local01
22c18     02 28 06 F1 | 	add	local06, #2
22c1c     14 01 58 FC | 	wrword	#0, local06
22c20     0F 13 02 F6 | 	mov	arg01, local01
22c24     09 27 EA FA | 	rdword	local05, arg01 wz
22c28     00 FA 05 A6 |  if_e	mov	result1, #0
22c2c     04 26 66 50 |  if_ne	shl	local05, #4
22c30     13 13 02 51 |  if_ne	add	arg01, local05
22c34     09 FB 01 56 |  if_ne	mov	result1, arg01
22c38     FD 28 02 F6 | 	mov	local06, result1
22c3c     11 29 52 F2 | 	cmps	local06, local03 wc
22c40     20 00 90 3D |  if_ae	jmp	#LR__3283
22c44     12 15 0A F6 | 	mov	arg02, local04 wz
22c48     00 FA 05 A6 |  if_e	mov	result1, #0
22c4c     10 15 82 51 |  if_ne	sub	arg02, local02
22c50     04 14 46 50 |  if_ne	shr	arg02, #4
22c54     0A FB 01 56 |  if_ne	mov	result1, arg02
22c58     14 15 02 F6 | 	mov	arg02, local06
22c5c     04 14 06 F1 | 	add	arg02, #4
22c60     0A FB 51 FC | 	wrword	result1, arg02
22c64                 | LR__3283
22c64     0F 15 02 F6 | 	mov	arg02, local01
22c68     06 14 06 F1 | 	add	arg02, #6
22c6c     12 FD 01 F6 | 	mov	result2, local04
22c70     0A 15 E2 FA | 	rdword	arg02, arg02
22c74     06 FC 05 F1 | 	add	result2, #6
22c78     FE 14 52 FC | 	wrword	arg02, result2
22c7c     06 1E 06 F1 | 	add	local01, #6
22c80     0F 01 58 FC | 	wrword	#0, local01
22c84     12 1F 02 F6 | 	mov	local01, local04
22c88                 | LR__3284
22c88                 | LR__3285
22c88     0F 13 02 F6 | 	mov	arg01, local01
22c8c     09 27 EA FA | 	rdword	local05, arg01 wz
22c90     00 FA 05 A6 |  if_e	mov	result1, #0
22c94     04 26 66 50 |  if_ne	shl	local05, #4
22c98     13 13 02 51 |  if_ne	add	arg01, local05
22c9c     09 FB 01 56 |  if_ne	mov	result1, arg01
22ca0     FD 14 0A F6 | 	mov	arg02, result1 wz
22ca4     B8 00 90 AD |  if_e	jmp	#LR__3287
22ca8     11 15 52 F2 | 	cmps	arg02, local03 wc
22cac     B0 00 90 3D |  if_ae	jmp	#LR__3287
22cb0     0A 13 02 F6 | 	mov	arg01, arg02
22cb4     00 FA 05 F6 | 	mov	result1, #0
22cb8     02 12 06 F1 | 	add	arg01, #2
22cbc     09 13 E2 FA | 	rdword	arg01, arg01
22cc0     36 00 00 FF 
22cc4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
22cc8     01 FA 65 A6 |  if_e	neg	result1, #1
22ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
22cd0     8C 00 90 AD |  if_e	jmp	#LR__3287
22cd4     0F 25 02 F6 | 	mov	local04, local01
22cd8     12 29 E2 FA | 	rdword	local06, local04
22cdc     0A 13 02 F6 | 	mov	arg01, arg02
22ce0     09 1F E2 FA | 	rdword	local01, arg01
22ce4     0F 29 02 F1 | 	add	local06, local01
22ce8     12 29 52 FC | 	wrword	local06, local04
22cec     09 29 02 F6 | 	mov	local06, arg01
22cf0     06 28 06 F1 | 	add	local06, #6
22cf4     12 1F 02 F6 | 	mov	local01, local04
22cf8     14 29 E2 FA | 	rdword	local06, local06
22cfc     06 1E 06 F1 | 	add	local01, #6
22d00     0F 29 52 FC | 	wrword	local06, local01
22d04     09 29 02 F6 | 	mov	local06, arg01
22d08     02 28 06 F1 | 	add	local06, #2
22d0c     14 55 59 FC | 	wrword	#170, local06
22d10     09 29 02 F6 | 	mov	local06, arg01
22d14     06 28 06 F1 | 	add	local06, #6
22d18     14 01 58 FC | 	wrword	#0, local06
22d1c     09 27 EA FA | 	rdword	local05, arg01 wz
22d20     00 FA 05 A6 |  if_e	mov	result1, #0
22d24     04 26 66 50 |  if_ne	shl	local05, #4
22d28     13 13 02 51 |  if_ne	add	arg01, local05
22d2c     09 FB 01 56 |  if_ne	mov	result1, arg01
22d30     FD 28 0A F6 | 	mov	local06, result1 wz
22d34     28 00 90 AD |  if_e	jmp	#LR__3286
22d38     11 29 52 F2 | 	cmps	local06, local03 wc
22d3c     20 00 90 3D |  if_ae	jmp	#LR__3286
22d40     12 15 0A F6 | 	mov	arg02, local04 wz
22d44     00 FA 05 A6 |  if_e	mov	result1, #0
22d48     10 15 82 51 |  if_ne	sub	arg02, local02
22d4c     04 14 46 50 |  if_ne	shr	arg02, #4
22d50     0A FB 01 56 |  if_ne	mov	result1, arg02
22d54     14 25 02 F6 | 	mov	local04, local06
22d58     04 24 06 F1 | 	add	local04, #4
22d5c     12 FB 51 FC | 	wrword	result1, local04
22d60                 | LR__3286
22d60                 | LR__3287
22d60     14 FB 01 F6 | 	mov	result1, local06
22d64     A7 F0 03 F6 | 	mov	ptra, fp
22d68     B2 00 A0 FD | 	call	#popregs_
22d6c                 | __system___gc_dofree_ret
22d6c     2D 00 64 FD | 	ret
22d70                 | 
22d70                 | __system___gc_docollect
22d70     05 4A 05 F6 | 	mov	COUNT_, #5
22d74     A8 00 A0 FD | 	call	#pushregs_
22d78     B8 F9 BF FD | 	call	#__system___gc_ptrs
22d7c     FE 1E 02 F6 | 	mov	local01, result2
22d80     FD 20 02 F6 | 	mov	local02, result1
22d84     10 13 02 F6 | 	mov	arg01, local02
22d88     09 23 EA FA | 	rdword	local03, arg01 wz
22d8c     00 FA 05 A6 |  if_e	mov	result1, #0
22d90     04 22 66 50 |  if_ne	shl	local03, #4
22d94     11 13 02 51 |  if_ne	add	arg01, local03
22d98     09 FB 01 56 |  if_ne	mov	result1, arg01
22d9c     FD 24 0A F6 | 	mov	local04, result1 wz
22da0     00 FA 05 F6 | 	mov	result1, #0
22da4     01 FA 61 FD | 	cogid	result1
22da8     FD 26 02 F6 | 	mov	local05, result1
22dac     48 00 90 AD |  if_e	jmp	#LR__3292
22db0     97 22 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
22db4                 | LR__3290
22db4     0F 25 52 F2 | 	cmps	local04, local01 wc
22db8     3C 00 90 3D |  if_ae	jmp	#LR__3292
22dbc     12 15 02 F6 | 	mov	arg02, local04
22dc0     02 14 06 F1 | 	add	arg02, #2
22dc4     0A 15 E2 FA | 	rdword	arg02, arg02
22dc8     20 14 26 F5 | 	andn	arg02, #32
22dcc     12 13 02 F6 | 	mov	arg01, local04
22dd0     02 12 06 F1 | 	add	arg01, #2
22dd4     09 15 52 FC | 	wrword	arg02, arg01
22dd8     12 13 02 F6 | 	mov	arg01, local04
22ddc     09 23 EA FA | 	rdword	local03, arg01 wz
22de0     00 FA 05 A6 |  if_e	mov	result1, #0
22de4     04 22 66 50 |  if_ne	shl	local03, #4
22de8     11 13 02 51 |  if_ne	add	arg01, local03
22dec     09 FB 01 56 |  if_ne	mov	result1, arg01
22df0     FD 24 0A F6 | 	mov	local04, result1 wz
22df4     BC FF 9F 5D |  if_ne	jmp	#LR__3290
22df8                 | LR__3291
22df8                 | LR__3292
22df8     00 22 06 F6 | 	mov	local03, #0
22dfc     00 12 06 F6 | 	mov	arg01, #0
22e00     0C BD BF FD | 	call	#__system____topofstack
22e04     FD 14 02 F6 | 	mov	arg02, result1
22e08     11 13 02 F6 | 	mov	arg01, local03
22e0c     90 00 B0 FD | 	call	#__system___gc_markhub
22e10     1C 01 B0 FD | 	call	#__system___gc_markcog
22e14     10 13 02 F6 | 	mov	arg01, local02
22e18     09 23 EA FA | 	rdword	local03, arg01 wz
22e1c     00 FA 05 A6 |  if_e	mov	result1, #0
22e20     04 22 66 50 |  if_ne	shl	local03, #4
22e24     11 13 02 51 |  if_ne	add	arg01, local03
22e28     09 FB 01 56 |  if_ne	mov	result1, arg01
22e2c     FD 20 0A F6 | 	mov	local02, result1 wz
22e30     60 00 90 AD |  if_e	jmp	#LR__3296
22e34                 | LR__3293
22e34     10 25 02 F6 | 	mov	local04, local02
22e38     12 13 02 F6 | 	mov	arg01, local04
22e3c     09 23 EA FA | 	rdword	local03, arg01 wz
22e40     00 FA 05 A6 |  if_e	mov	result1, #0
22e44     04 22 66 50 |  if_ne	shl	local03, #4
22e48     11 13 02 51 |  if_ne	add	arg01, local03
22e4c     09 FB 01 56 |  if_ne	mov	result1, arg01
22e50     FD 20 02 F6 | 	mov	local02, result1
22e54     12 15 02 F6 | 	mov	arg02, local04
22e58     02 14 06 F1 | 	add	arg02, #2
22e5c     0A 15 E2 FA | 	rdword	arg02, arg02
22e60     20 14 CE F7 | 	test	arg02, #32 wz
22e64     10 14 CE A7 |  if_e	test	arg02, #16 wz
22e68     1C 00 90 5D |  if_ne	jmp	#LR__3295
22e6c     0A 15 42 F8 | 	getnib	arg02, arg02, #0
22e70     13 15 0A F2 | 	cmp	arg02, local05 wz
22e74     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
22e78     0C 00 90 5D |  if_ne	jmp	#LR__3294
22e7c     12 13 02 F6 | 	mov	arg01, local04
22e80     84 FC BF FD | 	call	#__system___gc_dofree
22e84     FD 20 02 F6 | 	mov	local02, result1
22e88                 | LR__3294
22e88                 | LR__3295
22e88     00 20 0E F2 | 	cmp	local02, #0 wz
22e8c     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
22e90     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3293
22e94                 | LR__3296
22e94     A7 F0 03 F6 | 	mov	ptra, fp
22e98     B2 00 A0 FD | 	call	#popregs_
22e9c                 | __system___gc_docollect_ret
22e9c     2D 00 64 FD | 	ret
22ea0                 | 
22ea0                 | __system___gc_markhub
22ea0     04 4A 05 F6 | 	mov	COUNT_, #4
22ea4     A8 00 A0 FD | 	call	#pushregs_
22ea8     09 1F 02 F6 | 	mov	local01, arg01
22eac     0A 21 02 F6 | 	mov	local02, arg02
22eb0     80 F8 BF FD | 	call	#__system___gc_ptrs
22eb4     FD 22 02 F6 | 	mov	local03, result1
22eb8     FE 24 02 F6 | 	mov	local04, result2
22ebc                 | LR__3300
22ebc     10 1F 52 F2 | 	cmps	local01, local02 wc
22ec0     60 00 90 3D |  if_ae	jmp	#LR__3301
22ec4     0F 17 02 FB | 	rdlong	arg03, local01
22ec8     04 1E 06 F1 | 	add	local01, #4
22ecc     12 15 02 F6 | 	mov	arg02, local04
22ed0     11 13 02 F6 | 	mov	arg01, local03
22ed4     8C FB BF FD | 	call	#__system___gc_isvalidptr
22ed8     FD 16 0A F6 | 	mov	arg03, result1 wz
22edc     DC FF 9F AD |  if_e	jmp	#LR__3300
22ee0     0B 13 02 F6 | 	mov	arg01, arg03
22ee4     00 FA 05 F6 | 	mov	result1, #0
22ee8     02 12 06 F1 | 	add	arg01, #2
22eec     09 13 E2 FA | 	rdword	arg01, arg01
22ef0     36 00 00 FF 
22ef4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
22ef8     01 FA 65 A6 |  if_e	neg	result1, #1
22efc     00 FA 0D F2 | 	cmp	result1, #0 wz
22f00     B8 FF 9F 5D |  if_ne	jmp	#LR__3300
22f04     0B FD 01 F6 | 	mov	result2, arg03
22f08     02 FC 05 F1 | 	add	result2, #2
22f0c     FE FC E1 FA | 	rdword	result2, result2
22f10     0F FC 25 F5 | 	andn	result2, #15
22f14     2E FC 45 F5 | 	or	result2, #46
22f18     02 16 06 F1 | 	add	arg03, #2
22f1c     0B FD 51 FC | 	wrword	result2, arg03
22f20     98 FF 9F FD | 	jmp	#LR__3300
22f24                 | LR__3301
22f24     A7 F0 03 F6 | 	mov	ptra, fp
22f28     B2 00 A0 FD | 	call	#popregs_
22f2c                 | __system___gc_markhub_ret
22f2c     2D 00 64 FD | 	ret
22f30                 | 
22f30                 | __system___gc_markcog
22f30     04 4A 05 F6 | 	mov	COUNT_, #4
22f34     A8 00 A0 FD | 	call	#pushregs_
22f38     F8 F7 BF FD | 	call	#__system___gc_ptrs
22f3c     FD 1E 02 F6 | 	mov	local01, result1
22f40     FE 20 02 F6 | 	mov	local02, result2
22f44     EF 23 06 F6 | 	mov	local03, #495
22f48                 | LR__3310
22f48                 | 	'.live	local03
22f48     00 22 96 F9 | 	alts	local03, #0
22f4c     11 25 02 F6 | 	mov	local04, local03
22f50     0F 13 02 F6 | 	mov	arg01, local01
22f54     10 15 02 F6 | 	mov	arg02, local02
22f58     12 17 02 F6 | 	mov	arg03, local04
22f5c     04 FB BF FD | 	call	#__system___gc_isvalidptr
22f60     00 FA 0D F2 | 	cmp	result1, #0 wz
22f64     18 00 90 AD |  if_e	jmp	#LR__3311
22f68     FD 24 02 F6 | 	mov	local04, result1
22f6c     02 24 06 F1 | 	add	local04, #2
22f70     12 25 E2 FA | 	rdword	local04, local04
22f74     20 24 46 F5 | 	or	local04, #32
22f78     02 FA 05 F1 | 	add	result1, #2
22f7c     FD 24 52 FC | 	wrword	local04, result1
22f80                 | LR__3311
22f80     01 22 86 F1 | 	sub	local03, #1
22f84     00 22 56 F2 | 	cmps	local03, #0 wc
22f88     BC FF 9F 3D |  if_ae	jmp	#LR__3310
22f8c     A7 F0 03 F6 | 	mov	ptra, fp
22f90     B2 00 A0 FD | 	call	#popregs_
22f94                 | __system___gc_markcog_ret
22f94     2D 00 64 FD | 	ret
22f98                 | 
22f98                 | __system__opendir
22f98     06 4A 05 F6 | 	mov	COUNT_, #6
22f9c     A8 00 A0 FD | 	call	#pushregs_
22fa0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
22fa4     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
22fa8     09 15 02 F6 | 	mov	arg02, arg01
22fac     0F 13 02 F6 | 	mov	arg01, local01
22fb0     00 16 06 F6 | 	mov	arg03, #0
22fb4     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
22fb8     14 C3 BF FD | 	call	#__system____getvfsforfile
22fbc     FD 20 0A F6 | 	mov	local02, result1 wz
22fc0     10 00 90 AD |  if_e	jmp	#LR__3320
22fc4     28 20 06 F1 | 	add	local02, #40
22fc8     10 17 0A FB | 	rdlong	arg03, local02 wz
22fcc     28 20 86 F1 | 	sub	local02, #40
22fd0     14 00 90 5D |  if_ne	jmp	#LR__3321
22fd4                 | LR__3320
22fd4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22fd8     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
22fdc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22fe0     00 FA 05 F6 | 	mov	result1, #0
22fe4     90 00 90 FD | 	jmp	#LR__3323
22fe8                 | LR__3321
22fe8     5C 12 06 F6 | 	mov	arg01, #92
22fec     10 14 06 F6 | 	mov	arg02, #16
22ff0     C0 F9 BF FD | 	call	#__system___gc_doalloc
22ff4     FD 22 0A F6 | 	mov	local03, result1 wz
22ff8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
22ffc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
23000     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23004     00 FA 05 A6 |  if_e	mov	result1, #0
23008     6C 00 90 AD |  if_e	jmp	#LR__3323
2300c     28 20 06 F1 | 	add	local02, #40
23010     10 25 02 FB | 	rdlong	local04, local02
23014     12 27 02 F6 | 	mov	local05, local04
23018     28 20 86 F1 | 	sub	local02, #40
2301c     13 26 46 F7 | 	zerox	local05, #19
23020     14 24 46 F0 | 	shr	local04, #20
23024     02 24 66 F0 | 	shl	local04, #2
23028     ED 24 02 F1 | 	add	local04, __methods__
2302c     12 25 02 FB | 	rdlong	local04, local04
23030     11 13 02 F6 | 	mov	arg01, local03
23034     0F 15 02 F6 | 	mov	arg02, local01
23038     F2 28 02 F6 | 	mov	local06, objptr
2303c     13 E5 01 F6 | 	mov	objptr, local05
23040     2D 24 62 FD | 	call	local04
23044     14 E5 01 F6 | 	mov	objptr, local06
23048     FD 16 0A F6 | 	mov	arg03, result1 wz
2304c     20 00 90 AD |  if_e	jmp	#LR__3322
23050     00 16 4E F2 | 	cmps	arg03, #0 wz
23054     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23058     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2305c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23060     11 13 02 F6 | 	mov	arg01, local03
23064     58 FA BF FD | 	call	#__system___gc_free
23068     00 FA 05 F6 | 	mov	result1, #0
2306c     08 00 90 FD | 	jmp	#LR__3323
23070                 | LR__3322
23070     11 21 62 FC | 	wrlong	local02, local03
23074     11 FB 01 F6 | 	mov	result1, local03
23078                 | LR__3323
23078     A7 F0 03 F6 | 	mov	ptra, fp
2307c     B2 00 A0 FD | 	call	#popregs_
23080                 | __system__opendir_ret
23080     2D 00 64 FD | 	ret
23084                 | 
23084                 | __system__closedir
23084     04 4A 05 F6 | 	mov	COUNT_, #4
23088     A8 00 A0 FD | 	call	#pushregs_
2308c     09 1F 02 F6 | 	mov	local01, arg01
23090     0F 13 02 FB | 	rdlong	arg01, local01
23094     2C 12 06 F1 | 	add	arg01, #44
23098     09 21 02 FB | 	rdlong	local02, arg01
2309c     10 23 02 F6 | 	mov	local03, local02
230a0     13 22 46 F7 | 	zerox	local03, #19
230a4     14 20 46 F0 | 	shr	local02, #20
230a8     02 20 66 F0 | 	shl	local02, #2
230ac     ED 20 02 F1 | 	add	local02, __methods__
230b0     10 21 02 FB | 	rdlong	local02, local02
230b4     0F 13 02 F6 | 	mov	arg01, local01
230b8     F2 24 02 F6 | 	mov	local04, objptr
230bc     11 E5 01 F6 | 	mov	objptr, local03
230c0     2D 20 62 FD | 	call	local02
230c4     12 E5 01 F6 | 	mov	objptr, local04
230c8     FD 24 02 F6 | 	mov	local04, result1
230cc     0F 13 02 F6 | 	mov	arg01, local01
230d0     EC F9 BF FD | 	call	#__system___gc_free
230d4     00 24 4E F2 | 	cmps	local04, #0 wz
230d8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
230dc     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
230e0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
230e4     01 FA 65 56 |  if_ne	neg	result1, #1
230e8     00 FA 05 A6 |  if_e	mov	result1, #0
230ec     A7 F0 03 F6 | 	mov	ptra, fp
230f0     B2 00 A0 FD | 	call	#popregs_
230f4                 | __system__closedir_ret
230f4     2D 00 64 FD | 	ret
230f8                 | 
230f8                 | __system__readdir
230f8     04 4A 05 F6 | 	mov	COUNT_, #4
230fc     A8 00 A0 FD | 	call	#pushregs_
23100     09 15 0A FB | 	rdlong	arg02, arg01 wz
23104     08 12 06 F1 | 	add	arg01, #8
23108     09 1F 02 F6 | 	mov	local01, arg01
2310c     08 12 86 F1 | 	sub	arg01, #8
23110     00 FA 05 A6 |  if_e	mov	result1, #0
23114     5C 00 90 AD |  if_e	jmp	#LR__3331
23118     30 14 06 F1 | 	add	arg02, #48
2311c     0A 21 02 FB | 	rdlong	local02, arg02
23120     10 23 02 F6 | 	mov	local03, local02
23124     13 22 46 F7 | 	zerox	local03, #19
23128     14 20 46 F0 | 	shr	local02, #20
2312c     02 20 66 F0 | 	shl	local02, #2
23130     ED 20 02 F1 | 	add	local02, __methods__
23134     10 21 02 FB | 	rdlong	local02, local02
23138     0F 15 02 F6 | 	mov	arg02, local01
2313c     F2 24 02 F6 | 	mov	local04, objptr
23140     11 E5 01 F6 | 	mov	objptr, local03
23144     2D 20 62 FD | 	call	local02
23148     12 E5 01 F6 | 	mov	objptr, local04
2314c     00 FA 4D F2 | 	cmps	result1, #0 wz
23150     1C 00 90 AD |  if_e	jmp	#LR__3330
23154     01 FA 55 F2 | 	cmps	result1, #1 wc
23158     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2315c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23160     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
23164     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23168     00 FA 05 F6 | 	mov	result1, #0
2316c     04 00 90 FD | 	jmp	#LR__3331
23170                 | LR__3330
23170     0F FB 01 F6 | 	mov	result1, local01
23174                 | LR__3331
23174     A7 F0 03 F6 | 	mov	ptra, fp
23178     B2 00 A0 FD | 	call	#popregs_
2317c                 | __system__readdir_ret
2317c     2D 00 64 FD | 	ret
23180                 | 
23180                 | __system___openraw
23180     15 4A 05 F6 | 	mov	COUNT_, #21
23184     A8 00 A0 FD | 	call	#pushregs_
23188     09 1F 02 F6 | 	mov	local01, arg01
2318c     0A 21 02 F6 | 	mov	local02, arg02
23190     0B 23 02 F6 | 	mov	local03, arg03
23194     0C 25 02 F6 | 	mov	local04, arg04
23198     04 26 06 F6 | 	mov	local05, #4
2319c     0F 29 02 F6 | 	mov	local06, local01
231a0     00 2A 06 F6 | 	mov	local07, #0
231a4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
231a8     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
231ac     16 13 02 F6 | 	mov	arg01, local08
231b0     10 15 02 F6 | 	mov	arg02, local02
231b4     00 16 06 F6 | 	mov	arg03, #0
231b8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
231bc     10 C1 BF FD | 	call	#__system____getvfsforfile
231c0     FD 2E 0A F6 | 	mov	local09, result1 wz
231c4     10 00 90 AD |  if_e	jmp	#LR__3340
231c8     20 2E 06 F1 | 	add	local09, #32
231cc     17 FB 09 FB | 	rdlong	result1, local09 wz
231d0     20 2E 86 F1 | 	sub	local09, #32
231d4     14 00 90 5D |  if_ne	jmp	#LR__3341
231d8                 | LR__3340
231d8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
231dc     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
231e0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
231e4     01 FA 65 F6 | 	neg	result1, #1
231e8     8C 02 90 FD | 	jmp	#LR__3354
231ec                 | LR__3341
231ec     14 13 02 F6 | 	mov	arg01, local06
231f0     00 14 06 F6 | 	mov	arg02, #0
231f4     34 16 06 F6 | 	mov	arg03, #52
231f8     09 31 02 F6 | 	mov	local10, arg01
231fc     98 00 A0 FD | 	call	#\builtin_bytefill_
23200     20 2E 06 F1 | 	add	local09, #32
23204     17 33 02 FB | 	rdlong	local11, local09
23208     19 35 02 F6 | 	mov	local12, local11
2320c     19 37 02 F6 | 	mov	local13, local11
23210     20 2E 86 F1 | 	sub	local09, #32
23214     1B 39 02 F6 | 	mov	local14, local13
23218     13 34 46 F7 | 	zerox	local12, #19
2321c     14 38 46 F0 | 	shr	local14, #20
23220     02 38 66 F0 | 	shl	local14, #2
23224     ED 38 02 F1 | 	add	local14, __methods__
23228     1C 39 02 FB | 	rdlong	local14, local14
2322c     14 3B 02 F6 | 	mov	local15, local06
23230     16 3D 02 F6 | 	mov	local16, local08
23234     11 3F 02 F6 | 	mov	local17, local03
23238     1D 13 02 F6 | 	mov	arg01, local15
2323c     1E 15 02 F6 | 	mov	arg02, local16
23240     1F 17 02 F6 | 	mov	arg03, local17
23244     F2 40 02 F6 | 	mov	local18, objptr
23248     1A E5 01 F6 | 	mov	objptr, local12
2324c     2D 38 62 FD | 	call	local14
23250     20 E5 01 F6 | 	mov	objptr, local18
23254     FD 42 0A F6 | 	mov	local19, result1 wz
23258     04 22 CE 57 |  if_ne	test	local03, #4 wz
2325c     58 00 90 AD |  if_e	jmp	#LR__3342
23260     24 2E 06 F1 | 	add	local09, #36
23264     17 33 02 FB | 	rdlong	local11, local09
23268     19 35 02 F6 | 	mov	local12, local11
2326c     19 37 02 F6 | 	mov	local13, local11
23270     24 2E 86 F1 | 	sub	local09, #36
23274     1B 39 02 F6 | 	mov	local14, local13
23278     13 34 46 F7 | 	zerox	local12, #19
2327c     14 38 46 F0 | 	shr	local14, #20
23280     02 38 66 F0 | 	shl	local14, #2
23284     ED 38 02 F1 | 	add	local14, __methods__
23288     1C 39 02 FB | 	rdlong	local14, local14
2328c     14 3B 02 F6 | 	mov	local15, local06
23290     16 3D 02 F6 | 	mov	local16, local08
23294     12 3F 02 F6 | 	mov	local17, local04
23298     1D 13 02 F6 | 	mov	arg01, local15
2329c     1E 15 02 F6 | 	mov	arg02, local16
232a0     1F 17 02 F6 | 	mov	arg03, local17
232a4     F2 40 02 F6 | 	mov	local18, objptr
232a8     1A E5 01 F6 | 	mov	objptr, local12
232ac     2D 38 62 FD | 	call	local14
232b0     20 E5 01 F6 | 	mov	objptr, local18
232b4     FD 42 02 F6 | 	mov	local19, result1
232b8                 | LR__3342
232b8     00 42 0E F2 | 	cmp	local19, #0 wz
232bc     8C 01 90 5D |  if_ne	jmp	#LR__3352
232c0     11 45 02 F6 | 	mov	local20, local03
232c4     03 44 0E F5 | 	and	local20, #3 wz
232c8     02 26 46 55 |  if_ne	or	local05, #2
232cc     01 44 0E F2 | 	cmp	local20, #1 wz
232d0     01 26 46 55 |  if_ne	or	local05, #1
232d4     20 22 CE F7 | 	test	local03, #32 wz
232d8     C0 26 46 55 |  if_ne	or	local05, #192
232dc     08 28 06 F1 | 	add	local06, #8
232e0     14 27 62 FC | 	wrlong	local05, local06
232e4     0C 28 06 F1 | 	add	local06, #12
232e8     14 47 0A FB | 	rdlong	local21, local06 wz
232ec     14 28 86 F1 | 	sub	local06, #20
232f0     18 00 90 5D |  if_ne	jmp	#LR__3343
232f4     04 2E 06 F1 | 	add	local09, #4
232f8     17 47 02 FB | 	rdlong	local21, local09
232fc     04 2E 86 F1 | 	sub	local09, #4
23300     14 28 06 F1 | 	add	local06, #20
23304     14 47 62 FC | 	wrlong	local21, local06
23308     14 28 86 F1 | 	sub	local06, #20
2330c                 | LR__3343
2330c     18 28 06 F1 | 	add	local06, #24
23310     14 47 0A FB | 	rdlong	local21, local06 wz
23314     18 28 86 F1 | 	sub	local06, #24
23318     18 00 90 5D |  if_ne	jmp	#LR__3344
2331c     08 2E 06 F1 | 	add	local09, #8
23320     17 47 02 FB | 	rdlong	local21, local09
23324     08 2E 86 F1 | 	sub	local09, #8
23328     18 28 06 F1 | 	add	local06, #24
2332c     14 47 62 FC | 	wrlong	local21, local06
23330     18 28 86 F1 | 	sub	local06, #24
23334                 | LR__3344
23334     24 28 06 F1 | 	add	local06, #36
23338     14 47 0A FB | 	rdlong	local21, local06 wz
2333c     24 28 86 F1 | 	sub	local06, #36
23340     17 47 02 AB |  if_e	rdlong	local21, local09
23344     24 28 06 A1 |  if_e	add	local06, #36
23348     14 47 62 AC |  if_e	wrlong	local21, local06
2334c     24 28 86 A1 |  if_e	sub	local06, #36
23350     28 28 06 F1 | 	add	local06, #40
23354     14 47 0A FB | 	rdlong	local21, local06 wz
23358     28 28 86 F1 | 	sub	local06, #40
2335c     18 00 90 5D |  if_ne	jmp	#LR__3345
23360     10 2E 06 F1 | 	add	local09, #16
23364     17 47 02 FB | 	rdlong	local21, local09
23368     10 2E 86 F1 | 	sub	local09, #16
2336c     28 28 06 F1 | 	add	local06, #40
23370     14 47 62 FC | 	wrlong	local21, local06
23374     28 28 86 F1 | 	sub	local06, #40
23378                 | LR__3345
23378     30 28 06 F1 | 	add	local06, #48
2337c     14 47 0A FB | 	rdlong	local21, local06 wz
23380     30 28 86 F1 | 	sub	local06, #48
23384     18 00 90 5D |  if_ne	jmp	#LR__3346
23388     0C 2E 06 F1 | 	add	local09, #12
2338c     17 47 02 FB | 	rdlong	local21, local09
23390     0C 2E 86 F1 | 	sub	local09, #12
23394     30 28 06 F1 | 	add	local06, #48
23398     14 47 62 FC | 	wrlong	local21, local06
2339c     30 28 86 F1 | 	sub	local06, #48
233a0                 | LR__3346
233a0     1C 28 06 F1 | 	add	local06, #28
233a4     14 47 0A FB | 	rdlong	local21, local06 wz
233a8     1C 28 86 F1 | 	sub	local06, #28
233ac     1C 00 90 5D |  if_ne	jmp	#LR__3347
233b0     01 2A 06 F6 | 	mov	local07, #1
233b4     F2 12 02 F6 | 	mov	arg01, objptr
233b8     00 70 04 FF 
233bc     00 12 46 F5 | 	or	arg01, ##148897792
233c0     1C 28 06 F1 | 	add	local06, #28
233c4     14 13 62 FC | 	wrlong	arg01, local06
233c8     1C 28 86 F1 | 	sub	local06, #28
233cc                 | LR__3347
233cc     20 28 06 F1 | 	add	local06, #32
233d0     14 47 0A FB | 	rdlong	local21, local06 wz
233d4     20 28 86 F1 | 	sub	local06, #32
233d8     1C 00 90 5D |  if_ne	jmp	#LR__3348
233dc     01 2A 06 F6 | 	mov	local07, #1
233e0     F2 12 02 F6 | 	mov	arg01, objptr
233e4     00 78 04 FF 
233e8     00 12 46 F5 | 	or	arg01, ##149946368
233ec     20 28 06 F1 | 	add	local06, #32
233f0     14 13 62 FC | 	wrlong	arg01, local06
233f4     20 28 86 F1 | 	sub	local06, #32
233f8                 | LR__3348
233f8     2C 28 06 F1 | 	add	local06, #44
233fc     14 47 0A FB | 	rdlong	local21, local06 wz
23400     2C 28 86 F1 | 	sub	local06, #44
23404     44 00 90 5D |  if_ne	jmp	#LR__3351
23408     14 2E 06 F1 | 	add	local09, #20
2340c     17 47 0A FB | 	rdlong	local21, local09 wz
23410     14 2E 86 F1 | 	sub	local09, #20
23414     18 00 90 AD |  if_e	jmp	#LR__3349
23418     14 2E 06 F1 | 	add	local09, #20
2341c     17 47 02 FB | 	rdlong	local21, local09
23420     2C 28 06 F1 | 	add	local06, #44
23424     14 47 62 FC | 	wrlong	local21, local06
23428     2C 28 86 F1 | 	sub	local06, #44
2342c     1C 00 90 FD | 	jmp	#LR__3350
23430                 | LR__3349
23430     01 2A 06 F6 | 	mov	local07, #1
23434     F2 12 02 F6 | 	mov	arg01, objptr
23438     00 80 04 FF 
2343c     00 12 46 F5 | 	or	arg01, ##150994944
23440     2C 28 06 F1 | 	add	local06, #44
23444     14 13 62 FC | 	wrlong	arg01, local06
23448     2C 28 86 F1 | 	sub	local06, #44
2344c                 | LR__3350
2344c                 | LR__3351
2344c                 | LR__3352
2344c     00 2A 0E F2 | 	cmp	local07, #0 wz
23450     14 13 02 56 |  if_ne	mov	arg01, local06
23454     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
23458     00 42 0E F2 | 	cmp	local19, #0 wz
2345c     00 12 06 A6 |  if_e	mov	arg01, #0
23460     10 00 90 5D |  if_ne	jmp	#LR__3353
23464     00 12 4E F2 | 	cmps	arg01, #0 wz
23468     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2346c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23470     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23474                 | LR__3353
23474     21 FB 01 F6 | 	mov	result1, local19
23478                 | LR__3354
23478     A7 F0 03 F6 | 	mov	ptra, fp
2347c     B2 00 A0 FD | 	call	#popregs_
23480                 | __system___openraw_ret
23480     2D 00 64 FD | 	ret
23484                 | 
23484                 | __system___closeraw
23484     05 4A 05 F6 | 	mov	COUNT_, #5
23488     A8 00 A0 FD | 	call	#pushregs_
2348c     09 1F 02 F6 | 	mov	local01, arg01
23490     00 20 06 F6 | 	mov	local02, #0
23494     08 1E 06 F1 | 	add	local01, #8
23498     0F FB 09 FB | 	rdlong	result1, local01 wz
2349c     08 1E 86 F1 | 	sub	local01, #8
234a0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
234a4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
234a8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
234ac     01 FA 65 A6 |  if_e	neg	result1, #1
234b0     A8 00 90 AD |  if_e	jmp	#LR__3362
234b4     2C 1E 06 F1 | 	add	local01, #44
234b8     0F FB 09 FB | 	rdlong	result1, local01 wz
234bc     2C 1E 86 F1 | 	sub	local01, #44
234c0     38 00 90 AD |  if_e	jmp	#LR__3360
234c4     2C 1E 06 F1 | 	add	local01, #44
234c8     0F 23 02 FB | 	rdlong	local03, local01
234cc     11 25 02 F6 | 	mov	local04, local03
234d0     2C 1E 86 F1 | 	sub	local01, #44
234d4     13 24 46 F7 | 	zerox	local04, #19
234d8     14 22 46 F0 | 	shr	local03, #20
234dc     02 22 66 F0 | 	shl	local03, #2
234e0     ED 22 02 F1 | 	add	local03, __methods__
234e4     11 23 02 FB | 	rdlong	local03, local03
234e8     0F 13 02 F6 | 	mov	arg01, local01
234ec     F2 26 02 F6 | 	mov	local05, objptr
234f0     12 E5 01 F6 | 	mov	objptr, local04
234f4     2D 22 62 FD | 	call	local03
234f8     13 E5 01 F6 | 	mov	objptr, local05
234fc                 | LR__3360
234fc     24 1E 06 F1 | 	add	local01, #36
23500     0F 27 0A FB | 	rdlong	local05, local01 wz
23504     24 1E 86 F1 | 	sub	local01, #36
23508     3C 00 90 AD |  if_e	jmp	#LR__3361
2350c     24 1E 06 F1 | 	add	local01, #36
23510     0F 23 02 FB | 	rdlong	local03, local01
23514     11 25 02 F6 | 	mov	local04, local03
23518     24 1E 86 F1 | 	sub	local01, #36
2351c     13 24 46 F7 | 	zerox	local04, #19
23520     14 22 46 F0 | 	shr	local03, #20
23524     02 22 66 F0 | 	shl	local03, #2
23528     ED 22 02 F1 | 	add	local03, __methods__
2352c     11 23 02 FB | 	rdlong	local03, local03
23530     0F 13 02 F6 | 	mov	arg01, local01
23534     F2 26 02 F6 | 	mov	local05, objptr
23538     12 E5 01 F6 | 	mov	objptr, local04
2353c     2D 22 62 FD | 	call	local03
23540     13 E5 01 F6 | 	mov	objptr, local05
23544     FD 20 02 F6 | 	mov	local02, result1
23548                 | LR__3361
23548     0F 13 02 F6 | 	mov	arg01, local01
2354c     00 14 06 F6 | 	mov	arg02, #0
23550     34 16 06 F6 | 	mov	arg03, #52
23554     98 00 A0 FD | 	call	#\builtin_bytefill_
23558     10 FB 01 F6 | 	mov	result1, local02
2355c                 | LR__3362
2355c     A7 F0 03 F6 | 	mov	ptra, fp
23560     B2 00 A0 FD | 	call	#popregs_
23564                 | __system___closeraw_ret
23564     2D 00 64 FD | 	ret
23568                 | 
23568                 | __system___vfs_open_sdcardx
23568     0B 4A 05 F6 | 	mov	COUNT_, #11
2356c     A8 00 A0 FD | 	call	#pushregs_
23570     09 23 02 F6 | 	mov	local03, arg01
23574     0A 25 02 F6 | 	mov	local04, arg02
23578     0B 27 02 F6 | 	mov	local05, arg03
2357c     0C 29 02 F6 | 	mov	local06, arg04
23580     01 00 00 FF 
23584     24 12 06 F6 | 	mov	arg01, ##548
23588     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2358c     FD 2A 02 F6 | 	mov	local07, result1
23590     01 00 00 FF 
23594     34 12 06 F6 | 	mov	arg01, ##564
23598     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2359c     FD 2C 02 F6 | 	mov	local08, result1
235a0     11 19 02 F6 | 	mov	arg04, local03
235a4     1F 18 C6 F0 | 	sar	arg04, #31
235a8     11 17 02 F6 | 	mov	arg03, local03
235ac     01 12 06 F6 | 	mov	arg01, #1
235b0     00 14 06 F6 | 	mov	arg02, #0
235b4     48 DC BF FD | 	call	#__system___int64_shl
235b8     FD 1E 02 F6 | 	mov	local01, result1
235bc     FE 2E 02 F6 | 	mov	local09, result2
235c0     12 19 02 F6 | 	mov	arg04, local04
235c4     1F 18 C6 F0 | 	sar	arg04, #31
235c8     12 17 02 F6 | 	mov	arg03, local04
235cc     01 12 06 F6 | 	mov	arg01, #1
235d0     00 14 06 F6 | 	mov	arg02, #0
235d4     28 DC BF FD | 	call	#__system___int64_shl
235d8     FD 1E 42 F5 | 	or	local01, result1
235dc     FE 2E 42 F5 | 	or	local09, result2
235e0     13 19 02 F6 | 	mov	arg04, local05
235e4     1F 18 C6 F0 | 	sar	arg04, #31
235e8     13 17 02 F6 | 	mov	arg03, local05
235ec     01 12 06 F6 | 	mov	arg01, #1
235f0     00 14 06 F6 | 	mov	arg02, #0
235f4     08 DC BF FD | 	call	#__system___int64_shl
235f8     FD 1E 42 F5 | 	or	local01, result1
235fc     FE 2E 42 F5 | 	or	local09, result2
23600     14 19 02 F6 | 	mov	arg04, local06
23604     1F 18 C6 F0 | 	sar	arg04, #31
23608     14 17 02 F6 | 	mov	arg03, local06
2360c     01 12 06 F6 | 	mov	arg01, #1
23610     00 14 06 F6 | 	mov	arg02, #0
23614     E8 DB BF FD | 	call	#__system___int64_shl
23618     17 15 02 F6 | 	mov	arg02, local09
2361c     FD 1E 42 F5 | 	or	local01, result1
23620     0A FD 41 F5 | 	or	result2, arg02
23624     FE 20 02 F6 | 	mov	local02, result2
23628     0F 13 02 F6 | 	mov	arg01, local01
2362c     10 15 02 F6 | 	mov	arg02, local02
23630     04 DC BF FD | 	call	#__system___usepins
23634     00 FA 0D F2 | 	cmp	result1, #0 wz
23638     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2363c     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
23640     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23644     00 FA 05 A6 |  if_e	mov	result1, #0
23648     B4 00 90 AD |  if_e	jmp	#LR__3372
2364c     0F 31 02 F6 | 	mov	local10, local01
23650     10 2F 02 F6 | 	mov	local09, local02
23654     01 00 00 FF 
23658     08 2A 06 F1 | 	add	local07, ##520
2365c     15 31 62 FC | 	wrlong	local10, local07
23660     04 2A 06 F1 | 	add	local07, #4
23664     15 2F 62 FC | 	wrlong	local09, local07
23668     01 00 00 FF 
2366c     0C 2A 86 F1 | 	sub	local07, ##524
23670     14 1B 02 F6 | 	mov	arg05, local06
23674     00 12 06 F6 | 	mov	arg01, #0
23678     11 15 02 F6 | 	mov	arg02, local03
2367c     12 17 02 F6 | 	mov	arg03, local04
23680     13 19 02 F6 | 	mov	arg04, local05
23684     F2 30 02 F6 | 	mov	local10, objptr
23688     15 E5 01 F6 | 	mov	objptr, local07
2368c     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
23690     18 E5 01 F6 | 	mov	objptr, local10
23694     FD 32 0A F6 | 	mov	local11, result1 wz
23698     24 00 90 5D |  if_ne	jmp	#LR__3370
2369c     70 01 00 FF 
236a0     56 15 06 F6 | 	mov	arg02, ##@LR__4767
236a4     16 13 02 F6 | 	mov	arg01, local08
236a8     00 16 06 F6 | 	mov	arg03, #0
236ac     F2 32 02 F6 | 	mov	local11, objptr
236b0     15 E5 01 F6 | 	mov	objptr, local07
236b4     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
236b8     19 E5 01 F6 | 	mov	objptr, local11
236bc     FD 32 02 F6 | 	mov	local11, result1
236c0                 | LR__3370
236c0     00 32 0E F2 | 	cmp	local11, #0 wz
236c4     24 00 90 AD |  if_e	jmp	#LR__3371
236c8     0F 13 02 F6 | 	mov	arg01, local01
236cc     10 15 02 F6 | 	mov	arg02, local02
236d0     B8 DB BF FD | 	call	#__system___freepins
236d4     19 13 6A F6 | 	neg	arg01, local11 wz
236d8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
236dc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
236e0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
236e4     00 FA 05 F6 | 	mov	result1, #0
236e8     14 00 90 FD | 	jmp	#LR__3372
236ec                 | LR__3371
236ec     15 13 02 F6 | 	mov	arg01, local07
236f0     F2 32 02 F6 | 	mov	local11, objptr
236f4     15 E5 01 F6 | 	mov	objptr, local07
236f8     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
236fc     19 E5 01 F6 | 	mov	objptr, local11
23700                 | LR__3372
23700     A7 F0 03 F6 | 	mov	ptra, fp
23704     B2 00 A0 FD | 	call	#popregs_
23708                 | __system___vfs_open_sdcardx_ret
23708     2D 00 64 FD | 	ret
2370c                 | 
2370c                 | __system____default_getc
2370c     03 4A 05 F6 | 	mov	COUNT_, #3
23710     A8 00 A0 FD | 	call	#pushregs_
23714     09 1F 02 F6 | 	mov	local01, arg01
23718     0F 21 02 FB | 	rdlong	local02, local01
2371c     08 20 06 F1 | 	add	local02, #8
23720     10 23 02 FB | 	rdlong	local03, local02
23724     02 22 CE F7 | 	test	local03, #2 wz
23728     0F 13 02 56 |  if_ne	mov	arg01, local01
2372c     00 01 B0 5D |  if_ne	call	#__system____default_flush
23730     10 23 02 FB | 	rdlong	local03, local02
23734     01 22 46 F5 | 	or	local03, #1
23738     10 23 62 FC | 	wrlong	local03, local02
2373c     08 20 86 F1 | 	sub	local02, #8
23740     10 23 0A FB | 	rdlong	local03, local02 wz
23744     0C 00 90 5D |  if_ne	jmp	#LR__3380
23748     0F 13 02 F6 | 	mov	arg01, local01
2374c     64 16 B0 FD | 	call	#__system____default_filbuf
23750     FD 22 02 F6 | 	mov	local03, result1
23754                 | LR__3380
23754     01 22 56 F2 | 	cmps	local03, #1 wc
23758     01 FA 65 C6 |  if_b	neg	result1, #1
2375c     1C 00 90 CD |  if_b	jmp	#LR__3381
23760     01 22 86 F1 | 	sub	local03, #1
23764     10 23 62 FC | 	wrlong	local03, local02
23768     04 20 06 F1 | 	add	local02, #4
2376c     10 23 02 FB | 	rdlong	local03, local02
23770     11 FB C1 FA | 	rdbyte	result1, local03
23774     01 22 06 F1 | 	add	local03, #1
23778     10 23 62 FC | 	wrlong	local03, local02
2377c                 | LR__3381
2377c     A7 F0 03 F6 | 	mov	ptra, fp
23780     B2 00 A0 FD | 	call	#popregs_
23784                 | __system____default_getc_ret
23784     2D 00 64 FD | 	ret
23788                 | 
23788                 | __system____default_putc
23788     06 4A 05 F6 | 	mov	COUNT_, #6
2378c     A8 00 A0 FD | 	call	#pushregs_
23790     09 1F 02 F6 | 	mov	local01, arg01
23794     0A 21 02 F6 | 	mov	local02, arg02
23798     10 23 02 FB | 	rdlong	local03, local02
2379c     08 22 06 F1 | 	add	local03, #8
237a0     11 FB 01 FB | 	rdlong	result1, local03
237a4     01 FA CD F7 | 	test	result1, #1 wz
237a8     10 13 02 56 |  if_ne	mov	arg01, local02
237ac     80 00 B0 5D |  if_ne	call	#__system____default_flush
237b0     11 25 02 FB | 	rdlong	local04, local03
237b4     02 24 46 F5 | 	or	local04, #2
237b8     11 25 62 FC | 	wrlong	local04, local03
237bc     08 22 86 F1 | 	sub	local03, #8
237c0     11 27 02 FB | 	rdlong	local05, local03
237c4     10 22 06 F1 | 	add	local03, #16
237c8     11 15 02 FB | 	rdlong	arg02, local03
237cc     10 22 86 F1 | 	sub	local03, #16
237d0     13 FB 01 F6 | 	mov	result1, local05
237d4     0A FB 01 F1 | 	add	result1, arg02
237d8     FD 1E 42 FC | 	wrbyte	local01, result1
237dc     0F 1F E2 F8 | 	getbyte	local01, local01, #0
237e0     01 26 06 F1 | 	add	local05, #1
237e4     11 27 62 FC | 	wrlong	local05, local03
237e8     06 20 06 F1 | 	add	local02, #6
237ec     10 29 EA FA | 	rdword	local06, local02 wz
237f0     06 20 86 F1 | 	sub	local02, #6
237f4     0C 22 06 51 |  if_ne	add	local03, #12
237f8     11 25 02 5B |  if_ne	rdlong	local04, local03
237fc     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
23800     0C 00 90 AD |  if_e	jmp	#LR__3390
23804     0A 1E 0E F2 | 	cmp	local01, #10 wz
23808     01 28 0E A2 |  if_e	cmp	local06, #1 wz
2380c     10 00 90 5D |  if_ne	jmp	#LR__3391
23810                 | LR__3390
23810     10 13 02 F6 | 	mov	arg01, local02
23814     18 00 B0 FD | 	call	#__system____default_flush
23818     00 FA 0D F2 | 	cmp	result1, #0 wz
2381c     01 1E 66 56 |  if_ne	neg	local01, #1
23820                 | LR__3391
23820     0F FB 01 F6 | 	mov	result1, local01
23824     A7 F0 03 F6 | 	mov	ptra, fp
23828     B2 00 A0 FD | 	call	#popregs_
2382c                 | __system____default_putc_ret
2382c     2D 00 64 FD | 	ret
23830                 | 
23830                 | __system____default_flush
23830     06 4A 05 F6 | 	mov	COUNT_, #6
23834     A8 00 A0 FD | 	call	#pushregs_
23838     09 1F 02 F6 | 	mov	local01, arg01
2383c     0F 21 02 FB | 	rdlong	local02, local01
23840     10 23 02 FB | 	rdlong	local03, local02
23844     08 20 06 F1 | 	add	local02, #8
23848     10 FB 01 FB | 	rdlong	result1, local02
2384c     08 20 86 F1 | 	sub	local02, #8
23850     02 FA CD F7 | 	test	result1, #2 wz
23854     D0 00 90 AD |  if_e	jmp	#LR__3402
23858     01 22 56 F2 | 	cmps	local03, #1 wc
2385c     20 01 90 CD |  if_b	jmp	#LR__3404
23860     08 1E 06 F1 | 	add	local01, #8
23864     0F FB 01 FB | 	rdlong	result1, local01
23868     08 1E 86 F1 | 	sub	local01, #8
2386c     40 FA CD F7 | 	test	result1, #64 wz
23870     68 00 90 AD |  if_e	jmp	#LR__3401
23874     08 1E 06 F1 | 	add	local01, #8
23878     0F 17 02 FB | 	rdlong	arg03, local01
2387c     08 1E 86 F1 | 	sub	local01, #8
23880     80 16 CE F7 | 	test	arg03, #128 wz
23884     54 00 90 AD |  if_e	jmp	#LR__3400
23888     30 1E 06 F1 | 	add	local01, #48
2388c     0F 25 02 FB | 	rdlong	local04, local01
23890     12 27 02 F6 | 	mov	local05, local04
23894     30 1E 86 F1 | 	sub	local01, #48
23898     13 26 46 F7 | 	zerox	local05, #19
2389c     14 24 46 F0 | 	shr	local04, #20
238a0     02 24 66 F0 | 	shl	local04, #2
238a4     ED 24 02 F1 | 	add	local04, __methods__
238a8     12 25 02 FB | 	rdlong	local04, local04
238ac     0F 13 02 F6 | 	mov	arg01, local01
238b0     00 14 06 F6 | 	mov	arg02, #0
238b4     02 16 06 F6 | 	mov	arg03, #2
238b8     F2 28 02 F6 | 	mov	local06, objptr
238bc     13 E5 01 F6 | 	mov	objptr, local05
238c0     2D 24 62 FD | 	call	local04
238c4     14 E5 01 F6 | 	mov	objptr, local06
238c8     08 1E 06 F1 | 	add	local01, #8
238cc     0F 29 02 FB | 	rdlong	local06, local01
238d0     80 28 26 F5 | 	andn	local06, #128
238d4     0F 29 62 FC | 	wrlong	local06, local01
238d8     08 1E 86 F1 | 	sub	local01, #8
238dc                 | LR__3400
238dc                 | LR__3401
238dc     18 1E 06 F1 | 	add	local01, #24
238e0     0F 25 02 FB | 	rdlong	local04, local01
238e4     12 27 02 F6 | 	mov	local05, local04
238e8     18 1E 86 F1 | 	sub	local01, #24
238ec     13 26 46 F7 | 	zerox	local05, #19
238f0     14 24 46 F0 | 	shr	local04, #20
238f4     02 24 66 F0 | 	shl	local04, #2
238f8     ED 24 02 F1 | 	add	local04, __methods__
238fc     12 25 02 FB | 	rdlong	local04, local04
23900     10 20 06 F1 | 	add	local02, #16
23904     10 15 02 FB | 	rdlong	arg02, local02
23908     10 20 86 F1 | 	sub	local02, #16
2390c     0F 13 02 F6 | 	mov	arg01, local01
23910     11 17 02 F6 | 	mov	arg03, local03
23914     F2 28 02 F6 | 	mov	local06, objptr
23918     13 E5 01 F6 | 	mov	objptr, local05
2391c     2D 24 62 FD | 	call	local04
23920     14 E5 01 F6 | 	mov	objptr, local06
23924     58 00 90 FD | 	jmp	#LR__3404
23928                 | LR__3402
23928     08 20 06 F1 | 	add	local02, #8
2392c     10 29 02 FB | 	rdlong	local06, local02
23930     08 20 86 F1 | 	sub	local02, #8
23934     01 28 CE F7 | 	test	local06, #1 wz
23938     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
2393c     40 00 90 AD |  if_e	jmp	#LR__3403
23940     30 1E 06 F1 | 	add	local01, #48
23944     0F 25 02 FB | 	rdlong	local04, local01
23948     12 27 02 F6 | 	mov	local05, local04
2394c     30 1E 86 F1 | 	sub	local01, #48
23950     13 26 46 F7 | 	zerox	local05, #19
23954     14 24 46 F0 | 	shr	local04, #20
23958     02 24 66 F0 | 	shl	local04, #2
2395c     ED 24 02 F1 | 	add	local04, __methods__
23960     12 25 02 FB | 	rdlong	local04, local04
23964     0F 13 02 F6 | 	mov	arg01, local01
23968     11 15 62 F6 | 	neg	arg02, local03
2396c     01 16 06 F6 | 	mov	arg03, #1
23970     F2 28 02 F6 | 	mov	local06, objptr
23974     13 E5 01 F6 | 	mov	objptr, local05
23978     2D 24 62 FD | 	call	local04
2397c     14 E5 01 F6 | 	mov	objptr, local06
23980                 | LR__3403
23980                 | LR__3404
23980     10 01 68 FC | 	wrlong	#0, local02
23984     04 20 06 F1 | 	add	local02, #4
23988     10 01 68 FC | 	wrlong	#0, local02
2398c     04 20 06 F1 | 	add	local02, #4
23990     10 01 68 FC | 	wrlong	#0, local02
23994     00 FA 05 F6 | 	mov	result1, #0
23998     A7 F0 03 F6 | 	mov	ptra, fp
2399c     B2 00 A0 FD | 	call	#popregs_
239a0                 | __system____default_flush_ret
239a0     2D 00 64 FD | 	ret
239a4                 | 
239a4                 | __system____default_buffer_init
239a4     02 4A 05 F6 | 	mov	COUNT_, #2
239a8     A8 00 A0 FD | 	call	#pushregs_
239ac     09 1F 02 F6 | 	mov	local01, arg01
239b0     0F 21 02 FB | 	rdlong	local02, local01
239b4     0F 13 02 F6 | 	mov	arg01, local01
239b8     F8 02 B0 FD | 	call	#__system___isatty
239bc     00 FA 0D F2 | 	cmp	result1, #0 wz
239c0     06 1E 06 51 |  if_ne	add	local01, #6
239c4     0F 0B 58 5C |  if_ne	wrword	#5, local01
239c8     06 1E 06 A1 |  if_e	add	local01, #6
239cc     0F 0D 58 AC |  if_e	wrword	#6, local01
239d0     14 20 06 F1 | 	add	local02, #20
239d4     10 1F 02 F6 | 	mov	local01, local02
239d8     04 20 86 F1 | 	sub	local02, #4
239dc     10 1F 62 FC | 	wrlong	local01, local02
239e0     04 20 86 F1 | 	sub	local02, #4
239e4     02 00 80 FF 
239e8     10 01 68 FC | 	wrlong	##1024, local02
239ec     00 FA 05 F6 | 	mov	result1, #0
239f0     A7 F0 03 F6 | 	mov	ptra, fp
239f4     B2 00 A0 FD | 	call	#popregs_
239f8                 | __system____default_buffer_init_ret
239f8     2D 00 64 FD | 	ret
239fc                 | 
239fc                 | __system__stat
239fc     04 4A 05 F6 | 	mov	COUNT_, #4
23a00     A8 00 A0 FD | 	call	#pushregs_
23a04     0A 1F 02 F6 | 	mov	local01, arg02
23a08     84 E7 05 F1 | 	add	ptr___system__dat__, #388
23a0c     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
23a10     09 15 02 F6 | 	mov	arg02, arg01
23a14     10 13 02 F6 | 	mov	arg01, local02
23a18     00 16 06 F6 | 	mov	arg03, #0
23a1c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
23a20     AC B8 BF FD | 	call	#__system____getvfsforfile
23a24     FD 22 0A F6 | 	mov	local03, result1 wz
23a28     10 00 90 AD |  if_e	jmp	#LR__3410
23a2c     34 22 06 F1 | 	add	local03, #52
23a30     11 17 0A FB | 	rdlong	arg03, local03 wz
23a34     34 22 86 F1 | 	sub	local03, #52
23a38     14 00 90 5D |  if_ne	jmp	#LR__3411
23a3c                 | LR__3410
23a3c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23a40     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
23a44     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23a48     01 FA 65 F6 | 	neg	result1, #1
23a4c     68 00 90 FD | 	jmp	#LR__3412
23a50                 | LR__3411
23a50     0F 13 02 F6 | 	mov	arg01, local01
23a54     00 14 06 F6 | 	mov	arg02, #0
23a58     30 16 06 F6 | 	mov	arg03, #48
23a5c     09 25 02 F6 | 	mov	local04, arg01
23a60     98 00 A0 FD | 	call	#\builtin_bytefill_
23a64     12 FB 01 F6 | 	mov	result1, local04
23a68     10 13 CA FA | 	rdbyte	arg01, local02 wz
23a6c     08 1E 06 A1 |  if_e	add	local01, #8
23a70     08 00 80 AF 
23a74     0F FF 6B AC |  if_e	wrlong	##4607, local01
23a78     00 FA 05 A6 |  if_e	mov	result1, #0
23a7c     38 00 90 AD |  if_e	jmp	#LR__3412
23a80     34 22 06 F1 | 	add	local03, #52
23a84     11 23 02 FB | 	rdlong	local03, local03
23a88     11 25 02 F6 | 	mov	local04, local03
23a8c     13 22 46 F7 | 	zerox	local03, #19
23a90     14 24 46 F0 | 	shr	local04, #20
23a94     02 24 66 F0 | 	shl	local04, #2
23a98     ED 24 02 F1 | 	add	local04, __methods__
23a9c     12 25 02 FB | 	rdlong	local04, local04
23aa0     10 13 02 F6 | 	mov	arg01, local02
23aa4     0F 15 02 F6 | 	mov	arg02, local01
23aa8     F2 20 02 F6 | 	mov	local02, objptr
23aac     11 E5 01 F6 | 	mov	objptr, local03
23ab0     2D 24 62 FD | 	call	local04
23ab4     10 E5 01 F6 | 	mov	objptr, local02
23ab8                 | LR__3412
23ab8     A7 F0 03 F6 | 	mov	ptra, fp
23abc     B2 00 A0 FD | 	call	#popregs_
23ac0                 | __system__stat_ret
23ac0     2D 00 64 FD | 	ret
23ac4                 | 
23ac4                 | __system__read
23ac4     0A 12 16 F2 | 	cmp	arg01, #10 wc
23ac8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23acc     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23ad0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23ad4     01 FA 65 36 |  if_ae	neg	result1, #1
23ad8     20 00 90 3D |  if_ae	jmp	#LR__3420
23adc     34 12 06 FD | 	qmul	arg01, #52
23ae0     02 00 00 FF 
23ae4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23ae8     18 12 62 FD | 	getqx	arg01
23aec     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23af0     02 00 00 FF 
23af4     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23af8     D0 0F B0 FD | 	call	#__system___vfsread
23afc                 | LR__3420
23afc                 | __system__read_ret
23afc     2D 00 64 FD | 	ret
23b00                 | 
23b00                 | __system__close
23b00     0A 12 16 F2 | 	cmp	arg01, #10 wc
23b04     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23b08     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23b0c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23b10     01 FA 65 36 |  if_ae	neg	result1, #1
23b14     20 00 90 3D |  if_ae	jmp	#LR__3430
23b18     34 12 06 FD | 	qmul	arg01, #52
23b1c     02 00 00 FF 
23b20     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23b24     18 12 62 FD | 	getqx	arg01
23b28     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23b2c     02 00 00 FF 
23b30     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23b34     4C F9 BF FD | 	call	#__system___closeraw
23b38                 | LR__3430
23b38                 | __system__close_ret
23b38     2D 00 64 FD | 	ret
23b3c                 | 
23b3c                 | __system__lseek
23b3c     06 4A 05 F6 | 	mov	COUNT_, #6
23b40     A8 00 A0 FD | 	call	#pushregs_
23b44     0A 12 16 F2 | 	cmp	arg01, #10 wc
23b48     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23b4c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23b50     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23b54     01 FA 65 36 |  if_ae	neg	result1, #1
23b58     C4 00 90 3D |  if_ae	jmp	#LR__3441
23b5c     34 12 06 FD | 	qmul	arg01, #52
23b60     02 00 00 FF 
23b64     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23b68     18 1E 62 FD | 	getqx	local01
23b6c     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
23b70     30 1E 06 F1 | 	add	local01, #48
23b74     0F 13 0A FB | 	rdlong	arg01, local01 wz
23b78     30 1E 86 F1 | 	sub	local01, #48
23b7c     02 00 00 FF 
23b80     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23b84     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23b88     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
23b8c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23b90     01 FA 65 A6 |  if_e	neg	result1, #1
23b94     88 00 90 AD |  if_e	jmp	#LR__3441
23b98     08 1E 06 F1 | 	add	local01, #8
23b9c     0F 21 02 FB | 	rdlong	local02, local01
23ba0     08 1E 86 F1 | 	sub	local01, #8
23ba4     40 20 CE F7 | 	test	local02, #64 wz
23ba8     08 1E 06 51 |  if_ne	add	local01, #8
23bac     0F 21 02 5B |  if_ne	rdlong	local02, local01
23bb0     80 20 46 55 |  if_ne	or	local02, #128
23bb4     0F 21 62 5C |  if_ne	wrlong	local02, local01
23bb8     08 1E 86 51 |  if_ne	sub	local01, #8
23bbc     30 1E 06 F1 | 	add	local01, #48
23bc0     0F 23 02 FB | 	rdlong	local03, local01
23bc4     11 25 02 F6 | 	mov	local04, local03
23bc8     30 1E 86 F1 | 	sub	local01, #48
23bcc     13 24 46 F7 | 	zerox	local04, #19
23bd0     14 22 46 F0 | 	shr	local03, #20
23bd4     02 22 66 F0 | 	shl	local03, #2
23bd8     ED 22 02 F1 | 	add	local03, __methods__
23bdc     11 23 02 FB | 	rdlong	local03, local03
23be0     0F 13 02 F6 | 	mov	arg01, local01
23be4     F2 26 02 F6 | 	mov	local05, objptr
23be8     12 E5 01 F6 | 	mov	objptr, local04
23bec     2D 22 62 FD | 	call	local03
23bf0     13 E5 01 F6 | 	mov	objptr, local05
23bf4     FD 28 02 F6 | 	mov	local06, result1
23bf8     00 28 56 F2 | 	cmps	local06, #0 wc
23bfc     1C 00 90 3D |  if_ae	jmp	#LR__3440
23c00     14 13 6A F6 | 	neg	arg01, local06 wz
23c04     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23c08     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23c0c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23c10     01 FA 65 56 |  if_ne	neg	result1, #1
23c14     00 FA 05 A6 |  if_e	mov	result1, #0
23c18     04 00 90 FD | 	jmp	#LR__3441
23c1c                 | LR__3440
23c1c     14 FB 01 F6 | 	mov	result1, local06
23c20                 | LR__3441
23c20     A7 F0 03 F6 | 	mov	ptra, fp
23c24     B2 00 A0 FD | 	call	#popregs_
23c28                 | __system__lseek_ret
23c28     2D 00 64 FD | 	ret
23c2c                 | 
23c2c                 | __system___ioctl
23c2c     03 4A 05 F6 | 	mov	COUNT_, #3
23c30     A8 00 A0 FD | 	call	#pushregs_
23c34     00 12 4E F2 | 	cmps	arg01, #0 wz
23c38     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23c3c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23c40     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23c44     01 FA 65 A6 |  if_e	neg	result1, #1
23c48     5C 00 90 AD |  if_e	jmp	#LR__3451
23c4c     28 12 06 F1 | 	add	arg01, #40
23c50     09 1F 02 FB | 	rdlong	local01, arg01
23c54     0F 21 02 F6 | 	mov	local02, local01
23c58     28 12 86 F1 | 	sub	arg01, #40
23c5c     13 20 46 F7 | 	zerox	local02, #19
23c60     14 1E 46 F0 | 	shr	local01, #20
23c64     02 1E 66 F0 | 	shl	local01, #2
23c68     ED 1E 02 F1 | 	add	local01, __methods__
23c6c     0F 1F 02 FB | 	rdlong	local01, local01
23c70     F2 22 02 F6 | 	mov	local03, objptr
23c74     10 E5 01 F6 | 	mov	objptr, local02
23c78     2D 1E 62 FD | 	call	local01
23c7c     11 E5 01 F6 | 	mov	objptr, local03
23c80     FD 12 0A F6 | 	mov	arg01, result1 wz
23c84     1C 00 90 AD |  if_e	jmp	#LR__3450
23c88     00 12 4E F2 | 	cmps	arg01, #0 wz
23c8c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23c90     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23c94     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23c98     01 FA 65 56 |  if_ne	neg	result1, #1
23c9c     00 FA 05 A6 |  if_e	mov	result1, #0
23ca0     04 00 90 FD | 	jmp	#LR__3451
23ca4                 | LR__3450
23ca4     00 FA 05 F6 | 	mov	result1, #0
23ca8                 | LR__3451
23ca8     A7 F0 03 F6 | 	mov	ptra, fp
23cac     B2 00 A0 FD | 	call	#popregs_
23cb0                 | __system___ioctl_ret
23cb0     2D 00 64 FD | 	ret
23cb4                 | 
23cb4                 | __system___isatty
23cb4     00 4A 05 F6 | 	mov	COUNT_, #0
23cb8     A8 00 A0 FD | 	call	#pushregs_
23cbc     0C F0 07 F1 | 	add	ptra, #12
23cc0     04 4E 05 F1 | 	add	fp, #4
23cc4     A7 12 62 FC | 	wrlong	arg01, fp
23cc8     04 4E 05 F1 | 	add	fp, #4
23ccc     A7 16 02 F6 | 	mov	arg03, fp
23cd0     08 4E 85 F1 | 	sub	fp, #8
23cd4     00 15 06 F6 | 	mov	arg02, #256
23cd8     50 FF BF FD | 	call	#__system___ioctl
23cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
23ce0     01 FA 05 A6 |  if_e	mov	result1, #1
23ce4     00 FA 05 56 |  if_ne	mov	result1, #0
23ce8     A7 F0 03 F6 | 	mov	ptra, fp
23cec     B2 00 A0 FD | 	call	#popregs_
23cf0                 | __system___isatty_ret
23cf0     2D 00 64 FD | 	ret
23cf4                 | 
23cf4                 | __system____getftab
23cf4     0A 12 16 F2 | 	cmp	arg01, #10 wc
23cf8     34 12 06 CD |  if_b	qmul	arg01, #52
23cfc     00 FA 05 36 |  if_ae	mov	result1, #0
23d00     02 00 00 CF 
23d04     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
23d08     18 FA 61 CD |  if_b	getqx	result1
23d0c     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
23d10     02 00 00 CF 
23d14     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
23d18                 | __system____getftab_ret
23d18     2D 00 64 FD | 	ret
23d1c                 | 
23d1c                 | __system__strncpy
23d1c     09 01 02 F6 | 	mov	_var01, arg01
23d20                 | LR__3460
23d20     01 16 86 F1 | 	sub	arg03, #1
23d24     00 16 56 F2 | 	cmps	arg03, #0 wc
23d28     18 00 90 CD |  if_b	jmp	#LR__3461
23d2c     0A FB C1 FA | 	rdbyte	result1, arg02
23d30     00 FB 41 FC | 	wrbyte	result1, _var01
23d34     01 14 06 F1 | 	add	arg02, #1
23d38     00 FB C9 FA | 	rdbyte	result1, _var01 wz
23d3c     01 00 06 F1 | 	add	_var01, #1
23d40     DC FF 9F 5D |  if_ne	jmp	#LR__3460
23d44                 | LR__3461
23d44     97 0C 48 FB | 	callpa	#(@LR__3463-@LR__3462)>>2,fcache_load_ptr_
23d48                 | LR__3462
23d48     01 16 86 F1 | 	sub	arg03, #1
23d4c     00 16 56 F2 | 	cmps	arg03, #0 wc
23d50     00 03 02 36 |  if_ae	mov	_var02, _var01
23d54     01 00 06 31 |  if_ae	add	_var01, #1
23d58     01 01 48 3C |  if_ae	wrbyte	#0, _var02
23d5c     E8 FF 9F 3D |  if_ae	jmp	#LR__3462
23d60                 | LR__3463
23d60     09 FB 01 F6 | 	mov	result1, arg01
23d64                 | __system__strncpy_ret
23d64     2D 00 64 FD | 	ret
23d68                 | 
23d68                 | __system__strncat
23d68     00 14 4E F2 | 	cmps	arg02, #0 wz
23d6c     50 00 90 AD |  if_e	jmp	#LR__3474
23d70     01 16 16 F2 | 	cmp	arg03, #1 wc
23d74     48 00 90 CD |  if_b	jmp	#LR__3474
23d78     09 01 02 F6 | 	mov	_var01, arg01
23d7c     97 1E 48 FB | 	callpa	#(@LR__3472-@LR__3470)>>2,fcache_load_ptr_
23d80                 | LR__3470
23d80     00 FB C9 FA | 	rdbyte	result1, _var01 wz
23d84     01 00 06 51 |  if_ne	add	_var01, #1
23d88     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
23d8c     0B 03 02 F6 | 	mov	_var02, arg03
23d90                 | LR__3471
23d90     0A 05 C2 FA | 	rdbyte	_var03, arg02
23d94     02 07 02 F6 | 	mov	_var04, _var03
23d98     07 06 4E F7 | 	zerox	_var04, #7 wz
23d9c     01 14 06 F1 | 	add	arg02, #1
23da0     18 00 90 AD |  if_e	jmp	#LR__3473
23da4     01 02 86 F1 | 	sub	_var02, #1
23da8     00 02 56 F2 | 	cmps	_var02, #0 wc
23dac     00 07 02 36 |  if_ae	mov	_var04, _var01
23db0     01 00 06 31 |  if_ae	add	_var01, #1
23db4     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
23db8     D4 FF 9F 3D |  if_ae	jmp	#LR__3471
23dbc                 | LR__3472
23dbc                 | LR__3473
23dbc     00 01 48 FC | 	wrbyte	#0, _var01
23dc0                 | LR__3474
23dc0     09 FB 01 F6 | 	mov	result1, arg01
23dc4                 | __system__strncat_ret
23dc4     2D 00 64 FD | 	ret
23dc8                 | 
23dc8                 | __system__strncmp
23dc8     09 01 0A F6 | 	mov	_var01, arg01 wz
23dcc     14 00 90 5D |  if_ne	jmp	#LR__3480
23dd0     00 14 0E F2 | 	cmp	arg02, #0 wz
23dd4     01 02 66 56 |  if_ne	neg	_var02, #1
23dd8     00 02 06 A6 |  if_e	mov	_var02, #0
23ddc     01 FB 01 F6 | 	mov	result1, _var02
23de0     74 00 90 FD | 	jmp	#__system__strncmp_ret
23de4                 | LR__3480
23de4     00 14 0E F2 | 	cmp	arg02, #0 wz
23de8     01 FA 05 A6 |  if_e	mov	result1, #1
23dec     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
23df0     0B 05 02 F6 | 	mov	_var03, arg03
23df4     97 16 48 FB | 	callpa	#(@LR__3482-@LR__3481)>>2,fcache_load_ptr_
23df8                 | LR__3481
23df8     00 07 C2 FA | 	rdbyte	_var04, _var01
23dfc     0A 09 02 F6 | 	mov	_var05, arg02
23e00     04 0B C2 FA | 	rdbyte	_var06, _var05
23e04     01 04 86 F1 | 	sub	_var03, #1
23e08     00 04 56 F2 | 	cmps	_var03, #0 wc
23e0c     01 00 06 F1 | 	add	_var01, #1
23e10     01 14 06 F1 | 	add	arg02, #1
23e14     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
23e18     08 00 90 2D |  if_nc_and_z	jmp	#LR__3483
23e1c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
23e20     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3481
23e24                 | LR__3482
23e24                 | LR__3483
23e24     00 04 56 F2 | 	cmps	_var03, #0 wc
23e28     00 FA 05 C6 |  if_b	mov	result1, #0
23e2c     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
23e30     05 07 0A F2 | 	cmp	_var04, _var06 wz
23e34     00 FA 05 A6 |  if_e	mov	result1, #0
23e38     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
23e3c     00 06 0E F2 | 	cmp	_var04, #0 wz
23e40     01 FA 65 A6 |  if_e	neg	result1, #1
23e44     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
23e48     00 0A 0E F2 | 	cmp	_var06, #0 wz
23e4c     01 FA 05 A6 |  if_e	mov	result1, #1
23e50     03 FB 01 56 |  if_ne	mov	result1, _var04
23e54     05 FB 81 51 |  if_ne	sub	result1, _var06
23e58                 | __system__strncmp_ret
23e58     2D 00 64 FD | 	ret
23e5c                 | 
23e5c                 | __system____root_opendir
23e5c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
23e60     04 12 06 F1 | 	add	arg01, #4
23e64     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
23e68     00 FA 05 F6 | 	mov	result1, #0
23e6c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
23e70                 | __system____root_opendir_ret
23e70     2D 00 64 FD | 	ret
23e74                 | 
23e74                 | __system____root_readdir
23e74     03 4A 05 F6 | 	mov	COUNT_, #3
23e78     A8 00 A0 FD | 	call	#pushregs_
23e7c     09 1F 02 F6 | 	mov	local01, arg01
23e80     0A 21 02 F6 | 	mov	local02, arg02
23e84     04 1E 06 F1 | 	add	local01, #4
23e88     0F 23 02 FB | 	rdlong	local03, local01
23e8c     04 1E 86 F1 | 	sub	local01, #4
23e90                 | LR__3490
23e90     74 E6 05 F1 | 	add	ptr___system__dat__, #116
23e94     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
23e98     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
23e9c     01 FA 65 A6 |  if_e	neg	result1, #1
23ea0     48 00 90 AD |  if_e	jmp	#LR__3491
23ea4     11 17 0A FB | 	rdlong	arg03, local03 wz
23ea8     04 22 06 A1 |  if_e	add	local03, #4
23eac     E0 FF 9F AD |  if_e	jmp	#LR__3490
23eb0     11 15 02 FB | 	rdlong	arg02, local03
23eb4     01 14 06 F1 | 	add	arg02, #1
23eb8     10 13 02 F6 | 	mov	arg01, local02
23ebc     40 16 06 F6 | 	mov	arg03, #64
23ec0     58 FE BF FD | 	call	#__system__strncpy
23ec4     50 20 06 F1 | 	add	local02, #80
23ec8     10 03 48 FC | 	wrbyte	#1, local02
23ecc     08 20 86 F1 | 	sub	local02, #8
23ed0     10 01 68 FC | 	wrlong	#0, local02
23ed4     04 20 06 F1 | 	add	local02, #4
23ed8     10 01 68 FC | 	wrlong	#0, local02
23edc     04 22 06 F1 | 	add	local03, #4
23ee0     04 1E 06 F1 | 	add	local01, #4
23ee4     0F 23 62 FC | 	wrlong	local03, local01
23ee8     00 FA 05 F6 | 	mov	result1, #0
23eec                 | LR__3491
23eec     A7 F0 03 F6 | 	mov	ptra, fp
23ef0     B2 00 A0 FD | 	call	#popregs_
23ef4                 | __system____root_readdir_ret
23ef4     2D 00 64 FD | 	ret
23ef8                 | 
23ef8                 | __system____root_closedir
23ef8     00 FA 05 F6 | 	mov	result1, #0
23efc                 | __system____root_closedir_ret
23efc     2D 00 64 FD | 	ret
23f00                 | 
23f00                 | __system____root_stat
23f00     0A 01 02 F6 | 	mov	_var01, arg02
23f04     00 13 02 F6 | 	mov	arg01, _var01
23f08     00 14 06 F6 | 	mov	arg02, #0
23f0c     30 16 06 F6 | 	mov	arg03, #48
23f10     98 00 A0 FD | 	call	#\builtin_bytefill_
23f14     08 00 06 F1 | 	add	_var01, #8
23f18     08 00 80 FF 
23f1c     00 FF 6B FC | 	wrlong	##4607, _var01
23f20     00 FA 05 F6 | 	mov	result1, #0
23f24                 | __system____root_stat_ret
23f24     2D 00 64 FD | 	ret
23f28                 | 
23f28                 | __system___normalizeName
23f28     00 00 06 F6 | 	mov	_var01, #0
23f2c     09 03 02 F6 | 	mov	_var02, arg01
23f30     01 05 02 F6 | 	mov	_var03, _var02
23f34                 | LR__3500
23f34     01 07 CA FA | 	rdbyte	_var04, _var02 wz
23f38     5C 01 90 AD |  if_e	jmp	#LR__3519
23f3c     00 00 0E F2 | 	cmp	_var01, #0 wz
23f40     02 07 02 56 |  if_ne	mov	_var04, _var03
23f44     01 04 06 51 |  if_ne	add	_var03, #1
23f48     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
23f4c     00 00 06 56 |  if_ne	mov	_var01, #0
23f50     01 07 C2 FA | 	rdbyte	_var04, _var02
23f54     2E 06 0E F2 | 	cmp	_var04, #46 wz
23f58     D8 00 90 5D |  if_ne	jmp	#LR__3512
23f5c     01 02 06 F1 | 	add	_var02, #1
23f60     01 07 C2 FA | 	rdbyte	_var04, _var02
23f64     01 02 86 F1 | 	sub	_var02, #1
23f68     2F 06 0E F2 | 	cmp	_var04, #47 wz
23f6c     18 00 90 AD |  if_e	jmp	#LR__3501
23f70     01 02 06 F1 | 	add	_var02, #1
23f74     01 09 C2 FA | 	rdbyte	_var05, _var02
23f78     01 02 86 F1 | 	sub	_var02, #1
23f7c     04 0B 02 F6 | 	mov	_var06, _var05
23f80     07 0A 4E F7 | 	zerox	_var06, #7 wz
23f84     10 00 90 5D |  if_ne	jmp	#LR__3502
23f88                 | LR__3501
23f88     01 0D 02 F6 | 	mov	_var07, _var02
23f8c     01 0C 06 F1 | 	add	_var07, #1
23f90     06 03 02 F6 | 	mov	_var02, _var07
23f94     E0 00 90 FD | 	jmp	#LR__3516
23f98                 | LR__3502
23f98     01 02 06 F1 | 	add	_var02, #1
23f9c     01 0D C2 FA | 	rdbyte	_var07, _var02
23fa0     01 02 86 F1 | 	sub	_var02, #1
23fa4     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
23fa8     2E 06 0E F2 | 	cmp	_var04, #46 wz
23fac     84 00 90 5D |  if_ne	jmp	#LR__3511
23fb0     02 02 06 F1 | 	add	_var02, #2
23fb4     01 0D C2 FA | 	rdbyte	_var07, _var02
23fb8     02 02 86 F1 | 	sub	_var02, #2
23fbc     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
23fc0     2F 06 0E F2 | 	cmp	_var04, #47 wz
23fc4     18 00 90 AD |  if_e	jmp	#LR__3503
23fc8     02 02 06 F1 | 	add	_var02, #2
23fcc     01 09 C2 FA | 	rdbyte	_var05, _var02
23fd0     02 02 86 F1 | 	sub	_var02, #2
23fd4     04 0B 02 F6 | 	mov	_var06, _var05
23fd8     07 0A 4E F7 | 	zerox	_var06, #7 wz
23fdc     54 00 90 5D |  if_ne	jmp	#LR__3510
23fe0                 | LR__3503
23fe0     02 02 06 F1 | 	add	_var02, #2
23fe4     09 05 5A F2 | 	cmps	_var03, arg01 wcz
23fe8     40 00 90 ED |  if_be	jmp	#LR__3509
23fec     02 0F 02 F6 | 	mov	_var08, _var03
23ff0     01 0E 86 F1 | 	sub	_var08, #1
23ff4                 | LR__3504
23ff4     07 07 C2 FA | 	rdbyte	_var04, _var08
23ff8     2F 06 0E F2 | 	cmp	_var04, #47 wz
23ffc     0C 00 90 5D |  if_ne	jmp	#LR__3505
24000     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
24004     01 0E 86 11 |  if_a	sub	_var08, #1
24008     E8 FF 9F 1D |  if_a	jmp	#LR__3504
2400c                 | LR__3505
2400c     97 0C 48 FB | 	callpa	#(@LR__3507-@LR__3506)>>2,fcache_load_ptr_
24010                 | LR__3506
24010     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
24014     10 00 90 ED |  if_be	jmp	#LR__3508
24018     07 07 C2 FA | 	rdbyte	_var04, _var08
2401c     2F 06 0E F2 | 	cmp	_var04, #47 wz
24020     01 0E 86 51 |  if_ne	sub	_var08, #1
24024     E8 FF 9F 5D |  if_ne	jmp	#LR__3506
24028                 | LR__3507
24028                 | LR__3508
24028     07 05 02 F6 | 	mov	_var03, _var08
2402c                 | LR__3509
2402c     01 00 06 F6 | 	mov	_var01, #1
24030     44 00 90 FD | 	jmp	#LR__3516
24034                 | LR__3510
24034                 | LR__3511
24034                 | LR__3512
24034     97 18 48 FB | 	callpa	#(@LR__3514-@LR__3513)>>2,fcache_load_ptr_
24038                 | LR__3513
24038     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2403c     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
24040     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
24044     20 00 90 AD |  if_e	jmp	#LR__3515
24048     01 0B 02 F6 | 	mov	_var06, _var02
2404c     01 09 02 F6 | 	mov	_var05, _var02
24050     01 08 06 F1 | 	add	_var05, #1
24054     05 11 C2 FA | 	rdbyte	_var09, _var06
24058     04 03 02 F6 | 	mov	_var02, _var05
2405c     02 11 42 FC | 	wrbyte	_var09, _var03
24060     01 04 06 F1 | 	add	_var03, #1
24064     D0 FF 9F FD | 	jmp	#LR__3513
24068                 | LR__3514
24068                 | LR__3515
24068     01 07 C2 FA | 	rdbyte	_var04, _var02
2406c     2F 06 0E F2 | 	cmp	_var04, #47 wz
24070     C0 FE 9F 5D |  if_ne	jmp	#LR__3500
24074     01 00 06 F6 | 	mov	_var01, #1
24078                 | LR__3516
24078     97 0C 48 FB | 	callpa	#(@LR__3518-@LR__3517)>>2,fcache_load_ptr_
2407c                 | LR__3517
2407c     01 07 C2 FA | 	rdbyte	_var04, _var02
24080     2F 06 0E F2 | 	cmp	_var04, #47 wz
24084     01 0D 02 A6 |  if_e	mov	_var07, _var02
24088     01 0C 06 A1 |  if_e	add	_var07, #1
2408c     06 03 02 A6 |  if_e	mov	_var02, _var07
24090     E8 FF 9F AD |  if_e	jmp	#LR__3517
24094                 | LR__3518
24094     9C FE 9F FD | 	jmp	#LR__3500
24098                 | LR__3519
24098     02 01 48 FC | 	wrbyte	#0, _var03
2409c                 | __system___normalizeName_ret
2409c     2D 00 64 FD | 	ret
240a0                 | 
240a0                 | __system___strrev
240a0     09 01 CA FA | 	rdbyte	_var01, arg01 wz
240a4     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
240a8     09 03 02 F6 | 	mov	_var02, arg01
240ac     97 1A 48 FB | 	callpa	#(@LR__3522-@LR__3520)>>2,fcache_load_ptr_
240b0                 | LR__3520
240b0     01 01 CA FA | 	rdbyte	_var01, _var02 wz
240b4     01 02 06 51 |  if_ne	add	_var02, #1
240b8     F4 FF 9F 5D |  if_ne	jmp	#LR__3520
240bc     01 02 86 F1 | 	sub	_var02, #1
240c0                 | LR__3521
240c0     09 03 5A F2 | 	cmps	_var02, arg01 wcz
240c4     1C 00 90 ED |  if_be	jmp	#LR__3523
240c8     09 01 C2 FA | 	rdbyte	_var01, arg01
240cc     01 05 C2 FA | 	rdbyte	_var03, _var02
240d0     09 05 42 FC | 	wrbyte	_var03, arg01
240d4     01 01 42 FC | 	wrbyte	_var01, _var02
240d8     01 12 06 F1 | 	add	arg01, #1
240dc     01 02 86 F1 | 	sub	_var02, #1
240e0     DC FF 9F FD | 	jmp	#LR__3521
240e4                 | LR__3522
240e4                 | LR__3523
240e4                 | __system___strrev_ret
240e4     2D 00 64 FD | 	ret
240e8                 | 
240e8                 | __system___fmtpad
240e8     06 4A 05 F6 | 	mov	COUNT_, #6
240ec     A8 00 A0 FD | 	call	#pushregs_
240f0     09 1F 02 F6 | 	mov	local01, arg01
240f4     0A 21 02 F6 | 	mov	local02, arg02
240f8     0B 23 02 F6 | 	mov	local03, arg03
240fc     10 13 EA F8 | 	getbyte	arg01, local02, #1
24100     16 20 46 F0 | 	shr	local02, #22
24104     03 20 0E F5 | 	and	local02, #3 wz
24108     00 24 06 F6 | 	mov	local04, #0
2410c     01 20 06 A6 |  if_e	mov	local02, #1
24110     0C 21 CA F7 | 	test	local02, arg04 wz
24114     00 FA 05 A6 |  if_e	mov	result1, #0
24118     88 00 90 AD |  if_e	jmp	#LR__3533
2411c     09 23 C2 F2 | 	subr	local03, arg01
24120     01 22 56 F2 | 	cmps	local03, #1 wc
24124     00 FA 05 C6 |  if_b	mov	result1, #0
24128     78 00 90 CD |  if_b	jmp	#LR__3533
2412c     03 20 0E F2 | 	cmp	local02, #3 wz
24130     18 00 90 5D |  if_ne	jmp	#LR__3530
24134     01 18 0E F2 | 	cmp	arg04, #1 wz
24138     6E 20 62 FD | 	wrz	local02
2413c     10 23 02 F1 | 	add	local03, local02
24140     11 23 52 F6 | 	abs	local03, local03 wc
24144     01 22 46 F0 | 	shr	local03, #1
24148     11 23 82 F6 | 	negc	local03, local03
2414c                 | LR__3530
2414c     01 22 56 F2 | 	cmps	local03, #1 wc
24150     4C 00 90 CD |  if_b	jmp	#LR__3532
24154     11 27 02 F6 | 	mov	local05, local03
24158                 | LR__3531
24158     0F 21 02 F6 | 	mov	local02, local01
2415c     0F 29 02 F6 | 	mov	local06, local01
24160     13 20 46 F7 | 	zerox	local02, #19
24164     14 28 46 F0 | 	shr	local06, #20
24168     02 28 66 F0 | 	shl	local06, #2
2416c     ED 28 02 F1 | 	add	local06, __methods__
24170     14 29 02 FB | 	rdlong	local06, local06
24174     20 12 06 F6 | 	mov	arg01, #32
24178     F2 22 02 F6 | 	mov	local03, objptr
2417c     10 E5 01 F6 | 	mov	objptr, local02
24180     2D 28 62 FD | 	call	local06
24184     11 E5 01 F6 | 	mov	objptr, local03
24188     FD 28 02 F6 | 	mov	local06, result1
2418c     00 28 56 F2 | 	cmps	local06, #0 wc
24190     14 FB 01 C6 |  if_b	mov	result1, local06
24194     0C 00 90 CD |  if_b	jmp	#LR__3533
24198     14 25 02 F1 | 	add	local04, local06
2419c     EE 27 6E FB | 	djnz	local05, #LR__3531
241a0                 | LR__3532
241a0     12 FB 01 F6 | 	mov	result1, local04
241a4                 | LR__3533
241a4     A7 F0 03 F6 | 	mov	ptra, fp
241a8     B2 00 A0 FD | 	call	#popregs_
241ac                 | __system___fmtpad_ret
241ac     2D 00 64 FD | 	ret
241b0                 | 
241b0                 | __system___uitoa
241b0     04 4A 05 F6 | 	mov	COUNT_, #4
241b4     A8 00 A0 FD | 	call	#pushregs_
241b8     09 1F 02 F6 | 	mov	local01, arg01
241bc     00 1A 4E F2 | 	cmps	arg05, #0 wz
241c0     0F 1B 02 F6 | 	mov	arg05, local01
241c4     00 20 06 F6 | 	mov	local02, #0
241c8     37 22 06 56 |  if_ne	mov	local03, #55
241cc     57 22 06 A6 |  if_e	mov	local03, #87
241d0                 | LR__3540
241d0     0B 15 12 FD | 	qdiv	arg02, arg03
241d4     19 24 62 FD | 	getqy	local04
241d8     0B 15 12 FD | 	qdiv	arg02, arg03
241dc     0A 24 16 F2 | 	cmp	local04, #10 wc
241e0     30 24 06 C1 |  if_b	add	local04, #48
241e4     11 25 02 31 |  if_ae	add	local04, local03
241e8     0D 25 42 FC | 	wrbyte	local04, arg05
241ec     01 1A 06 F1 | 	add	arg05, #1
241f0     01 20 06 F1 | 	add	local02, #1
241f4     18 14 62 FD | 	getqx	arg02
241f8     00 14 0E F2 | 	cmp	arg02, #0 wz
241fc     D0 FF 9F 5D |  if_ne	jmp	#LR__3540
24200     0C 21 12 F2 | 	cmp	local02, arg04 wc
24204     C8 FF 9F CD |  if_b	jmp	#LR__3540
24208     0D 01 48 FC | 	wrbyte	#0, arg05
2420c     0F 13 02 F6 | 	mov	arg01, local01
24210     8C FE BF FD | 	call	#__system___strrev
24214     10 FB 01 F6 | 	mov	result1, local02
24218     A7 F0 03 F6 | 	mov	ptra, fp
2421c     B2 00 A0 FD | 	call	#popregs_
24220                 | __system___uitoa_ret
24220     2D 00 64 FD | 	ret
24224                 | 
24224                 | __system__disassemble_0442
24224     10 4A 05 F6 | 	mov	COUNT_, #16
24228     A8 00 A0 FD | 	call	#pushregs_
2422c     09 1F 02 F6 | 	mov	local01, arg01
24230     0A 21 02 F6 | 	mov	local02, arg02
24234     0B 23 02 F6 | 	mov	local03, arg03
24238     0C 25 02 F6 | 	mov	local04, arg04
2423c     0D 27 02 F6 | 	mov	local05, arg05
24240     13 13 52 F6 | 	abs	arg01, local05 wc
24244     1F 28 C6 C9 |  if_b	decod	local06, #31
24248     00 28 06 36 |  if_ae	mov	local06, #0
2424c     64 D0 BF FD | 	call	#__system___float_fromuns
24250     14 FB 61 F5 | 	xor	result1, local06
24254     FD 2A 02 F6 | 	mov	local07, result1
24258     00 2C 06 F6 | 	mov	local08, #0
2425c     0F 13 02 F6 | 	mov	arg01, local01
24260     00 14 06 F6 | 	mov	arg02, #0
24264     01 16 06 F6 | 	mov	arg03, #1
24268     80 D8 BF FD | 	call	#__system___float_cmp
2426c     00 FA 0D F2 | 	cmp	result1, #0 wz
24270     00 2E 06 A6 |  if_e	mov	local09, #0
24274     10 01 68 AC |  if_e	wrlong	#0, local02
24278     11 2F 62 AC |  if_e	wrlong	local09, local03
2427c     8C 01 90 AD |  if_e	jmp	#LR__3562
24280     0F 13 02 F6 | 	mov	arg01, local01
24284     30 DD BF FD | 	call	#__system____builtin_ilogb
24288     FD 30 02 F6 | 	mov	local10, result1
2428c     0A 26 0E F2 | 	cmp	local05, #10 wz
24290     24 00 90 5D |  if_ne	jmp	#LR__3550
24294     18 2F 02 F6 | 	mov	local09, local10
24298     01 2E 66 F0 | 	shl	local09, #1
2429c     18 2F 02 F1 | 	add	local09, local10
242a0     17 31 52 F6 | 	abs	local10, local09 wc
242a4     0A 30 16 FD | 	qdiv	local10, #10
242a8     09 32 06 F6 | 	mov	local11, #9
242ac     18 30 62 FD | 	getqx	local10
242b0     18 31 82 F6 | 	negc	local10, local10
242b4     04 00 90 FD | 	jmp	#LR__3551
242b8                 | LR__3550
242b8     18 32 06 F6 | 	mov	local11, #24
242bc                 | LR__3551
242bc                 | LR__3552
242bc     08 2C 56 F2 | 	cmps	local08, #8 wc
242c0     01 2C 06 F1 | 	add	local08, #1
242c4     60 00 90 3D |  if_ae	jmp	#LR__3553
242c8     00 C0 1F FF 
242cc     00 12 06 F6 | 	mov	arg01, ##1065353216
242d0     15 15 02 F6 | 	mov	arg02, local07
242d4     18 17 02 F6 | 	mov	arg03, local10
242d8     88 E3 BF FD | 	call	#__system___float_pow_n
242dc     FD 14 02 F6 | 	mov	arg02, result1
242e0     0F 13 02 F6 | 	mov	arg01, local01
242e4     D4 D5 BF FD | 	call	#__system___float_div
242e8     FD 34 02 F6 | 	mov	local12, result1
242ec     1A 13 02 F6 | 	mov	arg01, local12
242f0     00 C0 1F FF 
242f4     00 14 06 F6 | 	mov	arg02, ##1065353216
242f8     01 16 06 F6 | 	mov	arg03, #1
242fc     EC D7 BF FD | 	call	#__system___float_cmp
24300     00 FA 55 F2 | 	cmps	result1, #0 wc
24304     01 30 86 C1 |  if_b	sub	local10, #1
24308     B0 FF 9F CD |  if_b	jmp	#LR__3552
2430c     15 15 02 F6 | 	mov	arg02, local07
24310     1A 13 02 F6 | 	mov	arg01, local12
24314     01 16 66 F6 | 	neg	arg03, #1
24318     D0 D7 BF FD | 	call	#__system___float_cmp
2431c     00 FA 55 F2 | 	cmps	result1, #0 wc
24320     01 30 06 31 |  if_ae	add	local10, #1
24324     94 FF 9F 3D |  if_ae	jmp	#LR__3552
24328                 | LR__3553
24328     1A 13 02 F6 | 	mov	arg01, local12
2432c     88 DC BF FD | 	call	#__system____builtin_ilogb
24330     FD 36 02 F6 | 	mov	local13, result1
24334     1A 39 02 F6 | 	mov	local14, local12
24338     17 39 06 F4 | 	bitl	local14, #279
2433c     17 38 26 F4 | 	bith	local14, #23
24340     1B 39 62 F0 | 	shl	local14, local13
24344     02 26 0E F2 | 	cmp	local05, #2 wz
24348     02 24 66 A0 |  if_e	shl	local04, #2
2434c     00 3A 06 F6 | 	mov	local15, #0
24350     00 24 56 F2 | 	cmps	local04, #0 wc
24354     10 00 90 3D |  if_ae	jmp	#LR__3554
24358     18 25 C2 F2 | 	subr	local04, local10
2435c     00 24 56 F2 | 	cmps	local04, #0 wc
24360     A0 00 90 CD |  if_b	jmp	#LR__3561
24364     04 00 90 FD | 	jmp	#LR__3555
24368                 | LR__3554
24368     01 24 06 F1 | 	add	local04, #1
2436c                 | LR__3555
2436c     19 25 7A F3 | 	fles	local04, local11 wcz
24370     01 3C 06 F6 | 	mov	local16, #1
24374     97 22 48 FB | 	callpa	#(@LR__3557-@LR__3556)>>2,fcache_load_ptr_
24378                 | LR__3556
24378     00 40 00 FF 
2437c     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
24380     38 00 90 3D |  if_ae	jmp	#LR__3558
24384     01 24 56 F2 | 	cmps	local04, #1 wc
24388     01 24 86 F1 | 	sub	local04, #1
2438c     2C 00 90 CD |  if_b	jmp	#LR__3558
24390     13 3B 02 FD | 	qmul	local15, local05
24394     1C 37 02 F6 | 	mov	local13, local14
24398     17 36 46 F0 | 	shr	local13, #23
2439c     17 39 06 F4 | 	bitl	local14, #279
243a0     18 3A 62 FD | 	getqx	local15
243a4     13 3D 02 FD | 	qmul	local16, local05
243a8     18 3C 62 FD | 	getqx	local16
243ac     13 39 02 FD | 	qmul	local14, local05
243b0     1B 3B 02 F1 | 	add	local15, local13
243b4     18 38 62 FD | 	getqx	local14
243b8     BC FF 9F FD | 	jmp	#LR__3556
243bc                 | LR__3557
243bc                 | LR__3558
243bc     13 2F 02 F6 | 	mov	local09, local05
243c0     17 2E 66 F0 | 	shl	local09, #23
243c4     17 37 52 F6 | 	abs	local13, local09 wc
243c8     01 36 46 F0 | 	shr	local13, #1
243cc     1B 37 82 F6 | 	negc	local13, local13
243d0     1B 39 1A F2 | 	cmp	local14, local13 wcz
243d4     20 00 90 1D |  if_a	jmp	#LR__3559
243d8     17 26 66 F0 | 	shl	local05, #23
243dc     13 37 52 F6 | 	abs	local13, local05 wc
243e0     01 36 46 F0 | 	shr	local13, #1
243e4     1B 37 82 F6 | 	negc	local13, local13
243e8     1B 39 0A F2 | 	cmp	local14, local13 wz
243ec     14 00 90 5D |  if_ne	jmp	#LR__3560
243f0     01 3A CE F7 | 	test	local15, #1 wz
243f4     0C 00 90 AD |  if_e	jmp	#LR__3560
243f8                 | LR__3559
243f8     01 3A 06 F1 | 	add	local15, #1
243fc     1E 3B 0A F2 | 	cmp	local15, local16 wz
24400     01 30 06 A1 |  if_e	add	local10, #1
24404                 | LR__3560
24404                 | LR__3561
24404     10 3B 62 FC | 	wrlong	local15, local02
24408     11 31 62 FC | 	wrlong	local10, local03
2440c                 | LR__3562
2440c     A7 F0 03 F6 | 	mov	ptra, fp
24410     B2 00 A0 FD | 	call	#popregs_
24414                 | __system__disassemble_0442_ret
24414     2D 00 64 FD | 	ret
24418                 | 
24418                 | __system__emitsign_0444
24418     00 FA 05 F6 | 	mov	result1, #0
2441c     00 14 0E F2 | 	cmp	arg02, #0 wz
24420     09 01 02 56 |  if_ne	mov	_var01, arg01
24424     01 12 06 51 |  if_ne	add	arg01, #1
24428     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2442c     01 FA 05 56 |  if_ne	mov	result1, #1
24430     00 16 0E F2 | 	cmp	arg03, #0 wz
24434     09 61 48 5C |  if_ne	wrbyte	#48, arg01
24438     01 12 06 51 |  if_ne	add	arg01, #1
2443c     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
24440     02 FA 05 51 |  if_ne	add	result1, #2
24444                 | __system__emitsign_0444_ret
24444     2D 00 64 FD | 	ret
24448                 | 
24448                 | __system___gettxfunc
24448     01 4A 05 F6 | 	mov	COUNT_, #1
2444c     A8 00 A0 FD | 	call	#pushregs_
24450     A0 F8 BF FD | 	call	#__system____getftab
24454     FD 1E 0A F6 | 	mov	local01, result1 wz
24458     10 00 90 AD |  if_e	jmp	#LR__3570
2445c     08 1E 06 F1 | 	add	local01, #8
24460     0F 15 0A FB | 	rdlong	arg02, local01 wz
24464     08 1E 86 F1 | 	sub	local01, #8
24468     08 00 90 5D |  if_ne	jmp	#LR__3571
2446c                 | LR__3570
2446c     00 FA 05 F6 | 	mov	result1, #0
24470     0C 00 90 FD | 	jmp	#LR__3572
24474                 | LR__3571
24474     00 38 04 FF 
24478     00 1E 46 F5 | 	or	local01, ##141557760
2447c     0F FB 01 F6 | 	mov	result1, local01
24480                 | LR__3572
24480     A7 F0 03 F6 | 	mov	ptra, fp
24484     B2 00 A0 FD | 	call	#popregs_
24488                 | __system___gettxfunc_ret
24488     2D 00 64 FD | 	ret
2448c                 | 
2448c                 | __system___getrxfunc
2448c     01 4A 05 F6 | 	mov	COUNT_, #1
24490     A8 00 A0 FD | 	call	#pushregs_
24494     5C F8 BF FD | 	call	#__system____getftab
24498     FD 1E 0A F6 | 	mov	local01, result1 wz
2449c     10 00 90 AD |  if_e	jmp	#LR__3580
244a0     08 1E 06 F1 | 	add	local01, #8
244a4     0F 15 0A FB | 	rdlong	arg02, local01 wz
244a8     08 1E 86 F1 | 	sub	local01, #8
244ac     08 00 90 5D |  if_ne	jmp	#LR__3581
244b0                 | LR__3580
244b0     00 FA 05 F6 | 	mov	result1, #0
244b4     0C 00 90 FD | 	jmp	#LR__3582
244b8                 | LR__3581
244b8     00 40 04 FF 
244bc     00 1E 46 F5 | 	or	local01, ##142606336
244c0     0F FB 01 F6 | 	mov	result1, local01
244c4                 | LR__3582
244c4     A7 F0 03 F6 | 	mov	ptra, fp
244c8     B2 00 A0 FD | 	call	#popregs_
244cc                 | __system___getrxfunc_ret
244cc     2D 00 64 FD | 	ret
244d0                 | 
244d0                 | __system___getiolock_0484
244d0     01 4A 05 F6 | 	mov	COUNT_, #1
244d4     A8 00 A0 FD | 	call	#pushregs_
244d8     18 F8 BF FD | 	call	#__system____getftab
244dc     FD 1E 0A F6 | 	mov	local01, result1 wz
244e0     10 00 90 AD |  if_e	jmp	#LR__3590
244e4     08 1E 06 F1 | 	add	local01, #8
244e8     0F FB 09 FB | 	rdlong	result1, local01 wz
244ec     08 1E 86 F1 | 	sub	local01, #8
244f0     18 00 90 5D |  if_ne	jmp	#LR__3591
244f4                 | LR__3590
244f4     01 00 00 FF 
244f8     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
244fc     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
24500     01 00 00 FF 
24504     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
24508     08 00 90 FD | 	jmp	#LR__3592
2450c                 | LR__3591
2450c     0C 1E 06 F1 | 	add	local01, #12
24510     0F FB 01 F6 | 	mov	result1, local01
24514                 | LR__3592
24514     A7 F0 03 F6 | 	mov	ptra, fp
24518     B2 00 A0 FD | 	call	#popregs_
2451c                 | __system___getiolock_0484_ret
2451c     2D 00 64 FD | 	ret
24520                 | 
24520                 | __system____ScanForChar
24520     09 01 02 F6 | 	mov	_var01, arg01
24524     09 03 02 F6 | 	mov	_var02, arg01
24528     97 06 48 FB | 	callpa	#(@LR__3601-@LR__3600)>>2,fcache_load_ptr_
2452c                 | LR__3600
2452c     01 FB C9 FA | 	rdbyte	result1, _var02 wz
24530     01 02 06 51 |  if_ne	add	_var02, #1
24534     F4 FF 9F 5D |  if_ne	jmp	#LR__3600
24538                 | LR__3601
24538     09 03 82 F1 | 	sub	_var02, arg01
2453c     01 FB 01 F6 | 	mov	result1, _var02
24540     FD 12 0A F6 | 	mov	arg01, result1 wz
24544     00 FA 05 A6 |  if_e	mov	result1, #0
24548     B8 00 90 AD |  if_e	jmp	#LR__3608
2454c     0A 05 02 F6 | 	mov	_var03, arg02
24550     07 04 4E F7 | 	zerox	_var03, #7 wz
24554     00 FA 05 A6 |  if_e	mov	result1, #0
24558     A8 00 90 AD |  if_e	jmp	#LR__3608
2455c     01 16 16 F2 | 	cmp	arg03, #1 wc
24560     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
24564     01 16 06 86 |  if_c_and_z	mov	arg03, #1
24568     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2456c     94 00 90 4D |  if_c_and_nz	jmp	#LR__3608
24570     09 17 1A F2 | 	cmp	arg03, arg01 wcz
24574     10 00 90 ED |  if_be	jmp	#LR__3602
24578     00 18 0E F2 | 	cmp	arg04, #0 wz
2457c     00 FA 05 A6 |  if_e	mov	result1, #0
24580     80 00 90 AD |  if_e	jmp	#LR__3608
24584     09 17 02 F6 | 	mov	arg03, arg01
24588                 | LR__3602
24588     01 16 86 F1 | 	sub	arg03, #1
2458c     00 18 0E F2 | 	cmp	arg04, #0 wz
24590     38 00 90 5D |  if_ne	jmp	#LR__3604
24594     0B 07 02 F6 | 	mov	_var04, arg03
24598     09 09 02 F6 | 	mov	_var05, arg01
2459c                 | LR__3603
2459c     04 07 12 F2 | 	cmp	_var04, _var05 wc
245a0     5C 00 90 3D |  if_ae	jmp	#LR__3607
245a4     03 05 02 F6 | 	mov	_var03, _var04
245a8     00 05 02 F1 | 	add	_var03, _var01
245ac     02 05 C2 FA | 	rdbyte	_var03, _var03
245b0     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
245b4     0C 05 0A F2 | 	cmp	_var03, arg04 wz
245b8     01 06 06 A1 |  if_e	add	_var04, #1
245bc     03 FB 01 A6 |  if_e	mov	result1, _var04
245c0     40 00 90 AD |  if_e	jmp	#LR__3608
245c4     01 06 06 F1 | 	add	_var04, #1
245c8     D0 FF 9F FD | 	jmp	#LR__3603
245cc                 | LR__3604
245cc     0B 07 02 F6 | 	mov	_var04, arg03
245d0                 | LR__3605
245d0     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
245d4     28 00 90 1D |  if_a	jmp	#LR__3606
245d8     03 09 02 F6 | 	mov	_var05, _var04
245dc     00 09 02 F1 | 	add	_var05, _var01
245e0     04 05 C2 FA | 	rdbyte	_var03, _var05
245e4     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
245e8     04 05 0A F2 | 	cmp	_var03, _var05 wz
245ec     01 06 06 A1 |  if_e	add	_var04, #1
245f0     03 FB 01 A6 |  if_e	mov	result1, _var04
245f4     0C 00 90 AD |  if_e	jmp	#LR__3608
245f8     01 06 86 F1 | 	sub	_var04, #1
245fc     D0 FF 9F FD | 	jmp	#LR__3605
24600                 | LR__3606
24600                 | LR__3607
24600     00 FA 05 F6 | 	mov	result1, #0
24604                 | LR__3608
24604                 | __system____ScanForChar_ret
24604     2D 00 64 FD | 	ret
24608                 | 
24608                 | __system___basic_dir
24608     05 4A 05 F6 | 	mov	COUNT_, #5
2460c     A8 00 A0 FD | 	call	#pushregs_
24610     4C F0 07 F1 | 	add	ptra, #76
24614     04 4E 05 F1 | 	add	fp, #4
24618     A7 12 62 FC | 	wrlong	arg01, fp
2461c     04 4E 05 F1 | 	add	fp, #4
24620     A7 14 62 FC | 	wrlong	arg02, fp
24624     04 4E 85 F1 | 	sub	fp, #4
24628     A7 14 0A FB | 	rdlong	arg02, fp wz
2462c     04 4E 85 F1 | 	sub	fp, #4
24630     04 4E 05 51 |  if_ne	add	fp, #4
24634     A7 1E 02 5B |  if_ne	rdlong	local01, fp
24638     04 4E 85 51 |  if_ne	sub	fp, #4
2463c     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
24640     70 00 90 AD |  if_e	jmp	#LR__3610
24644     03 00 00 FF 
24648     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2464c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
24650     03 00 00 FF 
24654     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
24658     03 00 00 5F 
2465c     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
24660     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
24664     03 00 00 5F 
24668     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
2466c     14 EA BF 5D |  if_ne	call	#__system__closedir
24670     70 01 00 FF 
24674     58 13 06 F6 | 	mov	arg01, ##@LR__4768
24678     1C E9 BF FD | 	call	#__system__opendir
2467c     03 00 00 FF 
24680     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
24684     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
24688     08 4E 05 F1 | 	add	fp, #8
2468c     A7 20 02 FB | 	rdlong	local02, fp
24690     04 E6 05 F1 | 	add	ptr___system__dat__, #4
24694     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
24698     04 4E 85 F1 | 	sub	fp, #4
2469c     A7 20 02 FB | 	rdlong	local02, fp
246a0     04 4E 85 F1 | 	sub	fp, #4
246a4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
246a8     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
246ac     03 00 00 FF 
246b0     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
246b4                 | LR__3610
246b4     03 00 00 FF 
246b8     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
246bc     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
246c0     03 00 00 FF 
246c4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
246c8     70 01 00 AF 
246cc     5A FB 05 A6 |  if_e	mov	result1, ##@LR__4769
246d0     84 02 90 AD |  if_e	jmp	#LR__3623
246d4                 | LR__3611
246d4     03 00 00 FF 
246d8     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
246dc     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
246e0     03 00 00 FF 
246e4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
246e8     0C EA BF FD | 	call	#__system__readdir
246ec     0C 4E 05 F1 | 	add	fp, #12
246f0     A7 FA 61 FC | 	wrlong	result1, fp
246f4     0C 4E 85 F1 | 	sub	fp, #12
246f8     00 FA 0D F2 | 	cmp	result1, #0 wz
246fc     38 00 90 5D |  if_ne	jmp	#LR__3612
24700     03 00 00 FF 
24704     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
24708     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2470c     03 00 00 FF 
24710     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
24714     6C E9 BF FD | 	call	#__system__closedir
24718     03 00 00 FF 
2471c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
24720     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
24724     03 00 00 FF 
24728     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
2472c     70 01 00 FF 
24730     5C FB 05 F6 | 	mov	result1, ##@LR__4770
24734     20 02 90 FD | 	jmp	#LR__3623
24738                 | LR__3612
24738     0C 4E 05 F1 | 	add	fp, #12
2473c     A7 12 02 FB | 	rdlong	arg01, fp
24740     0C 4E 85 F1 | 	sub	fp, #12
24744     03 00 00 FF 
24748     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2474c     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
24750     03 00 00 FF 
24754     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
24758     48 07 B0 FD | 	call	#__system___pat_match
2475c     00 FA 0D F2 | 	cmp	result1, #0 wz
24760     70 FF 9F AD |  if_e	jmp	#LR__3611
24764     03 00 00 FF 
24768     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2476c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
24770     03 00 00 FF 
24774     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
24778     78 01 90 AD |  if_e	jmp	#LR__3619
2477c     0C 4E 05 F1 | 	add	fp, #12
24780     A7 12 02 FB | 	rdlong	arg01, fp
24784     04 4E 05 F1 | 	add	fp, #4
24788     A7 14 02 F6 | 	mov	arg02, fp
2478c     10 4E 85 F1 | 	sub	fp, #16
24790     68 F2 BF FD | 	call	#__system__stat
24794     40 4E 05 F1 | 	add	fp, #64
24798     A7 FA 61 FC | 	wrlong	result1, fp
2479c     40 4E 85 F1 | 	sub	fp, #64
247a0     00 FA 0D F2 | 	cmp	result1, #0 wz
247a4     70 01 00 5F 
247a8     5E FB 05 56 |  if_ne	mov	result1, ##@LR__4771
247ac     A8 01 90 5D |  if_ne	jmp	#LR__3623
247b0     18 4E 05 F1 | 	add	fp, #24
247b4     A7 20 02 FB | 	rdlong	local02, fp
247b8     78 00 00 FF 
247bc     00 20 06 F5 | 	and	local02, ##61440
247c0     2C 4E 05 F1 | 	add	fp, #44
247c4     A7 20 62 FC | 	wrlong	local02, fp
247c8     38 4E 85 F1 | 	sub	fp, #56
247cc     A7 20 02 FB | 	rdlong	local02, fp
247d0     0C 4E 85 F1 | 	sub	fp, #12
247d4     10 21 C2 FA | 	rdbyte	local02, local02
247d8     2E 20 0E F2 | 	cmp	local02, #46 wz
247dc     08 4E 05 A1 |  if_e	add	fp, #8
247e0     A7 04 68 AC |  if_e	wrlong	#2, fp
247e4     08 4E C5 F3 | 	sumz	fp, #8
247e8     A7 00 68 5C |  if_ne	wrlong	#0, fp
247ec     08 4E 85 51 |  if_ne	sub	fp, #8
247f0     44 4E 05 F1 | 	add	fp, #68
247f4     A7 20 02 FB | 	rdlong	local02, fp
247f8     44 4E 85 F1 | 	sub	fp, #68
247fc     08 00 00 FF 
24800     00 20 0E F2 | 	cmp	local02, ##4096 wz
24804     18 00 90 5D |  if_ne	jmp	#LR__3613
24808     08 4E 05 F1 | 	add	fp, #8
2480c     A7 20 02 FB | 	rdlong	local02, fp
24810     10 20 46 F5 | 	or	local02, #16
24814     A7 20 62 FC | 	wrlong	local02, fp
24818     08 4E 85 F1 | 	sub	fp, #8
2481c     AC 00 90 FD | 	jmp	#LR__3618
24820                 | LR__3613
24820     44 4E 05 F1 | 	add	fp, #68
24824     A7 20 02 FB | 	rdlong	local02, fp
24828     44 4E 85 F1 | 	sub	fp, #68
2482c     10 00 00 FF 
24830     00 20 0E F2 | 	cmp	local02, ##8192 wz
24834     44 4E 05 51 |  if_ne	add	fp, #68
24838     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2483c     44 4E 85 51 |  if_ne	sub	fp, #68
24840     18 00 00 5F 
24844     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
24848     44 4E 05 51 |  if_ne	add	fp, #68
2484c     0F 23 02 56 |  if_ne	mov	local03, local01
24850     44 4E 85 51 |  if_ne	sub	fp, #68
24854     20 00 00 5F 
24858     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
2485c     18 00 90 5D |  if_ne	jmp	#LR__3614
24860     08 4E 05 F1 | 	add	fp, #8
24864     A7 20 02 FB | 	rdlong	local02, fp
24868     04 20 46 F5 | 	or	local02, #4
2486c     A7 20 62 FC | 	wrlong	local02, fp
24870     08 4E 85 F1 | 	sub	fp, #8
24874     54 00 90 FD | 	jmp	#LR__3617
24878                 | LR__3614
24878     18 4E 05 F1 | 	add	fp, #24
2487c     A7 20 02 FB | 	rdlong	local02, fp
24880     18 4E 85 F1 | 	sub	fp, #24
24884     92 20 CE F7 | 	test	local02, #146 wz
24888     18 00 90 5D |  if_ne	jmp	#LR__3615
2488c     08 4E 05 F1 | 	add	fp, #8
24890     A7 20 02 FB | 	rdlong	local02, fp
24894     01 20 46 F5 | 	or	local02, #1
24898     A7 20 62 FC | 	wrlong	local02, fp
2489c     08 4E 85 F1 | 	sub	fp, #8
248a0     28 00 90 FD | 	jmp	#LR__3616
248a4                 | LR__3615
248a4     44 4E 05 F1 | 	add	fp, #68
248a8     A7 24 02 FB | 	rdlong	local04, fp
248ac     44 4E 85 F1 | 	sub	fp, #68
248b0     08 00 00 FF 
248b4     00 24 0E F2 | 	cmp	local04, ##4096 wz
248b8     08 4E 05 51 |  if_ne	add	fp, #8
248bc     A7 24 02 5B |  if_ne	rdlong	local04, fp
248c0     20 24 46 55 |  if_ne	or	local04, #32
248c4     A7 24 62 5C |  if_ne	wrlong	local04, fp
248c8     08 4E 85 51 |  if_ne	sub	fp, #8
248cc                 | LR__3616
248cc                 | LR__3617
248cc                 | LR__3618
248cc     08 4E 05 F1 | 	add	fp, #8
248d0     A7 24 02 FB | 	rdlong	local04, fp
248d4     08 4E 85 F1 | 	sub	fp, #8
248d8     03 00 00 FF 
248dc     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
248e0     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
248e4     03 00 00 FF 
248e8     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
248ec     0F 25 CA F7 | 	test	local04, local01 wz
248f0     E0 FD 9F AD |  if_e	jmp	#LR__3611
248f4                 | LR__3619
248f4     0C 4E 05 F1 | 	add	fp, #12
248f8     A7 12 02 FB | 	rdlong	arg01, fp
248fc     0C 4E 85 F1 | 	sub	fp, #12
24900     09 27 02 F6 | 	mov	local05, arg01
24904     97 06 48 FB | 	callpa	#(@LR__3621-@LR__3620)>>2,fcache_load_ptr_
24908                 | LR__3620
24908     13 FB C9 FA | 	rdbyte	result1, local05 wz
2490c     01 26 06 51 |  if_ne	add	local05, #1
24910     F4 FF 9F 5D |  if_ne	jmp	#LR__3620
24914                 | LR__3621
24914     13 13 C2 F2 | 	subr	arg01, local05
24918     01 12 06 F1 | 	add	arg01, #1
2491c     64 E0 BF FD | 	call	#__system___gc_alloc_managed
24920     48 4E 05 F1 | 	add	fp, #72
24924     A7 FA 61 FC | 	wrlong	result1, fp
24928     48 4E 85 F1 | 	sub	fp, #72
2492c     00 FA 0D F2 | 	cmp	result1, #0 wz
24930     18 00 90 AD |  if_e	jmp	#LR__3622
24934     48 4E 05 F1 | 	add	fp, #72
24938     A7 12 02 FB | 	rdlong	arg01, fp
2493c     3C 4E 85 F1 | 	sub	fp, #60
24940     A7 14 02 FB | 	rdlong	arg02, fp
24944     0C 4E 85 F1 | 	sub	fp, #12
24948     A0 A1 BF FD | 	call	#__system____builtin_strcpy
2494c                 | LR__3622
2494c     48 4E 05 F1 | 	add	fp, #72
24950     A7 FA 01 FB | 	rdlong	result1, fp
24954     48 4E 85 F1 | 	sub	fp, #72
24958                 | LR__3623
24958     A7 F0 03 F6 | 	mov	ptra, fp
2495c     B2 00 A0 FD | 	call	#popregs_
24960                 | __system___basic_dir_ret
24960     2D 00 64 FD | 	ret
24964                 | 
24964                 | __system__pack_0550
24964     09 01 02 F6 | 	mov	_var01, arg01
24968     7F 16 06 F1 | 	add	arg03, #127
2496c     04 18 CE F7 | 	test	arg04, #4 wz
24970     10 00 90 AD |  if_e	jmp	#LR__3630
24974     00 00 0E F2 | 	cmp	_var01, #0 wz
24978     16 00 C6 A9 |  if_e	decod	_var01, #22
2497c     F7 00 26 F4 | 	bith	_var01, #247
24980     B4 00 90 FD | 	jmp	#LR__3639
24984                 | LR__3630
24984     02 18 CE F7 | 	test	arg04, #2 wz
24988     00 C0 3F 5F 
2498c     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
24990     00 14 06 56 |  if_ne	mov	arg02, #0
24994     A0 00 90 5D |  if_ne	jmp	#LR__3638
24998     08 18 CE F7 | 	test	arg04, #8 wz
2499c     00 00 06 56 |  if_ne	mov	_var01, #0
249a0     94 00 90 5D |  if_ne	jmp	#LR__3637
249a4     FF 16 56 F2 | 	cmps	arg03, #255 wc
249a8     00 C0 3F 3F 
249ac     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
249b0     00 14 06 36 |  if_ae	mov	arg02, #0
249b4     80 00 90 3D |  if_ae	jmp	#LR__3636
249b8     01 16 56 F2 | 	cmps	arg03, #1 wc
249bc     6C 00 90 3D |  if_ae	jmp	#LR__3634
249c0     01 14 46 F0 | 	shr	arg02, #1
249c4     00 03 02 F6 | 	mov	_var02, _var01
249c8     01 02 06 F5 | 	and	_var02, #1
249cc     1F 02 66 F0 | 	shl	_var02, #31
249d0     01 15 42 F5 | 	or	arg02, _var02
249d4     01 00 46 F0 | 	shr	_var01, #1
249d8     97 1E 48 FB | 	callpa	#(@LR__3632-@LR__3631)>>2,fcache_load_ptr_
249dc                 | LR__3631
249dc     00 16 56 F2 | 	cmps	arg03, #0 wc
249e0     34 00 90 3D |  if_ae	jmp	#LR__3633
249e4     00 00 0E F2 | 	cmp	_var01, #0 wz
249e8     2C 00 90 AD |  if_e	jmp	#LR__3633
249ec     0A 13 02 F6 | 	mov	arg01, arg02
249f0     01 12 06 F5 | 	and	arg01, #1
249f4     01 16 06 F1 | 	add	arg03, #1
249f8     01 14 46 F0 | 	shr	arg02, #1
249fc     00 03 02 F6 | 	mov	_var02, _var01
24a00     01 02 06 F5 | 	and	_var02, #1
24a04     1F 02 66 F0 | 	shl	_var02, #31
24a08     01 15 42 F5 | 	or	arg02, _var02
24a0c     09 15 42 F5 | 	or	arg02, arg01
24a10     01 00 46 F0 | 	shr	_var01, #1
24a14     C4 FF 9F FD | 	jmp	#LR__3631
24a18                 | LR__3632
24a18                 | LR__3633
24a18     00 16 56 F2 | 	cmps	arg03, #0 wc
24a1c     18 00 90 3D |  if_ae	jmp	#LR__3635
24a20     00 14 0E F2 | 	cmp	arg02, #0 wz
24a24     6F 14 62 FD | 	wrnz	arg02
24a28     0C 00 90 FD | 	jmp	#LR__3635
24a2c                 | LR__3634
24a2c     17 01 06 F4 | 	bitl	_var01, #279
24a30     17 16 66 F0 | 	shl	arg03, #23
24a34     0B 01 42 F5 | 	or	_var01, arg03
24a38                 | LR__3635
24a38                 | LR__3636
24a38                 | LR__3637
24a38                 | LR__3638
24a38                 | LR__3639
24a38     01 00 CE F7 | 	test	_var01, #1 wz
24a3c     01 14 46 55 |  if_ne	or	arg02, #1
24a40     0A 17 02 F6 | 	mov	arg03, arg02
24a44     00 02 06 F6 | 	mov	_var02, #0
24a48     FF FF 3F FF 
24a4c     FF 15 06 F1 | 	add	arg02, ##2147483647
24a50     0B 15 12 F2 | 	cmp	arg02, arg03 wc
24a54     01 02 06 C6 |  if_b	mov	_var02, #1
24a58     01 01 02 F1 | 	add	_var01, _var02
24a5c     01 18 CE F7 | 	test	arg04, #1 wz
24a60     1F 00 26 54 |  if_ne	bith	_var01, #31
24a64     00 FB 01 F6 | 	mov	result1, _var01
24a68                 | __system__pack_0550_ret
24a68     2D 00 64 FD | 	ret
24a6c                 | 
24a6c                 | __system___rxtxioctl_0640
24a6c     00 15 0E F2 | 	cmp	arg02, #256 wz
24a70     0C 00 90 AD |  if_e	jmp	#LR__3640
24a74     01 15 0E F2 | 	cmp	arg02, #257 wz
24a78     1C 00 90 AD |  if_e	jmp	#LR__3641
24a7c     30 00 90 FD | 	jmp	#LR__3642
24a80                 | LR__3640
24a80     08 E6 05 F1 | 	add	ptr___system__dat__, #8
24a84     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
24a88     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
24a8c     0B FB 61 FC | 	wrlong	result1, arg03
24a90     00 FA 05 F6 | 	mov	result1, #0
24a94     28 00 90 FD | 	jmp	#LR__3643
24a98                 | LR__3641
24a98     0B 13 02 FB | 	rdlong	arg01, arg03
24a9c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
24aa0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
24aa4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
24aa8     00 FA 05 F6 | 	mov	result1, #0
24aac     10 00 90 FD | 	jmp	#LR__3643
24ab0                 | LR__3642
24ab0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24ab4     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
24ab8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24abc     01 FA 65 F6 | 	neg	result1, #1
24ac0                 | LR__3643
24ac0                 | __system___rxtxioctl_0640_ret
24ac0     2D 00 64 FD | 	ret
24ac4                 | 
24ac4                 | __system____dummy_flush_0641
24ac4     00 FA 05 F6 | 	mov	result1, #0
24ac8                 | __system____dummy_flush_0641_ret
24ac8     2D 00 64 FD | 	ret
24acc                 | 
24acc                 | __system___vfsread
24acc     03 4A 05 F6 | 	mov	COUNT_, #3
24ad0     A8 00 A0 FD | 	call	#pushregs_
24ad4     28 F0 07 F1 | 	add	ptra, #40
24ad8     04 4E 05 F1 | 	add	fp, #4
24adc     A7 12 62 FC | 	wrlong	arg01, fp
24ae0     04 4E 05 F1 | 	add	fp, #4
24ae4     A7 14 62 FC | 	wrlong	arg02, fp
24ae8     04 4E 05 F1 | 	add	fp, #4
24aec     A7 16 62 FC | 	wrlong	arg03, fp
24af0     04 4E 85 F1 | 	sub	fp, #4
24af4     A7 FA 01 FB | 	rdlong	result1, fp
24af8     14 4E 05 F1 | 	add	fp, #20
24afc     A7 FA 61 FC | 	wrlong	result1, fp
24b00     04 4E 05 F1 | 	add	fp, #4
24b04     A7 00 68 FC | 	wrlong	#0, fp
24b08     1C 4E 85 F1 | 	sub	fp, #28
24b0c     A7 12 02 FB | 	rdlong	arg01, fp
24b10     04 4E 85 F1 | 	sub	fp, #4
24b14     08 12 06 F1 | 	add	arg01, #8
24b18     09 FB 01 FB | 	rdlong	result1, arg01
24b1c     01 FA CD F7 | 	test	result1, #1 wz
24b20     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24b24     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
24b28     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24b2c     01 FA 65 A6 |  if_e	neg	result1, #1
24b30     74 02 90 AD |  if_e	jmp	#LR__3656
24b34     04 4E 05 F1 | 	add	fp, #4
24b38     A7 12 02 FB | 	rdlong	arg01, fp
24b3c     04 4E 85 F1 | 	sub	fp, #4
24b40     14 12 06 F1 | 	add	arg01, #20
24b44     09 FB 09 FB | 	rdlong	result1, arg01 wz
24b48     B8 00 90 AD |  if_e	jmp	#LR__3651
24b4c     04 4E 05 F1 | 	add	fp, #4
24b50     A7 12 02 FB | 	rdlong	arg01, fp
24b54     09 17 02 F6 | 	mov	arg03, arg01
24b58     14 16 06 F1 | 	add	arg03, #20
24b5c     0B 1F 02 FB | 	rdlong	local01, arg03
24b60     0F 21 02 F6 | 	mov	local02, local01
24b64     13 1E 46 F7 | 	zerox	local01, #19
24b68     14 20 46 F0 | 	shr	local02, #20
24b6c     02 20 66 F0 | 	shl	local02, #2
24b70     ED 20 02 F1 | 	add	local02, __methods__
24b74     10 21 02 FB | 	rdlong	local02, local02
24b78     04 4E 05 F1 | 	add	fp, #4
24b7c     A7 14 02 FB | 	rdlong	arg02, fp
24b80     04 4E 05 F1 | 	add	fp, #4
24b84     A7 16 02 FB | 	rdlong	arg03, fp
24b88     0C 4E 85 F1 | 	sub	fp, #12
24b8c     F2 22 02 F6 | 	mov	local03, objptr
24b90     0F E5 01 F6 | 	mov	objptr, local01
24b94     2D 20 62 FD | 	call	local02
24b98     11 E5 01 F6 | 	mov	objptr, local03
24b9c     10 4E 05 F1 | 	add	fp, #16
24ba0     A7 FA 61 FC | 	wrlong	result1, fp
24ba4     10 4E 85 F1 | 	sub	fp, #16
24ba8     00 FA 55 F2 | 	cmps	result1, #0 wc
24bac     44 00 90 3D |  if_ae	jmp	#LR__3650
24bb0     04 4E 05 F1 | 	add	fp, #4
24bb4     A7 22 02 FB | 	rdlong	local03, fp
24bb8     11 1F 02 F6 | 	mov	local01, local03
24bbc     08 22 06 F1 | 	add	local03, #8
24bc0     11 21 02 FB | 	rdlong	local02, local03
24bc4     20 20 46 F5 | 	or	local02, #32
24bc8     08 1E 06 F1 | 	add	local01, #8
24bcc     0F 21 62 FC | 	wrlong	local02, local01
24bd0     0C 4E 05 F1 | 	add	fp, #12
24bd4     A7 12 0A FB | 	rdlong	arg01, fp wz
24bd8     10 4E 85 F1 | 	sub	fp, #16
24bdc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24be0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
24be4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24be8     01 FA 65 56 |  if_ne	neg	result1, #1
24bec     00 FA 05 A6 |  if_e	mov	result1, #0
24bf0     B4 01 90 FD | 	jmp	#LR__3656
24bf4                 | LR__3650
24bf4     10 4E 05 F1 | 	add	fp, #16
24bf8     A7 FA 01 FB | 	rdlong	result1, fp
24bfc     10 4E 85 F1 | 	sub	fp, #16
24c00     A4 01 90 FD | 	jmp	#LR__3656
24c04                 | LR__3651
24c04     04 4E 05 F1 | 	add	fp, #4
24c08     A7 12 02 FB | 	rdlong	arg01, fp
24c0c     20 12 06 F1 | 	add	arg01, #32
24c10     09 13 0A FB | 	rdlong	arg01, arg01 wz
24c14     14 4E 05 F1 | 	add	fp, #20
24c18     A7 12 62 FC | 	wrlong	arg01, fp
24c1c     18 4E 85 F1 | 	sub	fp, #24
24c20     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24c24     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
24c28     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24c2c     01 FA 65 A6 |  if_e	neg	result1, #1
24c30     74 01 90 AD |  if_e	jmp	#LR__3656
24c34     04 4E 05 F1 | 	add	fp, #4
24c38     A7 22 02 FB | 	rdlong	local03, fp
24c3c     04 4E 85 F1 | 	sub	fp, #4
24c40     28 22 06 F1 | 	add	local03, #40
24c44     11 21 0A FB | 	rdlong	local02, local03 wz
24c48     7C 00 90 AD |  if_e	jmp	#LR__3653
24c4c     04 4E 05 F1 | 	add	fp, #4
24c50     A7 12 02 FB | 	rdlong	arg01, fp
24c54     09 23 02 F6 | 	mov	local03, arg01
24c58     28 22 06 F1 | 	add	local03, #40
24c5c     11 1F 02 FB | 	rdlong	local01, local03
24c60     0F 21 02 F6 | 	mov	local02, local01
24c64     13 1E 46 F7 | 	zerox	local01, #19
24c68     14 20 46 F0 | 	shr	local02, #20
24c6c     02 20 66 F0 | 	shl	local02, #2
24c70     ED 20 02 F1 | 	add	local02, __methods__
24c74     10 21 02 FB | 	rdlong	local02, local02
24c78     20 4E 05 F1 | 	add	fp, #32
24c7c     A7 16 02 F6 | 	mov	arg03, fp
24c80     24 4E 85 F1 | 	sub	fp, #36
24c84     00 15 06 F6 | 	mov	arg02, #256
24c88     F2 22 02 F6 | 	mov	local03, objptr
24c8c     0F E5 01 F6 | 	mov	objptr, local01
24c90     2D 20 62 FD | 	call	local02
24c94     11 E5 01 F6 | 	mov	objptr, local03
24c98     10 4E 05 F1 | 	add	fp, #16
24c9c     A7 FA 61 FC | 	wrlong	result1, fp
24ca0     00 FA 4D F2 | 	cmps	result1, #0 wz
24ca4     10 4E 85 F1 | 	sub	fp, #16
24ca8     1C 00 90 5D |  if_ne	jmp	#LR__3652
24cac     24 4E 05 F1 | 	add	fp, #36
24cb0     A7 20 02 FB | 	rdlong	local02, fp
24cb4     24 4E 85 F1 | 	sub	fp, #36
24cb8     02 20 CE F7 | 	test	local02, #2 wz
24cbc     20 4E 05 51 |  if_ne	add	fp, #32
24cc0     A7 02 68 5C |  if_ne	wrlong	#1, fp
24cc4     20 4E 85 51 |  if_ne	sub	fp, #32
24cc8                 | LR__3652
24cc8                 | LR__3653
24cc8     10 4E 05 F1 | 	add	fp, #16
24ccc     A7 00 68 FC | 	wrlong	#0, fp
24cd0     10 4E 85 F1 | 	sub	fp, #16
24cd4                 | LR__3654
24cd4     0C 4E 05 F1 | 	add	fp, #12
24cd8     A7 22 02 FB | 	rdlong	local03, fp
24cdc     0C 4E 85 F1 | 	sub	fp, #12
24ce0     01 22 16 F2 | 	cmp	local03, #1 wc
24ce4     B4 00 90 CD |  if_b	jmp	#LR__3655
24ce8     18 4E 05 F1 | 	add	fp, #24
24cec     A7 20 02 FB | 	rdlong	local02, fp
24cf0     10 23 02 F6 | 	mov	local03, local02
24cf4     13 22 46 F7 | 	zerox	local03, #19
24cf8     14 20 46 F0 | 	shr	local02, #20
24cfc     02 20 66 F0 | 	shl	local02, #2
24d00     ED 20 02 F1 | 	add	local02, __methods__
24d04     10 21 02 FB | 	rdlong	local02, local02
24d08     14 4E 85 F1 | 	sub	fp, #20
24d0c     A7 12 02 FB | 	rdlong	arg01, fp
24d10     04 4E 85 F1 | 	sub	fp, #4
24d14     F2 1E 02 F6 | 	mov	local01, objptr
24d18     11 E5 01 F6 | 	mov	objptr, local03
24d1c     2D 20 62 FD | 	call	local02
24d20     0F E5 01 F6 | 	mov	objptr, local01
24d24     14 4E 05 F1 | 	add	fp, #20
24d28     A7 FA 61 FC | 	wrlong	result1, fp
24d2c     14 4E 85 F1 | 	sub	fp, #20
24d30     00 FA 55 F2 | 	cmps	result1, #0 wc
24d34     64 00 90 CD |  if_b	jmp	#LR__3655
24d38     1C 4E 05 F1 | 	add	fp, #28
24d3c     A7 22 02 FB | 	rdlong	local03, fp
24d40     11 21 02 F6 | 	mov	local02, local03
24d44     01 20 06 F1 | 	add	local02, #1
24d48     A7 20 62 FC | 	wrlong	local02, fp
24d4c     08 4E 85 F1 | 	sub	fp, #8
24d50     A7 20 02 FB | 	rdlong	local02, fp
24d54     11 21 42 FC | 	wrbyte	local02, local03
24d58     04 4E 85 F1 | 	sub	fp, #4
24d5c     A7 22 02 FB | 	rdlong	local03, fp
24d60     01 22 06 F1 | 	add	local03, #1
24d64     A7 22 62 FC | 	wrlong	local03, fp
24d68     04 4E 85 F1 | 	sub	fp, #4
24d6c     A7 22 02 FB | 	rdlong	local03, fp
24d70     01 22 86 F1 | 	sub	local03, #1
24d74     A7 22 62 FC | 	wrlong	local03, fp
24d78     14 4E 05 F1 | 	add	fp, #20
24d7c     A7 22 0A FB | 	rdlong	local03, fp wz
24d80     20 4E 85 F1 | 	sub	fp, #32
24d84     4C FF 9F AD |  if_e	jmp	#LR__3654
24d88     14 4E 05 F1 | 	add	fp, #20
24d8c     A7 20 02 FB | 	rdlong	local02, fp
24d90     14 4E 85 F1 | 	sub	fp, #20
24d94     0A 20 0E F2 | 	cmp	local02, #10 wz
24d98     38 FF 9F 5D |  if_ne	jmp	#LR__3654
24d9c                 | LR__3655
24d9c     10 4E 05 F1 | 	add	fp, #16
24da0     A7 FA 01 FB | 	rdlong	result1, fp
24da4     10 4E 85 F1 | 	sub	fp, #16
24da8                 | LR__3656
24da8     A7 F0 03 F6 | 	mov	ptra, fp
24dac     B2 00 A0 FD | 	call	#popregs_
24db0                 | __system___vfsread_ret
24db0     2D 00 64 FD | 	ret
24db4                 | 
24db4                 | __system____default_filbuf
24db4     04 4A 05 F6 | 	mov	COUNT_, #4
24db8     A8 00 A0 FD | 	call	#pushregs_
24dbc     09 1F 02 F6 | 	mov	local01, arg01
24dc0     0F 21 02 FB | 	rdlong	local02, local01
24dc4     0C 20 06 F1 | 	add	local02, #12
24dc8     10 FB 09 FB | 	rdlong	result1, local02 wz
24dcc     0C 20 86 F1 | 	sub	local02, #12
24dd0     20 00 90 5D |  if_ne	jmp	#LR__3660
24dd4     14 20 06 F1 | 	add	local02, #20
24dd8     10 FB 01 F6 | 	mov	result1, local02
24ddc     04 20 86 F1 | 	sub	local02, #4
24de0     10 FB 61 FC | 	wrlong	result1, local02
24de4     04 20 86 F1 | 	sub	local02, #4
24de8     02 00 80 FF 
24dec     10 01 68 FC | 	wrlong	##1024, local02
24df0     0C 20 86 F1 | 	sub	local02, #12
24df4                 | LR__3660
24df4     14 1E 06 F1 | 	add	local01, #20
24df8     0F 23 02 FB | 	rdlong	local03, local01
24dfc     11 25 02 F6 | 	mov	local04, local03
24e00     14 1E 86 F1 | 	sub	local01, #20
24e04     13 24 46 F7 | 	zerox	local04, #19
24e08     14 22 46 F0 | 	shr	local03, #20
24e0c     02 22 66 F0 | 	shl	local03, #2
24e10     ED 22 02 F1 | 	add	local03, __methods__
24e14     11 23 02 FB | 	rdlong	local03, local03
24e18     10 20 06 F1 | 	add	local02, #16
24e1c     10 15 02 FB | 	rdlong	arg02, local02
24e20     04 20 86 F1 | 	sub	local02, #4
24e24     10 17 02 FB | 	rdlong	arg03, local02
24e28     0C 20 86 F1 | 	sub	local02, #12
24e2c     0F 13 02 F6 | 	mov	arg01, local01
24e30     F2 1E 02 F6 | 	mov	local01, objptr
24e34     12 E5 01 F6 | 	mov	objptr, local04
24e38     2D 22 62 FD | 	call	local03
24e3c     0F E5 01 F6 | 	mov	objptr, local01
24e40     FD 24 02 F6 | 	mov	local04, result1
24e44     00 24 56 F2 | 	cmps	local04, #0 wc
24e48     01 FA 65 C6 |  if_b	neg	result1, #1
24e4c     28 00 90 CD |  if_b	jmp	#LR__3661
24e50     10 25 62 FC | 	wrlong	local04, local02
24e54     10 20 06 F1 | 	add	local02, #16
24e58     10 23 02 FB | 	rdlong	local03, local02
24e5c     0C 20 86 F1 | 	sub	local02, #12
24e60     10 23 62 FC | 	wrlong	local03, local02
24e64     04 20 06 F1 | 	add	local02, #4
24e68     10 23 02 FB | 	rdlong	local03, local02
24e6c     01 22 46 F5 | 	or	local03, #1
24e70     10 23 62 FC | 	wrlong	local03, local02
24e74     12 FB 01 F6 | 	mov	result1, local04
24e78                 | LR__3661
24e78     A7 F0 03 F6 | 	mov	ptra, fp
24e7c     B2 00 A0 FD | 	call	#popregs_
24e80                 | __system____default_filbuf_ret
24e80     2D 00 64 FD | 	ret
24e84                 | 
24e84                 | __system__getlower_1026
24e84     41 12 56 F2 | 	cmps	arg01, #65 wc
24e88     10 00 90 CD |  if_b	jmp	#LR__3670
24e8c     5B 12 56 F2 | 	cmps	arg01, #91 wc
24e90     09 FB 01 C6 |  if_b	mov	result1, arg01
24e94     20 FA 05 C1 |  if_b	add	result1, #32
24e98     04 00 90 CD |  if_b	jmp	#__system__getlower_1026_ret
24e9c                 | LR__3670
24e9c     09 FB 01 F6 | 	mov	result1, arg01
24ea0                 | __system__getlower_1026_ret
24ea0     2D 00 64 FD | 	ret
24ea4                 | 
24ea4                 | __system___pat_match
24ea4     08 4A 05 F6 | 	mov	COUNT_, #8
24ea8     A8 00 A0 FD | 	call	#pushregs_
24eac     09 1F 02 F6 | 	mov	local01, arg01
24eb0                 | LR__3680
24eb0     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
24eb4     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
24eb8     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
24ebc     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
24ec0     2C 00 90 AD |  if_e	jmp	#LR__3681
24ec4     0A 13 C2 FA | 	rdbyte	arg01, arg02
24ec8     B8 FF BF FD | 	call	#__system__getlower_1026
24ecc     FD 22 02 F6 | 	mov	local03, result1
24ed0     0F 13 C2 FA | 	rdbyte	arg01, local01
24ed4     AC FF BF FD | 	call	#__system__getlower_1026
24ed8     11 FB 09 F2 | 	cmp	result1, local03 wz
24edc     00 FA 05 56 |  if_ne	mov	result1, #0
24ee0     FC 00 90 5D |  if_ne	jmp	#LR__3689
24ee4     01 1E 06 F1 | 	add	local01, #1
24ee8     01 14 06 F1 | 	add	arg02, #1
24eec     C0 FF 9F FD | 	jmp	#LR__3680
24ef0                 | LR__3681
24ef0     0A 23 C2 FA | 	rdbyte	local03, arg02
24ef4     2A 22 0E F2 | 	cmp	local03, #42 wz
24ef8     D4 00 90 5D |  if_ne	jmp	#LR__3688
24efc     01 14 06 F1 | 	add	arg02, #1
24f00     0A 21 C2 FA | 	rdbyte	local02, arg02
24f04     01 14 86 F1 | 	sub	arg02, #1
24f08     2E 20 0E F2 | 	cmp	local02, #46 wz
24f0c     28 00 90 5D |  if_ne	jmp	#LR__3682
24f10     02 14 06 F1 | 	add	arg02, #2
24f14     0A 21 C2 FA | 	rdbyte	local02, arg02
24f18     02 14 86 F1 | 	sub	arg02, #2
24f1c     2A 20 0E F2 | 	cmp	local02, #42 wz
24f20     03 14 06 A1 |  if_e	add	arg02, #3
24f24     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
24f28     03 14 86 A1 |  if_e	sub	arg02, #3
24f2c     12 27 0A A6 |  if_e	mov	local05, local04 wz
24f30     01 FA 05 A6 |  if_e	mov	result1, #1
24f34     A8 00 90 AD |  if_e	jmp	#LR__3689
24f38                 | LR__3682
24f38     01 14 06 F1 | 	add	arg02, #1
24f3c     00 28 06 F6 | 	mov	local06, #0
24f40     97 1E 48 FB | 	callpa	#(@LR__3685-@LR__3683)>>2,fcache_load_ptr_
24f44                 | LR__3683
24f44     14 2B 02 F6 | 	mov	local07, local06
24f48     0A 2B 02 F1 | 	add	local07, arg02
24f4c     15 2B CA FA | 	rdbyte	local07, local07 wz
24f50     14 27 02 56 |  if_ne	mov	local05, local06
24f54     01 26 06 51 |  if_ne	add	local05, #1
24f58     13 29 02 56 |  if_ne	mov	local06, local05
24f5c     E4 FF 9F 5D |  if_ne	jmp	#LR__3683
24f60     00 2C 06 F6 | 	mov	local08, #0
24f64                 | LR__3684
24f64     16 2B 02 F6 | 	mov	local07, local08
24f68     0F 2B 02 F1 | 	add	local07, local01
24f6c     15 2B CA FA | 	rdbyte	local07, local07 wz
24f70     16 27 02 56 |  if_ne	mov	local05, local08
24f74     01 26 06 51 |  if_ne	add	local05, #1
24f78     13 2D 02 56 |  if_ne	mov	local08, local05
24f7c     E4 FF 9F 5D |  if_ne	jmp	#LR__3684
24f80                 | LR__3685
24f80     14 2D 52 F2 | 	cmps	local08, local06 wc
24f84     00 FA 05 C6 |  if_b	mov	result1, #0
24f88     54 00 90 CD |  if_b	jmp	#LR__3689
24f8c     16 21 02 F6 | 	mov	local02, local08
24f90     14 21 82 F1 | 	sub	local02, local06
24f94     10 1F 02 F1 | 	add	local01, local02
24f98                 | LR__3686
24f98     01 28 56 F2 | 	cmps	local06, #1 wc
24f9c     30 00 90 CD |  if_b	jmp	#LR__3687
24fa0     0F 13 C2 FA | 	rdbyte	arg01, local01
24fa4     DC FE BF FD | 	call	#__system__getlower_1026
24fa8     FD 2C 02 F6 | 	mov	local08, result1
24fac     0A 13 C2 FA | 	rdbyte	arg01, arg02
24fb0     D0 FE BF FD | 	call	#__system__getlower_1026
24fb4     FD 2C 0A F2 | 	cmp	local08, result1 wz
24fb8     00 FA 05 56 |  if_ne	mov	result1, #0
24fbc     20 00 90 5D |  if_ne	jmp	#LR__3689
24fc0     01 1E 06 F1 | 	add	local01, #1
24fc4     01 14 06 F1 | 	add	arg02, #1
24fc8     01 28 86 F1 | 	sub	local06, #1
24fcc     C8 FF 9F FD | 	jmp	#LR__3686
24fd0                 | LR__3687
24fd0                 | LR__3688
24fd0     0A 2D CA FA | 	rdbyte	local08, arg02 wz
24fd4     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
24fd8     01 FA 05 A6 |  if_e	mov	result1, #1
24fdc     00 FA 05 56 |  if_ne	mov	result1, #0
24fe0                 | LR__3689
24fe0     A7 F0 03 F6 | 	mov	ptra, fp
24fe4     B2 00 A0 FD | 	call	#popregs_
24fe8                 | __system___pat_match_ret
24fe8     2D 00 64 FD | 	ret
24fec                 | 
24fec                 | _fatfs_cc_ff_uni2oem
24fec     00 00 06 F6 | 	mov	_var01, #0
24ff0     80 12 16 F2 | 	cmp	arg01, #128 wc
24ff4     09 01 02 C6 |  if_b	mov	_var01, arg01
24ff8     58 00 90 CD |  if_b	jmp	#LR__3694
24ffc     80 00 00 FF 
25000     00 12 16 F2 | 	cmp	arg01, ##65536 wc
25004     4C 00 90 3D |  if_ae	jmp	#LR__3693
25008     0A FB 31 F9 | 	getword	result1, arg02, #0
2500c     01 00 00 FF 
25010     52 FB 0D F2 | 	cmp	result1, ##850 wz
25014     3C 00 90 5D |  if_ne	jmp	#LR__3693
25018                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
25018     00 00 06 F6 | 	mov	_var01, #0
2501c     97 14 48 FB | 	callpa	#(@LR__3691-@LR__3690)>>2,fcache_load_ptr_
25020                 | LR__3690
25020     00 FB 31 F9 | 	getword	result1, _var01, #0
25024     80 FA 15 F2 | 	cmp	result1, #128 wc
25028     1C 00 90 3D |  if_ae	jmp	#LR__3692
2502c     00 FB 31 F9 | 	getword	result1, _var01, #0
25030     01 FA 65 F0 | 	shl	result1, #1
25034     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
25038     FD FA E1 FA | 	rdword	result1, result1
2503c     FD 12 0A F2 | 	cmp	arg01, result1 wz
25040     01 00 06 51 |  if_ne	add	_var01, #1
25044     D8 FF 9F 5D |  if_ne	jmp	#LR__3690
25048                 | LR__3691
25048                 | LR__3692
25048     00 01 32 F9 | 	getword	_var01, _var01, #0
2504c     80 00 06 F1 | 	add	_var01, #128
25050     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
25054                 | LR__3693
25054                 | LR__3694
25054                 | ' 			c = (c + 0x80) & 0xFF;
25054                 | ' 		}
25054                 | ' 	}
25054                 | ' 
25054                 | ' 	return c;
25054     00 FB 01 F6 | 	mov	result1, _var01
25058                 | _fatfs_cc_ff_uni2oem_ret
25058     2D 00 64 FD | 	ret
2505c                 | 
2505c                 | _fatfs_cc_ff_oem2uni
2505c     00 00 06 F6 | 	mov	_var01, #0
25060     09 FB 31 F9 | 	getword	result1, arg01, #0
25064     80 FA 15 F2 | 	cmp	result1, #128 wc
25068     09 01 02 C6 |  if_b	mov	_var01, arg01
2506c     2C 00 90 CD |  if_b	jmp	#LR__3701
25070     0A 15 32 F9 | 	getword	arg02, arg02, #0
25074     01 00 00 FF 
25078     52 15 0E F2 | 	cmp	arg02, ##850 wz
2507c     1C 00 90 5D |  if_ne	jmp	#LR__3700
25080     09 FB 31 F9 | 	getword	result1, arg01, #0
25084     00 FB 15 F2 | 	cmp	result1, #256 wc
25088     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2508c     80 12 86 C1 |  if_b	sub	arg01, #128
25090     01 12 66 C0 |  if_b	shl	arg01, #1
25094     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
25098     09 01 E2 CA |  if_b	rdword	_var01, arg01
2509c                 | LR__3700
2509c                 | LR__3701
2509c                 | ' 		}
2509c                 | ' 	}
2509c                 | ' 
2509c                 | ' 	return c;
2509c     00 FB 01 F6 | 	mov	result1, _var01
250a0                 | _fatfs_cc_ff_oem2uni_ret
250a0     2D 00 64 FD | 	ret
250a4                 | 
250a4                 | _fatfs_cc_ff_wtoupper
250a4     09 01 02 F6 | 	mov	_var01, arg01
250a8     80 00 00 FF 
250ac     00 00 16 F2 | 	cmp	_var01, ##65536 wc
250b0     60 01 90 3D |  if_ae	jmp	#LR__3723
250b4     00 03 02 F6 | 	mov	_var02, _var01
250b8     01 01 32 F9 | 	getword	_var01, _var02, #0
250bc     08 00 00 FF 
250c0     00 00 16 F2 | 	cmp	_var01, ##4096 wc
250c4     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
250c8     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
250cc     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
250d0     01 00 00 3F 
250d4     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
250d8     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
250dc     01 00 00 3F 
250e0     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
250e4     02 07 02 F6 | 	mov	_var04, _var03
250e8                 | ' 		uc = (WORD)uni;
250e8                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
250e8                 | ' 		for (;;) {
250e8                 | LR__3710
250e8     03 09 E2 FA | 	rdword	_var05, _var04
250ec     04 05 02 F6 | 	mov	_var03, _var05
250f0     0F 04 4E F7 | 	zerox	_var03, #15 wz
250f4     02 06 06 F1 | 	add	_var04, #2
250f8     14 01 90 AD |  if_e	jmp	#LR__3722
250fc     01 05 32 F9 | 	getword	_var03, _var02, #0
25100     04 01 32 F9 | 	getword	_var01, _var05, #0
25104     00 05 12 F2 | 	cmp	_var03, _var01 wc
25108     04 01 90 CD |  if_b	jmp	#LR__3722
2510c     03 0B E2 FA | 	rdword	_var06, _var04
25110     05 0D 32 F9 | 	getword	_var07, _var06, #0
25114     08 0C 46 F0 | 	shr	_var07, #8
25118     05 0B 32 F9 | 	getword	_var06, _var06, #0
2511c     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
25120     01 05 32 F9 | 	getword	_var03, _var02, #0
25124     04 0F 32 F9 | 	getword	_var08, _var05, #0
25128     05 01 32 F9 | 	getword	_var01, _var06, #0
2512c     00 0F 02 F1 | 	add	_var08, _var01
25130     07 05 52 F2 | 	cmps	_var03, _var08 wc
25134     02 06 06 F1 | 	add	_var04, #2
25138     C4 00 90 3D |  if_ae	jmp	#LR__3721
2513c                 | ' 				switch (cmd) {
2513c     06 11 32 F9 | 	getword	_var09, _var07, #0
25140     09 10 26 F3 | 	fle	_var09, #9
25144     30 10 62 FD | 	jmprel	_var09
25148                 | LR__3711
25148     24 00 90 FD | 	jmp	#LR__3712
2514c     3C 00 90 FD | 	jmp	#LR__3713
25150     54 00 90 FD | 	jmp	#LR__3714
25154     5C 00 90 FD | 	jmp	#LR__3715
25158     64 00 90 FD | 	jmp	#LR__3716
2515c     6C 00 90 FD | 	jmp	#LR__3717
25160     74 00 90 FD | 	jmp	#LR__3718
25164     7C 00 90 FD | 	jmp	#LR__3719
25168     84 00 90 FD | 	jmp	#LR__3720
2516c     A0 00 90 FD | 	jmp	#LR__3722
25170                 | LR__3712
25170     01 03 32 F9 | 	getword	_var02, _var02, #0
25174     04 09 32 F9 | 	getword	_var05, _var05, #0
25178     04 03 82 F1 | 	sub	_var02, _var05
2517c     01 02 66 F0 | 	shl	_var02, #1
25180     03 03 02 F1 | 	add	_var02, _var04
25184     01 03 E2 FA | 	rdword	_var02, _var02
25188     84 00 90 FD | 	jmp	#LR__3722
2518c                 | LR__3713
2518c     01 05 32 F9 | 	getword	_var03, _var02, #0
25190     01 03 32 F9 | 	getword	_var02, _var02, #0
25194     04 09 32 F9 | 	getword	_var05, _var05, #0
25198     04 03 82 F1 | 	sub	_var02, _var05
2519c     01 02 06 F5 | 	and	_var02, #1
251a0     02 03 C2 F2 | 	subr	_var02, _var03
251a4     68 00 90 FD | 	jmp	#LR__3722
251a8                 | LR__3714
251a8     01 03 32 F9 | 	getword	_var02, _var02, #0
251ac     10 02 86 F1 | 	sub	_var02, #16
251b0     5C 00 90 FD | 	jmp	#LR__3722
251b4                 | LR__3715
251b4     01 03 32 F9 | 	getword	_var02, _var02, #0
251b8     20 02 86 F1 | 	sub	_var02, #32
251bc     50 00 90 FD | 	jmp	#LR__3722
251c0                 | LR__3716
251c0     01 03 32 F9 | 	getword	_var02, _var02, #0
251c4     30 02 86 F1 | 	sub	_var02, #48
251c8     44 00 90 FD | 	jmp	#LR__3722
251cc                 | LR__3717
251cc     01 03 32 F9 | 	getword	_var02, _var02, #0
251d0     1A 02 86 F1 | 	sub	_var02, #26
251d4     38 00 90 FD | 	jmp	#LR__3722
251d8                 | LR__3718
251d8     01 03 32 F9 | 	getword	_var02, _var02, #0
251dc     08 02 06 F1 | 	add	_var02, #8
251e0     2C 00 90 FD | 	jmp	#LR__3722
251e4                 | LR__3719
251e4     01 03 32 F9 | 	getword	_var02, _var02, #0
251e8     50 02 86 F1 | 	sub	_var02, #80
251ec     20 00 90 FD | 	jmp	#LR__3722
251f0                 | LR__3720
251f0     01 03 32 F9 | 	getword	_var02, _var02, #0
251f4     0E 00 00 FF 
251f8     60 02 86 F1 | 	sub	_var02, ##7264
251fc                 | ' 				}
251fc                 | ' 				break;
251fc     10 00 90 FD | 	jmp	#LR__3722
25200                 | LR__3721
25200     0F 0C 4E F7 | 	zerox	_var07, #15 wz
25204     02 0A 06 AA |  if_e	mul	_var06, #2
25208     05 07 02 A1 |  if_e	add	_var04, _var06
2520c     D8 FE 9F FD | 	jmp	#LR__3710
25210                 | LR__3722
25210     01 01 32 F9 | 	getword	_var01, _var02, #0
25214                 | LR__3723
25214                 | ' 		}
25214                 | ' 		uni = uc;
25214                 | ' 	}
25214                 | ' 
25214                 | ' 	return uni;
25214     00 FB 01 F6 | 	mov	result1, _var01
25218                 | _fatfs_cc_ff_wtoupper_ret
25218     2D 00 64 FD | 	ret
2521c                 | 
2521c                 | _fatfs_cc_strncpy
2521c     09 01 02 F6 | 	mov	_var01, arg01
25220     97 12 48 FB | 	callpa	#(@LR__3731-@LR__3730)>>2,fcache_load_ptr_
25224                 | ' 
25224                 | ' 	dscan = dst;
25224                 | ' 	sscan = src;
25224                 | ' 	count = n;
25224                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
25224                 | LR__3730
25224     01 16 86 F1 | 	sub	arg03, #1
25228     00 16 56 F2 | 	cmps	arg03, #0 wc
2522c     18 00 90 CD |  if_b	jmp	#LR__3732
25230     0A FB C1 FA | 	rdbyte	result1, arg02
25234     00 FB 41 FC | 	wrbyte	result1, _var01
25238     01 14 06 F1 | 	add	arg02, #1
2523c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25240                 | ' 		continue;
25240     01 00 06 F1 | 	add	_var01, #1
25244     DC FF 9F 5D |  if_ne	jmp	#LR__3730
25248                 | LR__3731
25248                 | LR__3732
25248     97 0C 48 FB | 	callpa	#(@LR__3734-@LR__3733)>>2,fcache_load_ptr_
2524c                 | ' 	while (--count >= 0)
2524c                 | LR__3733
2524c     01 16 86 F1 | 	sub	arg03, #1
25250     00 16 56 F2 | 	cmps	arg03, #0 wc
25254     00 03 02 36 |  if_ae	mov	_var02, _var01
25258     01 00 06 31 |  if_ae	add	_var01, #1
2525c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
25260     E8 FF 9F 3D |  if_ae	jmp	#LR__3733
25264                 | LR__3734
25264                 | ' 		*dscan++ = '\0';
25264                 | ' 	return(dst);
25264     09 FB 01 F6 | 	mov	result1, arg01
25268                 | _fatfs_cc_strncpy_ret
25268     2D 00 64 FD | 	ret
2526c                 | 
2526c                 | _fatfs_cc_memcmp
2526c                 | ' 	for (n = size; n > 0; n--)
2526c     00 16 0E F2 | 	cmp	arg03, #0 wz
25270     28 00 90 AD |  if_e	jmp	#LR__3741
25274                 | LR__3740
25274     09 01 C2 FA | 	rdbyte	_var01, arg01
25278     0A 03 C2 FA | 	rdbyte	_var02, arg02
2527c     01 01 0A F2 | 	cmp	_var01, _var02 wz
25280     01 12 06 A1 |  if_e	add	arg01, #1
25284     01 14 06 A1 |  if_e	add	arg02, #1
25288                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
25288     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2528c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
25290     01 FB 81 51 |  if_ne	sub	result1, _var02
25294     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
25298     F6 17 6E FB | 	djnz	arg03, #LR__3740
2529c                 | LR__3741
2529c                 | ' 
2529c                 | ' 	return(0);
2529c     00 FA 05 F6 | 	mov	result1, #0
252a0                 | _fatfs_cc_memcmp_ret
252a0     2D 00 64 FD | 	ret
252a4                 | 
252a4                 | _fatfs_cc_strncmp
252a4     09 01 0A F6 | 	mov	_var01, arg01 wz
252a8     14 00 90 5D |  if_ne	jmp	#LR__3750
252ac                 | ' 		return scan2 ? -1 : 0;
252ac     00 14 0E F2 | 	cmp	arg02, #0 wz
252b0     01 02 66 56 |  if_ne	neg	_var02, #1
252b4     00 02 06 A6 |  if_e	mov	_var02, #0
252b8     01 FB 01 F6 | 	mov	result1, _var02
252bc     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
252c0                 | LR__3750
252c0     00 14 0E F2 | 	cmp	arg02, #0 wz
252c4     01 FA 05 A6 |  if_e	mov	result1, #1
252c8     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
252cc     0B 05 02 F6 | 	mov	_var03, arg03
252d0     97 16 48 FB | 	callpa	#(@LR__3752-@LR__3751)>>2,fcache_load_ptr_
252d4                 | ' 	count = n;
252d4                 | ' 	do {
252d4                 | LR__3751
252d4     00 07 C2 FA | 	rdbyte	_var04, _var01
252d8     0A 09 02 F6 | 	mov	_var05, arg02
252dc     04 0B C2 FA | 	rdbyte	_var06, _var05
252e0     01 04 86 F1 | 	sub	_var03, #1
252e4     00 04 56 F2 | 	cmps	_var03, #0 wc
252e8     01 00 06 F1 | 	add	_var01, #1
252ec     01 14 06 F1 | 	add	arg02, #1
252f0     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
252f4     08 00 90 2D |  if_nc_and_z	jmp	#LR__3753
252f8     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
252fc     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3751
25300                 | LR__3752
25300                 | LR__3753
25300     00 04 56 F2 | 	cmps	_var03, #0 wc
25304                 | ' 		return(0);
25304     00 FA 05 C6 |  if_b	mov	result1, #0
25308     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2530c     05 07 0A F2 | 	cmp	_var04, _var06 wz
25310                 | ' 		return(0);
25310     00 FA 05 A6 |  if_e	mov	result1, #0
25314     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
25318     00 06 0E F2 | 	cmp	_var04, #0 wz
2531c                 | ' 		return(-1);
2531c     01 FA 65 A6 |  if_e	neg	result1, #1
25320     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
25324     00 0A 0E F2 | 	cmp	_var06, #0 wz
25328                 | ' 		return(1);
25328     01 FA 05 A6 |  if_e	mov	result1, #1
2532c                 | ' 		return(c1 - c2);
2532c     03 FB 01 56 |  if_ne	mov	result1, _var04
25330     05 FB 81 51 |  if_ne	sub	result1, _var06
25334                 | _fatfs_cc_strncmp_ret
25334     2D 00 64 FD | 	ret
25338                 | 
25338                 | _fatfs_cc_strchr
25338                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
25338                 | ' 	while ((c = *s++) != (char) charwanted)
25338                 | LR__3760
25338     09 01 02 F6 | 	mov	_var01, arg01
2533c     00 03 C2 FA | 	rdbyte	_var02, _var01
25340     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
25344     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
25348     03 05 0A F2 | 	cmp	_var03, _var04 wz
2534c     01 12 06 F1 | 	add	arg01, #1
25350     14 00 90 AD |  if_e	jmp	#LR__3761
25354     01 05 02 F6 | 	mov	_var03, _var02
25358     07 04 4E F7 | 	zerox	_var03, #7 wz
2535c     00 FA 05 A6 |  if_e	mov	result1, #0
25360     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
25364     D0 FF 9F FD | 	jmp	#LR__3760
25368                 | LR__3761
25368                 | ' 	return((char *)--s);
25368     01 12 86 F1 | 	sub	arg01, #1
2536c     09 FB 01 F6 | 	mov	result1, arg01
25370                 | _fatfs_cc_strchr_ret
25370     2D 00 64 FD | 	ret
25374                 | 
25374                 | _fatfs_cc_disk_initialize
25374     04 4A 05 F6 | 	mov	COUNT_, #4
25378     A8 00 A0 FD | 	call	#pushregs_
2537c     40 F0 07 F1 | 	add	ptra, #64
25380     04 4E 05 F1 | 	add	fp, #4
25384     A7 12 42 FC | 	wrbyte	arg01, fp
25388     01 00 00 FF 
2538c     14 E4 05 F1 | 	add	objptr, ##532
25390     F2 18 02 FB | 	rdlong	arg04, objptr
25394     2C 4E 05 F1 | 	add	fp, #44
25398     A7 18 62 FC | 	wrlong	arg04, fp
2539c     04 E4 85 F1 | 	sub	objptr, #4
253a0     F2 18 02 FB | 	rdlong	arg04, objptr
253a4     04 4E 05 F1 | 	add	fp, #4
253a8     A7 18 62 FC | 	wrlong	arg04, fp
253ac     08 E4 05 F1 | 	add	objptr, #8
253b0     F2 18 02 FB | 	rdlong	arg04, objptr
253b4     04 4E 05 F1 | 	add	fp, #4
253b8     A7 18 62 FC | 	wrlong	arg04, fp
253bc     04 E4 05 F1 | 	add	objptr, #4
253c0     F2 18 02 FB | 	rdlong	arg04, objptr
253c4     04 4E 05 F1 | 	add	fp, #4
253c8     A7 18 62 FC | 	wrlong	arg04, fp
253cc     04 E4 05 F1 | 	add	objptr, #4
253d0     F2 02 48 FC | 	wrbyte	#1, objptr
253d4     01 00 00 FF 
253d8     20 E4 85 F1 | 	sub	objptr, ##544
253dc     38 4E 85 F1 | 	sub	fp, #56
253e0     A7 18 CA FA | 	rdbyte	arg04, fp wz
253e4     04 4E 85 F1 | 	sub	fp, #4
253e8                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
253e8                 | '             return RES_NOTRDY;
253e8     03 FA 05 56 |  if_ne	mov	result1, #3
253ec     D8 05 90 5D |  if_ne	jmp	#LR__3788
253f0     13 00 00 FF 
253f4     10 13 06 F6 | 	mov	arg01, ##10000
253f8     9C 9A BF FD | 	call	#__system___waitus
253fc     30 4E 05 F1 | 	add	fp, #48
25400     A7 12 02 FB | 	rdlong	arg01, fp
25404     09 01 08 FC | 	wrpin	#0, arg01
25408     04 4E 05 F1 | 	add	fp, #4
2540c     A7 12 02 FB | 	rdlong	arg01, fp
25410     09 01 08 FC | 	wrpin	#0, arg01
25414     04 4E 05 F1 | 	add	fp, #4
25418     A7 12 02 FB | 	rdlong	arg01, fp
2541c     09 01 08 FC | 	wrpin	#0, arg01
25420     04 4E 05 F1 | 	add	fp, #4
25424     A7 12 02 FB | 	rdlong	arg01, fp
25428     09 00 80 FF 
2542c     09 01 08 FC | 	wrpin	##4608, arg01
25430     0C 4E 85 F1 | 	sub	fp, #12
25434     A7 12 02 FB | 	rdlong	arg01, fp
25438     59 12 62 FD | 	drvh	arg01
2543c     04 4E 05 F1 | 	add	fp, #4
25440     A7 12 02 FB | 	rdlong	arg01, fp
25444     59 12 62 FD | 	drvh	arg01
25448     04 4E 05 F1 | 	add	fp, #4
2544c     A7 12 02 FB | 	rdlong	arg01, fp
25450     59 12 62 FD | 	drvh	arg01
25454     04 4E 05 F1 | 	add	fp, #4
25458     A7 12 02 FB | 	rdlong	arg01, fp
2545c     59 12 62 FD | 	drvh	arg01
25460     20 4E 85 F1 | 	sub	fp, #32
25464     00 04 80 FF 
25468     A7 20 68 FC | 	wrlong	##524304, fp
2546c     04 4E 05 F1 | 	add	fp, #4
25470     20 03 80 FF 
25474     A7 90 68 FC | 	wrlong	##409672, fp
25478     14 4E 05 F1 | 	add	fp, #20
2547c     A7 1E 02 FB | 	rdlong	local01, fp
25480     18 4E 85 F1 | 	sub	fp, #24
25484     A7 16 02 FB | 	rdlong	arg03, fp
25488     40 1E 62 FD | 	dirl	local01
2548c     A0 03 80 FF 
25490     0F 91 08 FC | 	wrpin	##475208, local01
25494     0F 17 12 FC | 	wxpin	arg03, local01
25498     0F 01 28 FC | 	wypin	#0, local01
2549c     41 1E 62 FD | 	dirh	local01
254a0     1C 4E 05 F1 | 	add	fp, #28
254a4     A7 20 02 FB | 	rdlong	local02, fp
254a8     10 1F 82 F1 | 	sub	local01, local02
254ac     07 1E 06 F5 | 	and	local01, #7
254b0     18 1E 66 F0 | 	shl	local01, #24
254b4     78 14 06 F6 | 	mov	arg02, #120
254b8     0F 15 42 F5 | 	or	arg02, local01
254bc     14 4E 85 F1 | 	sub	fp, #20
254c0     A7 14 62 FC | 	wrlong	arg02, fp
254c4     14 4E 05 F1 | 	add	fp, #20
254c8     A7 12 02 FB | 	rdlong	arg01, fp
254cc     10 14 26 F4 | 	bith	arg02, #16
254d0     40 12 62 FD | 	dirl	arg01
254d4     09 15 02 FC | 	wrpin	arg02, arg01
254d8     09 3F 18 FC | 	wxpin	#31, arg01
254dc     FF FF FF FF 
254e0     09 FF 2B FC | 	wypin	##-1, arg01
254e4     41 12 62 FD | 	dirh	arg01
254e8     04 4E 85 F1 | 	sub	fp, #4
254ec     A7 14 02 FB | 	rdlong	arg02, fp
254f0     08 4E 05 F1 | 	add	fp, #8
254f4     A7 22 02 FB | 	rdlong	local03, fp
254f8     11 15 82 F1 | 	sub	arg02, local03
254fc     07 14 06 F5 | 	and	arg02, #7
25500     18 14 66 F0 | 	shl	arg02, #24
25504     14 4E 85 F1 | 	sub	fp, #20
25508     A7 14 62 FC | 	wrlong	arg02, fp
2550c     29 00 00 FF 
25510     7A 14 46 F5 | 	or	arg02, ##21114
25514     A7 14 62 FC | 	wrlong	arg02, fp
25518     14 4E 05 F1 | 	add	fp, #20
2551c     A7 12 02 FB | 	rdlong	arg01, fp
25520     40 12 62 FD | 	dirl	arg01
25524     09 15 02 FC | 	wrpin	arg02, arg01
25528     09 4F 18 FC | 	wxpin	#39, arg01
2552c     09 01 28 FC | 	wypin	#0, arg01
25530     41 12 62 FD | 	dirh	arg01
25534     28 4E 85 F1 | 	sub	fp, #40
25538     A7 12 02 F6 | 	mov	arg01, fp
2553c     14 4E 85 F1 | 	sub	fp, #20
25540     0A 14 06 F6 | 	mov	arg02, #10
25544     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1060
25548     00 12 06 F6 | 	mov	arg01, #0
2554c     00 14 06 F6 | 	mov	arg02, #0
25550     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25554     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1070
25558     64 12 06 F6 | 	mov	arg01, #100
2555c     38 99 BF FD | 	call	#__system___waitus
25560     14 4E 05 F1 | 	add	fp, #20
25564     A7 12 02 F6 | 	mov	arg01, fp
25568     14 4E 85 F1 | 	sub	fp, #20
2556c     0A 14 06 F6 | 	mov	arg02, #10
25570     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1060
25574     0C 4E 05 F1 | 	add	fp, #12
25578     A7 00 48 FC | 	wrbyte	#0, fp
2557c     0C 4E 85 F1 | 	sub	fp, #12
25580     00 12 06 F6 | 	mov	arg01, #0
25584     00 14 06 F6 | 	mov	arg02, #0
25588     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
2558c     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
25590     01 18 0E F2 | 	cmp	arg04, #1 wz
25594     B8 03 90 5D |  if_ne	jmp	#LR__3787
25598     08 12 06 F6 | 	mov	arg01, #8
2559c     AA 15 06 F6 | 	mov	arg02, #426
255a0     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
255a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
255a8     01 FA 0D F2 | 	cmp	result1, #1 wz
255ac     98 01 90 5D |  if_ne	jmp	#LR__3773
255b0     14 4E 05 F1 | 	add	fp, #20
255b4     A7 12 02 F6 | 	mov	arg01, fp
255b8     14 4E 85 F1 | 	sub	fp, #20
255bc     04 14 06 F6 | 	mov	arg02, #4
255c0     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1060
255c4     16 4E 05 F1 | 	add	fp, #22
255c8     A7 24 C2 FA | 	rdbyte	local04, fp
255cc     16 4E 85 F1 | 	sub	fp, #22
255d0     01 24 0E F2 | 	cmp	local04, #1 wz
255d4     17 4E 05 A1 |  if_e	add	fp, #23
255d8     A7 22 C2 AA |  if_e	rdbyte	local03, fp
255dc     17 4E 85 A1 |  if_e	sub	fp, #23
255e0     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
255e4     68 03 90 5D |  if_ne	jmp	#LR__3786
255e8                 | ' 				for (tmr = 1000; tmr; tmr--) {
255e8     18 4E 05 F1 | 	add	fp, #24
255ec     01 00 80 FF 
255f0     A7 D0 6B FC | 	wrlong	##1000, fp
255f4     18 4E 85 F1 | 	sub	fp, #24
255f8                 | LR__3770
255f8     18 4E 05 F1 | 	add	fp, #24
255fc     A7 1E 0A FB | 	rdlong	local01, fp wz
25600     18 4E 85 F1 | 	sub	fp, #24
25604     3C 00 90 AD |  if_e	jmp	#LR__3771
25608     A9 12 06 F6 | 	mov	arg01, #169
2560c     1E 14 C6 F9 | 	decod	arg02, #30
25610     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25614     FD 24 02 F6 | 	mov	local04, result1
25618     07 24 4E F7 | 	zerox	local04, #7 wz
2561c     24 00 90 AD |  if_e	jmp	#LR__3771
25620     01 00 00 FF 
25624     E8 13 06 F6 | 	mov	arg01, ##1000
25628     6C 98 BF FD | 	call	#__system___waitus
2562c     18 4E 05 F1 | 	add	fp, #24
25630     A7 24 02 FB | 	rdlong	local04, fp
25634     01 24 86 F1 | 	sub	local04, #1
25638     A7 24 62 FC | 	wrlong	local04, fp
2563c     18 4E 85 F1 | 	sub	fp, #24
25640     B4 FF 9F FD | 	jmp	#LR__3770
25644                 | LR__3771
25644     18 4E 05 F1 | 	add	fp, #24
25648     A7 24 0A FB | 	rdlong	local04, fp wz
2564c     18 4E 85 F1 | 	sub	fp, #24
25650     4C 00 90 AD |  if_e	jmp	#LR__3772
25654     3A 12 06 F6 | 	mov	arg01, #58
25658     00 14 06 F6 | 	mov	arg02, #0
2565c     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25660     FD 22 02 F6 | 	mov	local03, result1
25664     07 22 4E F7 | 	zerox	local03, #7 wz
25668     34 00 90 5D |  if_ne	jmp	#LR__3772
2566c     14 4E 05 F1 | 	add	fp, #20
25670     A7 12 02 F6 | 	mov	arg01, fp
25674     14 4E 85 F1 | 	sub	fp, #20
25678     04 14 06 F6 | 	mov	arg02, #4
2567c     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1060
25680     14 4E 05 F1 | 	add	fp, #20
25684     A7 1E C2 FA | 	rdbyte	local01, fp
25688     40 1E CE F7 | 	test	local01, #64 wz
2568c     0C 24 06 56 |  if_ne	mov	local04, #12
25690     04 24 06 A6 |  if_e	mov	local04, #4
25694     08 4E 85 F1 | 	sub	fp, #8
25698     A7 24 42 FC | 	wrbyte	local04, fp
2569c     0C 4E 85 F1 | 	sub	fp, #12
256a0                 | LR__3772
256a0     14 24 06 FB | 	rdlong	local04, #20
256a4     18 4E 05 F1 | 	add	fp, #24
256a8     A7 24 62 FC | 	wrlong	local04, fp
256ac     0C 4E 05 F1 | 	add	fp, #12
256b0     A7 24 02 FB | 	rdlong	local04, fp
256b4     1B 24 26 F4 | 	bith	local04, #27
256b8     A7 24 62 FC | 	wrlong	local04, fp
256bc     0C 4E 85 F1 | 	sub	fp, #12
256c0     A7 24 02 FB | 	rdlong	local04, fp
256c4     18 4E 85 F1 | 	sub	fp, #24
256c8     68 78 04 FF 
256cc     81 25 16 F2 | 	cmp	local04, ##150000001 wc
256d0     1C 4E 05 C1 |  if_b	add	fp, #28
256d4     00 01 80 CF 
256d8     A7 08 68 CC |  if_b	wrlong	##131076, fp
256dc     1C 4E 85 C1 |  if_b	sub	fp, #28
256e0     6C 02 90 CD |  if_b	jmp	#LR__3786
256e4     18 4E 05 F1 | 	add	fp, #24
256e8     A7 24 02 FB | 	rdlong	local04, fp
256ec     18 4E 85 F1 | 	sub	fp, #24
256f0     E1 F5 05 FF 
256f4     01 24 16 F2 | 	cmp	local04, ##200000001 wc
256f8     1C 4E 05 C1 |  if_b	add	fp, #28
256fc     00 01 80 CF 
25700     A7 0A 68 CC |  if_b	wrlong	##131077, fp
25704     1C 4E 85 C1 |  if_b	sub	fp, #28
25708     44 02 90 CD |  if_b	jmp	#LR__3786
2570c     18 4E 05 F1 | 	add	fp, #24
25710     A7 24 02 FB | 	rdlong	local04, fp
25714     18 4E 85 F1 | 	sub	fp, #24
25718     3B 58 08 FF 
2571c     01 24 16 F2 | 	cmp	local04, ##280000001 wc
25720     1C 4E 05 C1 |  if_b	add	fp, #28
25724     00 01 80 CF 
25728     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2572c     1C 4E 85 C1 |  if_b	sub	fp, #28
25730     1C 02 90 CD |  if_b	jmp	#LR__3786
25734     1C 4E 05 F1 | 	add	fp, #28
25738     80 01 80 FF 
2573c     A7 10 68 FC | 	wrlong	##196616, fp
25740     1C 4E 85 F1 | 	sub	fp, #28
25744     08 02 90 FD | 	jmp	#LR__3786
25748                 | LR__3773
25748     A9 12 06 F6 | 	mov	arg01, #169
2574c     00 14 06 F6 | 	mov	arg02, #0
25750     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25754     FD 24 E2 F8 | 	getbyte	local04, result1, #0
25758     02 24 16 F2 | 	cmp	local04, #2 wc
2575c     18 00 90 3D |  if_ae	jmp	#LR__3774
25760     0C 4E 05 F1 | 	add	fp, #12
25764     A7 04 48 FC | 	wrbyte	#2, fp
25768     04 4E 05 F1 | 	add	fp, #4
2576c     A7 52 49 FC | 	wrbyte	#169, fp
25770     10 4E 85 F1 | 	sub	fp, #16
25774     14 00 90 FD | 	jmp	#LR__3775
25778                 | LR__3774
25778     0C 4E 05 F1 | 	add	fp, #12
2577c     A7 02 48 FC | 	wrbyte	#1, fp
25780     04 4E 05 F1 | 	add	fp, #4
25784     A7 02 48 FC | 	wrbyte	#1, fp
25788     10 4E 85 F1 | 	sub	fp, #16
2578c                 | LR__3775
2578c                 | ' 				ty =  0x01 ; cmd =  (1) ;
2578c                 | ' 			}
2578c                 | ' 			for (tmr = 1000; tmr; tmr--) {
2578c     18 4E 05 F1 | 	add	fp, #24
25790     01 00 80 FF 
25794     A7 D0 6B FC | 	wrlong	##1000, fp
25798     18 4E 85 F1 | 	sub	fp, #24
2579c                 | LR__3776
2579c     18 4E 05 F1 | 	add	fp, #24
257a0     A7 22 0A FB | 	rdlong	local03, fp wz
257a4     18 4E 85 F1 | 	sub	fp, #24
257a8     44 00 90 AD |  if_e	jmp	#LR__3777
257ac     10 4E 05 F1 | 	add	fp, #16
257b0     A7 12 C2 FA | 	rdbyte	arg01, fp
257b4     10 4E 85 F1 | 	sub	fp, #16
257b8     00 14 06 F6 | 	mov	arg02, #0
257bc     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
257c0     FD 24 02 F6 | 	mov	local04, result1
257c4     07 24 4E F7 | 	zerox	local04, #7 wz
257c8     24 00 90 AD |  if_e	jmp	#LR__3777
257cc     01 00 00 FF 
257d0     E8 13 06 F6 | 	mov	arg01, ##1000
257d4     C0 96 BF FD | 	call	#__system___waitus
257d8     18 4E 05 F1 | 	add	fp, #24
257dc     A7 24 02 FB | 	rdlong	local04, fp
257e0     01 24 86 F1 | 	sub	local04, #1
257e4     A7 24 62 FC | 	wrlong	local04, fp
257e8     18 4E 85 F1 | 	sub	fp, #24
257ec     AC FF 9F FD | 	jmp	#LR__3776
257f0                 | LR__3777
257f0     18 4E 05 F1 | 	add	fp, #24
257f4     A7 24 0A FB | 	rdlong	local04, fp wz
257f8     18 4E 85 F1 | 	sub	fp, #24
257fc     14 00 90 AD |  if_e	jmp	#LR__3778
25800     10 12 06 F6 | 	mov	arg01, #16
25804     09 14 C6 F9 | 	decod	arg02, #9
25808     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
2580c     07 FA 4D F7 | 	zerox	result1, #7 wz
25810     0C 00 90 AD |  if_e	jmp	#LR__3779
25814                 | LR__3778
25814     0C 4E 05 F1 | 	add	fp, #12
25818     A7 00 48 FC | 	wrbyte	#0, fp
2581c     0C 4E 85 F1 | 	sub	fp, #12
25820                 | LR__3779
25820     14 24 06 FB | 	rdlong	local04, #20
25824     18 4E 05 F1 | 	add	fp, #24
25828     A7 24 62 FC | 	wrlong	local04, fp
2582c     18 4E 85 F1 | 	sub	fp, #24
25830     F0 FA 02 FF 
25834     01 25 16 F2 | 	cmp	local04, ##100000001 wc
25838     18 00 90 3D |  if_ae	jmp	#LR__3780
2583c     24 4E 05 F1 | 	add	fp, #36
25840     A7 24 02 FB | 	rdlong	local04, fp
25844     1B 24 26 F4 | 	bith	local04, #27
25848     A7 24 62 FC | 	wrlong	local04, fp
2584c     24 4E 85 F1 | 	sub	fp, #36
25850     2C 00 90 FD | 	jmp	#LR__3781
25854                 | LR__3780
25854     18 4E 05 F1 | 	add	fp, #24
25858     A7 24 02 FB | 	rdlong	local04, fp
2585c     18 4E 85 F1 | 	sub	fp, #24
25860     E1 F5 05 FF 
25864     01 24 16 F2 | 	cmp	local04, ##200000001 wc
25868     24 4E 05 C1 |  if_b	add	fp, #36
2586c     A7 24 02 CB |  if_b	rdlong	local04, fp
25870     80 00 04 CF 
25874     00 24 46 C5 |  if_b	or	local04, ##134283264
25878     A7 24 62 CC |  if_b	wrlong	local04, fp
2587c     24 4E 85 C1 |  if_b	sub	fp, #36
25880                 | LR__3781
25880     18 4E 05 F1 | 	add	fp, #24
25884     A7 24 02 FB | 	rdlong	local04, fp
25888     18 4E 85 F1 | 	sub	fp, #24
2588c     F0 FA 02 FF 
25890     01 25 16 F2 | 	cmp	local04, ##100000001 wc
25894     1C 4E 05 C1 |  if_b	add	fp, #28
25898     00 01 80 CF 
2589c     A7 08 68 CC |  if_b	wrlong	##131076, fp
258a0     1C 4E 85 C1 |  if_b	sub	fp, #28
258a4     A8 00 90 CD |  if_b	jmp	#LR__3785
258a8     18 4E 05 F1 | 	add	fp, #24
258ac     A7 24 02 FB | 	rdlong	local04, fp
258b0     18 4E 85 F1 | 	sub	fp, #24
258b4     68 78 04 FF 
258b8     81 25 16 F2 | 	cmp	local04, ##150000001 wc
258bc     1C 4E 05 C1 |  if_b	add	fp, #28
258c0     80 01 80 CF 
258c4     A7 0C 68 CC |  if_b	wrlong	##196614, fp
258c8     1C 4E 85 C1 |  if_b	sub	fp, #28
258cc     80 00 90 CD |  if_b	jmp	#LR__3784
258d0     18 4E 05 F1 | 	add	fp, #24
258d4     A7 24 02 FB | 	rdlong	local04, fp
258d8     18 4E 85 F1 | 	sub	fp, #24
258dc     E1 F5 05 FF 
258e0     01 24 16 F2 | 	cmp	local04, ##200000001 wc
258e4     1C 4E 05 C1 |  if_b	add	fp, #28
258e8     00 02 80 CF 
258ec     A7 10 68 CC |  if_b	wrlong	##262152, fp
258f0     1C 4E 85 C1 |  if_b	sub	fp, #28
258f4     58 00 90 CD |  if_b	jmp	#LR__3783
258f8     18 4E 05 F1 | 	add	fp, #24
258fc     A7 24 02 FB | 	rdlong	local04, fp
25900     18 4E 85 F1 | 	sub	fp, #24
25904     59 73 07 FF 
25908     81 24 16 F2 | 	cmp	local04, ##250000001 wc
2590c     1C 4E 05 C1 |  if_b	add	fp, #28
25910     80 02 80 CF 
25914     A7 14 68 CC |  if_b	wrlong	##327690, fp
25918     1C 4E 85 C1 |  if_b	sub	fp, #28
2591c     30 00 90 CD |  if_b	jmp	#LR__3782
25920     18 4E 05 F1 | 	add	fp, #24
25924     A7 24 02 FB | 	rdlong	local04, fp
25928     18 4E 85 F1 | 	sub	fp, #24
2592c     D1 F0 08 FF 
25930     01 25 16 F2 | 	cmp	local04, ##300000001 wc
25934     1C 4E 05 C1 |  if_b	add	fp, #28
25938     00 03 80 CF 
2593c     A7 18 68 CC |  if_b	wrlong	##393228, fp
25940     1C 4E 85 F3 | 	sumc	fp, #28
25944     80 03 80 3F 
25948     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2594c     1C 4E 85 31 |  if_ae	sub	fp, #28
25950                 | LR__3782
25950                 | LR__3783
25950                 | LR__3784
25950                 | LR__3785
25950                 | LR__3786
25950                 | LR__3787
25950     0C 4E 05 F1 | 	add	fp, #12
25954     A7 24 C2 FA | 	rdbyte	local04, fp
25958     01 00 00 FF 
2595c     21 E4 05 F1 | 	add	objptr, ##545
25960     F2 24 42 FC | 	wrbyte	local04, objptr
25964     A7 1E CA FA | 	rdbyte	local01, fp wz
25968     00 24 06 56 |  if_ne	mov	local04, #0
2596c     01 24 06 A6 |  if_e	mov	local04, #1
25970     20 4E 05 F1 | 	add	fp, #32
25974     A7 24 42 FC | 	wrbyte	local04, fp
25978     A7 24 C2 FA | 	rdbyte	local04, fp
2597c     2C 4E 85 F1 | 	sub	fp, #44
25980     01 E4 85 F1 | 	sub	objptr, #1
25984     F2 24 42 FC | 	wrbyte	local04, objptr
25988     01 00 00 FF 
2598c     20 E4 85 F1 | 	sub	objptr, ##544
25990     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1070
25994     34 4E 05 F1 | 	add	fp, #52
25998     A7 12 02 FB | 	rdlong	arg01, fp
2599c     18 4E 85 F1 | 	sub	fp, #24
259a0     A7 14 02 FB | 	rdlong	arg02, fp
259a4     09 15 12 FC | 	wxpin	arg02, arg01
259a8     1C 4E 05 F1 | 	add	fp, #28
259ac     A7 12 02 FB | 	rdlong	arg01, fp
259b0     14 4E 85 F1 | 	sub	fp, #20
259b4     A7 14 02 FB | 	rdlong	arg02, fp
259b8     09 15 02 FC | 	wrpin	arg02, arg01
259bc                 | ' 
259bc                 | ' 		}
259bc                 | ' 	}
259bc                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
259bc                 | ' 	CardType = ty;
259bc                 | ' 	s = ty ? 0 :  0x01 ;
259bc                 | ' 	Stat = s;
259bc                 | ' 
259bc                 | ' 	deselect();
259bc                 | ' 
259bc                 | ' 
259bc                 | ' 	_wxpin( PIN_CLK, ck_div );
259bc                 | ' 	_wrpin( PIN_DI, spm_tx );
259bc                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
259bc                 | ' 	return s;
259bc     08 4E 05 F1 | 	add	fp, #8
259c0     A7 FA C1 FA | 	rdbyte	result1, fp
259c4     2C 4E 85 F1 | 	sub	fp, #44
259c8                 | LR__3788
259c8     A7 F0 03 F6 | 	mov	ptra, fp
259cc     B2 00 A0 FD | 	call	#popregs_
259d0                 | _fatfs_cc_disk_initialize_ret
259d0     2D 00 64 FD | 	ret
259d4                 | 
259d4                 | _fatfs_cc_disk_read
259d4     05 4A 05 F6 | 	mov	COUNT_, #5
259d8     A8 00 A0 FD | 	call	#pushregs_
259dc     0A 1F 02 F6 | 	mov	local01, arg02
259e0     0B 21 02 F6 | 	mov	local02, arg03
259e4     0C 23 02 F6 | 	mov	local03, arg04
259e8     00 12 0E F2 | 	cmp	arg01, #0 wz
259ec     01 FA 05 56 |  if_ne	mov	result1, #1
259f0                 | ' 
259f0                 | ' 	return Stat;
259f0     01 00 00 AF 
259f4     20 E4 05 A1 |  if_e	add	objptr, ##544
259f8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
259fc     01 00 00 AF 
25a00     20 E4 85 A1 |  if_e	sub	objptr, ##544
25a04     FD FA E1 F8 | 	getbyte	result1, result1, #0
25a08     01 FA CD F7 | 	test	result1, #1 wz
25a0c     03 FA 05 56 |  if_ne	mov	result1, #3
25a10     84 00 90 5D |  if_ne	jmp	#LR__3792
25a14     01 00 00 FF 
25a18     21 E4 05 F1 | 	add	objptr, ##545
25a1c     F2 24 C2 FA | 	rdbyte	local04, objptr
25a20     01 00 00 FF 
25a24     21 E4 85 F1 | 	sub	objptr, ##545
25a28     08 24 CE F7 | 	test	local04, #8 wz
25a2c     09 20 66 A0 |  if_e	shl	local02, #9
25a30     02 22 16 F2 | 	cmp	local03, #2 wc
25a34     12 24 06 36 |  if_ae	mov	local04, #18
25a38     11 24 06 C6 |  if_b	mov	local04, #17
25a3c     10 15 02 F6 | 	mov	arg02, local02
25a40     12 13 02 F6 | 	mov	arg01, local04
25a44     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25a48     FD 26 02 F6 | 	mov	local05, result1
25a4c     07 26 4E F7 | 	zerox	local05, #7 wz
25a50     30 00 90 5D |  if_ne	jmp	#LR__3791
25a54                 | ' 		do {
25a54                 | LR__3790
25a54     0F 13 02 F6 | 	mov	arg01, local01
25a58     09 14 C6 F9 | 	decod	arg02, #9
25a5c     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1078
25a60     00 FA 0D F2 | 	cmp	result1, #0 wz
25a64     01 00 00 5F 
25a68     00 1E 06 51 |  if_ne	add	local01, ##512
25a6c     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3790
25a70     12 25 E2 F8 | 	getbyte	local04, local04, #0
25a74     12 24 0E F2 | 	cmp	local04, #18 wz
25a78     0C 12 06 A6 |  if_e	mov	arg01, #12
25a7c     00 14 06 A6 |  if_e	mov	arg02, #0
25a80     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1084
25a84                 | LR__3791
25a84     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1070
25a88                 | ' 	}
25a88                 | ' 	deselect();
25a88                 | ' 
25a88                 | ' 	return count ? RES_ERROR : RES_OK;
25a88     00 22 0E F2 | 	cmp	local03, #0 wz
25a8c     01 26 06 56 |  if_ne	mov	local05, #1
25a90     00 26 06 A6 |  if_e	mov	local05, #0
25a94     13 FB 01 F6 | 	mov	result1, local05
25a98                 | LR__3792
25a98     A7 F0 03 F6 | 	mov	ptra, fp
25a9c     B2 00 A0 FD | 	call	#popregs_
25aa0                 | _fatfs_cc_disk_read_ret
25aa0     2D 00 64 FD | 	ret
25aa4                 | 
25aa4                 | _fatfs_cc_disk_write
25aa4     04 4A 05 F6 | 	mov	COUNT_, #4
25aa8     A8 00 A0 FD | 	call	#pushregs_
25aac     0A 1F 02 F6 | 	mov	local01, arg02
25ab0     0C 21 02 F6 | 	mov	local02, arg04
25ab4     0B 23 02 F6 | 	mov	local03, arg03
25ab8     00 12 0E F2 | 	cmp	arg01, #0 wz
25abc     01 FA 05 56 |  if_ne	mov	result1, #1
25ac0                 | ' 
25ac0                 | ' 	return Stat;
25ac0     01 00 00 AF 
25ac4     20 E4 05 A1 |  if_e	add	objptr, ##544
25ac8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
25acc     01 00 00 AF 
25ad0     20 E4 85 A1 |  if_e	sub	objptr, ##544
25ad4     FD FA E1 F8 | 	getbyte	result1, result1, #0
25ad8     01 FA CD F7 | 	test	result1, #1 wz
25adc     03 FA 05 56 |  if_ne	mov	result1, #3
25ae0     D4 00 90 5D |  if_ne	jmp	#LR__3804
25ae4     01 00 00 FF 
25ae8     21 E4 05 F1 | 	add	objptr, ##545
25aec     F2 16 C2 FA | 	rdbyte	arg03, objptr
25af0     01 00 00 FF 
25af4     21 E4 85 F1 | 	sub	objptr, ##545
25af8     08 16 CE F7 | 	test	arg03, #8 wz
25afc     09 22 66 A0 |  if_e	shl	local03, #9
25b00     01 20 0E F2 | 	cmp	local02, #1 wz
25b04     30 00 90 5D |  if_ne	jmp	#LR__3800
25b08     18 12 06 F6 | 	mov	arg01, #24
25b0c     11 15 02 F6 | 	mov	arg02, local03
25b10     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25b14     FD 24 02 F6 | 	mov	local04, result1
25b18     07 24 4E F7 | 	zerox	local04, #7 wz
25b1c     84 00 90 5D |  if_ne	jmp	#LR__3803
25b20     0F 13 02 F6 | 	mov	arg01, local01
25b24     FE 14 06 F6 | 	mov	arg02, #254
25b28     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1080
25b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
25b30     00 20 06 56 |  if_ne	mov	local02, #0
25b34     6C 00 90 FD | 	jmp	#LR__3803
25b38                 | LR__3800
25b38     01 00 00 FF 
25b3c     21 E4 05 F1 | 	add	objptr, ##545
25b40     F2 24 C2 FA | 	rdbyte	local04, objptr
25b44     01 00 00 FF 
25b48     21 E4 85 F1 | 	sub	objptr, ##545
25b4c     06 24 CE F7 | 	test	local04, #6 wz
25b50     97 12 06 56 |  if_ne	mov	arg01, #151
25b54     10 15 02 56 |  if_ne	mov	arg02, local02
25b58     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1084
25b5c     11 15 02 F6 | 	mov	arg02, local03
25b60     19 12 06 F6 | 	mov	arg01, #25
25b64     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25b68     FD 24 02 F6 | 	mov	local04, result1
25b6c     07 24 4E F7 | 	zerox	local04, #7 wz
25b70     30 00 90 5D |  if_ne	jmp	#LR__3802
25b74                 | ' 			do {
25b74                 | LR__3801
25b74     0F 13 02 F6 | 	mov	arg01, local01
25b78     FC 14 06 F6 | 	mov	arg02, #252
25b7c     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1080
25b80     00 FA 0D F2 | 	cmp	result1, #0 wz
25b84     01 00 00 5F 
25b88     00 1E 06 51 |  if_ne	add	local01, ##512
25b8c     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3801
25b90     00 12 06 F6 | 	mov	arg01, #0
25b94     FD 14 06 F6 | 	mov	arg02, #253
25b98     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1080
25b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
25ba0     01 20 06 A6 |  if_e	mov	local02, #1
25ba4                 | LR__3802
25ba4                 | LR__3803
25ba4     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1070
25ba8                 | ' 				count = 1;
25ba8                 | ' 		}
25ba8                 | ' 	}
25ba8                 | ' 	deselect();
25ba8                 | ' 
25ba8                 | ' 	return count ? RES_ERROR : RES_OK;
25ba8     00 20 0E F2 | 	cmp	local02, #0 wz
25bac     01 24 06 56 |  if_ne	mov	local04, #1
25bb0     00 24 06 A6 |  if_e	mov	local04, #0
25bb4     12 FB 01 F6 | 	mov	result1, local04
25bb8                 | LR__3804
25bb8     A7 F0 03 F6 | 	mov	ptra, fp
25bbc     B2 00 A0 FD | 	call	#popregs_
25bc0                 | _fatfs_cc_disk_write_ret
25bc0     2D 00 64 FD | 	ret
25bc4                 | 
25bc4                 | _fatfs_cc_disk_ioctl
25bc4     01 4A 05 F6 | 	mov	COUNT_, #1
25bc8     A8 00 A0 FD | 	call	#pushregs_
25bcc     30 F0 07 F1 | 	add	ptra, #48
25bd0     04 4E 05 F1 | 	add	fp, #4
25bd4     A7 12 42 FC | 	wrbyte	arg01, fp
25bd8     04 4E 05 F1 | 	add	fp, #4
25bdc     A7 14 42 FC | 	wrbyte	arg02, fp
25be0     04 4E 05 F1 | 	add	fp, #4
25be4     A7 16 62 FC | 	wrlong	arg03, fp
25be8     08 4E 85 F1 | 	sub	fp, #8
25bec     A7 12 CA FA | 	rdbyte	arg01, fp wz
25bf0     04 4E 85 F1 | 	sub	fp, #4
25bf4     01 FA 05 56 |  if_ne	mov	result1, #1
25bf8                 | ' 
25bf8                 | ' 	return Stat;
25bf8     01 00 00 AF 
25bfc     20 E4 05 A1 |  if_e	add	objptr, ##544
25c00     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
25c04     01 00 00 AF 
25c08     20 E4 85 A1 |  if_e	sub	objptr, ##544
25c0c     FD FA E1 F8 | 	getbyte	result1, result1, #0
25c10     01 FA CD F7 | 	test	result1, #1 wz
25c14     03 FA 05 56 |  if_ne	mov	result1, #3
25c18     E4 01 90 5D |  if_ne	jmp	#LR__3818
25c1c     10 4E 05 F1 | 	add	fp, #16
25c20     A7 02 68 FC | 	wrlong	#1, fp
25c24                 | ' 
25c24                 | ' 	res = RES_ERROR;
25c24                 | ' 	switch (ctrl) {
25c24     08 4E 85 F1 | 	sub	fp, #8
25c28     A7 1E C2 FA | 	rdbyte	local01, fp
25c2c     08 4E 85 F1 | 	sub	fp, #8
25c30     04 1E 26 F3 | 	fle	local01, #4
25c34     30 1E 62 FD | 	jmprel	local01
25c38                 | LR__3810
25c38     10 00 90 FD | 	jmp	#LR__3811
25c3c     24 00 90 FD | 	jmp	#LR__3812
25c40     A0 01 90 FD | 	jmp	#LR__3816
25c44     80 01 90 FD | 	jmp	#LR__3815
25c48     98 01 90 FD | 	jmp	#LR__3816
25c4c                 | LR__3811
25c4c     B4 79 B0 FD | 	call	#_fatfs_cc_select_1074
25c50     00 FA 0D F2 | 	cmp	result1, #0 wz
25c54     10 4E 05 51 |  if_ne	add	fp, #16
25c58     A7 00 68 5C |  if_ne	wrlong	#0, fp
25c5c     10 4E 85 51 |  if_ne	sub	fp, #16
25c60                 | ' 			break;
25c60     8C 01 90 FD | 	jmp	#LR__3817
25c64                 | LR__3812
25c64     09 12 06 F6 | 	mov	arg01, #9
25c68     00 14 06 F6 | 	mov	arg02, #0
25c6c     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25c70     FD 1E 02 F6 | 	mov	local01, result1
25c74     07 1E 4E F7 | 	zerox	local01, #7 wz
25c78     74 01 90 5D |  if_ne	jmp	#LR__3817
25c7c     18 4E 05 F1 | 	add	fp, #24
25c80     A7 12 02 F6 | 	mov	arg01, fp
25c84     18 4E 85 F1 | 	sub	fp, #24
25c88     10 14 06 F6 | 	mov	arg02, #16
25c8c     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1078
25c90     00 FA 0D F2 | 	cmp	result1, #0 wz
25c94     58 01 90 AD |  if_e	jmp	#LR__3817
25c98     18 4E 05 F1 | 	add	fp, #24
25c9c     A7 1E C2 FA | 	rdbyte	local01, fp
25ca0     18 4E 85 F1 | 	sub	fp, #24
25ca4     06 1E 46 F0 | 	shr	local01, #6
25ca8     01 1E 0E F2 | 	cmp	local01, #1 wz
25cac     5C 00 90 5D |  if_ne	jmp	#LR__3813
25cb0     21 4E 05 F1 | 	add	fp, #33
25cb4     A7 1E C2 FA | 	rdbyte	local01, fp
25cb8     01 4E 85 F1 | 	sub	fp, #1
25cbc     A7 FA C1 FA | 	rdbyte	result1, fp
25cc0     FD FA 31 F9 | 	getword	result1, result1, #0
25cc4     08 FA 65 F0 | 	shl	result1, #8
25cc8     FD 1E 02 F1 | 	add	local01, result1
25ccc     01 4E 85 F1 | 	sub	fp, #1
25cd0     A7 FA C1 FA | 	rdbyte	result1, fp
25cd4     3F FA 05 F5 | 	and	result1, #63
25cd8     10 FA 65 F0 | 	shl	result1, #16
25cdc     FD 1E 02 F1 | 	add	local01, result1
25ce0     01 1E 06 F1 | 	add	local01, #1
25ce4     09 4E 05 F1 | 	add	fp, #9
25ce8     A7 1E 62 FC | 	wrlong	local01, fp
25cec     1C 4E 85 F1 | 	sub	fp, #28
25cf0     A7 1E 02 FB | 	rdlong	local01, fp
25cf4     1C 4E 05 F1 | 	add	fp, #28
25cf8     A7 FA 01 FB | 	rdlong	result1, fp
25cfc     28 4E 85 F1 | 	sub	fp, #40
25d00     0A FA 65 F0 | 	shl	result1, #10
25d04     0F FB 61 FC | 	wrlong	result1, local01
25d08     AC 00 90 FD | 	jmp	#LR__3814
25d0c                 | LR__3813
25d0c     1D 4E 05 F1 | 	add	fp, #29
25d10     A7 1E C2 FA | 	rdbyte	local01, fp
25d14     0F 1F 42 F8 | 	getnib	local01, local01, #0
25d18     05 4E 05 F1 | 	add	fp, #5
25d1c     A7 FA C1 FA | 	rdbyte	result1, fp
25d20     80 FA 05 F5 | 	and	result1, #128
25d24     07 FA C5 F0 | 	sar	result1, #7
25d28     FD 1E 02 F1 | 	add	local01, result1
25d2c     01 4E 85 F1 | 	sub	fp, #1
25d30     A7 FA C1 FA | 	rdbyte	result1, fp
25d34     03 FA 05 F5 | 	and	result1, #3
25d38     01 FA 65 F0 | 	shl	result1, #1
25d3c     FD 1E 02 F1 | 	add	local01, result1
25d40     02 1E 06 F1 | 	add	local01, #2
25d44     0D 4E 85 F1 | 	sub	fp, #13
25d48     A7 1E 42 FC | 	wrbyte	local01, fp
25d4c     0C 4E 05 F1 | 	add	fp, #12
25d50     A7 1E C2 FA | 	rdbyte	local01, fp
25d54     06 1E 46 F0 | 	shr	local01, #6
25d58     01 4E 85 F1 | 	sub	fp, #1
25d5c     A7 FA C1 FA | 	rdbyte	result1, fp
25d60     FD FA 31 F9 | 	getword	result1, result1, #0
25d64     02 FA 65 F0 | 	shl	result1, #2
25d68     FD 1E 02 F1 | 	add	local01, result1
25d6c     01 4E 85 F1 | 	sub	fp, #1
25d70     A7 FA C1 FA | 	rdbyte	result1, fp
25d74     03 FA 05 F5 | 	and	result1, #3
25d78     FD FA 31 F9 | 	getword	result1, result1, #0
25d7c     0A FA 65 F0 | 	shl	result1, #10
25d80     FD 1E 02 F1 | 	add	local01, result1
25d84     01 1E 06 F1 | 	add	local01, #1
25d88     0A 4E 05 F1 | 	add	fp, #10
25d8c     A7 1E 62 FC | 	wrlong	local01, fp
25d90     1C 4E 85 F1 | 	sub	fp, #28
25d94     A7 1E 02 FB | 	rdlong	local01, fp
25d98     1C 4E 05 F1 | 	add	fp, #28
25d9c     A7 FA 01 FB | 	rdlong	result1, fp
25da0     14 4E 85 F1 | 	sub	fp, #20
25da4     A7 16 C2 FA | 	rdbyte	arg03, fp
25da8     14 4E 85 F1 | 	sub	fp, #20
25dac     09 16 86 F1 | 	sub	arg03, #9
25db0     0B FB 61 F0 | 	shl	result1, arg03
25db4     0F FB 61 FC | 	wrlong	result1, local01
25db8                 | LR__3814
25db8     10 4E 05 F1 | 	add	fp, #16
25dbc     A7 00 68 FC | 	wrlong	#0, fp
25dc0     10 4E 85 F1 | 	sub	fp, #16
25dc4                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
25dc4                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
25dc4                 | ' 					*(LBA_t*)buff = cs << (n - 9);
25dc4                 | ' 				}
25dc4                 | ' 				res = RES_OK;
25dc4                 | ' 			}
25dc4                 | ' 			break;
25dc4     28 00 90 FD | 	jmp	#LR__3817
25dc8                 | LR__3815
25dc8     0C 4E 05 F1 | 	add	fp, #12
25dcc     A7 1E 02 FB | 	rdlong	local01, fp
25dd0     0F 01 69 FC | 	wrlong	#128, local01
25dd4     04 4E 05 F1 | 	add	fp, #4
25dd8     A7 00 68 FC | 	wrlong	#0, fp
25ddc     10 4E 85 F1 | 	sub	fp, #16
25de0                 | ' 			*(DWORD*)buff = 128;
25de0                 | ' 			res = RES_OK;
25de0                 | ' 			break;
25de0     0C 00 90 FD | 	jmp	#LR__3817
25de4                 | LR__3816
25de4     10 4E 05 F1 | 	add	fp, #16
25de8     A7 08 68 FC | 	wrlong	#4, fp
25dec     10 4E 85 F1 | 	sub	fp, #16
25df0                 | LR__3817
25df0     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1070
25df4                 | ' 			res = RES_PARERR;
25df4                 | ' 	}
25df4                 | ' 
25df4                 | ' 	deselect();
25df4                 | ' 
25df4                 | ' 	return res;
25df4     10 4E 05 F1 | 	add	fp, #16
25df8     A7 FA 01 FB | 	rdlong	result1, fp
25dfc     10 4E 85 F1 | 	sub	fp, #16
25e00                 | LR__3818
25e00     A7 F0 03 F6 | 	mov	ptra, fp
25e04     B2 00 A0 FD | 	call	#popregs_
25e08                 | _fatfs_cc_disk_ioctl_ret
25e08     2D 00 64 FD | 	ret
25e0c                 | 
25e0c                 | _fatfs_cc_disk_setpins
25e0c     00 12 0E F2 | 	cmp	arg01, #0 wz
25e10     01 FA 65 56 |  if_ne	neg	result1, #1
25e14     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
25e18     01 00 00 FF 
25e1c     10 E4 05 F1 | 	add	objptr, ##528
25e20     F2 14 62 FC | 	wrlong	arg02, objptr
25e24     04 E4 05 F1 | 	add	objptr, #4
25e28     F2 16 62 FC | 	wrlong	arg03, objptr
25e2c     04 E4 05 F1 | 	add	objptr, #4
25e30     F2 18 62 FC | 	wrlong	arg04, objptr
25e34     04 E4 05 F1 | 	add	objptr, #4
25e38     F2 1A 62 FC | 	wrlong	arg05, objptr
25e3c     01 00 00 FF 
25e40     1C E4 85 F1 | 	sub	objptr, ##540
25e44     00 FA 05 F6 | 	mov	result1, #0
25e48                 | _fatfs_cc_disk_setpins_ret
25e48     2D 00 64 FD | 	ret
25e4c                 | 
25e4c                 | _fatfs_cc_tchar2uni
25e4c     09 01 02 FB | 	rdlong	_var01, arg01
25e50     00 03 02 F6 | 	mov	_var02, _var01
25e54     01 00 06 F1 | 	add	_var01, #1
25e58     00 05 02 F6 | 	mov	_var03, _var01
25e5c     01 07 C2 FA | 	rdbyte	_var04, _var02
25e60     80 06 CE F7 | 	test	_var04, #128 wz
25e64     E8 00 90 AD |  if_e	jmp	#LR__3827
25e68     03 09 02 F6 | 	mov	_var05, _var04
25e6c     E0 08 06 F5 | 	and	_var05, #224
25e70     C0 08 0E F2 | 	cmp	_var05, #192 wz
25e74     1F 06 06 A5 |  if_e	and	_var04, #31
25e78     01 0A 06 A6 |  if_e	mov	_var06, #1
25e7c     34 00 90 AD |  if_e	jmp	#LR__3821
25e80     03 09 02 F6 | 	mov	_var05, _var04
25e84     F0 08 06 F5 | 	and	_var05, #240
25e88     E0 08 0E F2 | 	cmp	_var05, #224 wz
25e8c     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
25e90     02 0A 06 A6 |  if_e	mov	_var06, #2
25e94     1C 00 90 AD |  if_e	jmp	#LR__3820
25e98     03 09 02 F6 | 	mov	_var05, _var04
25e9c     F8 08 06 F5 | 	and	_var05, #248
25ea0     F0 08 0E F2 | 	cmp	_var05, #240 wz
25ea4     07 06 06 A5 |  if_e	and	_var04, #7
25ea8     03 0A 06 A6 |  if_e	mov	_var06, #3
25eac                 | ' 			return 0xFFFFFFFF;
25eac     01 FA 65 56 |  if_ne	neg	result1, #1
25eb0     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
25eb4                 | LR__3820
25eb4                 | LR__3821
25eb4                 | ' 		}
25eb4                 | ' 		do {
25eb4                 | LR__3822
25eb4     02 0D C2 FA | 	rdbyte	_var07, _var03
25eb8     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
25ebc     C0 08 06 F5 | 	and	_var05, #192
25ec0     80 08 0E F2 | 	cmp	_var05, #128 wz
25ec4     01 04 06 F1 | 	add	_var03, #1
25ec8     01 FA 65 56 |  if_ne	neg	result1, #1
25ecc     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
25ed0     06 06 66 F0 | 	shl	_var04, #6
25ed4     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
25ed8     3F 02 06 F5 | 	and	_var02, #63
25edc     01 07 42 F5 | 	or	_var04, _var02
25ee0     F4 0B 6E FB | 	djnz	_var06, #LR__3822
25ee4     80 06 16 F2 | 	cmp	_var04, #128 wc
25ee8     24 00 90 CD |  if_b	jmp	#LR__3824
25eec     6C 00 00 FF 
25ef0     00 06 16 F2 | 	cmp	_var04, ##55296 wc
25ef4     0C 00 90 CD |  if_b	jmp	#LR__3823
25ef8     70 00 00 FF 
25efc     00 06 16 F2 | 	cmp	_var04, ##57344 wc
25f00     0C 00 90 CD |  if_b	jmp	#LR__3824
25f04                 | LR__3823
25f04     80 08 00 FF 
25f08     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
25f0c     08 00 90 CD |  if_b	jmp	#LR__3825
25f10                 | LR__3824
25f10     01 FA 65 F6 | 	neg	result1, #1
25f14     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
25f18                 | LR__3825
25f18     80 00 00 FF 
25f1c     00 06 16 F2 | 	cmp	_var04, ##65536 wc
25f20     2C 00 90 CD |  if_b	jmp	#LR__3826
25f24     03 03 02 F6 | 	mov	_var02, _var04
25f28     80 00 00 FF 
25f2c     00 02 86 F1 | 	sub	_var02, ##65536
25f30     06 02 66 F0 | 	shl	_var02, #6
25f34     80 FF 01 FF 
25f38     00 02 06 F5 | 	and	_var02, ##67043328
25f3c     6E 00 6C FF 
25f40     00 08 06 F6 | 	mov	_var05, ##-671032320
25f44     01 09 42 F5 | 	or	_var05, _var02
25f48     09 06 46 F7 | 	zerox	_var04, #9
25f4c     04 07 42 F5 | 	or	_var04, _var05
25f50                 | LR__3826
25f50                 | LR__3827
25f50     09 05 62 FC | 	wrlong	_var03, arg01
25f54                 | ' 	}
25f54                 | ' #line 811 "ff.c"
25f54                 | ' 	*str = p;
25f54                 | ' 	return uc;
25f54     03 FB 01 F6 | 	mov	result1, _var04
25f58                 | _fatfs_cc_tchar2uni_ret
25f58     2D 00 64 FD | 	ret
25f5c                 | 
25f5c                 | _fatfs_cc_put_utf
25f5c     80 12 16 F2 | 	cmp	arg01, #128 wc
25f60     18 00 90 3D |  if_ae	jmp	#LR__3830
25f64     01 16 16 F2 | 	cmp	arg03, #1 wc
25f68     00 FA 05 C6 |  if_b	mov	result1, #0
25f6c     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
25f70     0A 13 42 FC | 	wrbyte	arg01, arg02
25f74                 | ' 		*buf = (TCHAR)chr;
25f74                 | ' 		return 1;
25f74     01 FA 05 F6 | 	mov	result1, #1
25f78     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
25f7c                 | LR__3830
25f7c     04 00 00 FF 
25f80     00 12 16 F2 | 	cmp	arg01, ##2048 wc
25f84     40 00 90 3D |  if_ae	jmp	#LR__3831
25f88     02 16 16 F2 | 	cmp	arg03, #2 wc
25f8c     00 FA 05 C6 |  if_b	mov	result1, #0
25f90     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
25f94     09 FB 01 F6 | 	mov	result1, arg01
25f98     06 FA 45 F0 | 	shr	result1, #6
25f9c     1F FA 05 F5 | 	and	result1, #31
25fa0     C0 16 06 F6 | 	mov	arg03, #192
25fa4     FD 16 42 F5 | 	or	arg03, result1
25fa8     0A 17 42 FC | 	wrbyte	arg03, arg02
25fac     01 14 06 F1 | 	add	arg02, #1
25fb0     3F 12 06 F5 | 	and	arg01, #63
25fb4     80 FA 05 F6 | 	mov	result1, #128
25fb8     09 FB 41 F5 | 	or	result1, arg01
25fbc     0A FB 41 FC | 	wrbyte	result1, arg02
25fc0                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
25fc0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
25fc0                 | ' 		return 2;
25fc0     02 FA 05 F6 | 	mov	result1, #2
25fc4     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
25fc8                 | LR__3831
25fc8     80 00 00 FF 
25fcc     00 12 16 F2 | 	cmp	arg01, ##65536 wc
25fd0     70 00 90 3D |  if_ae	jmp	#LR__3834
25fd4     03 16 16 F2 | 	cmp	arg03, #3 wc
25fd8     18 00 90 CD |  if_b	jmp	#LR__3832
25fdc     6C 00 00 FF 
25fe0     00 12 16 F2 | 	cmp	arg01, ##55296 wc
25fe4     14 00 90 CD |  if_b	jmp	#LR__3833
25fe8     70 00 00 FF 
25fec     00 12 16 F2 | 	cmp	arg01, ##57344 wc
25ff0     08 00 90 3D |  if_ae	jmp	#LR__3833
25ff4                 | LR__3832
25ff4     00 FA 05 F6 | 	mov	result1, #0
25ff8     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
25ffc                 | LR__3833
25ffc     09 FB 59 F8 | 	getnib	result1, arg01, #3
26000     E0 16 06 F6 | 	mov	arg03, #224
26004     FD 16 42 F5 | 	or	arg03, result1
26008     0A 17 42 FC | 	wrbyte	arg03, arg02
2600c     01 14 06 F1 | 	add	arg02, #1
26010     09 FB 01 F6 | 	mov	result1, arg01
26014     06 FA 45 F0 | 	shr	result1, #6
26018     3F FA 05 F5 | 	and	result1, #63
2601c     80 16 06 F6 | 	mov	arg03, #128
26020     FD 16 42 F5 | 	or	arg03, result1
26024     0A 17 42 FC | 	wrbyte	arg03, arg02
26028     01 14 06 F1 | 	add	arg02, #1
2602c     3F 12 06 F5 | 	and	arg01, #63
26030     80 FA 05 F6 | 	mov	result1, #128
26034     09 FB 41 F5 | 	or	result1, arg01
26038     0A FB 41 FC | 	wrbyte	result1, arg02
2603c                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2603c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2603c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2603c                 | ' 		return 3;
2603c     03 FA 05 F6 | 	mov	result1, #3
26040     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
26044                 | LR__3834
26044     04 16 16 F2 | 	cmp	arg03, #4 wc
26048     00 FA 05 C6 |  if_b	mov	result1, #0
2604c     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
26050     09 01 02 F6 | 	mov	_var01, arg01
26054     E0 01 06 F4 | 	bitl	_var01, #480
26058     00 00 6C FF 
2605c     00 00 86 F1 | 	sub	_var01, ##-671088640
26060     06 00 46 F0 | 	shr	_var01, #6
26064     09 13 32 F9 | 	getword	arg01, arg01, #0
26068     6E 00 00 FF 
2606c     00 12 86 F1 | 	sub	arg01, ##56320
26070     00 08 00 FF 
26074     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
26078     02 00 00 CF 
2607c     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
26080     00 FA 05 36 |  if_ae	mov	result1, #0
26084     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
26088     09 01 42 F5 | 	or	_var01, arg01
2608c     80 00 00 FF 
26090     00 00 06 F1 | 	add	_var01, ##65536
26094     00 FB 01 F6 | 	mov	result1, _var01
26098     12 FA 45 F0 | 	shr	result1, #18
2609c     07 FA 05 F5 | 	and	result1, #7
260a0     F0 16 06 F6 | 	mov	arg03, #240
260a4     FD 16 42 F5 | 	or	arg03, result1
260a8     0A 17 42 FC | 	wrbyte	arg03, arg02
260ac     01 14 06 F1 | 	add	arg02, #1
260b0     00 FB 01 F6 | 	mov	result1, _var01
260b4     0C FA 45 F0 | 	shr	result1, #12
260b8     3F FA 05 F5 | 	and	result1, #63
260bc     80 16 06 F6 | 	mov	arg03, #128
260c0     FD 16 42 F5 | 	or	arg03, result1
260c4     0A 17 42 FC | 	wrbyte	arg03, arg02
260c8     01 14 06 F1 | 	add	arg02, #1
260cc     00 FB 01 F6 | 	mov	result1, _var01
260d0     06 FA 45 F0 | 	shr	result1, #6
260d4     3F FA 05 F5 | 	and	result1, #63
260d8     80 16 06 F6 | 	mov	arg03, #128
260dc     FD 16 42 F5 | 	or	arg03, result1
260e0     0A 17 42 FC | 	wrbyte	arg03, arg02
260e4     01 14 06 F1 | 	add	arg02, #1
260e8     3F 00 06 F5 | 	and	_var01, #63
260ec     80 FA 05 F6 | 	mov	result1, #128
260f0     00 FB 41 F5 | 	or	result1, _var01
260f4     0A FB 41 FC | 	wrbyte	result1, arg02
260f8                 | ' 	chr = (hc | chr) + 0x10000;
260f8                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
260f8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
260f8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
260f8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
260f8                 | ' 	return 4;
260f8     04 FA 05 F6 | 	mov	result1, #4
260fc                 | _fatfs_cc_put_utf_ret
260fc     2D 00 64 FD | 	ret
26100                 | 
26100                 | _fatfs_cc_sync_window
26100     02 4A 05 F6 | 	mov	COUNT_, #2
26104     A8 00 A0 FD | 	call	#pushregs_
26108     09 1F 02 F6 | 	mov	local01, arg01
2610c     00 20 06 F6 | 	mov	local02, #0
26110     03 1E 06 F1 | 	add	local01, #3
26114     0F FB C9 FA | 	rdbyte	result1, local01 wz
26118     03 1E 86 F1 | 	sub	local01, #3
2611c     A4 00 90 AD |  if_e	jmp	#LR__3842
26120     01 1E 06 F1 | 	add	local01, #1
26124     0F 13 C2 FA | 	rdbyte	arg01, local01
26128     33 1E 06 F1 | 	add	local01, #51
2612c     0F 15 02 F6 | 	mov	arg02, local01
26130     04 1E 86 F1 | 	sub	local01, #4
26134     0F 17 02 FB | 	rdlong	arg03, local01
26138     30 1E 86 F1 | 	sub	local01, #48
2613c     01 18 06 F6 | 	mov	arg04, #1
26140     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
26144     00 FA 0D F2 | 	cmp	result1, #0 wz
26148     74 00 90 5D |  if_ne	jmp	#LR__3840
2614c     03 1E 06 F1 | 	add	local01, #3
26150     0F 01 48 FC | 	wrbyte	#0, local01
26154     2D 1E 06 F1 | 	add	local01, #45
26158     0F FB 01 FB | 	rdlong	result1, local01
2615c     0C 1E 86 F1 | 	sub	local01, #12
26160     0F 19 02 FB | 	rdlong	arg04, local01
26164     0C FB 81 F1 | 	sub	result1, arg04
26168     08 1E 86 F1 | 	sub	local01, #8
2616c     0F 19 02 FB | 	rdlong	arg04, local01
26170     1C 1E 86 F1 | 	sub	local01, #28
26174     0C FB 11 F2 | 	cmp	result1, arg04 wc
26178     48 00 90 3D |  if_ae	jmp	#LR__3841
2617c     02 1E 06 F1 | 	add	local01, #2
26180     0F 19 C2 FA | 	rdbyte	arg04, local01
26184     02 1E 86 F1 | 	sub	local01, #2
26188     02 18 0E F2 | 	cmp	arg04, #2 wz
2618c     34 00 90 5D |  if_ne	jmp	#LR__3841
26190     01 1E 06 F1 | 	add	local01, #1
26194     0F 13 C2 FA | 	rdbyte	arg01, local01
26198     33 1E 06 F1 | 	add	local01, #51
2619c     0F 15 02 F6 | 	mov	arg02, local01
261a0     04 1E 86 F1 | 	sub	local01, #4
261a4     0F 17 02 FB | 	rdlong	arg03, local01
261a8     14 1E 86 F1 | 	sub	local01, #20
261ac     0F 1F 02 FB | 	rdlong	local01, local01
261b0     0F 17 02 F1 | 	add	arg03, local01
261b4     01 18 06 F6 | 	mov	arg04, #1
261b8     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
261bc     04 00 90 FD | 	jmp	#LR__3841
261c0                 | LR__3840
261c0     01 20 06 F6 | 	mov	local02, #1
261c4                 | LR__3841
261c4                 | LR__3842
261c4                 | ' 			res = FR_DISK_ERR;
261c4                 | ' 		}
261c4                 | ' 	}
261c4                 | ' 	return res;
261c4     10 FB 01 F6 | 	mov	result1, local02
261c8     A7 F0 03 F6 | 	mov	ptra, fp
261cc     B2 00 A0 FD | 	call	#popregs_
261d0                 | _fatfs_cc_sync_window_ret
261d0     2D 00 64 FD | 	ret
261d4                 | 
261d4                 | _fatfs_cc_move_window
261d4     03 4A 05 F6 | 	mov	COUNT_, #3
261d8     A8 00 A0 FD | 	call	#pushregs_
261dc     09 1F 02 F6 | 	mov	local01, arg01
261e0     0A 21 02 F6 | 	mov	local02, arg02
261e4     00 22 06 F6 | 	mov	local03, #0
261e8     30 1E 06 F1 | 	add	local01, #48
261ec     0F 19 02 FB | 	rdlong	arg04, local01
261f0     30 1E 86 F1 | 	sub	local01, #48
261f4     0C 21 0A F2 | 	cmp	local02, arg04 wz
261f8     40 00 90 AD |  if_e	jmp	#LR__3851
261fc     0F 13 02 F6 | 	mov	arg01, local01
26200     FC FE BF FD | 	call	#_fatfs_cc_sync_window
26204     FD 22 0A F6 | 	mov	local03, result1 wz
26208     30 00 90 5D |  if_ne	jmp	#LR__3850
2620c     01 1E 06 F1 | 	add	local01, #1
26210     0F 13 C2 FA | 	rdbyte	arg01, local01
26214     33 1E 06 F1 | 	add	local01, #51
26218     0F 15 02 F6 | 	mov	arg02, local01
2621c     10 17 02 F6 | 	mov	arg03, local02
26220     01 18 06 F6 | 	mov	arg04, #1
26224     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
26228     00 FA 0D F2 | 	cmp	result1, #0 wz
2622c     01 20 66 56 |  if_ne	neg	local02, #1
26230     01 22 06 56 |  if_ne	mov	local03, #1
26234     04 1E 86 F1 | 	sub	local01, #4
26238     0F 21 62 FC | 	wrlong	local02, local01
2623c                 | LR__3850
2623c                 | LR__3851
2623c                 | ' 				sect = (LBA_t)0 - 1;
2623c                 | ' 				res = FR_DISK_ERR;
2623c                 | ' 			}
2623c                 | ' 			fs->winsect = sect;
2623c                 | ' 		}
2623c                 | ' 	}
2623c                 | ' 	return res;
2623c     11 FB 01 F6 | 	mov	result1, local03
26240     A7 F0 03 F6 | 	mov	ptra, fp
26244     B2 00 A0 FD | 	call	#popregs_
26248                 | _fatfs_cc_move_window_ret
26248     2D 00 64 FD | 	ret
2624c                 | 
2624c                 | _fatfs_cc_sync_fs
2624c     02 4A 05 F6 | 	mov	COUNT_, #2
26250     A8 00 A0 FD | 	call	#pushregs_
26254     09 1F 02 F6 | 	mov	local01, arg01
26258     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2625c     FD 20 0A F6 | 	mov	local02, result1 wz
26260     D8 00 90 5D |  if_ne	jmp	#LR__3861
26264     0F 19 C2 FA | 	rdbyte	arg04, local01
26268     03 18 0E F2 | 	cmp	arg04, #3 wz
2626c     04 1E 06 A1 |  if_e	add	local01, #4
26270     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
26274     04 1E 86 A1 |  if_e	sub	local01, #4
26278     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2627c     A0 00 90 5D |  if_ne	jmp	#LR__3860
26280     34 1E 06 F1 | 	add	local01, #52
26284     0F 13 02 F6 | 	mov	arg01, local01
26288     00 14 06 F6 | 	mov	arg02, #0
2628c     09 16 C6 F9 | 	decod	arg03, #9
26290     98 00 A0 FD | 	call	#\builtin_bytefill_
26294     0F 13 02 F6 | 	mov	arg01, local01
26298     FE 13 06 F1 | 	add	arg01, #510
2629c     55 00 80 FF 
262a0     09 AB 58 FC | 	wrword	##43605, arg01
262a4     A9 B0 A0 FF 
262a8     0F A5 68 FC | 	wrlong	##1096897106, local01
262ac     0F 13 02 F6 | 	mov	arg01, local01
262b0     E4 13 06 F1 | 	add	arg01, #484
262b4     B9 A0 B0 FF 
262b8     09 E5 68 FC | 	wrlong	##1631679090, arg01
262bc     0F 13 02 F6 | 	mov	arg01, local01
262c0     E8 13 06 F1 | 	add	arg01, #488
262c4     20 1E 86 F1 | 	sub	local01, #32
262c8     0F 15 02 FB | 	rdlong	arg02, local01
262cc     09 15 62 FC | 	wrlong	arg02, arg01
262d0     20 1E 06 F1 | 	add	local01, #32
262d4     0F 13 02 F6 | 	mov	arg01, local01
262d8     EC 13 06 F1 | 	add	arg01, #492
262dc     24 1E 86 F1 | 	sub	local01, #36
262e0     0F 15 02 FB | 	rdlong	arg02, local01
262e4     09 15 62 FC | 	wrlong	arg02, arg01
262e8     10 1E 06 F1 | 	add	local01, #16
262ec     0F 17 02 FB | 	rdlong	arg03, local01
262f0     01 16 06 F1 | 	add	arg03, #1
262f4     10 1E 06 F1 | 	add	local01, #16
262f8     0F 17 62 FC | 	wrlong	arg03, local01
262fc     2F 1E 86 F1 | 	sub	local01, #47
26300     0F 13 C2 FA | 	rdbyte	arg01, local01
26304     33 1E 06 F1 | 	add	local01, #51
26308     0F 15 02 F6 | 	mov	arg02, local01
2630c     01 18 06 F6 | 	mov	arg04, #1
26310     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
26314     30 1E 86 F1 | 	sub	local01, #48
26318     0F 01 48 FC | 	wrbyte	#0, local01
2631c     04 1E 86 F1 | 	sub	local01, #4
26320                 | LR__3860
26320     01 1E 06 F1 | 	add	local01, #1
26324     0F 13 C2 FA | 	rdbyte	arg01, local01
26328     00 14 06 F6 | 	mov	arg02, #0
2632c     00 16 06 F6 | 	mov	arg03, #0
26330     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
26334     00 FA 0D F2 | 	cmp	result1, #0 wz
26338     01 20 06 56 |  if_ne	mov	local02, #1
2633c                 | LR__3861
2633c                 | ' 	}
2633c                 | ' 
2633c                 | ' 	return res;
2633c     10 FB 01 F6 | 	mov	result1, local02
26340     A7 F0 03 F6 | 	mov	ptra, fp
26344     B2 00 A0 FD | 	call	#popregs_
26348                 | _fatfs_cc_sync_fs_ret
26348     2D 00 64 FD | 	ret
2634c                 | 
2634c                 | _fatfs_cc_clst2sect
2634c     02 14 86 F1 | 	sub	arg02, #2
26350     18 12 06 F1 | 	add	arg01, #24
26354     09 01 02 FB | 	rdlong	_var01, arg01
26358     18 12 86 F1 | 	sub	arg01, #24
2635c     02 00 86 F1 | 	sub	_var01, #2
26360     00 15 12 F2 | 	cmp	arg02, _var01 wc
26364     00 FA 05 36 |  if_ae	mov	result1, #0
26368     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2636c     0A 12 06 F1 | 	add	arg01, #10
26370     09 01 E2 FA | 	rdword	_var01, arg01
26374     0A 01 02 FD | 	qmul	_var01, arg02
26378                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
26378     22 12 06 F1 | 	add	arg01, #34
2637c     09 FB 01 FB | 	rdlong	result1, arg01
26380     18 00 62 FD | 	getqx	_var01
26384     00 FB 01 F1 | 	add	result1, _var01
26388                 | _fatfs_cc_clst2sect_ret
26388     2D 00 64 FD | 	ret
2638c                 | 
2638c                 | _fatfs_cc_get_fat
2638c     07 4A 05 F6 | 	mov	COUNT_, #7
26390     A8 00 A0 FD | 	call	#pushregs_
26394     0A 1F 02 F6 | 	mov	local01, arg02
26398     09 21 02 FB | 	rdlong	local02, arg01
2639c     02 1E 16 F2 | 	cmp	local01, #2 wc
263a0     14 00 90 CD |  if_b	jmp	#LR__3870
263a4     18 20 06 F1 | 	add	local02, #24
263a8     10 23 02 FB | 	rdlong	local03, local02
263ac     18 20 86 F1 | 	sub	local02, #24
263b0     11 1F 12 F2 | 	cmp	local01, local03 wc
263b4     08 00 90 CD |  if_b	jmp	#LR__3871
263b8                 | LR__3870
263b8     01 24 06 F6 | 	mov	local04, #1
263bc     60 01 90 FD | 	jmp	#LR__3878
263c0                 | LR__3871
263c0     01 24 66 F6 | 	neg	local04, #1
263c4                 | ' 		val = 0xFFFFFFFF;
263c4                 | ' 
263c4                 | ' 		switch (fs->fs_type) {
263c4     10 27 C2 FA | 	rdbyte	local05, local02
263c8     01 26 86 F1 | 	sub	local05, #1
263cc     03 26 26 F3 | 	fle	local05, #3
263d0     30 26 62 FD | 	jmprel	local05
263d4                 | LR__3872
263d4     0C 00 90 FD | 	jmp	#LR__3873
263d8     B8 00 90 FD | 	jmp	#LR__3874
263dc     F8 00 90 FD | 	jmp	#LR__3875
263e0     38 01 90 FD | 	jmp	#LR__3876
263e4                 | LR__3873
263e4     0F 27 02 F6 | 	mov	local05, local01
263e8     0F 13 02 F6 | 	mov	arg01, local01
263ec     01 12 46 F0 | 	shr	arg01, #1
263f0     09 27 02 F1 | 	add	local05, arg01
263f4     10 13 02 F6 | 	mov	arg01, local02
263f8     13 29 02 F6 | 	mov	local06, local05
263fc     09 28 46 F0 | 	shr	local06, #9
26400     24 20 06 F1 | 	add	local02, #36
26404     10 15 02 FB | 	rdlong	arg02, local02
26408     24 20 86 F1 | 	sub	local02, #36
2640c     14 15 02 F1 | 	add	arg02, local06
26410     C0 FD BF FD | 	call	#_fatfs_cc_move_window
26414     00 FA 0D F2 | 	cmp	result1, #0 wz
26418     04 01 90 5D |  if_ne	jmp	#LR__3877
2641c     13 29 02 F6 | 	mov	local06, local05
26420     FF 29 06 F5 | 	and	local06, #511
26424     34 20 06 F1 | 	add	local02, #52
26428     10 29 02 F1 | 	add	local06, local02
2642c     14 2B C2 FA | 	rdbyte	local07, local06
26430     34 20 86 F1 | 	sub	local02, #52
26434     10 13 02 F6 | 	mov	arg01, local02
26438     01 26 06 F1 | 	add	local05, #1
2643c     13 29 02 F6 | 	mov	local06, local05
26440     09 28 46 F0 | 	shr	local06, #9
26444     24 20 06 F1 | 	add	local02, #36
26448     10 15 02 FB | 	rdlong	arg02, local02
2644c     24 20 86 F1 | 	sub	local02, #36
26450     14 15 02 F1 | 	add	arg02, local06
26454     7C FD BF FD | 	call	#_fatfs_cc_move_window
26458     00 FA 0D F2 | 	cmp	result1, #0 wz
2645c     C0 00 90 5D |  if_ne	jmp	#LR__3877
26460     FF 27 06 F5 | 	and	local05, #511
26464     34 20 06 F1 | 	add	local02, #52
26468     10 27 02 F1 | 	add	local05, local02
2646c     13 29 C2 FA | 	rdbyte	local06, local05
26470     08 28 66 F0 | 	shl	local06, #8
26474     14 2B 42 F5 | 	or	local07, local06
26478     01 1E CE F7 | 	test	local01, #1 wz
2647c     04 2A 46 50 |  if_ne	shr	local07, #4
26480     15 23 02 56 |  if_ne	mov	local03, local07
26484     0B 2A 46 A7 |  if_e	zerox	local07, #11
26488     15 23 02 A6 |  if_e	mov	local03, local07
2648c     11 25 02 F6 | 	mov	local04, local03
26490                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
26490                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
26490                 | ' 			break;
26490     8C 00 90 FD | 	jmp	#LR__3877
26494                 | LR__3874
26494     10 13 02 F6 | 	mov	arg01, local02
26498     0F 29 02 F6 | 	mov	local06, local01
2649c     08 28 46 F0 | 	shr	local06, #8
264a0     24 20 06 F1 | 	add	local02, #36
264a4     10 15 02 FB | 	rdlong	arg02, local02
264a8     24 20 86 F1 | 	sub	local02, #36
264ac     14 15 02 F1 | 	add	arg02, local06
264b0     20 FD BF FD | 	call	#_fatfs_cc_move_window
264b4     00 FA 0D F2 | 	cmp	result1, #0 wz
264b8     64 00 90 5D |  if_ne	jmp	#LR__3877
264bc     34 20 06 F1 | 	add	local02, #52
264c0     01 1E 66 F0 | 	shl	local01, #1
264c4     FF 1F 06 F5 | 	and	local01, #511
264c8     0F 21 02 F1 | 	add	local02, local01
264cc                 | ' {
264cc                 | ' 
264cc                 | ' 	return *((WORD*)ptr);
264cc     10 FB E1 FA | 	rdword	result1, local02
264d0     FD 24 32 F9 | 	getword	local04, result1, #0
264d4                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
264d4                 | ' 			break;
264d4     48 00 90 FD | 	jmp	#LR__3877
264d8                 | LR__3875
264d8     10 13 02 F6 | 	mov	arg01, local02
264dc     0F 29 02 F6 | 	mov	local06, local01
264e0     07 28 46 F0 | 	shr	local06, #7
264e4     24 20 06 F1 | 	add	local02, #36
264e8     10 15 02 FB | 	rdlong	arg02, local02
264ec     24 20 86 F1 | 	sub	local02, #36
264f0     14 15 02 F1 | 	add	arg02, local06
264f4     DC FC BF FD | 	call	#_fatfs_cc_move_window
264f8     00 FA 0D F2 | 	cmp	result1, #0 wz
264fc     20 00 90 5D |  if_ne	jmp	#LR__3877
26500     34 20 06 F1 | 	add	local02, #52
26504     02 1E 66 F0 | 	shl	local01, #2
26508     FF 1F 06 F5 | 	and	local01, #511
2650c     0F 21 02 F1 | 	add	local02, local01
26510                 | ' {
26510                 | ' 
26510                 | ' 	return *((DWORD*)ptr);
26510     10 25 02 FB | 	rdlong	local04, local02
26514     7C 24 06 F4 | 	bitl	local04, #124
26518                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
26518                 | ' 			break;
26518     04 00 90 FD | 	jmp	#LR__3877
2651c                 | LR__3876
2651c     01 24 06 F6 | 	mov	local04, #1
26520                 | LR__3877
26520                 | LR__3878
26520                 | ' 			val = 1;
26520                 | ' 		}
26520                 | ' 	}
26520                 | ' 
26520                 | ' 	return val;
26520     12 FB 01 F6 | 	mov	result1, local04
26524     A7 F0 03 F6 | 	mov	ptra, fp
26528     B2 00 A0 FD | 	call	#popregs_
2652c                 | _fatfs_cc_get_fat_ret
2652c     2D 00 64 FD | 	ret
26530                 | 
26530                 | _fatfs_cc_put_fat
26530     08 4A 05 F6 | 	mov	COUNT_, #8
26534     A8 00 A0 FD | 	call	#pushregs_
26538     09 1F 02 F6 | 	mov	local01, arg01
2653c     0A 21 02 F6 | 	mov	local02, arg02
26540     0B 23 02 F6 | 	mov	local03, arg03
26544     02 24 06 F6 | 	mov	local04, #2
26548     02 20 16 F2 | 	cmp	local02, #2 wc
2654c     E0 01 90 CD |  if_b	jmp	#LR__3887
26550     18 1E 06 F1 | 	add	local01, #24
26554     0F 27 02 FB | 	rdlong	local05, local01
26558     18 1E 86 F1 | 	sub	local01, #24
2655c     13 21 12 F2 | 	cmp	local02, local05 wc
26560     CC 01 90 3D |  if_ae	jmp	#LR__3887
26564                 | ' 		switch (fs->fs_type) {
26564     0F 29 C2 FA | 	rdbyte	local06, local01
26568     01 28 86 F1 | 	sub	local06, #1
2656c     03 28 26 F3 | 	fle	local06, #3
26570     30 28 62 FD | 	jmprel	local06
26574                 | LR__3880
26574     0C 00 90 FD | 	jmp	#LR__3881
26578     F8 00 90 FD | 	jmp	#LR__3884
2657c     40 01 90 FD | 	jmp	#LR__3885
26580     AC 01 90 FD | 	jmp	#LR__3886
26584                 | LR__3881
26584     10 2B 02 F6 | 	mov	local07, local02
26588     10 27 02 F6 | 	mov	local05, local02
2658c     01 26 46 F0 | 	shr	local05, #1
26590     13 2B 02 F1 | 	add	local07, local05
26594     0F 13 02 F6 | 	mov	arg01, local01
26598     15 29 02 F6 | 	mov	local06, local07
2659c     09 28 46 F0 | 	shr	local06, #9
265a0     24 1E 06 F1 | 	add	local01, #36
265a4     0F 15 02 FB | 	rdlong	arg02, local01
265a8     24 1E 86 F1 | 	sub	local01, #36
265ac     14 15 02 F1 | 	add	arg02, local06
265b0     20 FC BF FD | 	call	#_fatfs_cc_move_window
265b4     FD 24 0A F6 | 	mov	local04, result1 wz
265b8     74 01 90 5D |  if_ne	jmp	#LR__3886
265bc     34 1E 06 F1 | 	add	local01, #52
265c0     0F 2D 02 F6 | 	mov	local08, local01
265c4     15 27 02 F6 | 	mov	local05, local07
265c8     FF 27 06 F5 | 	and	local05, #511
265cc     13 2D 02 F1 | 	add	local08, local05
265d0     01 20 CE F7 | 	test	local02, #1 wz
265d4     34 1E 86 F1 | 	sub	local01, #52
265d8     01 2A 06 F1 | 	add	local07, #1
265dc     18 00 90 AD |  if_e	jmp	#LR__3882
265e0     16 27 C2 FA | 	rdbyte	local05, local08
265e4     13 27 42 F8 | 	getnib	local05, local05, #0
265e8     11 29 E2 F8 | 	getbyte	local06, local03, #0
265ec     04 28 66 F0 | 	shl	local06, #4
265f0     14 27 42 F5 | 	or	local05, local06
265f4     04 00 90 FD | 	jmp	#LR__3883
265f8                 | LR__3882
265f8     11 27 02 F6 | 	mov	local05, local03
265fc                 | LR__3883
265fc     16 27 42 FC | 	wrbyte	local05, local08
26600     03 1E 06 F1 | 	add	local01, #3
26604     0F 03 48 FC | 	wrbyte	#1, local01
26608     03 1E 86 F1 | 	sub	local01, #3
2660c     0F 13 02 F6 | 	mov	arg01, local01
26610     15 2D 02 F6 | 	mov	local08, local07
26614     09 2C 46 F0 | 	shr	local08, #9
26618     24 1E 06 F1 | 	add	local01, #36
2661c     0F 15 02 FB | 	rdlong	arg02, local01
26620     24 1E 86 F1 | 	sub	local01, #36
26624     16 15 02 F1 | 	add	arg02, local08
26628     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2662c     FD 24 0A F6 | 	mov	local04, result1 wz
26630     FC 00 90 5D |  if_ne	jmp	#LR__3886
26634     34 1E 06 F1 | 	add	local01, #52
26638     0F 2D 02 F6 | 	mov	local08, local01
2663c     FF 2B 06 F5 | 	and	local07, #511
26640     15 2D 02 F1 | 	add	local08, local07
26644     01 20 CE F7 | 	test	local02, #1 wz
26648     04 22 46 50 |  if_ne	shr	local03, #4
2664c     11 27 02 56 |  if_ne	mov	local05, local03
26650     16 27 C2 AA |  if_e	rdbyte	local05, local08
26654     F0 26 06 A5 |  if_e	and	local05, #240
26658     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
2665c     11 23 42 A8 |  if_e	getnib	local03, local03, #0
26660     11 27 42 A5 |  if_e	or	local05, local03
26664     16 27 42 FC | 	wrbyte	local05, local08
26668     31 1E 86 F1 | 	sub	local01, #49
2666c     0F 03 48 FC | 	wrbyte	#1, local01
26670                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
26670                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
26670                 | ' 			fs->wflag = 1;
26670                 | ' 			break;
26670     BC 00 90 FD | 	jmp	#LR__3886
26674                 | LR__3884
26674     0F 13 02 F6 | 	mov	arg01, local01
26678     10 2D 02 F6 | 	mov	local08, local02
2667c     08 2C 46 F0 | 	shr	local08, #8
26680     24 1E 06 F1 | 	add	local01, #36
26684     0F 15 02 FB | 	rdlong	arg02, local01
26688     24 1E 86 F1 | 	sub	local01, #36
2668c     16 15 02 F1 | 	add	arg02, local08
26690     40 FB BF FD | 	call	#_fatfs_cc_move_window
26694     FD 24 0A F6 | 	mov	local04, result1 wz
26698     94 00 90 5D |  if_ne	jmp	#LR__3886
2669c     34 1E 06 F1 | 	add	local01, #52
266a0     0F 13 02 F6 | 	mov	arg01, local01
266a4     01 20 66 F0 | 	shl	local02, #1
266a8     FF 21 06 F5 | 	and	local02, #511
266ac     10 13 02 F1 | 	add	arg01, local02
266b0     09 23 52 FC | 	wrword	local03, arg01
266b4     31 1E 86 F1 | 	sub	local01, #49
266b8     0F 03 48 FC | 	wrbyte	#1, local01
266bc                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
266bc                 | ' 			fs->wflag = 1;
266bc                 | ' 			break;
266bc     70 00 90 FD | 	jmp	#LR__3886
266c0                 | LR__3885
266c0     0F 13 02 F6 | 	mov	arg01, local01
266c4     10 2D 02 F6 | 	mov	local08, local02
266c8     07 2C 46 F0 | 	shr	local08, #7
266cc     24 1E 06 F1 | 	add	local01, #36
266d0     0F 15 02 FB | 	rdlong	arg02, local01
266d4     24 1E 86 F1 | 	sub	local01, #36
266d8     16 15 02 F1 | 	add	arg02, local08
266dc     F4 FA BF FD | 	call	#_fatfs_cc_move_window
266e0     FD 24 0A F6 | 	mov	local04, result1 wz
266e4     48 00 90 5D |  if_ne	jmp	#LR__3886
266e8     7C 22 06 F4 | 	bitl	local03, #124
266ec     34 1E 06 F1 | 	add	local01, #52
266f0     10 2D 02 F6 | 	mov	local08, local02
266f4     02 2C 66 F0 | 	shl	local08, #2
266f8     FF 2D 06 F5 | 	and	local08, #511
266fc     0F 13 02 F6 | 	mov	arg01, local01
26700     16 13 02 F1 | 	add	arg01, local08
26704                 | ' {
26704                 | ' 
26704                 | ' 	return *((DWORD*)ptr);
26704     09 2D 02 FB | 	rdlong	local08, arg01
26708     00 00 78 FF 
2670c     00 2C 06 F5 | 	and	local08, ##-268435456
26710     16 23 42 F5 | 	or	local03, local08
26714     0F 13 02 F6 | 	mov	arg01, local01
26718     02 20 66 F0 | 	shl	local02, #2
2671c     FF 21 06 F5 | 	and	local02, #511
26720     10 13 02 F1 | 	add	arg01, local02
26724     09 23 62 FC | 	wrlong	local03, arg01
26728     31 1E 86 F1 | 	sub	local01, #49
2672c     0F 03 48 FC | 	wrbyte	#1, local01
26730                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
26730                 | ' 			}
26730                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
26730                 | ' 			fs->wflag = 1;
26730                 | ' 			break;
26730                 | LR__3886
26730                 | LR__3887
26730                 | ' 		}
26730                 | ' 	}
26730                 | ' 	return res;
26730     12 FB 01 F6 | 	mov	result1, local04
26734     A7 F0 03 F6 | 	mov	ptra, fp
26738     B2 00 A0 FD | 	call	#popregs_
2673c                 | _fatfs_cc_put_fat_ret
2673c     2D 00 64 FD | 	ret
26740                 | 
26740                 | _fatfs_cc_remove_chain
26740     05 4A 05 F6 | 	mov	COUNT_, #5
26744     A8 00 A0 FD | 	call	#pushregs_
26748     09 1F 02 F6 | 	mov	local01, arg01
2674c     0A 21 02 F6 | 	mov	local02, arg02
26750     0B 23 02 F6 | 	mov	local03, arg03
26754     0F 25 02 FB | 	rdlong	local04, local01
26758     02 20 16 F2 | 	cmp	local02, #2 wc
2675c     14 00 90 CD |  if_b	jmp	#LR__3890
26760     18 24 06 F1 | 	add	local04, #24
26764     12 FB 01 FB | 	rdlong	result1, local04
26768     18 24 86 F1 | 	sub	local04, #24
2676c     FD 20 12 F2 | 	cmp	local02, result1 wc
26770     08 00 90 CD |  if_b	jmp	#LR__3891
26774                 | LR__3890
26774     02 FA 05 F6 | 	mov	result1, #2
26778     CC 00 90 FD | 	jmp	#LR__3896
2677c                 | LR__3891
2677c     00 22 0E F2 | 	cmp	local03, #0 wz
26780     18 00 90 AD |  if_e	jmp	#LR__3892
26784     11 15 02 F6 | 	mov	arg02, local03
26788     12 13 02 F6 | 	mov	arg01, local04
2678c     01 16 66 F6 | 	neg	arg03, #1
26790     9C FD BF FD | 	call	#_fatfs_cc_put_fat
26794     00 FA 0D F2 | 	cmp	result1, #0 wz
26798     AC 00 90 5D |  if_ne	jmp	#LR__3896
2679c                 | LR__3892
2679c                 | ' 	}
2679c                 | ' 
2679c                 | ' 
2679c                 | ' 	do {
2679c                 | LR__3893
2679c     10 15 02 F6 | 	mov	arg02, local02
267a0     0F 13 02 F6 | 	mov	arg01, local01
267a4     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
267a8     FD 26 0A F6 | 	mov	local05, result1 wz
267ac     94 00 90 AD |  if_e	jmp	#LR__3895
267b0     01 26 0E F2 | 	cmp	local05, #1 wz
267b4     02 FA 05 A6 |  if_e	mov	result1, #2
267b8     8C 00 90 AD |  if_e	jmp	#LR__3896
267bc     FF FF 7F FF 
267c0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
267c4     01 FA 05 A6 |  if_e	mov	result1, #1
267c8     7C 00 90 AD |  if_e	jmp	#LR__3896
267cc     10 15 02 F6 | 	mov	arg02, local02
267d0     12 13 02 F6 | 	mov	arg01, local04
267d4     00 16 06 F6 | 	mov	arg03, #0
267d8     54 FD BF FD | 	call	#_fatfs_cc_put_fat
267dc     FD 22 0A F6 | 	mov	local03, result1 wz
267e0     11 FB 01 56 |  if_ne	mov	result1, local03
267e4     60 00 90 5D |  if_ne	jmp	#LR__3896
267e8     18 24 06 F1 | 	add	local04, #24
267ec     12 23 02 FB | 	rdlong	local03, local04
267f0     02 22 86 F1 | 	sub	local03, #2
267f4     04 24 86 F1 | 	sub	local04, #4
267f8     12 21 02 FB | 	rdlong	local02, local04
267fc     14 24 86 F1 | 	sub	local04, #20
26800     11 21 12 F2 | 	cmp	local02, local03 wc
26804     24 00 90 3D |  if_ae	jmp	#LR__3894
26808     14 24 06 F1 | 	add	local04, #20
2680c     12 23 02 FB | 	rdlong	local03, local04
26810     01 22 06 F1 | 	add	local03, #1
26814     12 23 62 FC | 	wrlong	local03, local04
26818     10 24 86 F1 | 	sub	local04, #16
2681c     12 23 C2 FA | 	rdbyte	local03, local04
26820     01 22 46 F5 | 	or	local03, #1
26824     12 23 42 FC | 	wrbyte	local03, local04
26828     04 24 86 F1 | 	sub	local04, #4
2682c                 | LR__3894
2682c     13 21 02 F6 | 	mov	local02, local05
26830     18 24 06 F1 | 	add	local04, #24
26834     12 27 02 FB | 	rdlong	local05, local04
26838     18 24 86 F1 | 	sub	local04, #24
2683c     13 21 12 F2 | 	cmp	local02, local05 wc
26840     58 FF 9F CD |  if_b	jmp	#LR__3893
26844                 | LR__3895
26844                 | ' #line 1500 "ff.c"
26844                 | ' 	return FR_OK;
26844     00 FA 05 F6 | 	mov	result1, #0
26848                 | LR__3896
26848     A7 F0 03 F6 | 	mov	ptra, fp
2684c     B2 00 A0 FD | 	call	#popregs_
26850                 | _fatfs_cc_remove_chain_ret
26850     2D 00 64 FD | 	ret
26854                 | 
26854                 | _fatfs_cc_create_chain
26854     09 4A 05 F6 | 	mov	COUNT_, #9
26858     A8 00 A0 FD | 	call	#pushregs_
2685c     09 1F 02 F6 | 	mov	local01, arg01
26860     0A 21 0A F6 | 	mov	local02, arg02 wz
26864     0F 23 02 FB | 	rdlong	local03, local01
26868     28 00 90 5D |  if_ne	jmp	#LR__3900
2686c     10 22 06 F1 | 	add	local03, #16
26870     11 25 0A FB | 	rdlong	local04, local03 wz
26874     10 22 86 F1 | 	sub	local03, #16
26878     18 22 06 51 |  if_ne	add	local03, #24
2687c     11 27 02 5B |  if_ne	rdlong	local05, local03
26880     18 22 86 51 |  if_ne	sub	local03, #24
26884     13 25 12 52 |  if_ne	cmp	local04, local05 wc
26888     50 00 90 4D |  if_c_and_nz	jmp	#LR__3901
2688c     01 24 06 F6 | 	mov	local04, #1
26890     48 00 90 FD | 	jmp	#LR__3901
26894                 | LR__3900
26894     10 15 02 F6 | 	mov	arg02, local02
26898     0F 13 02 F6 | 	mov	arg01, local01
2689c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
268a0     FD 24 02 F6 | 	mov	local04, result1
268a4     02 24 16 F2 | 	cmp	local04, #2 wc
268a8     01 FA 05 C6 |  if_b	mov	result1, #1
268ac     BC 01 90 CD |  if_b	jmp	#LR__3911
268b0     FF FF 7F FF 
268b4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
268b8     12 FB 01 A6 |  if_e	mov	result1, local04
268bc     AC 01 90 AD |  if_e	jmp	#LR__3911
268c0     18 22 06 F1 | 	add	local03, #24
268c4     11 27 02 FB | 	rdlong	local05, local03
268c8     18 22 86 F1 | 	sub	local03, #24
268cc     13 25 12 F2 | 	cmp	local04, local05 wc
268d0     12 FB 01 C6 |  if_b	mov	result1, local04
268d4     94 01 90 CD |  if_b	jmp	#LR__3911
268d8     10 25 02 F6 | 	mov	local04, local02
268dc                 | LR__3901
268dc     14 22 06 F1 | 	add	local03, #20
268e0     11 27 0A FB | 	rdlong	local05, local03 wz
268e4     14 22 86 F1 | 	sub	local03, #20
268e8     00 FA 05 A6 |  if_e	mov	result1, #0
268ec     7C 01 90 AD |  if_e	jmp	#LR__3911
268f0     00 28 06 F6 | 	mov	local06, #0
268f4     10 25 0A F2 | 	cmp	local04, local02 wz
268f8     74 00 90 5D |  if_ne	jmp	#LR__3904
268fc     12 29 02 F6 | 	mov	local06, local04
26900     01 28 06 F1 | 	add	local06, #1
26904     18 22 06 F1 | 	add	local03, #24
26908     11 27 02 FB | 	rdlong	local05, local03
2690c     18 22 86 F1 | 	sub	local03, #24
26910     13 29 12 F2 | 	cmp	local06, local05 wc
26914     02 28 06 36 |  if_ae	mov	local06, #2
26918     14 15 02 F6 | 	mov	arg02, local06
2691c     0F 13 02 F6 | 	mov	arg01, local01
26920     68 FA BF FD | 	call	#_fatfs_cc_get_fat
26924     FD 26 02 F6 | 	mov	local05, result1
26928     01 26 0E F2 | 	cmp	local05, #1 wz
2692c     FF FF 7F 5F 
26930     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
26934     13 FB 01 A6 |  if_e	mov	result1, local05
26938     30 01 90 AD |  if_e	jmp	#LR__3911
2693c     00 26 0E F2 | 	cmp	local05, #0 wz
26940     2C 00 90 AD |  if_e	jmp	#LR__3903
26944     10 22 06 F1 | 	add	local03, #16
26948     11 2B 02 FB | 	rdlong	local07, local03
2694c     10 22 86 F1 | 	sub	local03, #16
26950     02 2A 16 F2 | 	cmp	local07, #2 wc
26954     14 00 90 CD |  if_b	jmp	#LR__3902
26958     18 22 06 F1 | 	add	local03, #24
2695c     11 27 02 FB | 	rdlong	local05, local03
26960     18 22 86 F1 | 	sub	local03, #24
26964     13 2B 12 F2 | 	cmp	local07, local05 wc
26968     15 25 02 C6 |  if_b	mov	local04, local07
2696c                 | LR__3902
2696c     00 28 06 F6 | 	mov	local06, #0
26970                 | LR__3903
26970                 | LR__3904
26970     00 28 0E F2 | 	cmp	local06, #0 wz
26974     60 00 90 5D |  if_ne	jmp	#LR__3907
26978     12 29 02 F6 | 	mov	local06, local04
2697c                 | ' 			ncl = scl;
2697c                 | ' 			for (;;) {
2697c                 | LR__3905
2697c     01 28 06 F1 | 	add	local06, #1
26980     18 22 06 F1 | 	add	local03, #24
26984     11 27 02 FB | 	rdlong	local05, local03
26988     18 22 86 F1 | 	sub	local03, #24
2698c     13 29 12 F2 | 	cmp	local06, local05 wc
26990     02 28 06 36 |  if_ae	mov	local06, #2
26994     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
26998     00 FA 05 16 |  if_a	mov	result1, #0
2699c     CC 00 90 1D |  if_a	jmp	#LR__3911
269a0     14 15 02 F6 | 	mov	arg02, local06
269a4     0F 13 02 F6 | 	mov	arg01, local01
269a8     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
269ac     FD 2A 0A F6 | 	mov	local07, result1 wz
269b0     24 00 90 AD |  if_e	jmp	#LR__3906
269b4     01 2A 0E F2 | 	cmp	local07, #1 wz
269b8     FF FF 7F 5F 
269bc     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
269c0     15 FB 01 A6 |  if_e	mov	result1, local07
269c4     A4 00 90 AD |  if_e	jmp	#LR__3911
269c8     12 29 0A F2 | 	cmp	local06, local04 wz
269cc     00 FA 05 A6 |  if_e	mov	result1, #0
269d0     98 00 90 AD |  if_e	jmp	#LR__3911
269d4     A4 FF 9F FD | 	jmp	#LR__3905
269d8                 | LR__3906
269d8                 | LR__3907
269d8     11 13 02 F6 | 	mov	arg01, local03
269dc     14 15 02 F6 | 	mov	arg02, local06
269e0     01 16 66 F6 | 	neg	arg03, #1
269e4     48 FB BF FD | 	call	#_fatfs_cc_put_fat
269e8     FD 2C 0A F6 | 	mov	local08, result1 wz
269ec     1C 00 90 5D |  if_ne	jmp	#LR__3908
269f0     00 20 0E F2 | 	cmp	local02, #0 wz
269f4     14 00 90 AD |  if_e	jmp	#LR__3908
269f8     11 13 02 F6 | 	mov	arg01, local03
269fc     10 15 02 F6 | 	mov	arg02, local02
26a00     14 17 02 F6 | 	mov	arg03, local06
26a04     28 FB BF FD | 	call	#_fatfs_cc_put_fat
26a08     FD 2C 02 F6 | 	mov	local08, result1
26a0c                 | LR__3908
26a0c     00 2C 0E F2 | 	cmp	local08, #0 wz
26a10     4C 00 90 5D |  if_ne	jmp	#LR__3909
26a14     10 22 06 F1 | 	add	local03, #16
26a18     11 29 62 FC | 	wrlong	local06, local03
26a1c     08 22 06 F1 | 	add	local03, #8
26a20     11 27 02 FB | 	rdlong	local05, local03
26a24     02 26 86 F1 | 	sub	local05, #2
26a28     04 22 86 F1 | 	sub	local03, #4
26a2c     11 2F 02 FB | 	rdlong	local09, local03
26a30     14 22 86 F1 | 	sub	local03, #20
26a34     13 2F 1A F2 | 	cmp	local09, local05 wcz
26a38     14 22 06 E1 |  if_be	add	local03, #20
26a3c     11 2F 02 EB |  if_be	rdlong	local09, local03
26a40     01 2E 86 E1 |  if_be	sub	local09, #1
26a44     11 2F 62 EC |  if_be	wrlong	local09, local03
26a48     14 22 86 E1 |  if_be	sub	local03, #20
26a4c     04 22 06 F1 | 	add	local03, #4
26a50     11 27 C2 FA | 	rdbyte	local05, local03
26a54     01 26 46 F5 | 	or	local05, #1
26a58     11 27 42 FC | 	wrbyte	local05, local03
26a5c     08 00 90 FD | 	jmp	#LR__3910
26a60                 | LR__3909
26a60     01 2C 0E F2 | 	cmp	local08, #1 wz
26a64     01 28 C6 F6 | 	negz	local06, #1
26a68                 | LR__3910
26a68                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
26a68                 | ' 	}
26a68                 | ' 
26a68                 | ' 	return ncl;
26a68     14 FB 01 F6 | 	mov	result1, local06
26a6c                 | LR__3911
26a6c     A7 F0 03 F6 | 	mov	ptra, fp
26a70     B2 00 A0 FD | 	call	#popregs_
26a74                 | _fatfs_cc_create_chain_ret
26a74     2D 00 64 FD | 	ret
26a78                 | 
26a78                 | _fatfs_cc_dir_clear
26a78     06 4A 05 F6 | 	mov	COUNT_, #6
26a7c     A8 00 A0 FD | 	call	#pushregs_
26a80     09 1F 02 F6 | 	mov	local01, arg01
26a84     0A 21 02 F6 | 	mov	local02, arg02
26a88     0F 13 02 F6 | 	mov	arg01, local01
26a8c     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
26a90     00 FA 0D F2 | 	cmp	result1, #0 wz
26a94     01 FA 05 56 |  if_ne	mov	result1, #1
26a98     90 00 90 5D |  if_ne	jmp	#LR__3922
26a9c     0F 13 02 F6 | 	mov	arg01, local01
26aa0     10 15 02 F6 | 	mov	arg02, local02
26aa4     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
26aa8     FD 22 02 F6 | 	mov	local03, result1
26aac     30 1E 06 F1 | 	add	local01, #48
26ab0     0F 23 62 FC | 	wrlong	local03, local01
26ab4     04 1E 06 F1 | 	add	local01, #4
26ab8     0F 13 02 F6 | 	mov	arg01, local01
26abc     00 14 06 F6 | 	mov	arg02, #0
26ac0     09 16 C6 F9 | 	decod	arg03, #9
26ac4     98 00 A0 FD | 	call	#\builtin_bytefill_
26ac8     0F 25 02 F6 | 	mov	local04, local01
26acc                 | ' #line 1667 "ff.c"
26acc                 | ' 	{
26acc                 | ' 		ibuf = fs->win; szb = 1;
26acc                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
26acc     00 26 06 F6 | 	mov	local05, #0
26ad0     34 1E 86 F1 | 	sub	local01, #52
26ad4                 | LR__3920
26ad4     0A 1E 06 F1 | 	add	local01, #10
26ad8     0F 29 E2 FA | 	rdword	local06, local01
26adc     0A 1E 86 F1 | 	sub	local01, #10
26ae0     14 27 12 F2 | 	cmp	local05, local06 wc
26ae4     2C 00 90 3D |  if_ae	jmp	#LR__3921
26ae8     01 1E 06 F1 | 	add	local01, #1
26aec     0F 13 C2 FA | 	rdbyte	arg01, local01
26af0     01 1E 86 F1 | 	sub	local01, #1
26af4     12 15 02 F6 | 	mov	arg02, local04
26af8     11 17 02 F6 | 	mov	arg03, local03
26afc     13 17 02 F1 | 	add	arg03, local05
26b00     01 18 06 F6 | 	mov	arg04, #1
26b04     9C EF BF FD | 	call	#_fatfs_cc_disk_write
26b08     00 FA 0D F2 | 	cmp	result1, #0 wz
26b0c     01 26 06 A1 |  if_e	add	local05, #1
26b10     C0 FF 9F AD |  if_e	jmp	#LR__3920
26b14                 | LR__3921
26b14                 | ' 	}
26b14                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
26b14     0A 1E 06 F1 | 	add	local01, #10
26b18     0F 25 E2 FA | 	rdword	local04, local01
26b1c     12 27 0A F2 | 	cmp	local05, local04 wz
26b20     00 28 06 A6 |  if_e	mov	local06, #0
26b24     01 28 06 56 |  if_ne	mov	local06, #1
26b28     14 FB 01 F6 | 	mov	result1, local06
26b2c                 | LR__3922
26b2c     A7 F0 03 F6 | 	mov	ptra, fp
26b30     B2 00 A0 FD | 	call	#popregs_
26b34                 | _fatfs_cc_dir_clear_ret
26b34     2D 00 64 FD | 	ret
26b38                 | 
26b38                 | _fatfs_cc_dir_sdi
26b38     06 4A 05 F6 | 	mov	COUNT_, #6
26b3c     A8 00 A0 FD | 	call	#pushregs_
26b40     09 1F 02 F6 | 	mov	local01, arg01
26b44     0A 21 02 F6 | 	mov	local02, arg02
26b48     0F 23 02 FB | 	rdlong	local03, local01
26b4c     00 10 00 FF 
26b50     00 20 16 F2 | 	cmp	local02, ##2097152 wc
26b54     1F 20 CE C7 |  if_b	test	local02, #31 wz
26b58                 | ' 		return FR_INT_ERR;
26b58     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
26b5c     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3936
26b60     10 1E 06 F1 | 	add	local01, #16
26b64     0F 21 62 FC | 	wrlong	local02, local01
26b68     08 1E 86 F1 | 	sub	local01, #8
26b6c     0F 25 0A FB | 	rdlong	local04, local01 wz
26b70     08 1E 86 F1 | 	sub	local01, #8
26b74     11 27 C2 AA |  if_e	rdbyte	local05, local03
26b78     03 26 16 A2 |  if_e	cmp	local05, #3 wc
26b7c     28 22 06 21 |  if_nc_and_z	add	local03, #40
26b80     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
26b84     28 22 86 21 |  if_nc_and_z	sub	local03, #40
26b88     00 24 0E F2 | 	cmp	local04, #0 wz
26b8c     3C 00 90 5D |  if_ne	jmp	#LR__3930
26b90     10 27 02 F6 | 	mov	local05, local02
26b94     05 26 46 F0 | 	shr	local05, #5
26b98     08 22 06 F1 | 	add	local03, #8
26b9c     11 15 E2 FA | 	rdword	arg02, local03
26ba0     08 22 86 F1 | 	sub	local03, #8
26ba4     0A 27 12 F2 | 	cmp	local05, arg02 wc
26ba8     02 FA 05 36 |  if_ae	mov	result1, #2
26bac     E4 00 90 3D |  if_ae	jmp	#LR__3936
26bb0     28 22 06 F1 | 	add	local03, #40
26bb4     11 27 02 FB | 	rdlong	local05, local03
26bb8     28 22 86 F1 | 	sub	local03, #40
26bbc     18 1E 06 F1 | 	add	local01, #24
26bc0     0F 27 62 FC | 	wrlong	local05, local01
26bc4     18 1E 86 F1 | 	sub	local01, #24
26bc8     7C 00 90 FD | 	jmp	#LR__3935
26bcc                 | LR__3930
26bcc     0A 22 06 F1 | 	add	local03, #10
26bd0     11 29 E2 FA | 	rdword	local06, local03
26bd4     0A 22 86 F1 | 	sub	local03, #10
26bd8     09 28 66 F0 | 	shl	local06, #9
26bdc                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
26bdc                 | ' 		while (ofs >= csz) {
26bdc                 | LR__3931
26bdc     14 21 12 F2 | 	cmp	local02, local06 wc
26be0     4C 00 90 CD |  if_b	jmp	#LR__3934
26be4     0F 13 02 F6 | 	mov	arg01, local01
26be8     12 15 02 F6 | 	mov	arg02, local04
26bec     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
26bf0     FD 24 02 F6 | 	mov	local04, result1
26bf4     FF FF 7F FF 
26bf8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
26bfc     01 FA 05 A6 |  if_e	mov	result1, #1
26c00     90 00 90 AD |  if_e	jmp	#LR__3936
26c04     02 24 16 F2 | 	cmp	local04, #2 wc
26c08     14 00 90 CD |  if_b	jmp	#LR__3932
26c0c     18 22 06 F1 | 	add	local03, #24
26c10     11 27 02 FB | 	rdlong	local05, local03
26c14     18 22 86 F1 | 	sub	local03, #24
26c18     13 25 12 F2 | 	cmp	local04, local05 wc
26c1c     08 00 90 CD |  if_b	jmp	#LR__3933
26c20                 | LR__3932
26c20     02 FA 05 F6 | 	mov	result1, #2
26c24     6C 00 90 FD | 	jmp	#LR__3936
26c28                 | LR__3933
26c28     14 21 82 F1 | 	sub	local02, local06
26c2c     AC FF 9F FD | 	jmp	#LR__3931
26c30                 | LR__3934
26c30     11 13 02 F6 | 	mov	arg01, local03
26c34     12 15 02 F6 | 	mov	arg02, local04
26c38     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
26c3c     18 1E 06 F1 | 	add	local01, #24
26c40     0F FB 61 FC | 	wrlong	result1, local01
26c44     18 1E 86 F1 | 	sub	local01, #24
26c48                 | LR__3935
26c48     14 1E 06 F1 | 	add	local01, #20
26c4c     0F 25 62 FC | 	wrlong	local04, local01
26c50     04 1E 06 F1 | 	add	local01, #4
26c54     0F 27 0A FB | 	rdlong	local05, local01 wz
26c58     18 1E 86 F1 | 	sub	local01, #24
26c5c     02 FA 05 A6 |  if_e	mov	result1, #2
26c60     30 00 90 AD |  if_e	jmp	#LR__3936
26c64     10 29 02 F6 | 	mov	local06, local02
26c68     09 28 46 F0 | 	shr	local06, #9
26c6c     18 1E 06 F1 | 	add	local01, #24
26c70     0F 27 02 FB | 	rdlong	local05, local01
26c74     14 27 02 F1 | 	add	local05, local06
26c78     0F 27 62 FC | 	wrlong	local05, local01
26c7c     34 22 06 F1 | 	add	local03, #52
26c80     FF 21 06 F5 | 	and	local02, #511
26c84     10 23 02 F1 | 	add	local03, local02
26c88     04 1E 06 F1 | 	add	local01, #4
26c8c     0F 23 62 FC | 	wrlong	local03, local01
26c90                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
26c90                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
26c90                 | ' 
26c90                 | ' 	return FR_OK;
26c90     00 FA 05 F6 | 	mov	result1, #0
26c94                 | LR__3936
26c94     A7 F0 03 F6 | 	mov	ptra, fp
26c98     B2 00 A0 FD | 	call	#popregs_
26c9c                 | _fatfs_cc_dir_sdi_ret
26c9c     2D 00 64 FD | 	ret
26ca0                 | 
26ca0                 | _fatfs_cc_dir_next
26ca0     05 4A 05 F6 | 	mov	COUNT_, #5
26ca4     A8 00 A0 FD | 	call	#pushregs_
26ca8     09 1F 02 F6 | 	mov	local01, arg01
26cac     0A 21 02 F6 | 	mov	local02, arg02
26cb0     0F 23 02 FB | 	rdlong	local03, local01
26cb4     10 1E 06 F1 | 	add	local01, #16
26cb8     0F 25 02 FB | 	rdlong	local04, local01
26cbc     10 1E 86 F1 | 	sub	local01, #16
26cc0     20 24 06 F1 | 	add	local04, #32
26cc4     00 10 00 FF 
26cc8     00 24 16 F2 | 	cmp	local04, ##2097152 wc
26ccc     18 1E 06 31 |  if_ae	add	local01, #24
26cd0     0F 01 68 3C |  if_ae	wrlong	#0, local01
26cd4     18 1E 86 31 |  if_ae	sub	local01, #24
26cd8     18 1E 06 F1 | 	add	local01, #24
26cdc     0F 15 0A FB | 	rdlong	arg02, local01 wz
26ce0     18 1E 86 F1 | 	sub	local01, #24
26ce4     04 FA 05 A6 |  if_e	mov	result1, #4
26ce8     64 01 90 AD |  if_e	jmp	#LR__3945
26cec     FF 25 CE F7 | 	test	local04, #511 wz
26cf0     3C 01 90 5D |  if_ne	jmp	#LR__3944
26cf4     18 1E 06 F1 | 	add	local01, #24
26cf8     0F 15 02 FB | 	rdlong	arg02, local01
26cfc     01 14 06 F1 | 	add	arg02, #1
26d00     0F 15 62 FC | 	wrlong	arg02, local01
26d04     04 1E 86 F1 | 	sub	local01, #4
26d08     0F 15 0A FB | 	rdlong	arg02, local01 wz
26d0c     14 1E 86 F1 | 	sub	local01, #20
26d10     2C 00 90 5D |  if_ne	jmp	#LR__3940
26d14     12 15 02 F6 | 	mov	arg02, local04
26d18     05 14 46 F0 | 	shr	arg02, #5
26d1c     08 22 06 F1 | 	add	local03, #8
26d20     11 21 E2 FA | 	rdword	local02, local03
26d24     08 22 86 F1 | 	sub	local03, #8
26d28     10 15 12 F2 | 	cmp	arg02, local02 wc
26d2c     18 1E 06 31 |  if_ae	add	local01, #24
26d30     0F 01 68 3C |  if_ae	wrlong	#0, local01
26d34                 | ' 				dp->sect = 0; return FR_NO_FILE;
26d34     04 FA 05 36 |  if_ae	mov	result1, #4
26d38     14 01 90 3D |  if_ae	jmp	#LR__3945
26d3c     F0 00 90 FD | 	jmp	#LR__3943
26d40                 | LR__3940
26d40     12 13 02 F6 | 	mov	arg01, local04
26d44     09 12 46 F0 | 	shr	arg01, #9
26d48     0A 22 06 F1 | 	add	local03, #10
26d4c     11 15 E2 FA | 	rdword	arg02, local03
26d50     0A 22 86 F1 | 	sub	local03, #10
26d54     01 14 86 F1 | 	sub	arg02, #1
26d58     0A 13 CA F7 | 	test	arg01, arg02 wz
26d5c     D0 00 90 5D |  if_ne	jmp	#LR__3942
26d60     0F 13 02 F6 | 	mov	arg01, local01
26d64     14 1E 06 F1 | 	add	local01, #20
26d68     0F 15 02 FB | 	rdlong	arg02, local01
26d6c     14 1E 86 F1 | 	sub	local01, #20
26d70     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
26d74     FD 26 02 F6 | 	mov	local05, result1
26d78     02 26 16 F2 | 	cmp	local05, #2 wc
26d7c     02 FA 05 C6 |  if_b	mov	result1, #2
26d80     CC 00 90 CD |  if_b	jmp	#LR__3945
26d84     FF FF 7F FF 
26d88     FF 27 0E F2 | 	cmp	local05, ##-1 wz
26d8c     01 FA 05 A6 |  if_e	mov	result1, #1
26d90     BC 00 90 AD |  if_e	jmp	#LR__3945
26d94     18 22 06 F1 | 	add	local03, #24
26d98     11 15 02 FB | 	rdlong	arg02, local03
26d9c     18 22 86 F1 | 	sub	local03, #24
26da0     0A 27 12 F2 | 	cmp	local05, arg02 wc
26da4     68 00 90 CD |  if_b	jmp	#LR__3941
26da8     00 20 0E F2 | 	cmp	local02, #0 wz
26dac     18 1E 06 A1 |  if_e	add	local01, #24
26db0     0F 01 68 AC |  if_e	wrlong	#0, local01
26db4                 | ' 						dp->sect = 0; return FR_NO_FILE;
26db4     04 FA 05 A6 |  if_e	mov	result1, #4
26db8     94 00 90 AD |  if_e	jmp	#LR__3945
26dbc     0F 13 02 F6 | 	mov	arg01, local01
26dc0     14 1E 06 F1 | 	add	local01, #20
26dc4     0F 15 02 FB | 	rdlong	arg02, local01
26dc8     14 1E 86 F1 | 	sub	local01, #20
26dcc     84 FA BF FD | 	call	#_fatfs_cc_create_chain
26dd0     FD 26 0A F6 | 	mov	local05, result1 wz
26dd4     07 FA 05 A6 |  if_e	mov	result1, #7
26dd8     74 00 90 AD |  if_e	jmp	#LR__3945
26ddc     01 26 0E F2 | 	cmp	local05, #1 wz
26de0     02 FA 05 A6 |  if_e	mov	result1, #2
26de4     68 00 90 AD |  if_e	jmp	#LR__3945
26de8     FF FF 7F FF 
26dec     FF 27 0E F2 | 	cmp	local05, ##-1 wz
26df0     01 FA 05 A6 |  if_e	mov	result1, #1
26df4     58 00 90 AD |  if_e	jmp	#LR__3945
26df8     13 15 02 F6 | 	mov	arg02, local05
26dfc     11 13 02 F6 | 	mov	arg01, local03
26e00     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
26e04     00 FA 0D F2 | 	cmp	result1, #0 wz
26e08     01 FA 05 56 |  if_ne	mov	result1, #1
26e0c     40 00 90 5D |  if_ne	jmp	#LR__3945
26e10                 | LR__3941
26e10     14 1E 06 F1 | 	add	local01, #20
26e14     0F 27 62 FC | 	wrlong	local05, local01
26e18     11 13 02 F6 | 	mov	arg01, local03
26e1c     13 15 02 F6 | 	mov	arg02, local05
26e20     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
26e24     04 1E 06 F1 | 	add	local01, #4
26e28     0F FB 61 FC | 	wrlong	result1, local01
26e2c     18 1E 86 F1 | 	sub	local01, #24
26e30                 | LR__3942
26e30                 | LR__3943
26e30                 | LR__3944
26e30     10 1E 06 F1 | 	add	local01, #16
26e34     0F 25 62 FC | 	wrlong	local04, local01
26e38     34 22 06 F1 | 	add	local03, #52
26e3c     FF 25 06 F5 | 	and	local04, #511
26e40     12 23 02 F1 | 	add	local03, local04
26e44     0C 1E 06 F1 | 	add	local01, #12
26e48     0F 23 62 FC | 	wrlong	local03, local01
26e4c                 | ' #line 1771 "ff.c"
26e4c                 | ' 				}
26e4c                 | ' 				dp->clust = clst;
26e4c                 | ' 				dp->sect = clst2sect(fs, clst);
26e4c                 | ' 			}
26e4c                 | ' 		}
26e4c                 | ' 	}
26e4c                 | ' 	dp->dptr = ofs;
26e4c                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
26e4c                 | ' 
26e4c                 | ' 	return FR_OK;
26e4c     00 FA 05 F6 | 	mov	result1, #0
26e50                 | LR__3945
26e50     A7 F0 03 F6 | 	mov	ptra, fp
26e54     B2 00 A0 FD | 	call	#popregs_
26e58                 | _fatfs_cc_dir_next_ret
26e58     2D 00 64 FD | 	ret
26e5c                 | 
26e5c                 | _fatfs_cc_dir_alloc
26e5c     08 4A 05 F6 | 	mov	COUNT_, #8
26e60     A8 00 A0 FD | 	call	#pushregs_
26e64     09 1F 02 F6 | 	mov	local01, arg01
26e68     0A 21 02 F6 | 	mov	local02, arg02
26e6c     0F 23 02 FB | 	rdlong	local03, local01
26e70     0F 13 02 F6 | 	mov	arg01, local01
26e74     00 14 06 F6 | 	mov	arg02, #0
26e78     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
26e7c     FD 24 0A F6 | 	mov	local04, result1 wz
26e80     70 00 90 5D |  if_ne	jmp	#LR__3954
26e84     00 26 06 F6 | 	mov	local05, #0
26e88                 | ' 		n = 0;
26e88                 | ' 		do {
26e88                 | LR__3950
26e88     18 1E 06 F1 | 	add	local01, #24
26e8c     0F 15 02 FB | 	rdlong	arg02, local01
26e90     18 1E 86 F1 | 	sub	local01, #24
26e94     11 13 02 F6 | 	mov	arg01, local03
26e98     38 F3 BF FD | 	call	#_fatfs_cc_move_window
26e9c     FD 24 0A F6 | 	mov	local04, result1 wz
26ea0     50 00 90 5D |  if_ne	jmp	#LR__3953
26ea4     1C 1E 06 F1 | 	add	local01, #28
26ea8     0F 29 02 FB | 	rdlong	local06, local01
26eac     1C 1E 86 F1 | 	sub	local01, #28
26eb0     14 29 C2 FA | 	rdbyte	local06, local06
26eb4     E5 28 0E F2 | 	cmp	local06, #229 wz
26eb8     1C 1E 06 51 |  if_ne	add	local01, #28
26ebc     0F 2B 02 5B |  if_ne	rdlong	local07, local01
26ec0     1C 1E 86 51 |  if_ne	sub	local01, #28
26ec4     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
26ec8     10 00 90 5D |  if_ne	jmp	#LR__3951
26ecc     01 26 06 F1 | 	add	local05, #1
26ed0     10 27 0A F2 | 	cmp	local05, local02 wz
26ed4     1C 00 90 AD |  if_e	jmp	#LR__3953
26ed8     04 00 90 FD | 	jmp	#LR__3952
26edc                 | LR__3951
26edc     00 26 06 F6 | 	mov	local05, #0
26ee0                 | LR__3952
26ee0     0F 13 02 F6 | 	mov	arg01, local01
26ee4     01 14 06 F6 | 	mov	arg02, #1
26ee8     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
26eec     FD 24 0A F6 | 	mov	local04, result1 wz
26ef0     94 FF 9F AD |  if_e	jmp	#LR__3950
26ef4                 | LR__3953
26ef4                 | LR__3954
26ef4     04 24 0E F2 | 	cmp	local04, #4 wz
26ef8     07 24 06 A6 |  if_e	mov	local04, #7
26efc                 | ' 	return res;
26efc     12 FB 01 F6 | 	mov	result1, local04
26f00     A7 F0 03 F6 | 	mov	ptra, fp
26f04     B2 00 A0 FD | 	call	#popregs_
26f08                 | _fatfs_cc_dir_alloc_ret
26f08     2D 00 64 FD | 	ret
26f0c                 | 
26f0c                 | _fatfs_cc_ld_clust
26f0c     09 01 02 F6 | 	mov	_var01, arg01
26f10     0A 13 02 F6 | 	mov	arg01, arg02
26f14     1A 12 06 F1 | 	add	arg01, #26
26f18                 | ' {
26f18                 | ' 
26f18                 | ' 	return *((WORD*)ptr);
26f18     09 FB E1 FA | 	rdword	result1, arg01
26f1c     FD 12 32 F9 | 	getword	arg01, result1, #0
26f20     00 01 C2 FA | 	rdbyte	_var01, _var01
26f24     03 00 0E F2 | 	cmp	_var01, #3 wz
26f28     14 14 06 A1 |  if_e	add	arg02, #20
26f2c                 | ' {
26f2c                 | ' 
26f2c                 | ' 	return *((WORD*)ptr);
26f2c     0A FB E1 AA |  if_e	rdword	result1, arg02
26f30     10 FA 65 A0 |  if_e	shl	result1, #16
26f34     FD 12 42 A5 |  if_e	or	arg01, result1
26f38                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
26f38                 | ' 	}
26f38                 | ' 
26f38                 | ' 	return cl;
26f38     09 FB 01 F6 | 	mov	result1, arg01
26f3c                 | _fatfs_cc_ld_clust_ret
26f3c     2D 00 64 FD | 	ret
26f40                 | 
26f40                 | _fatfs_cc_st_clust
26f40     09 01 02 F6 | 	mov	_var01, arg01
26f44     0A 13 02 F6 | 	mov	arg01, arg02
26f48     1A 12 06 F1 | 	add	arg01, #26
26f4c     09 17 52 FC | 	wrword	arg03, arg01
26f50     00 01 C2 FA | 	rdbyte	_var01, _var01
26f54     03 00 0E F2 | 	cmp	_var01, #3 wz
26f58     14 14 06 A1 |  if_e	add	arg02, #20
26f5c     10 16 46 A0 |  if_e	shr	arg03, #16
26f60     0A 17 52 AC |  if_e	wrword	arg03, arg02
26f64                 | _fatfs_cc_st_clust_ret
26f64     2D 00 64 FD | 	ret
26f68                 | 
26f68                 | _fatfs_cc_cmp_lfn
26f68     07 4A 05 F6 | 	mov	COUNT_, #7
26f6c     A8 00 A0 FD | 	call	#pushregs_
26f70     09 1F 02 F6 | 	mov	local01, arg01
26f74     0A 13 02 F6 | 	mov	arg01, arg02
26f78     1A 12 06 F1 | 	add	arg01, #26
26f7c                 | ' {
26f7c                 | ' 
26f7c                 | ' 	return *((WORD*)ptr);
26f7c     09 FB E9 FA | 	rdword	result1, arg01 wz
26f80     00 FA 05 56 |  if_ne	mov	result1, #0
26f84     E0 00 90 5D |  if_ne	jmp	#LR__3966
26f88     0A 21 C2 FA | 	rdbyte	local02, arg02
26f8c     3F 20 06 F5 | 	and	local02, #63
26f90     01 20 86 F1 | 	sub	local02, #1
26f94     0D 20 06 FD | 	qmul	local02, #13
26f98                 | ' 
26f98                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
26f98                 | ' 
26f98                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
26f98     01 22 06 F6 | 	mov	local03, #1
26f9c     00 24 06 F6 | 	mov	local04, #0
26fa0     18 26 62 FD | 	getqx	local05
26fa4                 | LR__3960
26fa4     0D 24 16 F2 | 	cmp	local04, #13 wc
26fa8     9C 00 90 3D |  if_ae	jmp	#LR__3965
26fac     0A 13 02 F6 | 	mov	arg01, arg02
26fb0     12 21 02 F6 | 	mov	local02, local04
26fb4     01 00 00 FF 
26fb8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
26fbc     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
26fc0     10 21 C2 FA | 	rdbyte	local02, local02
26fc4     01 20 06 FA | 	mul	local02, #1
26fc8     10 13 02 F1 | 	add	arg01, local02
26fcc     01 00 00 FF 
26fd0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
26fd4                 | ' {
26fd4                 | ' 
26fd4                 | ' 	return *((WORD*)ptr);
26fd4     09 FB E1 FA | 	rdword	result1, arg01
26fd8     FD 28 02 F6 | 	mov	local06, result1
26fdc     11 21 02 F6 | 	mov	local02, local03
26fe0     0F 20 4E F7 | 	zerox	local02, #15 wz
26fe4     44 00 90 AD |  if_e	jmp	#LR__3963
26fe8     00 27 16 F2 | 	cmp	local05, #256 wc
26fec     2C 00 90 3D |  if_ae	jmp	#LR__3961
26ff0     14 13 32 F9 | 	getword	arg01, local06, #0
26ff4     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
26ff8     FD 20 02 F6 | 	mov	local02, result1
26ffc     13 23 02 F6 | 	mov	local03, local05
27000     01 22 66 F0 | 	shl	local03, #1
27004     0F 23 02 F1 | 	add	local03, local01
27008     11 13 E2 FA | 	rdword	arg01, local03
2700c     01 26 06 F1 | 	add	local05, #1
27010     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
27014     FD 20 0A F2 | 	cmp	local02, result1 wz
27018     08 00 90 AD |  if_e	jmp	#LR__3962
2701c                 | LR__3961
2701c                 | ' 				return 0;
2701c     00 FA 05 F6 | 	mov	result1, #0
27020     44 00 90 FD | 	jmp	#LR__3966
27024                 | LR__3962
27024     14 23 02 F6 | 	mov	local03, local06
27028     14 00 90 FD | 	jmp	#LR__3964
2702c                 | LR__3963
2702c     14 29 32 F9 | 	getword	local06, local06, #0
27030     7F 00 00 FF 
27034     FF 29 0E F2 | 	cmp	local06, ##65535 wz
27038     00 FA 05 56 |  if_ne	mov	result1, #0
2703c     28 00 90 5D |  if_ne	jmp	#LR__3966
27040                 | LR__3964
27040     01 24 06 F1 | 	add	local04, #1
27044     5C FF 9F FD | 	jmp	#LR__3960
27048                 | LR__3965
27048     0A 21 C2 FA | 	rdbyte	local02, arg02
2704c     40 20 CE F7 | 	test	local02, #64 wz
27050     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
27054     01 26 66 50 |  if_ne	shl	local05, #1
27058     0F 27 02 51 |  if_ne	add	local05, local01
2705c     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
27060     00 FA 05 56 |  if_ne	mov	result1, #0
27064                 | ' 
27064                 | ' 	return 1;
27064     01 FA 05 A6 |  if_e	mov	result1, #1
27068                 | LR__3966
27068     A7 F0 03 F6 | 	mov	ptra, fp
2706c     B2 00 A0 FD | 	call	#popregs_
27070                 | _fatfs_cc_cmp_lfn_ret
27070     2D 00 64 FD | 	ret
27074                 | 
27074                 | _fatfs_cc_pick_lfn
27074     09 01 02 F6 | 	mov	_var01, arg01
27078     0A 13 02 F6 | 	mov	arg01, arg02
2707c     1A 12 06 F1 | 	add	arg01, #26
27080                 | ' {
27080                 | ' 
27080                 | ' 	return *((WORD*)ptr);
27080     09 FB E9 FA | 	rdword	result1, arg01 wz
27084     00 FA 05 56 |  if_ne	mov	result1, #0
27088     D4 00 90 5D |  if_ne	jmp	#LR__3975
2708c     0A 03 C2 FA | 	rdbyte	_var02, arg02
27090     40 02 26 F5 | 	andn	_var02, #64
27094     01 02 86 F1 | 	sub	_var02, #1
27098     0D 02 06 FD | 	qmul	_var02, #13
2709c                 | ' 
2709c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2709c                 | ' 
2709c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2709c     01 04 06 F6 | 	mov	_var03, #1
270a0     00 06 06 F6 | 	mov	_var04, #0
270a4     18 08 62 FD | 	getqx	_var05
270a8                 | LR__3970
270a8     0D 06 16 F2 | 	cmp	_var04, #13 wc
270ac     80 00 90 3D |  if_ae	jmp	#LR__3973
270b0     0A 13 02 F6 | 	mov	arg01, arg02
270b4     03 03 02 F6 | 	mov	_var02, _var04
270b8     01 00 00 FF 
270bc     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
270c0     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
270c4     01 03 C2 FA | 	rdbyte	_var02, _var02
270c8     01 02 06 FA | 	mul	_var02, #1
270cc     01 13 02 F1 | 	add	arg01, _var02
270d0     01 00 00 FF 
270d4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
270d8                 | ' {
270d8                 | ' 
270d8                 | ' 	return *((WORD*)ptr);
270d8     09 FB E1 FA | 	rdword	result1, arg01
270dc     FD 0A 02 F6 | 	mov	_var06, result1
270e0     02 03 02 F6 | 	mov	_var02, _var03
270e4     0F 02 4E F7 | 	zerox	_var02, #15 wz
270e8     28 00 90 AD |  if_e	jmp	#LR__3971
270ec     00 09 16 F2 | 	cmp	_var05, #256 wc
270f0     00 FA 05 36 |  if_ae	mov	result1, #0
270f4     68 00 90 3D |  if_ae	jmp	#LR__3975
270f8     04 03 02 F6 | 	mov	_var02, _var05
270fc     01 02 66 F0 | 	shl	_var02, #1
27100     00 03 02 F1 | 	add	_var02, _var01
27104     05 05 02 F6 | 	mov	_var03, _var06
27108     01 05 52 FC | 	wrword	_var03, _var02
2710c     01 08 06 F1 | 	add	_var05, #1
27110     14 00 90 FD | 	jmp	#LR__3972
27114                 | LR__3971
27114     05 0B 32 F9 | 	getword	_var06, _var06, #0
27118     7F 00 00 FF 
2711c     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
27120     00 FA 05 56 |  if_ne	mov	result1, #0
27124     38 00 90 5D |  if_ne	jmp	#LR__3975
27128                 | LR__3972
27128     01 06 06 F1 | 	add	_var04, #1
2712c     78 FF 9F FD | 	jmp	#LR__3970
27130                 | LR__3973
27130     0A 03 C2 FA | 	rdbyte	_var02, arg02
27134     40 02 CE F7 | 	test	_var02, #64 wz
27138     02 0D 02 56 |  if_ne	mov	_var07, _var03
2713c     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
27140     18 00 90 AD |  if_e	jmp	#LR__3974
27144     00 09 16 F2 | 	cmp	_var05, #256 wc
27148     00 FA 05 36 |  if_ae	mov	result1, #0
2714c     10 00 90 3D |  if_ae	jmp	#LR__3975
27150     01 08 66 F0 | 	shl	_var05, #1
27154     00 09 02 F1 | 	add	_var05, _var01
27158     04 01 58 FC | 	wrword	#0, _var05
2715c                 | LR__3974
2715c                 | ' 		lfnbuf[i] = 0;
2715c                 | ' 	}
2715c                 | ' 
2715c                 | ' 	return 1;
2715c     01 FA 05 F6 | 	mov	result1, #1
27160                 | LR__3975
27160                 | _fatfs_cc_pick_lfn_ret
27160     2D 00 64 FD | 	ret
27164                 | 
27164                 | _fatfs_cc_put_lfn
27164     0D 14 06 F1 | 	add	arg02, #13
27168     0A 19 42 FC | 	wrbyte	arg04, arg02
2716c     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
27170     01 18 86 F1 | 	sub	arg04, #1
27174     0D 18 06 FD | 	qmul	arg04, #13
27178     09 01 02 F6 | 	mov	_var01, arg01
2717c     02 14 86 F1 | 	sub	arg02, #2
27180     0A 1F 48 FC | 	wrbyte	#15, arg02
27184     01 14 06 F1 | 	add	arg02, #1
27188     0A 01 48 FC | 	wrbyte	#0, arg02
2718c     0C 14 86 F1 | 	sub	arg02, #12
27190     0A 13 02 F6 | 	mov	arg01, arg02
27194     1A 12 06 F1 | 	add	arg01, #26
27198     09 01 58 FC | 	wrword	#0, arg01
2719c     00 02 06 F6 | 	mov	_var02, #0
271a0     00 04 06 F6 | 	mov	_var03, #0
271a4                 | ' 	BYTE* dir,
271a4                 | ' 	BYTE ord,
271a4                 | ' 	BYTE sum
271a4                 | ' )
271a4                 | ' {
271a4                 | ' 	UINT i, s;
271a4                 | ' 	WCHAR wc;
271a4                 | ' 
271a4                 | ' 
271a4                 | ' 	dir[ 13 ] = sum;
271a4                 | ' 	dir[ 11 ] =  0x0F ;
271a4                 | ' 	dir[ 12 ] = 0;
271a4                 | ' 	st_word(dir +  26 , 0);
271a4                 | ' 
271a4                 | ' 	i = (ord - 1) * 13;
271a4                 | ' 	s = wc = 0;
271a4                 | ' 	do {
271a4     01 00 00 FF 
271a8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
271ac     18 06 62 FD | 	getqx	_var04
271b0     97 2A 48 FB | 	callpa	#(@LR__3981-@LR__3980)>>2,fcache_load_ptr_
271b4                 | LR__3980
271b4     01 19 32 F9 | 	getword	arg04, _var02, #0
271b8     7F 00 00 FF 
271bc     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
271c0     03 13 02 56 |  if_ne	mov	arg01, _var04
271c4     01 06 06 51 |  if_ne	add	_var04, #1
271c8     01 12 66 50 |  if_ne	shl	arg01, #1
271cc     00 13 02 51 |  if_ne	add	arg01, _var01
271d0     09 03 E2 5A |  if_ne	rdword	_var02, arg01
271d4     0A 13 02 F6 | 	mov	arg01, arg02
271d8     02 19 02 F6 | 	mov	arg04, _var03
271dc     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
271e0     0C 19 C2 FA | 	rdbyte	arg04, arg04
271e4     01 18 06 FA | 	mul	arg04, #1
271e8     0C 13 02 F1 | 	add	arg01, arg04
271ec     09 03 52 FC | 	wrword	_var02, arg01
271f0     01 19 02 F6 | 	mov	arg04, _var02
271f4     0F 18 4E F7 | 	zerox	arg04, #15 wz
271f8     0F 02 CE A9 |  if_e	bmask	_var02, #15
271fc     01 04 06 F1 | 	add	_var03, #1
27200     0D 04 16 F2 | 	cmp	_var03, #13 wc
27204     AC FF 9F CD |  if_b	jmp	#LR__3980
27208                 | LR__3981
27208     01 00 00 FF 
2720c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
27210     01 03 32 F9 | 	getword	_var02, _var02, #0
27214     7F 00 00 FF 
27218     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2721c     01 06 66 50 |  if_ne	shl	_var04, #1
27220     00 07 02 51 |  if_ne	add	_var04, _var01
27224     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
27228     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2722c     40 16 46 A5 |  if_e	or	arg03, #64
27230     0A 17 42 FC | 	wrbyte	arg03, arg02
27234                 | _fatfs_cc_put_lfn_ret
27234     2D 00 64 FD | 	ret
27238                 | 
27238                 | _fatfs_cc_gen_numname
27238     08 4A 05 F6 | 	mov	COUNT_, #8
2723c     A8 00 A0 FD | 	call	#pushregs_
27240     2C F0 07 F1 | 	add	ptra, #44
27244     09 1F 02 F6 | 	mov	local01, arg01
27248     0A 21 02 F6 | 	mov	local02, arg02
2724c     0B 23 02 F6 | 	mov	local03, arg03
27250     0C 25 02 F6 | 	mov	local04, arg04
27254     0F 13 02 F6 | 	mov	arg01, local01
27258     10 15 02 F6 | 	mov	arg02, local02
2725c     0B 16 06 F6 | 	mov	arg03, #11
27260     F4 77 BF FD | 	call	#__system____builtin_memmove
27264     06 24 16 F2 | 	cmp	local04, #6 wc
27268     48 00 90 CD |  if_b	jmp	#LR__3995
2726c     12 27 02 F6 | 	mov	local05, local04
27270     97 1E 48 FB | 	callpa	#(@LR__3993-@LR__3990)>>2,fcache_load_ptr_
27274                 | ' 		sreg = seq;
27274                 | ' 		while (*lfn) {
27274                 | LR__3990
27274     11 29 EA FA | 	rdword	local06, local03 wz
27278     34 00 90 AD |  if_e	jmp	#LR__3994
2727c     11 2B E2 FA | 	rdword	local07, local03
27280                 | ' 			wc = *lfn++;
27280                 | ' 			for (i = 0; i < 16; i++) {
27280     02 22 06 F1 | 	add	local03, #2
27284     10 12 DC FC | 	rep	@LR__3992, #16
27288                 | LR__3991
27288     01 26 66 F0 | 	shl	local05, #1
2728c     15 29 32 F9 | 	getword	local06, local07, #0
27290     01 28 06 F5 | 	and	local06, #1
27294     14 27 02 F1 | 	add	local05, local06
27298     15 2B 32 F9 | 	getword	local07, local07, #0
2729c     01 2A 46 F0 | 	shr	local07, #1
272a0     10 26 2E F4 | 	testbn	local05, #16 wz
272a4     88 00 00 5F 
272a8     21 26 66 55 |  if_ne	xor	local05, ##69665
272ac                 | LR__3992
272ac     C4 FF 9F FD | 	jmp	#LR__3990
272b0                 | LR__3993
272b0                 | LR__3994
272b0     13 25 02 F6 | 	mov	local04, local05
272b4                 | LR__3995
272b4     07 2A 06 F6 | 	mov	local07, #7
272b8                 | ' 			}
272b8                 | ' 		}
272b8                 | ' 		seq = (UINT)sreg;
272b8                 | ' 	}
272b8                 | ' 
272b8                 | ' 
272b8                 | ' 	i = 7;
272b8                 | ' 	do {
272b8     10 4E 05 F1 | 	add	fp, #16
272bc     97 1A 48 FB | 	callpa	#(@LR__3997-@LR__3996)>>2,fcache_load_ptr_
272c0                 | LR__3996
272c0     12 27 42 F8 | 	getnib	local05, local04, #0
272c4     30 26 06 F1 | 	add	local05, #48
272c8     04 24 46 F0 | 	shr	local04, #4
272cc     13 29 E2 F8 | 	getbyte	local06, local05, #0
272d0     3A 28 16 F2 | 	cmp	local06, #58 wc
272d4     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
272d8     07 26 06 31 |  if_ae	add	local05, #7
272dc     15 29 02 F6 | 	mov	local06, local07
272e0     01 2A 8E F1 | 	sub	local07, #1 wz
272e4     A7 28 02 F1 | 	add	local06, fp
272e8     14 27 42 FC | 	wrbyte	local05, local06
272ec     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
272f0     CC FF 9F 5D |  if_ne	jmp	#LR__3996
272f4                 | LR__3997
272f4     15 29 02 F6 | 	mov	local06, local07
272f8     A7 28 02 F1 | 	add	local06, fp
272fc     14 FD 48 FC | 	wrbyte	#126, local06
27300                 | ' 	ns[i] = '~';
27300                 | ' 
27300                 | ' 
27300                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
27300     00 26 06 F6 | 	mov	local05, #0
27304     10 4E 85 F1 | 	sub	fp, #16
27308     97 2A 48 FB | 	callpa	#(@LR__4000-@LR__3998)>>2,fcache_load_ptr_
2730c                 | LR__3998
2730c     15 27 12 F2 | 	cmp	local05, local07 wc
27310     4C 00 90 3D |  if_ae	jmp	#LR__4001
27314     13 29 02 F6 | 	mov	local06, local05
27318     0F 29 02 F1 | 	add	local06, local01
2731c     14 29 C2 FA | 	rdbyte	local06, local06
27320     20 28 0E F2 | 	cmp	local06, #32 wz
27324     38 00 90 AD |  if_e	jmp	#LR__4001
27328     13 13 02 F6 | 	mov	arg01, local05
2732c     0F 13 02 F1 | 	add	arg01, local01
27330     09 13 CA FA | 	rdbyte	arg01, arg01 wz
27334     00 FA 05 56 |  if_ne	mov	result1, #0
27338                 | ' 
27338                 | ' 	return 0;
27338     00 FA 05 A6 |  if_e	mov	result1, #0
2733c     00 FA 0D F2 | 	cmp	result1, #0 wz
27340     14 00 90 AD |  if_e	jmp	#LR__3999
27344     15 29 02 F6 | 	mov	local06, local07
27348     01 28 86 F1 | 	sub	local06, #1
2734c     14 27 0A F2 | 	cmp	local05, local06 wz
27350     0C 00 90 AD |  if_e	jmp	#LR__4001
27354     01 26 06 F1 | 	add	local05, #1
27358                 | LR__3999
27358     01 26 06 F1 | 	add	local05, #1
2735c     AC FF 9F FD | 	jmp	#LR__3998
27360                 | LR__4000
27360                 | LR__4001
27360     97 20 48 FB | 	callpa	#(@LR__4005-@LR__4002)>>2,fcache_load_ptr_
27364                 | ' 			j++;
27364                 | ' 		}
27364                 | ' 	}
27364                 | ' 	do {
27364                 | LR__4002
27364     13 29 02 F6 | 	mov	local06, local05
27368     0F 29 02 F1 | 	add	local06, local01
2736c     08 2A 16 F2 | 	cmp	local07, #8 wc
27370     01 26 06 F1 | 	add	local05, #1
27374     1C 00 90 3D |  if_ae	jmp	#LR__4003
27378     15 25 02 F6 | 	mov	local04, local07
2737c     10 4E 05 F1 | 	add	fp, #16
27380     A7 24 02 F1 | 	add	local04, fp
27384     12 2D C2 FA | 	rdbyte	local08, local04
27388     01 2A 06 F1 | 	add	local07, #1
2738c     10 4E 85 F1 | 	sub	fp, #16
27390     04 00 90 FD | 	jmp	#LR__4004
27394                 | LR__4003
27394     20 2C 06 F6 | 	mov	local08, #32
27398                 | LR__4004
27398     14 2D 42 FC | 	wrbyte	local08, local06
2739c     08 26 16 F2 | 	cmp	local05, #8 wc
273a0     C0 FF 9F CD |  if_b	jmp	#LR__4002
273a4                 | LR__4005
273a4     A7 F0 03 F6 | 	mov	ptra, fp
273a8     B2 00 A0 FD | 	call	#popregs_
273ac                 | _fatfs_cc_gen_numname_ret
273ac     2D 00 64 FD | 	ret
273b0                 | 
273b0                 | _fatfs_cc_sum_sfn
273b0     00 00 06 F6 | 	mov	_var01, #0
273b4                 | ' )
273b4                 | ' {
273b4                 | ' 	BYTE sum = 0;
273b4                 | ' 	UINT n = 11;
273b4                 | ' 
273b4                 | ' 	do {
273b4     97 12 48 FB | 	callpa	#(@LR__4012-@LR__4010)>>2,fcache_load_ptr_
273b8                 | LR__4010
273b8     0B 10 DC FC | 	rep	@LR__4013, #11
273bc                 | LR__4011
273bc     00 FB E1 F8 | 	getbyte	result1, _var01, #0
273c0     01 FA 45 F0 | 	shr	result1, #1
273c4     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
273c8     07 00 66 F0 | 	shl	_var01, #7
273cc     00 FB 01 F1 | 	add	result1, _var01
273d0     09 01 C2 FA | 	rdbyte	_var01, arg01
273d4     FD 00 02 F1 | 	add	_var01, result1
273d8     01 12 06 F1 | 	add	arg01, #1
273dc                 | LR__4012
273dc                 | LR__4013
273dc                 | ' 	return sum;
273dc     00 FB 01 F6 | 	mov	result1, _var01
273e0                 | _fatfs_cc_sum_sfn_ret
273e0     2D 00 64 FD | 	ret
273e4                 | 
273e4                 | _fatfs_cc_dir_read
273e4     0C 4A 05 F6 | 	mov	COUNT_, #12
273e8     A8 00 A0 FD | 	call	#pushregs_
273ec     09 1F 02 F6 | 	mov	local01, arg01
273f0     0A 21 02 F6 | 	mov	local02, arg02
273f4     04 22 06 F6 | 	mov	local03, #4
273f8     0F 25 02 FB | 	rdlong	local04, local01
273fc     FF 26 06 F6 | 	mov	local05, #255
27400     FF 28 06 F6 | 	mov	local06, #255
27404                 | ' )
27404                 | ' {
27404                 | ' 	FRESULT res = FR_NO_FILE;
27404                 | ' 	FATFS *fs = dp->obj.fs;
27404                 | ' 	BYTE attr, b;
27404                 | ' 
27404                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
27404                 | ' 
27404                 | ' 
27404                 | ' 	while (dp->sect) {
27404                 | LR__4020
27404     18 1E 06 F1 | 	add	local01, #24
27408     0F FB 09 FB | 	rdlong	result1, local01 wz
2740c     18 1E 86 F1 | 	sub	local01, #24
27410     AC 01 90 AD |  if_e	jmp	#LR__4030
27414     18 1E 06 F1 | 	add	local01, #24
27418     0F 15 02 FB | 	rdlong	arg02, local01
2741c     18 1E 86 F1 | 	sub	local01, #24
27420     12 13 02 F6 | 	mov	arg01, local04
27424     AC ED BF FD | 	call	#_fatfs_cc_move_window
27428     FD 22 0A F6 | 	mov	local03, result1 wz
2742c     90 01 90 5D |  if_ne	jmp	#LR__4030
27430     1C 1E 06 F1 | 	add	local01, #28
27434     0F FB 01 FB | 	rdlong	result1, local01
27438     1C 1E 86 F1 | 	sub	local01, #28
2743c     FD 2A C2 FA | 	rdbyte	local07, result1
27440     15 FB 01 F6 | 	mov	result1, local07
27444     07 FA 4D F7 | 	zerox	result1, #7 wz
27448     04 22 06 A6 |  if_e	mov	local03, #4
2744c                 | ' 			res = FR_NO_FILE; break;
2744c     70 01 90 AD |  if_e	jmp	#LR__4030
27450     1C 1E 06 F1 | 	add	local01, #28
27454     0F 2D 02 FB | 	rdlong	local08, local01
27458     0B 2C 06 F1 | 	add	local08, #11
2745c     16 2F C2 FA | 	rdbyte	local09, local08
27460     3F 2E 06 F5 | 	and	local09, #63
27464     16 1E 86 F1 | 	sub	local01, #22
27468     0F 2F 42 FC | 	wrbyte	local09, local01
2746c     06 1E 86 F1 | 	sub	local01, #6
27470     15 FB E1 F8 | 	getbyte	result1, local07, #0
27474     E5 FA 0D F2 | 	cmp	result1, #229 wz
27478     15 2D 02 56 |  if_ne	mov	local08, local07
2747c     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
27480     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
27484     1C 00 90 AD |  if_e	jmp	#LR__4021
27488     00 30 06 F6 | 	mov	local10, #0
2748c     17 2D E2 F8 | 	getbyte	local08, local09, #0
27490     20 2C 26 F5 | 	andn	local08, #32
27494     08 2C 0E F2 | 	cmp	local08, #8 wz
27498     01 30 06 A6 |  if_e	mov	local10, #1
2749c     10 31 0A F2 | 	cmp	local10, local02 wz
274a0     08 00 90 AD |  if_e	jmp	#LR__4022
274a4                 | LR__4021
274a4     FF 26 06 F6 | 	mov	local05, #255
274a8     00 01 90 FD | 	jmp	#LR__4029
274ac                 | LR__4022
274ac     17 2F E2 F8 | 	getbyte	local09, local09, #0
274b0     0F 2E 0E F2 | 	cmp	local09, #15 wz
274b4     B4 00 90 5D |  if_ne	jmp	#LR__4026
274b8     15 33 E2 F8 | 	getbyte	local11, local07, #0
274bc     40 32 CE F7 | 	test	local11, #64 wz
274c0     30 00 90 AD |  if_e	jmp	#LR__4023
274c4     1C 1E 06 F1 | 	add	local01, #28
274c8     0F 33 02 FB | 	rdlong	local11, local01
274cc     0D 32 06 F1 | 	add	local11, #13
274d0     19 29 C2 FA | 	rdbyte	local06, local11
274d4     15 2B E2 F8 | 	getbyte	local07, local07, #0
274d8     BF 2A 06 F5 | 	and	local07, #191
274dc     15 27 02 F6 | 	mov	local05, local07
274e0     0C 1E 86 F1 | 	sub	local01, #12
274e4     0F 33 02 FB | 	rdlong	local11, local01
274e8     1C 1E 06 F1 | 	add	local01, #28
274ec     0F 33 62 FC | 	wrlong	local11, local01
274f0     2C 1E 86 F1 | 	sub	local01, #44
274f4                 | LR__4023
274f4     15 2D E2 F8 | 	getbyte	local08, local07, #0
274f8     13 31 E2 F8 | 	getbyte	local10, local05, #0
274fc     18 2D 0A F2 | 	cmp	local08, local10 wz
27500     5C 00 90 5D |  if_ne	jmp	#LR__4024
27504     14 31 E2 F8 | 	getbyte	local10, local06, #0
27508     1C 1E 06 F1 | 	add	local01, #28
2750c     0F 2F 02 FB | 	rdlong	local09, local01
27510     1C 1E 86 F1 | 	sub	local01, #28
27514     0D 2E 06 F1 | 	add	local09, #13
27518     17 2D C2 FA | 	rdbyte	local08, local09
2751c     16 2F E2 F8 | 	getbyte	local09, local08, #0
27520     17 31 0A F2 | 	cmp	local10, local09 wz
27524     38 00 90 5D |  if_ne	jmp	#LR__4024
27528     0C 24 06 F1 | 	add	local04, #12
2752c     12 13 02 FB | 	rdlong	arg01, local04
27530     0C 24 86 F1 | 	sub	local04, #12
27534     1C 1E 06 F1 | 	add	local01, #28
27538     0F 35 02 FB | 	rdlong	local12, local01
2753c     1C 1E 86 F1 | 	sub	local01, #28
27540     1A 15 02 F6 | 	mov	arg02, local12
27544     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
27548     00 FA 4D F2 | 	cmps	result1, #0 wz
2754c     13 35 02 56 |  if_ne	mov	local12, local05
27550     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
27554     01 34 86 51 |  if_ne	sub	local12, #1
27558     1A 33 02 56 |  if_ne	mov	local11, local12
2755c     04 00 90 5D |  if_ne	jmp	#LR__4025
27560                 | LR__4024
27560     FF 32 06 F6 | 	mov	local11, #255
27564                 | LR__4025
27564     19 27 02 F6 | 	mov	local05, local11
27568     40 00 90 FD | 	jmp	#LR__4028
2756c                 | LR__4026
2756c     13 33 02 F6 | 	mov	local11, local05
27570     07 32 4E F7 | 	zerox	local11, #7 wz
27574     20 00 90 5D |  if_ne	jmp	#LR__4027
27578     14 29 E2 F8 | 	getbyte	local06, local06, #0
2757c     1C 1E 06 F1 | 	add	local01, #28
27580     0F 13 02 FB | 	rdlong	arg01, local01
27584     1C 1E 86 F1 | 	sub	local01, #28
27588     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2758c     FD FA E1 F8 | 	getbyte	result1, result1, #0
27590     FD 28 0A F2 | 	cmp	local06, result1 wz
27594     28 00 90 AD |  if_e	jmp	#LR__4030
27598                 | LR__4027
27598     2C 1E 06 F1 | 	add	local01, #44
2759c     FF FF FF FF 
275a0     0F FF 6B FC | 	wrlong	##-1, local01
275a4     2C 1E 86 F1 | 	sub	local01, #44
275a8                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
275a8                 | ' 					}
275a8                 | ' 					break;
275a8     14 00 90 FD | 	jmp	#LR__4030
275ac                 | LR__4028
275ac                 | LR__4029
275ac     0F 13 02 F6 | 	mov	arg01, local01
275b0     00 14 06 F6 | 	mov	arg02, #0
275b4     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
275b8     FD 22 0A F6 | 	mov	local03, result1 wz
275bc     44 FE 9F AD |  if_e	jmp	#LR__4020
275c0                 | LR__4030
275c0     00 22 0E F2 | 	cmp	local03, #0 wz
275c4     18 1E 06 51 |  if_ne	add	local01, #24
275c8     0F 01 68 5C |  if_ne	wrlong	#0, local01
275cc                 | ' 	return res;
275cc     11 FB 01 F6 | 	mov	result1, local03
275d0     A7 F0 03 F6 | 	mov	ptra, fp
275d4     B2 00 A0 FD | 	call	#popregs_
275d8                 | _fatfs_cc_dir_read_ret
275d8     2D 00 64 FD | 	ret
275dc                 | 
275dc                 | _fatfs_cc_dir_find
275dc     0B 4A 05 F6 | 	mov	COUNT_, #11
275e0     A8 00 A0 FD | 	call	#pushregs_
275e4     09 1F 02 F6 | 	mov	local01, arg01
275e8     0F 21 02 FB | 	rdlong	local02, local01
275ec     0F 13 02 F6 | 	mov	arg01, local01
275f0     00 14 06 F6 | 	mov	arg02, #0
275f4     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
275f8     00 FA 0D F2 | 	cmp	result1, #0 wz
275fc     18 02 90 5D |  if_ne	jmp	#LR__4052
27600     FF 22 06 F6 | 	mov	local03, #255
27604     FF 24 06 F6 | 	mov	local04, #255
27608     2C 1E 06 F1 | 	add	local01, #44
2760c     FF FF FF FF 
27610     0F FF 6B FC | 	wrlong	##-1, local01
27614     2C 1E 86 F1 | 	sub	local01, #44
27618                 | ' #line 2404 "ff.c"
27618                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
27618                 | ' 
27618                 | ' 	do {
27618                 | LR__4040
27618     18 1E 06 F1 | 	add	local01, #24
2761c     0F 15 02 FB | 	rdlong	arg02, local01
27620     18 1E 86 F1 | 	sub	local01, #24
27624     10 13 02 F6 | 	mov	arg01, local02
27628     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2762c     FD 26 0A F6 | 	mov	local05, result1 wz
27630     E0 01 90 5D |  if_ne	jmp	#LR__4051
27634     1C 1E 06 F1 | 	add	local01, #28
27638     0F 17 02 FB | 	rdlong	arg03, local01
2763c     1C 1E 86 F1 | 	sub	local01, #28
27640     0B 29 C2 FA | 	rdbyte	local06, arg03
27644     14 17 02 F6 | 	mov	arg03, local06
27648     07 16 4E F7 | 	zerox	arg03, #7 wz
2764c     04 26 06 A6 |  if_e	mov	local05, #4
27650     C0 01 90 AD |  if_e	jmp	#LR__4051
27654     1C 1E 06 F1 | 	add	local01, #28
27658     0F 2B 02 FB | 	rdlong	local07, local01
2765c     15 17 02 F6 | 	mov	arg03, local07
27660     0B 16 06 F1 | 	add	arg03, #11
27664     0B 2D C2 FA | 	rdbyte	local08, arg03
27668     3F 2C 06 F5 | 	and	local08, #63
2766c     16 1E 86 F1 | 	sub	local01, #22
27670     0F 2D 42 FC | 	wrbyte	local08, local01
27674     06 1E 86 F1 | 	sub	local01, #6
27678     14 17 E2 F8 | 	getbyte	arg03, local06, #0
2767c     E5 16 0E F2 | 	cmp	arg03, #229 wz
27680     18 00 90 AD |  if_e	jmp	#LR__4041
27684     16 17 E2 F8 | 	getbyte	arg03, local08, #0
27688     08 16 CE F7 | 	test	arg03, #8 wz
2768c     16 2B 02 56 |  if_ne	mov	local07, local08
27690     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
27694     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
27698     18 00 90 AD |  if_e	jmp	#LR__4042
2769c                 | LR__4041
2769c     FF 24 06 F6 | 	mov	local04, #255
276a0     2C 1E 06 F1 | 	add	local01, #44
276a4     FF FF FF FF 
276a8     0F FF 6B FC | 	wrlong	##-1, local01
276ac     2C 1E 86 F1 | 	sub	local01, #44
276b0     4C 01 90 FD | 	jmp	#LR__4050
276b4                 | LR__4042
276b4     16 2D E2 F8 | 	getbyte	local08, local08, #0
276b8     0F 2C 0E F2 | 	cmp	local08, #15 wz
276bc     C8 00 90 5D |  if_ne	jmp	#LR__4046
276c0     2B 1E 06 F1 | 	add	local01, #43
276c4     0F 2D C2 FA | 	rdbyte	local08, local01
276c8     2B 1E 86 F1 | 	sub	local01, #43
276cc     40 2C CE F7 | 	test	local08, #64 wz
276d0     2C 01 90 5D |  if_ne	jmp	#LR__4049
276d4     14 2F E2 F8 | 	getbyte	local09, local06, #0
276d8     40 2E CE F7 | 	test	local09, #64 wz
276dc     30 00 90 AD |  if_e	jmp	#LR__4043
276e0     1C 1E 06 F1 | 	add	local01, #28
276e4     0F 2F 02 FB | 	rdlong	local09, local01
276e8     0D 2E 06 F1 | 	add	local09, #13
276ec     17 23 C2 FA | 	rdbyte	local03, local09
276f0     14 29 E2 F8 | 	getbyte	local06, local06, #0
276f4     BF 28 06 F5 | 	and	local06, #191
276f8     14 25 02 F6 | 	mov	local04, local06
276fc     0C 1E 86 F1 | 	sub	local01, #12
27700     0F 2F 02 FB | 	rdlong	local09, local01
27704     1C 1E 06 F1 | 	add	local01, #28
27708     0F 2F 62 FC | 	wrlong	local09, local01
2770c     2C 1E 86 F1 | 	sub	local01, #44
27710                 | LR__4043
27710     14 31 E2 F8 | 	getbyte	local10, local06, #0
27714     12 2B E2 F8 | 	getbyte	local07, local04, #0
27718     15 31 0A F2 | 	cmp	local10, local07 wz
2771c     5C 00 90 5D |  if_ne	jmp	#LR__4044
27720     11 2D E2 F8 | 	getbyte	local08, local03, #0
27724     1C 1E 06 F1 | 	add	local01, #28
27728     0F 2B 02 FB | 	rdlong	local07, local01
2772c     1C 1E 86 F1 | 	sub	local01, #28
27730     0D 2A 06 F1 | 	add	local07, #13
27734     15 29 C2 FA | 	rdbyte	local06, local07
27738     14 2B E2 F8 | 	getbyte	local07, local06, #0
2773c     15 2D 0A F2 | 	cmp	local08, local07 wz
27740     38 00 90 5D |  if_ne	jmp	#LR__4044
27744     0C 20 06 F1 | 	add	local02, #12
27748     10 13 02 FB | 	rdlong	arg01, local02
2774c     0C 20 86 F1 | 	sub	local02, #12
27750     1C 1E 06 F1 | 	add	local01, #28
27754     0F 33 02 FB | 	rdlong	local11, local01
27758     1C 1E 86 F1 | 	sub	local01, #28
2775c     19 15 02 F6 | 	mov	arg02, local11
27760     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
27764     00 FA 4D F2 | 	cmps	result1, #0 wz
27768     12 33 02 56 |  if_ne	mov	local11, local04
2776c     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
27770     01 32 86 51 |  if_ne	sub	local11, #1
27774     19 2F 02 56 |  if_ne	mov	local09, local11
27778     04 00 90 5D |  if_ne	jmp	#LR__4045
2777c                 | LR__4044
2777c     FF 2E 06 F6 | 	mov	local09, #255
27780                 | LR__4045
27780     17 25 02 F6 | 	mov	local04, local09
27784     78 00 90 FD | 	jmp	#LR__4049
27788                 | LR__4046
27788     12 2F 02 F6 | 	mov	local09, local04
2778c     07 2E 4E F7 | 	zerox	local09, #7 wz
27790     20 00 90 5D |  if_ne	jmp	#LR__4047
27794     11 31 E2 F8 | 	getbyte	local10, local03, #0
27798     1C 1E 06 F1 | 	add	local01, #28
2779c     0F 13 02 FB | 	rdlong	arg01, local01
277a0     1C 1E 86 F1 | 	sub	local01, #28
277a4     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
277a8     FD FA E1 F8 | 	getbyte	result1, result1, #0
277ac     FD 30 0A F2 | 	cmp	local10, result1 wz
277b0     60 00 90 AD |  if_e	jmp	#LR__4051
277b4                 | LR__4047
277b4     2B 1E 06 F1 | 	add	local01, #43
277b8     0F 2F C2 FA | 	rdbyte	local09, local01
277bc     2B 1E 86 F1 | 	sub	local01, #43
277c0     01 2E CE F7 | 	test	local09, #1 wz
277c4     24 00 90 5D |  if_ne	jmp	#LR__4048
277c8     1C 1E 06 F1 | 	add	local01, #28
277cc     0F 13 02 FB | 	rdlong	arg01, local01
277d0     04 1E 06 F1 | 	add	local01, #4
277d4     0F 15 02 F6 | 	mov	arg02, local01
277d8     20 1E 86 F1 | 	sub	local01, #32
277dc     0B 16 06 F6 | 	mov	arg03, #11
277e0     88 DA BF FD | 	call	#_fatfs_cc_memcmp
277e4     00 FA 0D F2 | 	cmp	result1, #0 wz
277e8     28 00 90 AD |  if_e	jmp	#LR__4051
277ec                 | LR__4048
277ec     FF 24 06 F6 | 	mov	local04, #255
277f0     2C 1E 06 F1 | 	add	local01, #44
277f4     FF FF FF FF 
277f8     0F FF 6B FC | 	wrlong	##-1, local01
277fc     2C 1E 86 F1 | 	sub	local01, #44
27800                 | LR__4049
27800                 | LR__4050
27800     0F 13 02 F6 | 	mov	arg01, local01
27804     00 14 06 F6 | 	mov	arg02, #0
27808     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2780c     FD 26 0A F6 | 	mov	local05, result1 wz
27810     04 FE 9F AD |  if_e	jmp	#LR__4040
27814                 | LR__4051
27814                 | ' 
27814                 | ' 	return res;
27814     13 FB 01 F6 | 	mov	result1, local05
27818                 | LR__4052
27818     A7 F0 03 F6 | 	mov	ptra, fp
2781c     B2 00 A0 FD | 	call	#popregs_
27820                 | _fatfs_cc_dir_find_ret
27820     2D 00 64 FD | 	ret
27824                 | 
27824                 | _fatfs_cc_dir_register
27824     0A 4A 05 F6 | 	mov	COUNT_, #10
27828     A8 00 A0 FD | 	call	#pushregs_
2782c     2C F0 07 F1 | 	add	ptra, #44
27830     04 4E 05 F1 | 	add	fp, #4
27834     A7 12 62 FC | 	wrlong	arg01, fp
27838     09 1F 02 FB | 	rdlong	local01, arg01
2783c     08 4E 05 F1 | 	add	fp, #8
27840     A7 1E 62 FC | 	wrlong	local01, fp
27844     08 4E 85 F1 | 	sub	fp, #8
27848     A7 20 02 FB | 	rdlong	local02, fp
2784c     04 4E 85 F1 | 	sub	fp, #4
27850     2B 20 06 F1 | 	add	local02, #43
27854     10 21 C2 FA | 	rdbyte	local02, local02
27858     A0 20 CE F7 | 	test	local02, #160 wz
2785c     06 FA 05 56 |  if_ne	mov	result1, #6
27860     F8 03 90 5D |  if_ne	jmp	#LR__4075
27864                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
27864     14 4E 05 F1 | 	add	fp, #20
27868     A7 00 68 FC | 	wrlong	#0, fp
2786c     14 4E 85 F1 | 	sub	fp, #20
27870     97 28 48 FB | 	callpa	#(@LR__4061-@LR__4060)>>2,fcache_load_ptr_
27874                 | LR__4060
27874     0C 4E 05 F1 | 	add	fp, #12
27878     A7 20 02 FB | 	rdlong	local02, fp
2787c     0C 20 06 F1 | 	add	local02, #12
27880     10 23 02 FB | 	rdlong	local03, local02
27884     08 4E 05 F1 | 	add	fp, #8
27888     A7 24 02 FB | 	rdlong	local04, fp
2788c     14 4E 85 F1 | 	sub	fp, #20
27890     01 24 66 F0 | 	shl	local04, #1
27894     11 25 02 F1 | 	add	local04, local03
27898     12 21 EA FA | 	rdword	local02, local04 wz
2789c     24 00 90 AD |  if_e	jmp	#LR__4062
278a0     14 4E 05 F1 | 	add	fp, #20
278a4     A7 26 02 FB | 	rdlong	local05, fp
278a8     13 29 02 F6 | 	mov	local06, local05
278ac     13 2B 02 F6 | 	mov	local07, local05
278b0     15 2D 02 F6 | 	mov	local08, local07
278b4     01 2C 06 F1 | 	add	local08, #1
278b8     A7 2C 62 FC | 	wrlong	local08, fp
278bc     14 4E 85 F1 | 	sub	fp, #20
278c0     B0 FF 9F FD | 	jmp	#LR__4060
278c4                 | LR__4061
278c4                 | LR__4062
278c4     1C 4E 05 F1 | 	add	fp, #28
278c8     A7 12 02 F6 | 	mov	arg01, fp
278cc     18 4E 85 F1 | 	sub	fp, #24
278d0     A7 14 02 FB | 	rdlong	arg02, fp
278d4     04 4E 85 F1 | 	sub	fp, #4
278d8     20 14 06 F1 | 	add	arg02, #32
278dc     0C 16 06 F6 | 	mov	arg03, #12
278e0     74 71 BF FD | 	call	#__system____builtin_memmove
278e4     27 4E 05 F1 | 	add	fp, #39
278e8     A7 2E C2 FA | 	rdbyte	local09, fp
278ec     27 4E 85 F1 | 	sub	fp, #39
278f0     01 2E CE F7 | 	test	local09, #1 wz
278f4     F4 00 90 AD |  if_e	jmp	#LR__4065
278f8     04 4E 05 F1 | 	add	fp, #4
278fc     A7 30 02 FB | 	rdlong	local10, fp
27900     2B 30 06 F1 | 	add	local10, #43
27904     18 81 48 FC | 	wrbyte	#64, local10
27908                 | ' 		dp->fn[ 11 ] =  0x40 ;
27908                 | ' 		for (n = 1; n < 100; n++) {
27908     0C 4E 05 F1 | 	add	fp, #12
2790c     A7 02 68 FC | 	wrlong	#1, fp
27910     10 4E 85 F1 | 	sub	fp, #16
27914                 | LR__4063
27914     10 4E 05 F1 | 	add	fp, #16
27918     A7 20 02 FB | 	rdlong	local02, fp
2791c     10 4E 85 F1 | 	sub	fp, #16
27920     64 20 16 F2 | 	cmp	local02, #100 wc
27924     70 00 90 3D |  if_ae	jmp	#LR__4064
27928     04 4E 05 F1 | 	add	fp, #4
2792c     A7 12 02 FB | 	rdlong	arg01, fp
27930     20 12 06 F1 | 	add	arg01, #32
27934     18 4E 05 F1 | 	add	fp, #24
27938     A7 14 02 F6 | 	mov	arg02, fp
2793c     10 4E 85 F1 | 	sub	fp, #16
27940     A7 30 02 FB | 	rdlong	local10, fp
27944     0C 30 06 F1 | 	add	local10, #12
27948     18 17 02 FB | 	rdlong	arg03, local10
2794c     04 4E 05 F1 | 	add	fp, #4
27950     A7 18 02 FB | 	rdlong	arg04, fp
27954     10 4E 85 F1 | 	sub	fp, #16
27958     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2795c     04 4E 05 F1 | 	add	fp, #4
27960     A7 12 02 FB | 	rdlong	arg01, fp
27964     04 4E 85 F1 | 	sub	fp, #4
27968     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2796c     08 4E 05 F1 | 	add	fp, #8
27970     A7 FA 61 FC | 	wrlong	result1, fp
27974     00 FA 4D F2 | 	cmps	result1, #0 wz
27978     08 4E 85 F1 | 	sub	fp, #8
2797c     18 00 90 5D |  if_ne	jmp	#LR__4064
27980     10 4E 05 F1 | 	add	fp, #16
27984     A7 30 02 FB | 	rdlong	local10, fp
27988     01 30 06 F1 | 	add	local10, #1
2798c     A7 30 62 FC | 	wrlong	local10, fp
27990     10 4E 85 F1 | 	sub	fp, #16
27994     7C FF 9F FD | 	jmp	#LR__4063
27998                 | LR__4064
27998     10 4E 05 F1 | 	add	fp, #16
2799c     A7 30 02 FB | 	rdlong	local10, fp
279a0     10 4E 85 F1 | 	sub	fp, #16
279a4     64 30 0E F2 | 	cmp	local10, #100 wz
279a8     07 FA 05 A6 |  if_e	mov	result1, #7
279ac     AC 02 90 AD |  if_e	jmp	#LR__4075
279b0     08 4E 05 F1 | 	add	fp, #8
279b4     A7 30 02 FB | 	rdlong	local10, fp
279b8     08 4E 85 F1 | 	sub	fp, #8
279bc     04 30 0E F2 | 	cmp	local10, #4 wz
279c0     08 4E 05 51 |  if_ne	add	fp, #8
279c4     A7 FA 01 5B |  if_ne	rdlong	result1, fp
279c8     08 4E 85 51 |  if_ne	sub	fp, #8
279cc     8C 02 90 5D |  if_ne	jmp	#LR__4075
279d0     04 4E 05 F1 | 	add	fp, #4
279d4     A7 30 02 FB | 	rdlong	local10, fp
279d8     23 4E 05 F1 | 	add	fp, #35
279dc     A7 1E C2 FA | 	rdbyte	local01, fp
279e0     27 4E 85 F1 | 	sub	fp, #39
279e4     2B 30 06 F1 | 	add	local10, #43
279e8     18 1F 42 FC | 	wrbyte	local01, local10
279ec                 | LR__4065
279ec     27 4E 05 F1 | 	add	fp, #39
279f0     A7 20 C2 FA | 	rdbyte	local02, fp
279f4     27 4E 85 F1 | 	sub	fp, #39
279f8     02 20 CE F7 | 	test	local02, #2 wz
279fc     20 00 90 AD |  if_e	jmp	#LR__4066
27a00     14 4E 05 F1 | 	add	fp, #20
27a04     A7 30 02 FB | 	rdlong	local10, fp
27a08     0C 30 06 F1 | 	add	local10, #12
27a0c     0D 30 16 FD | 	qdiv	local10, #13
27a10     14 4E 85 F1 | 	sub	fp, #20
27a14     18 30 62 FD | 	getqx	local10
27a18     01 30 06 F1 | 	add	local10, #1
27a1c     04 00 90 FD | 	jmp	#LR__4067
27a20                 | LR__4066
27a20     01 30 06 F6 | 	mov	local10, #1
27a24                 | LR__4067
27a24     18 4E 05 F1 | 	add	fp, #24
27a28     A7 30 62 FC | 	wrlong	local10, fp
27a2c     14 4E 85 F1 | 	sub	fp, #20
27a30     A7 12 02 FB | 	rdlong	arg01, fp
27a34     18 15 02 F6 | 	mov	arg02, local10
27a38     04 4E 85 F1 | 	sub	fp, #4
27a3c     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
27a40     08 4E 05 F1 | 	add	fp, #8
27a44     A7 FA 61 FC | 	wrlong	result1, fp
27a48     08 4E 85 F1 | 	sub	fp, #8
27a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
27a50     38 01 90 5D |  if_ne	jmp	#LR__4072
27a54     18 4E 05 F1 | 	add	fp, #24
27a58     A7 30 02 FB | 	rdlong	local10, fp
27a5c     01 30 8E F1 | 	sub	local10, #1 wz
27a60     A7 30 62 FC | 	wrlong	local10, fp
27a64     18 4E 85 F1 | 	sub	fp, #24
27a68     20 01 90 AD |  if_e	jmp	#LR__4072
27a6c     04 4E 05 F1 | 	add	fp, #4
27a70     A7 30 02 FB | 	rdlong	local10, fp
27a74     18 13 02 F6 | 	mov	arg01, local10
27a78     14 4E 05 F1 | 	add	fp, #20
27a7c     A7 18 02 FB | 	rdlong	arg04, fp
27a80     18 4E 85 F1 | 	sub	fp, #24
27a84     05 18 66 F0 | 	shl	arg04, #5
27a88     10 30 06 F1 | 	add	local10, #16
27a8c     18 15 02 FB | 	rdlong	arg02, local10
27a90     0C 15 82 F1 | 	sub	arg02, arg04
27a94     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
27a98     08 4E 05 F1 | 	add	fp, #8
27a9c     A7 FA 61 FC | 	wrlong	result1, fp
27aa0     08 4E 85 F1 | 	sub	fp, #8
27aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
27aa8     E0 00 90 5D |  if_ne	jmp	#LR__4071
27aac     04 4E 05 F1 | 	add	fp, #4
27ab0     A7 12 02 FB | 	rdlong	arg01, fp
27ab4     04 4E 85 F1 | 	sub	fp, #4
27ab8     20 12 06 F1 | 	add	arg01, #32
27abc     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
27ac0     FD 30 02 F6 | 	mov	local10, result1
27ac4     28 4E 05 F1 | 	add	fp, #40
27ac8     A7 30 42 FC | 	wrbyte	local10, fp
27acc     28 4E 85 F1 | 	sub	fp, #40
27ad0                 | ' 			sum = sum_sfn(dp->fn);
27ad0                 | ' 			do {
27ad0                 | LR__4068
27ad0     0C 4E 05 F1 | 	add	fp, #12
27ad4     A7 12 02 FB | 	rdlong	arg01, fp
27ad8     08 4E 85 F1 | 	sub	fp, #8
27adc     A7 1E 02 FB | 	rdlong	local01, fp
27ae0     04 4E 85 F1 | 	sub	fp, #4
27ae4     18 1E 06 F1 | 	add	local01, #24
27ae8     0F 15 02 FB | 	rdlong	arg02, local01
27aec     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
27af0     08 4E 05 F1 | 	add	fp, #8
27af4     A7 FA 61 FC | 	wrlong	result1, fp
27af8     00 FA 4D F2 | 	cmps	result1, #0 wz
27afc     08 4E 85 F1 | 	sub	fp, #8
27b00     88 00 90 5D |  if_ne	jmp	#LR__4070
27b04     0C 4E 05 F1 | 	add	fp, #12
27b08     A7 20 02 FB | 	rdlong	local02, fp
27b0c     0C 20 06 F1 | 	add	local02, #12
27b10     10 13 02 FB | 	rdlong	arg01, local02
27b14     08 4E 85 F1 | 	sub	fp, #8
27b18     A7 1E 02 FB | 	rdlong	local01, fp
27b1c     1C 1E 06 F1 | 	add	local01, #28
27b20     0F 15 02 FB | 	rdlong	arg02, local01
27b24     14 4E 05 F1 | 	add	fp, #20
27b28     A7 16 02 FB | 	rdlong	arg03, fp
27b2c     10 4E 05 F1 | 	add	fp, #16
27b30     A7 18 C2 FA | 	rdbyte	arg04, fp
27b34     28 4E 85 F1 | 	sub	fp, #40
27b38     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
27b3c     0C 4E 05 F1 | 	add	fp, #12
27b40     A7 30 02 FB | 	rdlong	local10, fp
27b44     03 30 06 F1 | 	add	local10, #3
27b48     18 03 48 FC | 	wrbyte	#1, local10
27b4c     08 4E 85 F1 | 	sub	fp, #8
27b50     A7 12 02 FB | 	rdlong	arg01, fp
27b54     04 4E 85 F1 | 	sub	fp, #4
27b58     00 14 06 F6 | 	mov	arg02, #0
27b5c     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
27b60     08 4E 05 F1 | 	add	fp, #8
27b64     A7 FA 61 FC | 	wrlong	result1, fp
27b68     00 FA 4D F2 | 	cmps	result1, #0 wz
27b6c     08 4E 85 F1 | 	sub	fp, #8
27b70     18 00 90 5D |  if_ne	jmp	#LR__4069
27b74     18 4E 05 F1 | 	add	fp, #24
27b78     A7 30 02 FB | 	rdlong	local10, fp
27b7c     01 30 8E F1 | 	sub	local10, #1 wz
27b80     A7 30 62 FC | 	wrlong	local10, fp
27b84     18 4E 85 F1 | 	sub	fp, #24
27b88     44 FF 9F 5D |  if_ne	jmp	#LR__4068
27b8c                 | LR__4069
27b8c                 | LR__4070
27b8c                 | LR__4071
27b8c                 | LR__4072
27b8c     08 4E 05 F1 | 	add	fp, #8
27b90     A7 30 0A FB | 	rdlong	local10, fp wz
27b94     08 4E 85 F1 | 	sub	fp, #8
27b98     B4 00 90 5D |  if_ne	jmp	#LR__4074
27b9c     0C 4E 05 F1 | 	add	fp, #12
27ba0     A7 12 02 FB | 	rdlong	arg01, fp
27ba4     08 4E 85 F1 | 	sub	fp, #8
27ba8     A7 1E 02 FB | 	rdlong	local01, fp
27bac     04 4E 85 F1 | 	sub	fp, #4
27bb0     18 1E 06 F1 | 	add	local01, #24
27bb4     0F 15 02 FB | 	rdlong	arg02, local01
27bb8     18 E6 BF FD | 	call	#_fatfs_cc_move_window
27bbc     08 4E 05 F1 | 	add	fp, #8
27bc0     A7 FA 61 FC | 	wrlong	result1, fp
27bc4     08 4E 85 F1 | 	sub	fp, #8
27bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
27bcc     80 00 90 5D |  if_ne	jmp	#LR__4073
27bd0     04 4E 05 F1 | 	add	fp, #4
27bd4     A7 20 02 FB | 	rdlong	local02, fp
27bd8     04 4E 85 F1 | 	sub	fp, #4
27bdc     1C 20 06 F1 | 	add	local02, #28
27be0     10 13 02 FB | 	rdlong	arg01, local02
27be4     00 14 06 F6 | 	mov	arg02, #0
27be8     20 16 06 F6 | 	mov	arg03, #32
27bec     98 00 A0 FD | 	call	#\builtin_bytefill_
27bf0     04 4E 05 F1 | 	add	fp, #4
27bf4     A7 14 02 FB | 	rdlong	arg02, fp
27bf8     0A 1F 02 F6 | 	mov	local01, arg02
27bfc     1C 1E 06 F1 | 	add	local01, #28
27c00     0F 13 02 FB | 	rdlong	arg01, local01
27c04     04 4E 85 F1 | 	sub	fp, #4
27c08     20 14 06 F1 | 	add	arg02, #32
27c0c     0B 16 06 F6 | 	mov	arg03, #11
27c10     44 6E BF FD | 	call	#__system____builtin_memmove
27c14     04 4E 05 F1 | 	add	fp, #4
27c18     A7 2E 02 FB | 	rdlong	local09, fp
27c1c     17 31 02 F6 | 	mov	local10, local09
27c20     1C 30 06 F1 | 	add	local10, #28
27c24     18 1F 02 FB | 	rdlong	local01, local10
27c28     2B 2E 06 F1 | 	add	local09, #43
27c2c     17 31 C2 FA | 	rdbyte	local10, local09
27c30     18 30 06 F5 | 	and	local10, #24
27c34     0C 1E 06 F1 | 	add	local01, #12
27c38     0F 31 42 FC | 	wrbyte	local10, local01
27c3c     08 4E 05 F1 | 	add	fp, #8
27c40     A7 30 02 FB | 	rdlong	local10, fp
27c44     0C 4E 85 F1 | 	sub	fp, #12
27c48     03 30 06 F1 | 	add	local10, #3
27c4c     18 03 48 FC | 	wrbyte	#1, local10
27c50                 | LR__4073
27c50                 | LR__4074
27c50                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
27c50                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
27c50                 | ' 
27c50                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
27c50                 | ' 
27c50                 | ' 			fs->wflag = 1;
27c50                 | ' 		}
27c50                 | ' 	}
27c50                 | ' 
27c50                 | ' 	return res;
27c50     08 4E 05 F1 | 	add	fp, #8
27c54     A7 FA 01 FB | 	rdlong	result1, fp
27c58     08 4E 85 F1 | 	sub	fp, #8
27c5c                 | LR__4075
27c5c     A7 F0 03 F6 | 	mov	ptra, fp
27c60     B2 00 A0 FD | 	call	#popregs_
27c64                 | _fatfs_cc_dir_register_ret
27c64     2D 00 64 FD | 	ret
27c68                 | 
27c68                 | _fatfs_cc_dir_remove
27c68     05 4A 05 F6 | 	mov	COUNT_, #5
27c6c     A8 00 A0 FD | 	call	#pushregs_
27c70     09 1F 02 F6 | 	mov	local01, arg01
27c74     0F 21 02 FB | 	rdlong	local02, local01
27c78     10 1E 06 F1 | 	add	local01, #16
27c7c     0F 23 02 FB | 	rdlong	local03, local01
27c80     1C 1E 06 F1 | 	add	local01, #28
27c84     0F 15 02 FB | 	rdlong	arg02, local01
27c88     2C 1E 86 F1 | 	sub	local01, #44
27c8c     FF FF 7F FF 
27c90     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
27c94     00 24 06 A6 |  if_e	mov	local04, #0
27c98     18 00 90 AD |  if_e	jmp	#LR__4080
27c9c     0F 13 02 F6 | 	mov	arg01, local01
27ca0     2C 1E 06 F1 | 	add	local01, #44
27ca4     0F 15 02 FB | 	rdlong	arg02, local01
27ca8     2C 1E 86 F1 | 	sub	local01, #44
27cac     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
27cb0     FD 24 02 F6 | 	mov	local04, result1
27cb4                 | LR__4080
27cb4     12 27 0A F6 | 	mov	local05, local04 wz
27cb8     64 00 90 5D |  if_ne	jmp	#LR__4083
27cbc                 | ' 		do {
27cbc                 | LR__4081
27cbc     18 1E 06 F1 | 	add	local01, #24
27cc0     0F 15 02 FB | 	rdlong	arg02, local01
27cc4     18 1E 86 F1 | 	sub	local01, #24
27cc8     10 13 02 F6 | 	mov	arg01, local02
27ccc     04 E5 BF FD | 	call	#_fatfs_cc_move_window
27cd0     FD 26 0A F6 | 	mov	local05, result1 wz
27cd4     40 00 90 5D |  if_ne	jmp	#LR__4082
27cd8     1C 1E 06 F1 | 	add	local01, #28
27cdc     0F 25 02 FB | 	rdlong	local04, local01
27ce0     12 CB 49 FC | 	wrbyte	#229, local04
27ce4     03 20 06 F1 | 	add	local02, #3
27ce8     10 03 48 FC | 	wrbyte	#1, local02
27cec     03 20 86 F1 | 	sub	local02, #3
27cf0     0C 1E 86 F1 | 	sub	local01, #12
27cf4     0F 25 02 FB | 	rdlong	local04, local01
27cf8     10 1E 86 F1 | 	sub	local01, #16
27cfc     11 25 12 F2 | 	cmp	local04, local03 wc
27d00     14 00 90 3D |  if_ae	jmp	#LR__4082
27d04     0F 13 02 F6 | 	mov	arg01, local01
27d08     00 14 06 F6 | 	mov	arg02, #0
27d0c     90 EF BF FD | 	call	#_fatfs_cc_dir_next
27d10     FD 26 0A F6 | 	mov	local05, result1 wz
27d14     A4 FF 9F AD |  if_e	jmp	#LR__4081
27d18                 | LR__4082
27d18     04 26 0E F2 | 	cmp	local05, #4 wz
27d1c     02 26 06 A6 |  if_e	mov	local05, #2
27d20                 | LR__4083
27d20                 | ' 	}
27d20                 | ' #line 2590 "ff.c"
27d20                 | ' 	return res;
27d20     13 FB 01 F6 | 	mov	result1, local05
27d24     A7 F0 03 F6 | 	mov	ptra, fp
27d28     B2 00 A0 FD | 	call	#popregs_
27d2c                 | _fatfs_cc_dir_remove_ret
27d2c     2D 00 64 FD | 	ret
27d30                 | 
27d30                 | _fatfs_cc_get_fileinfo
27d30     0F 4A 05 F6 | 	mov	COUNT_, #15
27d34     A8 00 A0 FD | 	call	#pushregs_
27d38     09 1F 02 F6 | 	mov	local01, arg01
27d3c     0A 21 02 F6 | 	mov	local02, arg02
27d40     0F 23 02 FB | 	rdlong	local03, local01
27d44     1C 20 06 F1 | 	add	local02, #28
27d48     10 01 48 FC | 	wrbyte	#0, local02
27d4c     1C 20 86 F1 | 	sub	local02, #28
27d50     18 1E 06 F1 | 	add	local01, #24
27d54     0F 25 0A FB | 	rdlong	local04, local01 wz
27d58     18 1E 86 F1 | 	sub	local01, #24
27d5c     90 03 90 AD |  if_e	jmp	#LR__4104
27d60     2C 1E 06 F1 | 	add	local01, #44
27d64     0F 25 02 FB | 	rdlong	local04, local01
27d68     2C 1E 86 F1 | 	sub	local01, #44
27d6c     FF FF 7F FF 
27d70     FF 25 0E F2 | 	cmp	local04, ##-1 wz
27d74     D8 00 90 AD |  if_e	jmp	#LR__4093
27d78     00 26 06 F6 | 	mov	local05, #0
27d7c     00 28 06 F6 | 	mov	local06, #0
27d80     00 2A 06 F6 | 	mov	local07, #0
27d84                 | ' 			si = di = 0;
27d84                 | ' 			hs = 0;
27d84                 | ' 			while (fs->lfnbuf[si] != 0) {
27d84                 | LR__4090
27d84     0C 22 06 F1 | 	add	local03, #12
27d88     11 25 02 FB | 	rdlong	local04, local03
27d8c     0C 22 86 F1 | 	sub	local03, #12
27d90     14 2D 02 F6 | 	mov	local08, local06
27d94     01 2C 66 F0 | 	shl	local08, #1
27d98     12 2D 02 F1 | 	add	local08, local04
27d9c     16 25 EA FA | 	rdword	local04, local08 wz
27da0     90 00 90 AD |  if_e	jmp	#LR__4092
27da4     0C 22 06 F1 | 	add	local03, #12
27da8     11 2F 02 FB | 	rdlong	local09, local03
27dac     0C 22 86 F1 | 	sub	local03, #12
27db0     14 31 02 F6 | 	mov	local10, local06
27db4     01 30 66 F0 | 	shl	local10, #1
27db8     17 31 02 F1 | 	add	local10, local09
27dbc     18 33 E2 FA | 	rdword	local11, local10
27dc0     15 25 02 F6 | 	mov	local04, local07
27dc4     0F 24 4E F7 | 	zerox	local04, #15 wz
27dc8     01 28 06 F1 | 	add	local06, #1
27dcc     24 00 90 5D |  if_ne	jmp	#LR__4091
27dd0     19 35 32 F9 | 	getword	local12, local11, #0
27dd4     6C 00 00 FF 
27dd8     00 34 16 F2 | 	cmp	local12, ##55296 wc
27ddc     14 00 90 CD |  if_b	jmp	#LR__4091
27de0     19 37 32 F9 | 	getword	local13, local11, #0
27de4     70 00 00 FF 
27de8     00 36 16 F2 | 	cmp	local13, ##57344 wc
27dec     19 2B 02 C6 |  if_b	mov	local07, local11
27df0                 | ' 					hs = wc; continue;
27df0     90 FF 9F CD |  if_b	jmp	#LR__4090
27df4                 | LR__4091
27df4     15 13 32 F9 | 	getword	arg01, local07, #0
27df8     10 12 66 F0 | 	shl	arg01, #16
27dfc     19 33 32 F9 | 	getword	local11, local11, #0
27e00     19 13 42 F5 | 	or	arg01, local11
27e04     13 15 02 F6 | 	mov	arg02, local05
27e08     1C 20 06 F1 | 	add	local02, #28
27e0c     10 15 02 F1 | 	add	arg02, local02
27e10     FF 16 06 F6 | 	mov	arg03, #255
27e14     13 17 82 F1 | 	sub	arg03, local05
27e18     1C 20 86 F1 | 	sub	local02, #28
27e1c     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
27e20     FD 38 0A F6 | 	mov	local14, result1 wz
27e24     00 26 06 A6 |  if_e	mov	local05, #0
27e28     1C 27 02 51 |  if_ne	add	local05, local14
27e2c     00 2A 06 56 |  if_ne	mov	local07, #0
27e30     50 FF 9F 5D |  if_ne	jmp	#LR__4090
27e34                 | LR__4092
27e34     15 25 02 F6 | 	mov	local04, local07
27e38     0F 24 4E F7 | 	zerox	local04, #15 wz
27e3c     00 26 06 56 |  if_ne	mov	local05, #0
27e40     1C 20 06 F1 | 	add	local02, #28
27e44     10 27 02 F1 | 	add	local05, local02
27e48     13 01 48 FC | 	wrbyte	#0, local05
27e4c     1C 20 86 F1 | 	sub	local02, #28
27e50                 | LR__4093
27e50     00 26 06 F6 | 	mov	local05, #0
27e54     00 28 06 F6 | 	mov	local06, #0
27e58                 | ' 			fno->fname[di] = 0;
27e58                 | ' 		}
27e58                 | ' 	}
27e58                 | ' 
27e58                 | ' 	si = di = 0;
27e58                 | ' 	while (si < 11) {
27e58                 | LR__4094
27e58     0B 28 16 F2 | 	cmp	local06, #11 wc
27e5c     20 01 90 3D |  if_ae	jmp	#LR__4097
27e60     1C 1E 06 F1 | 	add	local01, #28
27e64     0F 2F 02 FB | 	rdlong	local09, local01
27e68     1C 1E 86 F1 | 	sub	local01, #28
27e6c     14 31 02 F6 | 	mov	local10, local06
27e70     17 31 02 F1 | 	add	local10, local09
27e74     18 33 C2 FA | 	rdbyte	local11, local10
27e78     19 25 32 F9 | 	getword	local04, local11, #0
27e7c     20 24 0E F2 | 	cmp	local04, #32 wz
27e80     01 28 06 F1 | 	add	local06, #1
27e84     D0 FF 9F AD |  if_e	jmp	#LR__4094
27e88     19 25 32 F9 | 	getword	local04, local11, #0
27e8c     05 24 0E F2 | 	cmp	local04, #5 wz
27e90     E5 32 06 A6 |  if_e	mov	local11, #229
27e94     09 28 0E F2 | 	cmp	local06, #9 wz
27e98     20 00 90 5D |  if_ne	jmp	#LR__4095
27e9c     0C 26 16 F2 | 	cmp	local05, #12 wc
27ea0     18 00 90 3D |  if_ae	jmp	#LR__4095
27ea4     13 37 02 F6 | 	mov	local13, local05
27ea8     0C 20 06 F1 | 	add	local02, #12
27eac     10 37 02 F1 | 	add	local13, local02
27eb0     1B 5D 48 FC | 	wrbyte	#46, local13
27eb4     01 26 06 F1 | 	add	local05, #1
27eb8     0C 20 86 F1 | 	sub	local02, #12
27ebc                 | LR__4095
27ebc     19 13 32 F9 | 	getword	arg01, local11, #0
27ec0     07 12 4E F7 | 	zerox	arg01, #7 wz
27ec4     00 FA 05 56 |  if_ne	mov	result1, #0
27ec8                 | ' 
27ec8                 | ' 	return 0;
27ec8     00 FA 05 A6 |  if_e	mov	result1, #0
27ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
27ed0     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
27ed4     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
27ed8     50 00 90 AD |  if_e	jmp	#LR__4096
27edc     1C 1E 06 F1 | 	add	local01, #28
27ee0     0F 31 02 FB | 	rdlong	local10, local01
27ee4     1C 1E 86 F1 | 	sub	local01, #28
27ee8     14 2D 02 F6 | 	mov	local08, local06
27eec     18 2D 02 F1 | 	add	local08, local10
27ef0     16 13 CA FA | 	rdbyte	arg01, local08 wz
27ef4     00 FA 05 56 |  if_ne	mov	result1, #0
27ef8                 | ' 
27ef8                 | ' 	return 0;
27ef8     00 FA 05 A6 |  if_e	mov	result1, #0
27efc     00 FA 0D F2 | 	cmp	result1, #0 wz
27f00     28 00 90 AD |  if_e	jmp	#LR__4096
27f04     19 33 32 F9 | 	getword	local11, local11, #0
27f08     08 32 66 F0 | 	shl	local11, #8
27f0c     1C 1E 06 F1 | 	add	local01, #28
27f10     0F 39 02 FB | 	rdlong	local14, local01
27f14     1C 1E 86 F1 | 	sub	local01, #28
27f18     14 2F 02 F6 | 	mov	local09, local06
27f1c     1C 2F 02 F1 | 	add	local09, local14
27f20     17 35 C2 FA | 	rdbyte	local12, local09
27f24     1A 33 42 F5 | 	or	local11, local12
27f28     01 28 06 F1 | 	add	local06, #1
27f2c                 | LR__4096
27f2c     19 13 02 F6 | 	mov	arg01, local11
27f30     01 00 00 FF 
27f34     52 15 06 F6 | 	mov	arg02, ##850
27f38     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
27f3c     FD 32 02 F6 | 	mov	local11, result1
27f40     19 25 02 F6 | 	mov	local04, local11
27f44     0F 24 4E F7 | 	zerox	local04, #15 wz
27f48     00 26 06 A6 |  if_e	mov	local05, #0
27f4c     30 00 90 AD |  if_e	jmp	#LR__4097
27f50     19 13 32 F9 | 	getword	arg01, local11, #0
27f54     13 15 02 F6 | 	mov	arg02, local05
27f58     0C 20 06 F1 | 	add	local02, #12
27f5c     10 15 02 F1 | 	add	arg02, local02
27f60     0C 16 06 F6 | 	mov	arg03, #12
27f64     13 17 82 F1 | 	sub	arg03, local05
27f68     0C 20 86 F1 | 	sub	local02, #12
27f6c     EC DF BF FD | 	call	#_fatfs_cc_put_utf
27f70     FD 38 0A F6 | 	mov	local14, result1 wz
27f74     00 26 06 A6 |  if_e	mov	local05, #0
27f78     1C 27 02 51 |  if_ne	add	local05, local14
27f7c     D8 FE 9F 5D |  if_ne	jmp	#LR__4094
27f80                 | LR__4097
27f80     13 25 02 F6 | 	mov	local04, local05
27f84     0C 20 06 F1 | 	add	local02, #12
27f88     10 25 02 F1 | 	add	local04, local02
27f8c     12 01 48 FC | 	wrbyte	#0, local04
27f90     10 20 06 F1 | 	add	local02, #16
27f94     10 25 CA FA | 	rdbyte	local04, local02 wz
27f98     1C 20 86 F1 | 	sub	local02, #28
27f9c     F8 00 90 5D |  if_ne	jmp	#LR__4103
27fa0     00 26 0E F2 | 	cmp	local05, #0 wz
27fa4     1C 00 90 5D |  if_ne	jmp	#LR__4098
27fa8     13 37 02 F6 | 	mov	local13, local05
27fac     1C 20 06 F1 | 	add	local02, #28
27fb0     10 37 02 F1 | 	add	local13, local02
27fb4     1B 7F 48 FC | 	wrbyte	#63, local13
27fb8     01 26 06 F1 | 	add	local05, #1
27fbc     1C 20 86 F1 | 	sub	local02, #28
27fc0     A4 00 90 FD | 	jmp	#LR__4102
27fc4                 | LR__4098
27fc4                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
27fc4     00 26 06 F6 | 	mov	local05, #0
27fc8     00 28 06 F6 | 	mov	local06, #0
27fcc     08 3A 06 F6 | 	mov	local15, #8
27fd0                 | LR__4099
27fd0     14 25 02 F6 | 	mov	local04, local06
27fd4     0C 20 06 F1 | 	add	local02, #12
27fd8     10 25 02 F1 | 	add	local04, local02
27fdc     12 37 CA FA | 	rdbyte	local13, local04 wz
27fe0     0C 20 86 F1 | 	sub	local02, #12
27fe4     80 00 90 AD |  if_e	jmp	#LR__4101
27fe8     14 2D 02 F6 | 	mov	local08, local06
27fec     0C 20 06 F1 | 	add	local02, #12
27ff0     10 2D 02 F1 | 	add	local08, local02
27ff4     16 33 C2 FA | 	rdbyte	local11, local08
27ff8     19 39 32 F9 | 	getword	local14, local11, #0
27ffc     2E 38 0E F2 | 	cmp	local14, #46 wz
28000     0C 20 86 F1 | 	sub	local02, #12
28004     10 3A 06 A6 |  if_e	mov	local15, #16
28008     19 39 32 F9 | 	getword	local14, local11, #0
2800c     41 38 16 F2 | 	cmp	local14, #65 wc
28010     30 00 90 CD |  if_b	jmp	#LR__4100
28014     19 2D 32 F9 | 	getword	local08, local11, #0
28018     5B 2C 16 F2 | 	cmp	local08, #91 wc
2801c     24 00 90 3D |  if_ae	jmp	#LR__4100
28020     1C 1E 06 F1 | 	add	local01, #28
28024     0F 2F 02 FB | 	rdlong	local09, local01
28028     1C 1E 86 F1 | 	sub	local01, #28
2802c     0C 2E 06 F1 | 	add	local09, #12
28030     17 31 C2 FA | 	rdbyte	local10, local09
28034     1D 39 E2 F8 | 	getbyte	local14, local15, #0
28038     1C 31 CA F7 | 	test	local10, local14 wz
2803c     19 33 32 59 |  if_ne	getword	local11, local11, #0
28040     20 32 06 51 |  if_ne	add	local11, #32
28044                 | LR__4100
28044     13 39 02 F6 | 	mov	local14, local05
28048     1C 20 06 F1 | 	add	local02, #28
2804c     10 39 02 F1 | 	add	local14, local02
28050     19 33 32 F9 | 	getword	local11, local11, #0
28054     1C 33 42 FC | 	wrbyte	local11, local14
28058     01 28 06 F1 | 	add	local06, #1
2805c     01 26 06 F1 | 	add	local05, #1
28060     1C 20 86 F1 | 	sub	local02, #28
28064     68 FF 9F FD | 	jmp	#LR__4099
28068                 | LR__4101
28068                 | LR__4102
28068     1C 20 06 F1 | 	add	local02, #28
2806c     10 27 02 F1 | 	add	local05, local02
28070     13 01 48 FC | 	wrbyte	#0, local05
28074     1C 1E 06 F1 | 	add	local01, #28
28078     0F 25 02 FB | 	rdlong	local04, local01
2807c     1C 1E 86 F1 | 	sub	local01, #28
28080     0C 24 06 F1 | 	add	local04, #12
28084     12 37 CA FA | 	rdbyte	local13, local04 wz
28088     1C 20 86 F1 | 	sub	local02, #28
2808c     0C 20 06 A1 |  if_e	add	local02, #12
28090     10 01 48 AC |  if_e	wrbyte	#0, local02
28094     0C 20 86 A1 |  if_e	sub	local02, #12
28098                 | LR__4103
28098     1C 1E 06 F1 | 	add	local01, #28
2809c     0F 35 02 FB | 	rdlong	local12, local01
280a0     0B 34 06 F1 | 	add	local12, #11
280a4     1A 25 C2 FA | 	rdbyte	local04, local12
280a8     3F 24 06 F5 | 	and	local04, #63
280ac     08 20 06 F1 | 	add	local02, #8
280b0     10 25 42 FC | 	wrbyte	local04, local02
280b4     08 20 86 F1 | 	sub	local02, #8
280b8     0F 13 02 FB | 	rdlong	arg01, local01
280bc     1C 12 06 F1 | 	add	arg01, #28
280c0                 | ' {
280c0                 | ' 
280c0                 | ' 	return *((DWORD*)ptr);
280c0     09 FB 01 FB | 	rdlong	result1, arg01
280c4     10 FB 61 FC | 	wrlong	result1, local02
280c8     0F 13 02 FB | 	rdlong	arg01, local01
280cc     16 12 06 F1 | 	add	arg01, #22
280d0                 | ' {
280d0                 | ' 
280d0                 | ' 	return *((WORD*)ptr);
280d0     09 FB E1 FA | 	rdword	result1, arg01
280d4     06 20 06 F1 | 	add	local02, #6
280d8     10 FB 51 FC | 	wrword	result1, local02
280dc     0F 13 02 FB | 	rdlong	arg01, local01
280e0     18 12 06 F1 | 	add	arg01, #24
280e4                 | ' {
280e4                 | ' 
280e4                 | ' 	return *((WORD*)ptr);
280e4     09 FB E1 FA | 	rdword	result1, arg01
280e8     02 20 86 F1 | 	sub	local02, #2
280ec     10 FB 51 FC | 	wrword	result1, local02
280f0                 | LR__4104
280f0     A7 F0 03 F6 | 	mov	ptra, fp
280f4     B2 00 A0 FD | 	call	#popregs_
280f8                 | _fatfs_cc_get_fileinfo_ret
280f8     2D 00 64 FD | 	ret
280fc                 | 
280fc                 | _fatfs_cc_create_name
280fc     0D 4A 05 F6 | 	mov	COUNT_, #13
28100     A8 00 A0 FD | 	call	#pushregs_
28104     34 F0 07 F1 | 	add	ptra, #52
28108     04 4E 05 F1 | 	add	fp, #4
2810c     A7 12 62 FC | 	wrlong	arg01, fp
28110     04 4E 05 F1 | 	add	fp, #4
28114     A7 14 62 FC | 	wrlong	arg02, fp
28118     0A FB 01 FB | 	rdlong	result1, arg02
2811c     28 4E 05 F1 | 	add	fp, #40
28120     A7 FA 61 FC | 	wrlong	result1, fp
28124     2C 4E 85 F1 | 	sub	fp, #44
28128     A7 FA 01 FB | 	rdlong	result1, fp
2812c     FD 1E 02 FB | 	rdlong	local01, result1
28130     0C 1E 06 F1 | 	add	local01, #12
28134     0F 21 02 FB | 	rdlong	local02, local01
28138     14 4E 05 F1 | 	add	fp, #20
2813c     A7 20 62 FC | 	wrlong	local02, fp
28140     14 4E 05 F1 | 	add	fp, #20
28144     A7 00 68 FC | 	wrlong	#0, fp
28148     2C 4E 85 F1 | 	sub	fp, #44
2814c                 | ' 
2814c                 | ' 
2814c                 | ' 
2814c                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2814c                 | ' 	for (;;) {
2814c                 | LR__4110
2814c     30 4E 05 F1 | 	add	fp, #48
28150     A7 12 02 F6 | 	mov	arg01, fp
28154     30 4E 85 F1 | 	sub	fp, #48
28158     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2815c     1C 4E 05 F1 | 	add	fp, #28
28160     A7 FA 61 FC | 	wrlong	result1, fp
28164     1C 4E 85 F1 | 	sub	fp, #28
28168     FF FF 7F FF 
2816c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
28170     06 FA 05 A6 |  if_e	mov	result1, #6
28174     74 08 90 AD |  if_e	jmp	#LR__4150
28178     1C 4E 05 F1 | 	add	fp, #28
2817c     A7 1E 02 FB | 	rdlong	local01, fp
28180     1C 4E 85 F1 | 	sub	fp, #28
28184     80 00 00 FF 
28188     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2818c     3C 00 90 CD |  if_b	jmp	#LR__4111
28190     18 4E 05 F1 | 	add	fp, #24
28194     A7 22 02 FB | 	rdlong	local03, fp
28198     14 4E 05 F1 | 	add	fp, #20
2819c     A7 1E 02 FB | 	rdlong	local01, fp
281a0     0F 25 02 F6 | 	mov	local04, local01
281a4     01 24 06 F1 | 	add	local04, #1
281a8     A7 24 62 FC | 	wrlong	local04, fp
281ac     01 1E 66 F0 | 	shl	local01, #1
281b0     11 1F 02 F1 | 	add	local01, local03
281b4     10 4E 85 F1 | 	sub	fp, #16
281b8     A7 26 02 FB | 	rdlong	local05, fp
281bc     1C 4E 85 F1 | 	sub	fp, #28
281c0     13 29 02 F6 | 	mov	local06, local05
281c4     10 28 46 F0 | 	shr	local06, #16
281c8     0F 29 52 FC | 	wrword	local06, local01
281cc                 | LR__4111
281cc     1C 4E 05 F1 | 	add	fp, #28
281d0     A7 1E 02 FB | 	rdlong	local01, fp
281d4     08 4E 85 F1 | 	sub	fp, #8
281d8     A7 1E 52 FC | 	wrword	local01, fp
281dc     A7 1E E2 FA | 	rdword	local01, fp
281e0     14 4E 85 F1 | 	sub	fp, #20
281e4     20 1E 16 F2 | 	cmp	local01, #32 wc
281e8     B0 00 90 CD |  if_b	jmp	#LR__4113
281ec     14 4E 05 F1 | 	add	fp, #20
281f0     A7 1E E2 FA | 	rdword	local01, fp
281f4     14 4E 85 F1 | 	sub	fp, #20
281f8     2F 1E 0E F2 | 	cmp	local01, #47 wz
281fc     14 4E 05 51 |  if_ne	add	fp, #20
28200     A7 24 E2 5A |  if_ne	rdword	local04, fp
28204     14 4E 85 51 |  if_ne	sub	fp, #20
28208     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
2820c     8C 00 90 AD |  if_e	jmp	#LR__4113
28210     14 4E 05 F1 | 	add	fp, #20
28214     A7 12 E2 FA | 	rdword	arg01, fp
28218     14 4E 85 F1 | 	sub	fp, #20
2821c     80 12 16 F2 | 	cmp	arg01, #128 wc
28220     24 00 90 3D |  if_ae	jmp	#LR__4112
28224     70 01 00 FF 
28228     60 13 06 F6 | 	mov	arg01, ##@LR__4772
2822c     14 4E 05 F1 | 	add	fp, #20
28230     A7 14 E2 FA | 	rdword	arg02, fp
28234     14 4E 85 F1 | 	sub	fp, #20
28238     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2823c     00 FA 0D F2 | 	cmp	result1, #0 wz
28240     06 FA 05 56 |  if_ne	mov	result1, #6
28244     A4 07 90 5D |  if_ne	jmp	#LR__4150
28248                 | LR__4112
28248     2C 4E 05 F1 | 	add	fp, #44
2824c     A7 28 02 FB | 	rdlong	local06, fp
28250     2C 4E 85 F1 | 	sub	fp, #44
28254     FF 28 16 F2 | 	cmp	local06, #255 wc
28258     06 FA 05 36 |  if_ae	mov	result1, #6
2825c     8C 07 90 3D |  if_ae	jmp	#LR__4150
28260     18 4E 05 F1 | 	add	fp, #24
28264     A7 22 02 FB | 	rdlong	local03, fp
28268     14 4E 05 F1 | 	add	fp, #20
2826c     A7 20 02 FB | 	rdlong	local02, fp
28270     10 25 02 F6 | 	mov	local04, local02
28274     01 24 06 F1 | 	add	local04, #1
28278     A7 24 62 FC | 	wrlong	local04, fp
2827c     10 1F 02 F6 | 	mov	local01, local02
28280     01 1E 66 F0 | 	shl	local01, #1
28284     11 1F 02 F1 | 	add	local01, local03
28288     18 4E 85 F1 | 	sub	fp, #24
2828c     A7 28 E2 FA | 	rdword	local06, fp
28290     14 4E 85 F1 | 	sub	fp, #20
28294     0F 29 52 FC | 	wrword	local06, local01
28298     B0 FE 9F FD | 	jmp	#LR__4110
2829c                 | LR__4113
2829c     14 4E 05 F1 | 	add	fp, #20
282a0     A7 2A E2 FA | 	rdword	local07, fp
282a4     14 4E 85 F1 | 	sub	fp, #20
282a8     20 2A 16 F2 | 	cmp	local07, #32 wc
282ac     10 4E 05 C1 |  if_b	add	fp, #16
282b0     A7 08 48 CC |  if_b	wrbyte	#4, fp
282b4     10 4E 85 C1 |  if_b	sub	fp, #16
282b8     74 00 90 CD |  if_b	jmp	#LR__4118
282bc     97 24 48 FB | 	callpa	#(@LR__4116-@LR__4114)>>2,fcache_load_ptr_
282c0                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
282c0                 | LR__4114
282c0     30 4E 05 F1 | 	add	fp, #48
282c4     A7 24 02 FB | 	rdlong	local04, fp
282c8     30 4E 85 F1 | 	sub	fp, #48
282cc     12 2B C2 FA | 	rdbyte	local07, local04
282d0     2F 2A 0E F2 | 	cmp	local07, #47 wz
282d4     18 00 90 AD |  if_e	jmp	#LR__4115
282d8     30 4E 05 F1 | 	add	fp, #48
282dc     A7 24 02 FB | 	rdlong	local04, fp
282e0     30 4E 85 F1 | 	sub	fp, #48
282e4     12 21 C2 FA | 	rdbyte	local02, local04
282e8     5C 20 0E F2 | 	cmp	local02, #92 wz
282ec     18 00 90 5D |  if_ne	jmp	#LR__4117
282f0                 | LR__4115
282f0     30 4E 05 F1 | 	add	fp, #48
282f4     A7 1E 02 FB | 	rdlong	local01, fp
282f8     01 1E 06 F1 | 	add	local01, #1
282fc     A7 1E 62 FC | 	wrlong	local01, fp
28300     30 4E 85 F1 | 	sub	fp, #48
28304     B8 FF 9F FD | 	jmp	#LR__4114
28308                 | LR__4116
28308                 | LR__4117
28308     10 4E 05 F1 | 	add	fp, #16
2830c     A7 00 48 FC | 	wrbyte	#0, fp
28310     20 4E 05 F1 | 	add	fp, #32
28314     A7 28 02 FB | 	rdlong	local06, fp
28318     30 4E 85 F1 | 	sub	fp, #48
2831c     14 2B C2 FA | 	rdbyte	local07, local06
28320     20 2A 16 F2 | 	cmp	local07, #32 wc
28324     10 4E 05 C1 |  if_b	add	fp, #16
28328     A7 08 48 CC |  if_b	wrbyte	#4, fp
2832c     10 4E 85 C1 |  if_b	sub	fp, #16
28330                 | LR__4118
28330     08 4E 05 F1 | 	add	fp, #8
28334     A7 2A 02 FB | 	rdlong	local07, fp
28338     28 4E 05 F1 | 	add	fp, #40
2833c     A7 1E 02 FB | 	rdlong	local01, fp
28340     30 4E 85 F1 | 	sub	fp, #48
28344     15 1F 62 FC | 	wrlong	local01, local07
28348     97 38 48 FB | 	callpa	#(@LR__4120-@LR__4119)>>2,fcache_load_ptr_
2834c                 | ' 	}
2834c                 | ' 	*path = p;
2834c                 | ' #line 2862 "ff.c"
2834c                 | ' 	while (di) {
2834c                 | LR__4119
2834c     2C 4E 05 F1 | 	add	fp, #44
28350     A7 2A 0A FB | 	rdlong	local07, fp wz
28354     2C 4E 85 F1 | 	sub	fp, #44
28358     60 00 90 AD |  if_e	jmp	#LR__4121
2835c     18 4E 05 F1 | 	add	fp, #24
28360     A7 28 02 FB | 	rdlong	local06, fp
28364     14 4E 05 F1 | 	add	fp, #20
28368     A7 24 02 FB | 	rdlong	local04, fp
2836c     01 24 86 F1 | 	sub	local04, #1
28370     01 24 66 F0 | 	shl	local04, #1
28374     14 25 02 F1 | 	add	local04, local06
28378     12 29 E2 FA | 	rdword	local06, local04
2837c     18 4E 85 F1 | 	sub	fp, #24
28380     A7 28 52 FC | 	wrword	local06, fp
28384     A7 2A E2 FA | 	rdword	local07, fp
28388     14 4E 85 F1 | 	sub	fp, #20
2838c     20 2A 0E F2 | 	cmp	local07, #32 wz
28390     14 4E 05 51 |  if_ne	add	fp, #20
28394     A7 1E E2 5A |  if_ne	rdword	local01, fp
28398     14 4E 85 51 |  if_ne	sub	fp, #20
2839c     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
283a0     18 00 90 5D |  if_ne	jmp	#LR__4121
283a4     2C 4E 05 F1 | 	add	fp, #44
283a8     A7 1E 02 FB | 	rdlong	local01, fp
283ac     01 1E 86 F1 | 	sub	local01, #1
283b0     A7 1E 62 FC | 	wrlong	local01, fp
283b4     2C 4E 85 F1 | 	sub	fp, #44
283b8     90 FF 9F FD | 	jmp	#LR__4119
283bc                 | LR__4120
283bc                 | LR__4121
283bc     18 4E 05 F1 | 	add	fp, #24
283c0     A7 2C 02 FB | 	rdlong	local08, fp
283c4     14 4E 05 F1 | 	add	fp, #20
283c8     A7 24 02 FB | 	rdlong	local04, fp
283cc     01 24 66 F0 | 	shl	local04, #1
283d0     16 25 02 F1 | 	add	local04, local08
283d4     12 01 58 FC | 	wrword	#0, local04
283d8     A7 2A 0A FB | 	rdlong	local07, fp wz
283dc     2C 4E 85 F1 | 	sub	fp, #44
283e0     06 FA 05 A6 |  if_e	mov	result1, #6
283e4     04 06 90 AD |  if_e	jmp	#LR__4150
283e8                 | ' 
283e8                 | ' 
283e8                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
283e8     28 4E 05 F1 | 	add	fp, #40
283ec     A7 00 68 FC | 	wrlong	#0, fp
283f0     28 4E 85 F1 | 	sub	fp, #40
283f4     97 22 48 FB | 	callpa	#(@LR__4123-@LR__4122)>>2,fcache_load_ptr_
283f8                 | LR__4122
283f8     18 4E 05 F1 | 	add	fp, #24
283fc     A7 2E 02 FB | 	rdlong	local09, fp
28400     10 4E 05 F1 | 	add	fp, #16
28404     A7 30 02 FB | 	rdlong	local10, fp
28408     28 4E 85 F1 | 	sub	fp, #40
2840c     01 30 66 F0 | 	shl	local10, #1
28410     17 31 02 F1 | 	add	local10, local09
28414     18 33 E2 FA | 	rdword	local11, local10
28418     20 32 0E F2 | 	cmp	local11, #32 wz
2841c     1C 00 90 5D |  if_ne	jmp	#LR__4124
28420     28 4E 05 F1 | 	add	fp, #40
28424     A7 34 02 FB | 	rdlong	local12, fp
28428     1A 27 02 F6 | 	mov	local05, local12
2842c     01 26 06 F1 | 	add	local05, #1
28430     A7 26 62 FC | 	wrlong	local05, fp
28434     28 4E 85 F1 | 	sub	fp, #40
28438     BC FF 9F FD | 	jmp	#LR__4122
2843c                 | LR__4123
2843c                 | LR__4124
2843c     28 4E 05 F1 | 	add	fp, #40
28440     A7 2A 02 FB | 	rdlong	local07, fp
28444     28 4E 85 F1 | 	sub	fp, #40
28448     01 2A 16 F2 | 	cmp	local07, #1 wc
2844c     28 00 90 3D |  if_ae	jmp	#LR__4125
28450     18 4E 05 F1 | 	add	fp, #24
28454     A7 22 02 FB | 	rdlong	local03, fp
28458     10 4E 05 F1 | 	add	fp, #16
2845c     A7 2E 02 FB | 	rdlong	local09, fp
28460     28 4E 85 F1 | 	sub	fp, #40
28464     01 2E 66 F0 | 	shl	local09, #1
28468     11 2F 02 F1 | 	add	local09, local03
2846c     17 1F E2 FA | 	rdword	local01, local09
28470     2E 1E 0E F2 | 	cmp	local01, #46 wz
28474     14 00 90 5D |  if_ne	jmp	#LR__4126
28478                 | LR__4125
28478     10 4E 05 F1 | 	add	fp, #16
2847c     A7 2A C2 FA | 	rdbyte	local07, fp
28480     03 2A 46 F5 | 	or	local07, #3
28484     A7 2A 42 FC | 	wrbyte	local07, fp
28488     10 4E 85 F1 | 	sub	fp, #16
2848c                 | LR__4126
2848c     97 2C 48 FB | 	callpa	#(@LR__4128-@LR__4127)>>2,fcache_load_ptr_
28490                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
28490                 | LR__4127
28490     2C 4E 05 F1 | 	add	fp, #44
28494     A7 2A 02 FB | 	rdlong	local07, fp
28498     2C 4E 85 F1 | 	sub	fp, #44
2849c     01 2A 16 F2 | 	cmp	local07, #1 wc
284a0     44 00 90 CD |  if_b	jmp	#LR__4129
284a4     18 4E 05 F1 | 	add	fp, #24
284a8     A7 28 02 FB | 	rdlong	local06, fp
284ac     14 4E 05 F1 | 	add	fp, #20
284b0     A7 22 02 FB | 	rdlong	local03, fp
284b4     2C 4E 85 F1 | 	sub	fp, #44
284b8     01 22 86 F1 | 	sub	local03, #1
284bc     01 22 66 F0 | 	shl	local03, #1
284c0     14 23 02 F1 | 	add	local03, local06
284c4     11 1F E2 FA | 	rdword	local01, local03
284c8     2E 1E 0E F2 | 	cmp	local01, #46 wz
284cc     18 00 90 AD |  if_e	jmp	#LR__4129
284d0     2C 4E 05 F1 | 	add	fp, #44
284d4     A7 1E 02 FB | 	rdlong	local01, fp
284d8     01 1E 86 F1 | 	sub	local01, #1
284dc     A7 1E 62 FC | 	wrlong	local01, fp
284e0     2C 4E 85 F1 | 	sub	fp, #44
284e4     A8 FF 9F FD | 	jmp	#LR__4127
284e8                 | LR__4128
284e8                 | LR__4129
284e8     04 4E 05 F1 | 	add	fp, #4
284ec     A7 12 02 FB | 	rdlong	arg01, fp
284f0     04 4E 85 F1 | 	sub	fp, #4
284f4     20 12 06 F1 | 	add	arg01, #32
284f8     20 14 06 F6 | 	mov	arg02, #32
284fc     0B 16 06 F6 | 	mov	arg03, #11
28500     09 37 02 F6 | 	mov	local13, arg01
28504     98 00 A0 FD | 	call	#\builtin_bytefill_
28508     1B FB 01 F6 | 	mov	result1, local13
2850c     0C 4E 05 F1 | 	add	fp, #12
28510     A7 00 48 FC | 	wrbyte	#0, fp
28514     A7 2A C2 FA | 	rdbyte	local07, fp
28518     14 4E 05 F1 | 	add	fp, #20
2851c     A7 2A 62 FC | 	wrlong	local07, fp
28520     04 4E 05 F1 | 	add	fp, #4
28524     A7 10 68 FC | 	wrlong	#8, fp
28528     24 4E 85 F1 | 	sub	fp, #36
2852c                 | ' 
2852c                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2852c                 | ' 	i = b = 0; ni = 8;
2852c                 | ' 	for (;;) {
2852c                 | LR__4130
2852c     18 4E 05 F1 | 	add	fp, #24
28530     A7 22 02 FB | 	rdlong	local03, fp
28534     10 4E 05 F1 | 	add	fp, #16
28538     A7 2E 02 FB | 	rdlong	local09, fp
2853c     17 25 02 F6 | 	mov	local04, local09
28540     01 24 06 F1 | 	add	local04, #1
28544     A7 24 62 FC | 	wrlong	local04, fp
28548     01 2E 66 F0 | 	shl	local09, #1
2854c     11 2F 02 F1 | 	add	local09, local03
28550     17 29 E2 FA | 	rdword	local06, local09
28554     14 4E 85 F1 | 	sub	fp, #20
28558     A7 28 52 FC | 	wrword	local06, fp
2855c     A7 2A EA FA | 	rdword	local07, fp wz
28560     14 4E 85 F1 | 	sub	fp, #20
28564     74 03 90 AD |  if_e	jmp	#LR__4146
28568     14 4E 05 F1 | 	add	fp, #20
2856c     A7 2A E2 FA | 	rdword	local07, fp
28570     14 4E 85 F1 | 	sub	fp, #20
28574     20 2A 0E F2 | 	cmp	local07, #32 wz
28578     30 00 90 AD |  if_e	jmp	#LR__4131
2857c     14 4E 05 F1 | 	add	fp, #20
28580     A7 1E E2 FA | 	rdword	local01, fp
28584     14 4E 85 F1 | 	sub	fp, #20
28588     2E 1E 0E F2 | 	cmp	local01, #46 wz
2858c     34 00 90 5D |  if_ne	jmp	#LR__4132
28590     28 4E 05 F1 | 	add	fp, #40
28594     A7 24 02 FB | 	rdlong	local04, fp
28598     04 4E 05 F1 | 	add	fp, #4
2859c     A7 30 02 FB | 	rdlong	local10, fp
285a0     2C 4E 85 F1 | 	sub	fp, #44
285a4     18 25 0A F2 | 	cmp	local04, local10 wz
285a8     18 00 90 AD |  if_e	jmp	#LR__4132
285ac                 | LR__4131
285ac     10 4E 05 F1 | 	add	fp, #16
285b0     A7 2A C2 FA | 	rdbyte	local07, fp
285b4     03 2A 46 F5 | 	or	local07, #3
285b8     A7 2A 42 FC | 	wrbyte	local07, fp
285bc     10 4E 85 F1 | 	sub	fp, #16
285c0                 | ' 			cf |=  0x01  |  0x02 ;
285c0                 | ' 			continue;
285c0     68 FF 9F FD | 	jmp	#LR__4130
285c4                 | LR__4132
285c4     20 4E 05 F1 | 	add	fp, #32
285c8     A7 2A 02 FB | 	rdlong	local07, fp
285cc     04 4E 05 F1 | 	add	fp, #4
285d0     A7 1E 02 FB | 	rdlong	local01, fp
285d4     24 4E 85 F1 | 	sub	fp, #36
285d8     0F 2B 12 F2 | 	cmp	local07, local01 wc
285dc     1C 00 90 3D |  if_ae	jmp	#LR__4133
285e0     28 4E 05 F1 | 	add	fp, #40
285e4     A7 2C 02 FB | 	rdlong	local08, fp
285e8     04 4E 05 F1 | 	add	fp, #4
285ec     A7 30 02 FB | 	rdlong	local10, fp
285f0     2C 4E 85 F1 | 	sub	fp, #44
285f4     18 2D 0A F2 | 	cmp	local08, local10 wz
285f8     B0 00 90 5D |  if_ne	jmp	#LR__4135
285fc                 | LR__4133
285fc     24 4E 05 F1 | 	add	fp, #36
28600     A7 2A 02 FB | 	rdlong	local07, fp
28604     24 4E 85 F1 | 	sub	fp, #36
28608     0B 2A 0E F2 | 	cmp	local07, #11 wz
2860c     18 00 90 5D |  if_ne	jmp	#LR__4134
28610     10 4E 05 F1 | 	add	fp, #16
28614     A7 2A C2 FA | 	rdbyte	local07, fp
28618     03 2A 46 F5 | 	or	local07, #3
2861c     A7 2A 42 FC | 	wrbyte	local07, fp
28620     10 4E 85 F1 | 	sub	fp, #16
28624                 | ' 				cf |=  0x01  |  0x02 ;
28624                 | ' 				break;
28624     B4 02 90 FD | 	jmp	#LR__4146
28628                 | LR__4134
28628     28 4E 05 F1 | 	add	fp, #40
2862c     A7 2A 02 FB | 	rdlong	local07, fp
28630     04 4E 05 F1 | 	add	fp, #4
28634     A7 1E 02 FB | 	rdlong	local01, fp
28638     2C 4E 85 F1 | 	sub	fp, #44
2863c     0F 2B 0A F2 | 	cmp	local07, local01 wz
28640     10 4E 05 51 |  if_ne	add	fp, #16
28644     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
28648     03 2A 46 55 |  if_ne	or	local07, #3
2864c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
28650     10 4E 85 51 |  if_ne	sub	fp, #16
28654     28 4E 05 F1 | 	add	fp, #40
28658     A7 2A 02 FB | 	rdlong	local07, fp
2865c     04 4E 05 F1 | 	add	fp, #4
28660     A7 20 02 FB | 	rdlong	local02, fp
28664     2C 4E 85 F1 | 	sub	fp, #44
28668     10 2B 1A F2 | 	cmp	local07, local02 wcz
2866c     6C 02 90 1D |  if_a	jmp	#LR__4146
28670     2C 4E 05 F1 | 	add	fp, #44
28674     A7 2A 02 FB | 	rdlong	local07, fp
28678     04 4E 85 F1 | 	sub	fp, #4
2867c     A7 2A 62 FC | 	wrlong	local07, fp
28680     08 4E 85 F1 | 	sub	fp, #8
28684     A7 10 68 FC | 	wrlong	#8, fp
28688     04 4E 05 F1 | 	add	fp, #4
2868c     A7 16 68 FC | 	wrlong	#11, fp
28690     18 4E 85 F1 | 	sub	fp, #24
28694     A7 32 C2 FA | 	rdbyte	local11, fp
28698     19 2B E2 F8 | 	getbyte	local07, local11, #0
2869c     02 2A 66 F0 | 	shl	local07, #2
286a0     A7 2A 42 FC | 	wrbyte	local07, fp
286a4     0C 4E 85 F1 | 	sub	fp, #12
286a8                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
286a8                 | ' 			continue;
286a8     80 FE 9F FD | 	jmp	#LR__4130
286ac                 | LR__4135
286ac     14 4E 05 F1 | 	add	fp, #20
286b0     A7 2A E2 FA | 	rdword	local07, fp
286b4     14 4E 85 F1 | 	sub	fp, #20
286b8     80 2A 16 F2 | 	cmp	local07, #128 wc
286bc     6C 00 90 CD |  if_b	jmp	#LR__4137
286c0     10 4E 05 F1 | 	add	fp, #16
286c4     A7 2A C2 FA | 	rdbyte	local07, fp
286c8     02 2A 46 F5 | 	or	local07, #2
286cc     A7 2A 42 FC | 	wrbyte	local07, fp
286d0     04 4E 05 F1 | 	add	fp, #4
286d4     A7 12 E2 FA | 	rdword	arg01, fp
286d8     14 4E 85 F1 | 	sub	fp, #20
286dc     01 00 00 FF 
286e0     52 15 06 F6 | 	mov	arg02, ##850
286e4     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
286e8     14 4E 05 F1 | 	add	fp, #20
286ec     A7 FA 51 FC | 	wrword	result1, fp
286f0     A7 2A E2 FA | 	rdword	local07, fp
286f4     14 4E 85 F1 | 	sub	fp, #20
286f8     80 2A CE F7 | 	test	local07, #128 wz
286fc     2C 00 90 AD |  if_e	jmp	#LR__4136
28700     14 4E 05 F1 | 	add	fp, #20
28704     A7 20 E2 FA | 	rdword	local02, fp
28708     7F 20 06 F5 | 	and	local02, #127
2870c     01 00 00 FF 
28710     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
28714     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
28718     10 2B C2 FA | 	rdbyte	local07, local02
2871c     A7 2A 52 FC | 	wrword	local07, fp
28720     14 4E 85 F1 | 	sub	fp, #20
28724     01 00 00 FF 
28728     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2872c                 | LR__4136
2872c                 | LR__4137
2872c     14 4E 05 F1 | 	add	fp, #20
28730     A7 2A E2 FA | 	rdword	local07, fp
28734     14 4E 85 F1 | 	sub	fp, #20
28738     00 2B 16 F2 | 	cmp	local07, #256 wc
2873c     88 00 90 CD |  if_b	jmp	#LR__4139
28740     24 4E 05 F1 | 	add	fp, #36
28744     A7 2A 02 FB | 	rdlong	local07, fp
28748     01 2A 86 F1 | 	sub	local07, #1
2874c     04 4E 85 F1 | 	sub	fp, #4
28750     A7 20 02 FB | 	rdlong	local02, fp
28754     20 4E 85 F1 | 	sub	fp, #32
28758     15 21 12 F2 | 	cmp	local02, local07 wc
2875c     2C 00 90 CD |  if_b	jmp	#LR__4138
28760     10 4E 05 F1 | 	add	fp, #16
28764     A7 32 C2 FA | 	rdbyte	local11, fp
28768     19 2B E2 F8 | 	getbyte	local07, local11, #0
2876c     03 2A 46 F5 | 	or	local07, #3
28770     A7 2A 42 FC | 	wrbyte	local07, fp
28774     14 4E 05 F1 | 	add	fp, #20
28778     A7 2A 02 FB | 	rdlong	local07, fp
2877c     04 4E 85 F1 | 	sub	fp, #4
28780     A7 2A 62 FC | 	wrlong	local07, fp
28784     20 4E 85 F1 | 	sub	fp, #32
28788                 | ' 				cf |=  0x01  |  0x02 ;
28788                 | ' 				i = ni; continue;
28788     A0 FD 9F FD | 	jmp	#LR__4130
2878c                 | LR__4138
2878c     04 4E 05 F1 | 	add	fp, #4
28790     A7 2E 02 FB | 	rdlong	local09, fp
28794     1C 4E 05 F1 | 	add	fp, #28
28798     A7 30 02 FB | 	rdlong	local10, fp
2879c     18 25 02 F6 | 	mov	local04, local10
287a0     01 24 06 F1 | 	add	local04, #1
287a4     A7 24 62 FC | 	wrlong	local04, fp
287a8     20 2E 06 F1 | 	add	local09, #32
287ac     17 31 02 F1 | 	add	local10, local09
287b0     0C 4E 85 F1 | 	sub	fp, #12
287b4     A7 22 E2 FA | 	rdword	local03, fp
287b8     14 4E 85 F1 | 	sub	fp, #20
287bc     08 22 46 F0 | 	shr	local03, #8
287c0     18 23 42 FC | 	wrbyte	local03, local10
287c4     D4 00 90 FD | 	jmp	#LR__4145
287c8                 | LR__4139
287c8     14 4E 05 F1 | 	add	fp, #20
287cc     A7 2A EA FA | 	rdword	local07, fp wz
287d0     14 4E 85 F1 | 	sub	fp, #20
287d4     20 00 90 AD |  if_e	jmp	#LR__4140
287d8     70 01 00 FF 
287dc     69 13 06 F6 | 	mov	arg01, ##@LR__4773
287e0     14 4E 05 F1 | 	add	fp, #20
287e4     A7 14 E2 FA | 	rdword	arg02, fp
287e8     14 4E 85 F1 | 	sub	fp, #20
287ec     48 CB BF FD | 	call	#_fatfs_cc_strchr
287f0     00 FA 0D F2 | 	cmp	result1, #0 wz
287f4     20 00 90 AD |  if_e	jmp	#LR__4141
287f8                 | LR__4140
287f8     14 4E 05 F1 | 	add	fp, #20
287fc     A7 BE 58 FC | 	wrword	#95, fp
28800     04 4E 85 F1 | 	sub	fp, #4
28804     A7 2A C2 FA | 	rdbyte	local07, fp
28808     03 2A 46 F5 | 	or	local07, #3
2880c     A7 2A 42 FC | 	wrbyte	local07, fp
28810     10 4E 85 F1 | 	sub	fp, #16
28814     84 00 90 FD | 	jmp	#LR__4144
28818                 | LR__4141
28818     14 4E 05 F1 | 	add	fp, #20
2881c     A7 2A E2 FA | 	rdword	local07, fp
28820     14 4E 85 F1 | 	sub	fp, #20
28824     41 2A 16 F2 | 	cmp	local07, #65 wc
28828     24 00 90 CD |  if_b	jmp	#LR__4142
2882c     14 4E 05 F1 | 	add	fp, #20
28830     A7 1E E2 FA | 	rdword	local01, fp
28834     14 4E 85 F1 | 	sub	fp, #20
28838     5B 1E 16 F2 | 	cmp	local01, #91 wc
2883c     0C 4E 05 C1 |  if_b	add	fp, #12
28840     A7 2A C2 CA |  if_b	rdbyte	local07, fp
28844     02 2A 46 C5 |  if_b	or	local07, #2
28848     A7 2A 42 CC |  if_b	wrbyte	local07, fp
2884c     0C 4E 85 C1 |  if_b	sub	fp, #12
28850                 | LR__4142
28850     14 4E 05 F1 | 	add	fp, #20
28854     A7 2A E2 FA | 	rdword	local07, fp
28858     14 4E 85 F1 | 	sub	fp, #20
2885c     61 2A 16 F2 | 	cmp	local07, #97 wc
28860     38 00 90 CD |  if_b	jmp	#LR__4143
28864     14 4E 05 F1 | 	add	fp, #20
28868     A7 1E E2 FA | 	rdword	local01, fp
2886c     14 4E 85 F1 | 	sub	fp, #20
28870     7B 1E 16 F2 | 	cmp	local01, #123 wc
28874     24 00 90 3D |  if_ae	jmp	#LR__4143
28878     0C 4E 05 F1 | 	add	fp, #12
2887c     A7 2A C2 FA | 	rdbyte	local07, fp
28880     01 2A 46 F5 | 	or	local07, #1
28884     A7 2A 42 FC | 	wrbyte	local07, fp
28888     08 4E 05 F1 | 	add	fp, #8
2888c     A7 2A E2 FA | 	rdword	local07, fp
28890     20 2A 86 F1 | 	sub	local07, #32
28894     A7 2A 52 FC | 	wrword	local07, fp
28898     14 4E 85 F1 | 	sub	fp, #20
2889c                 | LR__4143
2889c                 | LR__4144
2889c                 | LR__4145
2889c     04 4E 05 F1 | 	add	fp, #4
288a0     A7 32 02 FB | 	rdlong	local11, fp
288a4     19 2F 02 F6 | 	mov	local09, local11
288a8     1C 4E 05 F1 | 	add	fp, #28
288ac     A7 20 02 FB | 	rdlong	local02, fp
288b0     10 25 02 F6 | 	mov	local04, local02
288b4     01 24 06 F1 | 	add	local04, #1
288b8     A7 24 62 FC | 	wrlong	local04, fp
288bc     10 31 02 F6 | 	mov	local10, local02
288c0     20 2E 06 F1 | 	add	local09, #32
288c4     17 31 02 F1 | 	add	local10, local09
288c8     0C 4E 85 F1 | 	sub	fp, #12
288cc     A7 22 E2 FA | 	rdword	local03, fp
288d0     14 4E 85 F1 | 	sub	fp, #20
288d4     18 23 42 FC | 	wrbyte	local03, local10
288d8     50 FC 9F FD | 	jmp	#LR__4130
288dc                 | LR__4146
288dc     04 4E 05 F1 | 	add	fp, #4
288e0     A7 32 02 FB | 	rdlong	local11, fp
288e4     04 4E 85 F1 | 	sub	fp, #4
288e8     20 32 06 F1 | 	add	local11, #32
288ec     19 2B C2 FA | 	rdbyte	local07, local11
288f0     E5 2A 0E F2 | 	cmp	local07, #229 wz
288f4     04 4E 05 A1 |  if_e	add	fp, #4
288f8     A7 2A 02 AB |  if_e	rdlong	local07, fp
288fc     04 4E 85 A1 |  if_e	sub	fp, #4
28900     20 2A 06 A1 |  if_e	add	local07, #32
28904     15 0B 48 AC |  if_e	wrbyte	#5, local07
28908     24 4E 05 F1 | 	add	fp, #36
2890c     A7 2A 02 FB | 	rdlong	local07, fp
28910     24 4E 85 F1 | 	sub	fp, #36
28914     08 2A 0E F2 | 	cmp	local07, #8 wz
28918     0C 4E 05 A1 |  if_e	add	fp, #12
2891c     A7 2A C2 AA |  if_e	rdbyte	local07, fp
28920     02 2A 66 A0 |  if_e	shl	local07, #2
28924     A7 2A 42 AC |  if_e	wrbyte	local07, fp
28928     0C 4E 85 A1 |  if_e	sub	fp, #12
2892c     0C 4E 05 F1 | 	add	fp, #12
28930     A7 2A C2 FA | 	rdbyte	local07, fp
28934     0C 4E 85 F1 | 	sub	fp, #12
28938     0C 2A 06 F5 | 	and	local07, #12
2893c     0C 2A 0E F2 | 	cmp	local07, #12 wz
28940     18 00 90 AD |  if_e	jmp	#LR__4147
28944     0C 4E 05 F1 | 	add	fp, #12
28948     A7 1E C2 FA | 	rdbyte	local01, fp
2894c     0C 4E 85 F1 | 	sub	fp, #12
28950     03 1E 06 F5 | 	and	local01, #3
28954     03 1E 0E F2 | 	cmp	local01, #3 wz
28958     14 00 90 5D |  if_ne	jmp	#LR__4148
2895c                 | LR__4147
2895c     10 4E 05 F1 | 	add	fp, #16
28960     A7 2A C2 FA | 	rdbyte	local07, fp
28964     02 2A 46 F5 | 	or	local07, #2
28968     A7 2A 42 FC | 	wrbyte	local07, fp
2896c     10 4E 85 F1 | 	sub	fp, #16
28970                 | LR__4148
28970     10 4E 05 F1 | 	add	fp, #16
28974     A7 2A C2 FA | 	rdbyte	local07, fp
28978     10 4E 85 F1 | 	sub	fp, #16
2897c     02 2A CE F7 | 	test	local07, #2 wz
28980     48 00 90 5D |  if_ne	jmp	#LR__4149
28984     0C 4E 05 F1 | 	add	fp, #12
28988     A7 2A C2 FA | 	rdbyte	local07, fp
2898c     0C 4E 85 F1 | 	sub	fp, #12
28990     01 2A CE F7 | 	test	local07, #1 wz
28994     10 4E 05 51 |  if_ne	add	fp, #16
28998     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2899c     10 2A 46 55 |  if_ne	or	local07, #16
289a0     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
289a4     10 4E 85 51 |  if_ne	sub	fp, #16
289a8     0C 4E 05 F1 | 	add	fp, #12
289ac     A7 2A C2 FA | 	rdbyte	local07, fp
289b0     0C 4E 85 F1 | 	sub	fp, #12
289b4     04 2A CE F7 | 	test	local07, #4 wz
289b8     10 4E 05 51 |  if_ne	add	fp, #16
289bc     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
289c0     08 2A 46 55 |  if_ne	or	local07, #8
289c4     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
289c8     10 4E 85 51 |  if_ne	sub	fp, #16
289cc                 | LR__4149
289cc     04 4E 05 F1 | 	add	fp, #4
289d0     A7 2A 02 FB | 	rdlong	local07, fp
289d4     0C 4E 05 F1 | 	add	fp, #12
289d8     A7 1E C2 FA | 	rdbyte	local01, fp
289dc     10 4E 85 F1 | 	sub	fp, #16
289e0     2B 2A 06 F1 | 	add	local07, #43
289e4     15 1F 42 FC | 	wrbyte	local01, local07
289e8                 | ' 	}
289e8                 | ' 
289e8                 | ' 	dp->fn[ 11 ] = cf;
289e8                 | ' 
289e8                 | ' 	return FR_OK;
289e8     00 FA 05 F6 | 	mov	result1, #0
289ec                 | LR__4150
289ec     A7 F0 03 F6 | 	mov	ptra, fp
289f0     B2 00 A0 FD | 	call	#popregs_
289f4                 | _fatfs_cc_create_name_ret
289f4     2D 00 64 FD | 	ret
289f8                 | 
289f8                 | _fatfs_cc_follow_path
289f8     02 4A 05 F6 | 	mov	COUNT_, #2
289fc     A8 00 A0 FD | 	call	#pushregs_
28a00     18 F0 07 F1 | 	add	ptra, #24
28a04     04 4E 05 F1 | 	add	fp, #4
28a08     A7 12 62 FC | 	wrlong	arg01, fp
28a0c     04 4E 05 F1 | 	add	fp, #4
28a10     A7 14 62 FC | 	wrlong	arg02, fp
28a14     04 4E 85 F1 | 	sub	fp, #4
28a18     A7 FA 01 FB | 	rdlong	result1, fp
28a1c     FD 1E 02 FB | 	rdlong	local01, result1
28a20     10 4E 05 F1 | 	add	fp, #16
28a24     A7 1E 62 FC | 	wrlong	local01, fp
28a28     14 4E 85 F1 | 	sub	fp, #20
28a2c     97 24 48 FB | 	callpa	#(@LR__4162-@LR__4160)>>2,fcache_load_ptr_
28a30                 | ' )
28a30                 | ' {
28a30                 | ' 	FRESULT res;
28a30                 | ' 	BYTE ns;
28a30                 | ' 	FATFS *fs = dp->obj.fs;
28a30                 | ' #line 3034 "ff.c"
28a30                 | ' 	{
28a30                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
28a30                 | LR__4160
28a30     08 4E 05 F1 | 	add	fp, #8
28a34     A7 1E 02 FB | 	rdlong	local01, fp
28a38     08 4E 85 F1 | 	sub	fp, #8
28a3c     0F 1F C2 FA | 	rdbyte	local01, local01
28a40     2F 1E 0E F2 | 	cmp	local01, #47 wz
28a44     18 00 90 AD |  if_e	jmp	#LR__4161
28a48     08 4E 05 F1 | 	add	fp, #8
28a4c     A7 1E 02 FB | 	rdlong	local01, fp
28a50     08 4E 85 F1 | 	sub	fp, #8
28a54     0F 1F C2 FA | 	rdbyte	local01, local01
28a58     5C 1E 0E F2 | 	cmp	local01, #92 wz
28a5c     18 00 90 5D |  if_ne	jmp	#LR__4163
28a60                 | LR__4161
28a60     08 4E 05 F1 | 	add	fp, #8
28a64     A7 1E 02 FB | 	rdlong	local01, fp
28a68     01 1E 06 F1 | 	add	local01, #1
28a6c     A7 1E 62 FC | 	wrlong	local01, fp
28a70     08 4E 85 F1 | 	sub	fp, #8
28a74     B8 FF 9F FD | 	jmp	#LR__4160
28a78                 | LR__4162
28a78                 | LR__4163
28a78     04 4E 05 F1 | 	add	fp, #4
28a7c     A7 1E 02 FB | 	rdlong	local01, fp
28a80     08 1E 06 F1 | 	add	local01, #8
28a84     0F 01 68 FC | 	wrlong	#0, local01
28a88     04 4E 05 F1 | 	add	fp, #4
28a8c     A7 1E 02 FB | 	rdlong	local01, fp
28a90     08 4E 85 F1 | 	sub	fp, #8
28a94     0F 1F C2 FA | 	rdbyte	local01, local01
28a98     20 1E 16 F2 | 	cmp	local01, #32 wc
28a9c     30 00 90 3D |  if_ae	jmp	#LR__4164
28aa0     04 4E 05 F1 | 	add	fp, #4
28aa4     A7 1E 02 FB | 	rdlong	local01, fp
28aa8     2B 1E 06 F1 | 	add	local01, #43
28aac     0F 01 49 FC | 	wrbyte	#128, local01
28ab0     A7 12 02 FB | 	rdlong	arg01, fp
28ab4     04 4E 85 F1 | 	sub	fp, #4
28ab8     00 14 06 F6 | 	mov	arg02, #0
28abc     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
28ac0     0C 4E 05 F1 | 	add	fp, #12
28ac4     A7 FA 61 FC | 	wrlong	result1, fp
28ac8     0C 4E 85 F1 | 	sub	fp, #12
28acc     1C 01 90 FD | 	jmp	#LR__4168
28ad0                 | LR__4164
28ad0                 | ' 		for (;;) {
28ad0                 | LR__4165
28ad0     04 4E 05 F1 | 	add	fp, #4
28ad4     A7 12 02 FB | 	rdlong	arg01, fp
28ad8     04 4E 05 F1 | 	add	fp, #4
28adc     A7 14 02 F6 | 	mov	arg02, fp
28ae0     08 4E 85 F1 | 	sub	fp, #8
28ae4     14 F6 BF FD | 	call	#_fatfs_cc_create_name
28ae8     0C 4E 05 F1 | 	add	fp, #12
28aec     A7 FA 61 FC | 	wrlong	result1, fp
28af0     00 FA 4D F2 | 	cmps	result1, #0 wz
28af4     0C 4E 85 F1 | 	sub	fp, #12
28af8     F0 00 90 5D |  if_ne	jmp	#LR__4167
28afc     04 4E 05 F1 | 	add	fp, #4
28b00     A7 12 02 FB | 	rdlong	arg01, fp
28b04     04 4E 85 F1 | 	sub	fp, #4
28b08     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
28b0c     0C 4E 05 F1 | 	add	fp, #12
28b10     A7 FA 61 FC | 	wrlong	result1, fp
28b14     08 4E 85 F1 | 	sub	fp, #8
28b18     A7 1E 02 FB | 	rdlong	local01, fp
28b1c     2B 1E 06 F1 | 	add	local01, #43
28b20     0F 1F C2 FA | 	rdbyte	local01, local01
28b24     0C 4E 05 F1 | 	add	fp, #12
28b28     A7 1E 42 FC | 	wrbyte	local01, fp
28b2c     04 4E 85 F1 | 	sub	fp, #4
28b30     A7 1E 0A FB | 	rdlong	local01, fp wz
28b34     0C 4E 85 F1 | 	sub	fp, #12
28b38     34 00 90 AD |  if_e	jmp	#LR__4166
28b3c     0C 4E 05 F1 | 	add	fp, #12
28b40     A7 1E 02 FB | 	rdlong	local01, fp
28b44     0C 4E 85 F1 | 	sub	fp, #12
28b48     04 1E 0E F2 | 	cmp	local01, #4 wz
28b4c     9C 00 90 5D |  if_ne	jmp	#LR__4167
28b50     10 4E 05 F1 | 	add	fp, #16
28b54     A7 1E C2 FA | 	rdbyte	local01, fp
28b58     10 4E 85 F1 | 	sub	fp, #16
28b5c     04 1E CE F7 | 	test	local01, #4 wz
28b60     0C 4E 05 A1 |  if_e	add	fp, #12
28b64     A7 0A 68 AC |  if_e	wrlong	#5, fp
28b68     0C 4E 85 A1 |  if_e	sub	fp, #12
28b6c                 | ' 					}
28b6c                 | ' 				}
28b6c                 | ' 				break;
28b6c     7C 00 90 FD | 	jmp	#LR__4167
28b70                 | LR__4166
28b70     10 4E 05 F1 | 	add	fp, #16
28b74     A7 1E C2 FA | 	rdbyte	local01, fp
28b78     10 4E 85 F1 | 	sub	fp, #16
28b7c     04 1E CE F7 | 	test	local01, #4 wz
28b80     68 00 90 5D |  if_ne	jmp	#LR__4167
28b84     04 4E 05 F1 | 	add	fp, #4
28b88     A7 1E 02 FB | 	rdlong	local01, fp
28b8c     04 4E 85 F1 | 	sub	fp, #4
28b90     06 1E 06 F1 | 	add	local01, #6
28b94     0F 1F C2 FA | 	rdbyte	local01, local01
28b98     10 1E CE F7 | 	test	local01, #16 wz
28b9c     0C 4E 05 A1 |  if_e	add	fp, #12
28ba0     A7 0A 68 AC |  if_e	wrlong	#5, fp
28ba4     0C 4E 85 A1 |  if_e	sub	fp, #12
28ba8                 | ' 				res = FR_NO_PATH; break;
28ba8     40 00 90 AD |  if_e	jmp	#LR__4167
28bac     04 4E 05 F1 | 	add	fp, #4
28bb0     A7 20 02 FB | 	rdlong	local02, fp
28bb4     10 1F 02 F6 | 	mov	local01, local02
28bb8     10 4E 05 F1 | 	add	fp, #16
28bbc     A7 14 02 FB | 	rdlong	arg02, fp
28bc0     0A 13 02 F6 | 	mov	arg01, arg02
28bc4     34 14 06 F1 | 	add	arg02, #52
28bc8     14 4E 85 F1 | 	sub	fp, #20
28bcc     10 20 06 F1 | 	add	local02, #16
28bd0     10 21 02 FB | 	rdlong	local02, local02
28bd4     FF 21 06 F5 | 	and	local02, #511
28bd8     10 15 02 F1 | 	add	arg02, local02
28bdc     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
28be0     08 1E 06 F1 | 	add	local01, #8
28be4     0F FB 61 FC | 	wrlong	result1, local01
28be8     E4 FE 9F FD | 	jmp	#LR__4165
28bec                 | LR__4167
28bec                 | LR__4168
28bec                 | ' 			}
28bec                 | ' #line 3090 "ff.c"
28bec                 | ' 			{
28bec                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
28bec                 | ' 			}
28bec                 | ' 		}
28bec                 | ' 	}
28bec                 | ' 
28bec                 | ' 	return res;
28bec     0C 4E 05 F1 | 	add	fp, #12
28bf0     A7 FA 01 FB | 	rdlong	result1, fp
28bf4     0C 4E 85 F1 | 	sub	fp, #12
28bf8     A7 F0 03 F6 | 	mov	ptra, fp
28bfc     B2 00 A0 FD | 	call	#popregs_
28c00                 | _fatfs_cc_follow_path_ret
28c00     2D 00 64 FD | 	ret
28c04                 | 
28c04                 | _fatfs_cc_get_ldnumber
28c04     01 00 66 F6 | 	neg	_var01, #1
28c08     09 03 0A FB | 	rdlong	_var02, arg01 wz
28c0c     01 05 02 F6 | 	mov	_var03, _var02
28c10     01 FA 65 A6 |  if_e	neg	result1, #1
28c14     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
28c18     97 10 48 FB | 	callpa	#(@LR__4171-@LR__4170)>>2,fcache_load_ptr_
28c1c                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
28c1c                 | LR__4170
28c1c     02 07 C2 FA | 	rdbyte	_var04, _var03
28c20     03 FB E1 F8 | 	getbyte	result1, _var04, #0
28c24     20 FA 15 F2 | 	cmp	result1, #32 wc
28c28     01 04 06 F1 | 	add	_var03, #1
28c2c     03 09 02 36 |  if_ae	mov	_var05, _var04
28c30     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
28c34     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
28c38     E0 FF 9F 1D |  if_a	jmp	#LR__4170
28c3c                 | LR__4171
28c3c     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
28c40     3A 06 0E F2 | 	cmp	_var04, #58 wz
28c44     40 00 90 5D |  if_ne	jmp	#LR__4173
28c48     01 0A 06 F6 | 	mov	_var06, #1
28c4c     01 09 C2 FA | 	rdbyte	_var05, _var02
28c50     30 08 16 F2 | 	cmp	_var05, #48 wc
28c54     1C 00 90 CD |  if_b	jmp	#LR__4172
28c58     01 09 C2 FA | 	rdbyte	_var05, _var02
28c5c     3A 08 16 F2 | 	cmp	_var05, #58 wc
28c60     01 0D 02 C6 |  if_b	mov	_var07, _var02
28c64     02 0C 06 C1 |  if_b	add	_var07, #2
28c68     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
28c6c     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
28c70     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
28c74                 | LR__4172
28c74     01 0A 56 F2 | 	cmps	_var06, #1 wc
28c78     05 01 02 C6 |  if_b	mov	_var01, _var06
28c7c     09 05 62 CC |  if_b	wrlong	_var03, arg01
28c80                 | ' 			vol = i;
28c80                 | ' 			*path = tt;
28c80                 | ' 		}
28c80                 | ' 		return vol;
28c80     00 FB 01 F6 | 	mov	result1, _var01
28c84     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
28c88                 | LR__4173
28c88                 | ' 	}
28c88                 | ' #line 3170 "ff.c"
28c88                 | ' 	vol = 0;
28c88                 | ' 
28c88                 | ' 	return vol;
28c88     00 FA 05 F6 | 	mov	result1, #0
28c8c                 | _fatfs_cc_get_ldnumber_ret
28c8c     2D 00 64 FD | 	ret
28c90                 | 
28c90                 | _fatfs_cc_check_fs
28c90     04 4A 05 F6 | 	mov	COUNT_, #4
28c94     A8 00 A0 FD | 	call	#pushregs_
28c98     09 1F 02 F6 | 	mov	local01, arg01
28c9c     03 1E 06 F1 | 	add	local01, #3
28ca0     0F 01 48 FC | 	wrbyte	#0, local01
28ca4     2D 1E 06 F1 | 	add	local01, #45
28ca8     FF FF FF FF 
28cac     0F FF 6B FC | 	wrlong	##-1, local01
28cb0     30 1E 86 F1 | 	sub	local01, #48
28cb4     0F 13 02 F6 | 	mov	arg01, local01
28cb8     18 D5 BF FD | 	call	#_fatfs_cc_move_window
28cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
28cc0     04 FA 05 56 |  if_ne	mov	result1, #4
28cc4     94 01 90 5D |  if_ne	jmp	#LR__4184
28cc8     34 1E 06 F1 | 	add	local01, #52
28ccc     0F 13 02 F6 | 	mov	arg01, local01
28cd0     FE 13 06 F1 | 	add	arg01, #510
28cd4                 | ' {
28cd4                 | ' 
28cd4                 | ' 	return *((WORD*)ptr);
28cd4     09 21 E2 FA | 	rdword	local02, arg01
28cd8     0F 23 C2 FA | 	rdbyte	local03, local01
28cdc     34 1E 86 F1 | 	sub	local01, #52
28ce0     11 25 E2 F8 | 	getbyte	local04, local03, #0
28ce4     EB 24 0E F2 | 	cmp	local04, #235 wz
28ce8     11 17 02 56 |  if_ne	mov	arg03, local03
28cec     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
28cf0     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
28cf4     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
28cf8     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
28cfc     44 01 90 5D |  if_ne	jmp	#LR__4183
28d00     10 25 32 F9 | 	getword	local04, local02, #0
28d04     55 00 00 FF 
28d08     55 24 0E F2 | 	cmp	local04, ##43605 wz
28d0c     2C 00 90 5D |  if_ne	jmp	#LR__4180
28d10     34 1E 06 F1 | 	add	local01, #52
28d14     0F 13 02 F6 | 	mov	arg01, local01
28d18     34 1E 86 F1 | 	sub	local01, #52
28d1c     52 12 06 F1 | 	add	arg01, #82
28d20     70 01 00 FF 
28d24     70 15 06 F6 | 	mov	arg02, ##@LR__4774
28d28     08 16 06 F6 | 	mov	arg03, #8
28d2c     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
28d30     00 FA 0D F2 | 	cmp	result1, #0 wz
28d34                 | ' 			return 0;
28d34     00 FA 05 A6 |  if_e	mov	result1, #0
28d38     20 01 90 AD |  if_e	jmp	#LR__4184
28d3c                 | LR__4180
28d3c     34 1E 06 F1 | 	add	local01, #52
28d40     0F 13 02 F6 | 	mov	arg01, local01
28d44     0B 12 06 F1 | 	add	arg01, #11
28d48                 | ' {
28d48                 | ' 
28d48                 | ' 	return *((WORD*)ptr);
28d48     09 FB E1 FA | 	rdword	result1, arg01
28d4c     0D 1E 06 F1 | 	add	local01, #13
28d50     0F 23 C2 FA | 	rdbyte	local03, local01
28d54     41 1E 86 F1 | 	sub	local01, #65
28d58     FD 24 32 F9 | 	getword	local04, result1, #0
28d5c     FD 14 32 F9 | 	getword	arg02, result1, #0
28d60     01 14 86 F1 | 	sub	arg02, #1
28d64     0A 25 CA F7 | 	test	local04, arg02 wz
28d68     D8 00 90 5D |  if_ne	jmp	#LR__4182
28d6c     FD 14 32 F9 | 	getword	arg02, result1, #0
28d70     01 00 00 FF 
28d74     00 14 16 F2 | 	cmp	arg02, ##512 wc
28d78     C8 00 90 CD |  if_b	jmp	#LR__4182
28d7c     FD 14 32 F9 | 	getword	arg02, result1, #0
28d80     01 00 00 FF 
28d84     01 14 16 F2 | 	cmp	arg02, ##513 wc
28d88     B8 00 90 3D |  if_ae	jmp	#LR__4182
28d8c     11 13 02 F6 | 	mov	arg01, local03
28d90     07 12 4E F7 | 	zerox	arg01, #7 wz
28d94     AC 00 90 AD |  if_e	jmp	#LR__4182
28d98     11 13 E2 F8 | 	getbyte	arg01, local03, #0
28d9c     11 23 E2 F8 | 	getbyte	local03, local03, #0
28da0     01 22 86 F1 | 	sub	local03, #1
28da4     11 13 CA F7 | 	test	arg01, local03 wz
28da8     98 00 90 5D |  if_ne	jmp	#LR__4182
28dac     34 1E 06 F1 | 	add	local01, #52
28db0     0F 13 02 F6 | 	mov	arg01, local01
28db4     34 1E 86 F1 | 	sub	local01, #52
28db8     0E 12 06 F1 | 	add	arg01, #14
28dbc                 | ' {
28dbc                 | ' 
28dbc                 | ' 	return *((WORD*)ptr);
28dbc     09 FB E9 FA | 	rdword	result1, arg01 wz
28dc0     80 00 90 AD |  if_e	jmp	#LR__4182
28dc4     44 1E 06 F1 | 	add	local01, #68
28dc8     0F 13 C2 FA | 	rdbyte	arg01, local01
28dcc     44 1E 86 F1 | 	sub	local01, #68
28dd0     01 12 86 F1 | 	sub	arg01, #1
28dd4     02 12 16 F2 | 	cmp	arg01, #2 wc
28dd8     68 00 90 3D |  if_ae	jmp	#LR__4182
28ddc     34 1E 06 F1 | 	add	local01, #52
28de0     0F 13 02 F6 | 	mov	arg01, local01
28de4     34 1E 86 F1 | 	sub	local01, #52
28de8     11 12 06 F1 | 	add	arg01, #17
28dec                 | ' {
28dec                 | ' 
28dec                 | ' 	return *((WORD*)ptr);
28dec     09 FB E9 FA | 	rdword	result1, arg01 wz
28df0     50 00 90 AD |  if_e	jmp	#LR__4182
28df4     34 1E 06 F1 | 	add	local01, #52
28df8     0F 13 02 F6 | 	mov	arg01, local01
28dfc     34 1E 86 F1 | 	sub	local01, #52
28e00     13 12 06 F1 | 	add	arg01, #19
28e04                 | ' {
28e04                 | ' 
28e04                 | ' 	return *((WORD*)ptr);
28e04     09 FB E1 FA | 	rdword	result1, arg01
28e08     FD 22 32 F9 | 	getword	local03, result1, #0
28e0c     80 22 16 F2 | 	cmp	local03, #128 wc
28e10     20 00 90 3D |  if_ae	jmp	#LR__4181
28e14     34 1E 06 F1 | 	add	local01, #52
28e18     0F 13 02 F6 | 	mov	arg01, local01
28e1c     34 1E 86 F1 | 	sub	local01, #52
28e20     20 12 06 F1 | 	add	arg01, #32
28e24                 | ' {
28e24                 | ' 
28e24                 | ' 	return *((DWORD*)ptr);
28e24     09 FB 01 FB | 	rdlong	result1, arg01
28e28     80 00 00 FF 
28e2c     00 FA 15 F2 | 	cmp	result1, ##65536 wc
28e30     10 00 90 CD |  if_b	jmp	#LR__4182
28e34                 | LR__4181
28e34     4A 1E 06 F1 | 	add	local01, #74
28e38                 | ' {
28e38                 | ' 
28e38                 | ' 	return *((WORD*)ptr);
28e38     0F FB E9 FA | 	rdword	result1, local01 wz
28e3c                 | ' 			&& b != 0 && (b & (b - 1)) == 0
28e3c                 | ' 			&& ld_word(fs->win +  14 ) != 0
28e3c                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
28e3c                 | ' 			&& ld_word(fs->win +  17 ) != 0
28e3c                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
28e3c                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
28e3c                 | ' 				return 0;
28e3c     00 FA 05 56 |  if_ne	mov	result1, #0
28e40     18 00 90 5D |  if_ne	jmp	#LR__4184
28e44                 | LR__4182
28e44                 | LR__4183
28e44                 | ' 		}
28e44                 | ' 	}
28e44                 | ' 	return sign == 0xAA55 ? 2 : 3;
28e44     10 23 32 F9 | 	getword	local03, local02, #0
28e48     55 00 00 FF 
28e4c     55 22 0E F2 | 	cmp	local03, ##43605 wz
28e50     02 24 06 A6 |  if_e	mov	local04, #2
28e54     03 24 06 56 |  if_ne	mov	local04, #3
28e58     12 FB 01 F6 | 	mov	result1, local04
28e5c                 | LR__4184
28e5c     A7 F0 03 F6 | 	mov	ptra, fp
28e60     B2 00 A0 FD | 	call	#popregs_
28e64                 | _fatfs_cc_check_fs_ret
28e64     2D 00 64 FD | 	ret
28e68                 | 
28e68                 | _fatfs_cc_find_volume
28e68     05 4A 05 F6 | 	mov	COUNT_, #5
28e6c     A8 00 A0 FD | 	call	#pushregs_
28e70     24 F0 07 F1 | 	add	ptra, #36
28e74     09 1F 02 F6 | 	mov	local01, arg01
28e78     0A 21 02 F6 | 	mov	local02, arg02
28e7c     0F 13 02 F6 | 	mov	arg01, local01
28e80     00 14 06 F6 | 	mov	arg02, #0
28e84     08 FE BF FD | 	call	#_fatfs_cc_check_fs
28e88     02 FA 0D F2 | 	cmp	result1, #2 wz
28e8c     0C 00 90 AD |  if_e	jmp	#LR__4190
28e90     03 FA 15 F2 | 	cmp	result1, #3 wc
28e94     00 20 0E C2 |  if_b	cmp	local02, #0 wz
28e98     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4198
28e9c                 | LR__4190
28e9c                 | ' 	for (i = 0; i < 4; i++) {
28e9c     00 22 06 F6 | 	mov	local03, #0
28ea0     97 26 48 FB | 	callpa	#(@LR__4192-@LR__4191)>>2,fcache_load_ptr_
28ea4                 | LR__4191
28ea4     04 22 16 F2 | 	cmp	local03, #4 wc
28ea8     44 00 90 3D |  if_ae	jmp	#LR__4193
28eac     11 25 02 F6 | 	mov	local04, local03
28eb0     02 24 66 F0 | 	shl	local04, #2
28eb4     14 4E 05 F1 | 	add	fp, #20
28eb8     A7 24 02 F1 | 	add	local04, fp
28ebc     34 1E 06 F1 | 	add	local01, #52
28ec0     0F 13 02 F6 | 	mov	arg01, local01
28ec4     34 1E 86 F1 | 	sub	local01, #52
28ec8     BE 13 06 F1 | 	add	arg01, #446
28ecc     11 15 02 F6 | 	mov	arg02, local03
28ed0     04 14 66 F0 | 	shl	arg02, #4
28ed4     0A 13 02 F1 | 	add	arg01, arg02
28ed8     08 12 06 F1 | 	add	arg01, #8
28edc                 | ' {
28edc                 | ' 
28edc                 | ' 	return *((DWORD*)ptr);
28edc     09 FB 01 FB | 	rdlong	result1, arg01
28ee0     14 4E 85 F1 | 	sub	fp, #20
28ee4     12 FB 61 FC | 	wrlong	result1, local04
28ee8     01 22 06 F1 | 	add	local03, #1
28eec     B4 FF 9F FD | 	jmp	#LR__4191
28ef0                 | LR__4192
28ef0                 | LR__4193
28ef0     00 20 0E F2 | 	cmp	local02, #0 wz
28ef4     10 25 02 56 |  if_ne	mov	local04, local02
28ef8     01 24 86 51 |  if_ne	sub	local04, #1
28efc     00 24 06 A6 |  if_e	mov	local04, #0
28f00     12 23 02 F6 | 	mov	local03, local04
28f04                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
28f04                 | ' 	}
28f04                 | ' 	i = part ? part - 1 : 0;
28f04                 | ' 	do {
28f04                 | LR__4194
28f04     11 25 02 F6 | 	mov	local04, local03
28f08     02 24 66 F0 | 	shl	local04, #2
28f0c     14 4E 05 F1 | 	add	fp, #20
28f10     A7 24 02 F1 | 	add	local04, fp
28f14     12 25 0A FB | 	rdlong	local04, local04 wz
28f18     14 4E 85 F1 | 	sub	fp, #20
28f1c     28 00 90 AD |  if_e	jmp	#LR__4195
28f20     11 25 02 F6 | 	mov	local04, local03
28f24     02 24 66 F0 | 	shl	local04, #2
28f28     14 4E 05 F1 | 	add	fp, #20
28f2c     A7 24 02 F1 | 	add	local04, fp
28f30     12 15 02 FB | 	rdlong	arg02, local04
28f34     0F 13 02 F6 | 	mov	arg01, local01
28f38     14 4E 85 F1 | 	sub	fp, #20
28f3c     50 FD BF FD | 	call	#_fatfs_cc_check_fs
28f40     FD 24 02 F6 | 	mov	local04, result1
28f44     04 00 90 FD | 	jmp	#LR__4196
28f48                 | LR__4195
28f48     03 24 06 F6 | 	mov	local04, #3
28f4c                 | LR__4196
28f4c     12 27 02 F6 | 	mov	local05, local04
28f50     00 20 0E F2 | 	cmp	local02, #0 wz
28f54     02 26 16 A2 |  if_e	cmp	local05, #2 wc
28f58     0C 00 90 8D |  if_c_and_z	jmp	#LR__4197
28f5c     01 22 06 A1 |  if_e	add	local03, #1
28f60     04 22 16 A2 |  if_e	cmp	local03, #4 wc
28f64     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4194
28f68                 | LR__4197
28f68                 | ' 	return fmt;
28f68     13 FB 01 F6 | 	mov	result1, local05
28f6c                 | LR__4198
28f6c     A7 F0 03 F6 | 	mov	ptra, fp
28f70     B2 00 A0 FD | 	call	#popregs_
28f74                 | _fatfs_cc_find_volume_ret
28f74     2D 00 64 FD | 	ret
28f78                 | 
28f78                 | _fatfs_cc_mount_volume
28f78     0B 4A 05 F6 | 	mov	COUNT_, #11
28f7c     A8 00 A0 FD | 	call	#pushregs_
28f80     0A 1F 02 F6 | 	mov	local01, arg02
28f84     0B 21 02 F6 | 	mov	local02, arg03
28f88     0F 01 68 FC | 	wrlong	#0, local01
28f8c     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
28f90     FD 22 02 F6 | 	mov	local03, result1
28f94     00 22 56 F2 | 	cmps	local03, #0 wc
28f98     0B FA 05 C6 |  if_b	mov	result1, #11
28f9c     3C 05 90 CD |  if_b	jmp	#LR__4210
28fa0     11 17 02 F6 | 	mov	arg03, local03
28fa4     02 16 66 F0 | 	shl	arg03, #2
28fa8     F2 16 02 F1 | 	add	arg03, objptr
28fac     0B 25 0A FB | 	rdlong	local04, arg03 wz
28fb0     0C FA 05 A6 |  if_e	mov	result1, #12
28fb4     24 05 90 AD |  if_e	jmp	#LR__4210
28fb8     0F 25 62 FC | 	wrlong	local04, local01
28fbc     10 21 E2 F8 | 	getbyte	local02, local02, #0
28fc0     FE 20 06 F5 | 	and	local02, #254
28fc4     12 17 CA FA | 	rdbyte	arg03, local04 wz
28fc8     4C 00 90 AD |  if_e	jmp	#LR__4201
28fcc     01 24 06 F1 | 	add	local04, #1
28fd0     12 13 CA FA | 	rdbyte	arg01, local04 wz
28fd4     01 24 86 F1 | 	sub	local04, #1
28fd8     01 FA 05 56 |  if_ne	mov	result1, #1
28fdc                 | ' 
28fdc                 | ' 	return Stat;
28fdc     01 00 00 AF 
28fe0     20 E4 05 A1 |  if_e	add	objptr, ##544
28fe4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
28fe8     01 00 00 AF 
28fec     20 E4 85 A1 |  if_e	sub	objptr, ##544
28ff0     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
28ff4     01 16 CE F7 | 	test	arg03, #1 wz
28ff8     1C 00 90 5D |  if_ne	jmp	#LR__4200
28ffc     00 20 0E F2 | 	cmp	local02, #0 wz
29000     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
29004     04 FA CD 57 |  if_ne	test	result1, #4 wz
29008                 | ' 				return FR_WRITE_PROTECTED;
29008     0A FA 05 56 |  if_ne	mov	result1, #10
2900c     CC 04 90 5D |  if_ne	jmp	#LR__4210
29010                 | ' 			}
29010                 | ' 			return FR_OK;
29010     00 FA 05 F6 | 	mov	result1, #0
29014     C4 04 90 FD | 	jmp	#LR__4210
29018                 | LR__4200
29018                 | LR__4201
29018     12 01 48 FC | 	wrbyte	#0, local04
2901c     01 24 06 F1 | 	add	local04, #1
29020     12 23 42 FC | 	wrbyte	local03, local04
29024     12 13 C2 FA | 	rdbyte	arg01, local04
29028     01 24 86 F1 | 	sub	local04, #1
2902c     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
29030     FD 16 02 F6 | 	mov	arg03, result1
29034     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
29038     01 26 CE F7 | 	test	local05, #1 wz
2903c                 | ' 		return FR_NOT_READY;
2903c     03 FA 05 56 |  if_ne	mov	result1, #3
29040     98 04 90 5D |  if_ne	jmp	#LR__4210
29044     00 20 0E F2 | 	cmp	local02, #0 wz
29048     0B 27 02 56 |  if_ne	mov	local05, arg03
2904c     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
29050     04 26 CE 57 |  if_ne	test	local05, #4 wz
29054                 | ' 		return FR_WRITE_PROTECTED;
29054     0A FA 05 56 |  if_ne	mov	result1, #10
29058     80 04 90 5D |  if_ne	jmp	#LR__4210
2905c     12 13 02 F6 | 	mov	arg01, local04
29060     00 14 06 F6 | 	mov	arg02, #0
29064     00 FE BF FD | 	call	#_fatfs_cc_find_volume
29068     FD 12 02 F6 | 	mov	arg01, result1
2906c     04 12 0E F2 | 	cmp	arg01, #4 wz
29070     01 FA 05 A6 |  if_e	mov	result1, #1
29074     64 04 90 AD |  if_e	jmp	#LR__4210
29078     02 12 16 F2 | 	cmp	arg01, #2 wc
2907c     0D FA 05 36 |  if_ae	mov	result1, #13
29080     58 04 90 3D |  if_ae	jmp	#LR__4210
29084     30 24 06 F1 | 	add	local04, #48
29088     12 29 02 FB | 	rdlong	local06, local04
2908c     04 24 06 F1 | 	add	local04, #4
29090     12 13 02 F6 | 	mov	arg01, local04
29094     34 24 86 F1 | 	sub	local04, #52
29098     0B 12 06 F1 | 	add	arg01, #11
2909c                 | ' {
2909c                 | ' 
2909c                 | ' 	return *((WORD*)ptr);
2909c     09 FB E1 FA | 	rdword	result1, arg01
290a0     01 00 00 FF 
290a4     00 FA 0D F2 | 	cmp	result1, ##512 wz
290a8     0D FA 05 56 |  if_ne	mov	result1, #13
290ac     2C 04 90 5D |  if_ne	jmp	#LR__4210
290b0     34 24 06 F1 | 	add	local04, #52
290b4     12 13 02 F6 | 	mov	arg01, local04
290b8     34 24 86 F1 | 	sub	local04, #52
290bc     16 12 06 F1 | 	add	arg01, #22
290c0                 | ' {
290c0                 | ' 
290c0                 | ' 	return *((WORD*)ptr);
290c0     09 FB E1 FA | 	rdword	result1, arg01
290c4     FD 2A 0A F6 | 	mov	local07, result1 wz
290c8     18 00 90 5D |  if_ne	jmp	#LR__4202
290cc     34 24 06 F1 | 	add	local04, #52
290d0     12 13 02 F6 | 	mov	arg01, local04
290d4     34 24 86 F1 | 	sub	local04, #52
290d8     24 12 06 F1 | 	add	arg01, #36
290dc                 | ' {
290dc                 | ' 
290dc                 | ' 	return *((DWORD*)ptr);
290dc     09 FB 01 FB | 	rdlong	result1, arg01
290e0     FD 2A 02 F6 | 	mov	local07, result1
290e4                 | LR__4202
290e4     1C 24 06 F1 | 	add	local04, #28
290e8     12 2B 62 FC | 	wrlong	local07, local04
290ec     28 24 06 F1 | 	add	local04, #40
290f0     12 27 C2 FA | 	rdbyte	local05, local04
290f4     42 24 86 F1 | 	sub	local04, #66
290f8     12 27 42 FC | 	wrbyte	local05, local04
290fc     12 27 C2 FA | 	rdbyte	local05, local04
29100     02 24 86 F1 | 	sub	local04, #2
29104     01 26 0E F2 | 	cmp	local05, #1 wz
29108     02 24 06 51 |  if_ne	add	local04, #2
2910c     12 27 C2 5A |  if_ne	rdbyte	local05, local04
29110     02 24 86 51 |  if_ne	sub	local04, #2
29114     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
29118     0D FA 05 56 |  if_ne	mov	result1, #13
2911c     BC 03 90 5D |  if_ne	jmp	#LR__4210
29120     02 24 06 F1 | 	add	local04, #2
29124     12 27 C2 FA | 	rdbyte	local05, local04
29128     13 2B 02 FD | 	qmul	local07, local05
2912c     3F 24 06 F1 | 	add	local04, #63
29130     12 27 C2 FA | 	rdbyte	local05, local04
29134     37 24 86 F1 | 	sub	local04, #55
29138     12 27 52 FC | 	wrword	local05, local04
2913c     12 27 EA FA | 	rdword	local05, local04 wz
29140     0A 24 86 F1 | 	sub	local04, #10
29144     18 2A 62 FD | 	getqx	local07
29148     20 00 90 AD |  if_e	jmp	#LR__4203
2914c     0A 24 06 F1 | 	add	local04, #10
29150     12 27 E2 FA | 	rdword	local05, local04
29154     13 23 32 F9 | 	getword	local03, local05, #0
29158     0A 24 86 F1 | 	sub	local04, #10
2915c     13 27 32 F9 | 	getword	local05, local05, #0
29160     01 26 86 F1 | 	sub	local05, #1
29164     13 23 CA F7 | 	test	local03, local05 wz
29168     08 00 90 AD |  if_e	jmp	#LR__4204
2916c                 | LR__4203
2916c     0D FA 05 F6 | 	mov	result1, #13
29170     68 03 90 FD | 	jmp	#LR__4210
29174                 | LR__4204
29174     34 24 06 F1 | 	add	local04, #52
29178     12 13 02 F6 | 	mov	arg01, local04
2917c     11 12 06 F1 | 	add	arg01, #17
29180                 | ' {
29180                 | ' 
29180                 | ' 	return *((WORD*)ptr);
29180     09 FB E1 FA | 	rdword	result1, arg01
29184     2C 24 86 F1 | 	sub	local04, #44
29188     12 FB 51 FC | 	wrword	result1, local04
2918c     12 27 E2 FA | 	rdword	local05, local04
29190     08 24 86 F1 | 	sub	local04, #8
29194     13 13 52 F6 | 	abs	arg01, local05 wc
29198     09 13 42 F8 | 	getnib	arg01, arg01, #0
2919c     09 13 8A F6 | 	negc	arg01, arg01 wz
291a0     0D FA 05 56 |  if_ne	mov	result1, #13
291a4     34 03 90 5D |  if_ne	jmp	#LR__4210
291a8     34 24 06 F1 | 	add	local04, #52
291ac     12 13 02 F6 | 	mov	arg01, local04
291b0     34 24 86 F1 | 	sub	local04, #52
291b4     13 12 06 F1 | 	add	arg01, #19
291b8                 | ' {
291b8                 | ' 
291b8                 | ' 	return *((WORD*)ptr);
291b8     09 FB E1 FA | 	rdword	result1, arg01
291bc     FD 2C 0A F6 | 	mov	local08, result1 wz
291c0     34 24 06 A1 |  if_e	add	local04, #52
291c4     12 13 02 A6 |  if_e	mov	arg01, local04
291c8     34 24 86 A1 |  if_e	sub	local04, #52
291cc     20 12 06 A1 |  if_e	add	arg01, #32
291d0                 | ' {
291d0                 | ' 
291d0                 | ' 	return *((DWORD*)ptr);
291d0     09 2D 02 AB |  if_e	rdlong	local08, arg01
291d4     34 24 06 F1 | 	add	local04, #52
291d8     12 13 02 F6 | 	mov	arg01, local04
291dc     34 24 86 F1 | 	sub	local04, #52
291e0     0E 12 06 F1 | 	add	arg01, #14
291e4                 | ' {
291e4                 | ' 
291e4                 | ' 	return *((WORD*)ptr);
291e4     09 FB E1 FA | 	rdword	result1, arg01
291e8     FD 12 02 F6 | 	mov	arg01, result1
291ec     09 27 02 F6 | 	mov	local05, arg01
291f0     0F 26 4E F7 | 	zerox	local05, #15 wz
291f4     0D FA 05 A6 |  if_e	mov	result1, #13
291f8     E0 02 90 AD |  if_e	jmp	#LR__4210
291fc     09 2F 32 F9 | 	getword	local09, arg01, #0
29200     15 2F 02 F1 | 	add	local09, local07
29204     08 24 06 F1 | 	add	local04, #8
29208     12 27 E2 FA | 	rdword	local05, local04
2920c     08 24 86 F1 | 	sub	local04, #8
29210     13 27 52 F6 | 	abs	local05, local05 wc
29214     04 26 46 F0 | 	shr	local05, #4
29218     13 2F 82 F3 | 	sumc	local09, local05
2921c     17 2D 12 F2 | 	cmp	local08, local09 wc
29220     0D FA 05 C6 |  if_b	mov	result1, #13
29224     B4 02 90 CD |  if_b	jmp	#LR__4210
29228     17 2D 82 F1 | 	sub	local08, local09
2922c     0A 24 06 F1 | 	add	local04, #10
29230     12 27 E2 FA | 	rdword	local05, local04
29234     13 2D 12 FD | 	qdiv	local08, local05
29238     0A 24 86 F1 | 	sub	local04, #10
2923c     18 26 62 FD | 	getqx	local05
29240     00 26 0E F2 | 	cmp	local05, #0 wz
29244     0D FA 05 A6 |  if_e	mov	result1, #13
29248     90 02 90 AD |  if_e	jmp	#LR__4210
2924c     00 30 06 F6 | 	mov	local10, #0
29250     FF FF 07 FF 
29254     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
29258     03 30 06 C6 |  if_b	mov	local10, #3
2925c     7F 00 00 FF 
29260     F6 27 16 F2 | 	cmp	local05, ##65526 wc
29264     02 30 06 C6 |  if_b	mov	local10, #2
29268     07 00 00 FF 
2926c     F6 27 16 F2 | 	cmp	local05, ##4086 wc
29270     01 30 06 C6 |  if_b	mov	local10, #1
29274     00 30 0E F2 | 	cmp	local10, #0 wz
29278     0D FA 05 A6 |  if_e	mov	result1, #13
2927c     5C 02 90 AD |  if_e	jmp	#LR__4210
29280     02 26 06 F1 | 	add	local05, #2
29284     18 24 06 F1 | 	add	local04, #24
29288     12 27 62 FC | 	wrlong	local05, local04
2928c     08 24 06 F1 | 	add	local04, #8
29290     12 29 62 FC | 	wrlong	local06, local04
29294     14 27 02 F6 | 	mov	local05, local06
29298     09 13 32 F9 | 	getword	arg01, arg01, #0
2929c     09 27 02 F1 | 	add	local05, arg01
292a0     04 24 06 F1 | 	add	local04, #4
292a4     12 27 62 FC | 	wrlong	local05, local04
292a8     14 27 02 F6 | 	mov	local05, local06
292ac     17 27 02 F1 | 	add	local05, local09
292b0     08 24 06 F1 | 	add	local04, #8
292b4     12 27 62 FC | 	wrlong	local05, local04
292b8     2C 24 86 F1 | 	sub	local04, #44
292bc     03 30 0E F2 | 	cmp	local10, #3 wz
292c0     5C 00 90 5D |  if_ne	jmp	#LR__4205
292c4     34 24 06 F1 | 	add	local04, #52
292c8     12 13 02 F6 | 	mov	arg01, local04
292cc     34 24 86 F1 | 	sub	local04, #52
292d0     2A 12 06 F1 | 	add	arg01, #42
292d4                 | ' {
292d4                 | ' 
292d4                 | ' 	return *((WORD*)ptr);
292d4     09 FB E9 FA | 	rdword	result1, arg01 wz
292d8     0D FA 05 56 |  if_ne	mov	result1, #13
292dc     FC 01 90 5D |  if_ne	jmp	#LR__4210
292e0     08 24 06 F1 | 	add	local04, #8
292e4     12 27 EA FA | 	rdword	local05, local04 wz
292e8     08 24 86 F1 | 	sub	local04, #8
292ec     0D FA 05 56 |  if_ne	mov	result1, #13
292f0     E8 01 90 5D |  if_ne	jmp	#LR__4210
292f4     34 24 06 F1 | 	add	local04, #52
292f8     12 13 02 F6 | 	mov	arg01, local04
292fc     2C 12 06 F1 | 	add	arg01, #44
29300                 | ' {
29300                 | ' 
29300                 | ' 	return *((DWORD*)ptr);
29300     09 FB 01 FB | 	rdlong	result1, arg01
29304     0C 24 86 F1 | 	sub	local04, #12
29308     12 FB 61 FC | 	wrlong	result1, local04
2930c     10 24 86 F1 | 	sub	local04, #16
29310     12 33 02 FB | 	rdlong	local11, local04
29314     18 24 86 F1 | 	sub	local04, #24
29318     02 32 66 F0 | 	shl	local11, #2
2931c     6C 00 90 FD | 	jmp	#LR__4207
29320                 | LR__4205
29320     08 24 06 F1 | 	add	local04, #8
29324     12 27 EA FA | 	rdword	local05, local04 wz
29328     08 24 86 F1 | 	sub	local04, #8
2932c     0D FA 05 A6 |  if_e	mov	result1, #13
29330     A8 01 90 AD |  if_e	jmp	#LR__4210
29334     24 24 06 F1 | 	add	local04, #36
29338     12 27 02 FB | 	rdlong	local05, local04
2933c     15 27 02 F1 | 	add	local05, local07
29340     04 24 06 F1 | 	add	local04, #4
29344     12 27 62 FC | 	wrlong	local05, local04
29348     28 24 86 F1 | 	sub	local04, #40
2934c     02 30 0E F2 | 	cmp	local10, #2 wz
29350     18 24 06 A1 |  if_e	add	local04, #24
29354     12 27 02 AB |  if_e	rdlong	local05, local04
29358     18 24 86 A1 |  if_e	sub	local04, #24
2935c     01 26 66 A0 |  if_e	shl	local05, #1
29360     24 00 90 AD |  if_e	jmp	#LR__4206
29364     18 24 06 F1 | 	add	local04, #24
29368     12 33 02 FB | 	rdlong	local11, local04
2936c     19 27 02 F6 | 	mov	local05, local11
29370     01 26 66 F0 | 	shl	local05, #1
29374     19 27 02 F1 | 	add	local05, local11
29378     01 26 46 F0 | 	shr	local05, #1
2937c     18 24 86 F1 | 	sub	local04, #24
29380     01 32 06 F5 | 	and	local11, #1
29384     19 27 02 F1 | 	add	local05, local11
29388                 | LR__4206
29388     13 33 02 F6 | 	mov	local11, local05
2938c                 | LR__4207
2938c     FF 33 06 F1 | 	add	local11, #511
29390     09 32 46 F0 | 	shr	local11, #9
29394     1C 24 06 F1 | 	add	local04, #28
29398     12 17 02 FB | 	rdlong	arg03, local04
2939c     1C 24 86 F1 | 	sub	local04, #28
293a0     19 17 12 F2 | 	cmp	arg03, local11 wc
293a4     0D FA 05 C6 |  if_b	mov	result1, #13
293a8     30 01 90 CD |  if_b	jmp	#LR__4210
293ac     14 24 06 F1 | 	add	local04, #20
293b0     FF FF FF FF 
293b4     12 FF 6B FC | 	wrlong	##-1, local04
293b8     04 24 86 F1 | 	sub	local04, #4
293bc     FF FF FF FF 
293c0     12 FF 6B FC | 	wrlong	##-1, local04
293c4     0C 24 86 F1 | 	sub	local04, #12
293c8     12 01 49 FC | 	wrbyte	#128, local04
293cc     04 24 86 F1 | 	sub	local04, #4
293d0     03 30 0E F2 | 	cmp	local10, #3 wz
293d4     D0 00 90 5D |  if_ne	jmp	#LR__4209
293d8     34 24 06 F1 | 	add	local04, #52
293dc     12 13 02 F6 | 	mov	arg01, local04
293e0     34 24 86 F1 | 	sub	local04, #52
293e4     30 12 06 F1 | 	add	arg01, #48
293e8                 | ' {
293e8                 | ' 
293e8                 | ' 	return *((WORD*)ptr);
293e8     09 FB E1 FA | 	rdword	result1, arg01
293ec     FD 26 32 F9 | 	getword	local05, result1, #0
293f0     01 26 0E F2 | 	cmp	local05, #1 wz
293f4     B0 00 90 5D |  if_ne	jmp	#LR__4209
293f8     01 28 06 F1 | 	add	local06, #1
293fc     12 13 02 F6 | 	mov	arg01, local04
29400     14 15 02 F6 | 	mov	arg02, local06
29404     CC CD BF FD | 	call	#_fatfs_cc_move_window
29408     00 FA 0D F2 | 	cmp	result1, #0 wz
2940c     98 00 90 5D |  if_ne	jmp	#LR__4209
29410     04 24 06 F1 | 	add	local04, #4
29414     12 01 48 FC | 	wrbyte	#0, local04
29418     30 24 06 F1 | 	add	local04, #48
2941c     12 13 02 F6 | 	mov	arg01, local04
29420     34 24 86 F1 | 	sub	local04, #52
29424     FE 13 06 F1 | 	add	arg01, #510
29428                 | ' {
29428                 | ' 
29428                 | ' 	return *((WORD*)ptr);
29428     09 FB E1 FA | 	rdword	result1, arg01
2942c     FD 26 32 F9 | 	getword	local05, result1, #0
29430     55 00 00 FF 
29434     55 26 0E F2 | 	cmp	local05, ##43605 wz
29438     34 24 06 A1 |  if_e	add	local04, #52
2943c     12 13 02 A6 |  if_e	mov	arg01, local04
29440     34 24 86 A1 |  if_e	sub	local04, #52
29444                 | ' {
29444                 | ' 
29444                 | ' 	return *((DWORD*)ptr);
29444     09 FB 01 AB |  if_e	rdlong	result1, arg01
29448     A9 B0 20 AF 
2944c     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
29450     54 00 90 5D |  if_ne	jmp	#LR__4208
29454     34 24 06 F1 | 	add	local04, #52
29458     12 13 02 F6 | 	mov	arg01, local04
2945c     34 24 86 F1 | 	sub	local04, #52
29460     E4 13 06 F1 | 	add	arg01, #484
29464                 | ' {
29464                 | ' 
29464                 | ' 	return *((DWORD*)ptr);
29464     09 FB 01 FB | 	rdlong	result1, arg01
29468     B9 A0 30 FF 
2946c     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
29470     34 00 90 5D |  if_ne	jmp	#LR__4208
29474     34 24 06 F1 | 	add	local04, #52
29478     12 13 02 F6 | 	mov	arg01, local04
2947c     E8 13 06 F1 | 	add	arg01, #488
29480                 | ' {
29480                 | ' 
29480                 | ' 	return *((DWORD*)ptr);
29480     09 FB 01 FB | 	rdlong	result1, arg01
29484     20 24 86 F1 | 	sub	local04, #32
29488     12 FB 61 FC | 	wrlong	result1, local04
2948c     20 24 06 F1 | 	add	local04, #32
29490     12 13 02 F6 | 	mov	arg01, local04
29494     EC 13 06 F1 | 	add	arg01, #492
29498                 | ' {
29498                 | ' 
29498                 | ' 	return *((DWORD*)ptr);
29498     09 FB 01 FB | 	rdlong	result1, arg01
2949c     24 24 86 F1 | 	sub	local04, #36
294a0     12 FB 61 FC | 	wrlong	result1, local04
294a4     10 24 86 F1 | 	sub	local04, #16
294a8                 | LR__4208
294a8                 | LR__4209
294a8     12 31 42 FC | 	wrbyte	local10, local04
294ac     04 E4 05 F1 | 	add	objptr, #4
294b0     F2 26 E2 FA | 	rdword	local05, objptr
294b4     01 26 06 F1 | 	add	local05, #1
294b8     F2 26 52 FC | 	wrword	local05, objptr
294bc     F2 32 E2 FA | 	rdword	local11, objptr
294c0     06 24 06 F1 | 	add	local04, #6
294c4     12 33 52 FC | 	wrword	local11, local04
294c8     04 E4 05 F1 | 	add	objptr, #4
294cc     06 24 06 F1 | 	add	local04, #6
294d0     12 E5 61 FC | 	wrlong	objptr, local04
294d4                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
294d4                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
294d4                 | ' 			{
294d4                 | ' 
294d4                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
294d4                 | ' 
294d4                 | ' 
294d4                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
294d4                 | ' 
294d4                 | ' 			}
294d4                 | ' 		}
294d4                 | ' 
294d4                 | ' 
294d4                 | ' 	}
294d4                 | ' 
294d4                 | ' 	fs->fs_type = (BYTE)fmt;
294d4                 | ' 	fs->id = ++Fsid;
294d4                 | ' 
294d4                 | ' 	fs->lfnbuf = LfnBuf;
294d4                 | ' #line 3567 "ff.c"
294d4                 | ' 	return FR_OK;
294d4     00 FA 05 F6 | 	mov	result1, #0
294d8     08 E4 85 F1 | 	sub	objptr, #8
294dc                 | LR__4210
294dc     A7 F0 03 F6 | 	mov	ptra, fp
294e0     B2 00 A0 FD | 	call	#popregs_
294e4                 | _fatfs_cc_mount_volume_ret
294e4     2D 00 64 FD | 	ret
294e8                 | 
294e8                 | _fatfs_cc_validate
294e8     09 01 0A F6 | 	mov	_var01, arg01 wz
294ec     09 02 06 F6 | 	mov	_var02, #9
294f0     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
294f4     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
294f8     50 00 90 AD |  if_e	jmp	#LR__4220
294fc     04 00 06 F1 | 	add	_var01, #4
29500     00 07 E2 FA | 	rdword	_var04, _var01
29504     04 00 86 F1 | 	sub	_var01, #4
29508     00 13 02 FB | 	rdlong	arg01, _var01
2950c     06 12 06 F1 | 	add	arg01, #6
29510     09 FB E1 FA | 	rdword	result1, arg01
29514     FD 06 0A F2 | 	cmp	_var04, result1 wz
29518     30 00 90 5D |  if_ne	jmp	#LR__4220
2951c     00 07 02 FB | 	rdlong	_var04, _var01
29520     01 06 06 F1 | 	add	_var04, #1
29524     03 13 CA FA | 	rdbyte	arg01, _var04 wz
29528     01 FA 05 56 |  if_ne	mov	result1, #1
2952c                 | ' 
2952c                 | ' 	return Stat;
2952c     01 00 00 AF 
29530     20 E4 05 A1 |  if_e	add	objptr, ##544
29534     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
29538     01 00 00 AF 
2953c     20 E4 85 A1 |  if_e	sub	objptr, ##544
29540     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
29544     01 04 CE F7 | 	test	_var03, #1 wz
29548     00 02 06 A6 |  if_e	mov	_var02, #0
2954c                 | LR__4220
2954c     00 02 0E F2 | 	cmp	_var02, #0 wz
29550     00 05 02 AB |  if_e	rdlong	_var03, _var01
29554     00 04 06 56 |  if_ne	mov	_var03, #0
29558     0A 05 62 FC | 	wrlong	_var03, arg02
2955c                 | ' 			res = FR_OK;
2955c                 | ' 		}
2955c                 | ' 
2955c                 | ' 	}
2955c                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2955c                 | ' 	return res;
2955c     01 FB 01 F6 | 	mov	result1, _var02
29560                 | _fatfs_cc_validate_ret
29560     2D 00 64 FD | 	ret
29564                 | 
29564                 | _fatfs_cc_f_mount
29564     01 4A 05 F6 | 	mov	COUNT_, #1
29568     A8 00 A0 FD | 	call	#pushregs_
2956c     20 F0 07 F1 | 	add	ptra, #32
29570     04 4E 05 F1 | 	add	fp, #4
29574     A7 12 62 FC | 	wrlong	arg01, fp
29578     04 4E 05 F1 | 	add	fp, #4
2957c     A7 14 62 FC | 	wrlong	arg02, fp
29580     04 4E 05 F1 | 	add	fp, #4
29584     A7 16 42 FC | 	wrbyte	arg03, fp
29588     04 4E 85 F1 | 	sub	fp, #4
2958c     A7 16 02 FB | 	rdlong	arg03, fp
29590     14 4E 05 F1 | 	add	fp, #20
29594     A7 16 62 FC | 	wrlong	arg03, fp
29598     A7 12 02 F6 | 	mov	arg01, fp
2959c     1C 4E 85 F1 | 	sub	fp, #28
295a0     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
295a4     14 4E 05 F1 | 	add	fp, #20
295a8     A7 FA 61 FC | 	wrlong	result1, fp
295ac     14 4E 85 F1 | 	sub	fp, #20
295b0     00 FA 55 F2 | 	cmps	result1, #0 wc
295b4     0B FA 05 C6 |  if_b	mov	result1, #11
295b8     C0 00 90 CD |  if_b	jmp	#LR__4231
295bc     14 4E 05 F1 | 	add	fp, #20
295c0     A7 16 02 FB | 	rdlong	arg03, fp
295c4     02 16 66 F0 | 	shl	arg03, #2
295c8     F2 16 02 F1 | 	add	arg03, objptr
295cc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
295d0     04 4E 85 F1 | 	sub	fp, #4
295d4     A7 16 62 FC | 	wrlong	arg03, fp
295d8     10 4E 85 F1 | 	sub	fp, #16
295dc     28 00 90 AD |  if_e	jmp	#LR__4230
295e0     10 4E 05 F1 | 	add	fp, #16
295e4     A7 16 02 FB | 	rdlong	arg03, fp
295e8     10 4E 85 F1 | 	sub	fp, #16
295ec     01 16 06 F1 | 	add	arg03, #1
295f0     0B 13 C2 FA | 	rdbyte	arg01, arg03
295f4     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
295f8     10 4E 05 F1 | 	add	fp, #16
295fc     A7 16 02 FB | 	rdlong	arg03, fp
29600     10 4E 85 F1 | 	sub	fp, #16
29604     0B 01 48 FC | 	wrbyte	#0, arg03
29608                 | LR__4230
29608     04 4E 05 F1 | 	add	fp, #4
2960c     A7 1E 0A FB | 	rdlong	local01, fp wz
29610     04 4E 85 F1 | 	sub	fp, #4
29614     04 4E 05 51 |  if_ne	add	fp, #4
29618     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2961c     04 4E 85 51 |  if_ne	sub	fp, #4
29620     0F 01 48 5C |  if_ne	wrbyte	#0, local01
29624     14 4E 05 F1 | 	add	fp, #20
29628     A7 1E 02 FB | 	rdlong	local01, fp
2962c     02 1E 66 F0 | 	shl	local01, #2
29630     F2 1E 02 F1 | 	add	local01, objptr
29634     10 4E 85 F1 | 	sub	fp, #16
29638     A7 16 02 FB | 	rdlong	arg03, fp
2963c     0F 17 62 FC | 	wrlong	arg03, local01
29640     08 4E 05 F1 | 	add	fp, #8
29644     A7 1E CA FA | 	rdbyte	local01, fp wz
29648     0C 4E 85 F1 | 	sub	fp, #12
2964c     00 FA 05 A6 |  if_e	mov	result1, #0
29650     28 00 90 AD |  if_e	jmp	#LR__4231
29654     08 4E 05 F1 | 	add	fp, #8
29658     A7 12 02 F6 | 	mov	arg01, fp
2965c     04 4E 85 F1 | 	sub	fp, #4
29660     A7 14 02 F6 | 	mov	arg02, fp
29664     04 4E 85 F1 | 	sub	fp, #4
29668     00 16 06 F6 | 	mov	arg03, #0
2966c     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
29670     18 4E 05 F1 | 	add	fp, #24
29674     A7 FA 61 FC | 	wrlong	result1, fp
29678                 | ' 
29678                 | ' 	res = mount_volume(&path, &fs, 0);
29678                 | ' 	return res ;
29678     18 4E 85 F1 | 	sub	fp, #24
2967c                 | LR__4231
2967c     A7 F0 03 F6 | 	mov	ptra, fp
29680     B2 00 A0 FD | 	call	#popregs_
29684                 | _fatfs_cc_f_mount_ret
29684     2D 00 64 FD | 	ret
29688                 | 
29688                 | _fatfs_cc_f_open
29688     02 4A 05 F6 | 	mov	COUNT_, #2
2968c     A8 00 A0 FD | 	call	#pushregs_
29690     60 F0 07 F1 | 	add	ptra, #96
29694     04 4E 05 F1 | 	add	fp, #4
29698     A7 12 62 FC | 	wrlong	arg01, fp
2969c     04 4E 05 F1 | 	add	fp, #4
296a0     A7 14 62 FC | 	wrlong	arg02, fp
296a4     04 4E 05 F1 | 	add	fp, #4
296a8     A7 16 42 FC | 	wrbyte	arg03, fp
296ac     08 4E 85 F1 | 	sub	fp, #8
296b0     A7 18 0A FB | 	rdlong	arg04, fp wz
296b4     04 4E 85 F1 | 	sub	fp, #4
296b8     09 FA 05 A6 |  if_e	mov	result1, #9
296bc     98 06 90 AD |  if_e	jmp	#LR__4257
296c0     0C 4E 05 F1 | 	add	fp, #12
296c4     A7 18 C2 FA | 	rdbyte	arg04, fp
296c8     3F 18 06 F5 | 	and	arg04, #63
296cc     A7 18 42 FC | 	wrbyte	arg04, fp
296d0     04 4E 85 F1 | 	sub	fp, #4
296d4     A7 12 02 F6 | 	mov	arg01, fp
296d8     3C 4E 05 F1 | 	add	fp, #60
296dc     A7 14 02 F6 | 	mov	arg02, fp
296e0     38 4E 85 F1 | 	sub	fp, #56
296e4     A7 16 C2 FA | 	rdbyte	arg03, fp
296e8     0C 4E 85 F1 | 	sub	fp, #12
296ec     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
296f0     10 4E 05 F1 | 	add	fp, #16
296f4     A7 FA 61 FC | 	wrlong	result1, fp
296f8     10 4E 85 F1 | 	sub	fp, #16
296fc     00 FA 0D F2 | 	cmp	result1, #0 wz
29700     2C 06 90 5D |  if_ne	jmp	#LR__4256
29704     44 4E 05 F1 | 	add	fp, #68
29708     A7 18 02 FB | 	rdlong	arg04, fp
2970c     30 4E 85 F1 | 	sub	fp, #48
29710     A7 18 62 FC | 	wrlong	arg04, fp
29714     A7 12 02 F6 | 	mov	arg01, fp
29718     0C 4E 85 F1 | 	sub	fp, #12
2971c     A7 1E 02 FB | 	rdlong	local01, fp
29720     08 4E 85 F1 | 	sub	fp, #8
29724     0F 15 02 F6 | 	mov	arg02, local01
29728     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2972c     10 4E 05 F1 | 	add	fp, #16
29730     A7 FA 61 FC | 	wrlong	result1, fp
29734     10 4E 85 F1 | 	sub	fp, #16
29738     00 FA 0D F2 | 	cmp	result1, #0 wz
2973c     1C 00 90 5D |  if_ne	jmp	#LR__4240
29740     3F 4E 05 F1 | 	add	fp, #63
29744     A7 18 C2 FA | 	rdbyte	arg04, fp
29748     3F 4E 85 F1 | 	sub	fp, #63
2974c     80 18 CE F7 | 	test	arg04, #128 wz
29750     10 4E 05 51 |  if_ne	add	fp, #16
29754     A7 0C 68 5C |  if_ne	wrlong	#6, fp
29758     10 4E 85 51 |  if_ne	sub	fp, #16
2975c                 | LR__4240
2975c     0C 4E 05 F1 | 	add	fp, #12
29760     A7 18 C2 FA | 	rdbyte	arg04, fp
29764     0C 4E 85 F1 | 	sub	fp, #12
29768     1C 18 CE F7 | 	test	arg04, #28 wz
2976c     F0 01 90 AD |  if_e	jmp	#LR__4245
29770     10 4E 05 F1 | 	add	fp, #16
29774     A7 1E 0A FB | 	rdlong	local01, fp wz
29778     10 4E 85 F1 | 	sub	fp, #16
2977c     48 00 90 AD |  if_e	jmp	#LR__4242
29780     10 4E 05 F1 | 	add	fp, #16
29784     A7 18 02 FB | 	rdlong	arg04, fp
29788     10 4E 85 F1 | 	sub	fp, #16
2978c     04 18 0E F2 | 	cmp	arg04, #4 wz
29790     1C 00 90 5D |  if_ne	jmp	#LR__4241
29794     14 4E 05 F1 | 	add	fp, #20
29798     A7 12 02 F6 | 	mov	arg01, fp
2979c     14 4E 85 F1 | 	sub	fp, #20
297a0     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
297a4     10 4E 05 F1 | 	add	fp, #16
297a8     A7 FA 61 FC | 	wrlong	result1, fp
297ac     10 4E 85 F1 | 	sub	fp, #16
297b0                 | LR__4241
297b0     0C 4E 05 F1 | 	add	fp, #12
297b4     A7 1E C2 FA | 	rdbyte	local01, fp
297b8     08 1E 46 F5 | 	or	local01, #8
297bc     A7 1E 42 FC | 	wrbyte	local01, fp
297c0     0C 4E 85 F1 | 	sub	fp, #12
297c4     3C 00 90 FD | 	jmp	#LR__4244
297c8                 | LR__4242
297c8     1A 4E 05 F1 | 	add	fp, #26
297cc     A7 1E C2 FA | 	rdbyte	local01, fp
297d0     1A 4E 85 F1 | 	sub	fp, #26
297d4     11 1E CE F7 | 	test	local01, #17 wz
297d8     10 4E 05 51 |  if_ne	add	fp, #16
297dc     A7 0E 68 5C |  if_ne	wrlong	#7, fp
297e0     10 4E 85 51 |  if_ne	sub	fp, #16
297e4     1C 00 90 5D |  if_ne	jmp	#LR__4243
297e8     0C 4E 05 F1 | 	add	fp, #12
297ec     A7 1E C2 FA | 	rdbyte	local01, fp
297f0     0C 4E 85 F1 | 	sub	fp, #12
297f4     04 1E CE F7 | 	test	local01, #4 wz
297f8     10 4E 05 51 |  if_ne	add	fp, #16
297fc     A7 10 68 5C |  if_ne	wrlong	#8, fp
29800     10 4E 85 51 |  if_ne	sub	fp, #16
29804                 | LR__4243
29804                 | LR__4244
29804     10 4E 05 F1 | 	add	fp, #16
29808     A7 1E 0A FB | 	rdlong	local01, fp wz
2980c     10 4E 85 F1 | 	sub	fp, #16
29810     A8 01 90 5D |  if_ne	jmp	#LR__4248
29814     0C 4E 05 F1 | 	add	fp, #12
29818     A7 1E C2 FA | 	rdbyte	local01, fp
2981c     0C 4E 85 F1 | 	sub	fp, #12
29820     08 1E CE F7 | 	test	local01, #8 wz
29824     94 01 90 AD |  if_e	jmp	#LR__4248
29828     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2982c     54 4E 05 F1 | 	add	fp, #84
29830     A7 FA 61 FC | 	wrlong	result1, fp
29834     24 4E 85 F1 | 	sub	fp, #36
29838     A7 12 02 FB | 	rdlong	arg01, fp
2983c     0E 12 06 F1 | 	add	arg01, #14
29840     09 FB 61 FC | 	wrlong	result1, arg01
29844     A7 12 02 FB | 	rdlong	arg01, fp
29848     16 12 06 F1 | 	add	arg01, #22
2984c     24 4E 05 F1 | 	add	fp, #36
29850     A7 14 02 FB | 	rdlong	arg02, fp
29854     09 15 62 FC | 	wrlong	arg02, arg01
29858     10 4E 85 F1 | 	sub	fp, #16
2985c     A7 12 02 FB | 	rdlong	arg01, fp
29860     14 4E 85 F1 | 	sub	fp, #20
29864     A7 14 02 FB | 	rdlong	arg02, fp
29868     30 4E 85 F1 | 	sub	fp, #48
2986c     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
29870     48 4E 05 F1 | 	add	fp, #72
29874     A7 FA 61 FC | 	wrlong	result1, fp
29878     18 4E 85 F1 | 	sub	fp, #24
2987c     A7 1E 02 FB | 	rdlong	local01, fp
29880     0B 1E 06 F1 | 	add	local01, #11
29884     0F 41 48 FC | 	wrbyte	#32, local01
29888     14 4E 05 F1 | 	add	fp, #20
2988c     A7 12 02 FB | 	rdlong	arg01, fp
29890     14 4E 85 F1 | 	sub	fp, #20
29894     A7 14 02 FB | 	rdlong	arg02, fp
29898     30 4E 85 F1 | 	sub	fp, #48
2989c     00 16 06 F6 | 	mov	arg03, #0
298a0     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
298a4     30 4E 05 F1 | 	add	fp, #48
298a8     A7 12 02 FB | 	rdlong	arg01, fp
298ac     1C 12 06 F1 | 	add	arg01, #28
298b0     09 01 68 FC | 	wrlong	#0, arg01
298b4     14 4E 05 F1 | 	add	fp, #20
298b8     A7 1E 02 FB | 	rdlong	local01, fp
298bc     03 1E 06 F1 | 	add	local01, #3
298c0     0F 03 48 FC | 	wrbyte	#1, local01
298c4     04 4E 05 F1 | 	add	fp, #4
298c8     A7 1E 0A FB | 	rdlong	local01, fp wz
298cc     48 4E 85 F1 | 	sub	fp, #72
298d0     E8 00 90 AD |  if_e	jmp	#LR__4248
298d4     44 4E 05 F1 | 	add	fp, #68
298d8     A7 1E 02 FB | 	rdlong	local01, fp
298dc     30 1E 06 F1 | 	add	local01, #48
298e0     0F 1F 02 FB | 	rdlong	local01, local01
298e4     14 4E 05 F1 | 	add	fp, #20
298e8     A7 1E 62 FC | 	wrlong	local01, fp
298ec     44 4E 85 F1 | 	sub	fp, #68
298f0     A7 12 02 F6 | 	mov	arg01, fp
298f4     34 4E 05 F1 | 	add	fp, #52
298f8     A7 14 02 FB | 	rdlong	arg02, fp
298fc     48 4E 85 F1 | 	sub	fp, #72
29900     00 16 06 F6 | 	mov	arg03, #0
29904     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
29908     10 4E 05 F1 | 	add	fp, #16
2990c     A7 FA 61 FC | 	wrlong	result1, fp
29910     10 4E 85 F1 | 	sub	fp, #16
29914     00 FA 0D F2 | 	cmp	result1, #0 wz
29918     A0 00 90 5D |  if_ne	jmp	#LR__4248
2991c     44 4E 05 F1 | 	add	fp, #68
29920     A7 12 02 FB | 	rdlong	arg01, fp
29924     14 4E 05 F1 | 	add	fp, #20
29928     A7 14 02 FB | 	rdlong	arg02, fp
2992c     58 4E 85 F1 | 	sub	fp, #88
29930     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
29934     10 4E 05 F1 | 	add	fp, #16
29938     A7 FA 61 FC | 	wrlong	result1, fp
2993c     34 4E 05 F1 | 	add	fp, #52
29940     A7 18 02 FB | 	rdlong	arg04, fp
29944     04 4E 05 F1 | 	add	fp, #4
29948     A7 1E 02 FB | 	rdlong	local01, fp
2994c     48 4E 85 F1 | 	sub	fp, #72
29950     01 1E 86 F1 | 	sub	local01, #1
29954     10 18 06 F1 | 	add	arg04, #16
29958     0C 1F 62 FC | 	wrlong	local01, arg04
2995c     5C 00 90 FD | 	jmp	#LR__4248
29960                 | LR__4245
29960     10 4E 05 F1 | 	add	fp, #16
29964     A7 18 0A FB | 	rdlong	arg04, fp wz
29968     10 4E 85 F1 | 	sub	fp, #16
2996c     4C 00 90 5D |  if_ne	jmp	#LR__4247
29970     1A 4E 05 F1 | 	add	fp, #26
29974     A7 18 C2 FA | 	rdbyte	arg04, fp
29978     1A 4E 85 F1 | 	sub	fp, #26
2997c     10 18 CE F7 | 	test	arg04, #16 wz
29980     10 4E 05 51 |  if_ne	add	fp, #16
29984     A7 08 68 5C |  if_ne	wrlong	#4, fp
29988     10 4E 85 51 |  if_ne	sub	fp, #16
2998c     2C 00 90 5D |  if_ne	jmp	#LR__4246
29990     0C 4E 05 F1 | 	add	fp, #12
29994     A7 18 C2 FA | 	rdbyte	arg04, fp
29998     0C 4E 85 F1 | 	sub	fp, #12
2999c     02 18 CE F7 | 	test	arg04, #2 wz
299a0     1A 4E 05 51 |  if_ne	add	fp, #26
299a4     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
299a8     1A 4E 85 51 |  if_ne	sub	fp, #26
299ac     01 1E CE 57 |  if_ne	test	local01, #1 wz
299b0     10 4E 05 51 |  if_ne	add	fp, #16
299b4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
299b8     10 4E 85 51 |  if_ne	sub	fp, #16
299bc                 | LR__4246
299bc                 | LR__4247
299bc                 | LR__4248
299bc     10 4E 05 F1 | 	add	fp, #16
299c0     A7 1E 0A FB | 	rdlong	local01, fp wz
299c4     10 4E 85 F1 | 	sub	fp, #16
299c8     60 00 90 5D |  if_ne	jmp	#LR__4249
299cc     0C 4E 05 F1 | 	add	fp, #12
299d0     A7 20 C2 FA | 	rdbyte	local02, fp
299d4     0C 4E 85 F1 | 	sub	fp, #12
299d8     08 20 CE F7 | 	test	local02, #8 wz
299dc     0C 4E 05 51 |  if_ne	add	fp, #12
299e0     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
299e4     40 20 46 55 |  if_ne	or	local02, #64
299e8     A7 20 42 5C |  if_ne	wrbyte	local02, fp
299ec     0C 4E 85 51 |  if_ne	sub	fp, #12
299f0     04 4E 05 F1 | 	add	fp, #4
299f4     A7 20 02 FB | 	rdlong	local02, fp
299f8     40 4E 05 F1 | 	add	fp, #64
299fc     A7 1E 02 FB | 	rdlong	local01, fp
29a00     30 1E 06 F1 | 	add	local01, #48
29a04     0F 1F 02 FB | 	rdlong	local01, local01
29a08     20 20 06 F1 | 	add	local02, #32
29a0c     10 1F 62 FC | 	wrlong	local01, local02
29a10     40 4E 85 F1 | 	sub	fp, #64
29a14     A7 20 02 FB | 	rdlong	local02, fp
29a18     2C 4E 05 F1 | 	add	fp, #44
29a1c     A7 1E 02 FB | 	rdlong	local01, fp
29a20     30 4E 85 F1 | 	sub	fp, #48
29a24     24 20 06 F1 | 	add	local02, #36
29a28     10 1F 62 FC | 	wrlong	local01, local02
29a2c                 | LR__4249
29a2c     10 4E 05 F1 | 	add	fp, #16
29a30     A7 20 0A FB | 	rdlong	local02, fp wz
29a34     10 4E 85 F1 | 	sub	fp, #16
29a38     F4 02 90 5D |  if_ne	jmp	#LR__4255
29a3c     04 4E 05 F1 | 	add	fp, #4
29a40     A7 20 02 FB | 	rdlong	local02, fp
29a44     40 4E 05 F1 | 	add	fp, #64
29a48     A7 12 02 FB | 	rdlong	arg01, fp
29a4c     14 4E 85 F1 | 	sub	fp, #20
29a50     A7 14 02 FB | 	rdlong	arg02, fp
29a54     30 4E 85 F1 | 	sub	fp, #48
29a58     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
29a5c     08 20 06 F1 | 	add	local02, #8
29a60     10 FB 61 FC | 	wrlong	result1, local02
29a64     04 4E 05 F1 | 	add	fp, #4
29a68     A7 20 02 FB | 	rdlong	local02, fp
29a6c     2C 4E 05 F1 | 	add	fp, #44
29a70     A7 12 02 FB | 	rdlong	arg01, fp
29a74     1C 12 06 F1 | 	add	arg01, #28
29a78                 | ' {
29a78                 | ' 
29a78                 | ' 	return *((DWORD*)ptr);
29a78     09 FB 01 FB | 	rdlong	result1, arg01
29a7c     0C 20 06 F1 | 	add	local02, #12
29a80     10 FB 61 FC | 	wrlong	result1, local02
29a84     2C 4E 85 F1 | 	sub	fp, #44
29a88     A7 20 02 FB | 	rdlong	local02, fp
29a8c     40 4E 05 F1 | 	add	fp, #64
29a90     A7 1E 02 FB | 	rdlong	local01, fp
29a94     10 1F 62 FC | 	wrlong	local01, local02
29a98     40 4E 85 F1 | 	sub	fp, #64
29a9c     A7 20 02 FB | 	rdlong	local02, fp
29aa0     40 4E 05 F1 | 	add	fp, #64
29aa4     A7 1E 02 FB | 	rdlong	local01, fp
29aa8     06 1E 06 F1 | 	add	local01, #6
29aac     0F 1F E2 FA | 	rdword	local01, local01
29ab0     04 20 06 F1 | 	add	local02, #4
29ab4     10 1F 52 FC | 	wrword	local01, local02
29ab8     40 4E 85 F1 | 	sub	fp, #64
29abc     A7 20 02 FB | 	rdlong	local02, fp
29ac0     08 4E 05 F1 | 	add	fp, #8
29ac4     A7 1E C2 FA | 	rdbyte	local01, fp
29ac8     10 20 06 F1 | 	add	local02, #16
29acc     10 1F 42 FC | 	wrbyte	local01, local02
29ad0     08 4E 85 F1 | 	sub	fp, #8
29ad4     A7 20 02 FB | 	rdlong	local02, fp
29ad8     11 20 06 F1 | 	add	local02, #17
29adc     10 01 48 FC | 	wrbyte	#0, local02
29ae0     A7 20 02 FB | 	rdlong	local02, fp
29ae4     1C 20 06 F1 | 	add	local02, #28
29ae8     10 01 68 FC | 	wrlong	#0, local02
29aec     A7 20 02 FB | 	rdlong	local02, fp
29af0     14 20 06 F1 | 	add	local02, #20
29af4     10 01 68 FC | 	wrlong	#0, local02
29af8     A7 12 02 FB | 	rdlong	arg01, fp
29afc     04 4E 85 F1 | 	sub	fp, #4
29b00     28 12 06 F1 | 	add	arg01, #40
29b04     00 14 06 F6 | 	mov	arg02, #0
29b08     09 16 C6 F9 | 	decod	arg03, #9
29b0c     98 00 A0 FD | 	call	#\builtin_bytefill_
29b10     0C 4E 05 F1 | 	add	fp, #12
29b14     A7 20 C2 FA | 	rdbyte	local02, fp
29b18     0C 4E 85 F1 | 	sub	fp, #12
29b1c     20 20 CE F7 | 	test	local02, #32 wz
29b20     0C 02 90 AD |  if_e	jmp	#LR__4254
29b24     04 4E 05 F1 | 	add	fp, #4
29b28     A7 1E 02 FB | 	rdlong	local01, fp
29b2c     04 4E 85 F1 | 	sub	fp, #4
29b30     0C 1E 06 F1 | 	add	local01, #12
29b34     0F 21 02 FB | 	rdlong	local02, local01
29b38     01 20 16 F2 | 	cmp	local02, #1 wc
29b3c     F0 01 90 CD |  if_b	jmp	#LR__4254
29b40     04 4E 05 F1 | 	add	fp, #4
29b44     A7 1E 02 FB | 	rdlong	local01, fp
29b48     0F 21 02 F6 | 	mov	local02, local01
29b4c     0C 1E 06 F1 | 	add	local01, #12
29b50     0F 1F 02 FB | 	rdlong	local01, local01
29b54     14 20 06 F1 | 	add	local02, #20
29b58     10 1F 62 FC | 	wrlong	local01, local02
29b5c     40 4E 05 F1 | 	add	fp, #64
29b60     A7 20 02 FB | 	rdlong	local02, fp
29b64     0A 20 06 F1 | 	add	local02, #10
29b68     10 21 E2 FA | 	rdword	local02, local02
29b6c     09 20 66 F0 | 	shl	local02, #9
29b70     08 4E 05 F1 | 	add	fp, #8
29b74     A7 20 62 FC | 	wrlong	local02, fp
29b78     48 4E 85 F1 | 	sub	fp, #72
29b7c     A7 20 02 FB | 	rdlong	local02, fp
29b80     08 20 06 F1 | 	add	local02, #8
29b84     10 1F 02 FB | 	rdlong	local01, local02
29b88     4C 4E 05 F1 | 	add	fp, #76
29b8c     A7 1E 62 FC | 	wrlong	local01, fp
29b90                 | ' 				fp->fptr = fp->obj.objsize;
29b90                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
29b90                 | ' 				clst = fp->obj.sclust;
29b90                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
29b90     4C 4E 85 F1 | 	sub	fp, #76
29b94     A7 20 02 FB | 	rdlong	local02, fp
29b98     0C 20 06 F1 | 	add	local02, #12
29b9c     10 1F 02 FB | 	rdlong	local01, local02
29ba0     58 4E 05 F1 | 	add	fp, #88
29ba4     A7 1E 62 FC | 	wrlong	local01, fp
29ba8     5C 4E 85 F1 | 	sub	fp, #92
29bac                 | LR__4250
29bac     10 4E 05 F1 | 	add	fp, #16
29bb0     A7 20 0A FB | 	rdlong	local02, fp wz
29bb4     10 4E 85 F1 | 	sub	fp, #16
29bb8     94 00 90 5D |  if_ne	jmp	#LR__4251
29bbc     5C 4E 05 F1 | 	add	fp, #92
29bc0     A7 20 02 FB | 	rdlong	local02, fp
29bc4     10 4E 85 F1 | 	sub	fp, #16
29bc8     A7 1E 02 FB | 	rdlong	local01, fp
29bcc     4C 4E 85 F1 | 	sub	fp, #76
29bd0     0F 21 1A F2 | 	cmp	local02, local01 wcz
29bd4     78 00 90 ED |  if_be	jmp	#LR__4251
29bd8     04 4E 05 F1 | 	add	fp, #4
29bdc     A7 12 02 FB | 	rdlong	arg01, fp
29be0     4C 4E 05 F1 | 	add	fp, #76
29be4     A7 14 02 FB | 	rdlong	arg02, fp
29be8     50 4E 85 F1 | 	sub	fp, #80
29bec     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
29bf0     50 4E 05 F1 | 	add	fp, #80
29bf4     A7 FA 61 FC | 	wrlong	result1, fp
29bf8     50 4E 85 F1 | 	sub	fp, #80
29bfc     02 FA 15 F2 | 	cmp	result1, #2 wc
29c00     10 4E 05 C1 |  if_b	add	fp, #16
29c04     A7 04 68 CC |  if_b	wrlong	#2, fp
29c08     10 4E 85 C1 |  if_b	sub	fp, #16
29c0c     50 4E 05 F1 | 	add	fp, #80
29c10     A7 20 02 FB | 	rdlong	local02, fp
29c14     50 4E 85 F1 | 	sub	fp, #80
29c18     FF FF 7F FF 
29c1c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
29c20     10 4E 05 A1 |  if_e	add	fp, #16
29c24     A7 02 68 AC |  if_e	wrlong	#1, fp
29c28     10 4E 85 A1 |  if_e	sub	fp, #16
29c2c     5C 4E 05 F1 | 	add	fp, #92
29c30     A7 20 02 FB | 	rdlong	local02, fp
29c34     10 4E 85 F1 | 	sub	fp, #16
29c38     A7 1E 02 FB | 	rdlong	local01, fp
29c3c     0F 21 82 F1 | 	sub	local02, local01
29c40     10 4E 05 F1 | 	add	fp, #16
29c44     A7 20 62 FC | 	wrlong	local02, fp
29c48     5C 4E 85 F1 | 	sub	fp, #92
29c4c     5C FF 9F FD | 	jmp	#LR__4250
29c50                 | LR__4251
29c50     04 4E 05 F1 | 	add	fp, #4
29c54     A7 20 02 FB | 	rdlong	local02, fp
29c58     4C 4E 05 F1 | 	add	fp, #76
29c5c     A7 1E 02 FB | 	rdlong	local01, fp
29c60     18 20 06 F1 | 	add	local02, #24
29c64     10 1F 62 FC | 	wrlong	local01, local02
29c68     40 4E 85 F1 | 	sub	fp, #64
29c6c     A7 20 0A FB | 	rdlong	local02, fp wz
29c70     10 4E 85 F1 | 	sub	fp, #16
29c74     B8 00 90 5D |  if_ne	jmp	#LR__4253
29c78     5C 4E 05 F1 | 	add	fp, #92
29c7c     A7 1E 02 FB | 	rdlong	local01, fp
29c80     5C 4E 85 F1 | 	sub	fp, #92
29c84     FF 1F CE F7 | 	test	local01, #511 wz
29c88     A4 00 90 AD |  if_e	jmp	#LR__4253
29c8c     44 4E 05 F1 | 	add	fp, #68
29c90     A7 12 02 FB | 	rdlong	arg01, fp
29c94     0C 4E 05 F1 | 	add	fp, #12
29c98     A7 14 02 FB | 	rdlong	arg02, fp
29c9c     50 4E 85 F1 | 	sub	fp, #80
29ca0     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
29ca4     58 4E 05 F1 | 	add	fp, #88
29ca8     A7 FA 61 FC | 	wrlong	result1, fp
29cac     00 FA 4D F2 | 	cmps	result1, #0 wz
29cb0     58 4E 85 F1 | 	sub	fp, #88
29cb4     10 4E 05 A1 |  if_e	add	fp, #16
29cb8     A7 04 68 AC |  if_e	wrlong	#2, fp
29cbc     10 4E 85 A1 |  if_e	sub	fp, #16
29cc0     6C 00 90 AD |  if_e	jmp	#LR__4252
29cc4     04 4E 05 F1 | 	add	fp, #4
29cc8     A7 20 02 FB | 	rdlong	local02, fp
29ccc     54 4E 05 F1 | 	add	fp, #84
29cd0     A7 1E 02 FB | 	rdlong	local01, fp
29cd4     04 4E 05 F1 | 	add	fp, #4
29cd8     A7 18 02 FB | 	rdlong	arg04, fp
29cdc     09 18 46 F0 | 	shr	arg04, #9
29ce0     0C 1F 02 F1 | 	add	local01, arg04
29ce4     1C 20 06 F1 | 	add	local02, #28
29ce8     10 1F 62 FC | 	wrlong	local01, local02
29cec     18 4E 85 F1 | 	sub	fp, #24
29cf0     A7 20 02 FB | 	rdlong	local02, fp
29cf4     01 20 06 F1 | 	add	local02, #1
29cf8     10 13 C2 FA | 	rdbyte	arg01, local02
29cfc     40 4E 85 F1 | 	sub	fp, #64
29d00     A7 20 02 FB | 	rdlong	local02, fp
29d04     10 15 02 F6 | 	mov	arg02, local02
29d08     28 14 06 F1 | 	add	arg02, #40
29d0c     04 4E 85 F1 | 	sub	fp, #4
29d10     1C 20 06 F1 | 	add	local02, #28
29d14     10 17 02 FB | 	rdlong	arg03, local02
29d18     01 18 06 F6 | 	mov	arg04, #1
29d1c     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
29d20     00 FA 0D F2 | 	cmp	result1, #0 wz
29d24     10 4E 05 51 |  if_ne	add	fp, #16
29d28     A7 02 68 5C |  if_ne	wrlong	#1, fp
29d2c     10 4E 85 51 |  if_ne	sub	fp, #16
29d30                 | LR__4252
29d30                 | LR__4253
29d30                 | LR__4254
29d30                 | LR__4255
29d30                 | LR__4256
29d30     10 4E 05 F1 | 	add	fp, #16
29d34     A7 20 0A FB | 	rdlong	local02, fp wz
29d38     10 4E 85 F1 | 	sub	fp, #16
29d3c     04 4E 05 51 |  if_ne	add	fp, #4
29d40     A7 20 02 5B |  if_ne	rdlong	local02, fp
29d44     04 4E 85 51 |  if_ne	sub	fp, #4
29d48     10 01 68 5C |  if_ne	wrlong	#0, local02
29d4c                 | ' 
29d4c                 | ' 	return res ;
29d4c     10 4E 05 F1 | 	add	fp, #16
29d50     A7 FA 01 FB | 	rdlong	result1, fp
29d54     10 4E 85 F1 | 	sub	fp, #16
29d58                 | LR__4257
29d58     A7 F0 03 F6 | 	mov	ptra, fp
29d5c     B2 00 A0 FD | 	call	#popregs_
29d60                 | _fatfs_cc_f_open_ret
29d60     2D 00 64 FD | 	ret
29d64                 | 
29d64                 | _fatfs_cc_f_read
29d64     0E 4A 05 F6 | 	mov	COUNT_, #14
29d68     A8 00 A0 FD | 	call	#pushregs_
29d6c     38 F0 07 F1 | 	add	ptra, #56
29d70     04 4E 05 F1 | 	add	fp, #4
29d74     A7 12 62 FC | 	wrlong	arg01, fp
29d78     04 4E 05 F1 | 	add	fp, #4
29d7c     A7 14 62 FC | 	wrlong	arg02, fp
29d80     04 4E 05 F1 | 	add	fp, #4
29d84     A7 16 62 FC | 	wrlong	arg03, fp
29d88     04 4E 05 F1 | 	add	fp, #4
29d8c     A7 18 62 FC | 	wrlong	arg04, fp
29d90     08 4E 85 F1 | 	sub	fp, #8
29d94     A7 FA 01 FB | 	rdlong	result1, fp
29d98     2C 4E 05 F1 | 	add	fp, #44
29d9c     A7 FA 61 FC | 	wrlong	result1, fp
29da0     24 4E 85 F1 | 	sub	fp, #36
29da4     A7 FA 01 FB | 	rdlong	result1, fp
29da8     FD 00 68 FC | 	wrlong	#0, result1
29dac     0C 4E 85 F1 | 	sub	fp, #12
29db0     A7 12 02 FB | 	rdlong	arg01, fp
29db4     14 4E 05 F1 | 	add	fp, #20
29db8     A7 14 02 F6 | 	mov	arg02, fp
29dbc     18 4E 85 F1 | 	sub	fp, #24
29dc0     24 F7 BF FD | 	call	#_fatfs_cc_validate
29dc4     14 4E 05 F1 | 	add	fp, #20
29dc8     A7 FA 61 FC | 	wrlong	result1, fp
29dcc     00 FA 4D F2 | 	cmps	result1, #0 wz
29dd0     14 4E 85 F1 | 	sub	fp, #20
29dd4     20 00 90 5D |  if_ne	jmp	#LR__4260
29dd8     04 4E 05 F1 | 	add	fp, #4
29ddc     A7 14 02 FB | 	rdlong	arg02, fp
29de0     11 14 06 F1 | 	add	arg02, #17
29de4     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
29de8     10 4E 05 F1 | 	add	fp, #16
29dec     A7 14 62 FC | 	wrlong	arg02, fp
29df0     14 4E 85 F1 | 	sub	fp, #20
29df4     10 00 90 AD |  if_e	jmp	#LR__4261
29df8                 | LR__4260
29df8     14 4E 05 F1 | 	add	fp, #20
29dfc     A7 FA 01 FB | 	rdlong	result1, fp
29e00     14 4E 85 F1 | 	sub	fp, #20
29e04     EC 05 90 FD | 	jmp	#LR__4280
29e08                 | LR__4261
29e08     04 4E 05 F1 | 	add	fp, #4
29e0c     A7 18 02 FB | 	rdlong	arg04, fp
29e10     04 4E 85 F1 | 	sub	fp, #4
29e14     10 18 06 F1 | 	add	arg04, #16
29e18     0C 19 C2 FA | 	rdbyte	arg04, arg04
29e1c     01 18 CE F7 | 	test	arg04, #1 wz
29e20     07 FA 05 A6 |  if_e	mov	result1, #7
29e24     CC 05 90 AD |  if_e	jmp	#LR__4280
29e28     04 4E 05 F1 | 	add	fp, #4
29e2c     A7 1E 02 FB | 	rdlong	local01, fp
29e30     0F 21 02 F6 | 	mov	local02, local01
29e34     0C 20 06 F1 | 	add	local02, #12
29e38     10 23 02 FB | 	rdlong	local03, local02
29e3c     14 1E 06 F1 | 	add	local01, #20
29e40     0F 1F 02 FB | 	rdlong	local01, local01
29e44     0F 23 82 F1 | 	sub	local03, local01
29e48     20 4E 05 F1 | 	add	fp, #32
29e4c     A7 22 62 FC | 	wrlong	local03, fp
29e50     18 4E 85 F1 | 	sub	fp, #24
29e54     A7 24 02 FB | 	rdlong	local04, fp
29e58     0C 4E 85 F1 | 	sub	fp, #12
29e5c     11 25 1A F2 | 	cmp	local04, local03 wcz
29e60     24 4E 05 11 |  if_a	add	fp, #36
29e64     A7 24 02 1B |  if_a	rdlong	local04, fp
29e68     18 4E 85 11 |  if_a	sub	fp, #24
29e6c     A7 24 62 1C |  if_a	wrlong	local04, fp
29e70     0C 4E 85 11 |  if_a	sub	fp, #12
29e74                 | ' 
29e74                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
29e74                 | LR__4262
29e74     0C 4E 05 F1 | 	add	fp, #12
29e78     A7 20 02 FB | 	rdlong	local02, fp
29e7c     0C 4E 85 F1 | 	sub	fp, #12
29e80     10 25 02 F6 | 	mov	local04, local02
29e84     01 24 16 F2 | 	cmp	local04, #1 wc
29e88     64 05 90 CD |  if_b	jmp	#LR__4279
29e8c     04 4E 05 F1 | 	add	fp, #4
29e90     A7 22 02 FB | 	rdlong	local03, fp
29e94     04 4E 85 F1 | 	sub	fp, #4
29e98     14 22 06 F1 | 	add	local03, #20
29e9c     11 23 02 FB | 	rdlong	local03, local03
29ea0     FF 23 CE F7 | 	test	local03, #511 wz
29ea4     3C 04 90 5D |  if_ne	jmp	#LR__4277
29ea8     04 4E 05 F1 | 	add	fp, #4
29eac     A7 1E 02 FB | 	rdlong	local01, fp
29eb0     14 1E 06 F1 | 	add	local01, #20
29eb4     0F 23 02 FB | 	rdlong	local03, local01
29eb8     09 22 46 F0 | 	shr	local03, #9
29ebc     14 4E 05 F1 | 	add	fp, #20
29ec0     A7 26 02 FB | 	rdlong	local05, fp
29ec4     13 29 02 F6 | 	mov	local06, local05
29ec8     0A 28 06 F1 | 	add	local06, #10
29ecc     14 2B E2 FA | 	rdword	local07, local06
29ed0     0A 28 86 F1 | 	sub	local06, #10
29ed4     15 2D 32 F9 | 	getword	local08, local07, #0
29ed8     01 2C 86 F1 | 	sub	local08, #1
29edc     16 23 0A F5 | 	and	local03, local08 wz
29ee0     18 4E 05 F1 | 	add	fp, #24
29ee4     A7 22 62 FC | 	wrlong	local03, fp
29ee8     30 4E 85 F1 | 	sub	fp, #48
29eec     E0 00 90 5D |  if_ne	jmp	#LR__4267
29ef0     04 4E 05 F1 | 	add	fp, #4
29ef4     A7 22 02 FB | 	rdlong	local03, fp
29ef8     04 4E 85 F1 | 	sub	fp, #4
29efc     14 22 06 F1 | 	add	local03, #20
29f00     11 23 0A FB | 	rdlong	local03, local03 wz
29f04     20 00 90 5D |  if_ne	jmp	#LR__4263
29f08     04 4E 05 F1 | 	add	fp, #4
29f0c     A7 22 02 FB | 	rdlong	local03, fp
29f10     08 22 06 F1 | 	add	local03, #8
29f14     11 23 02 FB | 	rdlong	local03, local03
29f18     18 4E 05 F1 | 	add	fp, #24
29f1c     A7 22 62 FC | 	wrlong	local03, fp
29f20     1C 4E 85 F1 | 	sub	fp, #28
29f24     28 00 90 FD | 	jmp	#LR__4264
29f28                 | LR__4263
29f28     04 4E 05 F1 | 	add	fp, #4
29f2c     A7 2C 02 FB | 	rdlong	local08, fp
29f30     16 13 02 F6 | 	mov	arg01, local08
29f34     04 4E 85 F1 | 	sub	fp, #4
29f38     18 2C 06 F1 | 	add	local08, #24
29f3c     16 15 02 FB | 	rdlong	arg02, local08
29f40     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
29f44     1C 4E 05 F1 | 	add	fp, #28
29f48     A7 FA 61 FC | 	wrlong	result1, fp
29f4c     1C 4E 85 F1 | 	sub	fp, #28
29f50                 | LR__4264
29f50     1C 4E 05 F1 | 	add	fp, #28
29f54     A7 22 02 FB | 	rdlong	local03, fp
29f58     1C 4E 85 F1 | 	sub	fp, #28
29f5c     02 22 16 F2 | 	cmp	local03, #2 wc
29f60     1C 00 90 3D |  if_ae	jmp	#LR__4265
29f64     04 4E 05 F1 | 	add	fp, #4
29f68     A7 22 02 FB | 	rdlong	local03, fp
29f6c     04 4E 85 F1 | 	sub	fp, #4
29f70     11 22 06 F1 | 	add	local03, #17
29f74     11 05 48 FC | 	wrbyte	#2, local03
29f78     02 FA 05 F6 | 	mov	result1, #2
29f7c     74 04 90 FD | 	jmp	#LR__4280
29f80                 | LR__4265
29f80     1C 4E 05 F1 | 	add	fp, #28
29f84     A7 22 02 FB | 	rdlong	local03, fp
29f88     1C 4E 85 F1 | 	sub	fp, #28
29f8c     FF FF 7F FF 
29f90     FF 23 0E F2 | 	cmp	local03, ##-1 wz
29f94     1C 00 90 5D |  if_ne	jmp	#LR__4266
29f98     04 4E 05 F1 | 	add	fp, #4
29f9c     A7 22 02 FB | 	rdlong	local03, fp
29fa0     04 4E 85 F1 | 	sub	fp, #4
29fa4     11 22 06 F1 | 	add	local03, #17
29fa8     11 03 48 FC | 	wrbyte	#1, local03
29fac     01 FA 05 F6 | 	mov	result1, #1
29fb0     40 04 90 FD | 	jmp	#LR__4280
29fb4                 | LR__4266
29fb4     04 4E 05 F1 | 	add	fp, #4
29fb8     A7 22 02 FB | 	rdlong	local03, fp
29fbc     18 4E 05 F1 | 	add	fp, #24
29fc0     A7 2C 02 FB | 	rdlong	local08, fp
29fc4     1C 4E 85 F1 | 	sub	fp, #28
29fc8     18 22 06 F1 | 	add	local03, #24
29fcc     11 2D 62 FC | 	wrlong	local08, local03
29fd0                 | LR__4267
29fd0     18 4E 05 F1 | 	add	fp, #24
29fd4     A7 12 02 FB | 	rdlong	arg01, fp
29fd8     14 4E 85 F1 | 	sub	fp, #20
29fdc     A7 22 02 FB | 	rdlong	local03, fp
29fe0     04 4E 85 F1 | 	sub	fp, #4
29fe4     18 22 06 F1 | 	add	local03, #24
29fe8     11 15 02 FB | 	rdlong	arg02, local03
29fec     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
29ff0     20 4E 05 F1 | 	add	fp, #32
29ff4     A7 FA 61 FC | 	wrlong	result1, fp
29ff8     20 4E 85 F1 | 	sub	fp, #32
29ffc     00 FA 0D F2 | 	cmp	result1, #0 wz
2a000     1C 00 90 5D |  if_ne	jmp	#LR__4268
2a004     04 4E 05 F1 | 	add	fp, #4
2a008     A7 22 02 FB | 	rdlong	local03, fp
2a00c     04 4E 85 F1 | 	sub	fp, #4
2a010     11 22 06 F1 | 	add	local03, #17
2a014     11 05 48 FC | 	wrbyte	#2, local03
2a018     02 FA 05 F6 | 	mov	result1, #2
2a01c     D4 03 90 FD | 	jmp	#LR__4280
2a020                 | LR__4268
2a020     20 4E 05 F1 | 	add	fp, #32
2a024     A7 22 02 FB | 	rdlong	local03, fp
2a028     10 4E 05 F1 | 	add	fp, #16
2a02c     A7 2C 02 FB | 	rdlong	local08, fp
2a030     16 23 02 F1 | 	add	local03, local08
2a034     10 4E 85 F1 | 	sub	fp, #16
2a038     A7 22 62 FC | 	wrlong	local03, fp
2a03c     14 4E 85 F1 | 	sub	fp, #20
2a040     A7 22 02 FB | 	rdlong	local03, fp
2a044     09 22 46 F0 | 	shr	local03, #9
2a048     20 4E 05 F1 | 	add	fp, #32
2a04c     A7 22 62 FC | 	wrlong	local03, fp
2a050     2C 4E 85 F1 | 	sub	fp, #44
2a054     01 22 16 F2 | 	cmp	local03, #1 wc
2a058     5C 01 90 CD |  if_b	jmp	#LR__4272
2a05c     30 4E 05 F1 | 	add	fp, #48
2a060     A7 22 02 FB | 	rdlong	local03, fp
2a064     04 4E 85 F1 | 	sub	fp, #4
2a068     A7 2C 02 FB | 	rdlong	local08, fp
2a06c     16 23 02 F1 | 	add	local03, local08
2a070     14 4E 85 F1 | 	sub	fp, #20
2a074     A7 2C 02 FB | 	rdlong	local08, fp
2a078     18 4E 85 F1 | 	sub	fp, #24
2a07c     0A 2C 06 F1 | 	add	local08, #10
2a080     16 2D E2 FA | 	rdword	local08, local08
2a084     16 23 1A F2 | 	cmp	local03, local08 wcz
2a088     28 00 90 ED |  if_be	jmp	#LR__4269
2a08c     18 4E 05 F1 | 	add	fp, #24
2a090     A7 1E 02 FB | 	rdlong	local01, fp
2a094     0A 1E 06 F1 | 	add	local01, #10
2a098     0F 23 E2 FA | 	rdword	local03, local01
2a09c     18 4E 05 F1 | 	add	fp, #24
2a0a0     A7 2C 02 FB | 	rdlong	local08, fp
2a0a4     16 23 82 F1 | 	sub	local03, local08
2a0a8     04 4E 85 F1 | 	sub	fp, #4
2a0ac     A7 22 62 FC | 	wrlong	local03, fp
2a0b0     2C 4E 85 F1 | 	sub	fp, #44
2a0b4                 | LR__4269
2a0b4     18 4E 05 F1 | 	add	fp, #24
2a0b8     A7 1E 02 FB | 	rdlong	local01, fp
2a0bc     01 1E 06 F1 | 	add	local01, #1
2a0c0     0F 13 C2 FA | 	rdbyte	arg01, local01
2a0c4     1C 4E 05 F1 | 	add	fp, #28
2a0c8     A7 14 02 FB | 	rdlong	arg02, fp
2a0cc     14 4E 85 F1 | 	sub	fp, #20
2a0d0     A7 16 02 FB | 	rdlong	arg03, fp
2a0d4     0C 4E 05 F1 | 	add	fp, #12
2a0d8     A7 18 02 FB | 	rdlong	arg04, fp
2a0dc     2C 4E 85 F1 | 	sub	fp, #44
2a0e0     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2a0e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a0e8     1C 00 90 AD |  if_e	jmp	#LR__4270
2a0ec     04 4E 05 F1 | 	add	fp, #4
2a0f0     A7 22 02 FB | 	rdlong	local03, fp
2a0f4     04 4E 85 F1 | 	sub	fp, #4
2a0f8     11 22 06 F1 | 	add	local03, #17
2a0fc     11 03 48 FC | 	wrbyte	#1, local03
2a100     01 FA 05 F6 | 	mov	result1, #1
2a104     EC 02 90 FD | 	jmp	#LR__4280
2a108                 | LR__4270
2a108     04 4E 05 F1 | 	add	fp, #4
2a10c     A7 1E 02 FB | 	rdlong	local01, fp
2a110     04 4E 85 F1 | 	sub	fp, #4
2a114     10 1E 06 F1 | 	add	local01, #16
2a118     0F 23 C2 FA | 	rdbyte	local03, local01
2a11c     80 22 CE F7 | 	test	local03, #128 wz
2a120     78 00 90 AD |  if_e	jmp	#LR__4271
2a124     04 4E 05 F1 | 	add	fp, #4
2a128     A7 2C 02 FB | 	rdlong	local08, fp
2a12c     1C 2C 06 F1 | 	add	local08, #28
2a130     16 2D 02 FB | 	rdlong	local08, local08
2a134     1C 4E 05 F1 | 	add	fp, #28
2a138     A7 2E 02 FB | 	rdlong	local09, fp
2a13c     17 2D 82 F1 | 	sub	local08, local09
2a140     0C 4E 05 F1 | 	add	fp, #12
2a144     A7 30 02 FB | 	rdlong	local10, fp
2a148     2C 4E 85 F1 | 	sub	fp, #44
2a14c     18 33 02 F6 | 	mov	local11, local10
2a150     19 2D 12 F2 | 	cmp	local08, local11 wc
2a154     44 00 90 3D |  if_ae	jmp	#LR__4271
2a158     34 4E 05 F1 | 	add	fp, #52
2a15c     A7 12 02 FB | 	rdlong	arg01, fp
2a160     30 4E 85 F1 | 	sub	fp, #48
2a164     A7 14 02 FB | 	rdlong	arg02, fp
2a168     0A 33 02 F6 | 	mov	local11, arg02
2a16c     1C 32 06 F1 | 	add	local11, #28
2a170     19 2F 02 FB | 	rdlong	local09, local11
2a174     1C 4E 05 F1 | 	add	fp, #28
2a178     A7 26 02 FB | 	rdlong	local05, fp
2a17c     13 2F 82 F1 | 	sub	local09, local05
2a180     09 2E 66 F0 | 	shl	local09, #9
2a184     17 33 02 F6 | 	mov	local11, local09
2a188     17 13 02 F1 | 	add	arg01, local09
2a18c     20 4E 85 F1 | 	sub	fp, #32
2a190     28 14 06 F1 | 	add	arg02, #40
2a194     09 16 C6 F9 | 	decod	arg03, #9
2a198     BC 48 BF FD | 	call	#__system____builtin_memmove
2a19c                 | LR__4271
2a19c     2C 4E 05 F1 | 	add	fp, #44
2a1a0     A7 22 02 FB | 	rdlong	local03, fp
2a1a4     09 22 66 F0 | 	shl	local03, #9
2a1a8     04 4E 85 F1 | 	sub	fp, #4
2a1ac     A7 22 62 FC | 	wrlong	local03, fp
2a1b0     28 4E 85 F1 | 	sub	fp, #40
2a1b4                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2a1b4                 | ' 				}
2a1b4                 | ' 
2a1b4                 | ' 
2a1b4                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2a1b4                 | ' 				continue;
2a1b4     B4 01 90 FD | 	jmp	#LR__4278
2a1b8                 | LR__4272
2a1b8     04 4E 05 F1 | 	add	fp, #4
2a1bc     A7 22 02 FB | 	rdlong	local03, fp
2a1c0     1C 22 06 F1 | 	add	local03, #28
2a1c4     11 23 02 FB | 	rdlong	local03, local03
2a1c8     1C 4E 05 F1 | 	add	fp, #28
2a1cc     A7 1E 02 FB | 	rdlong	local01, fp
2a1d0     20 4E 85 F1 | 	sub	fp, #32
2a1d4     0F 23 0A F2 | 	cmp	local03, local01 wz
2a1d8     EC 00 90 AD |  if_e	jmp	#LR__4276
2a1dc     04 4E 05 F1 | 	add	fp, #4
2a1e0     A7 1E 02 FB | 	rdlong	local01, fp
2a1e4     04 4E 85 F1 | 	sub	fp, #4
2a1e8     10 1E 06 F1 | 	add	local01, #16
2a1ec     0F 23 C2 FA | 	rdbyte	local03, local01
2a1f0     80 22 CE F7 | 	test	local03, #128 wz
2a1f4     7C 00 90 AD |  if_e	jmp	#LR__4274
2a1f8     18 4E 05 F1 | 	add	fp, #24
2a1fc     A7 1E 02 FB | 	rdlong	local01, fp
2a200     01 1E 06 F1 | 	add	local01, #1
2a204     0F 13 C2 FA | 	rdbyte	arg01, local01
2a208     14 4E 85 F1 | 	sub	fp, #20
2a20c     A7 22 02 FB | 	rdlong	local03, fp
2a210     11 15 02 F6 | 	mov	arg02, local03
2a214     28 14 06 F1 | 	add	arg02, #40
2a218     04 4E 85 F1 | 	sub	fp, #4
2a21c     1C 22 06 F1 | 	add	local03, #28
2a220     11 17 02 FB | 	rdlong	arg03, local03
2a224     01 18 06 F6 | 	mov	arg04, #1
2a228     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2a22c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a230     1C 00 90 AD |  if_e	jmp	#LR__4273
2a234     04 4E 05 F1 | 	add	fp, #4
2a238     A7 22 02 FB | 	rdlong	local03, fp
2a23c     04 4E 85 F1 | 	sub	fp, #4
2a240     11 22 06 F1 | 	add	local03, #17
2a244     11 03 48 FC | 	wrbyte	#1, local03
2a248     01 FA 05 F6 | 	mov	result1, #1
2a24c     A4 01 90 FD | 	jmp	#LR__4280
2a250                 | LR__4273
2a250     04 4E 05 F1 | 	add	fp, #4
2a254     A7 32 02 FB | 	rdlong	local11, fp
2a258     19 23 02 F6 | 	mov	local03, local11
2a25c     04 4E 85 F1 | 	sub	fp, #4
2a260     10 32 06 F1 | 	add	local11, #16
2a264     19 33 C2 FA | 	rdbyte	local11, local11
2a268     7F 32 06 F5 | 	and	local11, #127
2a26c     10 22 06 F1 | 	add	local03, #16
2a270     11 33 42 FC | 	wrbyte	local11, local03
2a274                 | LR__4274
2a274     18 4E 05 F1 | 	add	fp, #24
2a278     A7 1E 02 FB | 	rdlong	local01, fp
2a27c     01 1E 06 F1 | 	add	local01, #1
2a280     0F 13 C2 FA | 	rdbyte	arg01, local01
2a284     14 4E 85 F1 | 	sub	fp, #20
2a288     A7 14 02 FB | 	rdlong	arg02, fp
2a28c     28 14 06 F1 | 	add	arg02, #40
2a290     1C 4E 05 F1 | 	add	fp, #28
2a294     A7 16 02 FB | 	rdlong	arg03, fp
2a298     20 4E 85 F1 | 	sub	fp, #32
2a29c     01 18 06 F6 | 	mov	arg04, #1
2a2a0     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2a2a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a2a8     1C 00 90 AD |  if_e	jmp	#LR__4275
2a2ac     04 4E 05 F1 | 	add	fp, #4
2a2b0     A7 22 02 FB | 	rdlong	local03, fp
2a2b4     04 4E 85 F1 | 	sub	fp, #4
2a2b8     11 22 06 F1 | 	add	local03, #17
2a2bc     11 03 48 FC | 	wrbyte	#1, local03
2a2c0     01 FA 05 F6 | 	mov	result1, #1
2a2c4     2C 01 90 FD | 	jmp	#LR__4280
2a2c8                 | LR__4275
2a2c8                 | LR__4276
2a2c8     04 4E 05 F1 | 	add	fp, #4
2a2cc     A7 22 02 FB | 	rdlong	local03, fp
2a2d0     1C 4E 05 F1 | 	add	fp, #28
2a2d4     A7 32 02 FB | 	rdlong	local11, fp
2a2d8     20 4E 85 F1 | 	sub	fp, #32
2a2dc     1C 22 06 F1 | 	add	local03, #28
2a2e0     11 33 62 FC | 	wrlong	local11, local03
2a2e4                 | LR__4277
2a2e4     04 4E 05 F1 | 	add	fp, #4
2a2e8     A7 1E 02 FB | 	rdlong	local01, fp
2a2ec     14 1E 06 F1 | 	add	local01, #20
2a2f0     0F 33 02 FB | 	rdlong	local11, local01
2a2f4     FF 33 06 F5 | 	and	local11, #511
2a2f8     09 22 C6 F9 | 	decod	local03, #9
2a2fc     19 23 82 F1 | 	sub	local03, local11
2a300     24 4E 05 F1 | 	add	fp, #36
2a304     A7 22 62 FC | 	wrlong	local03, fp
2a308     1C 4E 85 F1 | 	sub	fp, #28
2a30c     A7 32 02 FB | 	rdlong	local11, fp
2a310     0C 4E 85 F1 | 	sub	fp, #12
2a314     19 23 1A F2 | 	cmp	local03, local11 wcz
2a318     0C 4E 05 11 |  if_a	add	fp, #12
2a31c     A7 22 02 1B |  if_a	rdlong	local03, fp
2a320     1C 4E 05 11 |  if_a	add	fp, #28
2a324     A7 22 62 1C |  if_a	wrlong	local03, fp
2a328     28 4E 85 11 |  if_a	sub	fp, #40
2a32c     34 4E 05 F1 | 	add	fp, #52
2a330     A7 12 02 FB | 	rdlong	arg01, fp
2a334     30 4E 85 F1 | 	sub	fp, #48
2a338     A7 28 02 FB | 	rdlong	local06, fp
2a33c     14 15 02 F6 | 	mov	arg02, local06
2a340     28 14 06 F1 | 	add	arg02, #40
2a344     14 28 06 F1 | 	add	local06, #20
2a348     14 33 02 FB | 	rdlong	local11, local06
2a34c     19 2F 02 F6 | 	mov	local09, local11
2a350     17 31 02 F6 | 	mov	local10, local09
2a354     FF 31 06 F5 | 	and	local10, #511
2a358     18 15 02 F1 | 	add	arg02, local10
2a35c     24 4E 05 F1 | 	add	fp, #36
2a360     A7 16 02 FB | 	rdlong	arg03, fp
2a364     28 4E 85 F1 | 	sub	fp, #40
2a368     EC 46 BF FD | 	call	#__system____builtin_memmove
2a36c                 | LR__4278
2a36c     0C 4E 05 F1 | 	add	fp, #12
2a370     A7 22 02 FB | 	rdlong	local03, fp
2a374     1C 4E 05 F1 | 	add	fp, #28
2a378     A7 2C 02 FB | 	rdlong	local08, fp
2a37c     16 23 82 F1 | 	sub	local03, local08
2a380     1C 4E 85 F1 | 	sub	fp, #28
2a384     A7 22 62 FC | 	wrlong	local03, fp
2a388     04 4E 05 F1 | 	add	fp, #4
2a38c     A7 1E 02 FB | 	rdlong	local01, fp
2a390     0F 2B 02 FB | 	rdlong	local07, local01
2a394     18 4E 05 F1 | 	add	fp, #24
2a398     A7 2C 02 FB | 	rdlong	local08, fp
2a39c     16 2B 02 F1 | 	add	local07, local08
2a3a0     0F 2B 62 FC | 	wrlong	local07, local01
2a3a4     0C 4E 05 F1 | 	add	fp, #12
2a3a8     A7 22 02 FB | 	rdlong	local03, fp
2a3ac     0C 4E 85 F1 | 	sub	fp, #12
2a3b0     A7 34 02 FB | 	rdlong	local12, fp
2a3b4     1A 23 02 F1 | 	add	local03, local12
2a3b8     0C 4E 05 F1 | 	add	fp, #12
2a3bc     A7 22 62 FC | 	wrlong	local03, fp
2a3c0     30 4E 85 F1 | 	sub	fp, #48
2a3c4     A7 36 02 FB | 	rdlong	local13, fp
2a3c8     1B 23 02 F6 | 	mov	local03, local13
2a3cc     14 36 06 F1 | 	add	local13, #20
2a3d0     1B 39 02 FB | 	rdlong	local14, local13
2a3d4     24 4E 05 F1 | 	add	fp, #36
2a3d8     A7 28 02 FB | 	rdlong	local06, fp
2a3dc     28 4E 85 F1 | 	sub	fp, #40
2a3e0     14 39 02 F1 | 	add	local14, local06
2a3e4     14 22 06 F1 | 	add	local03, #20
2a3e8     11 39 62 FC | 	wrlong	local14, local03
2a3ec     84 FA 9F FD | 	jmp	#LR__4262
2a3f0                 | LR__4279
2a3f0                 | ' 
2a3f0                 | ' 
2a3f0                 | ' 
2a3f0                 | ' 
2a3f0                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2a3f0                 | ' 
2a3f0                 | ' 	}
2a3f0                 | ' 
2a3f0                 | ' 	return FR_OK ;
2a3f0     00 FA 05 F6 | 	mov	result1, #0
2a3f4                 | LR__4280
2a3f4     A7 F0 03 F6 | 	mov	ptra, fp
2a3f8     B2 00 A0 FD | 	call	#popregs_
2a3fc                 | _fatfs_cc_f_read_ret
2a3fc     2D 00 64 FD | 	ret
2a400                 | 
2a400                 | _fatfs_cc_f_write
2a400     15 4A 05 F6 | 	mov	COUNT_, #21
2a404     A8 00 A0 FD | 	call	#pushregs_
2a408     34 F0 07 F1 | 	add	ptra, #52
2a40c     04 4E 05 F1 | 	add	fp, #4
2a410     A7 12 62 FC | 	wrlong	arg01, fp
2a414     04 4E 05 F1 | 	add	fp, #4
2a418     A7 14 62 FC | 	wrlong	arg02, fp
2a41c     04 4E 05 F1 | 	add	fp, #4
2a420     A7 16 62 FC | 	wrlong	arg03, fp
2a424     04 4E 05 F1 | 	add	fp, #4
2a428     A7 18 62 FC | 	wrlong	arg04, fp
2a42c     08 4E 85 F1 | 	sub	fp, #8
2a430     A7 FA 01 FB | 	rdlong	result1, fp
2a434     28 4E 05 F1 | 	add	fp, #40
2a438     A7 FA 61 FC | 	wrlong	result1, fp
2a43c     20 4E 85 F1 | 	sub	fp, #32
2a440     A7 FA 01 FB | 	rdlong	result1, fp
2a444     FD 00 68 FC | 	wrlong	#0, result1
2a448     0C 4E 85 F1 | 	sub	fp, #12
2a44c     A7 12 02 FB | 	rdlong	arg01, fp
2a450     14 4E 05 F1 | 	add	fp, #20
2a454     A7 14 02 F6 | 	mov	arg02, fp
2a458     18 4E 85 F1 | 	sub	fp, #24
2a45c     88 F0 BF FD | 	call	#_fatfs_cc_validate
2a460     14 4E 05 F1 | 	add	fp, #20
2a464     A7 FA 61 FC | 	wrlong	result1, fp
2a468     00 FA 4D F2 | 	cmps	result1, #0 wz
2a46c     14 4E 85 F1 | 	sub	fp, #20
2a470     20 00 90 5D |  if_ne	jmp	#LR__4290
2a474     04 4E 05 F1 | 	add	fp, #4
2a478     A7 14 02 FB | 	rdlong	arg02, fp
2a47c     11 14 06 F1 | 	add	arg02, #17
2a480     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2a484     10 4E 05 F1 | 	add	fp, #16
2a488     A7 14 62 FC | 	wrlong	arg02, fp
2a48c     14 4E 85 F1 | 	sub	fp, #20
2a490     10 00 90 AD |  if_e	jmp	#LR__4291
2a494                 | LR__4290
2a494     14 4E 05 F1 | 	add	fp, #20
2a498     A7 FA 01 FB | 	rdlong	result1, fp
2a49c     14 4E 85 F1 | 	sub	fp, #20
2a4a0     44 07 90 FD | 	jmp	#LR__4313
2a4a4                 | LR__4291
2a4a4     04 4E 05 F1 | 	add	fp, #4
2a4a8     A7 14 02 FB | 	rdlong	arg02, fp
2a4ac     04 4E 85 F1 | 	sub	fp, #4
2a4b0     10 14 06 F1 | 	add	arg02, #16
2a4b4     0A 15 C2 FA | 	rdbyte	arg02, arg02
2a4b8     02 14 CE F7 | 	test	arg02, #2 wz
2a4bc     07 FA 05 A6 |  if_e	mov	result1, #7
2a4c0     24 07 90 AD |  if_e	jmp	#LR__4313
2a4c4     04 4E 05 F1 | 	add	fp, #4
2a4c8     A7 14 02 FB | 	rdlong	arg02, fp
2a4cc     0A 13 02 F6 | 	mov	arg01, arg02
2a4d0     14 12 06 F1 | 	add	arg01, #20
2a4d4     09 13 02 FB | 	rdlong	arg01, arg01
2a4d8     08 4E 05 F1 | 	add	fp, #8
2a4dc     A7 FA 01 FB | 	rdlong	result1, fp
2a4e0     FD 12 02 F1 | 	add	arg01, result1
2a4e4     0C 4E 85 F1 | 	sub	fp, #12
2a4e8     14 14 06 F1 | 	add	arg02, #20
2a4ec     0A FB 01 FB | 	rdlong	result1, arg02
2a4f0     FD 12 12 F2 | 	cmp	arg01, result1 wc
2a4f4     24 00 90 3D |  if_ae	jmp	#LR__4292
2a4f8     04 4E 05 F1 | 	add	fp, #4
2a4fc     A7 14 02 FB | 	rdlong	arg02, fp
2a500     01 FA 65 F6 | 	neg	result1, #1
2a504     14 14 06 F1 | 	add	arg02, #20
2a508     0A 15 02 FB | 	rdlong	arg02, arg02
2a50c     0A FB 81 F1 | 	sub	result1, arg02
2a510     08 4E 05 F1 | 	add	fp, #8
2a514     A7 FA 61 FC | 	wrlong	result1, fp
2a518     0C 4E 85 F1 | 	sub	fp, #12
2a51c                 | LR__4292
2a51c                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2a51c                 | ' 	}
2a51c                 | ' 
2a51c                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2a51c                 | LR__4293
2a51c     0C 4E 05 F1 | 	add	fp, #12
2a520     A7 FA 01 FB | 	rdlong	result1, fp
2a524     0C 4E 85 F1 | 	sub	fp, #12
2a528     01 FA 15 F2 | 	cmp	result1, #1 wc
2a52c     90 06 90 CD |  if_b	jmp	#LR__4312
2a530     04 4E 05 F1 | 	add	fp, #4
2a534     A7 FA 01 FB | 	rdlong	result1, fp
2a538     04 4E 85 F1 | 	sub	fp, #4
2a53c     14 FA 05 F1 | 	add	result1, #20
2a540     FD FA 01 FB | 	rdlong	result1, result1
2a544     FF FB CD F7 | 	test	result1, #511 wz
2a548     D8 04 90 5D |  if_ne	jmp	#LR__4308
2a54c     04 4E 05 F1 | 	add	fp, #4
2a550     A7 FA 01 FB | 	rdlong	result1, fp
2a554     14 FA 05 F1 | 	add	result1, #20
2a558     FD FA 01 FB | 	rdlong	result1, result1
2a55c     09 FA 45 F0 | 	shr	result1, #9
2a560     14 4E 05 F1 | 	add	fp, #20
2a564     A7 14 02 FB | 	rdlong	arg02, fp
2a568     0A 14 06 F1 | 	add	arg02, #10
2a56c     0A 19 E2 FA | 	rdword	arg04, arg02
2a570     0C 15 32 F9 | 	getword	arg02, arg04, #0
2a574     01 14 86 F1 | 	sub	arg02, #1
2a578     0A FB 09 F5 | 	and	result1, arg02 wz
2a57c     14 4E 05 F1 | 	add	fp, #20
2a580     A7 FA 61 FC | 	wrlong	result1, fp
2a584     2C 4E 85 F1 | 	sub	fp, #44
2a588     44 01 90 5D |  if_ne	jmp	#LR__4299
2a58c     04 4E 05 F1 | 	add	fp, #4
2a590     A7 FA 01 FB | 	rdlong	result1, fp
2a594     04 4E 85 F1 | 	sub	fp, #4
2a598     14 FA 05 F1 | 	add	result1, #20
2a59c     FD 14 0A FB | 	rdlong	arg02, result1 wz
2a5a0     44 00 90 5D |  if_ne	jmp	#LR__4294
2a5a4     04 4E 05 F1 | 	add	fp, #4
2a5a8     A7 14 02 FB | 	rdlong	arg02, fp
2a5ac     08 14 06 F1 | 	add	arg02, #8
2a5b0     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2a5b4     18 4E 05 F1 | 	add	fp, #24
2a5b8     A7 14 62 FC | 	wrlong	arg02, fp
2a5bc     1C 4E 85 F1 | 	sub	fp, #28
2a5c0     4C 00 90 5D |  if_ne	jmp	#LR__4295
2a5c4     04 4E 05 F1 | 	add	fp, #4
2a5c8     A7 12 02 FB | 	rdlong	arg01, fp
2a5cc     04 4E 85 F1 | 	sub	fp, #4
2a5d0     00 14 06 F6 | 	mov	arg02, #0
2a5d4     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2a5d8     1C 4E 05 F1 | 	add	fp, #28
2a5dc     A7 FA 61 FC | 	wrlong	result1, fp
2a5e0     1C 4E 85 F1 | 	sub	fp, #28
2a5e4     28 00 90 FD | 	jmp	#LR__4295
2a5e8                 | LR__4294
2a5e8     04 4E 05 F1 | 	add	fp, #4
2a5ec     A7 18 02 FB | 	rdlong	arg04, fp
2a5f0     0C 13 02 F6 | 	mov	arg01, arg04
2a5f4     04 4E 85 F1 | 	sub	fp, #4
2a5f8     18 18 06 F1 | 	add	arg04, #24
2a5fc     0C 15 02 FB | 	rdlong	arg02, arg04
2a600     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2a604     1C 4E 05 F1 | 	add	fp, #28
2a608     A7 FA 61 FC | 	wrlong	result1, fp
2a60c     1C 4E 85 F1 | 	sub	fp, #28
2a610                 | LR__4295
2a610     1C 4E 05 F1 | 	add	fp, #28
2a614     A7 FA 09 FB | 	rdlong	result1, fp wz
2a618     1C 4E 85 F1 | 	sub	fp, #28
2a61c     A0 05 90 AD |  if_e	jmp	#LR__4312
2a620     1C 4E 05 F1 | 	add	fp, #28
2a624     A7 FA 01 FB | 	rdlong	result1, fp
2a628     1C 4E 85 F1 | 	sub	fp, #28
2a62c     01 FA 0D F2 | 	cmp	result1, #1 wz
2a630     1C 00 90 5D |  if_ne	jmp	#LR__4296
2a634     04 4E 05 F1 | 	add	fp, #4
2a638     A7 FA 01 FB | 	rdlong	result1, fp
2a63c     04 4E 85 F1 | 	sub	fp, #4
2a640     11 FA 05 F1 | 	add	result1, #17
2a644     FD 04 48 FC | 	wrbyte	#2, result1
2a648     02 FA 05 F6 | 	mov	result1, #2
2a64c     98 05 90 FD | 	jmp	#LR__4313
2a650                 | LR__4296
2a650     1C 4E 05 F1 | 	add	fp, #28
2a654     A7 FA 01 FB | 	rdlong	result1, fp
2a658     1C 4E 85 F1 | 	sub	fp, #28
2a65c     FF FF 7F FF 
2a660     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2a664     1C 00 90 5D |  if_ne	jmp	#LR__4297
2a668     04 4E 05 F1 | 	add	fp, #4
2a66c     A7 FA 01 FB | 	rdlong	result1, fp
2a670     04 4E 85 F1 | 	sub	fp, #4
2a674     11 FA 05 F1 | 	add	result1, #17
2a678     FD 02 48 FC | 	wrbyte	#1, result1
2a67c     01 FA 05 F6 | 	mov	result1, #1
2a680     64 05 90 FD | 	jmp	#LR__4313
2a684                 | LR__4297
2a684     04 4E 05 F1 | 	add	fp, #4
2a688     A7 FA 01 FB | 	rdlong	result1, fp
2a68c     18 4E 05 F1 | 	add	fp, #24
2a690     A7 18 02 FB | 	rdlong	arg04, fp
2a694     18 FA 05 F1 | 	add	result1, #24
2a698     FD 18 62 FC | 	wrlong	arg04, result1
2a69c     18 4E 85 F1 | 	sub	fp, #24
2a6a0     A7 FA 01 FB | 	rdlong	result1, fp
2a6a4     04 4E 85 F1 | 	sub	fp, #4
2a6a8     08 FA 05 F1 | 	add	result1, #8
2a6ac     FD FA 09 FB | 	rdlong	result1, result1 wz
2a6b0     1C 00 90 5D |  if_ne	jmp	#LR__4298
2a6b4     04 4E 05 F1 | 	add	fp, #4
2a6b8     A7 18 02 FB | 	rdlong	arg04, fp
2a6bc     18 4E 05 F1 | 	add	fp, #24
2a6c0     A7 FA 01 FB | 	rdlong	result1, fp
2a6c4     1C 4E 85 F1 | 	sub	fp, #28
2a6c8     08 18 06 F1 | 	add	arg04, #8
2a6cc     0C FB 61 FC | 	wrlong	result1, arg04
2a6d0                 | LR__4298
2a6d0                 | LR__4299
2a6d0     04 4E 05 F1 | 	add	fp, #4
2a6d4     A7 18 02 FB | 	rdlong	arg04, fp
2a6d8     04 4E 85 F1 | 	sub	fp, #4
2a6dc     10 18 06 F1 | 	add	arg04, #16
2a6e0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a6e4     80 18 CE F7 | 	test	arg04, #128 wz
2a6e8     7C 00 90 AD |  if_e	jmp	#LR__4301
2a6ec     18 4E 05 F1 | 	add	fp, #24
2a6f0     A7 18 02 FB | 	rdlong	arg04, fp
2a6f4     01 18 06 F1 | 	add	arg04, #1
2a6f8     0C 13 C2 FA | 	rdbyte	arg01, arg04
2a6fc     14 4E 85 F1 | 	sub	fp, #20
2a700     A7 18 02 FB | 	rdlong	arg04, fp
2a704     0C 15 02 F6 | 	mov	arg02, arg04
2a708     28 14 06 F1 | 	add	arg02, #40
2a70c     04 4E 85 F1 | 	sub	fp, #4
2a710     1C 18 06 F1 | 	add	arg04, #28
2a714     0C 17 02 FB | 	rdlong	arg03, arg04
2a718     01 18 06 F6 | 	mov	arg04, #1
2a71c     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2a720     00 FA 0D F2 | 	cmp	result1, #0 wz
2a724     1C 00 90 AD |  if_e	jmp	#LR__4300
2a728     04 4E 05 F1 | 	add	fp, #4
2a72c     A7 FA 01 FB | 	rdlong	result1, fp
2a730     04 4E 85 F1 | 	sub	fp, #4
2a734     11 FA 05 F1 | 	add	result1, #17
2a738     FD 02 48 FC | 	wrbyte	#1, result1
2a73c     01 FA 05 F6 | 	mov	result1, #1
2a740     A4 04 90 FD | 	jmp	#LR__4313
2a744                 | LR__4300
2a744     04 4E 05 F1 | 	add	fp, #4
2a748     A7 18 02 FB | 	rdlong	arg04, fp
2a74c     0C FB 01 F6 | 	mov	result1, arg04
2a750     04 4E 85 F1 | 	sub	fp, #4
2a754     10 18 06 F1 | 	add	arg04, #16
2a758     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a75c     7F 18 06 F5 | 	and	arg04, #127
2a760     10 FA 05 F1 | 	add	result1, #16
2a764     FD 18 42 FC | 	wrbyte	arg04, result1
2a768                 | LR__4301
2a768     18 4E 05 F1 | 	add	fp, #24
2a76c     A7 12 02 FB | 	rdlong	arg01, fp
2a770     14 4E 85 F1 | 	sub	fp, #20
2a774     A7 14 02 FB | 	rdlong	arg02, fp
2a778     04 4E 85 F1 | 	sub	fp, #4
2a77c     18 14 06 F1 | 	add	arg02, #24
2a780     0A 15 02 FB | 	rdlong	arg02, arg02
2a784     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2a788     20 4E 05 F1 | 	add	fp, #32
2a78c     A7 FA 61 FC | 	wrlong	result1, fp
2a790     20 4E 85 F1 | 	sub	fp, #32
2a794     00 FA 0D F2 | 	cmp	result1, #0 wz
2a798     1C 00 90 5D |  if_ne	jmp	#LR__4302
2a79c     04 4E 05 F1 | 	add	fp, #4
2a7a0     A7 FA 01 FB | 	rdlong	result1, fp
2a7a4     04 4E 85 F1 | 	sub	fp, #4
2a7a8     11 FA 05 F1 | 	add	result1, #17
2a7ac     FD 04 48 FC | 	wrbyte	#2, result1
2a7b0     02 FA 05 F6 | 	mov	result1, #2
2a7b4     30 04 90 FD | 	jmp	#LR__4313
2a7b8                 | LR__4302
2a7b8     20 4E 05 F1 | 	add	fp, #32
2a7bc     A7 FA 01 FB | 	rdlong	result1, fp
2a7c0     0C 4E 05 F1 | 	add	fp, #12
2a7c4     A7 1E 02 FB | 	rdlong	local01, fp
2a7c8     0F FB 01 F1 | 	add	result1, local01
2a7cc     0C 4E 85 F1 | 	sub	fp, #12
2a7d0     A7 FA 61 FC | 	wrlong	result1, fp
2a7d4     14 4E 85 F1 | 	sub	fp, #20
2a7d8     A7 FA 01 FB | 	rdlong	result1, fp
2a7dc     09 FA 45 F0 | 	shr	result1, #9
2a7e0     1C 4E 05 F1 | 	add	fp, #28
2a7e4     A7 FA 61 FC | 	wrlong	result1, fp
2a7e8     28 4E 85 F1 | 	sub	fp, #40
2a7ec     01 FA 15 F2 | 	cmp	result1, #1 wc
2a7f0     60 01 90 CD |  if_b	jmp	#LR__4306
2a7f4     2C 4E 05 F1 | 	add	fp, #44
2a7f8     A7 FA 01 FB | 	rdlong	result1, fp
2a7fc     04 4E 85 F1 | 	sub	fp, #4
2a800     A7 18 02 FB | 	rdlong	arg04, fp
2a804     0C FB 01 F1 | 	add	result1, arg04
2a808     10 4E 85 F1 | 	sub	fp, #16
2a80c     A7 18 02 FB | 	rdlong	arg04, fp
2a810     18 4E 85 F1 | 	sub	fp, #24
2a814     0A 18 06 F1 | 	add	arg04, #10
2a818     0C 19 E2 FA | 	rdword	arg04, arg04
2a81c     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2a820     28 00 90 ED |  if_be	jmp	#LR__4303
2a824     18 4E 05 F1 | 	add	fp, #24
2a828     A7 FA 01 FB | 	rdlong	result1, fp
2a82c     0A FA 05 F1 | 	add	result1, #10
2a830     FD FA E1 FA | 	rdword	result1, result1
2a834     14 4E 05 F1 | 	add	fp, #20
2a838     A7 18 02 FB | 	rdlong	arg04, fp
2a83c     0C FB 81 F1 | 	sub	result1, arg04
2a840     04 4E 85 F1 | 	sub	fp, #4
2a844     A7 FA 61 FC | 	wrlong	result1, fp
2a848     28 4E 85 F1 | 	sub	fp, #40
2a84c                 | LR__4303
2a84c     18 4E 05 F1 | 	add	fp, #24
2a850     A7 18 02 FB | 	rdlong	arg04, fp
2a854     01 18 06 F1 | 	add	arg04, #1
2a858     0C 13 C2 FA | 	rdbyte	arg01, arg04
2a85c     18 4E 05 F1 | 	add	fp, #24
2a860     A7 14 02 FB | 	rdlong	arg02, fp
2a864     10 4E 85 F1 | 	sub	fp, #16
2a868     A7 16 02 FB | 	rdlong	arg03, fp
2a86c     08 4E 05 F1 | 	add	fp, #8
2a870     A7 18 02 FB | 	rdlong	arg04, fp
2a874     28 4E 85 F1 | 	sub	fp, #40
2a878     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2a87c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a880     1C 00 90 AD |  if_e	jmp	#LR__4304
2a884     04 4E 05 F1 | 	add	fp, #4
2a888     A7 1E 02 FB | 	rdlong	local01, fp
2a88c     04 4E 85 F1 | 	sub	fp, #4
2a890     11 1E 06 F1 | 	add	local01, #17
2a894     0F 03 48 FC | 	wrbyte	#1, local01
2a898     01 FA 05 F6 | 	mov	result1, #1
2a89c     48 03 90 FD | 	jmp	#LR__4313
2a8a0                 | LR__4304
2a8a0     04 4E 05 F1 | 	add	fp, #4
2a8a4     A7 FA 01 FB | 	rdlong	result1, fp
2a8a8     1C FA 05 F1 | 	add	result1, #28
2a8ac     FD FA 01 FB | 	rdlong	result1, result1
2a8b0     1C 4E 05 F1 | 	add	fp, #28
2a8b4     A7 20 02 FB | 	rdlong	local02, fp
2a8b8     10 FB 81 F1 | 	sub	result1, local02
2a8bc     08 4E 05 F1 | 	add	fp, #8
2a8c0     A7 18 02 FB | 	rdlong	arg04, fp
2a8c4     28 4E 85 F1 | 	sub	fp, #40
2a8c8     0C FB 11 F2 | 	cmp	result1, arg04 wc
2a8cc     68 00 90 3D |  if_ae	jmp	#LR__4305
2a8d0     04 4E 05 F1 | 	add	fp, #4
2a8d4     A7 12 02 FB | 	rdlong	arg01, fp
2a8d8     28 12 06 F1 | 	add	arg01, #40
2a8dc     2C 4E 05 F1 | 	add	fp, #44
2a8e0     A7 14 02 FB | 	rdlong	arg02, fp
2a8e4     2C 4E 85 F1 | 	sub	fp, #44
2a8e8     A7 FA 01 FB | 	rdlong	result1, fp
2a8ec     1C FA 05 F1 | 	add	result1, #28
2a8f0     FD 22 02 FB | 	rdlong	local03, result1
2a8f4     1C 4E 05 F1 | 	add	fp, #28
2a8f8     A7 18 02 FB | 	rdlong	arg04, fp
2a8fc     20 4E 85 F1 | 	sub	fp, #32
2a900     0C 23 82 F1 | 	sub	local03, arg04
2a904     09 22 66 F0 | 	shl	local03, #9
2a908     11 15 02 F1 | 	add	arg02, local03
2a90c     09 16 C6 F9 | 	decod	arg03, #9
2a910     44 41 BF FD | 	call	#__system____builtin_memmove
2a914     04 4E 05 F1 | 	add	fp, #4
2a918     A7 18 02 FB | 	rdlong	arg04, fp
2a91c     0C FB 01 F6 | 	mov	result1, arg04
2a920     04 4E 85 F1 | 	sub	fp, #4
2a924     10 18 06 F1 | 	add	arg04, #16
2a928     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a92c     7F 18 06 F5 | 	and	arg04, #127
2a930     10 FA 05 F1 | 	add	result1, #16
2a934     FD 18 42 FC | 	wrbyte	arg04, result1
2a938                 | LR__4305
2a938     28 4E 05 F1 | 	add	fp, #40
2a93c     A7 FA 01 FB | 	rdlong	result1, fp
2a940     09 FA 65 F0 | 	shl	result1, #9
2a944     04 4E 85 F1 | 	sub	fp, #4
2a948     A7 FA 61 FC | 	wrlong	result1, fp
2a94c     24 4E 85 F1 | 	sub	fp, #36
2a950                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2a950                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2a950                 | ' 				}
2a950                 | ' 
2a950                 | ' 
2a950                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2a950                 | ' 				continue;
2a950     74 01 90 FD | 	jmp	#LR__4309
2a954                 | LR__4306
2a954     04 4E 05 F1 | 	add	fp, #4
2a958     A7 20 02 FB | 	rdlong	local02, fp
2a95c     1C 20 06 F1 | 	add	local02, #28
2a960     10 FB 01 FB | 	rdlong	result1, local02
2a964     1C 4E 05 F1 | 	add	fp, #28
2a968     A7 20 02 FB | 	rdlong	local02, fp
2a96c     20 4E 85 F1 | 	sub	fp, #32
2a970     10 FB 09 F2 | 	cmp	result1, local02 wz
2a974     90 00 90 AD |  if_e	jmp	#LR__4307
2a978     04 4E 05 F1 | 	add	fp, #4
2a97c     A7 FA 01 FB | 	rdlong	result1, fp
2a980     FD 22 02 F6 | 	mov	local03, result1
2a984     04 4E 85 F1 | 	sub	fp, #4
2a988     14 22 06 F1 | 	add	local03, #20
2a98c     11 23 02 FB | 	rdlong	local03, local03
2a990     0C FA 05 F1 | 	add	result1, #12
2a994     FD 24 02 FB | 	rdlong	local04, result1
2a998     12 27 02 F6 | 	mov	local05, local04
2a99c     13 23 12 F2 | 	cmp	local03, local05 wc
2a9a0     64 00 90 3D |  if_ae	jmp	#LR__4307
2a9a4     18 4E 05 F1 | 	add	fp, #24
2a9a8     A7 18 02 FB | 	rdlong	arg04, fp
2a9ac     01 18 06 F1 | 	add	arg04, #1
2a9b0     0C 13 C2 FA | 	rdbyte	arg01, arg04
2a9b4     14 4E 85 F1 | 	sub	fp, #20
2a9b8     A7 28 02 FB | 	rdlong	local06, fp
2a9bc     28 28 06 F1 | 	add	local06, #40
2a9c0     14 2B 02 F6 | 	mov	local07, local06
2a9c4     1C 4E 05 F1 | 	add	fp, #28
2a9c8     A7 2C 02 FB | 	rdlong	local08, fp
2a9cc     20 4E 85 F1 | 	sub	fp, #32
2a9d0     01 2E 06 F6 | 	mov	local09, #1
2a9d4     15 15 02 F6 | 	mov	arg02, local07
2a9d8     16 17 02 F6 | 	mov	arg03, local08
2a9dc     01 18 06 F6 | 	mov	arg04, #1
2a9e0     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2a9e4     FD 30 0A F6 | 	mov	local10, result1 wz
2a9e8     1C 00 90 AD |  if_e	jmp	#LR__4307
2a9ec     04 4E 05 F1 | 	add	fp, #4
2a9f0     A7 30 02 FB | 	rdlong	local10, fp
2a9f4     04 4E 85 F1 | 	sub	fp, #4
2a9f8     11 30 06 F1 | 	add	local10, #17
2a9fc     18 03 48 FC | 	wrbyte	#1, local10
2aa00                 | ' 				fp->fptr < fp->obj.objsize &&
2aa00                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2aa00                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2aa00     01 FA 05 F6 | 	mov	result1, #1
2aa04     E0 01 90 FD | 	jmp	#LR__4313
2aa08                 | LR__4307
2aa08     04 4E 05 F1 | 	add	fp, #4
2aa0c     A7 18 02 FB | 	rdlong	arg04, fp
2aa10     1C 4E 05 F1 | 	add	fp, #28
2aa14     A7 FA 01 FB | 	rdlong	result1, fp
2aa18     20 4E 85 F1 | 	sub	fp, #32
2aa1c     1C 18 06 F1 | 	add	arg04, #28
2aa20     0C FB 61 FC | 	wrlong	result1, arg04
2aa24                 | LR__4308
2aa24     04 4E 05 F1 | 	add	fp, #4
2aa28     A7 FA 01 FB | 	rdlong	result1, fp
2aa2c     14 FA 05 F1 | 	add	result1, #20
2aa30     FD FA 01 FB | 	rdlong	result1, result1
2aa34     FF FB 05 F5 | 	and	result1, #511
2aa38     09 32 C6 F9 | 	decod	local11, #9
2aa3c     FD 32 82 F1 | 	sub	local11, result1
2aa40     20 4E 05 F1 | 	add	fp, #32
2aa44     A7 32 62 FC | 	wrlong	local11, fp
2aa48     18 4E 85 F1 | 	sub	fp, #24
2aa4c     A7 FA 01 FB | 	rdlong	result1, fp
2aa50     0C 4E 85 F1 | 	sub	fp, #12
2aa54     FD 32 1A F2 | 	cmp	local11, result1 wcz
2aa58     0C 4E 05 11 |  if_a	add	fp, #12
2aa5c     A7 32 02 1B |  if_a	rdlong	local11, fp
2aa60     18 4E 05 11 |  if_a	add	fp, #24
2aa64     A7 32 62 1C |  if_a	wrlong	local11, fp
2aa68     24 4E 85 11 |  if_a	sub	fp, #36
2aa6c     04 4E 05 F1 | 	add	fp, #4
2aa70     A7 32 02 FB | 	rdlong	local11, fp
2aa74     19 13 02 F6 | 	mov	arg01, local11
2aa78     28 12 06 F1 | 	add	arg01, #40
2aa7c     14 32 06 F1 | 	add	local11, #20
2aa80     19 33 02 FB | 	rdlong	local11, local11
2aa84     FF 33 06 F5 | 	and	local11, #511
2aa88     19 13 02 F1 | 	add	arg01, local11
2aa8c     2C 4E 05 F1 | 	add	fp, #44
2aa90     A7 14 02 FB | 	rdlong	arg02, fp
2aa94     0C 4E 85 F1 | 	sub	fp, #12
2aa98     A7 16 02 FB | 	rdlong	arg03, fp
2aa9c     24 4E 85 F1 | 	sub	fp, #36
2aaa0     B4 3F BF FD | 	call	#__system____builtin_memmove
2aaa4     04 4E 05 F1 | 	add	fp, #4
2aaa8     A7 FA 01 FB | 	rdlong	result1, fp
2aaac     FD 32 02 F6 | 	mov	local11, result1
2aab0     04 4E 85 F1 | 	sub	fp, #4
2aab4     10 FA 05 F1 | 	add	result1, #16
2aab8     FD FA C1 FA | 	rdbyte	result1, result1
2aabc     80 FA 45 F5 | 	or	result1, #128
2aac0     10 32 06 F1 | 	add	local11, #16
2aac4     19 FB 41 FC | 	wrbyte	result1, local11
2aac8                 | LR__4309
2aac8     0C 4E 05 F1 | 	add	fp, #12
2aacc     A7 32 02 FB | 	rdlong	local11, fp
2aad0     18 4E 05 F1 | 	add	fp, #24
2aad4     A7 FA 01 FB | 	rdlong	result1, fp
2aad8     FD 32 82 F1 | 	sub	local11, result1
2aadc     18 4E 85 F1 | 	sub	fp, #24
2aae0     A7 32 62 FC | 	wrlong	local11, fp
2aae4     04 4E 05 F1 | 	add	fp, #4
2aae8     A7 34 02 FB | 	rdlong	local12, fp
2aaec     1A 33 02 FB | 	rdlong	local11, local12
2aaf0     14 4E 05 F1 | 	add	fp, #20
2aaf4     A7 36 02 FB | 	rdlong	local13, fp
2aaf8     1B 33 02 F1 | 	add	local11, local13
2aafc     1A 33 62 FC | 	wrlong	local11, local12
2ab00     0C 4E 05 F1 | 	add	fp, #12
2ab04     A7 32 02 FB | 	rdlong	local11, fp
2ab08     0C 4E 85 F1 | 	sub	fp, #12
2ab0c     A7 38 02 FB | 	rdlong	local14, fp
2ab10     1C 33 02 F1 | 	add	local11, local14
2ab14     0C 4E 05 F1 | 	add	fp, #12
2ab18     A7 32 62 FC | 	wrlong	local11, fp
2ab1c     2C 4E 85 F1 | 	sub	fp, #44
2ab20     A7 3A 02 FB | 	rdlong	local15, fp
2ab24     1D 33 02 F6 | 	mov	local11, local15
2ab28     14 3A 06 F1 | 	add	local15, #20
2ab2c     1D 3B 02 FB | 	rdlong	local15, local15
2ab30     20 4E 05 F1 | 	add	fp, #32
2ab34     A7 3C 02 FB | 	rdlong	local16, fp
2ab38     1E 3B 02 F1 | 	add	local15, local16
2ab3c     14 32 06 F1 | 	add	local11, #20
2ab40     19 3B 62 FC | 	wrlong	local15, local11
2ab44     20 4E 85 F1 | 	sub	fp, #32
2ab48     A7 3E 02 FB | 	rdlong	local17, fp
2ab4c     1F 33 02 F6 | 	mov	local11, local17
2ab50     1F 41 02 F6 | 	mov	local18, local17
2ab54     04 4E 85 F1 | 	sub	fp, #4
2ab58     14 3E 06 F1 | 	add	local17, #20
2ab5c     1F 43 02 FB | 	rdlong	local19, local17
2ab60     0C 40 06 F1 | 	add	local18, #12
2ab64     20 45 02 FB | 	rdlong	local20, local18
2ab68     22 43 1A F2 | 	cmp	local19, local20 wcz
2ab6c     24 00 90 ED |  if_be	jmp	#LR__4310
2ab70     04 4E 05 F1 | 	add	fp, #4
2ab74     A7 26 02 FB | 	rdlong	local05, fp
2ab78     04 4E 85 F1 | 	sub	fp, #4
2ab7c     13 23 02 F6 | 	mov	local03, local05
2ab80     14 22 06 F1 | 	add	local03, #20
2ab84     11 25 02 FB | 	rdlong	local04, local03
2ab88     14 22 86 F1 | 	sub	local03, #20
2ab8c     12 47 02 F6 | 	mov	local21, local04
2ab90     20 00 90 FD | 	jmp	#LR__4311
2ab94                 | LR__4310
2ab94     04 4E 05 F1 | 	add	fp, #4
2ab98     A7 2A 02 FB | 	rdlong	local07, fp
2ab9c     04 4E 85 F1 | 	sub	fp, #4
2aba0     15 31 02 F6 | 	mov	local10, local07
2aba4     0C 30 06 F1 | 	add	local10, #12
2aba8     18 2D 02 FB | 	rdlong	local08, local10
2abac     0C 30 86 F1 | 	sub	local10, #12
2abb0     16 47 02 F6 | 	mov	local21, local08
2abb4                 | LR__4311
2abb4     0C 32 06 F1 | 	add	local11, #12
2abb8     19 47 62 FC | 	wrlong	local21, local11
2abbc     5C F9 9F FD | 	jmp	#LR__4293
2abc0                 | LR__4312
2abc0     04 4E 05 F1 | 	add	fp, #4
2abc4     A7 34 02 FB | 	rdlong	local12, fp
2abc8     1A 1F 02 F6 | 	mov	local01, local12
2abcc     04 4E 85 F1 | 	sub	fp, #4
2abd0     10 34 06 F1 | 	add	local12, #16
2abd4     1A 33 C2 FA | 	rdbyte	local11, local12
2abd8     40 32 46 F5 | 	or	local11, #64
2abdc     10 1E 06 F1 | 	add	local01, #16
2abe0     0F 33 42 FC | 	wrbyte	local11, local01
2abe4                 | ' 
2abe4                 | ' 
2abe4                 | ' 
2abe4                 | ' 
2abe4                 | ' 
2abe4                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2abe4                 | ' 		fp->flag |=  0x80 ;
2abe4                 | ' 
2abe4                 | ' 	}
2abe4                 | ' 
2abe4                 | ' 	fp->flag |=  0x40 ;
2abe4                 | ' 
2abe4                 | ' 	return FR_OK ;
2abe4     00 FA 05 F6 | 	mov	result1, #0
2abe8                 | LR__4313
2abe8     A7 F0 03 F6 | 	mov	ptra, fp
2abec     B2 00 A0 FD | 	call	#popregs_
2abf0                 | _fatfs_cc_f_write_ret
2abf0     2D 00 64 FD | 	ret
2abf4                 | 
2abf4                 | _fatfs_cc_f_sync
2abf4     00 4A 05 F6 | 	mov	COUNT_, #0
2abf8     A8 00 A0 FD | 	call	#pushregs_
2abfc     18 F0 07 F1 | 	add	ptra, #24
2ac00     04 4E 05 F1 | 	add	fp, #4
2ac04     A7 12 62 FC | 	wrlong	arg01, fp
2ac08     08 4E 05 F1 | 	add	fp, #8
2ac0c     A7 14 02 F6 | 	mov	arg02, fp
2ac10     0C 4E 85 F1 | 	sub	fp, #12
2ac14     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2ac18     08 4E 05 F1 | 	add	fp, #8
2ac1c     A7 FA 61 FC | 	wrlong	result1, fp
2ac20     08 4E 85 F1 | 	sub	fp, #8
2ac24     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac28     C0 01 90 5D |  if_ne	jmp	#LR__4323
2ac2c     04 4E 05 F1 | 	add	fp, #4
2ac30     A7 18 02 FB | 	rdlong	arg04, fp
2ac34     04 4E 85 F1 | 	sub	fp, #4
2ac38     10 18 06 F1 | 	add	arg04, #16
2ac3c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ac40     40 18 CE F7 | 	test	arg04, #64 wz
2ac44     A4 01 90 AD |  if_e	jmp	#LR__4322
2ac48     04 4E 05 F1 | 	add	fp, #4
2ac4c     A7 18 02 FB | 	rdlong	arg04, fp
2ac50     04 4E 85 F1 | 	sub	fp, #4
2ac54     10 18 06 F1 | 	add	arg04, #16
2ac58     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ac5c     80 18 CE F7 | 	test	arg04, #128 wz
2ac60     64 00 90 AD |  if_e	jmp	#LR__4320
2ac64     0C 4E 05 F1 | 	add	fp, #12
2ac68     A7 18 02 FB | 	rdlong	arg04, fp
2ac6c     01 18 06 F1 | 	add	arg04, #1
2ac70     0C 13 C2 FA | 	rdbyte	arg01, arg04
2ac74     08 4E 85 F1 | 	sub	fp, #8
2ac78     A7 18 02 FB | 	rdlong	arg04, fp
2ac7c     0C 15 02 F6 | 	mov	arg02, arg04
2ac80     28 14 06 F1 | 	add	arg02, #40
2ac84     04 4E 85 F1 | 	sub	fp, #4
2ac88     1C 18 06 F1 | 	add	arg04, #28
2ac8c     0C 17 02 FB | 	rdlong	arg03, arg04
2ac90     01 18 06 F6 | 	mov	arg04, #1
2ac94     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2ac98     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac9c     01 FA 05 56 |  if_ne	mov	result1, #1
2aca0     54 01 90 5D |  if_ne	jmp	#LR__4324
2aca4     04 4E 05 F1 | 	add	fp, #4
2aca8     A7 18 02 FB | 	rdlong	arg04, fp
2acac     0C 17 02 F6 | 	mov	arg03, arg04
2acb0     04 4E 85 F1 | 	sub	fp, #4
2acb4     10 18 06 F1 | 	add	arg04, #16
2acb8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2acbc     7F 18 06 F5 | 	and	arg04, #127
2acc0     10 16 06 F1 | 	add	arg03, #16
2acc4     0B 19 42 FC | 	wrbyte	arg04, arg03
2acc8                 | LR__4320
2acc8     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2accc     10 4E 05 F1 | 	add	fp, #16
2acd0     A7 FA 61 FC | 	wrlong	result1, fp
2acd4     04 4E 85 F1 | 	sub	fp, #4
2acd8     A7 12 02 FB | 	rdlong	arg01, fp
2acdc     08 4E 85 F1 | 	sub	fp, #8
2ace0     A7 18 02 FB | 	rdlong	arg04, fp
2ace4     04 4E 85 F1 | 	sub	fp, #4
2ace8     20 18 06 F1 | 	add	arg04, #32
2acec     0C 15 02 FB | 	rdlong	arg02, arg04
2acf0     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2acf4     08 4E 05 F1 | 	add	fp, #8
2acf8     A7 FA 61 FC | 	wrlong	result1, fp
2acfc     08 4E 85 F1 | 	sub	fp, #8
2ad00     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad04     E4 00 90 5D |  if_ne	jmp	#LR__4321
2ad08     04 4E 05 F1 | 	add	fp, #4
2ad0c     A7 18 02 FB | 	rdlong	arg04, fp
2ad10     24 18 06 F1 | 	add	arg04, #36
2ad14     0C 19 02 FB | 	rdlong	arg04, arg04
2ad18     10 4E 05 F1 | 	add	fp, #16
2ad1c     A7 18 62 FC | 	wrlong	arg04, fp
2ad20     0C 17 02 F6 | 	mov	arg03, arg04
2ad24     0B 16 06 F1 | 	add	arg03, #11
2ad28     0B 17 C2 FA | 	rdbyte	arg03, arg03
2ad2c     20 16 46 F5 | 	or	arg03, #32
2ad30     0B 18 06 F1 | 	add	arg04, #11
2ad34     0C 17 42 FC | 	wrbyte	arg03, arg04
2ad38     10 4E 85 F1 | 	sub	fp, #16
2ad3c     A7 18 02 FB | 	rdlong	arg04, fp
2ad40     0C 13 02 FB | 	rdlong	arg01, arg04
2ad44     10 4E 05 F1 | 	add	fp, #16
2ad48     A7 14 02 FB | 	rdlong	arg02, fp
2ad4c     14 4E 85 F1 | 	sub	fp, #20
2ad50     08 18 06 F1 | 	add	arg04, #8
2ad54     0C 17 02 FB | 	rdlong	arg03, arg04
2ad58     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2ad5c     14 4E 05 F1 | 	add	fp, #20
2ad60     A7 12 02 FB | 	rdlong	arg01, fp
2ad64     1C 12 06 F1 | 	add	arg01, #28
2ad68     10 4E 85 F1 | 	sub	fp, #16
2ad6c     A7 18 02 FB | 	rdlong	arg04, fp
2ad70     0C 18 06 F1 | 	add	arg04, #12
2ad74     0C 15 02 FB | 	rdlong	arg02, arg04
2ad78     09 15 62 FC | 	wrlong	arg02, arg01
2ad7c     10 4E 05 F1 | 	add	fp, #16
2ad80     A7 12 02 FB | 	rdlong	arg01, fp
2ad84     16 12 06 F1 | 	add	arg01, #22
2ad88     04 4E 85 F1 | 	sub	fp, #4
2ad8c     A7 14 02 FB | 	rdlong	arg02, fp
2ad90     09 15 62 FC | 	wrlong	arg02, arg01
2ad94     04 4E 05 F1 | 	add	fp, #4
2ad98     A7 12 02 FB | 	rdlong	arg01, fp
2ad9c     12 12 06 F1 | 	add	arg01, #18
2ada0     09 01 58 FC | 	wrword	#0, arg01
2ada4     08 4E 85 F1 | 	sub	fp, #8
2ada8     A7 18 02 FB | 	rdlong	arg04, fp
2adac     03 18 06 F1 | 	add	arg04, #3
2adb0     0C 03 48 FC | 	wrbyte	#1, arg04
2adb4     A7 12 02 FB | 	rdlong	arg01, fp
2adb8     0C 4E 85 F1 | 	sub	fp, #12
2adbc     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2adc0     08 4E 05 F1 | 	add	fp, #8
2adc4     A7 FA 61 FC | 	wrlong	result1, fp
2adc8     04 4E 85 F1 | 	sub	fp, #4
2adcc     A7 18 02 FB | 	rdlong	arg04, fp
2add0     0C 17 02 F6 | 	mov	arg03, arg04
2add4     04 4E 85 F1 | 	sub	fp, #4
2add8     10 18 06 F1 | 	add	arg04, #16
2addc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ade0     BF 18 06 F5 | 	and	arg04, #191
2ade4     10 16 06 F1 | 	add	arg03, #16
2ade8     0B 19 42 FC | 	wrbyte	arg04, arg03
2adec                 | LR__4321
2adec                 | LR__4322
2adec                 | LR__4323
2adec                 | ' 					dir = fp->dir_ptr;
2adec                 | ' 					dir[ 11 ] |=  0x20 ;
2adec                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2adec                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2adec                 | ' 					st_dword(dir +  22 , tm);
2adec                 | ' 					st_word(dir +  18 , 0);
2adec                 | ' 					fs->wflag = 1;
2adec                 | ' 					res = sync_fs(fs);
2adec                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2adec                 | ' 				}
2adec                 | ' 			}
2adec                 | ' 		}
2adec                 | ' 	}
2adec                 | ' 
2adec                 | ' 	return res ;
2adec     08 4E 05 F1 | 	add	fp, #8
2adf0     A7 FA 01 FB | 	rdlong	result1, fp
2adf4     08 4E 85 F1 | 	sub	fp, #8
2adf8                 | LR__4324
2adf8     A7 F0 03 F6 | 	mov	ptra, fp
2adfc     B2 00 A0 FD | 	call	#popregs_
2ae00                 | _fatfs_cc_f_sync_ret
2ae00     2D 00 64 FD | 	ret
2ae04                 | 
2ae04                 | _fatfs_cc_f_close
2ae04     01 4A 05 F6 | 	mov	COUNT_, #1
2ae08     A8 00 A0 FD | 	call	#pushregs_
2ae0c     10 F0 07 F1 | 	add	ptra, #16
2ae10     04 4E 05 F1 | 	add	fp, #4
2ae14     A7 12 62 FC | 	wrlong	arg01, fp
2ae18     04 4E 85 F1 | 	sub	fp, #4
2ae1c     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2ae20     08 4E 05 F1 | 	add	fp, #8
2ae24     A7 FA 61 FC | 	wrlong	result1, fp
2ae28     08 4E 85 F1 | 	sub	fp, #8
2ae2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae30     38 00 90 5D |  if_ne	jmp	#LR__4330
2ae34     04 4E 05 F1 | 	add	fp, #4
2ae38     A7 12 02 FB | 	rdlong	arg01, fp
2ae3c     08 4E 05 F1 | 	add	fp, #8
2ae40     A7 14 02 F6 | 	mov	arg02, fp
2ae44     0C 4E 85 F1 | 	sub	fp, #12
2ae48     9C E6 BF FD | 	call	#_fatfs_cc_validate
2ae4c     08 4E 05 F1 | 	add	fp, #8
2ae50     A7 FA 61 FC | 	wrlong	result1, fp
2ae54     08 4E 85 F1 | 	sub	fp, #8
2ae58     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae5c     04 4E 05 A1 |  if_e	add	fp, #4
2ae60     A7 1E 02 AB |  if_e	rdlong	local01, fp
2ae64     04 4E 85 A1 |  if_e	sub	fp, #4
2ae68     0F 01 68 AC |  if_e	wrlong	#0, local01
2ae6c                 | LR__4330
2ae6c                 | ' 
2ae6c                 | ' 
2ae6c                 | ' 
2ae6c                 | ' 
2ae6c                 | ' 			fp->obj.fs = 0;
2ae6c                 | ' #line 4192 "ff.c"
2ae6c                 | ' 		}
2ae6c                 | ' 	}
2ae6c                 | ' 	return res;
2ae6c     08 4E 05 F1 | 	add	fp, #8
2ae70     A7 FA 01 FB | 	rdlong	result1, fp
2ae74     08 4E 85 F1 | 	sub	fp, #8
2ae78     A7 F0 03 F6 | 	mov	ptra, fp
2ae7c     B2 00 A0 FD | 	call	#popregs_
2ae80                 | _fatfs_cc_f_close_ret
2ae80     2D 00 64 FD | 	ret
2ae84                 | 
2ae84                 | _fatfs_cc_f_lseek
2ae84     00 4A 05 F6 | 	mov	COUNT_, #0
2ae88     A8 00 A0 FD | 	call	#pushregs_
2ae8c     24 F0 07 F1 | 	add	ptra, #36
2ae90     04 4E 05 F1 | 	add	fp, #4
2ae94     A7 12 62 FC | 	wrlong	arg01, fp
2ae98     04 4E 05 F1 | 	add	fp, #4
2ae9c     A7 14 62 FC | 	wrlong	arg02, fp
2aea0     04 4E 85 F1 | 	sub	fp, #4
2aea4     A7 12 02 FB | 	rdlong	arg01, fp
2aea8     0C 4E 05 F1 | 	add	fp, #12
2aeac     A7 14 02 F6 | 	mov	arg02, fp
2aeb0     10 4E 85 F1 | 	sub	fp, #16
2aeb4     30 E6 BF FD | 	call	#_fatfs_cc_validate
2aeb8     0C 4E 05 F1 | 	add	fp, #12
2aebc     A7 FA 61 FC | 	wrlong	result1, fp
2aec0     0C 4E 85 F1 | 	sub	fp, #12
2aec4     00 FA 0D F2 | 	cmp	result1, #0 wz
2aec8     1C 00 90 5D |  if_ne	jmp	#LR__4340
2aecc     04 4E 05 F1 | 	add	fp, #4
2aed0     A7 18 02 FB | 	rdlong	arg04, fp
2aed4     11 18 06 F1 | 	add	arg04, #17
2aed8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2aedc     08 4E 05 F1 | 	add	fp, #8
2aee0     A7 18 62 FC | 	wrlong	arg04, fp
2aee4     0C 4E 85 F1 | 	sub	fp, #12
2aee8                 | LR__4340
2aee8     0C 4E 05 F1 | 	add	fp, #12
2aeec     A7 18 0A FB | 	rdlong	arg04, fp wz
2aef0     0C 4E 85 F1 | 	sub	fp, #12
2aef4     0C 4E 05 51 |  if_ne	add	fp, #12
2aef8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2aefc     0C 4E 85 51 |  if_ne	sub	fp, #12
2af00     40 06 90 5D |  if_ne	jmp	#LR__4363
2af04     04 4E 05 F1 | 	add	fp, #4
2af08     A7 18 02 FB | 	rdlong	arg04, fp
2af0c     04 4E 05 F1 | 	add	fp, #4
2af10     A7 16 02 FB | 	rdlong	arg03, fp
2af14     08 4E 85 F1 | 	sub	fp, #8
2af18     0C 18 06 F1 | 	add	arg04, #12
2af1c     0C 19 02 FB | 	rdlong	arg04, arg04
2af20     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2af24     3C 00 90 ED |  if_be	jmp	#LR__4341
2af28     04 4E 05 F1 | 	add	fp, #4
2af2c     A7 16 02 FB | 	rdlong	arg03, fp
2af30     04 4E 85 F1 | 	sub	fp, #4
2af34     10 16 06 F1 | 	add	arg03, #16
2af38     0B 17 C2 FA | 	rdbyte	arg03, arg03
2af3c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2af40     02 16 CE F7 | 	test	arg03, #2 wz
2af44     1C 00 90 5D |  if_ne	jmp	#LR__4341
2af48     04 4E 05 F1 | 	add	fp, #4
2af4c     A7 16 02 FB | 	rdlong	arg03, fp
2af50     0C 16 06 F1 | 	add	arg03, #12
2af54     0B 17 02 FB | 	rdlong	arg03, arg03
2af58     04 4E 05 F1 | 	add	fp, #4
2af5c     A7 16 62 FC | 	wrlong	arg03, fp
2af60     08 4E 85 F1 | 	sub	fp, #8
2af64                 | LR__4341
2af64     04 4E 05 F1 | 	add	fp, #4
2af68     A7 16 02 FB | 	rdlong	arg03, fp
2af6c     14 16 06 F1 | 	add	arg03, #20
2af70     0B 17 02 FB | 	rdlong	arg03, arg03
2af74     1C 4E 05 F1 | 	add	fp, #28
2af78     A7 16 62 FC | 	wrlong	arg03, fp
2af7c     1C 4E 85 F1 | 	sub	fp, #28
2af80     A7 16 02 FB | 	rdlong	arg03, fp
2af84     18 4E 05 F1 | 	add	fp, #24
2af88     A7 00 68 FC | 	wrlong	#0, fp
2af8c     14 16 06 F1 | 	add	arg03, #20
2af90     0B 01 68 FC | 	wrlong	#0, arg03
2af94     14 4E 85 F1 | 	sub	fp, #20
2af98     A7 16 02 FB | 	rdlong	arg03, fp
2af9c     08 4E 85 F1 | 	sub	fp, #8
2afa0     01 16 16 F2 | 	cmp	arg03, #1 wc
2afa4     E4 03 90 CD |  if_b	jmp	#LR__4357
2afa8     10 4E 05 F1 | 	add	fp, #16
2afac     A7 16 02 FB | 	rdlong	arg03, fp
2afb0     0A 16 06 F1 | 	add	arg03, #10
2afb4     0B 19 E2 FA | 	rdword	arg04, arg03
2afb8     09 18 66 F0 | 	shl	arg04, #9
2afbc     08 4E 05 F1 | 	add	fp, #8
2afc0     A7 18 62 FC | 	wrlong	arg04, fp
2afc4     08 4E 05 F1 | 	add	fp, #8
2afc8     A7 18 02 FB | 	rdlong	arg04, fp
2afcc     20 4E 85 F1 | 	sub	fp, #32
2afd0     01 18 16 F2 | 	cmp	arg04, #1 wc
2afd4     AC 00 90 CD |  if_b	jmp	#LR__4342
2afd8     08 4E 05 F1 | 	add	fp, #8
2afdc     A7 18 02 FB | 	rdlong	arg04, fp
2afe0     01 18 86 F1 | 	sub	arg04, #1
2afe4     10 4E 05 F1 | 	add	fp, #16
2afe8     A7 16 02 FB | 	rdlong	arg03, fp
2afec     0B 19 12 FD | 	qdiv	arg04, arg03
2aff0     08 4E 05 F1 | 	add	fp, #8
2aff4     A7 FA 01 FB | 	rdlong	result1, fp
2aff8     01 FA 85 F1 | 	sub	result1, #1
2affc     18 18 62 FD | 	getqx	arg04
2b000     0B FB 11 FD | 	qdiv	result1, arg03
2b004     20 4E 85 F1 | 	sub	fp, #32
2b008     18 16 62 FD | 	getqx	arg03
2b00c     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2b010     70 00 90 CD |  if_b	jmp	#LR__4342
2b014     04 4E 05 F1 | 	add	fp, #4
2b018     A7 16 02 FB | 	rdlong	arg03, fp
2b01c     1C 4E 05 F1 | 	add	fp, #28
2b020     A7 FA 01 FB | 	rdlong	result1, fp
2b024     01 FA 85 F1 | 	sub	result1, #1
2b028     08 4E 85 F1 | 	sub	fp, #8
2b02c     A7 18 02 FB | 	rdlong	arg04, fp
2b030     01 18 86 F1 | 	sub	arg04, #1
2b034     0C FB 21 F5 | 	andn	result1, arg04
2b038     14 16 06 F1 | 	add	arg03, #20
2b03c     0B FB 61 FC | 	wrlong	result1, arg03
2b040     10 4E 85 F1 | 	sub	fp, #16
2b044     A7 16 02 FB | 	rdlong	arg03, fp
2b048     04 4E 85 F1 | 	sub	fp, #4
2b04c     A7 18 02 FB | 	rdlong	arg04, fp
2b050     14 18 06 F1 | 	add	arg04, #20
2b054     0C 19 02 FB | 	rdlong	arg04, arg04
2b058     0C 17 82 F1 | 	sub	arg03, arg04
2b05c     04 4E 05 F1 | 	add	fp, #4
2b060     A7 16 62 FC | 	wrlong	arg03, fp
2b064     04 4E 85 F1 | 	sub	fp, #4
2b068     A7 16 02 FB | 	rdlong	arg03, fp
2b06c     18 16 06 F1 | 	add	arg03, #24
2b070     0B 17 02 FB | 	rdlong	arg03, arg03
2b074     10 4E 05 F1 | 	add	fp, #16
2b078     A7 16 62 FC | 	wrlong	arg03, fp
2b07c     14 4E 85 F1 | 	sub	fp, #20
2b080     D0 00 90 FD | 	jmp	#LR__4346
2b084                 | LR__4342
2b084     04 4E 05 F1 | 	add	fp, #4
2b088     A7 16 02 FB | 	rdlong	arg03, fp
2b08c     08 16 06 F1 | 	add	arg03, #8
2b090     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2b094     10 4E 05 F1 | 	add	fp, #16
2b098     A7 16 62 FC | 	wrlong	arg03, fp
2b09c     14 4E 85 F1 | 	sub	fp, #20
2b0a0     94 00 90 5D |  if_ne	jmp	#LR__4345
2b0a4     04 4E 05 F1 | 	add	fp, #4
2b0a8     A7 12 02 FB | 	rdlong	arg01, fp
2b0ac     04 4E 85 F1 | 	sub	fp, #4
2b0b0     00 14 06 F6 | 	mov	arg02, #0
2b0b4     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2b0b8     14 4E 05 F1 | 	add	fp, #20
2b0bc     A7 FA 61 FC | 	wrlong	result1, fp
2b0c0     14 4E 85 F1 | 	sub	fp, #20
2b0c4     01 FA 0D F2 | 	cmp	result1, #1 wz
2b0c8     1C 00 90 5D |  if_ne	jmp	#LR__4343
2b0cc     04 4E 05 F1 | 	add	fp, #4
2b0d0     A7 16 02 FB | 	rdlong	arg03, fp
2b0d4     04 4E 85 F1 | 	sub	fp, #4
2b0d8     11 16 06 F1 | 	add	arg03, #17
2b0dc     0B 05 48 FC | 	wrbyte	#2, arg03
2b0e0     02 FA 05 F6 | 	mov	result1, #2
2b0e4     5C 04 90 FD | 	jmp	#LR__4363
2b0e8                 | LR__4343
2b0e8     14 4E 05 F1 | 	add	fp, #20
2b0ec     A7 FA 01 FB | 	rdlong	result1, fp
2b0f0     14 4E 85 F1 | 	sub	fp, #20
2b0f4     FF FF 7F FF 
2b0f8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2b0fc     1C 00 90 5D |  if_ne	jmp	#LR__4344
2b100     04 4E 05 F1 | 	add	fp, #4
2b104     A7 16 02 FB | 	rdlong	arg03, fp
2b108     04 4E 85 F1 | 	sub	fp, #4
2b10c     11 16 06 F1 | 	add	arg03, #17
2b110     0B 03 48 FC | 	wrbyte	#1, arg03
2b114     01 FA 05 F6 | 	mov	result1, #1
2b118     28 04 90 FD | 	jmp	#LR__4363
2b11c                 | LR__4344
2b11c     04 4E 05 F1 | 	add	fp, #4
2b120     A7 16 02 FB | 	rdlong	arg03, fp
2b124     10 4E 05 F1 | 	add	fp, #16
2b128     A7 18 02 FB | 	rdlong	arg04, fp
2b12c     14 4E 85 F1 | 	sub	fp, #20
2b130     08 16 06 F1 | 	add	arg03, #8
2b134     0B 19 62 FC | 	wrlong	arg04, arg03
2b138                 | LR__4345
2b138     04 4E 05 F1 | 	add	fp, #4
2b13c     A7 16 02 FB | 	rdlong	arg03, fp
2b140     10 4E 05 F1 | 	add	fp, #16
2b144     A7 18 02 FB | 	rdlong	arg04, fp
2b148     14 4E 85 F1 | 	sub	fp, #20
2b14c     18 16 06 F1 | 	add	arg03, #24
2b150     0B 19 62 FC | 	wrlong	arg04, arg03
2b154                 | LR__4346
2b154     14 4E 05 F1 | 	add	fp, #20
2b158     A7 16 0A FB | 	rdlong	arg03, fp wz
2b15c     14 4E 85 F1 | 	sub	fp, #20
2b160     28 02 90 AD |  if_e	jmp	#LR__4356
2b164                 | ' 				while (ofs > bcs) {
2b164                 | LR__4347
2b164     08 4E 05 F1 | 	add	fp, #8
2b168     A7 18 02 FB | 	rdlong	arg04, fp
2b16c     10 4E 05 F1 | 	add	fp, #16
2b170     A7 16 02 FB | 	rdlong	arg03, fp
2b174     18 4E 85 F1 | 	sub	fp, #24
2b178     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2b17c     68 01 90 ED |  if_be	jmp	#LR__4353
2b180     08 4E 05 F1 | 	add	fp, #8
2b184     A7 18 02 FB | 	rdlong	arg04, fp
2b188     10 4E 05 F1 | 	add	fp, #16
2b18c     A7 16 02 FB | 	rdlong	arg03, fp
2b190     0B 19 82 F1 | 	sub	arg04, arg03
2b194     10 4E 85 F1 | 	sub	fp, #16
2b198     A7 18 62 FC | 	wrlong	arg04, fp
2b19c     04 4E 85 F1 | 	sub	fp, #4
2b1a0     A7 18 02 FB | 	rdlong	arg04, fp
2b1a4     0C FB 01 F6 | 	mov	result1, arg04
2b1a8     14 18 06 F1 | 	add	arg04, #20
2b1ac     0C 19 02 FB | 	rdlong	arg04, arg04
2b1b0     14 4E 05 F1 | 	add	fp, #20
2b1b4     A7 16 02 FB | 	rdlong	arg03, fp
2b1b8     0B 19 02 F1 | 	add	arg04, arg03
2b1bc     14 FA 05 F1 | 	add	result1, #20
2b1c0     FD 18 62 FC | 	wrlong	arg04, result1
2b1c4     14 4E 85 F1 | 	sub	fp, #20
2b1c8     A7 16 02 FB | 	rdlong	arg03, fp
2b1cc     04 4E 85 F1 | 	sub	fp, #4
2b1d0     10 16 06 F1 | 	add	arg03, #16
2b1d4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b1d8     02 16 CE F7 | 	test	arg03, #2 wz
2b1dc     3C 00 90 AD |  if_e	jmp	#LR__4348
2b1e0     04 4E 05 F1 | 	add	fp, #4
2b1e4     A7 12 02 FB | 	rdlong	arg01, fp
2b1e8     10 4E 05 F1 | 	add	fp, #16
2b1ec     A7 14 02 FB | 	rdlong	arg02, fp
2b1f0     14 4E 85 F1 | 	sub	fp, #20
2b1f4     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2b1f8     14 4E 05 F1 | 	add	fp, #20
2b1fc     A7 FA 61 FC | 	wrlong	result1, fp
2b200     00 FA 4D F2 | 	cmps	result1, #0 wz
2b204     14 4E 85 F1 | 	sub	fp, #20
2b208     08 4E 05 A1 |  if_e	add	fp, #8
2b20c     A7 00 68 AC |  if_e	wrlong	#0, fp
2b210     08 4E 85 A1 |  if_e	sub	fp, #8
2b214                 | ' 							ofs = 0; break;
2b214     D0 00 90 AD |  if_e	jmp	#LR__4353
2b218     24 00 90 FD | 	jmp	#LR__4349
2b21c                 | LR__4348
2b21c     04 4E 05 F1 | 	add	fp, #4
2b220     A7 12 02 FB | 	rdlong	arg01, fp
2b224     10 4E 05 F1 | 	add	fp, #16
2b228     A7 14 02 FB | 	rdlong	arg02, fp
2b22c     14 4E 85 F1 | 	sub	fp, #20
2b230     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2b234     14 4E 05 F1 | 	add	fp, #20
2b238     A7 FA 61 FC | 	wrlong	result1, fp
2b23c     14 4E 85 F1 | 	sub	fp, #20
2b240                 | LR__4349
2b240     14 4E 05 F1 | 	add	fp, #20
2b244     A7 16 02 FB | 	rdlong	arg03, fp
2b248     14 4E 85 F1 | 	sub	fp, #20
2b24c     FF FF 7F FF 
2b250     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2b254     1C 00 90 5D |  if_ne	jmp	#LR__4350
2b258     04 4E 05 F1 | 	add	fp, #4
2b25c     A7 16 02 FB | 	rdlong	arg03, fp
2b260     04 4E 85 F1 | 	sub	fp, #4
2b264     11 16 06 F1 | 	add	arg03, #17
2b268     0B 03 48 FC | 	wrbyte	#1, arg03
2b26c     01 FA 05 F6 | 	mov	result1, #1
2b270     D0 02 90 FD | 	jmp	#LR__4363
2b274                 | LR__4350
2b274     14 4E 05 F1 | 	add	fp, #20
2b278     A7 16 02 FB | 	rdlong	arg03, fp
2b27c     14 4E 85 F1 | 	sub	fp, #20
2b280     02 16 16 F2 | 	cmp	arg03, #2 wc
2b284     24 00 90 CD |  if_b	jmp	#LR__4351
2b288     10 4E 05 F1 | 	add	fp, #16
2b28c     A7 18 02 FB | 	rdlong	arg04, fp
2b290     04 4E 05 F1 | 	add	fp, #4
2b294     A7 16 02 FB | 	rdlong	arg03, fp
2b298     14 4E 85 F1 | 	sub	fp, #20
2b29c     18 18 06 F1 | 	add	arg04, #24
2b2a0     0C 19 02 FB | 	rdlong	arg04, arg04
2b2a4     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2b2a8     1C 00 90 CD |  if_b	jmp	#LR__4352
2b2ac                 | LR__4351
2b2ac     04 4E 05 F1 | 	add	fp, #4
2b2b0     A7 16 02 FB | 	rdlong	arg03, fp
2b2b4     04 4E 85 F1 | 	sub	fp, #4
2b2b8     11 16 06 F1 | 	add	arg03, #17
2b2bc     0B 05 48 FC | 	wrbyte	#2, arg03
2b2c0     02 FA 05 F6 | 	mov	result1, #2
2b2c4     7C 02 90 FD | 	jmp	#LR__4363
2b2c8                 | LR__4352
2b2c8     04 4E 05 F1 | 	add	fp, #4
2b2cc     A7 18 02 FB | 	rdlong	arg04, fp
2b2d0     10 4E 05 F1 | 	add	fp, #16
2b2d4     A7 16 02 FB | 	rdlong	arg03, fp
2b2d8     14 4E 85 F1 | 	sub	fp, #20
2b2dc     18 18 06 F1 | 	add	arg04, #24
2b2e0     0C 17 62 FC | 	wrlong	arg03, arg04
2b2e4     7C FE 9F FD | 	jmp	#LR__4347
2b2e8                 | LR__4353
2b2e8     04 4E 05 F1 | 	add	fp, #4
2b2ec     A7 16 02 FB | 	rdlong	arg03, fp
2b2f0     0B 13 02 F6 | 	mov	arg01, arg03
2b2f4     14 16 06 F1 | 	add	arg03, #20
2b2f8     0B 15 02 FB | 	rdlong	arg02, arg03
2b2fc     04 4E 05 F1 | 	add	fp, #4
2b300     A7 16 02 FB | 	rdlong	arg03, fp
2b304     0B 15 02 F1 | 	add	arg02, arg03
2b308     14 12 06 F1 | 	add	arg01, #20
2b30c     09 15 62 FC | 	wrlong	arg02, arg01
2b310     A7 16 02 FB | 	rdlong	arg03, fp
2b314     08 4E 85 F1 | 	sub	fp, #8
2b318     FF 17 CE F7 | 	test	arg03, #511 wz
2b31c     6C 00 90 AD |  if_e	jmp	#LR__4355
2b320     10 4E 05 F1 | 	add	fp, #16
2b324     A7 12 02 FB | 	rdlong	arg01, fp
2b328     04 4E 05 F1 | 	add	fp, #4
2b32c     A7 14 02 FB | 	rdlong	arg02, fp
2b330     14 4E 85 F1 | 	sub	fp, #20
2b334     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2b338     1C 4E 05 F1 | 	add	fp, #28
2b33c     A7 FA 61 FC | 	wrlong	result1, fp
2b340     1C 4E 85 F1 | 	sub	fp, #28
2b344     00 FA 0D F2 | 	cmp	result1, #0 wz
2b348     1C 00 90 5D |  if_ne	jmp	#LR__4354
2b34c     04 4E 05 F1 | 	add	fp, #4
2b350     A7 16 02 FB | 	rdlong	arg03, fp
2b354     04 4E 85 F1 | 	sub	fp, #4
2b358     11 16 06 F1 | 	add	arg03, #17
2b35c     0B 05 48 FC | 	wrbyte	#2, arg03
2b360     02 FA 05 F6 | 	mov	result1, #2
2b364     DC 01 90 FD | 	jmp	#LR__4363
2b368                 | LR__4354
2b368     1C 4E 05 F1 | 	add	fp, #28
2b36c     A7 18 02 FB | 	rdlong	arg04, fp
2b370     14 4E 85 F1 | 	sub	fp, #20
2b374     A7 16 02 FB | 	rdlong	arg03, fp
2b378     09 16 46 F0 | 	shr	arg03, #9
2b37c     0B 19 02 F1 | 	add	arg04, arg03
2b380     14 4E 05 F1 | 	add	fp, #20
2b384     A7 18 62 FC | 	wrlong	arg04, fp
2b388     1C 4E 85 F1 | 	sub	fp, #28
2b38c                 | LR__4355
2b38c                 | LR__4356
2b38c                 | LR__4357
2b38c     04 4E 05 F1 | 	add	fp, #4
2b390     A7 18 02 FB | 	rdlong	arg04, fp
2b394     0C 17 02 F6 | 	mov	arg03, arg04
2b398     04 4E 85 F1 | 	sub	fp, #4
2b39c     14 16 06 F1 | 	add	arg03, #20
2b3a0     0B 17 02 FB | 	rdlong	arg03, arg03
2b3a4     0C 18 06 F1 | 	add	arg04, #12
2b3a8     0C 19 02 FB | 	rdlong	arg04, arg04
2b3ac     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2b3b0     3C 00 90 ED |  if_be	jmp	#LR__4358
2b3b4     04 4E 05 F1 | 	add	fp, #4
2b3b8     A7 18 02 FB | 	rdlong	arg04, fp
2b3bc     0C 17 02 F6 | 	mov	arg03, arg04
2b3c0     14 18 06 F1 | 	add	arg04, #20
2b3c4     0C 19 02 FB | 	rdlong	arg04, arg04
2b3c8     0C 16 06 F1 | 	add	arg03, #12
2b3cc     0B 19 62 FC | 	wrlong	arg04, arg03
2b3d0     A7 18 02 FB | 	rdlong	arg04, fp
2b3d4     0C 17 02 F6 | 	mov	arg03, arg04
2b3d8     04 4E 85 F1 | 	sub	fp, #4
2b3dc     10 18 06 F1 | 	add	arg04, #16
2b3e0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b3e4     40 18 46 F5 | 	or	arg04, #64
2b3e8     10 16 06 F1 | 	add	arg03, #16
2b3ec     0B 19 42 FC | 	wrbyte	arg04, arg03
2b3f0                 | LR__4358
2b3f0     04 4E 05 F1 | 	add	fp, #4
2b3f4     A7 16 02 FB | 	rdlong	arg03, fp
2b3f8     04 4E 85 F1 | 	sub	fp, #4
2b3fc     14 16 06 F1 | 	add	arg03, #20
2b400     0B 17 02 FB | 	rdlong	arg03, arg03
2b404     FF 17 CE F7 | 	test	arg03, #511 wz
2b408     2C 01 90 AD |  if_e	jmp	#LR__4362
2b40c     04 4E 05 F1 | 	add	fp, #4
2b410     A7 18 02 FB | 	rdlong	arg04, fp
2b414     18 4E 05 F1 | 	add	fp, #24
2b418     A7 16 02 FB | 	rdlong	arg03, fp
2b41c     1C 4E 85 F1 | 	sub	fp, #28
2b420     1C 18 06 F1 | 	add	arg04, #28
2b424     0C 19 02 FB | 	rdlong	arg04, arg04
2b428     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2b42c     08 01 90 AD |  if_e	jmp	#LR__4362
2b430     04 4E 05 F1 | 	add	fp, #4
2b434     A7 16 02 FB | 	rdlong	arg03, fp
2b438     04 4E 85 F1 | 	sub	fp, #4
2b43c     10 16 06 F1 | 	add	arg03, #16
2b440     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b444     80 16 CE F7 | 	test	arg03, #128 wz
2b448     7C 00 90 AD |  if_e	jmp	#LR__4360
2b44c     10 4E 05 F1 | 	add	fp, #16
2b450     A7 16 02 FB | 	rdlong	arg03, fp
2b454     01 16 06 F1 | 	add	arg03, #1
2b458     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b45c     0C 4E 85 F1 | 	sub	fp, #12
2b460     A7 16 02 FB | 	rdlong	arg03, fp
2b464     0B 15 02 F6 | 	mov	arg02, arg03
2b468     28 14 06 F1 | 	add	arg02, #40
2b46c     04 4E 85 F1 | 	sub	fp, #4
2b470     1C 16 06 F1 | 	add	arg03, #28
2b474     0B 17 02 FB | 	rdlong	arg03, arg03
2b478     01 18 06 F6 | 	mov	arg04, #1
2b47c     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2b480     00 FA 0D F2 | 	cmp	result1, #0 wz
2b484     1C 00 90 AD |  if_e	jmp	#LR__4359
2b488     04 4E 05 F1 | 	add	fp, #4
2b48c     A7 16 02 FB | 	rdlong	arg03, fp
2b490     04 4E 85 F1 | 	sub	fp, #4
2b494     11 16 06 F1 | 	add	arg03, #17
2b498     0B 03 48 FC | 	wrbyte	#1, arg03
2b49c     01 FA 05 F6 | 	mov	result1, #1
2b4a0     A0 00 90 FD | 	jmp	#LR__4363
2b4a4                 | LR__4359
2b4a4     04 4E 05 F1 | 	add	fp, #4
2b4a8     A7 18 02 FB | 	rdlong	arg04, fp
2b4ac     0C 17 02 F6 | 	mov	arg03, arg04
2b4b0     04 4E 85 F1 | 	sub	fp, #4
2b4b4     10 18 06 F1 | 	add	arg04, #16
2b4b8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b4bc     7F 18 06 F5 | 	and	arg04, #127
2b4c0     10 16 06 F1 | 	add	arg03, #16
2b4c4     0B 19 42 FC | 	wrbyte	arg04, arg03
2b4c8                 | LR__4360
2b4c8     10 4E 05 F1 | 	add	fp, #16
2b4cc     A7 16 02 FB | 	rdlong	arg03, fp
2b4d0     01 16 06 F1 | 	add	arg03, #1
2b4d4     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b4d8     0C 4E 85 F1 | 	sub	fp, #12
2b4dc     A7 14 02 FB | 	rdlong	arg02, fp
2b4e0     28 14 06 F1 | 	add	arg02, #40
2b4e4     18 4E 05 F1 | 	add	fp, #24
2b4e8     A7 16 02 FB | 	rdlong	arg03, fp
2b4ec     1C 4E 85 F1 | 	sub	fp, #28
2b4f0     01 18 06 F6 | 	mov	arg04, #1
2b4f4     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2b4f8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b4fc     1C 00 90 AD |  if_e	jmp	#LR__4361
2b500     04 4E 05 F1 | 	add	fp, #4
2b504     A7 16 02 FB | 	rdlong	arg03, fp
2b508     04 4E 85 F1 | 	sub	fp, #4
2b50c     11 16 06 F1 | 	add	arg03, #17
2b510     0B 03 48 FC | 	wrbyte	#1, arg03
2b514     01 FA 05 F6 | 	mov	result1, #1
2b518     28 00 90 FD | 	jmp	#LR__4363
2b51c                 | LR__4361
2b51c     04 4E 05 F1 | 	add	fp, #4
2b520     A7 18 02 FB | 	rdlong	arg04, fp
2b524     18 4E 05 F1 | 	add	fp, #24
2b528     A7 16 02 FB | 	rdlong	arg03, fp
2b52c     1C 4E 85 F1 | 	sub	fp, #28
2b530     1C 18 06 F1 | 	add	arg04, #28
2b534     0C 17 62 FC | 	wrlong	arg03, arg04
2b538                 | LR__4362
2b538                 | ' 
2b538                 | ' 			fp->sect = nsect;
2b538                 | ' 		}
2b538                 | ' 	}
2b538                 | ' 
2b538                 | ' 	return res ;
2b538     0C 4E 05 F1 | 	add	fp, #12
2b53c     A7 FA 01 FB | 	rdlong	result1, fp
2b540     0C 4E 85 F1 | 	sub	fp, #12
2b544                 | LR__4363
2b544     A7 F0 03 F6 | 	mov	ptra, fp
2b548     B2 00 A0 FD | 	call	#popregs_
2b54c                 | _fatfs_cc_f_lseek_ret
2b54c     2D 00 64 FD | 	ret
2b550                 | 
2b550                 | _fatfs_cc_f_opendir
2b550     01 4A 05 F6 | 	mov	COUNT_, #1
2b554     A8 00 A0 FD | 	call	#pushregs_
2b558     14 F0 07 F1 | 	add	ptra, #20
2b55c     04 4E 05 F1 | 	add	fp, #4
2b560     A7 12 62 FC | 	wrlong	arg01, fp
2b564     04 4E 05 F1 | 	add	fp, #4
2b568     A7 14 62 FC | 	wrlong	arg02, fp
2b56c     04 4E 85 F1 | 	sub	fp, #4
2b570     A7 16 0A FB | 	rdlong	arg03, fp wz
2b574     04 4E 85 F1 | 	sub	fp, #4
2b578     09 FA 05 A6 |  if_e	mov	result1, #9
2b57c     78 01 90 AD |  if_e	jmp	#LR__4376
2b580     08 4E 05 F1 | 	add	fp, #8
2b584     A7 12 02 F6 | 	mov	arg01, fp
2b588     08 4E 05 F1 | 	add	fp, #8
2b58c     A7 14 02 F6 | 	mov	arg02, fp
2b590     10 4E 85 F1 | 	sub	fp, #16
2b594     00 16 06 F6 | 	mov	arg03, #0
2b598     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2b59c     0C 4E 05 F1 | 	add	fp, #12
2b5a0     A7 FA 61 FC | 	wrlong	result1, fp
2b5a4     0C 4E 85 F1 | 	sub	fp, #12
2b5a8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b5ac     20 01 90 5D |  if_ne	jmp	#LR__4375
2b5b0     04 4E 05 F1 | 	add	fp, #4
2b5b4     A7 16 02 FB | 	rdlong	arg03, fp
2b5b8     0C 4E 05 F1 | 	add	fp, #12
2b5bc     A7 FA 01 FB | 	rdlong	result1, fp
2b5c0     0B FB 61 FC | 	wrlong	result1, arg03
2b5c4     0C 4E 85 F1 | 	sub	fp, #12
2b5c8     A7 12 02 FB | 	rdlong	arg01, fp
2b5cc     04 4E 05 F1 | 	add	fp, #4
2b5d0     A7 14 02 FB | 	rdlong	arg02, fp
2b5d4     08 4E 85 F1 | 	sub	fp, #8
2b5d8     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2b5dc     0C 4E 05 F1 | 	add	fp, #12
2b5e0     A7 FA 61 FC | 	wrlong	result1, fp
2b5e4     0C 4E 85 F1 | 	sub	fp, #12
2b5e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b5ec     C4 00 90 5D |  if_ne	jmp	#LR__4374
2b5f0     04 4E 05 F1 | 	add	fp, #4
2b5f4     A7 16 02 FB | 	rdlong	arg03, fp
2b5f8     04 4E 85 F1 | 	sub	fp, #4
2b5fc     2B 16 06 F1 | 	add	arg03, #43
2b600     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b604     80 16 CE F7 | 	test	arg03, #128 wz
2b608     58 00 90 5D |  if_ne	jmp	#LR__4372
2b60c     04 4E 05 F1 | 	add	fp, #4
2b610     A7 16 02 FB | 	rdlong	arg03, fp
2b614     04 4E 85 F1 | 	sub	fp, #4
2b618     06 16 06 F1 | 	add	arg03, #6
2b61c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b620     10 16 CE F7 | 	test	arg03, #16 wz
2b624     30 00 90 AD |  if_e	jmp	#LR__4370
2b628     04 4E 05 F1 | 	add	fp, #4
2b62c     A7 16 02 FB | 	rdlong	arg03, fp
2b630     0B 1F 02 F6 | 	mov	local01, arg03
2b634     0C 4E 05 F1 | 	add	fp, #12
2b638     A7 12 02 FB | 	rdlong	arg01, fp
2b63c     10 4E 85 F1 | 	sub	fp, #16
2b640     1C 16 06 F1 | 	add	arg03, #28
2b644     0B 15 02 FB | 	rdlong	arg02, arg03
2b648     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2b64c     08 1E 06 F1 | 	add	local01, #8
2b650     0F FB 61 FC | 	wrlong	result1, local01
2b654     0C 00 90 FD | 	jmp	#LR__4371
2b658                 | LR__4370
2b658     0C 4E 05 F1 | 	add	fp, #12
2b65c     A7 0A 68 FC | 	wrlong	#5, fp
2b660     0C 4E 85 F1 | 	sub	fp, #12
2b664                 | LR__4371
2b664                 | LR__4372
2b664     0C 4E 05 F1 | 	add	fp, #12
2b668     A7 1E 0A FB | 	rdlong	local01, fp wz
2b66c     0C 4E 85 F1 | 	sub	fp, #12
2b670     40 00 90 5D |  if_ne	jmp	#LR__4373
2b674     04 4E 05 F1 | 	add	fp, #4
2b678     A7 1E 02 FB | 	rdlong	local01, fp
2b67c     0C 4E 05 F1 | 	add	fp, #12
2b680     A7 16 02 FB | 	rdlong	arg03, fp
2b684     06 16 06 F1 | 	add	arg03, #6
2b688     0B 17 E2 FA | 	rdword	arg03, arg03
2b68c     04 1E 06 F1 | 	add	local01, #4
2b690     0F 17 52 FC | 	wrword	arg03, local01
2b694     0C 4E 85 F1 | 	sub	fp, #12
2b698     A7 12 02 FB | 	rdlong	arg01, fp
2b69c     04 4E 85 F1 | 	sub	fp, #4
2b6a0     00 14 06 F6 | 	mov	arg02, #0
2b6a4     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2b6a8     0C 4E 05 F1 | 	add	fp, #12
2b6ac     A7 FA 61 FC | 	wrlong	result1, fp
2b6b0     0C 4E 85 F1 | 	sub	fp, #12
2b6b4                 | LR__4373
2b6b4                 | LR__4374
2b6b4     0C 4E 05 F1 | 	add	fp, #12
2b6b8     A7 1E 02 FB | 	rdlong	local01, fp
2b6bc     0C 4E 85 F1 | 	sub	fp, #12
2b6c0     04 1E 0E F2 | 	cmp	local01, #4 wz
2b6c4     0C 4E 05 A1 |  if_e	add	fp, #12
2b6c8     A7 0A 68 AC |  if_e	wrlong	#5, fp
2b6cc     0C 4E 85 A1 |  if_e	sub	fp, #12
2b6d0                 | LR__4375
2b6d0     0C 4E 05 F1 | 	add	fp, #12
2b6d4     A7 1E 0A FB | 	rdlong	local01, fp wz
2b6d8     0C 4E 85 F1 | 	sub	fp, #12
2b6dc     04 4E 05 51 |  if_ne	add	fp, #4
2b6e0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2b6e4     04 4E 85 51 |  if_ne	sub	fp, #4
2b6e8     0F 01 68 5C |  if_ne	wrlong	#0, local01
2b6ec                 | ' 
2b6ec                 | ' 	return res ;
2b6ec     0C 4E 05 F1 | 	add	fp, #12
2b6f0     A7 FA 01 FB | 	rdlong	result1, fp
2b6f4     0C 4E 85 F1 | 	sub	fp, #12
2b6f8                 | LR__4376
2b6f8     A7 F0 03 F6 | 	mov	ptra, fp
2b6fc     B2 00 A0 FD | 	call	#popregs_
2b700                 | _fatfs_cc_f_opendir_ret
2b700     2D 00 64 FD | 	ret
2b704                 | 
2b704                 | _fatfs_cc_f_closedir
2b704     00 4A 05 F6 | 	mov	COUNT_, #0
2b708     A8 00 A0 FD | 	call	#pushregs_
2b70c     10 F0 07 F1 | 	add	ptra, #16
2b710     04 4E 05 F1 | 	add	fp, #4
2b714     A7 12 62 FC | 	wrlong	arg01, fp
2b718     08 4E 05 F1 | 	add	fp, #8
2b71c     A7 14 02 F6 | 	mov	arg02, fp
2b720     0C 4E 85 F1 | 	sub	fp, #12
2b724     C0 DD BF FD | 	call	#_fatfs_cc_validate
2b728     08 4E 05 F1 | 	add	fp, #8
2b72c     A7 FA 61 FC | 	wrlong	result1, fp
2b730     08 4E 85 F1 | 	sub	fp, #8
2b734     00 FA 0D F2 | 	cmp	result1, #0 wz
2b738     04 4E 05 A1 |  if_e	add	fp, #4
2b73c     A7 FA 01 AB |  if_e	rdlong	result1, fp
2b740     04 4E 85 A1 |  if_e	sub	fp, #4
2b744     FD 00 68 AC |  if_e	wrlong	#0, result1
2b748                 | ' 
2b748                 | ' 
2b748                 | ' 
2b748                 | ' 
2b748                 | ' 		dp->obj.fs = 0;
2b748                 | ' #line 4633 "ff.c"
2b748                 | ' 	}
2b748                 | ' 	return res;
2b748     08 4E 05 F1 | 	add	fp, #8
2b74c     A7 FA 01 FB | 	rdlong	result1, fp
2b750     08 4E 85 F1 | 	sub	fp, #8
2b754     A7 F0 03 F6 | 	mov	ptra, fp
2b758     B2 00 A0 FD | 	call	#popregs_
2b75c                 | _fatfs_cc_f_closedir_ret
2b75c     2D 00 64 FD | 	ret
2b760                 | 
2b760                 | _fatfs_cc_f_readdir
2b760     00 4A 05 F6 | 	mov	COUNT_, #0
2b764     A8 00 A0 FD | 	call	#pushregs_
2b768     14 F0 07 F1 | 	add	ptra, #20
2b76c     04 4E 05 F1 | 	add	fp, #4
2b770     A7 12 62 FC | 	wrlong	arg01, fp
2b774     04 4E 05 F1 | 	add	fp, #4
2b778     A7 14 62 FC | 	wrlong	arg02, fp
2b77c     04 4E 85 F1 | 	sub	fp, #4
2b780     A7 12 02 FB | 	rdlong	arg01, fp
2b784     0C 4E 05 F1 | 	add	fp, #12
2b788     A7 14 02 F6 | 	mov	arg02, fp
2b78c     10 4E 85 F1 | 	sub	fp, #16
2b790     54 DD BF FD | 	call	#_fatfs_cc_validate
2b794     0C 4E 05 F1 | 	add	fp, #12
2b798     A7 FA 61 FC | 	wrlong	result1, fp
2b79c     0C 4E 85 F1 | 	sub	fp, #12
2b7a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b7a4     BC 00 90 5D |  if_ne	jmp	#LR__4383
2b7a8     08 4E 05 F1 | 	add	fp, #8
2b7ac     A7 FA 09 FB | 	rdlong	result1, fp wz
2b7b0     08 4E 85 F1 | 	sub	fp, #8
2b7b4     24 00 90 5D |  if_ne	jmp	#LR__4380
2b7b8     04 4E 05 F1 | 	add	fp, #4
2b7bc     A7 12 02 FB | 	rdlong	arg01, fp
2b7c0     04 4E 85 F1 | 	sub	fp, #4
2b7c4     00 14 06 F6 | 	mov	arg02, #0
2b7c8     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2b7cc     0C 4E 05 F1 | 	add	fp, #12
2b7d0     A7 FA 61 FC | 	wrlong	result1, fp
2b7d4     0C 4E 85 F1 | 	sub	fp, #12
2b7d8     88 00 90 FD | 	jmp	#LR__4382
2b7dc                 | LR__4380
2b7dc     04 4E 05 F1 | 	add	fp, #4
2b7e0     A7 12 02 FB | 	rdlong	arg01, fp
2b7e4     04 4E 85 F1 | 	sub	fp, #4
2b7e8     00 14 06 F6 | 	mov	arg02, #0
2b7ec     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2b7f0     0C 4E 05 F1 | 	add	fp, #12
2b7f4     A7 FA 61 FC | 	wrlong	result1, fp
2b7f8     0C 4E 85 F1 | 	sub	fp, #12
2b7fc     04 FA 0D F2 | 	cmp	result1, #4 wz
2b800     0C 4E 05 A1 |  if_e	add	fp, #12
2b804     A7 00 68 AC |  if_e	wrlong	#0, fp
2b808     0C 4E 85 A1 |  if_e	sub	fp, #12
2b80c     0C 4E 05 F1 | 	add	fp, #12
2b810     A7 FA 09 FB | 	rdlong	result1, fp wz
2b814     0C 4E 85 F1 | 	sub	fp, #12
2b818     48 00 90 5D |  if_ne	jmp	#LR__4381
2b81c     04 4E 05 F1 | 	add	fp, #4
2b820     A7 12 02 FB | 	rdlong	arg01, fp
2b824     04 4E 05 F1 | 	add	fp, #4
2b828     A7 14 02 FB | 	rdlong	arg02, fp
2b82c     08 4E 85 F1 | 	sub	fp, #8
2b830     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2b834     04 4E 05 F1 | 	add	fp, #4
2b838     A7 12 02 FB | 	rdlong	arg01, fp
2b83c     04 4E 85 F1 | 	sub	fp, #4
2b840     00 14 06 F6 | 	mov	arg02, #0
2b844     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2b848     0C 4E 05 F1 | 	add	fp, #12
2b84c     A7 FA 61 FC | 	wrlong	result1, fp
2b850     0C 4E 85 F1 | 	sub	fp, #12
2b854     04 FA 0D F2 | 	cmp	result1, #4 wz
2b858     0C 4E 05 A1 |  if_e	add	fp, #12
2b85c     A7 00 68 AC |  if_e	wrlong	#0, fp
2b860     0C 4E 85 A1 |  if_e	sub	fp, #12
2b864                 | LR__4381
2b864                 | LR__4382
2b864                 | LR__4383
2b864                 | ' 			}
2b864                 | ' 			;
2b864                 | ' 		}
2b864                 | ' 	}
2b864                 | ' 	return res ;
2b864     0C 4E 05 F1 | 	add	fp, #12
2b868     A7 FA 01 FB | 	rdlong	result1, fp
2b86c     0C 4E 85 F1 | 	sub	fp, #12
2b870     A7 F0 03 F6 | 	mov	ptra, fp
2b874     B2 00 A0 FD | 	call	#popregs_
2b878                 | _fatfs_cc_f_readdir_ret
2b878     2D 00 64 FD | 	ret
2b87c                 | 
2b87c                 | _fatfs_cc_f_stat
2b87c     00 4A 05 F6 | 	mov	COUNT_, #0
2b880     A8 00 A0 FD | 	call	#pushregs_
2b884     40 F0 07 F1 | 	add	ptra, #64
2b888     04 4E 05 F1 | 	add	fp, #4
2b88c     A7 12 62 FC | 	wrlong	arg01, fp
2b890     04 4E 05 F1 | 	add	fp, #4
2b894     A7 14 62 FC | 	wrlong	arg02, fp
2b898     04 4E 85 F1 | 	sub	fp, #4
2b89c     A7 12 02 F6 | 	mov	arg01, fp
2b8a0     0C 4E 05 F1 | 	add	fp, #12
2b8a4     A7 14 02 F6 | 	mov	arg02, fp
2b8a8     10 4E 85 F1 | 	sub	fp, #16
2b8ac     00 16 06 F6 | 	mov	arg03, #0
2b8b0     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2b8b4     0C 4E 05 F1 | 	add	fp, #12
2b8b8     A7 FA 61 FC | 	wrlong	result1, fp
2b8bc     0C 4E 85 F1 | 	sub	fp, #12
2b8c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b8c4     74 00 90 5D |  if_ne	jmp	#LR__4393
2b8c8     10 4E 05 F1 | 	add	fp, #16
2b8cc     A7 12 02 F6 | 	mov	arg01, fp
2b8d0     0C 4E 85 F1 | 	sub	fp, #12
2b8d4     A7 14 02 FB | 	rdlong	arg02, fp
2b8d8     04 4E 85 F1 | 	sub	fp, #4
2b8dc     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2b8e0     0C 4E 05 F1 | 	add	fp, #12
2b8e4     A7 FA 61 FC | 	wrlong	result1, fp
2b8e8     0C 4E 85 F1 | 	sub	fp, #12
2b8ec     00 FA 0D F2 | 	cmp	result1, #0 wz
2b8f0     48 00 90 5D |  if_ne	jmp	#LR__4392
2b8f4     3B 4E 05 F1 | 	add	fp, #59
2b8f8     A7 FA C1 FA | 	rdbyte	result1, fp
2b8fc     3B 4E 85 F1 | 	sub	fp, #59
2b900     80 FA CD F7 | 	test	result1, #128 wz
2b904     0C 4E 05 51 |  if_ne	add	fp, #12
2b908     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b90c     0C 4E 85 51 |  if_ne	sub	fp, #12
2b910     28 00 90 5D |  if_ne	jmp	#LR__4391
2b914     08 4E 05 F1 | 	add	fp, #8
2b918     A7 FA 09 FB | 	rdlong	result1, fp wz
2b91c     08 4E 85 F1 | 	sub	fp, #8
2b920     18 00 90 AD |  if_e	jmp	#LR__4390
2b924     10 4E 05 F1 | 	add	fp, #16
2b928     A7 12 02 F6 | 	mov	arg01, fp
2b92c     08 4E 85 F1 | 	sub	fp, #8
2b930     A7 14 02 FB | 	rdlong	arg02, fp
2b934     08 4E 85 F1 | 	sub	fp, #8
2b938     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2b93c                 | LR__4390
2b93c                 | LR__4391
2b93c                 | LR__4392
2b93c                 | LR__4393
2b93c                 | ' 			}
2b93c                 | ' 		}
2b93c                 | ' 		;
2b93c                 | ' 	}
2b93c                 | ' 
2b93c                 | ' 	return res ;
2b93c     0C 4E 05 F1 | 	add	fp, #12
2b940     A7 FA 01 FB | 	rdlong	result1, fp
2b944     0C 4E 85 F1 | 	sub	fp, #12
2b948     A7 F0 03 F6 | 	mov	ptra, fp
2b94c     B2 00 A0 FD | 	call	#popregs_
2b950                 | _fatfs_cc_f_stat_ret
2b950     2D 00 64 FD | 	ret
2b954                 | 
2b954                 | _fatfs_cc_f_unlink
2b954     00 4A 05 F6 | 	mov	COUNT_, #0
2b958     A8 00 A0 FD | 	call	#pushregs_
2b95c     74 F0 07 F1 | 	add	ptra, #116
2b960     04 4E 05 F1 | 	add	fp, #4
2b964     A7 12 62 FC | 	wrlong	arg01, fp
2b968     68 4E 05 F1 | 	add	fp, #104
2b96c     A7 00 68 FC | 	wrlong	#0, fp
2b970     68 4E 85 F1 | 	sub	fp, #104
2b974     A7 12 02 F6 | 	mov	arg01, fp
2b978     6C 4E 05 F1 | 	add	fp, #108
2b97c     A7 14 02 F6 | 	mov	arg02, fp
2b980     70 4E 85 F1 | 	sub	fp, #112
2b984     02 16 06 F6 | 	mov	arg03, #2
2b988     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2b98c     08 4E 05 F1 | 	add	fp, #8
2b990     A7 FA 61 FC | 	wrlong	result1, fp
2b994     08 4E 85 F1 | 	sub	fp, #8
2b998     00 FA 0D F2 | 	cmp	result1, #0 wz
2b99c     E4 01 90 5D |  if_ne	jmp	#LR__4408
2b9a0     70 4E 05 F1 | 	add	fp, #112
2b9a4     A7 16 02 FB | 	rdlong	arg03, fp
2b9a8     64 4E 85 F1 | 	sub	fp, #100
2b9ac     A7 16 62 FC | 	wrlong	arg03, fp
2b9b0     A7 12 02 F6 | 	mov	arg01, fp
2b9b4     08 4E 85 F1 | 	sub	fp, #8
2b9b8     A7 14 02 FB | 	rdlong	arg02, fp
2b9bc     04 4E 85 F1 | 	sub	fp, #4
2b9c0     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2b9c4     08 4E 05 F1 | 	add	fp, #8
2b9c8     A7 FA 61 FC | 	wrlong	result1, fp
2b9cc     00 FA 4D F2 | 	cmps	result1, #0 wz
2b9d0     08 4E 85 F1 | 	sub	fp, #8
2b9d4     AC 01 90 5D |  if_ne	jmp	#LR__4407
2b9d8     37 4E 05 F1 | 	add	fp, #55
2b9dc     A7 FA C1 FA | 	rdbyte	result1, fp
2b9e0     37 4E 85 F1 | 	sub	fp, #55
2b9e4     80 FA CD F7 | 	test	result1, #128 wz
2b9e8     08 4E 05 51 |  if_ne	add	fp, #8
2b9ec     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b9f0     08 4E 85 51 |  if_ne	sub	fp, #8
2b9f4     1C 00 90 5D |  if_ne	jmp	#LR__4400
2b9f8     12 4E 05 F1 | 	add	fp, #18
2b9fc     A7 FA C1 FA | 	rdbyte	result1, fp
2ba00     12 4E 85 F1 | 	sub	fp, #18
2ba04     01 FA CD F7 | 	test	result1, #1 wz
2ba08     08 4E 05 51 |  if_ne	add	fp, #8
2ba0c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2ba10     08 4E 85 51 |  if_ne	sub	fp, #8
2ba14                 | LR__4400
2ba14     08 4E 05 F1 | 	add	fp, #8
2ba18     A7 FA 09 FB | 	rdlong	result1, fp wz
2ba1c     08 4E 85 F1 | 	sub	fp, #8
2ba20     C8 00 90 5D |  if_ne	jmp	#LR__4403
2ba24     70 4E 05 F1 | 	add	fp, #112
2ba28     A7 12 02 FB | 	rdlong	arg01, fp
2ba2c     48 4E 85 F1 | 	sub	fp, #72
2ba30     A7 14 02 FB | 	rdlong	arg02, fp
2ba34     28 4E 85 F1 | 	sub	fp, #40
2ba38     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2ba3c     6C 4E 05 F1 | 	add	fp, #108
2ba40     A7 FA 61 FC | 	wrlong	result1, fp
2ba44     5A 4E 85 F1 | 	sub	fp, #90
2ba48     A7 FA C1 FA | 	rdbyte	result1, fp
2ba4c     12 4E 85 F1 | 	sub	fp, #18
2ba50     10 FA CD F7 | 	test	result1, #16 wz
2ba54     94 00 90 AD |  if_e	jmp	#LR__4402
2ba58     70 4E 05 F1 | 	add	fp, #112
2ba5c     A7 FA 01 FB | 	rdlong	result1, fp
2ba60     34 4E 85 F1 | 	sub	fp, #52
2ba64     A7 FA 61 FC | 	wrlong	result1, fp
2ba68     30 4E 05 F1 | 	add	fp, #48
2ba6c     A7 16 02 FB | 	rdlong	arg03, fp
2ba70     28 4E 85 F1 | 	sub	fp, #40
2ba74     A7 16 62 FC | 	wrlong	arg03, fp
2ba78     08 4E 85 F1 | 	sub	fp, #8
2ba7c     A7 12 02 F6 | 	mov	arg01, fp
2ba80     3C 4E 85 F1 | 	sub	fp, #60
2ba84     00 14 06 F6 | 	mov	arg02, #0
2ba88     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2ba8c     08 4E 05 F1 | 	add	fp, #8
2ba90     A7 FA 61 FC | 	wrlong	result1, fp
2ba94     08 4E 85 F1 | 	sub	fp, #8
2ba98     00 FA 0D F2 | 	cmp	result1, #0 wz
2ba9c     4C 00 90 5D |  if_ne	jmp	#LR__4401
2baa0     3C 4E 05 F1 | 	add	fp, #60
2baa4     A7 12 02 F6 | 	mov	arg01, fp
2baa8     3C 4E 85 F1 | 	sub	fp, #60
2baac     00 14 06 F6 | 	mov	arg02, #0
2bab0     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2bab4     08 4E 05 F1 | 	add	fp, #8
2bab8     A7 FA 61 FC | 	wrlong	result1, fp
2babc     00 FA 4D F2 | 	cmps	result1, #0 wz
2bac0     08 4E 85 F1 | 	sub	fp, #8
2bac4     08 4E 05 A1 |  if_e	add	fp, #8
2bac8     A7 0E 68 AC |  if_e	wrlong	#7, fp
2bacc     08 4E 85 A1 |  if_e	sub	fp, #8
2bad0     08 4E 05 F1 | 	add	fp, #8
2bad4     A7 FA 01 FB | 	rdlong	result1, fp
2bad8     08 4E 85 F1 | 	sub	fp, #8
2badc     04 FA 0D F2 | 	cmp	result1, #4 wz
2bae0     08 4E 05 A1 |  if_e	add	fp, #8
2bae4     A7 00 68 AC |  if_e	wrlong	#0, fp
2bae8     08 4E 85 A1 |  if_e	sub	fp, #8
2baec                 | LR__4401
2baec                 | LR__4402
2baec                 | LR__4403
2baec     08 4E 05 F1 | 	add	fp, #8
2baf0     A7 FA 09 FB | 	rdlong	result1, fp wz
2baf4     08 4E 85 F1 | 	sub	fp, #8
2baf8     88 00 90 5D |  if_ne	jmp	#LR__4406
2bafc     0C 4E 05 F1 | 	add	fp, #12
2bb00     A7 12 02 F6 | 	mov	arg01, fp
2bb04     0C 4E 85 F1 | 	sub	fp, #12
2bb08     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2bb0c     08 4E 05 F1 | 	add	fp, #8
2bb10     A7 FA 61 FC | 	wrlong	result1, fp
2bb14     08 4E 85 F1 | 	sub	fp, #8
2bb18     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb1c     38 00 90 5D |  if_ne	jmp	#LR__4404
2bb20     6C 4E 05 F1 | 	add	fp, #108
2bb24     A7 FA 09 FB | 	rdlong	result1, fp wz
2bb28     6C 4E 85 F1 | 	sub	fp, #108
2bb2c     28 00 90 AD |  if_e	jmp	#LR__4404
2bb30     0C 4E 05 F1 | 	add	fp, #12
2bb34     A7 12 02 F6 | 	mov	arg01, fp
2bb38     60 4E 05 F1 | 	add	fp, #96
2bb3c     A7 14 02 FB | 	rdlong	arg02, fp
2bb40     6C 4E 85 F1 | 	sub	fp, #108
2bb44     00 16 06 F6 | 	mov	arg03, #0
2bb48     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2bb4c     08 4E 05 F1 | 	add	fp, #8
2bb50     A7 FA 61 FC | 	wrlong	result1, fp
2bb54     08 4E 85 F1 | 	sub	fp, #8
2bb58                 | LR__4404
2bb58     08 4E 05 F1 | 	add	fp, #8
2bb5c     A7 FA 09 FB | 	rdlong	result1, fp wz
2bb60     08 4E 85 F1 | 	sub	fp, #8
2bb64     1C 00 90 5D |  if_ne	jmp	#LR__4405
2bb68     70 4E 05 F1 | 	add	fp, #112
2bb6c     A7 12 02 FB | 	rdlong	arg01, fp
2bb70     70 4E 85 F1 | 	sub	fp, #112
2bb74     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2bb78     08 4E 05 F1 | 	add	fp, #8
2bb7c     A7 FA 61 FC | 	wrlong	result1, fp
2bb80     08 4E 85 F1 | 	sub	fp, #8
2bb84                 | LR__4405
2bb84                 | LR__4406
2bb84                 | LR__4407
2bb84                 | LR__4408
2bb84                 | ' 			}
2bb84                 | ' 		}
2bb84                 | ' 		;
2bb84                 | ' 	}
2bb84                 | ' 
2bb84                 | ' 	return res ;
2bb84     08 4E 05 F1 | 	add	fp, #8
2bb88     A7 FA 01 FB | 	rdlong	result1, fp
2bb8c     08 4E 85 F1 | 	sub	fp, #8
2bb90     A7 F0 03 F6 | 	mov	ptra, fp
2bb94     B2 00 A0 FD | 	call	#popregs_
2bb98                 | _fatfs_cc_f_unlink_ret
2bb98     2D 00 64 FD | 	ret
2bb9c                 | 
2bb9c                 | _fatfs_cc_f_mkdir
2bb9c     00 4A 05 F6 | 	mov	COUNT_, #0
2bba0     A8 00 A0 FD | 	call	#pushregs_
2bba4     5C F0 07 F1 | 	add	ptra, #92
2bba8     04 4E 05 F1 | 	add	fp, #4
2bbac     A7 12 62 FC | 	wrlong	arg01, fp
2bbb0     A7 12 02 F6 | 	mov	arg01, fp
2bbb4     48 4E 05 F1 | 	add	fp, #72
2bbb8     A7 14 02 F6 | 	mov	arg02, fp
2bbbc     4C 4E 85 F1 | 	sub	fp, #76
2bbc0     02 16 06 F6 | 	mov	arg03, #2
2bbc4     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2bbc8     08 4E 05 F1 | 	add	fp, #8
2bbcc     A7 FA 61 FC | 	wrlong	result1, fp
2bbd0     08 4E 85 F1 | 	sub	fp, #8
2bbd4     00 FA 0D F2 | 	cmp	result1, #0 wz
2bbd8     C4 02 90 5D |  if_ne	jmp	#LR__4415
2bbdc     4C 4E 05 F1 | 	add	fp, #76
2bbe0     A7 16 02 FB | 	rdlong	arg03, fp
2bbe4     40 4E 85 F1 | 	sub	fp, #64
2bbe8     A7 16 62 FC | 	wrlong	arg03, fp
2bbec     A7 12 02 F6 | 	mov	arg01, fp
2bbf0     08 4E 85 F1 | 	sub	fp, #8
2bbf4     A7 14 02 FB | 	rdlong	arg02, fp
2bbf8     04 4E 85 F1 | 	sub	fp, #4
2bbfc     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2bc00     08 4E 05 F1 | 	add	fp, #8
2bc04     A7 FA 61 FC | 	wrlong	result1, fp
2bc08     00 FA 4D F2 | 	cmps	result1, #0 wz
2bc0c     08 4E 85 F1 | 	sub	fp, #8
2bc10     08 4E 05 A1 |  if_e	add	fp, #8
2bc14     A7 10 68 AC |  if_e	wrlong	#8, fp
2bc18     08 4E 85 A1 |  if_e	sub	fp, #8
2bc1c     08 4E 05 F1 | 	add	fp, #8
2bc20     A7 FA 01 FB | 	rdlong	result1, fp
2bc24     08 4E 85 F1 | 	sub	fp, #8
2bc28     04 FA 0D F2 | 	cmp	result1, #4 wz
2bc2c     70 02 90 5D |  if_ne	jmp	#LR__4414
2bc30     4C 4E 05 F1 | 	add	fp, #76
2bc34     A7 16 02 FB | 	rdlong	arg03, fp
2bc38     10 4E 85 F1 | 	sub	fp, #16
2bc3c     A7 16 62 FC | 	wrlong	arg03, fp
2bc40     A7 12 02 F6 | 	mov	arg01, fp
2bc44     3C 4E 85 F1 | 	sub	fp, #60
2bc48     00 14 06 F6 | 	mov	arg02, #0
2bc4c     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2bc50     50 4E 05 F1 | 	add	fp, #80
2bc54     A7 FA 61 FC | 	wrlong	result1, fp
2bc58     48 4E 85 F1 | 	sub	fp, #72
2bc5c     A7 00 68 FC | 	wrlong	#0, fp
2bc60     48 4E 05 F1 | 	add	fp, #72
2bc64     A7 FA 09 FB | 	rdlong	result1, fp wz
2bc68     50 4E 85 F1 | 	sub	fp, #80
2bc6c     08 4E 05 A1 |  if_e	add	fp, #8
2bc70     A7 0E 68 AC |  if_e	wrlong	#7, fp
2bc74     08 4E 85 A1 |  if_e	sub	fp, #8
2bc78     50 4E 05 F1 | 	add	fp, #80
2bc7c     A7 FA 01 FB | 	rdlong	result1, fp
2bc80     50 4E 85 F1 | 	sub	fp, #80
2bc84     01 FA 0D F2 | 	cmp	result1, #1 wz
2bc88     08 4E 05 A1 |  if_e	add	fp, #8
2bc8c     A7 04 68 AC |  if_e	wrlong	#2, fp
2bc90     08 4E 85 A1 |  if_e	sub	fp, #8
2bc94     50 4E 05 F1 | 	add	fp, #80
2bc98     A7 16 02 FB | 	rdlong	arg03, fp
2bc9c     50 4E 85 F1 | 	sub	fp, #80
2bca0     FF FF 7F FF 
2bca4     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2bca8     08 4E 05 A1 |  if_e	add	fp, #8
2bcac     A7 02 68 AC |  if_e	wrlong	#1, fp
2bcb0     08 4E 85 A1 |  if_e	sub	fp, #8
2bcb4     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2bcb8     58 4E 05 F1 | 	add	fp, #88
2bcbc     A7 FA 61 FC | 	wrlong	result1, fp
2bcc0     50 4E 85 F1 | 	sub	fp, #80
2bcc4     A7 FA 09 FB | 	rdlong	result1, fp wz
2bcc8     08 4E 85 F1 | 	sub	fp, #8
2bccc     1C 01 90 5D |  if_ne	jmp	#LR__4411
2bcd0     4C 4E 05 F1 | 	add	fp, #76
2bcd4     A7 12 02 FB | 	rdlong	arg01, fp
2bcd8     04 4E 05 F1 | 	add	fp, #4
2bcdc     A7 14 02 FB | 	rdlong	arg02, fp
2bce0     50 4E 85 F1 | 	sub	fp, #80
2bce4     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2bce8     08 4E 05 F1 | 	add	fp, #8
2bcec     A7 FA 61 FC | 	wrlong	result1, fp
2bcf0     00 FA 4D F2 | 	cmps	result1, #0 wz
2bcf4     08 4E 85 F1 | 	sub	fp, #8
2bcf8     F0 00 90 5D |  if_ne	jmp	#LR__4410
2bcfc     4C 4E 05 F1 | 	add	fp, #76
2bd00     A7 12 02 FB | 	rdlong	arg01, fp
2bd04     4C 4E 85 F1 | 	sub	fp, #76
2bd08     34 12 06 F1 | 	add	arg01, #52
2bd0c     20 14 06 F6 | 	mov	arg02, #32
2bd10     0B 16 06 F6 | 	mov	arg03, #11
2bd14     98 00 A0 FD | 	call	#\builtin_bytefill_
2bd18     4C 4E 05 F1 | 	add	fp, #76
2bd1c     A7 FA 01 FB | 	rdlong	result1, fp
2bd20     34 FA 05 F1 | 	add	result1, #52
2bd24     FD 5C 48 FC | 	wrbyte	#46, result1
2bd28     A7 16 02 FB | 	rdlong	arg03, fp
2bd2c     3F 16 06 F1 | 	add	arg03, #63
2bd30     0B 21 48 FC | 	wrbyte	#16, arg03
2bd34     A7 12 02 FB | 	rdlong	arg01, fp
2bd38     4A 12 06 F1 | 	add	arg01, #74
2bd3c     0C 4E 05 F1 | 	add	fp, #12
2bd40     A7 14 02 FB | 	rdlong	arg02, fp
2bd44     09 15 62 FC | 	wrlong	arg02, arg01
2bd48     0C 4E 85 F1 | 	sub	fp, #12
2bd4c     A7 14 02 FB | 	rdlong	arg02, fp
2bd50     0A 13 02 F6 | 	mov	arg01, arg02
2bd54     34 14 06 F1 | 	add	arg02, #52
2bd58     04 4E 05 F1 | 	add	fp, #4
2bd5c     A7 16 02 FB | 	rdlong	arg03, fp
2bd60     50 4E 85 F1 | 	sub	fp, #80
2bd64     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2bd68     4C 4E 05 F1 | 	add	fp, #76
2bd6c     A7 14 02 FB | 	rdlong	arg02, fp
2bd70     0A 13 02 F6 | 	mov	arg01, arg02
2bd74     54 12 06 F1 | 	add	arg01, #84
2bd78     4C 4E 85 F1 | 	sub	fp, #76
2bd7c     34 14 06 F1 | 	add	arg02, #52
2bd80     20 16 06 F6 | 	mov	arg03, #32
2bd84     D0 2C BF FD | 	call	#__system____builtin_memmove
2bd88     4C 4E 05 F1 | 	add	fp, #76
2bd8c     A7 16 02 FB | 	rdlong	arg03, fp
2bd90     55 16 06 F1 | 	add	arg03, #85
2bd94     0B 5D 48 FC | 	wrbyte	#46, arg03
2bd98     38 4E 85 F1 | 	sub	fp, #56
2bd9c     A7 16 02 FB | 	rdlong	arg03, fp
2bda0     40 4E 05 F1 | 	add	fp, #64
2bda4     A7 16 62 FC | 	wrlong	arg03, fp
2bda8     08 4E 85 F1 | 	sub	fp, #8
2bdac     A7 14 02 FB | 	rdlong	arg02, fp
2bdb0     0A 13 02 F6 | 	mov	arg01, arg02
2bdb4     54 14 06 F1 | 	add	arg02, #84
2bdb8     4C 4E 85 F1 | 	sub	fp, #76
2bdbc     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2bdc0     4C 4E 05 F1 | 	add	fp, #76
2bdc4     A7 16 02 FB | 	rdlong	arg03, fp
2bdc8     03 16 06 F1 | 	add	arg03, #3
2bdcc     0B 03 48 FC | 	wrbyte	#1, arg03
2bdd0     40 4E 85 F1 | 	sub	fp, #64
2bdd4     A7 12 02 F6 | 	mov	arg01, fp
2bdd8     0C 4E 85 F1 | 	sub	fp, #12
2bddc     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2bde0     08 4E 05 F1 | 	add	fp, #8
2bde4     A7 FA 61 FC | 	wrlong	result1, fp
2bde8     08 4E 85 F1 | 	sub	fp, #8
2bdec                 | LR__4410
2bdec                 | LR__4411
2bdec     08 4E 05 F1 | 	add	fp, #8
2bdf0     A7 FA 09 FB | 	rdlong	result1, fp wz
2bdf4     08 4E 85 F1 | 	sub	fp, #8
2bdf8     88 00 90 5D |  if_ne	jmp	#LR__4412
2bdfc     28 4E 05 F1 | 	add	fp, #40
2be00     A7 12 02 FB | 	rdlong	arg01, fp
2be04     16 12 06 F1 | 	add	arg01, #22
2be08     30 4E 05 F1 | 	add	fp, #48
2be0c     A7 14 02 FB | 	rdlong	arg02, fp
2be10     09 15 62 FC | 	wrlong	arg02, arg01
2be14     0C 4E 85 F1 | 	sub	fp, #12
2be18     A7 12 02 FB | 	rdlong	arg01, fp
2be1c     24 4E 85 F1 | 	sub	fp, #36
2be20     A7 14 02 FB | 	rdlong	arg02, fp
2be24     28 4E 05 F1 | 	add	fp, #40
2be28     A7 16 02 FB | 	rdlong	arg03, fp
2be2c     50 4E 85 F1 | 	sub	fp, #80
2be30     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2be34     28 4E 05 F1 | 	add	fp, #40
2be38     A7 FA 01 FB | 	rdlong	result1, fp
2be3c     0B FA 05 F1 | 	add	result1, #11
2be40     FD 20 48 FC | 	wrbyte	#16, result1
2be44     24 4E 05 F1 | 	add	fp, #36
2be48     A7 FA 01 FB | 	rdlong	result1, fp
2be4c     03 FA 05 F1 | 	add	result1, #3
2be50     FD 02 48 FC | 	wrbyte	#1, result1
2be54     44 4E 85 F1 | 	sub	fp, #68
2be58     A7 FA 09 FB | 	rdlong	result1, fp wz
2be5c     08 4E 85 F1 | 	sub	fp, #8
2be60     3C 00 90 5D |  if_ne	jmp	#LR__4413
2be64     4C 4E 05 F1 | 	add	fp, #76
2be68     A7 12 02 FB | 	rdlong	arg01, fp
2be6c     4C 4E 85 F1 | 	sub	fp, #76
2be70     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2be74     08 4E 05 F1 | 	add	fp, #8
2be78     A7 FA 61 FC | 	wrlong	result1, fp
2be7c     08 4E 85 F1 | 	sub	fp, #8
2be80     1C 00 90 FD | 	jmp	#LR__4413
2be84                 | LR__4412
2be84     3C 4E 05 F1 | 	add	fp, #60
2be88     A7 12 02 F6 | 	mov	arg01, fp
2be8c     14 4E 05 F1 | 	add	fp, #20
2be90     A7 14 02 FB | 	rdlong	arg02, fp
2be94     50 4E 85 F1 | 	sub	fp, #80
2be98     00 16 06 F6 | 	mov	arg03, #0
2be9c     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2bea0                 | LR__4413
2bea0                 | LR__4414
2bea0                 | LR__4415
2bea0                 | ' 				remove_chain(&sobj, dcl, 0);
2bea0                 | ' 			}
2bea0                 | ' 		}
2bea0                 | ' 		;
2bea0                 | ' 	}
2bea0                 | ' 
2bea0                 | ' 	return res ;
2bea0     08 4E 05 F1 | 	add	fp, #8
2bea4     A7 FA 01 FB | 	rdlong	result1, fp
2bea8     08 4E 85 F1 | 	sub	fp, #8
2beac     A7 F0 03 F6 | 	mov	ptra, fp
2beb0     B2 00 A0 FD | 	call	#popregs_
2beb4                 | _fatfs_cc_f_mkdir_ret
2beb4     2D 00 64 FD | 	ret
2beb8                 | 
2beb8                 | _fatfs_cc_f_rename
2beb8     01 4A 05 F6 | 	mov	COUNT_, #1
2bebc     A8 00 A0 FD | 	call	#pushregs_
2bec0     9C F0 07 F1 | 	add	ptra, #156
2bec4     04 4E 05 F1 | 	add	fp, #4
2bec8     A7 12 62 FC | 	wrlong	arg01, fp
2becc     04 4E 05 F1 | 	add	fp, #4
2bed0     A7 14 62 FC | 	wrlong	arg02, fp
2bed4     A7 12 02 F6 | 	mov	arg01, fp
2bed8     08 4E 85 F1 | 	sub	fp, #8
2bedc     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2bee0     04 4E 05 F1 | 	add	fp, #4
2bee4     A7 12 02 F6 | 	mov	arg01, fp
2bee8     6C 4E 05 F1 | 	add	fp, #108
2beec     A7 14 02 F6 | 	mov	arg02, fp
2bef0     70 4E 85 F1 | 	sub	fp, #112
2bef4     02 16 06 F6 | 	mov	arg03, #2
2bef8     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2befc     0C 4E 05 F1 | 	add	fp, #12
2bf00     A7 FA 61 FC | 	wrlong	result1, fp
2bf04     0C 4E 85 F1 | 	sub	fp, #12
2bf08     00 FA 0D F2 | 	cmp	result1, #0 wz
2bf0c     44 03 90 5D |  if_ne	jmp	#LR__4433
2bf10     70 4E 05 F1 | 	add	fp, #112
2bf14     A7 16 02 FB | 	rdlong	arg03, fp
2bf18     60 4E 85 F1 | 	sub	fp, #96
2bf1c     A7 16 62 FC | 	wrlong	arg03, fp
2bf20     A7 12 02 F6 | 	mov	arg01, fp
2bf24     0C 4E 85 F1 | 	sub	fp, #12
2bf28     A7 14 02 FB | 	rdlong	arg02, fp
2bf2c     04 4E 85 F1 | 	sub	fp, #4
2bf30     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2bf34     0C 4E 05 F1 | 	add	fp, #12
2bf38     A7 FA 61 FC | 	wrlong	result1, fp
2bf3c     00 FA 4D F2 | 	cmps	result1, #0 wz
2bf40     0C 4E 85 F1 | 	sub	fp, #12
2bf44     1C 00 90 5D |  if_ne	jmp	#LR__4420
2bf48     3B 4E 05 F1 | 	add	fp, #59
2bf4c     A7 FA C1 FA | 	rdbyte	result1, fp
2bf50     3B 4E 85 F1 | 	sub	fp, #59
2bf54     A0 FA CD F7 | 	test	result1, #160 wz
2bf58     0C 4E 05 51 |  if_ne	add	fp, #12
2bf5c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2bf60     0C 4E 85 51 |  if_ne	sub	fp, #12
2bf64                 | LR__4420
2bf64     0C 4E 05 F1 | 	add	fp, #12
2bf68     A7 1E 0A FB | 	rdlong	local01, fp wz
2bf6c     0C 4E 85 F1 | 	sub	fp, #12
2bf70     E0 02 90 5D |  if_ne	jmp	#LR__4432
2bf74     74 4E 05 F1 | 	add	fp, #116
2bf78     A7 12 02 F6 | 	mov	arg01, fp
2bf7c     48 4E 85 F1 | 	sub	fp, #72
2bf80     A7 14 02 FB | 	rdlong	arg02, fp
2bf84     2C 4E 85 F1 | 	sub	fp, #44
2bf88     20 16 06 F6 | 	mov	arg03, #32
2bf8c     C8 2A BF FD | 	call	#__system____builtin_memmove
2bf90     40 4E 05 F1 | 	add	fp, #64
2bf94     A7 12 02 F6 | 	mov	arg01, fp
2bf98     30 4E 85 F1 | 	sub	fp, #48
2bf9c     A7 14 02 F6 | 	mov	arg02, fp
2bfa0     10 4E 85 F1 | 	sub	fp, #16
2bfa4     30 16 06 F6 | 	mov	arg03, #48
2bfa8     AC 2A BF FD | 	call	#__system____builtin_memmove
2bfac     40 4E 05 F1 | 	add	fp, #64
2bfb0     A7 12 02 F6 | 	mov	arg01, fp
2bfb4     38 4E 85 F1 | 	sub	fp, #56
2bfb8     A7 14 02 FB | 	rdlong	arg02, fp
2bfbc     08 4E 85 F1 | 	sub	fp, #8
2bfc0     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2bfc4     0C 4E 05 F1 | 	add	fp, #12
2bfc8     A7 FA 61 FC | 	wrlong	result1, fp
2bfcc     0C 4E 85 F1 | 	sub	fp, #12
2bfd0     00 FA 0D F2 | 	cmp	result1, #0 wz
2bfd4     4C 00 90 5D |  if_ne	jmp	#LR__4423
2bfd8     48 4E 05 F1 | 	add	fp, #72
2bfdc     A7 FA 01 FB | 	rdlong	result1, fp
2bfe0     30 4E 85 F1 | 	sub	fp, #48
2bfe4     A7 16 02 FB | 	rdlong	arg03, fp
2bfe8     18 4E 85 F1 | 	sub	fp, #24
2bfec     0B FB 09 F2 | 	cmp	result1, arg03 wz
2bff0     20 00 90 5D |  if_ne	jmp	#LR__4421
2bff4     50 4E 05 F1 | 	add	fp, #80
2bff8     A7 FA 01 FB | 	rdlong	result1, fp
2bffc     30 4E 85 F1 | 	sub	fp, #48
2c000     A7 16 02 FB | 	rdlong	arg03, fp
2c004     20 4E 85 F1 | 	sub	fp, #32
2c008     0B FB 09 F2 | 	cmp	result1, arg03 wz
2c00c     04 1E 06 A6 |  if_e	mov	local01, #4
2c010     04 00 90 AD |  if_e	jmp	#LR__4422
2c014                 | LR__4421
2c014     08 1E 06 F6 | 	mov	local01, #8
2c018                 | LR__4422
2c018     0C 4E 05 F1 | 	add	fp, #12
2c01c     A7 1E 62 FC | 	wrlong	local01, fp
2c020     0C 4E 85 F1 | 	sub	fp, #12
2c024                 | LR__4423
2c024     0C 4E 05 F1 | 	add	fp, #12
2c028     A7 1E 02 FB | 	rdlong	local01, fp
2c02c     0C 4E 85 F1 | 	sub	fp, #12
2c030     04 1E 0E F2 | 	cmp	local01, #4 wz
2c034     CC 01 90 5D |  if_ne	jmp	#LR__4429
2c038     40 4E 05 F1 | 	add	fp, #64
2c03c     A7 12 02 F6 | 	mov	arg01, fp
2c040     40 4E 85 F1 | 	sub	fp, #64
2c044     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2c048     0C 4E 05 F1 | 	add	fp, #12
2c04c     A7 FA 61 FC | 	wrlong	result1, fp
2c050     0C 4E 85 F1 | 	sub	fp, #12
2c054     00 FA 0D F2 | 	cmp	result1, #0 wz
2c058     A8 01 90 5D |  if_ne	jmp	#LR__4428
2c05c     5C 4E 05 F1 | 	add	fp, #92
2c060     A7 12 02 FB | 	rdlong	arg01, fp
2c064     38 4E 05 F1 | 	add	fp, #56
2c068     A7 12 62 FC | 	wrlong	arg01, fp
2c06c     0D 12 06 F1 | 	add	arg01, #13
2c070     20 4E 85 F1 | 	sub	fp, #32
2c074     A7 14 02 F6 | 	mov	arg02, fp
2c078     74 4E 85 F1 | 	sub	fp, #116
2c07c     0D 14 06 F1 | 	add	arg02, #13
2c080     13 16 06 F6 | 	mov	arg03, #19
2c084     D0 29 BF FD | 	call	#__system____builtin_memmove
2c088     94 4E 05 F1 | 	add	fp, #148
2c08c     A7 1E 02 FB | 	rdlong	local01, fp
2c090     15 4E 85 F1 | 	sub	fp, #21
2c094     A7 FA C1 FA | 	rdbyte	result1, fp
2c098     0B 1E 06 F1 | 	add	local01, #11
2c09c     0F FB 41 FC | 	wrbyte	result1, local01
2c0a0     15 4E 05 F1 | 	add	fp, #21
2c0a4     A7 1E 02 FB | 	rdlong	local01, fp
2c0a8     94 4E 85 F1 | 	sub	fp, #148
2c0ac     0B 1E 06 F1 | 	add	local01, #11
2c0b0     0F 1F C2 FA | 	rdbyte	local01, local01
2c0b4     10 1E CE F7 | 	test	local01, #16 wz
2c0b8     24 00 90 5D |  if_ne	jmp	#LR__4424
2c0bc     94 4E 05 F1 | 	add	fp, #148
2c0c0     A7 FA 01 FB | 	rdlong	result1, fp
2c0c4     FD 1E 02 F6 | 	mov	local01, result1
2c0c8     94 4E 85 F1 | 	sub	fp, #148
2c0cc     0B FA 05 F1 | 	add	result1, #11
2c0d0     FD FA C1 FA | 	rdbyte	result1, result1
2c0d4     20 FA 45 F5 | 	or	result1, #32
2c0d8     0B 1E 06 F1 | 	add	local01, #11
2c0dc     0F FB 41 FC | 	wrbyte	result1, local01
2c0e0                 | LR__4424
2c0e0     70 4E 05 F1 | 	add	fp, #112
2c0e4     A7 1E 02 FB | 	rdlong	local01, fp
2c0e8     03 1E 06 F1 | 	add	local01, #3
2c0ec     0F 03 48 FC | 	wrbyte	#1, local01
2c0f0     24 4E 05 F1 | 	add	fp, #36
2c0f4     A7 1E 02 FB | 	rdlong	local01, fp
2c0f8     94 4E 85 F1 | 	sub	fp, #148
2c0fc     0B 1E 06 F1 | 	add	local01, #11
2c100     0F 1F C2 FA | 	rdbyte	local01, local01
2c104     10 1E CE F7 | 	test	local01, #16 wz
2c108     F8 00 90 AD |  if_e	jmp	#LR__4427
2c10c     18 4E 05 F1 | 	add	fp, #24
2c110     A7 16 02 FB | 	rdlong	arg03, fp
2c114     30 4E 05 F1 | 	add	fp, #48
2c118     A7 1E 02 FB | 	rdlong	local01, fp
2c11c     48 4E 85 F1 | 	sub	fp, #72
2c120     0F 17 0A F2 | 	cmp	arg03, local01 wz
2c124     DC 00 90 AD |  if_e	jmp	#LR__4427
2c128     70 4E 05 F1 | 	add	fp, #112
2c12c     A7 12 02 FB | 	rdlong	arg01, fp
2c130     09 1F 02 F6 | 	mov	local01, arg01
2c134     24 4E 05 F1 | 	add	fp, #36
2c138     A7 14 02 FB | 	rdlong	arg02, fp
2c13c     94 4E 85 F1 | 	sub	fp, #148
2c140     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2c144     FD 14 02 F6 | 	mov	arg02, result1
2c148     0F 13 02 F6 | 	mov	arg01, local01
2c14c     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2c150     98 4E 05 F1 | 	add	fp, #152
2c154     A7 FA 61 FC | 	wrlong	result1, fp
2c158     00 FA 4D F2 | 	cmps	result1, #0 wz
2c15c     98 4E 85 F1 | 	sub	fp, #152
2c160     0C 4E 05 A1 |  if_e	add	fp, #12
2c164     A7 04 68 AC |  if_e	wrlong	#2, fp
2c168     0C 4E 85 A1 |  if_e	sub	fp, #12
2c16c     94 00 90 AD |  if_e	jmp	#LR__4426
2c170     70 4E 05 F1 | 	add	fp, #112
2c174     A7 12 02 FB | 	rdlong	arg01, fp
2c178     28 4E 05 F1 | 	add	fp, #40
2c17c     A7 14 02 FB | 	rdlong	arg02, fp
2c180     98 4E 85 F1 | 	sub	fp, #152
2c184     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2c188     0C 4E 05 F1 | 	add	fp, #12
2c18c     A7 FA 61 FC | 	wrlong	result1, fp
2c190     64 4E 05 F1 | 	add	fp, #100
2c194     A7 1E 02 FB | 	rdlong	local01, fp
2c198     54 1E 06 F1 | 	add	local01, #84
2c19c     24 4E 05 F1 | 	add	fp, #36
2c1a0     A7 1E 62 FC | 	wrlong	local01, fp
2c1a4     88 4E 85 F1 | 	sub	fp, #136
2c1a8     A7 1E 0A FB | 	rdlong	local01, fp wz
2c1ac     0C 4E 85 F1 | 	sub	fp, #12
2c1b0     50 00 90 5D |  if_ne	jmp	#LR__4425
2c1b4     94 4E 05 F1 | 	add	fp, #148
2c1b8     A7 1E 02 FB | 	rdlong	local01, fp
2c1bc     94 4E 85 F1 | 	sub	fp, #148
2c1c0     01 1E 06 F1 | 	add	local01, #1
2c1c4     0F 1F C2 FA | 	rdbyte	local01, local01
2c1c8     2E 1E 0E F2 | 	cmp	local01, #46 wz
2c1cc     34 00 90 5D |  if_ne	jmp	#LR__4425
2c1d0     70 4E 05 F1 | 	add	fp, #112
2c1d4     A7 12 02 FB | 	rdlong	arg01, fp
2c1d8     24 4E 05 F1 | 	add	fp, #36
2c1dc     A7 14 02 FB | 	rdlong	arg02, fp
2c1e0     4C 4E 85 F1 | 	sub	fp, #76
2c1e4     A7 16 02 FB | 	rdlong	arg03, fp
2c1e8     48 4E 85 F1 | 	sub	fp, #72
2c1ec     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2c1f0     70 4E 05 F1 | 	add	fp, #112
2c1f4     A7 1E 02 FB | 	rdlong	local01, fp
2c1f8     70 4E 85 F1 | 	sub	fp, #112
2c1fc     03 1E 06 F1 | 	add	local01, #3
2c200     0F 03 48 FC | 	wrbyte	#1, local01
2c204                 | LR__4425
2c204                 | LR__4426
2c204                 | LR__4427
2c204                 | LR__4428
2c204                 | LR__4429
2c204     0C 4E 05 F1 | 	add	fp, #12
2c208     A7 1E 0A FB | 	rdlong	local01, fp wz
2c20c     0C 4E 85 F1 | 	sub	fp, #12
2c210     40 00 90 5D |  if_ne	jmp	#LR__4431
2c214     10 4E 05 F1 | 	add	fp, #16
2c218     A7 12 02 F6 | 	mov	arg01, fp
2c21c     10 4E 85 F1 | 	sub	fp, #16
2c220     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2c224     0C 4E 05 F1 | 	add	fp, #12
2c228     A7 FA 61 FC | 	wrlong	result1, fp
2c22c     0C 4E 85 F1 | 	sub	fp, #12
2c230     00 FA 0D F2 | 	cmp	result1, #0 wz
2c234     1C 00 90 5D |  if_ne	jmp	#LR__4430
2c238     70 4E 05 F1 | 	add	fp, #112
2c23c     A7 12 02 FB | 	rdlong	arg01, fp
2c240     70 4E 85 F1 | 	sub	fp, #112
2c244     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2c248     0C 4E 05 F1 | 	add	fp, #12
2c24c     A7 FA 61 FC | 	wrlong	result1, fp
2c250     0C 4E 85 F1 | 	sub	fp, #12
2c254                 | LR__4430
2c254                 | LR__4431
2c254                 | LR__4432
2c254                 | LR__4433
2c254                 | ' 					res = sync_fs(fs);
2c254                 | ' 				}
2c254                 | ' 			}
2c254                 | ' 
2c254                 | ' 		}
2c254                 | ' 		;
2c254                 | ' 	}
2c254                 | ' 
2c254                 | ' 	return res ;
2c254     0C 4E 05 F1 | 	add	fp, #12
2c258     A7 FA 01 FB | 	rdlong	result1, fp
2c25c     0C 4E 85 F1 | 	sub	fp, #12
2c260     A7 F0 03 F6 | 	mov	ptra, fp
2c264     B2 00 A0 FD | 	call	#popregs_
2c268                 | _fatfs_cc_f_rename_ret
2c268     2D 00 64 FD | 	ret
2c26c                 | 
2c26c                 | _fatfs_cc_time
2c26c     00 4A 05 F6 | 	mov	COUNT_, #0
2c270     A8 00 A0 FD | 	call	#pushregs_
2c274     14 F0 07 F1 | 	add	ptra, #20
2c278     04 4E 05 F1 | 	add	fp, #4
2c27c     A7 12 62 FC | 	wrlong	arg01, fp
2c280     04 4E 05 F1 | 	add	fp, #4
2c284     A7 12 02 F6 | 	mov	arg01, fp
2c288     08 4E 85 F1 | 	sub	fp, #8
2c28c     00 14 06 F6 | 	mov	arg02, #0
2c290     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2c294     08 4E 05 F1 | 	add	fp, #8
2c298     A7 FA 01 FB | 	rdlong	result1, fp
2c29c     08 4E 05 F1 | 	add	fp, #8
2c2a0     A7 FA 61 FC | 	wrlong	result1, fp
2c2a4     0C 4E 85 F1 | 	sub	fp, #12
2c2a8     A7 FA 09 FB | 	rdlong	result1, fp wz
2c2ac     04 4E 85 F1 | 	sub	fp, #4
2c2b0     18 00 90 AD |  if_e	jmp	#LR__4440
2c2b4     04 4E 05 F1 | 	add	fp, #4
2c2b8     A7 FA 01 FB | 	rdlong	result1, fp
2c2bc     0C 4E 05 F1 | 	add	fp, #12
2c2c0     A7 14 02 FB | 	rdlong	arg02, fp
2c2c4     10 4E 85 F1 | 	sub	fp, #16
2c2c8     FD 14 62 FC | 	wrlong	arg02, result1
2c2cc                 | LR__4440
2c2cc                 | '         *tp = now;
2c2cc                 | '     return now;
2c2cc     10 4E 05 F1 | 	add	fp, #16
2c2d0     A7 FA 01 FB | 	rdlong	result1, fp
2c2d4     10 4E 85 F1 | 	sub	fp, #16
2c2d8     A7 F0 03 F6 | 	mov	ptra, fp
2c2dc     B2 00 A0 FD | 	call	#popregs_
2c2e0                 | _fatfs_cc_time_ret
2c2e0     2D 00 64 FD | 	ret
2c2e4                 | 
2c2e4                 | _fatfs_cc_mktime
2c2e4     06 4A 05 F6 | 	mov	COUNT_, #6
2c2e8     A8 00 A0 FD | 	call	#pushregs_
2c2ec     09 1F 02 F6 | 	mov	local01, arg01
2c2f0     14 1E 06 F1 | 	add	local01, #20
2c2f4     0F 13 02 FB | 	rdlong	arg01, local01
2c2f8     14 1E 86 F1 | 	sub	local01, #20
2c2fc     46 12 56 F2 | 	cmps	arg01, #70 wc
2c300                 | '                 return (time_t) -1;
2c300     01 FA 65 C6 |  if_b	neg	result1, #1
2c304     7C 01 90 CD |  if_b	jmp	#LR__4454
2c308     03 00 00 FF 
2c30c     6C 21 06 F6 | 	mov	local02, ##1900
2c310     14 1E 06 F1 | 	add	local01, #20
2c314     0F FB 01 FB | 	rdlong	result1, local01
2c318     FD 20 02 F1 | 	add	local02, result1
2c31c     08 1E 86 F1 | 	sub	local01, #8
2c320     0F 23 02 FB | 	rdlong	local03, local01
2c324     01 22 86 F1 | 	sub	local03, #1
2c328     04 1E 06 F1 | 	add	local01, #4
2c32c     0F 13 02 FB | 	rdlong	arg01, local01
2c330     10 1E 86 F1 | 	sub	local01, #16
2c334     02 12 66 F0 | 	shl	arg01, #2
2c338     02 00 00 FF 
2c33c     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2c340     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2c344     09 FB 01 FB | 	rdlong	result1, arg01
2c348     FD 22 02 F1 | 	add	local03, result1
2c34c     10 13 02 F6 | 	mov	arg01, local02
2c350     02 00 00 FF 
2c354     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2c358     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2c35c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c360     1C 00 90 AD |  if_e	jmp	#LR__4450
2c364     00 24 06 F6 | 	mov	local04, #0
2c368     10 1E 06 F1 | 	add	local01, #16
2c36c     0F FB 01 FB | 	rdlong	result1, local01
2c370     10 1E 86 F1 | 	sub	local01, #16
2c374     02 FA 55 F2 | 	cmps	result1, #2 wc
2c378     01 24 06 36 |  if_ae	mov	local04, #1
2c37c     04 00 90 FD | 	jmp	#LR__4451
2c380                 | LR__4450
2c380     00 24 06 F6 | 	mov	local04, #0
2c384                 | LR__4451
2c384     04 1E 06 F1 | 	add	local01, #4
2c388     0F FB 01 FB | 	rdlong	result1, local01
2c38c     04 1E 86 F1 | 	sub	local01, #4
2c390     0F 27 02 FB | 	rdlong	local05, local01
2c394     08 1E 06 F1 | 	add	local01, #8
2c398     0F 13 02 FB | 	rdlong	arg01, local01
2c39c     07 00 00 FF 
2c3a0     10 12 06 FD | 	qmul	arg01, ##3600
2c3a4     12 23 02 F1 | 	add	local03, local04
2c3a8     FD 24 02 F6 | 	mov	local04, result1
2c3ac     04 24 66 F0 | 	shl	local04, #4
2c3b0     FD 24 82 F1 | 	sub	local04, result1
2c3b4     02 24 66 F0 | 	shl	local04, #2
2c3b8     12 27 02 F1 | 	add	local05, local04
2c3bc     08 1E 86 F1 | 	sub	local01, #8
2c3c0     18 24 62 FD | 	getqx	local04
2c3c4     A8 00 00 FF 
2c3c8     80 23 06 FD | 	qmul	local03, ##86400
2c3cc     12 27 02 F1 | 	add	local05, local04
2c3d0     10 23 02 F6 | 	mov	local03, local02
2c3d4     03 00 00 FF 
2c3d8     B2 23 86 F1 | 	sub	local03, ##1970
2c3dc     18 24 62 FD | 	getqx	local04
2c3e0     99 F0 00 FF 
2c3e4     80 23 06 FD | 	qmul	local03, ##31536000
2c3e8     12 27 02 F1 | 	add	local05, local04
2c3ec     10 23 02 F6 | 	mov	local03, local02
2c3f0     03 00 00 FF 
2c3f4     B1 23 86 F1 | 	sub	local03, ##1969
2c3f8     11 29 52 F6 | 	abs	local06, local03 wc
2c3fc     02 28 46 F0 | 	shr	local06, #2
2c400     14 29 82 F6 | 	negc	local06, local06
2c404     03 00 00 FF 
2c408     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2c40c     18 24 62 FD | 	getqx	local04
2c410     12 27 02 F1 | 	add	local05, local04
2c414     18 00 90 CD |  if_b	jmp	#LR__4452
2c418     03 00 00 FF 
2c41c     D0 21 86 F1 | 	sub	local02, ##2000
2c420     10 25 52 F6 | 	abs	local04, local02 wc
2c424     64 24 16 FD | 	qdiv	local04, #100
2c428     18 24 62 FD | 	getqx	local04
2c42c     12 29 A2 F3 | 	sumnc	local06, local04
2c430                 | LR__4452
2c430     A8 00 00 FF 
2c434     80 29 06 FD | 	qmul	local06, ##86400
2c438     18 28 62 FD | 	getqx	local06
2c43c     14 27 02 F1 | 	add	local05, local06
2c440     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2c444     02 00 00 FF 
2c448     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2c44c     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2c450     14 27 02 F1 | 	add	local05, local06
2c454     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2c458     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2c45c     02 00 00 FF 
2c460     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2c464     01 22 0E F2 | 	cmp	local03, #1 wz
2c468     14 00 90 5D |  if_ne	jmp	#LR__4453
2c46c     0F 13 02 F6 | 	mov	arg01, local01
2c470     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2c474     00 FA 0D F2 | 	cmp	result1, #0 wz
2c478     07 00 00 5F 
2c47c     10 26 86 51 |  if_ne	sub	local05, ##3600
2c480                 | LR__4453
2c480                 | '                 s -=  (3600L) ;
2c480                 | ' 
2c480                 | '         return s;
2c480     13 FB 01 F6 | 	mov	result1, local05
2c484                 | LR__4454
2c484     A7 F0 03 F6 | 	mov	ptra, fp
2c488     B2 00 A0 FD | 	call	#popregs_
2c48c                 | _fatfs_cc_mktime_ret
2c48c     2D 00 64 FD | 	ret
2c490                 | 
2c490                 | _fatfs_cc__gmtime_r
2c490     03 4A 05 F6 | 	mov	COUNT_, #3
2c494     A8 00 A0 FD | 	call	#pushregs_
2c498     09 1F 02 FB | 	rdlong	local01, arg01
2c49c     A8 00 00 FF 
2c4a0     80 1F 16 FD | 	qdiv	local01, ##86400
2c4a4     18 FA 61 FD | 	getqx	result1
2c4a8     04 FA 05 F1 | 	add	result1, #4
2c4ac     07 FA 15 FD | 	qdiv	result1, #7
2c4b0     18 14 06 F1 | 	add	arg02, #24
2c4b4     D1 7F 27 FF 
2c4b8     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2c4bc     D1 7F 27 3F 
2c4c0     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2c4c4     03 00 00 3F 
2c4c8     DC 21 06 36 |  if_ae	mov	local02, ##2012
2c4cc     03 00 00 CF 
2c4d0     B2 21 06 C6 |  if_b	mov	local02, ##1970
2c4d4                 | ' 	  year = 1970;
2c4d4                 | ' 	}
2c4d4                 | ' 
2c4d4                 | ' 	for(;;) {
2c4d4     19 FA 61 FD | 	getqy	result1
2c4d8     0A FB 61 FC | 	wrlong	result1, arg02
2c4dc     18 14 86 F1 | 	sub	arg02, #24
2c4e0                 | LR__4460
2c4e0     10 13 02 F6 | 	mov	arg01, local02
2c4e4     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2c4e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c4ec     42 F1 00 5F 
2c4f0     00 23 06 56 |  if_ne	mov	local03, ##31622400
2c4f4     99 F0 00 AF 
2c4f8     80 23 06 A6 |  if_e	mov	local03, ##31536000
2c4fc     11 1F 12 F2 | 	cmp	local01, local03 wc
2c500                 | ' 	    break;
2c500     01 20 06 31 |  if_ae	add	local02, #1
2c504     11 1F 82 31 |  if_ae	sub	local01, local03
2c508     D4 FF 9F 3D |  if_ae	jmp	#LR__4460
2c50c     A8 00 00 FF 
2c510     80 1F 16 FD | 	qdiv	local01, ##86400
2c514     10 23 02 F6 | 	mov	local03, local02
2c518     03 00 00 FF 
2c51c     6C 23 86 F1 | 	sub	local03, ##1900
2c520     14 14 06 F1 | 	add	arg02, #20
2c524     0A 23 62 FC | 	wrlong	local03, arg02
2c528     08 14 06 F1 | 	add	arg02, #8
2c52c     10 13 02 F6 | 	mov	arg01, local02
2c530     18 20 62 FD | 	getqx	local02
2c534     0A 21 62 FC | 	wrlong	local02, arg02
2c538     1C 14 86 F1 | 	sub	arg02, #28
2c53c     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2c540     00 FA 0D F2 | 	cmp	result1, #0 wz
2c544     1D 22 06 56 |  if_ne	mov	local03, #29
2c548     1C 22 06 A6 |  if_e	mov	local03, #28
2c54c     02 00 00 FF 
2c550     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2c554     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2c558     02 00 00 FF 
2c55c     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2c560                 | ' 
2c560                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2c560                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2c560     00 12 06 F6 | 	mov	arg01, #0
2c564     97 2A 48 FB | 	callpa	#(@LR__4462-@LR__4461)>>2,fcache_load_ptr_
2c568                 | LR__4461
2c568     09 23 02 F6 | 	mov	local03, arg01
2c56c     02 22 66 F0 | 	shl	local03, #2
2c570     02 00 00 FF 
2c574     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2c578     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2c57c     11 23 02 FB | 	rdlong	local03, local03
2c580     11 21 52 F2 | 	cmps	local02, local03 wc
2c584     02 00 00 FF 
2c588     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2c58c     2C 00 90 CD |  if_b	jmp	#LR__4463
2c590     09 23 02 F6 | 	mov	local03, arg01
2c594     02 22 66 F0 | 	shl	local03, #2
2c598     02 00 00 FF 
2c59c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2c5a0     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2c5a4     11 23 02 FB | 	rdlong	local03, local03
2c5a8     11 21 82 F1 | 	sub	local02, local03
2c5ac     01 12 06 F1 | 	add	arg01, #1
2c5b0     02 00 00 FF 
2c5b4     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2c5b8     AC FF 9F FD | 	jmp	#LR__4461
2c5bc                 | LR__4462
2c5bc                 | LR__4463
2c5bc     A8 00 00 FF 
2c5c0     80 1F 16 FD | 	qdiv	local01, ##86400
2c5c4     10 14 06 F1 | 	add	arg02, #16
2c5c8     0A 13 62 FC | 	wrlong	arg01, arg02
2c5cc     01 20 06 F1 | 	add	local02, #1
2c5d0     04 14 86 F1 | 	sub	arg02, #4
2c5d4     0A 21 62 FC | 	wrlong	local02, arg02
2c5d8     19 1E 62 FD | 	getqy	local01
2c5dc     07 00 00 FF 
2c5e0     10 1E 16 FD | 	qdiv	local01, ##3600
2c5e4     18 22 62 FD | 	getqx	local03
2c5e8     07 00 00 FF 
2c5ec     10 1E 16 FD | 	qdiv	local01, ##3600
2c5f0     04 14 86 F1 | 	sub	arg02, #4
2c5f4     0A 23 62 FC | 	wrlong	local03, arg02
2c5f8     19 1E 62 FD | 	getqy	local01
2c5fc     3C 1E 16 FD | 	qdiv	local01, #60
2c600     18 22 62 FD | 	getqx	local03
2c604     3C 1E 16 FD | 	qdiv	local01, #60
2c608     04 14 86 F1 | 	sub	arg02, #4
2c60c     0A 23 62 FC | 	wrlong	local03, arg02
2c610     04 14 86 F1 | 	sub	arg02, #4
2c614                 | '         stm->tm_isdst = 0;
2c614                 | ' 
2c614                 | ' ;
2c614                 | '         return stm;
2c614     0A FB 01 F6 | 	mov	result1, arg02
2c618     19 22 62 FD | 	getqy	local03
2c61c     0A 23 62 FC | 	wrlong	local03, arg02
2c620     20 14 06 F1 | 	add	arg02, #32
2c624     0A 01 68 FC | 	wrlong	#0, arg02
2c628     A7 F0 03 F6 | 	mov	ptra, fp
2c62c     B2 00 A0 FD | 	call	#popregs_
2c630                 | _fatfs_cc__gmtime_r_ret
2c630     2D 00 64 FD | 	ret
2c634                 | 
2c634                 | _fatfs_cc__tzset
2c634     70 01 00 FF 
2c638     79 13 06 F6 | 	mov	arg01, ##@LR__4775
2c63c     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2c640     FD 12 02 F6 | 	mov	arg01, result1
2c644     02 00 00 FF 
2c648     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2c64c     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2c650     02 00 00 FF 
2c654     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2c658     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2c65c     02 00 00 FF 
2c660     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2c664     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2c668     02 00 00 FF 
2c66c     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2c670                 | _fatfs_cc__tzset_ret
2c670     2D 00 64 FD | 	ret
2c674                 | 
2c674                 | _fatfs_cc_getenv
2c674     06 4A 05 F6 | 	mov	COUNT_, #6
2c678     A8 00 A0 FD | 	call	#pushregs_
2c67c     09 1F 02 F6 | 	mov	local01, arg01
2c680     09 21 02 F6 | 	mov	local02, arg01
2c684     97 06 48 FB | 	callpa	#(@LR__4471-@LR__4470)>>2,fcache_load_ptr_
2c688                 | LR__4470
2c688     10 FB C9 FA | 	rdbyte	result1, local02 wz
2c68c     01 20 06 51 |  if_ne	add	local02, #1
2c690     F4 FF 9F 5D |  if_ne	jmp	#LR__4470
2c694                 | LR__4471
2c694     09 21 82 F1 | 	sub	local02, arg01
2c698     10 FB 01 F6 | 	mov	result1, local02
2c69c     02 00 00 FF 
2c6a0     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2c6a4     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2c6a8     02 00 00 FF 
2c6ac     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2c6b0                 | '             return 0;
2c6b0     00 FA 05 A6 |  if_e	mov	result1, #0
2c6b4     5C 00 90 AD |  if_e	jmp	#LR__4474
2c6b8                 | ' 
2c6b8                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2c6b8     02 00 00 FF 
2c6bc     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2c6c0     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2c6c4     02 00 00 FF 
2c6c8     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2c6cc                 | LR__4472
2c6cc     11 25 0A FB | 	rdlong	local04, local03 wz
2c6d0     3C 00 90 AD |  if_e	jmp	#LR__4473
2c6d4     12 13 02 F6 | 	mov	arg01, local04
2c6d8     0F 15 02 F6 | 	mov	arg02, local01
2c6dc     10 17 02 F6 | 	mov	arg03, local02
2c6e0     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2c6e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c6e8     10 27 02 A6 |  if_e	mov	local05, local02
2c6ec     12 27 02 A1 |  if_e	add	local05, local04
2c6f0     13 29 C2 AA |  if_e	rdbyte	local06, local05
2c6f4     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2c6f8                 | ' 			return name+len+1;
2c6f8     10 25 02 A1 |  if_e	add	local04, local02
2c6fc     01 24 06 A1 |  if_e	add	local04, #1
2c700     12 FB 01 A6 |  if_e	mov	result1, local04
2c704     0C 00 90 AD |  if_e	jmp	#LR__4474
2c708     04 22 06 F1 | 	add	local03, #4
2c70c     BC FF 9F FD | 	jmp	#LR__4472
2c710                 | LR__4473
2c710                 | ' 	}
2c710                 | ' 	return 0;
2c710     00 FA 05 F6 | 	mov	result1, #0
2c714                 | LR__4474
2c714     A7 F0 03 F6 | 	mov	ptra, fp
2c718     B2 00 A0 FD | 	call	#popregs_
2c71c                 | _fatfs_cc_getenv_ret
2c71c     2D 00 64 FD | 	ret
2c720                 | 
2c720                 | _fatfs_cc__get_fattime
2c720     00 4A 05 F6 | 	mov	COUNT_, #0
2c724     A8 00 A0 FD | 	call	#pushregs_
2c728     34 F0 07 F1 | 	add	ptra, #52
2c72c     00 12 06 F6 | 	mov	arg01, #0
2c730     38 FB BF FD | 	call	#_fatfs_cc_time
2c734     04 4E 05 F1 | 	add	fp, #4
2c738     A7 FA 61 FC | 	wrlong	result1, fp
2c73c     A7 12 02 F6 | 	mov	arg01, fp
2c740     0C 4E 05 F1 | 	add	fp, #12
2c744     A7 14 02 F6 | 	mov	arg02, fp
2c748     10 4E 85 F1 | 	sub	fp, #16
2c74c     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2c750     24 4E 05 F1 | 	add	fp, #36
2c754     A7 14 02 FB | 	rdlong	arg02, fp
2c758     50 14 86 F1 | 	sub	arg02, #80
2c75c     09 14 66 F0 | 	shl	arg02, #9
2c760     04 4E 85 F1 | 	sub	fp, #4
2c764     A7 FA 01 FB | 	rdlong	result1, fp
2c768     01 FA 05 F1 | 	add	result1, #1
2c76c     05 FA 65 F0 | 	shl	result1, #5
2c770     FD 14 42 F5 | 	or	arg02, result1
2c774     04 4E 85 F1 | 	sub	fp, #4
2c778     A7 FA 01 FB | 	rdlong	result1, fp
2c77c     FD 14 42 F5 | 	or	arg02, result1
2c780     14 4E 85 F1 | 	sub	fp, #20
2c784     A7 14 62 FC | 	wrlong	arg02, fp
2c788     10 4E 05 F1 | 	add	fp, #16
2c78c     A7 14 02 FB | 	rdlong	arg02, fp
2c790     0B 14 66 F0 | 	shl	arg02, #11
2c794     04 4E 85 F1 | 	sub	fp, #4
2c798     A7 FA 01 FB | 	rdlong	result1, fp
2c79c     05 FA 65 F0 | 	shl	result1, #5
2c7a0     FD 14 42 F5 | 	or	arg02, result1
2c7a4     04 4E 85 F1 | 	sub	fp, #4
2c7a8     A7 FA 01 FB | 	rdlong	result1, fp
2c7ac     FD 14 42 F5 | 	or	arg02, result1
2c7b0     04 4E 85 F1 | 	sub	fp, #4
2c7b4     A7 14 62 FC | 	wrlong	arg02, fp
2c7b8                 | ' 
2c7b8                 | '     now = time(0);
2c7b8                 | '     _gmtime_r (&now, &date);
2c7b8                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2c7b8                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2c7b8                 | '     return (ffdate << 16) | fftime;
2c7b8     04 4E 85 F1 | 	sub	fp, #4
2c7bc     A7 FA 01 FB | 	rdlong	result1, fp
2c7c0     10 FA 65 F0 | 	shl	result1, #16
2c7c4     08 4E 85 F1 | 	sub	fp, #8
2c7c8     0A FB 41 F5 | 	or	result1, arg02
2c7cc     A7 F0 03 F6 | 	mov	ptra, fp
2c7d0     B2 00 A0 FD | 	call	#popregs_
2c7d4                 | _fatfs_cc__get_fattime_ret
2c7d4     2D 00 64 FD | 	ret
2c7d8                 | 
2c7d8                 | _fatfs_cc_unixtime_0904
2c7d8     00 4A 05 F6 | 	mov	COUNT_, #0
2c7dc     A8 00 A0 FD | 	call	#pushregs_
2c7e0     34 F0 07 F1 | 	add	ptra, #52
2c7e4     04 4E 05 F1 | 	add	fp, #4
2c7e8     A7 12 62 FC | 	wrlong	arg01, fp
2c7ec     04 4E 05 F1 | 	add	fp, #4
2c7f0     A7 14 62 FC | 	wrlong	arg02, fp
2c7f4     04 4E 85 F1 | 	sub	fp, #4
2c7f8     A7 14 02 FB | 	rdlong	arg02, fp
2c7fc     09 14 46 F0 | 	shr	arg02, #9
2c800     7F 14 06 F5 | 	and	arg02, #127
2c804     50 FA 05 F6 | 	mov	result1, #80
2c808     0A FB 01 F1 | 	add	result1, arg02
2c80c     20 4E 05 F1 | 	add	fp, #32
2c810     A7 FA 61 FC | 	wrlong	result1, fp
2c814     20 4E 85 F1 | 	sub	fp, #32
2c818     A7 FA 01 FB | 	rdlong	result1, fp
2c81c     05 FA 45 F0 | 	shr	result1, #5
2c820     FD FA 41 F8 | 	getnib	result1, result1, #0
2c824     01 FA 85 F1 | 	sub	result1, #1
2c828     1C 4E 05 F1 | 	add	fp, #28
2c82c     A7 FA 61 FC | 	wrlong	result1, fp
2c830     1C 4E 85 F1 | 	sub	fp, #28
2c834     A7 FA 01 FB | 	rdlong	result1, fp
2c838     1F FA 05 F5 | 	and	result1, #31
2c83c     18 4E 05 F1 | 	add	fp, #24
2c840     A7 FA 61 FC | 	wrlong	result1, fp
2c844     14 4E 85 F1 | 	sub	fp, #20
2c848     A7 FA 01 FB | 	rdlong	result1, fp
2c84c     0B FA 45 F0 | 	shr	result1, #11
2c850     1F FA 05 F5 | 	and	result1, #31
2c854     10 4E 05 F1 | 	add	fp, #16
2c858     A7 FA 61 FC | 	wrlong	result1, fp
2c85c     10 4E 85 F1 | 	sub	fp, #16
2c860     A7 FA 01 FB | 	rdlong	result1, fp
2c864     05 FA 45 F0 | 	shr	result1, #5
2c868     3F FA 05 F5 | 	and	result1, #63
2c86c     0C 4E 05 F1 | 	add	fp, #12
2c870     A7 FA 61 FC | 	wrlong	result1, fp
2c874     0C 4E 85 F1 | 	sub	fp, #12
2c878     A7 14 02 FB | 	rdlong	arg02, fp
2c87c     1F 14 06 F5 | 	and	arg02, #31
2c880     01 14 66 F0 | 	shl	arg02, #1
2c884     08 4E 05 F1 | 	add	fp, #8
2c888     A7 14 62 FC | 	wrlong	arg02, fp
2c88c     A7 12 02 F6 | 	mov	arg01, fp
2c890     10 4E 85 F1 | 	sub	fp, #16
2c894     4C FA BF FD | 	call	#_fatfs_cc_mktime
2c898     0C 4E 05 F1 | 	add	fp, #12
2c89c     A7 FA 61 FC | 	wrlong	result1, fp
2c8a0                 | ' 
2c8a0                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2c8a0                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2c8a0                 | '     date.tm_mday = (dosdate & 0x1f);
2c8a0                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2c8a0                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2c8a0                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2c8a0                 | ' 
2c8a0                 | '     t = mktime(&date);
2c8a0                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2c8a0                 | '     return t;
2c8a0     0C 4E 85 F1 | 	sub	fp, #12
2c8a4     A7 F0 03 F6 | 	mov	ptra, fp
2c8a8     B2 00 A0 FD | 	call	#popregs_
2c8ac                 | _fatfs_cc_unixtime_0904_ret
2c8ac     2D 00 64 FD | 	ret
2c8b0                 | 
2c8b0                 | _fatfs_cc__set_dos_error_0906
2c8b0     09 01 02 F6 | 	mov	_var01, arg01
2c8b4                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2c8b4                 | '     switch (derr) {
2c8b4     14 00 26 F3 | 	fle	_var01, #20
2c8b8     30 00 62 FD | 	jmprel	_var01
2c8bc                 | LR__4480
2c8bc     50 00 90 FD | 	jmp	#LR__4481
2c8c0     84 00 90 FD | 	jmp	#LR__4495
2c8c4     80 00 90 FD | 	jmp	#LR__4496
2c8c8     7C 00 90 FD | 	jmp	#LR__4497
2c8cc     48 00 90 FD | 	jmp	#LR__4482
2c8d0     44 00 90 FD | 	jmp	#LR__4483
2c8d4     40 00 90 FD | 	jmp	#LR__4484
2c8d8     44 00 90 FD | 	jmp	#LR__4485
2c8dc     48 00 90 FD | 	jmp	#LR__4487
2c8e0     54 00 90 FD | 	jmp	#LR__4490
2c8e4     38 00 90 FD | 	jmp	#LR__4486
2c8e8     4C 00 90 FD | 	jmp	#LR__4491
2c8ec     48 00 90 FD | 	jmp	#LR__4492
2c8f0     44 00 90 FD | 	jmp	#LR__4493
2c8f4     50 00 90 FD | 	jmp	#LR__4498
2c8f8     4C 00 90 FD | 	jmp	#LR__4498
2c8fc     48 00 90 FD | 	jmp	#LR__4498
2c900     2C 00 90 FD | 	jmp	#LR__4488
2c904     38 00 90 FD | 	jmp	#LR__4494
2c908     2C 00 90 FD | 	jmp	#LR__4489
2c90c     38 00 90 FD | 	jmp	#LR__4498
2c910                 | LR__4481
2c910     00 02 06 F6 | 	mov	_var02, #0
2c914                 | '         r = 0;
2c914                 | '         break;
2c914     34 00 90 FD | 	jmp	#LR__4499
2c918                 | LR__4482
2c918                 | LR__4483
2c918                 | LR__4484
2c918     04 02 06 F6 | 	mov	_var02, #4
2c91c                 | '         r =  4 ;
2c91c                 | '         break;
2c91c     2C 00 90 FD | 	jmp	#LR__4499
2c920                 | LR__4485
2c920                 | LR__4486
2c920     06 02 06 F6 | 	mov	_var02, #6
2c924                 | '         r =  6 ;
2c924                 | '         break;
2c924     24 00 90 FD | 	jmp	#LR__4499
2c928                 | LR__4487
2c928     09 02 06 F6 | 	mov	_var02, #9
2c92c                 | '         r =  9 ;
2c92c                 | '         break;
2c92c     1C 00 90 FD | 	jmp	#LR__4499
2c930                 | LR__4488
2c930     07 02 06 F6 | 	mov	_var02, #7
2c934                 | '         r =  7 ;
2c934                 | '         break;
2c934     14 00 90 FD | 	jmp	#LR__4499
2c938                 | LR__4489
2c938                 | LR__4490
2c938                 | LR__4491
2c938                 | LR__4492
2c938                 | LR__4493
2c938     0A 02 06 F6 | 	mov	_var02, #10
2c93c                 | '         r =  10 ;
2c93c                 | '         break;
2c93c     0C 00 90 FD | 	jmp	#LR__4499
2c940                 | LR__4494
2c940     0B 02 06 F6 | 	mov	_var02, #11
2c944                 | '         r =  11 ;
2c944                 | '         break;
2c944     04 00 90 FD | 	jmp	#LR__4499
2c948                 | LR__4495
2c948                 | LR__4496
2c948                 | LR__4497
2c948                 | LR__4498
2c948     0C 02 06 F6 | 	mov	_var02, #12
2c94c                 | '         r =  12 ;
2c94c                 | '         break;
2c94c                 | LR__4499
2c94c                 | '     }
2c94c                 | '     return _seterror(r);
2c94c     00 02 4E F2 | 	cmps	_var02, #0 wz
2c950     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c954     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2c958     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c95c     01 FA 65 56 |  if_ne	neg	result1, #1
2c960     00 FA 05 A6 |  if_e	mov	result1, #0
2c964                 | _fatfs_cc__set_dos_error_0906_ret
2c964     2D 00 64 FD | 	ret
2c968                 | 
2c968                 | _fatfs_cc_v_creat
2c968     04 4A 05 F6 | 	mov	COUNT_, #4
2c96c     A8 00 A0 FD | 	call	#pushregs_
2c970     09 1F 02 F6 | 	mov	local01, arg01
2c974     0A 21 02 F6 | 	mov	local02, arg02
2c978     03 00 00 FF 
2c97c     3C 12 06 F6 | 	mov	arg01, ##1596
2c980                 | '     return _gc_alloc(size);
2c980     10 14 06 F6 | 	mov	arg02, #16
2c984     2C 60 BF FD | 	call	#__system___gc_doalloc
2c988     FD 22 0A F6 | 	mov	local03, result1 wz
2c98c                 | '       return _seterror( 7 );
2c98c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c990     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2c994     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c998     01 FA 65 A6 |  if_e	neg	result1, #1
2c99c     58 00 90 AD |  if_e	jmp	#LR__4501
2c9a0     11 13 02 F6 | 	mov	arg01, local03
2c9a4     00 14 06 F6 | 	mov	arg02, #0
2c9a8     03 00 00 FF 
2c9ac     3C 16 06 F6 | 	mov	arg03, ##1596
2c9b0     98 00 A0 FD | 	call	#\builtin_bytefill_
2c9b4     02 00 00 FF 
2c9b8     14 22 06 F1 | 	add	local03, ##1044
2c9bc     11 13 02 F6 | 	mov	arg01, local03
2c9c0     02 00 00 FF 
2c9c4     14 22 86 F1 | 	sub	local03, ##1044
2c9c8     10 15 02 F6 | 	mov	arg02, local02
2c9cc     07 16 06 F6 | 	mov	arg03, #7
2c9d0     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2c9d4     FD 24 0A F6 | 	mov	local04, result1 wz
2c9d8     14 00 90 AD |  if_e	jmp	#LR__4500
2c9dc     11 13 02 F6 | 	mov	arg01, local03
2c9e0                 | '     return _gc_free(ptr);
2c9e0     DC 60 BF FD | 	call	#__system___gc_free
2c9e4                 | '     free(f);
2c9e4                 | '     return _set_dos_error(r);
2c9e4     12 13 02 F6 | 	mov	arg01, local04
2c9e8     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2c9ec     08 00 90 FD | 	jmp	#LR__4501
2c9f0                 | LR__4500
2c9f0     0F 23 62 FC | 	wrlong	local03, local01
2c9f4                 | '   }
2c9f4                 | '   fil->vfsdata = f;
2c9f4                 | '   return 0;
2c9f4     00 FA 05 F6 | 	mov	result1, #0
2c9f8                 | LR__4501
2c9f8     A7 F0 03 F6 | 	mov	ptra, fp
2c9fc     B2 00 A0 FD | 	call	#popregs_
2ca00                 | _fatfs_cc_v_creat_ret
2ca00     2D 00 64 FD | 	ret
2ca04                 | 
2ca04                 | _fatfs_cc_v_close
2ca04     02 4A 05 F6 | 	mov	COUNT_, #2
2ca08     A8 00 A0 FD | 	call	#pushregs_
2ca0c     09 1F 02 FB | 	rdlong	local01, arg01
2ca10     02 00 00 FF 
2ca14     14 1E 06 F1 | 	add	local01, ##1044
2ca18     0F 13 02 F6 | 	mov	arg01, local01
2ca1c     02 00 00 FF 
2ca20     14 1E 86 F1 | 	sub	local01, ##1044
2ca24     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2ca28     FD 20 02 F6 | 	mov	local02, result1
2ca2c     0F 13 02 F6 | 	mov	arg01, local01
2ca30                 | '     return _gc_free(ptr);
2ca30     8C 60 BF FD | 	call	#__system___gc_free
2ca34                 | '     FAT_FIL *f = fil->vfsdata;
2ca34                 | '     r=f_close(&f->fil);
2ca34                 | '     free(f);
2ca34                 | '     return _set_dos_error(r);
2ca34     10 13 02 F6 | 	mov	arg01, local02
2ca38     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2ca3c     A7 F0 03 F6 | 	mov	ptra, fp
2ca40     B2 00 A0 FD | 	call	#popregs_
2ca44                 | _fatfs_cc_v_close_ret
2ca44     2D 00 64 FD | 	ret
2ca48                 | 
2ca48                 | _fatfs_cc_v_opendir
2ca48     04 4A 05 F6 | 	mov	COUNT_, #4
2ca4c     A8 00 A0 FD | 	call	#pushregs_
2ca50     09 1F 02 F6 | 	mov	local01, arg01
2ca54     0A 21 02 F6 | 	mov	local02, arg02
2ca58     30 12 06 F6 | 	mov	arg01, #48
2ca5c                 | '     return _gc_alloc(size);
2ca5c     10 14 06 F6 | 	mov	arg02, #16
2ca60     50 5F BF FD | 	call	#__system___gc_doalloc
2ca64     FD 22 0A F6 | 	mov	local03, result1 wz
2ca68                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ca68                 | '       return _seterror( 7 );
2ca68     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ca6c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2ca70     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ca74     01 FA 65 A6 |  if_e	neg	result1, #1
2ca78     34 00 90 AD |  if_e	jmp	#LR__4511
2ca7c     10 15 02 F6 | 	mov	arg02, local02
2ca80     11 13 02 F6 | 	mov	arg01, local03
2ca84     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2ca88     FD 24 0A F6 | 	mov	local04, result1 wz
2ca8c     14 00 90 AD |  if_e	jmp	#LR__4510
2ca90     11 13 02 F6 | 	mov	arg01, local03
2ca94                 | '     return _gc_free(ptr);
2ca94     28 60 BF FD | 	call	#__system___gc_free
2ca98                 | '         free(f);
2ca98                 | '         return _set_dos_error(r);
2ca98     12 13 02 F6 | 	mov	arg01, local04
2ca9c     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2caa0     0C 00 90 FD | 	jmp	#LR__4511
2caa4                 | LR__4510
2caa4     04 1E 06 F1 | 	add	local01, #4
2caa8     0F 23 62 FC | 	wrlong	local03, local01
2caac                 | '     }
2caac                 | '     dir->vfsdata = f;
2caac                 | '     return 0;
2caac     00 FA 05 F6 | 	mov	result1, #0
2cab0                 | LR__4511
2cab0     A7 F0 03 F6 | 	mov	ptra, fp
2cab4     B2 00 A0 FD | 	call	#popregs_
2cab8                 | _fatfs_cc_v_opendir_ret
2cab8     2D 00 64 FD | 	ret
2cabc                 | 
2cabc                 | _fatfs_cc_v_closedir
2cabc     02 4A 05 F6 | 	mov	COUNT_, #2
2cac0     A8 00 A0 FD | 	call	#pushregs_
2cac4     04 12 06 F1 | 	add	arg01, #4
2cac8     09 1F 02 FB | 	rdlong	local01, arg01
2cacc     0F 13 02 F6 | 	mov	arg01, local01
2cad0     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2cad4     FD 20 02 F6 | 	mov	local02, result1
2cad8     0F 13 02 F6 | 	mov	arg01, local01
2cadc                 | '     return _gc_free(ptr);
2cadc     E0 5F BF FD | 	call	#__system___gc_free
2cae0     00 20 0E F2 | 	cmp	local02, #0 wz
2cae4     10 13 02 56 |  if_ne	mov	arg01, local02
2cae8     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0906
2caec                 | '     return r;
2caec     10 FB 01 F6 | 	mov	result1, local02
2caf0     A7 F0 03 F6 | 	mov	ptra, fp
2caf4     B2 00 A0 FD | 	call	#popregs_
2caf8                 | _fatfs_cc_v_closedir_ret
2caf8     2D 00 64 FD | 	ret
2cafc                 | 
2cafc                 | _fatfs_cc_v_readdir
2cafc     01 4A 05 F6 | 	mov	COUNT_, #1
2cb00     A8 00 A0 FD | 	call	#pushregs_
2cb04     2C F1 07 F1 | 	add	ptra, #300
2cb08     04 4E 05 F1 | 	add	fp, #4
2cb0c     A7 12 62 FC | 	wrlong	arg01, fp
2cb10     04 4E 05 F1 | 	add	fp, #4
2cb14     A7 14 62 FC | 	wrlong	arg02, fp
2cb18     04 4E 85 F1 | 	sub	fp, #4
2cb1c     A7 16 02 FB | 	rdlong	arg03, fp
2cb20     04 16 06 F1 | 	add	arg03, #4
2cb24     0B 13 02 FB | 	rdlong	arg01, arg03
2cb28     08 4E 05 F1 | 	add	fp, #8
2cb2c     A7 14 02 F6 | 	mov	arg02, fp
2cb30     0C 4E 85 F1 | 	sub	fp, #12
2cb34     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2cb38     28 4F 05 F1 | 	add	fp, #296
2cb3c     A7 FA 61 FC | 	wrlong	result1, fp
2cb40     28 4F 85 F1 | 	sub	fp, #296
2cb44     00 FA 0D F2 | 	cmp	result1, #0 wz
2cb48     14 00 90 AD |  if_e	jmp	#LR__4520
2cb4c                 | '         return _set_dos_error(r);
2cb4c     28 4F 05 F1 | 	add	fp, #296
2cb50     A7 12 02 FB | 	rdlong	arg01, fp
2cb54     28 4F 85 F1 | 	sub	fp, #296
2cb58     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2cb5c     C4 00 90 FD | 	jmp	#LR__4523
2cb60                 | LR__4520
2cb60     28 4E 05 F1 | 	add	fp, #40
2cb64     A7 16 CA FA | 	rdbyte	arg03, fp wz
2cb68     28 4E 85 F1 | 	sub	fp, #40
2cb6c                 | '         return -1;
2cb6c     01 FA 65 A6 |  if_e	neg	result1, #1
2cb70     B0 00 90 AD |  if_e	jmp	#LR__4523
2cb74     08 4E 05 F1 | 	add	fp, #8
2cb78     A7 12 02 FB | 	rdlong	arg01, fp
2cb7c     20 4E 05 F1 | 	add	fp, #32
2cb80     A7 14 02 F6 | 	mov	arg02, fp
2cb84     28 4E 85 F1 | 	sub	fp, #40
2cb88     3F 16 06 F6 | 	mov	arg03, #63
2cb8c     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2cb90     08 4E 05 F1 | 	add	fp, #8
2cb94     A7 16 02 FB | 	rdlong	arg03, fp
2cb98     3F 16 06 F1 | 	add	arg03, #63
2cb9c     0B 01 48 FC | 	wrbyte	#0, arg03
2cba0     0C 4E 05 F1 | 	add	fp, #12
2cba4     A7 16 C2 FA | 	rdbyte	arg03, fp
2cba8     14 4E 85 F1 | 	sub	fp, #20
2cbac     10 16 CE F7 | 	test	arg03, #16 wz
2cbb0     18 00 90 AD |  if_e	jmp	#LR__4521
2cbb4     08 4E 05 F1 | 	add	fp, #8
2cbb8     A7 16 02 FB | 	rdlong	arg03, fp
2cbbc     08 4E 85 F1 | 	sub	fp, #8
2cbc0     50 16 06 F1 | 	add	arg03, #80
2cbc4     0B 03 48 FC | 	wrbyte	#1, arg03
2cbc8     14 00 90 FD | 	jmp	#LR__4522
2cbcc                 | LR__4521
2cbcc     08 4E 05 F1 | 	add	fp, #8
2cbd0     A7 16 02 FB | 	rdlong	arg03, fp
2cbd4     08 4E 85 F1 | 	sub	fp, #8
2cbd8     50 16 06 F1 | 	add	arg03, #80
2cbdc     0B 01 48 FC | 	wrbyte	#0, arg03
2cbe0                 | LR__4522
2cbe0     08 4E 05 F1 | 	add	fp, #8
2cbe4     A7 16 02 FB | 	rdlong	arg03, fp
2cbe8     04 4E 05 F1 | 	add	fp, #4
2cbec     A7 14 02 FB | 	rdlong	arg02, fp
2cbf0     48 16 06 F1 | 	add	arg03, #72
2cbf4     0B 15 62 FC | 	wrlong	arg02, arg03
2cbf8     04 4E 85 F1 | 	sub	fp, #4
2cbfc     A7 1E 02 FB | 	rdlong	local01, fp
2cc00     08 4E 05 F1 | 	add	fp, #8
2cc04     A7 12 E2 FA | 	rdword	arg01, fp
2cc08     02 4E 05 F1 | 	add	fp, #2
2cc0c     A7 14 E2 FA | 	rdword	arg02, fp
2cc10     12 4E 85 F1 | 	sub	fp, #18
2cc14     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0904
2cc18     4C 1E 06 F1 | 	add	local01, #76
2cc1c     0F FB 61 FC | 	wrlong	result1, local01
2cc20                 | '         ent->d_type =  (0) ;
2cc20                 | '     }
2cc20                 | '     ent->d_size = finfo.fsize;
2cc20                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2cc20                 | '     return 0;
2cc20     00 FA 05 F6 | 	mov	result1, #0
2cc24                 | LR__4523
2cc24     A7 F0 03 F6 | 	mov	ptra, fp
2cc28     B2 00 A0 FD | 	call	#popregs_
2cc2c                 | _fatfs_cc_v_readdir_ret
2cc2c     2D 00 64 FD | 	ret
2cc30                 | 
2cc30                 | _fatfs_cc_v_stat
2cc30     03 4A 05 F6 | 	mov	COUNT_, #3
2cc34     A8 00 A0 FD | 	call	#pushregs_
2cc38     30 F1 07 F1 | 	add	ptra, #304
2cc3c     04 4E 05 F1 | 	add	fp, #4
2cc40     A7 12 62 FC | 	wrlong	arg01, fp
2cc44     04 4E 05 F1 | 	add	fp, #4
2cc48     A7 14 62 FC | 	wrlong	arg02, fp
2cc4c     08 4E 85 F1 | 	sub	fp, #8
2cc50     0A 13 02 F6 | 	mov	arg01, arg02
2cc54     00 14 06 F6 | 	mov	arg02, #0
2cc58     30 16 06 F6 | 	mov	arg03, #48
2cc5c     98 00 A0 FD | 	call	#\builtin_bytefill_
2cc60     04 4E 05 F1 | 	add	fp, #4
2cc64     A7 FA 01 FB | 	rdlong	result1, fp
2cc68     04 4E 85 F1 | 	sub	fp, #4
2cc6c     FD FA C9 FA | 	rdbyte	result1, result1 wz
2cc70     2C 00 90 AD |  if_e	jmp	#LR__4530
2cc74     04 4E 05 F1 | 	add	fp, #4
2cc78     A7 FA 01 FB | 	rdlong	result1, fp
2cc7c     04 4E 85 F1 | 	sub	fp, #4
2cc80     FD FA C1 FA | 	rdbyte	result1, result1
2cc84     2E FA 0D F2 | 	cmp	result1, #46 wz
2cc88     04 4E 05 A1 |  if_e	add	fp, #4
2cc8c     A7 1E 02 AB |  if_e	rdlong	local01, fp
2cc90     04 4E 85 A1 |  if_e	sub	fp, #4
2cc94     01 1E 06 A1 |  if_e	add	local01, #1
2cc98     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2cc9c     18 00 90 5D |  if_ne	jmp	#LR__4531
2cca0                 | LR__4530
2cca0     18 4E 05 F1 | 	add	fp, #24
2cca4     A7 20 48 FC | 	wrbyte	#16, fp
2cca8     0C 4E 85 F1 | 	sub	fp, #12
2ccac     A7 00 68 FC | 	wrlong	#0, fp
2ccb0     0C 4E 85 F1 | 	sub	fp, #12
2ccb4     24 00 90 FD | 	jmp	#LR__4532
2ccb8                 | LR__4531
2ccb8     04 4E 05 F1 | 	add	fp, #4
2ccbc     A7 12 02 FB | 	rdlong	arg01, fp
2ccc0     0C 4E 05 F1 | 	add	fp, #12
2ccc4     A7 14 02 F6 | 	mov	arg02, fp
2ccc8     10 4E 85 F1 | 	sub	fp, #16
2cccc     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2ccd0     0C 4E 05 F1 | 	add	fp, #12
2ccd4     A7 FA 61 FC | 	wrlong	result1, fp
2ccd8     0C 4E 85 F1 | 	sub	fp, #12
2ccdc                 | LR__4532
2ccdc     0C 4E 05 F1 | 	add	fp, #12
2cce0     A7 20 0A FB | 	rdlong	local02, fp wz
2cce4     0C 4E 85 F1 | 	sub	fp, #12
2cce8     14 00 90 AD |  if_e	jmp	#LR__4533
2ccec                 | '         return _set_dos_error(r);
2ccec     0C 4E 05 F1 | 	add	fp, #12
2ccf0     A7 12 02 FB | 	rdlong	arg01, fp
2ccf4     0C 4E 85 F1 | 	sub	fp, #12
2ccf8     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2ccfc     14 01 90 FD | 	jmp	#LR__4534
2cd00                 | LR__4533
2cd00     2C 4F 05 F1 | 	add	fp, #300
2cd04     A7 48 6A FC | 	wrlong	#292, fp
2cd08     14 4F 85 F1 | 	sub	fp, #276
2cd0c     A7 22 C2 FA | 	rdbyte	local03, fp
2cd10     18 4E 85 F1 | 	sub	fp, #24
2cd14     01 22 CE F7 | 	test	local03, #1 wz
2cd18     2C 4F 05 A1 |  if_e	add	fp, #300
2cd1c     A7 22 02 AB |  if_e	rdlong	local03, fp
2cd20     92 22 46 A5 |  if_e	or	local03, #146
2cd24     A7 22 62 AC |  if_e	wrlong	local03, fp
2cd28     2C 4F 85 A1 |  if_e	sub	fp, #300
2cd2c     18 4E 05 F1 | 	add	fp, #24
2cd30     A7 22 C2 FA | 	rdbyte	local03, fp
2cd34     18 4E 85 F1 | 	sub	fp, #24
2cd38     10 22 CE F7 | 	test	local03, #16 wz
2cd3c     2C 4F 05 51 |  if_ne	add	fp, #300
2cd40     A7 22 02 5B |  if_ne	rdlong	local03, fp
2cd44     08 00 00 5F 
2cd48     49 22 46 55 |  if_ne	or	local03, ##4169
2cd4c     A7 22 62 5C |  if_ne	wrlong	local03, fp
2cd50     2C 4F 85 51 |  if_ne	sub	fp, #300
2cd54     08 4E 05 F1 | 	add	fp, #8
2cd58     A7 22 02 FB | 	rdlong	local03, fp
2cd5c     24 4F 05 F1 | 	add	fp, #292
2cd60     A7 20 02 FB | 	rdlong	local02, fp
2cd64     08 22 06 F1 | 	add	local03, #8
2cd68     11 21 62 FC | 	wrlong	local02, local03
2cd6c     24 4F 85 F1 | 	sub	fp, #292
2cd70     A7 22 02 FB | 	rdlong	local03, fp
2cd74     0C 22 06 F1 | 	add	local03, #12
2cd78     11 03 68 FC | 	wrlong	#1, local03
2cd7c     A7 22 02 FB | 	rdlong	local03, fp
2cd80     08 4E 05 F1 | 	add	fp, #8
2cd84     A7 20 02 FB | 	rdlong	local02, fp
2cd88     18 22 06 F1 | 	add	local03, #24
2cd8c     11 21 62 FC | 	wrlong	local02, local03
2cd90     08 4E 85 F1 | 	sub	fp, #8
2cd94     A7 22 02 FB | 	rdlong	local03, fp
2cd98     1C 22 06 F1 | 	add	local03, #28
2cd9c     01 00 80 FF 
2cda0     11 01 68 FC | 	wrlong	##512, local03
2cda4     A7 20 02 FB | 	rdlong	local02, fp
2cda8     10 23 02 F6 | 	mov	local03, local02
2cdac     18 20 06 F1 | 	add	local02, #24
2cdb0     10 21 02 FB | 	rdlong	local02, local02
2cdb4     FF 21 06 F1 | 	add	local02, #511
2cdb8     10 21 52 F6 | 	abs	local02, local02 wc
2cdbc     09 20 46 F0 | 	shr	local02, #9
2cdc0     10 21 82 F6 | 	negc	local02, local02
2cdc4     20 22 06 F1 | 	add	local03, #32
2cdc8     11 21 62 FC | 	wrlong	local02, local03
2cdcc     A7 20 02 FB | 	rdlong	local02, fp
2cdd0     10 23 02 F6 | 	mov	local03, local02
2cdd4     10 1F 02 F6 | 	mov	local01, local02
2cdd8     0C 4E 05 F1 | 	add	fp, #12
2cddc     A7 12 E2 FA | 	rdword	arg01, fp
2cde0     02 4E 05 F1 | 	add	fp, #2
2cde4     A7 14 E2 FA | 	rdword	arg02, fp
2cde8     16 4E 85 F1 | 	sub	fp, #22
2cdec     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0904
2cdf0     2C 1E 06 F1 | 	add	local01, #44
2cdf4     0F FB 61 FC | 	wrlong	result1, local01
2cdf8     28 20 06 F1 | 	add	local02, #40
2cdfc     10 FB 61 FC | 	wrlong	result1, local02
2ce00     24 22 06 F1 | 	add	local03, #36
2ce04     11 FB 61 FC | 	wrlong	result1, local03
2ce08                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2ce08                 | '     }
2ce08                 | '     buf->st_mode = mode;
2ce08                 | '     buf->st_nlink = 1;
2ce08                 | '     buf->st_size = finfo.fsize;
2ce08                 | '     buf->st_blksize = 512;
2ce08                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2ce08                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2ce08                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ce08                 | '     return r;
2ce08     0C 4E 05 F1 | 	add	fp, #12
2ce0c     A7 FA 01 FB | 	rdlong	result1, fp
2ce10     0C 4E 85 F1 | 	sub	fp, #12
2ce14                 | LR__4534
2ce14     A7 F0 03 F6 | 	mov	ptra, fp
2ce18     B2 00 A0 FD | 	call	#popregs_
2ce1c                 | _fatfs_cc_v_stat_ret
2ce1c     2D 00 64 FD | 	ret
2ce20                 | 
2ce20                 | _fatfs_cc_v_read
2ce20     00 4A 05 F6 | 	mov	COUNT_, #0
2ce24     A8 00 A0 FD | 	call	#pushregs_
2ce28     1C F0 07 F1 | 	add	ptra, #28
2ce2c     04 4E 05 F1 | 	add	fp, #4
2ce30     A7 12 62 FC | 	wrlong	arg01, fp
2ce34     04 4E 05 F1 | 	add	fp, #4
2ce38     A7 14 62 FC | 	wrlong	arg02, fp
2ce3c     04 4E 05 F1 | 	add	fp, #4
2ce40     A7 16 62 FC | 	wrlong	arg03, fp
2ce44     08 4E 85 F1 | 	sub	fp, #8
2ce48     A7 12 02 FB | 	rdlong	arg01, fp
2ce4c     09 13 0A FB | 	rdlong	arg01, arg01 wz
2ce50     0C 4E 05 F1 | 	add	fp, #12
2ce54     A7 12 62 FC | 	wrlong	arg01, fp
2ce58     10 4E 85 F1 | 	sub	fp, #16
2ce5c                 | '         return _seterror( 5 );
2ce5c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ce60     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ce64     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ce68     01 FA 65 A6 |  if_e	neg	result1, #1
2ce6c     B8 00 90 AD |  if_e	jmp	#LR__4542
2ce70     10 4E 05 F1 | 	add	fp, #16
2ce74     A7 12 02 FB | 	rdlong	arg01, fp
2ce78     02 00 00 FF 
2ce7c     14 12 06 F1 | 	add	arg01, ##1044
2ce80     08 4E 85 F1 | 	sub	fp, #8
2ce84     A7 14 02 FB | 	rdlong	arg02, fp
2ce88     04 4E 05 F1 | 	add	fp, #4
2ce8c     A7 16 02 FB | 	rdlong	arg03, fp
2ce90     0C 4E 05 F1 | 	add	fp, #12
2ce94     A7 18 02 F6 | 	mov	arg04, fp
2ce98     18 4E 85 F1 | 	sub	fp, #24
2ce9c     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2cea0     14 4E 05 F1 | 	add	fp, #20
2cea4     A7 FA 61 FC | 	wrlong	result1, fp
2cea8     14 4E 85 F1 | 	sub	fp, #20
2ceac     00 FA 0D F2 | 	cmp	result1, #0 wz
2ceb0     34 00 90 AD |  if_e	jmp	#LR__4540
2ceb4     04 4E 05 F1 | 	add	fp, #4
2ceb8     A7 18 02 FB | 	rdlong	arg04, fp
2cebc     0C 17 02 F6 | 	mov	arg03, arg04
2cec0     08 18 06 F1 | 	add	arg04, #8
2cec4     0C 19 02 FB | 	rdlong	arg04, arg04
2cec8     20 18 46 F5 | 	or	arg04, #32
2cecc     08 16 06 F1 | 	add	arg03, #8
2ced0     0B 19 62 FC | 	wrlong	arg04, arg03
2ced4                 | '         fil->state |=  (0x20) ;
2ced4                 | '         return _set_dos_error(r);
2ced4     10 4E 05 F1 | 	add	fp, #16
2ced8     A7 12 02 FB | 	rdlong	arg01, fp
2cedc     14 4E 85 F1 | 	sub	fp, #20
2cee0     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2cee4     40 00 90 FD | 	jmp	#LR__4542
2cee8                 | LR__4540
2cee8     18 4E 05 F1 | 	add	fp, #24
2ceec     A7 FA 09 FB | 	rdlong	result1, fp wz
2cef0     18 4E 85 F1 | 	sub	fp, #24
2cef4     24 00 90 5D |  if_ne	jmp	#LR__4541
2cef8     04 4E 05 F1 | 	add	fp, #4
2cefc     A7 FA 01 FB | 	rdlong	result1, fp
2cf00     FD 18 02 F6 | 	mov	arg04, result1
2cf04     04 4E 85 F1 | 	sub	fp, #4
2cf08     08 FA 05 F1 | 	add	result1, #8
2cf0c     FD FA 01 FB | 	rdlong	result1, result1
2cf10     10 FA 45 F5 | 	or	result1, #16
2cf14     08 18 06 F1 | 	add	arg04, #8
2cf18     0C FB 61 FC | 	wrlong	result1, arg04
2cf1c                 | LR__4541
2cf1c                 | '         fil->state |=  (0x10) ;
2cf1c                 | '     }
2cf1c                 | '     return x;
2cf1c     18 4E 05 F1 | 	add	fp, #24
2cf20     A7 FA 01 FB | 	rdlong	result1, fp
2cf24     18 4E 85 F1 | 	sub	fp, #24
2cf28                 | LR__4542
2cf28     A7 F0 03 F6 | 	mov	ptra, fp
2cf2c     B2 00 A0 FD | 	call	#popregs_
2cf30                 | _fatfs_cc_v_read_ret
2cf30     2D 00 64 FD | 	ret
2cf34                 | 
2cf34                 | _fatfs_cc_v_write
2cf34     00 4A 05 F6 | 	mov	COUNT_, #0
2cf38     A8 00 A0 FD | 	call	#pushregs_
2cf3c     1C F0 07 F1 | 	add	ptra, #28
2cf40     04 4E 05 F1 | 	add	fp, #4
2cf44     A7 12 62 FC | 	wrlong	arg01, fp
2cf48     04 4E 05 F1 | 	add	fp, #4
2cf4c     A7 14 62 FC | 	wrlong	arg02, fp
2cf50     04 4E 05 F1 | 	add	fp, #4
2cf54     A7 16 62 FC | 	wrlong	arg03, fp
2cf58     08 4E 85 F1 | 	sub	fp, #8
2cf5c     A7 12 02 FB | 	rdlong	arg01, fp
2cf60     09 13 0A FB | 	rdlong	arg01, arg01 wz
2cf64     0C 4E 05 F1 | 	add	fp, #12
2cf68     A7 12 62 FC | 	wrlong	arg01, fp
2cf6c     10 4E 85 F1 | 	sub	fp, #16
2cf70                 | '         return _seterror( 5 );
2cf70     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cf74     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2cf78     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cf7c     01 FA 65 A6 |  if_e	neg	result1, #1
2cf80     84 00 90 AD |  if_e	jmp	#LR__4551
2cf84     10 4E 05 F1 | 	add	fp, #16
2cf88     A7 12 02 FB | 	rdlong	arg01, fp
2cf8c     02 00 00 FF 
2cf90     14 12 06 F1 | 	add	arg01, ##1044
2cf94     08 4E 85 F1 | 	sub	fp, #8
2cf98     A7 14 02 FB | 	rdlong	arg02, fp
2cf9c     04 4E 05 F1 | 	add	fp, #4
2cfa0     A7 16 02 FB | 	rdlong	arg03, fp
2cfa4     0C 4E 05 F1 | 	add	fp, #12
2cfa8     A7 18 02 F6 | 	mov	arg04, fp
2cfac     18 4E 85 F1 | 	sub	fp, #24
2cfb0     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2cfb4     14 4E 05 F1 | 	add	fp, #20
2cfb8     A7 FA 61 FC | 	wrlong	result1, fp
2cfbc     14 4E 85 F1 | 	sub	fp, #20
2cfc0     00 FA 0D F2 | 	cmp	result1, #0 wz
2cfc4     34 00 90 AD |  if_e	jmp	#LR__4550
2cfc8     04 4E 05 F1 | 	add	fp, #4
2cfcc     A7 18 02 FB | 	rdlong	arg04, fp
2cfd0     0C 17 02 F6 | 	mov	arg03, arg04
2cfd4     08 18 06 F1 | 	add	arg04, #8
2cfd8     0C 19 02 FB | 	rdlong	arg04, arg04
2cfdc     20 18 46 F5 | 	or	arg04, #32
2cfe0     08 16 06 F1 | 	add	arg03, #8
2cfe4     0B 19 62 FC | 	wrlong	arg04, arg03
2cfe8                 | '         fil->state |=  (0x20) ;
2cfe8                 | '         return _set_dos_error(r);
2cfe8     10 4E 05 F1 | 	add	fp, #16
2cfec     A7 12 02 FB | 	rdlong	arg01, fp
2cff0     14 4E 85 F1 | 	sub	fp, #20
2cff4     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2cff8     0C 00 90 FD | 	jmp	#LR__4551
2cffc                 | LR__4550
2cffc                 | '     }
2cffc                 | '     return x;
2cffc     18 4E 05 F1 | 	add	fp, #24
2d000     A7 FA 01 FB | 	rdlong	result1, fp
2d004     18 4E 85 F1 | 	sub	fp, #24
2d008                 | LR__4551
2d008     A7 F0 03 F6 | 	mov	ptra, fp
2d00c     B2 00 A0 FD | 	call	#popregs_
2d010                 | _fatfs_cc_v_write_ret
2d010     2D 00 64 FD | 	ret
2d014                 | 
2d014                 | _fatfs_cc_v_lseek
2d014     04 4A 05 F6 | 	mov	COUNT_, #4
2d018     A8 00 A0 FD | 	call	#pushregs_
2d01c     0A 1F 02 F6 | 	mov	local01, arg02
2d020     0B 21 02 F6 | 	mov	local02, arg03
2d024     09 23 02 FB | 	rdlong	local03, arg01
2d028     02 00 00 FF 
2d02c     14 22 0E F1 | 	add	local03, ##1044 wz
2d030                 | '         return _seterror( 5 );
2d030     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d034     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2d038     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d03c     01 FA 65 A6 |  if_e	neg	result1, #1
2d040     4C 00 90 AD |  if_e	jmp	#LR__4562
2d044     00 20 0E F2 | 	cmp	local02, #0 wz
2d048     24 00 90 AD |  if_e	jmp	#LR__4560
2d04c     01 20 0E F2 | 	cmp	local02, #1 wz
2d050     14 22 06 A1 |  if_e	add	local03, #20
2d054     11 25 02 AB |  if_e	rdlong	local04, local03
2d058     14 22 86 A1 |  if_e	sub	local03, #20
2d05c     12 1F 02 A1 |  if_e	add	local01, local04
2d060     0C 22 06 51 |  if_ne	add	local03, #12
2d064     11 25 02 5B |  if_ne	rdlong	local04, local03
2d068     0C 22 86 51 |  if_ne	sub	local03, #12
2d06c     12 1F 02 51 |  if_ne	add	local01, local04
2d070                 | LR__4560
2d070     0F 15 02 F6 | 	mov	arg02, local01
2d074     11 13 02 F6 | 	mov	arg01, local03
2d078     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2d07c     FD 12 0A F6 | 	mov	arg01, result1 wz
2d080     08 00 90 AD |  if_e	jmp	#LR__4561
2d084                 | '         return _set_dos_error(result);
2d084     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d088     04 00 90 FD | 	jmp	#LR__4562
2d08c                 | LR__4561
2d08c                 | '     }
2d08c                 | '     return offset;
2d08c     0F FB 01 F6 | 	mov	result1, local01
2d090                 | LR__4562
2d090     A7 F0 03 F6 | 	mov	ptra, fp
2d094     B2 00 A0 FD | 	call	#popregs_
2d098                 | _fatfs_cc_v_lseek_ret
2d098     2D 00 64 FD | 	ret
2d09c                 | 
2d09c                 | _fatfs_cc_v_ioctl
2d09c                 | ' {
2d09c                 | '     return _seterror( 10 );
2d09c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d0a0     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2d0a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d0a8     01 FA 65 F6 | 	neg	result1, #1
2d0ac                 | _fatfs_cc_v_ioctl_ret
2d0ac     2D 00 64 FD | 	ret
2d0b0                 | 
2d0b0                 | _fatfs_cc_v_mkdir
2d0b0     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2d0b4     FD 12 02 F6 | 	mov	arg01, result1
2d0b8                 | ' 
2d0b8                 | '     r = f_mkdir(name);
2d0b8                 | '     return _set_dos_error(r);
2d0b8     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d0bc                 | _fatfs_cc_v_mkdir_ret
2d0bc     2D 00 64 FD | 	ret
2d0c0                 | 
2d0c0                 | _fatfs_cc_v_remove
2d0c0     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2d0c4     FD 12 02 F6 | 	mov	arg01, result1
2d0c8                 | ' 
2d0c8                 | '     r = f_unlink(name);
2d0c8                 | '     return _set_dos_error(r);
2d0c8     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d0cc                 | _fatfs_cc_v_remove_ret
2d0cc     2D 00 64 FD | 	ret
2d0d0                 | 
2d0d0                 | _fatfs_cc_v_rmdir
2d0d0     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2d0d4     FD 12 02 F6 | 	mov	arg01, result1
2d0d8                 | ' 
2d0d8                 | '     r = f_unlink(name);
2d0d8                 | '     return _set_dos_error(r);
2d0d8     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d0dc                 | _fatfs_cc_v_rmdir_ret
2d0dc     2D 00 64 FD | 	ret
2d0e0                 | 
2d0e0                 | _fatfs_cc_v_rename
2d0e0     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2d0e4     FD 12 02 F6 | 	mov	arg01, result1
2d0e8                 | '     return _set_dos_error(r);
2d0e8     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d0ec                 | _fatfs_cc_v_rename_ret
2d0ec     2D 00 64 FD | 	ret
2d0f0                 | 
2d0f0                 | _fatfs_cc_v_open
2d0f0     07 4A 05 F6 | 	mov	COUNT_, #7
2d0f4     A8 00 A0 FD | 	call	#pushregs_
2d0f8     09 1F 02 F6 | 	mov	local01, arg01
2d0fc     0A 21 02 F6 | 	mov	local02, arg02
2d100     0B 23 02 F6 | 	mov	local03, arg03
2d104     03 00 00 FF 
2d108     3C 12 06 F6 | 	mov	arg01, ##1596
2d10c                 | '     return _gc_alloc(size);
2d10c     10 14 06 F6 | 	mov	arg02, #16
2d110     A0 58 BF FD | 	call	#__system___gc_doalloc
2d114     FD 24 0A F6 | 	mov	local04, result1 wz
2d118                 | '       return _seterror( 7 );
2d118     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d11c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2d120     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d124     01 FA 65 A6 |  if_e	neg	result1, #1
2d128     98 00 90 AD |  if_e	jmp	#LR__4576
2d12c     12 13 02 F6 | 	mov	arg01, local04
2d130     00 14 06 F6 | 	mov	arg02, #0
2d134     03 00 00 FF 
2d138     3C 16 06 F6 | 	mov	arg03, ##1596
2d13c     98 00 A0 FD | 	call	#\builtin_bytefill_
2d140                 | '   switch (flags & 3) {
2d140     11 27 02 F6 | 	mov	local05, local03
2d144     03 26 0E F5 | 	and	local05, #3 wz
2d148     0C 00 90 AD |  if_e	jmp	#LR__4570
2d14c     01 26 0E F2 | 	cmp	local05, #1 wz
2d150     0C 00 90 AD |  if_e	jmp	#LR__4571
2d154     10 00 90 FD | 	jmp	#LR__4572
2d158                 | LR__4570
2d158     01 28 06 F6 | 	mov	local06, #1
2d15c                 | '       fs_flags =  0x01 ;
2d15c                 | '       break;
2d15c     0C 00 90 FD | 	jmp	#LR__4573
2d160                 | LR__4571
2d160     02 28 06 F6 | 	mov	local06, #2
2d164                 | '       fs_flags =  0x02 ;
2d164                 | '       break;
2d164     04 00 90 FD | 	jmp	#LR__4573
2d168                 | LR__4572
2d168     03 28 06 F6 | 	mov	local06, #3
2d16c                 | '       fs_flags =  0x01  |  0x02 ;
2d16c                 | '       break;
2d16c                 | LR__4573
2d16c     08 22 CE F7 | 	test	local03, #8 wz
2d170     18 28 46 55 |  if_ne	or	local06, #24
2d174     08 00 90 5D |  if_ne	jmp	#LR__4574
2d178     20 22 CE F7 | 	test	local03, #32 wz
2d17c     30 28 46 55 |  if_ne	or	local06, #48
2d180                 | LR__4574
2d180     02 00 00 FF 
2d184     14 24 06 F1 | 	add	local04, ##1044
2d188     12 13 02 F6 | 	mov	arg01, local04
2d18c     02 00 00 FF 
2d190     14 24 86 F1 | 	sub	local04, ##1044
2d194     10 15 02 F6 | 	mov	arg02, local02
2d198     14 17 02 F6 | 	mov	arg03, local06
2d19c     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2d1a0     FD 2A 0A F6 | 	mov	local07, result1 wz
2d1a4     14 00 90 AD |  if_e	jmp	#LR__4575
2d1a8     12 13 02 F6 | 	mov	arg01, local04
2d1ac                 | '     return _gc_free(ptr);
2d1ac     10 59 BF FD | 	call	#__system___gc_free
2d1b0                 | '     free(f);
2d1b0                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d1b0                 | '     return _set_dos_error(r);
2d1b0     15 13 02 F6 | 	mov	arg01, local07
2d1b4     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d1b8     08 00 90 FD | 	jmp	#LR__4576
2d1bc                 | LR__4575
2d1bc     0F 25 62 FC | 	wrlong	local04, local01
2d1c0                 | '   }
2d1c0                 | '   fil->vfsdata = f;
2d1c0                 | '   return 0;
2d1c0     00 FA 05 F6 | 	mov	result1, #0
2d1c4                 | LR__4576
2d1c4     A7 F0 03 F6 | 	mov	ptra, fp
2d1c8     B2 00 A0 FD | 	call	#popregs_
2d1cc                 | _fatfs_cc_v_open_ret
2d1cc     2D 00 64 FD | 	ret
2d1d0                 | 
2d1d0                 | _fatfs_cc_v_flush
2d1d0     09 13 02 FB | 	rdlong	arg01, arg01
2d1d4     02 00 00 FF 
2d1d8     14 12 0E F1 | 	add	arg01, ##1044 wz
2d1dc                 | '         return _seterror( 5 );
2d1dc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d1e0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2d1e4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d1e8     01 FA 65 A6 |  if_e	neg	result1, #1
2d1ec     0C 00 90 AD |  if_e	jmp	#LR__4580
2d1f0     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2d1f4     FD 12 02 F6 | 	mov	arg01, result1
2d1f8                 | '     }
2d1f8                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d1f8                 | '     result = f_sync(f);
2d1f8                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d1f8                 | '     return _set_dos_error(result);
2d1f8     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d1fc                 | LR__4580
2d1fc                 | _fatfs_cc_v_flush_ret
2d1fc     2D 00 64 FD | 	ret
2d200                 | 
2d200                 | _fatfs_cc_v_init
2d200                 | ' {
2d200                 | '     return 0;
2d200     00 FA 05 F6 | 	mov	result1, #0
2d204                 | _fatfs_cc_v_init_ret
2d204     2D 00 64 FD | 	ret
2d208                 | 
2d208                 | _fatfs_cc_v_deinit
2d208     70 01 00 FF 
2d20c     7C 15 06 F6 | 	mov	arg02, ##@LR__4776
2d210     00 12 06 F6 | 	mov	arg01, #0
2d214     00 16 06 F6 | 	mov	arg03, #0
2d218     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2d21c     01 00 00 FF 
2d220     08 E4 05 F1 | 	add	objptr, ##520
2d224     F2 12 02 FB | 	rdlong	arg01, objptr
2d228     04 E4 05 F1 | 	add	objptr, #4
2d22c     F2 14 02 FB | 	rdlong	arg02, objptr
2d230     01 00 00 FF 
2d234     0C E4 85 F1 | 	sub	objptr, ##524
2d238     50 40 BF FD | 	call	#__system___freepins
2d23c                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d23c                 | '     _freepins(f_pinmask);
2d23c                 | '     return 0;
2d23c     00 FA 05 F6 | 	mov	result1, #0
2d240                 | _fatfs_cc_v_deinit_ret
2d240     2D 00 64 FD | 	ret
2d244                 | 
2d244                 | _fatfs_cc_get_vfs
2d244     01 4A 05 F6 | 	mov	COUNT_, #1
2d248     A8 00 A0 FD | 	call	#pushregs_
2d24c     09 1F 02 F6 | 	mov	local01, arg01
2d250     50 12 06 F6 | 	mov	arg01, #80
2d254     2C 57 BF FD | 	call	#__system___gc_alloc_managed
2d258     FD 12 02 F6 | 	mov	arg01, result1
2d25c     F2 FA 01 F6 | 	mov	result1, objptr
2d260     00 88 04 FF 
2d264     00 FA 45 F5 | 	or	result1, ##152043520
2d268     09 FB 61 FC | 	wrlong	result1, arg01
2d26c     F2 FA 01 F6 | 	mov	result1, objptr
2d270     00 90 04 FF 
2d274     00 FA 45 F5 | 	or	result1, ##153092096
2d278     04 12 06 F1 | 	add	arg01, #4
2d27c     09 FB 61 FC | 	wrlong	result1, arg01
2d280     F2 FA 01 F6 | 	mov	result1, objptr
2d284     00 98 04 FF 
2d288     00 FA 45 F5 | 	or	result1, ##154140672
2d28c     04 12 06 F1 | 	add	arg01, #4
2d290     09 FB 61 FC | 	wrlong	result1, arg01
2d294     F2 FA 01 F6 | 	mov	result1, objptr
2d298     00 A0 04 FF 
2d29c     00 FA 45 F5 | 	or	result1, ##155189248
2d2a0     04 12 06 F1 | 	add	arg01, #4
2d2a4     09 FB 61 FC | 	wrlong	result1, arg01
2d2a8     F2 FA 01 F6 | 	mov	result1, objptr
2d2ac     00 A8 04 FF 
2d2b0     00 FA 45 F5 | 	or	result1, ##156237824
2d2b4     04 12 06 F1 | 	add	arg01, #4
2d2b8     09 FB 61 FC | 	wrlong	result1, arg01
2d2bc     04 12 06 F1 | 	add	arg01, #4
2d2c0     09 01 68 FC | 	wrlong	#0, arg01
2d2c4     04 12 06 F1 | 	add	arg01, #4
2d2c8     09 1F 62 FC | 	wrlong	local01, arg01
2d2cc     04 12 06 F1 | 	add	arg01, #4
2d2d0     09 01 68 FC | 	wrlong	#0, arg01
2d2d4     F2 FA 01 F6 | 	mov	result1, objptr
2d2d8     00 B0 04 FF 
2d2dc     00 FA 45 F5 | 	or	result1, ##157286400
2d2e0     04 12 06 F1 | 	add	arg01, #4
2d2e4     09 FB 61 FC | 	wrlong	result1, arg01
2d2e8     F2 FA 01 F6 | 	mov	result1, objptr
2d2ec     00 B8 04 FF 
2d2f0     00 FA 45 F5 | 	or	result1, ##158334976
2d2f4     04 12 06 F1 | 	add	arg01, #4
2d2f8     09 FB 61 FC | 	wrlong	result1, arg01
2d2fc     F2 FA 01 F6 | 	mov	result1, objptr
2d300     00 C0 04 FF 
2d304     00 FA 45 F5 | 	or	result1, ##159383552
2d308     04 12 06 F1 | 	add	arg01, #4
2d30c     09 FB 61 FC | 	wrlong	result1, arg01
2d310     F2 FA 01 F6 | 	mov	result1, objptr
2d314     00 C8 04 FF 
2d318     00 FA 45 F5 | 	or	result1, ##160432128
2d31c     04 12 06 F1 | 	add	arg01, #4
2d320     09 FB 61 FC | 	wrlong	result1, arg01
2d324     F2 FA 01 F6 | 	mov	result1, objptr
2d328     00 D0 04 FF 
2d32c     00 FA 45 F5 | 	or	result1, ##161480704
2d330     04 12 06 F1 | 	add	arg01, #4
2d334     09 FB 61 FC | 	wrlong	result1, arg01
2d338     F2 FA 01 F6 | 	mov	result1, objptr
2d33c     00 D8 04 FF 
2d340     00 FA 45 F5 | 	or	result1, ##162529280
2d344     04 12 06 F1 | 	add	arg01, #4
2d348     09 FB 61 FC | 	wrlong	result1, arg01
2d34c     F2 FA 01 F6 | 	mov	result1, objptr
2d350     00 E0 04 FF 
2d354     00 FA 45 F5 | 	or	result1, ##163577856
2d358     04 12 06 F1 | 	add	arg01, #4
2d35c     09 FB 61 FC | 	wrlong	result1, arg01
2d360     F2 FA 01 F6 | 	mov	result1, objptr
2d364     00 E8 04 FF 
2d368     00 FA 45 F5 | 	or	result1, ##164626432
2d36c     04 12 06 F1 | 	add	arg01, #4
2d370     09 FB 61 FC | 	wrlong	result1, arg01
2d374     F2 FA 01 F6 | 	mov	result1, objptr
2d378     00 F0 04 FF 
2d37c     00 FA 45 F5 | 	or	result1, ##165675008
2d380     04 12 06 F1 | 	add	arg01, #4
2d384     09 FB 61 FC | 	wrlong	result1, arg01
2d388     F2 FA 01 F6 | 	mov	result1, objptr
2d38c     00 F8 04 FF 
2d390     00 FA 45 F5 | 	or	result1, ##166723584
2d394     04 12 06 F1 | 	add	arg01, #4
2d398     09 FB 61 FC | 	wrlong	result1, arg01
2d39c     F2 FA 01 F6 | 	mov	result1, objptr
2d3a0     00 00 05 FF 
2d3a4     00 FA 45 F5 | 	or	result1, ##167772160
2d3a8     04 12 06 F1 | 	add	arg01, #4
2d3ac     09 FB 61 FC | 	wrlong	result1, arg01
2d3b0     F2 FA 01 F6 | 	mov	result1, objptr
2d3b4     00 08 05 FF 
2d3b8     00 FA 45 F5 | 	or	result1, ##168820736
2d3bc     04 12 06 F1 | 	add	arg01, #4
2d3c0     09 FB 61 FC | 	wrlong	result1, arg01
2d3c4     4C 12 86 F1 | 	sub	arg01, #76
2d3c8                 | ' 
2d3c8                 | '     v->close = &v_close;
2d3c8                 | '     v->read = &v_read;
2d3c8                 | '     v->write = &v_write;
2d3c8                 | '     v->lseek = &v_lseek;
2d3c8                 | '     v->ioctl = &v_ioctl;
2d3c8                 | '     v->flush = 0;
2d3c8                 | '     v->vfs_data = ptr;
2d3c8                 | '     v->reserved = 0;
2d3c8                 | ' 
2d3c8                 | '     v->open = &v_open;
2d3c8                 | '     v->creat = &v_creat;
2d3c8                 | '     v->opendir = &v_opendir;
2d3c8                 | '     v->closedir = &v_closedir;
2d3c8                 | '     v->readdir = &v_readdir;
2d3c8                 | '     v->stat = &v_stat;
2d3c8                 | ' 
2d3c8                 | '     v->mkdir = &v_mkdir;
2d3c8                 | '     v->rmdir = &v_rmdir;
2d3c8                 | ' 
2d3c8                 | '     v->remove = &v_remove;
2d3c8                 | '     v->rename = &v_rename;
2d3c8                 | ' 
2d3c8                 | '     v->init = &v_init;
2d3c8                 | '     v->deinit = &v_deinit;
2d3c8                 | ' 
2d3c8                 | '     return v;
2d3c8     09 FB 01 F6 | 	mov	result1, arg01
2d3cc     A7 F0 03 F6 | 	mov	ptra, fp
2d3d0     B2 00 A0 FD | 	call	#popregs_
2d3d4                 | _fatfs_cc_get_vfs_ret
2d3d4     2D 00 64 FD | 	ret
2d3d8                 | 
2d3d8                 | _fatfs_cc_xmit_mmc_1053
2d3d8     01 00 00 FF 
2d3dc     10 E4 05 F1 | 	add	objptr, ##528
2d3e0     F2 00 02 FB | 	rdlong	_var01, objptr
2d3e4     08 E4 05 F1 | 	add	objptr, #8
2d3e8     F2 02 02 FB | 	rdlong	_var02, objptr
2d3ec     01 00 00 FF 
2d3f0     18 E4 85 F1 | 	sub	objptr, ##536
2d3f4     40 02 62 FD | 	dirl	_var02
2d3f8     28 02 64 FD | 	setq	#1
2d3fc     09 05 02 FB | 	rdlong	_var03, arg01
2d400     69 04 62 FD | 	rev	_var03
2d404     1B 04 FE F9 | 	movbyts	_var03, #27
2d408     01 05 22 FC | 	wypin	_var03, _var02
2d40c     0A 05 02 F6 | 	mov	_var03, arg02
2d410     02 14 4E F0 | 	shr	arg02, #2 wz
2d414     03 04 66 F0 | 	shl	_var03, #3
2d418     00 05 22 FC | 	wypin	_var03, _var01
2d41c     41 02 62 FD | 	dirh	_var02
2d420     08 12 06 F1 | 	add	arg01, #8
2d424     69 06 62 FD | 	rev	_var04
2d428     1B 06 FE F9 | 	movbyts	_var04, #27
2d42c                 | LR__4590
2d42c     01 07 22 5C |  if_ne	wypin	_var04, _var02
2d430     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2d434     04 12 06 51 |  if_ne	add	arg01, #4
2d438     69 06 62 5D |  if_ne	rev	_var04
2d43c     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2d440                 | LR__4591
2d440     40 02 72 5D |  if_ne	testp	_var02 wc
2d444     F8 FF 9F 1D |  if_a	jmp	#LR__4591
2d448     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4590
2d44c                 | LR__4592
2d44c     40 00 72 FD | 	testp	_var01 wc
2d450     F8 FF 9F 3D |  if_ae	jmp	#LR__4592
2d454     40 02 62 FD | 	dirl	_var02
2d458     FF FF FF FF 
2d45c     01 FF 2B FC | 	wypin	##-1, _var02
2d460     41 02 62 FD | 	dirh	_var02
2d464                 | _fatfs_cc_xmit_mmc_1053_ret
2d464     2D 00 64 FD | 	ret
2d468                 | 
2d468                 | _fatfs_cc_rcvr_mmc_1060
2d468     01 00 00 FF 
2d46c     10 E4 05 F1 | 	add	objptr, ##528
2d470     F2 00 02 FB | 	rdlong	_var01, objptr
2d474     0C E4 05 F1 | 	add	objptr, #12
2d478     F2 02 02 FB | 	rdlong	_var02, objptr
2d47c     01 00 00 FF 
2d480     1C E4 85 F1 | 	sub	objptr, ##540
2d484     01 03 08 FC | 	akpin	_var02
2d488     0A 05 0A F6 | 	mov	_var03, arg02 wz
2d48c     02 04 4E F0 | 	shr	_var03, #2 wz
2d490     30 00 90 AD |  if_e	jmp	#LR__4602
2d494     02 07 02 F6 | 	mov	_var04, _var03
2d498     05 06 66 F0 | 	shl	_var04, #5
2d49c     00 07 22 FC | 	wypin	_var04, _var01
2d4a0     01 7F 18 FC | 	wxpin	#63, _var02
2d4a4                 | LR__4600
2d4a4                 | LR__4601
2d4a4     40 02 72 FD | 	testp	_var02 wc
2d4a8     F8 FF 9F 3D |  if_ae	jmp	#LR__4601
2d4ac     01 07 8A FA | 	rdpin	_var04, _var02
2d4b0     69 06 62 FD | 	rev	_var04
2d4b4     1B 06 FE F9 | 	movbyts	_var04, #27
2d4b8     09 07 62 FC | 	wrlong	_var04, arg01
2d4bc     04 12 06 F1 | 	add	arg01, #4
2d4c0     F8 05 6E FB | 	djnz	_var03, #LR__4600
2d4c4                 | LR__4602
2d4c4     03 14 0E F5 | 	and	arg02, #3 wz
2d4c8     24 00 90 AD |  if_e	jmp	#LR__4605
2d4cc     01 4F 18 FC | 	wxpin	#39, _var02
2d4d0                 | LR__4603
2d4d0     00 11 28 FC | 	wypin	#8, _var01
2d4d4                 | LR__4604
2d4d4     40 02 72 FD | 	testp	_var02 wc
2d4d8     F8 FF 9F 3D |  if_ae	jmp	#LR__4604
2d4dc     01 07 8A FA | 	rdpin	_var04, _var02
2d4e0     69 06 62 FD | 	rev	_var04
2d4e4     09 07 42 FC | 	wrbyte	_var04, arg01
2d4e8     01 12 06 F1 | 	add	arg01, #1
2d4ec     F8 15 6E FB | 	djnz	arg02, #LR__4603
2d4f0                 | LR__4605
2d4f0                 | _fatfs_cc_rcvr_mmc_1060_ret
2d4f0     2D 00 64 FD | 	ret
2d4f4                 | 
2d4f4                 | _fatfs_cc_wait_ready_1064
2d4f4     01 4A 05 F6 | 	mov	COUNT_, #1
2d4f8     A8 00 A0 FD | 	call	#pushregs_
2d4fc     10 F0 07 F1 | 	add	ptra, #16
2d500     1A FA 61 FD | 	getct	result1
2d504     08 4E 05 F1 | 	add	fp, #8
2d508     A7 FA 61 FC | 	wrlong	result1, fp
2d50c     14 1E 06 FB | 	rdlong	local01, #20
2d510     01 1E 46 F0 | 	shr	local01, #1
2d514     04 4E 05 F1 | 	add	fp, #4
2d518     A7 1E 62 FC | 	wrlong	local01, fp
2d51c     0C 4E 85 F1 | 	sub	fp, #12
2d520                 | ' {
2d520                 | ' 	BYTE d;
2d520                 | ' 	UINT tmr, tmout;
2d520                 | ' 
2d520                 | ' 	tmr = _cnt();
2d520                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2d520                 | ' 	for(;;) {
2d520                 | LR__4610
2d520     04 4E 05 F1 | 	add	fp, #4
2d524     A7 12 02 F6 | 	mov	arg01, fp
2d528     04 4E 85 F1 | 	sub	fp, #4
2d52c     01 14 06 F6 | 	mov	arg02, #1
2d530     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d534     04 4E 05 F1 | 	add	fp, #4
2d538     A7 1E C2 FA | 	rdbyte	local01, fp
2d53c     04 4E 85 F1 | 	sub	fp, #4
2d540     FF 1E 0E F2 | 	cmp	local01, #255 wz
2d544     01 FA 05 A6 |  if_e	mov	result1, #1
2d548     28 00 90 AD |  if_e	jmp	#LR__4611
2d54c     1A FA 61 FD | 	getct	result1
2d550     08 4E 05 F1 | 	add	fp, #8
2d554     A7 1E 02 FB | 	rdlong	local01, fp
2d558     0F FB 81 F1 | 	sub	result1, local01
2d55c     04 4E 05 F1 | 	add	fp, #4
2d560     A7 1E 02 FB | 	rdlong	local01, fp
2d564     0C 4E 85 F1 | 	sub	fp, #12
2d568     0F FB 11 F2 | 	cmp	result1, local01 wc
2d56c     00 FA 05 36 |  if_ae	mov	result1, #0
2d570     AC FF 9F CD |  if_b	jmp	#LR__4610
2d574                 | LR__4611
2d574     A7 F0 03 F6 | 	mov	ptra, fp
2d578     B2 00 A0 FD | 	call	#popregs_
2d57c                 | _fatfs_cc_wait_ready_1064_ret
2d57c     2D 00 64 FD | 	ret
2d580                 | 
2d580                 | _fatfs_cc_deselect_1070
2d580     00 4A 05 F6 | 	mov	COUNT_, #0
2d584     A8 00 A0 FD | 	call	#pushregs_
2d588     14 F0 07 F1 | 	add	ptra, #20
2d58c     01 00 00 FF 
2d590     14 E4 05 F1 | 	add	objptr, ##532
2d594     F2 14 02 FB | 	rdlong	arg02, objptr
2d598     04 4E 05 F1 | 	add	fp, #4
2d59c     A7 14 62 FC | 	wrlong	arg02, fp
2d5a0     04 E4 85 F1 | 	sub	objptr, #4
2d5a4     F2 14 02 FB | 	rdlong	arg02, objptr
2d5a8     04 4E 05 F1 | 	add	fp, #4
2d5ac     A7 14 62 FC | 	wrlong	arg02, fp
2d5b0     08 E4 05 F1 | 	add	objptr, #8
2d5b4     F2 14 02 FB | 	rdlong	arg02, objptr
2d5b8     04 4E 05 F1 | 	add	fp, #4
2d5bc     A7 14 62 FC | 	wrlong	arg02, fp
2d5c0     04 E4 05 F1 | 	add	objptr, #4
2d5c4     F2 14 02 FB | 	rdlong	arg02, objptr
2d5c8     01 00 00 FF 
2d5cc     1C E4 85 F1 | 	sub	objptr, ##540
2d5d0     04 4E 05 F1 | 	add	fp, #4
2d5d4     A7 14 62 FC | 	wrlong	arg02, fp
2d5d8     0C 4E 85 F1 | 	sub	fp, #12
2d5dc     A7 12 02 FB | 	rdlong	arg01, fp
2d5e0     04 4E 85 F1 | 	sub	fp, #4
2d5e4     59 12 62 FD | 	drvh	arg01
2d5e8     1F 20 64 FD | 	waitx	#16
2d5ec     A7 12 02 F6 | 	mov	arg01, fp
2d5f0     01 14 06 F6 | 	mov	arg02, #1
2d5f4     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d5f8     A7 F0 03 F6 | 	mov	ptra, fp
2d5fc     B2 00 A0 FD | 	call	#popregs_
2d600                 | _fatfs_cc_deselect_1070_ret
2d600     2D 00 64 FD | 	ret
2d604                 | 
2d604                 | _fatfs_cc_select_1074
2d604     00 4A 05 F6 | 	mov	COUNT_, #0
2d608     A8 00 A0 FD | 	call	#pushregs_
2d60c     10 F0 07 F1 | 	add	ptra, #16
2d610     01 00 00 FF 
2d614     14 E4 05 F1 | 	add	objptr, ##532
2d618     F2 14 02 FB | 	rdlong	arg02, objptr
2d61c     08 4E 05 F1 | 	add	fp, #8
2d620     A7 14 62 FC | 	wrlong	arg02, fp
2d624     08 E4 05 F1 | 	add	objptr, #8
2d628     F2 12 02 FB | 	rdlong	arg01, objptr
2d62c     01 00 00 FF 
2d630     1C E4 85 F1 | 	sub	objptr, ##540
2d634     04 4E 05 F1 | 	add	fp, #4
2d638     A7 12 62 FC | 	wrlong	arg01, fp
2d63c     50 12 62 FD | 	fltl	arg01
2d640     04 4E 85 F1 | 	sub	fp, #4
2d644     A7 12 02 FB | 	rdlong	arg01, fp
2d648     58 12 62 FD | 	drvl	arg01
2d64c     1F 20 64 FD | 	waitx	#16
2d650     04 4E 05 F1 | 	add	fp, #4
2d654     A7 12 02 FB | 	rdlong	arg01, fp
2d658     41 12 62 FD | 	dirh	arg01
2d65c     08 4E 85 F1 | 	sub	fp, #8
2d660     A7 12 02 F6 | 	mov	arg01, fp
2d664     04 4E 85 F1 | 	sub	fp, #4
2d668     01 14 06 F6 | 	mov	arg02, #1
2d66c     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d670     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1064
2d674     00 FA 0D F2 | 	cmp	result1, #0 wz
2d678     01 FA 05 56 |  if_ne	mov	result1, #1
2d67c     08 00 90 5D |  if_ne	jmp	#LR__4620
2d680     FC FE BF FD | 	call	#_fatfs_cc_deselect_1070
2d684                 | ' 
2d684                 | ' 	deselect();
2d684                 | ' 	return 0;
2d684     00 FA 05 F6 | 	mov	result1, #0
2d688                 | LR__4620
2d688     A7 F0 03 F6 | 	mov	ptra, fp
2d68c     B2 00 A0 FD | 	call	#popregs_
2d690                 | _fatfs_cc_select_1074_ret
2d690     2D 00 64 FD | 	ret
2d694                 | 
2d694                 | _fatfs_cc_rcvr_datablock_1078
2d694     01 4A 05 F6 | 	mov	COUNT_, #1
2d698     A8 00 A0 FD | 	call	#pushregs_
2d69c     18 F0 07 F1 | 	add	ptra, #24
2d6a0     04 4E 05 F1 | 	add	fp, #4
2d6a4     A7 12 62 FC | 	wrlong	arg01, fp
2d6a8     04 4E 05 F1 | 	add	fp, #4
2d6ac     A7 14 62 FC | 	wrlong	arg02, fp
2d6b0     1A FA 61 FD | 	getct	result1
2d6b4     08 4E 05 F1 | 	add	fp, #8
2d6b8     A7 FA 61 FC | 	wrlong	result1, fp
2d6bc     14 1E 06 FB | 	rdlong	local01, #20
2d6c0     03 1E 46 F0 | 	shr	local01, #3
2d6c4     04 4E 05 F1 | 	add	fp, #4
2d6c8     A7 1E 62 FC | 	wrlong	local01, fp
2d6cc     14 4E 85 F1 | 	sub	fp, #20
2d6d0                 | ' 	BYTE *buff,
2d6d0                 | ' 	UINT btr
2d6d0                 | ' )
2d6d0                 | ' {
2d6d0                 | ' 	BYTE d[2];
2d6d0                 | ' 	UINT tmr, tmout;
2d6d0                 | ' 
2d6d0                 | ' 	tmr = _cnt();
2d6d0                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2d6d0                 | ' 	for(;;) {
2d6d0                 | LR__4630
2d6d0     0C 4E 05 F1 | 	add	fp, #12
2d6d4     A7 12 02 F6 | 	mov	arg01, fp
2d6d8     0C 4E 85 F1 | 	sub	fp, #12
2d6dc     01 14 06 F6 | 	mov	arg02, #1
2d6e0     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d6e4     0C 4E 05 F1 | 	add	fp, #12
2d6e8     A7 1E C2 FA | 	rdbyte	local01, fp
2d6ec     0C 4E 85 F1 | 	sub	fp, #12
2d6f0     FF 1E 0E F2 | 	cmp	local01, #255 wz
2d6f4     28 00 90 5D |  if_ne	jmp	#LR__4631
2d6f8     1A FA 61 FD | 	getct	result1
2d6fc     FD 1E 02 F6 | 	mov	local01, result1
2d700     10 4E 05 F1 | 	add	fp, #16
2d704     A7 14 02 FB | 	rdlong	arg02, fp
2d708     0A 1F 82 F1 | 	sub	local01, arg02
2d70c     04 4E 05 F1 | 	add	fp, #4
2d710     A7 14 02 FB | 	rdlong	arg02, fp
2d714     14 4E 85 F1 | 	sub	fp, #20
2d718     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2d71c     B0 FF 9F CD |  if_b	jmp	#LR__4630
2d720                 | LR__4631
2d720     0C 4E 05 F1 | 	add	fp, #12
2d724     A7 1E C2 FA | 	rdbyte	local01, fp
2d728     0C 4E 85 F1 | 	sub	fp, #12
2d72c     FE 1E 0E F2 | 	cmp	local01, #254 wz
2d730     00 FA 05 56 |  if_ne	mov	result1, #0
2d734     30 00 90 5D |  if_ne	jmp	#LR__4632
2d738     04 4E 05 F1 | 	add	fp, #4
2d73c     A7 12 02 FB | 	rdlong	arg01, fp
2d740     04 4E 05 F1 | 	add	fp, #4
2d744     A7 14 02 FB | 	rdlong	arg02, fp
2d748     08 4E 85 F1 | 	sub	fp, #8
2d74c     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d750     0C 4E 05 F1 | 	add	fp, #12
2d754     A7 12 02 F6 | 	mov	arg01, fp
2d758     0C 4E 85 F1 | 	sub	fp, #12
2d75c     02 14 06 F6 | 	mov	arg02, #2
2d760     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d764                 | ' 
2d764                 | ' 	rcvr_mmc(buff, btr);
2d764                 | ' 	rcvr_mmc(d, 2);
2d764                 | ' 
2d764                 | ' 	return 1;
2d764     01 FA 05 F6 | 	mov	result1, #1
2d768                 | LR__4632
2d768     A7 F0 03 F6 | 	mov	ptra, fp
2d76c     B2 00 A0 FD | 	call	#popregs_
2d770                 | _fatfs_cc_rcvr_datablock_1078_ret
2d770     2D 00 64 FD | 	ret
2d774                 | 
2d774                 | _fatfs_cc_xmit_datablock_1080
2d774     00 4A 05 F6 | 	mov	COUNT_, #0
2d778     A8 00 A0 FD | 	call	#pushregs_
2d77c     10 F0 07 F1 | 	add	ptra, #16
2d780     04 4E 05 F1 | 	add	fp, #4
2d784     A7 12 62 FC | 	wrlong	arg01, fp
2d788     04 4E 05 F1 | 	add	fp, #4
2d78c     A7 14 42 FC | 	wrbyte	arg02, fp
2d790     08 4E 85 F1 | 	sub	fp, #8
2d794     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1064
2d798     00 FA 0D F2 | 	cmp	result1, #0 wz
2d79c     00 FA 05 A6 |  if_e	mov	result1, #0
2d7a0     90 00 90 AD |  if_e	jmp	#LR__4641
2d7a4     08 4E 05 F1 | 	add	fp, #8
2d7a8     A7 14 C2 FA | 	rdbyte	arg02, fp
2d7ac     04 4E 05 F1 | 	add	fp, #4
2d7b0     A7 14 42 FC | 	wrbyte	arg02, fp
2d7b4     A7 12 02 F6 | 	mov	arg01, fp
2d7b8     0C 4E 85 F1 | 	sub	fp, #12
2d7bc     01 14 06 F6 | 	mov	arg02, #1
2d7c0     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1053
2d7c4     08 4E 05 F1 | 	add	fp, #8
2d7c8     A7 14 C2 FA | 	rdbyte	arg02, fp
2d7cc     08 4E 85 F1 | 	sub	fp, #8
2d7d0     FD 14 0E F2 | 	cmp	arg02, #253 wz
2d7d4     58 00 90 AD |  if_e	jmp	#LR__4640
2d7d8     04 4E 05 F1 | 	add	fp, #4
2d7dc     A7 12 02 FB | 	rdlong	arg01, fp
2d7e0     04 4E 85 F1 | 	sub	fp, #4
2d7e4     09 14 C6 F9 | 	decod	arg02, #9
2d7e8     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1053
2d7ec     0C 4E 05 F1 | 	add	fp, #12
2d7f0     A7 12 02 F6 | 	mov	arg01, fp
2d7f4     0C 4E 85 F1 | 	sub	fp, #12
2d7f8     02 14 06 F6 | 	mov	arg02, #2
2d7fc     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d800     0C 4E 05 F1 | 	add	fp, #12
2d804     A7 12 02 F6 | 	mov	arg01, fp
2d808     0C 4E 85 F1 | 	sub	fp, #12
2d80c     01 14 06 F6 | 	mov	arg02, #1
2d810     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d814     0C 4E 05 F1 | 	add	fp, #12
2d818     A7 14 C2 FA | 	rdbyte	arg02, fp
2d81c     0C 4E 85 F1 | 	sub	fp, #12
2d820     1F 14 06 F5 | 	and	arg02, #31
2d824     05 14 0E F2 | 	cmp	arg02, #5 wz
2d828                 | ' 			return 0;
2d828     00 FA 05 56 |  if_ne	mov	result1, #0
2d82c     04 00 90 5D |  if_ne	jmp	#LR__4641
2d830                 | LR__4640
2d830                 | ' 	}
2d830                 | ' 
2d830                 | ' 	return 1;
2d830     01 FA 05 F6 | 	mov	result1, #1
2d834                 | LR__4641
2d834     A7 F0 03 F6 | 	mov	ptra, fp
2d838     B2 00 A0 FD | 	call	#popregs_
2d83c                 | _fatfs_cc_xmit_datablock_1080_ret
2d83c     2D 00 64 FD | 	ret
2d840                 | 
2d840                 | _fatfs_cc_send_cmd_1084
2d840     01 4A 05 F6 | 	mov	COUNT_, #1
2d844     A8 00 A0 FD | 	call	#pushregs_
2d848     1C F0 07 F1 | 	add	ptra, #28
2d84c                 | _fatfs_cc_send_cmd_1084_enter
2d84c     04 4E 05 F1 | 	add	fp, #4
2d850     A7 12 42 FC | 	wrbyte	arg01, fp
2d854     04 4E 05 F1 | 	add	fp, #4
2d858     A7 14 62 FC | 	wrlong	arg02, fp
2d85c     04 4E 85 F1 | 	sub	fp, #4
2d860     A7 FA C1 FA | 	rdbyte	result1, fp
2d864     04 4E 85 F1 | 	sub	fp, #4
2d868     80 FA CD F7 | 	test	result1, #128 wz
2d86c     44 00 90 AD |  if_e	jmp	#LR__4650
2d870     04 4E 05 F1 | 	add	fp, #4
2d874     A7 14 C2 FA | 	rdbyte	arg02, fp
2d878     7F 14 06 F5 | 	and	arg02, #127
2d87c     A7 14 42 FC | 	wrbyte	arg02, fp
2d880     04 4E 85 F1 | 	sub	fp, #4
2d884     37 12 06 F6 | 	mov	arg01, #55
2d888     00 14 06 F6 | 	mov	arg02, #0
2d88c     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1084
2d890     0C 4E 05 F1 | 	add	fp, #12
2d894     A7 FA 41 FC | 	wrbyte	result1, fp
2d898     A7 14 C2 FA | 	rdbyte	arg02, fp
2d89c     0C 4E 85 F1 | 	sub	fp, #12
2d8a0     02 14 16 F2 | 	cmp	arg02, #2 wc
2d8a4     0C 4E 05 31 |  if_ae	add	fp, #12
2d8a8     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2d8ac     0C 4E 85 31 |  if_ae	sub	fp, #12
2d8b0     6C 01 90 3D |  if_ae	jmp	#LR__4654
2d8b4                 | LR__4650
2d8b4     04 4E 05 F1 | 	add	fp, #4
2d8b8     A7 14 C2 FA | 	rdbyte	arg02, fp
2d8bc     04 4E 85 F1 | 	sub	fp, #4
2d8c0     0C 14 0E F2 | 	cmp	arg02, #12 wz
2d8c4     14 00 90 AD |  if_e	jmp	#LR__4651
2d8c8     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1070
2d8cc     34 FD BF FD | 	call	#_fatfs_cc_select_1074
2d8d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d8d4     FF FA 05 A6 |  if_e	mov	result1, #255
2d8d8     44 01 90 AD |  if_e	jmp	#LR__4654
2d8dc                 | LR__4651
2d8dc     04 4E 05 F1 | 	add	fp, #4
2d8e0     A7 14 C2 FA | 	rdbyte	arg02, fp
2d8e4     40 FA 05 F6 | 	mov	result1, #64
2d8e8     0A FB 41 F5 | 	or	result1, arg02
2d8ec     10 4E 05 F1 | 	add	fp, #16
2d8f0     A7 FA 41 FC | 	wrbyte	result1, fp
2d8f4     0C 4E 85 F1 | 	sub	fp, #12
2d8f8     A7 FA 01 FB | 	rdlong	result1, fp
2d8fc     18 FA 45 F0 | 	shr	result1, #24
2d900     0D 4E 05 F1 | 	add	fp, #13
2d904     A7 FA 41 FC | 	wrbyte	result1, fp
2d908     0D 4E 85 F1 | 	sub	fp, #13
2d90c     A7 FA 01 FB | 	rdlong	result1, fp
2d910     10 FA 45 F0 | 	shr	result1, #16
2d914     0E 4E 05 F1 | 	add	fp, #14
2d918     A7 FA 41 FC | 	wrbyte	result1, fp
2d91c     0E 4E 85 F1 | 	sub	fp, #14
2d920     A7 FA 01 FB | 	rdlong	result1, fp
2d924     08 FA 45 F0 | 	shr	result1, #8
2d928     0F 4E 05 F1 | 	add	fp, #15
2d92c     A7 FA 41 FC | 	wrbyte	result1, fp
2d930     0F 4E 85 F1 | 	sub	fp, #15
2d934     A7 FA 01 FB | 	rdlong	result1, fp
2d938     10 4E 05 F1 | 	add	fp, #16
2d93c     A7 FA 41 FC | 	wrbyte	result1, fp
2d940     0C 4E 85 F1 | 	sub	fp, #12
2d944     A7 02 48 FC | 	wrbyte	#1, fp
2d948     08 4E 85 F1 | 	sub	fp, #8
2d94c     A7 FA C9 FA | 	rdbyte	result1, fp wz
2d950     04 4E 85 F1 | 	sub	fp, #4
2d954     0C 4E 05 A1 |  if_e	add	fp, #12
2d958     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2d95c     0C 4E 85 A1 |  if_e	sub	fp, #12
2d960     04 4E 05 F1 | 	add	fp, #4
2d964     A7 FA C1 FA | 	rdbyte	result1, fp
2d968     04 4E 85 F1 | 	sub	fp, #4
2d96c     08 FA 0D F2 | 	cmp	result1, #8 wz
2d970     0C 4E 05 A1 |  if_e	add	fp, #12
2d974     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2d978     0C 4E 85 A1 |  if_e	sub	fp, #12
2d97c     0C 4E 05 F1 | 	add	fp, #12
2d980     A7 14 C2 FA | 	rdbyte	arg02, fp
2d984     0D 4E 05 F1 | 	add	fp, #13
2d988     A7 14 42 FC | 	wrbyte	arg02, fp
2d98c     05 4E 85 F1 | 	sub	fp, #5
2d990     A7 12 02 F6 | 	mov	arg01, fp
2d994     14 4E 85 F1 | 	sub	fp, #20
2d998     06 14 06 F6 | 	mov	arg02, #6
2d99c     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1053
2d9a0     04 4E 05 F1 | 	add	fp, #4
2d9a4     A7 1E C2 FA | 	rdbyte	local01, fp
2d9a8     04 4E 85 F1 | 	sub	fp, #4
2d9ac     0C 1E 0E F2 | 	cmp	local01, #12 wz
2d9b0     10 4E 05 A1 |  if_e	add	fp, #16
2d9b4     A7 12 02 A6 |  if_e	mov	arg01, fp
2d9b8     10 4E 85 A1 |  if_e	sub	fp, #16
2d9bc     01 14 06 A6 |  if_e	mov	arg02, #1
2d9c0     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1060
2d9c4     0C 4E 05 F1 | 	add	fp, #12
2d9c8     A7 14 48 FC | 	wrbyte	#10, fp
2d9cc     0C 4E 85 F1 | 	sub	fp, #12
2d9d0                 | ' 	n = 10;
2d9d0                 | ' 	do
2d9d0                 | LR__4652
2d9d0     10 4E 05 F1 | 	add	fp, #16
2d9d4     A7 12 02 F6 | 	mov	arg01, fp
2d9d8     10 4E 85 F1 | 	sub	fp, #16
2d9dc     01 14 06 F6 | 	mov	arg02, #1
2d9e0     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d9e4     10 4E 05 F1 | 	add	fp, #16
2d9e8     A7 1E C2 FA | 	rdbyte	local01, fp
2d9ec     10 4E 85 F1 | 	sub	fp, #16
2d9f0     80 1E CE F7 | 	test	local01, #128 wz
2d9f4     1C 00 90 AD |  if_e	jmp	#LR__4653
2d9f8     0C 4E 05 F1 | 	add	fp, #12
2d9fc     A7 1E C2 FA | 	rdbyte	local01, fp
2da00     01 1E 86 F1 | 	sub	local01, #1
2da04     A7 1E 42 FC | 	wrbyte	local01, fp
2da08     A7 1E CA FA | 	rdbyte	local01, fp wz
2da0c     0C 4E 85 F1 | 	sub	fp, #12
2da10     BC FF 9F 5D |  if_ne	jmp	#LR__4652
2da14                 | LR__4653
2da14                 | ' 
2da14                 | ' 	return d;
2da14     10 4E 05 F1 | 	add	fp, #16
2da18     A7 FA C1 FA | 	rdbyte	result1, fp
2da1c     10 4E 85 F1 | 	sub	fp, #16
2da20                 | LR__4654
2da20     A7 F0 03 F6 | 	mov	ptra, fp
2da24     B2 00 A0 FD | 	call	#popregs_
2da28                 | _fatfs_cc_send_cmd_1084_ret
2da28     2D 00 64 FD | 	ret
2da2c                 | 
2da2c                 | _fatfs_cc_disk_deinitialize
2da2c     03 4A 05 F6 | 	mov	COUNT_, #3
2da30     A8 00 A0 FD | 	call	#pushregs_
2da34     00 12 4E F2 | 	cmps	arg01, #0 wz
2da38     01 00 00 FF 
2da3c     14 E4 05 F1 | 	add	objptr, ##532
2da40     F2 12 02 FB | 	rdlong	arg01, objptr
2da44     04 E4 85 F1 | 	sub	objptr, #4
2da48     F2 1E 02 FB | 	rdlong	local01, objptr
2da4c     08 E4 05 F1 | 	add	objptr, #8
2da50     F2 20 02 FB | 	rdlong	local02, objptr
2da54     04 E4 05 F1 | 	add	objptr, #4
2da58     F2 22 02 FB | 	rdlong	local03, objptr
2da5c     01 00 00 FF 
2da60     1C E4 85 F1 | 	sub	objptr, ##540
2da64                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2da64                 | '         return RES_NOTRDY;
2da64     03 FA 05 56 |  if_ne	mov	result1, #3
2da68     2C 00 90 5D |  if_ne	jmp	#LR__4660
2da6c     50 12 62 FD | 	fltl	arg01
2da70     09 01 08 FC | 	wrpin	#0, arg01
2da74     50 1E 62 FD | 	fltl	local01
2da78     0F 01 08 FC | 	wrpin	#0, local01
2da7c     50 20 62 FD | 	fltl	local02
2da80     10 01 08 FC | 	wrpin	#0, local02
2da84     50 22 62 FD | 	fltl	local03
2da88     11 01 08 FC | 	wrpin	#0, local03
2da8c     0A 12 06 F6 | 	mov	arg01, #10
2da90     98 13 BF FD | 	call	#__system___waitms
2da94                 | '     }
2da94                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2da94                 | '     _pinclear(PIN_SS);
2da94                 | '     _pinclear(PIN_CLK);
2da94                 | '     _pinclear(PIN_DI);
2da94                 | '     _pinclear(PIN_DO);
2da94                 | ' 
2da94                 | '     _waitms(10);
2da94                 | ' 
2da94                 | '     return 0;
2da94     00 FA 05 F6 | 	mov	result1, #0
2da98                 | LR__4660
2da98     A7 F0 03 F6 | 	mov	ptra, fp
2da9c     B2 00 A0 FD | 	call	#popregs_
2daa0                 | _fatfs_cc_disk_deinitialize_ret
2daa0     2D 00 64 FD | 	ret
2daa4                 | 
2daa4                 | _fatfs_cc_gettimeofday
2daa4     04 4A 05 F6 | 	mov	COUNT_, #4
2daa8     A8 00 A0 FD | 	call	#pushregs_
2daac     09 1F 02 F6 | 	mov	local01, arg01
2dab0     54 0F BF FD | 	call	#__system___getus
2dab4     FD 12 02 F6 | 	mov	arg01, result1
2dab8     02 00 00 FF 
2dabc     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2dac0     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2dac4     09 FB 01 F6 | 	mov	result1, arg01
2dac8     10 FB 81 F1 | 	sub	result1, local02
2dacc     A1 07 00 FF 
2dad0     40 FA 15 FD | 	qdiv	result1, ##1000000
2dad4     02 00 00 FF 
2dad8     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2dadc     18 20 62 FD | 	getqx	local02
2dae0     A1 07 00 FF 
2dae4     40 FA 15 FD | 	qdiv	result1, ##1000000
2dae8     00 20 0E F2 | 	cmp	local02, #0 wz
2daec     19 22 62 FD | 	getqy	local03
2daf0     28 00 90 AD |  if_e	jmp	#LR__4670
2daf4     02 00 00 FF 
2daf8     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2dafc     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2db00     10 25 02 F1 | 	add	local04, local02
2db04     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2db08     11 13 82 F1 | 	sub	arg01, local03
2db0c     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2db10     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2db14     02 00 00 FF 
2db18     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2db1c                 | LR__4670
2db1c     02 00 00 FF 
2db20     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2db24     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2db28     02 00 00 FF 
2db2c     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2db30     0F 25 62 FC | 	wrlong	local04, local01
2db34     04 1E 06 F1 | 	add	local01, #4
2db38     0F 23 62 FC | 	wrlong	local03, local01
2db3c                 | '         lastsec += secs;
2db3c                 | '         lastus = now - leftover;
2db3c                 | '     }
2db3c                 | '     tv->tv_sec = lastsec;
2db3c                 | '     tv->tv_usec = leftover;
2db3c                 | '     return 0;
2db3c     00 FA 05 F6 | 	mov	result1, #0
2db40     A7 F0 03 F6 | 	mov	ptra, fp
2db44     B2 00 A0 FD | 	call	#popregs_
2db48                 | _fatfs_cc_gettimeofday_ret
2db48     2D 00 64 FD | 	ret
2db4c                 | 
2db4c                 | _fatfs_cc__is_leap_year
2db4c     09 FB 51 F6 | 	abs	result1, arg01 wc
2db50     03 FA 05 F5 | 	and	result1, #3
2db54     FD FA 89 F6 | 	negc	result1, result1 wz
2db58     38 00 90 5D |  if_ne	jmp	#LR__4681
2db5c     09 FB 51 F6 | 	abs	result1, arg01 wc
2db60     64 FA 15 FD | 	qdiv	result1, #100
2db64     19 FA 61 FD | 	getqy	result1
2db68     FD FA 89 F6 | 	negc	result1, result1 wz
2db6c     1C 00 90 5D |  if_ne	jmp	#LR__4680
2db70     09 FB 51 F6 | 	abs	result1, arg01 wc
2db74     90 FB 15 FD | 	qdiv	result1, #400
2db78                 | '       return (0 == y % 400);
2db78     00 FA 05 F6 | 	mov	result1, #0
2db7c     19 00 62 FD | 	getqy	_var01
2db80     00 01 8A F6 | 	negc	_var01, _var01 wz
2db84     01 FA 05 A6 |  if_e	mov	result1, #1
2db88     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2db8c                 | LR__4680
2db8c                 | '     return 1;
2db8c     01 FA 05 F6 | 	mov	result1, #1
2db90     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2db94                 | LR__4681
2db94                 | '   }
2db94                 | '   return 0;
2db94     00 FA 05 F6 | 	mov	result1, #0
2db98                 | _fatfs_cc__is_leap_year_ret
2db98     2D 00 64 FD | 	ret
2db9c                 | 
2db9c                 | _fatfs_cc___tzoffset
2db9c     09 01 0A F6 | 	mov	_var01, arg01 wz
2dba0     FF FF FF FF 
2dba4     0A FF 6B FC | 	wrlong	##-1, arg02
2dba8     01 02 06 F6 | 	mov	_var02, #1
2dbac     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2dbb0                 | '                 return 0;
2dbb0     00 FA 05 A6 |  if_e	mov	result1, #0
2dbb4     94 02 90 AD |  if_e	jmp	#LR__4707
2dbb8     0A 01 68 FC | 	wrlong	#0, arg02
2dbbc     02 00 00 FF 
2dbc0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2dbc4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2dbc8                 | ' 
2dbc8                 | '        *hasdst = 0;
2dbc8                 | ' 
2dbc8                 | ' 	n = stdname;
2dbc8                 | '         while (*s && isalpha(*s)) {
2dbc8     02 00 00 FF 
2dbcc     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2dbd0     97 28 48 FB | 	callpa	#(@LR__4691-@LR__4690)>>2,fcache_load_ptr_
2dbd4                 | LR__4690
2dbd4     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2dbd8     48 00 90 AD |  if_e	jmp	#LR__4692
2dbdc     00 13 C2 FA | 	rdbyte	arg01, _var01
2dbe0                 | ' {
2dbe0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2dbe0     80 12 36 F3 | 	fle	arg01, #128 wc
2dbe4                 | '     return __ctype[c];
2dbe4     02 00 00 FF 
2dbe8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2dbec     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dbf0     09 FB C1 FA | 	rdbyte	result1, arg01
2dbf4     02 00 00 FF 
2dbf8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dbfc     0C FA CD F7 | 	test	result1, #12 wz
2dc00     20 00 90 AD |  if_e	jmp	#LR__4692
2dc04     00 09 02 F6 | 	mov	_var05, _var01
2dc08     00 0B 02 F6 | 	mov	_var06, _var01
2dc0c     01 0A 06 F1 | 	add	_var06, #1
2dc10     04 0D C2 FA | 	rdbyte	_var07, _var05
2dc14     05 01 02 F6 | 	mov	_var01, _var06
2dc18     03 0D 42 FC | 	wrbyte	_var07, _var04
2dc1c     01 06 06 F1 | 	add	_var04, #1
2dc20     B0 FF 9F FD | 	jmp	#LR__4690
2dc24                 | LR__4691
2dc24                 | LR__4692
2dc24     03 01 48 FC | 	wrbyte	#0, _var04
2dc28     00 0E 06 F6 | 	mov	_var08, #0
2dc2c     00 05 C2 FA | 	rdbyte	_var03, _var01
2dc30     2D 04 0E F2 | 	cmp	_var03, #45 wz
2dc34     01 02 66 A6 |  if_e	neg	_var02, #1
2dc38     01 00 06 A1 |  if_e	add	_var01, #1
2dc3c     97 28 48 FB | 	callpa	#(@LR__4694-@LR__4693)>>2,fcache_load_ptr_
2dc40                 | '                 sgn = -1;
2dc40                 | '                 s++;
2dc40                 | '         }
2dc40                 | '         while (isdigit(*s)) {
2dc40                 | LR__4693
2dc40     00 13 C2 FA | 	rdbyte	arg01, _var01
2dc44                 | ' {
2dc44                 | '   return  (__ctype_get(c) & 0x02 ) ;
2dc44     80 12 36 F3 | 	fle	arg01, #128 wc
2dc48                 | '     return __ctype[c];
2dc48     02 00 00 FF 
2dc4c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2dc50     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dc54     09 FB C1 FA | 	rdbyte	result1, arg01
2dc58     02 00 00 FF 
2dc5c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dc60     02 FA CD F7 | 	test	result1, #2 wz
2dc64     28 00 90 AD |  if_e	jmp	#LR__4695
2dc68     07 05 02 F6 | 	mov	_var03, _var08
2dc6c     02 04 66 F0 | 	shl	_var03, #2
2dc70     07 05 02 F1 | 	add	_var03, _var08
2dc74     01 04 66 F0 | 	shl	_var03, #1
2dc78     00 09 C2 FA | 	rdbyte	_var05, _var01
2dc7c     30 08 86 F1 | 	sub	_var05, #48
2dc80     04 05 02 F1 | 	add	_var03, _var05
2dc84     02 0F 02 F6 | 	mov	_var08, _var03
2dc88     01 00 06 F1 | 	add	_var01, #1
2dc8c     B0 FF 9F FD | 	jmp	#LR__4693
2dc90                 | LR__4694
2dc90                 | LR__4695
2dc90     07 00 00 FF 
2dc94     10 0E 06 FD | 	qmul	_var08, ##3600
2dc98     00 05 C2 FA | 	rdbyte	_var03, _var01
2dc9c     3A 04 0E F2 | 	cmp	_var03, #58 wz
2dca0     18 10 62 FD | 	getqx	_var09
2dca4     70 00 90 5D |  if_ne	jmp	#LR__4699
2dca8     00 0E 06 F6 | 	mov	_var08, #0
2dcac     01 00 06 F1 | 	add	_var01, #1
2dcb0     97 28 48 FB | 	callpa	#(@LR__4697-@LR__4696)>>2,fcache_load_ptr_
2dcb4                 | '                 x = 0;
2dcb4                 | '                 s++;
2dcb4                 | '                 while (isdigit(*s)) {
2dcb4                 | LR__4696
2dcb4     00 13 C2 FA | 	rdbyte	arg01, _var01
2dcb8                 | ' {
2dcb8                 | '   return  (__ctype_get(c) & 0x02 ) ;
2dcb8     80 12 36 F3 | 	fle	arg01, #128 wc
2dcbc                 | '     return __ctype[c];
2dcbc     02 00 00 FF 
2dcc0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2dcc4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dcc8     09 FB C1 FA | 	rdbyte	result1, arg01
2dccc     02 00 00 FF 
2dcd0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dcd4     02 FA CD F7 | 	test	result1, #2 wz
2dcd8     28 00 90 AD |  if_e	jmp	#LR__4698
2dcdc     07 05 02 F6 | 	mov	_var03, _var08
2dce0     02 04 66 F0 | 	shl	_var03, #2
2dce4     07 05 02 F1 | 	add	_var03, _var08
2dce8     01 04 66 F0 | 	shl	_var03, #1
2dcec     00 09 C2 FA | 	rdbyte	_var05, _var01
2dcf0     30 08 86 F1 | 	sub	_var05, #48
2dcf4     04 05 02 F1 | 	add	_var03, _var05
2dcf8     02 0F 02 F6 | 	mov	_var08, _var03
2dcfc     01 00 06 F1 | 	add	_var01, #1
2dd00     B0 FF 9F FD | 	jmp	#LR__4696
2dd04                 | LR__4697
2dd04                 | LR__4698
2dd04     07 0D 02 F6 | 	mov	_var07, _var08
2dd08     04 0C 66 F0 | 	shl	_var07, #4
2dd0c     07 0D 82 F1 | 	sub	_var07, _var08
2dd10     02 0C 66 F0 | 	shl	_var07, #2
2dd14     06 11 02 F1 | 	add	_var09, _var07
2dd18                 | LR__4699
2dd18     02 00 00 FF 
2dd1c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2dd20     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2dd24     00 13 C2 FA | 	rdbyte	arg01, _var01
2dd28                 | ' {
2dd28                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2dd28     80 12 36 F3 | 	fle	arg01, #128 wc
2dd2c                 | '     return __ctype[c];
2dd2c     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2dd30     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dd34     09 FB C1 FA | 	rdbyte	result1, arg01
2dd38     02 00 00 FF 
2dd3c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dd40     0C FA CD F7 | 	test	result1, #12 wz
2dd44     50 00 90 AD |  if_e	jmp	#LR__4702
2dd48     0A 03 68 FC | 	wrlong	#1, arg02
2dd4c                 | '                 *hasdst = 1;
2dd4c                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2dd4c                 | LR__4700
2dd4c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2dd50     44 00 90 AD |  if_e	jmp	#LR__4701
2dd54     00 13 C2 FA | 	rdbyte	arg01, _var01
2dd58                 | ' {
2dd58                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2dd58     80 12 36 F3 | 	fle	arg01, #128 wc
2dd5c                 | '     return __ctype[c];
2dd5c     02 00 00 FF 
2dd60     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2dd64     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dd68     09 FB C1 FA | 	rdbyte	result1, arg01
2dd6c     02 00 00 FF 
2dd70     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dd74     0C FA CD F7 | 	test	result1, #12 wz
2dd78     1C 00 90 AD |  if_e	jmp	#LR__4701
2dd7c     00 0B 02 F6 | 	mov	_var06, _var01
2dd80     01 0A 06 F1 | 	add	_var06, #1
2dd84     00 0D C2 FA | 	rdbyte	_var07, _var01
2dd88     05 01 02 F6 | 	mov	_var01, _var06
2dd8c     03 0D 42 FC | 	wrbyte	_var07, _var04
2dd90     01 06 06 F1 | 	add	_var04, #1
2dd94     B4 FF 9F FD | 	jmp	#LR__4700
2dd98                 | LR__4701
2dd98                 | LR__4702
2dd98     03 01 48 FC | 	wrbyte	#0, _var04
2dd9c     02 00 00 FF 
2dda0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2dda4     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2dda8     02 00 00 FF 
2ddac     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2ddb0     20 00 90 AD |  if_e	jmp	#LR__4703
2ddb4     02 00 00 FF 
2ddb8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2ddbc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ddc0     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2ddc4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2ddc8     02 00 00 FF 
2ddcc     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2ddd0     1C 00 90 FD | 	jmp	#LR__4704
2ddd4                 | LR__4703
2ddd4     02 00 00 FF 
2ddd8     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2dddc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2dde0     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2dde4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2dde8     02 00 00 FF 
2ddec     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2ddf0                 | LR__4704
2ddf0     02 00 00 FF 
2ddf4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2ddf8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2ddfc     02 00 00 FF 
2de00     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2de04     20 00 90 AD |  if_e	jmp	#LR__4705
2de08     02 00 00 FF 
2de0c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2de10     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2de14     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2de18     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2de1c     02 00 00 FF 
2de20     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2de24     1C 00 90 FD | 	jmp	#LR__4706
2de28                 | LR__4705
2de28     02 00 00 FF 
2de2c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2de30     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2de34     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2de38     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2de3c     02 00 00 FF 
2de40     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2de44                 | LR__4706
2de44     08 03 02 FD | 	qmul	_var02, _var09
2de48                 | ' 		_tzname[1] = stdname;
2de48                 | ' 
2de48                 | '         return sgn * off;
2de48     18 FA 61 FD | 	getqx	result1
2de4c                 | LR__4707
2de4c                 | _fatfs_cc___tzoffset_ret
2de4c     2D 00 64 FD | 	ret
2de50                 | 
2de50                 | _fatfs_cc___indst
2de50     10 12 06 F1 | 	add	arg01, #16
2de54     09 01 02 FB | 	rdlong	_var01, arg01
2de58     10 12 86 F1 | 	sub	arg01, #16
2de5c     02 00 0E F2 | 	cmp	_var01, #2 wz
2de60     30 00 90 5D |  if_ne	jmp	#LR__4710
2de64     07 00 06 F6 | 	mov	_var01, #7
2de68     18 12 06 F1 | 	add	arg01, #24
2de6c     09 03 02 FB | 	rdlong	_var02, arg01
2de70     01 01 02 F1 | 	add	_var01, _var02
2de74     0C 12 86 F1 | 	sub	arg01, #12
2de78     09 05 02 FB | 	rdlong	_var03, arg01
2de7c     02 01 82 F1 | 	sub	_var01, _var03
2de80     00 00 56 F2 | 	cmps	_var01, #0 wc
2de84                 | '                         return 1;
2de84     01 FA 05 C6 |  if_b	mov	result1, #1
2de88     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2de8c                 | '                 return 0;
2de8c     00 FA 05 F6 | 	mov	result1, #0
2de90     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2de94                 | LR__4710
2de94     10 12 06 F1 | 	add	arg01, #16
2de98     09 01 02 FB | 	rdlong	_var01, arg01
2de9c     10 12 86 F1 | 	sub	arg01, #16
2dea0     0A 00 0E F2 | 	cmp	_var01, #10 wz
2dea4     28 00 90 5D |  if_ne	jmp	#LR__4711
2dea8     18 12 06 F1 | 	add	arg01, #24
2deac     09 01 02 FB | 	rdlong	_var01, arg01
2deb0     0C 12 86 F1 | 	sub	arg01, #12
2deb4     09 07 02 FB | 	rdlong	_var04, arg01
2deb8     03 01 82 F1 | 	sub	_var01, _var04
2debc     00 00 56 F2 | 	cmps	_var01, #0 wc
2dec0                 | '                         return 0;
2dec0     00 FA 05 C6 |  if_b	mov	result1, #0
2dec4     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2dec8                 | '                 return 1;
2dec8     01 FA 05 F6 | 	mov	result1, #1
2decc     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2ded0                 | LR__4711
2ded0                 | '         }
2ded0                 | ' 
2ded0                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2ded0     00 00 06 F6 | 	mov	_var01, #0
2ded4     10 12 06 F1 | 	add	arg01, #16
2ded8     09 03 02 FB | 	rdlong	_var02, arg01
2dedc     10 12 86 F1 | 	sub	arg01, #16
2dee0     03 02 56 F2 | 	cmps	_var02, #3 wc
2dee4     10 00 90 CD |  if_b	jmp	#LR__4712
2dee8     10 12 06 F1 | 	add	arg01, #16
2deec     09 05 02 FB | 	rdlong	_var03, arg01
2def0     0A 04 56 F2 | 	cmps	_var03, #10 wc
2def4     01 00 06 C6 |  if_b	mov	_var01, #1
2def8                 | LR__4712
2def8     00 FB 01 F6 | 	mov	result1, _var01
2defc                 | _fatfs_cc___indst_ret
2defc     2D 00 64 FD | 	ret
2df00                 | 
2df00                 | ' 	
2df00                 | ' 	FUNCTION pfunc(c as integer) as integer
2df00                 | ___strs_cl_pfunc
2df00                 | ' 		if (i < 16) then
2df00     04 E4 05 F1 | 	add	objptr, #4
2df04     F2 FA 01 FB | 	rdlong	result1, objptr
2df08     04 E4 85 F1 | 	sub	objptr, #4
2df0c     10 FA 55 F2 | 	cmps	result1, #16 wc
2df10     2C 00 90 3D |  if_ae	jmp	#LR__4720
2df14     F2 FA 01 FB | 	rdlong	result1, objptr
2df18     04 E4 05 F1 | 	add	objptr, #4
2df1c     F2 00 02 FB | 	rdlong	_var01, objptr
2df20     FD 00 02 F1 | 	add	_var01, result1
2df24     00 13 42 FC | 	wrbyte	arg01, _var01
2df28     F2 FA 01 FB | 	rdlong	result1, objptr
2df2c     01 FA 05 F1 | 	add	result1, #1
2df30     F2 FA 61 FC | 	wrlong	result1, objptr
2df34     04 E4 85 F1 | 	sub	objptr, #4
2df38                 | ' 			p(i) = c
2df38                 | ' 			i = i+1
2df38                 | ' 			return 1
2df38     01 FA 05 F6 | 	mov	result1, #1
2df3c     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2df40                 | LR__4720
2df40                 | ' 			return -1
2df40     01 FA 65 F6 | 	neg	result1, #1
2df44                 | ___strs_cl_pfunc_ret
2df44     2D 00 64 FD | 	ret
2df48                 | 
2df48                 | __struct__s_vfs_file_t_putchar
2df48     04 4A 05 F6 | 	mov	COUNT_, #4
2df4c     A8 00 A0 FD | 	call	#pushregs_
2df50     1C E4 05 F1 | 	add	objptr, #28
2df54     F2 1E 0A FB | 	rdlong	local01, objptr wz
2df58     1C E4 85 F1 | 	sub	objptr, #28
2df5c     00 FA 05 A6 |  if_e	mov	result1, #0
2df60     48 00 90 AD |  if_e	jmp	#LR__4730
2df64     1C E4 05 F1 | 	add	objptr, #28
2df68     F2 20 02 FB | 	rdlong	local02, objptr
2df6c     10 23 02 F6 | 	mov	local03, local02
2df70     1C E4 85 F1 | 	sub	objptr, #28
2df74     13 22 46 F7 | 	zerox	local03, #19
2df78     14 20 46 F0 | 	shr	local02, #20
2df7c     02 20 66 F0 | 	shl	local02, #2
2df80     ED 20 02 F1 | 	add	local02, __methods__
2df84     10 21 02 FB | 	rdlong	local02, local02
2df88     F2 14 02 F6 | 	mov	arg02, objptr
2df8c     F2 24 02 F6 | 	mov	local04, objptr
2df90     11 E5 01 F6 | 	mov	objptr, local03
2df94     2D 20 62 FD | 	call	local02
2df98     12 E5 01 F6 | 	mov	objptr, local04
2df9c                 | '     return (i < 0) ? 0 : 1;
2df9c     00 FA 55 F2 | 	cmps	result1, #0 wc
2dfa0     00 1E 06 C6 |  if_b	mov	local01, #0
2dfa4     01 1E 06 36 |  if_ae	mov	local01, #1
2dfa8     0F FB 01 F6 | 	mov	result1, local01
2dfac                 | LR__4730
2dfac     A7 F0 03 F6 | 	mov	ptra, fp
2dfb0     B2 00 A0 FD | 	call	#popregs_
2dfb4                 | __struct__s_vfs_file_t_putchar_ret
2dfb4     2D 00 64 FD | 	ret
2dfb8                 | 
2dfb8                 | __struct__s_vfs_file_t_getchar
2dfb8     03 4A 05 F6 | 	mov	COUNT_, #3
2dfbc     A8 00 A0 FD | 	call	#pushregs_
2dfc0     20 E4 05 F1 | 	add	objptr, #32
2dfc4     F2 12 0A FB | 	rdlong	arg01, objptr wz
2dfc8     20 E4 85 F1 | 	sub	objptr, #32
2dfcc     01 FA 65 A6 |  if_e	neg	result1, #1
2dfd0     38 00 90 AD |  if_e	jmp	#LR__4740
2dfd4                 | '     return getcf(__this);
2dfd4     20 E4 05 F1 | 	add	objptr, #32
2dfd8     F2 1E 02 FB | 	rdlong	local01, objptr
2dfdc     0F 21 02 F6 | 	mov	local02, local01
2dfe0     20 E4 85 F1 | 	sub	objptr, #32
2dfe4     13 20 46 F7 | 	zerox	local02, #19
2dfe8     14 1E 46 F0 | 	shr	local01, #20
2dfec     02 1E 66 F0 | 	shl	local01, #2
2dff0     ED 1E 02 F1 | 	add	local01, __methods__
2dff4     0F 1F 02 FB | 	rdlong	local01, local01
2dff8     F2 12 02 F6 | 	mov	arg01, objptr
2dffc     F2 22 02 F6 | 	mov	local03, objptr
2e000     10 E5 01 F6 | 	mov	objptr, local02
2e004     2D 1E 62 FD | 	call	local01
2e008     11 E5 01 F6 | 	mov	objptr, local03
2e00c                 | LR__4740
2e00c     A7 F0 03 F6 | 	mov	ptra, fp
2e010     B2 00 A0 FD | 	call	#popregs_
2e014                 | __struct__s_vfs_file_t_getchar_ret
2e014     2D 00 64 FD | 	ret
2e018                 | 
2e018                 | __struct___bas_wrap_sender_tx
2e018     03 4A 05 F6 | 	mov	COUNT_, #3
2e01c     A8 00 A0 FD | 	call	#pushregs_
2e020     F2 1E 02 FB | 	rdlong	local01, objptr
2e024     0F 21 02 F6 | 	mov	local02, local01
2e028     13 1E 46 F7 | 	zerox	local01, #19
2e02c     14 20 46 F0 | 	shr	local02, #20
2e030     02 20 66 F0 | 	shl	local02, #2
2e034     ED 20 02 F1 | 	add	local02, __methods__
2e038     10 21 02 FB | 	rdlong	local02, local02
2e03c     F2 22 02 F6 | 	mov	local03, objptr
2e040     0F E5 01 F6 | 	mov	objptr, local01
2e044     2D 20 62 FD | 	call	local02
2e048     11 E5 01 F6 | 	mov	objptr, local03
2e04c     01 FA 05 F6 | 	mov	result1, #1
2e050     A7 F0 03 F6 | 	mov	ptra, fp
2e054     B2 00 A0 FD | 	call	#popregs_
2e058                 | __struct___bas_wrap_sender_tx_ret
2e058     2D 00 64 FD | 	ret
2e05c                 | 
2e05c                 | __struct___bas_wrap_sender_rx
2e05c     03 4A 05 F6 | 	mov	COUNT_, #3
2e060     A8 00 A0 FD | 	call	#pushregs_
2e064     04 E4 05 F1 | 	add	objptr, #4
2e068     F2 1E 02 FB | 	rdlong	local01, objptr
2e06c     0F 21 02 F6 | 	mov	local02, local01
2e070     04 E4 85 F1 | 	sub	objptr, #4
2e074     13 20 46 F7 | 	zerox	local02, #19
2e078     14 1E 46 F0 | 	shr	local01, #20
2e07c     02 1E 66 F0 | 	shl	local01, #2
2e080     ED 1E 02 F1 | 	add	local01, __methods__
2e084     0F 1F 02 FB | 	rdlong	local01, local01
2e088     F2 22 02 F6 | 	mov	local03, objptr
2e08c     10 E5 01 F6 | 	mov	objptr, local02
2e090     2D 1E 62 FD | 	call	local01
2e094     11 E5 01 F6 | 	mov	objptr, local03
2e098     A7 F0 03 F6 | 	mov	ptra, fp
2e09c     B2 00 A0 FD | 	call	#popregs_
2e0a0                 | __struct___bas_wrap_sender_rx_ret
2e0a0     2D 00 64 FD | 	ret
2e0a4                 | 
2e0a4                 | __struct___bas_wrap_sender_close
2e0a4     03 4A 05 F6 | 	mov	COUNT_, #3
2e0a8     A8 00 A0 FD | 	call	#pushregs_
2e0ac     08 E4 05 F1 | 	add	objptr, #8
2e0b0     F2 1E 02 FB | 	rdlong	local01, objptr
2e0b4     0F 21 02 F6 | 	mov	local02, local01
2e0b8     08 E4 85 F1 | 	sub	objptr, #8
2e0bc     13 20 46 F7 | 	zerox	local02, #19
2e0c0     14 1E 46 F0 | 	shr	local01, #20
2e0c4     02 1E 66 F0 | 	shl	local01, #2
2e0c8     ED 1E 02 F1 | 	add	local01, __methods__
2e0cc     0F 1F 02 FB | 	rdlong	local01, local01
2e0d0     F2 22 02 F6 | 	mov	local03, objptr
2e0d4     10 E5 01 F6 | 	mov	objptr, local02
2e0d8     2D 1E 62 FD | 	call	local01
2e0dc     11 E5 01 F6 | 	mov	objptr, local03
2e0e0     A7 F0 03 F6 | 	mov	ptra, fp
2e0e4     B2 00 A0 FD | 	call	#popregs_
2e0e8                 | __struct___bas_wrap_sender_close_ret
2e0e8     2D 00 64 FD | 	ret
2e0ec                 | 
2e0ec                 | LR__4750
2e0ec     2F          | 	byte	"/"
2e0ed     00          | 	byte	0
2e0ee                 | LR__4751
2e0ee     69 6E 66    | 	byte	"inf"
2e0f1     00          | 	byte	0
2e0f2                 | LR__4752
2e0f2     6E 61 6E    | 	byte	"nan"
2e0f5     00          | 	byte	0
2e0f6                 | LR__4753
2e0f6                 | 	byte	
2e0f6     00          | 	byte	0
2e0f7                 | LR__4754
2e0f7                 | 	byte	
2e0f7     00          | 	byte	0
2e0f8                 | LR__4755
2e0f8                 | 	byte	
2e0f8     00          | 	byte	0
2e0f9                 | LR__4756
2e0f9                 | 	byte	
2e0f9     00          | 	byte	0
2e0fa                 | LR__4757
2e0fa                 | 	byte	
2e0fa     00          | 	byte	0
2e0fb                 | LR__4758
2e0fb                 | 	byte	
2e0fb     00          | 	byte	0
2e0fc                 | LR__4759
2e0fc                 | 	byte	
2e0fc     00          | 	byte	0
2e0fd                 | LR__4760
2e0fd                 | 	byte	
2e0fd     00          | 	byte	0
2e0fe                 | LR__4761
2e0fe     00          | 	byte	0
2e0ff     00          | 	byte	0
2e100                 | LR__4762
2e100     00          | 	byte	0
2e101     00          | 	byte	0
2e102                 | LR__4763
2e102     00          | 	byte	0
2e103     00          | 	byte	0
2e104                 | LR__4764
2e104     20 21 21 21 
2e108     20 63 6F 72 
2e10c     72 75 70 74 
2e110     65 64 20 68 
2e114     65 61 70 3F 
2e118     3F 3F 20 21 
2e11c     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2e11f     00          | 	byte	0
2e120                 | LR__4765
2e120     20 21 21 21 
2e124     20 6F 75 74 
2e128     20 6F 66 20 
2e12c     68 65 61 70 
2e130     20 6D 65 6D 
2e134     6F 72 79 20 
2e138     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2e13c     00          | 	byte	0
2e13d                 | LR__4766
2e13d     20 21 21 21 
2e141     20 63 6F 72 
2e145     72 75 70 74 
2e149     65 64 20 68 
2e14d     65 61 70 20 
2e151     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2e155     00          | 	byte	0
2e156                 | LR__4767
2e156     00          | 	byte	0
2e157     00          | 	byte	0
2e158                 | LR__4768
2e158     2E          | 	byte	"."
2e159     00          | 	byte	0
2e15a                 | LR__4769
2e15a     00          | 	byte	0
2e15b     00          | 	byte	0
2e15c                 | LR__4770
2e15c     00          | 	byte	0
2e15d     00          | 	byte	0
2e15e                 | LR__4771
2e15e     00          | 	byte	0
2e15f     00          | 	byte	0
2e160                 | LR__4772
2e160     2A 3A 3C 3E 
2e164     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2e168     00          | 	byte	0
2e169                 | LR__4773
2e169     2B 2C 3B 3D 
2e16d     5B 5D       | 	byte	"+,;=[]"
2e16f     00          | 	byte	0
2e170                 | LR__4774
2e170     46 41 54 33 
2e174     32 20 20 20 | 	byte	"FAT32   "
2e178     00          | 	byte	0
2e179                 | LR__4775
2e179     54 5A       | 	byte	"TZ"
2e17b     00          | 	byte	0
2e17c                 | LR__4776
2e17c     00          | 	byte	0
2e17d     00          | 	byte	0
2e17e                 | LR__4777
2e17e                 | 	byte	
2e17e     00          | 	byte	0
2e17f                 | LR__4778
2e17f                 | 	byte	
2e17f     00          | 	byte	0
2e180                 | LR__4779
2e180     22          | 	byte	34
2e181     00          | 	byte	0
2e182                 | LR__4780
2e182     22          | 	byte	34
2e183     00          | 	byte	0
2e184                 | LR__4781
2e184     3A          | 	byte	":"
2e185     00          | 	byte	0
2e186                 | LR__4782
2e186                 | 	byte	
2e186     00          | 	byte	0
2e187                 | LR__4783
2e187                 | 	byte	
2e187     00          | 	byte	0
2e188                 | LR__4784
2e188                 | 	byte	
2e188     00          | 	byte	0
2e189                 | LR__4785
2e189                 | 	byte	
2e189     00          | 	byte	0
2e18a                 | LR__4786
2e18a                 | 	byte	
2e18a     00          | 	byte	0
2e18b                 | LR__4787
2e18b                 | 	byte	
2e18b     00          | 	byte	0
2e18c                 | LR__4788
2e18c                 | 	byte	
2e18c     00          | 	byte	0
2e18d                 | LR__4789
2e18d     22          | 	byte	34
2e18e     00          | 	byte	0
2e18f                 | LR__4790
2e18f     22          | 	byte	34
2e190     00          | 	byte	0
2e191                 | LR__4791
2e191     22          | 	byte	34
2e192     00          | 	byte	0
2e193                 | LR__4792
2e193     22          | 	byte	34
2e194     00          | 	byte	0
2e195                 | LR__4793
2e195     22          | 	byte	34
2e196     00          | 	byte	0
2e197                 | LR__4794
2e197     3E          | 	byte	">"
2e198     00          | 	byte	0
2e199                 | LR__4795
2e199     3C          | 	byte	"<"
2e19a     00          | 	byte	0
2e19b                 | LR__4796
2e19b     2B          | 	byte	"+"
2e19c     00          | 	byte	0
2e19d                 | LR__4797
2e19d     2D          | 	byte	"-"
2e19e     00          | 	byte	0
2e19f                 | LR__4798
2e19f     2A          | 	byte	"*"
2e1a0     00          | 	byte	0
2e1a1                 | LR__4799
2e1a1     2F          | 	byte	"/"
2e1a2     00          | 	byte	0
2e1a3                 | LR__4800
2e1a3     5E          | 	byte	"^"
2e1a4     00          | 	byte	0
2e1a5                 | LR__4801
2e1a5     3D          | 	byte	"="
2e1a6     00          | 	byte	0
2e1a7                 | LR__4802
2e1a7     2B          | 	byte	"+"
2e1a8     00          | 	byte	0
2e1a9                 | LR__4803
2e1a9     2B          | 	byte	"+"
2e1aa     00          | 	byte	0
2e1ab                 | LR__4804
2e1ab     2D          | 	byte	"-"
2e1ac     00          | 	byte	0
2e1ad                 | LR__4805
2e1ad     2D          | 	byte	"-"
2e1ae     00          | 	byte	0
2e1af                 | LR__4806
2e1af     3C          | 	byte	"<"
2e1b0     00          | 	byte	0
2e1b1                 | LR__4807
2e1b1     3E          | 	byte	">"
2e1b2     00          | 	byte	0
2e1b3                 | LR__4808
2e1b3     22          | 	byte	34
2e1b4     00          | 	byte	0
2e1b5                 | LR__4809
2e1b5     22          | 	byte	34
2e1b6     00          | 	byte	0
2e1b7                 | LR__4810
2e1b7     2E          | 	byte	"."
2e1b8     00          | 	byte	0
2e1b9                 | LR__4811
2e1b9     3F          | 	byte	"?"
2e1ba     00          | 	byte	0
2e1bb                 | LR__4812
2e1bb     3F          | 	byte	"?"
2e1bc     00          | 	byte	0
2e1bd                 | LR__4813
2e1bd     6D 6F 75 73 
2e1c1     65          | 	byte	"mouse"
2e1c2     00          | 	byte	0
2e1c3                 | LR__4814
2e1c3     63 75 72 73 
2e1c7     6F 72       | 	byte	"cursor"
2e1c9     00          | 	byte	0
2e1ca                 | LR__4815
2e1ca     63 6C 69 63 
2e1ce     6B          | 	byte	"click"
2e1cf     00          | 	byte	0
2e1d0                 | LR__4816
2e1d0     6F 6E       | 	byte	"on"
2e1d2     00          | 	byte	0
2e1d3                 | LR__4817
2e1d3     31          | 	byte	"1"
2e1d4     00          | 	byte	0
2e1d5                 | LR__4818
2e1d5     6F 66 66    | 	byte	"off"
2e1d8     00          | 	byte	0
2e1d9                 | LR__4819
2e1d9     30          | 	byte	"0"
2e1da     00          | 	byte	0
2e1db                 | LR__4820
2e1db     6D 6F 64 65 | 	byte	"mode"
2e1df     00          | 	byte	0
2e1e0                 | LR__4821
2e1e0     6D 2E       | 	byte	"m."
2e1e2     00          | 	byte	0
2e1e3                 | LR__4822
2e1e3     61 74 61 72 
2e1e7     69          | 	byte	"atari"
2e1e8     00          | 	byte	0
2e1e9                 | LR__4823
2e1e9     30          | 	byte	"0"
2e1ea     00          | 	byte	0
2e1eb                 | LR__4824
2e1eb     70 63 5F 61 
2e1ef     6D 62 65 72 | 	byte	"pc_amber"
2e1f3     00          | 	byte	0
2e1f4                 | LR__4825
2e1f4     31          | 	byte	"1"
2e1f5     00          | 	byte	0
2e1f6                 | LR__4826
2e1f6     70 63 5F 67 
2e1fa     72 65 65 6E | 	byte	"pc_green"
2e1fe     00          | 	byte	0
2e1ff                 | LR__4827
2e1ff     32          | 	byte	"2"
2e200     00          | 	byte	0
2e201                 | LR__4828
2e201     70 63 5F 77 
2e205     68 69 74 65 | 	byte	"pc_white"
2e209     00          | 	byte	0
2e20a                 | LR__4829
2e20a     33          | 	byte	"3"
2e20b     00          | 	byte	0
2e20c                 | LR__4830
2e20c     73 74       | 	byte	"st"
2e20e     00          | 	byte	0
2e20f                 | LR__4831
2e20f     34          | 	byte	"4"
2e210     00          | 	byte	0
2e211                 | LR__4832
2e211                 | 	byte	
2e211     00          | 	byte	0
2e212                 | LR__4833
2e212     6C 6F 61 64 | 	byte	"load"
2e216     00          | 	byte	0
2e217                 | LR__4834
2e217     73 61 76 65 | 	byte	"save"
2e21b     00          | 	byte	0
2e21c                 | LR__4835
2e21c     62 72 75 6E | 	byte	"brun"
2e220     00          | 	byte	0
2e221                 | LR__4836
2e221     72 75 6E    | 	byte	"run"
2e224     00          | 	byte	0
2e225                 | LR__4837
2e225     6C 6F 2E    | 	byte	"lo."
2e228     00          | 	byte	0
2e229                 | LR__4838
2e229     73 2E       | 	byte	"s."
2e22b     00          | 	byte	0
2e22c                 | LR__4839
2e22c     62 72 2E    | 	byte	"br."
2e22f     00          | 	byte	0
2e230                 | LR__4840
2e230                 | 	byte	
2e230     00          | 	byte	0
2e231                 | LR__4841
2e231                 | 	byte	
2e231     00          | 	byte	0
2e232                 | LR__4842
2e232                 | 	byte	
2e232     00          | 	byte	0
2e233                 | LR__4843
2e233                 | 	byte	
2e233     00          | 	byte	0
2e234                 | LR__4844
2e234     20 55 73 65 
2e238     72 20 66 75 
2e23c     6E 63 74 69 
2e240     6F 6E 73 20 
2e244     61 6E 64 20 
2e248     61 72 72 61 
2e24c     79 73 20 6E 
2e250     6F 74 20 79 
2e254     65 74 20 69 
2e258     6D 70 6C 65 
2e25c     6D 65 6E 74 
2e260     65 64       | 	byte	" User functions and arrays not yet implemented"
2e262     00          | 	byte	0
2e263                 | LR__4845
2e263                 | 	byte	
2e263     00          | 	byte	0
2e264                 | LR__4846
2e264                 | 	byte	
2e264     00          | 	byte	0
2e265                 | LR__4847
2e265     52 65 61 64 
2e269     79          | 	byte	"Ready"
2e26a     00          | 	byte	0
2e26b                 | LR__4848
2e26b     2B          | 	byte	"+"
2e26c     00          | 	byte	0
2e26d                 | LR__4849
2e26d     2D          | 	byte	"-"
2e26e     00          | 	byte	0
2e26f                 | LR__4850
2e26f     6F 72       | 	byte	"or"
2e271     00          | 	byte	0
2e272                 | LR__4851
2e272     78 6F 72    | 	byte	"xor"
2e275     00          | 	byte	0
2e276                 | LR__4852
2e276     2A          | 	byte	"*"
2e277     00          | 	byte	0
2e278                 | LR__4853
2e278     2F          | 	byte	"/"
2e279     00          | 	byte	0
2e27a                 | LR__4854
2e27a     61 6E 64    | 	byte	"and"
2e27d     00          | 	byte	0
2e27e                 | LR__4855
2e27e     64 69 76    | 	byte	"div"
2e281     00          | 	byte	0
2e282                 | LR__4856
2e282     6D 6F 64    | 	byte	"mod"
2e285     00          | 	byte	0
2e286                 | LR__4857
2e286     73 68 6C    | 	byte	"shl"
2e289     00          | 	byte	0
2e28a                 | LR__4858
2e28a     73 68 72    | 	byte	"shr"
2e28d     00          | 	byte	0
2e28e                 | LR__4859
2e28e     5E          | 	byte	"^"
2e28f     00          | 	byte	0
2e290                 | LR__4860
2e290     6E 6F 74    | 	byte	"not"
2e293     00          | 	byte	0
2e294                 | LR__4861
2e294     40          | 	byte	"@"
2e295     00          | 	byte	0
2e296                 | LR__4862
2e296     3D          | 	byte	"="
2e297     00          | 	byte	0
2e298                 | LR__4863
2e298     3E 3D       | 	byte	">="
2e29a     00          | 	byte	0
2e29b                 | LR__4864
2e29b     3C 3D       | 	byte	"<="
2e29d     00          | 	byte	0
2e29e                 | LR__4865
2e29e     3C          | 	byte	"<"
2e29f     00          | 	byte	0
2e2a0                 | LR__4866
2e2a0     3E          | 	byte	">"
2e2a1     00          | 	byte	0
2e2a2                 | LR__4867
2e2a2     3C 3E       | 	byte	"<>"
2e2a4     00          | 	byte	0
2e2a5                 | LR__4868
2e2a5     2B 2B       | 	byte	"++"
2e2a7     00          | 	byte	0
2e2a8                 | LR__4869
2e2a8     2D 2D       | 	byte	"--"
2e2aa     00          | 	byte	0
2e2ab                 | LR__4870
2e2ab     23          | 	byte	"#"
2e2ac     00          | 	byte	0
2e2ad                 | LR__4871
2e2ad     23          | 	byte	"#"
2e2ae     00          | 	byte	0
2e2af                 | LR__4872
2e2af     2D          | 	byte	"-"
2e2b0     00          | 	byte	0
2e2b1                 | LR__4873
2e2b1     30          | 	byte	"0"
2e2b2     00          | 	byte	0
2e2b3                 | LR__4874
2e2b3     63          | 	byte	"c"
2e2b4     00          | 	byte	0
2e2b5                 | LR__4875
2e2b5     63 23       | 	byte	"c#"
2e2b7     00          | 	byte	0
2e2b8                 | LR__4876
2e2b8     64          | 	byte	"d"
2e2b9     00          | 	byte	0
2e2ba                 | LR__4877
2e2ba     64 23       | 	byte	"d#"
2e2bc     00          | 	byte	0
2e2bd                 | LR__4878
2e2bd     65          | 	byte	"e"
2e2be     00          | 	byte	0
2e2bf                 | LR__4879
2e2bf     66          | 	byte	"f"
2e2c0     00          | 	byte	0
2e2c1                 | LR__4880
2e2c1     66 23       | 	byte	"f#"
2e2c3     00          | 	byte	0
2e2c4                 | LR__4881
2e2c4     67          | 	byte	"g"
2e2c5     00          | 	byte	0
2e2c6                 | LR__4882
2e2c6     67 23       | 	byte	"g#"
2e2c8     00          | 	byte	0
2e2c9                 | LR__4883
2e2c9     61          | 	byte	"a"
2e2ca     00          | 	byte	0
2e2cb                 | LR__4884
2e2cb     61 23       | 	byte	"a#"
2e2cd     00          | 	byte	0
2e2ce                 | LR__4885
2e2ce     68          | 	byte	"h"
2e2cf     00          | 	byte	0
2e2d0                 | LR__4886
2e2d0     62          | 	byte	"b"
2e2d1     00          | 	byte	0
2e2d2                 | LR__4887
2e2d2     2B          | 	byte	"+"
2e2d3     00          | 	byte	0
2e2d4                 | LR__4888
2e2d4     2D          | 	byte	"-"
2e2d5     00          | 	byte	0
2e2d6                 | LR__4889
2e2d6     3D          | 	byte	"="
2e2d7     00          | 	byte	0
2e2d8                 | LR__4890
2e2d8     2C          | 	byte	","
2e2d9     00          | 	byte	0
2e2da                 | LR__4891
2e2da     2A          | 	byte	"*"
2e2db     00          | 	byte	0
2e2dc                 | LR__4892
2e2dc     2F          | 	byte	"/"
2e2dd     00          | 	byte	0
2e2de                 | LR__4893
2e2de     3B          | 	byte	";"
2e2df     00          | 	byte	0
2e2e0                 | LR__4894
2e2e0     22          | 	byte	34
2e2e1     00          | 	byte	0
2e2e2                 | LR__4895
2e2e2     5E          | 	byte	"^"
2e2e3     00          | 	byte	0
2e2e4                 | LR__4896
2e2e4     29          | 	byte	")"
2e2e5     00          | 	byte	0
2e2e6                 | LR__4897
2e2e6     28          | 	byte	"("
2e2e7     00          | 	byte	0
2e2e8                 | LR__4898
2e2e8     3A          | 	byte	":"
2e2e9     00          | 	byte	0
2e2ea                 | LR__4899
2e2ea     20          | 	byte	" "
2e2eb     00          | 	byte	0
2e2ec                 | LR__4900
2e2ec     3E          | 	byte	">"
2e2ed     00          | 	byte	0
2e2ee                 | LR__4901
2e2ee     3C          | 	byte	"<"
2e2ef     00          | 	byte	0
2e2f0                 | LR__4902
2e2f0     3D          | 	byte	"="
2e2f1     00          | 	byte	0
2e2f2                 | LR__4903
2e2f2     62 65 65 70 | 	byte	"beep"
2e2f6     00          | 	byte	0
2e2f7                 | LR__4904
2e2f7     62 2E       | 	byte	"b."
2e2f9     00          | 	byte	0
2e2fa                 | LR__4905
2e2fa     62 6F 78    | 	byte	"box"
2e2fd     00          | 	byte	0
2e2fe                 | LR__4906
2e2fe     62 72 75 6E | 	byte	"brun"
2e302     00          | 	byte	0
2e303                 | LR__4907
2e303     62 72 2E    | 	byte	"br."
2e306     00          | 	byte	0
2e307                 | LR__4908
2e307     63 69 72 63 
2e30b     6C 65       | 	byte	"circle"
2e30d     00          | 	byte	0
2e30e                 | LR__4909
2e30e     63 69 2E    | 	byte	"ci."
2e311     00          | 	byte	0
2e312                 | LR__4910
2e312     63 6C 69 63 
2e316     6B          | 	byte	"click"
2e317     00          | 	byte	0
2e318                 | LR__4911
2e318     63 6C 73    | 	byte	"cls"
2e31b     00          | 	byte	0
2e31c                 | LR__4912
2e31c     63 6F 6C 6F 
2e320     72          | 	byte	"color"
2e321     00          | 	byte	0
2e322                 | LR__4913
2e322     63 2E       | 	byte	"c."
2e324     00          | 	byte	0
2e325                 | LR__4914
2e325     63 73 61 76 
2e329     65          | 	byte	"csave"
2e32a     00          | 	byte	0
2e32b                 | LR__4915
2e32b     63 73 2E    | 	byte	"cs."
2e32e     00          | 	byte	0
2e32f                 | LR__4916
2e32f     63 75 72 73 
2e333     6F 72       | 	byte	"cursor"
2e335     00          | 	byte	0
2e336                 | LR__4917
2e336     64 65 66 73 
2e33a     6E 64       | 	byte	"defsnd"
2e33c     00          | 	byte	0
2e33d                 | LR__4918
2e33d     64 65 66 65 
2e341     6E 76       | 	byte	"defenv"
2e343     00          | 	byte	0
2e344                 | LR__4919
2e344     64 65 66 73 
2e348     70 72 69 74 
2e34c     65          | 	byte	"defsprite"
2e34d     00          | 	byte	0
2e34e                 | LR__4920
2e34e     64 73 2E    | 	byte	"ds."
2e351     00          | 	byte	0
2e352                 | LR__4921
2e352     64 65 67    | 	byte	"deg"
2e355     00          | 	byte	0
2e356                 | LR__4922
2e356     64 69 6D    | 	byte	"dim"
2e359     00          | 	byte	0
2e35a                 | LR__4923
2e35a     64 69 72    | 	byte	"dir"
2e35d     00          | 	byte	0
2e35e                 | LR__4924
2e35e     64 70 6F 6B 
2e362     65          | 	byte	"dpoke"
2e363     00          | 	byte	0
2e364                 | LR__4925
2e364     64 72 61 77 | 	byte	"draw"
2e368     00          | 	byte	0
2e369                 | LR__4926
2e369     64 72 2E    | 	byte	"dr."
2e36c     00          | 	byte	0
2e36d                 | LR__4927
2e36d     65 6C 73 65 | 	byte	"else"
2e371     00          | 	byte	0
2e372                 | LR__4928
2e372     65 6E 64    | 	byte	"end"
2e375     00          | 	byte	0
2e376                 | LR__4929
2e376     66 63 69 72 
2e37a     63 6C 65    | 	byte	"fcircle"
2e37d     00          | 	byte	0
2e37e                 | LR__4930
2e37e     66 63 2E    | 	byte	"fc."
2e381     00          | 	byte	0
2e382                 | LR__4931
2e382     66 69 6C 6C | 	byte	"fill"
2e386     00          | 	byte	0
2e387                 | LR__4932
2e387     66 69 2E    | 	byte	"fi."
2e38a     00          | 	byte	0
2e38b                 | LR__4933
2e38b     66 6F 6E 74 | 	byte	"font"
2e38f     00          | 	byte	0
2e390                 | LR__4934
2e390     66 6F 72    | 	byte	"for"
2e393     00          | 	byte	0
2e394                 | LR__4935
2e394     66 2E       | 	byte	"f."
2e396     00          | 	byte	0
2e397                 | LR__4936
2e397     66 72 61 6D 
2e39b     65          | 	byte	"frame"
2e39c     00          | 	byte	0
2e39d                 | LR__4937
2e39d     66 72 2E    | 	byte	"fr."
2e3a0     00          | 	byte	0
2e3a1                 | LR__4938
2e3a1     67 6F 73 75 
2e3a5     62          | 	byte	"gosub"
2e3a6     00          | 	byte	0
2e3a7                 | LR__4939
2e3a7     67 6F 74 6F | 	byte	"goto"
2e3ab     00          | 	byte	0
2e3ac                 | LR__4940
2e3ac     67 2E       | 	byte	"g."
2e3ae     00          | 	byte	0
2e3af                 | LR__4941
2e3af     69 66       | 	byte	"if"
2e3b1     00          | 	byte	0
2e3b2                 | LR__4942
2e3b2     69 6E 6B    | 	byte	"ink"
2e3b5     00          | 	byte	0
2e3b6                 | LR__4943
2e3b6     69 2E       | 	byte	"i."
2e3b8     00          | 	byte	0
2e3b9                 | LR__4944
2e3b9     69 6E 74    | 	byte	"int"
2e3bc     00          | 	byte	0
2e3bd                 | LR__4945
2e3bd     6C 69 73 74 | 	byte	"list"
2e3c1     00          | 	byte	0
2e3c2                 | LR__4946
2e3c2     6C 2E       | 	byte	"l."
2e3c4     00          | 	byte	0
2e3c5                 | LR__4947
2e3c5     6C 6F 61 64 | 	byte	"load"
2e3c9     00          | 	byte	0
2e3ca                 | LR__4948
2e3ca     6C 6F 2E    | 	byte	"lo."
2e3cd     00          | 	byte	0
2e3ce                 | LR__4949
2e3ce     6C 70 6F 6B 
2e3d2     65          | 	byte	"lpoke"
2e3d3     00          | 	byte	0
2e3d4                 | LR__4950
2e3d4     6D 6F 64 65 | 	byte	"mode"
2e3d8     00          | 	byte	0
2e3d9                 | LR__4951
2e3d9     6D 2E       | 	byte	"m."
2e3db     00          | 	byte	0
2e3dc                 | LR__4952
2e3dc     6D 6F 75 73 
2e3e0     65          | 	byte	"mouse"
2e3e1     00          | 	byte	0
2e3e2                 | LR__4953
2e3e2     6E 65 77    | 	byte	"new"
2e3e5     00          | 	byte	0
2e3e6                 | LR__4954
2e3e6     6E 65 78 74 | 	byte	"next"
2e3ea     00          | 	byte	0
2e3eb                 | LR__4955
2e3eb     6E 2E       | 	byte	"n."
2e3ed     00          | 	byte	0
2e3ee                 | LR__4956
2e3ee     70 61 70 65 
2e3f2     72          | 	byte	"paper"
2e3f3     00          | 	byte	0
2e3f4                 | LR__4957
2e3f4     70 61 2E    | 	byte	"pa."
2e3f7     00          | 	byte	0
2e3f8                 | LR__4958
2e3f8     70 69 6E 66 
2e3fc     6C 6F 61 74 | 	byte	"pinfloat"
2e400     00          | 	byte	0
2e401                 | LR__4959
2e401     70 69 6E 68 
2e405     69          | 	byte	"pinhi"
2e406     00          | 	byte	0
2e407                 | LR__4960
2e407     70 69 6E 6C 
2e40b     6F          | 	byte	"pinlo"
2e40c     00          | 	byte	0
2e40d                 | LR__4961
2e40d     70 69 6E 73 
2e411     74 61 72 74 | 	byte	"pinstart"
2e415     00          | 	byte	0
2e416                 | LR__4962
2e416     70 69 6E 74 
2e41a     6F 67 67 6C 
2e41e     65          | 	byte	"pintoggle"
2e41f     00          | 	byte	0
2e420                 | LR__4963
2e420     70 69 6E 77 
2e424     72 69 74 65 | 	byte	"pinwrite"
2e428     00          | 	byte	0
2e429                 | LR__4964
2e429     70 6C 61 79 | 	byte	"play"
2e42d     00          | 	byte	0
2e42e                 | LR__4965
2e42e     70 2E       | 	byte	"p."
2e430     00          | 	byte	0
2e431                 | LR__4966
2e431     70 6C 6F 74 | 	byte	"plot"
2e435     00          | 	byte	0
2e436                 | LR__4967
2e436     70 6C 2E    | 	byte	"pl."
2e439     00          | 	byte	0
2e43a                 | LR__4968
2e43a     70 6F 6B 65 | 	byte	"poke"
2e43e     00          | 	byte	0
2e43f                 | LR__4969
2e43f     70 6F 70    | 	byte	"pop"
2e442     00          | 	byte	0
2e443                 | LR__4970
2e443     70 6F 73 69 
2e447     74 69 6F 6E | 	byte	"position"
2e44b     00          | 	byte	0
2e44c                 | LR__4971
2e44c     70 6F 73 2E | 	byte	"pos."
2e450     00          | 	byte	0
2e451                 | LR__4972
2e451     70 72 69 6E 
2e455     74          | 	byte	"print"
2e456     00          | 	byte	0
2e457                 | LR__4973
2e457     3F          | 	byte	"?"
2e458     00          | 	byte	0
2e459                 | LR__4974
2e459     72 61 64    | 	byte	"rad"
2e45c     00          | 	byte	0
2e45d                 | LR__4975
2e45d     72 65 6C 65 
2e461     61 73 65    | 	byte	"release"
2e464     00          | 	byte	0
2e465                 | LR__4976
2e465     72 65 74 75 
2e469     72 6E       | 	byte	"return"
2e46b     00          | 	byte	0
2e46c                 | LR__4977
2e46c     72 75 6E    | 	byte	"run"
2e46f     00          | 	byte	0
2e470                 | LR__4978
2e470     73 61 76 65 | 	byte	"save"
2e474     00          | 	byte	0
2e475                 | LR__4979
2e475     73 2E       | 	byte	"s."
2e477     00          | 	byte	0
2e478                 | LR__4980
2e478     73 65 74 64 
2e47c     65 6C 61 79 | 	byte	"setdelay"
2e480     00          | 	byte	0
2e481                 | LR__4981
2e481     73 65 74 65 
2e485     6E 76       | 	byte	"setenv"
2e487     00          | 	byte	0
2e488                 | LR__4982
2e488     73 65 74 6C 
2e48c     65 6E       | 	byte	"setlen"
2e48e     00          | 	byte	0
2e48f                 | LR__4983
2e48f     73 65 74 70 
2e493     61 6E       | 	byte	"setpan"
2e495     00          | 	byte	0
2e496                 | LR__4984
2e496     73 65 74 73 
2e49a     75 73 74 61 
2e49e     69 6E       | 	byte	"setsustain"
2e4a0     00          | 	byte	0
2e4a1                 | LR__4985
2e4a1     73 65 74 76 
2e4a5     6F 6C       | 	byte	"setvol"
2e4a7     00          | 	byte	0
2e4a8                 | LR__4986
2e4a8     73 65 74 77 
2e4ac     61 76 65    | 	byte	"setwave"
2e4af     00          | 	byte	0
2e4b0                 | LR__4987
2e4b0     73 6F 75 6E 
2e4b4     64          | 	byte	"sound"
2e4b5     00          | 	byte	0
2e4b6                 | LR__4988
2e4b6     73 6F 2E    | 	byte	"so."
2e4b9     00          | 	byte	0
2e4ba                 | LR__4989
2e4ba     73 70 72 69 
2e4be     74 65       | 	byte	"sprite"
2e4c0     00          | 	byte	0
2e4c1                 | LR__4990
2e4c1     73 70 2E    | 	byte	"sp."
2e4c4     00          | 	byte	0
2e4c5                 | LR__4991
2e4c5     74 68 65 6E | 	byte	"then"
2e4c9     00          | 	byte	0
2e4ca                 | LR__4992
2e4ca     77 61 69 74 
2e4ce     6D 73       | 	byte	"waitms"
2e4d0     00          | 	byte	0
2e4d1                 | LR__4993
2e4d1     77 61 69 74 
2e4d5     63 6C 6F 63 
2e4d9     6B          | 	byte	"waitclock"
2e4da     00          | 	byte	0
2e4db                 | LR__4994
2e4db     77 63 2E    | 	byte	"wc."
2e4de     00          | 	byte	0
2e4df                 | LR__4995
2e4df     77 61 69 74 
2e4e3     76 62 6C    | 	byte	"waitvbl"
2e4e6     00          | 	byte	0
2e4e7                 | LR__4996
2e4e7     77 76 2E    | 	byte	"wv."
2e4ea     00          | 	byte	0
2e4eb                 | LR__4997
2e4eb     77 78 70 69 
2e4ef     6E          | 	byte	"wxpin"
2e4f0     00          | 	byte	0
2e4f1                 | LR__4998
2e4f1     77 79 70 69 
2e4f5     6E          | 	byte	"wypin"
2e4f6     00          | 	byte	0
2e4f7                 | LR__4999
2e4f7     61 62 73    | 	byte	"abs"
2e4fa     00          | 	byte	0
2e4fb                 | LR__5000
2e4fb     61 63 6F 73 | 	byte	"acos"
2e4ff     00          | 	byte	0
2e500                 | LR__5001
2e500     61 64 72    | 	byte	"adr"
2e503     00          | 	byte	0
2e504                 | LR__5002
2e504     61 64 64 72 | 	byte	"addr"
2e508     00          | 	byte	0
2e509                 | LR__5003
2e509     61 73 63    | 	byte	"asc"
2e50c     00          | 	byte	0
2e50d                 | LR__5004
2e50d     61 73 69 6E | 	byte	"asin"
2e511     00          | 	byte	0
2e512                 | LR__5005
2e512     61 74 6E    | 	byte	"atn"
2e515     00          | 	byte	0
2e516                 | LR__5006
2e516     62 69 6E 24 | 	byte	"bin$"
2e51a     00          | 	byte	0
2e51b                 | LR__5007
2e51b     63 68 72 24 | 	byte	"chr$"
2e51f     00          | 	byte	0
2e520                 | LR__5008
2e520     63 6F 73    | 	byte	"cos"
2e523     00          | 	byte	0
2e524                 | LR__5009
2e524     64 70 65 65 
2e528     6B          | 	byte	"dpeek"
2e529     00          | 	byte	0
2e52a                 | LR__5010
2e52a     66 72 65    | 	byte	"fre"
2e52d     00          | 	byte	0
2e52e                 | LR__5011
2e52e     67 65 74 70 
2e532     69 78 65 6C | 	byte	"getpixel"
2e536     00          | 	byte	0
2e537                 | LR__5012
2e537     67 65 2E    | 	byte	"ge."
2e53a     00          | 	byte	0
2e53b                 | LR__5013
2e53b     67 65 74 65 
2e53f     6E 76 73 75 
2e543     73 74 61 69 
2e547     6E          | 	byte	"getenvsustain"
2e548     00          | 	byte	0
2e549                 | LR__5014
2e549     67 65 74 6E 
2e54d     6F 74 65 76 
2e551     61 6C 75 65 | 	byte	"getnotevalue"
2e555     00          | 	byte	0
2e556                 | LR__5015
2e556     67 65 74 74 
2e55a     69 6D 65    | 	byte	"gettime"
2e55d     00          | 	byte	0
2e55e                 | LR__5016
2e55e     68 65 78 24 | 	byte	"hex$"
2e562     00          | 	byte	0
2e563                 | LR__5017
2e563     69 6E 6B 65 
2e567     79 24       | 	byte	"inkey$"
2e569     00          | 	byte	0
2e56a                 | LR__5018
2e56a     6C 65 66 74 
2e56e     24          | 	byte	"left$"
2e56f     00          | 	byte	0
2e570                 | LR__5019
2e570     6C 65 6E    | 	byte	"len"
2e573     00          | 	byte	0
2e574                 | LR__5020
2e574     6C 70 65 65 
2e578     6B          | 	byte	"lpeek"
2e579     00          | 	byte	0
2e57a                 | LR__5021
2e57a     6D 69 64 24 | 	byte	"mid$"
2e57e     00          | 	byte	0
2e57f                 | LR__5022
2e57f     6D 6F 75 73 
2e583     65 6B       | 	byte	"mousek"
2e585     00          | 	byte	0
2e586                 | LR__5023
2e586     6D 6F 75 73 
2e58a     65 77       | 	byte	"mousew"
2e58c     00          | 	byte	0
2e58d                 | LR__5024
2e58d     6D 6F 75 73 
2e591     65 78       | 	byte	"mousex"
2e593     00          | 	byte	0
2e594                 | LR__5025
2e594     6D 6F 75 73 
2e598     65 79       | 	byte	"mousey"
2e59a     00          | 	byte	0
2e59b                 | LR__5026
2e59b     70 65 65 6B | 	byte	"peek"
2e59f     00          | 	byte	0
2e5a0                 | LR__5027
2e5a0     70 69 6E 72 
2e5a4     65 61 64    | 	byte	"pinread"
2e5a7     00          | 	byte	0
2e5a8                 | LR__5028
2e5a8     72 64 70 69 
2e5ac     6E          | 	byte	"rdpin"
2e5ad     00          | 	byte	0
2e5ae                 | LR__5029
2e5ae     72 69 67 68 
2e5b2     74 24       | 	byte	"right$"
2e5b4     00          | 	byte	0
2e5b5                 | LR__5030
2e5b5     72 71 70 69 
2e5b9     6E          | 	byte	"rqpin"
2e5ba     00          | 	byte	0
2e5bb                 | LR__5031
2e5bb     72 6E 64    | 	byte	"rnd"
2e5be     00          | 	byte	0
2e5bf                 | LR__5032
2e5bf     73 69 6E    | 	byte	"sin"
2e5c2     00          | 	byte	0
2e5c3                 | LR__5033
2e5c3     73 71 72    | 	byte	"sqr"
2e5c6     00          | 	byte	0
2e5c7                 | LR__5034
2e5c7     73 74 69 63 
2e5cb     6B          | 	byte	"stick"
2e5cc     00          | 	byte	0
2e5cd                 | LR__5035
2e5cd     73 74 72 69 
2e5d1     67          | 	byte	"strig"
2e5d2     00          | 	byte	0
2e5d3                 | LR__5036
2e5d3     73 74 72 24 | 	byte	"str$"
2e5d7     00          | 	byte	0
2e5d8                 | LR__5037
2e5d8     74 61 6E    | 	byte	"tan"
2e5db     00          | 	byte	0
2e5dc                 | LR__5038
2e5dc     76 61 6C    | 	byte	"val"
2e5df     00          | 	byte	0
2e5e0                 | LR__5039
2e5e0     76 61 72 70 
2e5e4     74 72       | 	byte	"varptr"
2e5e6     00          | 	byte	0
2e5e7                 | LR__5040
2e5e7     61          | 	byte	"a"
2e5e8     00          | 	byte	0
2e5e9                 | LR__5041
2e5e9     7A          | 	byte	"z"
2e5ea     00          | 	byte	0
2e5eb                 | LR__5042
2e5eb     5F          | 	byte	"_"
2e5ec     00          | 	byte	0
2e5ed                 | LR__5043
2e5ed     61          | 	byte	"a"
2e5ee     00          | 	byte	0
2e5ef                 | LR__5044
2e5ef     7A          | 	byte	"z"
2e5f0     00          | 	byte	0
2e5f1                 | LR__5045
2e5f1     30          | 	byte	"0"
2e5f2     00          | 	byte	0
2e5f3                 | LR__5046
2e5f3     39          | 	byte	"9"
2e5f4     00          | 	byte	0
2e5f5                 | LR__5047
2e5f5     5F          | 	byte	"_"
2e5f6     00          | 	byte	0
2e5f7                 | LR__5048
2e5f7     2E          | 	byte	"."
2e5f8     00          | 	byte	0
2e5f9                 | LR__5049
2e5f9     61          | 	byte	"a"
2e5fa     00          | 	byte	0
2e5fb                 | LR__5050
2e5fb     7A          | 	byte	"z"
2e5fc     00          | 	byte	0
2e5fd                 | LR__5051
2e5fd     30          | 	byte	"0"
2e5fe     00          | 	byte	0
2e5ff                 | LR__5052
2e5ff     39          | 	byte	"9"
2e600     00          | 	byte	0
2e601                 | LR__5053
2e601     5F          | 	byte	"_"
2e602     00          | 	byte	0
2e603                 | LR__5054
2e603     24          | 	byte	"$"
2e604     00          | 	byte	0
2e605                 | LR__5055
2e605     25          | 	byte	"%"
2e606     00          | 	byte	0
2e607                 | LR__5056
2e607     21          | 	byte	"!"
2e608     00          | 	byte	0
2e609                 | LR__5057
2e609     30          | 	byte	"0"
2e60a     00          | 	byte	0
2e60b                 | LR__5058
2e60b     39          | 	byte	"9"
2e60c     00          | 	byte	0
2e60d                 | LR__5059
2e60d     2E          | 	byte	"."
2e60e     00          | 	byte	0
2e60f                 | LR__5060
2e60f     24          | 	byte	"$"
2e610     00          | 	byte	0
2e611                 | LR__5061
2e611     25          | 	byte	"%"
2e612     00          | 	byte	0
2e613                 | LR__5062
2e613     2D          | 	byte	"-"
2e614     00          | 	byte	0
2e615                 | LR__5063
2e615     2E          | 	byte	"."
2e616     00          | 	byte	0
2e617                 | LR__5064
2e617     30          | 	byte	"0"
2e618     00          | 	byte	0
2e619                 | LR__5065
2e619     39          | 	byte	"9"
2e61a     00          | 	byte	0
2e61b                 | LR__5066
2e61b     5F          | 	byte	"_"
2e61c     00          | 	byte	0
2e61d                 | LR__5067
2e61d     2E          | 	byte	"."
2e61e     00          | 	byte	0
2e61f                 | LR__5068
2e61f     45          | 	byte	"E"
2e620     00          | 	byte	0
2e621                 | LR__5069
2e621     65          | 	byte	"e"
2e622     00          | 	byte	0
2e623                 | LR__5070
2e623     2D          | 	byte	"-"
2e624     00          | 	byte	0
2e625                 | LR__5071
2e625     2D          | 	byte	"-"
2e626     00          | 	byte	0
2e627                 | LR__5072
2e627     65          | 	byte	"e"
2e628     00          | 	byte	0
2e629                 | LR__5073
2e629     2E          | 	byte	"."
2e62a     00          | 	byte	0
2e62b                 | LR__5074
2e62b     45          | 	byte	"E"
2e62c     00          | 	byte	0
2e62d                 | LR__5075
2e62d     65          | 	byte	"e"
2e62e     00          | 	byte	0
2e62f                 | LR__5076
2e62f     30          | 	byte	"0"
2e630     00          | 	byte	0
2e631                 | LR__5077
2e631     39          | 	byte	"9"
2e632     00          | 	byte	0
2e633                 | LR__5078
2e633     24          | 	byte	"$"
2e634     00          | 	byte	0
2e635                 | LR__5079
2e635     25          | 	byte	"%"
2e636     00          | 	byte	0
2e637                 | LR__5080
2e637     2D          | 	byte	"-"
2e638     00          | 	byte	0
2e639                 | LR__5081
2e639     30          | 	byte	"0"
2e63a     00          | 	byte	0
2e63b                 | LR__5082
2e63b     39          | 	byte	"9"
2e63c     00          | 	byte	0
2e63d                 | LR__5083
2e63d     5F          | 	byte	"_"
2e63e     00          | 	byte	0
2e63f                 | LR__5084
2e63f     30          | 	byte	"0"
2e640     00          | 	byte	0
2e641                 | LR__5085
2e641     39          | 	byte	"9"
2e642     00          | 	byte	0
2e643                 | LR__5086
2e643     5F          | 	byte	"_"
2e644     00          | 	byte	0
2e645                 | LR__5087
2e645     22          | 	byte	34
2e646     00          | 	byte	0
2e647                 | LR__5088
2e647     22          | 	byte	34
2e648     00          | 	byte	0
2e649                 | LR__5089
2e649     44 69 6D 3A 
2e64d     20 61 74 20 
2e651     6C 69 6E 65 
2e655     20          | 	byte	"Dim: at line "
2e656     00          | 	byte	0
2e657                 | LR__5090
2e657     3A 20 77 61 
2e65b     72 6E 69 6E 
2e65f     67 3A 20 74 
2e663     68 65 20 76 
2e667     61 72 69 61 
2e66b     62 6C 65 20 
2e66f     65 78 69 73 
2e673     74 65 64 2E | 	byte	": warning: the variable existed."
2e677     00          | 	byte	0
2e678                 | LR__5091
2e678     28          | 	byte	"("
2e679     00          | 	byte	0
2e67a                 | LR__5092
2e67a     61 73       | 	byte	"as"
2e67c     00          | 	byte	0
2e67d                 | LR__5093
2e67d     61 73       | 	byte	"as"
2e67f     00          | 	byte	0
2e680                 | LR__5094
2e680     2C          | 	byte	","
2e681     00          | 	byte	0
2e682                 | LR__5095
2e682     29          | 	byte	")"
2e683     00          | 	byte	0
2e684                 | LR__5096
2e684     29          | 	byte	")"
2e685     00          | 	byte	0
2e686                 | LR__5097
2e686     61 73       | 	byte	"as"
2e688     00          | 	byte	0
2e689                 | LR__5098
2e689     62 79 74 65 | 	byte	"byte"
2e68d     00          | 	byte	0
2e68e                 | LR__5099
2e68e     75 62 79 74 
2e692     65          | 	byte	"ubyte"
2e693     00          | 	byte	0
2e694                 | LR__5100
2e694     73 68 6F 72 
2e698     74          | 	byte	"short"
2e699     00          | 	byte	0
2e69a                 | LR__5101
2e69a     75 73 68 6F 
2e69e     72 74       | 	byte	"ushort"
2e6a0     00          | 	byte	0
2e6a1                 | LR__5102
2e6a1     6C 6F 6E 67 | 	byte	"long"
2e6a5     00          | 	byte	0
2e6a6                 | LR__5103
2e6a6     69 6E 74 65 
2e6aa     67 65 72    | 	byte	"integer"
2e6ad     00          | 	byte	0
2e6ae                 | LR__5104
2e6ae     75 6C 6F 6E 
2e6b2     67          | 	byte	"ulong"
2e6b3     00          | 	byte	0
2e6b4                 | LR__5105
2e6b4     69 6E 74 36 
2e6b8     34          | 	byte	"int64"
2e6b9     00          | 	byte	0
2e6ba                 | LR__5106
2e6ba     75 69 6E 74 
2e6be     36 34       | 	byte	"uint64"
2e6c0     00          | 	byte	0
2e6c1                 | LR__5107
2e6c1     73 69 6E 67 
2e6c5     6C 65       | 	byte	"single"
2e6c7     00          | 	byte	0
2e6c8                 | LR__5108
2e6c8     64 6F 75 62 
2e6cc     6C 65       | 	byte	"double"
2e6ce     00          | 	byte	0
2e6cf                 | LR__5109
2e6cf     73 74 72 69 
2e6d3     6E 67       | 	byte	"string"
2e6d5     00          | 	byte	0
2e6d6                 | LR__5110
2e6d6     74 6F       | 	byte	"to"
2e6d8     00          | 	byte	0
2e6d9                 | LR__5111
2e6d9     73 74 65 70 | 	byte	"step"
2e6dd     00          | 	byte	0
2e6de                 | LR__5112
2e6de     73 2E       | 	byte	"s."
2e6e0     00          | 	byte	0
2e6e1                 | LR__5113
2e6e1     24          | 	byte	"$"
2e6e2     00          | 	byte	0
2e6e3                 | LR__5114
2e6e3     26 68       | 	byte	"&h"
2e6e5     00          | 	byte	0
2e6e6                 | LR__5115
2e6e6     25          | 	byte	"%"
2e6e7     00          | 	byte	0
2e6e8                 | LR__5116
2e6e8     26 62       | 	byte	"&b"
2e6ea     00          | 	byte	0
2e6eb                 | LR__5117
2e6eb                 | 	byte	
2e6eb     00          | 	byte	0
2e6ec                 | LR__5118
2e6ec     2F          | 	byte	"/"
2e6ed     00          | 	byte	0
2e6ee                 | LR__5119
2e6ee                 | 	byte	
2e6ee     00          | 	byte	0
2e6ef                 | LR__5120
2e6ef     53 61 76 65 
2e6f3     64 20 61 73 
2e6f7     20          | 	byte	"Saved as "
2e6f8     00          | 	byte	0
2e6f9                 | LR__5121
2e6f9     2F          | 	byte	"/"
2e6fa     00          | 	byte	0
2e6fb                 | LR__5122
2e6fb                 | 	byte	
2e6fb     00          | 	byte	0
2e6fc                 | LR__5123
2e6fc     2F          | 	byte	"/"
2e6fd     00          | 	byte	0
2e6fe                 | LR__5124
2e6fe     2F          | 	byte	"/"
2e6ff     00          | 	byte	0
2e700                 | LR__5125
2e700     2E 62 61 73 | 	byte	".bas"
2e704     00          | 	byte	0
2e705                 | LR__5126
2e705     53 79 73 74 
2e709     65 6D 20 65 
2e70d     72 72 6F 72 
2e711     20          | 	byte	"System error "
2e712     00          | 	byte	0
2e713                 | LR__5127
2e713     3A 20       | 	byte	": "
2e715     00          | 	byte	0
2e716                 | LR__5128
2e716     2E 62 61 73 | 	byte	".bas"
2e71a     00          | 	byte	0
2e71b                 | LR__5129
2e71b     2F          | 	byte	"/"
2e71c     00          | 	byte	0
2e71d                 | LR__5130
2e71d     30          | 	byte	"0"
2e71e     00          | 	byte	0
2e71f                 | LR__5131
2e71f     39          | 	byte	"9"
2e720     00          | 	byte	0
2e721                 | LR__5132
2e721                 | 	byte	
2e721     00          | 	byte	0
2e722                 | LR__5133
2e722     4C 6F 61 64 
2e726     65 64 20    | 	byte	"Loaded "
2e729     00          | 	byte	0
2e72a                 | LR__5134
2e72a     2F          | 	byte	"/"
2e72b     00          | 	byte	0
2e72c                 | LR__5135
2e72c     53 74 6F 70 
2e730     70 65 64 20 
2e734     61 74 20 6C 
2e738     69 6E 65 20 | 	byte	"Stopped at line "
2e73c     00          | 	byte	0
2e73d                 | LR__5136
2e73d                 | 	byte	
2e73d     00          | 	byte	0
2e73e                 | LR__5137
2e73e                 | 	byte	
2e73e     00          | 	byte	0
2e73f                 | LR__5138
2e73f     2F 73 64 2F 
2e743     6D 65 64 69 
2e747     61 2F 68 2F | 	byte	"/sd/media/h/"
2e74b     00          | 	byte	0
2e74c                 | LR__5139
2e74c     53 79 73 74 
2e750     65 6D 20 65 
2e754     72 72 6F 72 
2e758     20          | 	byte	"System error "
2e759     00          | 	byte	0
2e75a                 | LR__5140
2e75a     3A 20       | 	byte	": "
2e75c     00          | 	byte	0
2e75d                 | LR__5141
2e75d                 | 	byte	
2e75d     00          | 	byte	0
2e75e                 | LR__5142
2e75e                 | 	byte	
2e75e     00          | 	byte	0
2e75f                 | LR__5143
2e75f     2F 73 64 2F 
2e763     6D 65 64 69 
2e767     61 2F 73 2F | 	byte	"/sd/media/s/"
2e76b     00          | 	byte	0
2e76c                 | LR__5144
2e76c     53 79 73 74 
2e770     65 6D 20 65 
2e774     72 72 6F 72 
2e778     20          | 	byte	"System error "
2e779     00          | 	byte	0
2e77a                 | LR__5145
2e77a     3A 20       | 	byte	": "
2e77c     00          | 	byte	0
2e77d                 | LR__5146
2e77d     6E 6F 6E 61 
2e781     6D 65 2E 62 
2e785     61 73       | 	byte	"noname.bas"
2e787     00          | 	byte	0
2e788                 | LR__5147
2e788     45 72 72 6F 
2e78c     72 20       | 	byte	"Error "
2e78e     00          | 	byte	0
2e78f                 | LR__5148
2e78f     3A 20       | 	byte	": "
2e791     00          | 	byte	0
2e792                 | LR__5149
2e792                 | 	byte	
2e792     00          | 	byte	0
2e793                 | LR__5150
2e793                 | 	byte	
2e793     00          | 	byte	0
2e794                 | LR__5151
2e794     72 6E 64 3A 
2e798     20          | 	byte	"rnd: "
2e799     00          | 	byte	0
2e79a                 | LR__5152
2e79a     72 6E 64 3A 
2e79e     20          | 	byte	"rnd: "
2e79f     00          | 	byte	0
2e7a0                 | LR__5153
2e7a0     67 65 74 65 
2e7a4     6E 76 73 75 
2e7a8     73 74 61 69 
2e7ac     6E 3A 20    | 	byte	"getenvsustain: "
2e7af     00          | 	byte	0
2e7b0                 | LR__5154
2e7b0     73 69 6E 3A 
2e7b4     20          | 	byte	"sin: "
2e7b5     00          | 	byte	0
2e7b6                 | LR__5155
2e7b6     6D 69 64 24 
2e7ba     3A 20       | 	byte	"mid$: "
2e7bc     00          | 	byte	0
2e7bd                 | LR__5156
2e7bd     6D 69 64 24 
2e7c1     3A 20       | 	byte	"mid$: "
2e7c3     00          | 	byte	0
2e7c4                 | LR__5157
2e7c4     72 69 67 68 
2e7c8     74 24 3A 20 | 	byte	"right$: "
2e7cc     00          | 	byte	0
2e7cd                 | LR__5158
2e7cd     72 69 67 68 
2e7d1     74 24 3A 20 | 	byte	"right$: "
2e7d5     00          | 	byte	0
2e7d6                 | LR__5159
2e7d6     6C 65 66 74 
2e7da     24 3A 20    | 	byte	"left$: "
2e7dd     00          | 	byte	0
2e7de                 | LR__5160
2e7de     6C 65 66 74 
2e7e2     24 3A 20    | 	byte	"left$: "
2e7e5     00          | 	byte	0
2e7e6                 | LR__5161
2e7e6     61 73 63 3A 
2e7ea     20          | 	byte	"asc: "
2e7eb     00          | 	byte	0
2e7ec                 | LR__5162
2e7ec     61 73 63 3A 
2e7f0     20          | 	byte	"asc: "
2e7f1     00          | 	byte	0
2e7f2                 | LR__5163
2e7f2     6C 65 6E 3A 
2e7f6     20          | 	byte	"len: "
2e7f7     00          | 	byte	0
2e7f8                 | LR__5164
2e7f8     6C 65 6E 3A 
2e7fc     20          | 	byte	"len: "
2e7fd     00          | 	byte	0
2e7fe                 | LR__5165
2e7fe     63 68 72 24 
2e802     3A 20       | 	byte	"chr$: "
2e804     00          | 	byte	0
2e805                 | LR__5166
2e805     76 61 6C 3A 
2e809     20          | 	byte	"val: "
2e80a     00          | 	byte	0
2e80b                 | LR__5167
2e80b     76 61 6C 3A 
2e80f     20          | 	byte	"val: "
2e810     00          | 	byte	0
2e811                 | LR__5168
2e811     24          | 	byte	"$"
2e812     00          | 	byte	0
2e813                 | LR__5169
2e813     26 68       | 	byte	"&h"
2e815     00          | 	byte	0
2e816                 | LR__5170
2e816     25          | 	byte	"%"
2e817     00          | 	byte	0
2e818                 | LR__5171
2e818     26 62       | 	byte	"&b"
2e81a     00          | 	byte	0
2e81b                 | LR__5172
2e81b     68 65 78 24 
2e81f     3A 20       | 	byte	"hex$: "
2e821     00          | 	byte	0
2e822                 | LR__5173
2e822     62 69 6E 24 
2e826     3A 20       | 	byte	"bin$: "
2e828     00          | 	byte	0
2e829                 | LR__5174
2e829     63 6F 73 3A 
2e82d     20          | 	byte	"cos: "
2e82e     00          | 	byte	0
2e82f                 | LR__5175
2e82f     74 61 6E 3A 
2e833     20          | 	byte	"tan: "
2e834     00          | 	byte	0
2e835                 | LR__5176
2e835     61 73 69 6E 
2e839     3A 20       | 	byte	"asin: "
2e83b     00          | 	byte	0
2e83c                 | LR__5177
2e83c     61 63 6F 73 
2e840     3A 20       | 	byte	"acos: "
2e842     00          | 	byte	0
2e843                 | LR__5178
2e843     61 74 6E 3A 
2e847     20          | 	byte	"atn: "
2e848     00          | 	byte	0
2e849                 | LR__5179
2e849     73 71 72 3A 
2e84d     20          | 	byte	"sqr: "
2e84e     00          | 	byte	0
2e84f                 | LR__5180
2e84f     73 74 69 63 
2e853     6B 3A 20    | 	byte	"stick: "
2e856     00          | 	byte	0
2e857                 | LR__5181
2e857     73 74 72 69 
2e85b     67 3A 20    | 	byte	"strig: "
2e85e     00          | 	byte	0
2e85f                 | LR__5182
2e85f     67 65 74 70 
2e863     69 78 65 6C 
2e867     3A 20       | 	byte	"getpixel: "
2e869     00          | 	byte	0
2e86a                 | LR__5183
2e86a     20 42 41 53 
2e86e     49 43 20 62 
2e872     79 74 65 73 
2e876     20 66 72 65 
2e87a     65          | 	byte	" BASIC bytes free"
2e87b     00          | 	byte	0
2e87c                 | LR__5184
2e87c                 | 	byte	
2e87c     00          | 	byte	0
2e87d                 | LR__5185
2e87d     2F 73 64 2F 
2e881     62 61 73    | 	byte	"/sd/bas"
2e884     00          | 	byte	0
2e885                 | LR__5186
2e885     57 6F 72 6B 
2e889     69 6E 67 20 
2e88d     64 69 72 65 
2e891     63 74 6F 72 
2e895     79 3A 20    | 	byte	"Working directory: "
2e898     00          | 	byte	0
2e899                 | LR__5187
2e899     2A          | 	byte	"*"
2e89a     00          | 	byte	0
2e89b                 | LR__5188
2e89b                 | 	byte	
2e89b     00          | 	byte	0
2e89c                 | LR__5189
2e89c     5B 64 69 72 
2e8a0     5D 20       | 	byte	"[dir] "
2e8a2     00          | 	byte	0
2e8a3                 | LR__5190
2e8a3     2A          | 	byte	"*"
2e8a4     00          | 	byte	0
2e8a5                 | LR__5191
2e8a5                 | 	byte	
2e8a5     00          | 	byte	0
2e8a6                 | LR__5192
2e8a6     2D 2D 2D 2D 
2e8aa     2D 6D 6F 72 
2e8ae     65 2C 20 70 
2e8b2     72 65 73 73 
2e8b6     20 61 6E 79 
2e8ba     20 6B 65 79 | 	byte	"-----more, press any key"
2e8be     00          | 	byte	0
2e8bf                 | LR__5193
2e8bf     20 20 20 20 
      ...             
2e8d7     20 20 20 20 
2e8db     20          | 	byte	"                             "
2e8dc     00          | 	byte	0
2e8dd                 | LR__5194
2e8dd     2F          | 	byte	"/"
2e8de     00          | 	byte	0
2e8df                 | LR__5195
2e8df     2F 73 64 2F 
2e8e3     62 69 6E 2F | 	byte	"/sd/bin/"
2e8e7     00          | 	byte	0
2e8e8                 | LR__5196
2e8e8     53 79 73 74 
2e8ec     65 6D 20 65 
2e8f0     72 72 6F 72 
2e8f4     20          | 	byte	"System error "
2e8f5     00          | 	byte	0
2e8f6                 | LR__5197
2e8f6     3A 20       | 	byte	": "
2e8f8     00          | 	byte	0
2e8f9                 | LR__5198
2e8f9                 | 	byte	
2e8f9     00          | 	byte	0
2e8fa                 | LR__5199
2e8fa     45 78 70 65 
2e8fe     63 74 65 64 
2e902     20 6E 75 6D 
2e906     62 65 72 2C 
2e90a     20 67 6F 74 
2e90e     20 73 6F 6D 
2e912     65 74 68 69 
2e916     6E 67 20 65 
2e91a     6C 73 65 2E | 	byte	"Expected number, got something else."
2e91e     00          | 	byte	0
2e91f                 | LR__5200
2e91f     43 61 6E 6E 
2e923     6F 74 20 61 
2e927     64 64 20 61 
2e92b     20 6E 75 6D 
2e92f     62 65 72 20 
2e933     74 6F 20 61 
2e937     20 73 74 72 
2e93b     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2e93f     00          | 	byte	0
2e940                 | LR__5201
2e940     43 61 6E 6E 
2e944     6F 74 20 73 
2e948     75 62 73 74 
2e94c     72 61 63 74 
2e950     20 73 74 72 
2e954     69 6E 67 73 
2e958     2E          | 	byte	"Cannot substract strings."
2e959     00          | 	byte	0
2e95a                 | LR__5202
2e95a     55 6E 6B 6E 
2e95e     6F 77 6E 20 
2e962     65 72 72 6F 
2e966     72 20 77 68 
2e96a     69 6C 65 20 
2e96e     61 64 64 69 
2e972     6E 67 2E    | 	byte	"Unknown error while adding."
2e975     00          | 	byte	0
2e976                 | LR__5203
2e976     55 6E 6B 6E 
2e97a     6F 77 6E 20 
2e97e     65 72 72 6F 
2e982     72 20 77 68 
2e986     69 6C 65 20 
2e98a     73 75 62 73 
2e98e     74 72 61 63 
2e992     74 69 6E 67 
2e996     2E          | 	byte	"Unknown error while substracting."
2e997     00          | 	byte	0
2e998                 | LR__5204
2e998     43 61 6E 6E 
2e99c     6F 74 20 64 
2e9a0     6F 20 6C 6F 
2e9a4     67 69 63 20 
2e9a8     6F 70 65 72 
2e9ac     61 74 69 6F 
2e9b0     6E 20 6F 6E 
2e9b4     20 73 74 72 
2e9b8     69 6E 67 20 
2e9bc     6F 72 20 66 
2e9c0     6C 6F 61 74 
2e9c4     2E          | 	byte	"Cannot do logic operation on string or float."
2e9c5     00          | 	byte	0
2e9c6                 | LR__5205
2e9c6     55 6E 6B 6E 
2e9ca     6F 77 6E 20 
2e9ce     65 72 72 6F 
2e9d2     72 20 77 68 
2e9d6     69 6C 65 20 
2e9da     64 6F 69 6E 
2e9de     67 20 6C 6F 
2e9e2     67 69 63 20 
2e9e6     6F 70 65 72 
2e9ea     61 74 69 6F 
2e9ee     6E 2E       | 	byte	"Unknown error while doing logic operation."
2e9f0     00          | 	byte	0
2e9f1                 | LR__5206
2e9f1     43 61 6E 6E 
2e9f5     6F 74 20 6D 
2e9f9     75 6C 74 69 
2e9fd     70 6C 79 20 
2ea01     73 74 72 69 
2ea05     6E 67 73 2E | 	byte	"Cannot multiply strings."
2ea09     00          | 	byte	0
2ea0a                 | LR__5207
2ea0a     55 6E 6B 6E 
2ea0e     6F 77 6E 20 
2ea12     65 72 72 6F 
2ea16     72 20 77 68 
2ea1a     69 6C 65 20 
2ea1e     6D 75 6C 74 
2ea22     69 70 6C 79 
2ea26     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2ea2a     00          | 	byte	0
2ea2b                 | LR__5208
2ea2b     43 61 6E 6E 
2ea2f     6F 74 20 64 
2ea33     69 76 69 64 
2ea37     65 20 73 74 
2ea3b     72 69 6E 67 
2ea3f     73 2E       | 	byte	"Cannot divide strings."
2ea41     00          | 	byte	0
2ea42                 | LR__5209
2ea42     55 6E 6B 6E 
2ea46     6F 77 6E 20 
2ea4a     65 72 72 6F 
2ea4e     72 20 77 68 
2ea52     69 6C 65 20 
2ea56     64 69 76 69 
2ea5a     64 69 6E 67 
2ea5e     2E          | 	byte	"Unknown error while dividing."
2ea5f     00          | 	byte	0
2ea60                 | LR__5210
2ea60     43 61 6E 6E 
2ea64     6F 74 20 63 
2ea68     6F 6D 70 75 
2ea6c     74 65 20 61 
2ea70     20 70 6F 77 
2ea74     65 72 20 6F 
2ea78     66 20 61 20 
2ea7c     73 74 72 69 
2ea80     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2ea83     00          | 	byte	0
2ea84                 | LR__5211
2ea84     55 6E 6B 6E 
2ea88     6F 77 6E 20 
2ea8c     65 72 72 6F 
2ea90     72 20 77 68 
2ea94     69 6C 65 20 
2ea98     63 6F 6D 70 
2ea9c     75 74 69 6E 
2eaa0     67 20 61 20 
2eaa4     70 6F 77 65 
2eaa8     72 2E       | 	byte	"Unknown error while computing a power."
2eaaa     00          | 	byte	0
2eaab                 | LR__5212
2eaab     52 69 67 68 
2eaaf     74 20 70 61 
2eab3     72 65 6E 74 
2eab7     68 65 73 69 
2eabb     73 20 65 78 
2eabf     70 65 63 74 
2eac3     65 64 2E    | 	byte	"Right parenthesis expected."
2eac6     00          | 	byte	0
2eac7                 | LR__5213
2eac7     45 78 70 65 
2eacb     63 74 65 64 
2eacf     20 73 74 72 
2ead3     69 6E 67 2E | 	byte	"Expected string."
2ead7     00          | 	byte	0
2ead8                 | LR__5214
2ead8     45 78 70 65 
2eadc     63 74 65 64 
2eae0     20 66 6C 6F 
2eae4     61 74 2E    | 	byte	"Expected float."
2eae7     00          | 	byte	0
2eae8                 | LR__5215
2eae8     45 78 70 65 
2eaec     63 74 65 64 
2eaf0     20 75 6E 73 
2eaf4     69 67 6E 65 
2eaf8     64 20 69 6E 
2eafc     74 65 67 65 
2eb00     72 2E       | 	byte	"Expected unsigned integer."
2eb02     00          | 	byte	0
2eb03                 | LR__5216
2eb03     45 78 70 65 
2eb07     63 74 65 64 
2eb0b     20 69 6E 74 
2eb0f     65 67 65 72 
2eb13     2E          | 	byte	"Expected integer."
2eb14     00          | 	byte	0
2eb15                 | LR__5217
2eb15     4E 6F 20 6D 
2eb19     6F 72 65 20 
2eb1d     76 61 72 69 
2eb21     61 62 6C 65 
2eb25     20 73 6C 6F 
2eb29     74 73 2E    | 	byte	"No more variable slots."
2eb2c     00          | 	byte	0
2eb2d                 | LR__5218
2eb2d     56 61 72 69 
2eb31     61 62 6C 65 
2eb35     20 6E 6F 74 
2eb39     20 66 6F 75 
2eb3d     6E 64 2E    | 	byte	"Variable not found."
2eb40     00          | 	byte	0
2eb41                 | LR__5219
2eb41     43 6F 6D 6D 
2eb45     61 20 65 78 
2eb49     70 65 63 74 
2eb4d     65 64 2E    | 	byte	"Comma expected."
2eb50     00          | 	byte	0
2eb51                 | LR__5220
2eb51     43 6F 6D 6D 
2eb55     61 20 6F 72 
2eb59     20 73 65 6D 
2eb5d     69 63 6F 6C 
2eb61     6F 6E 20 65 
2eb65     78 70 65 63 
2eb69     74 65 64 2E | 	byte	"Comma or semicolon expected."
2eb6d     00          | 	byte	0
2eb6e                 | LR__5221
2eb6e     55 6E 6B 6E 
2eb72     6F 77 6E 20 
2eb76     63 6F 6D 6D 
2eb7a     61 6E 64 2E | 	byte	"Unknown command."
2eb7e     00          | 	byte	0
2eb7f                 | LR__5222
2eb7f     53 74 61 63 
2eb83     6B 20 75 6E 
2eb87     64 65 72 66 
2eb8b     6C 6F 77 2E | 	byte	"Stack underflow."
2eb8f     00          | 	byte	0
2eb90                 | LR__5223
2eb90     43 61 6E 6E 
2eb94     6F 74 20 65 
2eb98     78 65 63 75 
2eb9c     74 65 20 67 
2eba0     6F 74 6F 20 
2eba4     69 6E 20 74 
2eba8     68 65 20 69 
2ebac     6D 6D 65 64 
2ebb0     69 61 74 65 
2ebb4     20 6D 6F 64 
2ebb8     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2ebba     00          | 	byte	0
2ebbb                 | LR__5224
2ebbb     43 61 6E 6E 
2ebbf     6F 74 20 6C 
2ebc3     6F 61 64 20 
2ebc7     66 72 6F 6D 
2ebcb     20 74 68 69 
2ebcf     73 20 66 69 
2ebd3     6C 65 2E    | 	byte	"Cannot load from this file."
2ebd6     00          | 	byte	0
2ebd7                 | LR__5225
2ebd7     54 68 65 20 
2ebdb     70 72 6F 67 
2ebdf     72 61 6D 20 
2ebe3     69 73 20 65 
2ebe7     6D 70 74 79 
2ebeb     2E          | 	byte	"The program is empty."
2ebec     00          | 	byte	0
2ebed                 | LR__5226
2ebed     49 66 20 61 
2ebf1     66 74 65 72 
2ebf5     20 69 66 2E | 	byte	"If after if."
2ebf9     00          | 	byte	0
2ebfa                 | LR__5227
2ebfa     45 6D 70 74 
2ebfe     79 20 65 78 
2ec02     70 72 65 73 
2ec06     73 69 6F 6E 
2ec0a     2E          | 	byte	"Empty expression."
2ec0b     00          | 	byte	0
2ec0c                 | LR__5228
2ec0c     53 74 72 69 
2ec10     6E 67 20 65 
2ec14     78 70 65 63 
2ec18     74 65 64 2E | 	byte	"String expected."
2ec1c     00          | 	byte	0
2ec1d                 | LR__5229
2ec1d     49 6E 74 65 
2ec21     72 70 72 65 
2ec25     74 65 72 20 
2ec29     69 6E 74 65 
2ec2d     72 6E 61 6C 
2ec31     20 65 72 72 
2ec35     6F 72 2E    | 	byte	"Interpreter internal error."
2ec38     00          | 	byte	0
2ec39                 | LR__5230
2ec39     45 78 70 65 
2ec3d     63 74 65 64 
2ec41     20 61 73 73 
2ec45     69 67 6E 2E | 	byte	"Expected assign."
2ec49     00          | 	byte	0
2ec4a                 | LR__5231
2ec4a     45 78 70 65 
2ec4e     63 74 65 64 
2ec52     20 27 74 6F 
2ec56     27 2E       | 	byte	"Expected 'to'."
2ec58     00          | 	byte	0
2ec59                 | LR__5232
2ec59     45 78 70 65 
2ec5d     63 74 65 64 
2ec61     20 69 6E 74 
2ec65     65 67 65 72 
2ec69     20 76 61 72 
2ec6d     69 61 62 6C 
2ec71     65 2E       | 	byte	"Expected integer variable."
2ec73     00          | 	byte	0
2ec74                 | LR__5233
2ec74     55 6E 69 6E 
2ec78     69 74 69 61 
2ec7c     6C 69 7A 65 
2ec80     64 20 76 61 
2ec84     72 69 61 62 
2ec88     6C 65 20 69 
2ec8c     6E 20 27 6E 
2ec90     65 78 74 27 
2ec94     2C 20 75 73 
2ec98     65 20 27 66 
2ec9c     6F 72 27 20 
2eca0     62 65 66 6F 
2eca4     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
2eca7     00          | 	byte	0
2eca8                 | LR__5234
2eca8     4E 6F 20 6D 
2ecac     6F 72 65 20 
2ecb0     73 6C 6F 74 
2ecb4     73 20 66 6F 
2ecb8     72 20 27 66 
2ecbc     6F 72 27 2E | 	byte	"No more slots for 'for'."
2ecc0     00          | 	byte	0
2ecc1                 | LR__5235
2ecc1     27 4E 65 78 
2ecc5     74 27 20 64 
2ecc9     6F 65 73 6E 
2eccd     27 74 20 6D 
2ecd1     61 74 63 68 
2ecd5     20 27 66 6F 
2ecd9     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2ecdc     00          | 	byte	0
2ecdd                 | LR__5236
2ecdd     27 47 6F 74 
2ece1     6F 27 20 74 
2ece5     61 72 67 65 
2ece9     74 20 6C 69 
2eced     6E 65 20 6E 
2ecf1     6F 74 20 66 
2ecf5     6F 75 6E 64 
2ecf9     2E          | 	byte	"'Goto' target line not found."
2ecfa     00          | 	byte	0
2ecfb                 | LR__5237
2ecfb     42 61 64 20 
2ecff     6E 75 6D 62 
2ed03     65 72 20 6F 
2ed07     66 20 70 61 
2ed0b     72 61 6D 65 
2ed0f     74 65 72 73 | 	byte	"Bad number of parameters"
2ed13     00          | 	byte	0
2ed14                 | LR__5238
2ed14     46 75 6E 63 
2ed18     74 69 6F 6E 
2ed1c     20 75 6E 64 
2ed20     65 66 69 6E 
2ed24     65 64 20 66 
2ed28     6F 72 20 73 
2ed2c     74 72 69 6E 
2ed30     67 73       | 	byte	"Function undefined for strings"
2ed32     00          | 	byte	0
2ed33                 | LR__5239
2ed33     42 61 64 20 
2ed37     70 61 72 61 
2ed3b     6D 65 74 65 
2ed3f     72 2E       | 	byte	"Bad parameter."
2ed41     00          | 	byte	0
2ed42                 | LR__5240
2ed42     43 61 6E 6E 
2ed46     6F 74 20 64 
2ed4a     65 63 6C 61 
2ed4e     72 65 20 61 
2ed52     6E 20 61 72 
2ed56     72 61 79 3A 
2ed5a     20 74 68 65 
2ed5e     20 76 61 72 
2ed62     69 61 62 6C 
2ed66     65 20 65 78 
2ed6a     69 73 74 73 
2ed6e     2E          | 	byte	"Cannot declare an array: the variable exists."
2ed6f     00          | 	byte	0
2ed70                 | LR__5241
2ed70     45 78 70 65 
2ed74     63 74 65 64 
2ed78     20 27 28 27 
2ed7c     2E          | 	byte	"Expected '('."
2ed7d     00          | 	byte	0
2ed7e                 | LR__5242
2ed7e     45 78 70 65 
2ed82     63 74 65 64 
2ed86     20 27 29 27 
2ed8a     20 6F 72 20 
2ed8e     27 2C 27 2E | 	byte	"Expected ')' or ','."
2ed92     00          | 	byte	0
2ed93                 | LR__5243
2ed93     4E 6F 20 6D 
2ed97     6F 72 65 20 
2ed9b     74 68 61 6E 
2ed9f     20 33 20 64 
2eda3     69 6D 65 6E 
2eda7     73 69 6F 6E 
2edab     73 20 73 75 
2edaf     70 70 6F 72 
2edb3     74 65 64    | 	byte	"No more than 3 dimensions supported"
2edb6     00          | 	byte	0
2edb7                 | LR__5244
2edb7     56 61 72 69 
2edbb     61 62 6C 65 
2edbf     20 6E 61 6D 
2edc3     65 20 65 78 
2edc7     70 65 63 74 
2edcb     65 64       | 	byte	"Variable name expected"
2edcd     00          | 	byte	0
2edce                 | LR__5245
2edce     54 79 70 65 
2edd2     20 6E 61 6D 
2edd6     65 20 65 78 
2edda     70 65 63 74 
2edde     65 64       | 	byte	"Type name expected"
2ede0     00          | 	byte	0
2ede1                 | LR__5246
2ede1     54 79 70 65 
2ede5     20 6E 6F 74 
2ede9     20 73 75 70 
2eded     70 6F 72 74 
2edf1     65 64 20 79 
2edf5     65 74       | 	byte	"Type not supported yet"
2edf7     00          | 	byte	0
2edf8                 | LR__5247
2edf8     41 72 72 61 
2edfc     79 20 69 6E 
2ee00     64 65 78 20 
2ee04     6F 75 74 20 
2ee08     6F 66 20 72 
2ee0c     61 6E 67 65 | 	byte	"Array index out of range"
2ee10     00          | 	byte	0
2ee11                 | LR__5248
2ee11     45 72 72 6F 
2ee15     72 20       | 	byte	"Error "
2ee17     00          | 	byte	0
2ee18                 | LR__5249
2ee18     3A 20       | 	byte	": "
2ee1a     00          | 	byte	0
2ee1b                 | LR__5250
2ee1b     2F 73 64    | 	byte	"/sd"
2ee1e     00          | 	byte	0
2ee1f                 | LR__5251
2ee1f     2F 73 64 2F 
2ee23     62 61 73    | 	byte	"/sd/bas"
2ee26     00          | 	byte	0
2ee27                 | LR__5252
2ee27     2F 73 64 2F 
2ee2b     62 61 73    | 	byte	"/sd/bas"
2ee2e     00          | 	byte	0
2ee2f                 | LR__5253
2ee2f     20 42 41 53 
2ee33     49 43 20 62 
2ee37     79 74 65 73 
2ee3b     20 66 72 65 
2ee3f     65          | 	byte	" BASIC bytes free"
2ee40     00          | 	byte	0
2ee41                 | LR__5254
2ee41     52 65 61 64 
2ee45     79          | 	byte	"Ready"
2ee46     00          | 	byte	0
2ee47                 | LR__5255
2ee47     6E 6F 6E 61 
2ee4b     6D 65 2E 62 
2ee4f     61 73       | 	byte	"noname.bas"
2ee51     00          | 	byte	0
2ee52                 | LR__5256
2ee52                 | 	byte	
2ee52     00          | 	byte	0
2ee53                 | LR__5257
2ee53                 | 	byte	
2ee53     00          | 	byte	0
2ee54                 | LR__5258
2ee54                 | 	byte	
2ee54     00          | 	byte	0
2ee55     00 00 00    | 	alignl
2ee58                 | _dat_
2ee58     00 00 00 00 
2ee5c     00 00 00 00 
2ee60     00 00 00 00 
2ee64     00 00 00 00 | 	byte	$00[16]
2ee68     61 41 17 0E 
2ee6c     62 42 00 00 
2ee70     63 43 19 10 
2ee74     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2ee78     65 45 18 0F 
2ee7c     66 46 00 00 
2ee80     67 47 00 00 
2ee84     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2ee88     69 49 00 00 
2ee8c     6A 4A 00 00 
2ee90     6B 4B 00 00 
2ee94     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2ee98     6D 4D 00 00 
2ee9c     6E 4E 1A 11 
2eea0     6F 4F 1E 15 
2eea4     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2eea8     71 51 00 00 
2eeac     72 52 00 00 
2eeb0     73 53 1B 12 
2eeb4     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
2eeb8     75 55 00 00 
2eebc     76 56 00 00 
2eec0     77 57 00 00 
2eec4     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2eec8     79 59 00 00 
2eecc     7A 5A 1D 14 
2eed0     31 21 04 00 
2eed4     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2eed8     33 23 06 00 
2eedc     34 24 07 00 
2eee0     35 25 08 00 
2eee4     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2eee8     37 26 0A 00 
2eeec     38 2A 0B 00 
2eef0     39 28 0C 00 
2eef4     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2eef8     8D 8D 00 00 
2eefc     9B 9B 00 00 
2ef00     88 88 00 00 
2ef04     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2ef08     20 20 00 00 
2ef0c     2D 5F 00 00 
2ef10     3D 2B 00 00 
2ef14     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2ef18     5D 7D 00 00 
2ef1c     5C 7C 00 00 
2ef20     23 7E 00 00 
2ef24     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2ef28     27 22 00 00 
2ef2c     60 7E 03 00 
2ef30     2C 3C 00 00 
2ef34     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2ef38     2F 3F 00 00 
2ef3c     B9 B9 00 00 
2ef40     BA 00 00 00 
2ef44     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2ef48     BC 00 00 00 
2ef4c     BD 00 00 00 
2ef50     BE 00 00 00 
2ef54     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2ef58     C0 00 00 00 
2ef5c     C1 00 00 00 
2ef60     C2 00 00 00 
2ef64     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2ef68     C4 00 00 00 
2ef6c     C5 00 00 00 
2ef70     C6 00 00 00 
2ef74     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2ef78     C8 00 00 00 
2ef7c     C9 00 00 00 
2ef80     CA 00 00 00 
2ef84     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2ef88     7F 7F 00 00 
2ef8c     CC 00 00 00 
2ef90     CD 00 00 00 
2ef94     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2ef98     CF 00 00 00 
2ef9c     D0 00 00 00 
2efa0     D1 00 00 00 
2efa4     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2efa8     2F 2F 00 00 
2efac     2A 2A 00 00 
2efb0     2D 2D 00 00 
2efb4     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
2efb8     8D 8D 00 00 
2efbc     31 31 00 00 
2efc0     32 32 00 00 
2efc4     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2efc8     34 34 00 00 
2efcc     35 35 00 00 
2efd0     36 36 00 00 
2efd4     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2efd8     38 38 00 00 
2efdc     39 39 00 00 
2efe0     30 30 00 00 
2efe4     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2efe8     5C 7C 00 00 
2efec     00 00 00 00 
2eff0     00 00 00 00 
2eff4     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2eff8     00 00 00 00 
      ...             
2f050     00 00 00 00 
2f054     00 00 00 00 | 	byte	$00[96]
2f058     2B 00 A6 F2 
2f05c     24 A7 09 80 
2f060     5B 88 4D 89 
2f064     80 88 A5 88 | atari_spl file "atari.spl"
2f068     6D 88 B8 88 
2f06c     80 88 CB 88 
2f070     92 88 A5 88 
2f074     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2f078     A5 88 CA 88 
2f07c     A6 88 DD 88 
2f080     B8 88 AB 89 
2f084     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2f088     C8 AD C6 F1 
2f08c     91 06 B6 FF 
2f090     13 00 4A 00 
2f094     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2f098     5D 00 5E 00 
2f09c     5D 00 5E 00 
2f0a0     5E 00 5D 00 
2f0a4     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2f0a8     38 00 83 00 
2f0ac     25 00 83 00 
2f0b0     C3 FE D1 04 
2f0b4     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
2f0b8     48 88 38 85 
2f0bc     41 8A CB 88 
2f0c0     28 89 B8 88 
2f0c4     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2f0c8     15 89 03 89 
2f0cc     02 89 15 89 
2f0d0     16 89 15 89 
2f0d4     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2f0d8     15 89 3A 89 
2f0dc     72 89 E3 89 
2f0e0     52 83 AD 97 
2f0e4     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2f0e8     0C 02 B6 FF 
2f0ec     E1 00 A8 00 
2f0f0     F3 00 A8 00 
2f0f4     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2f0f8     CE 00 CD 00 
2f0fc     CD 00 BA 00 
2f100     E1 00 BB 00 
2f104     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2f108     DF 00 C9 FF 
2f10c     E6 01 B6 06 
2f110     EE DD 8D 98 
2f114     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2f118     97 89 73 89 
2f11c     3B 89 60 89 
2f120     60 89 60 89 
2f124     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2f128     73 89 72 89 
2f12c     85 89 73 89 
2f130     AA 89 60 89 
2f134     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2f138     E8 8A 18 86 
2f13c     92 88 A5 C2 
2f140     E0 00 C3 05 
2f144     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2f148     F2 00 64 01 
2f14c     06 01 3E 01 
2f150     2B 01 2B 01 
2f154     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2f158     2B 01 2A 01 
2f15c     2B 01 2B 01 
2f160     2B 01 18 01 
2f164     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2f168     39 07 61 F3 
2f16c     C0 AF 37 85 
2f170     0F 88 8B 8A 
2f174     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2f178     AB 89 D0 89 
2f17c     AB 89 D0 89 
2f180     D0 89 CF 89 
2f184     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2f188     D0 89 F5 89 
2f18c     BD 89 08 8A 
2f190     CF 89 E8 8A 
2f194     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2f198     53 B3 0D F8 
2f19c     F4 07 38 00 
2f1a0     63 01 63 01 
2f1a4     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
2f1a8     88 01 88 01 
2f1ac     76 01 88 01 
2f1b0     88 01 89 01 
2f1b4     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
2f1b8     75 01 AE 01 
2f1bc     76 01 88 01 
2f1c0     4A 00 46 06 
2f1c4     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
2f1c8     08 8A 9A 86 
2f1cc     33 8B 08 8A 
2f1d0     2D 8A F5 89 
2f1d4     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
2f1d8     2D 8A 2D 8A 
2f1dc     2E 8A 1B 8A 
2f1e0     40 8A 2D 8A 
2f1e4     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
2f1e8     2E 8A 79 8A 
2f1ec     66 8A C8 8B 
2f1f0     72 82 2B 97 
2f1f4     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
2f1f8     1D 02 05 01 
2f1fc     F8 01 C0 01 
2f200     0B 02 C0 01 
2f204     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2f208     F9 01 D3 01 
2f20c     F8 01 D3 01 
2f210     F8 01 D2 01 
2f214     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2f218     E6 01 2B 01 
2f21c     8E 02 5F 07 
2f220     F7 E2 ED 9C 
2f224     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2f228     E8 8A 78 8A 
2f22c     78 8A 65 8A 
2f230     8B 8A 78 8A 
2f234     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2f238     8B 8A 9D 8A 
2f23c     9D 8A 8B 8A 
2f240     C2 8A 78 8A 
2f244     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2f248     70 8C 18 86 
2f24c     8B 8A 23 C9 
2f250     CB 03 C4 05 
2f254     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2f258     0B 02 7B 02 
2f25c     1E 02 55 02 
2f260     30 02 43 02 
2f264     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2f268     43 02 44 02 
2f26c     43 02 30 02 
2f270     68 02 31 02 
2f274     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2f278     07 08 3F F7 
2f27c     73 B2 13 85 
2f280     15 89 ED 8B 
2f284     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2f288     B0 8A FB 8A 
2f28c     D5 8A FA 8A 
2f290     E8 8A FB 8A 
2f294     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2f298     E8 8A 21 8B 
2f29c     E7 8A 33 8B 
2f2a0     E8 8A 26 8C 
2f2a4     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
2f2a8     8D B0 27 F6 
2f2ac     9C 08 AD 01 
2f2b0     7B 02 8D 02 
2f2b4     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
2f2b8     A1 02 A0 02 
2f2bc     A1 02 A0 02 
2f2c0     A0 02 A0 02 
2f2c4     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
2f2c8     7B 02 D8 02 
2f2cc     7B 02 C6 02 
2f2d0     3E 01 C3 05 
2f2d4     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
2f2d8     00 8C 2A 86 
2f2dc     E0 8C FA 8A 
2f2e0     6A 8B FB 8A 
2f2e4     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
2f2e8     45 8B 45 8B 
2f2ec     45 8B 6B 8B 
2f2f0     46 8B 59 8B 
2f2f4     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
2f2f8     6B 8B 6B 8B 
2f2fc     6B 8B 6B 8B 
2f300     7D 8B 7D 8B 
2f304     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
2f308     90 8B 91 8B 
2f30c     90 8B 90 8B 
2f310     A3 8B A3 8B 
2f314     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
2f318     B5 8B B6 8B 
2f31c     B5 8B B5 8B 
2f320     B6 8B C8 8B 
2f324     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2f328     C8 8B DA 8B 
2f32c     DB 8B DB 8B 
2f330     DB 8B DC 8B 
2f334     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2f338     EE 8B EE 8B 
2f33c     00 8C 01 8C 
2f340     00 8C 01 8C 
2f344     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2f348     12 8C 13 8C 
2f34c     13 8C 26 8C 
2f350     26 8C 26 8C 
2f354     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2f358     38 8C 38 8C 
2f35c     38 8C 38 8C 
2f360     4B 8C 4B 8C 
2f364     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2f368     5E 8C 5E 8C 
2f36c     5E 8C 5E 8C 
2f370     70 8C 70 8C 
2f374     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2f378     70 8C 83 8C 
2f37c     83 8C 83 8C 
2f380     83 8C 96 8C 
2f384     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2f388     95 8C A9 8C 
2f38c     A9 8C A8 8C 
2f390     A8 8C A8 8C 
2f394     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2f398     BB 8C BB 8C 
2f39c     BB 8C CE 8C 
2f3a0     CE 8C CE 8C 
2f3a4     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
2f3a8     E0 8C E1 8C 
2f3ac     E1 8C E0 8C 
2f3b0     F4 8C F2 8C 
2f3b4     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
2f3b8     05 8D 05 8D 
2f3bc     06 8D 06 8D 
2f3c0     19 8D 19 8D 
2f3c4     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
2f3c8     18 8D 2B 8D 
2f3cc     2B 8D 2B 8D 
2f3d0     2A 8D 3E 8D 
2f3d4     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
2f3d8     3E 8D 51 8D 
2f3dc     50 8D 50 8D 
2f3e0     50 8D 51 8D 
2f3e4     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
2f3e8     63 8D 64 8D 
2f3ec     76 8D 75 8D 
2f3f0     75 8D 76 8D 
2f3f4     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
2f3f8     88 8D 88 8D 
2f3fc     89 8D 9B 8D 
2f400     9A 8D 9B 8D 
2f404     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
2f408     AD 8D AE 8D 
2f40c     AD 8D AE 8D 
2f410     C1 8D C1 8D 
2f414     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
2f418     D3 8D D3 8D 
2f41c     D3 8D D3 8D 
2f420     D3 8D E6 8D 
2f424     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2f428     E6 8D E6 8D 
2f42c     F9 8D F9 8D 
2f430     F9 8D F8 8D 
2f434     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2f438     0B 8E 0B 8E 
2f43c     1D 8E 1D 8E 
2f440     1E 8E 1E 8E 
2f444     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2f448     31 8E 31 8E 
2f44c     31 8E 42 8E 
2f450     43 8E 43 8E 
2f454     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2f458     56 8E 56 8E 
2f45c     55 8E 56 8E 
2f460     68 8E 69 8E 
2f464     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2f468     69 8E 7B 8E 
2f46c     7C 8E 7B 8E 
2f470     7B 8E 8D 8E 
2f474     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2f478     8D 8E A1 8E 
2f47c     A0 8E A1 8E 
2f480     A1 8E A0 8E 
2f484     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2f488     B3 8E B3 8E 
2f48c     C6 8E C5 8E 
2f490     C6 8E C6 8E 
2f494     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2f498     D8 8E D9 8E 
2f49c     D8 8E EC 8E 
2f4a0     EB 8E EC 8E 
2f4a4     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
2f4a8     FE 8E FE 8E 
2f4ac     FE 8E FE 8E 
2f4b0     10 8F 10 8F 
2f4b4     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
2f4b8     11 8F 23 8F 
2f4bc     24 8F 23 8F 
2f4c0     24 8F 37 8F 
2f4c4     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
2f4c8     36 8F 36 8F 
2f4cc     48 8F 49 8F 
2f4d0     49 8F 49 8F 
2f4d4     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
2f4d8     5B 8F 5C 8F 
2f4dc     5B 8F 6E 8F 
2f4e0     6E 8F 6E 8F 
2f4e4     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
2f4e8     81 8F 81 8F 
2f4ec     81 8F 81 8F 
2f4f0     93 8F 93 8F 
2f4f4     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
2f4f8     93 8F A6 8F 
2f4fc     A6 8F A6 8F 
2f500     A6 8F B9 8F 
2f504     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
2f508     B9 8F B9 8F 
2f50c     CC 8F CB 8F 
2f510     CB 8F CC 8F 
2f514     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
2f518     DF 8F DE 8F 
2f51c     DE 8F F1 8F 
2f520     F1 8F F1 8F 
2f524     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2f528     03 90 04 90 
2f52c     04 90 04 90 
2f530     16 90 17 90 
2f534     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2f538     29 90 28 90 
2f53c     29 90 28 90 
2f540     29 90 3C 90 
2f544     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2f548     3C 90 4F 90 
2f54c     4E 90 4E 90 
2f550     4E 90 4E 90 
2f554     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2f558     61 90 61 90 
2f55c     73 90 74 90 
2f560     74 90 74 90 
2f564     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2f568     87 90 86 90 
2f56c     87 90 86 90 
2f570     99 90 99 90 
2f574     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2f578     AB 90 AB 90 
2f57c     AC 90 AB 90 
2f580     AB 90 BF 90 
2f584     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2f588     BE 90 D1 90 
2f58c     D0 90 D1 90 
2f590     D1 90 D1 90 
2f594     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2f598     E3 90 E4 90 
2f59c     F6 90 F6 90 
2f5a0     F6 90 F6 90 
2f5a4     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
2f5a8     09 91 0A 91 
2f5ac     0A 91 1C 91 
2f5b0     1C 91 1C 91 
2f5b4     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
2f5b8     2F 91 2E 91 
2f5bc     2F 91 2F 91 
2f5c0     2E 91 41 91 
2f5c4     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
2f5c8     41 91 53 91 
2f5cc     54 91 54 91 
2f5d0     53 91 54 91 
2f5d4     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
2f5d8     67 91 67 91 
2f5dc     79 91 7A 91 
2f5e0     79 91 78 91 
2f5e4     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
2f5e8     8C 91 8B 91 
2f5ec     8C 91 8C 91 
2f5f0     9E 91 9E 91 
2f5f4     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
2f5f8     B1 91 B1 91 
2f5fc     B2 91 B1 91 
2f600     B1 91 C4 91 
2f604     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
2f608     C4 91 D6 91 
2f60c     D7 91 D7 91 
2f610     D7 91 D6 91 
2f614     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
2f618     EA 91 EA 91 
2f61c     EA 91 FC 91 
2f620     FC 91 FB 91 
2f624     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2f628     0E 92 0F 92 
2f62c     0F 92 0E 92 
2f630     21 92 21 92 
2f634     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2f638     21 92 34 92 
2f63c     33 92 34 92 
2f640     34 92 47 92 
2f644     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2f648     46 92 47 92 
2f64c     59 92 59 92 
2f650     59 92 59 92 
2f654     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2f658     6C 92 6C 92 
2f65c     6B 92 7E 92 
2f660     7E 92 7E 92 
2f664     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2f668     92 92 91 92 
2f66c     91 92 90 92 
2f670     91 92 A4 92 
2f674     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2f678     A3 92 B6 92 
2f67c     B6 92 B7 92 
2f680     B7 92 B6 92 
2f684     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2f688     CA 92 C9 92 
2f68c     CA 92 DC 92 
2f690     DC 92 DC 92 
2f694     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2f698     EF 92 EF 92 
2f69c     EF 92 EF 92 
2f6a0     01 93 01 93 
2f6a4     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2f6a8     15 93 14 93 
2f6ac     14 93 14 93 
2f6b0     14 93 27 93 
2f6b4     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2f6b8     27 93 39 93 
2f6bc     3A 93 39 93 
2f6c0     39 93 39 93 
2f6c4     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2f6c8     4B 93 4C 93 
2f6cc     5F 93 5F 93 
2f6d0     5F 93 5E 93 
2f6d4     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
2f6d8     5F 93 84 93 
2f6dc     4C 93 96 93 
2f6e0     5F 93 AE 94 
2f6e4     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
2f6e8     7B C1 00 00 
2f6ec     00 00 00 00 
2f6f0     00 00 00 00 
2f6f4     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f6f8     00 00 00 00 | 	byte	$00, $00, $00, $00
2f6fc     00 00 00 00 | zero long 0
2f700     7A D7 00 80 
2f704     87 8A 48 8F 
2f708     EC 8C 76 8D 
2f70c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
2f710     3C 8D 82 8D 
2f714     42 8D 88 8D 
2f718     8C 8D 8E 8D 
2f71c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
2f720     97 8D DE 8D 
2f724     E1 8D F1 8E 
2f728     D8 8C A3 83 
2f72c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
2f730     65 71 C9 65 
2f734     FC 64 C4 65 
2f738     C1 65 BF 65 
2f73c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
2f740     B6 65 B4 65 
2f744     B2 65 AE 65 
2f748     AC 65 ED 65 
2f74c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
2f750     5E 65 25 66 
2f754     FA 62 23 6B 
2f758     B5 6C 61 0A 
2f75c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
2f760     5D 90 BE 8D 
2f764     47 8E C3 8D 
2f768     09 8E C9 8D 
2f76c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
2f770     15 8E 19 8E 
2f774     1B 8E 62 8E 
2f778     64 8E 68 8E 
2f77c     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
2f780     B5 8E 4C 90 
2f784     FA 84 3C 9D 
2f788     98 13 79 6D 
2f78c     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
2f790     D9 66 50 66 
2f794     D4 66 4B 66 
2f798     8C 66 46 66 
2f79c     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
2f7a0     81 66 3A 66 
2f7a4     7C 66 36 66 
2f7a8     76 66 30 66 
2f7ac     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
2f7b0     6B 66 88 72 
2f7b4     BF 37 E7 B7 
2f7b8     75 83 8B 8E 
2f7bc     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
2f7c0     94 8E 96 8E 
2f7c4     DD 8E 9C 8E 
2f7c8     E2 8E A2 8E 
2f7cc     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
2f7d0     EE 8E AE 8E 
2f7d4     38 8F B5 8E 
2f7d8     3F 8F FD 8E 
2f7dc     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
2f7e0     A5 87 1E E3 
2f7e4     6D 5D FA 71 
2f7e8     41 64 25 67 
2f7ec     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
2f7f0     D9 66 1A 67 
2f7f4     18 67 15 67 
2f7f8     12 67 0F 67 
2f7fc     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
2f800     07 67 C0 66 
2f804     01 67 BC 66 
2f808     B8 66 DE 64 
2f80c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
2f810     43 E5 1F 8B 
2f814     14 8A F1 90 
2f818     1C 8F 63 8F 
2f81c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
2f820     29 8F 6E 8F 
2f824     72 8F 75 8F 
2f828     34 8F BE 8F 
2f82c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
2f830     84 8F 87 8F 
2f834     CC 8F 56 90 
2f838     67 91 49 80 
2f83c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
2f840     46 77 A6 66 
2f844     E8 66 B0 67 
2f848     AD 67 ED 67 
2f84c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
2f850     A2 67 E3 67 
2f854     9D 67 9A 67 
2f858     98 67 94 67 
2f85c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
2f860     49 67 CD 67 
2f864     28 65 5F 6E 
2f868     82 67 3A 01 
2f86c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
2f870     C2 91 A9 8F 
2f874     EF 8F AE 8F 
2f878     F4 8F B5 8F 
2f87c     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
2f880     01 90 03 90 
2f884     07 90 09 90 
2f888     0C 90 53 90 
2f88c     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
2f890     18 90 44 93 
2f894     85 84 D6 9D 
2f898     87 1F 2F 75 
2f89c     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
2f8a0     C4 68 F6 67 
2f8a4     BE 68 F1 67 
2f8a8     76 68 2E 68 
2f8ac     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
2f8b0     27 68 24 68 
2f8b4     64 68 1E 68 
2f8b8     5F 68 19 68 
2f8bc     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
2f8c0     DC 68 56 72 
2f8c4     7E 36 C2 B8 
2f8c8     D7 84 73 90 
2f8cc     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
2f8d0     7B 90 7F 90 
2f8d4     82 90 84 90 
2f8d8     CB 90 8B 90 
2f8dc     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
2f8e0     D7 90 96 90 
2f8e4     20 91 59 90 
2f8e8     25 91 A2 90 
2f8ec     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
2f8f0     D0 89 40 EE 
2f8f4     12 64 C4 71 
2f8f8     29 66 0C 69 
2f8fc     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
2f900     C0 68 02 69 
2f904     FE 68 FB 68 
2f908     F9 68 F6 68 
2f90c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
2f910     EE 68 A8 68 
2f914     2C 69 5F 68 
2f918     E2 68 81 66 
2f91c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
2f920     1E EB A6 8A 
2f924     73 8B 5E 93 
2f928     7B 90 48 91 
2f92c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
2f930     0D 91 11 91 
2f934     14 91 16 91 
2f938     5C 91 1C 91 
2f93c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
2f940     68 91 AF 91 
2f944     2A 91 B5 91 
2f948     75 91 1A 94 
2f94c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
2f950     70 0E CB 6C 
2f954     5D 6E C4 67 
2f958     99 69 54 69 
2f95c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2f960     D2 69 49 69 
2f964     89 69 86 69 
2f968     40 69 C4 69 
2f96c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
2f970     35 69 76 69 
2f974     58 67 EB 6D 
2f978     E9 6D 89 0F 
2f97c     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
2f980     33 94 94 91 
2f984     D9 91 56 91 
2f988     E0 91 9F 91 
2f98c     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
2f990     EC 91 EE 91 
2f994     F1 91 F4 91 
2f998     F7 91 3D 92 
2f99c     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
2f9a0     46 92 21 94 
2f9a4     11 89 A4 9D 
2f9a8     FD 0E 8F 6C 
2f9ac     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
2f9b0     28 6A E1 69 
2f9b4     65 6A 1F 6A 
2f9b8     5F 6A 1A 6A 
2f9bc     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
2f9c0     54 6A 0F 6A 
2f9c4     4F 6A 09 6A 
2f9c8     06 6A 03 6A 
2f9cc     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
2f9d0     23 68 69 77 
2f9d4     3A 4D 38 CA 
2f9d8     38 86 4E 91 
2f9dc     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
2f9e0     64 92 24 92 
2f9e4     6A 92 2A 92 
2f9e8     70 92 30 92 
2f9ec     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
2f9f0     7B 92 7E 92 
2f9f4     C5 92 84 92 
2f9f8     CB 92 8A 92 
2f9fc     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
2fa00     4D 8D F9 E2 
2fa04     97 59 FE 74 
2fa08     DB 68 6D 6A 
2fa0c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
2fa10     A8 6A A5 6A 
2fa14     A3 6A 9F 6A 
2fa18     9D 6A 9B 6A 
2fa1c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
2fa20     D6 6A 8F 6A 
2fa24     CF 6A 46 6A 
2fa28     CA 6A E1 67 
2fa2c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
2fa30     D3 F7 15 92 
2fa34     90 8C BF 94 
2fa38     A6 92 EB 92 
2fa3c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
2fa40     B1 92 F7 92 
2fa44     FA 92 FD 92 
2fa48     00 93 02 93 
2fa4c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
2fa50     4F 93 52 93 
2fa54     54 93 22 94 
2fa58     5A 93 8F 88 
2fa5c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
2fa60     1C 77 07 6C 
2fa64     E8 69 7A 6B 
2fa68     34 6B 75 6B 
2fa6c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
2fa70     29 6B 26 6B 
2fa74     24 6B 21 6B 
2fa78     1D 6B 5E 6B 
2fa7c     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
2fa80     12 6B 52 6B 
2fa84     34 69 34 6E 
2fa88     BA 73 A4 24 
2fa8c     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
2fa90     7A 94 B3 93 
2fa94     72 93 31 93 
2fa98     78 93 7A 93 
2fa9c     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2faa0     83 93 86 93 
2faa4     89 93 D0 93 
2faa8     D2 93 D5 93 
2faac     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2fab0     DD 93 40 96 
2fab4     30 8B 99 9C 
2fab8     52 10 94 71 
2fabc     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2fac0     46 6C 79 6B 
2fac4     40 6C B7 6B 
2fac8     F7 6B B1 6B 
2facc     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
2fad0     EC 6B A5 6B 
2fad4     A2 6B 9F 6B 
2fad8     9D 6B 9A 6B 
2fadc     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
2fae0     C8 6A E4 76 
2fae4     20 4B F9 CE 
2fae8     2E 8A 1A 92 
2faec     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
2faf0     FB 93 BA 93 
2faf4     01 94 03 94 
2faf8     4A 94 09 94 
2fafc     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
2fb00     55 94 14 94 
2fb04     9E 94 1A 94 
2fb08     61 94 20 94 
2fb0c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
2fb10     3E 87 E5 CD 
2fb14     5F 50 6C 78 
2fb18     B5 6A 04 6C 
2fb1c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
2fb20     83 6C 7F 6C 
2fb24     7C 6C 36 6C 
2fb28     76 6C 74 6C 
2fb2c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2fb30     6B 6C 25 6C 
2fb34     66 6C 1F 6C 
2fb38     1D 6C 41 6A 
2fb3c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
2fb40     BA FA FC 94 
2fb44     5B 8D 97 96 
2fb48     3B 94 C5 94 
2fb4c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2fb50     89 94 8C 94 
2fb54     8F 94 92 94 
2fb58     94 94 DB 94 
2fb5c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2fb60     E4 94 E7 94 
2fb64     2D 95 74 95 
2fb68     C8 96 15 89 
2fb6c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2fb70     CB 75 31 6F 
2fb74     7E 6B 10 6D 
2fb78     C9 6C 0A 6D 
2fb7c     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2fb80     BD 6C FF 6C 
2fb84     FB 6C F9 6C 
2fb88     B2 6C F3 6C 
2fb8c     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2fb90     A7 6C E8 6C 
2fb94     0D 6B 85 6F 
2fb98     C7 74 10 28 
2fb9c     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2fba0     96 96 47 95 
2fba4     06 95 0A 95 
2fba8     0C 95 0F 95 
2fbac     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2fbb0     17 95 5E 95 
2fbb4     61 95 63 95 
2fbb8     22 95 AC 95 
2fbbc     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2fbc0     72 95 17 98 
2fbc4     59 8E 01 96 
2fbc8     CF FC 5A 68 
2fbcc     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2fbd0     96 6D 50 6D 
2fbd4     D5 6D 4A 6D 
2fbd8     8C 6D 89 6D 
2fbdc     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2fbe0     80 6D 3A 6D 
2fbe4     7A 6D 77 6D 
2fbe8     75 6D 71 6D 
2fbec     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
2fbf0     18 6C BC 78 
2fbf4     9A 4F 7E CF 
2fbf8     1F 89 F1 93 
2fbfc     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
2fc00     D2 95 4E 95 
2fc04     D7 95 53 95 
2fc08     DD 95 E0 95 
2fc0c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2fc10     A5 95 EB 95 
2fc14     EE 95 F0 95 
2fc18     37 96 B3 95 
2fc1c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2fc20     1A 98 D5 8D 
2fc24     C5 9F CD 0F 
2fc28     0F 71 F3 73 
2fc2c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2fc30     D9 6D 5E 6E 
2fc34     D3 6D 58 6E 
2fc38     12 6E 0F 6E 
2fc3c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
2fc40     49 6E BF 6D 
2fc44     87 6E 76 6D 
2fc48     81 6E 11 6B 
2fc4c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2fc50     3F 09 44 95 
2fc54     E5 8D 3F 99 
2fc58     D4 95 A2 96 
2fc5c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2fc60     23 96 69 96 
2fc64     6B 96 6E 96 
2fc68     71 96 74 96 
2fc6c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2fc70     BF 96 3C 96 
2fc74     C6 96 C8 96 
2fc78     A3 98 51 8D 
2fc7c     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2fc80     CF 75 29 73 
2fc84     90 6C EC 6E 
2fc88     62 6E E7 6E 
2fc8c     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2fc90     9A 6E 98 6E 
2fc94     95 6E 91 6E 
2fc98     8E 6E CF 6E 
2fc9c     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2fca0     40 6E C3 6E 
2fca4     E8 6C 45 6F 
2fca8     A5 7B C9 35 
2fcac     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2fcb0     2D 98 23 97 
2fcb4     E1 96 A0 96 
2fcb8     A4 96 EA 96 
2fcbc     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2fcc0     AF 96 F4 96 
2fcc4     F8 96 3E 97 
2fcc8     FD 96 43 97 
2fccc     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2fcd0     08 97 6B 99 
2fcd4     D6 92 88 91 
2fcd8     D8 EE 84 66 
2fcdc     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2fce0     2E 6F E7 6E 
2fce4     6C 6F 24 6F 
2fce8     21 6F 1F 6F 
2fcec     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2fcf0     17 6F 13 6F 
2fcf4     54 6F 0E 6F 
2fcf8     0B 6F 4B 6F 
2fcfc     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2fd00     27 6D 1C 7B 
2fd04     19 59 9F DB 
2fd08     66 8E BC 94 
2fd0c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2fd10     67 97 26 97 
2fd14     6D 97 2B 97 
2fd18     72 97 32 97 
2fd1c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2fd20     C1 97 7F 97 
2fd24     C6 97 85 97 
2fd28     CB 97 CE 97 
2fd2c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2fd30     EC 8A C4 C6 
2fd34     68 4C F4 7D 
2fd38     63 6E E8 6E 
2fd3c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
2fd40     ED 6F A7 6F 
2fd44     E7 6F A0 6F 
2fd48     E1 6F 9B 6F 
2fd4c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2fd50     D5 6F 8F 6F 
2fd54     CE 6F 45 6F 
2fd58     86 6F 68 6D 
2fd5c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2fd60     C0 13 AD A2 
2fd64     A7 8E 79 99 
2fd68     E6 97 E8 97 
2fd6c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
2fd70     F1 97 F3 97 
2fd74     F6 97 F9 97 
2fd78     FB 97 FE 97 
2fd7c     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
2fd80     4A 98 0A 98 
2fd84     93 98 0F 98 
2fd88     7F 9B BF 8C 
2fd8c     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
2fd90     91 7B 62 73 
2fd94     1A 6E B9 70 
2fd98     EB 6F B3 70 
2fd9c     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2fda0     25 70 20 70 
2fda4     1E 70 1B 70 
2fda8     18 70 15 70 
2fdac     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2fdb0     0D 70 09 70 
2fdb4     07 70 03 70 
2fdb8     01 70 FD 6F 
2fdbc     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2fdc0     F6 6F F2 6F 
2fdc4     EF 6F EC 6F 
2fdc8     2C 70 E6 6F 
2fdcc     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2fdd0     DD 6F 97 6F 
2fdd4     D7 6F 84 6E 
2fdd8     8F 6F 3F 7D 
2fddc     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2fdde     00 00 00 00 | zero1 long 0
2fde2     FF FF FF FF 
2fde6     FF FF       | atarist_spl file "atarist.spl" '512
2fde8     00 00 00 00 
2fdec     00 00 00 00 
2fdf0     00 00       | 	byte	$00[10]
2fdf2     17 7F F2 7F 
2fdf6     B2 7F 72 7F 
2fdfa     33 7F F4 7E 
2fdfe     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
2fe02     36 7E F5 7D 
2fe06     E9 51 F2 0D 
2fe0a     8E 00 F3 FD 
2fe0e     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
2fe12     57 FD 58 FD 
2fe16     5B FD 5C FD 
2fe1a     5C FD 60 7D 
2fe1e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
2fe22     D6 7C 98 7C 
2fe26     59 7C 1A 7C 
2fe2a     DC 7B 9E 7B 
2fe2e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2fe32     F3 05 00 FD 
2fe36     41 FB EA FA 
2fe3a     D9 FA DB FA 
2fe3e     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
2fe42     E4 FA 9B 36 
2fe46     F8 7A C0 7A 
2fe4a     84 7A 45 7A 
2fe4e     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2fe52     8E 79 51 79 
2fe56     15 79 D7 78 
2fe5a     3C 1F EB FF 
2fe5e     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2fe62     6D F8 65 F8 
2fe66     68 F8 6D F8 
2fe6a     70 F8 74 F8 
2fe6e     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2fe72     AB 60 79 60 
2fe76     4B 60 1A 60 
2fe7a     E9 5F B9 5F 
2fe7e     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2fe82     FB 59 B2 0B 
2fe86     92 FA 3A F7 
2fe8a     96 F6 79 F6 
2fe8e     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2fe92     82 F6 86 F6 
2fe96     8C F6 DB 5D 
2fe9a     F1 5E C1 5E 
2fe9e     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2fea2     34 5E 04 5E 
2fea6     D6 5D A6 5D 
2feaa     78 5D D4 3E 
2feae     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2feb2     27 F5 BA F4 
2feb6     AB F4 AD F4 
2feba     B2 F4 B8 F4 
2febe     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2fec2     26 5D 2B 5D 
2fec6     FC 5C CD 5C 
2feca     9F 5C 70 5C 
2fece     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2fed2     E5 5B B8 5B 
2fed6     DB 24 A7 FC 
2feda     D1 F4 4D F3 
2fede     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2fee2     04 F3 0B F3 
2fee6     11 F3 16 F3 
2feea     DE 18 98 5B 
2feee     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
2fef2     4E 4A 29 48 
2fef6     A0 47 6A 47 
2fefa     43 47 20 47 
2fefe     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
2ff02     E2 F6 98 F2 
2ff06     C5 F1 A3 F1 
2ff0a     A3 F1 A8 F1 
2ff0e     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
2ff12     BF F1 00 3D 
2ff16     EF 46 CD 46 
2ff1a     AA 46 86 46 
2ff1e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
2ff22     1C 46 F9 45 
2ff26     D7 45 EE 43 
2ff2a     DE 02 E8 F3 
2ff2e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2ff32     61 F0 65 F0 
2ff36     6D F0 74 F0 
2ff3a     7C F0 84 F0 
2ff3e     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
2ff42     8E 45 6D 45 
2ff46     49 45 27 45 
2ff4a     05 45 E1 44 
2ff4e     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2ff52     F1 2F A9 FB 
2ff56     8B F1 9B EF 
2ff5a     40 EF 36 EF 
2ff5e     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2ff62     4D EF 56 EF 
2ff66     5E EF 7B 44 
2ff6a     8C 44 69 44 
2ff6e     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2ff72     03 44 E1 43 
2ff76     C0 43 F5 37 
2ff7a     69 33 0F 11 
2ff7e     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2ff82     66 EE 37 EE 
2ff86     38 EE 40 EE 
2ff8a     48 EE 51 EE 
2ff8e     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2ff92     7D 32 6A 32 
2ff96     51 32 37 32 
2ff9a     1F 32 05 32 
2ff9e     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2ffa2     B9 31 A1 31 
2ffa6     F1 04 F4 F1 
2ffaa     50 EE A0 ED 
2ffae     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2ffb2     93 ED 9A ED 
2ffb6     A4 ED AD ED 
2ffba     F4 27 C1 31 
2ffbe     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2ffc2     78 31 5F 31 
2ffc6     46 31 2E 31 
2ffca     15 31 FC 30 
2ffce     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2ffd2     C4 EF 4A ED 
2ffd6     DC EC CB EC 
2ffda     D2 EC DA EC 
2ffde     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2ffe2     F9 EC 64 2F 
2ffe6     0A 31 F1 30 
2ffea     D9 30 C0 30 
2ffee     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2fff2     78 30 5F 30 
2fff6     46 30 38 23 
2fffa     A6 F6 19 EE 
2fffe     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
30002     20 EC 28 EC 
30006     32 EC 3C EC 
3000a     47 EC 51 EC 
3000e     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
30012     A3 22 93 22 
30016     7F 22 6E 22 
3001a     5D 22 4C 22 
3001e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
30022     77 09 76 F1 
30026     CC EC F0 EB 
3002a     CD EB CE EB 
3002e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
30032     ED EB F5 EB 
30036     3E F6 6B 22 
3003a     5F 22 4E 22 
3003e     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
30042     1B 22 0B 22 
30046     FA 21 E9 21 
3004a     D8 21 4D FF 
3004e     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
30052     92 EB 7B EB 
30056     82 EB 8C EB 
3005a     97 EB A1 EB 
3005e     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
30062     15 22 04 22 
30066     F3 21 E3 21 
3006a     D2 21 C0 21 
3006e     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
30072     8E 21 7D 21 
30076     9A F8 A4 ED 
3007a     8E EB 2F EB 
3007e     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
30082     37 EB 42 EB 
30086     4C EB 57 EB 
3008a     B2 17 22 19 
3008e     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
30092     FD 18 EF 18 
30096     E3 18 D6 18 
3009a     CA 18 BD 18 
3009e     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
300a2     60 EC 35 EB 
300a6     01 EB 01 EB 
300aa     0C EB 16 EB 
300ae     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
300b2     34 EB D0 18 
300b6     00 19 F4 18 
300ba     E8 18 DA 18 
300be     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
300c2     B6 18 A9 18 
300c6     9D 18 91 05 
300ca     F0 EF CA EB 
300ce     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
300d2     E8 EA F2 EA 
300d6     FE EA 07 EB 
300da     12 EB C2 EF 
300de     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
300e2     D9 18 CD 18 
300e6     C0 18 B3 18 
300ea     A7 18 9B 18 
300ee     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
300f2     B8 FC 30 EE 
300f6     61 EB DC EA 
300fa     CD EA D2 EA 
300fe     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
30102     F3 EA FE EA 
30106     D2 09 D1 18 
3010a     C3 18 17 18 
3010e     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
30112     66 11 52 11 
30116     49 11 41 11 
3011a     38 11 E0 F4 
3011e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
30122     C9 EA C5 EA 
30126     CF EA DB EA 
3012a     E6 EA EF EA 
3012e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
30132     89 11 80 11 
30136     78 11 6E 11 
3013a     67 11 5D 11 
3013e     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
30142     43 11 32 0D 
30146     9C F1 07 EC 
3014a     F8 EA CD EA 
3014e     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
30152     E4 EA ED EA 
30156     F8 EA 02 EB 
3015a     55 11 91 11 
3015e     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
30162     75 11 6E 11 
30166     64 11 5E 11 
3016a     54 11 4A 11 
3016e     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
30172     A8 EB F1 EA 
30176     D9 EA DC EA 
3017a     E8 EA F1 EA 
3017e     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
30182     A6 EB 9E 11 
30186     A0 11 96 11 
3018a     8D 11 85 11 
3018e     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
30192     6A 11 CA 0D 
30196     36 0B 57 F8 
3019a     6C ED 57 EB 
3019e     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
301a2     F4 EA FF EA 
301a6     09 EB 15 EB 
301aa     1E EB 1A FD 
301ae     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
301b2     ED 0A E8 0A 
301b6     E2 0A DC 0A 
301ba     D6 0A D1 0A 
301be     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
301c2     F8 F3 BC EC 
301c6     57 EB 1E EB 
301ca     18 EB 24 EB 
301ce     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
301d2     42 EB 4D EB 
301d6     08 09 20 0B 
301da     1A 0B 14 0B 
301de     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
301e2     04 0B FE 0A 
301e6     F9 0A F2 0A 
301ea     84 08 3A F1 
301ee     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
301f2     42 EB 42 EB 
301f6     4E EB 57 EB 
301fa     62 EB 6B EB 
301fe     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
30202     48 0B 43 0B 
30206     3C 0B 36 0B 
3020a     31 0B 2C 0B 
3020e     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
30212     1B 0B 5C 00 
30216     6A EF 1B EC 
3021a     81 EB 6A EB 
3021e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
30222     85 EB 8E EB 
30226     99 EB A3 EB 
3022a     DD 05 E5 05 
3022e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
30232     DB 05 D8 05 
30236     D5 05 D1 05 
3023a     D0 05 CB 05 
3023e     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
30242     0C EC BB EB 
30246     B3 EB BB EB 
3024a     C5 EB D0 EB 
3024e     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
30252     E4 F7 2C 06 
30256     28 06 24 06 
3025a     22 06 1F 06 
3025e     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
30262     16 06 14 06 
30266     0F 06 D0 F3 
3026a     65 ED 2D EC 
3026e     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
30272     01 EC 0A EC 
30276     14 EC 1E EC 
3027a     29 EC FB 03 
3027e     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
30282     63 06 60 06 
30286     5E 06 59 06 
3028a     58 06 54 06 
3028e     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
30292     69 F1 21 ED 
30296     55 EC 33 EC 
3029a     36 EC 40 EC 
3029e     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
302a2     5C EC 68 EC 
302a6     92 02 D9 02 
302aa     D7 02 D7 02 
302ae     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
302b2     D1 02 D1 02 
302b6     CE 02 CD 02 
302ba     5D FC 80 EF 
302be     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
302c2     83 EC 8A EC 
302c6     93 EC 9C EC 
302ca     A5 EC B1 EC 
302ce     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
302d2     2B 03 2A 03 
302d6     29 03 26 03 
302da     25 03 24 03 
302de     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
302e2     1F 03 70 F7 
302e6     D0 EE 27 ED 
302ea     DB EC D4 EC 
302ee     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
302f2     F0 EC FA EC 
302f6     02 ED F9 F4 
302fa     7B 03 7C 03 
302fe     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
30302     75 03 73 03 
30306     72 03 70 03 
3030a     6D 03 6C 03 
3030e     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
30312     54 ED 22 ED 
30316     22 ED 2C ED 
3031a     35 ED 3F ED 
3031e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
30322     14 01 C3 03 
30326     C1 03 C0 03 
3032a     5F 01 A5 00 
3032e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
30332     7B 00 7C 00 
30336     20 00 85 F1 
3033a     2A EE 89 ED 
3033e     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
30342     80 ED 87 ED 
30346     90 ED 9A ED 
3034a     A3 ED 73 00 
3034e     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
30352     D0 00 D0 00 
30356     D0 00 D0 00 
3035a     D0 00 CF 00 
3035e     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
30362     80 F0 3D EE 
30366     D5 ED C7 ED 
3036a     CD ED D6 ED 
3036e     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
30372     F2 ED FA ED 
30376     1D 01 29 01 
3037a     27 01 27 01 
3037e     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
30382     25 01 26 01 
30386     26 01 23 01 
3038a     D0 F7 EC EF 
3038e     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
30392     1C EE 24 EE 
30396     2D EE 37 EE 
3039a     40 EE 47 EE 
3039e     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
303a2     7D 01 7B 01 
303a6     7A 01 7A 01 
303aa     79 01 78 01 
303ae     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
303b2     84 FE DE F3 
303b6     6C EF 93 EE 
303ba     72 EE 72 EE 
303be     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
303c2     8B EE 95 EE 
303c6     9E EE 15 FC 
303ca     67 FE 67 FE 
303ce     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
303d2     6B FE 6B FE 
303d6     6D FE 6D FE 
303da     6D FE 6F FE 
303de     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
303e2     DF EE CC EE 
303e6     CF EE D9 EE 
303ea     E1 EE EA EE 
303ee     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
303f2     5A FE C4 FE 
303f6     C3 FE C5 FE 
303fa     C6 FE C6 FE 
303fe     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
30402     C8 FE C7 FE 
30406     DA FB 85 F1 
3040a     8D EF 31 EF 
3040e     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
30412     34 EF 3E EF 
30416     46 EF 4F EF 
3041a     57 EF 0D FF 
3041e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
30422     1F FF 1F FF 
30426     21 FF 21 FF 
3042a     21 FF 21 FF 
3042e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
30432     15 F1 BE EF 
30436     84 EF 7E EF 
3043a     88 EF 8F EF 
3043e     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
30442     A9 EF 06 F2 
30446     A6 FC AB FC 
3044a     AD FC AE FC 
3044e     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
30452     B2 FC B4 FC 
30456     B6 FC B7 FC 
3045a     8B F4 BD F0 
3045e     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
30462     E4 EF EE EF 
30466     F6 EF FD EF 
3046a     04 F0 0E F0 
3046e     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
30472     0B FD 0D FD 
30476     0F FD 11 FD 
3047a     11 FD 13 FD 
3047e     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
30482     17 FD 64 F3 
30486     CD F0 52 F0 
3048a     41 F0 45 F0 
3048e     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
30492     5B F0 64 F0 
30496     6D F0 FB FC 
3049a     65 FD 68 FD 
3049e     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
304a2     6C FD 6D FD 
304a6     6F FD 70 FD 
304aa     72 FD B3 FB 
304ae     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
304b2     A4 F0 99 F0 
304b6     A0 F0 A8 F0 
304ba     AE F0 B9 F0 
304be     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
304c2     CB FB DD FB 
304c6     DE FB E0 FB 
304ca     E3 FB E3 FB 
304ce     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
304d2     E9 FB EC FB 
304d6     62 F7 27 F2 
304da     2A F1 FF F0 
304de     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
304e2     0C F1 13 F1 
304e6     1B F1 23 F1 
304ea     33 F2 3C FC 
304ee     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
304f2     42 FC 45 FC 
304f6     47 FC 48 FC 
304fa     4A FC 4C FC 
304fe     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
30502     20 F2 77 F1 
30506     5C F1 5F F1 
3050a     64 F1 6C F1 
3050e     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
30512     83 F1 DC F8 
30516     9A FC 9A FC 
3051a     9B FC 9E FC 
3051e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
30522     A3 FC A4 FC 
30526     A6 FC A9 FC 
3052a     90 F4 33 F2 
3052e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
30532     BA F1 BF F1 
30536     C7 F1 CE F1 
3053a     D6 F1 DC F1 
3053e     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
30542     F3 FC F5 FC 
30546     FE FB 79 FB 
3054a     62 FB 5F FB 
3054e     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
30552     6F FA AF F3 
30556     53 F2 12 F2 
3055a     0F F2 15 F2 
3055e     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
30562     2A F2 32 F2 
30566     38 F2 9A FB 
3056a     AF FB B1 FB 
3056e     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
30572     B7 FB B8 FB 
30576     BA FB BC FB 
3057a     C1 FB 3B F8 
3057e     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
30582     6E F2 6C F2 
30586     74 F2 7A F2 
3058a     81 F2 87 F2 
3058e     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
30592     06 FC 09 FC 
30596     0C FC 0E FC 
3059a     0F FC 12 FC 
3059e     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
305a2     17 FC 1A FC 
305a6     B2 F6 7B F3 
305aa     DD F2 C5 F2 
305ae     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
305b2     D4 F2 DB F2 
305b6     E0 F2 E8 F2 
305ba     28 F8 60 FC 
305be     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
305c2     64 FC 66 FC 
305c6     68 FC 6A FC 
305ca     6D FC 52 FC 
305ce     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
305d2     78 F3 24 F3 
305d6     1A F3 1E F3 
305da     24 F3 2A F3 
305de     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
305e2     3D F3 80 FA 
305e6     0C FB 0F FB 
305ea     10 FB 14 FB 
305ee     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
305f2     1B FB 1D FB 
305f6     1F FB 92 FA 
305fa     DE F4 AE F3 
305fe     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
30602     79 F3 7E F3 
30606     84 F3 8C F3 
3060a     92 F3 97 F3 
3060e     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
30612     67 FB 69 FB 
30616     6B FB 6F FB 
3061a     71 FB 72 FB 
3061e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
30622     E3 F8 BA F4 
30626     EE F3 CC F3 
3062a     CA F3 CF F3 
3062e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
30632     E2 F3 E8 F3 
30636     ED F3 B7 FB 
3063a     BC FB BE FB 
3063e     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
30642     C4 FB C6 FB 
30646     C8 FB C9 FB 
3064a     CC FB 8F F7 
3064e     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
30652     1E F4 1E F4 
30656     24 F4 2A F4 
3065a     30 F4 38 F4 
3065e     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
30662     AD FA B1 FA 
30666     B4 FA B6 FA 
3066a     BA FA BB FA 
3066e     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
30672     C2 FA C6 FA 
30676     55 F6 C6 F4 
3067a     7D F4 72 F4 
3067e     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
30682     83 F4 89 F4 
30686     8F F4 94 F4 
3068a     66 FA 03 FB 
3068e     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
30692     0A FB 0E FB 
30696     10 FB 11 FB 
3069a     16 FB 18 FB 
3069e     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
306a2     F9 F4 CA F4 
306a6     C5 F4 CB F4 
306aa     D1 F4 D7 F4 
306ae     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
306b2     E8 F4 3F FB 
306b6     56 FB 58 FB 
306ba     5A FB 5E FB 
306be     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
306c2     64 FB 64 FB 
306c6     69 FB 99 F9 
306ca     E9 F5 33 F5 
306ce     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
306d2     1D F5 22 F5 
306d6     27 F5 2E F5 
306da     32 F5 37 F5 
306de     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
306e2     BC FA BC FA 
306e6     C1 FA C2 FA 
306ea     C4 FA C8 FA 
306ee     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
306f2     F9 F7 DB F5 
306f6     78 F5 69 F5 
306fa     6A F5 70 F5 
306fe     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
30702     7F F5 85 F5 
30706     6E F7 06 FB 
3070a     0A FB 0B FB 
3070e     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
30712     14 FB 15 FB 
30716     18 FB 1B FB 
3071a     1D FB 70 F7 
3071e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
30722     B6 F5 BB F5 
30726     C0 F5 C6 F5 
3072a     CA F5 CF F5 
3072e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
30732     54 FB 56 FB 
30736     5A FB 5B FB 
3073a     5E FB 5F FB 
3073e     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
30742     67 FB 52 FB 
30746     29 F7 33 F6 
3074a     06 F6 02 F6 
3074e     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
30752     10 F6 16 F6 
30756     1A F6 1F F6 
3075a     81 FB 9F FB 
3075e     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
30762     51 FB F2 FA 
30766     E3 FA E3 FA 
3076a     E5 FA E9 FA 
3076e     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
30772     64 F6 4D F6 
30776     4D F6 53 F6 
3077a     57 F6 5C F6 
3077e     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
30782     6A F6 19 FB 
30786     1E FB 22 FB 
3078a     23 FB 24 FB 
3078e     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
30792     2C FB 2E FB 
30796     32 FB F0 F8 
3079a     01 F7 A5 F6 
3079e     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
307a2     9F F6 A3 F6 
307a6     A6 F6 AC F6 
307aa     B0 F6 EB F7 
307ae     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
307b2     68 FB 6C FB 
307b6     6E FB 71 FB 
307ba     72 FB 74 FB 
307be     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
307c2     71 F8 21 F7 
307c6     E5 F6 DD F6 
307ca     E1 F6 E6 F6 
307ce     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
307d2     F5 F6 F7 F6 
307d6     F7 FA AB FB 
307da     AD FB AF FB 
307de     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
307e2     B6 FB B9 FB 
307e6     BB FB BC FB 
307ea     21 FB 07 F8 
307ee     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
307f2     22 F7 26 F7 
307f6     2B F7 2E F7 
307fa     34 F7 38 F7 
307fe     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
30802     13 FB 16 FB 
30806     17 FB 1B FB 
3080a     1E FB 20 FB 
3080e     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
30812     26 FB 77 FA 
30816     F3 F7 7C F7 
3081a     67 F7 6A F7 
3081e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
30822     74 F7 7A F7 
30826     7E F7 82 F7 
3082a     53 FB 5A FB 
3082e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
30832     5F FB 63 FB 
30836     65 FB 67 FB 
3083a     69 FB 6A FB 
3083e     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
30842     B5 F7 A9 F7 
30846     AD F7 B0 F7 
3084a     B5 F7 B8 F7 
3084e     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
30852     6E F8 99 FB 
30856     9C FB 9D FB 
3085a     9F FB A4 FB 
3085e     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
30862     A9 FB AB FB 
30866     AD FB 46 F9 
3086a     26 F8 F0 F7 
3086e     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
30872     F4 F7 F8 F7 
30876     FB F7 FF F7 
3087a     03 F8 65 FA 
3087e     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
30882     2B FB 2F FB 
30886     30 FB 32 FB 
3088a     34 FB 38 FB 
3088e     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
30892     E9 F8 4A F8 
30896     2E F8 2C F8 
3089a     2F F8 36 F8 
3089e     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
308a2     41 F8 44 F8 
308a6     4A FB 67 FB 
308aa     68 FB 6B FB 
308ae     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
308b2     73 FB 74 FB 
308b6     78 FB 7A FB 
308ba     14 FB E7 F8 
308be     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
308c2     6D F8 70 F8 
308c6     73 F8 78 F8 
308ca     7C F8 80 F8 
308ce     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
308d2     A6 FB A7 FB 
308d6     A9 FB AC FB 
308da     AF FB B1 FB 
308de     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
308e2     B7 FB 73 FA 
308e6     F8 F8 B4 F8 
308ea     A9 F8 AB F8 
308ee     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
308f2     B4 F8 B8 F8 
308f6     BB F8 FA F8 
308fa     64 FB 65 FB 
308fe     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
30902     6D FB 6F FB 
30906     70 FB 74 FB 
3090a     77 FB 77 FB 
3090e     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
30912     E9 F8 E4 F8 
30916     E8 F8 EB F8 
3091a     EE F8 F2 F8 
3091e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
30922     B5 FA 9F FB 
30926     A1 FB A4 FB 
3092a     A5 FB A9 FB 
3092e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
30932     AE FB B1 FB 
30936     B2 FB C7 F9 
3093a     39 F9 22 F9 
3093e     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
30942     26 F9 2A F9 
30946     2E F9 32 F9 
3094a     33 F9 BA FB 
3094e     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
30952     DE FB E1 FB 
30956     E2 FB E4 FB 
3095a     E5 FB E7 FB 
3095e     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
30962     C5 F9 67 F9 
30966     57 F9 56 F9 
3096a     5B F9 5F F9 
3096e     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
30972     68 F9 6C F9 
30976     0B FC 11 FC 
3097a     14 FC 15 FC 
3097e     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
30982     B5 FB B5 FB 
30986     B6 FB B8 FB 
3098a     E9 FA C8 F9 
3098e     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
30992     90 F9 94 F9 
30996     95 F9 99 F9 
3099a     9D F9 9F F9 
3099e     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
309a2     DE FB DF FB 
309a6     E2 FB E4 FB 
309aa     E6 FB E8 FB 
309ae     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
309b2     EF FB AC FA 
309b6     E9 F9 C7 F9 
309ba     C3 F9 C8 F9 
309be     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
309c2     D0 F9 D4 F9 
309c6     D6 F9 0E FB 
309ca     11 FC 13 FC 
309ce     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
309d2     19 FC 1B FC 
309d6     1D FC 1E FC 
309da     21 FC 22 FC 
309de     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
309e2     F7 F9 F7 F9 
309e6     FB F9 FE F9 
309ea     00 FA 03 FA 
309ee     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
309f2     1B FC 45 FC 
309f6     46 FC 48 FC 
309fa     4A FC 4B FC 
309fe     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
30a02     52 FC 54 FC 
30a06     F3 FB 82 FA 
30a0a     35 FA 28 FA 
30a0e     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
30a12     31 FA 32 FA 
30a16     37 FA 37 FA 
30a1a     3C FA 00 FC 
30a1e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
30a22     09 FC 0B FC 
30a26     0F FC 12 FC 
30a2a     12 FC 15 FC 
30a2e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
30a32     8D FA 60 FA 
30a36     5B FA 5C FA 
30a3a     60 FA 61 FA 
30a3e     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
30a42     6C FA 6D FA 
30a46     37 FC 3A FC 
30a4a     3B FC 3D FC 
30a4e     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
30a52     43 FC 44 FC 
30a56     45 FC 47 FC 
30a5a     51 FB AB FA 
30a5e     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
30a62     8E FA 91 FA 
30a66     93 FA 95 FA 
30a6a     98 FA 9B FA 
30a6e     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
30a72     68 FC 6A FC 
30a76     6C FC 6E FC 
30a7a     70 FC 72 FC 
30a7e     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
30a82     76 FC 3B FB 
30a86     D0 FA BB FA 
30a8a     B9 FA BD FA 
30a8e     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
30a92     C4 FA C6 FA 
30a96     CA FA 13 FC 
30a9a     3A FC 3A FC 
30a9e     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
30aa2     41 FC 43 FC 
30aa6     44 FC 47 FC 
30aaa     48 FC 3C FC 
30aae     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
30ab2     E6 FA E8 FA 
30ab6     EB FA EE FA 
30aba     F0 FA F2 FA 
30abe     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
30ac2     61 FC 66 FC 
30ac6     68 FC 6B FC 
30aca     6C FC 6E FC 
30ace     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
30ad2     73 FC 75 FC 
30ad6     13 FC 3F FB 
30ada     17 FB 12 FB 
30ade     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
30ae2     1A FB 1D FB 
30ae6     1F FB 20 FB 
30aea     23 FB 92 FC 
30aee     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
30af2     96 FC 97 FC 
30af6     9A FC 9C FC 
30afa     9E FC 9F FC 
30afe     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
30b02     5A FB 41 FB 
30b06     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
30b0a     00 00 00 00 | zero2 long 0
30b0e     01 00 00 00 
30b12     00 00 00 00 
30b16     00 00 00 00 
30b1a     00 00 00 00 | mouse  file "mouse2.def"
30b1e     00 00 00 00 
30b22     00 00 00 00 
30b26     00 00 00 00 
30b2a     00 00 00 00 | 	byte	$00[16]
30b2e     01 01 00 00 
30b32     00 00 00 00 
30b36     00 00 00 00 
30b3a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b3e     00 00 00 00 
30b42     00 00 00 00 
30b46     00 00 00 00 
30b4a     00 00 00 00 | 	byte	$00[16]
30b4e     01 0D 01 00 
30b52     00 00 00 00 
30b56     00 00 00 00 
30b5a     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b5e     00 00 00 00 
30b62     00 00 00 00 
30b66     00 00 00 00 
30b6a     00 00 00 00 | 	byte	$00[16]
30b6e     01 0D 0D 01 
30b72     00 00 00 00 
30b76     00 00 00 00 
30b7a     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b7e     00 00 00 00 
30b82     00 00 00 00 
30b86     00 00 00 00 
30b8a     00 00 00 00 | 	byte	$00[16]
30b8e     01 0D 0D 0D 
30b92     01 00 00 00 
30b96     00 00 00 00 
30b9a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b9e     00 00 00 00 
30ba2     00 00 00 00 
30ba6     00 00 00 00 
30baa     00 00 00 00 | 	byte	$00[16]
30bae     01 0D 0D 0D 
30bb2     0D 01 00 00 
30bb6     00 00 00 00 
30bba     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30bbe     00 00 00 00 
30bc2     00 00 00 00 
30bc6     00 00 00 00 
30bca     00 00 00 00 | 	byte	$00[16]
30bce     01 0D 0D 0D 
30bd2     0D 0D 01 00 
30bd6     00 00 00 00 
30bda     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
30bde     00 00 00 00 
30be2     00 00 00 00 
30be6     00 00 00 00 
30bea     00 00 00 00 | 	byte	$00[16]
30bee     01 0D 0D 0D 
30bf2     0D 0D 0D 01 
30bf6     00 00 00 00 
30bfa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
30bfe     00 00 00 00 
30c02     00 00 00 00 
30c06     00 00 00 00 
30c0a     00 00 00 00 | 	byte	$00[16]
30c0e     01 0D 0D 0D 
30c12     0D 0D 0D 0C 
30c16     01 00 00 00 
30c1a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
30c1e     00 00 00 00 
30c22     00 00 00 00 
30c26     00 00 00 00 
30c2a     00 00 00 00 | 	byte	$00[16]
30c2e     01 0D 0D 0D 
30c32     0D 0D 0D 0D 
30c36     0C 01 00 00 
30c3a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
30c3e     00 00 00 00 
30c42     00 00 00 00 
30c46     00 00 00 00 
30c4a     00 00 00 00 | 	byte	$00[16]
30c4e     01 0D 0D 0D 
30c52     0D 0D 0D 0D 
30c56     0D 0C 01 00 
30c5a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
30c5e     00 00 00 00 
30c62     00 00 00 00 
30c66     00 00 00 00 
30c6a     00 00 00 00 | 	byte	$00[16]
30c6e     01 0D 0D 0D 
30c72     0D 0D 0D 0D 
30c76     0D 0D 0B 01 
30c7a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
30c7e     00 00 00 00 
30c82     00 00 00 00 
30c86     00 00 00 00 
30c8a     00 00 00 00 | 	byte	$00[16]
30c8e     01 0D 0D 0D 
30c92     0C 0D 0D 03 
30c96     01 01 01 01 
30c9a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
30c9e     00 00 00 00 
30ca2     00 00 00 00 
30ca6     00 00 00 00 
30caa     00 00 00 00 | 	byte	$00[16]
30cae     01 0D 0D 0C 
30cb2     01 09 0D 03 
30cb6     00 00 00 00 
30cba     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
30cbe     00 00 00 00 
30cc2     00 00 00 00 
30cc6     00 00 00 00 
30cca     00 00 00 00 | 	byte	$00[16]
30cce     01 0D 0C 01 
30cd2     00 01 0D 0B 
30cd6     01 00 00 00 
30cda     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
30cde     00 00 00 00 
30ce2     00 00 00 00 
30ce6     00 00 00 00 
30cea     00 00 00 00 | 	byte	$00[16]
30cee     01 0C 01 00 
30cf2     00 01 0A 0D 
30cf6     01 00 00 00 
30cfa     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
30cfe     00 00 00 00 
30d02     00 00 00 00 
30d06     00 00 00 00 
30d0a     00 00 00 00 | 	byte	$00[16]
30d0e     01 01 00 00 
30d12     00 00 01 0D 
30d16     0B 01 00 00 
30d1a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
30d1e     00 00 00 00 
30d22     00 00 00 00 
30d26     00 00 00 00 
30d2a     00 00 00 00 
30d2e     00 00 00 00 
30d32     00 00       | 	byte	$00[22]
30d34     01 0B 0D 01 
30d38     00 00 00 00 
30d3c     00 00 00 00 
30d40     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30d44     00 00 00 00 
30d48     00 00 00 00 
30d4c     00 00 00 00 
30d50     00 00 00 00 
30d54     00          | 	byte	$00[17]
30d55     01 01 00 00 
30d59     00 00 00 00 
30d5d     00 00 00 00 
30d61     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30d65     00 00 00 00 
      ...             
30f09     00 00 00 00 
30f0d     00          | 	byte	$00[425]
30f0e     73 32 00 04 
30f12     00 00 10 00 
30f16     00 00 00 00 
30f1a     00 00 00 00 | atari2 file "atari2.s2"
30f1e     43 87 43 87 
30f22     43 87 44 87 
30f26     43 87 44 87 
30f2a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
30f2e     43 87 43 87 
30f32     43 87 44 87 
30f36     43 87 43 87 
30f3a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
30f3e     44 87 43 87 
30f42     44 87 43 87 
30f46     43 87 43 87 
30f4a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
30f4e     43 87 43 87 
30f52     44 87 43 87 
30f56     44 87 44 87 
30f5a     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
30f5e     43 87 43 87 
30f62     44 87 43 87 
30f66     43 87 42 87 
30f6a     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
30f6e     43 87 43 87 
30f72     43 87 43 87 
30f76     44 87 43 87 
30f7a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
30f7e     44 87 44 87 
30f82     43 87 44 87 
30f86     43 87 44 87 
30f8a     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
30f8e     44 87 43 87 
30f92     44 87 44 87 
30f96     43 87 43 87 
30f9a     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
30f9e     43 87 44 87 
30fa2     44 87 43 87 
30fa6     43 87 44 87 
30faa     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
30fae     43 87 43 87 
30fb2     43 87 43 87 
30fb6     43 87 43 87 
30fba     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
30fbe     42 87 43 87 
30fc2     44 87 42 87 
30fc6     43 87 43 87 
30fca     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
30fce     43 87 44 87 
30fd2     44 87 43 87 
30fd6     43 87 43 87 
30fda     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
30fde     43 87 5C 87 
30fe2     EE 86 AC 87 
30fe6     4C 7C A3 78 
30fea     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
30fee     BC 78 BB 78 
30ff2     BD 78 BC 78 
30ff6     BB 78 BD 78 
30ffa     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
30ffe     BB 78 BB 78 
31002     BC 78 BC 78 
31006     BC 78 BB 78 
3100a     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3100e     BC 78 BC 78 
31012     BC 78 BC 78 
31016     BC 78 BC 78 
3101a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3101e     BB 78 BC 78 
31022     A0 78 4C 7C 
31026     11 7A 29 89 
3102a     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3102e     44 87 43 87 
31032     44 87 43 87 
31036     43 87 42 87 
3103a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3103e     43 87 43 87 
31042     44 87 ED 85 
31046     71 85 52 79 
3104a     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
3104e     BC 78 BC 78 
31052     BC 78 BC 78 
31056     BC 78 BC 78 
3105a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3105e     BC 78 BC 78 
31062     BC 78 A0 78 
31066     CF 7A B9 81 
3106a     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
3106e     44 87 43 87 
31072     43 87 44 87 
31076     43 87 44 87 
3107a     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3107e     43 87 43 87 
31082     43 87 43 87 
31086     44 87 43 87 
3108a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3108e     43 87 43 87 
31092     44 87 43 87 
31096     44 87 43 87 
3109a     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3109e     44 87 43 87 
310a2     43 87 43 87 
310a6     5A 87 39 81 
310aa     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
310ae     A5 78 BC 78 
310b2     BB 78 BC 78 
310b6     BB 78 BC 78 
310ba     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
310be     BC 78 BC 78 
310c2     BC 78 BC 78 
310c6     BC 78 8F 79 
310ca     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
310ce     09 85 47 87 
310d2     43 87 43 87 
310d6     42 87 42 87 
310da     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
310de     43 87 43 87 
310e2     43 87 43 87 
310e6     43 87 44 87 
310ea     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
310ee     43 87 43 87 
310f2     44 87 43 87 
310f6     42 87 43 87 
310fa     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
310fe     44 87 43 87 
31102     43 87 43 87 
31106     44 87 44 87 
3110a     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3110e     94 78 55 7A 
31112     B9 78 BC 78 
31116     BC 78 BC 78 
3111a     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3111e     BC 78 BB 78 
31122     BC 78 BC 78 
31126     BC 78 BC 78 
3112a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3112e     BB 78 BC 78 
31132     BC 78 BC 78 
31136     BB 78 BC 78 
3113a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3113e     BC 78 BC 78 
31142     BD 78 BC 78 
31146     BC 78 BB 78 
3114a     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
3114e     94 78 B3 84 
31152     36 84 4A 87 
31156     43 87 43 87 
3115a     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
3115e     43 87 44 87 
31162     43 87 43 87 
31166     43 87 43 87 
3116a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3116e     43 87 44 87 
31172     43 87 44 87 
31176     43 87 43 87 
3117a     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3117e     43 87 43 87 
31182     43 87 45 87 
31186     43 87 43 87 
3118a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
3118e     43 87 44 87 
31192     44 87 44 87 
31196     43 87 43 87 
3119a     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3119e     43 87 42 87 
311a2     43 87 43 87 
311a6     44 87 43 87 
311aa     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
311ae     54 87 3C 82 
311b2     36 83 52 79 
311b6     C6 78 BC 78 
311ba     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
311be     BB 78 BB 78 
311c2     BC 78 BC 78 
311c6     BC 78 BC 78 
311ca     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
311ce     BD 78 ED 78 
311d2     1B 79 F4 83 
311d6     4D 83 4E 87 
311da     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
311de     44 87 43 87 
311e2     42 87 44 87 
311e6     43 87 42 87 
311ea     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
311ee     43 87 54 87 
311f2     26 82 B3 84 
311f6     D6 77 BB 78 
311fa     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
311fe     BC 78 BB 78 
31202     BB 78 BB 78 
31206     BB 78 BB 78 
3120a     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
3120e     BC 78 BC 78 
31212     26 79 18 75 
31216     36 83 1F 84 
3121a     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
3121e     43 87 43 87 
31222     43 87 43 87 
31226     43 87 44 87 
3122a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3122e     43 87 44 87 
31232     44 87 43 87 
31236     43 87 43 87 
3123a     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
3123e     43 87 43 87 
31242     43 87 43 87 
31246     44 87 44 87 
3124a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
3124e     44 87 43 87 
31252     43 87 43 87 
31256     43 87 44 87 
3125a     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3125e     44 87 44 87 
31262     44 87 43 87 
31266     44 87 43 87 
3126a     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3126e     43 87 43 87 
31272     43 87 44 87 
31276     44 87 43 87 
3127a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3127e     43 87 43 87 
31282     43 87 43 87 
31286     43 87 44 87 
3128a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3128e     43 87 44 87 
31292     43 87 44 87 
31296     19 87 7D 86 
3129a     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
3129e     B1 78 BC 78 
312a2     BC 78 BC 78 
312a6     BC 78 BC 78 
312aa     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
312ae     BC 78 BC 78 
312b2     BD 78 BC 78 
312b6     B7 78 3B 7B 
312ba     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
312be     96 86 44 87 
312c2     43 87 43 87 
312c6     43 87 43 87 
312ca     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
312ce     44 87 44 87 
312d2     43 87 44 87 
312d6     43 87 44 87 
312da     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
312de     43 87 44 87 
312e2     43 87 44 87 
312e6     43 87 44 87 
312ea     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
312ee     43 87 44 87 
312f2     43 87 43 87 
312f6     44 87 43 87 
312fa     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
312fe     44 87 44 87 
31302     43 87 43 87 
31306     43 87 44 87 
3130a     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3130e     43 87 43 87 
31312     43 87 43 87 
31316     44 87 44 87 
3131a     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
3131e     36 83 CF 7A 
31322     AB 78 BB 78 
31326     BC 78 BC 78 
3132a     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3132e     BB 78 BC 78 
31332     BC 78 BC 78 
31336     BC 78 BC 78 
3133a     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3133e     BC 78 BC 78 
31342     BC 78 BB 78 
31346     BC 78 BC 78 
3134a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3134e     BB 78 BC 78 
31352     BB 78 BC 78 
31356     BC 78 BD 78 
3135a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
3135e     BC 78 BC 78 
31362     BC 78 BC 78 
31366     BC 78 BD 78 
3136a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
3136e     BC 78 BB 78 
31372     BC 78 BB 78 
31376     BB 78 BC 78 
3137a     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
3137e     BC 78 BC 78 
31382     BC 78 BC 78 
31386     BC 78 BB 78 
3138a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
3138e     BC 78 BC 78 
31392     BC 78 BD 78 
31396     BB 78 BC 78 
3139a     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3139e     BC 78 BC 78 
313a2     BC 78 BB 78 
313a6     BC 78 BB 78 
313aa     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
313ae     BB 78 BC 78 
313b2     BC 78 BC 78 
313b6     BC 78 BB 78 
313ba     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
313be     BC 78 BC 78 
313c2     BC 78 BB 78 
313c6     BC 78 BB 78 
313ca     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
313ce     BC 78 BC 78 
313d2     BC 78 BC 78 
313d6     BB 78 BC 78 
313da     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
313de     BC 78 9F 78 
313e2     52 79 B3 84 
313e6     2F 86 60 87 
313ea     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
313ee     44 87 43 87 
313f2     43 87 43 87 
313f6     43 87 43 87 
313fa     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
313fe     43 87 43 87 
31402     43 87 44 87 
31406     43 87 43 87 
3140a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3140e     43 87 43 87 
31412     43 87 43 87 
31416     43 87 44 87 
3141a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3141e     44 87 44 87 
31422     5E 87 BC 80 
31426     FB 80 94 78 
3142a     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
3142e     BD 78 BC 78 
31432     BB 78 BC 78 
31436     BB 78 BB 78 
3143a     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
3143e     BC 78 BB 78 
31442     BB 78 6B 79 
31446     D6 77 AC 87 
3144a     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
3144e     43 87 44 87 
31452     43 87 43 87 
31456     44 87 43 87 
3145a     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3145e     43 87 44 87 
31462     43 87 5C 87 
31466     E7 80 00 80 
3146a     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
3146e     BC 78 BD 78 
31472     BC 78 BC 78 
31476     BC 78 BB 78 
3147a     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3147e     BC 78 BC 78 
31482     BB 78 BC 78 
31486     BB 78 BC 78 
3148a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3148e     BB 78 BC 78 
31492     BC 78 BC 78 
31496     BC 78 BC 78 
3149a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3149e     BC 78 BC 78 
314a2     BC 78 BC 78 
314a6     A0 78 8D 7B 
314aa     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
314ae     60 87 43 87 
314b2     44 87 44 87 
314b6     43 87 43 87 
314ba     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
314be     44 87 43 87 
314c2     43 87 43 87 
314c6     44 87 73 86 
314ca     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
314ce     51 7B B6 78 
314d2     BC 78 BD 78 
314d6     BC 78 BC 78 
314da     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
314de     BB 78 BC 78 
314e2     BD 78 BB 78 
314e6     BC 78 BB 78 
314ea     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
314ee     BC 78 BC 78 
314f2     BC 78 BC 78 
314f6     BB 78 BC 78 
314fa     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
314fe     BC 78 BB 78 
31502     BB 78 BC 78 
31506     BC 78 BB 78 
3150a     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
3150e     22 8C AF 84 
31512     48 87 43 87 
31516     44 87 43 87 
3151a     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
3151e     43 87 42 87 
31522     43 87 43 87 
31526     44 87 43 87 
3152a     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3152e     43 87 43 87 
31532     44 87 44 87 
31536     43 87 43 87 
3153a     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3153e     43 87 43 87 
31542     43 87 43 87 
31546     44 87 43 87 
3154a     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
3154e     9F 8B D6 77 
31552     16 7C B3 78 
31556     BC 78 BB 78 
3155a     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3155e     BB 78 BC 78 
31562     BB 78 BC 78 
31566     BC 78 BC 78 
3156a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3156e     BC 78 BB 78 
31572     BB 78 BC 78 
31576     BB 78 BC 78 
3157a     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3157e     BB 78 BB 78 
31582     BC 78 BC 78 
31586     BC 78 BB 78 
3158a     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3158e     BC 78 BC 78 
31592     BC 78 BD 78 
31596     BB 78 BC 78 
3159a     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
3159e     BC 78 BC 78 
315a2     BC 78 BB 78 
315a6     BC 78 BC 78 
315aa     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
315ae     A8 78 54 7E 
315b2     F4 83 17 82 
315b6     50 87 43 87 
315ba     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
315be     44 87 43 87 
315c2     44 87 43 87 
315c6     43 87 44 87 
315ca     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
315ce     43 87 28 87 
315d2     20 85 CF 7A 
315d6     70 7D AD 78 
315da     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
315de     BB 78 BC 78 
315e2     BC 78 BC 78 
315e6     BB 78 BB 78 
315ea     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
315ee     BB 78 B2 78 
315f2     9A 7C CF 7A 
315f6     4A 87 0D 87 
315fa     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
315fe     43 87 44 87 
31602     43 87 44 87 
31606     43 87 43 87 
3160a     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
3160e     44 87 43 87 
31612     28 87 51 85 
31616     11 7A 1E 7D 
3161a     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
3161e     BC 78 BB 78 
31622     BC 78 BC 78 
31626     BC 78 BC 78 
3162a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3162e     BB 78 BC 78 
31632     BB 78 BC 78 
31636     BC 78 BC 78 
3163a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3163e     BB 78 BC 78 
31642     BC 78 BC 78 
31646     BD 78 BB 78 
3164a     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
3164e     BC 78 BB 78 
31652     BC 78 BC 78 
31656     BC 78 BB 78 
3165a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3165e     BC 78 BC 78 
31662     BC 78 BC 78 
31666     BB 78 BC 78 
3166a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3166e     BC 78 BD 78 
31672     BC 78 BC 78 
31676     BC 78 BB 78 
3167a     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3167e     BC 78 BB 78 
31682     BB 78 BC 78 
31686     BC 78 BB 78 
3168a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3168e     BB 78 BB 78 
31692     BB 78 BC 78 
31696     B6 78 48 7D 
3169a     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
3169e     56 87 43 87 
316a2     42 87 44 87 
316a6     44 87 43 87 
316aa     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
316ae     43 87 44 87 
316b2     43 87 44 87 
316b6     4C 87 7E 83 
316ba     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
316be     F7 78 BC 78 
316c2     BC 78 BB 78 
316c6     BB 78 BC 78 
316ca     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
316ce     BC 78 BB 78 
316d2     BC 78 BC 78 
316d6     BB 78 BC 78 
316da     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
316de     BB 78 BC 78 
316e2     BC 78 BC 78 
316e6     BC 78 BB 78 
316ea     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
316ee     BC 78 BC 78 
316f2     BC 78 BC 78 
316f6     BC 78 BB 78 
316fa     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
316fe     BC 78 BB 78 
31702     BB 78 BC 78 
31706     BC 78 BB 78 
3170a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3170e     BC 78 BC 78 
31712     BB 78 BC 78 
31716     BC 78 BC 78 
3171a     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
3171e     73 32 00 04 
31722     00 00 10 00 
31726     00 00 00 00 
3172a     00 00 00 00 | atari12 file "atari12.s2"
3172e     00 6D 00 6D 
31732     00 6D 00 6D 
31736     00 6D 00 6D 
3173a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3173e     00 6D 00 6D 
31742     00 6D 00 6D 
31746     00 6D 00 6D 
3174a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3174e     00 6D 00 6D 
31752     00 6D 00 6D 
31756     00 6D 00 6D 
3175a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3175e     00 6D 00 6D 
31762     00 6D 00 6D 
31766     00 6D 00 6D 
3176a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3176e     00 6D 00 6D 
31772     00 6D 00 6D 
31776     00 6D 00 6D 
3177a     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
3177e     00 6C 00 6C 
31782     00 6C 00 6C 
31786     00 6C 00 6C 
3178a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3178e     00 6C 00 6C 
31792     00 6C 00 6C 
31796     00 6C 00 6C 
3179a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3179e     00 6C 00 6C 
317a2     00 6C 00 6C 
317a6     00 6C 00 6C 
317aa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317ae     00 6C 00 6C 
317b2     00 6C 00 6C 
317b6     00 6C 00 6C 
317ba     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317be     00 6C 00 6C 
317c2     00 6C 00 6C 
317c6     00 6C 00 6C 
317ca     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317ce     00 6C 00 6C 
317d2     00 6C 00 6C 
317d6     00 6C 00 6C 
317da     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317de     00 6C 00 6C 
317e2     00 6C 00 6C 
317e6     00 6C 00 6C 
317ea     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317ee     00 6C 00 6C 
317f2     00 6C 00 6C 
317f6     00 6C 00 6C 
317fa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317fe     00 6C 00 6C 
31802     00 6C 00 6C 
31806     00 6C 00 6C 
3180a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3180e     00 6C 00 6C 
31812     00 6C 00 6C 
31816     00 6C 00 6C 
3181a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3181e     00 6C 00 6C 
31822     00 6C 00 6C 
31826     00 6C 00 6C 
3182a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3182e     00 6C 00 6B 
31832     00 6B 00 6B 
31836     00 6B 00 6B 
3183a     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3183e     00 6B 00 6B 
31842     00 6B 00 6B 
31846     00 6B 00 6B 
3184a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3184e     00 6B 00 6B 
31852     00 6B 00 6B 
31856     00 6B 00 6B 
3185a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3185e     00 6B 00 6B 
31862     00 6B 00 6B 
31866     00 6B 00 6B 
3186a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3186e     00 6B 00 6B 
31872     00 6B 00 6B 
31876     00 6B 00 6B 
3187a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3187e     00 6B 00 6B 
31882     00 6B 00 6B 
31886     00 6B 00 6B 
3188a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3188e     00 6B 00 6B 
31892     00 6B 00 6B 
31896     00 6B 00 6B 
3189a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3189e     00 6B 00 6B 
318a2     00 6B 00 6B 
318a6     00 6B 00 6B 
318aa     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
318ae     00 6B 00 6B 
318b2     00 6B 00 6B 
318b6     00 6B 00 6B 
318ba     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
318be     00 6B 00 6B 
318c2     00 6B 00 6B 
318c6     00 6A 00 9D 
318ca     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
318ce     00 9E 00 9E 
318d2     00 9E 00 9E 
318d6     00 9E 00 9E 
318da     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
318de     00 9E 00 9E 
318e2     00 9E 00 9E 
318e6     00 9E 00 9E 
318ea     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
318ee     00 9E 00 9E 
318f2     00 9E 00 9E 
318f6     00 9E 00 9E 
318fa     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
318fe     00 9E 00 9E 
31902     00 9E 00 9E 
31906     00 9E 00 9E 
3190a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3190e     00 9E 00 9E 
31912     00 9E 00 9E 
31916     00 9E 00 9E 
3191a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3191e     00 9E 00 9E 
31922     00 9E 00 9E 
31926     00 9E 00 9E 
3192a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3192e     00 9E 00 9E 
31932     00 9E 00 9E 
31936     00 9E 00 9E 
3193a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3193e     00 9E 00 9E 
31942     00 9E 00 9E 
31946     00 9E 00 9E 
3194a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3194e     00 9E 00 9E 
31952     00 9E 00 9E 
31956     00 9E 00 9E 
3195a     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
3195e     00 9F 00 9F 
31962     00 9F 00 9F 
31966     00 9F 00 9F 
3196a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3196e     00 9F 00 9F 
31972     00 9F 00 9F 
31976     00 9F 00 9F 
3197a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3197e     00 9F 00 9F 
31982     00 9F 00 9F 
31986     00 9F 00 9F 
3198a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3198e     00 9F 00 9F 
31992     00 9F 00 9F 
31996     00 9F 00 9F 
3199a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3199e     00 9F 00 9F 
319a2     00 9F 00 9F 
319a6     00 9F 00 9F 
319aa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319ae     00 9F 00 9F 
319b2     00 9F 00 9F 
319b6     00 9F 00 9F 
319ba     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319be     00 9F 00 9F 
319c2     00 9F 00 9F 
319c6     00 9F 00 9F 
319ca     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319ce     00 9F 00 9F 
319d2     00 9F 00 9F 
319d6     00 9F 00 9F 
319da     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319de     00 9F 00 9F 
319e2     00 9F 00 9F 
319e6     00 9F 00 9F 
319ea     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319ee     00 9F 00 9F 
319f2     00 9F 00 9F 
319f6     00 9F 00 9F 
319fa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319fe     00 9F 00 9F 
31a02     00 9F 00 9F 
31a06     00 9F 00 9F 
31a0a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31a0e     00 9F 00 9F 
31a12     00 9F 00 9F 
31a16     00 9F 00 9F 
31a1a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31a1e     00 9F 00 9F 
31a22     00 9F 00 A0 
31a26     00 A0 00 A0 
31a2a     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a2e     00 A0 00 A0 
31a32     00 A0 00 A0 
31a36     00 A0 00 A0 
31a3a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a3e     00 A0 00 A0 
31a42     00 A0 00 A0 
31a46     00 A0 00 A0 
31a4a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a4e     00 A0 00 A0 
31a52     00 A0 00 A0 
31a56     00 A0 00 A0 
31a5a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a5e     00 A0 00 A0 
31a62     00 A0 00 A0 
31a66     00 A0 00 A0 
31a6a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a6e     00 A0 00 A0 
31a72     00 A0 00 A0 
31a76     00 A0 00 A0 
31a7a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a7e     00 A0 00 A0 
31a82     00 A0 00 A0 
31a86     00 A0 00 A0 
31a8a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a8e     00 A0 00 A0 
31a92     00 A0 00 A0 
31a96     00 A0 00 A0 
31a9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a9e     00 A0 00 A0 
31aa2     00 A0 00 A0 
31aa6     00 A0 00 A0 
31aaa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31aae     00 A0 00 A0 
31ab2     00 A0 00 A0 
31ab6     00 A0 00 A0 
31aba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31abe     00 A0 00 A0 
31ac2     00 A0 00 A0 
31ac6     00 A0 00 A0 
31aca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31ace     00 A0 00 A0 
31ad2     00 A0 00 A0 
31ad6     00 A0 00 A0 
31ada     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31ade     00 A0 00 A0 
31ae2     00 A0 00 A0 
31ae6     00 A0 00 A0 
31aea     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
31aee     00 6D 00 6D 
31af2     00 6D 00 6D 
31af6     00 6D 00 6D 
31afa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31afe     00 6D 00 6D 
31b02     00 6D 00 6D 
31b06     00 6D 00 6D 
31b0a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b0e     00 6D 00 6D 
31b12     00 6D 00 6D 
31b16     00 6D 00 6D 
31b1a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b1e     00 6D 00 6D 
31b22     00 6D 00 6D 
31b26     00 6D 00 6D 
31b2a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b2e     00 6D 00 6D 
31b32     00 6D 00 6D 
31b36     00 6D 00 6D 
31b3a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b3e     00 6D 00 6D 
31b42     00 6D 00 6D 
31b46     00 6D 00 6D 
31b4a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b4e     00 6D 00 6D 
31b52     00 6D 00 6D 
31b56     00 6D 00 6D 
31b5a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b5e     00 6D 00 6D 
31b62     00 6D 00 6D 
31b66     00 6D 00 6D 
31b6a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b6e     00 6D 00 6D 
31b72     00 A0 00 A0 
31b76     00 A0 00 A0 
31b7a     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b7e     00 A0 00 A0 
31b82     00 A0 00 A0 
31b86     00 A0 00 A0 
31b8a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b8e     00 A0 00 A0 
31b92     00 A0 00 A0 
31b96     00 A0 00 A0 
31b9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b9e     00 A0 00 A0 
31ba2     00 A0 00 A0 
31ba6     00 A0 00 A0 
31baa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31bae     00 A0 00 A0 
31bb2     00 A0 00 A0 
31bb6     00 A0 00 A0 
31bba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31bbe     00 A0 00 A0 
31bc2     00 A0 00 A0 
31bc6     00 A0 00 A0 
31bca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31bce     00 A0 00 A0 
31bd2     00 A0 00 A0 
31bd6     00 A0 00 A0 
31bda     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31bde     00 A0 00 A0 
31be2     00 A0 00 A0 
31be6     00 A0 00 A0 
31bea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31bee     00 A0 00 A0 
31bf2     00 A0 00 A0 
31bf6     00 A0 00 A0 
31bfa     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
31bfe     00 6D 00 6D 
31c02     00 6D 00 6D 
31c06     00 6D 00 6D 
31c0a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c0e     00 6D 00 6D 
31c12     00 6D 00 6D 
31c16     00 6D 00 6D 
31c1a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c1e     00 6D 00 6D 
31c22     00 6D 00 6D 
31c26     00 6D 00 6D 
31c2a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c2e     00 6D 00 6D 
31c32     00 6D 00 6D 
31c36     00 6D 00 6D 
31c3a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c3e     00 6D 00 6D 
31c42     00 6D 00 6D 
31c46     00 6D 00 6D 
31c4a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c4e     00 6D 00 6D 
31c52     00 6D 00 6D 
31c56     00 6D 00 6D 
31c5a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c5e     00 6D 00 6D 
31c62     00 6D 00 6D 
31c66     00 6D 00 6D 
31c6a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c6e     00 6D 00 6D 
31c72     00 6D 00 6D 
31c76     00 6D 00 6D 
31c7a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c7e     00 6D 00 6D 
31c82     00 6C 00 A0 
31c86     00 9F 00 A0 
31c8a     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
31c8e     00 A0 00 A0 
31c92     00 A0 00 A0 
31c96     00 A0 00 A0 
31c9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31c9e     00 A0 00 A0 
31ca2     00 A0 00 A0 
31ca6     00 A0 00 A0 
31caa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cae     00 A0 00 A0 
31cb2     00 A0 00 A0 
31cb6     00 A0 00 A0 
31cba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cbe     00 A0 00 A0 
31cc2     00 A0 00 A0 
31cc6     00 A0 00 A0 
31cca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cce     00 A0 00 A0 
31cd2     00 A0 00 A0 
31cd6     00 A0 00 A0 
31cda     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cde     00 A0 00 A0 
31ce2     00 A0 00 A0 
31ce6     00 A0 00 A0 
31cea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cee     00 A0 00 A0 
31cf2     00 A0 00 A0 
31cf6     00 A0 00 A0 
31cfa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cfe     00 A0 00 A0 
31d02     00 A0 00 A0 
31d06     00 A0 00 A0 
31d0a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d0e     00 A0 00 A0 
31d12     00 A0 00 A0 
31d16     00 A0 00 A0 
31d1a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d1e     00 A0 00 A0 
31d22     00 A0 00 A0 
31d26     00 A0 00 A0 
31d2a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d2e     00 A0 00 A0 
31d32     00 A0 00 A0 
31d36     00 A0 00 A0 
31d3a     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
31d3e     00 A1 00 A1 
31d42     00 A1 00 A1 
31d46     00 A1 00 A1 
31d4a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31d4e     00 A1 00 A1 
31d52     00 A1 00 A1 
31d56     00 A1 00 A1 
31d5a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31d5e     00 A1 00 A1 
31d62     00 A1 00 A1 
31d66     00 A1 00 A1 
31d6a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31d6e     00 A1 00 A1 
31d72     00 A1 00 A1 
31d76     00 A1 00 A1 
31d7a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31d7e     00 A1 00 A1 
31d82     00 A1 00 A1 
31d86     00 A1 00 A1 
31d8a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31d8e     00 A1 00 A1 
31d92     00 A1 00 A1 
31d96     00 6E 00 6E 
31d9a     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
31d9e     00 6E 00 6E 
31da2     00 6E 00 6E 
31da6     00 6E 00 6E 
31daa     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
31dae     00 6E 00 6E 
31db2     00 6E 00 6E 
31db6     00 6E 00 6E 
31dba     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
31dbe     00 6E 00 6E 
31dc2     00 6E 00 6E 
31dc6     00 6E 00 6E 
31dca     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
31dce     00 6E 00 6D 
31dd2     00 6D 00 6D 
31dd6     00 6D 00 6D 
31dda     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31dde     00 6D 00 6D 
31de2     00 6D 00 6D 
31de6     00 6D 00 6D 
31dea     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31dee     00 6D 00 6D 
31df2     00 6D 00 6D 
31df6     00 6D 00 6D 
31dfa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31dfe     00 6D 00 6D 
31e02     00 6D 00 6D 
31e06     00 6D 00 6D 
31e0a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e0e     00 6D 00 6D 
31e12     00 6D 00 6D 
31e16     00 6D 00 6D 
31e1a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e1e     00 6D 00 6D 
31e22     00 6D 00 6D 
31e26     00 6D 00 6D 
31e2a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e2e     00 6D 00 6D 
31e32     00 6D 00 6D 
31e36     00 6D 00 6D 
31e3a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e3e     00 6D 00 6D 
31e42     00 6D 00 6D 
31e46     00 6D 00 6D 
31e4a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e4e     00 6D 00 6D 
31e52     00 6D 00 6D 
31e56     00 6D 00 6D 
31e5a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e5e     00 6D 00 6D 
31e62     00 6D 00 6D 
31e66     00 6D 00 6D 
31e6a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e6e     00 6D 00 6D 
31e72     00 6D 00 6D 
31e76     00 6D 00 6D 
31e7a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e7e     00 6D 00 6D 
31e82     00 6C 00 6C 
31e86     00 6C 00 6C 
31e8a     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31e8e     00 6C 00 6C 
31e92     00 6C 00 6C 
31e96     00 6C 00 6C 
31e9a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31e9e     00 6C 00 6C 
31ea2     00 6C 00 6C 
31ea6     00 9D 00 9F 
31eaa     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
31eae     00 9F 00 9F 
31eb2     00 9F 00 9F 
31eb6     00 A0 00 A0 
31eba     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31ebe     00 A0 00 A0 
31ec2     00 A0 00 A0 
31ec6     00 A0 00 A0 
31eca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31ece     00 A0 00 A0 
31ed2     00 A0 00 A0 
31ed6     00 A0 00 A0 
31eda     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31ede     00 A0 00 A0 
31ee2     00 A0 00 A0 
31ee6     00 A0 00 A0 
31eea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31eee     00 A0 00 A0 
31ef2     00 A0 00 A0 
31ef6     00 A0 00 A0 
31efa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31efe     00 A0 00 A0 
31f02     00 A0 00 A0 
31f06     00 A0 00 A0 
31f0a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f0e     00 A0 00 A0 
31f12     00 A0 00 A0 
31f16     00 A0 00 A0 
31f1a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f1e     00 A0 00 A0 
31f22     00 A0 00 A0 
31f26     00 A0 00 A0 
31f2a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f2e                 | 
31f2e     00 00       |              	org
31f30 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
31f34 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
31f38 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
31f3c 003             | 
31f3c 003 00 30 04 F6 |                 mov     psramaddr,#0
31f40 004             | 
31f40 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
31f44 005 20 00 00 FF 
31f48 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
31f4c 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
31f50 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
31f54 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
31f58 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
31f5c 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
31f60 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
31f64 00d             | 
31f64 00d 20 00 00 FF 
31f68 00e 00 30 04 F1 |                 add 	psramaddr,##16384
31f6c 00f E0 03 00 FF 
31f70 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
31f74 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
31f78 012             | 
31f78 012             |                 
31f78 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
31f7c 013             |     
31f7c 013 01 2C 60 FD |                 cogid 	t11				' get id
31f80 014 00 00 EC FC |                 coginit #0,#0				' start the new program
31f84 015 03 2C 60 FD |                 cogstop t11				' stop the loader
31f88 016             | 
31f88 016 00 00 00 00 | t11 		long 	0
31f8c 017 00 FF 07 00 | mailbox 	long 	$7FF00
31f90 018 00 00 00 00 | psramaddr 	long 	0
31f94 019 00 00 00 00 | pslockval	long 	0
31f98 01a 00 00 00 00 | cmd             long    0
31f9c 01b 00 00 00 00 | buf1            long    0
31fa0 01c 00 40 00 00 | buf2            long    16384
31fa4 01d A8 1F 03 00 | 	long	@@@_dat_ + 12624
31fa8 01e 50 32 20 52 
31fac 01f 65 74 72 6F 
31fb0 020 6D 61 63 68 
31fb4 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
31fb8 022 42 41 53 49 
31fbc 023 43 20 76 65 
31fc0 024 72 73 69 6F 
31fc4 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
31fc8 026 32 38 00 00 | 	byte	$32, $38, $00, $00
31fcc 027             | 	alignl
31fcc 027             | _hg010b_spin2_dat_
31fcc 027             | 
31fcc 027 00 00 00 00 
31fd0 028 00 00 00 00 
31fd4 029 00 00 00 00 
31fd8 02a 00 00 00 00 
31fdc 02b 00 00 00    | vga_font       file "vgafont.def"
31fdf 02b 7E 81 A5 81 
31fe3 02c 81 BD 99 81 
31fe7 02d 81 7E 00 00 
31feb 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
31fef 02f 7E FF DB FF 
31ff3 030 FF C3 E7 FF 
31ff7 031 FF 7E 00 00 
31ffb 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
31fff 033 00 36 7F 7F 
32003 034 7F 7F 3E 1C 
32007 035 08 00 00 00 
3200b 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3200f 037 00 08 1C 3E 
32013 038 7F 3E 1C 08 
32017 039 00 00 00 00 
3201b 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3201f 03b 18 3C 3C E7 
32023 03c E7 E7 18 18 
32027 03d 3C 00 00 00 
3202b 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3202f 03f 18 3C 7E FF 
32033 040 FF 7E 18 18 
32037 041 3C 00 00 00 
3203b 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3203f 043 00 00 00 18 
32043 044 3C 3C 18 00 
32047 045 00 00 00 00 
3204b 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3204f 047 FF FF FF E7 
32053 048 C3 C3 E7 FF 
32057 049 FF FF FF FF 
3205b 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3205f 04b 00 00 3C 66 
32063 04c 42 42 66 3C 
32067 04d 00 00 00 00 
3206b 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3206f 04f FF FF C3 99 
32073 050 BD BD 99 C3 
32077 051 FF FF FF FF 
3207b 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3207f 053 78 70 58 4C 
32083 054 1E 33 33 33 
32087 055 33 1E 00 00 
3208b 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3208f 057 3C 66 66 66 
32093 058 66 3C 18 7E 
32097 059 18 18 00 00 
3209b 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3209f 05b FC CC FC 0C 
320a3 05c 0C 0C 0C 0E 
320a7 05d 0F 07 00 00 
320ab 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
320af 05f FE C6 FE C6 
320b3 060 C6 C6 C6 E6 
320b7 061 E7 67 03 00 
320bb 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
320bf 063 18 18 DB 3C 
320c3 064 E7 3C DB 18 
320c7 065 18 00 00 00 
320cb 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
320cf 067 03 07 0F 1F 
320d3 068 7F 1F 0F 07 
320d7 069 03 01 00 00 
320db 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
320df 06b 60 70 78 7C 
320e3 06c 7F 7C 78 70 
320e7 06d 60 40 00 00 
320eb 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
320ef 06f 18 3C 7E 18 
320f3 070 18 18 7E 3C 
320f7 071 18 00 00 00 
320fb 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
320ff 073 66 66 66 66 
32103 074 66 66 66    | 	byte	$66[7]
32106 075 00 66 66 00 
3210a 076 00 00 00 00 
3210e 077 00 FE DB DB 
32112 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
32116 079 D8 D8 D8 00 
3211a 07a 00 00 00 3E 
3211e 07b 63 06 1C 36 
32122 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
32126 07d 30 63 3E 00 
3212a 07e 00 00 00 00 
3212e 07f 00 00 00 00 
32132 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
32136 081 7F 7F 7F 00 
3213a 082 00 00 00 00 
3213e 083 00 18 3C 7E 
32142 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
32146 085 3C 18 7E 00 
3214a 086 00 00 00 00 
3214e 087 00 18 3C 7E 
32152 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
32156 089 18 18 18 00 
3215a 08a 00 00 00 00 
3215e 08b 00 18 18 18 
32162 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
32166 08d 7E 3C 18 00 
3216a 08e 00 00 00 00 
3216e 08f 00 00 00 18 
32172 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
32176 091 00 00 00 00 
3217a 092 00 00 00 00 
3217e 093 00 00 00    | 	byte	$00[11]
32181 094 0C 06 7F 06 
32185 095 0C 00 00 00 
32189 096 00 00 00 00 
3218d 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32191 098 00 03 03 03 
32195 099 7F 00 00 00 
32199 09a 00 00 00 00 
3219d 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
321a1 09c 14 36 7F 36 
321a5 09d 14 00 00 00 
321a9 09e 00 00 00 00 
321ad 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
321b1 0a0 1C 1C 3E 3E 
321b5 0a1 7F 7F 00 00 
321b9 0a2 00 00 00 00 
321bd 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
321c1 0a4 7F 3E 3E 1C 
321c5 0a5 1C 08 00 00 
321c9 0a6 00 00 00 00 
321cd 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
321d1 0a8 00 00 00 00 
321d5 0a9 00 00 00 00 
321d9 0aa 00 00 00 00 
321dd 0ab 00 00       | 	byte	$00[14]
321df 0ab 18 3C 3C 3C 
321e3 0ac 18 18 18 00 
321e7 0ad 18 18 00 00 
321eb 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
321ef 0af 66 24 00 00 
321f3 0b0 00 00 00 00 
321f7 0b1 00 00 00 00 
321fb 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
321ff 0b3 00 36 36 7F 
32203 0b4 36 36 36 7F 
32207 0b5 36 36 00 00 
3220b 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3220f 0b7 3E 63 43 03 
32213 0b8 3E 60 60 61 
32217 0b9 63 3E 18 18 
3221b 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3221f 0bb 00 00 43 63 
32223 0bc 30 18 0C 06 
32227 0bd 63 61 00 00 
3222b 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3222f 0bf 1C 36 36 1C 
32233 0c0 6E 3B 33 33 
32237 0c1 33 6E 00 00 
3223b 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3223f 0c3 0C 0C 0C 06 
32243 0c4 00 00 00 00 
32247 0c5 00 00 00 00 
3224b 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3224f 0c7 30 18 0C 0C 
32253 0c8 0C 0C 0C 0C 
32257 0c9 18 30 00 00 
3225b 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3225f 0cb 0C 18 30 30 
32263 0cc 30 30 30 30 
32267 0cd 18 0C 00 00 
3226b 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3226f 0cf 00 00 00 66 
32273 0d0 3C FF 3C 66 
32277 0d1 00 00 00 00 
3227b 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3227f 0d3 00 00 00 18 
32283 0d4 18 7E 18 18 
32287 0d5 00 00 00 00 
3228b 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3228f 0d7 00 00 00 00 
32293 0d8 00 00 00 00 | 	byte	$00[8]
32297 0d9 18 18 18 0C 
3229b 0da 00 00 00 00 
3229f 0db 00 00 00 00 
322a3 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
322a7 0dd 00 00 00 00 
322ab 0de 00 00 00 00 
322af 0df 00 00 00 00 
322b3 0e0 00 00 00 00 | 	byte	$00[16]
322b7 0e1 18 18 00 00 
322bb 0e2 00 00 00 00 
322bf 0e3 00 00 40 60 
322c3 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
322c7 0e5 03 01 00 00 
322cb 0e6 00 00 00 00 
322cf 0e7 1C 36 63 63 
322d3 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
322d7 0e9 36 1C 00 00 
322db 0ea 00 00 00 00 
322df 0eb 18 1C 1E 18 
322e3 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
322e7 0ed 18 7E 00 00 
322eb 0ee 00 00 00 00 
322ef 0ef 3E 63 60 30 
322f3 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
322f7 0f1 63 7F 00 00 
322fb 0f2 00 00 00 00 
322ff 0f3 3E 63 60 60 
32303 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
32307 0f5 63 3E 00 00 
3230b 0f6 00 00 00 00 
3230f 0f7 30 38 3C 36 
32313 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
32317 0f9 30 78 00 00 
3231b 0fa 00 00 00 00 
3231f 0fb 7F 03 03 03 
32323 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
32327 0fd 63 3E 00 00 
3232b 0fe 00 00 00 00 
3232f 0ff 1C 06 03 03 
32333 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
32337 101 63 3E 00 00 
3233b 102 00 00 00 00 
3233f 103 7F 63 60 60 
32343 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
32347 105 0C 0C 00 00 
3234b 106 00 00 00 00 
3234f 107 3E 63 63 63 
32353 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
32357 109 63 3E 00 00 
3235b 10a 00 00 00 00 
3235f 10b 3E 63 63 63 
32363 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
32367 10d 30 1E 00 00 
3236b 10e 00 00 00 00 
3236f 10f 00 00 00 18 
32373 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
32377 111 18 18 00 00 
3237b 112 00 00 00 00 
3237f 113 00 00 00 18 
32383 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
32387 115 18 18 0C 00 
3238b 116 00 00 00 00 
3238f 117 00 60 30 18 
32393 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
32397 119 30 60 00 00 
3239b 11a 00 00 00 00 
3239f 11b 00 00 00 7E 
323a3 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
323a7 11d 00 00 00 00 
323ab 11e 00 00 00 00 
323af 11f 00          | 	byte	$00[9]
323b0 120 06 0C 18 30 
323b4 121 60 30 18 0C 
323b8 122 06 00 00 00 
323bc 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
323c0 124 63 63 30 18 
323c4 125 18 18 00 18 
323c8 126 18 00 00 00 
323cc 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
323d0 128 3E 63 63 7B 
323d4 129 7B 7B 3B 03 
323d8 12a 3E 00 00 00 
323dc 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
323e0 12c 1C 36 63 63 
323e4 12d 7F 63 63 63 
323e8 12e 63 00 00 00 
323ec 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
323f0 130 66 66 66 3E 
323f4 131 66 66 66 66 
323f8 132 3F 00 00 00 
323fc 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
32400 134 66 43 03 03 
32404 135 03 03 43 66 
32408 136 3C 00 00 00 
3240c 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
32410 138 36 66 66 66 
32414 139 66 66 66 36 
32418 13a 1F 00 00 00 
3241c 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
32420 13c 66 46 16 1E 
32424 13d 16 06 46 66 
32428 13e 7F 00 00 00 
3242c 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
32430 140 66 46 16 1E 
32434 141 16 06 06 06 
32438 142 0F 00 00 00 
3243c 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
32440 144 66 43 03 03 
32444 145 7B 63 63 66 
32448 146 5C 00 00 00 
3244c 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
32450 148 63 63 63 7F 
32454 149 63 63 63 63 
32458 14a 63 00 00 00 
3245c 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
32460 14c 18 18 18 18 
32464 14d 18 18 18 18 | 	byte	$18[8]
32468 14e 3C 00 00 00 
3246c 14f 00 00 00 78 
32470 150 30 30 30 30 
32474 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
32478 152 1E 00 00 00 
3247c 153 00 00 00 67 
32480 154 66 66 36 1E 
32484 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
32488 156 67 00 00 00 
3248c 157 00 00 00 0F 
32490 158 06 06 06 06 
32494 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
32498 15a 7F 00 00 00 
3249c 15b 00 00 00 63 
324a0 15c 77 7F 7F 6B 
324a4 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
324a8 15e 63 00 00 00 
324ac 15f 00 00 00 63 
324b0 160 67 6F 7F 7B 
324b4 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
324b8 162 63 00 00 00 
324bc 163 00 00 00 3E 
324c0 164 63 63 63 63 
324c4 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
324c8 166 3E 00 00 00 
324cc 167 00 00 00 3F 
324d0 168 66 66 66 3E 
324d4 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
324d8 16a 0F 00 00 00 
324dc 16b 00 00 00 3E 
324e0 16c 63 63 63 63 
324e4 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
324e8 16e 3E 30 70 00 
324ec 16f 00 00 00 3F 
324f0 170 66 66 66 3E 
324f4 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
324f8 172 67 00 00 00 
324fc 173 00 00 00 3E 
32500 174 63 63 06 1C 
32504 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
32508 176 3E 00 00 00 
3250c 177 00 00 00 7E 
32510 178 7E 5A 18 18 
32514 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
32518 17a 3C 00 00 00 
3251c 17b 00 00 00 63 
32520 17c 63 63 63 63 
32524 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
32528 17e 3E 00 00 00 
3252c 17f 00 00 00 63 
32530 180 63 63 63 63 
32534 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
32538 182 08 00 00 00 
3253c 183 00 00 00 63 
32540 184 63 63 63 6B 
32544 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
32548 186 36 00 00 00 
3254c 187 00 00 00 63 
32550 188 63 36 3E 1C 
32554 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
32558 18a 63 00 00 00 
3255c 18b 00 00 00 66 
32560 18c 66 66 66 3C 
32564 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
32568 18e 3C 00 00 00 
3256c 18f 00 00 00 7F 
32570 190 63 61 30 18 
32574 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
32578 192 7F 00 00 00 
3257c 193 00 00 00 3C 
32580 194 0C 0C 0C 0C 
32584 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
32588 196 3C 00 00 00 
3258c 197 00 00 00 00 
32590 198 01 03 07 0E 
32594 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
32598 19a 40 00 00 00 
3259c 19b 00 00 00 3C 
325a0 19c 30 30 30 30 
325a4 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
325a8 19e 3C 00 00 00 
325ac 19f 1C 36 00 00 
325b0 1a0 00 00 00 00 
325b4 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
325b8 1a2 00 00 00 00 
325bc 1a3 00 00 00 00 
325c0 1a4 00 00 00 00 
325c4 1a5 00 00 00 00 
325c8 1a6 00          | 	byte	$00[17]
325c9 1a6 FF 00 00 0C 
325cd 1a7 18 00 00 00 
325d1 1a8 00 00 00 00 
325d5 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
325d9 1aa 00 00 00 00 
325dd 1ab 00 00 00 00 
325e1 1ac 00          | 	byte	$00[9]
325e2 1ac 1E 30 3E 33 
325e6 1ad 33 33 6E 00 
325ea 1ae 00 00 00 00 
325ee 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
325f2 1b0 1E 36 66 66 
325f6 1b1 66 66 3E 00 
325fa 1b2 00 00 00 00 
325fe 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
32602 1b4 3E 63 03 03 
32606 1b5 03 63 3E 00 
3260a 1b6 00 00 00 00 
3260e 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
32612 1b8 3C 36 33 33 
32616 1b9 33 33 6E 00 
3261a 1ba 00 00 00 00 
3261e 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
32622 1bc 3E 63 7F 03 
32626 1bd 03 63 3E 00 
3262a 1be 00 00 00 00 
3262e 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
32632 1c0 0C 1E 0C 0C 
32636 1c1 0C 0C 1E 00 
3263a 1c2 00 00 00 00 
3263e 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
32642 1c4 6E 33 33 33 
32646 1c5 33 33 3E 30 
3264a 1c6 33 1E 00 00 
3264e 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
32652 1c8 36 6E 66 66 
32656 1c9 66 66 67 00 
3265a 1ca 00 00 00 00 
3265e 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
32662 1cc 1C 18 18 18 
32666 1cd 18 18 3C 00 
3266a 1ce 00 00 00 00 
3266e 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
32672 1d0 70 60 60 60 
32676 1d1 60 60 60 66 
3267a 1d2 66 3C 00 00 
3267e 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
32682 1d4 66 36 1E 1E 
32686 1d5 36 66 67 00 
3268a 1d6 00 00 00 00 
3268e 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
32692 1d8 18 18 18 18 
32696 1d9 18 18       | 	byte	$18[6]
32698 1da 3C 00 00 00 
3269c 1db 00 00 00 00 
326a0 1dc 00 00 37 7F 
326a4 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
326a8 1de 63 00 00 00 
326ac 1df 00 00 00 00 
326b0 1e0 00 00 3B 66 
326b4 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
326b8 1e2 66 00 00 00 
326bc 1e3 00 00 00 00 
326c0 1e4 00 00 3E 63 
326c4 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
326c8 1e6 3E 00 00 00 
326cc 1e7 00 00 00 00 
326d0 1e8 00 00 3B 66 
326d4 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
326d8 1ea 3E 06 06 0F 
326dc 1eb 00 00 00 00 
326e0 1ec 00 00 6E 33 
326e4 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
326e8 1ee 3E 30 30 78 
326ec 1ef 00 00 00 00 
326f0 1f0 00 00 3B 6E 
326f4 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
326f8 1f2 0F 00 00 00 
326fc 1f3 00 00 00 00 
32700 1f4 00 00 3E 63 
32704 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
32708 1f6 3E 00 00 00 
3270c 1f7 00 00 00 08 
32710 1f8 0C 0C 3F 0C 
32714 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
32718 1fa 38 00 00 00 
3271c 1fb 00 00 00 00 
32720 1fc 00 00 33 33 
32724 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
32728 1fe 6E 00 00 00 
3272c 1ff 00 00 00 00 
32730 200 00 00 63 63 
32734 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
32738 202 1C 00 00 00 
3273c 203 00 00 00 00 
32740 204 00 00 63 63 
32744 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
32748 206 36 00 00 00 
3274c 207 00 00 00 00 
32750 208 00 00 63 36 
32754 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
32758 20a 63 00 00 00 
3275c 20b 00 00 00 00 
32760 20c 00 00 63 63 
32764 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
32768 20e 7E 60 30 1F 
3276c 20f 00 00 00 00 
32770 210 00 00 7F 33 
32774 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
32778 212 7F 00 00 00 
3277c 213 00 00 00 70 
32780 214 18 18 18 0E 
32784 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
32788 216 70 00 00 00 
3278c 217 00 00 00 18 
32790 218 18 18 18 18 
32794 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
32798 21a 18 00 00 00 
3279c 21b 00 00 00 0E 
327a0 21c 18 18 18 70 
327a4 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
327a8 21e 0E 00 00 00 
327ac 21f 6E 3B 00 00 
327b0 220 00 00 00 00 
327b4 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
327b8 222 00 00 00 00 
327bc 223 00 00 00 00 
327c0 224 00 00       | 	byte	$00[10]
327c2 224 08 1C 36 63 
327c6 225 63 63 7F 00 
327ca 226 00 00 00 00 
327ce 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
327d2 228 03 03 03 03 
327d6 229 43 66 3C 18 
327da 22a 30 1E 00 00 
327de 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
327e2 22c 33 33 33 33 
327e6 22d 33 33       | 	byte	$33[6]
327e8 22e 6E 00 00 00 
327ec 22f 00 00 60 30 
327f0 230 18 00 3E 63 
327f4 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
327f8 232 3E 00 00 00 
327fc 233 00 00 08 1C 
32800 234 36 00 1E 30 
32804 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
32808 236 6E 00 00 00 
3280c 237 00 00 00 00 
32810 238 33 00 1E 30 
32814 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
32818 23a 6E 00 00 00 
3281c 23b 00 00 1C 36 
32820 23c 1C 00 33 33 
32824 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
32828 23e 6E 00 00 00 
3282c 23f 00 00 60 30 
32830 240 18 00 3E 63 
32834 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
32838 242 3E 00 00 00 
3283c 243 00 00 00 00 
32840 244 00 00 3E 63 
32844 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
32848 246 3E 18 30 1E 
3284c 247 00 00 00 1C 
32850 248 58 78 38 18 
32854 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
32858 24a 3C 00 00 00 
3285c 24b 00 00 00 00 
32860 24c 63 00 3E 63 
32864 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
32868 24e 3E 00 00 00 
3286c 24f 66 33 00 3E 
32870 250 63 63 63 63 
32874 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
32878 252 3E 00 00 00 
3287c 253 00 00 CC 66 
32880 254 33 00 3E 63 
32884 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
32888 256 3E 00 00 00 
3288c 257 00 00 18 3C 
32890 258 66 00 1C 18 
32894 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
32898 25a 3C 00 00 00 
3289c 25b 30 18 00 7F 
328a0 25c 63 61 30 18 
328a4 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
328a8 25e 7F 00 00 00 
328ac 25f 00 63 00 08 
328b0 260 1C 36 63 63 
328b4 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
328b8 262 63 00 00 00 
328bc 263 30 18 00 3C 
328c0 264 66 43 03 03 
328c4 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
328c8 266 3C 00 00 00 
328cc 267 30 18 00 7F 
328d0 268 66 46 16 1E 
328d4 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
328d8 26a 7F 00 00 00 
328dc 26b 0C 06 00 0F 
328e0 26c 06 06 06 06 
328e4 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
328e8 26e 7F 00 00 00 
328ec 26f 30 18 00 1C 
328f0 270 18 18 18 18 
328f4 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
328f8 272 3C 00 00 00 
328fc 273 00 00 08 1C 
32900 274 36 00 3E 63 
32904 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
32908 276 3E 00 00 00 
3290c 277 00 00 00 00 
32910 278 63 00 3E 63 
32914 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
32918 27a 3E 00 00 00 
3291c 27b 00 00 00 6F 
32920 27c 46 26 06 06 
32924 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
32928 27e 7F 00 00 00 
3292c 27f 00 00 00 6E 
32930 280 4C 2C 0C 0C 
32934 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
32938 282 1E 00 00 00 
3293c 283 30 18 00 3E 
32940 284 63 63 06 1C 
32944 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
32948 286 3E 00 00 00 
3294c 287 00 00 60 30 
32950 288 18 00 3E 63 
32954 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
32958 28a 3E 00 00 00 
3295c 28b 00 63 00 3E 
32960 28c 63 63 63 63 
32964 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
32968 28e 3E 00 00 00 
3296c 28f 00 63 00 63 
32970 290 63 63 63 63 
32974 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
32978 292 3E 00 00 00 
3297c 293 6C 38 00 7E 
32980 294 7E 5A 18 18 
32984 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
32988 296 3C 00 00 00 
3298c 297 00 00 60 48 
32990 298 2C 0C 3F 0C 
32994 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
32998 29a 38 00 00 00 
3299c 29b 00 00 00 0F 
329a0 29c 26 36 1E 0E 
329a4 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
329a8 29e 7F 00 00 00 
329ac 29f 00 00 00 00 
329b0 2a0 00 63 36 1C 
329b4 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
329b8 2a2 00 00 00 00 
329bc 2a3 00 00       | 	byte	$00[6]
329be 2a3 36 1C 08 00 
329c2 2a4 3E 63 03 03 
329c6 2a5 03 63 3E 00 
329ca 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
329ce 2a7 30 18 0C 00 
329d2 2a8 1E 30 3E 33 
329d6 2a9 33 33 6E 00 
329da 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
329de 2ab 60 30 18 00 
329e2 2ac 1C 18 18 18 
329e6 2ad 18 18 3C 00 
329ea 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
329ee 2af 60 30 18 00 
329f2 2b0 3E 63 63 63 
329f6 2b1 63 63 3E 00 
329fa 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
329fe 2b3 30 18 0C 00 
32a02 2b4 33 33 33 33 
32a06 2b5 33 33 6E 00 
32a0a 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
32a0e 2b7 00 08 1C 36 
32a12 2b8 63 63 7F 63 
32a16 2b9 63 63 63 18 
32a1a 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
32a1e 2bb 00 00 00 00 
32a22 2bc 1E 30 3E 33 
32a26 2bd 33 33 6E 18 
32a2a 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
32a2e 2bf 00 7F 63 61 
32a32 2c0 30 18 0C 06 
32a36 2c1 43 63 7F 00 
32a3a 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
32a3e 2c3 36 1C 08 00 
32a42 2c4 7F 33 18 0C 
32a46 2c5 06 63 7F 00 
32a4a 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
32a4e 2c7 00 7F 66 46 
32a52 2c8 16 1E 16 06 
32a56 2c9 46 66 7F 18 
32a5a 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
32a5e 2cb 00 00 00 00 
32a62 2cc 3E 63 7F 03 
32a66 2cd 03 63 3E 18 
32a6a 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
32a6e 2cf 00 3C 66 03 
32a72 2d0 1F 03 0F 03 
32a76 2d1 03 66 3C 00 
32a7a 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
32a7e 2d3 60 30 18 00 
32a82 2d4 7F 33 18 0C 
32a86 2d5 06 63 7F 00 
32a8a 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
32a8e 2d7 00 3C 66 43 
32a92 2d8 03 03 03 03 
32a96 2d9 43 66 3C 00 
32a9a 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
32a9e 2db 00 00 00 00 
32aa2 2dc 3E 63 06 1C 
32aa6 2dd 30 63 3E 18 
32aaa 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
32aae 2df 00 00 00 00 
32ab2 2e0 00 00       | 	byte	$00[6]
32ab4 2e1 6C 36 1B 36 
32ab8 2e2 6C 00 00 00 
32abc 2e3 00 00 00 00 
32ac0 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ac4 2e5 1B 36 6C 36 
32ac8 2e6 1B 00 00 00 
32acc 2e7 88 22 88 22 
32ad0 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
32ad4 2e9 88 22 88 22 
32ad8 2ea 88 22 88 22 
32adc 2eb AA 55 AA 55 
32ae0 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
32ae4 2ed AA 55 AA 55 
32ae8 2ee AA 55 AA 55 
32aec 2ef BB EE BB EE 
32af0 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
32af4 2f1 BB EE BB EE 
32af8 2f2 BB EE BB EE 
32afc 2f3 18 18 18 18 
32b00 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
32b04 2f5 18 18 18 18 
32b08 2f6 18 18 18 18 
32b0c 2f7 18 18 18 18 
32b10 2f8 18 18 18    | 	byte	$18[15]
32b13 2f8 1F 18 18 18 
32b17 2f9 18 18 18 18 
32b1b 2fa 18 30 18 00 
32b1f 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
32b23 2fc 63 7F 63 63 
32b27 2fd 63 63 00 00 
32b2b 2fe 00 1C 36 00 
32b2f 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
32b33 300 63 7F 63 63 
32b37 301 63 63 00 00 
32b3b 302 00 36 1C 00 
32b3f 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
32b43 304 1E 16 06 46 
32b47 305 66 7F 00 00 
32b4b 306 00 00 00 00 
32b4f 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
32b53 308 1C 30 60 63 
32b57 309 63 3E 18 30 
32b5b 30a 1E 6C 6C 6C 
32b5f 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
32b63 30c 6F 6C 6C 6C 
32b67 30d 6C 6C 6C 6C 
32b6b 30e 6C 6C 6C 6C 
32b6f 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32b73 310 6C 6C 6C 6C 
32b77 311 6C 6C 6C 6C 
32b7b 312 6C          | 	byte	$6c[9]
32b7c 313 00 00 00 00 
32b80 314 00          | 	byte	$00[5]
32b81 314 7F 60 6F 6C 
32b85 315 6C 6C 6C 6C 
32b89 316 6C 6C 6C 6C 
32b8d 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32b91 318 6F 60 7F 00 
32b95 319 00 00 00 00 
32b99 31a 00 00 00 18 
32b9d 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
32ba1 31c 61 30 18 0C 
32ba5 31d 06 43 63 7F 
32ba9 31e 00 00 00 00 
32bad 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
32bb1 320 00 7F 33 18 
32bb5 321 0C 06 63 7F 
32bb9 322 00 00 00 00 
32bbd 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
32bc1 324 00 00 1F 18 
32bc5 325 18 18 18 18 
32bc9 326 18 18 18 18 
32bcd 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
32bd1 328 18 18 F8 00 
32bd5 329 00 00 00 00 
32bd9 32a 00 00 00 18 
32bdd 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
32be1 32c 18 18 FF 00 
32be5 32d 00 00 00 00 
32be9 32e 00 00 00 00 
32bed 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32bf1 330 00 00 FF 18 
32bf5 331 18 18 18 18 
32bf9 332 18 18 18 18 
32bfd 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
32c01 334 18 18 F8 18 
32c05 335 18 18 18 18 
32c09 336 18 18 18 00 
32c0d 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
32c11 338 00 00 FF 00 
32c15 339 00 00 00 00 
32c19 33a 00 00 00 18 
32c1d 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
32c21 33c 18 18 FF 18 
32c25 33d 18 18 18 18 
32c29 33e 18 18 18 63 
32c2d 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
32c31 340 36 63 63 7F 
32c35 341 63 63 63 63 
32c39 342 00 00 00 00 
32c3d 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
32c41 344 00 1E 30 3E 
32c45 345 33 33 33 6E 
32c49 346 00 00 00 6C 
32c4d 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
32c51 348 EC 0C FC 00 
32c55 349 00 00 00 00 
32c59 34a 00 00 00 00 
32c5d 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32c61 34c FC 0C EC 6C 
32c65 34d 6C 6C 6C 6C 
32c69 34e 6C 6C 6C 6C 
32c6d 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32c71 350 EF 00 FF 00 
32c75 351 00 00 00 00 
32c79 352 00 00 00 00 
32c7d 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32c81 354 FF 00 EF 6C 
32c85 355 6C 6C 6C 6C 
32c89 356 6C 6C 6C 6C 
32c8d 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32c91 358 EC 0C EC 6C 
32c95 359 6C 6C 6C 6C 
32c99 35a 6C 6C 6C 00 
32c9d 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
32ca1 35c FF 00 FF 00 
32ca5 35d 00 00 00 00 
32ca9 35e 00 00 00 6C 
32cad 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
32cb1 360 EF 00 EF 6C 
32cb5 361 6C 6C 6C 6C 
32cb9 362 6C 6C 6C 00 
32cbd 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
32cc1 364 63 3E 63 63 
32cc5 365 63 63 3E 63 
32cc9 366 00 00 00 00 
32ccd 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
32cd1 368 30 3C 36 33 
32cd5 369 33 33 33 6E 
32cd9 36a 00 00 00 00 
32cdd 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
32ce1 36c 66 66 6F 66 
32ce5 36d 66 66 36 1F 
32ce9 36e 00 00 00 36 
32ced 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
32cf1 370 66 66 66 66 
32cf5 371 66 66       | 	byte	$66[6]
32cf7 371 36 1F 00 00 
32cfb 372 00 00 63 00 
32cff 373 7F 66 46 16 
32d03 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
32d07 375 66 7F 00 00 
32d0b 376 00 6C 38 00 
32d0f 377 38 30 30 3C 
32d13 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
32d17 379 33 6E 00 00 
32d1b 37a 00 36 1C 00 
32d1f 37b 63 67 6F 7F 
32d23 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
32d27 37d 63 63 00 00 
32d2b 37e 00 30 18 00 
32d2f 37f 3C 18 18 18 
32d33 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
32d37 381 18 3C 00 00 
32d3b 382 00 3C 66 00 
32d3f 383 3C 18 18 18 
32d43 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
32d47 385 18 3C 00 00 
32d4b 386 00 00 00 36 
32d4f 387 1C 08 00 3E 
32d53 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
32d57 389 63 3E 00 00 
32d5b 38a 00 18 18 18 
32d5f 38b 18 18 18 18 
32d63 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
32d67 38d 00 00 00 00 
32d6b 38e 00 00 00 00 
32d6f 38f 00 00 00 00 | 	byte	$00[12]
32d73 390 F8 18 18 18 
32d77 391 18 18 18 18 
32d7b 392 18 FF FF FF 
32d7f 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
32d83 394 FF FF FF FF 
32d87 395 FF FF FF FF 
32d8b 396 FF          | 	byte	$ff[9]
32d8c 397 00 00 00 00 
32d90 398 00 00 00    | 	byte	$00[7]
32d93 398 FF FF FF FF 
32d97 399 FF FF FF FF 
32d9b 39a FF          | 	byte	$ff[9]
32d9c 39b 00 00 00 7E 
32da0 39c 7E 5A 18 18 
32da4 39d 18 18 18 18 
32da8 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
32dac 39f 1C 36 1C 63 
32db0 3a0 63 63 63 63 
32db4 3a1 63 63 63 63 
32db8 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32dbc 3a3 FF FF FF FF 
32dc0 3a4 FF FF FF    | 	byte	$ff[7]
32dc3 3a4 00 00 00 00 
32dc7 3a5 00 00 00 00 
32dcb 3a6 00          | 	byte	$00[9]
32dcc 3a7 30 18 00 3E 
32dd0 3a8 63 63 63 63 
32dd4 3a9 63 63 63 63 
32dd8 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32ddc 3ab 00 00 00 1E 
32de0 3ac 33 33 33 1B 
32de4 3ad 33 63 63 63 
32de8 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
32dec 3af 1C 36 00 3E 
32df0 3b0 63 63 63 63 
32df4 3b1 63 63 63 63 
32df8 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32dfc 3b3 30 18 00 63 
32e00 3b4 67 6F 7F 7B 
32e04 3b5 73 63 63 63 
32e08 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
32e0c 3b7 00 00 60 30 
32e10 3b8 18 00 3B 66 
32e14 3b9 66 66 66 66 
32e18 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
32e1c 3bb 00 00 36 1C 
32e20 3bc 08 00 3B 66 
32e24 3bd 66 66 66 66 
32e28 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
32e2c 3bf 36 1C 00 3E 
32e30 3c0 63 63 06 1C 
32e34 3c1 30 60 63 63 
32e38 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
32e3c 3c3 00 00 36 1C 
32e40 3c4 08 00 3E 63 
32e44 3c5 06 1C 30 63 
32e48 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
32e4c 3c7 30 18 00 3F 
32e50 3c8 66 66 66 3E 
32e54 3c9 36 66 66 66 
32e58 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
32e5c 3cb 30 18 00 63 
32e60 3cc 63 63 63 63 
32e64 3cd 63 63 63 63 
32e68 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32e6c 3cf 00 00 60 30 
32e70 3d0 18 00 3B 6E 
32e74 3d1 66 06 06 06 
32e78 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
32e7c 3d3 66 33 00 63 
32e80 3d4 63 63 63 63 
32e84 3d5 63 63 63 63 
32e88 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32e8c 3d7 00 00 60 30 
32e90 3d8 18 00 63 63 
32e94 3d9 63 63 63 63 
32e98 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
32e9c 3db 30 18 00 66 
32ea0 3dc 66 66 66 3C 
32ea4 3dd 18 18 18 18 
32ea8 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
32eac 3df 00 00 00 08 
32eb0 3e0 0C 0C 3F 0C 
32eb4 3e1 0C 0C 0C 6C 
32eb8 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
32ebc 3e3 30 18 00 00 
32ec0 3e4 00 00 00 00 
32ec4 3e5 00 00 00 00 
32ec8 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ecc 3e7 00 00 00 00 
32ed0 3e8 00 00 00 00 | 	byte	$00[8]
32ed4 3e9 7F 00 00 00 
32ed8 3ea 00 00 00 00 
32edc 3eb 66 33 00 00 
32ee0 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
32ee4 3ed 00 00 00 00 
32ee8 3ee 00 00 00 00 
32eec 3ef 00 00 00 00 
32ef0 3f0 00 00 00 00 
32ef4 3f1 00 00 00 00 
32ef8 3f2 00          | 	byte	$00[21]
32ef9 3f2 0C 06 3C 36 
32efd 3f3 1C 00 00 00 
32f01 3f4 00 00 00 00 
32f05 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f09 3f6 00 00 00 63 
32f0d 3f7 3E 00 00 00 
32f11 3f8 00 00 00 00 
32f15 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f19 3fa 00 00 00 00 
32f1d 3fb 3E 63 06 1C 
32f21 3fc 36 63 63 36 
32f25 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
32f29 3fe 00 00 00 00 
32f2d 3ff 00 00 00 00 | 	byte	$00[8]
32f31 400 18 00 7E 00 
32f35 401 18 00 00 00 
32f39 402 00 00 00 00 
32f3d 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f41 404 00 00 00 00 
32f45 405 00 00 00 00 | 	byte	$00[8]
32f49 406 18 30 1E 00 
32f4d 407 00 00 1C 36 
32f51 408 36 1C 00 00 
32f55 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
32f59 40a 00 00 00 00 
32f5d 40b 63 00 00 00 
32f61 40c 00 00 00 00 
32f65 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f69 40e 00 00 00 18 
32f6d 40f 18 00 00 00 
32f71 410 00 00 00 00 
32f75 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f79 412 00 00 00 00 
32f7d 413 00          | 	byte	$00[5]
32f7e 413 CC 66 33 00 
32f82 414 33 33 33 33 
32f86 415 33 33 6E 00 
32f8a 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
32f8e 417 00 3F 66 66 
32f92 418 66 3E 36 66 
32f96 419 66 66 6F 00 
32f9a 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
32f9e 41b 36 1C 08 00 
32fa2 41c 3B 6E 66 06 
32fa6 41d 06 06 0F 00 
32faa 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
32fae 41f 00 00 00 7E 
32fb2 420 7E 7E 7E 7E 
32fb6 421 7E 7E 00 00 
32fba 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
32fbe 423 00 00 00 00 
32fc2 424 00 00 00 00 
32fc6 425 00 00 00 00 
32fca 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32fcc 427             | 'vga_font       file "vgafont.def"
32fcc 427 00 00 00 00 
      ...             
32ffc 433 00 00 00 00 
33000 434 00 00 00    | st_font        file "st4font.def"
33003 434 FF FF 00 00 
33007 435 00 00 00 00 
3300b 436 00 18 18 18 
3300f 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
33013 438 18 18 18 18 
33017 439 18 18 18 18 
3301b 43a 18          | 	byte	$18[9]
3301c 43b 00 00 00 00 
33020 43c 00 00 00    | 	byte	$00[7]
33023 43c FF FF 18 18 
33027 43d 18 18 18 18 
3302b 43e 18 18 18 18 
3302f 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
33033 440 FF FF 00 00 
33037 441 00 00 00 00 
3303b 442 00 18 18 18 
3303f 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
33043 444 1F 1F 18 18 
33047 445 18 18 18 18 
3304b 446 18 18 18 18 
3304f 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
33053 448 F8 F8 18 18 
33057 449 18 18 18 18 
3305b 44a 18 00 00 00 
3305f 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
33063 44c 1F 1F 18 18 
33067 44d 18 18 18 18 
3306b 44e 18 00 00 00 
3306f 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
33073 450 F8 F8 18 18 
33077 451 18 18 18 18 
3307b 452 18 18 18 18 
3307f 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
33083 454 1F 1F 00 00 
33087 455 00 00 00 00 
3308b 456 00 18 18 18 
3308f 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
33093 458 F8 F8 00 00 
33097 459 00 00 00 00 
3309b 45a 00 18 18 18 
3309f 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
330a3 45c FF FF 18 18 
330a7 45d 18 18 18 18 
330ab 45e 18 00 00 18 
330af 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
330b3 460 66 7E 7E 66 
330b7 461 66 66 66 30 
330bb 462 18 00 00 7E 
330bf 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
330c3 464 3E 06 06 06 
330c7 465 06 7E 7E 18 
330cb 466 0C 30 18 3C 
330cf 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
330d3 468 06 06 06 66 
330d7 469 66 7E 3C 00 
330db 46a 00 30 18 66 
330df 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
330e3 46c 7E 7E 76 76 
330e7 46d 66 66 66 00 
330eb 46e 00 30 18 7C 
330ef 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
330f3 470 1C 38 70 60 
330f7 471 60 7E 3E 00 
330fb 472 00 30 18 7E 
330ff 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
33103 474 18 0C 0C 06 
33107 475 06 7E 7E 00 
3310b 476 00 18 18 00 
3310f 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
33113 478 18 18 0C 0C 
33117 479 06 7E 7E 00 
3311b 47a 00 30 18 3C 
3311f 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
33123 47c 66 66 66 66 
33127 47d 66          | 	byte	$66[5]
33128 47e 7E 3C 00 00 
3312c 47f 00 00 06 06 
33130 480 06 06 16 1E 
33134 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
33138 482 7E 7E 00 00 
3313c 483 00 00 00 00 
33140 484 00 3C 7C 60 
33144 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
33148 486 7E 7C 30 18 
3314c 487 00 00 00 00 
33150 488 00 3C 7E 66 
33154 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
33158 48a 7E 7C 18 0C 
3315c 48b 00 00 30 18 
33160 48c 00 3C 3E 06 
33164 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
33168 48e 7E 7C 00 00 
3316c 48f 00 00 30 18 
33170 490 00 3E 7E 66 
33174 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
33178 492 66 66 00 00 
3317c 493 00 00 30 18 
33180 494 00 7C 7E 06 
33184 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
33188 496 7E 3E 00 00 
3318c 497 00 00 30 18 
33190 498 00 7E 7E 30 
33194 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
33198 49a 7E 7E 00 00 
3319c 49b 00 00 18 18 
331a0 49c 00 7E 7E 30 
331a4 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
331a8 49e 7E 7E 00 00 
331ac 49f 00 00 30 18 
331b0 4a0 00 3C 7E 66 
331b4 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
331b8 4a2 7E 3C 00 00 
331bc 4a3 00 00 1C 1C 
331c0 4a4 18 18 38 3C 
331c4 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
331c8 4a6 3C 3C 00 00 
331cc 4a7 00 00 00 00 
331d0 4a8 00 00 00 00 
331d4 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
331d8 4aa 00 00 00 00 
331dc 4ab 00 00       | 	byte	$00[6]
331de 4ab 18 18 18 18 
331e2 4ac 18 18 18 18 | 	byte	$18[8]
331e6 4ad 00 00 18 18 
331ea 4ae 00 00 00 00 
331ee 4af 66 66 66 66 
331f2 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
331f6 4b1 00 00 00 00 
331fa 4b2 00 00 00 00 
331fe 4b3 00          | 	byte	$00[9]
331ff 4b3 66 66 FF FF 
33203 4b4 66 66 FF FF 
33207 4b5 66 66 00 00 
3320b 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3320f 4b7 7C 7E 06 06 
33213 4b8 3E 7C 60 60 
33217 4b9 7E 3E 18 18 
3321b 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3321f 4bb 66 30 30 18 
33223 4bc 18 0C 0C 66 
33227 4bd 66 00 00 00 
3322b 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3322f 4bf 66 66 3C 1C 
33233 4c0 1C FC FE 66 
33237 4c1 66 FE FC 00 
3323b 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3323f 4c3 18 18 18 18 
33243 4c4 00 00 00 00 
33247 4c5 00 00 00 00 
3324b 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3324f 4c7 18 1C 0C 0C 
33253 4c8 0C 0C 0C 0C 
33257 4c9 1C 18 30 00 
3325b 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3325f 4cb 18 38 30 30 
33263 4cc 30 30 30 30 
33267 4cd 38 18 0C 00 
3326b 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3326f 4cf 66 66 3C 3C 
33273 4d0 FF FF 3C 3C 
33277 4d1 66 66 00 00 
3327b 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3327f 4d3 00 18 18 18 
33283 4d4 7E 7E 18 18 
33287 4d5 18 00 00 00 
3328b 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3328f 4d7 00 00 00 00 
33293 4d8 00 00       | 	byte	$00[6]
33295 4d9 18 18 18 18 
33299 4da 18          | 	byte	$18[5]
3329a 4da 0C 04 00 00 
3329e 4db 00 00 00 00 
332a2 4dc 7E 7E 00 00 
332a6 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
332aa 4de 00 00 00 00 
332ae 4df 00 00 00 00 
332b2 4e0 00 00 00 00 
332b6 4e1 00          | 	byte	$00[13]
332b7 4e1 18 18 18 00 
332bb 4e2 00 00 00 60 
332bf 4e3 60 60 30 30 
332c3 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
332c7 4e5 06 06 06 00 
332cb 4e6 00 00 00 3C 
332cf 4e7 7E 66 66 66 
332d3 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
332d7 4e9 66 7E 3C 00 
332db 4ea 00 00 00 18 
332df 4eb 18 1C 1C 18 
332e3 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
332e7 4ed 18 7E 7E 00 
332eb 4ee 00 00 00 3C 
332ef 4ef 7E 66 66 30 
332f3 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
332f7 4f1 0C 7E 7E 00 
332fb 4f2 00 00 00 7E 
332ff 4f3 7E 30 30 18 
33303 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
33307 4f5 66 7E 3C 00 
3330b 4f6 00 00 00 30 
3330f 4f7 30 38 38 3C 
33313 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
33317 4f9 7E 30 30 00 
3331b 4fa 00 00 00 7E 
3331f 4fb 7E 06 06 3E 
33323 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
33327 4fd 66 7E 3C 00 
3332b 4fe 00 00 00 38 
3332f 4ff 3C 0E 06 06 
33333 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
33337 501 66 7E 3C 00 
3333b 502 00 00 00 7E 
3333f 503 7E 60 60 30 
33343 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
33347 505 0C 0C 0C 00 
3334b 506 00 00 00 3C 
3334f 507 7E 66 66 3C 
33353 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
33357 509 66 7E 3C 00 
3335b 50a 00 00 00 3C 
3335f 50b 7E 66 66 7E 
33363 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
33367 50d 70 3C 1C 00 
3336b 50e 00 00 00 00 
3336f 50f 00 00 18 18 
33373 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
33377 511 18 18 18 00 
3337b 512 00 00 00 00 
3337f 513 00 00 18 18 
33383 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
33387 515 18 18 18 0C 
3338b 516 04 00 00 00 
3338f 517 70 38 1C 0E 
33393 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
33397 519 70 00 00 00 
3339b 51a 00 00 00 00 
3339f 51b 00 00 7E 7E 
333a3 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
333a7 51d 00 00 00 00 
333ab 51e 00 00 00 00 | 	byte	$00[8]
333af 51f 0E 1C 38 70 
333b3 520 E0 70 38 1C 
333b7 521 0E 00 00 00 
333bb 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
333bf 523 7E 66 66 30 
333c3 524 30 18 18 18 
333c7 525 00 18 18 00 
333cb 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
333cf 527 7E 66 66 66 
333d3 528 66 36 06 66 
333d7 529 66 7E 3C 00 
333db 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
333df 52b 3C 7E 66 66 
333e3 52c 66 7E 7E 66 
333e7 52d 66 66 66 00 
333eb 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
333ef 52f 7E 66 66 7E 
333f3 530 3E 66 66 66 
333f7 531 66 7E 3E 00 
333fb 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
333ff 533 7E 66 66 06 
33403 534 06 06 06 66 
33407 535 66 7E 3C 00 
3340b 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3340f 537 7E 66 66 66 
33413 538 66 66 66 66 
33417 539 66 7E 3E 00 
3341b 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3341f 53b 7E 06 06 3E 
33423 53c 3E 06 06 06 
33427 53d 06 7E 7E 00 
3342b 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3342f 53f 7E 06 06 3E 
33433 540 3E 06 06 06 
33437 541 06 06 06 00 
3343b 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3343f 543 7E 06 06 76 
33443 544 76 66 66 66 
33447 545 66 7E 3C 00 
3344b 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3344f 547 66 66 66 7E 
33453 548 7E 66 66 66 
33457 549 66 66 66 00 
3345b 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3345f 54b 7E 18 18 18 
33463 54c 18 18 18 18 
33467 54d 18 7E 7E 00 
3346b 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3346f 54f 60 60 60 60 
33473 550 60 60 60    | 	byte	$60[7]
33476 551 66 66 7E 3C 
3347a 552 00 00 00 00 
3347e 553 66 66 36 36 
33482 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
33486 555 66 66 C6 C6 
3348a 556 00 00 00 00 
3348e 557 06 06 06 06 
33492 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
33496 559 06 06 7E 7E 
3349a 55a 00 00 00 00 
3349e 55b C6 C6 EE EE 
334a2 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
334a6 55d C6 C6 C6 C6 
334aa 55e 00 00 00 00 
334ae 55f 66 66 66 6E 
334b2 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
334b6 561 76 66 66 66 
334ba 562 00 00 00 00 
334be 563 3C 7E 66 66 
334c2 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
334c6 565 66 66 7E 3C 
334ca 566 00 00 00 00 
334ce 567 3E 7E 66 66 
334d2 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
334d6 569 06 06 06 06 
334da 56a 00 00 00 00 
334de 56b 3C 7E 66 66 
334e2 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
334e6 56d 66 56 3E 6C 
334ea 56e 00 00 00 00 
334ee 56f 3E 7E 66 66 
334f2 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
334f6 571 66 66 C6 C6 
334fa 572 00 00 00 00 
334fe 573 7C 7E 06 06 
33502 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
33506 575 60 60 7E 3E 
3350a 576 00 00 00 00 
3350e 577 7E 7E 18 18 
33512 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
33516 579 18 18 18 18 
3351a 57a 00 00 00 00 
3351e 57b 66 66 66 66 
33522 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
33526 57d 66 66 7E 3C 
3352a 57e 00 00 00 00 
3352e 57f 66 66 66 66 
33532 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
33536 581 3C 3C 18 18 
3353a 582 00 00 00 00 
3353e 583 C6 C6 C6 C6 
33542 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
33546 585 FE EE C6 82 
3354a 586 00 00 00 00 
3354e 587 66 66 66 3C 
33552 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
33556 589 3C 66 66 66 
3355a 58a 00 00 00 00 
3355e 58b 66 66 66 66 
33562 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
33566 58d 18 18 18 18 
3356a 58e 00 00 00 00 
3356e 58f 7E 7E 30 30 
33572 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
33576 591 06 06 7E 7E 
3357a 592 00 00 00 00 
3357e 593 3C 3C 0C 0C 
33582 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
33586 595 0C 0C 3C 3C 
3358a 596 00 00 00 00 
3358e 597 06 06 0C 0C 
33592 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
33596 599 60 60 C0 C0 
3359a 59a 00 00 00 00 
3359e 59b 3C 3C 30 30 
335a2 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
335a6 59d 30 30 3C 3C 
335aa 59e 00 00 00 00 
335ae 59f 18 18 3C 3C 
335b2 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
335b6 5a1 00 00 00 00 
335ba 5a2 00 00 00 00 
335be 5a3 00 00 00 00 
335c2 5a4 00 00 00 00 
335c6 5a5 00 00       | 	byte	$00[18]
335c8 5a6 FE FE 00 00 
335cc 5a7 00 00 0C 0C 
335d0 5a8 18 18 00 00 
335d4 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
335d8 5aa 00 00 00 00 
335dc 5ab 00 00 00 00 
335e0 5ac 00          | 	byte	$00[9]
335e1 5ac 3C 7C 60 7C 
335e5 5ad 7E 66 66 7E 
335e9 5ae 7C 00 00 00 
335ed 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
335f1 5b0 3E 7E 66 66 
335f5 5b1 66 66 66 7E 
335f9 5b2 3E 00 00 00 
335fd 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
33601 5b4 3C 3E 06 06 
33605 5b5 06 06 06 7E 
33609 5b6 7C 00 00 00 
3360d 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
33611 5b8 7C 7E 66 66 
33615 5b9 66 66 66 7E 
33619 5ba 7C 00 00 00 
3361d 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
33621 5bc 3C 7E 66 66 
33625 5bd 7E 06 06 7E 
33629 5be 7C 00 00 00 
3362d 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
33631 5c0 18 7E 7E 18 
33635 5c1 18 18 18 18 
33639 5c2 18 00 00 00 
3363d 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
33641 5c4 7C 7E 66 66 
33645 5c5 66 66 7E 7C 
33649 5c6 60 7E 3E 00 
3364d 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
33651 5c8 3E 7E 66 66 
33655 5c9 66 66 66 66 
33659 5ca 66 00 00 00 
3365d 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
33661 5cc 1C 1C 18 18 
33665 5cd 18 18 18 3C 
33669 5ce 3C 00 00 00 
3366d 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
33671 5d0 30 30 30 30 
33675 5d1 30 30 30 30 
33679 5d2 30          | 	byte	$30[9]
3367a 5d2 3E 1E 00 00 
3367e 5d3 06 06 06 36 
33682 5d4 36 1E 1E 1E 
33686 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3368a 5d6 00 00 00 00 
3368e 5d7 1C 1C 18 18 
33692 5d8 18 18 18 18 
33696 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3369a 5da 00 00 00 00 
3369e 5db 00 00 00    | 	byte	$00[7]
336a1 5dc 6C FE FE D6 
336a5 5dd D6 C6 C6 C6 
336a9 5de C6 00 00 00 
336ad 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
336b1 5e0 3E 7E 66 66 
336b5 5e1 66 66 66 66 
336b9 5e2 66 00 00 00 
336bd 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
336c1 5e4 3C 7E 66 66 
336c5 5e5 66 66 66 7E 
336c9 5e6 3C 00 00 00 
336cd 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
336d1 5e8 3E 7E 66 66 
336d5 5e9 66 66 66 7E 
336d9 5ea 3E 06 06 00 
336dd 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
336e1 5ec 7C 7E 66 66 
336e5 5ed 66 66 66 7E 
336e9 5ee 7C 60 60 00 
336ed 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
336f1 5f0 3E 7E 66 06 
336f5 5f1 06 06 06 06 
336f9 5f2 06 00 00 00 
336fd 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
33701 5f4 7C 7E 06 0E 
33705 5f5 3C 70 60 7E 
33709 5f6 3E 00 00 00 
3370d 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
33711 5f8 7E 7E 18 18 
33715 5f9 18 18 18 78 
33719 5fa 70 00 00 00 
3371d 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
33721 5fc 66 66 66 66 
33725 5fd 66 66 66    | 	byte	$66[7]
33728 5fe 7E 7C 00 00 
3372c 5ff 00 00 00 00 
33730 600 00 66 66 66 
33734 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
33738 602 18 18 00 00 
3373c 603 00 00 00 00 
33740 604 00 C6 C6 D6 
33744 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
33748 606 C6 82 00 00 
3374c 607 00 00 00 00 
33750 608 00 66 66 3C 
33754 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
33758 60a 66 66 00 00 
3375c 60b 00 00 00 00 
33760 60c 00 66 66 66 
33764 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
33768 60e 7C 60 7E 3E 
3376c 60f 00 00 00 00 
33770 610 00 7E 7E 30 
33774 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
33778 612 7E 7E 00 00 
3377c 613 00 00 30 18 
33780 614 18 18 18 0C 
33784 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
33788 616 18 30 00 00 
3378c 617 00 00 18 18 
33790 618 18 18 18 18 
33794 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
33798 61a 18 18 00 00 
3379c 61b 00 00 0C 18 
337a0 61c 18 18 18 30 
337a4 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
337a8 61e 18 0C 00 00 
337ac 61f 00 00 6C 7E 
337b0 620 36 00 00 00 
337b4 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
337b8 622 00 00 00 00 
337bc 623 00 00 00 00 
337c0 624 00          | 	byte	$00[9]
337c1 624 18 18 18 18 
337c5 625 18 18 00 00 
337c9 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
337cc 627             | 'amiga_font     file "amigafont.def"
337cc 627 00 6C FE FE 
337d0 628 7C 38 10 00 
337d4 629 18 18 18 F8 
337d8 62a F8 18 18 18 | a8_font        file "atari8.fnt"
337dc 62b C0 C0 C0 C0 
337e0 62c C0 C0 C0 C0 | 	byte	$c0[8]
337e4 62d 18 18 18 1F 
337e8 62e 1F 00 00 00 
337ec 62f 18 18 18 1F 
337f0 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
337f4 631 00 00 00 1F 
337f8 632 1F 18 18 18 
337fc 633 C0 E0 70 38 
33800 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
33804 635 03 07 0E 1C 
33808 636 38 70 E0 C0 
3380c 637 80 C0 E0 F0 
33810 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
33814 639 00 00 00 00 
33818 63a F0 F0 F0 F0 
3381c 63b 01 03 07 0F 
33820 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
33824 63d F0 F0 F0 F0 
33828 63e 00 00 00 00 
3382c 63f 0F 0F 0F 0F 
33830 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
33834 641 FF FF 00 00 
33838 642 00 00 00 00 
3383c 643 00 00 00 00 
33840 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
33844 645 00 00 00 00 
33848 646 0F 0F 0F 0F 
3384c 647 00 38 38 EE 
33850 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
33854 649 00 00 00 F8 
33858 64a F8 18 18 18 
3385c 64b 00 00 00 FF 
33860 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
33864 64d 18 18 18 FF 
33868 64e FF 18 18 18 
3386c 64f 00 00 3C 7E 
33870 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
33874 651 00 00 00 00 
33878 652 FF FF FF FF 
3387c 653 03 03 03 03 
33880 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
33884 655 00 00 00 FF 
33888 656 FF 18 18 18 
3388c 657 18 18 18 FF 
33890 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
33894 659 0F 0F 0F 0F 
33898 65a 0F 0F 0F 0F | 	byte	$0f[8]
3389c 65b 18 18 18 F8 
338a0 65c F8 00 00 00 
338a4 65d 1E 06 1E 06 
338a8 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
338ac 65f 00 18 3C 7E 
338b0 660 18 18 18 00 
338b4 661 00 18 18 18 
338b8 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
338bc 663 00 18 0C 7E 
338c0 664 0C 18 00 00 
338c4 665 00 18 30 7E 
338c8 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
338cc 667 00 00 00 00 
338d0 668 00 00 00 00 
338d4 669 00          | 	byte	$00[9]
338d5 669 18 18 18 18 
338d9 66a 00 18 00 00 
338dd 66b 66 66 66 00 
338e1 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
338e5 66d 66 FF 66 66 
338e9 66e FF 66 00 18 
338ed 66f 7C 06 3C 60 
338f1 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
338f5 671 66 36 18 0C 
338f9 672 66 62 00 38 
338fd 673 6C 38 1C F6 
33901 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
33905 675 18 18 18 00 
33909 676 00 00 00 00 
3390d 677 70 38 18 18 
33911 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
33915 679 0E 1C 18 18 
33919 67a 1C 0E 00 00 
3391d 67b 66 3C FF 3C 
33921 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
33925 67d 18 18 7E 18 
33929 67e 18 00 00 00 
3392d 67f 00 00 00 00 
33931 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
33935 681 00 00 7E 00 
33939 682 00 00 00 00 
3393d 683 00 00 00 00 
33941 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
33945 685 60 30 18 0C 
33949 686 06 02 00 00 
3394d 687 3C 66 76 6E 
33951 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
33955 689 18 1C 18 18 
33959 68a 18 7E 00 00 
3395d 68b 3C 66 30 18 
33961 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
33965 68d 7E 30 18 30 
33969 68e 66 3C 00 00 
3396d 68f 30 38 3C 36 
33971 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
33975 691 7E 06 3E 60 
33979 692 66 3C 00 00 
3397d 693 3C 06 3E 66 
33981 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
33985 695 7E 60 30 18 
33989 696 0C 0C 00 00 
3398d 697 3C 66 3C 66 
33991 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
33995 699 3C 66 7C 60 
33999 69a 30 1C 00 00 
3399d 69b 00 18 18 00 
339a1 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
339a5 69d 00 18 18 00 
339a9 69e 18 18 0C 60 
339ad 69f 30 18 0C 18 
339b1 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
339b5 6a1 00 7E 00 00 
339b9 6a2 7E 00 00 06 
339bd 6a3 0C 18 30 18 
339c1 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
339c5 6a5 3C 66 30 18 
339c9 6a6 00 18 00 00 
339cd 6a7 3C 66 76 76 
339d1 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
339d5 6a9 18 3C 66 66 
339d9 6aa 7E 66 00 00 
339dd 6ab 3E 66 3E 66 
339e1 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
339e5 6ad 3C 66 06 06 
339e9 6ae 66 3C 00 00 
339ed 6af 1E 36 66 66 
339f1 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
339f5 6b1 7E 06 3E 06 
339f9 6b2 06 7E 00 00 
339fd 6b3 7E 06 3E 06 
33a01 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
33a05 6b5 7C 06 06 76 
33a09 6b6 66 7C 00 00 
33a0d 6b7 66 66 7E 66 
33a11 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
33a15 6b9 7E 18 18 18 
33a19 6ba 18 7E 00 00 
33a1d 6bb 60 60 60 60 
33a21 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
33a25 6bd 66 36 1E 1E 
33a29 6be 36 66 00 00 
33a2d 6bf 06 06 06 06 
33a31 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
33a35 6c1 C6 EE FE D6 
33a39 6c2 C6 C6 00 00 
33a3d 6c3 66 6E 7E 7E 
33a41 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
33a45 6c5 3C 66 66 66 
33a49 6c6 66 3C 00 00 
33a4d 6c7 3E 66 66 3E 
33a51 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
33a55 6c9 3C 66 66 66 
33a59 6ca 36 6C 00 00 
33a5d 6cb 3E 66 66 3E 
33a61 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
33a65 6cd 3C 06 3C 60 
33a69 6ce 60 3C 00 00 
33a6d 6cf 7E 18 18 18 
33a71 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
33a75 6d1 66 66 66 66 
33a79 6d2 66          | 	byte	$66[5]
33a7a 6d2 7E 00 00 66 
33a7e 6d3 66 66 66 3C 
33a82 6d4 18 00 00 C6 
33a86 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
33a8a 6d6 C6 00 00 66 
33a8e 6d7 66 3C 3C 66 
33a92 6d8 66 00 00 66 
33a96 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
33a9a 6da 18 00 00 7E 
33a9e 6db 30 18 0C 06 
33aa2 6dc 7E 00 00 78 
33aa6 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
33aaa 6de 78 00 00 02 
33aae 6df 06 0C 18 30 
33ab2 6e0 60 00 00 1E 
33ab6 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
33aba 6e2 1E 00 00 10 
33abe 6e3 38 6C C6 00 
33ac2 6e4 00 00 00 00 
33ac6 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
33aca 6e6 FF 00 00 18 
33ace 6e7 3C 7E 7E 3C 
33ad2 6e8 18 00 00 00 
33ad6 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
33ada 6ea 7C 00 00 06 
33ade 6eb 06 3E 66 66 
33ae2 6ec 3E 00 00 00 
33ae6 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
33aea 6ee 3C 00 00 60 
33aee 6ef 60 7C 66 66 
33af2 6f0 7C 00 00 00 
33af6 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
33afa 6f2 3C 00 00 70 
33afe 6f3 18 7C 18 18 
33b02 6f4 18 00 00 00 
33b06 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
33b0a 6f6 60 3E 00 06 
33b0e 6f7 06 3E 66 66 
33b12 6f8 66 00 00 18 
33b16 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
33b1a 6fa 3C 00 00 60 
33b1e 6fb 00 60 60 60 
33b22 6fc 60 3C 00 06 
33b26 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
33b2a 6fe 66 00 00 1C 
33b2e 6ff 18 18 18 18 
33b32 700 3C 00 00 00 
33b36 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
33b3a 702 C6 00 00 00 
33b3e 703 3E 66 66 66 
33b42 704 66 00 00 00 
33b46 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
33b4a 706 3C 00 00 00 
33b4e 707 3E 66 66 3E 
33b52 708 06 06 00 00 
33b56 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
33b5a 70a 60 60 00 00 
33b5e 70b 3E 66 06 06 
33b62 70c 06 00 00 00 
33b66 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
33b6a 70e 3E 00 00 18 
33b6e 70f 7E 18 18 18 
33b72 710 70 00 00 00 
33b76 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
33b7a 712 7C 00 00 00 
33b7e 713 66 66 66 3C 
33b82 714 18 00 00 00 
33b86 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
33b8a 716 6C 00 00 00 
33b8e 717 66 3C 18 3C 
33b92 718 66 00 00 00 
33b96 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
33b9a 71a 30 1E 00 00 
33b9e 71b 7E 30 18 0C 
33ba2 71c 7E 00 00 18 
33ba6 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
33baa 71e 3C 00 18 18 
33bae 71f 18 18 18 18 
33bb2 720 18 18 00 7E 
33bb6 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
33bba 722 60 00 10 18 
33bbe 723 1C 1E 1C 18 
33bc2 724 10 00 08 18 
33bc6 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
33bca 726 08 00       | 	byte	$08, $00
33bcc 727 00 00 00 00 
33bd0 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
33bd1 728 80 00 00 00 
33bd5 729 00 80 00 00 
33bd9 72a 80 80 00 00 
33bdd 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
33be1 72c 80 00 80 00 
33be5 72d 00 40 80 00 
33be9 72e AA AA AA 00 
33bed 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
33bf1 730 FF 00 00 00 
33bf5 731 00 FF 00 00 
33bf9 732 FF FF 00 00 
33bfd 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
33c01 734 FF 00 FF 00 
33c05 735 00 FF FF 00 
33c09 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
33c0c 737 00 00 00 00 
33c10 738 00          | ataripalette   file "ataripalettep2.def"
33c11 738 11 11 11 00 
33c15 739 22 22 22 00 
33c19 73a 33 33 33 00 
33c1d 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
33c21 73c 55 55 55 00 
33c25 73d 66 66 66 00 
33c29 73e 77 77 77 00 
33c2d 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
33c31 740 99 99 99 00 
33c35 741 AA AA AA 00 
33c39 742 BB BB BB 00 
33c3d 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
33c41 744 DD DD DD 00 
33c45 745 EE EE EE 00 
33c49 746 FF FF FF 00 
33c4d 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
33c51 748 00 14 40 00 
33c55 749 00 1E 60 00 
33c59 74a 00 28 80 00 
33c5d 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
33c61 74c 00 3C BF 00 
33c65 74d 00 46 DF 00 
33c69 74e 00 50 FF 00 
33c6d 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
33c71 750 39 77 FF 00 
33c75 751 55 8A FF 00 
33c79 752 71 9E FF 00 
33c7d 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
33c81 754 AA C5 FF 00 
33c85 755 C6 D8 FF 00 
33c89 756 E3 EC FF 00 
33c8d 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
33c91 758 00 00 40 00 
33c95 759 00 00 60 00 
33c99 75a 00 00 80 00 
33c9d 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
33ca1 75c 00 00 BF 00 
33ca5 75d 00 00 DF 00 
33ca9 75e 00 00 FF 00 
33cad 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
33cb1 760 39 39 FF 00 
33cb5 761 55 55 FF 00 
33cb9 762 71 71 FF 00 
33cbd 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
33cc1 764 AA AA FF 00 
33cc5 765 C6 C6 FF 00 
33cc9 766 E3 E3 FF 00 
33ccd 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
33cd1 768 20 00 40 00 
33cd5 769 30 00 60 00 
33cd9 76a 40 00 80 00 
33cdd 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
33ce1 76c 60 00 BF 00 
33ce5 76d 70 00 DF 00 
33ce9 76e 80 00 FF 00 
33ced 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
33cf1 770 9C 39 FF 00 
33cf5 771 AA 55 FF 00 
33cf9 772 B8 71 FF 00 
33cfd 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
33d01 774 D5 AA FF 00 
33d05 775 E3 C6 FF 00 
33d09 776 F1 E3 FF 00 
33d0d 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
33d11 778 40 00 40 00 
33d15 779 60 00 60 00 
33d19 77a 80 00 80 00 
33d1d 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
33d21 77c BF 00 BF 00 
33d25 77d DF 00 DF 00 
33d29 77e FF 00 FF 00 
33d2d 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
33d31 780 FF 39 FF 00 
33d35 781 FF 55 FF 00 
33d39 782 FF 71 FF 00 
33d3d 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
33d41 784 FF AA FF 00 
33d45 785 FF C6 FF 00 
33d49 786 FF E3 FF 00 
33d4d 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
33d51 788 40 00 20 00 
33d55 789 60 00 30 00 
33d59 78a 80 00 40 00 
33d5d 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
33d61 78c BF 00 60 00 
33d65 78d DF 00 70 00 
33d69 78e FF 00 80 00 
33d6d 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
33d71 790 FF 39 9C 00 
33d75 791 FF 55 AA 00 
33d79 792 FF 71 B8 00 
33d7d 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
33d81 794 FF AA D5 00 
33d85 795 FF C6 E3 00 
33d89 796 FF E3 F1 00 
33d8d 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
33d91 798 40 00 00 00 
33d95 799 60 00 00 00 
33d99 79a 80 00 00 00 
33d9d 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
33da1 79c BF 00 00 00 
33da5 79d DF 00 00 00 
33da9 79e FF 00 00 00 
33dad 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
33db1 7a0 FF 39 39 00 
33db5 7a1 FF 55 55 00 
33db9 7a2 FF 71 71 00 
33dbd 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
33dc1 7a4 FF AA AA 00 
33dc5 7a5 FF C6 C6 00 
33dc9 7a6 FF E3 E3 00 
33dcd 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
33dd1 7a8 40 10 00 00 
33dd5 7a9 60 18 00 00 
33dd9 7aa 80 20 00 00 
33ddd 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
33de1 7ac BF 30 00 00 
33de5 7ad DF 38 00 00 
33de9 7ae FF 40 00 00 
33ded 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
33df1 7b0 FF 6A 39 00 
33df5 7b1 FF 80 55 00 
33df9 7b2 FF 95 71 00 
33dfd 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
33e01 7b4 FF BF AA 00 
33e05 7b5 FF D5 C6 00 
33e09 7b6 FF EA E3 00 
33e0d 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
33e11 7b8 40 20 00 00 
33e15 7b9 60 30 00 00 
33e19 7ba 80 40 00 00 
33e1d 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
33e21 7bc BF 60 00 00 
33e25 7bd DF 70 00 00 
33e29 7be FF 80 00 00 
33e2d 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
33e31 7c0 FF 9C 39 00 
33e35 7c1 FF AA 55 00 
33e39 7c2 FF B8 71 00 
33e3d 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
33e41 7c4 FF D5 AA 00 
33e45 7c5 FF E3 C6 00 
33e49 7c6 FF F1 E3 00 
33e4d 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
33e51 7c8 40 30 00 00 
33e55 7c9 60 48 00 00 
33e59 7ca 80 60 00 00 
33e5d 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
33e61 7cc BF 90 00 00 
33e65 7cd DF A8 00 00 
33e69 7ce FF C0 00 00 
33e6d 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
33e71 7d0 FF CE 39 00 
33e75 7d1 FF D5 55 00 
33e79 7d2 FF DC 71 00 
33e7d 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
33e81 7d4 FF EA AA 00 
33e85 7d5 FF F1 C6 00 
33e89 7d6 FF F8 E3 00 
33e8d 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
33e91 7d8 30 40 00 00 
33e95 7d9 48 60 00 00 
33e99 7da 60 80 00 00 
33e9d 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
33ea1 7dc 90 BF 00 00 
33ea5 7dd A8 DF 00 00 
33ea9 7de C0 FF 00 00 
33ead 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
33eb1 7e0 CE FF 39 00 
33eb5 7e1 D5 FF 55 00 
33eb9 7e2 DC FF 71 00 
33ebd 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
33ec1 7e4 EA FF AA 00 
33ec5 7e5 F1 FF C6 00 
33ec9 7e6 F8 FF E3 00 
33ecd 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
33ed1 7e8 00 40 00 00 
33ed5 7e9 00 60 00 00 
33ed9 7ea 00 80 00 00 
33edd 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
33ee1 7ec 00 BF 00 00 
33ee5 7ed 00 DF 00 00 
33ee9 7ee 00 FF 00 00 
33eed 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
33ef1 7f0 39 FF 39 00 
33ef5 7f1 55 FF 55 00 
33ef9 7f2 71 FF 71 00 
33efd 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
33f01 7f4 AA FF AA 00 
33f05 7f5 C6 FF C6 00 
33f09 7f6 E3 FF E3 00 
33f0d 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
33f11 7f8 00 40 14 00 
33f15 7f9 00 60 1E 00 
33f19 7fa 00 80 28 00 
33f1d 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
33f21 7fc 00 BF 3C 00 
33f25 7fd 00 DF 46 00 
33f29 7fe 00 FF 50 00 
33f2d 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
33f31 800 39 FF 77 00 
33f35 801 55 FF 8A 00 
33f39 802 71 FF 9E 00 
33f3d 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
33f41 804 AA FF C5 00 
33f45 805 C6 FF D8 00 
33f49 806 E3 FF EC 00 
33f4d 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
33f51 808 00 40 28 00 
33f55 809 00 60 3C 00 
33f59 80a 00 80 50 00 
33f5d 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
33f61 80c 00 BF 78 00 
33f65 80d 00 DF 8C 00 
33f69 80e 00 FF A0 00 
33f6d 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
33f71 810 39 FF B5 00 
33f75 811 55 FF C0 00 
33f79 812 71 FF CA 00 
33f7d 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
33f81 814 AA FF DF 00 
33f85 815 C6 FF EA 00 
33f89 816 E3 FF F4 00 
33f8d 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
33f91 818 00 40 40 00 
33f95 819 00 60 60 00 
33f99 81a 00 80 80 00 
33f9d 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
33fa1 81c 00 BF BF 00 
33fa5 81d 00 DF DF 00 
33fa9 81e 00 FF FF 00 
33fad 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
33fb1 820 39 FF FF 00 
33fb5 821 55 FF FF 00 
33fb9 822 71 FF FF 00 
33fbd 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
33fc1 824 AA FF FF 00 
33fc5 825 C6 FF FF 00 
33fc9 826 E3 FF FF 00 
33fcd 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
33fd1 828 00 28 40 00 
33fd5 829 00 3C 60 00 
33fd9 82a 00 50 80 00 
33fdd 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
33fe1 82c 00 78 BF 00 
33fe5 82d 00 8C DF 00 
33fe9 82e 00 A0 FF 00 
33fed 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
33ff1 830 39 B5 FF 00 
33ff5 831 55 C0 FF 00 
33ff9 832 71 CA FF 00 
33ffd 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
34001 834 AA DF FF 00 
34005 835 C6 EA FF 00 
34009 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3400c 837             | 
3400c 837             | '**********************************************************************************
3400c 837             | '
3400c 837             | '        Timings and colors definitions
3400c 837             | '
3400c 837             | '**********************************************************************************
3400c 837             | 
3400c 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3400c 837 08 00 00 00 
34010 838 3C 00 00 00 
34014 839 08 00 00 00 
34018 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         336956522,   %1_101101__11_0000_0110__1111_1011,   600,        0,     192, 0, 0
3401c 83b 07 00 00 00 
34020 83c 04 00 00 00 
34024 83d 01 00 00 00 
34028 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3402c 83f 58 02 00 00 
34030 840 6A 8C 15 14 
34034 841 FB 06 B7 01 
34038 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $58, $02, $00, $00
3403c 843 00 00 00 00 
34040 844 C0 00 00 00 
34044 845 00 00 00 00 
34048 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3404c 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3404c 847 00 75 C7 97 
34050 848 27 47 F6 0A 
34054 849 05 79 CB 9B 
34058 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3405c 84b             | 
3405c 84b             | ''--------  Initialization  ----------------------------------------------------------------
3405c 84b             | 
3405c 84b 28 0C 64 FD | hdmi            setq    #6
34060 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
34064 84d 28 10 64 FD |                 setq    #8
34068 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3406c 84f             | 
3406c 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
34070 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
34074 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
34078 852 D6 C6 01 F1 |                 add     t1,hbase
3407c 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
34080 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
34084 855 7B 0B 80 5F 
34088 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3408c 857 66 66 86 FF 
34090 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
34094 859             | '
34094 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
34098 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
3409c 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
340a0 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
340a4 85d             | 
340a4 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
340a8 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
340ac 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
340b0 860             | 
340b0 860             | ''--------  frame rendering main loop  ---------------------------------------------------
340b0 860             | 
340b0 860 28 06 64 FD | p101            setq 	#3
340b4 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
340b8 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
340bc 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
340c0 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
340c4 865 00 A0 05 F6 |                 mov     dlinum, #0
340c8 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
340cc 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
340d0 868             | 
340d0 868             | 
340d0 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
340d4 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
340d8 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
340dc 86b             |                 
340dc 86b             | 
340dc 86b             | 
340dc 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
340dc 86b             |   
340dc 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
340e0 86c 29 FE 65 3D |          if_nc  setq2   #255
340e4 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
340e8 86e             | 
340e8 86e             | '' -----   up porch (before the picture)
340e8 86e             | 
340e8 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
340ec 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
340f0 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
340f4 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
340f8 872             |  
340f8 872             |    
340f8 872             |  
340f8 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
340fc 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
34100 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
34104 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
34108 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
3410c 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
34110 878             | 
34110 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
34114 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
34118 87a 48 00 B0 FD | 		call    #dli
3411c 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
34120 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
34124 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
34128 87e             |                 	
34128 87e             |                 
34128 87e             | 
34128 87e             |  
34128 87e             | '' ------- the main screen drawing starts here
34128 87e             | 
34128 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3412c 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
34130 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
34134 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
34138 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3413c 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
34140 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
34144 885             |               
34144 885             | 
34144 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
34148 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3414c 887             | 
3414c 887             | ' ---------------- All visible lines displayed now, start vblank  
3414c 887             | 
3414c 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
34150 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
34154 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
34158 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
3415c 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
34160 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
34164 88d             | 
34164 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
34164 88d             | 
34164 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
34164 88d             | 
34164 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
34168 88e             | 
34168 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3416c 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
34170 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
34174 891             | 
34174 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
34178 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3417c 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
34180 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
34184 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
34188 896             | 
34188 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3418c 897 DD C6 41 F8 |                 getnib  t1,dl,#0
34190 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
34194 899 70 00 90 AD |     if_z        jmp     #preload
34198 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3419c 89b 94 00 90 AD |     if_z        jmp     #preload2
341a0 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
341a4 89d 0C 00 90 AD |     if_z        jmp     #p390
341a8 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
341ac 89f 28 00 90 AD |     if_z        jmp     #p391  
341b0 8a0             | 
341b0 8a0 2D 00 64 FD | p308            ret
341b4 8a1             |    
341b4 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
341b8 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
341bc 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
341c0 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
341c4 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
341c8 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
341cc 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
341d0 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
341d4 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
341d8 8aa             |  
341d8 8aa             | '' --------  Reload palette. To do 
341d8 8aa             | 
341d8 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
341dc 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
341e0 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
341e4 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
341e8 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
341ec 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
341f0 8b0 70 FF 9F FD |         	jmp     #dli                
341f4 8b1             |       
341f4 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
341f4 8b1             | 
341f4 8b1             | 
341f4 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
341f4 8b1             | 
341f4 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
341f8 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
341fc 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
34200 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
34204 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
34208 8b6             |         
34208 8b6             | '' -------------- Preload a line from PSRAM        
34208 8b6             |         
34208 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3420c 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
34210 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
34214 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
34218 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
3421c 8bb             | 
3421c 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
34220 8bc 32 B7 01 F6 |                 mov     buf2,a1024
34224 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
34228 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3422c 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
34230 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
34234 8c1             |  
34234 8c1             |  
34234 8c1             | preload2      '  incmod  dlinum,#3
34234 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
34238 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
3423c 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
34240 8c4 28 02 64 FD |                 setq	#1
34244 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
34248 8c6             |                 
34248 8c6             | 
34248 8c6             | '' -------------- Draw sprites
34248 8c6             | 
34248 8c6 CF 5C 02 F6 | sprite          mov t8,frames
3424c 8c7 10 5C 0E F5 | 		and t8,#16 wz
34250 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
34254 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
34258 8ca             | 		
34258 8ca             | 
34258 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3425c 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
34260 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
34264 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
34268 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3426c 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
34270 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
34274 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
34278 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3427c 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
34280 8d4 01 52 86 F1 |                 sub     sprite_h,#1
34284 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
34288 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3428c 8d7             | 
3428c 8d7             | 
3428c 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
34290 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
34294 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
34298 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3429c 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
342a0 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
342a4 8dd 00 5E 06 F6 |                 mov 	t9,#0
342a8 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
342ac 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
342b0 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
342b4 8e1             |      
342b4 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
342b8 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
342bc 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
342c0 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
342c4 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
342c8 8e6             |                 
342c8 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
342cc 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
342d0 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
342d4 8e9             |   		
342d4 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
342d8 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
342dc 8eb             | 
342dc 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
342e0 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
342e4 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
342e8 8ee             |  
342e8 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
342ec 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
342f0 8f0 10 00 90 CD |      if_c 	jmp     #p899		
342f4 8f1             | 	
342f4 8f1             | 	
342f4 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
342f8 8f2 28 CD 01 F1 | 		add	t4,sprite_w
342fc 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
34300 8f4             | 
34300 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
34304 8f5             | 
34304 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
34308 8f6 01 58 86 F1 | 	 	sub     t6,#1
3430c 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
34310 8f8             | 
34310 8f8 28 58 62 FD |                 setq   	t6
34314 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
34318 8fa 28 5D 02 F6 |                 mov t8,sprite_w
3431c 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
34320 8fc 24 00 90 AD |         if_z    jmp #p898
34324 8fd             |          
34324 8fd             |         
34324 8fd 70 5F 06 F6 |                 mov  t9,#368
34328 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3432c 8ff             | 
3432c 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
34330 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
34334 901 FF FF 7F FF 
34338 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3433c 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
34340 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
34344 905 2D 01 00 F5 |                 and 0-0, t7
34348 906             |                
34348 906             | 
34348 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3434c 907 E5 E0 7A FA |                 wmlong 368,t3				
34350 908             |                 
34350 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
34354 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
34358 90a 2D 00 64 FD |                 ret
3435c 90b             | 	
3435c 90b             | 	
3435c 90b             |                
3435c 90b             |  
3435c 90b             | '' -------------- Graphics line ------------------------------------------------------------
3435c 90b             |  
3435c 90b             | 
3435c 90b             | '' consts and vars
3435c 90b             | 
3435c 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
34360 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
34364 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
34368 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3436c 90f             | 
3436c 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
34370 910             | 
34370 910             | '------ these longs will be set by setmode function
34370 910             | 
34370 910 00 00 00 00 | m_bs            long    0        'blanks before sync
34374 911 00 00 00 00 | m_sn            long    0        'sync
34378 912 00 00 00 00 | m_bv            long    0        'blanks before visible
3437c 913 00 00 00 00 | m_vi            long    0        'visible pixels #
34380 914             | 'm_border        long    0        'left/right borders
34380 914 00 00 00 00 | i_upporch       long    0        'up porch lines
34384 915 00 00 00 00 | i_vsync         long    0        'vsync lines
34388 916 00 00 00 00 | i_downporch     long    0        'down porch lines
3438c 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
34390 918 00 00 00 00 | i_totalvis      long    0
34394 919             | 
34394 919             | '-------------------------------------
34394 919             |  
34394 919 00 00 00 00 | linenum         long    0
34398 91a 00 00 00 00 | frames          long    0
3439c 91b 00 00 00 00 | dlinum long 0
343a0 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
343a4 91d             | 
343a4 91d 00 00 00 00 | vblankptr       long    0
343a8 91e 00 00 00 00 | modeptr         long    0
343ac 91f 00 00 00 00 | paletteptr      long    0
343b0 920 00 00 00 00 | dlptr           long    0
343b4 921 01 00 00 00 | hbase           long    1
343b8 922 00 00 00 00 | mailbox         long    0
343bc 923 00 00 00 00 | spriteptr          long 0
343c0 924             | 
343c0 924 00 00 00 00 | cmd             long    0
343c4 925 00 B0 07 00 | buf1            long    $80000-16384-4096
343c8 926 00 04 00 00 | buf2            long    1024
343cc 927 01 00 00 00 | dlptr2          long    1
343d0 928 01 00 00 00 | dl              long    1
343d4 929             | 
343d4 929 00 00 00 00 | buf1c long 0
343d8 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
343dc 92b 01 00 00 00 | framebuf2       long    1
343e0 92c 01 00 00 00 | hsync0          long    1
343e4 92d 01 00 00 00 | hsync1          long    1
343e8 92e             | 
343e8 92e 01 00 00 00 | t1              long    1
343ec 92f 00 00 00 00 | t2 long 0
343f0 930 00 00 00 00 | t3 long 0
343f4 931 00 00 00 00 | t4 long 0
343f8 932             | 
343f8 932 00 00 00 00 | rcnt            long    0  'dl repeat count
343fc 933 00 00 00 00 | rcnt2           long    0
34400 934 00 00 00 00 | rcnt2a          long    0
34404 935 00 00 00 00 | roffset         long    0
34408 936 00 00 00 00 | rdl             long    0  'dl repeat line
3440c 937 00 00 00 00 | dlc             long    0  'dl command
34410 938             | 
34410 938 FF FF FF FF | affffffff       long    $ffffffff
34414 939 00 00 00 00 | sprite1pointer long 0
34418 93a 00 00 00 00 | sprite1xy      long 0
3441c 93b 00 00 00 00 | sprite1wh      long 0
34420 93c 00 00 00 00 | sprite2pointer long 0
34424 93d 00 00 00 00 | sprite2xy      long 0
34428 93e 00 00 00 00 | sprite2wh      long 0
3442c 93f 00 00 00 00 | sprite3pointer long 0
34430 940 00 00 00 00 | sprite3xy      long 0
34434 941 00 00 00 00 | sprite3wh      long 0
34438 942 00 00 00 00 | sprite4pointer long 0
3443c 943 00 00 00 00 | sprite4xy      long 0
34440 944 00 00 00 00 | sprite4wh      long 0
34444 945 00 00 00 00 | sprite5pointer long 0
34448 946 00 00 00 00 | sprite5xy      long 0
3444c 947 00 00 00 00 | sprite5wh      long 0
34450 948 00 00 00 00 | sprite6pointer long 0
34454 949 00 00 00 00 | sprite6xy      long 0
34458 94a 00 00 00 00 | sprite6wh      long 0
3445c 94b 00 00 00 00 | sprite7pointer long 0
34460 94c 00 00 00 00 | sprite7xy      long 0
34464 94d 00 00 00 00 | sprite7wh      long 0
34468 94e 00 00 00 00 | sprite8pointer long 0
3446c 94f 00 00 00 00 | sprite8xy      long 0
34470 950 00 00 00 00 | sprite8wh      long 0
34474 951 00 00 00 00 | sprite9pointer long 0
34478 952 00 00 00 00 | sprite9xy      long 0
3447c 953 00 00 00 00 | sprite9wh      long 0
34480 954 00 00 00 00 | sprite10pointer long 0
34484 955 00 00 00 00 | sprite10xy      long 0
34488 956 00 00 00 00 | sprite10wh      long 0
3448c 957 00 00 00 00 | sprite11pointer long 0
34490 958 00 00 00 00 | sprite11xy      long 0
34494 959 00 00 00 00 | sprite11wh      long 0
34498 95a 00 00 00 00 | sprite12pointer long 0
3449c 95b 00 00 00 00 | sprite12xy      long 0
344a0 95c 00 00 00 00 | sprite12wh      long 0
344a4 95d 00 00 00 00 | sprite13pointer long 0
344a8 95e 00 00 00 00 | sprite13xy      long 0
344ac 95f 00 00 00 00 | sprite13wh      long 0
344b0 960 00 00 00 00 | sprite14pointer long 0
344b4 961 00 00 00 00 | sprite14xy      long 0
344b8 962 00 00 00 00 | sprite14wh      long 0
344bc 963 00 00 00 00 | sprite15pointer long 0
344c0 964 00 00 00 00 | sprite15xy      long 0
344c4 965 00 00 00 00 | sprite15wh      long 0
344c8 966 00 00 00 00 | sprite16pointer long 0
344cc 967 00 00 00 00 | sprite16xy      long 0
344d0 968 00 00 00 00 | sprite16wh      long 0
344d4 969 00 00 00 00 | sprite17pointer long 0
344d8 96a 00 00 00 00 | sprite17xy      long 0
344dc 96b 00 00 00 00 | sprite17wh      long 0
344e0 96c 00 00 00 00 | sprite18pointer long 0
344e4 96d 00 00 00 00 | sprite18xy      long 0
344e8 96e 00 00 00 00 | sprite18wh      long 0
344ec 96f 00 00 00 00 | spritenum long 0
344f0 970             | 
344f0 970 00 00 00 00 | spriteline long 0
344f4 971 84 03 00 00 | sprite_x long 900
344f8 972 00 00 00 00 | sprite_y long 0
344fc 973 10 00 00 00 | sprite_w long 16
34500 974 40 00 00 00 | sprite_h long 64
34504 975 00 00 00 00 | l2 long 0
34508 976 00 00 00 00 | t5 long 0
3450c 977 00 00 00 00 | t6 long 0
34510 978 00 00 00 00 | t7 long 0
34514 979 00 00 00 00 | t8 long 0
34518 97a 00 00 00 00 | t9 long 0
3451c 97b 00 00 00 00 | preloadaddr long 0
34520 97c 00 00 00 00 | preloadlineaddr long 0
34524 97d 00 04 00 00 | a1024 long 1024
34528 97e             | 
34528 97e E0 03 00 00 | aa long 992
3452c 97f FF 03 00 00 | a1023 long 1023
34530 980 00 10 00 00 | a4096 long 4096
34534 981             |  fit 368
34534 981             | _psram_spin2_dat_
34534 981 00 00 00 00 
      ...             
3462c 9bf 00 00 00 00 
34630 9c0 00 00 00 00 |     listdata long 0[8*8]
34634 9c1             |             orgh
34634                 | 
34634                 | ' driver state
34634     FF FF FF FF | drivercog   long    -1  ' COG id of driver
34638     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3463c                 | 
3463c                 | ' delay profile
3463c     07 00 00 00 
34640     00 CF 7B 05 
34644     80 D1 F0 08 
34648     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3464c     80 C4 60 0F 
34650     80 39 7A 12 
34654     40 2D D9 13 
34658     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3465c                 | 
3465c                 | ' data to be passed to driver when starting it
3465c                 | startupData
3465c     00 00 00 00 |     long    0           ' current frequency
34660     00 00 00 00 |     long    FLAGS       ' optional flags for driver
34664     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
34668     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3466c     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
34670     7C 46 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
34674     FC 46 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
34678     1C 47 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3467c                 | 
3467c                 | ' data for memory
3467c                 | deviceData
3467c                 |     ' 16 bank parameters follow (16MB per bank)
3467c     00 00 00 00 
      ...             
346b4     00 00 00 00 
346b8     00 00 00 00 |     long    0[16]                               ' banks 0-15
346bc                 |     ' 16 banks of pin parameters follow
346bc     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
346c0     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
346c4     FF FF FF FF 
      ...             
346f4     FF FF FF FF 
346f8     FF FF FF FF |     long    -1[14]                              ' banks 2-15
346fc                 | 
346fc                 | ' data for COG polling
346fc                 | qosData 
346fc     00 00 FF FF 
34700     00 00 FF FF 
34704     00 00 FF FF 
34708     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3470c     00 00 FF FF 
34710     00 00 FF FF 
34714     00 00 FF FF 
34718     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3471c                 |     
3471c                 | ' mailbox storage
3471c                 | 
3471c                 | mailboxes
3471c     00 00 00 00 
      ...             
34774     00 00 00 00 
34778     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3477c                 | 	alignl
3477c                 | _psram16drv_spin2_dat_
3477c                 |                             orgh
3477c     00 00 00 00 
      ...             
34794     00 00 00 00 
34798     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3479c                 | 
3479c                 | driver_start
3479c                 |                             org
3479c 000             | '..................................................................................................
3479c 000             | ' Memory layout for COG RAM once operational:
3479c 000             | '
3479c 000             | '  COG RAM address      Usage
3479c 000             | '  ---------------      ----
3479c 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3479c 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3479c 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3479c 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3479c 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3479c 000             | '  ~$198-$1F3           State and register variables
3479c 000             | '
3479c 000             | ' Also during driver COG startup:
3479c 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3479c 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3479c 000             | '..................................................................................................
3479c 000             |                             
3479c 000             | ' Mailbox storage after vector initialization
3479c 000             | 
3479c 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
347a0 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
347a4 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
347a8 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
347ac 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
347b0 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
347b4 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
347b8 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
347bc 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
347c0 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
347c4 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
347c8 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
347cc 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
347d0 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
347d4 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
347d8 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
347dc 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
347e0 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
347e4 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
347e8 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
347ec 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
347f0 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
347f4 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
347f8 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
347fc 018             | 
347fc 018             | ' Mailbox parameter addresses per COG once patched
347fc 018             |                             
347fc 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
34800 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
34804 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
34808 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3480c 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
34810 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
34814 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
34818 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3481c 020             | 
3481c 020             | '..................................................................................................
3481c 020             | ' Per COG request and state setup and service branching
3481c 020             |         
3481c 020             | cog0                 
3481c 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
34820 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
34824 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
34828 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3482c 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34830 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34834 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
34838 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3483c 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
34840 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34844 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34848 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3484c 02c             | cog1                        
3484c 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
34850 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
34854 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
34858 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3485c 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34860 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34864 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
34868 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3486c 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
34870 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34874 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34878 037 33 CA 63 FD |                             execf   request-0               'jump to service
3487c 038             | cog2                         
3487c 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
34880 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
34884 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
34888 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3488c 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34890 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34894 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
34898 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3489c 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
348a0 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
348a4 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
348a8 043 33 CA 63 FD |                             execf   request-0               'jump to service
348ac 044             | cog3                        
348ac 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
348b0 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
348b4 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
348b8 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
348bc 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
348c0 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
348c4 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
348c8 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
348cc 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
348d0 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
348d4 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
348d8 04f 33 CA 63 FD |                             execf   request-0               'jump to service
348dc 050             | cog4                        
348dc 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
348e0 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
348e4 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
348e8 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
348ec 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
348f0 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
348f4 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
348f8 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
348fc 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
34900 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34904 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34908 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3490c 05c             | cog5                        
3490c 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
34910 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
34914 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
34918 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3491c 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34920 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34924 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
34928 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3492c 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
34930 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34934 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34938 067 33 CA 63 FD |                             execf   request-0               'jump to service
3493c 068             | cog6                        
3493c 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
34940 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
34944 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
34948 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3494c 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34950 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34954 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
34958 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3495c 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
34960 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34964 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34968 073 33 CA 63 FD |                             execf   request-0               'jump to service
3496c 074             | cog7                        
3496c 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
34970 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
34974 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
34978 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3497c 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34980 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34984 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
34988 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3498c 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
34990 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34994 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34998 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3499c 080             |                             fit     128
3499c 080             | 
3499c 080             |                             fit     128
3499c 080             | pad                         long    0[128-$]                'align init code to $80
3499c 080             | 
3499c 080             | '..................................................................................................
3499c 080             | 
3499c 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3499c 080             | 
3499c 080             | init                        
3499c 080             |                             ' get driver scratch long address in hub
3499c 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
349a0 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
349a4 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
349a8 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
349ac 084             |                     
349ac 084             |                             ' read in the additional LUT RAM code
349ac 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
349b0 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
349b4 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
349b8 087             | 
349b8 087             |                             ' read the startup parameters
349b8 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
349bc 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
349c0 089             | 
349c0 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
349c0 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
349c4 08a             | 
349c4 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
349c8 08b 01 00 00 5F 
349cc 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
349d0 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
349d4 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
349d8 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
349dc 090             | 
349dc 090             |                             ' setup data pin modes and data bus pin group in streamer commands
349dc 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
349e0 091 01 00 00 FF 
349e4 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
349e8 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
349ec 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
349f0 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
349f4 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
349f8 097 08 DE 47 F5 |                             or      a, #8
349fc 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
34a00 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
34a04 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
34a08 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
34a0c 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
34a10 09d 01 DE 07 F1 |                             add     a, #1
34a14 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
34a18 09f             |  
34a18 09f             |                             ' setup device control pin states
34a18 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
34a1c 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
34a20 0a1 01 00 00 FF 
34a24 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
34a28 0a3             | 
34a28 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
34a2c 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
34a30 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
34a34 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
34a38 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
34a3c 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
34a40 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
34a44 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
34a48 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
34a4c 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
34a50 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
34a54 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
34a58 0af             | pinloop
34a58 0af             |                             ' generate minimum CE high time before access
34a58 0af A1 07 00 FF 
34a5c 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
34a60 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
34a64 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
34a68 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
34a6c 0b4 1F DE 63 FD |                             waitx   a                       'delay
34a70 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
34a74 0b6             | 
34a74 0b6             |                             ' setup the COG mailboxes and addresses 
34a74 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
34a78 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
34a7c 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
34a80 0b9             | 
34a80 0b9 28 2E 64 FD |                             setq    #24-1
34a84 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
34a88 0bb             | 
34a88 0bb             |                             ' setup the polling loop for active COGs 
34a88 0bb 01 C2 63 FD |                             cogid   id
34a8c 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
34a90 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
34a94 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
34a98 0bf 0A F0 07 F6 |                             mov     ptra, #10
34a9c 0c0 E1 F1 03 FA |                             mul     ptra, id
34aa0 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
34aa4 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
34aa8 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
34aac 0c4 03 C2 07 FA |                             mul     id, #3
34ab0 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
34ab4 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
34ab8 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
34abc 0c8 D8 01 B0 FD |                             call    #reloadcogs
34ac0 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
34ac4 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
34ac8 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
34ac8 0cb D8 E5 B7 F9 |                             setd    d, #addr1
34acc 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
34ad0 0cd 08 04 DC FC |                             rep     #2, #8
34ad4 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
34ad8 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
34adc 0d0             | 
34adc 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
34adc 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
34adc 0d0 01 C2 63 FD |                             cogid   id
34ae0 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
34ae4 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
34ae8 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
34aec 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
34af0 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
34af4 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
34af8 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
34afc 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
34b00 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
34b04 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
34b08 0db 3F E4 A7 F9 |                             alti    d, #%111_111
34b0c 0dc 00 00 00 F6 |                             mov     0-0, 0-0
34b10 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
34b14 0de A5 E5 03 F1 |                             add     d, const512
34b18 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
34b1c 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
34b20 0e1 00 00 00 F6 |                             mov     0-0, 0-0
34b24 0e2             |                             
34b24 0e2             |                             ' setup register values for control vector loop setup after we return
34b24 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
34b28 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
34b2c 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
34b30 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
34b34 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
34b38 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
34b3c 0e8 D0 C3 8F F9 |                             altd    id, #id0
34b40 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
34b44 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
34b48 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
34b4c 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
34b50 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
34b54 0ee             |  
34b54 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
34b58 0ef 07 CA 07 F5 |                             and     request, #7
34b5c 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
34b60 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
34b64 0f2             |                             fit     $100                    'ensure all init code fits this space
34b64 0f2             | 
34b64 0f2             |                             fit     $100                    'ensure all init code fits this space
34b64 0f2             | 
34b64 0f2 00 00 00 00 
      ...             
34b94 0fe 00 00 00 00 
34b98 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
34b9c 100             | 
34b9c 100             | '..................................................................................................
34b9c 100             | ' Error result handling and COG notification of request completion
34b9c 100             | 
34b9c 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
34ba0 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
34ba4 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
34ba8 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
34bac 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
34bb0 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
34bb4 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
34bb8 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
34bbc 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
34bc0 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
34bc4 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
34bc8 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
34bcc 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
34bd0 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
34bd4 10e             | ' Poller re-starts here after a COG is serviced
34bd4 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
34bd8 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
34bdc 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
34be0 111             | ' Main dynamic polling loop repeats until a request arrives
34be0 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
34be4 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
34be8 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
34bec 114             | 
34bec 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
34bf0 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
34bf4 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
34bf8 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
34bfc 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
34c00 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
34c04 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
34c08 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
34c0c 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
34c10 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
34c14 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
34c18 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
34c1c 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
34c20 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
34c24 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
34c28 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
34c2c 124             | 
34c2c 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
34c30 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
34c34 126             |  
34c34 126             | '..................................................................................................
34c34 126             | ' List handler                               
34c34 126             | 
34c34 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
34c38 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
34c3c 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
34c40 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
34c44 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
34c48 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
34c4c 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
34c50 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
34c54 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
34c58 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
34c5c 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
34c60 131 33 00 60 FD |                             execf   0-0                     'process the request 
34c64 132             | 
34c64 132             | '..................................................................................................
34c64 132             | ' Restoring per COG state and resuming where we left off
34c64 132             | 
34c64 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
34c68 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
34c6c 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
34c70 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
34c74 136 D8 CB FB F8 |                             getbyte request, addr1, #3
34c78 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
34c7c 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
34c80 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
34c84 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
34c88 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
34c8c 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
34c90 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
34c94 13e             |                    
34c94 13e             | '..................................................................................................
34c94 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
34c94 13e             | 
34c94 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
34c98 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
34c9c 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
34ca0 141 D0 DF B7 F9 |                             setd    a, #id0
34ca4 142 D8 DF BF F9 |                             sets    a, #addr1
34ca8 143 FE FF FF FF 
34cac 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
34cb0 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
34cb4 146 3F DE A7 F9 |                             alti    a, #%111_111 
34cb8 147 00 00 F0 F9 |                             muxq    0-0, 0-0
34cbc 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
34cc0 149 01 E2 63 FD |                             cogid   c
34cc4 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
34cc8 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
34ccc 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
34cd0 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
34cd4 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
34cd8 14f 00 E0 03 F6 |                             mov     b, 0-0
34cdc 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
34ce0 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
34ce4 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
34ce8 153 0C 00 90 AD |             if_z            jmp     #excluded               
34cec 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
34cf0 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
34cf4 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
34cf8 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
34cfc 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
34d00 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
34d04 15a             | 
34d04 15a             | 'determine priority cogs and build instructions for the polling sequence
34d04 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
34d08 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
34d0c 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
34d10 15d             | 
34d10 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
34d14 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
34d18 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
34d1c 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
34d20 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
34d24 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
34d28 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
34d2c 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
34d30 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
34d34 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
34d38 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
34d3c 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
34d40 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
34d44 16a             | endprioloop
34d44 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
34d48 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
34d4c 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
34d50 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
34d54 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
34d58 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
34d5c 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
34d60 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
34d64 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
34d68 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
34d6c 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
34d70 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
34d74 176             | 
34d74 176             | ' populate the round robin COG polling instructions
34d74 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
34d78 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
34d7c 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
34d80 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
34d84 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
34d88 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
34d8c 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
34d90 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
34d94 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
34d98 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
34d9c 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
34da0 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
34da4 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
34da8 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
34dac 184             | '..................................................................................................
34dac 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
34dac 184             | 
34dac 184             | set_latency                                                 '            (a) set latency
34dac 184             | get_latency                                                 '            (b) get latency
34dac 184             | set_burst                                                   '            (c) set burst size of bank
34dac 184             | get_burst                                                   '            (d) get burst size of bank
34dac 184             |                                                             '            (e) dump state
34dac 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
34db0 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
34db4 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
34db8 187             |                                                             ' | | | | e  account for following AUGS
34db8 187 04 00 00 FF 
34dbc 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
34dc0 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
34dc4 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
34dc8 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
34dcc 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
34dd0 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
34dd4 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
34dd8 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
34ddc 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
34de0 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
34de4 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
34de8 193             | 
34de8 193             | '..................................................................................................
34de8 193             | ' Misc EXECF code
34de8 193             | 
34de8 193 33 72 63 FD | start_read_exec             execf   newburstr
34dec 194 33 7C 63 FD | start_write_exec            execf   resumewrites
34df0 195 33 78 63 FD | continue_read_exec          execf   lockedreads
34df4 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
34df8 197             | 
34df8 197             | '..................................................................................................
34df8 197             | ' Variables
34df8 197             | 
34df8 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
34dfc 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
34e00 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
34e04 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
34e08 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
34e0c 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
34e10 19d             | 
34e10 19d 00 00 00 80 | xfreq1          long    $80000000
34e14 19e 00 00 00 40 | xfreq2          long    $40000000
34e18 19f 03 00 00 00 | delay           long    3
34e1c 1a0             | 
34e1c 1a0             | lutcodeaddr                 
34e1c 1a0             | startupparams
34e1c 1a0             | excludedcogs                                    'careful: shared register use!
34e1c 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
34e20 1a1 00 00 00 00 | flags           long    0
34e24 1a2             | mask                                            'careful: shared register use!
34e24 1a2 00 00 00 00 | resetmaskA      long    0
34e28 1a3             | limit                                           'careful: shared register use!
34e28 1a3 00 00 00 00 | resetmaskB      long    0
34e2c 1a4 00 00 00 00 | datapins        long    0
34e30 1a5             | const512                                        'careful: shared register use!
34e30 1a5 00 00 00 00 | devicelist      long    0
34e34 1a6 00 00 00 00 | coglist         long    0
34e38 1a7 00 00 00 00 | mbox            long    0 
34e3c 1a8             | 
34e3c 1a8             | clkpin                                          'shared with code patched during init
34e3c 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
34e40 1a9             | cspin                                           'shared with code patched during init
34e40 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
34e44 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
34e48 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
34e4c 1ac 01 00 00 00 | clkdelay        long    1
34e50 1ad 00 00 00 00 | regdatabus      long    0
34e54 1ae             | 
34e54 1ae 10 00 00 00 | deviceaddr      long    $10
34e58 1af             | rrcounter
34e58 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
34e5c 1b0             | 
34e5c 1b0             | ' jump addresses for the per COG handlers
34e5c 1b0 20 00 00 00 | cog0_handler    long    cog0
34e60 1b1 2C 00 00 00 | cog1_handler    long    cog1
34e64 1b2 38 00 00 00 | cog2_handler    long    cog2
34e68 1b3 44 00 00 00 | cog3_handler    long    cog3
34e6c 1b4 50 00 00 00 | cog4_handler    long    cog4
34e70 1b5 5C 00 00 00 | cog5_handler    long    cog5
34e74 1b6 68 00 00 00 | cog6_handler    long    cog6
34e78 1b7 74 00 00 00 | cog7_handler    long    cog7
34e7c 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
34e80 1b9             | 
34e80 1b9             | ' EXECF sequences
34e80 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
34e84 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
34e88 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
34e8c 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
34e90 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
34e94 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
34e98 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
34e9c 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
34e9c 1c0             | 
34e9c 1c0             | 
34e9c 1c0             | ' SKIPF sequences
34e9c 1c0             | skiptable
34e9c 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
34ea0 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
34ea4 1c2 00 00 00 00 |                 long    0                      ' read modify write long
34ea8 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
34eac 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
34eb0 1c5 00 00 00 00 | pattern2        long    0
34eb4 1c6 00 00 00 00 | pattern3        long    0
34eb8 1c7 77 02 00 00 | singlelong      long    %1001110111  
34ebc 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
34ec0 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
34ec4 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
34ec8 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
34ecc 1cc             | 
34ecc 1cc             | ' LUT RAM address values
34ecc 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
34ed0 1cd DD 02 00 00 | continue_read   long    continue_read_lut
34ed4 1ce DB 02 00 00 | continue_write  long    continue_write_lut
34ed8 1cf F6 02 00 00 | noread          long    noread_lut
34edc 1d0             | 
34edc 1d0 00 00 00 00 | id0             long    0
34ee0 1d1 01 00 00 00 | id1             long    1
34ee4 1d2 02 00 00 00 | id2             long    2
34ee8 1d3 03 00 00 00 | id3             long    3
34eec 1d4 04 00 00 00 | id4             long    4
34ef0 1d5 05 00 00 00 | id5             long    5
34ef4 1d6 06 00 00 00 | id6             long    6
34ef8 1d7 07 00 00 00 | id7             long    7
34efc 1d8             | 
34efc 1d8             | 'These next 10 request registers below are also temporarily reused during init 
34efc 1d8             | 'and COG updates and need to follow immediately after id0-id7
34efc 1d8 00 00 00 00 | addr1           long    0
34f00 1d9 00 00 00 00 | hubdata         long    0
34f04 1da 00 00 00 00 | count           long    0
34f08 1db 00 00 00 00 | addr2           long    0
34f0c 1dc 00 00 00 00 | total           long    0
34f10 1dd 00 00 00 00 | offset1         long    0
34f14 1de 00 00 00 00 | offset2         long    0
34f18 1df 00 00 00 00 | link            long    0
34f1c 1e0             | 
34f1c 1e0             | burstwrite                                      'note shared register use during init
34f1c 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
34f20 1e1 00 00 00 00 | id              long    0
34f24 1e2             | 
34f24 1e2 00 00 00 00 | header          long    0
34f28 1e3 00 00 00 00 | trailer         long    0
34f2c 1e4 00 00 00 00 | cmdaddr         long    0
34f30 1e5 00 00 00 00 | request         long    0
34f34 1e6 00 00 00 00 | rrlimit         long    0
34f38 1e7 00 00 00 00 | pinconfig       long    0
34f3c 1e8 00 00 00 00 | clks            long    0
34f40 1e9 00 00 00 00 | resume          long    0
34f44 1ea 00 00 00 00 | orighubsize     long    0
34f48 1eb 00 00 00 00 | wrclks          long    0
34f4c 1ec             | 
34f4c 1ec 00 00 00 00 | pattern         long    0
34f50 1ed 00 00 00 00 | hubscratch      long    0
34f54 1ee 00 10 00 00 | val4k           long    4096
34f58 1ef             | 
34f58 1ef             | ' temporary general purpose regs
34f58 1ef 00 00 00 00 | a               long    0
34f5c 1f0 00 00 00 00 | b               long    0
34f60 1f1 00 00 00 00 | c               long    0
34f64 1f2 00 00 00 00 | d               long    0
34f68 1f3             |                 fit     502
34f68 1f3             | 
34f68 1f3             |                 fit     502
34f68 1f3             | 
34f68 1f3             | '..................................................................................................
34f68 1f3             | 
34f68 1f3             |             orgh
34f68                 | 
34f68                 | lut_code
34f68                 | 'HW init code up to 80 longs
34f68                 | 
34f68                 | '..................................................................................................
34f68                 | ' Memory layout for LUT RAM once operational:
34f68                 | '
34f68                 | '  LUT RAM address      Usage
34f68                 | '  ---------------      ----
34f68                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
34f68                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
34f68                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
34f68                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
34f68                 | '
34f68                 | ' Also during driver COG startup:
34f68                 | ' $230-$24F is used for HW init setup
34f68                 | ' $250-$26F is used as temporary vector storage 
34f68                 | '..................................................................................................
34f68                 | 
34f68                 |                 org $230    
34f68 230             | 
34f68 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
34f68 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
34f6c 231 24 16 60 FD |                             pollxfi
34f70 232 FF AA 2A FF 
34f74 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
34f78 234 28 00 B0 FD |                             call    #sendqspi
34f7c 235 07 F8 07 FF 
34f80 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
34f84 237 28 00 B0 FD |                             call    #sendspi
34f88 238 F8 07 78 FF 
34f8c 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
34f90 23a 1C 00 B0 FD |                             call    #sendspi
34f94 23b 7F 78 78 FF 
34f98 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
34f9c 23d 10 00 B0 FD |                             call    #sendspi 
34fa0 23e 2D 00 64 FD |                             ret
34fa4 23f             | 
34fa4 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
34fa8 240 32 0C 64 FD |                             skipf   #%110
34fac 241 9C EF 03 F6 |                             mov     pb, xsendimm
34fb0 242             | 
34fb0 242 10 D0 07 F6 | sendspi                     mov     clks, #16
34fb4 243 97 EF 03 F6 |                             mov     pb, ximm8lut
34fb8 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
34fbc 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
34fc0 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
34fc4 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
34fc8 248 24 36 60 FD |                             waitxfi                         'wait for the completion
34fcc 249 50 48 63 FD |                             fltl    datapins                'float data bus
34fd0 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
34fd4 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
34fd8 24c             | 
34fd8 24c 00 00 00 00 
34fdc 24d 00 00 00 00 
34fe0 24e 00 00 00 00 
34fe4 24f 00 00 00 00 |                 long    0[$270-32-$]
34fe8 250             |                 fit     $270-32  ' keep room for 32 vector longs
34fe8 250             |     
34fe8 250             |                 fit     $270-32  ' keep room for 32 vector longs
34fe8 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
34fe8 250             | rw_vect ' PSRAM jump vectors
34fe8 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
34fec 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
34ff0 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
34ff4 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
34ff8 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
34ffc 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
35000 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
35004 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
35008 258             | ro_vect ' R/O PSRAM jump vectors
35008 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3500c 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
35010 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
35014 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
35018 25c 00 01 00 00 |                 long    unsupported
3501c 25d 00 01 00 00 |                 long    unsupported
35020 25e 00 01 00 00 |                 long    unsupported
35024 25f 00 01 00 00 |                 long    unsupported
35028 260             | ctrl_vect ' Control jump vectors
35028 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3502c 261 00 01 00 00 |                 long    unsupported
35030 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
35034 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
35038 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3503c 265 00 01 00 00 |                 long    unsupported
35040 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
35044 267 3E 01 00 00 |                 long    reconfig 
35048 268             | no_vect ' Invalid bank jump vectors
35048 268 01 01 00 00 |                 long    invalidbank
3504c 269 01 01 00 00 |                 long    invalidbank
35050 26a 01 01 00 00 |                 long    invalidbank
35054 26b 01 01 00 00 |                 long    invalidbank
35058 26c 01 01 00 00 |                 long    invalidbank
3505c 26d 01 01 00 00 |                 long    invalidbank
35060 26e 01 01 00 00 |                 long    invalidbank
35064 26f 01 01 00 00 |                 long    invalidbank
35068 270             |                 fit     $270
35068 270             | 
35068 270             |                 fit     $270
35068 270             | '..................................................................................................
35068 270             | ' PSRAM READS
35068 270             |                                                             ' a b c d e f
35068 270             |                                                             ' B W L B R L  (a) byte read
35068 270             |                                                             ' Y O O U E O  (b) word read
35068 270             |                                                             ' T R N R S C  (c) long read
35068 270             |                                                             ' E D G S U K  (d) new burst read
35068 270             |                                                             '       T M E  (e) resumed sub-burst
35068 270             |                                                             '         E D  (f) locked sub-burst
35068 270             | 
35068 270             | 
35068 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3506c 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
35070 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
35074 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
35078 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3507c 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
35080 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
35084 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
35088 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3508c 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
35090 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
35094 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
35098 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3509c 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
350a0 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
350a4 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
350a8 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
350ac 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
350b0 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
350b4 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
350b8 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
350bc 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
350c0 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
350c4 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
350c8 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
350cc 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
350d0 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
350d4 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
350d8 28c             | 
350d8 28c             |                             ' fall through to read bursts
350d8 28c             |                         
350d8 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
350d8 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
350dc 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
350e0 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
350e4 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
350e8 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
350ec 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
350f0 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
350f4 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
350f8 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
350fc 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
35100 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
35104 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
35108 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3510c 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
35110 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
35114 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
35118 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3511c 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
35120 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
35124 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
35128 2a0 E8 D1 03 F1 |                             add     clks, clks
3512c 2a1             | readcommon
3512c 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
35130 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
35134 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
35138 2a4             | 
35138 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3513c 2a5 69 C8 63 FD |                             rev     cmdaddr
35140 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
35144 2a7 61 C8 63 FD |                             mergeb  cmdaddr
35148 2a8             | 
35148 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3514c 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
35150 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
35150 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
35154 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
35158 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3515c 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
35160 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
35160 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
35164 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
35168 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3516c 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
35170 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
35174 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
35178 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
35178 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3517c 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
35180 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
35184 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
35188 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3518c 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
35190 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
35194 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
35198 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3519c 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
351a0 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
351a4 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
351a8 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
351ac 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
351b0 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
351b0 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
351b4 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
351b8 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
351bc 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
351c0 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
351c4 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
351c8 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
351cc 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
351d0 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
351d4 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
351d8 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
351dc 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
351e0 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
351e4 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
351e8 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
351ec 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
351f0 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
351f4 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
351f8 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
351fc 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
35200 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
35204 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
35208 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3520c 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
35210 2da 10 03 90 FD |                             jmp     #writecommon
35214 2db             | 
35214 2db             | '..................................................................................................
35214 2db             | ' Burst continuation testing
35214 2db             | 
35214 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
35218 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3521c 2dd             | continue_read_lut          
3521c 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
35220 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
35224 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
35228 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3522c 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
35230 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
35234 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
35238 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3523c 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
35240 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
35244 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
35248 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3524c 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
35250 2ea             | 
35250 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
35254 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
35258 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3525c 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
35260 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
35264 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
35268 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3526c 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
35270 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
35274 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
35278 2f4 2A 1C 66 0D |             _ret_           push    #poller
3527c 2f5             | 
3527c 2f5             | 
3527c 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
35280 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
35280 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
35284 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
35288 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3528c 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
35290 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
35294 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
35298 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3529c 2fd 2D 00 64 FD |                             ret                             ' | continue processing
352a0 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
352a4 2ff             | '..................................................................................................
352a4 2ff             | ' Completion of requests
352a4 2ff             | 
352a4 2ff             | complete_rw_lut             
352a4 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
352a8 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
352ac 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
352b0 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
352b4 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
352b8 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
352bc 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
352c0 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
352c4 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
352c8 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
352cc 309 32 62 64 AD |             if_z            skipf   #%110001
352d0 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
352d4 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
352d8 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
352dc 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
352e0 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
352e4 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
352e8 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
352ec 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
352f0 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
352f4 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
352f8 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
352fc 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
35300 316             |                                                             ' skipcase (a) gfx copy to/from hub
35300 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
35300 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
35300 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
35304 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
35308 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3530c 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
35310 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
35314 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
35318 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3531c 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
35320 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
35324 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
35328 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3532c 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
35330 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
35334 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
35338 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3533c 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
35340 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
35344 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
35348 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3534c 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
35350 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
35354 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
35358 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3535c 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
35360 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
35364 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
35368 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3536c 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
35370 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
35374 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
35378 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3537c 335 DF B7 03 A6 |             if_z            mov     addr2, link
35380 336 34 FF 9F AD |             if_z            jmp     #checknext
35384 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
35388 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3538c 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
35390 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
35394 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
35398 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3539c 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
353a0 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
353a4 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
353a8 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
353ac 341             | 
353ac 341             | '..................................................................................................
353ac 341             | ' PSRAM WRITES
353ac 341             |                                                             '  a b c d e f g h
353ac 341             | 
353ac 341             |                                                             '  B W L F B R L L (a) byte write(s)
353ac 341             |                                                             '  Y O O I U E O O (b) word write(s)
353ac 341             |                                                             '  T R N L R S C C (c) long write(s)
353ac 341             |                                                             '  E D G L S U K K (d) resumed fill
353ac 341             |                                                             '          T M E E (e) new burst write
353ac 341             |                                                             '            E D D (f) resumed burst
353ac 341             |                                                             '              F B (g) locked fill
353ac 341             |                                                             '              I U (h) locked burst write
353ac 341             |                                                             '              L R 
353ac 341             |                                                             '              L S 
353ac 341             |                                                             '                T 
353ac 341             | 
353ac 341             | w_single                   
353ac 341             | w_fill_cont           
353ac 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
353b0 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
353b4 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
353b8 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
353bc 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
353c0 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
353c4 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
353c8 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
353cc 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
353d0 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
353d4 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
353d8 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
353dc 34d             |                ' disable call to r_resume_burst for single longs when z=0
353dc 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
353e0 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
353e4 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
353e8 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
353ec 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
353f0 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
353f4 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
353f8 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
353fc 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
35400 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
35404 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
35408 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3540c 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
35410 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
35414 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
35418 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3541c 35d             |         
3541c 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3541c 35d             |             '
3541c 35d             |             '  At least one of these 3 optional components will be sent
3541c 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3541c 35d             |             '     body - N x full longs of data
3541c 35d             |             '     trailer - last partial long of data
3541c 35d             |             '
3541c 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3541c 35d             |             '
3541c 35d             |             'Case    Type                           Sends
3541c 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3541c 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3541c 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3541c 35d             |             ' 4)     Multiple long fill             body only
3541c 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3541c 35d             | 
3541c 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3541c 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
35420 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
35424 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
35428 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3542c 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
35430 362 13 8C 07 F6 |                             mov     pattern3, #%10011
35434 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
35438 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3543c 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
35440 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
35444 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
35448 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3544c 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
35450 36a             |                             
35450 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
35454 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
35458 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3545c 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
35460 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
35464 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
35468 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3546c 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
35470 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
35474 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
35478 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3547c 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
35480 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
35484 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
35488 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3548c 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
35490 37a             | 
35490 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
35494 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
35498 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3549c 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
354a0 37e             |                  
354a0 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
354a4 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
354a8 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
354ac 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
354b0 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
354b4 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
354b8 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
354bc 385             | 
354bc 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
354c0 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
354c4 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
354c8 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
354cc 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
354d0 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
354d4 38b             | 
354d4 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
354d4 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
354d8 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
354dc 38d 2A B0 63 FD |                             push    addr1                   'save address
354e0 38e             | 
354e0 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
354e0 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
354e4 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
354e8 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
354ec 391             |             
354ec 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
354f0 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
354f4 393 2B B0 63 FD |                             pop     addr1                   'restore address
354f8 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
354fc 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
35500 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
35504 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
35508 398             | 
35508 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3550c 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
35510 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
35514 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
35518 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3551c 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
35520 39e             | 
35520 39e             |                             'trailer is done
35520 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
35524 39f             | 
35524 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
35528 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3552c 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
35530 3a2             | 
35530 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
35534 3a3 69 C8 63 FD |                             rev     cmdaddr                 
35538 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3553c 3a5 61 C8 63 FD |                             mergeb  cmdaddr
35540 3a6             |                             
35540 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
35544 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
35548 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3554c 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
35550 3aa             |                                                          
35550 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
35554 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
35558 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3555c 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
35560 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
35564 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
35568 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3556c 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
35570 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
35574 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
35578 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3557c 3b5             |  
3557c 3b5 59 52 63 FD |                             drvh    cspin
35580 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
35584 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
35588 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3558c 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
35590 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
35594 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
35598 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3559c 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
355a0 3be EA E5 03 F6 |                             mov     d, orighubsize
355a4 3bf EF E5 63 F0 |                             shl     d, a
355a8 3c0 F2 E3 83 F1 |                             sub     c, d
355ac 3c1 DD E3 03 F1 |                             add     c, offset1
355b0 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
355b4 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
355b8 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
355bc 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
355c0 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
355c4 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
355c8 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
355cc 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
355d0 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
355d4 3cb BB D3 03 F6 |                             mov     resume, restorefill
355d8 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
355dc 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
355e0 3ce 6C FC BF CD |             if_c            call    #yield
355e4 3cf 2D 00 64 FD |                             ret
355e8 3d0             |                            
355e8 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
355e8 3d0             |                       '     rczl    pa                      'rotate left into address offset
355e8 3d0             |                       '     rczl    c wcz                   'restore count and flags
355e8 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
355ec 3d1 02 EC 67 F0 |                             shl     pa, #2
355f0 3d2 28 06 64 AD |             if_z            setq    #3
355f4 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
355f8 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
355fc 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
35600 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
35604 3d7             | 
35604 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
35608 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3560c 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
35610 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
35614 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
35618 3dc             |                 fit 1024-32
35618 3dc             |         
35618 3dc             | 
35618 3dc             | '..................................................................................................
35618 3dc             | 
35618 3dc             |                 fit 1024-32
35618 3dc 00 00 00 00 
3561c 3dd 00 00 00 00 
35620 3de 00 00 00 00 
35624 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
35628 3e0             |                 org 1024-32
35628 000             | 
35628 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
35628 000 00 00 00 00 |                 long $0000
3562c 001 11 11 00 00 |                 long $1111
35630 002 22 22 00 00 |                 long $2222
35634 003 33 33 00 00 |                 long $3333
35638 004 44 44 00 00 |                 long $4444
3563c 005 55 55 00 00 |                 long $5555
35640 006 66 66 00 00 |                 long $6666
35644 007 77 77 00 00 |                 long $7777
35648 008 88 88 00 00 |                 long $8888
3564c 009 99 99 00 00 |                 long $9999
35650 00a AA AA 00 00 |                 long $aaaa
35654 00b BB BB 00 00 |                 long $bbbb
35658 00c CC CC 00 00 |                 long $cccc
3565c 00d DD DD 00 00 |                 long $dddd
35660 00e EE EE 00 00 |                 long $eeee
35664 00f FF FF 00 00 |                 long $ffff
35668 010             | 
35668 010             | 'masks
35668 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3566c 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
35670 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
35674 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
35678 014             | 
35678 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3567c 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
35680 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
35684 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
35688 018             | 
35688 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3568c 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
35690 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
35694 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
35698 01c             | 
35698 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3569c 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
356a0 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
356a4 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
356a8 020             |         fit 1024
356a8 020             | 
356a8 020             |         fit 1024
356a8 020             | 
356a8 020             | '--------------------------------------------------------------------------------------------------
356a8 020             |         orgh
356a8                 | 
356a8                 | gfxexpansion
356a8                 |                             'simple line drawing graphics expansion of memory driver
356a8                 |                             'jmp     #donerepeats                'just return for now
356a8                 | 
356a8     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
356ac     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
356b0     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
356b4     DD E1 03 F6 |                             mov     b, offset1              'get error term
356b8     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
356bc     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
356c0     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
356c4     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
356c8     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
356cc     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
356d0     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
356d4     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
356d8     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
356dc     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
356e0     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
356e4     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
356e8     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
356ec     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
356f0     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
356f4     DC E5 33 F9 |                             getword d, total, #0            'get line width
356f8     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
356fc     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
35700     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
35704     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
35708     C3 03 80 FD |                             jmp     #readmask               'continue filling
3570c                 | 	alignl
3570c                 | _usbnew_spin2_dat_
3570c                 |                 org     $000
3570c 000             | 
3570c 000             | usb_host_start
3570c 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
35710 001             | 
35710 001 03 00 00 FF 
35714 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
35718 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3571c 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
35720 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
35724 006 29 70 63 FD |                 setq2   htmp
35728 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3572c 008             | 
3572c 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
35730 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
35734 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
35738 00b             | 
35738 00b             | '------------------------------------------------------------------------------
35738 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
35738 00b             | ' special because the receiving function must not respond with either STALL or
35738 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
35738 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
35738 00b             | ' corrupt packet, it must ignore the transaction
35738 00b             | '------------------------------------------------------------------------------
35738 00b             | ' On entry:
35738 00b             | '   PTRA - start address of the SETUP data struct.
35738 00b             | ' On exit:
35738 00b             | '   retval - PID_ACK on success, otherwise error code.
35738 00b             | '------------------------------------------------------------------------------
35738 00b             | txn_setup
35738 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3573c 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
35740 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
35744 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
35748 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3574c 010             | .setup
3574c 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
35750 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35754 012 2D 00 64 AD |         if_z    ret
35758 013 7C 0B B0 FD |                 call    #retry_wait
3575c 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35760 015 2D 00 64 AD |         if_z    ret
35764 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
35768 017 E0 FF 9F FD |                 jmp     #.setup
3576c 018             | 
3576c 018             | '------------------------------------------------------------------------------
3576c 018             | ' IN/INTERRUPT transaction.
3576c 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3576c 018             | '------------------------------------------------------------------------------
3576c 018             | ' On entry:
3576c 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3576c 018             | '     CRC(b19..23).
3576c 018             | ' On exit:
3576c 018             | '------------------------------------------------------------------------------
3576c 018             | txn_in
3576c 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
35770 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
35774 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
35778 01b             | 
35778 01b             |                 ' Fall through to urx_packet
35778 01b             | 
35778 01b             | '------------------------------------------------------------------------------
35778 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
35778 01b             | ' received are handshakes and IN DATAx.
35778 01b             | '------------------------------------------------------------------------------
35778 01b             | ' On entry:
35778 01b             | ' On exit:
35778 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
35778 01b             | '     returned.
35778 01b             | '------------------------------------------------------------------------------
35778 01b             | urx_packet
35778 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3577c 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
35780 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
35784 01e 1A 92 63 FD |                 getct   hct2
35788 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3578c 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
35790 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
35794 022             | .wait_sop
35794 022 22 A7 8A FA |                 rdpin   urx, dm
35798 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3579c 024 08 00 90 CD |         if_c    jmp     #.get_pid
357a0 025 FC 25 CC FB |                 jnct2   #.wait_sop
357a4 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
357a8 027             | .get_pid
357a8 027 28 02 B0 FD |                 call    #urx_next
357ac 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
357b0 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
357b4 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
357b8 02b             | .chk_pid
357b8 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
357bc 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
357c0 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
357c4 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
357c8 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
357cc 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
357d0 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
357d4 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
357d8 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
357dc 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
357e0 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
357e4 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
357e8 037             | .ack_resend
357e8 037 22 A7 82 FA |                 rqpin   urx, dm
357ec 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
357f0 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
357f4 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
357f8 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
357fc 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
35800 03d             | .chk_eop
35800 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
35804 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
35808 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3580c 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
35810 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
35814 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
35818 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3581c 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
35820 045 2D 00 64 FD |                 ret
35824 046             | .idle
35824 046 22 A7 82 FA |                 rqpin   urx, dm
35828 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3582c 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
35830 049 2D 00 64 FD |                 ret
35834 04a             | 
35834 04a             | '------------------------------------------------------------------------------
35834 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
35834 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
35834 04a             | ' if one is required.
35834 04a             | '------------------------------------------------------------------------------
35834 04a             | ' On entry:
35834 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
35834 04a             | ' On exit:
35834 04a             | '------------------------------------------------------------------------------
35834 04a             | utx_token
35834 04a 22 A7 82 FA |                 rqpin   urx, dm
35838 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3583c 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
35840 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
35844 04e 34 0D B0 CD |         if_c    call    #utx_pre
35848 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3584c 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
35850 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
35854 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
35858 053             | .next_byte
35858 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3585c 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
35860 055             | .wait
35860 055 40 46 72 FD |                 testp   dp                      wc
35864 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
35868 057 23 03 08 FC |                 akpin   dp
3586c 058 22 A5 22 FC |                 wypin   utx, dm
35870 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
35874 05a             | 
35874 05a             | '------------------------------------------------------------------------------
35874 05a             | ' SETUP/OUT/INTERRUPT transaction.
35874 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
35874 05a             | '------------------------------------------------------------------------------
35874 05a             | ' On entry:
35874 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
35874 05a             | '     CRC(b19..23).
35874 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
35874 05a             | '   pkt_data - count of DATAx payload bytes to send.
35874 05a             | ' On exit:
35874 05a             | '------------------------------------------------------------------------------
35874 05a             | txn_out
35874 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
35878 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3587c 05c 00 00 C0 FF 
35880 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
35884 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
35888 05f             | 
35888 05f             |                 ' Fall through to utx_data
35888 05f             | 
35888 05f             | '------------------------------------------------------------------------------
35888 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
35888 05f             | ' calculated while the data byte is being shifted out. Since data stage
35888 05f             | ' success/fail is not determined until the status stage of the transaction,
35888 05f             | ' this routine is only concerned about the current DATAx packet.
35888 05f             | '------------------------------------------------------------------------------
35888 05f             | ' On entry:
35888 05f             | '   PTRA - hub start address of the data to read.
35888 05f             | '   pkt_cnt - data payload size.
35888 05f             | ' On exit:
35888 05f             | '------------------------------------------------------------------------------
35888 05f             | utx_data
35888 05f 22 A7 82 FA |                 rqpin   urx, dm
3588c 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
35890 061 F4 FF 9F CD |         if_c    jmp     #utx_data
35894 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
35898 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3589c 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
358a0 065 D8 0C B0 CD |         if_c    call    #utx_pre
358a4 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
358a8 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
358ac 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
358b0 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
358b4 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
358b8 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
358bc 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
358c0 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
358c4 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
358c8 06f             | .read_byte
358c8 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
358cc 070 F0 00 B0 FD |                 call    #utx_byte
358d0 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
358d4 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
358d8 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
358dc 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
358e0 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
358e4 076             | .send_crc
358e4 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
358e8 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
358ec 078 D0 00 B0 FD |                 call    #utx_byte
358f0 079 5D A5 EA F8 |                 getbyte utx, crc, #1
358f4 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
358f8 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
358fc 07c             | 
358fc 07c             | '------------------------------------------------------------------------------
358fc 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
358fc 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
358fc 07c             | ' expects that the packet includes at least the CRC word.
358fc 07c             | '
358fc 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
358fc 07c             | ' was requested, which makes it difficult to determine where the data stops
358fc 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
358fc 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
358fc 07c             | ' USB-16 expected residual value of 0xB001.
358fc 07c             | '
358fc 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
358fc 07c             | ' so the caller can verify IN success before writing the data to its final
358fc 07c             | ' destination.
358fc 07c             | '------------------------------------------------------------------------------
358fc 07c             | ' On entry:
358fc 07c             | '   pkt_data - max byte count expected to be in the packet.
358fc 07c             | '   newb_flg - signals new byte ready when toggled.
358fc 07c             | ' On exit:
358fc 07c             | '   pkt_cnt - actual number of bytes read.
358fc 07c             | '------------------------------------------------------------------------------
358fc 07c             | urx_data
358fc 07c F7 75 03 F6 |                 mov     htmp2, pb
35900 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
35904 07e 00 00 C0 FF 
35908 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3590c 080 BA EF 03 F6 |                 mov     pb, htmp2
35910 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
35914 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
35918 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3591c 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
35920 085             | .wait_byte
35920 085             | ' In-line rx for max speed
35920 085 22 A7 82 FA |                 rqpin   urx, dm
35924 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
35928 087 53 A5 02 F5 |                 and     utx, urx
3592c 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
35930 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
35934 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
35938 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3593c 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
35940 08d DC FF 9F FD |                 jmp     #.wait_byte
35944 08e             | .get_byte
35944 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
35948 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3594c 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
35950 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
35954 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
35958 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3595c 094             | .end_crc
3595c 094 01 B8 06 F1 |                 add     pkt_cnt, #1
35960 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
35964 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
35968 097 2D 00 64 1D |         if_a    ret
3596c 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3596c 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3596c 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3596c 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3596c 098 22 A7 82 FA |                 rqpin   urx, dm
35970 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
35974 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
35978 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
35978 09b             | .chk_crc
35978 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3597c 09c 58 00 00 FF 
35980 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
35984 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
35988 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3598c 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
35990 0a1 34 09 B0 FD |                 call    #poll_waitx
35994 0a2             | 
35994 0a2             |                 ' Fall through to utx_handshake
35994 0a2             | 
35994 0a2             | '------------------------------------------------------------------------------
35994 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
35994 0a2             | ' the appropriate IP delay has been inserted.
35994 0a2             | '------------------------------------------------------------------------------
35994 0a2             | ' On entry:
35994 0a2             | '   retval - handshake PID to send.
35994 0a2             | ' On exit:
35994 0a2             | '   retval unchanged.
35994 0a2             | '------------------------------------------------------------------------------
35994 0a2             | utx_handshake
35994 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
35998 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3599c 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
359a0 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
359a4 0a6 5F A5 02 F6 |                 mov     utx, retval
359a8 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
359ac 0a8             | .idle
359ac 0a8 22 A7 82 FA |                 rqpin   urx, dm
359b0 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
359b4 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
359b8 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
359bc 0ac 08 09 90 FD |                 jmp     #poll_waitx
359c0 0ad             | 
359c0 0ad             | '------------------------------------------------------------------------------
359c0 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
359c0 0ad             | '------------------------------------------------------------------------------
359c0 0ad             | ' On entry:
359c0 0ad             | '   utx - byte to transmit.
359c0 0ad             | ' On exit:
359c0 0ad             | '------------------------------------------------------------------------------
359c0 0ad             | utx_byte
359c0 0ad 40 46 72 FD |                 testp   dp                      wc
359c4 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
359c8 0af 23 03 08 FC |                 akpin   dp
359cc 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
359d0 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
359d4 0b2             | 
359d4 0b2             | '------------------------------------------------------------------------------
359d4 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
359d4 0b2             | '------------------------------------------------------------------------------
359d4 0b2             | ' On entry:
359d4 0b2             | ' On exit:
359d4 0b2             | '   retval - the byte read.
359d4 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
359d4 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
359d4 0b2             | '     received.
359d4 0b2             | '------------------------------------------------------------------------------
359d4 0b2             | urx_next
359d4 0b2 22 A7 8A FA |                 rdpin   urx, dm
359d8 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
359dc 0b4 53 A5 02 F5 |                 and     utx, urx
359e0 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
359e4 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
359e8 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
359ec 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
359f0 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
359f4 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
359f8 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
359fc 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
35a00 0bd 2D 00 64 FD |                 ret
35a04 0be             | 
35a04 0be             | '------------------------------------------------------------------------------
35a04 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
35a04 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
35a04 0be             | ' length, and the PID is not included in the CRC calculation:
35a04 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
35a04 0be             | '  CRC5  ENDP ADDRESS PID
35a04 0be             | ' %00000_1111_1111111_xxxxxxxx
35a04 0be             | '------------------------------------------------------------------------------
35a04 0be             | ' On entry:
35a04 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
35a04 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
35a04 0be             | ' On exit:
35a04 0be             | '   ep_addr_pid - CRC value appended to the packet.
35a04 0be             | '------------------------------------------------------------------------------
35a04 0be             | calc_crc5
35a04 0be FF 03 00 FF 
35a08 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
35a0c 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
35a10 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
35a14 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
35a18 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
35a1c 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
35a20 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
35a24 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
35a28 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
35a2c 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
35a30 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
35a34 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
35a38 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
35a3c 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
35a40 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
35a44 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
35a48 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
35a4c 0d0             | 
35a4c 0d0             | '------------------------------------------------------------------------------
35a4c 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
35a4c 0d0             | '------------------------------------------------------------------------------
35a4c 0d0             | isr1_fsframe
35a4c 0d0 1A 92 62 FD |                 getct   iframe_ct_base
35a50 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
35a54 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
35a58 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
35a5c 0d4             | .wait
35a5c 0d4 40 46 72 FD |                 testp   dp                      wc
35a60 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
35a64 0d6 23 03 08 FC |                 akpin   dp
35a68 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
35a6c 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
35a70 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
35a74 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
35a78 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
35a7c 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
35a80 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
35a84 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
35a88 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
35a8c 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
35a90 0e1 2C FF BF FD |                 call    #utx_byte
35a94 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
35a98 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
35a9c 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
35aa0 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
35aa4 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
35aa8 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
35aac 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
35ab0 0e9 5B A5 42 F5 |                 or      utx, icrc
35ab4 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
35ab8 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
35abc 0ec 20 00 90 FD |                 jmp     #isr1_wait
35ac0 0ed             | isr1_lsframe
35ac0 0ed 1A 92 62 FD |                 getct   iframe_ct_base
35ac4 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
35ac8 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
35acc 0f0             | .wait
35acc 0f0 40 46 72 FD |                 testp   dp                      wc
35ad0 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
35ad4 0f2 23 03 08 FC |                 akpin   dp
35ad8 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
35adc 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
35ae0 0f5             | isr1_wait
35ae0 0f5 22 A5 82 FA |                 rqpin   utx, dm
35ae4 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
35ae8 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
35aec 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
35af0 0f9 03 00 00 FF 
35af4 0fa FF B3 06 F5 |                 and     frame, ##$7ff
35af8 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
35afc 0fc F5 FF 3B FB |                 reti1
35b00 0fd             | 
35b00 0fd             | '------------------------------------------------------------------------------
35b00 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
35b00 0fd             | ' transaction will complete before the next frame is triggered.
35b00 0fd             | '------------------------------------------------------------------------------
35b00 0fd             | ' On entry:
35b00 0fd             | ' On exit:
35b00 0fd             | '------------------------------------------------------------------------------
35b00 0fd             | wait_txn_ok
35b00 0fd 1A 74 63 FD |                 getct   htmp2
35b04 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
35b08 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
35b0c 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
35b10 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
35b14 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
35b18 103 2D 00 64 FD |                 ret
35b1c 104             | 
35b1c 104             | '------------------------------------------------------------------------------
35b1c 104             | ' A device connection was detected, or a bus reset was requested by the USB
35b1c 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
35b1c 104             | ' and perform a reset sequence prior to device enumeration.
35b1c 104             | '------------------------------------------------------------------------------
35b1c 104             | dev_reset
35b1c 104 22 A7 82 FA |                 rqpin   urx, dm
35b20 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
35b24 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
35b28 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
35b2c 108             | reset
35b2c 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
35b30 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
35b34 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
35b38 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
35b3c 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
35b40 10d 1A 92 62 FD |                 getct   iframe_ct_base
35b44 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
35b48 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
35b4c 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
35b50 111 24 70 07 F1 |                 add     htmp, #36
35b54 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
35b58 113             | .framewait
35b58 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
35b5c 114 F8 FF 9F CD |         if_b    jmp     #.framewait
35b60 115 2D 00 64 FD |                 ret
35b64 116             | 
35b64 116             | '------------------------------------------------------------------------------
35b64 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
35b64 116             | '------------------------------------------------------------------------------
35b64 116             | ' On entry:
35b64 116             | '   PTRA - source address.
35b64 116             | '   PB - destination address.
35b64 116             | '   hr0 - length of copy, in bytes.
35b64 116             | ' On exit:
35b64 116             | '------------------------------------------------------------------------------
35b64 116             | hmemcpy
35b64 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
35b68 117 F7 71 43 FC |                 wrbyte  htmp, pb
35b6c 118 01 EE 07 F1 |                 add     pb, #1
35b70 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
35b74 11a             | 
35b74 11a             | '------------------------------------------------------------------------------
35b74 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
35b74 11a             | ' loop until the errant device is disconnected.
35b74 11a             | '------------------------------------------------------------------------------
35b74 11a             | ' On entry:
35b74 11a             | ' On exit:
35b74 11a             | '------------------------------------------------------------------------------
35b74 11a             | host_error
35b74 11a             |           if ERROR_LED >= 0
35b74 11a             |           end
35b74 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
35b78 11b             | 
35b78 11b             | '------------------------------------------------------------------------------
35b78 11b             | ' Get HID descriptor buffer for current port
35b78 11b             | '------------------------------------------------------------------------------
35b78 11b             | ' On entry:
35b78 11b             | ' On exit:
35b78 11b             | '   PB - HID descriptor buffer pointer
35b78 11b             | '------------------------------------------------------------------------------
35b78 11b             | get_hid_descr_buffer
35b78 11b 2D EF 03 F6 |                 mov     pb, hdev_port
35b7c 11c 01 EE E7 F2 |                 cmpsub  pb, #1
35b80 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
35b84 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
35b88 11f             | 
35b88 11f             | 
35b88 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
35b8c 120             | 
35b8c 120             | ' USB commands and error codes
35b8c 120 00 00 00 00 | cmd_data        long    0
35b90 121 00 00 00 00 | usb_err_code    long    ERR_NONE
35b94 122             | 
35b94 122             | ' Parameters block assigned at cog startup
35b94 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
35b98 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
35b9c 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
35ba0 125             | if ACTIVITY_LED >= 0
35ba0 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
35ba0 125             | end
35ba0 125             | if ERROR_LED >= 0
35ba0 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
35ba0 125             | end
35ba0 125 00 00 00 00 | hid_descr_p     long    0
35ba4 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
35ba4 126             | 'hkbd_report_p   long    0
35ba4 126 00 00 00 00 | hub_descr_p     long    0
35ba8 127 00 00 00 00 | urx_buff_p      long    0
35bac 128 00 00 00 00 | dev_desc_buff_p long    0
35bb0 129 00 00 00 00 | con_desc_buff_p long    0
35bb4 12a 00 00 00 00 | cache_start_p   long    0
35bb8 12b 00 00 00 00 | cache_end_p     long    0
35bbc 12c             | if EMUPAD_MAX_PLAYER > 0
35bbc 12c             | emupad_out_ptr  long    0
35bbc 12c             | end
35bbc 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
35bc0 12d             | 
35bc0 12d             | hdev_init_start
35bc0 12d             | hdev_port       res     1
35bc0 12d             | hdev_port       res     1
35bc0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
35bc0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
35bc0 12d             | kbm_next_datax  res     1
35bc0 12d             | kbm_next_datax  res     1
35bc0 12d             | hub_intf_num    res     1
35bc0 12d             | hub_intf_num    res     1
35bc0 12d             | hub_next_datax  res     1
35bc0 12d             | hub_next_datax  res     1
35bc0 12d             | hub_status_chg  res     1
35bc0 12d             | hub_status_chg  res     1
35bc0 12d             | hub_port_status res     1
35bc0 12d             | hub_port_status res     1
35bc0 12d             | if HAVE_MOUSE
35bc0 12d             | ms_intf_num     res     1
35bc0 12d             | ms_intf_num     res     1
35bc0 12d             | ms_in_max_pkt   res     1
35bc0 12d             | ms_in_max_pkt   res     1
35bc0 12d             | end
35bc0 12d             | kb_intf_num     res     1
35bc0 12d             | kb_intf_num     res     1
35bc0 12d             | kb_interval     res     1
35bc0 12d             | kb_interval     res     1
35bc0 12d             | kb_in_max_pkt   res     1
35bc0 12d             | kb_in_max_pkt   res     1
35bc0 12d             | kb_max_index    res     1
35bc0 12d             | kb_max_index    res     1
35bc0 12d             | kb_led_states   res     1
35bc0 12d             | kb_led_states   res     1
35bc0 12d             | gp_intf_num     res     1
35bc0 12d             | gp_intf_num     res     1
35bc0 12d             | gp_interval     res     1
35bc0 12d             | gp_interval     res     1
35bc0 12d             | gp_max_index    res     1
35bc0 12d             | gp_max_index    res     1
35bc0 12d             | gp_descr_len    res     1+MAX_DEVICES
35bc0 12d             | gp_descr_len    res     1+MAX_DEVICES
35bc0 12d             | hdev_init_end
35bc0 12d             | 
35bc0 12d             | ' Initialized at cog startup:
35bc0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
35bc0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
35bc0 12d             | iframe_ct_new   res     1
35bc0 12d             | iframe_ct_new   res     1
35bc0 12d             | iframe_ct_base  res     1
35bc0 12d             | iframe_ct_base  res     1
35bc0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
35bc0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
35bc0 12d             | 
35bc0 12d             | ' This register block is reset to zero when a USB device connects
35bc0 12d             | hreg_init_start
35bc0 12d             | hstatus         res     1         ' Host status flags
35bc0 12d             | hstatus         res     1         ' Host status flags
35bc0 12d             | hctwait         res     1         ' Poll-based wait clocks
35bc0 12d             | hctwait         res     1         ' Poll-based wait clocks
35bc0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
35bc0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
35bc0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
35bc0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
35bc0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
35bc0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
35bc0 12d             | xfer_retry      res     1         ' Control transfer retry count
35bc0 12d             | xfer_retry      res     1         ' Control transfer retry count
35bc0 12d             | retry           res     1         ' Transaction retry count
35bc0 12d             | retry           res     1         ' Transaction retry count
35bc0 12d             | utx             res     1         ' Byte to transmit on USB
35bc0 12d             | utx             res     1         ' Byte to transmit on USB
35bc0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
35bc0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
35bc0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
35bc0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
35bc0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
35bc0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
35bc0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
35bc0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
35bc0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
35bc0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
35bc0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
35bc0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
35bc0 12d             | frame           res     1         ' USB 1ms frame counter value
35bc0 12d             | frame           res     1         ' USB 1ms frame counter value
35bc0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
35bc0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
35bc0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
35bc0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
35bc0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
35bc0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
35bc0 12d             | crc             res     1         ' Used for CRC16 calculation
35bc0 12d             | crc             res     1         ' Used for CRC16 calculation
35bc0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
35bc0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
35bc0 12d             | retval          res     1         ' Global success/fail return parameter
35bc0 12d             | retval          res     1         ' Global success/fail return parameter
35bc0 12d             | context_retval  res     1         ' Operation contextual return parameter
35bc0 12d             | context_retval  res     1         ' Operation contextual return parameter
35bc0 12d             | ' Device stuff
35bc0 12d             | hdev_id         res     1+MAX_DEVICES
35bc0 12d             | hdev_id         res     1+MAX_DEVICES
35bc0 12d             | hdev_bcd        res     1
35bc0 12d             | hdev_bcd        res     1
35bc0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
35bc0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
35bc0 12d             | ' Keyboard/mouse stuff
35bc0 12d             | hctrl_ep_addr   res     1
35bc0 12d             | hctrl_ep_addr   res     1
35bc0 12d             | hctrl_max_pkt   res     1
35bc0 12d             | hctrl_max_pkt   res     1
35bc0 12d             | hconfig_base    res     1
35bc0 12d             | hconfig_base    res     1
35bc0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
35bc0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
35bc0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
35bc0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
35bc0 12d             | hdev_class      res     1
35bc0 12d             | hdev_class      res     1
35bc0 12d             | hdev_subclass   res     1
35bc0 12d             | hdev_subclass   res     1
35bc0 12d             | hdev_protocol   res     1
35bc0 12d             | hdev_protocol   res     1
35bc0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
35bc0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
35bc0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
35bc0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
35bc0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
35bc0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
35bc0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
35bc0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
35bc0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
35bc0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
35bc0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
35bc0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
35bc0 12d             | if HAVE_MOUSE
35bc0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
35bc0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
35bc0 12d             | end
35bc0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
35bc0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
35bc0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
35bc0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
35bc0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
35bc0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
35bc0 12d             | hdev_out_addr   res     1
35bc0 12d             | hdev_out_addr   res     1
35bc0 12d             | 
35bc0 12d             | if EMUPAD_MAX_PLAYER > 0
35bc0 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
35bc0 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
35bc0 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
35bc0 12d             | end
35bc0 12d             | 
35bc0 12d             | hreg_init_end
35bc0 12d             | 
35bc0 12d             | hidr_start
35bc0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
35bc0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
35bc0 12d             | hidr_flags      res     1
35bc0 12d             | hidr_flags      res     1
35bc0 12d             | hidr_axis       res     3
35bc0 12d             | hidr_axis       res     3
35bc0 12d             | hidr_buttons    res     1
35bc0 12d             | hidr_buttons    res     1
35bc0 12d             | hidr_hats       res     1
35bc0 12d             | hidr_hats       res     1
35bc0 12d             | '' Above are actually useful values, 6 longs
35bc0 12d             | hidr_id         res     1
35bc0 12d             | hidr_id         res     1
35bc0 12d             | hidr_state      res     1
35bc0 12d             | hidr_state      res     1
35bc0 12d             | hidr_size       res     1
35bc0 12d             | hidr_size       res     1
35bc0 12d             | hidr_count      res     1
35bc0 12d             | hidr_count      res     1
35bc0 12d             | hidr_offset     res     1
35bc0 12d             | hidr_offset     res     1
35bc0 12d             | hidr_usage_idx  res     1
35bc0 12d             | hidr_usage_idx  res     1
35bc0 12d             | hidr_lminmax    res     1
35bc0 12d             | hidr_lminmax    res     1
35bc0 12d             | hidr_pminmax    res     1
35bc0 12d             | hidr_pminmax    res     1
35bc0 12d             | hidr_type       res     1
35bc0 12d             | hidr_type       res     1
35bc0 12d             | hidr_end
35bc0 12d             | 
35bc0 12d             | ' Variables dependent on the system freqency
35bc0 12d             | _var_64_lower_  res     1
35bc0 12d             | _var_64_lower_  res     1
35bc0 12d             | _var_64_upper_  res     1
35bc0 12d             | _var_64_upper_  res     1
35bc0 12d             | _12Mbps_        res     1
35bc0 12d             | _12Mbps_        res     1
35bc0 12d             | _1_5Mbps_       res     1
35bc0 12d             | _1_5Mbps_       res     1
35bc0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
35bc0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
35bc0 12d             | _1us_           res     1         ' 1us
35bc0 12d             | _1us_           res     1         ' 1us
35bc0 12d             | _10us_          res     1         ' 10us
35bc0 12d             | _10us_          res     1         ' 10us
35bc0 12d             | _33us_          res     1         ' 33us
35bc0 12d             | _33us_          res     1         ' 33us
35bc0 12d             | _txn_err_       res     1         ' 250us
35bc0 12d             | _txn_err_       res     1         ' 250us
35bc0 12d             | _500us_         res     1         ' 500us
35bc0 12d             | _500us_         res     1         ' 500us
35bc0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
35bc0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
35bc0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
35bc0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
35bc0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
35bc0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
35bc0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
35bc0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
35bc0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
35bc0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
35bc0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
35bc0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
35bc0 12d             | _preamble_wait_ res     1
35bc0 12d             | _preamble_wait_ res     1
35bc0 12d             | _1ms_           res     1         ' 1ms
35bc0 12d             | _1ms_           res     1         ' 1ms
35bc0 12d             | _2ms_           res     1         ' 2ms
35bc0 12d             | _2ms_           res     1         ' 2ms
35bc0 12d             | _suspend_wait_  res     1         ' 3ms
35bc0 12d             | _suspend_wait_  res     1         ' 3ms
35bc0 12d             | _4ms_           res     1         ' 4ms
35bc0 12d             | _4ms_           res     1         ' 4ms
35bc0 12d             | _xfer_wait_     res     1         ' 5ms
35bc0 12d             | _xfer_wait_     res     1         ' 5ms
35bc0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
35bc0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
35bc0 12d             | _reset_hold_    res     1         ' 15ms
35bc0 12d             | _reset_hold_    res     1         ' 15ms
35bc0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
35bc0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
35bc0 12d             | _21ms_          res     1         ' 21ms
35bc0 12d             | _21ms_          res     1         ' 21ms
35bc0 12d             | _100ms_         res     1         ' 100ms
35bc0 12d             | _100ms_         res     1         ' 100ms
35bc0 12d             | _500ms_         res     1         ' 500ms
35bc0 12d             | _500ms_         res     1         ' 500ms
35bc0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
35bc0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
35bc0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
35bc0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
35bc0 12d             | '------------------------------------------------------------------------------
35bc0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
35bc0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
35bc0 12d             | _usb_d_ls_nco_  res     1
35bc0 12d             | _usb_d_ls_nco_  res     1
35bc0 12d             | _usb_h_fs_nco_  res     1
35bc0 12d             | _usb_h_fs_nco_  res     1
35bc0 12d             | _usb_d_fs_nco_  res     1
35bc0 12d             | _usb_d_fs_nco_  res     1
35bc0 12d             | '------------------------------------------------------------------------------
35bc0 12d             | ' Scratch registers
35bc0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
35bc0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
35bc0 12d             | htmp1           res     1
35bc0 12d             | htmp1           res     1
35bc0 12d             | htmp2           res     1
35bc0 12d             | htmp2           res     1
35bc0 12d             | htmp3           res     1
35bc0 12d             | htmp3           res     1
35bc0 12d             | hrep            res     1         ' Repeat count
35bc0 12d             | hrep            res     1         ' Repeat count
35bc0 12d             | hsave0          res     1         ' Subroutine parameter saves
35bc0 12d             | hsave0          res     1         ' Subroutine parameter saves
35bc0 12d             | hsave1          res     1
35bc0 12d             | hsave1          res     1
35bc0 12d             | hsave2          res     1
35bc0 12d             | hsave2          res     1
35bc0 12d             | isrtmp1         res     1
35bc0 12d             | isrtmp1         res     1
35bc0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
35bc0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
35bc0 12d             | hr0             res     1         ' Multi-purpose registers
35bc0 12d             | hr0             res     1         ' Multi-purpose registers
35bc0 12d             | hr1             res     1
35bc0 12d             | hr1             res     1
35bc0 12d             | hr2             res     1
35bc0 12d             | hr2             res     1
35bc0 12d             | hr3             res     1
35bc0 12d             | hr3             res     1
35bc0 12d             | hpar1           res     1         ' Routine entry/exit parameters
35bc0 12d             | hpar1           res     1         ' Routine entry/exit parameters
35bc0 12d             | hpar2           res     1
35bc0 12d             | hpar2           res     1
35bc0 12d             | hpar3           res     1
35bc0 12d             | hpar3           res     1
35bc0 12d             | hct2            res     1         ' Function response bus turn-around timer
35bc0 12d             | hct2            res     1         ' Function response bus turn-around timer
35bc0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
35bc0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
35bc0 12d             | mod_cnt         res     1         ' Used in idle loops
35bc0 12d             | mod_cnt         res     1         ' Used in idle loops
35bc0 12d             |                 fit     $1F0
35bc0 12d             |                 org     $200
35bc0 200             | hlut_start
35bc0 200             | 
35bc0 200             | '------------------------------------------------------------------------------
35bc0 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
35bc0 200             | ' settings to startup defaults.
35bc0 200             | '------------------------------------------------------------------------------
35bc0 200             | ' On entry:
35bc0 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
35bc0 200             | '------------------------------------------------------------------------------
35bc0 200             | set_speed_full
35bc0 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
35bc4 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
35bc8 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
35bcc 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
35bd0 204             | '                ret                             wcz     ' Restore caller flags on exit
35bd0 204             | 
35bd0 204             | '------------------------------------------------------------------------------
35bd0 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
35bd0 204             | ' is a downstream hub connected (not yet implemented), the baud generator
35bd0 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
35bd0 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
35bd0 204             | ' putting the smart pins into reset.
35bd0 204             | '------------------------------------------------------------------------------
35bd0 204             | ' On entry:
35bd0 204             | ' On exit: CZ flags restored to caller states
35bd0 204             | '------------------------------------------------------------------------------
35bd0 204             | set_speed_low
35bd0 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
35bd4 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
35bd8 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
35bdc 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
35be0 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
35be4 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
35be8 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
35bec 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
35bf0 20c             | 
35bf0 20c             | '------------------------------------------------------------------------------
35bf0 20c             | ' Perform configuration stuff required when a device intitially connects.
35bf0 20c             | '------------------------------------------------------------------------------
35bf0 20c             | ' On entry:
35bf0 20c             | ' On exit:
35bf0 20c             | '------------------------------------------------------------------------------
35bf0 20c             | on_connect
35bf0 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
35bf4 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
35bf8 20e             | .retry
35bf8 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
35bfc 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
35c00 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
35c04 211 00 08 00 FF 
35c08 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
35c0c 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
35c10 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35c14 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
35c18 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
35c1c 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
35c20 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35c24 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
35c28 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
35c2c 21b 4C 03 B0 FD |                 call    #poll_waitx
35c30 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
35c34 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
35c38 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
35c3c 21f B8 FF 9F FD |                 jmp     #.retry
35c40 220             | .get_dev_desc
35c40 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
35c44 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
35c48 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
35c4c 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
35c50 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
35c54 225 88 FB BF FD |                 call    #reset
35c58 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
35c5c 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35c60 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
35c64 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
35c68 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35c6c 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
35c70 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
35c74 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
35c78 22e 04 00 00 FF 
35c7c 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
35c80 230 34 FA BF FD |                 call    #calc_crc5
35c84 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
35c88 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35c8c 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
35c90 234 F7 AD C2 FA |                 rdbyte  total_data, pb
35c94 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
35c98 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
35c9c 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35ca0 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
35ca4 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
35ca8 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
35cac 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
35cb0 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
35cb4 23d C4 02 B0 FD |                 call    #poll_waitx
35cb8 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
35cbc 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35cc0 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
35cc4 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
35cc8 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
35ccc 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35cd0 244 2D 00 64 5D |         if_nz   ret
35cd4 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
35cd8 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
35cdc 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
35ce0 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
35ce4 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
35ce8 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
35cec 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
35cf0 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
35cf4 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
35cf8 24e 2C FB 9F CD |         if_b    jmp     #host_error
35cfc 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
35d00 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
35d04 251 2D EC 63 FD |                 call    pa
35d08 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
35d0c 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
35d10 254 2C EC 63 FD |                 jmp     pa
35d14 255             | 
35d14 255             | '------------------------------------------------------------------------------
35d14 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
35d14 255             | ' Status reporting is always in the function-to-host direction.
35d14 255             | '------------------------------------------------------------------------------
35d14 255             | ' On entry:
35d14 255             | '   PTRA - start address of the SETUP data in hub.
35d14 255             | '   PB - start address of the buffer/struct to be written to during the IN data
35d14 255             | '     stage.
35d14 255             | '   ep_addr_pid - device address, endpoint and CRC5.
35d14 255             | ' On exit:
35d14 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
35d14 255             | '     contains the count of data stage bytes actually received, which must
35d14 255             | '     always be <= the count requested.
35d14 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
35d14 255             | '     more specific USB operation error code.
35d14 255             | '------------------------------------------------------------------------------
35d14 255             | control_read
35d14 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
35d18 256 F8 8F 03 F6 |                 mov     hpar2, ptra
35d1c 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
35d20 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
35d24 259             | .xfer_start
35d24 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
35d28 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
35d2c 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35d30 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
35d34 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
35d38 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
35d3c 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
35d40 260 61 00 00 FF 
35d44 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
35d48 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
35d4c 263             | .data
35d4c 263 56 B1 02 F6 |                 mov     pkt_data, total_data
35d50 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
35d54 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
35d58 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
35d5c 267             | .nak_retry
35d5c 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
35d60 268             | .in_retry
35d60 268 BC F6 BF FD |                 call    #txn_in
35d64 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
35d68 26a 28 00 90 AD |         if_z    jmp     #.commit
35d6c 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
35d70 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
35d74 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
35d78 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
35d7c 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
35d80 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
35d84 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
35d88 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35d8c 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
35d90 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
35d94 275             | .commit
35d94 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
35d98 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
35d9c 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
35da0 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
35da4 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
35da8 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
35dac 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
35db0 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
35db4 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
35db8 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
35dbc 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
35dc0 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
35dc4 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
35dc8 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
35dcc 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
35dd0 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
35dd4 285             | .pre_status
35dd4 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
35dd8 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
35ddc 287 00 B0 06 F6 |                 mov     pkt_data, #0
35de0 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
35de4 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
35de8 28a 61 00 00 FF 
35dec 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
35df0 28c             | .out_retry
35df0 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
35df4 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35df8 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
35dfc 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
35e00 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
35e04 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
35e08 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
35e0c 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
35e10 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35e14 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
35e18 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
35e1c 297             | ' I've encountered transfer STALL, even though the data looks correct, and
35e1c 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
35e1c 297             | ' ControlRead() transfer gets things unstuck most of the time...
35e1c 297             | .xfer_retry
35e1c 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
35e20 298 58 01 B0 FD |                 call    #poll_waitx
35e24 299 8C F9 BF FD |                 call    #wait_txn_ok
35e28 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
35e2c 29b C7 F1 03 F6 |                 mov     ptra, hpar2
35e30 29c C8 EF 03 F6 |                 mov     pb, hpar3
35e34 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
35e38 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
35e3c 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
35e40 2a0             | 
35e40 2a0             | '------------------------------------------------------------------------------
35e40 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
35e40 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
35e40 2a0             | ' the SETUP data struct is filled with the required values.
35e40 2a0             | '------------------------------------------------------------------------------
35e40 2a0             | ' On entry:
35e40 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
35e40 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
35e40 2a0             | '     stage.
35e40 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
35e40 2a0             | ' On exit:
35e40 2a0             | '   retval - used to convey the success/failure of each stage.
35e40 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
35e40 2a0             | '     more specific USB operation error code.
35e40 2a0             | '------------------------------------------------------------------------------
35e40 2a0             | control_write
35e40 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
35e44 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
35e48 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
35e4c 2a3             | 
35e4c 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
35e50 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
35e54 2a5 F7 91 03 F6 |                 mov     hpar3, pb
35e58 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
35e5c 2a7             | .xfer_start
35e5c 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
35e60 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
35e64 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
35e68 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35e6c 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
35e70 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
35e74 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
35e78 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
35e7c 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
35e80 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
35e84 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
35e88 2b2             | .data
35e88 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
35e8c 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
35e90 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
35e94 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
35e98 2b6             | .out_retry
35e98 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
35e9c 2b7 88 F6 BF FD |                 call    #txn_out
35ea0 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35ea4 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
35ea8 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
35eac 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
35eb0 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
35eb4 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
35eb8 2be             | .commit
35eb8 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
35ebc 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
35ec0 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
35ec4 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
35ec8 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
35ecc 2c3             | pre_status_in
35ecc 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
35ed0 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
35ed4 2c5             | .status_retry
35ed4 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
35ed8 2c6 44 F5 BF FD |                 call    #txn_in
35edc 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
35ee0 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
35ee4 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
35ee8 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
35eec 2cb 2D 00 64 AD |         if_z    ret
35ef0 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
35ef4 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35ef8 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
35efc 2cf             | '               ret                                     ' Caller must handle transfer retirement
35efc 2cf             | 
35efc 2cf             | '------------------------------------------------------------------------------
35efc 2cf             | ' Execute an IN interrupt transaction.
35efc 2cf             | '------------------------------------------------------------------------------
35efc 2cf             | ' On entry:
35efc 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
35efc 2cf             | '   hpar2 - Address of the IN data buffer
35efc 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
35efc 2cf             | ' On exit:
35efc 2cf             | '   retval - the result of the operation.
35efc 2cf             | '   hpar3 - the count of IN data bytes actually received.
35efc 2cf             | '------------------------------------------------------------------------------
35efc 2cf             | do_int_in
35efc 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
35f00 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
35f04 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
35f08 2d2             | 
35f08 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
35f0c 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
35f10 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
35f14 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
35f18 2d6             | .retry
35f18 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
35f1c 2d7 00 F5 BF FD |                 call    #txn_in
35f20 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
35f24 2d9 1C 00 90 AD |         if_z    jmp     #.commit
35f28 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
35f2c 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
35f30 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
35f34 2dd 54 00 B0 FD |                 call    #retry_wait
35f38 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35f3c 2df 18 00 90 AD |         if_z    jmp     #.post_ret
35f40 2e0 D4 FF 9F FD |                 jmp     #.retry
35f44 2e1             | .commit
35f44 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
35f48 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
35f4c 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
35f50 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
35f54 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
35f58 2e6             | .post_ret
35f58 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
35f5c 2e7             | 
35f5c 2e7             | 
35f5c 2e7             | '------------------------------------------------------------------------------
35f5c 2e7             | ' Resets the downstream hub port to FS
35f5c 2e7             | '------------------------------------------------------------------------------
35f5c 2e7             | dwnstream_reset
35f5c 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
35f60 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
35f64 2e9             | 
35f64 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
35f68 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
35f6c 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
35f70 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
35f74 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
35f78 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
35f7c 2ef             | 
35f7c 2ef             | '------------------------------------------------------------------------------
35f7c 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
35f7c 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
35f7c 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
35f7c 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
35f7c 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
35f7c 2ef             | '------------------------------------------------------------------------------
35f7c 2ef             | ' On entry:
35f7c 2ef             | '   hctwait - wait interval in sysclocks.
35f7c 2ef             | ' On exit:
35f7c 2ef             | '------------------------------------------------------------------------------
35f7c 2ef             | poll_waitx
35f7c 2ef 1A 92 63 FD |                 getct   hct2
35f80 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
35f84 2f1             | .wait
35f84 2f1 FF 25 CC FB |                 jnct2   #.wait
35f88 2f2 2D 00 64 FD |                 ret
35f8c 2f3             | 
35f8c 2f3             | '------------------------------------------------------------------------------
35f8c 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
35f8c 2f3             | '------------------------------------------------------------------------------
35f8c 2f3             | ' On entry:
35f8c 2f3             | '   retval - transaction response PID or error code.
35f8c 2f3             | ' On exit:
35f8c 2f3             | '------------------------------------------------------------------------------
35f8c 2f3             | retry_wait
35f8c 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
35f90 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
35f94 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
35f98 2f6 14 00 90 AD |         if_z    jmp     #.nak
35f9c 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
35fa0 2f8 D8 FF BF FD |                 call    #poll_waitx
35fa4 2f9             | .dec
35fa4 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
35fa8 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
35fac 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
35fb0 2fc             | .nak
35fb0 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
35fb4 2fd C4 FF BF FD |                 call    #poll_waitx
35fb8 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
35fbc 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
35fc0 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
35fc4 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
35fc8 302 2D 00 64 FD |                 ret
35fcc 303             | 
35fcc 303             | host_reset
35fcc 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
35fd0 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
35fd4 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
35fd4 305 BD 01 05 FF 
35fd8 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
35fdc 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
35fe0 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
35fe4 309             | ' Check to see if the system clock has been changed.
35fe4 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
35fe8 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
35fec 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
35ff0 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
35ff4 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
35ff8 30e 40 46 62 FD |                 dirl    dp
35ffc 30f             | 
35ffc 30f 28 02 64 FD |                 setq    #1
36000 310 80 00 80 FF 
36004 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
36008 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3600c 313             | .enable
3600c 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
36010 314 41 46 62 FD |                 dirh    dp
36014 315 1F 36 63 FD |                 waitx   _1us_
36018 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3601c 317             | 
3601c 317             |                 ' Handle Port protection enable and startup delay
3601c 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
36020 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
36024 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
36028 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3602c 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
36030 31c             | 
36030 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
36034 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
36038 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3603c 31f 00 00 04 F6 |                 mov     0-0, #0
36040 320             | .regloop
36040 320             | 
36040 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
36040 320             | 
36040 320             | discon_entry
36040 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
36044 321             | 
36044 321             |               
36044 321             |         if HAVE_HIDPAD
36044 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
36048 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3604c 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
36050 324 F7 01 68 FC |                 wrlong  #0,pb
36054 325             |         end
36054 325             |         if EMUPAD_MAX_PLAYER > 0
36054 325             |         end
36054 325             | 
36054 325             |                 ' Fall through to disconnected loop
36054 325             | 
36054 325             | '-----------------------------------------------------------------------------------------------------------------
36054 325             | ' Device connect handling (Section 7.1.7.3).
36054 325             | '-----------------------------------------------------------------------------------------------------------------
36054 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
36054 325             | ' device to connect (Section 7.1.7.3).
36054 325             | '-----------------------------------------------------------------------------------------------------------------
36054 325             | disconnected
36054 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
36058 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3605c 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
36060 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
36064 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
36068 32a             |         if ACTIVITY_LED >= 0
36068 32a             |         end
36068 32a 22 A7 82 FA |                 rqpin   urx, dm
3606c 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
36070 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
36074 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
36078 32e             | .se1_test
36078 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3607c 32f FC FE BF FD |                 call    #poll_waitx
36080 330 22 A7 82 FA |                 rqpin   urx, dm
36084 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
36088 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3608c 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
36090 334             | .se1            'SE1 is a fatal error condition
36090 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
36094 335 E4 FE BF FD |                 call    #poll_waitx
36098 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3609c 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
360a0 338             | .connect_test                                           ' Test lines until stable J/K state seen
360a0 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
360a4 339 22 A7 82 FA |                 rqpin   urx, dm
360a8 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
360ac 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
360b0 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
360b4 33d             | connected
360b4 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
360b8 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
360bc 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
360c0 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
360c4 341             | .set_pulse
360c4 341 1A 64 63 FD |                 getct   _pulse_time_
360c8 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
360cc 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
360cc 343             | ' of 1ms and make a correction, if necessary.
360cc 343             | '                mov     htmp, _1ms_
360cc 343             | '                subs    htmp, iframe_delta
360cc 343             | '                adds    _frame1ms_clks_, htmp
360cc 343             | '                debug(udec(_frame1ms_clks_))
360cc 343             | 
360cc 343             |                 ' Fall through to idle/processing loop
360cc 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
360d0 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
360d4 345             | 
360d4 345             | hidle
360d4 345 22 A7 82 FA |                 rqpin   urx, dm
360d8 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
360dc 347 98 00 90 CD |         if_c    jmp     #.se0_test
360e0 348 24 06 70 FD |                 pollct3                         wc
360e4 349 68 00 90 3D |         if_nc   jmp     #.nopoll
360e8 34a 1A 94 63 FD |                 getct   hct3
360ec 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
360f0 34c             | 
360f0 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
360f4 34d 00 70 E3 F8 |                 getbyte htmp
360f8 34e             | 
360f8 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
360fc 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
36100 350 40 00 90 AD |         if_z    jmp     #.poll
36104 351             | 
36104 351             |         if _HAVE_GAMEPAD
36104 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
36108 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3610c 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
36110 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
36114 355 2C 00 90 AD |         if_z    jmp     #.poll
36118 356             |         end
36118 356             | 
36118 356             |         if HAVE_MOUSE
36118 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3611c 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
36120 358 20 00 90 AD |         if_z    jmp     #.poll
36124 359             |         end
36124 359             | 
36124 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
36128 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3612c 35b 14 00 90 AD |         if_z    jmp     #.poll
36130 35c             | 
36130 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
36134 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
36138 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3613c 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
36140 360             |         if HAVE_MOUSE
36140 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
36144 361             |         else
36144 361             |         end
36144 361             | 
36144 361             | .poll
36144 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
36148 362 2D EC 63 FD |                 call    pa
3614c 363             | .skip_poll
3614c 363             | 
3614c 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
36150 364             | 
36150 364             | .nopoll
36150 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
36154 365 44 00 90 AD |         if_z    jmp     #hsuspend
36158 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3615c 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
36160 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
36164 369 1A 84 63 FD |                 getct   hr0
36168 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3616c 36b             |         if ACTIVITY_LED >= 0
3616c 36b             |         end
3616c 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
36170 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
36174 36d 5C FF 9F FD |                 jmp     #hidle
36178 36e             | ' Check for extended SE0 state on the bus
36178 36e             | .se0_test
36178 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3617c 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
36180 370 22 A7 82 FA |                 rqpin   urx, dm
36184 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
36188 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3618c 373 24 F6 BF FD |                 call    #wait_txn_ok
36190 374 00 00 80 FF 
36194 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
36198 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
36198 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3619c 377             | 
3619c 377             | hsuspend
3619c 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
361a0 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
361a4 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
361a8 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
361ac 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
361b0 37c 00 96 07 F6 |                 mov     mod_cnt, #0
361b4 37d             | 
361b4 37d             |                 ' Fall through to resume wait loop
361b4 37d             | 
361b4 37d             | hwait_resume
361b4 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
361b8 37e 02 86 47 F0 |                 shr     hr1, #2
361bc 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
361c0 380             |         if ACTIVITY_LED >= 0
361c0 380             |         end
361c0 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
361c4 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
361c8 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
361cc 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
361d0 384 18 00 90 AD |         if_z    jmp     #.resume
361d4 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
361d8 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
361dc 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
361e0 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
361e4 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
361e8 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
361ec 38b             | .resume
361ec 38b 22 05 28 FC |                 wypin   #OUT_K, dm
361f0 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
361f4 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
361f8 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
361fc 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
36200 390 1F 70 63 FD |                 waitx   htmp
36204 391 22 07 28 FC |                 wypin   #OUT_J, dm
36208 392 01 70 47 F0 |                 shr     htmp, #1
3620c 393 1F 70 63 FD |                 waitx   htmp
36210 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
36214 395 1A 92 62 FD |                 getct   iframe_ct_base
36218 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3621c 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
36220 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
36224 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
36228 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3622c 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
36230 39c             | 
36230 39c             | '------------------------------------------------------------------------------
36230 39c             | ' Send preamble to enable low-speed HUB ports
36230 39c             | '------------------------------------------------------------------------------
36230 39c             | ' On entry:
36230 39c             | ' On exit:
36230 39c             | '   USB baud rate set to low-speed
36230 39c             | '------------------------------------------------------------------------------
36230 39c             | utx_pre
36230 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
36234 39d 40 46 62 FD |                 dirl    dp
36238 39e 28 02 64 FD |                 setq    #1
3623c 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
36240 3a0 58 44 62 FD |                 drvl    dm
36244 3a1 59 46 62 FD |                 drvh    dp
36248 3a2             | 
36248 3a2 1E 00 00 FF 
3624c 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
36250 3a4             | 
36250 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
36254 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
36258 3a6 28 02 64 3D |         if_nc   setq    #1
3625c 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
36260 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
36264 3a9             | .l1
36264 3a9             | 
36264 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
36268 3aa 40 46 62 FD |                 dirl    dp
3626c 3ab 28 02 64 FD |                 setq    #1
36270 3ac 80 00 80 FF 
36274 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
36278 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3627c 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
36280 3b0 41 46 62 FD |                 dirh    dp
36284 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
36288 3b2             | 
36288 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3628c 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
36290 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
36294 3b5             | 
36294 3b5             | hlut_end
36294 3b5             |                 fit     $400
36294 3b5             |                 orgh
36294                 | if OVERLAP_MEMORY
36294                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
36294                 | end
36294                 | '------------------------------------------------------------------------------
36294                 | ' Routines called from cog space.
36294                 | '------------------------------------------------------------------------------
36294                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
36294                 | '------------------------------------------------------------------------------
36294                 | 
36294                 | '------------------------------------------------------------------------------
36294                 | ' USB host cog initialization.
36294                 | '------------------------------------------------------------------------------
36294                 | usb_host_init
36294                 |                 ' Initialize buffer pointers
36294                 |         if OVERLAP_MEMORY
36294                 |         else
36294     40 15 B0 FE |                 loc     pb, #hid_descr
36298                 |         end
36298     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3629c                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3629c                 |                 {
3629c                 |                 }
3629c                 |         
3629c                 |                 {
3629c                 |                 }
3629c                 |                 'loc     pb,#hkbd_report
3629c                 |                 'mov     hkbd_report_p,pb
3629c                 | 
3629c     08 1D B0 FE |                 loc     pb, #hub_descr
362a0     F7 4D 02 F6 |                 mov     hub_descr_p, pb
362a4     1D 1D B0 FE |                 loc     pb, #urx_buff
362a8     F7 4F 02 F6 |                 mov     urx_buff_p, pb
362ac     95 1D B0 FE |                 loc     pb, #dev_desc_buff
362b0     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
362b4     9F 1D B0 FE |                 loc     pb, #con_desc_buff
362b8     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
362bc     18 15 B0 FE |                 loc     pb, #usb_cache_start
362c0     F7 55 02 F6 |                 mov     cache_start_p, pb
362c4     E9 1C B0 FE |                 loc     pb, #usb_cache_end
362c8     F7 57 02 F6 |                 mov     cache_end_p, pb
362cc                 | 
362cc                 |         if ERROR_LED >= 0
362cc                 |         end
362cc                 | 
362cc                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
362cc                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
362cc                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
362cc                 | ' Configure and enable the Serial Host USB port.
362cc     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
362d0                 | 
362d0                 | '------------------------------------------------------------------------------
362d0                 | ' Timing calculations happen before any interrupt(s) are enabled.
362d0                 | '------------------------------------------------------------------------------
362d0                 | ' On entry:
362d0                 | '   htmp - current CLKFREQ value.
362d0                 | '------------------------------------------------------------------------------
362d0                 | hinit_usb_timings
362d0                 | '                getct   htmp2
362d0     B8 59 02 F6 |                 mov     save_sysclk, htmp
362d4     8D 5B 80 FF 
362d8     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
362dc     18 30 63 FD |                 getqx   _12Mbps_
362e0     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
362e4     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
362e8     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
362ec     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
362f0     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
362f4     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
362f8     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
362fc     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
36300     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
36304     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
36308     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3630c     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
36310     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
36314     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
36318     80 00 00 FF 
3631c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
36320     18 2C 63 FD |                 getqx   _var_64_lower_
36324     19 2E 63 FD |                 getqy   _var_64_upper_
36328     28 2C 63 FD |                 setq    _var_64_lower_
3632c     65 CD 1D FF 
36330     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
36334     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
36338     01 00 00 FF 
3633c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
36340     18 2C 63 FD |                 getqx   _var_64_lower_
36344     19 2E 63 FD |                 getqy   _var_64_upper_
36348     28 2C 63 FD |                 setq    _var_64_lower_
3634c     A1 07 00 FF 
36350     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
36354     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
36358     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3635c     09 36 57 F0 |                 shr     _1us_, #9               wc
36360     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
36364     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
36368     18 38 63 FD |                 getqx   _10us_
3636c     09 38 57 F0 |                 shr     _10us_, #9              wc
36370     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
36374     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
36378     18 3A 63 FD |                 getqx   _33us_
3637c     09 3A 57 F0 |                 shr     _33us_, #9              wc
36380     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
36384     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
36388     18 3C 63 FD |                 getqx   _txn_err_
3638c     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
36390     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
36394     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
36398     18 3E 63 FD |                 getqx   _500us_
3639c     09 3E 57 F0 |                 shr     _500us_, #9             wc
363a0     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
363a4     01 00 00 FF 
363a8     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
363ac     18 40 63 FD |                 getqx   _txn_ok_ls_
363b0     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
363b4     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
363b8     01 00 00 FF 
363bc     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
363c0     18 42 63 FD |                 getqx   _txn_ok_fs_
363c4     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
363c8     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
363cc     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
363d0     05 00 00 FF 
363d4     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
363d8     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
363dc     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
363e0     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
363e4     1C 00 00 FF 
363e8     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
363ec     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
363f0     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
363f4     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
363f8     00 00 00 FF 
363fc     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
36400     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
36404     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
36408     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3640c     04 00 00 FF 
36410     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
36414     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
36418     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3641c     8D 5B 00 FF 
36420     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
36424     18 4C 63 FD |                 getqx   _preamble_wait_
36428     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3642c     01 00 00 FF 
36430     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
36434     18 2C 63 FD |                 getqx   _var_64_lower_
36438     19 2E 63 FD |                 getqy   _var_64_upper_
3643c     28 2C 63 FD |                 setq    _var_64_lower_
36440     01 00 00 FF 
36444     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
36448     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3644c     09 4E 57 F0 |                 shr     _1ms_, #9               wc
36450     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
36454     FF FF 7F FF 
36458     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3645c     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
36460     A7 51 03 F6 |                 mov     _2ms_, _1ms_
36464     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
36468     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3646c     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
36470     A7 55 03 F6 |                 mov     _4ms_, _1ms_
36474     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
36478     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3647c     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
36480     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
36484     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
36488     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3648c     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
36490     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
36494     A7 59 03 F6 |                 mov     _8ms_, _1ms_
36498     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3649c     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
364a0     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
364a4     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
364a8     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
364ac     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
364b0     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
364b4     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
364b8     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
364bc     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
364c0     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
364c4                 | '        _ret_   mov     _1sec_, save_sysclk
364c4                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
364c4                 | '                ret
364c4                 | {
364c4                 | }
364c4                 | 
364c4                 | '------------------------------------------------------------------------------
364c4                 | ' Parse a configuration descriptor chain to see if the device is a recognized
364c4                 | ' one. If it is, start the task progression that will configure the device for
364c4                 | ' use.
364c4                 | '------------------------------------------------------------------------------
364c4                 | ' On entry:
364c4                 | '   hconfig_base - start address of the cached config descriptor chain.
364c4                 | ' On exit:
364c4                 | '------------------------------------------------------------------------------
364c4                 | hparse_con_desc
364c4     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
364c8     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
364cc     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
364d0     4E 70 FF F9 |                 movbyts htmp,#%%1032
364d4     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
364d8                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
364d8                 | 
364d8     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
364dc     6E ED 03 F1 |                 add     pa, hconfig_base
364e0     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
364e4                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
364e4                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
364e4                 | ' that defines a keyboard and/or mouse.
364e4     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
364e8                 | .next_intf
364e8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
364ec     BC 01 90 3D |         if_ae   jmp     #hset_config
364f0     6E F3 03 F6 |                 mov     ptrb, hconfig_base
364f4     75 F3 03 F1 |                 add     ptrb, hnext_desc
364f8     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
364fc     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
36500     0C 00 90 AD |         if_z    jmp     #.intf
36504     80 71 C7 FA |                 rdbyte  htmp, ptrb
36508     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3650c     D8 FF 9F FD |                 jmp     #.next_intf
36510                 | .intf
36510     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
36514     00 90 07 F6 |                 mov     hpar3, #0
36518     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3651c     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
36520     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
36524     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
36528                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
36528                 | 
36528                 | .endp
36528     80 71 C7 FA |                 rdbyte  htmp, ptrb
3652c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
36530     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
36534     78 00 90 3D |         if_ae   jmp     #.get_device
36538     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3653c     75 F3 03 F1 |                 add     ptrb, hnext_desc
36540     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
36544     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
36548     64 00 90 AD |         if_z    jmp     #.get_device
3654c     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
36550     04 00 90 AD |         if_z    jmp     #.get_ep
36554     D0 FF 9F FD |                 jmp     #.endp
36558                 | .get_ep
36558     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3655c     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
36560     0F 86 67 F0 |                 shl     hr1, #8 + 7
36564     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
36568     3F 00 00 FF 
3656c     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
36570     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
36574     00 8E 0F F2 |                 cmp     hpar2, #0               wz
36578     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3657c     00 90 0F F2 |                 cmp     hpar3, #0               wz
36580     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
36584     A0 FF 9F FD |                 jmp     #.endp
36588                 | .in_ep
36588     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3658c     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
36590                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
36590     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
36594     C2 89 DB F8 |                 setbyte hr2, hr0, #3
36598     8C FF 9F FD |                 jmp     #.endp
3659c                 | .out_ep
3659c     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
365a0     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
365a4                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
365a4     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
365a8     C2 8B DB F8 |                 setbyte hr3, hr0, #3
365ac     78 FF 9F FD |                 jmp     #.endp
365b0                 | 
365b0                 | .get_device
365b0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
365b4     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
365b8     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
365bc     68 00 90 AD |         if_z    jmp     #.gamepad
365c0     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
365c4     AC 00 90 AD |         if_z    jmp     #.hub
365c8     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
365cc     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
365d0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
365d4     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
365d8     4C 00 90 AD |         if_z    jmp     #.gamepad
365dc     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
365e0     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
365e4                 | .keyboard
365e4     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
365e8                 |         if HAVE_MOUSE
365e8     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
365ec                 |         else
365ec                 |         end
365ec     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
365f0     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
365f4     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
365f8     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
365fc     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
36600     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
36604                 |                 'debug(udec(kb_intf_num))
36604                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
36604     E0 FE 9F FD |                 jmp     #.next_intf
36608                 | if HAVE_MOUSE
36608                 | .mouse
36608     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3660c     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
36610     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
36614     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
36618     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3661c                 |                 'getbyte ms_interval, hr2, #3
3661c     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
36620     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
36624                 |                 'debug(udec(kb_intf_num))
36624                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
36624     C0 FE 9F FD |                 jmp     #.next_intf
36628                 | end
36628                 | .gamepad
36628     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3662c     C7 71 63 F5 |                 xor     htmp, hpar2
36630     3F 00 00 FF 
36634     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36638     AC FE 9F AD |         if_z    jmp     #.next_intf
3663c                 |         if HAVE_MOUSE
3663c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
36640     C7 71 63 F5 |                 xor     htmp, hpar2
36644     3F 00 00 FF 
36648     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3664c     98 FE 9F AD |         if_z    jmp     #.next_intf
36650                 |         end
36650     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
36654     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
36658     8C FE 9F 5D |         if_nz   jmp     #.next_intf
3665c                 | 
3665c     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
36660     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
36664     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
36668     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3666c     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
36670                 |                 'debug(udec(gp_intf_num))
36670                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
36670     74 FE 9F FD |                 jmp     #.next_intf
36674                 | .hub
36674     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
36678     6C FE 9F 5D |         if_nz   jmp     #.next_intf
3667c     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
36680     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
36684     60 FE 9F 5D |         if_nz   jmp     #.next_intf
36688     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3668c     58 FE 9F 5D |         if_nz   jmp     #.next_intf
36690     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
36694     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
36698     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3669c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
366a0     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
366a4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
366a8                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
366a8     3C FE 9F FD |                 jmp     #.next_intf
366ac                 | 
366ac                 | '------------------------------------------------------------------------------
366ac                 | ' If a newly-connected device is recognized, do whatever is needed to configure
366ac                 | ' it according to its function, or functions. In the case of this boot protocol
366ac                 | ' keyboard/mouse class driver:
366ac                 | ' - SetConfiguration(config_num)
366ac                 | ' - SetProtocol(boot)
366ac                 | ' - SetIdle(indefinite)
366ac                 | ' - Enter the device interrupt IN polling task stage.
366ac                 | '------------------------------------------------------------------------------
366ac                 | ' On entry:
366ac                 | ' On exit:
366ac                 | '------------------------------------------------------------------------------
366ac                 | hset_config
366ac                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
366ac                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
366ac     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
366b0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
366b4     00 00 0C F2 |                 cmp     0-0, #0                 wz
366b8     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
366bc                 |         if HAVE_MOUSE
366bc     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
366c0                 |         end
366c0     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
366c4     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
366c8                 | .set_config
366c8     6C 0E D0 FE |                 loc     ptra, #set_config
366cc     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
366d0     6E ED 03 F1 |                 add     pa, hconfig_base
366d4     F6 8D C3 FA |                 rdbyte  hpar1, pa
366d8     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
366dc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
366e0     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
366e4     A0 02 A0 FD |                 call    #control_write
366e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
366ec     2D 00 64 5D |         if_nz   ret
366f0                 | .kbd_config
366f0     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
366f4     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
366f8                 | 
366f8     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
366fc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
36700     3F 00 00 FF 
36704     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36708     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3670c                 | 
3670c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
36710     34 0E D0 FE |                 loc     ptra, #set_protocol
36714     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
36718     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3671c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
36720     A0 02 A0 FD |                 call    #control_write
36724     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36728     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3672c     E4 02 90 5D |         if_nz   jmp     #.notify_client
36730     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
36734     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
36738     30 03 B0 FD |                 call    #hset_idle
3673c                 |                 'cmp     retval, #PID_ACK        wz
3673c                 |         'if_nz   mov     hkbd_ep_addr, #0
3673c                 |         'if_nz   jmp     #.notify_client
3673c     A8 99 02 F6 |                 mov     hctwait, _2ms_
36740     EF 02 A0 FD |                 call    #poll_waitx
36744     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
36748     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3674c     90 17 90 FE |                 loc     pa, #hkbd_led_rep
36750     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
36754     2C 03 B0 FD |                 call    #hset_kbdled_report
36758     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3675c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
36760     B0 02 90 5D |         if_nz   jmp     #.notify_client
36764     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
36768     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3676c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36770     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
36774     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
36778     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3677c     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
36780     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
36784     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
36788     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3678c     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
36790                 |         if !!HAVE_MOUSE
36790                 |         end
36790                 | 
36790                 | .mouse_config
36790                 | if HAVE_MOUSE
36790     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
36794     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
36798     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3679c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
367a0     3F 00 00 FF 
367a4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
367a8     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
367ac                 | 
367ac                 |                 debug("mouse passed addr check")
367ac                 | 
367ac     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
367b0     00 00 80 FF 
367b4     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
367b8     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
367bc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
367c0     55 02 A0 FD |                 call    #control_read
367c4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
367c8     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
367cc     44 02 90 5D |         if_nz   jmp     #.notify_client
367d0     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
367d4     56 01 00 F6 |                 mov     0-0, total_data
367d8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
367dc                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
367dc                 | 
367dc     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
367e0     64 0D D0 FE |                 loc     ptra, #set_protocol
367e4     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
367e8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
367ec     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
367f0     A0 02 A0 FD |                 call    #control_write
367f4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
367f8     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
367fc     14 02 90 5D |         if_nz   jmp     #.notify_client
36800                 |                 debug("mouse passed SetProtocol")
36800     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
36804     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
36808     60 02 B0 FD |                 call    #hset_idle
3680c                 |                 'cmp     retval, #PID_ACK        wz
3680c                 |         'if_nz   mov     hmouse_ep_addr, #0
3680c                 |         'if_nz   jmp     #.notify_client
3680c                 |                 debug("mouse passed SetIdle")
3680c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
36810     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36814     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36818     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3681c     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
36820     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
36824     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
36828     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3682c     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
36830     3F 00 00 FF 
36834     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
36838     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3683c     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
36840     D0 01 90 FD |                 jmp     #.notify_client
36844                 | end
36844                 | .gamepad_config
36844                 | if _HAVE_GAMEPAD
36844     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
36848     00 00 0C F2 |                 cmp     0-0, #0                 wz
3684c     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
36850     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
36854     00 70 03 F6 |                 mov     htmp, 0-0
36858     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3685c     3F 00 00 FF 
36860     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36864     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
36868                 | 
36868     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3686c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
36870     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36874     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36878     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3687c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
36880     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
36884     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
36888     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3688c     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36890     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36894     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
36898     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3689c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
368a0                 | 
368a0                 |                 if EMUPAD_MAX_PLAYER > 0
368a0                 |                 
368a0                 | .rule_loop           
368a0                 |                 end
368a0                 | 
368a0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
368a4     5C 00 90 AD |         if_e    jmp     #.xinput
368a8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
368ac     00 70 03 F6 |                 mov     htmp,0-0
368b0     01 A6 02 FF 
368b4     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
368b8     7C 00 90 AD |         if_e    jmp     #.ps3
368bc                 | 
368bc     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
368c0     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
368c4     00 00 80 5F 
368c8     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
368cc     03 00 80 AF 
368d0     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
368d4     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
368d8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
368dc     55 02 A0 FD |                 call    #control_read
368e0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
368e4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
368e8     00 00 04 56 |         if_nz   mov     0-0, #0
368ec     24 01 90 5D |         if_nz   jmp     #.notify_client
368f0     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
368f4     56 01 00 F6 |                 mov     0-0, total_data
368f8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
368fc                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
368fc                 | 
368fc     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
36900     10 01 90 FD |                 jmp     #.notify_client
36904                 | .xinput
36904     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
36908     2D EF 03 F6 |                 mov     pb,hdev_port
3690c     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
36910     03 EE 27 F3 |                 fle     pb,#3
36914     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
36918     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3691c                 | 
3691c     03 B0 06 F6 |                 mov     pkt_data, #3
36920     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
36924     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
36928     5A 00 A0 FD |                 call    #txn_out
3692c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
36930                 | 
36930     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
36934     DC 00 90 FD |                 jmp     #.notify_client
36938                 | .ps3
36938     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3693c     2D EF 03 F6 |                 mov     pb,hdev_port
36940     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
36944     04 EE 27 F3 |                 fle     pb,#4
36948     F7 EF C3 F9 |                 decod   pb
3694c     09 EF 47 FC |                 wrbyte  pb, ptra[9]
36950                 | 
36950     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
36954     00 0C D0 FE |                 loc     ptra, #set_report
36958     01 00 80 FF 
3695c     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
36960     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36964     03 61 5C FC |                 wrword  #48, ptra[wLength]
36968     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3696c     A0 02 A0 FD |                 call    #control_write
36970                 | 
36970     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
36974     E0 0B D0 FE |                 loc     ptra, #set_report
36978     01 00 80 FF 
3697c     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
36980     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36984     03 09 5C FC |                 wrword  #4, ptra[wLength]
36988     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3698c     A0 02 A0 FD |                 call    #control_write
36990     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
36994     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
36998     00 00 04 56 |         if_nz   mov     0-0, #0
3699c     74 00 90 5D |         if_nz   jmp     #.notify_client
369a0                 | 
369a0     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
369a4     6C 00 90 FD |                 jmp     #.notify_client
369a8                 | end
369a8                 | 
369a8                 | .hub_config
369a8     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
369ac     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
369b0     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
369b4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
369b8     3F 00 00 FF 
369bc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
369c0     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
369c4                 | 
369c4     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
369c8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
369cc     26 EF 03 F6 |                 mov     pb, hub_descr_p
369d0     55 02 A0 FD |                 call    #control_read
369d4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
369d8     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
369dc     34 00 90 5D |         if_nz   jmp     #.notify_client
369e0                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
369e0                 | 
369e0     26 F1 03 F6 |                 mov     ptra, hub_descr_p
369e4     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
369e8     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
369ec                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
369ec                 | .pwr_loop
369ec     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
369f0     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
369f4     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
369f8     A0 02 A0 FD |                 call    #control_write
369fc     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
36a00                 | 
36a00     B1 99 02 F6 |                 mov     hctwait, _500ms_
36a04     B0 99 02 F1 |                 add     hctwait, _100ms_
36a08     EF 02 A0 FD |                 call    #poll_waitx
36a0c                 | 
36a0c     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
36a10     00 00 90 FD |                 jmp     #.notify_client
36a14                 | 
36a14                 | .notify_client
36a14     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
36a18     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
36a1c                 |                 debug(uhex_long(hdev_type,hdev_type+1))
36a1c                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
36a1c     2D 00 64 FD |                 ret
36a20                 | 
36a20                 | '------------------------------------------------------------------------------
36a20                 | ' Initialize the keyboard/mouse data area to start-up values.
36a20                 | '------------------------------------------------------------------------------
36a20                 | ' On entry:
36a20                 | ' On exit:
36a20                 | '------------------------------------------------------------------------------
36a20                 | init_kbdm_data
36a20     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
36a24     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
36a28                 | 
36a28     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
36a2c     2B ED 03 F6 |                 mov     pa, cache_end_p
36a30                 | .loop
36a30     61 01 4C FC |                 wrbyte  #0, ptra++
36a34     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
36a38     F4 FF 9F CD |         if_b    jmp     #.loop
36a3c                 |         
36a3c                 |         if EMUPAD_MAX_PLAYER > 0
36a3c                 |         end
36a3c                 | 
36a3c                 | 
36a3c     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
36a40                 | .regloop
36a40     00 EC 8F F9 |                 altd    pa
36a44     00 00 04 F6 |                 mov     0-0, #0
36a48     01 EC 07 F1 |                 add     pa, #1
36a4c     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
36a50     EC FF 9F 5D |         if_nz   jmp     #.regloop
36a54                 | 
36a54     E1 E1 61 FF 
36a58     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
36a5c     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
36a60     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
36a64     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
36a68                 | 
36a68     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
36a6c                 | 
36a6c                 | '------------------------------------------------------------------------------
36a6c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
36a6c                 | ' function.
36a6c                 | '------------------------------------------------------------------------------
36a6c                 | ' On entry:
36a6c                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
36a6c                 | '   hpar2 - index number of the target interface.
36a6c                 | ' On exit:
36a6c                 | '------------------------------------------------------------------------------
36a6c                 | hset_idle
36a6c     A8 99 02 F6 |                 mov     hctwait, _2ms_
36a70     EF 02 A0 FD |                 call    #poll_waitx
36a74     D8 0A D0 FE |                 loc     ptra, #set_idle
36a78     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
36a7c     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
36a80     A0 02 80 FD |                 jmp     #control_write
36a84                 | 
36a84                 | '------------------------------------------------------------------------------
36a84                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
36a84                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
36a84                 | '------------------------------------------------------------------------------
36a84                 | ' On entry:
36a84                 | '   ep_addr_pid - device address and enpoint for the request.
36a84                 | ' On exit:
36a84                 | '   retval - transaction result.
36a84                 | '------------------------------------------------------------------------------
36a84                 | hset_kbdled_report
36a84     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
36a88     CC 0A D0 FE |                 loc     ptra, #set_report
36a8c     01 00 80 FF 
36a90     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
36a94     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36a98     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
36a9c     27 EF 03 F6 |                 mov     pb, urx_buff_p
36aa0     F7 77 42 FC |                 wrbyte  kb_led_states, pb
36aa4     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
36aa8                 | 
36aa8                 | '------------------------------------------------------------------------------
36aa8                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
36aa8                 | '------------------------------------------------------------------------------
36aa8                 | ' On entry:
36aa8                 | ' On exit:
36aa8                 | '------------------------------------------------------------------------------
36aa8                 | hget_kbd_in_report
36aa8     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
36aac     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36ab0     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
36ab4     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
36ab8     CF 02 A0 FD |                 call    #do_int_in
36abc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36ac0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
36ac4                 | 
36ac4     00 90 0F F2 |                 cmp     hpar3, #0               wz
36ac8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36acc                 | 
36acc     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
36ad0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
36ad4     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
36ad8     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
36adc                 | 
36adc     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
36ae0     18 00 B0 FD |                 call    #hkbd_compare
36ae4                 |         if EMUPAD_MAX_PLAYER > 0
36ae4                 |         end
36ae4                 | 
36ae4                 | .led_check
36ae4     3B 71 03 F6 |                 mov     htmp, kb_led_states
36ae8     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
36aec     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
36af0     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
36af4     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
36af8     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
36afc                 | 
36afc                 | '------------------------------------------------------------------------------
36afc                 | ' Compare current and previous keyboard data buffers for keypress changes.
36afc                 | '------------------------------------------------------------------------------
36afc                 | hkbd_compare
36afc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
36b00     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
36b04     61 73 07 FB |                 rdlong  htmp1, ptra++
36b08     E1 75 07 FB |                 rdlong  htmp2, ptrb++
36b0c     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
36b10     61 73 07 FB |                 rdlong  htmp1, ptra++
36b14     E1 75 07 FB |                 rdlong  htmp2, ptrb++
36b18     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
36b1c     2D 00 64 AD |         if_z    ret
36b20                 | 
36b20     B4 13 D0 FE |                 loc     ptra, #hkbd_report
36b24                 | 
36b24                 |                 ' Handle modifiers
36b24     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
36b28     00 87 C7 FA |                 rdbyte  hr1, ptra
36b2c     C7 87 43 F9 |                 rolword hr1,hpar2,#0
36b30     63 86 63 FD |                 mergew  hr1
36b34     08 EC 07 F6 |                 mov     pa,#8
36b38                 | .modloop
36b38     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
36b3c     E8 8C 07 F6 |                 mov     hpar1,#$E8
36b40     F6 8D 83 F1 |                 sub     hpar1,pa
36b44     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
36b48     FB ED 6F FB |                 djnz    pa,#.modloop
36b4c                 | 
36b4c     6F E0 75 FD | .release        modc    _set    wc
36b50                 |                 'alts    hdev_port, #hid_report_p
36b50                 |                 'mov     ptra, hid_report_p
36b50     02 F0 07 F1 |                 add     ptra, #2
36b54     06 EC 07 F6 |                 mov     pa, #6
36b58     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
36b5c     20 00 90 AD |         if_z    jmp     #.rl3
36b60     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
36b64     02 F2 07 F1 |                 add     ptrb, #2
36b68     06 EE 07 F6 |                 mov     pb, #6
36b6c     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
36b70     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
36b74     08 00 90 AD |         if_z    jmp     #.rl3
36b78     FC EF 6F FB |                 djnz    pb, #.rl2
36b7c     68 00 B0 FD |                 call    #hkbd_translate
36b80     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
36b84                 | 
36b84     00 90 07 F6 |                 mov     hpar3, #0
36b88     1F 90 27 F4 |                 bith    hpar3, #31
36b8c                 | 
36b8c     6F 00 74 FD | .press          modc    _clr    wc
36b90     27 F1 03 F6 |                 mov     ptra, urx_buff_p
36b94     02 F0 07 F1 |                 add     ptra, #2
36b98     06 EC 07 F6 |                 mov     pa, #6
36b9c     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
36ba0     20 00 90 AD |         if_z    jmp     #.pl3
36ba4     30 13 F0 FE |                 loc     ptrb, #hkbd_report
36ba8     02 F2 07 F1 |                 add     ptrb, #2
36bac     06 EE 07 F6 |                 mov     pb, #6
36bb0     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
36bb4     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
36bb8     08 00 90 AD |         if_z    jmp     #.pl3
36bbc     FC EF 6F FB |                 djnz    pb, #.pl2
36bc0     24 00 B0 FD |                 call    #hkbd_translate
36bc4     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
36bc8                 | 
36bc8     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
36bcc     08 13 F0 FE |                 loc     ptrb, #hkbd_report
36bd0     28 02 64 FD |                 setq #1
36bd4     61 73 07 FB |                 rdlong  htmp1, ptra++
36bd8     28 02 64 FD |                 setq #1
36bdc     E1 73 67 FC |                 wrlong  htmp1, ptrb++
36be0     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
36be4                 | 
36be4     2D 00 64 FD |                 ret
36be8                 | 
36be8                 | '------------------------------------------------------------------------------
36be8                 | ' Translate keyboard scancode to ASCII
36be8                 | '------------------------------------------------------------------------------
36be8                 | ' On entry:
36be8                 | '   hpar1 - scancode
36be8                 | '   hpar2 - key modifiers state
36be8                 | '       c - pressed (0) or released (1) flag
36be8                 | ' On exit:
36be8                 | '   hpar1 - bit     31 = 0 pressed, 1 released
36be8                 | '               30..17 = unused
36be8                 | '                   18 = scroll-lock state 
36be8                 | '                   17 = caps-lock state
36be8                 | '                   16 = num-lock state 
36be8                 | '                15..8 = key modifiers state
36be8                 | '                 7..0 = scancode
36be8                 | '------------------------------------------------------------------------------
36be8                 | hkbd_translate
36be8     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
36bec     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
36bf0     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
36bf4     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
36bf8     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
36bfc     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
36c00                 | 
36c00                 |         if EMUPAD_MAX_PLAYER > 0
36c00                 | 
36c00                 |         if EMUPAD_BT0_BIT >= 0
36c00                 |         end
36c00                 |         if EMUPAD_BT1_BIT >= 0
36c00                 |         end
36c00                 |         if EMUPAD_BT2_BIT >= 0
36c00                 |         end
36c00                 |         if EMUPAD_BT3_BIT >= 0
36c00                 |         end
36c00                 |         if EMUPAD_BT4_BIT >= 0
36c00                 |         end
36c00                 |         if EMUPAD_BT5_BIT >= 0
36c00                 |         end
36c00                 |         if EMUPAD_BT6_BIT >= 0
36c00                 |         end
36c00                 |         if EMUPAD_BT7_BIT >= 0
36c00                 |         end
36c00                 |         if EMUPAD_BT8_BIT >= 0
36c00                 |         end
36c00                 |         if EMUPAD_BT9_BIT >= 0
36c00                 |         end
36c00                 | 
36c00                 |         end
36c00     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
36c04     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
36c08     1F 8C 47 F4 |                 bitc    hpar1, #31
36c0c                 |         if KEYQUEUE_SIZE > 0
36c0c     C4 09 B0 FE |                 loc pb,#keyq_head
36c10     F7 71 E3 FA |                 rdword htmp,pb
36c14     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
36c18     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
36c1c     B8 75 03 F6 |                 mov htmp2,htmp
36c20     04 74 07 FA |                 mul htmp2,#4
36c24     F7 75 03 F1 |                 add htmp2,pb
36c28     02 74 07 F1 |                 add htmp2,#2
36c2c     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
36c30     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
36c34     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
36c38     F7 71 43 5C |         if_nz   wrbyte htmp,pb
36c3c                 |         end
36c3c     2D 00 7C FD |                 ret wcz
36c40                 | 
36c40                 | if HAVE_MOUSE
36c40                 | '------------------------------------------------------------------------------
36c40                 | ' Execute an IN interrupt transaction to poll for mouse activity.
36c40                 | '------------------------------------------------------------------------------
36c40                 | ' On entry:
36c40                 | ' On exit:
36c40                 | '------------------------------------------------------------------------------
36c40                 | hget_mouse_in_report
36c40     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
36c44     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36c48     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
36c4c     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
36c50     CF 02 A0 FD |                 call    #do_int_in
36c54     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36c58     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
36c5c                 | 
36c5c     00 90 0F F2 |                 cmp     hpar3, #0               wz
36c60     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36c64                 | 
36c64     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
36c68     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
36c6c     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
36c70     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
36c74                 | 
36c74     27 F1 03 F6 |                 mov     ptra, urx_buff_p
36c78     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
36c7c     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
36c80     01 90 87 31 |         if_ae   sub     hpar3, #1
36c84                 | 
36c84     40 09 90 FE |                 loc     pa, #mouse_limits
36c88     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
36c8c                 | 
36c8c                 |                 ' load xacc,yacc,zacc
36c8c     28 04 64 FD |                 setq    #3-1
36c90     80 87 07 FB |                 rdlong  hr1,ptrb
36c94                 |                 ' load limits and outptr
36c94     28 04 64 FD |                 setq    #3-1
36c98     F6 73 03 FB |                 rdlong  htmp1,pa
36c9c                 | 
36c9c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
36ca0     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
36ca4     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
36ca8     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
36cac     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
36cb0     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
36cb4     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
36cb8     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
36cbc                 |               
36cbc                 | 
36cbc     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
36cc0     07 70 67 F7 |                 signx   htmp, #7
36cc4     B8 87 03 F1 |                 add     hr1,htmp
36cc8     00 72 0F F2 |                 cmp     htmp1,#0 wz
36ccc     B9 87 63 53 |         if_ne   fles    hr1,htmp1
36cd0     00 86 47 53 |         if_ne   fges    hr1,#0
36cd4                 | 
36cd4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
36cd8     07 70 67 F7 |                 signx   htmp, #7
36cdc     B8 89 03 F1 |                 add     hr2,htmp
36ce0     00 74 0F F2 |                 cmp     htmp2,#0 wz
36ce4     BA 89 63 53 |         if_ne   fles    hr2,htmp2
36ce8     00 88 47 53 |         if_ne   fges    hr2,#0
36cec                 |                 
36cec                 | 
36cec     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
36cf0     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
36cf4     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
36cf8     B8 8B 03 A1 |         if_z    add     hr3,htmp
36cfc                 | 
36cfc     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
36d00     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
36d04                 | 
36d04                 |                 ' write back accumulators
36d04     28 04 64 FD |                 setq    #3-1
36d08     80 87 67 FC |                 wrlong  hr1,ptrb
36d0c                 |                 ' if outptr set, write X/Y words
36d0c     00 76 0F F2 |                 cmp htmp3,#0                    wz
36d10     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
36d14     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
36d18     2D 00 64 FD |                 ret
36d1c                 | end
36d1c                 | 
36d1c                 | '------------------------------------------------------------------------------
36d1c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
36d1c                 | '------------------------------------------------------------------------------
36d1c                 | ' On entry:
36d1c                 | ' On exit:
36d1c                 | '------------------------------------------------------------------------------
36d1c                 | if _HAVE_GAMEPAD
36d1c                 | hget_gp_in_report
36d1c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
36d20     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
36d24                 | 
36d24     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36d28     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
36d2c     00 90 E3 F8 |                 getbyte hpar3
36d30     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
36d34     CF 02 A0 FD |                 call    #do_int_in
36d38     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36d3c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
36d40                 | 
36d40     00 90 0F F2 |                 cmp     hpar3, #0               wz
36d44     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36d48                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
36d48                 | 
36d48     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
36d4c     00 70 E3 F8 |                 getbyte htmp                            ' |
36d50     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
36d54     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
36d58     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
36d5c     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
36d60     B8 01 C0 F8 |                 setbyte htmp                            ' |
36d64                 | 
36d64                 | ' Note: the following code compares the current and previous reports
36d64                 | ' and process the data if there are changes to ease the debug output.
36d64                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
36d64                 | ' gpPreReport buffer.
36d64                 | 
36d64                 |                 ' ----- start of block to remove
36d64                 |                 {
36d64                 |                 }
36d64                 |                 ' ----- end of block to remove
36d64     F4 04 90 FE |                 loc pa,#hpad_translate
36d68     2A EC 63 FD |                 push pa
36d6c                 | 
36d6c                 |                 ' FALL THROUGH !!!!
36d6c                 | 
36d6c                 | '------------------------------------------------------------------------------
36d6c                 | ' Decode controller report
36d6c                 | '------------------------------------------------------------------------------
36d6c                 | hid_decode
36d6c                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
36d6c     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
36d70     00 04 00 FF 
36d74     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
36d78                 | 
36d78     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
36d7c                 | 
36d7c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
36d80     00 2A E3 F8 |                 getbyte hidr_type
36d84     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
36d88     34 02 90 AD |         if_z    jmp     #hpad_xinput
36d8c     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
36d90     1C 03 90 AD |         if_z    jmp     #hpad_ps3
36d94     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
36d98     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
36d9c     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
36da0                 |                 
36da0                 | 
36da0                 | '------------------------------------------------------------------------------
36da0                 | ' Handle HID controller (or mouse now
36da0                 | ' On entry:
36da0                 | '   ptrb - controller report
36da0                 | '------------------------------------------------------------------------------
36da0                 | hpad_hid
36da0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
36da4     F7 F1 03 F6 |                 mov     ptra, pb
36da8     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
36dac     00 EC 03 F6 |                 mov     pa, 0-0
36db0                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
36db0     19 2A 3B FF 
36db4     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
36db8                 | 
36db8                 | .next
36db8     00 EC 5F F2 |                 cmps    pa, #0      wcz
36dbc     2D 00 7C ED |         if_be   ret     wcz
36dc0                 | 
36dc0     61 8D C7 FA |                 rdbyte  hpar1, ptra++
36dc4     01 EC 87 F1 |                 sub     pa, #1
36dc8     00 8E 07 F6 |                 mov     hpar2, #0
36dcc                 | 
36dcc     C6 71 03 F6 |                 mov     htmp, hpar1
36dd0     03 70 07 F5 |                 and     htmp, #$03
36dd4     01 70 0F F2 |                 cmp     htmp, #1    wz
36dd8     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
36ddc     07 8E 67 A7 |         if_z    signx   hpar2,#7
36de0     01 EC 87 A1 |         if_z    sub     pa, #1
36de4     02 70 0F F2 |                 cmp     htmp, #2    wz
36de8     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
36dec     0F 8E 67 A7 |         if_z    signx   hpar2,#15
36df0     02 EC 87 A1 |         if_z    sub     pa, #2
36df4     03 70 0F F2 |                 cmp     htmp, #3    wz
36df8     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
36dfc     04 EC 87 A1 |         if_z    sub     pa, #4
36e00                 | 
36e00     FC 8C 07 F5 |                 and     hpar1, #$FC
36e04                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
36e04                 | 
36e04     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
36e08     0C 01 90 AD |         if_z    jmp     #.report_id
36e0c     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
36e10     24 01 90 AD |         if_z    jmp     #.usage_page
36e14     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
36e18     2C 01 90 AD |         if_z    jmp     #.usage
36e1c     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
36e20     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
36e24     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
36e28     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
36e2c     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
36e30     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
36e34     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
36e38     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
36e3c     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
36e40     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
36e44     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
36e48     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
36e4c     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
36e50     64 FF 9F 5D |         if_nz   jmp     #.next
36e54                 | 
36e54     D8 1D A7 FB |                 tjf     hidr_state,#.next
36e58                 | 
36e58     03 8E 07 F5 |                 and     hpar2, #$03
36e5c     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
36e60     18 00 90 5D |         if_nz   jmp     #.skip
36e64                 | 
36e64     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
36e68     20 00 90 AD |         if_z    jmp     #.axes
36e6c     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
36e70     5C 00 90 AD |         if_z    jmp     #.hats
36e74     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
36e78     70 00 90 AD |         if_z    jmp     #.buttons
36e7c                 | .skip
36e7c     8F 71 03 F6 |                 mov     htmp, hidr_size
36e80     90 71 03 FA |                 mul     htmp, hidr_count
36e84     B8 23 03 F1 |                 add     hidr_offset, htmp
36e88     2C FF 9F FD |                 jmp     #.next
36e8c                 | .axes
36e8c                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
36e8c     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
36e90     90 87 03 F6 |                 mov     hr1, hidr_count
36e94                 | .l1
36e94     91 8D 03 F6 |                 mov     hpar1, hidr_offset
36e98     8F 8F 03 F6 |                 mov     hpar2, hidr_size
36e9c     04 03 B0 FD |                 call    #hpad_getbits
36ea0     64 03 B0 FD |                 call    #hpad_normalize
36ea4     06 84 1F F2 |                 cmp     hr0, #6         wcz
36ea8     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
36eac     00 88 43 C8 |         if_b    getnib  hr2
36eb0     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
36eb4     5F 01 20 C9 |         if_b    setword retval
36eb8     01 84 07 C1 |         if_b    add     hr0, #1
36ebc     8F 23 03 F1 |                 add     hidr_offset, hidr_size
36ec0     F4 87 6F FB |                 djnz    hr1, #.l1
36ec4                 | 
36ec4     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
36ec8     01 1C 07 F6 |                 mov     hidr_state, #1
36ecc     E8 FE 9F FD |                 jmp     #.next
36ed0                 | .hats
36ed0                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
36ed0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
36ed4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
36ed8     C8 02 B0 FD |                 call    #hpad_getbits
36edc     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
36ee0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
36ee4     01 1C 07 F6 |                 mov     hidr_state, #1
36ee8     90 FF 9F FD |                 jmp     #.skip
36eec                 | .buttons
36eec                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
36eec     91 8D 03 F6 |                 mov     hpar1, hidr_offset
36ef0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
36ef4     90 8F 03 FA |                 mul     hpar2, hidr_count
36ef8     A8 02 B0 FD |                 call    #hpad_getbits
36efc     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
36f00     B8 BF 62 F0 |                 shl     retval, htmp
36f04     5F 17 43 F5 |                 or      hidr_buttons, retval
36f08     90 71 03 F1 |                 add     htmp, hidr_count
36f0c     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
36f10     01 1C 07 F6 |                 mov     hidr_state, #1
36f14     64 FF 9F FD |                 jmp     #.skip
36f18                 | .report_id
36f18     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
36f1c     2D 00 7C 5D |         if_nz   ret     wcz
36f20     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
36f24     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
36f28     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
36f2c     01 1C 67 56 |         if_nz   neg     hidr_state,#1
36f30     01 F2 87 51 |         if_nz   sub     ptrb,#1
36f34     80 FE 9F FD |                 jmp     #.next
36f38                 | .usage_page
36f38     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
36f3c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
36f40     04 1C 07 A6 |         if_z    mov     hidr_state, #4
36f44     70 FE 9F FD |                 jmp     #.next
36f48                 | .usage
36f48     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
36f4c     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
36f50     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
36f54     01 1C 07 A6 |         if_z    mov     hidr_state, #1
36f58     5C FE 9F AD |         if_z    jmp     #.next
36f5c     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
36f60     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
36f64     01 1C 07 A6 |         if_z    mov     hidr_state, #1
36f68     4C FE 9F AD |         if_z    jmp     #.next
36f6c     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
36f70     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
36f74     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
36f78     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
36f7c     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
36f80     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
36f84     10 00 90 AD |         if_z    jmp     #.usage_axis
36f88     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
36f8c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
36f90     03 1C 07 A6 |         if_z    mov     hidr_state, #3
36f94     20 FE 9F FD |                 jmp     #.next
36f98                 | .usage_axis
36f98     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
36f9c     18 FE 9F CD |         if_b    jmp     #.next
36fa0     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
36fa4     C7 01 00 F8 |                 setnib  hpar2
36fa8                 | 
36fa8     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
36fac     C7 8F C3 F9 |                 decod   hpar2
36fb0     C7 0F 43 F5 |                 or      hidr_flags, hpar2
36fb4                 | 
36fb4     01 24 07 F1 |                 add     hidr_usage_idx, #1
36fb8     02 1C 07 F6 |                 mov     hidr_state, #2
36fbc     F8 FD 9F FD |                 jmp     #.next
36fc0                 | 
36fc0                 | '------------------------------------------------------------------------------
36fc0                 | ' Handle XInput controller
36fc0                 | ' On entry:
36fc0                 | '   ptrb - controller report
36fc0                 | '------------------------------------------------------------------------------
36fc0                 | '   Default implementation translates the report to a pseudo-defacto hid
36fc0                 | '   standard and jumps to hpad_translate for actions.
36fc0                 | '   Implementors may take specific actions for this kind of controller.
36fc0                 | '------------------------------------------------------------------------------
36fc0                 | hpad_xinput
36fc0     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
36fc4     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
36fc8     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
36fcc     14 70 0F F2 |                 cmp     htmp, #$14      wz
36fd0     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
36fd4                 | 
36fd4                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
36fd4                 | 
36fd4     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
36fd8     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
36fdc                 | 
36fdc     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
36fe0     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
36fe4     5F BF 22 F6 |                 not     retval
36fe8     5F 11 2B F9 |                 setword hidr_axis, retval, #1
36fec     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
36ff0     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
36ff4     5F BF 22 F6 |                 not     retval
36ff8     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
36ffc                 | 
36ffc     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
37000     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
37004     C0 BE 1E F2 |                 cmp     retval, #192    wcz
37008     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3700c     F8 01 B0 FD |                 call    #hpad_normalize
37010     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
37014     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
37018     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3701c     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
37020     E4 01 B0 FD |                 call    #hpad_normalize
37024     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
37028                 | 
37028     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3702c     81 BF E6 FA |                 rdword  retval, ptrb[1]
37030     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
37034     00 16 47 F4 |                 bitc    hidr_buttons, #0
37038     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3703c     01 16 47 F4 |                 bitc    hidr_buttons, #1
37040     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
37044     02 16 47 F4 |                 bitc    hidr_buttons, #2
37048     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3704c     03 16 47 F4 |                 bitc    hidr_buttons, #3
37050     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
37054     04 16 47 F4 |                 bitc    hidr_buttons, #4
37058     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3705c     05 16 47 F4 |                 bitc    hidr_buttons, #5
37060     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
37064     08 16 47 F4 |                 bitc    hidr_buttons, #8
37068     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3706c     09 16 47 F4 |                 bitc    hidr_buttons, #9
37070     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
37074     0A 16 47 F4 |                 bitc    hidr_buttons, #10
37078     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3707c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
37080     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
37084     0C 16 47 F4 |                 bitc    hidr_buttons, #12
37088                 | 
37088     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3708c     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
37090     7A BB 7A FF 
37094     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
37098     F9 FF 7F FF 
3709c     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
370a0     B9 71 5F F9 |                 altgn   htmp, #htmp1
370a4     00 70 43 F8 |                 getnib  htmp
370a8     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
370ac                 | 
370ac     AC 01 90 FD |                 jmp     #hpad_translate
370b0                 | 
370b0                 | '------------------------------------------------------------------------------
370b0                 | ' Handle PS3 controller
370b0                 | ' On entry:
370b0                 | '   ptrb - controller report
370b0                 | '------------------------------------------------------------------------------
370b0                 | '   Default implementation translates the report to a pseudo-defacto hid
370b0                 | '   standard and jumps to hpad_translate for actions.
370b0                 | '   Implementors may take specific actions for this kind of controller.
370b0                 | '------------------------------------------------------------------------------
370b0                 | hpad_ps3
370b0     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
370b4     01 70 0F F2 |                 cmp     htmp, #$01      wz
370b8     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
370bc                 | 
370bc                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
370bc                 | 
370bc     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
370c0     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
370c4     40 01 B0 FD |                 call    #hpad_normalize
370c8     5F 11 23 F9 |                 setword hidr_axis, retval, #0
370cc     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
370d0     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
370d4     30 01 B0 FD |                 call    #hpad_normalize
370d8     5F 11 2B F9 |                 setword hidr_axis, retval, #1
370dc     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
370e0     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
370e4     20 01 B0 FD |                 call    #hpad_normalize
370e8     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
370ec     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
370f0     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
370f4     10 01 B0 FD |                 call    #hpad_normalize
370f8     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
370fc     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
37100     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
37104                 | 
37104     08 8C 07 F6 |                 mov     hpar1, #8
37108     13 8E 07 F6 |                 mov     hpar2, #19
3710c     94 00 B0 FD |                 call    #hpad_getbits
37110                 | 
37110     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
37114     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
37118     00 16 47 F4 |                 bitc    hidr_buttons, #0
3711c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
37120     01 16 47 F4 |                 bitc    hidr_buttons, #1
37124     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
37128     02 16 47 F4 |                 bitc    hidr_buttons, #2
3712c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
37130     03 16 47 F4 |                 bitc    hidr_buttons, #3
37134     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
37138     04 16 47 F4 |                 bitc    hidr_buttons, #4
3713c     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
37140     05 16 47 F4 |                 bitc    hidr_buttons, #5
37144     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
37148     06 16 47 F4 |                 bitc    hidr_buttons, #6
3714c     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
37150     07 16 47 F4 |                 bitc    hidr_buttons, #7
37154     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
37158     08 16 47 F4 |                 bitc    hidr_buttons, #8
3715c     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
37160     09 16 47 F4 |                 bitc    hidr_buttons, #9
37164     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
37168     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3716c     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
37170     0B 16 47 F4 |                 bitc    hidr_buttons, #11
37174     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
37178     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3717c                 | 
3717c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
37180     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
37184     09 FA 79 FF 
37188     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3718c     FF FA 7F FF 
37190     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
37194     B9 71 5F F9 |                 altgn   htmp, #htmp1
37198     00 70 43 F8 |                 getnib  htmp
3719c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
371a0                 | 
371a0     B8 00 90 FD |                 jmp     #hpad_translate
371a4                 | 
371a4                 | '------------------------------------------------------------------------------
371a4                 | ' Read bits from report data buffer
371a4                 | '------------------------------------------------------------------------------
371a4                 | ' On entry:
371a4                 | '   PTRB - report buffer
371a4                 | '   hpar1 - start bit
371a4                 | '   hpar2 - number of bits
371a4                 | ' On exit:
371a4                 | '   retval - bits
371a4                 | '------------------------------------------------------------------------------
371a4                 | hpad_getbits
371a4     C6 71 03 F6 |                 mov     htmp, hpar1
371a8     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
371ac     F9 71 03 F1 |                 add     htmp, ptrb
371b0     B8 BF 02 FB |                 rdlong  retval, htmp
371b4                 | 
371b4     C6 73 03 F6 |                 mov     htmp1, hpar1
371b8     07 72 07 F5 |                 and     htmp1, #$07     ' shift
371bc     B9 BF 42 F0 |                 shr     retval, htmp1
371c0                 | 
371c0     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
371c4     10 00 90 1D |         if_a    jmp     #.l1
371c8                 | 
371c8     C7 8F C3 F9 |                 decod   hpar2
371cc     01 8E 87 F1 |                 sub     hpar2, #1
371d0     C7 BF 02 F5 |                 and     retval, hpar2
371d4     2D 00 64 FD |                 ret
371d8                 | .l1
371d8     FF 7F 00 FF 
371dc     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
371e0     03 70 07 F1 |                 add     htmp, #3
371e4     B8 75 03 FB |                 rdlong  htmp2, htmp
371e8     18 8E 87 F1 |                 sub     hpar2, #24
371ec     C7 8F C3 F9 |                 decod   hpar2
371f0     01 8E 87 F1 |                 sub     hpar2, #1
371f4     B9 75 43 F0 |                 shr     htmp2, htmp1
371f8     C7 75 03 F5 |                 and     htmp2, hpar2
371fc     18 74 67 F0 |                 shl     htmp2, #24
37200     BA BF 42 F5 |                 or      retval, htmp2
37204     2D 00 64 FD |                 ret
37208                 | 
37208                 | '------------------------------------------------------------------------------
37208                 | ' Normalize value to signed word (-32768 / 32767)
37208                 | '------------------------------------------------------------------------------
37208                 | ' On entry:
37208                 | '   retval - value to normalize
37208                 | '   hidr_lminmax - min (word 1) max (word 0) value range
37208                 | '   - or -
37208                 | '   hidr_pminmax - min (word 1) max (word 0) value range
37208                 | '   hidr_size - value bits length
37208                 | ' On exit:
37208                 | '   retval - normalized value
37208                 | '------------------------------------------------------------------------------
37208                 | hpad_normalize
37208     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3720c     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
37210     2D 00 64 AD |         if_z    ret
37214     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
37218     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3721c     0F 72 77 F7 |                 signx   htmp1, #15      wc
37220     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
37224     00 BE 66 C7 |         if_c    signx   retval, #0-0
37228     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3722c     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
37230     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
37234     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
37238     B8 71 53 F6 |                 abs     htmp            wc
3723c     1F BE 0E F4 |                 testb   retval, #31     wz
37240     5F BF 42 F6 |                 abs     retval
37244     B8 BF 12 FD |                 qdiv    retval, htmp
37248     18 BE 62 FD |                 getqx   retval
3724c     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
37250     C0 FF 7F FF 
37254     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
37258     2D 00 64 FD |                 ret
3725c                 | 
3725c                 | '------------------------------------------------------------------------------
3725c                 | ' Perform controller actions
3725c                 | ' On entry:
3725c                 | '    hidr_id        report id
3725c                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3725c                 | '                      X = hidr_axis+0, #0
3725c                 | '                      Y = hidr_axis+0, #1
3725c                 | '                      Z = hidr_axis+1, #0
3725c                 | '                     RX = hidr_axis+1, #1
3725c                 | '                     RY = hidr_axis+2, #0
3725c                 | '                     RZ = hidr_axis+2, #1
3725c                 | '    hidr_buttons   buttons state (bits 0 to 31)
3725c                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3725c                 | '
3725c                 | '                     -------3 -------2 -------1 -------0 byte
3725c                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3725c                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3725c                 | '                                zyx||| |||||||| ++++++++ n. buttons
3725c                 | '                                |||||| ||||++++--------- n. axes
3725c                 | '                                |||||| ++++------------- n. hats
3725c                 | '                                ++++++------------------ valid axes
3725c                 | '------------------------------------------------------------------------------
3725c                 | hpad_translate
3725c                 | 
3725c                 | 
3725c                 |         if HAVE_HIDPAD
3725c     84 0C F0 FE |                 loc     ptrb,#hidpad_report
37260     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
37264     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
37268     01 70 E7 F2 |                 cmpsub  htmp,#1
3726c     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
37270     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
37274     2D 00 7C 3D |         if_ae   ret     wcz
37278     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3727c     B8 F3 03 F1 |                 add     ptrb,htmp
37280     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
37284     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
37288     28 0C 64 FD |                 setq    #7-1
3728c     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
37290                 |         end
37290                 | 
37290                 | 
37290                 |         if EMUPAD_MAX_PLAYER > 0
37290                 | .emupad_no_hat
37290                 |         if EMUPAD_BT0_BIT >= 0
37290                 |         end
37290                 |         if EMUPAD_BT1_BIT >= 0
37290                 |         end
37290                 |         if EMUPAD_BT2_BIT >= 0
37290                 |         end
37290                 |         if EMUPAD_BT3_BIT >= 0
37290                 |         end
37290                 |         if EMUPAD_BT4_BIT >= 0
37290                 |         end
37290                 |         if EMUPAD_BT5_BIT >= 0
37290                 |         end
37290                 |         if EMUPAD_BT6_BIT >= 0
37290                 |         end
37290                 |         if EMUPAD_BT7_BIT >= 0
37290                 |         end
37290                 |         if EMUPAD_BT8_BIT >= 0
37290                 |         end
37290                 |         if EMUPAD_BT9_BIT >= 0
37290                 |         end
37290                 | .emupad_slot_over
37290                 |         end
37290                 | 
37290                 |         if 0
37290                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
37290                 | 
37290                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
37290                 | 
37290                 |         end
37290     2D 00 64 FD |                 ret
37294                 | end
37294                 | 
37294                 | if EMUPAD_MAX_PLAYER > 0
37294                 | '------------------------------------------------------------------------------
37294                 | ' Clear EmuPad state
37294                 | '------------------------------------------------------------------------------
37294                 | emupad_reset
37294                 | 
37294                 | '------------------------------------------------------------------------------
37294                 | ' Get EmuPad Player number for current device (into retval)
37294                 | ' Z flag is also set if current device is valid
37294                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
37294                 | '------------------------------------------------------------------------------
37294                 | emupad_getnum
37294                 | .loop
37294                 | '------------------------------------------------------------------------------
37294                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
37294                 | '------------------------------------------------------------------------------
37294                 | emupad_discon
37294                 | .loop         
37294                 |         
37294                 |         ' FALL THROUGH!!!
37294                 | 
37294                 | '------------------------------------------------------------------------------
37294                 | ' Update EmuPad reports (all of them...)
37294                 | '------------------------------------------------------------------------------
37294                 | emupad_write_reports
37294                 | .devloop
37294                 | 
37294                 | end
37294                 | 
37294                 | 
37294                 | '------------------------------------------------------------------------------
37294                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
37294                 | '------------------------------------------------------------------------------
37294                 | ' On entry:
37294                 | ' On exit:
37294                 | '------------------------------------------------------------------------------
37294                 | hget_hub_status
37294     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
37298     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3729c     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
372a0     01 90 2F F9 |                 setword hpar3, #1, #1
372a4     CF 02 A0 FD |                 call    #do_int_in
372a8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
372ac     0C 00 90 AD |         if_z    jmp     #.data
372b0     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
372b4     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
372b8     2D 00 64 FD |                 ret
372bc                 | .data
372bc     00 90 0F F2 |                 cmp     hpar3, #0               wz
372c0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
372c4                 | 
372c4     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
372c8     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
372cc     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
372d0     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
372d4                 |                 debug(ubin_long(hub_status_chg))
372d4                 | 
372d4     01 5A 06 F6 |                 mov     hdev_port, #1
372d8                 | .loop
372d8     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
372dc     0C 00 B0 AD |         if_x1   call    #hub_port_handler
372e0     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
372e4     F0 FF 9F 3D |         if_nc   jmp     #.loop
372e8     2D 00 64 FD |                 ret
372ec                 | 
372ec                 | hub_port_handler
372ec     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
372f0     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
372f4     27 EF 03 F6 |                 mov     pb, urx_buff_p
372f8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
372fc     55 02 A0 FD |                 call    #control_read
37300     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
37304                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
37304                 | 
37304     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
37308     50 01 90 5D |         if_x0   jmp     #.other
3730c     68 02 D0 FE |                 loc     ptra, #clr_port_feat
37310     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
37314     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
37318     A0 02 A0 FD |                 call    #control_write
3731c     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
37320     7C 01 90 5D |         if_x0   jmp     #.disconnect
37324     B0 99 02 F6 |                 mov     hctwait, _100ms_
37328     EF 02 A0 FD |                 call    #poll_waitx
3732c                 | 
3732c     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
37330     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
37334     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
37338     A0 02 A0 FD |                 call    #control_write
3733c                 | 
3733c     02 76 07 F6 |                 mov     htmp3, #2
37340                 | .wait_reset
37340     AC 99 02 F6 |                 mov     hctwait, _8ms_
37344     EF 02 A0 FD |                 call    #poll_waitx
37348     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3734c     27 EF 03 F6 |                 mov     pb, urx_buff_p
37350     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
37354     55 02 A0 FD |                 call    #control_read
37358     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3735c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
37360     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
37364                 | 
37364     10 02 D0 FE |                 loc     ptra, #clr_port_feat
37368     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3736c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
37370     A0 02 A0 FD |                 call    #control_write
37374                 | 
37374     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
37378                 | .wait_recover
37378     A7 99 02 F6 |                 mov     hctwait, _1ms_
3737c     EF 02 A0 FD |                 call    #poll_waitx
37380     FD 71 6F FB |                 djnz    htmp,#.wait_recover
37384                 | 
37384     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
37388     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3738c     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
37390                 | 
37390     00 08 00 FF 
37394     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
37398     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3739c     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
373a0     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
373a4     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
373a8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
373ac     48 01 90 5D |         if_nz   jmp     #.done
373b0                 | .get_dev_desc
373b0     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
373b4     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
373b8     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
373bc     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
373c0     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
373c4     01 71 57 FC |                 wrword  htmp, ptra[wValue]
373c8     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
373cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
373d0     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
373d4     AC 99 02 F6 |                 mov     hctwait, _8ms_
373d8     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
373dc     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
373e0     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
373e4     BE 00 A0 FD |                 call    #calc_crc5
373e8     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
373ec     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
373f0     F7 AD C2 FA |                 rdbyte  total_data, pb
373f4     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
373f8     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
373fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37400     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
37404     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
37408     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3740c                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3740c     9F 99 02 F6 |                 mov     hctwait, _500us_
37410     EF 02 A0 FD |                 call    #poll_waitx
37414     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
37418     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3741c     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
37420     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
37424     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37428     CC 00 90 5D |         if_nz   jmp     #.done
3742c     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
37430     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
37434     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
37438     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3743c     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
37440     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
37444     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
37448     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3744c     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
37450     A4 00 90 CD |         if_b    jmp     #.done
37454     6C F0 BF FD |                 call    #hparse_con_desc
37458     9C 00 90 FD |                 jmp     #.done
3745c                 | 
3745c                 | .other
3745c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
37460     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
37464     28 00 90 AD |         if_x1   jmp     #.reset_feature
37468     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3746c     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
37470     1C 00 90 AD |         if_x1   jmp     #.reset_feature
37474     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
37478     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3747c     10 00 90 AD |         if_x1   jmp     #.reset_feature
37480     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
37484     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
37488     04 00 90 AD |         if_x1   jmp     #.reset_feature
3748c     68 00 90 FD |                 jmp     #.done
37490                 | .reset_feature
37490     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
37494     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
37498     A0 02 A0 FD |                 call    #control_write
3749c     58 00 90 FD |                 jmp     #.done
374a0                 | .disconnect
374a0                 | 
374a0     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
374a4     00 70 E3 F8 |                 getbyte htmp
374a8     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
374ac     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
374b0     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
374b4     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
374b8     00 76 06 A6 |         if_z    mov     kb_led_states, #0
374bc     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
374c0                 |         if EMUPAD_MAX_PLAYER > 0
374c0                 |         end
374c0                 |         if HAVE_MOUSE
374c0     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
374c4     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
374c8     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
374cc                 |         end
374cc                 |         if HAVE_HIDPAD
374cc     14 0A F0 FE |                 loc ptrb,#hidpad_report
374d0     2D 71 03 F6 |                 mov htmp,hdev_port
374d4     01 70 E7 F2 |                 cmpsub htmp,#1
374d8     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
374dc     B8 F3 03 F1 |                 add ptrb,htmp
374e0     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
374e4     80 01 6C FC |                 wrlong #0,ptrb
374e8                 |         end
374e8                 | 
374e8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
374ec     00 00 C4 F8 |                 setbyte #0
374f0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
374f4     00 00 04 F6 |                 mov     0-0, #0
374f8                 | 
374f8                 | .done
374f8     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
374fc     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
37500     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
37504     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
37508     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3750c     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
37510                 | 
37510     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
37514     27 EF 03 F6 |                 mov     pb, urx_buff_p
37518     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3751c     55 02 A0 FD |                 call    #control_read
37520     00 69 06 FB |                 rdlong  hub_port_status, ptra
37524                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
37524     2D 00 64 FD |                 ret
37528                 | 
37528                 | '------------------------------------------------------------------------------
37528                 | ' Partially populated SETUP packets
37528                 | '------------------------------------------------------------------------------
37528     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
37529     06          |                 byte    REQ_GET_DESC
3752a     00 01       |                 word    TYPE_DEVICE << 8
3752c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3752e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
37530     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
37531     06          |                 byte    REQ_GET_DESC
37532     00 02       |                 word    TYPE_CONFIG << 8
37534     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
37536     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
37538     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
37539     09          |                 byte    REQ_SET_CONFIG
3753a     00 00       |                 word    0       ' Configuration value
3753c     00 00       |                 word    0       ' Zero
3753e     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
37540     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
37541     05          |                 byte    REQ_SET_ADDR
37542     00 00       |                 word    0       ' Zero
37544     00 00       |                 word    0       ' Zero
37546     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
37548                 | '------------------------------------------------------------------------------
37548                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
37548                 | ' wValue field dictates which protocol should be used.
37548                 | '
37548                 | ' When initialized, all devices default to report protocol. However the host
37548                 | ' should not make any assumptions about the device state and should set the
37548                 | ' desired protocol whenever initializing a device.
37548                 | '------------------------------------------------------------------------------
37548     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
37549     0B          |                 byte    HID_SET_PROTO
3754a     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3754c                 |                                                 ' (HID 1.11 Section 7.2.6).
3754c     00 00       |                 word    0               ' Interface index number.
3754e     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
37550                 | '------------------------------------------------------------------------------
37550     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
37551     0A          |                 byte    HID_SET_IDLE
37552     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
37554                 |                                         ' reporting until a change is detected in the report data
37554                 | 
37554                 |                                         ' (HID 1.11 Section 7.2.4).
37554     00 00       |                 word    0       ' Interface index number.
37556     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
37558     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
37559     09          |                 byte    HID_SET_REPORT
3755a     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3755c                 |                                         ' (HID 1.11 Section 7.2.2).
3755c     00 00       |                 word    0       ' Interface index number.
3755e     00 00       |                 word    0       ' Size of the report, in bytes.
37560     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
37561     06          |                 byte    REQ_GET_DESC
37562     00 22       |                 word    TYPE_REPORT << 8
37564     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
37566     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
37568                 | '------------------------------------------------------------------------------
37568     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
37569     06          |                 byte    REQ_GET_DESC
3756a     00 29       |                 word    TYPE_HUB << 8
3756c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3756e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
37570     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
37571     03          |                 byte    REQ_SET_FEATURE
37572     00 00       |                 word    0       ' port power
37574     01 00       |                 word    1       ' Port index number (1+)
37576     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
37578     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
37579     01          |                 byte    REQ_CLEAR_FEATURE
3757a     00 00       |                 word    0       ' port power
3757c     01 00       |                 word    1       ' Port index number (1+)
3757e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
37580     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
37581     00          |                 byte    REQ_GET_STATUS
37582     00 00       |                 word    0
37584     01 00       |                 word    1       ' Port index number (1+)
37586     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
37588                 | '------------------------------------------------------------------------------
37588                 | if _HAVE_GAMEPAD
37588     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3758c                 | ps3_command_buff
3758c     00 00 00 00 
37590     00          |                 byte    $00, $00, $00, $00, $00
37591     00 00 00 00 
37595     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
37596     FF 27 10 00 
3759a     32          |                 byte    $FF, $27, $10, $00, $32
3759b     FF 27 10 00 
3759f     32          |                 byte    $FF, $27, $10, $00, $32
375a0     FF 27 10 00 
375a4     32          |                 byte    $FF, $27, $10, $00, $32
375a5     FF 27 10 00 
375a9     32          |                 byte    $FF, $27, $10, $00, $32
375aa     00 00 00 00 
375ae     00          |                 byte    $00, $00, $00, $00, $00
375af     00 00 00 00 
375b3     00          |                 byte    $00, $00, $00, $00, $00
375b4     00 00 00 00 
375b8     00          |                 byte    $00, $00, $00, $00, $00
375b9     00 00 00    |                 byte    $00, $00, $00
375bc                 | '------------------------------------------------------------------------------
375bc     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
375bf                 |                                         ' 0x01 All blinking
375bf                 |                                         ' 0x02 1 flashes, then on
375bf                 |                                         ' 0x03 2 flashes, then on
375bf                 |                                         ' 0x04 3 flashes, then on
375bf                 |                                         ' 0x05 4 flashes, then on
375bf                 |                                         ' 0x06 1 on
375bf                 |                                         ' 0x07 2 on
375bf                 |                                         ' 0x08 3 on
375bf                 |                                         ' 0x09 4 on
375bf                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
375bf                 |                                         ' 0x0B Blinking*
375bf                 |                                         ' 0x0C Slow blinking*
375bf                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
375bf     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
375c2     00          |                 byte    $00             ' Left rumble
375c3     00          |                 byte    $00             ' Right rumble
375c4     00 00 00    |                 byte    $00, $00, $00
375c7     00          | end
375c8                 | alignl
375c8                 | 
375c8                 | if HAVE_MOUSE
375c8     00 00 00 00 
375cc     00 00 00 00 | mouse_limits long 0[2]
375d0     00 00 00 00 | mouse_outptr long 0
375d4                 | end
375d4                 | 
375d4                 | if KEYQUEUE_SIZE > 0
375d4     00          | keyq_head byte 0
375d5     00          | keyq_tail byte 0
375d6     00 00 00 00 
      ...             
377d2     00 00 00 00 
377d6     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
377d8                 | alignl
377d8                 | end
377d8                 | 
377d8                 | if EMUPAD_MAX_PLAYER > 0
377d8                 | emupad_rule_buffer
377d8                 | if EMUPAD_BUILTIN_RULES
377d8                 | file "padmap_builtin.dat"
377d8                 | end
377d8                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
377d8                 | '' Default rule directly follows!
377d8                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
377d8                 | end
377d8                 | 
377d8                 | '------------------------------------------------------------------------------
377d8                 | ' The USB data cache area gets zero-filled at every device disconnect
377d8                 | '------------------------------------------------------------------------------
377d8                 | usb_cache_start
377d8                 | 
377d8                 | ' HID descriptor and report buffers
377d8                 | if !!OVERLAP_MEMORY
377d8     00 00 00 00 
      ...             
37ed0     00 00 00 00 
37ed4     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
37ed8                 | end
37ed8     00 00 00 00 
37edc     00 00 00 00 | hkbd_report     byte    0[8]
37ee0     00 00 00 00 | hkbd_led_rep    byte    0
37ee4                 | alignl
37ee4                 | 
37ee4                 | if HAVE_HIDPAD
37ee4     00 00 00 00 
      ...             
37fa0     00 00 00 00 
37fa4     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
37fa8                 | end
37fa8                 | 
37fa8                 | ' HUB descriptor
37fa8     00          | hub_descr       byte    0   ' bDescLength
37fa9     00          |                 byte    0   ' bDescriptorType
37faa     00          |                 byte    0   ' bNbrPorts
37fab     00 00       |                 word    0   ' wHubCharacteristics
37fad     00          |                 byte    0   ' bPwrOn2PwrGood
37fae     00          |                 byte    0   ' bHubContrCurrent
37faf     00          |                 byte    0   ' DeviceRemoveable
37fb0     00          |                 byte    0   ' PortPwrCtrlMask
37fb1                 | 
37fb1                 | usb_cache_end
37fb1                 | 
37fb1                 | if HAVE_MOUSE
37fb1     00 00 00 00 | mouse_xacc      long 0
37fb5     00 00 00 00 | mouse_yacc      long 0
37fb9     00 00 00 00 | mouse_zacc      long 0
37fbd     00          | mouse_bstate    byte 0
37fbe     00          | mouse_lpending  byte 0
37fbf     00          | mouse_rpending  byte 0
37fc0     00          | mouse_mpending  byte 0
37fc1     00          | mouse_lock      byte 0
37fc2     00 00 00    |                 byte 0[3] ' padding
37fc5                 | end
37fc5                 | 
37fc5     00 00 00 00 
      ...             
3803d     00 00 00 00 
38041     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
38045     00 00 00 00 
38049     00 00 00 00 
3804d     00 00 00 00 
38051     00 00 00 00 
38055     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
38057     00 00 00 00 
      ...             
3814f     00 00 00 00 
38153     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
38157                 | 
38157     00          | driver_cog      byte    0                       ' Current driver cog + 1
38158                 | 	alignl
38158                 | _audio096_spin2_dat_
38158                 | 
38158                 | audio       org     0
38158                 | 
38158     61 C9 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3815c     61 17 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
38160     61 23 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
38164                 | 
38164     01 EC 63 FD |             cogid   pa                   ' compute cogid
38168     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3816c     F6 C9 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
38170     E4 C6 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
38174                 | 
38174     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
38178     0E 20 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3817c     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
38180     0F 20 06 FC |             wrpin   dac2,#right
38184     0F 00 1E FC |             wxpin   #256,#right    
38188     41 9C 64 FD |             dirh    #left addpins 1
3818c     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
38190     CB E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
38194     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
38198                 |             
38198                 | '---------------------------------------------------------------------------------        
38198                 | '----------------- The main loop -------------------------------------------------
38198                 | '---------------------------------------------------------------------------------
38198                 | 
38198     D4 AA 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3819c     10 00 90 CD |       if_c  jmp     #loop1
381a0                 |   
381a0     09 FC 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
381a4     D4 FC 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
381a8     D3 00 80 F1 |             sub     0-0,a40000000
381ac     FD FD 6D FB |             djnz    cn,#p402
381b0                 |     
381b0     00 FC 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
381b4     D6 FE 01 F6 |             mov     ct,time1            ' with the lowest next sample time
381b8     D7 FE 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
381bc     01 FC 05 C6 |     if_c    mov     cn,#1
381c0     D8 FE 39 F3 |             fle     ct,time3 wcz
381c4     02 FC 05 C6 |     if_c    mov     cn,#2     
381c8     D9 FE 39 F3 |             fle     ct,time4 wcz
381cc     03 FC 05 C6 |     if_c    mov     cn,#3
381d0     DA FE 39 F3 |             fle     ct,time5 wcz
381d4     04 FC 05 C6 |     if_c    mov     cn,#4
381d8     DB FE 39 F3 |             fle     ct,time6 wcz
381dc     05 FC 05 C6 |     if_c    mov     cn,#5
381e0     DC FE 39 F3 |             fle     ct,time7 wcz
381e4     06 FC 05 C6 |     if_c    mov     cn,#6
381e8     DD FE 39 F3 |             fle     ct,time8 wcz
381ec     07 FC 05 C6 |     if_c    mov     cn,#7
381f0                 | 
381f0                 | 
381f0                 | '----------------------------------------------------------------------------------
381f0                 | '------------- Compute channel samples --------------------------------------------
381f0                 | '----------------------------------------------------------------------------------
381f0                 | 
381f0                 | 
381f0     FE BC 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
381f4     06 BC 65 F0 |             shl     channeladd,#6
381f8     DE F0 03 F1 |             add     ptra,channeladd
381fc                 | 
381fc     28 16 64 FD |             setq    #11                        	' read parameters
38200     00 D3 05 FB |             rdlong  pointer0,ptra
38204                 |     	    
38204     1F E0 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
38208     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3820c     F0 C0 31 F9 |             getword qq,command0,#0            	' get the new rate
38210     4E C0 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
38214     E0 C0 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
38218     00 C0 0D F2 |             cmp     qq,#0 wz                         
3821c     4E 20 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
38220     4E 1E 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
38224                 |             
38224     1E E0 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
38228     E4 C6 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3822c     00 C6 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
38230                 | 
38230     EA 02 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
38234     EA 04 3A F9 |             getword oldrs,sample0,#1
38238     EE F8 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3823c     EE F6 31 F9 |     	    getword avol0,volpan0,#0
38240     EF F4 39 F9 |             getword askip0,freqskip0,#1    	    
38244     EF F2 31 F9 |             getword afreq0,freqskip0,#0
38248                 | 
38248     D6 FC 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3824c     00 00 02 F6 |             mov     dt0,0-0    
38250     D5 00 82 F1 |             sub     dt0,time0
38254                 |             
38254     D6 FC 8D F9 |             altd    cn, #time1                ' add channel period to channel time
38258     F9 00 00 F1 |             add     0-0,afreq0  	
3825c                 |             
3825c                 | '---- envelopes
3825c                 |             
3825c     00 E4 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
38260     20 00 00 AF 
38264     00 44 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
38268     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3826c                 | 
3826c     F9 44 02 F6 |             mov     envs1,afreq0
38270     F3 44 02 FA |             mul     envs1,envspd0
38274     22 E3 01 F1 |             add     envph0,envs1 
38278                 | 
38278     F1 40 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3827c     06 40 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
38280     20 43 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
38284     10 40 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
38288     F4 40 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3828c     F4 40 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
38290     00 42 06 36 |     if_ge   mov     envlo,#0
38294     F4 E2 01 36 |     if_ge   mov     envph0,envlen0
38298     16 E2 65 30 |     if_ge   shl     envph0,#22
3829c                 | 
3829c     20 45 02 F6 |             mov     envs1,envhi			' get the phase acc
382a0     01 44 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
382a4     F2 44 02 F1 |             add     envs1,envptr0		' and add the pointer
382a8     22 45 02 FB |             rdlong  envs1,envs1			' then read 2 entries
382ac     22 47 3A F9 |             getword envs2,envs1,#1		' next value
382b0     22 45 32 F9 |             getword envs1,envs1,#0		' current value
382b4     21 47 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
382b8     21 43 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
382bc     21 45 02 FA |             mul     envs1,envlo
382c0     23 45 02 F1 |             add     envs1,envs2
382c4     12 44 46 F0 |             shr     envs1,#18			' normalize it to $4000
382c8                 |             
382c8     1B D6 0D F4 | p410        testb   sstart0, #27 wz
382cc     1B C2 61 AD |     if_z    getrnd  spl
382d0     58 00 90 AD |     if_z    jmp     #p406
382d4                 |  
382d4     FA D2 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
382d8     E9 3E C2 F8 |             setbyte pointer00,pointer0,#0
382dc     08 D2 45 F0 |             shr     pointer0,#8
382e0                 |          
382e0     1F D6 0D F4 |             testb   sstart0,#31 wz            
382e4     01 D2 65 A0 |     if_z    shl     pointer0,#1        
382e8     1C D6 0D F4 |             testb   sstart0,#28 wz            
382ec     01 D2 65 A0 |     if_z    shl     pointer0,#1        
382f0                 |         
382f0     ED D2 19 F2 |             cmp     pointer0,lend0 wcz
382f4     ED D2 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
382f8     EC D2 01 31 |     if_ge   add     pointer0,lstart0       
382fc                 |             
382fc     E9 C0 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
38300     EB C0 01 F1 |             add     qq,sstart0            
38304                 | 
38304     FF C7 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
38308     E0 C2 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3830c     14 01 B0 1D |     if_gt   call    #cache_read
38310                 |          
38310     1F D6 0D F4 |             testb   sstart0,#31 wz 
38314     08 C2 65 50 |     if_nz   shl     spl,#8
38318     08 D2 65 50 |     if_nz   shl     pointer0,#8
3831c     07 D2 65 A0 |     if_z    shl     pointer0,#7
38320     1C D6 0D F4 |             testb   sstart0,#28 wz            
38324     01 D2 45 A0 |     if_z    shr     pointer0,#1    
38328     1F D3 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3832c                 | 
3832c                 | 
3832c     22 C3 31 FA | p406        scas    spl,envs1			' apply envelope
38330     00 C2 01 F6 |             mov     spl,0-0
38334     FB C2 31 FA |             scas    spl,avol0                 	' apply volume
38338     00 C2 01 F6 |             mov     spl,0-0
3833c                 | 
3833c     FC C2 31 FA |             scas    spl,apan0                 	' apply pan
38340     00 06 02 F6 |             mov     ls0,0-0
38344     20 00 00 FF 
38348     00 C0 05 F6 |             mov     qq,##16384
3834c     FC C0 81 F1 |             sub     qq,apan0
38350     E0 C2 31 FA |             scas    spl,qq
38354     00 08 02 F6 |             mov     rs0, 0-0
38358                 | 
38358     02 0D 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3835c     04 0D 02 F1 |             add     rs,rs0
38360     01 0B 82 F1 |             sub     ls,oldls
38364     03 0B 02 F1 |             add     ls,ls0
38368                 |    
38368     04 D5 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3836c     03 D5 21 F9 |             setword sample0,ls0,#0
38370                 |             
38370     1E D6 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
38374     00 D2 05 A6 |     if_z    mov     pointer0, #0  		
38378     00 E2 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3837c                 |   '  if_z    mov     sample0,#0
3837c     02 D7 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
38380     1D D6 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
38384     04 00 00 AF 
38388     00 AC 05 A1 |     if_z    add     time1,##2048
3838c     D6 AE 01 A6 |     if_z    mov     time2,time1
38390     02 D7 65 AC |     if_z    wrlong  sstart0,ptra[2]
38394                 | 
38394     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
38398     00 D3 65 FC |             wrlong  pointer0,ptra
3839c     08 E3 65 FC |             wrlong  envph0,ptra[8]
383a0     DE F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
383a4                 |                       
383a4     D5 FA 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
383a8     FF BF 25 A7 |     if_z    decmod  front, #511          
383ac                 |          
383ac     05 03 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
383b0     06 05 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
383b4     0F 02 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
383b8     0F 04 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
383bc                 | 	    
383bc                 | 		    
383bc     01 05 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
383c0     08 0F 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
383c4     02 11 02 F6 |             mov     newsample, oldrs       
383c8                 | 
383c8     D5 FA 01 F6 |             mov     oldt0,time0              ' update global time
383cc     00 AB 01 F1 |             add     time0,dt0    
383d0                 |                                      
383d0     00 00 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
383d4     D8 FD 9F AD |     if_z    jmp     #loop1
383d8     00 C1 01 F6 |             mov     qq,dt0
383dc                 |   
383dc     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
383e0     00 BE 9D F2 |             cmpr    front, #0-0 wcz
383e4     F4 FF 9F AD |     if_e    jmp     #p301    
383e8                 | 		
383e8     00 16 0E F2 | 	    cmp     scbase,#0 wz
383ec     20 00 90 AD |     if_z    jmp     #p302	   
383f0                 |   
383f0     3F 1C 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
383f4     0C 1B 02 C6 |     if_c    mov     scptr2,scptr
383f8     02 1A 66 C0 |     if_c    shl     scptr2,#2
383fc     0B 1B 02 C1 |     if_c    add     scptr2,scbase     
38400     60 1A 66 FC |             wrlong  scptr2,#$60
38404     0D 0F 62 CC |     if_c    wrlong  oldsample,scptr2
38408     01 00 00 CF 
3840c     7F 18 06 C7 |     if_c    incmod  scptr,##639
38410                 | 			    
38410     DF 0E 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
38414     00 00 00 FF 
38418     FF BF 05 F7 |             incmod  front, ##511
3841c     EF C1 6D FB |             djnz    qq,#p301
38420                 |             
38420     74 FD 9F FD |             jmp     #loop            'loop
38424                 | 
38424                 | '----------------------------------------------------------------------------------
38424                 | '------------- This is the end of the main loop -----------------------------------
38424                 | '----------------------------------------------------------------------------------
38424                 | 
38424                 | '----------------------------------------------------------------------------------
38424                 | '------------- PSRAM cache ----------- --------------------------------------------
38424                 | '----------------------------------------------------------------------------------
38424                 | 
38424                 | ' There are 8 cache pointers for 8 channels
38424                 | ' if 24 higher bits of address=cache, then get a word from the cache
38424                 | ' else load the cache from PSRAM, update the pointer, then read a sample
38424                 | 
38424                 | 
38424     E0 3A E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
38428                 |             
38428     E0 3C 02 F6 | 	    mov     addrhi,qq		
3842c     08 3C 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
38430     12 FD 95 F9 | 	    alts    cn,#cache1            
38434     00 3C 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
38438     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3843c                 | 	
3843c     12 FD 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
38440     1E 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
38444     1E 35 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
38448     08 34 66 F0 | 	    shl     cmd,#8
3844c     0B 34 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
38450     FE 36 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
38454     08 36 66 F0 |             shl     hubaddr,#8                  '
38458     11 37 02 F1 |             add     hubaddr,hubptr 
3845c     00 39 06 F6 |             mov     count,#256                  ' 256 bytes
38460     28 04 64 FD |             setq    #2                          ' write 3 longs
38464     E3 34 62 FC |             wrlong  cmd, mailbox                ' run it
38468     E3 34 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3846c     FE 35 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
38470                 |             
38470                 | 	
38470     FE C0 01 F6 | p701	    mov     qq,cn			' cache hit
38474     08 C0 65 F0 | 	    shl     qq,#8			' compute the cache start
38478     11 C1 01 F1 | 	    add     qq,hubptr
3847c     1D C1 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
38480     E0 C2 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
38484                 |           
38484                 | 
38484                 | '--------------------------------------------------------------------------
38484                 | '------ Interrupt service -------------------------------------------------
38484                 | '------ Output the sample, get the next one if exists ---------------------
38484                 | '--------------------------------------------------------------------------
38484                 | 
38484     0E CA 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
38488     0F CC 25 FC |             wypin   rsample,#right       '4
3848c     DF F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
38490     80 CF A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
38494     FF F3 07 57 |     if_ne   incmod  ptrb,#511
38498     E7 CC 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3849c     E7 CA 31 59 |     if_ne   getword lsample,lsnext,#0    '15
384a0                 |     
384a0     F5 FF 3B FB |             reti1                        '17/19 
384a4                 |           
384a4                 | '---------------------------------------------------------------------------
384a4                 | '-------- End of interrupt -------------------------------------------------
384a4                 | '---------------------------------------------------------------------------    
384a4                 | 
384a4                 | 
384a4                 | '---------------------------------------------------------------------------
384a4                 | '------- Variables ---------------------------------------------------------
384a4                 | '---------------------------------------------------------------------------
384a4                 | 
384a4                 | ' constants
384a4                 | 
384a4     00 00 00 40 | a40000000   long $40000000
384a8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
384ac                 | 
384ac                 | ' Time variables
384ac                 | 
384ac     00 00 00 00 | time0       long 0    ' Global sample computing time
384b0     01 00 00 00 | time1       long 1    ' Local channels time
384b4     02 00 00 00 | time2       long 2
384b8     03 00 00 00 | time3       long 3
384bc     04 00 00 00 | time4       long 4
384c0     05 00 00 00 | time5       long 5
384c4     06 00 00 00 | time6       long 6
384c8     07 00 00 00 | time7       long 7
384cc     08 00 00 00 | time8       long 8
384d0                 | 
384d0     00 00 00 00 | channeladd long 0
384d4                 | 
384d4     00 00 00 00 | front       long 0
384d8                 | 
384d8                 | ' temporary variables 
384d8     00 00 00 00 | qq          long 0
384dc     00 00 00 00 | spl         long 0
384e0     00 00 00 00 | zero        long 0
384e4     00 00 00 00 | mailbox     long 0
384e8     00 00 00 00 | mailbox2 long 0
384ec                 | 
384ec                 | ' Interrupt ISR variables
384ec                 | 
384ec     00 00 00 00 | lsample     long 0
384f0     00 00 00 00 | rsample     long 0
384f4     00 00 00 00 | lsnext      long 0
384f8     00 00 00 00 | rsnext      long 0 
384fc                 | 
384fc                 | ' channel parameter block
384fc                 | 
384fc     00 00 00 00 | pointer0    long 0     
38500     00 00 00 00 | sample0     long 0
38504     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
38508     00 00 00 00 | lstart0     long 0
3850c     00 00 00 00 | lend0       long 0
38510     00 00 00 00 | volpan0     long 0
38514     00 00 00 00 | freqskip0   long 0
38518     00 00 00 00 | command0    long 0
3851c     00 00 00 00 | envph0	    long 0
38520     00 00 00 00 | envptr0	    long 0
38524     00 00 00 00 | envspd0	    long 0
38528     00 00 00 00 | envlen0	    long 0
3852c     00 00 00 00 | res5	    long 0
38530     00 00 00 00 | res6	    long 0
38534     00 00 00 00 | res7	    long 0
38538     00 00 00 00 | res8	    long 0
3853c                 | 
3853c     00 00 00 00 | afreq0      long 0
38540     00 00 00 00 | askip0      long 0
38544     00 00 00 00 | avol0       long 0
38548     00 00 00 00 | apan0       long 0
3854c                 | 
3854c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
38550     00 00 00 00 | cn          long 0
38554     00 00 00 00 | ct          long 0
38558     00 00 00 00 | dt0         long 0
3855c                 | 
3855c                 | ' Samples
3855c     00 00 00 00 | oldls       long 0
38560     00 00 00 00 | oldrs       long 0
38564                 | 
38564     00 00 00 00 | ls0         long 0
38568     00 00 00 00 | rs0         long 0
3856c                 | 
3856c     00 00 00 00 | ls          long 0    
38570     00 00 00 00 | rs          long 0
38574                 | 
38574     00 00 00 00 | oldsample   long 0
38578     00 00 00 00 | newsample   long 0
3857c                 | 
3857c     00 00 00 00 | nrsample    long 0
38580     00 00 00 00 | nlsample    long 0
38584                 | 
38584     00 00 00 00 | scbase long 0
38588     00 00 00 00 | scptr long 0
3858c     00 00 00 00 | scptr2 long 0
38590     00 00 00 00 | scope long 0
38594                 | 
38594     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
38598     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3859c                 | 
3859c     00 18 07 00 | hubptr      long $71800
385a0     00 00 00 00 | cache1      long 0
385a4     00 00 00 00 | cache2      long 0
385a8     00 00 00 00 | cache3      long 0
385ac     00 00 00 00 | cache4      long 0
385b0     00 00 00 00 | cache5      long 0
385b4     00 00 00 00 | cache6      long 0
385b8     00 00 00 00 | cache7      long 0
385bc     00 00 00 00 | cache8      long 0
385c0                 | 
385c0                 | 
385c0     00 00 00 00 | cmd         long 0
385c4     00 00 00 00 | hubaddr     long 0
385c8     00 01 00 00 | count       long 256
385cc     00 00 00 00 | addrlo long 0
385d0     00 00 00 00 | addrhi long 0
385d4     00 00 00 00 | pointer00 long 0
385d8     00 00 00 00 | envhi long 0
385dc     00 00 00 00 | envlo long 0
385e0     00 00 00 00 | envs1 long 0
385e4     00 00 00 00 | envs2 long 0
385e8     00 00 00 00 | noise0 long 0
385ec     00 00 00 00 
385f0     00 00 00 00 | null  			long 	0,0           ' for channel reset
385f4                 | 	alignl
385f4                 | __system__dat_
385f4     00 00 00 00 
385f8     00 00 00 00 | 	byte	$00[8]
385fc     03 00 00 00 
38600     00 00 00 00 
38604     00 00 00 00 
38608     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3860c     00 00 00 00 
      ...             
38898     00 00 00 00 
3889c     00 00 00 00 | 	byte	$00[660]
388a0     00 00 A0 08 | 	long	(138 {__system____root_opendir})<<20
388a4     00 00 B0 08 | 	long	(139 {__system____root_closedir})<<20
388a8     00 00 C0 08 | 	long	(140 {__system____root_readdir})<<20
388ac     00 00 D0 08 | 	long	(141 {__system____root_stat})<<20
388b0     00 00 00 00 
388b4     00 00 00 00 
388b8     00 00 00 00 
388bc     00 00 00 00 
388c0     00 00 00 00 
388c4     00 00 00 00 
388c8     00 00 00 00 | 	byte	$00[28]
388cc     34 89 03 00 | 	long	@@@__system__dat_ + 832
388d0     37 89 03 00 | 	long	@@@__system__dat_ + 835
388d4     58 89 03 00 | 	long	@@@__system__dat_ + 868
388d8     71 89 03 00 | 	long	@@@__system__dat_ + 893
388dc     8C 89 03 00 | 	long	@@@__system__dat_ + 920
388e0     A6 89 03 00 | 	long	@@@__system__dat_ + 946
388e4     B6 89 03 00 | 	long	@@@__system__dat_ + 962
388e8     C8 89 03 00 | 	long	@@@__system__dat_ + 980
388ec     DA 89 03 00 | 	long	@@@__system__dat_ + 998
388f0     EC 89 03 00 | 	long	@@@__system__dat_ + 1016
388f4     F8 89 03 00 | 	long	@@@__system__dat_ + 1028
388f8     09 8A 03 00 | 	long	@@@__system__dat_ + 1045
388fc     1D 8A 03 00 | 	long	@@@__system__dat_ + 1065
38900     27 8A 03 00 | 	long	@@@__system__dat_ + 1075
38904     37 8A 03 00 | 	long	@@@__system__dat_ + 1091
38908     46 8A 03 00 | 	long	@@@__system__dat_ + 1106
3890c     5C 8A 03 00 | 	long	@@@__system__dat_ + 1128
38910     75 8A 03 00 | 	long	@@@__system__dat_ + 1153
38914     89 8A 03 00 | 	long	@@@__system__dat_ + 1173
38918     97 8A 03 00 | 	long	@@@__system__dat_ + 1187
3891c     AB 8A 03 00 | 	long	@@@__system__dat_ + 1207
38920     B7 8A 03 00 | 	long	@@@__system__dat_ + 1219
38924     C9 8A 03 00 | 	long	@@@__system__dat_ + 1237
38928     E1 8A 03 00 | 	long	@@@__system__dat_ + 1261
3892c     F3 8A 03 00 | 	long	@@@__system__dat_ + 1279
38930     06 8B 03 00 | 	long	@@@__system__dat_ + 1298
38934     4F 4B 00 4E 
38938     75 6D 65 72 
3893c     69 63 61 6C 
38940     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
38944     75 6D 65 6E 
38948     74 20 6F 75 
3894c     74 20 6F 66 
38950     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
38954     61 69 6E 00 
38958     52 65 73 75 
3895c     6C 74 20 6E 
38960     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
38964     65 70 72 65 
38968     73 65 6E 74 
3896c     61 62 6C 65 
38970     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
38974     65 67 61 6C 
38978     20 6D 75 6C 
3897c     74 69 62 79 
38980     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
38984     65 71 75 65 
38988     6E 63 65 00 
3898c     4E 6F 20 73 
38990     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
38994     66 69 6C 65 
38998     20 6F 72 20 
3899c     64 69 72 65 
389a0     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
389a4     79 00 42 61 
389a8     64 20 66 69 
389ac     6C 65 20 6E 
389b0     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
389b4     72 00 50 65 
389b8     72 6D 69 73 
389bc     73 69 6F 6E 
389c0     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
389c4     69 65 64 00 
389c8     4E 6F 74 20 
389cc     65 6E 6F 75 
389d0     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
389d4     65 6D 6F 72 
389d8     79 00 54 65 
389dc     6D 70 6F 72 
389e0     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
389e4     66 61 69 6C 
389e8     75 72 65 00 
389ec     46 69 6C 65 
389f0     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
389f4     73 74 73 00 
389f8     49 6E 76 61 
389fc     6C 69 64 20 
38a00     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
38a04     6D 65 6E 74 
38a08     00 54 6F 6F 
38a0c     20 6D 61 6E 
38a10     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
38a14     65 6E 20 66 
38a18     69 6C 65 73 
38a1c     00 49 2F 4F 
38a20     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
38a24     6F 72 00 4E 
38a28     6F 74 20 61 
38a2c     20 64 69 72 
38a30     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
38a34     72 79 00 49 
38a38     73 20 61 20 
38a3c     64 69 72 65 
38a40     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
38a44     79 00 52 65 
38a48     61 64 20 6F 
38a4c     6E 6C 79 20 
38a50     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
38a54     20 73 79 73 
38a58     74 65 6D 00 
38a5c     46 75 6E 63 
38a60     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
38a64     20 6E 6F 74 
38a68     20 69 6D 70 
38a6c     6C 65 6D 65 
38a70     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
38a74     00 44 69 72 
38a78     65 63 74 6F 
38a7c     72 79 20 6E 
38a80     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
38a84     6D 70 74 79 
38a88     00 4E 61 6D 
38a8c     65 20 74 6F 
38a90     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
38a94     6E 67 00 44 
38a98     65 76 69 63 
38a9c     65 20 6E 6F 
38aa0     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
38aa4     65 6B 61 62 
38aa8     6C 65 00 42 
38aac     61 64 20 61 
38ab0     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
38ab4     73 73 00 42 
38ab8     72 6F 6B 65 
38abc     6E 20 63 6F 
38ac0     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
38ac4     74 69 6F 6E 
38ac8     00 44 65 76 
38acc     69 63 65 20 
38ad0     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
38ad4     65 73 6F 75 
38ad8     72 63 65 20 
38adc     62 75 73 79 
38ae0     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
38ae4     73 73 20 64 
38ae8     65 76 69 63 
38aec     65 20 6C 69 
38af0     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
38af4     6F 20 73 70 
38af8     61 63 65 20 
38afc     6F 6E 20 64 
38b00     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
38b04     65 00 55 6E 
38b08     6B 6E 6F 77 
38b0c     6E 20 65 72 
38b10     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
38b14     00 00 00 00 
38b18     00 00 00 00 | 	byte	$00[8]
38b1c     05 00 00 00 
38b20     00 00 00 00 
38b24     00 00 00 00 
38b28     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b2c     00 00 00 00 | 	byte	$00, $00, $00, $00
38b30     00 00 20 0A | 	long	(162 {__system___tx})<<20
38b34     00 00 30 0A | 	long	(163 {__system___rx})<<20
38b38     00 00 00 00 | 	byte	$00, $00, $00, $00
38b3c     00 00 40 0A | 	long	(164 {__system___rxtxioctl_0640})<<20
38b40     00 00 50 0A | 	long	(165 {__system____dummy_flush_0641})<<20
38b44     00 00 00 00 
38b48     00 00 00 00 | 	byte	$00[8]
38b4c     01 00 00 00 
38b50     06 00 00 00 
38b54     00 00 00 00 
38b58     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b5c     00 00 00 00 
38b60     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
38b64     00 00 20 0A | 	long	(162 {__system___tx})<<20
38b68     00 00 30 0A | 	long	(163 {__system___rx})<<20
38b6c     00 00 00 00 | 	byte	$00, $00, $00, $00
38b70     00 00 40 0A | 	long	(164 {__system___rxtxioctl_0640})<<20
38b74     00 00 50 0A | 	long	(165 {__system____dummy_flush_0641})<<20
38b78     00 00 00 00 
38b7c     00 00 00 00 | 	byte	$00[8]
38b80     01 00 00 00 
38b84     06 00 00 00 
38b88     00 00 00 00 
38b8c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b90     00 00 00 00 
38b94     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
38b98     00 00 20 0A | 	long	(162 {__system___tx})<<20
38b9c     00 00 30 0A | 	long	(163 {__system___rx})<<20
38ba0     00 00 00 00 | 	byte	$00, $00, $00, $00
38ba4     00 00 40 0A | 	long	(164 {__system___rxtxioctl_0640})<<20
38ba8     00 00 50 0A | 	long	(165 {__system____dummy_flush_0641})<<20
38bac     00 00 00 00 
      ...             
38d1c     00 00 00 00 
38d20     00 00 00 00 | 	byte	$00[376]
38d24     28 8D 03 00 | 	long	@@@__system__dat_ + 1844
38d28     00 00 00 00 
38d2c     00 00 00 00 
38d30     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38d34                 | 	alignl
38d34                 | _fatfs_cc_dat_
38d34     C7 00 FC 00 
38d38     E9 00 E2 00 
38d3c     E4 00 E0 00 
38d40     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
38d44     EA 00 EB 00 
38d48     E8 00 EF 00 
38d4c     EE 00 EC 00 
38d50     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
38d54     C9 00 E6 00 
38d58     C6 00 F4 00 
38d5c     F6 00 F2 00 
38d60     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
38d64     FF 00 D6 00 
38d68     DC 00 F8 00 
38d6c     A3 00 D8 00 
38d70     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
38d74     E1 00 ED 00 
38d78     F3 00 FA 00 
38d7c     F1 00 D1 00 
38d80     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
38d84     BF 00 AE 00 
38d88     AC 00 BD 00 
38d8c     BC 00 A1 00 
38d90     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
38d94     91 25 92 25 
38d98     93 25 02 25 
38d9c     24 25 C1 00 
38da0     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
38da4     A9 00 63 25 
38da8     51 25 57 25 
38dac     5D 25 A2 00 
38db0     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
38db4     14 25 34 25 
38db8     2C 25 1C 25 
38dbc     00 25 3C 25 
38dc0     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
38dc4     5A 25 54 25 
38dc8     69 25 66 25 
38dcc     60 25 50 25 
38dd0     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
38dd4     F0 00 D0 00 
38dd8     CA 00 CB 00 
38ddc     C8 00 31 01 
38de0     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
38de4     CF 00 18 25 
38de8     0C 25 88 25 
38dec     84 25 A6 00 
38df0     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
38df4     D3 00 DF 00 
38df8     D4 00 D2 00 
38dfc     F5 00 D5 00 
38e00     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
38e04     DE 00 DA 00 
38e08     DB 00 D9 00 
38e0c     FD 00 DD 00 
38e10     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
38e14     AD 00 B1 00 
38e18     17 20 BE 00 
38e1c     B6 00 A7 00 
38e20     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
38e24     B0 00 A8 00 
38e28     B7 00 B9 00 
38e2c     B3 00 B2 00 
38e30     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
38e34     61 00 1A 03 
38e38     E0 00 17 03 
38e3c     F8 00 07 03 
38e40     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
38e44     78 01 00 01 
38e48     30 01 32 01 
38e4c     06 01 39 01 
38e50     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
38e54     2E 01 79 01 
38e58     06 01 80 01 
38e5c     4D 00 43 02 
38e60     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
38e64     82 01 84 01 
38e68     84 01 86 01 
38e6c     87 01 87 01 
38e70     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
38e74     8B 01 8B 01 
38e78     8D 01 8E 01 
38e7c     8F 01 90 01 
38e80     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
38e84     93 01 94 01 
38e88     F6 01 96 01 
38e8c     97 01 98 01 
38e90     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
38e94     9B 01 9C 01 
38e98     9D 01 20 02 
38e9c     9F 01 A0 01 
38ea0     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
38ea4     A2 01 A4 01 
38ea8     A4 01 A6 01 
38eac     A7 01 A7 01 
38eb0     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
38eb4     AB 01 AC 01 
38eb8     AC 01 AE 01 
38ebc     AF 01 AF 01 
38ec0     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
38ec4     B3 01 B3 01 
38ec8     B5 01 B5 01 
38ecc     B7 01 B8 01 
38ed0     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
38ed4     BB 01 BC 01 
38ed8     BC 01 BE 01 
38edc     F7 01 C0 01 
38ee0     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
38ee4     C3 01 C4 01 
38ee8     C5 01 C4 01 
38eec     C7 01 C8 01 
38ef0     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
38ef4     CB 01 CA 01 
38ef8     CD 01 10 01 
38efc     DD 01 01 00 
38f00     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
38f04     12 01 F3 01 
38f08     03 00 F1 01 
38f0c     F4 01 F4 01 
38f10     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
38f14     22 02 12 01 
38f18     3A 02 09 00 
38f1c     65 2C 3B 02 
38f20     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
38f24     66 2C 3F 02 
38f28     40 02 41 02 
38f2c     41 02 46 02 
38f30     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
38f34     40 00 81 01 
38f38     86 01 55 02 
38f3c     89 01 8A 01 
38f40     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
38f44     5A 02 90 01 
38f48     5C 02 5D 02 
38f4c     5E 02 5F 02 
38f50     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
38f54     62 02 94 01 
38f58     64 02 65 02 
38f5c     66 02 67 02 
38f60     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
38f64     6A 02 62 2C 
38f68     6C 02 6D 02 
38f6c     6E 02 9C 01 
38f70     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
38f74     9D 01 73 02 
38f78     74 02 9F 01 
38f7c     76 02 77 02 
38f80     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
38f84     7A 02 7B 02 
38f88     7C 02 64 2C 
38f8c     7E 02 7F 02 
38f90     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
38f94     82 02 A9 01 
38f98     84 02 85 02 
38f9c     86 02 87 02 
38fa0     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
38fa4     B1 01 B2 01 
38fa8     45 02 8D 02 
38fac     8E 02 8F 02 
38fb0     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
38fb4     B7 01 7B 03 
38fb8     03 00 FD 03 
38fbc     FE 03 FF 03 
38fc0     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
38fc4     86 03 88 03 
38fc8     89 03 8A 03 
38fcc     B1 03 11 03 
38fd0     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
38fd4     A3 03 A3 03 
38fd8     C4 03 08 03 
38fdc     CC 03 03 00 
38fe0     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
38fe4     8F 03 D8 03 
38fe8     18 01 F2 03 
38fec     0A 00 F9 03 
38ff0     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
38ff4     F5 03 F6 03 
38ff8     F7 03 F7 03 
38ffc     F9 03 FA 03 
39000     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
39004     20 03 50 04 
39008     10 07 60 04 
3900c     22 01 8A 04 
39010     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
39014     0E 01 CF 04 
39018     01 00 C0 04 
3901c     D0 04 44 01 
39020     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
39024     00 00 7D 1D 
39028     01 00 63 2C 
3902c     00 1E 96 01 
39030     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
39034     00 1F 08 06 
39038     10 1F 06 06 
3903c     20 1F 08 06 
39040     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
39044     40 1F 06 06 
39048     51 1F 07 00 
3904c     59 1F 52 1F 
39050     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
39054     5D 1F 56 1F 
39058     5F 1F 60 1F 
3905c     08 06 70 1F 
39060     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
39064     BB 1F C8 1F 
39068     C9 1F CA 1F 
3906c     CB 1F DA 1F 
39070     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
39074     F9 1F EA 1F 
39078     EB 1F FA 1F 
3907c     FB 1F 80 1F 
39080     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
39084     08 06 A0 1F 
39088     08 06 B0 1F 
3908c     04 00 B8 1F 
39090     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
39094     BC 1F CC 1F 
39098     01 00 C3 1F 
3909c     D0 1F 02 06 
390a0     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
390a4     E5 1F 01 00 
390a8     EC 1F F3 1F 
390ac     01 00 FC 1F 
390b0     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
390b4     32 21 70 21 
390b8     10 02 84 21 
390bc     01 00 83 21 
390c0     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
390c4     30 2C 2F 04 
390c8     60 2C 02 01 
390cc     67 2C 06 01 
390d0     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
390d4     80 2C 64 01 
390d8     00 2D 26 08 
390dc     41 FF 1A 03 
390e0     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
390e4     05 07 09 0E 
390e8     10 12 14 16 
390ec     18 1C 1E 43 
390f0     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
390f4     41 41 43 45 
390f8     45 45 49 49 
390fc     49 41 41 45 
39100     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
39104     4F 55 55 59 
39108     4F 55 4F 9C 
3910c     4F 9E 9F 41 
39110     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
39114     A5 A6 A7 A8 
39118     A9 AA AB AC 
3911c     AD AE AF B0 
39120     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
39124     41 41 41 B8 
39128     B9 BA BB BC 
3912c     BD BE BF C0 
39130     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
39134     C5 41 41 C8 
39138     C9 CA CB CC 
3913c     CD CE CF D1 
39140     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
39144     49 49 49 49 
39148     D9 DA DB DC 
3914c     DD 49 DF 4F 
39150     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
39154     4F E6 E8 E8 
39158     55 55 55 59 
3915c     59 EE EF F0 
39160     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
39164     F5 F6 F7 F8 
39168     F9 FA FB FC 
3916c     FD FE FF 00 
39170     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
39174     00 00 00 00 | 	byte	$00, $00, $00, $00
39178     00 00 10 09 | 	long	(145 {_fatfs_cc_v_close})<<20
3917c     00 00 20 09 | 	long	(146 {_fatfs_cc_v_read})<<20
39180     00 00 30 09 | 	long	(147 {_fatfs_cc_v_write})<<20
39184     00 00 40 09 | 	long	(148 {_fatfs_cc_v_lseek})<<20
39188     00 00 50 09 | 	long	(149 {_fatfs_cc_v_ioctl})<<20
3918c     00 00 60 0A | 	long	(166 {_fatfs_cc_v_flush})<<20
39190     00 00 00 00 
39194     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
39198     00 00 60 09 | 	long	(150 {_fatfs_cc_v_open})<<20
3919c     00 00 70 09 | 	long	(151 {_fatfs_cc_v_creat})<<20
391a0     00 00 80 09 | 	long	(152 {_fatfs_cc_v_opendir})<<20
391a4     00 00 90 09 | 	long	(153 {_fatfs_cc_v_closedir})<<20
391a8     00 00 A0 09 | 	long	(154 {_fatfs_cc_v_readdir})<<20
391ac     00 00 B0 09 | 	long	(155 {_fatfs_cc_v_stat})<<20
391b0     00 00 C0 09 | 	long	(156 {_fatfs_cc_v_mkdir})<<20
391b4     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_rmdir})<<20
391b8     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_remove})<<20
391bc     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_rename})<<20
391c0     00 00 00 0A | 	long	(160 {_fatfs_cc_v_init})<<20
391c4     00 00 10 0A | 	long	(161 {_fatfs_cc_v_deinit})<<20
391c8     FF FF FF FF 
391cc     1F 00 00 00 
391d0     1C 00 00 00 
391d4     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
391d8     1E 00 00 00 
391dc     1F 00 00 00 
391e0     1E 00 00 00 
391e4     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
391e8     1F 00 00 00 
391ec     1E 00 00 00 
391f0     1F 00 00 00 
391f4     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
391f8     1F 00 00 00 
391fc     00 00 00 00 
39200     1F 00 00 00 
39204     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
39208     5A 00 00 00 
3920c     78 00 00 00 
39210     97 00 00 00 
39214     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
39218     D4 00 00 00 
3921c     F3 00 00 00 
39220     11 01 00 00 
39224     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
39228     4E 01 00 00 
3922c     6D 01 00 00 
39230     FF FF FF FF 
39234     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
39238     00 00 00 00 
      ...             
39250     00 00 00 00 
39254     00 00 00 00 | 	byte	$00[32]
39258     76 92 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3925c     7A 92 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
39260     00 00 00 00 
39264     00 00 00 00 
39268     00 00 00 00 
3926c     00 00 00 00 
39270     00 00       | 	byte	$00[18]
39272     3F 3F 3F 00 
39276     55 43 54 00 
3927a     55 43 54 00 
3927e     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
39282     00 00 00 00 
39286     00 00 00    | 	byte	$00[7]
39289     CA 9A 3B 00 
3928d     00 00 00 01 
39291     01 01 01 01 
39295     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
39299     91 11 11 11 
3929d     11 01 01 01 
392a1     01 01 01 01 
392a5     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
392a9     01 01 01 01 
392ad     01 01 01    | 	byte	$01[7]
392b0     90 20 20 20 
392b4     20 20 20 20 
392b8     20 20 20 20 
392bc     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
392c0     42 42 42 42 
392c4     42 42 42 42 
392c8     42 42       | 	byte	$42[10]
392ca     20 20 20 20 
392ce     20 20 20    | 	byte	$20[7]
392d1     44 44 44 44 
392d5     44 44       | 	byte	$44[6]
392d7     04 04 04 04 
392db     04 04 04 04 
392df     04 04 04 04 
392e3     04 04 04 04 
392e7     04 04 04 04 | 	byte	$04[20]
392eb     20 20 20 20 
392ef     20 20       | 	byte	$20[6]
392f1     48 48 48 48 
392f5     48 48       | 	byte	$48[6]
392f7     08 08 08 08 
392fb     08 08 08 08 
392ff     08 08 08 08 
39303     08 08 08 08 
39307     08 08 08 08 | 	byte	$08[20]
3930b     20 20 20 20 
3930f     01 00 00 00 
39313     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
39314                 | __methodtable__
39314     EC 88 01 00 | 	long	@_do_no_command
39318     BC FF 00 00 | 	long	@_do_plus
3931c     A8 04 01 00 | 	long	@_do_minus
39320     70 09 01 00 | 	long	@_do_or
39324     88 0A 01 00 | 	long	@_do_mul
39328     14 10 01 00 | 	long	@_do_fdiv
3932c     58 08 01 00 | 	long	@_do_and
39330     F4 0D 01 00 | 	long	@_do_div
39334     DC 11 01 00 | 	long	@_do_mod
39338     FC 13 01 00 | 	long	@_do_shl
3933c     14 15 01 00 | 	long	@_do_shr
39340     2C 16 01 00 | 	long	@_do_power
39344     3C F3 00 00 | 	long	@_do_getvar
39348     D8 A9 00 00 | 	long	@_do_push
3934c     3C ED 00 00 | 	long	@_do_assign
39350     50 5A 01 00 | 	long	@_do_cls
39354     98 E5 00 00 | 	long	@_do_new
39358     F4 5A 01 00 | 	long	@_do_plot
3935c     C4 5B 01 00 | 	long	@_do_draw
39360     38 65 01 00 | 	long	@_do_print
39364     30 5E 01 00 | 	long	@_do_circle
39368     B8 5C 01 00 | 	long	@_do_fcircle
3936c     A8 5F 01 00 | 	long	@_do_box
39370     50 63 01 00 | 	long	@_do_frame
39374     BC 5A 01 00 | 	long	@_do_color
39378     A8 85 00 00 | 	long	@_do_for
3937c     00 89 00 00 | 	long	@_do_next
39380     FC E2 00 00 | 	long	@_do_list
39384     64 BD 00 00 | 	long	@_do_run
39388     F8 EB 00 00 | 	long	@_do_error
3938c     68 E7 00 00 | 	long	@_do_fast_goto
39390     58 E8 00 00 | 	long	@_do_find_goto
39394     68 EA 00 00 | 	long	@_do_slow_goto
39398     08 85 01 00 | 	long	@_do_nothing
3939c     1C B0 00 00 | 	long	@_test_csave
393a0     80 B3 00 00 | 	long	@_do_save
393a4     7C B7 00 00 | 	long	@_do_load
393a8     E4 73 01 00 | 	long	@_do_pinwrite
393ac     80 7E 01 00 | 	long	@_do_waitms
393b0     BC 7F 01 00 | 	long	@_do_waitvbl
393b4     5C 83 01 00 | 	long	@_do_if
393b8     40 84 01 00 | 	long	@_do_else
393bc     F4 17 01 00 | 	long	@_do_eq
393c0     6C 26 01 00 | 	long	@_do_ge
393c4     44 2B 01 00 | 	long	@_do_le
393c8     CC 1C 01 00 | 	long	@_do_gt
393cc     A4 21 01 00 | 	long	@_do_lt
393d0     1C 30 01 00 | 	long	@_do_ne
393d4     44 36 01 00 | 	long	@_do_rnd
393d8     0C 85 01 00 | 	long	@_do_brun
393dc     D8 87 01 00 | 	long	@_do_beep
393e0     EC 7F 01 00 | 	long	@_do_dir
393e4     00 6A 01 00 | 	long	@_do_paper
393e8     88 6A 01 00 | 	long	@_do_ink
393ec     24 6B 01 00 | 	long	@_do_font
393f0     A0 6B 01 00 | 	long	@_do_mode
393f4     44 87 01 00 | 	long	@_do_mouse
393f8     E8 59 01 00 | 	long	@_do_gettime
393fc     78 87 01 00 | 	long	@_do_cursor
39400     AC 87 01 00 | 	long	@_do_click
39404     74 57 01 00 | 	long	@_do_mousex
39408     B8 57 01 00 | 	long	@_do_mousey
3940c     40 58 01 00 | 	long	@_do_mousek
39410     FC 57 01 00 | 	long	@_do_mousew
39414     18 39 01 00 | 	long	@_do_sin
39418     BC 4E 01 00 | 	long	@_do_stick
3941c     40 50 01 00 | 	long	@_do_strig
39420     88 56 01 00 | 	long	@_do_sprite
39424     14 53 01 00 | 	long	@_do_defsprite
39428     C4 51 01 00 | 	long	@_do_getpixel
3942c     C8 7F 01 00 | 	long	@_do_waitclock
39430     F8 88 01 00 | 	long	@_do_negative
39434     84 58 01 00 | 	long	@_do_rdpin
39438     F0 58 01 00 | 	long	@_do_rqpin
3943c     64 59 01 00 | 	long	@_do_pinread
39440     7C 76 01 00 | 	long	@_do_wrpin
39444     FC 76 01 00 | 	long	@_do_wxpin
39448     7C 77 01 00 | 	long	@_do_wypin
3944c     6C 74 01 00 | 	long	@_do_pinfloat
39450     AC 74 01 00 | 	long	@_do_pinlo
39454     EC 74 01 00 | 	long	@_do_pinhi
39458     6C 75 01 00 | 	long	@_do_pinstart
3945c     2C 75 01 00 | 	long	@_do_pintoggle
39460     FC 77 01 00 | 	long	@_do_position
39464     74 48 01 00 | 	long	@_do_cos
39468     94 49 01 00 | 	long	@_do_tan
3946c     B8 4C 01 00 | 	long	@_do_atn
39470     A0 4A 01 00 | 	long	@_do_asin
39474     AC 4B 01 00 | 	long	@_do_acos
39478     CC 4D 01 00 | 	long	@_do_sqr
3947c     90 61 01 00 | 	long	@_do_fill
39480     04 D9 00 00 | 	long	@_do_defsnd
39484     EC C0 00 00 | 	long	@_do_defenv
39488     64 84 01 00 | 	long	@_do_rad
3948c     8C 84 01 00 | 	long	@_do_deg
39490     B4 84 01 00 | 	long	@_do_int
39494     94 CD 00 00 | 	long	@_do_play
39498     44 71 01 00 | 	long	@_do_setdelay
3949c     9C 70 01 00 | 	long	@_do_setenv
394a0     EC 71 01 00 | 	long	@_do_setlen
394a4     3C 73 01 00 | 	long	@_do_setpan
394a8     94 72 01 00 | 	long	@_do_setvol
394ac     4C 6F 01 00 | 	long	@_do_setwave
394b0     F4 6F 01 00 | 	long	@_do_setsustain
394b4     6C D8 00 00 | 	long	@_do_release
394b8     0C 38 01 00 | 	long	@_do_getenvsustain
394bc     84 78 01 00 | 	long	@_do_poke
394c0     5C 79 01 00 | 	long	@_do_dpoke
394c4     34 7A 01 00 | 	long	@_do_lpoke
394c8     0C 7B 01 00 | 	long	@_do_peek
394cc     BC 7B 01 00 | 	long	@_do_dpeek
394d0     68 7C 01 00 | 	long	@_do_lpeek
394d4     78 7D 01 00 | 	long	@_do_adr
394d8     14 7D 01 00 | 	long	@_do_fre
394dc     7C 7D 01 00 | 	long	@_do_getnotevalue
394e0     F4 F8 00 00 | 	long	@_do_getaddr
394e4     E4 FC 00 00 | 	long	@_do_inkey
394e8     A8 89 01 00 | 	long	@_do_abs
394ec     B4 45 01 00 | 	long	@_do_hex
394f0     14 47 01 00 | 	long	@_do_bin
394f4     B0 42 01 00 | 	long	@_do_val
394f8     B4 41 01 00 | 	long	@_do_chr
394fc     F0 3E 01 00 | 	long	@_do_asc
39500     6C 3D 01 00 | 	long	@_do_left
39504     E8 3B 01 00 | 	long	@_do_right
39508     24 3A 01 00 | 	long	@_do_mid
3950c     48 40 01 00 | 	long	@_do_len
39510     90 84 00 00 | 	long	@_do_gosub
39514     1C 88 00 00 | 	long	@_do_return
39518     30 BD 00 00 | 	long	@_do_end
3951c     C8 88 00 00 | 	long	@_do_pop
39520     80 D5 01 00 | 	long	@_hg010b_spin2_putchar
39524     18 E0 02 00 | 	long	@__struct___bas_wrap_sender_tx
39528     5C E0 02 00 | 	long	@__struct___bas_wrap_sender_rx
3952c     A4 E0 02 00 | 	long	@__struct___bas_wrap_sender_close
39530     48 DF 02 00 | 	long	@__struct__s_vfs_file_t_putchar
39534     B8 DF 02 00 | 	long	@__struct__s_vfs_file_t_getchar
39538     00 DF 02 00 | 	long	@___strs_cl_pfunc
3953c     5C 3E 02 00 | 	long	@__system____root_opendir
39540     F8 3E 02 00 | 	long	@__system____root_closedir
39544     74 3E 02 00 | 	long	@__system____root_readdir
39548     00 3F 02 00 | 	long	@__system____root_stat
3954c     88 37 02 00 | 	long	@__system____default_putc
39550     0C 37 02 00 | 	long	@__system____default_getc
39554     30 38 02 00 | 	long	@__system____default_flush
39558     04 CA 02 00 | 	long	@_fatfs_cc_v_close
3955c     20 CE 02 00 | 	long	@_fatfs_cc_v_read
39560     34 CF 02 00 | 	long	@_fatfs_cc_v_write
39564     14 D0 02 00 | 	long	@_fatfs_cc_v_lseek
39568     9C D0 02 00 | 	long	@_fatfs_cc_v_ioctl
3956c     F0 D0 02 00 | 	long	@_fatfs_cc_v_open
39570     68 C9 02 00 | 	long	@_fatfs_cc_v_creat
39574     48 CA 02 00 | 	long	@_fatfs_cc_v_opendir
39578     BC CA 02 00 | 	long	@_fatfs_cc_v_closedir
3957c     FC CA 02 00 | 	long	@_fatfs_cc_v_readdir
39580     30 CC 02 00 | 	long	@_fatfs_cc_v_stat
39584     B0 D0 02 00 | 	long	@_fatfs_cc_v_mkdir
39588     D0 D0 02 00 | 	long	@_fatfs_cc_v_rmdir
3958c     C0 D0 02 00 | 	long	@_fatfs_cc_v_remove
39590     E0 D0 02 00 | 	long	@_fatfs_cc_v_rename
39594     00 D2 02 00 | 	long	@_fatfs_cc_v_init
39598     08 D2 02 00 | 	long	@_fatfs_cc_v_deinit
3959c     30 EC 01 00 | 	long	@__system___tx
395a0     70 EC 01 00 | 	long	@__system___rx
395a4     6C 4A 02 00 | 	long	@__system___rxtxioctl_0640
395a8     C4 4A 02 00 | 	long	@__system____dummy_flush_0641
395ac     D0 D1 02 00 | 	long	@_fatfs_cc_v_flush
395b0                 | __heap_base
395b0     00 00 00 00 
      ...             
683b0     00 00 00 00 
683b4     00 00 00 00 | 	long	0[48002]
683b8                 | objmem
683b8     00 00 00 00 
      ...             
777ec     00 00 00 00 
777f0     00 00 00 00 | 	long	0[15631]
777f4                 | stackspace
777f4     00 00 00 00 | 	long	0[1]
777f8 100             | 	org	COG_BSS_START
777f8 100             | _var01
777f8 100             | 	res	1
777f8 101             | _var02
777f8 101             | 	res	1
777f8 102             | _var03
777f8 102             | 	res	1
777f8 103             | _var04
777f8 103             | 	res	1
777f8 104             | _var05
777f8 104             | 	res	1
777f8 105             | _var06
777f8 105             | 	res	1
777f8 106             | _var07
777f8 106             | 	res	1
777f8 107             | _var08
777f8 107             | 	res	1
777f8 108             | _var09
777f8 108             | 	res	1
777f8 109             | arg01
777f8 109             | 	res	1
777f8 10a             | arg02
777f8 10a             | 	res	1
777f8 10b             | arg03
777f8 10b             | 	res	1
777f8 10c             | arg04
777f8 10c             | 	res	1
777f8 10d             | arg05
777f8 10d             | 	res	1
777f8 10e             | arg06
777f8 10e             | 	res	1
777f8 10f             | local01
777f8 10f             | 	res	1
777f8 110             | local02
777f8 110             | 	res	1
777f8 111             | local03
777f8 111             | 	res	1
777f8 112             | local04
777f8 112             | 	res	1
777f8 113             | local05
777f8 113             | 	res	1
777f8 114             | local06
777f8 114             | 	res	1
777f8 115             | local07
777f8 115             | 	res	1
777f8 116             | local08
777f8 116             | 	res	1
777f8 117             | local09
777f8 117             | 	res	1
777f8 118             | local10
777f8 118             | 	res	1
777f8 119             | local11
777f8 119             | 	res	1
777f8 11a             | local12
777f8 11a             | 	res	1
777f8 11b             | local13
777f8 11b             | 	res	1
777f8 11c             | local14
777f8 11c             | 	res	1
777f8 11d             | local15
777f8 11d             | 	res	1
777f8 11e             | local16
777f8 11e             | 	res	1
777f8 11f             | local17
777f8 11f             | 	res	1
777f8 120             | local18
777f8 120             | 	res	1
777f8 121             | local19
777f8 121             | 	res	1
777f8 122             | local20
777f8 122             | 	res	1
777f8 123             | local21
777f8 123             | 	res	1
777f8 124             | local22
777f8 124             | 	res	1
777f8 125             | local23
777f8 125             | 	res	1
777f8 126             | local24
777f8 126             | 	res	1
777f8 127             | local25
777f8 127             | 	res	1
777f8 128             | local26
777f8 128             | 	res	1
777f8 129             | local27
777f8 129             | 	res	1
777f8 12a             | local28
777f8 12a             | 	res	1
777f8 12b             | local29
777f8 12b             | 	res	1
777f8 12c             | local30
777f8 12c             | 	res	1
777f8 12d             | local31
777f8 12d             | 	res	1
777f8 12e             | local32
777f8 12e             | 	res	1
777f8 12f             | local33
777f8 12f             | 	res	1
777f8 130             | local34
777f8 130             | 	res	1
777f8 131             | local35
777f8 131             | 	res	1
777f8 132             | muldiva_
777f8 132             | 	res	1
777f8 133             | muldivb_
777f8 133             | 	res	1
777f8 134             | 	fit	480
777f8 134             | 
