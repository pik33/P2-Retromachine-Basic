00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic028.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 27
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 10 94 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 1C 7A 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed B0 77 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 24 68 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 90 6A 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 F4 65 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 F4 D2 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 D0 71 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 68 04 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 18 2C 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa D0 29 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb A8 3B 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 44 5F 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     49 E4 05 F1 | 	add	objptr, #73
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7B 00 00 FF 
00818     1B E4 05 F1 | 	add	objptr, ##63003
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7B 00 00 FF 
0082c     64 E4 85 F1 | 	sub	objptr, ##63076
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     3C CB B1 FD | 	call	#__system___waitms
0083c     7B 00 00 FF 
00840     64 E4 05 F1 | 	add	objptr, ##63076
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7B 00 00 FF 
00854     64 E4 85 F1 | 	sub	objptr, ##63076
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     14 CB B1 FD | 	call	#__system___waitms
00864     7B 00 00 FF 
00868     64 E4 05 F1 | 	add	objptr, ##63076
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7B 00 00 FF 
0087c     64 E4 85 F1 | 	sub	objptr, ##63076
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     EC CA B1 FD | 	call	#__system___waitms
0088c     7B 00 00 FF 
00890     64 E4 05 F1 | 	add	objptr, ##63076
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7B 00 00 FF 
008a4     64 E4 85 F1 | 	sub	objptr, ##63076
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     7A 00 00 FF 
008d4     DC E5 05 F1 | 	add	objptr, ##62940
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     7A 00 00 FF 
00914     E4 E5 85 F1 | 	sub	objptr, ##62948
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     80 C0 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     D0 C0 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     C0 C0 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     7A 00 00 FF 
00980     EC E5 05 F1 | 	add	objptr, ##62956
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     7B 00 00 FF 
009ac     08 E4 85 F1 | 	sub	objptr, ##62984
009b0     24 C0 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     7A 00 00 FF 
009e0     EC E5 05 F1 | 	add	objptr, ##62956
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     7B 00 00 FF 
00a08     08 E4 85 F1 | 	sub	objptr, ##62984
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     57 00 00 FF 
00a30     0C E4 05 F1 | 	add	objptr, ##44556
00a34     F2 12 02 FB | 	rdlong	arg01, objptr
00a38     57 00 00 FF 
00a3c     0C E4 85 F1 | 	sub	objptr, ##44556
00a40     14 EB B1 FD | 	call	#__system__RTrim_S
00a44     FD 12 02 F6 | 	mov	arg01, result1
00a48     4C EA B1 FD | 	call	#__system__LTrim_S
00a4c     57 00 00 FF 
00a50     10 E4 05 F1 | 	add	objptr, ##44560
00a54     F2 FA 61 FC | 	wrlong	result1, objptr
00a58     04 E4 05 F1 | 	add	objptr, #4
00a5c     FF FF FF FF 
00a60     F2 FE 6B FC | 	wrlong	##-1, objptr
00a64     24 00 00 FF 
00a68     6C E4 05 F1 | 	add	objptr, ##18540
00a6c     F2 00 68 FC | 	wrlong	#0, objptr
00a70     11 00 00 FF 
00a74     14 E4 85 F1 | 	sub	objptr, ##8724
00a78     F2 00 68 FC | 	wrlong	#0, objptr
00a7c     6A 00 00 FF 
00a80     6C E4 85 F1 | 	sub	objptr, ##54380
00a84     00 1E 06 F6 | 	mov	local01, #0
00a88                 | LR__0020
00a88                 | ' 
00a88                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a88                 | ' 
00a88                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
00a88                 | ' 
00a88                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a88     00 20 06 F6 | 	mov	local02, #0
00a8c     20 4E 05 F1 | 	add	fp, #32
00a90     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a94                 | LR__0021
00a94     10 23 02 F6 | 	mov	local03, local02
00a98     02 22 66 F0 | 	shl	local03, #2
00a9c     A7 22 02 F1 | 	add	local03, fp
00aa0     11 01 68 FC | 	wrlong	#0, local03
00aa4     01 20 06 F1 | 	add	local02, #1
00aa8     7E 20 56 F2 | 	cmps	local02, #126 wc
00aac     E4 FF 9F CD |  if_b	jmp	#LR__0021
00ab0                 | LR__0022
00ab0     20 4E 85 F1 | 	sub	fp, #32
00ab4                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00ab4     00 20 06 F6 | 	mov	local02, #0
00ab8     54 00 00 FF 
00abc     FC E5 05 F1 | 	add	objptr, ##43516
00ac0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00ac4                 | LR__0023
00ac4     10 25 02 F6 | 	mov	local04, local02
00ac8     03 24 66 F0 | 	shl	local04, #3
00acc     F2 24 02 F1 | 	add	local04, objptr
00ad0     63 01 00 FF 
00ad4     C2 16 06 F6 | 	mov	arg03, ##@LR__4617
00ad8     12 17 62 FC | 	wrlong	arg03, local04
00adc     10 25 02 F6 | 	mov	local04, local02
00ae0     03 24 66 F0 | 	shl	local04, #3
00ae4     F2 26 02 F6 | 	mov	local05, objptr
00ae8     F2 24 02 F1 | 	add	local04, objptr
00aec     00 28 06 F6 | 	mov	local06, #0
00af0     04 24 06 F1 | 	add	local04, #4
00af4     12 01 68 FC | 	wrlong	#0, local04
00af8     01 20 06 F1 | 	add	local02, #1
00afc     7E 20 56 F2 | 	cmps	local02, #126 wc
00b00     C0 FF 9F CD |  if_b	jmp	#LR__0023
00b04                 | LR__0024
00b04     02 00 00 FF 
00b08     10 E4 05 F1 | 	add	objptr, ##1040
00b0c     F2 12 02 FB | 	rdlong	arg01, objptr
00b10     57 00 00 FF 
00b14     0C E4 85 F1 | 	sub	objptr, ##44556
00b18     3C EA B1 FD | 	call	#__system__RTrim_S
00b1c     FD 12 02 F6 | 	mov	arg01, result1
00b20     74 E9 B1 FD | 	call	#__system__LTrim_S
00b24     57 00 00 FF 
00b28     0C E4 05 F1 | 	add	objptr, ##44556
00b2c     F2 FA 61 FC | 	wrlong	result1, objptr
00b30     63 01 00 FF 
00b34     C3 24 06 F6 | 	mov	local04, ##@LR__4618
00b38     24 00 00 FF 
00b3c     B8 E4 05 F1 | 	add	objptr, ##18616
00b40     F2 24 62 FC | 	wrlong	local04, objptr
00b44     24 00 00 FF 
00b48     B8 E4 85 F1 | 	sub	objptr, ##18616
00b4c     F2 12 02 FB | 	rdlong	arg01, objptr
00b50     57 00 00 FF 
00b54     0C E4 85 F1 | 	sub	objptr, ##44556
00b58     09 2B 02 F6 | 	mov	local07, arg01
00b5c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b60                 | LR__0025
00b60     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b64     01 2A 06 51 |  if_ne	add	local07, #1
00b68     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b6c                 | LR__0026
00b6c     09 2B 8A F1 | 	sub	local07, arg01 wz
00b70     7B 00 00 FF 
00b74     C8 E4 05 F1 | 	add	objptr, ##63176
00b78     F2 2A 62 FC | 	wrlong	local07, objptr
00b7c                 | ' if l=0 then goto 101
00b7c     7B 00 00 FF 
00b80     C8 E4 85 F1 | 	sub	objptr, ##63176
00b84     B8 27 90 AD |  if_e	jmp	#LR__0149
00b88     7B 00 00 FF 
00b8c     CC E4 05 F1 | 	add	objptr, ##63180
00b90     F2 00 68 FC | 	wrlong	#0, objptr
00b94                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b94                 | ' for i=1 to len(line$)
00b94     01 20 06 F6 | 	mov	local02, #1
00b98     24 00 00 FF 
00b9c     C0 E4 85 F1 | 	sub	objptr, ##18624
00ba0     F2 12 02 FB | 	rdlong	arg01, objptr
00ba4     57 00 00 FF 
00ba8     0C E4 85 F1 | 	sub	objptr, ##44556
00bac     09 2B 02 F6 | 	mov	local07, arg01
00bb0     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb4                 | LR__0027
00bb4     15 FB C9 FA | 	rdbyte	result1, local07 wz
00bb8     01 2A 06 51 |  if_ne	add	local07, #1
00bbc     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bc0                 | LR__0028
00bc0     09 2B 82 F1 | 	sub	local07, arg01
00bc4     15 2D 02 F6 | 	mov	local08, local07
00bc8     01 2C 06 F1 | 	add	local08, #1
00bcc                 | LR__0029
00bcc     16 21 52 F2 | 	cmps	local02, local08 wc
00bd0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bd4                 | ' 
00bd4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bd4     57 00 00 FF 
00bd8     0C E4 05 F1 | 	add	objptr, ##44556
00bdc     F2 12 02 FB | 	rdlong	arg01, objptr
00be0     57 00 00 FF 
00be4     0C E4 85 F1 | 	sub	objptr, ##44556
00be8     10 15 02 F6 | 	mov	arg02, local02
00bec     01 16 06 F6 | 	mov	arg03, #1
00bf0     EC E5 B1 FD | 	call	#__system__Mid_S
00bf4     FD 12 02 F6 | 	mov	arg01, result1
00bf8     63 01 00 FF 
00bfc     C4 14 06 F6 | 	mov	arg02, ##@LR__4619
00c00     A8 C4 B1 FD | 	call	#__system___string_cmp
00c04     00 FA 0D F2 | 	cmp	result1, #0 wz
00c08     2C 00 90 5D |  if_ne	jmp	#LR__0030
00c0c     7B 00 00 FF 
00c10     CC E4 05 F1 | 	add	objptr, ##63180
00c14     F2 22 0A FB | 	rdlong	local03, objptr wz
00c18     7B 00 00 FF 
00c1c     CC E4 85 F1 | 	sub	objptr, ##63180
00c20     7B 00 00 AF 
00c24     CC E4 05 A1 |  if_e	add	objptr, ##63180
00c28     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c2c     7B 00 00 AF 
00c30     CC E4 85 A1 |  if_e	sub	objptr, ##63180
00c34     60 00 90 AD |  if_e	jmp	#LR__0031
00c38                 | LR__0030
00c38     57 00 00 FF 
00c3c     0C E4 05 F1 | 	add	objptr, ##44556
00c40     F2 12 02 FB | 	rdlong	arg01, objptr
00c44     57 00 00 FF 
00c48     0C E4 85 F1 | 	sub	objptr, ##44556
00c4c     10 15 02 F6 | 	mov	arg02, local02
00c50     01 16 06 F6 | 	mov	arg03, #1
00c54     88 E5 B1 FD | 	call	#__system__Mid_S
00c58     FD 12 02 F6 | 	mov	arg01, result1
00c5c     63 01 00 FF 
00c60     C6 14 06 F6 | 	mov	arg02, ##@LR__4620
00c64     44 C4 B1 FD | 	call	#__system___string_cmp
00c68     00 FA 0D F2 | 	cmp	result1, #0 wz
00c6c     7B 00 00 AF 
00c70     CC E4 05 A1 |  if_e	add	objptr, ##63180
00c74     F2 22 02 AB |  if_e	rdlong	local03, objptr
00c78     7B 00 00 AF 
00c7c     CC E4 85 A1 |  if_e	sub	objptr, ##63180
00c80     01 22 0E A2 |  if_e	cmp	local03, #1 wz
00c84     7B 00 00 AF 
00c88     CC E4 05 A1 |  if_e	add	objptr, ##63180
00c8c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c90     7B 00 00 AF 
00c94     CC E4 85 A1 |  if_e	sub	objptr, ##63180
00c98                 | LR__0031
00c98     10 25 02 F6 | 	mov	local04, local02
00c9c     03 24 66 F0 | 	shl	local04, #3
00ca0     54 00 00 FF 
00ca4     FC E5 05 F1 | 	add	objptr, ##43516
00ca8     F2 26 02 F6 | 	mov	local05, objptr
00cac     F2 24 02 F1 | 	add	local04, objptr
00cb0     26 00 00 FF 
00cb4     D0 E4 05 F1 | 	add	objptr, ##19664
00cb8     F2 28 02 FB | 	rdlong	local06, objptr
00cbc     7B 00 00 FF 
00cc0     CC E4 85 F1 | 	sub	objptr, ##63180
00cc4     04 24 06 F1 | 	add	local04, #4
00cc8     12 29 62 FC | 	wrlong	local06, local04
00ccc     01 20 06 F1 | 	add	local02, #1
00cd0     F8 FE 9F FD | 	jmp	#LR__0029
00cd4                 | LR__0032
00cd4     01 20 06 F6 | 	mov	local02, #1
00cd8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cd8                 | LR__0033
00cd8     57 00 00 FF 
00cdc     0C E4 05 F1 | 	add	objptr, ##44556
00ce0     F2 12 02 FB | 	rdlong	arg01, objptr
00ce4     57 00 00 FF 
00ce8     0C E4 85 F1 | 	sub	objptr, ##44556
00cec     10 15 02 F6 | 	mov	arg02, local02
00cf0     01 16 06 F6 | 	mov	arg03, #1
00cf4     E8 E4 B1 FD | 	call	#__system__Mid_S
00cf8     FD 12 02 F6 | 	mov	arg01, result1
00cfc     63 01 00 FF 
00d00     C8 2E 06 F6 | 	mov	local09, ##@LR__4621
00d04     17 15 02 F6 | 	mov	arg02, local09
00d08     A0 C3 B1 FD | 	call	#__system___string_cmp
00d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
00d10     34 00 90 5D |  if_ne	jmp	#LR__0034
00d14     10 27 02 F6 | 	mov	local05, local02
00d18     03 26 66 F0 | 	shl	local05, #3
00d1c     54 00 00 FF 
00d20     FC E5 05 F1 | 	add	objptr, ##43516
00d24     F2 28 02 F6 | 	mov	local06, objptr
00d28     F2 26 02 F1 | 	add	local05, objptr
00d2c     04 26 06 F1 | 	add	local05, #4
00d30     13 31 02 FB | 	rdlong	local10, local05
00d34     04 26 86 F1 | 	sub	local05, #4
00d38     18 33 0A F6 | 	mov	local11, local10 wz
00d3c     54 00 00 FF 
00d40     FC E5 85 F1 | 	sub	objptr, ##43516
00d44     24 00 90 AD |  if_e	jmp	#LR__0035
00d48                 | LR__0034
00d48     7B 00 00 FF 
00d4c     C8 E4 05 F1 | 	add	objptr, ##63176
00d50     F2 34 02 FB | 	rdlong	local12, objptr
00d54     7B 00 00 FF 
00d58     C8 E4 85 F1 | 	sub	objptr, ##63176
00d5c     1A 37 02 F6 | 	mov	local13, local12
00d60     1B 21 52 F2 | 	cmps	local02, local13 wc
00d64     01 20 06 C1 |  if_b	add	local02, #1
00d68     6C FF 9F CD |  if_b	jmp	#LR__0033
00d6c                 | LR__0035
00d6c                 | ' 
00d6c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d6c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d6c     7B 00 00 FF 
00d70     C8 E4 05 F1 | 	add	objptr, ##63176
00d74     F2 24 02 FB | 	rdlong	local04, objptr
00d78     7B 00 00 FF 
00d7c     C8 E4 85 F1 | 	sub	objptr, ##63176
00d80     12 21 52 F2 | 	cmps	local02, local04 wc
00d84     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d88     57 00 00 FF 
00d8c     0C E4 05 F1 | 	add	objptr, ##44556
00d90     F2 28 02 FB | 	rdlong	local06, objptr
00d94     57 00 00 FF 
00d98     0C E4 85 F1 | 	sub	objptr, ##44556
00d9c     14 13 02 F6 | 	mov	arg01, local06
00da0     09 2B 02 F6 | 	mov	local07, arg01
00da4     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00da8                 | LR__0036
00da8     15 FB C9 FA | 	rdbyte	result1, local07 wz
00dac     01 2A 06 51 |  if_ne	add	local07, #1
00db0     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00db4                 | LR__0037
00db4     09 2B 82 F1 | 	sub	local07, arg01
00db8     15 15 02 F6 | 	mov	arg02, local07
00dbc     10 15 82 F1 | 	sub	arg02, local02
00dc0     14 13 02 F6 | 	mov	arg01, local06
00dc4     88 E3 B1 FD | 	call	#__system__Right_S
00dc8     FD 12 02 F6 | 	mov	arg01, result1
00dcc     88 E7 B1 FD | 	call	#__system__RTrim_S
00dd0     FD 12 02 F6 | 	mov	arg01, result1
00dd4     C0 E6 B1 FD | 	call	#__system__LTrim_S
00dd8     7B 00 00 FF 
00ddc     D0 E4 05 F1 | 	add	objptr, ##63184
00de0     F2 FA 61 FC | 	wrlong	result1, objptr
00de4     24 00 00 FF 
00de8     C4 E4 85 F1 | 	sub	objptr, ##18628
00dec     F2 12 02 FB | 	rdlong	arg01, objptr
00df0     57 00 00 FF 
00df4     0C E4 85 F1 | 	sub	objptr, ##44556
00df8     01 20 86 F1 | 	sub	local02, #1
00dfc     10 15 02 F6 | 	mov	arg02, local02
00e00     C4 E2 B1 FD | 	call	#__system__Left_S
00e04     FD 12 02 F6 | 	mov	arg01, result1
00e08     4C E7 B1 FD | 	call	#__system__RTrim_S
00e0c     FD 12 02 F6 | 	mov	arg01, result1
00e10     84 E6 B1 FD | 	call	#__system__LTrim_S
00e14     57 00 00 FF 
00e18     0C E4 05 F1 | 	add	objptr, ##44556
00e1c     F2 FA 61 FC | 	wrlong	result1, objptr
00e20     57 00 00 FF 
00e24     0C E4 85 F1 | 	sub	objptr, ##44556
00e28     1C 00 90 FD | 	jmp	#LR__0039
00e2c                 | LR__0038
00e2c     63 01 00 FF 
00e30     CA 24 06 F6 | 	mov	local04, ##@LR__4622
00e34     7B 00 00 FF 
00e38     D0 E4 05 F1 | 	add	objptr, ##63184
00e3c     F2 24 62 FC | 	wrlong	local04, objptr
00e40     7B 00 00 FF 
00e44     D0 E4 85 F1 | 	sub	objptr, ##63184
00e48                 | LR__0039
00e48                 | ' 'print "line$=";line$
00e48                 | ' 'print "rest$=";rest$
00e48                 | ' 
00e48                 | ' 
00e48                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e48     57 00 00 FF 
00e4c     14 E4 05 F1 | 	add	objptr, ##44564
00e50     F2 24 02 FB | 	rdlong	local04, objptr
00e54     57 00 00 FF 
00e58     14 E4 85 F1 | 	sub	objptr, ##44564
00e5c     FF FF 7F FF 
00e60     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00e64     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e68     7B 00 00 FF 
00e6c     D0 E4 05 F1 | 	add	objptr, ##63184
00e70     F2 12 02 FB | 	rdlong	arg01, objptr
00e74     7B 00 00 FF 
00e78     D0 E4 85 F1 | 	sub	objptr, ##63184
00e7c     63 01 00 FF 
00e80     CB 14 06 F6 | 	mov	arg02, ##@LR__4623
00e84     24 C2 B1 FD | 	call	#__system___string_cmp
00e88     00 FA 0D F2 | 	cmp	result1, #0 wz
00e8c     57 00 00 5F 
00e90     14 E4 05 51 |  if_ne	add	objptr, ##44564
00e94     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e98     57 00 00 5F 
00e9c     14 E4 85 51 |  if_ne	sub	objptr, ##44564
00ea0     08 01 90 5D |  if_ne	jmp	#LR__0044
00ea4                 | LR__0040
00ea4                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00ea4     57 00 00 FF 
00ea8     14 E4 05 F1 | 	add	objptr, ##44564
00eac     F2 24 02 FB | 	rdlong	local04, objptr
00eb0     57 00 00 FF 
00eb4     14 E4 85 F1 | 	sub	objptr, ##44564
00eb8     FF FF 7F FF 
00ebc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00ec0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ec4     7B 00 00 FF 
00ec8     D0 E4 05 F1 | 	add	objptr, ##63184
00ecc     F2 12 02 FB | 	rdlong	arg01, objptr
00ed0     7B 00 00 FF 
00ed4     D0 E4 85 F1 | 	sub	objptr, ##63184
00ed8     63 01 00 FF 
00edc     CC 14 06 F6 | 	mov	arg02, ##@LR__4624
00ee0     C8 C1 B1 FD | 	call	#__system___string_cmp
00ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ee8     57 00 00 AF 
00eec     14 E4 05 A1 |  if_e	add	objptr, ##44564
00ef0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ef4     57 00 00 AF 
00ef8     14 E4 85 A1 |  if_e	sub	objptr, ##44564
00efc     AC 00 90 AD |  if_e	jmp	#LR__0044
00f00                 | LR__0041
00f00                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00f00     57 00 00 FF 
00f04     14 E4 05 F1 | 	add	objptr, ##44564
00f08     F2 24 02 FB | 	rdlong	local04, objptr
00f0c     57 00 00 FF 
00f10     14 E4 85 F1 | 	sub	objptr, ##44564
00f14     04 24 0E F2 | 	cmp	local04, #4 wz
00f18     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f1c     7B 00 00 FF 
00f20     D0 E4 05 F1 | 	add	objptr, ##63184
00f24     F2 12 02 FB | 	rdlong	arg01, objptr
00f28     7B 00 00 FF 
00f2c     D0 E4 85 F1 | 	sub	objptr, ##63184
00f30     63 01 00 FF 
00f34     CD 14 06 F6 | 	mov	arg02, ##@LR__4625
00f38     70 C1 B1 FD | 	call	#__system___string_cmp
00f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f40     57 00 00 5F 
00f44     14 E4 05 51 |  if_ne	add	objptr, ##44564
00f48     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f4c     57 00 00 5F 
00f50     14 E4 85 51 |  if_ne	sub	objptr, ##44564
00f54     54 00 90 5D |  if_ne	jmp	#LR__0044
00f58                 | LR__0042
00f58                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f58     57 00 00 FF 
00f5c     14 E4 05 F1 | 	add	objptr, ##44564
00f60     F2 24 02 FB | 	rdlong	local04, objptr
00f64     57 00 00 FF 
00f68     14 E4 85 F1 | 	sub	objptr, ##44564
00f6c     04 24 0E F2 | 	cmp	local04, #4 wz
00f70     38 00 90 5D |  if_ne	jmp	#LR__0043
00f74     7B 00 00 FF 
00f78     D0 E4 05 F1 | 	add	objptr, ##63184
00f7c     F2 12 02 FB | 	rdlong	arg01, objptr
00f80     7B 00 00 FF 
00f84     D0 E4 85 F1 | 	sub	objptr, ##63184
00f88     63 01 00 FF 
00f8c     CE 14 06 F6 | 	mov	arg02, ##@LR__4626
00f90     18 C1 B1 FD | 	call	#__system___string_cmp
00f94     00 FA 0D F2 | 	cmp	result1, #0 wz
00f98     57 00 00 AF 
00f9c     14 E4 05 A1 |  if_e	add	objptr, ##44564
00fa0     F2 04 68 AC |  if_e	wrlong	#2, objptr
00fa4     57 00 00 AF 
00fa8     14 E4 85 A1 |  if_e	sub	objptr, ##44564
00fac                 | LR__0043
00fac                 | LR__0044
00fac     20 4E 05 F1 | 	add	fp, #32
00fb0     A7 00 68 FC | 	wrlong	#0, fp
00fb4     20 4E 85 F1 | 	sub	fp, #32
00fb8     00 20 06 F6 | 	mov	local02, #0
00fbc     01 38 06 F6 | 	mov	local14, #1
00fc0                 | ' 
00fc0                 | ' ' 1b: find separators
00fc0                 | ' 
00fc0                 | ' 107
00fc0                 | ' separators(0)=0
00fc0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fc0                 | LR__0045
00fc0     01 20 06 F1 | 	add	local02, #1
00fc4     57 00 00 FF 
00fc8     0C E4 05 F1 | 	add	objptr, ##44556
00fcc     F2 12 02 FB | 	rdlong	arg01, objptr
00fd0     57 00 00 FF 
00fd4     0C E4 85 F1 | 	sub	objptr, ##44556
00fd8     10 15 02 F6 | 	mov	arg02, local02
00fdc     01 16 06 F6 | 	mov	arg03, #1
00fe0     FC E1 B1 FD | 	call	#__system__Mid_S
00fe4     7B 00 00 FF 
00fe8     D4 E4 05 F1 | 	add	objptr, ##63188
00fec     F2 FA 61 FC | 	wrlong	result1, objptr
00ff0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00ff0     FD 12 02 F6 | 	mov	arg01, result1
00ff4     7B 00 00 FF 
00ff8     D4 E4 85 F1 | 	sub	objptr, ##63188
00ffc     B8 29 B0 FD | 	call	#_isseparator
01000     00 FA 0D F2 | 	cmp	result1, #0 wz
01004     1C 00 90 AD |  if_e	jmp	#LR__0046
01008     1C 23 02 F6 | 	mov	local03, local14
0100c     02 22 66 F0 | 	shl	local03, #2
01010     20 4E 05 F1 | 	add	fp, #32
01014     A7 22 02 F1 | 	add	local03, fp
01018     11 21 62 FC | 	wrlong	local02, local03
0101c     01 38 06 F1 | 	add	local14, #1
01020     20 4E 85 F1 | 	sub	fp, #32
01024                 | LR__0046
01024     7B 00 00 FF 
01028     C8 E4 05 F1 | 	add	objptr, ##63176
0102c     F2 24 02 FB | 	rdlong	local04, objptr
01030     7B 00 00 FF 
01034     C8 E4 85 F1 | 	sub	objptr, ##63176
01038     12 21 5A F2 | 	cmps	local02, local04 wcz
0103c     80 FF 9F ED |  if_be	jmp	#LR__0045
01040     1C 23 02 F6 | 	mov	local03, local14
01044     02 22 66 F0 | 	shl	local03, #2
01048     20 4E 05 F1 | 	add	fp, #32
0104c     A7 22 02 F1 | 	add	local03, fp
01050     11 21 62 FC | 	wrlong	local02, local03
01054     00 3A 06 F6 | 	mov	local15, #0
01058                 | ' for i=0 to j-1 
01058     00 20 06 F6 | 	mov	local02, #0
0105c     1C 3D 02 F6 | 	mov	local16, local14
01060     20 4E 85 F1 | 	sub	fp, #32
01064                 | LR__0047
01064     1E 21 52 F2 | 	cmps	local02, local16 wc
01068     88 01 90 3D |  if_ae	jmp	#LR__0051
0106c     10 23 02 F6 | 	mov	local03, local02
01070     02 22 66 F0 | 	shl	local03, #2
01074     20 4E 05 F1 | 	add	fp, #32
01078     A7 22 02 F1 | 	add	local03, fp
0107c     11 27 02 FB | 	rdlong	local05, local03
01080     7B 00 00 FF 
01084     DC E4 05 F1 | 	add	objptr, ##63196
01088     F2 26 62 FC | 	wrlong	local05, objptr
0108c     10 23 02 F6 | 	mov	local03, local02
01090     01 22 06 F1 | 	add	local03, #1
01094     02 22 66 F0 | 	shl	local03, #2
01098     A7 2E 02 F6 | 	mov	local09, fp
0109c     A7 22 02 F1 | 	add	local03, fp
010a0     11 27 02 FB | 	rdlong	local05, local03
010a4     04 E4 05 F1 | 	add	objptr, #4
010a8     F2 26 62 FC | 	wrlong	local05, objptr
010ac                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
010ac     04 E4 85 F1 | 	sub	objptr, #4
010b0     F2 24 02 FB | 	rdlong	local04, objptr
010b4     7B 00 00 FF 
010b8     DC E4 85 F1 | 	sub	objptr, ##63196
010bc     01 24 56 F2 | 	cmps	local04, #1 wc
010c0     20 4E 85 F1 | 	sub	fp, #32
010c4     84 00 90 CD |  if_b	jmp	#LR__0049
010c8     57 00 00 FF 
010cc     0C E4 05 F1 | 	add	objptr, ##44556
010d0     F2 12 02 FB | 	rdlong	arg01, objptr
010d4     24 00 00 FF 
010d8     D0 E4 05 F1 | 	add	objptr, ##18640
010dc     F2 14 02 FB | 	rdlong	arg02, objptr
010e0     7B 00 00 FF 
010e4     DC E4 85 F1 | 	sub	objptr, ##63196
010e8     01 16 06 F6 | 	mov	arg03, #1
010ec     F0 E0 B1 FD | 	call	#__system__Mid_S
010f0     7B 00 00 FF 
010f4     E4 E4 05 F1 | 	add	objptr, ##63204
010f8     F2 FA 61 FC | 	wrlong	result1, objptr
010fc     7B 00 00 FF 
01100     E4 E4 85 F1 | 	sub	objptr, ##63204
01104     FD 12 02 F6 | 	mov	arg01, result1
01108     63 01 00 FF 
0110c     CF 14 06 F6 | 	mov	arg02, ##@LR__4627
01110     98 BF B1 FD | 	call	#__system___string_cmp
01114     00 FA 0D F2 | 	cmp	result1, #0 wz
01118     30 00 90 AD |  if_e	jmp	#LR__0048
0111c     1D 2F 02 F6 | 	mov	local09, local15
01120     03 2E 66 F0 | 	shl	local09, #3
01124     54 00 00 FF 
01128     FC E5 05 F1 | 	add	objptr, ##43516
0112c     F2 2E 02 F1 | 	add	local09, objptr
01130     26 00 00 FF 
01134     E8 E4 05 F1 | 	add	objptr, ##19688
01138     F2 28 02 FB | 	rdlong	local06, objptr
0113c     7B 00 00 FF 
01140     E4 E4 85 F1 | 	sub	objptr, ##63204
01144     17 29 62 FC | 	wrlong	local06, local09
01148     01 3A 06 F1 | 	add	local15, #1
0114c                 | LR__0048
0114c                 | LR__0049
0114c     57 00 00 FF 
01150     0C E4 05 F1 | 	add	objptr, ##44556
01154     F2 12 02 FB | 	rdlong	arg01, objptr
01158     24 00 00 FF 
0115c     D0 E4 05 F1 | 	add	objptr, ##18640
01160     F2 14 02 FB | 	rdlong	arg02, objptr
01164     01 14 06 F1 | 	add	arg02, #1
01168     04 E4 05 F1 | 	add	objptr, #4
0116c     F2 16 02 FB | 	rdlong	arg03, objptr
01170     04 E4 85 F1 | 	sub	objptr, #4
01174     F2 30 02 FB | 	rdlong	local10, objptr
01178     7B 00 00 FF 
0117c     DC E4 85 F1 | 	sub	objptr, ##63196
01180     18 33 02 F6 | 	mov	local11, local10
01184     19 17 82 F1 | 	sub	arg03, local11
01188     01 16 86 F1 | 	sub	arg03, #1
0118c     50 E0 B1 FD | 	call	#__system__Mid_S
01190     7B 00 00 FF 
01194     E4 E4 05 F1 | 	add	objptr, ##63204
01198     F2 FA 61 FC | 	wrlong	result1, objptr
0119c     7B 00 00 FF 
011a0     E4 E4 85 F1 | 	sub	objptr, ##63204
011a4     FD 12 02 F6 | 	mov	arg01, result1
011a8     63 01 00 FF 
011ac     D0 14 06 F6 | 	mov	arg02, ##@LR__4628
011b0     F8 BE B1 FD | 	call	#__system___string_cmp
011b4     00 FA 0D F2 | 	cmp	result1, #0 wz
011b8     30 00 90 AD |  if_e	jmp	#LR__0050
011bc     1D 2F 02 F6 | 	mov	local09, local15
011c0     03 2E 66 F0 | 	shl	local09, #3
011c4     54 00 00 FF 
011c8     FC E5 05 F1 | 	add	objptr, ##43516
011cc     F2 2E 02 F1 | 	add	local09, objptr
011d0     26 00 00 FF 
011d4     E8 E4 05 F1 | 	add	objptr, ##19688
011d8     F2 28 02 FB | 	rdlong	local06, objptr
011dc     7B 00 00 FF 
011e0     E4 E4 85 F1 | 	sub	objptr, ##63204
011e4     17 29 62 FC | 	wrlong	local06, local09
011e8     01 3A 06 F1 | 	add	local15, #1
011ec                 | LR__0050
011ec     01 20 06 F1 | 	add	local02, #1
011f0     70 FE 9F FD | 	jmp	#LR__0047
011f4                 | LR__0051
011f4     00 20 06 F6 | 	mov	local02, #0
011f8                 | ' 
011f8                 | ' ' 1d : find strings
011f8                 | ' 
011f8                 | ' i=0
011f8                 | ' do
011f8                 | LR__0052
011f8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011f8     10 27 02 F6 | 	mov	local05, local02
011fc     03 26 66 F0 | 	shl	local05, #3
01200     54 00 00 FF 
01204     FC E5 05 F1 | 	add	objptr, ##43516
01208     F2 26 02 F1 | 	add	local05, objptr
0120c     13 13 02 FB | 	rdlong	arg01, local05
01210     63 01 00 FF 
01214     D1 14 06 F6 | 	mov	arg02, ##@LR__4629
01218     54 00 00 FF 
0121c     FC E5 85 F1 | 	sub	objptr, ##43516
01220     88 BE B1 FD | 	call	#__system___string_cmp
01224     00 FA 0D F2 | 	cmp	result1, #0 wz
01228     01 20 06 51 |  if_ne	add	local02, #1
0122c     50 01 90 5D |  if_ne	jmp	#LR__0057
01230     10 3F 02 F6 | 	mov	local17, local02
01234                 | LR__0053
01234     10 2F 02 F6 | 	mov	local09, local02
01238     01 2E 06 F1 | 	add	local09, #1
0123c     03 2E 66 F0 | 	shl	local09, #3
01240     54 00 00 FF 
01244     FC E5 05 F1 | 	add	objptr, ##43516
01248     F2 2E 02 F1 | 	add	local09, objptr
0124c     17 31 02 FB | 	rdlong	local10, local09
01250     26 00 00 FF 
01254     E8 E4 05 F1 | 	add	objptr, ##19688
01258     F2 30 62 FC | 	wrlong	local10, objptr
0125c     1F 2F 02 F6 | 	mov	local09, local17
01260     03 2E 66 F0 | 	shl	local09, #3
01264     26 00 00 FF 
01268     E8 E4 85 F1 | 	sub	objptr, ##19688
0126c     F2 2E 02 F1 | 	add	local09, objptr
01270     1F 37 02 F6 | 	mov	local13, local17
01274     03 36 66 F0 | 	shl	local13, #3
01278     F2 36 02 F1 | 	add	local13, objptr
0127c     1B 13 02 FB | 	rdlong	arg01, local13
01280     54 00 00 FF 
01284     FC E5 85 F1 | 	sub	objptr, ##43516
01288     18 33 02 F6 | 	mov	local11, local10
0128c     19 15 02 F6 | 	mov	arg02, local11
01290     4C BE B1 FD | 	call	#__system___string_concat
01294     17 FB 61 FC | 	wrlong	result1, local09
01298     10 39 02 F6 | 	mov	local14, local02
0129c     01 38 06 F1 | 	add	local14, #1
012a0     1D 41 02 F6 | 	mov	local18, local15
012a4     01 40 06 F1 | 	add	local18, #1
012a8     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
012ac                 | LR__0054
012ac     20 39 52 F2 | 	cmps	local14, local18 wc
012b0     70 00 90 3D |  if_ae	jmp	#LR__0056
012b4     1C 27 02 F6 | 	mov	local05, local14
012b8     01 26 06 F1 | 	add	local05, #1
012bc     03 26 66 F0 | 	shl	local05, #3
012c0     54 00 00 FF 
012c4     FC E5 05 F1 | 	add	objptr, ##43516
012c8     F2 26 02 F1 | 	add	local05, objptr
012cc     13 25 02 FB | 	rdlong	local04, local05
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     01 28 06 F1 | 	add	local06, #1
012d8     03 28 66 F0 | 	shl	local06, #3
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     04 28 06 F1 | 	add	local06, #4
012e4     14 23 02 FB | 	rdlong	local03, local06
012e8     1C 29 02 F6 | 	mov	local06, local14
012ec     03 28 66 F0 | 	shl	local06, #3
012f0     F2 32 02 F6 | 	mov	local11, objptr
012f4     F2 28 02 F1 | 	add	local06, objptr
012f8     14 25 62 FC | 	wrlong	local04, local06
012fc     1C 31 02 F6 | 	mov	local10, local14
01300     18 35 02 F6 | 	mov	local12, local10
01304     03 34 66 F0 | 	shl	local12, #3
01308     F2 34 02 F1 | 	add	local12, objptr
0130c     04 34 06 F1 | 	add	local12, #4
01310     1A 23 62 FC | 	wrlong	local03, local12
01314     01 38 06 F1 | 	add	local14, #1
01318     54 00 00 FF 
0131c     FC E5 85 F1 | 	sub	objptr, ##43516
01320     88 FF 9F FD | 	jmp	#LR__0054
01324                 | LR__0055
01324                 | LR__0056
01324     01 3A 86 F1 | 	sub	local15, #1
01328     7B 00 00 FF 
0132c     E4 E4 05 F1 | 	add	objptr, ##63204
01330     F2 12 02 FB | 	rdlong	arg01, objptr
01334     7B 00 00 FF 
01338     E4 E4 85 F1 | 	sub	objptr, ##63204
0133c     63 01 00 FF 
01340     D3 14 06 F6 | 	mov	arg02, ##@LR__4630
01344     64 BD B1 FD | 	call	#__system___string_cmp
01348     00 FA 0D F2 | 	cmp	result1, #0 wz
0134c     1D 21 52 52 |  if_ne	cmps	local02, local15 wc
01350     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01354                 | '   if p$<>"""" then k+=1:i+=1
01354     7B 00 00 FF 
01358     E4 E4 05 F1 | 	add	objptr, ##63204
0135c     F2 12 02 FB | 	rdlong	arg01, objptr
01360     7B 00 00 FF 
01364     E4 E4 85 F1 | 	sub	objptr, ##63204
01368     63 01 00 FF 
0136c     D5 14 06 F6 | 	mov	arg02, ##@LR__4631
01370     38 BD B1 FD | 	call	#__system___string_cmp
01374     00 FA 0D F2 | 	cmp	result1, #0 wz
01378     01 3A 06 51 |  if_ne	add	local15, #1
0137c     01 20 06 51 |  if_ne	add	local02, #1
01380                 | LR__0057
01380     1D 21 52 F2 | 	cmps	local02, local15 wc
01384     70 FE 9F CD |  if_b	jmp	#LR__0052
01388     00 20 06 F6 | 	mov	local02, #0
0138c                 | ' 
0138c                 | ' ' 1e : concatenate strings if "" detected between
0138c                 | '  
0138c                 | ' i=0 : do
0138c                 | LR__0058
0138c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0138c     10 27 02 F6 | 	mov	local05, local02
01390     03 26 66 F0 | 	shl	local05, #3
01394     54 00 00 FF 
01398     FC E5 05 F1 | 	add	objptr, ##43516
0139c     F2 26 02 F1 | 	add	local05, objptr
013a0     13 13 02 FB | 	rdlong	arg01, local05
013a4     01 14 06 F6 | 	mov	arg02, #1
013a8     54 00 00 FF 
013ac     FC E5 85 F1 | 	sub	objptr, ##43516
013b0     9C DD B1 FD | 	call	#__system__Right_S
013b4     FD 12 02 F6 | 	mov	arg01, result1
013b8     63 01 00 FF 
013bc     D7 14 06 F6 | 	mov	arg02, ##@LR__4632
013c0     E8 BC B1 FD | 	call	#__system___string_cmp
013c4     00 FA 0D F2 | 	cmp	result1, #0 wz
013c8     78 01 90 5D |  if_ne	jmp	#LR__0064
013cc     10 29 02 F6 | 	mov	local06, local02
013d0     01 28 06 F1 | 	add	local06, #1
013d4     03 28 66 F0 | 	shl	local06, #3
013d8     54 00 00 FF 
013dc     FC E5 05 F1 | 	add	objptr, ##43516
013e0     F2 32 02 F6 | 	mov	local11, objptr
013e4     F2 28 02 F1 | 	add	local06, objptr
013e8     14 13 02 FB | 	rdlong	arg01, local06
013ec     01 14 06 F6 | 	mov	arg02, #1
013f0     54 00 00 FF 
013f4     FC E5 85 F1 | 	sub	objptr, ##43516
013f8     CC DC B1 FD | 	call	#__system__Left_S
013fc     FD 12 02 F6 | 	mov	arg01, result1
01400     63 01 00 FF 
01404     D9 14 06 F6 | 	mov	arg02, ##@LR__4633
01408     A0 BC B1 FD | 	call	#__system___string_cmp
0140c     00 FA 0D F2 | 	cmp	result1, #0 wz
01410     30 01 90 5D |  if_ne	jmp	#LR__0064
01414     10 2F 02 F6 | 	mov	local09, local02
01418     03 2E 66 F0 | 	shl	local09, #3
0141c     54 00 00 FF 
01420     FC E5 05 F1 | 	add	objptr, ##43516
01424     F2 2E 02 F1 | 	add	local09, objptr
01428     10 37 02 F6 | 	mov	local13, local02
0142c     03 36 66 F0 | 	shl	local13, #3
01430     F2 36 02 F1 | 	add	local13, objptr
01434     1B 29 02 FB | 	rdlong	local06, local13
01438     10 35 02 F6 | 	mov	local12, local02
0143c     01 34 06 F1 | 	add	local12, #1
01440     03 34 66 F0 | 	shl	local12, #3
01444     F2 34 02 F1 | 	add	local12, objptr
01448     1A 33 02 FB | 	rdlong	local11, local12
0144c     10 43 02 F6 | 	mov	local19, local02
01450     01 42 06 F1 | 	add	local19, #1
01454     21 45 02 F6 | 	mov	local20, local19
01458     03 44 66 F0 | 	shl	local20, #3
0145c     F2 46 02 F6 | 	mov	local21, objptr
01460     F2 44 02 F1 | 	add	local20, objptr
01464     22 13 02 FB | 	rdlong	arg01, local20
01468     54 00 00 FF 
0146c     FC E5 85 F1 | 	sub	objptr, ##43516
01470     09 2B 02 F6 | 	mov	local07, arg01
01474     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01478                 | LR__0059
01478     15 FB C9 FA | 	rdbyte	result1, local07 wz
0147c     01 2A 06 51 |  if_ne	add	local07, #1
01480     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01484                 | LR__0060
01484     09 2B 82 F1 | 	sub	local07, arg01
01488     15 31 02 F6 | 	mov	local10, local07
0148c     01 30 86 F1 | 	sub	local10, #1
01490     19 13 02 F6 | 	mov	arg01, local11
01494     18 15 02 F6 | 	mov	arg02, local10
01498     B4 DC B1 FD | 	call	#__system__Right_S
0149c     FD 32 02 F6 | 	mov	local11, result1
014a0     14 13 02 F6 | 	mov	arg01, local06
014a4     19 15 02 F6 | 	mov	arg02, local11
014a8     34 BC B1 FD | 	call	#__system___string_concat
014ac     17 FB 61 FC | 	wrlong	result1, local09
014b0                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
014b0     10 39 02 F6 | 	mov	local14, local02
014b4     01 38 06 F1 | 	add	local14, #1
014b8     1D 49 02 F6 | 	mov	local22, local15
014bc     01 48 06 F1 | 	add	local22, #1
014c0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014c4                 | LR__0061
014c4     24 39 52 F2 | 	cmps	local14, local22 wc
014c8     70 00 90 3D |  if_ae	jmp	#LR__0063
014cc     1C 27 02 F6 | 	mov	local05, local14
014d0     01 26 06 F1 | 	add	local05, #1
014d4     03 26 66 F0 | 	shl	local05, #3
014d8     54 00 00 FF 
014dc     FC E5 05 F1 | 	add	objptr, ##43516
014e0     F2 26 02 F1 | 	add	local05, objptr
014e4     13 25 02 FB | 	rdlong	local04, local05
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     01 28 06 F1 | 	add	local06, #1
014f0     03 28 66 F0 | 	shl	local06, #3
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     04 28 06 F1 | 	add	local06, #4
014fc     14 23 02 FB | 	rdlong	local03, local06
01500     1C 29 02 F6 | 	mov	local06, local14
01504     03 28 66 F0 | 	shl	local06, #3
01508     F2 32 02 F6 | 	mov	local11, objptr
0150c     F2 28 02 F1 | 	add	local06, objptr
01510     14 25 62 FC | 	wrlong	local04, local06
01514     1C 31 02 F6 | 	mov	local10, local14
01518     18 35 02 F6 | 	mov	local12, local10
0151c     03 34 66 F0 | 	shl	local12, #3
01520     F2 34 02 F1 | 	add	local12, objptr
01524     04 34 06 F1 | 	add	local12, #4
01528     1A 23 62 FC | 	wrlong	local03, local12
0152c     01 38 06 F1 | 	add	local14, #1
01530     54 00 00 FF 
01534     FC E5 85 F1 | 	sub	objptr, ##43516
01538     88 FF 9F FD | 	jmp	#LR__0061
0153c                 | LR__0062
0153c                 | LR__0063
0153c     01 20 86 F1 | 	sub	local02, #1
01540     01 3A 86 F1 | 	sub	local15, #1
01544                 | LR__0064
01544     01 20 06 F1 | 	add	local02, #1
01548     1D 21 52 F2 | 	cmps	local02, local15 wc
0154c     3C FE 9F CD |  if_b	jmp	#LR__0058
01550     00 20 06 F6 | 	mov	local02, #0
01554                 | '  
01554                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01554                 | '  
01554                 | ' i=0 : do
01554                 | LR__0065
01554     10 2F 02 F6 | 	mov	local09, local02
01558     03 2E 66 F0 | 	shl	local09, #3
0155c     54 00 00 FF 
01560     FC E5 05 F1 | 	add	objptr, ##43516
01564     F2 2E 02 F1 | 	add	local09, objptr
01568     17 29 02 FB | 	rdlong	local06, local09
0156c     26 00 00 FF 
01570     F0 E4 05 F1 | 	add	objptr, ##19696
01574     F2 28 62 FC | 	wrlong	local06, objptr
01578     10 2F 02 F6 | 	mov	local09, local02
0157c     01 2E 06 F1 | 	add	local09, #1
01580     03 2E 66 F0 | 	shl	local09, #3
01584     26 00 00 FF 
01588     F0 E4 85 F1 | 	sub	objptr, ##19696
0158c     F2 2E 02 F1 | 	add	local09, objptr
01590     17 29 02 FB | 	rdlong	local06, local09
01594     26 00 00 FF 
01598     F4 E4 05 F1 | 	add	objptr, ##19700
0159c     F2 28 62 FC | 	wrlong	local06, objptr
015a0                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
015a0     04 E4 85 F1 | 	sub	objptr, #4
015a4     F2 12 02 FB | 	rdlong	arg01, objptr
015a8     7B 00 00 FF 
015ac     EC E4 85 F1 | 	sub	objptr, ##63212
015b0     63 01 00 FF 
015b4     DB 14 06 F6 | 	mov	arg02, ##@LR__4634
015b8     F0 BA B1 FD | 	call	#__system___string_cmp
015bc     00 FA 0D F2 | 	cmp	result1, #0 wz
015c0     04 01 90 AD |  if_e	jmp	#LR__0066
015c4     7B 00 00 FF 
015c8     EC E4 05 F1 | 	add	objptr, ##63212
015cc     F2 12 02 FB | 	rdlong	arg01, objptr
015d0     7B 00 00 FF 
015d4     EC E4 85 F1 | 	sub	objptr, ##63212
015d8     63 01 00 FF 
015dc     DD 14 06 F6 | 	mov	arg02, ##@LR__4635
015e0     C8 BA B1 FD | 	call	#__system___string_cmp
015e4     FD 22 0A F6 | 	mov	local03, result1 wz
015e8     DC 00 90 AD |  if_e	jmp	#LR__0066
015ec     7B 00 00 FF 
015f0     EC E4 05 F1 | 	add	objptr, ##63212
015f4     F2 12 02 FB | 	rdlong	arg01, objptr
015f8     7B 00 00 FF 
015fc     EC E4 85 F1 | 	sub	objptr, ##63212
01600     63 01 00 FF 
01604     DF 14 06 F6 | 	mov	arg02, ##@LR__4636
01608     A0 BA B1 FD | 	call	#__system___string_cmp
0160c     00 FA 0D F2 | 	cmp	result1, #0 wz
01610     B4 00 90 AD |  if_e	jmp	#LR__0066
01614     7B 00 00 FF 
01618     EC E4 05 F1 | 	add	objptr, ##63212
0161c     F2 12 02 FB | 	rdlong	arg01, objptr
01620     7B 00 00 FF 
01624     EC E4 85 F1 | 	sub	objptr, ##63212
01628     63 01 00 FF 
0162c     E1 32 06 F6 | 	mov	local11, ##@LR__4637
01630     19 15 02 F6 | 	mov	arg02, local11
01634     74 BA B1 FD | 	call	#__system___string_cmp
01638     00 FA 0D F2 | 	cmp	result1, #0 wz
0163c     88 00 90 AD |  if_e	jmp	#LR__0066
01640     7B 00 00 FF 
01644     EC E4 05 F1 | 	add	objptr, ##63212
01648     F2 12 02 FB | 	rdlong	arg01, objptr
0164c     7B 00 00 FF 
01650     EC E4 85 F1 | 	sub	objptr, ##63212
01654     63 01 00 FF 
01658     E3 30 06 F6 | 	mov	local10, ##@LR__4638
0165c     18 33 02 F6 | 	mov	local11, local10
01660     19 15 02 F6 | 	mov	arg02, local11
01664     44 BA B1 FD | 	call	#__system___string_cmp
01668     00 FA 0D F2 | 	cmp	result1, #0 wz
0166c     58 00 90 AD |  if_e	jmp	#LR__0066
01670     7B 00 00 FF 
01674     EC E4 05 F1 | 	add	objptr, ##63212
01678     F2 12 02 FB | 	rdlong	arg01, objptr
0167c     7B 00 00 FF 
01680     EC E4 85 F1 | 	sub	objptr, ##63212
01684     63 01 00 FF 
01688     E5 30 06 F6 | 	mov	local10, ##@LR__4639
0168c     18 15 02 F6 | 	mov	arg02, local10
01690     18 BA B1 FD | 	call	#__system___string_cmp
01694     FD 32 0A F6 | 	mov	local11, result1 wz
01698     2C 00 90 AD |  if_e	jmp	#LR__0066
0169c     7B 00 00 FF 
016a0     EC E4 05 F1 | 	add	objptr, ##63212
016a4     F2 12 02 FB | 	rdlong	arg01, objptr
016a8     7B 00 00 FF 
016ac     EC E4 85 F1 | 	sub	objptr, ##63212
016b0     63 01 00 FF 
016b4     E7 36 06 F6 | 	mov	local13, ##@LR__4640
016b8     1B 15 02 F6 | 	mov	arg02, local13
016bc     EC B9 B1 FD | 	call	#__system___string_cmp
016c0     FD 30 0A F6 | 	mov	local10, result1 wz
016c4     30 00 90 5D |  if_ne	jmp	#LR__0067
016c8                 | LR__0066
016c8     7B 00 00 FF 
016cc     F0 E4 05 F1 | 	add	objptr, ##63216
016d0     F2 12 02 FB | 	rdlong	arg01, objptr
016d4     7B 00 00 FF 
016d8     F0 E4 85 F1 | 	sub	objptr, ##63216
016dc     63 01 00 FF 
016e0     E9 4A 06 F6 | 	mov	local23, ##@LR__4641
016e4     25 35 02 F6 | 	mov	local12, local23
016e8     1A 15 02 F6 | 	mov	arg02, local12
016ec     BC B9 B1 FD | 	call	#__system___string_cmp
016f0     FD 36 0A F6 | 	mov	local13, result1 wz
016f4     18 01 90 AD |  if_e	jmp	#LR__0070
016f8                 | LR__0067
016f8     7B 00 00 FF 
016fc     EC E4 05 F1 | 	add	objptr, ##63212
01700     F2 12 02 FB | 	rdlong	arg01, objptr
01704     7B 00 00 FF 
01708     EC E4 85 F1 | 	sub	objptr, ##63212
0170c     63 01 00 FF 
01710     EB 4A 06 F6 | 	mov	local23, ##@LR__4642
01714     25 15 02 F6 | 	mov	arg02, local23
01718     90 B9 B1 FD | 	call	#__system___string_cmp
0171c     FD 34 0A F6 | 	mov	local12, result1 wz
01720     30 00 90 5D |  if_ne	jmp	#LR__0068
01724     7B 00 00 FF 
01728     F0 E4 05 F1 | 	add	objptr, ##63216
0172c     F2 12 02 FB | 	rdlong	arg01, objptr
01730     7B 00 00 FF 
01734     F0 E4 85 F1 | 	sub	objptr, ##63216
01738     63 01 00 FF 
0173c     ED 44 06 F6 | 	mov	local20, ##@LR__4643
01740     22 43 02 F6 | 	mov	local19, local20
01744     21 15 02 F6 | 	mov	arg02, local19
01748     60 B9 B1 FD | 	call	#__system___string_cmp
0174c     FD 4A 0A F6 | 	mov	local23, result1 wz
01750     BC 00 90 AD |  if_e	jmp	#LR__0070
01754                 | LR__0068
01754     7B 00 00 FF 
01758     EC E4 05 F1 | 	add	objptr, ##63212
0175c     F2 12 02 FB | 	rdlong	arg01, objptr
01760     7B 00 00 FF 
01764     EC E4 85 F1 | 	sub	objptr, ##63212
01768     63 01 00 FF 
0176c     EF 44 06 F6 | 	mov	local20, ##@LR__4644
01770     22 15 02 F6 | 	mov	arg02, local20
01774     34 B9 B1 FD | 	call	#__system___string_cmp
01778     FD 42 0A F6 | 	mov	local19, result1 wz
0177c     30 00 90 5D |  if_ne	jmp	#LR__0069
01780     7B 00 00 FF 
01784     F0 E4 05 F1 | 	add	objptr, ##63216
01788     F2 12 02 FB | 	rdlong	arg01, objptr
0178c     7B 00 00 FF 
01790     F0 E4 85 F1 | 	sub	objptr, ##63216
01794     63 01 00 FF 
01798     F1 4C 06 F6 | 	mov	local24, ##@LR__4645
0179c     26 47 02 F6 | 	mov	local21, local24
017a0     23 15 02 F6 | 	mov	arg02, local21
017a4     04 B9 B1 FD | 	call	#__system___string_cmp
017a8     FD 44 0A F6 | 	mov	local20, result1 wz
017ac     60 00 90 AD |  if_e	jmp	#LR__0070
017b0                 | LR__0069
017b0     7B 00 00 FF 
017b4     EC E4 05 F1 | 	add	objptr, ##63212
017b8     F2 12 02 FB | 	rdlong	arg01, objptr
017bc     7B 00 00 FF 
017c0     EC E4 85 F1 | 	sub	objptr, ##63212
017c4     63 01 00 FF 
017c8     F3 4E 06 F6 | 	mov	local25, ##@LR__4646
017cc     27 4D 02 F6 | 	mov	local24, local25
017d0     26 15 02 F6 | 	mov	arg02, local24
017d4     D4 B8 B1 FD | 	call	#__system___string_cmp
017d8     FD 46 0A F6 | 	mov	local21, result1 wz
017dc     10 01 90 5D |  if_ne	jmp	#LR__0074
017e0     7B 00 00 FF 
017e4     F0 E4 05 F1 | 	add	objptr, ##63216
017e8     F2 12 02 FB | 	rdlong	arg01, objptr
017ec     7B 00 00 FF 
017f0     F0 E4 85 F1 | 	sub	objptr, ##63216
017f4     63 01 00 FF 
017f8     F5 50 06 F6 | 	mov	local26, ##@LR__4647
017fc     28 4F 02 F6 | 	mov	local25, local26
01800     27 15 02 F6 | 	mov	arg02, local25
01804     A4 B8 B1 FD | 	call	#__system___string_cmp
01808     FD 4C 0A F6 | 	mov	local24, result1 wz
0180c     E0 00 90 5D |  if_ne	jmp	#LR__0074
01810                 | LR__0070
01810     10 2F 02 F6 | 	mov	local09, local02
01814     03 2E 66 F0 | 	shl	local09, #3
01818     54 00 00 FF 
0181c     FC E5 05 F1 | 	add	objptr, ##43516
01820     F2 2E 02 F1 | 	add	local09, objptr
01824     26 00 00 FF 
01828     F0 E4 05 F1 | 	add	objptr, ##19696
0182c     F2 12 02 FB | 	rdlong	arg01, objptr
01830     04 E4 05 F1 | 	add	objptr, #4
01834     F2 30 02 FB | 	rdlong	local10, objptr
01838     7B 00 00 FF 
0183c     F0 E4 85 F1 | 	sub	objptr, ##63216
01840     18 33 02 F6 | 	mov	local11, local10
01844     19 15 02 F6 | 	mov	arg02, local11
01848     94 B8 B1 FD | 	call	#__system___string_concat
0184c     17 FB 61 FC | 	wrlong	result1, local09
01850                 | '     lparts(i).part$=s1$+s2$
01850                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01850     10 39 02 F6 | 	mov	local14, local02
01854     01 38 06 F1 | 	add	local14, #1
01858     1D 53 02 F6 | 	mov	local27, local15
0185c     01 52 06 F1 | 	add	local27, #1
01860     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01864                 | LR__0071
01864     29 39 52 F2 | 	cmps	local14, local27 wc
01868     7C 00 90 3D |  if_ae	jmp	#LR__0073
0186c     1C 27 02 F6 | 	mov	local05, local14
01870     01 26 06 F1 | 	add	local05, #1
01874     03 26 66 F0 | 	shl	local05, #3
01878     54 00 00 FF 
0187c     FC E5 05 F1 | 	add	objptr, ##43516
01880     F2 26 02 F1 | 	add	local05, objptr
01884     13 25 02 FB | 	rdlong	local04, local05
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     01 28 06 F1 | 	add	local06, #1
01890     03 28 66 F0 | 	shl	local06, #3
01894     F2 28 02 F1 | 	add	local06, objptr
01898     04 28 06 F1 | 	add	local06, #4
0189c     14 23 02 FB | 	rdlong	local03, local06
018a0     1C 29 02 F6 | 	mov	local06, local14
018a4     03 28 66 F0 | 	shl	local06, #3
018a8     F2 32 02 F6 | 	mov	local11, objptr
018ac     F2 28 02 F1 | 	add	local06, objptr
018b0     14 25 62 FC | 	wrlong	local04, local06
018b4     1C 31 02 F6 | 	mov	local10, local14
018b8     18 37 02 F6 | 	mov	local13, local10
018bc     1B 35 02 F6 | 	mov	local12, local13
018c0     03 34 66 F0 | 	shl	local12, #3
018c4     F2 4A 02 F6 | 	mov	local23, objptr
018c8     F2 34 02 F1 | 	add	local12, objptr
018cc     04 34 06 F1 | 	add	local12, #4
018d0     1A 23 62 FC | 	wrlong	local03, local12
018d4     04 34 86 F1 | 	sub	local12, #4
018d8     01 38 06 F1 | 	add	local14, #1
018dc     54 00 00 FF 
018e0     FC E5 85 F1 | 	sub	objptr, ##43516
018e4     7C FF 9F FD | 	jmp	#LR__0071
018e8                 | LR__0072
018e8                 | LR__0073
018e8     01 20 86 F1 | 	sub	local02, #1
018ec     01 3A 86 F1 | 	sub	local15, #1
018f0                 | LR__0074
018f0     01 20 06 F1 | 	add	local02, #1
018f4     1D 21 52 F2 | 	cmps	local02, local15 wc
018f8     58 FC 9F CD |  if_b	jmp	#LR__0065
018fc                 | '  
018fc                 | ' ' 1f : now remove parts that are spaces
018fc                 | ' 
018fc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018fc     00 20 06 F6 | 	mov	local02, #0
01900     1D 55 02 F6 | 	mov	local28, local15
01904     01 54 06 F1 | 	add	local28, #1
01908                 | LR__0075
01908     2A 21 52 F2 | 	cmps	local02, local28 wc
0190c     50 00 90 3D |  if_ae	jmp	#LR__0076
01910     10 2F 02 F6 | 	mov	local09, local02
01914     03 2E 66 F0 | 	shl	local09, #3
01918     54 00 00 FF 
0191c     FC E5 05 F1 | 	add	objptr, ##43516
01920     F2 2E 02 F1 | 	add	local09, objptr
01924     10 33 02 F6 | 	mov	local11, local02
01928     19 31 02 F6 | 	mov	local10, local11
0192c     18 37 02 F6 | 	mov	local13, local10
01930     03 36 66 F0 | 	shl	local13, #3
01934     F2 34 02 F6 | 	mov	local12, objptr
01938     F2 36 02 F1 | 	add	local13, objptr
0193c     1B 13 02 FB | 	rdlong	arg01, local13
01940     54 00 00 FF 
01944     FC E5 85 F1 | 	sub	objptr, ##43516
01948     0C DC B1 FD | 	call	#__system__RTrim_S
0194c     FD 12 02 F6 | 	mov	arg01, result1
01950     44 DB B1 FD | 	call	#__system__LTrim_S
01954     17 FB 61 FC | 	wrlong	result1, local09
01958     01 20 06 F1 | 	add	local02, #1
0195c     A8 FF 9F FD | 	jmp	#LR__0075
01960                 | LR__0076
01960     00 20 06 F6 | 	mov	local02, #0
01964     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01968                 | ' 
01968                 | ' i=0
01968                 | ' do 
01968                 | LR__0077
01968                 | '   if len(lparts(i).part$)=0 then 
01968     10 2F 02 F6 | 	mov	local09, local02
0196c     17 27 02 F6 | 	mov	local05, local09
01970     03 26 66 F0 | 	shl	local05, #3
01974     54 00 00 FF 
01978     FC E5 05 F1 | 	add	objptr, ##43516
0197c     F2 26 02 F1 | 	add	local05, objptr
01980     13 13 02 FB | 	rdlong	arg01, local05
01984     54 00 00 FF 
01988     FC E5 85 F1 | 	sub	objptr, ##43516
0198c     09 2B 02 F6 | 	mov	local07, arg01
01990                 | LR__0078
01990     15 FB C9 FA | 	rdbyte	result1, local07 wz
01994     01 2A 06 51 |  if_ne	add	local07, #1
01998     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
0199c     09 2B 8A F1 | 	sub	local07, arg01 wz
019a0     C4 00 90 5D |  if_ne	jmp	#LR__0082
019a4                 | '     if i=k-1 then k-=1  :  exit
019a4     1D 25 02 F6 | 	mov	local04, local15
019a8     01 24 86 F1 | 	sub	local04, #1
019ac     12 21 0A F2 | 	cmp	local02, local04 wz
019b0     01 3A 86 A1 |  if_e	sub	local15, #1
019b4     C4 00 90 AD |  if_e	jmp	#LR__0084
019b8                 | '     if i<k-1 then 
019b8     1D 25 02 F6 | 	mov	local04, local15
019bc     01 24 86 F1 | 	sub	local04, #1
019c0     12 21 52 F2 | 	cmps	local02, local04 wc
019c4     A0 00 90 3D |  if_ae	jmp	#LR__0081
019c8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019c8     10 39 02 F6 | 	mov	local14, local02
019cc     1D 57 02 F6 | 	mov	local29, local15
019d0     01 56 86 F1 | 	sub	local29, #1
019d4                 | LR__0079
019d4     2B 39 52 F2 | 	cmps	local14, local29 wc
019d8     80 00 90 3D |  if_ae	jmp	#LR__0080
019dc     1C 27 02 F6 | 	mov	local05, local14
019e0     01 26 06 F1 | 	add	local05, #1
019e4     03 26 66 F0 | 	shl	local05, #3
019e8     54 00 00 FF 
019ec     FC E5 05 F1 | 	add	objptr, ##43516
019f0     F2 26 02 F1 | 	add	local05, objptr
019f4     13 25 02 FB | 	rdlong	local04, local05
019f8     1C 29 02 F6 | 	mov	local06, local14
019fc     01 28 06 F1 | 	add	local06, #1
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 28 02 F1 | 	add	local06, objptr
01a08     04 28 06 F1 | 	add	local06, #4
01a0c     14 23 02 FB | 	rdlong	local03, local06
01a10     1C 2F 02 F6 | 	mov	local09, local14
01a14     17 29 02 F6 | 	mov	local06, local09
01a18     03 28 66 F0 | 	shl	local06, #3
01a1c     F2 32 02 F6 | 	mov	local11, objptr
01a20     F2 28 02 F1 | 	add	local06, objptr
01a24     14 25 62 FC | 	wrlong	local04, local06
01a28     1C 31 02 F6 | 	mov	local10, local14
01a2c     18 37 02 F6 | 	mov	local13, local10
01a30     1B 35 02 F6 | 	mov	local12, local13
01a34     03 34 66 F0 | 	shl	local12, #3
01a38     F2 4A 02 F6 | 	mov	local23, objptr
01a3c     F2 34 02 F1 | 	add	local12, objptr
01a40     04 34 06 F1 | 	add	local12, #4
01a44     1A 23 62 FC | 	wrlong	local03, local12
01a48     04 34 86 F1 | 	sub	local12, #4
01a4c     01 38 06 F1 | 	add	local14, #1
01a50     54 00 00 FF 
01a54     FC E5 85 F1 | 	sub	objptr, ##43516
01a58     78 FF 9F FD | 	jmp	#LR__0079
01a5c                 | LR__0080
01a5c     01 3A 86 F1 | 	sub	local15, #1
01a60                 | '       if i>0 then i-=1 
01a60     01 20 56 F2 | 	cmps	local02, #1 wc
01a64     01 20 86 31 |  if_ae	sub	local02, #1
01a68                 | LR__0081
01a68                 | LR__0082
01a68     01 20 06 F1 | 	add	local02, #1
01a6c     1D 25 02 F6 | 	mov	local04, local15
01a70     01 24 86 F1 | 	sub	local04, #1
01a74     12 21 5A F2 | 	cmps	local02, local04 wcz
01a78     EC FE 9F ED |  if_be	jmp	#LR__0077
01a7c                 | LR__0083
01a7c                 | LR__0084
01a7c                 | ' 
01a7c                 | ' ' 1g: lowercase all that is not a string
01a7c                 | ' 
01a7c                 | ' for j=0 to k-1
01a7c     00 38 06 F6 | 	mov	local14, #0
01a80     1D 59 02 F6 | 	mov	local30, local15
01a84                 | LR__0085
01a84     2C 39 52 F2 | 	cmps	local14, local30 wc
01a88     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a8c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a8c     1C 27 02 F6 | 	mov	local05, local14
01a90     03 26 66 F0 | 	shl	local05, #3
01a94     54 00 00 FF 
01a98     FC E5 05 F1 | 	add	objptr, ##43516
01a9c     F2 26 02 F1 | 	add	local05, objptr
01aa0     13 13 02 FB | 	rdlong	arg01, local05
01aa4     01 14 06 F6 | 	mov	arg02, #1
01aa8     54 00 00 FF 
01aac     FC E5 85 F1 | 	sub	objptr, ##43516
01ab0     14 D6 B1 FD | 	call	#__system__Left_S
01ab4     FD 12 02 F6 | 	mov	arg01, result1
01ab8     63 01 00 FF 
01abc     F7 14 06 F6 | 	mov	arg02, ##@LR__4648
01ac0     E8 B5 B1 FD | 	call	#__system___string_cmp
01ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac8     40 00 90 5D |  if_ne	jmp	#LR__0086
01acc     1C 29 02 F6 | 	mov	local06, local14
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     54 00 00 FF 
01ad8     FC E5 05 F1 | 	add	objptr, ##43516
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     14 13 02 FB | 	rdlong	arg01, local06
01ae4     01 14 06 F6 | 	mov	arg02, #1
01ae8     54 00 00 FF 
01aec     FC E5 85 F1 | 	sub	objptr, ##43516
01af0     5C D6 B1 FD | 	call	#__system__Right_S
01af4     FD 12 02 F6 | 	mov	arg01, result1
01af8     63 01 00 FF 
01afc     F9 14 06 F6 | 	mov	arg02, ##@LR__4649
01b00     A8 B5 B1 FD | 	call	#__system___string_cmp
01b04     00 FA 0D F2 | 	cmp	result1, #0 wz
01b08     38 00 90 AD |  if_e	jmp	#LR__0087
01b0c                 | LR__0086
01b0c     1C 2F 02 F6 | 	mov	local09, local14
01b10     03 2E 66 F0 | 	shl	local09, #3
01b14     54 00 00 FF 
01b18     FC E5 05 F1 | 	add	objptr, ##43516
01b1c     F2 2E 02 F1 | 	add	local09, objptr
01b20     1C 37 02 F6 | 	mov	local13, local14
01b24     03 36 66 F0 | 	shl	local13, #3
01b28     F2 34 02 F6 | 	mov	local12, objptr
01b2c     F2 36 02 F1 | 	add	local13, objptr
01b30     1B 13 02 FB | 	rdlong	arg01, local13
01b34     54 00 00 FF 
01b38     FC E5 85 F1 | 	sub	objptr, ##43516
01b3c     98 D8 B1 FD | 	call	#__system__LCase_S
01b40     17 FB 61 FC | 	wrlong	result1, local09
01b44                 | LR__0087
01b44     01 38 06 F1 | 	add	local14, #1
01b48     38 FF 9F FD | 	jmp	#LR__0085
01b4c                 | LR__0088
01b4c                 | ' 
01b4c                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b4c                 | ' 
01b4c                 | ' for i=0 to k: lparts(i).token=-1: next i
01b4c     00 20 06 F6 | 	mov	local02, #0
01b50     1D 5B 02 F6 | 	mov	local31, local15
01b54     01 5A 06 F1 | 	add	local31, #1
01b58     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b5c                 | LR__0089
01b5c     2D 21 52 F2 | 	cmps	local02, local31 wc
01b60     30 00 90 3D |  if_ae	jmp	#LR__0091
01b64     10 2F 02 F6 | 	mov	local09, local02
01b68     03 2E 66 F0 | 	shl	local09, #3
01b6c     54 00 00 FF 
01b70     FC E5 05 F1 | 	add	objptr, ##43516
01b74     F2 2E 02 F1 | 	add	local09, objptr
01b78     04 2E 06 F1 | 	add	local09, #4
01b7c     FF FF FF FF 
01b80     17 FF 6B FC | 	wrlong	##-1, local09
01b84     01 20 06 F1 | 	add	local02, #1
01b88     54 00 00 FF 
01b8c     FC E5 85 F1 | 	sub	objptr, ##43516
01b90     C8 FF 9F FD | 	jmp	#LR__0089
01b94                 | LR__0090
01b94                 | LR__0091
01b94                 | ' 
01b94                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b94                 | ' 
01b94                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b94     54 00 00 FF 
01b98     FC E5 05 F1 | 	add	objptr, ##43516
01b9c     F2 12 02 FB | 	rdlong	arg01, objptr
01ba0     54 00 00 FF 
01ba4     FC E5 85 F1 | 	sub	objptr, ##43516
01ba8     09 2B 02 F6 | 	mov	local07, arg01
01bac     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01bb0                 | LR__0092
01bb0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01bb4     01 2A 06 51 |  if_ne	add	local07, #1
01bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01bbc                 | LR__0093
01bbc     09 2B 8A F1 | 	sub	local07, arg01 wz
01bc0     7C 17 90 AD |  if_e	jmp	#LR__0149
01bc4                 | ' 
01bc4                 | ' 
01bc4                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bc4     54 00 00 FF 
01bc8     FC E5 05 F1 | 	add	objptr, ##43516
01bcc     F2 12 02 FB | 	rdlong	arg01, objptr
01bd0     54 00 00 FF 
01bd4     FC E5 85 F1 | 	sub	objptr, ##43516
01bd8     00 36 B0 FD | 	call	#_isdec
01bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
01be0     7B 00 00 5F 
01be4     F4 E4 05 51 |  if_ne	add	objptr, ##63220
01be8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bec     7B 00 00 FF 
01bf0     F4 E4 E5 F3 | 	sumnz	objptr, ##63220
01bf4     F2 00 68 AC |  if_e	wrlong	#0, objptr
01bf8     7B 00 00 AF 
01bfc     F4 E4 85 A1 |  if_e	sub	objptr, ##63220
01c00     7B 00 00 FF 
01c04     F4 E4 05 F1 | 	add	objptr, ##63220
01c08     F2 26 02 FB | 	rdlong	local05, objptr
01c0c     03 26 66 F0 | 	shl	local05, #3
01c10     26 00 00 FF 
01c14     F8 E4 85 F1 | 	sub	objptr, ##19704
01c18     F2 26 02 F1 | 	add	local05, objptr
01c1c     13 33 02 FB | 	rdlong	local11, local05
01c20     26 00 00 FF 
01c24     FC E4 05 F1 | 	add	objptr, ##19708
01c28     F2 32 62 FC | 	wrlong	local11, objptr
01c2c     04 E4 85 F1 | 	sub	objptr, #4
01c30     F2 32 02 FB | 	rdlong	local11, objptr
01c34     03 32 66 F0 | 	shl	local11, #3
01c38     26 00 00 FF 
01c3c     F8 E4 85 F1 | 	sub	objptr, ##19704
01c40     F2 30 02 F6 | 	mov	local10, objptr
01c44     F2 32 02 F1 | 	add	local11, objptr
01c48     19 15 02 FB | 	rdlong	arg02, local11
01c4c     63 01 00 FF 
01c50     FB 16 06 F6 | 	mov	arg03, ##@LR__4650
01c54     01 12 06 F6 | 	mov	arg01, #1
01c58     54 00 00 FF 
01c5c     FC E5 85 F1 | 	sub	objptr, ##43516
01c60     AC D9 B1 FD | 	call	#__system__Instr
01c64     7B 00 00 FF 
01c68     FC E4 05 F1 | 	add	objptr, ##63228
01c6c     F2 FA 61 FC | 	wrlong	result1, objptr
01c70                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c70     FD 24 02 F6 | 	mov	local04, result1
01c74     7B 00 00 FF 
01c78     FC E4 85 F1 | 	sub	objptr, ##63228
01c7c     01 24 56 F2 | 	cmps	local04, #1 wc
01c80     DC 01 90 CD |  if_b	jmp	#LR__0100
01c84     7B 00 00 FF 
01c88     F4 E4 05 F1 | 	add	objptr, ##63220
01c8c     F2 30 02 FB | 	rdlong	local10, objptr
01c90     03 30 66 F0 | 	shl	local10, #3
01c94     26 00 00 FF 
01c98     F8 E4 85 F1 | 	sub	objptr, ##19704
01c9c     F2 36 02 F6 | 	mov	local13, objptr
01ca0     F2 30 02 F1 | 	add	local10, objptr
01ca4     18 13 02 FB | 	rdlong	arg01, local10
01ca8     54 00 00 FF 
01cac     FC E5 85 F1 | 	sub	objptr, ##43516
01cb0     09 2B 02 F6 | 	mov	local07, arg01
01cb4     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01cb8                 | LR__0094
01cb8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01cbc     01 2A 06 51 |  if_ne	add	local07, #1
01cc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cc4                 | LR__0095
01cc4     09 2B 82 F1 | 	sub	local07, arg01
01cc8     15 2F 02 F6 | 	mov	local09, local07
01ccc     7B 00 00 FF 
01cd0     FC E4 05 F1 | 	add	objptr, ##63228
01cd4     F2 26 02 FB | 	rdlong	local05, objptr
01cd8     7B 00 00 FF 
01cdc     FC E4 85 F1 | 	sub	objptr, ##63228
01ce0     17 27 52 F2 | 	cmps	local05, local09 wc
01ce4     78 01 90 3D |  if_ae	jmp	#LR__0100
01ce8     01 3A 06 F1 | 	add	local15, #1
01cec                 | '   k+=1
01cec                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cec     1D 21 02 F6 | 	mov	local02, local15
01cf0     7B 00 00 FF 
01cf4     F4 E4 05 F1 | 	add	objptr, ##63220
01cf8     F2 5C 02 FB | 	rdlong	local32, objptr
01cfc     01 5C 06 F1 | 	add	local32, #1
01d00     26 00 00 FF 
01d04     F8 E4 85 F1 | 	sub	objptr, ##19704
01d08     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01d0c                 | LR__0096
01d0c     10 29 02 F6 | 	mov	local06, local02
01d10     01 28 86 F1 | 	sub	local06, #1
01d14     03 28 66 F0 | 	shl	local06, #3
01d18     F2 28 02 F1 | 	add	local06, objptr
01d1c     14 23 02 FB | 	rdlong	local03, local06
01d20     10 33 02 F6 | 	mov	local11, local02
01d24     01 32 86 F1 | 	sub	local11, #1
01d28     03 32 66 F0 | 	shl	local11, #3
01d2c     F2 32 02 F1 | 	add	local11, objptr
01d30     04 32 06 F1 | 	add	local11, #4
01d34     19 2F 02 FB | 	rdlong	local09, local11
01d38     10 33 02 F6 | 	mov	local11, local02
01d3c     03 32 66 F0 | 	shl	local11, #3
01d40     F2 32 02 F1 | 	add	local11, objptr
01d44     19 23 62 FC | 	wrlong	local03, local11
01d48     10 4B 02 F6 | 	mov	local23, local02
01d4c     03 4A 66 F0 | 	shl	local23, #3
01d50     F2 4A 02 F1 | 	add	local23, objptr
01d54     04 4A 06 F1 | 	add	local23, #4
01d58     25 2F 62 FC | 	wrlong	local09, local23
01d5c     01 20 86 F1 | 	sub	local02, #1
01d60     2E 21 52 F2 | 	cmps	local02, local32 wc
01d64     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d68                 | LR__0097
01d68     26 00 00 FF 
01d6c     F8 E4 05 F1 | 	add	objptr, ##19704
01d70     F2 4A 02 FB | 	rdlong	local23, objptr
01d74     25 27 02 F6 | 	mov	local05, local23
01d78     01 26 06 F1 | 	add	local05, #1
01d7c     03 26 66 F0 | 	shl	local05, #3
01d80     26 00 00 FF 
01d84     F8 E4 85 F1 | 	sub	objptr, ##19704
01d88     F2 26 02 F1 | 	add	local05, objptr
01d8c     03 4A 66 F0 | 	shl	local23, #3
01d90     F2 4A 02 F1 | 	add	local23, objptr
01d94     25 33 02 FB | 	rdlong	local11, local23
01d98     26 00 00 FF 
01d9c     F8 E4 05 F1 | 	add	objptr, ##19704
01da0     F2 44 02 FB | 	rdlong	local20, objptr
01da4     22 47 02 F6 | 	mov	local21, local20
01da8     03 46 66 F0 | 	shl	local21, #3
01dac     26 00 00 FF 
01db0     F8 E4 85 F1 | 	sub	objptr, ##19704
01db4     F2 4C 02 F6 | 	mov	local24, objptr
01db8     F2 46 02 F1 | 	add	local21, objptr
01dbc     23 13 02 FB | 	rdlong	arg01, local21
01dc0     54 00 00 FF 
01dc4     FC E5 85 F1 | 	sub	objptr, ##43516
01dc8     09 2B 02 F6 | 	mov	local07, arg01
01dcc     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01dd0                 | LR__0098
01dd0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dd4     01 2A 06 51 |  if_ne	add	local07, #1
01dd8     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01ddc                 | LR__0099
01ddc     09 2B 82 F1 | 	sub	local07, arg01
01de0     15 15 02 F6 | 	mov	arg02, local07
01de4     7B 00 00 FF 
01de8     FC E4 05 F1 | 	add	objptr, ##63228
01dec     F2 4A 02 FB | 	rdlong	local23, objptr
01df0     7B 00 00 FF 
01df4     FC E4 85 F1 | 	sub	objptr, ##63228
01df8     25 15 82 F1 | 	sub	arg02, local23
01dfc     19 13 02 F6 | 	mov	arg01, local11
01e00     4C D3 B1 FD | 	call	#__system__Right_S
01e04     13 FB 61 FC | 	wrlong	result1, local05
01e08     7B 00 00 FF 
01e0c     F4 E4 05 F1 | 	add	objptr, ##63220
01e10     F2 34 02 FB | 	rdlong	local12, objptr
01e14     1A 27 02 F6 | 	mov	local05, local12
01e18     03 26 66 F0 | 	shl	local05, #3
01e1c     26 00 00 FF 
01e20     F8 E4 85 F1 | 	sub	objptr, ##19704
01e24     F2 26 02 F1 | 	add	local05, objptr
01e28     1A 4B 02 F6 | 	mov	local23, local12
01e2c     03 4A 66 F0 | 	shl	local23, #3
01e30     F2 42 02 F6 | 	mov	local19, objptr
01e34     F2 4A 02 F1 | 	add	local23, objptr
01e38     25 13 02 FB | 	rdlong	arg01, local23
01e3c     26 00 00 FF 
01e40     00 E5 05 F1 | 	add	objptr, ##19712
01e44     F2 36 02 FB | 	rdlong	local13, objptr
01e48     7B 00 00 FF 
01e4c     FC E4 85 F1 | 	sub	objptr, ##63228
01e50     1B 31 02 F6 | 	mov	local10, local13
01e54     18 15 02 F6 | 	mov	arg02, local10
01e58     6C D2 B1 FD | 	call	#__system__Left_S
01e5c     13 FB 61 FC | 	wrlong	result1, local05
01e60                 | LR__0100
01e60                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e60     7B 00 00 FF 
01e64     F4 E4 05 F1 | 	add	objptr, ##63220
01e68     F2 28 02 FB | 	rdlong	local06, objptr
01e6c     03 28 66 F0 | 	shl	local06, #3
01e70     26 00 00 FF 
01e74     F8 E4 85 F1 | 	sub	objptr, ##19704
01e78     F2 28 02 F1 | 	add	local06, objptr
01e7c     14 13 02 FB | 	rdlong	arg01, local06
01e80     01 14 06 F6 | 	mov	arg02, #1
01e84     54 00 00 FF 
01e88     FC E5 85 F1 | 	sub	objptr, ##43516
01e8c     38 D2 B1 FD | 	call	#__system__Left_S
01e90     FD 12 02 F6 | 	mov	arg01, result1
01e94     63 01 00 FF 
01e98     FD 14 06 F6 | 	mov	arg02, ##@LR__4651
01e9c     0C B2 B1 FD | 	call	#__system___string_cmp
01ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ea4     9C 01 90 5D |  if_ne	jmp	#LR__0107
01ea8     7B 00 00 FF 
01eac     F4 E4 05 F1 | 	add	objptr, ##63220
01eb0     F2 32 02 FB | 	rdlong	local11, objptr
01eb4     03 32 66 F0 | 	shl	local11, #3
01eb8     26 00 00 FF 
01ebc     F8 E4 85 F1 | 	sub	objptr, ##19704
01ec0     F2 30 02 F6 | 	mov	local10, objptr
01ec4     F2 32 02 F1 | 	add	local11, objptr
01ec8     19 13 02 FB | 	rdlong	arg01, local11
01ecc     54 00 00 FF 
01ed0     FC E5 85 F1 | 	sub	objptr, ##43516
01ed4     09 2B 02 F6 | 	mov	local07, arg01
01ed8     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01edc                 | LR__0101
01edc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ee0     01 2A 06 51 |  if_ne	add	local07, #1
01ee4     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ee8                 | LR__0102
01ee8     09 2B 82 F1 | 	sub	local07, arg01
01eec     02 2A 56 F2 | 	cmps	local07, #2 wc
01ef0     50 01 90 CD |  if_b	jmp	#LR__0107
01ef4     01 3A 06 F1 | 	add	local15, #1
01ef8                 | '   k+=1
01ef8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ef8     1D 21 02 F6 | 	mov	local02, local15
01efc     7B 00 00 FF 
01f00     F4 E4 05 F1 | 	add	objptr, ##63220
01f04     F2 5E 02 FB | 	rdlong	local33, objptr
01f08     01 5E 06 F1 | 	add	local33, #1
01f0c     26 00 00 FF 
01f10     F8 E4 85 F1 | 	sub	objptr, ##19704
01f14     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f18                 | LR__0103
01f18     10 29 02 F6 | 	mov	local06, local02
01f1c     01 28 86 F1 | 	sub	local06, #1
01f20     03 28 66 F0 | 	shl	local06, #3
01f24     F2 28 02 F1 | 	add	local06, objptr
01f28     14 23 02 FB | 	rdlong	local03, local06
01f2c     10 33 02 F6 | 	mov	local11, local02
01f30     01 32 86 F1 | 	sub	local11, #1
01f34     03 32 66 F0 | 	shl	local11, #3
01f38     F2 32 02 F1 | 	add	local11, objptr
01f3c     04 32 06 F1 | 	add	local11, #4
01f40     19 2F 02 FB | 	rdlong	local09, local11
01f44     10 33 02 F6 | 	mov	local11, local02
01f48     03 32 66 F0 | 	shl	local11, #3
01f4c     F2 32 02 F1 | 	add	local11, objptr
01f50     19 23 62 FC | 	wrlong	local03, local11
01f54     10 4B 02 F6 | 	mov	local23, local02
01f58     03 4A 66 F0 | 	shl	local23, #3
01f5c     F2 4A 02 F1 | 	add	local23, objptr
01f60     04 4A 06 F1 | 	add	local23, #4
01f64     25 2F 62 FC | 	wrlong	local09, local23
01f68     01 20 86 F1 | 	sub	local02, #1
01f6c     2F 21 52 F2 | 	cmps	local02, local33 wc
01f70     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f74                 | LR__0104
01f74     26 00 00 FF 
01f78     F8 E4 05 F1 | 	add	objptr, ##19704
01f7c     F2 4A 02 FB | 	rdlong	local23, objptr
01f80     25 27 02 F6 | 	mov	local05, local23
01f84     01 26 06 F1 | 	add	local05, #1
01f88     03 26 66 F0 | 	shl	local05, #3
01f8c     26 00 00 FF 
01f90     F8 E4 85 F1 | 	sub	objptr, ##19704
01f94     F2 26 02 F1 | 	add	local05, objptr
01f98     03 4A 66 F0 | 	shl	local23, #3
01f9c     F2 4A 02 F1 | 	add	local23, objptr
01fa0     25 33 02 FB | 	rdlong	local11, local23
01fa4     26 00 00 FF 
01fa8     F8 E4 05 F1 | 	add	objptr, ##19704
01fac     F2 42 02 FB | 	rdlong	local19, objptr
01fb0     21 4B 02 F6 | 	mov	local23, local19
01fb4     25 45 02 F6 | 	mov	local20, local23
01fb8     22 47 02 F6 | 	mov	local21, local20
01fbc     03 46 66 F0 | 	shl	local21, #3
01fc0     26 00 00 FF 
01fc4     F8 E4 85 F1 | 	sub	objptr, ##19704
01fc8     F2 4C 02 F6 | 	mov	local24, objptr
01fcc     F2 46 02 F1 | 	add	local21, objptr
01fd0     23 13 02 FB | 	rdlong	arg01, local21
01fd4     54 00 00 FF 
01fd8     FC E5 85 F1 | 	sub	objptr, ##43516
01fdc     09 2B 02 F6 | 	mov	local07, arg01
01fe0     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fe4                 | LR__0105
01fe4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fe8     01 2A 06 51 |  if_ne	add	local07, #1
01fec     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01ff0                 | LR__0106
01ff0     09 2B 82 F1 | 	sub	local07, arg01
01ff4     15 35 02 F6 | 	mov	local12, local07
01ff8     1A 37 02 F6 | 	mov	local13, local12
01ffc     01 36 86 F1 | 	sub	local13, #1
02000     1B 31 02 F6 | 	mov	local10, local13
02004     19 13 02 F6 | 	mov	arg01, local11
02008     18 15 02 F6 | 	mov	arg02, local10
0200c     40 D1 B1 FD | 	call	#__system__Right_S
02010     13 FB 61 FC | 	wrlong	result1, local05
02014     7B 00 00 FF 
02018     F4 E4 05 F1 | 	add	objptr, ##63220
0201c     F2 26 02 FB | 	rdlong	local05, objptr
02020     03 26 66 F0 | 	shl	local05, #3
02024     26 00 00 FF 
02028     F8 E4 85 F1 | 	sub	objptr, ##19704
0202c     F2 26 02 F1 | 	add	local05, objptr
02030     63 01 00 FF 
02034     FF 32 06 F6 | 	mov	local11, ##@LR__4652
02038     13 33 62 FC | 	wrlong	local11, local05
0203c     54 00 00 FF 
02040     FC E5 85 F1 | 	sub	objptr, ##43516
02044                 | LR__0107
02044     7B 00 00 FF 
02048     F4 E4 05 F1 | 	add	objptr, ##63220
0204c     F2 26 02 FB | 	rdlong	local05, objptr
02050     03 26 66 F0 | 	shl	local05, #3
02054     26 00 00 FF 
02058     F8 E4 85 F1 | 	sub	objptr, ##19704
0205c     F2 26 02 F1 | 	add	local05, objptr
02060     13 33 02 FB | 	rdlong	local11, local05
02064     26 00 00 FF 
02068     FC E4 05 F1 | 	add	objptr, ##19708
0206c     F2 32 62 FC | 	wrlong	local11, objptr
02070                 | ' 
02070                 | ' ' process the case when simple load or save is called without ""
02070                 | ' 
02070                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02070     7B 00 00 FF 
02074     F8 E4 85 F1 | 	sub	objptr, ##63224
02078     63 01 00 FF 
0207c     01 15 06 F6 | 	mov	arg02, ##@LR__4653
02080     19 13 02 F6 | 	mov	arg01, local11
02084     24 B0 B1 FD | 	call	#__system___string_cmp
02088     00 FA 0D F2 | 	cmp	result1, #0 wz
0208c     50 00 90 AD |  if_e	jmp	#LR__0108
02090     7B 00 00 FF 
02094     F8 E4 05 F1 | 	add	objptr, ##63224
02098     F2 12 02 FB | 	rdlong	arg01, objptr
0209c     7B 00 00 FF 
020a0     F8 E4 85 F1 | 	sub	objptr, ##63224
020a4     63 01 00 FF 
020a8     07 15 06 F6 | 	mov	arg02, ##@LR__4654
020ac     FC AF B1 FD | 	call	#__system___string_cmp
020b0     00 FA 0D F2 | 	cmp	result1, #0 wz
020b4     28 00 90 AD |  if_e	jmp	#LR__0108
020b8     7B 00 00 FF 
020bc     F8 E4 05 F1 | 	add	objptr, ##63224
020c0     F2 12 02 FB | 	rdlong	arg01, objptr
020c4     7B 00 00 FF 
020c8     F8 E4 85 F1 | 	sub	objptr, ##63224
020cc     63 01 00 FF 
020d0     0E 15 06 F6 | 	mov	arg02, ##@LR__4655
020d4     D4 AF B1 FD | 	call	#__system___string_cmp
020d8     00 FA 0D F2 | 	cmp	result1, #0 wz
020dc     48 01 90 5D |  if_ne	jmp	#LR__0111
020e0                 | LR__0108
020e0                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
020e0     7B 00 00 FF 
020e4     F4 E4 05 F1 | 	add	objptr, ##63220
020e8     F2 28 02 FB | 	rdlong	local06, objptr
020ec     01 28 06 F1 | 	add	local06, #1
020f0     03 28 66 F0 | 	shl	local06, #3
020f4     26 00 00 FF 
020f8     F8 E4 85 F1 | 	sub	objptr, ##19704
020fc     F2 28 02 F1 | 	add	local06, objptr
02100     14 13 02 FB | 	rdlong	arg01, local06
02104     63 01 00 FF 
02108     14 15 06 F6 | 	mov	arg02, ##@LR__4656
0210c     54 00 00 FF 
02110     FC E5 85 F1 | 	sub	objptr, ##43516
02114     94 AF B1 FD | 	call	#__system___string_cmp
02118     00 FA 0D F2 | 	cmp	result1, #0 wz
0211c     60 00 90 5D |  if_ne	jmp	#LR__0109
02120     7B 00 00 FF 
02124     F4 E4 05 F1 | 	add	objptr, ##63220
02128     F2 26 02 FB | 	rdlong	local05, objptr
0212c     01 26 06 F1 | 	add	local05, #1
02130     03 26 66 F0 | 	shl	local05, #3
02134     26 00 00 FF 
02138     F8 E4 85 F1 | 	sub	objptr, ##19704
0213c     F2 26 02 F1 | 	add	local05, objptr
02140     63 01 00 FF 
02144     17 33 06 F6 | 	mov	local11, ##@LR__4657
02148     13 33 62 FC | 	wrlong	local11, local05
0214c     26 00 00 FF 
02150     F8 E4 05 F1 | 	add	objptr, ##19704
02154     F2 26 02 FB | 	rdlong	local05, objptr
02158     01 26 06 F1 | 	add	local05, #1
0215c     03 26 66 F0 | 	shl	local05, #3
02160     26 00 00 FF 
02164     F8 E4 85 F1 | 	sub	objptr, ##19704
02168     F2 26 02 F1 | 	add	local05, objptr
0216c     04 26 06 F1 | 	add	local05, #4
02170     01 00 80 FF 
02174     13 01 68 FC | 	wrlong	##512, local05
02178     54 00 00 FF 
0217c     FC E5 85 F1 | 	sub	objptr, ##43516
02180                 | LR__0109
02180                 | '   if lparts(addptr+1).part$="off" then   lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
02180     7B 00 00 FF 
02184     F4 E4 05 F1 | 	add	objptr, ##63220
02188     F2 28 02 FB | 	rdlong	local06, objptr
0218c     01 28 06 F1 | 	add	local06, #1
02190     03 28 66 F0 | 	shl	local06, #3
02194     26 00 00 FF 
02198     F8 E4 85 F1 | 	sub	objptr, ##19704
0219c     F2 32 02 F6 | 	mov	local11, objptr
021a0     F2 28 02 F1 | 	add	local06, objptr
021a4     14 13 02 FB | 	rdlong	arg01, local06
021a8     63 01 00 FF 
021ac     19 15 06 F6 | 	mov	arg02, ##@LR__4658
021b0     54 00 00 FF 
021b4     FC E5 85 F1 | 	sub	objptr, ##43516
021b8     F0 AE B1 FD | 	call	#__system___string_cmp
021bc     00 FA 0D F2 | 	cmp	result1, #0 wz
021c0     64 00 90 5D |  if_ne	jmp	#LR__0110
021c4     7B 00 00 FF 
021c8     F4 E4 05 F1 | 	add	objptr, ##63220
021cc     F2 26 02 FB | 	rdlong	local05, objptr
021d0     01 26 06 F1 | 	add	local05, #1
021d4     03 26 66 F0 | 	shl	local05, #3
021d8     26 00 00 FF 
021dc     F8 E4 85 F1 | 	sub	objptr, ##19704
021e0     F2 26 02 F1 | 	add	local05, objptr
021e4     63 01 00 FF 
021e8     1D 33 06 F6 | 	mov	local11, ##@LR__4659
021ec     13 33 62 FC | 	wrlong	local11, local05
021f0     26 00 00 FF 
021f4     F8 E4 05 F1 | 	add	objptr, ##19704
021f8     F2 26 02 FB | 	rdlong	local05, objptr
021fc     01 26 06 F1 | 	add	local05, #1
02200     03 26 66 F0 | 	shl	local05, #3
02204     26 00 00 FF 
02208     F8 E4 85 F1 | 	sub	objptr, ##19704
0220c     F2 26 02 F1 | 	add	local05, objptr
02210     09 32 C6 F9 | 	decod	local11, #9
02214     04 26 06 F1 | 	add	local05, #4
02218     01 00 80 FF 
0221c     13 01 68 FC | 	wrlong	##512, local05
02220     54 00 00 FF 
02224     FC E5 85 F1 | 	sub	objptr, ##43516
02228                 | LR__0110
02228                 | LR__0111
02228                 | ' if (lp$="mode" orelse lp$="m.") then 
02228     7B 00 00 FF 
0222c     F8 E4 05 F1 | 	add	objptr, ##63224
02230     F2 12 02 FB | 	rdlong	arg01, objptr
02234     7B 00 00 FF 
02238     F8 E4 85 F1 | 	sub	objptr, ##63224
0223c     63 01 00 FF 
02240     1F 15 06 F6 | 	mov	arg02, ##@LR__4660
02244     64 AE B1 FD | 	call	#__system___string_cmp
02248     00 FA 0D F2 | 	cmp	result1, #0 wz
0224c     28 00 90 AD |  if_e	jmp	#LR__0112
02250     7B 00 00 FF 
02254     F8 E4 05 F1 | 	add	objptr, ##63224
02258     F2 12 02 FB | 	rdlong	arg01, objptr
0225c     7B 00 00 FF 
02260     F8 E4 85 F1 | 	sub	objptr, ##63224
02264     63 01 00 FF 
02268     24 15 06 F6 | 	mov	arg02, ##@LR__4661
0226c     3C AE B1 FD | 	call	#__system___string_cmp
02270     00 FA 0D F2 | 	cmp	result1, #0 wz
02274     48 02 90 5D |  if_ne	jmp	#LR__0118
02278                 | LR__0112
02278                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
02278     7B 00 00 FF 
0227c     F4 E4 05 F1 | 	add	objptr, ##63220
02280     F2 28 02 FB | 	rdlong	local06, objptr
02284     01 28 06 F1 | 	add	local06, #1
02288     03 28 66 F0 | 	shl	local06, #3
0228c     26 00 00 FF 
02290     F8 E4 85 F1 | 	sub	objptr, ##19704
02294     F2 28 02 F1 | 	add	local06, objptr
02298     14 13 02 FB | 	rdlong	arg01, local06
0229c     63 01 00 FF 
022a0     27 15 06 F6 | 	mov	arg02, ##@LR__4662
022a4     54 00 00 FF 
022a8     FC E5 85 F1 | 	sub	objptr, ##43516
022ac     FC AD B1 FD | 	call	#__system___string_cmp
022b0     00 FA 0D F2 | 	cmp	result1, #0 wz
022b4     34 00 90 5D |  if_ne	jmp	#LR__0113
022b8     7B 00 00 FF 
022bc     F4 E4 05 F1 | 	add	objptr, ##63220
022c0     F2 26 02 FB | 	rdlong	local05, objptr
022c4     01 26 06 F1 | 	add	local05, #1
022c8     03 26 66 F0 | 	shl	local05, #3
022cc     26 00 00 FF 
022d0     F8 E4 85 F1 | 	sub	objptr, ##19704
022d4     F2 26 02 F1 | 	add	local05, objptr
022d8     63 01 00 FF 
022dc     2D 33 06 F6 | 	mov	local11, ##@LR__4663
022e0     13 33 62 FC | 	wrlong	local11, local05
022e4     54 00 00 FF 
022e8     FC E5 85 F1 | 	sub	objptr, ##43516
022ec                 | LR__0113
022ec                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
022ec     7B 00 00 FF 
022f0     F4 E4 05 F1 | 	add	objptr, ##63220
022f4     F2 28 02 FB | 	rdlong	local06, objptr
022f8     01 28 06 F1 | 	add	local06, #1
022fc     03 28 66 F0 | 	shl	local06, #3
02300     26 00 00 FF 
02304     F8 E4 85 F1 | 	sub	objptr, ##19704
02308     F2 28 02 F1 | 	add	local06, objptr
0230c     14 13 02 FB | 	rdlong	arg01, local06
02310     63 01 00 FF 
02314     2F 15 06 F6 | 	mov	arg02, ##@LR__4664
02318     54 00 00 FF 
0231c     FC E5 85 F1 | 	sub	objptr, ##43516
02320     88 AD B1 FD | 	call	#__system___string_cmp
02324     00 FA 0D F2 | 	cmp	result1, #0 wz
02328     34 00 90 5D |  if_ne	jmp	#LR__0114
0232c     7B 00 00 FF 
02330     F4 E4 05 F1 | 	add	objptr, ##63220
02334     F2 26 02 FB | 	rdlong	local05, objptr
02338     01 26 06 F1 | 	add	local05, #1
0233c     03 26 66 F0 | 	shl	local05, #3
02340     26 00 00 FF 
02344     F8 E4 85 F1 | 	sub	objptr, ##19704
02348     F2 26 02 F1 | 	add	local05, objptr
0234c     63 01 00 FF 
02350     38 33 06 F6 | 	mov	local11, ##@LR__4665
02354     13 33 62 FC | 	wrlong	local11, local05
02358     54 00 00 FF 
0235c     FC E5 85 F1 | 	sub	objptr, ##43516
02360                 | LR__0114
02360                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02360     7B 00 00 FF 
02364     F4 E4 05 F1 | 	add	objptr, ##63220
02368     F2 28 02 FB | 	rdlong	local06, objptr
0236c     01 28 06 F1 | 	add	local06, #1
02370     03 28 66 F0 | 	shl	local06, #3
02374     26 00 00 FF 
02378     F8 E4 85 F1 | 	sub	objptr, ##19704
0237c     F2 28 02 F1 | 	add	local06, objptr
02380     14 13 02 FB | 	rdlong	arg01, local06
02384     63 01 00 FF 
02388     3A 15 06 F6 | 	mov	arg02, ##@LR__4666
0238c     54 00 00 FF 
02390     FC E5 85 F1 | 	sub	objptr, ##43516
02394     14 AD B1 FD | 	call	#__system___string_cmp
02398     00 FA 0D F2 | 	cmp	result1, #0 wz
0239c     34 00 90 5D |  if_ne	jmp	#LR__0115
023a0     7B 00 00 FF 
023a4     F4 E4 05 F1 | 	add	objptr, ##63220
023a8     F2 26 02 FB | 	rdlong	local05, objptr
023ac     01 26 06 F1 | 	add	local05, #1
023b0     03 26 66 F0 | 	shl	local05, #3
023b4     26 00 00 FF 
023b8     F8 E4 85 F1 | 	sub	objptr, ##19704
023bc     F2 26 02 F1 | 	add	local05, objptr
023c0     63 01 00 FF 
023c4     43 33 06 F6 | 	mov	local11, ##@LR__4667
023c8     13 33 62 FC | 	wrlong	local11, local05
023cc     54 00 00 FF 
023d0     FC E5 85 F1 | 	sub	objptr, ##43516
023d4                 | LR__0115
023d4                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
023d4     7B 00 00 FF 
023d8     F4 E4 05 F1 | 	add	objptr, ##63220
023dc     F2 28 02 FB | 	rdlong	local06, objptr
023e0     01 28 06 F1 | 	add	local06, #1
023e4     03 28 66 F0 | 	shl	local06, #3
023e8     26 00 00 FF 
023ec     F8 E4 85 F1 | 	sub	objptr, ##19704
023f0     F2 28 02 F1 | 	add	local06, objptr
023f4     14 13 02 FB | 	rdlong	arg01, local06
023f8     63 01 00 FF 
023fc     45 15 06 F6 | 	mov	arg02, ##@LR__4668
02400     54 00 00 FF 
02404     FC E5 85 F1 | 	sub	objptr, ##43516
02408     A0 AC B1 FD | 	call	#__system___string_cmp
0240c     00 FA 0D F2 | 	cmp	result1, #0 wz
02410     34 00 90 5D |  if_ne	jmp	#LR__0116
02414     7B 00 00 FF 
02418     F4 E4 05 F1 | 	add	objptr, ##63220
0241c     F2 26 02 FB | 	rdlong	local05, objptr
02420     01 26 06 F1 | 	add	local05, #1
02424     03 26 66 F0 | 	shl	local05, #3
02428     26 00 00 FF 
0242c     F8 E4 85 F1 | 	sub	objptr, ##19704
02430     F2 26 02 F1 | 	add	local05, objptr
02434     63 01 00 FF 
02438     4E 33 06 F6 | 	mov	local11, ##@LR__4669
0243c     13 33 62 FC | 	wrlong	local11, local05
02440     54 00 00 FF 
02444     FC E5 85 F1 | 	sub	objptr, ##43516
02448                 | LR__0116
02448                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02448     7B 00 00 FF 
0244c     F4 E4 05 F1 | 	add	objptr, ##63220
02450     F2 28 02 FB | 	rdlong	local06, objptr
02454     01 28 06 F1 | 	add	local06, #1
02458     03 28 66 F0 | 	shl	local06, #3
0245c     26 00 00 FF 
02460     F8 E4 85 F1 | 	sub	objptr, ##19704
02464     F2 32 02 F6 | 	mov	local11, objptr
02468     F2 28 02 F1 | 	add	local06, objptr
0246c     14 13 02 FB | 	rdlong	arg01, local06
02470     63 01 00 FF 
02474     50 15 06 F6 | 	mov	arg02, ##@LR__4670
02478     54 00 00 FF 
0247c     FC E5 85 F1 | 	sub	objptr, ##43516
02480     28 AC B1 FD | 	call	#__system___string_cmp
02484     00 FA 0D F2 | 	cmp	result1, #0 wz
02488     34 00 90 5D |  if_ne	jmp	#LR__0117
0248c     7B 00 00 FF 
02490     F4 E4 05 F1 | 	add	objptr, ##63220
02494     F2 26 02 FB | 	rdlong	local05, objptr
02498     01 26 06 F1 | 	add	local05, #1
0249c     03 26 66 F0 | 	shl	local05, #3
024a0     26 00 00 FF 
024a4     F8 E4 85 F1 | 	sub	objptr, ##19704
024a8     F2 26 02 F1 | 	add	local05, objptr
024ac     63 01 00 FF 
024b0     53 33 06 F6 | 	mov	local11, ##@LR__4671
024b4     13 33 62 FC | 	wrlong	local11, local05
024b8     54 00 00 FF 
024bc     FC E5 85 F1 | 	sub	objptr, ##43516
024c0                 | LR__0117
024c0                 | LR__0118
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' ' 2a find part types 
024c0                 | ' 
024c0                 | ' for i=0 to k-1
024c0     00 20 06 F6 | 	mov	local02, #0
024c4     1D 61 02 F6 | 	mov	local34, local15
024c8                 | LR__0119
024c8     30 21 52 F2 | 	cmps	local02, local34 wc
024cc     74 06 90 3D |  if_ae	jmp	#LR__0129
024d0     10 2F 02 F6 | 	mov	local09, local02
024d4     03 2E 66 F0 | 	shl	local09, #3
024d8     54 00 00 FF 
024dc     FC E5 05 F1 | 	add	objptr, ##43516
024e0     F2 2E 02 F1 | 	add	local09, objptr
024e4     10 31 02 F6 | 	mov	local10, local02
024e8     18 35 02 F6 | 	mov	local12, local10
024ec     03 34 66 F0 | 	shl	local12, #3
024f0     F2 4A 02 F6 | 	mov	local23, objptr
024f4     F2 34 02 F1 | 	add	local12, objptr
024f8     1A 13 02 FB | 	rdlong	arg01, local12
024fc     54 00 00 FF 
02500     FC E5 85 F1 | 	sub	objptr, ##43516
02504     B0 14 B0 FD | 	call	#_isseparator
02508     FD FA E1 F8 | 	getbyte	result1, result1, #0
0250c     04 2E 06 F1 | 	add	local09, #4
02510     17 FB 61 FC | 	wrlong	result1, local09
02514                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02514     10 2F 02 F6 | 	mov	local09, local02
02518     03 2E 66 F0 | 	shl	local09, #3
0251c     54 00 00 FF 
02520     FC E5 05 F1 | 	add	objptr, ##43516
02524     F2 2E 02 F1 | 	add	local09, objptr
02528     04 2E 06 F1 | 	add	local09, #4
0252c     17 33 02 FB | 	rdlong	local11, local09
02530     01 32 56 F2 | 	cmps	local11, #1 wc
02534     54 00 00 FF 
02538     FC E5 85 F1 | 	sub	objptr, ##43516
0253c     FC 05 90 3D |  if_ae	jmp	#LR__0128
02540     10 2F 02 F6 | 	mov	local09, local02
02544     03 2E 66 F0 | 	shl	local09, #3
02548     54 00 00 FF 
0254c     FC E5 05 F1 | 	add	objptr, ##43516
02550     F2 2E 02 F1 | 	add	local09, objptr
02554     10 31 02 F6 | 	mov	local10, local02
02558     18 35 02 F6 | 	mov	local12, local10
0255c     03 34 66 F0 | 	shl	local12, #3
02560     F2 4A 02 F6 | 	mov	local23, objptr
02564     F2 34 02 F1 | 	add	local12, objptr
02568     1A 13 02 FB | 	rdlong	arg01, local12
0256c     54 00 00 FF 
02570     FC E5 85 F1 | 	sub	objptr, ##43516
02574     F4 0D B0 FD | 	call	#_isoperator
02578     FD FA E1 F8 | 	getbyte	result1, result1, #0
0257c     04 2E 06 F1 | 	add	local09, #4
02580     17 FB 61 FC | 	wrlong	result1, local09
02584                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
02584     10 2F 02 F6 | 	mov	local09, local02
02588     03 2E 66 F0 | 	shl	local09, #3
0258c     54 00 00 FF 
02590     FC E5 05 F1 | 	add	objptr, ##43516
02594     F2 2E 02 F1 | 	add	local09, objptr
02598     04 2E 06 F1 | 	add	local09, #4
0259c     17 33 02 FB | 	rdlong	local11, local09
025a0     01 32 56 F2 | 	cmps	local11, #1 wc
025a4     54 00 00 FF 
025a8     FC E5 85 F1 | 	sub	objptr, ##43516
025ac     8C 05 90 3D |  if_ae	jmp	#LR__0128
025b0     10 2F 02 F6 | 	mov	local09, local02
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     54 00 00 FF 
025bc     FC E5 05 F1 | 	add	objptr, ##43516
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     10 31 02 F6 | 	mov	local10, local02
025c8     18 35 02 F6 | 	mov	local12, local10
025cc     03 34 66 F0 | 	shl	local12, #3
025d0     F2 4A 02 F6 | 	mov	local23, objptr
025d4     F2 34 02 F1 | 	add	local12, objptr
025d8     1A 13 02 FB | 	rdlong	arg01, local12
025dc     54 00 00 FF 
025e0     FC E5 85 F1 | 	sub	objptr, ##43516
025e4                 | ' 
025e4                 | ' select case s
025e4     64 01 00 FF 
025e8     34 14 06 F6 | 	mov	arg02, ##@LR__4742
025ec     BC AA B1 FD | 	call	#__system___string_cmp
025f0     00 FA 0D F2 | 	cmp	result1, #0 wz
025f4     1B FA 05 A6 |  if_e	mov	result1, #27
025f8     00 FA 05 56 |  if_ne	mov	result1, #0
025fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02600     04 2E 06 F1 | 	add	local09, #4
02604     17 FB 61 FC | 	wrlong	result1, local09
02608                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02608     10 2F 02 F6 | 	mov	local09, local02
0260c     03 2E 66 F0 | 	shl	local09, #3
02610     54 00 00 FF 
02614     FC E5 05 F1 | 	add	objptr, ##43516
02618     F2 2E 02 F1 | 	add	local09, objptr
0261c     04 2E 06 F1 | 	add	local09, #4
02620     17 33 02 FB | 	rdlong	local11, local09
02624     01 32 56 F2 | 	cmps	local11, #1 wc
02628     54 00 00 FF 
0262c     FC E5 85 F1 | 	sub	objptr, ##43516
02630     08 05 90 3D |  if_ae	jmp	#LR__0128
02634     10 2F 02 F6 | 	mov	local09, local02
02638     03 2E 66 F0 | 	shl	local09, #3
0263c     54 00 00 FF 
02640     FC E5 05 F1 | 	add	objptr, ##43516
02644     F2 2E 02 F1 | 	add	local09, objptr
02648     10 31 02 F6 | 	mov	local10, local02
0264c     18 35 02 F6 | 	mov	local12, local10
02650     03 34 66 F0 | 	shl	local12, #3
02654     F2 4A 02 F6 | 	mov	local23, objptr
02658     F2 34 02 F1 | 	add	local12, objptr
0265c     1A 13 02 FB | 	rdlong	arg01, local12
02660     54 00 00 FF 
02664     FC E5 85 F1 | 	sub	objptr, ##43516
02668     4C 15 B0 FD | 	call	#_iscommand
0266c     FD FA E1 F8 | 	getbyte	result1, result1, #0
02670     04 2E 06 F1 | 	add	local09, #4
02674     17 FB 61 FC | 	wrlong	result1, local09
02678                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
02678     10 2F 02 F6 | 	mov	local09, local02
0267c     03 2E 66 F0 | 	shl	local09, #3
02680     54 00 00 FF 
02684     FC E5 05 F1 | 	add	objptr, ##43516
02688     F2 2E 02 F1 | 	add	local09, objptr
0268c     04 2E 06 F1 | 	add	local09, #4
02690     17 33 02 FB | 	rdlong	local11, local09
02694     01 32 56 F2 | 	cmps	local11, #1 wc
02698     54 00 00 FF 
0269c     FC E5 85 F1 | 	sub	objptr, ##43516
026a0     98 04 90 3D |  if_ae	jmp	#LR__0128
026a4     10 2F 02 F6 | 	mov	local09, local02
026a8     03 2E 66 F0 | 	shl	local09, #3
026ac     54 00 00 FF 
026b0     FC E5 05 F1 | 	add	objptr, ##43516
026b4     F2 2E 02 F1 | 	add	local09, objptr
026b8     10 31 02 F6 | 	mov	local10, local02
026bc     18 35 02 F6 | 	mov	local12, local10
026c0     03 34 66 F0 | 	shl	local12, #3
026c4     F2 4A 02 F6 | 	mov	local23, objptr
026c8     F2 34 02 F1 | 	add	local12, objptr
026cc     1A 13 02 FB | 	rdlong	arg01, local12
026d0     54 00 00 FF 
026d4     FC E5 85 F1 | 	sub	objptr, ##43516
026d8     5C 20 B0 FD | 	call	#_isfunction
026dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
026e0     04 2E 06 F1 | 	add	local09, #4
026e4     17 FB 61 FC | 	wrlong	result1, local09
026e8                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
026e8     10 2F 02 F6 | 	mov	local09, local02
026ec     03 2E 66 F0 | 	shl	local09, #3
026f0     54 00 00 FF 
026f4     FC E5 05 F1 | 	add	objptr, ##43516
026f8     F2 2E 02 F1 | 	add	local09, objptr
026fc     04 2E 06 F1 | 	add	local09, #4
02700     17 33 02 FB | 	rdlong	local11, local09
02704     01 32 56 F2 | 	cmps	local11, #1 wc
02708     54 00 00 FF 
0270c     FC E5 85 F1 | 	sub	objptr, ##43516
02710     28 04 90 3D |  if_ae	jmp	#LR__0128
02714     10 2F 02 F6 | 	mov	local09, local02
02718     03 2E 66 F0 | 	shl	local09, #3
0271c     54 00 00 FF 
02720     FC E5 05 F1 | 	add	objptr, ##43516
02724     F2 2E 02 F1 | 	add	local09, objptr
02728     10 31 02 F6 | 	mov	local10, local02
0272c     18 37 02 F6 | 	mov	local13, local10
02730     03 36 66 F0 | 	shl	local13, #3
02734     F2 34 02 F6 | 	mov	local12, objptr
02738     F2 36 02 F1 | 	add	local13, objptr
0273c     1B 13 02 FB | 	rdlong	arg01, local13
02740     54 00 00 FF 
02744     FC E5 85 F1 | 	sub	objptr, ##43516
02748     00 0F B0 FD | 	call	#_isnotename
0274c     04 2E 06 F1 | 	add	local09, #4
02750     17 FB 61 FC | 	wrlong	result1, local09
02754                 | ' lparts(i).token=isnotename(lparts(i).part$) 
02754                 | ' if lparts(i).token>0 then 
02754     10 2F 02 F6 | 	mov	local09, local02
02758     03 2E 66 F0 | 	shl	local09, #3
0275c     54 00 00 FF 
02760     FC E5 05 F1 | 	add	objptr, ##43516
02764     F2 2E 02 F1 | 	add	local09, objptr
02768     04 2E 06 F1 | 	add	local09, #4
0276c     17 33 02 FB | 	rdlong	local11, local09
02770     01 32 56 F2 | 	cmps	local11, #1 wc
02774     54 00 00 FF 
02778     FC E5 85 F1 | 	sub	objptr, ##43516
0277c     88 00 90 CD |  if_b	jmp	#LR__0120
02780     10 27 02 F6 | 	mov	local05, local02
02784     03 26 66 F0 | 	shl	local05, #3
02788     54 00 00 FF 
0278c     FC E5 05 F1 | 	add	objptr, ##43516
02790     F2 26 02 F1 | 	add	local05, objptr
02794     04 26 06 F1 | 	add	local05, #4
02798     13 33 02 FB | 	rdlong	local11, local05
0279c     19 13 02 F6 | 	mov	arg01, local11
027a0     54 00 00 FF 
027a4     FC E5 85 F1 | 	sub	objptr, ##43516
027a8     C4 64 B1 FD | 	call	#_getnoteval
027ac     FD 62 02 F6 | 	mov	local35, result1
027b0     10 2F 02 F6 | 	mov	local09, local02
027b4     03 2E 66 F0 | 	shl	local09, #3
027b8     54 00 00 FF 
027bc     FC E5 05 F1 | 	add	objptr, ##43516
027c0     F2 2E 02 F1 | 	add	local09, objptr
027c4     31 13 02 F6 | 	mov	arg01, local35
027c8     54 00 00 FF 
027cc     FC E5 85 F1 | 	sub	objptr, ##43516
027d0     EC CA B1 FD | 	call	#__system__str_S
027d4     17 FB 61 FC | 	wrlong	result1, local09
027d8     10 23 02 F6 | 	mov	local03, local02
027dc     11 2F 02 F6 | 	mov	local09, local03
027e0     03 2E 66 F0 | 	shl	local09, #3
027e4     54 00 00 FF 
027e8     FC E5 05 F1 | 	add	objptr, ##43516
027ec     F2 2E 02 F1 | 	add	local09, objptr
027f0     04 2E 06 F1 | 	add	local09, #4
027f4     01 00 80 FF 
027f8     17 05 68 FC | 	wrlong	##514, local09
027fc     54 00 00 FF 
02800     FC E5 85 F1 | 	sub	objptr, ##43516
02804     34 03 90 FD | 	jmp	#LR__0128
02808                 | LR__0120
02808     10 27 02 F6 | 	mov	local05, local02
0280c     03 26 66 F0 | 	shl	local05, #3
02810     54 00 00 FF 
02814     FC E5 05 F1 | 	add	objptr, ##43516
02818     F2 26 02 F1 | 	add	local05, objptr
0281c     13 13 02 FB | 	rdlong	arg01, local05
02820     54 00 00 FF 
02824     FC E5 85 F1 | 	sub	objptr, ##43516
02828     80 25 B0 FD | 	call	#_isnum
0282c     FD 24 02 F6 | 	mov	local04, result1
02830     7B 00 00 FF 
02834     00 E5 05 F1 | 	add	objptr, ##63232
02838     F2 24 62 FC | 	wrlong	local04, objptr
0283c     10 27 02 F6 | 	mov	local05, local02
02840     03 26 66 F0 | 	shl	local05, #3
02844     26 00 00 FF 
02848     04 E5 85 F1 | 	sub	objptr, ##19716
0284c     F2 26 02 F1 | 	add	local05, objptr
02850     13 13 02 FB | 	rdlong	arg01, local05
02854     54 00 00 FF 
02858     FC E5 85 F1 | 	sub	objptr, ##43516
0285c     24 28 B0 FD | 	call	#_isint
02860     FD 24 02 F6 | 	mov	local04, result1
02864     7B 00 00 FF 
02868     04 E5 05 F1 | 	add	objptr, ##63236
0286c     F2 24 62 FC | 	wrlong	local04, objptr
02870     10 27 02 F6 | 	mov	local05, local02
02874     03 26 66 F0 | 	shl	local05, #3
02878     26 00 00 FF 
0287c     08 E5 85 F1 | 	sub	objptr, ##19720
02880     F2 28 02 F6 | 	mov	local06, objptr
02884     F2 26 02 F1 | 	add	local05, objptr
02888     13 13 02 FB | 	rdlong	arg01, local05
0288c     54 00 00 FF 
02890     FC E5 85 F1 | 	sub	objptr, ##43516
02894     44 29 B0 FD | 	call	#_isdec
02898     7B 00 00 FF 
0289c     08 E5 05 F1 | 	add	objptr, ##63240
028a0     F2 FA 61 FC | 	wrlong	result1, objptr
028a4                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
028a4     08 E4 85 F1 | 	sub	objptr, #8
028a8     F2 24 0A FB | 	rdlong	local04, objptr wz
028ac     7B 00 00 FF 
028b0     00 E5 85 F1 | 	sub	objptr, ##63232
028b4     60 00 90 AD |  if_e	jmp	#LR__0121
028b8     7B 00 00 FF 
028bc     04 E5 05 F1 | 	add	objptr, ##63236
028c0     F2 2E 0A FB | 	rdlong	local09, objptr wz
028c4     7B 00 00 FF 
028c8     04 E5 85 F1 | 	sub	objptr, ##63236
028cc     48 00 90 AD |  if_e	jmp	#LR__0121
028d0     7B 00 00 FF 
028d4     08 E5 05 F1 | 	add	objptr, ##63240
028d8     F2 32 0A FB | 	rdlong	local11, objptr wz
028dc     7B 00 00 FF 
028e0     08 E5 85 F1 | 	sub	objptr, ##63240
028e4     30 00 90 AD |  if_e	jmp	#LR__0121
028e8     10 23 02 F6 | 	mov	local03, local02
028ec     11 2F 02 F6 | 	mov	local09, local03
028f0     03 2E 66 F0 | 	shl	local09, #3
028f4     54 00 00 FF 
028f8     FC E5 05 F1 | 	add	objptr, ##43516
028fc     F2 2E 02 F1 | 	add	local09, objptr
02900     04 2E 06 F1 | 	add	local09, #4
02904     01 00 80 FF 
02908     17 01 68 FC | 	wrlong	##512, local09
0290c     54 00 00 FF 
02910     FC E5 85 F1 | 	sub	objptr, ##43516
02914     24 02 90 FD | 	jmp	#LR__0128
02918                 | LR__0121
02918                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
02918     7B 00 00 FF 
0291c     00 E5 05 F1 | 	add	objptr, ##63232
02920     F2 24 0A FB | 	rdlong	local04, objptr wz
02924     7B 00 00 FF 
02928     00 E5 85 F1 | 	sub	objptr, ##63232
0292c     64 00 90 AD |  if_e	jmp	#LR__0122
02930     7B 00 00 FF 
02934     04 E5 05 F1 | 	add	objptr, ##63236
02938     F2 2E 0A FB | 	rdlong	local09, objptr wz
0293c     7B 00 00 FF 
02940     04 E5 85 F1 | 	sub	objptr, ##63236
02944     7B 00 00 5F 
02948     08 E5 05 51 |  if_ne	add	objptr, ##63240
0294c     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02950     7B 00 00 5F 
02954     08 E5 85 51 |  if_ne	sub	objptr, ##63240
02958     19 29 22 56 |  if_ne	not	local06, local11
0295c     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02960     30 00 90 AD |  if_e	jmp	#LR__0122
02964     10 23 02 F6 | 	mov	local03, local02
02968     11 2F 02 F6 | 	mov	local09, local03
0296c     03 2E 66 F0 | 	shl	local09, #3
02970     54 00 00 FF 
02974     FC E5 05 F1 | 	add	objptr, ##43516
02978     F2 2E 02 F1 | 	add	local09, objptr
0297c     04 2E 06 F1 | 	add	local09, #4
02980     01 00 80 FF 
02984     17 03 68 FC | 	wrlong	##513, local09
02988     54 00 00 FF 
0298c     FC E5 85 F1 | 	sub	objptr, ##43516
02990     A8 01 90 FD | 	jmp	#LR__0128
02994                 | LR__0122
02994                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
02994     7B 00 00 FF 
02998     00 E5 05 F1 | 	add	objptr, ##63232
0299c     F2 24 0A FB | 	rdlong	local04, objptr wz
029a0     7B 00 00 FF 
029a4     00 E5 85 F1 | 	sub	objptr, ##63232
029a8     7B 00 00 5F 
029ac     04 E5 05 51 |  if_ne	add	objptr, ##63236
029b0     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
029b4     7B 00 00 5F 
029b8     04 E5 85 51 |  if_ne	sub	objptr, ##63236
029bc     17 2F 22 56 |  if_ne	not	local09, local09
029c0     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
029c4     7B 00 00 5F 
029c8     08 E5 05 51 |  if_ne	add	objptr, ##63240
029cc     F2 32 02 5B |  if_ne	rdlong	local11, objptr
029d0     7B 00 00 5F 
029d4     08 E5 85 51 |  if_ne	sub	objptr, ##63240
029d8     19 29 22 56 |  if_ne	not	local06, local11
029dc     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
029e0     30 00 90 AD |  if_e	jmp	#LR__0123
029e4     10 23 02 F6 | 	mov	local03, local02
029e8     11 2F 02 F6 | 	mov	local09, local03
029ec     03 2E 66 F0 | 	shl	local09, #3
029f0     54 00 00 FF 
029f4     FC E5 05 F1 | 	add	objptr, ##43516
029f8     F2 2E 02 F1 | 	add	local09, objptr
029fc     04 2E 06 F1 | 	add	local09, #4
02a00     01 00 80 FF 
02a04     17 05 68 FC | 	wrlong	##514, local09
02a08     54 00 00 FF 
02a0c     FC E5 85 F1 | 	sub	objptr, ##43516
02a10     28 01 90 FD | 	jmp	#LR__0128
02a14                 | LR__0123
02a14                 | ' 
02a14                 | ' if isstring(lparts(i).part$) then 
02a14     10 27 02 F6 | 	mov	local05, local02
02a18     03 26 66 F0 | 	shl	local05, #3
02a1c     54 00 00 FF 
02a20     FC E5 05 F1 | 	add	objptr, ##43516
02a24     F2 26 02 F1 | 	add	local05, objptr
02a28     13 13 02 FB | 	rdlong	arg01, local05
02a2c     54 00 00 FF 
02a30     FC E5 85 F1 | 	sub	objptr, ##43516
02a34     64 28 B0 FD | 	call	#_isstring
02a38     00 FA 0D F2 | 	cmp	result1, #0 wz
02a3c     A0 00 90 AD |  if_e	jmp	#LR__0126
02a40     10 2F 02 F6 | 	mov	local09, local02
02a44     03 2E 66 F0 | 	shl	local09, #3
02a48     54 00 00 FF 
02a4c     FC E5 05 F1 | 	add	objptr, ##43516
02a50     F2 2E 02 F1 | 	add	local09, objptr
02a54     04 2E 06 F1 | 	add	local09, #4
02a58     01 00 80 FF 
02a5c     17 07 68 FC | 	wrlong	##515, local09
02a60     10 23 02 F6 | 	mov	local03, local02
02a64     11 2F 02 F6 | 	mov	local09, local03
02a68     03 2E 66 F0 | 	shl	local09, #3
02a6c     F2 2E 02 F1 | 	add	local09, objptr
02a70     10 37 02 F6 | 	mov	local13, local02
02a74     03 36 66 F0 | 	shl	local13, #3
02a78     F2 36 02 F1 | 	add	local13, objptr
02a7c     1B 29 02 FB | 	rdlong	local06, local13
02a80     02 32 06 F6 | 	mov	local11, #2
02a84     10 4B 02 F6 | 	mov	local23, local02
02a88     25 43 02 F6 | 	mov	local19, local23
02a8c     21 45 02 F6 | 	mov	local20, local19
02a90     03 44 66 F0 | 	shl	local20, #3
02a94     F2 46 02 F6 | 	mov	local21, objptr
02a98     F2 44 02 F1 | 	add	local20, objptr
02a9c     22 13 02 FB | 	rdlong	arg01, local20
02aa0     54 00 00 FF 
02aa4     FC E5 85 F1 | 	sub	objptr, ##43516
02aa8     09 2B 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0125-@LR__0124)>>2,fcache_load_ptr_
02ab0                 | LR__0124
02ab0     15 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 2A 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0124
02abc                 | LR__0125
02abc     09 2B 82 F1 | 	sub	local07, arg01
02ac0     15 31 02 F6 | 	mov	local10, local07
02ac4     02 30 86 F1 | 	sub	local10, #2
02ac8     14 13 02 F6 | 	mov	arg01, local06
02acc     19 15 02 F6 | 	mov	arg02, local11
02ad0     18 17 02 F6 | 	mov	arg03, local10
02ad4     08 C7 B1 FD | 	call	#__system__Mid_S
02ad8     17 FB 61 FC | 	wrlong	result1, local09
02adc     5C 00 90 FD | 	jmp	#LR__0128
02ae0                 | LR__0126
02ae0                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02ae0     10 23 02 F6 | 	mov	local03, local02
02ae4     11 27 02 F6 | 	mov	local05, local03
02ae8     03 26 66 F0 | 	shl	local05, #3
02aec     54 00 00 FF 
02af0     FC E5 05 F1 | 	add	objptr, ##43516
02af4     F2 26 02 F1 | 	add	local05, objptr
02af8     13 13 02 FB | 	rdlong	arg01, local05
02afc     54 00 00 FF 
02b00     FC E5 85 F1 | 	sub	objptr, ##43516
02b04     30 20 B0 FD | 	call	#_isname
02b08     00 FA 4D F2 | 	cmps	result1, #0 wz
02b0c     2C 00 90 AD |  if_e	jmp	#LR__0127
02b10     10 23 02 F6 | 	mov	local03, local02
02b14     11 2F 02 F6 | 	mov	local09, local03
02b18     03 2E 66 F0 | 	shl	local09, #3
02b1c     54 00 00 FF 
02b20     FC E5 05 F1 | 	add	objptr, ##43516
02b24     F2 2E 02 F1 | 	add	local09, objptr
02b28     04 2E 06 F1 | 	add	local09, #4
02b2c     01 00 80 FF 
02b30     17 09 68 FC | 	wrlong	##516, local09
02b34     54 00 00 FF 
02b38     FC E5 85 F1 | 	sub	objptr, ##43516
02b3c                 | LR__0127
02b3c                 | LR__0128
02b3c     01 20 06 F1 | 	add	local02, #1
02b40     84 F9 9F FD | 	jmp	#LR__0119
02b44                 | LR__0129
02b44     1D 2F 02 F6 | 	mov	local09, local15
02b48     03 2E 66 F0 | 	shl	local09, #3
02b4c     54 00 00 FF 
02b50     FC E5 05 F1 | 	add	objptr, ##43516
02b54     F2 2E 02 F1 | 	add	local09, objptr
02b58     04 2E 06 F1 | 	add	local09, #4
02b5c     17 FD 6B FC | 	wrlong	#510, local09
02b60     1D 2F 02 F6 | 	mov	local09, local15
02b64     03 2E 66 F0 | 	shl	local09, #3
02b68     F2 26 02 F6 | 	mov	local05, objptr
02b6c     F2 2E 02 F1 | 	add	local09, objptr
02b70     63 01 00 FF 
02b74     55 29 06 F6 | 	mov	local06, ##@LR__4672
02b78     17 29 62 FC | 	wrlong	local06, local09
02b7c     10 00 00 FF 
02b80     54 E4 05 F1 | 	add	objptr, ##8276
02b84     F2 3A 62 FC | 	wrlong	local15, objptr
02b88                 | ' 
02b88                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02b88                 | ' 
02b88                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02b88                 | '  
02b88                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02b88     16 00 00 FF 
02b8c     A8 E4 05 F1 | 	add	objptr, ##11432
02b90     F2 12 02 FB | 	rdlong	arg01, objptr
02b94     7B 00 00 FF 
02b98     F8 E4 85 F1 | 	sub	objptr, ##63224
02b9c     63 01 00 FF 
02ba0     56 2F 06 F6 | 	mov	local09, ##@LR__4673
02ba4     17 15 02 F6 | 	mov	arg02, local09
02ba8     00 A5 B1 FD | 	call	#__system___string_cmp
02bac     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb0     1C 01 90 AD |  if_e	jmp	#LR__0130
02bb4     7B 00 00 FF 
02bb8     F8 E4 05 F1 | 	add	objptr, ##63224
02bbc     F2 12 02 FB | 	rdlong	arg01, objptr
02bc0     7B 00 00 FF 
02bc4     F8 E4 85 F1 | 	sub	objptr, ##63224
02bc8     63 01 00 FF 
02bcc     5B 27 06 F6 | 	mov	local05, ##@LR__4674
02bd0     13 2F 02 F6 | 	mov	local09, local05
02bd4     17 15 02 F6 | 	mov	arg02, local09
02bd8     D0 A4 B1 FD | 	call	#__system___string_cmp
02bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02be0     EC 00 90 AD |  if_e	jmp	#LR__0130
02be4     7B 00 00 FF 
02be8     F8 E4 05 F1 | 	add	objptr, ##63224
02bec     F2 12 02 FB | 	rdlong	arg01, objptr
02bf0     7B 00 00 FF 
02bf4     F8 E4 85 F1 | 	sub	objptr, ##63224
02bf8     63 01 00 FF 
02bfc     60 29 06 F6 | 	mov	local06, ##@LR__4675
02c00     14 27 02 F6 | 	mov	local05, local06
02c04     13 15 02 F6 | 	mov	arg02, local05
02c08     A0 A4 B1 FD | 	call	#__system___string_cmp
02c0c     FD 2E 0A F6 | 	mov	local09, result1 wz
02c10     BC 00 90 AD |  if_e	jmp	#LR__0130
02c14     7B 00 00 FF 
02c18     F8 E4 05 F1 | 	add	objptr, ##63224
02c1c     F2 12 02 FB | 	rdlong	arg01, objptr
02c20     7B 00 00 FF 
02c24     F8 E4 85 F1 | 	sub	objptr, ##63224
02c28     63 01 00 FF 
02c2c     65 33 06 F6 | 	mov	local11, ##@LR__4676
02c30     19 29 02 F6 | 	mov	local06, local11
02c34     14 15 02 F6 | 	mov	arg02, local06
02c38     70 A4 B1 FD | 	call	#__system___string_cmp
02c3c     FD 26 0A F6 | 	mov	local05, result1 wz
02c40     8C 00 90 AD |  if_e	jmp	#LR__0130
02c44     7B 00 00 FF 
02c48     F8 E4 05 F1 | 	add	objptr, ##63224
02c4c     F2 12 02 FB | 	rdlong	arg01, objptr
02c50     7B 00 00 FF 
02c54     F8 E4 85 F1 | 	sub	objptr, ##63224
02c58     63 01 00 FF 
02c5c     69 31 06 F6 | 	mov	local10, ##@LR__4677
02c60     18 33 02 F6 | 	mov	local11, local10
02c64     19 15 02 F6 | 	mov	arg02, local11
02c68     40 A4 B1 FD | 	call	#__system___string_cmp
02c6c     FD 28 0A F6 | 	mov	local06, result1 wz
02c70     5C 00 90 AD |  if_e	jmp	#LR__0130
02c74     7B 00 00 FF 
02c78     F8 E4 05 F1 | 	add	objptr, ##63224
02c7c     F2 12 02 FB | 	rdlong	arg01, objptr
02c80     7B 00 00 FF 
02c84     F8 E4 85 F1 | 	sub	objptr, ##63224
02c88     63 01 00 FF 
02c8c     6D 31 06 F6 | 	mov	local10, ##@LR__4678
02c90     18 15 02 F6 | 	mov	arg02, local10
02c94     14 A4 B1 FD | 	call	#__system___string_cmp
02c98     FD 32 0A F6 | 	mov	local11, result1 wz
02c9c     30 00 90 AD |  if_e	jmp	#LR__0130
02ca0     7B 00 00 FF 
02ca4     F8 E4 05 F1 | 	add	objptr, ##63224
02ca8     F2 12 02 FB | 	rdlong	arg01, objptr
02cac     7B 00 00 FF 
02cb0     F8 E4 85 F1 | 	sub	objptr, ##63224
02cb4     63 01 00 FF 
02cb8     70 35 06 F6 | 	mov	local12, ##@LR__4679
02cbc     1A 37 02 F6 | 	mov	local13, local12
02cc0     1B 15 02 F6 | 	mov	arg02, local13
02cc4     E4 A3 B1 FD | 	call	#__system___string_cmp
02cc8     FD 30 0A F6 | 	mov	local10, result1 wz
02ccc     9C 00 90 5D |  if_ne	jmp	#LR__0131
02cd0                 | LR__0130
02cd0     7B 00 00 FF 
02cd4     F4 E4 05 F1 | 	add	objptr, ##63220
02cd8     F2 34 02 FB | 	rdlong	local12, objptr
02cdc     1A 37 02 F6 | 	mov	local13, local12
02ce0     01 36 06 F1 | 	add	local13, #1
02ce4     1B 4B 02 F6 | 	mov	local23, local13
02ce8     25 43 02 F6 | 	mov	local19, local23
02cec     03 42 66 F0 | 	shl	local19, #3
02cf0     26 00 00 FF 
02cf4     F8 E4 85 F1 | 	sub	objptr, ##19704
02cf8     F2 44 02 F6 | 	mov	local20, objptr
02cfc     F2 42 02 F1 | 	add	local19, objptr
02d00     04 42 06 F1 | 	add	local19, #4
02d04     21 4D 02 FB | 	rdlong	local24, local19
02d08     04 42 86 F1 | 	sub	local19, #4
02d0c     26 47 02 F6 | 	mov	local21, local24
02d10     01 00 00 FF 
02d14     04 46 0E F2 | 	cmp	local21, ##516 wz
02d18     54 00 00 FF 
02d1c     FC E5 85 F1 | 	sub	objptr, ##43516
02d20     48 00 90 5D |  if_ne	jmp	#LR__0131
02d24     7B 00 00 FF 
02d28     F4 E4 05 F1 | 	add	objptr, ##63220
02d2c     F2 2E 02 FB | 	rdlong	local09, objptr
02d30     01 2E 06 F1 | 	add	local09, #1
02d34     17 27 02 F6 | 	mov	local05, local09
02d38     03 26 66 F0 | 	shl	local05, #3
02d3c     26 00 00 FF 
02d40     F8 E4 85 F1 | 	sub	objptr, ##19704
02d44     F2 28 02 F6 | 	mov	local06, objptr
02d48     F2 26 02 F1 | 	add	local05, objptr
02d4c     01 00 00 FF 
02d50     03 32 06 F6 | 	mov	local11, ##515
02d54     04 26 06 F1 | 	add	local05, #4
02d58     01 00 80 FF 
02d5c     13 07 68 FC | 	wrlong	##515, local05
02d60     04 26 86 F1 | 	sub	local05, #4
02d64     54 00 00 FF 
02d68     FC E5 85 F1 | 	sub	objptr, ##43516
02d6c                 | LR__0131
02d6c                 | ' 
02d6c                 | ' ' abbreviated command has to be at the position addptr
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' '2b determine a type of the line
02d6c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02d6c     54 00 00 FF 
02d70     FC E5 05 F1 | 	add	objptr, ##43516
02d74     F2 12 02 FB | 	rdlong	arg01, objptr
02d78     54 00 00 FF 
02d7c     FC E5 85 F1 | 	sub	objptr, ##43516
02d80     58 24 B0 FD | 	call	#_isdec
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     30 00 90 AD |  if_e	jmp	#LR__0132
02d8c     54 00 00 FF 
02d90     FC E5 05 F1 | 	add	objptr, ##43516
02d94     F2 12 02 FB | 	rdlong	arg01, objptr
02d98     54 00 00 FF 
02d9c     FC E5 85 F1 | 	sub	objptr, ##43516
02da0     00 14 06 F6 | 	mov	arg02, #0
02da4     D0 D4 B1 FD | 	call	#__system____builtin_atoi
02da8     7B 00 00 FF 
02dac     80 E4 05 F1 | 	add	objptr, ##63104
02db0     F2 FA 61 FC | 	wrlong	result1, objptr
02db4     7B 00 00 FF 
02db8     80 E4 85 F1 | 	sub	objptr, ##63104
02dbc                 | LR__0132
02dbc                 | ' 
02dbc                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02dbc     7B 00 00 FF 
02dc0     80 E4 05 F1 | 	add	objptr, ##63104
02dc4     F2 24 02 FB | 	rdlong	local04, objptr
02dc8     7B 00 00 FF 
02dcc     80 E4 85 F1 | 	sub	objptr, ##63104
02dd0     01 24 16 F2 | 	cmp	local04, #1 wc
02dd4     3C 00 90 CD |  if_b	jmp	#LR__0133
02dd8     01 3A 0E F2 | 	cmp	local15, #1 wz
02ddc     57 00 00 AF 
02de0     14 E4 05 A1 |  if_e	add	objptr, ##44564
02de4     F2 26 02 AB |  if_e	rdlong	local05, objptr
02de8     57 00 00 AF 
02dec     14 E4 85 A1 |  if_e	sub	objptr, ##44564
02df0     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02df4     1C 00 90 5D |  if_ne	jmp	#LR__0133
02df8     7B 00 00 FF 
02dfc     80 E4 05 F1 | 	add	objptr, ##63104
02e00     F2 12 02 FB | 	rdlong	arg01, objptr
02e04     7B 00 00 FF 
02e08     80 E4 85 F1 | 	sub	objptr, ##63104
02e0c     F0 24 B0 FD | 	call	#_deleteline
02e10     4C 05 90 FD | 	jmp	#LR__0150
02e14                 | LR__0133
02e14                 | ' 
02e14                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02e14     7B 00 00 FF 
02e18     80 E4 05 F1 | 	add	objptr, ##63104
02e1c     F2 24 02 FB | 	rdlong	local04, objptr
02e20     7B 00 00 FF 
02e24     80 E4 85 F1 | 	sub	objptr, ##63104
02e28     01 24 16 F2 | 	cmp	local04, #1 wc
02e2c     EC 00 90 CD |  if_b	jmp	#LR__0136
02e30     57 00 00 FF 
02e34     14 E4 05 F1 | 	add	objptr, ##44564
02e38     F2 26 02 FB | 	rdlong	local05, objptr
02e3c     57 00 00 FF 
02e40     14 E4 85 F1 | 	sub	objptr, ##44564
02e44     13 2F 0A F6 | 	mov	local09, local05 wz
02e48     20 00 90 AD |  if_e	jmp	#LR__0134
02e4c     57 00 00 FF 
02e50     14 E4 05 F1 | 	add	objptr, ##44564
02e54     F2 32 02 FB | 	rdlong	local11, objptr
02e58     57 00 00 FF 
02e5c     14 E4 85 F1 | 	sub	objptr, ##44564
02e60     19 29 02 F6 | 	mov	local06, local11
02e64     03 28 0E F2 | 	cmp	local06, #3 wz
02e68     B0 00 90 5D |  if_ne	jmp	#LR__0136
02e6c                 | LR__0134
02e6c     55 00 00 FF 
02e70     10 E4 05 F1 | 	add	objptr, ##43536
02e74     F2 36 02 FB | 	rdlong	local13, objptr
02e78     55 00 00 FF 
02e7c     10 E4 85 F1 | 	sub	objptr, ##43536
02e80     1B 31 02 F6 | 	mov	local10, local13
02e84     1B 30 0E F2 | 	cmp	local10, #27 wz
02e88     90 00 90 AD |  if_e	jmp	#LR__0136
02e8c     7B 00 00 FF 
02e90     80 E4 05 F1 | 	add	objptr, ##63104
02e94     F2 12 02 FB | 	rdlong	arg01, objptr
02e98     24 00 00 FF 
02e9c     6C E4 85 F1 | 	sub	objptr, ##18540
02ea0     F2 16 02 FB | 	rdlong	arg03, objptr
02ea4     57 00 00 FF 
02ea8     14 E4 85 F1 | 	sub	objptr, ##44564
02eac     00 14 06 F6 | 	mov	arg02, #0
02eb0     8C 38 B0 FD | 	call	#_compile
02eb4     FD 1E 0A F6 | 	mov	local01, result1 wz
02eb8                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02eb8                 | '   if err<>0 then printerror(err): goto 104
02eb8     0C 00 90 AD |  if_e	jmp	#LR__0135
02ebc     0F 13 02 F6 | 	mov	arg01, local01
02ec0     64 61 B1 FD | 	call	#_printerror
02ec4     98 04 90 FD | 	jmp	#LR__0150
02ec8                 | LR__0135
02ec8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02ec8     7B 00 00 FF 
02ecc     D0 E4 05 F1 | 	add	objptr, ##63184
02ed0     F2 12 02 FB | 	rdlong	arg01, objptr
02ed4     7B 00 00 FF 
02ed8     D0 E4 85 F1 | 	sub	objptr, ##63184
02edc     63 01 00 FF 
02ee0     74 15 06 F6 | 	mov	arg02, ##@LR__4680
02ee4     C4 A1 B1 FD | 	call	#__system___string_cmp
02ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
02eec     70 04 90 AD |  if_e	jmp	#LR__0150
02ef0     7B 00 00 FF 
02ef4     D0 E4 05 F1 | 	add	objptr, ##63184
02ef8     F2 24 02 FB | 	rdlong	local04, objptr
02efc     24 00 00 FF 
02f00     C4 E4 85 F1 | 	sub	objptr, ##18628
02f04     F2 24 62 FC | 	wrlong	local04, objptr
02f08     08 E4 05 F1 | 	add	objptr, #8
02f0c     F2 08 68 FC | 	wrlong	#4, objptr
02f10     57 00 00 FF 
02f14     14 E4 85 F1 | 	sub	objptr, ##44564
02f18     6C DB 9F FD | 	jmp	#LR__0020
02f1c                 | LR__0136
02f1c                 | '       							
02f1c                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02f1c     7B 00 00 FF 
02f20     80 E4 05 F1 | 	add	objptr, ##63104
02f24     F2 24 02 FB | 	rdlong	local04, objptr
02f28     7B 00 00 FF 
02f2c     80 E4 85 F1 | 	sub	objptr, ##63104
02f30     01 24 16 F2 | 	cmp	local04, #1 wc
02f34     EC 00 90 CD |  if_b	jmp	#LR__0139
02f38     57 00 00 FF 
02f3c     14 E4 05 F1 | 	add	objptr, ##44564
02f40     F2 26 02 FB | 	rdlong	local05, objptr
02f44     57 00 00 FF 
02f48     14 E4 85 F1 | 	sub	objptr, ##44564
02f4c     01 26 0E F2 | 	cmp	local05, #1 wz
02f50     20 00 90 AD |  if_e	jmp	#LR__0137
02f54     57 00 00 FF 
02f58     14 E4 05 F1 | 	add	objptr, ##44564
02f5c     F2 32 02 FB | 	rdlong	local11, objptr
02f60     57 00 00 FF 
02f64     14 E4 85 F1 | 	sub	objptr, ##44564
02f68     19 29 02 F6 | 	mov	local06, local11
02f6c     02 28 0E F2 | 	cmp	local06, #2 wz
02f70     B0 00 90 5D |  if_ne	jmp	#LR__0139
02f74                 | LR__0137
02f74     55 00 00 FF 
02f78     08 E4 05 F1 | 	add	objptr, ##43528
02f7c     F2 36 02 FB | 	rdlong	local13, objptr
02f80     55 00 00 FF 
02f84     08 E4 85 F1 | 	sub	objptr, ##43528
02f88     1B 31 02 F6 | 	mov	local10, local13
02f8c     1B 30 0E F2 | 	cmp	local10, #27 wz
02f90     90 00 90 AD |  if_e	jmp	#LR__0139
02f94     7B 00 00 FF 
02f98     80 E4 05 F1 | 	add	objptr, ##63104
02f9c     F2 12 02 FB | 	rdlong	arg01, objptr
02fa0     24 00 00 FF 
02fa4     6C E4 85 F1 | 	sub	objptr, ##18540
02fa8     F2 16 02 FB | 	rdlong	arg03, objptr
02fac     57 00 00 FF 
02fb0     14 E4 85 F1 | 	sub	objptr, ##44564
02fb4     00 14 06 F6 | 	mov	arg02, #0
02fb8     84 37 B0 FD | 	call	#_compile
02fbc     FD 1E 0A F6 | 	mov	local01, result1 wz
02fc0                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02fc0                 | '   if err<>0 then printerror(err): goto 104
02fc0     0C 00 90 AD |  if_e	jmp	#LR__0138
02fc4     0F 13 02 F6 | 	mov	arg01, local01
02fc8     5C 60 B1 FD | 	call	#_printerror
02fcc     90 03 90 FD | 	jmp	#LR__0150
02fd0                 | LR__0138
02fd0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02fd0     7B 00 00 FF 
02fd4     D0 E4 05 F1 | 	add	objptr, ##63184
02fd8     F2 12 02 FB | 	rdlong	arg01, objptr
02fdc     7B 00 00 FF 
02fe0     D0 E4 85 F1 | 	sub	objptr, ##63184
02fe4     63 01 00 FF 
02fe8     75 15 06 F6 | 	mov	arg02, ##@LR__4681
02fec     BC A0 B1 FD | 	call	#__system___string_cmp
02ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff4     68 03 90 AD |  if_e	jmp	#LR__0150
02ff8     7B 00 00 FF 
02ffc     D0 E4 05 F1 | 	add	objptr, ##63184
03000     F2 24 02 FB | 	rdlong	local04, objptr
03004     24 00 00 FF 
03008     C4 E4 85 F1 | 	sub	objptr, ##18628
0300c     F2 24 62 FC | 	wrlong	local04, objptr
03010     08 E4 05 F1 | 	add	objptr, #8
03014     F2 08 68 FC | 	wrlong	#4, objptr
03018     57 00 00 FF 
0301c     14 E4 85 F1 | 	sub	objptr, ##44564
03020     64 DA 9F FD | 	jmp	#LR__0020
03024                 | LR__0139
03024                 | ' 							 
03024                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
03024     7B 00 00 FF 
03028     80 E4 05 F1 | 	add	objptr, ##63104
0302c     F2 24 02 FB | 	rdlong	local04, objptr
03030     7B 00 00 FF 
03034     80 E4 85 F1 | 	sub	objptr, ##63104
03038     01 24 16 F2 | 	cmp	local04, #1 wc
0303c     D4 00 90 CD |  if_b	jmp	#LR__0141
03040     57 00 00 FF 
03044     14 E4 05 F1 | 	add	objptr, ##44564
03048     F2 26 0A FB | 	rdlong	local05, objptr wz
0304c     57 00 00 FF 
03050     14 E4 85 F1 | 	sub	objptr, ##44564
03054     20 00 90 AD |  if_e	jmp	#LR__0140
03058     57 00 00 FF 
0305c     14 E4 05 F1 | 	add	objptr, ##44564
03060     F2 32 02 FB | 	rdlong	local11, objptr
03064     57 00 00 FF 
03068     14 E4 85 F1 | 	sub	objptr, ##44564
0306c     19 29 02 F6 | 	mov	local06, local11
03070     03 28 0E F2 | 	cmp	local06, #3 wz
03074     9C 00 90 5D |  if_ne	jmp	#LR__0141
03078                 | LR__0140
03078     55 00 00 FF 
0307c     10 E4 05 F1 | 	add	objptr, ##43536
03080     F2 36 02 FB | 	rdlong	local13, objptr
03084     55 00 00 FF 
03088     10 E4 85 F1 | 	sub	objptr, ##43536
0308c     1B 31 02 F6 | 	mov	local10, local13
03090     1B 30 0E F2 | 	cmp	local10, #27 wz
03094     7C 00 90 5D |  if_ne	jmp	#LR__0141
03098     7B 00 00 FF 
0309c     80 E4 05 F1 | 	add	objptr, ##63104
030a0     F2 12 02 FB | 	rdlong	arg01, objptr
030a4     24 00 00 FF 
030a8     6C E4 85 F1 | 	sub	objptr, ##18540
030ac     F2 16 02 FB | 	rdlong	arg03, objptr
030b0     57 00 00 FF 
030b4     14 E4 85 F1 | 	sub	objptr, ##44564
030b8     00 14 06 F6 | 	mov	arg02, #0
030bc     50 37 B0 FD | 	call	#_compile_assign
030c0                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
030c0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
030c0     7B 00 00 FF 
030c4     D0 E4 05 F1 | 	add	objptr, ##63184
030c8     F2 12 02 FB | 	rdlong	arg01, objptr
030cc     7B 00 00 FF 
030d0     D0 E4 85 F1 | 	sub	objptr, ##63184
030d4     63 01 00 FF 
030d8     76 15 06 F6 | 	mov	arg02, ##@LR__4682
030dc     CC 9F B1 FD | 	call	#__system___string_cmp
030e0     00 FA 0D F2 | 	cmp	result1, #0 wz
030e4     78 02 90 AD |  if_e	jmp	#LR__0150
030e8     7B 00 00 FF 
030ec     D0 E4 05 F1 | 	add	objptr, ##63184
030f0     F2 24 02 FB | 	rdlong	local04, objptr
030f4     24 00 00 FF 
030f8     C4 E4 85 F1 | 	sub	objptr, ##18628
030fc     F2 24 62 FC | 	wrlong	local04, objptr
03100     08 E4 05 F1 | 	add	objptr, #8
03104     F2 08 68 FC | 	wrlong	#4, objptr
03108     57 00 00 FF 
0310c     14 E4 85 F1 | 	sub	objptr, ##44564
03110     74 D9 9F FD | 	jmp	#LR__0020
03114                 | LR__0141
03114                 | '     							 
03114                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03114     7B 00 00 FF 
03118     80 E4 05 F1 | 	add	objptr, ##63104
0311c     F2 24 02 FB | 	rdlong	local04, objptr
03120     7B 00 00 FF 
03124     80 E4 85 F1 | 	sub	objptr, ##63104
03128     01 24 16 F2 | 	cmp	local04, #1 wc
0312c     CC 00 90 CD |  if_b	jmp	#LR__0142
03130     57 00 00 FF 
03134     14 E4 05 F1 | 	add	objptr, ##44564
03138     F2 26 02 FB | 	rdlong	local05, objptr
0313c     57 00 00 FF 
03140     14 E4 85 F1 | 	sub	objptr, ##44564
03144     01 26 0E F2 | 	cmp	local05, #1 wz
03148     57 00 00 5F 
0314c     14 E4 05 51 |  if_ne	add	objptr, ##44564
03150     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03154     57 00 00 5F 
03158     14 E4 85 51 |  if_ne	sub	objptr, ##44564
0315c     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03160     55 00 00 AF 
03164     08 E4 05 A1 |  if_e	add	objptr, ##43528
03168     F2 36 02 AB |  if_e	rdlong	local13, objptr
0316c     55 00 00 AF 
03170     08 E4 85 A1 |  if_e	sub	objptr, ##43528
03174     1B 31 02 A6 |  if_e	mov	local10, local13
03178     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
0317c     7C 00 90 5D |  if_ne	jmp	#LR__0142
03180     7B 00 00 FF 
03184     80 E4 05 F1 | 	add	objptr, ##63104
03188     F2 12 02 FB | 	rdlong	arg01, objptr
0318c     24 00 00 FF 
03190     6C E4 85 F1 | 	sub	objptr, ##18540
03194     F2 16 02 FB | 	rdlong	arg03, objptr
03198     57 00 00 FF 
0319c     14 E4 85 F1 | 	sub	objptr, ##44564
031a0     00 14 06 F6 | 	mov	arg02, #0
031a4     68 36 B0 FD | 	call	#_compile_assign
031a8                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
031a8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
031a8     7B 00 00 FF 
031ac     D0 E4 05 F1 | 	add	objptr, ##63184
031b0     F2 12 02 FB | 	rdlong	arg01, objptr
031b4     7B 00 00 FF 
031b8     D0 E4 85 F1 | 	sub	objptr, ##63184
031bc     63 01 00 FF 
031c0     77 15 06 F6 | 	mov	arg02, ##@LR__4683
031c4     E4 9E B1 FD | 	call	#__system___string_cmp
031c8     00 FA 0D F2 | 	cmp	result1, #0 wz
031cc     90 01 90 AD |  if_e	jmp	#LR__0150
031d0     7B 00 00 FF 
031d4     D0 E4 05 F1 | 	add	objptr, ##63184
031d8     F2 24 02 FB | 	rdlong	local04, objptr
031dc     24 00 00 FF 
031e0     C4 E4 85 F1 | 	sub	objptr, ##18628
031e4     F2 24 62 FC | 	wrlong	local04, objptr
031e8     08 E4 05 F1 | 	add	objptr, #8
031ec     F2 08 68 FC | 	wrlong	#4, objptr
031f0     57 00 00 FF 
031f4     14 E4 85 F1 | 	sub	objptr, ##44564
031f8     8C D8 9F FD | 	jmp	#LR__0020
031fc                 | LR__0142
031fc                 | ' 
031fc                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
031fc     55 00 00 FF 
03200     00 E4 05 F1 | 	add	objptr, ##43520
03204     F2 24 02 FB | 	rdlong	local04, objptr
03208     55 00 00 FF 
0320c     00 E4 85 F1 | 	sub	objptr, ##43520
03210     01 00 00 FF 
03214     04 24 0E F2 | 	cmp	local04, ##516 wz
03218     55 00 00 AF 
0321c     08 E4 05 A1 |  if_e	add	objptr, ##43528
03220     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03224     55 00 00 AF 
03228     08 E4 85 A1 |  if_e	sub	objptr, ##43528
0322c     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03230     14 00 90 5D |  if_ne	jmp	#LR__0143
03234     00 12 06 F6 | 	mov	arg01, #0
03238     00 14 06 F6 | 	mov	arg02, #0
0323c     00 16 06 F6 | 	mov	arg03, #0
03240     CC 35 B0 FD | 	call	#_compile_assign
03244     90 00 90 FD | 	jmp	#LR__0145
03248                 | LR__0143
03248                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
03248     55 00 00 FF 
0324c     00 E4 05 F1 | 	add	objptr, ##43520
03250     F2 24 02 FB | 	rdlong	local04, objptr
03254     55 00 00 FF 
03258     00 E4 85 F1 | 	sub	objptr, ##43520
0325c     01 00 00 FF 
03260     04 24 0E F2 | 	cmp	local04, ##516 wz
03264     55 00 00 AF 
03268     08 E4 05 A1 |  if_e	add	objptr, ##43528
0326c     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03270     55 00 00 AF 
03274     08 E4 85 A1 |  if_e	sub	objptr, ##43528
03278     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
0327c     44 00 90 5D |  if_ne	jmp	#LR__0144
03280     00 12 06 F6 | 	mov	arg01, #0
03284     8C F7 B1 FD | 	call	#__system___getiolock_0474
03288     FD 12 02 F6 | 	mov	arg01, result1
0328c     F4 9D B1 FD | 	call	#__system___lockmem
03290     63 01 00 FF 
03294     78 15 06 F6 | 	mov	arg02, ##@LR__4684
03298     00 12 06 F6 | 	mov	arg01, #0
0329c     00 16 06 F6 | 	mov	arg03, #0
032a0     E4 AA B1 FD | 	call	#__system___basic_print_string
032a4     00 12 06 F6 | 	mov	arg01, #0
032a8     0A 14 06 F6 | 	mov	arg02, #10
032ac     00 16 06 F6 | 	mov	arg03, #0
032b0     7C AA B1 FD | 	call	#__system___basic_print_char
032b4     00 12 06 F6 | 	mov	arg01, #0
032b8     58 F7 B1 FD | 	call	#__system___getiolock_0474
032bc     FD 00 68 FC | 	wrlong	#0, result1
032c0     7C 00 90 FD | 	jmp	#LR__0149
032c4                 | LR__0144
032c4     00 12 06 F6 | 	mov	arg01, #0
032c8     00 14 06 F6 | 	mov	arg02, #0
032cc     00 16 06 F6 | 	mov	arg03, #0
032d0     6C 34 B0 FD | 	call	#_compile
032d4     FD 1E 02 F6 | 	mov	local01, result1
032d8                 | LR__0145
032d8                 | ' 
032d8                 | ' ' if we are here, this is not a program line to add, so try to execute this
032d8                 | ' 
032d8                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
032d8                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
032d8                 | ' if err=0 then execute_line() else printerror(err)
032d8     00 1E 0E F2 | 	cmp	local01, #0 wz
032dc     0C 00 90 5D |  if_ne	jmp	#LR__0146
032e0     00 12 06 F6 | 	mov	arg01, #0
032e4     C0 6D B0 FD | 	call	#_execute_line
032e8     08 00 90 FD | 	jmp	#LR__0147
032ec                 | LR__0146
032ec     0F 13 02 F6 | 	mov	arg01, local01
032f0     34 5D B1 FD | 	call	#_printerror
032f4                 | LR__0147
032f4                 | ' if rest$<>"" then line$=rest$:  goto 108 
032f4     7B 00 00 FF 
032f8     D0 E4 05 F1 | 	add	objptr, ##63184
032fc     F2 12 02 FB | 	rdlong	arg01, objptr
03300     7B 00 00 FF 
03304     D0 E4 85 F1 | 	sub	objptr, ##63184
03308     63 01 00 FF 
0330c     A7 15 06 F6 | 	mov	arg02, ##@LR__4685
03310     98 9D B1 FD | 	call	#__system___string_cmp
03314     00 FA 0D F2 | 	cmp	result1, #0 wz
03318     24 00 90 AD |  if_e	jmp	#LR__0148
0331c     7B 00 00 FF 
03320     D0 E4 05 F1 | 	add	objptr, ##63184
03324     F2 24 02 FB | 	rdlong	local04, objptr
03328     24 00 00 FF 
0332c     C4 E4 85 F1 | 	sub	objptr, ##18628
03330     F2 24 62 FC | 	wrlong	local04, objptr
03334     57 00 00 FF 
03338     0C E4 85 F1 | 	sub	objptr, ##44556
0333c     48 D7 9F FD | 	jmp	#LR__0020
03340                 | LR__0148
03340                 | LR__0149
03340     63 01 00 FF 
03344     A8 13 06 F6 | 	mov	arg01, ##@LR__4686
03348                 | ' 
03348                 | ' write(text)
03348     8C 8A B1 FD | 	call	#_hg010b_spin2_write
0334c                 | ' crlf
0334c     54 8D B1 FD | 	call	#_hg010b_spin2_crlf
03350     63 01 00 FF 
03354     A9 13 06 F6 | 	mov	arg01, ##@LR__4687
03358                 | ' 
03358                 | ' write(text)
03358     7C 8A B1 FD | 	call	#_hg010b_spin2_write
0335c                 | ' crlf
0335c     44 8D B1 FD | 	call	#_hg010b_spin2_crlf
03360                 | LR__0150
03360     A7 F0 03 F6 | 	mov	ptra, fp
03364     B2 00 A0 FD | 	call	#popregs_
03368                 | _interpret_ret
03368     2D 00 64 FD | 	ret
0336c                 | 
0336c                 | ' 
0336c                 | ' 
0336c                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
0336c                 | ' 
0336c                 | ' function isoperator(s as string) as ubyte
0336c                 | _isoperator
0336c     01 4A 05 F6 | 	mov	COUNT_, #1
03370     A8 00 A0 FD | 	call	#pushregs_
03374                 | ' 
03374                 | ' select case s
03374     09 1F 02 F6 | 	mov	local01, arg01
03378     63 01 00 FF 
0337c     AF 15 06 F6 | 	mov	arg02, ##@LR__4688
03380     0F 13 02 F6 | 	mov	arg01, local01
03384     24 9D B1 FD | 	call	#__system___string_cmp
03388     00 FA 0D F2 | 	cmp	result1, #0 wz
0338c     FC 01 90 AD |  if_e	jmp	#LR__0160
03390     63 01 00 FF 
03394     B1 15 06 F6 | 	mov	arg02, ##@LR__4689
03398     0F 13 02 F6 | 	mov	arg01, local01
0339c     0C 9D B1 FD | 	call	#__system___string_cmp
033a0     00 FA 0D F2 | 	cmp	result1, #0 wz
033a4     EC 01 90 AD |  if_e	jmp	#LR__0161
033a8     63 01 00 FF 
033ac     B3 15 06 F6 | 	mov	arg02, ##@LR__4690
033b0     0F 13 02 F6 | 	mov	arg01, local01
033b4     F4 9C B1 FD | 	call	#__system___string_cmp
033b8     00 FA 0D F2 | 	cmp	result1, #0 wz
033bc     DC 01 90 AD |  if_e	jmp	#LR__0162
033c0     63 01 00 FF 
033c4     B6 15 06 F6 | 	mov	arg02, ##@LR__4691
033c8     0F 13 02 F6 | 	mov	arg01, local01
033cc     DC 9C B1 FD | 	call	#__system___string_cmp
033d0     00 FA 0D F2 | 	cmp	result1, #0 wz
033d4     CC 01 90 AD |  if_e	jmp	#LR__0163
033d8     63 01 00 FF 
033dc     BA 15 06 F6 | 	mov	arg02, ##@LR__4692
033e0     0F 13 02 F6 | 	mov	arg01, local01
033e4     C4 9C B1 FD | 	call	#__system___string_cmp
033e8     00 FA 0D F2 | 	cmp	result1, #0 wz
033ec     BC 01 90 AD |  if_e	jmp	#LR__0164
033f0     63 01 00 FF 
033f4     BC 15 06 F6 | 	mov	arg02, ##@LR__4693
033f8     0F 13 02 F6 | 	mov	arg01, local01
033fc     AC 9C B1 FD | 	call	#__system___string_cmp
03400     00 FA 0D F2 | 	cmp	result1, #0 wz
03404     AC 01 90 AD |  if_e	jmp	#LR__0165
03408     63 01 00 FF 
0340c     BE 15 06 F6 | 	mov	arg02, ##@LR__4694
03410     0F 13 02 F6 | 	mov	arg01, local01
03414     94 9C B1 FD | 	call	#__system___string_cmp
03418     00 FA 0D F2 | 	cmp	result1, #0 wz
0341c     9C 01 90 AD |  if_e	jmp	#LR__0166
03420     63 01 00 FF 
03424     C2 15 06 F6 | 	mov	arg02, ##@LR__4695
03428     0F 13 02 F6 | 	mov	arg01, local01
0342c     7C 9C B1 FD | 	call	#__system___string_cmp
03430     00 FA 0D F2 | 	cmp	result1, #0 wz
03434     8C 01 90 AD |  if_e	jmp	#LR__0167
03438     63 01 00 FF 
0343c     C6 15 06 F6 | 	mov	arg02, ##@LR__4696
03440     0F 13 02 F6 | 	mov	arg01, local01
03444     64 9C B1 FD | 	call	#__system___string_cmp
03448     00 FA 0D F2 | 	cmp	result1, #0 wz
0344c     7C 01 90 AD |  if_e	jmp	#LR__0168
03450     63 01 00 FF 
03454     CA 15 06 F6 | 	mov	arg02, ##@LR__4697
03458     0F 13 02 F6 | 	mov	arg01, local01
0345c     4C 9C B1 FD | 	call	#__system___string_cmp
03460     00 FA 0D F2 | 	cmp	result1, #0 wz
03464     6C 01 90 AD |  if_e	jmp	#LR__0169
03468     63 01 00 FF 
0346c     CE 15 06 F6 | 	mov	arg02, ##@LR__4698
03470     0F 13 02 F6 | 	mov	arg01, local01
03474     34 9C B1 FD | 	call	#__system___string_cmp
03478     00 FA 0D F2 | 	cmp	result1, #0 wz
0347c     5C 01 90 AD |  if_e	jmp	#LR__0170
03480     63 01 00 FF 
03484     D2 15 06 F6 | 	mov	arg02, ##@LR__4699
03488     0F 13 02 F6 | 	mov	arg01, local01
0348c     1C 9C B1 FD | 	call	#__system___string_cmp
03490     00 FA 0D F2 | 	cmp	result1, #0 wz
03494     4C 01 90 AD |  if_e	jmp	#LR__0171
03498     63 01 00 FF 
0349c     D4 15 06 F6 | 	mov	arg02, ##@LR__4700
034a0     0F 13 02 F6 | 	mov	arg01, local01
034a4     04 9C B1 FD | 	call	#__system___string_cmp
034a8     00 FA 0D F2 | 	cmp	result1, #0 wz
034ac     3C 01 90 AD |  if_e	jmp	#LR__0172
034b0     63 01 00 FF 
034b4     D8 15 06 F6 | 	mov	arg02, ##@LR__4701
034b8     0F 13 02 F6 | 	mov	arg01, local01
034bc     EC 9B B1 FD | 	call	#__system___string_cmp
034c0     00 FA 0D F2 | 	cmp	result1, #0 wz
034c4     2C 01 90 AD |  if_e	jmp	#LR__0173
034c8     63 01 00 FF 
034cc     DA 15 06 F6 | 	mov	arg02, ##@LR__4702
034d0     0F 13 02 F6 | 	mov	arg01, local01
034d4     D4 9B B1 FD | 	call	#__system___string_cmp
034d8     00 FA 0D F2 | 	cmp	result1, #0 wz
034dc     1C 01 90 AD |  if_e	jmp	#LR__0174
034e0     63 01 00 FF 
034e4     DC 15 06 F6 | 	mov	arg02, ##@LR__4703
034e8     0F 13 02 F6 | 	mov	arg01, local01
034ec     BC 9B B1 FD | 	call	#__system___string_cmp
034f0     00 FA 0D F2 | 	cmp	result1, #0 wz
034f4     0C 01 90 AD |  if_e	jmp	#LR__0175
034f8     63 01 00 FF 
034fc     DF 15 06 F6 | 	mov	arg02, ##@LR__4704
03500     0F 13 02 F6 | 	mov	arg01, local01
03504     A4 9B B1 FD | 	call	#__system___string_cmp
03508     00 FA 0D F2 | 	cmp	result1, #0 wz
0350c     FC 00 90 AD |  if_e	jmp	#LR__0176
03510     63 01 00 FF 
03514     E2 15 06 F6 | 	mov	arg02, ##@LR__4705
03518     0F 13 02 F6 | 	mov	arg01, local01
0351c     8C 9B B1 FD | 	call	#__system___string_cmp
03520     00 FA 0D F2 | 	cmp	result1, #0 wz
03524     EC 00 90 AD |  if_e	jmp	#LR__0177
03528     63 01 00 FF 
0352c     E4 15 06 F6 | 	mov	arg02, ##@LR__4706
03530     0F 13 02 F6 | 	mov	arg01, local01
03534     74 9B B1 FD | 	call	#__system___string_cmp
03538     00 FA 0D F2 | 	cmp	result1, #0 wz
0353c     DC 00 90 AD |  if_e	jmp	#LR__0178
03540     63 01 00 FF 
03544     E6 15 06 F6 | 	mov	arg02, ##@LR__4707
03548     0F 13 02 F6 | 	mov	arg01, local01
0354c     5C 9B B1 FD | 	call	#__system___string_cmp
03550     00 FA 0D F2 | 	cmp	result1, #0 wz
03554     CC 00 90 AD |  if_e	jmp	#LR__0179
03558     63 01 00 FF 
0355c     E9 15 06 F6 | 	mov	arg02, ##@LR__4708
03560     0F 13 02 F6 | 	mov	arg01, local01
03564     44 9B B1 FD | 	call	#__system___string_cmp
03568     00 FA 0D F2 | 	cmp	result1, #0 wz
0356c     BC 00 90 AD |  if_e	jmp	#LR__0180
03570     63 01 00 FF 
03574     EC 15 06 F6 | 	mov	arg02, ##@LR__4709
03578     0F 13 02 F6 | 	mov	arg01, local01
0357c     2C 9B B1 FD | 	call	#__system___string_cmp
03580     00 FA 0D F2 | 	cmp	result1, #0 wz
03584     AC 00 90 AD |  if_e	jmp	#LR__0181
03588     B0 00 90 FD | 	jmp	#LR__0182
0358c                 | LR__0160
0358c     01 FA 05 F6 | 	mov	result1, #1
03590     AC 00 90 FD | 	jmp	#LR__0183
03594                 | LR__0161
03594     02 FA 05 F6 | 	mov	result1, #2
03598     A4 00 90 FD | 	jmp	#LR__0183
0359c                 | LR__0162
0359c     03 FA 05 F6 | 	mov	result1, #3
035a0     9C 00 90 FD | 	jmp	#LR__0183
035a4                 | LR__0163
035a4     04 FA 05 F6 | 	mov	result1, #4
035a8     94 00 90 FD | 	jmp	#LR__0183
035ac                 | LR__0164
035ac     05 FA 05 F6 | 	mov	result1, #5
035b0     8C 00 90 FD | 	jmp	#LR__0183
035b4                 | LR__0165
035b4     06 FA 05 F6 | 	mov	result1, #6
035b8     84 00 90 FD | 	jmp	#LR__0183
035bc                 | LR__0166
035bc     07 FA 05 F6 | 	mov	result1, #7
035c0     7C 00 90 FD | 	jmp	#LR__0183
035c4                 | LR__0167
035c4     08 FA 05 F6 | 	mov	result1, #8
035c8     74 00 90 FD | 	jmp	#LR__0183
035cc                 | LR__0168
035cc     09 FA 05 F6 | 	mov	result1, #9
035d0     6C 00 90 FD | 	jmp	#LR__0183
035d4                 | LR__0169
035d4     0A FA 05 F6 | 	mov	result1, #10
035d8     64 00 90 FD | 	jmp	#LR__0183
035dc                 | LR__0170
035dc     0B FA 05 F6 | 	mov	result1, #11
035e0     5C 00 90 FD | 	jmp	#LR__0183
035e4                 | LR__0171
035e4     0C FA 05 F6 | 	mov	result1, #12
035e8     54 00 90 FD | 	jmp	#LR__0183
035ec                 | LR__0172
035ec     0D FA 05 F6 | 	mov	result1, #13
035f0     4C 00 90 FD | 	jmp	#LR__0183
035f4                 | LR__0173
035f4     0E FA 05 F6 | 	mov	result1, #14
035f8     44 00 90 FD | 	jmp	#LR__0183
035fc                 | LR__0174
035fc     1B FA 05 F6 | 	mov	result1, #27
03600     3C 00 90 FD | 	jmp	#LR__0183
03604                 | LR__0175
03604     27 FA 05 F6 | 	mov	result1, #39
03608     34 00 90 FD | 	jmp	#LR__0183
0360c                 | LR__0176
0360c     26 FA 05 F6 | 	mov	result1, #38
03610     2C 00 90 FD | 	jmp	#LR__0183
03614                 | LR__0177
03614     10 FA 05 F6 | 	mov	result1, #16
03618     24 00 90 FD | 	jmp	#LR__0183
0361c                 | LR__0178
0361c     0F FA 05 F6 | 	mov	result1, #15
03620     1C 00 90 FD | 	jmp	#LR__0183
03624                 | LR__0179
03624     2A FA 05 F6 | 	mov	result1, #42
03628     14 00 90 FD | 	jmp	#LR__0183
0362c                 | LR__0180
0362c     28 FA 05 F6 | 	mov	result1, #40
03630     0C 00 90 FD | 	jmp	#LR__0183
03634                 | LR__0181
03634     29 FA 05 F6 | 	mov	result1, #41
03638     04 00 90 FD | 	jmp	#LR__0183
0363c                 | LR__0182
0363c     00 FA 05 F6 | 	mov	result1, #0
03640                 | LR__0183
03640     A7 F0 03 F6 | 	mov	ptra, fp
03644     B2 00 A0 FD | 	call	#popregs_
03648                 | _isoperator_ret
03648     2D 00 64 FD | 	ret
0364c                 | 
0364c                 | ' 
0364c                 | ' 
0364c                 | ' function isnotename(s as string) as ulong
0364c                 | _isnotename
0364c     07 4A 05 F6 | 	mov	COUNT_, #7
03650     A8 00 A0 FD | 	call	#pushregs_
03654                 | ' if left$(s,1)<>"#" then return 0
03654     09 1F 02 F6 | 	mov	local01, arg01
03658     01 14 06 F6 | 	mov	arg02, #1
0365c     68 BA B1 FD | 	call	#__system__Left_S
03660     FD 12 02 F6 | 	mov	arg01, result1
03664     63 01 00 FF 
03668     EF 15 06 F6 | 	mov	arg02, ##@LR__4710
0366c     3C 9A B1 FD | 	call	#__system___string_cmp
03670     00 FA 0D F2 | 	cmp	result1, #0 wz
03674     00 FA 05 56 |  if_ne	mov	result1, #0
03678     30 03 90 5D |  if_ne	jmp	#LR__0213
0367c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0367c     0F 13 02 F6 | 	mov	arg01, local01
03680     03 14 06 F6 | 	mov	arg02, #3
03684     01 16 06 F6 | 	mov	arg03, #1
03688     54 BB B1 FD | 	call	#__system__Mid_S
0368c     FD 12 02 F6 | 	mov	arg01, result1
03690     63 01 00 FF 
03694     F1 15 06 F6 | 	mov	arg02, ##@LR__4711
03698     10 9A B1 FD | 	call	#__system___string_cmp
0369c     00 FA 0D F2 | 	cmp	result1, #0 wz
036a0     18 00 90 5D |  if_ne	jmp	#LR__0190
036a4     0F 13 02 F6 | 	mov	arg01, local01
036a8     02 14 06 F6 | 	mov	arg02, #2
036ac     02 16 06 F6 | 	mov	arg03, #2
036b0     2C BB B1 FD | 	call	#__system__Mid_S
036b4     FD 20 02 F6 | 	mov	local02, result1
036b8     14 00 90 FD | 	jmp	#LR__0191
036bc                 | LR__0190
036bc     0F 13 02 F6 | 	mov	arg01, local01
036c0     02 14 06 F6 | 	mov	arg02, #2
036c4     01 16 06 F6 | 	mov	arg03, #1
036c8     14 BB B1 FD | 	call	#__system__Mid_S
036cc     FD 20 02 F6 | 	mov	local02, result1
036d0                 | LR__0191
036d0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
036d0     0F 13 02 F6 | 	mov	arg01, local01
036d4     09 23 02 F6 | 	mov	local03, arg01
036d8     97 06 48 FB | 	callpa	#(@LR__0193-@LR__0192)>>2,fcache_load_ptr_
036dc                 | LR__0192
036dc     11 FB C9 FA | 	rdbyte	result1, local03 wz
036e0     01 22 06 51 |  if_ne	add	local03, #1
036e4     F4 FF 9F 5D |  if_ne	jmp	#LR__0192
036e8                 | LR__0193
036e8     09 23 82 F1 | 	sub	local03, arg01
036ec     11 15 02 F6 | 	mov	arg02, local03
036f0     01 14 86 F1 | 	sub	arg02, #1
036f4     0F 13 02 F6 | 	mov	arg01, local01
036f8     01 16 06 F6 | 	mov	arg03, #1
036fc     E0 BA B1 FD | 	call	#__system__Mid_S
03700     FD 12 02 F6 | 	mov	arg01, result1
03704     63 01 00 FF 
03708     F3 15 06 F6 | 	mov	arg02, ##@LR__4712
0370c     9C 99 B1 FD | 	call	#__system___string_cmp
03710     00 FA 0D F2 | 	cmp	result1, #0 wz
03714     28 00 90 AD |  if_e	jmp	#LR__0194
03718     0F 13 02 F6 | 	mov	arg01, local01
0371c     01 14 06 F6 | 	mov	arg02, #1
03720     2C BA B1 FD | 	call	#__system__Right_S
03724     FD 12 02 F6 | 	mov	arg01, result1
03728     BC CC B1 FD | 	call	#__system____builtin_atof
0372c     FD 12 02 F6 | 	mov	arg01, result1
03730     00 14 06 F6 | 	mov	arg02, #0
03734     90 C9 B1 FD | 	call	#__system___float_tointeger
03738     FD 24 02 F6 | 	mov	local04, result1
0373c     34 00 90 FD | 	jmp	#LR__0195
03740                 | LR__0194
03740     0F 13 02 F6 | 	mov	arg01, local01
03744     01 14 06 F6 | 	mov	arg02, #1
03748     04 BA B1 FD | 	call	#__system__Right_S
0374c     FD 12 02 F6 | 	mov	arg01, result1
03750     94 CC B1 FD | 	call	#__system____builtin_atof
03754     FD 14 02 F6 | 	mov	arg02, result1
03758     00 C0 5F FF 
0375c     00 12 06 F6 | 	mov	arg01, ##-1082130432
03760     9C C4 B1 FD | 	call	#__system___float_mul
03764     FD 12 02 F6 | 	mov	arg01, result1
03768     00 14 06 F6 | 	mov	arg02, #0
0376c     58 C9 B1 FD | 	call	#__system___float_tointeger
03770     FD 24 02 F6 | 	mov	local04, result1
03774                 | LR__0195
03774                 | ' 
03774                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
03774     00 24 0E F2 | 	cmp	local04, #0 wz
03778     24 00 90 5D |  if_ne	jmp	#LR__0196
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     01 14 06 F6 | 	mov	arg02, #1
03784     C8 B9 B1 FD | 	call	#__system__Right_S
03788     FD 12 02 F6 | 	mov	arg01, result1
0378c     63 01 00 FF 
03790     F5 15 06 F6 | 	mov	arg02, ##@LR__4713
03794     14 99 B1 FD | 	call	#__system___string_cmp
03798     00 FA 0D F2 | 	cmp	result1, #0 wz
0379c     04 24 06 56 |  if_ne	mov	local04, #4
037a0                 | LR__0196
037a0                 | ' 
037a0                 | ' select case s1
037a0     10 27 02 F6 | 	mov	local05, local02
037a4     63 01 00 FF 
037a8     F7 15 06 F6 | 	mov	arg02, ##@LR__4714
037ac     13 13 02 F6 | 	mov	arg01, local05
037b0     F8 98 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     24 01 90 AD |  if_e	jmp	#LR__0197
037bc     63 01 00 FF 
037c0     F9 15 06 F6 | 	mov	arg02, ##@LR__4715
037c4     13 13 02 F6 | 	mov	arg01, local05
037c8     E0 98 B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     18 01 90 AD |  if_e	jmp	#LR__0198
037d4     63 01 00 FF 
037d8     FC 15 06 F6 | 	mov	arg02, ##@LR__4716
037dc     13 13 02 F6 | 	mov	arg01, local05
037e0     C8 98 B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     0C 01 90 AD |  if_e	jmp	#LR__0199
037ec     63 01 00 FF 
037f0     FE 15 06 F6 | 	mov	arg02, ##@LR__4717
037f4     13 13 02 F6 | 	mov	arg01, local05
037f8     B0 98 B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     00 01 90 AD |  if_e	jmp	#LR__0200
03804     64 01 00 FF 
03808     01 14 06 F6 | 	mov	arg02, ##@LR__4718
0380c     13 13 02 F6 | 	mov	arg01, local05
03810     98 98 B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     F4 00 90 AD |  if_e	jmp	#LR__0201
0381c     64 01 00 FF 
03820     03 14 06 F6 | 	mov	arg02, ##@LR__4719
03824     13 13 02 F6 | 	mov	arg01, local05
03828     80 98 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     E8 00 90 AD |  if_e	jmp	#LR__0202
03834     64 01 00 FF 
03838     05 14 06 F6 | 	mov	arg02, ##@LR__4720
0383c     13 13 02 F6 | 	mov	arg01, local05
03840     68 98 B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     DC 00 90 AD |  if_e	jmp	#LR__0203
0384c     64 01 00 FF 
03850     08 14 06 F6 | 	mov	arg02, ##@LR__4721
03854     13 13 02 F6 | 	mov	arg01, local05
03858     50 98 B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     D0 00 90 AD |  if_e	jmp	#LR__0204
03864     64 01 00 FF 
03868     0A 14 06 F6 | 	mov	arg02, ##@LR__4722
0386c     13 13 02 F6 | 	mov	arg01, local05
03870     38 98 B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     C4 00 90 AD |  if_e	jmp	#LR__0205
0387c     64 01 00 FF 
03880     0D 14 06 F6 | 	mov	arg02, ##@LR__4723
03884     13 13 02 F6 | 	mov	arg01, local05
03888     20 98 B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     B8 00 90 AD |  if_e	jmp	#LR__0206
03894     64 01 00 FF 
03898     0F 14 06 F6 | 	mov	arg02, ##@LR__4724
0389c     13 13 02 F6 | 	mov	arg01, local05
038a0     08 98 B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     AC 00 90 AD |  if_e	jmp	#LR__0207
038ac     64 01 00 FF 
038b0     12 14 06 F6 | 	mov	arg02, ##@LR__4725
038b4     13 13 02 F6 | 	mov	arg01, local05
038b8     F0 97 B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     A0 00 90 AD |  if_e	jmp	#LR__0208
038c4     64 01 00 FF 
038c8     14 14 06 F6 | 	mov	arg02, ##@LR__4726
038cc     13 13 02 F6 | 	mov	arg01, local05
038d0     D8 97 B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     94 00 90 AD |  if_e	jmp	#LR__0209
038dc     9C 00 90 FD | 	jmp	#LR__0210
038e0                 | LR__0197
038e0     01 00 00 FF 
038e4     00 29 06 F6 | 	mov	local06, ##768
038e8     98 00 90 FD | 	jmp	#LR__0211
038ec                 | LR__0198
038ec     01 00 00 FF 
038f0     01 29 06 F6 | 	mov	local06, ##769
038f4     8C 00 90 FD | 	jmp	#LR__0211
038f8                 | LR__0199
038f8     01 00 00 FF 
038fc     02 29 06 F6 | 	mov	local06, ##770
03900     80 00 90 FD | 	jmp	#LR__0211
03904                 | LR__0200
03904     01 00 00 FF 
03908     03 29 06 F6 | 	mov	local06, ##771
0390c     74 00 90 FD | 	jmp	#LR__0211
03910                 | LR__0201
03910     01 00 00 FF 
03914     04 29 06 F6 | 	mov	local06, ##772
03918     68 00 90 FD | 	jmp	#LR__0211
0391c                 | LR__0202
0391c     01 00 00 FF 
03920     05 29 06 F6 | 	mov	local06, ##773
03924     5C 00 90 FD | 	jmp	#LR__0211
03928                 | LR__0203
03928     01 00 00 FF 
0392c     06 29 06 F6 | 	mov	local06, ##774
03930     50 00 90 FD | 	jmp	#LR__0211
03934                 | LR__0204
03934     01 00 00 FF 
03938     07 29 06 F6 | 	mov	local06, ##775
0393c     44 00 90 FD | 	jmp	#LR__0211
03940                 | LR__0205
03940     01 00 00 FF 
03944     08 29 06 F6 | 	mov	local06, ##776
03948     38 00 90 FD | 	jmp	#LR__0211
0394c                 | LR__0206
0394c     01 00 00 FF 
03950     09 29 06 F6 | 	mov	local06, ##777
03954     2C 00 90 FD | 	jmp	#LR__0211
03958                 | LR__0207
03958     01 00 00 FF 
0395c     0A 29 06 F6 | 	mov	local06, ##778
03960     20 00 90 FD | 	jmp	#LR__0211
03964                 | LR__0208
03964     01 00 00 FF 
03968     0B 29 06 F6 | 	mov	local06, ##779
0396c     14 00 90 FD | 	jmp	#LR__0211
03970                 | LR__0209
03970     01 00 00 FF 
03974     0B 29 06 F6 | 	mov	local06, ##779
03978     08 00 90 FD | 	jmp	#LR__0211
0397c                 | LR__0210
0397c     00 FA 05 F6 | 	mov	result1, #0
03980     28 00 90 FD | 	jmp	#LR__0213
03984                 | LR__0211
03984                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
03984     FF FF 7F FF 
03988     FF 25 56 F2 | 	cmps	local04, ##-1 wc
0398c     18 00 90 CD |  if_b	jmp	#LR__0212
03990     0A 24 56 F2 | 	cmps	local04, #10 wc
03994     12 2B 02 C6 |  if_b	mov	local07, local04
03998     01 2A 66 C0 |  if_b	shl	local07, #1
0399c     12 2B 02 C1 |  if_b	add	local07, local04
039a0     02 2A 66 C0 |  if_b	shl	local07, #2
039a4     15 29 02 C1 |  if_b	add	local06, local07
039a8                 | LR__0212
039a8                 | ' return token
039a8     14 FB 01 F6 | 	mov	result1, local06
039ac                 | LR__0213
039ac     A7 F0 03 F6 | 	mov	ptra, fp
039b0     B2 00 A0 FD | 	call	#popregs_
039b4                 | _isnotename_ret
039b4     2D 00 64 FD | 	ret
039b8                 | 
039b8                 | ' 
039b8                 | ' 
039b8                 | ' function isseparator(s as string) as ubyte
039b8                 | _isseparator
039b8     01 4A 05 F6 | 	mov	COUNT_, #1
039bc     A8 00 A0 FD | 	call	#pushregs_
039c0                 | ' 
039c0                 | ' select case s
039c0     09 1F 02 F6 | 	mov	local01, arg01
039c4     64 01 00 FF 
039c8     16 14 06 F6 | 	mov	arg02, ##@LR__4727
039cc     0F 13 02 F6 | 	mov	arg01, local01
039d0     D8 96 B1 FD | 	call	#__system___string_cmp
039d4     00 FA 0D F2 | 	cmp	result1, #0 wz
039d8     54 01 90 AD |  if_e	jmp	#LR__0220
039dc     64 01 00 FF 
039e0     18 14 06 F6 | 	mov	arg02, ##@LR__4728
039e4     0F 13 02 F6 | 	mov	arg01, local01
039e8     C0 96 B1 FD | 	call	#__system___string_cmp
039ec     00 FA 0D F2 | 	cmp	result1, #0 wz
039f0     44 01 90 AD |  if_e	jmp	#LR__0221
039f4     64 01 00 FF 
039f8     1A 14 06 F6 | 	mov	arg02, ##@LR__4729
039fc     0F 13 02 F6 | 	mov	arg01, local01
03a00     A8 96 B1 FD | 	call	#__system___string_cmp
03a04     00 FA 0D F2 | 	cmp	result1, #0 wz
03a08     34 01 90 AD |  if_e	jmp	#LR__0222
03a0c     64 01 00 FF 
03a10     1C 14 06 F6 | 	mov	arg02, ##@LR__4730
03a14     0F 13 02 F6 | 	mov	arg01, local01
03a18     90 96 B1 FD | 	call	#__system___string_cmp
03a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a20     24 01 90 AD |  if_e	jmp	#LR__0223
03a24     64 01 00 FF 
03a28     1E 14 06 F6 | 	mov	arg02, ##@LR__4731
03a2c     0F 13 02 F6 | 	mov	arg01, local01
03a30     78 96 B1 FD | 	call	#__system___string_cmp
03a34     00 FA 0D F2 | 	cmp	result1, #0 wz
03a38     14 01 90 AD |  if_e	jmp	#LR__0224
03a3c     64 01 00 FF 
03a40     20 14 06 F6 | 	mov	arg02, ##@LR__4732
03a44     0F 13 02 F6 | 	mov	arg01, local01
03a48     60 96 B1 FD | 	call	#__system___string_cmp
03a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a50     04 01 90 AD |  if_e	jmp	#LR__0225
03a54     64 01 00 FF 
03a58     22 14 06 F6 | 	mov	arg02, ##@LR__4733
03a5c     0F 13 02 F6 | 	mov	arg01, local01
03a60     48 96 B1 FD | 	call	#__system___string_cmp
03a64     00 FA 0D F2 | 	cmp	result1, #0 wz
03a68     F4 00 90 AD |  if_e	jmp	#LR__0226
03a6c     64 01 00 FF 
03a70     24 14 06 F6 | 	mov	arg02, ##@LR__4734
03a74     0F 13 02 F6 | 	mov	arg01, local01
03a78     30 96 B1 FD | 	call	#__system___string_cmp
03a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a80     E4 00 90 AD |  if_e	jmp	#LR__0227
03a84     64 01 00 FF 
03a88     26 14 06 F6 | 	mov	arg02, ##@LR__4735
03a8c     0F 13 02 F6 | 	mov	arg01, local01
03a90     18 96 B1 FD | 	call	#__system___string_cmp
03a94     00 FA 0D F2 | 	cmp	result1, #0 wz
03a98     D4 00 90 AD |  if_e	jmp	#LR__0228
03a9c     64 01 00 FF 
03aa0     28 14 06 F6 | 	mov	arg02, ##@LR__4736
03aa4     0F 13 02 F6 | 	mov	arg01, local01
03aa8     00 96 B1 FD | 	call	#__system___string_cmp
03aac     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab0     C4 00 90 AD |  if_e	jmp	#LR__0229
03ab4     64 01 00 FF 
03ab8     2A 14 06 F6 | 	mov	arg02, ##@LR__4737
03abc     0F 13 02 F6 | 	mov	arg01, local01
03ac0     E8 95 B1 FD | 	call	#__system___string_cmp
03ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ac8     B4 00 90 AD |  if_e	jmp	#LR__0230
03acc     64 01 00 FF 
03ad0     2C 14 06 F6 | 	mov	arg02, ##@LR__4738
03ad4     0F 13 02 F6 | 	mov	arg01, local01
03ad8     D0 95 B1 FD | 	call	#__system___string_cmp
03adc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae0     A4 00 90 AD |  if_e	jmp	#LR__0231
03ae4     64 01 00 FF 
03ae8     2E 14 06 F6 | 	mov	arg02, ##@LR__4739
03aec     0F 13 02 F6 | 	mov	arg01, local01
03af0     B8 95 B1 FD | 	call	#__system___string_cmp
03af4     00 FA 0D F2 | 	cmp	result1, #0 wz
03af8     94 00 90 AD |  if_e	jmp	#LR__0232
03afc     64 01 00 FF 
03b00     30 14 06 F6 | 	mov	arg02, ##@LR__4740
03b04     0F 13 02 F6 | 	mov	arg01, local01
03b08     A0 95 B1 FD | 	call	#__system___string_cmp
03b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b10     84 00 90 AD |  if_e	jmp	#LR__0233
03b14     64 01 00 FF 
03b18     32 14 06 F6 | 	mov	arg02, ##@LR__4741
03b1c     0F 13 02 F6 | 	mov	arg01, local01
03b20     88 95 B1 FD | 	call	#__system___string_cmp
03b24     00 FA 0D F2 | 	cmp	result1, #0 wz
03b28     74 00 90 AD |  if_e	jmp	#LR__0234
03b2c     78 00 90 FD | 	jmp	#LR__0235
03b30                 | LR__0220
03b30     01 FA 05 F6 | 	mov	result1, #1
03b34     74 00 90 FD | 	jmp	#LR__0236
03b38                 | LR__0221
03b38     02 FA 05 F6 | 	mov	result1, #2
03b3c     6C 00 90 FD | 	jmp	#LR__0236
03b40                 | LR__0222
03b40     1B FA 05 F6 | 	mov	result1, #27
03b44     64 00 90 FD | 	jmp	#LR__0236
03b48                 | LR__0223
03b48     11 FA 05 F6 | 	mov	result1, #17
03b4c     5C 00 90 FD | 	jmp	#LR__0236
03b50                 | LR__0224
03b50     05 FA 05 F6 | 	mov	result1, #5
03b54     54 00 90 FD | 	jmp	#LR__0236
03b58                 | LR__0225
03b58     06 FA 05 F6 | 	mov	result1, #6
03b5c     4C 00 90 FD | 	jmp	#LR__0236
03b60                 | LR__0226
03b60     12 FA 05 F6 | 	mov	result1, #18
03b64     44 00 90 FD | 	jmp	#LR__0236
03b68                 | LR__0227
03b68     13 FA 05 F6 | 	mov	result1, #19
03b6c     3C 00 90 FD | 	jmp	#LR__0236
03b70                 | LR__0228
03b70     0C FA 05 F6 | 	mov	result1, #12
03b74     34 00 90 FD | 	jmp	#LR__0236
03b78                 | LR__0229
03b78     14 FA 05 F6 | 	mov	result1, #20
03b7c     2C 00 90 FD | 	jmp	#LR__0236
03b80                 | LR__0230
03b80     15 FA 05 F6 | 	mov	result1, #21
03b84     24 00 90 FD | 	jmp	#LR__0236
03b88                 | LR__0231
03b88     16 FA 05 F6 | 	mov	result1, #22
03b8c     1C 00 90 FD | 	jmp	#LR__0236
03b90                 | LR__0232
03b90     FF FB 05 F6 | 	mov	result1, #511
03b94     14 00 90 FD | 	jmp	#LR__0236
03b98                 | LR__0233
03b98     0F FA 05 F6 | 	mov	result1, #15
03b9c     0C 00 90 FD | 	jmp	#LR__0236
03ba0                 | LR__0234
03ba0     10 FA 05 F6 | 	mov	result1, #16
03ba4     04 00 90 FD | 	jmp	#LR__0236
03ba8                 | LR__0235
03ba8     00 FA 05 F6 | 	mov	result1, #0
03bac                 | LR__0236
03bac     A7 F0 03 F6 | 	mov	ptra, fp
03bb0     B2 00 A0 FD | 	call	#popregs_
03bb4                 | _isseparator_ret
03bb4     2D 00 64 FD | 	ret
03bb8                 | 
03bb8                 | ' 
03bb8                 | ' 
03bb8                 | ' function iscommand(s as string) as ubyte
03bb8                 | _iscommand
03bb8     01 4A 05 F6 | 	mov	COUNT_, #1
03bbc     A8 00 A0 FD | 	call	#pushregs_
03bc0                 | ' 
03bc0                 | ' select case s
03bc0     09 1F 02 F6 | 	mov	local01, arg01
03bc4     64 01 00 FF 
03bc8     36 14 06 F6 | 	mov	arg02, ##@LR__4743
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     D8 94 B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     74 08 90 AD |  if_e	jmp	#LR__0240
03bdc     64 01 00 FF 
03be0     3B 14 06 F6 | 	mov	arg02, ##@LR__4744
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     C0 94 B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     64 08 90 AD |  if_e	jmp	#LR__0241
03bf4     64 01 00 FF 
03bf8     3E 14 06 F6 | 	mov	arg02, ##@LR__4745
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     A8 94 B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     54 08 90 AD |  if_e	jmp	#LR__0242
03c0c     64 01 00 FF 
03c10     42 14 06 F6 | 	mov	arg02, ##@LR__4746
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     90 94 B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     44 08 90 AD |  if_e	jmp	#LR__0243
03c24     64 01 00 FF 
03c28     47 14 06 F6 | 	mov	arg02, ##@LR__4747
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     78 94 B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     34 08 90 AD |  if_e	jmp	#LR__0244
03c3c     64 01 00 FF 
03c40     4B 14 06 F6 | 	mov	arg02, ##@LR__4748
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     60 94 B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     24 08 90 AD |  if_e	jmp	#LR__0245
03c54     64 01 00 FF 
03c58     52 14 06 F6 | 	mov	arg02, ##@LR__4749
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     48 94 B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     14 08 90 AD |  if_e	jmp	#LR__0246
03c6c     64 01 00 FF 
03c70     56 14 06 F6 | 	mov	arg02, ##@LR__4750
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     30 94 B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     04 08 90 AD |  if_e	jmp	#LR__0247
03c84     64 01 00 FF 
03c88     5C 14 06 F6 | 	mov	arg02, ##@LR__4751
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     18 94 B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     F4 07 90 AD |  if_e	jmp	#LR__0248
03c9c     64 01 00 FF 
03ca0     60 14 06 F6 | 	mov	arg02, ##@LR__4752
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     00 94 B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     E4 07 90 AD |  if_e	jmp	#LR__0249
03cb4     64 01 00 FF 
03cb8     66 14 06 F6 | 	mov	arg02, ##@LR__4753
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     E8 93 B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     D4 07 90 AD |  if_e	jmp	#LR__0250
03ccc     64 01 00 FF 
03cd0     69 14 06 F6 | 	mov	arg02, ##@LR__4754
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     D0 93 B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     C4 07 90 AD |  if_e	jmp	#LR__0251
03ce4     64 01 00 FF 
03ce8     6F 14 06 F6 | 	mov	arg02, ##@LR__4755
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     B8 93 B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     B4 07 90 AD |  if_e	jmp	#LR__0252
03cfc     64 01 00 FF 
03d00     73 14 06 F6 | 	mov	arg02, ##@LR__4756
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     A0 93 B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     A4 07 90 AD |  if_e	jmp	#LR__0253
03d14     64 01 00 FF 
03d18     7A 14 06 F6 | 	mov	arg02, ##@LR__4757
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     88 93 B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     94 07 90 AD |  if_e	jmp	#LR__0254
03d2c     64 01 00 FF 
03d30     81 14 06 F6 | 	mov	arg02, ##@LR__4758
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     70 93 B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     84 07 90 AD |  if_e	jmp	#LR__0255
03d44     64 01 00 FF 
03d48     88 14 06 F6 | 	mov	arg02, ##@LR__4759
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     58 93 B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     74 07 90 AD |  if_e	jmp	#LR__0256
03d5c     64 01 00 FF 
03d60     92 14 06 F6 | 	mov	arg02, ##@LR__4760
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     40 93 B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     64 07 90 AD |  if_e	jmp	#LR__0257
03d74     64 01 00 FF 
03d78     96 14 06 F6 | 	mov	arg02, ##@LR__4761
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     28 93 B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     54 07 90 AD |  if_e	jmp	#LR__0258
03d8c     64 01 00 FF 
03d90     9A 14 06 F6 | 	mov	arg02, ##@LR__4762
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     10 93 B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     44 07 90 AD |  if_e	jmp	#LR__0259
03da4     64 01 00 FF 
03da8     9E 14 06 F6 | 	mov	arg02, ##@LR__4763
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     F8 92 B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     34 07 90 AD |  if_e	jmp	#LR__0260
03dbc     64 01 00 FF 
03dc0     A2 14 06 F6 | 	mov	arg02, ##@LR__4764
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     E0 92 B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     24 07 90 AD |  if_e	jmp	#LR__0261
03dd4     64 01 00 FF 
03dd8     A8 14 06 F6 | 	mov	arg02, ##@LR__4765
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     C8 92 B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     14 07 90 AD |  if_e	jmp	#LR__0262
03dec     64 01 00 FF 
03df0     AD 14 06 F6 | 	mov	arg02, ##@LR__4766
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     B0 92 B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     04 07 90 AD |  if_e	jmp	#LR__0263
03e04     64 01 00 FF 
03e08     B1 14 06 F6 | 	mov	arg02, ##@LR__4767
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     98 92 B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     F4 06 90 AD |  if_e	jmp	#LR__0264
03e1c     64 01 00 FF 
03e20     B6 14 06 F6 | 	mov	arg02, ##@LR__4768
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     80 92 B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     E4 06 90 AD |  if_e	jmp	#LR__0265
03e34     64 01 00 FF 
03e38     BE 14 06 F6 | 	mov	arg02, ##@LR__4769
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     68 92 B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     D4 06 90 AD |  if_e	jmp	#LR__0266
03e4c     64 01 00 FF 
03e50     C2 14 06 F6 | 	mov	arg02, ##@LR__4770
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     50 92 B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     C4 06 90 AD |  if_e	jmp	#LR__0267
03e64     64 01 00 FF 
03e68     C7 14 06 F6 | 	mov	arg02, ##@LR__4771
03e6c     0F 13 02 F6 | 	mov	arg01, local01
03e70     38 92 B1 FD | 	call	#__system___string_cmp
03e74     00 FA 0D F2 | 	cmp	result1, #0 wz
03e78     B4 06 90 AD |  if_e	jmp	#LR__0268
03e7c     64 01 00 FF 
03e80     CB 14 06 F6 | 	mov	arg02, ##@LR__4772
03e84     0F 13 02 F6 | 	mov	arg01, local01
03e88     20 92 B1 FD | 	call	#__system___string_cmp
03e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e90     A4 06 90 AD |  if_e	jmp	#LR__0269
03e94     64 01 00 FF 
03e98     D0 14 06 F6 | 	mov	arg02, ##@LR__4773
03e9c     0F 13 02 F6 | 	mov	arg01, local01
03ea0     08 92 B1 FD | 	call	#__system___string_cmp
03ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea8     94 06 90 AD |  if_e	jmp	#LR__0270
03eac     64 01 00 FF 
03eb0     D4 14 06 F6 | 	mov	arg02, ##@LR__4774
03eb4     0F 13 02 F6 | 	mov	arg01, local01
03eb8     F0 91 B1 FD | 	call	#__system___string_cmp
03ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec0     84 06 90 AD |  if_e	jmp	#LR__0271
03ec4     64 01 00 FF 
03ec8     D7 14 06 F6 | 	mov	arg02, ##@LR__4775
03ecc     0F 13 02 F6 | 	mov	arg01, local01
03ed0     D8 91 B1 FD | 	call	#__system___string_cmp
03ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ed8     74 06 90 AD |  if_e	jmp	#LR__0272
03edc     64 01 00 FF 
03ee0     DD 14 06 F6 | 	mov	arg02, ##@LR__4776
03ee4     0F 13 02 F6 | 	mov	arg01, local01
03ee8     C0 91 B1 FD | 	call	#__system___string_cmp
03eec     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef0     64 06 90 AD |  if_e	jmp	#LR__0273
03ef4     64 01 00 FF 
03ef8     E1 14 06 F6 | 	mov	arg02, ##@LR__4777
03efc     0F 13 02 F6 | 	mov	arg01, local01
03f00     A8 91 B1 FD | 	call	#__system___string_cmp
03f04     00 FA 0D F2 | 	cmp	result1, #0 wz
03f08     54 06 90 AD |  if_e	jmp	#LR__0274
03f0c     64 01 00 FF 
03f10     E6 14 06 F6 | 	mov	arg02, ##@LR__4778
03f14     0F 13 02 F6 | 	mov	arg01, local01
03f18     90 91 B1 FD | 	call	#__system___string_cmp
03f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f20     44 06 90 AD |  if_e	jmp	#LR__0275
03f24     64 01 00 FF 
03f28     E9 14 06 F6 | 	mov	arg02, ##@LR__4779
03f2c     0F 13 02 F6 | 	mov	arg01, local01
03f30     78 91 B1 FD | 	call	#__system___string_cmp
03f34     00 FA 0D F2 | 	cmp	result1, #0 wz
03f38     34 06 90 AD |  if_e	jmp	#LR__0276
03f3c     64 01 00 FF 
03f40     EC 14 06 F6 | 	mov	arg02, ##@LR__4780
03f44     0F 13 02 F6 | 	mov	arg01, local01
03f48     60 91 B1 FD | 	call	#__system___string_cmp
03f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f50     24 06 90 AD |  if_e	jmp	#LR__0277
03f54     64 01 00 FF 
03f58     F0 14 06 F6 | 	mov	arg02, ##@LR__4781
03f5c     0F 13 02 F6 | 	mov	arg01, local01
03f60     48 91 B1 FD | 	call	#__system___string_cmp
03f64     00 FA 0D F2 | 	cmp	result1, #0 wz
03f68     14 06 90 AD |  if_e	jmp	#LR__0278
03f6c     64 01 00 FF 
03f70     F3 14 06 F6 | 	mov	arg02, ##@LR__4782
03f74     0F 13 02 F6 | 	mov	arg01, local01
03f78     30 91 B1 FD | 	call	#__system___string_cmp
03f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f80     04 06 90 AD |  if_e	jmp	#LR__0279
03f84     64 01 00 FF 
03f88     F7 14 06 F6 | 	mov	arg02, ##@LR__4783
03f8c     0F 13 02 F6 | 	mov	arg01, local01
03f90     18 91 B1 FD | 	call	#__system___string_cmp
03f94     00 FA 0D F2 | 	cmp	result1, #0 wz
03f98     F4 05 90 AD |  if_e	jmp	#LR__0280
03f9c     64 01 00 FF 
03fa0     FC 14 06 F6 | 	mov	arg02, ##@LR__4784
03fa4     0F 13 02 F6 | 	mov	arg01, local01
03fa8     00 91 B1 FD | 	call	#__system___string_cmp
03fac     00 FA 0D F2 | 	cmp	result1, #0 wz
03fb0     E4 05 90 AD |  if_e	jmp	#LR__0281
03fb4     64 01 00 FF 
03fb8     FF 14 06 F6 | 	mov	arg02, ##@LR__4785
03fbc     0F 13 02 F6 | 	mov	arg01, local01
03fc0     E8 90 B1 FD | 	call	#__system___string_cmp
03fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03fc8     D4 05 90 AD |  if_e	jmp	#LR__0282
03fcc     64 01 00 FF 
03fd0     04 15 06 F6 | 	mov	arg02, ##@LR__4786
03fd4     0F 13 02 F6 | 	mov	arg01, local01
03fd8     D0 90 B1 FD | 	call	#__system___string_cmp
03fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fe0     C4 05 90 AD |  if_e	jmp	#LR__0283
03fe4     64 01 00 FF 
03fe8     08 15 06 F6 | 	mov	arg02, ##@LR__4787
03fec     0F 13 02 F6 | 	mov	arg01, local01
03ff0     B8 90 B1 FD | 	call	#__system___string_cmp
03ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ff8     B4 05 90 AD |  if_e	jmp	#LR__0284
03ffc     64 01 00 FF 
04000     0E 15 06 F6 | 	mov	arg02, ##@LR__4788
04004     0F 13 02 F6 | 	mov	arg01, local01
04008     A0 90 B1 FD | 	call	#__system___string_cmp
0400c     00 FA 0D F2 | 	cmp	result1, #0 wz
04010     A4 05 90 AD |  if_e	jmp	#LR__0285
04014     64 01 00 FF 
04018     13 15 06 F6 | 	mov	arg02, ##@LR__4789
0401c     0F 13 02 F6 | 	mov	arg01, local01
04020     88 90 B1 FD | 	call	#__system___string_cmp
04024     00 FA 0D F2 | 	cmp	result1, #0 wz
04028     94 05 90 AD |  if_e	jmp	#LR__0286
0402c     64 01 00 FF 
04030     16 15 06 F6 | 	mov	arg02, ##@LR__4790
04034     0F 13 02 F6 | 	mov	arg01, local01
04038     70 90 B1 FD | 	call	#__system___string_cmp
0403c     00 FA 0D F2 | 	cmp	result1, #0 wz
04040     84 05 90 AD |  if_e	jmp	#LR__0287
04044     64 01 00 FF 
04048     1C 15 06 F6 | 	mov	arg02, ##@LR__4791
0404c     0F 13 02 F6 | 	mov	arg01, local01
04050     58 90 B1 FD | 	call	#__system___string_cmp
04054     00 FA 0D F2 | 	cmp	result1, #0 wz
04058     74 05 90 AD |  if_e	jmp	#LR__0288
0405c     64 01 00 FF 
04060     20 15 06 F6 | 	mov	arg02, ##@LR__4792
04064     0F 13 02 F6 | 	mov	arg01, local01
04068     40 90 B1 FD | 	call	#__system___string_cmp
0406c     00 FA 0D F2 | 	cmp	result1, #0 wz
04070     64 05 90 AD |  if_e	jmp	#LR__0289
04074     64 01 00 FF 
04078     25 15 06 F6 | 	mov	arg02, ##@LR__4793
0407c     0F 13 02 F6 | 	mov	arg01, local01
04080     28 90 B1 FD | 	call	#__system___string_cmp
04084     00 FA 0D F2 | 	cmp	result1, #0 wz
04088     54 05 90 AD |  if_e	jmp	#LR__0290
0408c     64 01 00 FF 
04090     28 15 06 F6 | 	mov	arg02, ##@LR__4794
04094     0F 13 02 F6 | 	mov	arg01, local01
04098     10 90 B1 FD | 	call	#__system___string_cmp
0409c     00 FA 0D F2 | 	cmp	result1, #0 wz
040a0     44 05 90 AD |  if_e	jmp	#LR__0291
040a4     64 01 00 FF 
040a8     2E 15 06 F6 | 	mov	arg02, ##@LR__4795
040ac     0F 13 02 F6 | 	mov	arg01, local01
040b0     F8 8F B1 FD | 	call	#__system___string_cmp
040b4     00 FA 0D F2 | 	cmp	result1, #0 wz
040b8     34 05 90 AD |  if_e	jmp	#LR__0292
040bc     64 01 00 FF 
040c0     31 15 06 F6 | 	mov	arg02, ##@LR__4796
040c4     0F 13 02 F6 | 	mov	arg01, local01
040c8     E0 8F B1 FD | 	call	#__system___string_cmp
040cc     00 FA 0D F2 | 	cmp	result1, #0 wz
040d0     24 05 90 AD |  if_e	jmp	#LR__0293
040d4     64 01 00 FF 
040d8     3A 15 06 F6 | 	mov	arg02, ##@LR__4797
040dc     0F 13 02 F6 | 	mov	arg01, local01
040e0     C8 8F B1 FD | 	call	#__system___string_cmp
040e4     00 FA 0D F2 | 	cmp	result1, #0 wz
040e8     14 05 90 AD |  if_e	jmp	#LR__0294
040ec     64 01 00 FF 
040f0     40 15 06 F6 | 	mov	arg02, ##@LR__4798
040f4     0F 13 02 F6 | 	mov	arg01, local01
040f8     B0 8F B1 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     04 05 90 AD |  if_e	jmp	#LR__0295
04104     64 01 00 FF 
04108     46 15 06 F6 | 	mov	arg02, ##@LR__4799
0410c     0F 13 02 F6 | 	mov	arg01, local01
04110     98 8F B1 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     F4 04 90 AD |  if_e	jmp	#LR__0296
0411c     64 01 00 FF 
04120     4F 15 06 F6 | 	mov	arg02, ##@LR__4800
04124     0F 13 02 F6 | 	mov	arg01, local01
04128     80 8F B1 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     E4 04 90 AD |  if_e	jmp	#LR__0297
04134     64 01 00 FF 
04138     59 15 06 F6 | 	mov	arg02, ##@LR__4801
0413c     0F 13 02 F6 | 	mov	arg01, local01
04140     68 8F B1 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     D4 04 90 AD |  if_e	jmp	#LR__0298
0414c     64 01 00 FF 
04150     62 15 06 F6 | 	mov	arg02, ##@LR__4802
04154     0F 13 02 F6 | 	mov	arg01, local01
04158     50 8F B1 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     C4 04 90 AD |  if_e	jmp	#LR__0299
04164     64 01 00 FF 
04168     67 15 06 F6 | 	mov	arg02, ##@LR__4803
0416c     0F 13 02 F6 | 	mov	arg01, local01
04170     38 8F B1 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     B4 04 90 AD |  if_e	jmp	#LR__0300
0417c     64 01 00 FF 
04180     6C 15 06 F6 | 	mov	arg02, ##@LR__4804
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     20 8F B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     A4 04 90 AD |  if_e	jmp	#LR__0301
04194     64 01 00 FF 
04198     70 15 06 F6 | 	mov	arg02, ##@LR__4805
0419c     0F 13 02 F6 | 	mov	arg01, local01
041a0     08 8F B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     94 04 90 AD |  if_e	jmp	#LR__0302
041ac     64 01 00 FF 
041b0     75 15 06 F6 | 	mov	arg02, ##@LR__4806
041b4     0F 13 02 F6 | 	mov	arg01, local01
041b8     F0 8E B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     84 04 90 AD |  if_e	jmp	#LR__0303
041c4     64 01 00 FF 
041c8     7E 15 06 F6 | 	mov	arg02, ##@LR__4807
041cc     0F 13 02 F6 | 	mov	arg01, local01
041d0     D8 8E B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     74 04 90 AD |  if_e	jmp	#LR__0304
041dc     64 01 00 FF 
041e0     83 15 06 F6 | 	mov	arg02, ##@LR__4808
041e4     0F 13 02 F6 | 	mov	arg01, local01
041e8     C0 8E B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     64 04 90 AD |  if_e	jmp	#LR__0305
041f4     64 01 00 FF 
041f8     89 15 06 F6 | 	mov	arg02, ##@LR__4809
041fc     0F 13 02 F6 | 	mov	arg01, local01
04200     A8 8E B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     54 04 90 AD |  if_e	jmp	#LR__0306
0420c     64 01 00 FF 
04210     8B 15 06 F6 | 	mov	arg02, ##@LR__4810
04214     0F 13 02 F6 | 	mov	arg01, local01
04218     90 8E B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     44 04 90 AD |  if_e	jmp	#LR__0307
04224     64 01 00 FF 
04228     8F 15 06 F6 | 	mov	arg02, ##@LR__4811
0422c     0F 13 02 F6 | 	mov	arg01, local01
04230     78 8E B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     34 04 90 AD |  if_e	jmp	#LR__0308
0423c     64 01 00 FF 
04240     97 15 06 F6 | 	mov	arg02, ##@LR__4812
04244     0F 13 02 F6 | 	mov	arg01, local01
04248     60 8E B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     24 04 90 AD |  if_e	jmp	#LR__0309
04254     64 01 00 FF 
04258     9B 15 06 F6 | 	mov	arg02, ##@LR__4813
0425c     0F 13 02 F6 | 	mov	arg01, local01
04260     48 8E B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     14 04 90 AD |  if_e	jmp	#LR__0310
0426c     64 01 00 FF 
04270     A0 15 06 F6 | 	mov	arg02, ##@LR__4814
04274     0F 13 02 F6 | 	mov	arg01, local01
04278     30 8E B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     04 04 90 AD |  if_e	jmp	#LR__0311
04284     64 01 00 FF 
04288     A3 15 06 F6 | 	mov	arg02, ##@LR__4815
0428c     0F 13 02 F6 | 	mov	arg01, local01
04290     18 8E B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     F4 03 90 AD |  if_e	jmp	#LR__0312
0429c     64 01 00 FF 
042a0     AC 15 06 F6 | 	mov	arg02, ##@LR__4816
042a4     0F 13 02 F6 | 	mov	arg01, local01
042a8     00 8E B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     E4 03 90 AD |  if_e	jmp	#LR__0313
042b4     64 01 00 FF 
042b8     B3 15 06 F6 | 	mov	arg02, ##@LR__4817
042bc     0F 13 02 F6 | 	mov	arg01, local01
042c0     E8 8D B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     D4 03 90 AD |  if_e	jmp	#LR__0314
042cc     64 01 00 FF 
042d0     BA 15 06 F6 | 	mov	arg02, ##@LR__4818
042d4     0F 13 02 F6 | 	mov	arg01, local01
042d8     D0 8D B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     C4 03 90 AD |  if_e	jmp	#LR__0315
042e4     64 01 00 FF 
042e8     C1 15 06 F6 | 	mov	arg02, ##@LR__4819
042ec     0F 13 02 F6 | 	mov	arg01, local01
042f0     B8 8D B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     B4 03 90 AD |  if_e	jmp	#LR__0316
042fc     64 01 00 FF 
04300     CC 15 06 F6 | 	mov	arg02, ##@LR__4820
04304     0F 13 02 F6 | 	mov	arg01, local01
04308     A0 8D B1 FD | 	call	#__system___string_cmp
0430c     00 FA 0D F2 | 	cmp	result1, #0 wz
04310     A4 03 90 AD |  if_e	jmp	#LR__0317
04314     64 01 00 FF 
04318     D3 15 06 F6 | 	mov	arg02, ##@LR__4821
0431c     0F 13 02 F6 | 	mov	arg01, local01
04320     88 8D B1 FD | 	call	#__system___string_cmp
04324     00 FA 0D F2 | 	cmp	result1, #0 wz
04328     94 03 90 AD |  if_e	jmp	#LR__0318
0432c     64 01 00 FF 
04330     DB 15 06 F6 | 	mov	arg02, ##@LR__4822
04334     0F 13 02 F6 | 	mov	arg01, local01
04338     70 8D B1 FD | 	call	#__system___string_cmp
0433c     00 FA 0D F2 | 	cmp	result1, #0 wz
04340     84 03 90 AD |  if_e	jmp	#LR__0319
04344     64 01 00 FF 
04348     E1 15 06 F6 | 	mov	arg02, ##@LR__4823
0434c     0F 13 02 F6 | 	mov	arg01, local01
04350     58 8D B1 FD | 	call	#__system___string_cmp
04354     00 FA 0D F2 | 	cmp	result1, #0 wz
04358     74 03 90 AD |  if_e	jmp	#LR__0320
0435c     64 01 00 FF 
04360     E5 15 06 F6 | 	mov	arg02, ##@LR__4824
04364     0F 13 02 F6 | 	mov	arg01, local01
04368     40 8D B1 FD | 	call	#__system___string_cmp
0436c     00 FA 0D F2 | 	cmp	result1, #0 wz
04370     64 03 90 AD |  if_e	jmp	#LR__0321
04374     64 01 00 FF 
04378     EC 15 06 F6 | 	mov	arg02, ##@LR__4825
0437c     0F 13 02 F6 | 	mov	arg01, local01
04380     28 8D B1 FD | 	call	#__system___string_cmp
04384     00 FA 0D F2 | 	cmp	result1, #0 wz
04388     54 03 90 AD |  if_e	jmp	#LR__0322
0438c     64 01 00 FF 
04390     F0 15 06 F6 | 	mov	arg02, ##@LR__4826
04394     0F 13 02 F6 | 	mov	arg01, local01
04398     10 8D B1 FD | 	call	#__system___string_cmp
0439c     00 FA 0D F2 | 	cmp	result1, #0 wz
043a0     44 03 90 AD |  if_e	jmp	#LR__0323
043a4     64 01 00 FF 
043a8     F5 15 06 F6 | 	mov	arg02, ##@LR__4827
043ac     0F 13 02 F6 | 	mov	arg01, local01
043b0     F8 8C B1 FD | 	call	#__system___string_cmp
043b4     00 FA 0D F2 | 	cmp	result1, #0 wz
043b8     34 03 90 AD |  if_e	jmp	#LR__0324
043bc     64 01 00 FF 
043c0     FC 15 06 F6 | 	mov	arg02, ##@LR__4828
043c4     0F 13 02 F6 | 	mov	arg01, local01
043c8     E0 8C B1 FD | 	call	#__system___string_cmp
043cc     00 FA 0D F2 | 	cmp	result1, #0 wz
043d0     24 03 90 AD |  if_e	jmp	#LR__0325
043d4     65 01 00 FF 
043d8     06 14 06 F6 | 	mov	arg02, ##@LR__4829
043dc     0F 13 02 F6 | 	mov	arg01, local01
043e0     C8 8C B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     14 03 90 AD |  if_e	jmp	#LR__0326
043ec     65 01 00 FF 
043f0     0A 14 06 F6 | 	mov	arg02, ##@LR__4830
043f4     0F 13 02 F6 | 	mov	arg01, local01
043f8     B0 8C B1 FD | 	call	#__system___string_cmp
043fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04400     04 03 90 AD |  if_e	jmp	#LR__0327
04404     65 01 00 FF 
04408     12 14 06 F6 | 	mov	arg02, ##@LR__4831
0440c     0F 13 02 F6 | 	mov	arg01, local01
04410     98 8C B1 FD | 	call	#__system___string_cmp
04414     00 FA 0D F2 | 	cmp	result1, #0 wz
04418     F4 02 90 AD |  if_e	jmp	#LR__0328
0441c     65 01 00 FF 
04420     16 14 06 F6 | 	mov	arg02, ##@LR__4832
04424     0F 13 02 F6 | 	mov	arg01, local01
04428     80 8C B1 FD | 	call	#__system___string_cmp
0442c     00 FA 0D F2 | 	cmp	result1, #0 wz
04430     E4 02 90 AD |  if_e	jmp	#LR__0329
04434     65 01 00 FF 
04438     1C 14 06 F6 | 	mov	arg02, ##@LR__4833
0443c     0F 13 02 F6 | 	mov	arg01, local01
04440     68 8C B1 FD | 	call	#__system___string_cmp
04444     00 FA 0D F2 | 	cmp	result1, #0 wz
04448     D4 02 90 AD |  if_e	jmp	#LR__0330
0444c     D8 02 90 FD | 	jmp	#LR__0331
04450                 | LR__0240
04450     5C FA 05 F6 | 	mov	result1, #92
04454     D4 02 90 FD | 	jmp	#LR__0332
04458                 | LR__0241
04458     5C FA 05 F6 | 	mov	result1, #92
0445c     CC 02 90 FD | 	jmp	#LR__0332
04460                 | LR__0242
04460     47 FA 05 F6 | 	mov	result1, #71
04464     C4 02 90 FD | 	jmp	#LR__0332
04468                 | LR__0243
04468     59 FA 05 F6 | 	mov	result1, #89
0446c     BC 02 90 FD | 	jmp	#LR__0332
04470                 | LR__0244
04470     59 FA 05 F6 | 	mov	result1, #89
04474     B4 02 90 FD | 	jmp	#LR__0332
04478                 | LR__0245
04478     45 FA 05 F6 | 	mov	result1, #69
0447c     AC 02 90 FD | 	jmp	#LR__0332
04480                 | LR__0246
04480     45 FA 05 F6 | 	mov	result1, #69
04484     A4 02 90 FD | 	jmp	#LR__0332
04488                 | LR__0247
04488     69 FA 05 F6 | 	mov	result1, #105
0448c     9C 02 90 FD | 	jmp	#LR__0332
04490                 | LR__0248
04490     40 FA 05 F6 | 	mov	result1, #64
04494     94 02 90 FD | 	jmp	#LR__0332
04498                 | LR__0249
04498     49 FA 05 F6 | 	mov	result1, #73
0449c     8C 02 90 FD | 	jmp	#LR__0332
044a0                 | LR__0250
044a0     49 FA 05 F6 | 	mov	result1, #73
044a4     84 02 90 FD | 	jmp	#LR__0332
044a8                 | LR__0251
044a8     50 FA 05 F6 | 	mov	result1, #80
044ac     7C 02 90 FD | 	jmp	#LR__0332
044b0                 | LR__0252
044b0     50 FA 05 F6 | 	mov	result1, #80
044b4     74 02 90 FD | 	jmp	#LR__0332
044b8                 | LR__0253
044b8     68 FA 05 F6 | 	mov	result1, #104
044bc     6C 02 90 FD | 	jmp	#LR__0332
044c0                 | LR__0254
044c0     73 FA 05 F6 | 	mov	result1, #115
044c4     64 02 90 FD | 	jmp	#LR__0332
044c8                 | LR__0255
044c8     74 FA 05 F6 | 	mov	result1, #116
044cc     5C 02 90 FD | 	jmp	#LR__0332
044d0                 | LR__0256
044d0     6C FA 05 F6 | 	mov	result1, #108
044d4     54 02 90 FD | 	jmp	#LR__0332
044d8                 | LR__0257
044d8     6C FA 05 F6 | 	mov	result1, #108
044dc     4C 02 90 FD | 	jmp	#LR__0332
044e0                 | LR__0258
044e0     89 FA 05 F6 | 	mov	result1, #137
044e4     44 02 90 FD | 	jmp	#LR__0332
044e8                 | LR__0259
044e8     72 FA 05 F6 | 	mov	result1, #114
044ec     3C 02 90 FD | 	jmp	#LR__0332
044f0                 | LR__0260
044f0     5D FA 05 F6 | 	mov	result1, #93
044f4     34 02 90 FD | 	jmp	#LR__0332
044f8                 | LR__0261
044f8     96 FA 05 F6 | 	mov	result1, #150
044fc     2C 02 90 FD | 	jmp	#LR__0332
04500                 | LR__0262
04500     43 FA 05 F6 | 	mov	result1, #67
04504     24 02 90 FD | 	jmp	#LR__0332
04508                 | LR__0263
04508     43 FA 05 F6 | 	mov	result1, #67
0450c     1C 02 90 FD | 	jmp	#LR__0332
04510                 | LR__0264
04510     5A FA 05 F6 | 	mov	result1, #90
04514     14 02 90 FD | 	jmp	#LR__0332
04518                 | LR__0265
04518     46 FA 05 F6 | 	mov	result1, #70
0451c     0C 02 90 FD | 	jmp	#LR__0332
04520                 | LR__0266
04520     46 FA 05 F6 | 	mov	result1, #70
04524     04 02 90 FD | 	jmp	#LR__0332
04528                 | LR__0267
04528     71 FA 05 F6 | 	mov	result1, #113
0452c     FC 01 90 FD | 	jmp	#LR__0332
04530                 | LR__0268
04530     71 FA 05 F6 | 	mov	result1, #113
04534     F4 01 90 FD | 	jmp	#LR__0332
04538                 | LR__0269
04538     60 FA 05 F6 | 	mov	result1, #96
0453c     EC 01 90 FD | 	jmp	#LR__0332
04540                 | LR__0270
04540     4A FA 05 F6 | 	mov	result1, #74
04544     E4 01 90 FD | 	jmp	#LR__0332
04548                 | LR__0271
04548     4A FA 05 F6 | 	mov	result1, #74
0454c     DC 01 90 FD | 	jmp	#LR__0332
04550                 | LR__0272
04550     48 FA 05 F6 | 	mov	result1, #72
04554     D4 01 90 FD | 	jmp	#LR__0332
04558                 | LR__0273
04558     48 FA 05 F6 | 	mov	result1, #72
0455c     CC 01 90 FD | 	jmp	#LR__0332
04560                 | LR__0274
04560     4E FA 05 F6 | 	mov	result1, #78
04564     C4 01 90 FD | 	jmp	#LR__0332
04568                 | LR__0275
04568     4E FA 05 F6 | 	mov	result1, #78
0456c     BC 01 90 FD | 	jmp	#LR__0332
04570                 | LR__0276
04570     58 FA 05 F6 | 	mov	result1, #88
04574     B4 01 90 FD | 	jmp	#LR__0332
04578                 | LR__0277
04578     5F FA 05 F6 | 	mov	result1, #95
0457c     AC 01 90 FD | 	jmp	#LR__0332
04580                 | LR__0278
04580     5F FA 05 F6 | 	mov	result1, #95
04584     A4 01 90 FD | 	jmp	#LR__0332
04588                 | LR__0279
04588     8A FA 05 F6 | 	mov	result1, #138
0458c     9C 01 90 FD | 	jmp	#LR__0332
04590                 | LR__0280
04590     4C FA 05 F6 | 	mov	result1, #76
04594     94 01 90 FD | 	jmp	#LR__0332
04598                 | LR__0281
04598     4C FA 05 F6 | 	mov	result1, #76
0459c     8C 01 90 FD | 	jmp	#LR__0332
045a0                 | LR__0282
045a0     52 FA 05 F6 | 	mov	result1, #82
045a4     84 01 90 FD | 	jmp	#LR__0332
045a8                 | LR__0283
045a8     52 FA 05 F6 | 	mov	result1, #82
045ac     7C 01 90 FD | 	jmp	#LR__0332
045b0                 | LR__0284
045b0     97 FA 05 F6 | 	mov	result1, #151
045b4     74 01 90 FD | 	jmp	#LR__0332
045b8                 | LR__0285
045b8     61 FA 05 F6 | 	mov	result1, #97
045bc     6C 01 90 FD | 	jmp	#LR__0332
045c0                 | LR__0286
045c0     61 FA 05 F6 | 	mov	result1, #97
045c4     64 01 90 FD | 	jmp	#LR__0332
045c8                 | LR__0287
045c8     63 FA 05 F6 | 	mov	result1, #99
045cc     5C 01 90 FD | 	jmp	#LR__0332
045d0                 | LR__0288
045d0     41 FA 05 F6 | 	mov	result1, #65
045d4     54 01 90 FD | 	jmp	#LR__0332
045d8                 | LR__0289
045d8     4B FA 05 F6 | 	mov	result1, #75
045dc     4C 01 90 FD | 	jmp	#LR__0332
045e0                 | LR__0290
045e0     4B FA 05 F6 | 	mov	result1, #75
045e4     44 01 90 FD | 	jmp	#LR__0332
045e8                 | LR__0291
045e8     5E FA 05 F6 | 	mov	result1, #94
045ec     3C 01 90 FD | 	jmp	#LR__0332
045f0                 | LR__0292
045f0     5E FA 05 F6 | 	mov	result1, #94
045f4     34 01 90 FD | 	jmp	#LR__0332
045f8                 | LR__0293
045f8     7C FA 05 F6 | 	mov	result1, #124
045fc     2C 01 90 FD | 	jmp	#LR__0332
04600                 | LR__0294
04600     7E FA 05 F6 | 	mov	result1, #126
04604     24 01 90 FD | 	jmp	#LR__0332
04608                 | LR__0295
04608     7D FA 05 F6 | 	mov	result1, #125
0460c     1C 01 90 FD | 	jmp	#LR__0332
04610                 | LR__0296
04610     7F FA 05 F6 | 	mov	result1, #127
04614     14 01 90 FD | 	jmp	#LR__0332
04618                 | LR__0297
04618     80 FA 05 F6 | 	mov	result1, #128
0461c     0C 01 90 FD | 	jmp	#LR__0332
04620                 | LR__0298
04620     55 FA 05 F6 | 	mov	result1, #85
04624     04 01 90 FD | 	jmp	#LR__0332
04628                 | LR__0299
04628     75 FA 05 F6 | 	mov	result1, #117
0462c     FC 00 90 FD | 	jmp	#LR__0332
04630                 | LR__0300
04630     42 FA 05 F6 | 	mov	result1, #66
04634     F4 00 90 FD | 	jmp	#LR__0332
04638                 | LR__0301
04638     42 FA 05 F6 | 	mov	result1, #66
0463c     EC 00 90 FD | 	jmp	#LR__0332
04640                 | LR__0302
04640     95 FA 05 F6 | 	mov	result1, #149
04644     E4 00 90 FD | 	jmp	#LR__0332
04648                 | LR__0303
04648     81 FA 05 F6 | 	mov	result1, #129
0464c     DC 00 90 FD | 	jmp	#LR__0332
04650                 | LR__0304
04650     81 FA 05 F6 | 	mov	result1, #129
04654     D4 00 90 FD | 	jmp	#LR__0332
04658                 | LR__0305
04658     44 FA 05 F6 | 	mov	result1, #68
0465c     CC 00 90 FD | 	jmp	#LR__0332
04660                 | LR__0306
04660     44 FA 05 F6 | 	mov	result1, #68
04664     C4 00 90 FD | 	jmp	#LR__0332
04668                 | LR__0307
04668     88 FA 05 F6 | 	mov	result1, #136
0466c     BC 00 90 FD | 	jmp	#LR__0332
04670                 | LR__0308
04670     92 FA 05 F6 | 	mov	result1, #146
04674     B4 00 90 FD | 	jmp	#LR__0332
04678                 | LR__0309
04678     4D FA 05 F6 | 	mov	result1, #77
0467c     AC 00 90 FD | 	jmp	#LR__0332
04680                 | LR__0310
04680     51 FA 05 F6 | 	mov	result1, #81
04684     A4 00 90 FD | 	jmp	#LR__0332
04688                 | LR__0311
04688     51 FA 05 F6 | 	mov	result1, #81
0468c     9C 00 90 FD | 	jmp	#LR__0332
04690                 | LR__0312
04690     8E FA 05 F6 | 	mov	result1, #142
04694     94 00 90 FD | 	jmp	#LR__0332
04698                 | LR__0313
04698     90 FA 05 F6 | 	mov	result1, #144
0469c     8C 00 90 FD | 	jmp	#LR__0332
046a0                 | LR__0314
046a0     8D FA 05 F6 | 	mov	result1, #141
046a4     84 00 90 FD | 	jmp	#LR__0332
046a8                 | LR__0315
046a8     8C FA 05 F6 | 	mov	result1, #140
046ac     7C 00 90 FD | 	jmp	#LR__0332
046b0                 | LR__0316
046b0     91 FA 05 F6 | 	mov	result1, #145
046b4     74 00 90 FD | 	jmp	#LR__0332
046b8                 | LR__0317
046b8     8B FA 05 F6 | 	mov	result1, #139
046bc     6C 00 90 FD | 	jmp	#LR__0332
046c0                 | LR__0318
046c0     8F FA 05 F6 | 	mov	result1, #143
046c4     64 00 90 FD | 	jmp	#LR__0332
046c8                 | LR__0319
046c8     75 FA 05 F6 | 	mov	result1, #117
046cc     5C 00 90 FD | 	jmp	#LR__0332
046d0                 | LR__0320
046d0     75 FA 05 F6 | 	mov	result1, #117
046d4     54 00 90 FD | 	jmp	#LR__0332
046d8                 | LR__0321
046d8     6D FA 05 F6 | 	mov	result1, #109
046dc     4C 00 90 FD | 	jmp	#LR__0332
046e0                 | LR__0322
046e0     6D FA 05 F6 | 	mov	result1, #109
046e4     44 00 90 FD | 	jmp	#LR__0332
046e8                 | LR__0323
046e8     5B FA 05 F6 | 	mov	result1, #91
046ec     3C 00 90 FD | 	jmp	#LR__0332
046f0                 | LR__0324
046f0     56 FA 05 F6 | 	mov	result1, #86
046f4     34 00 90 FD | 	jmp	#LR__0332
046f8                 | LR__0325
046f8     70 FA 05 F6 | 	mov	result1, #112
046fc     2C 00 90 FD | 	jmp	#LR__0332
04700                 | LR__0326
04700     70 FA 05 F6 | 	mov	result1, #112
04704     24 00 90 FD | 	jmp	#LR__0332
04708                 | LR__0327
04708     57 FA 05 F6 | 	mov	result1, #87
0470c     1C 00 90 FD | 	jmp	#LR__0332
04710                 | LR__0328
04710     57 FA 05 F6 | 	mov	result1, #87
04714     14 00 90 FD | 	jmp	#LR__0332
04718                 | LR__0329
04718     77 FA 05 F6 | 	mov	result1, #119
0471c     0C 00 90 FD | 	jmp	#LR__0332
04720                 | LR__0330
04720     78 FA 05 F6 | 	mov	result1, #120
04724     04 00 90 FD | 	jmp	#LR__0332
04728                 | LR__0331
04728     00 FA 05 F6 | 	mov	result1, #0
0472c                 | LR__0332
0472c     A7 F0 03 F6 | 	mov	ptra, fp
04730     B2 00 A0 FD | 	call	#popregs_
04734                 | _iscommand_ret
04734     2D 00 64 FD | 	ret
04738                 | 
04738                 | ' 
04738                 | ' function isfunction(s as string) as ubyte
04738                 | _isfunction
04738     01 4A 05 F6 | 	mov	COUNT_, #1
0473c     A8 00 A0 FD | 	call	#pushregs_
04740                 | ' 
04740                 | ' select case s
04740     09 1F 02 F6 | 	mov	local01, arg01
04744     65 01 00 FF 
04748     22 14 06 F6 | 	mov	arg02, ##@LR__4834
0474c     0F 13 02 F6 | 	mov	arg01, local01
04750     58 89 B1 FD | 	call	#__system___string_cmp
04754     00 FA 0D F2 | 	cmp	result1, #0 wz
04758     D4 02 90 AD |  if_e	jmp	#LR__0340
0475c     65 01 00 FF 
04760     26 14 06 F6 | 	mov	arg02, ##@LR__4835
04764     0F 13 02 F6 | 	mov	arg01, local01
04768     40 89 B1 FD | 	call	#__system___string_cmp
0476c     00 FA 0D F2 | 	cmp	result1, #0 wz
04770     C4 02 90 AD |  if_e	jmp	#LR__0341
04774     65 01 00 FF 
04778     2B 14 06 F6 | 	mov	arg02, ##@LR__4836
0477c     0F 13 02 F6 | 	mov	arg01, local01
04780     28 89 B1 FD | 	call	#__system___string_cmp
04784     00 FA 0D F2 | 	cmp	result1, #0 wz
04788     B4 02 90 AD |  if_e	jmp	#LR__0342
0478c     65 01 00 FF 
04790     2F 14 06 F6 | 	mov	arg02, ##@LR__4837
04794     0F 13 02 F6 | 	mov	arg01, local01
04798     10 89 B1 FD | 	call	#__system___string_cmp
0479c     00 FA 0D F2 | 	cmp	result1, #0 wz
047a0     A4 02 90 AD |  if_e	jmp	#LR__0343
047a4     65 01 00 FF 
047a8     34 14 06 F6 | 	mov	arg02, ##@LR__4838
047ac     0F 13 02 F6 | 	mov	arg01, local01
047b0     F8 88 B1 FD | 	call	#__system___string_cmp
047b4     00 FA 0D F2 | 	cmp	result1, #0 wz
047b8     94 02 90 AD |  if_e	jmp	#LR__0344
047bc     65 01 00 FF 
047c0     3B 14 06 F6 | 	mov	arg02, ##@LR__4839
047c4     0F 13 02 F6 | 	mov	arg01, local01
047c8     E0 88 B1 FD | 	call	#__system___string_cmp
047cc     00 FA 0D F2 | 	cmp	result1, #0 wz
047d0     84 02 90 AD |  if_e	jmp	#LR__0345
047d4     65 01 00 FF 
047d8     40 14 06 F6 | 	mov	arg02, ##@LR__4840
047dc     0F 13 02 F6 | 	mov	arg01, local01
047e0     C8 88 B1 FD | 	call	#__system___string_cmp
047e4     00 FA 0D F2 | 	cmp	result1, #0 wz
047e8     74 02 90 AD |  if_e	jmp	#LR__0346
047ec     65 01 00 FF 
047f0     44 14 06 F6 | 	mov	arg02, ##@LR__4841
047f4     0F 13 02 F6 | 	mov	arg01, local01
047f8     B0 88 B1 FD | 	call	#__system___string_cmp
047fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04800     64 02 90 AD |  if_e	jmp	#LR__0347
04804     65 01 00 FF 
04808     48 14 06 F6 | 	mov	arg02, ##@LR__4842
0480c     0F 13 02 F6 | 	mov	arg01, local01
04810     98 88 B1 FD | 	call	#__system___string_cmp
04814     00 FA 0D F2 | 	cmp	result1, #0 wz
04818     54 02 90 AD |  if_e	jmp	#LR__0348
0481c     65 01 00 FF 
04820     4E 14 06 F6 | 	mov	arg02, ##@LR__4843
04824     0F 13 02 F6 | 	mov	arg01, local01
04828     80 88 B1 FD | 	call	#__system___string_cmp
0482c     00 FA 0D F2 | 	cmp	result1, #0 wz
04830     44 02 90 AD |  if_e	jmp	#LR__0349
04834     65 01 00 FF 
04838     52 14 06 F6 | 	mov	arg02, ##@LR__4844
0483c     0F 13 02 F6 | 	mov	arg01, local01
04840     68 88 B1 FD | 	call	#__system___string_cmp
04844     00 FA 0D F2 | 	cmp	result1, #0 wz
04848     34 02 90 AD |  if_e	jmp	#LR__0350
0484c     65 01 00 FF 
04850     5B 14 06 F6 | 	mov	arg02, ##@LR__4845
04854     0F 13 02 F6 | 	mov	arg01, local01
04858     50 88 B1 FD | 	call	#__system___string_cmp
0485c     00 FA 0D F2 | 	cmp	result1, #0 wz
04860     24 02 90 AD |  if_e	jmp	#LR__0351
04864     65 01 00 FF 
04868     5F 14 06 F6 | 	mov	arg02, ##@LR__4846
0486c     0F 13 02 F6 | 	mov	arg01, local01
04870     38 88 B1 FD | 	call	#__system___string_cmp
04874     00 FA 0D F2 | 	cmp	result1, #0 wz
04878     14 02 90 AD |  if_e	jmp	#LR__0352
0487c     65 01 00 FF 
04880     6D 14 06 F6 | 	mov	arg02, ##@LR__4847
04884     0F 13 02 F6 | 	mov	arg01, local01
04888     20 88 B1 FD | 	call	#__system___string_cmp
0488c     00 FA 0D F2 | 	cmp	result1, #0 wz
04890     04 02 90 AD |  if_e	jmp	#LR__0353
04894     65 01 00 FF 
04898     7A 14 06 F6 | 	mov	arg02, ##@LR__4848
0489c     0F 13 02 F6 | 	mov	arg01, local01
048a0     08 88 B1 FD | 	call	#__system___string_cmp
048a4     00 FA 0D F2 | 	cmp	result1, #0 wz
048a8     F4 01 90 AD |  if_e	jmp	#LR__0354
048ac     65 01 00 FF 
048b0     82 14 06 F6 | 	mov	arg02, ##@LR__4849
048b4     0F 13 02 F6 | 	mov	arg01, local01
048b8     F0 87 B1 FD | 	call	#__system___string_cmp
048bc     00 FA 0D F2 | 	cmp	result1, #0 wz
048c0     E4 01 90 AD |  if_e	jmp	#LR__0355
048c4     65 01 00 FF 
048c8     89 14 06 F6 | 	mov	arg02, ##@LR__4850
048cc     0F 13 02 F6 | 	mov	arg01, local01
048d0     D8 87 B1 FD | 	call	#__system___string_cmp
048d4     00 FA 0D F2 | 	cmp	result1, #0 wz
048d8     D4 01 90 AD |  if_e	jmp	#LR__0356
048dc     65 01 00 FF 
048e0     8F 14 06 F6 | 	mov	arg02, ##@LR__4851
048e4     0F 13 02 F6 | 	mov	arg01, local01
048e8     C0 87 B1 FD | 	call	#__system___string_cmp
048ec     00 FA 0D F2 | 	cmp	result1, #0 wz
048f0     C4 01 90 AD |  if_e	jmp	#LR__0357
048f4     65 01 00 FF 
048f8     96 14 06 F6 | 	mov	arg02, ##@LR__4852
048fc     0F 13 02 F6 | 	mov	arg01, local01
04900     A8 87 B1 FD | 	call	#__system___string_cmp
04904     00 FA 0D F2 | 	cmp	result1, #0 wz
04908     B4 01 90 AD |  if_e	jmp	#LR__0358
0490c     65 01 00 FF 
04910     9D 14 06 F6 | 	mov	arg02, ##@LR__4853
04914     0F 13 02 F6 | 	mov	arg01, local01
04918     90 87 B1 FD | 	call	#__system___string_cmp
0491c     00 FA 0D F2 | 	cmp	result1, #0 wz
04920     A4 01 90 AD |  if_e	jmp	#LR__0359
04924     65 01 00 FF 
04928     A4 14 06 F6 | 	mov	arg02, ##@LR__4854
0492c     0F 13 02 F6 | 	mov	arg01, local01
04930     78 87 B1 FD | 	call	#__system___string_cmp
04934     00 FA 0D F2 | 	cmp	result1, #0 wz
04938     94 01 90 AD |  if_e	jmp	#LR__0360
0493c     65 01 00 FF 
04940     AB 14 06 F6 | 	mov	arg02, ##@LR__4855
04944     0F 13 02 F6 | 	mov	arg01, local01
04948     60 87 B1 FD | 	call	#__system___string_cmp
0494c     00 FA 0D F2 | 	cmp	result1, #0 wz
04950     84 01 90 AD |  if_e	jmp	#LR__0361
04954     65 01 00 FF 
04958     B0 14 06 F6 | 	mov	arg02, ##@LR__4856
0495c     0F 13 02 F6 | 	mov	arg01, local01
04960     48 87 B1 FD | 	call	#__system___string_cmp
04964     00 FA 0D F2 | 	cmp	result1, #0 wz
04968     74 01 90 AD |  if_e	jmp	#LR__0362
0496c     65 01 00 FF 
04970     B8 14 06 F6 | 	mov	arg02, ##@LR__4857
04974     0F 13 02 F6 | 	mov	arg01, local01
04978     30 87 B1 FD | 	call	#__system___string_cmp
0497c     00 FA 0D F2 | 	cmp	result1, #0 wz
04980     64 01 90 AD |  if_e	jmp	#LR__0363
04984     65 01 00 FF 
04988     BE 14 06 F6 | 	mov	arg02, ##@LR__4858
0498c     0F 13 02 F6 | 	mov	arg01, local01
04990     18 87 B1 FD | 	call	#__system___string_cmp
04994     00 FA 0D F2 | 	cmp	result1, #0 wz
04998     54 01 90 AD |  if_e	jmp	#LR__0364
0499c     65 01 00 FF 
049a0     C4 14 06 F6 | 	mov	arg02, ##@LR__4859
049a4     0F 13 02 F6 | 	mov	arg01, local01
049a8     00 87 B1 FD | 	call	#__system___string_cmp
049ac     00 FA 0D F2 | 	cmp	result1, #0 wz
049b0     44 01 90 AD |  if_e	jmp	#LR__0365
049b4     65 01 00 FF 
049b8     C8 14 06 F6 | 	mov	arg02, ##@LR__4860
049bc     0F 13 02 F6 | 	mov	arg01, local01
049c0     E8 86 B1 FD | 	call	#__system___string_cmp
049c4     00 FA 0D F2 | 	cmp	result1, #0 wz
049c8     34 01 90 AD |  if_e	jmp	#LR__0366
049cc     65 01 00 FF 
049d0     CC 14 06 F6 | 	mov	arg02, ##@LR__4861
049d4     0F 13 02 F6 | 	mov	arg01, local01
049d8     D0 86 B1 FD | 	call	#__system___string_cmp
049dc     00 FA 0D F2 | 	cmp	result1, #0 wz
049e0     24 01 90 AD |  if_e	jmp	#LR__0367
049e4     65 01 00 FF 
049e8     D0 14 06 F6 | 	mov	arg02, ##@LR__4862
049ec     0F 13 02 F6 | 	mov	arg01, local01
049f0     B8 86 B1 FD | 	call	#__system___string_cmp
049f4     00 FA 0D F2 | 	cmp	result1, #0 wz
049f8     14 01 90 AD |  if_e	jmp	#LR__0368
049fc     65 01 00 FF 
04a00     D6 14 06 F6 | 	mov	arg02, ##@LR__4863
04a04     0F 13 02 F6 | 	mov	arg01, local01
04a08     A0 86 B1 FD | 	call	#__system___string_cmp
04a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a10     04 01 90 AD |  if_e	jmp	#LR__0369
04a14     65 01 00 FF 
04a18     DC 14 06 F6 | 	mov	arg02, ##@LR__4864
04a1c     0F 13 02 F6 | 	mov	arg01, local01
04a20     88 86 B1 FD | 	call	#__system___string_cmp
04a24     00 FA 0D F2 | 	cmp	result1, #0 wz
04a28     F4 00 90 AD |  if_e	jmp	#LR__0370
04a2c     F8 00 90 FD | 	jmp	#LR__0371
04a30                 | LR__0340
04a30     9E FA 05 F6 | 	mov	result1, #158
04a34     F4 00 90 FD | 	jmp	#LR__0372
04a38                 | LR__0341
04a38     85 FA 05 F6 | 	mov	result1, #133
04a3c     EC 00 90 FD | 	jmp	#LR__0372
04a40                 | LR__0342
04a40     9B FA 05 F6 | 	mov	result1, #155
04a44     E4 00 90 FD | 	jmp	#LR__0372
04a48                 | LR__0343
04a48     9B FA 05 F6 | 	mov	result1, #155
04a4c     DC 00 90 FD | 	jmp	#LR__0372
04a50                 | LR__0344
04a50     9B FA 05 F6 | 	mov	result1, #155
04a54     D4 00 90 FD | 	jmp	#LR__0372
04a58                 | LR__0345
04a58     84 FA 05 F6 | 	mov	result1, #132
04a5c     CC 00 90 FD | 	jmp	#LR__0372
04a60                 | LR__0346
04a60     86 FA 05 F6 | 	mov	result1, #134
04a64     C4 00 90 FD | 	jmp	#LR__0372
04a68                 | LR__0347
04a68     82 FA 05 F6 | 	mov	result1, #130
04a6c     BC 00 90 FD | 	jmp	#LR__0372
04a70                 | LR__0348
04a70     99 FA 05 F6 | 	mov	result1, #153
04a74     B4 00 90 FD | 	jmp	#LR__0372
04a78                 | LR__0349
04a78     9C FA 05 F6 | 	mov	result1, #156
04a7c     AC 00 90 FD | 	jmp	#LR__0372
04a80                 | LR__0350
04a80     6F FA 05 F6 | 	mov	result1, #111
04a84     A4 00 90 FD | 	jmp	#LR__0372
04a88                 | LR__0351
04a88     6F FA 05 F6 | 	mov	result1, #111
04a8c     9C 00 90 FD | 	jmp	#LR__0372
04a90                 | LR__0352
04a90     93 FA 05 F6 | 	mov	result1, #147
04a94     94 00 90 FD | 	jmp	#LR__0372
04a98                 | LR__0353
04a98     94 FA 05 F6 | 	mov	result1, #148
04a9c     8C 00 90 FD | 	jmp	#LR__0372
04aa0                 | LR__0354
04aa0     62 FA 05 F6 | 	mov	result1, #98
04aa4     84 00 90 FD | 	jmp	#LR__0372
04aa8                 | LR__0355
04aa8     9D FA 05 F6 | 	mov	result1, #157
04aac     7C 00 90 FD | 	jmp	#LR__0372
04ab0                 | LR__0356
04ab0     9A FA 05 F6 | 	mov	result1, #154
04ab4     74 00 90 FD | 	jmp	#LR__0372
04ab8                 | LR__0357
04ab8     66 FA 05 F6 | 	mov	result1, #102
04abc     6C 00 90 FD | 	jmp	#LR__0372
04ac0                 | LR__0358
04ac0     67 FA 05 F6 | 	mov	result1, #103
04ac4     64 00 90 FD | 	jmp	#LR__0372
04ac8                 | LR__0359
04ac8     64 FA 05 F6 | 	mov	result1, #100
04acc     5C 00 90 FD | 	jmp	#LR__0372
04ad0                 | LR__0360
04ad0     65 FA 05 F6 | 	mov	result1, #101
04ad4     54 00 90 FD | 	jmp	#LR__0372
04ad8                 | LR__0361
04ad8     98 FA 05 F6 | 	mov	result1, #152
04adc     4C 00 90 FD | 	jmp	#LR__0372
04ae0                 | LR__0362
04ae0     7B FA 05 F6 | 	mov	result1, #123
04ae4     44 00 90 FD | 	jmp	#LR__0372
04ae8                 | LR__0363
04ae8     76 FA 05 F6 | 	mov	result1, #118
04aec     3C 00 90 FD | 	jmp	#LR__0372
04af0                 | LR__0364
04af0     7A FA 05 F6 | 	mov	result1, #122
04af4     34 00 90 FD | 	jmp	#LR__0372
04af8                 | LR__0365
04af8     54 FA 05 F6 | 	mov	result1, #84
04afc     2C 00 90 FD | 	jmp	#LR__0372
04b00                 | LR__0366
04b00     6B FA 05 F6 | 	mov	result1, #107
04b04     24 00 90 FD | 	jmp	#LR__0372
04b08                 | LR__0367
04b08     87 FA 05 F6 | 	mov	result1, #135
04b0c     1C 00 90 FD | 	jmp	#LR__0372
04b10                 | LR__0368
04b10     6A FA 05 F6 | 	mov	result1, #106
04b14     14 00 90 FD | 	jmp	#LR__0372
04b18                 | LR__0369
04b18     6E FA 05 F6 | 	mov	result1, #110
04b1c     0C 00 90 FD | 	jmp	#LR__0372
04b20                 | LR__0370
04b20     83 FA 05 F6 | 	mov	result1, #131
04b24     04 00 90 FD | 	jmp	#LR__0372
04b28                 | LR__0371
04b28     00 FA 05 F6 | 	mov	result1, #0
04b2c                 | LR__0372
04b2c     A7 F0 03 F6 | 	mov	ptra, fp
04b30     B2 00 A0 FD | 	call	#popregs_
04b34                 | _isfunction_ret
04b34     2D 00 64 FD | 	ret
04b38                 | 
04b38                 | ' 
04b38                 | ' function isname(s as string) as boolean
04b38                 | _isname
04b38     0D 4A 05 F6 | 	mov	COUNT_, #13
04b3c     A8 00 A0 FD | 	call	#pushregs_
04b40     09 1F 02 F6 | 	mov	local01, arg01
04b44     09 21 02 F6 | 	mov	local02, arg01
04b48     97 06 48 FB | 	callpa	#(@LR__0381-@LR__0380)>>2,fcache_load_ptr_
04b4c                 | LR__0380
04b4c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04b50     01 20 06 51 |  if_ne	add	local02, #1
04b54     F4 FF 9F 5D |  if_ne	jmp	#LR__0380
04b58                 | LR__0381
04b58     09 21 82 F1 | 	sub	local02, arg01
04b5c     10 FB 01 F6 | 	mov	result1, local02
04b60     FD 22 0A F6 | 	mov	local03, result1 wz
04b64     00 FA 05 A6 |  if_e	mov	result1, #0
04b68     34 02 90 AD |  if_e	jmp	#LR__0393
04b6c     0F 13 02 F6 | 	mov	arg01, local01
04b70     01 14 06 F6 | 	mov	arg02, #1
04b74     01 16 06 F6 | 	mov	arg03, #1
04b78     64 A6 B1 FD | 	call	#__system__Mid_S
04b7c     FD 24 02 F6 | 	mov	local04, result1
04b80                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04b80     65 01 00 FF 
04b84     E0 14 06 F6 | 	mov	arg02, ##@LR__4865
04b88     12 13 02 F6 | 	mov	arg01, local04
04b8c     1C 85 B1 FD | 	call	#__system___string_cmp
04b90     00 FA 55 F2 | 	cmps	result1, #0 wc
04b94     18 00 90 CD |  if_b	jmp	#LR__0382
04b98     65 01 00 FF 
04b9c     E2 14 06 F6 | 	mov	arg02, ##@LR__4866
04ba0     12 13 02 F6 | 	mov	arg01, local04
04ba4     04 85 B1 FD | 	call	#__system___string_cmp
04ba8     01 FA 55 F2 | 	cmps	result1, #1 wc
04bac     1C 00 90 CD |  if_b	jmp	#LR__0383
04bb0                 | LR__0382
04bb0     65 01 00 FF 
04bb4     E4 14 06 F6 | 	mov	arg02, ##@LR__4867
04bb8     12 13 02 F6 | 	mov	arg01, local04
04bbc     EC 84 B1 FD | 	call	#__system___string_cmp
04bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bc4     00 FA 05 56 |  if_ne	mov	result1, #0
04bc8     D4 01 90 5D |  if_ne	jmp	#LR__0393
04bcc                 | LR__0383
04bcc                 | ' if l>2 then 
04bcc     03 22 56 F2 | 	cmps	local03, #3 wc
04bd0     C8 01 90 CD |  if_b	jmp	#LR__0392
04bd4                 | '   for i=2 to l
04bd4     02 26 06 F6 | 	mov	local05, #2
04bd8     11 29 02 F6 | 	mov	local06, local03
04bdc     01 28 06 F1 | 	add	local06, #1
04be0                 | LR__0384
04be0     14 27 52 F2 | 	cmps	local05, local06 wc
04be4     B4 01 90 3D |  if_ae	jmp	#LR__0391
04be8     0F 13 02 F6 | 	mov	arg01, local01
04bec     13 15 02 F6 | 	mov	arg02, local05
04bf0     01 16 06 F6 | 	mov	arg03, #1
04bf4     E8 A5 B1 FD | 	call	#__system__Mid_S
04bf8     FD 24 02 F6 | 	mov	local04, result1
04bfc                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04bfc     11 27 52 F2 | 	cmps	local05, local03 wc
04c00     9C 00 90 3D |  if_ae	jmp	#LR__0387
04c04     65 01 00 FF 
04c08     E6 14 06 F6 | 	mov	arg02, ##@LR__4868
04c0c     12 13 02 F6 | 	mov	arg01, local04
04c10     98 84 B1 FD | 	call	#__system___string_cmp
04c14     00 FA 55 F2 | 	cmps	result1, #0 wc
04c18     18 00 90 CD |  if_b	jmp	#LR__0385
04c1c     65 01 00 FF 
04c20     E8 14 06 F6 | 	mov	arg02, ##@LR__4869
04c24     12 13 02 F6 | 	mov	arg01, local04
04c28     80 84 B1 FD | 	call	#__system___string_cmp
04c2c     01 FA 55 F2 | 	cmps	result1, #1 wc
04c30     6C 00 90 CD |  if_b	jmp	#LR__0387
04c34                 | LR__0385
04c34     65 01 00 FF 
04c38     EA 14 06 F6 | 	mov	arg02, ##@LR__4870
04c3c     12 13 02 F6 | 	mov	arg01, local04
04c40     68 84 B1 FD | 	call	#__system___string_cmp
04c44     00 FA 55 F2 | 	cmps	result1, #0 wc
04c48     18 00 90 CD |  if_b	jmp	#LR__0386
04c4c     65 01 00 FF 
04c50     EC 14 06 F6 | 	mov	arg02, ##@LR__4871
04c54     12 13 02 F6 | 	mov	arg01, local04
04c58     50 84 B1 FD | 	call	#__system___string_cmp
04c5c     01 FA 55 F2 | 	cmps	result1, #1 wc
04c60     3C 00 90 CD |  if_b	jmp	#LR__0387
04c64                 | LR__0386
04c64     65 01 00 FF 
04c68     EE 2A 06 F6 | 	mov	local07, ##@LR__4872
04c6c     12 13 02 F6 | 	mov	arg01, local04
04c70     15 15 02 F6 | 	mov	arg02, local07
04c74     34 84 B1 FD | 	call	#__system___string_cmp
04c78     00 FA 0D F2 | 	cmp	result1, #0 wz
04c7c     20 00 90 AD |  if_e	jmp	#LR__0387
04c80     65 01 00 FF 
04c84     F0 2C 06 F6 | 	mov	local08, ##@LR__4873
04c88     12 13 02 F6 | 	mov	arg01, local04
04c8c     16 15 02 F6 | 	mov	arg02, local08
04c90     18 84 B1 FD | 	call	#__system___string_cmp
04c94     FD 2E 0A F6 | 	mov	local09, result1 wz
04c98     00 FA 05 56 |  if_ne	mov	result1, #0
04c9c     00 01 90 5D |  if_ne	jmp	#LR__0393
04ca0                 | LR__0387
04ca0                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04ca0     11 27 0A F2 | 	cmp	local05, local03 wz
04ca4     EC 00 90 5D |  if_ne	jmp	#LR__0390
04ca8     65 01 00 FF 
04cac     F2 30 06 F6 | 	mov	local10, ##@LR__4874
04cb0     12 13 02 F6 | 	mov	arg01, local04
04cb4     18 15 02 F6 | 	mov	arg02, local10
04cb8     F0 83 B1 FD | 	call	#__system___string_cmp
04cbc     FD 32 02 F6 | 	mov	local11, result1
04cc0     00 32 56 F2 | 	cmps	local11, #0 wc
04cc4     1C 00 90 CD |  if_b	jmp	#LR__0388
04cc8     65 01 00 FF 
04ccc     F4 14 06 F6 | 	mov	arg02, ##@LR__4875
04cd0     12 13 02 F6 | 	mov	arg01, local04
04cd4     D4 83 B1 FD | 	call	#__system___string_cmp
04cd8     FD 30 02 F6 | 	mov	local10, result1
04cdc     01 30 56 F2 | 	cmps	local10, #1 wc
04ce0     B0 00 90 CD |  if_b	jmp	#LR__0390
04ce4                 | LR__0388
04ce4     65 01 00 FF 
04ce8     F6 14 06 F6 | 	mov	arg02, ##@LR__4876
04cec     12 13 02 F6 | 	mov	arg01, local04
04cf0     B8 83 B1 FD | 	call	#__system___string_cmp
04cf4     00 FA 55 F2 | 	cmps	result1, #0 wc
04cf8     1C 00 90 CD |  if_b	jmp	#LR__0389
04cfc     65 01 00 FF 
04d00     F8 2E 06 F6 | 	mov	local09, ##@LR__4877
04d04     12 13 02 F6 | 	mov	arg01, local04
04d08     17 15 02 F6 | 	mov	arg02, local09
04d0c     9C 83 B1 FD | 	call	#__system___string_cmp
04d10     01 FA 55 F2 | 	cmps	result1, #1 wc
04d14     7C 00 90 CD |  if_b	jmp	#LR__0390
04d18                 | LR__0389
04d18     65 01 00 FF 
04d1c     FA 2E 06 F6 | 	mov	local09, ##@LR__4878
04d20     12 13 02 F6 | 	mov	arg01, local04
04d24     17 15 02 F6 | 	mov	arg02, local09
04d28     80 83 B1 FD | 	call	#__system___string_cmp
04d2c     00 FA 4D F2 | 	cmps	result1, #0 wz
04d30     60 00 90 AD |  if_e	jmp	#LR__0390
04d34     65 01 00 FF 
04d38     FC 2C 06 F6 | 	mov	local08, ##@LR__4879
04d3c     12 13 02 F6 | 	mov	arg01, local04
04d40     16 15 02 F6 | 	mov	arg02, local08
04d44     64 83 B1 FD | 	call	#__system___string_cmp
04d48     FD 2E 0A F6 | 	mov	local09, result1 wz
04d4c     44 00 90 AD |  if_e	jmp	#LR__0390
04d50     65 01 00 FF 
04d54     FE 34 06 F6 | 	mov	local12, ##@LR__4880
04d58     1A 2D 02 F6 | 	mov	local08, local12
04d5c     12 13 02 F6 | 	mov	arg01, local04
04d60     16 15 02 F6 | 	mov	arg02, local08
04d64     44 83 B1 FD | 	call	#__system___string_cmp
04d68     FD 2A 0A F6 | 	mov	local07, result1 wz
04d6c     24 00 90 AD |  if_e	jmp	#LR__0390
04d70     65 01 00 FF 
04d74     00 37 06 F6 | 	mov	local13, ##@LR__4881
04d78     1B 35 02 F6 | 	mov	local12, local13
04d7c     12 13 02 F6 | 	mov	arg01, local04
04d80     1A 15 02 F6 | 	mov	arg02, local12
04d84     24 83 B1 FD | 	call	#__system___string_cmp
04d88     FD 2C 0A F6 | 	mov	local08, result1 wz
04d8c     00 FA 05 56 |  if_ne	mov	result1, #0
04d90     0C 00 90 5D |  if_ne	jmp	#LR__0393
04d94                 | LR__0390
04d94     01 26 06 F1 | 	add	local05, #1
04d98     44 FE 9F FD | 	jmp	#LR__0384
04d9c                 | LR__0391
04d9c                 | LR__0392
04d9c                 | ' return true
04d9c     01 FA 65 F6 | 	neg	result1, #1
04da0                 | LR__0393
04da0     A7 F0 03 F6 | 	mov	ptra, fp
04da4     B2 00 A0 FD | 	call	#popregs_
04da8                 | _isname_ret
04da8     2D 00 64 FD | 	ret
04dac                 | 
04dac                 | ' 
04dac                 | ' function isnum(s as string) as boolean
04dac                 | _isnum
04dac     0D 4A 05 F6 | 	mov	COUNT_, #13
04db0     A8 00 A0 FD | 	call	#pushregs_
04db4     09 1F 02 F6 | 	mov	local01, arg01
04db8     00 20 06 F6 | 	mov	local02, #0
04dbc     00 22 06 F6 | 	mov	local03, #0
04dc0     0F 13 02 F6 | 	mov	arg01, local01
04dc4     09 25 02 F6 | 	mov	local04, arg01
04dc8     97 06 48 FB | 	callpa	#(@LR__0401-@LR__0400)>>2,fcache_load_ptr_
04dcc                 | LR__0400
04dcc     12 FB C9 FA | 	rdbyte	result1, local04 wz
04dd0     01 24 06 51 |  if_ne	add	local04, #1
04dd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0400
04dd8                 | LR__0401
04dd8     09 25 82 F1 | 	sub	local04, arg01
04ddc     12 FB 01 F6 | 	mov	result1, local04
04de0     FD 26 0A F6 | 	mov	local05, result1 wz
04de4     00 FA 05 A6 |  if_e	mov	result1, #0
04de8     8C 02 90 AD |  if_e	jmp	#LR__0412
04dec     0F 13 02 F6 | 	mov	arg01, local01
04df0     01 14 06 F6 | 	mov	arg02, #1
04df4     01 16 06 F6 | 	mov	arg03, #1
04df8     E4 A3 B1 FD | 	call	#__system__Mid_S
04dfc     FD 28 02 F6 | 	mov	local06, result1
04e00                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04e00     65 01 00 FF 
04e04     02 15 06 F6 | 	mov	arg02, ##@LR__4882
04e08     14 13 02 F6 | 	mov	arg01, local06
04e0c     9C 82 B1 FD | 	call	#__system___string_cmp
04e10     00 FA 55 F2 | 	cmps	result1, #0 wc
04e14     18 00 90 CD |  if_b	jmp	#LR__0402
04e18     65 01 00 FF 
04e1c     04 15 06 F6 | 	mov	arg02, ##@LR__4883
04e20     14 13 02 F6 | 	mov	arg01, local06
04e24     84 82 B1 FD | 	call	#__system___string_cmp
04e28     01 FA 55 F2 | 	cmps	result1, #1 wc
04e2c     78 00 90 CD |  if_b	jmp	#LR__0403
04e30                 | LR__0402
04e30     65 01 00 FF 
04e34     06 15 06 F6 | 	mov	arg02, ##@LR__4884
04e38     14 13 02 F6 | 	mov	arg01, local06
04e3c     6C 82 B1 FD | 	call	#__system___string_cmp
04e40     00 FA 0D F2 | 	cmp	result1, #0 wz
04e44     60 00 90 AD |  if_e	jmp	#LR__0403
04e48     65 01 00 FF 
04e4c     08 2B 06 F6 | 	mov	local07, ##@LR__4885
04e50     14 13 02 F6 | 	mov	arg01, local06
04e54     15 15 02 F6 | 	mov	arg02, local07
04e58     50 82 B1 FD | 	call	#__system___string_cmp
04e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e60     44 00 90 AD |  if_e	jmp	#LR__0403
04e64     65 01 00 FF 
04e68     0A 2D 06 F6 | 	mov	local08, ##@LR__4886
04e6c     16 2B 02 F6 | 	mov	local07, local08
04e70     14 13 02 F6 | 	mov	arg01, local06
04e74     15 15 02 F6 | 	mov	arg02, local07
04e78     30 82 B1 FD | 	call	#__system___string_cmp
04e7c     00 FA 4D F2 | 	cmps	result1, #0 wz
04e80     24 00 90 AD |  if_e	jmp	#LR__0403
04e84     65 01 00 FF 
04e88     0C 2F 06 F6 | 	mov	local09, ##@LR__4887
04e8c     17 2D 02 F6 | 	mov	local08, local09
04e90     14 13 02 F6 | 	mov	arg01, local06
04e94     16 15 02 F6 | 	mov	arg02, local08
04e98     10 82 B1 FD | 	call	#__system___string_cmp
04e9c     FD 2A 0A F6 | 	mov	local07, result1 wz
04ea0     00 FA 05 56 |  if_ne	mov	result1, #0
04ea4     D0 01 90 5D |  if_ne	jmp	#LR__0412
04ea8                 | LR__0403
04ea8                 | ' if m$="." then ds=1
04ea8     65 01 00 FF 
04eac     0E 15 06 F6 | 	mov	arg02, ##@LR__4888
04eb0     14 13 02 F6 | 	mov	arg01, local06
04eb4     F4 81 B1 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     01 20 06 A6 |  if_e	mov	local02, #1
04ec0                 | ' if l>1 then 
04ec0     02 26 56 F2 | 	cmps	local05, #2 wc
04ec4     AC 01 90 CD |  if_b	jmp	#LR__0411
04ec8                 | '   for i=2 to l
04ec8     02 30 06 F6 | 	mov	local10, #2
04ecc     13 33 02 F6 | 	mov	local11, local05
04ed0     01 32 06 F1 | 	add	local11, #1
04ed4                 | LR__0404
04ed4     19 31 52 F2 | 	cmps	local10, local11 wc
04ed8     98 01 90 3D |  if_ae	jmp	#LR__0410
04edc     0F 13 02 F6 | 	mov	arg01, local01
04ee0     18 15 02 F6 | 	mov	arg02, local10
04ee4     01 16 06 F6 | 	mov	arg03, #1
04ee8     F4 A2 B1 FD | 	call	#__system__Mid_S
04eec     FD 28 02 F6 | 	mov	local06, result1
04ef0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
04ef0     65 01 00 FF 
04ef4     10 15 06 F6 | 	mov	arg02, ##@LR__4889
04ef8     14 13 02 F6 | 	mov	arg01, local06
04efc     AC 81 B1 FD | 	call	#__system___string_cmp
04f00     00 FA 55 F2 | 	cmps	result1, #0 wc
04f04     18 00 90 CD |  if_b	jmp	#LR__0405
04f08     65 01 00 FF 
04f0c     12 15 06 F6 | 	mov	arg02, ##@LR__4890
04f10     14 13 02 F6 | 	mov	arg01, local06
04f14     94 81 B1 FD | 	call	#__system___string_cmp
04f18     01 FA 55 F2 | 	cmps	result1, #1 wc
04f1c     98 00 90 CD |  if_b	jmp	#LR__0406
04f20                 | LR__0405
04f20     65 01 00 FF 
04f24     14 15 06 F6 | 	mov	arg02, ##@LR__4891
04f28     14 13 02 F6 | 	mov	arg01, local06
04f2c     7C 81 B1 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     80 00 90 AD |  if_e	jmp	#LR__0406
04f38     65 01 00 FF 
04f3c     16 2B 06 F6 | 	mov	local07, ##@LR__4892
04f40     14 13 02 F6 | 	mov	arg01, local06
04f44     15 15 02 F6 | 	mov	arg02, local07
04f48     60 81 B1 FD | 	call	#__system___string_cmp
04f4c     00 FA 4D F2 | 	cmps	result1, #0 wz
04f50     64 00 90 AD |  if_e	jmp	#LR__0406
04f54     65 01 00 FF 
04f58     18 2D 06 F6 | 	mov	local08, ##@LR__4893
04f5c     16 2B 02 F6 | 	mov	local07, local08
04f60     14 13 02 F6 | 	mov	arg01, local06
04f64     15 15 02 F6 | 	mov	arg02, local07
04f68     40 81 B1 FD | 	call	#__system___string_cmp
04f6c     FD 34 0A F6 | 	mov	local12, result1 wz
04f70     44 00 90 AD |  if_e	jmp	#LR__0406
04f74     65 01 00 FF 
04f78     1A 2F 06 F6 | 	mov	local09, ##@LR__4894
04f7c     17 2D 02 F6 | 	mov	local08, local09
04f80     14 13 02 F6 | 	mov	arg01, local06
04f84     16 15 02 F6 | 	mov	arg02, local08
04f88     20 81 B1 FD | 	call	#__system___string_cmp
04f8c     FD 2A 0A F6 | 	mov	local07, result1 wz
04f90     24 00 90 AD |  if_e	jmp	#LR__0406
04f94     65 01 00 FF 
04f98     1C 37 06 F6 | 	mov	local13, ##@LR__4895
04f9c     1B 2F 02 F6 | 	mov	local09, local13
04fa0     14 13 02 F6 | 	mov	arg01, local06
04fa4     17 15 02 F6 | 	mov	arg02, local09
04fa8     00 81 B1 FD | 	call	#__system___string_cmp
04fac     FD 2C 0A F6 | 	mov	local08, result1 wz
04fb0     00 FA 05 56 |  if_ne	mov	result1, #0
04fb4     C0 00 90 5D |  if_ne	jmp	#LR__0412
04fb8                 | LR__0406
04fb8                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
04fb8     65 01 00 FF 
04fbc     1E 15 06 F6 | 	mov	arg02, ##@LR__4896
04fc0     14 13 02 F6 | 	mov	arg01, local06
04fc4     E4 80 B1 FD | 	call	#__system___string_cmp
04fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fcc     38 00 90 5D |  if_ne	jmp	#LR__0407
04fd0     18 15 02 F6 | 	mov	arg02, local10
04fd4     01 14 86 F1 | 	sub	arg02, #1
04fd8     0F 13 02 F6 | 	mov	arg01, local01
04fdc     01 16 06 F6 | 	mov	arg03, #1
04fe0     FC A1 B1 FD | 	call	#__system__Mid_S
04fe4     FD 12 02 F6 | 	mov	arg01, result1
04fe8     EC A3 B1 FD | 	call	#__system__LCase_S
04fec     FD 12 02 F6 | 	mov	arg01, result1
04ff0     65 01 00 FF 
04ff4     20 15 06 F6 | 	mov	arg02, ##@LR__4897
04ff8     B0 80 B1 FD | 	call	#__system___string_cmp
04ffc     00 FA 0D F2 | 	cmp	result1, #0 wz
05000     00 FA 05 56 |  if_ne	mov	result1, #0
05004     70 00 90 5D |  if_ne	jmp	#LR__0412
05008                 | LR__0407
05008                 | '     if m$="." then ds+=1: if ds>1 then return false
05008     65 01 00 FF 
0500c     22 15 06 F6 | 	mov	arg02, ##@LR__4898
05010     14 13 02 F6 | 	mov	arg01, local06
05014     94 80 B1 FD | 	call	#__system___string_cmp
05018     00 FA 0D F2 | 	cmp	result1, #0 wz
0501c     01 20 06 A1 |  if_e	add	local02, #1
05020     02 20 56 A2 |  if_e	cmps	local02, #2 wc
05024     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
05028     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0412
0502c                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
0502c     65 01 00 FF 
05030     24 15 06 F6 | 	mov	arg02, ##@LR__4899
05034     14 13 02 F6 | 	mov	arg01, local06
05038     70 80 B1 FD | 	call	#__system___string_cmp
0503c     00 FA 4D F2 | 	cmps	result1, #0 wz
05040     18 00 90 AD |  if_e	jmp	#LR__0408
05044     65 01 00 FF 
05048     26 15 06 F6 | 	mov	arg02, ##@LR__4900
0504c     14 13 02 F6 | 	mov	arg01, local06
05050     58 80 B1 FD | 	call	#__system___string_cmp
05054     00 FA 4D F2 | 	cmps	result1, #0 wz
05058     10 00 90 5D |  if_ne	jmp	#LR__0409
0505c                 | LR__0408
0505c     01 22 06 F1 | 	add	local03, #1
05060     02 22 56 F2 | 	cmps	local03, #2 wc
05064     00 FA 05 36 |  if_ae	mov	result1, #0
05068     0C 00 90 3D |  if_ae	jmp	#LR__0412
0506c                 | LR__0409
0506c     01 30 06 F1 | 	add	local10, #1
05070     60 FE 9F FD | 	jmp	#LR__0404
05074                 | LR__0410
05074                 | LR__0411
05074                 | ' return true
05074     01 FA 65 F6 | 	neg	result1, #1
05078                 | LR__0412
05078     A7 F0 03 F6 | 	mov	ptra, fp
0507c     B2 00 A0 FD | 	call	#popregs_
05080                 | _isnum_ret
05080     2D 00 64 FD | 	ret
05084                 | 
05084                 | '   
05084                 | ' function isint(s as string) as boolean
05084                 | _isint
05084     05 4A 05 F6 | 	mov	COUNT_, #5
05088     A8 00 A0 FD | 	call	#pushregs_
0508c     09 1F 02 F6 | 	mov	local01, arg01
05090     09 21 02 F6 | 	mov	local02, arg01
05094     97 06 48 FB | 	callpa	#(@LR__0421-@LR__0420)>>2,fcache_load_ptr_
05098                 | LR__0420
05098     10 FB C9 FA | 	rdbyte	result1, local02 wz
0509c     01 20 06 51 |  if_ne	add	local02, #1
050a0     F4 FF 9F 5D |  if_ne	jmp	#LR__0420
050a4                 | LR__0421
050a4     09 21 82 F1 | 	sub	local02, arg01
050a8     10 FB 01 F6 | 	mov	result1, local02
050ac     FD 20 0A F6 | 	mov	local02, result1 wz
050b0     00 FA 05 A6 |  if_e	mov	result1, #0
050b4     18 01 90 AD |  if_e	jmp	#LR__0429
050b8     0F 13 02 F6 | 	mov	arg01, local01
050bc     01 14 06 F6 | 	mov	arg02, #1
050c0     01 16 06 F6 | 	mov	arg03, #1
050c4     18 A1 B1 FD | 	call	#__system__Mid_S
050c8     FD 22 02 F6 | 	mov	local03, result1
050cc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
050cc     65 01 00 FF 
050d0     28 15 06 F6 | 	mov	arg02, ##@LR__4901
050d4     11 13 02 F6 | 	mov	arg01, local03
050d8     D0 7F B1 FD | 	call	#__system___string_cmp
050dc     00 FA 55 F2 | 	cmps	result1, #0 wc
050e0     18 00 90 CD |  if_b	jmp	#LR__0422
050e4     65 01 00 FF 
050e8     2A 15 06 F6 | 	mov	arg02, ##@LR__4902
050ec     11 13 02 F6 | 	mov	arg01, local03
050f0     B8 7F B1 FD | 	call	#__system___string_cmp
050f4     01 FA 55 F2 | 	cmps	result1, #1 wc
050f8     4C 00 90 CD |  if_b	jmp	#LR__0423
050fc                 | LR__0422
050fc     65 01 00 FF 
05100     2C 15 06 F6 | 	mov	arg02, ##@LR__4903
05104     11 13 02 F6 | 	mov	arg01, local03
05108     A0 7F B1 FD | 	call	#__system___string_cmp
0510c     00 FA 0D F2 | 	cmp	result1, #0 wz
05110     34 00 90 AD |  if_e	jmp	#LR__0423
05114     65 01 00 FF 
05118     2E 15 06 F6 | 	mov	arg02, ##@LR__4904
0511c     11 13 02 F6 | 	mov	arg01, local03
05120     88 7F B1 FD | 	call	#__system___string_cmp
05124     00 FA 0D F2 | 	cmp	result1, #0 wz
05128     1C 00 90 AD |  if_e	jmp	#LR__0423
0512c     65 01 00 FF 
05130     30 15 06 F6 | 	mov	arg02, ##@LR__4905
05134     11 13 02 F6 | 	mov	arg01, local03
05138     70 7F B1 FD | 	call	#__system___string_cmp
0513c     00 FA 0D F2 | 	cmp	result1, #0 wz
05140     00 FA 05 56 |  if_ne	mov	result1, #0
05144     88 00 90 5D |  if_ne	jmp	#LR__0429
05148                 | LR__0423
05148                 | ' 
05148                 | ' if l>1 then 
05148     02 20 56 F2 | 	cmps	local02, #2 wc
0514c     7C 00 90 CD |  if_b	jmp	#LR__0428
05150                 | '   for i=2 to l
05150     02 24 06 F6 | 	mov	local04, #2
05154     10 27 02 F6 | 	mov	local05, local02
05158     01 26 06 F1 | 	add	local05, #1
0515c                 | LR__0424
0515c     13 25 52 F2 | 	cmps	local04, local05 wc
05160     68 00 90 3D |  if_ae	jmp	#LR__0427
05164     0F 13 02 F6 | 	mov	arg01, local01
05168     12 15 02 F6 | 	mov	arg02, local04
0516c     01 16 06 F6 | 	mov	arg03, #1
05170     6C A0 B1 FD | 	call	#__system__Mid_S
05174     FD 22 02 F6 | 	mov	local03, result1
05178                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05178     65 01 00 FF 
0517c     32 15 06 F6 | 	mov	arg02, ##@LR__4906
05180     11 13 02 F6 | 	mov	arg01, local03
05184     24 7F B1 FD | 	call	#__system___string_cmp
05188     00 FA 55 F2 | 	cmps	result1, #0 wc
0518c     18 00 90 CD |  if_b	jmp	#LR__0425
05190     65 01 00 FF 
05194     34 15 06 F6 | 	mov	arg02, ##@LR__4907
05198     11 13 02 F6 | 	mov	arg01, local03
0519c     0C 7F B1 FD | 	call	#__system___string_cmp
051a0     01 FA 55 F2 | 	cmps	result1, #1 wc
051a4     1C 00 90 CD |  if_b	jmp	#LR__0426
051a8                 | LR__0425
051a8     65 01 00 FF 
051ac     36 15 06 F6 | 	mov	arg02, ##@LR__4908
051b0     11 13 02 F6 | 	mov	arg01, local03
051b4     F4 7E B1 FD | 	call	#__system___string_cmp
051b8     00 FA 0D F2 | 	cmp	result1, #0 wz
051bc     00 FA 05 56 |  if_ne	mov	result1, #0
051c0     0C 00 90 5D |  if_ne	jmp	#LR__0429
051c4                 | LR__0426
051c4     01 24 06 F1 | 	add	local04, #1
051c8     90 FF 9F FD | 	jmp	#LR__0424
051cc                 | LR__0427
051cc                 | LR__0428
051cc                 | ' return true
051cc     01 FA 65 F6 | 	neg	result1, #1
051d0                 | LR__0429
051d0     A7 F0 03 F6 | 	mov	ptra, fp
051d4     B2 00 A0 FD | 	call	#popregs_
051d8                 | _isint_ret
051d8     2D 00 64 FD | 	ret
051dc                 | 
051dc                 | ' 
051dc                 | ' function isdec(s as string) as boolean
051dc                 | _isdec
051dc     05 4A 05 F6 | 	mov	COUNT_, #5
051e0     A8 00 A0 FD | 	call	#pushregs_
051e4     09 1F 02 F6 | 	mov	local01, arg01
051e8     09 21 02 F6 | 	mov	local02, arg01
051ec     97 06 48 FB | 	callpa	#(@LR__0431-@LR__0430)>>2,fcache_load_ptr_
051f0                 | LR__0430
051f0     10 FB C9 FA | 	rdbyte	result1, local02 wz
051f4     01 20 06 51 |  if_ne	add	local02, #1
051f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0430
051fc                 | LR__0431
051fc     09 21 82 F1 | 	sub	local02, arg01
05200     10 FB 01 F6 | 	mov	result1, local02
05204     FD 20 0A F6 | 	mov	local02, result1 wz
05208     00 FA 05 A6 |  if_e	mov	result1, #0
0520c     80 00 90 AD |  if_e	jmp	#LR__0436
05210                 | ' for i=1 to l
05210     01 22 06 F6 | 	mov	local03, #1
05214     10 25 02 F6 | 	mov	local04, local02
05218     01 24 06 F1 | 	add	local04, #1
0521c                 | LR__0432
0521c     12 23 52 F2 | 	cmps	local03, local04 wc
05220     68 00 90 3D |  if_ae	jmp	#LR__0435
05224     0F 13 02 F6 | 	mov	arg01, local01
05228     11 15 02 F6 | 	mov	arg02, local03
0522c     01 16 06 F6 | 	mov	arg03, #1
05230     AC 9F B1 FD | 	call	#__system__Mid_S
05234     FD 26 02 F6 | 	mov	local05, result1
05238                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05238     65 01 00 FF 
0523c     38 15 06 F6 | 	mov	arg02, ##@LR__4909
05240     13 13 02 F6 | 	mov	arg01, local05
05244     64 7E B1 FD | 	call	#__system___string_cmp
05248     00 FA 55 F2 | 	cmps	result1, #0 wc
0524c     18 00 90 CD |  if_b	jmp	#LR__0433
05250     65 01 00 FF 
05254     3A 15 06 F6 | 	mov	arg02, ##@LR__4910
05258     13 13 02 F6 | 	mov	arg01, local05
0525c     4C 7E B1 FD | 	call	#__system___string_cmp
05260     01 FA 55 F2 | 	cmps	result1, #1 wc
05264     1C 00 90 CD |  if_b	jmp	#LR__0434
05268                 | LR__0433
05268     65 01 00 FF 
0526c     3C 15 06 F6 | 	mov	arg02, ##@LR__4911
05270     13 13 02 F6 | 	mov	arg01, local05
05274     34 7E B1 FD | 	call	#__system___string_cmp
05278     00 FA 0D F2 | 	cmp	result1, #0 wz
0527c     00 FA 05 56 |  if_ne	mov	result1, #0
05280     0C 00 90 5D |  if_ne	jmp	#LR__0436
05284                 | LR__0434
05284     01 22 06 F1 | 	add	local03, #1
05288     90 FF 9F FD | 	jmp	#LR__0432
0528c                 | LR__0435
0528c                 | ' return true
0528c     01 FA 65 F6 | 	neg	result1, #1
05290                 | LR__0436
05290     A7 F0 03 F6 | 	mov	ptra, fp
05294     B2 00 A0 FD | 	call	#popregs_
05298                 | _isdec_ret
05298     2D 00 64 FD | 	ret
0529c                 | 
0529c                 | ' 
0529c                 | ' function isstring(s as string) as boolean
0529c                 | _isstring
0529c     01 4A 05 F6 | 	mov	COUNT_, #1
052a0     A8 00 A0 FD | 	call	#pushregs_
052a4                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
052a4     09 1F 02 F6 | 	mov	local01, arg01
052a8     01 14 06 F6 | 	mov	arg02, #1
052ac     18 9E B1 FD | 	call	#__system__Left_S
052b0     FD 12 02 F6 | 	mov	arg01, result1
052b4     65 01 00 FF 
052b8     3E 15 06 F6 | 	mov	arg02, ##@LR__4912
052bc     EC 7D B1 FD | 	call	#__system___string_cmp
052c0     00 FA 4D F2 | 	cmps	result1, #0 wz
052c4     28 00 90 5D |  if_ne	jmp	#LR__0440
052c8     0F 13 02 F6 | 	mov	arg01, local01
052cc     01 14 06 F6 | 	mov	arg02, #1
052d0     7C 9E B1 FD | 	call	#__system__Right_S
052d4     FD 12 02 F6 | 	mov	arg01, result1
052d8     65 01 00 FF 
052dc     40 15 06 F6 | 	mov	arg02, ##@LR__4913
052e0     C8 7D B1 FD | 	call	#__system___string_cmp
052e4     00 FA 4D F2 | 	cmps	result1, #0 wz
052e8     01 FA 65 A6 |  if_e	neg	result1, #1
052ec     04 00 90 AD |  if_e	jmp	#LR__0441
052f0                 | LR__0440
052f0     00 FA 05 F6 | 	mov	result1, #0
052f4                 | LR__0441
052f4     A7 F0 03 F6 | 	mov	ptra, fp
052f8     B2 00 A0 FD | 	call	#popregs_
052fc                 | _isstring_ret
052fc     2D 00 64 FD | 	ret
05300                 | 
05300                 | ' 
05300                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
05300                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05300                 | ' 
05300                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05300                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
05300                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05300                 | ' 
05300                 | ' '----- delete a line from a program
05300                 | ' 
05300                 | ' function deleteline(aline as ulong) as integer
05300                 | _deleteline
05300     03 4A 05 F6 | 	mov	COUNT_, #3
05304     A8 00 A0 FD | 	call	#pushregs_
05308     2C F0 07 F1 | 	add	ptra, #44
0530c     04 4E 05 F1 | 	add	fp, #4
05310     A7 12 62 FC | 	wrlong	arg01, fp
05314     6A 00 00 FF 
05318     74 E4 05 F1 | 	add	objptr, ##54388
0531c     F2 1E 02 FB | 	rdlong	local01, objptr
05320     0C 4E 05 F1 | 	add	fp, #12
05324     A7 1E 62 FC | 	wrlong	local01, fp
05328     10 4E 85 F1 | 	sub	fp, #16
0532c                 | ' 
0532c                 | ' 
0532c                 | ' searchptr=programstart
0532c                 | ' 
0532c                 | ' do
0532c     5E 00 00 FF 
05330     A8 E5 85 F1 | 	sub	objptr, ##48552
05334                 | LR__0450
05334     14 4E 05 F1 | 	add	fp, #20
05338     A7 12 02 F6 | 	mov	arg01, fp
0533c     04 4E 85 F1 | 	sub	fp, #4
05340     A7 14 02 FB | 	rdlong	arg02, fp
05344     10 4E 85 F1 | 	sub	fp, #16
05348     18 16 06 F6 | 	mov	arg03, #24
0534c     30 71 B1 FD | 	call	#_psram_spin2_read1
05350     10 4E 05 F1 | 	add	fp, #16
05354     A7 1E 02 FB | 	rdlong	local01, fp
05358     08 4E 85 F1 | 	sub	fp, #8
0535c     A7 1E 62 FC | 	wrlong	local01, fp
05360     20 4E 05 F1 | 	add	fp, #32
05364     A7 1E 02 FB | 	rdlong	local01, fp
05368     18 4E 85 F1 | 	sub	fp, #24
0536c     A7 1E 62 FC | 	wrlong	local01, fp
05370     04 4E 05 F1 | 	add	fp, #4
05374     A7 1E 02 FB | 	rdlong	local01, fp
05378     10 4E 85 F1 | 	sub	fp, #16
0537c     A7 16 02 FB | 	rdlong	arg03, fp
05380     04 4E 85 F1 | 	sub	fp, #4
05384     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05388     28 4E 05 C1 |  if_b	add	fp, #40
0538c     A7 20 02 CB |  if_b	rdlong	local02, fp
05390     28 4E 85 C1 |  if_b	sub	fp, #40
05394     FF FF 3F CF 
05398     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0539c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0450
053a0     0B 00 00 FF 
053a4     CC E4 85 F1 | 	sub	objptr, ##5836
053a8                 | ' 
053a8                 | ' 
053a8                 | ' if header(0)<>aline then return -1
053a8     14 4E 05 F1 | 	add	fp, #20
053ac     A7 1E 02 FB | 	rdlong	local01, fp
053b0     10 4E 85 F1 | 	sub	fp, #16
053b4     A7 22 02 FB | 	rdlong	local03, fp
053b8     04 4E 85 F1 | 	sub	fp, #4
053bc     11 1F 0A F2 | 	cmp	local01, local03 wz
053c0     01 FA 65 56 |  if_ne	neg	result1, #1
053c4     C8 02 90 5D |  if_ne	jmp	#LR__0456
053c8     08 4E 05 F1 | 	add	fp, #8
053cc     A7 12 02 FB | 	rdlong	arg01, fp
053d0     08 4E 85 F1 | 	sub	fp, #8
053d4     01 14 66 F6 | 	neg	arg02, #1
053d8     B0 3D B1 FD | 	call	#_pslpoke
053dc                 | ' 
053dc                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
053dc                 | ' 
053dc                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
053dc     28 4E 05 F1 | 	add	fp, #40
053e0     A7 1E 02 FB | 	rdlong	local01, fp
053e4     28 4E 85 F1 | 	sub	fp, #40
053e8     FF FF 3F FF 
053ec     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
053f0     24 4E 05 A1 |  if_e	add	fp, #36
053f4     A7 22 02 AB |  if_e	rdlong	local03, fp
053f8     24 4E 85 A1 |  if_e	sub	fp, #36
053fc     FF FF 7F AF 
05400     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
05404     78 00 90 5D |  if_ne	jmp	#LR__0451
05408     6A 00 00 FF 
0540c     74 E4 05 F1 | 	add	objptr, ##54388
05410     F2 00 68 FC | 	wrlong	#0, objptr
05414     07 00 00 FF 
05418     28 E4 85 F1 | 	sub	objptr, ##3624
0541c     F2 00 68 FC | 	wrlong	#0, objptr
05420     07 00 00 FF 
05424     2C E4 05 F1 | 	add	objptr, ##3628
05428     F2 00 68 FC | 	wrlong	#0, objptr
0542c     04 E4 05 F1 | 	add	objptr, #4
05430     FF FF FF FF 
05434     F2 FE 6B FC | 	wrlong	##-1, objptr
05438     6A 00 00 FF 
0543c     7C E4 85 F1 | 	sub	objptr, ##54396
05440     00 12 06 F6 | 	mov	arg01, #0
05444     01 14 66 F6 | 	neg	arg02, #1
05448     40 3D B1 FD | 	call	#_pslpoke
0544c     10 12 06 F6 | 	mov	arg01, #16
05450     01 14 66 F6 | 	neg	arg02, #1
05454     34 3D B1 FD | 	call	#_pslpoke
05458     14 12 06 F6 | 	mov	arg01, #20
0545c     1E 14 CE F9 | 	bmask	arg02, #30
05460     28 3D B1 FD | 	call	#_pslpoke
05464     79 00 00 FF 
05468     A0 E5 05 F1 | 	add	objptr, ##62368
0546c     F2 00 68 FC | 	wrlong	#0, objptr
05470     04 E4 05 F1 | 	add	objptr, #4
05474     F2 00 68 FC | 	wrlong	#0, objptr
05478     79 00 00 FF 
0547c     A4 E5 85 F1 | 	sub	objptr, ##62372
05480                 | LR__0451
05480                 | ' 
05480                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
05480     28 4E 05 F1 | 	add	fp, #40
05484     A7 1E 02 FB | 	rdlong	local01, fp
05488     28 4E 85 F1 | 	sub	fp, #40
0548c     FF FF 3F FF 
05490     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05494     74 00 90 5D |  if_ne	jmp	#LR__0452
05498     24 4E 05 F1 | 	add	fp, #36
0549c     A7 22 02 FB | 	rdlong	local03, fp
054a0     24 4E 85 F1 | 	sub	fp, #36
054a4     FF FF 7F FF 
054a8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
054ac     5C 00 90 AD |  if_e	jmp	#LR__0452
054b0     24 4E 05 F1 | 	add	fp, #36
054b4     A7 12 02 FB | 	rdlong	arg01, fp
054b8     24 4E 85 F1 | 	sub	fp, #36
054bc     14 12 06 F1 | 	add	arg01, #20
054c0     1E 14 CE F9 | 	bmask	arg02, #30
054c4     C4 3C B1 FD | 	call	#_pslpoke
054c8     24 4E 05 F1 | 	add	fp, #36
054cc     A7 1E 02 FB | 	rdlong	local01, fp
054d0     6A 00 00 FF 
054d4     7C E4 05 F1 | 	add	objptr, ##54396
054d8     F2 1E 62 FC | 	wrlong	local01, objptr
054dc     6A 00 00 FF 
054e0     7C E4 85 F1 | 	sub	objptr, ##54396
054e4     A7 12 02 FB | 	rdlong	arg01, fp
054e8     24 4E 85 F1 | 	sub	fp, #36
054ec     CC 3D B1 FD | 	call	#_pslpeek
054f0     6A 00 00 FF 
054f4     78 E4 05 F1 | 	add	objptr, ##54392
054f8     F2 FA 61 FC | 	wrlong	result1, objptr
054fc     6A 00 00 FF 
05500     78 E4 85 F1 | 	sub	objptr, ##54392
05504                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
05504                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
05504                 | '   lastline=pslpeek(header(4))
05504                 | '   return 0
05504     00 FA 05 F6 | 	mov	result1, #0
05508     84 01 90 FD | 	jmp	#LR__0456
0550c                 | LR__0452
0550c                 | ' 
0550c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
0550c     28 4E 05 F1 | 	add	fp, #40
05510     A7 1E 02 FB | 	rdlong	local01, fp
05514     28 4E 85 F1 | 	sub	fp, #40
05518     FF FF 3F FF 
0551c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05520     58 00 90 AD |  if_e	jmp	#LR__0453
05524     24 4E 05 F1 | 	add	fp, #36
05528     A7 22 02 FB | 	rdlong	local03, fp
0552c     24 4E 85 F1 | 	sub	fp, #36
05530     FF FF 7F FF 
05534     FF 23 0E F2 | 	cmp	local03, ##-1 wz
05538     40 00 90 5D |  if_ne	jmp	#LR__0453
0553c     28 4E 05 F1 | 	add	fp, #40
05540     A7 12 02 FB | 	rdlong	arg01, fp
05544     28 4E 85 F1 | 	sub	fp, #40
05548     10 12 06 F1 | 	add	arg01, #16
0554c     01 14 66 F6 | 	neg	arg02, #1
05550     38 3C B1 FD | 	call	#_pslpoke
05554     28 4E 05 F1 | 	add	fp, #40
05558     A7 1E 02 FB | 	rdlong	local01, fp
0555c     28 4E 85 F1 | 	sub	fp, #40
05560     6A 00 00 FF 
05564     74 E4 05 F1 | 	add	objptr, ##54388
05568     F2 1E 62 FC | 	wrlong	local01, objptr
0556c     6A 00 00 FF 
05570     74 E4 85 F1 | 	sub	objptr, ##54388
05574                 | ' '   print "deleted first line"
05574                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
05574                 | '   programstart=header(5) ' adjust the program start to point on the first new line
05574                 | '   return 0
05574     00 FA 05 F6 | 	mov	result1, #0
05578     14 01 90 FD | 	jmp	#LR__0456
0557c                 | LR__0453
0557c                 | ' 
0557c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
0557c     28 4E 05 F1 | 	add	fp, #40
05580     A7 1E 02 FB | 	rdlong	local01, fp
05584     28 4E 85 F1 | 	sub	fp, #40
05588     FF FF 3F FF 
0558c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05590     24 4E 05 51 |  if_ne	add	fp, #36
05594     A7 22 02 5B |  if_ne	rdlong	local03, fp
05598     24 4E 85 51 |  if_ne	sub	fp, #36
0559c     FF FF 7F 5F 
055a0     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
055a4     40 00 90 AD |  if_e	jmp	#LR__0454
055a8     28 4E 05 F1 | 	add	fp, #40
055ac     A7 12 02 FB | 	rdlong	arg01, fp
055b0     10 12 06 F1 | 	add	arg01, #16
055b4     04 4E 85 F1 | 	sub	fp, #4
055b8     A7 14 02 FB | 	rdlong	arg02, fp
055bc     24 4E 85 F1 | 	sub	fp, #36
055c0     C8 3B B1 FD | 	call	#_pslpoke
055c4     24 4E 05 F1 | 	add	fp, #36
055c8     A7 12 02 FB | 	rdlong	arg01, fp
055cc     14 12 06 F1 | 	add	arg01, #20
055d0     04 4E 05 F1 | 	add	fp, #4
055d4     A7 14 02 FB | 	rdlong	arg02, fp
055d8     28 4E 85 F1 | 	sub	fp, #40
055dc     AC 3B B1 FD | 	call	#_pslpoke
055e0                 | '    pslpoke(header(5)+16,header(4))  
055e0                 | '    pslpoke(header(4)+20, header(5))
055e0                 | '    return 0
055e0     00 FA 05 F6 | 	mov	result1, #0
055e4     A8 00 90 FD | 	jmp	#LR__0456
055e8                 | LR__0454
055e8     10 4E 05 F1 | 	add	fp, #16
055ec     A7 1E 02 FB | 	rdlong	local01, fp
055f0     08 4E 85 F1 | 	sub	fp, #8
055f4     A7 1E 62 FC | 	wrlong	local01, fp
055f8     6A 00 00 FF 
055fc     74 E4 05 F1 | 	add	objptr, ##54388
05600     F2 1E 02 FB | 	rdlong	local01, objptr
05604     08 4E 05 F1 | 	add	fp, #8
05608     A7 1E 62 FC | 	wrlong	local01, fp
0560c     10 4E 85 F1 | 	sub	fp, #16
05610                 | ' 
05610                 | ' 
05610                 | ' 
05610                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
05610                 | ' 
05610                 | ' lineptr2=searchptr
05610                 | ' searchptr=programstart
05610                 | ' 
05610                 | ' do
05610     5E 00 00 FF 
05614     A8 E5 85 F1 | 	sub	objptr, ##48552
05618                 | LR__0455
05618     14 4E 05 F1 | 	add	fp, #20
0561c     A7 12 02 F6 | 	mov	arg01, fp
05620     04 4E 85 F1 | 	sub	fp, #4
05624     A7 14 02 FB | 	rdlong	arg02, fp
05628     10 4E 85 F1 | 	sub	fp, #16
0562c     18 16 06 F6 | 	mov	arg03, #24
05630     4C 6E B1 FD | 	call	#_psram_spin2_read1
05634     10 4E 05 F1 | 	add	fp, #16
05638     A7 1E 02 FB | 	rdlong	local01, fp
0563c     08 4E 85 F1 | 	sub	fp, #8
05640     A7 1E 62 FC | 	wrlong	local01, fp
05644     20 4E 05 F1 | 	add	fp, #32
05648     A7 1E 02 FB | 	rdlong	local01, fp
0564c     18 4E 85 F1 | 	sub	fp, #24
05650     A7 1E 62 FC | 	wrlong	local01, fp
05654     04 4E 05 F1 | 	add	fp, #4
05658     A7 1E 02 FB | 	rdlong	local01, fp
0565c     10 4E 85 F1 | 	sub	fp, #16
05660     A7 22 02 FB | 	rdlong	local03, fp
05664     04 4E 85 F1 | 	sub	fp, #4
05668     11 1F 12 F2 | 	cmp	local01, local03 wc
0566c     28 4E 05 C1 |  if_b	add	fp, #40
05670     A7 20 02 CB |  if_b	rdlong	local02, fp
05674     28 4E 85 C1 |  if_b	sub	fp, #40
05678     FF FF 3F CF 
0567c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05680     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0455
05684     0B 00 00 FF 
05688     CC E4 85 F1 | 	sub	objptr, ##5836
0568c     00 FA 05 F6 | 	mov	result1, #0
05690                 | LR__0456
05690     A7 F0 03 F6 | 	mov	ptra, fp
05694     B2 00 A0 FD | 	call	#popregs_
05698                 | _deleteline_ret
05698     2D 00 64 FD | 	ret
0569c                 | 
0569c                 | ' 
0569c                 | ' sub save_line
0569c                 | _save_line
0569c     03 4A 05 F6 | 	mov	COUNT_, #3
056a0     A8 00 A0 FD | 	call	#pushregs_
056a4     6A 00 00 FF 
056a8     6C E4 05 F1 | 	add	objptr, ##54380
056ac     F2 16 02 FB | 	rdlong	arg03, objptr
056b0     01 16 06 F1 | 	add	arg03, #1
056b4     05 00 00 FF 
056b8     18 E4 85 F1 | 	sub	objptr, ##2584
056bc     F2 14 02 FB | 	rdlong	arg02, objptr
056c0     0B 15 02 FD | 	qmul	arg02, arg03
056c4     0E 00 00 FF 
056c8     44 E4 85 F1 | 	sub	objptr, ##7236
056cc     F2 12 02 FB | 	rdlong	arg01, objptr
056d0     57 00 00 FF 
056d4     10 E4 85 F1 | 	sub	objptr, ##44560
056d8     09 1F 02 F6 | 	mov	local01, arg01
056dc     18 20 62 FD | 	getqx	local02
056e0     97 06 48 FB | 	callpa	#(@LR__0461-@LR__0460)>>2,fcache_load_ptr_
056e4                 | LR__0460
056e4     0F FB C9 FA | 	rdbyte	result1, local01 wz
056e8     01 1E 06 51 |  if_ne	add	local01, #1
056ec     F4 FF 9F 5D |  if_ne	jmp	#LR__0460
056f0                 | LR__0461
056f0     09 1F 82 F1 | 	sub	local01, arg01
056f4     03 1E CE F7 | 	test	local01, #3 wz
056f8     02 1E 46 50 |  if_ne	shr	local01, #2
056fc     01 1E 06 51 |  if_ne	add	local01, #1
05700     02 1E 66 50 |  if_ne	shl	local01, #2
05704     10 23 02 F6 | 	mov	local03, local02
05708     0F 23 02 F1 | 	add	local03, local01
0570c     63 00 00 FF 
05710     4C E4 05 F1 | 	add	objptr, ##50764
05714     F2 16 02 FB | 	rdlong	arg03, objptr
05718     10 17 02 F1 | 	add	arg03, local02
0571c     04 00 00 FF 
05720     28 E4 05 F1 | 	add	objptr, ##2088
05724     F2 16 62 FC | 	wrlong	arg03, objptr
05728     04 E4 05 F1 | 	add	objptr, #4
0572c     F2 1E 62 FC | 	wrlong	local01, objptr
05730     0C E4 85 F1 | 	sub	objptr, #12
05734     F2 12 02 F6 | 	mov	arg01, objptr
05738     04 00 00 FF 
0573c     20 E4 85 F1 | 	sub	objptr, ##2080
05740     F2 14 02 FB | 	rdlong	arg02, objptr
05744     10 17 02 F6 | 	mov	arg03, local02
05748     57 00 00 FF 
0574c     80 E5 85 F1 | 	sub	objptr, ##44928
05750     C8 6D B1 FD | 	call	#_psram_spin2_write
05754     4B 00 00 FF 
05758     44 E5 05 F1 | 	add	objptr, ##38724
0575c     F2 12 02 FB | 	rdlong	arg01, objptr
05760     0C 00 00 FF 
05764     3C E4 05 F1 | 	add	objptr, ##6204
05768     F2 14 02 FB | 	rdlong	arg02, objptr
0576c     10 15 02 F1 | 	add	arg02, local02
05770     0F 17 02 F6 | 	mov	arg03, local01
05774     57 00 00 FF 
05778     80 E5 85 F1 | 	sub	objptr, ##44928
0577c     9C 6D B1 FD | 	call	#_psram_spin2_write
05780     57 00 00 FF 
05784     80 E5 05 F1 | 	add	objptr, ##44928
05788     F2 1E 02 FB | 	rdlong	local01, objptr
0578c     11 1F 02 F1 | 	add	local01, local03
05790     F2 1E 62 FC | 	wrlong	local01, objptr
05794     63 00 00 FF 
05798     4C E4 85 F1 | 	sub	objptr, ##50764
0579c     A7 F0 03 F6 | 	mov	ptra, fp
057a0     B2 00 A0 FD | 	call	#popregs_
057a4                 | _save_line_ret
057a4     2D 00 64 FD | 	ret
057a8                 | 
057a8                 | ' 
057a8                 | ' 
057a8                 | ' function insertline(aline as ulong) as integer
057a8                 | _insertline
057a8     02 4A 05 F6 | 	mov	COUNT_, #2
057ac     A8 00 A0 FD | 	call	#pushregs_
057b0     28 F0 07 F1 | 	add	ptra, #40
057b4     04 4E 05 F1 | 	add	fp, #4
057b8     A7 12 62 FC | 	wrlong	arg01, fp
057bc     6A 00 00 FF 
057c0     74 E4 05 F1 | 	add	objptr, ##54388
057c4     F2 1E 02 FB | 	rdlong	local01, objptr
057c8     04 4E 05 F1 | 	add	fp, #4
057cc     A7 1E 62 FC | 	wrlong	local01, fp
057d0     08 4E 85 F1 | 	sub	fp, #8
057d4                 | ' 
057d4                 | ' do
057d4     5E 00 00 FF 
057d8     A8 E5 85 F1 | 	sub	objptr, ##48552
057dc                 | LR__0470
057dc     10 4E 05 F1 | 	add	fp, #16
057e0     A7 12 02 F6 | 	mov	arg01, fp
057e4     08 4E 85 F1 | 	sub	fp, #8
057e8     A7 14 02 FB | 	rdlong	arg02, fp
057ec     08 4E 85 F1 | 	sub	fp, #8
057f0     18 16 06 F6 | 	mov	arg03, #24
057f4     88 6C B1 FD | 	call	#_psram_spin2_read1
057f8     08 4E 05 F1 | 	add	fp, #8
057fc     A7 1E 02 FB | 	rdlong	local01, fp
05800     04 4E 05 F1 | 	add	fp, #4
05804     A7 1E 62 FC | 	wrlong	local01, fp
05808     18 4E 05 F1 | 	add	fp, #24
0580c     A7 1E 02 FB | 	rdlong	local01, fp
05810     1C 4E 85 F1 | 	sub	fp, #28
05814     A7 1E 62 FC | 	wrlong	local01, fp
05818     08 4E 05 F1 | 	add	fp, #8
0581c     A7 1E 02 FB | 	rdlong	local01, fp
05820     0C 4E 85 F1 | 	sub	fp, #12
05824     A7 16 02 FB | 	rdlong	arg03, fp
05828     04 4E 85 F1 | 	sub	fp, #4
0582c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05830     24 4E 05 C1 |  if_b	add	fp, #36
05834     A7 20 02 CB |  if_b	rdlong	local02, fp
05838     24 4E 85 C1 |  if_b	sub	fp, #36
0583c     FF FF 3F CF 
05840     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05844     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0470
05848     0B 00 00 FF 
0584c     CC E4 85 F1 | 	sub	objptr, ##5836
05850                 | ' 
05850                 | ' if header(0)=aline then return -1 ' delete it first
05850     10 4E 05 F1 | 	add	fp, #16
05854     A7 1E 02 FB | 	rdlong	local01, fp
05858     0C 4E 85 F1 | 	sub	fp, #12
0585c     A7 20 02 FB | 	rdlong	local02, fp
05860     04 4E 85 F1 | 	sub	fp, #4
05864     10 1F 0A F2 | 	cmp	local01, local02 wz
05868     01 FA 65 A6 |  if_e	neg	result1, #1
0586c     48 01 90 AD |  if_e	jmp	#LR__0473
05870                 | ' if header(0)<aline then return -2 ' end of program reached
05870     10 4E 05 F1 | 	add	fp, #16
05874     A7 1E 02 FB | 	rdlong	local01, fp
05878     0C 4E 85 F1 | 	sub	fp, #12
0587c     A7 16 02 FB | 	rdlong	arg03, fp
05880     04 4E 85 F1 | 	sub	fp, #4
05884     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05888     02 FA 65 C6 |  if_b	neg	result1, #2
0588c     28 01 90 CD |  if_b	jmp	#LR__0473
05890                 | ' 
05890                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
05890     20 4E 05 F1 | 	add	fp, #32
05894     A7 1E 02 FB | 	rdlong	local01, fp
05898     20 4E 85 F1 | 	sub	fp, #32
0589c     FF FF 7F FF 
058a0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
058a4     78 00 90 5D |  if_ne	jmp	#LR__0471
058a8     63 00 00 FF 
058ac     4C E4 05 F1 | 	add	objptr, ##50764
058b0     F2 1E 02 FB | 	rdlong	local01, objptr
058b4     07 00 00 FF 
058b8     28 E4 05 F1 | 	add	objptr, ##3624
058bc     F2 1E 62 FC | 	wrlong	local01, objptr
058c0     0C 4E 05 F1 | 	add	fp, #12
058c4     A7 12 02 FB | 	rdlong	arg01, fp
058c8     0C 4E 85 F1 | 	sub	fp, #12
058cc     10 12 06 F1 | 	add	arg01, #16
058d0     07 00 00 FF 
058d4     28 E4 85 F1 | 	sub	objptr, ##3624
058d8     F2 14 02 FB | 	rdlong	arg02, objptr
058dc     63 00 00 FF 
058e0     4C E4 85 F1 | 	sub	objptr, ##50764
058e4     A4 38 B1 FD | 	call	#_pslpoke
058e8     67 00 00 FF 
058ec     7C E4 05 F1 | 	add	objptr, ##52860
058f0     FF FF FF FF 
058f4     F2 FE 6B FC | 	wrlong	##-1, objptr
058f8     0C 4E 05 F1 | 	add	fp, #12
058fc     A7 1E 02 FB | 	rdlong	local01, fp
05900     0C 4E 85 F1 | 	sub	fp, #12
05904     04 E4 05 F1 | 	add	objptr, #4
05908     F2 1E 62 FC | 	wrlong	local01, objptr
0590c     67 00 00 FF 
05910     80 E4 85 F1 | 	sub	objptr, ##52864
05914     84 FD BF FD | 	call	#_save_line
05918                 | '   programstart=programptr
05918                 | '   pslpoke(lineptr2+16,programptr)
05918                 | '   ucompiledline(4)=$FFFF_FFFF
05918                 | '   ucompiledline(5)=lineptr2
05918                 | '   save_line
05918                 | '   return 0
05918     00 FA 05 F6 | 	mov	result1, #0
0591c     98 00 90 FD | 	jmp	#LR__0473
05920                 | LR__0471
05920                 | ' 
05920                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05920     20 4E 05 F1 | 	add	fp, #32
05924     A7 1E 02 FB | 	rdlong	local01, fp
05928     20 4E 85 F1 | 	sub	fp, #32
0592c     FF FF 7F FF 
05930     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05934     7C 00 90 AD |  if_e	jmp	#LR__0472
05938     20 4E 05 F1 | 	add	fp, #32
0593c     A7 1E 02 FB | 	rdlong	local01, fp
05940     67 00 00 FF 
05944     7C E4 05 F1 | 	add	objptr, ##52860
05948     F2 1E 62 FC | 	wrlong	local01, objptr
0594c     14 4E 85 F1 | 	sub	fp, #20
05950     A7 1E 02 FB | 	rdlong	local01, fp
05954     04 E4 05 F1 | 	add	objptr, #4
05958     F2 1E 62 FC | 	wrlong	local01, objptr
0595c     A7 12 02 FB | 	rdlong	arg01, fp
05960     0C 4E 85 F1 | 	sub	fp, #12
05964     10 12 06 F1 | 	add	arg01, #16
05968     04 00 00 FF 
0596c     34 E4 85 F1 | 	sub	objptr, ##2100
05970     F2 14 02 FB | 	rdlong	arg02, objptr
05974     63 00 00 FF 
05978     4C E4 85 F1 | 	sub	objptr, ##50764
0597c     0C 38 B1 FD | 	call	#_pslpoke
05980     20 4E 05 F1 | 	add	fp, #32
05984     A7 12 02 FB | 	rdlong	arg01, fp
05988     20 4E 85 F1 | 	sub	fp, #32
0598c     14 12 06 F1 | 	add	arg01, #20
05990     63 00 00 FF 
05994     4C E4 05 F1 | 	add	objptr, ##50764
05998     F2 14 02 FB | 	rdlong	arg02, objptr
0599c     63 00 00 FF 
059a0     4C E4 85 F1 | 	sub	objptr, ##50764
059a4     E4 37 B1 FD | 	call	#_pslpoke
059a8     F0 FC BF FD | 	call	#_save_line
059ac                 | '   ucompiledline(4)=header(4)
059ac                 | '   ucompiledline(5)=lineptr2
059ac                 | '   pslpoke(lineptr2+16,programptr)
059ac                 | '   pslpoke(header(4)+20,programptr)
059ac                 | '   save_line
059ac                 | '   return 0
059ac     00 FA 05 F6 | 	mov	result1, #0
059b0     04 00 90 FD | 	jmp	#LR__0473
059b4                 | LR__0472
059b4     00 FA 05 F6 | 	mov	result1, #0
059b8                 | LR__0473
059b8     A7 F0 03 F6 | 	mov	ptra, fp
059bc     B2 00 A0 FD | 	call	#popregs_
059c0                 | _insertline_ret
059c0     2D 00 64 FD | 	ret
059c4                 | 
059c4                 | ' 
059c4                 | ' sub add_line_at_end(aline) 
059c4                 | _add_line_at_end
059c4     6A 00 00 FF 
059c8     78 E4 05 F1 | 	add	objptr, ##54392
059cc     F2 12 62 FC | 	wrlong	arg01, objptr
059d0     04 E4 05 F1 | 	add	objptr, #4
059d4     F2 14 02 FB | 	rdlong	arg02, objptr
059d8     03 00 00 FF 
059dc     00 E4 85 F1 | 	sub	objptr, ##1536
059e0     F2 14 62 FC | 	wrlong	arg02, objptr
059e4     03 00 00 FF 
059e8     00 E4 05 F1 | 	add	objptr, ##1536
059ec     F2 12 02 FB | 	rdlong	arg01, objptr
059f0     14 12 06 F1 | 	add	arg01, #20
059f4     07 00 00 FF 
059f8     30 E4 85 F1 | 	sub	objptr, ##3632
059fc     F2 14 02 FB | 	rdlong	arg02, objptr
05a00     63 00 00 FF 
05a04     4C E4 85 F1 | 	sub	objptr, ##50764
05a08     80 37 B1 FD | 	call	#_pslpoke
05a0c     63 00 00 FF 
05a10     4C E4 05 F1 | 	add	objptr, ##50764
05a14     F2 14 02 FB | 	rdlong	arg02, objptr
05a18     07 00 00 FF 
05a1c     30 E4 05 F1 | 	add	objptr, ##3632
05a20     F2 14 62 FC | 	wrlong	arg02, objptr
05a24     02 00 00 FF 
05a28     FC E5 85 F1 | 	sub	objptr, ##1532
05a2c     FF FF BF FF 
05a30     F2 FE 6B FC | 	wrlong	##2147483647, objptr
05a34                 | ' 
05a34                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
05a34                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
05a34     04 00 00 FF 
05a38     34 E4 85 F1 | 	sub	objptr, ##2100
05a3c     F2 14 0A FB | 	rdlong	arg02, objptr wz
05a40     63 00 00 FF 
05a44     4C E4 85 F1 | 	sub	objptr, ##50764
05a48     67 00 00 AF 
05a4c     7C E4 05 A1 |  if_e	add	objptr, ##52860
05a50     FF FF FF AF 
05a54     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
05a58     67 00 00 AF 
05a5c     7C E4 85 A1 |  if_e	sub	objptr, ##52860
05a60     38 FC BF FD | 	call	#_save_line
05a64     63 00 00 FF 
05a68     4C E4 05 F1 | 	add	objptr, ##50764
05a6c     F2 12 02 FB | 	rdlong	arg01, objptr
05a70     63 00 00 FF 
05a74     4C E4 85 F1 | 	sub	objptr, ##50764
05a78     01 14 66 F6 | 	neg	arg02, #1
05a7c     0C 37 B1 FD | 	call	#_pslpoke
05a80                 | _add_line_at_end_ret
05a80     2D 00 64 FD | 	ret
05a84                 | 
05a84                 | ' 
05a84                 | ' function compile_immediate(linetype as ulong) as integer
05a84                 | _compile_immediate
05a84     09 4A 05 F6 | 	mov	COUNT_, #9
05a88     A8 00 A0 FD | 	call	#pushregs_
05a8c                 | _compile_immediate_enter
05a8c     09 25 0A F6 | 	mov	local04, arg01 wz
05a90     00 26 06 F6 | 	mov	local05, #0
05a94     00 28 06 F6 | 	mov	local06, #0
05a98                 | ' 
05a98                 | ' ' linetype=cont+1, linetype=0 immediate
05a98                 | ' '  : 1: this is the first part of the line that will continue
05a98                 | ' ' 2 - this is the continuation of the line
05a98                 | ' ' 3 - this is the last continued line
05a98                 | ' ' 4 - this is the one and only part
05a98                 | ' 
05a98                 | ' err=0
05a98                 | ' cmd=0
05a98                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05a98     30 00 90 5D |  if_ne	jmp	#LR__0480
05a9c     55 00 00 FF 
05aa0     00 E4 05 F1 | 	add	objptr, ##43520
05aa4     F2 28 02 FB | 	rdlong	local06, objptr
05aa8     02 00 00 FF 
05aac     34 E4 05 F1 | 	add	objptr, ##1076
05ab0     F2 02 68 FC | 	wrlong	#1, objptr
05ab4     00 2A 06 F6 | 	mov	local07, #0
05ab8     13 00 00 FF 
05abc     38 E4 05 F1 | 	add	objptr, ##9784
05ac0     F2 00 68 FC | 	wrlong	#0, objptr
05ac4     6A 00 00 FF 
05ac8     6C E4 85 F1 | 	sub	objptr, ##54380
05acc                 | LR__0480
05acc                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05acc     02 24 0E F2 | 	cmp	local04, #2 wz
05ad0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05ad4     24 00 90 5D |  if_ne	jmp	#LR__0481
05ad8     55 00 00 FF 
05adc     00 E4 05 F1 | 	add	objptr, ##43520
05ae0     F2 28 02 FB | 	rdlong	local06, objptr
05ae4     01 2A 06 F6 | 	mov	local07, #1
05ae8     02 00 00 FF 
05aec     34 E4 05 F1 | 	add	objptr, ##1076
05af0     F2 02 68 FC | 	wrlong	#1, objptr
05af4     57 00 00 FF 
05af8     34 E4 85 F1 | 	sub	objptr, ##44596
05afc                 | LR__0481
05afc                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05afc     04 24 0E F2 | 	cmp	local04, #4 wz
05b00     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05b04     30 00 90 5D |  if_ne	jmp	#LR__0482
05b08     55 00 00 FF 
05b0c     08 E4 05 F1 | 	add	objptr, ##43528
05b10     F2 28 02 FB | 	rdlong	local06, objptr
05b14     02 2A 06 F6 | 	mov	local07, #2
05b18     02 00 00 FF 
05b1c     2C E4 05 F1 | 	add	objptr, ##1068
05b20     F2 04 68 FC | 	wrlong	#2, objptr
05b24     13 00 00 FF 
05b28     38 E4 05 F1 | 	add	objptr, ##9784
05b2c     F2 04 68 FC | 	wrlong	#2, objptr
05b30     6A 00 00 FF 
05b34     6C E4 85 F1 | 	sub	objptr, ##54380
05b38                 | LR__0482
05b38                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05b38     05 24 0E F2 | 	cmp	local04, #5 wz
05b3c     44 00 90 5D |  if_ne	jmp	#LR__0483
05b40     57 00 00 FF 
05b44     34 E4 05 F1 | 	add	objptr, ##44596
05b48     F2 FA 01 FB | 	rdlong	result1, objptr
05b4c     FD 2A 02 F6 | 	mov	local07, result1
05b50     03 2A 66 F0 | 	shl	local07, #3
05b54     02 00 00 FF 
05b58     38 E4 85 F1 | 	sub	objptr, ##1080
05b5c     F2 2A 02 F1 | 	add	local07, objptr
05b60     04 2A 06 F1 | 	add	local07, #4
05b64     15 29 02 FB | 	rdlong	local06, local07
05b68     FD 2A 02 F6 | 	mov	local07, result1
05b6c     01 2A 06 F1 | 	add	local07, #1
05b70     02 00 00 FF 
05b74     38 E4 05 F1 | 	add	objptr, ##1080
05b78     F2 2A 62 FC | 	wrlong	local07, objptr
05b7c     57 00 00 FF 
05b80     34 E4 85 F1 | 	sub	objptr, ##44596
05b84                 | LR__0483
05b84     00 2C 06 F6 | 	mov	local08, #0
05b88                 | ' vars=0
05b88                 | ' 'print  "In compile_immediate cmd=:", cmd
05b88                 | ' 451 select case cmd
05b88     5C 28 0E F2 | 	cmp	local06, #92 wz
05b8c     08 02 90 AD |  if_e	jmp	#LR__0484
05b90     47 28 0E F2 | 	cmp	local06, #71 wz
05b94     0C 02 90 AD |  if_e	jmp	#LR__0485
05b98     59 28 0E F2 | 	cmp	local06, #89 wz
05b9c     10 02 90 AD |  if_e	jmp	#LR__0486
05ba0     45 28 0E F2 | 	cmp	local06, #69 wz
05ba4     14 02 90 AD |  if_e	jmp	#LR__0487
05ba8     69 28 0E F2 | 	cmp	local06, #105 wz
05bac     18 02 90 AD |  if_e	jmp	#LR__0488
05bb0     40 28 0E F2 | 	cmp	local06, #64 wz
05bb4     90 04 90 AD |  if_e	jmp	#LR__0544
05bb8     49 28 0E F2 | 	cmp	local06, #73 wz
05bbc     14 02 90 AD |  if_e	jmp	#LR__0489
05bc0     50 28 0E F2 | 	cmp	local06, #80 wz
05bc4     18 02 90 AD |  if_e	jmp	#LR__0490
05bc8     68 28 0E F2 | 	cmp	local06, #104 wz
05bcc     1C 02 90 AD |  if_e	jmp	#LR__0491
05bd0     74 28 0E F2 | 	cmp	local06, #116 wz
05bd4     20 02 90 AD |  if_e	jmp	#LR__0492
05bd8     73 28 0E F2 | 	cmp	local06, #115 wz
05bdc     24 02 90 AD |  if_e	jmp	#LR__0493
05be0     6C 28 0E F2 | 	cmp	local06, #108 wz
05be4     28 02 90 AD |  if_e	jmp	#LR__0494
05be8     89 28 0E F2 | 	cmp	local06, #137 wz
05bec     58 04 90 AD |  if_e	jmp	#LR__0544
05bf0     72 28 0E F2 | 	cmp	local06, #114 wz
05bf4     24 02 90 AD |  if_e	jmp	#LR__0495
05bf8     5D 28 0E F2 | 	cmp	local06, #93 wz
05bfc     48 04 90 AD |  if_e	jmp	#LR__0544
05c00     96 28 0E F2 | 	cmp	local06, #150 wz
05c04     1C 02 90 AD |  if_e	jmp	#LR__0496
05c08     43 28 0E F2 | 	cmp	local06, #67 wz
05c0c     1C 02 90 AD |  if_e	jmp	#LR__0497
05c10     5A 28 0E F2 | 	cmp	local06, #90 wz
05c14     20 02 90 AD |  if_e	jmp	#LR__0498
05c18     4E 28 0E F2 | 	cmp	local06, #78 wz
05c1c     20 02 90 AD |  if_e	jmp	#LR__0499
05c20     46 28 0E F2 | 	cmp	local06, #70 wz
05c24     34 02 90 AD |  if_e	jmp	#LR__0501
05c28     71 28 0E F2 | 	cmp	local06, #113 wz
05c2c     38 02 90 AD |  if_e	jmp	#LR__0502
05c30     60 28 0E F2 | 	cmp	local06, #96 wz
05c34     3C 02 90 AD |  if_e	jmp	#LR__0503
05c38     4A 28 0E F2 | 	cmp	local06, #74 wz
05c3c     40 02 90 AD |  if_e	jmp	#LR__0504
05c40     48 28 0E F2 | 	cmp	local06, #72 wz
05c44     40 02 90 AD |  if_e	jmp	#LR__0505
05c48     58 28 0E F2 | 	cmp	local06, #88 wz
05c4c     44 02 90 AD |  if_e	jmp	#LR__0506
05c50     5F 28 0E F2 | 	cmp	local06, #95 wz
05c54     44 02 90 AD |  if_e	jmp	#LR__0507
05c58     8A 28 0E F2 | 	cmp	local06, #138 wz
05c5c     48 02 90 AD |  if_e	jmp	#LR__0508
05c60     4C 28 0E F2 | 	cmp	local06, #76 wz
05c64     4C 02 90 AD |  if_e	jmp	#LR__0509
05c68     52 28 0E F2 | 	cmp	local06, #82 wz
05c6c     50 02 90 AD |  if_e	jmp	#LR__0510
05c70     97 28 0E F2 | 	cmp	local06, #151 wz
05c74     54 02 90 AD |  if_e	jmp	#LR__0511
05c78     61 28 0E F2 | 	cmp	local06, #97 wz
05c7c     58 02 90 AD |  if_e	jmp	#LR__0512
05c80     63 28 0E F2 | 	cmp	local06, #99 wz
05c84     5C 02 90 AD |  if_e	jmp	#LR__0513
05c88     41 28 0E F2 | 	cmp	local06, #65 wz
05c8c     B8 03 90 AD |  if_e	jmp	#LR__0544
05c90     4B 28 0E F2 | 	cmp	local06, #75 wz
05c94     58 02 90 AD |  if_e	jmp	#LR__0514
05c98     5E 28 0E F2 | 	cmp	local06, #94 wz
05c9c     58 02 90 AD |  if_e	jmp	#LR__0515
05ca0     7C 28 0E F2 | 	cmp	local06, #124 wz
05ca4     5C 02 90 AD |  if_e	jmp	#LR__0516
05ca8     7D 28 0E F2 | 	cmp	local06, #125 wz
05cac     60 02 90 AD |  if_e	jmp	#LR__0517
05cb0     7E 28 0E F2 | 	cmp	local06, #126 wz
05cb4     64 02 90 AD |  if_e	jmp	#LR__0518
05cb8     7F 28 0E F2 | 	cmp	local06, #127 wz
05cbc     68 02 90 AD |  if_e	jmp	#LR__0519
05cc0     80 28 0E F2 | 	cmp	local06, #128 wz
05cc4     6C 02 90 AD |  if_e	jmp	#LR__0520
05cc8     55 28 0E F2 | 	cmp	local06, #85 wz
05ccc     70 02 90 AD |  if_e	jmp	#LR__0521
05cd0     75 28 0E F2 | 	cmp	local06, #117 wz
05cd4     74 02 90 AD |  if_e	jmp	#LR__0522
05cd8     42 28 0E F2 | 	cmp	local06, #66 wz
05cdc     78 02 90 AD |  if_e	jmp	#LR__0523
05ce0     95 28 0E F2 | 	cmp	local06, #149 wz
05ce4     7C 02 90 AD |  if_e	jmp	#LR__0524
05ce8     81 28 0E F2 | 	cmp	local06, #129 wz
05cec     80 02 90 AD |  if_e	jmp	#LR__0525
05cf0     44 28 0E F2 | 	cmp	local06, #68 wz
05cf4     84 02 90 AD |  if_e	jmp	#LR__0526
05cf8     88 28 0E F2 | 	cmp	local06, #136 wz
05cfc     48 03 90 AD |  if_e	jmp	#LR__0544
05d00     92 28 0E F2 | 	cmp	local06, #146 wz
05d04     80 02 90 AD |  if_e	jmp	#LR__0527
05d08     4D 28 0E F2 | 	cmp	local06, #77 wz
05d0c     80 02 90 AD |  if_e	jmp	#LR__0528
05d10     51 28 0E F2 | 	cmp	local06, #81 wz
05d14     84 02 90 AD |  if_e	jmp	#LR__0529
05d18     8E 28 0E F2 | 	cmp	local06, #142 wz
05d1c     88 02 90 AD |  if_e	jmp	#LR__0530
05d20     90 28 0E F2 | 	cmp	local06, #144 wz
05d24     8C 02 90 AD |  if_e	jmp	#LR__0531
05d28     8D 28 0E F2 | 	cmp	local06, #141 wz
05d2c     90 02 90 AD |  if_e	jmp	#LR__0532
05d30     8C 28 0E F2 | 	cmp	local06, #140 wz
05d34     94 02 90 AD |  if_e	jmp	#LR__0533
05d38     91 28 0E F2 | 	cmp	local06, #145 wz
05d3c     98 02 90 AD |  if_e	jmp	#LR__0534
05d40     8B 28 0E F2 | 	cmp	local06, #139 wz
05d44     9C 02 90 AD |  if_e	jmp	#LR__0535
05d48     8F 28 0E F2 | 	cmp	local06, #143 wz
05d4c     A0 02 90 AD |  if_e	jmp	#LR__0536
05d50     6D 28 0E F2 | 	cmp	local06, #109 wz
05d54     A4 02 90 AD |  if_e	jmp	#LR__0537
05d58     70 28 0E F2 | 	cmp	local06, #112 wz
05d5c     E8 02 90 AD |  if_e	jmp	#LR__0544
05d60     56 28 0E F2 | 	cmp	local06, #86 wz
05d64     A0 02 90 AD |  if_e	jmp	#LR__0538
05d68     57 28 0E F2 | 	cmp	local06, #87 wz
05d6c     D8 02 90 AD |  if_e	jmp	#LR__0544
05d70     79 28 0E F2 | 	cmp	local06, #121 wz
05d74     9C 02 90 AD |  if_e	jmp	#LR__0539
05d78     77 28 0E F2 | 	cmp	local06, #119 wz
05d7c     A0 02 90 AD |  if_e	jmp	#LR__0540
05d80     78 28 0E F2 | 	cmp	local06, #120 wz
05d84     A4 02 90 AD |  if_e	jmp	#LR__0541
05d88     01 00 00 FF 
05d8c     04 28 0E F2 | 	cmp	local06, ##516 wz
05d90     A4 02 90 AD |  if_e	jmp	#LR__0542
05d94     A8 02 90 FD | 	jmp	#LR__0543
05d98                 | LR__0484
05d98     AC 0C B0 FD | 	call	#_compile_fun_2p
05d9c     FD 26 02 F6 | 	mov	local05, result1
05da0     A4 02 90 FD | 	jmp	#LR__0544
05da4                 | LR__0485
05da4     E0 0D B0 FD | 	call	#_compile_fun_4p
05da8     FD 26 02 F6 | 	mov	local05, result1
05dac     98 02 90 FD | 	jmp	#LR__0544
05db0                 | LR__0486
05db0     70 2F B0 FD | 	call	#_expr
05db4                 | ' expr()
05db4                 | ' return 0
05db4     00 26 06 F6 | 	mov	local05, #0
05db8     8C 02 90 FD | 	jmp	#LR__0544
05dbc                 | LR__0487
05dbc     FC 0C B0 FD | 	call	#_compile_fun_3p
05dc0     FD 26 02 F6 | 	mov	local05, result1
05dc4     80 02 90 FD | 	jmp	#LR__0544
05dc8                 | LR__0488
05dc8     58 2F B0 FD | 	call	#_expr
05dcc                 | ' expr()
05dcc                 | ' return 0
05dcc     00 26 06 F6 | 	mov	local05, #0
05dd0     74 02 90 FD | 	jmp	#LR__0544
05dd4                 | LR__0489
05dd4     4C 2F B0 FD | 	call	#_expr
05dd8                 | ' expr()
05dd8                 | ' return 0
05dd8     00 26 06 F6 | 	mov	local05, #0
05ddc     68 02 90 FD | 	jmp	#LR__0544
05de0                 | LR__0490
05de0     44 10 B0 FD | 	call	#_compile_fun_varp
05de4     FD 2C 02 F6 | 	mov	local08, result1
05de8     5C 02 90 FD | 	jmp	#LR__0544
05dec                 | LR__0491
05dec     34 2F B0 FD | 	call	#_expr
05df0                 | ' expr()
05df0                 | ' return 0
05df0     00 26 06 F6 | 	mov	local05, #0
05df4     50 02 90 FD | 	jmp	#LR__0544
05df8                 | LR__0492
05df8     2C 10 B0 FD | 	call	#_compile_fun_varp
05dfc     FD 2C 02 F6 | 	mov	local08, result1
05e00     44 02 90 FD | 	jmp	#LR__0544
05e04                 | LR__0493
05e04     20 10 B0 FD | 	call	#_compile_fun_varp
05e08     FD 2C 02 F6 | 	mov	local08, result1
05e0c     38 02 90 FD | 	jmp	#LR__0544
05e10                 | LR__0494
05e10     98 0E B0 FD | 	call	#_compile_fun_5p
05e14     FD 26 02 F6 | 	mov	local05, result1
05e18     2C 02 90 FD | 	jmp	#LR__0544
05e1c                 | LR__0495
05e1c     F4 19 B0 FD | 	call	#_compile_dim
05e20     E0 02 90 FD | 	jmp	#LR__0545
05e24                 | LR__0496
05e24     20 0C B0 FD | 	call	#_compile_fun_2p
05e28     1C 02 90 FD | 	jmp	#LR__0544
05e2c                 | LR__0497
05e2c     18 0C B0 FD | 	call	#_compile_fun_2p
05e30     FD 26 02 F6 | 	mov	local05, result1
05e34     10 02 90 FD | 	jmp	#LR__0544
05e38                 | LR__0498
05e38     B0 18 B0 FD | 	call	#_compile_else
05e3c     C4 02 90 FD | 	jmp	#LR__0545
05e40                 | LR__0499
05e40     01 24 16 F2 | 	cmp	local04, #1 wc
05e44     08 00 90 CD |  if_b	jmp	#LR__0500
05e48     78 2B B0 FD | 	call	#_compile_goto
05e4c     B4 02 90 FD | 	jmp	#LR__0545
05e50                 | LR__0500
05e50     19 12 06 F6 | 	mov	arg01, #25
05e54     D0 31 B1 FD | 	call	#_printerror
05e58     A8 02 90 FD | 	jmp	#LR__0545
05e5c                 | LR__0501
05e5c     5C 0C B0 FD | 	call	#_compile_fun_3p
05e60     FD 26 02 F6 | 	mov	local05, result1
05e64     E0 01 90 FD | 	jmp	#LR__0544
05e68                 | LR__0502
05e68     1C 0D B0 FD | 	call	#_compile_fun_4p
05e6c     FD 26 02 F6 | 	mov	local05, result1
05e70     D4 01 90 FD | 	jmp	#LR__0544
05e74                 | LR__0503
05e74     AC 2E B0 FD | 	call	#_expr
05e78                 | ' expr()
05e78                 | ' return 0
05e78     00 26 06 F6 | 	mov	local05, #0
05e7c     C8 01 90 FD | 	jmp	#LR__0544
05e80                 | LR__0504
05e80     A0 20 B0 FD | 	call	#_compile_for
05e84     7C 02 90 FD | 	jmp	#LR__0545
05e88                 | LR__0505
05e88     FC 0C B0 FD | 	call	#_compile_fun_4p
05e8c     FD 26 02 F6 | 	mov	local05, result1
05e90     B4 01 90 FD | 	jmp	#LR__0544
05e94                 | LR__0506
05e94     14 17 B0 FD | 	call	#_compile_if
05e98     68 02 90 FD | 	jmp	#LR__0545
05e9c                 | LR__0507
05e9c     84 2E B0 FD | 	call	#_expr
05ea0                 | ' expr()
05ea0                 | ' return 0
05ea0     00 26 06 F6 | 	mov	local05, #0
05ea4     A0 01 90 FD | 	jmp	#LR__0544
05ea8                 | LR__0508
05ea8     78 2E B0 FD | 	call	#_expr
05eac                 | ' expr()
05eac                 | ' return 0
05eac     00 26 06 F6 | 	mov	local05, #0
05eb0     94 01 90 FD | 	jmp	#LR__0544
05eb4                 | LR__0509
05eb4     70 0F B0 FD | 	call	#_compile_fun_varp
05eb8     FD 2C 02 F6 | 	mov	local08, result1
05ebc     88 01 90 FD | 	jmp	#LR__0544
05ec0                 | LR__0510
05ec0     64 0F B0 FD | 	call	#_compile_fun_varp
05ec4     FD 2C 02 F6 | 	mov	local08, result1
05ec8     7C 01 90 FD | 	jmp	#LR__0544
05ecc                 | LR__0511
05ecc     78 0B B0 FD | 	call	#_compile_fun_2p
05ed0     FD 26 02 F6 | 	mov	local05, result1
05ed4     70 01 90 FD | 	jmp	#LR__0544
05ed8                 | LR__0512
05ed8     48 2E B0 FD | 	call	#_expr
05edc                 | ' expr()
05edc                 | ' return 0
05edc     00 26 06 F6 | 	mov	local05, #0
05ee0     64 01 90 FD | 	jmp	#LR__0544
05ee4                 | LR__0513
05ee4     3C 2E B0 FD | 	call	#_expr
05ee8                 | ' expr()
05ee8                 | ' return 0
05ee8     00 26 06 F6 | 	mov	local05, #0
05eec     58 01 90 FD | 	jmp	#LR__0544
05ef0                 | LR__0514
05ef0     20 29 B0 FD | 	call	#_compile_next
05ef4     0C 02 90 FD | 	jmp	#LR__0545
05ef8                 | LR__0515
05ef8     28 2E B0 FD | 	call	#_expr
05efc                 | ' expr()
05efc                 | ' return 0
05efc     00 26 06 F6 | 	mov	local05, #0
05f00     44 01 90 FD | 	jmp	#LR__0544
05f04                 | LR__0516
05f04     1C 2E B0 FD | 	call	#_expr
05f08                 | ' expr()
05f08                 | ' return 0
05f08     00 26 06 F6 | 	mov	local05, #0
05f0c     38 01 90 FD | 	jmp	#LR__0544
05f10                 | LR__0517
05f10     10 2E B0 FD | 	call	#_expr
05f14                 | ' expr()
05f14                 | ' return 0
05f14     00 26 06 F6 | 	mov	local05, #0
05f18     2C 01 90 FD | 	jmp	#LR__0544
05f1c                 | LR__0518
05f1c     04 2E B0 FD | 	call	#_expr
05f20                 | ' expr()
05f20                 | ' return 0
05f20     00 26 06 F6 | 	mov	local05, #0
05f24     20 01 90 FD | 	jmp	#LR__0544
05f28                 | LR__0519
05f28     5C 0C B0 FD | 	call	#_compile_fun_4p
05f2c     FD 26 02 F6 | 	mov	local05, result1
05f30     14 01 90 FD | 	jmp	#LR__0544
05f34                 | LR__0520
05f34     EC 2D B0 FD | 	call	#_expr
05f38                 | ' expr()
05f38                 | ' return 0
05f38     00 26 06 F6 | 	mov	local05, #0
05f3c     08 01 90 FD | 	jmp	#LR__0544
05f40                 | LR__0521
05f40     04 0B B0 FD | 	call	#_compile_fun_2p
05f44     FD 26 02 F6 | 	mov	local05, result1
05f48     FC 00 90 FD | 	jmp	#LR__0544
05f4c                 | LR__0522
05f4c     D8 0E B0 FD | 	call	#_compile_fun_varp
05f50     FD 2C 02 F6 | 	mov	local08, result1
05f54     F0 00 90 FD | 	jmp	#LR__0544
05f58                 | LR__0523
05f58     EC 0A B0 FD | 	call	#_compile_fun_2p
05f5c     FD 26 02 F6 | 	mov	local05, result1
05f60     E4 00 90 FD | 	jmp	#LR__0544
05f64                 | LR__0524
05f64     E0 0A B0 FD | 	call	#_compile_fun_2p
05f68     FD 26 02 F6 | 	mov	local05, result1
05f6c     D8 00 90 FD | 	jmp	#LR__0544
05f70                 | LR__0525
05f70     D4 0A B0 FD | 	call	#_compile_fun_2p
05f74     FD 26 02 F6 | 	mov	local05, result1
05f78     CC 00 90 FD | 	jmp	#LR__0544
05f7c                 | LR__0526
05f7c     54 0F B0 FD | 	call	#_compile_print
05f80     FD 26 02 F6 | 	mov	local05, result1
05f84     7C 01 90 FD | 	jmp	#LR__0545
05f88                 | LR__0527
05f88     98 2D B0 FD | 	call	#_expr
05f8c                 | ' expr()
05f8c                 | ' return 0
05f8c     B8 00 90 FD | 	jmp	#LR__0544
05f90                 | LR__0528
05f90     94 0E B0 FD | 	call	#_compile_fun_varp
05f94     FD 2C 02 F6 | 	mov	local08, result1
05f98     AC 00 90 FD | 	jmp	#LR__0544
05f9c                 | LR__0529
05f9c     88 0E B0 FD | 	call	#_compile_fun_varp
05fa0     FD 2C 02 F6 | 	mov	local08, result1
05fa4     A0 00 90 FD | 	jmp	#LR__0544
05fa8                 | LR__0530
05fa8     9C 0A B0 FD | 	call	#_compile_fun_2p
05fac     FD 26 02 F6 | 	mov	local05, result1
05fb0     94 00 90 FD | 	jmp	#LR__0544
05fb4                 | LR__0531
05fb4     90 0A B0 FD | 	call	#_compile_fun_2p
05fb8     FD 26 02 F6 | 	mov	local05, result1
05fbc     88 00 90 FD | 	jmp	#LR__0544
05fc0                 | LR__0532
05fc0     84 0A B0 FD | 	call	#_compile_fun_2p
05fc4     FD 26 02 F6 | 	mov	local05, result1
05fc8     7C 00 90 FD | 	jmp	#LR__0544
05fcc                 | LR__0533
05fcc     78 0A B0 FD | 	call	#_compile_fun_2p
05fd0     FD 26 02 F6 | 	mov	local05, result1
05fd4     70 00 90 FD | 	jmp	#LR__0544
05fd8                 | LR__0534
05fd8     6C 0A B0 FD | 	call	#_compile_fun_2p
05fdc     FD 26 02 F6 | 	mov	local05, result1
05fe0     64 00 90 FD | 	jmp	#LR__0544
05fe4                 | LR__0535
05fe4     60 0A B0 FD | 	call	#_compile_fun_2p
05fe8     FD 26 02 F6 | 	mov	local05, result1
05fec     58 00 90 FD | 	jmp	#LR__0544
05ff0                 | LR__0536
05ff0     54 0A B0 FD | 	call	#_compile_fun_2p
05ff4     FD 26 02 F6 | 	mov	local05, result1
05ff8     4C 00 90 FD | 	jmp	#LR__0544
05ffc                 | LR__0537
05ffc     BC 0A B0 FD | 	call	#_compile_fun_3p
06000     FD 26 02 F6 | 	mov	local05, result1
06004     40 00 90 FD | 	jmp	#LR__0544
06008                 | LR__0538
06008     18 2D B0 FD | 	call	#_expr
0600c                 | ' expr()
0600c                 | ' return 0
0600c     00 26 06 F6 | 	mov	local05, #0
06010     34 00 90 FD | 	jmp	#LR__0544
06014                 | LR__0539
06014     30 0A B0 FD | 	call	#_compile_fun_2p
06018     FD 26 02 F6 | 	mov	local05, result1
0601c     28 00 90 FD | 	jmp	#LR__0544
06020                 | LR__0540
06020     24 0A B0 FD | 	call	#_compile_fun_2p
06024     FD 26 02 F6 | 	mov	local05, result1
06028     1C 00 90 FD | 	jmp	#LR__0544
0602c                 | LR__0541
0602c     18 0A B0 FD | 	call	#_compile_fun_2p
06030     FD 26 02 F6 | 	mov	local05, result1
06034     10 00 90 FD | 	jmp	#LR__0544
06038                 | LR__0542
06038     E8 01 B0 FD | 	call	#_compile_array_assign
0603c     C4 00 90 FD | 	jmp	#LR__0545
06040                 | LR__0543
06040     48 09 B0 FD | 	call	#_compile_unknown
06044     BC 00 90 FD | 	jmp	#LR__0545
06048                 | LR__0544
06048     14 23 02 F6 | 	mov	local03, local06
0604c     16 1F 02 F6 | 	mov	local01, local08
06050     0F 2B 02 F6 | 	mov	local07, local01
06054     10 2F 02 F6 | 	mov	local09, local02
06058     11 29 02 F6 | 	mov	local06, local03
0605c     6A 00 00 FF 
06060     6C E4 05 F1 | 	add	objptr, ##54380
06064     F2 1E 02 FB | 	rdlong	local01, objptr
06068     0F 2D 02 F6 | 	mov	local08, local01
0606c     01 2C 66 F0 | 	shl	local08, #1
06070     0F 2D 02 F1 | 	add	local08, local01
06074     02 2C 66 F0 | 	shl	local08, #2
06078     03 00 00 FF 
0607c     00 E4 85 F1 | 	sub	objptr, ##1536
06080     F2 2C 02 F1 | 	add	local08, objptr
06084     16 2B 62 FC | 	wrlong	local07, local08
06088     03 00 00 FF 
0608c     00 E4 05 F1 | 	add	objptr, ##1536
06090     F2 1E 02 FB | 	rdlong	local01, objptr
06094     0F 2D 02 F6 | 	mov	local08, local01
06098     01 2C 66 F0 | 	shl	local08, #1
0609c     0F 2D 02 F1 | 	add	local08, local01
060a0     02 2C 66 F0 | 	shl	local08, #2
060a4     03 00 00 FF 
060a8     00 E4 85 F1 | 	sub	objptr, ##1536
060ac     F2 2C 02 F1 | 	add	local08, objptr
060b0     04 2C 06 F1 | 	add	local08, #4
060b4     16 2F 62 FC | 	wrlong	local09, local08
060b8     03 00 00 FF 
060bc     00 E4 05 F1 | 	add	objptr, ##1536
060c0     F2 1E 02 FB | 	rdlong	local01, objptr
060c4     0F 2D 02 F6 | 	mov	local08, local01
060c8     01 2C 66 F0 | 	shl	local08, #1
060cc     0F 2D 02 F1 | 	add	local08, local01
060d0     02 2C 66 F0 | 	shl	local08, #2
060d4     03 00 00 FF 
060d8     00 E4 85 F1 | 	sub	objptr, ##1536
060dc     F2 2C 02 F1 | 	add	local08, objptr
060e0     08 2C 06 F1 | 	add	local08, #8
060e4     16 29 62 FC | 	wrlong	local06, local08
060e8     03 00 00 FF 
060ec     00 E4 05 F1 | 	add	objptr, ##1536
060f0     F2 2A 02 FB | 	rdlong	local07, objptr
060f4     01 2A 06 F1 | 	add	local07, #1
060f8     F2 2A 62 FC | 	wrlong	local07, objptr
060fc     6A 00 00 FF 
06100     6C E4 85 F1 | 	sub	objptr, ##54380
06104                 | LR__0545
06104                 | ' 
06104                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
06104                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
06104     00 24 0E F2 | 	cmp	local04, #0 wz
06108     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
0610c     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
06110     38 00 90 5D |  if_ne	jmp	#LR__0546
06114     6A 00 00 FF 
06118     6C E4 05 F1 | 	add	objptr, ##54380
0611c     F2 2C 02 FB | 	rdlong	local08, objptr
06120     16 1F 02 F6 | 	mov	local01, local08
06124     01 1E 66 F0 | 	shl	local01, #1
06128     16 1F 02 F1 | 	add	local01, local08
0612c     02 1E 66 F0 | 	shl	local01, #2
06130     03 00 00 FF 
06134     00 E4 85 F1 | 	sub	objptr, ##1536
06138     F2 1E 02 F1 | 	add	local01, objptr
0613c     08 1E 06 F1 | 	add	local01, #8
06140     0F FD 6B FC | 	wrlong	#510, local01
06144     67 00 00 FF 
06148     6C E4 85 F1 | 	sub	objptr, ##52844
0614c                 | LR__0546
0614c                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
0614c     6A 00 00 FF 
06150     6C E4 05 F1 | 	add	objptr, ##54380
06154     F2 1E 02 FB | 	rdlong	local01, objptr
06158     6A 00 00 FF 
0615c     6C E4 85 F1 | 	sub	objptr, ##54380
06160     97 58 48 FB | 	callpa	#(@LR__0549-@LR__0547)>>2,fcache_load_ptr_
06164                 | LR__0547
06164     0F 2D 02 F6 | 	mov	local08, local01
06168     01 2C 66 F0 | 	shl	local08, #1
0616c     0F 2D 02 F1 | 	add	local08, local01
06170     02 2C 66 F0 | 	shl	local08, #2
06174     67 00 00 FF 
06178     6C E4 05 F1 | 	add	objptr, ##52844
0617c     F2 2C 02 F1 | 	add	local08, objptr
06180     08 2C 06 F1 | 	add	local08, #8
06184     16 2D 02 FB | 	rdlong	local08, local08
06188     9B 2C 0E F2 | 	cmp	local08, #155 wz
0618c     67 00 00 FF 
06190     6C E4 85 F1 | 	sub	objptr, ##52844
06194     70 00 90 5D |  if_ne	jmp	#LR__0548
06198     0F 2D 02 F6 | 	mov	local08, local01
0619c     01 2C 86 F1 | 	sub	local08, #1
061a0     16 2F 02 F6 | 	mov	local09, local08
061a4     01 2E 66 F0 | 	shl	local09, #1
061a8     16 2F 02 F1 | 	add	local09, local08
061ac     02 2E 66 F0 | 	shl	local09, #2
061b0     67 00 00 FF 
061b4     6C E4 05 F1 | 	add	objptr, ##52844
061b8     F2 2E 02 F1 | 	add	local09, objptr
061bc     08 2E 06 F1 | 	add	local09, #8
061c0     17 2D 02 FB | 	rdlong	local08, local09
061c4     11 2C 0E F2 | 	cmp	local08, #17 wz
061c8     67 00 00 FF 
061cc     6C E4 85 F1 | 	sub	objptr, ##52844
061d0     34 00 90 5D |  if_ne	jmp	#LR__0548
061d4     0F 2F 02 F6 | 	mov	local09, local01
061d8     01 2E 86 F1 | 	sub	local09, #1
061dc     17 2D 02 F6 | 	mov	local08, local09
061e0     01 2C 66 F0 | 	shl	local08, #1
061e4     17 2D 02 F1 | 	add	local08, local09
061e8     02 2C 66 F0 | 	shl	local08, #2
061ec     67 00 00 FF 
061f0     6C E4 05 F1 | 	add	objptr, ##52844
061f4     F2 2C 02 F1 | 	add	local08, objptr
061f8     08 2C 06 F1 | 	add	local08, #8
061fc     16 25 68 FC | 	wrlong	#18, local08
06200     67 00 00 FF 
06204     6C E4 85 F1 | 	sub	objptr, ##52844
06208                 | LR__0548
06208     01 1E 86 F1 | 	sub	local01, #1
0620c     01 1E 56 F2 | 	cmps	local01, #1 wc
06210     50 FF 9F 3D |  if_ae	jmp	#LR__0547
06214                 | LR__0549
06214                 | ' '  print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
06214                 | ' return err
06214     13 FB 01 F6 | 	mov	result1, local05
06218     A7 F0 03 F6 | 	mov	ptra, fp
0621c     B2 00 A0 FD | 	call	#popregs_
06220                 | _compile_immediate_ret
06220     2D 00 64 FD | 	ret
06224                 | 
06224                 | ' 
06224                 | ' sub compile_array_assign
06224                 | _compile_array_assign
06224     0A 4A 05 F6 | 	mov	COUNT_, #10
06228     A8 00 A0 FD | 	call	#pushregs_
0622c     00 24 06 F6 | 	mov	local04, #0
06230     57 00 00 FF 
06234     34 E4 05 F1 | 	add	objptr, ##44596
06238     F2 26 02 FB | 	rdlong	local05, objptr
0623c     13 FB 01 F6 | 	mov	result1, local05
06240     01 FA 85 F1 | 	sub	result1, #1
06244     03 FA 65 F0 | 	shl	result1, #3
06248     02 00 00 FF 
0624c     38 E4 85 F1 | 	sub	objptr, ##1080
06250     F2 FA 01 F1 | 	add	result1, objptr
06254     FD 28 02 FB | 	rdlong	local06, result1
06258                 | ' numpar=0
06258                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
06258                 | ' ' todo here: recognize params and t1.result.twowords=numpar
06258                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
06258                 | ' if lparts(ct).token=token_lpar then
06258     03 26 66 F0 | 	shl	local05, #3
0625c     F2 26 02 F1 | 	add	local05, objptr
06260     04 26 06 F1 | 	add	local05, #4
06264     13 27 02 FB | 	rdlong	local05, local05
06268     15 26 0E F2 | 	cmp	local05, #21 wz
0626c     54 00 00 FF 
06270     FC E5 85 F1 | 	sub	objptr, ##43516
06274     D4 01 90 5D |  if_ne	jmp	#LR__0554
06278     57 00 00 FF 
0627c     34 E4 05 F1 | 	add	objptr, ##44596
06280     F2 2A 02 FB | 	rdlong	local07, objptr
06284     01 2A 06 F1 | 	add	local07, #1
06288     F2 2A 62 FC | 	wrlong	local07, objptr
0628c     57 00 00 FF 
06290     34 E4 85 F1 | 	sub	objptr, ##44596
06294                 | '   ct+=1 											' omit this lpar, this is for expr list
06294                 | '   do
06294                 | LR__0550
06294     8C 2A B0 FD | 	call	#_expr
06298     57 00 00 FF 
0629c     34 E4 05 F1 | 	add	objptr, ##44596
062a0     F2 26 02 FB | 	rdlong	local05, objptr
062a4     01 26 06 F1 | 	add	local05, #1
062a8     F2 26 62 FC | 	wrlong	local05, objptr
062ac     01 24 06 F1 | 	add	local04, #1
062b0     01 26 86 F1 | 	sub	local05, #1
062b4     03 26 66 F0 | 	shl	local05, #3
062b8     02 00 00 FF 
062bc     38 E4 85 F1 | 	sub	objptr, ##1080
062c0     F2 26 02 F1 | 	add	local05, objptr
062c4     04 26 06 F1 | 	add	local05, #4
062c8     13 2B 02 FB | 	rdlong	local07, local05
062cc     14 2A 0E F2 | 	cmp	local07, #20 wz
062d0     54 00 00 FF 
062d4     FC E5 85 F1 | 	sub	objptr, ##43516
062d8     34 00 90 AD |  if_e	jmp	#LR__0551
062dc     57 00 00 FF 
062e0     34 E4 05 F1 | 	add	objptr, ##44596
062e4     F2 2A 02 FB | 	rdlong	local07, objptr
062e8     03 2A 66 F0 | 	shl	local07, #3
062ec     02 00 00 FF 
062f0     38 E4 85 F1 | 	sub	objptr, ##1080
062f4     F2 2A 02 F1 | 	add	local07, objptr
062f8     04 2A 06 F1 | 	add	local07, #4
062fc     15 2B 02 FB | 	rdlong	local07, local07
06300     FE 2B 0E F2 | 	cmp	local07, #510 wz
06304     54 00 00 FF 
06308     FC E5 85 F1 | 	sub	objptr, ##43516
0630c     84 FF 9F 5D |  if_ne	jmp	#LR__0550
06310                 | LR__0551
06310     57 00 00 FF 
06314     34 E4 05 F1 | 	add	objptr, ##44596
06318     F2 2A 02 FB | 	rdlong	local07, objptr
0631c     01 2A 06 F1 | 	add	local07, #1
06320     F2 2A 62 FC | 	wrlong	local07, objptr
06324     57 00 00 FF 
06328     34 E4 85 F1 | 	sub	objptr, ##44596
0632c     F4 29 B0 FD | 	call	#_expr
06330     01 2C 66 F6 | 	neg	local08, #1
06334     00 2E 06 F6 | 	mov	local09, #0
06338                 | ' '   print "in array_assign, rpar found, numpar=",numpar
06338                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
06338                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
06338                 | ' ct+=1 : expr()
06338                 | ' ' now find the vae
06338                 | ' 
06338                 | ' j=-1 : i=0 : do : 
06338                 | LR__0552
06338                 | '   if variables(i).name=varname$ then j=i: exit loop
06338     17 27 02 F6 | 	mov	local05, local09
0633c     04 26 66 F0 | 	shl	local05, #4
06340     34 00 00 FF 
06344     F8 E5 05 F1 | 	add	objptr, ##27128
06348     F2 26 02 F1 | 	add	local05, objptr
0634c     13 13 02 FB | 	rdlong	arg01, local05
06350     14 15 02 F6 | 	mov	arg02, local06
06354     34 00 00 FF 
06358     F8 E5 85 F1 | 	sub	objptr, ##27128
0635c     4C 6D B1 FD | 	call	#__system___string_cmp
06360     00 FA 0D F2 | 	cmp	result1, #0 wz
06364     17 2D 02 A6 |  if_e	mov	local08, local09
06368     20 00 90 AD |  if_e	jmp	#LR__0553
0636c     01 2E 06 F1 | 	add	local09, #1
06370     54 00 00 FF 
06374     F8 E5 05 F1 | 	add	objptr, ##43512
06378     F2 2A 02 FB | 	rdlong	local07, objptr
0637c     54 00 00 FF 
06380     F8 E5 85 F1 | 	sub	objptr, ##43512
06384     15 2F 5A F2 | 	cmps	local09, local07 wcz
06388     AC FF 9F ED |  if_be	jmp	#LR__0552
0638c                 | LR__0553
0638c     16 1F 02 F6 | 	mov	local01, local08
06390     12 21 02 F6 | 	mov	local02, local04
06394     17 22 06 F6 | 	mov	local03, #23
06398     0F 2B 02 F6 | 	mov	local07, local01
0639c     10 31 02 F6 | 	mov	local10, local02
063a0     11 2D 02 F6 | 	mov	local08, local03
063a4     6A 00 00 FF 
063a8     6C E4 05 F1 | 	add	objptr, ##54380
063ac     F2 1E 02 FB | 	rdlong	local01, objptr
063b0     0F 2F 02 F6 | 	mov	local09, local01
063b4     01 2E 66 F0 | 	shl	local09, #1
063b8     0F 2F 02 F1 | 	add	local09, local01
063bc     02 2E 66 F0 | 	shl	local09, #2
063c0     03 00 00 FF 
063c4     00 E4 85 F1 | 	sub	objptr, ##1536
063c8     F2 2E 02 F1 | 	add	local09, objptr
063cc     17 2B 62 FC | 	wrlong	local07, local09
063d0     03 00 00 FF 
063d4     00 E4 05 F1 | 	add	objptr, ##1536
063d8     F2 1E 02 FB | 	rdlong	local01, objptr
063dc     0F 2F 02 F6 | 	mov	local09, local01
063e0     01 2E 66 F0 | 	shl	local09, #1
063e4     0F 2F 02 F1 | 	add	local09, local01
063e8     02 2E 66 F0 | 	shl	local09, #2
063ec     03 00 00 FF 
063f0     00 E4 85 F1 | 	sub	objptr, ##1536
063f4     F2 2E 02 F1 | 	add	local09, objptr
063f8     04 2E 06 F1 | 	add	local09, #4
063fc     17 31 62 FC | 	wrlong	local10, local09
06400     03 00 00 FF 
06404     00 E4 05 F1 | 	add	objptr, ##1536
06408     F2 30 02 FB | 	rdlong	local10, objptr
0640c     18 1F 02 F6 | 	mov	local01, local10
06410     01 1E 66 F0 | 	shl	local01, #1
06414     18 1F 02 F1 | 	add	local01, local10
06418     02 1E 66 F0 | 	shl	local01, #2
0641c     03 00 00 FF 
06420     00 E4 85 F1 | 	sub	objptr, ##1536
06424     F2 1E 02 F1 | 	add	local01, objptr
06428     08 1E 06 F1 | 	add	local01, #8
0642c     0F 2D 62 FC | 	wrlong	local08, local01
06430     03 00 00 FF 
06434     00 E4 05 F1 | 	add	objptr, ##1536
06438     F2 2A 02 FB | 	rdlong	local07, objptr
0643c     01 2A 06 F1 | 	add	local07, #1
06440     F2 2A 62 FC | 	wrlong	local07, objptr
06444     6A 00 00 FF 
06448     6C E4 85 F1 | 	sub	objptr, ##54380
0644c                 | LR__0554
0644c     A7 F0 03 F6 | 	mov	ptra, fp
06450     B2 00 A0 FD | 	call	#popregs_
06454                 | _compile_array_assign_ret
06454     2D 00 64 FD | 	ret
06458                 | 
06458                 | ' 
06458                 | ' 
06458                 | ' sub compile_immediate_assign(linetype as ulong)
06458                 | _compile_immediate_assign
06458     09 4A 05 F6 | 	mov	COUNT_, #9
0645c     A8 00 A0 FD | 	call	#pushregs_
06460     09 25 0A F6 | 	mov	local04, arg01 wz
06464     FF 22 06 F6 | 	mov	local03, #255
06468     01 26 66 F6 | 	neg	local05, #1
0646c                 | ' 
0646c                 | ' t1.result_type=result_error : t1.result.uresult=0
0646c                 | ' i=-1: j=-1
0646c                 | ' 
0646c                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
0646c     2C 00 90 5D |  if_ne	jmp	#LR__0560
06470     54 00 00 FF 
06474     FC E5 05 F1 | 	add	objptr, ##43516
06478     F2 28 02 FB | 	rdlong	local06, objptr
0647c     02 00 00 FF 
06480     38 E4 05 F1 | 	add	objptr, ##1080
06484     F2 04 68 FC | 	wrlong	#2, objptr
06488     13 00 00 FF 
0648c     38 E4 05 F1 | 	add	objptr, ##9784
06490     F2 00 68 FC | 	wrlong	#0, objptr
06494     6A 00 00 FF 
06498     6C E4 85 F1 | 	sub	objptr, ##54380
0649c                 | LR__0560
0649c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
0649c     02 24 0E F2 | 	cmp	local04, #2 wz
064a0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
064a4     54 00 00 AF 
064a8     FC E5 05 A1 |  if_e	add	objptr, ##43516
064ac     F2 28 02 AB |  if_e	rdlong	local06, objptr
064b0     02 00 00 AF 
064b4     38 E4 05 A1 |  if_e	add	objptr, ##1080
064b8     F2 04 68 AC |  if_e	wrlong	#2, objptr
064bc     57 00 00 AF 
064c0     34 E4 85 A1 |  if_e	sub	objptr, ##44596
064c4                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
064c4     04 24 0E F2 | 	cmp	local04, #4 wz
064c8     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
064cc     2C 00 90 5D |  if_ne	jmp	#LR__0561
064d0     55 00 00 FF 
064d4     04 E4 05 F1 | 	add	objptr, ##43524
064d8     F2 28 02 FB | 	rdlong	local06, objptr
064dc     02 00 00 FF 
064e0     30 E4 05 F1 | 	add	objptr, ##1072
064e4     F2 06 68 FC | 	wrlong	#3, objptr
064e8     13 00 00 FF 
064ec     38 E4 05 F1 | 	add	objptr, ##9784
064f0     F2 04 68 FC | 	wrlong	#2, objptr
064f4     6A 00 00 FF 
064f8     6C E4 85 F1 | 	sub	objptr, ##54380
064fc                 | LR__0561
064fc                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
064fc     05 24 0E F2 | 	cmp	local04, #5 wz
06500     3C 00 90 5D |  if_ne	jmp	#LR__0562
06504     57 00 00 FF 
06508     34 E4 05 F1 | 	add	objptr, ##44596
0650c     F2 FA 01 FB | 	rdlong	result1, objptr
06510     FD 28 02 F6 | 	mov	local06, result1
06514     03 28 66 F0 | 	shl	local06, #3
06518     02 00 00 FF 
0651c     38 E4 85 F1 | 	sub	objptr, ##1080
06520     F2 28 02 F1 | 	add	local06, objptr
06524     14 29 02 FB | 	rdlong	local06, local06
06528     02 FA 05 F1 | 	add	result1, #2
0652c     02 00 00 FF 
06530     38 E4 05 F1 | 	add	objptr, ##1080
06534     F2 FA 61 FC | 	wrlong	result1, objptr
06538     57 00 00 FF 
0653c     34 E4 85 F1 | 	sub	objptr, ##44596
06540                 | LR__0562
06540     14 13 02 F6 | 	mov	arg01, local06
06544     01 14 06 F6 | 	mov	arg02, #1
06548     04 8C B1 FD | 	call	#__system__Right_S
0654c     D4 27 B0 FD | 	call	#_expr
06550                 | '  
06550                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
06550                 | ' 
06550                 | ' suffix2$=right$(varname2$,1)
06550                 | ' expr()
06550                 | ' 
06550                 | ' 
06550                 | ' if varnum>0 then
06550     54 00 00 FF 
06554     F8 E5 05 F1 | 	add	objptr, ##43512
06558     F2 2A 02 FB | 	rdlong	local07, objptr
0655c     54 00 00 FF 
06560     F8 E5 85 F1 | 	sub	objptr, ##43512
06564     01 2A 56 F2 | 	cmps	local07, #1 wc
06568     58 00 90 CD |  if_b	jmp	#LR__0565
0656c                 | '   for i=0 to varnum-1
0656c     00 2C 06 F6 | 	mov	local08, #0
06570     54 00 00 FF 
06574     F8 E5 05 F1 | 	add	objptr, ##43512
06578     F2 2E 02 FB | 	rdlong	local09, objptr
0657c     54 00 00 FF 
06580     F8 E5 85 F1 | 	sub	objptr, ##43512
06584                 | LR__0563
06584     17 2D 52 F2 | 	cmps	local08, local09 wc
06588     38 00 90 3D |  if_ae	jmp	#LR__0564
0658c                 | '     if variables(i).name=varname2$ then j=i : exit
0658c     16 2B 02 F6 | 	mov	local07, local08
06590     04 2A 66 F0 | 	shl	local07, #4
06594     34 00 00 FF 
06598     F8 E5 05 F1 | 	add	objptr, ##27128
0659c     F2 2A 02 F1 | 	add	local07, objptr
065a0     15 13 02 FB | 	rdlong	arg01, local07
065a4     14 15 02 F6 | 	mov	arg02, local06
065a8     34 00 00 FF 
065ac     F8 E5 85 F1 | 	sub	objptr, ##27128
065b0     F8 6A B1 FD | 	call	#__system___string_cmp
065b4     00 FA 0D F2 | 	cmp	result1, #0 wz
065b8     16 27 02 A6 |  if_e	mov	local05, local08
065bc     01 2C 06 51 |  if_ne	add	local08, #1
065c0     C0 FF 9F 5D |  if_ne	jmp	#LR__0563
065c4                 | LR__0564
065c4                 | LR__0565
065c4                 | ' if  j=-1 andalso varnum<maxvars then   
065c4     FF FF 7F FF 
065c8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
065cc     60 00 90 5D |  if_ne	jmp	#LR__0566
065d0     54 00 00 FF 
065d4     F8 E5 05 F1 | 	add	objptr, ##43512
065d8     F2 2A 02 FB | 	rdlong	local07, objptr
065dc     54 00 00 FF 
065e0     F8 E5 85 F1 | 	sub	objptr, ##43512
065e4     01 00 00 FF 
065e8     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
065ec     40 00 90 3D |  if_ae	jmp	#LR__0566
065f0     54 00 00 FF 
065f4     F8 E5 05 F1 | 	add	objptr, ##43512
065f8     F2 2E 02 FB | 	rdlong	local09, objptr
065fc     04 2E 66 F0 | 	shl	local09, #4
06600     20 00 00 FF 
06604     00 E4 85 F1 | 	sub	objptr, ##16384
06608     F2 2E 02 F1 | 	add	local09, objptr
0660c     17 29 62 FC | 	wrlong	local06, local09
06610     20 00 00 FF 
06614     00 E4 05 F1 | 	add	objptr, ##16384
06618     F2 2A 02 FB | 	rdlong	local07, objptr
0661c     15 27 02 F6 | 	mov	local05, local07
06620     01 2A 06 F1 | 	add	local07, #1
06624     F2 2A 62 FC | 	wrlong	local07, objptr
06628     54 00 00 FF 
0662c     F8 E5 85 F1 | 	sub	objptr, ##43512
06630                 | LR__0566
06630     13 1F 02 F6 | 	mov	local01, local05
06634     17 22 06 F6 | 	mov	local03, #23
06638     0F 2B 02 F6 | 	mov	local07, local01
0663c     10 2F 02 F6 | 	mov	local09, local02
06640     11 1F 02 F6 | 	mov	local01, local03
06644     6A 00 00 FF 
06648     6C E4 05 F1 | 	add	objptr, ##54380
0664c     F2 2C 02 FB | 	rdlong	local08, objptr
06650     16 29 02 F6 | 	mov	local06, local08
06654     01 28 66 F0 | 	shl	local06, #1
06658     16 29 02 F1 | 	add	local06, local08
0665c     02 28 66 F0 | 	shl	local06, #2
06660     03 00 00 FF 
06664     00 E4 85 F1 | 	sub	objptr, ##1536
06668     F2 28 02 F1 | 	add	local06, objptr
0666c     14 2B 62 FC | 	wrlong	local07, local06
06670     03 00 00 FF 
06674     00 E4 05 F1 | 	add	objptr, ##1536
06678     F2 2C 02 FB | 	rdlong	local08, objptr
0667c     16 2B 02 F6 | 	mov	local07, local08
06680     01 2A 66 F0 | 	shl	local07, #1
06684     16 2B 02 F1 | 	add	local07, local08
06688     02 2A 66 F0 | 	shl	local07, #2
0668c     03 00 00 FF 
06690     00 E4 85 F1 | 	sub	objptr, ##1536
06694     F2 2A 02 F1 | 	add	local07, objptr
06698     04 2A 06 F1 | 	add	local07, #4
0669c     15 2F 62 FC | 	wrlong	local09, local07
066a0     03 00 00 FF 
066a4     00 E4 05 F1 | 	add	objptr, ##1536
066a8     F2 2E 02 FB | 	rdlong	local09, objptr
066ac     17 2D 02 F6 | 	mov	local08, local09
066b0     01 2C 66 F0 | 	shl	local08, #1
066b4     17 2D 02 F1 | 	add	local08, local09
066b8     02 2C 66 F0 | 	shl	local08, #2
066bc     03 00 00 FF 
066c0     00 E4 85 F1 | 	sub	objptr, ##1536
066c4     F2 2C 02 F1 | 	add	local08, objptr
066c8     08 2C 06 F1 | 	add	local08, #8
066cc     16 1F 62 FC | 	wrlong	local01, local08
066d0     03 00 00 FF 
066d4     00 E4 05 F1 | 	add	objptr, ##1536
066d8     F2 2A 02 FB | 	rdlong	local07, objptr
066dc     01 2A 06 F1 | 	add	local07, #1
066e0     F2 2A 62 FC | 	wrlong	local07, objptr
066e4     6A 00 00 FF 
066e8     6C E4 85 F1 | 	sub	objptr, ##54380
066ec                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
066ec                 | ' 
066ec                 | ' 
066ec                 | ' 
066ec                 | ' 
066ec                 | ' 
066ec                 | ' 
066ec                 | ' compiledline(lineptr)=t1:  lineptr+=1 
066ec                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
066ec     00 24 0E F2 | 	cmp	local04, #0 wz
066f0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
066f4     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
066f8     38 00 90 5D |  if_ne	jmp	#LR__0567
066fc     6A 00 00 FF 
06700     6C E4 05 F1 | 	add	objptr, ##54380
06704     F2 1E 02 FB | 	rdlong	local01, objptr
06708     0F 2F 02 F6 | 	mov	local09, local01
0670c     01 2E 66 F0 | 	shl	local09, #1
06710     0F 2F 02 F1 | 	add	local09, local01
06714     02 2E 66 F0 | 	shl	local09, #2
06718     03 00 00 FF 
0671c     00 E4 85 F1 | 	sub	objptr, ##1536
06720     F2 2E 02 F1 | 	add	local09, objptr
06724     08 2E 06 F1 | 	add	local09, #8
06728     17 FD 6B FC | 	wrlong	#510, local09
0672c     67 00 00 FF 
06730     6C E4 85 F1 | 	sub	objptr, ##52844
06734                 | LR__0567
06734     A7 F0 03 F6 | 	mov	ptra, fp
06738     B2 00 A0 FD | 	call	#popregs_
0673c                 | _compile_immediate_assign_ret
0673c     2D 00 64 FD | 	ret
06740                 | 
06740                 | ' 
06740                 | ' ' ------------------ compile the line that is calling a command 
06740                 | ' 
06740                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
06740                 | _compile
06740     04 4A 05 F6 | 	mov	COUNT_, #4
06744     A8 00 A0 FD | 	call	#pushregs_
06748     09 1F 0A F6 | 	mov	local01, arg01 wz
0674c     0A 21 02 F6 | 	mov	local02, arg02
06750     0B 23 02 F6 | 	mov	local03, arg03
06754                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
06754                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
06754                 | '  
06754                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
06754                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
06754     0C 00 90 5D |  if_ne	jmp	#LR__0570
06758     00 12 06 F6 | 	mov	arg01, #0
0675c     24 F3 BF FD | 	call	#_compile_immediate
06760     A0 00 90 FD | 	jmp	#LR__0577
06764                 | LR__0570
06764     67 00 00 FF 
06768     6C E4 05 F1 | 	add	objptr, ##52844
0676c     F2 1E 62 FC | 	wrlong	local01, objptr
06770     04 E4 05 F1 | 	add	objptr, #4
06774     F2 20 62 FC | 	wrlong	local02, objptr
06778     67 00 00 FF 
0677c     70 E4 85 F1 | 	sub	objptr, ##52848
06780     11 13 02 F6 | 	mov	arg01, local03
06784     01 12 06 F1 | 	add	arg01, #1
06788     F8 F2 BF FD | 	call	#_compile_immediate
0678c     FD 24 0A F6 | 	mov	local04, result1 wz
06790                 | ' 
06790                 | ' ucompiledline(0)=alinemajor
06790                 | ' ucompiledline(1)=alineminor
06790                 | ' 
06790                 | ' 
06790                 | ' ' cont: 0: this is the first part of the line that will continue
06790                 | ' ' 1 - this is the continuation of the line
06790                 | ' ' 2 - this is the last continued line
06790                 | ' ' 3 - this is the ome and only part
06790                 | ' 
06790                 | ' err=compile_immediate(cont+1) 
06790                 | ' if err=0 then
06790     6C 00 90 5D |  if_ne	jmp	#LR__0576
06794                 | '   if cont=3 orelse cont=2 then 
06794     03 22 0E F2 | 	cmp	local03, #3 wz
06798     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
0679c     60 00 90 5D |  if_ne	jmp	#LR__0575
067a0                 | '     if alinemajor >lastline then 
067a0     6A 00 00 FF 
067a4     78 E4 05 F1 | 	add	objptr, ##54392
067a8     F2 16 02 FB | 	rdlong	arg03, objptr
067ac     6A 00 00 FF 
067b0     78 E4 85 F1 | 	sub	objptr, ##54392
067b4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
067b8     0C 00 90 ED |  if_be	jmp	#LR__0571
067bc     0F 13 02 F6 | 	mov	arg01, local01
067c0     00 F2 BF FD | 	call	#_add_line_at_end
067c4     38 00 90 FD | 	jmp	#LR__0574
067c8                 | LR__0571
067c8     0F 13 02 F6 | 	mov	arg01, local01
067cc     30 EB BF FD | 	call	#_deleteline
067d0                 | '       deleteline(alinemajor)  
067d0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
067d0     6A 00 00 FF 
067d4     78 E4 05 F1 | 	add	objptr, ##54392
067d8     F2 16 02 FB | 	rdlong	arg03, objptr
067dc     6A 00 00 FF 
067e0     78 E4 85 F1 | 	sub	objptr, ##54392
067e4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
067e8     0C 00 90 ED |  if_be	jmp	#LR__0572
067ec     0F 13 02 F6 | 	mov	arg01, local01
067f0     D0 F1 BF FD | 	call	#_add_line_at_end
067f4     08 00 90 FD | 	jmp	#LR__0573
067f8                 | LR__0572
067f8     0F 13 02 F6 | 	mov	arg01, local01
067fc     A8 EF BF FD | 	call	#_insertline
06800                 | LR__0573
06800                 | LR__0574
06800                 | LR__0575
06800                 | LR__0576
06800                 | ' return err
06800     12 FB 01 F6 | 	mov	result1, local04
06804                 | LR__0577
06804     A7 F0 03 F6 | 	mov	ptra, fp
06808     B2 00 A0 FD | 	call	#popregs_
0680c                 | _compile_ret
0680c     2D 00 64 FD | 	ret
06810                 | 
06810                 | ' 
06810                 | ' ' ------------------ compile the line that is assigning to a variable
06810                 | ' 
06810                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
06810                 | _compile_assign
06810     03 4A 05 F6 | 	mov	COUNT_, #3
06814     A8 00 A0 FD | 	call	#pushregs_
06818     09 1F 0A F6 | 	mov	local01, arg01 wz
0681c     0A 21 02 F6 | 	mov	local02, arg02
06820     0B 23 02 F6 | 	mov	local03, arg03
06824                 | ' 
06824                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
06824                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
06824     0C 00 90 5D |  if_ne	jmp	#LR__0580
06828     00 12 06 F6 | 	mov	arg01, #0
0682c     28 FC BF FD | 	call	#_compile_immediate_assign
06830     94 00 90 FD | 	jmp	#LR__0586
06834                 | LR__0580
06834     67 00 00 FF 
06838     6C E4 05 F1 | 	add	objptr, ##52844
0683c     F2 1E 62 FC | 	wrlong	local01, objptr
06840     04 E4 05 F1 | 	add	objptr, #4
06844     F2 20 62 FC | 	wrlong	local02, objptr
06848     67 00 00 FF 
0684c     70 E4 85 F1 | 	sub	objptr, ##52848
06850     11 13 02 F6 | 	mov	arg01, local03
06854     01 12 06 F1 | 	add	arg01, #1
06858     FC FB BF FD | 	call	#_compile_immediate_assign
0685c                 | ' 
0685c                 | ' ucompiledline(0)=alinemajor
0685c                 | ' ucompiledline(1)=alineminor
0685c                 | ' 
0685c                 | ' compile_immediate_assign(cont+1) 
0685c                 | ' 
0685c                 | ' if cont=3 orelse cont=2 then 
0685c     03 22 0E F2 | 	cmp	local03, #3 wz
06860     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06864     60 00 90 5D |  if_ne	jmp	#LR__0585
06868                 | '   if alinemajor >lastline then 
06868     6A 00 00 FF 
0686c     78 E4 05 F1 | 	add	objptr, ##54392
06870     F2 16 02 FB | 	rdlong	arg03, objptr
06874     6A 00 00 FF 
06878     78 E4 85 F1 | 	sub	objptr, ##54392
0687c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06880     0C 00 90 ED |  if_be	jmp	#LR__0581
06884     0F 13 02 F6 | 	mov	arg01, local01
06888     38 F1 BF FD | 	call	#_add_line_at_end
0688c     38 00 90 FD | 	jmp	#LR__0584
06890                 | LR__0581
06890     0F 13 02 F6 | 	mov	arg01, local01
06894     68 EA BF FD | 	call	#_deleteline
06898                 | '     deleteline(alinemajor)  
06898                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
06898     6A 00 00 FF 
0689c     78 E4 05 F1 | 	add	objptr, ##54392
068a0     F2 16 02 FB | 	rdlong	arg03, objptr
068a4     6A 00 00 FF 
068a8     78 E4 85 F1 | 	sub	objptr, ##54392
068ac     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
068b0     0C 00 90 ED |  if_be	jmp	#LR__0582
068b4     0F 13 02 F6 | 	mov	arg01, local01
068b8     08 F1 BF FD | 	call	#_add_line_at_end
068bc     08 00 90 FD | 	jmp	#LR__0583
068c0                 | LR__0582
068c0     0F 13 02 F6 | 	mov	arg01, local01
068c4     E0 EE BF FD | 	call	#_insertline
068c8                 | LR__0583
068c8                 | LR__0584
068c8                 | LR__0585
068c8                 | LR__0586
068c8     A7 F0 03 F6 | 	mov	ptra, fp
068cc     B2 00 A0 FD | 	call	#popregs_
068d0                 | _compile_assign_ret
068d0     2D 00 64 FD | 	ret
068d4                 | 
068d4                 | ' 
068d4                 | ' sub compile_error(errno)
068d4                 | _compile_error
068d4     FF 04 06 F6 | 	mov	_var03, #255
068d8     01 07 02 F6 | 	mov	_var04, _var02
068dc     02 09 02 F6 | 	mov	_var05, _var03
068e0     6A 00 00 FF 
068e4     6C E4 05 F1 | 	add	objptr, ##54380
068e8     F2 0A 02 FB | 	rdlong	_var06, objptr
068ec     05 0D 02 F6 | 	mov	_var07, _var06
068f0     01 0C 66 F0 | 	shl	_var07, #1
068f4     05 0D 02 F1 | 	add	_var07, _var06
068f8     02 0C 66 F0 | 	shl	_var07, #2
068fc     03 00 00 FF 
06900     00 E4 85 F1 | 	sub	objptr, ##1536
06904     F2 0C 02 F1 | 	add	_var07, objptr
06908     06 13 62 FC | 	wrlong	arg01, _var07
0690c     03 00 00 FF 
06910     00 E4 05 F1 | 	add	objptr, ##1536
06914     F2 0C 02 FB | 	rdlong	_var07, objptr
06918     06 0B 02 F6 | 	mov	_var06, _var07
0691c     01 0A 66 F0 | 	shl	_var06, #1
06920     06 0B 02 F1 | 	add	_var06, _var07
06924     02 0A 66 F0 | 	shl	_var06, #2
06928     03 00 00 FF 
0692c     00 E4 85 F1 | 	sub	objptr, ##1536
06930     F2 0A 02 F1 | 	add	_var06, objptr
06934     04 0A 06 F1 | 	add	_var06, #4
06938     05 07 62 FC | 	wrlong	_var04, _var06
0693c     03 00 00 FF 
06940     00 E4 05 F1 | 	add	objptr, ##1536
06944     F2 0C 02 FB | 	rdlong	_var07, objptr
06948     06 0B 02 F6 | 	mov	_var06, _var07
0694c     01 0A 66 F0 | 	shl	_var06, #1
06950     06 0B 02 F1 | 	add	_var06, _var07
06954     02 0A 66 F0 | 	shl	_var06, #2
06958     03 00 00 FF 
0695c     00 E4 85 F1 | 	sub	objptr, ##1536
06960     F2 0A 02 F1 | 	add	_var06, objptr
06964     08 0A 06 F1 | 	add	_var06, #8
06968     05 09 62 FC | 	wrlong	_var05, _var06
0696c     03 00 00 FF 
06970     00 E4 05 F1 | 	add	objptr, ##1536
06974     F2 12 02 FB | 	rdlong	arg01, objptr
06978     01 12 06 F1 | 	add	arg01, #1
0697c     F2 12 62 FC | 	wrlong	arg01, objptr
06980     6A 00 00 FF 
06984     6C E4 85 F1 | 	sub	objptr, ##54380
06988                 | _compile_error_ret
06988     2D 00 64 FD | 	ret
0698c                 | 
0698c                 | ' 
0698c                 | ' sub compile_unknown() 
0698c                 | _compile_unknown
0698c     FF 04 06 F6 | 	mov	_var03, #255
06990     17 00 06 F6 | 	mov	_var01, #23
06994     01 07 02 F6 | 	mov	_var04, _var02
06998     02 01 02 F6 | 	mov	_var01, _var03
0699c     6A 00 00 FF 
069a0     6C E4 05 F1 | 	add	objptr, ##54380
069a4     F2 08 02 FB | 	rdlong	_var05, objptr
069a8     04 0B 02 F6 | 	mov	_var06, _var05
069ac     01 0A 66 F0 | 	shl	_var06, #1
069b0     04 0B 02 F1 | 	add	_var06, _var05
069b4     02 0A 66 F0 | 	shl	_var06, #2
069b8     03 00 00 FF 
069bc     00 E4 85 F1 | 	sub	objptr, ##1536
069c0     F2 0A 02 F1 | 	add	_var06, objptr
069c4     05 2F 68 FC | 	wrlong	#23, _var06
069c8     03 00 00 FF 
069cc     00 E4 05 F1 | 	add	objptr, ##1536
069d0     F2 0A 02 FB | 	rdlong	_var06, objptr
069d4     05 09 02 F6 | 	mov	_var05, _var06
069d8     01 08 66 F0 | 	shl	_var05, #1
069dc     05 09 02 F1 | 	add	_var05, _var06
069e0     02 08 66 F0 | 	shl	_var05, #2
069e4     03 00 00 FF 
069e8     00 E4 85 F1 | 	sub	objptr, ##1536
069ec     F2 08 02 F1 | 	add	_var05, objptr
069f0     04 08 06 F1 | 	add	_var05, #4
069f4     04 07 62 FC | 	wrlong	_var04, _var05
069f8     03 00 00 FF 
069fc     00 E4 05 F1 | 	add	objptr, ##1536
06a00     F2 0A 02 FB | 	rdlong	_var06, objptr
06a04     05 09 02 F6 | 	mov	_var05, _var06
06a08     01 08 66 F0 | 	shl	_var05, #1
06a0c     05 09 02 F1 | 	add	_var05, _var06
06a10     02 08 66 F0 | 	shl	_var05, #2
06a14     03 00 00 FF 
06a18     00 E4 85 F1 | 	sub	objptr, ##1536
06a1c     F2 08 02 F1 | 	add	_var05, objptr
06a20     08 08 06 F1 | 	add	_var05, #8
06a24     04 01 62 FC | 	wrlong	_var01, _var05
06a28     03 00 00 FF 
06a2c     00 E4 05 F1 | 	add	objptr, ##1536
06a30     F2 0A 02 FB | 	rdlong	_var06, objptr
06a34     01 0A 06 F1 | 	add	_var06, #1
06a38     F2 0A 62 FC | 	wrlong	_var06, objptr
06a3c     6A 00 00 FF 
06a40     6C E4 85 F1 | 	sub	objptr, ##54380
06a44                 | _compile_unknown_ret
06a44     2D 00 64 FD | 	ret
06a48                 | 
06a48                 | ' 
06a48                 | ' function compile_fun_2p() as ulong
06a48                 | _compile_fun_2p
06a48     01 4A 05 F6 | 	mov	COUNT_, #1
06a4c     A8 00 A0 FD | 	call	#pushregs_
06a50     D0 22 B0 FD | 	call	#_expr
06a54                 | ' 
06a54                 | ' expr()
06a54                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06a54     57 00 00 FF 
06a58     34 E4 05 F1 | 	add	objptr, ##44596
06a5c     F2 1E 02 FB | 	rdlong	local01, objptr
06a60     03 1E 66 F0 | 	shl	local01, #3
06a64     02 00 00 FF 
06a68     38 E4 85 F1 | 	sub	objptr, ##1080
06a6c     F2 1E 02 F1 | 	add	local01, objptr
06a70     04 1E 06 F1 | 	add	local01, #4
06a74     0F 1F 02 FB | 	rdlong	local01, local01
06a78     11 1E 0E F2 | 	cmp	local01, #17 wz
06a7c     54 00 00 FF 
06a80     FC E5 85 F1 | 	sub	objptr, ##43516
06a84     15 FA 05 56 |  if_ne	mov	result1, #21
06a88     24 00 90 5D |  if_ne	jmp	#LR__0590
06a8c     57 00 00 FF 
06a90     34 E4 05 F1 | 	add	objptr, ##44596
06a94     F2 1E 02 FB | 	rdlong	local01, objptr
06a98     01 1E 06 F1 | 	add	local01, #1
06a9c     F2 1E 62 FC | 	wrlong	local01, objptr
06aa0     57 00 00 FF 
06aa4     34 E4 85 F1 | 	sub	objptr, ##44596
06aa8     78 22 B0 FD | 	call	#_expr
06aac     00 FA 05 F6 | 	mov	result1, #0
06ab0                 | LR__0590
06ab0     A7 F0 03 F6 | 	mov	ptra, fp
06ab4     B2 00 A0 FD | 	call	#popregs_
06ab8                 | _compile_fun_2p_ret
06ab8     2D 00 64 FD | 	ret
06abc                 | 
06abc                 | ' 
06abc                 | ' function compile_fun_3p() as ulong
06abc                 | _compile_fun_3p
06abc     01 4A 05 F6 | 	mov	COUNT_, #1
06ac0     A8 00 A0 FD | 	call	#pushregs_
06ac4     5C 22 B0 FD | 	call	#_expr
06ac8                 | ' 
06ac8                 | ' expr()
06ac8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06ac8     57 00 00 FF 
06acc     34 E4 05 F1 | 	add	objptr, ##44596
06ad0     F2 1E 02 FB | 	rdlong	local01, objptr
06ad4     03 1E 66 F0 | 	shl	local01, #3
06ad8     02 00 00 FF 
06adc     38 E4 85 F1 | 	sub	objptr, ##1080
06ae0     F2 1E 02 F1 | 	add	local01, objptr
06ae4     04 1E 06 F1 | 	add	local01, #4
06ae8     0F 1F 02 FB | 	rdlong	local01, local01
06aec     11 1E 0E F2 | 	cmp	local01, #17 wz
06af0     54 00 00 FF 
06af4     FC E5 85 F1 | 	sub	objptr, ##43516
06af8     15 FA 05 56 |  if_ne	mov	result1, #21
06afc     7C 00 90 5D |  if_ne	jmp	#LR__0600
06b00     57 00 00 FF 
06b04     34 E4 05 F1 | 	add	objptr, ##44596
06b08     F2 1E 02 FB | 	rdlong	local01, objptr
06b0c     01 1E 06 F1 | 	add	local01, #1
06b10     F2 1E 62 FC | 	wrlong	local01, objptr
06b14     57 00 00 FF 
06b18     34 E4 85 F1 | 	sub	objptr, ##44596
06b1c     04 22 B0 FD | 	call	#_expr
06b20                 | ' expr()
06b20                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06b20     57 00 00 FF 
06b24     34 E4 05 F1 | 	add	objptr, ##44596
06b28     F2 1E 02 FB | 	rdlong	local01, objptr
06b2c     03 1E 66 F0 | 	shl	local01, #3
06b30     02 00 00 FF 
06b34     38 E4 85 F1 | 	sub	objptr, ##1080
06b38     F2 1E 02 F1 | 	add	local01, objptr
06b3c     04 1E 06 F1 | 	add	local01, #4
06b40     0F 1F 02 FB | 	rdlong	local01, local01
06b44     11 1E 0E F2 | 	cmp	local01, #17 wz
06b48     54 00 00 FF 
06b4c     FC E5 85 F1 | 	sub	objptr, ##43516
06b50     15 FA 05 56 |  if_ne	mov	result1, #21
06b54     24 00 90 5D |  if_ne	jmp	#LR__0600
06b58     57 00 00 FF 
06b5c     34 E4 05 F1 | 	add	objptr, ##44596
06b60     F2 1E 02 FB | 	rdlong	local01, objptr
06b64     01 1E 06 F1 | 	add	local01, #1
06b68     F2 1E 62 FC | 	wrlong	local01, objptr
06b6c     57 00 00 FF 
06b70     34 E4 85 F1 | 	sub	objptr, ##44596
06b74     AC 21 B0 FD | 	call	#_expr
06b78     00 FA 05 F6 | 	mov	result1, #0
06b7c                 | LR__0600
06b7c     A7 F0 03 F6 | 	mov	ptra, fp
06b80     B2 00 A0 FD | 	call	#popregs_
06b84                 | _compile_fun_3p_ret
06b84     2D 00 64 FD | 	ret
06b88                 | 
06b88                 | ' 
06b88                 | ' function compile_fun_4p() as ulong
06b88                 | _compile_fun_4p
06b88     01 4A 05 F6 | 	mov	COUNT_, #1
06b8c     A8 00 A0 FD | 	call	#pushregs_
06b90     90 21 B0 FD | 	call	#_expr
06b94                 | ' 
06b94                 | ' expr()
06b94                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06b94     57 00 00 FF 
06b98     34 E4 05 F1 | 	add	objptr, ##44596
06b9c     F2 1E 02 FB | 	rdlong	local01, objptr
06ba0     03 1E 66 F0 | 	shl	local01, #3
06ba4     02 00 00 FF 
06ba8     38 E4 85 F1 | 	sub	objptr, ##1080
06bac     F2 1E 02 F1 | 	add	local01, objptr
06bb0     04 1E 06 F1 | 	add	local01, #4
06bb4     0F 1F 02 FB | 	rdlong	local01, local01
06bb8     11 1E 0E F2 | 	cmp	local01, #17 wz
06bbc     54 00 00 FF 
06bc0     FC E5 85 F1 | 	sub	objptr, ##43516
06bc4     15 FA 05 56 |  if_ne	mov	result1, #21
06bc8     D4 00 90 5D |  if_ne	jmp	#LR__0610
06bcc     57 00 00 FF 
06bd0     34 E4 05 F1 | 	add	objptr, ##44596
06bd4     F2 1E 02 FB | 	rdlong	local01, objptr
06bd8     01 1E 06 F1 | 	add	local01, #1
06bdc     F2 1E 62 FC | 	wrlong	local01, objptr
06be0     57 00 00 FF 
06be4     34 E4 85 F1 | 	sub	objptr, ##44596
06be8     38 21 B0 FD | 	call	#_expr
06bec                 | ' expr()
06bec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06bec     57 00 00 FF 
06bf0     34 E4 05 F1 | 	add	objptr, ##44596
06bf4     F2 1E 02 FB | 	rdlong	local01, objptr
06bf8     03 1E 66 F0 | 	shl	local01, #3
06bfc     02 00 00 FF 
06c00     38 E4 85 F1 | 	sub	objptr, ##1080
06c04     F2 1E 02 F1 | 	add	local01, objptr
06c08     04 1E 06 F1 | 	add	local01, #4
06c0c     0F 1F 02 FB | 	rdlong	local01, local01
06c10     11 1E 0E F2 | 	cmp	local01, #17 wz
06c14     54 00 00 FF 
06c18     FC E5 85 F1 | 	sub	objptr, ##43516
06c1c     15 FA 05 56 |  if_ne	mov	result1, #21
06c20     7C 00 90 5D |  if_ne	jmp	#LR__0610
06c24     57 00 00 FF 
06c28     34 E4 05 F1 | 	add	objptr, ##44596
06c2c     F2 1E 02 FB | 	rdlong	local01, objptr
06c30     01 1E 06 F1 | 	add	local01, #1
06c34     F2 1E 62 FC | 	wrlong	local01, objptr
06c38     57 00 00 FF 
06c3c     34 E4 85 F1 | 	sub	objptr, ##44596
06c40     E0 20 B0 FD | 	call	#_expr
06c44                 | ' expr()
06c44                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c44     57 00 00 FF 
06c48     34 E4 05 F1 | 	add	objptr, ##44596
06c4c     F2 1E 02 FB | 	rdlong	local01, objptr
06c50     03 1E 66 F0 | 	shl	local01, #3
06c54     02 00 00 FF 
06c58     38 E4 85 F1 | 	sub	objptr, ##1080
06c5c     F2 1E 02 F1 | 	add	local01, objptr
06c60     04 1E 06 F1 | 	add	local01, #4
06c64     0F 1F 02 FB | 	rdlong	local01, local01
06c68     11 1E 0E F2 | 	cmp	local01, #17 wz
06c6c     54 00 00 FF 
06c70     FC E5 85 F1 | 	sub	objptr, ##43516
06c74     15 FA 05 56 |  if_ne	mov	result1, #21
06c78     24 00 90 5D |  if_ne	jmp	#LR__0610
06c7c     57 00 00 FF 
06c80     34 E4 05 F1 | 	add	objptr, ##44596
06c84     F2 1E 02 FB | 	rdlong	local01, objptr
06c88     01 1E 06 F1 | 	add	local01, #1
06c8c     F2 1E 62 FC | 	wrlong	local01, objptr
06c90     57 00 00 FF 
06c94     34 E4 85 F1 | 	sub	objptr, ##44596
06c98     88 20 B0 FD | 	call	#_expr
06c9c     00 FA 05 F6 | 	mov	result1, #0
06ca0                 | LR__0610
06ca0     A7 F0 03 F6 | 	mov	ptra, fp
06ca4     B2 00 A0 FD | 	call	#popregs_
06ca8                 | _compile_fun_4p_ret
06ca8     2D 00 64 FD | 	ret
06cac                 | 
06cac                 | ' 
06cac                 | ' 
06cac                 | ' function compile_fun_5p() as ulong
06cac                 | _compile_fun_5p
06cac     01 4A 05 F6 | 	mov	COUNT_, #1
06cb0     A8 00 A0 FD | 	call	#pushregs_
06cb4     6C 20 B0 FD | 	call	#_expr
06cb8                 | ' 
06cb8                 | ' expr()
06cb8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06cb8     57 00 00 FF 
06cbc     34 E4 05 F1 | 	add	objptr, ##44596
06cc0     F2 1E 02 FB | 	rdlong	local01, objptr
06cc4     03 1E 66 F0 | 	shl	local01, #3
06cc8     02 00 00 FF 
06ccc     38 E4 85 F1 | 	sub	objptr, ##1080
06cd0     F2 1E 02 F1 | 	add	local01, objptr
06cd4     04 1E 06 F1 | 	add	local01, #4
06cd8     0F 1F 02 FB | 	rdlong	local01, local01
06cdc     11 1E 0E F2 | 	cmp	local01, #17 wz
06ce0     54 00 00 FF 
06ce4     FC E5 85 F1 | 	sub	objptr, ##43516
06ce8     15 FA 05 56 |  if_ne	mov	result1, #21
06cec     2C 01 90 5D |  if_ne	jmp	#LR__0620
06cf0     57 00 00 FF 
06cf4     34 E4 05 F1 | 	add	objptr, ##44596
06cf8     F2 1E 02 FB | 	rdlong	local01, objptr
06cfc     01 1E 06 F1 | 	add	local01, #1
06d00     F2 1E 62 FC | 	wrlong	local01, objptr
06d04     57 00 00 FF 
06d08     34 E4 85 F1 | 	sub	objptr, ##44596
06d0c     14 20 B0 FD | 	call	#_expr
06d10                 | ' expr()
06d10                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d10     57 00 00 FF 
06d14     34 E4 05 F1 | 	add	objptr, ##44596
06d18     F2 1E 02 FB | 	rdlong	local01, objptr
06d1c     03 1E 66 F0 | 	shl	local01, #3
06d20     02 00 00 FF 
06d24     38 E4 85 F1 | 	sub	objptr, ##1080
06d28     F2 1E 02 F1 | 	add	local01, objptr
06d2c     04 1E 06 F1 | 	add	local01, #4
06d30     0F 1F 02 FB | 	rdlong	local01, local01
06d34     11 1E 0E F2 | 	cmp	local01, #17 wz
06d38     54 00 00 FF 
06d3c     FC E5 85 F1 | 	sub	objptr, ##43516
06d40     15 FA 05 56 |  if_ne	mov	result1, #21
06d44     D4 00 90 5D |  if_ne	jmp	#LR__0620
06d48     57 00 00 FF 
06d4c     34 E4 05 F1 | 	add	objptr, ##44596
06d50     F2 1E 02 FB | 	rdlong	local01, objptr
06d54     01 1E 06 F1 | 	add	local01, #1
06d58     F2 1E 62 FC | 	wrlong	local01, objptr
06d5c     57 00 00 FF 
06d60     34 E4 85 F1 | 	sub	objptr, ##44596
06d64     BC 1F B0 FD | 	call	#_expr
06d68                 | ' expr()
06d68                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d68     57 00 00 FF 
06d6c     34 E4 05 F1 | 	add	objptr, ##44596
06d70     F2 1E 02 FB | 	rdlong	local01, objptr
06d74     03 1E 66 F0 | 	shl	local01, #3
06d78     02 00 00 FF 
06d7c     38 E4 85 F1 | 	sub	objptr, ##1080
06d80     F2 1E 02 F1 | 	add	local01, objptr
06d84     04 1E 06 F1 | 	add	local01, #4
06d88     0F 1F 02 FB | 	rdlong	local01, local01
06d8c     11 1E 0E F2 | 	cmp	local01, #17 wz
06d90     54 00 00 FF 
06d94     FC E5 85 F1 | 	sub	objptr, ##43516
06d98     15 FA 05 56 |  if_ne	mov	result1, #21
06d9c     7C 00 90 5D |  if_ne	jmp	#LR__0620
06da0     57 00 00 FF 
06da4     34 E4 05 F1 | 	add	objptr, ##44596
06da8     F2 1E 02 FB | 	rdlong	local01, objptr
06dac     01 1E 06 F1 | 	add	local01, #1
06db0     F2 1E 62 FC | 	wrlong	local01, objptr
06db4     57 00 00 FF 
06db8     34 E4 85 F1 | 	sub	objptr, ##44596
06dbc     64 1F B0 FD | 	call	#_expr
06dc0                 | ' expr()
06dc0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06dc0     57 00 00 FF 
06dc4     34 E4 05 F1 | 	add	objptr, ##44596
06dc8     F2 1E 02 FB | 	rdlong	local01, objptr
06dcc     03 1E 66 F0 | 	shl	local01, #3
06dd0     02 00 00 FF 
06dd4     38 E4 85 F1 | 	sub	objptr, ##1080
06dd8     F2 1E 02 F1 | 	add	local01, objptr
06ddc     04 1E 06 F1 | 	add	local01, #4
06de0     0F 1F 02 FB | 	rdlong	local01, local01
06de4     11 1E 0E F2 | 	cmp	local01, #17 wz
06de8     54 00 00 FF 
06dec     FC E5 85 F1 | 	sub	objptr, ##43516
06df0     15 FA 05 56 |  if_ne	mov	result1, #21
06df4     24 00 90 5D |  if_ne	jmp	#LR__0620
06df8     57 00 00 FF 
06dfc     34 E4 05 F1 | 	add	objptr, ##44596
06e00     F2 1E 02 FB | 	rdlong	local01, objptr
06e04     01 1E 06 F1 | 	add	local01, #1
06e08     F2 1E 62 FC | 	wrlong	local01, objptr
06e0c     57 00 00 FF 
06e10     34 E4 85 F1 | 	sub	objptr, ##44596
06e14     0C 1F B0 FD | 	call	#_expr
06e18     00 FA 05 F6 | 	mov	result1, #0
06e1c                 | LR__0620
06e1c     A7 F0 03 F6 | 	mov	ptra, fp
06e20     B2 00 A0 FD | 	call	#popregs_
06e24                 | _compile_fun_5p_ret
06e24     2D 00 64 FD | 	ret
06e28                 | 
06e28                 | ' 
06e28                 | ' function compile_fun_varp() as ulong 
06e28                 | _compile_fun_varp
06e28     02 4A 05 F6 | 	mov	COUNT_, #2
06e2c     A8 00 A0 FD | 	call	#pushregs_
06e30     00 1E 06 F6 | 	mov	local01, #0
06e34                 | ' i=0
06e34                 | ' if lparts(ct).token<>token_end then
06e34     57 00 00 FF 
06e38     34 E4 05 F1 | 	add	objptr, ##44596
06e3c     F2 20 02 FB | 	rdlong	local02, objptr
06e40     03 20 66 F0 | 	shl	local02, #3
06e44     02 00 00 FF 
06e48     38 E4 85 F1 | 	sub	objptr, ##1080
06e4c     F2 20 02 F1 | 	add	local02, objptr
06e50     04 20 06 F1 | 	add	local02, #4
06e54     10 21 02 FB | 	rdlong	local02, local02
06e58     FE 21 0E F2 | 	cmp	local02, #510 wz
06e5c     54 00 00 FF 
06e60     FC E5 85 F1 | 	sub	objptr, ##43516
06e64     5C 00 90 AD |  if_e	jmp	#LR__0632
06e68                 | '   do
06e68                 | LR__0630
06e68     B8 1E B0 FD | 	call	#_expr
06e6c     01 1E 06 F1 | 	add	local01, #1
06e70                 | '   expr()
06e70                 | '    i+=1
06e70                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
06e70     57 00 00 FF 
06e74     34 E4 05 F1 | 	add	objptr, ##44596
06e78     F2 20 02 FB | 	rdlong	local02, objptr
06e7c     03 20 66 F0 | 	shl	local02, #3
06e80     02 00 00 FF 
06e84     38 E4 85 F1 | 	sub	objptr, ##1080
06e88     F2 20 02 F1 | 	add	local02, objptr
06e8c     04 20 06 F1 | 	add	local02, #4
06e90     10 21 02 FB | 	rdlong	local02, local02
06e94     11 20 0E F2 | 	cmp	local02, #17 wz
06e98     54 00 00 FF 
06e9c     FC E5 85 F1 | 	sub	objptr, ##43516
06ea0     20 00 90 5D |  if_ne	jmp	#LR__0631
06ea4     57 00 00 FF 
06ea8     34 E4 05 F1 | 	add	objptr, ##44596
06eac     F2 20 02 FB | 	rdlong	local02, objptr
06eb0     01 20 06 F1 | 	add	local02, #1
06eb4     F2 20 62 FC | 	wrlong	local02, objptr
06eb8     57 00 00 FF 
06ebc     34 E4 85 F1 | 	sub	objptr, ##44596
06ec0     A4 FF 9F FD | 	jmp	#LR__0630
06ec4                 | LR__0631
06ec4                 | LR__0632
06ec4                 | ' return i
06ec4     0F FB 01 F6 | 	mov	result1, local01
06ec8     A7 F0 03 F6 | 	mov	ptra, fp
06ecc     B2 00 A0 FD | 	call	#popregs_
06ed0                 | _compile_fun_varp_ret
06ed0     2D 00 64 FD | 	ret
06ed4                 | 
06ed4                 | ' 
06ed4                 | ' 
06ed4                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
06ed4                 | _compile_print
06ed4     0B 4A 05 F6 | 	mov	COUNT_, #11
06ed8     A8 00 A0 FD | 	call	#pushregs_
06edc     00 1E 06 F6 | 	mov	local01, #0
06ee0     1D 22 06 F6 | 	mov	local03, #29
06ee4                 | ' t1.result.uresult=0 : t1.result_type=result_uint
06ee4                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
06ee4     57 00 00 FF 
06ee8     34 E4 05 F1 | 	add	objptr, ##44596
06eec     F2 24 02 FB | 	rdlong	local04, objptr
06ef0     03 24 66 F0 | 	shl	local04, #3
06ef4     02 00 00 FF 
06ef8     38 E4 85 F1 | 	sub	objptr, ##1080
06efc     F2 24 02 F1 | 	add	local04, objptr
06f00     04 24 06 F1 | 	add	local04, #4
06f04     12 25 02 FB | 	rdlong	local04, local04
06f08     FE 25 0E F2 | 	cmp	local04, #510 wz
06f0c     54 00 00 FF 
06f10     FC E5 85 F1 | 	sub	objptr, ##43516
06f14     68 01 90 5D |  if_ne	jmp	#LR__0640
06f18     20 22 06 F6 | 	mov	local03, #32
06f1c     0F 27 02 F6 | 	mov	local05, local01
06f20     10 29 02 F6 | 	mov	local06, local02
06f24     11 2B 02 F6 | 	mov	local07, local03
06f28     6A 00 00 FF 
06f2c     6C E4 05 F1 | 	add	objptr, ##54380
06f30     F2 2C 02 FB | 	rdlong	local08, objptr
06f34     16 2F 02 F6 | 	mov	local09, local08
06f38     01 2E 66 F0 | 	shl	local09, #1
06f3c     16 2F 02 F1 | 	add	local09, local08
06f40     02 2E 66 F0 | 	shl	local09, #2
06f44     03 00 00 FF 
06f48     00 E4 85 F1 | 	sub	objptr, ##1536
06f4c     F2 2E 02 F1 | 	add	local09, objptr
06f50     17 27 62 FC | 	wrlong	local05, local09
06f54     03 00 00 FF 
06f58     00 E4 05 F1 | 	add	objptr, ##1536
06f5c     F2 26 02 FB | 	rdlong	local05, objptr
06f60     13 31 02 F6 | 	mov	local10, local05
06f64     01 30 66 F0 | 	shl	local10, #1
06f68     13 31 02 F1 | 	add	local10, local05
06f6c     02 30 66 F0 | 	shl	local10, #2
06f70     03 00 00 FF 
06f74     00 E4 85 F1 | 	sub	objptr, ##1536
06f78     F2 30 02 F1 | 	add	local10, objptr
06f7c     04 30 06 F1 | 	add	local10, #4
06f80     18 29 62 FC | 	wrlong	local06, local10
06f84     03 00 00 FF 
06f88     00 E4 05 F1 | 	add	objptr, ##1536
06f8c     F2 26 02 FB | 	rdlong	local05, objptr
06f90     13 33 02 F6 | 	mov	local11, local05
06f94     01 32 66 F0 | 	shl	local11, #1
06f98     13 33 02 F1 | 	add	local11, local05
06f9c     02 32 66 F0 | 	shl	local11, #2
06fa0     03 00 00 FF 
06fa4     00 E4 85 F1 | 	sub	objptr, ##1536
06fa8     F2 32 02 F1 | 	add	local11, objptr
06fac     08 32 06 F1 | 	add	local11, #8
06fb0     19 2B 62 FC | 	wrlong	local07, local11
06fb4     03 00 00 FF 
06fb8     00 E4 05 F1 | 	add	objptr, ##1536
06fbc     F2 26 02 FB | 	rdlong	local05, objptr
06fc0     01 26 06 F1 | 	add	local05, #1
06fc4     F2 26 62 FC | 	wrlong	local05, objptr
06fc8     44 22 06 F6 | 	mov	local03, #68
06fcc     0F 27 02 F6 | 	mov	local05, local01
06fd0     10 29 02 F6 | 	mov	local06, local02
06fd4     11 2B 02 F6 | 	mov	local07, local03
06fd8     F2 2C 02 FB | 	rdlong	local08, objptr
06fdc     16 2F 02 F6 | 	mov	local09, local08
06fe0     01 2E 66 F0 | 	shl	local09, #1
06fe4     16 2F 02 F1 | 	add	local09, local08
06fe8     02 2E 66 F0 | 	shl	local09, #2
06fec     03 00 00 FF 
06ff0     00 E4 85 F1 | 	sub	objptr, ##1536
06ff4     F2 2E 02 F1 | 	add	local09, objptr
06ff8     17 27 62 FC | 	wrlong	local05, local09
06ffc     03 00 00 FF 
07000     00 E4 05 F1 | 	add	objptr, ##1536
07004     F2 32 02 FB | 	rdlong	local11, objptr
07008     19 31 02 F6 | 	mov	local10, local11
0700c     01 30 66 F0 | 	shl	local10, #1
07010     19 31 02 F1 | 	add	local10, local11
07014     02 30 66 F0 | 	shl	local10, #2
07018     03 00 00 FF 
0701c     00 E4 85 F1 | 	sub	objptr, ##1536
07020     F2 30 02 F1 | 	add	local10, objptr
07024     04 30 06 F1 | 	add	local10, #4
07028     18 29 62 FC | 	wrlong	local06, local10
0702c     03 00 00 FF 
07030     00 E4 05 F1 | 	add	objptr, ##1536
07034     F2 30 02 FB | 	rdlong	local10, objptr
07038     18 33 02 F6 | 	mov	local11, local10
0703c     01 32 66 F0 | 	shl	local11, #1
07040     18 33 02 F1 | 	add	local11, local10
07044     02 32 66 F0 | 	shl	local11, #2
07048     03 00 00 FF 
0704c     00 E4 85 F1 | 	sub	objptr, ##1536
07050     F2 32 02 F1 | 	add	local11, objptr
07054     08 32 06 F1 | 	add	local11, #8
07058     19 2B 62 FC | 	wrlong	local07, local11
0705c     03 00 00 FF 
07060     00 E4 05 F1 | 	add	objptr, ##1536
07064     F2 26 02 FB | 	rdlong	local05, objptr
07068     01 26 06 F1 | 	add	local05, #1
0706c     F2 26 62 FC | 	wrlong	local05, objptr
07070     6A 00 00 FF 
07074     6C E4 85 F1 | 	sub	objptr, ##54380
07078     00 FA 05 F6 | 	mov	result1, #0
0707c     20 05 90 FD | 	jmp	#LR__0647
07080                 | LR__0640
07080                 | ' do
07080                 | LR__0641
07080     A0 1C B0 FD | 	call	#_expr
07084                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
07084                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07084     57 00 00 FF 
07088     34 E4 05 F1 | 	add	objptr, ##44596
0708c     F2 24 02 FB | 	rdlong	local04, objptr
07090     03 24 66 F0 | 	shl	local04, #3
07094     02 00 00 FF 
07098     38 E4 85 F1 | 	sub	objptr, ##1080
0709c     F2 24 02 F1 | 	add	local04, objptr
070a0     04 24 06 F1 | 	add	local04, #4
070a4     12 2D 02 FB | 	rdlong	local08, local04
070a8     11 2C 0E F2 | 	cmp	local08, #17 wz
070ac     54 00 00 FF 
070b0     FC E5 85 F1 | 	sub	objptr, ##43516
070b4     60 01 90 5D |  if_ne	jmp	#LR__0642
070b8     21 22 06 F6 | 	mov	local03, #33
070bc     0F 27 02 F6 | 	mov	local05, local01
070c0     10 29 02 F6 | 	mov	local06, local02
070c4     11 2B 02 F6 | 	mov	local07, local03
070c8     6A 00 00 FF 
070cc     6C E4 05 F1 | 	add	objptr, ##54380
070d0     F2 2C 02 FB | 	rdlong	local08, objptr
070d4     16 2F 02 F6 | 	mov	local09, local08
070d8     01 2E 66 F0 | 	shl	local09, #1
070dc     16 2F 02 F1 | 	add	local09, local08
070e0     02 2E 66 F0 | 	shl	local09, #2
070e4     03 00 00 FF 
070e8     00 E4 85 F1 | 	sub	objptr, ##1536
070ec     F2 2E 02 F1 | 	add	local09, objptr
070f0     17 27 62 FC | 	wrlong	local05, local09
070f4     03 00 00 FF 
070f8     00 E4 05 F1 | 	add	objptr, ##1536
070fc     F2 32 02 FB | 	rdlong	local11, objptr
07100     19 31 02 F6 | 	mov	local10, local11
07104     01 30 66 F0 | 	shl	local10, #1
07108     19 31 02 F1 | 	add	local10, local11
0710c     02 30 66 F0 | 	shl	local10, #2
07110     03 00 00 FF 
07114     00 E4 85 F1 | 	sub	objptr, ##1536
07118     F2 30 02 F1 | 	add	local10, objptr
0711c     04 30 06 F1 | 	add	local10, #4
07120     18 29 62 FC | 	wrlong	local06, local10
07124     03 00 00 FF 
07128     00 E4 05 F1 | 	add	objptr, ##1536
0712c     F2 26 02 FB | 	rdlong	local05, objptr
07130     13 33 02 F6 | 	mov	local11, local05
07134     01 32 66 F0 | 	shl	local11, #1
07138     13 33 02 F1 | 	add	local11, local05
0713c     02 32 66 F0 | 	shl	local11, #2
07140     03 00 00 FF 
07144     00 E4 85 F1 | 	sub	objptr, ##1536
07148     F2 32 02 F1 | 	add	local11, objptr
0714c     08 32 06 F1 | 	add	local11, #8
07150     19 2B 62 FC | 	wrlong	local07, local11
07154     03 00 00 FF 
07158     00 E4 05 F1 | 	add	objptr, ##1536
0715c     F2 26 02 FB | 	rdlong	local05, objptr
07160     01 26 06 F1 | 	add	local05, #1
07164     F2 26 62 FC | 	wrlong	local05, objptr
07168     44 22 06 F6 | 	mov	local03, #68
0716c     0F 27 02 F6 | 	mov	local05, local01
07170     10 29 02 F6 | 	mov	local06, local02
07174     11 2B 02 F6 | 	mov	local07, local03
07178     F2 2C 02 FB | 	rdlong	local08, objptr
0717c     16 2F 02 F6 | 	mov	local09, local08
07180     01 2E 66 F0 | 	shl	local09, #1
07184     16 2F 02 F1 | 	add	local09, local08
07188     02 2E 66 F0 | 	shl	local09, #2
0718c     03 00 00 FF 
07190     00 E4 85 F1 | 	sub	objptr, ##1536
07194     F2 2E 02 F1 | 	add	local09, objptr
07198     17 27 62 FC | 	wrlong	local05, local09
0719c     03 00 00 FF 
071a0     00 E4 05 F1 | 	add	objptr, ##1536
071a4     F2 32 02 FB | 	rdlong	local11, objptr
071a8     19 31 02 F6 | 	mov	local10, local11
071ac     01 30 66 F0 | 	shl	local10, #1
071b0     19 31 02 F1 | 	add	local10, local11
071b4     02 30 66 F0 | 	shl	local10, #2
071b8     03 00 00 FF 
071bc     00 E4 85 F1 | 	sub	objptr, ##1536
071c0     F2 30 02 F1 | 	add	local10, objptr
071c4     04 30 06 F1 | 	add	local10, #4
071c8     18 29 62 FC | 	wrlong	local06, local10
071cc     03 00 00 FF 
071d0     00 E4 05 F1 | 	add	objptr, ##1536
071d4     F2 30 02 FB | 	rdlong	local10, objptr
071d8     18 33 02 F6 | 	mov	local11, local10
071dc     01 32 66 F0 | 	shl	local11, #1
071e0     18 33 02 F1 | 	add	local11, local10
071e4     02 32 66 F0 | 	shl	local11, #2
071e8     03 00 00 FF 
071ec     00 E4 85 F1 | 	sub	objptr, ##1536
071f0     F2 32 02 F1 | 	add	local11, objptr
071f4     08 32 06 F1 | 	add	local11, #8
071f8     19 2B 62 FC | 	wrlong	local07, local11
071fc     03 00 00 FF 
07200     00 E4 05 F1 | 	add	objptr, ##1536
07204     F2 26 02 FB | 	rdlong	local05, objptr
07208     01 26 06 F1 | 	add	local05, #1
0720c     F2 26 62 FC | 	wrlong	local05, objptr
07210     6A 00 00 FF 
07214     6C E4 85 F1 | 	sub	objptr, ##54380
07218                 | LR__0642
07218                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07218     57 00 00 FF 
0721c     34 E4 05 F1 | 	add	objptr, ##44596
07220     F2 24 02 FB | 	rdlong	local04, objptr
07224     03 24 66 F0 | 	shl	local04, #3
07228     02 00 00 FF 
0722c     38 E4 85 F1 | 	sub	objptr, ##1080
07230     F2 24 02 F1 | 	add	local04, objptr
07234     04 24 06 F1 | 	add	local04, #4
07238     12 2D 02 FB | 	rdlong	local08, local04
0723c     12 2C 0E F2 | 	cmp	local08, #18 wz
07240     54 00 00 FF 
07244     FC E5 85 F1 | 	sub	objptr, ##43516
07248     60 01 90 5D |  if_ne	jmp	#LR__0643
0724c     22 22 06 F6 | 	mov	local03, #34
07250     0F 27 02 F6 | 	mov	local05, local01
07254     10 29 02 F6 | 	mov	local06, local02
07258     11 2B 02 F6 | 	mov	local07, local03
0725c     6A 00 00 FF 
07260     6C E4 05 F1 | 	add	objptr, ##54380
07264     F2 2C 02 FB | 	rdlong	local08, objptr
07268     16 2F 02 F6 | 	mov	local09, local08
0726c     01 2E 66 F0 | 	shl	local09, #1
07270     16 2F 02 F1 | 	add	local09, local08
07274     02 2E 66 F0 | 	shl	local09, #2
07278     03 00 00 FF 
0727c     00 E4 85 F1 | 	sub	objptr, ##1536
07280     F2 2E 02 F1 | 	add	local09, objptr
07284     17 27 62 FC | 	wrlong	local05, local09
07288     03 00 00 FF 
0728c     00 E4 05 F1 | 	add	objptr, ##1536
07290     F2 32 02 FB | 	rdlong	local11, objptr
07294     19 31 02 F6 | 	mov	local10, local11
07298     01 30 66 F0 | 	shl	local10, #1
0729c     19 31 02 F1 | 	add	local10, local11
072a0     02 30 66 F0 | 	shl	local10, #2
072a4     03 00 00 FF 
072a8     00 E4 85 F1 | 	sub	objptr, ##1536
072ac     F2 30 02 F1 | 	add	local10, objptr
072b0     04 30 06 F1 | 	add	local10, #4
072b4     18 29 62 FC | 	wrlong	local06, local10
072b8     03 00 00 FF 
072bc     00 E4 05 F1 | 	add	objptr, ##1536
072c0     F2 26 02 FB | 	rdlong	local05, objptr
072c4     13 33 02 F6 | 	mov	local11, local05
072c8     01 32 66 F0 | 	shl	local11, #1
072cc     13 33 02 F1 | 	add	local11, local05
072d0     02 32 66 F0 | 	shl	local11, #2
072d4     03 00 00 FF 
072d8     00 E4 85 F1 | 	sub	objptr, ##1536
072dc     F2 32 02 F1 | 	add	local11, objptr
072e0     08 32 06 F1 | 	add	local11, #8
072e4     19 2B 62 FC | 	wrlong	local07, local11
072e8     03 00 00 FF 
072ec     00 E4 05 F1 | 	add	objptr, ##1536
072f0     F2 26 02 FB | 	rdlong	local05, objptr
072f4     01 26 06 F1 | 	add	local05, #1
072f8     F2 26 62 FC | 	wrlong	local05, objptr
072fc     44 22 06 F6 | 	mov	local03, #68
07300     0F 27 02 F6 | 	mov	local05, local01
07304     10 29 02 F6 | 	mov	local06, local02
07308     11 2B 02 F6 | 	mov	local07, local03
0730c     F2 2C 02 FB | 	rdlong	local08, objptr
07310     16 2F 02 F6 | 	mov	local09, local08
07314     01 2E 66 F0 | 	shl	local09, #1
07318     16 2F 02 F1 | 	add	local09, local08
0731c     02 2E 66 F0 | 	shl	local09, #2
07320     03 00 00 FF 
07324     00 E4 85 F1 | 	sub	objptr, ##1536
07328     F2 2E 02 F1 | 	add	local09, objptr
0732c     17 27 62 FC | 	wrlong	local05, local09
07330     03 00 00 FF 
07334     00 E4 05 F1 | 	add	objptr, ##1536
07338     F2 32 02 FB | 	rdlong	local11, objptr
0733c     19 31 02 F6 | 	mov	local10, local11
07340     01 30 66 F0 | 	shl	local10, #1
07344     19 31 02 F1 | 	add	local10, local11
07348     02 30 66 F0 | 	shl	local10, #2
0734c     03 00 00 FF 
07350     00 E4 85 F1 | 	sub	objptr, ##1536
07354     F2 30 02 F1 | 	add	local10, objptr
07358     04 30 06 F1 | 	add	local10, #4
0735c     18 29 62 FC | 	wrlong	local06, local10
07360     03 00 00 FF 
07364     00 E4 05 F1 | 	add	objptr, ##1536
07368     F2 30 02 FB | 	rdlong	local10, objptr
0736c     18 33 02 F6 | 	mov	local11, local10
07370     01 32 66 F0 | 	shl	local11, #1
07374     18 33 02 F1 | 	add	local11, local10
07378     02 32 66 F0 | 	shl	local11, #2
0737c     03 00 00 FF 
07380     00 E4 85 F1 | 	sub	objptr, ##1536
07384     F2 32 02 F1 | 	add	local11, objptr
07388     08 32 06 F1 | 	add	local11, #8
0738c     19 2B 62 FC | 	wrlong	local07, local11
07390     03 00 00 FF 
07394     00 E4 05 F1 | 	add	objptr, ##1536
07398     F2 26 02 FB | 	rdlong	local05, objptr
0739c     01 26 06 F1 | 	add	local05, #1
073a0     F2 26 62 FC | 	wrlong	local05, objptr
073a4     6A 00 00 FF 
073a8     6C E4 85 F1 | 	sub	objptr, ##54380
073ac                 | LR__0643
073ac                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
073ac     57 00 00 FF 
073b0     34 E4 05 F1 | 	add	objptr, ##44596
073b4     F2 24 02 FB | 	rdlong	local04, objptr
073b8     03 24 66 F0 | 	shl	local04, #3
073bc     02 00 00 FF 
073c0     38 E4 85 F1 | 	sub	objptr, ##1080
073c4     F2 24 02 F1 | 	add	local04, objptr
073c8     04 24 06 F1 | 	add	local04, #4
073cc     12 2D 02 FB | 	rdlong	local08, local04
073d0     FE 2D 0E F2 | 	cmp	local08, #510 wz
073d4     54 00 00 FF 
073d8     FC E5 85 F1 | 	sub	objptr, ##43516
073dc     B8 00 90 5D |  if_ne	jmp	#LR__0644
073e0     44 22 06 F6 | 	mov	local03, #68
073e4     0F 27 02 F6 | 	mov	local05, local01
073e8     10 29 02 F6 | 	mov	local06, local02
073ec     11 2B 02 F6 | 	mov	local07, local03
073f0     6A 00 00 FF 
073f4     6C E4 05 F1 | 	add	objptr, ##54380
073f8     F2 2C 02 FB | 	rdlong	local08, objptr
073fc     16 2F 02 F6 | 	mov	local09, local08
07400     01 2E 66 F0 | 	shl	local09, #1
07404     16 2F 02 F1 | 	add	local09, local08
07408     02 2E 66 F0 | 	shl	local09, #2
0740c     03 00 00 FF 
07410     00 E4 85 F1 | 	sub	objptr, ##1536
07414     F2 2E 02 F1 | 	add	local09, objptr
07418     17 27 62 FC | 	wrlong	local05, local09
0741c     03 00 00 FF 
07420     00 E4 05 F1 | 	add	objptr, ##1536
07424     F2 32 02 FB | 	rdlong	local11, objptr
07428     19 31 02 F6 | 	mov	local10, local11
0742c     01 30 66 F0 | 	shl	local10, #1
07430     19 31 02 F1 | 	add	local10, local11
07434     02 30 66 F0 | 	shl	local10, #2
07438     03 00 00 FF 
0743c     00 E4 85 F1 | 	sub	objptr, ##1536
07440     F2 30 02 F1 | 	add	local10, objptr
07444     04 30 06 F1 | 	add	local10, #4
07448     18 29 62 FC | 	wrlong	local06, local10
0744c     03 00 00 FF 
07450     00 E4 05 F1 | 	add	objptr, ##1536
07454     F2 30 02 FB | 	rdlong	local10, objptr
07458     18 33 02 F6 | 	mov	local11, local10
0745c     01 32 66 F0 | 	shl	local11, #1
07460     18 33 02 F1 | 	add	local11, local10
07464     02 32 66 F0 | 	shl	local11, #2
07468     03 00 00 FF 
0746c     00 E4 85 F1 | 	sub	objptr, ##1536
07470     F2 32 02 F1 | 	add	local11, objptr
07474     08 32 06 F1 | 	add	local11, #8
07478     19 2B 62 FC | 	wrlong	local07, local11
0747c     03 00 00 FF 
07480     00 E4 05 F1 | 	add	objptr, ##1536
07484     F2 26 02 FB | 	rdlong	local05, objptr
07488     01 26 06 F1 | 	add	local05, #1
0748c     F2 26 62 FC | 	wrlong	local05, objptr
07490     6A 00 00 FF 
07494     6C E4 85 F1 | 	sub	objptr, ##54380
07498                 | LR__0644
07498                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
07498     57 00 00 FF 
0749c     34 E4 05 F1 | 	add	objptr, ##44596
074a0     F2 24 02 FB | 	rdlong	local04, objptr
074a4     03 24 66 F0 | 	shl	local04, #3
074a8     02 00 00 FF 
074ac     38 E4 85 F1 | 	sub	objptr, ##1080
074b0     F2 24 02 F1 | 	add	local04, objptr
074b4     04 24 06 F1 | 	add	local04, #4
074b8     12 2D 02 FB | 	rdlong	local08, local04
074bc     11 2C 0E F2 | 	cmp	local08, #17 wz
074c0     54 00 00 FF 
074c4     FC E5 85 F1 | 	sub	objptr, ##43516
074c8     6C 00 90 AD |  if_e	jmp	#LR__0645
074cc     57 00 00 FF 
074d0     34 E4 05 F1 | 	add	objptr, ##44596
074d4     F2 2C 02 FB | 	rdlong	local08, objptr
074d8     03 2C 66 F0 | 	shl	local08, #3
074dc     02 00 00 FF 
074e0     38 E4 85 F1 | 	sub	objptr, ##1080
074e4     F2 2C 02 F1 | 	add	local08, objptr
074e8     04 2C 06 F1 | 	add	local08, #4
074ec     16 2D 02 FB | 	rdlong	local08, local08
074f0     12 2C 0E F2 | 	cmp	local08, #18 wz
074f4     54 00 00 FF 
074f8     FC E5 85 F1 | 	sub	objptr, ##43516
074fc     38 00 90 AD |  if_e	jmp	#LR__0645
07500     57 00 00 FF 
07504     34 E4 05 F1 | 	add	objptr, ##44596
07508     F2 32 02 FB | 	rdlong	local11, objptr
0750c     03 32 66 F0 | 	shl	local11, #3
07510     02 00 00 FF 
07514     38 E4 85 F1 | 	sub	objptr, ##1080
07518     F2 32 02 F1 | 	add	local11, objptr
0751c     04 32 06 F1 | 	add	local11, #4
07520     19 33 02 FB | 	rdlong	local11, local11
07524     FE 33 0E F2 | 	cmp	local11, #510 wz
07528     54 00 00 FF 
0752c     FC E5 85 F1 | 	sub	objptr, ##43516
07530     16 FA 05 56 |  if_ne	mov	result1, #22
07534     68 00 90 5D |  if_ne	jmp	#LR__0647
07538                 | LR__0645
07538     57 00 00 FF 
0753c     34 E4 05 F1 | 	add	objptr, ##44596
07540     F2 24 02 FB | 	rdlong	local04, objptr
07544     01 24 06 F1 | 	add	local04, #1
07548     F2 24 62 FC | 	wrlong	local04, objptr
0754c     03 24 66 F0 | 	shl	local04, #3
07550     02 00 00 FF 
07554     38 E4 85 F1 | 	sub	objptr, ##1080
07558     F2 24 02 F1 | 	add	local04, objptr
0755c     04 24 06 F1 | 	add	local04, #4
07560     12 2D 02 FB | 	rdlong	local08, local04
07564     FE 2D 0E F2 | 	cmp	local08, #510 wz
07568     54 00 00 FF 
0756c     FC E5 85 F1 | 	sub	objptr, ##43516
07570     28 00 90 AD |  if_e	jmp	#LR__0646
07574     57 00 00 FF 
07578     34 E4 05 F1 | 	add	objptr, ##44596
0757c     F2 32 02 FB | 	rdlong	local11, objptr
07580     0E 00 00 FF 
07584     1C E4 05 F1 | 	add	objptr, ##7196
07588     F2 30 02 FB | 	rdlong	local10, objptr
0758c     65 00 00 FF 
07590     50 E4 85 F1 | 	sub	objptr, ##51792
07594     18 33 52 F2 | 	cmps	local11, local10 wc
07598     E4 FA 9F CD |  if_b	jmp	#LR__0641
0759c                 | LR__0646
0759c                 | ' return 0
0759c     00 FA 05 F6 | 	mov	result1, #0
075a0                 | LR__0647
075a0     A7 F0 03 F6 | 	mov	ptra, fp
075a4     B2 00 A0 FD | 	call	#popregs_
075a8                 | _compile_print_ret
075a8     2D 00 64 FD | 	ret
075ac                 | 
075ac                 | ' 
075ac                 | ' function compile_if() as ulong  
075ac                 | _compile_if
075ac     05 4A 05 F6 | 	mov	COUNT_, #5
075b0     A8 00 A0 FD | 	call	#pushregs_
075b4                 | _compile_if_enter
075b4     6C 17 B0 FD | 	call	#_expr
075b8                 | ' expr()
075b8                 | ' return 0
075b8     57 00 00 FF 
075bc     34 E4 05 F1 | 	add	objptr, ##44596
075c0     F2 FA 01 FB | 	rdlong	result1, objptr
075c4     01 FA 05 F1 | 	add	result1, #1
075c8     F2 FA 61 FC | 	wrlong	result1, objptr
075cc     58 22 06 F6 | 	mov	local03, #88
075d0     0F 25 02 F6 | 	mov	local04, local01
075d4     10 27 02 F6 | 	mov	local05, local02
075d8     11 1F 02 F6 | 	mov	local01, local03
075dc     13 00 00 FF 
075e0     38 E4 05 F1 | 	add	objptr, ##9784
075e4     F2 12 02 FB | 	rdlong	arg01, objptr
075e8     09 FB 01 F6 | 	mov	result1, arg01
075ec     01 FA 65 F0 | 	shl	result1, #1
075f0     09 FB 01 F1 | 	add	result1, arg01
075f4     02 FA 65 F0 | 	shl	result1, #2
075f8     03 00 00 FF 
075fc     00 E4 85 F1 | 	sub	objptr, ##1536
07600     F2 FA 01 F1 | 	add	result1, objptr
07604     FD 24 62 FC | 	wrlong	local04, result1
07608     03 00 00 FF 
0760c     00 E4 05 F1 | 	add	objptr, ##1536
07610     F2 12 02 FB | 	rdlong	arg01, objptr
07614     09 25 02 F6 | 	mov	local04, arg01
07618     01 24 66 F0 | 	shl	local04, #1
0761c     09 25 02 F1 | 	add	local04, arg01
07620     02 24 66 F0 | 	shl	local04, #2
07624     03 00 00 FF 
07628     00 E4 85 F1 | 	sub	objptr, ##1536
0762c     F2 24 02 F1 | 	add	local04, objptr
07630     04 24 06 F1 | 	add	local04, #4
07634     12 27 62 FC | 	wrlong	local05, local04
07638     03 00 00 FF 
0763c     00 E4 05 F1 | 	add	objptr, ##1536
07640     F2 24 02 FB | 	rdlong	local04, objptr
07644     12 27 02 F6 | 	mov	local05, local04
07648     01 26 66 F0 | 	shl	local05, #1
0764c     12 27 02 F1 | 	add	local05, local04
07650     02 26 66 F0 | 	shl	local05, #2
07654     03 00 00 FF 
07658     00 E4 85 F1 | 	sub	objptr, ##1536
0765c     F2 26 02 F1 | 	add	local05, objptr
07660     08 26 06 F1 | 	add	local05, #8
07664     13 1F 62 FC | 	wrlong	local01, local05
07668     03 00 00 FF 
0766c     00 E4 05 F1 | 	add	objptr, ##1536
07670     F2 24 02 FB | 	rdlong	local04, objptr
07674     01 24 06 F1 | 	add	local04, #1
07678     F2 24 62 FC | 	wrlong	local04, objptr
0767c                 | ' 
0767c                 | ' 'print "In compile_if"
0767c                 | ' compile_fun_1p()
0767c                 | ' cmd=lparts(ct).token : ct+=1
0767c                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
0767c                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
0767c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
0767c     13 00 00 FF 
07680     38 E4 85 F1 | 	sub	objptr, ##9784
07684     F2 26 02 FB | 	rdlong	local05, objptr
07688     01 26 06 F1 | 	add	local05, #1
0768c     03 26 66 F0 | 	shl	local05, #3
07690     02 00 00 FF 
07694     38 E4 85 F1 | 	sub	objptr, ##1080
07698     F2 26 02 F1 | 	add	local05, objptr
0769c     13 13 02 FB | 	rdlong	arg01, local05
076a0     54 00 00 FF 
076a4     FC E5 85 F1 | 	sub	objptr, ##43516
076a8                 | ' 
076a8                 | ' select case s
076a8     64 01 00 FF 
076ac     34 14 06 F6 | 	mov	arg02, ##@LR__4742
076b0     F8 59 B1 FD | 	call	#__system___string_cmp
076b4     00 FA 0D F2 | 	cmp	result1, #0 wz
076b8     1B FA 05 A6 |  if_e	mov	result1, #27
076bc     00 FA 05 56 |  if_ne	mov	result1, #0
076c0     00 FA 0D F2 | 	cmp	result1, #0 wz
076c4     0C 00 90 AD |  if_e	jmp	#LR__0650
076c8     05 12 06 F6 | 	mov	arg01, #5
076cc     88 ED BF FD | 	call	#_compile_immediate_assign
076d0     08 00 90 FD | 	jmp	#LR__0651
076d4                 | LR__0650
076d4     05 12 06 F6 | 	mov	arg01, #5
076d8     A8 E3 BF FD | 	call	#_compile_immediate
076dc                 | LR__0651
076dc                 | ' 
076dc                 | ' 
076dc                 | ' return 0
076dc     00 FA 05 F6 | 	mov	result1, #0
076e0     A7 F0 03 F6 | 	mov	ptra, fp
076e4     B2 00 A0 FD | 	call	#popregs_
076e8                 | _compile_if_ret
076e8     2D 00 64 FD | 	ret
076ec                 | 
076ec                 | ' 
076ec                 | ' function compile_else() as ulong  
076ec                 | _compile_else
076ec     05 4A 05 F6 | 	mov	COUNT_, #5
076f0     A8 00 A0 FD | 	call	#pushregs_
076f4                 | _compile_else_enter
076f4     5A 22 06 F6 | 	mov	local03, #90
076f8     0F 25 02 F6 | 	mov	local04, local01
076fc     10 27 02 F6 | 	mov	local05, local02
07700     11 1F 02 F6 | 	mov	local01, local03
07704     6A 00 00 FF 
07708     6C E4 05 F1 | 	add	objptr, ##54380
0770c     F2 12 02 FB | 	rdlong	arg01, objptr
07710     09 FB 01 F6 | 	mov	result1, arg01
07714     01 FA 65 F0 | 	shl	result1, #1
07718     09 FB 01 F1 | 	add	result1, arg01
0771c     02 FA 65 F0 | 	shl	result1, #2
07720     03 00 00 FF 
07724     00 E4 85 F1 | 	sub	objptr, ##1536
07728     F2 FA 01 F1 | 	add	result1, objptr
0772c     FD 24 62 FC | 	wrlong	local04, result1
07730     03 00 00 FF 
07734     00 E4 05 F1 | 	add	objptr, ##1536
07738     F2 FA 01 FB | 	rdlong	result1, objptr
0773c     FD 24 02 F6 | 	mov	local04, result1
07740     01 24 66 F0 | 	shl	local04, #1
07744     FD 24 02 F1 | 	add	local04, result1
07748     02 24 66 F0 | 	shl	local04, #2
0774c     03 00 00 FF 
07750     00 E4 85 F1 | 	sub	objptr, ##1536
07754     F2 24 02 F1 | 	add	local04, objptr
07758     04 24 06 F1 | 	add	local04, #4
0775c     12 27 62 FC | 	wrlong	local05, local04
07760     03 00 00 FF 
07764     00 E4 05 F1 | 	add	objptr, ##1536
07768     F2 24 02 FB | 	rdlong	local04, objptr
0776c     12 27 02 F6 | 	mov	local05, local04
07770     01 26 66 F0 | 	shl	local05, #1
07774     12 27 02 F1 | 	add	local05, local04
07778     02 26 66 F0 | 	shl	local05, #2
0777c     03 00 00 FF 
07780     00 E4 85 F1 | 	sub	objptr, ##1536
07784     F2 26 02 F1 | 	add	local05, objptr
07788     08 26 06 F1 | 	add	local05, #8
0778c     13 1F 62 FC | 	wrlong	local01, local05
07790     03 00 00 FF 
07794     00 E4 05 F1 | 	add	objptr, ##1536
07798     F2 24 02 FB | 	rdlong	local04, objptr
0779c     01 24 06 F1 | 	add	local04, #1
077a0     F2 24 62 FC | 	wrlong	local04, objptr
077a4                 | ' 
077a4                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
077a4                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
077a4     13 00 00 FF 
077a8     38 E4 85 F1 | 	sub	objptr, ##9784
077ac     F2 26 02 FB | 	rdlong	local05, objptr
077b0     01 26 06 F1 | 	add	local05, #1
077b4     03 26 66 F0 | 	shl	local05, #3
077b8     02 00 00 FF 
077bc     38 E4 85 F1 | 	sub	objptr, ##1080
077c0     F2 26 02 F1 | 	add	local05, objptr
077c4     13 13 02 FB | 	rdlong	arg01, local05
077c8     54 00 00 FF 
077cc     FC E5 85 F1 | 	sub	objptr, ##43516
077d0                 | ' 
077d0                 | ' select case s
077d0     64 01 00 FF 
077d4     34 14 06 F6 | 	mov	arg02, ##@LR__4742
077d8     D0 58 B1 FD | 	call	#__system___string_cmp
077dc     00 FA 0D F2 | 	cmp	result1, #0 wz
077e0     1B FA 05 A6 |  if_e	mov	result1, #27
077e4     00 FA 05 56 |  if_ne	mov	result1, #0
077e8     00 FA 0D F2 | 	cmp	result1, #0 wz
077ec     0C 00 90 AD |  if_e	jmp	#LR__0660
077f0     05 12 06 F6 | 	mov	arg01, #5
077f4     60 EC BF FD | 	call	#_compile_immediate_assign
077f8     08 00 90 FD | 	jmp	#LR__0661
077fc                 | LR__0660
077fc     05 12 06 F6 | 	mov	arg01, #5
07800     80 E2 BF FD | 	call	#_compile_immediate
07804                 | LR__0661
07804                 | ' 
07804                 | ' 
07804                 | ' return 0
07804     00 FA 05 F6 | 	mov	result1, #0
07808     A7 F0 03 F6 | 	mov	ptra, fp
0780c     B2 00 A0 FD | 	call	#popregs_
07810                 | _compile_else_ret
07810     2D 00 64 FD | 	ret
07814                 | 
07814                 | ' 
07814                 | ' 
07814                 | ' function compile_dim() as ulong  
07814                 | _compile_dim
07814     11 4A 05 F6 | 	mov	COUNT_, #17
07818     A8 00 A0 FD | 	call	#pushregs_
0781c     01 1E 06 F6 | 	mov	local01, #1
07820     01 20 06 F6 | 	mov	local02, #1
07824     01 22 06 F6 | 	mov	local03, #1
07828                 | ' 
07828                 | ' dims(0)=1: dims(1)=1: dims(2)=1
07828                 | ' 
07828                 | ' if isname(lparts(ct).part$) then 
07828     57 00 00 FF 
0782c     34 E4 05 F1 | 	add	objptr, ##44596
07830     F2 18 02 FB | 	rdlong	arg04, objptr
07834     03 18 66 F0 | 	shl	arg04, #3
07838     02 00 00 FF 
0783c     38 E4 85 F1 | 	sub	objptr, ##1080
07840     F2 18 02 F1 | 	add	arg04, objptr
07844     0C 13 02 FB | 	rdlong	arg01, arg04
07848     54 00 00 FF 
0784c     FC E5 85 F1 | 	sub	objptr, ##43516
07850     E4 D2 BF FD | 	call	#_isname
07854     00 FA 0D F2 | 	cmp	result1, #0 wz
07858     AC 05 90 AD |  if_e	jmp	#LR__0694
0785c     57 00 00 FF 
07860     34 E4 05 F1 | 	add	objptr, ##44596
07864     F2 24 02 FB | 	rdlong	local04, objptr
07868     03 24 66 F0 | 	shl	local04, #3
0786c     02 00 00 FF 
07870     38 E4 85 F1 | 	sub	objptr, ##1080
07874     F2 24 02 F1 | 	add	local04, objptr
07878     12 27 02 FB | 	rdlong	local05, local04
0787c     01 28 66 F6 | 	neg	local06, #1
07880                 | '   varname2$=lparts(ct).part$ 
07880                 | '   j=-1
07880                 | '   if varnum>0 then
07880     04 E4 85 F1 | 	sub	objptr, #4
07884     F2 2A 02 FB | 	rdlong	local07, objptr
07888     54 00 00 FF 
0788c     F8 E5 85 F1 | 	sub	objptr, ##43512
07890     01 2A 56 F2 | 	cmps	local07, #1 wc
07894     58 00 90 CD |  if_b	jmp	#LR__0672
07898                 | '  '   print "in dim, varnum=";varnum
07898                 | '     for i=0 to varnum-1
07898     00 2C 06 F6 | 	mov	local08, #0
0789c     54 00 00 FF 
078a0     F8 E5 05 F1 | 	add	objptr, ##43512
078a4     F2 2E 02 FB | 	rdlong	local09, objptr
078a8     54 00 00 FF 
078ac     F8 E5 85 F1 | 	sub	objptr, ##43512
078b0                 | LR__0670
078b0     17 2D 52 F2 | 	cmps	local08, local09 wc
078b4     38 00 90 3D |  if_ae	jmp	#LR__0671
078b8                 | '       if variables(i).name=varname2$ then j=i : exit
078b8     16 25 02 F6 | 	mov	local04, local08
078bc     04 24 66 F0 | 	shl	local04, #4
078c0     34 00 00 FF 
078c4     F8 E5 05 F1 | 	add	objptr, ##27128
078c8     F2 24 02 F1 | 	add	local04, objptr
078cc     12 13 02 FB | 	rdlong	arg01, local04
078d0     13 15 02 F6 | 	mov	arg02, local05
078d4     34 00 00 FF 
078d8     F8 E5 85 F1 | 	sub	objptr, ##27128
078dc     CC 57 B1 FD | 	call	#__system___string_cmp
078e0     00 FA 0D F2 | 	cmp	result1, #0 wz
078e4     16 29 02 A6 |  if_e	mov	local06, local08
078e8     01 2C 06 51 |  if_ne	add	local08, #1
078ec     C0 FF 9F 5D |  if_ne	jmp	#LR__0670
078f0                 | LR__0671
078f0                 | LR__0672
078f0                 | ' '  if j<>-1 then printerror (42) : return 42
078f0                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
078f0     FF FF 7F FF 
078f4     FF 29 0E F2 | 	cmp	local06, ##-1 wz
078f8     54 00 00 AF 
078fc     F8 E5 05 A1 |  if_e	add	objptr, ##43512
07900     F2 28 02 AB |  if_e	rdlong	local06, objptr
07904     54 00 00 AF 
07908     F8 E5 85 A1 |  if_e	sub	objptr, ##43512
0790c     78 00 90 AD |  if_e	jmp	#LR__0673
07910     00 12 06 F6 | 	mov	arg01, #0
07914     FC B0 B1 FD | 	call	#__system___getiolock_0474
07918     FD 12 02 F6 | 	mov	arg01, result1
0791c     64 57 B1 FD | 	call	#__system___lockmem
07920     65 01 00 FF 
07924     42 15 06 F6 | 	mov	arg02, ##@LR__4914
07928     00 12 06 F6 | 	mov	arg01, #0
0792c     00 16 06 F6 | 	mov	arg03, #0
07930     54 64 B1 FD | 	call	#__system___basic_print_string
07934     7B 00 00 FF 
07938     80 E4 05 F1 | 	add	objptr, ##63104
0793c     F2 14 02 FB | 	rdlong	arg02, objptr
07940     7B 00 00 FF 
07944     80 E4 85 F1 | 	sub	objptr, ##63104
07948     00 12 06 F6 | 	mov	arg01, #0
0794c     00 16 06 F6 | 	mov	arg03, #0
07950     0A 18 06 F6 | 	mov	arg04, #10
07954     B4 64 B1 FD | 	call	#__system___basic_print_unsigned
07958     65 01 00 FF 
0795c     50 15 06 F6 | 	mov	arg02, ##@LR__4915
07960     00 12 06 F6 | 	mov	arg01, #0
07964     00 16 06 F6 | 	mov	arg03, #0
07968     1C 64 B1 FD | 	call	#__system___basic_print_string
0796c     00 12 06 F6 | 	mov	arg01, #0
07970     0A 14 06 F6 | 	mov	arg02, #10
07974     00 16 06 F6 | 	mov	arg03, #0
07978     B4 63 B1 FD | 	call	#__system___basic_print_char
0797c     00 12 06 F6 | 	mov	arg01, #0
07980     90 B0 B1 FD | 	call	#__system___getiolock_0474
07984     FD 00 68 FC | 	wrlong	#0, result1
07988                 | LR__0673
07988                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
07988     57 00 00 FF 
0798c     34 E4 05 F1 | 	add	objptr, ##44596
07990     F2 18 02 FB | 	rdlong	arg04, objptr
07994     01 18 06 F1 | 	add	arg04, #1
07998     03 18 66 F0 | 	shl	arg04, #3
0799c     02 00 00 FF 
079a0     38 E4 85 F1 | 	sub	objptr, ##1080
079a4     F2 18 02 F1 | 	add	arg04, objptr
079a8     0C 13 02 FB | 	rdlong	arg01, arg04
079ac     65 01 00 FF 
079b0     71 15 06 F6 | 	mov	arg02, ##@LR__4916
079b4     54 00 00 FF 
079b8     FC E5 85 F1 | 	sub	objptr, ##43516
079bc     EC 56 B1 FD | 	call	#__system___string_cmp
079c0     00 FA 0D F2 | 	cmp	result1, #0 wz
079c4     50 00 90 AD |  if_e	jmp	#LR__0674
079c8     57 00 00 FF 
079cc     34 E4 05 F1 | 	add	objptr, ##44596
079d0     F2 2E 02 FB | 	rdlong	local09, objptr
079d4     01 2E 06 F1 | 	add	local09, #1
079d8     03 2E 66 F0 | 	shl	local09, #3
079dc     02 00 00 FF 
079e0     38 E4 85 F1 | 	sub	objptr, ##1080
079e4     F2 2E 02 F1 | 	add	local09, objptr
079e8     17 13 02 FB | 	rdlong	arg01, local09
079ec     65 01 00 FF 
079f0     73 15 06 F6 | 	mov	arg02, ##@LR__4917
079f4     54 00 00 FF 
079f8     FC E5 85 F1 | 	sub	objptr, ##43516
079fc     AC 56 B1 FD | 	call	#__system___string_cmp
07a00     00 FA 0D F2 | 	cmp	result1, #0 wz
07a04     10 00 90 AD |  if_e	jmp	#LR__0674
07a08     2B 12 06 F6 | 	mov	arg01, #43
07a0c     18 16 B1 FD | 	call	#_printerror
07a10     2B FA 05 F6 | 	mov	result1, #43
07a14     00 05 90 FD | 	jmp	#LR__0696
07a18                 | LR__0674
07a18                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
07a18     57 00 00 FF 
07a1c     34 E4 05 F1 | 	add	objptr, ##44596
07a20     F2 14 02 FB | 	rdlong	arg02, objptr
07a24     01 14 06 F1 | 	add	arg02, #1
07a28     03 14 66 F0 | 	shl	arg02, #3
07a2c     02 00 00 FF 
07a30     38 E4 85 F1 | 	sub	objptr, ##1080
07a34     F2 14 02 F1 | 	add	arg02, objptr
07a38     0A 13 02 FB | 	rdlong	arg01, arg02
07a3c     65 01 00 FF 
07a40     76 15 06 F6 | 	mov	arg02, ##@LR__4918
07a44     54 00 00 FF 
07a48     FC E5 85 F1 | 	sub	objptr, ##43516
07a4c     5C 56 B1 FD | 	call	#__system___string_cmp
07a50     00 FA 0D F2 | 	cmp	result1, #0 wz
07a54     57 00 00 AF 
07a58     34 E4 05 A1 |  if_e	add	objptr, ##44596
07a5c     F2 30 02 AB |  if_e	rdlong	local10, objptr
07a60     57 00 00 AF 
07a64     34 E4 85 A1 |  if_e	sub	objptr, ##44596
07a68     01 30 06 A1 |  if_e	add	local10, #1
07a6c     7C 01 90 AD |  if_e	jmp	#LR__0680
07a70     57 00 00 FF 
07a74     34 E4 05 F1 | 	add	objptr, ##44596
07a78     F2 30 02 FB | 	rdlong	local10, objptr
07a7c     57 00 00 FF 
07a80     34 E4 85 F1 | 	sub	objptr, ##44596
07a84     02 30 06 F1 | 	add	local10, #2
07a88     00 32 06 F6 | 	mov	local11, #0
07a8c                 | '   l=ct+2 : m=0 : do
07a8c                 | LR__0675
07a8c                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07a8c                 | '     if isdec(lparts(l).part$) then 
07a8c     18 25 02 F6 | 	mov	local04, local10
07a90     03 24 66 F0 | 	shl	local04, #3
07a94     54 00 00 FF 
07a98     FC E5 05 F1 | 	add	objptr, ##43516
07a9c     F2 24 02 F1 | 	add	local04, objptr
07aa0     12 13 02 FB | 	rdlong	arg01, local04
07aa4     54 00 00 FF 
07aa8     FC E5 85 F1 | 	sub	objptr, ##43516
07aac     2C D7 BF FD | 	call	#_isdec
07ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
07ab4     44 00 90 AD |  if_e	jmp	#LR__0676
07ab8     19 35 02 F6 | 	mov	local12, local11
07abc     0F 35 06 F1 | 	add	local12, #local01
07ac0     18 2F 02 F6 | 	mov	local09, local10
07ac4     03 2E 66 F0 | 	shl	local09, #3
07ac8     54 00 00 FF 
07acc     FC E5 05 F1 | 	add	objptr, ##43516
07ad0     F2 2E 02 F1 | 	add	local09, objptr
07ad4     17 13 02 FB | 	rdlong	arg01, local09
07ad8     00 14 06 F6 | 	mov	arg02, #0
07adc     54 00 00 FF 
07ae0     FC E5 85 F1 | 	sub	objptr, ##43516
07ae4     90 87 B1 FD | 	call	#__system____builtin_atoi
07ae8     FD 36 02 F6 | 	mov	local13, result1
07aec                 | 	'.live	local13
07aec                 | 	'.live	local12
07aec     00 34 8E F9 | 	altd	local12, #0
07af0     1B 35 02 F6 | 	mov	local12, local13
07af4     01 32 06 F1 | 	add	local11, #1
07af8     10 00 90 FD | 	jmp	#LR__0677
07afc                 | LR__0676
07afc     11 12 06 F6 | 	mov	arg01, #17
07b00     24 15 B1 FD | 	call	#_printerror
07b04                 | '       printerror (17)  : return(17)
07b04     11 FA 05 F6 | 	mov	result1, #17
07b08     0C 04 90 FD | 	jmp	#LR__0696
07b0c                 | LR__0677
07b0c                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07b0c     18 25 02 F6 | 	mov	local04, local10
07b10     01 24 06 F1 | 	add	local04, #1
07b14     03 24 66 F0 | 	shl	local04, #3
07b18     54 00 00 FF 
07b1c     FC E5 05 F1 | 	add	objptr, ##43516
07b20     F2 24 02 F1 | 	add	local04, objptr
07b24     12 13 02 FB | 	rdlong	arg01, local04
07b28     65 01 00 FF 
07b2c     79 15 06 F6 | 	mov	arg02, ##@LR__4919
07b30     54 00 00 FF 
07b34     FC E5 85 F1 | 	sub	objptr, ##43516
07b38     70 55 B1 FD | 	call	#__system___string_cmp
07b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
07b40     48 00 90 AD |  if_e	jmp	#LR__0678
07b44     18 37 02 F6 | 	mov	local13, local10
07b48     01 36 06 F1 | 	add	local13, #1
07b4c     03 36 66 F0 | 	shl	local13, #3
07b50     54 00 00 FF 
07b54     FC E5 05 F1 | 	add	objptr, ##43516
07b58     F2 36 02 F1 | 	add	local13, objptr
07b5c     1B 13 02 FB | 	rdlong	arg01, local13
07b60     65 01 00 FF 
07b64     7B 15 06 F6 | 	mov	arg02, ##@LR__4920
07b68     54 00 00 FF 
07b6c     FC E5 85 F1 | 	sub	objptr, ##43516
07b70     38 55 B1 FD | 	call	#__system___string_cmp
07b74     00 FA 0D F2 | 	cmp	result1, #0 wz
07b78     10 00 90 AD |  if_e	jmp	#LR__0678
07b7c     2C 12 06 F6 | 	mov	arg01, #44
07b80     A4 14 B1 FD | 	call	#_printerror
07b84     2C FA 05 F6 | 	mov	result1, #44
07b88     8C 03 90 FD | 	jmp	#LR__0696
07b8c                 | LR__0678
07b8c     02 30 06 F1 | 	add	local10, #2
07b90     18 25 02 F6 | 	mov	local04, local10
07b94     01 24 86 F1 | 	sub	local04, #1
07b98     03 24 66 F0 | 	shl	local04, #3
07b9c     54 00 00 FF 
07ba0     FC E5 05 F1 | 	add	objptr, ##43516
07ba4     F2 24 02 F1 | 	add	local04, objptr
07ba8     12 13 02 FB | 	rdlong	arg01, local04
07bac     65 01 00 FF 
07bb0     7D 15 06 F6 | 	mov	arg02, ##@LR__4921
07bb4     54 00 00 FF 
07bb8     FC E5 85 F1 | 	sub	objptr, ##43516
07bbc     EC 54 B1 FD | 	call	#__system___string_cmp
07bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
07bc4     03 32 56 52 |  if_ne	cmps	local11, #3 wc
07bc8     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0675
07bcc                 | '   if m>3 then printerror(45): return(45)
07bcc     04 32 56 F2 | 	cmps	local11, #4 wc
07bd0     10 00 90 CD |  if_b	jmp	#LR__0679
07bd4     2D 12 06 F6 | 	mov	arg01, #45
07bd8     4C 14 B1 FD | 	call	#_printerror
07bdc     2D FA 05 F6 | 	mov	result1, #45
07be0     34 03 90 FD | 	jmp	#LR__0696
07be4                 | LR__0679
07be4     00 39 06 F6 | 	mov	local14, #256
07be8     0C 3A 06 F6 | 	mov	local15, #12
07bec                 | LR__0680
07bec                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
07bec                 | '   arraytype=array_no_type : esize=12
07bec                 | ' 1350 
07bec                 | '   if lparts(l).part$="as" then
07bec     18 25 02 F6 | 	mov	local04, local10
07bf0     03 24 66 F0 | 	shl	local04, #3
07bf4     54 00 00 FF 
07bf8     FC E5 05 F1 | 	add	objptr, ##43516
07bfc     F2 24 02 F1 | 	add	local04, objptr
07c00     12 13 02 FB | 	rdlong	arg01, local04
07c04     65 01 00 FF 
07c08     7F 15 06 F6 | 	mov	arg02, ##@LR__4922
07c0c     54 00 00 FF 
07c10     FC E5 85 F1 | 	sub	objptr, ##43516
07c14     94 54 B1 FD | 	call	#__system___string_cmp
07c18     00 FA 0D F2 | 	cmp	result1, #0 wz
07c1c     F8 01 90 5D |  if_ne	jmp	#LR__0695
07c20                 | '     select case lparts(l+1).part$
07c20     18 35 02 F6 | 	mov	local12, local10
07c24     01 34 06 F1 | 	add	local12, #1
07c28     03 34 66 F0 | 	shl	local12, #3
07c2c     54 00 00 FF 
07c30     FC E5 05 F1 | 	add	objptr, ##43516
07c34     F2 34 02 F1 | 	add	local12, objptr
07c38     1A 3D 02 FB | 	rdlong	local16, local12
07c3c     65 01 00 FF 
07c40     82 15 06 F6 | 	mov	arg02, ##@LR__4923
07c44     1E 13 02 F6 | 	mov	arg01, local16
07c48     54 00 00 FF 
07c4c     FC E5 85 F1 | 	sub	objptr, ##43516
07c50     58 54 B1 FD | 	call	#__system___string_cmp
07c54     00 FA 0D F2 | 	cmp	result1, #0 wz
07c58     0C 01 90 AD |  if_e	jmp	#LR__0681
07c5c     65 01 00 FF 
07c60     87 15 06 F6 | 	mov	arg02, ##@LR__4924
07c64     1E 13 02 F6 | 	mov	arg01, local16
07c68     40 54 B1 FD | 	call	#__system___string_cmp
07c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
07c70     00 01 90 AD |  if_e	jmp	#LR__0682
07c74     65 01 00 FF 
07c78     8D 15 06 F6 | 	mov	arg02, ##@LR__4925
07c7c     1E 13 02 F6 | 	mov	arg01, local16
07c80     28 54 B1 FD | 	call	#__system___string_cmp
07c84     00 FA 0D F2 | 	cmp	result1, #0 wz
07c88     F4 00 90 AD |  if_e	jmp	#LR__0683
07c8c     65 01 00 FF 
07c90     93 15 06 F6 | 	mov	arg02, ##@LR__4926
07c94     1E 13 02 F6 | 	mov	arg01, local16
07c98     10 54 B1 FD | 	call	#__system___string_cmp
07c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
07ca0     E8 00 90 AD |  if_e	jmp	#LR__0684
07ca4     65 01 00 FF 
07ca8     9A 15 06 F6 | 	mov	arg02, ##@LR__4927
07cac     1E 13 02 F6 | 	mov	arg01, local16
07cb0     F8 53 B1 FD | 	call	#__system___string_cmp
07cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
07cb8     DC 00 90 AD |  if_e	jmp	#LR__0685
07cbc     65 01 00 FF 
07cc0     9F 15 06 F6 | 	mov	arg02, ##@LR__4928
07cc4     1E 13 02 F6 | 	mov	arg01, local16
07cc8     E0 53 B1 FD | 	call	#__system___string_cmp
07ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
07cd0     D0 00 90 AD |  if_e	jmp	#LR__0686
07cd4     65 01 00 FF 
07cd8     A7 15 06 F6 | 	mov	arg02, ##@LR__4929
07cdc     1E 13 02 F6 | 	mov	arg01, local16
07ce0     C8 53 B1 FD | 	call	#__system___string_cmp
07ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ce8     C4 00 90 AD |  if_e	jmp	#LR__0687
07cec     65 01 00 FF 
07cf0     AD 15 06 F6 | 	mov	arg02, ##@LR__4930
07cf4     1E 13 02 F6 | 	mov	arg01, local16
07cf8     B0 53 B1 FD | 	call	#__system___string_cmp
07cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
07d00     B8 00 90 AD |  if_e	jmp	#LR__0688
07d04     65 01 00 FF 
07d08     B3 15 06 F6 | 	mov	arg02, ##@LR__4931
07d0c     1E 13 02 F6 | 	mov	arg01, local16
07d10     98 53 B1 FD | 	call	#__system___string_cmp
07d14     00 FA 0D F2 | 	cmp	result1, #0 wz
07d18     AC 00 90 AD |  if_e	jmp	#LR__0689
07d1c     65 01 00 FF 
07d20     BA 15 06 F6 | 	mov	arg02, ##@LR__4932
07d24     1E 13 02 F6 | 	mov	arg01, local16
07d28     80 53 B1 FD | 	call	#__system___string_cmp
07d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
07d30     A0 00 90 AD |  if_e	jmp	#LR__0690
07d34     65 01 00 FF 
07d38     C1 15 06 F6 | 	mov	arg02, ##@LR__4933
07d3c     1E 13 02 F6 | 	mov	arg01, local16
07d40     68 53 B1 FD | 	call	#__system___string_cmp
07d44     00 FA 0D F2 | 	cmp	result1, #0 wz
07d48     94 00 90 AD |  if_e	jmp	#LR__0691
07d4c     65 01 00 FF 
07d50     C8 15 06 F6 | 	mov	arg02, ##@LR__4934
07d54     1E 13 02 F6 | 	mov	arg01, local16
07d58     50 53 B1 FD | 	call	#__system___string_cmp
07d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
07d60     88 00 90 AD |  if_e	jmp	#LR__0692
07d64     90 00 90 FD | 	jmp	#LR__0693
07d68                 | LR__0681
07d68     01 39 06 F6 | 	mov	local14, #257
07d6c     01 3A 06 F6 | 	mov	local15, #1
07d70     A4 00 90 FD | 	jmp	#LR__0695
07d74                 | LR__0682
07d74     02 39 06 F6 | 	mov	local14, #258
07d78     01 3A 06 F6 | 	mov	local15, #1
07d7c     98 00 90 FD | 	jmp	#LR__0695
07d80                 | LR__0683
07d80     03 39 06 F6 | 	mov	local14, #259
07d84     02 3A 06 F6 | 	mov	local15, #2
07d88     8C 00 90 FD | 	jmp	#LR__0695
07d8c                 | LR__0684
07d8c     04 39 06 F6 | 	mov	local14, #260
07d90     02 3A 06 F6 | 	mov	local15, #2
07d94     80 00 90 FD | 	jmp	#LR__0695
07d98                 | LR__0685
07d98     05 39 06 F6 | 	mov	local14, #261
07d9c     04 3A 06 F6 | 	mov	local15, #4
07da0     74 00 90 FD | 	jmp	#LR__0695
07da4                 | LR__0686
07da4     05 39 06 F6 | 	mov	local14, #261
07da8     04 3A 06 F6 | 	mov	local15, #4
07dac     68 00 90 FD | 	jmp	#LR__0695
07db0                 | LR__0687
07db0     06 39 06 F6 | 	mov	local14, #262
07db4     04 3A 06 F6 | 	mov	local15, #4
07db8     5C 00 90 FD | 	jmp	#LR__0695
07dbc                 | LR__0688
07dbc     07 39 06 F6 | 	mov	local14, #263
07dc0     08 3A 06 F6 | 	mov	local15, #8
07dc4     50 00 90 FD | 	jmp	#LR__0695
07dc8                 | LR__0689
07dc8     08 39 06 F6 | 	mov	local14, #264
07dcc     08 3A 06 F6 | 	mov	local15, #8
07dd0     44 00 90 FD | 	jmp	#LR__0695
07dd4                 | LR__0690
07dd4     09 39 06 F6 | 	mov	local14, #265
07dd8     04 3A 06 F6 | 	mov	local15, #4
07ddc     38 00 90 FD | 	jmp	#LR__0695
07de0                 | LR__0691
07de0     0A 39 06 F6 | 	mov	local14, #266
07de4     08 3A 06 F6 | 	mov	local15, #8
07de8     2C 00 90 FD | 	jmp	#LR__0695
07dec                 | LR__0692
07dec     0B 39 06 F6 | 	mov	local14, #267
07df0     04 3A 06 F6 | 	mov	local15, #4
07df4     20 00 90 FD | 	jmp	#LR__0695
07df8                 | LR__0693
07df8     2F 12 06 F6 | 	mov	arg01, #47
07dfc     28 12 B1 FD | 	call	#_printerror
07e00     2F FA 05 F6 | 	mov	result1, #47
07e04     10 01 90 FD | 	jmp	#LR__0696
07e08                 | LR__0694
07e08     2E 12 06 F6 | 	mov	arg01, #46
07e0c     18 12 B1 FD | 	call	#_printerror
07e10                 | '   printerror(46): return 46
07e10     2E FA 05 F6 | 	mov	result1, #46
07e14     00 01 90 FD | 	jmp	#LR__0696
07e18                 | LR__0695
07e18     0F 3B 02 FD | 	qmul	local15, local01
07e1c     18 2A 62 FD | 	getqx	local07
07e20     10 2B 02 FD | 	qmul	local07, local02
07e24     18 3C 62 FD | 	getqx	local16
07e28     11 3D 02 FD | 	qmul	local16, local03
07e2c     7B 00 00 FF 
07e30     68 E4 05 F1 | 	add	objptr, ##63080
07e34     F2 3E 02 FB | 	rdlong	local17, objptr
07e38     1C 15 02 F6 | 	mov	arg02, local14
07e3c     18 3C 62 FD | 	getqx	local16
07e40     1E 3F 82 F1 | 	sub	local17, local16
07e44     10 3E 86 F1 | 	sub	local17, #16
07e48     0F 3E 26 F5 | 	andn	local17, #15
07e4c     F2 3E 62 FC | 	wrlong	local17, objptr
07e50     7B 00 00 FF 
07e54     68 E4 85 F1 | 	sub	objptr, ##63080
07e58     1F 13 02 F6 | 	mov	arg01, local17
07e5c     74 13 B1 FD | 	call	#_psdpoke
07e60     1F 13 02 F6 | 	mov	arg01, local17
07e64     02 12 06 F1 | 	add	arg01, #2
07e68     1D 15 02 F6 | 	mov	arg02, local15
07e6c     64 13 B1 FD | 	call	#_psdpoke
07e70     1F 13 02 F6 | 	mov	arg01, local17
07e74     04 12 06 F1 | 	add	arg01, #4
07e78     0F 15 02 F6 | 	mov	arg02, local01
07e7c     0C 13 B1 FD | 	call	#_pslpoke
07e80     1F 13 02 F6 | 	mov	arg01, local17
07e84     08 12 06 F1 | 	add	arg01, #8
07e88     10 15 02 F6 | 	mov	arg02, local02
07e8c     FC 12 B1 FD | 	call	#_pslpoke
07e90     1F 13 02 F6 | 	mov	arg01, local17
07e94     0C 12 06 F1 | 	add	arg01, #12
07e98     11 15 02 F6 | 	mov	arg02, local03
07e9c     EC 12 B1 FD | 	call	#_pslpoke
07ea0     14 35 02 F6 | 	mov	local12, local06
07ea4     04 34 66 F0 | 	shl	local12, #4
07ea8     34 00 00 FF 
07eac     F8 E5 05 F1 | 	add	objptr, ##27128
07eb0     F2 34 02 F1 | 	add	local12, objptr
07eb4     1A 27 62 FC | 	wrlong	local05, local12
07eb8     14 35 02 F6 | 	mov	local12, local06
07ebc     04 34 66 F0 | 	shl	local12, #4
07ec0     F2 34 02 F1 | 	add	local12, objptr
07ec4     04 34 06 F1 | 	add	local12, #4
07ec8     1A 3F 62 FC | 	wrlong	local17, local12
07ecc     14 35 02 F6 | 	mov	local12, local06
07ed0     04 34 66 F0 | 	shl	local12, #4
07ed4     F2 34 02 F1 | 	add	local12, objptr
07ed8     0C 34 06 F1 | 	add	local12, #12
07edc     1A 39 62 FC | 	wrlong	local14, local12
07ee0                 | ' memtop=arrayptr
07ee0                 | ' 
07ee0                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
07ee0                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
07ee0                 | ' pslpoke arrayptr+4,dims(0)
07ee0                 | ' pslpoke arrayptr+8,dims(1)
07ee0                 | ' pslpoke arrayptr+12,dims(2)
07ee0                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
07ee0                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
07ee0                 | ' 
07ee0                 | ' 
07ee0                 | ' variables(j).name=varname2$
07ee0                 | ' variables(j).value.uresult=arrayptr
07ee0                 | ' variables(j).vartype=arraytype
07ee0                 | ' if j=varnum then varnum+=1
07ee0     20 00 00 FF 
07ee4     00 E4 05 F1 | 	add	objptr, ##16384
07ee8     F2 2A 02 FB | 	rdlong	local07, objptr
07eec     54 00 00 FF 
07ef0     F8 E5 85 F1 | 	sub	objptr, ##43512
07ef4     15 29 0A F2 | 	cmp	local06, local07 wz
07ef8     54 00 00 AF 
07efc     F8 E5 05 A1 |  if_e	add	objptr, ##43512
07f00     F2 2A 02 AB |  if_e	rdlong	local07, objptr
07f04     01 2A 06 A1 |  if_e	add	local07, #1
07f08     F2 2A 62 AC |  if_e	wrlong	local07, objptr
07f0c     54 00 00 AF 
07f10     F8 E5 85 A1 |  if_e	sub	objptr, ##43512
07f14                 | ' 
07f14                 | ' return 0
07f14     00 FA 05 F6 | 	mov	result1, #0
07f18                 | LR__0696
07f18     A7 F0 03 F6 | 	mov	ptra, fp
07f1c     B2 00 A0 FD | 	call	#popregs_
07f20                 | _compile_dim_ret
07f20     2D 00 64 FD | 	ret
07f24                 | 
07f24                 | ' 
07f24                 | ' 
07f24                 | ' function compile_for() as ulong  
07f24                 | _compile_for
07f24     07 4A 05 F6 | 	mov	COUNT_, #7
07f28     A8 00 A0 FD | 	call	#pushregs_
07f2c                 | ' 
07f2c                 | ' 
07f2c                 | ' 
07f2c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
07f2c     57 00 00 FF 
07f30     34 E4 05 F1 | 	add	objptr, ##44596
07f34     F2 14 02 FB | 	rdlong	arg02, objptr
07f38     01 14 06 F1 | 	add	arg02, #1
07f3c     03 14 66 F0 | 	shl	arg02, #3
07f40     02 00 00 FF 
07f44     38 E4 85 F1 | 	sub	objptr, ##1080
07f48     F2 14 02 F1 | 	add	arg02, objptr
07f4c     0A 13 02 FB | 	rdlong	arg01, arg02
07f50     54 00 00 FF 
07f54     FC E5 85 F1 | 	sub	objptr, ##43516
07f58                 | ' 
07f58                 | ' select case s
07f58     64 01 00 FF 
07f5c     34 14 06 F6 | 	mov	arg02, ##@LR__4742
07f60     48 51 B1 FD | 	call	#__system___string_cmp
07f64     00 FA 0D F2 | 	cmp	result1, #0 wz
07f68     1B FA 05 A6 |  if_e	mov	result1, #27
07f6c     00 FA 05 56 |  if_ne	mov	result1, #0
07f70     00 FA 0D F2 | 	cmp	result1, #0 wz
07f74     0C 00 90 AD |  if_e	jmp	#LR__0700
07f78     05 12 06 F6 | 	mov	arg01, #5
07f7c     D8 E4 BF FD | 	call	#_compile_immediate_assign
07f80     10 00 90 FD | 	jmp	#LR__0701
07f84                 | LR__0700
07f84     20 12 06 F6 | 	mov	arg01, #32
07f88     48 E9 BF FD | 	call	#_compile_error
07f8c     20 FA 05 F6 | 	mov	result1, #32
07f90     E8 02 90 FD | 	jmp	#LR__0707
07f94                 | LR__0701
07f94     6A 00 00 FF 
07f98     6C E4 05 F1 | 	add	objptr, ##54380
07f9c     F2 12 02 FB | 	rdlong	arg01, objptr
07fa0     09 25 02 F6 | 	mov	local04, arg01
07fa4     01 24 86 F1 | 	sub	local04, #1
07fa8     12 15 02 F6 | 	mov	arg02, local04
07fac     01 14 66 F0 | 	shl	arg02, #1
07fb0     12 15 02 F1 | 	add	arg02, local04
07fb4     02 14 66 F0 | 	shl	arg02, #2
07fb8     03 00 00 FF 
07fbc     00 E4 85 F1 | 	sub	objptr, ##1536
07fc0     F2 14 02 F1 | 	add	arg02, objptr
07fc4     0A 1F 02 FB | 	rdlong	local01, arg02
07fc8     04 14 06 F1 | 	add	arg02, #4
07fcc     0A 27 02 FB | 	rdlong	local05, arg02
07fd0     01 12 86 F1 | 	sub	arg01, #1
07fd4     09 29 02 F6 | 	mov	local06, arg01
07fd8     01 28 66 F0 | 	shl	local06, #1
07fdc     09 29 02 F1 | 	add	local06, arg01
07fe0     02 28 66 F0 | 	shl	local06, #2
07fe4     F2 28 02 F1 | 	add	local06, objptr
07fe8     08 28 06 F1 | 	add	local06, #8
07fec     14 13 02 FB | 	rdlong	arg01, local06
07ff0     13 21 02 F6 | 	mov	local02, local05
07ff4     09 23 02 F6 | 	mov	local03, arg01
07ff8                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
07ff8                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
07ff8     17 22 0E F2 | 	cmp	local03, #23 wz
07ffc     67 00 00 FF 
08000     6C E4 85 F1 | 	sub	objptr, ##52844
08004     10 00 90 AD |  if_e	jmp	#LR__0702
08008     22 12 06 F6 | 	mov	arg01, #34
0800c     C4 E8 BF FD | 	call	#_compile_error
08010     22 FA 05 F6 | 	mov	result1, #34
08014     64 02 90 FD | 	jmp	#LR__0707
08018                 | LR__0702
08018     0F 2B 02 F6 | 	mov	local07, local01
0801c                 | ' varnum=t1.result.uresult
0801c                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
0801c     57 00 00 FF 
08020     34 E4 05 F1 | 	add	objptr, ##44596
08024     F2 24 02 FB | 	rdlong	local04, objptr
08028     03 24 66 F0 | 	shl	local04, #3
0802c     02 00 00 FF 
08030     38 E4 85 F1 | 	sub	objptr, ##1080
08034     F2 24 02 F1 | 	add	local04, objptr
08038     12 13 02 FB | 	rdlong	arg01, local04
0803c     65 01 00 FF 
08040     CF 15 06 F6 | 	mov	arg02, ##@LR__4935
08044     54 00 00 FF 
08048     FC E5 85 F1 | 	sub	objptr, ##43516
0804c     5C 50 B1 FD | 	call	#__system___string_cmp
08050     00 FA 0D F2 | 	cmp	result1, #0 wz
08054     10 00 90 AD |  if_e	jmp	#LR__0703
08058     21 12 06 F6 | 	mov	arg01, #33
0805c     74 E8 BF FD | 	call	#_compile_error
08060     21 FA 05 F6 | 	mov	result1, #33
08064     14 02 90 FD | 	jmp	#LR__0707
08068                 | LR__0703
08068     57 00 00 FF 
0806c     34 E4 05 F1 | 	add	objptr, ##44596
08070     F2 24 02 FB | 	rdlong	local04, objptr
08074     01 24 06 F1 | 	add	local04, #1
08078     F2 24 62 FC | 	wrlong	local04, objptr
0807c     57 00 00 FF 
08080     34 E4 85 F1 | 	sub	objptr, ##44596
08084     9C 0C B0 FD | 	call	#_expr
08088                 | ' ct+=1
08088                 | ' expr()  ' there is "to" value pushed on the stack
08088                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
08088     57 00 00 FF 
0808c     34 E4 05 F1 | 	add	objptr, ##44596
08090     F2 24 02 FB | 	rdlong	local04, objptr
08094     03 24 66 F0 | 	shl	local04, #3
08098     02 00 00 FF 
0809c     38 E4 85 F1 | 	sub	objptr, ##1080
080a0     F2 24 02 F1 | 	add	local04, objptr
080a4     12 13 02 FB | 	rdlong	arg01, local04
080a8     65 01 00 FF 
080ac     D2 15 06 F6 | 	mov	arg02, ##@LR__4936
080b0     54 00 00 FF 
080b4     FC E5 85 F1 | 	sub	objptr, ##43516
080b8     F0 4F B1 FD | 	call	#__system___string_cmp
080bc     00 FA 0D F2 | 	cmp	result1, #0 wz
080c0     3C 00 90 AD |  if_e	jmp	#LR__0704
080c4     57 00 00 FF 
080c8     34 E4 05 F1 | 	add	objptr, ##44596
080cc     F2 28 02 FB | 	rdlong	local06, objptr
080d0     03 28 66 F0 | 	shl	local06, #3
080d4     02 00 00 FF 
080d8     38 E4 85 F1 | 	sub	objptr, ##1080
080dc     F2 28 02 F1 | 	add	local06, objptr
080e0     14 13 02 FB | 	rdlong	arg01, local06
080e4     65 01 00 FF 
080e8     D7 15 06 F6 | 	mov	arg02, ##@LR__4937
080ec     54 00 00 FF 
080f0     FC E5 85 F1 | 	sub	objptr, ##43516
080f4     B4 4F B1 FD | 	call	#__system___string_cmp
080f8     00 FA 0D F2 | 	cmp	result1, #0 wz
080fc     24 00 90 5D |  if_ne	jmp	#LR__0705
08100                 | LR__0704
08100     57 00 00 FF 
08104     34 E4 05 F1 | 	add	objptr, ##44596
08108     F2 28 02 FB | 	rdlong	local06, objptr
0810c     01 28 06 F1 | 	add	local06, #1
08110     F2 28 62 FC | 	wrlong	local06, objptr
08114     57 00 00 FF 
08118     34 E4 85 F1 | 	sub	objptr, ##44596
0811c     04 0C B0 FD | 	call	#_expr
08120     78 00 90 FD | 	jmp	#LR__0706
08124                 | LR__0705
08124     6A 00 00 FF 
08128     6C E4 05 F1 | 	add	objptr, ##54380
0812c     F2 28 02 FB | 	rdlong	local06, objptr
08130     14 27 02 F6 | 	mov	local05, local06
08134     01 26 66 F0 | 	shl	local05, #1
08138     14 27 02 F1 | 	add	local05, local06
0813c     02 26 66 F0 | 	shl	local05, #2
08140     03 00 00 FF 
08144     00 E4 85 F1 | 	sub	objptr, ##1536
08148     F2 26 02 F1 | 	add	local05, objptr
0814c     08 26 06 F1 | 	add	local05, #8
08150     13 39 68 FC | 	wrlong	#28, local05
08154     03 00 00 FF 
08158     00 E4 05 F1 | 	add	objptr, ##1536
0815c     F2 28 02 FB | 	rdlong	local06, objptr
08160     14 27 02 F6 | 	mov	local05, local06
08164     01 26 66 F0 | 	shl	local05, #1
08168     14 27 02 F1 | 	add	local05, local06
0816c     02 26 66 F0 | 	shl	local05, #2
08170     03 00 00 FF 
08174     00 E4 85 F1 | 	sub	objptr, ##1536
08178     F2 26 02 F1 | 	add	local05, objptr
0817c     13 03 68 FC | 	wrlong	#1, local05
08180     03 00 00 FF 
08184     00 E4 05 F1 | 	add	objptr, ##1536
08188     F2 28 02 FB | 	rdlong	local06, objptr
0818c     01 28 06 F1 | 	add	local06, #1
08190     F2 28 62 FC | 	wrlong	local06, objptr
08194     6A 00 00 FF 
08198     6C E4 85 F1 | 	sub	objptr, ##54380
0819c                 | LR__0706
0819c     6A 00 00 FF 
081a0     6C E4 05 F1 | 	add	objptr, ##54380
081a4     F2 28 02 FB | 	rdlong	local06, objptr
081a8     14 27 02 F6 | 	mov	local05, local06
081ac     01 26 66 F0 | 	shl	local05, #1
081b0     14 27 02 F1 | 	add	local05, local06
081b4     02 26 66 F0 | 	shl	local05, #2
081b8     03 00 00 FF 
081bc     00 E4 85 F1 | 	sub	objptr, ##1536
081c0     F2 26 02 F1 | 	add	local05, objptr
081c4     08 26 06 F1 | 	add	local05, #8
081c8     13 39 68 FC | 	wrlong	#28, local05
081cc     03 00 00 FF 
081d0     00 E4 05 F1 | 	add	objptr, ##1536
081d4     F2 28 02 FB | 	rdlong	local06, objptr
081d8     14 27 02 F6 | 	mov	local05, local06
081dc     01 26 66 F0 | 	shl	local05, #1
081e0     14 27 02 F1 | 	add	local05, local06
081e4     02 26 66 F0 | 	shl	local05, #2
081e8     03 00 00 FF 
081ec     00 E4 85 F1 | 	sub	objptr, ##1536
081f0     F2 26 02 F1 | 	add	local05, objptr
081f4     13 2B 62 FC | 	wrlong	local07, local05
081f8     03 00 00 FF 
081fc     00 E4 05 F1 | 	add	objptr, ##1536
08200     F2 2A 02 FB | 	rdlong	local07, objptr
08204     01 2A 06 F1 | 	add	local07, #1
08208     F2 2A 62 FC | 	wrlong	local07, objptr
0820c     15 29 02 F6 | 	mov	local06, local07
08210     01 28 66 F0 | 	shl	local06, #1
08214     15 29 02 F1 | 	add	local06, local07
08218     02 28 66 F0 | 	shl	local06, #2
0821c     03 00 00 FF 
08220     00 E4 85 F1 | 	sub	objptr, ##1536
08224     F2 28 02 F1 | 	add	local06, objptr
08228     08 28 06 F1 | 	add	local06, #8
0822c     14 95 68 FC | 	wrlong	#74, local06
08230     03 00 00 FF 
08234     00 E4 05 F1 | 	add	objptr, ##1536
08238     F2 2A 02 FB | 	rdlong	local07, objptr
0823c     15 29 02 F6 | 	mov	local06, local07
08240     01 28 66 F0 | 	shl	local06, #1
08244     15 29 02 F1 | 	add	local06, local07
08248     02 28 66 F0 | 	shl	local06, #2
0824c     03 00 00 FF 
08250     00 E4 85 F1 | 	sub	objptr, ##1536
08254     F2 28 02 F1 | 	add	local06, objptr
08258     14 01 68 FC | 	wrlong	#0, local06
0825c     03 00 00 FF 
08260     00 E4 05 F1 | 	add	objptr, ##1536
08264     F2 2A 02 FB | 	rdlong	local07, objptr
08268     01 2A 06 F1 | 	add	local07, #1
0826c     F2 2A 62 FC | 	wrlong	local07, objptr
08270     6A 00 00 FF 
08274     6C E4 85 F1 | 	sub	objptr, ##54380
08278                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
08278                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
08278                 | ' 
08278                 | ' 
08278                 | ' return 0
08278     00 FA 05 F6 | 	mov	result1, #0
0827c                 | LR__0707
0827c     A7 F0 03 F6 | 	mov	ptra, fp
08280     B2 00 A0 FD | 	call	#popregs_
08284                 | _compile_for_ret
08284     2D 00 64 FD | 	ret
08288                 | 
08288                 | ' 
08288                 | ' 
08288                 | ' sub do_for()
08288                 | _do_for
08288     01 4A 05 F6 | 	mov	COUNT_, #1
0828c     A8 00 A0 FD | 	call	#pushregs_
08290     10 F0 07 F1 | 	add	ptra, #16
08294     79 00 00 FF 
08298     C8 E5 05 F1 | 	add	objptr, ##62408
0829c     F2 12 02 FB | 	rdlong	arg01, objptr
082a0     01 12 06 F1 | 	add	arg01, #1
082a4     F2 12 62 FC | 	wrlong	arg01, objptr
082a8     79 00 00 FF 
082ac     C8 E5 85 F1 | 	sub	objptr, ##62408
082b0     F8 1E B0 FD | 	call	#_pop
082b4     A7 FA 61 FC | 	wrlong	result1, fp
082b8     04 4E 05 F1 | 	add	fp, #4
082bc     A7 FC 61 FC | 	wrlong	result2, fp
082c0     04 4E 05 F1 | 	add	fp, #4
082c4     A7 FE 61 FC | 	wrlong	result3, fp
082c8     08 4E 85 F1 | 	sub	fp, #8
082cc     79 00 00 FF 
082d0     C8 E5 05 F1 | 	add	objptr, ##62408
082d4     F2 12 02 FB | 	rdlong	arg01, objptr
082d8     09 1F 02 F6 | 	mov	local01, arg01
082dc     02 1E 66 F0 | 	shl	local01, #2
082e0     09 1F 02 F1 | 	add	local01, arg01
082e4     02 1E 66 F0 | 	shl	local01, #2
082e8     07 00 00 FF 
082ec     40 E5 85 F1 | 	sub	objptr, ##3904
082f0     F2 1E 02 F1 | 	add	local01, objptr
082f4     A7 12 02 FB | 	rdlong	arg01, fp
082f8     08 1E 06 F1 | 	add	local01, #8
082fc     0F 13 62 FC | 	wrlong	arg01, local01
08300     72 00 00 FF 
08304     88 E4 85 F1 | 	sub	objptr, ##58504
08308     A0 1E B0 FD | 	call	#_pop
0830c     A7 FA 61 FC | 	wrlong	result1, fp
08310     04 4E 05 F1 | 	add	fp, #4
08314     A7 FC 61 FC | 	wrlong	result2, fp
08318     04 4E 05 F1 | 	add	fp, #4
0831c     A7 FE 61 FC | 	wrlong	result3, fp
08320     08 4E 85 F1 | 	sub	fp, #8
08324     79 00 00 FF 
08328     C8 E5 05 F1 | 	add	objptr, ##62408
0832c     F2 12 02 FB | 	rdlong	arg01, objptr
08330     09 1F 02 F6 | 	mov	local01, arg01
08334     02 1E 66 F0 | 	shl	local01, #2
08338     09 1F 02 F1 | 	add	local01, arg01
0833c     02 1E 66 F0 | 	shl	local01, #2
08340     07 00 00 FF 
08344     40 E5 85 F1 | 	sub	objptr, ##3904
08348     F2 1E 02 F1 | 	add	local01, objptr
0834c     A7 12 02 F6 | 	mov	arg01, fp
08350     72 00 00 FF 
08354     88 E4 85 F1 | 	sub	objptr, ##58504
08358     A8 AA B0 FD | 	call	#_converttoint
0835c     FD 12 02 F6 | 	mov	arg01, result1
08360     0C 1E 06 F1 | 	add	local01, #12
08364     0F 13 62 FC | 	wrlong	arg01, local01
08368     40 1E B0 FD | 	call	#_pop
0836c     A7 FA 61 FC | 	wrlong	result1, fp
08370     04 4E 05 F1 | 	add	fp, #4
08374     A7 FC 61 FC | 	wrlong	result2, fp
08378     04 4E 05 F1 | 	add	fp, #4
0837c     A7 FE 61 FC | 	wrlong	result3, fp
08380     08 4E 85 F1 | 	sub	fp, #8
08384     79 00 00 FF 
08388     C8 E5 05 F1 | 	add	objptr, ##62408
0838c     F2 12 02 FB | 	rdlong	arg01, objptr
08390     09 1F 02 F6 | 	mov	local01, arg01
08394     02 1E 66 F0 | 	shl	local01, #2
08398     09 1F 02 F1 | 	add	local01, arg01
0839c     02 1E 66 F0 | 	shl	local01, #2
083a0     07 00 00 FF 
083a4     40 E5 85 F1 | 	sub	objptr, ##3904
083a8     F2 1E 02 F1 | 	add	local01, objptr
083ac     A7 12 02 F6 | 	mov	arg01, fp
083b0     72 00 00 FF 
083b4     88 E4 85 F1 | 	sub	objptr, ##58504
083b8     48 AA B0 FD | 	call	#_converttoint
083bc     10 1E 06 F1 | 	add	local01, #16
083c0     0F FB 61 FC | 	wrlong	result1, local01
083c4                 | ' fortop+=1
083c4                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
083c4                 | ' 'if i> maxfor then printerror(36) : return
083c4                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
083c4                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
083c4                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
083c4                 | ' if compiledline(lineptr_e).result_type=token_end then
083c4     6A 00 00 FF 
083c8     70 E4 05 F1 | 	add	objptr, ##54384
083cc     F2 12 02 FB | 	rdlong	arg01, objptr
083d0     09 1F 02 F6 | 	mov	local01, arg01
083d4     01 1E 66 F0 | 	shl	local01, #1
083d8     09 1F 02 F1 | 	add	local01, arg01
083dc     02 1E 66 F0 | 	shl	local01, #2
083e0     03 00 00 FF 
083e4     04 E4 85 F1 | 	sub	objptr, ##1540
083e8     F2 1E 02 F1 | 	add	local01, objptr
083ec     08 1E 06 F1 | 	add	local01, #8
083f0     0F 1F 02 FB | 	rdlong	local01, local01
083f4     FE 1F 0E F2 | 	cmp	local01, #510 wz
083f8     67 00 00 FF 
083fc     6C E4 85 F1 | 	sub	objptr, ##52844
08400     70 00 90 5D |  if_ne	jmp	#LR__0710
08404     79 00 00 FF 
08408     C8 E5 05 F1 | 	add	objptr, ##62408
0840c     F2 12 02 FB | 	rdlong	arg01, objptr
08410     09 1F 02 F6 | 	mov	local01, arg01
08414     02 1E 66 F0 | 	shl	local01, #2
08418     09 1F 02 F1 | 	add	local01, arg01
0841c     02 1E 66 F0 | 	shl	local01, #2
08420     07 00 00 FF 
08424     40 E5 85 F1 | 	sub	objptr, ##3904
08428     F2 1E 02 F1 | 	add	local01, objptr
0842c     07 00 00 FF 
08430     18 E5 05 F1 | 	add	objptr, ##3864
08434     F2 12 02 FB | 	rdlong	arg01, objptr
08438     0F 13 62 FC | 	wrlong	arg01, local01
0843c     28 E4 05 F1 | 	add	objptr, #40
08440     F2 12 02 FB | 	rdlong	arg01, objptr
08444     09 1F 02 F6 | 	mov	local01, arg01
08448     02 1E 66 F0 | 	shl	local01, #2
0844c     09 1F 02 F1 | 	add	local01, arg01
08450     02 1E 66 F0 | 	shl	local01, #2
08454     07 00 00 FF 
08458     40 E5 85 F1 | 	sub	objptr, ##3904
0845c     F2 1E 02 F1 | 	add	local01, objptr
08460     04 1E 06 F1 | 	add	local01, #4
08464     0F 01 68 FC | 	wrlong	#0, local01
08468     72 00 00 FF 
0846c     88 E4 85 F1 | 	sub	objptr, ##58504
08470     7C 00 90 FD | 	jmp	#LR__0711
08474                 | LR__0710
08474     79 00 00 FF 
08478     C8 E5 05 F1 | 	add	objptr, ##62408
0847c     F2 12 02 FB | 	rdlong	arg01, objptr
08480     09 1F 02 F6 | 	mov	local01, arg01
08484     02 1E 66 F0 | 	shl	local01, #2
08488     09 1F 02 F1 | 	add	local01, arg01
0848c     02 1E 66 F0 | 	shl	local01, #2
08490     07 00 00 FF 
08494     40 E5 85 F1 | 	sub	objptr, ##3904
08498     F2 1E 02 F1 | 	add	local01, objptr
0849c     07 00 00 FF 
084a0     20 E5 05 F1 | 	add	objptr, ##3872
084a4     F2 12 02 FB | 	rdlong	arg01, objptr
084a8     0F 13 62 FC | 	wrlong	arg01, local01
084ac     20 E4 05 F1 | 	add	objptr, #32
084b0     F2 12 02 FB | 	rdlong	arg01, objptr
084b4     09 1F 02 F6 | 	mov	local01, arg01
084b8     02 1E 66 F0 | 	shl	local01, #2
084bc     09 1F 02 F1 | 	add	local01, arg01
084c0     02 1E 66 F0 | 	shl	local01, #2
084c4     07 00 00 FF 
084c8     40 E5 85 F1 | 	sub	objptr, ##3904
084cc     F2 1E 02 F1 | 	add	local01, objptr
084d0     08 00 00 FF 
084d4     18 E4 85 F1 | 	sub	objptr, ##4120
084d8     F2 12 02 FB | 	rdlong	arg01, objptr
084dc     6A 00 00 FF 
084e0     70 E4 85 F1 | 	sub	objptr, ##54384
084e4     01 12 06 F1 | 	add	arg01, #1
084e8     04 1E 06 F1 | 	add	local01, #4
084ec     0F 13 62 FC | 	wrlong	arg01, local01
084f0                 | LR__0711
084f0     A7 F0 03 F6 | 	mov	ptra, fp
084f4     B2 00 A0 FD | 	call	#popregs_
084f8                 | _do_for_ret
084f8     2D 00 64 FD | 	ret
084fc                 | 
084fc                 | ' 
084fc                 | ' ' now do_next todo
084fc                 | ' 
084fc                 | ' sub do_next()
084fc                 | _do_next
084fc     04 4A 05 F6 | 	mov	COUNT_, #4
08500     A8 00 A0 FD | 	call	#pushregs_
08504     A4 1C B0 FD | 	call	#_pop
08508     FD 1E 02 F6 | 	mov	local01, result1
0850c     FE 20 02 F6 | 	mov	local02, result2
08510     FF 22 02 F6 | 	mov	local03, result3
08514                 | ' 
08514                 | ' t1=pop() :varnum=t1.result.uresult
08514                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
08514     79 00 00 FF 
08518     C8 E5 05 F1 | 	add	objptr, ##62408
0851c     F2 12 02 FB | 	rdlong	arg01, objptr
08520     09 15 02 F6 | 	mov	arg02, arg01
08524     02 14 66 F0 | 	shl	arg02, #2
08528     09 15 02 F1 | 	add	arg02, arg01
0852c     02 14 66 F0 | 	shl	arg02, #2
08530     07 00 00 FF 
08534     40 E5 85 F1 | 	sub	objptr, ##3904
08538     F2 14 02 F1 | 	add	arg02, objptr
0853c     08 14 06 F1 | 	add	arg02, #8
08540     0A 15 02 FB | 	rdlong	arg02, arg02
08544     0F 15 0A F2 | 	cmp	arg02, local01 wz
08548     72 00 00 FF 
0854c     88 E4 85 F1 | 	sub	objptr, ##58504
08550     0C 00 90 AD |  if_e	jmp	#LR__0720
08554     25 12 06 F6 | 	mov	arg01, #37
08558     CC 0A B1 FD | 	call	#_printerror
0855c     A8 02 90 FD | 	jmp	#LR__0725
08560                 | LR__0720
08560                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
08560     0F 15 02 F6 | 	mov	arg02, local01
08564     04 14 66 F0 | 	shl	arg02, #4
08568     34 00 00 FF 
0856c     F8 E5 05 F1 | 	add	objptr, ##27128
08570     F2 14 02 F1 | 	add	arg02, objptr
08574     0C 14 06 F1 | 	add	arg02, #12
08578     0A 15 02 FB | 	rdlong	arg02, arg02
0857c     1E 14 0E F2 | 	cmp	arg02, #30 wz
08580     34 00 00 FF 
08584     F8 E5 85 F1 | 	sub	objptr, ##27128
08588     54 00 90 5D |  if_ne	jmp	#LR__0721
0858c     0F 15 02 F6 | 	mov	arg02, local01
08590     04 14 66 F0 | 	shl	arg02, #4
08594     34 00 00 FF 
08598     F8 E5 05 F1 | 	add	objptr, ##27128
0859c     F2 14 02 F1 | 	add	arg02, objptr
085a0     0C 14 06 F1 | 	add	arg02, #12
085a4     0A 39 68 FC | 	wrlong	#28, arg02
085a8     0F 25 02 F6 | 	mov	local04, local01
085ac     04 24 66 F0 | 	shl	local04, #4
085b0     F2 24 02 F1 | 	add	local04, objptr
085b4     0F 13 02 F6 | 	mov	arg01, local01
085b8     04 12 66 F0 | 	shl	arg01, #4
085bc     F2 12 02 F1 | 	add	arg01, objptr
085c0     04 12 06 F1 | 	add	arg01, #4
085c4     09 13 02 FB | 	rdlong	arg01, arg01
085c8     34 00 00 FF 
085cc     F8 E5 85 F1 | 	sub	objptr, ##27128
085d0     01 14 06 F6 | 	mov	arg02, #1
085d4     F0 7A B1 FD | 	call	#__system___float_tointeger
085d8     04 24 06 F1 | 	add	local04, #4
085dc     12 FB 61 FC | 	wrlong	result1, local04
085e0                 | LR__0721
085e0     79 00 00 FF 
085e4     C8 E5 05 F1 | 	add	objptr, ##62408
085e8     F2 12 02 FB | 	rdlong	arg01, objptr
085ec     09 25 02 F6 | 	mov	local04, arg01
085f0     02 24 66 F0 | 	shl	local04, #2
085f4     09 25 02 F1 | 	add	local04, arg01
085f8     02 24 66 F0 | 	shl	local04, #2
085fc     07 00 00 FF 
08600     40 E5 85 F1 | 	sub	objptr, ##3904
08604     F2 24 02 F1 | 	add	local04, objptr
08608     0C 24 06 F1 | 	add	local04, #12
0860c     12 25 02 FB | 	rdlong	local04, local04
08610     0F 13 02 F6 | 	mov	arg01, local01
08614     04 12 66 F0 | 	shl	arg01, #4
08618     3D 00 00 FF 
0861c     90 E4 85 F1 | 	sub	objptr, ##31376
08620     F2 12 02 F1 | 	add	arg01, objptr
08624     0F FF 01 F6 | 	mov	result3, local01
08628     04 FE 65 F0 | 	shl	result3, #4
0862c     F2 FE 01 F1 | 	add	result3, objptr
08630     04 FE 05 F1 | 	add	result3, #4
08634     FF FE 01 FB | 	rdlong	result3, result3
08638     12 FF 01 F1 | 	add	result3, local04
0863c     04 12 06 F1 | 	add	arg01, #4
08640     09 FF 61 FC | 	wrlong	result3, arg01
08644                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
08644                 | ' if fortable(fortop).stepval>=0 then
08644     44 00 00 FF 
08648     D0 E5 05 F1 | 	add	objptr, ##35280
0864c     F2 12 02 FB | 	rdlong	arg01, objptr
08650     09 25 02 F6 | 	mov	local04, arg01
08654     02 24 66 F0 | 	shl	local04, #2
08658     09 25 02 F1 | 	add	local04, arg01
0865c     02 24 66 F0 | 	shl	local04, #2
08660     07 00 00 FF 
08664     40 E5 85 F1 | 	sub	objptr, ##3904
08668     F2 24 02 F1 | 	add	local04, objptr
0866c     0C 24 06 F1 | 	add	local04, #12
08670     12 25 02 FB | 	rdlong	local04, local04
08674     00 24 56 F2 | 	cmps	local04, #0 wc
08678     72 00 00 FF 
0867c     88 E4 85 F1 | 	sub	objptr, ##58504
08680     78 00 90 CD |  if_b	jmp	#LR__0722
08684                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
08684     04 1E 66 F0 | 	shl	local01, #4
08688     34 00 00 FF 
0868c     F8 E5 05 F1 | 	add	objptr, ##27128
08690     F2 1E 02 F1 | 	add	local01, objptr
08694     44 00 00 FF 
08698     D0 E5 05 F1 | 	add	objptr, ##35280
0869c     F2 24 02 FB | 	rdlong	local04, objptr
086a0     12 13 02 F6 | 	mov	arg01, local04
086a4     02 12 66 F0 | 	shl	arg01, #2
086a8     12 13 02 F1 | 	add	arg01, local04
086ac     02 12 66 F0 | 	shl	arg01, #2
086b0     07 00 00 FF 
086b4     40 E5 85 F1 | 	sub	objptr, ##3904
086b8     F2 12 02 F1 | 	add	arg01, objptr
086bc     04 1E 06 F1 | 	add	local01, #4
086c0     0F 25 02 FB | 	rdlong	local04, local01
086c4     10 12 06 F1 | 	add	arg01, #16
086c8     09 13 02 FB | 	rdlong	arg01, arg01
086cc     09 25 5A F2 | 	cmps	local04, arg01 wcz
086d0     72 00 00 FF 
086d4     88 E4 85 F1 | 	sub	objptr, ##58504
086d8     9C 00 90 ED |  if_be	jmp	#LR__0724
086dc     79 00 00 FF 
086e0     C8 E5 05 F1 | 	add	objptr, ##62408
086e4     F2 24 02 FB | 	rdlong	local04, objptr
086e8     01 24 86 F1 | 	sub	local04, #1
086ec     F2 24 62 FC | 	wrlong	local04, objptr
086f0     79 00 00 FF 
086f4     C8 E5 85 F1 | 	sub	objptr, ##62408
086f8     0C 01 90 FD | 	jmp	#LR__0725
086fc                 | LR__0722
086fc                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
086fc     0F 13 02 F6 | 	mov	arg01, local01
08700     04 12 66 F0 | 	shl	arg01, #4
08704     34 00 00 FF 
08708     F8 E5 05 F1 | 	add	objptr, ##27128
0870c     F2 12 02 F1 | 	add	arg01, objptr
08710     44 00 00 FF 
08714     D0 E5 05 F1 | 	add	objptr, ##35280
08718     F2 24 02 FB | 	rdlong	local04, objptr
0871c     12 1F 02 F6 | 	mov	local01, local04
08720     02 1E 66 F0 | 	shl	local01, #2
08724     12 1F 02 F1 | 	add	local01, local04
08728     02 1E 66 F0 | 	shl	local01, #2
0872c     07 00 00 FF 
08730     40 E5 85 F1 | 	sub	objptr, ##3904
08734     F2 1E 02 F1 | 	add	local01, objptr
08738     04 12 06 F1 | 	add	arg01, #4
0873c     09 13 02 FB | 	rdlong	arg01, arg01
08740     10 1E 06 F1 | 	add	local01, #16
08744     0F 1F 02 FB | 	rdlong	local01, local01
08748     0F 13 52 F2 | 	cmps	arg01, local01 wc
0874c     72 00 00 FF 
08750     88 E4 85 F1 | 	sub	objptr, ##58504
08754     20 00 90 3D |  if_ae	jmp	#LR__0723
08758     79 00 00 FF 
0875c     C8 E5 05 F1 | 	add	objptr, ##62408
08760     F2 24 02 FB | 	rdlong	local04, objptr
08764     01 24 86 F1 | 	sub	local04, #1
08768     F2 24 62 FC | 	wrlong	local04, objptr
0876c     79 00 00 FF 
08770     C8 E5 85 F1 | 	sub	objptr, ##62408
08774     90 00 90 FD | 	jmp	#LR__0725
08778                 | LR__0723
08778                 | LR__0724
08778     79 00 00 FF 
0877c     C8 E5 05 F1 | 	add	objptr, ##62408
08780     F2 1E 02 FB | 	rdlong	local01, objptr
08784     0F 25 02 F6 | 	mov	local04, local01
08788     02 24 66 F0 | 	shl	local04, #2
0878c     0F 25 02 F1 | 	add	local04, local01
08790     02 24 66 F0 | 	shl	local04, #2
08794     07 00 00 FF 
08798     40 E5 85 F1 | 	sub	objptr, ##3904
0879c     F2 24 02 F1 | 	add	local04, objptr
087a0     12 25 02 FB | 	rdlong	local04, local04
087a4     07 00 00 FF 
087a8     18 E5 05 F1 | 	add	objptr, ##3864
087ac     F2 24 62 FC | 	wrlong	local04, objptr
087b0     28 E4 05 F1 | 	add	objptr, #40
087b4     F2 1E 02 FB | 	rdlong	local01, objptr
087b8     0F 25 02 F6 | 	mov	local04, local01
087bc     02 24 66 F0 | 	shl	local04, #2
087c0     0F 25 02 F1 | 	add	local04, local01
087c4     02 24 66 F0 | 	shl	local04, #2
087c8     07 00 00 FF 
087cc     40 E5 85 F1 | 	sub	objptr, ##3904
087d0     F2 24 02 F1 | 	add	local04, objptr
087d4     04 24 06 F1 | 	add	local04, #4
087d8     12 25 02 FB | 	rdlong	local04, local04
087dc     07 00 00 FF 
087e0     1C E5 05 F1 | 	add	objptr, ##3868
087e4     F2 24 62 FC | 	wrlong	local04, objptr
087e8     0F 00 00 FF 
087ec     38 E5 85 F1 | 	sub	objptr, ##7992
087f0     F2 24 02 FB | 	rdlong	local04, objptr
087f4     01 24 86 F1 | 	sub	local04, #1
087f8     04 E4 05 F1 | 	add	objptr, #4
087fc     F2 24 62 FC | 	wrlong	local04, objptr
08800     6A 00 00 FF 
08804     70 E4 85 F1 | 	sub	objptr, ##54384
08808                 | LR__0725
08808     A7 F0 03 F6 | 	mov	ptra, fp
0880c     B2 00 A0 FD | 	call	#popregs_
08810                 | _do_next_ret
08810     2D 00 64 FD | 	ret
08814                 | 
08814                 | ' 
08814                 | ' 
08814                 | ' function compile_next() as ulong
08814                 | _compile_next
08814     04 4A 05 F6 | 	mov	COUNT_, #4
08818     A8 00 A0 FD | 	call	#pushregs_
0881c     57 00 00 FF 
08820     34 E4 05 F1 | 	add	objptr, ##44596
08824     F2 12 02 FB | 	rdlong	arg01, objptr
08828     03 12 66 F0 | 	shl	arg01, #3
0882c     02 00 00 FF 
08830     38 E4 85 F1 | 	sub	objptr, ##1080
08834     F2 12 02 F1 | 	add	arg01, objptr
08838     09 1F 02 FB | 	rdlong	local01, arg01
0883c                 | ' 
0883c                 | ' varname$=lparts(ct).part$ 
0883c                 | ' 'suffix$=right$(varname$,1)
0883c                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
0883c                 | ' if varnum=0 then compile_error(35)  : return 35
0883c     04 E4 85 F1 | 	sub	objptr, #4
08840     F2 14 0A FB | 	rdlong	arg02, objptr wz
08844     54 00 00 FF 
08848     F8 E5 85 F1 | 	sub	objptr, ##43512
0884c     10 00 90 5D |  if_ne	jmp	#LR__0730
08850     23 12 06 F6 | 	mov	arg01, #35
08854     7C E0 BF FD | 	call	#_compile_error
08858     23 FA 05 F6 | 	mov	result1, #35
0885c     58 01 90 FD | 	jmp	#LR__0734
08860                 | LR__0730
08860     01 20 66 F6 | 	neg	local02, #1
08864                 | ' j=-1
08864                 | ' for i=0 to varnum-1
08864     00 22 06 F6 | 	mov	local03, #0
08868     54 00 00 FF 
0886c     F8 E5 05 F1 | 	add	objptr, ##43512
08870     F2 24 02 FB | 	rdlong	local04, objptr
08874     54 00 00 FF 
08878     F8 E5 85 F1 | 	sub	objptr, ##43512
0887c                 | LR__0731
0887c     12 23 12 F2 | 	cmp	local03, local04 wc
08880     38 00 90 3D |  if_ae	jmp	#LR__0732
08884                 | '   if variables(i).name=varname$ then j=i : exit
08884     11 15 02 F6 | 	mov	arg02, local03
08888     04 14 66 F0 | 	shl	arg02, #4
0888c     34 00 00 FF 
08890     F8 E5 05 F1 | 	add	objptr, ##27128
08894     F2 14 02 F1 | 	add	arg02, objptr
08898     0A 13 02 FB | 	rdlong	arg01, arg02
0889c     0F 15 02 F6 | 	mov	arg02, local01
088a0     34 00 00 FF 
088a4     F8 E5 85 F1 | 	sub	objptr, ##27128
088a8     00 48 B1 FD | 	call	#__system___string_cmp
088ac     00 FA 0D F2 | 	cmp	result1, #0 wz
088b0     11 21 02 A6 |  if_e	mov	local02, local03
088b4     01 22 06 51 |  if_ne	add	local03, #1
088b8     C0 FF 9F 5D |  if_ne	jmp	#LR__0731
088bc                 | LR__0732
088bc                 | ' if j=-1 then compile_error(35) : return 35
088bc     FF FF 7F FF 
088c0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
088c4     10 00 90 5D |  if_ne	jmp	#LR__0733
088c8     23 12 06 F6 | 	mov	arg01, #35
088cc     04 E0 BF FD | 	call	#_compile_error
088d0     23 FA 05 F6 | 	mov	result1, #35
088d4     E0 00 90 FD | 	jmp	#LR__0734
088d8                 | LR__0733
088d8     6A 00 00 FF 
088dc     6C E4 05 F1 | 	add	objptr, ##54380
088e0     F2 24 02 FB | 	rdlong	local04, objptr
088e4     12 23 02 F6 | 	mov	local03, local04
088e8     01 22 66 F0 | 	shl	local03, #1
088ec     12 23 02 F1 | 	add	local03, local04
088f0     02 22 66 F0 | 	shl	local03, #2
088f4     03 00 00 FF 
088f8     00 E4 85 F1 | 	sub	objptr, ##1536
088fc     F2 22 02 F1 | 	add	local03, objptr
08900     08 22 06 F1 | 	add	local03, #8
08904     11 39 68 FC | 	wrlong	#28, local03
08908     03 00 00 FF 
0890c     00 E4 05 F1 | 	add	objptr, ##1536
08910     F2 24 02 FB | 	rdlong	local04, objptr
08914     12 23 02 F6 | 	mov	local03, local04
08918     01 22 66 F0 | 	shl	local03, #1
0891c     12 23 02 F1 | 	add	local03, local04
08920     02 22 66 F0 | 	shl	local03, #2
08924     03 00 00 FF 
08928     00 E4 85 F1 | 	sub	objptr, ##1536
0892c     F2 22 02 F1 | 	add	local03, objptr
08930     11 21 62 FC | 	wrlong	local02, local03
08934     03 00 00 FF 
08938     00 E4 05 F1 | 	add	objptr, ##1536
0893c     F2 24 02 FB | 	rdlong	local04, objptr
08940     01 24 06 F1 | 	add	local04, #1
08944     F2 24 62 FC | 	wrlong	local04, objptr
08948     12 23 02 F6 | 	mov	local03, local04
0894c     01 22 66 F0 | 	shl	local03, #1
08950     12 23 02 F1 | 	add	local03, local04
08954     02 22 66 F0 | 	shl	local03, #2
08958     03 00 00 FF 
0895c     00 E4 85 F1 | 	sub	objptr, ##1536
08960     F2 22 02 F1 | 	add	local03, objptr
08964     08 22 06 F1 | 	add	local03, #8
08968     11 97 68 FC | 	wrlong	#75, local03
0896c     03 00 00 FF 
08970     00 E4 05 F1 | 	add	objptr, ##1536
08974     F2 24 02 FB | 	rdlong	local04, objptr
08978     12 23 02 F6 | 	mov	local03, local04
0897c     01 22 66 F0 | 	shl	local03, #1
08980     12 23 02 F1 | 	add	local03, local04
08984     02 22 66 F0 | 	shl	local03, #2
08988     03 00 00 FF 
0898c     00 E4 85 F1 | 	sub	objptr, ##1536
08990     F2 22 02 F1 | 	add	local03, objptr
08994     11 01 68 FC | 	wrlong	#0, local03
08998     03 00 00 FF 
0899c     00 E4 05 F1 | 	add	objptr, ##1536
089a0     F2 24 02 FB | 	rdlong	local04, objptr
089a4     01 24 06 F1 | 	add	local04, #1
089a8     F2 24 62 FC | 	wrlong	local04, objptr
089ac     6A 00 00 FF 
089b0     6C E4 85 F1 | 	sub	objptr, ##54380
089b4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
089b4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
089b4                 | ' return 0
089b4     00 FA 05 F6 | 	mov	result1, #0
089b8                 | LR__0734
089b8     A7 F0 03 F6 | 	mov	ptra, fp
089bc     B2 00 A0 FD | 	call	#popregs_
089c0                 | _compile_next_ret
089c0     2D 00 64 FD | 	ret
089c4                 | 
089c4                 | ' 
089c4                 | ' 
089c4                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
089c4                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
089c4                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
089c4                 | ' 
089c4                 | ' 
089c4                 | ' function compile_goto( ) as ulong
089c4                 | _compile_goto
089c4     03 4A 05 F6 | 	mov	COUNT_, #3
089c8     A8 00 A0 FD | 	call	#pushregs_
089cc     28 F0 07 F1 | 	add	ptra, #40
089d0                 | ' 
089d0                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
089d0     57 00 00 FF 
089d4     34 E4 05 F1 | 	add	objptr, ##44596
089d8     F2 16 02 FB | 	rdlong	arg03, objptr
089dc     03 16 66 F0 | 	shl	arg03, #3
089e0     02 00 00 FF 
089e4     38 E4 85 F1 | 	sub	objptr, ##1080
089e8     F2 16 02 F1 | 	add	arg03, objptr
089ec     04 16 06 F1 | 	add	arg03, #4
089f0     0B 17 02 FB | 	rdlong	arg03, arg03
089f4     01 00 00 FF 
089f8     00 16 0E F2 | 	cmp	arg03, ##512 wz
089fc     54 00 00 FF 
08a00     FC E5 85 F1 | 	sub	objptr, ##43516
08a04     CC 02 90 5D |  if_ne	jmp	#LR__0745
08a08     57 00 00 FF 
08a0c     34 E4 05 F1 | 	add	objptr, ##44596
08a10     F2 16 02 FB | 	rdlong	arg03, objptr
08a14     01 16 06 F1 | 	add	arg03, #1
08a18     03 16 66 F0 | 	shl	arg03, #3
08a1c     02 00 00 FF 
08a20     38 E4 85 F1 | 	sub	objptr, ##1080
08a24     F2 16 02 F1 | 	add	arg03, objptr
08a28     04 16 06 F1 | 	add	arg03, #4
08a2c     0B 17 02 FB | 	rdlong	arg03, arg03
08a30     FE 17 0E F2 | 	cmp	arg03, #510 wz
08a34     54 00 00 FF 
08a38     FC E5 85 F1 | 	sub	objptr, ##43516
08a3c     94 02 90 5D |  if_ne	jmp	#LR__0745
08a40     57 00 00 FF 
08a44     34 E4 05 F1 | 	add	objptr, ##44596
08a48     F2 16 02 FB | 	rdlong	arg03, objptr
08a4c     03 16 66 F0 | 	shl	arg03, #3
08a50     02 00 00 FF 
08a54     38 E4 85 F1 | 	sub	objptr, ##1080
08a58     F2 16 02 F1 | 	add	arg03, objptr
08a5c     0B 13 02 FB | 	rdlong	arg01, arg03
08a60     00 14 06 F6 | 	mov	arg02, #0
08a64     54 00 00 FF 
08a68     FC E5 85 F1 | 	sub	objptr, ##43516
08a6c     08 78 B1 FD | 	call	#__system____builtin_atoi
08a70     04 4E 05 F1 | 	add	fp, #4
08a74     A7 FA 61 FC | 	wrlong	result1, fp
08a78     6A 00 00 FF 
08a7c     6C E4 05 F1 | 	add	objptr, ##54380
08a80     F2 1E 02 FB | 	rdlong	local01, objptr
08a84     0F 21 02 F6 | 	mov	local02, local01
08a88     01 20 66 F0 | 	shl	local02, #1
08a8c     0F 21 02 F1 | 	add	local02, local01
08a90     02 20 66 F0 | 	shl	local02, #2
08a94     03 00 00 FF 
08a98     00 E4 85 F1 | 	sub	objptr, ##1536
08a9c     F2 20 02 F1 | 	add	local02, objptr
08aa0     08 20 06 F1 | 	add	local02, #8
08aa4     10 9D 68 FC | 	wrlong	#78, local02
08aa8     03 00 00 FF 
08aac     08 E4 05 F1 | 	add	objptr, ##1544
08ab0     F2 22 02 FB | 	rdlong	local03, objptr
08ab4     6A 00 00 FF 
08ab8     74 E4 85 F1 | 	sub	objptr, ##54388
08abc     04 4E 05 F1 | 	add	fp, #4
08ac0     A7 22 62 FC | 	wrlong	local03, fp
08ac4     08 4E 85 F1 | 	sub	fp, #8
08ac8                 | ' 
08ac8                 | '   gotoline=val%(lparts(ct).part$) 
08ac8                 | '   compiledline(lineptr).result_type=token_fast_goto
08ac8                 | ' ' now find a pointer to goto
08ac8                 | '   gotoptr=programstart
08ac8                 | '   do
08ac8                 | LR__0740
08ac8     10 4E 05 F1 | 	add	fp, #16
08acc     A7 12 02 F6 | 	mov	arg01, fp
08ad0     08 4E 85 F1 | 	sub	fp, #8
08ad4     A7 14 02 FB | 	rdlong	arg02, fp
08ad8     08 4E 85 F1 | 	sub	fp, #8
08adc     18 16 06 F6 | 	mov	arg03, #24
08ae0     0B 00 00 FF 
08ae4     CC E4 05 F1 | 	add	objptr, ##5836
08ae8     94 39 B1 FD | 	call	#_psram_spin2_read1
08aec     0B 00 00 FF 
08af0     CC E4 85 F1 | 	sub	objptr, ##5836
08af4                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08af4                 | '     if gotoheader(0)<>$FFFFFFFF then
08af4     10 4E 05 F1 | 	add	fp, #16
08af8     A7 22 02 FB | 	rdlong	local03, fp
08afc     10 4E 85 F1 | 	sub	fp, #16
08b00     FF FF 7F FF 
08b04     FF 23 0E F2 | 	cmp	local03, ##-1 wz
08b08     24 00 90 AD |  if_e	jmp	#LR__0741
08b0c     08 4E 05 F1 | 	add	fp, #8
08b10     A7 22 02 FB | 	rdlong	local03, fp
08b14     04 4E 05 F1 | 	add	fp, #4
08b18     A7 22 62 FC | 	wrlong	local03, fp
08b1c     18 4E 05 F1 | 	add	fp, #24
08b20     A7 22 02 FB | 	rdlong	local03, fp
08b24     1C 4E 85 F1 | 	sub	fp, #28
08b28     A7 22 62 FC | 	wrlong	local03, fp
08b2c     08 4E 85 F1 | 	sub	fp, #8
08b30                 | LR__0741
08b30     24 4E 05 F1 | 	add	fp, #36
08b34     A7 22 02 FB | 	rdlong	local03, fp
08b38     24 4E 85 F1 | 	sub	fp, #36
08b3c     FF FF 3F FF 
08b40     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08b44     10 4E 05 51 |  if_ne	add	fp, #16
08b48     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08b4c     10 4E 85 51 |  if_ne	sub	fp, #16
08b50     FF FF 7F 5F 
08b54     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
08b58     1C 00 90 AD |  if_e	jmp	#LR__0742
08b5c     10 4E 05 F1 | 	add	fp, #16
08b60     A7 22 02 FB | 	rdlong	local03, fp
08b64     0C 4E 85 F1 | 	sub	fp, #12
08b68     A7 20 02 FB | 	rdlong	local02, fp
08b6c     04 4E 85 F1 | 	sub	fp, #4
08b70     10 23 0A F2 | 	cmp	local03, local02 wz
08b74     50 FF 9F 5D |  if_ne	jmp	#LR__0740
08b78                 | LR__0742
08b78                 | '   if gotoheader(0)=gotoline then
08b78     10 4E 05 F1 | 	add	fp, #16
08b7c     A7 22 02 FB | 	rdlong	local03, fp
08b80     0C 4E 85 F1 | 	sub	fp, #12
08b84     A7 1E 02 FB | 	rdlong	local01, fp
08b88     04 4E 85 F1 | 	sub	fp, #4
08b8c     0F 23 0A F2 | 	cmp	local03, local01 wz
08b90     7C 00 90 5D |  if_ne	jmp	#LR__0743
08b94     6A 00 00 FF 
08b98     6C E4 05 F1 | 	add	objptr, ##54380
08b9c     F2 1E 02 FB | 	rdlong	local01, objptr
08ba0     0F 21 02 F6 | 	mov	local02, local01
08ba4     01 20 66 F0 | 	shl	local02, #1
08ba8     0F 21 02 F1 | 	add	local02, local01
08bac     02 20 66 F0 | 	shl	local02, #2
08bb0     03 00 00 FF 
08bb4     00 E4 85 F1 | 	sub	objptr, ##1536
08bb8     F2 20 02 F1 | 	add	local02, objptr
08bbc     0C 4E 05 F1 | 	add	fp, #12
08bc0     A7 22 02 FB | 	rdlong	local03, fp
08bc4     10 23 62 FC | 	wrlong	local03, local02
08bc8     03 00 00 FF 
08bcc     00 E4 05 F1 | 	add	objptr, ##1536
08bd0     F2 1E 02 FB | 	rdlong	local01, objptr
08bd4     0F 21 02 F6 | 	mov	local02, local01
08bd8     01 20 66 F0 | 	shl	local02, #1
08bdc     0F 21 02 F1 | 	add	local02, local01
08be0     02 20 66 F0 | 	shl	local02, #2
08be4     03 00 00 FF 
08be8     00 E4 85 F1 | 	sub	objptr, ##1536
08bec     F2 20 02 F1 | 	add	local02, objptr
08bf0     08 4E 85 F1 | 	sub	fp, #8
08bf4     A7 22 02 FB | 	rdlong	local03, fp
08bf8     04 4E 85 F1 | 	sub	fp, #4
08bfc     04 20 06 F1 | 	add	local02, #4
08c00     10 23 62 FC | 	wrlong	local03, local02
08c04     67 00 00 FF 
08c08     6C E4 85 F1 | 	sub	objptr, ##52844
08c0c     A4 00 90 FD | 	jmp	#LR__0744
08c10                 | LR__0743
08c10     6A 00 00 FF 
08c14     6C E4 05 F1 | 	add	objptr, ##54380
08c18     F2 1E 02 FB | 	rdlong	local01, objptr
08c1c     0F 21 02 F6 | 	mov	local02, local01
08c20     01 20 66 F0 | 	shl	local02, #1
08c24     0F 21 02 F1 | 	add	local02, local01
08c28     02 20 66 F0 | 	shl	local02, #2
08c2c     03 00 00 FF 
08c30     00 E4 85 F1 | 	sub	objptr, ##1536
08c34     F2 20 02 F1 | 	add	local02, objptr
08c38     00 00 C0 FF 
08c3c     10 01 68 FC | 	wrlong	##-2147483648, local02
08c40     03 00 00 FF 
08c44     00 E4 05 F1 | 	add	objptr, ##1536
08c48     F2 1E 02 FB | 	rdlong	local01, objptr
08c4c     0F 21 02 F6 | 	mov	local02, local01
08c50     01 20 66 F0 | 	shl	local02, #1
08c54     0F 21 02 F1 | 	add	local02, local01
08c58     02 20 66 F0 | 	shl	local02, #2
08c5c     03 00 00 FF 
08c60     00 E4 85 F1 | 	sub	objptr, ##1536
08c64     F2 20 02 F1 | 	add	local02, objptr
08c68     04 4E 05 F1 | 	add	fp, #4
08c6c     A7 22 02 FB | 	rdlong	local03, fp
08c70     04 4E 85 F1 | 	sub	fp, #4
08c74     04 20 06 F1 | 	add	local02, #4
08c78     10 23 62 FC | 	wrlong	local03, local02
08c7c     03 00 00 FF 
08c80     00 E4 05 F1 | 	add	objptr, ##1536
08c84     F2 1E 02 FB | 	rdlong	local01, objptr
08c88     0F 21 02 F6 | 	mov	local02, local01
08c8c     01 20 66 F0 | 	shl	local02, #1
08c90     0F 21 02 F1 | 	add	local02, local01
08c94     02 20 66 F0 | 	shl	local02, #2
08c98     03 00 00 FF 
08c9c     00 E4 85 F1 | 	sub	objptr, ##1536
08ca0     F2 20 02 F1 | 	add	local02, objptr
08ca4     08 20 06 F1 | 	add	local02, #8
08ca8     10 A7 68 FC | 	wrlong	#83, local02
08cac     67 00 00 FF 
08cb0     6C E4 85 F1 | 	sub	objptr, ##52844
08cb4                 | LR__0744
08cb4     6A 00 00 FF 
08cb8     6C E4 05 F1 | 	add	objptr, ##54380
08cbc     F2 22 02 FB | 	rdlong	local03, objptr
08cc0     01 22 06 F1 | 	add	local03, #1
08cc4     F2 22 62 FC | 	wrlong	local03, objptr
08cc8     6A 00 00 FF 
08ccc     6C E4 85 F1 | 	sub	objptr, ##54380
08cd0     40 00 90 FD | 	jmp	#LR__0746
08cd4                 | LR__0745
08cd4                 | '    print "We have a slow goto, todo  "
08cd4     00 12 06 F6 | 	mov	arg01, #0
08cd8     38 9D B1 FD | 	call	#__system___getiolock_0474
08cdc     FD 12 02 F6 | 	mov	arg01, result1
08ce0     A0 43 B1 FD | 	call	#__system___lockmem
08ce4     65 01 00 FF 
08ce8     DA 15 06 F6 | 	mov	arg02, ##@LR__4938
08cec     00 12 06 F6 | 	mov	arg01, #0
08cf0     00 16 06 F6 | 	mov	arg03, #0
08cf4     90 50 B1 FD | 	call	#__system___basic_print_string
08cf8     00 12 06 F6 | 	mov	arg01, #0
08cfc     0A 14 06 F6 | 	mov	arg02, #10
08d00     00 16 06 F6 | 	mov	arg03, #0
08d04     28 50 B1 FD | 	call	#__system___basic_print_char
08d08     00 12 06 F6 | 	mov	arg01, #0
08d0c     04 9D B1 FD | 	call	#__system___getiolock_0474
08d10     FD 00 68 FC | 	wrlong	#0, result1
08d14                 | LR__0746
08d14                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
08d14                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
08d14                 | ' return 0
08d14     00 FA 05 F6 | 	mov	result1, #0
08d18     A7 F0 03 F6 | 	mov	ptra, fp
08d1c     B2 00 A0 FD | 	call	#popregs_
08d20                 | _compile_goto_ret
08d20     2D 00 64 FD | 	ret
08d24                 | 
08d24                 | ' 
08d24                 | ' 
08d24                 | ' 
08d24                 | ' 
08d24                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08d24                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
08d24                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08d24                 | ' 
08d24                 | ' 
08d24                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08d24                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
08d24                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08d24                 | ' 
08d24                 | ' 
08d24                 | ' function expr() as integer 
08d24                 | _expr
08d24     07 4A 05 F6 | 	mov	COUNT_, #7
08d28     A8 00 A0 FD | 	call	#pushregs_
08d2c                 | _expr_enter
08d2c     57 00 00 FF 
08d30     34 E4 05 F1 | 	add	objptr, ##44596
08d34     F2 24 02 FB | 	rdlong	local04, objptr
08d38     03 24 66 F0 | 	shl	local04, #3
08d3c     02 00 00 FF 
08d40     38 E4 85 F1 | 	sub	objptr, ##1080
08d44     F2 24 02 F1 | 	add	local04, objptr
08d48     04 24 06 F1 | 	add	local04, #4
08d4c     12 27 02 FB | 	rdlong	local05, local04
08d50                 | ' 
08d50                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
08d50     FE 27 0E F2 | 	cmp	local05, #510 wz
08d54     54 00 00 FF 
08d58     FC E5 85 F1 | 	sub	objptr, ##43516
08d5c     C4 00 90 5D |  if_ne	jmp	#LR__0750
08d60     1D 1E 06 F6 | 	mov	local01, #29
08d64     FF 22 06 F6 | 	mov	local03, #255
08d68     0F 29 02 F6 | 	mov	local06, local01
08d6c     10 2B 02 F6 | 	mov	local07, local02
08d70     11 1F 02 F6 | 	mov	local01, local03
08d74     6A 00 00 FF 
08d78     6C E4 05 F1 | 	add	objptr, ##54380
08d7c     F2 26 02 FB | 	rdlong	local05, objptr
08d80     13 25 02 F6 | 	mov	local04, local05
08d84     01 24 66 F0 | 	shl	local04, #1
08d88     13 25 02 F1 | 	add	local04, local05
08d8c     02 24 66 F0 | 	shl	local04, #2
08d90     03 00 00 FF 
08d94     00 E4 85 F1 | 	sub	objptr, ##1536
08d98     F2 24 02 F1 | 	add	local04, objptr
08d9c     12 29 62 FC | 	wrlong	local06, local04
08da0     03 00 00 FF 
08da4     00 E4 05 F1 | 	add	objptr, ##1536
08da8     F2 28 02 FB | 	rdlong	local06, objptr
08dac     14 27 02 F6 | 	mov	local05, local06
08db0     01 26 66 F0 | 	shl	local05, #1
08db4     14 27 02 F1 | 	add	local05, local06
08db8     02 26 66 F0 | 	shl	local05, #2
08dbc     03 00 00 FF 
08dc0     00 E4 85 F1 | 	sub	objptr, ##1536
08dc4     F2 26 02 F1 | 	add	local05, objptr
08dc8     04 26 06 F1 | 	add	local05, #4
08dcc     13 2B 62 FC | 	wrlong	local07, local05
08dd0     03 00 00 FF 
08dd4     00 E4 05 F1 | 	add	objptr, ##1536
08dd8     F2 2A 02 FB | 	rdlong	local07, objptr
08ddc     15 29 02 F6 | 	mov	local06, local07
08de0     01 28 66 F0 | 	shl	local06, #1
08de4     15 29 02 F1 | 	add	local06, local07
08de8     02 28 66 F0 | 	shl	local06, #2
08dec     03 00 00 FF 
08df0     00 E4 85 F1 | 	sub	objptr, ##1536
08df4     F2 28 02 F1 | 	add	local06, objptr
08df8     08 28 06 F1 | 	add	local06, #8
08dfc     14 1F 62 FC | 	wrlong	local01, local06
08e00     03 00 00 FF 
08e04     00 E4 05 F1 | 	add	objptr, ##1536
08e08     F2 28 02 FB | 	rdlong	local06, objptr
08e0c     01 28 06 F1 | 	add	local06, #1
08e10     F2 28 62 FC | 	wrlong	local06, objptr
08e14     6A 00 00 FF 
08e18     6C E4 85 F1 | 	sub	objptr, ##54380
08e1c     1D FA 05 F6 | 	mov	result1, #29
08e20     54 01 90 FD | 	jmp	#LR__0753
08e24                 | LR__0750
08e24     00 1E 06 F6 | 	mov	local01, #0
08e28     58 01 B0 FD | 	call	#_addsub
08e2c     57 00 00 FF 
08e30     34 E4 05 F1 | 	add	objptr, ##44596
08e34     F2 24 02 FB | 	rdlong	local04, objptr
08e38     03 24 66 F0 | 	shl	local04, #3
08e3c     02 00 00 FF 
08e40     38 E4 85 F1 | 	sub	objptr, ##1080
08e44     F2 24 02 F1 | 	add	local04, objptr
08e48     04 24 06 F1 | 	add	local04, #4
08e4c     12 27 02 FB | 	rdlong	local05, local04
08e50                 | ' t3.result.uresult=0
08e50                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08e50                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08e50                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
08e50     54 00 00 FF 
08e54     FC E5 85 F1 | 	sub	objptr, ##43516
08e58                 | LR__0751
08e58     1B 26 0E F2 | 	cmp	local05, #27 wz
08e5c     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
08e60     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
08e64     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
08e68     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
08e6c     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
08e70     00 01 90 5D |  if_ne	jmp	#LR__0752
08e74     57 00 00 FF 
08e78     34 E4 05 F1 | 	add	objptr, ##44596
08e7c     F2 28 02 FB | 	rdlong	local06, objptr
08e80     01 28 06 F1 | 	add	local06, #1
08e84     F2 28 62 FC | 	wrlong	local06, objptr
08e88     57 00 00 FF 
08e8c     34 E4 85 F1 | 	sub	objptr, ##44596
08e90     F0 00 B0 FD | 	call	#_addsub
08e94     13 23 02 F6 | 	mov	local03, local05
08e98     0F 29 02 F6 | 	mov	local06, local01
08e9c     10 2B 02 F6 | 	mov	local07, local02
08ea0     11 27 02 F6 | 	mov	local05, local03
08ea4     6A 00 00 FF 
08ea8     6C E4 05 F1 | 	add	objptr, ##54380
08eac     F2 24 02 FB | 	rdlong	local04, objptr
08eb0     12 FB 01 F6 | 	mov	result1, local04
08eb4     01 FA 65 F0 | 	shl	result1, #1
08eb8     12 FB 01 F1 | 	add	result1, local04
08ebc     02 FA 65 F0 | 	shl	result1, #2
08ec0     03 00 00 FF 
08ec4     00 E4 85 F1 | 	sub	objptr, ##1536
08ec8     F2 FA 01 F1 | 	add	result1, objptr
08ecc     FD 28 62 FC | 	wrlong	local06, result1
08ed0     03 00 00 FF 
08ed4     00 E4 05 F1 | 	add	objptr, ##1536
08ed8     F2 28 02 FB | 	rdlong	local06, objptr
08edc     14 25 02 F6 | 	mov	local04, local06
08ee0     01 24 66 F0 | 	shl	local04, #1
08ee4     14 25 02 F1 | 	add	local04, local06
08ee8     02 24 66 F0 | 	shl	local04, #2
08eec     03 00 00 FF 
08ef0     00 E4 85 F1 | 	sub	objptr, ##1536
08ef4     F2 24 02 F1 | 	add	local04, objptr
08ef8     04 24 06 F1 | 	add	local04, #4
08efc     12 2B 62 FC | 	wrlong	local07, local04
08f00     03 00 00 FF 
08f04     00 E4 05 F1 | 	add	objptr, ##1536
08f08     F2 2A 02 FB | 	rdlong	local07, objptr
08f0c     15 29 02 F6 | 	mov	local06, local07
08f10     01 28 66 F0 | 	shl	local06, #1
08f14     15 29 02 F1 | 	add	local06, local07
08f18     02 28 66 F0 | 	shl	local06, #2
08f1c     03 00 00 FF 
08f20     00 E4 85 F1 | 	sub	objptr, ##1536
08f24     F2 28 02 F1 | 	add	local06, objptr
08f28     08 28 06 F1 | 	add	local06, #8
08f2c     14 27 62 FC | 	wrlong	local05, local06
08f30     03 00 00 FF 
08f34     00 E4 05 F1 | 	add	objptr, ##1536
08f38     F2 28 02 FB | 	rdlong	local06, objptr
08f3c     01 28 06 F1 | 	add	local06, #1
08f40     F2 28 62 FC | 	wrlong	local06, objptr
08f44     13 00 00 FF 
08f48     38 E4 85 F1 | 	sub	objptr, ##9784
08f4c     F2 24 02 FB | 	rdlong	local04, objptr
08f50     03 24 66 F0 | 	shl	local04, #3
08f54     02 00 00 FF 
08f58     38 E4 85 F1 | 	sub	objptr, ##1080
08f5c     F2 24 02 F1 | 	add	local04, objptr
08f60     04 24 06 F1 | 	add	local04, #4
08f64     12 27 02 FB | 	rdlong	local05, local04
08f68     54 00 00 FF 
08f6c     FC E5 85 F1 | 	sub	objptr, ##43516
08f70     E4 FE 9F FD | 	jmp	#LR__0751
08f74                 | LR__0752
08f74                 | ' return 0  
08f74     00 FA 05 F6 | 	mov	result1, #0
08f78                 | LR__0753
08f78     A7 F0 03 F6 | 	mov	ptra, fp
08f7c     B2 00 A0 FD | 	call	#popregs_
08f80                 | _expr_ret
08f80     2D 00 64 FD | 	ret
08f84                 | 
08f84                 | ' 
08f84                 | ' 
08f84                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
08f84                 | ' 
08f84                 | ' function addsub() as integer 
08f84                 | _addsub
08f84     07 4A 05 F6 | 	mov	COUNT_, #7
08f88     A8 00 A0 FD | 	call	#pushregs_
08f8c                 | _addsub_enter
08f8c     00 1E 06 F6 | 	mov	local01, #0
08f90     50 01 B0 FD | 	call	#_muldiv
08f94     57 00 00 FF 
08f98     34 E4 05 F1 | 	add	objptr, ##44596
08f9c     F2 24 02 FB | 	rdlong	local04, objptr
08fa0     03 24 66 F0 | 	shl	local04, #3
08fa4     02 00 00 FF 
08fa8     38 E4 85 F1 | 	sub	objptr, ##1080
08fac     F2 24 02 F1 | 	add	local04, objptr
08fb0     04 24 06 F1 | 	add	local04, #4
08fb4     12 27 02 FB | 	rdlong	local05, local04
08fb8                 | ' t3.result.uresult=0
08fb8                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08fb8                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08fb8                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
08fb8     54 00 00 FF 
08fbc     FC E5 85 F1 | 	sub	objptr, ##43516
08fc0                 | LR__0760
08fc0     01 26 0E F2 | 	cmp	local05, #1 wz
08fc4     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
08fc8     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
08fcc     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
08fd0     00 01 90 5D |  if_ne	jmp	#LR__0761
08fd4     57 00 00 FF 
08fd8     34 E4 05 F1 | 	add	objptr, ##44596
08fdc     F2 24 02 FB | 	rdlong	local04, objptr
08fe0     01 24 06 F1 | 	add	local04, #1
08fe4     F2 24 62 FC | 	wrlong	local04, objptr
08fe8     57 00 00 FF 
08fec     34 E4 85 F1 | 	sub	objptr, ##44596
08ff0     F0 00 B0 FD | 	call	#_muldiv
08ff4     13 23 02 F6 | 	mov	local03, local05
08ff8     0F 29 02 F6 | 	mov	local06, local01
08ffc     10 2B 02 F6 | 	mov	local07, local02
09000     11 27 02 F6 | 	mov	local05, local03
09004     6A 00 00 FF 
09008     6C E4 05 F1 | 	add	objptr, ##54380
0900c     F2 24 02 FB | 	rdlong	local04, objptr
09010     12 FB 01 F6 | 	mov	result1, local04
09014     01 FA 65 F0 | 	shl	result1, #1
09018     12 FB 01 F1 | 	add	result1, local04
0901c     02 FA 65 F0 | 	shl	result1, #2
09020     03 00 00 FF 
09024     00 E4 85 F1 | 	sub	objptr, ##1536
09028     F2 FA 01 F1 | 	add	result1, objptr
0902c     FD 28 62 FC | 	wrlong	local06, result1
09030     03 00 00 FF 
09034     00 E4 05 F1 | 	add	objptr, ##1536
09038     F2 28 02 FB | 	rdlong	local06, objptr
0903c     14 25 02 F6 | 	mov	local04, local06
09040     01 24 66 F0 | 	shl	local04, #1
09044     14 25 02 F1 | 	add	local04, local06
09048     02 24 66 F0 | 	shl	local04, #2
0904c     03 00 00 FF 
09050     00 E4 85 F1 | 	sub	objptr, ##1536
09054     F2 24 02 F1 | 	add	local04, objptr
09058     04 24 06 F1 | 	add	local04, #4
0905c     12 2B 62 FC | 	wrlong	local07, local04
09060     03 00 00 FF 
09064     00 E4 05 F1 | 	add	objptr, ##1536
09068     F2 2A 02 FB | 	rdlong	local07, objptr
0906c     15 29 02 F6 | 	mov	local06, local07
09070     01 28 66 F0 | 	shl	local06, #1
09074     15 29 02 F1 | 	add	local06, local07
09078     02 28 66 F0 | 	shl	local06, #2
0907c     03 00 00 FF 
09080     00 E4 85 F1 | 	sub	objptr, ##1536
09084     F2 28 02 F1 | 	add	local06, objptr
09088     08 28 06 F1 | 	add	local06, #8
0908c     14 27 62 FC | 	wrlong	local05, local06
09090     03 00 00 FF 
09094     00 E4 05 F1 | 	add	objptr, ##1536
09098     F2 28 02 FB | 	rdlong	local06, objptr
0909c     01 28 06 F1 | 	add	local06, #1
090a0     F2 28 62 FC | 	wrlong	local06, objptr
090a4     13 00 00 FF 
090a8     38 E4 85 F1 | 	sub	objptr, ##9784
090ac     F2 24 02 FB | 	rdlong	local04, objptr
090b0     03 24 66 F0 | 	shl	local04, #3
090b4     02 00 00 FF 
090b8     38 E4 85 F1 | 	sub	objptr, ##1080
090bc     F2 24 02 F1 | 	add	local04, objptr
090c0     04 24 06 F1 | 	add	local04, #4
090c4     12 27 02 FB | 	rdlong	local05, local04
090c8     54 00 00 FF 
090cc     FC E5 85 F1 | 	sub	objptr, ##43516
090d0     EC FE 9F FD | 	jmp	#LR__0760
090d4                 | LR__0761
090d4                 | '   return 0
090d4     00 FA 05 F6 | 	mov	result1, #0
090d8     A7 F0 03 F6 | 	mov	ptra, fp
090dc     B2 00 A0 FD | 	call	#popregs_
090e0                 | _addsub_ret
090e0     2D 00 64 FD | 	ret
090e4                 | 
090e4                 | ' 
090e4                 | ' sub muldiv()
090e4                 | _muldiv
090e4     08 4A 05 F6 | 	mov	COUNT_, #8
090e8     A8 00 A0 FD | 	call	#pushregs_
090ec                 | _muldiv_enter
090ec     00 1E 06 F6 | 	mov	local01, #0
090f0     58 01 B0 FD | 	call	#_getvalue
090f4     57 00 00 FF 
090f8     34 E4 05 F1 | 	add	objptr, ##44596
090fc     F2 24 02 FB | 	rdlong	local04, objptr
09100     03 24 66 F0 | 	shl	local04, #3
09104     02 00 00 FF 
09108     38 E4 85 F1 | 	sub	objptr, ##1080
0910c     F2 24 02 F1 | 	add	local04, objptr
09110     04 24 06 F1 | 	add	local04, #4
09114     12 27 02 FB | 	rdlong	local05, local04
09118                 | ' t3.result.uresult=0
09118                 | ' getvalue()    
09118                 | ' op = lparts(ct).token
09118                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
09118     54 00 00 FF 
0911c     FC E5 85 F1 | 	sub	objptr, ##43516
09120                 | LR__0770
09120     05 26 0E F2 | 	cmp	local05, #5 wz
09124     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
09128     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
0912c     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
09130     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09134     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
09138     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
0913c     00 01 90 5D |  if_ne	jmp	#LR__0771
09140     57 00 00 FF 
09144     34 E4 05 F1 | 	add	objptr, ##44596
09148     F2 24 02 FB | 	rdlong	local04, objptr
0914c     01 24 06 F1 | 	add	local04, #1
09150     F2 24 62 FC | 	wrlong	local04, objptr
09154     57 00 00 FF 
09158     34 E4 85 F1 | 	sub	objptr, ##44596
0915c     EC 00 B0 FD | 	call	#_getvalue
09160     13 23 02 F6 | 	mov	local03, local05
09164     0F 29 02 F6 | 	mov	local06, local01
09168     10 2B 02 F6 | 	mov	local07, local02
0916c     11 27 02 F6 | 	mov	local05, local03
09170     6A 00 00 FF 
09174     6C E4 05 F1 | 	add	objptr, ##54380
09178     F2 24 02 FB | 	rdlong	local04, objptr
0917c     12 2D 02 F6 | 	mov	local08, local04
09180     01 2C 66 F0 | 	shl	local08, #1
09184     12 2D 02 F1 | 	add	local08, local04
09188     02 2C 66 F0 | 	shl	local08, #2
0918c     03 00 00 FF 
09190     00 E4 85 F1 | 	sub	objptr, ##1536
09194     F2 2C 02 F1 | 	add	local08, objptr
09198     16 29 62 FC | 	wrlong	local06, local08
0919c     03 00 00 FF 
091a0     00 E4 05 F1 | 	add	objptr, ##1536
091a4     F2 2C 02 FB | 	rdlong	local08, objptr
091a8     16 29 02 F6 | 	mov	local06, local08
091ac     01 28 66 F0 | 	shl	local06, #1
091b0     16 29 02 F1 | 	add	local06, local08
091b4     02 28 66 F0 | 	shl	local06, #2
091b8     03 00 00 FF 
091bc     00 E4 85 F1 | 	sub	objptr, ##1536
091c0     F2 28 02 F1 | 	add	local06, objptr
091c4     04 28 06 F1 | 	add	local06, #4
091c8     14 2B 62 FC | 	wrlong	local07, local06
091cc     03 00 00 FF 
091d0     00 E4 05 F1 | 	add	objptr, ##1536
091d4     F2 2C 02 FB | 	rdlong	local08, objptr
091d8     16 2B 02 F6 | 	mov	local07, local08
091dc     01 2A 66 F0 | 	shl	local07, #1
091e0     16 2B 02 F1 | 	add	local07, local08
091e4     02 2A 66 F0 | 	shl	local07, #2
091e8     03 00 00 FF 
091ec     00 E4 85 F1 | 	sub	objptr, ##1536
091f0     F2 2A 02 F1 | 	add	local07, objptr
091f4     08 2A 06 F1 | 	add	local07, #8
091f8     15 27 62 FC | 	wrlong	local05, local07
091fc     03 00 00 FF 
09200     00 E4 05 F1 | 	add	objptr, ##1536
09204     F2 28 02 FB | 	rdlong	local06, objptr
09208     01 28 06 F1 | 	add	local06, #1
0920c     F2 28 62 FC | 	wrlong	local06, objptr
09210     13 00 00 FF 
09214     38 E4 85 F1 | 	sub	objptr, ##9784
09218     F2 24 02 FB | 	rdlong	local04, objptr
0921c     03 24 66 F0 | 	shl	local04, #3
09220     02 00 00 FF 
09224     38 E4 85 F1 | 	sub	objptr, ##1080
09228     F2 24 02 F1 | 	add	local04, objptr
0922c     04 24 06 F1 | 	add	local04, #4
09230     12 27 02 FB | 	rdlong	local05, local04
09234     54 00 00 FF 
09238     FC E5 85 F1 | 	sub	objptr, ##43516
0923c     E0 FE 9F FD | 	jmp	#LR__0770
09240                 | LR__0771
09240     A7 F0 03 F6 | 	mov	ptra, fp
09244     B2 00 A0 FD | 	call	#popregs_
09248                 | _muldiv_ret
09248     2D 00 64 FD | 	ret
0924c                 | 
0924c                 | ' 
0924c                 | ' sub getvalue() 
0924c                 | _getvalue
0924c     0B 4A 05 F6 | 	mov	COUNT_, #11
09250     A8 00 A0 FD | 	call	#pushregs_
09254                 | _getvalue_enter
09254     01 24 06 F6 | 	mov	local04, #1
09258     00 1E 06 F6 | 	mov	local01, #0
0925c     1D 22 06 F6 | 	mov	local03, #29
09260     57 00 00 FF 
09264     34 E4 05 F1 | 	add	objptr, ##44596
09268     F2 16 02 FB | 	rdlong	arg03, objptr
0926c     03 16 66 F0 | 	shl	arg03, #3
09270     02 00 00 FF 
09274     38 E4 85 F1 | 	sub	objptr, ##1080
09278     F2 16 02 F1 | 	add	arg03, objptr
0927c     04 16 06 F1 | 	add	arg03, #4
09280     0B 27 02 FB | 	rdlong	local05, arg03
09284                 | ' m=1
09284                 | ' t1.result.uresult=0: t1.result_type=result_uint
09284                 | ' op=lparts(ct).token
09284                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
09284     02 26 0E F2 | 	cmp	local05, #2 wz
09288     54 00 00 FF 
0928c     FC E5 85 F1 | 	sub	objptr, ##43516
09290     38 00 90 5D |  if_ne	jmp	#LR__0780
09294     01 24 66 F6 | 	neg	local04, #1
09298     57 00 00 FF 
0929c     34 E4 05 F1 | 	add	objptr, ##44596
092a0     F2 26 02 FB | 	rdlong	local05, objptr
092a4     01 26 06 F1 | 	add	local05, #1
092a8     F2 26 62 FC | 	wrlong	local05, objptr
092ac     03 26 66 F0 | 	shl	local05, #3
092b0     02 00 00 FF 
092b4     38 E4 85 F1 | 	sub	objptr, ##1080
092b8     F2 26 02 F1 | 	add	local05, objptr
092bc     04 26 06 F1 | 	add	local05, #4
092c0     13 27 02 FB | 	rdlong	local05, local05
092c4     54 00 00 FF 
092c8     FC E5 85 F1 | 	sub	objptr, ##43516
092cc                 | LR__0780
092cc                 | ' select case op
092cc     01 00 00 FF 
092d0     00 26 0E F2 | 	cmp	local05, ##512 wz
092d4     3C 00 90 AD |  if_e	jmp	#LR__0781
092d8     01 00 00 FF 
092dc     01 26 0E F2 | 	cmp	local05, ##513 wz
092e0     88 01 90 AD |  if_e	jmp	#LR__0784
092e4     01 00 00 FF 
092e8     02 26 0E F2 | 	cmp	local05, ##514 wz
092ec     84 02 90 AD |  if_e	jmp	#LR__0785
092f0     01 00 00 FF 
092f4     03 26 0E F2 | 	cmp	local05, ##515 wz
092f8     E8 03 90 AD |  if_e	jmp	#LR__0788
092fc     01 00 00 FF 
09300     04 26 0E F2 | 	cmp	local05, ##516 wz
09304     B8 05 90 AD |  if_e	jmp	#LR__0793
09308     15 26 0E F2 | 	cmp	local05, #21 wz
0930c     D8 05 90 AD |  if_e	jmp	#LR__0794
09310     48 06 90 FD | 	jmp	#LR__0795
09314                 | LR__0781
09314                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09314     01 24 0E F2 | 	cmp	local04, #1 wz
09318     3C 00 90 5D |  if_ne	jmp	#LR__0782
0931c     57 00 00 FF 
09320     34 E4 05 F1 | 	add	objptr, ##44596
09324     F2 26 02 FB | 	rdlong	local05, objptr
09328     03 26 66 F0 | 	shl	local05, #3
0932c     02 00 00 FF 
09330     38 E4 85 F1 | 	sub	objptr, ##1080
09334     F2 26 02 F1 | 	add	local05, objptr
09338     13 13 02 FB | 	rdlong	arg01, local05
0933c     00 14 06 F6 | 	mov	arg02, #0
09340     54 00 00 FF 
09344     FC E5 85 F1 | 	sub	objptr, ##43516
09348     2C 6F B1 FD | 	call	#__system____builtin_atoi
0934c     FD 24 02 FD | 	qmul	local04, result1
09350     18 1E 62 FD | 	getqx	local01
09354     1C 22 06 F6 | 	mov	local03, #28
09358                 | LR__0782
09358                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09358     FF FF 7F FF 
0935c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09360     3C 00 90 5D |  if_ne	jmp	#LR__0783
09364     57 00 00 FF 
09368     34 E4 05 F1 | 	add	objptr, ##44596
0936c     F2 26 02 FB | 	rdlong	local05, objptr
09370     03 26 66 F0 | 	shl	local05, #3
09374     02 00 00 FF 
09378     38 E4 85 F1 | 	sub	objptr, ##1080
0937c     F2 26 02 F1 | 	add	local05, objptr
09380     13 13 02 FB | 	rdlong	arg01, local05
09384     00 14 06 F6 | 	mov	arg02, #0
09388     54 00 00 FF 
0938c     FC E5 85 F1 | 	sub	objptr, ##43516
09390     E4 6E B1 FD | 	call	#__system____builtin_atoi
09394     FD 24 02 FD | 	qmul	local04, result1
09398     18 1E 62 FD | 	getqx	local01
0939c     1C 22 06 F6 | 	mov	local03, #28
093a0                 | LR__0783
093a0     0F 29 02 F6 | 	mov	local06, local01
093a4     10 2B 02 F6 | 	mov	local07, local02
093a8     11 27 02 F6 | 	mov	local05, local03
093ac     6A 00 00 FF 
093b0     6C E4 05 F1 | 	add	objptr, ##54380
093b4     F2 1E 02 FB | 	rdlong	local01, objptr
093b8     0F 25 02 F6 | 	mov	local04, local01
093bc     01 24 66 F0 | 	shl	local04, #1
093c0     0F 25 02 F1 | 	add	local04, local01
093c4     02 24 66 F0 | 	shl	local04, #2
093c8     03 00 00 FF 
093cc     00 E4 85 F1 | 	sub	objptr, ##1536
093d0     F2 24 02 F1 | 	add	local04, objptr
093d4     12 29 62 FC | 	wrlong	local06, local04
093d8     03 00 00 FF 
093dc     00 E4 05 F1 | 	add	objptr, ##1536
093e0     F2 28 02 FB | 	rdlong	local06, objptr
093e4     14 1F 02 F6 | 	mov	local01, local06
093e8     01 1E 66 F0 | 	shl	local01, #1
093ec     14 1F 02 F1 | 	add	local01, local06
093f0     02 1E 66 F0 | 	shl	local01, #2
093f4     03 00 00 FF 
093f8     00 E4 85 F1 | 	sub	objptr, ##1536
093fc     F2 1E 02 F1 | 	add	local01, objptr
09400     04 1E 06 F1 | 	add	local01, #4
09404     0F 2B 62 FC | 	wrlong	local07, local01
09408     03 00 00 FF 
0940c     00 E4 05 F1 | 	add	objptr, ##1536
09410     F2 2A 02 FB | 	rdlong	local07, objptr
09414     15 29 02 F6 | 	mov	local06, local07
09418     01 28 66 F0 | 	shl	local06, #1
0941c     15 29 02 F1 | 	add	local06, local07
09420     02 28 66 F0 | 	shl	local06, #2
09424     03 00 00 FF 
09428     00 E4 85 F1 | 	sub	objptr, ##1536
0942c     F2 28 02 F1 | 	add	local06, objptr
09430     08 28 06 F1 | 	add	local06, #8
09434     14 27 62 FC | 	wrlong	local05, local06
09438     03 00 00 FF 
0943c     00 E4 05 F1 | 	add	objptr, ##1536
09440     F2 28 02 FB | 	rdlong	local06, objptr
09444     01 28 06 F1 | 	add	local06, #1
09448     F2 28 62 FC | 	wrlong	local06, objptr
0944c     13 00 00 FF 
09450     38 E4 85 F1 | 	sub	objptr, ##9784
09454     F2 28 02 FB | 	rdlong	local06, objptr
09458     01 28 06 F1 | 	add	local06, #1
0945c     F2 28 62 FC | 	wrlong	local06, objptr
09460     57 00 00 FF 
09464     34 E4 85 F1 | 	sub	objptr, ##44596
09468     14 05 90 FD | 	jmp	#LR__0796
0946c                 | LR__0784
0946c     57 00 00 FF 
09470     34 E4 05 F1 | 	add	objptr, ##44596
09474     F2 28 02 FB | 	rdlong	local06, objptr
09478     03 28 66 F0 | 	shl	local06, #3
0947c     02 00 00 FF 
09480     38 E4 85 F1 | 	sub	objptr, ##1080
09484     F2 28 02 F1 | 	add	local06, objptr
09488     14 13 02 FB | 	rdlong	arg01, local06
0948c     00 14 06 F6 | 	mov	arg02, #0
09490     54 00 00 FF 
09494     FC E5 85 F1 | 	sub	objptr, ##43516
09498     DC 6D B1 FD | 	call	#__system____builtin_atoi
0949c     FD 24 02 FD | 	qmul	local04, result1
094a0     6A 00 00 FF 
094a4     6C E4 05 F1 | 	add	objptr, ##54380
094a8     F2 28 02 FB | 	rdlong	local06, objptr
094ac     14 2D 02 F6 | 	mov	local08, local06
094b0     01 2C 66 F0 | 	shl	local08, #1
094b4     14 2D 02 F1 | 	add	local08, local06
094b8     02 2C 66 F0 | 	shl	local08, #2
094bc     03 00 00 FF 
094c0     00 E4 85 F1 | 	sub	objptr, ##1536
094c4     F2 2C 02 F1 | 	add	local08, objptr
094c8     03 00 00 FF 
094cc     00 E4 05 F1 | 	add	objptr, ##1536
094d0     18 1E 62 FD | 	getqx	local01
094d4     1C 22 06 F6 | 	mov	local03, #28
094d8     0F 29 02 F6 | 	mov	local06, local01
094dc     10 2B 02 F6 | 	mov	local07, local02
094e0     16 29 62 FC | 	wrlong	local06, local08
094e4     11 2D 02 F6 | 	mov	local08, local03
094e8     F2 28 02 FB | 	rdlong	local06, objptr
094ec     14 27 02 F6 | 	mov	local05, local06
094f0     01 26 66 F0 | 	shl	local05, #1
094f4     14 27 02 F1 | 	add	local05, local06
094f8     02 26 66 F0 | 	shl	local05, #2
094fc     03 00 00 FF 
09500     00 E4 85 F1 | 	sub	objptr, ##1536
09504     F2 26 02 F1 | 	add	local05, objptr
09508     04 26 06 F1 | 	add	local05, #4
0950c     13 2B 62 FC | 	wrlong	local07, local05
09510     03 00 00 FF 
09514     00 E4 05 F1 | 	add	objptr, ##1536
09518     F2 2A 02 FB | 	rdlong	local07, objptr
0951c     15 29 02 F6 | 	mov	local06, local07
09520     01 28 66 F0 | 	shl	local06, #1
09524     15 29 02 F1 | 	add	local06, local07
09528     02 28 66 F0 | 	shl	local06, #2
0952c     03 00 00 FF 
09530     00 E4 85 F1 | 	sub	objptr, ##1536
09534     F2 28 02 F1 | 	add	local06, objptr
09538     08 28 06 F1 | 	add	local06, #8
0953c     14 2D 62 FC | 	wrlong	local08, local06
09540     03 00 00 FF 
09544     00 E4 05 F1 | 	add	objptr, ##1536
09548     F2 28 02 FB | 	rdlong	local06, objptr
0954c     01 28 06 F1 | 	add	local06, #1
09550     F2 28 62 FC | 	wrlong	local06, objptr
09554     13 00 00 FF 
09558     38 E4 85 F1 | 	sub	objptr, ##9784
0955c     F2 28 02 FB | 	rdlong	local06, objptr
09560     01 28 06 F1 | 	add	local06, #1
09564     F2 28 62 FC | 	wrlong	local06, objptr
09568     57 00 00 FF 
0956c     34 E4 85 F1 | 	sub	objptr, ##44596
09570     0C 04 90 FD | 	jmp	#LR__0796
09574                 | LR__0785
09574                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
09574     01 24 0E F2 | 	cmp	local04, #1 wz
09578     48 00 90 5D |  if_ne	jmp	#LR__0786
0957c     00 C0 1F FF 
09580     00 28 06 F6 | 	mov	local06, ##1065353216
09584     57 00 00 FF 
09588     34 E4 05 F1 | 	add	objptr, ##44596
0958c     F2 2C 02 FB | 	rdlong	local08, objptr
09590     03 2C 66 F0 | 	shl	local08, #3
09594     02 00 00 FF 
09598     38 E4 85 F1 | 	sub	objptr, ##1080
0959c     F2 2C 02 F1 | 	add	local08, objptr
095a0     16 13 02 FB | 	rdlong	arg01, local08
095a4     54 00 00 FF 
095a8     FC E5 85 F1 | 	sub	objptr, ##43516
095ac     38 6E B1 FD | 	call	#__system____builtin_atof
095b0     FD 14 02 F6 | 	mov	arg02, result1
095b4     14 13 02 F6 | 	mov	arg01, local06
095b8     44 66 B1 FD | 	call	#__system___float_mul
095bc     FD 1E 02 F6 | 	mov	local01, result1
095c0     1E 22 06 F6 | 	mov	local03, #30
095c4                 | LR__0786
095c4                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
095c4     FF FF 7F FF 
095c8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
095cc     48 00 90 5D |  if_ne	jmp	#LR__0787
095d0     00 C0 5F FF 
095d4     00 28 06 F6 | 	mov	local06, ##-1082130432
095d8     57 00 00 FF 
095dc     34 E4 05 F1 | 	add	objptr, ##44596
095e0     F2 2C 02 FB | 	rdlong	local08, objptr
095e4     03 2C 66 F0 | 	shl	local08, #3
095e8     02 00 00 FF 
095ec     38 E4 85 F1 | 	sub	objptr, ##1080
095f0     F2 2C 02 F1 | 	add	local08, objptr
095f4     16 13 02 FB | 	rdlong	arg01, local08
095f8     54 00 00 FF 
095fc     FC E5 85 F1 | 	sub	objptr, ##43516
09600     E4 6D B1 FD | 	call	#__system____builtin_atof
09604     FD 14 02 F6 | 	mov	arg02, result1
09608     14 13 02 F6 | 	mov	arg01, local06
0960c     F0 65 B1 FD | 	call	#__system___float_mul
09610     FD 1E 02 F6 | 	mov	local01, result1
09614     1E 22 06 F6 | 	mov	local03, #30
09618                 | LR__0787
09618     0F 29 02 F6 | 	mov	local06, local01
0961c     10 2B 02 F6 | 	mov	local07, local02
09620     11 27 02 F6 | 	mov	local05, local03
09624     6A 00 00 FF 
09628     6C E4 05 F1 | 	add	objptr, ##54380
0962c     F2 1E 02 FB | 	rdlong	local01, objptr
09630     0F 2D 02 F6 | 	mov	local08, local01
09634     01 2C 66 F0 | 	shl	local08, #1
09638     0F 2D 02 F1 | 	add	local08, local01
0963c     02 2C 66 F0 | 	shl	local08, #2
09640     03 00 00 FF 
09644     00 E4 85 F1 | 	sub	objptr, ##1536
09648     F2 2C 02 F1 | 	add	local08, objptr
0964c     16 29 62 FC | 	wrlong	local06, local08
09650     03 00 00 FF 
09654     00 E4 05 F1 | 	add	objptr, ##1536
09658     F2 2C 02 FB | 	rdlong	local08, objptr
0965c     16 29 02 F6 | 	mov	local06, local08
09660     01 28 66 F0 | 	shl	local06, #1
09664     16 29 02 F1 | 	add	local06, local08
09668     02 28 66 F0 | 	shl	local06, #2
0966c     03 00 00 FF 
09670     00 E4 85 F1 | 	sub	objptr, ##1536
09674     F2 28 02 F1 | 	add	local06, objptr
09678     04 28 06 F1 | 	add	local06, #4
0967c     14 2B 62 FC | 	wrlong	local07, local06
09680     03 00 00 FF 
09684     00 E4 05 F1 | 	add	objptr, ##1536
09688     F2 2C 02 FB | 	rdlong	local08, objptr
0968c     16 2B 02 F6 | 	mov	local07, local08
09690     01 2A 66 F0 | 	shl	local07, #1
09694     16 2B 02 F1 | 	add	local07, local08
09698     02 2A 66 F0 | 	shl	local07, #2
0969c     03 00 00 FF 
096a0     00 E4 85 F1 | 	sub	objptr, ##1536
096a4     F2 2A 02 F1 | 	add	local07, objptr
096a8     08 2A 06 F1 | 	add	local07, #8
096ac     15 27 62 FC | 	wrlong	local05, local07
096b0     03 00 00 FF 
096b4     00 E4 05 F1 | 	add	objptr, ##1536
096b8     F2 28 02 FB | 	rdlong	local06, objptr
096bc     01 28 06 F1 | 	add	local06, #1
096c0     F2 28 62 FC | 	wrlong	local06, objptr
096c4     13 00 00 FF 
096c8     38 E4 85 F1 | 	sub	objptr, ##9784
096cc     F2 28 02 FB | 	rdlong	local06, objptr
096d0     01 28 06 F1 | 	add	local06, #1
096d4     F2 28 62 FC | 	wrlong	local06, objptr
096d8     57 00 00 FF 
096dc     34 E4 85 F1 | 	sub	objptr, ##44596
096e0     9C 02 90 FD | 	jmp	#LR__0796
096e4                 | LR__0788
096e4     1F 22 06 F6 | 	mov	local03, #31
096e8     57 00 00 FF 
096ec     34 E4 05 F1 | 	add	objptr, ##44596
096f0     F2 16 02 FB | 	rdlong	arg03, objptr
096f4     03 16 66 F0 | 	shl	arg03, #3
096f8     02 00 00 FF 
096fc     38 E4 85 F1 | 	sub	objptr, ##1080
09700     F2 16 02 F1 | 	add	arg03, objptr
09704     0B 13 02 FB | 	rdlong	arg01, arg03
09708     54 00 00 FF 
0970c     FC E5 85 F1 | 	sub	objptr, ##43516
09710     09 2F 02 F6 | 	mov	local09, arg01
09714     97 06 48 FB | 	callpa	#(@LR__0790-@LR__0789)>>2,fcache_load_ptr_
09718                 | LR__0789
09718     17 FB C9 FA | 	rdbyte	result1, local09 wz
0971c     01 2E 06 51 |  if_ne	add	local09, #1
09720     F4 FF 9F 5D |  if_ne	jmp	#LR__0789
09724                 | LR__0790
09724     09 2F 82 F1 | 	sub	local09, arg01
09728     17 FB 01 F6 | 	mov	result1, local09
0972c     7B 00 00 FF 
09730     C8 E4 05 F1 | 	add	objptr, ##63176
09734     F2 FA 61 FC | 	wrlong	result1, objptr
09738     60 E4 85 F1 | 	sub	objptr, #96
0973c     F2 12 02 FB | 	rdlong	arg01, objptr
09740     FD 12 82 F1 | 	sub	arg01, result1
09744     04 12 86 F1 | 	sub	arg01, #4
09748     03 12 26 F5 | 	andn	arg01, #3
0974c     F2 12 62 FC | 	wrlong	arg01, objptr
09750     60 E4 05 F1 | 	add	objptr, #96
09754     F2 14 02 FB | 	rdlong	arg02, objptr
09758     7B 00 00 FF 
0975c     C8 E4 85 F1 | 	sub	objptr, ##63176
09760     28 FA B0 FD | 	call	#_pslpoke
09764                 | '     pslpoke memtop,l
09764                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
09764     01 30 06 F6 | 	mov	local10, #1
09768     7B 00 00 FF 
0976c     C8 E4 05 F1 | 	add	objptr, ##63176
09770     F2 32 02 FB | 	rdlong	local11, objptr
09774     7B 00 00 FF 
09778     C8 E4 85 F1 | 	sub	objptr, ##63176
0977c     01 32 06 F1 | 	add	local11, #1
09780                 | LR__0791
09780     19 31 52 F2 | 	cmps	local10, local11 wc
09784     5C 00 90 3D |  if_ae	jmp	#LR__0792
09788     7B 00 00 FF 
0978c     68 E4 05 F1 | 	add	objptr, ##63080
09790     F2 2A 02 FB | 	rdlong	local07, objptr
09794     03 2A 06 F1 | 	add	local07, #3
09798     18 2B 02 F1 | 	add	local07, local10
0979c     24 00 00 FF 
097a0     34 E4 85 F1 | 	sub	objptr, ##18484
097a4     F2 2C 02 FB | 	rdlong	local08, objptr
097a8     03 2C 66 F0 | 	shl	local08, #3
097ac     02 00 00 FF 
097b0     38 E4 85 F1 | 	sub	objptr, ##1080
097b4     F2 2C 02 F1 | 	add	local08, objptr
097b8     16 13 02 FB | 	rdlong	arg01, local08
097bc     18 15 02 F6 | 	mov	arg02, local10
097c0     01 16 06 F6 | 	mov	arg03, #1
097c4     54 00 00 FF 
097c8     FC E5 85 F1 | 	sub	objptr, ##43516
097cc     10 5A B1 FD | 	call	#__system__Mid_S
097d0     FD 14 C2 FA | 	rdbyte	arg02, result1
097d4     15 13 02 F6 | 	mov	arg01, local07
097d8     40 FA B0 FD | 	call	#_pspoke
097dc     01 30 06 F1 | 	add	local10, #1
097e0     9C FF 9F FD | 	jmp	#LR__0791
097e4                 | LR__0792
097e4     7B 00 00 FF 
097e8     68 E4 05 F1 | 	add	objptr, ##63080
097ec     F2 1E 02 FB | 	rdlong	local01, objptr
097f0     2B 22 06 F6 | 	mov	local03, #43
097f4     0F 29 02 F6 | 	mov	local06, local01
097f8     10 2B 02 F6 | 	mov	local07, local02
097fc     11 33 02 F6 | 	mov	local11, local03
09800     10 00 00 FF 
09804     FC E5 85 F1 | 	sub	objptr, ##8700
09808     F2 30 02 FB | 	rdlong	local10, objptr
0980c     18 2D 02 F6 | 	mov	local08, local10
09810     01 2C 66 F0 | 	shl	local08, #1
09814     18 2D 02 F1 | 	add	local08, local10
09818     02 2C 66 F0 | 	shl	local08, #2
0981c     03 00 00 FF 
09820     00 E4 85 F1 | 	sub	objptr, ##1536
09824     F2 2C 02 F1 | 	add	local08, objptr
09828     16 29 62 FC | 	wrlong	local06, local08
0982c     03 00 00 FF 
09830     00 E4 05 F1 | 	add	objptr, ##1536
09834     F2 30 02 FB | 	rdlong	local10, objptr
09838     18 2D 02 F6 | 	mov	local08, local10
0983c     01 2C 66 F0 | 	shl	local08, #1
09840     18 2D 02 F1 | 	add	local08, local10
09844     02 2C 66 F0 | 	shl	local08, #2
09848     03 00 00 FF 
0984c     00 E4 85 F1 | 	sub	objptr, ##1536
09850     F2 2C 02 F1 | 	add	local08, objptr
09854     04 2C 06 F1 | 	add	local08, #4
09858     16 2B 62 FC | 	wrlong	local07, local08
0985c     03 00 00 FF 
09860     00 E4 05 F1 | 	add	objptr, ##1536
09864     F2 30 02 FB | 	rdlong	local10, objptr
09868     18 2D 02 F6 | 	mov	local08, local10
0986c     01 2C 66 F0 | 	shl	local08, #1
09870     18 2D 02 F1 | 	add	local08, local10
09874     02 2C 66 F0 | 	shl	local08, #2
09878     03 00 00 FF 
0987c     00 E4 85 F1 | 	sub	objptr, ##1536
09880     F2 2C 02 F1 | 	add	local08, objptr
09884     08 2C 06 F1 | 	add	local08, #8
09888     16 33 62 FC | 	wrlong	local11, local08
0988c     03 00 00 FF 
09890     00 E4 05 F1 | 	add	objptr, ##1536
09894     F2 28 02 FB | 	rdlong	local06, objptr
09898     01 28 06 F1 | 	add	local06, #1
0989c     F2 28 62 FC | 	wrlong	local06, objptr
098a0     13 00 00 FF 
098a4     38 E4 85 F1 | 	sub	objptr, ##9784
098a8     F2 28 02 FB | 	rdlong	local06, objptr
098ac     01 28 06 F1 | 	add	local06, #1
098b0     F2 28 62 FC | 	wrlong	local06, objptr
098b4     57 00 00 FF 
098b8     34 E4 85 F1 | 	sub	objptr, ##44596
098bc     C0 00 90 FD | 	jmp	#LR__0796
098c0                 | LR__0793
098c0     12 13 02 F6 | 	mov	arg01, local04
098c4     B8 03 B0 FD | 	call	#_getvar
098c8     57 00 00 FF 
098cc     34 E4 05 F1 | 	add	objptr, ##44596
098d0     F2 28 02 FB | 	rdlong	local06, objptr
098d4     01 28 06 F1 | 	add	local06, #1
098d8     F2 28 62 FC | 	wrlong	local06, objptr
098dc     57 00 00 FF 
098e0     34 E4 85 F1 | 	sub	objptr, ##44596
098e4     98 00 90 FD | 	jmp	#LR__0796
098e8                 | LR__0794
098e8     57 00 00 FF 
098ec     34 E4 05 F1 | 	add	objptr, ##44596
098f0     F2 28 02 FB | 	rdlong	local06, objptr
098f4     01 28 06 F1 | 	add	local06, #1
098f8     F2 28 62 FC | 	wrlong	local06, objptr
098fc     57 00 00 FF 
09900     34 E4 85 F1 | 	sub	objptr, ##44596
09904     1C F4 BF FD | 	call	#_expr
09908                 | '     ct+=1
09908                 | '     expr() 
09908                 | '     if lparts(ct).token=token_rpar then ct+=1
09908     57 00 00 FF 
0990c     34 E4 05 F1 | 	add	objptr, ##44596
09910     F2 32 02 FB | 	rdlong	local11, objptr
09914     03 32 66 F0 | 	shl	local11, #3
09918     02 00 00 FF 
0991c     38 E4 85 F1 | 	sub	objptr, ##1080
09920     F2 32 02 F1 | 	add	local11, objptr
09924     04 32 06 F1 | 	add	local11, #4
09928     19 33 02 FB | 	rdlong	local11, local11
0992c     14 32 0E F2 | 	cmp	local11, #20 wz
09930     54 00 00 FF 
09934     FC E5 85 F1 | 	sub	objptr, ##43516
09938     44 00 90 5D |  if_ne	jmp	#LR__0796
0993c     57 00 00 FF 
09940     34 E4 05 F1 | 	add	objptr, ##44596
09944     F2 28 02 FB | 	rdlong	local06, objptr
09948     01 28 06 F1 | 	add	local06, #1
0994c     F2 28 62 FC | 	wrlong	local06, objptr
09950     57 00 00 FF 
09954     34 E4 85 F1 | 	sub	objptr, ##44596
09958     24 00 90 FD | 	jmp	#LR__0796
0995c                 | LR__0795
0995c     12 13 02 F6 | 	mov	arg01, local04
09960     28 00 B0 FD | 	call	#_getfun
09964     57 00 00 FF 
09968     34 E4 05 F1 | 	add	objptr, ##44596
0996c     F2 28 02 FB | 	rdlong	local06, objptr
09970     01 28 06 F1 | 	add	local06, #1
09974     F2 28 62 FC | 	wrlong	local06, objptr
09978     57 00 00 FF 
0997c     34 E4 85 F1 | 	sub	objptr, ##44596
09980                 | LR__0796
09980     A7 F0 03 F6 | 	mov	ptra, fp
09984     B2 00 A0 FD | 	call	#popregs_
09988                 | _getvalue_ret
09988     2D 00 64 FD | 	ret
0998c                 | 
0998c                 | ' 
0998c                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0998c                 | _getfun
0998c     0A 4A 05 F6 | 	mov	COUNT_, #10
09990     A8 00 A0 FD | 	call	#pushregs_
09994                 | _getfun_enter
09994     09 25 02 F6 | 	mov	local04, arg01
09998     57 00 00 FF 
0999c     34 E4 05 F1 | 	add	objptr, ##44596
099a0     F2 26 02 FB | 	rdlong	local05, objptr
099a4     13 29 02 F6 | 	mov	local06, local05
099a8     00 2A 06 F6 | 	mov	local07, #0
099ac                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
099ac                 | ' oldct=ct
099ac                 | ' numpar=0
099ac                 | '   
099ac                 | ' if lparts(ct+1).token=token_lpar then
099ac     01 26 06 F1 | 	add	local05, #1
099b0     03 26 66 F0 | 	shl	local05, #3
099b4     02 00 00 FF 
099b8     38 E4 85 F1 | 	sub	objptr, ##1080
099bc     F2 26 02 F1 | 	add	local05, objptr
099c0     04 26 06 F1 | 	add	local05, #4
099c4     13 27 02 FB | 	rdlong	local05, local05
099c8     15 26 0E F2 | 	cmp	local05, #21 wz
099cc     54 00 00 FF 
099d0     FC E5 85 F1 | 	sub	objptr, ##43516
099d4     08 01 90 5D |  if_ne	jmp	#LR__0804
099d8     57 00 00 FF 
099dc     34 E4 05 F1 | 	add	objptr, ##44596
099e0     F2 2C 02 FB | 	rdlong	local08, objptr
099e4     01 2C 06 F1 | 	add	local08, #1
099e8     F2 2C 62 FC | 	wrlong	local08, objptr
099ec     57 00 00 FF 
099f0     34 E4 85 F1 | 	sub	objptr, ##44596
099f4                 | '   ct+=1 											' omit this lpar, this is for expr list
099f4                 | '   do
099f4                 | LR__0800
099f4     57 00 00 FF 
099f8     34 E4 05 F1 | 	add	objptr, ##44596
099fc     F2 26 02 FB | 	rdlong	local05, objptr
09a00     01 26 06 F1 | 	add	local05, #1
09a04     F2 26 62 FC | 	wrlong	local05, objptr
09a08                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09a08                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09a08     03 26 66 F0 | 	shl	local05, #3
09a0c     02 00 00 FF 
09a10     38 E4 85 F1 | 	sub	objptr, ##1080
09a14     F2 26 02 F1 | 	add	local05, objptr
09a18     04 26 06 F1 | 	add	local05, #4
09a1c     13 2D 02 FB | 	rdlong	local08, local05
09a20     15 2C 0E F2 | 	cmp	local08, #21 wz
09a24     54 00 00 FF 
09a28     FC E5 85 F1 | 	sub	objptr, ##43516
09a2c     40 00 90 5D |  if_ne	jmp	#LR__0801
09a30     57 00 00 FF 
09a34     34 E4 05 F1 | 	add	objptr, ##44596
09a38     F2 2C 02 FB | 	rdlong	local08, objptr
09a3c     01 2C 06 F1 | 	add	local08, #1
09a40     F2 2C 62 FC | 	wrlong	local08, objptr
09a44     57 00 00 FF 
09a48     34 E4 85 F1 | 	sub	objptr, ##44596
09a4c     D4 F2 BF FD | 	call	#_expr
09a50     57 00 00 FF 
09a54     34 E4 05 F1 | 	add	objptr, ##44596
09a58     F2 2C 02 FB | 	rdlong	local08, objptr
09a5c     01 2C 06 F1 | 	add	local08, #1
09a60     F2 2C 62 FC | 	wrlong	local08, objptr
09a64     57 00 00 FF 
09a68     34 E4 85 F1 | 	sub	objptr, ##44596
09a6c     04 00 90 FD | 	jmp	#LR__0802
09a70                 | LR__0801
09a70     B0 F2 BF FD | 	call	#_expr
09a74                 | LR__0802
09a74     01 2A 06 F1 | 	add	local07, #1
09a78     57 00 00 FF 
09a7c     34 E4 05 F1 | 	add	objptr, ##44596
09a80     F2 26 02 FB | 	rdlong	local05, objptr
09a84     03 26 66 F0 | 	shl	local05, #3
09a88     02 00 00 FF 
09a8c     38 E4 85 F1 | 	sub	objptr, ##1080
09a90     F2 26 02 F1 | 	add	local05, objptr
09a94     04 26 06 F1 | 	add	local05, #4
09a98     13 2D 02 FB | 	rdlong	local08, local05
09a9c     14 2C 0E F2 | 	cmp	local08, #20 wz
09aa0     54 00 00 FF 
09aa4     FC E5 85 F1 | 	sub	objptr, ##43516
09aa8     34 00 90 AD |  if_e	jmp	#LR__0803
09aac     57 00 00 FF 
09ab0     34 E4 05 F1 | 	add	objptr, ##44596
09ab4     F2 2C 02 FB | 	rdlong	local08, objptr
09ab8     03 2C 66 F0 | 	shl	local08, #3
09abc     02 00 00 FF 
09ac0     38 E4 85 F1 | 	sub	objptr, ##1080
09ac4     F2 2C 02 F1 | 	add	local08, objptr
09ac8     04 2C 06 F1 | 	add	local08, #4
09acc     16 2D 02 FB | 	rdlong	local08, local08
09ad0     FE 2D 0E F2 | 	cmp	local08, #510 wz
09ad4     54 00 00 FF 
09ad8     FC E5 85 F1 | 	sub	objptr, ##43516
09adc     14 FF 9F 5D |  if_ne	jmp	#LR__0800
09ae0                 | LR__0803
09ae0                 | LR__0804
09ae0     15 1F 02 F6 | 	mov	local01, local07
09ae4     03 28 66 F0 | 	shl	local06, #3
09ae8     54 00 00 FF 
09aec     FC E5 05 F1 | 	add	objptr, ##43516
09af0     F2 28 02 F1 | 	add	local06, objptr
09af4     04 28 06 F1 | 	add	local06, #4
09af8     14 23 02 FB | 	rdlong	local03, local06
09afc     0F 2D 02 F6 | 	mov	local08, local01
09b00     10 2B 02 F6 | 	mov	local07, local02
09b04     11 29 02 F6 | 	mov	local06, local03
09b08     15 00 00 FF 
09b0c     70 E4 05 F1 | 	add	objptr, ##10864
09b10     F2 26 02 FB | 	rdlong	local05, objptr
09b14     13 13 02 F6 | 	mov	arg01, local05
09b18     01 12 66 F0 | 	shl	arg01, #1
09b1c     13 13 02 F1 | 	add	arg01, local05
09b20     02 12 66 F0 | 	shl	arg01, #2
09b24     03 00 00 FF 
09b28     00 E4 85 F1 | 	sub	objptr, ##1536
09b2c     F2 12 02 F1 | 	add	arg01, objptr
09b30     09 2D 62 FC | 	wrlong	local08, arg01
09b34     03 00 00 FF 
09b38     00 E4 05 F1 | 	add	objptr, ##1536
09b3c     F2 2C 02 FB | 	rdlong	local08, objptr
09b40     16 2F 02 F6 | 	mov	local09, local08
09b44     01 2E 66 F0 | 	shl	local09, #1
09b48     16 2F 02 F1 | 	add	local09, local08
09b4c     02 2E 66 F0 | 	shl	local09, #2
09b50     03 00 00 FF 
09b54     00 E4 85 F1 | 	sub	objptr, ##1536
09b58     F2 2E 02 F1 | 	add	local09, objptr
09b5c     04 2E 06 F1 | 	add	local09, #4
09b60     17 2B 62 FC | 	wrlong	local07, local09
09b64     03 00 00 FF 
09b68     00 E4 05 F1 | 	add	objptr, ##1536
09b6c     F2 2C 02 FB | 	rdlong	local08, objptr
09b70     16 31 02 F6 | 	mov	local10, local08
09b74     01 30 66 F0 | 	shl	local10, #1
09b78     16 31 02 F1 | 	add	local10, local08
09b7c     02 30 66 F0 | 	shl	local10, #2
09b80     03 00 00 FF 
09b84     00 E4 85 F1 | 	sub	objptr, ##1536
09b88     F2 30 02 F1 | 	add	local10, objptr
09b8c     08 30 06 F1 | 	add	local10, #8
09b90     18 29 62 FC | 	wrlong	local06, local10
09b94     03 00 00 FF 
09b98     00 E4 05 F1 | 	add	objptr, ##1536
09b9c     F2 2C 02 FB | 	rdlong	local08, objptr
09ba0     01 2C 06 F1 | 	add	local08, #1
09ba4     F2 2C 62 FC | 	wrlong	local08, objptr
09ba8     6A 00 00 FF 
09bac     6C E4 85 F1 | 	sub	objptr, ##54380
09bb0                 | ' 
09bb0                 | ' t2.result.uresult=numpar
09bb0                 | ' 
09bb0                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
09bb0                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09bb0                 | ' 
09bb0                 | '   
09bb0                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09bb0     FF FF 7F FF 
09bb4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09bb8     B8 00 90 5D |  if_ne	jmp	#LR__0805
09bbc     15 22 06 F6 | 	mov	local03, #21
09bc0     0F 2D 02 F6 | 	mov	local08, local01
09bc4     10 2B 02 F6 | 	mov	local07, local02
09bc8     11 29 02 F6 | 	mov	local06, local03
09bcc     6A 00 00 FF 
09bd0     6C E4 05 F1 | 	add	objptr, ##54380
09bd4     F2 26 02 FB | 	rdlong	local05, objptr
09bd8     13 13 02 F6 | 	mov	arg01, local05
09bdc     01 12 66 F0 | 	shl	arg01, #1
09be0     13 13 02 F1 | 	add	arg01, local05
09be4     02 12 66 F0 | 	shl	arg01, #2
09be8     03 00 00 FF 
09bec     00 E4 85 F1 | 	sub	objptr, ##1536
09bf0     F2 12 02 F1 | 	add	arg01, objptr
09bf4     09 2D 62 FC | 	wrlong	local08, arg01
09bf8     03 00 00 FF 
09bfc     00 E4 05 F1 | 	add	objptr, ##1536
09c00     F2 30 02 FB | 	rdlong	local10, objptr
09c04     18 2F 02 F6 | 	mov	local09, local10
09c08     01 2E 66 F0 | 	shl	local09, #1
09c0c     18 2F 02 F1 | 	add	local09, local10
09c10     02 2E 66 F0 | 	shl	local09, #2
09c14     03 00 00 FF 
09c18     00 E4 85 F1 | 	sub	objptr, ##1536
09c1c     F2 2E 02 F1 | 	add	local09, objptr
09c20     04 2E 06 F1 | 	add	local09, #4
09c24     17 2B 62 FC | 	wrlong	local07, local09
09c28     03 00 00 FF 
09c2c     00 E4 05 F1 | 	add	objptr, ##1536
09c30     F2 2E 02 FB | 	rdlong	local09, objptr
09c34     17 31 02 F6 | 	mov	local10, local09
09c38     01 30 66 F0 | 	shl	local10, #1
09c3c     17 31 02 F1 | 	add	local10, local09
09c40     02 30 66 F0 | 	shl	local10, #2
09c44     03 00 00 FF 
09c48     00 E4 85 F1 | 	sub	objptr, ##1536
09c4c     F2 30 02 F1 | 	add	local10, objptr
09c50     08 30 06 F1 | 	add	local10, #8
09c54     18 29 62 FC | 	wrlong	local06, local10
09c58     03 00 00 FF 
09c5c     00 E4 05 F1 | 	add	objptr, ##1536
09c60     F2 2C 02 FB | 	rdlong	local08, objptr
09c64     01 2C 06 F1 | 	add	local08, #1
09c68     F2 2C 62 FC | 	wrlong	local08, objptr
09c6c     6A 00 00 FF 
09c70     6C E4 85 F1 | 	sub	objptr, ##54380
09c74                 | LR__0805
09c74     A7 F0 03 F6 | 	mov	ptra, fp
09c78     B2 00 A0 FD | 	call	#popregs_
09c7c                 | _getfun_ret
09c7c     2D 00 64 FD | 	ret
09c80                 | 
09c80                 | '   
09c80                 | '   
09c80                 | ' sub getvar(m as integer) 
09c80                 | _getvar
09c80     0A 4A 05 F6 | 	mov	COUNT_, #10
09c84     A8 00 A0 FD | 	call	#pushregs_
09c88                 | _getvar_enter
09c88     09 25 02 F6 | 	mov	local04, arg01
09c8c     57 00 00 FF 
09c90     34 E4 05 F1 | 	add	objptr, ##44596
09c94     F2 14 02 FB | 	rdlong	arg02, objptr
09c98     03 14 66 F0 | 	shl	arg02, #3
09c9c     02 00 00 FF 
09ca0     38 E4 85 F1 | 	sub	objptr, ##1080
09ca4     F2 14 02 F1 | 	add	arg02, objptr
09ca8     0A 27 02 FB | 	rdlong	local05, arg02
09cac     13 13 02 F6 | 	mov	arg01, local05
09cb0     01 14 06 F6 | 	mov	arg02, #1
09cb4     54 00 00 FF 
09cb8     FC E5 85 F1 | 	sub	objptr, ##43516
09cbc     90 54 B1 FD | 	call	#__system__Right_S
09cc0     FD 28 02 F6 | 	mov	local06, result1
09cc4     01 2A 66 F6 | 	neg	local07, #1
09cc8                 | ' 
09cc8                 | ' varname$=lparts(ct).part$
09cc8                 | ' suffix$=right$(varname$,1)
09cc8                 | ' j=-1
09cc8                 | ' 
09cc8                 | ' for i=0 to varnum-1
09cc8     00 2C 06 F6 | 	mov	local08, #0
09ccc     54 00 00 FF 
09cd0     F8 E5 05 F1 | 	add	objptr, ##43512
09cd4     F2 2E 02 FB | 	rdlong	local09, objptr
09cd8     54 00 00 FF 
09cdc     F8 E5 85 F1 | 	sub	objptr, ##43512
09ce0                 | LR__0810
09ce0     17 2D 52 F2 | 	cmps	local08, local09 wc
09ce4     38 00 90 3D |  if_ae	jmp	#LR__0811
09ce8                 | '   if variables(i).name=varname$ then j=i : exit
09ce8     16 15 02 F6 | 	mov	arg02, local08
09cec     04 14 66 F0 | 	shl	arg02, #4
09cf0     34 00 00 FF 
09cf4     F8 E5 05 F1 | 	add	objptr, ##27128
09cf8     F2 14 02 F1 | 	add	arg02, objptr
09cfc     0A 13 02 FB | 	rdlong	arg01, arg02
09d00     13 15 02 F6 | 	mov	arg02, local05
09d04     34 00 00 FF 
09d08     F8 E5 85 F1 | 	sub	objptr, ##27128
09d0c     9C 33 B1 FD | 	call	#__system___string_cmp
09d10     00 FA 0D F2 | 	cmp	result1, #0 wz
09d14     16 2B 02 A6 |  if_e	mov	local07, local08
09d18     01 2C 06 51 |  if_ne	add	local08, #1
09d1c     C0 FF 9F 5D |  if_ne	jmp	#LR__0810
09d20                 | LR__0811
09d20                 | ' if  j=-1 andalso varnum<maxvars then   
09d20     FF FF 7F FF 
09d24     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
09d28     A8 00 90 5D |  if_ne	jmp	#LR__0812
09d2c     54 00 00 FF 
09d30     F8 E5 05 F1 | 	add	objptr, ##43512
09d34     F2 2E 02 FB | 	rdlong	local09, objptr
09d38     54 00 00 FF 
09d3c     F8 E5 85 F1 | 	sub	objptr, ##43512
09d40     01 00 00 FF 
09d44     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
09d48     88 00 90 3D |  if_ae	jmp	#LR__0812
09d4c     54 00 00 FF 
09d50     F8 E5 05 F1 | 	add	objptr, ##43512
09d54     F2 2E 02 FB | 	rdlong	local09, objptr
09d58     04 2E 66 F0 | 	shl	local09, #4
09d5c     20 00 00 FF 
09d60     00 E4 85 F1 | 	sub	objptr, ##16384
09d64     F2 2E 02 F1 | 	add	local09, objptr
09d68     17 27 62 FC | 	wrlong	local05, local09
09d6c     20 00 00 FF 
09d70     00 E4 05 F1 | 	add	objptr, ##16384
09d74     F2 2E 02 FB | 	rdlong	local09, objptr
09d78     04 2E 66 F0 | 	shl	local09, #4
09d7c     20 00 00 FF 
09d80     00 E4 85 F1 | 	sub	objptr, ##16384
09d84     F2 2E 02 F1 | 	add	local09, objptr
09d88     04 2E 06 F1 | 	add	local09, #4
09d8c     17 01 68 FC | 	wrlong	#0, local09
09d90     20 00 00 FF 
09d94     00 E4 05 F1 | 	add	objptr, ##16384
09d98     F2 2E 02 FB | 	rdlong	local09, objptr
09d9c     04 2E 66 F0 | 	shl	local09, #4
09da0     20 00 00 FF 
09da4     00 E4 85 F1 | 	sub	objptr, ##16384
09da8     F2 2E 02 F1 | 	add	local09, objptr
09dac     0C 2E 06 F1 | 	add	local09, #12
09db0     17 39 68 FC | 	wrlong	#28, local09
09db4     20 00 00 FF 
09db8     00 E4 05 F1 | 	add	objptr, ##16384
09dbc     F2 2E 02 FB | 	rdlong	local09, objptr
09dc0     17 2B 02 F6 | 	mov	local07, local09
09dc4     01 2E 06 F1 | 	add	local09, #1
09dc8     F2 2E 62 FC | 	wrlong	local09, objptr
09dcc     54 00 00 FF 
09dd0     F8 E5 85 F1 | 	sub	objptr, ##43512
09dd4                 | LR__0812
09dd4     00 2E 06 F6 | 	mov	local09, #0
09dd8                 | ' numpar=0
09dd8                 | ' ' check if it is an array
09dd8                 | ' 
09dd8                 | ' if lparts(ct+1).token=token_lpar then
09dd8     57 00 00 FF 
09ddc     34 E4 05 F1 | 	add	objptr, ##44596
09de0     F2 2C 02 FB | 	rdlong	local08, objptr
09de4     01 2C 06 F1 | 	add	local08, #1
09de8     03 2C 66 F0 | 	shl	local08, #3
09dec     02 00 00 FF 
09df0     38 E4 85 F1 | 	sub	objptr, ##1080
09df4     F2 2C 02 F1 | 	add	local08, objptr
09df8     04 2C 06 F1 | 	add	local08, #4
09dfc     16 2D 02 FB | 	rdlong	local08, local08
09e00     15 2C 0E F2 | 	cmp	local08, #21 wz
09e04     54 00 00 FF 
09e08     FC E5 85 F1 | 	sub	objptr, ##43516
09e0c     08 01 90 5D |  if_ne	jmp	#LR__0817
09e10     57 00 00 FF 
09e14     34 E4 05 F1 | 	add	objptr, ##44596
09e18     F2 30 02 FB | 	rdlong	local10, objptr
09e1c     01 30 06 F1 | 	add	local10, #1
09e20     F2 30 62 FC | 	wrlong	local10, objptr
09e24     57 00 00 FF 
09e28     34 E4 85 F1 | 	sub	objptr, ##44596
09e2c                 | '   ct+=1 											' omit this lpar, this is for expr list
09e2c                 | '   do
09e2c                 | LR__0813
09e2c     57 00 00 FF 
09e30     34 E4 05 F1 | 	add	objptr, ##44596
09e34     F2 2C 02 FB | 	rdlong	local08, objptr
09e38     01 2C 06 F1 | 	add	local08, #1
09e3c     F2 2C 62 FC | 	wrlong	local08, objptr
09e40                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09e40                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09e40     03 2C 66 F0 | 	shl	local08, #3
09e44     02 00 00 FF 
09e48     38 E4 85 F1 | 	sub	objptr, ##1080
09e4c     F2 2C 02 F1 | 	add	local08, objptr
09e50     04 2C 06 F1 | 	add	local08, #4
09e54     16 31 02 FB | 	rdlong	local10, local08
09e58     15 30 0E F2 | 	cmp	local10, #21 wz
09e5c     54 00 00 FF 
09e60     FC E5 85 F1 | 	sub	objptr, ##43516
09e64     40 00 90 5D |  if_ne	jmp	#LR__0814
09e68     57 00 00 FF 
09e6c     34 E4 05 F1 | 	add	objptr, ##44596
09e70     F2 30 02 FB | 	rdlong	local10, objptr
09e74     01 30 06 F1 | 	add	local10, #1
09e78     F2 30 62 FC | 	wrlong	local10, objptr
09e7c     57 00 00 FF 
09e80     34 E4 85 F1 | 	sub	objptr, ##44596
09e84     9C EE BF FD | 	call	#_expr
09e88     57 00 00 FF 
09e8c     34 E4 05 F1 | 	add	objptr, ##44596
09e90     F2 30 02 FB | 	rdlong	local10, objptr
09e94     01 30 06 F1 | 	add	local10, #1
09e98     F2 30 62 FC | 	wrlong	local10, objptr
09e9c     57 00 00 FF 
09ea0     34 E4 85 F1 | 	sub	objptr, ##44596
09ea4     04 00 90 FD | 	jmp	#LR__0815
09ea8                 | LR__0814
09ea8     78 EE BF FD | 	call	#_expr
09eac                 | LR__0815
09eac     01 2E 06 F1 | 	add	local09, #1
09eb0     57 00 00 FF 
09eb4     34 E4 05 F1 | 	add	objptr, ##44596
09eb8     F2 2C 02 FB | 	rdlong	local08, objptr
09ebc     03 2C 66 F0 | 	shl	local08, #3
09ec0     02 00 00 FF 
09ec4     38 E4 85 F1 | 	sub	objptr, ##1080
09ec8     F2 2C 02 F1 | 	add	local08, objptr
09ecc     04 2C 06 F1 | 	add	local08, #4
09ed0     16 31 02 FB | 	rdlong	local10, local08
09ed4     14 30 0E F2 | 	cmp	local10, #20 wz
09ed8     54 00 00 FF 
09edc     FC E5 85 F1 | 	sub	objptr, ##43516
09ee0     34 00 90 AD |  if_e	jmp	#LR__0816
09ee4     57 00 00 FF 
09ee8     34 E4 05 F1 | 	add	objptr, ##44596
09eec     F2 30 02 FB | 	rdlong	local10, objptr
09ef0     03 30 66 F0 | 	shl	local10, #3
09ef4     02 00 00 FF 
09ef8     38 E4 85 F1 | 	sub	objptr, ##1080
09efc     F2 30 02 F1 | 	add	local10, objptr
09f00     04 30 06 F1 | 	add	local10, #4
09f04     18 31 02 FB | 	rdlong	local10, local10
09f08     FE 31 0E F2 | 	cmp	local10, #510 wz
09f0c     54 00 00 FF 
09f10     FC E5 85 F1 | 	sub	objptr, ##43516
09f14     14 FF 9F 5D |  if_ne	jmp	#LR__0813
09f18                 | LR__0816
09f18                 | LR__0817
09f18     17 21 02 F6 | 	mov	local02, local09
09f1c     11 22 06 F6 | 	mov	local03, #17
09f20     15 1F 02 F6 | 	mov	local01, local07
09f24     0F 31 02 F6 | 	mov	local10, local01
09f28     10 2F 02 F6 | 	mov	local09, local02
09f2c     11 2D 02 F6 | 	mov	local08, local03
09f30     6A 00 00 FF 
09f34     6C E4 05 F1 | 	add	objptr, ##54380
09f38     F2 2A 02 FB | 	rdlong	local07, objptr
09f3c     15 29 02 F6 | 	mov	local06, local07
09f40     01 28 66 F0 | 	shl	local06, #1
09f44     15 29 02 F1 | 	add	local06, local07
09f48     02 28 66 F0 | 	shl	local06, #2
09f4c     03 00 00 FF 
09f50     00 E4 85 F1 | 	sub	objptr, ##1536
09f54     F2 28 02 F1 | 	add	local06, objptr
09f58     14 31 62 FC | 	wrlong	local10, local06
09f5c     03 00 00 FF 
09f60     00 E4 05 F1 | 	add	objptr, ##1536
09f64     F2 30 02 FB | 	rdlong	local10, objptr
09f68     18 27 02 F6 | 	mov	local05, local10
09f6c     01 26 66 F0 | 	shl	local05, #1
09f70     18 27 02 F1 | 	add	local05, local10
09f74     02 26 66 F0 | 	shl	local05, #2
09f78     03 00 00 FF 
09f7c     00 E4 85 F1 | 	sub	objptr, ##1536
09f80     F2 26 02 F1 | 	add	local05, objptr
09f84     04 26 06 F1 | 	add	local05, #4
09f88     13 2F 62 FC | 	wrlong	local09, local05
09f8c     03 00 00 FF 
09f90     00 E4 05 F1 | 	add	objptr, ##1536
09f94     F2 30 02 FB | 	rdlong	local10, objptr
09f98     18 FB 01 F6 | 	mov	result1, local10
09f9c     01 FA 65 F0 | 	shl	result1, #1
09fa0     18 FB 01 F1 | 	add	result1, local10
09fa4     02 FA 65 F0 | 	shl	result1, #2
09fa8     03 00 00 FF 
09fac     00 E4 85 F1 | 	sub	objptr, ##1536
09fb0     F2 FA 01 F1 | 	add	result1, objptr
09fb4     08 FA 05 F1 | 	add	result1, #8
09fb8     FD 2C 62 FC | 	wrlong	local08, result1
09fbc     03 00 00 FF 
09fc0     00 E4 05 F1 | 	add	objptr, ##1536
09fc4     F2 30 02 FB | 	rdlong	local10, objptr
09fc8     01 30 06 F1 | 	add	local10, #1
09fcc     F2 30 62 FC | 	wrlong	local10, objptr
09fd0     6A 00 00 FF 
09fd4     6C E4 85 F1 | 	sub	objptr, ##54380
09fd8                 | ' 
09fd8                 | ' t2.result.twowords(1)=numpar
09fd8                 | ' 
09fd8                 | ' 
09fd8                 | ' 
09fd8                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
09fd8                 | ' 
09fd8                 | ' 
09fd8                 | '  
09fd8                 | ' 
09fd8                 | ' 701 
09fd8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09fd8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09fd8     FF FF 7F FF 
09fdc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09fe0     B8 00 90 5D |  if_ne	jmp	#LR__0818
09fe4     15 22 06 F6 | 	mov	local03, #21
09fe8     0F 31 02 F6 | 	mov	local10, local01
09fec     10 2F 02 F6 | 	mov	local09, local02
09ff0     11 2D 02 F6 | 	mov	local08, local03
09ff4     6A 00 00 FF 
09ff8     6C E4 05 F1 | 	add	objptr, ##54380
09ffc     F2 2A 02 FB | 	rdlong	local07, objptr
0a000     15 29 02 F6 | 	mov	local06, local07
0a004     01 28 66 F0 | 	shl	local06, #1
0a008     15 29 02 F1 | 	add	local06, local07
0a00c     02 28 66 F0 | 	shl	local06, #2
0a010     03 00 00 FF 
0a014     00 E4 85 F1 | 	sub	objptr, ##1536
0a018     F2 28 02 F1 | 	add	local06, objptr
0a01c     14 31 62 FC | 	wrlong	local10, local06
0a020     03 00 00 FF 
0a024     00 E4 05 F1 | 	add	objptr, ##1536
0a028     F2 1E 02 FB | 	rdlong	local01, objptr
0a02c     0F 27 02 F6 | 	mov	local05, local01
0a030     01 26 66 F0 | 	shl	local05, #1
0a034     0F 27 02 F1 | 	add	local05, local01
0a038     02 26 66 F0 | 	shl	local05, #2
0a03c     03 00 00 FF 
0a040     00 E4 85 F1 | 	sub	objptr, ##1536
0a044     F2 26 02 F1 | 	add	local05, objptr
0a048     04 26 06 F1 | 	add	local05, #4
0a04c     13 2F 62 FC | 	wrlong	local09, local05
0a050     03 00 00 FF 
0a054     00 E4 05 F1 | 	add	objptr, ##1536
0a058     F2 1E 02 FB | 	rdlong	local01, objptr
0a05c     0F FB 01 F6 | 	mov	result1, local01
0a060     01 FA 65 F0 | 	shl	result1, #1
0a064     0F FB 01 F1 | 	add	result1, local01
0a068     02 FA 65 F0 | 	shl	result1, #2
0a06c     03 00 00 FF 
0a070     00 E4 85 F1 | 	sub	objptr, ##1536
0a074     F2 FA 01 F1 | 	add	result1, objptr
0a078     08 FA 05 F1 | 	add	result1, #8
0a07c     FD 2C 62 FC | 	wrlong	local08, result1
0a080     03 00 00 FF 
0a084     00 E4 05 F1 | 	add	objptr, ##1536
0a088     F2 30 02 FB | 	rdlong	local10, objptr
0a08c     01 30 06 F1 | 	add	local10, #1
0a090     F2 30 62 FC | 	wrlong	local10, objptr
0a094     6A 00 00 FF 
0a098     6C E4 85 F1 | 	sub	objptr, ##54380
0a09c                 | LR__0818
0a09c     A7 F0 03 F6 | 	mov	ptra, fp
0a0a0     B2 00 A0 FD | 	call	#popregs_
0a0a4                 | _getvar_ret
0a0a4     2D 00 64 FD | 	ret
0a0a8                 | 
0a0a8                 | ' 
0a0a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a0a8                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0a0a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a0a8                 | ' 
0a0a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a0a8                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
0a0a8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a0a8                 | ' 
0a0a8                 | ' function execute_line (astart=0 as integer) as integer
0a0a8                 | _execute_line
0a0a8     04 4A 05 F6 | 	mov	COUNT_, #4
0a0ac     A8 00 A0 FD | 	call	#pushregs_
0a0b0     79 00 00 FF 
0a0b4     A4 E5 05 F1 | 	add	objptr, ##62372
0a0b8     F2 00 68 FC | 	wrlong	#0, objptr
0a0bc                 | ' runptr2=0
0a0bc                 | ' for lineptr_e=astart to lineptr-1
0a0bc     0F 00 00 FF 
0a0c0     34 E5 85 F1 | 	sub	objptr, ##7988
0a0c4     F2 12 62 FC | 	wrlong	arg01, objptr
0a0c8     04 E4 85 F1 | 	sub	objptr, #4
0a0cc     F2 1E 02 FB | 	rdlong	local01, objptr
0a0d0     6A 00 00 FF 
0a0d4     6C E4 85 F1 | 	sub	objptr, ##54380
0a0d8                 | LR__0820
0a0d8     6A 00 00 FF 
0a0dc     70 E4 05 F1 | 	add	objptr, ##54384
0a0e0     F2 FA 01 FB | 	rdlong	result1, objptr
0a0e4     6A 00 00 FF 
0a0e8     70 E4 85 F1 | 	sub	objptr, ##54384
0a0ec     0F FB 51 F2 | 	cmps	result1, local01 wc
0a0f0     98 00 90 3D |  if_ae	jmp	#LR__0821
0a0f4     6A 00 00 FF 
0a0f8     70 E4 05 F1 | 	add	objptr, ##54384
0a0fc     F2 FA 01 FB | 	rdlong	result1, objptr
0a100     FD 20 02 F6 | 	mov	local02, result1
0a104     01 20 66 F0 | 	shl	local02, #1
0a108     FD 20 02 F1 | 	add	local02, result1
0a10c     02 20 66 F0 | 	shl	local02, #2
0a110     03 00 00 FF 
0a114     04 E4 85 F1 | 	sub	objptr, ##1540
0a118     F2 20 02 F1 | 	add	local02, objptr
0a11c     08 20 06 F1 | 	add	local02, #8
0a120     10 21 02 FB | 	rdlong	local02, local02
0a124     10 21 E2 F8 | 	getbyte	local02, local02, #0
0a128     02 20 66 F0 | 	shl	local02, #2
0a12c     04 00 00 FF 
0a130     1C E4 85 F1 | 	sub	objptr, ##2076
0a134     F2 20 02 F1 | 	add	local02, objptr
0a138     10 21 02 FB | 	rdlong	local02, local02
0a13c     10 23 02 F6 | 	mov	local03, local02
0a140     13 20 46 F7 | 	zerox	local02, #19
0a144     14 22 46 F0 | 	shr	local03, #20
0a148     02 22 66 F0 | 	shl	local03, #2
0a14c     ED 22 02 F1 | 	add	local03, __methods__
0a150     11 23 02 FB | 	rdlong	local03, local03
0a154     63 00 00 FF 
0a158     50 E4 85 F1 | 	sub	objptr, ##50768
0a15c     F2 24 02 F6 | 	mov	local04, objptr
0a160     10 E5 01 F6 | 	mov	objptr, local02
0a164     2D 22 62 FD | 	call	local03
0a168     12 E5 01 F6 | 	mov	objptr, local04
0a16c     6A 00 00 FF 
0a170     70 E4 05 F1 | 	add	objptr, ##54384
0a174     F2 24 02 FB | 	rdlong	local04, objptr
0a178     01 24 06 F1 | 	add	local04, #1
0a17c     F2 24 62 FC | 	wrlong	local04, objptr
0a180     6A 00 00 FF 
0a184     70 E4 85 F1 | 	sub	objptr, ##54384
0a188     4C FF 9F FD | 	jmp	#LR__0820
0a18c                 | LR__0821
0a18c                 | ' return runptr2
0a18c     79 00 00 FF 
0a190     A4 E5 05 F1 | 	add	objptr, ##62372
0a194     F2 FA 01 FB | 	rdlong	result1, objptr
0a198     79 00 00 FF 
0a19c     A4 E5 85 F1 | 	sub	objptr, ##62372
0a1a0     A7 F0 03 F6 | 	mov	ptra, fp
0a1a4     B2 00 A0 FD | 	call	#popregs_
0a1a8                 | _execute_line_ret
0a1a8     2D 00 64 FD | 	ret
0a1ac                 | 
0a1ac                 | ' 
0a1ac                 | ' 
0a1ac                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0a1ac                 | ' 
0a1ac                 | ' function pop() as expr_result
0a1ac                 | _pop
0a1ac                 | ' 
0a1ac                 | ' if stackpointer=0 then
0a1ac     63 00 00 FF 
0a1b0     48 E4 05 F1 | 	add	objptr, ##50760
0a1b4     F2 FA 09 FB | 	rdlong	result1, objptr wz
0a1b8     63 00 00 FF 
0a1bc     48 E4 85 F1 | 	sub	objptr, ##50760
0a1c0     FF 04 06 A6 |  if_e	mov	_var03, #255
0a1c4     18 00 06 A6 |  if_e	mov	_var01, #24
0a1c8     68 00 90 AD |  if_e	jmp	#LR__0830
0a1cc     63 00 00 FF 
0a1d0     48 E4 05 F1 | 	add	objptr, ##50760
0a1d4     F2 FA 01 FB | 	rdlong	result1, objptr
0a1d8     01 FA 85 F1 | 	sub	result1, #1
0a1dc     F2 FA 61 FC | 	wrlong	result1, objptr
0a1e0     FD FE 01 F6 | 	mov	result3, result1
0a1e4     01 FE 65 F0 | 	shl	result3, #1
0a1e8     FD FE 01 F1 | 	add	result3, result1
0a1ec     02 FE 65 F0 | 	shl	result3, #2
0a1f0     0C 00 00 FF 
0a1f4     0C E4 85 F1 | 	sub	objptr, ##6156
0a1f8     F2 FE 01 F1 | 	add	result3, objptr
0a1fc     FF 00 02 FB | 	rdlong	_var01, result3
0a200     04 FE 05 F1 | 	add	result3, #4
0a204     FF FE 01 FB | 	rdlong	result3, result3
0a208     FD FC 01 F6 | 	mov	result2, result1
0a20c     01 FC 65 F0 | 	shl	result2, #1
0a210     FD FC 01 F1 | 	add	result2, result1
0a214     02 FC 65 F0 | 	shl	result2, #2
0a218     F2 FC 01 F1 | 	add	result2, objptr
0a21c     08 FC 05 F1 | 	add	result2, #8
0a220     FE FA 01 FB | 	rdlong	result1, result2
0a224     FF 02 02 F6 | 	mov	_var02, result3
0a228     FD 04 02 F6 | 	mov	_var03, result1
0a22c     57 00 00 FF 
0a230     3C E4 85 F1 | 	sub	objptr, ##44604
0a234                 | LR__0830
0a234                 | ' return t1
0a234     01 FD 01 F6 | 	mov	result2, _var02
0a238     02 FF 01 F6 | 	mov	result3, _var03
0a23c     00 FB 01 F6 | 	mov	result1, _var01
0a240                 | _pop_ret
0a240     2D 00 64 FD | 	ret
0a244                 | 
0a244                 | ' 
0a244                 | ' sub push(t1 as expr_result )
0a244                 | _push
0a244                 | ' 
0a244                 | ' 'print "In push: "; t1.result_type
0a244                 | ' 'print "In push: "; t1.result.uresult
0a244                 | ' 
0a244                 | ' if stackpointer<maxstack then 
0a244     63 00 00 FF 
0a248     48 E4 05 F1 | 	add	objptr, ##50760
0a24c     F2 00 02 FB | 	rdlong	_var01, objptr
0a250     63 00 00 FF 
0a254     48 E4 85 F1 | 	sub	objptr, ##50760
0a258     01 00 00 FF 
0a25c     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a260     BC 00 90 3D |  if_ae	jmp	#LR__0840
0a264     09 01 02 FB | 	rdlong	_var01, arg01
0a268     04 12 06 F1 | 	add	arg01, #4
0a26c     09 03 02 FB | 	rdlong	_var02, arg01
0a270     04 12 06 F1 | 	add	arg01, #4
0a274     09 13 02 FB | 	rdlong	arg01, arg01
0a278     63 00 00 FF 
0a27c     48 E4 05 F1 | 	add	objptr, ##50760
0a280     F2 04 02 FB | 	rdlong	_var03, objptr
0a284     02 07 02 F6 | 	mov	_var04, _var03
0a288     01 06 66 F0 | 	shl	_var04, #1
0a28c     02 07 02 F1 | 	add	_var04, _var03
0a290     02 06 66 F0 | 	shl	_var04, #2
0a294     0C 00 00 FF 
0a298     0C E4 85 F1 | 	sub	objptr, ##6156
0a29c     F2 06 02 F1 | 	add	_var04, objptr
0a2a0     03 01 62 FC | 	wrlong	_var01, _var04
0a2a4     0C 00 00 FF 
0a2a8     0C E4 05 F1 | 	add	objptr, ##6156
0a2ac     F2 06 02 FB | 	rdlong	_var04, objptr
0a2b0     03 05 02 F6 | 	mov	_var03, _var04
0a2b4     01 04 66 F0 | 	shl	_var03, #1
0a2b8     03 05 02 F1 | 	add	_var03, _var04
0a2bc     02 04 66 F0 | 	shl	_var03, #2
0a2c0     0C 00 00 FF 
0a2c4     0C E4 85 F1 | 	sub	objptr, ##6156
0a2c8     F2 04 02 F1 | 	add	_var03, objptr
0a2cc     04 04 06 F1 | 	add	_var03, #4
0a2d0     02 03 62 FC | 	wrlong	_var02, _var03
0a2d4     0C 00 00 FF 
0a2d8     0C E4 05 F1 | 	add	objptr, ##6156
0a2dc     F2 06 02 FB | 	rdlong	_var04, objptr
0a2e0     03 05 02 F6 | 	mov	_var03, _var04
0a2e4     01 04 66 F0 | 	shl	_var03, #1
0a2e8     03 05 02 F1 | 	add	_var03, _var04
0a2ec     02 04 66 F0 | 	shl	_var03, #2
0a2f0     0C 00 00 FF 
0a2f4     0C E4 85 F1 | 	sub	objptr, ##6156
0a2f8     F2 04 02 F1 | 	add	_var03, objptr
0a2fc     08 04 06 F1 | 	add	_var03, #8
0a300     02 13 62 FC | 	wrlong	arg01, _var03
0a304     0C 00 00 FF 
0a308     0C E4 05 F1 | 	add	objptr, ##6156
0a30c     F2 00 02 FB | 	rdlong	_var01, objptr
0a310     01 00 06 F1 | 	add	_var01, #1
0a314     F2 00 62 FC | 	wrlong	_var01, objptr
0a318     63 00 00 FF 
0a31c     48 E4 85 F1 | 	sub	objptr, ##50760
0a320                 | LR__0840
0a320                 | _push_ret
0a320     2D 00 64 FD | 	ret
0a324                 | 
0a324                 | ' 
0a324                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0a324                 | ' 
0a324                 | ' sub do_push
0a324                 | _do_push
0a324                 | ' if stackpointer<maxstack then 
0a324     63 00 00 FF 
0a328     48 E4 05 F1 | 	add	objptr, ##50760
0a32c     F2 00 02 FB | 	rdlong	_var01, objptr
0a330     63 00 00 FF 
0a334     48 E4 85 F1 | 	sub	objptr, ##50760
0a338     01 00 00 FF 
0a33c     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a340     F8 00 90 3D |  if_ae	jmp	#LR__0850
0a344     6A 00 00 FF 
0a348     70 E4 05 F1 | 	add	objptr, ##54384
0a34c     F2 02 02 FB | 	rdlong	_var02, objptr
0a350     01 05 02 F6 | 	mov	_var03, _var02
0a354     01 04 66 F0 | 	shl	_var03, #1
0a358     01 05 02 F1 | 	add	_var03, _var02
0a35c     02 04 66 F0 | 	shl	_var03, #2
0a360     03 00 00 FF 
0a364     04 E4 85 F1 | 	sub	objptr, ##1540
0a368     F2 04 02 F1 | 	add	_var03, objptr
0a36c     02 01 02 FB | 	rdlong	_var01, _var03
0a370     04 04 06 F1 | 	add	_var03, #4
0a374     02 07 02 FB | 	rdlong	_var04, _var03
0a378     01 05 02 F6 | 	mov	_var03, _var02
0a37c     01 04 66 F0 | 	shl	_var03, #1
0a380     01 05 02 F1 | 	add	_var03, _var02
0a384     02 04 66 F0 | 	shl	_var03, #2
0a388     F2 04 02 F1 | 	add	_var03, objptr
0a38c     08 04 06 F1 | 	add	_var03, #8
0a390     02 03 02 FB | 	rdlong	_var02, _var03
0a394     04 00 00 FF 
0a398     24 E4 85 F1 | 	sub	objptr, ##2084
0a39c     F2 04 02 FB | 	rdlong	_var03, objptr
0a3a0     02 09 02 F6 | 	mov	_var05, _var03
0a3a4     01 08 66 F0 | 	shl	_var05, #1
0a3a8     02 09 02 F1 | 	add	_var05, _var03
0a3ac     02 08 66 F0 | 	shl	_var05, #2
0a3b0     0C 00 00 FF 
0a3b4     0C E4 85 F1 | 	sub	objptr, ##6156
0a3b8     F2 08 02 F1 | 	add	_var05, objptr
0a3bc     04 01 62 FC | 	wrlong	_var01, _var05
0a3c0     0C 00 00 FF 
0a3c4     0C E4 05 F1 | 	add	objptr, ##6156
0a3c8     F2 08 02 FB | 	rdlong	_var05, objptr
0a3cc     04 05 02 F6 | 	mov	_var03, _var05
0a3d0     01 04 66 F0 | 	shl	_var03, #1
0a3d4     04 05 02 F1 | 	add	_var03, _var05
0a3d8     02 04 66 F0 | 	shl	_var03, #2
0a3dc     0C 00 00 FF 
0a3e0     0C E4 85 F1 | 	sub	objptr, ##6156
0a3e4     F2 04 02 F1 | 	add	_var03, objptr
0a3e8     04 04 06 F1 | 	add	_var03, #4
0a3ec     02 07 62 FC | 	wrlong	_var04, _var03
0a3f0     0C 00 00 FF 
0a3f4     0C E4 05 F1 | 	add	objptr, ##6156
0a3f8     F2 08 02 FB | 	rdlong	_var05, objptr
0a3fc     04 07 02 F6 | 	mov	_var04, _var05
0a400     01 06 66 F0 | 	shl	_var04, #1
0a404     04 07 02 F1 | 	add	_var04, _var05
0a408     02 06 66 F0 | 	shl	_var04, #2
0a40c     0C 00 00 FF 
0a410     0C E4 85 F1 | 	sub	objptr, ##6156
0a414     F2 06 02 F1 | 	add	_var04, objptr
0a418     08 06 06 F1 | 	add	_var04, #8
0a41c     03 03 62 FC | 	wrlong	_var02, _var04
0a420     0C 00 00 FF 
0a424     0C E4 05 F1 | 	add	objptr, ##6156
0a428     F2 00 02 FB | 	rdlong	_var01, objptr
0a42c     01 00 06 F1 | 	add	_var01, #1
0a430     F2 00 62 FC | 	wrlong	_var01, objptr
0a434     63 00 00 FF 
0a438     48 E4 85 F1 | 	sub	objptr, ##50760
0a43c                 | LR__0850
0a43c                 | _do_push_ret
0a43c     2D 00 64 FD | 	ret
0a440                 | 
0a440                 | ' 
0a440                 | '   
0a440                 | ' sub csave_block(address as ulong)
0a440                 | _csave_block
0a440     09 01 02 F6 | 	mov	_var01, arg01
0a444                 | ' 
0a444                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0a444                 | ' ' we enter it at the state of playing 1 kHz header tone
0a444                 | ' 
0a444                 | ' for i=0 to 63 step 2
0a444     00 02 06 F6 | 	mov	_var02, #0
0a448                 | LR__0860
0a448                 | '   do: loop until lpeek(base+32*7)>32768
0a448     57 00 00 FF 
0a44c     00 E4 05 F1 | 	add	objptr, ##44544
0a450     97 0C 48 FB | 	callpa	#(@LR__0862-@LR__0861)>>2,fcache_load_ptr_
0a454                 | LR__0861
0a454     F2 12 02 FB | 	rdlong	arg01, objptr
0a458     E0 12 06 F1 | 	add	arg01, #224
0a45c     09 FB 01 FB | 	rdlong	result1, arg01
0a460     40 00 00 FF 
0a464     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0a468     E8 FF 9F CD |  if_b	jmp	#LR__0861
0a46c                 | LR__0862
0a46c     00 13 02 F6 | 	mov	arg01, _var01
0a470     01 05 02 F6 | 	mov	_var03, _var02
0a474     02 04 66 F0 | 	shl	_var03, #2
0a478     02 13 02 F1 | 	add	arg01, _var03
0a47c     09 07 02 FB | 	rdlong	_var04, arg01
0a480     24 00 00 FF 
0a484     E8 E4 05 F1 | 	add	objptr, ##18664
0a488     F2 06 62 FC | 	wrlong	_var04, objptr
0a48c     7B 00 00 FF 
0a490     E8 E4 85 F1 | 	sub	objptr, ##63208
0a494                 | '   q=lpeek(address+4*i)
0a494                 | '      for bit=0 to 31
0a494     00 08 06 F6 | 	mov	_var05, #0
0a498     97 84 48 FB | 	callpa	#(@LR__0867-@LR__0863)>>2,fcache_load_ptr_
0a49c                 | LR__0863
0a49c                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0a49c     7B 00 00 FF 
0a4a0     E8 E4 05 F1 | 	add	objptr, ##63208
0a4a4     F2 06 02 FB | 	rdlong	_var04, objptr
0a4a8     7B 00 00 FF 
0a4ac     E8 E4 85 F1 | 	sub	objptr, ##63208
0a4b0     04 05 C2 F9 | 	decod	_var03, _var05
0a4b4     02 07 CA F7 | 	test	_var04, _var03 wz
0a4b8     60 00 90 AD |  if_e	jmp	#LR__0864
0a4bc     04 05 02 F6 | 	mov	_var03, _var05
0a4c0     02 04 66 F0 | 	shl	_var03, #2
0a4c4     77 00 00 FF 
0a4c8     9C E4 05 F1 | 	add	objptr, ##61084
0a4cc     F2 04 02 F1 | 	add	_var03, objptr
0a4d0     02 FF 48 FC | 	wrbyte	#127, _var03
0a4d4     04 05 02 F6 | 	mov	_var03, _var05
0a4d8     02 04 66 F0 | 	shl	_var03, #2
0a4dc     01 04 06 F1 | 	add	_var03, #1
0a4e0     F2 04 02 F1 | 	add	_var03, objptr
0a4e4     02 01 49 FC | 	wrbyte	#128, _var03
0a4e8     04 05 02 F6 | 	mov	_var03, _var05
0a4ec     02 04 66 F0 | 	shl	_var03, #2
0a4f0     02 04 06 F1 | 	add	_var03, #2
0a4f4     F2 04 02 F1 | 	add	_var03, objptr
0a4f8     02 FF 48 FC | 	wrbyte	#127, _var03
0a4fc     04 05 02 F6 | 	mov	_var03, _var05
0a500     02 04 66 F0 | 	shl	_var03, #2
0a504     03 04 06 F1 | 	add	_var03, #3
0a508     F2 04 02 F1 | 	add	_var03, objptr
0a50c     02 01 49 FC | 	wrbyte	#128, _var03
0a510     77 00 00 FF 
0a514     9C E4 85 F1 | 	sub	objptr, ##61084
0a518     5C 00 90 FD | 	jmp	#LR__0865
0a51c                 | LR__0864
0a51c     04 05 02 F6 | 	mov	_var03, _var05
0a520     02 04 66 F0 | 	shl	_var03, #2
0a524     77 00 00 FF 
0a528     9C E4 05 F1 | 	add	objptr, ##61084
0a52c     F2 04 02 F1 | 	add	_var03, objptr
0a530     02 01 49 FC | 	wrbyte	#128, _var03
0a534     04 05 02 F6 | 	mov	_var03, _var05
0a538     02 04 66 F0 | 	shl	_var03, #2
0a53c     01 04 06 F1 | 	add	_var03, #1
0a540     F2 04 02 F1 | 	add	_var03, objptr
0a544     02 01 49 FC | 	wrbyte	#128, _var03
0a548     04 05 02 F6 | 	mov	_var03, _var05
0a54c     02 04 66 F0 | 	shl	_var03, #2
0a550     02 04 06 F1 | 	add	_var03, #2
0a554     F2 04 02 F1 | 	add	_var03, objptr
0a558     02 FF 48 FC | 	wrbyte	#127, _var03
0a55c     04 05 02 F6 | 	mov	_var03, _var05
0a560     02 04 66 F0 | 	shl	_var03, #2
0a564     03 04 06 F1 | 	add	_var03, #3
0a568     F2 04 02 F1 | 	add	_var03, objptr
0a56c     02 FF 48 FC | 	wrbyte	#127, _var03
0a570     77 00 00 FF 
0a574     9C E4 85 F1 | 	sub	objptr, ##61084
0a578                 | LR__0865
0a578     01 08 06 F1 | 	add	_var05, #1
0a57c     20 08 56 F2 | 	cmps	_var05, #32 wc
0a580     18 FF 9F CD |  if_b	jmp	#LR__0863
0a584                 | '   do: loop until lpeek(base+32*7)<32768
0a584     57 00 00 FF 
0a588     00 E4 05 F1 | 	add	objptr, ##44544
0a58c                 | LR__0866
0a58c     F2 12 02 FB | 	rdlong	arg01, objptr
0a590     E0 12 06 F1 | 	add	arg01, #224
0a594     09 FB 01 FB | 	rdlong	result1, arg01
0a598     40 00 00 FF 
0a59c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0a5a0     E8 FF 9F 3D |  if_ae	jmp	#LR__0866
0a5a4                 | LR__0867
0a5a4     00 13 02 F6 | 	mov	arg01, _var01
0a5a8     04 12 06 F1 | 	add	arg01, #4
0a5ac     01 05 02 F6 | 	mov	_var03, _var02
0a5b0     02 04 66 F0 | 	shl	_var03, #2
0a5b4     02 13 02 F1 | 	add	arg01, _var03
0a5b8     09 07 02 FB | 	rdlong	_var04, arg01
0a5bc     24 00 00 FF 
0a5c0     E8 E4 05 F1 | 	add	objptr, ##18664
0a5c4     F2 06 62 FC | 	wrlong	_var04, objptr
0a5c8     7B 00 00 FF 
0a5cc     E8 E4 85 F1 | 	sub	objptr, ##63208
0a5d0                 | '   q=lpeek(address+4+4*i)
0a5d0                 | '      for bit=0 to 31
0a5d0     00 08 06 F6 | 	mov	_var05, #0
0a5d4     97 94 48 FB | 	callpa	#(@LR__0871-@LR__0868)>>2,fcache_load_ptr_
0a5d8                 | LR__0868
0a5d8                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0a5d8     7B 00 00 FF 
0a5dc     E8 E4 05 F1 | 	add	objptr, ##63208
0a5e0     F2 06 02 FB | 	rdlong	_var04, objptr
0a5e4     7B 00 00 FF 
0a5e8     E8 E4 85 F1 | 	sub	objptr, ##63208
0a5ec     04 05 C2 F9 | 	decod	_var03, _var05
0a5f0     02 07 CA F7 | 	test	_var04, _var03 wz
0a5f4     80 00 90 AD |  if_e	jmp	#LR__0869
0a5f8     04 0B 02 F6 | 	mov	_var06, _var05
0a5fc     02 0A 66 F0 | 	shl	_var06, #2
0a600     80 04 06 F6 | 	mov	_var03, #128
0a604     05 05 02 F1 | 	add	_var03, _var06
0a608     77 00 00 FF 
0a60c     9C E4 05 F1 | 	add	objptr, ##61084
0a610     F2 04 02 F1 | 	add	_var03, objptr
0a614     02 FF 48 FC | 	wrbyte	#127, _var03
0a618     04 0B 02 F6 | 	mov	_var06, _var05
0a61c     02 0A 66 F0 | 	shl	_var06, #2
0a620     80 04 06 F6 | 	mov	_var03, #128
0a624     05 05 02 F1 | 	add	_var03, _var06
0a628     01 04 06 F1 | 	add	_var03, #1
0a62c     F2 04 02 F1 | 	add	_var03, objptr
0a630     02 01 49 FC | 	wrbyte	#128, _var03
0a634     04 0B 02 F6 | 	mov	_var06, _var05
0a638     02 0A 66 F0 | 	shl	_var06, #2
0a63c     80 04 06 F6 | 	mov	_var03, #128
0a640     05 05 02 F1 | 	add	_var03, _var06
0a644     02 04 06 F1 | 	add	_var03, #2
0a648     F2 04 02 F1 | 	add	_var03, objptr
0a64c     02 FF 48 FC | 	wrbyte	#127, _var03
0a650     04 0B 02 F6 | 	mov	_var06, _var05
0a654     02 0A 66 F0 | 	shl	_var06, #2
0a658     80 04 06 F6 | 	mov	_var03, #128
0a65c     05 05 02 F1 | 	add	_var03, _var06
0a660     03 04 06 F1 | 	add	_var03, #3
0a664     F2 04 02 F1 | 	add	_var03, objptr
0a668     02 01 49 FC | 	wrbyte	#128, _var03
0a66c     77 00 00 FF 
0a670     9C E4 85 F1 | 	sub	objptr, ##61084
0a674     7C 00 90 FD | 	jmp	#LR__0870
0a678                 | LR__0869
0a678     04 0B 02 F6 | 	mov	_var06, _var05
0a67c     02 0A 66 F0 | 	shl	_var06, #2
0a680     80 04 06 F6 | 	mov	_var03, #128
0a684     05 05 02 F1 | 	add	_var03, _var06
0a688     77 00 00 FF 
0a68c     9C E4 05 F1 | 	add	objptr, ##61084
0a690     F2 04 02 F1 | 	add	_var03, objptr
0a694     02 01 49 FC | 	wrbyte	#128, _var03
0a698     04 0B 02 F6 | 	mov	_var06, _var05
0a69c     02 0A 66 F0 | 	shl	_var06, #2
0a6a0     80 04 06 F6 | 	mov	_var03, #128
0a6a4     05 05 02 F1 | 	add	_var03, _var06
0a6a8     01 04 06 F1 | 	add	_var03, #1
0a6ac     F2 04 02 F1 | 	add	_var03, objptr
0a6b0     02 01 49 FC | 	wrbyte	#128, _var03
0a6b4     04 0B 02 F6 | 	mov	_var06, _var05
0a6b8     02 0A 66 F0 | 	shl	_var06, #2
0a6bc     80 04 06 F6 | 	mov	_var03, #128
0a6c0     05 05 02 F1 | 	add	_var03, _var06
0a6c4     02 04 06 F1 | 	add	_var03, #2
0a6c8     F2 04 02 F1 | 	add	_var03, objptr
0a6cc     02 FF 48 FC | 	wrbyte	#127, _var03
0a6d0     04 0B 02 F6 | 	mov	_var06, _var05
0a6d4     02 0A 66 F0 | 	shl	_var06, #2
0a6d8     80 04 06 F6 | 	mov	_var03, #128
0a6dc     05 05 02 F1 | 	add	_var03, _var06
0a6e0     03 04 06 F1 | 	add	_var03, #3
0a6e4     F2 04 02 F1 | 	add	_var03, objptr
0a6e8     02 FF 48 FC | 	wrbyte	#127, _var03
0a6ec     77 00 00 FF 
0a6f0     9C E4 85 F1 | 	sub	objptr, ##61084
0a6f4                 | LR__0870
0a6f4     01 08 06 F1 | 	add	_var05, #1
0a6f8     20 08 56 F2 | 	cmps	_var05, #32 wc
0a6fc     D8 FE 9F CD |  if_b	jmp	#LR__0868
0a700                 | LR__0871
0a700     02 02 06 F1 | 	add	_var02, #2
0a704     40 02 56 F2 | 	cmps	_var02, #64 wc
0a708     3C FD 9F CD |  if_b	jmp	#LR__0860
0a70c                 | ' do: loop until lpeek(base+32*7)>32768
0a70c     57 00 00 FF 
0a710     00 E4 05 F1 | 	add	objptr, ##44544
0a714     97 84 48 FB | 	callpa	#(@LR__0880-@LR__0872)>>2,fcache_load_ptr_
0a718                 | LR__0872
0a718     F2 12 02 FB | 	rdlong	arg01, objptr
0a71c     E0 12 06 F1 | 	add	arg01, #224
0a720     09 FB 01 FB | 	rdlong	result1, arg01
0a724     40 00 00 FF 
0a728     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0a72c     E8 FF 9F CD |  if_b	jmp	#LR__0872
0a730     57 00 00 FF 
0a734     00 E4 85 F1 | 	sub	objptr, ##44544
0a738                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a738     00 02 06 F6 | 	mov	_var02, #0
0a73c                 | LR__0873
0a73c     01 07 52 F6 | 	abs	_var04, _var02 wc
0a740     07 06 06 F5 | 	and	_var04, #7
0a744     03 07 82 F6 | 	negc	_var04, _var04
0a748     04 06 56 F2 | 	cmps	_var04, #4 wc
0a74c     20 00 90 3D |  if_ae	jmp	#LR__0874
0a750     01 0B 02 F6 | 	mov	_var06, _var02
0a754     77 00 00 FF 
0a758     9C E4 05 F1 | 	add	objptr, ##61084
0a75c     F2 0A 02 F1 | 	add	_var06, objptr
0a760     05 FF 48 FC | 	wrbyte	#127, _var06
0a764     77 00 00 FF 
0a768     9C E4 85 F1 | 	sub	objptr, ##61084
0a76c     1C 00 90 FD | 	jmp	#LR__0875
0a770                 | LR__0874
0a770     01 0B 02 F6 | 	mov	_var06, _var02
0a774     77 00 00 FF 
0a778     9C E4 05 F1 | 	add	objptr, ##61084
0a77c     F2 0A 02 F1 | 	add	_var06, objptr
0a780     05 01 49 FC | 	wrbyte	#128, _var06
0a784     77 00 00 FF 
0a788     9C E4 85 F1 | 	sub	objptr, ##61084
0a78c                 | LR__0875
0a78c     01 02 06 F1 | 	add	_var02, #1
0a790     80 02 56 F2 | 	cmps	_var02, #128 wc
0a794     A4 FF 9F CD |  if_b	jmp	#LR__0873
0a798                 | ' 
0a798                 | ' do: loop until lpeek(base+32*7)<32768
0a798     57 00 00 FF 
0a79c     00 E4 05 F1 | 	add	objptr, ##44544
0a7a0                 | LR__0876
0a7a0     F2 12 02 FB | 	rdlong	arg01, objptr
0a7a4     E0 12 06 F1 | 	add	arg01, #224
0a7a8     09 FB 01 FB | 	rdlong	result1, arg01
0a7ac     40 00 00 FF 
0a7b0     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0a7b4     E8 FF 9F 3D |  if_ae	jmp	#LR__0876
0a7b8     57 00 00 FF 
0a7bc     00 E4 85 F1 | 	sub	objptr, ##44544
0a7c0                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a7c0     80 02 06 F6 | 	mov	_var02, #128
0a7c4                 | LR__0877
0a7c4     01 07 52 F6 | 	abs	_var04, _var02 wc
0a7c8     07 06 06 F5 | 	and	_var04, #7
0a7cc     03 07 82 F6 | 	negc	_var04, _var04
0a7d0     04 06 56 F2 | 	cmps	_var04, #4 wc
0a7d4     20 00 90 3D |  if_ae	jmp	#LR__0878
0a7d8     01 0B 02 F6 | 	mov	_var06, _var02
0a7dc     77 00 00 FF 
0a7e0     9C E4 05 F1 | 	add	objptr, ##61084
0a7e4     F2 0A 02 F1 | 	add	_var06, objptr
0a7e8     05 FF 48 FC | 	wrbyte	#127, _var06
0a7ec     77 00 00 FF 
0a7f0     9C E4 85 F1 | 	sub	objptr, ##61084
0a7f4     1C 00 90 FD | 	jmp	#LR__0879
0a7f8                 | LR__0878
0a7f8     01 0B 02 F6 | 	mov	_var06, _var02
0a7fc     77 00 00 FF 
0a800     9C E4 05 F1 | 	add	objptr, ##61084
0a804     F2 0A 02 F1 | 	add	_var06, objptr
0a808     05 01 49 FC | 	wrbyte	#128, _var06
0a80c     77 00 00 FF 
0a810     9C E4 85 F1 | 	sub	objptr, ##61084
0a814                 | LR__0879
0a814     01 02 06 F1 | 	add	_var02, #1
0a818     00 03 16 F2 | 	cmp	_var02, #256 wc
0a81c     A4 FF 9F CD |  if_b	jmp	#LR__0877
0a820                 | LR__0880
0a820                 | _csave_block_ret
0a820     2D 00 64 FD | 	ret
0a824                 | 
0a824                 | ' 
0a824                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0a824                 | _csave_addtoblock
0a824     04 4A 05 F6 | 	mov	COUNT_, #4
0a828     A8 00 A0 FD | 	call	#pushregs_
0a82c     09 1F 02 F6 | 	mov	local01, arg01
0a830                 | ' 
0a830                 | ' 
0a830                 | ' if force=0 then
0a830     07 14 4E F7 | 	zerox	arg02, #7 wz
0a834     78 00 90 5D |  if_ne	jmp	#LR__0890
0a838     79 00 00 FF 
0a83c     9C E5 05 F1 | 	add	objptr, ##62364
0a840     F2 14 02 FB | 	rdlong	arg02, objptr
0a844     02 00 00 FF 
0a848     00 E4 85 F1 | 	sub	objptr, ##1024
0a84c     F2 14 02 F1 | 	add	arg02, objptr
0a850     0A 1F 42 FC | 	wrbyte	local01, arg02
0a854     02 00 00 FF 
0a858     00 E4 05 F1 | 	add	objptr, ##1024
0a85c     F2 1E 02 FB | 	rdlong	local01, objptr
0a860     01 1E 06 F1 | 	add	local01, #1
0a864     F2 1E 62 FC | 	wrlong	local01, objptr
0a868                 | '   block(blockptr)=d
0a868                 | '   blockptr+=1
0a868                 | '   if blockptr>=255 then
0a868     79 00 00 FF 
0a86c     9C E5 85 F1 | 	sub	objptr, ##62364
0a870     FF 1E 16 F2 | 	cmp	local01, #255 wc
0a874     E4 00 90 CD |  if_b	jmp	#LR__0894
0a878     77 00 00 FF 
0a87c     9C E5 05 F1 | 	add	objptr, ##61340
0a880     F2 12 02 F6 | 	mov	arg01, objptr
0a884     77 00 00 FF 
0a888     9C E5 85 F1 | 	sub	objptr, ##61340
0a88c     B0 FB BF FD | 	call	#_csave_block
0a890     79 00 00 FF 
0a894     9C E5 05 F1 | 	add	objptr, ##62364
0a898     F2 00 68 FC | 	wrlong	#0, objptr
0a89c     79 00 00 FF 
0a8a0     9C E5 85 F1 | 	sub	objptr, ##62364
0a8a4     2C 13 06 F6 | 	mov	arg01, #300
0a8a8     CC 2A B1 FD | 	call	#__system___waitms
0a8ac     AC 00 90 FD | 	jmp	#LR__0894
0a8b0                 | LR__0890
0a8b0     79 00 00 FF 
0a8b4     9C E5 05 F1 | 	add	objptr, ##62364
0a8b8     F2 20 02 FB | 	rdlong	local02, objptr
0a8bc     02 00 00 FF 
0a8c0     00 E4 85 F1 | 	sub	objptr, ##1024
0a8c4     F2 20 02 F1 | 	add	local02, objptr
0a8c8     10 1F 42 FC | 	wrbyte	local01, local02
0a8cc                 | '   block(blockptr)=d
0a8cc                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0a8cc     02 00 00 FF 
0a8d0     00 E4 05 F1 | 	add	objptr, ##1024
0a8d4     F2 22 02 FB | 	rdlong	local03, objptr
0a8d8     79 00 00 FF 
0a8dc     9C E5 85 F1 | 	sub	objptr, ##62364
0a8e0     FF 22 16 F2 | 	cmp	local03, #255 wc
0a8e4     40 00 90 3D |  if_ae	jmp	#LR__0893
0a8e8     79 00 00 FF 
0a8ec     9C E5 05 F1 | 	add	objptr, ##62364
0a8f0     F2 24 02 FB | 	rdlong	local04, objptr
0a8f4     79 00 00 FF 
0a8f8     9C E5 85 F1 | 	sub	objptr, ##62364
0a8fc                 | LR__0891
0a8fc     00 25 56 F2 | 	cmps	local04, #256 wc
0a900     24 00 90 3D |  if_ae	jmp	#LR__0892
0a904     12 21 02 F6 | 	mov	local02, local04
0a908     77 00 00 FF 
0a90c     9C E5 05 F1 | 	add	objptr, ##61340
0a910     F2 20 02 F1 | 	add	local02, objptr
0a914     10 01 48 FC | 	wrbyte	#0, local02
0a918     01 24 06 F1 | 	add	local04, #1
0a91c     77 00 00 FF 
0a920     9C E5 85 F1 | 	sub	objptr, ##61340
0a924     D4 FF 9F FD | 	jmp	#LR__0891
0a928                 | LR__0892
0a928                 | LR__0893
0a928     77 00 00 FF 
0a92c     9C E5 05 F1 | 	add	objptr, ##61340
0a930     F2 12 02 F6 | 	mov	arg01, objptr
0a934     77 00 00 FF 
0a938     9C E5 85 F1 | 	sub	objptr, ##61340
0a93c     00 FB BF FD | 	call	#_csave_block
0a940     79 00 00 FF 
0a944     9C E5 05 F1 | 	add	objptr, ##62364
0a948     F2 00 68 FC | 	wrlong	#0, objptr
0a94c     79 00 00 FF 
0a950     9C E5 85 F1 | 	sub	objptr, ##62364
0a954     2C 13 06 F6 | 	mov	arg01, #300
0a958     1C 2A B1 FD | 	call	#__system___waitms
0a95c                 | LR__0894
0a95c     A7 F0 03 F6 | 	mov	ptra, fp
0a960     B2 00 A0 FD | 	call	#popregs_
0a964                 | _csave_addtoblock_ret
0a964     2D 00 64 FD | 	ret
0a968                 | 
0a968                 | ' 
0a968                 | ' sub test_csave
0a968                 | _test_csave
0a968     04 4A 05 F6 | 	mov	COUNT_, #4
0a96c     A8 00 A0 FD | 	call	#pushregs_
0a970     C0 F0 07 F1 | 	add	ptra, #192
0a974                 | ' 'dim fileheader,savestart, saveptr as ulong
0a974                 | ' 
0a974                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a974     6A 00 00 FF 
0a978     74 E4 05 F1 | 	add	objptr, ##54388
0a97c     F2 12 02 FB | 	rdlong	arg01, objptr
0a980     6A 00 00 FF 
0a984     74 E4 85 F1 | 	sub	objptr, ##54388
0a988     30 E9 B0 FD | 	call	#_pslpeek
0a98c     FF FF 7F FF 
0a990     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a994     0C 00 90 5D |  if_ne	jmp	#LR__0900
0a998     1B 12 06 F6 | 	mov	arg01, #27
0a99c     88 E6 B0 FD | 	call	#_printerror
0a9a0     1C 03 90 FD | 	jmp	#LR__0914
0a9a4                 | LR__0900
0a9a4     04 F8 BF FD | 	call	#_pop
0a9a8     90 4E 05 F1 | 	add	fp, #144
0a9ac     A7 FA 61 FC | 	wrlong	result1, fp
0a9b0     04 4E 05 F1 | 	add	fp, #4
0a9b4     A7 FC 61 FC | 	wrlong	result2, fp
0a9b8     04 4E 05 F1 | 	add	fp, #4
0a9bc     A7 FE 61 FC | 	wrlong	result3, fp
0a9c0                 | ' t1=pop()
0a9c0                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0a9c0     98 4E 85 F1 | 	sub	fp, #152
0a9c4     1F FE 0D F2 | 	cmp	result3, #31 wz
0a9c8     24 00 90 AD |  if_e	jmp	#LR__0901
0a9cc     7B 00 00 FF 
0a9d0     94 E4 05 F1 | 	add	objptr, ##63124
0a9d4     F2 1C 02 FB | 	rdlong	arg06, objptr
0a9d8     7B 00 00 FF 
0a9dc     94 E4 85 F1 | 	sub	objptr, ##63124
0a9e0     8C 4E 05 F1 | 	add	fp, #140
0a9e4     A7 1C 62 FC | 	wrlong	arg06, fp
0a9e8     8C 4E 85 F1 | 	sub	fp, #140
0a9ec     14 00 90 FD | 	jmp	#LR__0902
0a9f0                 | LR__0901
0a9f0     90 4E 05 F1 | 	add	fp, #144
0a9f4     A7 1C 02 FB | 	rdlong	arg06, fp
0a9f8     04 4E 85 F1 | 	sub	fp, #4
0a9fc     A7 1C 62 FC | 	wrlong	arg06, fp
0aa00     8C 4E 85 F1 | 	sub	fp, #140
0aa04                 | LR__0902
0aa04                 | ' 
0aa04                 | ' ' prepare 1 kHz header wave
0aa04                 | ' 
0aa04                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0aa04     A7 00 68 FC | 	wrlong	#0, fp
0aa08     97 34 48 FB | 	callpa	#(@LR__0906-@LR__0903)>>2,fcache_load_ptr_
0aa0c                 | LR__0903
0aa0c     A7 1C 02 FB | 	rdlong	arg06, fp
0aa10     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0aa14     07 1A 06 F5 | 	and	arg05, #7
0aa18     0D 1B 82 F6 | 	negc	arg05, arg05
0aa1c     04 1A 56 F2 | 	cmps	arg05, #4 wc
0aa20     20 00 90 3D |  if_ae	jmp	#LR__0904
0aa24     A7 1A 02 FB | 	rdlong	arg05, fp
0aa28     77 00 00 FF 
0aa2c     9C E4 05 F1 | 	add	objptr, ##61084
0aa30     F2 1A 02 F1 | 	add	arg05, objptr
0aa34     0D FF 48 FC | 	wrbyte	#127, arg05
0aa38     77 00 00 FF 
0aa3c     9C E4 85 F1 | 	sub	objptr, ##61084
0aa40     1C 00 90 FD | 	jmp	#LR__0905
0aa44                 | LR__0904
0aa44     A7 1A 02 FB | 	rdlong	arg05, fp
0aa48     77 00 00 FF 
0aa4c     9C E4 05 F1 | 	add	objptr, ##61084
0aa50     F2 1A 02 F1 | 	add	arg05, objptr
0aa54     0D 01 49 FC | 	wrbyte	#128, arg05
0aa58     77 00 00 FF 
0aa5c     9C E4 85 F1 | 	sub	objptr, ##61084
0aa60                 | LR__0905
0aa60     A7 1A 02 FB | 	rdlong	arg05, fp
0aa64     01 1A 06 F1 | 	add	arg05, #1
0aa68     A7 1A 62 FC | 	wrlong	arg05, fp
0aa6c     00 1B 56 F2 | 	cmps	arg05, #256 wc
0aa70     98 FF 9F CD |  if_b	jmp	#LR__0903
0aa74                 | LR__0906
0aa74     77 00 00 FF 
0aa78     9C E4 05 F1 | 	add	objptr, ##61084
0aa7c     F2 14 02 F6 | 	mov	arg02, objptr
0aa80     07 12 06 F6 | 	mov	arg01, #7
0aa84     0F 00 00 FF 
0aa88     40 17 06 F6 | 	mov	arg03, ##8000
0aa8c     0E 18 C6 F9 | 	decod	arg04, #14
0aa90     00 1B 06 F6 | 	mov	arg05, #256
0aa94     00 1C 06 F6 | 	mov	arg06, #0
0aa98     6B 00 00 FF 
0aa9c     D0 E5 85 F1 | 	sub	objptr, ##55248
0aaa0     2C 22 B1 FD | 	call	#_audio096_spin2_play8
0aaa4     0B 00 00 FF 
0aaa8     CC E4 85 F1 | 	sub	objptr, ##5836
0aaac     05 00 00 FF 
0aab0     B8 13 06 F6 | 	mov	arg01, ##3000
0aab4     C0 28 B1 FD | 	call	#__system___waitms
0aab8     79 00 00 FF 
0aabc     9C E5 05 F1 | 	add	objptr, ##62364
0aac0     F2 00 68 FC | 	wrlong	#0, objptr
0aac4     79 00 00 FF 
0aac8     9C E5 85 F1 | 	sub	objptr, ##62364
0aacc     72 12 06 F6 | 	mov	arg01, #114
0aad0     00 14 06 F6 | 	mov	arg02, #0
0aad4     4C FD BF FD | 	call	#_csave_addtoblock
0aad8     62 12 06 F6 | 	mov	arg01, #98
0aadc     00 14 06 F6 | 	mov	arg02, #0
0aae0     40 FD BF FD | 	call	#_csave_addtoblock
0aae4     61 12 06 F6 | 	mov	arg01, #97
0aae8     00 14 06 F6 | 	mov	arg02, #0
0aaec     34 FD BF FD | 	call	#_csave_addtoblock
0aaf0     0D 12 06 F6 | 	mov	arg01, #13
0aaf4     00 14 06 F6 | 	mov	arg02, #0
0aaf8     28 FD BF FD | 	call	#_csave_addtoblock
0aafc                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0aafc                 | ' waitms 3000 
0aafc                 | ' 
0aafc                 | ' blockptr=0
0aafc                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0aafc                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0aafc     A7 02 68 FC | 	wrlong	#1, fp
0ab00     8C 4E 05 F1 | 	add	fp, #140
0ab04     A7 12 02 FB | 	rdlong	arg01, fp
0ab08     8C 4E 85 F1 | 	sub	fp, #140
0ab0c     09 1F 02 F6 | 	mov	local01, arg01
0ab10     97 06 48 FB | 	callpa	#(@LR__0908-@LR__0907)>>2,fcache_load_ptr_
0ab14                 | LR__0907
0ab14     0F FB C9 FA | 	rdbyte	result1, local01 wz
0ab18     01 1E 06 51 |  if_ne	add	local01, #1
0ab1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0907
0ab20                 | LR__0908
0ab20     09 1F 82 F1 | 	sub	local01, arg01
0ab24     0F 21 02 F6 | 	mov	local02, local01
0ab28     01 20 06 F1 | 	add	local02, #1
0ab2c                 | LR__0909
0ab2c     A7 1A 02 FB | 	rdlong	arg05, fp
0ab30     10 1B 52 F2 | 	cmps	arg05, local02 wc
0ab34     34 00 90 3D |  if_ae	jmp	#LR__0910
0ab38     8C 4E 05 F1 | 	add	fp, #140
0ab3c     A7 12 02 FB | 	rdlong	arg01, fp
0ab40     8C 4E 85 F1 | 	sub	fp, #140
0ab44     A7 14 02 FB | 	rdlong	arg02, fp
0ab48     01 16 06 F6 | 	mov	arg03, #1
0ab4c     90 46 B1 FD | 	call	#__system__Mid_S
0ab50     FD 12 C2 FA | 	rdbyte	arg01, result1
0ab54     00 14 06 F6 | 	mov	arg02, #0
0ab58     C8 FC BF FD | 	call	#_csave_addtoblock
0ab5c     A7 1A 02 FB | 	rdlong	arg05, fp
0ab60     01 1A 06 F1 | 	add	arg05, #1
0ab64     A7 1A 62 FC | 	wrlong	arg05, fp
0ab68     C0 FF 9F FD | 	jmp	#LR__0909
0ab6c                 | LR__0910
0ab6c     00 12 06 F6 | 	mov	arg01, #0
0ab70     00 14 06 F6 | 	mov	arg02, #0
0ab74     AC FC BF FD | 	call	#_csave_addtoblock
0ab78     72 12 06 F6 | 	mov	arg01, #114
0ab7c     00 14 06 F6 | 	mov	arg02, #0
0ab80     A0 FC BF FD | 	call	#_csave_addtoblock
0ab84     62 12 06 F6 | 	mov	arg01, #98
0ab88     00 14 06 F6 | 	mov	arg02, #0
0ab8c     94 FC BF FD | 	call	#_csave_addtoblock
0ab90     73 12 06 F6 | 	mov	arg01, #115
0ab94     00 14 06 F6 | 	mov	arg02, #0
0ab98     88 FC BF FD | 	call	#_csave_addtoblock
0ab9c     0D 12 06 F6 | 	mov	arg01, #13
0aba0     00 14 06 F6 | 	mov	arg02, #0
0aba4     7C FC BF FD | 	call	#_csave_addtoblock
0aba8     6A 00 00 FF 
0abac     74 E4 05 F1 | 	add	objptr, ##54388
0abb0     F2 22 02 FB | 	rdlong	local03, objptr
0abb4     6A 00 00 FF 
0abb8     74 E4 85 F1 | 	sub	objptr, ##54388
0abbc     9C 4E 05 F1 | 	add	fp, #156
0abc0     A7 22 62 FC | 	wrlong	local03, fp
0abc4     9C 4E 85 F1 | 	sub	fp, #156
0abc8                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0abc8                 | ' 
0abc8                 | ' saveptr=programstart
0abc8                 | ' do
0abc8                 | LR__0911
0abc8     A0 4E 05 F1 | 	add	fp, #160
0abcc     A7 12 02 F6 | 	mov	arg01, fp
0abd0     04 4E 85 F1 | 	sub	fp, #4
0abd4     A7 14 02 FB | 	rdlong	arg02, fp
0abd8     9C 4E 85 F1 | 	sub	fp, #156
0abdc     18 16 06 F6 | 	mov	arg03, #24
0abe0     0B 00 00 FF 
0abe4     CC E4 05 F1 | 	add	objptr, ##5836
0abe8     94 18 B1 FD | 	call	#_psram_spin2_read1
0abec     0C 4E 05 F1 | 	add	fp, #12
0abf0     A7 12 02 F6 | 	mov	arg01, fp
0abf4     9C 4E 05 F1 | 	add	fp, #156
0abf8     A7 14 02 FB | 	rdlong	arg02, fp
0abfc     04 4E 05 F1 | 	add	fp, #4
0ac00     A7 16 02 FB | 	rdlong	arg03, fp
0ac04     AC 4E 85 F1 | 	sub	fp, #172
0ac08     74 18 B1 FD | 	call	#_psram_spin2_read1
0ac0c     0B 00 00 FF 
0ac10     CC E4 85 F1 | 	sub	objptr, ##5836
0ac14     AC 4E 05 F1 | 	add	fp, #172
0ac18     A7 12 02 FB | 	rdlong	arg01, fp
0ac1c     AC 4E 85 F1 | 	sub	fp, #172
0ac20     00 14 06 F6 | 	mov	arg02, #0
0ac24     FC FB BF FD | 	call	#_csave_addtoblock
0ac28                 | '   psram.read1(varptr(header(0)),saveptr,24)
0ac28                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0ac28                 | '   csave_addtoblock(header(3),0) ' that's always <255
0ac28                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0ac28     A7 00 68 FC | 	wrlong	#0, fp
0ac2c     AC 4E 05 F1 | 	add	fp, #172
0ac30     A7 24 02 FB | 	rdlong	local04, fp
0ac34     AC 4E 85 F1 | 	sub	fp, #172
0ac38                 | LR__0912
0ac38     A7 22 02 FB | 	rdlong	local03, fp
0ac3c     12 23 52 F2 | 	cmps	local03, local04 wc
0ac40     2C 00 90 3D |  if_ae	jmp	#LR__0913
0ac44     A7 22 02 FB | 	rdlong	local03, fp
0ac48     0C 4E 05 F1 | 	add	fp, #12
0ac4c     A7 22 02 F1 | 	add	local03, fp
0ac50     11 13 C2 FA | 	rdbyte	arg01, local03
0ac54     00 14 06 F6 | 	mov	arg02, #0
0ac58     0C 4E 85 F1 | 	sub	fp, #12
0ac5c     C4 FB BF FD | 	call	#_csave_addtoblock
0ac60     A7 22 02 FB | 	rdlong	local03, fp
0ac64     01 22 06 F1 | 	add	local03, #1
0ac68     A7 22 62 FC | 	wrlong	local03, fp
0ac6c     C8 FF 9F FD | 	jmp	#LR__0912
0ac70                 | LR__0913
0ac70     B4 4E 05 F1 | 	add	fp, #180
0ac74     A7 22 02 FB | 	rdlong	local03, fp
0ac78     18 4E 85 F1 | 	sub	fp, #24
0ac7c     A7 22 62 FC | 	wrlong	local03, fp
0ac80     18 4E 05 F1 | 	add	fp, #24
0ac84     A7 22 02 FB | 	rdlong	local03, fp
0ac88     B4 4E 85 F1 | 	sub	fp, #180
0ac8c     FF FF 3F FF 
0ac90     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0ac94     30 FF 9F 5D |  if_ne	jmp	#LR__0911
0ac98     00 12 06 F6 | 	mov	arg01, #0
0ac9c     01 14 06 F6 | 	mov	arg02, #1
0aca0     80 FB BF FD | 	call	#_csave_addtoblock
0aca4     57 00 00 FF 
0aca8     00 E4 05 F1 | 	add	objptr, ##44544
0acac     F2 12 02 FB | 	rdlong	arg01, objptr
0acb0     57 00 00 FF 
0acb4     00 E4 85 F1 | 	sub	objptr, ##44544
0acb8     F4 12 06 F1 | 	add	arg01, #244
0acbc     09 01 58 FC | 	wrword	#0, arg01
0acc0                 | LR__0914
0acc0     A7 F0 03 F6 | 	mov	ptra, fp
0acc4     B2 00 A0 FD | 	call	#popregs_
0acc8                 | _test_csave_ret
0acc8     2D 00 64 FD | 	ret
0accc                 | 
0accc                 | ' 
0accc                 | ' ' ----------------- Save the program
0accc                 | ' 
0accc                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0accc                 | _do_save
0accc     04 4A 05 F6 | 	mov	COUNT_, #4
0acd0     A8 00 A0 FD | 	call	#pushregs_
0acd4     01 00 00 FF 
0acd8     C0 F0 07 F1 | 	add	ptra, ##704
0acdc     6A 00 00 FF 
0ace0     70 E4 05 F1 | 	add	objptr, ##54384
0ace4     F2 1E 02 FB | 	rdlong	local01, objptr
0ace8     0F 21 02 F6 | 	mov	local02, local01
0acec     01 20 66 F0 | 	shl	local02, #1
0acf0     0F 21 02 F1 | 	add	local02, local01
0acf4     02 20 66 F0 | 	shl	local02, #2
0acf8     03 00 00 FF 
0acfc     04 E4 85 F1 | 	sub	objptr, ##1540
0ad00     F2 20 02 F1 | 	add	local02, objptr
0ad04     10 23 02 FB | 	rdlong	local03, local02
0ad08     01 00 00 FF 
0ad0c     10 4E 05 F1 | 	add	fp, ##528
0ad10     A7 22 62 FC | 	wrlong	local03, fp
0ad14                 | ' 
0ad14                 | ' numpar=compiledline(lineptr_e).result.uresult
0ad14                 | ' 
0ad14                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0ad14     01 00 00 FF 
0ad18     10 4E 85 F1 | 	sub	fp, ##528
0ad1c     01 22 56 F2 | 	cmps	local03, #1 wc
0ad20     67 00 00 FF 
0ad24     6C E4 85 F1 | 	sub	objptr, ##52844
0ad28     20 00 90 CD |  if_b	jmp	#LR__0920
0ad2c     7C F4 BF FD | 	call	#_pop
0ad30     A7 FA 61 FC | 	wrlong	result1, fp
0ad34     04 4E 05 F1 | 	add	fp, #4
0ad38     A7 FC 61 FC | 	wrlong	result2, fp
0ad3c     04 4E 05 F1 | 	add	fp, #4
0ad40     A7 FE 61 FC | 	wrlong	result3, fp
0ad44     08 4E 85 F1 | 	sub	fp, #8
0ad48     24 00 90 FD | 	jmp	#LR__0921
0ad4c                 | LR__0920
0ad4c     7B 00 00 FF 
0ad50     94 E4 05 F1 | 	add	objptr, ##63124
0ad54     F2 22 02 FB | 	rdlong	local03, objptr
0ad58     7B 00 00 FF 
0ad5c     94 E4 85 F1 | 	sub	objptr, ##63124
0ad60     A7 22 62 FC | 	wrlong	local03, fp
0ad64     08 4E 05 F1 | 	add	fp, #8
0ad68     A7 3E 68 FC | 	wrlong	#31, fp
0ad6c     08 4E 85 F1 | 	sub	fp, #8
0ad70                 | LR__0921
0ad70                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0ad70     6A 00 00 FF 
0ad74     74 E4 05 F1 | 	add	objptr, ##54388
0ad78     F2 12 02 FB | 	rdlong	arg01, objptr
0ad7c     6A 00 00 FF 
0ad80     74 E4 85 F1 | 	sub	objptr, ##54388
0ad84     34 E5 B0 FD | 	call	#_pslpeek
0ad88     FF FF 7F FF 
0ad8c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0ad90     0C 00 90 5D |  if_ne	jmp	#LR__0922
0ad94     1B 12 06 F6 | 	mov	arg01, #27
0ad98     8C E2 B0 FD | 	call	#_printerror
0ad9c     1C 03 90 FD | 	jmp	#LR__0928
0ada0                 | LR__0922
0ada0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0ada0     08 4E 05 F1 | 	add	fp, #8
0ada4     A7 22 02 FB | 	rdlong	local03, fp
0ada8     08 4E 85 F1 | 	sub	fp, #8
0adac     2B 22 0E F2 | 	cmp	local03, #43 wz
0adb0     18 00 90 5D |  if_ne	jmp	#LR__0923
0adb4     A7 12 02 FB | 	rdlong	arg01, fp
0adb8     98 36 B0 FD | 	call	#_convertstring
0adbc     A7 FA 61 FC | 	wrlong	result1, fp
0adc0     08 4E 05 F1 | 	add	fp, #8
0adc4     A7 3E 68 FC | 	wrlong	#31, fp
0adc8     08 4E 85 F1 | 	sub	fp, #8
0adcc                 | LR__0923
0adcc                 | ' if t1.result_type=result_string then
0adcc     08 4E 05 F1 | 	add	fp, #8
0add0     A7 22 02 FB | 	rdlong	local03, fp
0add4     08 4E 85 F1 | 	sub	fp, #8
0add8     1F 22 0E F2 | 	cmp	local03, #31 wz
0addc     DC 02 90 5D |  if_ne	jmp	#LR__0927
0ade0                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0ade0     A7 12 02 FB | 	rdlong	arg01, fp
0ade4     65 01 00 FF 
0ade8     F6 15 06 F6 | 	mov	arg02, ##@LR__4939
0adec     BC 22 B1 FD | 	call	#__system___string_cmp
0adf0     00 FA 0D F2 | 	cmp	result1, #0 wz
0adf4     7B 00 00 AF 
0adf8     94 E4 05 A1 |  if_e	add	objptr, ##63124
0adfc     F2 22 02 AB |  if_e	rdlong	local03, objptr
0ae00     A7 22 62 AC |  if_e	wrlong	local03, fp
0ae04     7B 00 00 AF 
0ae08     94 E4 85 A1 |  if_e	sub	objptr, ##63124
0ae0c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0ae10     7B 00 00 5F 
0ae14     94 E4 05 51 |  if_ne	add	objptr, ##63124
0ae18     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0ae1c     7B 00 00 5F 
0ae20     94 E4 85 51 |  if_ne	sub	objptr, ##63124
0ae24                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0ae24     09 12 06 F6 | 	mov	arg01, #9
0ae28     1C 72 B1 FD | 	call	#__system__close
0ae2c     09 22 06 F6 | 	mov	local03, #9
0ae30     72 00 00 FF 
0ae34     84 E4 05 F1 | 	add	objptr, ##58500
0ae38     F2 12 02 FB | 	rdlong	arg01, objptr
0ae3c     72 00 00 FF 
0ae40     84 E4 85 F1 | 	sub	objptr, ##58500
0ae44     65 01 00 FF 
0ae48     F7 15 06 F6 | 	mov	arg02, ##@LR__4940
0ae4c     90 22 B1 FD | 	call	#__system___string_concat
0ae50     FD 12 02 F6 | 	mov	arg01, result1
0ae54     A7 14 02 FB | 	rdlong	arg02, fp
0ae58     84 22 B1 FD | 	call	#__system___string_concat
0ae5c     FD 14 02 F6 | 	mov	arg02, result1
0ae60     11 13 02 F6 | 	mov	arg01, local03
0ae64     0D 16 06 F6 | 	mov	arg03, #13
0ae68     18 2E B1 FD | 	call	#__system___basic_open_string
0ae6c     01 00 00 FF 
0ae70     0C 4E 05 F1 | 	add	fp, ##524
0ae74     A7 0A 68 FC | 	wrlong	#5, fp
0ae78     6A 00 00 FF 
0ae7c     74 E4 05 F1 | 	add	objptr, ##54388
0ae80     F2 22 02 FB | 	rdlong	local03, objptr
0ae84     6A 00 00 FF 
0ae88     74 E4 85 F1 | 	sub	objptr, ##54388
0ae8c     10 4E 05 F1 | 	add	fp, #16
0ae90     A7 22 62 FC | 	wrlong	local03, fp
0ae94     01 00 00 FF 
0ae98     1C 4E 85 F1 | 	sub	fp, ##540
0ae9c                 | ' '  put #9,1,fileheader,1
0ae9c                 | '   i=5
0ae9c                 | '   saveptr=programstart
0ae9c                 | '   do
0ae9c                 | LR__0924
0ae9c     01 00 00 FF 
0aea0     20 4E 05 F1 | 	add	fp, ##544
0aea4     A7 12 02 F6 | 	mov	arg01, fp
0aea8     04 4E 85 F1 | 	sub	fp, #4
0aeac     A7 14 02 FB | 	rdlong	arg02, fp
0aeb0     01 00 00 FF 
0aeb4     1C 4E 85 F1 | 	sub	fp, ##540
0aeb8     18 16 06 F6 | 	mov	arg03, #24
0aebc     0B 00 00 FF 
0aec0     CC E4 05 F1 | 	add	objptr, ##5836
0aec4     B8 15 B1 FD | 	call	#_psram_spin2_read1
0aec8     01 00 00 FF 
0aecc     38 4E 05 F1 | 	add	fp, ##568
0aed0     A7 12 02 F6 | 	mov	arg01, fp
0aed4     10 4E 85 F1 | 	sub	fp, #16
0aed8     A7 14 02 FB | 	rdlong	arg02, fp
0aedc     04 4E 05 F1 | 	add	fp, #4
0aee0     A7 16 02 FB | 	rdlong	arg03, fp
0aee4     01 00 00 FF 
0aee8     2C 4E 85 F1 | 	sub	fp, ##556
0aeec     90 15 B1 FD | 	call	#_psram_spin2_read1
0aef0     0B 00 00 FF 
0aef4     CC E4 85 F1 | 	sub	objptr, ##5836
0aef8     65 01 00 FF 
0aefc     F9 23 06 F6 | 	mov	local03, ##@LR__4941
0af00     01 00 00 FF 
0af04     B8 4E 05 F1 | 	add	fp, ##696
0af08     A7 22 62 FC | 	wrlong	local03, fp
0af0c                 | '     psram.read1(varptr(header(0)),saveptr,24)
0af0c                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0af0c                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0af0c     AC 4E 85 F1 | 	sub	fp, #172
0af10     A7 02 68 FC | 	wrlong	#1, fp
0af14     20 4E 05 F1 | 	add	fp, #32
0af18     A7 24 02 FB | 	rdlong	local04, fp
0af1c     01 00 00 FF 
0af20     2C 4E 85 F1 | 	sub	fp, ##556
0af24     01 24 06 F1 | 	add	local04, #1
0af28                 | LR__0925
0af28     01 00 00 FF 
0af2c     0C 4E 05 F1 | 	add	fp, ##524
0af30     A7 22 02 FB | 	rdlong	local03, fp
0af34     01 00 00 FF 
0af38     0C 4E 85 F1 | 	sub	fp, ##524
0af3c     12 23 52 F2 | 	cmps	local03, local04 wc
0af40     64 00 90 3D |  if_ae	jmp	#LR__0926
0af44     01 00 00 FF 
0af48     B8 4E 05 F1 | 	add	fp, ##696
0af4c     A7 1E 02 FB | 	rdlong	local01, fp
0af50     AC 4E 85 F1 | 	sub	fp, #172
0af54     A7 22 02 FB | 	rdlong	local03, fp
0af58     01 22 86 F1 | 	sub	local03, #1
0af5c     2C 4E 05 F1 | 	add	fp, #44
0af60     A7 22 02 F1 | 	add	local03, fp
0af64     11 13 C2 FA | 	rdbyte	arg01, local03
0af68     01 00 00 FF 
0af6c     38 4E 85 F1 | 	sub	fp, ##568
0af70     18 43 B1 FD | 	call	#__system__Chr_S
0af74     FD 14 02 F6 | 	mov	arg02, result1
0af78     0F 13 02 F6 | 	mov	arg01, local01
0af7c     60 21 B1 FD | 	call	#__system___string_concat
0af80     01 00 00 FF 
0af84     B8 4E 05 F1 | 	add	fp, ##696
0af88     A7 FA 61 FC | 	wrlong	result1, fp
0af8c     AC 4E 85 F1 | 	sub	fp, #172
0af90     A7 22 02 FB | 	rdlong	local03, fp
0af94     01 22 06 F1 | 	add	local03, #1
0af98     A7 22 62 FC | 	wrlong	local03, fp
0af9c     01 00 00 FF 
0afa0     0C 4E 85 F1 | 	sub	fp, ##524
0afa4     80 FF 9F FD | 	jmp	#LR__0925
0afa8                 | LR__0926
0afa8                 | '  '   put #9,i,header(3),1 : i+=4
0afa8                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0afa8                 | '      print #9, saveline$
0afa8     09 12 06 F6 | 	mov	arg01, #9
0afac     64 7A B1 FD | 	call	#__system___getiolock_0474
0afb0     FD 12 02 F6 | 	mov	arg01, result1
0afb4     CC 20 B1 FD | 	call	#__system___lockmem
0afb8     01 00 00 FF 
0afbc     B8 4E 05 F1 | 	add	fp, ##696
0afc0     A7 14 02 FB | 	rdlong	arg02, fp
0afc4     01 00 00 FF 
0afc8     B8 4E 85 F1 | 	sub	fp, ##696
0afcc     09 12 06 F6 | 	mov	arg01, #9
0afd0     00 16 06 F6 | 	mov	arg03, #0
0afd4     B0 2D B1 FD | 	call	#__system___basic_print_string
0afd8     09 12 06 F6 | 	mov	arg01, #9
0afdc     0A 14 06 F6 | 	mov	arg02, #10
0afe0     00 16 06 F6 | 	mov	arg03, #0
0afe4     48 2D B1 FD | 	call	#__system___basic_print_char
0afe8     09 12 06 F6 | 	mov	arg01, #9
0afec     24 7A B1 FD | 	call	#__system___getiolock_0474
0aff0     FD 00 68 FC | 	wrlong	#0, result1
0aff4     01 00 00 FF 
0aff8     34 4E 05 F1 | 	add	fp, ##564
0affc     A7 22 02 FB | 	rdlong	local03, fp
0b000     18 4E 85 F1 | 	sub	fp, #24
0b004     A7 22 62 FC | 	wrlong	local03, fp
0b008     18 4E 05 F1 | 	add	fp, #24
0b00c     A7 22 02 FB | 	rdlong	local03, fp
0b010     01 00 00 FF 
0b014     34 4E 85 F1 | 	sub	fp, ##564
0b018     FF FF 3F FF 
0b01c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0b020     78 FE 9F 5D |  if_ne	jmp	#LR__0924
0b024                 | '   close #9  
0b024     09 12 06 F6 | 	mov	arg01, #9
0b028     1C 70 B1 FD | 	call	#__system__close
0b02c                 | '   print "Saved as ";currentdir$+"/"+loadname
0b02c     00 12 06 F6 | 	mov	arg01, #0
0b030     E0 79 B1 FD | 	call	#__system___getiolock_0474
0b034     FD 12 02 F6 | 	mov	arg01, result1
0b038     48 20 B1 FD | 	call	#__system___lockmem
0b03c     65 01 00 FF 
0b040     FA 15 06 F6 | 	mov	arg02, ##@LR__4942
0b044     00 12 06 F6 | 	mov	arg01, #0
0b048     00 16 06 F6 | 	mov	arg03, #0
0b04c     38 2D B1 FD | 	call	#__system___basic_print_string
0b050     00 20 06 F6 | 	mov	local02, #0
0b054     72 00 00 FF 
0b058     84 E4 05 F1 | 	add	objptr, ##58500
0b05c     F2 12 02 FB | 	rdlong	arg01, objptr
0b060     72 00 00 FF 
0b064     84 E4 85 F1 | 	sub	objptr, ##58500
0b068     66 01 00 FF 
0b06c     04 14 06 F6 | 	mov	arg02, ##@LR__4943
0b070     6C 20 B1 FD | 	call	#__system___string_concat
0b074     FD 12 02 F6 | 	mov	arg01, result1
0b078     7B 00 00 FF 
0b07c     94 E4 05 F1 | 	add	objptr, ##63124
0b080     F2 14 02 FB | 	rdlong	arg02, objptr
0b084     7B 00 00 FF 
0b088     94 E4 85 F1 | 	sub	objptr, ##63124
0b08c     50 20 B1 FD | 	call	#__system___string_concat
0b090     FD 14 02 F6 | 	mov	arg02, result1
0b094     10 13 02 F6 | 	mov	arg01, local02
0b098     00 16 06 F6 | 	mov	arg03, #0
0b09c     E8 2C B1 FD | 	call	#__system___basic_print_string
0b0a0     00 12 06 F6 | 	mov	arg01, #0
0b0a4     0A 14 06 F6 | 	mov	arg02, #10
0b0a8     00 16 06 F6 | 	mov	arg03, #0
0b0ac     80 2C B1 FD | 	call	#__system___basic_print_char
0b0b0     00 12 06 F6 | 	mov	arg01, #0
0b0b4     5C 79 B1 FD | 	call	#__system___getiolock_0474
0b0b8     FD 00 68 FC | 	wrlong	#0, result1
0b0bc                 | LR__0927
0b0bc                 | LR__0928
0b0bc     A7 F0 03 F6 | 	mov	ptra, fp
0b0c0     B2 00 A0 FD | 	call	#popregs_
0b0c4                 | _do_save_ret
0b0c4     2D 00 64 FD | 	ret
0b0c8                 | 
0b0c8                 | ' 
0b0c8                 | ' '----------------- Load the program
0b0c8                 | ' 'lo todo: errors while loading
0b0c8                 | ' sub do_load
0b0c8                 | _do_load
0b0c8     01 4A 05 F6 | 	mov	COUNT_, #1
0b0cc     A8 00 A0 FD | 	call	#pushregs_
0b0d0     A8 F0 07 F1 | 	add	ptra, #168
0b0d4     6A 00 00 FF 
0b0d8     70 E4 05 F1 | 	add	objptr, ##54384
0b0dc     F2 14 02 FB | 	rdlong	arg02, objptr
0b0e0     0A 13 02 F6 | 	mov	arg01, arg02
0b0e4     01 12 66 F0 | 	shl	arg01, #1
0b0e8     0A 13 02 F1 | 	add	arg01, arg02
0b0ec     02 12 66 F0 | 	shl	arg01, #2
0b0f0     03 00 00 FF 
0b0f4     04 E4 85 F1 | 	sub	objptr, ##1540
0b0f8     F2 12 02 F1 | 	add	arg01, objptr
0b0fc     09 15 02 FB | 	rdlong	arg02, arg01
0b100     18 4E 05 F1 | 	add	fp, #24
0b104     A7 14 62 FC | 	wrlong	arg02, fp
0b108     8C 4E 05 F1 | 	add	fp, #140
0b10c     A7 12 02 F6 | 	mov	arg01, fp
0b110     67 00 00 FF 
0b114     6C E4 85 F1 | 	sub	objptr, ##52844
0b118     80 4E 85 F1 | 	sub	fp, #128
0b11c     09 4F 61 FC | 	wrlong	fp, arg01
0b120                 | ' numpar=compiledline(lineptr_e).result.uresult
0b120                 | ' lpoke varptr(line2$),varptr(line2)
0b120                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0b120     0C 4E 85 F1 | 	sub	fp, #12
0b124     A7 1E 02 FB | 	rdlong	local01, fp
0b128     18 4E 85 F1 | 	sub	fp, #24
0b12c     01 1E 56 F2 | 	cmps	local01, #1 wc
0b130     20 00 90 CD |  if_b	jmp	#LR__0930
0b134     74 F0 BF FD | 	call	#_pop
0b138     A7 FA 61 FC | 	wrlong	result1, fp
0b13c     04 4E 05 F1 | 	add	fp, #4
0b140     A7 FC 61 FC | 	wrlong	result2, fp
0b144     04 4E 05 F1 | 	add	fp, #4
0b148     A7 FE 61 FC | 	wrlong	result3, fp
0b14c     08 4E 85 F1 | 	sub	fp, #8
0b150     24 00 90 FD | 	jmp	#LR__0931
0b154                 | LR__0930
0b154     7B 00 00 FF 
0b158     94 E4 05 F1 | 	add	objptr, ##63124
0b15c     F2 1E 02 FB | 	rdlong	local01, objptr
0b160     7B 00 00 FF 
0b164     94 E4 85 F1 | 	sub	objptr, ##63124
0b168     A7 1E 62 FC | 	wrlong	local01, fp
0b16c     08 4E 05 F1 | 	add	fp, #8
0b170     A7 3E 68 FC | 	wrlong	#31, fp
0b174     08 4E 85 F1 | 	sub	fp, #8
0b178                 | LR__0931
0b178                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0b178                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0b178     08 4E 05 F1 | 	add	fp, #8
0b17c     A7 1E 02 FB | 	rdlong	local01, fp
0b180     08 4E 85 F1 | 	sub	fp, #8
0b184     2B 1E 0E F2 | 	cmp	local01, #43 wz
0b188     18 00 90 5D |  if_ne	jmp	#LR__0932
0b18c     A7 12 02 FB | 	rdlong	arg01, fp
0b190     C0 32 B0 FD | 	call	#_convertstring
0b194     A7 FA 61 FC | 	wrlong	result1, fp
0b198     08 4E 05 F1 | 	add	fp, #8
0b19c     A7 3E 68 FC | 	wrlong	#31, fp
0b1a0     08 4E 85 F1 | 	sub	fp, #8
0b1a4                 | LR__0932
0b1a4                 | ' if t1.result_type=result_string then
0b1a4     08 4E 05 F1 | 	add	fp, #8
0b1a8     A7 1E 02 FB | 	rdlong	local01, fp
0b1ac     08 4E 85 F1 | 	sub	fp, #8
0b1b0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b1b4     20 04 90 5D |  if_ne	jmp	#LR__0940
0b1b8     F4 2C B0 FD | 	call	#_do_new
0b1bc                 | '   do_new
0b1bc                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0b1bc     A7 12 02 FB | 	rdlong	arg01, fp
0b1c0     66 01 00 FF 
0b1c4     06 14 06 F6 | 	mov	arg02, ##@LR__4944
0b1c8     E0 1E B1 FD | 	call	#__system___string_cmp
0b1cc     00 FA 0D F2 | 	cmp	result1, #0 wz
0b1d0     7B 00 00 AF 
0b1d4     94 E4 05 A1 |  if_e	add	objptr, ##63124
0b1d8     F2 1E 02 AB |  if_e	rdlong	local01, objptr
0b1dc     A7 1E 62 AC |  if_e	wrlong	local01, fp
0b1e0     7B 00 00 AF 
0b1e4     94 E4 85 A1 |  if_e	sub	objptr, ##63124
0b1e8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b1ec     7B 00 00 5F 
0b1f0     94 E4 05 51 |  if_ne	add	objptr, ##63124
0b1f4     F2 1E 62 5C |  if_ne	wrlong	local01, objptr
0b1f8     7B 00 00 5F 
0b1fc     94 E4 85 51 |  if_ne	sub	objptr, ##63124
0b200                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0b200     09 12 06 F6 | 	mov	arg01, #9
0b204     40 6E B1 FD | 	call	#__system__close
0b208     09 1E 06 F6 | 	mov	local01, #9
0b20c     72 00 00 FF 
0b210     84 E4 05 F1 | 	add	objptr, ##58500
0b214     F2 12 02 FB | 	rdlong	arg01, objptr
0b218     72 00 00 FF 
0b21c     84 E4 85 F1 | 	sub	objptr, ##58500
0b220     66 01 00 FF 
0b224     07 14 06 F6 | 	mov	arg02, ##@LR__4945
0b228     B4 1E B1 FD | 	call	#__system___string_concat
0b22c     FD 12 02 F6 | 	mov	arg01, result1
0b230     A7 14 02 FB | 	rdlong	arg02, fp
0b234     A8 1E B1 FD | 	call	#__system___string_concat
0b238     FD 14 02 F6 | 	mov	arg02, result1
0b23c     0F 13 02 F6 | 	mov	arg01, local01
0b240     00 16 06 F6 | 	mov	arg03, #0
0b244     3C 2A B1 FD | 	call	#__system___basic_open_string
0b248     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b24c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b250     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b254     10 4E 05 F1 | 	add	fp, #16
0b258     A7 FA 61 FC | 	wrlong	result1, fp
0b25c                 | '   r=geterr() 
0b25c                 | '   if r then 
0b25c     10 4E 85 F1 | 	sub	fp, #16
0b260     48 01 90 AD |  if_e	jmp	#LR__0934
0b264                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0b264     09 12 06 F6 | 	mov	arg01, #9
0b268     DC 6D B1 FD | 	call	#__system__close
0b26c     09 1E 06 F6 | 	mov	local01, #9
0b270     72 00 00 FF 
0b274     84 E4 05 F1 | 	add	objptr, ##58500
0b278     F2 12 02 FB | 	rdlong	arg01, objptr
0b27c     72 00 00 FF 
0b280     84 E4 85 F1 | 	sub	objptr, ##58500
0b284     66 01 00 FF 
0b288     09 14 06 F6 | 	mov	arg02, ##@LR__4946
0b28c     50 1E B1 FD | 	call	#__system___string_concat
0b290     FD 12 02 F6 | 	mov	arg01, result1
0b294     A7 14 02 FB | 	rdlong	arg02, fp
0b298     44 1E B1 FD | 	call	#__system___string_concat
0b29c     FD 12 02 F6 | 	mov	arg01, result1
0b2a0     66 01 00 FF 
0b2a4     0B 14 06 F6 | 	mov	arg02, ##@LR__4947
0b2a8     34 1E B1 FD | 	call	#__system___string_concat
0b2ac     FD 14 02 F6 | 	mov	arg02, result1
0b2b0     0F 13 02 F6 | 	mov	arg01, local01
0b2b4     00 16 06 F6 | 	mov	arg03, #0
0b2b8     C8 29 B1 FD | 	call	#__system___basic_open_string
0b2bc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b2c0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b2c4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b2c8     10 4E 05 F1 | 	add	fp, #16
0b2cc     A7 FA 61 FC | 	wrlong	result1, fp
0b2d0                 | '     r=geterr() 
0b2d0                 | '     if r then 
0b2d0     10 4E 85 F1 | 	sub	fp, #16
0b2d4     A0 00 90 AD |  if_e	jmp	#LR__0933
0b2d8                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0b2d8     00 12 06 F6 | 	mov	arg01, #0
0b2dc     34 77 B1 FD | 	call	#__system___getiolock_0474
0b2e0     FD 12 02 F6 | 	mov	arg01, result1
0b2e4     9C 1D B1 FD | 	call	#__system___lockmem
0b2e8     66 01 00 FF 
0b2ec     10 14 06 F6 | 	mov	arg02, ##@LR__4948
0b2f0     00 12 06 F6 | 	mov	arg01, #0
0b2f4     00 16 06 F6 | 	mov	arg03, #0
0b2f8     8C 2A B1 FD | 	call	#__system___basic_print_string
0b2fc     10 4E 05 F1 | 	add	fp, #16
0b300     A7 14 02 FB | 	rdlong	arg02, fp
0b304     10 4E 85 F1 | 	sub	fp, #16
0b308     00 12 06 F6 | 	mov	arg01, #0
0b30c     00 16 06 F6 | 	mov	arg03, #0
0b310     0A 18 06 F6 | 	mov	arg04, #10
0b314     B4 2A B1 FD | 	call	#__system___basic_print_integer
0b318     66 01 00 FF 
0b31c     1E 14 06 F6 | 	mov	arg02, ##@LR__4949
0b320     00 12 06 F6 | 	mov	arg01, #0
0b324     00 16 06 F6 | 	mov	arg03, #0
0b328     5C 2A B1 FD | 	call	#__system___basic_print_string
0b32c     00 1E 06 F6 | 	mov	local01, #0
0b330     10 4E 05 F1 | 	add	fp, #16
0b334     A7 12 02 FB | 	rdlong	arg01, fp
0b338     10 4E 85 F1 | 	sub	fp, #16
0b33c     D4 43 B1 FD | 	call	#__system___strerror
0b340     FD 14 02 F6 | 	mov	arg02, result1
0b344     0F 13 02 F6 | 	mov	arg01, local01
0b348     00 16 06 F6 | 	mov	arg03, #0
0b34c     38 2A B1 FD | 	call	#__system___basic_print_string
0b350     00 12 06 F6 | 	mov	arg01, #0
0b354     0A 14 06 F6 | 	mov	arg02, #10
0b358     00 16 06 F6 | 	mov	arg03, #0
0b35c     D0 29 B1 FD | 	call	#__system___basic_print_char
0b360     00 12 06 F6 | 	mov	arg01, #0
0b364     AC 76 B1 FD | 	call	#__system___getiolock_0474
0b368     FD 00 68 FC | 	wrlong	#0, result1
0b36c     09 12 06 F6 | 	mov	arg01, #9
0b370     D4 6C B1 FD | 	call	#__system__close
0b374     F8 02 90 FD | 	jmp	#LR__0942
0b378                 | LR__0933
0b378     7B 00 00 FF 
0b37c     94 E4 05 F1 | 	add	objptr, ##63124
0b380     F2 12 02 FB | 	rdlong	arg01, objptr
0b384     7B 00 00 FF 
0b388     94 E4 85 F1 | 	sub	objptr, ##63124
0b38c     66 01 00 FF 
0b390     21 14 06 F6 | 	mov	arg02, ##@LR__4950
0b394     48 1D B1 FD | 	call	#__system___string_concat
0b398     7B 00 00 FF 
0b39c     94 E4 05 F1 | 	add	objptr, ##63124
0b3a0     F2 FA 61 FC | 	wrlong	result1, objptr
0b3a4     7B 00 00 FF 
0b3a8     94 E4 85 F1 | 	sub	objptr, ##63124
0b3ac                 | LR__0934
0b3ac     0C 4E 05 F1 | 	add	fp, #12
0b3b0     A7 0A 68 FC | 	wrlong	#5, fp
0b3b4                 | '   i=5
0b3b4                 | '   get #9,1,header,1   
0b3b4     10 4E 05 F1 | 	add	fp, #16
0b3b8     A7 16 02 F6 | 	mov	arg03, fp
0b3bc     1C 4E 85 F1 | 	sub	fp, #28
0b3c0     09 12 06 F6 | 	mov	arg01, #9
0b3c4     01 14 06 F6 | 	mov	arg02, #1
0b3c8     01 18 06 F6 | 	mov	arg04, #1
0b3cc     04 1A 06 F6 | 	mov	arg05, #4
0b3d0     C4 2A B1 FD | 	call	#__system___basic_get
0b3d4                 | '   
0b3d4                 | '   if header<>$0D616272 then 
0b3d4     1C 4E 05 F1 | 	add	fp, #28
0b3d8     A7 1E 02 FB | 	rdlong	local01, fp
0b3dc     1C 4E 85 F1 | 	sub	fp, #28
0b3e0     B1 B0 06 FF 
0b3e4     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0b3e8     00 01 90 AD |  if_e	jmp	#LR__0937
0b3ec                 | '     close #9: open currentdir$+"/"+loadname for input as #9
0b3ec     09 12 06 F6 | 	mov	arg01, #9
0b3f0     54 6C B1 FD | 	call	#__system__close
0b3f4     09 1E 06 F6 | 	mov	local01, #9
0b3f8     72 00 00 FF 
0b3fc     84 E4 05 F1 | 	add	objptr, ##58500
0b400     F2 12 02 FB | 	rdlong	arg01, objptr
0b404     72 00 00 FF 
0b408     84 E4 85 F1 | 	sub	objptr, ##58500
0b40c     66 01 00 FF 
0b410     26 14 06 F6 | 	mov	arg02, ##@LR__4951
0b414     C8 1C B1 FD | 	call	#__system___string_concat
0b418     FD 12 02 F6 | 	mov	arg01, result1
0b41c     7B 00 00 FF 
0b420     94 E4 05 F1 | 	add	objptr, ##63124
0b424     F2 14 02 FB | 	rdlong	arg02, objptr
0b428     7B 00 00 FF 
0b42c     94 E4 85 F1 | 	sub	objptr, ##63124
0b430     AC 1C B1 FD | 	call	#__system___string_concat
0b434     FD 14 02 F6 | 	mov	arg02, result1
0b438     0F 13 02 F6 | 	mov	arg01, local01
0b43c     00 16 06 F6 | 	mov	arg03, #0
0b440     40 28 B1 FD | 	call	#__system___basic_open_string
0b444                 | '     do
0b444                 | LR__0935
0b444     09 12 06 F6 | 	mov	arg01, #9
0b448     44 1E B1 FD | 	call	#__system___basic_read_line
0b44c     57 00 00 FF 
0b450     0C E4 05 F1 | 	add	objptr, ##44556
0b454     F2 FA 61 FC | 	wrlong	result1, objptr
0b458                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0b458     57 00 00 FF 
0b45c     0C E4 85 F1 | 	sub	objptr, ##44556
0b460     FD 12 02 F6 | 	mov	arg01, result1
0b464     01 14 06 F6 | 	mov	arg02, #1
0b468     5C 3C B1 FD | 	call	#__system__Left_S
0b46c     FD 12 02 F6 | 	mov	arg01, result1
0b470     66 01 00 FF 
0b474     28 14 06 F6 | 	mov	arg02, ##@LR__4952
0b478     30 1C B1 FD | 	call	#__system___string_cmp
0b47c     00 FA 55 F2 | 	cmps	result1, #0 wc
0b480     34 00 90 CD |  if_b	jmp	#LR__0936
0b484     57 00 00 FF 
0b488     0C E4 05 F1 | 	add	objptr, ##44556
0b48c     F2 12 02 FB | 	rdlong	arg01, objptr
0b490     57 00 00 FF 
0b494     0C E4 85 F1 | 	sub	objptr, ##44556
0b498     01 14 06 F6 | 	mov	arg02, #1
0b49c     28 3C B1 FD | 	call	#__system__Left_S
0b4a0     FD 12 02 F6 | 	mov	arg01, result1
0b4a4     66 01 00 FF 
0b4a8     2A 14 06 F6 | 	mov	arg02, ##@LR__4953
0b4ac     FC 1B B1 FD | 	call	#__system___string_cmp
0b4b0     01 FA 55 F2 | 	cmps	result1, #1 wc
0b4b4     64 55 BF CD |  if_b	call	#_interpret
0b4b8                 | LR__0936
0b4b8     57 00 00 FF 
0b4bc     0C E4 05 F1 | 	add	objptr, ##44556
0b4c0     F2 12 02 FB | 	rdlong	arg01, objptr
0b4c4     57 00 00 FF 
0b4c8     0C E4 85 F1 | 	sub	objptr, ##44556
0b4cc     66 01 00 FF 
0b4d0     2C 14 06 F6 | 	mov	arg02, ##@LR__4954
0b4d4     D4 1B B1 FD | 	call	#__system___string_cmp
0b4d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0b4dc     64 FF 9F 5D |  if_ne	jmp	#LR__0935
0b4e0                 | '     close #9
0b4e0     09 12 06 F6 | 	mov	arg01, #9
0b4e4     60 6B B1 FD | 	call	#__system__close
0b4e8     F4 00 90 FD | 	jmp	#LR__0941
0b4ec                 | LR__0937
0b4ec                 | '   'printerror(26) : close #9 : return
0b4ec                 | '     do
0b4ec                 | LR__0938
0b4ec                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0b4ec     0C 4E 05 F1 | 	add	fp, #12
0b4f0     A7 14 02 FB | 	rdlong	arg02, fp
0b4f4     14 4E 05 F1 | 	add	fp, #20
0b4f8     A7 16 02 F6 | 	mov	arg03, fp
0b4fc     20 4E 85 F1 | 	sub	fp, #32
0b500     09 12 06 F6 | 	mov	arg01, #9
0b504     01 18 06 F6 | 	mov	arg04, #1
0b508     04 1A 06 F6 | 	mov	arg05, #4
0b50c     88 29 B1 FD | 	call	#__system___basic_get
0b510     14 4E 05 F1 | 	add	fp, #20
0b514     A7 FA 61 FC | 	wrlong	result1, fp
0b518     08 4E 85 F1 | 	sub	fp, #8
0b51c     A7 1E 02 FB | 	rdlong	local01, fp
0b520     04 1E 06 F1 | 	add	local01, #4
0b524     A7 1E 62 FC | 	wrlong	local01, fp
0b528     14 4E 05 F1 | 	add	fp, #20
0b52c     A7 1E 02 FB | 	rdlong	local01, fp
0b530     04 4E 05 F1 | 	add	fp, #4
0b534     A7 1E 02 F1 | 	add	local01, fp
0b538     0F 01 48 FC | 	wrbyte	#0, local01
0b53c                 | '       if amount=1 then  
0b53c     10 4E 85 F1 | 	sub	fp, #16
0b540     A7 1E 02 FB | 	rdlong	local01, fp
0b544     14 4E 85 F1 | 	sub	fp, #20
0b548     01 1E 0E F2 | 	cmp	local01, #1 wz
0b54c     68 00 90 5D |  if_ne	jmp	#LR__0939
0b550                 | '         get #9,i,line2(0),linelength : i+=linelength
0b550     0C 4E 05 F1 | 	add	fp, #12
0b554     A7 14 02 FB | 	rdlong	arg02, fp
0b558     18 4E 05 F1 | 	add	fp, #24
0b55c     A7 16 02 F6 | 	mov	arg03, fp
0b560     04 4E 85 F1 | 	sub	fp, #4
0b564     A7 18 02 FB | 	rdlong	arg04, fp
0b568     20 4E 85 F1 | 	sub	fp, #32
0b56c     09 12 06 F6 | 	mov	arg01, #9
0b570     01 1A 06 F6 | 	mov	arg05, #1
0b574     20 29 B1 FD | 	call	#__system___basic_get
0b578     0C 4E 05 F1 | 	add	fp, #12
0b57c     A7 1E 02 FB | 	rdlong	local01, fp
0b580     14 4E 05 F1 | 	add	fp, #20
0b584     A7 1A 02 FB | 	rdlong	arg05, fp
0b588     0D 1F 02 F1 | 	add	local01, arg05
0b58c     14 4E 85 F1 | 	sub	fp, #20
0b590     A7 1E 62 FC | 	wrlong	local01, fp
0b594     98 4E 05 F1 | 	add	fp, #152
0b598     A7 1E 02 FB | 	rdlong	local01, fp
0b59c     A4 4E 85 F1 | 	sub	fp, #164
0b5a0     57 00 00 FF 
0b5a4     0C E4 05 F1 | 	add	objptr, ##44556
0b5a8     F2 1E 62 FC | 	wrlong	local01, objptr
0b5ac     57 00 00 FF 
0b5b0     0C E4 85 F1 | 	sub	objptr, ##44556
0b5b4     64 54 BF FD | 	call	#_interpret
0b5b8                 | LR__0939
0b5b8     14 4E 05 F1 | 	add	fp, #20
0b5bc     A7 1E 02 FB | 	rdlong	local01, fp
0b5c0     14 4E 85 F1 | 	sub	fp, #20
0b5c4     01 1E 56 F2 | 	cmps	local01, #1 wc
0b5c8     20 FF 9F 3D |  if_ae	jmp	#LR__0938
0b5cc                 | '     close #9 
0b5cc     09 12 06 F6 | 	mov	arg01, #9
0b5d0     74 6A B1 FD | 	call	#__system__close
0b5d4     08 00 90 FD | 	jmp	#LR__0941
0b5d8                 | LR__0940
0b5d8     1E 12 06 F6 | 	mov	arg01, #30
0b5dc     48 DA B0 FD | 	call	#_printerror
0b5e0                 | LR__0941
0b5e0                 | '   print "Loaded ";currentdir$+"/"+loadname
0b5e0     00 12 06 F6 | 	mov	arg01, #0
0b5e4     2C 74 B1 FD | 	call	#__system___getiolock_0474
0b5e8     FD 12 02 F6 | 	mov	arg01, result1
0b5ec     94 1A B1 FD | 	call	#__system___lockmem
0b5f0     66 01 00 FF 
0b5f4     2D 14 06 F6 | 	mov	arg02, ##@LR__4955
0b5f8     00 12 06 F6 | 	mov	arg01, #0
0b5fc     00 16 06 F6 | 	mov	arg03, #0
0b600     84 27 B1 FD | 	call	#__system___basic_print_string
0b604     00 1E 06 F6 | 	mov	local01, #0
0b608     72 00 00 FF 
0b60c     84 E4 05 F1 | 	add	objptr, ##58500
0b610     F2 12 02 FB | 	rdlong	arg01, objptr
0b614     72 00 00 FF 
0b618     84 E4 85 F1 | 	sub	objptr, ##58500
0b61c     66 01 00 FF 
0b620     35 14 06 F6 | 	mov	arg02, ##@LR__4956
0b624     B8 1A B1 FD | 	call	#__system___string_concat
0b628     FD 12 02 F6 | 	mov	arg01, result1
0b62c     7B 00 00 FF 
0b630     94 E4 05 F1 | 	add	objptr, ##63124
0b634     F2 14 02 FB | 	rdlong	arg02, objptr
0b638     7B 00 00 FF 
0b63c     94 E4 85 F1 | 	sub	objptr, ##63124
0b640     9C 1A B1 FD | 	call	#__system___string_concat
0b644     FD 14 02 F6 | 	mov	arg02, result1
0b648     0F 13 02 F6 | 	mov	arg01, local01
0b64c     00 16 06 F6 | 	mov	arg03, #0
0b650     34 27 B1 FD | 	call	#__system___basic_print_string
0b654     00 12 06 F6 | 	mov	arg01, #0
0b658     0A 14 06 F6 | 	mov	arg02, #10
0b65c     00 16 06 F6 | 	mov	arg03, #0
0b660     CC 26 B1 FD | 	call	#__system___basic_print_char
0b664     00 12 06 F6 | 	mov	arg01, #0
0b668     A8 73 B1 FD | 	call	#__system___getiolock_0474
0b66c     FD 00 68 FC | 	wrlong	#0, result1
0b670                 | LR__0942
0b670     A7 F0 03 F6 | 	mov	ptra, fp
0b674     B2 00 A0 FD | 	call	#popregs_
0b678                 | _do_load_ret
0b678     2D 00 64 FD | 	ret
0b67c                 | 
0b67c                 | ' 
0b67c                 | ' '----------------- Run the program 
0b67c                 | ' 
0b67c                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0b67c                 | ' 
0b67c                 | ' sub do_run
0b67c                 | _do_run
0b67c     01 4A 05 F6 | 	mov	COUNT_, #1
0b680     A8 00 A0 FD | 	call	#pushregs_
0b684     6A 00 00 FF 
0b688     70 E4 05 F1 | 	add	objptr, ##54384
0b68c     F2 1C 02 FB | 	rdlong	arg06, objptr
0b690     0E 19 02 F6 | 	mov	arg04, arg06
0b694     01 18 66 F0 | 	shl	arg04, #1
0b698     0E 19 02 F1 | 	add	arg04, arg06
0b69c     02 18 66 F0 | 	shl	arg04, #2
0b6a0     03 00 00 FF 
0b6a4     04 E4 85 F1 | 	sub	objptr, ##1540
0b6a8     F2 18 02 F1 | 	add	arg04, objptr
0b6ac     0C 1B 02 FB | 	rdlong	arg05, arg04
0b6b0                 | ' numpar=compiledline(lineptr_e).result.uresult
0b6b0                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0b6b0     01 1A 0E F2 | 	cmp	arg05, #1 wz
0b6b4     67 00 00 FF 
0b6b8     6C E4 85 F1 | 	sub	objptr, ##52844
0b6bc     08 FA BF AD |  if_e	call	#_do_load
0b6c0     6A 00 00 FF 
0b6c4     74 E4 05 F1 | 	add	objptr, ##54388
0b6c8     F2 1C 02 FB | 	rdlong	arg06, objptr
0b6cc     0F 00 00 FF 
0b6d0     2C E5 05 F1 | 	add	objptr, ##7980
0b6d4     F2 1C 62 FC | 	wrlong	arg06, objptr
0b6d8     04 E4 05 F1 | 	add	objptr, #4
0b6dc     F2 00 68 FC | 	wrlong	#0, objptr
0b6e0     04 E4 05 F1 | 	add	objptr, #4
0b6e4     FF FF FF FF 
0b6e8     F2 FE 6B FC | 	wrlong	##-1, objptr
0b6ec                 | ' if inrun>0 then 
0b6ec     04 E4 05 F1 | 	add	objptr, #4
0b6f0     F2 1C 02 FB | 	rdlong	arg06, objptr
0b6f4     79 00 00 FF 
0b6f8     AC E5 85 F1 | 	sub	objptr, ##62380
0b6fc     01 1C 16 F2 | 	cmp	arg06, #1 wc
0b700     30 00 90 CD |  if_b	jmp	#LR__0950
0b704     79 00 00 FF 
0b708     B0 E5 05 F1 | 	add	objptr, ##62384
0b70c     F2 12 02 F6 | 	mov	arg01, objptr
0b710     10 E4 85 F1 | 	sub	objptr, #16
0b714     F2 14 02 FB | 	rdlong	arg02, objptr
0b718     18 16 06 F6 | 	mov	arg03, #24
0b71c     6E 00 00 FF 
0b720     D4 E4 85 F1 | 	sub	objptr, ##56532
0b724     58 0D B1 FD | 	call	#_psram_spin2_read1
0b728     0B 00 00 FF 
0b72c     CC E4 85 F1 | 	sub	objptr, ##5836
0b730                 | '   psram.read1(varptr(runheader),runptr,24)  
0b730                 | '   return
0b730     C4 02 90 FD | 	jmp	#LR__0957
0b734                 | LR__0950
0b734     79 00 00 FF 
0b738     AC E5 05 F1 | 	add	objptr, ##62380
0b73c     F2 02 68 FC | 	wrlong	#1, objptr
0b740     04 E4 05 F1 | 	add	objptr, #4
0b744     F2 12 02 F6 | 	mov	arg01, objptr
0b748     10 E4 85 F1 | 	sub	objptr, #16
0b74c     F2 14 02 FB | 	rdlong	arg02, objptr
0b750     18 16 06 F6 | 	mov	arg03, #24
0b754     6E 00 00 FF 
0b758     D4 E4 85 F1 | 	sub	objptr, ##56532
0b75c     20 0D B1 FD | 	call	#_psram_spin2_read1
0b760                 | ' inrun=1
0b760                 | ' psram.read1(varptr(runheader),runptr,24) 
0b760                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0b760     6E 00 00 FF 
0b764     E4 E4 05 F1 | 	add	objptr, ##56548
0b768     F2 1E 02 FB | 	rdlong	local01, objptr
0b76c     79 00 00 FF 
0b770     B0 E5 85 F1 | 	sub	objptr, ##62384
0b774     FF FF 7F FF 
0b778     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0b77c     79 00 00 AF 
0b780     AC E5 05 A1 |  if_e	add	objptr, ##62380
0b784     F2 00 68 AC |  if_e	wrlong	#0, objptr
0b788     79 00 00 AF 
0b78c     AC E5 85 A1 |  if_e	sub	objptr, ##62380
0b790     64 02 90 AD |  if_e	jmp	#LR__0957
0b794                 | ' do 
0b794                 | LR__0951
0b794                 | '   if runptr<>oldrunptr then
0b794     79 00 00 FF 
0b798     A0 E5 05 F1 | 	add	objptr, ##62368
0b79c     F2 1E 02 FB | 	rdlong	local01, objptr
0b7a0     08 E4 05 F1 | 	add	objptr, #8
0b7a4     F2 1C 02 FB | 	rdlong	arg06, objptr
0b7a8     79 00 00 FF 
0b7ac     A8 E5 85 F1 | 	sub	objptr, ##62376
0b7b0     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0b7b4     CC 00 90 AD |  if_e	jmp	#LR__0952
0b7b8     79 00 00 FF 
0b7bc     B0 E5 05 F1 | 	add	objptr, ##62384
0b7c0     F2 12 02 F6 | 	mov	arg01, objptr
0b7c4     10 E4 85 F1 | 	sub	objptr, #16
0b7c8     F2 14 02 FB | 	rdlong	arg02, objptr
0b7cc     18 16 06 F6 | 	mov	arg03, #24
0b7d0     6E 00 00 FF 
0b7d4     D4 E4 85 F1 | 	sub	objptr, ##56532
0b7d8     A4 0C B1 FD | 	call	#_psram_spin2_read1
0b7dc     5B 00 00 FF 
0b7e0     A0 E5 05 F1 | 	add	objptr, ##47008
0b7e4     F2 12 02 F6 | 	mov	arg01, objptr
0b7e8     12 00 00 FF 
0b7ec     34 E5 05 F1 | 	add	objptr, ##9524
0b7f0     F2 14 02 FB | 	rdlong	arg02, objptr
0b7f4     14 00 00 FF 
0b7f8     4C E5 85 F1 | 	sub	objptr, ##10572
0b7fc     F2 1E 02 FB | 	rdlong	local01, objptr
0b800     01 1E 66 F0 | 	shl	local01, #1
0b804     0F 15 02 F1 | 	add	arg02, local01
0b808     14 00 00 FF 
0b80c     64 E5 05 F1 | 	add	objptr, ##10596
0b810     F2 16 02 FB | 	rdlong	arg03, objptr
0b814     18 E4 85 F1 | 	sub	objptr, #24
0b818     F2 1E 02 FB | 	rdlong	local01, objptr
0b81c     0F 17 82 F1 | 	sub	arg03, local01
0b820     6E 00 00 FF 
0b824     D4 E4 85 F1 | 	sub	objptr, ##56532
0b828     54 0C B1 FD | 	call	#_psram_spin2_read1
0b82c     6E 00 00 FF 
0b830     EC E4 05 F1 | 	add	objptr, ##56556
0b834     F2 1E 02 FB | 	rdlong	local01, objptr
0b838     18 E4 85 F1 | 	sub	objptr, #24
0b83c     F2 16 02 FB | 	rdlong	arg03, objptr
0b840     0B 1F 82 F1 | 	sub	local01, arg03
0b844     14 00 00 FF 
0b848     4C E5 85 F1 | 	sub	objptr, ##10572
0b84c     F2 16 02 FB | 	rdlong	arg03, objptr
0b850     0B 1F 12 FD | 	qdiv	local01, arg03
0b854     05 00 00 FF 
0b858     18 E4 05 F1 | 	add	objptr, ##2584
0b85c     18 1E 62 FD | 	getqx	local01
0b860     03 1E 86 F1 | 	sub	local01, #3
0b864     F2 1E 62 FC | 	wrlong	local01, objptr
0b868     0F 00 00 FF 
0b86c     34 E5 05 F1 | 	add	objptr, ##7988
0b870     F2 1E 02 FB | 	rdlong	local01, objptr
0b874     08 E4 05 F1 | 	add	objptr, #8
0b878     F2 1E 62 FC | 	wrlong	local01, objptr
0b87c     79 00 00 FF 
0b880     A8 E5 85 F1 | 	sub	objptr, ##62376
0b884                 | LR__0952
0b884     79 00 00 FF 
0b888     C4 E5 05 F1 | 	add	objptr, ##62404
0b88c     F2 1E 02 FB | 	rdlong	local01, objptr
0b890     24 E4 85 F1 | 	sub	objptr, #36
0b894     F2 1E 62 FC | 	wrlong	local01, objptr
0b898     04 E4 05 F1 | 	add	objptr, #4
0b89c     F2 12 02 FB | 	rdlong	arg01, objptr
0b8a0     79 00 00 FF 
0b8a4     A4 E5 85 F1 | 	sub	objptr, ##62372
0b8a8     FC E7 BF FD | 	call	#_execute_line
0b8ac     79 00 00 FF 
0b8b0     A4 E5 05 F1 | 	add	objptr, ##62372
0b8b4     F2 FA 61 FC | 	wrlong	result1, objptr
0b8b8     04 E4 85 F1 | 	sub	objptr, #4
0b8bc     F2 1E 02 FB | 	rdlong	local01, objptr
0b8c0     79 00 00 FF 
0b8c4     A0 E5 85 F1 | 	sub	objptr, ##62368
0b8c8     FF FF 3F FF 
0b8cc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0b8d0     30 00 90 AD |  if_e	jmp	#LR__0954
0b8d4     E0 12 06 F6 | 	mov	arg01, #224
0b8d8     34 0F B1 FD | 	call	#_usbnew_spin2_keystate
0b8dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0b8e0     10 00 90 5D |  if_ne	jmp	#LR__0953
0b8e4     E4 12 06 F6 | 	mov	arg01, #228
0b8e8     24 0F B1 FD | 	call	#_usbnew_spin2_keystate
0b8ec     00 FA 0D F2 | 	cmp	result1, #0 wz
0b8f0     A0 FE 9F AD |  if_e	jmp	#LR__0951
0b8f4                 | LR__0953
0b8f4     06 12 06 F6 | 	mov	arg01, #6
0b8f8     14 0F B1 FD | 	call	#_usbnew_spin2_keystate
0b8fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0b900     90 FE 9F AD |  if_e	jmp	#LR__0951
0b904                 | LR__0954
0b904                 | '   ''do whatever kbm.peek_latest_key()=$106 
0b904                 | ' if runheader(5)<>$7FFF_FFFF then 
0b904     79 00 00 FF 
0b908     C4 E5 05 F1 | 	add	objptr, ##62404
0b90c     F2 1E 02 FB | 	rdlong	local01, objptr
0b910     79 00 00 FF 
0b914     C4 E5 85 F1 | 	sub	objptr, ##62404
0b918     FF FF 3F FF 
0b91c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0b920     C0 00 90 AD |  if_e	jmp	#LR__0956
0b924                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)  : kbm.get_key ' eat ctrl-c
0b924     79 00 00 FF 
0b928     D0 E5 05 F1 | 	add	objptr, ##62416
0b92c     F2 1E 02 FB | 	rdlong	local01, objptr
0b930     79 00 00 FF 
0b934     D0 E5 85 F1 | 	sub	objptr, ##62416
0b938     01 1E 0E F2 | 	cmp	local01, #1 wz
0b93c     40 00 90 5D |  if_ne	jmp	#LR__0955
0b940     7B 00 00 FF 
0b944     74 E4 05 F1 | 	add	objptr, ##63092
0b948     F2 14 02 FB | 	rdlong	arg02, objptr
0b94c     04 E4 85 F1 | 	sub	objptr, #4
0b950     F2 1A 02 FB | 	rdlong	arg05, objptr
0b954     07 12 06 F6 | 	mov	arg01, #7
0b958     56 00 00 FF 
0b95c     44 16 06 F6 | 	mov	arg03, ##44100
0b960     0C 18 C6 F9 | 	decod	arg04, #12
0b964     01 1C 66 F6 | 	neg	arg06, #1
0b968     6F 00 00 FF 
0b96c     A4 E5 85 F1 | 	sub	objptr, ##57252
0b970     C0 12 B1 FD | 	call	#_audio096_spin2_play
0b974     0B 00 00 FF 
0b978     CC E4 85 F1 | 	sub	objptr, ##5836
0b97c     2C 0F B1 FD | 	call	#_usbnew_spin2_get_key
0b980                 | LR__0955
0b980                 | '   print "Stopped at line ";runheader(0)
0b980     00 12 06 F6 | 	mov	arg01, #0
0b984     8C 70 B1 FD | 	call	#__system___getiolock_0474
0b988     FD 12 02 F6 | 	mov	arg01, result1
0b98c     F4 16 B1 FD | 	call	#__system___lockmem
0b990     66 01 00 FF 
0b994     37 14 06 F6 | 	mov	arg02, ##@LR__4957
0b998     00 12 06 F6 | 	mov	arg01, #0
0b99c     00 16 06 F6 | 	mov	arg03, #0
0b9a0     E4 23 B1 FD | 	call	#__system___basic_print_string
0b9a4     79 00 00 FF 
0b9a8     B0 E5 05 F1 | 	add	objptr, ##62384
0b9ac     F2 14 02 FB | 	rdlong	arg02, objptr
0b9b0     79 00 00 FF 
0b9b4     B0 E5 85 F1 | 	sub	objptr, ##62384
0b9b8     00 12 06 F6 | 	mov	arg01, #0
0b9bc     00 16 06 F6 | 	mov	arg03, #0
0b9c0     0A 18 06 F6 | 	mov	arg04, #10
0b9c4     44 24 B1 FD | 	call	#__system___basic_print_unsigned
0b9c8     00 12 06 F6 | 	mov	arg01, #0
0b9cc     0A 14 06 F6 | 	mov	arg02, #10
0b9d0     00 16 06 F6 | 	mov	arg03, #0
0b9d4     58 23 B1 FD | 	call	#__system___basic_print_char
0b9d8     00 12 06 F6 | 	mov	arg01, #0
0b9dc     34 70 B1 FD | 	call	#__system___getiolock_0474
0b9e0     FD 00 68 FC | 	wrlong	#0, result1
0b9e4                 | LR__0956
0b9e4     79 00 00 FF 
0b9e8     AC E5 05 F1 | 	add	objptr, ##62380
0b9ec     F2 00 68 FC | 	wrlong	#0, objptr
0b9f0     79 00 00 FF 
0b9f4     AC E5 85 F1 | 	sub	objptr, ##62380
0b9f8                 | LR__0957
0b9f8     A7 F0 03 F6 | 	mov	ptra, fp
0b9fc     B2 00 A0 FD | 	call	#popregs_
0ba00                 | _do_run_ret
0ba00     2D 00 64 FD | 	ret
0ba04                 | 
0ba04                 | ' 
0ba04                 | ' 
0ba04                 | ' 
0ba04                 | ' 
0ba04                 | ' 
0ba04                 | ' 
0ba04                 | ' 
0ba04                 | ' sub do_defenv
0ba04                 | _do_defenv
0ba04     09 4A 05 F6 | 	mov	COUNT_, #9
0ba08     A8 00 A0 FD | 	call	#pushregs_
0ba0c     B4 F0 07 F1 | 	add	ptra, #180
0ba10     6A 00 00 FF 
0ba14     70 E4 05 F1 | 	add	objptr, ##54384
0ba18     F2 1E 02 FB | 	rdlong	local01, objptr
0ba1c     0F 1B 02 F6 | 	mov	arg05, local01
0ba20     01 1A 66 F0 | 	shl	arg05, #1
0ba24     0F 1B 02 F1 | 	add	arg05, local01
0ba28     02 1A 66 F0 | 	shl	arg05, #2
0ba2c     03 00 00 FF 
0ba30     04 E4 85 F1 | 	sub	objptr, ##1540
0ba34     F2 20 02 F6 | 	mov	local02, objptr
0ba38     F2 1A 02 F1 | 	add	arg05, objptr
0ba3c     0D 1B 02 FB | 	rdlong	arg05, arg05
0ba40     10 4E 05 F1 | 	add	fp, #16
0ba44     A7 1A 62 FC | 	wrlong	arg05, fp
0ba48                 | ' 
0ba48                 | ' numpar=compiledline(lineptr_e).result.uresult
0ba48                 | ' 
0ba48                 | ' 
0ba48                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0ba48                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0ba48                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0ba48                 | ' 
0ba48                 | ' 
0ba48                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0ba48     10 4E 85 F1 | 	sub	fp, #16
0ba4c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ba50     67 00 00 FF 
0ba54     6C E4 85 F1 | 	sub	objptr, ##52844
0ba58     10 4E 05 51 |  if_ne	add	fp, #16
0ba5c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ba60     10 4E 85 51 |  if_ne	sub	fp, #16
0ba64     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0ba68     10 4E 05 51 |  if_ne	add	fp, #16
0ba6c     0F 21 02 56 |  if_ne	mov	local02, local01
0ba70     10 4E 85 51 |  if_ne	sub	fp, #16
0ba74     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0ba78     24 0C 90 5D |  if_ne	jmp	#LR__0981
0ba7c                 | ' 
0ba7c                 | '  
0ba7c                 | ' if numpar=2 then
0ba7c     10 4E 05 F1 | 	add	fp, #16
0ba80     A7 20 02 FB | 	rdlong	local02, fp
0ba84     10 4E 85 F1 | 	sub	fp, #16
0ba88     02 20 0E F2 | 	cmp	local02, #2 wz
0ba8c     CC 03 90 5D |  if_ne	jmp	#LR__0972
0ba90     18 E7 BF FD | 	call	#_pop
0ba94     FF 1A 02 F6 | 	mov	arg05, result3
0ba98     5C 4E 05 F1 | 	add	fp, #92
0ba9c     A7 FA 61 FC | 	wrlong	result1, fp
0baa0     04 4E 05 F1 | 	add	fp, #4
0baa4     A7 FC 61 FC | 	wrlong	result2, fp
0baa8     04 4E 05 F1 | 	add	fp, #4
0baac     A7 1A 62 FC | 	wrlong	arg05, fp
0bab0                 | '   t1=pop()
0bab0                 | '   if t1.result_type=result_string2 then 
0bab0     64 4E 85 F1 | 	sub	fp, #100
0bab4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0bab8     20 00 90 5D |  if_ne	jmp	#LR__0960
0babc     5C 4E 05 F1 | 	add	fp, #92
0bac0     A7 12 02 FB | 	rdlong	arg01, fp
0bac4     5C 4E 85 F1 | 	sub	fp, #92
0bac8     88 29 B0 FD | 	call	#_convertstring
0bacc     68 4E 05 F1 | 	add	fp, #104
0bad0     A7 FA 61 FC | 	wrlong	result1, fp
0bad4     68 4E 85 F1 | 	sub	fp, #104
0bad8     58 00 90 FD | 	jmp	#LR__0963
0badc                 | LR__0960
0badc     64 4E 05 F1 | 	add	fp, #100
0bae0     A7 20 02 FB | 	rdlong	local02, fp
0bae4     64 4E 85 F1 | 	sub	fp, #100
0bae8     1F 20 0E F2 | 	cmp	local02, #31 wz
0baec     18 00 90 5D |  if_ne	jmp	#LR__0961
0baf0     5C 4E 05 F1 | 	add	fp, #92
0baf4     A7 20 02 FB | 	rdlong	local02, fp
0baf8     0C 4E 05 F1 | 	add	fp, #12
0bafc     A7 20 62 FC | 	wrlong	local02, fp
0bb00     68 4E 85 F1 | 	sub	fp, #104
0bb04     2C 00 90 FD | 	jmp	#LR__0962
0bb08                 | LR__0961
0bb08     66 01 00 FF 
0bb0c     48 20 06 F6 | 	mov	local02, ##@LR__4958
0bb10     68 4E 05 F1 | 	add	fp, #104
0bb14     A7 20 62 FC | 	wrlong	local02, fp
0bb18     0C 4E 85 F1 | 	sub	fp, #12
0bb1c     A7 12 02 F6 | 	mov	arg01, fp
0bb20     5C 4E 85 F1 | 	sub	fp, #92
0bb24     DC 72 B0 FD | 	call	#_converttoint
0bb28     24 4E 05 F1 | 	add	fp, #36
0bb2c     A7 FA 61 FC | 	wrlong	result1, fp
0bb30     24 4E 85 F1 | 	sub	fp, #36
0bb34                 | LR__0962
0bb34                 | LR__0963
0bb34                 | ' 
0bb34                 | '     
0bb34                 | '   if s1<>"" then 
0bb34     68 4E 05 F1 | 	add	fp, #104
0bb38     A7 12 02 FB | 	rdlong	arg01, fp
0bb3c     68 4E 85 F1 | 	sub	fp, #104
0bb40     66 01 00 FF 
0bb44     49 14 06 F6 | 	mov	arg02, ##@LR__4959
0bb48     60 15 B1 FD | 	call	#__system___string_cmp
0bb4c     00 FA 0D F2 | 	cmp	result1, #0 wz
0bb50     F8 01 90 AD |  if_e	jmp	#LR__0967
0bb54     54 E6 BF FD | 	call	#_pop
0bb58     FF 1E 02 F6 | 	mov	local01, result3
0bb5c     5C 4E 05 F1 | 	add	fp, #92
0bb60     A7 FA 61 FC | 	wrlong	result1, fp
0bb64     04 4E 05 F1 | 	add	fp, #4
0bb68     A7 FC 61 FC | 	wrlong	result2, fp
0bb6c     04 4E 05 F1 | 	add	fp, #4
0bb70     A7 1E 62 FC | 	wrlong	local01, fp
0bb74     08 4E 85 F1 | 	sub	fp, #8
0bb78     A7 12 02 F6 | 	mov	arg01, fp
0bb7c     5C 4E 85 F1 | 	sub	fp, #92
0bb80     80 72 B0 FD | 	call	#_converttoint
0bb84     20 4E 05 F1 | 	add	fp, #32
0bb88     A7 FA 61 FC | 	wrlong	result1, fp
0bb8c     20 4E 85 F1 | 	sub	fp, #32
0bb90                 | '     t1=pop()
0bb90                 | '     channel=converttoint(t1) 
0bb90                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0bb90     09 12 06 F6 | 	mov	arg01, #9
0bb94     B0 64 B1 FD | 	call	#__system__close
0bb98     09 20 06 F6 | 	mov	local02, #9
0bb9c     66 01 00 FF 
0bba0     4A 12 06 F6 | 	mov	arg01, ##@LR__4960
0bba4     68 4E 05 F1 | 	add	fp, #104
0bba8     A7 14 02 FB | 	rdlong	arg02, fp
0bbac     68 4E 85 F1 | 	sub	fp, #104
0bbb0     2C 15 B1 FD | 	call	#__system___string_concat
0bbb4     FD 14 02 F6 | 	mov	arg02, result1
0bbb8     10 13 02 F6 | 	mov	arg01, local02
0bbbc     00 16 06 F6 | 	mov	arg03, #0
0bbc0     C0 20 B1 FD | 	call	#__system___basic_open_string
0bbc4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0bbc8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0bbcc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0bbd0     0C 4E 05 F1 | 	add	fp, #12
0bbd4     A7 FA 61 FC | 	wrlong	result1, fp
0bbd8                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0bbd8     0C 4E 85 F1 | 	sub	fp, #12
0bbdc     A0 00 90 AD |  if_e	jmp	#LR__0964
0bbe0     00 12 06 F6 | 	mov	arg01, #0
0bbe4     2C 6E B1 FD | 	call	#__system___getiolock_0474
0bbe8     FD 12 02 F6 | 	mov	arg01, result1
0bbec     94 14 B1 FD | 	call	#__system___lockmem
0bbf0     66 01 00 FF 
0bbf4     57 14 06 F6 | 	mov	arg02, ##@LR__4961
0bbf8     00 12 06 F6 | 	mov	arg01, #0
0bbfc     00 16 06 F6 | 	mov	arg03, #0
0bc00     84 21 B1 FD | 	call	#__system___basic_print_string
0bc04     0C 4E 05 F1 | 	add	fp, #12
0bc08     A7 14 02 FB | 	rdlong	arg02, fp
0bc0c     0C 4E 85 F1 | 	sub	fp, #12
0bc10     00 12 06 F6 | 	mov	arg01, #0
0bc14     00 16 06 F6 | 	mov	arg03, #0
0bc18     0A 18 06 F6 | 	mov	arg04, #10
0bc1c     AC 21 B1 FD | 	call	#__system___basic_print_integer
0bc20     66 01 00 FF 
0bc24     65 14 06 F6 | 	mov	arg02, ##@LR__4962
0bc28     00 12 06 F6 | 	mov	arg01, #0
0bc2c     00 16 06 F6 | 	mov	arg03, #0
0bc30     54 21 B1 FD | 	call	#__system___basic_print_string
0bc34     00 20 06 F6 | 	mov	local02, #0
0bc38     0C 4E 05 F1 | 	add	fp, #12
0bc3c     A7 12 02 FB | 	rdlong	arg01, fp
0bc40     0C 4E 85 F1 | 	sub	fp, #12
0bc44     CC 3A B1 FD | 	call	#__system___strerror
0bc48     FD 14 02 F6 | 	mov	arg02, result1
0bc4c     10 13 02 F6 | 	mov	arg01, local02
0bc50     00 16 06 F6 | 	mov	arg03, #0
0bc54     30 21 B1 FD | 	call	#__system___basic_print_string
0bc58     00 12 06 F6 | 	mov	arg01, #0
0bc5c     0A 14 06 F6 | 	mov	arg02, #10
0bc60     00 16 06 F6 | 	mov	arg03, #0
0bc64     C8 20 B1 FD | 	call	#__system___basic_print_char
0bc68     00 12 06 F6 | 	mov	arg01, #0
0bc6c     A4 6D B1 FD | 	call	#__system___getiolock_0474
0bc70     FD 00 68 FC | 	wrlong	#0, result1
0bc74     09 12 06 F6 | 	mov	arg01, #9
0bc78     CC 63 B1 FD | 	call	#__system__close
0bc7c     20 0A 90 FD | 	jmp	#LR__0981
0bc80                 | LR__0964
0bc80                 | '     get #9,17,envbuf8(channel,0),256
0bc80     20 4E 05 F1 | 	add	fp, #32
0bc84     A7 1A 02 FB | 	rdlong	arg05, fp
0bc88     20 4E 85 F1 | 	sub	fp, #32
0bc8c     0D 17 02 F6 | 	mov	arg03, arg05
0bc90     09 16 66 F0 | 	shl	arg03, #9
0bc94     0D 17 02 F1 | 	add	arg03, arg05
0bc98     2C 00 00 FF 
0bc9c     D8 E4 05 F1 | 	add	objptr, ##22744
0bca0     F2 16 02 F1 | 	add	arg03, objptr
0bca4     09 12 06 F6 | 	mov	arg01, #9
0bca8     11 14 06 F6 | 	mov	arg02, #17
0bcac     00 19 06 F6 | 	mov	arg04, #256
0bcb0     01 1A 06 F6 | 	mov	arg05, #1
0bcb4     2C 00 00 FF 
0bcb8     D8 E4 85 F1 | 	sub	objptr, ##22744
0bcbc     D8 21 B1 FD | 	call	#__system___basic_get
0bcc0                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0bcc0     14 4E 05 F1 | 	add	fp, #20
0bcc4     A7 FE 69 FC | 	wrlong	#255, fp
0bcc8     14 4E 85 F1 | 	sub	fp, #20
0bccc     2C 00 00 FF 
0bcd0     D8 E4 05 F1 | 	add	objptr, ##22744
0bcd4     97 30 48 FB | 	callpa	#(@LR__0966-@LR__0965)>>2,fcache_load_ptr_
0bcd8                 | LR__0965
0bcd8     20 4E 05 F1 | 	add	fp, #32
0bcdc     A7 18 02 FB | 	rdlong	arg04, fp
0bce0     0C 21 02 F6 | 	mov	local02, arg04
0bce4     09 20 66 F0 | 	shl	local02, #9
0bce8     F2 20 02 F1 | 	add	local02, objptr
0bcec     0C 4E 85 F1 | 	sub	fp, #12
0bcf0     A7 1E 02 FB | 	rdlong	local01, fp
0bcf4     0F 1B 02 F6 | 	mov	arg05, local01
0bcf8     01 1A 66 F0 | 	shl	arg05, #1
0bcfc     10 1B 02 F1 | 	add	arg05, local02
0bd00     0C 21 02 F6 | 	mov	local02, arg04
0bd04     09 20 66 F0 | 	shl	local02, #9
0bd08     0C 21 02 F1 | 	add	local02, arg04
0bd0c     F2 20 02 F1 | 	add	local02, objptr
0bd10     10 1F 02 F1 | 	add	local01, local02
0bd14     0F 21 C2 FA | 	rdbyte	local02, local01
0bd18     00 21 06 FA | 	mul	local02, #256
0bd1c     0D 21 52 FC | 	wrword	local02, arg05
0bd20     A7 20 02 FB | 	rdlong	local02, fp
0bd24     01 20 86 F1 | 	sub	local02, #1
0bd28     A7 20 62 FC | 	wrlong	local02, fp
0bd2c     14 4E 85 F1 | 	sub	fp, #20
0bd30     00 20 56 F2 | 	cmps	local02, #0 wc
0bd34     A0 FF 9F 3D |  if_ae	jmp	#LR__0965
0bd38                 | LR__0966
0bd38     2C 00 00 FF 
0bd3c     D8 E4 85 F1 | 	sub	objptr, ##22744
0bd40                 | '     close #9
0bd40     09 12 06 F6 | 	mov	arg01, #9
0bd44     00 63 B1 FD | 	call	#__system__close
0bd48                 | '                                                                     '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0bd48                 | '     return
0bd48     54 09 90 FD | 	jmp	#LR__0981
0bd4c                 | LR__0967
0bd4c                 | '     if wptr < ($80000 - 2048) then 
0bd4c     24 4E 05 F1 | 	add	fp, #36
0bd50     A7 22 02 FB | 	rdlong	local03, fp
0bd54     24 4E 85 F1 | 	sub	fp, #36
0bd58     FC 03 00 FF 
0bd5c     00 22 56 F2 | 	cmps	local03, ##522240 wc
0bd60     7C 00 90 3D |  if_ae	jmp	#LR__0970
0bd64                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0bd64     14 4E 05 F1 | 	add	fp, #20
0bd68     A7 00 68 FC | 	wrlong	#0, fp
0bd6c     14 4E 85 F1 | 	sub	fp, #20
0bd70     2C 00 00 FF 
0bd74     D8 E4 05 F1 | 	add	objptr, ##22744
0bd78     97 2C 48 FB | 	callpa	#(@LR__0969-@LR__0968)>>2,fcache_load_ptr_
0bd7c                 | LR__0968
0bd7c     20 4E 05 F1 | 	add	fp, #32
0bd80     A7 22 02 FB | 	rdlong	local03, fp
0bd84     09 22 66 F0 | 	shl	local03, #9
0bd88     F2 22 02 F1 | 	add	local03, objptr
0bd8c     0C 4E 85 F1 | 	sub	fp, #12
0bd90     A7 20 02 FB | 	rdlong	local02, fp
0bd94     10 1F 02 F6 | 	mov	local01, local02
0bd98     01 1E 66 F0 | 	shl	local01, #1
0bd9c     11 1F 02 F1 | 	add	local01, local03
0bda0     10 4E 05 F1 | 	add	fp, #16
0bda4     A7 12 02 FB | 	rdlong	arg01, fp
0bda8     01 20 66 F0 | 	shl	local02, #1
0bdac     10 13 02 F1 | 	add	arg01, local02
0bdb0     09 FB E1 FA | 	rdword	result1, arg01
0bdb4     0F FB 51 FC | 	wrword	result1, local01
0bdb8     10 4E 85 F1 | 	sub	fp, #16
0bdbc     A7 22 02 FB | 	rdlong	local03, fp
0bdc0     01 22 06 F1 | 	add	local03, #1
0bdc4     A7 22 62 FC | 	wrlong	local03, fp
0bdc8     14 4E 85 F1 | 	sub	fp, #20
0bdcc     00 23 56 F2 | 	cmps	local03, #256 wc
0bdd0     A8 FF 9F CD |  if_b	jmp	#LR__0968
0bdd4                 | LR__0969
0bdd4     2C 00 00 FF 
0bdd8     D8 E4 85 F1 | 	sub	objptr, ##22744
0bddc     C0 08 90 FD | 	jmp	#LR__0981
0bde0                 | LR__0970
0bde0                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0bde0     14 4E 05 F1 | 	add	fp, #20
0bde4     A7 00 68 FC | 	wrlong	#0, fp
0bde8     14 4E 85 F1 | 	sub	fp, #20
0bdec                 | LR__0971
0bdec     20 4E 05 F1 | 	add	fp, #32
0bdf0     A7 22 02 FB | 	rdlong	local03, fp
0bdf4     09 22 66 F0 | 	shl	local03, #9
0bdf8     2C 00 00 FF 
0bdfc     D8 E4 05 F1 | 	add	objptr, ##22744
0be00     F2 22 02 F1 | 	add	local03, objptr
0be04     0C 4E 85 F1 | 	sub	fp, #12
0be08     A7 20 02 FB | 	rdlong	local02, fp
0be0c     10 1F 02 F6 | 	mov	local01, local02
0be10     01 1E 66 F0 | 	shl	local01, #1
0be14     11 1F 02 F1 | 	add	local01, local03
0be18     10 4E 05 F1 | 	add	fp, #16
0be1c     A7 12 02 FB | 	rdlong	arg01, fp
0be20     24 4E 85 F1 | 	sub	fp, #36
0be24     01 20 66 F0 | 	shl	local02, #1
0be28     10 13 02 F1 | 	add	arg01, local02
0be2c     2C 00 00 FF 
0be30     D8 E4 85 F1 | 	sub	objptr, ##22744
0be34     DC D4 B0 FD | 	call	#_psdpeek
0be38     0F FB 51 FC | 	wrword	result1, local01
0be3c     14 4E 05 F1 | 	add	fp, #20
0be40     A7 24 02 FB | 	rdlong	local04, fp
0be44     01 24 06 F1 | 	add	local04, #1
0be48     A7 24 62 FC | 	wrlong	local04, fp
0be4c     14 4E 85 F1 | 	sub	fp, #20
0be50     00 25 56 F2 | 	cmps	local04, #256 wc
0be54     94 FF 9F CD |  if_b	jmp	#LR__0971
0be58                 | '     return   
0be58     44 08 90 FD | 	jmp	#LR__0981
0be5c                 | LR__0972
0be5c                 | ' 
0be5c                 | ' if numpar=5 then    'simple adsr
0be5c     10 4E 05 F1 | 	add	fp, #16
0be60     A7 22 02 FB | 	rdlong	local03, fp
0be64     10 4E 85 F1 | 	sub	fp, #16
0be68     05 22 0E F2 | 	cmp	local03, #5 wz
0be6c     30 08 90 5D |  if_ne	jmp	#LR__0980
0be70     38 E3 BF FD | 	call	#_pop
0be74     FF 1E 02 F6 | 	mov	local01, result3
0be78     5C 4E 05 F1 | 	add	fp, #92
0be7c     A7 FA 61 FC | 	wrlong	result1, fp
0be80     04 4E 05 F1 | 	add	fp, #4
0be84     A7 FC 61 FC | 	wrlong	result2, fp
0be88     04 4E 05 F1 | 	add	fp, #4
0be8c     A7 1E 62 FC | 	wrlong	local01, fp
0be90     08 4E 85 F1 | 	sub	fp, #8
0be94     A7 12 02 F6 | 	mov	arg01, fp
0be98     5C 4E 85 F1 | 	sub	fp, #92
0be9c     10 70 B0 FD | 	call	#_converttofloat
0bea0     FD 22 02 F6 | 	mov	local03, result1
0bea4     34 4E 05 F1 | 	add	fp, #52
0bea8     A7 22 62 FC | 	wrlong	local03, fp
0beac     34 4E 85 F1 | 	sub	fp, #52
0beb0     F8 E2 BF FD | 	call	#_pop
0beb4     FF 1E 02 F6 | 	mov	local01, result3
0beb8     5C 4E 05 F1 | 	add	fp, #92
0bebc     A7 FA 61 FC | 	wrlong	result1, fp
0bec0     04 4E 05 F1 | 	add	fp, #4
0bec4     A7 FC 61 FC | 	wrlong	result2, fp
0bec8     04 4E 05 F1 | 	add	fp, #4
0becc     A7 1E 62 FC | 	wrlong	local01, fp
0bed0     08 4E 85 F1 | 	sub	fp, #8
0bed4     A7 12 02 F6 | 	mov	arg01, fp
0bed8     5C 4E 85 F1 | 	sub	fp, #92
0bedc     D0 6F B0 FD | 	call	#_converttofloat
0bee0     FD 22 02 F6 | 	mov	local03, result1
0bee4     30 4E 05 F1 | 	add	fp, #48
0bee8     A7 22 62 FC | 	wrlong	local03, fp
0beec     30 4E 85 F1 | 	sub	fp, #48
0bef0     B8 E2 BF FD | 	call	#_pop
0bef4     FF 1E 02 F6 | 	mov	local01, result3
0bef8     5C 4E 05 F1 | 	add	fp, #92
0befc     A7 FA 61 FC | 	wrlong	result1, fp
0bf00     04 4E 05 F1 | 	add	fp, #4
0bf04     A7 FC 61 FC | 	wrlong	result2, fp
0bf08     04 4E 05 F1 | 	add	fp, #4
0bf0c     A7 1E 62 FC | 	wrlong	local01, fp
0bf10     08 4E 85 F1 | 	sub	fp, #8
0bf14     A7 12 02 F6 | 	mov	arg01, fp
0bf18     5C 4E 85 F1 | 	sub	fp, #92
0bf1c     90 6F B0 FD | 	call	#_converttofloat
0bf20     FD 22 02 F6 | 	mov	local03, result1
0bf24     2C 4E 05 F1 | 	add	fp, #44
0bf28     A7 22 62 FC | 	wrlong	local03, fp
0bf2c     2C 4E 85 F1 | 	sub	fp, #44
0bf30     78 E2 BF FD | 	call	#_pop
0bf34     FF 1E 02 F6 | 	mov	local01, result3
0bf38     5C 4E 05 F1 | 	add	fp, #92
0bf3c     A7 FA 61 FC | 	wrlong	result1, fp
0bf40     04 4E 05 F1 | 	add	fp, #4
0bf44     A7 FC 61 FC | 	wrlong	result2, fp
0bf48     04 4E 05 F1 | 	add	fp, #4
0bf4c     A7 1E 62 FC | 	wrlong	local01, fp
0bf50     08 4E 85 F1 | 	sub	fp, #8
0bf54     A7 12 02 F6 | 	mov	arg01, fp
0bf58     5C 4E 85 F1 | 	sub	fp, #92
0bf5c     50 6F B0 FD | 	call	#_converttofloat
0bf60     FD 22 02 F6 | 	mov	local03, result1
0bf64     28 4E 05 F1 | 	add	fp, #40
0bf68     A7 22 62 FC | 	wrlong	local03, fp
0bf6c     28 4E 85 F1 | 	sub	fp, #40
0bf70     38 E2 BF FD | 	call	#_pop
0bf74     FF 1E 02 F6 | 	mov	local01, result3
0bf78     5C 4E 05 F1 | 	add	fp, #92
0bf7c     A7 FA 61 FC | 	wrlong	result1, fp
0bf80     04 4E 05 F1 | 	add	fp, #4
0bf84     A7 FC 61 FC | 	wrlong	result2, fp
0bf88     04 4E 05 F1 | 	add	fp, #4
0bf8c     A7 1E 62 FC | 	wrlong	local01, fp
0bf90     08 4E 85 F1 | 	sub	fp, #8
0bf94     A7 12 02 F6 | 	mov	arg01, fp
0bf98     5C 4E 85 F1 | 	sub	fp, #92
0bf9c     64 6E B0 FD | 	call	#_converttoint
0bfa0     20 4E 05 F1 | 	add	fp, #32
0bfa4     A7 FA 61 FC | 	wrlong	result1, fp
0bfa8                 | ' 
0bfa8                 | '   t1=pop() : rr=converttofloat(t1)
0bfa8                 | '   t1=pop() : ss=converttofloat(t1) 
0bfa8                 | '   t1=pop() : dd=converttofloat(t1)
0bfa8                 | '   t1=pop() : aa=converttofloat(t1)
0bfa8                 | '   t1=pop() : channel=converttoint(t1)
0bfa8                 | '   if ss<0.0 then ss=0.0 
0bfa8     10 4E 05 F1 | 	add	fp, #16
0bfac     A7 12 02 FB | 	rdlong	arg01, fp
0bfb0     30 4E 85 F1 | 	sub	fp, #48
0bfb4     00 14 06 F6 | 	mov	arg02, #0
0bfb8     01 16 06 F6 | 	mov	arg03, #1
0bfbc     74 40 B1 FD | 	call	#__system___float_cmp
0bfc0     00 FA 55 F2 | 	cmps	result1, #0 wc
0bfc4     30 4E 05 C1 |  if_b	add	fp, #48
0bfc8     A7 00 68 CC |  if_b	wrlong	#0, fp
0bfcc     30 4E 85 C1 |  if_b	sub	fp, #48
0bfd0                 | '   if ss>1.0 then ss=1.0
0bfd0     30 4E 05 F1 | 	add	fp, #48
0bfd4     A7 12 02 FB | 	rdlong	arg01, fp
0bfd8     30 4E 85 F1 | 	sub	fp, #48
0bfdc     00 C0 1F FF 
0bfe0     00 14 06 F6 | 	mov	arg02, ##1065353216
0bfe4     01 16 66 F6 | 	neg	arg03, #1
0bfe8     48 40 B1 FD | 	call	#__system___float_cmp
0bfec     01 FA 55 F2 | 	cmps	result1, #1 wc
0bff0     30 4E 05 31 |  if_ae	add	fp, #48
0bff4     00 C0 9F 3F 
0bff8     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0bffc     30 4E 85 31 |  if_ae	sub	fp, #48
0c000     28 4E 05 F1 | 	add	fp, #40
0c004     A7 12 02 FB | 	rdlong	arg01, fp
0c008     04 4E 05 F1 | 	add	fp, #4
0c00c     A7 14 02 FB | 	rdlong	arg02, fp
0c010     2C 4E 85 F1 | 	sub	fp, #44
0c014     18 38 B1 FD | 	call	#__system___float_add
0c018     FD 12 02 F6 | 	mov	arg01, result1
0c01c     34 4E 05 F1 | 	add	fp, #52
0c020     A7 14 02 FB | 	rdlong	arg02, fp
0c024     34 4E 85 F1 | 	sub	fp, #52
0c028     04 38 B1 FD | 	call	#__system___float_add
0c02c     4C 4E 05 F1 | 	add	fp, #76
0c030     A7 FA 61 FC | 	wrlong	result1, fp
0c034     FD 14 02 F6 | 	mov	arg02, result1
0c038     4C 4E 85 F1 | 	sub	fp, #76
0c03c     00 C0 21 FF 
0c040     00 12 06 F6 | 	mov	arg01, ##1132462080
0c044     BC 3D B1 FD | 	call	#__system___float_div
0c048     50 4E 05 F1 | 	add	fp, #80
0c04c     A7 FA 61 FC | 	wrlong	result1, fp
0c050     28 4E 85 F1 | 	sub	fp, #40
0c054     A7 12 02 FB | 	rdlong	arg01, fp
0c058     FD 14 02 F6 | 	mov	arg02, result1
0c05c     28 4E 85 F1 | 	sub	fp, #40
0c060     9C 3B B1 FD | 	call	#__system___float_mul
0c064     FD 12 02 F6 | 	mov	arg01, result1
0c068     01 14 06 F6 | 	mov	arg02, #1
0c06c     58 40 B1 FD | 	call	#__system___float_tointeger
0c070     A7 FA 61 FC | 	wrlong	result1, fp
0c074     2C 4E 05 F1 | 	add	fp, #44
0c078     A7 12 02 FB | 	rdlong	arg01, fp
0c07c     24 4E 05 F1 | 	add	fp, #36
0c080     A7 14 02 FB | 	rdlong	arg02, fp
0c084     50 4E 85 F1 | 	sub	fp, #80
0c088     74 3B B1 FD | 	call	#__system___float_mul
0c08c     FD 12 02 F6 | 	mov	arg01, result1
0c090     01 14 06 F6 | 	mov	arg02, #1
0c094     30 40 B1 FD | 	call	#__system___float_tointeger
0c098     04 4E 05 F1 | 	add	fp, #4
0c09c     A7 FA 61 FC | 	wrlong	result1, fp
0c0a0     30 4E 05 F1 | 	add	fp, #48
0c0a4     A7 12 02 FB | 	rdlong	arg01, fp
0c0a8     1C 4E 05 F1 | 	add	fp, #28
0c0ac     A7 14 02 FB | 	rdlong	arg02, fp
0c0b0     50 4E 85 F1 | 	sub	fp, #80
0c0b4     48 3B B1 FD | 	call	#__system___float_mul
0c0b8     FD 12 02 F6 | 	mov	arg01, result1
0c0bc     01 14 06 F6 | 	mov	arg02, #1
0c0c0     04 40 B1 FD | 	call	#__system___float_tointeger
0c0c4     FD 22 02 F6 | 	mov	local03, result1
0c0c8     0C 4E 05 F1 | 	add	fp, #12
0c0cc     A7 22 62 FC | 	wrlong	local03, fp
0c0d0     0C 4E 85 F1 | 	sub	fp, #12
0c0d4                 | '   fulltime=aa+dd+rr
0c0d4                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0c0d4     00 12 06 F6 | 	mov	arg01, #0
0c0d8     38 69 B1 FD | 	call	#__system___getiolock_0474
0c0dc     FD 12 02 F6 | 	mov	arg01, result1
0c0e0     A0 0F B1 FD | 	call	#__system___lockmem
0c0e4     A7 14 02 FB | 	rdlong	arg02, fp
0c0e8     00 12 06 F6 | 	mov	arg01, #0
0c0ec     00 16 06 F6 | 	mov	arg03, #0
0c0f0     0A 18 06 F6 | 	mov	arg04, #10
0c0f4     D4 1C B1 FD | 	call	#__system___basic_print_integer
0c0f8     00 12 06 F6 | 	mov	arg01, #0
0c0fc     09 14 06 F6 | 	mov	arg02, #9
0c100     00 16 06 F6 | 	mov	arg03, #0
0c104     28 1C B1 FD | 	call	#__system___basic_print_char
0c108     04 4E 05 F1 | 	add	fp, #4
0c10c     A7 14 02 FB | 	rdlong	arg02, fp
0c110     04 4E 85 F1 | 	sub	fp, #4
0c114     00 12 06 F6 | 	mov	arg01, #0
0c118     00 16 06 F6 | 	mov	arg03, #0
0c11c     0A 18 06 F6 | 	mov	arg04, #10
0c120     A8 1C B1 FD | 	call	#__system___basic_print_integer
0c124     00 12 06 F6 | 	mov	arg01, #0
0c128     09 14 06 F6 | 	mov	arg02, #9
0c12c     00 16 06 F6 | 	mov	arg03, #0
0c130     FC 1B B1 FD | 	call	#__system___basic_print_char
0c134     0C 4E 05 F1 | 	add	fp, #12
0c138     A7 14 02 FB | 	rdlong	arg02, fp
0c13c     0C 4E 85 F1 | 	sub	fp, #12
0c140     00 12 06 F6 | 	mov	arg01, #0
0c144     00 16 06 F6 | 	mov	arg03, #0
0c148     0A 18 06 F6 | 	mov	arg04, #10
0c14c     7C 1C B1 FD | 	call	#__system___basic_print_integer
0c150     00 12 06 F6 | 	mov	arg01, #0
0c154     09 14 06 F6 | 	mov	arg02, #9
0c158     00 16 06 F6 | 	mov	arg03, #0
0c15c     D0 1B B1 FD | 	call	#__system___basic_print_char
0c160     A7 14 02 FB | 	rdlong	arg02, fp
0c164     04 4E 05 F1 | 	add	fp, #4
0c168     A7 22 02 FB | 	rdlong	local03, fp
0c16c     11 15 02 F1 | 	add	arg02, local03
0c170     08 4E 05 F1 | 	add	fp, #8
0c174     A7 22 02 FB | 	rdlong	local03, fp
0c178     0C 4E 85 F1 | 	sub	fp, #12
0c17c     11 15 02 F1 | 	add	arg02, local03
0c180     00 12 06 F6 | 	mov	arg01, #0
0c184     00 16 06 F6 | 	mov	arg03, #0
0c188     0A 18 06 F6 | 	mov	arg04, #10
0c18c     3C 1C B1 FD | 	call	#__system___basic_print_integer
0c190     00 12 06 F6 | 	mov	arg01, #0
0c194     0A 14 06 F6 | 	mov	arg02, #10
0c198     00 16 06 F6 | 	mov	arg03, #0
0c19c     90 1B B1 FD | 	call	#__system___basic_print_char
0c1a0     00 12 06 F6 | 	mov	arg01, #0
0c1a4     6C 68 B1 FD | 	call	#__system___getiolock_0474
0c1a8     FD 00 68 FC | 	wrlong	#0, result1
0c1ac     F8 BF 23 FF 
0c1b0     00 22 06 F6 | 	mov	local03, ##1199566848
0c1b4     A7 12 02 FB | 	rdlong	arg01, fp
0c1b8     09 13 52 F6 | 	abs	arg01, arg01 wc
0c1bc     1F 26 C6 C9 |  if_b	decod	local05, #31
0c1c0     00 26 06 36 |  if_ae	mov	local05, #0
0c1c4     34 36 B1 FD | 	call	#__system___float_fromuns
0c1c8     13 FB 61 F5 | 	xor	result1, local05
0c1cc     FD 14 02 F6 | 	mov	arg02, result1
0c1d0     11 13 02 F6 | 	mov	arg01, local03
0c1d4     2C 3C B1 FD | 	call	#__system___float_div
0c1d8     54 4E 05 F1 | 	add	fp, #84
0c1dc     A7 FA 61 FC | 	wrlong	result1, fp
0c1e0     F8 BF 23 FF 
0c1e4     00 22 06 F6 | 	mov	local03, ##1199566848
0c1e8     24 4E 85 F1 | 	sub	fp, #36
0c1ec     A7 14 02 FB | 	rdlong	arg02, fp
0c1f0     30 4E 85 F1 | 	sub	fp, #48
0c1f4     F8 BF 23 FF 
0c1f8     00 12 06 F6 | 	mov	arg01, ##1199566848
0c1fc     00 3A B1 FD | 	call	#__system___float_mul
0c200     FD 14 02 F6 | 	mov	arg02, result1
0c204     11 13 02 F6 | 	mov	arg01, local03
0c208     1F 14 E6 F4 | 	bitnot	arg02, #31
0c20c     20 36 B1 FD | 	call	#__system___float_add
0c210     FD 22 02 F6 | 	mov	local03, result1
0c214     04 4E 05 F1 | 	add	fp, #4
0c218     A7 12 02 FB | 	rdlong	arg01, fp
0c21c     04 4E 85 F1 | 	sub	fp, #4
0c220     09 13 52 F6 | 	abs	arg01, arg01 wc
0c224     1F 26 C6 C9 |  if_b	decod	local05, #31
0c228     00 26 06 36 |  if_ae	mov	local05, #0
0c22c     CC 35 B1 FD | 	call	#__system___float_fromuns
0c230     13 FB 61 F5 | 	xor	result1, local05
0c234     FD 14 02 F6 | 	mov	arg02, result1
0c238     11 13 02 F6 | 	mov	arg01, local03
0c23c     C4 3B B1 FD | 	call	#__system___float_div
0c240     2C 4E 05 F1 | 	add	fp, #44
0c244     A7 FA 61 FC | 	wrlong	result1, fp
0c248     04 4E 05 F1 | 	add	fp, #4
0c24c     A7 14 02 FB | 	rdlong	arg02, fp
0c250     30 4E 85 F1 | 	sub	fp, #48
0c254     F8 BF 23 FF 
0c258     00 12 06 F6 | 	mov	arg01, ##1199566848
0c25c     A0 39 B1 FD | 	call	#__system___float_mul
0c260     FD 22 02 F6 | 	mov	local03, result1
0c264     0C 4E 05 F1 | 	add	fp, #12
0c268     A7 12 02 FB | 	rdlong	arg01, fp
0c26c     0C 4E 85 F1 | 	sub	fp, #12
0c270     09 13 52 F6 | 	abs	arg01, arg01 wc
0c274     1F 26 C6 C9 |  if_b	decod	local05, #31
0c278     00 26 06 36 |  if_ae	mov	local05, #0
0c27c     7C 35 B1 FD | 	call	#__system___float_fromuns
0c280     13 FB 61 F5 | 	xor	result1, local05
0c284     FD 14 02 F6 | 	mov	arg02, result1
0c288     11 13 02 F6 | 	mov	arg01, local03
0c28c     74 3B B1 FD | 	call	#__system___float_div
0c290     FD 22 02 F6 | 	mov	local03, result1
0c294     58 4E 05 F1 | 	add	fp, #88
0c298     A7 22 62 FC | 	wrlong	local03, fp
0c29c     58 4E 85 F1 | 	sub	fp, #88
0c2a0                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0c2a0     00 12 06 F6 | 	mov	arg01, #0
0c2a4     6C 67 B1 FD | 	call	#__system___getiolock_0474
0c2a8     FD 12 02 F6 | 	mov	arg01, result1
0c2ac     D4 0D B1 FD | 	call	#__system___lockmem
0c2b0     54 4E 05 F1 | 	add	fp, #84
0c2b4     A7 14 02 FB | 	rdlong	arg02, fp
0c2b8     54 4E 85 F1 | 	sub	fp, #84
0c2bc     00 12 06 F6 | 	mov	arg01, #0
0c2c0     00 16 06 F6 | 	mov	arg03, #0
0c2c4     23 18 06 F6 | 	mov	arg04, #35
0c2c8     4C 3F B1 FD | 	call	#__system___basic_print_float
0c2cc     00 12 06 F6 | 	mov	arg01, #0
0c2d0     09 14 06 F6 | 	mov	arg02, #9
0c2d4     00 16 06 F6 | 	mov	arg03, #0
0c2d8     54 1A B1 FD | 	call	#__system___basic_print_char
0c2dc     2C 4E 05 F1 | 	add	fp, #44
0c2e0     A7 14 02 FB | 	rdlong	arg02, fp
0c2e4     2C 4E 85 F1 | 	sub	fp, #44
0c2e8     00 12 06 F6 | 	mov	arg01, #0
0c2ec     00 16 06 F6 | 	mov	arg03, #0
0c2f0     23 18 06 F6 | 	mov	arg04, #35
0c2f4     20 3F B1 FD | 	call	#__system___basic_print_float
0c2f8     00 12 06 F6 | 	mov	arg01, #0
0c2fc     09 14 06 F6 | 	mov	arg02, #9
0c300     00 16 06 F6 | 	mov	arg03, #0
0c304     28 1A B1 FD | 	call	#__system___basic_print_char
0c308     58 4E 05 F1 | 	add	fp, #88
0c30c     A7 14 02 FB | 	rdlong	arg02, fp
0c310     58 4E 85 F1 | 	sub	fp, #88
0c314     00 12 06 F6 | 	mov	arg01, #0
0c318     00 16 06 F6 | 	mov	arg03, #0
0c31c     23 18 06 F6 | 	mov	arg04, #35
0c320     F4 3E B1 FD | 	call	#__system___basic_print_float
0c324     00 12 06 F6 | 	mov	arg01, #0
0c328     0A 14 06 F6 | 	mov	arg02, #10
0c32c     00 16 06 F6 | 	mov	arg03, #0
0c330     FC 19 B1 FD | 	call	#__system___basic_print_char
0c334     00 12 06 F6 | 	mov	arg01, #0
0c338     D8 66 B1 FD | 	call	#__system___getiolock_0474
0c33c     FD 00 68 FC | 	wrlong	#0, result1
0c340     20 4E 05 F1 | 	add	fp, #32
0c344     A7 28 02 FB | 	rdlong	local06, fp
0c348     20 4E 85 F1 | 	sub	fp, #32
0c34c     01 28 66 F0 | 	shl	local06, #1
0c350     7B 00 00 FF 
0c354     84 E4 05 F1 | 	add	objptr, ##63108
0c358     F2 28 02 F1 | 	add	local06, objptr
0c35c     A7 2A 02 FB | 	rdlong	local07, fp
0c360     04 4E 05 F1 | 	add	fp, #4
0c364     A7 22 02 FB | 	rdlong	local03, fp
0c368     11 2B 02 F1 | 	add	local07, local03
0c36c     14 2B 52 FC | 	wrword	local07, local06
0c370     24 4E 05 F1 | 	add	fp, #36
0c374     A7 00 68 FC | 	wrlong	#0, fp
0c378                 | '   suspoints(channel)=a+d
0c378                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0c378     14 4E 85 F1 | 	sub	fp, #20
0c37c     A7 00 68 FC | 	wrlong	#0, fp
0c380     14 4E 85 F1 | 	sub	fp, #20
0c384     A7 2C 02 FB | 	rdlong	local08, fp
0c388     7B 00 00 FF 
0c38c     84 E4 85 F1 | 	sub	objptr, ##63108
0c390                 | LR__0973
0c390     14 4E 05 F1 | 	add	fp, #20
0c394     A7 22 02 FB | 	rdlong	local03, fp
0c398     14 4E 85 F1 | 	sub	fp, #20
0c39c     16 23 52 F2 | 	cmps	local03, local08 wc
0c3a0     80 00 90 3D |  if_ae	jmp	#LR__0974
0c3a4     20 4E 05 F1 | 	add	fp, #32
0c3a8     A7 28 02 FB | 	rdlong	local06, fp
0c3ac     09 28 66 F0 | 	shl	local06, #9
0c3b0     2C 00 00 FF 
0c3b4     D8 E4 05 F1 | 	add	objptr, ##22744
0c3b8     F2 28 02 F1 | 	add	local06, objptr
0c3bc     0C 4E 85 F1 | 	sub	fp, #12
0c3c0     A7 22 02 FB | 	rdlong	local03, fp
0c3c4     01 22 66 F0 | 	shl	local03, #1
0c3c8     14 23 02 F1 | 	add	local03, local06
0c3cc     14 4E 05 F1 | 	add	fp, #20
0c3d0     A7 12 02 FB | 	rdlong	arg01, fp
0c3d4     28 4E 85 F1 | 	sub	fp, #40
0c3d8     2C 00 00 FF 
0c3dc     D8 E4 85 F1 | 	sub	objptr, ##22744
0c3e0     01 14 06 F6 | 	mov	arg02, #1
0c3e4     E0 3C B1 FD | 	call	#__system___float_tointeger
0c3e8     11 FB 51 FC | 	wrword	result1, local03
0c3ec     28 4E 05 F1 | 	add	fp, #40
0c3f0     A7 12 02 FB | 	rdlong	arg01, fp
0c3f4     2C 4E 05 F1 | 	add	fp, #44
0c3f8     A7 14 02 FB | 	rdlong	arg02, fp
0c3fc     54 4E 85 F1 | 	sub	fp, #84
0c400     2C 34 B1 FD | 	call	#__system___float_add
0c404     28 4E 05 F1 | 	add	fp, #40
0c408     A7 FA 61 FC | 	wrlong	result1, fp
0c40c     14 4E 85 F1 | 	sub	fp, #20
0c410     A7 20 02 FB | 	rdlong	local02, fp
0c414     01 20 06 F1 | 	add	local02, #1
0c418     A7 20 62 FC | 	wrlong	local02, fp
0c41c     14 4E 85 F1 | 	sub	fp, #20
0c420     6C FF 9F FD | 	jmp	#LR__0973
0c424                 | LR__0974
0c424                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0c424     A7 22 02 FB | 	rdlong	local03, fp
0c428     14 4E 05 F1 | 	add	fp, #20
0c42c     A7 22 62 FC | 	wrlong	local03, fp
0c430     14 4E 85 F1 | 	sub	fp, #20
0c434     A7 2E 02 FB | 	rdlong	local09, fp
0c438     04 4E 05 F1 | 	add	fp, #4
0c43c     A7 22 02 FB | 	rdlong	local03, fp
0c440     04 4E 85 F1 | 	sub	fp, #4
0c444     11 2F 02 F1 | 	add	local09, local03
0c448                 | LR__0975
0c448     14 4E 05 F1 | 	add	fp, #20
0c44c     A7 22 02 FB | 	rdlong	local03, fp
0c450     14 4E 85 F1 | 	sub	fp, #20
0c454     17 23 52 F2 | 	cmps	local03, local09 wc
0c458     A8 00 90 3D |  if_ae	jmp	#LR__0976
0c45c     20 4E 05 F1 | 	add	fp, #32
0c460     A7 2C 02 FB | 	rdlong	local08, fp
0c464     09 2C 66 F0 | 	shl	local08, #9
0c468     2C 00 00 FF 
0c46c     D8 E4 05 F1 | 	add	objptr, ##22744
0c470     F2 2C 02 F1 | 	add	local08, objptr
0c474     0C 4E 85 F1 | 	sub	fp, #12
0c478     A7 2A 02 FB | 	rdlong	local07, fp
0c47c     01 2A 66 F0 | 	shl	local07, #1
0c480     16 2B 02 F1 | 	add	local07, local08
0c484     14 4E 05 F1 | 	add	fp, #20
0c488     A7 12 02 FB | 	rdlong	arg01, fp
0c48c     28 4E 85 F1 | 	sub	fp, #40
0c490     2C 00 00 FF 
0c494     D8 E4 85 F1 | 	sub	objptr, ##22744
0c498     01 14 06 F6 | 	mov	arg02, #1
0c49c     28 3C B1 FD | 	call	#__system___float_tointeger
0c4a0     15 FB 51 FC | 	wrword	result1, local07
0c4a4     28 4E 05 F1 | 	add	fp, #40
0c4a8     A7 12 02 FB | 	rdlong	arg01, fp
0c4ac     04 4E 05 F1 | 	add	fp, #4
0c4b0     A7 14 02 FB | 	rdlong	arg02, fp
0c4b4     2C 4E 85 F1 | 	sub	fp, #44
0c4b8     1F 14 E6 F4 | 	bitnot	arg02, #31
0c4bc     70 33 B1 FD | 	call	#__system___float_add
0c4c0     28 4E 05 F1 | 	add	fp, #40
0c4c4     A7 FA 61 FC | 	wrlong	result1, fp
0c4c8     28 4E 85 F1 | 	sub	fp, #40
0c4cc     FD 12 02 F6 | 	mov	arg01, result1
0c4d0     00 14 06 F6 | 	mov	arg02, #0
0c4d4     01 16 06 F6 | 	mov	arg03, #1
0c4d8     58 3B B1 FD | 	call	#__system___float_cmp
0c4dc     00 FA 55 F2 | 	cmps	result1, #0 wc
0c4e0     28 4E 05 C1 |  if_b	add	fp, #40
0c4e4     A7 00 68 CC |  if_b	wrlong	#0, fp
0c4e8     28 4E 85 C1 |  if_b	sub	fp, #40
0c4ec     14 4E 05 F1 | 	add	fp, #20
0c4f0     A7 20 02 FB | 	rdlong	local02, fp
0c4f4     01 20 06 F1 | 	add	local02, #1
0c4f8     A7 20 62 FC | 	wrlong	local02, fp
0c4fc     14 4E 85 F1 | 	sub	fp, #20
0c500     44 FF 9F FD | 	jmp	#LR__0975
0c504                 | LR__0976
0c504                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0c504     A7 22 02 FB | 	rdlong	local03, fp
0c508     04 4E 05 F1 | 	add	fp, #4
0c50c     A7 2E 02 FB | 	rdlong	local09, fp
0c510     17 23 02 F1 | 	add	local03, local09
0c514     10 4E 05 F1 | 	add	fp, #16
0c518     A7 22 62 FC | 	wrlong	local03, fp
0c51c     14 4E 85 F1 | 	sub	fp, #20
0c520                 | LR__0977
0c520     14 4E 05 F1 | 	add	fp, #20
0c524     A7 28 02 FB | 	rdlong	local06, fp
0c528     14 4E 85 F1 | 	sub	fp, #20
0c52c     00 29 56 F2 | 	cmps	local06, #256 wc
0c530     A8 00 90 3D |  if_ae	jmp	#LR__0978
0c534     20 4E 05 F1 | 	add	fp, #32
0c538     A7 2E 02 FB | 	rdlong	local09, fp
0c53c     09 2E 66 F0 | 	shl	local09, #9
0c540     2C 00 00 FF 
0c544     D8 E4 05 F1 | 	add	objptr, ##22744
0c548     F2 2E 02 F1 | 	add	local09, objptr
0c54c     0C 4E 85 F1 | 	sub	fp, #12
0c550     A7 2C 02 FB | 	rdlong	local08, fp
0c554     01 2C 66 F0 | 	shl	local08, #1
0c558     17 2D 02 F1 | 	add	local08, local09
0c55c     14 4E 05 F1 | 	add	fp, #20
0c560     A7 12 02 FB | 	rdlong	arg01, fp
0c564     28 4E 85 F1 | 	sub	fp, #40
0c568     2C 00 00 FF 
0c56c     D8 E4 85 F1 | 	sub	objptr, ##22744
0c570     01 14 06 F6 | 	mov	arg02, #1
0c574     50 3B B1 FD | 	call	#__system___float_tointeger
0c578     16 FB 51 FC | 	wrword	result1, local08
0c57c     28 4E 05 F1 | 	add	fp, #40
0c580     A7 12 02 FB | 	rdlong	arg01, fp
0c584     30 4E 05 F1 | 	add	fp, #48
0c588     A7 14 02 FB | 	rdlong	arg02, fp
0c58c     58 4E 85 F1 | 	sub	fp, #88
0c590     1F 14 E6 F4 | 	bitnot	arg02, #31
0c594     98 32 B1 FD | 	call	#__system___float_add
0c598     28 4E 05 F1 | 	add	fp, #40
0c59c     A7 FA 61 FC | 	wrlong	result1, fp
0c5a0     28 4E 85 F1 | 	sub	fp, #40
0c5a4     FD 12 02 F6 | 	mov	arg01, result1
0c5a8     00 14 06 F6 | 	mov	arg02, #0
0c5ac     01 16 06 F6 | 	mov	arg03, #1
0c5b0     80 3A B1 FD | 	call	#__system___float_cmp
0c5b4     00 FA 55 F2 | 	cmps	result1, #0 wc
0c5b8     28 4E 05 C1 |  if_b	add	fp, #40
0c5bc     A7 00 68 CC |  if_b	wrlong	#0, fp
0c5c0     28 4E 85 C1 |  if_b	sub	fp, #40
0c5c4     14 4E 05 F1 | 	add	fp, #20
0c5c8     A7 2E 02 FB | 	rdlong	local09, fp
0c5cc     01 2E 06 F1 | 	add	local09, #1
0c5d0     A7 2E 62 FC | 	wrlong	local09, fp
0c5d4     14 4E 85 F1 | 	sub	fp, #20
0c5d8     44 FF 9F FD | 	jmp	#LR__0977
0c5dc                 | LR__0978
0c5dc     20 4E 05 F1 | 	add	fp, #32
0c5e0     A7 28 02 FB | 	rdlong	local06, fp
0c5e4     09 28 66 F0 | 	shl	local06, #9
0c5e8     2C 00 00 FF 
0c5ec     D8 E4 05 F1 | 	add	objptr, ##22744
0c5f0     F2 28 02 F1 | 	add	local06, objptr
0c5f4     FE 29 06 F1 | 	add	local06, #510
0c5f8     14 01 58 FC | 	wrword	#0, local06
0c5fc                 | '   envbuf(channel,255)=0
0c5fc                 | '   for i=0 to 255 : print envbuf(channel,i), : next i
0c5fc     0C 4E 85 F1 | 	sub	fp, #12
0c600     A7 00 68 FC | 	wrlong	#0, fp
0c604     14 4E 85 F1 | 	sub	fp, #20
0c608     2C 00 00 FF 
0c60c     D8 E4 85 F1 | 	sub	objptr, ##22744
0c610                 | LR__0979
0c610     00 12 06 F6 | 	mov	arg01, #0
0c614     FC 63 B1 FD | 	call	#__system___getiolock_0474
0c618     FD 12 02 F6 | 	mov	arg01, result1
0c61c     64 0A B1 FD | 	call	#__system___lockmem
0c620     20 4E 05 F1 | 	add	fp, #32
0c624     A7 2E 02 FB | 	rdlong	local09, fp
0c628     09 2E 66 F0 | 	shl	local09, #9
0c62c     2C 00 00 FF 
0c630     D8 E4 05 F1 | 	add	objptr, ##22744
0c634     F2 2E 02 F1 | 	add	local09, objptr
0c638     0C 4E 85 F1 | 	sub	fp, #12
0c63c     A7 2C 02 FB | 	rdlong	local08, fp
0c640     14 4E 85 F1 | 	sub	fp, #20
0c644     01 2C 66 F0 | 	shl	local08, #1
0c648     17 2D 02 F1 | 	add	local08, local09
0c64c     16 15 E2 FA | 	rdword	arg02, local08
0c650     00 12 06 F6 | 	mov	arg01, #0
0c654     00 16 06 F6 | 	mov	arg03, #0
0c658     0A 18 06 F6 | 	mov	arg04, #10
0c65c     2C 00 00 FF 
0c660     D8 E4 85 F1 | 	sub	objptr, ##22744
0c664     A4 17 B1 FD | 	call	#__system___basic_print_unsigned
0c668     00 12 06 F6 | 	mov	arg01, #0
0c66c     09 14 06 F6 | 	mov	arg02, #9
0c670     00 16 06 F6 | 	mov	arg03, #0
0c674     B8 16 B1 FD | 	call	#__system___basic_print_char
0c678     00 12 06 F6 | 	mov	arg01, #0
0c67c     94 63 B1 FD | 	call	#__system___getiolock_0474
0c680     FD 00 68 FC | 	wrlong	#0, result1
0c684     14 4E 05 F1 | 	add	fp, #20
0c688     A7 2E 02 FB | 	rdlong	local09, fp
0c68c     01 2E 06 F1 | 	add	local09, #1
0c690     A7 2E 62 FC | 	wrlong	local09, fp
0c694     14 4E 85 F1 | 	sub	fp, #20
0c698     00 2F 56 F2 | 	cmps	local09, #256 wc
0c69c     70 FF 9F CD |  if_b	jmp	#LR__0979
0c6a0                 | LR__0980
0c6a0                 | LR__0981
0c6a0     A7 F0 03 F6 | 	mov	ptra, fp
0c6a4     B2 00 A0 FD | 	call	#popregs_
0c6a8                 | _do_defenv_ret
0c6a8     2D 00 64 FD | 	ret
0c6ac                 | 
0c6ac                 | ' 
0c6ac                 | ' 
0c6ac                 | ' sub do_play
0c6ac                 | _do_play
0c6ac     05 4A 05 F6 | 	mov	COUNT_, #5
0c6b0     A8 00 A0 FD | 	call	#pushregs_
0c6b4     74 F0 07 F1 | 	add	ptra, #116
0c6b8     60 4E 05 F1 | 	add	fp, #96
0c6bc     F5 25 A2 FF 
0c6c0     A7 AA 68 FC | 	wrlong	##1145825877, fp
0c6c4                 | ' speed_coeff=815.6614449376854599406528189911
0c6c4                 | ' 
0c6c4                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0c6c4     5C 4E 85 F1 | 	sub	fp, #92
0c6c8     A7 00 68 FC | 	wrlong	#0, fp
0c6cc     97 18 48 FB | 	callpa	#(@LR__0991-@LR__0990)>>2,fcache_load_ptr_
0c6d0                 | LR__0990
0c6d0     A7 16 02 FB | 	rdlong	arg03, fp
0c6d4     02 16 66 F0 | 	shl	arg03, #2
0c6d8     2C 4E 05 F1 | 	add	fp, #44
0c6dc     A7 16 02 F1 | 	add	arg03, fp
0c6e0     00 00 E0 FF 
0c6e4     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0c6e8     2C 4E 85 F1 | 	sub	fp, #44
0c6ec     A7 1E 02 FB | 	rdlong	local01, fp
0c6f0     01 1E 06 F1 | 	add	local01, #1
0c6f4     A7 1E 62 FC | 	wrlong	local01, fp
0c6f8     09 1E 56 F2 | 	cmps	local01, #9 wc
0c6fc     D0 FF 9F CD |  if_b	jmp	#LR__0990
0c700                 | LR__0991
0c700     04 4E 85 F1 | 	sub	fp, #4
0c704     6A 00 00 FF 
0c708     70 E4 05 F1 | 	add	objptr, ##54384
0c70c     F2 20 02 FB | 	rdlong	local02, objptr
0c710     10 23 02 F6 | 	mov	local03, local02
0c714     01 22 66 F0 | 	shl	local03, #1
0c718     10 23 02 F1 | 	add	local03, local02
0c71c     02 22 66 F0 | 	shl	local03, #2
0c720     03 00 00 FF 
0c724     04 E4 85 F1 | 	sub	objptr, ##1540
0c728     F2 22 02 F1 | 	add	local03, objptr
0c72c     11 25 02 FB | 	rdlong	local04, local03
0c730     A7 24 62 FC | 	wrlong	local04, fp
0c734                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0c734                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0c734                 | ' numpar=compiledline(lineptr_e).result.uresult
0c734                 | ' for i=numpar to 1 step -1 
0c734     04 4E 05 F1 | 	add	fp, #4
0c738     A7 24 62 FC | 	wrlong	local04, fp
0c73c     04 4E 85 F1 | 	sub	fp, #4
0c740     67 00 00 FF 
0c744     6C E4 85 F1 | 	sub	objptr, ##52844
0c748                 | LR__0992
0c748     60 DA BF FD | 	call	#_pop
0c74c     54 4E 05 F1 | 	add	fp, #84
0c750     A7 FA 61 FC | 	wrlong	result1, fp
0c754     04 4E 05 F1 | 	add	fp, #4
0c758     A7 FC 61 FC | 	wrlong	result2, fp
0c75c     04 4E 05 F1 | 	add	fp, #4
0c760     A7 FE 61 FC | 	wrlong	result3, fp
0c764     58 4E 85 F1 | 	sub	fp, #88
0c768     A7 22 02 FB | 	rdlong	local03, fp
0c76c     01 22 86 F1 | 	sub	local03, #1
0c770     02 22 66 F0 | 	shl	local03, #2
0c774     2C 4E 05 F1 | 	add	fp, #44
0c778     A7 22 02 F1 | 	add	local03, fp
0c77c     24 4E 05 F1 | 	add	fp, #36
0c780     A7 26 02 F6 | 	mov	local05, fp
0c784     13 13 02 F6 | 	mov	arg01, local05
0c788     54 4E 85 F1 | 	sub	fp, #84
0c78c     20 67 B0 FD | 	call	#_converttofloat
0c790     11 FB 61 FC | 	wrlong	result1, local03
0c794     04 4E 05 F1 | 	add	fp, #4
0c798     A7 1E 02 FB | 	rdlong	local01, fp
0c79c     01 1E 86 F1 | 	sub	local01, #1
0c7a0     A7 1E 62 FC | 	wrlong	local01, fp
0c7a4     04 4E 85 F1 | 	sub	fp, #4
0c7a8     01 1E 56 F2 | 	cmps	local01, #1 wc
0c7ac     98 FF 9F 3D |  if_ae	jmp	#LR__0992
0c7b0                 | ' if params(0)<0 then channel=0 else channel=round(params(0))
0c7b0     30 4E 05 F1 | 	add	fp, #48
0c7b4     A7 12 02 FB | 	rdlong	arg01, fp
0c7b8     30 4E 85 F1 | 	sub	fp, #48
0c7bc     00 14 06 F6 | 	mov	arg02, #0
0c7c0     01 16 06 F6 | 	mov	arg03, #1
0c7c4     6C 38 B1 FD | 	call	#__system___float_cmp
0c7c8     00 FA 55 F2 | 	cmps	result1, #0 wc
0c7cc     0C 4E 05 C1 |  if_b	add	fp, #12
0c7d0     A7 00 68 CC |  if_b	wrlong	#0, fp
0c7d4     0C 4E 85 C1 |  if_b	sub	fp, #12
0c7d8     20 00 90 CD |  if_b	jmp	#LR__0993
0c7dc     30 4E 05 F1 | 	add	fp, #48
0c7e0     A7 12 02 FB | 	rdlong	arg01, fp
0c7e4     30 4E 85 F1 | 	sub	fp, #48
0c7e8     01 14 06 F6 | 	mov	arg02, #1
0c7ec     D8 38 B1 FD | 	call	#__system___float_tointeger
0c7f0     0C 4E 05 F1 | 	add	fp, #12
0c7f4     A7 FA 61 FC | 	wrlong	result1, fp
0c7f8     0C 4E 85 F1 | 	sub	fp, #12
0c7fc                 | LR__0993
0c7fc                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0c7fc     34 4E 05 F1 | 	add	fp, #52
0c800     A7 12 02 FB | 	rdlong	arg01, fp
0c804     34 4E 85 F1 | 	sub	fp, #52
0c808     00 14 06 F6 | 	mov	arg02, #0
0c80c     01 16 06 F6 | 	mov	arg03, #1
0c810     20 38 B1 FD | 	call	#__system___float_cmp
0c814     00 FA 55 F2 | 	cmps	result1, #0 wc
0c818     40 00 90 3D |  if_ae	jmp	#LR__0994
0c81c     0C 4E 05 F1 | 	add	fp, #12
0c820     A7 20 02 FB | 	rdlong	local02, fp
0c824     10 23 02 F6 | 	mov	local03, local02
0c828     01 22 66 F0 | 	shl	local03, #1
0c82c     10 23 02 F1 | 	add	local03, local02
0c830     03 22 66 F0 | 	shl	local03, #3
0c834     34 00 00 FF 
0c838     38 E5 05 F1 | 	add	objptr, ##26936
0c83c     F2 22 02 F1 | 	add	local03, objptr
0c840     11 23 02 FB | 	rdlong	local03, local03
0c844     58 4E 05 F1 | 	add	fp, #88
0c848     A7 22 62 FC | 	wrlong	local03, fp
0c84c     64 4E 85 F1 | 	sub	fp, #100
0c850     34 00 00 FF 
0c854     38 E5 85 F1 | 	sub	objptr, ##26936
0c858     44 00 90 FD | 	jmp	#LR__0995
0c85c                 | LR__0994
0c85c     34 4E 05 F1 | 	add	fp, #52
0c860     A7 24 02 FB | 	rdlong	local04, fp
0c864     30 4E 05 F1 | 	add	fp, #48
0c868     A7 24 62 FC | 	wrlong	local04, fp
0c86c     58 4E 85 F1 | 	sub	fp, #88
0c870     A7 20 02 FB | 	rdlong	local02, fp
0c874     10 23 02 F6 | 	mov	local03, local02
0c878     01 22 66 F0 | 	shl	local03, #1
0c87c     10 23 02 F1 | 	add	local03, local02
0c880     03 22 66 F0 | 	shl	local03, #3
0c884     34 00 00 FF 
0c888     38 E5 05 F1 | 	add	objptr, ##26936
0c88c     F2 22 02 F1 | 	add	local03, objptr
0c890     0C 4E 85 F1 | 	sub	fp, #12
0c894     11 25 62 FC | 	wrlong	local04, local03
0c898     34 00 00 FF 
0c89c     38 E5 85 F1 | 	sub	objptr, ##26936
0c8a0                 | LR__0995
0c8a0                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
0c8a0     3C 4E 05 F1 | 	add	fp, #60
0c8a4     A7 12 02 FB | 	rdlong	arg01, fp
0c8a8     3C 4E 85 F1 | 	sub	fp, #60
0c8ac     00 14 06 F6 | 	mov	arg02, #0
0c8b0     01 16 06 F6 | 	mov	arg03, #1
0c8b4     7C 37 B1 FD | 	call	#__system___float_cmp
0c8b8     00 FA 55 F2 | 	cmps	result1, #0 wc
0c8bc     24 00 90 CD |  if_b	jmp	#LR__0996
0c8c0     3C 4E 05 F1 | 	add	fp, #60
0c8c4     A7 12 02 FB | 	rdlong	arg01, fp
0c8c8     3C 4E 85 F1 | 	sub	fp, #60
0c8cc     89 C1 20 FF 
0c8d0     6F 14 06 F6 | 	mov	arg02, ##1099108975
0c8d4     01 16 66 F6 | 	neg	arg03, #1
0c8d8     58 37 B1 FD | 	call	#__system___float_cmp
0c8dc     01 FA 55 F2 | 	cmps	result1, #1 wc
0c8e0     44 00 90 CD |  if_b	jmp	#LR__0997
0c8e4                 | LR__0996
0c8e4     0C 4E 05 F1 | 	add	fp, #12
0c8e8     A7 20 02 FB | 	rdlong	local02, fp
0c8ec     10 23 02 F6 | 	mov	local03, local02
0c8f0     01 22 66 F0 | 	shl	local03, #1
0c8f4     10 23 02 F1 | 	add	local03, local02
0c8f8     03 22 66 F0 | 	shl	local03, #3
0c8fc     34 00 00 FF 
0c900     38 E5 05 F1 | 	add	objptr, ##26936
0c904     F2 22 02 F1 | 	add	local03, objptr
0c908     0C 22 06 F1 | 	add	local03, #12
0c90c     11 23 02 FB | 	rdlong	local03, local03
0c910     60 4E 05 F1 | 	add	fp, #96
0c914     A7 22 62 FC | 	wrlong	local03, fp
0c918     6C 4E 85 F1 | 	sub	fp, #108
0c91c     34 00 00 FF 
0c920     38 E5 85 F1 | 	sub	objptr, ##26936
0c924     48 00 90 FD | 	jmp	#LR__0998
0c928                 | LR__0997
0c928     3C 4E 05 F1 | 	add	fp, #60
0c92c     A7 24 02 FB | 	rdlong	local04, fp
0c930     30 4E 05 F1 | 	add	fp, #48
0c934     A7 24 62 FC | 	wrlong	local04, fp
0c938     60 4E 85 F1 | 	sub	fp, #96
0c93c     A7 20 02 FB | 	rdlong	local02, fp
0c940     10 23 02 F6 | 	mov	local03, local02
0c944     01 22 66 F0 | 	shl	local03, #1
0c948     10 23 02 F1 | 	add	local03, local02
0c94c     03 22 66 F0 | 	shl	local03, #3
0c950     34 00 00 FF 
0c954     38 E5 05 F1 | 	add	objptr, ##26936
0c958     F2 22 02 F1 | 	add	local03, objptr
0c95c     0C 4E 85 F1 | 	sub	fp, #12
0c960     0C 22 06 F1 | 	add	local03, #12
0c964     11 25 62 FC | 	wrlong	local04, local03
0c968     34 00 00 FF 
0c96c     38 E5 85 F1 | 	sub	objptr, ##26936
0c970                 | LR__0998
0c970                 | ' if params(4)<0 orelse params(4)>8.0 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
0c970     40 4E 05 F1 | 	add	fp, #64
0c974     A7 12 02 FB | 	rdlong	arg01, fp
0c978     40 4E 85 F1 | 	sub	fp, #64
0c97c     00 14 06 F6 | 	mov	arg02, #0
0c980     01 16 06 F6 | 	mov	arg03, #1
0c984     AC 36 B1 FD | 	call	#__system___float_cmp
0c988     00 FA 55 F2 | 	cmps	result1, #0 wc
0c98c     24 00 90 CD |  if_b	jmp	#LR__0999
0c990     40 4E 05 F1 | 	add	fp, #64
0c994     A7 12 02 FB | 	rdlong	arg01, fp
0c998     40 4E 85 F1 | 	sub	fp, #64
0c99c     00 80 20 FF 
0c9a0     00 14 06 F6 | 	mov	arg02, ##1090519040
0c9a4     01 16 66 F6 | 	neg	arg03, #1
0c9a8     88 36 B1 FD | 	call	#__system___float_cmp
0c9ac     01 FA 55 F2 | 	cmps	result1, #1 wc
0c9b0     48 00 90 CD |  if_b	jmp	#LR__1000
0c9b4                 | LR__0999
0c9b4     0C 4E 05 F1 | 	add	fp, #12
0c9b8     A7 22 02 FB | 	rdlong	local03, fp
0c9bc     11 27 02 F6 | 	mov	local05, local03
0c9c0     01 26 66 F0 | 	shl	local05, #1
0c9c4     11 27 02 F1 | 	add	local05, local03
0c9c8     03 26 66 F0 | 	shl	local05, #3
0c9cc     34 00 00 FF 
0c9d0     38 E5 05 F1 | 	add	objptr, ##26936
0c9d4     F2 26 02 F1 | 	add	local05, objptr
0c9d8     04 26 06 F1 | 	add	local05, #4
0c9dc     13 27 C2 FA | 	rdbyte	local05, local05
0c9e0     13 25 E2 F8 | 	getbyte	local04, local05, #0
0c9e4     14 4E 05 F1 | 	add	fp, #20
0c9e8     A7 24 62 FC | 	wrlong	local04, fp
0c9ec     20 4E 85 F1 | 	sub	fp, #32
0c9f0     34 00 00 FF 
0c9f4     38 E5 85 F1 | 	sub	objptr, ##26936
0c9f8     54 00 90 FD | 	jmp	#LR__1001
0c9fc                 | LR__1000
0c9fc     40 4E 05 F1 | 	add	fp, #64
0ca00     A7 12 02 FB | 	rdlong	arg01, fp
0ca04     40 4E 85 F1 | 	sub	fp, #64
0ca08     01 14 06 F6 | 	mov	arg02, #1
0ca0c     B8 36 B1 FD | 	call	#__system___float_tointeger
0ca10     20 4E 05 F1 | 	add	fp, #32
0ca14     A7 FA 61 FC | 	wrlong	result1, fp
0ca18     14 4E 85 F1 | 	sub	fp, #20
0ca1c     A7 20 02 FB | 	rdlong	local02, fp
0ca20     10 23 02 F6 | 	mov	local03, local02
0ca24     01 22 66 F0 | 	shl	local03, #1
0ca28     10 23 02 F1 | 	add	local03, local02
0ca2c     03 22 66 F0 | 	shl	local03, #3
0ca30     34 00 00 FF 
0ca34     38 E5 05 F1 | 	add	objptr, ##26936
0ca38     F2 22 02 F1 | 	add	local03, objptr
0ca3c     0C 4E 85 F1 | 	sub	fp, #12
0ca40     04 22 06 F1 | 	add	local03, #4
0ca44     11 FB 41 FC | 	wrbyte	result1, local03
0ca48     34 00 00 FF 
0ca4c     38 E5 85 F1 | 	sub	objptr, ##26936
0ca50                 | LR__1001
0ca50                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
0ca50     44 4E 05 F1 | 	add	fp, #68
0ca54     A7 12 02 FB | 	rdlong	arg01, fp
0ca58     44 4E 85 F1 | 	sub	fp, #68
0ca5c     00 14 06 F6 | 	mov	arg02, #0
0ca60     01 16 06 F6 | 	mov	arg03, #1
0ca64     CC 35 B1 FD | 	call	#__system___float_cmp
0ca68     00 FA 55 F2 | 	cmps	result1, #0 wc
0ca6c     24 00 90 CD |  if_b	jmp	#LR__1002
0ca70     44 4E 05 F1 | 	add	fp, #68
0ca74     A7 12 02 FB | 	rdlong	arg01, fp
0ca78     44 4E 85 F1 | 	sub	fp, #68
0ca7c     00 80 20 FF 
0ca80     00 14 06 F6 | 	mov	arg02, ##1090519040
0ca84     01 16 66 F6 | 	neg	arg03, #1
0ca88     A8 35 B1 FD | 	call	#__system___float_cmp
0ca8c     01 FA 55 F2 | 	cmps	result1, #1 wc
0ca90     48 00 90 CD |  if_b	jmp	#LR__1003
0ca94                 | LR__1002
0ca94     0C 4E 05 F1 | 	add	fp, #12
0ca98     A7 22 02 FB | 	rdlong	local03, fp
0ca9c     11 27 02 F6 | 	mov	local05, local03
0caa0     01 26 66 F0 | 	shl	local05, #1
0caa4     11 27 02 F1 | 	add	local05, local03
0caa8     03 26 66 F0 | 	shl	local05, #3
0caac     34 00 00 FF 
0cab0     38 E5 05 F1 | 	add	objptr, ##26936
0cab4     F2 26 02 F1 | 	add	local05, objptr
0cab8     05 26 06 F1 | 	add	local05, #5
0cabc     13 27 C2 FA | 	rdbyte	local05, local05
0cac0     13 25 E2 F8 | 	getbyte	local04, local05, #0
0cac4     18 4E 05 F1 | 	add	fp, #24
0cac8     A7 24 62 FC | 	wrlong	local04, fp
0cacc     24 4E 85 F1 | 	sub	fp, #36
0cad0     34 00 00 FF 
0cad4     38 E5 85 F1 | 	sub	objptr, ##26936
0cad8     54 00 90 FD | 	jmp	#LR__1004
0cadc                 | LR__1003
0cadc     44 4E 05 F1 | 	add	fp, #68
0cae0     A7 12 02 FB | 	rdlong	arg01, fp
0cae4     44 4E 85 F1 | 	sub	fp, #68
0cae8     01 14 06 F6 | 	mov	arg02, #1
0caec     D8 35 B1 FD | 	call	#__system___float_tointeger
0caf0     24 4E 05 F1 | 	add	fp, #36
0caf4     A7 FA 61 FC | 	wrlong	result1, fp
0caf8     18 4E 85 F1 | 	sub	fp, #24
0cafc     A7 20 02 FB | 	rdlong	local02, fp
0cb00     10 23 02 F6 | 	mov	local03, local02
0cb04     01 22 66 F0 | 	shl	local03, #1
0cb08     10 23 02 F1 | 	add	local03, local02
0cb0c     03 22 66 F0 | 	shl	local03, #3
0cb10     34 00 00 FF 
0cb14     38 E5 05 F1 | 	add	objptr, ##26936
0cb18     F2 22 02 F1 | 	add	local03, objptr
0cb1c     0C 4E 85 F1 | 	sub	fp, #12
0cb20     05 22 06 F1 | 	add	local03, #5
0cb24     11 FB 41 FC | 	wrbyte	result1, local03
0cb28     34 00 00 FF 
0cb2c     38 E5 85 F1 | 	sub	objptr, ##26936
0cb30                 | LR__1004
0cb30                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
0cb30     48 4E 05 F1 | 	add	fp, #72
0cb34     A7 12 02 FB | 	rdlong	arg01, fp
0cb38     48 4E 85 F1 | 	sub	fp, #72
0cb3c     00 14 06 F6 | 	mov	arg02, #0
0cb40     01 16 06 F6 | 	mov	arg03, #1
0cb44     EC 34 B1 FD | 	call	#__system___float_cmp
0cb48     00 FA 55 F2 | 	cmps	result1, #0 wc
0cb4c     24 00 90 CD |  if_b	jmp	#LR__1005
0cb50     48 4E 05 F1 | 	add	fp, #72
0cb54     A7 12 02 FB | 	rdlong	arg01, fp
0cb58     48 4E 85 F1 | 	sub	fp, #72
0cb5c     00 3D 22 FF 
0cb60     00 14 06 F6 | 	mov	arg02, ##1148846080
0cb64     01 16 66 F6 | 	neg	arg03, #1
0cb68     C8 34 B1 FD | 	call	#__system___float_cmp
0cb6c     01 FA 55 F2 | 	cmps	result1, #1 wc
0cb70     44 00 90 CD |  if_b	jmp	#LR__1006
0cb74                 | LR__1005
0cb74     0C 4E 05 F1 | 	add	fp, #12
0cb78     A7 20 02 FB | 	rdlong	local02, fp
0cb7c     10 23 02 F6 | 	mov	local03, local02
0cb80     01 22 66 F0 | 	shl	local03, #1
0cb84     10 23 02 F1 | 	add	local03, local02
0cb88     03 22 66 F0 | 	shl	local03, #3
0cb8c     34 00 00 FF 
0cb90     38 E5 05 F1 | 	add	objptr, ##26936
0cb94     F2 22 02 F1 | 	add	local03, objptr
0cb98     08 22 06 F1 | 	add	local03, #8
0cb9c     11 25 02 FB | 	rdlong	local04, local03
0cba0     64 4E 05 F1 | 	add	fp, #100
0cba4     A7 24 62 FC | 	wrlong	local04, fp
0cba8     70 4E 85 F1 | 	sub	fp, #112
0cbac     34 00 00 FF 
0cbb0     38 E5 85 F1 | 	sub	objptr, ##26936
0cbb4     48 00 90 FD | 	jmp	#LR__1007
0cbb8                 | LR__1006
0cbb8     48 4E 05 F1 | 	add	fp, #72
0cbbc     A7 24 02 FB | 	rdlong	local04, fp
0cbc0     28 4E 05 F1 | 	add	fp, #40
0cbc4     A7 24 62 FC | 	wrlong	local04, fp
0cbc8     64 4E 85 F1 | 	sub	fp, #100
0cbcc     A7 20 02 FB | 	rdlong	local02, fp
0cbd0     10 23 02 F6 | 	mov	local03, local02
0cbd4     01 22 66 F0 | 	shl	local03, #1
0cbd8     10 23 02 F1 | 	add	local03, local02
0cbdc     03 22 66 F0 | 	shl	local03, #3
0cbe0     34 00 00 FF 
0cbe4     38 E5 05 F1 | 	add	objptr, ##26936
0cbe8     F2 22 02 F1 | 	add	local03, objptr
0cbec     0C 4E 85 F1 | 	sub	fp, #12
0cbf0     08 22 06 F1 | 	add	local03, #8
0cbf4     11 25 62 FC | 	wrlong	local04, local03
0cbf8     34 00 00 FF 
0cbfc     38 E5 85 F1 | 	sub	objptr, ##26936
0cc00                 | LR__1007
0cc00                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
0cc00     38 4E 05 F1 | 	add	fp, #56
0cc04     A7 12 02 FB | 	rdlong	arg01, fp
0cc08     38 4E 85 F1 | 	sub	fp, #56
0cc0c     00 14 06 F6 | 	mov	arg02, #0
0cc10     01 16 06 F6 | 	mov	arg03, #1
0cc14     1C 34 B1 FD | 	call	#__system___float_cmp
0cc18     00 FA 55 F2 | 	cmps	result1, #0 wc
0cc1c     24 00 90 CD |  if_b	jmp	#LR__1008
0cc20     38 4E 05 F1 | 	add	fp, #56
0cc24     A7 12 02 FB | 	rdlong	arg01, fp
0cc28     38 4E 85 F1 | 	sub	fp, #56
0cc2c     20 0E 23 FF 
0cc30     00 14 06 F6 | 	mov	arg02, ##1176256512
0cc34     01 16 66 F6 | 	neg	arg03, #1
0cc38     F8 33 B1 FD | 	call	#__system___float_cmp
0cc3c     01 FA 55 F2 | 	cmps	result1, #1 wc
0cc40     48 00 90 CD |  if_b	jmp	#LR__1009
0cc44                 | LR__1008
0cc44     0C 4E 05 F1 | 	add	fp, #12
0cc48     A7 22 02 FB | 	rdlong	local03, fp
0cc4c     11 27 02 F6 | 	mov	local05, local03
0cc50     01 26 66 F0 | 	shl	local05, #1
0cc54     11 27 02 F1 | 	add	local05, local03
0cc58     03 26 66 F0 | 	shl	local05, #3
0cc5c     34 00 00 FF 
0cc60     38 E5 05 F1 | 	add	objptr, ##26936
0cc64     F2 26 02 F1 | 	add	local05, objptr
0cc68     06 26 06 F1 | 	add	local05, #6
0cc6c     13 27 E2 FA | 	rdword	local05, local05
0cc70     13 25 32 F9 | 	getword	local04, local05, #0
0cc74     1C 4E 05 F1 | 	add	fp, #28
0cc78     A7 24 62 FC | 	wrlong	local04, fp
0cc7c     28 4E 85 F1 | 	sub	fp, #40
0cc80     34 00 00 FF 
0cc84     38 E5 85 F1 | 	sub	objptr, ##26936
0cc88     54 00 90 FD | 	jmp	#LR__1010
0cc8c                 | LR__1009
0cc8c     38 4E 05 F1 | 	add	fp, #56
0cc90     A7 12 02 FB | 	rdlong	arg01, fp
0cc94     38 4E 85 F1 | 	sub	fp, #56
0cc98     01 14 06 F6 | 	mov	arg02, #1
0cc9c     28 34 B1 FD | 	call	#__system___float_tointeger
0cca0     28 4E 05 F1 | 	add	fp, #40
0cca4     A7 FA 61 FC | 	wrlong	result1, fp
0cca8     1C 4E 85 F1 | 	sub	fp, #28
0ccac     A7 20 02 FB | 	rdlong	local02, fp
0ccb0     10 23 02 F6 | 	mov	local03, local02
0ccb4     01 22 66 F0 | 	shl	local03, #1
0ccb8     10 23 02 F1 | 	add	local03, local02
0ccbc     03 22 66 F0 | 	shl	local03, #3
0ccc0     34 00 00 FF 
0ccc4     38 E5 05 F1 | 	add	objptr, ##26936
0ccc8     F2 22 02 F1 | 	add	local03, objptr
0cccc     0C 4E 85 F1 | 	sub	fp, #12
0ccd0     06 22 06 F1 | 	add	local03, #6
0ccd4     11 FB 51 FC | 	wrword	result1, local03
0ccd8     34 00 00 FF 
0ccdc     38 E5 85 F1 | 	sub	objptr, ##26936
0cce0                 | LR__1010
0cce0                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0cce0     4C 4E 05 F1 | 	add	fp, #76
0cce4     A7 12 02 FB | 	rdlong	arg01, fp
0cce8     4C 4E 85 F1 | 	sub	fp, #76
0ccec     00 C0 5F FF 
0ccf0     00 14 06 F6 | 	mov	arg02, ##-1082130432
0ccf4     01 16 06 F6 | 	mov	arg03, #1
0ccf8     38 33 B1 FD | 	call	#__system___float_cmp
0ccfc     00 FA 55 F2 | 	cmps	result1, #0 wc
0cd00     24 00 90 CD |  if_b	jmp	#LR__1011
0cd04     4C 4E 05 F1 | 	add	fp, #76
0cd08     A7 12 02 FB | 	rdlong	arg01, fp
0cd0c     4C 4E 85 F1 | 	sub	fp, #76
0cd10     00 C0 1F FF 
0cd14     00 14 06 F6 | 	mov	arg02, ##1065353216
0cd18     01 16 66 F6 | 	neg	arg03, #1
0cd1c     14 33 B1 FD | 	call	#__system___float_cmp
0cd20     01 FA 55 F2 | 	cmps	result1, #1 wc
0cd24     44 00 90 CD |  if_b	jmp	#LR__1012
0cd28                 | LR__1011
0cd28     0C 4E 05 F1 | 	add	fp, #12
0cd2c     A7 20 02 FB | 	rdlong	local02, fp
0cd30     10 23 02 F6 | 	mov	local03, local02
0cd34     01 22 66 F0 | 	shl	local03, #1
0cd38     10 23 02 F1 | 	add	local03, local02
0cd3c     03 22 66 F0 | 	shl	local03, #3
0cd40     34 00 00 FF 
0cd44     38 E5 05 F1 | 	add	objptr, ##26936
0cd48     F2 22 02 F1 | 	add	local03, objptr
0cd4c     10 22 06 F1 | 	add	local03, #16
0cd50     11 27 02 FB | 	rdlong	local05, local03
0cd54     5C 4E 05 F1 | 	add	fp, #92
0cd58     A7 26 62 FC | 	wrlong	local05, fp
0cd5c     68 4E 85 F1 | 	sub	fp, #104
0cd60     34 00 00 FF 
0cd64     38 E5 85 F1 | 	sub	objptr, ##26936
0cd68     48 00 90 FD | 	jmp	#LR__1013
0cd6c                 | LR__1012
0cd6c     4C 4E 05 F1 | 	add	fp, #76
0cd70     A7 26 02 FB | 	rdlong	local05, fp
0cd74     1C 4E 05 F1 | 	add	fp, #28
0cd78     A7 26 62 FC | 	wrlong	local05, fp
0cd7c     5C 4E 85 F1 | 	sub	fp, #92
0cd80     A7 20 02 FB | 	rdlong	local02, fp
0cd84     10 23 02 F6 | 	mov	local03, local02
0cd88     01 22 66 F0 | 	shl	local03, #1
0cd8c     10 23 02 F1 | 	add	local03, local02
0cd90     03 22 66 F0 | 	shl	local03, #3
0cd94     34 00 00 FF 
0cd98     38 E5 05 F1 | 	add	objptr, ##26936
0cd9c     F2 22 02 F1 | 	add	local03, objptr
0cda0     0C 4E 85 F1 | 	sub	fp, #12
0cda4     10 22 06 F1 | 	add	local03, #16
0cda8     11 27 62 FC | 	wrlong	local05, local03
0cdac     34 00 00 FF 
0cdb0     38 E5 85 F1 | 	sub	objptr, ##26936
0cdb4                 | LR__1013
0cdb4                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0cdb4     50 4E 05 F1 | 	add	fp, #80
0cdb8     A7 12 02 FB | 	rdlong	arg01, fp
0cdbc     50 4E 85 F1 | 	sub	fp, #80
0cdc0     00 14 06 F6 | 	mov	arg02, #0
0cdc4     01 16 06 F6 | 	mov	arg03, #1
0cdc8     68 32 B1 FD | 	call	#__system___float_cmp
0cdcc     00 FA 55 F2 | 	cmps	result1, #0 wc
0cdd0     24 00 90 CD |  if_b	jmp	#LR__1014
0cdd4     50 4E 05 F1 | 	add	fp, #80
0cdd8     A7 12 02 FB | 	rdlong	arg01, fp
0cddc     50 4E 85 F1 | 	sub	fp, #80
0cde0     80 BF 21 FF 
0cde4     00 14 06 F6 | 	mov	arg02, ##1132396544
0cde8     01 16 66 F6 | 	neg	arg03, #1
0cdec     44 32 B1 FD | 	call	#__system___float_cmp
0cdf0     01 FA 55 F2 | 	cmps	result1, #1 wc
0cdf4     44 00 90 CD |  if_b	jmp	#LR__1015
0cdf8                 | LR__1014
0cdf8     0C 4E 05 F1 | 	add	fp, #12
0cdfc     A7 22 02 FB | 	rdlong	local03, fp
0ce00     11 27 02 F6 | 	mov	local05, local03
0ce04     01 26 66 F0 | 	shl	local05, #1
0ce08     11 27 02 F1 | 	add	local05, local03
0ce0c     03 26 66 F0 | 	shl	local05, #3
0ce10     34 00 00 FF 
0ce14     38 E5 05 F1 | 	add	objptr, ##26936
0ce18     F2 26 02 F1 | 	add	local05, objptr
0ce1c     14 26 06 F1 | 	add	local05, #20
0ce20     13 25 E2 FA | 	rdword	local04, local05
0ce24     20 4E 05 F1 | 	add	fp, #32
0ce28     A7 24 62 FC | 	wrlong	local04, fp
0ce2c     2C 4E 85 F1 | 	sub	fp, #44
0ce30     34 00 00 FF 
0ce34     38 E5 85 F1 | 	sub	objptr, ##26936
0ce38     54 00 90 FD | 	jmp	#LR__1016
0ce3c                 | LR__1015
0ce3c     50 4E 05 F1 | 	add	fp, #80
0ce40     A7 12 02 FB | 	rdlong	arg01, fp
0ce44     50 4E 85 F1 | 	sub	fp, #80
0ce48     01 14 06 F6 | 	mov	arg02, #1
0ce4c     78 32 B1 FD | 	call	#__system___float_tointeger
0ce50     2C 4E 05 F1 | 	add	fp, #44
0ce54     A7 FA 61 FC | 	wrlong	result1, fp
0ce58     20 4E 85 F1 | 	sub	fp, #32
0ce5c     A7 20 02 FB | 	rdlong	local02, fp
0ce60     10 23 02 F6 | 	mov	local03, local02
0ce64     01 22 66 F0 | 	shl	local03, #1
0ce68     10 23 02 F1 | 	add	local03, local02
0ce6c     03 22 66 F0 | 	shl	local03, #3
0ce70     34 00 00 FF 
0ce74     38 E5 05 F1 | 	add	objptr, ##26936
0ce78     F2 22 02 F1 | 	add	local03, objptr
0ce7c     0C 4E 85 F1 | 	sub	fp, #12
0ce80     14 22 06 F1 | 	add	local03, #20
0ce84     11 FB 51 FC | 	wrword	result1, local03
0ce88     34 00 00 FF 
0ce8c     38 E5 85 F1 | 	sub	objptr, ##26936
0ce90                 | LR__1016
0ce90     60 4E 05 F1 | 	add	fp, #96
0ce94     A7 12 02 FB | 	rdlong	arg01, fp
0ce98     10 4E 05 F1 | 	add	fp, #16
0ce9c     A7 14 02 FB | 	rdlong	arg02, fp
0cea0     70 4E 85 F1 | 	sub	fp, #112
0cea4     5C 2F B1 FD | 	call	#__system___float_div
0cea8     FD 12 02 F6 | 	mov	arg01, result1
0ceac     01 14 06 F6 | 	mov	arg02, #1
0ceb0     14 32 B1 FD | 	call	#__system___float_tointeger
0ceb4     FD 24 02 F6 | 	mov	local04, result1
0ceb8     14 4E 05 F1 | 	add	fp, #20
0cebc     A7 24 62 FC | 	wrlong	local04, fp
0cec0     54 4E 05 F1 | 	add	fp, #84
0cec4     A7 14 02 FB | 	rdlong	arg02, fp
0cec8     68 4E 85 F1 | 	sub	fp, #104
0cecc     00 00 23 FF 
0ced0     00 12 06 F6 | 	mov	arg01, ##1174405120
0ced4     28 2D B1 FD | 	call	#__system___float_mul
0ced8     FD 12 02 F6 | 	mov	arg01, result1
0cedc     01 14 06 F6 | 	mov	arg02, #1
0cee0     E4 31 B1 FD | 	call	#__system___float_tointeger
0cee4     0D 24 C6 F9 | 	decod	local04, #13
0cee8     FD 24 02 F1 | 	add	local04, result1
0ceec     18 4E 05 F1 | 	add	fp, #24
0cef0     A7 24 62 FC | 	wrlong	local04, fp
0cef4     54 4E 05 F1 | 	add	fp, #84
0cef8     A7 14 02 FB | 	rdlong	arg02, fp
0cefc     6C 4E 85 F1 | 	sub	fp, #108
0cf00     00 3D 22 FF 
0cf04     00 12 06 F6 | 	mov	arg01, ##1148846080
0cf08     F4 2C B1 FD | 	call	#__system___float_mul
0cf0c     FD 12 02 F6 | 	mov	arg01, result1
0cf10     01 14 06 F6 | 	mov	arg02, #1
0cf14     B0 31 B1 FD | 	call	#__system___float_tointeger
0cf18     1C 4E 05 F1 | 	add	fp, #28
0cf1c     A7 FA 61 FC | 	wrlong	result1, fp
0cf20     57 00 00 FF 
0cf24     00 E4 05 F1 | 	add	objptr, ##44544
0cf28     F2 24 02 FB | 	rdlong	local04, objptr
0cf2c     57 00 00 FF 
0cf30     00 E4 85 F1 | 	sub	objptr, ##44544
0cf34     10 4E 85 F1 | 	sub	fp, #16
0cf38     A7 20 02 FB | 	rdlong	local02, fp
0cf3c     06 20 66 F0 | 	shl	local02, #6
0cf40     10 25 02 F1 | 	add	local04, local02
0cf44     04 4E 85 F1 | 	sub	fp, #4
0cf48     A7 24 62 FC | 	wrlong	local04, fp
0cf4c     5C 4E 05 F1 | 	add	fp, #92
0cf50     A7 12 02 FB | 	rdlong	arg01, fp
0cf54     64 4E 85 F1 | 	sub	fp, #100
0cf58     72 3F 20 FF 
0cf5c     EA 14 06 F6 | 	mov	arg02, ##1082057962
0cf60     9C 2C B1 FD | 	call	#__system___float_mul
0cf64     FD 12 02 F6 | 	mov	arg01, result1
0cf68     01 14 06 F6 | 	mov	arg02, #1
0cf6c     58 31 B1 FD | 	call	#__system___float_tointeger
0cf70     10 4E 05 F1 | 	add	fp, #16
0cf74     A7 FA 61 FC | 	wrlong	result1, fp
0cf78                 | ' 
0cf78                 | ' speed=round(speed_coeff/slen)
0cf78                 | ' ipan=8192+round(8192*pan)
0cf78                 | ' ivol=round(1000.0*vol)
0cf78                 | ' base2=base+64*channel
0cf78                 | ' skip=round(freq*3.9827219) 
0cf78                 | ' if wave <8 then 
0cf78     10 4E 05 F1 | 	add	fp, #16
0cf7c     A7 24 02 FB | 	rdlong	local04, fp
0cf80     20 4E 85 F1 | 	sub	fp, #32
0cf84     08 24 56 F2 | 	cmps	local04, #8 wc
0cf88     40 00 90 3D |  if_ae	jmp	#LR__1017
0cf8c     08 4E 05 F1 | 	add	fp, #8
0cf90     A7 12 02 FB | 	rdlong	arg01, fp
0cf94     08 12 06 F1 | 	add	arg01, #8
0cf98     18 4E 05 F1 | 	add	fp, #24
0cf9c     A7 14 02 FB | 	rdlong	arg02, fp
0cfa0     20 4E 85 F1 | 	sub	fp, #32
0cfa4     0B 14 66 F0 | 	shl	arg02, #11
0cfa8     0C 00 00 FF 
0cfac     D8 E4 05 F1 | 	add	objptr, ##6360
0cfb0     F2 14 02 F1 | 	add	arg02, objptr
0cfb4     0C 00 00 FF 
0cfb8     D8 E4 85 F1 | 	sub	objptr, ##6360
0cfbc     00 00 60 FF 
0cfc0     00 14 06 F1 | 	add	arg02, ##-1073741824
0cfc4     09 15 62 FC | 	wrlong	arg02, arg01
0cfc8     18 00 90 FD | 	jmp	#LR__1018
0cfcc                 | LR__1017
0cfcc     08 4E 05 F1 | 	add	fp, #8
0cfd0     A7 12 02 FB | 	rdlong	arg01, fp
0cfd4     08 4E 85 F1 | 	sub	fp, #8
0cfd8     08 12 06 F1 | 	add	arg01, #8
0cfdc     00 00 E4 FF 
0cfe0     09 01 68 FC | 	wrlong	##-939524096, arg01
0cfe4                 | LR__1018
0cfe4     08 4E 05 F1 | 	add	fp, #8
0cfe8     A7 12 02 FB | 	rdlong	arg01, fp
0cfec     10 12 06 F1 | 	add	arg01, #16
0cff0     04 00 80 FF 
0cff4     09 01 68 FC | 	wrlong	##2048, arg01
0cff8     A7 12 02 FB | 	rdlong	arg01, fp
0cffc     0C 12 06 F1 | 	add	arg01, #12
0d000     09 01 68 FC | 	wrlong	#0, arg01
0d004     A7 12 02 FB | 	rdlong	arg01, fp
0d008     14 12 06 F1 | 	add	arg01, #20
0d00c     14 4E 05 F1 | 	add	fp, #20
0d010     A7 14 02 FB | 	rdlong	arg02, fp
0d014     09 15 52 FC | 	wrword	arg02, arg01
0d018     14 4E 85 F1 | 	sub	fp, #20
0d01c     A7 12 02 FB | 	rdlong	arg01, fp
0d020     16 12 06 F1 | 	add	arg01, #22
0d024     10 4E 05 F1 | 	add	fp, #16
0d028     A7 14 02 FB | 	rdlong	arg02, fp
0d02c     09 15 52 FC | 	wrword	arg02, arg01
0d030                 | '   
0d030                 | ' lpoke base2+16,2048
0d030                 | ' lpoke base2+12,0
0d030                 | ' dpoke base2+20,ivol 
0d030                 | ' dpoke base2+22,ipan 
0d030                 | ' if wave<8 then
0d030     08 4E 05 F1 | 	add	fp, #8
0d034     A7 24 02 FB | 	rdlong	local04, fp
0d038     20 4E 85 F1 | 	sub	fp, #32
0d03c     08 24 56 F2 | 	cmps	local04, #8 wc
0d040     2C 00 90 3D |  if_ae	jmp	#LR__1019
0d044     08 4E 05 F1 | 	add	fp, #8
0d048     A7 12 02 FB | 	rdlong	arg01, fp
0d04c     18 12 06 F1 | 	add	arg01, #24
0d050     09 29 58 FC | 	wrword	#20, arg01
0d054     A7 12 02 FB | 	rdlong	arg01, fp
0d058     1A 12 06 F1 | 	add	arg01, #26
0d05c     08 4E 05 F1 | 	add	fp, #8
0d060     A7 14 02 FB | 	rdlong	arg02, fp
0d064     10 4E 85 F1 | 	sub	fp, #16
0d068     09 15 52 FC | 	wrword	arg02, arg01
0d06c     48 00 90 FD | 	jmp	#LR__1020
0d070                 | LR__1019
0d070     08 4E 05 F1 | 	add	fp, #8
0d074     A7 24 02 FB | 	rdlong	local04, fp
0d078     18 24 06 F1 | 	add	local04, #24
0d07c     5C 4E 05 F1 | 	add	fp, #92
0d080     A7 14 02 FB | 	rdlong	arg02, fp
0d084     64 4E 85 F1 | 	sub	fp, #100
0d088     58 D0 24 FF 
0d08c     B0 13 06 F6 | 	mov	arg01, ##1235268016
0d090     70 2D B1 FD | 	call	#__system___float_div
0d094     FD 12 02 F6 | 	mov	arg01, result1
0d098     01 14 06 F6 | 	mov	arg02, #1
0d09c     28 30 B1 FD | 	call	#__system___float_tointeger
0d0a0     12 FB 51 FC | 	wrword	result1, local04
0d0a4     08 4E 05 F1 | 	add	fp, #8
0d0a8     A7 12 02 FB | 	rdlong	arg01, fp
0d0ac     08 4E 85 F1 | 	sub	fp, #8
0d0b0     1A 12 06 F1 | 	add	arg01, #26
0d0b4     09 01 5A FC | 	wrword	#256, arg01
0d0b8                 | LR__1020
0d0b8     08 4E 05 F1 | 	add	fp, #8
0d0bc     A7 12 02 FB | 	rdlong	arg01, fp
0d0c0     20 12 06 F1 | 	add	arg01, #32
0d0c4     09 01 68 FC | 	wrlong	#0, arg01
0d0c8                 | ' 'dpoke base2+28,$4000_0000
0d0c8                 | ' lpoke base2+32,0 
0d0c8                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0d0c8     1C 4E 05 F1 | 	add	fp, #28
0d0cc     A7 24 02 FB | 	rdlong	local04, fp
0d0d0     24 4E 85 F1 | 	sub	fp, #36
0d0d4     08 24 0E F2 | 	cmp	local04, #8 wz
0d0d8     18 00 90 5D |  if_ne	jmp	#LR__1021
0d0dc     08 4E 05 F1 | 	add	fp, #8
0d0e0     A7 12 02 FB | 	rdlong	arg01, fp
0d0e4     08 4E 85 F1 | 	sub	fp, #8
0d0e8     24 12 06 F1 | 	add	arg01, #36
0d0ec     09 01 68 FC | 	wrlong	#0, arg01
0d0f0     34 00 90 FD | 	jmp	#LR__1022
0d0f4                 | LR__1021
0d0f4     08 4E 05 F1 | 	add	fp, #8
0d0f8     A7 12 02 FB | 	rdlong	arg01, fp
0d0fc     24 12 06 F1 | 	add	arg01, #36
0d100     1C 4E 05 F1 | 	add	fp, #28
0d104     A7 14 02 FB | 	rdlong	arg02, fp
0d108     24 4E 85 F1 | 	sub	fp, #36
0d10c     09 14 66 F0 | 	shl	arg02, #9
0d110     2C 00 00 FF 
0d114     D8 E4 05 F1 | 	add	objptr, ##22744
0d118     F2 14 02 F1 | 	add	arg02, objptr
0d11c     2C 00 00 FF 
0d120     D8 E4 85 F1 | 	sub	objptr, ##22744
0d124     09 15 62 FC | 	wrlong	arg02, arg01
0d128                 | LR__1022
0d128     08 4E 05 F1 | 	add	fp, #8
0d12c     A7 12 02 FB | 	rdlong	arg01, fp
0d130     28 12 06 F1 | 	add	arg01, #40
0d134     0C 4E 05 F1 | 	add	fp, #12
0d138     A7 14 02 FB | 	rdlong	arg02, fp
0d13c     09 15 62 FC | 	wrlong	arg02, arg01
0d140     0C 4E 85 F1 | 	sub	fp, #12
0d144     A7 12 02 FB | 	rdlong	arg01, fp
0d148     2C 12 06 F1 | 	add	arg01, #44
0d14c     24 4E 05 F1 | 	add	fp, #36
0d150     A7 14 02 FB | 	rdlong	arg02, fp
0d154     09 15 62 FC | 	wrlong	arg02, arg01
0d158                 | ' lpoke base2+40,speed' speed
0d158                 | ' lpoke base2+44,sus 'len
0d158                 | ' 
0d158                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0d158     04 4E 85 F1 | 	sub	fp, #4
0d15c     A7 24 02 FB | 	rdlong	local04, fp
0d160     28 4E 85 F1 | 	sub	fp, #40
0d164     01 24 56 F2 | 	cmps	local04, #1 wc
0d168     28 4E 05 31 |  if_ae	add	fp, #40
0d16c     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0d170     28 4E 85 31 |  if_ae	sub	fp, #40
0d174     00 02 B1 3D |  if_ae	call	#__system___waitms
0d178     A7 F0 03 F6 | 	mov	ptra, fp
0d17c     B2 00 A0 FD | 	call	#popregs_
0d180                 | _do_play_ret
0d180     2D 00 64 FD | 	ret
0d184                 | 
0d184                 | ' 
0d184                 | ' sub do_release
0d184                 | _do_release
0d184     00 4A 05 F6 | 	mov	COUNT_, #0
0d188     A8 00 A0 FD | 	call	#pushregs_
0d18c     10 F0 07 F1 | 	add	ptra, #16
0d190     18 D0 BF FD | 	call	#_pop
0d194     FF 14 02 F6 | 	mov	arg02, result3
0d198     A7 FA 61 FC | 	wrlong	result1, fp
0d19c     04 4E 05 F1 | 	add	fp, #4
0d1a0     A7 FC 61 FC | 	wrlong	result2, fp
0d1a4     04 4E 05 F1 | 	add	fp, #4
0d1a8     A7 14 62 FC | 	wrlong	arg02, fp
0d1ac     08 4E 85 F1 | 	sub	fp, #8
0d1b0     A7 12 02 F6 | 	mov	arg01, fp
0d1b4     4C 5C B0 FD | 	call	#_converttoint
0d1b8     0C 4E 05 F1 | 	add	fp, #12
0d1bc     A7 FA 61 FC | 	wrlong	result1, fp
0d1c0                 | ' t1=pop()
0d1c0                 | ' channel=converttoint(t1)
0d1c0                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0d1c0     0C 4E 85 F1 | 	sub	fp, #12
0d1c4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d1c8     44 00 90 CD |  if_b	jmp	#LR__1030
0d1cc     0C 4E 05 F1 | 	add	fp, #12
0d1d0     A7 14 02 FB | 	rdlong	arg02, fp
0d1d4     0C 4E 85 F1 | 	sub	fp, #12
0d1d8     08 14 56 F2 | 	cmps	arg02, #8 wc
0d1dc     30 00 90 3D |  if_ae	jmp	#LR__1030
0d1e0     57 00 00 FF 
0d1e4     00 E4 05 F1 | 	add	objptr, ##44544
0d1e8     F2 12 02 FB | 	rdlong	arg01, objptr
0d1ec     57 00 00 FF 
0d1f0     00 E4 85 F1 | 	sub	objptr, ##44544
0d1f4     0C 4E 05 F1 | 	add	fp, #12
0d1f8     A7 14 02 FB | 	rdlong	arg02, fp
0d1fc     0C 4E 85 F1 | 	sub	fp, #12
0d200     06 14 66 F0 | 	shl	arg02, #6
0d204     0A 13 02 F1 | 	add	arg01, arg02
0d208     2C 12 06 F1 | 	add	arg01, #44
0d20c     09 FF 69 FC | 	wrlong	#255, arg01
0d210                 | LR__1030
0d210     A7 F0 03 F6 | 	mov	ptra, fp
0d214     B2 00 A0 FD | 	call	#popregs_
0d218                 | _do_release_ret
0d218     2D 00 64 FD | 	ret
0d21c                 | 
0d21c                 | ' 
0d21c                 | ' 
0d21c                 | ' sub do_defsnd
0d21c                 | _do_defsnd
0d21c     05 4A 05 F6 | 	mov	COUNT_, #5
0d220     A8 00 A0 FD | 	call	#pushregs_
0d224     88 F0 07 F1 | 	add	ptra, #136
0d228     6A 00 00 FF 
0d22c     70 E4 05 F1 | 	add	objptr, ##54384
0d230     F2 1A 02 FB | 	rdlong	arg05, objptr
0d234     0D 19 02 F6 | 	mov	arg04, arg05
0d238     01 18 66 F0 | 	shl	arg04, #1
0d23c     0D 19 02 F1 | 	add	arg04, arg05
0d240     02 18 66 F0 | 	shl	arg04, #2
0d244     03 00 00 FF 
0d248     04 E4 85 F1 | 	sub	objptr, ##1540
0d24c     F2 18 02 F1 | 	add	arg04, objptr
0d250     0C 1B 02 FB | 	rdlong	arg05, arg04
0d254     A7 1A 62 FC | 	wrlong	arg05, fp
0d258                 | ' 
0d258                 | ' numpar=compiledline(lineptr_e).result.uresult
0d258                 | ' 
0d258                 | ' 
0d258                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0d258                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0d258                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0d258                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0d258                 | ' 
0d258                 | ' if numpar<2 then return
0d258     02 1A 56 F2 | 	cmps	arg05, #2 wc
0d25c     67 00 00 FF 
0d260     6C E4 85 F1 | 	sub	objptr, ##52844
0d264     A0 09 90 CD |  if_b	jmp	#LR__1068
0d268                 | ' 
0d268                 | '   
0d268                 | ' if numpar=2 then
0d268     A7 1A 02 FB | 	rdlong	arg05, fp
0d26c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d270     0C 04 90 5D |  if_ne	jmp	#LR__1051
0d274     34 CF BF FD | 	call	#_pop
0d278     FF 1A 02 F6 | 	mov	arg05, result3
0d27c     2C 4E 05 F1 | 	add	fp, #44
0d280     A7 FA 61 FC | 	wrlong	result1, fp
0d284     04 4E 05 F1 | 	add	fp, #4
0d288     A7 FC 61 FC | 	wrlong	result2, fp
0d28c     04 4E 05 F1 | 	add	fp, #4
0d290     A7 1A 62 FC | 	wrlong	arg05, fp
0d294                 | '   t1=pop()
0d294                 | '   if t1.result_type=result_string2 then 
0d294     34 4E 85 F1 | 	sub	fp, #52
0d298     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d29c     20 00 90 5D |  if_ne	jmp	#LR__1040
0d2a0     2C 4E 05 F1 | 	add	fp, #44
0d2a4     A7 12 02 FB | 	rdlong	arg01, fp
0d2a8     2C 4E 85 F1 | 	sub	fp, #44
0d2ac     A4 11 B0 FD | 	call	#_convertstring
0d2b0     38 4E 05 F1 | 	add	fp, #56
0d2b4     A7 FA 61 FC | 	wrlong	result1, fp
0d2b8     38 4E 85 F1 | 	sub	fp, #56
0d2bc     58 00 90 FD | 	jmp	#LR__1043
0d2c0                 | LR__1040
0d2c0     34 4E 05 F1 | 	add	fp, #52
0d2c4     A7 1A 02 FB | 	rdlong	arg05, fp
0d2c8     34 4E 85 F1 | 	sub	fp, #52
0d2cc     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0d2d0     18 00 90 5D |  if_ne	jmp	#LR__1041
0d2d4     2C 4E 05 F1 | 	add	fp, #44
0d2d8     A7 1A 02 FB | 	rdlong	arg05, fp
0d2dc     0C 4E 05 F1 | 	add	fp, #12
0d2e0     A7 1A 62 FC | 	wrlong	arg05, fp
0d2e4     38 4E 85 F1 | 	sub	fp, #56
0d2e8     2C 00 90 FD | 	jmp	#LR__1042
0d2ec                 | LR__1041
0d2ec     66 01 00 FF 
0d2f0     68 1A 06 F6 | 	mov	arg05, ##@LR__4963
0d2f4     38 4E 05 F1 | 	add	fp, #56
0d2f8     A7 1A 62 FC | 	wrlong	arg05, fp
0d2fc     0C 4E 85 F1 | 	sub	fp, #12
0d300     A7 12 02 F6 | 	mov	arg01, fp
0d304     2C 4E 85 F1 | 	sub	fp, #44
0d308     F8 5A B0 FD | 	call	#_converttoint
0d30c     14 4E 05 F1 | 	add	fp, #20
0d310     A7 FA 61 FC | 	wrlong	result1, fp
0d314     14 4E 85 F1 | 	sub	fp, #20
0d318                 | LR__1042
0d318                 | LR__1043
0d318                 | ' 
0d318                 | '     
0d318                 | '   if s<>"" then 
0d318     38 4E 05 F1 | 	add	fp, #56
0d31c     A7 12 02 FB | 	rdlong	arg01, fp
0d320     38 4E 85 F1 | 	sub	fp, #56
0d324     66 01 00 FF 
0d328     69 14 06 F6 | 	mov	arg02, ##@LR__4964
0d32c     7C FD B0 FD | 	call	#__system___string_cmp
0d330     00 FA 0D F2 | 	cmp	result1, #0 wz
0d334     88 01 90 AD |  if_e	jmp	#LR__1045
0d338     70 CE BF FD | 	call	#_pop
0d33c     FF 1A 02 F6 | 	mov	arg05, result3
0d340     2C 4E 05 F1 | 	add	fp, #44
0d344     A7 FA 61 FC | 	wrlong	result1, fp
0d348     04 4E 05 F1 | 	add	fp, #4
0d34c     A7 FC 61 FC | 	wrlong	result2, fp
0d350     04 4E 05 F1 | 	add	fp, #4
0d354     A7 1A 62 FC | 	wrlong	arg05, fp
0d358     08 4E 85 F1 | 	sub	fp, #8
0d35c     A7 12 02 F6 | 	mov	arg01, fp
0d360     2C 4E 85 F1 | 	sub	fp, #44
0d364     9C 5A B0 FD | 	call	#_converttoint
0d368     10 4E 05 F1 | 	add	fp, #16
0d36c     A7 FA 61 FC | 	wrlong	result1, fp
0d370     10 4E 85 F1 | 	sub	fp, #16
0d374                 | '     t1=pop()
0d374                 | '     channel=converttoint(t1) 
0d374                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0d374     09 12 06 F6 | 	mov	arg01, #9
0d378     CC 4C B1 FD | 	call	#__system__close
0d37c     09 1E 06 F6 | 	mov	local01, #9
0d380     66 01 00 FF 
0d384     6A 12 06 F6 | 	mov	arg01, ##@LR__4965
0d388     38 4E 05 F1 | 	add	fp, #56
0d38c     A7 14 02 FB | 	rdlong	arg02, fp
0d390     38 4E 85 F1 | 	sub	fp, #56
0d394     48 FD B0 FD | 	call	#__system___string_concat
0d398     FD 14 02 F6 | 	mov	arg02, result1
0d39c     0F 13 02 F6 | 	mov	arg01, local01
0d3a0     00 16 06 F6 | 	mov	arg03, #0
0d3a4     DC 08 B1 FD | 	call	#__system___basic_open_string
0d3a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d3ac     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d3b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d3b4     7B 00 00 FF 
0d3b8     14 E5 05 F1 | 	add	objptr, ##63252
0d3bc     F2 FA 61 FC | 	wrlong	result1, objptr
0d3c0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0d3c0     7B 00 00 FF 
0d3c4     14 E5 85 F1 | 	sub	objptr, ##63252
0d3c8     B0 00 90 AD |  if_e	jmp	#LR__1044
0d3cc     00 12 06 F6 | 	mov	arg01, #0
0d3d0     40 56 B1 FD | 	call	#__system___getiolock_0474
0d3d4     FD 12 02 F6 | 	mov	arg01, result1
0d3d8     A8 FC B0 FD | 	call	#__system___lockmem
0d3dc     66 01 00 FF 
0d3e0     77 14 06 F6 | 	mov	arg02, ##@LR__4966
0d3e4     00 12 06 F6 | 	mov	arg01, #0
0d3e8     00 16 06 F6 | 	mov	arg03, #0
0d3ec     98 09 B1 FD | 	call	#__system___basic_print_string
0d3f0     7B 00 00 FF 
0d3f4     14 E5 05 F1 | 	add	objptr, ##63252
0d3f8     F2 14 02 FB | 	rdlong	arg02, objptr
0d3fc     7B 00 00 FF 
0d400     14 E5 85 F1 | 	sub	objptr, ##63252
0d404     00 12 06 F6 | 	mov	arg01, #0
0d408     00 16 06 F6 | 	mov	arg03, #0
0d40c     0A 18 06 F6 | 	mov	arg04, #10
0d410     B8 09 B1 FD | 	call	#__system___basic_print_integer
0d414     66 01 00 FF 
0d418     85 14 06 F6 | 	mov	arg02, ##@LR__4967
0d41c     00 12 06 F6 | 	mov	arg01, #0
0d420     00 16 06 F6 | 	mov	arg03, #0
0d424     60 09 B1 FD | 	call	#__system___basic_print_string
0d428     00 1E 06 F6 | 	mov	local01, #0
0d42c     7B 00 00 FF 
0d430     14 E5 05 F1 | 	add	objptr, ##63252
0d434     F2 12 02 FB | 	rdlong	arg01, objptr
0d438     7B 00 00 FF 
0d43c     14 E5 85 F1 | 	sub	objptr, ##63252
0d440     D0 22 B1 FD | 	call	#__system___strerror
0d444     FD 14 02 F6 | 	mov	arg02, result1
0d448     0F 13 02 F6 | 	mov	arg01, local01
0d44c     00 16 06 F6 | 	mov	arg03, #0
0d450     34 09 B1 FD | 	call	#__system___basic_print_string
0d454     00 12 06 F6 | 	mov	arg01, #0
0d458     0A 14 06 F6 | 	mov	arg02, #10
0d45c     00 16 06 F6 | 	mov	arg03, #0
0d460     CC 08 B1 FD | 	call	#__system___basic_print_char
0d464     00 12 06 F6 | 	mov	arg01, #0
0d468     A8 55 B1 FD | 	call	#__system___getiolock_0474
0d46c     FD 00 68 FC | 	wrlong	#0, result1
0d470     09 12 06 F6 | 	mov	arg01, #9
0d474     D0 4B B1 FD | 	call	#__system__close
0d478     8C 07 90 FD | 	jmp	#LR__1068
0d47c                 | LR__1044
0d47c                 | '     get #9,17,samplebuf(channel,0),1024
0d47c     10 4E 05 F1 | 	add	fp, #16
0d480     A7 16 02 FB | 	rdlong	arg03, fp
0d484     10 4E 85 F1 | 	sub	fp, #16
0d488     0B 16 66 F0 | 	shl	arg03, #11
0d48c     0C 00 00 FF 
0d490     D8 E4 05 F1 | 	add	objptr, ##6360
0d494     F2 16 02 F1 | 	add	arg03, objptr
0d498     09 12 06 F6 | 	mov	arg01, #9
0d49c     11 14 06 F6 | 	mov	arg02, #17
0d4a0     0A 18 C6 F9 | 	decod	arg04, #10
0d4a4     02 1A 06 F6 | 	mov	arg05, #2
0d4a8     0C 00 00 FF 
0d4ac     D8 E4 85 F1 | 	sub	objptr, ##6360
0d4b0     E4 09 B1 FD | 	call	#__system___basic_get
0d4b4                 | '     close #9
0d4b4     09 12 06 F6 | 	mov	arg01, #9
0d4b8     8C 4B B1 FD | 	call	#__system__close
0d4bc                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0d4bc                 | '     return
0d4bc     48 07 90 FD | 	jmp	#LR__1068
0d4c0                 | LR__1045
0d4c0                 | '     if wptr < ($80000 - 2048) then 
0d4c0     14 4E 05 F1 | 	add	fp, #20
0d4c4     A7 1E 02 FB | 	rdlong	local01, fp
0d4c8     14 4E 85 F1 | 	sub	fp, #20
0d4cc     FC 03 00 FF 
0d4d0     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0d4d4     80 00 90 3D |  if_ae	jmp	#LR__1048
0d4d8                 | '       for i=0 to 1023: samplebuf(channel,i)=dpeek(wptr+2*i): next i
0d4d8     04 4E 05 F1 | 	add	fp, #4
0d4dc     A7 00 68 FC | 	wrlong	#0, fp
0d4e0     04 4E 85 F1 | 	sub	fp, #4
0d4e4     0C 00 00 FF 
0d4e8     D8 E4 05 F1 | 	add	objptr, ##6360
0d4ec     97 2E 48 FB | 	callpa	#(@LR__1047-@LR__1046)>>2,fcache_load_ptr_
0d4f0                 | LR__1046
0d4f0     10 4E 05 F1 | 	add	fp, #16
0d4f4     A7 1E 02 FB | 	rdlong	local01, fp
0d4f8     0B 1E 66 F0 | 	shl	local01, #11
0d4fc     F2 1E 02 F1 | 	add	local01, objptr
0d500     0C 4E 85 F1 | 	sub	fp, #12
0d504     A7 1A 02 FB | 	rdlong	arg05, fp
0d508     0D 19 02 F6 | 	mov	arg04, arg05
0d50c     01 18 66 F0 | 	shl	arg04, #1
0d510     0F 19 02 F1 | 	add	arg04, local01
0d514     10 4E 05 F1 | 	add	fp, #16
0d518     A7 12 02 FB | 	rdlong	arg01, fp
0d51c     01 1A 66 F0 | 	shl	arg05, #1
0d520     0D 13 02 F1 | 	add	arg01, arg05
0d524     09 FB E1 FA | 	rdword	result1, arg01
0d528     0C FB 51 FC | 	wrword	result1, arg04
0d52c     10 4E 85 F1 | 	sub	fp, #16
0d530     A7 1E 02 FB | 	rdlong	local01, fp
0d534     01 1E 06 F1 | 	add	local01, #1
0d538     A7 1E 62 FC | 	wrlong	local01, fp
0d53c     04 4E 85 F1 | 	sub	fp, #4
0d540     02 00 00 FF 
0d544     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0d548     A4 FF 9F CD |  if_b	jmp	#LR__1046
0d54c                 | LR__1047
0d54c     0C 00 00 FF 
0d550     D8 E4 85 F1 | 	sub	objptr, ##6360
0d554     B0 06 90 FD | 	jmp	#LR__1068
0d558                 | LR__1048
0d558                 | '       for i=0 to 1023 : samplebuf(channel,i)=psdpeek(wptr+2*i) : next i
0d558     04 4E 05 F1 | 	add	fp, #4
0d55c     A7 00 68 FC | 	wrlong	#0, fp
0d560     04 4E 85 F1 | 	sub	fp, #4
0d564                 | LR__1049
0d564     10 4E 05 F1 | 	add	fp, #16
0d568     A7 1A 02 FB | 	rdlong	arg05, fp
0d56c     0B 1A 66 F0 | 	shl	arg05, #11
0d570     0C 00 00 FF 
0d574     D8 E4 05 F1 | 	add	objptr, ##6360
0d578     F2 1A 02 F1 | 	add	arg05, objptr
0d57c     0C 4E 85 F1 | 	sub	fp, #12
0d580     A7 18 02 FB | 	rdlong	arg04, fp
0d584     0C 21 02 F6 | 	mov	local02, arg04
0d588     01 20 66 F0 | 	shl	local02, #1
0d58c     0D 21 02 F1 | 	add	local02, arg05
0d590     10 4E 05 F1 | 	add	fp, #16
0d594     A7 12 02 FB | 	rdlong	arg01, fp
0d598     14 4E 85 F1 | 	sub	fp, #20
0d59c     01 18 66 F0 | 	shl	arg04, #1
0d5a0     0C 13 02 F1 | 	add	arg01, arg04
0d5a4     0C 00 00 FF 
0d5a8     D8 E4 85 F1 | 	sub	objptr, ##6360
0d5ac     64 BD B0 FD | 	call	#_psdpeek
0d5b0     10 FB 51 FC | 	wrword	result1, local02
0d5b4     04 4E 05 F1 | 	add	fp, #4
0d5b8     A7 22 02 FB | 	rdlong	local03, fp
0d5bc     01 22 06 F1 | 	add	local03, #1
0d5c0     A7 22 62 FC | 	wrlong	local03, fp
0d5c4     04 4E 85 F1 | 	sub	fp, #4
0d5c8     02 00 00 FF 
0d5cc     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d5d0     90 FF 9F CD |  if_b	jmp	#LR__1049
0d5d4                 | '     return 
0d5d4     30 06 90 FD | 	jmp	#LR__1068
0d5d8                 | '   
0d5d8                 | '   par=converttoint(t1)  : print par
0d5d8                 | '   t1=pop()
0d5d8                 | '   channel=converttoint(t1)  
0d5d8                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0d5d8                 | LR__1050
0d5d8     10 4E 05 F1 | 	add	fp, #16
0d5dc     A7 22 02 FB | 	rdlong	local03, fp
0d5e0     0B 22 66 F0 | 	shl	local03, #11
0d5e4     0C 00 00 FF 
0d5e8     D8 E4 05 F1 | 	add	objptr, ##6360
0d5ec     F2 22 02 F1 | 	add	local03, objptr
0d5f0     0C 4E 85 F1 | 	sub	fp, #12
0d5f4     A7 12 02 FB | 	rdlong	arg01, fp
0d5f8     09 21 02 F6 | 	mov	local02, arg01
0d5fc     01 20 66 F0 | 	shl	local02, #1
0d600     11 21 02 F1 | 	add	local02, local03
0d604     04 4E 85 F1 | 	sub	fp, #4
0d608     0C 00 00 FF 
0d60c     D8 E4 85 F1 | 	sub	objptr, ##6360
0d610     09 13 52 F6 | 	abs	arg01, arg01 wc
0d614     1F 24 C6 C9 |  if_b	decod	local04, #31
0d618     00 24 06 36 |  if_ae	mov	local04, #0
0d61c     DC 21 B1 FD | 	call	#__system___float_fromuns
0d620     12 FB 61 F5 | 	xor	result1, local04
0d624     FD 14 02 F6 | 	mov	arg02, result1
0d628     87 E4 1D FF 
0d62c     DB 13 06 F6 | 	mov	arg01, ##1003032539
0d630     CC 25 B1 FD | 	call	#__system___float_mul
0d634     FD 12 02 F6 | 	mov	arg01, result1
0d638     00 2F B1 FD | 	call	#__system____builtin_sinf
0d63c     FD 14 02 F6 | 	mov	arg02, result1
0d640     58 7F 23 FF 
0d644     00 12 06 F6 | 	mov	arg01, ##1191096320
0d648     B4 25 B1 FD | 	call	#__system___float_mul
0d64c     FD 12 02 F6 | 	mov	arg01, result1
0d650     01 14 06 F6 | 	mov	arg02, #1
0d654     70 2A B1 FD | 	call	#__system___float_tointeger
0d658     10 FB 51 FC | 	wrword	result1, local02
0d65c     04 4E 05 F1 | 	add	fp, #4
0d660     A7 22 02 FB | 	rdlong	local03, fp
0d664     01 22 06 F1 | 	add	local03, #1
0d668     A7 22 62 FC | 	wrlong	local03, fp
0d66c     04 4E 85 F1 | 	sub	fp, #4
0d670     02 00 00 FF 
0d674     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d678     5C FF 9F CD |  if_b	jmp	#LR__1050
0d67c                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0d67c                 | '   return
0d67c     88 05 90 FD | 	jmp	#LR__1068
0d680                 | LR__1051
0d680                 | ' for i=0 to 15 : harm(i)=0: next i  
0d680     04 4E 05 F1 | 	add	fp, #4
0d684     A7 00 68 FC | 	wrlong	#0, fp
0d688     97 16 48 FB | 	callpa	#(@LR__1053-@LR__1052)>>2,fcache_load_ptr_
0d68c                 | LR__1052
0d68c     A7 22 02 FB | 	rdlong	local03, fp
0d690     02 22 66 F0 | 	shl	local03, #2
0d694     38 4E 05 F1 | 	add	fp, #56
0d698     A7 22 02 F1 | 	add	local03, fp
0d69c     11 01 68 FC | 	wrlong	#0, local03
0d6a0     38 4E 85 F1 | 	sub	fp, #56
0d6a4     A7 22 02 FB | 	rdlong	local03, fp
0d6a8     01 22 06 F1 | 	add	local03, #1
0d6ac     A7 22 62 FC | 	wrlong	local03, fp
0d6b0     10 22 56 F2 | 	cmps	local03, #16 wc
0d6b4     D4 FF 9F CD |  if_b	jmp	#LR__1052
0d6b8                 | LR__1053
0d6b8     04 4E 85 F1 | 	sub	fp, #4
0d6bc                 | ' for i=numpar to 2 step -1 
0d6bc     A7 1E 02 FB | 	rdlong	local01, fp
0d6c0     04 4E 05 F1 | 	add	fp, #4
0d6c4     A7 1E 62 FC | 	wrlong	local01, fp
0d6c8     04 4E 85 F1 | 	sub	fp, #4
0d6cc                 | LR__1054
0d6cc     DC CA BF FD | 	call	#_pop
0d6d0     2C 4E 05 F1 | 	add	fp, #44
0d6d4     A7 FA 61 FC | 	wrlong	result1, fp
0d6d8     04 4E 05 F1 | 	add	fp, #4
0d6dc     A7 FC 61 FC | 	wrlong	result2, fp
0d6e0     04 4E 05 F1 | 	add	fp, #4
0d6e4     A7 FE 61 FC | 	wrlong	result3, fp
0d6e8     30 4E 85 F1 | 	sub	fp, #48
0d6ec     A7 22 02 FB | 	rdlong	local03, fp
0d6f0     02 22 86 F1 | 	sub	local03, #2
0d6f4     02 22 66 F0 | 	shl	local03, #2
0d6f8     38 4E 05 F1 | 	add	fp, #56
0d6fc     A7 22 02 F1 | 	add	local03, fp
0d700     10 4E 85 F1 | 	sub	fp, #16
0d704     A7 12 02 F6 | 	mov	arg01, fp
0d708     2C 4E 85 F1 | 	sub	fp, #44
0d70c     A0 57 B0 FD | 	call	#_converttofloat
0d710     11 FB 61 FC | 	wrlong	result1, local03
0d714     04 4E 05 F1 | 	add	fp, #4
0d718     A7 22 02 FB | 	rdlong	local03, fp
0d71c     01 22 86 F1 | 	sub	local03, #1
0d720     A7 22 62 FC | 	wrlong	local03, fp
0d724     04 4E 85 F1 | 	sub	fp, #4
0d728     02 22 56 F2 | 	cmps	local03, #2 wc
0d72c     9C FF 9F 3D |  if_ae	jmp	#LR__1054
0d730     78 CA BF FD | 	call	#_pop
0d734     FF 1E 02 F6 | 	mov	local01, result3
0d738     2C 4E 05 F1 | 	add	fp, #44
0d73c     A7 FA 61 FC | 	wrlong	result1, fp
0d740     04 4E 05 F1 | 	add	fp, #4
0d744     A7 FC 61 FC | 	wrlong	result2, fp
0d748     04 4E 05 F1 | 	add	fp, #4
0d74c     A7 1E 62 FC | 	wrlong	local01, fp
0d750     08 4E 85 F1 | 	sub	fp, #8
0d754     A7 12 02 F6 | 	mov	arg01, fp
0d758     2C 4E 85 F1 | 	sub	fp, #44
0d75c     A4 56 B0 FD | 	call	#_converttoint
0d760     FD 1E 02 F6 | 	mov	local01, result1
0d764     10 4E 05 F1 | 	add	fp, #16
0d768     A7 1E 62 FC | 	wrlong	local01, fp
0d76c     10 4E 85 F1 | 	sub	fp, #16
0d770                 | ' t1=pop()
0d770                 | ' channel=converttoint(t1) : print channel
0d770     00 12 06 F6 | 	mov	arg01, #0
0d774     9C 52 B1 FD | 	call	#__system___getiolock_0474
0d778     FD 12 02 F6 | 	mov	arg01, result1
0d77c     04 F9 B0 FD | 	call	#__system___lockmem
0d780     10 4E 05 F1 | 	add	fp, #16
0d784     A7 14 02 FB | 	rdlong	arg02, fp
0d788     10 4E 85 F1 | 	sub	fp, #16
0d78c     00 12 06 F6 | 	mov	arg01, #0
0d790     00 16 06 F6 | 	mov	arg03, #0
0d794     0A 18 06 F6 | 	mov	arg04, #10
0d798     30 06 B1 FD | 	call	#__system___basic_print_integer
0d79c     00 12 06 F6 | 	mov	arg01, #0
0d7a0     0A 14 06 F6 | 	mov	arg02, #10
0d7a4     00 16 06 F6 | 	mov	arg03, #0
0d7a8     84 05 B1 FD | 	call	#__system___basic_print_char
0d7ac     00 12 06 F6 | 	mov	arg01, #0
0d7b0     60 52 B1 FD | 	call	#__system___getiolock_0474
0d7b4     FD 00 68 FC | 	wrlong	#0, result1
0d7b8                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0d7b8     08 4E 05 F1 | 	add	fp, #8
0d7bc     02 00 80 FF 
0d7c0     A7 00 68 FC | 	wrlong	##1024, fp
0d7c4     08 4E 85 F1 | 	sub	fp, #8
0d7c8     0C 00 00 FF 
0d7cc     D8 E4 05 F1 | 	add	objptr, ##6360
0d7d0     97 18 48 FB | 	callpa	#(@LR__1057-@LR__1055)>>2,fcache_load_ptr_
0d7d4                 | LR__1055
0d7d4     02 00 00 FF 
0d7d8     00 14 DC FC | 	rep	@LR__1058, ##1024
0d7dc                 | LR__1056
0d7dc     10 4E 05 F1 | 	add	fp, #16
0d7e0     A7 20 02 FB | 	rdlong	local02, fp
0d7e4     0B 20 66 F0 | 	shl	local02, #11
0d7e8     F2 20 02 F1 | 	add	local02, objptr
0d7ec     0C 4E 85 F1 | 	sub	fp, #12
0d7f0     A7 22 02 FB | 	rdlong	local03, fp
0d7f4     04 4E 85 F1 | 	sub	fp, #4
0d7f8     01 22 66 F0 | 	shl	local03, #1
0d7fc     10 23 02 F1 | 	add	local03, local02
0d800     11 01 58 FC | 	wrword	#0, local03
0d804                 | LR__1057
0d804                 | LR__1058
0d804     0C 00 00 FF 
0d808     D8 E4 85 F1 | 	sub	objptr, ##6360
0d80c     20 4E 05 F1 | 	add	fp, #32
0d810     A7 00 68 FC | 	wrlong	#0, fp
0d814                 | ' max=0
0d814                 | ' if harm(0)<0 then
0d814     1C 4E 05 F1 | 	add	fp, #28
0d818     A7 12 02 FB | 	rdlong	arg01, fp
0d81c     3C 4E 85 F1 | 	sub	fp, #60
0d820     00 14 06 F6 | 	mov	arg02, #0
0d824     01 16 06 F6 | 	mov	arg03, #1
0d828     08 28 B1 FD | 	call	#__system___float_cmp
0d82c     00 FA 55 F2 | 	cmps	result1, #0 wc
0d830     04 01 90 3D |  if_ae	jmp	#LR__1061
0d834     3C 4E 05 F1 | 	add	fp, #60
0d838     A7 FA 01 FB | 	rdlong	result1, fp
0d83c     1F FA 05 F4 | 	bitl	result1, #31
0d840     24 4E 85 F1 | 	sub	fp, #36
0d844     A7 FA 61 FC | 	wrlong	result1, fp
0d848     28 4E 05 F1 | 	add	fp, #40
0d84c     A7 FA 01 FB | 	rdlong	result1, fp
0d850     1F FA 05 F4 | 	bitl	result1, #31
0d854     24 4E 85 F1 | 	sub	fp, #36
0d858     A7 FA 61 FC | 	wrlong	result1, fp
0d85c     20 4E 05 F1 | 	add	fp, #32
0d860     00 C0 9F FF 
0d864     A7 00 68 FC | 	wrlong	##1065353216, fp
0d868     24 4E 85 F1 | 	sub	fp, #36
0d86c     A7 1E 02 FB | 	rdlong	local01, fp
0d870     28 4E 05 F1 | 	add	fp, #40
0d874     A7 1E 62 FC | 	wrlong	local01, fp
0d878     24 4E 85 F1 | 	sub	fp, #36
0d87c     A7 1E 02 FB | 	rdlong	local01, fp
0d880     28 4E 05 F1 | 	add	fp, #40
0d884     A7 1E 62 FC | 	wrlong	local01, fp
0d888                 | '   harm(0)=1
0d888                 | '   harm(1)=even
0d888                 | '   harm(2)=odd
0d888                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0d888     40 4E 85 F1 | 	sub	fp, #64
0d88c     A7 06 68 FC | 	wrlong	#3, fp
0d890                 | LR__1059
0d890     A7 22 02 FB | 	rdlong	local03, fp
0d894     11 27 02 F6 | 	mov	local05, local03
0d898     02 26 66 F0 | 	shl	local05, #2
0d89c     38 4E 05 F1 | 	add	fp, #56
0d8a0     A7 26 02 F1 | 	add	local05, fp
0d8a4     02 22 86 F1 | 	sub	local03, #2
0d8a8     02 22 66 F0 | 	shl	local03, #2
0d8ac     A7 22 02 F1 | 	add	local03, fp
0d8b0     11 13 02 FB | 	rdlong	arg01, local03
0d8b4     24 4E 85 F1 | 	sub	fp, #36
0d8b8     A7 14 02 FB | 	rdlong	arg02, fp
0d8bc     18 4E 85 F1 | 	sub	fp, #24
0d8c0     3C 23 B1 FD | 	call	#__system___float_mul
0d8c4     13 FB 61 FC | 	wrlong	result1, local05
0d8c8     04 4E 05 F1 | 	add	fp, #4
0d8cc     A7 22 02 FB | 	rdlong	local03, fp
0d8d0     02 22 06 F1 | 	add	local03, #2
0d8d4     A7 22 62 FC | 	wrlong	local03, fp
0d8d8     10 22 56 F2 | 	cmps	local03, #16 wc
0d8dc     B0 FF 9F CD |  if_b	jmp	#LR__1059
0d8e0                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0d8e0     A7 08 68 FC | 	wrlong	#4, fp
0d8e4                 | LR__1060
0d8e4     A7 22 02 FB | 	rdlong	local03, fp
0d8e8     11 27 02 F6 | 	mov	local05, local03
0d8ec     02 26 66 F0 | 	shl	local05, #2
0d8f0     38 4E 05 F1 | 	add	fp, #56
0d8f4     A7 26 02 F1 | 	add	local05, fp
0d8f8     02 22 86 F1 | 	sub	local03, #2
0d8fc     02 22 66 F0 | 	shl	local03, #2
0d900     A7 22 02 F1 | 	add	local03, fp
0d904     11 13 02 FB | 	rdlong	arg01, local03
0d908     20 4E 85 F1 | 	sub	fp, #32
0d90c     A7 14 02 FB | 	rdlong	arg02, fp
0d910     1C 4E 85 F1 | 	sub	fp, #28
0d914     E8 22 B1 FD | 	call	#__system___float_mul
0d918     13 FB 61 FC | 	wrlong	result1, local05
0d91c     04 4E 05 F1 | 	add	fp, #4
0d920     A7 22 02 FB | 	rdlong	local03, fp
0d924     02 22 06 F1 | 	add	local03, #2
0d928     A7 22 62 FC | 	wrlong	local03, fp
0d92c     0F 22 56 F2 | 	cmps	local03, #15 wc
0d930     B0 FF 9F CD |  if_b	jmp	#LR__1060
0d934     04 4E 85 F1 | 	sub	fp, #4
0d938                 | LR__1061
0d938                 | ' if harm(0)>=0 then ' synthesize with harmonics
0d938     3C 4E 05 F1 | 	add	fp, #60
0d93c     A7 12 02 FB | 	rdlong	arg01, fp
0d940     3C 4E 85 F1 | 	sub	fp, #60
0d944     00 14 06 F6 | 	mov	arg02, #0
0d948     01 16 66 F6 | 	neg	arg03, #1
0d94c     E4 26 B1 FD | 	call	#__system___float_cmp
0d950     00 FA 55 F2 | 	cmps	result1, #0 wc
0d954     B0 02 90 CD |  if_b	jmp	#LR__1067
0d958                 | '   for i=0 to 1023
0d958     04 4E 05 F1 | 	add	fp, #4
0d95c     A7 00 68 FC | 	wrlong	#0, fp
0d960     04 4E 85 F1 | 	sub	fp, #4
0d964                 | LR__1062
0d964     24 4E 05 F1 | 	add	fp, #36
0d968     A7 00 68 FC | 	wrlong	#0, fp
0d96c                 | '     spl=0
0d96c                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0d96c     1C 4E 85 F1 | 	sub	fp, #28
0d970     A7 00 68 FC | 	wrlong	#0, fp
0d974                 | LR__1063
0d974     A7 26 02 FB | 	rdlong	local05, fp
0d978     02 26 66 F0 | 	shl	local05, #2
0d97c     34 4E 05 F1 | 	add	fp, #52
0d980     A7 26 02 F1 | 	add	local05, fp
0d984     13 23 02 FB | 	rdlong	local03, local05
0d988     87 E4 1D FF 
0d98c     DB 27 06 F6 | 	mov	local05, ##1003032539
0d990     38 4E 85 F1 | 	sub	fp, #56
0d994     A7 12 02 FB | 	rdlong	arg01, fp
0d998     04 4E 85 F1 | 	sub	fp, #4
0d99c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d9a0     1F 24 C6 C9 |  if_b	decod	local04, #31
0d9a4     00 24 06 36 |  if_ae	mov	local04, #0
0d9a8     50 1E B1 FD | 	call	#__system___float_fromuns
0d9ac     12 FB 61 F5 | 	xor	result1, local04
0d9b0     FD 14 02 F6 | 	mov	arg02, result1
0d9b4     13 13 02 F6 | 	mov	arg01, local05
0d9b8     44 22 B1 FD | 	call	#__system___float_mul
0d9bc     FD 26 02 F6 | 	mov	local05, result1
0d9c0     08 4E 05 F1 | 	add	fp, #8
0d9c4     A7 12 02 FB | 	rdlong	arg01, fp
0d9c8     08 4E 85 F1 | 	sub	fp, #8
0d9cc     01 12 06 F1 | 	add	arg01, #1
0d9d0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d9d4     1F 24 C6 C9 |  if_b	decod	local04, #31
0d9d8     00 24 06 36 |  if_ae	mov	local04, #0
0d9dc     1C 1E B1 FD | 	call	#__system___float_fromuns
0d9e0     12 FB 61 F5 | 	xor	result1, local04
0d9e4     FD 14 02 F6 | 	mov	arg02, result1
0d9e8     13 13 02 F6 | 	mov	arg01, local05
0d9ec     10 22 B1 FD | 	call	#__system___float_mul
0d9f0     FD 12 02 F6 | 	mov	arg01, result1
0d9f4     44 2B B1 FD | 	call	#__system____builtin_sinf
0d9f8     FD 14 02 F6 | 	mov	arg02, result1
0d9fc     11 13 02 F6 | 	mov	arg01, local03
0da00     FC 21 B1 FD | 	call	#__system___float_mul
0da04     FD 14 02 F6 | 	mov	arg02, result1
0da08     24 4E 05 F1 | 	add	fp, #36
0da0c     A7 12 02 FB | 	rdlong	arg01, fp
0da10     24 4E 85 F1 | 	sub	fp, #36
0da14     18 1E B1 FD | 	call	#__system___float_add
0da18     24 4E 05 F1 | 	add	fp, #36
0da1c     A7 FA 61 FC | 	wrlong	result1, fp
0da20     1C 4E 85 F1 | 	sub	fp, #28
0da24     A7 16 02 FB | 	rdlong	arg03, fp
0da28     01 16 06 F1 | 	add	arg03, #1
0da2c     A7 16 62 FC | 	wrlong	arg03, fp
0da30     10 16 56 F2 | 	cmps	arg03, #16 wc
0da34     3C FF 9F CD |  if_b	jmp	#LR__1063
0da38                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0da38     1C 4E 05 F1 | 	add	fp, #28
0da3c     A7 12 02 FB | 	rdlong	arg01, fp
0da40     1F 12 06 F4 | 	bitl	arg01, #31
0da44     04 4E 85 F1 | 	sub	fp, #4
0da48     A7 14 02 FB | 	rdlong	arg02, fp
0da4c     20 4E 85 F1 | 	sub	fp, #32
0da50     01 16 66 F6 | 	neg	arg03, #1
0da54     DC 25 B1 FD | 	call	#__system___float_cmp
0da58     01 FA 55 F2 | 	cmps	result1, #1 wc
0da5c     18 00 90 CD |  if_b	jmp	#LR__1064
0da60     24 4E 05 F1 | 	add	fp, #36
0da64     A7 FA 01 FB | 	rdlong	result1, fp
0da68     1F FA 05 F4 | 	bitl	result1, #31
0da6c     04 4E 85 F1 | 	sub	fp, #4
0da70     A7 FA 61 FC | 	wrlong	result1, fp
0da74     20 4E 85 F1 | 	sub	fp, #32
0da78                 | LR__1064
0da78     04 4E 05 F1 | 	add	fp, #4
0da7c     A7 22 02 FB | 	rdlong	local03, fp
0da80     01 22 06 F1 | 	add	local03, #1
0da84     A7 22 62 FC | 	wrlong	local03, fp
0da88     04 4E 85 F1 | 	sub	fp, #4
0da8c     02 00 00 FF 
0da90     00 22 56 F2 | 	cmps	local03, ##1024 wc
0da94     CC FE 9F CD |  if_b	jmp	#LR__1062
0da98                 | '   for i=0 to 1023
0da98     04 4E 05 F1 | 	add	fp, #4
0da9c     A7 00 68 FC | 	wrlong	#0, fp
0daa0     04 4E 85 F1 | 	sub	fp, #4
0daa4                 | LR__1065
0daa4     24 4E 05 F1 | 	add	fp, #36
0daa8     A7 00 68 FC | 	wrlong	#0, fp
0daac                 | '     spl=0
0daac                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0daac     1C 4E 85 F1 | 	sub	fp, #28
0dab0     A7 00 68 FC | 	wrlong	#0, fp
0dab4                 | LR__1066
0dab4     A7 26 02 FB | 	rdlong	local05, fp
0dab8     02 26 66 F0 | 	shl	local05, #2
0dabc     34 4E 05 F1 | 	add	fp, #52
0dac0     A7 26 02 F1 | 	add	local05, fp
0dac4     13 27 02 FB | 	rdlong	local05, local05
0dac8     1C 4E 85 F1 | 	sub	fp, #28
0dacc     A7 14 02 FB | 	rdlong	arg02, fp
0dad0     20 4E 85 F1 | 	sub	fp, #32
0dad4     58 7F 23 FF 
0dad8     00 12 06 F6 | 	mov	arg01, ##1191096320
0dadc     24 23 B1 FD | 	call	#__system___float_div
0dae0     FD 14 02 F6 | 	mov	arg02, result1
0dae4     13 13 02 F6 | 	mov	arg01, local05
0dae8     14 21 B1 FD | 	call	#__system___float_mul
0daec     FD 22 02 F6 | 	mov	local03, result1
0daf0     87 E4 1D FF 
0daf4     DB 27 06 F6 | 	mov	local05, ##1003032539
0daf8     04 4E 05 F1 | 	add	fp, #4
0dafc     A7 12 02 FB | 	rdlong	arg01, fp
0db00     04 4E 85 F1 | 	sub	fp, #4
0db04     09 13 52 F6 | 	abs	arg01, arg01 wc
0db08     1F 24 C6 C9 |  if_b	decod	local04, #31
0db0c     00 24 06 36 |  if_ae	mov	local04, #0
0db10     E8 1C B1 FD | 	call	#__system___float_fromuns
0db14     12 FB 61 F5 | 	xor	result1, local04
0db18     FD 14 02 F6 | 	mov	arg02, result1
0db1c     13 13 02 F6 | 	mov	arg01, local05
0db20     DC 20 B1 FD | 	call	#__system___float_mul
0db24     FD 26 02 F6 | 	mov	local05, result1
0db28     08 4E 05 F1 | 	add	fp, #8
0db2c     A7 12 02 FB | 	rdlong	arg01, fp
0db30     08 4E 85 F1 | 	sub	fp, #8
0db34     01 12 06 F1 | 	add	arg01, #1
0db38     09 13 52 F6 | 	abs	arg01, arg01 wc
0db3c     1F 24 C6 C9 |  if_b	decod	local04, #31
0db40     00 24 06 36 |  if_ae	mov	local04, #0
0db44     B4 1C B1 FD | 	call	#__system___float_fromuns
0db48     12 FB 61 F5 | 	xor	result1, local04
0db4c     FD 14 02 F6 | 	mov	arg02, result1
0db50     13 13 02 F6 | 	mov	arg01, local05
0db54     A8 20 B1 FD | 	call	#__system___float_mul
0db58     FD 12 02 F6 | 	mov	arg01, result1
0db5c     DC 29 B1 FD | 	call	#__system____builtin_sinf
0db60     FD 14 02 F6 | 	mov	arg02, result1
0db64     11 13 02 F6 | 	mov	arg01, local03
0db68     94 20 B1 FD | 	call	#__system___float_mul
0db6c     FD 14 02 F6 | 	mov	arg02, result1
0db70     24 4E 05 F1 | 	add	fp, #36
0db74     A7 12 02 FB | 	rdlong	arg01, fp
0db78     24 4E 85 F1 | 	sub	fp, #36
0db7c     B0 1C B1 FD | 	call	#__system___float_add
0db80     24 4E 05 F1 | 	add	fp, #36
0db84     A7 FA 61 FC | 	wrlong	result1, fp
0db88     1C 4E 85 F1 | 	sub	fp, #28
0db8c     A7 26 02 FB | 	rdlong	local05, fp
0db90     01 26 06 F1 | 	add	local05, #1
0db94     A7 26 62 FC | 	wrlong	local05, fp
0db98     10 26 56 F2 | 	cmps	local05, #16 wc
0db9c     14 FF 9F CD |  if_b	jmp	#LR__1066
0dba0     08 4E 05 F1 | 	add	fp, #8
0dba4     A7 26 02 FB | 	rdlong	local05, fp
0dba8     0B 26 66 F0 | 	shl	local05, #11
0dbac     0C 00 00 FF 
0dbb0     D8 E4 05 F1 | 	add	objptr, ##6360
0dbb4     F2 26 02 F1 | 	add	local05, objptr
0dbb8     0C 4E 85 F1 | 	sub	fp, #12
0dbbc     A7 20 02 FB | 	rdlong	local02, fp
0dbc0     01 20 66 F0 | 	shl	local02, #1
0dbc4     13 21 02 F1 | 	add	local02, local05
0dbc8     20 4E 05 F1 | 	add	fp, #32
0dbcc     A7 12 02 FB | 	rdlong	arg01, fp
0dbd0     24 4E 85 F1 | 	sub	fp, #36
0dbd4     0C 00 00 FF 
0dbd8     D8 E4 85 F1 | 	sub	objptr, ##6360
0dbdc     01 14 06 F6 | 	mov	arg02, #1
0dbe0     E4 24 B1 FD | 	call	#__system___float_tointeger
0dbe4     10 FB 51 FC | 	wrword	result1, local02
0dbe8     04 4E 05 F1 | 	add	fp, #4
0dbec     A7 22 02 FB | 	rdlong	local03, fp
0dbf0     01 22 06 F1 | 	add	local03, #1
0dbf4     A7 22 62 FC | 	wrlong	local03, fp
0dbf8     04 4E 85 F1 | 	sub	fp, #4
0dbfc     02 00 00 FF 
0dc00     00 22 56 F2 | 	cmps	local03, ##1024 wc
0dc04     9C FE 9F CD |  if_b	jmp	#LR__1065
0dc08                 | LR__1067
0dc08                 | LR__1068
0dc08     A7 F0 03 F6 | 	mov	ptra, fp
0dc0c     B2 00 A0 FD | 	call	#popregs_
0dc10                 | _do_defsnd_ret
0dc10     2D 00 64 FD | 	ret
0dc14                 | 
0dc14                 | ' 
0dc14                 | ' ' ---------------  List the program. 
0dc14                 | ' 
0dc14                 | ' sub do_list
0dc14                 | _do_list
0dc14     02 4A 05 F6 | 	mov	COUNT_, #2
0dc18     A8 00 A0 FD | 	call	#pushregs_
0dc1c     B8 F0 07 F1 | 	add	ptra, #184
0dc20     04 4E 05 F1 | 	add	fp, #4
0dc24     A7 00 68 FC | 	wrlong	#0, fp
0dc28     04 4E 05 F1 | 	add	fp, #4
0dc2c     FF FF BF FF 
0dc30     A7 FE 6B FC | 	wrlong	##2147483647, fp
0dc34     08 4E 85 F1 | 	sub	fp, #8
0dc38     6A 00 00 FF 
0dc3c     70 E4 05 F1 | 	add	objptr, ##54384
0dc40     F2 1E 02 FB | 	rdlong	local01, objptr
0dc44     0F 17 02 F6 | 	mov	arg03, local01
0dc48     01 16 66 F0 | 	shl	arg03, #1
0dc4c     0F 17 02 F1 | 	add	arg03, local01
0dc50     02 16 66 F0 | 	shl	arg03, #2
0dc54     03 00 00 FF 
0dc58     04 E4 85 F1 | 	sub	objptr, ##1540
0dc5c     F2 16 02 F1 | 	add	arg03, objptr
0dc60     0B 17 02 FB | 	rdlong	arg03, arg03
0dc64     A7 16 62 FC | 	wrlong	arg03, fp
0dc68                 | ' 
0dc68                 | ' startline=0 : endline=$7FFFFFFF
0dc68                 | ' numpar=compiledline(lineptr_e).result.uresult
0dc68                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0dc68     01 16 0E F2 | 	cmp	arg03, #1 wz
0dc6c     67 00 00 FF 
0dc70     6C E4 85 F1 | 	sub	objptr, ##52844
0dc74     3C 00 90 5D |  if_ne	jmp	#LR__1070
0dc78     30 C5 BF FD | 	call	#_pop
0dc7c     FF 1E 02 F6 | 	mov	local01, result3
0dc80     0C 4E 05 F1 | 	add	fp, #12
0dc84     A7 FA 61 FC | 	wrlong	result1, fp
0dc88     04 4E 05 F1 | 	add	fp, #4
0dc8c     A7 FC 61 FC | 	wrlong	result2, fp
0dc90     04 4E 05 F1 | 	add	fp, #4
0dc94     A7 1E 62 FC | 	wrlong	local01, fp
0dc98     08 4E 85 F1 | 	sub	fp, #8
0dc9c     A7 12 02 F6 | 	mov	arg01, fp
0dca0     0C 4E 85 F1 | 	sub	fp, #12
0dca4     5C 51 B0 FD | 	call	#_converttoint
0dca8     04 4E 05 F1 | 	add	fp, #4
0dcac     A7 FA 61 FC | 	wrlong	result1, fp
0dcb0     04 4E 85 F1 | 	sub	fp, #4
0dcb4                 | LR__1070
0dcb4                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0dcb4     A7 16 02 FB | 	rdlong	arg03, fp
0dcb8     02 16 0E F2 | 	cmp	arg03, #2 wz
0dcbc     7C 00 90 5D |  if_ne	jmp	#LR__1071
0dcc0     E8 C4 BF FD | 	call	#_pop
0dcc4     FF 1E 02 F6 | 	mov	local01, result3
0dcc8     0C 4E 05 F1 | 	add	fp, #12
0dccc     A7 FA 61 FC | 	wrlong	result1, fp
0dcd0     04 4E 05 F1 | 	add	fp, #4
0dcd4     A7 FC 61 FC | 	wrlong	result2, fp
0dcd8     04 4E 05 F1 | 	add	fp, #4
0dcdc     A7 1E 62 FC | 	wrlong	local01, fp
0dce0     08 4E 85 F1 | 	sub	fp, #8
0dce4     A7 12 02 F6 | 	mov	arg01, fp
0dce8     0C 4E 85 F1 | 	sub	fp, #12
0dcec     14 51 B0 FD | 	call	#_converttoint
0dcf0     FD 1E 02 F6 | 	mov	local01, result1
0dcf4     08 4E 05 F1 | 	add	fp, #8
0dcf8     A7 1E 62 FC | 	wrlong	local01, fp
0dcfc     08 4E 85 F1 | 	sub	fp, #8
0dd00     A8 C4 BF FD | 	call	#_pop
0dd04     FF 1E 02 F6 | 	mov	local01, result3
0dd08     0C 4E 05 F1 | 	add	fp, #12
0dd0c     A7 FA 61 FC | 	wrlong	result1, fp
0dd10     04 4E 05 F1 | 	add	fp, #4
0dd14     A7 FC 61 FC | 	wrlong	result2, fp
0dd18     04 4E 05 F1 | 	add	fp, #4
0dd1c     A7 1E 62 FC | 	wrlong	local01, fp
0dd20     08 4E 85 F1 | 	sub	fp, #8
0dd24     A7 12 02 F6 | 	mov	arg01, fp
0dd28     0C 4E 85 F1 | 	sub	fp, #12
0dd2c     D4 50 B0 FD | 	call	#_converttoint
0dd30     04 4E 05 F1 | 	add	fp, #4
0dd34     A7 FA 61 FC | 	wrlong	result1, fp
0dd38     04 4E 85 F1 | 	sub	fp, #4
0dd3c                 | LR__1071
0dd3c                 | ' 
0dd3c                 | ' 
0dd3c                 | ' print
0dd3c     00 12 06 F6 | 	mov	arg01, #0
0dd40     D0 4C B1 FD | 	call	#__system___getiolock_0474
0dd44     FD 12 02 F6 | 	mov	arg01, result1
0dd48     38 F3 B0 FD | 	call	#__system___lockmem
0dd4c     00 12 06 F6 | 	mov	arg01, #0
0dd50     0A 14 06 F6 | 	mov	arg02, #10
0dd54     00 16 06 F6 | 	mov	arg03, #0
0dd58     D4 FF B0 FD | 	call	#__system___basic_print_char
0dd5c     00 12 06 F6 | 	mov	arg01, #0
0dd60     B0 4C B1 FD | 	call	#__system___getiolock_0474
0dd64     FD 00 68 FC | 	wrlong	#0, result1
0dd68     6A 00 00 FF 
0dd6c     74 E4 05 F1 | 	add	objptr, ##54388
0dd70     F2 20 02 FB | 	rdlong	local02, objptr
0dd74     11 00 00 FF 
0dd78     98 E4 05 F1 | 	add	objptr, ##8856
0dd7c     F2 20 62 FC | 	wrlong	local02, objptr
0dd80     7B 00 00 FF 
0dd84     0C E5 85 F1 | 	sub	objptr, ##63244
0dd88                 | ' do 
0dd88                 | LR__1072
0dd88     20 4E 05 F1 | 	add	fp, #32
0dd8c     A7 12 02 F6 | 	mov	arg01, fp
0dd90     20 4E 85 F1 | 	sub	fp, #32
0dd94     7B 00 00 FF 
0dd98     0C E5 05 F1 | 	add	objptr, ##63244
0dd9c     F2 14 02 FB | 	rdlong	arg02, objptr
0dda0     18 16 06 F6 | 	mov	arg03, #24
0dda4     70 00 00 FF 
0dda8     40 E4 85 F1 | 	sub	objptr, ##57408
0ddac     D0 E6 B0 FD | 	call	#_psram_spin2_read1
0ddb0     0B 00 00 FF 
0ddb4     CC E4 85 F1 | 	sub	objptr, ##5836
0ddb8                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0ddb8                 | '   
0ddb8                 | '   if header(0)<> $FFFFFFFF then
0ddb8     20 4E 05 F1 | 	add	fp, #32
0ddbc     A7 20 02 FB | 	rdlong	local02, fp
0ddc0     20 4E 85 F1 | 	sub	fp, #32
0ddc4     FF FF 7F FF 
0ddc8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0ddcc     A8 00 90 AD |  if_e	jmp	#LR__1074
0ddd0     38 4E 05 F1 | 	add	fp, #56
0ddd4     3F 16 06 F6 | 	mov	arg03, #63
0ddd8     28 16 62 FD | 	setq	arg03
0dddc     A7 00 68 FC | 	wrlong	#0, fp
0dde0     A7 12 02 F6 | 	mov	arg01, fp
0dde4     10 4E 85 F1 | 	sub	fp, #16
0dde8     A7 14 02 FB | 	rdlong	arg02, fp
0ddec     04 4E 05 F1 | 	add	fp, #4
0ddf0     A7 16 02 FB | 	rdlong	arg03, fp
0ddf4     2C 4E 85 F1 | 	sub	fp, #44
0ddf8     0B 00 00 FF 
0ddfc     CC E4 05 F1 | 	add	objptr, ##5836
0de00     7C E6 B0 FD | 	call	#_psram_spin2_read1
0de04     0B 00 00 FF 
0de08     CC E4 85 F1 | 	sub	objptr, ##5836
0de0c                 | '     longfill(linebuf,0,64)
0de0c                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0de0c                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0de0c     20 4E 05 F1 | 	add	fp, #32
0de10     A7 20 02 FB | 	rdlong	local02, fp
0de14     1C 4E 85 F1 | 	sub	fp, #28
0de18     A7 1E 02 FB | 	rdlong	local01, fp
0de1c     04 4E 85 F1 | 	sub	fp, #4
0de20     0F 21 52 F2 | 	cmps	local02, local01 wc
0de24     30 00 90 CD |  if_b	jmp	#LR__1073
0de28     20 4E 05 F1 | 	add	fp, #32
0de2c     A7 20 02 FB | 	rdlong	local02, fp
0de30     18 4E 85 F1 | 	sub	fp, #24
0de34     A7 16 02 FB | 	rdlong	arg03, fp
0de38     08 4E 85 F1 | 	sub	fp, #8
0de3c     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0de40     14 00 90 1D |  if_a	jmp	#LR__1073
0de44     38 4E 05 F1 | 	add	fp, #56
0de48     A7 12 02 F6 | 	mov	arg01, fp
0de4c     38 4E 85 F1 | 	sub	fp, #56
0de50                 | ' 
0de50                 | ' write(text)
0de50     84 DF B0 FD | 	call	#_hg010b_spin2_write
0de54                 | ' crlf
0de54     4C E2 B0 FD | 	call	#_hg010b_spin2_crlf
0de58                 | LR__1073
0de58     34 4E 05 F1 | 	add	fp, #52
0de5c     A7 20 02 FB | 	rdlong	local02, fp
0de60     34 4E 85 F1 | 	sub	fp, #52
0de64     7B 00 00 FF 
0de68     0C E5 05 F1 | 	add	objptr, ##63244
0de6c     F2 20 62 FC | 	wrlong	local02, objptr
0de70     7B 00 00 FF 
0de74     0C E5 85 F1 | 	sub	objptr, ##63244
0de78                 | LR__1074
0de78     34 4E 05 F1 | 	add	fp, #52
0de7c     A7 20 02 FB | 	rdlong	local02, fp
0de80     34 4E 85 F1 | 	sub	fp, #52
0de84     FF FF 3F FF 
0de88     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0de8c     20 4E 05 51 |  if_ne	add	fp, #32
0de90     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0de94     20 4E 85 51 |  if_ne	sub	fp, #32
0de98     FF FF 7F 5F 
0de9c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0dea0     E4 FE 9F 5D |  if_ne	jmp	#LR__1072
0dea4     A7 F0 03 F6 | 	mov	ptra, fp
0dea8     B2 00 A0 FD | 	call	#popregs_
0deac                 | _do_list_ret
0deac     2D 00 64 FD | 	ret
0deb0                 | 
0deb0                 | ' 
0deb0                 | ' '---------------- Clear the program
0deb0                 | ' 
0deb0                 | ' sub do_new
0deb0                 | _do_new
0deb0     03 4A 05 F6 | 	mov	COUNT_, #3
0deb4     A8 00 A0 FD | 	call	#pushregs_
0deb8     00 12 06 F6 | 	mov	arg01, #0
0debc     01 14 66 F6 | 	neg	arg02, #1
0dec0     C8 B2 B0 FD | 	call	#_pslpoke
0dec4     54 00 00 FF 
0dec8     F8 E5 05 F1 | 	add	objptr, ##43512
0decc     F2 00 68 FC | 	wrlong	#0, objptr
0ded0     15 00 00 FF 
0ded4     7C E4 05 F1 | 	add	objptr, ##10876
0ded8     F2 00 68 FC | 	wrlong	#0, objptr
0dedc     0F 00 00 FF 
0dee0     2C E5 05 F1 | 	add	objptr, ##7980
0dee4     F2 00 68 FC | 	wrlong	#0, objptr
0dee8     04 E4 05 F1 | 	add	objptr, #4
0deec     F2 00 68 FC | 	wrlong	#0, objptr
0def0     16 00 00 FF 
0def4     5C E5 85 F1 | 	sub	objptr, ##11612
0def8     F2 00 68 FC | 	wrlong	#0, objptr
0defc     07 00 00 FF 
0df00     24 E4 05 F1 | 	add	objptr, ##3620
0df04     F2 00 68 FC | 	wrlong	#0, objptr
0df08     07 00 00 FF 
0df0c     20 E4 85 F1 | 	sub	objptr, ##3616
0df10     F2 00 68 FC | 	wrlong	#0, objptr
0df14     0F 00 00 FF 
0df18     34 E4 05 F1 | 	add	objptr, ##7732
0df1c     F2 00 68 FC | 	wrlong	#0, objptr
0df20     08 00 00 FF 
0df24     08 E4 85 F1 | 	sub	objptr, ##4104
0df28     F2 00 68 FC | 	wrlong	#0, objptr
0df2c     04 E4 05 F1 | 	add	objptr, #4
0df30     FF FF FF FF 
0df34     F2 FE 6B FC | 	wrlong	##-1, objptr
0df38     0F 00 00 FF 
0df3c     4C E5 05 F1 | 	add	objptr, ##8012
0df40     F2 00 68 FC | 	wrlong	#0, objptr
0df44                 | ' 
0df44                 | ' pslpoke(0,$FFFFFFFF)
0df44                 | ' varnum=0
0df44                 | ' programstart=0 :runptr=0 : runptr2=0
0df44                 | ' stackpointer=0
0df44                 | ' lineptr=0 
0df44                 | ' programptr=0 : stringptr=0
0df44                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0df44                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0df44     00 1E 06 F6 | 	mov	local01, #0
0df48     07 00 00 FF 
0df4c     40 E5 85 F1 | 	sub	objptr, ##3904
0df50     97 16 48 FB | 	callpa	#(@LR__1081-@LR__1080)>>2,fcache_load_ptr_
0df54                 | LR__1080
0df54     0F 21 02 F6 | 	mov	local02, local01
0df58     02 20 66 F0 | 	shl	local02, #2
0df5c     0F 21 02 F1 | 	add	local02, local01
0df60     02 20 66 F0 | 	shl	local02, #2
0df64     F2 20 02 F1 | 	add	local02, objptr
0df68     08 20 06 F1 | 	add	local02, #8
0df6c     FF FF FF FF 
0df70     10 FF 6B FC | 	wrlong	##-1, local02
0df74     01 1E 06 F1 | 	add	local01, #1
0df78     81 1E 56 F2 | 	cmps	local01, #129 wc
0df7c     D4 FF 9F CD |  if_b	jmp	#LR__1080
0df80                 | LR__1081
0df80     72 00 00 FF 
0df84     88 E4 85 F1 | 	sub	objptr, ##58504
0df88                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
0df88     00 1E 06 F6 | 	mov	local01, #0
0df8c                 | LR__1082
0df8c     0F 21 02 F6 | 	mov	local02, local01
0df90     02 20 66 F0 | 	shl	local02, #2
0df94     7B 00 00 FF 
0df98     24 E4 05 F1 | 	add	objptr, ##63012
0df9c     F2 20 02 F1 | 	add	local02, objptr
0dfa0     10 21 0A FB | 	rdlong	local02, local02 wz
0dfa4     7B 00 00 FF 
0dfa8     24 E4 85 F1 | 	sub	objptr, ##63012
0dfac     34 00 90 AD |  if_e	jmp	#LR__1083
0dfb0     0F 13 02 F6 | 	mov	arg01, local01
0dfb4     00 14 06 F6 | 	mov	arg02, #0
0dfb8     00 16 06 F6 | 	mov	arg03, #0
0dfbc     38 CD B0 FD | 	call	#_hg010b_spin2_setspritesize
0dfc0     0F 21 02 F6 | 	mov	local02, local01
0dfc4     02 20 66 F0 | 	shl	local02, #2
0dfc8     7B 00 00 FF 
0dfcc     24 E4 05 F1 | 	add	objptr, ##63012
0dfd0     F2 20 02 F1 | 	add	local02, objptr
0dfd4     10 13 02 FB | 	rdlong	arg01, local02
0dfd8     7B 00 00 FF 
0dfdc     24 E4 85 F1 | 	sub	objptr, ##63012
0dfe0     24 30 B1 FD | 	call	#__system___gc_free
0dfe4                 | LR__1083
0dfe4     01 1E 06 F1 | 	add	local01, #1
0dfe8     10 1E 56 F2 | 	cmps	local01, #16 wc
0dfec     9C FF 9F CD |  if_b	jmp	#LR__1082
0dff0     7B 00 00 FF 
0dff4     78 E4 05 F1 | 	add	objptr, ##63096
0dff8     00 C0 9F FF 
0dffc     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e000     04 E4 05 F1 | 	add	objptr, #4
0e004     00 C0 9F FF 
0e008     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e00c     7B 00 00 FF 
0e010     78 E4 85 F1 | 	sub	objptr, ##63096
0e014     F2 22 02 FB | 	rdlong	local03, objptr
0e018     7B 00 00 FF 
0e01c     64 E4 05 F1 | 	add	objptr, ##63076
0e020     F2 22 62 FC | 	wrlong	local03, objptr
0e024     7B 00 00 FF 
0e028     68 E4 85 F1 | 	sub	objptr, ##63080
0e02c     11 12 06 F6 | 	mov	arg01, #17
0e030     08 14 06 F6 | 	mov	arg02, #8
0e034     10 16 06 F6 | 	mov	arg03, #16
0e038     BC CC B0 FD | 	call	#_hg010b_spin2_setspritesize
0e03c     10 12 06 F6 | 	mov	arg01, #16
0e040     20 14 06 F6 | 	mov	arg02, #32
0e044     20 16 06 F6 | 	mov	arg03, #32
0e048     AC CC B0 FD | 	call	#_hg010b_spin2_setspritesize
0e04c     66 01 00 FF 
0e050     88 22 06 F6 | 	mov	local03, ##@LR__4968
0e054     7B 00 00 FF 
0e058     94 E4 05 F1 | 	add	objptr, ##63124
0e05c     F2 22 62 FC | 	wrlong	local03, objptr
0e060     7B 00 00 FF 
0e064     94 E4 85 F1 | 	sub	objptr, ##63124
0e068     2C A4 B0 FD | 	call	#_init_audio
0e06c     A7 F0 03 F6 | 	mov	ptra, fp
0e070     B2 00 A0 FD | 	call	#popregs_
0e074                 | _do_new_ret
0e074     2D 00 64 FD | 	ret
0e078                 | 
0e078                 | ' 
0e078                 | ' '----------------------- goto
0e078                 | ' sub do_fast_goto
0e078                 | _do_fast_goto
0e078     02 4A 05 F6 | 	mov	COUNT_, #2
0e07c     A8 00 A0 FD | 	call	#pushregs_
0e080                 | _do_fast_goto_enter
0e080     6A 00 00 FF 
0e084     70 E4 05 F1 | 	add	objptr, ##54384
0e088     F2 12 02 FB | 	rdlong	arg01, objptr
0e08c     09 1F 02 F6 | 	mov	local01, arg01
0e090     01 1E 66 F0 | 	shl	local01, #1
0e094     09 1F 02 F1 | 	add	local01, arg01
0e098     02 1E 66 F0 | 	shl	local01, #2
0e09c     03 00 00 FF 
0e0a0     04 E4 85 F1 | 	sub	objptr, ##1540
0e0a4     F2 1E 02 F1 | 	add	local01, objptr
0e0a8     0F 21 02 FB | 	rdlong	local02, local01
0e0ac     10 13 02 F6 | 	mov	arg01, local02
0e0b0     67 00 00 FF 
0e0b4     6C E4 85 F1 | 	sub	objptr, ##52844
0e0b8     00 B2 B0 FD | 	call	#_pslpeek
0e0bc     FD 12 02 F6 | 	mov	arg01, result1
0e0c0                 | ' 
0e0c0                 | ' testptr=compiledline(lineptr_e).result.uresult
0e0c0                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0e0c0                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0e0c0     6A 00 00 FF 
0e0c4     70 E4 05 F1 | 	add	objptr, ##54384
0e0c8     F2 FA 01 FB | 	rdlong	result1, objptr
0e0cc     FD 1E 02 F6 | 	mov	local01, result1
0e0d0     01 1E 66 F0 | 	shl	local01, #1
0e0d4     FD 1E 02 F1 | 	add	local01, result1
0e0d8     02 1E 66 F0 | 	shl	local01, #2
0e0dc     03 00 00 FF 
0e0e0     04 E4 85 F1 | 	sub	objptr, ##1540
0e0e4     F2 1E 02 F1 | 	add	local01, objptr
0e0e8     04 1E 06 F1 | 	add	local01, #4
0e0ec     0F 1F 02 FB | 	rdlong	local01, local01
0e0f0     0F 13 0A F2 | 	cmp	arg01, local01 wz
0e0f4     67 00 00 FF 
0e0f8     6C E4 85 F1 | 	sub	objptr, ##52844
0e0fc     58 00 90 5D |  if_ne	jmp	#LR__1090
0e100     79 00 00 FF 
0e104     A0 E5 05 F1 | 	add	objptr, ##62368
0e108     F2 20 62 FC | 	wrlong	local02, objptr
0e10c     0F 00 00 FF 
0e110     34 E5 85 F1 | 	sub	objptr, ##7988
0e114     F2 20 02 FB | 	rdlong	local02, objptr
0e118     01 20 86 F1 | 	sub	local02, #1
0e11c     04 E4 05 F1 | 	add	objptr, #4
0e120     F2 20 62 FC | 	wrlong	local02, objptr
0e124                 | '   runptr=testptr
0e124                 | '   lineptr_e=lineptr-1
0e124                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0e124     0F 00 00 FF 
0e128     54 E5 05 F1 | 	add	objptr, ##8020
0e12c     F2 20 02 FB | 	rdlong	local02, objptr
0e130     79 00 00 FF 
0e134     C4 E5 85 F1 | 	sub	objptr, ##62404
0e138     FF FF 3F FF 
0e13c     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0e140     79 00 00 AF 
0e144     C4 E5 05 A1 |  if_e	add	objptr, ##62404
0e148     F2 00 68 AC |  if_e	wrlong	#0, objptr
0e14c     79 00 00 AF 
0e150     C4 E5 85 A1 |  if_e	sub	objptr, ##62404
0e154     04 00 90 FD | 	jmp	#LR__1091
0e158                 | LR__1090
0e158     0C 00 B0 FD | 	call	#_do_find_goto
0e15c                 | LR__1091
0e15c     A7 F0 03 F6 | 	mov	ptra, fp
0e160     B2 00 A0 FD | 	call	#popregs_
0e164                 | _do_fast_goto_ret
0e164     2D 00 64 FD | 	ret
0e168                 | 
0e168                 | ' 
0e168                 | ' 
0e168                 | ' 
0e168                 | ' 
0e168                 | ' sub do_find_goto
0e168                 | _do_find_goto
0e168     03 4A 05 F6 | 	mov	COUNT_, #3
0e16c     A8 00 A0 FD | 	call	#pushregs_
0e170     24 F0 07 F1 | 	add	ptra, #36
0e174                 | _do_find_goto_enter
0e174     6A 00 00 FF 
0e178     70 E4 05 F1 | 	add	objptr, ##54384
0e17c     F2 1E 02 FB | 	rdlong	local01, objptr
0e180     0F 21 02 F6 | 	mov	local02, local01
0e184     01 20 66 F0 | 	shl	local02, #1
0e188     0F 21 02 F1 | 	add	local02, local01
0e18c     02 20 66 F0 | 	shl	local02, #2
0e190     03 00 00 FF 
0e194     04 E4 85 F1 | 	sub	objptr, ##1540
0e198     F2 20 02 F1 | 	add	local02, objptr
0e19c     04 20 06 F1 | 	add	local02, #4
0e1a0     10 21 02 FB | 	rdlong	local02, local02
0e1a4     A7 20 62 FC | 	wrlong	local02, fp
0e1a8     03 00 00 FF 
0e1ac     08 E4 05 F1 | 	add	objptr, ##1544
0e1b0     F2 22 02 FB | 	rdlong	local03, objptr
0e1b4     6A 00 00 FF 
0e1b8     74 E4 85 F1 | 	sub	objptr, ##54388
0e1bc     04 4E 05 F1 | 	add	fp, #4
0e1c0     A7 22 62 FC | 	wrlong	local03, fp
0e1c4     04 4E 85 F1 | 	sub	fp, #4
0e1c8                 | ' 
0e1c8                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0e1c8                 | '  ' print "find goto"                                                                     'print gotoline 
0e1c8                 | ' gotoptr=programstart
0e1c8                 | ' do
0e1c8                 | LR__1100
0e1c8     0C 4E 05 F1 | 	add	fp, #12
0e1cc     A7 12 02 F6 | 	mov	arg01, fp
0e1d0     08 4E 85 F1 | 	sub	fp, #8
0e1d4     A7 14 02 FB | 	rdlong	arg02, fp
0e1d8     04 4E 85 F1 | 	sub	fp, #4
0e1dc     18 16 06 F6 | 	mov	arg03, #24
0e1e0     0B 00 00 FF 
0e1e4     CC E4 05 F1 | 	add	objptr, ##5836
0e1e8     94 E2 B0 FD | 	call	#_psram_spin2_read1
0e1ec     0B 00 00 FF 
0e1f0     CC E4 85 F1 | 	sub	objptr, ##5836
0e1f4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0e1f4                 | '   if gotoheader(0)<>$FFFFFFFF then
0e1f4     0C 4E 05 F1 | 	add	fp, #12
0e1f8     A7 22 02 FB | 	rdlong	local03, fp
0e1fc     0C 4E 85 F1 | 	sub	fp, #12
0e200     FF FF 7F FF 
0e204     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0e208     24 00 90 AD |  if_e	jmp	#LR__1101
0e20c     04 4E 05 F1 | 	add	fp, #4
0e210     A7 22 02 FB | 	rdlong	local03, fp
0e214     04 4E 05 F1 | 	add	fp, #4
0e218     A7 22 62 FC | 	wrlong	local03, fp
0e21c     18 4E 05 F1 | 	add	fp, #24
0e220     A7 22 02 FB | 	rdlong	local03, fp
0e224     1C 4E 85 F1 | 	sub	fp, #28
0e228     A7 22 62 FC | 	wrlong	local03, fp
0e22c     04 4E 85 F1 | 	sub	fp, #4
0e230                 | LR__1101
0e230     20 4E 05 F1 | 	add	fp, #32
0e234     A7 22 02 FB | 	rdlong	local03, fp
0e238     20 4E 85 F1 | 	sub	fp, #32
0e23c     FF FF 3F FF 
0e240     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0e244     0C 4E 05 51 |  if_ne	add	fp, #12
0e248     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e24c     0C 4E 85 51 |  if_ne	sub	fp, #12
0e250     FF FF 7F 5F 
0e254     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0e258     18 00 90 AD |  if_e	jmp	#LR__1102
0e25c     0C 4E 05 F1 | 	add	fp, #12
0e260     A7 22 02 FB | 	rdlong	local03, fp
0e264     0C 4E 85 F1 | 	sub	fp, #12
0e268     A7 20 02 FB | 	rdlong	local02, fp
0e26c     10 23 0A F2 | 	cmp	local03, local02 wz
0e270     54 FF 9F 5D |  if_ne	jmp	#LR__1100
0e274                 | LR__1102
0e274                 | ' 
0e274                 | ' if gotoheader(0)=gotoline then
0e274     0C 4E 05 F1 | 	add	fp, #12
0e278     A7 22 02 FB | 	rdlong	local03, fp
0e27c     0C 4E 85 F1 | 	sub	fp, #12
0e280     A7 1E 02 FB | 	rdlong	local01, fp
0e284     0F 23 0A F2 | 	cmp	local03, local01 wz
0e288     D8 00 90 5D |  if_ne	jmp	#LR__1103
0e28c     6A 00 00 FF 
0e290     70 E4 05 F1 | 	add	objptr, ##54384
0e294     F2 1E 02 FB | 	rdlong	local01, objptr
0e298     0F 21 02 F6 | 	mov	local02, local01
0e29c     01 20 66 F0 | 	shl	local02, #1
0e2a0     0F 21 02 F1 | 	add	local02, local01
0e2a4     02 20 66 F0 | 	shl	local02, #2
0e2a8     03 00 00 FF 
0e2ac     04 E4 85 F1 | 	sub	objptr, ##1540
0e2b0     F2 20 02 F1 | 	add	local02, objptr
0e2b4     08 4E 05 F1 | 	add	fp, #8
0e2b8     A7 22 02 FB | 	rdlong	local03, fp
0e2bc     10 23 62 FC | 	wrlong	local03, local02
0e2c0     03 00 00 FF 
0e2c4     04 E4 05 F1 | 	add	objptr, ##1540
0e2c8     F2 1E 02 FB | 	rdlong	local01, objptr
0e2cc     0F 21 02 F6 | 	mov	local02, local01
0e2d0     01 20 66 F0 | 	shl	local02, #1
0e2d4     0F 21 02 F1 | 	add	local02, local01
0e2d8     02 20 66 F0 | 	shl	local02, #2
0e2dc     03 00 00 FF 
0e2e0     04 E4 85 F1 | 	sub	objptr, ##1540
0e2e4     F2 20 02 F1 | 	add	local02, objptr
0e2e8     08 20 06 F1 | 	add	local02, #8
0e2ec     10 9D 68 FC | 	wrlong	#78, local02
0e2f0     03 00 00 FF 
0e2f4     04 E4 05 F1 | 	add	objptr, ##1540
0e2f8     F2 20 02 FB | 	rdlong	local02, objptr
0e2fc     10 13 02 F6 | 	mov	arg01, local02
0e300     01 12 66 F0 | 	shl	arg01, #1
0e304     10 13 02 F1 | 	add	arg01, local02
0e308     02 12 66 F0 | 	shl	arg01, #2
0e30c     03 00 00 FF 
0e310     04 E4 85 F1 | 	sub	objptr, ##1540
0e314     F2 12 02 F1 | 	add	arg01, objptr
0e318     12 00 00 FF 
0e31c     3C E5 05 F1 | 	add	objptr, ##9532
0e320     F2 14 02 FB | 	rdlong	arg02, objptr
0e324     02 22 06 F6 | 	mov	local03, #2
0e328     10 23 02 F1 | 	add	local03, local02
0e32c     14 00 00 FF 
0e330     54 E5 85 F1 | 	sub	objptr, ##10580
0e334     F2 16 02 FB | 	rdlong	arg03, objptr
0e338     0B 23 02 FD | 	qmul	local03, arg03
0e33c     08 4E 85 F1 | 	sub	fp, #8
0e340     59 00 00 FF 
0e344     88 E5 85 F1 | 	sub	objptr, ##45960
0e348     18 22 62 FD | 	getqx	local03
0e34c     11 15 02 F1 | 	add	arg02, local03
0e350     C8 E1 B0 FD | 	call	#_psram_spin2_write
0e354     0B 00 00 FF 
0e358     CC E4 85 F1 | 	sub	objptr, ##5836
0e35c     18 FD BF FD | 	call	#_do_fast_goto
0e360     08 00 90 FD | 	jmp	#LR__1104
0e364                 | LR__1103
0e364     26 12 06 F6 | 	mov	arg01, #38
0e368     BC AC B0 FD | 	call	#_printerror
0e36c                 | LR__1104
0e36c     A7 F0 03 F6 | 	mov	ptra, fp
0e370     B2 00 A0 FD | 	call	#popregs_
0e374                 | _do_find_goto_ret
0e374     2D 00 64 FD | 	ret
0e378                 | 
0e378                 | ' 
0e378                 | ' sub do_slow_goto
0e378                 | _do_slow_goto
0e378                 | _do_slow_goto_ret
0e378     2D 00 64 FD | 	ret
0e37c                 | 
0e37c                 | ' 
0e37c                 | ' '----------------------- Error processing
0e37c                 | ' 
0e37c                 | ' sub do_error
0e37c                 | _do_error
0e37c     01 4A 05 F6 | 	mov	COUNT_, #1
0e380     A8 00 A0 FD | 	call	#pushregs_
0e384     6A 00 00 FF 
0e388     70 E4 05 F1 | 	add	objptr, ##54384
0e38c     F2 18 02 FB | 	rdlong	arg04, objptr
0e390     0C 17 02 F6 | 	mov	arg03, arg04
0e394     01 16 66 F0 | 	shl	arg03, #1
0e398     0C 17 02 F1 | 	add	arg03, arg04
0e39c     02 16 66 F0 | 	shl	arg03, #2
0e3a0     03 00 00 FF 
0e3a4     04 E4 85 F1 | 	sub	objptr, ##1540
0e3a8     F2 16 02 F1 | 	add	arg03, objptr
0e3ac     0B 1F 02 FB | 	rdlong	local01, arg03
0e3b0                 | ' r=compiledline(lineptr_e).result.uresult
0e3b0                 | ' print "Error ";r;": ";errors$(r)
0e3b0     00 12 06 F6 | 	mov	arg01, #0
0e3b4     67 00 00 FF 
0e3b8     6C E4 85 F1 | 	sub	objptr, ##52844
0e3bc     54 46 B1 FD | 	call	#__system___getiolock_0474
0e3c0     FD 12 02 F6 | 	mov	arg01, result1
0e3c4     BC EC B0 FD | 	call	#__system___lockmem
0e3c8     66 01 00 FF 
0e3cc     93 14 06 F6 | 	mov	arg02, ##@LR__4969
0e3d0     00 12 06 F6 | 	mov	arg01, #0
0e3d4     00 16 06 F6 | 	mov	arg03, #0
0e3d8     AC F9 B0 FD | 	call	#__system___basic_print_string
0e3dc     00 12 06 F6 | 	mov	arg01, #0
0e3e0     0F 15 02 F6 | 	mov	arg02, local01
0e3e4     00 16 06 F6 | 	mov	arg03, #0
0e3e8     0A 18 06 F6 | 	mov	arg04, #10
0e3ec     1C FA B0 FD | 	call	#__system___basic_print_unsigned
0e3f0     66 01 00 FF 
0e3f4     9A 14 06 F6 | 	mov	arg02, ##@LR__4970
0e3f8     00 12 06 F6 | 	mov	arg01, #0
0e3fc     00 16 06 F6 | 	mov	arg03, #0
0e400     84 F9 B0 FD | 	call	#__system___basic_print_string
0e404     02 1E 66 F0 | 	shl	local01, #2
0e408     65 00 00 FF 
0e40c     6C E4 05 F1 | 	add	objptr, ##51820
0e410     F2 1E 02 F1 | 	add	local01, objptr
0e414     0F 15 02 FB | 	rdlong	arg02, local01
0e418     00 12 06 F6 | 	mov	arg01, #0
0e41c     00 16 06 F6 | 	mov	arg03, #0
0e420     65 00 00 FF 
0e424     6C E4 85 F1 | 	sub	objptr, ##51820
0e428     5C F9 B0 FD | 	call	#__system___basic_print_string
0e42c     00 12 06 F6 | 	mov	arg01, #0
0e430     0A 14 06 F6 | 	mov	arg02, #10
0e434     00 16 06 F6 | 	mov	arg03, #0
0e438     F4 F8 B0 FD | 	call	#__system___basic_print_char
0e43c     00 12 06 F6 | 	mov	arg01, #0
0e440     D0 45 B1 FD | 	call	#__system___getiolock_0474
0e444     FD 00 68 FC | 	wrlong	#0, result1
0e448     A7 F0 03 F6 | 	mov	ptra, fp
0e44c     B2 00 A0 FD | 	call	#popregs_
0e450                 | _do_error_ret
0e450     2D 00 64 FD | 	ret
0e454                 | 
0e454                 | ' 
0e454                 | ' 
0e454                 | ' '------------------ Assigning to a variable  
0e454                 | ' 
0e454                 | ' function  convertstring(psaddr as ulong) as string
0e454                 | _convertstring
0e454     04 4A 05 F6 | 	mov	COUNT_, #4
0e458     A8 00 A0 FD | 	call	#pushregs_
0e45c     09 1F 02 F6 | 	mov	local01, arg01
0e460     58 AE B0 FD | 	call	#_pslpeek
0e464     FD 20 02 F6 | 	mov	local02, result1
0e468     66 01 00 FF 
0e46c     9D 22 06 F6 | 	mov	local03, ##@LR__4971
0e470                 | ' 'print "in convertstring: psaddr=";psaddr
0e470                 | ' l=pslpeek(psaddr)
0e470                 | ' 'print "in convertstring: len=";l
0e470                 | ' s="" 
0e470                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0e470     01 24 06 F6 | 	mov	local04, #1
0e474     01 20 06 F1 | 	add	local02, #1
0e478                 | LR__1110
0e478     10 25 52 F2 | 	cmps	local04, local02 wc
0e47c     30 00 90 3D |  if_ae	jmp	#LR__1111
0e480     0F 13 02 F6 | 	mov	arg01, local01
0e484     03 12 06 F1 | 	add	arg01, #3
0e488     12 13 02 F1 | 	add	arg01, local04
0e48c     D4 AD B0 FD | 	call	#_pspeek
0e490     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0e494     F4 0D B1 FD | 	call	#__system__Chr_S
0e498     FD 14 02 F6 | 	mov	arg02, result1
0e49c     11 13 02 F6 | 	mov	arg01, local03
0e4a0     3C EC B0 FD | 	call	#__system___string_concat
0e4a4     FD 22 02 F6 | 	mov	local03, result1
0e4a8     01 24 06 F1 | 	add	local04, #1
0e4ac     C8 FF 9F FD | 	jmp	#LR__1110
0e4b0                 | LR__1111
0e4b0                 | ' 'print "in convertstring: str=";s
0e4b0                 | ' return s
0e4b0     11 FB 01 F6 | 	mov	result1, local03
0e4b4     A7 F0 03 F6 | 	mov	ptra, fp
0e4b8     B2 00 A0 FD | 	call	#popregs_
0e4bc                 | _convertstring_ret
0e4bc     2D 00 64 FD | 	ret
0e4c0                 | 
0e4c0                 | ' 
0e4c0                 | ' sub do_assign
0e4c0                 | _do_assign
0e4c0     05 4A 05 F6 | 	mov	COUNT_, #5
0e4c4     A8 00 A0 FD | 	call	#pushregs_
0e4c8     44 F0 07 F1 | 	add	ptra, #68
0e4cc     6A 00 00 FF 
0e4d0     70 E4 05 F1 | 	add	objptr, ##54384
0e4d4     F2 16 02 FB | 	rdlong	arg03, objptr
0e4d8     0B 15 02 F6 | 	mov	arg02, arg03
0e4dc     01 14 66 F0 | 	shl	arg02, #1
0e4e0     0B 15 02 F1 | 	add	arg02, arg03
0e4e4     02 14 66 F0 | 	shl	arg02, #2
0e4e8     03 00 00 FF 
0e4ec     04 E4 85 F1 | 	sub	objptr, ##1540
0e4f0     F2 14 02 F1 | 	add	arg02, objptr
0e4f4     0A 15 02 FB | 	rdlong	arg02, arg02
0e4f8     18 4E 05 F1 | 	add	fp, #24
0e4fc     A7 14 62 FC | 	wrlong	arg02, fp
0e500                 | ' 
0e500                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0e500                 | ' 
0e500                 | ' if variables(varnum).vartype<array_no_type then 
0e500     18 4E 85 F1 | 	sub	fp, #24
0e504     04 14 66 F0 | 	shl	arg02, #4
0e508     32 00 00 FF 
0e50c     74 E4 85 F1 | 	sub	objptr, ##25716
0e510     F2 14 02 F1 | 	add	arg02, objptr
0e514     0C 14 06 F1 | 	add	arg02, #12
0e518     0A 17 02 FB | 	rdlong	arg03, arg02
0e51c     00 17 16 F2 | 	cmp	arg03, #256 wc
0e520     34 00 00 FF 
0e524     F8 E5 85 F1 | 	sub	objptr, ##27128
0e528     18 01 90 3D |  if_ae	jmp	#LR__1120
0e52c     7C BC BF FD | 	call	#_pop
0e530     A7 FA 61 FC | 	wrlong	result1, fp
0e534     04 4E 05 F1 | 	add	fp, #4
0e538     A7 FC 61 FC | 	wrlong	result2, fp
0e53c     04 4E 05 F1 | 	add	fp, #4
0e540     A7 FE 61 FC | 	wrlong	result3, fp
0e544     08 4E 85 F1 | 	sub	fp, #8
0e548     A7 16 02 FB | 	rdlong	arg03, fp
0e54c     04 4E 05 F1 | 	add	fp, #4
0e550     A7 14 02 FB | 	rdlong	arg02, fp
0e554     14 4E 05 F1 | 	add	fp, #20
0e558     A7 12 02 FB | 	rdlong	arg01, fp
0e55c     04 12 66 F0 | 	shl	arg01, #4
0e560     34 00 00 FF 
0e564     F8 E5 05 F1 | 	add	objptr, ##27128
0e568     F2 12 02 F1 | 	add	arg01, objptr
0e56c     04 12 06 F1 | 	add	arg01, #4
0e570     09 17 62 FC | 	wrlong	arg03, arg01
0e574     A7 16 02 FB | 	rdlong	arg03, fp
0e578     04 16 66 F0 | 	shl	arg03, #4
0e57c     F2 16 02 F1 | 	add	arg03, objptr
0e580     08 16 06 F1 | 	add	arg03, #8
0e584     0B 15 62 FC | 	wrlong	arg02, arg03
0e588     A7 16 02 FB | 	rdlong	arg03, fp
0e58c     04 16 66 F0 | 	shl	arg03, #4
0e590     F2 16 02 F1 | 	add	arg03, objptr
0e594     10 4E 85 F1 | 	sub	fp, #16
0e598     A7 14 02 FB | 	rdlong	arg02, fp
0e59c     0C 16 06 F1 | 	add	arg03, #12
0e5a0     0B 15 62 FC | 	wrlong	arg02, arg03
0e5a4                 | '   t1=pop() 
0e5a4                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0e5a4                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0e5a4                 | '   if variables(varnum).vartype<>result_string2 then return
0e5a4     10 4E 05 F1 | 	add	fp, #16
0e5a8     A7 16 02 FB | 	rdlong	arg03, fp
0e5ac     18 4E 85 F1 | 	sub	fp, #24
0e5b0     04 16 66 F0 | 	shl	arg03, #4
0e5b4     F2 16 02 F1 | 	add	arg03, objptr
0e5b8     0C 16 06 F1 | 	add	arg03, #12
0e5bc     0B 17 02 FB | 	rdlong	arg03, arg03
0e5c0     2B 16 0E F2 | 	cmp	arg03, #43 wz
0e5c4     34 00 00 FF 
0e5c8     F8 E5 85 F1 | 	sub	objptr, ##27128
0e5cc     E4 04 90 5D |  if_ne	jmp	#LR__1143
0e5d0     18 4E 05 F1 | 	add	fp, #24
0e5d4     A7 16 02 FB | 	rdlong	arg03, fp
0e5d8     0B 1F 02 F6 | 	mov	local01, arg03
0e5dc     04 1E 66 F0 | 	shl	local01, #4
0e5e0     34 00 00 FF 
0e5e4     F8 E5 05 F1 | 	add	objptr, ##27128
0e5e8     F2 1E 02 F1 | 	add	local01, objptr
0e5ec     18 4E 85 F1 | 	sub	fp, #24
0e5f0     04 16 66 F0 | 	shl	arg03, #4
0e5f4     F2 16 02 F1 | 	add	arg03, objptr
0e5f8     04 16 06 F1 | 	add	arg03, #4
0e5fc     0B 13 02 FB | 	rdlong	arg01, arg03
0e600     34 00 00 FF 
0e604     F8 E5 85 F1 | 	sub	objptr, ##27128
0e608     48 FE BF FD | 	call	#_convertstring
0e60c     04 1E 06 F1 | 	add	local01, #4
0e610     0F FB 61 FC | 	wrlong	result1, local01
0e614     18 4E 05 F1 | 	add	fp, #24
0e618     A7 1E 02 FB | 	rdlong	local01, fp
0e61c     18 4E 85 F1 | 	sub	fp, #24
0e620     04 1E 66 F0 | 	shl	local01, #4
0e624     34 00 00 FF 
0e628     F8 E5 05 F1 | 	add	objptr, ##27128
0e62c     F2 1E 02 F1 | 	add	local01, objptr
0e630     0C 1E 06 F1 | 	add	local01, #12
0e634     0F 3F 68 FC | 	wrlong	#31, local01
0e638                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0e638                 | '   variables(varnum).vartype=result_string
0e638                 | '   return
0e638     34 00 00 FF 
0e63c     F8 E5 85 F1 | 	sub	objptr, ##27128
0e640     70 04 90 FD | 	jmp	#LR__1143
0e644                 | LR__1120
0e644                 | ' for i=0 to 2 : arrid(i)=0 : next i
0e644     1C 4E 05 F1 | 	add	fp, #28
0e648     A7 00 68 FC | 	wrlong	#0, fp
0e64c     97 16 48 FB | 	callpa	#(@LR__1122-@LR__1121)>>2,fcache_load_ptr_
0e650                 | LR__1121
0e650     A7 1E 02 FB | 	rdlong	local01, fp
0e654     02 1E 66 F0 | 	shl	local01, #2
0e658     18 4E 05 F1 | 	add	fp, #24
0e65c     A7 1E 02 F1 | 	add	local01, fp
0e660     0F 01 68 FC | 	wrlong	#0, local01
0e664     18 4E 85 F1 | 	sub	fp, #24
0e668     A7 1E 02 FB | 	rdlong	local01, fp
0e66c     01 1E 06 F1 | 	add	local01, #1
0e670     A7 1E 62 FC | 	wrlong	local01, fp
0e674     03 1E 16 F2 | 	cmp	local01, #3 wc
0e678     D4 FF 9F CD |  if_b	jmp	#LR__1121
0e67c                 | LR__1122
0e67c     6A 00 00 FF 
0e680     70 E4 05 F1 | 	add	objptr, ##54384
0e684     F2 16 02 FB | 	rdlong	arg03, objptr
0e688     0B 1F 02 F6 | 	mov	local01, arg03
0e68c     01 1E 66 F0 | 	shl	local01, #1
0e690     0B 1F 02 F1 | 	add	local01, arg03
0e694     02 1E 66 F0 | 	shl	local01, #2
0e698     03 00 00 FF 
0e69c     04 E4 85 F1 | 	sub	objptr, ##1540
0e6a0     F2 1E 02 F1 | 	add	local01, objptr
0e6a4     04 1E 06 F1 | 	add	local01, #4
0e6a8     0F 21 02 FB | 	rdlong	local02, local01
0e6ac     04 4E 05 F1 | 	add	fp, #4
0e6b0     A7 20 62 FC | 	wrlong	local02, fp
0e6b4     20 4E 85 F1 | 	sub	fp, #32
0e6b8     67 00 00 FF 
0e6bc     6C E4 85 F1 | 	sub	objptr, ##52844
0e6c0     E8 BA BF FD | 	call	#_pop
0e6c4     A7 FA 61 FC | 	wrlong	result1, fp
0e6c8     04 4E 05 F1 | 	add	fp, #4
0e6cc     A7 FC 61 FC | 	wrlong	result2, fp
0e6d0     04 4E 05 F1 | 	add	fp, #4
0e6d4     A7 FE 61 FC | 	wrlong	result3, fp
0e6d8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0e6d8                 | ' t1=pop() ' var value
0e6d8                 | ' if numpar>0 then
0e6d8     18 4E 05 F1 | 	add	fp, #24
0e6dc     A7 22 02 FB | 	rdlong	local03, fp
0e6e0     20 4E 85 F1 | 	sub	fp, #32
0e6e4     01 22 16 F2 | 	cmp	local03, #1 wc
0e6e8     78 00 90 CD |  if_b	jmp	#LR__1125
0e6ec                 | '   for i=numpar to 1 step -1
0e6ec     20 4E 05 F1 | 	add	fp, #32
0e6f0     A7 24 0A FB | 	rdlong	local04, fp wz
0e6f4     04 4E 85 F1 | 	sub	fp, #4
0e6f8     A7 24 62 FC | 	wrlong	local04, fp
0e6fc     1C 4E 85 F1 | 	sub	fp, #28
0e700     60 00 90 AD |  if_e	jmp	#LR__1124
0e704                 | LR__1123
0e704     A4 BA BF FD | 	call	#_pop
0e708     0C 4E 05 F1 | 	add	fp, #12
0e70c     A7 FA 61 FC | 	wrlong	result1, fp
0e710     04 4E 05 F1 | 	add	fp, #4
0e714     A7 FC 61 FC | 	wrlong	result2, fp
0e718     04 4E 05 F1 | 	add	fp, #4
0e71c     A7 FE 61 FC | 	wrlong	result3, fp
0e720     08 4E 05 F1 | 	add	fp, #8
0e724     A7 22 02 FB | 	rdlong	local03, fp
0e728     01 22 86 F1 | 	sub	local03, #1
0e72c     02 22 66 F0 | 	shl	local03, #2
0e730     18 4E 05 F1 | 	add	fp, #24
0e734     A7 22 02 F1 | 	add	local03, fp
0e738     28 4E 85 F1 | 	sub	fp, #40
0e73c     A7 12 02 F6 | 	mov	arg01, fp
0e740     0C 4E 85 F1 | 	sub	fp, #12
0e744     BC 46 B0 FD | 	call	#_converttoint
0e748     11 FB 61 FC | 	wrlong	result1, local03
0e74c     1C 4E 05 F1 | 	add	fp, #28
0e750     A7 24 02 FB | 	rdlong	local04, fp
0e754     01 24 8E F1 | 	sub	local04, #1 wz
0e758     A7 24 62 FC | 	wrlong	local04, fp
0e75c     1C 4E 85 F1 | 	sub	fp, #28
0e760     A0 FF 9F 5D |  if_ne	jmp	#LR__1123
0e764                 | LR__1124
0e764                 | LR__1125
0e764     18 4E 05 F1 | 	add	fp, #24
0e768     A7 1E 02 FB | 	rdlong	local01, fp
0e76c     04 1E 66 F0 | 	shl	local01, #4
0e770     34 00 00 FF 
0e774     F8 E5 05 F1 | 	add	objptr, ##27128
0e778     F2 1E 02 F1 | 	add	local01, objptr
0e77c     04 1E 06 F1 | 	add	local01, #4
0e780     0F 13 02 FB | 	rdlong	arg01, local01
0e784     0C 4E 05 F1 | 	add	fp, #12
0e788     A7 12 62 FC | 	wrlong	arg01, fp
0e78c     24 4E 85 F1 | 	sub	fp, #36
0e790     34 00 00 FF 
0e794     F8 E5 85 F1 | 	sub	objptr, ##27128
0e798     20 AB B0 FD | 	call	#_pslpeek
0e79c     FD 24 32 F9 | 	getword	local04, result1, #0
0e7a0     28 4E 05 F1 | 	add	fp, #40
0e7a4     A7 24 62 FC | 	wrlong	local04, fp
0e7a8     04 4E 85 F1 | 	sub	fp, #4
0e7ac     A7 12 02 FB | 	rdlong	arg01, fp
0e7b0     24 4E 85 F1 | 	sub	fp, #36
0e7b4     02 12 06 F1 | 	add	arg01, #2
0e7b8     A8 AA B0 FD | 	call	#_pspeek
0e7bc     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e7c0     2C 4E 05 F1 | 	add	fp, #44
0e7c4     A7 FA 61 FC | 	wrlong	result1, fp
0e7c8                 | ' esize=pspeek(arrptr+2)
0e7c8                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0e7c8     08 4E 85 F1 | 	sub	fp, #8
0e7cc     A7 12 02 FB | 	rdlong	arg01, fp
0e7d0     24 4E 85 F1 | 	sub	fp, #36
0e7d4     04 12 06 F1 | 	add	arg01, #4
0e7d8     E0 AA B0 FD | 	call	#_pslpeek
0e7dc     FD 24 02 F6 | 	mov	local04, result1
0e7e0     34 4E 05 F1 | 	add	fp, #52
0e7e4     A7 1E 02 FB | 	rdlong	local01, fp
0e7e8     34 4E 85 F1 | 	sub	fp, #52
0e7ec     12 1F 12 F2 | 	cmp	local01, local04 wc
0e7f0     54 00 90 3D |  if_ae	jmp	#LR__1126
0e7f4     24 4E 05 F1 | 	add	fp, #36
0e7f8     A7 12 02 FB | 	rdlong	arg01, fp
0e7fc     24 4E 85 F1 | 	sub	fp, #36
0e800     08 12 06 F1 | 	add	arg01, #8
0e804     B4 AA B0 FD | 	call	#_pslpeek
0e808     FD 1E 02 F6 | 	mov	local01, result1
0e80c     38 4E 05 F1 | 	add	fp, #56
0e810     A7 24 02 FB | 	rdlong	local04, fp
0e814     38 4E 85 F1 | 	sub	fp, #56
0e818     0F 25 12 F2 | 	cmp	local04, local01 wc
0e81c     28 00 90 3D |  if_ae	jmp	#LR__1126
0e820     24 4E 05 F1 | 	add	fp, #36
0e824     A7 12 02 FB | 	rdlong	arg01, fp
0e828     24 4E 85 F1 | 	sub	fp, #36
0e82c     0C 12 06 F1 | 	add	arg01, #12
0e830     88 AA B0 FD | 	call	#_pslpeek
0e834     3C 4E 05 F1 | 	add	fp, #60
0e838     A7 24 02 FB | 	rdlong	local04, fp
0e83c     3C 4E 85 F1 | 	sub	fp, #60
0e840     FD 24 12 F2 | 	cmp	local04, result1 wc
0e844     0C 00 90 CD |  if_b	jmp	#LR__1127
0e848                 | LR__1126
0e848     31 12 06 F6 | 	mov	arg01, #49
0e84c     D8 A7 B0 FD | 	call	#_printerror
0e850     60 02 90 FD | 	jmp	#LR__1143
0e854                 | LR__1127
0e854     24 4E 05 F1 | 	add	fp, #36
0e858     A7 12 02 FB | 	rdlong	arg01, fp
0e85c     09 25 02 F6 | 	mov	local04, arg01
0e860     10 24 06 F1 | 	add	local04, #16
0e864     24 4E 85 F1 | 	sub	fp, #36
0e868     04 12 06 F1 | 	add	arg01, #4
0e86c     4C AA B0 FD | 	call	#_pslpeek
0e870     FD 1E 02 F6 | 	mov	local01, result1
0e874     38 4E 05 F1 | 	add	fp, #56
0e878     A7 20 02 FB | 	rdlong	local02, fp
0e87c     10 1F 02 FD | 	qmul	local01, local02
0e880     04 4E 85 F1 | 	sub	fp, #4
0e884     A7 22 02 FB | 	rdlong	local03, fp
0e888     10 4E 85 F1 | 	sub	fp, #16
0e88c     A7 12 02 FB | 	rdlong	arg01, fp
0e890     24 4E 85 F1 | 	sub	fp, #36
0e894     08 12 06 F1 | 	add	arg01, #8
0e898     18 20 62 FD | 	getqx	local02
0e89c     10 23 02 F1 | 	add	local03, local02
0e8a0     18 AA B0 FD | 	call	#_pslpeek
0e8a4     FD 20 02 F6 | 	mov	local02, result1
0e8a8     24 4E 05 F1 | 	add	fp, #36
0e8ac     A7 12 02 FB | 	rdlong	arg01, fp
0e8b0     24 4E 85 F1 | 	sub	fp, #36
0e8b4     04 12 06 F1 | 	add	arg01, #4
0e8b8     00 AA B0 FD | 	call	#_pslpeek
0e8bc     FD 20 02 FD | 	qmul	local02, result1
0e8c0     3C 4E 05 F1 | 	add	fp, #60
0e8c4     A7 20 02 FB | 	rdlong	local02, fp
0e8c8     18 1E 62 FD | 	getqx	local01
0e8cc     10 1F 02 FD | 	qmul	local01, local02
0e8d0     10 4E 85 F1 | 	sub	fp, #16
0e8d4     A7 20 02 FB | 	rdlong	local02, fp
0e8d8     18 1E 62 FD | 	getqx	local01
0e8dc     0F 23 02 F1 | 	add	local03, local01
0e8e0     11 21 02 FD | 	qmul	local02, local03
0e8e4     04 4E 05 F1 | 	add	fp, #4
0e8e8                 | ' 
0e8e8                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0e8e8                 | ' select case arrtype
0e8e8     18 22 62 FD | 	getqx	local03
0e8ec     11 25 02 F1 | 	add	local04, local03
0e8f0     A7 24 62 FC | 	wrlong	local04, fp
0e8f4     08 4E 85 F1 | 	sub	fp, #8
0e8f8     A7 26 02 FB | 	rdlong	local05, fp
0e8fc     28 4E 85 F1 | 	sub	fp, #40
0e900     00 27 86 F1 | 	sub	local05, #256
0e904     0C 26 26 F3 | 	fle	local05, #12
0e908     30 26 62 FD | 	jmprel	local05
0e90c                 | LR__1128
0e90c     30 00 90 FD | 	jmp	#LR__1129
0e910     58 00 90 FD | 	jmp	#LR__1130
0e914     6C 00 90 FD | 	jmp	#LR__1131
0e918     80 00 90 FD | 	jmp	#LR__1132
0e91c     B0 00 90 FD | 	jmp	#LR__1133
0e920     E0 00 90 FD | 	jmp	#LR__1134
0e924     F4 00 90 FD | 	jmp	#LR__1135
0e928     08 01 90 FD | 	jmp	#LR__1136
0e92c     1C 01 90 FD | 	jmp	#LR__1137
0e930     30 01 90 FD | 	jmp	#LR__1138
0e934     44 01 90 FD | 	jmp	#LR__1139
0e938     58 01 90 FD | 	jmp	#LR__1140
0e93c     6C 01 90 FD | 	jmp	#LR__1141
0e940                 | LR__1129
0e940     A7 12 02 F6 | 	mov	arg01, fp
0e944     30 4E 05 F1 | 	add	fp, #48
0e948     A7 14 02 FB | 	rdlong	arg02, fp
0e94c     30 4E 85 F1 | 	sub	fp, #48
0e950     0C 16 06 F6 | 	mov	arg03, #12
0e954     0B 00 00 FF 
0e958     CC E4 05 F1 | 	add	objptr, ##5836
0e95c     BC DB B0 FD | 	call	#_psram_spin2_write
0e960     0B 00 00 FF 
0e964     CC E4 85 F1 | 	sub	objptr, ##5836
0e968     48 01 90 FD | 	jmp	#LR__1142
0e96c                 | LR__1130
0e96c     30 4E 05 F1 | 	add	fp, #48
0e970     A7 12 02 FB | 	rdlong	arg01, fp
0e974     30 4E 85 F1 | 	sub	fp, #48
0e978     A7 14 02 FB | 	rdlong	arg02, fp
0e97c     9C A8 B0 FD | 	call	#_pspoke
0e980     30 01 90 FD | 	jmp	#LR__1142
0e984                 | LR__1131
0e984     30 4E 05 F1 | 	add	fp, #48
0e988     A7 12 02 FB | 	rdlong	arg01, fp
0e98c     30 4E 85 F1 | 	sub	fp, #48
0e990     A7 14 02 FB | 	rdlong	arg02, fp
0e994     84 A8 B0 FD | 	call	#_pspoke
0e998     18 01 90 FD | 	jmp	#LR__1142
0e99c                 | LR__1132
0e99c     30 4E 05 F1 | 	add	fp, #48
0e9a0     A7 12 02 FB | 	rdlong	arg01, fp
0e9a4     30 4E 85 F1 | 	sub	fp, #48
0e9a8     A7 14 02 FB | 	rdlong	arg02, fp
0e9ac     6C A8 B0 FD | 	call	#_pspoke
0e9b0     30 4E 05 F1 | 	add	fp, #48
0e9b4     A7 12 02 FB | 	rdlong	arg01, fp
0e9b8     30 4E 85 F1 | 	sub	fp, #48
0e9bc     01 12 06 F1 | 	add	arg01, #1
0e9c0     A7 14 02 FB | 	rdlong	arg02, fp
0e9c4     08 14 46 F0 | 	shr	arg02, #8
0e9c8     50 A8 B0 FD | 	call	#_pspoke
0e9cc     E4 00 90 FD | 	jmp	#LR__1142
0e9d0                 | LR__1133
0e9d0     30 4E 05 F1 | 	add	fp, #48
0e9d4     A7 12 02 FB | 	rdlong	arg01, fp
0e9d8     30 4E 85 F1 | 	sub	fp, #48
0e9dc     A7 14 02 FB | 	rdlong	arg02, fp
0e9e0     38 A8 B0 FD | 	call	#_pspoke
0e9e4     30 4E 05 F1 | 	add	fp, #48
0e9e8     A7 12 02 FB | 	rdlong	arg01, fp
0e9ec     30 4E 85 F1 | 	sub	fp, #48
0e9f0     01 12 06 F1 | 	add	arg01, #1
0e9f4     A7 14 02 FB | 	rdlong	arg02, fp
0e9f8     08 14 46 F0 | 	shr	arg02, #8
0e9fc     1C A8 B0 FD | 	call	#_pspoke
0ea00     B0 00 90 FD | 	jmp	#LR__1142
0ea04                 | LR__1134
0ea04     30 4E 05 F1 | 	add	fp, #48
0ea08     A7 12 02 FB | 	rdlong	arg01, fp
0ea0c     30 4E 85 F1 | 	sub	fp, #48
0ea10     A7 14 02 FB | 	rdlong	arg02, fp
0ea14     74 A7 B0 FD | 	call	#_pslpoke
0ea18     98 00 90 FD | 	jmp	#LR__1142
0ea1c                 | LR__1135
0ea1c     30 4E 05 F1 | 	add	fp, #48
0ea20     A7 12 02 FB | 	rdlong	arg01, fp
0ea24     30 4E 85 F1 | 	sub	fp, #48
0ea28     A7 14 02 FB | 	rdlong	arg02, fp
0ea2c     5C A7 B0 FD | 	call	#_pslpoke
0ea30     80 00 90 FD | 	jmp	#LR__1142
0ea34                 | LR__1136
0ea34     30 4E 05 F1 | 	add	fp, #48
0ea38     A7 12 02 FB | 	rdlong	arg01, fp
0ea3c     30 4E 85 F1 | 	sub	fp, #48
0ea40     A7 14 02 FB | 	rdlong	arg02, fp
0ea44     44 A7 B0 FD | 	call	#_pslpoke
0ea48     68 00 90 FD | 	jmp	#LR__1142
0ea4c                 | LR__1137
0ea4c     30 4E 05 F1 | 	add	fp, #48
0ea50     A7 12 02 FB | 	rdlong	arg01, fp
0ea54     30 4E 85 F1 | 	sub	fp, #48
0ea58     A7 14 02 FB | 	rdlong	arg02, fp
0ea5c     2C A7 B0 FD | 	call	#_pslpoke
0ea60     50 00 90 FD | 	jmp	#LR__1142
0ea64                 | LR__1138
0ea64     30 4E 05 F1 | 	add	fp, #48
0ea68     A7 12 02 FB | 	rdlong	arg01, fp
0ea6c     30 4E 85 F1 | 	sub	fp, #48
0ea70     A7 14 02 FB | 	rdlong	arg02, fp
0ea74     14 A7 B0 FD | 	call	#_pslpoke
0ea78     38 00 90 FD | 	jmp	#LR__1142
0ea7c                 | LR__1139
0ea7c     30 4E 05 F1 | 	add	fp, #48
0ea80     A7 12 02 FB | 	rdlong	arg01, fp
0ea84     30 4E 85 F1 | 	sub	fp, #48
0ea88     A7 14 02 FB | 	rdlong	arg02, fp
0ea8c     FC A6 B0 FD | 	call	#_pslpoke
0ea90     20 00 90 FD | 	jmp	#LR__1142
0ea94                 | LR__1140
0ea94     30 4E 05 F1 | 	add	fp, #48
0ea98     A7 12 02 FB | 	rdlong	arg01, fp
0ea9c     30 4E 85 F1 | 	sub	fp, #48
0eaa0     A7 14 02 FB | 	rdlong	arg02, fp
0eaa4     E4 A6 B0 FD | 	call	#_pslpoke
0eaa8     08 00 90 FD | 	jmp	#LR__1142
0eaac                 | LR__1141
0eaac     2F 12 06 F6 | 	mov	arg01, #47
0eab0     74 A5 B0 FD | 	call	#_printerror
0eab4                 | LR__1142
0eab4                 | LR__1143
0eab4     A7 F0 03 F6 | 	mov	ptra, fp
0eab8     B2 00 A0 FD | 	call	#popregs_
0eabc                 | _do_assign_ret
0eabc     2D 00 64 FD | 	ret
0eac0                 | 
0eac0                 | ' 
0eac0                 | ' 
0eac0                 | ' ' --------------------- Read a variable and push to the stack
0eac0                 | ' 
0eac0                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0eac0                 | ' 
0eac0                 | ' sub do_getvar
0eac0                 | _do_getvar
0eac0     04 4A 05 F6 | 	mov	COUNT_, #4
0eac4     A8 00 A0 FD | 	call	#pushregs_
0eac8     3C F0 07 F1 | 	add	ptra, #60
0eacc                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0eacc                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0eacc     6A 00 00 FF 
0ead0     70 E4 05 F1 | 	add	objptr, ##54384
0ead4     F2 1E 02 FB | 	rdlong	local01, objptr
0ead8     0F 17 02 F6 | 	mov	arg03, local01
0eadc     01 16 66 F0 | 	shl	arg03, #1
0eae0     0F 17 02 F1 | 	add	arg03, local01
0eae4     02 16 66 F0 | 	shl	arg03, #2
0eae8     03 00 00 FF 
0eaec     04 E4 85 F1 | 	sub	objptr, ##1540
0eaf0     F2 16 02 F1 | 	add	arg03, objptr
0eaf4     04 16 06 F1 | 	add	arg03, #4
0eaf8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0eafc     67 00 00 FF 
0eb00     6C E4 85 F1 | 	sub	objptr, ##52844
0eb04     C4 00 90 5D |  if_ne	jmp	#LR__1151
0eb08     6A 00 00 FF 
0eb0c     70 E4 05 F1 | 	add	objptr, ##54384
0eb10     F2 1E 02 FB | 	rdlong	local01, objptr
0eb14     0F 13 02 F6 | 	mov	arg01, local01
0eb18     01 12 66 F0 | 	shl	arg01, #1
0eb1c     0F 13 02 F1 | 	add	arg01, local01
0eb20     02 12 66 F0 | 	shl	arg01, #2
0eb24     03 00 00 FF 
0eb28     04 E4 85 F1 | 	sub	objptr, ##1540
0eb2c     F2 12 02 F1 | 	add	arg01, objptr
0eb30     09 1F 02 FB | 	rdlong	local01, arg01
0eb34     04 1E 66 F0 | 	shl	local01, #4
0eb38     32 00 00 FF 
0eb3c     74 E4 85 F1 | 	sub	objptr, ##25716
0eb40     F2 1E 02 F1 | 	add	local01, objptr
0eb44     04 1E 06 F1 | 	add	local01, #4
0eb48     0F 13 02 FB | 	rdlong	arg01, local01
0eb4c     04 1E 06 F1 | 	add	local01, #4
0eb50     0F 1F 02 FB | 	rdlong	local01, local01
0eb54     A7 12 62 FC | 	wrlong	arg01, fp
0eb58     04 4E 05 F1 | 	add	fp, #4
0eb5c     A7 1E 62 FC | 	wrlong	local01, fp
0eb60     35 00 00 FF 
0eb64     78 E4 05 F1 | 	add	objptr, ##27256
0eb68     F2 1E 02 FB | 	rdlong	local01, objptr
0eb6c     0F 13 02 F6 | 	mov	arg01, local01
0eb70     01 12 66 F0 | 	shl	arg01, #1
0eb74     0F 13 02 F1 | 	add	arg01, local01
0eb78     02 12 66 F0 | 	shl	arg01, #2
0eb7c     03 00 00 FF 
0eb80     04 E4 85 F1 | 	sub	objptr, ##1540
0eb84     F2 12 02 F1 | 	add	arg01, objptr
0eb88     09 1F 02 FB | 	rdlong	local01, arg01
0eb8c     04 1E 66 F0 | 	shl	local01, #4
0eb90     32 00 00 FF 
0eb94     74 E4 85 F1 | 	sub	objptr, ##25716
0eb98     F2 1E 02 F1 | 	add	local01, objptr
0eb9c     0C 1E 06 F1 | 	add	local01, #12
0eba0     0F 1F 02 FB | 	rdlong	local01, local01
0eba4     04 4E 05 F1 | 	add	fp, #4
0eba8     A7 1E 62 FC | 	wrlong	local01, fp
0ebac                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0ebac                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0ebac                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0ebac     08 4E 85 F1 | 	sub	fp, #8
0ebb0     00 1F 16 F2 | 	cmp	local01, #256 wc
0ebb4     34 00 00 FF 
0ebb8     F8 E5 85 F1 | 	sub	objptr, ##27128
0ebbc     0C 00 90 3D |  if_ae	jmp	#LR__1150
0ebc0     A7 12 02 F6 | 	mov	arg01, fp
0ebc4     7C B6 BF FD | 	call	#_push
0ebc8     A0 04 90 FD | 	jmp	#LR__1172
0ebcc                 | LR__1150
0ebcc                 | LR__1151
0ebcc     6A 00 00 FF 
0ebd0     70 E4 05 F1 | 	add	objptr, ##54384
0ebd4     F2 16 02 FB | 	rdlong	arg03, objptr
0ebd8     0B 15 02 F6 | 	mov	arg02, arg03
0ebdc     01 14 66 F0 | 	shl	arg02, #1
0ebe0     0B 15 02 F1 | 	add	arg02, arg03
0ebe4     02 14 66 F0 | 	shl	arg02, #2
0ebe8     03 00 00 FF 
0ebec     04 E4 85 F1 | 	sub	objptr, ##1540
0ebf0     F2 14 02 F1 | 	add	arg02, objptr
0ebf4     0A 17 02 FB | 	rdlong	arg03, arg02
0ebf8     04 16 66 F0 | 	shl	arg03, #4
0ebfc     32 00 00 FF 
0ec00     74 E4 85 F1 | 	sub	objptr, ##25716
0ec04     F2 16 02 F1 | 	add	arg03, objptr
0ec08     04 16 06 F1 | 	add	arg03, #4
0ec0c     0B 13 02 FB | 	rdlong	arg01, arg03
0ec10     0C 4E 05 F1 | 	add	fp, #12
0ec14     A7 12 62 FC | 	wrlong	arg01, fp
0ec18     0C 4E 85 F1 | 	sub	fp, #12
0ec1c     34 00 00 FF 
0ec20     F8 E5 85 F1 | 	sub	objptr, ##27128
0ec24     94 A6 B0 FD | 	call	#_pslpeek
0ec28     FD FA 31 F9 | 	getword	result1, result1, #0
0ec2c     10 4E 05 F1 | 	add	fp, #16
0ec30     A7 FA 61 FC | 	wrlong	result1, fp
0ec34     6A 00 00 FF 
0ec38     70 E4 05 F1 | 	add	objptr, ##54384
0ec3c     F2 16 02 FB | 	rdlong	arg03, objptr
0ec40     0B 15 02 F6 | 	mov	arg02, arg03
0ec44     01 14 66 F0 | 	shl	arg02, #1
0ec48     0B 15 02 F1 | 	add	arg02, arg03
0ec4c     02 14 66 F0 | 	shl	arg02, #2
0ec50     03 00 00 FF 
0ec54     04 E4 85 F1 | 	sub	objptr, ##1540
0ec58     F2 14 02 F1 | 	add	arg02, objptr
0ec5c     04 14 06 F1 | 	add	arg02, #4
0ec60     0A 17 02 FB | 	rdlong	arg03, arg02
0ec64     04 4E 05 F1 | 	add	fp, #4
0ec68     A7 16 62 FC | 	wrlong	arg03, fp
0ec6c     08 4E 85 F1 | 	sub	fp, #8
0ec70     A7 12 02 FB | 	rdlong	arg01, fp
0ec74     0C 4E 85 F1 | 	sub	fp, #12
0ec78     02 12 06 F1 | 	add	arg01, #2
0ec7c     67 00 00 FF 
0ec80     6C E4 85 F1 | 	sub	objptr, ##52844
0ec84     DC A5 B0 FD | 	call	#_pspeek
0ec88     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ec8c     18 4E 05 F1 | 	add	fp, #24
0ec90     A7 FA 61 FC | 	wrlong	result1, fp
0ec94     0C 4E 85 F1 | 	sub	fp, #12
0ec98     A7 12 02 FB | 	rdlong	arg01, fp
0ec9c     0C 4E 85 F1 | 	sub	fp, #12
0eca0     04 12 06 F1 | 	add	arg01, #4
0eca4     14 A6 B0 FD | 	call	#_pslpeek
0eca8     1C 4E 05 F1 | 	add	fp, #28
0ecac     A7 FA 61 FC | 	wrlong	result1, fp
0ecb0     10 4E 85 F1 | 	sub	fp, #16
0ecb4     A7 12 02 FB | 	rdlong	arg01, fp
0ecb8     0C 4E 85 F1 | 	sub	fp, #12
0ecbc     08 12 06 F1 | 	add	arg01, #8
0ecc0     F8 A5 B0 FD | 	call	#_pslpeek
0ecc4     20 4E 05 F1 | 	add	fp, #32
0ecc8     A7 FA 61 FC | 	wrlong	result1, fp
0eccc     14 4E 85 F1 | 	sub	fp, #20
0ecd0     A7 12 02 FB | 	rdlong	arg01, fp
0ecd4     0C 4E 85 F1 | 	sub	fp, #12
0ecd8     0C 12 06 F1 | 	add	arg01, #12
0ecdc     DC A5 B0 FD | 	call	#_pslpeek
0ece0     24 4E 05 F1 | 	add	fp, #36
0ece4     A7 FA 61 FC | 	wrlong	result1, fp
0ece8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0ece8                 | ' esize=pspeek(arrptr+2)
0ece8                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0ece8                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0ece8                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0ece8                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0ece8     10 4E 85 F1 | 	sub	fp, #16
0ecec     A7 16 02 FB | 	rdlong	arg03, fp
0ecf0     14 4E 85 F1 | 	sub	fp, #20
0ecf4     03 16 16 F2 | 	cmp	arg03, #3 wc
0ecf8     38 00 90 CD |  if_b	jmp	#LR__1152
0ecfc     AC B4 BF FD | 	call	#_pop
0ed00     FF 16 02 F6 | 	mov	arg03, result3
0ed04     A7 FA 61 FC | 	wrlong	result1, fp
0ed08     04 4E 05 F1 | 	add	fp, #4
0ed0c     A7 FC 61 FC | 	wrlong	result2, fp
0ed10     04 4E 05 F1 | 	add	fp, #4
0ed14     A7 16 62 FC | 	wrlong	arg03, fp
0ed18     08 4E 85 F1 | 	sub	fp, #8
0ed1c     A7 12 02 F6 | 	mov	arg01, fp
0ed20     E0 40 B0 FD | 	call	#_converttoint
0ed24     30 4E 05 F1 | 	add	fp, #48
0ed28     A7 FA 61 FC | 	wrlong	result1, fp
0ed2c     30 4E 85 F1 | 	sub	fp, #48
0ed30     0C 00 90 FD | 	jmp	#LR__1153
0ed34                 | LR__1152
0ed34     30 4E 05 F1 | 	add	fp, #48
0ed38     A7 00 68 FC | 	wrlong	#0, fp
0ed3c     30 4E 85 F1 | 	sub	fp, #48
0ed40                 | LR__1153
0ed40                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0ed40     14 4E 05 F1 | 	add	fp, #20
0ed44     A7 16 02 FB | 	rdlong	arg03, fp
0ed48     14 4E 85 F1 | 	sub	fp, #20
0ed4c     02 16 16 F2 | 	cmp	arg03, #2 wc
0ed50     38 00 90 CD |  if_b	jmp	#LR__1154
0ed54     54 B4 BF FD | 	call	#_pop
0ed58     FF 16 02 F6 | 	mov	arg03, result3
0ed5c     A7 FA 61 FC | 	wrlong	result1, fp
0ed60     04 4E 05 F1 | 	add	fp, #4
0ed64     A7 FC 61 FC | 	wrlong	result2, fp
0ed68     04 4E 05 F1 | 	add	fp, #4
0ed6c     A7 16 62 FC | 	wrlong	arg03, fp
0ed70     08 4E 85 F1 | 	sub	fp, #8
0ed74     A7 12 02 F6 | 	mov	arg01, fp
0ed78     88 40 B0 FD | 	call	#_converttoint
0ed7c     2C 4E 05 F1 | 	add	fp, #44
0ed80     A7 FA 61 FC | 	wrlong	result1, fp
0ed84     2C 4E 85 F1 | 	sub	fp, #44
0ed88     0C 00 90 FD | 	jmp	#LR__1155
0ed8c                 | LR__1154
0ed8c     2C 4E 05 F1 | 	add	fp, #44
0ed90     A7 00 68 FC | 	wrlong	#0, fp
0ed94     2C 4E 85 F1 | 	sub	fp, #44
0ed98                 | LR__1155
0ed98                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0ed98     14 4E 05 F1 | 	add	fp, #20
0ed9c     A7 16 02 FB | 	rdlong	arg03, fp
0eda0     14 4E 85 F1 | 	sub	fp, #20
0eda4     01 16 16 F2 | 	cmp	arg03, #1 wc
0eda8     38 00 90 CD |  if_b	jmp	#LR__1156
0edac     FC B3 BF FD | 	call	#_pop
0edb0     FF 16 02 F6 | 	mov	arg03, result3
0edb4     A7 FA 61 FC | 	wrlong	result1, fp
0edb8     04 4E 05 F1 | 	add	fp, #4
0edbc     A7 FC 61 FC | 	wrlong	result2, fp
0edc0     04 4E 05 F1 | 	add	fp, #4
0edc4     A7 16 62 FC | 	wrlong	arg03, fp
0edc8     08 4E 85 F1 | 	sub	fp, #8
0edcc     A7 12 02 F6 | 	mov	arg01, fp
0edd0     30 40 B0 FD | 	call	#_converttoint
0edd4     28 4E 05 F1 | 	add	fp, #40
0edd8     A7 FA 61 FC | 	wrlong	result1, fp
0eddc     28 4E 85 F1 | 	sub	fp, #40
0ede0     0C 00 90 FD | 	jmp	#LR__1157
0ede4                 | LR__1156
0ede4     28 4E 05 F1 | 	add	fp, #40
0ede8     A7 00 68 FC | 	wrlong	#0, fp
0edec     28 4E 85 F1 | 	sub	fp, #40
0edf0                 | LR__1157
0edf0     0C 4E 05 F1 | 	add	fp, #12
0edf4     A7 20 02 FB | 	rdlong	local02, fp
0edf8     1C 4E 05 F1 | 	add	fp, #28
0edfc     A7 22 02 FB | 	rdlong	local03, fp
0ee00     04 4E 05 F1 | 	add	fp, #4
0ee04     A7 FC 01 FB | 	rdlong	result2, fp
0ee08     10 4E 85 F1 | 	sub	fp, #16
0ee0c     A7 FE 01 FB | 	rdlong	result3, fp
0ee10     FF FC 01 FD | 	qmul	result2, result3
0ee14     10 20 06 F1 | 	add	local02, #16
0ee18     14 4E 05 F1 | 	add	fp, #20
0ee1c     A7 FC 01 FB | 	rdlong	result2, fp
0ee20     18 FA 61 FD | 	getqx	result1
0ee24     FF FC 01 FD | 	qmul	result2, result3
0ee28     FD 22 02 F1 | 	add	local03, result1
0ee2c     10 4E 85 F1 | 	sub	fp, #16
0ee30     A7 FE 01 FB | 	rdlong	result3, fp
0ee34     18 FC 61 FD | 	getqx	result2
0ee38     FF FC 01 FD | 	qmul	result2, result3
0ee3c     08 4E 85 F1 | 	sub	fp, #8
0ee40     A7 FE 01 FB | 	rdlong	result3, fp
0ee44     18 FC 61 FD | 	getqx	result2
0ee48     FE 22 02 F1 | 	add	local03, result2
0ee4c     FF 22 02 FD | 	qmul	local03, result3
0ee50     1C 4E 05 F1 | 	add	fp, #28
0ee54                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0ee54                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0ee54                 | ' 
0ee54                 | ' select case vartype
0ee54     18 FC 61 FD | 	getqx	result2
0ee58     FE 20 02 F1 | 	add	local02, result2
0ee5c     A7 20 62 FC | 	wrlong	local02, fp
0ee60     24 4E 85 F1 | 	sub	fp, #36
0ee64     A7 24 02 FB | 	rdlong	local04, fp
0ee68     10 4E 85 F1 | 	sub	fp, #16
0ee6c     00 25 86 F1 | 	sub	local04, #256
0ee70     0C 24 26 F3 | 	fle	local04, #12
0ee74     30 24 62 FD | 	jmprel	local04
0ee78                 | LR__1158
0ee78     30 00 90 FD | 	jmp	#LR__1159
0ee7c     58 00 90 FD | 	jmp	#LR__1160
0ee80     8C 00 90 FD | 	jmp	#LR__1161
0ee84     AC 00 90 FD | 	jmp	#LR__1162
0ee88     E8 00 90 FD | 	jmp	#LR__1163
0ee8c     08 01 90 FD | 	jmp	#LR__1164
0ee90     24 01 90 FD | 	jmp	#LR__1165
0ee94     40 01 90 FD | 	jmp	#LR__1166
0ee98     50 01 90 FD | 	jmp	#LR__1167
0ee9c     60 01 90 FD | 	jmp	#LR__1168
0eea0     7C 01 90 FD | 	jmp	#LR__1169
0eea4     8C 01 90 FD | 	jmp	#LR__1170
0eea8     B8 01 90 FD | 	jmp	#LR__1171
0eeac                 | LR__1159
0eeac     A7 12 02 F6 | 	mov	arg01, fp
0eeb0     34 4E 05 F1 | 	add	fp, #52
0eeb4     A7 14 02 FB | 	rdlong	arg02, fp
0eeb8     34 4E 85 F1 | 	sub	fp, #52
0eebc     0C 16 06 F6 | 	mov	arg03, #12
0eec0     0B 00 00 FF 
0eec4     CC E4 05 F1 | 	add	objptr, ##5836
0eec8     B4 D5 B0 FD | 	call	#_psram_spin2_read1
0eecc     0B 00 00 FF 
0eed0     CC E4 85 F1 | 	sub	objptr, ##5836
0eed4     8C 01 90 FD | 	jmp	#LR__1171
0eed8                 | LR__1160
0eed8     08 4E 05 F1 | 	add	fp, #8
0eedc     A7 38 68 FC | 	wrlong	#28, fp
0eee0     2C 4E 05 F1 | 	add	fp, #44
0eee4     A7 12 02 FB | 	rdlong	arg01, fp
0eee8     34 4E 85 F1 | 	sub	fp, #52
0eeec     74 A3 B0 FD | 	call	#_pspeek
0eef0     FD FA E1 F8 | 	getbyte	result1, result1, #0
0eef4     A7 FA 61 FC | 	wrlong	result1, fp
0eef8     80 FA 15 F2 | 	cmp	result1, #128 wc
0eefc     00 1F 66 36 |  if_ae	neg	local01, #256
0ef00     A7 22 02 3B |  if_ae	rdlong	local03, fp
0ef04     11 1F 42 35 |  if_ae	or	local01, local03
0ef08     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0ef0c     54 01 90 FD | 	jmp	#LR__1171
0ef10                 | LR__1161
0ef10     08 4E 05 F1 | 	add	fp, #8
0ef14     A7 3A 68 FC | 	wrlong	#29, fp
0ef18     2C 4E 05 F1 | 	add	fp, #44
0ef1c     A7 12 02 FB | 	rdlong	arg01, fp
0ef20     34 4E 85 F1 | 	sub	fp, #52
0ef24     3C A3 B0 FD | 	call	#_pspeek
0ef28     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ef2c     A7 FA 61 FC | 	wrlong	result1, fp
0ef30     30 01 90 FD | 	jmp	#LR__1171
0ef34                 | LR__1162
0ef34     08 4E 05 F1 | 	add	fp, #8
0ef38     A7 38 68 FC | 	wrlong	#28, fp
0ef3c     2C 4E 05 F1 | 	add	fp, #44
0ef40     A7 12 02 FB | 	rdlong	arg01, fp
0ef44     34 4E 85 F1 | 	sub	fp, #52
0ef48     70 A3 B0 FD | 	call	#_pslpeek
0ef4c     FD FA 31 F9 | 	getword	result1, result1, #0
0ef50     A7 FA 61 FC | 	wrlong	result1, fp
0ef54     40 00 00 FF 
0ef58     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0ef5c     FF 7F 00 3F 
0ef60     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0ef64     A7 22 02 3B |  if_ae	rdlong	local03, fp
0ef68     11 1F 42 35 |  if_ae	or	local01, local03
0ef6c     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0ef70     F0 00 90 FD | 	jmp	#LR__1171
0ef74                 | LR__1163
0ef74     08 4E 05 F1 | 	add	fp, #8
0ef78     A7 3A 68 FC | 	wrlong	#29, fp
0ef7c     2C 4E 05 F1 | 	add	fp, #44
0ef80     A7 12 02 FB | 	rdlong	arg01, fp
0ef84     34 4E 85 F1 | 	sub	fp, #52
0ef88     30 A3 B0 FD | 	call	#_pslpeek
0ef8c     FD FA 31 F9 | 	getword	result1, result1, #0
0ef90     A7 FA 61 FC | 	wrlong	result1, fp
0ef94     CC 00 90 FD | 	jmp	#LR__1171
0ef98                 | LR__1164
0ef98     08 4E 05 F1 | 	add	fp, #8
0ef9c     A7 38 68 FC | 	wrlong	#28, fp
0efa0     2C 4E 05 F1 | 	add	fp, #44
0efa4     A7 12 02 FB | 	rdlong	arg01, fp
0efa8     34 4E 85 F1 | 	sub	fp, #52
0efac     0C A3 B0 FD | 	call	#_pslpeek
0efb0     A7 FA 61 FC | 	wrlong	result1, fp
0efb4     AC 00 90 FD | 	jmp	#LR__1171
0efb8                 | LR__1165
0efb8     08 4E 05 F1 | 	add	fp, #8
0efbc     A7 3A 68 FC | 	wrlong	#29, fp
0efc0     2C 4E 05 F1 | 	add	fp, #44
0efc4     A7 12 02 FB | 	rdlong	arg01, fp
0efc8     34 4E 85 F1 | 	sub	fp, #52
0efcc     EC A2 B0 FD | 	call	#_pslpeek
0efd0     A7 FA 61 FC | 	wrlong	result1, fp
0efd4     8C 00 90 FD | 	jmp	#LR__1171
0efd8                 | LR__1166
0efd8     08 4E 05 F1 | 	add	fp, #8
0efdc     A7 FE 69 FC | 	wrlong	#255, fp
0efe0     08 4E 85 F1 | 	sub	fp, #8
0efe4     A7 60 68 FC | 	wrlong	#48, fp
0efe8     78 00 90 FD | 	jmp	#LR__1171
0efec                 | LR__1167
0efec     08 4E 05 F1 | 	add	fp, #8
0eff0     A7 FE 69 FC | 	wrlong	#255, fp
0eff4     08 4E 85 F1 | 	sub	fp, #8
0eff8     A7 60 68 FC | 	wrlong	#48, fp
0effc     64 00 90 FD | 	jmp	#LR__1171
0f000                 | LR__1168
0f000     08 4E 05 F1 | 	add	fp, #8
0f004     A7 3C 68 FC | 	wrlong	#30, fp
0f008     2C 4E 05 F1 | 	add	fp, #44
0f00c     A7 12 02 FB | 	rdlong	arg01, fp
0f010     34 4E 85 F1 | 	sub	fp, #52
0f014     A4 A2 B0 FD | 	call	#_pslpeek
0f018     A7 FA 61 FC | 	wrlong	result1, fp
0f01c     44 00 90 FD | 	jmp	#LR__1171
0f020                 | LR__1169
0f020     08 4E 05 F1 | 	add	fp, #8
0f024     A7 FE 69 FC | 	wrlong	#255, fp
0f028     08 4E 85 F1 | 	sub	fp, #8
0f02c     A7 60 68 FC | 	wrlong	#48, fp
0f030     30 00 90 FD | 	jmp	#LR__1171
0f034                 | LR__1170
0f034     08 4E 05 F1 | 	add	fp, #8
0f038     A7 3E 68 FC | 	wrlong	#31, fp
0f03c     2C 4E 05 F1 | 	add	fp, #44
0f040     A7 12 02 FB | 	rdlong	arg01, fp
0f044     34 4E 85 F1 | 	sub	fp, #52
0f048     70 A2 B0 FD | 	call	#_pslpeek
0f04c     A7 FA 61 FC | 	wrlong	result1, fp
0f050     00 04 00 FF 
0f054     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0f058     08 4E 05 31 |  if_ae	add	fp, #8
0f05c     A7 56 68 3C |  if_ae	wrlong	#43, fp
0f060     08 4E 85 31 |  if_ae	sub	fp, #8
0f064                 | LR__1171
0f064     A7 12 02 F6 | 	mov	arg01, fp
0f068     D8 B1 BF FD | 	call	#_push
0f06c                 | LR__1172
0f06c     A7 F0 03 F6 | 	mov	ptra, fp
0f070     B2 00 A0 FD | 	call	#popregs_
0f074                 | _do_getvar_ret
0f074     2D 00 64 FD | 	ret
0f078                 | 
0f078                 | ' 
0f078                 | ' 
0f078                 | ' sub do_getaddr
0f078                 | _do_getaddr
0f078     01 4A 05 F6 | 	mov	COUNT_, #1
0f07c     A8 00 A0 FD | 	call	#pushregs_
0f080     38 F0 07 F1 | 	add	ptra, #56
0f084                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0f084                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0f084     6A 00 00 FF 
0f088     70 E4 05 F1 | 	add	objptr, ##54384
0f08c     F2 12 02 FB | 	rdlong	arg01, objptr
0f090     09 FD 01 F6 | 	mov	result2, arg01
0f094     01 FC 65 F0 | 	shl	result2, #1
0f098     09 FD 01 F1 | 	add	result2, arg01
0f09c     02 FC 65 F0 | 	shl	result2, #2
0f0a0     03 00 00 FF 
0f0a4     04 E4 85 F1 | 	sub	objptr, ##1540
0f0a8     F2 FC 01 F1 | 	add	result2, objptr
0f0ac     04 FC 05 F1 | 	add	result2, #4
0f0b0     FE FC 09 FB | 	rdlong	result2, result2 wz
0f0b4     67 00 00 FF 
0f0b8     6C E4 85 F1 | 	sub	objptr, ##52844
0f0bc     C4 00 90 5D |  if_ne	jmp	#LR__1180
0f0c0     6A 00 00 FF 
0f0c4     70 E4 05 F1 | 	add	objptr, ##54384
0f0c8     F2 12 02 FB | 	rdlong	arg01, objptr
0f0cc     09 FD 01 F6 | 	mov	result2, arg01
0f0d0     01 FC 65 F0 | 	shl	result2, #1
0f0d4     09 FD 01 F1 | 	add	result2, arg01
0f0d8     02 FC 65 F0 | 	shl	result2, #2
0f0dc     03 00 00 FF 
0f0e0     04 E4 85 F1 | 	sub	objptr, ##1540
0f0e4     F2 FC 01 F1 | 	add	result2, objptr
0f0e8     FE 12 02 FB | 	rdlong	arg01, result2
0f0ec     04 12 66 F0 | 	shl	arg01, #4
0f0f0     32 00 00 FF 
0f0f4     74 E4 85 F1 | 	sub	objptr, ##25716
0f0f8     F2 12 02 F1 | 	add	arg01, objptr
0f0fc     0C 12 06 F1 | 	add	arg01, #12
0f100     09 13 02 FB | 	rdlong	arg01, arg01
0f104     08 4E 05 F1 | 	add	fp, #8
0f108     A7 12 62 FC | 	wrlong	arg01, fp
0f10c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0f10c                 | '    if t1.result_type>=array_no_type then goto 2200
0f10c     08 4E 85 F1 | 	sub	fp, #8
0f110     00 13 16 F2 | 	cmp	arg01, #256 wc
0f114     34 00 00 FF 
0f118     F8 E5 85 F1 | 	sub	objptr, ##27128
0f11c     64 00 90 3D |  if_ae	jmp	#LR__1181
0f120     6A 00 00 FF 
0f124     70 E4 05 F1 | 	add	objptr, ##54384
0f128     F2 12 02 FB | 	rdlong	arg01, objptr
0f12c     09 FB 01 F6 | 	mov	result1, arg01
0f130     01 FA 65 F0 | 	shl	result1, #1
0f134     09 FB 01 F1 | 	add	result1, arg01
0f138     02 FA 65 F0 | 	shl	result1, #2
0f13c     03 00 00 FF 
0f140     04 E4 85 F1 | 	sub	objptr, ##1540
0f144     F2 FA 01 F1 | 	add	result1, objptr
0f148     FD FA 01 FB | 	rdlong	result1, result1
0f14c     04 FA 65 F0 | 	shl	result1, #4
0f150     32 00 00 FF 
0f154     74 E4 85 F1 | 	sub	objptr, ##25716
0f158     F2 FA 01 F1 | 	add	result1, objptr
0f15c     04 FA 05 F1 | 	add	result1, #4
0f160     34 00 00 FF 
0f164     F8 E5 85 F1 | 	sub	objptr, ##27128
0f168     A7 FA 61 FC | 	wrlong	result1, fp
0f16c     08 4E 05 F1 | 	add	fp, #8
0f170     A7 3A 68 FC | 	wrlong	#29, fp
0f174     08 4E 85 F1 | 	sub	fp, #8
0f178     A7 12 02 F6 | 	mov	arg01, fp
0f17c     C4 B0 BF FD | 	call	#_push
0f180                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
0f180                 | '   t1.result_type=result_uint
0f180                 | '   push t1 : return
0f180     D8 02 90 FD | 	jmp	#LR__1190
0f184                 | LR__1180
0f184                 | LR__1181
0f184     6A 00 00 FF 
0f188     70 E4 05 F1 | 	add	objptr, ##54384
0f18c     F2 FE 01 FB | 	rdlong	result3, objptr
0f190     FF 12 02 F6 | 	mov	arg01, result3
0f194     01 12 66 F0 | 	shl	arg01, #1
0f198     FF 12 02 F1 | 	add	arg01, result3
0f19c     02 12 66 F0 | 	shl	arg01, #2
0f1a0     03 00 00 FF 
0f1a4     04 E4 85 F1 | 	sub	objptr, ##1540
0f1a8     F2 12 02 F1 | 	add	arg01, objptr
0f1ac     09 13 02 FB | 	rdlong	arg01, arg01
0f1b0     04 12 66 F0 | 	shl	arg01, #4
0f1b4     32 00 00 FF 
0f1b8     74 E4 85 F1 | 	sub	objptr, ##25716
0f1bc     F2 12 02 F1 | 	add	arg01, objptr
0f1c0     04 12 06 F1 | 	add	arg01, #4
0f1c4     09 13 02 FB | 	rdlong	arg01, arg01
0f1c8     0C 4E 05 F1 | 	add	fp, #12
0f1cc     A7 12 62 FC | 	wrlong	arg01, fp
0f1d0     0C 4E 85 F1 | 	sub	fp, #12
0f1d4     34 00 00 FF 
0f1d8     F8 E5 85 F1 | 	sub	objptr, ##27128
0f1dc     DC A0 B0 FD | 	call	#_pslpeek
0f1e0     FD FA 31 F9 | 	getword	result1, result1, #0
0f1e4     10 4E 05 F1 | 	add	fp, #16
0f1e8     A7 FA 61 FC | 	wrlong	result1, fp
0f1ec     6A 00 00 FF 
0f1f0     70 E4 05 F1 | 	add	objptr, ##54384
0f1f4     F2 FE 01 FB | 	rdlong	result3, objptr
0f1f8     FF 12 02 F6 | 	mov	arg01, result3
0f1fc     01 12 66 F0 | 	shl	arg01, #1
0f200     FF 12 02 F1 | 	add	arg01, result3
0f204     02 12 66 F0 | 	shl	arg01, #2
0f208     03 00 00 FF 
0f20c     04 E4 85 F1 | 	sub	objptr, ##1540
0f210     F2 12 02 F1 | 	add	arg01, objptr
0f214     04 12 06 F1 | 	add	arg01, #4
0f218     09 13 02 FB | 	rdlong	arg01, arg01
0f21c     04 4E 05 F1 | 	add	fp, #4
0f220     A7 12 62 FC | 	wrlong	arg01, fp
0f224     08 4E 85 F1 | 	sub	fp, #8
0f228     A7 12 02 FB | 	rdlong	arg01, fp
0f22c     0C 4E 85 F1 | 	sub	fp, #12
0f230     02 12 06 F1 | 	add	arg01, #2
0f234     67 00 00 FF 
0f238     6C E4 85 F1 | 	sub	objptr, ##52844
0f23c     24 A0 B0 FD | 	call	#_pspeek
0f240     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f244     18 4E 05 F1 | 	add	fp, #24
0f248     A7 FA 61 FC | 	wrlong	result1, fp
0f24c     0C 4E 85 F1 | 	sub	fp, #12
0f250     A7 12 02 FB | 	rdlong	arg01, fp
0f254     0C 4E 85 F1 | 	sub	fp, #12
0f258     04 12 06 F1 | 	add	arg01, #4
0f25c     5C A0 B0 FD | 	call	#_pslpeek
0f260     1C 4E 05 F1 | 	add	fp, #28
0f264     A7 FA 61 FC | 	wrlong	result1, fp
0f268     10 4E 85 F1 | 	sub	fp, #16
0f26c     A7 12 02 FB | 	rdlong	arg01, fp
0f270     0C 4E 85 F1 | 	sub	fp, #12
0f274     08 12 06 F1 | 	add	arg01, #8
0f278     40 A0 B0 FD | 	call	#_pslpeek
0f27c     20 4E 05 F1 | 	add	fp, #32
0f280     A7 FA 61 FC | 	wrlong	result1, fp
0f284     14 4E 85 F1 | 	sub	fp, #20
0f288     A7 12 02 FB | 	rdlong	arg01, fp
0f28c     0C 4E 85 F1 | 	sub	fp, #12
0f290     0C 12 06 F1 | 	add	arg01, #12
0f294     24 A0 B0 FD | 	call	#_pslpeek
0f298     24 4E 05 F1 | 	add	fp, #36
0f29c     A7 FA 61 FC | 	wrlong	result1, fp
0f2a0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0f2a0                 | ' esize=pspeek(arrptr+2)
0f2a0                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0f2a0                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0f2a0                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0f2a0                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0f2a0     10 4E 85 F1 | 	sub	fp, #16
0f2a4     A7 12 02 FB | 	rdlong	arg01, fp
0f2a8     14 4E 85 F1 | 	sub	fp, #20
0f2ac     03 12 16 F2 | 	cmp	arg01, #3 wc
0f2b0     34 00 90 CD |  if_b	jmp	#LR__1182
0f2b4     F4 AE BF FD | 	call	#_pop
0f2b8     A7 FA 61 FC | 	wrlong	result1, fp
0f2bc     04 4E 05 F1 | 	add	fp, #4
0f2c0     A7 FC 61 FC | 	wrlong	result2, fp
0f2c4     04 4E 05 F1 | 	add	fp, #4
0f2c8     A7 FE 61 FC | 	wrlong	result3, fp
0f2cc     08 4E 85 F1 | 	sub	fp, #8
0f2d0     A7 12 02 F6 | 	mov	arg01, fp
0f2d4     2C 3B B0 FD | 	call	#_converttoint
0f2d8     30 4E 05 F1 | 	add	fp, #48
0f2dc     A7 FA 61 FC | 	wrlong	result1, fp
0f2e0     30 4E 85 F1 | 	sub	fp, #48
0f2e4     0C 00 90 FD | 	jmp	#LR__1183
0f2e8                 | LR__1182
0f2e8     30 4E 05 F1 | 	add	fp, #48
0f2ec     A7 00 68 FC | 	wrlong	#0, fp
0f2f0     30 4E 85 F1 | 	sub	fp, #48
0f2f4                 | LR__1183
0f2f4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0f2f4     14 4E 05 F1 | 	add	fp, #20
0f2f8     A7 12 02 FB | 	rdlong	arg01, fp
0f2fc     14 4E 85 F1 | 	sub	fp, #20
0f300     02 12 16 F2 | 	cmp	arg01, #2 wc
0f304     34 00 90 CD |  if_b	jmp	#LR__1184
0f308     A0 AE BF FD | 	call	#_pop
0f30c     A7 FA 61 FC | 	wrlong	result1, fp
0f310     04 4E 05 F1 | 	add	fp, #4
0f314     A7 FC 61 FC | 	wrlong	result2, fp
0f318     04 4E 05 F1 | 	add	fp, #4
0f31c     A7 FE 61 FC | 	wrlong	result3, fp
0f320     08 4E 85 F1 | 	sub	fp, #8
0f324     A7 12 02 F6 | 	mov	arg01, fp
0f328     D8 3A B0 FD | 	call	#_converttoint
0f32c     2C 4E 05 F1 | 	add	fp, #44
0f330     A7 FA 61 FC | 	wrlong	result1, fp
0f334     2C 4E 85 F1 | 	sub	fp, #44
0f338     0C 00 90 FD | 	jmp	#LR__1185
0f33c                 | LR__1184
0f33c     2C 4E 05 F1 | 	add	fp, #44
0f340     A7 00 68 FC | 	wrlong	#0, fp
0f344     2C 4E 85 F1 | 	sub	fp, #44
0f348                 | LR__1185
0f348                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0f348     14 4E 05 F1 | 	add	fp, #20
0f34c     A7 12 02 FB | 	rdlong	arg01, fp
0f350     14 4E 85 F1 | 	sub	fp, #20
0f354     01 12 16 F2 | 	cmp	arg01, #1 wc
0f358     34 00 90 CD |  if_b	jmp	#LR__1186
0f35c     4C AE BF FD | 	call	#_pop
0f360     A7 FA 61 FC | 	wrlong	result1, fp
0f364     04 4E 05 F1 | 	add	fp, #4
0f368     A7 FC 61 FC | 	wrlong	result2, fp
0f36c     04 4E 05 F1 | 	add	fp, #4
0f370     A7 FE 61 FC | 	wrlong	result3, fp
0f374     08 4E 85 F1 | 	sub	fp, #8
0f378     A7 12 02 F6 | 	mov	arg01, fp
0f37c     84 3A B0 FD | 	call	#_converttoint
0f380     28 4E 05 F1 | 	add	fp, #40
0f384     A7 FA 61 FC | 	wrlong	result1, fp
0f388     28 4E 85 F1 | 	sub	fp, #40
0f38c     0C 00 90 FD | 	jmp	#LR__1187
0f390                 | LR__1186
0f390     28 4E 05 F1 | 	add	fp, #40
0f394     A7 00 68 FC | 	wrlong	#0, fp
0f398     28 4E 85 F1 | 	sub	fp, #40
0f39c                 | LR__1187
0f39c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0f39c                 | ' if numpar>0 then
0f39c     14 4E 05 F1 | 	add	fp, #20
0f3a0     A7 FE 01 FB | 	rdlong	result3, fp
0f3a4     14 4E 85 F1 | 	sub	fp, #20
0f3a8     01 FE 15 F2 | 	cmp	result3, #1 wc
0f3ac     8C 00 90 CD |  if_b	jmp	#LR__1188
0f3b0     0C 4E 05 F1 | 	add	fp, #12
0f3b4     A7 FC 01 FB | 	rdlong	result2, fp
0f3b8     1C 4E 05 F1 | 	add	fp, #28
0f3bc     A7 FE 01 FB | 	rdlong	result3, fp
0f3c0     04 4E 05 F1 | 	add	fp, #4
0f3c4     A7 12 02 FB | 	rdlong	arg01, fp
0f3c8     10 4E 85 F1 | 	sub	fp, #16
0f3cc     A7 FA 01 FB | 	rdlong	result1, fp
0f3d0     FD 12 02 FD | 	qmul	arg01, result1
0f3d4     10 FC 05 F1 | 	add	result2, #16
0f3d8     14 4E 05 F1 | 	add	fp, #20
0f3dc     A7 1E 02 FB | 	rdlong	local01, fp
0f3e0     18 12 62 FD | 	getqx	arg01
0f3e4     FD 1E 02 FD | 	qmul	local01, result1
0f3e8     09 FF 01 F1 | 	add	result3, arg01
0f3ec     10 4E 85 F1 | 	sub	fp, #16
0f3f0     A7 1E 02 FB | 	rdlong	local01, fp
0f3f4     18 FA 61 FD | 	getqx	result1
0f3f8     0F FB 01 FD | 	qmul	result1, local01
0f3fc     08 4E 85 F1 | 	sub	fp, #8
0f400     A7 1E 02 FB | 	rdlong	local01, fp
0f404     18 FA 61 FD | 	getqx	result1
0f408     FD FE 01 F1 | 	add	result3, result1
0f40c     0F FF 01 FD | 	qmul	result3, local01
0f410     1C 4E 05 F1 | 	add	fp, #28
0f414     18 1E 62 FD | 	getqx	local01
0f418     0F FD 01 F1 | 	add	result2, local01
0f41c     A7 FC 61 FC | 	wrlong	result2, fp
0f420     2C 4E 85 F1 | 	sub	fp, #44
0f424     A7 3A 68 FC | 	wrlong	#29, fp
0f428     2C 4E 05 F1 | 	add	fp, #44
0f42c     A7 1E 02 FB | 	rdlong	local01, fp
0f430     34 4E 85 F1 | 	sub	fp, #52
0f434     A7 1E 62 FC | 	wrlong	local01, fp
0f438     18 00 90 FD | 	jmp	#LR__1189
0f43c                 | LR__1188
0f43c     08 4E 05 F1 | 	add	fp, #8
0f440     A7 3A 68 FC | 	wrlong	#29, fp
0f444     04 4E 05 F1 | 	add	fp, #4
0f448     A7 1E 02 FB | 	rdlong	local01, fp
0f44c     0C 4E 85 F1 | 	sub	fp, #12
0f450     A7 1E 62 FC | 	wrlong	local01, fp
0f454                 | LR__1189
0f454     A7 12 02 F6 | 	mov	arg01, fp
0f458     E8 AD BF FD | 	call	#_push
0f45c                 | LR__1190
0f45c     A7 F0 03 F6 | 	mov	ptra, fp
0f460     B2 00 A0 FD | 	call	#popregs_
0f464                 | _do_getaddr_ret
0f464     2D 00 64 FD | 	ret
0f468                 | 
0f468                 | ' 
0f468                 | ' 
0f468                 | ' sub do_inkey
0f468                 | _do_inkey
0f468     02 4A 05 F6 | 	mov	COUNT_, #2
0f46c     A8 00 A0 FD | 	call	#pushregs_
0f470     0C F0 07 F1 | 	add	ptra, #12
0f474     34 D4 B0 FD | 	call	#_usbnew_spin2_get_key
0f478     65 00 00 FF 
0f47c     64 E4 05 F1 | 	add	objptr, ##51812
0f480     F2 FA 61 FC | 	wrlong	result1, objptr
0f484                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
0f484     65 00 00 FF 
0f488     64 E4 85 F1 | 	sub	objptr, ##51812
0f48c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f490     94 00 90 AD |  if_e	jmp	#LR__1201
0f494     65 00 00 FF 
0f498     64 E4 05 F1 | 	add	objptr, ##51812
0f49c     F2 1C 02 FB | 	rdlong	arg06, objptr
0f4a0     65 00 00 FF 
0f4a4     64 E4 85 F1 | 	sub	objptr, ##51812
0f4a8     00 00 40 FF 
0f4ac     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0f4b0     65 00 00 CF 
0f4b4     64 E4 05 C1 |  if_b	add	objptr, ##51812
0f4b8     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0f4bc     65 00 00 CF 
0f4c0     64 E4 85 C1 |  if_b	sub	objptr, ##51812
0f4c4     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0f4c8     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0f4cc     58 00 90 3D |  if_ae	jmp	#LR__1201
0f4d0                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
0f4d0     79 00 00 FF 
0f4d4     D0 E5 05 F1 | 	add	objptr, ##62416
0f4d8     F2 1C 02 FB | 	rdlong	arg06, objptr
0f4dc     79 00 00 FF 
0f4e0     D0 E5 85 F1 | 	sub	objptr, ##62416
0f4e4     01 1C 0E F2 | 	cmp	arg06, #1 wz
0f4e8     3C 00 90 5D |  if_ne	jmp	#LR__1200
0f4ec     7B 00 00 FF 
0f4f0     74 E4 05 F1 | 	add	objptr, ##63092
0f4f4     F2 14 02 FB | 	rdlong	arg02, objptr
0f4f8     04 E4 85 F1 | 	sub	objptr, #4
0f4fc     F2 1A 02 FB | 	rdlong	arg05, objptr
0f500     07 12 06 F6 | 	mov	arg01, #7
0f504     56 00 00 FF 
0f508     44 16 06 F6 | 	mov	arg03, ##44100
0f50c     0C 18 C6 F9 | 	decod	arg04, #12
0f510     01 1C 66 F6 | 	neg	arg06, #1
0f514     6F 00 00 FF 
0f518     A4 E5 85 F1 | 	sub	objptr, ##57252
0f51c     14 D7 B0 FD | 	call	#_audio096_spin2_play
0f520     0B 00 00 FF 
0f524     CC E4 85 F1 | 	sub	objptr, ##5836
0f528                 | LR__1200
0f528                 | LR__1201
0f528                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
0f528     65 00 00 FF 
0f52c     64 E4 05 F1 | 	add	objptr, ##51812
0f530     F2 1C 0A FB | 	rdlong	arg06, objptr wz
0f534     65 00 00 FF 
0f538     64 E4 85 F1 | 	sub	objptr, ##51812
0f53c     D4 01 90 AD |  if_e	jmp	#LR__1210
0f540     65 00 00 FF 
0f544     64 E4 05 F1 | 	add	objptr, ##51812
0f548     F2 1C 02 FB | 	rdlong	arg06, objptr
0f54c     65 00 00 FF 
0f550     64 E4 85 F1 | 	sub	objptr, ##51812
0f554     00 00 40 FF 
0f558     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0f55c     65 00 00 CF 
0f560     64 E4 05 C1 |  if_b	add	objptr, ##51812
0f564     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0f568     65 00 00 CF 
0f56c     64 E4 85 C1 |  if_b	sub	objptr, ##51812
0f570     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0f574     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0f578     98 01 90 3D |  if_ae	jmp	#LR__1210
0f57c                 | '   if leds and 2 = 2 then 
0f57c     7B 00 00 FF 
0f580     9C E4 05 F1 | 	add	objptr, ##63132
0f584     F2 1E 0A FB | 	rdlong	local01, objptr wz
0f588     7B 00 00 FF 
0f58c     9C E4 85 F1 | 	sub	objptr, ##63132
0f590     58 01 90 AD |  if_e	jmp	#LR__1209
0f594                 | '     if key>96 andalso key<123 then
0f594     65 00 00 FF 
0f598     64 E4 05 F1 | 	add	objptr, ##51812
0f59c     F2 1E 02 FB | 	rdlong	local01, objptr
0f5a0     65 00 00 FF 
0f5a4     64 E4 85 F1 | 	sub	objptr, ##51812
0f5a8     61 1E 16 F2 | 	cmp	local01, #97 wc
0f5ac     3C 00 90 CD |  if_b	jmp	#LR__1202
0f5b0     65 00 00 FF 
0f5b4     64 E4 05 F1 | 	add	objptr, ##51812
0f5b8     F2 1E 02 FB | 	rdlong	local01, objptr
0f5bc     65 00 00 FF 
0f5c0     64 E4 85 F1 | 	sub	objptr, ##51812
0f5c4     7B 1E 16 F2 | 	cmp	local01, #123 wc
0f5c8     20 00 90 3D |  if_ae	jmp	#LR__1202
0f5cc     65 00 00 FF 
0f5d0     64 E4 05 F1 | 	add	objptr, ##51812
0f5d4     F2 1E 02 FB | 	rdlong	local01, objptr
0f5d8     20 1E 86 F1 | 	sub	local01, #32
0f5dc     F2 1E 62 FC | 	wrlong	local01, objptr
0f5e0     65 00 00 FF 
0f5e4     64 E4 85 F1 | 	sub	objptr, ##51812
0f5e8     00 01 90 FD | 	jmp	#LR__1208
0f5ec                 | LR__1202
0f5ec     65 00 00 FF 
0f5f0     64 E4 05 F1 | 	add	objptr, ##51812
0f5f4     F2 1E 02 FB | 	rdlong	local01, objptr
0f5f8     65 00 00 FF 
0f5fc     64 E4 85 F1 | 	sub	objptr, ##51812
0f600     41 1E 16 F2 | 	cmp	local01, #65 wc
0f604     3C 00 90 CD |  if_b	jmp	#LR__1203
0f608     65 00 00 FF 
0f60c     64 E4 05 F1 | 	add	objptr, ##51812
0f610     F2 1E 02 FB | 	rdlong	local01, objptr
0f614     65 00 00 FF 
0f618     64 E4 85 F1 | 	sub	objptr, ##51812
0f61c     5B 1E 16 F2 | 	cmp	local01, #91 wc
0f620     20 00 90 3D |  if_ae	jmp	#LR__1203
0f624     65 00 00 FF 
0f628     64 E4 05 F1 | 	add	objptr, ##51812
0f62c     F2 1E 02 FB | 	rdlong	local01, objptr
0f630     20 1E 06 F1 | 	add	local01, #32
0f634     F2 1E 62 FC | 	wrlong	local01, objptr
0f638     65 00 00 FF 
0f63c     64 E4 85 F1 | 	sub	objptr, ##51812
0f640     A8 00 90 FD | 	jmp	#LR__1207
0f644                 | LR__1203
0f644     65 00 00 FF 
0f648     64 E4 05 F1 | 	add	objptr, ##51812
0f64c     F2 1E 02 FB | 	rdlong	local01, objptr
0f650     65 00 00 FF 
0f654     64 E4 85 F1 | 	sub	objptr, ##51812
0f658     17 1E 16 F2 | 	cmp	local01, #23 wc
0f65c     3C 00 90 CD |  if_b	jmp	#LR__1204
0f660     65 00 00 FF 
0f664     64 E4 05 F1 | 	add	objptr, ##51812
0f668     F2 1E 02 FB | 	rdlong	local01, objptr
0f66c     65 00 00 FF 
0f670     64 E4 85 F1 | 	sub	objptr, ##51812
0f674     20 1E 16 F2 | 	cmp	local01, #32 wc
0f678     20 00 90 3D |  if_ae	jmp	#LR__1204
0f67c     65 00 00 FF 
0f680     64 E4 05 F1 | 	add	objptr, ##51812
0f684     F2 1E 02 FB | 	rdlong	local01, objptr
0f688     09 1E 86 F1 | 	sub	local01, #9
0f68c     F2 1E 62 FC | 	wrlong	local01, objptr
0f690     65 00 00 FF 
0f694     64 E4 85 F1 | 	sub	objptr, ##51812
0f698     50 00 90 FD | 	jmp	#LR__1206
0f69c                 | LR__1204
0f69c     65 00 00 FF 
0f6a0     64 E4 05 F1 | 	add	objptr, ##51812
0f6a4     F2 20 02 FB | 	rdlong	local02, objptr
0f6a8     65 00 00 FF 
0f6ac     64 E4 85 F1 | 	sub	objptr, ##51812
0f6b0     0E 20 16 F2 | 	cmp	local02, #14 wc
0f6b4     34 00 90 CD |  if_b	jmp	#LR__1205
0f6b8     65 00 00 FF 
0f6bc     64 E4 05 F1 | 	add	objptr, ##51812
0f6c0     F2 1E 02 FB | 	rdlong	local01, objptr
0f6c4     65 00 00 FF 
0f6c8     64 E4 85 F1 | 	sub	objptr, ##51812
0f6cc     17 1E 16 F2 | 	cmp	local01, #23 wc
0f6d0     7B 00 00 CF 
0f6d4     AC E4 05 C1 |  if_b	add	objptr, ##63148
0f6d8     F2 20 02 CB |  if_b	rdlong	local02, objptr
0f6dc     27 20 06 C1 |  if_b	add	local02, #39
0f6e0     F2 20 62 CC |  if_b	wrlong	local02, objptr
0f6e4     7B 00 00 CF 
0f6e8     AC E4 85 C1 |  if_b	sub	objptr, ##63148
0f6ec                 | LR__1205
0f6ec                 | LR__1206
0f6ec                 | LR__1207
0f6ec                 | LR__1208
0f6ec                 | LR__1209
0f6ec     65 00 00 FF 
0f6f0     64 E4 05 F1 | 	add	objptr, ##51812
0f6f4     F2 12 02 FB | 	rdlong	arg01, objptr
0f6f8     65 00 00 FF 
0f6fc     64 E4 85 F1 | 	sub	objptr, ##51812
0f700     68 9C B0 FD | 	call	#_scantochar
0f704     FD 12 02 F6 | 	mov	arg01, result1
0f708     80 FB B0 FD | 	call	#__system__Chr_S
0f70c     A7 FA 61 FC | 	wrlong	result1, fp
0f710     0C 00 90 FD | 	jmp	#LR__1211
0f714                 | LR__1210
0f714     66 01 00 FF 
0f718     9E 20 06 F6 | 	mov	local02, ##@LR__4972
0f71c     A7 20 62 FC | 	wrlong	local02, fp
0f720                 | LR__1211
0f720     08 4E 05 F1 | 	add	fp, #8
0f724     A7 3E 68 FC | 	wrlong	#31, fp
0f728     08 4E 85 F1 | 	sub	fp, #8
0f72c     A7 12 02 F6 | 	mov	arg01, fp
0f730     10 AB BF FD | 	call	#_push
0f734     A7 F0 03 F6 | 	mov	ptra, fp
0f738     B2 00 A0 FD | 	call	#popregs_
0f73c                 | _do_inkey_ret
0f73c     2D 00 64 FD | 	ret
0f740                 | 
0f740                 | '  
0f740                 | ' '------------------------ Operators 
0f740                 | ' 
0f740                 | ' sub do_plus 
0f740                 | _do_plus
0f740     05 4A 05 F6 | 	mov	COUNT_, #5
0f744     A8 00 A0 FD | 	call	#pushregs_
0f748     18 F0 07 F1 | 	add	ptra, #24
0f74c     5C AA BF FD | 	call	#_pop
0f750     FD 1E 02 F6 | 	mov	local01, result1
0f754     FE 20 02 F6 | 	mov	local02, result2
0f758     FF 22 02 F6 | 	mov	local03, result3
0f75c     0C 4E 05 F1 | 	add	fp, #12
0f760     A7 1E 62 FC | 	wrlong	local01, fp
0f764     04 4E 05 F1 | 	add	fp, #4
0f768     A7 20 62 FC | 	wrlong	local02, fp
0f76c     04 4E 05 F1 | 	add	fp, #4
0f770     A7 22 62 FC | 	wrlong	local03, fp
0f774     14 4E 85 F1 | 	sub	fp, #20
0f778     30 AA BF FD | 	call	#_pop
0f77c     FF 22 02 F6 | 	mov	local03, result3
0f780     A7 FA 61 FC | 	wrlong	result1, fp
0f784     04 4E 05 F1 | 	add	fp, #4
0f788     A7 FC 61 FC | 	wrlong	result2, fp
0f78c     04 4E 05 F1 | 	add	fp, #4
0f790     A7 22 62 FC | 	wrlong	local03, fp
0f794                 | ' 
0f794                 | ' t2=pop()
0f794                 | ' t1=pop()
0f794                 | ' 
0f794                 | ' 
0f794                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0f794     08 4E 85 F1 | 	sub	fp, #8
0f798     1D 22 0E F2 | 	cmp	local03, #29 wz
0f79c     14 4E 05 A1 |  if_e	add	fp, #20
0f7a0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f7a4     14 4E 85 A1 |  if_e	sub	fp, #20
0f7a8     12 23 02 A6 |  if_e	mov	local03, local04
0f7ac     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f7b0     1C 00 90 5D |  if_ne	jmp	#LR__1220
0f7b4     A7 1E 02 FB | 	rdlong	local01, fp
0f7b8     0C 4E 05 F1 | 	add	fp, #12
0f7bc     A7 20 02 FB | 	rdlong	local02, fp
0f7c0     0C 4E 85 F1 | 	sub	fp, #12
0f7c4     10 1F 02 F1 | 	add	local01, local02
0f7c8     A7 1E 62 FC | 	wrlong	local01, fp
0f7cc     48 04 90 FD | 	jmp	#LR__1235
0f7d0                 | LR__1220
0f7d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0f7d0     08 4E 05 F1 | 	add	fp, #8
0f7d4     A7 1E 02 FB | 	rdlong	local01, fp
0f7d8     08 4E 85 F1 | 	sub	fp, #8
0f7dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f7e0     14 4E 05 A1 |  if_e	add	fp, #20
0f7e4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f7e8     14 4E 85 A1 |  if_e	sub	fp, #20
0f7ec     12 23 02 A6 |  if_e	mov	local03, local04
0f7f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f7f4     28 00 90 5D |  if_ne	jmp	#LR__1221
0f7f8     A7 1E 02 FB | 	rdlong	local01, fp
0f7fc     0C 4E 05 F1 | 	add	fp, #12
0f800     A7 20 02 FB | 	rdlong	local02, fp
0f804     0C 4E 85 F1 | 	sub	fp, #12
0f808     10 1F 02 F1 | 	add	local01, local02
0f80c     A7 1E 62 FC | 	wrlong	local01, fp
0f810     08 4E 05 F1 | 	add	fp, #8
0f814     A7 38 68 FC | 	wrlong	#28, fp
0f818     08 4E 85 F1 | 	sub	fp, #8
0f81c     F8 03 90 FD | 	jmp	#LR__1235
0f820                 | LR__1221
0f820                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0f820     08 4E 05 F1 | 	add	fp, #8
0f824     A7 1E 02 FB | 	rdlong	local01, fp
0f828     08 4E 85 F1 | 	sub	fp, #8
0f82c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f830     14 4E 05 A1 |  if_e	add	fp, #20
0f834     A7 24 02 AB |  if_e	rdlong	local04, fp
0f838     14 4E 85 A1 |  if_e	sub	fp, #20
0f83c     12 23 02 A6 |  if_e	mov	local03, local04
0f840     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f844     30 00 90 5D |  if_ne	jmp	#LR__1222
0f848     A7 12 02 FB | 	rdlong	arg01, fp
0f84c     AC FF B0 FD | 	call	#__system___float_fromuns
0f850     FD 12 02 F6 | 	mov	arg01, result1
0f854     0C 4E 05 F1 | 	add	fp, #12
0f858     A7 14 02 FB | 	rdlong	arg02, fp
0f85c     0C 4E 85 F1 | 	sub	fp, #12
0f860     CC FF B0 FD | 	call	#__system___float_add
0f864     A7 FA 61 FC | 	wrlong	result1, fp
0f868     08 4E 05 F1 | 	add	fp, #8
0f86c     A7 3C 68 FC | 	wrlong	#30, fp
0f870     08 4E 85 F1 | 	sub	fp, #8
0f874     A0 03 90 FD | 	jmp	#LR__1235
0f878                 | LR__1222
0f878                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0f878     08 4E 05 F1 | 	add	fp, #8
0f87c     A7 1E 02 FB | 	rdlong	local01, fp
0f880     08 4E 85 F1 | 	sub	fp, #8
0f884     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f888     14 4E 05 A1 |  if_e	add	fp, #20
0f88c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f890     14 4E 85 A1 |  if_e	sub	fp, #20
0f894     12 23 02 A6 |  if_e	mov	local03, local04
0f898     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f89c     1C 00 90 5D |  if_ne	jmp	#LR__1223
0f8a0     A7 1E 02 FB | 	rdlong	local01, fp
0f8a4     0C 4E 05 F1 | 	add	fp, #12
0f8a8     A7 20 02 FB | 	rdlong	local02, fp
0f8ac     0C 4E 85 F1 | 	sub	fp, #12
0f8b0     10 1F 02 F1 | 	add	local01, local02
0f8b4     A7 1E 62 FC | 	wrlong	local01, fp
0f8b8     5C 03 90 FD | 	jmp	#LR__1235
0f8bc                 | LR__1223
0f8bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0f8bc     08 4E 05 F1 | 	add	fp, #8
0f8c0     A7 1E 02 FB | 	rdlong	local01, fp
0f8c4     08 4E 85 F1 | 	sub	fp, #8
0f8c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f8cc     14 4E 05 A1 |  if_e	add	fp, #20
0f8d0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f8d4     14 4E 85 A1 |  if_e	sub	fp, #20
0f8d8     12 23 02 A6 |  if_e	mov	local03, local04
0f8dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f8e0     1C 00 90 5D |  if_ne	jmp	#LR__1224
0f8e4     A7 1E 02 FB | 	rdlong	local01, fp
0f8e8     0C 4E 05 F1 | 	add	fp, #12
0f8ec     A7 20 02 FB | 	rdlong	local02, fp
0f8f0     0C 4E 85 F1 | 	sub	fp, #12
0f8f4     10 1F 02 F1 | 	add	local01, local02
0f8f8     A7 1E 62 FC | 	wrlong	local01, fp
0f8fc     18 03 90 FD | 	jmp	#LR__1235
0f900                 | LR__1224
0f900                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0f900     08 4E 05 F1 | 	add	fp, #8
0f904     A7 1E 02 FB | 	rdlong	local01, fp
0f908     08 4E 85 F1 | 	sub	fp, #8
0f90c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f910     14 4E 05 A1 |  if_e	add	fp, #20
0f914     A7 24 02 AB |  if_e	rdlong	local04, fp
0f918     14 4E 85 A1 |  if_e	sub	fp, #20
0f91c     12 23 02 A6 |  if_e	mov	local03, local04
0f920     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f924     40 00 90 5D |  if_ne	jmp	#LR__1225
0f928     A7 12 02 FB | 	rdlong	arg01, fp
0f92c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f930     1F 26 C6 C9 |  if_b	decod	local05, #31
0f934     00 26 06 36 |  if_ae	mov	local05, #0
0f938     C0 FE B0 FD | 	call	#__system___float_fromuns
0f93c     13 FB 61 F5 | 	xor	result1, local05
0f940     FD 12 02 F6 | 	mov	arg01, result1
0f944     0C 4E 05 F1 | 	add	fp, #12
0f948     A7 14 02 FB | 	rdlong	arg02, fp
0f94c     0C 4E 85 F1 | 	sub	fp, #12
0f950     DC FE B0 FD | 	call	#__system___float_add
0f954     A7 FA 61 FC | 	wrlong	result1, fp
0f958     08 4E 05 F1 | 	add	fp, #8
0f95c     A7 3C 68 FC | 	wrlong	#30, fp
0f960     08 4E 85 F1 | 	sub	fp, #8
0f964     B0 02 90 FD | 	jmp	#LR__1235
0f968                 | LR__1225
0f968                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0f968     08 4E 05 F1 | 	add	fp, #8
0f96c     A7 1E 02 FB | 	rdlong	local01, fp
0f970     08 4E 85 F1 | 	sub	fp, #8
0f974     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f978     14 4E 05 A1 |  if_e	add	fp, #20
0f97c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f980     14 4E 85 A1 |  if_e	sub	fp, #20
0f984     12 23 02 A6 |  if_e	mov	local03, local04
0f988     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f98c     28 00 90 5D |  if_ne	jmp	#LR__1226
0f990     A7 1E 02 FB | 	rdlong	local01, fp
0f994     0C 4E 05 F1 | 	add	fp, #12
0f998     A7 12 02 FB | 	rdlong	arg01, fp
0f99c     0C 4E 85 F1 | 	sub	fp, #12
0f9a0     58 FE B0 FD | 	call	#__system___float_fromuns
0f9a4     FD 14 02 F6 | 	mov	arg02, result1
0f9a8     0F 13 02 F6 | 	mov	arg01, local01
0f9ac     80 FE B0 FD | 	call	#__system___float_add
0f9b0     A7 FA 61 FC | 	wrlong	result1, fp
0f9b4     60 02 90 FD | 	jmp	#LR__1235
0f9b8                 | LR__1226
0f9b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0f9b8     08 4E 05 F1 | 	add	fp, #8
0f9bc     A7 1E 02 FB | 	rdlong	local01, fp
0f9c0     08 4E 85 F1 | 	sub	fp, #8
0f9c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f9c8     14 4E 05 A1 |  if_e	add	fp, #20
0f9cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0f9d0     14 4E 85 A1 |  if_e	sub	fp, #20
0f9d4     12 23 02 A6 |  if_e	mov	local03, local04
0f9d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f9dc     38 00 90 5D |  if_ne	jmp	#LR__1227
0f9e0     A7 1E 02 FB | 	rdlong	local01, fp
0f9e4     0C 4E 05 F1 | 	add	fp, #12
0f9e8     A7 12 02 FB | 	rdlong	arg01, fp
0f9ec     0C 4E 85 F1 | 	sub	fp, #12
0f9f0     09 13 52 F6 | 	abs	arg01, arg01 wc
0f9f4     1F 26 C6 C9 |  if_b	decod	local05, #31
0f9f8     00 26 06 36 |  if_ae	mov	local05, #0
0f9fc     FC FD B0 FD | 	call	#__system___float_fromuns
0fa00     13 FB 61 F5 | 	xor	result1, local05
0fa04     FD 14 02 F6 | 	mov	arg02, result1
0fa08     0F 13 02 F6 | 	mov	arg01, local01
0fa0c     20 FE B0 FD | 	call	#__system___float_add
0fa10     A7 FA 61 FC | 	wrlong	result1, fp
0fa14     00 02 90 FD | 	jmp	#LR__1235
0fa18                 | LR__1227
0fa18                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0fa18     08 4E 05 F1 | 	add	fp, #8
0fa1c     A7 1E 02 FB | 	rdlong	local01, fp
0fa20     08 4E 85 F1 | 	sub	fp, #8
0fa24     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fa28     14 4E 05 A1 |  if_e	add	fp, #20
0fa2c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa30     14 4E 85 A1 |  if_e	sub	fp, #20
0fa34     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0fa38     1C 00 90 5D |  if_ne	jmp	#LR__1228
0fa3c     A7 12 02 FB | 	rdlong	arg01, fp
0fa40     0C 4E 05 F1 | 	add	fp, #12
0fa44     A7 14 02 FB | 	rdlong	arg02, fp
0fa48     0C 4E 85 F1 | 	sub	fp, #12
0fa4c     E0 FD B0 FD | 	call	#__system___float_add
0fa50     A7 FA 61 FC | 	wrlong	result1, fp
0fa54     C0 01 90 FD | 	jmp	#LR__1235
0fa58                 | LR__1228
0fa58                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0fa58     08 4E 05 F1 | 	add	fp, #8
0fa5c     A7 1E 02 FB | 	rdlong	local01, fp
0fa60     08 4E 85 F1 | 	sub	fp, #8
0fa64     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fa68     24 00 90 5D |  if_ne	jmp	#LR__1229
0fa6c     14 4E 05 F1 | 	add	fp, #20
0fa70     A7 22 02 FB | 	rdlong	local03, fp
0fa74     14 4E 85 F1 | 	sub	fp, #20
0fa78     1F 22 0E F2 | 	cmp	local03, #31 wz
0fa7c     A7 04 68 5C |  if_ne	wrlong	#2, fp
0fa80     08 4E 05 51 |  if_ne	add	fp, #8
0fa84     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0fa88     08 4E 85 51 |  if_ne	sub	fp, #8
0fa8c     88 01 90 5D |  if_ne	jmp	#LR__1235
0fa90                 | LR__1229
0fa90                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0fa90     14 4E 05 F1 | 	add	fp, #20
0fa94     A7 1E 02 FB | 	rdlong	local01, fp
0fa98     14 4E 85 F1 | 	sub	fp, #20
0fa9c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0faa0     24 00 90 5D |  if_ne	jmp	#LR__1230
0faa4     08 4E 05 F1 | 	add	fp, #8
0faa8     A7 22 02 FB | 	rdlong	local03, fp
0faac     08 4E 85 F1 | 	sub	fp, #8
0fab0     1F 22 0E F2 | 	cmp	local03, #31 wz
0fab4     A7 04 68 5C |  if_ne	wrlong	#2, fp
0fab8     08 4E 05 51 |  if_ne	add	fp, #8
0fabc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0fac0     08 4E 85 51 |  if_ne	sub	fp, #8
0fac4     50 01 90 5D |  if_ne	jmp	#LR__1235
0fac8                 | LR__1230
0fac8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0fac8     08 4E 05 F1 | 	add	fp, #8
0facc     A7 1E 02 FB | 	rdlong	local01, fp
0fad0     08 4E 85 F1 | 	sub	fp, #8
0fad4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fad8     14 4E 05 A1 |  if_e	add	fp, #20
0fadc     A7 22 02 AB |  if_e	rdlong	local03, fp
0fae0     14 4E 85 A1 |  if_e	sub	fp, #20
0fae4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fae8     1C 00 90 5D |  if_ne	jmp	#LR__1231
0faec     A7 12 02 FB | 	rdlong	arg01, fp
0faf0     0C 4E 05 F1 | 	add	fp, #12
0faf4     A7 14 02 FB | 	rdlong	arg02, fp
0faf8     0C 4E 85 F1 | 	sub	fp, #12
0fafc     E0 D5 B0 FD | 	call	#__system___string_concat
0fb00     A7 FA 61 FC | 	wrlong	result1, fp
0fb04     10 01 90 FD | 	jmp	#LR__1235
0fb08                 | LR__1231
0fb08                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0fb08     08 4E 05 F1 | 	add	fp, #8
0fb0c     A7 1E 02 FB | 	rdlong	local01, fp
0fb10     08 4E 85 F1 | 	sub	fp, #8
0fb14     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fb18     14 4E 05 A1 |  if_e	add	fp, #20
0fb1c     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb20     14 4E 85 A1 |  if_e	sub	fp, #20
0fb24     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fb28     30 00 90 5D |  if_ne	jmp	#LR__1232
0fb2c     A7 12 02 FB | 	rdlong	arg01, fp
0fb30     20 E9 BF FD | 	call	#_convertstring
0fb34     FD 12 02 F6 | 	mov	arg01, result1
0fb38     0C 4E 05 F1 | 	add	fp, #12
0fb3c     A7 14 02 FB | 	rdlong	arg02, fp
0fb40     0C 4E 85 F1 | 	sub	fp, #12
0fb44     98 D5 B0 FD | 	call	#__system___string_concat
0fb48     A7 FA 61 FC | 	wrlong	result1, fp
0fb4c     08 4E 05 F1 | 	add	fp, #8
0fb50     A7 3E 68 FC | 	wrlong	#31, fp
0fb54     08 4E 85 F1 | 	sub	fp, #8
0fb58     BC 00 90 FD | 	jmp	#LR__1235
0fb5c                 | LR__1232
0fb5c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0fb5c     08 4E 05 F1 | 	add	fp, #8
0fb60     A7 1E 02 FB | 	rdlong	local01, fp
0fb64     08 4E 85 F1 | 	sub	fp, #8
0fb68     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fb6c     14 4E 05 A1 |  if_e	add	fp, #20
0fb70     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb74     14 4E 85 A1 |  if_e	sub	fp, #20
0fb78     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fb7c     28 00 90 5D |  if_ne	jmp	#LR__1233
0fb80     A7 1E 02 FB | 	rdlong	local01, fp
0fb84     0C 4E 05 F1 | 	add	fp, #12
0fb88     A7 12 02 FB | 	rdlong	arg01, fp
0fb8c     0C 4E 85 F1 | 	sub	fp, #12
0fb90     C0 E8 BF FD | 	call	#_convertstring
0fb94     FD 14 02 F6 | 	mov	arg02, result1
0fb98     0F 13 02 F6 | 	mov	arg01, local01
0fb9c     40 D5 B0 FD | 	call	#__system___string_concat
0fba0     A7 FA 61 FC | 	wrlong	result1, fp
0fba4     70 00 90 FD | 	jmp	#LR__1235
0fba8                 | LR__1233
0fba8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0fba8     08 4E 05 F1 | 	add	fp, #8
0fbac     A7 1E 02 FB | 	rdlong	local01, fp
0fbb0     08 4E 85 F1 | 	sub	fp, #8
0fbb4     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fbb8     14 4E 05 A1 |  if_e	add	fp, #20
0fbbc     A7 22 02 AB |  if_e	rdlong	local03, fp
0fbc0     14 4E 85 A1 |  if_e	sub	fp, #20
0fbc4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fbc8     3C 00 90 5D |  if_ne	jmp	#LR__1234
0fbcc     A7 12 02 FB | 	rdlong	arg01, fp
0fbd0     80 E8 BF FD | 	call	#_convertstring
0fbd4     FD 1E 02 F6 | 	mov	local01, result1
0fbd8     0C 4E 05 F1 | 	add	fp, #12
0fbdc     A7 12 02 FB | 	rdlong	arg01, fp
0fbe0     0C 4E 85 F1 | 	sub	fp, #12
0fbe4     6C E8 BF FD | 	call	#_convertstring
0fbe8     FD 14 02 F6 | 	mov	arg02, result1
0fbec     0F 13 02 F6 | 	mov	arg01, local01
0fbf0     EC D4 B0 FD | 	call	#__system___string_concat
0fbf4     A7 FA 61 FC | 	wrlong	result1, fp
0fbf8     08 4E 05 F1 | 	add	fp, #8
0fbfc     A7 3E 68 FC | 	wrlong	#31, fp
0fc00     08 4E 85 F1 | 	sub	fp, #8
0fc04     10 00 90 FD | 	jmp	#LR__1235
0fc08                 | LR__1234
0fc08     A7 08 68 FC | 	wrlong	#4, fp
0fc0c     08 4E 05 F1 | 	add	fp, #8
0fc10     A7 FE 69 FC | 	wrlong	#255, fp
0fc14     08 4E 85 F1 | 	sub	fp, #8
0fc18                 | LR__1235
0fc18     A7 12 02 F6 | 	mov	arg01, fp
0fc1c     24 A6 BF FD | 	call	#_push
0fc20     A7 F0 03 F6 | 	mov	ptra, fp
0fc24     B2 00 A0 FD | 	call	#popregs_
0fc28                 | _do_plus_ret
0fc28     2D 00 64 FD | 	ret
0fc2c                 | 
0fc2c                 | ' 
0fc2c                 | ' sub do_minus
0fc2c                 | _do_minus
0fc2c     05 4A 05 F6 | 	mov	COUNT_, #5
0fc30     A8 00 A0 FD | 	call	#pushregs_
0fc34     18 F0 07 F1 | 	add	ptra, #24
0fc38     70 A5 BF FD | 	call	#_pop
0fc3c     FD 1E 02 F6 | 	mov	local01, result1
0fc40     FE 20 02 F6 | 	mov	local02, result2
0fc44     FF 22 02 F6 | 	mov	local03, result3
0fc48     0C 4E 05 F1 | 	add	fp, #12
0fc4c     A7 1E 62 FC | 	wrlong	local01, fp
0fc50     04 4E 05 F1 | 	add	fp, #4
0fc54     A7 20 62 FC | 	wrlong	local02, fp
0fc58     04 4E 05 F1 | 	add	fp, #4
0fc5c     A7 22 62 FC | 	wrlong	local03, fp
0fc60     14 4E 85 F1 | 	sub	fp, #20
0fc64     44 A5 BF FD | 	call	#_pop
0fc68     FF 22 02 F6 | 	mov	local03, result3
0fc6c     A7 FA 61 FC | 	wrlong	result1, fp
0fc70     04 4E 05 F1 | 	add	fp, #4
0fc74     A7 FC 61 FC | 	wrlong	result2, fp
0fc78     04 4E 05 F1 | 	add	fp, #4
0fc7c     A7 22 62 FC | 	wrlong	local03, fp
0fc80                 | ' 
0fc80                 | ' t2=pop()
0fc80                 | ' t1=pop()
0fc80                 | ' 
0fc80                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0fc80     08 4E 85 F1 | 	sub	fp, #8
0fc84     1D 22 0E F2 | 	cmp	local03, #29 wz
0fc88     14 4E 05 A1 |  if_e	add	fp, #20
0fc8c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fc90     14 4E 85 A1 |  if_e	sub	fp, #20
0fc94     12 23 02 A6 |  if_e	mov	local03, local04
0fc98     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fc9c     5C 00 90 5D |  if_ne	jmp	#LR__1241
0fca0                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0fca0     0C 4E 05 F1 | 	add	fp, #12
0fca4     A7 1E 02 FB | 	rdlong	local01, fp
0fca8     0C 4E 85 F1 | 	sub	fp, #12
0fcac     A7 22 02 FB | 	rdlong	local03, fp
0fcb0     11 1F 12 F2 | 	cmp	local01, local03 wc
0fcb4     1C 00 90 3D |  if_ae	jmp	#LR__1240
0fcb8     A7 1E 02 FB | 	rdlong	local01, fp
0fcbc     0C 4E 05 F1 | 	add	fp, #12
0fcc0     A7 20 02 FB | 	rdlong	local02, fp
0fcc4     0C 4E 85 F1 | 	sub	fp, #12
0fcc8     10 1F 82 F1 | 	sub	local01, local02
0fccc     A7 1E 62 FC | 	wrlong	local01, fp
0fcd0     F4 02 90 FD | 	jmp	#LR__1250
0fcd4                 | LR__1240
0fcd4     A7 1E 02 FB | 	rdlong	local01, fp
0fcd8     0C 4E 05 F1 | 	add	fp, #12
0fcdc     A7 20 02 FB | 	rdlong	local02, fp
0fce0     0C 4E 85 F1 | 	sub	fp, #12
0fce4     10 1F 82 F1 | 	sub	local01, local02
0fce8     A7 1E 62 FC | 	wrlong	local01, fp
0fcec     08 4E 05 F1 | 	add	fp, #8
0fcf0     A7 38 68 FC | 	wrlong	#28, fp
0fcf4     08 4E 85 F1 | 	sub	fp, #8
0fcf8     CC 02 90 FD | 	jmp	#LR__1250
0fcfc                 | LR__1241
0fcfc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0fcfc     08 4E 05 F1 | 	add	fp, #8
0fd00     A7 1E 02 FB | 	rdlong	local01, fp
0fd04     08 4E 85 F1 | 	sub	fp, #8
0fd08     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fd0c     14 4E 05 A1 |  if_e	add	fp, #20
0fd10     A7 24 02 AB |  if_e	rdlong	local04, fp
0fd14     14 4E 85 A1 |  if_e	sub	fp, #20
0fd18     12 23 02 A6 |  if_e	mov	local03, local04
0fd1c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fd20     28 00 90 5D |  if_ne	jmp	#LR__1242
0fd24     A7 1E 02 FB | 	rdlong	local01, fp
0fd28     0C 4E 05 F1 | 	add	fp, #12
0fd2c     A7 20 02 FB | 	rdlong	local02, fp
0fd30     0C 4E 85 F1 | 	sub	fp, #12
0fd34     10 1F 82 F1 | 	sub	local01, local02
0fd38     A7 1E 62 FC | 	wrlong	local01, fp
0fd3c     08 4E 05 F1 | 	add	fp, #8
0fd40     A7 38 68 FC | 	wrlong	#28, fp
0fd44     08 4E 85 F1 | 	sub	fp, #8
0fd48     7C 02 90 FD | 	jmp	#LR__1250
0fd4c                 | LR__1242
0fd4c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0fd4c     08 4E 05 F1 | 	add	fp, #8
0fd50     A7 1E 02 FB | 	rdlong	local01, fp
0fd54     08 4E 85 F1 | 	sub	fp, #8
0fd58     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fd5c     14 4E 05 A1 |  if_e	add	fp, #20
0fd60     A7 24 02 AB |  if_e	rdlong	local04, fp
0fd64     14 4E 85 A1 |  if_e	sub	fp, #20
0fd68     12 23 02 A6 |  if_e	mov	local03, local04
0fd6c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fd70     34 00 90 5D |  if_ne	jmp	#LR__1243
0fd74     A7 12 02 FB | 	rdlong	arg01, fp
0fd78     80 FA B0 FD | 	call	#__system___float_fromuns
0fd7c     FD 12 02 F6 | 	mov	arg01, result1
0fd80     0C 4E 05 F1 | 	add	fp, #12
0fd84     A7 14 02 FB | 	rdlong	arg02, fp
0fd88     0C 4E 85 F1 | 	sub	fp, #12
0fd8c     1F 14 E6 F4 | 	bitnot	arg02, #31
0fd90     9C FA B0 FD | 	call	#__system___float_add
0fd94     A7 FA 61 FC | 	wrlong	result1, fp
0fd98     08 4E 05 F1 | 	add	fp, #8
0fd9c     A7 3C 68 FC | 	wrlong	#30, fp
0fda0     08 4E 85 F1 | 	sub	fp, #8
0fda4     20 02 90 FD | 	jmp	#LR__1250
0fda8                 | LR__1243
0fda8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0fda8     08 4E 05 F1 | 	add	fp, #8
0fdac     A7 1E 02 FB | 	rdlong	local01, fp
0fdb0     08 4E 85 F1 | 	sub	fp, #8
0fdb4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fdb8     14 4E 05 A1 |  if_e	add	fp, #20
0fdbc     A7 24 02 AB |  if_e	rdlong	local04, fp
0fdc0     14 4E 85 A1 |  if_e	sub	fp, #20
0fdc4     12 23 02 A6 |  if_e	mov	local03, local04
0fdc8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fdcc     1C 00 90 5D |  if_ne	jmp	#LR__1244
0fdd0     A7 1E 02 FB | 	rdlong	local01, fp
0fdd4     0C 4E 05 F1 | 	add	fp, #12
0fdd8     A7 20 02 FB | 	rdlong	local02, fp
0fddc     0C 4E 85 F1 | 	sub	fp, #12
0fde0     10 1F 82 F1 | 	sub	local01, local02
0fde4     A7 1E 62 FC | 	wrlong	local01, fp
0fde8     DC 01 90 FD | 	jmp	#LR__1250
0fdec                 | LR__1244
0fdec                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0fdec     08 4E 05 F1 | 	add	fp, #8
0fdf0     A7 1E 02 FB | 	rdlong	local01, fp
0fdf4     08 4E 85 F1 | 	sub	fp, #8
0fdf8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fdfc     14 4E 05 A1 |  if_e	add	fp, #20
0fe00     A7 24 02 AB |  if_e	rdlong	local04, fp
0fe04     14 4E 85 A1 |  if_e	sub	fp, #20
0fe08     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0fe0c     1C 00 90 5D |  if_ne	jmp	#LR__1245
0fe10     A7 1E 02 FB | 	rdlong	local01, fp
0fe14     0C 4E 05 F1 | 	add	fp, #12
0fe18     A7 20 02 FB | 	rdlong	local02, fp
0fe1c     0C 4E 85 F1 | 	sub	fp, #12
0fe20     10 1F 82 F1 | 	sub	local01, local02
0fe24     A7 1E 62 FC | 	wrlong	local01, fp
0fe28     9C 01 90 FD | 	jmp	#LR__1250
0fe2c                 | LR__1245
0fe2c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0fe2c     08 4E 05 F1 | 	add	fp, #8
0fe30     A7 1E 02 FB | 	rdlong	local01, fp
0fe34     08 4E 85 F1 | 	sub	fp, #8
0fe38     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fe3c     14 4E 05 A1 |  if_e	add	fp, #20
0fe40     A7 22 02 AB |  if_e	rdlong	local03, fp
0fe44     14 4E 85 A1 |  if_e	sub	fp, #20
0fe48     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fe4c     44 00 90 5D |  if_ne	jmp	#LR__1246
0fe50     A7 12 02 FB | 	rdlong	arg01, fp
0fe54     09 13 52 F6 | 	abs	arg01, arg01 wc
0fe58     1F 26 C6 C9 |  if_b	decod	local05, #31
0fe5c     00 26 06 36 |  if_ae	mov	local05, #0
0fe60     98 F9 B0 FD | 	call	#__system___float_fromuns
0fe64     13 FB 61 F5 | 	xor	result1, local05
0fe68     FD 12 02 F6 | 	mov	arg01, result1
0fe6c     0C 4E 05 F1 | 	add	fp, #12
0fe70     A7 14 02 FB | 	rdlong	arg02, fp
0fe74     0C 4E 85 F1 | 	sub	fp, #12
0fe78     1F 14 E6 F4 | 	bitnot	arg02, #31
0fe7c     B0 F9 B0 FD | 	call	#__system___float_add
0fe80     A7 FA 61 FC | 	wrlong	result1, fp
0fe84     08 4E 05 F1 | 	add	fp, #8
0fe88     A7 3C 68 FC | 	wrlong	#30, fp
0fe8c     08 4E 85 F1 | 	sub	fp, #8
0fe90     34 01 90 FD | 	jmp	#LR__1250
0fe94                 | LR__1246
0fe94                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0fe94     08 4E 05 F1 | 	add	fp, #8
0fe98     A7 1E 02 FB | 	rdlong	local01, fp
0fe9c     08 4E 85 F1 | 	sub	fp, #8
0fea0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fea4     14 4E 05 A1 |  if_e	add	fp, #20
0fea8     A7 22 02 AB |  if_e	rdlong	local03, fp
0feac     14 4E 85 A1 |  if_e	sub	fp, #20
0feb0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0feb4     2C 00 90 5D |  if_ne	jmp	#LR__1247
0feb8     A7 1E 02 FB | 	rdlong	local01, fp
0febc     0C 4E 05 F1 | 	add	fp, #12
0fec0     A7 12 02 FB | 	rdlong	arg01, fp
0fec4     0C 4E 85 F1 | 	sub	fp, #12
0fec8     30 F9 B0 FD | 	call	#__system___float_fromuns
0fecc     FD 14 02 F6 | 	mov	arg02, result1
0fed0     0F 13 02 F6 | 	mov	arg01, local01
0fed4     1F 14 E6 F4 | 	bitnot	arg02, #31
0fed8     54 F9 B0 FD | 	call	#__system___float_add
0fedc     A7 FA 61 FC | 	wrlong	result1, fp
0fee0     E4 00 90 FD | 	jmp	#LR__1250
0fee4                 | LR__1247
0fee4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0fee4     08 4E 05 F1 | 	add	fp, #8
0fee8     A7 1E 02 FB | 	rdlong	local01, fp
0feec     08 4E 85 F1 | 	sub	fp, #8
0fef0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fef4     14 4E 05 A1 |  if_e	add	fp, #20
0fef8     A7 22 02 AB |  if_e	rdlong	local03, fp
0fefc     14 4E 85 A1 |  if_e	sub	fp, #20
0ff00     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ff04     3C 00 90 5D |  if_ne	jmp	#LR__1248
0ff08     A7 1E 02 FB | 	rdlong	local01, fp
0ff0c     0C 4E 05 F1 | 	add	fp, #12
0ff10     A7 12 02 FB | 	rdlong	arg01, fp
0ff14     0C 4E 85 F1 | 	sub	fp, #12
0ff18     09 13 52 F6 | 	abs	arg01, arg01 wc
0ff1c     1F 26 C6 C9 |  if_b	decod	local05, #31
0ff20     00 26 06 36 |  if_ae	mov	local05, #0
0ff24     D4 F8 B0 FD | 	call	#__system___float_fromuns
0ff28     13 FB 61 F5 | 	xor	result1, local05
0ff2c     FD 14 02 F6 | 	mov	arg02, result1
0ff30     0F 13 02 F6 | 	mov	arg01, local01
0ff34     1F 14 E6 F4 | 	bitnot	arg02, #31
0ff38     F4 F8 B0 FD | 	call	#__system___float_add
0ff3c     A7 FA 61 FC | 	wrlong	result1, fp
0ff40     84 00 90 FD | 	jmp	#LR__1250
0ff44                 | LR__1248
0ff44                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0ff44     08 4E 05 F1 | 	add	fp, #8
0ff48     A7 1E 02 FB | 	rdlong	local01, fp
0ff4c     08 4E 85 F1 | 	sub	fp, #8
0ff50     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ff54     14 4E 05 A1 |  if_e	add	fp, #20
0ff58     A7 22 02 AB |  if_e	rdlong	local03, fp
0ff5c     14 4E 85 A1 |  if_e	sub	fp, #20
0ff60     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ff64     20 00 90 5D |  if_ne	jmp	#LR__1249
0ff68     A7 12 02 FB | 	rdlong	arg01, fp
0ff6c     0C 4E 05 F1 | 	add	fp, #12
0ff70     A7 14 02 FB | 	rdlong	arg02, fp
0ff74     0C 4E 85 F1 | 	sub	fp, #12
0ff78     1F 14 E6 F4 | 	bitnot	arg02, #31
0ff7c     B0 F8 B0 FD | 	call	#__system___float_add
0ff80     A7 FA 61 FC | 	wrlong	result1, fp
0ff84     40 00 90 FD | 	jmp	#LR__1250
0ff88                 | LR__1249
0ff88                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0ff88     08 4E 05 F1 | 	add	fp, #8
0ff8c     A7 1E 02 FB | 	rdlong	local01, fp
0ff90     08 4E 85 F1 | 	sub	fp, #8
0ff94     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ff98     14 4E 05 51 |  if_ne	add	fp, #20
0ff9c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0ffa0     14 4E 85 51 |  if_ne	sub	fp, #20
0ffa4     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0ffa8     A7 06 68 AC |  if_e	wrlong	#3, fp
0ffac     08 4E 05 A1 |  if_e	add	fp, #8
0ffb0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ffb4     08 4E 85 A1 |  if_e	sub	fp, #8
0ffb8     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0ffbc     08 4E 05 51 |  if_ne	add	fp, #8
0ffc0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0ffc4     08 4E 85 51 |  if_ne	sub	fp, #8
0ffc8                 | LR__1250
0ffc8     A7 12 02 F6 | 	mov	arg01, fp
0ffcc     74 A2 BF FD | 	call	#_push
0ffd0     A7 F0 03 F6 | 	mov	ptra, fp
0ffd4     B2 00 A0 FD | 	call	#popregs_
0ffd8                 | _do_minus_ret
0ffd8     2D 00 64 FD | 	ret
0ffdc                 | 
0ffdc                 | ' 
0ffdc                 | ' sub do_and 
0ffdc                 | _do_and
0ffdc     03 4A 05 F6 | 	mov	COUNT_, #3
0ffe0     A8 00 A0 FD | 	call	#pushregs_
0ffe4     18 F0 07 F1 | 	add	ptra, #24
0ffe8     C0 A1 BF FD | 	call	#_pop
0ffec     FD 12 02 F6 | 	mov	arg01, result1
0fff0     FE 1E 02 F6 | 	mov	local01, result2
0fff4     FF 20 02 F6 | 	mov	local02, result3
0fff8     0C 4E 05 F1 | 	add	fp, #12
0fffc     A7 12 62 FC | 	wrlong	arg01, fp
10000     04 4E 05 F1 | 	add	fp, #4
10004     A7 1E 62 FC | 	wrlong	local01, fp
10008     04 4E 05 F1 | 	add	fp, #4
1000c     A7 20 62 FC | 	wrlong	local02, fp
10010     14 4E 85 F1 | 	sub	fp, #20
10014     94 A1 BF FD | 	call	#_pop
10018     FF 22 02 F6 | 	mov	local03, result3
1001c     A7 FA 61 FC | 	wrlong	result1, fp
10020     04 4E 05 F1 | 	add	fp, #4
10024     A7 FC 61 FC | 	wrlong	result2, fp
10028     04 4E 05 F1 | 	add	fp, #4
1002c     A7 22 62 FC | 	wrlong	local03, fp
10030                 | ' 
10030                 | ' t2=pop()
10030                 | ' t1=pop()
10030                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10030     08 4E 85 F1 | 	sub	fp, #8
10034     1C 22 0E F2 | 	cmp	local03, #28 wz
10038     A7 22 02 AB |  if_e	rdlong	local03, fp
1003c     A7 22 62 AC |  if_e	wrlong	local03, fp
10040     08 4E 05 A1 |  if_e	add	fp, #8
10044     A7 3A 68 AC |  if_e	wrlong	#29, fp
10048     08 4E 85 A1 |  if_e	sub	fp, #8
1004c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1004c     14 4E 05 F1 | 	add	fp, #20
10050     A7 22 02 FB | 	rdlong	local03, fp
10054     14 4E 85 F1 | 	sub	fp, #20
10058     1C 22 0E F2 | 	cmp	local03, #28 wz
1005c     18 00 90 5D |  if_ne	jmp	#LR__1260
10060     0C 4E 05 F1 | 	add	fp, #12
10064     A7 22 02 FB | 	rdlong	local03, fp
10068     A7 22 62 FC | 	wrlong	local03, fp
1006c     08 4E 05 F1 | 	add	fp, #8
10070     A7 3A 68 FC | 	wrlong	#29, fp
10074     14 4E 85 F1 | 	sub	fp, #20
10078                 | LR__1260
10078                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
10078     08 4E 05 F1 | 	add	fp, #8
1007c     A7 22 02 FB | 	rdlong	local03, fp
10080     08 4E 85 F1 | 	sub	fp, #8
10084     1F 22 0E F2 | 	cmp	local03, #31 wz
10088     14 4E 05 51 |  if_ne	add	fp, #20
1008c     A7 20 02 5B |  if_ne	rdlong	local02, fp
10090     14 4E 85 51 |  if_ne	sub	fp, #20
10094     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10098     08 4E 05 51 |  if_ne	add	fp, #8
1009c     A7 22 02 5B |  if_ne	rdlong	local03, fp
100a0     08 4E 85 51 |  if_ne	sub	fp, #8
100a4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
100a8     14 4E 05 51 |  if_ne	add	fp, #20
100ac     14 4E 85 51 |  if_ne	sub	fp, #20
100b0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
100b4     A7 0C 68 AC |  if_e	wrlong	#6, fp
100b8     08 4E 05 A1 |  if_e	add	fp, #8
100bc     A7 FE 69 AC |  if_e	wrlong	#255, fp
100c0     08 4E 85 A1 |  if_e	sub	fp, #8
100c4     18 00 90 AD |  if_e	jmp	#LR__1261
100c8     A7 22 02 FB | 	rdlong	local03, fp
100cc     0C 4E 05 F1 | 	add	fp, #12
100d0     A7 1E 02 FB | 	rdlong	local01, fp
100d4     0C 4E 85 F1 | 	sub	fp, #12
100d8     0F 23 02 F5 | 	and	local03, local01
100dc     A7 22 62 FC | 	wrlong	local03, fp
100e0                 | LR__1261
100e0     A7 12 02 F6 | 	mov	arg01, fp
100e4     5C A1 BF FD | 	call	#_push
100e8     A7 F0 03 F6 | 	mov	ptra, fp
100ec     B2 00 A0 FD | 	call	#popregs_
100f0                 | _do_and_ret
100f0     2D 00 64 FD | 	ret
100f4                 | 
100f4                 | ' 
100f4                 | ' sub do_or 
100f4                 | _do_or
100f4     03 4A 05 F6 | 	mov	COUNT_, #3
100f8     A8 00 A0 FD | 	call	#pushregs_
100fc     18 F0 07 F1 | 	add	ptra, #24
10100     A8 A0 BF FD | 	call	#_pop
10104     FD 12 02 F6 | 	mov	arg01, result1
10108     FE 1E 02 F6 | 	mov	local01, result2
1010c     FF 20 02 F6 | 	mov	local02, result3
10110     0C 4E 05 F1 | 	add	fp, #12
10114     A7 12 62 FC | 	wrlong	arg01, fp
10118     04 4E 05 F1 | 	add	fp, #4
1011c     A7 1E 62 FC | 	wrlong	local01, fp
10120     04 4E 05 F1 | 	add	fp, #4
10124     A7 20 62 FC | 	wrlong	local02, fp
10128     14 4E 85 F1 | 	sub	fp, #20
1012c     7C A0 BF FD | 	call	#_pop
10130     FF 22 02 F6 | 	mov	local03, result3
10134     A7 FA 61 FC | 	wrlong	result1, fp
10138     04 4E 05 F1 | 	add	fp, #4
1013c     A7 FC 61 FC | 	wrlong	result2, fp
10140     04 4E 05 F1 | 	add	fp, #4
10144     A7 22 62 FC | 	wrlong	local03, fp
10148                 | ' 
10148                 | ' t2=pop()
10148                 | ' t1=pop()
10148                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10148     08 4E 85 F1 | 	sub	fp, #8
1014c     1C 22 0E F2 | 	cmp	local03, #28 wz
10150     A7 22 02 AB |  if_e	rdlong	local03, fp
10154     A7 22 62 AC |  if_e	wrlong	local03, fp
10158     08 4E 05 A1 |  if_e	add	fp, #8
1015c     A7 3A 68 AC |  if_e	wrlong	#29, fp
10160     08 4E 85 A1 |  if_e	sub	fp, #8
10164                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10164     14 4E 05 F1 | 	add	fp, #20
10168     A7 22 02 FB | 	rdlong	local03, fp
1016c     14 4E 85 F1 | 	sub	fp, #20
10170     1C 22 0E F2 | 	cmp	local03, #28 wz
10174     18 00 90 5D |  if_ne	jmp	#LR__1270
10178     0C 4E 05 F1 | 	add	fp, #12
1017c     A7 22 02 FB | 	rdlong	local03, fp
10180     A7 22 62 FC | 	wrlong	local03, fp
10184     08 4E 05 F1 | 	add	fp, #8
10188     A7 3A 68 FC | 	wrlong	#29, fp
1018c     14 4E 85 F1 | 	sub	fp, #20
10190                 | LR__1270
10190                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
10190     08 4E 05 F1 | 	add	fp, #8
10194     A7 22 02 FB | 	rdlong	local03, fp
10198     08 4E 85 F1 | 	sub	fp, #8
1019c     1F 22 0E F2 | 	cmp	local03, #31 wz
101a0     14 4E 05 51 |  if_ne	add	fp, #20
101a4     A7 20 02 5B |  if_ne	rdlong	local02, fp
101a8     14 4E 85 51 |  if_ne	sub	fp, #20
101ac     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
101b0     08 4E 05 51 |  if_ne	add	fp, #8
101b4     A7 22 02 5B |  if_ne	rdlong	local03, fp
101b8     08 4E 85 51 |  if_ne	sub	fp, #8
101bc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
101c0     14 4E 05 51 |  if_ne	add	fp, #20
101c4     14 4E 85 51 |  if_ne	sub	fp, #20
101c8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
101cc     A7 0C 68 AC |  if_e	wrlong	#6, fp
101d0     08 4E 05 A1 |  if_e	add	fp, #8
101d4     A7 FE 69 AC |  if_e	wrlong	#255, fp
101d8     08 4E 85 A1 |  if_e	sub	fp, #8
101dc     18 00 90 AD |  if_e	jmp	#LR__1271
101e0     A7 22 02 FB | 	rdlong	local03, fp
101e4     0C 4E 05 F1 | 	add	fp, #12
101e8     A7 1E 02 FB | 	rdlong	local01, fp
101ec     0C 4E 85 F1 | 	sub	fp, #12
101f0     0F 23 42 F5 | 	or	local03, local01
101f4     A7 22 62 FC | 	wrlong	local03, fp
101f8                 | LR__1271
101f8     A7 12 02 F6 | 	mov	arg01, fp
101fc     44 A0 BF FD | 	call	#_push
10200     A7 F0 03 F6 | 	mov	ptra, fp
10204     B2 00 A0 FD | 	call	#popregs_
10208                 | _do_or_ret
10208     2D 00 64 FD | 	ret
1020c                 | 
1020c                 | ' 
1020c                 | ' sub do_mul
1020c                 | _do_mul
1020c     05 4A 05 F6 | 	mov	COUNT_, #5
10210     A8 00 A0 FD | 	call	#pushregs_
10214     18 F0 07 F1 | 	add	ptra, #24
10218     90 9F BF FD | 	call	#_pop
1021c     FD 1E 02 F6 | 	mov	local01, result1
10220     FE 20 02 F6 | 	mov	local02, result2
10224     FF 22 02 F6 | 	mov	local03, result3
10228     0C 4E 05 F1 | 	add	fp, #12
1022c     A7 1E 62 FC | 	wrlong	local01, fp
10230     04 4E 05 F1 | 	add	fp, #4
10234     A7 20 62 FC | 	wrlong	local02, fp
10238     04 4E 05 F1 | 	add	fp, #4
1023c     A7 22 62 FC | 	wrlong	local03, fp
10240     14 4E 85 F1 | 	sub	fp, #20
10244     64 9F BF FD | 	call	#_pop
10248     FF 22 02 F6 | 	mov	local03, result3
1024c     A7 FA 61 FC | 	wrlong	result1, fp
10250     04 4E 05 F1 | 	add	fp, #4
10254     A7 FC 61 FC | 	wrlong	result2, fp
10258     04 4E 05 F1 | 	add	fp, #4
1025c     A7 22 62 FC | 	wrlong	local03, fp
10260                 | ' 
10260                 | ' t2=pop()
10260                 | ' t1=pop()
10260                 | ' 
10260                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
10260     08 4E 85 F1 | 	sub	fp, #8
10264     1D 22 0E F2 | 	cmp	local03, #29 wz
10268     14 4E 05 A1 |  if_e	add	fp, #20
1026c     A7 24 02 AB |  if_e	rdlong	local04, fp
10270     14 4E 85 A1 |  if_e	sub	fp, #20
10274     12 23 02 A6 |  if_e	mov	local03, local04
10278     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1027c     20 00 90 5D |  if_ne	jmp	#LR__1280
10280     A7 20 02 FB | 	rdlong	local02, fp
10284     0C 4E 05 F1 | 	add	fp, #12
10288     A7 22 02 FB | 	rdlong	local03, fp
1028c     11 21 02 FD | 	qmul	local02, local03
10290     0C 4E 85 F1 | 	sub	fp, #12
10294     18 1E 62 FD | 	getqx	local01
10298     A7 1E 62 FC | 	wrlong	local01, fp
1029c     C4 02 90 FD | 	jmp	#LR__1289
102a0                 | LR__1280
102a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
102a0     08 4E 05 F1 | 	add	fp, #8
102a4     A7 1E 02 FB | 	rdlong	local01, fp
102a8     08 4E 85 F1 | 	sub	fp, #8
102ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
102b0     14 4E 05 A1 |  if_e	add	fp, #20
102b4     A7 24 02 AB |  if_e	rdlong	local04, fp
102b8     14 4E 85 A1 |  if_e	sub	fp, #20
102bc     12 23 02 A6 |  if_e	mov	local03, local04
102c0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
102c4     2C 00 90 5D |  if_ne	jmp	#LR__1281
102c8     A7 20 02 FB | 	rdlong	local02, fp
102cc     0C 4E 05 F1 | 	add	fp, #12
102d0     A7 22 02 FB | 	rdlong	local03, fp
102d4     11 21 02 FD | 	qmul	local02, local03
102d8     0C 4E 85 F1 | 	sub	fp, #12
102dc     18 1E 62 FD | 	getqx	local01
102e0     A7 1E 62 FC | 	wrlong	local01, fp
102e4     08 4E 05 F1 | 	add	fp, #8
102e8     A7 38 68 FC | 	wrlong	#28, fp
102ec     08 4E 85 F1 | 	sub	fp, #8
102f0     70 02 90 FD | 	jmp	#LR__1289
102f4                 | LR__1281
102f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
102f4     08 4E 05 F1 | 	add	fp, #8
102f8     A7 1E 02 FB | 	rdlong	local01, fp
102fc     08 4E 85 F1 | 	sub	fp, #8
10300     1D 1E 0E F2 | 	cmp	local01, #29 wz
10304     14 4E 05 A1 |  if_e	add	fp, #20
10308     A7 24 02 AB |  if_e	rdlong	local04, fp
1030c     14 4E 85 A1 |  if_e	sub	fp, #20
10310     12 23 02 A6 |  if_e	mov	local03, local04
10314     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10318     30 00 90 5D |  if_ne	jmp	#LR__1282
1031c     A7 12 02 FB | 	rdlong	arg01, fp
10320     D8 F4 B0 FD | 	call	#__system___float_fromuns
10324     FD 12 02 F6 | 	mov	arg01, result1
10328     0C 4E 05 F1 | 	add	fp, #12
1032c     A7 14 02 FB | 	rdlong	arg02, fp
10330     0C 4E 85 F1 | 	sub	fp, #12
10334     C8 F8 B0 FD | 	call	#__system___float_mul
10338     A7 FA 61 FC | 	wrlong	result1, fp
1033c     08 4E 05 F1 | 	add	fp, #8
10340     A7 3C 68 FC | 	wrlong	#30, fp
10344     08 4E 85 F1 | 	sub	fp, #8
10348     18 02 90 FD | 	jmp	#LR__1289
1034c                 | LR__1282
1034c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1034c     08 4E 05 F1 | 	add	fp, #8
10350     A7 1E 02 FB | 	rdlong	local01, fp
10354     08 4E 85 F1 | 	sub	fp, #8
10358     1C 1E 0E F2 | 	cmp	local01, #28 wz
1035c     14 4E 05 A1 |  if_e	add	fp, #20
10360     A7 24 02 AB |  if_e	rdlong	local04, fp
10364     14 4E 85 A1 |  if_e	sub	fp, #20
10368     12 23 02 A6 |  if_e	mov	local03, local04
1036c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10370     20 00 90 5D |  if_ne	jmp	#LR__1283
10374     A7 20 02 FB | 	rdlong	local02, fp
10378     0C 4E 05 F1 | 	add	fp, #12
1037c     A7 22 02 FB | 	rdlong	local03, fp
10380     11 21 02 FD | 	qmul	local02, local03
10384     0C 4E 85 F1 | 	sub	fp, #12
10388     18 1E 62 FD | 	getqx	local01
1038c     A7 1E 62 FC | 	wrlong	local01, fp
10390     D0 01 90 FD | 	jmp	#LR__1289
10394                 | LR__1283
10394                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
10394     08 4E 05 F1 | 	add	fp, #8
10398     A7 1E 02 FB | 	rdlong	local01, fp
1039c     08 4E 85 F1 | 	sub	fp, #8
103a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
103a4     14 4E 05 A1 |  if_e	add	fp, #20
103a8     A7 24 02 AB |  if_e	rdlong	local04, fp
103ac     14 4E 85 A1 |  if_e	sub	fp, #20
103b0     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
103b4     20 00 90 5D |  if_ne	jmp	#LR__1284
103b8     A7 20 02 FB | 	rdlong	local02, fp
103bc     0C 4E 05 F1 | 	add	fp, #12
103c0     A7 22 02 FB | 	rdlong	local03, fp
103c4     11 21 02 FD | 	qmul	local02, local03
103c8     0C 4E 85 F1 | 	sub	fp, #12
103cc     18 1E 62 FD | 	getqx	local01
103d0     A7 1E 62 FC | 	wrlong	local01, fp
103d4     8C 01 90 FD | 	jmp	#LR__1289
103d8                 | LR__1284
103d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
103d8     08 4E 05 F1 | 	add	fp, #8
103dc     A7 1E 02 FB | 	rdlong	local01, fp
103e0     08 4E 85 F1 | 	sub	fp, #8
103e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
103e8     14 4E 05 A1 |  if_e	add	fp, #20
103ec     A7 22 02 AB |  if_e	rdlong	local03, fp
103f0     14 4E 85 A1 |  if_e	sub	fp, #20
103f4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
103f8     40 00 90 5D |  if_ne	jmp	#LR__1285
103fc     A7 12 02 FB | 	rdlong	arg01, fp
10400     09 13 52 F6 | 	abs	arg01, arg01 wc
10404     1F 26 C6 C9 |  if_b	decod	local05, #31
10408     00 26 06 36 |  if_ae	mov	local05, #0
1040c     EC F3 B0 FD | 	call	#__system___float_fromuns
10410     13 FB 61 F5 | 	xor	result1, local05
10414     FD 12 02 F6 | 	mov	arg01, result1
10418     0C 4E 05 F1 | 	add	fp, #12
1041c     A7 14 02 FB | 	rdlong	arg02, fp
10420     0C 4E 85 F1 | 	sub	fp, #12
10424     D8 F7 B0 FD | 	call	#__system___float_mul
10428     A7 FA 61 FC | 	wrlong	result1, fp
1042c     08 4E 05 F1 | 	add	fp, #8
10430     A7 3C 68 FC | 	wrlong	#30, fp
10434     08 4E 85 F1 | 	sub	fp, #8
10438     28 01 90 FD | 	jmp	#LR__1289
1043c                 | LR__1285
1043c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1043c     08 4E 05 F1 | 	add	fp, #8
10440     A7 1E 02 FB | 	rdlong	local01, fp
10444     08 4E 85 F1 | 	sub	fp, #8
10448     1E 1E 0E F2 | 	cmp	local01, #30 wz
1044c     14 4E 05 A1 |  if_e	add	fp, #20
10450     A7 22 02 AB |  if_e	rdlong	local03, fp
10454     14 4E 85 A1 |  if_e	sub	fp, #20
10458     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1045c     28 00 90 5D |  if_ne	jmp	#LR__1286
10460     A7 1E 02 FB | 	rdlong	local01, fp
10464     0C 4E 05 F1 | 	add	fp, #12
10468     A7 12 02 FB | 	rdlong	arg01, fp
1046c     0C 4E 85 F1 | 	sub	fp, #12
10470     88 F3 B0 FD | 	call	#__system___float_fromuns
10474     FD 14 02 F6 | 	mov	arg02, result1
10478     0F 13 02 F6 | 	mov	arg01, local01
1047c     80 F7 B0 FD | 	call	#__system___float_mul
10480     A7 FA 61 FC | 	wrlong	result1, fp
10484     DC 00 90 FD | 	jmp	#LR__1289
10488                 | LR__1286
10488                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
10488     08 4E 05 F1 | 	add	fp, #8
1048c     A7 1E 02 FB | 	rdlong	local01, fp
10490     08 4E 85 F1 | 	sub	fp, #8
10494     1E 1E 0E F2 | 	cmp	local01, #30 wz
10498     14 4E 05 A1 |  if_e	add	fp, #20
1049c     A7 22 02 AB |  if_e	rdlong	local03, fp
104a0     14 4E 85 A1 |  if_e	sub	fp, #20
104a4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
104a8     38 00 90 5D |  if_ne	jmp	#LR__1287
104ac     A7 1E 02 FB | 	rdlong	local01, fp
104b0     0C 4E 05 F1 | 	add	fp, #12
104b4     A7 12 02 FB | 	rdlong	arg01, fp
104b8     0C 4E 85 F1 | 	sub	fp, #12
104bc     09 13 52 F6 | 	abs	arg01, arg01 wc
104c0     1F 26 C6 C9 |  if_b	decod	local05, #31
104c4     00 26 06 36 |  if_ae	mov	local05, #0
104c8     30 F3 B0 FD | 	call	#__system___float_fromuns
104cc     13 FB 61 F5 | 	xor	result1, local05
104d0     FD 14 02 F6 | 	mov	arg02, result1
104d4     0F 13 02 F6 | 	mov	arg01, local01
104d8     24 F7 B0 FD | 	call	#__system___float_mul
104dc     A7 FA 61 FC | 	wrlong	result1, fp
104e0     80 00 90 FD | 	jmp	#LR__1289
104e4                 | LR__1287
104e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
104e4     08 4E 05 F1 | 	add	fp, #8
104e8     A7 1E 02 FB | 	rdlong	local01, fp
104ec     08 4E 85 F1 | 	sub	fp, #8
104f0     1E 1E 0E F2 | 	cmp	local01, #30 wz
104f4     14 4E 05 A1 |  if_e	add	fp, #20
104f8     A7 22 02 AB |  if_e	rdlong	local03, fp
104fc     14 4E 85 A1 |  if_e	sub	fp, #20
10500     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10504     1C 00 90 5D |  if_ne	jmp	#LR__1288
10508     A7 12 02 FB | 	rdlong	arg01, fp
1050c     0C 4E 05 F1 | 	add	fp, #12
10510     A7 14 02 FB | 	rdlong	arg02, fp
10514     0C 4E 85 F1 | 	sub	fp, #12
10518     E4 F6 B0 FD | 	call	#__system___float_mul
1051c     A7 FA 61 FC | 	wrlong	result1, fp
10520     40 00 90 FD | 	jmp	#LR__1289
10524                 | LR__1288
10524                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
10524     08 4E 05 F1 | 	add	fp, #8
10528     A7 1E 02 FB | 	rdlong	local01, fp
1052c     08 4E 85 F1 | 	sub	fp, #8
10530     1F 1E 0E F2 | 	cmp	local01, #31 wz
10534     14 4E 05 51 |  if_ne	add	fp, #20
10538     A7 22 02 5B |  if_ne	rdlong	local03, fp
1053c     14 4E 85 51 |  if_ne	sub	fp, #20
10540     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
10544     A7 10 68 AC |  if_e	wrlong	#8, fp
10548     08 4E 05 A1 |  if_e	add	fp, #8
1054c     A7 FE 69 AC |  if_e	wrlong	#255, fp
10550     08 4E 85 A1 |  if_e	sub	fp, #8
10554     A7 12 68 5C |  if_ne	wrlong	#9, fp
10558     08 4E 05 51 |  if_ne	add	fp, #8
1055c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10560     08 4E 85 51 |  if_ne	sub	fp, #8
10564                 | LR__1289
10564     A7 12 02 F6 | 	mov	arg01, fp
10568     D8 9C BF FD | 	call	#_push
1056c     A7 F0 03 F6 | 	mov	ptra, fp
10570     B2 00 A0 FD | 	call	#popregs_
10574                 | _do_mul_ret
10574     2D 00 64 FD | 	ret
10578                 | 
10578                 | ' 
10578                 | ' sub do_div 
10578                 | _do_div
10578     01 4A 05 F6 | 	mov	COUNT_, #1
1057c     A8 00 A0 FD | 	call	#pushregs_
10580     18 F0 07 F1 | 	add	ptra, #24
10584     24 9C BF FD | 	call	#_pop
10588     FD 66 02 F6 | 	mov	muldivb_, result1
1058c     FE 64 02 F6 | 	mov	muldiva_, result2
10590     FF 1E 02 F6 | 	mov	local01, result3
10594     0C 4E 05 F1 | 	add	fp, #12
10598     A7 66 62 FC | 	wrlong	muldivb_, fp
1059c     04 4E 05 F1 | 	add	fp, #4
105a0     A7 64 62 FC | 	wrlong	muldiva_, fp
105a4     04 4E 05 F1 | 	add	fp, #4
105a8     A7 1E 62 FC | 	wrlong	local01, fp
105ac     14 4E 85 F1 | 	sub	fp, #20
105b0     F8 9B BF FD | 	call	#_pop
105b4     A7 FA 61 FC | 	wrlong	result1, fp
105b8     04 4E 05 F1 | 	add	fp, #4
105bc     A7 FC 61 FC | 	wrlong	result2, fp
105c0     04 4E 05 F1 | 	add	fp, #4
105c4     A7 FE 61 FC | 	wrlong	result3, fp
105c8                 | ' 
105c8                 | ' t2=pop()
105c8                 | ' t1=pop()
105c8                 | ' 
105c8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
105c8     08 4E 85 F1 | 	sub	fp, #8
105cc     1F FE 0D F2 | 	cmp	result3, #31 wz
105d0     14 4E 05 51 |  if_ne	add	fp, #20
105d4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
105d8     14 4E 85 51 |  if_ne	sub	fp, #20
105dc     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
105e0     A7 14 68 AC |  if_e	wrlong	#10, fp
105e4     08 4E 05 A1 |  if_e	add	fp, #8
105e8     A7 FE 69 AC |  if_e	wrlong	#255, fp
105ec     08 4E 85 A1 |  if_e	sub	fp, #8
105f0     90 01 90 AD |  if_e	jmp	#LR__1296
105f4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
105f4     08 4E 05 F1 | 	add	fp, #8
105f8     A7 66 02 FB | 	rdlong	muldivb_, fp
105fc     08 4E 85 F1 | 	sub	fp, #8
10600     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10604     1C 00 90 5D |  if_ne	jmp	#LR__1290
10608     08 4E 05 F1 | 	add	fp, #8
1060c     A7 38 68 FC | 	wrlong	#28, fp
10610     08 4E 85 F1 | 	sub	fp, #8
10614     A7 12 02 FB | 	rdlong	arg01, fp
10618     00 14 06 F6 | 	mov	arg02, #0
1061c     A8 FA B0 FD | 	call	#__system___float_tointeger
10620     A7 FA 61 FC | 	wrlong	result1, fp
10624                 | LR__1290
10624                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
10624     14 4E 05 F1 | 	add	fp, #20
10628     A7 66 02 FB | 	rdlong	muldivb_, fp
1062c     14 4E 85 F1 | 	sub	fp, #20
10630     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10634     28 00 90 5D |  if_ne	jmp	#LR__1291
10638     14 4E 05 F1 | 	add	fp, #20
1063c     A7 38 68 FC | 	wrlong	#28, fp
10640     08 4E 85 F1 | 	sub	fp, #8
10644     A7 12 02 FB | 	rdlong	arg01, fp
10648     0C 4E 85 F1 | 	sub	fp, #12
1064c     00 14 06 F6 | 	mov	arg02, #0
10650     74 FA B0 FD | 	call	#__system___float_tointeger
10654     0C 4E 05 F1 | 	add	fp, #12
10658     A7 FA 61 FC | 	wrlong	result1, fp
1065c     0C 4E 85 F1 | 	sub	fp, #12
10660                 | LR__1291
10660                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
10660     08 4E 05 F1 | 	add	fp, #8
10664     A7 66 02 FB | 	rdlong	muldivb_, fp
10668     08 4E 85 F1 | 	sub	fp, #8
1066c     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10670     14 4E 05 A1 |  if_e	add	fp, #20
10674     A7 1E 02 AB |  if_e	rdlong	local01, fp
10678     14 4E 85 A1 |  if_e	sub	fp, #20
1067c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10680     20 00 90 5D |  if_ne	jmp	#LR__1292
10684     0C 4E 05 F1 | 	add	fp, #12
10688     A7 1E 02 FB | 	rdlong	local01, fp
1068c     0C 4E 85 F1 | 	sub	fp, #12
10690     A7 66 02 FB | 	rdlong	muldivb_, fp
10694     0F 67 12 FD | 	qdiv	muldivb_, local01
10698     18 1E 62 FD | 	getqx	local01
1069c     A7 1E 62 FC | 	wrlong	local01, fp
106a0     E0 00 90 FD | 	jmp	#LR__1296
106a4                 | LR__1292
106a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
106a4     08 4E 05 F1 | 	add	fp, #8
106a8     A7 66 02 FB | 	rdlong	muldivb_, fp
106ac     08 4E 85 F1 | 	sub	fp, #8
106b0     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
106b4     14 4E 05 A1 |  if_e	add	fp, #20
106b8     A7 1E 02 AB |  if_e	rdlong	local01, fp
106bc     14 4E 85 A1 |  if_e	sub	fp, #20
106c0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
106c4     2C 00 90 5D |  if_ne	jmp	#LR__1293
106c8     0C 4E 05 F1 | 	add	fp, #12
106cc     A7 1E 02 FB | 	rdlong	local01, fp
106d0     0C 4E 85 F1 | 	sub	fp, #12
106d4     A7 66 02 FB | 	rdlong	muldivb_, fp
106d8     0F 67 12 FD | 	qdiv	muldivb_, local01
106dc     18 1E 62 FD | 	getqx	local01
106e0     A7 1E 62 FC | 	wrlong	local01, fp
106e4     08 4E 05 F1 | 	add	fp, #8
106e8     A7 38 68 FC | 	wrlong	#28, fp
106ec     08 4E 85 F1 | 	sub	fp, #8
106f0     90 00 90 FD | 	jmp	#LR__1296
106f4                 | LR__1293
106f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
106f4     08 4E 05 F1 | 	add	fp, #8
106f8     A7 66 02 FB | 	rdlong	muldivb_, fp
106fc     08 4E 85 F1 | 	sub	fp, #8
10700     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10704     14 4E 05 A1 |  if_e	add	fp, #20
10708     A7 1E 02 AB |  if_e	rdlong	local01, fp
1070c     14 4E 85 A1 |  if_e	sub	fp, #20
10710     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10714     1C 00 90 5D |  if_ne	jmp	#LR__1294
10718     A7 64 02 FB | 	rdlong	muldiva_, fp
1071c     0C 4E 05 F1 | 	add	fp, #12
10720     A7 66 02 FB | 	rdlong	muldivb_, fp
10724     0C 4E 85 F1 | 	sub	fp, #12
10728     BA 00 A0 FD | 	call	#divide_
1072c     A7 66 62 FC | 	wrlong	muldivb_, fp
10730     50 00 90 FD | 	jmp	#LR__1296
10734                 | LR__1294
10734                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
10734     08 4E 05 F1 | 	add	fp, #8
10738     A7 66 02 FB | 	rdlong	muldivb_, fp
1073c     08 4E 85 F1 | 	sub	fp, #8
10740     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10744     14 4E 05 A1 |  if_e	add	fp, #20
10748     A7 1E 02 AB |  if_e	rdlong	local01, fp
1074c     14 4E 85 A1 |  if_e	sub	fp, #20
10750     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10754     1C 00 90 5D |  if_ne	jmp	#LR__1295
10758     A7 64 02 FB | 	rdlong	muldiva_, fp
1075c     0C 4E 05 F1 | 	add	fp, #12
10760     A7 66 02 FB | 	rdlong	muldivb_, fp
10764     0C 4E 85 F1 | 	sub	fp, #12
10768     BA 00 A0 FD | 	call	#divide_
1076c     A7 66 62 FC | 	wrlong	muldivb_, fp
10770     10 00 90 FD | 	jmp	#LR__1296
10774                 | LR__1295
10774     A7 16 68 FC | 	wrlong	#11, fp
10778     08 4E 05 F1 | 	add	fp, #8
1077c     A7 FE 69 FC | 	wrlong	#255, fp
10780     08 4E 85 F1 | 	sub	fp, #8
10784                 | LR__1296
10784     A7 12 02 F6 | 	mov	arg01, fp
10788     B8 9A BF FD | 	call	#_push
1078c     A7 F0 03 F6 | 	mov	ptra, fp
10790     B2 00 A0 FD | 	call	#popregs_
10794                 | _do_div_ret
10794     2D 00 64 FD | 	ret
10798                 | 
10798                 | ' 
10798                 | ' sub do_fdiv 
10798                 | _do_fdiv
10798     02 4A 05 F6 | 	mov	COUNT_, #2
1079c     A8 00 A0 FD | 	call	#pushregs_
107a0     18 F0 07 F1 | 	add	ptra, #24
107a4     04 9A BF FD | 	call	#_pop
107a8     FD 14 02 F6 | 	mov	arg02, result1
107ac     FE 12 02 F6 | 	mov	arg01, result2
107b0     FF 1E 02 F6 | 	mov	local01, result3
107b4     0C 4E 05 F1 | 	add	fp, #12
107b8     A7 14 62 FC | 	wrlong	arg02, fp
107bc     04 4E 05 F1 | 	add	fp, #4
107c0     A7 12 62 FC | 	wrlong	arg01, fp
107c4     04 4E 05 F1 | 	add	fp, #4
107c8     A7 1E 62 FC | 	wrlong	local01, fp
107cc     14 4E 85 F1 | 	sub	fp, #20
107d0     D8 99 BF FD | 	call	#_pop
107d4     A7 FA 61 FC | 	wrlong	result1, fp
107d8     04 4E 05 F1 | 	add	fp, #4
107dc     A7 FC 61 FC | 	wrlong	result2, fp
107e0     04 4E 05 F1 | 	add	fp, #4
107e4     A7 FE 61 FC | 	wrlong	result3, fp
107e8                 | ' 
107e8                 | ' t2=pop()
107e8                 | ' t1=pop()
107e8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
107e8     08 4E 85 F1 | 	sub	fp, #8
107ec     1F FE 0D F2 | 	cmp	result3, #31 wz
107f0     14 4E 05 51 |  if_ne	add	fp, #20
107f4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
107f8     14 4E 85 51 |  if_ne	sub	fp, #20
107fc     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
10800     A7 14 68 AC |  if_e	wrlong	#10, fp
10804     08 4E 05 A1 |  if_e	add	fp, #8
10808     A7 FE 69 AC |  if_e	wrlong	#255, fp
1080c     08 4E 85 A1 |  if_e	sub	fp, #8
10810     38 01 90 AD |  if_e	jmp	#LR__1305
10814                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
10814     08 4E 05 F1 | 	add	fp, #8
10818     A7 14 02 FB | 	rdlong	arg02, fp
1081c     08 4E 85 F1 | 	sub	fp, #8
10820     1C 14 0E F2 | 	cmp	arg02, #28 wz
10824     28 00 90 5D |  if_ne	jmp	#LR__1300
10828     08 4E 05 F1 | 	add	fp, #8
1082c     A7 3C 68 FC | 	wrlong	#30, fp
10830     08 4E 85 F1 | 	sub	fp, #8
10834     A7 12 02 FB | 	rdlong	arg01, fp
10838     09 13 52 F6 | 	abs	arg01, arg01 wc
1083c     1F 20 C6 C9 |  if_b	decod	local02, #31
10840     00 20 06 36 |  if_ae	mov	local02, #0
10844     B4 EF B0 FD | 	call	#__system___float_fromuns
10848     10 FB 61 F5 | 	xor	result1, local02
1084c     A7 FA 61 FC | 	wrlong	result1, fp
10850                 | LR__1300
10850                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
10850     08 4E 05 F1 | 	add	fp, #8
10854     A7 14 02 FB | 	rdlong	arg02, fp
10858     08 4E 85 F1 | 	sub	fp, #8
1085c     1D 14 0E F2 | 	cmp	arg02, #29 wz
10860     18 00 90 5D |  if_ne	jmp	#LR__1301
10864     08 4E 05 F1 | 	add	fp, #8
10868     A7 3C 68 FC | 	wrlong	#30, fp
1086c     08 4E 85 F1 | 	sub	fp, #8
10870     A7 12 02 FB | 	rdlong	arg01, fp
10874     84 EF B0 FD | 	call	#__system___float_fromuns
10878     A7 FA 61 FC | 	wrlong	result1, fp
1087c                 | LR__1301
1087c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1087c     14 4E 05 F1 | 	add	fp, #20
10880     A7 14 02 FB | 	rdlong	arg02, fp
10884     14 4E 85 F1 | 	sub	fp, #20
10888     1C 14 0E F2 | 	cmp	arg02, #28 wz
1088c     34 00 90 5D |  if_ne	jmp	#LR__1302
10890     14 4E 05 F1 | 	add	fp, #20
10894     A7 3C 68 FC | 	wrlong	#30, fp
10898     08 4E 85 F1 | 	sub	fp, #8
1089c     A7 12 02 FB | 	rdlong	arg01, fp
108a0     0C 4E 85 F1 | 	sub	fp, #12
108a4     09 13 52 F6 | 	abs	arg01, arg01 wc
108a8     1F 20 C6 C9 |  if_b	decod	local02, #31
108ac     00 20 06 36 |  if_ae	mov	local02, #0
108b0     48 EF B0 FD | 	call	#__system___float_fromuns
108b4     10 FB 61 F5 | 	xor	result1, local02
108b8     0C 4E 05 F1 | 	add	fp, #12
108bc     A7 FA 61 FC | 	wrlong	result1, fp
108c0     0C 4E 85 F1 | 	sub	fp, #12
108c4                 | LR__1302
108c4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
108c4     14 4E 05 F1 | 	add	fp, #20
108c8     A7 14 02 FB | 	rdlong	arg02, fp
108cc     14 4E 85 F1 | 	sub	fp, #20
108d0     1D 14 0E F2 | 	cmp	arg02, #29 wz
108d4     24 00 90 5D |  if_ne	jmp	#LR__1303
108d8     14 4E 05 F1 | 	add	fp, #20
108dc     A7 3C 68 FC | 	wrlong	#30, fp
108e0     08 4E 85 F1 | 	sub	fp, #8
108e4     A7 12 02 FB | 	rdlong	arg01, fp
108e8     0C 4E 85 F1 | 	sub	fp, #12
108ec     0C EF B0 FD | 	call	#__system___float_fromuns
108f0     0C 4E 05 F1 | 	add	fp, #12
108f4     A7 FA 61 FC | 	wrlong	result1, fp
108f8     0C 4E 85 F1 | 	sub	fp, #12
108fc                 | LR__1303
108fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
108fc     08 4E 05 F1 | 	add	fp, #8
10900     A7 14 02 FB | 	rdlong	arg02, fp
10904     08 4E 85 F1 | 	sub	fp, #8
10908     1E 14 0E F2 | 	cmp	arg02, #30 wz
1090c     14 4E 05 A1 |  if_e	add	fp, #20
10910     A7 1E 02 AB |  if_e	rdlong	local01, fp
10914     14 4E 85 A1 |  if_e	sub	fp, #20
10918     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
1091c     1C 00 90 5D |  if_ne	jmp	#LR__1304
10920     A7 12 02 FB | 	rdlong	arg01, fp
10924     0C 4E 05 F1 | 	add	fp, #12
10928     A7 14 02 FB | 	rdlong	arg02, fp
1092c     0C 4E 85 F1 | 	sub	fp, #12
10930     D0 F4 B0 FD | 	call	#__system___float_div
10934     A7 FA 61 FC | 	wrlong	result1, fp
10938     10 00 90 FD | 	jmp	#LR__1305
1093c                 | LR__1304
1093c     A7 16 68 FC | 	wrlong	#11, fp
10940     08 4E 05 F1 | 	add	fp, #8
10944     A7 FE 69 FC | 	wrlong	#255, fp
10948     08 4E 85 F1 | 	sub	fp, #8
1094c                 | LR__1305
1094c     A7 12 02 F6 | 	mov	arg01, fp
10950     F0 98 BF FD | 	call	#_push
10954     A7 F0 03 F6 | 	mov	ptra, fp
10958     B2 00 A0 FD | 	call	#popregs_
1095c                 | _do_fdiv_ret
1095c     2D 00 64 FD | 	ret
10960                 | 
10960                 | ' 
10960                 | ' 
10960                 | ' sub do_mod 
10960                 | _do_mod
10960     01 4A 05 F6 | 	mov	COUNT_, #1
10964     A8 00 A0 FD | 	call	#pushregs_
10968     18 F0 07 F1 | 	add	ptra, #24
1096c     3C 98 BF FD | 	call	#_pop
10970     FD 66 02 F6 | 	mov	muldivb_, result1
10974     FE 64 02 F6 | 	mov	muldiva_, result2
10978     FF 1E 02 F6 | 	mov	local01, result3
1097c     0C 4E 05 F1 | 	add	fp, #12
10980     A7 66 62 FC | 	wrlong	muldivb_, fp
10984     04 4E 05 F1 | 	add	fp, #4
10988     A7 64 62 FC | 	wrlong	muldiva_, fp
1098c     04 4E 05 F1 | 	add	fp, #4
10990     A7 1E 62 FC | 	wrlong	local01, fp
10994     14 4E 85 F1 | 	sub	fp, #20
10998     10 98 BF FD | 	call	#_pop
1099c     A7 FA 61 FC | 	wrlong	result1, fp
109a0     04 4E 05 F1 | 	add	fp, #4
109a4     A7 FC 61 FC | 	wrlong	result2, fp
109a8     04 4E 05 F1 | 	add	fp, #4
109ac     A7 FE 61 FC | 	wrlong	result3, fp
109b0                 | ' 
109b0                 | ' t2=pop()
109b0                 | ' t1=pop()
109b0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
109b0     08 4E 85 F1 | 	sub	fp, #8
109b4     1F FE 0D F2 | 	cmp	result3, #31 wz
109b8     14 4E 05 51 |  if_ne	add	fp, #20
109bc     A7 12 02 5B |  if_ne	rdlong	arg01, fp
109c0     14 4E 85 51 |  if_ne	sub	fp, #20
109c4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
109c8     A7 14 68 AC |  if_e	wrlong	#10, fp
109cc     08 4E 05 A1 |  if_e	add	fp, #8
109d0     A7 FE 69 AC |  if_e	wrlong	#255, fp
109d4     08 4E 85 A1 |  if_e	sub	fp, #8
109d8     90 01 90 AD |  if_e	jmp	#LR__1316
109dc                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
109dc     08 4E 05 F1 | 	add	fp, #8
109e0     A7 66 02 FB | 	rdlong	muldivb_, fp
109e4     08 4E 85 F1 | 	sub	fp, #8
109e8     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
109ec     1C 00 90 5D |  if_ne	jmp	#LR__1310
109f0     08 4E 05 F1 | 	add	fp, #8
109f4     A7 38 68 FC | 	wrlong	#28, fp
109f8     08 4E 85 F1 | 	sub	fp, #8
109fc     A7 12 02 FB | 	rdlong	arg01, fp
10a00     00 14 06 F6 | 	mov	arg02, #0
10a04     C0 F6 B0 FD | 	call	#__system___float_tointeger
10a08     A7 FA 61 FC | 	wrlong	result1, fp
10a0c                 | LR__1310
10a0c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
10a0c     14 4E 05 F1 | 	add	fp, #20
10a10     A7 66 02 FB | 	rdlong	muldivb_, fp
10a14     14 4E 85 F1 | 	sub	fp, #20
10a18     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10a1c     28 00 90 5D |  if_ne	jmp	#LR__1311
10a20     14 4E 05 F1 | 	add	fp, #20
10a24     A7 38 68 FC | 	wrlong	#28, fp
10a28     08 4E 85 F1 | 	sub	fp, #8
10a2c     A7 12 02 FB | 	rdlong	arg01, fp
10a30     0C 4E 85 F1 | 	sub	fp, #12
10a34     00 14 06 F6 | 	mov	arg02, #0
10a38     8C F6 B0 FD | 	call	#__system___float_tointeger
10a3c     0C 4E 05 F1 | 	add	fp, #12
10a40     A7 FA 61 FC | 	wrlong	result1, fp
10a44     0C 4E 85 F1 | 	sub	fp, #12
10a48                 | LR__1311
10a48                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
10a48     08 4E 05 F1 | 	add	fp, #8
10a4c     A7 66 02 FB | 	rdlong	muldivb_, fp
10a50     08 4E 85 F1 | 	sub	fp, #8
10a54     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10a58     14 4E 05 A1 |  if_e	add	fp, #20
10a5c     A7 1E 02 AB |  if_e	rdlong	local01, fp
10a60     14 4E 85 A1 |  if_e	sub	fp, #20
10a64     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10a68     20 00 90 5D |  if_ne	jmp	#LR__1312
10a6c     0C 4E 05 F1 | 	add	fp, #12
10a70     A7 1E 02 FB | 	rdlong	local01, fp
10a74     0C 4E 85 F1 | 	sub	fp, #12
10a78     A7 66 02 FB | 	rdlong	muldivb_, fp
10a7c     0F 67 12 FD | 	qdiv	muldivb_, local01
10a80     19 1E 62 FD | 	getqy	local01
10a84     A7 1E 62 FC | 	wrlong	local01, fp
10a88     E0 00 90 FD | 	jmp	#LR__1316
10a8c                 | LR__1312
10a8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
10a8c     08 4E 05 F1 | 	add	fp, #8
10a90     A7 66 02 FB | 	rdlong	muldivb_, fp
10a94     08 4E 85 F1 | 	sub	fp, #8
10a98     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10a9c     14 4E 05 A1 |  if_e	add	fp, #20
10aa0     A7 1E 02 AB |  if_e	rdlong	local01, fp
10aa4     14 4E 85 A1 |  if_e	sub	fp, #20
10aa8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10aac     2C 00 90 5D |  if_ne	jmp	#LR__1313
10ab0     0C 4E 05 F1 | 	add	fp, #12
10ab4     A7 1E 02 FB | 	rdlong	local01, fp
10ab8     0C 4E 85 F1 | 	sub	fp, #12
10abc     A7 66 02 FB | 	rdlong	muldivb_, fp
10ac0     0F 67 12 FD | 	qdiv	muldivb_, local01
10ac4     19 1E 62 FD | 	getqy	local01
10ac8     A7 1E 62 FC | 	wrlong	local01, fp
10acc     08 4E 05 F1 | 	add	fp, #8
10ad0     A7 38 68 FC | 	wrlong	#28, fp
10ad4     08 4E 85 F1 | 	sub	fp, #8
10ad8     90 00 90 FD | 	jmp	#LR__1316
10adc                 | LR__1313
10adc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
10adc     08 4E 05 F1 | 	add	fp, #8
10ae0     A7 66 02 FB | 	rdlong	muldivb_, fp
10ae4     08 4E 85 F1 | 	sub	fp, #8
10ae8     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10aec     14 4E 05 A1 |  if_e	add	fp, #20
10af0     A7 1E 02 AB |  if_e	rdlong	local01, fp
10af4     14 4E 85 A1 |  if_e	sub	fp, #20
10af8     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10afc     1C 00 90 5D |  if_ne	jmp	#LR__1314
10b00     A7 64 02 FB | 	rdlong	muldiva_, fp
10b04     0C 4E 05 F1 | 	add	fp, #12
10b08     A7 66 02 FB | 	rdlong	muldivb_, fp
10b0c     0C 4E 85 F1 | 	sub	fp, #12
10b10     BA 00 A0 FD | 	call	#divide_
10b14     A7 64 62 FC | 	wrlong	muldiva_, fp
10b18     50 00 90 FD | 	jmp	#LR__1316
10b1c                 | LR__1314
10b1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
10b1c     08 4E 05 F1 | 	add	fp, #8
10b20     A7 66 02 FB | 	rdlong	muldivb_, fp
10b24     08 4E 85 F1 | 	sub	fp, #8
10b28     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10b2c     14 4E 05 A1 |  if_e	add	fp, #20
10b30     A7 1E 02 AB |  if_e	rdlong	local01, fp
10b34     14 4E 85 A1 |  if_e	sub	fp, #20
10b38     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10b3c     1C 00 90 5D |  if_ne	jmp	#LR__1315
10b40     A7 64 02 FB | 	rdlong	muldiva_, fp
10b44     0C 4E 05 F1 | 	add	fp, #12
10b48     A7 66 02 FB | 	rdlong	muldivb_, fp
10b4c     0C 4E 85 F1 | 	sub	fp, #12
10b50     BA 00 A0 FD | 	call	#divide_
10b54     A7 64 62 FC | 	wrlong	muldiva_, fp
10b58     10 00 90 FD | 	jmp	#LR__1316
10b5c                 | LR__1315
10b5c     A7 16 68 FC | 	wrlong	#11, fp
10b60     08 4E 05 F1 | 	add	fp, #8
10b64     A7 FE 69 FC | 	wrlong	#255, fp
10b68     08 4E 85 F1 | 	sub	fp, #8
10b6c                 | LR__1316
10b6c     A7 12 02 F6 | 	mov	arg01, fp
10b70     D0 96 BF FD | 	call	#_push
10b74     A7 F0 03 F6 | 	mov	ptra, fp
10b78     B2 00 A0 FD | 	call	#popregs_
10b7c                 | _do_mod_ret
10b7c     2D 00 64 FD | 	ret
10b80                 | 
10b80                 | ' 
10b80                 | ' sub do_shl 
10b80                 | _do_shl
10b80     03 4A 05 F6 | 	mov	COUNT_, #3
10b84     A8 00 A0 FD | 	call	#pushregs_
10b88     18 F0 07 F1 | 	add	ptra, #24
10b8c     1C 96 BF FD | 	call	#_pop
10b90     FD 12 02 F6 | 	mov	arg01, result1
10b94     FE 1E 02 F6 | 	mov	local01, result2
10b98     FF 20 02 F6 | 	mov	local02, result3
10b9c     0C 4E 05 F1 | 	add	fp, #12
10ba0     A7 12 62 FC | 	wrlong	arg01, fp
10ba4     04 4E 05 F1 | 	add	fp, #4
10ba8     A7 1E 62 FC | 	wrlong	local01, fp
10bac     04 4E 05 F1 | 	add	fp, #4
10bb0     A7 20 62 FC | 	wrlong	local02, fp
10bb4     14 4E 85 F1 | 	sub	fp, #20
10bb8     F0 95 BF FD | 	call	#_pop
10bbc     FF 22 02 F6 | 	mov	local03, result3
10bc0     A7 FA 61 FC | 	wrlong	result1, fp
10bc4     04 4E 05 F1 | 	add	fp, #4
10bc8     A7 FC 61 FC | 	wrlong	result2, fp
10bcc     04 4E 05 F1 | 	add	fp, #4
10bd0     A7 22 62 FC | 	wrlong	local03, fp
10bd4                 | ' 
10bd4                 | ' t2=pop()
10bd4                 | ' t1=pop()
10bd4                 | ' 
10bd4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10bd4     08 4E 85 F1 | 	sub	fp, #8
10bd8     1C 22 0E F2 | 	cmp	local03, #28 wz
10bdc     A7 22 02 AB |  if_e	rdlong	local03, fp
10be0     A7 22 62 AC |  if_e	wrlong	local03, fp
10be4     08 4E 05 A1 |  if_e	add	fp, #8
10be8     A7 3A 68 AC |  if_e	wrlong	#29, fp
10bec     08 4E 85 A1 |  if_e	sub	fp, #8
10bf0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10bf0     14 4E 05 F1 | 	add	fp, #20
10bf4     A7 22 02 FB | 	rdlong	local03, fp
10bf8     14 4E 85 F1 | 	sub	fp, #20
10bfc     1C 22 0E F2 | 	cmp	local03, #28 wz
10c00     18 00 90 5D |  if_ne	jmp	#LR__1320
10c04     0C 4E 05 F1 | 	add	fp, #12
10c08     A7 22 02 FB | 	rdlong	local03, fp
10c0c     A7 22 62 FC | 	wrlong	local03, fp
10c10     08 4E 05 F1 | 	add	fp, #8
10c14     A7 3A 68 FC | 	wrlong	#29, fp
10c18     14 4E 85 F1 | 	sub	fp, #20
10c1c                 | LR__1320
10c1c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
10c1c     08 4E 05 F1 | 	add	fp, #8
10c20     A7 22 02 FB | 	rdlong	local03, fp
10c24     08 4E 85 F1 | 	sub	fp, #8
10c28     1F 22 0E F2 | 	cmp	local03, #31 wz
10c2c     14 4E 05 51 |  if_ne	add	fp, #20
10c30     A7 20 02 5B |  if_ne	rdlong	local02, fp
10c34     14 4E 85 51 |  if_ne	sub	fp, #20
10c38     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10c3c     08 4E 05 51 |  if_ne	add	fp, #8
10c40     A7 22 02 5B |  if_ne	rdlong	local03, fp
10c44     08 4E 85 51 |  if_ne	sub	fp, #8
10c48     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10c4c     14 4E 05 51 |  if_ne	add	fp, #20
10c50     14 4E 85 51 |  if_ne	sub	fp, #20
10c54     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10c58     A7 0C 68 AC |  if_e	wrlong	#6, fp
10c5c     08 4E 05 A1 |  if_e	add	fp, #8
10c60     A7 FE 69 AC |  if_e	wrlong	#255, fp
10c64     08 4E 85 A1 |  if_e	sub	fp, #8
10c68     18 00 90 AD |  if_e	jmp	#LR__1321
10c6c     A7 22 02 FB | 	rdlong	local03, fp
10c70     0C 4E 05 F1 | 	add	fp, #12
10c74     A7 1E 02 FB | 	rdlong	local01, fp
10c78     0C 4E 85 F1 | 	sub	fp, #12
10c7c     0F 23 62 F0 | 	shl	local03, local01
10c80     A7 22 62 FC | 	wrlong	local03, fp
10c84                 | LR__1321
10c84     A7 12 02 F6 | 	mov	arg01, fp
10c88     B8 95 BF FD | 	call	#_push
10c8c     A7 F0 03 F6 | 	mov	ptra, fp
10c90     B2 00 A0 FD | 	call	#popregs_
10c94                 | _do_shl_ret
10c94     2D 00 64 FD | 	ret
10c98                 | 
10c98                 | ' 
10c98                 | ' sub do_shr 
10c98                 | _do_shr
10c98     03 4A 05 F6 | 	mov	COUNT_, #3
10c9c     A8 00 A0 FD | 	call	#pushregs_
10ca0     18 F0 07 F1 | 	add	ptra, #24
10ca4     04 95 BF FD | 	call	#_pop
10ca8     FD 12 02 F6 | 	mov	arg01, result1
10cac     FE 1E 02 F6 | 	mov	local01, result2
10cb0     FF 20 02 F6 | 	mov	local02, result3
10cb4     0C 4E 05 F1 | 	add	fp, #12
10cb8     A7 12 62 FC | 	wrlong	arg01, fp
10cbc     04 4E 05 F1 | 	add	fp, #4
10cc0     A7 1E 62 FC | 	wrlong	local01, fp
10cc4     04 4E 05 F1 | 	add	fp, #4
10cc8     A7 20 62 FC | 	wrlong	local02, fp
10ccc     14 4E 85 F1 | 	sub	fp, #20
10cd0     D8 94 BF FD | 	call	#_pop
10cd4     FF 22 02 F6 | 	mov	local03, result3
10cd8     A7 FA 61 FC | 	wrlong	result1, fp
10cdc     04 4E 05 F1 | 	add	fp, #4
10ce0     A7 FC 61 FC | 	wrlong	result2, fp
10ce4     04 4E 05 F1 | 	add	fp, #4
10ce8     A7 22 62 FC | 	wrlong	local03, fp
10cec                 | ' t2=pop()
10cec                 | ' t1=pop()
10cec                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10cec     08 4E 85 F1 | 	sub	fp, #8
10cf0     1C 22 0E F2 | 	cmp	local03, #28 wz
10cf4     A7 22 02 AB |  if_e	rdlong	local03, fp
10cf8     A7 22 62 AC |  if_e	wrlong	local03, fp
10cfc     08 4E 05 A1 |  if_e	add	fp, #8
10d00     A7 3A 68 AC |  if_e	wrlong	#29, fp
10d04     08 4E 85 A1 |  if_e	sub	fp, #8
10d08                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10d08     14 4E 05 F1 | 	add	fp, #20
10d0c     A7 22 02 FB | 	rdlong	local03, fp
10d10     14 4E 85 F1 | 	sub	fp, #20
10d14     1C 22 0E F2 | 	cmp	local03, #28 wz
10d18     18 00 90 5D |  if_ne	jmp	#LR__1330
10d1c     0C 4E 05 F1 | 	add	fp, #12
10d20     A7 22 02 FB | 	rdlong	local03, fp
10d24     A7 22 62 FC | 	wrlong	local03, fp
10d28     08 4E 05 F1 | 	add	fp, #8
10d2c     A7 3A 68 FC | 	wrlong	#29, fp
10d30     14 4E 85 F1 | 	sub	fp, #20
10d34                 | LR__1330
10d34                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
10d34     08 4E 05 F1 | 	add	fp, #8
10d38     A7 22 02 FB | 	rdlong	local03, fp
10d3c     08 4E 85 F1 | 	sub	fp, #8
10d40     1F 22 0E F2 | 	cmp	local03, #31 wz
10d44     14 4E 05 51 |  if_ne	add	fp, #20
10d48     A7 20 02 5B |  if_ne	rdlong	local02, fp
10d4c     14 4E 85 51 |  if_ne	sub	fp, #20
10d50     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10d54     08 4E 05 51 |  if_ne	add	fp, #8
10d58     A7 22 02 5B |  if_ne	rdlong	local03, fp
10d5c     08 4E 85 51 |  if_ne	sub	fp, #8
10d60     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10d64     14 4E 05 51 |  if_ne	add	fp, #20
10d68     14 4E 85 51 |  if_ne	sub	fp, #20
10d6c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10d70     A7 0C 68 AC |  if_e	wrlong	#6, fp
10d74     08 4E 05 A1 |  if_e	add	fp, #8
10d78     A7 FE 69 AC |  if_e	wrlong	#255, fp
10d7c     08 4E 85 A1 |  if_e	sub	fp, #8
10d80     18 00 90 AD |  if_e	jmp	#LR__1331
10d84     A7 22 02 FB | 	rdlong	local03, fp
10d88     0C 4E 05 F1 | 	add	fp, #12
10d8c     A7 1E 02 FB | 	rdlong	local01, fp
10d90     0C 4E 85 F1 | 	sub	fp, #12
10d94     0F 23 42 F0 | 	shr	local03, local01
10d98     A7 22 62 FC | 	wrlong	local03, fp
10d9c                 | LR__1331
10d9c     A7 12 02 F6 | 	mov	arg01, fp
10da0     A0 94 BF FD | 	call	#_push
10da4     A7 F0 03 F6 | 	mov	ptra, fp
10da8     B2 00 A0 FD | 	call	#popregs_
10dac                 | _do_shr_ret
10dac     2D 00 64 FD | 	ret
10db0                 | 
10db0                 | ' 
10db0                 | ' sub do_power 
10db0                 | _do_power
10db0     02 4A 05 F6 | 	mov	COUNT_, #2
10db4     A8 00 A0 FD | 	call	#pushregs_
10db8     18 F0 07 F1 | 	add	ptra, #24
10dbc     EC 93 BF FD | 	call	#_pop
10dc0     FD 14 02 F6 | 	mov	arg02, result1
10dc4     FE 12 02 F6 | 	mov	arg01, result2
10dc8     FF 1E 02 F6 | 	mov	local01, result3
10dcc     0C 4E 05 F1 | 	add	fp, #12
10dd0     A7 14 62 FC | 	wrlong	arg02, fp
10dd4     04 4E 05 F1 | 	add	fp, #4
10dd8     A7 12 62 FC | 	wrlong	arg01, fp
10ddc     04 4E 05 F1 | 	add	fp, #4
10de0     A7 1E 62 FC | 	wrlong	local01, fp
10de4     14 4E 85 F1 | 	sub	fp, #20
10de8     C0 93 BF FD | 	call	#_pop
10dec     A7 FA 61 FC | 	wrlong	result1, fp
10df0     04 4E 05 F1 | 	add	fp, #4
10df4     A7 FC 61 FC | 	wrlong	result2, fp
10df8     04 4E 05 F1 | 	add	fp, #4
10dfc     A7 FE 61 FC | 	wrlong	result3, fp
10e00                 | ' t2=pop()
10e00                 | ' t1=pop()
10e00                 | ' 
10e00                 | ' 
10e00                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
10e00     08 4E 85 F1 | 	sub	fp, #8
10e04     1F FE 0D F2 | 	cmp	result3, #31 wz
10e08     14 4E 05 51 |  if_ne	add	fp, #20
10e0c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10e10     14 4E 85 51 |  if_ne	sub	fp, #20
10e14     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
10e18     A7 18 68 AC |  if_e	wrlong	#12, fp
10e1c     08 4E 05 A1 |  if_e	add	fp, #8
10e20     A7 FE 69 AC |  if_e	wrlong	#255, fp
10e24     08 4E 85 A1 |  if_e	sub	fp, #8
10e28     38 01 90 AD |  if_e	jmp	#LR__1345
10e2c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
10e2c     08 4E 05 F1 | 	add	fp, #8
10e30     A7 14 02 FB | 	rdlong	arg02, fp
10e34     08 4E 85 F1 | 	sub	fp, #8
10e38     1C 14 0E F2 | 	cmp	arg02, #28 wz
10e3c     28 00 90 5D |  if_ne	jmp	#LR__1340
10e40     08 4E 05 F1 | 	add	fp, #8
10e44     A7 3C 68 FC | 	wrlong	#30, fp
10e48     08 4E 85 F1 | 	sub	fp, #8
10e4c     A7 12 02 FB | 	rdlong	arg01, fp
10e50     09 13 52 F6 | 	abs	arg01, arg01 wc
10e54     1F 20 C6 C9 |  if_b	decod	local02, #31
10e58     00 20 06 36 |  if_ae	mov	local02, #0
10e5c     9C E9 B0 FD | 	call	#__system___float_fromuns
10e60     10 FB 61 F5 | 	xor	result1, local02
10e64     A7 FA 61 FC | 	wrlong	result1, fp
10e68                 | LR__1340
10e68                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
10e68     08 4E 05 F1 | 	add	fp, #8
10e6c     A7 14 02 FB | 	rdlong	arg02, fp
10e70     08 4E 85 F1 | 	sub	fp, #8
10e74     1D 14 0E F2 | 	cmp	arg02, #29 wz
10e78     18 00 90 5D |  if_ne	jmp	#LR__1341
10e7c     08 4E 05 F1 | 	add	fp, #8
10e80     A7 3C 68 FC | 	wrlong	#30, fp
10e84     08 4E 85 F1 | 	sub	fp, #8
10e88     A7 12 02 FB | 	rdlong	arg01, fp
10e8c     6C E9 B0 FD | 	call	#__system___float_fromuns
10e90     A7 FA 61 FC | 	wrlong	result1, fp
10e94                 | LR__1341
10e94                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
10e94     14 4E 05 F1 | 	add	fp, #20
10e98     A7 14 02 FB | 	rdlong	arg02, fp
10e9c     14 4E 85 F1 | 	sub	fp, #20
10ea0     1C 14 0E F2 | 	cmp	arg02, #28 wz
10ea4     34 00 90 5D |  if_ne	jmp	#LR__1342
10ea8     14 4E 05 F1 | 	add	fp, #20
10eac     A7 3C 68 FC | 	wrlong	#30, fp
10eb0     08 4E 85 F1 | 	sub	fp, #8
10eb4     A7 12 02 FB | 	rdlong	arg01, fp
10eb8     0C 4E 85 F1 | 	sub	fp, #12
10ebc     09 13 52 F6 | 	abs	arg01, arg01 wc
10ec0     1F 20 C6 C9 |  if_b	decod	local02, #31
10ec4     00 20 06 36 |  if_ae	mov	local02, #0
10ec8     30 E9 B0 FD | 	call	#__system___float_fromuns
10ecc     10 FB 61 F5 | 	xor	result1, local02
10ed0     0C 4E 05 F1 | 	add	fp, #12
10ed4     A7 FA 61 FC | 	wrlong	result1, fp
10ed8     0C 4E 85 F1 | 	sub	fp, #12
10edc                 | LR__1342
10edc                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
10edc     14 4E 05 F1 | 	add	fp, #20
10ee0     A7 14 02 FB | 	rdlong	arg02, fp
10ee4     14 4E 85 F1 | 	sub	fp, #20
10ee8     1D 14 0E F2 | 	cmp	arg02, #29 wz
10eec     24 00 90 5D |  if_ne	jmp	#LR__1343
10ef0     14 4E 05 F1 | 	add	fp, #20
10ef4     A7 3C 68 FC | 	wrlong	#30, fp
10ef8     08 4E 85 F1 | 	sub	fp, #8
10efc     A7 12 02 FB | 	rdlong	arg01, fp
10f00     0C 4E 85 F1 | 	sub	fp, #12
10f04     F4 E8 B0 FD | 	call	#__system___float_fromuns
10f08     0C 4E 05 F1 | 	add	fp, #12
10f0c     A7 FA 61 FC | 	wrlong	result1, fp
10f10     0C 4E 85 F1 | 	sub	fp, #12
10f14                 | LR__1343
10f14                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
10f14     08 4E 05 F1 | 	add	fp, #8
10f18     A7 14 02 FB | 	rdlong	arg02, fp
10f1c     08 4E 85 F1 | 	sub	fp, #8
10f20     1E 14 0E F2 | 	cmp	arg02, #30 wz
10f24     14 4E 05 A1 |  if_e	add	fp, #20
10f28     A7 1E 02 AB |  if_e	rdlong	local01, fp
10f2c     14 4E 85 A1 |  if_e	sub	fp, #20
10f30     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
10f34     1C 00 90 5D |  if_ne	jmp	#LR__1344
10f38     A7 12 02 FB | 	rdlong	arg01, fp
10f3c     0C 4E 05 F1 | 	add	fp, #12
10f40     A7 14 02 FB | 	rdlong	arg02, fp
10f44     0C 4E 85 F1 | 	sub	fp, #12
10f48     98 FB B0 FD | 	call	#__system____builtin_powf
10f4c     A7 FA 61 FC | 	wrlong	result1, fp
10f50     10 00 90 FD | 	jmp	#LR__1345
10f54                 | LR__1344
10f54     A7 1A 68 FC | 	wrlong	#13, fp
10f58     08 4E 05 F1 | 	add	fp, #8
10f5c     A7 FE 69 FC | 	wrlong	#255, fp
10f60     08 4E 85 F1 | 	sub	fp, #8
10f64                 | LR__1345
10f64     A7 12 02 F6 | 	mov	arg01, fp
10f68     D8 92 BF FD | 	call	#_push
10f6c     A7 F0 03 F6 | 	mov	ptra, fp
10f70     B2 00 A0 FD | 	call	#popregs_
10f74                 | _do_power_ret
10f74     2D 00 64 FD | 	ret
10f78                 | 
10f78                 | ' 
10f78                 | ' 
10f78                 | ' sub do_eq
10f78                 | _do_eq
10f78     05 4A 05 F6 | 	mov	COUNT_, #5
10f7c     A8 00 A0 FD | 	call	#pushregs_
10f80     18 F0 07 F1 | 	add	ptra, #24
10f84     24 92 BF FD | 	call	#_pop
10f88     FD 1E 02 F6 | 	mov	local01, result1
10f8c     FE 20 02 F6 | 	mov	local02, result2
10f90     FF 22 02 F6 | 	mov	local03, result3
10f94     0C 4E 05 F1 | 	add	fp, #12
10f98     A7 1E 62 FC | 	wrlong	local01, fp
10f9c     04 4E 05 F1 | 	add	fp, #4
10fa0     A7 20 62 FC | 	wrlong	local02, fp
10fa4     04 4E 05 F1 | 	add	fp, #4
10fa8     A7 22 62 FC | 	wrlong	local03, fp
10fac     14 4E 85 F1 | 	sub	fp, #20
10fb0     F8 91 BF FD | 	call	#_pop
10fb4     FF 22 02 F6 | 	mov	local03, result3
10fb8     A7 FA 61 FC | 	wrlong	result1, fp
10fbc     04 4E 05 F1 | 	add	fp, #4
10fc0     A7 FC 61 FC | 	wrlong	result2, fp
10fc4     04 4E 05 F1 | 	add	fp, #4
10fc8     A7 22 62 FC | 	wrlong	local03, fp
10fcc                 | ' t2=pop()
10fcc                 | ' t1=pop()
10fcc                 | ' 
10fcc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
10fcc     08 4E 85 F1 | 	sub	fp, #8
10fd0     1F 22 0E F2 | 	cmp	local03, #31 wz
10fd4     14 4E 05 A1 |  if_e	add	fp, #20
10fd8     A7 24 02 AB |  if_e	rdlong	local04, fp
10fdc     14 4E 85 A1 |  if_e	sub	fp, #20
10fe0     12 23 02 A6 |  if_e	mov	local03, local04
10fe4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10fe8     28 00 90 5D |  if_ne	jmp	#LR__1350
10fec     00 1E 06 F6 | 	mov	local01, #0
10ff0     A7 12 02 FB | 	rdlong	arg01, fp
10ff4     0C 4E 05 F1 | 	add	fp, #12
10ff8     A7 14 02 FB | 	rdlong	arg02, fp
10ffc     0C 4E 85 F1 | 	sub	fp, #12
11000     A8 C0 B0 FD | 	call	#__system___string_cmp
11004     00 FA 0D F2 | 	cmp	result1, #0 wz
11008     00 1E 26 A6 |  if_e	not	local01, #0
1100c     A7 1E 62 FC | 	wrlong	local01, fp
11010     1C 04 90 FD | 	jmp	#LR__1363
11014                 | LR__1350
11014                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
11014     08 4E 05 F1 | 	add	fp, #8
11018     A7 1E 02 FB | 	rdlong	local01, fp
1101c     08 4E 85 F1 | 	sub	fp, #8
11020     1E 1E 0E F2 | 	cmp	local01, #30 wz
11024     14 4E 05 A1 |  if_e	add	fp, #20
11028     A7 24 02 AB |  if_e	rdlong	local04, fp
1102c     14 4E 85 A1 |  if_e	sub	fp, #20
11030     12 23 02 A6 |  if_e	mov	local03, local04
11034     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11038     2C 00 90 5D |  if_ne	jmp	#LR__1351
1103c     00 1E 06 F6 | 	mov	local01, #0
11040     A7 12 02 FB | 	rdlong	arg01, fp
11044     0C 4E 05 F1 | 	add	fp, #12
11048     A7 14 02 FB | 	rdlong	arg02, fp
1104c     0C 4E 85 F1 | 	sub	fp, #12
11050     01 16 06 F6 | 	mov	arg03, #1
11054     DC EF B0 FD | 	call	#__system___float_cmp
11058     00 FA 0D F2 | 	cmp	result1, #0 wz
1105c     00 1E 26 A6 |  if_e	not	local01, #0
11060     A7 1E 62 FC | 	wrlong	local01, fp
11064     C8 03 90 FD | 	jmp	#LR__1363
11068                 | LR__1351
11068                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
11068     08 4E 05 F1 | 	add	fp, #8
1106c     A7 1E 02 FB | 	rdlong	local01, fp
11070     08 4E 85 F1 | 	sub	fp, #8
11074     1E 1E 0E F2 | 	cmp	local01, #30 wz
11078     14 4E 05 A1 |  if_e	add	fp, #20
1107c     A7 24 02 AB |  if_e	rdlong	local04, fp
11080     14 4E 85 A1 |  if_e	sub	fp, #20
11084     12 23 02 A6 |  if_e	mov	local03, local04
11088     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1108c     48 00 90 5D |  if_ne	jmp	#LR__1352
11090     00 1E 06 F6 | 	mov	local01, #0
11094     A7 20 02 FB | 	rdlong	local02, fp
11098     0C 4E 05 F1 | 	add	fp, #12
1109c     A7 12 02 FB | 	rdlong	arg01, fp
110a0     0C 4E 85 F1 | 	sub	fp, #12
110a4     09 13 52 F6 | 	abs	arg01, arg01 wc
110a8     1F 26 C6 C9 |  if_b	decod	local05, #31
110ac     00 26 06 36 |  if_ae	mov	local05, #0
110b0     48 E7 B0 FD | 	call	#__system___float_fromuns
110b4     13 FB 61 F5 | 	xor	result1, local05
110b8     FD 14 02 F6 | 	mov	arg02, result1
110bc     10 13 02 F6 | 	mov	arg01, local02
110c0     01 16 06 F6 | 	mov	arg03, #1
110c4     6C EF B0 FD | 	call	#__system___float_cmp
110c8     00 FA 0D F2 | 	cmp	result1, #0 wz
110cc     00 1E 26 A6 |  if_e	not	local01, #0
110d0     A7 1E 62 FC | 	wrlong	local01, fp
110d4     58 03 90 FD | 	jmp	#LR__1363
110d8                 | LR__1352
110d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
110d8     08 4E 05 F1 | 	add	fp, #8
110dc     A7 1E 02 FB | 	rdlong	local01, fp
110e0     08 4E 85 F1 | 	sub	fp, #8
110e4     1E 1E 0E F2 | 	cmp	local01, #30 wz
110e8     14 4E 05 A1 |  if_e	add	fp, #20
110ec     A7 24 02 AB |  if_e	rdlong	local04, fp
110f0     14 4E 85 A1 |  if_e	sub	fp, #20
110f4     12 23 02 A6 |  if_e	mov	local03, local04
110f8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
110fc     38 00 90 5D |  if_ne	jmp	#LR__1353
11100     00 1E 06 F6 | 	mov	local01, #0
11104     A7 20 02 FB | 	rdlong	local02, fp
11108     0C 4E 05 F1 | 	add	fp, #12
1110c     A7 12 02 FB | 	rdlong	arg01, fp
11110     0C 4E 85 F1 | 	sub	fp, #12
11114     E4 E6 B0 FD | 	call	#__system___float_fromuns
11118     FD 14 02 F6 | 	mov	arg02, result1
1111c     10 13 02 F6 | 	mov	arg01, local02
11120     01 16 06 F6 | 	mov	arg03, #1
11124     0C EF B0 FD | 	call	#__system___float_cmp
11128     00 FA 0D F2 | 	cmp	result1, #0 wz
1112c     00 1E 26 A6 |  if_e	not	local01, #0
11130     A7 1E 62 FC | 	wrlong	local01, fp
11134     F8 02 90 FD | 	jmp	#LR__1363
11138                 | LR__1353
11138                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
11138     08 4E 05 F1 | 	add	fp, #8
1113c     A7 1E 02 FB | 	rdlong	local01, fp
11140     08 4E 85 F1 | 	sub	fp, #8
11144     1C 1E 0E F2 | 	cmp	local01, #28 wz
11148     14 4E 05 A1 |  if_e	add	fp, #20
1114c     A7 24 02 AB |  if_e	rdlong	local04, fp
11150     14 4E 85 A1 |  if_e	sub	fp, #20
11154     12 23 02 A6 |  if_e	mov	local03, local04
11158     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1115c     44 00 90 5D |  if_ne	jmp	#LR__1354
11160     00 1E 06 F6 | 	mov	local01, #0
11164     A7 12 02 FB | 	rdlong	arg01, fp
11168     09 13 52 F6 | 	abs	arg01, arg01 wc
1116c     1F 26 C6 C9 |  if_b	decod	local05, #31
11170     00 26 06 36 |  if_ae	mov	local05, #0
11174     84 E6 B0 FD | 	call	#__system___float_fromuns
11178     13 FB 61 F5 | 	xor	result1, local05
1117c     FD 12 02 F6 | 	mov	arg01, result1
11180     0C 4E 05 F1 | 	add	fp, #12
11184     A7 14 02 FB | 	rdlong	arg02, fp
11188     0C 4E 85 F1 | 	sub	fp, #12
1118c     01 16 06 F6 | 	mov	arg03, #1
11190     A0 EE B0 FD | 	call	#__system___float_cmp
11194     00 FA 0D F2 | 	cmp	result1, #0 wz
11198     00 1E 26 A6 |  if_e	not	local01, #0
1119c     A7 1E 62 FC | 	wrlong	local01, fp
111a0     8C 02 90 FD | 	jmp	#LR__1363
111a4                 | LR__1354
111a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
111a4     08 4E 05 F1 | 	add	fp, #8
111a8     A7 1E 02 FB | 	rdlong	local01, fp
111ac     08 4E 85 F1 | 	sub	fp, #8
111b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
111b4     14 4E 05 A1 |  if_e	add	fp, #20
111b8     A7 24 02 AB |  if_e	rdlong	local04, fp
111bc     14 4E 85 A1 |  if_e	sub	fp, #20
111c0     12 23 02 A6 |  if_e	mov	local03, local04
111c4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
111c8     24 00 90 5D |  if_ne	jmp	#LR__1355
111cc     00 1E 06 F6 | 	mov	local01, #0
111d0     A7 20 02 FB | 	rdlong	local02, fp
111d4     0C 4E 05 F1 | 	add	fp, #12
111d8     A7 22 02 FB | 	rdlong	local03, fp
111dc     0C 4E 85 F1 | 	sub	fp, #12
111e0     11 21 0A F2 | 	cmp	local02, local03 wz
111e4     01 1E 66 A6 |  if_e	neg	local01, #1
111e8     A7 1E 62 FC | 	wrlong	local01, fp
111ec     40 02 90 FD | 	jmp	#LR__1363
111f0                 | LR__1355
111f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
111f0     08 4E 05 F1 | 	add	fp, #8
111f4     A7 1E 02 FB | 	rdlong	local01, fp
111f8     08 4E 85 F1 | 	sub	fp, #8
111fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
11200     14 4E 05 A1 |  if_e	add	fp, #20
11204     A7 24 02 AB |  if_e	rdlong	local04, fp
11208     14 4E 85 A1 |  if_e	sub	fp, #20
1120c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11210     24 00 90 5D |  if_ne	jmp	#LR__1356
11214     00 1E 06 F6 | 	mov	local01, #0
11218     A7 20 02 FB | 	rdlong	local02, fp
1121c     0C 4E 05 F1 | 	add	fp, #12
11220     A7 22 02 FB | 	rdlong	local03, fp
11224     0C 4E 85 F1 | 	sub	fp, #12
11228     11 21 0A F2 | 	cmp	local02, local03 wz
1122c     01 1E 66 A6 |  if_e	neg	local01, #1
11230     A7 1E 62 FC | 	wrlong	local01, fp
11234     F8 01 90 FD | 	jmp	#LR__1363
11238                 | LR__1356
11238                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
11238     08 4E 05 F1 | 	add	fp, #8
1123c     A7 1E 02 FB | 	rdlong	local01, fp
11240     08 4E 85 F1 | 	sub	fp, #8
11244     1D 1E 0E F2 | 	cmp	local01, #29 wz
11248     14 4E 05 A1 |  if_e	add	fp, #20
1124c     A7 22 02 AB |  if_e	rdlong	local03, fp
11250     14 4E 85 A1 |  if_e	sub	fp, #20
11254     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11258     34 00 90 5D |  if_ne	jmp	#LR__1357
1125c     00 1E 06 F6 | 	mov	local01, #0
11260     A7 12 02 FB | 	rdlong	arg01, fp
11264     94 E5 B0 FD | 	call	#__system___float_fromuns
11268     FD 12 02 F6 | 	mov	arg01, result1
1126c     0C 4E 05 F1 | 	add	fp, #12
11270     A7 14 02 FB | 	rdlong	arg02, fp
11274     0C 4E 85 F1 | 	sub	fp, #12
11278     01 16 06 F6 | 	mov	arg03, #1
1127c     B4 ED B0 FD | 	call	#__system___float_cmp
11280     00 FA 0D F2 | 	cmp	result1, #0 wz
11284     00 1E 26 A6 |  if_e	not	local01, #0
11288     A7 1E 62 FC | 	wrlong	local01, fp
1128c     A0 01 90 FD | 	jmp	#LR__1363
11290                 | LR__1357
11290                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
11290     08 4E 05 F1 | 	add	fp, #8
11294     A7 1E 02 FB | 	rdlong	local01, fp
11298     08 4E 85 F1 | 	sub	fp, #8
1129c     1D 1E 0E F2 | 	cmp	local01, #29 wz
112a0     14 4E 05 A1 |  if_e	add	fp, #20
112a4     A7 22 02 AB |  if_e	rdlong	local03, fp
112a8     14 4E 85 A1 |  if_e	sub	fp, #20
112ac     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
112b0     24 00 90 5D |  if_ne	jmp	#LR__1358
112b4     00 1E 06 F6 | 	mov	local01, #0
112b8     A7 20 02 FB | 	rdlong	local02, fp
112bc     0C 4E 05 F1 | 	add	fp, #12
112c0     A7 22 02 FB | 	rdlong	local03, fp
112c4     0C 4E 85 F1 | 	sub	fp, #12
112c8     11 21 0A F2 | 	cmp	local02, local03 wz
112cc     01 1E 66 A6 |  if_e	neg	local01, #1
112d0     A7 1E 62 FC | 	wrlong	local01, fp
112d4     58 01 90 FD | 	jmp	#LR__1363
112d8                 | LR__1358
112d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
112d8     08 4E 05 F1 | 	add	fp, #8
112dc     A7 1E 02 FB | 	rdlong	local01, fp
112e0     08 4E 85 F1 | 	sub	fp, #8
112e4     1D 1E 0E F2 | 	cmp	local01, #29 wz
112e8     14 4E 05 A1 |  if_e	add	fp, #20
112ec     A7 22 02 AB |  if_e	rdlong	local03, fp
112f0     14 4E 85 A1 |  if_e	sub	fp, #20
112f4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
112f8     24 00 90 5D |  if_ne	jmp	#LR__1359
112fc     00 1E 06 F6 | 	mov	local01, #0
11300     A7 20 02 FB | 	rdlong	local02, fp
11304     0C 4E 05 F1 | 	add	fp, #12
11308     A7 22 02 FB | 	rdlong	local03, fp
1130c     0C 4E 85 F1 | 	sub	fp, #12
11310     11 21 0A F2 | 	cmp	local02, local03 wz
11314     01 1E 66 A6 |  if_e	neg	local01, #1
11318     A7 1E 62 FC | 	wrlong	local01, fp
1131c     10 01 90 FD | 	jmp	#LR__1363
11320                 | LR__1359
11320                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
11320     08 4E 05 F1 | 	add	fp, #8
11324     A7 1E 02 FB | 	rdlong	local01, fp
11328     08 4E 85 F1 | 	sub	fp, #8
1132c     2B 1E 0E F2 | 	cmp	local01, #43 wz
11330     14 4E 05 A1 |  if_e	add	fp, #20
11334     A7 22 02 AB |  if_e	rdlong	local03, fp
11338     14 4E 85 A1 |  if_e	sub	fp, #20
1133c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11340     30 00 90 5D |  if_ne	jmp	#LR__1360
11344     00 1E 06 F6 | 	mov	local01, #0
11348     A7 12 02 FB | 	rdlong	arg01, fp
1134c     04 D1 BF FD | 	call	#_convertstring
11350     FD 12 02 F6 | 	mov	arg01, result1
11354     0C 4E 05 F1 | 	add	fp, #12
11358     A7 14 02 FB | 	rdlong	arg02, fp
1135c     0C 4E 85 F1 | 	sub	fp, #12
11360     48 BD B0 FD | 	call	#__system___string_cmp
11364     00 FA 0D F2 | 	cmp	result1, #0 wz
11368     00 1E 26 A6 |  if_e	not	local01, #0
1136c     A7 1E 62 FC | 	wrlong	local01, fp
11370     BC 00 90 FD | 	jmp	#LR__1363
11374                 | LR__1360
11374                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
11374     08 4E 05 F1 | 	add	fp, #8
11378     A7 1E 02 FB | 	rdlong	local01, fp
1137c     08 4E 85 F1 | 	sub	fp, #8
11380     1F 1E 0E F2 | 	cmp	local01, #31 wz
11384     14 4E 05 A1 |  if_e	add	fp, #20
11388     A7 22 02 AB |  if_e	rdlong	local03, fp
1138c     14 4E 85 A1 |  if_e	sub	fp, #20
11390     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11394     34 00 90 5D |  if_ne	jmp	#LR__1361
11398     00 1E 06 F6 | 	mov	local01, #0
1139c     A7 20 02 FB | 	rdlong	local02, fp
113a0     0C 4E 05 F1 | 	add	fp, #12
113a4     A7 12 02 FB | 	rdlong	arg01, fp
113a8     0C 4E 85 F1 | 	sub	fp, #12
113ac     A4 D0 BF FD | 	call	#_convertstring
113b0     FD 14 02 F6 | 	mov	arg02, result1
113b4     10 13 02 F6 | 	mov	arg01, local02
113b8     F0 BC B0 FD | 	call	#__system___string_cmp
113bc     00 FA 0D F2 | 	cmp	result1, #0 wz
113c0     00 1E 26 A6 |  if_e	not	local01, #0
113c4     A7 1E 62 FC | 	wrlong	local01, fp
113c8     64 00 90 FD | 	jmp	#LR__1363
113cc                 | LR__1361
113cc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
113cc     08 4E 05 F1 | 	add	fp, #8
113d0     A7 1E 02 FB | 	rdlong	local01, fp
113d4     08 4E 85 F1 | 	sub	fp, #8
113d8     2B 1E 0E F2 | 	cmp	local01, #43 wz
113dc     14 4E 05 A1 |  if_e	add	fp, #20
113e0     A7 22 02 AB |  if_e	rdlong	local03, fp
113e4     14 4E 85 A1 |  if_e	sub	fp, #20
113e8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
113ec     3C 00 90 5D |  if_ne	jmp	#LR__1362
113f0     00 1E 06 F6 | 	mov	local01, #0
113f4     A7 12 02 FB | 	rdlong	arg01, fp
113f8     58 D0 BF FD | 	call	#_convertstring
113fc     FD 20 02 F6 | 	mov	local02, result1
11400     0C 4E 05 F1 | 	add	fp, #12
11404     A7 12 02 FB | 	rdlong	arg01, fp
11408     0C 4E 85 F1 | 	sub	fp, #12
1140c     44 D0 BF FD | 	call	#_convertstring
11410     FD 14 02 F6 | 	mov	arg02, result1
11414     10 13 02 F6 | 	mov	arg01, local02
11418     90 BC B0 FD | 	call	#__system___string_cmp
1141c     00 FA 0D F2 | 	cmp	result1, #0 wz
11420     00 1E 26 A6 |  if_e	not	local01, #0
11424     A7 1E 62 FC | 	wrlong	local01, fp
11428     04 00 90 FD | 	jmp	#LR__1363
1142c                 | LR__1362
1142c     A7 00 68 FC | 	wrlong	#0, fp
11430                 | LR__1363
11430     08 4E 05 F1 | 	add	fp, #8
11434     A7 38 68 FC | 	wrlong	#28, fp
11438     08 4E 85 F1 | 	sub	fp, #8
1143c     A7 12 02 F6 | 	mov	arg01, fp
11440     00 8E BF FD | 	call	#_push
11444     A7 F0 03 F6 | 	mov	ptra, fp
11448     B2 00 A0 FD | 	call	#popregs_
1144c                 | _do_eq_ret
1144c     2D 00 64 FD | 	ret
11450                 | 
11450                 | ' 
11450                 | ' sub do_gt
11450                 | _do_gt
11450     05 4A 05 F6 | 	mov	COUNT_, #5
11454     A8 00 A0 FD | 	call	#pushregs_
11458     18 F0 07 F1 | 	add	ptra, #24
1145c     4C 8D BF FD | 	call	#_pop
11460     FD 1E 02 F6 | 	mov	local01, result1
11464     FE 20 02 F6 | 	mov	local02, result2
11468     FF 22 02 F6 | 	mov	local03, result3
1146c     0C 4E 05 F1 | 	add	fp, #12
11470     A7 1E 62 FC | 	wrlong	local01, fp
11474     04 4E 05 F1 | 	add	fp, #4
11478     A7 20 62 FC | 	wrlong	local02, fp
1147c     04 4E 05 F1 | 	add	fp, #4
11480     A7 22 62 FC | 	wrlong	local03, fp
11484     14 4E 85 F1 | 	sub	fp, #20
11488     20 8D BF FD | 	call	#_pop
1148c     FF 22 02 F6 | 	mov	local03, result3
11490     A7 FA 61 FC | 	wrlong	result1, fp
11494     04 4E 05 F1 | 	add	fp, #4
11498     A7 FC 61 FC | 	wrlong	result2, fp
1149c     04 4E 05 F1 | 	add	fp, #4
114a0     A7 22 62 FC | 	wrlong	local03, fp
114a4                 | ' t2=pop()
114a4                 | ' t1=pop()
114a4                 | ' 
114a4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
114a4     08 4E 85 F1 | 	sub	fp, #8
114a8     1F 22 0E F2 | 	cmp	local03, #31 wz
114ac     14 4E 05 A1 |  if_e	add	fp, #20
114b0     A7 24 02 AB |  if_e	rdlong	local04, fp
114b4     14 4E 85 A1 |  if_e	sub	fp, #20
114b8     12 23 02 A6 |  if_e	mov	local03, local04
114bc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
114c0     28 00 90 5D |  if_ne	jmp	#LR__1370
114c4     00 1E 06 F6 | 	mov	local01, #0
114c8     A7 12 02 FB | 	rdlong	arg01, fp
114cc     0C 4E 05 F1 | 	add	fp, #12
114d0     A7 14 02 FB | 	rdlong	arg02, fp
114d4     0C 4E 85 F1 | 	sub	fp, #12
114d8     D0 BB B0 FD | 	call	#__system___string_cmp
114dc     01 FA 55 F2 | 	cmps	result1, #1 wc
114e0     00 1E 26 36 |  if_ae	not	local01, #0
114e4     A7 1E 62 FC | 	wrlong	local01, fp
114e8     1C 04 90 FD | 	jmp	#LR__1383
114ec                 | LR__1370
114ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
114ec     08 4E 05 F1 | 	add	fp, #8
114f0     A7 1E 02 FB | 	rdlong	local01, fp
114f4     08 4E 85 F1 | 	sub	fp, #8
114f8     1E 1E 0E F2 | 	cmp	local01, #30 wz
114fc     14 4E 05 A1 |  if_e	add	fp, #20
11500     A7 24 02 AB |  if_e	rdlong	local04, fp
11504     14 4E 85 A1 |  if_e	sub	fp, #20
11508     12 23 02 A6 |  if_e	mov	local03, local04
1150c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11510     2C 00 90 5D |  if_ne	jmp	#LR__1371
11514     00 1E 06 F6 | 	mov	local01, #0
11518     A7 12 02 FB | 	rdlong	arg01, fp
1151c     0C 4E 05 F1 | 	add	fp, #12
11520     A7 14 02 FB | 	rdlong	arg02, fp
11524     0C 4E 85 F1 | 	sub	fp, #12
11528     01 16 66 F6 | 	neg	arg03, #1
1152c     04 EB B0 FD | 	call	#__system___float_cmp
11530     01 FA 55 F2 | 	cmps	result1, #1 wc
11534     00 1E 26 36 |  if_ae	not	local01, #0
11538     A7 1E 62 FC | 	wrlong	local01, fp
1153c     C8 03 90 FD | 	jmp	#LR__1383
11540                 | LR__1371
11540                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
11540     08 4E 05 F1 | 	add	fp, #8
11544     A7 1E 02 FB | 	rdlong	local01, fp
11548     08 4E 85 F1 | 	sub	fp, #8
1154c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11550     14 4E 05 A1 |  if_e	add	fp, #20
11554     A7 24 02 AB |  if_e	rdlong	local04, fp
11558     14 4E 85 A1 |  if_e	sub	fp, #20
1155c     12 23 02 A6 |  if_e	mov	local03, local04
11560     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11564     48 00 90 5D |  if_ne	jmp	#LR__1372
11568     00 1E 06 F6 | 	mov	local01, #0
1156c     A7 20 02 FB | 	rdlong	local02, fp
11570     0C 4E 05 F1 | 	add	fp, #12
11574     A7 12 02 FB | 	rdlong	arg01, fp
11578     0C 4E 85 F1 | 	sub	fp, #12
1157c     09 13 52 F6 | 	abs	arg01, arg01 wc
11580     1F 26 C6 C9 |  if_b	decod	local05, #31
11584     00 26 06 36 |  if_ae	mov	local05, #0
11588     70 E2 B0 FD | 	call	#__system___float_fromuns
1158c     13 FB 61 F5 | 	xor	result1, local05
11590     FD 14 02 F6 | 	mov	arg02, result1
11594     10 13 02 F6 | 	mov	arg01, local02
11598     01 16 66 F6 | 	neg	arg03, #1
1159c     94 EA B0 FD | 	call	#__system___float_cmp
115a0     01 FA 55 F2 | 	cmps	result1, #1 wc
115a4     00 1E 26 36 |  if_ae	not	local01, #0
115a8     A7 1E 62 FC | 	wrlong	local01, fp
115ac     58 03 90 FD | 	jmp	#LR__1383
115b0                 | LR__1372
115b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
115b0     08 4E 05 F1 | 	add	fp, #8
115b4     A7 1E 02 FB | 	rdlong	local01, fp
115b8     08 4E 85 F1 | 	sub	fp, #8
115bc     1E 1E 0E F2 | 	cmp	local01, #30 wz
115c0     14 4E 05 A1 |  if_e	add	fp, #20
115c4     A7 24 02 AB |  if_e	rdlong	local04, fp
115c8     14 4E 85 A1 |  if_e	sub	fp, #20
115cc     12 23 02 A6 |  if_e	mov	local03, local04
115d0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
115d4     38 00 90 5D |  if_ne	jmp	#LR__1373
115d8     00 1E 06 F6 | 	mov	local01, #0
115dc     A7 20 02 FB | 	rdlong	local02, fp
115e0     0C 4E 05 F1 | 	add	fp, #12
115e4     A7 12 02 FB | 	rdlong	arg01, fp
115e8     0C 4E 85 F1 | 	sub	fp, #12
115ec     0C E2 B0 FD | 	call	#__system___float_fromuns
115f0     FD 14 02 F6 | 	mov	arg02, result1
115f4     10 13 02 F6 | 	mov	arg01, local02
115f8     01 16 66 F6 | 	neg	arg03, #1
115fc     34 EA B0 FD | 	call	#__system___float_cmp
11600     01 FA 55 F2 | 	cmps	result1, #1 wc
11604     00 1E 26 36 |  if_ae	not	local01, #0
11608     A7 1E 62 FC | 	wrlong	local01, fp
1160c     F8 02 90 FD | 	jmp	#LR__1383
11610                 | LR__1373
11610                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
11610     08 4E 05 F1 | 	add	fp, #8
11614     A7 1E 02 FB | 	rdlong	local01, fp
11618     08 4E 85 F1 | 	sub	fp, #8
1161c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11620     14 4E 05 A1 |  if_e	add	fp, #20
11624     A7 24 02 AB |  if_e	rdlong	local04, fp
11628     14 4E 85 A1 |  if_e	sub	fp, #20
1162c     12 23 02 A6 |  if_e	mov	local03, local04
11630     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11634     44 00 90 5D |  if_ne	jmp	#LR__1374
11638     00 1E 06 F6 | 	mov	local01, #0
1163c     A7 12 02 FB | 	rdlong	arg01, fp
11640     09 13 52 F6 | 	abs	arg01, arg01 wc
11644     1F 26 C6 C9 |  if_b	decod	local05, #31
11648     00 26 06 36 |  if_ae	mov	local05, #0
1164c     AC E1 B0 FD | 	call	#__system___float_fromuns
11650     13 FB 61 F5 | 	xor	result1, local05
11654     FD 12 02 F6 | 	mov	arg01, result1
11658     0C 4E 05 F1 | 	add	fp, #12
1165c     A7 14 02 FB | 	rdlong	arg02, fp
11660     0C 4E 85 F1 | 	sub	fp, #12
11664     01 16 66 F6 | 	neg	arg03, #1
11668     C8 E9 B0 FD | 	call	#__system___float_cmp
1166c     01 FA 55 F2 | 	cmps	result1, #1 wc
11670     00 1E 26 36 |  if_ae	not	local01, #0
11674     A7 1E 62 FC | 	wrlong	local01, fp
11678     8C 02 90 FD | 	jmp	#LR__1383
1167c                 | LR__1374
1167c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1167c     08 4E 05 F1 | 	add	fp, #8
11680     A7 1E 02 FB | 	rdlong	local01, fp
11684     08 4E 85 F1 | 	sub	fp, #8
11688     1C 1E 0E F2 | 	cmp	local01, #28 wz
1168c     14 4E 05 A1 |  if_e	add	fp, #20
11690     A7 24 02 AB |  if_e	rdlong	local04, fp
11694     14 4E 85 A1 |  if_e	sub	fp, #20
11698     12 23 02 A6 |  if_e	mov	local03, local04
1169c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
116a0     24 00 90 5D |  if_ne	jmp	#LR__1375
116a4     00 1E 06 F6 | 	mov	local01, #0
116a8     A7 20 02 FB | 	rdlong	local02, fp
116ac     0C 4E 05 F1 | 	add	fp, #12
116b0     A7 22 02 FB | 	rdlong	local03, fp
116b4     0C 4E 85 F1 | 	sub	fp, #12
116b8     11 21 5A F2 | 	cmps	local02, local03 wcz
116bc     01 1E 66 16 |  if_a	neg	local01, #1
116c0     A7 1E 62 FC | 	wrlong	local01, fp
116c4     40 02 90 FD | 	jmp	#LR__1383
116c8                 | LR__1375
116c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
116c8     08 4E 05 F1 | 	add	fp, #8
116cc     A7 1E 02 FB | 	rdlong	local01, fp
116d0     08 4E 85 F1 | 	sub	fp, #8
116d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
116d8     14 4E 05 A1 |  if_e	add	fp, #20
116dc     A7 24 02 AB |  if_e	rdlong	local04, fp
116e0     14 4E 85 A1 |  if_e	sub	fp, #20
116e4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
116e8     24 00 90 5D |  if_ne	jmp	#LR__1376
116ec     00 1E 06 F6 | 	mov	local01, #0
116f0     A7 20 02 FB | 	rdlong	local02, fp
116f4     0C 4E 05 F1 | 	add	fp, #12
116f8     A7 22 02 FB | 	rdlong	local03, fp
116fc     0C 4E 85 F1 | 	sub	fp, #12
11700     11 21 5A F2 | 	cmps	local02, local03 wcz
11704     01 1E 66 16 |  if_a	neg	local01, #1
11708     A7 1E 62 FC | 	wrlong	local01, fp
1170c     F8 01 90 FD | 	jmp	#LR__1383
11710                 | LR__1376
11710                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
11710     08 4E 05 F1 | 	add	fp, #8
11714     A7 1E 02 FB | 	rdlong	local01, fp
11718     08 4E 85 F1 | 	sub	fp, #8
1171c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11720     14 4E 05 A1 |  if_e	add	fp, #20
11724     A7 22 02 AB |  if_e	rdlong	local03, fp
11728     14 4E 85 A1 |  if_e	sub	fp, #20
1172c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11730     34 00 90 5D |  if_ne	jmp	#LR__1377
11734     00 1E 06 F6 | 	mov	local01, #0
11738     A7 12 02 FB | 	rdlong	arg01, fp
1173c     BC E0 B0 FD | 	call	#__system___float_fromuns
11740     FD 12 02 F6 | 	mov	arg01, result1
11744     0C 4E 05 F1 | 	add	fp, #12
11748     A7 14 02 FB | 	rdlong	arg02, fp
1174c     0C 4E 85 F1 | 	sub	fp, #12
11750     01 16 66 F6 | 	neg	arg03, #1
11754     DC E8 B0 FD | 	call	#__system___float_cmp
11758     01 FA 55 F2 | 	cmps	result1, #1 wc
1175c     00 1E 26 36 |  if_ae	not	local01, #0
11760     A7 1E 62 FC | 	wrlong	local01, fp
11764     A0 01 90 FD | 	jmp	#LR__1383
11768                 | LR__1377
11768                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
11768     08 4E 05 F1 | 	add	fp, #8
1176c     A7 1E 02 FB | 	rdlong	local01, fp
11770     08 4E 85 F1 | 	sub	fp, #8
11774     1D 1E 0E F2 | 	cmp	local01, #29 wz
11778     14 4E 05 A1 |  if_e	add	fp, #20
1177c     A7 22 02 AB |  if_e	rdlong	local03, fp
11780     14 4E 85 A1 |  if_e	sub	fp, #20
11784     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11788     24 00 90 5D |  if_ne	jmp	#LR__1378
1178c     00 1E 06 F6 | 	mov	local01, #0
11790     A7 20 02 FB | 	rdlong	local02, fp
11794     0C 4E 05 F1 | 	add	fp, #12
11798     A7 22 02 FB | 	rdlong	local03, fp
1179c     0C 4E 85 F1 | 	sub	fp, #12
117a0     11 21 5A F2 | 	cmps	local02, local03 wcz
117a4     01 1E 66 16 |  if_a	neg	local01, #1
117a8     A7 1E 62 FC | 	wrlong	local01, fp
117ac     58 01 90 FD | 	jmp	#LR__1383
117b0                 | LR__1378
117b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
117b0     08 4E 05 F1 | 	add	fp, #8
117b4     A7 1E 02 FB | 	rdlong	local01, fp
117b8     08 4E 85 F1 | 	sub	fp, #8
117bc     1D 1E 0E F2 | 	cmp	local01, #29 wz
117c0     14 4E 05 A1 |  if_e	add	fp, #20
117c4     A7 22 02 AB |  if_e	rdlong	local03, fp
117c8     14 4E 85 A1 |  if_e	sub	fp, #20
117cc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
117d0     24 00 90 5D |  if_ne	jmp	#LR__1379
117d4     00 1E 06 F6 | 	mov	local01, #0
117d8     A7 20 02 FB | 	rdlong	local02, fp
117dc     0C 4E 05 F1 | 	add	fp, #12
117e0     A7 22 02 FB | 	rdlong	local03, fp
117e4     0C 4E 85 F1 | 	sub	fp, #12
117e8     11 21 1A F2 | 	cmp	local02, local03 wcz
117ec     01 1E 66 16 |  if_a	neg	local01, #1
117f0     A7 1E 62 FC | 	wrlong	local01, fp
117f4     10 01 90 FD | 	jmp	#LR__1383
117f8                 | LR__1379
117f8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
117f8     08 4E 05 F1 | 	add	fp, #8
117fc     A7 1E 02 FB | 	rdlong	local01, fp
11800     08 4E 85 F1 | 	sub	fp, #8
11804     2B 1E 0E F2 | 	cmp	local01, #43 wz
11808     14 4E 05 A1 |  if_e	add	fp, #20
1180c     A7 22 02 AB |  if_e	rdlong	local03, fp
11810     14 4E 85 A1 |  if_e	sub	fp, #20
11814     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11818     30 00 90 5D |  if_ne	jmp	#LR__1380
1181c     00 1E 06 F6 | 	mov	local01, #0
11820     A7 12 02 FB | 	rdlong	arg01, fp
11824     2C CC BF FD | 	call	#_convertstring
11828     FD 12 02 F6 | 	mov	arg01, result1
1182c     0C 4E 05 F1 | 	add	fp, #12
11830     A7 14 02 FB | 	rdlong	arg02, fp
11834     0C 4E 85 F1 | 	sub	fp, #12
11838     70 B8 B0 FD | 	call	#__system___string_cmp
1183c     01 FA 55 F2 | 	cmps	result1, #1 wc
11840     00 1E 26 36 |  if_ae	not	local01, #0
11844     A7 1E 62 FC | 	wrlong	local01, fp
11848     BC 00 90 FD | 	jmp	#LR__1383
1184c                 | LR__1380
1184c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1184c     08 4E 05 F1 | 	add	fp, #8
11850     A7 1E 02 FB | 	rdlong	local01, fp
11854     08 4E 85 F1 | 	sub	fp, #8
11858     1F 1E 0E F2 | 	cmp	local01, #31 wz
1185c     14 4E 05 A1 |  if_e	add	fp, #20
11860     A7 22 02 AB |  if_e	rdlong	local03, fp
11864     14 4E 85 A1 |  if_e	sub	fp, #20
11868     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1186c     34 00 90 5D |  if_ne	jmp	#LR__1381
11870     00 1E 06 F6 | 	mov	local01, #0
11874     A7 20 02 FB | 	rdlong	local02, fp
11878     0C 4E 05 F1 | 	add	fp, #12
1187c     A7 12 02 FB | 	rdlong	arg01, fp
11880     0C 4E 85 F1 | 	sub	fp, #12
11884     CC CB BF FD | 	call	#_convertstring
11888     FD 14 02 F6 | 	mov	arg02, result1
1188c     10 13 02 F6 | 	mov	arg01, local02
11890     18 B8 B0 FD | 	call	#__system___string_cmp
11894     01 FA 55 F2 | 	cmps	result1, #1 wc
11898     00 1E 26 36 |  if_ae	not	local01, #0
1189c     A7 1E 62 FC | 	wrlong	local01, fp
118a0     64 00 90 FD | 	jmp	#LR__1383
118a4                 | LR__1381
118a4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
118a4     08 4E 05 F1 | 	add	fp, #8
118a8     A7 1E 02 FB | 	rdlong	local01, fp
118ac     08 4E 85 F1 | 	sub	fp, #8
118b0     2B 1E 0E F2 | 	cmp	local01, #43 wz
118b4     14 4E 05 A1 |  if_e	add	fp, #20
118b8     A7 22 02 AB |  if_e	rdlong	local03, fp
118bc     14 4E 85 A1 |  if_e	sub	fp, #20
118c0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
118c4     3C 00 90 5D |  if_ne	jmp	#LR__1382
118c8     00 1E 06 F6 | 	mov	local01, #0
118cc     A7 12 02 FB | 	rdlong	arg01, fp
118d0     80 CB BF FD | 	call	#_convertstring
118d4     FD 20 02 F6 | 	mov	local02, result1
118d8     0C 4E 05 F1 | 	add	fp, #12
118dc     A7 12 02 FB | 	rdlong	arg01, fp
118e0     0C 4E 85 F1 | 	sub	fp, #12
118e4     6C CB BF FD | 	call	#_convertstring
118e8     FD 14 02 F6 | 	mov	arg02, result1
118ec     10 13 02 F6 | 	mov	arg01, local02
118f0     B8 B7 B0 FD | 	call	#__system___string_cmp
118f4     01 FA 55 F2 | 	cmps	result1, #1 wc
118f8     00 1E 26 36 |  if_ae	not	local01, #0
118fc     A7 1E 62 FC | 	wrlong	local01, fp
11900     04 00 90 FD | 	jmp	#LR__1383
11904                 | LR__1382
11904     A7 00 68 FC | 	wrlong	#0, fp
11908                 | LR__1383
11908     08 4E 05 F1 | 	add	fp, #8
1190c     A7 38 68 FC | 	wrlong	#28, fp
11910     08 4E 85 F1 | 	sub	fp, #8
11914     A7 12 02 F6 | 	mov	arg01, fp
11918     28 89 BF FD | 	call	#_push
1191c     A7 F0 03 F6 | 	mov	ptra, fp
11920     B2 00 A0 FD | 	call	#popregs_
11924                 | _do_gt_ret
11924     2D 00 64 FD | 	ret
11928                 | 
11928                 | ' 
11928                 | ' sub do_lt
11928                 | _do_lt
11928     05 4A 05 F6 | 	mov	COUNT_, #5
1192c     A8 00 A0 FD | 	call	#pushregs_
11930     18 F0 07 F1 | 	add	ptra, #24
11934     74 88 BF FD | 	call	#_pop
11938     FD 1E 02 F6 | 	mov	local01, result1
1193c     FE 20 02 F6 | 	mov	local02, result2
11940     FF 22 02 F6 | 	mov	local03, result3
11944     0C 4E 05 F1 | 	add	fp, #12
11948     A7 1E 62 FC | 	wrlong	local01, fp
1194c     04 4E 05 F1 | 	add	fp, #4
11950     A7 20 62 FC | 	wrlong	local02, fp
11954     04 4E 05 F1 | 	add	fp, #4
11958     A7 22 62 FC | 	wrlong	local03, fp
1195c     14 4E 85 F1 | 	sub	fp, #20
11960     48 88 BF FD | 	call	#_pop
11964     FF 22 02 F6 | 	mov	local03, result3
11968     A7 FA 61 FC | 	wrlong	result1, fp
1196c     04 4E 05 F1 | 	add	fp, #4
11970     A7 FC 61 FC | 	wrlong	result2, fp
11974     04 4E 05 F1 | 	add	fp, #4
11978     A7 22 62 FC | 	wrlong	local03, fp
1197c                 | ' t2=pop()
1197c                 | ' t1=pop()
1197c                 | ' 
1197c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1197c     08 4E 85 F1 | 	sub	fp, #8
11980     1F 22 0E F2 | 	cmp	local03, #31 wz
11984     14 4E 05 A1 |  if_e	add	fp, #20
11988     A7 24 02 AB |  if_e	rdlong	local04, fp
1198c     14 4E 85 A1 |  if_e	sub	fp, #20
11990     12 23 02 A6 |  if_e	mov	local03, local04
11994     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11998     28 00 90 5D |  if_ne	jmp	#LR__1390
1199c     00 1E 06 F6 | 	mov	local01, #0
119a0     A7 12 02 FB | 	rdlong	arg01, fp
119a4     0C 4E 05 F1 | 	add	fp, #12
119a8     A7 14 02 FB | 	rdlong	arg02, fp
119ac     0C 4E 85 F1 | 	sub	fp, #12
119b0     F8 B6 B0 FD | 	call	#__system___string_cmp
119b4     00 FA 55 F2 | 	cmps	result1, #0 wc
119b8     00 1E 26 C6 |  if_b	not	local01, #0
119bc     A7 1E 62 FC | 	wrlong	local01, fp
119c0     0C 04 90 FD | 	jmp	#LR__1403
119c4                 | LR__1390
119c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
119c4     08 4E 05 F1 | 	add	fp, #8
119c8     A7 1E 02 FB | 	rdlong	local01, fp
119cc     08 4E 85 F1 | 	sub	fp, #8
119d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
119d4     14 4E 05 A1 |  if_e	add	fp, #20
119d8     A7 24 02 AB |  if_e	rdlong	local04, fp
119dc     14 4E 85 A1 |  if_e	sub	fp, #20
119e0     12 23 02 A6 |  if_e	mov	local03, local04
119e4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
119e8     2C 00 90 5D |  if_ne	jmp	#LR__1391
119ec     00 1E 06 F6 | 	mov	local01, #0
119f0     A7 12 02 FB | 	rdlong	arg01, fp
119f4     0C 4E 05 F1 | 	add	fp, #12
119f8     A7 14 02 FB | 	rdlong	arg02, fp
119fc     0C 4E 85 F1 | 	sub	fp, #12
11a00     01 16 06 F6 | 	mov	arg03, #1
11a04     2C E6 B0 FD | 	call	#__system___float_cmp
11a08     00 FA 55 F2 | 	cmps	result1, #0 wc
11a0c     00 1E 26 C6 |  if_b	not	local01, #0
11a10     A7 1E 62 FC | 	wrlong	local01, fp
11a14     B8 03 90 FD | 	jmp	#LR__1403
11a18                 | LR__1391
11a18                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
11a18     08 4E 05 F1 | 	add	fp, #8
11a1c     A7 1E 02 FB | 	rdlong	local01, fp
11a20     08 4E 85 F1 | 	sub	fp, #8
11a24     1E 1E 0E F2 | 	cmp	local01, #30 wz
11a28     14 4E 05 A1 |  if_e	add	fp, #20
11a2c     A7 24 02 AB |  if_e	rdlong	local04, fp
11a30     14 4E 85 A1 |  if_e	sub	fp, #20
11a34     12 23 02 A6 |  if_e	mov	local03, local04
11a38     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11a3c     48 00 90 5D |  if_ne	jmp	#LR__1392
11a40     00 1E 06 F6 | 	mov	local01, #0
11a44     A7 20 02 FB | 	rdlong	local02, fp
11a48     0C 4E 05 F1 | 	add	fp, #12
11a4c     A7 12 02 FB | 	rdlong	arg01, fp
11a50     0C 4E 85 F1 | 	sub	fp, #12
11a54     09 13 52 F6 | 	abs	arg01, arg01 wc
11a58     1F 26 C6 C9 |  if_b	decod	local05, #31
11a5c     00 26 06 36 |  if_ae	mov	local05, #0
11a60     98 DD B0 FD | 	call	#__system___float_fromuns
11a64     13 FB 61 F5 | 	xor	result1, local05
11a68     FD 14 02 F6 | 	mov	arg02, result1
11a6c     10 13 02 F6 | 	mov	arg01, local02
11a70     01 16 06 F6 | 	mov	arg03, #1
11a74     BC E5 B0 FD | 	call	#__system___float_cmp
11a78     00 FA 55 F2 | 	cmps	result1, #0 wc
11a7c     00 1E 26 C6 |  if_b	not	local01, #0
11a80     A7 1E 62 FC | 	wrlong	local01, fp
11a84     48 03 90 FD | 	jmp	#LR__1403
11a88                 | LR__1392
11a88                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
11a88     08 4E 05 F1 | 	add	fp, #8
11a8c     A7 1E 02 FB | 	rdlong	local01, fp
11a90     08 4E 85 F1 | 	sub	fp, #8
11a94     1E 1E 0E F2 | 	cmp	local01, #30 wz
11a98     14 4E 05 A1 |  if_e	add	fp, #20
11a9c     A7 24 02 AB |  if_e	rdlong	local04, fp
11aa0     14 4E 85 A1 |  if_e	sub	fp, #20
11aa4     12 23 02 A6 |  if_e	mov	local03, local04
11aa8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11aac     38 00 90 5D |  if_ne	jmp	#LR__1393
11ab0     00 1E 06 F6 | 	mov	local01, #0
11ab4     A7 20 02 FB | 	rdlong	local02, fp
11ab8     0C 4E 05 F1 | 	add	fp, #12
11abc     A7 12 02 FB | 	rdlong	arg01, fp
11ac0     0C 4E 85 F1 | 	sub	fp, #12
11ac4     34 DD B0 FD | 	call	#__system___float_fromuns
11ac8     FD 14 02 F6 | 	mov	arg02, result1
11acc     10 13 02 F6 | 	mov	arg01, local02
11ad0     01 16 06 F6 | 	mov	arg03, #1
11ad4     5C E5 B0 FD | 	call	#__system___float_cmp
11ad8     00 FA 55 F2 | 	cmps	result1, #0 wc
11adc     00 1E 26 C6 |  if_b	not	local01, #0
11ae0     A7 1E 62 FC | 	wrlong	local01, fp
11ae4     E8 02 90 FD | 	jmp	#LR__1403
11ae8                 | LR__1393
11ae8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
11ae8     08 4E 05 F1 | 	add	fp, #8
11aec     A7 1E 02 FB | 	rdlong	local01, fp
11af0     08 4E 85 F1 | 	sub	fp, #8
11af4     1C 1E 0E F2 | 	cmp	local01, #28 wz
11af8     14 4E 05 A1 |  if_e	add	fp, #20
11afc     A7 24 02 AB |  if_e	rdlong	local04, fp
11b00     14 4E 85 A1 |  if_e	sub	fp, #20
11b04     12 23 02 A6 |  if_e	mov	local03, local04
11b08     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11b0c     44 00 90 5D |  if_ne	jmp	#LR__1394
11b10     00 1E 06 F6 | 	mov	local01, #0
11b14     A7 12 02 FB | 	rdlong	arg01, fp
11b18     09 13 52 F6 | 	abs	arg01, arg01 wc
11b1c     1F 26 C6 C9 |  if_b	decod	local05, #31
11b20     00 26 06 36 |  if_ae	mov	local05, #0
11b24     D4 DC B0 FD | 	call	#__system___float_fromuns
11b28     13 FB 61 F5 | 	xor	result1, local05
11b2c     FD 12 02 F6 | 	mov	arg01, result1
11b30     0C 4E 05 F1 | 	add	fp, #12
11b34     A7 14 02 FB | 	rdlong	arg02, fp
11b38     0C 4E 85 F1 | 	sub	fp, #12
11b3c     01 16 06 F6 | 	mov	arg03, #1
11b40     F0 E4 B0 FD | 	call	#__system___float_cmp
11b44     00 FA 55 F2 | 	cmps	result1, #0 wc
11b48     00 1E 26 C6 |  if_b	not	local01, #0
11b4c     A7 1E 62 FC | 	wrlong	local01, fp
11b50     7C 02 90 FD | 	jmp	#LR__1403
11b54                 | LR__1394
11b54                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
11b54     08 4E 05 F1 | 	add	fp, #8
11b58     A7 1E 02 FB | 	rdlong	local01, fp
11b5c     08 4E 85 F1 | 	sub	fp, #8
11b60     1C 1E 0E F2 | 	cmp	local01, #28 wz
11b64     14 4E 05 A1 |  if_e	add	fp, #20
11b68     A7 24 02 AB |  if_e	rdlong	local04, fp
11b6c     14 4E 85 A1 |  if_e	sub	fp, #20
11b70     12 23 02 A6 |  if_e	mov	local03, local04
11b74     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11b78     20 00 90 5D |  if_ne	jmp	#LR__1395
11b7c     A7 20 02 FB | 	rdlong	local02, fp
11b80     0C 4E 05 F1 | 	add	fp, #12
11b84     A7 22 02 FB | 	rdlong	local03, fp
11b88     0C 4E 85 F1 | 	sub	fp, #12
11b8c     11 21 52 F2 | 	cmps	local02, local03 wc
11b90     0F 1F A2 F1 | 	subx	local01, local01
11b94     A7 1E 62 FC | 	wrlong	local01, fp
11b98     34 02 90 FD | 	jmp	#LR__1403
11b9c                 | LR__1395
11b9c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
11b9c     08 4E 05 F1 | 	add	fp, #8
11ba0     A7 1E 02 FB | 	rdlong	local01, fp
11ba4     08 4E 85 F1 | 	sub	fp, #8
11ba8     1C 1E 0E F2 | 	cmp	local01, #28 wz
11bac     14 4E 05 A1 |  if_e	add	fp, #20
11bb0     A7 24 02 AB |  if_e	rdlong	local04, fp
11bb4     14 4E 85 A1 |  if_e	sub	fp, #20
11bb8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11bbc     20 00 90 5D |  if_ne	jmp	#LR__1396
11bc0     A7 20 02 FB | 	rdlong	local02, fp
11bc4     0C 4E 05 F1 | 	add	fp, #12
11bc8     A7 22 02 FB | 	rdlong	local03, fp
11bcc     0C 4E 85 F1 | 	sub	fp, #12
11bd0     11 21 52 F2 | 	cmps	local02, local03 wc
11bd4     0F 1F A2 F1 | 	subx	local01, local01
11bd8     A7 1E 62 FC | 	wrlong	local01, fp
11bdc     F0 01 90 FD | 	jmp	#LR__1403
11be0                 | LR__1396
11be0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
11be0     08 4E 05 F1 | 	add	fp, #8
11be4     A7 1E 02 FB | 	rdlong	local01, fp
11be8     08 4E 85 F1 | 	sub	fp, #8
11bec     1D 1E 0E F2 | 	cmp	local01, #29 wz
11bf0     14 4E 05 A1 |  if_e	add	fp, #20
11bf4     A7 22 02 AB |  if_e	rdlong	local03, fp
11bf8     14 4E 85 A1 |  if_e	sub	fp, #20
11bfc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11c00     34 00 90 5D |  if_ne	jmp	#LR__1397
11c04     00 1E 06 F6 | 	mov	local01, #0
11c08     A7 12 02 FB | 	rdlong	arg01, fp
11c0c     EC DB B0 FD | 	call	#__system___float_fromuns
11c10     FD 12 02 F6 | 	mov	arg01, result1
11c14     0C 4E 05 F1 | 	add	fp, #12
11c18     A7 14 02 FB | 	rdlong	arg02, fp
11c1c     0C 4E 85 F1 | 	sub	fp, #12
11c20     01 16 06 F6 | 	mov	arg03, #1
11c24     0C E4 B0 FD | 	call	#__system___float_cmp
11c28     00 FA 55 F2 | 	cmps	result1, #0 wc
11c2c     00 1E 26 C6 |  if_b	not	local01, #0
11c30     A7 1E 62 FC | 	wrlong	local01, fp
11c34     98 01 90 FD | 	jmp	#LR__1403
11c38                 | LR__1397
11c38                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
11c38     08 4E 05 F1 | 	add	fp, #8
11c3c     A7 1E 02 FB | 	rdlong	local01, fp
11c40     08 4E 85 F1 | 	sub	fp, #8
11c44     1D 1E 0E F2 | 	cmp	local01, #29 wz
11c48     14 4E 05 A1 |  if_e	add	fp, #20
11c4c     A7 22 02 AB |  if_e	rdlong	local03, fp
11c50     14 4E 85 A1 |  if_e	sub	fp, #20
11c54     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11c58     20 00 90 5D |  if_ne	jmp	#LR__1398
11c5c     A7 20 02 FB | 	rdlong	local02, fp
11c60     0C 4E 05 F1 | 	add	fp, #12
11c64     A7 22 02 FB | 	rdlong	local03, fp
11c68     0C 4E 85 F1 | 	sub	fp, #12
11c6c     11 21 52 F2 | 	cmps	local02, local03 wc
11c70     0F 1F A2 F1 | 	subx	local01, local01
11c74     A7 1E 62 FC | 	wrlong	local01, fp
11c78     54 01 90 FD | 	jmp	#LR__1403
11c7c                 | LR__1398
11c7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
11c7c     08 4E 05 F1 | 	add	fp, #8
11c80     A7 1E 02 FB | 	rdlong	local01, fp
11c84     08 4E 85 F1 | 	sub	fp, #8
11c88     1D 1E 0E F2 | 	cmp	local01, #29 wz
11c8c     14 4E 05 A1 |  if_e	add	fp, #20
11c90     A7 22 02 AB |  if_e	rdlong	local03, fp
11c94     14 4E 85 A1 |  if_e	sub	fp, #20
11c98     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11c9c     20 00 90 5D |  if_ne	jmp	#LR__1399
11ca0     A7 20 02 FB | 	rdlong	local02, fp
11ca4     0C 4E 05 F1 | 	add	fp, #12
11ca8     A7 22 02 FB | 	rdlong	local03, fp
11cac     0C 4E 85 F1 | 	sub	fp, #12
11cb0     11 21 12 F2 | 	cmp	local02, local03 wc
11cb4     0F 1F A2 F1 | 	subx	local01, local01
11cb8     A7 1E 62 FC | 	wrlong	local01, fp
11cbc     10 01 90 FD | 	jmp	#LR__1403
11cc0                 | LR__1399
11cc0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
11cc0     08 4E 05 F1 | 	add	fp, #8
11cc4     A7 1E 02 FB | 	rdlong	local01, fp
11cc8     08 4E 85 F1 | 	sub	fp, #8
11ccc     2B 1E 0E F2 | 	cmp	local01, #43 wz
11cd0     14 4E 05 A1 |  if_e	add	fp, #20
11cd4     A7 22 02 AB |  if_e	rdlong	local03, fp
11cd8     14 4E 85 A1 |  if_e	sub	fp, #20
11cdc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11ce0     30 00 90 5D |  if_ne	jmp	#LR__1400
11ce4     00 1E 06 F6 | 	mov	local01, #0
11ce8     A7 12 02 FB | 	rdlong	arg01, fp
11cec     64 C7 BF FD | 	call	#_convertstring
11cf0     FD 12 02 F6 | 	mov	arg01, result1
11cf4     0C 4E 05 F1 | 	add	fp, #12
11cf8     A7 14 02 FB | 	rdlong	arg02, fp
11cfc     0C 4E 85 F1 | 	sub	fp, #12
11d00     A8 B3 B0 FD | 	call	#__system___string_cmp
11d04     00 FA 55 F2 | 	cmps	result1, #0 wc
11d08     00 1E 26 C6 |  if_b	not	local01, #0
11d0c     A7 1E 62 FC | 	wrlong	local01, fp
11d10     BC 00 90 FD | 	jmp	#LR__1403
11d14                 | LR__1400
11d14                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
11d14     08 4E 05 F1 | 	add	fp, #8
11d18     A7 1E 02 FB | 	rdlong	local01, fp
11d1c     08 4E 85 F1 | 	sub	fp, #8
11d20     1F 1E 0E F2 | 	cmp	local01, #31 wz
11d24     14 4E 05 A1 |  if_e	add	fp, #20
11d28     A7 22 02 AB |  if_e	rdlong	local03, fp
11d2c     14 4E 85 A1 |  if_e	sub	fp, #20
11d30     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11d34     34 00 90 5D |  if_ne	jmp	#LR__1401
11d38     00 1E 06 F6 | 	mov	local01, #0
11d3c     A7 20 02 FB | 	rdlong	local02, fp
11d40     0C 4E 05 F1 | 	add	fp, #12
11d44     A7 12 02 FB | 	rdlong	arg01, fp
11d48     0C 4E 85 F1 | 	sub	fp, #12
11d4c     04 C7 BF FD | 	call	#_convertstring
11d50     FD 14 02 F6 | 	mov	arg02, result1
11d54     10 13 02 F6 | 	mov	arg01, local02
11d58     50 B3 B0 FD | 	call	#__system___string_cmp
11d5c     00 FA 55 F2 | 	cmps	result1, #0 wc
11d60     00 1E 26 C6 |  if_b	not	local01, #0
11d64     A7 1E 62 FC | 	wrlong	local01, fp
11d68     64 00 90 FD | 	jmp	#LR__1403
11d6c                 | LR__1401
11d6c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
11d6c     08 4E 05 F1 | 	add	fp, #8
11d70     A7 1E 02 FB | 	rdlong	local01, fp
11d74     08 4E 85 F1 | 	sub	fp, #8
11d78     2B 1E 0E F2 | 	cmp	local01, #43 wz
11d7c     14 4E 05 A1 |  if_e	add	fp, #20
11d80     A7 22 02 AB |  if_e	rdlong	local03, fp
11d84     14 4E 85 A1 |  if_e	sub	fp, #20
11d88     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11d8c     3C 00 90 5D |  if_ne	jmp	#LR__1402
11d90     00 1E 06 F6 | 	mov	local01, #0
11d94     A7 12 02 FB | 	rdlong	arg01, fp
11d98     B8 C6 BF FD | 	call	#_convertstring
11d9c     FD 20 02 F6 | 	mov	local02, result1
11da0     0C 4E 05 F1 | 	add	fp, #12
11da4     A7 12 02 FB | 	rdlong	arg01, fp
11da8     0C 4E 85 F1 | 	sub	fp, #12
11dac     A4 C6 BF FD | 	call	#_convertstring
11db0     FD 14 02 F6 | 	mov	arg02, result1
11db4     10 13 02 F6 | 	mov	arg01, local02
11db8     F0 B2 B0 FD | 	call	#__system___string_cmp
11dbc     00 FA 55 F2 | 	cmps	result1, #0 wc
11dc0     00 1E 26 C6 |  if_b	not	local01, #0
11dc4     A7 1E 62 FC | 	wrlong	local01, fp
11dc8     04 00 90 FD | 	jmp	#LR__1403
11dcc                 | LR__1402
11dcc     A7 00 68 FC | 	wrlong	#0, fp
11dd0                 | LR__1403
11dd0     08 4E 05 F1 | 	add	fp, #8
11dd4     A7 38 68 FC | 	wrlong	#28, fp
11dd8     08 4E 85 F1 | 	sub	fp, #8
11ddc     A7 12 02 F6 | 	mov	arg01, fp
11de0     60 84 BF FD | 	call	#_push
11de4     A7 F0 03 F6 | 	mov	ptra, fp
11de8     B2 00 A0 FD | 	call	#popregs_
11dec                 | _do_lt_ret
11dec     2D 00 64 FD | 	ret
11df0                 | 
11df0                 | ' 
11df0                 | ' sub do_ge
11df0                 | _do_ge
11df0     05 4A 05 F6 | 	mov	COUNT_, #5
11df4     A8 00 A0 FD | 	call	#pushregs_
11df8     18 F0 07 F1 | 	add	ptra, #24
11dfc     AC 83 BF FD | 	call	#_pop
11e00     FD 1E 02 F6 | 	mov	local01, result1
11e04     FE 20 02 F6 | 	mov	local02, result2
11e08     FF 22 02 F6 | 	mov	local03, result3
11e0c     0C 4E 05 F1 | 	add	fp, #12
11e10     A7 1E 62 FC | 	wrlong	local01, fp
11e14     04 4E 05 F1 | 	add	fp, #4
11e18     A7 20 62 FC | 	wrlong	local02, fp
11e1c     04 4E 05 F1 | 	add	fp, #4
11e20     A7 22 62 FC | 	wrlong	local03, fp
11e24     14 4E 85 F1 | 	sub	fp, #20
11e28     80 83 BF FD | 	call	#_pop
11e2c     FF 22 02 F6 | 	mov	local03, result3
11e30     A7 FA 61 FC | 	wrlong	result1, fp
11e34     04 4E 05 F1 | 	add	fp, #4
11e38     A7 FC 61 FC | 	wrlong	result2, fp
11e3c     04 4E 05 F1 | 	add	fp, #4
11e40     A7 22 62 FC | 	wrlong	local03, fp
11e44                 | ' t2=pop()
11e44                 | ' t1=pop()
11e44                 | ' 
11e44                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
11e44     08 4E 85 F1 | 	sub	fp, #8
11e48     1F 22 0E F2 | 	cmp	local03, #31 wz
11e4c     14 4E 05 A1 |  if_e	add	fp, #20
11e50     A7 24 02 AB |  if_e	rdlong	local04, fp
11e54     14 4E 85 A1 |  if_e	sub	fp, #20
11e58     12 23 02 A6 |  if_e	mov	local03, local04
11e5c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11e60     28 00 90 5D |  if_ne	jmp	#LR__1410
11e64     00 1E 06 F6 | 	mov	local01, #0
11e68     A7 12 02 FB | 	rdlong	arg01, fp
11e6c     0C 4E 05 F1 | 	add	fp, #12
11e70     A7 14 02 FB | 	rdlong	arg02, fp
11e74     0C 4E 85 F1 | 	sub	fp, #12
11e78     30 B2 B0 FD | 	call	#__system___string_cmp
11e7c     00 FA 55 F2 | 	cmps	result1, #0 wc
11e80     00 1E 26 36 |  if_ae	not	local01, #0
11e84     A7 1E 62 FC | 	wrlong	local01, fp
11e88     1C 04 90 FD | 	jmp	#LR__1423
11e8c                 | LR__1410
11e8c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
11e8c     08 4E 05 F1 | 	add	fp, #8
11e90     A7 1E 02 FB | 	rdlong	local01, fp
11e94     08 4E 85 F1 | 	sub	fp, #8
11e98     1E 1E 0E F2 | 	cmp	local01, #30 wz
11e9c     14 4E 05 A1 |  if_e	add	fp, #20
11ea0     A7 24 02 AB |  if_e	rdlong	local04, fp
11ea4     14 4E 85 A1 |  if_e	sub	fp, #20
11ea8     12 23 02 A6 |  if_e	mov	local03, local04
11eac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11eb0     2C 00 90 5D |  if_ne	jmp	#LR__1411
11eb4     00 1E 06 F6 | 	mov	local01, #0
11eb8     A7 12 02 FB | 	rdlong	arg01, fp
11ebc     0C 4E 05 F1 | 	add	fp, #12
11ec0     A7 14 02 FB | 	rdlong	arg02, fp
11ec4     0C 4E 85 F1 | 	sub	fp, #12
11ec8     01 16 66 F6 | 	neg	arg03, #1
11ecc     64 E1 B0 FD | 	call	#__system___float_cmp
11ed0     00 FA 55 F2 | 	cmps	result1, #0 wc
11ed4     00 1E 26 36 |  if_ae	not	local01, #0
11ed8     A7 1E 62 FC | 	wrlong	local01, fp
11edc     C8 03 90 FD | 	jmp	#LR__1423
11ee0                 | LR__1411
11ee0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
11ee0     08 4E 05 F1 | 	add	fp, #8
11ee4     A7 1E 02 FB | 	rdlong	local01, fp
11ee8     08 4E 85 F1 | 	sub	fp, #8
11eec     1E 1E 0E F2 | 	cmp	local01, #30 wz
11ef0     14 4E 05 A1 |  if_e	add	fp, #20
11ef4     A7 24 02 AB |  if_e	rdlong	local04, fp
11ef8     14 4E 85 A1 |  if_e	sub	fp, #20
11efc     12 23 02 A6 |  if_e	mov	local03, local04
11f00     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11f04     48 00 90 5D |  if_ne	jmp	#LR__1412
11f08     00 1E 06 F6 | 	mov	local01, #0
11f0c     A7 20 02 FB | 	rdlong	local02, fp
11f10     0C 4E 05 F1 | 	add	fp, #12
11f14     A7 12 02 FB | 	rdlong	arg01, fp
11f18     0C 4E 85 F1 | 	sub	fp, #12
11f1c     09 13 52 F6 | 	abs	arg01, arg01 wc
11f20     1F 26 C6 C9 |  if_b	decod	local05, #31
11f24     00 26 06 36 |  if_ae	mov	local05, #0
11f28     D0 D8 B0 FD | 	call	#__system___float_fromuns
11f2c     13 FB 61 F5 | 	xor	result1, local05
11f30     FD 14 02 F6 | 	mov	arg02, result1
11f34     10 13 02 F6 | 	mov	arg01, local02
11f38     01 16 66 F6 | 	neg	arg03, #1
11f3c     F4 E0 B0 FD | 	call	#__system___float_cmp
11f40     00 FA 55 F2 | 	cmps	result1, #0 wc
11f44     00 1E 26 36 |  if_ae	not	local01, #0
11f48     A7 1E 62 FC | 	wrlong	local01, fp
11f4c     58 03 90 FD | 	jmp	#LR__1423
11f50                 | LR__1412
11f50                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
11f50     08 4E 05 F1 | 	add	fp, #8
11f54     A7 1E 02 FB | 	rdlong	local01, fp
11f58     08 4E 85 F1 | 	sub	fp, #8
11f5c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11f60     14 4E 05 A1 |  if_e	add	fp, #20
11f64     A7 24 02 AB |  if_e	rdlong	local04, fp
11f68     14 4E 85 A1 |  if_e	sub	fp, #20
11f6c     12 23 02 A6 |  if_e	mov	local03, local04
11f70     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11f74     38 00 90 5D |  if_ne	jmp	#LR__1413
11f78     00 1E 06 F6 | 	mov	local01, #0
11f7c     A7 20 02 FB | 	rdlong	local02, fp
11f80     0C 4E 05 F1 | 	add	fp, #12
11f84     A7 12 02 FB | 	rdlong	arg01, fp
11f88     0C 4E 85 F1 | 	sub	fp, #12
11f8c     6C D8 B0 FD | 	call	#__system___float_fromuns
11f90     FD 14 02 F6 | 	mov	arg02, result1
11f94     10 13 02 F6 | 	mov	arg01, local02
11f98     01 16 66 F6 | 	neg	arg03, #1
11f9c     94 E0 B0 FD | 	call	#__system___float_cmp
11fa0     00 FA 55 F2 | 	cmps	result1, #0 wc
11fa4     00 1E 26 36 |  if_ae	not	local01, #0
11fa8     A7 1E 62 FC | 	wrlong	local01, fp
11fac     F8 02 90 FD | 	jmp	#LR__1423
11fb0                 | LR__1413
11fb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
11fb0     08 4E 05 F1 | 	add	fp, #8
11fb4     A7 1E 02 FB | 	rdlong	local01, fp
11fb8     08 4E 85 F1 | 	sub	fp, #8
11fbc     1C 1E 0E F2 | 	cmp	local01, #28 wz
11fc0     14 4E 05 A1 |  if_e	add	fp, #20
11fc4     A7 24 02 AB |  if_e	rdlong	local04, fp
11fc8     14 4E 85 A1 |  if_e	sub	fp, #20
11fcc     12 23 02 A6 |  if_e	mov	local03, local04
11fd0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11fd4     44 00 90 5D |  if_ne	jmp	#LR__1414
11fd8     00 1E 06 F6 | 	mov	local01, #0
11fdc     A7 12 02 FB | 	rdlong	arg01, fp
11fe0     09 13 52 F6 | 	abs	arg01, arg01 wc
11fe4     1F 26 C6 C9 |  if_b	decod	local05, #31
11fe8     00 26 06 36 |  if_ae	mov	local05, #0
11fec     0C D8 B0 FD | 	call	#__system___float_fromuns
11ff0     13 FB 61 F5 | 	xor	result1, local05
11ff4     FD 12 02 F6 | 	mov	arg01, result1
11ff8     0C 4E 05 F1 | 	add	fp, #12
11ffc     A7 14 02 FB | 	rdlong	arg02, fp
12000     0C 4E 85 F1 | 	sub	fp, #12
12004     01 16 66 F6 | 	neg	arg03, #1
12008     28 E0 B0 FD | 	call	#__system___float_cmp
1200c     00 FA 55 F2 | 	cmps	result1, #0 wc
12010     00 1E 26 36 |  if_ae	not	local01, #0
12014     A7 1E 62 FC | 	wrlong	local01, fp
12018     8C 02 90 FD | 	jmp	#LR__1423
1201c                 | LR__1414
1201c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1201c     08 4E 05 F1 | 	add	fp, #8
12020     A7 1E 02 FB | 	rdlong	local01, fp
12024     08 4E 85 F1 | 	sub	fp, #8
12028     1C 1E 0E F2 | 	cmp	local01, #28 wz
1202c     14 4E 05 A1 |  if_e	add	fp, #20
12030     A7 24 02 AB |  if_e	rdlong	local04, fp
12034     14 4E 85 A1 |  if_e	sub	fp, #20
12038     12 23 02 A6 |  if_e	mov	local03, local04
1203c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12040     24 00 90 5D |  if_ne	jmp	#LR__1415
12044     00 1E 06 F6 | 	mov	local01, #0
12048     A7 20 02 FB | 	rdlong	local02, fp
1204c     0C 4E 05 F1 | 	add	fp, #12
12050     A7 22 02 FB | 	rdlong	local03, fp
12054     0C 4E 85 F1 | 	sub	fp, #12
12058     11 21 52 F2 | 	cmps	local02, local03 wc
1205c     01 1E 66 36 |  if_ae	neg	local01, #1
12060     A7 1E 62 FC | 	wrlong	local01, fp
12064     40 02 90 FD | 	jmp	#LR__1423
12068                 | LR__1415
12068                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
12068     08 4E 05 F1 | 	add	fp, #8
1206c     A7 1E 02 FB | 	rdlong	local01, fp
12070     08 4E 85 F1 | 	sub	fp, #8
12074     1C 1E 0E F2 | 	cmp	local01, #28 wz
12078     14 4E 05 A1 |  if_e	add	fp, #20
1207c     A7 24 02 AB |  if_e	rdlong	local04, fp
12080     14 4E 85 A1 |  if_e	sub	fp, #20
12084     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12088     24 00 90 5D |  if_ne	jmp	#LR__1416
1208c     00 1E 06 F6 | 	mov	local01, #0
12090     A7 20 02 FB | 	rdlong	local02, fp
12094     0C 4E 05 F1 | 	add	fp, #12
12098     A7 22 02 FB | 	rdlong	local03, fp
1209c     0C 4E 85 F1 | 	sub	fp, #12
120a0     11 21 52 F2 | 	cmps	local02, local03 wc
120a4     01 1E 66 36 |  if_ae	neg	local01, #1
120a8     A7 1E 62 FC | 	wrlong	local01, fp
120ac     F8 01 90 FD | 	jmp	#LR__1423
120b0                 | LR__1416
120b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
120b0     08 4E 05 F1 | 	add	fp, #8
120b4     A7 1E 02 FB | 	rdlong	local01, fp
120b8     08 4E 85 F1 | 	sub	fp, #8
120bc     1D 1E 0E F2 | 	cmp	local01, #29 wz
120c0     14 4E 05 A1 |  if_e	add	fp, #20
120c4     A7 22 02 AB |  if_e	rdlong	local03, fp
120c8     14 4E 85 A1 |  if_e	sub	fp, #20
120cc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
120d0     34 00 90 5D |  if_ne	jmp	#LR__1417
120d4     00 1E 06 F6 | 	mov	local01, #0
120d8     A7 12 02 FB | 	rdlong	arg01, fp
120dc     1C D7 B0 FD | 	call	#__system___float_fromuns
120e0     FD 12 02 F6 | 	mov	arg01, result1
120e4     0C 4E 05 F1 | 	add	fp, #12
120e8     A7 14 02 FB | 	rdlong	arg02, fp
120ec     0C 4E 85 F1 | 	sub	fp, #12
120f0     01 16 66 F6 | 	neg	arg03, #1
120f4     3C DF B0 FD | 	call	#__system___float_cmp
120f8     00 FA 55 F2 | 	cmps	result1, #0 wc
120fc     00 1E 26 36 |  if_ae	not	local01, #0
12100     A7 1E 62 FC | 	wrlong	local01, fp
12104     A0 01 90 FD | 	jmp	#LR__1423
12108                 | LR__1417
12108                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
12108     08 4E 05 F1 | 	add	fp, #8
1210c     A7 1E 02 FB | 	rdlong	local01, fp
12110     08 4E 85 F1 | 	sub	fp, #8
12114     1D 1E 0E F2 | 	cmp	local01, #29 wz
12118     14 4E 05 A1 |  if_e	add	fp, #20
1211c     A7 22 02 AB |  if_e	rdlong	local03, fp
12120     14 4E 85 A1 |  if_e	sub	fp, #20
12124     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12128     24 00 90 5D |  if_ne	jmp	#LR__1418
1212c     00 1E 06 F6 | 	mov	local01, #0
12130     A7 20 02 FB | 	rdlong	local02, fp
12134     0C 4E 05 F1 | 	add	fp, #12
12138     A7 22 02 FB | 	rdlong	local03, fp
1213c     0C 4E 85 F1 | 	sub	fp, #12
12140     11 21 52 F2 | 	cmps	local02, local03 wc
12144     01 1E 66 36 |  if_ae	neg	local01, #1
12148     A7 1E 62 FC | 	wrlong	local01, fp
1214c     58 01 90 FD | 	jmp	#LR__1423
12150                 | LR__1418
12150                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
12150     08 4E 05 F1 | 	add	fp, #8
12154     A7 1E 02 FB | 	rdlong	local01, fp
12158     08 4E 85 F1 | 	sub	fp, #8
1215c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12160     14 4E 05 A1 |  if_e	add	fp, #20
12164     A7 22 02 AB |  if_e	rdlong	local03, fp
12168     14 4E 85 A1 |  if_e	sub	fp, #20
1216c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12170     24 00 90 5D |  if_ne	jmp	#LR__1419
12174     00 1E 06 F6 | 	mov	local01, #0
12178     A7 20 02 FB | 	rdlong	local02, fp
1217c     0C 4E 05 F1 | 	add	fp, #12
12180     A7 22 02 FB | 	rdlong	local03, fp
12184     0C 4E 85 F1 | 	sub	fp, #12
12188     11 21 12 F2 | 	cmp	local02, local03 wc
1218c     01 1E 66 36 |  if_ae	neg	local01, #1
12190     A7 1E 62 FC | 	wrlong	local01, fp
12194     10 01 90 FD | 	jmp	#LR__1423
12198                 | LR__1419
12198                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
12198     08 4E 05 F1 | 	add	fp, #8
1219c     A7 1E 02 FB | 	rdlong	local01, fp
121a0     08 4E 85 F1 | 	sub	fp, #8
121a4     2B 1E 0E F2 | 	cmp	local01, #43 wz
121a8     14 4E 05 A1 |  if_e	add	fp, #20
121ac     A7 22 02 AB |  if_e	rdlong	local03, fp
121b0     14 4E 85 A1 |  if_e	sub	fp, #20
121b4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
121b8     30 00 90 5D |  if_ne	jmp	#LR__1420
121bc     00 1E 06 F6 | 	mov	local01, #0
121c0     A7 12 02 FB | 	rdlong	arg01, fp
121c4     8C C2 BF FD | 	call	#_convertstring
121c8     FD 12 02 F6 | 	mov	arg01, result1
121cc     0C 4E 05 F1 | 	add	fp, #12
121d0     A7 14 02 FB | 	rdlong	arg02, fp
121d4     0C 4E 85 F1 | 	sub	fp, #12
121d8     D0 AE B0 FD | 	call	#__system___string_cmp
121dc     00 FA 55 F2 | 	cmps	result1, #0 wc
121e0     00 1E 26 36 |  if_ae	not	local01, #0
121e4     A7 1E 62 FC | 	wrlong	local01, fp
121e8     BC 00 90 FD | 	jmp	#LR__1423
121ec                 | LR__1420
121ec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
121ec     08 4E 05 F1 | 	add	fp, #8
121f0     A7 1E 02 FB | 	rdlong	local01, fp
121f4     08 4E 85 F1 | 	sub	fp, #8
121f8     1F 1E 0E F2 | 	cmp	local01, #31 wz
121fc     14 4E 05 A1 |  if_e	add	fp, #20
12200     A7 22 02 AB |  if_e	rdlong	local03, fp
12204     14 4E 85 A1 |  if_e	sub	fp, #20
12208     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1220c     34 00 90 5D |  if_ne	jmp	#LR__1421
12210     00 1E 06 F6 | 	mov	local01, #0
12214     A7 20 02 FB | 	rdlong	local02, fp
12218     0C 4E 05 F1 | 	add	fp, #12
1221c     A7 12 02 FB | 	rdlong	arg01, fp
12220     0C 4E 85 F1 | 	sub	fp, #12
12224     2C C2 BF FD | 	call	#_convertstring
12228     FD 14 02 F6 | 	mov	arg02, result1
1222c     10 13 02 F6 | 	mov	arg01, local02
12230     78 AE B0 FD | 	call	#__system___string_cmp
12234     00 FA 55 F2 | 	cmps	result1, #0 wc
12238     00 1E 26 36 |  if_ae	not	local01, #0
1223c     A7 1E 62 FC | 	wrlong	local01, fp
12240     64 00 90 FD | 	jmp	#LR__1423
12244                 | LR__1421
12244                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
12244     08 4E 05 F1 | 	add	fp, #8
12248     A7 1E 02 FB | 	rdlong	local01, fp
1224c     08 4E 85 F1 | 	sub	fp, #8
12250     2B 1E 0E F2 | 	cmp	local01, #43 wz
12254     14 4E 05 A1 |  if_e	add	fp, #20
12258     A7 22 02 AB |  if_e	rdlong	local03, fp
1225c     14 4E 85 A1 |  if_e	sub	fp, #20
12260     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12264     3C 00 90 5D |  if_ne	jmp	#LR__1422
12268     00 1E 06 F6 | 	mov	local01, #0
1226c     A7 12 02 FB | 	rdlong	arg01, fp
12270     E0 C1 BF FD | 	call	#_convertstring
12274     FD 20 02 F6 | 	mov	local02, result1
12278     0C 4E 05 F1 | 	add	fp, #12
1227c     A7 12 02 FB | 	rdlong	arg01, fp
12280     0C 4E 85 F1 | 	sub	fp, #12
12284     CC C1 BF FD | 	call	#_convertstring
12288     FD 14 02 F6 | 	mov	arg02, result1
1228c     10 13 02 F6 | 	mov	arg01, local02
12290     18 AE B0 FD | 	call	#__system___string_cmp
12294     00 FA 55 F2 | 	cmps	result1, #0 wc
12298     00 1E 26 36 |  if_ae	not	local01, #0
1229c     A7 1E 62 FC | 	wrlong	local01, fp
122a0     04 00 90 FD | 	jmp	#LR__1423
122a4                 | LR__1422
122a4     A7 00 68 FC | 	wrlong	#0, fp
122a8                 | LR__1423
122a8     08 4E 05 F1 | 	add	fp, #8
122ac     A7 38 68 FC | 	wrlong	#28, fp
122b0     08 4E 85 F1 | 	sub	fp, #8
122b4     A7 12 02 F6 | 	mov	arg01, fp
122b8     88 7F BF FD | 	call	#_push
122bc     A7 F0 03 F6 | 	mov	ptra, fp
122c0     B2 00 A0 FD | 	call	#popregs_
122c4                 | _do_ge_ret
122c4     2D 00 64 FD | 	ret
122c8                 | 
122c8                 | ' 
122c8                 | ' sub do_le
122c8                 | _do_le
122c8     05 4A 05 F6 | 	mov	COUNT_, #5
122cc     A8 00 A0 FD | 	call	#pushregs_
122d0     18 F0 07 F1 | 	add	ptra, #24
122d4     D4 7E BF FD | 	call	#_pop
122d8     FD 1E 02 F6 | 	mov	local01, result1
122dc     FE 20 02 F6 | 	mov	local02, result2
122e0     FF 22 02 F6 | 	mov	local03, result3
122e4     0C 4E 05 F1 | 	add	fp, #12
122e8     A7 1E 62 FC | 	wrlong	local01, fp
122ec     04 4E 05 F1 | 	add	fp, #4
122f0     A7 20 62 FC | 	wrlong	local02, fp
122f4     04 4E 05 F1 | 	add	fp, #4
122f8     A7 22 62 FC | 	wrlong	local03, fp
122fc     14 4E 85 F1 | 	sub	fp, #20
12300     A8 7E BF FD | 	call	#_pop
12304     FF 22 02 F6 | 	mov	local03, result3
12308     A7 FA 61 FC | 	wrlong	result1, fp
1230c     04 4E 05 F1 | 	add	fp, #4
12310     A7 FC 61 FC | 	wrlong	result2, fp
12314     04 4E 05 F1 | 	add	fp, #4
12318     A7 22 62 FC | 	wrlong	local03, fp
1231c                 | ' t2=pop()
1231c                 | ' t1=pop()
1231c                 | ' 
1231c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1231c     08 4E 85 F1 | 	sub	fp, #8
12320     1F 22 0E F2 | 	cmp	local03, #31 wz
12324     14 4E 05 A1 |  if_e	add	fp, #20
12328     A7 24 02 AB |  if_e	rdlong	local04, fp
1232c     14 4E 85 A1 |  if_e	sub	fp, #20
12330     12 23 02 A6 |  if_e	mov	local03, local04
12334     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12338     28 00 90 5D |  if_ne	jmp	#LR__1430
1233c     00 1E 06 F6 | 	mov	local01, #0
12340     A7 12 02 FB | 	rdlong	arg01, fp
12344     0C 4E 05 F1 | 	add	fp, #12
12348     A7 14 02 FB | 	rdlong	arg02, fp
1234c     0C 4E 85 F1 | 	sub	fp, #12
12350     58 AD B0 FD | 	call	#__system___string_cmp
12354     01 FA 55 F2 | 	cmps	result1, #1 wc
12358     00 1E 26 C6 |  if_b	not	local01, #0
1235c     A7 1E 62 FC | 	wrlong	local01, fp
12360     1C 04 90 FD | 	jmp	#LR__1443
12364                 | LR__1430
12364                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
12364     08 4E 05 F1 | 	add	fp, #8
12368     A7 1E 02 FB | 	rdlong	local01, fp
1236c     08 4E 85 F1 | 	sub	fp, #8
12370     1E 1E 0E F2 | 	cmp	local01, #30 wz
12374     14 4E 05 A1 |  if_e	add	fp, #20
12378     A7 24 02 AB |  if_e	rdlong	local04, fp
1237c     14 4E 85 A1 |  if_e	sub	fp, #20
12380     12 23 02 A6 |  if_e	mov	local03, local04
12384     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12388     2C 00 90 5D |  if_ne	jmp	#LR__1431
1238c     00 1E 06 F6 | 	mov	local01, #0
12390     A7 12 02 FB | 	rdlong	arg01, fp
12394     0C 4E 05 F1 | 	add	fp, #12
12398     A7 14 02 FB | 	rdlong	arg02, fp
1239c     0C 4E 85 F1 | 	sub	fp, #12
123a0     01 16 06 F6 | 	mov	arg03, #1
123a4     8C DC B0 FD | 	call	#__system___float_cmp
123a8     01 FA 55 F2 | 	cmps	result1, #1 wc
123ac     00 1E 26 C6 |  if_b	not	local01, #0
123b0     A7 1E 62 FC | 	wrlong	local01, fp
123b4     C8 03 90 FD | 	jmp	#LR__1443
123b8                 | LR__1431
123b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
123b8     08 4E 05 F1 | 	add	fp, #8
123bc     A7 1E 02 FB | 	rdlong	local01, fp
123c0     08 4E 85 F1 | 	sub	fp, #8
123c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
123c8     14 4E 05 A1 |  if_e	add	fp, #20
123cc     A7 24 02 AB |  if_e	rdlong	local04, fp
123d0     14 4E 85 A1 |  if_e	sub	fp, #20
123d4     12 23 02 A6 |  if_e	mov	local03, local04
123d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
123dc     48 00 90 5D |  if_ne	jmp	#LR__1432
123e0     00 1E 06 F6 | 	mov	local01, #0
123e4     A7 20 02 FB | 	rdlong	local02, fp
123e8     0C 4E 05 F1 | 	add	fp, #12
123ec     A7 12 02 FB | 	rdlong	arg01, fp
123f0     0C 4E 85 F1 | 	sub	fp, #12
123f4     09 13 52 F6 | 	abs	arg01, arg01 wc
123f8     1F 26 C6 C9 |  if_b	decod	local05, #31
123fc     00 26 06 36 |  if_ae	mov	local05, #0
12400     F8 D3 B0 FD | 	call	#__system___float_fromuns
12404     13 FB 61 F5 | 	xor	result1, local05
12408     FD 14 02 F6 | 	mov	arg02, result1
1240c     10 13 02 F6 | 	mov	arg01, local02
12410     01 16 06 F6 | 	mov	arg03, #1
12414     1C DC B0 FD | 	call	#__system___float_cmp
12418     01 FA 55 F2 | 	cmps	result1, #1 wc
1241c     00 1E 26 C6 |  if_b	not	local01, #0
12420     A7 1E 62 FC | 	wrlong	local01, fp
12424     58 03 90 FD | 	jmp	#LR__1443
12428                 | LR__1432
12428                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
12428     08 4E 05 F1 | 	add	fp, #8
1242c     A7 1E 02 FB | 	rdlong	local01, fp
12430     08 4E 85 F1 | 	sub	fp, #8
12434     1E 1E 0E F2 | 	cmp	local01, #30 wz
12438     14 4E 05 A1 |  if_e	add	fp, #20
1243c     A7 24 02 AB |  if_e	rdlong	local04, fp
12440     14 4E 85 A1 |  if_e	sub	fp, #20
12444     12 23 02 A6 |  if_e	mov	local03, local04
12448     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1244c     38 00 90 5D |  if_ne	jmp	#LR__1433
12450     00 1E 06 F6 | 	mov	local01, #0
12454     A7 20 02 FB | 	rdlong	local02, fp
12458     0C 4E 05 F1 | 	add	fp, #12
1245c     A7 12 02 FB | 	rdlong	arg01, fp
12460     0C 4E 85 F1 | 	sub	fp, #12
12464     94 D3 B0 FD | 	call	#__system___float_fromuns
12468     FD 14 02 F6 | 	mov	arg02, result1
1246c     10 13 02 F6 | 	mov	arg01, local02
12470     01 16 06 F6 | 	mov	arg03, #1
12474     BC DB B0 FD | 	call	#__system___float_cmp
12478     01 FA 55 F2 | 	cmps	result1, #1 wc
1247c     00 1E 26 C6 |  if_b	not	local01, #0
12480     A7 1E 62 FC | 	wrlong	local01, fp
12484     F8 02 90 FD | 	jmp	#LR__1443
12488                 | LR__1433
12488                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
12488     08 4E 05 F1 | 	add	fp, #8
1248c     A7 1E 02 FB | 	rdlong	local01, fp
12490     08 4E 85 F1 | 	sub	fp, #8
12494     1C 1E 0E F2 | 	cmp	local01, #28 wz
12498     14 4E 05 A1 |  if_e	add	fp, #20
1249c     A7 24 02 AB |  if_e	rdlong	local04, fp
124a0     14 4E 85 A1 |  if_e	sub	fp, #20
124a4     12 23 02 A6 |  if_e	mov	local03, local04
124a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
124ac     44 00 90 5D |  if_ne	jmp	#LR__1434
124b0     00 1E 06 F6 | 	mov	local01, #0
124b4     A7 12 02 FB | 	rdlong	arg01, fp
124b8     09 13 52 F6 | 	abs	arg01, arg01 wc
124bc     1F 26 C6 C9 |  if_b	decod	local05, #31
124c0     00 26 06 36 |  if_ae	mov	local05, #0
124c4     34 D3 B0 FD | 	call	#__system___float_fromuns
124c8     13 FB 61 F5 | 	xor	result1, local05
124cc     FD 12 02 F6 | 	mov	arg01, result1
124d0     0C 4E 05 F1 | 	add	fp, #12
124d4     A7 14 02 FB | 	rdlong	arg02, fp
124d8     0C 4E 85 F1 | 	sub	fp, #12
124dc     01 16 06 F6 | 	mov	arg03, #1
124e0     50 DB B0 FD | 	call	#__system___float_cmp
124e4     01 FA 55 F2 | 	cmps	result1, #1 wc
124e8     00 1E 26 C6 |  if_b	not	local01, #0
124ec     A7 1E 62 FC | 	wrlong	local01, fp
124f0     8C 02 90 FD | 	jmp	#LR__1443
124f4                 | LR__1434
124f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
124f4     08 4E 05 F1 | 	add	fp, #8
124f8     A7 1E 02 FB | 	rdlong	local01, fp
124fc     08 4E 85 F1 | 	sub	fp, #8
12500     1C 1E 0E F2 | 	cmp	local01, #28 wz
12504     14 4E 05 A1 |  if_e	add	fp, #20
12508     A7 24 02 AB |  if_e	rdlong	local04, fp
1250c     14 4E 85 A1 |  if_e	sub	fp, #20
12510     12 23 02 A6 |  if_e	mov	local03, local04
12514     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12518     24 00 90 5D |  if_ne	jmp	#LR__1435
1251c     00 1E 06 F6 | 	mov	local01, #0
12520     A7 20 02 FB | 	rdlong	local02, fp
12524     0C 4E 05 F1 | 	add	fp, #12
12528     A7 22 02 FB | 	rdlong	local03, fp
1252c     0C 4E 85 F1 | 	sub	fp, #12
12530     11 21 5A F2 | 	cmps	local02, local03 wcz
12534     01 1E 66 E6 |  if_be	neg	local01, #1
12538     A7 1E 62 FC | 	wrlong	local01, fp
1253c     40 02 90 FD | 	jmp	#LR__1443
12540                 | LR__1435
12540                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
12540     08 4E 05 F1 | 	add	fp, #8
12544     A7 1E 02 FB | 	rdlong	local01, fp
12548     08 4E 85 F1 | 	sub	fp, #8
1254c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12550     14 4E 05 A1 |  if_e	add	fp, #20
12554     A7 24 02 AB |  if_e	rdlong	local04, fp
12558     14 4E 85 A1 |  if_e	sub	fp, #20
1255c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12560     24 00 90 5D |  if_ne	jmp	#LR__1436
12564     00 1E 06 F6 | 	mov	local01, #0
12568     A7 20 02 FB | 	rdlong	local02, fp
1256c     0C 4E 05 F1 | 	add	fp, #12
12570     A7 22 02 FB | 	rdlong	local03, fp
12574     0C 4E 85 F1 | 	sub	fp, #12
12578     11 21 5A F2 | 	cmps	local02, local03 wcz
1257c     01 1E 66 E6 |  if_be	neg	local01, #1
12580     A7 1E 62 FC | 	wrlong	local01, fp
12584     F8 01 90 FD | 	jmp	#LR__1443
12588                 | LR__1436
12588                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
12588     08 4E 05 F1 | 	add	fp, #8
1258c     A7 1E 02 FB | 	rdlong	local01, fp
12590     08 4E 85 F1 | 	sub	fp, #8
12594     1D 1E 0E F2 | 	cmp	local01, #29 wz
12598     14 4E 05 A1 |  if_e	add	fp, #20
1259c     A7 22 02 AB |  if_e	rdlong	local03, fp
125a0     14 4E 85 A1 |  if_e	sub	fp, #20
125a4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
125a8     34 00 90 5D |  if_ne	jmp	#LR__1437
125ac     00 1E 06 F6 | 	mov	local01, #0
125b0     A7 12 02 FB | 	rdlong	arg01, fp
125b4     44 D2 B0 FD | 	call	#__system___float_fromuns
125b8     FD 12 02 F6 | 	mov	arg01, result1
125bc     0C 4E 05 F1 | 	add	fp, #12
125c0     A7 14 02 FB | 	rdlong	arg02, fp
125c4     0C 4E 85 F1 | 	sub	fp, #12
125c8     01 16 06 F6 | 	mov	arg03, #1
125cc     64 DA B0 FD | 	call	#__system___float_cmp
125d0     01 FA 55 F2 | 	cmps	result1, #1 wc
125d4     00 1E 26 C6 |  if_b	not	local01, #0
125d8     A7 1E 62 FC | 	wrlong	local01, fp
125dc     A0 01 90 FD | 	jmp	#LR__1443
125e0                 | LR__1437
125e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
125e0     08 4E 05 F1 | 	add	fp, #8
125e4     A7 1E 02 FB | 	rdlong	local01, fp
125e8     08 4E 85 F1 | 	sub	fp, #8
125ec     1D 1E 0E F2 | 	cmp	local01, #29 wz
125f0     14 4E 05 A1 |  if_e	add	fp, #20
125f4     A7 22 02 AB |  if_e	rdlong	local03, fp
125f8     14 4E 85 A1 |  if_e	sub	fp, #20
125fc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12600     24 00 90 5D |  if_ne	jmp	#LR__1438
12604     00 1E 06 F6 | 	mov	local01, #0
12608     A7 20 02 FB | 	rdlong	local02, fp
1260c     0C 4E 05 F1 | 	add	fp, #12
12610     A7 22 02 FB | 	rdlong	local03, fp
12614     0C 4E 85 F1 | 	sub	fp, #12
12618     11 21 5A F2 | 	cmps	local02, local03 wcz
1261c     01 1E 66 E6 |  if_be	neg	local01, #1
12620     A7 1E 62 FC | 	wrlong	local01, fp
12624     58 01 90 FD | 	jmp	#LR__1443
12628                 | LR__1438
12628                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
12628     08 4E 05 F1 | 	add	fp, #8
1262c     A7 1E 02 FB | 	rdlong	local01, fp
12630     08 4E 85 F1 | 	sub	fp, #8
12634     1D 1E 0E F2 | 	cmp	local01, #29 wz
12638     14 4E 05 A1 |  if_e	add	fp, #20
1263c     A7 22 02 AB |  if_e	rdlong	local03, fp
12640     14 4E 85 A1 |  if_e	sub	fp, #20
12644     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12648     24 00 90 5D |  if_ne	jmp	#LR__1439
1264c     00 1E 06 F6 | 	mov	local01, #0
12650     A7 20 02 FB | 	rdlong	local02, fp
12654     0C 4E 05 F1 | 	add	fp, #12
12658     A7 22 02 FB | 	rdlong	local03, fp
1265c     0C 4E 85 F1 | 	sub	fp, #12
12660     11 21 1A F2 | 	cmp	local02, local03 wcz
12664     01 1E 66 E6 |  if_be	neg	local01, #1
12668     A7 1E 62 FC | 	wrlong	local01, fp
1266c     10 01 90 FD | 	jmp	#LR__1443
12670                 | LR__1439
12670                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
12670     08 4E 05 F1 | 	add	fp, #8
12674     A7 1E 02 FB | 	rdlong	local01, fp
12678     08 4E 85 F1 | 	sub	fp, #8
1267c     2B 1E 0E F2 | 	cmp	local01, #43 wz
12680     14 4E 05 A1 |  if_e	add	fp, #20
12684     A7 22 02 AB |  if_e	rdlong	local03, fp
12688     14 4E 85 A1 |  if_e	sub	fp, #20
1268c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12690     30 00 90 5D |  if_ne	jmp	#LR__1440
12694     00 1E 06 F6 | 	mov	local01, #0
12698     A7 12 02 FB | 	rdlong	arg01, fp
1269c     B4 BD BF FD | 	call	#_convertstring
126a0     FD 12 02 F6 | 	mov	arg01, result1
126a4     0C 4E 05 F1 | 	add	fp, #12
126a8     A7 14 02 FB | 	rdlong	arg02, fp
126ac     0C 4E 85 F1 | 	sub	fp, #12
126b0     F8 A9 B0 FD | 	call	#__system___string_cmp
126b4     01 FA 55 F2 | 	cmps	result1, #1 wc
126b8     00 1E 26 C6 |  if_b	not	local01, #0
126bc     A7 1E 62 FC | 	wrlong	local01, fp
126c0     BC 00 90 FD | 	jmp	#LR__1443
126c4                 | LR__1440
126c4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
126c4     08 4E 05 F1 | 	add	fp, #8
126c8     A7 1E 02 FB | 	rdlong	local01, fp
126cc     08 4E 85 F1 | 	sub	fp, #8
126d0     1F 1E 0E F2 | 	cmp	local01, #31 wz
126d4     14 4E 05 A1 |  if_e	add	fp, #20
126d8     A7 22 02 AB |  if_e	rdlong	local03, fp
126dc     14 4E 85 A1 |  if_e	sub	fp, #20
126e0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
126e4     34 00 90 5D |  if_ne	jmp	#LR__1441
126e8     00 1E 06 F6 | 	mov	local01, #0
126ec     A7 20 02 FB | 	rdlong	local02, fp
126f0     0C 4E 05 F1 | 	add	fp, #12
126f4     A7 12 02 FB | 	rdlong	arg01, fp
126f8     0C 4E 85 F1 | 	sub	fp, #12
126fc     54 BD BF FD | 	call	#_convertstring
12700     FD 14 02 F6 | 	mov	arg02, result1
12704     10 13 02 F6 | 	mov	arg01, local02
12708     A0 A9 B0 FD | 	call	#__system___string_cmp
1270c     01 FA 55 F2 | 	cmps	result1, #1 wc
12710     00 1E 26 C6 |  if_b	not	local01, #0
12714     A7 1E 62 FC | 	wrlong	local01, fp
12718     64 00 90 FD | 	jmp	#LR__1443
1271c                 | LR__1441
1271c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1271c     08 4E 05 F1 | 	add	fp, #8
12720     A7 1E 02 FB | 	rdlong	local01, fp
12724     08 4E 85 F1 | 	sub	fp, #8
12728     2B 1E 0E F2 | 	cmp	local01, #43 wz
1272c     14 4E 05 A1 |  if_e	add	fp, #20
12730     A7 22 02 AB |  if_e	rdlong	local03, fp
12734     14 4E 85 A1 |  if_e	sub	fp, #20
12738     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1273c     3C 00 90 5D |  if_ne	jmp	#LR__1442
12740     00 1E 06 F6 | 	mov	local01, #0
12744     A7 12 02 FB | 	rdlong	arg01, fp
12748     08 BD BF FD | 	call	#_convertstring
1274c     FD 20 02 F6 | 	mov	local02, result1
12750     0C 4E 05 F1 | 	add	fp, #12
12754     A7 12 02 FB | 	rdlong	arg01, fp
12758     0C 4E 85 F1 | 	sub	fp, #12
1275c     F4 BC BF FD | 	call	#_convertstring
12760     FD 14 02 F6 | 	mov	arg02, result1
12764     10 13 02 F6 | 	mov	arg01, local02
12768     40 A9 B0 FD | 	call	#__system___string_cmp
1276c     01 FA 55 F2 | 	cmps	result1, #1 wc
12770     00 1E 26 C6 |  if_b	not	local01, #0
12774     A7 1E 62 FC | 	wrlong	local01, fp
12778     04 00 90 FD | 	jmp	#LR__1443
1277c                 | LR__1442
1277c     A7 00 68 FC | 	wrlong	#0, fp
12780                 | LR__1443
12780     08 4E 05 F1 | 	add	fp, #8
12784     A7 38 68 FC | 	wrlong	#28, fp
12788     08 4E 85 F1 | 	sub	fp, #8
1278c     A7 12 02 F6 | 	mov	arg01, fp
12790     B0 7A BF FD | 	call	#_push
12794     A7 F0 03 F6 | 	mov	ptra, fp
12798     B2 00 A0 FD | 	call	#popregs_
1279c                 | _do_le_ret
1279c     2D 00 64 FD | 	ret
127a0                 | 
127a0                 | ' 
127a0                 | ' 
127a0                 | ' sub do_ne
127a0                 | _do_ne
127a0     05 4A 05 F6 | 	mov	COUNT_, #5
127a4     A8 00 A0 FD | 	call	#pushregs_
127a8     18 F0 07 F1 | 	add	ptra, #24
127ac     FC 79 BF FD | 	call	#_pop
127b0     FD 1E 02 F6 | 	mov	local01, result1
127b4     FE 20 02 F6 | 	mov	local02, result2
127b8     FF 22 02 F6 | 	mov	local03, result3
127bc     0C 4E 05 F1 | 	add	fp, #12
127c0     A7 1E 62 FC | 	wrlong	local01, fp
127c4     04 4E 05 F1 | 	add	fp, #4
127c8     A7 20 62 FC | 	wrlong	local02, fp
127cc     04 4E 05 F1 | 	add	fp, #4
127d0     A7 22 62 FC | 	wrlong	local03, fp
127d4     14 4E 85 F1 | 	sub	fp, #20
127d8     D0 79 BF FD | 	call	#_pop
127dc     FF 22 02 F6 | 	mov	local03, result3
127e0     A7 FA 61 FC | 	wrlong	result1, fp
127e4     04 4E 05 F1 | 	add	fp, #4
127e8     A7 FC 61 FC | 	wrlong	result2, fp
127ec     04 4E 05 F1 | 	add	fp, #4
127f0     A7 22 62 FC | 	wrlong	local03, fp
127f4                 | ' t2=pop()
127f4                 | ' t1=pop()
127f4                 | ' 
127f4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
127f4     08 4E 85 F1 | 	sub	fp, #8
127f8     1F 22 0E F2 | 	cmp	local03, #31 wz
127fc     14 4E 05 A1 |  if_e	add	fp, #20
12800     A7 24 02 AB |  if_e	rdlong	local04, fp
12804     14 4E 85 A1 |  if_e	sub	fp, #20
12808     12 23 02 A6 |  if_e	mov	local03, local04
1280c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12810     28 00 90 5D |  if_ne	jmp	#LR__1450
12814     00 1E 06 F6 | 	mov	local01, #0
12818     A7 12 02 FB | 	rdlong	arg01, fp
1281c     0C 4E 05 F1 | 	add	fp, #12
12820     A7 14 02 FB | 	rdlong	arg02, fp
12824     0C 4E 85 F1 | 	sub	fp, #12
12828     80 A8 B0 FD | 	call	#__system___string_cmp
1282c     00 FA 0D F2 | 	cmp	result1, #0 wz
12830     00 1E 26 56 |  if_ne	not	local01, #0
12834     A7 1E 62 FC | 	wrlong	local01, fp
12838     1C 04 90 FD | 	jmp	#LR__1463
1283c                 | LR__1450
1283c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1283c     08 4E 05 F1 | 	add	fp, #8
12840     A7 1E 02 FB | 	rdlong	local01, fp
12844     08 4E 85 F1 | 	sub	fp, #8
12848     1E 1E 0E F2 | 	cmp	local01, #30 wz
1284c     14 4E 05 A1 |  if_e	add	fp, #20
12850     A7 24 02 AB |  if_e	rdlong	local04, fp
12854     14 4E 85 A1 |  if_e	sub	fp, #20
12858     12 23 02 A6 |  if_e	mov	local03, local04
1285c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12860     2C 00 90 5D |  if_ne	jmp	#LR__1451
12864     00 1E 06 F6 | 	mov	local01, #0
12868     A7 12 02 FB | 	rdlong	arg01, fp
1286c     0C 4E 05 F1 | 	add	fp, #12
12870     A7 14 02 FB | 	rdlong	arg02, fp
12874     0C 4E 85 F1 | 	sub	fp, #12
12878     01 16 06 F6 | 	mov	arg03, #1
1287c     B4 D7 B0 FD | 	call	#__system___float_cmp
12880     00 FA 0D F2 | 	cmp	result1, #0 wz
12884     00 1E 26 56 |  if_ne	not	local01, #0
12888     A7 1E 62 FC | 	wrlong	local01, fp
1288c     C8 03 90 FD | 	jmp	#LR__1463
12890                 | LR__1451
12890                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
12890     08 4E 05 F1 | 	add	fp, #8
12894     A7 1E 02 FB | 	rdlong	local01, fp
12898     08 4E 85 F1 | 	sub	fp, #8
1289c     1E 1E 0E F2 | 	cmp	local01, #30 wz
128a0     14 4E 05 A1 |  if_e	add	fp, #20
128a4     A7 24 02 AB |  if_e	rdlong	local04, fp
128a8     14 4E 85 A1 |  if_e	sub	fp, #20
128ac     12 23 02 A6 |  if_e	mov	local03, local04
128b0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
128b4     48 00 90 5D |  if_ne	jmp	#LR__1452
128b8     00 1E 06 F6 | 	mov	local01, #0
128bc     A7 20 02 FB | 	rdlong	local02, fp
128c0     0C 4E 05 F1 | 	add	fp, #12
128c4     A7 12 02 FB | 	rdlong	arg01, fp
128c8     0C 4E 85 F1 | 	sub	fp, #12
128cc     09 13 52 F6 | 	abs	arg01, arg01 wc
128d0     1F 26 C6 C9 |  if_b	decod	local05, #31
128d4     00 26 06 36 |  if_ae	mov	local05, #0
128d8     20 CF B0 FD | 	call	#__system___float_fromuns
128dc     13 FB 61 F5 | 	xor	result1, local05
128e0     FD 14 02 F6 | 	mov	arg02, result1
128e4     10 13 02 F6 | 	mov	arg01, local02
128e8     01 16 06 F6 | 	mov	arg03, #1
128ec     44 D7 B0 FD | 	call	#__system___float_cmp
128f0     00 FA 0D F2 | 	cmp	result1, #0 wz
128f4     00 1E 26 56 |  if_ne	not	local01, #0
128f8     A7 1E 62 FC | 	wrlong	local01, fp
128fc     58 03 90 FD | 	jmp	#LR__1463
12900                 | LR__1452
12900                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
12900     08 4E 05 F1 | 	add	fp, #8
12904     A7 1E 02 FB | 	rdlong	local01, fp
12908     08 4E 85 F1 | 	sub	fp, #8
1290c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12910     14 4E 05 A1 |  if_e	add	fp, #20
12914     A7 24 02 AB |  if_e	rdlong	local04, fp
12918     14 4E 85 A1 |  if_e	sub	fp, #20
1291c     12 23 02 A6 |  if_e	mov	local03, local04
12920     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12924     38 00 90 5D |  if_ne	jmp	#LR__1453
12928     00 1E 06 F6 | 	mov	local01, #0
1292c     A7 20 02 FB | 	rdlong	local02, fp
12930     0C 4E 05 F1 | 	add	fp, #12
12934     A7 12 02 FB | 	rdlong	arg01, fp
12938     0C 4E 85 F1 | 	sub	fp, #12
1293c     BC CE B0 FD | 	call	#__system___float_fromuns
12940     FD 14 02 F6 | 	mov	arg02, result1
12944     10 13 02 F6 | 	mov	arg01, local02
12948     01 16 06 F6 | 	mov	arg03, #1
1294c     E4 D6 B0 FD | 	call	#__system___float_cmp
12950     00 FA 0D F2 | 	cmp	result1, #0 wz
12954     00 1E 26 56 |  if_ne	not	local01, #0
12958     A7 1E 62 FC | 	wrlong	local01, fp
1295c     F8 02 90 FD | 	jmp	#LR__1463
12960                 | LR__1453
12960                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
12960     08 4E 05 F1 | 	add	fp, #8
12964     A7 1E 02 FB | 	rdlong	local01, fp
12968     08 4E 85 F1 | 	sub	fp, #8
1296c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12970     14 4E 05 A1 |  if_e	add	fp, #20
12974     A7 24 02 AB |  if_e	rdlong	local04, fp
12978     14 4E 85 A1 |  if_e	sub	fp, #20
1297c     12 23 02 A6 |  if_e	mov	local03, local04
12980     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12984     44 00 90 5D |  if_ne	jmp	#LR__1454
12988     00 1E 06 F6 | 	mov	local01, #0
1298c     A7 12 02 FB | 	rdlong	arg01, fp
12990     09 13 52 F6 | 	abs	arg01, arg01 wc
12994     1F 26 C6 C9 |  if_b	decod	local05, #31
12998     00 26 06 36 |  if_ae	mov	local05, #0
1299c     5C CE B0 FD | 	call	#__system___float_fromuns
129a0     13 FB 61 F5 | 	xor	result1, local05
129a4     FD 12 02 F6 | 	mov	arg01, result1
129a8     0C 4E 05 F1 | 	add	fp, #12
129ac     A7 14 02 FB | 	rdlong	arg02, fp
129b0     0C 4E 85 F1 | 	sub	fp, #12
129b4     01 16 06 F6 | 	mov	arg03, #1
129b8     78 D6 B0 FD | 	call	#__system___float_cmp
129bc     00 FA 0D F2 | 	cmp	result1, #0 wz
129c0     00 1E 26 56 |  if_ne	not	local01, #0
129c4     A7 1E 62 FC | 	wrlong	local01, fp
129c8     8C 02 90 FD | 	jmp	#LR__1463
129cc                 | LR__1454
129cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
129cc     08 4E 05 F1 | 	add	fp, #8
129d0     A7 1E 02 FB | 	rdlong	local01, fp
129d4     08 4E 85 F1 | 	sub	fp, #8
129d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
129dc     14 4E 05 A1 |  if_e	add	fp, #20
129e0     A7 24 02 AB |  if_e	rdlong	local04, fp
129e4     14 4E 85 A1 |  if_e	sub	fp, #20
129e8     12 23 02 A6 |  if_e	mov	local03, local04
129ec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
129f0     24 00 90 5D |  if_ne	jmp	#LR__1455
129f4     00 1E 06 F6 | 	mov	local01, #0
129f8     A7 20 02 FB | 	rdlong	local02, fp
129fc     0C 4E 05 F1 | 	add	fp, #12
12a00     A7 22 02 FB | 	rdlong	local03, fp
12a04     0C 4E 85 F1 | 	sub	fp, #12
12a08     11 21 0A F2 | 	cmp	local02, local03 wz
12a0c     01 1E 66 56 |  if_ne	neg	local01, #1
12a10     A7 1E 62 FC | 	wrlong	local01, fp
12a14     40 02 90 FD | 	jmp	#LR__1463
12a18                 | LR__1455
12a18                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
12a18     08 4E 05 F1 | 	add	fp, #8
12a1c     A7 1E 02 FB | 	rdlong	local01, fp
12a20     08 4E 85 F1 | 	sub	fp, #8
12a24     1C 1E 0E F2 | 	cmp	local01, #28 wz
12a28     14 4E 05 A1 |  if_e	add	fp, #20
12a2c     A7 24 02 AB |  if_e	rdlong	local04, fp
12a30     14 4E 85 A1 |  if_e	sub	fp, #20
12a34     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12a38     24 00 90 5D |  if_ne	jmp	#LR__1456
12a3c     00 1E 06 F6 | 	mov	local01, #0
12a40     A7 20 02 FB | 	rdlong	local02, fp
12a44     0C 4E 05 F1 | 	add	fp, #12
12a48     A7 22 02 FB | 	rdlong	local03, fp
12a4c     0C 4E 85 F1 | 	sub	fp, #12
12a50     11 21 0A F2 | 	cmp	local02, local03 wz
12a54     01 1E 66 56 |  if_ne	neg	local01, #1
12a58     A7 1E 62 FC | 	wrlong	local01, fp
12a5c     F8 01 90 FD | 	jmp	#LR__1463
12a60                 | LR__1456
12a60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
12a60     08 4E 05 F1 | 	add	fp, #8
12a64     A7 1E 02 FB | 	rdlong	local01, fp
12a68     08 4E 85 F1 | 	sub	fp, #8
12a6c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12a70     14 4E 05 A1 |  if_e	add	fp, #20
12a74     A7 22 02 AB |  if_e	rdlong	local03, fp
12a78     14 4E 85 A1 |  if_e	sub	fp, #20
12a7c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12a80     34 00 90 5D |  if_ne	jmp	#LR__1457
12a84     00 1E 06 F6 | 	mov	local01, #0
12a88     A7 12 02 FB | 	rdlong	arg01, fp
12a8c     6C CD B0 FD | 	call	#__system___float_fromuns
12a90     FD 12 02 F6 | 	mov	arg01, result1
12a94     0C 4E 05 F1 | 	add	fp, #12
12a98     A7 14 02 FB | 	rdlong	arg02, fp
12a9c     0C 4E 85 F1 | 	sub	fp, #12
12aa0     01 16 06 F6 | 	mov	arg03, #1
12aa4     8C D5 B0 FD | 	call	#__system___float_cmp
12aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
12aac     00 1E 26 56 |  if_ne	not	local01, #0
12ab0     A7 1E 62 FC | 	wrlong	local01, fp
12ab4     A0 01 90 FD | 	jmp	#LR__1463
12ab8                 | LR__1457
12ab8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
12ab8     08 4E 05 F1 | 	add	fp, #8
12abc     A7 1E 02 FB | 	rdlong	local01, fp
12ac0     08 4E 85 F1 | 	sub	fp, #8
12ac4     1D 1E 0E F2 | 	cmp	local01, #29 wz
12ac8     14 4E 05 A1 |  if_e	add	fp, #20
12acc     A7 22 02 AB |  if_e	rdlong	local03, fp
12ad0     14 4E 85 A1 |  if_e	sub	fp, #20
12ad4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12ad8     24 00 90 5D |  if_ne	jmp	#LR__1458
12adc     00 1E 06 F6 | 	mov	local01, #0
12ae0     A7 20 02 FB | 	rdlong	local02, fp
12ae4     0C 4E 05 F1 | 	add	fp, #12
12ae8     A7 22 02 FB | 	rdlong	local03, fp
12aec     0C 4E 85 F1 | 	sub	fp, #12
12af0     11 21 0A F2 | 	cmp	local02, local03 wz
12af4     01 1E 66 56 |  if_ne	neg	local01, #1
12af8     A7 1E 62 FC | 	wrlong	local01, fp
12afc     58 01 90 FD | 	jmp	#LR__1463
12b00                 | LR__1458
12b00                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
12b00     08 4E 05 F1 | 	add	fp, #8
12b04     A7 1E 02 FB | 	rdlong	local01, fp
12b08     08 4E 85 F1 | 	sub	fp, #8
12b0c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12b10     14 4E 05 A1 |  if_e	add	fp, #20
12b14     A7 22 02 AB |  if_e	rdlong	local03, fp
12b18     14 4E 85 A1 |  if_e	sub	fp, #20
12b1c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12b20     24 00 90 5D |  if_ne	jmp	#LR__1459
12b24     00 1E 06 F6 | 	mov	local01, #0
12b28     A7 20 02 FB | 	rdlong	local02, fp
12b2c     0C 4E 05 F1 | 	add	fp, #12
12b30     A7 22 02 FB | 	rdlong	local03, fp
12b34     0C 4E 85 F1 | 	sub	fp, #12
12b38     11 21 0A F2 | 	cmp	local02, local03 wz
12b3c     01 1E 66 56 |  if_ne	neg	local01, #1
12b40     A7 1E 62 FC | 	wrlong	local01, fp
12b44     10 01 90 FD | 	jmp	#LR__1463
12b48                 | LR__1459
12b48                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
12b48     08 4E 05 F1 | 	add	fp, #8
12b4c     A7 1E 02 FB | 	rdlong	local01, fp
12b50     08 4E 85 F1 | 	sub	fp, #8
12b54     2B 1E 0E F2 | 	cmp	local01, #43 wz
12b58     14 4E 05 A1 |  if_e	add	fp, #20
12b5c     A7 22 02 AB |  if_e	rdlong	local03, fp
12b60     14 4E 85 A1 |  if_e	sub	fp, #20
12b64     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12b68     30 00 90 5D |  if_ne	jmp	#LR__1460
12b6c     00 1E 06 F6 | 	mov	local01, #0
12b70     A7 12 02 FB | 	rdlong	arg01, fp
12b74     DC B8 BF FD | 	call	#_convertstring
12b78     FD 12 02 F6 | 	mov	arg01, result1
12b7c     0C 4E 05 F1 | 	add	fp, #12
12b80     A7 14 02 FB | 	rdlong	arg02, fp
12b84     0C 4E 85 F1 | 	sub	fp, #12
12b88     20 A5 B0 FD | 	call	#__system___string_cmp
12b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
12b90     00 1E 26 56 |  if_ne	not	local01, #0
12b94     A7 1E 62 FC | 	wrlong	local01, fp
12b98     BC 00 90 FD | 	jmp	#LR__1463
12b9c                 | LR__1460
12b9c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
12b9c     08 4E 05 F1 | 	add	fp, #8
12ba0     A7 1E 02 FB | 	rdlong	local01, fp
12ba4     08 4E 85 F1 | 	sub	fp, #8
12ba8     1F 1E 0E F2 | 	cmp	local01, #31 wz
12bac     14 4E 05 A1 |  if_e	add	fp, #20
12bb0     A7 22 02 AB |  if_e	rdlong	local03, fp
12bb4     14 4E 85 A1 |  if_e	sub	fp, #20
12bb8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12bbc     34 00 90 5D |  if_ne	jmp	#LR__1461
12bc0     00 1E 06 F6 | 	mov	local01, #0
12bc4     A7 20 02 FB | 	rdlong	local02, fp
12bc8     0C 4E 05 F1 | 	add	fp, #12
12bcc     A7 12 02 FB | 	rdlong	arg01, fp
12bd0     0C 4E 85 F1 | 	sub	fp, #12
12bd4     7C B8 BF FD | 	call	#_convertstring
12bd8     FD 14 02 F6 | 	mov	arg02, result1
12bdc     10 13 02 F6 | 	mov	arg01, local02
12be0     C8 A4 B0 FD | 	call	#__system___string_cmp
12be4     00 FA 0D F2 | 	cmp	result1, #0 wz
12be8     00 1E 26 56 |  if_ne	not	local01, #0
12bec     A7 1E 62 FC | 	wrlong	local01, fp
12bf0     64 00 90 FD | 	jmp	#LR__1463
12bf4                 | LR__1461
12bf4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
12bf4     08 4E 05 F1 | 	add	fp, #8
12bf8     A7 1E 02 FB | 	rdlong	local01, fp
12bfc     08 4E 85 F1 | 	sub	fp, #8
12c00     2B 1E 0E F2 | 	cmp	local01, #43 wz
12c04     14 4E 05 A1 |  if_e	add	fp, #20
12c08     A7 22 02 AB |  if_e	rdlong	local03, fp
12c0c     14 4E 85 A1 |  if_e	sub	fp, #20
12c10     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12c14     3C 00 90 5D |  if_ne	jmp	#LR__1462
12c18     00 1E 06 F6 | 	mov	local01, #0
12c1c     A7 12 02 FB | 	rdlong	arg01, fp
12c20     30 B8 BF FD | 	call	#_convertstring
12c24     FD 20 02 F6 | 	mov	local02, result1
12c28     0C 4E 05 F1 | 	add	fp, #12
12c2c     A7 12 02 FB | 	rdlong	arg01, fp
12c30     0C 4E 85 F1 | 	sub	fp, #12
12c34     1C B8 BF FD | 	call	#_convertstring
12c38     FD 14 02 F6 | 	mov	arg02, result1
12c3c     10 13 02 F6 | 	mov	arg01, local02
12c40     68 A4 B0 FD | 	call	#__system___string_cmp
12c44     00 FA 0D F2 | 	cmp	result1, #0 wz
12c48     00 1E 26 56 |  if_ne	not	local01, #0
12c4c     A7 1E 62 FC | 	wrlong	local01, fp
12c50     04 00 90 FD | 	jmp	#LR__1463
12c54                 | LR__1462
12c54     A7 00 68 FC | 	wrlong	#0, fp
12c58                 | LR__1463
12c58     08 4E 05 F1 | 	add	fp, #8
12c5c     A7 38 68 FC | 	wrlong	#28, fp
12c60     08 4E 85 F1 | 	sub	fp, #8
12c64     A7 12 02 F6 | 	mov	arg01, fp
12c68     D8 75 BF FD | 	call	#_push
12c6c     A7 F0 03 F6 | 	mov	ptra, fp
12c70     B2 00 A0 FD | 	call	#popregs_
12c74                 | _do_ne_ret
12c74     2D 00 64 FD | 	ret
12c78                 | 
12c78                 | ' 
12c78                 | ' 
12c78                 | ' 
12c78                 | ' ' -------------------   convert a variable on the top of stack to integer
12c78                 | ' 
12c78                 | ' sub do_converttoint
12c78                 | _do_converttoint
12c78     02 4A 05 F6 | 	mov	COUNT_, #2
12c7c     A8 00 A0 FD | 	call	#pushregs_
12c80     18 F0 07 F1 | 	add	ptra, #24
12c84     24 75 BF FD | 	call	#_pop
12c88     FE 1E 02 F6 | 	mov	local01, result2
12c8c     FF 20 02 F6 | 	mov	local02, result3
12c90     A7 FA 61 FC | 	wrlong	result1, fp
12c94     04 4E 05 F1 | 	add	fp, #4
12c98     A7 1E 62 FC | 	wrlong	local01, fp
12c9c     04 4E 05 F1 | 	add	fp, #4
12ca0     A7 20 62 FC | 	wrlong	local02, fp
12ca4                 | ' t1=pop() 
12ca4                 | ' select case t1.result_type
12ca4     08 4E 85 F1 | 	sub	fp, #8
12ca8     1C 20 0E F2 | 	cmp	local02, #28 wz
12cac     2C 00 90 AD |  if_e	jmp	#LR__1470
12cb0     1D 20 0E F2 | 	cmp	local02, #29 wz
12cb4     40 00 90 AD |  if_e	jmp	#LR__1471
12cb8     1E 20 0E F2 | 	cmp	local02, #30 wz
12cbc     54 00 90 AD |  if_e	jmp	#LR__1472
12cc0     1F 20 0E F2 | 	cmp	local02, #31 wz
12cc4     70 00 90 AD |  if_e	jmp	#LR__1473
12cc8     2B 20 0E F2 | 	cmp	local02, #43 wz
12ccc     94 00 90 AD |  if_e	jmp	#LR__1474
12cd0     FF 20 0E F2 | 	cmp	local02, #255 wz
12cd4     C0 00 90 AD |  if_e	jmp	#LR__1475
12cd8     DC 00 90 FD | 	jmp	#LR__1476
12cdc                 | LR__1470
12cdc     A7 20 02 FB | 	rdlong	local02, fp
12ce0     0C 4E 05 F1 | 	add	fp, #12
12ce4     A7 20 62 FC | 	wrlong	local02, fp
12ce8     04 4E 05 F1 | 	add	fp, #4
12cec     A7 38 68 FC | 	wrlong	#28, fp
12cf0     10 4E 85 F1 | 	sub	fp, #16
12cf4     D4 00 90 FD | 	jmp	#LR__1477
12cf8                 | LR__1471
12cf8     A7 20 02 FB | 	rdlong	local02, fp
12cfc     0C 4E 05 F1 | 	add	fp, #12
12d00     A7 20 62 FC | 	wrlong	local02, fp
12d04     04 4E 05 F1 | 	add	fp, #4
12d08     A7 38 68 FC | 	wrlong	#28, fp
12d0c     10 4E 85 F1 | 	sub	fp, #16
12d10     B8 00 90 FD | 	jmp	#LR__1477
12d14                 | LR__1472
12d14     A7 12 02 FB | 	rdlong	arg01, fp
12d18     01 14 06 F6 | 	mov	arg02, #1
12d1c     A8 D3 B0 FD | 	call	#__system___float_tointeger
12d20     0C 4E 05 F1 | 	add	fp, #12
12d24     A7 FA 61 FC | 	wrlong	result1, fp
12d28     04 4E 05 F1 | 	add	fp, #4
12d2c     A7 38 68 FC | 	wrlong	#28, fp
12d30     10 4E 85 F1 | 	sub	fp, #16
12d34     94 00 90 FD | 	jmp	#LR__1477
12d38                 | LR__1473
12d38     A7 12 02 FB | 	rdlong	arg01, fp
12d3c     A8 D6 B0 FD | 	call	#__system____builtin_atof
12d40     FD 12 02 F6 | 	mov	arg01, result1
12d44     00 14 06 F6 | 	mov	arg02, #0
12d48     7C D3 B0 FD | 	call	#__system___float_tointeger
12d4c     0C 4E 05 F1 | 	add	fp, #12
12d50     A7 FA 61 FC | 	wrlong	result1, fp
12d54     04 4E 05 F1 | 	add	fp, #4
12d58     A7 38 68 FC | 	wrlong	#28, fp
12d5c     10 4E 85 F1 | 	sub	fp, #16
12d60     68 00 90 FD | 	jmp	#LR__1477
12d64                 | LR__1474
12d64     A7 12 02 FB | 	rdlong	arg01, fp
12d68     E8 B6 BF FD | 	call	#_convertstring
12d6c     FD 12 02 F6 | 	mov	arg01, result1
12d70     74 D6 B0 FD | 	call	#__system____builtin_atof
12d74     FD 12 02 F6 | 	mov	arg01, result1
12d78     00 14 06 F6 | 	mov	arg02, #0
12d7c     48 D3 B0 FD | 	call	#__system___float_tointeger
12d80     0C 4E 05 F1 | 	add	fp, #12
12d84     A7 FA 61 FC | 	wrlong	result1, fp
12d88     04 4E 05 F1 | 	add	fp, #4
12d8c     A7 38 68 FC | 	wrlong	#28, fp
12d90     10 4E 85 F1 | 	sub	fp, #16
12d94     34 00 90 FD | 	jmp	#LR__1477
12d98                 | LR__1475
12d98     0C 4E 05 F1 | 	add	fp, #12
12d9c     A7 00 68 FC | 	wrlong	#0, fp
12da0     0C 4E 85 F1 | 	sub	fp, #12
12da4     A7 20 02 FB | 	rdlong	local02, fp
12da8     10 4E 05 F1 | 	add	fp, #16
12dac     A7 20 62 FC | 	wrlong	local02, fp
12db0     10 4E 85 F1 | 	sub	fp, #16
12db4     14 00 90 FD | 	jmp	#LR__1477
12db8                 | LR__1476
12db8     0C 4E 05 F1 | 	add	fp, #12
12dbc     A7 00 68 FC | 	wrlong	#0, fp
12dc0     04 4E 05 F1 | 	add	fp, #4
12dc4     A7 02 68 FC | 	wrlong	#1, fp
12dc8     10 4E 85 F1 | 	sub	fp, #16
12dcc                 | LR__1477
12dcc     0C 4E 05 F1 | 	add	fp, #12
12dd0     A7 20 02 FB | 	rdlong	local02, fp
12dd4     0C 4E 85 F1 | 	sub	fp, #12
12dd8     A7 20 62 FC | 	wrlong	local02, fp
12ddc     10 4E 05 F1 | 	add	fp, #16
12de0     A7 20 02 FB | 	rdlong	local02, fp
12de4     08 4E 85 F1 | 	sub	fp, #8
12de8     A7 20 62 FC | 	wrlong	local02, fp
12dec     08 4E 85 F1 | 	sub	fp, #8
12df0     A7 12 02 F6 | 	mov	arg01, fp
12df4     4C 74 BF FD | 	call	#_push
12df8     A7 F0 03 F6 | 	mov	ptra, fp
12dfc     B2 00 A0 FD | 	call	#popregs_
12e00                 | _do_converttoint_ret
12e00     2D 00 64 FD | 	ret
12e04                 | 
12e04                 | ' 
12e04                 | ' function converttoint (t1 as expr_result) as integer
12e04                 | _converttoint
12e04     02 4A 05 F6 | 	mov	COUNT_, #2
12e08     A8 00 A0 FD | 	call	#pushregs_
12e0c     09 1F 02 F6 | 	mov	local01, arg01
12e10                 | ' 
12e10                 | ' select case t1.result_type
12e10     08 1E 06 F1 | 	add	local01, #8
12e14     0F 21 02 FB | 	rdlong	local02, local01
12e18     08 1E 86 F1 | 	sub	local01, #8
12e1c     1C 20 0E F2 | 	cmp	local02, #28 wz
12e20     24 00 90 AD |  if_e	jmp	#LR__1480
12e24     1D 20 0E F2 | 	cmp	local02, #29 wz
12e28     24 00 90 AD |  if_e	jmp	#LR__1481
12e2c     1E 20 0E F2 | 	cmp	local02, #30 wz
12e30     24 00 90 AD |  if_e	jmp	#LR__1482
12e34     1F 20 0E F2 | 	cmp	local02, #31 wz
12e38     2C 00 90 AD |  if_e	jmp	#LR__1483
12e3c     2B 20 0E F2 | 	cmp	local02, #43 wz
12e40     3C 00 90 AD |  if_e	jmp	#LR__1484
12e44     58 00 90 FD | 	jmp	#LR__1485
12e48                 | LR__1480
12e48     0F FB 01 FB | 	rdlong	result1, local01
12e4c     54 00 90 FD | 	jmp	#LR__1486
12e50                 | LR__1481
12e50     0F FB 01 FB | 	rdlong	result1, local01
12e54     4C 00 90 FD | 	jmp	#LR__1486
12e58                 | LR__1482
12e58     0F 13 02 FB | 	rdlong	arg01, local01
12e5c     01 14 06 F6 | 	mov	arg02, #1
12e60     64 D2 B0 FD | 	call	#__system___float_tointeger
12e64     3C 00 90 FD | 	jmp	#LR__1486
12e68                 | LR__1483
12e68     0F 13 02 FB | 	rdlong	arg01, local01
12e6c     78 D5 B0 FD | 	call	#__system____builtin_atof
12e70     FD 12 02 F6 | 	mov	arg01, result1
12e74     00 14 06 F6 | 	mov	arg02, #0
12e78     4C D2 B0 FD | 	call	#__system___float_tointeger
12e7c     24 00 90 FD | 	jmp	#LR__1486
12e80                 | LR__1484
12e80     0F 13 02 FB | 	rdlong	arg01, local01
12e84     CC B5 BF FD | 	call	#_convertstring
12e88     FD 12 02 F6 | 	mov	arg01, result1
12e8c     58 D5 B0 FD | 	call	#__system____builtin_atof
12e90     FD 12 02 F6 | 	mov	arg01, result1
12e94     00 14 06 F6 | 	mov	arg02, #0
12e98     2C D2 B0 FD | 	call	#__system___float_tointeger
12e9c     04 00 90 FD | 	jmp	#LR__1486
12ea0                 | LR__1485
12ea0     00 FA 05 F6 | 	mov	result1, #0
12ea4                 | LR__1486
12ea4     A7 F0 03 F6 | 	mov	ptra, fp
12ea8     B2 00 A0 FD | 	call	#popregs_
12eac                 | _converttoint_ret
12eac     2D 00 64 FD | 	ret
12eb0                 | 
12eb0                 | ' 
12eb0                 | ' function converttofloat (t1 as expr_result) as single
12eb0                 | _converttofloat
12eb0     03 4A 05 F6 | 	mov	COUNT_, #3
12eb4     A8 00 A0 FD | 	call	#pushregs_
12eb8     09 1F 02 F6 | 	mov	local01, arg01
12ebc                 | ' 
12ebc                 | ' select case t1.result_type
12ebc     08 1E 06 F1 | 	add	local01, #8
12ec0     0F 21 02 FB | 	rdlong	local02, local01
12ec4     08 1E 86 F1 | 	sub	local01, #8
12ec8     1C 20 0E F2 | 	cmp	local02, #28 wz
12ecc     24 00 90 AD |  if_e	jmp	#LR__1490
12ed0     1D 20 0E F2 | 	cmp	local02, #29 wz
12ed4     38 00 90 AD |  if_e	jmp	#LR__1491
12ed8     1E 20 0E F2 | 	cmp	local02, #30 wz
12edc     3C 00 90 AD |  if_e	jmp	#LR__1492
12ee0     1F 20 0E F2 | 	cmp	local02, #31 wz
12ee4     3C 00 90 AD |  if_e	jmp	#LR__1493
12ee8     2B 20 0E F2 | 	cmp	local02, #43 wz
12eec     40 00 90 AD |  if_e	jmp	#LR__1494
12ef0     50 00 90 FD | 	jmp	#LR__1495
12ef4                 | LR__1490
12ef4     0F 13 02 FB | 	rdlong	arg01, local01
12ef8     09 13 52 F6 | 	abs	arg01, arg01 wc
12efc     1F 22 C6 C9 |  if_b	decod	local03, #31
12f00     00 22 06 36 |  if_ae	mov	local03, #0
12f04     F4 C8 B0 FD | 	call	#__system___float_fromuns
12f08     11 FB 61 F5 | 	xor	result1, local03
12f0c     38 00 90 FD | 	jmp	#LR__1496
12f10                 | LR__1491
12f10     0F 13 02 FB | 	rdlong	arg01, local01
12f14     E4 C8 B0 FD | 	call	#__system___float_fromuns
12f18     2C 00 90 FD | 	jmp	#LR__1496
12f1c                 | LR__1492
12f1c     0F FB 01 FB | 	rdlong	result1, local01
12f20     24 00 90 FD | 	jmp	#LR__1496
12f24                 | LR__1493
12f24     0F 13 02 FB | 	rdlong	arg01, local01
12f28     BC D4 B0 FD | 	call	#__system____builtin_atof
12f2c     18 00 90 FD | 	jmp	#LR__1496
12f30                 | LR__1494
12f30     0F 13 02 FB | 	rdlong	arg01, local01
12f34     1C B5 BF FD | 	call	#_convertstring
12f38     FD 12 02 F6 | 	mov	arg01, result1
12f3c     A8 D4 B0 FD | 	call	#__system____builtin_atof
12f40     04 00 90 FD | 	jmp	#LR__1496
12f44                 | LR__1495
12f44     00 FA 05 F6 | 	mov	result1, #0
12f48                 | LR__1496
12f48     A7 F0 03 F6 | 	mov	ptra, fp
12f4c     B2 00 A0 FD | 	call	#popregs_
12f50                 | _converttofloat_ret
12f50     2D 00 64 FD | 	ret
12f54                 | 
12f54                 | ' 
12f54                 | ' sub do_rnd
12f54                 | _do_rnd
12f54     01 4A 05 F6 | 	mov	COUNT_, #1
12f58     A8 00 A0 FD | 	call	#pushregs_
12f5c     10 F0 07 F1 | 	add	ptra, #16
12f60     6A 00 00 FF 
12f64     70 E4 05 F1 | 	add	objptr, ##54384
12f68     F2 1E 02 FB | 	rdlong	local01, objptr
12f6c     0F 17 02 F6 | 	mov	arg03, local01
12f70     01 16 66 F0 | 	shl	arg03, #1
12f74     0F 17 02 F1 | 	add	arg03, local01
12f78     02 16 66 F0 | 	shl	arg03, #2
12f7c     03 00 00 FF 
12f80     04 E4 85 F1 | 	sub	objptr, ##1540
12f84     F2 16 02 F1 | 	add	arg03, objptr
12f88     0B 17 02 FB | 	rdlong	arg03, arg03
12f8c     0C 4E 05 F1 | 	add	fp, #12
12f90     A7 16 62 FC | 	wrlong	arg03, fp
12f94                 | ' 
12f94                 | ' numpar=compiledline(lineptr_e).result.uresult
12f94                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
12f94     0C 4E 85 F1 | 	sub	fp, #12
12f98     02 16 16 F2 | 	cmp	arg03, #2 wc
12f9c     67 00 00 FF 
12fa0     6C E4 85 F1 | 	sub	objptr, ##52844
12fa4     3C 00 90 CD |  if_b	jmp	#LR__1500
12fa8     00 12 06 F6 | 	mov	arg01, #0
12fac     64 FA B0 FD | 	call	#__system___getiolock_0474
12fb0     FD 12 02 F6 | 	mov	arg01, result1
12fb4     CC A0 B0 FD | 	call	#__system___lockmem
12fb8     66 01 00 FF 
12fbc     9F 14 06 F6 | 	mov	arg02, ##@LR__4973
12fc0     00 12 06 F6 | 	mov	arg01, #0
12fc4     00 16 06 F6 | 	mov	arg03, #0
12fc8     BC AD B0 FD | 	call	#__system___basic_print_string
12fcc     00 12 06 F6 | 	mov	arg01, #0
12fd0     40 FA B0 FD | 	call	#__system___getiolock_0474
12fd4     FD 00 68 FC | 	wrlong	#0, result1
12fd8     27 12 06 F6 | 	mov	arg01, #39
12fdc     48 60 B0 FD | 	call	#_printerror
12fe0     2C 01 90 FD | 	jmp	#LR__1507
12fe4                 | LR__1500
12fe4                 | ' if numpar=0 then
12fe4     0C 4E 05 F1 | 	add	fp, #12
12fe8     A7 FE 09 FB | 	rdlong	result3, fp wz
12fec     0C 4E 85 F1 | 	sub	fp, #12
12ff0     20 00 90 5D |  if_ne	jmp	#LR__1501
12ff4     08 4E 05 F1 | 	add	fp, #8
12ff8     A7 3A 68 FC | 	wrlong	#29, fp
12ffc     08 4E 85 F1 | 	sub	fp, #8
13000     1B FA 61 FD | 	getrnd	result1
13004     A7 FA 61 FC | 	wrlong	result1, fp
13008     A7 12 02 F6 | 	mov	arg01, fp
1300c     34 72 BF FD | 	call	#_push
13010     FC 00 90 FD | 	jmp	#LR__1506
13014                 | LR__1501
13014     94 71 BF FD | 	call	#_pop
13018     A7 FA 61 FC | 	wrlong	result1, fp
1301c     04 4E 05 F1 | 	add	fp, #4
13020     A7 FC 61 FC | 	wrlong	result2, fp
13024     04 4E 05 F1 | 	add	fp, #4
13028     A7 FE 61 FC | 	wrlong	result3, fp
1302c                 | '   t1=pop()
1302c                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1302c     08 4E 85 F1 | 	sub	fp, #8
13030     1C FE 0D F2 | 	cmp	result3, #28 wz
13034     08 4E 05 51 |  if_ne	add	fp, #8
13038     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1303c     08 4E 85 51 |  if_ne	sub	fp, #8
13040     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13044     2C 00 90 5D |  if_ne	jmp	#LR__1502
13048     1B FA 61 FD | 	getrnd	result1
1304c     A7 1E 02 FB | 	rdlong	local01, fp
13050     0F FB 11 FD | 	qdiv	result1, local01
13054     A7 12 02 F6 | 	mov	arg01, fp
13058     19 1E 62 FD | 	getqy	local01
1305c     A7 1E 62 FC | 	wrlong	local01, fp
13060     08 4E 05 F1 | 	add	fp, #8
13064     A7 3A 68 FC | 	wrlong	#29, fp
13068     08 4E 85 F1 | 	sub	fp, #8
1306c     D4 71 BF FD | 	call	#_push
13070     9C 00 90 FD | 	jmp	#LR__1505
13074                 | LR__1502
13074     08 4E 05 F1 | 	add	fp, #8
13078     A7 1E 02 FB | 	rdlong	local01, fp
1307c     08 4E 85 F1 | 	sub	fp, #8
13080     1E 1E 0E F2 | 	cmp	local01, #30 wz
13084     48 00 90 5D |  if_ne	jmp	#LR__1503
13088     A7 12 02 FB | 	rdlong	arg01, fp
1308c     00 C0 24 FF 
13090     00 14 06 F6 | 	mov	arg02, ##1233125376
13094     6C CD B0 FD | 	call	#__system___float_div
13098     FD 1E 02 F6 | 	mov	local01, result1
1309c     1B 12 62 FD | 	getrnd	arg01
130a0     74 13 06 F4 | 	bitl	arg01, #372
130a4     54 C7 B0 FD | 	call	#__system___float_fromuns
130a8     FD 14 02 F6 | 	mov	arg02, result1
130ac     0F 13 02 F6 | 	mov	arg01, local01
130b0     4C CB B0 FD | 	call	#__system___float_mul
130b4     A7 FA 61 FC | 	wrlong	result1, fp
130b8     08 4E 05 F1 | 	add	fp, #8
130bc     A7 3C 68 FC | 	wrlong	#30, fp
130c0     08 4E 85 F1 | 	sub	fp, #8
130c4     A7 12 02 F6 | 	mov	arg01, fp
130c8     78 71 BF FD | 	call	#_push
130cc     40 00 90 FD | 	jmp	#LR__1504
130d0                 | LR__1503
130d0                 | '     print "rnd: "; : printerror(40) 
130d0     00 12 06 F6 | 	mov	arg01, #0
130d4     3C F9 B0 FD | 	call	#__system___getiolock_0474
130d8     FD 12 02 F6 | 	mov	arg01, result1
130dc     A4 9F B0 FD | 	call	#__system___lockmem
130e0     66 01 00 FF 
130e4     A5 14 06 F6 | 	mov	arg02, ##@LR__4974
130e8     00 12 06 F6 | 	mov	arg01, #0
130ec     00 16 06 F6 | 	mov	arg03, #0
130f0     94 AC B0 FD | 	call	#__system___basic_print_string
130f4     00 12 06 F6 | 	mov	arg01, #0
130f8     18 F9 B0 FD | 	call	#__system___getiolock_0474
130fc     FD 00 68 FC | 	wrlong	#0, result1
13100     28 12 06 F6 | 	mov	arg01, #40
13104     20 5F B0 FD | 	call	#_printerror
13108     A7 12 02 F6 | 	mov	arg01, fp
1310c     34 71 BF FD | 	call	#_push
13110                 | LR__1504
13110                 | LR__1505
13110                 | LR__1506
13110                 | LR__1507
13110     A7 F0 03 F6 | 	mov	ptra, fp
13114     B2 00 A0 FD | 	call	#popregs_
13118                 | _do_rnd_ret
13118     2D 00 64 FD | 	ret
1311c                 | 
1311c                 | ' 
1311c                 | ' sub do_getenvsustain
1311c                 | _do_getenvsustain
1311c     01 4A 05 F6 | 	mov	COUNT_, #1
13120     A8 00 A0 FD | 	call	#pushregs_
13124     10 F0 07 F1 | 	add	ptra, #16
13128     6A 00 00 FF 
1312c     70 E4 05 F1 | 	add	objptr, ##54384
13130     F2 1E 02 FB | 	rdlong	local01, objptr
13134     0F 17 02 F6 | 	mov	arg03, local01
13138     01 16 66 F0 | 	shl	arg03, #1
1313c     0F 17 02 F1 | 	add	arg03, local01
13140     02 16 66 F0 | 	shl	arg03, #2
13144     03 00 00 FF 
13148     04 E4 85 F1 | 	sub	objptr, ##1540
1314c     F2 16 02 F1 | 	add	arg03, objptr
13150     0B 17 02 FB | 	rdlong	arg03, arg03
13154     0C 4E 05 F1 | 	add	fp, #12
13158     A7 16 62 FC | 	wrlong	arg03, fp
1315c                 | ' 
1315c                 | ' numpar=compiledline(lineptr_e).result.uresult
1315c                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
1315c     0C 4E 85 F1 | 	sub	fp, #12
13160     02 16 16 F2 | 	cmp	arg03, #2 wc
13164     67 00 00 FF 
13168     6C E4 85 F1 | 	sub	objptr, ##52844
1316c     0C 4E 05 C1 |  if_b	add	fp, #12
13170     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13174     0C 4E 85 C1 |  if_b	sub	fp, #12
13178     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1510
1317c     00 12 06 F6 | 	mov	arg01, #0
13180     90 F8 B0 FD | 	call	#__system___getiolock_0474
13184     FD 12 02 F6 | 	mov	arg01, result1
13188     F8 9E B0 FD | 	call	#__system___lockmem
1318c     66 01 00 FF 
13190     AB 14 06 F6 | 	mov	arg02, ##@LR__4975
13194     00 12 06 F6 | 	mov	arg01, #0
13198     00 16 06 F6 | 	mov	arg03, #0
1319c     E8 AB B0 FD | 	call	#__system___basic_print_string
131a0     00 12 06 F6 | 	mov	arg01, #0
131a4     6C F8 B0 FD | 	call	#__system___getiolock_0474
131a8     FD 00 68 FC | 	wrlong	#0, result1
131ac     27 12 06 F6 | 	mov	arg01, #39
131b0     74 5E B0 FD | 	call	#_printerror
131b4     64 00 90 FD | 	jmp	#LR__1511
131b8                 | LR__1510
131b8     F0 6F BF FD | 	call	#_pop
131bc     FD 1E 02 F6 | 	mov	local01, result1
131c0     FE 16 02 F6 | 	mov	arg03, result2
131c4     A7 1E 62 FC | 	wrlong	local01, fp
131c8     04 4E 05 F1 | 	add	fp, #4
131cc     A7 16 62 FC | 	wrlong	arg03, fp
131d0     04 4E 05 F1 | 	add	fp, #4
131d4     A7 FE 61 FC | 	wrlong	result3, fp
131d8     08 4E 85 F1 | 	sub	fp, #8
131dc     A7 12 02 F6 | 	mov	arg01, fp
131e0     20 FC BF FD | 	call	#_converttoint
131e4     FD 1E 02 F6 | 	mov	local01, result1
131e8     01 1E 66 F0 | 	shl	local01, #1
131ec     7B 00 00 FF 
131f0     84 E4 05 F1 | 	add	objptr, ##63108
131f4     F2 1E 02 F1 | 	add	local01, objptr
131f8     0F 1F E2 FA | 	rdword	local01, local01
131fc     A7 1E 62 FC | 	wrlong	local01, fp
13200     08 4E 05 F1 | 	add	fp, #8
13204     A7 38 68 FC | 	wrlong	#28, fp
13208     08 4E 85 F1 | 	sub	fp, #8
1320c     A7 12 02 F6 | 	mov	arg01, fp
13210     7B 00 00 FF 
13214     84 E4 85 F1 | 	sub	objptr, ##63108
13218     28 70 BF FD | 	call	#_push
1321c                 | LR__1511
1321c     A7 F0 03 F6 | 	mov	ptra, fp
13220     B2 00 A0 FD | 	call	#popregs_
13224                 | _do_getenvsustain_ret
13224     2D 00 64 FD | 	ret
13228                 | 
13228                 | ' 
13228                 | ' sub do_sin
13228                 | _do_sin
13228     01 4A 05 F6 | 	mov	COUNT_, #1
1322c     A8 00 A0 FD | 	call	#pushregs_
13230     10 F0 07 F1 | 	add	ptra, #16
13234     6A 00 00 FF 
13238     70 E4 05 F1 | 	add	objptr, ##54384
1323c     F2 1E 02 FB | 	rdlong	local01, objptr
13240     0F 17 02 F6 | 	mov	arg03, local01
13244     01 16 66 F0 | 	shl	arg03, #1
13248     0F 17 02 F1 | 	add	arg03, local01
1324c     02 16 66 F0 | 	shl	arg03, #2
13250     03 00 00 FF 
13254     04 E4 85 F1 | 	sub	objptr, ##1540
13258     F2 16 02 F1 | 	add	arg03, objptr
1325c     0B 17 02 FB | 	rdlong	arg03, arg03
13260     0C 4E 05 F1 | 	add	fp, #12
13264     A7 16 62 FC | 	wrlong	arg03, fp
13268                 | ' 
13268                 | ' numpar=compiledline(lineptr_e).result.uresult
13268                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
13268     0C 4E 85 F1 | 	sub	fp, #12
1326c     02 16 16 F2 | 	cmp	arg03, #2 wc
13270     67 00 00 FF 
13274     6C E4 85 F1 | 	sub	objptr, ##52844
13278     0C 4E 05 C1 |  if_b	add	fp, #12
1327c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13280     0C 4E 85 C1 |  if_b	sub	fp, #12
13284     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1520
13288     00 12 06 F6 | 	mov	arg01, #0
1328c     84 F7 B0 FD | 	call	#__system___getiolock_0474
13290     FD 12 02 F6 | 	mov	arg01, result1
13294     EC 9D B0 FD | 	call	#__system___lockmem
13298     66 01 00 FF 
1329c     BB 14 06 F6 | 	mov	arg02, ##@LR__4976
132a0     00 12 06 F6 | 	mov	arg01, #0
132a4     00 16 06 F6 | 	mov	arg03, #0
132a8     DC AA B0 FD | 	call	#__system___basic_print_string
132ac     00 12 06 F6 | 	mov	arg01, #0
132b0     60 F7 B0 FD | 	call	#__system___getiolock_0474
132b4     FD 00 68 FC | 	wrlong	#0, result1
132b8     27 12 06 F6 | 	mov	arg01, #39
132bc     68 5D B0 FD | 	call	#_printerror
132c0     64 00 90 FD | 	jmp	#LR__1521
132c4                 | LR__1520
132c4     E4 6E BF FD | 	call	#_pop
132c8     A7 FA 61 FC | 	wrlong	result1, fp
132cc     04 4E 05 F1 | 	add	fp, #4
132d0     A7 FC 61 FC | 	wrlong	result2, fp
132d4     04 4E 05 F1 | 	add	fp, #4
132d8     A7 FE 61 FC | 	wrlong	result3, fp
132dc     08 4E 85 F1 | 	sub	fp, #8
132e0     7B 00 00 FF 
132e4     78 E4 05 F1 | 	add	objptr, ##63096
132e8     F2 1E 02 FB | 	rdlong	local01, objptr
132ec     7B 00 00 FF 
132f0     78 E4 85 F1 | 	sub	objptr, ##63096
132f4     A7 12 02 F6 | 	mov	arg01, fp
132f8     B4 FB BF FD | 	call	#_converttofloat
132fc     FD 14 02 F6 | 	mov	arg02, result1
13300     0F 13 02 F6 | 	mov	arg01, local01
13304     F8 C8 B0 FD | 	call	#__system___float_mul
13308     FD 12 02 F6 | 	mov	arg01, result1
1330c     2C D2 B0 FD | 	call	#__system____builtin_sinf
13310     A7 FA 61 FC | 	wrlong	result1, fp
13314     08 4E 05 F1 | 	add	fp, #8
13318     A7 3C 68 FC | 	wrlong	#30, fp
1331c     08 4E 85 F1 | 	sub	fp, #8
13320     A7 12 02 F6 | 	mov	arg01, fp
13324     1C 6F BF FD | 	call	#_push
13328                 | LR__1521
13328     A7 F0 03 F6 | 	mov	ptra, fp
1332c     B2 00 A0 FD | 	call	#popregs_
13330                 | _do_sin_ret
13330     2D 00 64 FD | 	ret
13334                 | 
13334                 | ' 
13334                 | ' sub do_cos
13334                 | _do_cos
13334     01 4A 05 F6 | 	mov	COUNT_, #1
13338     A8 00 A0 FD | 	call	#pushregs_
1333c     10 F0 07 F1 | 	add	ptra, #16
13340     6A 00 00 FF 
13344     70 E4 05 F1 | 	add	objptr, ##54384
13348     F2 1E 02 FB | 	rdlong	local01, objptr
1334c     0F 17 02 F6 | 	mov	arg03, local01
13350     01 16 66 F0 | 	shl	arg03, #1
13354     0F 17 02 F1 | 	add	arg03, local01
13358     02 16 66 F0 | 	shl	arg03, #2
1335c     03 00 00 FF 
13360     04 E4 85 F1 | 	sub	objptr, ##1540
13364     F2 16 02 F1 | 	add	arg03, objptr
13368     0B 17 02 FB | 	rdlong	arg03, arg03
1336c     0C 4E 05 F1 | 	add	fp, #12
13370     A7 16 62 FC | 	wrlong	arg03, fp
13374                 | ' 
13374                 | ' numpar=compiledline(lineptr_e).result.uresult
13374                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
13374     0C 4E 85 F1 | 	sub	fp, #12
13378     02 16 16 F2 | 	cmp	arg03, #2 wc
1337c     67 00 00 FF 
13380     6C E4 85 F1 | 	sub	objptr, ##52844
13384     0C 4E 05 C1 |  if_b	add	fp, #12
13388     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1338c     0C 4E 85 C1 |  if_b	sub	fp, #12
13390     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1530
13394     00 12 06 F6 | 	mov	arg01, #0
13398     78 F6 B0 FD | 	call	#__system___getiolock_0474
1339c     FD 12 02 F6 | 	mov	arg01, result1
133a0     E0 9C B0 FD | 	call	#__system___lockmem
133a4     66 01 00 FF 
133a8     C1 14 06 F6 | 	mov	arg02, ##@LR__4977
133ac     00 12 06 F6 | 	mov	arg01, #0
133b0     00 16 06 F6 | 	mov	arg03, #0
133b4     D0 A9 B0 FD | 	call	#__system___basic_print_string
133b8     00 12 06 F6 | 	mov	arg01, #0
133bc     54 F6 B0 FD | 	call	#__system___getiolock_0474
133c0     FD 00 68 FC | 	wrlong	#0, result1
133c4     27 12 06 F6 | 	mov	arg01, #39
133c8     5C 5C B0 FD | 	call	#_printerror
133cc     78 00 90 FD | 	jmp	#LR__1531
133d0                 | LR__1530
133d0     D8 6D BF FD | 	call	#_pop
133d4     A7 FA 61 FC | 	wrlong	result1, fp
133d8     04 4E 05 F1 | 	add	fp, #4
133dc     A7 FC 61 FC | 	wrlong	result2, fp
133e0     04 4E 05 F1 | 	add	fp, #4
133e4     A7 FE 61 FC | 	wrlong	result3, fp
133e8     08 4E 85 F1 | 	sub	fp, #8
133ec     7B 00 00 FF 
133f0     78 E4 05 F1 | 	add	objptr, ##63096
133f4     F2 1E 02 FB | 	rdlong	local01, objptr
133f8     7B 00 00 FF 
133fc     78 E4 85 F1 | 	sub	objptr, ##63096
13400     A7 12 02 F6 | 	mov	arg01, fp
13404     A8 FA BF FD | 	call	#_converttofloat
13408     FD 14 02 F6 | 	mov	arg02, result1
1340c     0F 13 02 F6 | 	mov	arg01, local01
13410     EC C7 B0 FD | 	call	#__system___float_mul
13414     FD 14 02 F6 | 	mov	arg02, result1
13418     87 E4 1F FF 
1341c     DB 13 06 F6 | 	mov	arg01, ##1070141403
13420     1F 14 E6 F4 | 	bitnot	arg02, #31
13424     08 C4 B0 FD | 	call	#__system___float_add
13428     FD 12 02 F6 | 	mov	arg01, result1
1342c     0C D1 B0 FD | 	call	#__system____builtin_sinf
13430     A7 FA 61 FC | 	wrlong	result1, fp
13434     08 4E 05 F1 | 	add	fp, #8
13438     A7 3C 68 FC | 	wrlong	#30, fp
1343c     08 4E 85 F1 | 	sub	fp, #8
13440     A7 12 02 F6 | 	mov	arg01, fp
13444     FC 6D BF FD | 	call	#_push
13448                 | LR__1531
13448     A7 F0 03 F6 | 	mov	ptra, fp
1344c     B2 00 A0 FD | 	call	#popregs_
13450                 | _do_cos_ret
13450     2D 00 64 FD | 	ret
13454                 | 
13454                 | ' 
13454                 | ' sub do_tan
13454                 | _do_tan
13454     01 4A 05 F6 | 	mov	COUNT_, #1
13458     A8 00 A0 FD | 	call	#pushregs_
1345c     10 F0 07 F1 | 	add	ptra, #16
13460     6A 00 00 FF 
13464     70 E4 05 F1 | 	add	objptr, ##54384
13468     F2 1E 02 FB | 	rdlong	local01, objptr
1346c     0F 17 02 F6 | 	mov	arg03, local01
13470     01 16 66 F0 | 	shl	arg03, #1
13474     0F 17 02 F1 | 	add	arg03, local01
13478     02 16 66 F0 | 	shl	arg03, #2
1347c     03 00 00 FF 
13480     04 E4 85 F1 | 	sub	objptr, ##1540
13484     F2 16 02 F1 | 	add	arg03, objptr
13488     0B 17 02 FB | 	rdlong	arg03, arg03
1348c     0C 4E 05 F1 | 	add	fp, #12
13490     A7 16 62 FC | 	wrlong	arg03, fp
13494                 | ' 
13494                 | ' numpar=compiledline(lineptr_e).result.uresult
13494                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
13494     0C 4E 85 F1 | 	sub	fp, #12
13498     02 16 16 F2 | 	cmp	arg03, #2 wc
1349c     67 00 00 FF 
134a0     6C E4 85 F1 | 	sub	objptr, ##52844
134a4     0C 4E 05 C1 |  if_b	add	fp, #12
134a8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
134ac     0C 4E 85 C1 |  if_b	sub	fp, #12
134b0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1540
134b4     00 12 06 F6 | 	mov	arg01, #0
134b8     58 F5 B0 FD | 	call	#__system___getiolock_0474
134bc     FD 12 02 F6 | 	mov	arg01, result1
134c0     C0 9B B0 FD | 	call	#__system___lockmem
134c4     66 01 00 FF 
134c8     C7 14 06 F6 | 	mov	arg02, ##@LR__4978
134cc     00 12 06 F6 | 	mov	arg01, #0
134d0     00 16 06 F6 | 	mov	arg03, #0
134d4     B0 A8 B0 FD | 	call	#__system___basic_print_string
134d8     00 12 06 F6 | 	mov	arg01, #0
134dc     34 F5 B0 FD | 	call	#__system___getiolock_0474
134e0     FD 00 68 FC | 	wrlong	#0, result1
134e4     27 12 06 F6 | 	mov	arg01, #39
134e8     3C 5B B0 FD | 	call	#_printerror
134ec     64 00 90 FD | 	jmp	#LR__1541
134f0                 | LR__1540
134f0     B8 6C BF FD | 	call	#_pop
134f4     A7 FA 61 FC | 	wrlong	result1, fp
134f8     04 4E 05 F1 | 	add	fp, #4
134fc     A7 FC 61 FC | 	wrlong	result2, fp
13500     04 4E 05 F1 | 	add	fp, #4
13504     A7 FE 61 FC | 	wrlong	result3, fp
13508     08 4E 85 F1 | 	sub	fp, #8
1350c     7B 00 00 FF 
13510     78 E4 05 F1 | 	add	objptr, ##63096
13514     F2 1E 02 FB | 	rdlong	local01, objptr
13518     7B 00 00 FF 
1351c     78 E4 85 F1 | 	sub	objptr, ##63096
13520     A7 12 02 F6 | 	mov	arg01, fp
13524     88 F9 BF FD | 	call	#_converttofloat
13528     FD 14 02 F6 | 	mov	arg02, result1
1352c     0F 13 02 F6 | 	mov	arg01, local01
13530     CC C6 B0 FD | 	call	#__system___float_mul
13534     FD 12 02 F6 | 	mov	arg01, result1
13538     4C D1 B0 FD | 	call	#__system____builtin_tanf
1353c     A7 FA 61 FC | 	wrlong	result1, fp
13540     08 4E 05 F1 | 	add	fp, #8
13544     A7 3C 68 FC | 	wrlong	#30, fp
13548     08 4E 85 F1 | 	sub	fp, #8
1354c     A7 12 02 F6 | 	mov	arg01, fp
13550     F0 6C BF FD | 	call	#_push
13554                 | LR__1541
13554     A7 F0 03 F6 | 	mov	ptra, fp
13558     B2 00 A0 FD | 	call	#popregs_
1355c                 | _do_tan_ret
1355c     2D 00 64 FD | 	ret
13560                 | 
13560                 | ' 
13560                 | ' sub do_asin
13560                 | _do_asin
13560     01 4A 05 F6 | 	mov	COUNT_, #1
13564     A8 00 A0 FD | 	call	#pushregs_
13568     10 F0 07 F1 | 	add	ptra, #16
1356c     6A 00 00 FF 
13570     70 E4 05 F1 | 	add	objptr, ##54384
13574     F2 1E 02 FB | 	rdlong	local01, objptr
13578     0F 17 02 F6 | 	mov	arg03, local01
1357c     01 16 66 F0 | 	shl	arg03, #1
13580     0F 17 02 F1 | 	add	arg03, local01
13584     02 16 66 F0 | 	shl	arg03, #2
13588     03 00 00 FF 
1358c     04 E4 85 F1 | 	sub	objptr, ##1540
13590     F2 16 02 F1 | 	add	arg03, objptr
13594     0B 17 02 FB | 	rdlong	arg03, arg03
13598     0C 4E 05 F1 | 	add	fp, #12
1359c     A7 16 62 FC | 	wrlong	arg03, fp
135a0                 | ' 
135a0                 | ' numpar=compiledline(lineptr_e).result.uresult
135a0                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
135a0     0C 4E 85 F1 | 	sub	fp, #12
135a4     02 16 16 F2 | 	cmp	arg03, #2 wc
135a8     67 00 00 FF 
135ac     6C E4 85 F1 | 	sub	objptr, ##52844
135b0     0C 4E 05 C1 |  if_b	add	fp, #12
135b4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
135b8     0C 4E 85 C1 |  if_b	sub	fp, #12
135bc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1550
135c0     00 12 06 F6 | 	mov	arg01, #0
135c4     4C F4 B0 FD | 	call	#__system___getiolock_0474
135c8     FD 12 02 F6 | 	mov	arg01, result1
135cc     B4 9A B0 FD | 	call	#__system___lockmem
135d0     66 01 00 FF 
135d4     CD 14 06 F6 | 	mov	arg02, ##@LR__4979
135d8     00 12 06 F6 | 	mov	arg01, #0
135dc     00 16 06 F6 | 	mov	arg03, #0
135e0     A4 A7 B0 FD | 	call	#__system___basic_print_string
135e4     00 12 06 F6 | 	mov	arg01, #0
135e8     28 F4 B0 FD | 	call	#__system___getiolock_0474
135ec     FD 00 68 FC | 	wrlong	#0, result1
135f0     27 12 06 F6 | 	mov	arg01, #39
135f4     30 5A B0 FD | 	call	#_printerror
135f8     64 00 90 FD | 	jmp	#LR__1551
135fc                 | LR__1550
135fc     AC 6B BF FD | 	call	#_pop
13600     FF 1E 02 F6 | 	mov	local01, result3
13604     A7 FA 61 FC | 	wrlong	result1, fp
13608     04 4E 05 F1 | 	add	fp, #4
1360c     A7 FC 61 FC | 	wrlong	result2, fp
13610     04 4E 05 F1 | 	add	fp, #4
13614     A7 1E 62 FC | 	wrlong	local01, fp
13618     08 4E 85 F1 | 	sub	fp, #8
1361c     A7 12 02 F6 | 	mov	arg01, fp
13620     8C F8 BF FD | 	call	#_converttofloat
13624     FD 12 02 F6 | 	mov	arg01, result1
13628     A4 D0 B0 FD | 	call	#__system____builtin_asinf
1362c     FD 12 02 F6 | 	mov	arg01, result1
13630     7B 00 00 FF 
13634     7C E4 05 F1 | 	add	objptr, ##63100
13638     F2 14 02 FB | 	rdlong	arg02, objptr
1363c     7B 00 00 FF 
13640     7C E4 85 F1 | 	sub	objptr, ##63100
13644     B8 C5 B0 FD | 	call	#__system___float_mul
13648     A7 FA 61 FC | 	wrlong	result1, fp
1364c     08 4E 05 F1 | 	add	fp, #8
13650     A7 3C 68 FC | 	wrlong	#30, fp
13654     08 4E 85 F1 | 	sub	fp, #8
13658     A7 12 02 F6 | 	mov	arg01, fp
1365c     E4 6B BF FD | 	call	#_push
13660                 | LR__1551
13660     A7 F0 03 F6 | 	mov	ptra, fp
13664     B2 00 A0 FD | 	call	#popregs_
13668                 | _do_asin_ret
13668     2D 00 64 FD | 	ret
1366c                 | 
1366c                 | ' 
1366c                 | ' sub do_acos
1366c                 | _do_acos
1366c     01 4A 05 F6 | 	mov	COUNT_, #1
13670     A8 00 A0 FD | 	call	#pushregs_
13674     10 F0 07 F1 | 	add	ptra, #16
13678     6A 00 00 FF 
1367c     70 E4 05 F1 | 	add	objptr, ##54384
13680     F2 1E 02 FB | 	rdlong	local01, objptr
13684     0F 17 02 F6 | 	mov	arg03, local01
13688     01 16 66 F0 | 	shl	arg03, #1
1368c     0F 17 02 F1 | 	add	arg03, local01
13690     02 16 66 F0 | 	shl	arg03, #2
13694     03 00 00 FF 
13698     04 E4 85 F1 | 	sub	objptr, ##1540
1369c     F2 16 02 F1 | 	add	arg03, objptr
136a0     0B 17 02 FB | 	rdlong	arg03, arg03
136a4     0C 4E 05 F1 | 	add	fp, #12
136a8     A7 16 62 FC | 	wrlong	arg03, fp
136ac                 | ' 
136ac                 | ' numpar=compiledline(lineptr_e).result.uresult
136ac                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
136ac     0C 4E 85 F1 | 	sub	fp, #12
136b0     02 16 16 F2 | 	cmp	arg03, #2 wc
136b4     67 00 00 FF 
136b8     6C E4 85 F1 | 	sub	objptr, ##52844
136bc     0C 4E 05 C1 |  if_b	add	fp, #12
136c0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
136c4     0C 4E 85 C1 |  if_b	sub	fp, #12
136c8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1560
136cc     00 12 06 F6 | 	mov	arg01, #0
136d0     40 F3 B0 FD | 	call	#__system___getiolock_0474
136d4     FD 12 02 F6 | 	mov	arg01, result1
136d8     A8 99 B0 FD | 	call	#__system___lockmem
136dc     66 01 00 FF 
136e0     D4 14 06 F6 | 	mov	arg02, ##@LR__4980
136e4     00 12 06 F6 | 	mov	arg01, #0
136e8     00 16 06 F6 | 	mov	arg03, #0
136ec     98 A6 B0 FD | 	call	#__system___basic_print_string
136f0     00 12 06 F6 | 	mov	arg01, #0
136f4     1C F3 B0 FD | 	call	#__system___getiolock_0474
136f8     FD 00 68 FC | 	wrlong	#0, result1
136fc     27 12 06 F6 | 	mov	arg01, #39
13700     24 59 B0 FD | 	call	#_printerror
13704     64 00 90 FD | 	jmp	#LR__1561
13708                 | LR__1560
13708     A0 6A BF FD | 	call	#_pop
1370c     FF 1E 02 F6 | 	mov	local01, result3
13710     A7 FA 61 FC | 	wrlong	result1, fp
13714     04 4E 05 F1 | 	add	fp, #4
13718     A7 FC 61 FC | 	wrlong	result2, fp
1371c     04 4E 05 F1 | 	add	fp, #4
13720     A7 1E 62 FC | 	wrlong	local01, fp
13724     08 4E 85 F1 | 	sub	fp, #8
13728     A7 12 02 F6 | 	mov	arg01, fp
1372c     80 F7 BF FD | 	call	#_converttofloat
13730     FD 12 02 F6 | 	mov	arg01, result1
13734     E4 CF B0 FD | 	call	#__system____builtin_acosf
13738     FD 12 02 F6 | 	mov	arg01, result1
1373c     7B 00 00 FF 
13740     7C E4 05 F1 | 	add	objptr, ##63100
13744     F2 14 02 FB | 	rdlong	arg02, objptr
13748     7B 00 00 FF 
1374c     7C E4 85 F1 | 	sub	objptr, ##63100
13750     AC C4 B0 FD | 	call	#__system___float_mul
13754     A7 FA 61 FC | 	wrlong	result1, fp
13758     08 4E 05 F1 | 	add	fp, #8
1375c     A7 3C 68 FC | 	wrlong	#30, fp
13760     08 4E 85 F1 | 	sub	fp, #8
13764     A7 12 02 F6 | 	mov	arg01, fp
13768     D8 6A BF FD | 	call	#_push
1376c                 | LR__1561
1376c     A7 F0 03 F6 | 	mov	ptra, fp
13770     B2 00 A0 FD | 	call	#popregs_
13774                 | _do_acos_ret
13774     2D 00 64 FD | 	ret
13778                 | 
13778                 | ' 
13778                 | ' sub do_atn
13778                 | _do_atn
13778     01 4A 05 F6 | 	mov	COUNT_, #1
1377c     A8 00 A0 FD | 	call	#pushregs_
13780     10 F0 07 F1 | 	add	ptra, #16
13784     6A 00 00 FF 
13788     70 E4 05 F1 | 	add	objptr, ##54384
1378c     F2 1E 02 FB | 	rdlong	local01, objptr
13790     0F 17 02 F6 | 	mov	arg03, local01
13794     01 16 66 F0 | 	shl	arg03, #1
13798     0F 17 02 F1 | 	add	arg03, local01
1379c     02 16 66 F0 | 	shl	arg03, #2
137a0     03 00 00 FF 
137a4     04 E4 85 F1 | 	sub	objptr, ##1540
137a8     F2 16 02 F1 | 	add	arg03, objptr
137ac     0B 17 02 FB | 	rdlong	arg03, arg03
137b0     0C 4E 05 F1 | 	add	fp, #12
137b4     A7 16 62 FC | 	wrlong	arg03, fp
137b8                 | ' 
137b8                 | ' numpar=compiledline(lineptr_e).result.uresult
137b8                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
137b8     0C 4E 85 F1 | 	sub	fp, #12
137bc     02 16 16 F2 | 	cmp	arg03, #2 wc
137c0     67 00 00 FF 
137c4     6C E4 85 F1 | 	sub	objptr, ##52844
137c8     0C 4E 05 C1 |  if_b	add	fp, #12
137cc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
137d0     0C 4E 85 C1 |  if_b	sub	fp, #12
137d4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1570
137d8     00 12 06 F6 | 	mov	arg01, #0
137dc     34 F2 B0 FD | 	call	#__system___getiolock_0474
137e0     FD 12 02 F6 | 	mov	arg01, result1
137e4     9C 98 B0 FD | 	call	#__system___lockmem
137e8     66 01 00 FF 
137ec     DB 14 06 F6 | 	mov	arg02, ##@LR__4981
137f0     00 12 06 F6 | 	mov	arg01, #0
137f4     00 16 06 F6 | 	mov	arg03, #0
137f8     8C A5 B0 FD | 	call	#__system___basic_print_string
137fc     00 12 06 F6 | 	mov	arg01, #0
13800     10 F2 B0 FD | 	call	#__system___getiolock_0474
13804     FD 00 68 FC | 	wrlong	#0, result1
13808     27 12 06 F6 | 	mov	arg01, #39
1380c     18 58 B0 FD | 	call	#_printerror
13810     6C 00 90 FD | 	jmp	#LR__1571
13814                 | LR__1570
13814     94 69 BF FD | 	call	#_pop
13818     FF 1E 02 F6 | 	mov	local01, result3
1381c     A7 FA 61 FC | 	wrlong	result1, fp
13820     04 4E 05 F1 | 	add	fp, #4
13824     A7 FC 61 FC | 	wrlong	result2, fp
13828     04 4E 05 F1 | 	add	fp, #4
1382c     A7 1E 62 FC | 	wrlong	local01, fp
13830     08 4E 85 F1 | 	sub	fp, #8
13834     A7 12 02 F6 | 	mov	arg01, fp
13838     74 F6 BF FD | 	call	#_converttofloat
1383c     FD 12 02 F6 | 	mov	arg01, result1
13840     00 C0 1F FF 
13844     00 14 06 F6 | 	mov	arg02, ##1065353216
13848     1C CF B0 FD | 	call	#__system____builtin_atan2f
1384c     FD 12 02 F6 | 	mov	arg01, result1
13850     7B 00 00 FF 
13854     7C E4 05 F1 | 	add	objptr, ##63100
13858     F2 14 02 FB | 	rdlong	arg02, objptr
1385c     7B 00 00 FF 
13860     7C E4 85 F1 | 	sub	objptr, ##63100
13864     98 C3 B0 FD | 	call	#__system___float_mul
13868     A7 FA 61 FC | 	wrlong	result1, fp
1386c     08 4E 05 F1 | 	add	fp, #8
13870     A7 3C 68 FC | 	wrlong	#30, fp
13874     08 4E 85 F1 | 	sub	fp, #8
13878     A7 12 02 F6 | 	mov	arg01, fp
1387c     C4 69 BF FD | 	call	#_push
13880                 | LR__1571
13880     A7 F0 03 F6 | 	mov	ptra, fp
13884     B2 00 A0 FD | 	call	#popregs_
13888                 | _do_atn_ret
13888     2D 00 64 FD | 	ret
1388c                 | 
1388c                 | ' 
1388c                 | ' sub do_sqr
1388c                 | _do_sqr
1388c     01 4A 05 F6 | 	mov	COUNT_, #1
13890     A8 00 A0 FD | 	call	#pushregs_
13894     10 F0 07 F1 | 	add	ptra, #16
13898     6A 00 00 FF 
1389c     70 E4 05 F1 | 	add	objptr, ##54384
138a0     F2 1E 02 FB | 	rdlong	local01, objptr
138a4     0F 17 02 F6 | 	mov	arg03, local01
138a8     01 16 66 F0 | 	shl	arg03, #1
138ac     0F 17 02 F1 | 	add	arg03, local01
138b0     02 16 66 F0 | 	shl	arg03, #2
138b4     03 00 00 FF 
138b8     04 E4 85 F1 | 	sub	objptr, ##1540
138bc     F2 16 02 F1 | 	add	arg03, objptr
138c0     0B 17 02 FB | 	rdlong	arg03, arg03
138c4     0C 4E 05 F1 | 	add	fp, #12
138c8     A7 16 62 FC | 	wrlong	arg03, fp
138cc                 | ' 
138cc                 | ' numpar=compiledline(lineptr_e).result.uresult
138cc                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
138cc     0C 4E 85 F1 | 	sub	fp, #12
138d0     02 16 16 F2 | 	cmp	arg03, #2 wc
138d4     67 00 00 FF 
138d8     6C E4 85 F1 | 	sub	objptr, ##52844
138dc     0C 4E 05 C1 |  if_b	add	fp, #12
138e0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
138e4     0C 4E 85 C1 |  if_b	sub	fp, #12
138e8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1580
138ec     00 12 06 F6 | 	mov	arg01, #0
138f0     20 F1 B0 FD | 	call	#__system___getiolock_0474
138f4     FD 12 02 F6 | 	mov	arg01, result1
138f8     88 97 B0 FD | 	call	#__system___lockmem
138fc     66 01 00 FF 
13900     E1 14 06 F6 | 	mov	arg02, ##@LR__4982
13904     00 12 06 F6 | 	mov	arg01, #0
13908     00 16 06 F6 | 	mov	arg03, #0
1390c     78 A4 B0 FD | 	call	#__system___basic_print_string
13910     00 12 06 F6 | 	mov	arg01, #0
13914     FC F0 B0 FD | 	call	#__system___getiolock_0474
13918     FD 00 68 FC | 	wrlong	#0, result1
1391c     27 12 06 F6 | 	mov	arg01, #39
13920     04 57 B0 FD | 	call	#_printerror
13924     48 00 90 FD | 	jmp	#LR__1581
13928                 | LR__1580
13928     80 68 BF FD | 	call	#_pop
1392c     FF 1E 02 F6 | 	mov	local01, result3
13930     A7 FA 61 FC | 	wrlong	result1, fp
13934     04 4E 05 F1 | 	add	fp, #4
13938     A7 FC 61 FC | 	wrlong	result2, fp
1393c     04 4E 05 F1 | 	add	fp, #4
13940     A7 1E 62 FC | 	wrlong	local01, fp
13944     08 4E 85 F1 | 	sub	fp, #8
13948     A7 12 02 F6 | 	mov	arg01, fp
1394c     60 F5 BF FD | 	call	#_converttofloat
13950     FD 12 02 F6 | 	mov	arg01, result1
13954     D0 C1 B0 FD | 	call	#__system___float_sqrt
13958     A7 FA 61 FC | 	wrlong	result1, fp
1395c     08 4E 05 F1 | 	add	fp, #8
13960     A7 3C 68 FC | 	wrlong	#30, fp
13964     08 4E 85 F1 | 	sub	fp, #8
13968     A7 12 02 F6 | 	mov	arg01, fp
1396c     D4 68 BF FD | 	call	#_push
13970                 | LR__1581
13970     A7 F0 03 F6 | 	mov	ptra, fp
13974     B2 00 A0 FD | 	call	#popregs_
13978                 | _do_sqr_ret
13978     2D 00 64 FD | 	ret
1397c                 | 
1397c                 | ' 
1397c                 | ' sub do_stick
1397c                 | _do_stick
1397c     01 4A 05 F6 | 	mov	COUNT_, #1
13980     A8 00 A0 FD | 	call	#pushregs_
13984     10 F0 07 F1 | 	add	ptra, #16
13988     6A 00 00 FF 
1398c     70 E4 05 F1 | 	add	objptr, ##54384
13990     F2 1E 02 FB | 	rdlong	local01, objptr
13994     0F 17 02 F6 | 	mov	arg03, local01
13998     01 16 66 F0 | 	shl	arg03, #1
1399c     0F 17 02 F1 | 	add	arg03, local01
139a0     02 16 66 F0 | 	shl	arg03, #2
139a4     03 00 00 FF 
139a8     04 E4 85 F1 | 	sub	objptr, ##1540
139ac     F2 16 02 F1 | 	add	arg03, objptr
139b0     0B 17 02 FB | 	rdlong	arg03, arg03
139b4     0C 4E 05 F1 | 	add	fp, #12
139b8     A7 16 62 FC | 	wrlong	arg03, fp
139bc                 | ' 
139bc                 | ' numpar=compiledline(lineptr_e).result.uresult
139bc                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
139bc     0C 4E 85 F1 | 	sub	fp, #12
139c0     02 16 16 F2 | 	cmp	arg03, #2 wc
139c4     67 00 00 FF 
139c8     6C E4 85 F1 | 	sub	objptr, ##52844
139cc     3C 00 90 CD |  if_b	jmp	#LR__1590
139d0     00 12 06 F6 | 	mov	arg01, #0
139d4     3C F0 B0 FD | 	call	#__system___getiolock_0474
139d8     FD 12 02 F6 | 	mov	arg01, result1
139dc     A4 96 B0 FD | 	call	#__system___lockmem
139e0     66 01 00 FF 
139e4     E7 14 06 F6 | 	mov	arg02, ##@LR__4983
139e8     00 12 06 F6 | 	mov	arg01, #0
139ec     00 16 06 F6 | 	mov	arg03, #0
139f0     94 A3 B0 FD | 	call	#__system___basic_print_string
139f4     00 12 06 F6 | 	mov	arg01, #0
139f8     18 F0 B0 FD | 	call	#__system___getiolock_0474
139fc     FD 00 68 FC | 	wrlong	#0, result1
13a00     27 12 06 F6 | 	mov	arg01, #39
13a04     20 56 B0 FD | 	call	#_printerror
13a08     E8 00 90 FD | 	jmp	#LR__1594
13a0c                 | LR__1590
13a0c                 | ' 
13a0c                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
13a0c     0C 4E 05 F1 | 	add	fp, #12
13a10     A7 FE 09 FB | 	rdlong	result3, fp wz
13a14     0C 4E 85 F1 | 	sub	fp, #12
13a18     30 00 90 5D |  if_ne	jmp	#LR__1591
13a1c     7A 00 00 FF 
13a20     EC E5 05 F1 | 	add	objptr, ##62956
13a24     F2 1E 02 FB | 	rdlong	local01, objptr
13a28     7A 00 00 FF 
13a2c     EC E5 85 F1 | 	sub	objptr, ##62956
13a30     A7 1E 62 FC | 	wrlong	local01, fp
13a34     08 4E 05 F1 | 	add	fp, #8
13a38     A7 3A 68 FC | 	wrlong	#29, fp
13a3c     08 4E 85 F1 | 	sub	fp, #8
13a40     A7 12 02 F6 | 	mov	arg01, fp
13a44     FC 67 BF FD | 	call	#_push
13a48     A8 00 90 FD | 	jmp	#LR__1594
13a4c                 | LR__1591
13a4c     5C 67 BF FD | 	call	#_pop
13a50     A7 FA 61 FC | 	wrlong	result1, fp
13a54     04 4E 05 F1 | 	add	fp, #4
13a58     A7 FC 61 FC | 	wrlong	result2, fp
13a5c     04 4E 05 F1 | 	add	fp, #4
13a60     A7 FE 61 FC | 	wrlong	result3, fp
13a64                 | ' 
13a64                 | ' t1=pop()
13a64                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
13a64     08 4E 85 F1 | 	sub	fp, #8
13a68     1C FE 0D F2 | 	cmp	result3, #28 wz
13a6c     08 4E 05 51 |  if_ne	add	fp, #8
13a70     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13a74     08 4E 85 51 |  if_ne	sub	fp, #8
13a78     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13a7c     6C 00 90 5D |  if_ne	jmp	#LR__1593
13a80     A7 1E 02 FB | 	rdlong	local01, fp
13a84     7B 00 00 FF 
13a88     E8 E4 05 F1 | 	add	objptr, ##63208
13a8c     F2 1E 62 FC | 	wrlong	local01, objptr
13a90                 | '   q=t1.result.uresult
13a90                 | '   if q<7 then 
13a90     7B 00 00 FF 
13a94     E8 E4 85 F1 | 	sub	objptr, ##63208
13a98     07 1E 56 F2 | 	cmps	local01, #7 wc
13a9c     40 00 90 3D |  if_ae	jmp	#LR__1592
13aa0     7B 00 00 FF 
13aa4     E8 E4 05 F1 | 	add	objptr, ##63208
13aa8     F2 1E 02 FB | 	rdlong	local01, objptr
13aac     02 1E 66 F0 | 	shl	local01, #2
13ab0     FC E4 85 F1 | 	sub	objptr, #252
13ab4     F2 1E 02 F1 | 	add	local01, objptr
13ab8     0F 1F 02 FB | 	rdlong	local01, local01
13abc     A7 1E 62 FC | 	wrlong	local01, fp
13ac0     08 4E 05 F1 | 	add	fp, #8
13ac4     A7 3A 68 FC | 	wrlong	#29, fp
13ac8     08 4E 85 F1 | 	sub	fp, #8
13acc     A7 12 02 F6 | 	mov	arg01, fp
13ad0     7A 00 00 FF 
13ad4     EC E5 85 F1 | 	sub	objptr, ##62956
13ad8     68 67 BF FD | 	call	#_push
13adc                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
13adc     14 00 90 FD | 	jmp	#LR__1594
13ae0                 | LR__1592
13ae0     29 12 06 F6 | 	mov	arg01, #41
13ae4     40 55 B0 FD | 	call	#_printerror
13ae8                 | '      printerror(41) : return
13ae8     08 00 90 FD | 	jmp	#LR__1594
13aec                 | LR__1593
13aec     29 12 06 F6 | 	mov	arg01, #41
13af0     34 55 B0 FD | 	call	#_printerror
13af4                 | LR__1594
13af4     A7 F0 03 F6 | 	mov	ptra, fp
13af8     B2 00 A0 FD | 	call	#popregs_
13afc                 | _do_stick_ret
13afc     2D 00 64 FD | 	ret
13b00                 | 
13b00                 | ' 
13b00                 | ' sub do_strig
13b00                 | _do_strig
13b00     01 4A 05 F6 | 	mov	COUNT_, #1
13b04     A8 00 A0 FD | 	call	#pushregs_
13b08     10 F0 07 F1 | 	add	ptra, #16
13b0c     6A 00 00 FF 
13b10     70 E4 05 F1 | 	add	objptr, ##54384
13b14     F2 1E 02 FB | 	rdlong	local01, objptr
13b18     0F 17 02 F6 | 	mov	arg03, local01
13b1c     01 16 66 F0 | 	shl	arg03, #1
13b20     0F 17 02 F1 | 	add	arg03, local01
13b24     02 16 66 F0 | 	shl	arg03, #2
13b28     03 00 00 FF 
13b2c     04 E4 85 F1 | 	sub	objptr, ##1540
13b30     F2 16 02 F1 | 	add	arg03, objptr
13b34     0B 17 02 FB | 	rdlong	arg03, arg03
13b38     0C 4E 05 F1 | 	add	fp, #12
13b3c     A7 16 62 FC | 	wrlong	arg03, fp
13b40                 | ' 
13b40                 | ' numpar=compiledline(lineptr_e).result.uresult
13b40                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
13b40     0C 4E 85 F1 | 	sub	fp, #12
13b44     02 16 16 F2 | 	cmp	arg03, #2 wc
13b48     67 00 00 FF 
13b4c     6C E4 85 F1 | 	sub	objptr, ##52844
13b50     3C 00 90 CD |  if_b	jmp	#LR__1600
13b54     00 12 06 F6 | 	mov	arg01, #0
13b58     B8 EE B0 FD | 	call	#__system___getiolock_0474
13b5c     FD 12 02 F6 | 	mov	arg01, result1
13b60     20 95 B0 FD | 	call	#__system___lockmem
13b64     66 01 00 FF 
13b68     EF 14 06 F6 | 	mov	arg02, ##@LR__4984
13b6c     00 12 06 F6 | 	mov	arg01, #0
13b70     00 16 06 F6 | 	mov	arg03, #0
13b74     10 A2 B0 FD | 	call	#__system___basic_print_string
13b78     00 12 06 F6 | 	mov	arg01, #0
13b7c     94 EE B0 FD | 	call	#__system___getiolock_0474
13b80     FD 00 68 FC | 	wrlong	#0, result1
13b84     27 12 06 F6 | 	mov	arg01, #39
13b88     9C 54 B0 FD | 	call	#_printerror
13b8c     E8 00 90 FD | 	jmp	#LR__1604
13b90                 | LR__1600
13b90                 | ' 
13b90                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
13b90     0C 4E 05 F1 | 	add	fp, #12
13b94     A7 FE 09 FB | 	rdlong	result3, fp wz
13b98     0C 4E 85 F1 | 	sub	fp, #12
13b9c     30 00 90 5D |  if_ne	jmp	#LR__1601
13ba0     7B 00 00 FF 
13ba4     08 E4 05 F1 | 	add	objptr, ##62984
13ba8     F2 1E 02 FB | 	rdlong	local01, objptr
13bac     7B 00 00 FF 
13bb0     08 E4 85 F1 | 	sub	objptr, ##62984
13bb4     A7 1E 62 FC | 	wrlong	local01, fp
13bb8     08 4E 05 F1 | 	add	fp, #8
13bbc     A7 3A 68 FC | 	wrlong	#29, fp
13bc0     08 4E 85 F1 | 	sub	fp, #8
13bc4     A7 12 02 F6 | 	mov	arg01, fp
13bc8     78 66 BF FD | 	call	#_push
13bcc     A8 00 90 FD | 	jmp	#LR__1604
13bd0                 | LR__1601
13bd0     D8 65 BF FD | 	call	#_pop
13bd4     A7 FA 61 FC | 	wrlong	result1, fp
13bd8     04 4E 05 F1 | 	add	fp, #4
13bdc     A7 FC 61 FC | 	wrlong	result2, fp
13be0     04 4E 05 F1 | 	add	fp, #4
13be4     A7 FE 61 FC | 	wrlong	result3, fp
13be8                 | ' 
13be8                 | ' t1=pop()
13be8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
13be8     08 4E 85 F1 | 	sub	fp, #8
13bec     1C FE 0D F2 | 	cmp	result3, #28 wz
13bf0     08 4E 05 51 |  if_ne	add	fp, #8
13bf4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13bf8     08 4E 85 51 |  if_ne	sub	fp, #8
13bfc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13c00     6C 00 90 5D |  if_ne	jmp	#LR__1603
13c04     A7 1E 02 FB | 	rdlong	local01, fp
13c08     7B 00 00 FF 
13c0c     E8 E4 05 F1 | 	add	objptr, ##63208
13c10     F2 1E 62 FC | 	wrlong	local01, objptr
13c14                 | '   q=t1.result.uresult
13c14                 | '   if q<7 then 
13c14     7B 00 00 FF 
13c18     E8 E4 85 F1 | 	sub	objptr, ##63208
13c1c     07 1E 56 F2 | 	cmps	local01, #7 wc
13c20     40 00 90 3D |  if_ae	jmp	#LR__1602
13c24     7B 00 00 FF 
13c28     E8 E4 05 F1 | 	add	objptr, ##63208
13c2c     F2 1E 02 FB | 	rdlong	local01, objptr
13c30     02 1E 66 F0 | 	shl	local01, #2
13c34     E0 E4 85 F1 | 	sub	objptr, #224
13c38     F2 1E 02 F1 | 	add	local01, objptr
13c3c     0F 1F 02 FB | 	rdlong	local01, local01
13c40     A7 1E 62 FC | 	wrlong	local01, fp
13c44     08 4E 05 F1 | 	add	fp, #8
13c48     A7 3A 68 FC | 	wrlong	#29, fp
13c4c     08 4E 85 F1 | 	sub	fp, #8
13c50     A7 12 02 F6 | 	mov	arg01, fp
13c54     7B 00 00 FF 
13c58     08 E4 85 F1 | 	sub	objptr, ##62984
13c5c     E4 65 BF FD | 	call	#_push
13c60                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
13c60     14 00 90 FD | 	jmp	#LR__1604
13c64                 | LR__1602
13c64     29 12 06 F6 | 	mov	arg01, #41
13c68     BC 53 B0 FD | 	call	#_printerror
13c6c                 | '      printerror(41) : return
13c6c     08 00 90 FD | 	jmp	#LR__1604
13c70                 | LR__1603
13c70     29 12 06 F6 | 	mov	arg01, #41
13c74     B0 53 B0 FD | 	call	#_printerror
13c78                 | LR__1604
13c78     A7 F0 03 F6 | 	mov	ptra, fp
13c7c     B2 00 A0 FD | 	call	#popregs_
13c80                 | _do_strig_ret
13c80     2D 00 64 FD | 	ret
13c84                 | 
13c84                 | ' 
13c84                 | ' sub do_getpixel
13c84                 | _do_getpixel
13c84     00 4A 05 F6 | 	mov	COUNT_, #0
13c88     A8 00 A0 FD | 	call	#pushregs_
13c8c     24 F0 07 F1 | 	add	ptra, #36
13c90     6A 00 00 FF 
13c94     70 E4 05 F1 | 	add	objptr, ##54384
13c98     F2 16 02 FB | 	rdlong	arg03, objptr
13c9c     0B 15 02 F6 | 	mov	arg02, arg03
13ca0     01 14 66 F0 | 	shl	arg02, #1
13ca4     0B 15 02 F1 | 	add	arg02, arg03
13ca8     02 14 66 F0 | 	shl	arg02, #2
13cac     03 00 00 FF 
13cb0     04 E4 85 F1 | 	sub	objptr, ##1540
13cb4     F2 14 02 F1 | 	add	arg02, objptr
13cb8     0A 17 02 FB | 	rdlong	arg03, arg02
13cbc     18 4E 05 F1 | 	add	fp, #24
13cc0     A7 16 62 FC | 	wrlong	arg03, fp
13cc4                 | ' 
13cc4                 | ' numpar=compiledline(lineptr_e).result.uresult
13cc4                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
13cc4     18 4E 85 F1 | 	sub	fp, #24
13cc8     02 16 0E F2 | 	cmp	arg03, #2 wz
13ccc     67 00 00 FF 
13cd0     6C E4 85 F1 | 	sub	objptr, ##52844
13cd4     3C 00 90 AD |  if_e	jmp	#LR__1610
13cd8     00 12 06 F6 | 	mov	arg01, #0
13cdc     34 ED B0 FD | 	call	#__system___getiolock_0474
13ce0     FD 12 02 F6 | 	mov	arg01, result1
13ce4     9C 93 B0 FD | 	call	#__system___lockmem
13ce8     66 01 00 FF 
13cec     F7 14 06 F6 | 	mov	arg02, ##@LR__4985
13cf0     00 12 06 F6 | 	mov	arg01, #0
13cf4     00 16 06 F6 | 	mov	arg03, #0
13cf8     8C A0 B0 FD | 	call	#__system___basic_print_string
13cfc     00 12 06 F6 | 	mov	arg01, #0
13d00     10 ED B0 FD | 	call	#__system___getiolock_0474
13d04     FD 00 68 FC | 	wrlong	#0, result1
13d08     27 12 06 F6 | 	mov	arg01, #39
13d0c     18 53 B0 FD | 	call	#_printerror
13d10     B4 00 90 FD | 	jmp	#LR__1611
13d14                 | LR__1610
13d14     94 64 BF FD | 	call	#_pop
13d18     FD 16 02 F6 | 	mov	arg03, result1
13d1c     FE 14 02 F6 | 	mov	arg02, result2
13d20     FF 12 02 F6 | 	mov	arg01, result3
13d24     0C 4E 05 F1 | 	add	fp, #12
13d28     A7 16 62 FC | 	wrlong	arg03, fp
13d2c     04 4E 05 F1 | 	add	fp, #4
13d30     A7 14 62 FC | 	wrlong	arg02, fp
13d34     04 4E 05 F1 | 	add	fp, #4
13d38     A7 12 62 FC | 	wrlong	arg01, fp
13d3c     14 4E 85 F1 | 	sub	fp, #20
13d40     68 64 BF FD | 	call	#_pop
13d44     FF 16 02 F6 | 	mov	arg03, result3
13d48     A7 FA 61 FC | 	wrlong	result1, fp
13d4c     04 4E 05 F1 | 	add	fp, #4
13d50     A7 FC 61 FC | 	wrlong	result2, fp
13d54     04 4E 05 F1 | 	add	fp, #4
13d58     A7 16 62 FC | 	wrlong	arg03, fp
13d5c     08 4E 85 F1 | 	sub	fp, #8
13d60     A7 12 02 F6 | 	mov	arg01, fp
13d64     9C F0 BF FD | 	call	#_converttoint
13d68     1C 4E 05 F1 | 	add	fp, #28
13d6c     A7 FA 61 FC | 	wrlong	result1, fp
13d70     10 4E 85 F1 | 	sub	fp, #16
13d74     A7 12 02 F6 | 	mov	arg01, fp
13d78     0C 4E 85 F1 | 	sub	fp, #12
13d7c     84 F0 BF FD | 	call	#_converttoint
13d80     FD 16 02 F6 | 	mov	arg03, result1
13d84     20 4E 05 F1 | 	add	fp, #32
13d88     A7 16 62 FC | 	wrlong	arg03, fp
13d8c     F2 12 02 FB | 	rdlong	arg01, objptr
13d90     04 4E 85 F1 | 	sub	fp, #4
13d94     A7 FE 01 FB | 	rdlong	result3, fp
13d98     FF 12 02 F1 | 	add	arg01, result3
13d9c     1C 4E 85 F1 | 	sub	fp, #28
13da0     0A 16 66 F0 | 	shl	arg03, #10
13da4     0B 13 02 F1 | 	add	arg01, arg03
13da8     B8 54 B0 FD | 	call	#_pspeek
13dac     FD FA E1 F8 | 	getbyte	result1, result1, #0
13db0     A7 FA 61 FC | 	wrlong	result1, fp
13db4     08 4E 05 F1 | 	add	fp, #8
13db8     A7 3A 68 FC | 	wrlong	#29, fp
13dbc     08 4E 85 F1 | 	sub	fp, #8
13dc0     A7 12 02 F6 | 	mov	arg01, fp
13dc4     7C 64 BF FD | 	call	#_push
13dc8                 | LR__1611
13dc8     A7 F0 03 F6 | 	mov	ptra, fp
13dcc     B2 00 A0 FD | 	call	#popregs_
13dd0                 | _do_getpixel_ret
13dd0     2D 00 64 FD | 	ret
13dd4                 | 
13dd4                 | ' 
13dd4                 | ' 
13dd4                 | ' 
13dd4                 | ' sub do_defsprite
13dd4                 | _do_defsprite
13dd4     07 4A 05 F6 | 	mov	COUNT_, #7
13dd8     A8 00 A0 FD | 	call	#pushregs_
13ddc     5C F0 07 F1 | 	add	ptra, #92
13de0     C8 63 BF FD | 	call	#_pop
13de4     FD 16 02 F6 | 	mov	arg03, result1
13de8     FE 14 02 F6 | 	mov	arg02, result2
13dec     FF 12 02 F6 | 	mov	arg01, result3
13df0     30 4E 05 F1 | 	add	fp, #48
13df4     A7 16 62 FC | 	wrlong	arg03, fp
13df8     04 4E 05 F1 | 	add	fp, #4
13dfc     A7 14 62 FC | 	wrlong	arg02, fp
13e00     04 4E 05 F1 | 	add	fp, #4
13e04     A7 12 62 FC | 	wrlong	arg01, fp
13e08     38 4E 85 F1 | 	sub	fp, #56
13e0c     9C 63 BF FD | 	call	#_pop
13e10     FD 16 02 F6 | 	mov	arg03, result1
13e14     FE 14 02 F6 | 	mov	arg02, result2
13e18     FF 12 02 F6 | 	mov	arg01, result3
13e1c     24 4E 05 F1 | 	add	fp, #36
13e20     A7 16 62 FC | 	wrlong	arg03, fp
13e24     04 4E 05 F1 | 	add	fp, #4
13e28     A7 14 62 FC | 	wrlong	arg02, fp
13e2c     04 4E 05 F1 | 	add	fp, #4
13e30     A7 12 62 FC | 	wrlong	arg01, fp
13e34     2C 4E 85 F1 | 	sub	fp, #44
13e38     70 63 BF FD | 	call	#_pop
13e3c     FD 16 02 F6 | 	mov	arg03, result1
13e40     FE 14 02 F6 | 	mov	arg02, result2
13e44     FF 12 02 F6 | 	mov	arg01, result3
13e48     18 4E 05 F1 | 	add	fp, #24
13e4c     A7 16 62 FC | 	wrlong	arg03, fp
13e50     04 4E 05 F1 | 	add	fp, #4
13e54     A7 14 62 FC | 	wrlong	arg02, fp
13e58     04 4E 05 F1 | 	add	fp, #4
13e5c     A7 12 62 FC | 	wrlong	arg01, fp
13e60     20 4E 85 F1 | 	sub	fp, #32
13e64     44 63 BF FD | 	call	#_pop
13e68     FD 16 02 F6 | 	mov	arg03, result1
13e6c     FE 14 02 F6 | 	mov	arg02, result2
13e70     FF 12 02 F6 | 	mov	arg01, result3
13e74     0C 4E 05 F1 | 	add	fp, #12
13e78     A7 16 62 FC | 	wrlong	arg03, fp
13e7c     04 4E 05 F1 | 	add	fp, #4
13e80     A7 14 62 FC | 	wrlong	arg02, fp
13e84     04 4E 05 F1 | 	add	fp, #4
13e88     A7 12 62 FC | 	wrlong	arg01, fp
13e8c     14 4E 85 F1 | 	sub	fp, #20
13e90     18 63 BF FD | 	call	#_pop
13e94     FF 16 02 F6 | 	mov	arg03, result3
13e98     A7 FA 61 FC | 	wrlong	result1, fp
13e9c     04 4E 05 F1 | 	add	fp, #4
13ea0     A7 FC 61 FC | 	wrlong	result2, fp
13ea4     04 4E 05 F1 | 	add	fp, #4
13ea8     A7 16 62 FC | 	wrlong	arg03, fp
13eac     08 4E 85 F1 | 	sub	fp, #8
13eb0     A7 12 02 F6 | 	mov	arg01, fp
13eb4     4C EF BF FD | 	call	#_converttoint
13eb8     3C 4E 05 F1 | 	add	fp, #60
13ebc     A7 FA 61 FC | 	wrlong	result1, fp
13ec0     30 4E 85 F1 | 	sub	fp, #48
13ec4     A7 12 02 F6 | 	mov	arg01, fp
13ec8     0C 4E 85 F1 | 	sub	fp, #12
13ecc     34 EF BF FD | 	call	#_converttoint
13ed0     40 4E 05 F1 | 	add	fp, #64
13ed4     A7 FA 61 FC | 	wrlong	result1, fp
13ed8     28 4E 85 F1 | 	sub	fp, #40
13edc     A7 12 02 F6 | 	mov	arg01, fp
13ee0     18 4E 85 F1 | 	sub	fp, #24
13ee4     1C EF BF FD | 	call	#_converttoint
13ee8     44 4E 05 F1 | 	add	fp, #68
13eec     A7 FA 61 FC | 	wrlong	result1, fp
13ef0     20 4E 85 F1 | 	sub	fp, #32
13ef4     A7 12 02 F6 | 	mov	arg01, fp
13ef8     24 4E 85 F1 | 	sub	fp, #36
13efc     04 EF BF FD | 	call	#_converttoint
13f00     48 4E 05 F1 | 	add	fp, #72
13f04     A7 FA 61 FC | 	wrlong	result1, fp
13f08     18 4E 85 F1 | 	sub	fp, #24
13f0c     A7 12 02 F6 | 	mov	arg01, fp
13f10     30 4E 85 F1 | 	sub	fp, #48
13f14     EC EE BF FD | 	call	#_converttoint
13f18     4C 4E 05 F1 | 	add	fp, #76
13f1c     A7 FA 61 FC | 	wrlong	result1, fp
13f20                 | ' 
13f20                 | ' t5=pop()
13f20                 | ' t4=pop()
13f20                 | ' t3=pop()
13f20                 | ' t2=pop()
13f20                 | ' t1=pop()
13f20                 | ' 
13f20                 | ' ' do convert, defsprite is not a racing command
13f20                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
13f20                 | '  
13f20                 | ' ' todo: check parameters for linits
13f20                 | ' if sprite(a1)<> nil then delete(sprite(a1))
13f20     10 4E 85 F1 | 	sub	fp, #16
13f24     A7 16 02 FB | 	rdlong	arg03, fp
13f28     3C 4E 85 F1 | 	sub	fp, #60
13f2c     02 16 66 F0 | 	shl	arg03, #2
13f30     7B 00 00 FF 
13f34     24 E4 05 F1 | 	add	objptr, ##63012
13f38     F2 16 02 F1 | 	add	arg03, objptr
13f3c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
13f40     7B 00 00 FF 
13f44     24 E4 85 F1 | 	sub	objptr, ##63012
13f48     2C 00 90 AD |  if_e	jmp	#LR__1620
13f4c     3C 4E 05 F1 | 	add	fp, #60
13f50     A7 16 02 FB | 	rdlong	arg03, fp
13f54     3C 4E 85 F1 | 	sub	fp, #60
13f58     02 16 66 F0 | 	shl	arg03, #2
13f5c     7B 00 00 FF 
13f60     24 E4 05 F1 | 	add	objptr, ##63012
13f64     F2 16 02 F1 | 	add	arg03, objptr
13f68     0B 13 02 FB | 	rdlong	arg01, arg03
13f6c     7B 00 00 FF 
13f70     24 E4 85 F1 | 	sub	objptr, ##63012
13f74     90 D0 B0 FD | 	call	#__system___gc_free
13f78                 | LR__1620
13f78     3C 4E 05 F1 | 	add	fp, #60
13f7c     A7 1E 02 FB | 	rdlong	local01, fp
13f80     0C 4E 05 F1 | 	add	fp, #12
13f84     A7 16 02 FB | 	rdlong	arg03, fp
13f88     04 4E 05 F1 | 	add	fp, #4
13f8c     A7 14 02 FB | 	rdlong	arg02, fp
13f90     0A 17 02 FD | 	qmul	arg03, arg02
13f94     02 1E 66 F0 | 	shl	local01, #2
13f98     7B 00 00 FF 
13f9c     24 E4 05 F1 | 	add	objptr, ##63012
13fa0     F2 1E 02 F1 | 	add	local01, objptr
13fa4     4C 4E 85 F1 | 	sub	fp, #76
13fa8     7B 00 00 FF 
13fac     24 E4 85 F1 | 	sub	objptr, ##63012
13fb0     18 12 62 FD | 	getqx	arg01
13fb4     14 CF B0 FD | 	call	#__system___gc_alloc_managed
13fb8     0F FB 61 FC | 	wrlong	result1, local01
13fbc                 | ' for y=a3 to a3+a5-1
13fbc     44 4E 05 F1 | 	add	fp, #68
13fc0     A7 20 02 FB | 	rdlong	local02, fp
13fc4     0C 4E 05 F1 | 	add	fp, #12
13fc8     A7 20 62 FC | 	wrlong	local02, fp
13fcc     0C 4E 85 F1 | 	sub	fp, #12
13fd0     A7 22 02 FB | 	rdlong	local03, fp
13fd4     08 4E 05 F1 | 	add	fp, #8
13fd8     A7 24 02 FB | 	rdlong	local04, fp
13fdc     4C 4E 85 F1 | 	sub	fp, #76
13fe0     12 23 02 F1 | 	add	local03, local04
13fe4                 | LR__1621
13fe4     50 4E 05 F1 | 	add	fp, #80
13fe8     A7 20 02 FB | 	rdlong	local02, fp
13fec     50 4E 85 F1 | 	sub	fp, #80
13ff0     11 21 52 F2 | 	cmps	local02, local03 wc
13ff4     10 01 90 3D |  if_ae	jmp	#LR__1624
13ff8                 | '   for x=a2 to a4+a2-1
13ff8     40 4E 05 F1 | 	add	fp, #64
13ffc     A7 1E 02 FB | 	rdlong	local01, fp
14000     7B 00 00 FF 
14004     B4 E4 05 F1 | 	add	objptr, ##63156
14008     F2 1E 62 FC | 	wrlong	local01, objptr
1400c     7B 00 00 FF 
14010     B4 E4 85 F1 | 	sub	objptr, ##63156
14014     08 4E 05 F1 | 	add	fp, #8
14018     A7 26 02 FB | 	rdlong	local05, fp
1401c     08 4E 85 F1 | 	sub	fp, #8
14020     A7 28 02 FB | 	rdlong	local06, fp
14024     40 4E 85 F1 | 	sub	fp, #64
14028     14 27 02 F1 | 	add	local05, local06
1402c                 | LR__1622
1402c     7B 00 00 FF 
14030     B4 E4 05 F1 | 	add	objptr, ##63156
14034     F2 1E 02 FB | 	rdlong	local01, objptr
14038     7B 00 00 FF 
1403c     B4 E4 85 F1 | 	sub	objptr, ##63156
14040     13 1F 52 F2 | 	cmps	local01, local05 wc
14044     A8 00 90 3D |  if_ae	jmp	#LR__1623
14048     3C 4E 05 F1 | 	add	fp, #60
1404c     A7 28 02 FB | 	rdlong	local06, fp
14050     04 4E 05 F1 | 	add	fp, #4
14054     A7 24 02 FB | 	rdlong	local04, fp
14058     10 4E 05 F1 | 	add	fp, #16
1405c     A7 20 02 FB | 	rdlong	local02, fp
14060     10 1F 02 F6 | 	mov	local01, local02
14064     0C 4E 85 F1 | 	sub	fp, #12
14068     A7 16 02 FB | 	rdlong	arg03, fp
1406c     0B 1F 82 F1 | 	sub	local01, arg03
14070     04 4E 05 F1 | 	add	fp, #4
14074     A7 16 02 FB | 	rdlong	arg03, fp
14078     0B 1F 02 FD | 	qmul	local01, arg03
1407c     02 28 66 F0 | 	shl	local06, #2
14080     7B 00 00 FF 
14084     24 E4 05 F1 | 	add	objptr, ##63012
14088     F2 28 02 F1 | 	add	local06, objptr
1408c     14 29 02 FB | 	rdlong	local06, local06
14090     90 E4 05 F1 | 	add	objptr, #144
14094     F2 1E 02 FB | 	rdlong	local01, objptr
14098     7B 00 00 FF 
1409c     B4 E4 85 F1 | 	sub	objptr, ##63156
140a0     0F 2B 02 F6 | 	mov	local07, local01
140a4     12 2B 82 F1 | 	sub	local07, local04
140a8     F2 12 02 FB | 	rdlong	arg01, objptr
140ac     0F 13 02 F1 | 	add	arg01, local01
140b0     48 4E 85 F1 | 	sub	fp, #72
140b4     0A 20 66 F0 | 	shl	local02, #10
140b8     10 13 02 F1 | 	add	arg01, local02
140bc     18 24 62 FD | 	getqx	local04
140c0     12 2B 02 F1 | 	add	local07, local04
140c4     14 2B 02 F1 | 	add	local07, local06
140c8     98 51 B0 FD | 	call	#_pspeek
140cc     15 FB 41 FC | 	wrbyte	result1, local07
140d0     7B 00 00 FF 
140d4     B4 E4 05 F1 | 	add	objptr, ##63156
140d8     F2 2A 02 FB | 	rdlong	local07, objptr
140dc     01 2A 06 F1 | 	add	local07, #1
140e0     F2 2A 62 FC | 	wrlong	local07, objptr
140e4     7B 00 00 FF 
140e8     B4 E4 85 F1 | 	sub	objptr, ##63156
140ec     3C FF 9F FD | 	jmp	#LR__1622
140f0                 | LR__1623
140f0     50 4E 05 F1 | 	add	fp, #80
140f4     A7 2A 02 FB | 	rdlong	local07, fp
140f8     01 2A 06 F1 | 	add	local07, #1
140fc     A7 2A 62 FC | 	wrlong	local07, fp
14100     50 4E 85 F1 | 	sub	fp, #80
14104     DC FE 9F FD | 	jmp	#LR__1621
14108                 | LR__1624
14108     3C 4E 05 F1 | 	add	fp, #60
1410c     A7 2A 02 FB | 	rdlong	local07, fp
14110     15 13 02 F6 | 	mov	arg01, local07
14114     3C 4E 85 F1 | 	sub	fp, #60
14118     02 2A 66 F0 | 	shl	local07, #2
1411c     7B 00 00 FF 
14120     24 E4 05 F1 | 	add	objptr, ##63012
14124     F2 2A 02 F1 | 	add	local07, objptr
14128     15 15 02 FB | 	rdlong	arg02, local07
1412c     7B 00 00 FF 
14130     24 E4 85 F1 | 	sub	objptr, ##63012
14134     30 6B B0 FD | 	call	#_hg010b_spin2_setspriteptr
14138     3C 4E 05 F1 | 	add	fp, #60
1413c     A7 12 02 FB | 	rdlong	arg01, fp
14140     0C 4E 05 F1 | 	add	fp, #12
14144     A7 14 02 FB | 	rdlong	arg02, fp
14148     04 4E 05 F1 | 	add	fp, #4
1414c     A7 16 02 FB | 	rdlong	arg03, fp
14150     4C 4E 85 F1 | 	sub	fp, #76
14154     A0 6B B0 FD | 	call	#_hg010b_spin2_setspritesize
14158     A7 F0 03 F6 | 	mov	ptra, fp
1415c     B2 00 A0 FD | 	call	#popregs_
14160                 | _do_defsprite_ret
14160     2D 00 64 FD | 	ret
14164                 | 
14164                 | ' 
14164                 | ' sub do_sprite
14164                 | _do_sprite
14164     00 4A 05 F6 | 	mov	COUNT_, #0
14168     A8 00 A0 FD | 	call	#pushregs_
1416c     30 F0 07 F1 | 	add	ptra, #48
14170     38 60 BF FD | 	call	#_pop
14174     FD 16 02 F6 | 	mov	arg03, result1
14178     FE 14 02 F6 | 	mov	arg02, result2
1417c     FF 12 02 F6 | 	mov	arg01, result3
14180     18 4E 05 F1 | 	add	fp, #24
14184     A7 16 62 FC | 	wrlong	arg03, fp
14188     04 4E 05 F1 | 	add	fp, #4
1418c     A7 14 62 FC | 	wrlong	arg02, fp
14190     04 4E 05 F1 | 	add	fp, #4
14194     A7 12 62 FC | 	wrlong	arg01, fp
14198     20 4E 85 F1 | 	sub	fp, #32
1419c     0C 60 BF FD | 	call	#_pop
141a0     FD 16 02 F6 | 	mov	arg03, result1
141a4     FE 14 02 F6 | 	mov	arg02, result2
141a8     FF 12 02 F6 | 	mov	arg01, result3
141ac     0C 4E 05 F1 | 	add	fp, #12
141b0     A7 16 62 FC | 	wrlong	arg03, fp
141b4     04 4E 05 F1 | 	add	fp, #4
141b8     A7 14 62 FC | 	wrlong	arg02, fp
141bc     04 4E 05 F1 | 	add	fp, #4
141c0     A7 12 62 FC | 	wrlong	arg01, fp
141c4     14 4E 85 F1 | 	sub	fp, #20
141c8     E0 5F BF FD | 	call	#_pop
141cc     FF 16 02 F6 | 	mov	arg03, result3
141d0     A7 FA 61 FC | 	wrlong	result1, fp
141d4     04 4E 05 F1 | 	add	fp, #4
141d8     A7 FC 61 FC | 	wrlong	result2, fp
141dc     04 4E 05 F1 | 	add	fp, #4
141e0     A7 16 62 FC | 	wrlong	arg03, fp
141e4     08 4E 85 F1 | 	sub	fp, #8
141e8     A7 12 02 F6 | 	mov	arg01, fp
141ec     14 EC BF FD | 	call	#_converttoint
141f0     24 4E 05 F1 | 	add	fp, #36
141f4     A7 FA 61 FC | 	wrlong	result1, fp
141f8     18 4E 85 F1 | 	sub	fp, #24
141fc     A7 12 02 F6 | 	mov	arg01, fp
14200     0C 4E 85 F1 | 	sub	fp, #12
14204     FC EB BF FD | 	call	#_converttoint
14208     28 4E 05 F1 | 	add	fp, #40
1420c     A7 FA 61 FC | 	wrlong	result1, fp
14210     10 4E 85 F1 | 	sub	fp, #16
14214     A7 12 02 F6 | 	mov	arg01, fp
14218     18 4E 85 F1 | 	sub	fp, #24
1421c     E4 EB BF FD | 	call	#_converttoint
14220     2C 4E 05 F1 | 	add	fp, #44
14224     A7 FA 61 FC | 	wrlong	result1, fp
14228     08 4E 85 F1 | 	sub	fp, #8
1422c     A7 12 02 FB | 	rdlong	arg01, fp
14230     04 4E 05 F1 | 	add	fp, #4
14234     A7 14 02 FB | 	rdlong	arg02, fp
14238     FD 16 02 F6 | 	mov	arg03, result1
1423c     28 4E 85 F1 | 	sub	fp, #40
14240     4C 6A B0 FD | 	call	#_hg010b_spin2_setspritepos
14244     A7 F0 03 F6 | 	mov	ptra, fp
14248     B2 00 A0 FD | 	call	#popregs_
1424c                 | _do_sprite_ret
1424c     2D 00 64 FD | 	ret
14250                 | 
14250                 | ' 
14250                 | ' sub do_mousex
14250                 | _do_mousex
14250     00 4A 05 F6 | 	mov	COUNT_, #0
14254     A8 00 A0 FD | 	call	#pushregs_
14258     0C F0 07 F1 | 	add	ptra, #12
1425c     08 4E 05 F1 | 	add	fp, #8
14260     A7 3A 68 FC | 	wrlong	#29, fp
14264     08 4E 85 F1 | 	sub	fp, #8
14268     7A 00 00 FF 
1426c     DC E5 05 F1 | 	add	objptr, ##62940
14270     F2 12 02 FB | 	rdlong	arg01, objptr
14274     7A 00 00 FF 
14278     DC E5 85 F1 | 	sub	objptr, ##62940
1427c     A7 12 62 FC | 	wrlong	arg01, fp
14280     A7 12 02 F6 | 	mov	arg01, fp
14284     BC 5F BF FD | 	call	#_push
14288     A7 F0 03 F6 | 	mov	ptra, fp
1428c     B2 00 A0 FD | 	call	#popregs_
14290                 | _do_mousex_ret
14290     2D 00 64 FD | 	ret
14294                 | 
14294                 | ' 
14294                 | ' sub do_mousey
14294                 | _do_mousey
14294     00 4A 05 F6 | 	mov	COUNT_, #0
14298     A8 00 A0 FD | 	call	#pushregs_
1429c     0C F0 07 F1 | 	add	ptra, #12
142a0     08 4E 05 F1 | 	add	fp, #8
142a4     A7 3A 68 FC | 	wrlong	#29, fp
142a8     08 4E 85 F1 | 	sub	fp, #8
142ac     7A 00 00 FF 
142b0     E0 E5 05 F1 | 	add	objptr, ##62944
142b4     F2 12 02 FB | 	rdlong	arg01, objptr
142b8     7A 00 00 FF 
142bc     E0 E5 85 F1 | 	sub	objptr, ##62944
142c0     A7 12 62 FC | 	wrlong	arg01, fp
142c4     A7 12 02 F6 | 	mov	arg01, fp
142c8     78 5F BF FD | 	call	#_push
142cc     A7 F0 03 F6 | 	mov	ptra, fp
142d0     B2 00 A0 FD | 	call	#popregs_
142d4                 | _do_mousey_ret
142d4     2D 00 64 FD | 	ret
142d8                 | 
142d8                 | ' 
142d8                 | ' sub do_mousew
142d8                 | _do_mousew
142d8     00 4A 05 F6 | 	mov	COUNT_, #0
142dc     A8 00 A0 FD | 	call	#pushregs_
142e0     0C F0 07 F1 | 	add	ptra, #12
142e4     08 4E 05 F1 | 	add	fp, #8
142e8     A7 38 68 FC | 	wrlong	#28, fp
142ec     08 4E 85 F1 | 	sub	fp, #8
142f0     7A 00 00 FF 
142f4     E8 E5 05 F1 | 	add	objptr, ##62952
142f8     F2 12 02 FB | 	rdlong	arg01, objptr
142fc     7A 00 00 FF 
14300     E8 E5 85 F1 | 	sub	objptr, ##62952
14304     A7 12 62 FC | 	wrlong	arg01, fp
14308     A7 12 02 F6 | 	mov	arg01, fp
1430c     34 5F BF FD | 	call	#_push
14310     A7 F0 03 F6 | 	mov	ptra, fp
14314     B2 00 A0 FD | 	call	#popregs_
14318                 | _do_mousew_ret
14318     2D 00 64 FD | 	ret
1431c                 | 
1431c                 | ' 
1431c                 | ' sub do_mousek
1431c                 | _do_mousek
1431c     00 4A 05 F6 | 	mov	COUNT_, #0
14320     A8 00 A0 FD | 	call	#pushregs_
14324     0C F0 07 F1 | 	add	ptra, #12
14328     08 4E 05 F1 | 	add	fp, #8
1432c     A7 3A 68 FC | 	wrlong	#29, fp
14330     08 4E 85 F1 | 	sub	fp, #8
14334     7A 00 00 FF 
14338     E4 E5 05 F1 | 	add	objptr, ##62948
1433c     F2 12 02 FB | 	rdlong	arg01, objptr
14340     7A 00 00 FF 
14344     E4 E5 85 F1 | 	sub	objptr, ##62948
14348     A7 12 62 FC | 	wrlong	arg01, fp
1434c     A7 12 02 F6 | 	mov	arg01, fp
14350     F0 5E BF FD | 	call	#_push
14354     A7 F0 03 F6 | 	mov	ptra, fp
14358     B2 00 A0 FD | 	call	#popregs_
1435c                 | _do_mousek_ret
1435c     2D 00 64 FD | 	ret
14360                 | 
14360                 | ' 
14360                 | ' 
14360                 | ' sub do_rdpin
14360                 | _do_rdpin
14360     00 4A 05 F6 | 	mov	COUNT_, #0
14364     A8 00 A0 FD | 	call	#pushregs_
14368     0C F0 07 F1 | 	add	ptra, #12
1436c     3C 5E BF FD | 	call	#_pop
14370     A7 FA 61 FC | 	wrlong	result1, fp
14374     04 4E 05 F1 | 	add	fp, #4
14378     A7 FC 61 FC | 	wrlong	result2, fp
1437c     04 4E 05 F1 | 	add	fp, #4
14380     A7 FE 61 FC | 	wrlong	result3, fp
14384     08 4E 85 F1 | 	sub	fp, #8
14388     A7 12 02 F6 | 	mov	arg01, fp
1438c     74 EA BF FD | 	call	#_converttoint
14390     FD FA 89 FA | 	rdpin	result1, result1
14394     7B 00 00 FF 
14398     14 E5 05 F1 | 	add	objptr, ##63252
1439c     F2 FA 61 FC | 	wrlong	result1, objptr
143a0     7B 00 00 FF 
143a4     14 E5 85 F1 | 	sub	objptr, ##63252
143a8     08 4E 05 F1 | 	add	fp, #8
143ac     A7 3A 68 FC | 	wrlong	#29, fp
143b0     08 4E 85 F1 | 	sub	fp, #8
143b4     A7 08 68 FC | 	wrlong	#4, fp
143b8     A7 12 02 F6 | 	mov	arg01, fp
143bc     84 5E BF FD | 	call	#_push
143c0     A7 F0 03 F6 | 	mov	ptra, fp
143c4     B2 00 A0 FD | 	call	#popregs_
143c8                 | _do_rdpin_ret
143c8     2D 00 64 FD | 	ret
143cc                 | 
143cc                 | ' 
143cc                 | ' sub do_rqpin
143cc                 | _do_rqpin
143cc     00 4A 05 F6 | 	mov	COUNT_, #0
143d0     A8 00 A0 FD | 	call	#pushregs_
143d4     0C F0 07 F1 | 	add	ptra, #12
143d8     D0 5D BF FD | 	call	#_pop
143dc     A7 FA 61 FC | 	wrlong	result1, fp
143e0     04 4E 05 F1 | 	add	fp, #4
143e4     A7 FC 61 FC | 	wrlong	result2, fp
143e8     04 4E 05 F1 | 	add	fp, #4
143ec     A7 FE 61 FC | 	wrlong	result3, fp
143f0     08 4E 85 F1 | 	sub	fp, #8
143f4     A7 12 02 F6 | 	mov	arg01, fp
143f8     08 EA BF FD | 	call	#_converttoint
143fc     FD 12 02 F6 | 	mov	arg01, result1
14400     00 FA 05 F6 | 	mov	result1, #0
14404     09 FB 81 FA | 	rqpin	result1, arg01
14408     7B 00 00 FF 
1440c     14 E5 05 F1 | 	add	objptr, ##63252
14410     F2 FA 61 FC | 	wrlong	result1, objptr
14414     7B 00 00 FF 
14418     14 E5 85 F1 | 	sub	objptr, ##63252
1441c     08 4E 05 F1 | 	add	fp, #8
14420     A7 3A 68 FC | 	wrlong	#29, fp
14424     08 4E 85 F1 | 	sub	fp, #8
14428     A7 08 68 FC | 	wrlong	#4, fp
1442c     A7 12 02 F6 | 	mov	arg01, fp
14430     10 5E BF FD | 	call	#_push
14434     A7 F0 03 F6 | 	mov	ptra, fp
14438     B2 00 A0 FD | 	call	#popregs_
1443c                 | _do_rqpin_ret
1443c     2D 00 64 FD | 	ret
14440                 | 
14440                 | ' 
14440                 | ' sub do_pinread
14440                 | _do_pinread
14440     00 4A 05 F6 | 	mov	COUNT_, #0
14444     A8 00 A0 FD | 	call	#pushregs_
14448     0C F0 07 F1 | 	add	ptra, #12
1444c     5C 5D BF FD | 	call	#_pop
14450     A7 FA 61 FC | 	wrlong	result1, fp
14454     04 4E 05 F1 | 	add	fp, #4
14458     A7 FC 61 FC | 	wrlong	result2, fp
1445c     04 4E 05 F1 | 	add	fp, #4
14460     A7 FE 61 FC | 	wrlong	result3, fp
14464     08 4E 85 F1 | 	sub	fp, #8
14468     A7 12 02 F6 | 	mov	arg01, fp
1446c     94 E9 BF FD | 	call	#_converttoint
14470     FD 12 02 F6 | 	mov	arg01, result1
14474     20 12 CE F7 | 	test	arg01, #32 wz
14478     FF FB 01 56 |  if_ne	mov	result1, inb
1447c     FE FB 01 A6 |  if_e	mov	result1, ina
14480     09 FB 41 F0 | 	shr	result1, arg01
14484     06 12 46 F0 | 	shr	arg01, #6
14488     09 FB 41 F7 | 	zerox	result1, arg01
1448c     7B 00 00 FF 
14490     14 E5 05 F1 | 	add	objptr, ##63252
14494     F2 FA 61 FC | 	wrlong	result1, objptr
14498     7B 00 00 FF 
1449c     14 E5 85 F1 | 	sub	objptr, ##63252
144a0     08 4E 05 F1 | 	add	fp, #8
144a4     A7 3A 68 FC | 	wrlong	#29, fp
144a8     08 4E 85 F1 | 	sub	fp, #8
144ac     A7 08 68 FC | 	wrlong	#4, fp
144b0     A7 12 02 F6 | 	mov	arg01, fp
144b4     8C 5D BF FD | 	call	#_push
144b8     A7 F0 03 F6 | 	mov	ptra, fp
144bc     B2 00 A0 FD | 	call	#popregs_
144c0                 | _do_pinread_ret
144c0     2D 00 64 FD | 	ret
144c4                 | 
144c4                 | ' 
144c4                 | ' sub do_gettime
144c4                 | _do_gettime
144c4     02 4A 05 F6 | 	mov	COUNT_, #2
144c8     A8 00 A0 FD | 	call	#pushregs_
144cc     14 F0 07 F1 | 	add	ptra, #20
144d0                 | ' 
144d0                 | ' const asm 
144d0     1A 1E 72 FD | 	getct	local01 wc
144d4     1A 20 62 FD | 	getct	local02
144d8                 | ' 
144d8                 | ' return hi1, lo1
144d8     10 FD 01 F6 | 	mov	result2, local02
144dc     A7 1E 62 FC | 	wrlong	local01, fp
144e0     04 4E 05 F1 | 	add	fp, #4
144e4     A7 FC 61 FC | 	wrlong	result2, fp
144e8     0C 4E 05 F1 | 	add	fp, #12
144ec     A7 3A 68 FC | 	wrlong	#29, fp
144f0     0C 4E 85 F1 | 	sub	fp, #12
144f4     A7 12 02 FB | 	rdlong	arg01, fp
144f8     04 4E 05 F1 | 	add	fp, #4
144fc     A7 12 62 FC | 	wrlong	arg01, fp
14500     08 4E 85 F1 | 	sub	fp, #8
14504     A7 12 02 FB | 	rdlong	arg01, fp
14508     0C 4E 05 F1 | 	add	fp, #12
1450c     A7 12 62 FC | 	wrlong	arg01, fp
14510     04 4E 85 F1 | 	sub	fp, #4
14514     A7 12 02 F6 | 	mov	arg01, fp
14518     08 4E 85 F1 | 	sub	fp, #8
1451c     24 5D BF FD | 	call	#_push
14520     A7 F0 03 F6 | 	mov	ptra, fp
14524     B2 00 A0 FD | 	call	#popregs_
14528                 | _do_gettime_ret
14528     2D 00 64 FD | 	ret
1452c                 | 
1452c                 | '    
1452c                 | ' 
1452c                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
1452c                 | ' 
1452c                 | ' '' ----------------------------- Clear the screen
1452c                 | ' 
1452c                 | ' sub do_cls
1452c                 | _do_cls
1452c     57 00 00 FF 
14530     2C E4 05 F1 | 	add	objptr, ##44588
14534     F2 12 02 FB | 	rdlong	arg01, objptr
14538     04 E4 85 F1 | 	sub	objptr, #4
1453c     F2 14 02 FB | 	rdlong	arg02, objptr
14540     57 00 00 FF 
14544     28 E4 85 F1 | 	sub	objptr, ##44584
14548     CC 74 B0 FD | 	call	#_hg010b_spin2_cls
1454c     57 00 00 FF 
14550     2C E4 05 F1 | 	add	objptr, ##44588
14554     F2 14 02 FB | 	rdlong	arg02, objptr
14558     14 E4 85 F1 | 	sub	objptr, #20
1455c     F2 14 62 FC | 	wrlong	arg02, objptr
14560     57 00 00 FF 
14564     18 E4 85 F1 | 	sub	objptr, ##44568
14568                 | ' cls(ink,paper): plot_color=ink: print
14568     00 12 06 F6 | 	mov	arg01, #0
1456c     A4 E4 B0 FD | 	call	#__system___getiolock_0474
14570     FD 12 02 F6 | 	mov	arg01, result1
14574     0C 8B B0 FD | 	call	#__system___lockmem
14578     00 12 06 F6 | 	mov	arg01, #0
1457c     0A 14 06 F6 | 	mov	arg02, #10
14580     00 16 06 F6 | 	mov	arg03, #0
14584     A8 97 B0 FD | 	call	#__system___basic_print_char
14588     00 12 06 F6 | 	mov	arg01, #0
1458c     84 E4 B0 FD | 	call	#__system___getiolock_0474
14590     FD 00 68 FC | 	wrlong	#0, result1
14594                 | _do_cls_ret
14594     2D 00 64 FD | 	ret
14598                 | 
14598                 | ' 
14598                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
14598                 | ' 
14598                 | ' sub do_color
14598                 | _do_color
14598     03 4A 05 F6 | 	mov	COUNT_, #3
1459c     A8 00 A0 FD | 	call	#pushregs_
145a0     08 5C BF FD | 	call	#_pop
145a4     FD 1E 02 F6 | 	mov	local01, result1
145a8     FE 20 02 F6 | 	mov	local02, result2
145ac     FF 22 02 F6 | 	mov	local03, result3
145b0     57 00 00 FF 
145b4     18 E4 05 F1 | 	add	objptr, ##44568
145b8     F2 1E 62 FC | 	wrlong	local01, objptr
145bc     57 00 00 FF 
145c0     18 E4 85 F1 | 	sub	objptr, ##44568
145c4     A7 F0 03 F6 | 	mov	ptra, fp
145c8     B2 00 A0 FD | 	call	#popregs_
145cc                 | _do_color_ret
145cc     2D 00 64 FD | 	ret
145d0                 | 
145d0                 | ' 
145d0                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
145d0                 | ' 
145d0                 | ' sub do_plot
145d0                 | _do_plot
145d0     00 4A 05 F6 | 	mov	COUNT_, #0
145d4     A8 00 A0 FD | 	call	#pushregs_
145d8     20 F0 07 F1 | 	add	ptra, #32
145dc     CC 5B BF FD | 	call	#_pop
145e0     FD 16 02 F6 | 	mov	arg03, result1
145e4     FE 14 02 F6 | 	mov	arg02, result2
145e8     FF 12 02 F6 | 	mov	arg01, result3
145ec     0C 4E 05 F1 | 	add	fp, #12
145f0     A7 16 62 FC | 	wrlong	arg03, fp
145f4     04 4E 05 F1 | 	add	fp, #4
145f8     A7 14 62 FC | 	wrlong	arg02, fp
145fc     04 4E 05 F1 | 	add	fp, #4
14600     A7 12 62 FC | 	wrlong	arg01, fp
14604     14 4E 85 F1 | 	sub	fp, #20
14608     A0 5B BF FD | 	call	#_pop
1460c     FF 16 02 F6 | 	mov	arg03, result3
14610     A7 FA 61 FC | 	wrlong	result1, fp
14614     04 4E 05 F1 | 	add	fp, #4
14618     A7 FC 61 FC | 	wrlong	result2, fp
1461c     04 4E 05 F1 | 	add	fp, #4
14620     A7 16 62 FC | 	wrlong	arg03, fp
14624     08 4E 85 F1 | 	sub	fp, #8
14628     A7 12 02 F6 | 	mov	arg01, fp
1462c     D4 E7 BF FD | 	call	#_converttoint
14630     18 4E 05 F1 | 	add	fp, #24
14634     A7 FA 61 FC | 	wrlong	result1, fp
14638     0C 4E 85 F1 | 	sub	fp, #12
1463c     A7 12 02 F6 | 	mov	arg01, fp
14640     0C 4E 85 F1 | 	sub	fp, #12
14644     BC E7 BF FD | 	call	#_converttoint
14648     1C 4E 05 F1 | 	add	fp, #28
1464c     A7 FA 61 FC | 	wrlong	result1, fp
14650     04 4E 85 F1 | 	sub	fp, #4
14654     A7 16 02 FB | 	rdlong	arg03, fp
14658     57 00 00 FF 
1465c     1C E4 05 F1 | 	add	objptr, ##44572
14660     F2 16 62 FC | 	wrlong	arg03, objptr
14664     04 4E 05 F1 | 	add	fp, #4
14668     A7 14 02 FB | 	rdlong	arg02, fp
1466c     1C 4E 85 F1 | 	sub	fp, #28
14670     04 E4 05 F1 | 	add	objptr, #4
14674     F2 14 62 FC | 	wrlong	arg02, objptr
14678     04 E4 85 F1 | 	sub	objptr, #4
1467c     F2 12 02 FB | 	rdlong	arg01, objptr
14680     04 E4 85 F1 | 	sub	objptr, #4
14684     F2 16 02 FB | 	rdlong	arg03, objptr
14688     57 00 00 FF 
1468c     18 E4 85 F1 | 	sub	objptr, ##44568
14690     B0 66 B0 FD | 	call	#_hg010b_spin2_putpixel
14694     A7 F0 03 F6 | 	mov	ptra, fp
14698     B2 00 A0 FD | 	call	#popregs_
1469c                 | _do_plot_ret
1469c     2D 00 64 FD | 	ret
146a0                 | 
146a0                 | ' 
146a0                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
146a0                 | ' 
146a0                 | ' sub do_draw
146a0                 | _do_draw
146a0     00 4A 05 F6 | 	mov	COUNT_, #0
146a4     A8 00 A0 FD | 	call	#pushregs_
146a8     20 F0 07 F1 | 	add	ptra, #32
146ac     FC 5A BF FD | 	call	#_pop
146b0     FD 1A 02 F6 | 	mov	arg05, result1
146b4     FE 18 02 F6 | 	mov	arg04, result2
146b8     FF 16 02 F6 | 	mov	arg03, result3
146bc     0C 4E 05 F1 | 	add	fp, #12
146c0     A7 1A 62 FC | 	wrlong	arg05, fp
146c4     04 4E 05 F1 | 	add	fp, #4
146c8     A7 18 62 FC | 	wrlong	arg04, fp
146cc     04 4E 05 F1 | 	add	fp, #4
146d0     A7 16 62 FC | 	wrlong	arg03, fp
146d4     14 4E 85 F1 | 	sub	fp, #20
146d8     D0 5A BF FD | 	call	#_pop
146dc     FF 1A 02 F6 | 	mov	arg05, result3
146e0     A7 FA 61 FC | 	wrlong	result1, fp
146e4     04 4E 05 F1 | 	add	fp, #4
146e8     A7 FC 61 FC | 	wrlong	result2, fp
146ec     04 4E 05 F1 | 	add	fp, #4
146f0     A7 1A 62 FC | 	wrlong	arg05, fp
146f4     08 4E 85 F1 | 	sub	fp, #8
146f8     A7 12 02 F6 | 	mov	arg01, fp
146fc     04 E7 BF FD | 	call	#_converttoint
14700     18 4E 05 F1 | 	add	fp, #24
14704     A7 FA 61 FC | 	wrlong	result1, fp
14708     0C 4E 85 F1 | 	sub	fp, #12
1470c     A7 12 02 F6 | 	mov	arg01, fp
14710     0C 4E 85 F1 | 	sub	fp, #12
14714     EC E6 BF FD | 	call	#_converttoint
14718     1C 4E 05 F1 | 	add	fp, #28
1471c     A7 FA 61 FC | 	wrlong	result1, fp
14720     57 00 00 FF 
14724     1C E4 05 F1 | 	add	objptr, ##44572
14728     F2 12 02 FB | 	rdlong	arg01, objptr
1472c     04 E4 05 F1 | 	add	objptr, #4
14730     F2 14 02 FB | 	rdlong	arg02, objptr
14734     04 4E 85 F1 | 	sub	fp, #4
14738     A7 16 02 FB | 	rdlong	arg03, fp
1473c     FD 18 02 F6 | 	mov	arg04, result1
14740     18 4E 85 F1 | 	sub	fp, #24
14744     08 E4 85 F1 | 	sub	objptr, #8
14748     F2 1A 02 FB | 	rdlong	arg05, objptr
1474c     57 00 00 FF 
14750     18 E4 85 F1 | 	sub	objptr, ##44568
14754     9C 68 B0 FD | 	call	#_hg010b_spin2_draw
14758     18 4E 05 F1 | 	add	fp, #24
1475c     A7 1A 02 FB | 	rdlong	arg05, fp
14760     57 00 00 FF 
14764     1C E4 05 F1 | 	add	objptr, ##44572
14768     F2 1A 62 FC | 	wrlong	arg05, objptr
1476c     04 4E 05 F1 | 	add	fp, #4
14770     A7 1A 02 FB | 	rdlong	arg05, fp
14774     1C 4E 85 F1 | 	sub	fp, #28
14778     04 E4 05 F1 | 	add	objptr, #4
1477c     F2 1A 62 FC | 	wrlong	arg05, objptr
14780     57 00 00 FF 
14784     20 E4 85 F1 | 	sub	objptr, ##44576
14788     A7 F0 03 F6 | 	mov	ptra, fp
1478c     B2 00 A0 FD | 	call	#popregs_
14790                 | _do_draw_ret
14790     2D 00 64 FD | 	ret
14794                 | 
14794                 | ' 
14794                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
14794                 | ' 
14794                 | ' sub do_fcircle
14794                 | _do_fcircle
14794     02 4A 05 F6 | 	mov	COUNT_, #2
14798     A8 00 A0 FD | 	call	#pushregs_
1479c     24 F0 07 F1 | 	add	ptra, #36
147a0     08 5A BF FD | 	call	#_pop
147a4     FD 18 02 F6 | 	mov	arg04, result1
147a8     FE 16 02 F6 | 	mov	arg03, result2
147ac     FF 14 02 F6 | 	mov	arg02, result3
147b0     18 4E 05 F1 | 	add	fp, #24
147b4     A7 18 62 FC | 	wrlong	arg04, fp
147b8     04 4E 05 F1 | 	add	fp, #4
147bc     A7 16 62 FC | 	wrlong	arg03, fp
147c0     04 4E 05 F1 | 	add	fp, #4
147c4     A7 14 62 FC | 	wrlong	arg02, fp
147c8     20 4E 85 F1 | 	sub	fp, #32
147cc     DC 59 BF FD | 	call	#_pop
147d0     FD 18 02 F6 | 	mov	arg04, result1
147d4     FE 16 02 F6 | 	mov	arg03, result2
147d8     FF 1E 02 F6 | 	mov	local01, result3
147dc     0C 4E 05 F1 | 	add	fp, #12
147e0     A7 18 62 FC | 	wrlong	arg04, fp
147e4     04 4E 05 F1 | 	add	fp, #4
147e8     A7 16 62 FC | 	wrlong	arg03, fp
147ec     04 4E 05 F1 | 	add	fp, #4
147f0     A7 1E 62 FC | 	wrlong	local01, fp
147f4     14 4E 85 F1 | 	sub	fp, #20
147f8     B0 59 BF FD | 	call	#_pop
147fc     A7 FA 61 FC | 	wrlong	result1, fp
14800     04 4E 05 F1 | 	add	fp, #4
14804     A7 FC 61 FC | 	wrlong	result2, fp
14808     04 4E 05 F1 | 	add	fp, #4
1480c     A7 FE 61 FC | 	wrlong	result3, fp
14810                 | ' 
14810                 | ' t3=pop()
14810                 | ' t2=pop()
14810                 | ' t1=pop()
14810                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
14810     FF 18 02 F6 | 	mov	arg04, result3
14814     08 4E 85 F1 | 	sub	fp, #8
14818     1C 18 0E F2 | 	cmp	arg04, #28 wz
1481c     08 4E 05 51 |  if_ne	add	fp, #8
14820     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14824     08 4E 85 51 |  if_ne	sub	fp, #8
14828     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1482c     7C 00 90 5D |  if_ne	jmp	#LR__1630
14830     14 4E 05 F1 | 	add	fp, #20
14834     A7 1E 02 FB | 	rdlong	local01, fp
14838     14 4E 85 F1 | 	sub	fp, #20
1483c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14840     14 4E 05 51 |  if_ne	add	fp, #20
14844     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14848     14 4E 85 51 |  if_ne	sub	fp, #20
1484c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14850     58 00 90 5D |  if_ne	jmp	#LR__1630
14854     20 4E 05 F1 | 	add	fp, #32
14858     A7 1E 02 FB | 	rdlong	local01, fp
1485c     20 4E 85 F1 | 	sub	fp, #32
14860     1C 1E 0E F2 | 	cmp	local01, #28 wz
14864     20 4E 05 51 |  if_ne	add	fp, #32
14868     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1486c     20 4E 85 51 |  if_ne	sub	fp, #32
14870     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14874     34 00 90 5D |  if_ne	jmp	#LR__1630
14878     A7 12 02 FB | 	rdlong	arg01, fp
1487c     0C 4E 05 F1 | 	add	fp, #12
14880     A7 14 02 FB | 	rdlong	arg02, fp
14884     0C 4E 05 F1 | 	add	fp, #12
14888     A7 16 02 FB | 	rdlong	arg03, fp
1488c     18 4E 85 F1 | 	sub	fp, #24
14890     57 00 00 FF 
14894     18 E4 05 F1 | 	add	objptr, ##44568
14898     F2 18 02 FB | 	rdlong	arg04, objptr
1489c     57 00 00 FF 
148a0     18 E4 85 F1 | 	sub	objptr, ##44568
148a4     D0 6B B0 FD | 	call	#_hg010b_spin2_fcircle
148a8                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
148a8     54 00 90 FD | 	jmp	#LR__1631
148ac                 | LR__1630
148ac     A7 12 02 F6 | 	mov	arg01, fp
148b0     50 E5 BF FD | 	call	#_converttoint
148b4     FD 1E 02 F6 | 	mov	local01, result1
148b8     0C 4E 05 F1 | 	add	fp, #12
148bc     A7 12 02 F6 | 	mov	arg01, fp
148c0     0C 4E 85 F1 | 	sub	fp, #12
148c4     3C E5 BF FD | 	call	#_converttoint
148c8     FD 20 02 F6 | 	mov	local02, result1
148cc     18 4E 05 F1 | 	add	fp, #24
148d0     A7 12 02 F6 | 	mov	arg01, fp
148d4     18 4E 85 F1 | 	sub	fp, #24
148d8     28 E5 BF FD | 	call	#_converttoint
148dc     FD 16 02 F6 | 	mov	arg03, result1
148e0     57 00 00 FF 
148e4     18 E4 05 F1 | 	add	objptr, ##44568
148e8     F2 18 02 FB | 	rdlong	arg04, objptr
148ec     57 00 00 FF 
148f0     18 E4 85 F1 | 	sub	objptr, ##44568
148f4     0F 13 02 F6 | 	mov	arg01, local01
148f8     10 15 02 F6 | 	mov	arg02, local02
148fc     78 6B B0 FD | 	call	#_hg010b_spin2_fcircle
14900                 | LR__1631
14900     A7 F0 03 F6 | 	mov	ptra, fp
14904     B2 00 A0 FD | 	call	#popregs_
14908                 | _do_fcircle_ret
14908     2D 00 64 FD | 	ret
1490c                 | 
1490c                 | ' 
1490c                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
1490c                 | ' 
1490c                 | ' sub do_circle
1490c                 | _do_circle
1490c     02 4A 05 F6 | 	mov	COUNT_, #2
14910     A8 00 A0 FD | 	call	#pushregs_
14914     24 F0 07 F1 | 	add	ptra, #36
14918     90 58 BF FD | 	call	#_pop
1491c     FD 18 02 F6 | 	mov	arg04, result1
14920     FE 16 02 F6 | 	mov	arg03, result2
14924     FF 14 02 F6 | 	mov	arg02, result3
14928     18 4E 05 F1 | 	add	fp, #24
1492c     A7 18 62 FC | 	wrlong	arg04, fp
14930     04 4E 05 F1 | 	add	fp, #4
14934     A7 16 62 FC | 	wrlong	arg03, fp
14938     04 4E 05 F1 | 	add	fp, #4
1493c     A7 14 62 FC | 	wrlong	arg02, fp
14940     20 4E 85 F1 | 	sub	fp, #32
14944     64 58 BF FD | 	call	#_pop
14948     FD 18 02 F6 | 	mov	arg04, result1
1494c     FE 16 02 F6 | 	mov	arg03, result2
14950     FF 1E 02 F6 | 	mov	local01, result3
14954     0C 4E 05 F1 | 	add	fp, #12
14958     A7 18 62 FC | 	wrlong	arg04, fp
1495c     04 4E 05 F1 | 	add	fp, #4
14960     A7 16 62 FC | 	wrlong	arg03, fp
14964     04 4E 05 F1 | 	add	fp, #4
14968     A7 1E 62 FC | 	wrlong	local01, fp
1496c     14 4E 85 F1 | 	sub	fp, #20
14970     38 58 BF FD | 	call	#_pop
14974     A7 FA 61 FC | 	wrlong	result1, fp
14978     04 4E 05 F1 | 	add	fp, #4
1497c     A7 FC 61 FC | 	wrlong	result2, fp
14980     04 4E 05 F1 | 	add	fp, #4
14984     A7 FE 61 FC | 	wrlong	result3, fp
14988                 | ' 
14988                 | ' t3=pop()
14988                 | ' t2=pop()
14988                 | ' t1=pop()
14988                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
14988     FF 18 02 F6 | 	mov	arg04, result3
1498c     08 4E 85 F1 | 	sub	fp, #8
14990     1C 18 0E F2 | 	cmp	arg04, #28 wz
14994     08 4E 05 51 |  if_ne	add	fp, #8
14998     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1499c     08 4E 85 51 |  if_ne	sub	fp, #8
149a0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
149a4     7C 00 90 5D |  if_ne	jmp	#LR__1640
149a8     14 4E 05 F1 | 	add	fp, #20
149ac     A7 1E 02 FB | 	rdlong	local01, fp
149b0     14 4E 85 F1 | 	sub	fp, #20
149b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
149b8     14 4E 05 51 |  if_ne	add	fp, #20
149bc     A7 18 02 5B |  if_ne	rdlong	arg04, fp
149c0     14 4E 85 51 |  if_ne	sub	fp, #20
149c4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
149c8     58 00 90 5D |  if_ne	jmp	#LR__1640
149cc     20 4E 05 F1 | 	add	fp, #32
149d0     A7 1E 02 FB | 	rdlong	local01, fp
149d4     20 4E 85 F1 | 	sub	fp, #32
149d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
149dc     20 4E 05 51 |  if_ne	add	fp, #32
149e0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
149e4     20 4E 85 51 |  if_ne	sub	fp, #32
149e8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
149ec     34 00 90 5D |  if_ne	jmp	#LR__1640
149f0     A7 12 02 FB | 	rdlong	arg01, fp
149f4     0C 4E 05 F1 | 	add	fp, #12
149f8     A7 14 02 FB | 	rdlong	arg02, fp
149fc     0C 4E 05 F1 | 	add	fp, #12
14a00     A7 16 02 FB | 	rdlong	arg03, fp
14a04     18 4E 85 F1 | 	sub	fp, #24
14a08     57 00 00 FF 
14a0c     18 E4 05 F1 | 	add	objptr, ##44568
14a10     F2 18 02 FB | 	rdlong	arg04, objptr
14a14     57 00 00 FF 
14a18     18 E4 85 F1 | 	sub	objptr, ##44568
14a1c     64 6B B0 FD | 	call	#_hg010b_spin2_circle
14a20                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
14a20     54 00 90 FD | 	jmp	#LR__1641
14a24                 | LR__1640
14a24     A7 12 02 F6 | 	mov	arg01, fp
14a28     D8 E3 BF FD | 	call	#_converttoint
14a2c     FD 1E 02 F6 | 	mov	local01, result1
14a30     0C 4E 05 F1 | 	add	fp, #12
14a34     A7 12 02 F6 | 	mov	arg01, fp
14a38     0C 4E 85 F1 | 	sub	fp, #12
14a3c     C4 E3 BF FD | 	call	#_converttoint
14a40     FD 20 02 F6 | 	mov	local02, result1
14a44     18 4E 05 F1 | 	add	fp, #24
14a48     A7 12 02 F6 | 	mov	arg01, fp
14a4c     18 4E 85 F1 | 	sub	fp, #24
14a50     B0 E3 BF FD | 	call	#_converttoint
14a54     FD 16 02 F6 | 	mov	arg03, result1
14a58     57 00 00 FF 
14a5c     18 E4 05 F1 | 	add	objptr, ##44568
14a60     F2 18 02 FB | 	rdlong	arg04, objptr
14a64     57 00 00 FF 
14a68     18 E4 85 F1 | 	sub	objptr, ##44568
14a6c     0F 13 02 F6 | 	mov	arg01, local01
14a70     10 15 02 F6 | 	mov	arg02, local02
14a74     0C 6B B0 FD | 	call	#_hg010b_spin2_circle
14a78                 | LR__1641
14a78     A7 F0 03 F6 | 	mov	ptra, fp
14a7c     B2 00 A0 FD | 	call	#popregs_
14a80                 | _do_circle_ret
14a80     2D 00 64 FD | 	ret
14a84                 | 
14a84                 | ' 
14a84                 | ' ' -------------------------- Draw a rectangle
14a84                 | ' 
14a84                 | ' sub do_box
14a84                 | _do_box
14a84     03 4A 05 F6 | 	mov	COUNT_, #3
14a88     A8 00 A0 FD | 	call	#pushregs_
14a8c     30 F0 07 F1 | 	add	ptra, #48
14a90     18 57 BF FD | 	call	#_pop
14a94     FD 1A 02 F6 | 	mov	arg05, result1
14a98     FE 18 02 F6 | 	mov	arg04, result2
14a9c     FF 16 02 F6 | 	mov	arg03, result3
14aa0     24 4E 05 F1 | 	add	fp, #36
14aa4     A7 1A 62 FC | 	wrlong	arg05, fp
14aa8     04 4E 05 F1 | 	add	fp, #4
14aac     A7 18 62 FC | 	wrlong	arg04, fp
14ab0     04 4E 05 F1 | 	add	fp, #4
14ab4     A7 16 62 FC | 	wrlong	arg03, fp
14ab8     2C 4E 85 F1 | 	sub	fp, #44
14abc     EC 56 BF FD | 	call	#_pop
14ac0     FD 1A 02 F6 | 	mov	arg05, result1
14ac4     FE 18 02 F6 | 	mov	arg04, result2
14ac8     FF 16 02 F6 | 	mov	arg03, result3
14acc     18 4E 05 F1 | 	add	fp, #24
14ad0     A7 1A 62 FC | 	wrlong	arg05, fp
14ad4     04 4E 05 F1 | 	add	fp, #4
14ad8     A7 18 62 FC | 	wrlong	arg04, fp
14adc     04 4E 05 F1 | 	add	fp, #4
14ae0     A7 16 62 FC | 	wrlong	arg03, fp
14ae4     20 4E 85 F1 | 	sub	fp, #32
14ae8     C0 56 BF FD | 	call	#_pop
14aec     FD 1A 02 F6 | 	mov	arg05, result1
14af0     FE 18 02 F6 | 	mov	arg04, result2
14af4     FF 1E 02 F6 | 	mov	local01, result3
14af8     0C 4E 05 F1 | 	add	fp, #12
14afc     A7 1A 62 FC | 	wrlong	arg05, fp
14b00     04 4E 05 F1 | 	add	fp, #4
14b04     A7 18 62 FC | 	wrlong	arg04, fp
14b08     04 4E 05 F1 | 	add	fp, #4
14b0c     A7 1E 62 FC | 	wrlong	local01, fp
14b10     14 4E 85 F1 | 	sub	fp, #20
14b14     94 56 BF FD | 	call	#_pop
14b18     A7 FA 61 FC | 	wrlong	result1, fp
14b1c     04 4E 05 F1 | 	add	fp, #4
14b20     A7 FC 61 FC | 	wrlong	result2, fp
14b24     04 4E 05 F1 | 	add	fp, #4
14b28     A7 FE 61 FC | 	wrlong	result3, fp
14b2c                 | ' 
14b2c                 | ' t4=pop()
14b2c                 | ' t3=pop()
14b2c                 | ' t2=pop()
14b2c                 | ' t1=pop()
14b2c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
14b2c     FF 1A 02 F6 | 	mov	arg05, result3
14b30     08 4E 85 F1 | 	sub	fp, #8
14b34     1C 1A 0E F2 | 	cmp	arg05, #28 wz
14b38     08 4E 05 51 |  if_ne	add	fp, #8
14b3c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14b40     08 4E 85 51 |  if_ne	sub	fp, #8
14b44     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14b48     A8 00 90 5D |  if_ne	jmp	#LR__1650
14b4c     14 4E 05 F1 | 	add	fp, #20
14b50     A7 1E 02 FB | 	rdlong	local01, fp
14b54     14 4E 85 F1 | 	sub	fp, #20
14b58     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b5c     14 4E 05 51 |  if_ne	add	fp, #20
14b60     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14b64     14 4E 85 51 |  if_ne	sub	fp, #20
14b68     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14b6c     84 00 90 5D |  if_ne	jmp	#LR__1650
14b70     20 4E 05 F1 | 	add	fp, #32
14b74     A7 1E 02 FB | 	rdlong	local01, fp
14b78     20 4E 85 F1 | 	sub	fp, #32
14b7c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b80     20 4E 05 51 |  if_ne	add	fp, #32
14b84     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14b88     20 4E 85 51 |  if_ne	sub	fp, #32
14b8c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14b90     60 00 90 5D |  if_ne	jmp	#LR__1650
14b94     2C 4E 05 F1 | 	add	fp, #44
14b98     A7 1E 02 FB | 	rdlong	local01, fp
14b9c     2C 4E 85 F1 | 	sub	fp, #44
14ba0     1C 1E 0E F2 | 	cmp	local01, #28 wz
14ba4     2C 4E 05 51 |  if_ne	add	fp, #44
14ba8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14bac     2C 4E 85 51 |  if_ne	sub	fp, #44
14bb0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14bb4     3C 00 90 5D |  if_ne	jmp	#LR__1650
14bb8     A7 12 02 FB | 	rdlong	arg01, fp
14bbc     0C 4E 05 F1 | 	add	fp, #12
14bc0     A7 14 02 FB | 	rdlong	arg02, fp
14bc4     0C 4E 05 F1 | 	add	fp, #12
14bc8     A7 16 02 FB | 	rdlong	arg03, fp
14bcc     0C 4E 05 F1 | 	add	fp, #12
14bd0     A7 18 02 FB | 	rdlong	arg04, fp
14bd4     24 4E 85 F1 | 	sub	fp, #36
14bd8     57 00 00 FF 
14bdc     18 E4 05 F1 | 	add	objptr, ##44568
14be0     F2 1A 02 FB | 	rdlong	arg05, objptr
14be4     57 00 00 FF 
14be8     18 E4 85 F1 | 	sub	objptr, ##44568
14bec     60 6B B0 FD | 	call	#_hg010b_spin2_box
14bf0                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
14bf0     6C 00 90 FD | 	jmp	#LR__1651
14bf4                 | LR__1650
14bf4     A7 12 02 F6 | 	mov	arg01, fp
14bf8     08 E2 BF FD | 	call	#_converttoint
14bfc     FD 20 02 F6 | 	mov	local02, result1
14c00     0C 4E 05 F1 | 	add	fp, #12
14c04     A7 12 02 F6 | 	mov	arg01, fp
14c08     0C 4E 85 F1 | 	sub	fp, #12
14c0c     F4 E1 BF FD | 	call	#_converttoint
14c10     FD 22 02 F6 | 	mov	local03, result1
14c14     18 4E 05 F1 | 	add	fp, #24
14c18     A7 12 02 F6 | 	mov	arg01, fp
14c1c     18 4E 85 F1 | 	sub	fp, #24
14c20     E0 E1 BF FD | 	call	#_converttoint
14c24     FD 1E 02 F6 | 	mov	local01, result1
14c28     24 4E 05 F1 | 	add	fp, #36
14c2c     A7 12 02 F6 | 	mov	arg01, fp
14c30     24 4E 85 F1 | 	sub	fp, #36
14c34     CC E1 BF FD | 	call	#_converttoint
14c38     FD 18 02 F6 | 	mov	arg04, result1
14c3c     57 00 00 FF 
14c40     18 E4 05 F1 | 	add	objptr, ##44568
14c44     F2 1A 02 FB | 	rdlong	arg05, objptr
14c48     57 00 00 FF 
14c4c     18 E4 85 F1 | 	sub	objptr, ##44568
14c50     10 13 02 F6 | 	mov	arg01, local02
14c54     11 15 02 F6 | 	mov	arg02, local03
14c58     0F 17 02 F6 | 	mov	arg03, local01
14c5c     F0 6A B0 FD | 	call	#_hg010b_spin2_box
14c60                 | LR__1651
14c60     A7 F0 03 F6 | 	mov	ptra, fp
14c64     B2 00 A0 FD | 	call	#popregs_
14c68                 | _do_box_ret
14c68     2D 00 64 FD | 	ret
14c6c                 | 
14c6c                 | ' 
14c6c                 | ' sub do_fill
14c6c                 | _do_fill
14c6c     03 4A 05 F6 | 	mov	COUNT_, #3
14c70     A8 00 A0 FD | 	call	#pushregs_
14c74     30 F0 07 F1 | 	add	ptra, #48
14c78     30 55 BF FD | 	call	#_pop
14c7c     FD 18 02 F6 | 	mov	arg04, result1
14c80     FE 16 02 F6 | 	mov	arg03, result2
14c84     FF 14 02 F6 | 	mov	arg02, result3
14c88     24 4E 05 F1 | 	add	fp, #36
14c8c     A7 18 62 FC | 	wrlong	arg04, fp
14c90     04 4E 05 F1 | 	add	fp, #4
14c94     A7 16 62 FC | 	wrlong	arg03, fp
14c98     04 4E 05 F1 | 	add	fp, #4
14c9c     A7 14 62 FC | 	wrlong	arg02, fp
14ca0     2C 4E 85 F1 | 	sub	fp, #44
14ca4     04 55 BF FD | 	call	#_pop
14ca8     FD 18 02 F6 | 	mov	arg04, result1
14cac     FE 16 02 F6 | 	mov	arg03, result2
14cb0     FF 14 02 F6 | 	mov	arg02, result3
14cb4     18 4E 05 F1 | 	add	fp, #24
14cb8     A7 18 62 FC | 	wrlong	arg04, fp
14cbc     04 4E 05 F1 | 	add	fp, #4
14cc0     A7 16 62 FC | 	wrlong	arg03, fp
14cc4     04 4E 05 F1 | 	add	fp, #4
14cc8     A7 14 62 FC | 	wrlong	arg02, fp
14ccc     20 4E 85 F1 | 	sub	fp, #32
14cd0     D8 54 BF FD | 	call	#_pop
14cd4     FD 18 02 F6 | 	mov	arg04, result1
14cd8     FE 16 02 F6 | 	mov	arg03, result2
14cdc     FF 1E 02 F6 | 	mov	local01, result3
14ce0     0C 4E 05 F1 | 	add	fp, #12
14ce4     A7 18 62 FC | 	wrlong	arg04, fp
14ce8     04 4E 05 F1 | 	add	fp, #4
14cec     A7 16 62 FC | 	wrlong	arg03, fp
14cf0     04 4E 05 F1 | 	add	fp, #4
14cf4     A7 1E 62 FC | 	wrlong	local01, fp
14cf8     14 4E 85 F1 | 	sub	fp, #20
14cfc     AC 54 BF FD | 	call	#_pop
14d00     A7 FA 61 FC | 	wrlong	result1, fp
14d04     04 4E 05 F1 | 	add	fp, #4
14d08     A7 FC 61 FC | 	wrlong	result2, fp
14d0c     04 4E 05 F1 | 	add	fp, #4
14d10     A7 FE 61 FC | 	wrlong	result3, fp
14d14                 | ' 
14d14                 | ' t4=pop()
14d14                 | ' t3=pop()
14d14                 | ' t2=pop()
14d14                 | ' t1=pop()
14d14                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
14d14     FF 18 02 F6 | 	mov	arg04, result3
14d18     08 4E 85 F1 | 	sub	fp, #8
14d1c     1C 18 0E F2 | 	cmp	arg04, #28 wz
14d20     08 4E 05 51 |  if_ne	add	fp, #8
14d24     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14d28     08 4E 85 51 |  if_ne	sub	fp, #8
14d2c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14d30     94 00 90 5D |  if_ne	jmp	#LR__1660
14d34     14 4E 05 F1 | 	add	fp, #20
14d38     A7 1E 02 FB | 	rdlong	local01, fp
14d3c     14 4E 85 F1 | 	sub	fp, #20
14d40     1C 1E 0E F2 | 	cmp	local01, #28 wz
14d44     14 4E 05 51 |  if_ne	add	fp, #20
14d48     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14d4c     14 4E 85 51 |  if_ne	sub	fp, #20
14d50     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14d54     70 00 90 5D |  if_ne	jmp	#LR__1660
14d58     20 4E 05 F1 | 	add	fp, #32
14d5c     A7 1E 02 FB | 	rdlong	local01, fp
14d60     20 4E 85 F1 | 	sub	fp, #32
14d64     1C 1E 0E F2 | 	cmp	local01, #28 wz
14d68     20 4E 05 51 |  if_ne	add	fp, #32
14d6c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14d70     20 4E 85 51 |  if_ne	sub	fp, #32
14d74     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14d78     4C 00 90 5D |  if_ne	jmp	#LR__1660
14d7c     2C 4E 05 F1 | 	add	fp, #44
14d80     A7 1E 02 FB | 	rdlong	local01, fp
14d84     2C 4E 85 F1 | 	sub	fp, #44
14d88     1C 1E 0E F2 | 	cmp	local01, #28 wz
14d8c     2C 4E 05 51 |  if_ne	add	fp, #44
14d90     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14d94     2C 4E 85 51 |  if_ne	sub	fp, #44
14d98     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14d9c     28 00 90 5D |  if_ne	jmp	#LR__1660
14da0     A7 12 02 FB | 	rdlong	arg01, fp
14da4     0C 4E 05 F1 | 	add	fp, #12
14da8     A7 14 02 FB | 	rdlong	arg02, fp
14dac     0C 4E 05 F1 | 	add	fp, #12
14db0     A7 16 02 FB | 	rdlong	arg03, fp
14db4     0C 4E 05 F1 | 	add	fp, #12
14db8     A7 18 02 FB | 	rdlong	arg04, fp
14dbc     24 4E 85 F1 | 	sub	fp, #36
14dc0     20 64 B0 FD | 	call	#_hg010b_spin2_fill
14dc4                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
14dc4     58 00 90 FD | 	jmp	#LR__1661
14dc8                 | LR__1660
14dc8     A7 12 02 F6 | 	mov	arg01, fp
14dcc     34 E0 BF FD | 	call	#_converttoint
14dd0     FD 20 02 F6 | 	mov	local02, result1
14dd4     0C 4E 05 F1 | 	add	fp, #12
14dd8     A7 12 02 F6 | 	mov	arg01, fp
14ddc     0C 4E 85 F1 | 	sub	fp, #12
14de0     20 E0 BF FD | 	call	#_converttoint
14de4     FD 22 02 F6 | 	mov	local03, result1
14de8     18 4E 05 F1 | 	add	fp, #24
14dec     A7 12 02 F6 | 	mov	arg01, fp
14df0     18 4E 85 F1 | 	sub	fp, #24
14df4     0C E0 BF FD | 	call	#_converttoint
14df8     FD 1E 02 F6 | 	mov	local01, result1
14dfc     24 4E 05 F1 | 	add	fp, #36
14e00     A7 12 02 F6 | 	mov	arg01, fp
14e04     24 4E 85 F1 | 	sub	fp, #36
14e08     F8 DF BF FD | 	call	#_converttoint
14e0c     FD 18 02 F6 | 	mov	arg04, result1
14e10     10 13 02 F6 | 	mov	arg01, local02
14e14     11 15 02 F6 | 	mov	arg02, local03
14e18     0F 17 02 F6 | 	mov	arg03, local01
14e1c     C4 63 B0 FD | 	call	#_hg010b_spin2_fill
14e20                 | LR__1661
14e20     A7 F0 03 F6 | 	mov	ptra, fp
14e24     B2 00 A0 FD | 	call	#popregs_
14e28                 | _do_fill_ret
14e28     2D 00 64 FD | 	ret
14e2c                 | 
14e2c                 | ' 
14e2c                 | ' ' -------------------------- Draw a frane
14e2c                 | ' 
14e2c                 | ' sub do_frame
14e2c                 | _do_frame
14e2c     03 4A 05 F6 | 	mov	COUNT_, #3
14e30     A8 00 A0 FD | 	call	#pushregs_
14e34     30 F0 07 F1 | 	add	ptra, #48
14e38     70 53 BF FD | 	call	#_pop
14e3c     FD 1A 02 F6 | 	mov	arg05, result1
14e40     FE 18 02 F6 | 	mov	arg04, result2
14e44     FF 16 02 F6 | 	mov	arg03, result3
14e48     24 4E 05 F1 | 	add	fp, #36
14e4c     A7 1A 62 FC | 	wrlong	arg05, fp
14e50     04 4E 05 F1 | 	add	fp, #4
14e54     A7 18 62 FC | 	wrlong	arg04, fp
14e58     04 4E 05 F1 | 	add	fp, #4
14e5c     A7 16 62 FC | 	wrlong	arg03, fp
14e60     2C 4E 85 F1 | 	sub	fp, #44
14e64     44 53 BF FD | 	call	#_pop
14e68     FD 1A 02 F6 | 	mov	arg05, result1
14e6c     FE 18 02 F6 | 	mov	arg04, result2
14e70     FF 16 02 F6 | 	mov	arg03, result3
14e74     18 4E 05 F1 | 	add	fp, #24
14e78     A7 1A 62 FC | 	wrlong	arg05, fp
14e7c     04 4E 05 F1 | 	add	fp, #4
14e80     A7 18 62 FC | 	wrlong	arg04, fp
14e84     04 4E 05 F1 | 	add	fp, #4
14e88     A7 16 62 FC | 	wrlong	arg03, fp
14e8c     20 4E 85 F1 | 	sub	fp, #32
14e90     18 53 BF FD | 	call	#_pop
14e94     FD 1A 02 F6 | 	mov	arg05, result1
14e98     FE 18 02 F6 | 	mov	arg04, result2
14e9c     FF 1E 02 F6 | 	mov	local01, result3
14ea0     0C 4E 05 F1 | 	add	fp, #12
14ea4     A7 1A 62 FC | 	wrlong	arg05, fp
14ea8     04 4E 05 F1 | 	add	fp, #4
14eac     A7 18 62 FC | 	wrlong	arg04, fp
14eb0     04 4E 05 F1 | 	add	fp, #4
14eb4     A7 1E 62 FC | 	wrlong	local01, fp
14eb8     14 4E 85 F1 | 	sub	fp, #20
14ebc     EC 52 BF FD | 	call	#_pop
14ec0     A7 FA 61 FC | 	wrlong	result1, fp
14ec4     04 4E 05 F1 | 	add	fp, #4
14ec8     A7 FC 61 FC | 	wrlong	result2, fp
14ecc     04 4E 05 F1 | 	add	fp, #4
14ed0     A7 FE 61 FC | 	wrlong	result3, fp
14ed4                 | ' 
14ed4                 | ' t4=pop()
14ed4                 | ' t3=pop()
14ed4                 | ' t2=pop()
14ed4                 | ' t1=pop()
14ed4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
14ed4     FF 1A 02 F6 | 	mov	arg05, result3
14ed8     08 4E 85 F1 | 	sub	fp, #8
14edc     1C 1A 0E F2 | 	cmp	arg05, #28 wz
14ee0     08 4E 05 51 |  if_ne	add	fp, #8
14ee4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14ee8     08 4E 85 51 |  if_ne	sub	fp, #8
14eec     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14ef0     A8 00 90 5D |  if_ne	jmp	#LR__1670
14ef4     14 4E 05 F1 | 	add	fp, #20
14ef8     A7 1E 02 FB | 	rdlong	local01, fp
14efc     14 4E 85 F1 | 	sub	fp, #20
14f00     1C 1E 0E F2 | 	cmp	local01, #28 wz
14f04     14 4E 05 51 |  if_ne	add	fp, #20
14f08     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14f0c     14 4E 85 51 |  if_ne	sub	fp, #20
14f10     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14f14     84 00 90 5D |  if_ne	jmp	#LR__1670
14f18     20 4E 05 F1 | 	add	fp, #32
14f1c     A7 1E 02 FB | 	rdlong	local01, fp
14f20     20 4E 85 F1 | 	sub	fp, #32
14f24     1C 1E 0E F2 | 	cmp	local01, #28 wz
14f28     20 4E 05 51 |  if_ne	add	fp, #32
14f2c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14f30     20 4E 85 51 |  if_ne	sub	fp, #32
14f34     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14f38     60 00 90 5D |  if_ne	jmp	#LR__1670
14f3c     2C 4E 05 F1 | 	add	fp, #44
14f40     A7 1E 02 FB | 	rdlong	local01, fp
14f44     2C 4E 85 F1 | 	sub	fp, #44
14f48     1C 1E 0E F2 | 	cmp	local01, #28 wz
14f4c     2C 4E 05 51 |  if_ne	add	fp, #44
14f50     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14f54     2C 4E 85 51 |  if_ne	sub	fp, #44
14f58     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14f5c     3C 00 90 5D |  if_ne	jmp	#LR__1670
14f60     A7 12 02 FB | 	rdlong	arg01, fp
14f64     0C 4E 05 F1 | 	add	fp, #12
14f68     A7 14 02 FB | 	rdlong	arg02, fp
14f6c     0C 4E 05 F1 | 	add	fp, #12
14f70     A7 16 02 FB | 	rdlong	arg03, fp
14f74     0C 4E 05 F1 | 	add	fp, #12
14f78     A7 18 02 FB | 	rdlong	arg04, fp
14f7c     24 4E 85 F1 | 	sub	fp, #36
14f80     57 00 00 FF 
14f84     18 E4 05 F1 | 	add	objptr, ##44568
14f88     F2 1A 02 FB | 	rdlong	arg05, objptr
14f8c     57 00 00 FF 
14f90     18 E4 85 F1 | 	sub	objptr, ##44568
14f94     38 67 B0 FD | 	call	#_hg010b_spin2_frame
14f98                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
14f98     6C 00 90 FD | 	jmp	#LR__1671
14f9c                 | LR__1670
14f9c     A7 12 02 F6 | 	mov	arg01, fp
14fa0     60 DE BF FD | 	call	#_converttoint
14fa4     FD 20 02 F6 | 	mov	local02, result1
14fa8     0C 4E 05 F1 | 	add	fp, #12
14fac     A7 12 02 F6 | 	mov	arg01, fp
14fb0     0C 4E 85 F1 | 	sub	fp, #12
14fb4     4C DE BF FD | 	call	#_converttoint
14fb8     FD 22 02 F6 | 	mov	local03, result1
14fbc     18 4E 05 F1 | 	add	fp, #24
14fc0     A7 12 02 F6 | 	mov	arg01, fp
14fc4     18 4E 85 F1 | 	sub	fp, #24
14fc8     38 DE BF FD | 	call	#_converttoint
14fcc     FD 1E 02 F6 | 	mov	local01, result1
14fd0     24 4E 05 F1 | 	add	fp, #36
14fd4     A7 12 02 F6 | 	mov	arg01, fp
14fd8     24 4E 85 F1 | 	sub	fp, #36
14fdc     24 DE BF FD | 	call	#_converttoint
14fe0     FD 18 02 F6 | 	mov	arg04, result1
14fe4     57 00 00 FF 
14fe8     18 E4 05 F1 | 	add	objptr, ##44568
14fec     F2 1A 02 FB | 	rdlong	arg05, objptr
14ff0     57 00 00 FF 
14ff4     18 E4 85 F1 | 	sub	objptr, ##44568
14ff8     10 13 02 F6 | 	mov	arg01, local02
14ffc     11 15 02 F6 | 	mov	arg02, local03
15000     0F 17 02 F6 | 	mov	arg03, local01
15004     C8 66 B0 FD | 	call	#_hg010b_spin2_frame
15008                 | LR__1671
15008     A7 F0 03 F6 | 	mov	ptra, fp
1500c     B2 00 A0 FD | 	call	#popregs_
15010                 | _do_frame_ret
15010     2D 00 64 FD | 	ret
15014                 | 
15014                 | ' 
15014                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
15014                 | ' 
15014                 | ' ' ------------------------- Print to the screem
15014                 | ' 
15014                 | ' sub do_print  
15014                 | _do_print
15014     0A 4A 05 F6 | 	mov	COUNT_, #10
15018     A8 00 A0 FD | 	call	#pushregs_
1501c     00 24 06 F6 | 	mov	local04, #0
15020     88 51 BF FD | 	call	#_pop
15024     FD 26 02 F6 | 	mov	local05, result1
15028     FE 28 02 F6 | 	mov	local06, result2
1502c     FF 2A 02 F6 | 	mov	local07, result3
15030     13 1F 02 F6 | 	mov	local01, local05
15034     14 21 02 F6 | 	mov	local02, local06
15038     15 23 02 F6 | 	mov	local03, local07
1503c                 | '  
1503c                 | ' r=0
1503c                 | ' t1=pop() 
1503c                 | ' 'print t1.result_type,t1.result.uresult
1503c                 | ' 
1503c                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
1503c     21 22 0E F2 | 	cmp	local03, #33 wz
15040     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
15044     20 00 90 5D |  if_ne	jmp	#LR__1680
15048     11 25 02 F6 | 	mov	local04, local03
1504c     5C 51 BF FD | 	call	#_pop
15050     FD 26 02 F6 | 	mov	local05, result1
15054     FE 28 02 F6 | 	mov	local06, result2
15058     FF 2A 02 F6 | 	mov	local07, result3
1505c     13 1F 02 F6 | 	mov	local01, local05
15060     14 21 02 F6 | 	mov	local02, local06
15064     15 23 02 F6 | 	mov	local03, local07
15068                 | LR__1680
15068                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
15068     20 22 0E F2 | 	cmp	local03, #32 wz
1506c     11 25 02 A6 |  if_e	mov	local04, local03
15070                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
15070     FF 22 0E F2 | 	cmp	local03, #255 wz
15074     0C 00 90 5D |  if_ne	jmp	#LR__1681
15078     0F 13 02 F6 | 	mov	arg01, local01
1507c     A8 3F B0 FD | 	call	#_printerror
15080     4C 04 90 FD | 	jmp	#LR__1699
15084                 | LR__1681
15084                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
15084     2B 22 0E F2 | 	cmp	local03, #43 wz
15088     14 00 90 5D |  if_ne	jmp	#LR__1682
1508c     0F 13 02 F6 | 	mov	arg01, local01
15090     C0 93 BF FD | 	call	#_convertstring
15094     FD 26 02 F6 | 	mov	local05, result1
15098     13 1F 02 F6 | 	mov	local01, local05
1509c     1F 22 06 F6 | 	mov	local03, #31
150a0                 | LR__1682
150a0                 | ' 
150a0                 | ' if r=print_mod_comma  then
150a0     21 24 0E F2 | 	cmp	local04, #33 wz
150a4     AC 01 90 5D |  if_ne	jmp	#LR__1687
150a8                 | '   if t1.result_type=result_int then print t1.result.iresult,
150a8     1C 22 0E F2 | 	cmp	local03, #28 wz
150ac     64 00 90 5D |  if_ne	jmp	#LR__1683
150b0     00 12 06 F6 | 	mov	arg01, #0
150b4     5C D9 B0 FD | 	call	#__system___getiolock_0474
150b8     FD 12 02 F6 | 	mov	arg01, result1
150bc     C4 7F B0 FD | 	call	#__system___lockmem
150c0     00 28 06 F6 | 	mov	local06, #0
150c4     00 12 06 F6 | 	mov	arg01, #0
150c8     0F 15 02 F6 | 	mov	arg02, local01
150cc     00 16 06 F6 | 	mov	arg03, #0
150d0     0A 18 06 F6 | 	mov	arg04, #10
150d4     F4 8C B0 FD | 	call	#__system___basic_print_integer
150d8     FD 2A 02 F6 | 	mov	local07, result1
150dc     14 27 02 F6 | 	mov	local05, local06
150e0     15 27 02 F1 | 	add	local05, local07
150e4     00 2C 06 F6 | 	mov	local08, #0
150e8     00 12 06 F6 | 	mov	arg01, #0
150ec     09 14 06 F6 | 	mov	arg02, #9
150f0     00 16 06 F6 | 	mov	arg03, #0
150f4     38 8C B0 FD | 	call	#__system___basic_print_char
150f8     FD 2E 02 F6 | 	mov	local09, result1
150fc     FD 26 02 F1 | 	add	local05, result1
15100     00 12 06 F6 | 	mov	arg01, #0
15104     0C D9 B0 FD | 	call	#__system___getiolock_0474
15108     FD 00 68 FC | 	wrlong	#0, result1
1510c     00 FA 05 F6 | 	mov	result1, #0
15110     00 30 06 F6 | 	mov	local10, #0
15114                 | LR__1683
15114                 | '   if t1.result_type=result_uint then print t1.result.uresult,
15114     1D 22 0E F2 | 	cmp	local03, #29 wz
15118     64 00 90 5D |  if_ne	jmp	#LR__1684
1511c     00 12 06 F6 | 	mov	arg01, #0
15120     F0 D8 B0 FD | 	call	#__system___getiolock_0474
15124     FD 12 02 F6 | 	mov	arg01, result1
15128     58 7F B0 FD | 	call	#__system___lockmem
1512c     00 28 06 F6 | 	mov	local06, #0
15130     00 12 06 F6 | 	mov	arg01, #0
15134     0F 15 02 F6 | 	mov	arg02, local01
15138     00 16 06 F6 | 	mov	arg03, #0
1513c     0A 18 06 F6 | 	mov	arg04, #10
15140     C8 8C B0 FD | 	call	#__system___basic_print_unsigned
15144     FD 2A 02 F6 | 	mov	local07, result1
15148     14 27 02 F6 | 	mov	local05, local06
1514c     15 27 02 F1 | 	add	local05, local07
15150     00 2C 06 F6 | 	mov	local08, #0
15154     00 12 06 F6 | 	mov	arg01, #0
15158     09 14 06 F6 | 	mov	arg02, #9
1515c     00 16 06 F6 | 	mov	arg03, #0
15160     CC 8B B0 FD | 	call	#__system___basic_print_char
15164     FD 2E 02 F6 | 	mov	local09, result1
15168     FD 26 02 F1 | 	add	local05, result1
1516c     00 12 06 F6 | 	mov	arg01, #0
15170     A0 D8 B0 FD | 	call	#__system___getiolock_0474
15174     FD 00 68 FC | 	wrlong	#0, result1
15178     00 FA 05 F6 | 	mov	result1, #0
1517c     00 30 06 F6 | 	mov	local10, #0
15180                 | LR__1684
15180                 | '   if t1.result_type=result_float then print t1.result.fresult,
15180     1E 22 0E F2 | 	cmp	local03, #30 wz
15184     64 00 90 5D |  if_ne	jmp	#LR__1685
15188     00 12 06 F6 | 	mov	arg01, #0
1518c     84 D8 B0 FD | 	call	#__system___getiolock_0474
15190     FD 12 02 F6 | 	mov	arg01, result1
15194     EC 7E B0 FD | 	call	#__system___lockmem
15198     00 28 06 F6 | 	mov	local06, #0
1519c     00 12 06 F6 | 	mov	arg01, #0
151a0     0F 15 02 F6 | 	mov	arg02, local01
151a4     00 16 06 F6 | 	mov	arg03, #0
151a8     23 18 06 F6 | 	mov	arg04, #35
151ac     68 B0 B0 FD | 	call	#__system___basic_print_float
151b0     FD 2A 02 F6 | 	mov	local07, result1
151b4     14 27 02 F6 | 	mov	local05, local06
151b8     15 27 02 F1 | 	add	local05, local07
151bc     00 2C 06 F6 | 	mov	local08, #0
151c0     00 12 06 F6 | 	mov	arg01, #0
151c4     09 14 06 F6 | 	mov	arg02, #9
151c8     00 16 06 F6 | 	mov	arg03, #0
151cc     60 8B B0 FD | 	call	#__system___basic_print_char
151d0     FD 2E 02 F6 | 	mov	local09, result1
151d4     FD 26 02 F1 | 	add	local05, result1
151d8     00 12 06 F6 | 	mov	arg01, #0
151dc     34 D8 B0 FD | 	call	#__system___getiolock_0474
151e0     FD 00 68 FC | 	wrlong	#0, result1
151e4     00 FA 05 F6 | 	mov	result1, #0
151e8     00 30 06 F6 | 	mov	local10, #0
151ec                 | LR__1685
151ec                 | '   if t1.result_type=result_string then print t1.result.sresult,
151ec     1F 22 0E F2 | 	cmp	local03, #31 wz
151f0     60 00 90 5D |  if_ne	jmp	#LR__1686
151f4     00 12 06 F6 | 	mov	arg01, #0
151f8     18 D8 B0 FD | 	call	#__system___getiolock_0474
151fc     FD 12 02 F6 | 	mov	arg01, result1
15200     80 7E B0 FD | 	call	#__system___lockmem
15204     00 28 06 F6 | 	mov	local06, #0
15208     00 12 06 F6 | 	mov	arg01, #0
1520c     0F 15 02 F6 | 	mov	arg02, local01
15210     00 16 06 F6 | 	mov	arg03, #0
15214     70 8B B0 FD | 	call	#__system___basic_print_string
15218     FD 2A 02 F6 | 	mov	local07, result1
1521c     14 27 02 F6 | 	mov	local05, local06
15220     15 27 02 F1 | 	add	local05, local07
15224     00 2C 06 F6 | 	mov	local08, #0
15228     00 12 06 F6 | 	mov	arg01, #0
1522c     09 14 06 F6 | 	mov	arg02, #9
15230     00 16 06 F6 | 	mov	arg03, #0
15234     F8 8A B0 FD | 	call	#__system___basic_print_char
15238     FD 2E 02 F6 | 	mov	local09, result1
1523c     FD 26 02 F1 | 	add	local05, result1
15240     00 12 06 F6 | 	mov	arg01, #0
15244     CC D7 B0 FD | 	call	#__system___getiolock_0474
15248     FD 00 68 FC | 	wrlong	#0, result1
1524c     00 FA 05 F6 | 	mov	result1, #0
15250     00 30 06 F6 | 	mov	local10, #0
15254                 | LR__1686
15254                 | LR__1687
15254                 | ' if r=print_mod_semicolon then 
15254     22 24 0E F2 | 	cmp	local04, #34 wz
15258     1C 01 90 5D |  if_ne	jmp	#LR__1692
1525c                 | '   if t1.result_type=result_int then print t1.result.iresult;
1525c     1C 22 0E F2 | 	cmp	local03, #28 wz
15260     50 00 90 5D |  if_ne	jmp	#LR__1688
15264     00 12 06 F6 | 	mov	arg01, #0
15268     A8 D7 B0 FD | 	call	#__system___getiolock_0474
1526c     FD 12 02 F6 | 	mov	arg01, result1
15270     10 7E B0 FD | 	call	#__system___lockmem
15274     00 28 06 F6 | 	mov	local06, #0
15278     00 30 06 F6 | 	mov	local10, #0
1527c     0A 2C 06 F6 | 	mov	local08, #10
15280     00 12 06 F6 | 	mov	arg01, #0
15284     0F 15 02 F6 | 	mov	arg02, local01
15288     00 16 06 F6 | 	mov	arg03, #0
1528c     0A 18 06 F6 | 	mov	arg04, #10
15290     38 8B B0 FD | 	call	#__system___basic_print_integer
15294     FD 2A 02 F6 | 	mov	local07, result1
15298     14 27 02 F6 | 	mov	local05, local06
1529c     15 27 02 F1 | 	add	local05, local07
152a0     00 12 06 F6 | 	mov	arg01, #0
152a4     6C D7 B0 FD | 	call	#__system___getiolock_0474
152a8     FD 00 68 FC | 	wrlong	#0, result1
152ac     00 FA 05 F6 | 	mov	result1, #0
152b0     00 2E 06 F6 | 	mov	local09, #0
152b4                 | LR__1688
152b4                 | '   if t1.result_type=result_uint then print t1.result.uresult;
152b4     1D 22 0E F2 | 	cmp	local03, #29 wz
152b8     50 00 90 5D |  if_ne	jmp	#LR__1689
152bc     00 12 06 F6 | 	mov	arg01, #0
152c0     50 D7 B0 FD | 	call	#__system___getiolock_0474
152c4     FD 12 02 F6 | 	mov	arg01, result1
152c8     B8 7D B0 FD | 	call	#__system___lockmem
152cc     00 28 06 F6 | 	mov	local06, #0
152d0     00 30 06 F6 | 	mov	local10, #0
152d4     0A 2C 06 F6 | 	mov	local08, #10
152d8     00 12 06 F6 | 	mov	arg01, #0
152dc     0F 15 02 F6 | 	mov	arg02, local01
152e0     00 16 06 F6 | 	mov	arg03, #0
152e4     0A 18 06 F6 | 	mov	arg04, #10
152e8     20 8B B0 FD | 	call	#__system___basic_print_unsigned
152ec     FD 2A 02 F6 | 	mov	local07, result1
152f0     14 27 02 F6 | 	mov	local05, local06
152f4     15 27 02 F1 | 	add	local05, local07
152f8     00 12 06 F6 | 	mov	arg01, #0
152fc     14 D7 B0 FD | 	call	#__system___getiolock_0474
15300     FD 00 68 FC | 	wrlong	#0, result1
15304     00 FA 05 F6 | 	mov	result1, #0
15308     00 2E 06 F6 | 	mov	local09, #0
1530c                 | LR__1689
1530c                 | '   if t1.result_type=result_float then print t1.result.fresult;
1530c     1E 22 0E F2 | 	cmp	local03, #30 wz
15310     30 00 90 5D |  if_ne	jmp	#LR__1690
15314     00 12 06 F6 | 	mov	arg01, #0
15318     F8 D6 B0 FD | 	call	#__system___getiolock_0474
1531c     FD 12 02 F6 | 	mov	arg01, result1
15320     60 7D B0 FD | 	call	#__system___lockmem
15324     00 12 06 F6 | 	mov	arg01, #0
15328     0F 15 02 F6 | 	mov	arg02, local01
1532c     00 16 06 F6 | 	mov	arg03, #0
15330     23 18 06 F6 | 	mov	arg04, #35
15334     E0 AE B0 FD | 	call	#__system___basic_print_float
15338     00 12 06 F6 | 	mov	arg01, #0
1533c     D4 D6 B0 FD | 	call	#__system___getiolock_0474
15340     FD 00 68 FC | 	wrlong	#0, result1
15344                 | LR__1690
15344                 | '   if t1.result_type=result_string then print t1.result.sresult;
15344     1F 22 0E F2 | 	cmp	local03, #31 wz
15348     2C 00 90 5D |  if_ne	jmp	#LR__1691
1534c     00 12 06 F6 | 	mov	arg01, #0
15350     C0 D6 B0 FD | 	call	#__system___getiolock_0474
15354     FD 12 02 F6 | 	mov	arg01, result1
15358     28 7D B0 FD | 	call	#__system___lockmem
1535c     00 12 06 F6 | 	mov	arg01, #0
15360     0F 15 02 F6 | 	mov	arg02, local01
15364     00 16 06 F6 | 	mov	arg03, #0
15368     1C 8A B0 FD | 	call	#__system___basic_print_string
1536c     00 12 06 F6 | 	mov	arg01, #0
15370     A0 D6 B0 FD | 	call	#__system___getiolock_0474
15374     FD 00 68 FC | 	wrlong	#0, result1
15378                 | LR__1691
15378                 | LR__1692
15378                 | ' if r=0 then 
15378     00 24 0E F2 | 	cmp	local04, #0 wz
1537c     1C 01 90 5D |  if_ne	jmp	#LR__1697
15380                 | '   if t1.result_type=result_int then print t1.result.iresult
15380     1C 22 0E F2 | 	cmp	local03, #28 wz
15384     40 00 90 5D |  if_ne	jmp	#LR__1693
15388     00 12 06 F6 | 	mov	arg01, #0
1538c     84 D6 B0 FD | 	call	#__system___getiolock_0474
15390     FD 12 02 F6 | 	mov	arg01, result1
15394     EC 7C B0 FD | 	call	#__system___lockmem
15398     00 12 06 F6 | 	mov	arg01, #0
1539c     0F 15 02 F6 | 	mov	arg02, local01
153a0     00 16 06 F6 | 	mov	arg03, #0
153a4     0A 18 06 F6 | 	mov	arg04, #10
153a8     20 8A B0 FD | 	call	#__system___basic_print_integer
153ac     00 12 06 F6 | 	mov	arg01, #0
153b0     0A 14 06 F6 | 	mov	arg02, #10
153b4     00 16 06 F6 | 	mov	arg03, #0
153b8     74 89 B0 FD | 	call	#__system___basic_print_char
153bc     00 12 06 F6 | 	mov	arg01, #0
153c0     50 D6 B0 FD | 	call	#__system___getiolock_0474
153c4     FD 00 68 FC | 	wrlong	#0, result1
153c8                 | LR__1693
153c8                 | '   if t1.result_type=result_uint then print t1.result.uresult
153c8     1D 22 0E F2 | 	cmp	local03, #29 wz
153cc     40 00 90 5D |  if_ne	jmp	#LR__1694
153d0     00 12 06 F6 | 	mov	arg01, #0
153d4     3C D6 B0 FD | 	call	#__system___getiolock_0474
153d8     FD 12 02 F6 | 	mov	arg01, result1
153dc     A4 7C B0 FD | 	call	#__system___lockmem
153e0     00 12 06 F6 | 	mov	arg01, #0
153e4     0F 15 02 F6 | 	mov	arg02, local01
153e8     00 16 06 F6 | 	mov	arg03, #0
153ec     0A 18 06 F6 | 	mov	arg04, #10
153f0     18 8A B0 FD | 	call	#__system___basic_print_unsigned
153f4     00 12 06 F6 | 	mov	arg01, #0
153f8     0A 14 06 F6 | 	mov	arg02, #10
153fc     00 16 06 F6 | 	mov	arg03, #0
15400     2C 89 B0 FD | 	call	#__system___basic_print_char
15404     00 12 06 F6 | 	mov	arg01, #0
15408     08 D6 B0 FD | 	call	#__system___getiolock_0474
1540c     FD 00 68 FC | 	wrlong	#0, result1
15410                 | LR__1694
15410                 | '   if t1.result_type=result_float then print t1.result.fresult
15410     1E 22 0E F2 | 	cmp	local03, #30 wz
15414     40 00 90 5D |  if_ne	jmp	#LR__1695
15418     00 12 06 F6 | 	mov	arg01, #0
1541c     F4 D5 B0 FD | 	call	#__system___getiolock_0474
15420     FD 12 02 F6 | 	mov	arg01, result1
15424     5C 7C B0 FD | 	call	#__system___lockmem
15428     00 12 06 F6 | 	mov	arg01, #0
1542c     0F 15 02 F6 | 	mov	arg02, local01
15430     00 16 06 F6 | 	mov	arg03, #0
15434     23 18 06 F6 | 	mov	arg04, #35
15438     DC AD B0 FD | 	call	#__system___basic_print_float
1543c     00 12 06 F6 | 	mov	arg01, #0
15440     0A 14 06 F6 | 	mov	arg02, #10
15444     00 16 06 F6 | 	mov	arg03, #0
15448     E4 88 B0 FD | 	call	#__system___basic_print_char
1544c     00 12 06 F6 | 	mov	arg01, #0
15450     C0 D5 B0 FD | 	call	#__system___getiolock_0474
15454     FD 00 68 FC | 	wrlong	#0, result1
15458                 | LR__1695
15458                 | '   if t1.result_type=result_string then print t1.result.sresult
15458     1F 22 0E F2 | 	cmp	local03, #31 wz
1545c     3C 00 90 5D |  if_ne	jmp	#LR__1696
15460     00 12 06 F6 | 	mov	arg01, #0
15464     AC D5 B0 FD | 	call	#__system___getiolock_0474
15468     FD 12 02 F6 | 	mov	arg01, result1
1546c     14 7C B0 FD | 	call	#__system___lockmem
15470     00 12 06 F6 | 	mov	arg01, #0
15474     0F 15 02 F6 | 	mov	arg02, local01
15478     00 16 06 F6 | 	mov	arg03, #0
1547c     08 89 B0 FD | 	call	#__system___basic_print_string
15480     00 12 06 F6 | 	mov	arg01, #0
15484     0A 14 06 F6 | 	mov	arg02, #10
15488     00 16 06 F6 | 	mov	arg03, #0
1548c     A0 88 B0 FD | 	call	#__system___basic_print_char
15490     00 12 06 F6 | 	mov	arg01, #0
15494     7C D5 B0 FD | 	call	#__system___getiolock_0474
15498     FD 00 68 FC | 	wrlong	#0, result1
1549c                 | LR__1696
1549c                 | LR__1697
1549c                 | ' if r=print_mod_empty then print
1549c     20 24 0E F2 | 	cmp	local04, #32 wz
154a0     2C 00 90 5D |  if_ne	jmp	#LR__1698
154a4     00 12 06 F6 | 	mov	arg01, #0
154a8     68 D5 B0 FD | 	call	#__system___getiolock_0474
154ac     FD 12 02 F6 | 	mov	arg01, result1
154b0     D0 7B B0 FD | 	call	#__system___lockmem
154b4     00 12 06 F6 | 	mov	arg01, #0
154b8     0A 14 06 F6 | 	mov	arg02, #10
154bc     00 16 06 F6 | 	mov	arg03, #0
154c0     6C 88 B0 FD | 	call	#__system___basic_print_char
154c4     00 12 06 F6 | 	mov	arg01, #0
154c8     48 D5 B0 FD | 	call	#__system___getiolock_0474
154cc     FD 00 68 FC | 	wrlong	#0, result1
154d0                 | LR__1698
154d0                 | LR__1699
154d0     A7 F0 03 F6 | 	mov	ptra, fp
154d4     B2 00 A0 FD | 	call	#popregs_
154d8                 | _do_print_ret
154d8     2D 00 64 FD | 	ret
154dc                 | 
154dc                 | ' 
154dc                 | ' 
154dc                 | ' sub do_paper
154dc                 | _do_paper
154dc     03 4A 05 F6 | 	mov	COUNT_, #3
154e0     A8 00 A0 FD | 	call	#pushregs_
154e4     C4 4C BF FD | 	call	#_pop
154e8     FD 1E 02 F6 | 	mov	local01, result1
154ec     FE 20 02 F6 | 	mov	local02, result2
154f0     FF 22 02 F6 | 	mov	local03, result3
154f4                 | ' t1=pop() 
154f4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
154f4     1E 22 0E F2 | 	cmp	local03, #30 wz
154f8     10 00 90 5D |  if_ne	jmp	#LR__1700
154fc     0F 13 02 F6 | 	mov	arg01, local01
15500     00 14 06 F6 | 	mov	arg02, #0
15504     C0 AB B0 FD | 	call	#__system___float_tointeger
15508     FD 1E 02 F6 | 	mov	local01, result1
1550c                 | LR__1700
1550c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1550c     1F 22 0E F2 | 	cmp	local03, #31 wz
15510     18 00 90 5D |  if_ne	jmp	#LR__1701
15514     0F 13 02 F6 | 	mov	arg01, local01
15518     CC AE B0 FD | 	call	#__system____builtin_atof
1551c     FD 12 02 F6 | 	mov	arg01, result1
15520     00 14 06 F6 | 	mov	arg02, #0
15524     A0 AB B0 FD | 	call	#__system___float_tointeger
15528     FD 1E 02 F6 | 	mov	local01, result1
1552c                 | LR__1701
1552c     57 00 00 FF 
15530     28 E4 05 F1 | 	add	objptr, ##44584
15534     F2 1E 62 FC | 	wrlong	local01, objptr
15538     04 E4 05 F1 | 	add	objptr, #4
1553c     F2 12 02 FB | 	rdlong	arg01, objptr
15540                 | ' 
15540                 | ' write_color:=ff
15540     56 00 00 FF 
15544     EB E5 85 F1 | 	sub	objptr, ##44523
15548     F2 12 62 FC | 	wrlong	arg01, objptr
1554c                 | ' write_background:=bb
1554c     04 E4 05 F1 | 	add	objptr, #4
15550     F2 1E 62 FC | 	wrlong	local01, objptr
15554     45 E4 85 F1 | 	sub	objptr, #69
15558     A7 F0 03 F6 | 	mov	ptra, fp
1555c     B2 00 A0 FD | 	call	#popregs_
15560                 | _do_paper_ret
15560     2D 00 64 FD | 	ret
15564                 | 
15564                 | ' 
15564                 | ' sub do_ink
15564                 | _do_ink
15564     03 4A 05 F6 | 	mov	COUNT_, #3
15568     A8 00 A0 FD | 	call	#pushregs_
1556c     3C 4C BF FD | 	call	#_pop
15570     FD 1E 02 F6 | 	mov	local01, result1
15574     FE 20 02 F6 | 	mov	local02, result2
15578     FF 22 02 F6 | 	mov	local03, result3
1557c                 | ' t1=pop() 
1557c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1557c     1E 22 0E F2 | 	cmp	local03, #30 wz
15580     10 00 90 5D |  if_ne	jmp	#LR__1710
15584     0F 13 02 F6 | 	mov	arg01, local01
15588     00 14 06 F6 | 	mov	arg02, #0
1558c     38 AB B0 FD | 	call	#__system___float_tointeger
15590     FD 1E 02 F6 | 	mov	local01, result1
15594                 | LR__1710
15594                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15594     1F 22 0E F2 | 	cmp	local03, #31 wz
15598     18 00 90 5D |  if_ne	jmp	#LR__1711
1559c     0F 13 02 F6 | 	mov	arg01, local01
155a0     44 AE B0 FD | 	call	#__system____builtin_atof
155a4     FD 12 02 F6 | 	mov	arg01, result1
155a8     00 14 06 F6 | 	mov	arg02, #0
155ac     18 AB B0 FD | 	call	#__system___float_tointeger
155b0     FD 1E 02 F6 | 	mov	local01, result1
155b4                 | LR__1711
155b4     57 00 00 FF 
155b8     2C E4 05 F1 | 	add	objptr, ##44588
155bc     F2 1E 62 FC | 	wrlong	local01, objptr
155c0     04 E4 85 F1 | 	sub	objptr, #4
155c4     F2 14 02 FB | 	rdlong	arg02, objptr
155c8                 | ' 
155c8                 | ' write_color:=ff
155c8     56 00 00 FF 
155cc     E7 E5 85 F1 | 	sub	objptr, ##44519
155d0     F2 1E 62 FC | 	wrlong	local01, objptr
155d4                 | ' write_background:=bb
155d4     04 E4 05 F1 | 	add	objptr, #4
155d8     F2 14 62 FC | 	wrlong	arg02, objptr
155dc     56 00 00 FF 
155e0     E7 E5 05 F1 | 	add	objptr, ##44519
155e4     F2 12 02 FB | 	rdlong	arg01, objptr
155e8     57 00 00 FF 
155ec     2C E4 85 F1 | 	sub	objptr, ##44588
155f0     90 52 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
155f4     A7 F0 03 F6 | 	mov	ptra, fp
155f8     B2 00 A0 FD | 	call	#popregs_
155fc                 | _do_ink_ret
155fc     2D 00 64 FD | 	ret
15600                 | 
15600                 | ' 
15600                 | ' 
15600                 | ' sub do_font
15600                 | _do_font
15600     03 4A 05 F6 | 	mov	COUNT_, #3
15604     A8 00 A0 FD | 	call	#pushregs_
15608     A0 4B BF FD | 	call	#_pop
1560c     FD 1E 02 F6 | 	mov	local01, result1
15610     FE 20 02 F6 | 	mov	local02, result2
15614     FF 22 02 F6 | 	mov	local03, result3
15618                 | ' t1=pop() 
15618                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15618     1E 22 0E F2 | 	cmp	local03, #30 wz
1561c     10 00 90 5D |  if_ne	jmp	#LR__1720
15620     0F 13 02 F6 | 	mov	arg01, local01
15624     00 14 06 F6 | 	mov	arg02, #0
15628     9C AA B0 FD | 	call	#__system___float_tointeger
1562c     FD 1E 02 F6 | 	mov	local01, result1
15630                 | LR__1720
15630                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15630     1F 22 0E F2 | 	cmp	local03, #31 wz
15634     18 00 90 5D |  if_ne	jmp	#LR__1721
15638     0F 13 02 F6 | 	mov	arg01, local01
1563c     A8 AD B0 FD | 	call	#__system____builtin_atof
15640     FD 12 02 F6 | 	mov	arg01, result1
15644     00 14 06 F6 | 	mov	arg02, #0
15648     7C AA B0 FD | 	call	#__system___float_tointeger
1564c     FD 1E 02 F6 | 	mov	local01, result1
15650                 | LR__1721
15650     57 00 00 FF 
15654     30 E4 05 F1 | 	add	objptr, ##44592
15658     F2 1E 62 FC | 	wrlong	local01, objptr
1565c     57 00 00 FF 
15660     30 E4 85 F1 | 	sub	objptr, ##44592
15664     02 1E 66 F0 | 	shl	local01, #2
15668     0F 13 02 F6 | 	mov	arg01, local01
1566c     58 62 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15670     A7 F0 03 F6 | 	mov	ptra, fp
15674     B2 00 A0 FD | 	call	#popregs_
15678                 | _do_font_ret
15678     2D 00 64 FD | 	ret
1567c                 | 
1567c                 | ' 
1567c                 | ' sub do_mode
1567c                 | _do_mode
1567c     05 4A 05 F6 | 	mov	COUNT_, #5
15680     A8 00 A0 FD | 	call	#pushregs_
15684     24 4B BF FD | 	call	#_pop
15688     FD 1E 02 F6 | 	mov	local01, result1
1568c     FE 20 02 F6 | 	mov	local02, result2
15690     FF 22 02 F6 | 	mov	local03, result3
15694                 | ' t1=pop() 
15694                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15694     1E 22 0E F2 | 	cmp	local03, #30 wz
15698     10 00 90 5D |  if_ne	jmp	#LR__1730
1569c     0F 13 02 F6 | 	mov	arg01, local01
156a0     00 14 06 F6 | 	mov	arg02, #0
156a4     20 AA B0 FD | 	call	#__system___float_tointeger
156a8     FD 1E 02 F6 | 	mov	local01, result1
156ac                 | LR__1730
156ac                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
156ac     1F 22 0E F2 | 	cmp	local03, #31 wz
156b0     18 00 90 5D |  if_ne	jmp	#LR__1731
156b4     0F 13 02 F6 | 	mov	arg01, local01
156b8     2C AD B0 FD | 	call	#__system____builtin_atof
156bc     FD 12 02 F6 | 	mov	arg01, result1
156c0     00 14 06 F6 | 	mov	arg02, #0
156c4     00 AA B0 FD | 	call	#__system___float_tointeger
156c8     FD 1E 02 F6 | 	mov	local01, result1
156cc                 | LR__1731
156cc                 | ' select case t1.result.iresult
156cc     0F 25 02 F6 | 	mov	local04, local01
156d0     05 24 26 F3 | 	fle	local04, #5
156d4     30 24 62 FD | 	jmprel	local04
156d8                 | LR__1732
156d8     14 00 90 FD | 	jmp	#LR__1733
156dc     A8 00 90 FD | 	jmp	#LR__1734
156e0     10 01 90 FD | 	jmp	#LR__1735
156e4     78 01 90 FD | 	jmp	#LR__1736
156e8     E0 01 90 FD | 	jmp	#LR__1737
156ec     70 02 90 FD | 	jmp	#LR__1738
156f0                 | LR__1733
156f0     57 00 00 FF 
156f4     30 E4 05 F1 | 	add	objptr, ##44592
156f8     F2 02 68 FC | 	wrlong	#1, objptr
156fc     04 E4 85 F1 | 	sub	objptr, #4
15700     F2 34 69 FC | 	wrlong	#154, objptr
15704     22 00 00 FF 
15708     A4 E5 05 F1 | 	add	objptr, ##17828
1570c     F2 02 68 FC | 	wrlong	#1, objptr
15710     22 00 00 FF 
15714     A8 E5 85 F1 | 	sub	objptr, ##17832
15718     F2 26 69 FC | 	wrlong	#147, objptr
1571c     57 00 00 FF 
15720     28 E4 85 F1 | 	sub	objptr, ##44584
15724     04 12 06 F6 | 	mov	arg01, #4
15728     9C 61 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1572c     57 00 00 FF 
15730     2C E4 05 F1 | 	add	objptr, ##44588
15734     F2 12 02 FB | 	rdlong	arg01, objptr
15738     04 E4 85 F1 | 	sub	objptr, #4
1573c     F2 14 02 FB | 	rdlong	arg02, objptr
15740                 | ' 
15740                 | ' write_color:=ff
15740     56 00 00 FF 
15744     E7 E5 85 F1 | 	sub	objptr, ##44519
15748     F2 12 62 FC | 	wrlong	arg01, objptr
1574c                 | ' write_background:=bb
1574c     04 E4 05 F1 | 	add	objptr, #4
15750     F2 14 62 FC | 	wrlong	arg02, objptr
15754     01 00 00 FF 
15758     00 EA 05 F1 | 	add	ptr__dat__, ##512
1575c     7B 00 00 FF 
15760     2F E4 05 F1 | 	add	objptr, ##63023
15764     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15768     04 E4 85 F1 | 	sub	objptr, #4
1576c     03 00 80 FF 
15770     F2 30 69 FC | 	wrlong	##1688, objptr
15774     7B 00 00 FF 
15778     70 E4 85 F1 | 	sub	objptr, ##63088
1577c     01 00 00 FF 
15780     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15784     D8 01 90 FD | 	jmp	#LR__1738
15788                 | LR__1734
15788     57 00 00 FF 
1578c     30 E4 05 F1 | 	add	objptr, ##44592
15790     F2 00 68 FC | 	wrlong	#0, objptr
15794     04 E4 85 F1 | 	sub	objptr, #4
15798     F2 2E 68 FC | 	wrlong	#23, objptr
1579c     22 00 00 FF 
157a0     A4 E5 05 F1 | 	add	objptr, ##17828
157a4     F2 00 68 FC | 	wrlong	#0, objptr
157a8     22 00 00 FF 
157ac     A8 E5 85 F1 | 	sub	objptr, ##17832
157b0     F2 00 68 FC | 	wrlong	#0, objptr
157b4     57 00 00 FF 
157b8     28 E4 85 F1 | 	sub	objptr, ##44584
157bc     00 12 06 F6 | 	mov	arg01, #0
157c0     04 61 B0 FD | 	call	#_hg010b_spin2_setfontfamily
157c4     57 00 00 FF 
157c8     2C E4 05 F1 | 	add	objptr, ##44588
157cc     F2 12 02 FB | 	rdlong	arg01, objptr
157d0     04 E4 85 F1 | 	sub	objptr, #4
157d4     F2 14 02 FB | 	rdlong	arg02, objptr
157d8                 | ' 
157d8                 | ' write_color:=ff
157d8     56 00 00 FF 
157dc     E7 E5 85 F1 | 	sub	objptr, ##44519
157e0     F2 12 62 FC | 	wrlong	arg01, objptr
157e4                 | ' write_background:=bb
157e4     04 E4 05 F1 | 	add	objptr, #4
157e8     F2 14 62 FC | 	wrlong	arg02, objptr
157ec     45 E4 85 F1 | 	sub	objptr, #69
157f0     6C 01 90 FD | 	jmp	#LR__1738
157f4                 | LR__1735
157f4     57 00 00 FF 
157f8     30 E4 05 F1 | 	add	objptr, ##44592
157fc     F2 00 68 FC | 	wrlong	#0, objptr
15800     04 E4 85 F1 | 	sub	objptr, #4
15804     F2 6A 69 FC | 	wrlong	#181, objptr
15808     22 00 00 FF 
1580c     A4 E5 05 F1 | 	add	objptr, ##17828
15810     F2 00 68 FC | 	wrlong	#0, objptr
15814     22 00 00 FF 
15818     A8 E5 85 F1 | 	sub	objptr, ##17832
1581c     F2 00 68 FC | 	wrlong	#0, objptr
15820     57 00 00 FF 
15824     28 E4 85 F1 | 	sub	objptr, ##44584
15828     00 12 06 F6 | 	mov	arg01, #0
1582c     98 60 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15830     57 00 00 FF 
15834     2C E4 05 F1 | 	add	objptr, ##44588
15838     F2 12 02 FB | 	rdlong	arg01, objptr
1583c     04 E4 85 F1 | 	sub	objptr, #4
15840     F2 14 02 FB | 	rdlong	arg02, objptr
15844                 | ' 
15844                 | ' write_color:=ff
15844     56 00 00 FF 
15848     E7 E5 85 F1 | 	sub	objptr, ##44519
1584c     F2 12 62 FC | 	wrlong	arg01, objptr
15850                 | ' write_background:=bb
15850     04 E4 05 F1 | 	add	objptr, #4
15854     F2 14 62 FC | 	wrlong	arg02, objptr
15858     45 E4 85 F1 | 	sub	objptr, #69
1585c     00 01 90 FD | 	jmp	#LR__1738
15860                 | LR__1736
15860     57 00 00 FF 
15864     30 E4 05 F1 | 	add	objptr, ##44592
15868     F2 00 68 FC | 	wrlong	#0, objptr
1586c     04 E4 85 F1 | 	sub	objptr, #4
15870     F2 1E 68 FC | 	wrlong	#15, objptr
15874     22 00 00 FF 
15878     A4 E5 05 F1 | 	add	objptr, ##17828
1587c     F2 00 68 FC | 	wrlong	#0, objptr
15880     22 00 00 FF 
15884     A8 E5 85 F1 | 	sub	objptr, ##17832
15888     F2 00 68 FC | 	wrlong	#0, objptr
1588c     57 00 00 FF 
15890     28 E4 85 F1 | 	sub	objptr, ##44584
15894     00 12 06 F6 | 	mov	arg01, #0
15898     2C 60 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1589c     57 00 00 FF 
158a0     2C E4 05 F1 | 	add	objptr, ##44588
158a4     F2 12 02 FB | 	rdlong	arg01, objptr
158a8     04 E4 85 F1 | 	sub	objptr, #4
158ac     F2 14 02 FB | 	rdlong	arg02, objptr
158b0                 | ' 
158b0                 | ' write_color:=ff
158b0     56 00 00 FF 
158b4     E7 E5 85 F1 | 	sub	objptr, ##44519
158b8     F2 12 62 FC | 	wrlong	arg01, objptr
158bc                 | ' write_background:=bb
158bc     04 E4 05 F1 | 	add	objptr, #4
158c0     F2 14 62 FC | 	wrlong	arg02, objptr
158c4     45 E4 85 F1 | 	sub	objptr, #69
158c8     94 00 90 FD | 	jmp	#LR__1738
158cc                 | LR__1737
158cc     57 00 00 FF 
158d0     30 E4 05 F1 | 	add	objptr, ##44592
158d4     F2 02 68 FC | 	wrlong	#1, objptr
158d8     04 E4 85 F1 | 	sub	objptr, #4
158dc     F2 02 68 FC | 	wrlong	#1, objptr
158e0     22 00 00 FF 
158e4     A4 E5 05 F1 | 	add	objptr, ##17828
158e8     F2 02 68 FC | 	wrlong	#1, objptr
158ec     22 00 00 FF 
158f0     A8 E5 85 F1 | 	sub	objptr, ##17832
158f4     F2 1C 68 FC | 	wrlong	#14, objptr
158f8     57 00 00 FF 
158fc     28 E4 85 F1 | 	sub	objptr, ##44584
15900     04 12 06 F6 | 	mov	arg01, #4
15904     C0 5F B0 FD | 	call	#_hg010b_spin2_setfontfamily
15908     57 00 00 FF 
1590c     2C E4 05 F1 | 	add	objptr, ##44588
15910     F2 12 02 FB | 	rdlong	arg01, objptr
15914     04 E4 85 F1 | 	sub	objptr, #4
15918     F2 14 02 FB | 	rdlong	arg02, objptr
1591c                 | ' 
1591c                 | ' write_color:=ff
1591c     56 00 00 FF 
15920     E7 E5 85 F1 | 	sub	objptr, ##44519
15924     F2 12 62 FC | 	wrlong	arg01, objptr
15928                 | ' write_background:=bb
15928     04 E4 05 F1 | 	add	objptr, #4
1592c     F2 14 62 FC | 	wrlong	arg02, objptr
15930     07 00 00 FF 
15934     8A EB 05 F1 | 	add	ptr__dat__, ##3978
15938     7B 00 00 FF 
1593c     2F E4 05 F1 | 	add	objptr, ##63023
15940     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15944     04 E4 85 F1 | 	sub	objptr, #4
15948     03 00 80 FF 
1594c     F2 30 69 FC | 	wrlong	##1688, objptr
15950     7B 00 00 FF 
15954     70 E4 85 F1 | 	sub	objptr, ##63088
15958     07 00 00 FF 
1595c     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
15960                 | LR__1738
15960     7B 00 00 FF 
15964     6C E4 05 F1 | 	add	objptr, ##63084
15968     F2 1E 62 FC | 	wrlong	local01, objptr
1596c     04 E4 85 F1 | 	sub	objptr, #4
15970     F2 12 02 FB | 	rdlong	arg01, objptr
15974     18 00 00 FF 
15978     1C E4 85 F1 | 	sub	objptr, ##12316
1597c     F2 26 02 FB | 	rdlong	local05, objptr
15980     63 00 00 FF 
15984     4C E4 85 F1 | 	sub	objptr, ##50764
15988     13 13 82 F1 | 	sub	arg01, local05
1598c     00 14 06 F6 | 	mov	arg02, #0
15990     0A 16 06 F6 | 	mov	arg03, #10
15994     84 99 B0 FD | 	call	#__system__Number_S
15998     FD 12 02 F6 | 	mov	arg01, result1
1599c     66 01 00 FF 
159a0     02 15 06 F6 | 	mov	arg02, ##@LR__4986
159a4     38 77 B0 FD | 	call	#__system___string_concat
159a8     79 00 00 FF 
159ac     CC E5 05 F1 | 	add	objptr, ##62412
159b0     F2 FA 61 FC | 	wrlong	result1, objptr
159b4     22 00 00 FF 
159b8     A0 E5 85 F1 | 	sub	objptr, ##17824
159bc     F2 12 02 FB | 	rdlong	arg01, objptr
159c0     04 E4 85 F1 | 	sub	objptr, #4
159c4     F2 14 02 FB | 	rdlong	arg02, objptr
159c8     57 00 00 FF 
159cc     28 E4 85 F1 | 	sub	objptr, ##44584
159d0     44 60 B0 FD | 	call	#_hg010b_spin2_cls
159d4     66 01 00 FF 
159d8     14 13 06 F6 | 	mov	arg01, ##@LR__4987
159dc                 | ' 
159dc                 | ' write(text)
159dc     F8 63 B0 FD | 	call	#_hg010b_spin2_write
159e0                 | ' crlf
159e0     C0 66 B0 FD | 	call	#_hg010b_spin2_crlf
159e4     18 00 00 FF 
159e8     4C EB 05 F1 | 	add	ptr__dat__, ##12620
159ec     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
159f0     18 00 00 FF 
159f4     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
159f8                 | ' 
159f8                 | ' write(text)
159f8     DC 63 B0 FD | 	call	#_hg010b_spin2_write
159fc                 | ' crlf
159fc     A4 66 B0 FD | 	call	#_hg010b_spin2_crlf
15a00     79 00 00 FF 
15a04     CC E5 05 F1 | 	add	objptr, ##62412
15a08     F2 12 02 FB | 	rdlong	arg01, objptr
15a0c     79 00 00 FF 
15a10     CC E5 85 F1 | 	sub	objptr, ##62412
15a14                 | ' 
15a14                 | ' write(text)
15a14     C0 63 B0 FD | 	call	#_hg010b_spin2_write
15a18                 | ' crlf
15a18     88 66 B0 FD | 	call	#_hg010b_spin2_crlf
15a1c     A7 F0 03 F6 | 	mov	ptra, fp
15a20     B2 00 A0 FD | 	call	#popregs_
15a24                 | _do_mode_ret
15a24     2D 00 64 FD | 	ret
15a28                 | 
15a28                 | ' 
15a28                 | ' sub do_setwave
15a28                 | _do_setwave
15a28     02 4A 05 F6 | 	mov	COUNT_, #2
15a2c     A8 00 A0 FD | 	call	#pushregs_
15a30     18 F0 07 F1 | 	add	ptra, #24
15a34     74 47 BF FD | 	call	#_pop
15a38     FD 12 02 F6 | 	mov	arg01, result1
15a3c     FE 1E 02 F6 | 	mov	local01, result2
15a40     FF 20 02 F6 | 	mov	local02, result3
15a44     A7 12 62 FC | 	wrlong	arg01, fp
15a48     04 4E 05 F1 | 	add	fp, #4
15a4c     A7 1E 62 FC | 	wrlong	local01, fp
15a50     04 4E 05 F1 | 	add	fp, #4
15a54     A7 20 62 FC | 	wrlong	local02, fp
15a58     08 4E 85 F1 | 	sub	fp, #8
15a5c     4C 47 BF FD | 	call	#_pop
15a60     FD 20 02 F6 | 	mov	local02, result1
15a64     0C 4E 05 F1 | 	add	fp, #12
15a68     A7 20 62 FC | 	wrlong	local02, fp
15a6c     04 4E 05 F1 | 	add	fp, #4
15a70     A7 FC 61 FC | 	wrlong	result2, fp
15a74     04 4E 05 F1 | 	add	fp, #4
15a78     A7 FE 61 FC | 	wrlong	result3, fp
15a7c     08 4E 85 F1 | 	sub	fp, #8
15a80     A7 12 02 F6 | 	mov	arg01, fp
15a84     0C 4E 85 F1 | 	sub	fp, #12
15a88     78 D3 BF FD | 	call	#_converttoint
15a8c     FD 20 02 F6 | 	mov	local02, result1
15a90     10 1F 02 F6 | 	mov	local01, local02
15a94     01 1E 66 F0 | 	shl	local01, #1
15a98     10 1F 02 F1 | 	add	local01, local02
15a9c     03 1E 66 F0 | 	shl	local01, #3
15aa0     34 00 00 FF 
15aa4     38 E5 05 F1 | 	add	objptr, ##26936
15aa8     F2 1E 02 F1 | 	add	local01, objptr
15aac     A7 12 02 F6 | 	mov	arg01, fp
15ab0     34 00 00 FF 
15ab4     38 E5 85 F1 | 	sub	objptr, ##26936
15ab8     48 D3 BF FD | 	call	#_converttoint
15abc     04 1E 06 F1 | 	add	local01, #4
15ac0     0F FB 41 FC | 	wrbyte	result1, local01
15ac4     A7 F0 03 F6 | 	mov	ptra, fp
15ac8     B2 00 A0 FD | 	call	#popregs_
15acc                 | _do_setwave_ret
15acc     2D 00 64 FD | 	ret
15ad0                 | 
15ad0                 | ' 
15ad0                 | ' sub do_setsustain
15ad0                 | _do_setsustain
15ad0     02 4A 05 F6 | 	mov	COUNT_, #2
15ad4     A8 00 A0 FD | 	call	#pushregs_
15ad8     18 F0 07 F1 | 	add	ptra, #24
15adc     CC 46 BF FD | 	call	#_pop
15ae0     FD 12 02 F6 | 	mov	arg01, result1
15ae4     FE 1E 02 F6 | 	mov	local01, result2
15ae8     FF 20 02 F6 | 	mov	local02, result3
15aec     A7 12 62 FC | 	wrlong	arg01, fp
15af0     04 4E 05 F1 | 	add	fp, #4
15af4     A7 1E 62 FC | 	wrlong	local01, fp
15af8     04 4E 05 F1 | 	add	fp, #4
15afc     A7 20 62 FC | 	wrlong	local02, fp
15b00     08 4E 85 F1 | 	sub	fp, #8
15b04     A4 46 BF FD | 	call	#_pop
15b08     FD 20 02 F6 | 	mov	local02, result1
15b0c     0C 4E 05 F1 | 	add	fp, #12
15b10     A7 20 62 FC | 	wrlong	local02, fp
15b14     04 4E 05 F1 | 	add	fp, #4
15b18     A7 FC 61 FC | 	wrlong	result2, fp
15b1c     04 4E 05 F1 | 	add	fp, #4
15b20     A7 FE 61 FC | 	wrlong	result3, fp
15b24     08 4E 85 F1 | 	sub	fp, #8
15b28     A7 12 02 F6 | 	mov	arg01, fp
15b2c     0C 4E 85 F1 | 	sub	fp, #12
15b30     D0 D2 BF FD | 	call	#_converttoint
15b34     FD 20 02 F6 | 	mov	local02, result1
15b38     10 1F 02 F6 | 	mov	local01, local02
15b3c     01 1E 66 F0 | 	shl	local01, #1
15b40     10 1F 02 F1 | 	add	local01, local02
15b44     03 1E 66 F0 | 	shl	local01, #3
15b48     34 00 00 FF 
15b4c     38 E5 05 F1 | 	add	objptr, ##26936
15b50     F2 1E 02 F1 | 	add	local01, objptr
15b54     A7 12 02 F6 | 	mov	arg01, fp
15b58     34 00 00 FF 
15b5c     38 E5 85 F1 | 	sub	objptr, ##26936
15b60     A0 D2 BF FD | 	call	#_converttoint
15b64     14 1E 06 F1 | 	add	local01, #20
15b68     0F FB 51 FC | 	wrword	result1, local01
15b6c     A7 F0 03 F6 | 	mov	ptra, fp
15b70     B2 00 A0 FD | 	call	#popregs_
15b74                 | _do_setsustain_ret
15b74     2D 00 64 FD | 	ret
15b78                 | 
15b78                 | ' 
15b78                 | ' sub do_setenv
15b78                 | _do_setenv
15b78     02 4A 05 F6 | 	mov	COUNT_, #2
15b7c     A8 00 A0 FD | 	call	#pushregs_
15b80     18 F0 07 F1 | 	add	ptra, #24
15b84     24 46 BF FD | 	call	#_pop
15b88     FD 12 02 F6 | 	mov	arg01, result1
15b8c     FE 1E 02 F6 | 	mov	local01, result2
15b90     FF 20 02 F6 | 	mov	local02, result3
15b94     A7 12 62 FC | 	wrlong	arg01, fp
15b98     04 4E 05 F1 | 	add	fp, #4
15b9c     A7 1E 62 FC | 	wrlong	local01, fp
15ba0     04 4E 05 F1 | 	add	fp, #4
15ba4     A7 20 62 FC | 	wrlong	local02, fp
15ba8     08 4E 85 F1 | 	sub	fp, #8
15bac     FC 45 BF FD | 	call	#_pop
15bb0     FD 20 02 F6 | 	mov	local02, result1
15bb4     0C 4E 05 F1 | 	add	fp, #12
15bb8     A7 20 62 FC | 	wrlong	local02, fp
15bbc     04 4E 05 F1 | 	add	fp, #4
15bc0     A7 FC 61 FC | 	wrlong	result2, fp
15bc4     04 4E 05 F1 | 	add	fp, #4
15bc8     A7 FE 61 FC | 	wrlong	result3, fp
15bcc     08 4E 85 F1 | 	sub	fp, #8
15bd0     A7 12 02 F6 | 	mov	arg01, fp
15bd4     0C 4E 85 F1 | 	sub	fp, #12
15bd8     28 D2 BF FD | 	call	#_converttoint
15bdc     FD 20 02 F6 | 	mov	local02, result1
15be0     10 1F 02 F6 | 	mov	local01, local02
15be4     01 1E 66 F0 | 	shl	local01, #1
15be8     10 1F 02 F1 | 	add	local01, local02
15bec     03 1E 66 F0 | 	shl	local01, #3
15bf0     34 00 00 FF 
15bf4     38 E5 05 F1 | 	add	objptr, ##26936
15bf8     F2 1E 02 F1 | 	add	local01, objptr
15bfc     A7 12 02 F6 | 	mov	arg01, fp
15c00     34 00 00 FF 
15c04     38 E5 85 F1 | 	sub	objptr, ##26936
15c08     F8 D1 BF FD | 	call	#_converttoint
15c0c     05 1E 06 F1 | 	add	local01, #5
15c10     0F FB 41 FC | 	wrbyte	result1, local01
15c14     A7 F0 03 F6 | 	mov	ptra, fp
15c18     B2 00 A0 FD | 	call	#popregs_
15c1c                 | _do_setenv_ret
15c1c     2D 00 64 FD | 	ret
15c20                 | 
15c20                 | ' 
15c20                 | ' sub do_setdelay
15c20                 | _do_setdelay
15c20     02 4A 05 F6 | 	mov	COUNT_, #2
15c24     A8 00 A0 FD | 	call	#pushregs_
15c28     18 F0 07 F1 | 	add	ptra, #24
15c2c     7C 45 BF FD | 	call	#_pop
15c30     FD 12 02 F6 | 	mov	arg01, result1
15c34     FE 1E 02 F6 | 	mov	local01, result2
15c38     FF 20 02 F6 | 	mov	local02, result3
15c3c     A7 12 62 FC | 	wrlong	arg01, fp
15c40     04 4E 05 F1 | 	add	fp, #4
15c44     A7 1E 62 FC | 	wrlong	local01, fp
15c48     04 4E 05 F1 | 	add	fp, #4
15c4c     A7 20 62 FC | 	wrlong	local02, fp
15c50     08 4E 85 F1 | 	sub	fp, #8
15c54     54 45 BF FD | 	call	#_pop
15c58     FD 20 02 F6 | 	mov	local02, result1
15c5c     0C 4E 05 F1 | 	add	fp, #12
15c60     A7 20 62 FC | 	wrlong	local02, fp
15c64     04 4E 05 F1 | 	add	fp, #4
15c68     A7 FC 61 FC | 	wrlong	result2, fp
15c6c     04 4E 05 F1 | 	add	fp, #4
15c70     A7 FE 61 FC | 	wrlong	result3, fp
15c74     08 4E 85 F1 | 	sub	fp, #8
15c78     A7 12 02 F6 | 	mov	arg01, fp
15c7c     0C 4E 85 F1 | 	sub	fp, #12
15c80     80 D1 BF FD | 	call	#_converttoint
15c84     FD 20 02 F6 | 	mov	local02, result1
15c88     10 1F 02 F6 | 	mov	local01, local02
15c8c     01 1E 66 F0 | 	shl	local01, #1
15c90     10 1F 02 F1 | 	add	local01, local02
15c94     03 1E 66 F0 | 	shl	local01, #3
15c98     34 00 00 FF 
15c9c     38 E5 05 F1 | 	add	objptr, ##26936
15ca0     F2 1E 02 F1 | 	add	local01, objptr
15ca4     A7 12 02 F6 | 	mov	arg01, fp
15ca8     34 00 00 FF 
15cac     38 E5 85 F1 | 	sub	objptr, ##26936
15cb0     50 D1 BF FD | 	call	#_converttoint
15cb4     06 1E 06 F1 | 	add	local01, #6
15cb8     0F FB 51 FC | 	wrword	result1, local01
15cbc     A7 F0 03 F6 | 	mov	ptra, fp
15cc0     B2 00 A0 FD | 	call	#popregs_
15cc4                 | _do_setdelay_ret
15cc4     2D 00 64 FD | 	ret
15cc8                 | 
15cc8                 | ' 
15cc8                 | ' sub do_setlen
15cc8                 | _do_setlen
15cc8     02 4A 05 F6 | 	mov	COUNT_, #2
15ccc     A8 00 A0 FD | 	call	#pushregs_
15cd0     18 F0 07 F1 | 	add	ptra, #24
15cd4     D4 44 BF FD | 	call	#_pop
15cd8     FD 12 02 F6 | 	mov	arg01, result1
15cdc     FE 1E 02 F6 | 	mov	local01, result2
15ce0     FF 20 02 F6 | 	mov	local02, result3
15ce4     A7 12 62 FC | 	wrlong	arg01, fp
15ce8     04 4E 05 F1 | 	add	fp, #4
15cec     A7 1E 62 FC | 	wrlong	local01, fp
15cf0     04 4E 05 F1 | 	add	fp, #4
15cf4     A7 20 62 FC | 	wrlong	local02, fp
15cf8     08 4E 85 F1 | 	sub	fp, #8
15cfc     AC 44 BF FD | 	call	#_pop
15d00     FD 20 02 F6 | 	mov	local02, result1
15d04     0C 4E 05 F1 | 	add	fp, #12
15d08     A7 20 62 FC | 	wrlong	local02, fp
15d0c     04 4E 05 F1 | 	add	fp, #4
15d10     A7 FC 61 FC | 	wrlong	result2, fp
15d14     04 4E 05 F1 | 	add	fp, #4
15d18     A7 FE 61 FC | 	wrlong	result3, fp
15d1c     08 4E 85 F1 | 	sub	fp, #8
15d20     A7 12 02 F6 | 	mov	arg01, fp
15d24     0C 4E 85 F1 | 	sub	fp, #12
15d28     D8 D0 BF FD | 	call	#_converttoint
15d2c     FD 20 02 F6 | 	mov	local02, result1
15d30     10 1F 02 F6 | 	mov	local01, local02
15d34     01 1E 66 F0 | 	shl	local01, #1
15d38     10 1F 02 F1 | 	add	local01, local02
15d3c     03 1E 66 F0 | 	shl	local01, #3
15d40     34 00 00 FF 
15d44     38 E5 05 F1 | 	add	objptr, ##26936
15d48     F2 1E 02 F1 | 	add	local01, objptr
15d4c     A7 12 02 F6 | 	mov	arg01, fp
15d50     34 00 00 FF 
15d54     38 E5 85 F1 | 	sub	objptr, ##26936
15d58     54 D1 BF FD | 	call	#_converttofloat
15d5c     08 1E 06 F1 | 	add	local01, #8
15d60     0F FB 61 FC | 	wrlong	result1, local01
15d64     A7 F0 03 F6 | 	mov	ptra, fp
15d68     B2 00 A0 FD | 	call	#popregs_
15d6c                 | _do_setlen_ret
15d6c     2D 00 64 FD | 	ret
15d70                 | 
15d70                 | ' 
15d70                 | ' sub do_setvol
15d70                 | _do_setvol
15d70     02 4A 05 F6 | 	mov	COUNT_, #2
15d74     A8 00 A0 FD | 	call	#pushregs_
15d78     18 F0 07 F1 | 	add	ptra, #24
15d7c     2C 44 BF FD | 	call	#_pop
15d80     FD 12 02 F6 | 	mov	arg01, result1
15d84     FE 1E 02 F6 | 	mov	local01, result2
15d88     FF 20 02 F6 | 	mov	local02, result3
15d8c     A7 12 62 FC | 	wrlong	arg01, fp
15d90     04 4E 05 F1 | 	add	fp, #4
15d94     A7 1E 62 FC | 	wrlong	local01, fp
15d98     04 4E 05 F1 | 	add	fp, #4
15d9c     A7 20 62 FC | 	wrlong	local02, fp
15da0     08 4E 85 F1 | 	sub	fp, #8
15da4     04 44 BF FD | 	call	#_pop
15da8     FD 20 02 F6 | 	mov	local02, result1
15dac     0C 4E 05 F1 | 	add	fp, #12
15db0     A7 20 62 FC | 	wrlong	local02, fp
15db4     04 4E 05 F1 | 	add	fp, #4
15db8     A7 FC 61 FC | 	wrlong	result2, fp
15dbc     04 4E 05 F1 | 	add	fp, #4
15dc0     A7 FE 61 FC | 	wrlong	result3, fp
15dc4     08 4E 85 F1 | 	sub	fp, #8
15dc8     A7 12 02 F6 | 	mov	arg01, fp
15dcc     0C 4E 85 F1 | 	sub	fp, #12
15dd0     30 D0 BF FD | 	call	#_converttoint
15dd4     FD 20 02 F6 | 	mov	local02, result1
15dd8     10 1F 02 F6 | 	mov	local01, local02
15ddc     01 1E 66 F0 | 	shl	local01, #1
15de0     10 1F 02 F1 | 	add	local01, local02
15de4     03 1E 66 F0 | 	shl	local01, #3
15de8     34 00 00 FF 
15dec     38 E5 05 F1 | 	add	objptr, ##26936
15df0     F2 1E 02 F1 | 	add	local01, objptr
15df4     A7 12 02 F6 | 	mov	arg01, fp
15df8     34 00 00 FF 
15dfc     38 E5 85 F1 | 	sub	objptr, ##26936
15e00     AC D0 BF FD | 	call	#_converttofloat
15e04     0C 1E 06 F1 | 	add	local01, #12
15e08     0F FB 61 FC | 	wrlong	result1, local01
15e0c     A7 F0 03 F6 | 	mov	ptra, fp
15e10     B2 00 A0 FD | 	call	#popregs_
15e14                 | _do_setvol_ret
15e14     2D 00 64 FD | 	ret
15e18                 | 
15e18                 | ' 
15e18                 | ' sub do_setpan
15e18                 | _do_setpan
15e18     02 4A 05 F6 | 	mov	COUNT_, #2
15e1c     A8 00 A0 FD | 	call	#pushregs_
15e20     18 F0 07 F1 | 	add	ptra, #24
15e24     84 43 BF FD | 	call	#_pop
15e28     FD 12 02 F6 | 	mov	arg01, result1
15e2c     FE 1E 02 F6 | 	mov	local01, result2
15e30     FF 20 02 F6 | 	mov	local02, result3
15e34     A7 12 62 FC | 	wrlong	arg01, fp
15e38     04 4E 05 F1 | 	add	fp, #4
15e3c     A7 1E 62 FC | 	wrlong	local01, fp
15e40     04 4E 05 F1 | 	add	fp, #4
15e44     A7 20 62 FC | 	wrlong	local02, fp
15e48     08 4E 85 F1 | 	sub	fp, #8
15e4c     5C 43 BF FD | 	call	#_pop
15e50     FD 20 02 F6 | 	mov	local02, result1
15e54     0C 4E 05 F1 | 	add	fp, #12
15e58     A7 20 62 FC | 	wrlong	local02, fp
15e5c     04 4E 05 F1 | 	add	fp, #4
15e60     A7 FC 61 FC | 	wrlong	result2, fp
15e64     04 4E 05 F1 | 	add	fp, #4
15e68     A7 FE 61 FC | 	wrlong	result3, fp
15e6c     08 4E 85 F1 | 	sub	fp, #8
15e70     A7 12 02 F6 | 	mov	arg01, fp
15e74     0C 4E 85 F1 | 	sub	fp, #12
15e78     88 CF BF FD | 	call	#_converttoint
15e7c     FD 20 02 F6 | 	mov	local02, result1
15e80     10 1F 02 F6 | 	mov	local01, local02
15e84     01 1E 66 F0 | 	shl	local01, #1
15e88     10 1F 02 F1 | 	add	local01, local02
15e8c     03 1E 66 F0 | 	shl	local01, #3
15e90     34 00 00 FF 
15e94     38 E5 05 F1 | 	add	objptr, ##26936
15e98     F2 1E 02 F1 | 	add	local01, objptr
15e9c     A7 12 02 F6 | 	mov	arg01, fp
15ea0     34 00 00 FF 
15ea4     38 E5 85 F1 | 	sub	objptr, ##26936
15ea8     04 D0 BF FD | 	call	#_converttofloat
15eac     10 1E 06 F1 | 	add	local01, #16
15eb0     0F FB 61 FC | 	wrlong	result1, local01
15eb4     A7 F0 03 F6 | 	mov	ptra, fp
15eb8     B2 00 A0 FD | 	call	#popregs_
15ebc                 | _do_setpan_ret
15ebc     2D 00 64 FD | 	ret
15ec0                 | 
15ec0                 | ' 
15ec0                 | ' 
15ec0                 | ' sub do_pinwrite
15ec0                 | _do_pinwrite
15ec0     01 4A 05 F6 | 	mov	COUNT_, #1
15ec4     A8 00 A0 FD | 	call	#pushregs_
15ec8     18 F0 07 F1 | 	add	ptra, #24
15ecc     DC 42 BF FD | 	call	#_pop
15ed0     FD 14 02 F6 | 	mov	arg02, result1
15ed4     FE 12 02 F6 | 	mov	arg01, result2
15ed8     FF 1E 02 F6 | 	mov	local01, result3
15edc     A7 14 62 FC | 	wrlong	arg02, fp
15ee0     04 4E 05 F1 | 	add	fp, #4
15ee4     A7 12 62 FC | 	wrlong	arg01, fp
15ee8     04 4E 05 F1 | 	add	fp, #4
15eec     A7 1E 62 FC | 	wrlong	local01, fp
15ef0     08 4E 85 F1 | 	sub	fp, #8
15ef4     B4 42 BF FD | 	call	#_pop
15ef8     FF 1E 02 F6 | 	mov	local01, result3
15efc     0C 4E 05 F1 | 	add	fp, #12
15f00     A7 FA 61 FC | 	wrlong	result1, fp
15f04     04 4E 05 F1 | 	add	fp, #4
15f08     A7 FC 61 FC | 	wrlong	result2, fp
15f0c     04 4E 05 F1 | 	add	fp, #4
15f10     A7 1E 62 FC | 	wrlong	local01, fp
15f14     08 4E 85 F1 | 	sub	fp, #8
15f18     A7 12 02 F6 | 	mov	arg01, fp
15f1c     0C 4E 85 F1 | 	sub	fp, #12
15f20     E0 CE BF FD | 	call	#_converttoint
15f24     FD 1E 02 F6 | 	mov	local01, result1
15f28     A7 12 02 F6 | 	mov	arg01, fp
15f2c     D4 CE BF FD | 	call	#_converttoint
15f30     FD 14 02 F6 | 	mov	arg02, result1
15f34     0F 13 02 F6 | 	mov	arg01, local01
15f38     FC 72 B0 FD | 	call	#__system___pinwrite
15f3c     A7 F0 03 F6 | 	mov	ptra, fp
15f40     B2 00 A0 FD | 	call	#popregs_
15f44                 | _do_pinwrite_ret
15f44     2D 00 64 FD | 	ret
15f48                 | 
15f48                 | ' 
15f48                 | ' sub do_pinfloat
15f48                 | _do_pinfloat
15f48     00 4A 05 F6 | 	mov	COUNT_, #0
15f4c     A8 00 A0 FD | 	call	#pushregs_
15f50     0C F0 07 F1 | 	add	ptra, #12
15f54     54 42 BF FD | 	call	#_pop
15f58     A7 FA 61 FC | 	wrlong	result1, fp
15f5c     04 4E 05 F1 | 	add	fp, #4
15f60     A7 FC 61 FC | 	wrlong	result2, fp
15f64     04 4E 05 F1 | 	add	fp, #4
15f68     A7 FE 61 FC | 	wrlong	result3, fp
15f6c     08 4E 85 F1 | 	sub	fp, #8
15f70     A7 12 02 F6 | 	mov	arg01, fp
15f74     8C CE BF FD | 	call	#_converttoint
15f78     50 FA 61 FD | 	fltl	result1
15f7c     A7 F0 03 F6 | 	mov	ptra, fp
15f80     B2 00 A0 FD | 	call	#popregs_
15f84                 | _do_pinfloat_ret
15f84     2D 00 64 FD | 	ret
15f88                 | 
15f88                 | ' 
15f88                 | ' sub do_pinlo
15f88                 | _do_pinlo
15f88     00 4A 05 F6 | 	mov	COUNT_, #0
15f8c     A8 00 A0 FD | 	call	#pushregs_
15f90     0C F0 07 F1 | 	add	ptra, #12
15f94     14 42 BF FD | 	call	#_pop
15f98     A7 FA 61 FC | 	wrlong	result1, fp
15f9c     04 4E 05 F1 | 	add	fp, #4
15fa0     A7 FC 61 FC | 	wrlong	result2, fp
15fa4     04 4E 05 F1 | 	add	fp, #4
15fa8     A7 FE 61 FC | 	wrlong	result3, fp
15fac     08 4E 85 F1 | 	sub	fp, #8
15fb0     A7 12 02 F6 | 	mov	arg01, fp
15fb4     4C CE BF FD | 	call	#_converttoint
15fb8     58 FA 61 FD | 	drvl	result1
15fbc     A7 F0 03 F6 | 	mov	ptra, fp
15fc0     B2 00 A0 FD | 	call	#popregs_
15fc4                 | _do_pinlo_ret
15fc4     2D 00 64 FD | 	ret
15fc8                 | 
15fc8                 | ' 
15fc8                 | ' sub do_pinhi
15fc8                 | _do_pinhi
15fc8     00 4A 05 F6 | 	mov	COUNT_, #0
15fcc     A8 00 A0 FD | 	call	#pushregs_
15fd0     0C F0 07 F1 | 	add	ptra, #12
15fd4     D4 41 BF FD | 	call	#_pop
15fd8     A7 FA 61 FC | 	wrlong	result1, fp
15fdc     04 4E 05 F1 | 	add	fp, #4
15fe0     A7 FC 61 FC | 	wrlong	result2, fp
15fe4     04 4E 05 F1 | 	add	fp, #4
15fe8     A7 FE 61 FC | 	wrlong	result3, fp
15fec     08 4E 85 F1 | 	sub	fp, #8
15ff0     A7 12 02 F6 | 	mov	arg01, fp
15ff4     0C CE BF FD | 	call	#_converttoint
15ff8     59 FA 61 FD | 	drvh	result1
15ffc     A7 F0 03 F6 | 	mov	ptra, fp
16000     B2 00 A0 FD | 	call	#popregs_
16004                 | _do_pinhi_ret
16004     2D 00 64 FD | 	ret
16008                 | 
16008                 | ' 
16008                 | ' sub do_pintoggle
16008                 | _do_pintoggle
16008     00 4A 05 F6 | 	mov	COUNT_, #0
1600c     A8 00 A0 FD | 	call	#pushregs_
16010     0C F0 07 F1 | 	add	ptra, #12
16014     94 41 BF FD | 	call	#_pop
16018     A7 FA 61 FC | 	wrlong	result1, fp
1601c     04 4E 05 F1 | 	add	fp, #4
16020     A7 FC 61 FC | 	wrlong	result2, fp
16024     04 4E 05 F1 | 	add	fp, #4
16028     A7 FE 61 FC | 	wrlong	result3, fp
1602c     08 4E 85 F1 | 	sub	fp, #8
16030     A7 12 02 F6 | 	mov	arg01, fp
16034     CC CD BF FD | 	call	#_converttoint
16038     5F FA 61 FD | 	drvnot	result1
1603c     A7 F0 03 F6 | 	mov	ptra, fp
16040     B2 00 A0 FD | 	call	#popregs_
16044                 | _do_pintoggle_ret
16044     2D 00 64 FD | 	ret
16048                 | 
16048                 | ' 
16048                 | ' 
16048                 | ' sub do_pinstart
16048                 | _do_pinstart
16048     03 4A 05 F6 | 	mov	COUNT_, #3
1604c     A8 00 A0 FD | 	call	#pushregs_
16050     30 F0 07 F1 | 	add	ptra, #48
16054     54 41 BF FD | 	call	#_pop
16058     FD 16 02 F6 | 	mov	arg03, result1
1605c     FE 14 02 F6 | 	mov	arg02, result2
16060     FF 18 02 F6 | 	mov	arg04, result3
16064     A7 16 62 FC | 	wrlong	arg03, fp
16068     04 4E 05 F1 | 	add	fp, #4
1606c     A7 14 62 FC | 	wrlong	arg02, fp
16070     04 4E 05 F1 | 	add	fp, #4
16074     A7 18 62 FC | 	wrlong	arg04, fp
16078     08 4E 85 F1 | 	sub	fp, #8
1607c     2C 41 BF FD | 	call	#_pop
16080     FD 16 02 F6 | 	mov	arg03, result1
16084     FE 14 02 F6 | 	mov	arg02, result2
16088     FF 18 02 F6 | 	mov	arg04, result3
1608c     0C 4E 05 F1 | 	add	fp, #12
16090     A7 16 62 FC | 	wrlong	arg03, fp
16094     04 4E 05 F1 | 	add	fp, #4
16098     A7 14 62 FC | 	wrlong	arg02, fp
1609c     04 4E 05 F1 | 	add	fp, #4
160a0     A7 18 62 FC | 	wrlong	arg04, fp
160a4     14 4E 85 F1 | 	sub	fp, #20
160a8     00 41 BF FD | 	call	#_pop
160ac     FD 16 02 F6 | 	mov	arg03, result1
160b0     FE 14 02 F6 | 	mov	arg02, result2
160b4     FF 18 02 F6 | 	mov	arg04, result3
160b8     18 4E 05 F1 | 	add	fp, #24
160bc     A7 16 62 FC | 	wrlong	arg03, fp
160c0     04 4E 05 F1 | 	add	fp, #4
160c4     A7 14 62 FC | 	wrlong	arg02, fp
160c8     04 4E 05 F1 | 	add	fp, #4
160cc     A7 18 62 FC | 	wrlong	arg04, fp
160d0     20 4E 85 F1 | 	sub	fp, #32
160d4     D4 40 BF FD | 	call	#_pop
160d8     FF 16 02 F6 | 	mov	arg03, result3
160dc     24 4E 05 F1 | 	add	fp, #36
160e0     A7 FA 61 FC | 	wrlong	result1, fp
160e4     04 4E 05 F1 | 	add	fp, #4
160e8     A7 FC 61 FC | 	wrlong	result2, fp
160ec     04 4E 05 F1 | 	add	fp, #4
160f0     A7 16 62 FC | 	wrlong	arg03, fp
160f4     08 4E 85 F1 | 	sub	fp, #8
160f8     A7 12 02 F6 | 	mov	arg01, fp
160fc     24 4E 85 F1 | 	sub	fp, #36
16100     00 CD BF FD | 	call	#_converttoint
16104     FD 1E 02 F6 | 	mov	local01, result1
16108     18 4E 05 F1 | 	add	fp, #24
1610c     A7 12 02 F6 | 	mov	arg01, fp
16110     18 4E 85 F1 | 	sub	fp, #24
16114     EC CC BF FD | 	call	#_converttoint
16118     FD 20 02 F6 | 	mov	local02, result1
1611c     0C 4E 05 F1 | 	add	fp, #12
16120     A7 12 02 F6 | 	mov	arg01, fp
16124     0C 4E 85 F1 | 	sub	fp, #12
16128     D8 CC BF FD | 	call	#_converttoint
1612c     FD 22 02 F6 | 	mov	local03, result1
16130     A7 12 02 F6 | 	mov	arg01, fp
16134     CC CC BF FD | 	call	#_converttoint
16138     40 1E 62 FD | 	dirl	local01
1613c     0F 21 02 FC | 	wrpin	local02, local01
16140     0F 23 12 FC | 	wxpin	local03, local01
16144     0F FB 21 FC | 	wypin	result1, local01
16148     41 1E 62 FD | 	dirh	local01
1614c     A7 F0 03 F6 | 	mov	ptra, fp
16150     B2 00 A0 FD | 	call	#popregs_
16154                 | _do_pinstart_ret
16154     2D 00 64 FD | 	ret
16158                 | 
16158                 | ' 
16158                 | ' 
16158                 | ' sub do_wrpin
16158                 | _do_wrpin
16158     01 4A 05 F6 | 	mov	COUNT_, #1
1615c     A8 00 A0 FD | 	call	#pushregs_
16160     18 F0 07 F1 | 	add	ptra, #24
16164     44 40 BF FD | 	call	#_pop
16168     FD 14 02 F6 | 	mov	arg02, result1
1616c     FE 12 02 F6 | 	mov	arg01, result2
16170     FF 1E 02 F6 | 	mov	local01, result3
16174     A7 14 62 FC | 	wrlong	arg02, fp
16178     04 4E 05 F1 | 	add	fp, #4
1617c     A7 12 62 FC | 	wrlong	arg01, fp
16180     04 4E 05 F1 | 	add	fp, #4
16184     A7 1E 62 FC | 	wrlong	local01, fp
16188     08 4E 85 F1 | 	sub	fp, #8
1618c     1C 40 BF FD | 	call	#_pop
16190     FF 1E 02 F6 | 	mov	local01, result3
16194     0C 4E 05 F1 | 	add	fp, #12
16198     A7 FA 61 FC | 	wrlong	result1, fp
1619c     04 4E 05 F1 | 	add	fp, #4
161a0     A7 FC 61 FC | 	wrlong	result2, fp
161a4     04 4E 05 F1 | 	add	fp, #4
161a8     A7 1E 62 FC | 	wrlong	local01, fp
161ac     08 4E 85 F1 | 	sub	fp, #8
161b0     A7 12 02 F6 | 	mov	arg01, fp
161b4     0C 4E 85 F1 | 	sub	fp, #12
161b8     48 CC BF FD | 	call	#_converttoint
161bc     FD 1E 02 F6 | 	mov	local01, result1
161c0     A7 12 02 F6 | 	mov	arg01, fp
161c4     3C CC BF FD | 	call	#_converttoint
161c8     0F FB 01 FC | 	wrpin	result1, local01
161cc     A7 F0 03 F6 | 	mov	ptra, fp
161d0     B2 00 A0 FD | 	call	#popregs_
161d4                 | _do_wrpin_ret
161d4     2D 00 64 FD | 	ret
161d8                 | 
161d8                 | ' 
161d8                 | ' sub do_wxpin
161d8                 | _do_wxpin
161d8     01 4A 05 F6 | 	mov	COUNT_, #1
161dc     A8 00 A0 FD | 	call	#pushregs_
161e0     18 F0 07 F1 | 	add	ptra, #24
161e4     C4 3F BF FD | 	call	#_pop
161e8     FD 14 02 F6 | 	mov	arg02, result1
161ec     FE 12 02 F6 | 	mov	arg01, result2
161f0     FF 1E 02 F6 | 	mov	local01, result3
161f4     A7 14 62 FC | 	wrlong	arg02, fp
161f8     04 4E 05 F1 | 	add	fp, #4
161fc     A7 12 62 FC | 	wrlong	arg01, fp
16200     04 4E 05 F1 | 	add	fp, #4
16204     A7 1E 62 FC | 	wrlong	local01, fp
16208     08 4E 85 F1 | 	sub	fp, #8
1620c     9C 3F BF FD | 	call	#_pop
16210     FF 1E 02 F6 | 	mov	local01, result3
16214     0C 4E 05 F1 | 	add	fp, #12
16218     A7 FA 61 FC | 	wrlong	result1, fp
1621c     04 4E 05 F1 | 	add	fp, #4
16220     A7 FC 61 FC | 	wrlong	result2, fp
16224     04 4E 05 F1 | 	add	fp, #4
16228     A7 1E 62 FC | 	wrlong	local01, fp
1622c     08 4E 85 F1 | 	sub	fp, #8
16230     A7 12 02 F6 | 	mov	arg01, fp
16234     0C 4E 85 F1 | 	sub	fp, #12
16238     C8 CB BF FD | 	call	#_converttoint
1623c     FD 1E 02 F6 | 	mov	local01, result1
16240     A7 12 02 F6 | 	mov	arg01, fp
16244     BC CB BF FD | 	call	#_converttoint
16248     0F FB 11 FC | 	wxpin	result1, local01
1624c     A7 F0 03 F6 | 	mov	ptra, fp
16250     B2 00 A0 FD | 	call	#popregs_
16254                 | _do_wxpin_ret
16254     2D 00 64 FD | 	ret
16258                 | 
16258                 | ' 
16258                 | ' sub do_wypin
16258                 | _do_wypin
16258     01 4A 05 F6 | 	mov	COUNT_, #1
1625c     A8 00 A0 FD | 	call	#pushregs_
16260     18 F0 07 F1 | 	add	ptra, #24
16264     44 3F BF FD | 	call	#_pop
16268     FD 14 02 F6 | 	mov	arg02, result1
1626c     FE 12 02 F6 | 	mov	arg01, result2
16270     FF 1E 02 F6 | 	mov	local01, result3
16274     A7 14 62 FC | 	wrlong	arg02, fp
16278     04 4E 05 F1 | 	add	fp, #4
1627c     A7 12 62 FC | 	wrlong	arg01, fp
16280     04 4E 05 F1 | 	add	fp, #4
16284     A7 1E 62 FC | 	wrlong	local01, fp
16288     08 4E 85 F1 | 	sub	fp, #8
1628c     1C 3F BF FD | 	call	#_pop
16290     FF 1E 02 F6 | 	mov	local01, result3
16294     0C 4E 05 F1 | 	add	fp, #12
16298     A7 FA 61 FC | 	wrlong	result1, fp
1629c     04 4E 05 F1 | 	add	fp, #4
162a0     A7 FC 61 FC | 	wrlong	result2, fp
162a4     04 4E 05 F1 | 	add	fp, #4
162a8     A7 1E 62 FC | 	wrlong	local01, fp
162ac     08 4E 85 F1 | 	sub	fp, #8
162b0     A7 12 02 F6 | 	mov	arg01, fp
162b4     0C 4E 85 F1 | 	sub	fp, #12
162b8     48 CB BF FD | 	call	#_converttoint
162bc     FD 1E 02 F6 | 	mov	local01, result1
162c0     A7 12 02 F6 | 	mov	arg01, fp
162c4     3C CB BF FD | 	call	#_converttoint
162c8     0F FB 21 FC | 	wypin	result1, local01
162cc     A7 F0 03 F6 | 	mov	ptra, fp
162d0     B2 00 A0 FD | 	call	#popregs_
162d4                 | _do_wypin_ret
162d4     2D 00 64 FD | 	ret
162d8                 | 
162d8                 | ' 
162d8                 | ' sub do_position
162d8                 | _do_position
162d8     01 4A 05 F6 | 	mov	COUNT_, #1
162dc     A8 00 A0 FD | 	call	#pushregs_
162e0     18 F0 07 F1 | 	add	ptra, #24
162e4     C4 3E BF FD | 	call	#_pop
162e8     FD 14 02 F6 | 	mov	arg02, result1
162ec     FE 12 02 F6 | 	mov	arg01, result2
162f0     FF 1E 02 F6 | 	mov	local01, result3
162f4     A7 14 62 FC | 	wrlong	arg02, fp
162f8     04 4E 05 F1 | 	add	fp, #4
162fc     A7 12 62 FC | 	wrlong	arg01, fp
16300     04 4E 05 F1 | 	add	fp, #4
16304     A7 1E 62 FC | 	wrlong	local01, fp
16308     08 4E 85 F1 | 	sub	fp, #8
1630c     9C 3E BF FD | 	call	#_pop
16310     FF 1E 02 F6 | 	mov	local01, result3
16314     0C 4E 05 F1 | 	add	fp, #12
16318     A7 FA 61 FC | 	wrlong	result1, fp
1631c     04 4E 05 F1 | 	add	fp, #4
16320     A7 FC 61 FC | 	wrlong	result2, fp
16324     04 4E 05 F1 | 	add	fp, #4
16328     A7 1E 62 FC | 	wrlong	local01, fp
1632c     08 4E 85 F1 | 	sub	fp, #8
16330     A7 12 02 F6 | 	mov	arg01, fp
16334     0C 4E 85 F1 | 	sub	fp, #12
16338     C8 CA BF FD | 	call	#_converttoint
1633c     FD 1E 02 F6 | 	mov	local01, result1
16340     A7 12 02 F6 | 	mov	arg01, fp
16344     BC CA BF FD | 	call	#_converttoint
16348     FD 14 02 F6 | 	mov	arg02, result1
1634c     0F 13 02 F6 | 	mov	arg01, local01
16350     B4 55 B0 FD | 	call	#_hg010b_spin2_setcursorpos
16354     A7 F0 03 F6 | 	mov	ptra, fp
16358     B2 00 A0 FD | 	call	#popregs_
1635c                 | _do_position_ret
1635c     2D 00 64 FD | 	ret
16360                 | 
16360                 | ' 
16360                 | ' sub do_poke
16360                 | _do_poke
16360     01 4A 05 F6 | 	mov	COUNT_, #1
16364     A8 00 A0 FD | 	call	#pushregs_
16368     20 F0 07 F1 | 	add	ptra, #32
1636c     3C 3E BF FD | 	call	#_pop
16370     FD 14 02 F6 | 	mov	arg02, result1
16374     FE 12 02 F6 | 	mov	arg01, result2
16378     FF 1E 02 F6 | 	mov	local01, result3
1637c     A7 14 62 FC | 	wrlong	arg02, fp
16380     04 4E 05 F1 | 	add	fp, #4
16384     A7 12 62 FC | 	wrlong	arg01, fp
16388     04 4E 05 F1 | 	add	fp, #4
1638c     A7 1E 62 FC | 	wrlong	local01, fp
16390     08 4E 85 F1 | 	sub	fp, #8
16394     14 3E BF FD | 	call	#_pop
16398     FF 1E 02 F6 | 	mov	local01, result3
1639c     0C 4E 05 F1 | 	add	fp, #12
163a0     A7 FA 61 FC | 	wrlong	result1, fp
163a4     04 4E 05 F1 | 	add	fp, #4
163a8     A7 FC 61 FC | 	wrlong	result2, fp
163ac     04 4E 05 F1 | 	add	fp, #4
163b0     A7 1E 62 FC | 	wrlong	local01, fp
163b4     08 4E 85 F1 | 	sub	fp, #8
163b8     A7 12 02 F6 | 	mov	arg01, fp
163bc     0C 4E 85 F1 | 	sub	fp, #12
163c0     40 CA BF FD | 	call	#_converttoint
163c4     18 4E 05 F1 | 	add	fp, #24
163c8     A7 FA 61 FC | 	wrlong	result1, fp
163cc     18 4E 85 F1 | 	sub	fp, #24
163d0     A7 12 02 F6 | 	mov	arg01, fp
163d4     2C CA BF FD | 	call	#_converttoint
163d8     1C 4E 05 F1 | 	add	fp, #28
163dc     A7 FA 61 FC | 	wrlong	result1, fp
163e0                 | ' t1=pop() 'value
163e0                 | ' t2=pop() 
163e0                 | ' a=converttoint(t2) : v=converttoint(t1)
163e0                 | ' if a<$80000 then poke a,v else pspoke a,v
163e0     04 4E 85 F1 | 	sub	fp, #4
163e4     A7 1E 02 FB | 	rdlong	local01, fp
163e8     18 4E 85 F1 | 	sub	fp, #24
163ec     00 04 00 FF 
163f0     00 1E 16 F2 | 	cmp	local01, ##524288 wc
163f4     1C 00 90 3D |  if_ae	jmp	#LR__1740
163f8     18 4E 05 F1 | 	add	fp, #24
163fc     A7 12 02 FB | 	rdlong	arg01, fp
16400     04 4E 05 F1 | 	add	fp, #4
16404     A7 14 02 FB | 	rdlong	arg02, fp
16408     1C 4E 85 F1 | 	sub	fp, #28
1640c     09 15 42 FC | 	wrbyte	arg02, arg01
16410     18 00 90 FD | 	jmp	#LR__1741
16414                 | LR__1740
16414     18 4E 05 F1 | 	add	fp, #24
16418     A7 12 02 FB | 	rdlong	arg01, fp
1641c     04 4E 05 F1 | 	add	fp, #4
16420     A7 14 02 FB | 	rdlong	arg02, fp
16424     1C 4E 85 F1 | 	sub	fp, #28
16428     F0 2D B0 FD | 	call	#_pspoke
1642c                 | LR__1741
1642c     A7 F0 03 F6 | 	mov	ptra, fp
16430     B2 00 A0 FD | 	call	#popregs_
16434                 | _do_poke_ret
16434     2D 00 64 FD | 	ret
16438                 | 
16438                 | ' 
16438                 | ' sub do_dpoke
16438                 | _do_dpoke
16438     01 4A 05 F6 | 	mov	COUNT_, #1
1643c     A8 00 A0 FD | 	call	#pushregs_
16440     20 F0 07 F1 | 	add	ptra, #32
16444     64 3D BF FD | 	call	#_pop
16448     FD 14 02 F6 | 	mov	arg02, result1
1644c     FE 12 02 F6 | 	mov	arg01, result2
16450     FF 1E 02 F6 | 	mov	local01, result3
16454     A7 14 62 FC | 	wrlong	arg02, fp
16458     04 4E 05 F1 | 	add	fp, #4
1645c     A7 12 62 FC | 	wrlong	arg01, fp
16460     04 4E 05 F1 | 	add	fp, #4
16464     A7 1E 62 FC | 	wrlong	local01, fp
16468     08 4E 85 F1 | 	sub	fp, #8
1646c     3C 3D BF FD | 	call	#_pop
16470     FF 1E 02 F6 | 	mov	local01, result3
16474     0C 4E 05 F1 | 	add	fp, #12
16478     A7 FA 61 FC | 	wrlong	result1, fp
1647c     04 4E 05 F1 | 	add	fp, #4
16480     A7 FC 61 FC | 	wrlong	result2, fp
16484     04 4E 05 F1 | 	add	fp, #4
16488     A7 1E 62 FC | 	wrlong	local01, fp
1648c     08 4E 85 F1 | 	sub	fp, #8
16490     A7 12 02 F6 | 	mov	arg01, fp
16494     0C 4E 85 F1 | 	sub	fp, #12
16498     68 C9 BF FD | 	call	#_converttoint
1649c     18 4E 05 F1 | 	add	fp, #24
164a0     A7 FA 61 FC | 	wrlong	result1, fp
164a4     18 4E 85 F1 | 	sub	fp, #24
164a8     A7 12 02 F6 | 	mov	arg01, fp
164ac     54 C9 BF FD | 	call	#_converttoint
164b0     1C 4E 05 F1 | 	add	fp, #28
164b4     A7 FA 61 FC | 	wrlong	result1, fp
164b8                 | ' t1=pop() 'value
164b8                 | ' t2=pop() 
164b8                 | ' a=converttoint(t2) : v=converttoint(t1)
164b8                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
164b8     04 4E 85 F1 | 	sub	fp, #4
164bc     A7 1E 02 FB | 	rdlong	local01, fp
164c0     18 4E 85 F1 | 	sub	fp, #24
164c4     00 04 00 FF 
164c8     00 1E 16 F2 | 	cmp	local01, ##524288 wc
164cc     1C 00 90 3D |  if_ae	jmp	#LR__1750
164d0     18 4E 05 F1 | 	add	fp, #24
164d4     A7 12 02 FB | 	rdlong	arg01, fp
164d8     04 4E 05 F1 | 	add	fp, #4
164dc     A7 14 02 FB | 	rdlong	arg02, fp
164e0     1C 4E 85 F1 | 	sub	fp, #28
164e4     09 15 52 FC | 	wrword	arg02, arg01
164e8     18 00 90 FD | 	jmp	#LR__1751
164ec                 | LR__1750
164ec     18 4E 05 F1 | 	add	fp, #24
164f0     A7 12 02 FB | 	rdlong	arg01, fp
164f4     04 4E 05 F1 | 	add	fp, #4
164f8     A7 14 02 FB | 	rdlong	arg02, fp
164fc     1C 4E 85 F1 | 	sub	fp, #28
16500     D0 2C B0 FD | 	call	#_psdpoke
16504                 | LR__1751
16504     A7 F0 03 F6 | 	mov	ptra, fp
16508     B2 00 A0 FD | 	call	#popregs_
1650c                 | _do_dpoke_ret
1650c     2D 00 64 FD | 	ret
16510                 | 
16510                 | ' 
16510                 | ' sub do_lpoke
16510                 | _do_lpoke
16510     01 4A 05 F6 | 	mov	COUNT_, #1
16514     A8 00 A0 FD | 	call	#pushregs_
16518     20 F0 07 F1 | 	add	ptra, #32
1651c     8C 3C BF FD | 	call	#_pop
16520     FD 14 02 F6 | 	mov	arg02, result1
16524     FE 12 02 F6 | 	mov	arg01, result2
16528     FF 1E 02 F6 | 	mov	local01, result3
1652c     A7 14 62 FC | 	wrlong	arg02, fp
16530     04 4E 05 F1 | 	add	fp, #4
16534     A7 12 62 FC | 	wrlong	arg01, fp
16538     04 4E 05 F1 | 	add	fp, #4
1653c     A7 1E 62 FC | 	wrlong	local01, fp
16540     08 4E 85 F1 | 	sub	fp, #8
16544     64 3C BF FD | 	call	#_pop
16548     FF 1E 02 F6 | 	mov	local01, result3
1654c     0C 4E 05 F1 | 	add	fp, #12
16550     A7 FA 61 FC | 	wrlong	result1, fp
16554     04 4E 05 F1 | 	add	fp, #4
16558     A7 FC 61 FC | 	wrlong	result2, fp
1655c     04 4E 05 F1 | 	add	fp, #4
16560     A7 1E 62 FC | 	wrlong	local01, fp
16564     08 4E 85 F1 | 	sub	fp, #8
16568     A7 12 02 F6 | 	mov	arg01, fp
1656c     0C 4E 85 F1 | 	sub	fp, #12
16570     90 C8 BF FD | 	call	#_converttoint
16574     18 4E 05 F1 | 	add	fp, #24
16578     A7 FA 61 FC | 	wrlong	result1, fp
1657c     18 4E 85 F1 | 	sub	fp, #24
16580     A7 12 02 F6 | 	mov	arg01, fp
16584     7C C8 BF FD | 	call	#_converttoint
16588     1C 4E 05 F1 | 	add	fp, #28
1658c     A7 FA 61 FC | 	wrlong	result1, fp
16590                 | ' t1=pop() 'value
16590                 | ' t2=pop() 
16590                 | ' a=converttoint(t2) : v=converttoint(t1)
16590                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
16590     04 4E 85 F1 | 	sub	fp, #4
16594     A7 1E 02 FB | 	rdlong	local01, fp
16598     18 4E 85 F1 | 	sub	fp, #24
1659c     00 04 00 FF 
165a0     00 1E 16 F2 | 	cmp	local01, ##524288 wc
165a4     1C 00 90 3D |  if_ae	jmp	#LR__1760
165a8     18 4E 05 F1 | 	add	fp, #24
165ac     A7 12 02 FB | 	rdlong	arg01, fp
165b0     04 4E 05 F1 | 	add	fp, #4
165b4     A7 14 02 FB | 	rdlong	arg02, fp
165b8     1C 4E 85 F1 | 	sub	fp, #28
165bc     09 15 62 FC | 	wrlong	arg02, arg01
165c0     18 00 90 FD | 	jmp	#LR__1761
165c4                 | LR__1760
165c4     18 4E 05 F1 | 	add	fp, #24
165c8     A7 12 02 FB | 	rdlong	arg01, fp
165cc     04 4E 05 F1 | 	add	fp, #4
165d0     A7 14 02 FB | 	rdlong	arg02, fp
165d4     1C 4E 85 F1 | 	sub	fp, #28
165d8     B0 2B B0 FD | 	call	#_pslpoke
165dc                 | LR__1761
165dc     A7 F0 03 F6 | 	mov	ptra, fp
165e0     B2 00 A0 FD | 	call	#popregs_
165e4                 | _do_lpoke_ret
165e4     2D 00 64 FD | 	ret
165e8                 | 
165e8                 | ' 
165e8                 | ' sub do_peek
165e8                 | _do_peek
165e8     00 4A 05 F6 | 	mov	COUNT_, #0
165ec     A8 00 A0 FD | 	call	#pushregs_
165f0     14 F0 07 F1 | 	add	ptra, #20
165f4     B4 3B BF FD | 	call	#_pop
165f8     A7 FA 61 FC | 	wrlong	result1, fp
165fc     04 4E 05 F1 | 	add	fp, #4
16600     A7 FC 61 FC | 	wrlong	result2, fp
16604     04 4E 05 F1 | 	add	fp, #4
16608     A7 FE 61 FC | 	wrlong	result3, fp
1660c     08 4E 85 F1 | 	sub	fp, #8
16610     A7 12 02 F6 | 	mov	arg01, fp
16614     EC C7 BF FD | 	call	#_converttoint
16618     0C 4E 05 F1 | 	add	fp, #12
1661c     A7 FA 61 FC | 	wrlong	result1, fp
16620                 | ' t1=pop()
16620                 | ' a=converttoint(t1)
16620                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
16620     0C 4E 85 F1 | 	sub	fp, #12
16624     00 04 00 FF 
16628     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1662c     1C 00 90 3D |  if_ae	jmp	#LR__1770
16630     0C 4E 05 F1 | 	add	fp, #12
16634     A7 12 02 FB | 	rdlong	arg01, fp
16638     09 FB C1 FA | 	rdbyte	result1, arg01
1663c     04 4E 05 F1 | 	add	fp, #4
16640     A7 FA 61 FC | 	wrlong	result1, fp
16644     10 4E 85 F1 | 	sub	fp, #16
16648     20 00 90 FD | 	jmp	#LR__1771
1664c                 | LR__1770
1664c     0C 4E 05 F1 | 	add	fp, #12
16650     A7 12 02 FB | 	rdlong	arg01, fp
16654     0C 4E 85 F1 | 	sub	fp, #12
16658     08 2C B0 FD | 	call	#_pspeek
1665c     FD FA E1 F8 | 	getbyte	result1, result1, #0
16660     10 4E 05 F1 | 	add	fp, #16
16664     A7 FA 61 FC | 	wrlong	result1, fp
16668     10 4E 85 F1 | 	sub	fp, #16
1666c                 | LR__1771
1666c     08 4E 05 F1 | 	add	fp, #8
16670     A7 3A 68 FC | 	wrlong	#29, fp
16674     08 4E 05 F1 | 	add	fp, #8
16678     A7 12 02 FB | 	rdlong	arg01, fp
1667c     10 4E 85 F1 | 	sub	fp, #16
16680     A7 12 62 FC | 	wrlong	arg01, fp
16684     A7 12 02 F6 | 	mov	arg01, fp
16688     B8 3B BF FD | 	call	#_push
1668c     A7 F0 03 F6 | 	mov	ptra, fp
16690     B2 00 A0 FD | 	call	#popregs_
16694                 | _do_peek_ret
16694     2D 00 64 FD | 	ret
16698                 | 
16698                 | ' 
16698                 | ' sub do_dpeek
16698                 | _do_dpeek
16698     00 4A 05 F6 | 	mov	COUNT_, #0
1669c     A8 00 A0 FD | 	call	#pushregs_
166a0     14 F0 07 F1 | 	add	ptra, #20
166a4     04 3B BF FD | 	call	#_pop
166a8     A7 FA 61 FC | 	wrlong	result1, fp
166ac     04 4E 05 F1 | 	add	fp, #4
166b0     A7 FC 61 FC | 	wrlong	result2, fp
166b4     04 4E 05 F1 | 	add	fp, #4
166b8     A7 FE 61 FC | 	wrlong	result3, fp
166bc     08 4E 85 F1 | 	sub	fp, #8
166c0     A7 12 02 F6 | 	mov	arg01, fp
166c4     3C C7 BF FD | 	call	#_converttoint
166c8     0C 4E 05 F1 | 	add	fp, #12
166cc     A7 FA 61 FC | 	wrlong	result1, fp
166d0                 | ' t1=pop()
166d0                 | ' a=converttoint(t1)
166d0                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
166d0     0C 4E 85 F1 | 	sub	fp, #12
166d4     00 04 00 FF 
166d8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
166dc     1C 00 90 3D |  if_ae	jmp	#LR__1780
166e0     0C 4E 05 F1 | 	add	fp, #12
166e4     A7 12 02 FB | 	rdlong	arg01, fp
166e8     09 FB E1 FA | 	rdword	result1, arg01
166ec     04 4E 05 F1 | 	add	fp, #4
166f0     A7 FA 61 FC | 	wrlong	result1, fp
166f4     10 4E 85 F1 | 	sub	fp, #16
166f8     1C 00 90 FD | 	jmp	#LR__1781
166fc                 | LR__1780
166fc     0C 4E 05 F1 | 	add	fp, #12
16700     A7 12 02 FB | 	rdlong	arg01, fp
16704     0C 4E 85 F1 | 	sub	fp, #12
16708     08 2C B0 FD | 	call	#_psdpeek
1670c     10 4E 05 F1 | 	add	fp, #16
16710     A7 FA 61 FC | 	wrlong	result1, fp
16714     10 4E 85 F1 | 	sub	fp, #16
16718                 | LR__1781
16718     08 4E 05 F1 | 	add	fp, #8
1671c     A7 3A 68 FC | 	wrlong	#29, fp
16720     08 4E 05 F1 | 	add	fp, #8
16724     A7 12 02 FB | 	rdlong	arg01, fp
16728     10 4E 85 F1 | 	sub	fp, #16
1672c     A7 12 62 FC | 	wrlong	arg01, fp
16730     A7 12 02 F6 | 	mov	arg01, fp
16734     0C 3B BF FD | 	call	#_push
16738     A7 F0 03 F6 | 	mov	ptra, fp
1673c     B2 00 A0 FD | 	call	#popregs_
16740                 | _do_dpeek_ret
16740     2D 00 64 FD | 	ret
16744                 | 
16744                 | ' 
16744                 | ' 
16744                 | ' sub do_lpeek
16744                 | _do_lpeek
16744     00 4A 05 F6 | 	mov	COUNT_, #0
16748     A8 00 A0 FD | 	call	#pushregs_
1674c     14 F0 07 F1 | 	add	ptra, #20
16750     58 3A BF FD | 	call	#_pop
16754     A7 FA 61 FC | 	wrlong	result1, fp
16758     04 4E 05 F1 | 	add	fp, #4
1675c     A7 FC 61 FC | 	wrlong	result2, fp
16760     04 4E 05 F1 | 	add	fp, #4
16764     A7 FE 61 FC | 	wrlong	result3, fp
16768     08 4E 85 F1 | 	sub	fp, #8
1676c     A7 12 02 F6 | 	mov	arg01, fp
16770     90 C6 BF FD | 	call	#_converttoint
16774     0C 4E 05 F1 | 	add	fp, #12
16778     A7 FA 61 FC | 	wrlong	result1, fp
1677c                 | ' t1=pop()
1677c                 | ' a=converttoint(t1)
1677c                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
1677c     0C 4E 85 F1 | 	sub	fp, #12
16780     00 04 00 FF 
16784     00 FA 15 F2 | 	cmp	result1, ##524288 wc
16788     1C 00 90 3D |  if_ae	jmp	#LR__1790
1678c     0C 4E 05 F1 | 	add	fp, #12
16790     A7 12 02 FB | 	rdlong	arg01, fp
16794     09 FB 01 FB | 	rdlong	result1, arg01
16798     04 4E 05 F1 | 	add	fp, #4
1679c     A7 FA 61 FC | 	wrlong	result1, fp
167a0     10 4E 85 F1 | 	sub	fp, #16
167a4     1C 00 90 FD | 	jmp	#LR__1791
167a8                 | LR__1790
167a8     0C 4E 05 F1 | 	add	fp, #12
167ac     A7 12 02 FB | 	rdlong	arg01, fp
167b0     0C 4E 85 F1 | 	sub	fp, #12
167b4     04 2B B0 FD | 	call	#_pslpeek
167b8     10 4E 05 F1 | 	add	fp, #16
167bc     A7 FA 61 FC | 	wrlong	result1, fp
167c0     10 4E 85 F1 | 	sub	fp, #16
167c4                 | LR__1791
167c4     08 4E 05 F1 | 	add	fp, #8
167c8     A7 3A 68 FC | 	wrlong	#29, fp
167cc     08 4E 05 F1 | 	add	fp, #8
167d0     A7 12 02 FB | 	rdlong	arg01, fp
167d4     10 4E 85 F1 | 	sub	fp, #16
167d8     A7 12 62 FC | 	wrlong	arg01, fp
167dc     A7 12 02 F6 | 	mov	arg01, fp
167e0     60 3A BF FD | 	call	#_push
167e4     A7 F0 03 F6 | 	mov	ptra, fp
167e8     B2 00 A0 FD | 	call	#popregs_
167ec                 | _do_lpeek_ret
167ec     2D 00 64 FD | 	ret
167f0                 | 
167f0                 | ' 
167f0                 | ' sub do_fre
167f0                 | _do_fre
167f0     01 4A 05 F6 | 	mov	COUNT_, #1
167f4     A8 00 A0 FD | 	call	#pushregs_
167f8     0C F0 07 F1 | 	add	ptra, #12
167fc     7B 00 00 FF 
16800     68 E4 05 F1 | 	add	objptr, ##63080
16804     F2 12 02 FB | 	rdlong	arg01, objptr
16808     18 00 00 FF 
1680c     1C E4 85 F1 | 	sub	objptr, ##12316
16810     F2 1E 02 FB | 	rdlong	local01, objptr
16814     0F 13 82 F1 | 	sub	arg01, local01
16818     18 00 00 FF 
1681c     C8 E4 05 F1 | 	add	objptr, ##12488
16820     F2 12 62 FC | 	wrlong	arg01, objptr
16824     08 4E 05 F1 | 	add	fp, #8
16828     A7 3A 68 FC | 	wrlong	#29, fp
1682c     08 4E 85 F1 | 	sub	fp, #8
16830     F2 1E 02 FB | 	rdlong	local01, objptr
16834     7B 00 00 FF 
16838     14 E5 85 F1 | 	sub	objptr, ##63252
1683c     A7 1E 62 FC | 	wrlong	local01, fp
16840     A7 12 02 F6 | 	mov	arg01, fp
16844     FC 39 BF FD | 	call	#_push
16848     A7 F0 03 F6 | 	mov	ptra, fp
1684c     B2 00 A0 FD | 	call	#popregs_
16850                 | _do_fre_ret
16850     2D 00 64 FD | 	ret
16854                 | 
16854                 | ' 
16854                 | ' sub do_adr
16854                 | _do_adr
16854                 | _do_adr_ret
16854     2D 00 64 FD | 	ret
16858                 | 
16858                 | ' 
16858                 | ' sub do_getnotevalue
16858                 | _do_getnotevalue
16858     01 4A 05 F6 | 	mov	COUNT_, #1
1685c     A8 00 A0 FD | 	call	#pushregs_
16860     1C F0 07 F1 | 	add	ptra, #28
16864     44 39 BF FD | 	call	#_pop
16868     FF 14 02 F6 | 	mov	arg02, result3
1686c     10 4E 05 F1 | 	add	fp, #16
16870     A7 FA 61 FC | 	wrlong	result1, fp
16874     04 4E 05 F1 | 	add	fp, #4
16878     A7 FC 61 FC | 	wrlong	result2, fp
1687c     04 4E 05 F1 | 	add	fp, #4
16880     A7 14 62 FC | 	wrlong	arg02, fp
16884     08 4E 85 F1 | 	sub	fp, #8
16888     A7 12 02 F6 | 	mov	arg01, fp
1688c     10 4E 85 F1 | 	sub	fp, #16
16890     70 C5 BF FD | 	call	#_converttoint
16894     FD 14 52 F6 | 	abs	arg02, result1 wc
16898     0C 14 16 FD | 	qdiv	arg02, #12
1689c     0C 4E 05 F1 | 	add	fp, #12
168a0     A7 FA 61 FC | 	wrlong	result1, fp
168a4     34 00 00 FF 
168a8     D8 E4 05 F1 | 	add	objptr, ##26840
168ac     08 4E 85 F1 | 	sub	fp, #8
168b0     19 14 62 FD | 	getqy	arg02
168b4     0A 15 82 F6 | 	negc	arg02, arg02
168b8     02 14 66 F0 | 	shl	arg02, #2
168bc     F2 14 02 F1 | 	add	arg02, objptr
168c0     0A 15 02 FB | 	rdlong	arg02, arg02
168c4     A7 14 62 FC | 	wrlong	arg02, fp
168c8     08 4E 05 F1 | 	add	fp, #8
168cc     A7 14 02 FB | 	rdlong	arg02, fp
168d0     0A 15 52 F6 | 	abs	arg02, arg02 wc
168d4     0C 14 16 FD | 	qdiv	arg02, #12
168d8     0C 4E 85 F1 | 	sub	fp, #12
168dc     34 00 00 FF 
168e0     D8 E4 85 F1 | 	sub	objptr, ##26840
168e4     18 14 62 FD | 	getqx	arg02
168e8     0A 13 82 F6 | 	negc	arg01, arg02
168ec     09 13 52 F6 | 	abs	arg01, arg01 wc
168f0     1F 1E C6 C9 |  if_b	decod	local01, #31
168f4     00 1E 06 36 |  if_ae	mov	local01, #0
168f8     00 8F B0 FD | 	call	#__system___float_fromuns
168fc     0F FB 61 F5 | 	xor	result1, local01
16900     08 4E 05 F1 | 	add	fp, #8
16904     A7 FA 61 FC | 	wrlong	result1, fp
16908     FD 14 02 F6 | 	mov	arg02, result1
1690c     08 4E 85 F1 | 	sub	fp, #8
16910     1E 12 C6 F9 | 	decod	arg01, #30
16914     CC A1 B0 FD | 	call	#__system____builtin_powf
16918     FD 12 02 F6 | 	mov	arg01, result1
1691c     04 4E 05 F1 | 	add	fp, #4
16920     A7 14 02 FB | 	rdlong	arg02, fp
16924     04 4E 85 F1 | 	sub	fp, #4
16928     D4 92 B0 FD | 	call	#__system___float_mul
1692c     A7 FA 61 FC | 	wrlong	result1, fp
16930     10 4E 05 F1 | 	add	fp, #16
16934     A7 FA 61 FC | 	wrlong	result1, fp
16938     08 4E 05 F1 | 	add	fp, #8
1693c     A7 3C 68 FC | 	wrlong	#30, fp
16940     08 4E 85 F1 | 	sub	fp, #8
16944     A7 12 02 F6 | 	mov	arg01, fp
16948     10 4E 85 F1 | 	sub	fp, #16
1694c     F4 38 BF FD | 	call	#_push
16950     A7 F0 03 F6 | 	mov	ptra, fp
16954     B2 00 A0 FD | 	call	#popregs_
16958                 | _do_getnotevalue_ret
16958     2D 00 64 FD | 	ret
1695c                 | 
1695c                 | ' 
1695c                 | ' 
1695c                 | ' sub do_waitms
1695c                 | _do_waitms
1695c     01 4A 05 F6 | 	mov	COUNT_, #1
16960     A8 00 A0 FD | 	call	#pushregs_
16964     18 F0 07 F1 | 	add	ptra, #24
16968     40 38 BF FD | 	call	#_pop
1696c     A7 FA 61 FC | 	wrlong	result1, fp
16970     04 4E 05 F1 | 	add	fp, #4
16974     A7 FC 61 FC | 	wrlong	result2, fp
16978     04 4E 05 F1 | 	add	fp, #4
1697c     A7 FE 61 FC | 	wrlong	result3, fp
16980                 | ' 
16980                 | ' t1=pop() 'value
16980                 | ' 
16980                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
16980     08 4E 85 F1 | 	sub	fp, #8
16984     1C FE 0D F2 | 	cmp	result3, #28 wz
16988     08 4E 05 51 |  if_ne	add	fp, #8
1698c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
16990     08 4E 85 51 |  if_ne	sub	fp, #8
16994     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
16998     A7 12 02 AB |  if_e	rdlong	arg01, fp
1699c     0C 4E 05 A1 |  if_e	add	fp, #12
169a0     A7 12 62 AC |  if_e	wrlong	arg01, fp
169a4     0C 4E 85 A1 |  if_e	sub	fp, #12
169a8     14 00 90 AD |  if_e	jmp	#LR__1800
169ac     A7 12 02 F6 | 	mov	arg01, fp
169b0     50 C4 BF FD | 	call	#_converttoint
169b4     0C 4E 05 F1 | 	add	fp, #12
169b8     A7 FA 61 FC | 	wrlong	result1, fp
169bc     0C 4E 85 F1 | 	sub	fp, #12
169c0                 | LR__1800
169c0                 | ' if t<0 then return
169c0     0C 4E 05 F1 | 	add	fp, #12
169c4     A7 12 02 FB | 	rdlong	arg01, fp
169c8     0C 4E 85 F1 | 	sub	fp, #12
169cc     00 12 56 F2 | 	cmps	arg01, #0 wc
169d0     B8 00 90 CD |  if_b	jmp	#LR__1805
169d4                 | ' if t < 5000 then 
169d4     0C 4E 05 F1 | 	add	fp, #12
169d8     A7 12 02 FB | 	rdlong	arg01, fp
169dc     0C 4E 85 F1 | 	sub	fp, #12
169e0     09 00 00 FF 
169e4     88 13 56 F2 | 	cmps	arg01, ##5000 wc
169e8     14 00 90 3D |  if_ae	jmp	#LR__1801
169ec     0C 4E 05 F1 | 	add	fp, #12
169f0     A7 12 02 FB | 	rdlong	arg01, fp
169f4     0C 4E 85 F1 | 	sub	fp, #12
169f8     7C 69 B0 FD | 	call	#__system___waitms
169fc     8C 00 90 FD | 	jmp	#LR__1804
16a00                 | LR__1801
16a00     10 4E 05 F1 | 	add	fp, #16
16a04     A7 02 68 FC | 	wrlong	#1, fp
16a08     04 4E 85 F1 | 	sub	fp, #4
16a0c     A7 12 02 FB | 	rdlong	arg01, fp
16a10     09 13 52 F6 | 	abs	arg01, arg01 wc
16a14     09 00 00 FF 
16a18     88 13 16 FD | 	qdiv	arg01, ##5000
16a1c                 | '   for i=1 to t/5000
16a1c     0C 4E 85 F1 | 	sub	fp, #12
16a20     18 1E 62 FD | 	getqx	local01
16a24     0F 1F 82 F6 | 	negc	local01, local01
16a28     01 1E 06 F1 | 	add	local01, #1
16a2c                 | LR__1802
16a2c     10 4E 05 F1 | 	add	fp, #16
16a30     A7 12 02 FB | 	rdlong	arg01, fp
16a34     10 4E 85 F1 | 	sub	fp, #16
16a38     0F 13 52 F2 | 	cmps	arg01, local01 wc
16a3c     28 00 90 3D |  if_ae	jmp	#LR__1803
16a40     0C 4E 05 F1 | 	add	fp, #12
16a44     A7 12 02 FB | 	rdlong	arg01, fp
16a48     0C 4E 85 F1 | 	sub	fp, #12
16a4c     28 69 B0 FD | 	call	#__system___waitms
16a50     10 4E 05 F1 | 	add	fp, #16
16a54     A7 12 02 FB | 	rdlong	arg01, fp
16a58     01 12 06 F1 | 	add	arg01, #1
16a5c     A7 12 62 FC | 	wrlong	arg01, fp
16a60     10 4E 85 F1 | 	sub	fp, #16
16a64     C4 FF 9F FD | 	jmp	#LR__1802
16a68                 | LR__1803
16a68     0C 4E 05 F1 | 	add	fp, #12
16a6c     A7 1E 02 FB | 	rdlong	local01, fp
16a70     0F 1F 52 F6 | 	abs	local01, local01 wc
16a74     09 00 00 FF 
16a78     88 1F 16 FD | 	qdiv	local01, ##5000
16a7c     0C 4E 85 F1 | 	sub	fp, #12
16a80     19 1E 62 FD | 	getqy	local01
16a84     0F 13 82 F6 | 	negc	arg01, local01
16a88     EC 68 B0 FD | 	call	#__system___waitms
16a8c                 | LR__1804
16a8c                 | LR__1805
16a8c     A7 F0 03 F6 | 	mov	ptra, fp
16a90     B2 00 A0 FD | 	call	#popregs_
16a94                 | _do_waitms_ret
16a94     2D 00 64 FD | 	ret
16a98                 | 
16a98                 | ' 
16a98                 | ' sub do_waitvbl
16a98                 | _do_waitvbl
16a98     01 12 06 F6 | 	mov	arg01, #1
16a9c     08 4F B0 FD | 	call	#_hg010b_spin2_waitvbl
16aa0                 | _do_waitvbl_ret
16aa0     2D 00 64 FD | 	ret
16aa4                 | 
16aa4                 | ' 
16aa4                 | ' sub do_waitclock
16aa4                 | _do_waitclock
16aa4     7B 00 00 FF 
16aa8     64 E4 05 F1 | 	add	objptr, ##63076
16aac     F2 00 02 FB | 	rdlong	_var01, objptr
16ab0                 | ' c=hkcnt
16ab0                 | ' do: loop until hkcnt<>c
16ab0                 | LR__1810
16ab0     F2 02 02 FB | 	rdlong	_var02, objptr
16ab4     00 03 0A F2 | 	cmp	_var02, _var01 wz
16ab8     F4 FF 9F AD |  if_e	jmp	#LR__1810
16abc     7B 00 00 FF 
16ac0     64 E4 85 F1 | 	sub	objptr, ##63076
16ac4                 | _do_waitclock_ret
16ac4     2D 00 64 FD | 	ret
16ac8                 | 
16ac8                 | ' 
16ac8                 | ' sub do_dir
16ac8                 | _do_dir
16ac8     05 4A 05 F6 | 	mov	COUNT_, #5
16acc     A8 00 A0 FD | 	call	#pushregs_
16ad0     66 01 00 FF 
16ad4     15 13 06 F6 | 	mov	arg01, ##@LR__4988
16ad8     34 6C B0 FD | 	call	#__system___chdir
16adc                 | ' chdir("/sd/bas")       ' set working directory
16adc                 | ' print "Working directory: "; currentdir$ 
16adc     00 12 06 F6 | 	mov	arg01, #0
16ae0     30 BF B0 FD | 	call	#__system___getiolock_0474
16ae4     FD 12 02 F6 | 	mov	arg01, result1
16ae8     98 65 B0 FD | 	call	#__system___lockmem
16aec     66 01 00 FF 
16af0     1D 15 06 F6 | 	mov	arg02, ##@LR__4989
16af4     00 12 06 F6 | 	mov	arg01, #0
16af8     00 16 06 F6 | 	mov	arg03, #0
16afc     88 72 B0 FD | 	call	#__system___basic_print_string
16b00     72 00 00 FF 
16b04     84 E4 05 F1 | 	add	objptr, ##58500
16b08     F2 14 02 FB | 	rdlong	arg02, objptr
16b0c     72 00 00 FF 
16b10     84 E4 85 F1 | 	sub	objptr, ##58500
16b14     00 12 06 F6 | 	mov	arg01, #0
16b18     00 16 06 F6 | 	mov	arg03, #0
16b1c     68 72 B0 FD | 	call	#__system___basic_print_string
16b20     00 12 06 F6 | 	mov	arg01, #0
16b24     0A 14 06 F6 | 	mov	arg02, #10
16b28     00 16 06 F6 | 	mov	arg03, #0
16b2c     00 72 B0 FD | 	call	#__system___basic_print_char
16b30     00 12 06 F6 | 	mov	arg01, #0
16b34     DC BE B0 FD | 	call	#__system___getiolock_0474
16b38     FD 00 68 FC | 	wrlong	#0, result1
16b3c     00 1E 06 F6 | 	mov	local01, #0
16b40     66 01 00 FF 
16b44     31 13 06 F6 | 	mov	arg01, ##@LR__4990
16b48     10 14 06 F6 | 	mov	arg02, #16
16b4c     FC BF B0 FD | 	call	#__system___basic_dir
16b50     FD 20 02 F6 | 	mov	local02, result1
16b54                 | ' px=0:
16b54                 | ' filename=dir$("*", fbDirectory)
16b54                 | ' while filename <> "" and filename <> nil
16b54                 | LR__1820
16b54     00 22 06 F6 | 	mov	local03, #0
16b58     66 01 00 FF 
16b5c     33 15 06 F6 | 	mov	arg02, ##@LR__4991
16b60     10 13 02 F6 | 	mov	arg01, local02
16b64     44 65 B0 FD | 	call	#__system___string_cmp
16b68     00 FA 0D F2 | 	cmp	result1, #0 wz
16b6c     00 22 26 56 |  if_ne	not	local03, #0
16b70     00 24 06 F6 | 	mov	local04, #0
16b74     10 13 02 F6 | 	mov	arg01, local02
16b78     00 14 06 F6 | 	mov	arg02, #0
16b7c     2C 65 B0 FD | 	call	#__system___string_cmp
16b80     00 FA 0D F2 | 	cmp	result1, #0 wz
16b84     00 24 26 56 |  if_ne	not	local04, #0
16b88     12 23 CA F7 | 	test	local03, local04 wz
16b8c     9C 00 90 AD |  if_e	jmp	#LR__1822
16b90                 | '   print "[dir] ";filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
16b90     00 12 06 F6 | 	mov	arg01, #0
16b94     7C BE B0 FD | 	call	#__system___getiolock_0474
16b98     FD 12 02 F6 | 	mov	arg01, result1
16b9c     E4 64 B0 FD | 	call	#__system___lockmem
16ba0     66 01 00 FF 
16ba4     34 15 06 F6 | 	mov	arg02, ##@LR__4992
16ba8     00 12 06 F6 | 	mov	arg01, #0
16bac     00 16 06 F6 | 	mov	arg03, #0
16bb0     D4 71 B0 FD | 	call	#__system___basic_print_string
16bb4     00 26 06 F6 | 	mov	local05, #0
16bb8     00 12 06 F6 | 	mov	arg01, #0
16bbc     10 15 02 F6 | 	mov	arg02, local02
16bc0     00 16 06 F6 | 	mov	arg03, #0
16bc4     C0 71 B0 FD | 	call	#__system___basic_print_string
16bc8     00 12 06 F6 | 	mov	arg01, #0
16bcc     44 BE B0 FD | 	call	#__system___getiolock_0474
16bd0     FD 00 68 FC | 	wrlong	#0, result1
16bd4     40 1E 06 F1 | 	add	local01, #64
16bd8     0F 13 02 F6 | 	mov	arg01, local01
16bdc     64 4D B0 FD | 	call	#_hg010b_spin2_setcursorx
16be0     00 1F 56 F2 | 	cmps	local01, #256 wc
16be4     30 00 90 CD |  if_b	jmp	#LR__1821
16be8     00 1E 06 F6 | 	mov	local01, #0
16bec     00 12 06 F6 | 	mov	arg01, #0
16bf0     20 BE B0 FD | 	call	#__system___getiolock_0474
16bf4     FD 12 02 F6 | 	mov	arg01, result1
16bf8     88 64 B0 FD | 	call	#__system___lockmem
16bfc     00 12 06 F6 | 	mov	arg01, #0
16c00     0A 14 06 F6 | 	mov	arg02, #10
16c04     00 16 06 F6 | 	mov	arg03, #0
16c08     24 71 B0 FD | 	call	#__system___basic_print_char
16c0c     00 12 06 F6 | 	mov	arg01, #0
16c10     00 BE B0 FD | 	call	#__system___getiolock_0474
16c14     FD 00 68 FC | 	wrlong	#0, result1
16c18                 | LR__1821
16c18     00 12 06 F6 | 	mov	arg01, #0
16c1c     00 14 06 F6 | 	mov	arg02, #0
16c20     28 BF B0 FD | 	call	#__system___basic_dir
16c24     FD 20 02 F6 | 	mov	local02, result1
16c28     28 FF 9F FD | 	jmp	#LR__1820
16c2c                 | LR__1822
16c2c                 | ' print
16c2c     00 12 06 F6 | 	mov	arg01, #0
16c30     E0 BD B0 FD | 	call	#__system___getiolock_0474
16c34     FD 12 02 F6 | 	mov	arg01, result1
16c38     48 64 B0 FD | 	call	#__system___lockmem
16c3c     00 12 06 F6 | 	mov	arg01, #0
16c40     0A 14 06 F6 | 	mov	arg02, #10
16c44     00 16 06 F6 | 	mov	arg03, #0
16c48     E4 70 B0 FD | 	call	#__system___basic_print_char
16c4c     00 12 06 F6 | 	mov	arg01, #0
16c50     C0 BD B0 FD | 	call	#__system___getiolock_0474
16c54     FD 00 68 FC | 	wrlong	#0, result1
16c58     00 1E 06 F6 | 	mov	local01, #0
16c5c                 | ' return cursor_y
16c5c     66 01 00 FF 
16c60     3B 13 06 F6 | 	mov	arg01, ##@LR__4993
16c64     21 14 06 F6 | 	mov	arg02, #33
16c68     E0 BE B0 FD | 	call	#__system___basic_dir
16c6c     FD 20 02 F6 | 	mov	local02, result1
16c70                 | ' px=0: py=v.getcursory()
16c70                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
16c70                 | ' do while filename <> "" and filename <> nil
16c70                 | LR__1823
16c70     00 22 06 F6 | 	mov	local03, #0
16c74     66 01 00 FF 
16c78     3D 15 06 F6 | 	mov	arg02, ##@LR__4994
16c7c     10 13 02 F6 | 	mov	arg01, local02
16c80     28 64 B0 FD | 	call	#__system___string_cmp
16c84     00 FA 0D F2 | 	cmp	result1, #0 wz
16c88     00 22 26 56 |  if_ne	not	local03, #0
16c8c     00 24 06 F6 | 	mov	local04, #0
16c90     10 13 02 F6 | 	mov	arg01, local02
16c94     00 14 06 F6 | 	mov	arg02, #0
16c98     10 64 B0 FD | 	call	#__system___string_cmp
16c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
16ca0     00 24 26 56 |  if_ne	not	local04, #0
16ca4     12 23 CA F7 | 	test	local03, local04 wz
16ca8     80 01 90 AD |  if_e	jmp	#LR__1828
16cac                 | '   print filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
16cac     00 12 06 F6 | 	mov	arg01, #0
16cb0     60 BD B0 FD | 	call	#__system___getiolock_0474
16cb4     FD 12 02 F6 | 	mov	arg01, result1
16cb8     C8 63 B0 FD | 	call	#__system___lockmem
16cbc     00 12 06 F6 | 	mov	arg01, #0
16cc0     10 15 02 F6 | 	mov	arg02, local02
16cc4     00 16 06 F6 | 	mov	arg03, #0
16cc8     BC 70 B0 FD | 	call	#__system___basic_print_string
16ccc     00 12 06 F6 | 	mov	arg01, #0
16cd0     40 BD B0 FD | 	call	#__system___getiolock_0474
16cd4     FD 00 68 FC | 	wrlong	#0, result1
16cd8     40 1E 06 F1 | 	add	local01, #64
16cdc     0F 13 02 F6 | 	mov	arg01, local01
16ce0     60 4C B0 FD | 	call	#_hg010b_spin2_setcursorx
16ce4     00 1F 56 F2 | 	cmps	local01, #256 wc
16ce8     30 00 90 CD |  if_b	jmp	#LR__1824
16cec     00 1E 06 F6 | 	mov	local01, #0
16cf0     00 12 06 F6 | 	mov	arg01, #0
16cf4     1C BD B0 FD | 	call	#__system___getiolock_0474
16cf8     FD 12 02 F6 | 	mov	arg01, result1
16cfc     84 63 B0 FD | 	call	#__system___lockmem
16d00     00 12 06 F6 | 	mov	arg01, #0
16d04     0A 14 06 F6 | 	mov	arg02, #10
16d08     00 16 06 F6 | 	mov	arg03, #0
16d0c     20 70 B0 FD | 	call	#__system___basic_print_char
16d10     00 12 06 F6 | 	mov	arg01, #0
16d14     FC BC B0 FD | 	call	#__system___getiolock_0474
16d18     FD 00 68 FC | 	wrlong	#0, result1
16d1c                 | LR__1824
16d1c     00 12 06 F6 | 	mov	arg01, #0
16d20     00 14 06 F6 | 	mov	arg02, #0
16d24     24 BE B0 FD | 	call	#__system___basic_dir
16d28     FD 20 02 F6 | 	mov	local02, result1
16d2c                 | '   filename = dir$()      ' continue scan
16d2c                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
16d2c                 | ' return cursor_y
16d2c     3E E4 05 F1 | 	add	objptr, #62
16d30     F2 FA C1 FA | 	rdbyte	result1, objptr
16d34     3E E4 85 F1 | 	sub	objptr, #62
16d38     22 FA 0D F2 | 	cmp	result1, #34 wz
16d3c     30 FF 9F 5D |  if_ne	jmp	#LR__1823
16d40                 | '     print "-----more, press any key";
16d40     00 12 06 F6 | 	mov	arg01, #0
16d44     CC BC B0 FD | 	call	#__system___getiolock_0474
16d48     FD 12 02 F6 | 	mov	arg01, result1
16d4c     34 63 B0 FD | 	call	#__system___lockmem
16d50     66 01 00 FF 
16d54     3E 15 06 F6 | 	mov	arg02, ##@LR__4995
16d58     00 12 06 F6 | 	mov	arg01, #0
16d5c     00 16 06 F6 | 	mov	arg03, #0
16d60     24 70 B0 FD | 	call	#__system___basic_print_string
16d64     00 12 06 F6 | 	mov	arg01, #0
16d68     A8 BC B0 FD | 	call	#__system___getiolock_0474
16d6c     FD 00 68 FC | 	wrlong	#0, result1
16d70                 | '     do 
16d70                 | LR__1825
16d70     38 5B B0 FD | 	call	#_usbnew_spin2_get_key
16d74     00 FA 0D F2 | 	cmp	result1, #0 wz
16d78     F4 FF 9F 5D |  if_ne	jmp	#LR__1825
16d7c                 | '     do
16d7c                 | LR__1826
16d7c     2C 5B B0 FD | 	call	#_usbnew_spin2_get_key
16d80     00 FA 0D F2 | 	cmp	result1, #0 wz
16d84     F4 FF 9F AD |  if_e	jmp	#LR__1826
16d88                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
16d88     79 00 00 FF 
16d8c     D0 E5 05 F1 | 	add	objptr, ##62416
16d90     F2 22 02 FB | 	rdlong	local03, objptr
16d94     79 00 00 FF 
16d98     D0 E5 85 F1 | 	sub	objptr, ##62416
16d9c     01 22 0E F2 | 	cmp	local03, #1 wz
16da0     3C 00 90 5D |  if_ne	jmp	#LR__1827
16da4     7B 00 00 FF 
16da8     74 E4 05 F1 | 	add	objptr, ##63092
16dac     F2 14 02 FB | 	rdlong	arg02, objptr
16db0     04 E4 85 F1 | 	sub	objptr, #4
16db4     F2 1A 02 FB | 	rdlong	arg05, objptr
16db8     07 12 06 F6 | 	mov	arg01, #7
16dbc     56 00 00 FF 
16dc0     44 16 06 F6 | 	mov	arg03, ##44100
16dc4     0C 18 C6 F9 | 	decod	arg04, #12
16dc8     01 1C 66 F6 | 	neg	arg06, #1
16dcc     6F 00 00 FF 
16dd0     A4 E5 85 F1 | 	sub	objptr, ##57252
16dd4     5C 5E B0 FD | 	call	#_audio096_spin2_play
16dd8     0B 00 00 FF 
16ddc     CC E4 85 F1 | 	sub	objptr, ##5836
16de0                 | LR__1827
16de0     00 12 06 F6 | 	mov	arg01, #0
16de4     23 14 06 F6 | 	mov	arg02, #35
16de8     1C 4B B0 FD | 	call	#_hg010b_spin2_setcursorpos
16dec                 | '     position 0,35: print "                             ";: position 4,35  
16dec     00 12 06 F6 | 	mov	arg01, #0
16df0     20 BC B0 FD | 	call	#__system___getiolock_0474
16df4     FD 12 02 F6 | 	mov	arg01, result1
16df8     88 62 B0 FD | 	call	#__system___lockmem
16dfc     66 01 00 FF 
16e00     57 15 06 F6 | 	mov	arg02, ##@LR__4996
16e04     00 12 06 F6 | 	mov	arg01, #0
16e08     00 16 06 F6 | 	mov	arg03, #0
16e0c     78 6F B0 FD | 	call	#__system___basic_print_string
16e10     00 12 06 F6 | 	mov	arg01, #0
16e14     FC BB B0 FD | 	call	#__system___getiolock_0474
16e18     FD 00 68 FC | 	wrlong	#0, result1
16e1c     04 12 06 F6 | 	mov	arg01, #4
16e20     23 14 06 F6 | 	mov	arg02, #35
16e24     E0 4A B0 FD | 	call	#_hg010b_spin2_setcursorpos
16e28     44 FE 9F FD | 	jmp	#LR__1823
16e2c                 | LR__1828
16e2c     A7 F0 03 F6 | 	mov	ptra, fp
16e30     B2 00 A0 FD | 	call	#popregs_
16e34                 | _do_dir_ret
16e34     2D 00 64 FD | 	ret
16e38                 | 
16e38                 | ' 
16e38                 | ' sub do_if
16e38                 | _do_if
16e38     05 4A 05 F6 | 	mov	COUNT_, #5
16e3c     A8 00 A0 FD | 	call	#pushregs_
16e40     68 33 BF FD | 	call	#_pop
16e44     FD 1E 0A F6 | 	mov	local01, result1 wz
16e48     FE 20 02 F6 | 	mov	local02, result2
16e4c     FF 22 02 F6 | 	mov	local03, result3
16e50                 | ' t1=pop()
16e50                 | ' ' if uresult=0, jump over else
16e50                 | ' if t1.result.uresult = 0 then 
16e50     BC 00 90 5D |  if_ne	jmp	#LR__1832
16e54                 | '   for i=lineptr_e to lineptr-1
16e54     6A 00 00 FF 
16e58     70 E4 05 F1 | 	add	objptr, ##54384
16e5c     F2 24 02 FB | 	rdlong	local04, objptr
16e60     04 E4 85 F1 | 	sub	objptr, #4
16e64     F2 26 02 FB | 	rdlong	local05, objptr
16e68     6A 00 00 FF 
16e6c     6C E4 85 F1 | 	sub	objptr, ##54380
16e70                 | LR__1830
16e70     13 25 52 F2 | 	cmps	local04, local05 wc
16e74     78 00 90 3D |  if_ae	jmp	#LR__1831
16e78     12 FF 01 F6 | 	mov	result3, local04
16e7c     01 FE 65 F0 | 	shl	result3, #1
16e80     12 FF 01 F1 | 	add	result3, local04
16e84     02 FE 65 F0 | 	shl	result3, #2
16e88     67 00 00 FF 
16e8c     6C E4 05 F1 | 	add	objptr, ##52844
16e90     F2 FE 01 F1 | 	add	result3, objptr
16e94     FF 1E 02 FB | 	rdlong	local01, result3
16e98     04 FE 05 F1 | 	add	result3, #4
16e9c     FF FC 01 FB | 	rdlong	result2, result3
16ea0     12 FF 01 F6 | 	mov	result3, local04
16ea4     01 FE 65 F0 | 	shl	result3, #1
16ea8     12 FF 01 F1 | 	add	result3, local04
16eac     02 FE 65 F0 | 	shl	result3, #2
16eb0     F2 FE 01 F1 | 	add	result3, objptr
16eb4     08 FE 05 F1 | 	add	result3, #8
16eb8     FF FE 01 FB | 	rdlong	result3, result3
16ebc     FE 20 02 F6 | 	mov	local02, result2
16ec0     FF 22 02 F6 | 	mov	local03, result3
16ec4                 | '     t1=compiledline(i)
16ec4                 | '     if t1.result_type=token_else then lineptr_e=i : return
16ec4     5A 22 0E F2 | 	cmp	local03, #90 wz
16ec8     67 00 00 FF 
16ecc     6C E4 85 F1 | 	sub	objptr, ##52844
16ed0     6A 00 00 AF 
16ed4     70 E4 05 A1 |  if_e	add	objptr, ##54384
16ed8     F2 24 62 AC |  if_e	wrlong	local04, objptr
16edc     6A 00 00 AF 
16ee0     70 E4 85 A1 |  if_e	sub	objptr, ##54384
16ee4     28 00 90 AD |  if_e	jmp	#LR__1833
16ee8     01 24 06 F1 | 	add	local04, #1
16eec     80 FF 9F FD | 	jmp	#LR__1830
16ef0                 | LR__1831
16ef0     6A 00 00 FF 
16ef4     6C E4 05 F1 | 	add	objptr, ##54380
16ef8     F2 26 02 FB | 	rdlong	local05, objptr
16efc     01 26 86 F1 | 	sub	local05, #1
16f00     04 E4 05 F1 | 	add	objptr, #4
16f04     F2 26 62 FC | 	wrlong	local05, objptr
16f08     6A 00 00 FF 
16f0c     70 E4 85 F1 | 	sub	objptr, ##54384
16f10                 | LR__1832
16f10                 | LR__1833
16f10     A7 F0 03 F6 | 	mov	ptra, fp
16f14     B2 00 A0 FD | 	call	#popregs_
16f18                 | _do_if_ret
16f18     2D 00 64 FD | 	ret
16f1c                 | 
16f1c                 | ' 
16f1c                 | ' sub do_else
16f1c                 | _do_else
16f1c     6A 00 00 FF 
16f20     6C E4 05 F1 | 	add	objptr, ##54380
16f24     F2 00 02 FB | 	rdlong	_var01, objptr
16f28     01 00 86 F1 | 	sub	_var01, #1
16f2c     04 E4 05 F1 | 	add	objptr, #4
16f30     F2 00 62 FC | 	wrlong	_var01, objptr
16f34     6A 00 00 FF 
16f38     70 E4 85 F1 | 	sub	objptr, ##54384
16f3c                 | _do_else_ret
16f3c     2D 00 64 FD | 	ret
16f40                 | 
16f40                 | ' 
16f40                 | ' sub do_rad
16f40                 | _do_rad
16f40     7B 00 00 FF 
16f44     78 E4 05 F1 | 	add	objptr, ##63096
16f48     00 C0 9F FF 
16f4c     F2 00 68 FC | 	wrlong	##1065353216, objptr
16f50     04 E4 05 F1 | 	add	objptr, #4
16f54     00 C0 9F FF 
16f58     F2 00 68 FC | 	wrlong	##1065353216, objptr
16f5c     7B 00 00 FF 
16f60     7C E4 85 F1 | 	sub	objptr, ##63100
16f64                 | _do_rad_ret
16f64     2D 00 64 FD | 	ret
16f68                 | 
16f68                 | ' 
16f68                 | ' sub do_deg
16f68                 | _do_deg
16f68     7B 00 00 FF 
16f6c     78 E4 05 F1 | 	add	objptr, ##63096
16f70     7D 47 9E FF 
16f74     F2 6A 68 FC | 	wrlong	##1016003125, objptr
16f78     04 E4 05 F1 | 	add	objptr, #4
16f7c     97 32 A1 FF 
16f80     F2 C2 69 FC | 	wrlong	##1113927393, objptr
16f84     7B 00 00 FF 
16f88     7C E4 85 F1 | 	sub	objptr, ##63100
16f8c                 | _do_deg_ret
16f8c     2D 00 64 FD | 	ret
16f90                 | 
16f90                 | ' 
16f90                 | ' sub do_int
16f90                 | _do_int
16f90     00 4A 05 F6 | 	mov	COUNT_, #0
16f94     A8 00 A0 FD | 	call	#pushregs_
16f98     0C F0 07 F1 | 	add	ptra, #12
16f9c     0C 32 BF FD | 	call	#_pop
16fa0     A7 FA 61 FC | 	wrlong	result1, fp
16fa4     04 4E 05 F1 | 	add	fp, #4
16fa8     A7 FC 61 FC | 	wrlong	result2, fp
16fac     04 4E 05 F1 | 	add	fp, #4
16fb0     A7 FE 61 FC | 	wrlong	result3, fp
16fb4     08 4E 85 F1 | 	sub	fp, #8
16fb8     A7 12 02 F6 | 	mov	arg01, fp
16fbc     44 BE BF FD | 	call	#_converttoint
16fc0     A7 FA 61 FC | 	wrlong	result1, fp
16fc4     08 4E 05 F1 | 	add	fp, #8
16fc8     A7 38 68 FC | 	wrlong	#28, fp
16fcc     08 4E 85 F1 | 	sub	fp, #8
16fd0     A7 12 02 F6 | 	mov	arg01, fp
16fd4     6C 32 BF FD | 	call	#_push
16fd8     A7 F0 03 F6 | 	mov	ptra, fp
16fdc     B2 00 A0 FD | 	call	#popregs_
16fe0                 | _do_int_ret
16fe0     2D 00 64 FD | 	ret
16fe4                 | 
16fe4                 | ' 
16fe4                 | ' sub do_nothing
16fe4                 | _do_nothing
16fe4                 | _do_nothing_ret
16fe4     2D 00 64 FD | 	ret
16fe8                 | 
16fe8                 | ' 
16fe8                 | ' sub do_brun
16fe8                 | _do_brun
16fe8     08 4A 05 F6 | 	mov	COUNT_, #8
16fec     A8 00 A0 FD | 	call	#pushregs_
16ff0     B8 31 BF FD | 	call	#_pop
16ff4     FE 1A 02 F6 | 	mov	arg05, result2
16ff8     FF 18 02 F6 | 	mov	arg04, result3
16ffc     FD 1E 02 F6 | 	mov	local01, result1
17000     0D 21 02 F6 | 	mov	local02, arg05
17004     0C 23 02 F6 | 	mov	local03, arg04
17008                 | ' 
17008                 | ' t1=pop() 
17008                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
17008     2B 22 0E F2 | 	cmp	local03, #43 wz
1700c     10 00 90 5D |  if_ne	jmp	#LR__1840
17010     0F 13 02 F6 | 	mov	arg01, local01
17014     3C 74 BF FD | 	call	#_convertstring
17018     FD 1E 02 F6 | 	mov	local01, result1
1701c     1F 22 06 F6 | 	mov	local03, #31
17020                 | LR__1840
17020                 | ' if t1.result_type=result_string then
17020     1F 22 0E F2 | 	cmp	local03, #31 wz
17024     EC 01 90 5D |  if_ne	jmp	#LR__1844
17028     0F 25 02 F6 | 	mov	local04, local01
1702c                 | '   filename=t1.result.sresult
1702c                 | '   if left$(filename,1)="/" then 
1702c     12 13 02 F6 | 	mov	arg01, local04
17030     01 14 06 F6 | 	mov	arg02, #1
17034     90 80 B0 FD | 	call	#__system__Left_S
17038     FD 12 02 F6 | 	mov	arg01, result1
1703c     66 01 00 FF 
17040     75 15 06 F6 | 	mov	arg02, ##@LR__4997
17044     64 60 B0 FD | 	call	#__system___string_cmp
17048     00 FA 0D F2 | 	cmp	result1, #0 wz
1704c     12 27 02 A6 |  if_e	mov	local05, local04
17050     14 00 90 AD |  if_e	jmp	#LR__1841
17054     66 01 00 FF 
17058     77 13 06 F6 | 	mov	arg01, ##@LR__4998
1705c     12 15 02 F6 | 	mov	arg02, local04
17060     7C 60 B0 FD | 	call	#__system___string_concat
17064     FD 26 02 F6 | 	mov	local05, result1
17068                 | LR__1841
17068                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
17068                 | '   open fullfilename for input as #9
17068     09 12 06 F6 | 	mov	arg01, #9
1706c     13 15 02 F6 | 	mov	arg02, local05
17070     00 16 06 F6 | 	mov	arg03, #0
17074     0C 6C B0 FD | 	call	#__system___basic_open_string
17078     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1707c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
17080     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
17084     FD 28 0A F6 | 	mov	local06, result1 wz
17088                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
17088     8C 00 90 AD |  if_e	jmp	#LR__1842
1708c     00 12 06 F6 | 	mov	arg01, #0
17090     80 B9 B0 FD | 	call	#__system___getiolock_0474
17094     FD 12 02 F6 | 	mov	arg01, result1
17098     E8 5F B0 FD | 	call	#__system___lockmem
1709c     66 01 00 FF 
170a0     80 15 06 F6 | 	mov	arg02, ##@LR__4999
170a4     00 12 06 F6 | 	mov	arg01, #0
170a8     00 16 06 F6 | 	mov	arg03, #0
170ac     D8 6C B0 FD | 	call	#__system___basic_print_string
170b0     00 12 06 F6 | 	mov	arg01, #0
170b4     14 15 02 F6 | 	mov	arg02, local06
170b8     00 16 06 F6 | 	mov	arg03, #0
170bc     0A 18 06 F6 | 	mov	arg04, #10
170c0     08 6D B0 FD | 	call	#__system___basic_print_integer
170c4     66 01 00 FF 
170c8     8E 15 06 F6 | 	mov	arg02, ##@LR__5000
170cc     00 12 06 F6 | 	mov	arg01, #0
170d0     00 16 06 F6 | 	mov	arg03, #0
170d4     B0 6C B0 FD | 	call	#__system___basic_print_string
170d8     14 13 02 F6 | 	mov	arg01, local06
170dc     34 86 B0 FD | 	call	#__system___strerror
170e0     FD 14 02 F6 | 	mov	arg02, result1
170e4     00 12 06 F6 | 	mov	arg01, #0
170e8     00 16 06 F6 | 	mov	arg03, #0
170ec     98 6C B0 FD | 	call	#__system___basic_print_string
170f0     00 12 06 F6 | 	mov	arg01, #0
170f4     0A 14 06 F6 | 	mov	arg02, #10
170f8     00 16 06 F6 | 	mov	arg03, #0
170fc     30 6C B0 FD | 	call	#__system___basic_print_char
17100     00 12 06 F6 | 	mov	arg01, #0
17104     0C B9 B0 FD | 	call	#__system___getiolock_0474
17108     FD 00 68 FC | 	wrlong	#0, result1
1710c     09 12 06 F6 | 	mov	arg01, #9
17110     34 AF B0 FD | 	call	#__system__close
17114     FC 00 90 FD | 	jmp	#LR__1845
17118                 | LR__1842
17118     01 2A 06 F6 | 	mov	local07, #1
1711c     00 2C 06 F6 | 	mov	local08, #0
17120                 | '   do
17120                 | LR__1843
17120                 | '     get #9,pos,block(0),1024,r : pos+=r	
17120     77 00 00 FF 
17124     9C E5 05 F1 | 	add	objptr, ##61340
17128     F2 16 02 F6 | 	mov	arg03, objptr
1712c     77 00 00 FF 
17130     9C E5 85 F1 | 	sub	objptr, ##61340
17134     09 12 06 F6 | 	mov	arg01, #9
17138     15 15 02 F6 | 	mov	arg02, local07
1713c     0A 18 C6 F9 | 	decod	arg04, #10
17140     01 1A 06 F6 | 	mov	arg05, #1
17144     50 6D B0 FD | 	call	#__system___basic_get
17148     FD 28 02 F6 | 	mov	local06, result1
1714c     FD 2A 02 F1 | 	add	local07, result1
17150     77 00 00 FF 
17154     9C E5 05 F1 | 	add	objptr, ##61340
17158     F2 12 02 F6 | 	mov	arg01, objptr
1715c     16 15 02 F6 | 	mov	arg02, local08
17160     0A 16 C6 F9 | 	decod	arg03, #10
17164     6C 00 00 FF 
17168     D0 E4 85 F1 | 	sub	objptr, ##55504
1716c     AC 53 B0 FD | 	call	#_psram_spin2_write
17170     0B 00 00 FF 
17174     CC E4 85 F1 | 	sub	objptr, ##5836
17178     14 2D 02 F1 | 	add	local08, local06
1717c     02 00 00 FF 
17180     00 28 0E F2 | 	cmp	local06, ##1024 wz
17184     E0 03 00 AF 
17188     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
1718c     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1843
17190     56 00 00 FF 
17194     EC E5 05 F1 | 	add	objptr, ##44524
17198     F2 12 02 FB | 	rdlong	arg01, objptr
1719c     03 12 62 FD | 	cogstop	arg01
171a0     04 E4 05 F1 | 	add	objptr, #4
171a4     F2 12 02 FB | 	rdlong	arg01, objptr
171a8     03 12 62 FD | 	cogstop	arg01
171ac     04 E4 05 F1 | 	add	objptr, #4
171b0     F2 12 02 FB | 	rdlong	arg01, objptr
171b4     03 12 62 FD | 	cogstop	arg01
171b8     22 00 00 FF 
171bc     E0 E5 05 F1 | 	add	objptr, ##17888
171c0     F2 12 02 FB | 	rdlong	arg01, objptr
171c4     03 12 62 FD | 	cogstop	arg01
171c8     18 00 00 FF 
171cc     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
171d0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
171d4     18 00 00 FF 
171d8     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
171dc     22 00 00 FF 
171e0     D8 E5 85 F1 | 	sub	objptr, ##17880
171e4     1E 2C 06 F6 | 	mov	local08, #30
171e8     28 E4 61 FD | 	setq	objptr
171ec     0A 2D F2 FC | 	coginit	local08, arg02 wc
171f0     01 2C 66 C6 |  if_b	neg	local08, #1
171f4     24 00 00 FF 
171f8     20 E5 05 F1 | 	add	objptr, ##18720
171fc     F2 2C 62 FC | 	wrlong	local08, objptr
17200     7B 00 00 FF 
17204     1C E5 85 F1 | 	sub	objptr, ##63260
17208     00 12 06 F6 | 	mov	arg01, #0
1720c     01 12 62 FD | 	cogid	arg01
17210     03 12 62 FD | 	cogstop	arg01
17214                 | LR__1844
17214                 | LR__1845
17214     A7 F0 03 F6 | 	mov	ptra, fp
17218     B2 00 A0 FD | 	call	#popregs_
1721c                 | _do_brun_ret
1721c     2D 00 64 FD | 	ret
17220                 | 
17220                 | ' 
17220                 | ' 
17220                 | ' sub do_mouse
17220                 | _do_mouse
17220     88 2F BF FD | 	call	#_pop
17224     00 FA 4D F2 | 	cmps	result1, #0 wz
17228                 | ' t1=pop()
17228                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
17228     14 00 90 5D |  if_ne	jmp	#LR__1850
1722c     10 12 06 F6 | 	mov	arg01, #16
17230     00 14 06 F6 | 	mov	arg02, #0
17234     00 16 06 F6 | 	mov	arg03, #0
17238     BC 3A B0 FD | 	call	#_hg010b_spin2_setspritesize
1723c     10 00 90 FD | 	jmp	#LR__1851
17240                 | LR__1850
17240     10 12 06 F6 | 	mov	arg01, #16
17244     20 14 06 F6 | 	mov	arg02, #32
17248     20 16 06 F6 | 	mov	arg03, #32
1724c     A8 3A B0 FD | 	call	#_hg010b_spin2_setspritesize
17250                 | LR__1851
17250                 | _do_mouse_ret
17250     2D 00 64 FD | 	ret
17254                 | 
17254                 | ' 
17254                 | ' sub do_cursor
17254                 | _do_cursor
17254     54 2F BF FD | 	call	#_pop
17258     00 FA 4D F2 | 	cmps	result1, #0 wz
1725c                 | ' t1=pop()
1725c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
1725c     14 00 90 5D |  if_ne	jmp	#LR__1860
17260     11 12 06 F6 | 	mov	arg01, #17
17264     00 14 06 F6 | 	mov	arg02, #0
17268     00 16 06 F6 | 	mov	arg03, #0
1726c     88 3A B0 FD | 	call	#_hg010b_spin2_setspritesize
17270     10 00 90 FD | 	jmp	#LR__1861
17274                 | LR__1860
17274     11 12 06 F6 | 	mov	arg01, #17
17278     08 14 06 F6 | 	mov	arg02, #8
1727c     10 16 06 F6 | 	mov	arg03, #16
17280     74 3A B0 FD | 	call	#_hg010b_spin2_setspritesize
17284                 | LR__1861
17284                 | _do_cursor_ret
17284     2D 00 64 FD | 	ret
17288                 | 
17288                 | ' 
17288                 | ' 
17288                 | ' sub do_click
17288                 | _do_click
17288     20 2F BF FD | 	call	#_pop
1728c     00 FA 4D F2 | 	cmps	result1, #0 wz
17290                 | ' t1=pop()
17290                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
17290     79 00 00 AF 
17294     D0 E5 05 A1 |  if_e	add	objptr, ##62416
17298     F2 00 68 AC |  if_e	wrlong	#0, objptr
1729c     79 00 00 FF 
172a0     D0 E5 C5 F3 | 	sumz	objptr, ##62416
172a4     F2 02 68 5C |  if_ne	wrlong	#1, objptr
172a8     79 00 00 5F 
172ac     D0 E5 85 51 |  if_ne	sub	objptr, ##62416
172b0                 | _do_click_ret
172b0     2D 00 64 FD | 	ret
172b4                 | 
172b4                 | ' 
172b4                 | ' 
172b4                 | ' sub do_beep
172b4                 | _do_beep
172b4     02 4A 05 F6 | 	mov	COUNT_, #2
172b8     A8 00 A0 FD | 	call	#pushregs_
172bc     20 F0 07 F1 | 	add	ptra, #32
172c0     E8 2E BF FD | 	call	#_pop
172c4     FD 1E 02 F6 | 	mov	local01, result1
172c8     FE 1C 02 F6 | 	mov	arg06, result2
172cc     FF 20 02 F6 | 	mov	local02, result3
172d0     0C 4E 05 F1 | 	add	fp, #12
172d4     A7 1E 62 FC | 	wrlong	local01, fp
172d8     04 4E 05 F1 | 	add	fp, #4
172dc     A7 1C 62 FC | 	wrlong	arg06, fp
172e0     04 4E 05 F1 | 	add	fp, #4
172e4     A7 20 62 FC | 	wrlong	local02, fp
172e8     14 4E 85 F1 | 	sub	fp, #20
172ec     BC 2E BF FD | 	call	#_pop
172f0     A7 FA 61 FC | 	wrlong	result1, fp
172f4     04 4E 05 F1 | 	add	fp, #4
172f8     A7 FC 61 FC | 	wrlong	result2, fp
172fc     04 4E 05 F1 | 	add	fp, #4
17300     A7 FE 61 FC | 	wrlong	result3, fp
17304                 | ' 
17304                 | ' t2=pop()
17304                 | ' t1=pop()
17304                 | ' 
17304                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
17304     08 4E 85 F1 | 	sub	fp, #8
17308     1C FE 0D F2 | 	cmp	result3, #28 wz
1730c     08 4E 05 51 |  if_ne	add	fp, #8
17310     A7 20 02 5B |  if_ne	rdlong	local02, fp
17314     08 4E 85 51 |  if_ne	sub	fp, #8
17318     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
1731c     A7 1E 02 AB |  if_e	rdlong	local01, fp
17320     18 4E 05 A1 |  if_e	add	fp, #24
17324     A7 1E 62 AC |  if_e	wrlong	local01, fp
17328     18 4E 85 A1 |  if_e	sub	fp, #24
1732c     14 00 90 AD |  if_e	jmp	#LR__1870
17330     A7 12 02 F6 | 	mov	arg01, fp
17334     CC BA BF FD | 	call	#_converttoint
17338     18 4E 05 F1 | 	add	fp, #24
1733c     A7 FA 61 FC | 	wrlong	result1, fp
17340     18 4E 85 F1 | 	sub	fp, #24
17344                 | LR__1870
17344     1C 4E 05 F1 | 	add	fp, #28
17348     A7 FE 48 FC | 	wrbyte	#127, fp
1734c     01 4E 05 F1 | 	add	fp, #1
17350     A7 00 49 FC | 	wrbyte	#128, fp
17354     01 4E 85 F1 | 	sub	fp, #1
17358     A7 14 02 F6 | 	mov	arg02, fp
1735c     04 4E 85 F1 | 	sub	fp, #4
17360     A7 16 02 FB | 	rdlong	arg03, fp
17364     18 4E 85 F1 | 	sub	fp, #24
17368     01 16 66 F0 | 	shl	arg03, #1
1736c     07 12 06 F6 | 	mov	arg01, #7
17370     0E 18 C6 F9 | 	decod	arg04, #14
17374     02 1A 06 F6 | 	mov	arg05, #2
17378     00 1C 06 F6 | 	mov	arg06, #0
1737c     0B 00 00 FF 
17380     CC E4 05 F1 | 	add	objptr, ##5836
17384     48 59 B0 FD | 	call	#_audio096_spin2_play8
17388     0B 00 00 FF 
1738c     CC E4 85 F1 | 	sub	objptr, ##5836
17390     0C 4E 05 F1 | 	add	fp, #12
17394     A7 12 02 F6 | 	mov	arg01, fp
17398     0C 4E 85 F1 | 	sub	fp, #12
1739c     A4 2E BF FD | 	call	#_push
173a0     B8 F5 BF FD | 	call	#_do_waitms
173a4     07 12 06 F6 | 	mov	arg01, #7
173a8     0B 00 00 FF 
173ac     CC E4 05 F1 | 	add	objptr, ##5836
173b0     D0 59 B0 FD | 	call	#_audio096_spin2_stop
173b4     0B 00 00 FF 
173b8     CC E4 85 F1 | 	sub	objptr, ##5836
173bc     A7 F0 03 F6 | 	mov	ptra, fp
173c0     B2 00 A0 FD | 	call	#popregs_
173c4                 | _do_beep_ret
173c4     2D 00 64 FD | 	ret
173c8                 | 
173c8                 | ' 
173c8                 | ' sub do_no_command
173c8                 | _do_no_command
173c8     17 12 06 F6 | 	mov	arg01, #23
173cc     58 1C B0 FD | 	call	#_printerror
173d0                 | _do_no_command_ret
173d0     2D 00 64 FD | 	ret
173d4                 | 
173d4                 | ' 
173d4                 | ' sub do_negative
173d4                 | _do_negative
173d4     02 4A 05 F6 | 	mov	COUNT_, #2
173d8     A8 00 A0 FD | 	call	#pushregs_
173dc     0C F0 07 F1 | 	add	ptra, #12
173e0     C8 2D BF FD | 	call	#_pop
173e4     FF 1E 02 F6 | 	mov	local01, result3
173e8     A7 FA 61 FC | 	wrlong	result1, fp
173ec     04 4E 05 F1 | 	add	fp, #4
173f0     A7 FC 61 FC | 	wrlong	result2, fp
173f4     04 4E 05 F1 | 	add	fp, #4
173f8     A7 1E 62 FC | 	wrlong	local01, fp
173fc                 | ' t1=pop()
173fc                 | ' if t1.result_type=result_int then 
173fc     08 4E 85 F1 | 	sub	fp, #8
17400     1C 1E 0E F2 | 	cmp	local01, #28 wz
17404     A7 20 02 AB |  if_e	rdlong	local02, fp
17408     10 1F 62 A6 |  if_e	neg	local01, local02
1740c     A7 1E 62 AC |  if_e	wrlong	local01, fp
17410     5C 00 90 AD |  if_e	jmp	#LR__1882
17414     08 4E 05 F1 | 	add	fp, #8
17418     A7 1E 02 FB | 	rdlong	local01, fp
1741c     08 4E 85 F1 | 	sub	fp, #8
17420     1D 1E 0E F2 | 	cmp	local01, #29 wz
17424     1C 00 90 5D |  if_ne	jmp	#LR__1880
17428     A7 20 02 FB | 	rdlong	local02, fp
1742c     10 1F 62 F6 | 	neg	local01, local02
17430     A7 1E 62 FC | 	wrlong	local01, fp
17434     08 4E 05 F1 | 	add	fp, #8
17438     A7 38 68 FC | 	wrlong	#28, fp
1743c     08 4E 85 F1 | 	sub	fp, #8
17440     2C 00 90 FD | 	jmp	#LR__1881
17444                 | LR__1880
17444     08 4E 05 F1 | 	add	fp, #8
17448     A7 1E 02 FB | 	rdlong	local01, fp
1744c     08 4E 85 F1 | 	sub	fp, #8
17450     1E 1E 0E F2 | 	cmp	local01, #30 wz
17454     A7 FA 01 AB |  if_e	rdlong	result1, fp
17458     1F FA E5 A4 |  if_e	bitnot	result1, #31
1745c     A7 FA 61 AC |  if_e	wrlong	result1, fp
17460     08 4E 05 51 |  if_ne	add	fp, #8
17464     A7 FE 69 5C |  if_ne	wrlong	#255, fp
17468     08 4E 85 51 |  if_ne	sub	fp, #8
1746c     A7 50 68 5C |  if_ne	wrlong	#40, fp
17470                 | LR__1881
17470                 | LR__1882
17470     A7 12 02 F6 | 	mov	arg01, fp
17474     CC 2D BF FD | 	call	#_push
17478     A7 F0 03 F6 | 	mov	ptra, fp
1747c     B2 00 A0 FD | 	call	#popregs_
17480                 | _do_negative_ret
17480     2D 00 64 FD | 	ret
17484                 | 
17484                 | ' 
17484                 | ' sub do_abs
17484                 | _do_abs
17484     01 4A 05 F6 | 	mov	COUNT_, #1
17488     A8 00 A0 FD | 	call	#pushregs_
1748c     0C F0 07 F1 | 	add	ptra, #12
17490     18 2D BF FD | 	call	#_pop
17494     FF 1E 02 F6 | 	mov	local01, result3
17498     A7 FA 61 FC | 	wrlong	result1, fp
1749c     04 4E 05 F1 | 	add	fp, #4
174a0     A7 FC 61 FC | 	wrlong	result2, fp
174a4     04 4E 05 F1 | 	add	fp, #4
174a8     A7 1E 62 FC | 	wrlong	local01, fp
174ac                 | ' t1=pop()
174ac                 | ' if t1.result_type=result_int then 
174ac     08 4E 85 F1 | 	sub	fp, #8
174b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
174b4     A7 12 02 AB |  if_e	rdlong	arg01, fp
174b8     09 1F 42 A6 |  if_e	abs	local01, arg01
174bc     A7 1E 62 AC |  if_e	wrlong	local01, fp
174c0     2C 00 90 AD |  if_e	jmp	#LR__1890
174c4     08 4E 05 F1 | 	add	fp, #8
174c8     A7 1E 02 FB | 	rdlong	local01, fp
174cc     08 4E 85 F1 | 	sub	fp, #8
174d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
174d4     A7 FA 01 AB |  if_e	rdlong	result1, fp
174d8     1F FA 05 A4 |  if_e	bitl	result1, #31
174dc     A7 FA 61 AC |  if_e	wrlong	result1, fp
174e0     08 4E 05 51 |  if_ne	add	fp, #8
174e4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
174e8     08 4E 85 51 |  if_ne	sub	fp, #8
174ec     A7 50 68 5C |  if_ne	wrlong	#40, fp
174f0                 | LR__1890
174f0     A7 12 02 F6 | 	mov	arg01, fp
174f4     4C 2D BF FD | 	call	#_push
174f8     A7 F0 03 F6 | 	mov	ptra, fp
174fc     B2 00 A0 FD | 	call	#popregs_
17500                 | _do_abs_ret
17500     2D 00 64 FD | 	ret
17504                 | 
17504                 | ' 
17504                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
17504                 | ' 
17504                 | ' ''----------------------------------------------------------------------------------------------------
17504                 | ' ''------------------ Initialization procedures -------------------------------------------------------
17504                 | ' ''----------------------------------------------------------------------------------------------------
17504                 | ' 
17504                 | ' ''--------------------------- Command function pointers
17504                 | ' 
17504                 | ' sub init_commands
17504                 | _init_commands
17504                 | ' 
17504                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
17504     00 00 06 F6 | 	mov	_var01, #0
17508     97 16 48 FB | 	callpa	#(@LR__1901-@LR__1900)>>2,fcache_load_ptr_
1750c                 | LR__1900
1750c     00 FB 01 F6 | 	mov	result1, _var01
17510     02 FA 65 F0 | 	shl	result1, #2
17514     63 00 00 FF 
17518     50 E4 05 F1 | 	add	objptr, ##50768
1751c     F2 FA 01 F1 | 	add	result1, objptr
17520     63 00 00 FF 
17524     50 E4 85 F1 | 	sub	objptr, ##50768
17528     FD E4 61 FC | 	wrlong	objptr, result1
1752c     01 00 06 F1 | 	add	_var01, #1
17530     00 01 56 F2 | 	cmps	_var01, #256 wc
17534     D4 FF 9F CD |  if_b	jmp	#LR__1900
17538                 | LR__1901
17538     F2 FA 01 F6 | 	mov	result1, objptr
1753c     14 FA 25 F4 | 	bith	result1, #20
17540     63 00 00 FF 
17544     54 E4 05 F1 | 	add	objptr, ##50772
17548     F2 FA 61 FC | 	wrlong	result1, objptr
1754c     63 00 00 FF 
17550     54 E4 85 F1 | 	sub	objptr, ##50772
17554     F2 FA 01 F6 | 	mov	result1, objptr
17558     15 FA 25 F4 | 	bith	result1, #21
1755c     63 00 00 FF 
17560     58 E4 05 F1 | 	add	objptr, ##50776
17564     F2 FA 61 FC | 	wrlong	result1, objptr
17568     63 00 00 FF 
1756c     58 E4 85 F1 | 	sub	objptr, ##50776
17570     F2 FA 01 F6 | 	mov	result1, objptr
17574     34 FA 25 F4 | 	bith	result1, #52
17578     63 00 00 FF 
1757c     5C E4 05 F1 | 	add	objptr, ##50780
17580     F2 FA 61 FC | 	wrlong	result1, objptr
17584     63 00 00 FF 
17588     5C E4 85 F1 | 	sub	objptr, ##50780
1758c     F2 FA 01 F6 | 	mov	result1, objptr
17590     16 FA 25 F4 | 	bith	result1, #22
17594     63 00 00 FF 
17598     64 E4 05 F1 | 	add	objptr, ##50788
1759c     F2 FA 61 FC | 	wrlong	result1, objptr
175a0     63 00 00 FF 
175a4     64 E4 85 F1 | 	sub	objptr, ##50788
175a8     F2 FA 01 F6 | 	mov	result1, objptr
175ac     00 28 00 FF 
175b0     00 FA 45 F5 | 	or	result1, ##5242880
175b4     63 00 00 FF 
175b8     68 E4 05 F1 | 	add	objptr, ##50792
175bc     F2 FA 61 FC | 	wrlong	result1, objptr
175c0     63 00 00 FF 
175c4     68 E4 85 F1 | 	sub	objptr, ##50792
175c8     F2 FA 01 F6 | 	mov	result1, objptr
175cc     35 FA 25 F4 | 	bith	result1, #53
175d0     63 00 00 FF 
175d4     6C E4 05 F1 | 	add	objptr, ##50796
175d8     F2 FA 61 FC | 	wrlong	result1, objptr
175dc     63 00 00 FF 
175e0     6C E4 85 F1 | 	sub	objptr, ##50796
175e4     F2 FA 01 F6 | 	mov	result1, objptr
175e8     54 FA 25 F4 | 	bith	result1, #84
175ec     63 00 00 FF 
175f0     70 E4 05 F1 | 	add	objptr, ##50800
175f4     F2 FA 61 FC | 	wrlong	result1, objptr
175f8     63 00 00 FF 
175fc     70 E4 85 F1 | 	sub	objptr, ##50800
17600     F2 FA 01 F6 | 	mov	result1, objptr
17604     17 FA 25 F4 | 	bith	result1, #23
17608     63 00 00 FF 
1760c     74 E4 05 F1 | 	add	objptr, ##50804
17610     F2 FA 61 FC | 	wrlong	result1, objptr
17614     63 00 00 FF 
17618     74 E4 85 F1 | 	sub	objptr, ##50804
1761c     F2 FA 01 F6 | 	mov	result1, objptr
17620     00 48 00 FF 
17624     00 FA 45 F5 | 	or	result1, ##9437184
17628     63 00 00 FF 
1762c     78 E4 05 F1 | 	add	objptr, ##50808
17630     F2 FA 61 FC | 	wrlong	result1, objptr
17634     63 00 00 FF 
17638     78 E4 85 F1 | 	sub	objptr, ##50808
1763c     F2 FA 01 F6 | 	mov	result1, objptr
17640     00 50 00 FF 
17644     00 FA 45 F5 | 	or	result1, ##10485760
17648     63 00 00 FF 
1764c     7C E4 05 F1 | 	add	objptr, ##50812
17650     F2 FA 61 FC | 	wrlong	result1, objptr
17654     63 00 00 FF 
17658     7C E4 85 F1 | 	sub	objptr, ##50812
1765c     F2 FA 01 F6 | 	mov	result1, objptr
17660     00 58 00 FF 
17664     00 FA 45 F5 | 	or	result1, ##11534336
17668     63 00 00 FF 
1766c     80 E4 05 F1 | 	add	objptr, ##50816
17670     F2 FA 61 FC | 	wrlong	result1, objptr
17674     63 00 00 FF 
17678     80 E4 85 F1 | 	sub	objptr, ##50816
1767c     F2 FA 01 F6 | 	mov	result1, objptr
17680     36 FA 25 F4 | 	bith	result1, #54
17684     63 00 00 FF 
17688     94 E4 05 F1 | 	add	objptr, ##50836
1768c     F2 FA 61 FC | 	wrlong	result1, objptr
17690     63 00 00 FF 
17694     94 E4 85 F1 | 	sub	objptr, ##50836
17698     F2 FA 01 F6 | 	mov	result1, objptr
1769c     00 68 00 FF 
176a0     00 FA 45 F5 | 	or	result1, ##13631488
176a4     63 00 00 FF 
176a8     C4 E4 05 F1 | 	add	objptr, ##50884
176ac     F2 FA 61 FC | 	wrlong	result1, objptr
176b0     63 00 00 FF 
176b4     C4 E4 85 F1 | 	sub	objptr, ##50884
176b8     F2 FA 01 F6 | 	mov	result1, objptr
176bc     00 68 00 FF 
176c0     00 FA 45 F5 | 	or	result1, ##13631488
176c4     63 00 00 FF 
176c8     C0 E4 05 F1 | 	add	objptr, ##50880
176cc     F2 FA 61 FC | 	wrlong	result1, objptr
176d0     63 00 00 FF 
176d4     C0 E4 85 F1 | 	sub	objptr, ##50880
176d8     F2 FA 01 F6 | 	mov	result1, objptr
176dc     00 68 00 FF 
176e0     00 FA 45 F5 | 	or	result1, ##13631488
176e4     63 00 00 FF 
176e8     C8 E4 05 F1 | 	add	objptr, ##50888
176ec     F2 FA 61 FC | 	wrlong	result1, objptr
176f0     63 00 00 FF 
176f4     C8 E4 85 F1 | 	sub	objptr, ##50888
176f8     F2 FA 01 F6 | 	mov	result1, objptr
176fc     00 68 00 FF 
17700     00 FA 45 F5 | 	or	result1, ##13631488
17704     63 00 00 FF 
17708     CC E4 05 F1 | 	add	objptr, ##50892
1770c     F2 FA 61 FC | 	wrlong	result1, objptr
17710     63 00 00 FF 
17714     CC E4 85 F1 | 	sub	objptr, ##50892
17718     F2 FA 01 F6 | 	mov	result1, objptr
1771c     00 68 00 FF 
17720     00 FA 45 F5 | 	or	result1, ##13631488
17724     63 00 00 FF 
17728     FC E4 05 F1 | 	add	objptr, ##50940
1772c     F2 FA 61 FC | 	wrlong	result1, objptr
17730     63 00 00 FF 
17734     FC E4 85 F1 | 	sub	objptr, ##50940
17738     F2 FA 01 F6 | 	mov	result1, objptr
1773c     55 FA 25 F4 | 	bith	result1, #85
17740     63 00 00 FF 
17744     AC E4 05 F1 | 	add	objptr, ##50860
17748     F2 FA 61 FC | 	wrlong	result1, objptr
1774c     63 00 00 FF 
17750     AC E4 85 F1 | 	sub	objptr, ##50860
17754     F2 FA 01 F6 | 	mov	result1, objptr
17758     00 68 00 FF 
1775c     00 FA 45 F5 | 	or	result1, ##13631488
17760     63 00 00 FF 
17764     D0 E4 05 F1 | 	add	objptr, ##50896
17768     F2 FA 61 FC | 	wrlong	result1, objptr
1776c     63 00 00 FF 
17770     D0 E4 85 F1 | 	sub	objptr, ##50896
17774     F2 FA 01 F6 | 	mov	result1, objptr
17778     00 68 00 FF 
1777c     00 FA 45 F5 | 	or	result1, ##13631488
17780     63 00 00 FF 
17784     D4 E4 05 F1 | 	add	objptr, ##50900
17788     F2 FA 61 FC | 	wrlong	result1, objptr
1778c     63 00 00 FF 
17790     D4 E4 85 F1 | 	sub	objptr, ##50900
17794     F2 FA 01 F6 | 	mov	result1, objptr
17798     00 68 00 FF 
1779c     00 FA 45 F5 | 	or	result1, ##13631488
177a0     63 00 00 FF 
177a4     D8 E4 05 F1 | 	add	objptr, ##50904
177a8     F2 FA 61 FC | 	wrlong	result1, objptr
177ac     63 00 00 FF 
177b0     D8 E4 85 F1 | 	sub	objptr, ##50904
177b4     F2 FA 01 F6 | 	mov	result1, objptr
177b8     74 FA 25 F4 | 	bith	result1, #116
177bc     63 00 00 FF 
177c0     50 E5 05 F1 | 	add	objptr, ##51024
177c4     F2 FA 61 FC | 	wrlong	result1, objptr
177c8     63 00 00 FF 
177cc     50 E5 85 F1 | 	sub	objptr, ##51024
177d0     F2 FA 01 F6 | 	mov	result1, objptr
177d4     18 FA 25 F4 | 	bith	result1, #24
177d8     63 00 00 FF 
177dc     54 E5 05 F1 | 	add	objptr, ##51028
177e0     F2 FA 61 FC | 	wrlong	result1, objptr
177e4     63 00 00 FF 
177e8     54 E5 85 F1 | 	sub	objptr, ##51028
177ec     F2 FA 01 F6 | 	mov	result1, objptr
177f0     00 88 00 FF 
177f4     00 FA 45 F5 | 	or	result1, ##17825792
177f8     63 00 00 FF 
177fc     58 E5 05 F1 | 	add	objptr, ##51032
17800     F2 FA 61 FC | 	wrlong	result1, objptr
17804     63 00 00 FF 
17808     58 E5 85 F1 | 	sub	objptr, ##51032
1780c     F2 FA 01 F6 | 	mov	result1, objptr
17810     00 90 00 FF 
17814     00 FA 45 F5 | 	or	result1, ##18874368
17818     63 00 00 FF 
1781c     5C E5 05 F1 | 	add	objptr, ##51036
17820     F2 FA 61 FC | 	wrlong	result1, objptr
17824     63 00 00 FF 
17828     5C E5 85 F1 | 	sub	objptr, ##51036
1782c     F2 FA 01 F6 | 	mov	result1, objptr
17830     00 98 00 FF 
17834     00 FA 45 F5 | 	or	result1, ##19922944
17838     63 00 00 FF 
1783c     60 E5 05 F1 | 	add	objptr, ##51040
17840     F2 FA 61 FC | 	wrlong	result1, objptr
17844     63 00 00 FF 
17848     60 E5 85 F1 | 	sub	objptr, ##51040
1784c     F2 FA 01 F6 | 	mov	result1, objptr
17850     00 A0 00 FF 
17854     00 FA 45 F5 | 	or	result1, ##20971520
17858     63 00 00 FF 
1785c     64 E5 05 F1 | 	add	objptr, ##51044
17860     F2 FA 61 FC | 	wrlong	result1, objptr
17864     63 00 00 FF 
17868     64 E5 85 F1 | 	sub	objptr, ##51044
1786c     F2 FA 01 F6 | 	mov	result1, objptr
17870     00 A8 00 FF 
17874     00 FA 45 F5 | 	or	result1, ##22020096
17878     63 00 00 FF 
1787c     68 E5 05 F1 | 	add	objptr, ##51048
17880     F2 FA 61 FC | 	wrlong	result1, objptr
17884     63 00 00 FF 
17888     68 E5 85 F1 | 	sub	objptr, ##51048
1788c     F2 FA 01 F6 | 	mov	result1, objptr
17890     00 B0 00 FF 
17894     00 FA 45 F5 | 	or	result1, ##23068672
17898     63 00 00 FF 
1789c     6C E5 05 F1 | 	add	objptr, ##51052
178a0     F2 FA 61 FC | 	wrlong	result1, objptr
178a4     63 00 00 FF 
178a8     6C E5 85 F1 | 	sub	objptr, ##51052
178ac     F2 FA 01 F6 | 	mov	result1, objptr
178b0     00 B8 00 FF 
178b4     00 FA 45 F5 | 	or	result1, ##24117248
178b8     63 00 00 FF 
178bc     70 E5 05 F1 | 	add	objptr, ##51056
178c0     F2 FA 61 FC | 	wrlong	result1, objptr
178c4     63 00 00 FF 
178c8     70 E5 85 F1 | 	sub	objptr, ##51056
178cc     F2 FA 01 F6 | 	mov	result1, objptr
178d0     37 FA 25 F4 | 	bith	result1, #55
178d4     63 00 00 FF 
178d8     74 E5 05 F1 | 	add	objptr, ##51060
178dc     F2 FA 61 FC | 	wrlong	result1, objptr
178e0     63 00 00 FF 
178e4     74 E5 85 F1 | 	sub	objptr, ##51060
178e8     F2 FA 01 F6 | 	mov	result1, objptr
178ec     00 C8 00 FF 
178f0     00 FA 45 F5 | 	or	result1, ##26214400
178f4     63 00 00 FF 
178f8     78 E5 05 F1 | 	add	objptr, ##51064
178fc     F2 FA 61 FC | 	wrlong	result1, objptr
17900     63 00 00 FF 
17904     78 E5 85 F1 | 	sub	objptr, ##51064
17908     F2 FA 01 F6 | 	mov	result1, objptr
1790c     00 D0 00 FF 
17910     00 FA 45 F5 | 	or	result1, ##27262976
17914     63 00 00 FF 
17918     7C E5 05 F1 | 	add	objptr, ##51068
1791c     F2 FA 61 FC | 	wrlong	result1, objptr
17920     63 00 00 FF 
17924     7C E5 85 F1 | 	sub	objptr, ##51068
17928     F2 FA 01 F6 | 	mov	result1, objptr
1792c     00 D8 00 FF 
17930     00 FA 45 F5 | 	or	result1, ##28311552
17934     63 00 00 FF 
17938     80 E5 05 F1 | 	add	objptr, ##51072
1793c     F2 FA 61 FC | 	wrlong	result1, objptr
17940     63 00 00 FF 
17944     80 E5 85 F1 | 	sub	objptr, ##51072
17948     F2 FA 01 F6 | 	mov	result1, objptr
1794c     56 FA 25 F4 | 	bith	result1, #86
17950     63 00 00 FF 
17954     84 E5 05 F1 | 	add	objptr, ##51076
17958     F2 FA 61 FC | 	wrlong	result1, objptr
1795c     63 00 00 FF 
17960     84 E5 85 F1 | 	sub	objptr, ##51076
17964     F2 FA 01 F6 | 	mov	result1, objptr
17968     00 E8 00 FF 
1796c     00 FA 45 F5 | 	or	result1, ##30408704
17970     65 00 00 FF 
17974     4C E4 05 F1 | 	add	objptr, ##51788
17978     F2 FA 61 FC | 	wrlong	result1, objptr
1797c     65 00 00 FF 
17980     4C E4 85 F1 | 	sub	objptr, ##51788
17984     F2 FA 01 F6 | 	mov	result1, objptr
17988     75 FA 25 F4 | 	bith	result1, #117
1798c     63 00 00 FF 
17990     88 E5 05 F1 | 	add	objptr, ##51080
17994     F2 FA 61 FC | 	wrlong	result1, objptr
17998     63 00 00 FF 
1799c     88 E5 85 F1 | 	sub	objptr, ##51080
179a0     F2 FA 01 F6 | 	mov	result1, objptr
179a4     94 FA 25 F4 | 	bith	result1, #148
179a8     63 00 00 FF 
179ac     9C E5 05 F1 | 	add	objptr, ##51100
179b0     F2 FA 61 FC | 	wrlong	result1, objptr
179b4     63 00 00 FF 
179b8     9C E5 85 F1 | 	sub	objptr, ##51100
179bc     F2 FA 01 F6 | 	mov	result1, objptr
179c0     19 FA 25 F4 | 	bith	result1, #25
179c4     63 00 00 FF 
179c8     8C E5 05 F1 | 	add	objptr, ##51084
179cc     F2 FA 61 FC | 	wrlong	result1, objptr
179d0     63 00 00 FF 
179d4     8C E5 85 F1 | 	sub	objptr, ##51084
179d8     F2 FA 01 F6 | 	mov	result1, objptr
179dc     00 08 01 FF 
179e0     00 FA 45 F5 | 	or	result1, ##34603008
179e4     63 00 00 FF 
179e8     A8 E4 05 F1 | 	add	objptr, ##50856
179ec     F2 FA 61 FC | 	wrlong	result1, objptr
179f0     63 00 00 FF 
179f4     A8 E4 85 F1 | 	sub	objptr, ##50856
179f8     F2 FA 01 F6 | 	mov	result1, objptr
179fc     00 10 01 FF 
17a00     00 FA 45 F5 | 	or	result1, ##35651584
17a04     63 00 00 FF 
17a08     90 E5 05 F1 | 	add	objptr, ##51088
17a0c     F2 FA 61 FC | 	wrlong	result1, objptr
17a10     63 00 00 FF 
17a14     90 E5 85 F1 | 	sub	objptr, ##51088
17a18     F2 FA 01 F6 | 	mov	result1, objptr
17a1c     00 18 01 FF 
17a20     00 FA 45 F5 | 	or	result1, ##36700160
17a24     63 00 00 FF 
17a28     94 E5 05 F1 | 	add	objptr, ##51092
17a2c     F2 FA 61 FC | 	wrlong	result1, objptr
17a30     63 00 00 FF 
17a34     94 E5 85 F1 | 	sub	objptr, ##51092
17a38     F2 FA 01 F6 | 	mov	result1, objptr
17a3c     00 20 01 FF 
17a40     00 FA 45 F5 | 	or	result1, ##37748736
17a44     63 00 00 FF 
17a48     98 E5 05 F1 | 	add	objptr, ##51096
17a4c     F2 FA 61 FC | 	wrlong	result1, objptr
17a50     63 00 00 FF 
17a54     98 E5 85 F1 | 	sub	objptr, ##51096
17a58     F2 FA 01 F6 | 	mov	result1, objptr
17a5c     00 28 01 FF 
17a60     00 FA 45 F5 | 	or	result1, ##38797312
17a64     63 00 00 FF 
17a68     A4 E5 05 F1 | 	add	objptr, ##51108
17a6c     F2 FA 61 FC | 	wrlong	result1, objptr
17a70     63 00 00 FF 
17a74     A4 E5 85 F1 | 	sub	objptr, ##51108
17a78     F2 FA 01 F6 | 	mov	result1, objptr
17a7c     00 30 01 FF 
17a80     00 FA 45 F5 | 	or	result1, ##39845888
17a84     63 00 00 FF 
17a88     A8 E5 05 F1 | 	add	objptr, ##51112
17a8c     F2 FA 61 FC | 	wrlong	result1, objptr
17a90     63 00 00 FF 
17a94     A8 E5 85 F1 | 	sub	objptr, ##51112
17a98     F2 FA 01 F6 | 	mov	result1, objptr
17a9c     00 38 01 FF 
17aa0     00 FA 45 F5 | 	or	result1, ##40894464
17aa4     63 00 00 FF 
17aa8     AC E5 05 F1 | 	add	objptr, ##51116
17aac     F2 FA 61 FC | 	wrlong	result1, objptr
17ab0     63 00 00 FF 
17ab4     AC E5 85 F1 | 	sub	objptr, ##51116
17ab8     F2 FA 01 F6 | 	mov	result1, objptr
17abc     00 40 01 FF 
17ac0     00 FA 45 F5 | 	or	result1, ##41943040
17ac4     63 00 00 FF 
17ac8     B0 E5 05 F1 | 	add	objptr, ##51120
17acc     F2 FA 61 FC | 	wrlong	result1, objptr
17ad0     63 00 00 FF 
17ad4     B0 E5 85 F1 | 	sub	objptr, ##51120
17ad8     F2 FA 01 F6 | 	mov	result1, objptr
17adc     00 48 01 FF 
17ae0     00 FA 45 F5 | 	or	result1, ##42991616
17ae4     63 00 00 FF 
17ae8     B8 E5 05 F1 | 	add	objptr, ##51128
17aec     F2 FA 61 FC | 	wrlong	result1, objptr
17af0     63 00 00 FF 
17af4     B8 E5 85 F1 | 	sub	objptr, ##51128
17af8     F2 FA 01 F6 | 	mov	result1, objptr
17afc     00 50 01 FF 
17b00     00 FA 45 F5 | 	or	result1, ##44040192
17b04     63 00 00 FF 
17b08     BC E5 05 F1 | 	add	objptr, ##51132
17b0c     F2 FA 61 FC | 	wrlong	result1, objptr
17b10     63 00 00 FF 
17b14     BC E5 85 F1 | 	sub	objptr, ##51132
17b18     F2 FA 01 F6 | 	mov	result1, objptr
17b1c     00 58 01 FF 
17b20     00 FA 45 F5 | 	or	result1, ##45088768
17b24     63 00 00 FF 
17b28     BC E4 05 F1 | 	add	objptr, ##50876
17b2c     F2 FA 61 FC | 	wrlong	result1, objptr
17b30     63 00 00 FF 
17b34     BC E4 85 F1 | 	sub	objptr, ##50876
17b38     F2 FA 01 F6 | 	mov	result1, objptr
17b3c     00 60 01 FF 
17b40     00 FA 45 F5 | 	or	result1, ##46137344
17b44     63 00 00 FF 
17b48     EC E4 05 F1 | 	add	objptr, ##50924
17b4c     F2 FA 61 FC | 	wrlong	result1, objptr
17b50     63 00 00 FF 
17b54     EC E4 85 F1 | 	sub	objptr, ##50924
17b58     F2 FA 01 F6 | 	mov	result1, objptr
17b5c     00 68 01 FF 
17b60     00 FA 45 F5 | 	or	result1, ##47185920
17b64     63 00 00 FF 
17b68     E8 E4 05 F1 | 	add	objptr, ##50920
17b6c     F2 FA 61 FC | 	wrlong	result1, objptr
17b70     63 00 00 FF 
17b74     E8 E4 85 F1 | 	sub	objptr, ##50920
17b78     F2 FA 01 F6 | 	mov	result1, objptr
17b7c     00 70 01 FF 
17b80     00 FA 45 F5 | 	or	result1, ##48234496
17b84     63 00 00 FF 
17b88     8C E4 05 F1 | 	add	objptr, ##50828
17b8c     F2 FA 61 FC | 	wrlong	result1, objptr
17b90     63 00 00 FF 
17b94     8C E4 85 F1 | 	sub	objptr, ##50828
17b98     F2 FA 01 F6 | 	mov	result1, objptr
17b9c     00 78 01 FF 
17ba0     00 FA 45 F5 | 	or	result1, ##49283072
17ba4     63 00 00 FF 
17ba8     90 E4 05 F1 | 	add	objptr, ##50832
17bac     F2 FA 61 FC | 	wrlong	result1, objptr
17bb0     63 00 00 FF 
17bb4     90 E4 85 F1 | 	sub	objptr, ##50832
17bb8     F2 FA 01 F6 | 	mov	result1, objptr
17bbc     38 FA 25 F4 | 	bith	result1, #56
17bc0     63 00 00 FF 
17bc4     F8 E4 05 F1 | 	add	objptr, ##50936
17bc8     F2 FA 61 FC | 	wrlong	result1, objptr
17bcc     63 00 00 FF 
17bd0     F8 E4 85 F1 | 	sub	objptr, ##50936
17bd4     F2 FA 01 F6 | 	mov	result1, objptr
17bd8     00 88 01 FF 
17bdc     00 FA 45 F5 | 	or	result1, ##51380224
17be0     63 00 00 FF 
17be4     A0 E5 05 F1 | 	add	objptr, ##51104
17be8     F2 FA 61 FC | 	wrlong	result1, objptr
17bec     63 00 00 FF 
17bf0     A0 E5 85 F1 | 	sub	objptr, ##51104
17bf4     F2 FA 01 F6 | 	mov	result1, objptr
17bf8     00 90 01 FF 
17bfc     00 FA 45 F5 | 	or	result1, ##52428800
17c00     63 00 00 FF 
17c04     B4 E5 05 F1 | 	add	objptr, ##51124
17c08     F2 FA 61 FC | 	wrlong	result1, objptr
17c0c     63 00 00 FF 
17c10     B4 E5 85 F1 | 	sub	objptr, ##51124
17c14     F2 FA 01 F6 | 	mov	result1, objptr
17c18     00 98 01 FF 
17c1c     00 FA 45 F5 | 	or	result1, ##53477376
17c20     63 00 00 FF 
17c24     C0 E5 05 F1 | 	add	objptr, ##51136
17c28     F2 FA 61 FC | 	wrlong	result1, objptr
17c2c     63 00 00 FF 
17c30     C0 E5 85 F1 | 	sub	objptr, ##51136
17c34     F2 FA 01 F6 | 	mov	result1, objptr
17c38     00 A0 01 FF 
17c3c     00 FA 45 F5 | 	or	result1, ##54525952
17c40     63 00 00 FF 
17c44     C4 E5 05 F1 | 	add	objptr, ##51140
17c48     F2 FA 61 FC | 	wrlong	result1, objptr
17c4c     63 00 00 FF 
17c50     C4 E5 85 F1 | 	sub	objptr, ##51140
17c54     F2 FA 01 F6 | 	mov	result1, objptr
17c58     00 A8 01 FF 
17c5c     00 FA 45 F5 | 	or	result1, ##55574528
17c60     63 00 00 FF 
17c64     C8 E5 05 F1 | 	add	objptr, ##51144
17c68     F2 FA 61 FC | 	wrlong	result1, objptr
17c6c     63 00 00 FF 
17c70     C8 E5 85 F1 | 	sub	objptr, ##51144
17c74     F2 FA 01 F6 | 	mov	result1, objptr
17c78     00 B0 01 FF 
17c7c     00 FA 45 F5 | 	or	result1, ##56623104
17c80     63 00 00 FF 
17c84     CC E5 05 F1 | 	add	objptr, ##51148
17c88     F2 FA 61 FC | 	wrlong	result1, objptr
17c8c     63 00 00 FF 
17c90     CC E5 85 F1 | 	sub	objptr, ##51148
17c94     F2 FA 01 F6 | 	mov	result1, objptr
17c98     00 B8 01 FF 
17c9c     00 FA 45 F5 | 	or	result1, ##57671680
17ca0     63 00 00 FF 
17ca4     D0 E5 05 F1 | 	add	objptr, ##51152
17ca8     F2 FA 61 FC | 	wrlong	result1, objptr
17cac     63 00 00 FF 
17cb0     D0 E5 85 F1 | 	sub	objptr, ##51152
17cb4     F2 FA 01 F6 | 	mov	result1, objptr
17cb8     57 FA 25 F4 | 	bith	result1, #87
17cbc     63 00 00 FF 
17cc0     D4 E5 05 F1 | 	add	objptr, ##51156
17cc4     F2 FA 61 FC | 	wrlong	result1, objptr
17cc8     63 00 00 FF 
17ccc     D4 E5 85 F1 | 	sub	objptr, ##51156
17cd0     F2 FA 01 F6 | 	mov	result1, objptr
17cd4     94 FA 25 F4 | 	bith	result1, #148
17cd8     63 00 00 FF 
17cdc     9C E5 05 F1 | 	add	objptr, ##51100
17ce0     F2 FA 61 FC | 	wrlong	result1, objptr
17ce4     63 00 00 FF 
17ce8     9C E5 85 F1 | 	sub	objptr, ##51100
17cec     F2 FA 01 F6 | 	mov	result1, objptr
17cf0     00 C8 01 FF 
17cf4     00 FA 45 F5 | 	or	result1, ##59768832
17cf8     63 00 00 FF 
17cfc     DC E5 05 F1 | 	add	objptr, ##51164
17d00     F2 FA 61 FC | 	wrlong	result1, objptr
17d04     63 00 00 FF 
17d08     DC E5 85 F1 | 	sub	objptr, ##51164
17d0c     F2 FA 01 F6 | 	mov	result1, objptr
17d10     00 D0 01 FF 
17d14     00 FA 45 F5 | 	or	result1, ##60817408
17d18     63 00 00 FF 
17d1c     D8 E5 05 F1 | 	add	objptr, ##51160
17d20     F2 FA 61 FC | 	wrlong	result1, objptr
17d24     63 00 00 FF 
17d28     D8 E5 85 F1 | 	sub	objptr, ##51160
17d2c     F2 FA 01 F6 | 	mov	result1, objptr
17d30     00 D8 01 FF 
17d34     00 FA 45 F5 | 	or	result1, ##61865984
17d38     63 00 00 FF 
17d3c     F0 E5 05 F1 | 	add	objptr, ##51184
17d40     F2 FA 61 FC | 	wrlong	result1, objptr
17d44     63 00 00 FF 
17d48     F0 E5 85 F1 | 	sub	objptr, ##51184
17d4c     F2 FA 01 F6 | 	mov	result1, objptr
17d50     76 FA 25 F4 | 	bith	result1, #118
17d54     63 00 00 FF 
17d58     F4 E5 05 F1 | 	add	objptr, ##51188
17d5c     F2 FA 61 FC | 	wrlong	result1, objptr
17d60     63 00 00 FF 
17d64     F4 E5 85 F1 | 	sub	objptr, ##51188
17d68     F2 FA 01 F6 | 	mov	result1, objptr
17d6c     00 E8 01 FF 
17d70     00 FA 45 F5 | 	or	result1, ##63963136
17d74     63 00 00 FF 
17d78     E0 E5 05 F1 | 	add	objptr, ##51168
17d7c     F2 FA 61 FC | 	wrlong	result1, objptr
17d80     63 00 00 FF 
17d84     E0 E5 85 F1 | 	sub	objptr, ##51168
17d88     F2 FA 01 F6 | 	mov	result1, objptr
17d8c     95 FA 25 F4 | 	bith	result1, #149
17d90     63 00 00 FF 
17d94     E4 E5 05 F1 | 	add	objptr, ##51172
17d98     F2 FA 61 FC | 	wrlong	result1, objptr
17d9c     63 00 00 FF 
17da0     E4 E5 85 F1 | 	sub	objptr, ##51172
17da4     F2 FA 01 F6 | 	mov	result1, objptr
17da8     B4 FA 25 F4 | 	bith	result1, #180
17dac     63 00 00 FF 
17db0     E8 E5 05 F1 | 	add	objptr, ##51176
17db4     F2 FA 61 FC | 	wrlong	result1, objptr
17db8     63 00 00 FF 
17dbc     E8 E5 85 F1 | 	sub	objptr, ##51176
17dc0     F2 FA 01 F6 | 	mov	result1, objptr
17dc4     1A FA 25 F4 | 	bith	result1, #26
17dc8     63 00 00 FF 
17dcc     EC E5 05 F1 | 	add	objptr, ##51180
17dd0     F2 FA 61 FC | 	wrlong	result1, objptr
17dd4     63 00 00 FF 
17dd8     EC E5 85 F1 | 	sub	objptr, ##51180
17ddc     F2 FA 01 F6 | 	mov	result1, objptr
17de0     00 08 02 FF 
17de4     00 FA 45 F5 | 	or	result1, ##68157440
17de8     63 00 00 FF 
17dec     FC E5 05 F1 | 	add	objptr, ##51196
17df0     F2 FA 61 FC | 	wrlong	result1, objptr
17df4     63 00 00 FF 
17df8     FC E5 85 F1 | 	sub	objptr, ##51196
17dfc     F2 FA 01 F6 | 	mov	result1, objptr
17e00     00 10 02 FF 
17e04     00 FA 45 F5 | 	or	result1, ##69206016
17e08     63 00 00 FF 
17e0c     F8 E5 05 F1 | 	add	objptr, ##51192
17e10     F2 FA 61 FC | 	wrlong	result1, objptr
17e14     63 00 00 FF 
17e18     F8 E5 85 F1 | 	sub	objptr, ##51192
17e1c     F2 FA 01 F6 | 	mov	result1, objptr
17e20     00 18 02 FF 
17e24     00 FA 45 F5 | 	or	result1, ##70254592
17e28     64 00 00 FF 
17e2c     08 E4 05 F1 | 	add	objptr, ##51208
17e30     F2 FA 61 FC | 	wrlong	result1, objptr
17e34     64 00 00 FF 
17e38     08 E4 85 F1 | 	sub	objptr, ##51208
17e3c     F2 FA 01 F6 | 	mov	result1, objptr
17e40     00 20 02 FF 
17e44     00 FA 45 F5 | 	or	result1, ##71303168
17e48     64 00 00 FF 
17e4c     04 E4 05 F1 | 	add	objptr, ##51204
17e50     F2 FA 61 FC | 	wrlong	result1, objptr
17e54     64 00 00 FF 
17e58     04 E4 85 F1 | 	sub	objptr, ##51204
17e5c     F2 FA 01 F6 | 	mov	result1, objptr
17e60     00 28 02 FF 
17e64     00 FA 45 F5 | 	or	result1, ##72351744
17e68     64 00 00 FF 
17e6c     00 E4 05 F1 | 	add	objptr, ##51200
17e70     F2 FA 61 FC | 	wrlong	result1, objptr
17e74     64 00 00 FF 
17e78     00 E4 85 F1 | 	sub	objptr, ##51200
17e7c     F2 FA 01 F6 | 	mov	result1, objptr
17e80     00 30 02 FF 
17e84     00 FA 45 F5 | 	or	result1, ##73400320
17e88     64 00 00 FF 
17e8c     0C E4 05 F1 | 	add	objptr, ##51212
17e90     F2 FA 61 FC | 	wrlong	result1, objptr
17e94     64 00 00 FF 
17e98     0C E4 85 F1 | 	sub	objptr, ##51212
17e9c     F2 FA 01 F6 | 	mov	result1, objptr
17ea0     00 38 02 FF 
17ea4     00 FA 45 F5 | 	or	result1, ##74448896
17ea8     64 00 00 FF 
17eac     10 E4 05 F1 | 	add	objptr, ##51216
17eb0     F2 FA 61 FC | 	wrlong	result1, objptr
17eb4     64 00 00 FF 
17eb8     10 E4 85 F1 | 	sub	objptr, ##51216
17ebc     F2 FA 01 F6 | 	mov	result1, objptr
17ec0     00 40 02 FF 
17ec4     00 FA 45 F5 | 	or	result1, ##75497472
17ec8     63 00 00 FF 
17ecc     A4 E4 05 F1 | 	add	objptr, ##50852
17ed0     F2 FA 61 FC | 	wrlong	result1, objptr
17ed4     63 00 00 FF 
17ed8     A4 E4 85 F1 | 	sub	objptr, ##50852
17edc     F2 FA 01 F6 | 	mov	result1, objptr
17ee0     00 48 02 FF 
17ee4     00 FA 45 F5 | 	or	result1, ##76546048
17ee8     64 00 00 FF 
17eec     28 E4 05 F1 | 	add	objptr, ##51240
17ef0     F2 FA 61 FC | 	wrlong	result1, objptr
17ef4     64 00 00 FF 
17ef8     28 E4 85 F1 | 	sub	objptr, ##51240
17efc     F2 FA 01 F6 | 	mov	result1, objptr
17f00     00 50 02 FF 
17f04     00 FA 45 F5 | 	or	result1, ##77594624
17f08     64 00 00 FF 
17f0c     38 E4 05 F1 | 	add	objptr, ##51256
17f10     F2 FA 61 FC | 	wrlong	result1, objptr
17f14     64 00 00 FF 
17f18     38 E4 85 F1 | 	sub	objptr, ##51256
17f1c     F2 FA 01 F6 | 	mov	result1, objptr
17f20     00 58 02 FF 
17f24     00 FA 45 F5 | 	or	result1, ##78643200
17f28     64 00 00 FF 
17f2c     3C E4 05 F1 | 	add	objptr, ##51260
17f30     F2 FA 61 FC | 	wrlong	result1, objptr
17f34     64 00 00 FF 
17f38     3C E4 85 F1 | 	sub	objptr, ##51260
17f3c     F2 FA 01 F6 | 	mov	result1, objptr
17f40     00 60 02 FF 
17f44     00 FA 45 F5 | 	or	result1, ##79691776
17f48     64 00 00 FF 
17f4c     34 E4 05 F1 | 	add	objptr, ##51252
17f50     F2 FA 61 FC | 	wrlong	result1, objptr
17f54     64 00 00 FF 
17f58     34 E4 85 F1 | 	sub	objptr, ##51252
17f5c     F2 FA 01 F6 | 	mov	result1, objptr
17f60     00 68 02 FF 
17f64     00 FA 45 F5 | 	or	result1, ##80740352
17f68     64 00 00 FF 
17f6c     2C E4 05 F1 | 	add	objptr, ##51244
17f70     F2 FA 61 FC | 	wrlong	result1, objptr
17f74     64 00 00 FF 
17f78     2C E4 85 F1 | 	sub	objptr, ##51244
17f7c     F2 FA 01 F6 | 	mov	result1, objptr
17f80     00 70 02 FF 
17f84     00 FA 45 F5 | 	or	result1, ##81788928
17f88     64 00 00 FF 
17f8c     30 E4 05 F1 | 	add	objptr, ##51248
17f90     F2 FA 61 FC | 	wrlong	result1, objptr
17f94     64 00 00 FF 
17f98     30 E4 85 F1 | 	sub	objptr, ##51248
17f9c     F2 FA 01 F6 | 	mov	result1, objptr
17fa0     00 78 02 FF 
17fa4     00 FA 45 F5 | 	or	result1, ##82837504
17fa8     64 00 00 FF 
17fac     40 E4 05 F1 | 	add	objptr, ##51264
17fb0     F2 FA 61 FC | 	wrlong	result1, objptr
17fb4     64 00 00 FF 
17fb8     40 E4 85 F1 | 	sub	objptr, ##51264
17fbc     F2 FA 01 F6 | 	mov	result1, objptr
17fc0     00 80 02 FF 
17fc4     00 FA 45 F5 | 	or	result1, ##83886080
17fc8     64 00 00 FF 
17fcc     44 E4 05 F1 | 	add	objptr, ##51268
17fd0     F2 FA 61 FC | 	wrlong	result1, objptr
17fd4     64 00 00 FF 
17fd8     44 E4 85 F1 | 	sub	objptr, ##51268
17fdc     F2 FA 01 F6 | 	mov	result1, objptr
17fe0     00 88 02 FF 
17fe4     00 FA 45 F5 | 	or	result1, ##84934656
17fe8     64 00 00 FF 
17fec     48 E4 05 F1 | 	add	objptr, ##51272
17ff0     F2 FA 61 FC | 	wrlong	result1, objptr
17ff4     64 00 00 FF 
17ff8     48 E4 85 F1 | 	sub	objptr, ##51272
17ffc     F2 FA 01 F6 | 	mov	result1, objptr
18000     00 90 02 FF 
18004     00 FA 45 F5 | 	or	result1, ##85983232
18008     64 00 00 FF 
1800c     4C E4 05 F1 | 	add	objptr, ##51276
18010     F2 FA 61 FC | 	wrlong	result1, objptr
18014     64 00 00 FF 
18018     4C E4 85 F1 | 	sub	objptr, ##51276
1801c     F2 FA 01 F6 | 	mov	result1, objptr
18020     00 98 02 FF 
18024     00 FA 45 F5 | 	or	result1, ##87031808
18028     64 00 00 FF 
1802c     50 E4 05 F1 | 	add	objptr, ##51280
18030     F2 FA 61 FC | 	wrlong	result1, objptr
18034     64 00 00 FF 
18038     50 E4 85 F1 | 	sub	objptr, ##51280
1803c     F2 FA 01 F6 | 	mov	result1, objptr
18040     00 A0 02 FF 
18044     00 FA 45 F5 | 	or	result1, ##88080384
18048     64 00 00 FF 
1804c     54 E4 05 F1 | 	add	objptr, ##51284
18050     F2 FA 61 FC | 	wrlong	result1, objptr
18054     64 00 00 FF 
18058     54 E4 85 F1 | 	sub	objptr, ##51284
1805c     F2 FA 01 F6 | 	mov	result1, objptr
18060     00 A8 02 FF 
18064     00 FA 45 F5 | 	or	result1, ##89128960
18068     64 00 00 FF 
1806c     58 E4 05 F1 | 	add	objptr, ##51288
18070     F2 FA 61 FC | 	wrlong	result1, objptr
18074     64 00 00 FF 
18078     58 E4 85 F1 | 	sub	objptr, ##51288
1807c     F2 FA 01 F6 | 	mov	result1, objptr
18080     00 B0 02 FF 
18084     00 FA 45 F5 | 	or	result1, ##90177536
18088     64 00 00 FF 
1808c     5C E4 05 F1 | 	add	objptr, ##51292
18090     F2 FA 61 FC | 	wrlong	result1, objptr
18094     64 00 00 FF 
18098     5C E4 85 F1 | 	sub	objptr, ##51292
1809c     F2 FA 01 F6 | 	mov	result1, objptr
180a0     00 B8 02 FF 
180a4     00 FA 45 F5 | 	or	result1, ##91226112
180a8     64 00 00 FF 
180ac     68 E4 05 F1 | 	add	objptr, ##51304
180b0     F2 FA 61 FC | 	wrlong	result1, objptr
180b4     64 00 00 FF 
180b8     68 E4 85 F1 | 	sub	objptr, ##51304
180bc     F2 FA 01 F6 | 	mov	result1, objptr
180c0     00 C0 02 FF 
180c4     00 FA 45 F5 | 	or	result1, ##92274688
180c8     64 00 00 FF 
180cc     60 E4 05 F1 | 	add	objptr, ##51296
180d0     F2 FA 61 FC | 	wrlong	result1, objptr
180d4     64 00 00 FF 
180d8     60 E4 85 F1 | 	sub	objptr, ##51296
180dc     F2 FA 01 F6 | 	mov	result1, objptr
180e0     00 C8 02 FF 
180e4     00 FA 45 F5 | 	or	result1, ##93323264
180e8     64 00 00 FF 
180ec     64 E4 05 F1 | 	add	objptr, ##51300
180f0     F2 FA 61 FC | 	wrlong	result1, objptr
180f4     64 00 00 FF 
180f8     64 E4 85 F1 | 	sub	objptr, ##51300
180fc     F2 FA 01 F6 | 	mov	result1, objptr
18100     00 D0 02 FF 
18104     00 FA 45 F5 | 	or	result1, ##94371840
18108     64 00 00 FF 
1810c     6C E4 05 F1 | 	add	objptr, ##51308
18110     F2 FA 61 FC | 	wrlong	result1, objptr
18114     64 00 00 FF 
18118     6C E4 85 F1 | 	sub	objptr, ##51308
1811c     F2 FA 01 F6 | 	mov	result1, objptr
18120     00 D8 02 FF 
18124     00 FA 45 F5 | 	or	result1, ##95420416
18128     64 00 00 FF 
1812c     14 E4 05 F1 | 	add	objptr, ##51220
18130     F2 FA 61 FC | 	wrlong	result1, objptr
18134     64 00 00 FF 
18138     14 E4 85 F1 | 	sub	objptr, ##51220
1813c     F2 FA 01 F6 | 	mov	result1, objptr
18140     00 E0 02 FF 
18144     00 FA 45 F5 | 	or	result1, ##96468992
18148     64 00 00 FF 
1814c     1C E4 05 F1 | 	add	objptr, ##51228
18150     F2 FA 61 FC | 	wrlong	result1, objptr
18154     64 00 00 FF 
18158     1C E4 85 F1 | 	sub	objptr, ##51228
1815c     F2 FA 01 F6 | 	mov	result1, objptr
18160     00 E8 02 FF 
18164     00 FA 45 F5 | 	or	result1, ##97517568
18168     64 00 00 FF 
1816c     20 E4 05 F1 | 	add	objptr, ##51232
18170     F2 FA 61 FC | 	wrlong	result1, objptr
18174     64 00 00 FF 
18178     20 E4 85 F1 | 	sub	objptr, ##51232
1817c     F2 FA 01 F6 | 	mov	result1, objptr
18180     00 F0 02 FF 
18184     00 FA 45 F5 | 	or	result1, ##98566144
18188     64 00 00 FF 
1818c     70 E4 05 F1 | 	add	objptr, ##51312
18190     F2 FA 61 FC | 	wrlong	result1, objptr
18194     64 00 00 FF 
18198     70 E4 85 F1 | 	sub	objptr, ##51312
1819c     F2 FA 01 F6 | 	mov	result1, objptr
181a0     00 F8 02 FF 
181a4     00 FA 45 F5 | 	or	result1, ##99614720
181a8     64 00 00 FF 
181ac     74 E4 05 F1 | 	add	objptr, ##51316
181b0     F2 FA 61 FC | 	wrlong	result1, objptr
181b4     64 00 00 FF 
181b8     74 E4 85 F1 | 	sub	objptr, ##51316
181bc     F2 FA 01 F6 | 	mov	result1, objptr
181c0     39 FA 25 F4 | 	bith	result1, #57
181c4     64 00 00 FF 
181c8     78 E4 05 F1 | 	add	objptr, ##51320
181cc     F2 FA 61 FC | 	wrlong	result1, objptr
181d0     64 00 00 FF 
181d4     78 E4 85 F1 | 	sub	objptr, ##51320
181d8     F2 FA 01 F6 | 	mov	result1, objptr
181dc     00 08 03 FF 
181e0     00 FA 45 F5 | 	or	result1, ##101711872
181e4     64 00 00 FF 
181e8     24 E4 05 F1 | 	add	objptr, ##51236
181ec     F2 FA 61 FC | 	wrlong	result1, objptr
181f0     64 00 00 FF 
181f4     24 E4 85 F1 | 	sub	objptr, ##51236
181f8     F2 FA 01 F6 | 	mov	result1, objptr
181fc     00 10 03 FF 
18200     00 FA 45 F5 | 	or	result1, ##102760448
18204     64 00 00 FF 
18208     88 E4 05 F1 | 	add	objptr, ##51336
1820c     F2 FA 61 FC | 	wrlong	result1, objptr
18210     64 00 00 FF 
18214     88 E4 85 F1 | 	sub	objptr, ##51336
18218     F2 FA 01 F6 | 	mov	result1, objptr
1821c     00 18 03 FF 
18220     00 FA 45 F5 | 	or	result1, ##103809024
18224     64 00 00 FF 
18228     90 E4 05 F1 | 	add	objptr, ##51344
1822c     F2 FA 61 FC | 	wrlong	result1, objptr
18230     64 00 00 FF 
18234     90 E4 85 F1 | 	sub	objptr, ##51344
18238     F2 FA 01 F6 | 	mov	result1, objptr
1823c     00 20 03 FF 
18240     00 FA 45 F5 | 	or	result1, ##104857600
18244     64 00 00 FF 
18248     84 E4 05 F1 | 	add	objptr, ##51332
1824c     F2 FA 61 FC | 	wrlong	result1, objptr
18250     64 00 00 FF 
18254     84 E4 85 F1 | 	sub	objptr, ##51332
18258     F2 FA 01 F6 | 	mov	result1, objptr
1825c     00 28 03 FF 
18260     00 FA 45 F5 | 	or	result1, ##105906176
18264     64 00 00 FF 
18268     80 E4 05 F1 | 	add	objptr, ##51328
1826c     F2 FA 61 FC | 	wrlong	result1, objptr
18270     64 00 00 FF 
18274     80 E4 85 F1 | 	sub	objptr, ##51328
18278     F2 FA 01 F6 | 	mov	result1, objptr
1827c     00 30 03 FF 
18280     00 FA 45 F5 | 	or	result1, ##106954752
18284     64 00 00 FF 
18288     7C E4 05 F1 | 	add	objptr, ##51324
1828c     F2 FA 61 FC | 	wrlong	result1, objptr
18290     64 00 00 FF 
18294     7C E4 85 F1 | 	sub	objptr, ##51324
18298     F2 FA 01 F6 | 	mov	result1, objptr
1829c     00 38 03 FF 
182a0     00 FA 45 F5 | 	or	result1, ##108003328
182a4     64 00 00 FF 
182a8     8C E4 05 F1 | 	add	objptr, ##51340
182ac     F2 FA 61 FC | 	wrlong	result1, objptr
182b0     64 00 00 FF 
182b4     8C E4 85 F1 | 	sub	objptr, ##51340
182b8     F2 FA 01 F6 | 	mov	result1, objptr
182bc     00 40 03 FF 
182c0     00 FA 45 F5 | 	or	result1, ##109051904
182c4     64 00 00 FF 
182c8     94 E4 05 F1 | 	add	objptr, ##51348
182cc     F2 FA 61 FC | 	wrlong	result1, objptr
182d0     64 00 00 FF 
182d4     94 E4 85 F1 | 	sub	objptr, ##51348
182d8     F2 FA 01 F6 | 	mov	result1, objptr
182dc     00 48 03 FF 
182e0     00 FA 45 F5 | 	or	result1, ##110100480
182e4     64 00 00 FF 
182e8     98 E4 05 F1 | 	add	objptr, ##51352
182ec     F2 FA 61 FC | 	wrlong	result1, objptr
182f0     64 00 00 FF 
182f4     98 E4 85 F1 | 	sub	objptr, ##51352
182f8     F2 FA 01 F6 | 	mov	result1, objptr
182fc     00 50 03 FF 
18300     00 FA 45 F5 | 	or	result1, ##111149056
18304     64 00 00 FF 
18308     9C E4 05 F1 | 	add	objptr, ##51356
1830c     F2 FA 61 FC | 	wrlong	result1, objptr
18310     64 00 00 FF 
18314     9C E4 85 F1 | 	sub	objptr, ##51356
18318     F2 FA 01 F6 | 	mov	result1, objptr
1831c     00 58 03 FF 
18320     00 FA 45 F5 | 	or	result1, ##112197632
18324     64 00 00 FF 
18328     A4 E4 05 F1 | 	add	objptr, ##51364
1832c     F2 FA 61 FC | 	wrlong	result1, objptr
18330     64 00 00 FF 
18334     A4 E4 85 F1 | 	sub	objptr, ##51364
18338     F2 FA 01 F6 | 	mov	result1, objptr
1833c     00 60 03 FF 
18340     00 FA 45 F5 | 	or	result1, ##113246208
18344     64 00 00 FF 
18348     A8 E4 05 F1 | 	add	objptr, ##51368
1834c     F2 FA 61 FC | 	wrlong	result1, objptr
18350     64 00 00 FF 
18354     A8 E4 85 F1 | 	sub	objptr, ##51368
18358     F2 FA 01 F6 | 	mov	result1, objptr
1835c     00 68 03 FF 
18360     00 FA 45 F5 | 	or	result1, ##114294784
18364     64 00 00 FF 
18368     AC E4 05 F1 | 	add	objptr, ##51372
1836c     F2 FA 61 FC | 	wrlong	result1, objptr
18370     64 00 00 FF 
18374     AC E4 85 F1 | 	sub	objptr, ##51372
18378     F2 FA 01 F6 | 	mov	result1, objptr
1837c     00 70 03 FF 
18380     00 FA 45 F5 | 	or	result1, ##115343360
18384     64 00 00 FF 
18388     B0 E4 05 F1 | 	add	objptr, ##51376
1838c     F2 FA 61 FC | 	wrlong	result1, objptr
18390     64 00 00 FF 
18394     B0 E4 85 F1 | 	sub	objptr, ##51376
18398     F2 FA 01 F6 | 	mov	result1, objptr
1839c     00 78 03 FF 
183a0     00 FA 45 F5 | 	or	result1, ##116391936
183a4     64 00 00 FF 
183a8     B4 E4 05 F1 | 	add	objptr, ##51380
183ac     F2 FA 61 FC | 	wrlong	result1, objptr
183b0     64 00 00 FF 
183b4     B4 E4 85 F1 | 	sub	objptr, ##51380
183b8     F2 FA 01 F6 | 	mov	result1, objptr
183bc     58 FA 25 F4 | 	bith	result1, #88
183c0     64 00 00 FF 
183c4     B8 E4 05 F1 | 	add	objptr, ##51384
183c8     F2 FA 61 FC | 	wrlong	result1, objptr
183cc     64 00 00 FF 
183d0     B8 E4 85 F1 | 	sub	objptr, ##51384
183d4     F2 FA 01 F6 | 	mov	result1, objptr
183d8     00 88 03 FF 
183dc     00 FA 45 F5 | 	or	result1, ##118489088
183e0     64 00 00 FF 
183e4     BC E4 05 F1 | 	add	objptr, ##51388
183e8     F2 FA 61 FC | 	wrlong	result1, objptr
183ec     64 00 00 FF 
183f0     BC E4 85 F1 | 	sub	objptr, ##51388
183f4     F2 FA 01 F6 | 	mov	result1, objptr
183f8     00 90 03 FF 
183fc     00 FA 45 F5 | 	or	result1, ##119537664
18400     64 00 00 FF 
18404     C0 E4 05 F1 | 	add	objptr, ##51392
18408     F2 FA 61 FC | 	wrlong	result1, objptr
1840c     64 00 00 FF 
18410     C0 E4 85 F1 | 	sub	objptr, ##51392
18414     F2 FA 01 F6 | 	mov	result1, objptr
18418     00 98 03 FF 
1841c     00 FA 45 F5 | 	or	result1, ##120586240
18420     64 00 00 FF 
18424     A0 E4 05 F1 | 	add	objptr, ##51360
18428     F2 FA 61 FC | 	wrlong	result1, objptr
1842c     64 00 00 FF 
18430     A0 E4 85 F1 | 	sub	objptr, ##51360
18434     F2 FA 01 F6 | 	mov	result1, objptr
18438     00 A0 03 FF 
1843c     00 FA 45 F5 | 	or	result1, ##121634816
18440     63 00 00 FF 
18444     98 E4 05 F1 | 	add	objptr, ##50840
18448     F2 FA 61 FC | 	wrlong	result1, objptr
1844c     63 00 00 FF 
18450     98 E4 85 F1 | 	sub	objptr, ##50840
18454     F2 FA 01 F6 | 	mov	result1, objptr
18458     00 A8 03 FF 
1845c     00 FA 45 F5 | 	or	result1, ##122683392
18460     64 00 00 FF 
18464     C4 E4 05 F1 | 	add	objptr, ##51396
18468     F2 FA 61 FC | 	wrlong	result1, objptr
1846c     64 00 00 FF 
18470     C4 E4 85 F1 | 	sub	objptr, ##51396
18474     F2 FA 01 F6 | 	mov	result1, objptr
18478     00 B0 03 FF 
1847c     00 FA 45 F5 | 	or	result1, ##123731968
18480     64 00 00 FF 
18484     C8 E4 05 F1 | 	add	objptr, ##51400
18488     F2 FA 61 FC | 	wrlong	result1, objptr
1848c     64 00 00 FF 
18490     C8 E4 85 F1 | 	sub	objptr, ##51400
18494                 | _init_commands_ret
18494     2D 00 64 FD | 	ret
18498                 | 
18498                 | ' 
18498                 | ' ''--------------------------------Error strings -------------------------------------
18498                 | ' sub init_audio
18498                 | _init_audio
18498     05 4A 05 F6 | 	mov	COUNT_, #5
1849c     A8 00 A0 FD | 	call	#pushregs_
184a0     00 C0 1F FF 
184a4     00 1E 06 F6 | 	mov	local01, ##1065353216
184a8                 | ' for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
184a8     00 20 06 F6 | 	mov	local02, #0
184ac                 | LR__1910
184ac     10 23 02 F6 | 	mov	local03, local02
184b0     01 22 66 F0 | 	shl	local03, #1
184b4     0C 00 00 FF 
184b8     D8 E4 05 F1 | 	add	objptr, ##6360
184bc     F2 22 02 F1 | 	add	local03, objptr
184c0     58 7F 23 FF 
184c4     00 24 06 F6 | 	mov	local04, ##1191096320
184c8     0C 00 00 FF 
184cc     D8 E4 85 F1 | 	sub	objptr, ##6360
184d0     10 13 52 F6 | 	abs	arg01, local02 wc
184d4     1F 26 C6 C9 |  if_b	decod	local05, #31
184d8     00 26 06 36 |  if_ae	mov	local05, #0
184dc     1C 73 B0 FD | 	call	#__system___float_fromuns
184e0     13 FB 61 F5 | 	xor	result1, local05
184e4     FD 12 02 F6 | 	mov	arg01, result1
184e8     87 24 20 FF 
184ec     DB 15 06 F6 | 	mov	arg02, ##1078530011
184f0     0C 77 B0 FD | 	call	#__system___float_mul
184f4     FD 12 02 F6 | 	mov	arg01, result1
184f8     00 00 22 FF 
184fc     00 14 06 F6 | 	mov	arg02, ##1140850688
18500     00 79 B0 FD | 	call	#__system___float_div
18504     FD 12 02 F6 | 	mov	arg01, result1
18508     30 80 B0 FD | 	call	#__system____builtin_sinf
1850c     FD 14 02 F6 | 	mov	arg02, result1
18510     12 13 02 F6 | 	mov	arg01, local04
18514     E8 76 B0 FD | 	call	#__system___float_mul
18518     FD 12 02 F6 | 	mov	arg01, result1
1851c     01 14 06 F6 | 	mov	arg02, #1
18520     A4 7B B0 FD | 	call	#__system___float_tointeger
18524     11 FB 51 FC | 	wrword	result1, local03
18528     01 20 06 F1 | 	add	local02, #1
1852c     02 00 00 FF 
18530     00 20 56 F2 | 	cmps	local02, ##1024 wc
18534     74 FF 9F CD |  if_b	jmp	#LR__1910
18538                 | ' for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
18538     00 20 06 F6 | 	mov	local02, #0
1853c     10 00 00 FF 
18540     D8 E4 05 F1 | 	add	objptr, ##8408
18544     97 6A 48 FB | 	callpa	#(@LR__1914-@LR__1911)>>2,fcache_load_ptr_
18548                 | LR__1911
18548     10 23 02 F6 | 	mov	local03, local02
1854c     01 22 66 F0 | 	shl	local03, #1
18550     F2 22 02 F1 | 	add	local03, objptr
18554     10 27 02 F6 | 	mov	local05, local02
18558     07 26 66 F0 | 	shl	local05, #7
1855c     10 27 82 F1 | 	sub	local05, local02
18560     C0 FF 7F FF 
18564     00 25 06 F6 | 	mov	local04, ##-32512
18568     13 25 02 F1 | 	add	local04, local05
1856c     11 25 52 FC | 	wrword	local04, local03
18570     09 22 C6 F9 | 	decod	local03, #9
18574     10 23 02 F1 | 	add	local03, local02
18578     01 22 66 F0 | 	shl	local03, #1
1857c     F2 22 02 F1 | 	add	local03, objptr
18580     10 25 02 F6 | 	mov	local04, local02
18584     01 24 66 F0 | 	shl	local04, #1
18588     F2 24 02 F1 | 	add	local04, objptr
1858c     12 25 E2 FA | 	rdword	local04, local04
18590     0F 24 66 F7 | 	signx	local04, #15
18594     12 25 62 F6 | 	neg	local04, local04
18598     11 25 52 FC | 	wrword	local04, local03
1859c     01 20 06 F1 | 	add	local02, #1
185a0     01 00 00 FF 
185a4     00 20 56 F2 | 	cmps	local02, ##512 wc
185a8     9C FF 9F CD |  if_b	jmp	#LR__1911
185ac                 | ' for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
185ac     00 20 06 F6 | 	mov	local02, #0
185b0     04 00 00 FF 
185b4     00 E4 05 F1 | 	add	objptr, ##2048
185b8                 | LR__1912
185b8     10 23 02 F6 | 	mov	local03, local02
185bc     01 22 66 F0 | 	shl	local03, #1
185c0     F2 22 02 F1 | 	add	local03, objptr
185c4     10 27 02 F6 | 	mov	local05, local02
185c8     06 26 66 F0 | 	shl	local05, #6
185cc     10 27 82 F1 | 	sub	local05, local02
185d0     C1 FF 7F FF 
185d4     00 24 06 F6 | 	mov	local04, ##-32256
185d8     13 25 02 F1 | 	add	local04, local05
185dc     11 25 52 FC | 	wrword	local04, local03
185e0     01 20 06 F1 | 	add	local02, #1
185e4     02 00 00 FF 
185e8     00 20 56 F2 | 	cmps	local02, ##1024 wc
185ec     C8 FF 9F CD |  if_b	jmp	#LR__1912
185f0                 | ' for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
185f0     00 20 06 F6 | 	mov	local02, #0
185f4     04 00 00 FF 
185f8     00 E4 05 F1 | 	add	objptr, ##2048
185fc                 | LR__1913
185fc     10 23 02 F6 | 	mov	local03, local02
18600     01 22 66 F0 | 	shl	local03, #1
18604     F2 22 02 F1 | 	add	local03, objptr
18608     40 00 80 FF 
1860c     11 51 59 FC | 	wrword	##32936, local03
18610     01 20 06 F1 | 	add	local02, #1
18614     80 20 56 F2 | 	cmps	local02, #128 wc
18618     E0 FF 9F CD |  if_b	jmp	#LR__1913
1861c                 | LR__1914
1861c     80 20 06 F6 | 	mov	local02, #128
18620     97 68 48 FB | 	callpa	#(@LR__1920-@LR__1915)>>2,fcache_load_ptr_
18624                 | LR__1915
18624     10 23 02 F6 | 	mov	local03, local02
18628     01 22 66 F0 | 	shl	local03, #1
1862c     F2 22 02 F1 | 	add	local03, objptr
18630     3F 00 80 FF 
18634     11 B1 5A FC | 	wrword	##32600, local03
18638     01 20 06 F1 | 	add	local02, #1
1863c     02 00 00 FF 
18640     00 20 16 F2 | 	cmp	local02, ##1024 wc
18644     DC FF 9F CD |  if_b	jmp	#LR__1915
18648                 | ' for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
18648     00 20 06 F6 | 	mov	local02, #0
1864c     04 00 00 FF 
18650     00 E4 05 F1 | 	add	objptr, ##2048
18654                 | LR__1916
18654     10 23 02 F6 | 	mov	local03, local02
18658     01 22 66 F0 | 	shl	local03, #1
1865c     F2 22 02 F1 | 	add	local03, objptr
18660     40 00 80 FF 
18664     11 51 59 FC | 	wrword	##32936, local03
18668     01 20 06 F1 | 	add	local02, #1
1866c     01 00 00 FF 
18670     00 20 56 F2 | 	cmps	local02, ##512 wc
18674     DC FF 9F CD |  if_b	jmp	#LR__1916
18678     09 20 C6 F9 | 	decod	local02, #9
1867c                 | LR__1917
1867c     10 23 02 F6 | 	mov	local03, local02
18680     01 22 66 F0 | 	shl	local03, #1
18684     F2 22 02 F1 | 	add	local03, objptr
18688     3F 00 80 FF 
1868c     11 B1 5A FC | 	wrword	##32600, local03
18690     01 20 06 F1 | 	add	local02, #1
18694     02 00 00 FF 
18698     00 20 16 F2 | 	cmp	local02, ##1024 wc
1869c     DC FF 9F CD |  if_b	jmp	#LR__1917
186a0                 | ' for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
186a0     00 20 06 F6 | 	mov	local02, #0
186a4     04 00 00 FF 
186a8     00 E4 05 F1 | 	add	objptr, ##2048
186ac                 | LR__1918
186ac     10 23 02 F6 | 	mov	local03, local02
186b0     01 22 66 F0 | 	shl	local03, #1
186b4     F2 22 02 F1 | 	add	local03, objptr
186b8     40 00 80 FF 
186bc     11 51 59 FC | 	wrword	##32936, local03
186c0     01 20 06 F1 | 	add	local02, #1
186c4     00 21 56 F2 | 	cmps	local02, #256 wc
186c8     E0 FF 9F CD |  if_b	jmp	#LR__1918
186cc     00 21 06 F6 | 	mov	local02, #256
186d0                 | LR__1919
186d0     10 23 02 F6 | 	mov	local03, local02
186d4     01 22 66 F0 | 	shl	local03, #1
186d8     F2 22 02 F1 | 	add	local03, objptr
186dc     3F 00 80 FF 
186e0     11 B1 5A FC | 	wrword	##32600, local03
186e4     01 20 06 F1 | 	add	local02, #1
186e8     02 00 00 FF 
186ec     00 20 16 F2 | 	cmp	local02, ##1024 wc
186f0     DC FF 9F CD |  if_b	jmp	#LR__1919
186f4                 | LR__1920
186f4                 | ' for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
186f4     00 20 06 F6 | 	mov	local02, #0
186f8     04 00 00 FF 
186fc     00 E4 05 F1 | 	add	objptr, ##2048
18700     14 00 00 FF 
18704     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
18708     97 1C 48 FB | 	callpa	#(@LR__1922-@LR__1921)>>2,fcache_load_ptr_
1870c                 | LR__1921
1870c     10 23 02 F6 | 	mov	local03, local02
18710     01 22 66 F0 | 	shl	local03, #1
18714     F2 22 02 F1 | 	add	local03, objptr
18718     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1871c     10 12 06 F1 | 	add	arg01, #16
18720     10 FB 01 F6 | 	mov	result1, local02
18724     01 FA 65 F0 | 	shl	result1, #1
18728     FD 12 02 F1 | 	add	arg01, result1
1872c     09 FB E1 FA | 	rdword	result1, arg01
18730     11 FB 51 FC | 	wrword	result1, local03
18734     01 20 06 F1 | 	add	local02, #1
18738     02 00 00 FF 
1873c     00 20 56 F2 | 	cmps	local02, ##1024 wc
18740     C8 FF 9F CD |  if_b	jmp	#LR__1921
18744                 | LR__1922
18744                 | ' for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
18744     00 20 06 F6 | 	mov	local02, #0
18748     04 00 00 FF 
1874c     00 E4 05 F1 | 	add	objptr, ##2048
18750     04 00 00 FF 
18754     10 EA 85 F1 | 	sub	ptr__dat__, ##2064
18758     97 1C 48 FB | 	callpa	#(@LR__1924-@LR__1923)>>2,fcache_load_ptr_
1875c                 | LR__1923
1875c     10 23 02 F6 | 	mov	local03, local02
18760     01 22 66 F0 | 	shl	local03, #1
18764     F2 22 02 F1 | 	add	local03, objptr
18768     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1876c     10 12 06 F1 | 	add	arg01, #16
18770     10 FB 01 F6 | 	mov	result1, local02
18774     01 FA 65 F0 | 	shl	result1, #1
18778     FD 12 02 F1 | 	add	arg01, result1
1877c     09 FB E1 FA | 	rdword	result1, arg01
18780     11 FB 51 FC | 	wrword	result1, local03
18784     01 20 06 F1 | 	add	local02, #1
18788     02 00 00 FF 
1878c     00 20 56 F2 | 	cmps	local02, ##1024 wc
18790     C8 FF 9F CD |  if_b	jmp	#LR__1923
18794                 | LR__1924
18794     10 00 00 FF 
18798     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
1879c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1879c     00 20 06 F6 | 	mov	local02, #0
187a0     04 00 00 FF 
187a4     00 E4 05 F1 | 	add	objptr, ##2048
187a8     97 18 48 FB | 	callpa	#(@LR__1926-@LR__1925)>>2,fcache_load_ptr_
187ac                 | LR__1925
187ac     10 23 02 F6 | 	mov	local03, local02
187b0     01 22 66 F0 | 	shl	local03, #1
187b4     F2 22 02 F1 | 	add	local03, objptr
187b8     10 27 02 F6 | 	mov	local05, local02
187bc     08 26 66 F0 | 	shl	local05, #8
187c0     7F 00 00 FF 
187c4     00 25 06 F6 | 	mov	local04, ##65280
187c8     13 25 82 F1 | 	sub	local04, local05
187cc     11 25 52 FC | 	wrword	local04, local03
187d0     01 20 06 F1 | 	add	local02, #1
187d4     00 21 56 F2 | 	cmps	local02, #256 wc
187d8     D0 FF 9F CD |  if_b	jmp	#LR__1925
187dc                 | LR__1926
187dc     2C 00 00 FF 
187e0     D8 E4 85 F1 | 	sub	objptr, ##22744
187e4                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
187e4     00 20 06 F6 | 	mov	local02, #0
187e8                 | LR__1927
187e8     10 23 02 F6 | 	mov	local03, local02
187ec     01 22 66 F0 | 	shl	local03, #1
187f0     2D 00 00 FF 
187f4     D8 E4 05 F1 | 	add	objptr, ##23256
187f8     F2 22 02 F1 | 	add	local03, objptr
187fc     80 BF 23 FF 
18800     00 12 06 F6 | 	mov	arg01, ##1199505408
18804     0F 15 02 F6 | 	mov	arg02, local01
18808     2D 00 00 FF 
1880c     D8 E4 85 F1 | 	sub	objptr, ##23256
18810     EC 73 B0 FD | 	call	#__system___float_mul
18814     FD 12 02 F6 | 	mov	arg01, result1
18818     01 14 06 F6 | 	mov	arg02, #1
1881c     A8 78 B0 FD | 	call	#__system___float_tointeger
18820     11 FB 51 FC | 	wrword	result1, local03
18824     0F 13 02 F6 | 	mov	arg01, local01
18828     CC BC 1F FF 
1882c     9A 15 06 F6 | 	mov	arg02, ##1064933786
18830     CC 73 B0 FD | 	call	#__system___float_mul
18834     FD 1E 02 F6 | 	mov	local01, result1
18838     01 20 06 F1 | 	add	local02, #1
1883c     00 21 56 F2 | 	cmps	local02, #256 wc
18840     A4 FF 9F CD |  if_b	jmp	#LR__1927
18844     2E 00 00 FF 
18848     D6 E4 05 F1 | 	add	objptr, ##23766
1884c     F2 00 58 FC | 	wrword	#0, objptr
18850                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
18850     00 20 06 F6 | 	mov	local02, #0
18854     02 E4 05 F1 | 	add	objptr, #2
18858     97 10 48 FB | 	callpa	#(@LR__1929-@LR__1928)>>2,fcache_load_ptr_
1885c                 | LR__1928
1885c     10 23 02 F6 | 	mov	local03, local02
18860     01 22 66 F0 | 	shl	local03, #1
18864     F2 22 02 F1 | 	add	local03, objptr
18868     7F 00 80 FF 
1886c     11 01 5A FC | 	wrword	##65280, local03
18870     01 20 06 F1 | 	add	local02, #1
18874     FF 20 56 F2 | 	cmps	local02, #255 wc
18878     E0 FF 9F CD |  if_b	jmp	#LR__1928
1887c                 | LR__1929
1887c     FE E5 05 F1 | 	add	objptr, #510
18880     F2 00 58 FC | 	wrword	#0, objptr
18884                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
18884     00 20 06 F6 | 	mov	local02, #0
18888     02 E4 05 F1 | 	add	objptr, #2
1888c     97 52 48 FB | 	callpa	#(@LR__1934-@LR__1930)>>2,fcache_load_ptr_
18890                 | LR__1930
18890     10 23 02 F6 | 	mov	local03, local02
18894     01 22 66 F0 | 	shl	local03, #1
18898     F2 22 02 F1 | 	add	local03, objptr
1889c     10 25 02 F6 | 	mov	local04, local02
188a0     0C 24 66 F0 | 	shl	local04, #12
188a4     11 25 52 FC | 	wrword	local04, local03
188a8     01 20 06 F1 | 	add	local02, #1
188ac     10 20 56 F2 | 	cmps	local02, #16 wc
188b0     DC FF 9F CD |  if_b	jmp	#LR__1930
188b4                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
188b4     10 20 06 F6 | 	mov	local02, #16
188b8                 | LR__1931
188b8     10 23 02 F6 | 	mov	local03, local02
188bc     01 22 66 F0 | 	shl	local03, #1
188c0     F2 22 02 F1 | 	add	local03, objptr
188c4     7F 00 80 FF 
188c8     11 01 5A FC | 	wrword	##65280, local03
188cc     01 20 06 F1 | 	add	local02, #1
188d0     F0 20 16 F2 | 	cmp	local02, #240 wc
188d4     E0 FF 9F CD |  if_b	jmp	#LR__1931
188d8                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
188d8     F0 20 06 F6 | 	mov	local02, #240
188dc                 | LR__1932
188dc     10 23 02 F6 | 	mov	local03, local02
188e0     01 22 66 F0 | 	shl	local03, #1
188e4     F2 22 02 F1 | 	add	local03, objptr
188e8     FF 26 06 F6 | 	mov	local05, #255
188ec     10 27 82 F1 | 	sub	local05, local02
188f0     0C 26 66 F0 | 	shl	local05, #12
188f4     11 27 52 FC | 	wrword	local05, local03
188f8     01 20 06 F1 | 	add	local02, #1
188fc     00 21 16 F2 | 	cmp	local02, #256 wc
18900     D8 FF 9F CD |  if_b	jmp	#LR__1932
18904                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
18904     00 20 06 F6 | 	mov	local02, #0
18908     01 00 00 FF 
1890c     00 E4 05 F1 | 	add	objptr, ##512
18910                 | LR__1933
18910     10 23 02 F6 | 	mov	local03, local02
18914     01 22 66 F0 | 	shl	local03, #1
18918     F2 22 02 F1 | 	add	local03, objptr
1891c     10 25 02 F6 | 	mov	local04, local02
18920     08 24 66 F0 | 	shl	local04, #8
18924     11 25 52 FC | 	wrword	local04, local03
18928     01 20 06 F1 | 	add	local02, #1
1892c     00 21 56 F2 | 	cmps	local02, #256 wc
18930     DC FF 9F CD |  if_b	jmp	#LR__1933
18934                 | LR__1934
18934     FE E5 05 F1 | 	add	objptr, #510
18938     F2 00 58 FC | 	wrword	#0, objptr
1893c                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1893c     00 20 06 F6 | 	mov	local02, #0
18940     02 E4 05 F1 | 	add	objptr, #2
18944     97 6A 48 FB | 	callpa	#(@LR__1939-@LR__1935)>>2,fcache_load_ptr_
18948                 | LR__1935
18948     10 23 02 F6 | 	mov	local03, local02
1894c     01 22 66 F0 | 	shl	local03, #1
18950     F2 22 02 F1 | 	add	local03, objptr
18954     10 25 02 F6 | 	mov	local04, local02
18958     04 24 66 F0 | 	shl	local04, #4
1895c     10 25 02 F1 | 	add	local04, local02
18960     04 24 66 F0 | 	shl	local04, #4
18964     11 25 52 FC | 	wrword	local04, local03
18968     01 20 06 F1 | 	add	local02, #1
1896c     F0 20 56 F2 | 	cmps	local02, #240 wc
18970     D4 FF 9F CD |  if_b	jmp	#LR__1935
18974     F0 20 06 F6 | 	mov	local02, #240
18978                 | LR__1936
18978     10 23 02 F6 | 	mov	local03, local02
1897c     01 22 66 F0 | 	shl	local03, #1
18980     F2 22 02 F1 | 	add	local03, objptr
18984     FF 26 06 F6 | 	mov	local05, #255
18988     10 27 82 F1 | 	sub	local05, local02
1898c     0C 26 66 F0 | 	shl	local05, #12
18990     11 27 52 FC | 	wrword	local05, local03
18994     01 20 06 F1 | 	add	local02, #1
18998     00 21 16 F2 | 	cmp	local02, #256 wc
1899c     D8 FF 9F CD |  if_b	jmp	#LR__1936
189a0                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
189a0     00 20 06 F6 | 	mov	local02, #0
189a4     01 00 00 FF 
189a8     00 E4 05 F1 | 	add	objptr, ##512
189ac                 | LR__1937
189ac     10 23 02 F6 | 	mov	local03, local02
189b0     01 22 66 F0 | 	shl	local03, #1
189b4     F2 22 02 F1 | 	add	local03, objptr
189b8     10 25 02 F6 | 	mov	local04, local02
189bc     09 24 66 F0 | 	shl	local04, #9
189c0     11 25 52 FC | 	wrword	local04, local03
189c4     FF 22 06 F6 | 	mov	local03, #255
189c8     10 23 82 F1 | 	sub	local03, local02
189cc     01 22 66 F0 | 	shl	local03, #1
189d0     F2 22 02 F1 | 	add	local03, objptr
189d4     10 25 02 F6 | 	mov	local04, local02
189d8     09 24 66 F0 | 	shl	local04, #9
189dc     11 25 52 FC | 	wrword	local04, local03
189e0     01 20 06 F1 | 	add	local02, #1
189e4     80 20 56 F2 | 	cmps	local02, #128 wc
189e8     C0 FF 9F CD |  if_b	jmp	#LR__1937
189ec                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
189ec     00 20 06 F6 | 	mov	local02, #0
189f0     01 00 00 FF 
189f4     00 E4 05 F1 | 	add	objptr, ##512
189f8                 | LR__1938
189f8     10 23 02 F6 | 	mov	local03, local02
189fc     01 22 66 F0 | 	shl	local03, #1
18a00     F2 22 02 F1 | 	add	local03, objptr
18a04     10 25 02 F6 | 	mov	local04, local02
18a08     0D 24 66 F0 | 	shl	local04, #13
18a0c     11 25 52 FC | 	wrword	local04, local03
18a10     01 20 06 F1 | 	add	local02, #1
18a14     08 20 56 F2 | 	cmps	local02, #8 wc
18a18     DC FF 9F CD |  if_b	jmp	#LR__1938
18a1c                 | LR__1939
18a1c                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
18a1c     08 20 06 F6 | 	mov	local02, #8
18a20     97 42 48 FB | 	callpa	#(@LR__1943-@LR__1940)>>2,fcache_load_ptr_
18a24                 | LR__1940
18a24     10 23 02 F6 | 	mov	local03, local02
18a28     01 22 66 F0 | 	shl	local03, #1
18a2c     F2 22 02 F1 | 	add	local03, objptr
18a30     10 1F 02 F6 | 	mov	local01, local02
18a34     08 1E 86 F1 | 	sub	local01, #8
18a38     0B 1E 66 F0 | 	shl	local01, #11
18a3c     7F 00 00 FF 
18a40     00 25 06 F6 | 	mov	local04, ##65280
18a44     0F 25 82 F1 | 	sub	local04, local01
18a48     11 25 52 FC | 	wrword	local04, local03
18a4c     01 20 06 F1 | 	add	local02, #1
18a50     18 20 16 F2 | 	cmp	local02, #24 wc
18a54     CC FF 9F CD |  if_b	jmp	#LR__1940
18a58                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
18a58     18 20 06 F6 | 	mov	local02, #24
18a5c                 | LR__1941
18a5c     10 23 02 F6 | 	mov	local03, local02
18a60     01 22 66 F0 | 	shl	local03, #1
18a64     F2 22 02 F1 | 	add	local03, objptr
18a68     40 00 80 FF 
18a6c     11 01 58 FC | 	wrword	##32768, local03
18a70     01 20 06 F1 | 	add	local02, #1
18a74     81 20 16 F2 | 	cmp	local02, #129 wc
18a78     E0 FF 9F CD |  if_b	jmp	#LR__1941
18a7c                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
18a7c     81 20 06 F6 | 	mov	local02, #129
18a80                 | LR__1942
18a80     10 23 02 F6 | 	mov	local03, local02
18a84     01 22 66 F0 | 	shl	local03, #1
18a88     F2 22 02 F1 | 	add	local03, objptr
18a8c     FF 26 06 F6 | 	mov	local05, #255
18a90     10 27 82 F1 | 	sub	local05, local02
18a94     08 26 66 F0 | 	shl	local05, #8
18a98     11 27 52 FC | 	wrword	local05, local03
18a9c     01 20 06 F1 | 	add	local02, #1
18aa0     00 21 16 F2 | 	cmp	local02, #256 wc
18aa4     D8 FF 9F CD |  if_b	jmp	#LR__1942
18aa8                 | LR__1943
18aa8     47 00 00 FF 
18aac     BA E5 05 F1 | 	add	objptr, ##36794
18ab0     F2 00 59 FC | 	wrword	#128, objptr
18ab4     7B 00 00 FF 
18ab8     92 E4 85 F1 | 	sub	objptr, ##63122
18abc                 | ' for i=0 to 7
18abc     00 20 06 F6 | 	mov	local02, #0
18ac0     97 8E 48 FB | 	callpa	#(@LR__1945-@LR__1944)>>2,fcache_load_ptr_
18ac4                 | LR__1944
18ac4     10 23 02 F6 | 	mov	local03, local02
18ac8     01 22 66 F0 | 	shl	local03, #1
18acc     10 23 02 F1 | 	add	local03, local02
18ad0     03 22 66 F0 | 	shl	local03, #3
18ad4     34 00 00 FF 
18ad8     38 E5 05 F1 | 	add	objptr, ##26936
18adc     F2 22 02 F1 | 	add	local03, objptr
18ae0     00 EE A1 FF 
18ae4     11 01 68 FC | 	wrlong	##1138491392, local03
18ae8     10 23 02 F6 | 	mov	local03, local02
18aec     01 22 66 F0 | 	shl	local03, #1
18af0     10 23 02 F1 | 	add	local03, local02
18af4     03 22 66 F0 | 	shl	local03, #3
18af8     F2 22 02 F1 | 	add	local03, objptr
18afc     04 22 06 F1 | 	add	local03, #4
18b00     11 21 42 FC | 	wrbyte	local02, local03
18b04     10 23 02 F6 | 	mov	local03, local02
18b08     01 22 66 F0 | 	shl	local03, #1
18b0c     10 23 02 F1 | 	add	local03, local02
18b10     03 22 66 F0 | 	shl	local03, #3
18b14     F2 22 02 F1 | 	add	local03, objptr
18b18     05 22 06 F1 | 	add	local03, #5
18b1c     11 21 42 FC | 	wrbyte	local02, local03
18b20     10 23 02 F6 | 	mov	local03, local02
18b24     01 22 66 F0 | 	shl	local03, #1
18b28     10 23 02 F1 | 	add	local03, local02
18b2c     03 22 66 F0 | 	shl	local03, #3
18b30     F2 22 02 F1 | 	add	local03, objptr
18b34     06 22 06 F1 | 	add	local03, #6
18b38     11 01 58 FC | 	wrword	#0, local03
18b3c     10 23 02 F6 | 	mov	local03, local02
18b40     01 22 66 F0 | 	shl	local03, #1
18b44     10 23 02 F1 | 	add	local03, local02
18b48     03 22 66 F0 | 	shl	local03, #3
18b4c     F2 22 02 F1 | 	add	local03, objptr
18b50     08 22 06 F1 | 	add	local03, #8
18b54     00 C0 9F FF 
18b58     11 01 68 FC | 	wrlong	##1065353216, local03
18b5c     10 23 02 F6 | 	mov	local03, local02
18b60     01 22 66 F0 | 	shl	local03, #1
18b64     10 23 02 F1 | 	add	local03, local02
18b68     03 22 66 F0 | 	shl	local03, #3
18b6c     F2 22 02 F1 | 	add	local03, objptr
18b70     0C 22 06 F1 | 	add	local03, #12
18b74     00 40 A0 FF 
18b78     11 01 68 FC | 	wrlong	##1082130432, local03
18b7c     10 23 02 F6 | 	mov	local03, local02
18b80     01 22 66 F0 | 	shl	local03, #1
18b84     10 23 02 F1 | 	add	local03, local02
18b88     03 22 66 F0 | 	shl	local03, #3
18b8c     F2 22 02 F1 | 	add	local03, objptr
18b90     10 22 06 F1 | 	add	local03, #16
18b94     11 01 68 FC | 	wrlong	#0, local03
18b98     10 23 02 F6 | 	mov	local03, local02
18b9c     01 22 66 F0 | 	shl	local03, #1
18ba0     10 23 02 F1 | 	add	local03, local02
18ba4     03 22 66 F0 | 	shl	local03, #3
18ba8     F2 22 02 F1 | 	add	local03, objptr
18bac     14 22 06 F1 | 	add	local03, #20
18bb0     11 FF 59 FC | 	wrword	#255, local03
18bb4     10 23 02 F6 | 	mov	local03, local02
18bb8     01 22 66 F0 | 	shl	local03, #1
18bbc     46 00 00 FF 
18bc0     4C E5 05 F1 | 	add	objptr, ##36172
18bc4     F2 22 02 F1 | 	add	local03, objptr
18bc8     11 FF 59 FC | 	wrword	#255, local03
18bcc     01 20 06 F1 | 	add	local02, #1
18bd0     08 20 56 F2 | 	cmps	local02, #8 wc
18bd4     7B 00 00 FF 
18bd8     84 E4 85 F1 | 	sub	objptr, ##63108
18bdc     E4 FE 9F CD |  if_b	jmp	#LR__1944
18be0                 | LR__1945
18be0     00 6E 20 FF 
18be4     00 1E 06 F6 | 	mov	local01, ##1088159744
18be8                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
18be8     03 26 06 F6 | 	mov	local05, #3
18bec                 | LR__1946
18bec     0F 13 02 F6 | 	mov	arg01, local01
18bf0     CE C3 1F FF 
18bf4     7D 14 06 F6 | 	mov	arg02, ##1065852029
18bf8     04 70 B0 FD | 	call	#__system___float_mul
18bfc     FD 1E 02 F6 | 	mov	local01, result1
18c00     FA 27 6E FB | 	djnz	local05, #LR__1946
18c04     00 20 06 F6 | 	mov	local02, #0
18c08                 | LR__1947
18c08     10 27 02 F6 | 	mov	local05, local02
18c0c     02 26 66 F0 | 	shl	local05, #2
18c10     34 00 00 FF 
18c14     D8 E4 05 F1 | 	add	objptr, ##26840
18c18     F2 26 02 F1 | 	add	local05, objptr
18c1c     13 1F 62 FC | 	wrlong	local01, local05
18c20     0F 13 02 F6 | 	mov	arg01, local01
18c24     CE C3 1F FF 
18c28     7D 14 06 F6 | 	mov	arg02, ##1065852029
18c2c     34 00 00 FF 
18c30     D8 E4 85 F1 | 	sub	objptr, ##26840
18c34     C8 6F B0 FD | 	call	#__system___float_mul
18c38     FD 1E 02 F6 | 	mov	local01, result1
18c3c     01 20 06 F1 | 	add	local02, #1
18c40     0C 20 56 F2 | 	cmps	local02, #12 wc
18c44     C0 FF 9F CD |  if_b	jmp	#LR__1947
18c48     7B 00 00 FF 
18c4c     92 E4 05 F1 | 	add	objptr, ##63122
18c50     F2 00 59 FC | 	wrword	#128, objptr
18c54     02 E4 85 F1 | 	sub	objptr, #2
18c58     F2 00 59 FC | 	wrword	#128, objptr
18c5c     7B 00 00 FF 
18c60     90 E4 85 F1 | 	sub	objptr, ##63120
18c64     A7 F0 03 F6 | 	mov	ptra, fp
18c68     B2 00 A0 FD | 	call	#popregs_
18c6c                 | _init_audio_ret
18c6c     2D 00 64 FD | 	ret
18c70                 | 
18c70                 | ' 
18c70                 | ' 
18c70                 | ' function getnoteval(token) as single
18c70                 | _getnoteval
18c70     02 4A 05 F6 | 	mov	COUNT_, #2
18c74     A8 00 A0 FD | 	call	#pushregs_
18c78     01 00 00 FF 
18c7c     00 13 86 F1 | 	sub	arg01, ##768
18c80     09 15 52 F6 | 	abs	arg02, arg01 wc
18c84     0C 14 16 FD | 	qdiv	arg02, #12
18c88     34 00 00 FF 
18c8c     D8 E4 05 F1 | 	add	objptr, ##26840
18c90     19 14 62 FD | 	getqy	arg02
18c94     0A 15 82 F6 | 	negc	arg02, arg02
18c98     02 14 66 F0 | 	shl	arg02, #2
18c9c     F2 14 02 F1 | 	add	arg02, objptr
18ca0     0A 1F 02 FB | 	rdlong	local01, arg02
18ca4     09 15 52 F6 | 	abs	arg02, arg01 wc
18ca8     0C 14 16 FD | 	qdiv	arg02, #12
18cac     34 00 00 FF 
18cb0     D8 E4 85 F1 | 	sub	objptr, ##26840
18cb4     01 12 06 F6 | 	mov	arg01, #1
18cb8                 | ' noteexp=1+(note/12) 
18cb8                 | ' return (2.0^noteexp)*notebase
18cb8     18 14 62 FD | 	getqx	arg02
18cbc     0A 13 82 F3 | 	sumc	arg01, arg02
18cc0     09 13 52 F6 | 	abs	arg01, arg01 wc
18cc4     1F 20 C6 C9 |  if_b	decod	local02, #31
18cc8     00 20 06 36 |  if_ae	mov	local02, #0
18ccc     2C 6B B0 FD | 	call	#__system___float_fromuns
18cd0     10 FB 61 F5 | 	xor	result1, local02
18cd4     FD 14 02 F6 | 	mov	arg02, result1
18cd8     1E 12 C6 F9 | 	decod	arg01, #30
18cdc     04 7E B0 FD | 	call	#__system____builtin_powf
18ce0     FD 12 02 F6 | 	mov	arg01, result1
18ce4     0F 15 02 F6 | 	mov	arg02, local01
18ce8     14 6F B0 FD | 	call	#__system___float_mul
18cec     A7 F0 03 F6 | 	mov	ptra, fp
18cf0     B2 00 A0 FD | 	call	#popregs_
18cf4                 | _getnoteval_ret
18cf4     2D 00 64 FD | 	ret
18cf8                 | 
18cf8                 | ' 
18cf8                 | ' 
18cf8                 | ' 
18cf8                 | ' sub init_error_strings
18cf8                 | _init_error_strings
18cf8     66 01 00 FF 
18cfc     91 01 06 F6 | 	mov	_var01, ##@LR__5001
18d00     65 00 00 FF 
18d04     6C E4 05 F1 | 	add	objptr, ##51820
18d08     F2 00 62 FC | 	wrlong	_var01, objptr
18d0c     66 01 00 FF 
18d10     92 01 06 F6 | 	mov	_var01, ##@LR__5002
18d14     04 E4 05 F1 | 	add	objptr, #4
18d18     F2 00 62 FC | 	wrlong	_var01, objptr
18d1c     66 01 00 FF 
18d20     B7 01 06 F6 | 	mov	_var01, ##@LR__5003
18d24     04 E4 05 F1 | 	add	objptr, #4
18d28     F2 00 62 FC | 	wrlong	_var01, objptr
18d2c     66 01 00 FF 
18d30     D8 01 06 F6 | 	mov	_var01, ##@LR__5004
18d34     04 E4 05 F1 | 	add	objptr, #4
18d38     F2 00 62 FC | 	wrlong	_var01, objptr
18d3c     66 01 00 FF 
18d40     F2 01 06 F6 | 	mov	_var01, ##@LR__5005
18d44     04 E4 05 F1 | 	add	objptr, #4
18d48     F2 00 62 FC | 	wrlong	_var01, objptr
18d4c     67 01 00 FF 
18d50     0E 00 06 F6 | 	mov	_var01, ##@LR__5006
18d54     04 E4 05 F1 | 	add	objptr, #4
18d58     F2 00 62 FC | 	wrlong	_var01, objptr
18d5c     67 01 00 FF 
18d60     30 00 06 F6 | 	mov	_var01, ##@LR__5007
18d64     04 E4 05 F1 | 	add	objptr, #4
18d68     F2 00 62 FC | 	wrlong	_var01, objptr
18d6c     67 01 00 FF 
18d70     5E 00 06 F6 | 	mov	_var01, ##@LR__5008
18d74     04 E4 05 F1 | 	add	objptr, #4
18d78     F2 00 62 FC | 	wrlong	_var01, objptr
18d7c     67 01 00 FF 
18d80     89 00 06 F6 | 	mov	_var01, ##@LR__5009
18d84     04 E4 05 F1 | 	add	objptr, #4
18d88     F2 00 62 FC | 	wrlong	_var01, objptr
18d8c     67 01 00 FF 
18d90     A2 00 06 F6 | 	mov	_var01, ##@LR__5010
18d94     04 E4 05 F1 | 	add	objptr, #4
18d98     F2 00 62 FC | 	wrlong	_var01, objptr
18d9c     67 01 00 FF 
18da0     C3 00 06 F6 | 	mov	_var01, ##@LR__5011
18da4     04 E4 05 F1 | 	add	objptr, #4
18da8     F2 00 62 FC | 	wrlong	_var01, objptr
18dac     67 01 00 FF 
18db0     DA 00 06 F6 | 	mov	_var01, ##@LR__5012
18db4     04 E4 05 F1 | 	add	objptr, #4
18db8     F2 00 62 FC | 	wrlong	_var01, objptr
18dbc     67 01 00 FF 
18dc0     F8 00 06 F6 | 	mov	_var01, ##@LR__5013
18dc4     04 E4 05 F1 | 	add	objptr, #4
18dc8     F2 00 62 FC | 	wrlong	_var01, objptr
18dcc     67 01 00 FF 
18dd0     1C 01 06 F6 | 	mov	_var01, ##@LR__5014
18dd4     04 E4 05 F1 | 	add	objptr, #4
18dd8     F2 00 62 FC | 	wrlong	_var01, objptr
18ddc     67 01 00 FF 
18de0     43 01 06 F6 | 	mov	_var01, ##@LR__5015
18de4     04 E4 05 F1 | 	add	objptr, #4
18de8     F2 00 62 FC | 	wrlong	_var01, objptr
18dec     67 01 00 FF 
18df0     5F 01 06 F6 | 	mov	_var01, ##@LR__5016
18df4     04 E4 05 F1 | 	add	objptr, #4
18df8     F2 00 62 FC | 	wrlong	_var01, objptr
18dfc     67 01 00 FF 
18e00     70 01 06 F6 | 	mov	_var01, ##@LR__5017
18e04     04 E4 05 F1 | 	add	objptr, #4
18e08     F2 00 62 FC | 	wrlong	_var01, objptr
18e0c     67 01 00 FF 
18e10     80 01 06 F6 | 	mov	_var01, ##@LR__5018
18e14     04 E4 05 F1 | 	add	objptr, #4
18e18     F2 00 62 FC | 	wrlong	_var01, objptr
18e1c     67 01 00 FF 
18e20     9B 01 06 F6 | 	mov	_var01, ##@LR__5019
18e24     04 E4 05 F1 | 	add	objptr, #4
18e28     F2 00 62 FC | 	wrlong	_var01, objptr
18e2c     67 01 00 FF 
18e30     AD 01 06 F6 | 	mov	_var01, ##@LR__5020
18e34     04 E4 05 F1 | 	add	objptr, #4
18e38     F2 00 62 FC | 	wrlong	_var01, objptr
18e3c     67 01 00 FF 
18e40     C5 01 06 F6 | 	mov	_var01, ##@LR__5021
18e44     04 E4 05 F1 | 	add	objptr, #4
18e48     F2 00 62 FC | 	wrlong	_var01, objptr
18e4c     67 01 00 FF 
18e50     D9 01 06 F6 | 	mov	_var01, ##@LR__5022
18e54     04 E4 05 F1 | 	add	objptr, #4
18e58     F2 00 62 FC | 	wrlong	_var01, objptr
18e5c     67 01 00 FF 
18e60     E9 01 06 F6 | 	mov	_var01, ##@LR__5023
18e64     04 E4 05 F1 | 	add	objptr, #4
18e68     F2 00 62 FC | 	wrlong	_var01, objptr
18e6c     68 01 00 FF 
18e70     06 00 06 F6 | 	mov	_var01, ##@LR__5024
18e74     04 E4 05 F1 | 	add	objptr, #4
18e78     F2 00 62 FC | 	wrlong	_var01, objptr
18e7c     68 01 00 FF 
18e80     17 00 06 F6 | 	mov	_var01, ##@LR__5025
18e84     04 E4 05 F1 | 	add	objptr, #4
18e88     F2 00 62 FC | 	wrlong	_var01, objptr
18e8c     68 01 00 FF 
18e90     28 00 06 F6 | 	mov	_var01, ##@LR__5026
18e94     04 E4 05 F1 | 	add	objptr, #4
18e98     F2 00 62 FC | 	wrlong	_var01, objptr
18e9c     68 01 00 FF 
18ea0     53 00 06 F6 | 	mov	_var01, ##@LR__5027
18ea4     04 E4 05 F1 | 	add	objptr, #4
18ea8     F2 00 62 FC | 	wrlong	_var01, objptr
18eac     68 01 00 FF 
18eb0     6F 00 06 F6 | 	mov	_var01, ##@LR__5028
18eb4     04 E4 05 F1 | 	add	objptr, #4
18eb8     F2 00 62 FC | 	wrlong	_var01, objptr
18ebc     68 01 00 FF 
18ec0     85 00 06 F6 | 	mov	_var01, ##@LR__5029
18ec4     04 E4 05 F1 | 	add	objptr, #4
18ec8     F2 00 62 FC | 	wrlong	_var01, objptr
18ecc     68 01 00 FF 
18ed0     92 00 06 F6 | 	mov	_var01, ##@LR__5030
18ed4     04 E4 05 F1 | 	add	objptr, #4
18ed8     F2 00 62 FC | 	wrlong	_var01, objptr
18edc     68 01 00 FF 
18ee0     A4 00 06 F6 | 	mov	_var01, ##@LR__5031
18ee4     04 E4 05 F1 | 	add	objptr, #4
18ee8     F2 00 62 FC | 	wrlong	_var01, objptr
18eec     68 01 00 FF 
18ef0     B5 00 06 F6 | 	mov	_var01, ##@LR__5032
18ef4     04 E4 05 F1 | 	add	objptr, #4
18ef8     F2 00 62 FC | 	wrlong	_var01, objptr
18efc     68 01 00 FF 
18f00     D1 00 06 F6 | 	mov	_var01, ##@LR__5033
18f04     04 E4 05 F1 | 	add	objptr, #4
18f08     F2 00 62 FC | 	wrlong	_var01, objptr
18f0c     68 01 00 FF 
18f10     E2 00 06 F6 | 	mov	_var01, ##@LR__5034
18f14     04 E4 05 F1 | 	add	objptr, #4
18f18     F2 00 62 FC | 	wrlong	_var01, objptr
18f1c     68 01 00 FF 
18f20     F1 00 06 F6 | 	mov	_var01, ##@LR__5035
18f24     04 E4 05 F1 | 	add	objptr, #4
18f28     F2 00 62 FC | 	wrlong	_var01, objptr
18f2c     68 01 00 FF 
18f30     0C 01 06 F6 | 	mov	_var01, ##@LR__5036
18f34     04 E4 05 F1 | 	add	objptr, #4
18f38     F2 00 62 FC | 	wrlong	_var01, objptr
18f3c     68 01 00 FF 
18f40     40 01 06 F6 | 	mov	_var01, ##@LR__5037
18f44     04 E4 05 F1 | 	add	objptr, #4
18f48     F2 00 62 FC | 	wrlong	_var01, objptr
18f4c     68 01 00 FF 
18f50     59 01 06 F6 | 	mov	_var01, ##@LR__5038
18f54     04 E4 05 F1 | 	add	objptr, #4
18f58     F2 00 62 FC | 	wrlong	_var01, objptr
18f5c     68 01 00 FF 
18f60     75 01 06 F6 | 	mov	_var01, ##@LR__5039
18f64     04 E4 05 F1 | 	add	objptr, #4
18f68     F2 00 62 FC | 	wrlong	_var01, objptr
18f6c     68 01 00 FF 
18f70     93 01 06 F6 | 	mov	_var01, ##@LR__5040
18f74     04 E4 05 F1 | 	add	objptr, #4
18f78     F2 00 62 FC | 	wrlong	_var01, objptr
18f7c     68 01 00 FF 
18f80     AC 01 06 F6 | 	mov	_var01, ##@LR__5041
18f84     04 E4 05 F1 | 	add	objptr, #4
18f88     F2 00 62 FC | 	wrlong	_var01, objptr
18f8c     68 01 00 FF 
18f90     CB 01 06 F6 | 	mov	_var01, ##@LR__5042
18f94     04 E4 05 F1 | 	add	objptr, #4
18f98     F2 00 62 FC | 	wrlong	_var01, objptr
18f9c     68 01 00 FF 
18fa0     DA 01 06 F6 | 	mov	_var01, ##@LR__5043
18fa4     04 E4 05 F1 | 	add	objptr, #4
18fa8     F2 00 62 FC | 	wrlong	_var01, objptr
18fac     69 01 00 FF 
18fb0     08 00 06 F6 | 	mov	_var01, ##@LR__5044
18fb4     04 E4 05 F1 | 	add	objptr, #4
18fb8     F2 00 62 FC | 	wrlong	_var01, objptr
18fbc     69 01 00 FF 
18fc0     16 00 06 F6 | 	mov	_var01, ##@LR__5045
18fc4     04 E4 05 F1 | 	add	objptr, #4
18fc8     F2 00 62 FC | 	wrlong	_var01, objptr
18fcc     69 01 00 FF 
18fd0     2B 00 06 F6 | 	mov	_var01, ##@LR__5046
18fd4     04 E4 05 F1 | 	add	objptr, #4
18fd8     F2 00 62 FC | 	wrlong	_var01, objptr
18fdc     69 01 00 FF 
18fe0     4F 00 06 F6 | 	mov	_var01, ##@LR__5047
18fe4     04 E4 05 F1 | 	add	objptr, #4
18fe8     F2 00 62 FC | 	wrlong	_var01, objptr
18fec     69 01 00 FF 
18ff0     66 00 06 F6 | 	mov	_var01, ##@LR__5048
18ff4     04 E4 05 F1 | 	add	objptr, #4
18ff8     F2 00 62 FC | 	wrlong	_var01, objptr
18ffc     69 01 00 FF 
19000     79 00 06 F6 | 	mov	_var01, ##@LR__5049
19004     04 E4 05 F1 | 	add	objptr, #4
19008     F2 00 62 FC | 	wrlong	_var01, objptr
1900c     69 01 00 FF 
19010     90 00 06 F6 | 	mov	_var01, ##@LR__5050
19014     04 E4 05 F1 | 	add	objptr, #4
19018     F2 00 62 FC | 	wrlong	_var01, objptr
1901c     65 00 00 FF 
19020     30 E5 85 F1 | 	sub	objptr, ##52016
19024                 | _init_error_strings_ret
19024     2D 00 64 FD | 	ret
19028                 | 
19028                 | '         
19028                 | ' sub printerror(err as integer)
19028                 | _printerror
19028     01 4A 05 F6 | 	mov	COUNT_, #1
1902c     A8 00 A0 FD | 	call	#pushregs_
19030     09 1F 02 F6 | 	mov	local01, arg01
19034     69 01 00 FF 
19038     A9 12 06 F6 | 	mov	arg01, ##@LR__5051
1903c     98 2D B0 FD | 	call	#_hg010b_spin2_write
19040     0F 13 02 F6 | 	mov	arg01, local01
19044     00 31 B0 FD | 	call	#_hg010b_spin2_inttostr
19048     FD 12 02 F6 | 	mov	arg01, result1
1904c     88 2D B0 FD | 	call	#_hg010b_spin2_write
19050     69 01 00 FF 
19054     B0 12 06 F6 | 	mov	arg01, ##@LR__5052
19058     7C 2D B0 FD | 	call	#_hg010b_spin2_write
1905c     02 1E 66 F0 | 	shl	local01, #2
19060     65 00 00 FF 
19064     6C E4 05 F1 | 	add	objptr, ##51820
19068     F2 1E 02 F1 | 	add	local01, objptr
1906c     0F 13 02 FB | 	rdlong	arg01, local01
19070     65 00 00 FF 
19074     6C E4 85 F1 | 	sub	objptr, ##51820
19078                 | ' 
19078                 | ' write(text)
19078     5C 2D B0 FD | 	call	#_hg010b_spin2_write
1907c                 | ' crlf
1907c     24 30 B0 FD | 	call	#_hg010b_spin2_crlf
19080     A7 F0 03 F6 | 	mov	ptra, fp
19084     B2 00 A0 FD | 	call	#popregs_
19088                 | _printerror_ret
19088     2D 00 64 FD | 	ret
1908c                 | 
1908c                 | ' 
1908c                 | ' '' ------------------------------- Hardware start/stop/initialization 
1908c                 | ' 
1908c                 | ' sub startpsram
1908c                 | _startpsram
1908c     00 12 06 F6 | 	mov	arg01, #0
19090     0A 14 C6 F9 | 	decod	arg02, #10
19094     0B 16 06 F6 | 	mov	arg03, #11
19098     07 18 06 F6 | 	mov	arg04, #7
1909c     0B 00 00 FF 
190a0     CC E4 05 F1 | 	add	objptr, ##5836
190a4     AC 31 B0 FD | 	call	#_psram_spin2_startx
190a8     4B 00 00 FF 
190ac     2C E5 05 F1 | 	add	objptr, ##38700
190b0     F2 FA 61 FC | 	wrlong	result1, objptr
190b4                 | '     return $7FF00 + cog*12
190b4     0C E4 05 F1 | 	add	objptr, #12
190b8     FF 03 80 FF 
190bc     F2 00 6A FC | 	wrlong	##524032, objptr
190c0     57 00 00 FF 
190c4     04 E4 85 F1 | 	sub	objptr, ##44548
190c8                 | _startpsram_ret
190c8     2D 00 64 FD | 	ret
190cc                 | 
190cc                 | ' 
190cc                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
190cc                 | _startvideo
190cc     01 4A 05 F6 | 	mov	COUNT_, #1
190d0     A8 00 A0 FD | 	call	#pushregs_
190d4     57 00 00 FF 
190d8     04 E4 05 F1 | 	add	objptr, ##44548
190dc     F2 18 02 FB | 	rdlong	arg04, objptr
190e0     57 00 00 FF 
190e4     04 E4 85 F1 | 	sub	objptr, ##44548
190e8     0A 13 02 F6 | 	mov	arg01, arg02
190ec     0C 15 02 F6 | 	mov	arg02, arg04
190f0     DC 14 B0 FD | 	call	#_hg010b_spin2_start
190f4     56 00 00 FF 
190f8     F0 E5 05 F1 | 	add	objptr, ##44528
190fc     F2 FA 61 FC | 	wrlong	result1, objptr
19100                 | ' 
19100                 | ' videocog=v.start(pin,mbox)
19100                 | ' 
19100                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
19100     00 1E 06 F6 | 	mov	local01, #0
19104     4B 00 00 FF 
19108     24 E5 85 F1 | 	sub	objptr, ##38692
1910c                 | LR__1950
1910c     0F 13 02 F6 | 	mov	arg01, local01
19110     00 28 00 FF 
19114     00 14 06 F6 | 	mov	arg02, ##5242880
19118     90 35 B0 FD | 	call	#_psram_spin2_setQos
1911c     01 1E 06 F1 | 	add	local01, #1
19120     08 1E 56 F2 | 	cmps	local01, #8 wc
19124     E4 FF 9F CD |  if_b	jmp	#LR__1950
19128     4B 00 00 FF 
1912c     24 E5 05 F1 | 	add	objptr, ##38692
19130     F2 12 02 FB | 	rdlong	arg01, objptr
19134     7A 00 02 FF 
19138     00 14 06 F6 | 	mov	arg02, ##67171328
1913c     4B 00 00 FF 
19140     24 E5 85 F1 | 	sub	objptr, ##38692
19144     64 35 B0 FD | 	call	#_psram_spin2_setQos
19148     0B 00 00 FF 
1914c     CC E4 85 F1 | 	sub	objptr, ##5836
19150                 | ' psram.setQoS(videocog, $0400f400) 
19150                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
19150     F2 14 02 F6 | 	mov	arg02, objptr
19154     00 B8 03 FF 
19158     00 14 46 F5 | 	or	arg02, ##124780544
1915c     00 16 06 F6 | 	mov	arg03, #0
19160     00 18 06 F6 | 	mov	arg04, #0
19164     00 12 06 F6 | 	mov	arg01, #0
19168     C0 49 B0 FD | 	call	#__system___basic_open
1916c                 | ' return videocog
1916c     56 00 00 FF 
19170     F0 E5 05 F1 | 	add	objptr, ##44528
19174     F2 FA 01 FB | 	rdlong	result1, objptr
19178     56 00 00 FF 
1917c     F0 E5 85 F1 | 	sub	objptr, ##44528
19180     A7 F0 03 F6 | 	mov	ptra, fp
19184     B2 00 A0 FD | 	call	#popregs_
19188                 | _startvideo_ret
19188     2D 00 64 FD | 	ret
1918c                 | 
1918c                 | ' 
1918c                 | ' 
1918c                 | ' 
1918c                 | ' 
1918c                 | ' '' ------------------------------- Convenient psram peek/poke
1918c                 | ' 
1918c                 | ' sub pslpoke(addr as ulong,value as ulong)
1918c                 | _pslpoke
1918c     00 4A 05 F6 | 	mov	COUNT_, #0
19190     A8 00 A0 FD | 	call	#pushregs_
19194     08 F0 07 F1 | 	add	ptra, #8
19198     A7 12 62 FC | 	wrlong	arg01, fp
1919c     04 4E 05 F1 | 	add	fp, #4
191a0     A7 14 62 FC | 	wrlong	arg02, fp
191a4     A7 12 02 F6 | 	mov	arg01, fp
191a8     04 4E 85 F1 | 	sub	fp, #4
191ac     A7 14 02 FB | 	rdlong	arg02, fp
191b0     04 16 06 F6 | 	mov	arg03, #4
191b4     0B 00 00 FF 
191b8     CC E4 05 F1 | 	add	objptr, ##5836
191bc     5C 33 B0 FD | 	call	#_psram_spin2_write
191c0     0B 00 00 FF 
191c4     CC E4 85 F1 | 	sub	objptr, ##5836
191c8     A7 F0 03 F6 | 	mov	ptra, fp
191cc     B2 00 A0 FD | 	call	#popregs_
191d0                 | _pslpoke_ret
191d0     2D 00 64 FD | 	ret
191d4                 | 
191d4                 | ' 
191d4                 | ' sub psdpoke(addr as ulong,value as ulong)
191d4                 | _psdpoke
191d4     00 4A 05 F6 | 	mov	COUNT_, #0
191d8     A8 00 A0 FD | 	call	#pushregs_
191dc     08 F0 07 F1 | 	add	ptra, #8
191e0     A7 12 62 FC | 	wrlong	arg01, fp
191e4     04 4E 05 F1 | 	add	fp, #4
191e8     A7 14 62 FC | 	wrlong	arg02, fp
191ec     A7 12 02 F6 | 	mov	arg01, fp
191f0     04 4E 85 F1 | 	sub	fp, #4
191f4     A7 14 02 FB | 	rdlong	arg02, fp
191f8     02 16 06 F6 | 	mov	arg03, #2
191fc     0B 00 00 FF 
19200     CC E4 05 F1 | 	add	objptr, ##5836
19204     14 33 B0 FD | 	call	#_psram_spin2_write
19208     0B 00 00 FF 
1920c     CC E4 85 F1 | 	sub	objptr, ##5836
19210     A7 F0 03 F6 | 	mov	ptra, fp
19214     B2 00 A0 FD | 	call	#popregs_
19218                 | _psdpoke_ret
19218     2D 00 64 FD | 	ret
1921c                 | 
1921c                 | ' 
1921c                 | ' sub pspoke(addr as ulong,value as ulong)
1921c                 | _pspoke
1921c     00 4A 05 F6 | 	mov	COUNT_, #0
19220     A8 00 A0 FD | 	call	#pushregs_
19224     08 F0 07 F1 | 	add	ptra, #8
19228     A7 12 62 FC | 	wrlong	arg01, fp
1922c     04 4E 05 F1 | 	add	fp, #4
19230     A7 14 62 FC | 	wrlong	arg02, fp
19234     A7 12 02 F6 | 	mov	arg01, fp
19238     04 4E 85 F1 | 	sub	fp, #4
1923c     A7 14 02 FB | 	rdlong	arg02, fp
19240     01 16 06 F6 | 	mov	arg03, #1
19244     0B 00 00 FF 
19248     CC E4 05 F1 | 	add	objptr, ##5836
1924c     CC 32 B0 FD | 	call	#_psram_spin2_write
19250     0B 00 00 FF 
19254     CC E4 85 F1 | 	sub	objptr, ##5836
19258     A7 F0 03 F6 | 	mov	ptra, fp
1925c     B2 00 A0 FD | 	call	#popregs_
19260                 | _pspoke_ret
19260     2D 00 64 FD | 	ret
19264                 | 
19264                 | ' 
19264                 | ' function pspeek(adr as ulong) as ubyte
19264                 | _pspeek
19264     00 4A 05 F6 | 	mov	COUNT_, #0
19268     A8 00 A0 FD | 	call	#pushregs_
1926c     0C F0 07 F1 | 	add	ptra, #12
19270     04 4E 05 F1 | 	add	fp, #4
19274     A7 12 62 FC | 	wrlong	arg01, fp
19278     04 4E 05 F1 | 	add	fp, #4
1927c     A7 12 02 F6 | 	mov	arg01, fp
19280     04 4E 85 F1 | 	sub	fp, #4
19284     A7 14 02 FB | 	rdlong	arg02, fp
19288     04 4E 85 F1 | 	sub	fp, #4
1928c     01 16 06 F6 | 	mov	arg03, #1
19290     0B 00 00 FF 
19294     CC E4 05 F1 | 	add	objptr, ##5836
19298     E4 31 B0 FD | 	call	#_psram_spin2_read1
1929c     0B 00 00 FF 
192a0     CC E4 85 F1 | 	sub	objptr, ##5836
192a4                 | ' psram.read1(varptr(res),adr,1)
192a4                 | ' return res
192a4     08 4E 05 F1 | 	add	fp, #8
192a8     A7 FA C1 FA | 	rdbyte	result1, fp
192ac     08 4E 85 F1 | 	sub	fp, #8
192b0     A7 F0 03 F6 | 	mov	ptra, fp
192b4     B2 00 A0 FD | 	call	#popregs_
192b8                 | _pspeek_ret
192b8     2D 00 64 FD | 	ret
192bc                 | 
192bc                 | ' 
192bc                 | ' function pslpeek(adr as ulong) as ulong
192bc                 | _pslpeek
192bc     00 4A 05 F6 | 	mov	COUNT_, #0
192c0     A8 00 A0 FD | 	call	#pushregs_
192c4     0C F0 07 F1 | 	add	ptra, #12
192c8     04 4E 05 F1 | 	add	fp, #4
192cc     A7 12 62 FC | 	wrlong	arg01, fp
192d0     04 4E 05 F1 | 	add	fp, #4
192d4     A7 12 02 F6 | 	mov	arg01, fp
192d8     04 4E 85 F1 | 	sub	fp, #4
192dc     A7 14 02 FB | 	rdlong	arg02, fp
192e0     04 4E 85 F1 | 	sub	fp, #4
192e4     04 16 06 F6 | 	mov	arg03, #4
192e8     0B 00 00 FF 
192ec     CC E4 05 F1 | 	add	objptr, ##5836
192f0     8C 31 B0 FD | 	call	#_psram_spin2_read1
192f4     0B 00 00 FF 
192f8     CC E4 85 F1 | 	sub	objptr, ##5836
192fc                 | ' psram.read1(varptr(res),adr,4)
192fc                 | ' return res
192fc     08 4E 05 F1 | 	add	fp, #8
19300     A7 FA 01 FB | 	rdlong	result1, fp
19304     08 4E 85 F1 | 	sub	fp, #8
19308     A7 F0 03 F6 | 	mov	ptra, fp
1930c     B2 00 A0 FD | 	call	#popregs_
19310                 | _pslpeek_ret
19310     2D 00 64 FD | 	ret
19314                 | 
19314                 | ' 
19314                 | ' function psdpeek(adr as ulong) as ulong
19314                 | _psdpeek
19314     00 4A 05 F6 | 	mov	COUNT_, #0
19318     A8 00 A0 FD | 	call	#pushregs_
1931c     0C F0 07 F1 | 	add	ptra, #12
19320     04 4E 05 F1 | 	add	fp, #4
19324     A7 12 62 FC | 	wrlong	arg01, fp
19328     04 4E 05 F1 | 	add	fp, #4
1932c     A7 12 02 F6 | 	mov	arg01, fp
19330     04 4E 85 F1 | 	sub	fp, #4
19334     A7 14 02 FB | 	rdlong	arg02, fp
19338     04 4E 85 F1 | 	sub	fp, #4
1933c     02 16 06 F6 | 	mov	arg03, #2
19340     0B 00 00 FF 
19344     CC E4 05 F1 | 	add	objptr, ##5836
19348     34 31 B0 FD | 	call	#_psram_spin2_read1
1934c     0B 00 00 FF 
19350     CC E4 85 F1 | 	sub	objptr, ##5836
19354                 | ' psram.read1(varptr(res),adr,2)
19354                 | ' return res
19354     08 4E 05 F1 | 	add	fp, #8
19358     A7 FA E1 FA | 	rdword	result1, fp
1935c     08 4E 85 F1 | 	sub	fp, #8
19360     A7 F0 03 F6 | 	mov	ptra, fp
19364     B2 00 A0 FD | 	call	#popregs_
19368                 | _psdpeek_ret
19368     2D 00 64 FD | 	ret
1936c                 | 
1936c                 | ' 
1936c                 | ' '' ------------------------------- USB keyboard scan to char translator
1936c                 | ' 
1936c                 | ' function scantochar(key)
1936c                 | _scantochar
1936c                 | ' 
1936c                 | ' select case (key shr 8) and 255
1936c     09 01 02 F6 | 	mov	_var01, arg01
19370     08 00 C6 F0 | 	sar	_var01, #8
19374     FF 00 0E F5 | 	and	_var01, #255 wz
19378     24 00 90 AD |  if_e	jmp	#LR__1960
1937c     02 00 0E F2 | 	cmp	_var01, #2 wz
19380     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
19384     30 00 90 AD |  if_e	jmp	#LR__1961
19388     40 00 0E F2 | 	cmp	_var01, #64 wz
1938c     44 00 90 AD |  if_e	jmp	#LR__1962
19390     42 00 0E F2 | 	cmp	_var01, #66 wz
19394     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
19398     70 00 90 5D |  if_ne	jmp	#LR__1964
1939c     50 00 90 FD | 	jmp	#LR__1963
193a0                 | LR__1960
193a0     09 FB 01 F6 | 	mov	result1, arg01
193a4     7F FA 05 F5 | 	and	result1, #127
193a8     02 FA 65 F0 | 	shl	result1, #2
193ac     F5 FA 01 F1 | 	add	result1, ptr__dat__
193b0     FD FA C1 FA | 	rdbyte	result1, result1
193b4     54 00 90 FD | 	jmp	#_scantochar_ret
193b8                 | LR__1961
193b8     09 FB 01 F6 | 	mov	result1, arg01
193bc     7F FA 05 F5 | 	and	result1, #127
193c0     02 FA 65 F0 | 	shl	result1, #2
193c4     01 FA 05 F1 | 	add	result1, #1
193c8     F5 FA 01 F1 | 	add	result1, ptr__dat__
193cc     FD FA C1 FA | 	rdbyte	result1, result1
193d0     38 00 90 FD | 	jmp	#_scantochar_ret
193d4                 | LR__1962
193d4     09 FB 01 F6 | 	mov	result1, arg01
193d8     7F FA 05 F5 | 	and	result1, #127
193dc     02 FA 65 F0 | 	shl	result1, #2
193e0     02 FA 05 F1 | 	add	result1, #2
193e4     F5 FA 01 F1 | 	add	result1, ptr__dat__
193e8     FD FA C1 FA | 	rdbyte	result1, result1
193ec     1C 00 90 FD | 	jmp	#_scantochar_ret
193f0                 | LR__1963
193f0     09 FB 01 F6 | 	mov	result1, arg01
193f4     7F FA 05 F5 | 	and	result1, #127
193f8     02 FA 65 F0 | 	shl	result1, #2
193fc     03 FA 05 F1 | 	add	result1, #3
19400     F5 FA 01 F1 | 	add	result1, ptr__dat__
19404     FD FA C1 FA | 	rdbyte	result1, result1
19408     00 00 90 FD | 	jmp	#_scantochar_ret
1940c                 | LR__1964
1940c                 | _scantochar_ret
1940c     2D 00 64 FD | 	ret
19410                 | 
19410                 | _program
19410     0C 4A 05 F6 | 	mov	COUNT_, #12
19414     A8 00 A0 FD | 	call	#pushregs_
19418     70 FC BF FD | 	call	#_startpsram
1941c     40 12 06 F6 | 	mov	arg01, #64
19420     00 14 06 F6 | 	mov	arg02, #0
19424     00 16 06 F6 | 	mov	arg03, #0
19428     A0 FC BF FD | 	call	#_startvideo
1942c     00 12 06 F6 | 	mov	arg01, #0
19430     00 14 06 F6 | 	mov	arg02, #0
19434     00 16 06 F6 | 	mov	arg03, #0
19438     0B 00 00 FF 
1943c     CC E4 05 F1 | 	add	objptr, ##5836
19440     18 36 B0 FD | 	call	#_audio096_spin2_start
19444     FE 1C 02 F6 | 	mov	arg06, result2
19448     4B 00 00 FF 
1944c     20 E5 05 F1 | 	add	objptr, ##38688
19450     F2 FA 61 FC | 	wrlong	result1, objptr
19454     14 E4 05 F1 | 	add	objptr, #20
19458     F2 1C 62 FC | 	wrlong	arg06, objptr
1945c     57 00 00 FF 
19460     00 E4 85 F1 | 	sub	objptr, ##44544
19464     32 12 06 F6 | 	mov	arg01, #50
19468     0C 3F B0 FD | 	call	#__system___waitms
1946c     57 00 00 FF 
19470     00 E4 05 F1 | 	add	objptr, ##44544
19474     F2 12 02 FB | 	rdlong	arg01, objptr
19478     57 00 00 FF 
1947c     00 E4 85 F1 | 	sub	objptr, ##44544
19480     14 12 06 F1 | 	add	arg01, #20
19484     20 00 80 FF 
19488     09 01 58 FC | 	wrword	##16384, arg01
1948c     24 33 B0 FD | 	call	#_usbnew_spin2_start
19490     56 00 00 FF 
19494     F4 E5 05 F1 | 	add	objptr, ##44532
19498     F2 FA 61 FC | 	wrlong	result1, objptr
1949c                 | '   mouse_limits[0] := xlim
1949c     0F 00 00 FF 
194a0     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
194a4     01 00 80 FF 
194a8     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
194ac                 | '   mouse_limits[1] := ylim
194ac     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
194b0     01 00 80 FF 
194b4     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
194b8     56 00 00 FF 
194bc     E3 E4 85 F1 | 	sub	objptr, ##44259
194c0     F2 12 02 F6 | 	mov	arg01, objptr
194c4     11 E5 85 F1 | 	sub	objptr, #273
194c8     C4 12 06 F1 | 	add	arg01, #196
194cc                 | '   mouse_outptr := ptr
194cc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
194d0     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
194d4     0F 00 00 FF 
194d8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
194dc     0E 00 00 FF 
194e0     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
194e4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
194e8     0E 00 00 FF 
194ec     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
194f0     10 12 06 F6 | 	mov	arg01, #16
194f4     70 17 B0 FD | 	call	#_hg010b_spin2_setspriteptr
194f8     10 12 06 F6 | 	mov	arg01, #16
194fc     20 14 06 F6 | 	mov	arg02, #32
19500     20 16 06 F6 | 	mov	arg03, #32
19504     F0 17 B0 FD | 	call	#_hg010b_spin2_setspritesize
19508     09 12 C6 F9 | 	decod	arg01, #9
1950c     2C 15 06 F6 | 	mov	arg02, #300
19510     F8 33 B0 FD | 	call	#_usbnew_spin2_mouse_move
19514     F2 1C 02 F6 | 	mov	arg06, objptr
19518     79 00 00 FF 
1951c     D8 E5 05 F1 | 	add	objptr, ##62424
19520     F2 1A 02 F6 | 	mov	arg05, objptr
19524     0D 1D 62 FC | 	wrlong	arg06, arg05
19528     04 1A 06 F1 | 	add	arg05, #4
1952c     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
19530     EF 14 02 F6 | 	mov	arg02, entryptr__
19534     F2 1E 02 F6 | 	mov	local01, objptr
19538     1E FA 05 F6 | 	mov	result1, #30
1953c     28 1E 62 FD | 	setq	local01
19540     0A FB F1 FC | 	coginit	result1, arg02 wc
19544     01 FA 65 C6 |  if_b	neg	result1, #1
19548     04 E4 85 F1 | 	sub	objptr, #4
1954c     F2 FA 61 FC | 	wrlong	result1, objptr
19550     01 00 00 FF 
19554     90 E4 05 F1 | 	add	objptr, ##656
19558     F2 00 68 FC | 	wrlong	#0, objptr
1955c     24 00 00 FF 
19560     40 E4 85 F1 | 	sub	objptr, ##18496
19564     F2 04 68 FC | 	wrlong	#2, objptr
19568     04 E4 05 F1 | 	add	objptr, #4
1956c     F2 26 69 FC | 	wrlong	#147, objptr
19570     04 E4 05 F1 | 	add	objptr, #4
19574     F2 34 69 FC | 	wrlong	#154, objptr
19578     04 E4 05 F1 | 	add	objptr, #4
1957c     F2 08 68 FC | 	wrlong	#4, objptr
19580     04 E4 85 F1 | 	sub	objptr, #4
19584     F2 1C 02 FB | 	rdlong	arg06, objptr
19588     14 E4 85 F1 | 	sub	objptr, #20
1958c     F2 1C 62 FC | 	wrlong	arg06, objptr
19590     04 E4 05 F1 | 	add	objptr, #4
19594     F2 00 68 FC | 	wrlong	#0, objptr
19598     04 E4 05 F1 | 	add	objptr, #4
1959c     F2 00 68 FC | 	wrlong	#0, objptr
195a0     22 00 00 FF 
195a4     B0 E5 05 F1 | 	add	objptr, ##17840
195a8     F2 02 68 FC | 	wrlong	#1, objptr
195ac     01 00 00 FF 
195b0     9C E4 05 F1 | 	add	objptr, ##668
195b4     F2 00 68 FC | 	wrlong	#0, objptr
195b8     01 00 00 FF 
195bc     00 EA 05 F1 | 	add	ptr__dat__, ##512
195c0     08 E4 05 F1 | 	add	objptr, #8
195c4     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
195c8     04 E4 85 F1 | 	sub	objptr, #4
195cc     03 00 80 FF 
195d0     F2 3C 69 FC | 	wrlong	##1694, objptr
195d4     16 00 00 FF 
195d8     1C E4 85 F1 | 	sub	objptr, ##11292
195dc     F2 18 68 FC | 	wrlong	#12, objptr
195e0     65 00 00 FF 
195e4     54 E4 85 F1 | 	sub	objptr, ##51796
195e8     01 00 00 FF 
195ec     00 EA 85 F1 | 	sub	ptr__dat__, ##512
195f0     10 DF BF FD | 	call	#_init_commands
195f4     00 F7 BF FD | 	call	#_init_error_strings
195f8     9C EE BF FD | 	call	#_init_audio
195fc     B0 48 BF FD | 	call	#_do_new
19600     57 00 00 FF 
19604     2C E4 05 F1 | 	add	objptr, ##44588
19608     F2 12 02 FB | 	rdlong	arg01, objptr
1960c     04 E4 85 F1 | 	sub	objptr, #4
19610     F2 14 02 FB | 	rdlong	arg02, objptr
19614     57 00 00 FF 
19618     28 E4 85 F1 | 	sub	objptr, ##44584
1961c     F8 23 B0 FD | 	call	#_hg010b_spin2_cls
19620     57 00 00 FF 
19624     30 E4 05 F1 | 	add	objptr, ##44592
19628     F2 12 02 FB | 	rdlong	arg01, objptr
1962c     57 00 00 FF 
19630     30 E4 85 F1 | 	sub	objptr, ##44592
19634     90 22 B0 FD | 	call	#_hg010b_spin2_setfontfamily
19638                 | ' 
19638                 | ' leading_spaces:=amount
19638     01 00 00 FF 
1963c     B6 E4 05 F1 | 	add	objptr, ##694
19640     F2 04 68 FC | 	wrlong	#2, objptr
19644     01 00 00 FF 
19648     B6 E4 85 F1 | 	sub	objptr, ##694
1964c     69 01 00 FF 
19650     B3 20 06 F6 | 	mov	local02, ##@LR__5053
19654     3D 12 06 F6 | 	mov	arg01, #61
19658     3C 14 06 F6 | 	mov	arg02, #60
1965c     3B 16 06 F6 | 	mov	arg03, #59
19660     3A 18 06 F6 | 	mov	arg04, #58
19664     48 84 B0 FD | 	call	#__system___vfs_open_sdcardx
19668     FD 14 02 F6 | 	mov	arg02, result1
1966c     10 13 02 F6 | 	mov	arg01, local02
19670     DC 3D B0 FD | 	call	#__system___mount
19674     69 01 00 FF 
19678     B7 12 06 F6 | 	mov	arg01, ##@LR__5054
1967c     90 40 B0 FD | 	call	#__system___chdir
19680     69 01 00 FF 
19684     BF 20 06 F6 | 	mov	local02, ##@LR__5055
19688     72 00 00 FF 
1968c     84 E4 05 F1 | 	add	objptr, ##58500
19690     F2 20 62 FC | 	wrlong	local02, objptr
19694     1B 00 00 FF 
19698     60 E4 85 F1 | 	sub	objptr, ##13920
1969c     F2 12 02 FB | 	rdlong	arg01, objptr
196a0     57 00 00 FF 
196a4     24 E4 85 F1 | 	sub	objptr, ##44580
196a8     01 12 66 F0 | 	shl	arg01, #1
196ac     01 14 06 F6 | 	mov	arg02, #1
196b0     54 22 B0 FD | 	call	#_hg010b_spin2_setcursorpos
196b4                 | ' 
196b4                 | ' init_commands
196b4                 | ' init_error_strings
196b4                 | ' init_audio
196b4                 | ' do_new
196b4                 | ' 
196b4                 | ' 
196b4                 | ' cls(ink, paper)
196b4                 | ' v.setfontfamily(font) 				' use ST Mono font
196b4                 | ' v.setleadingspaces(2)
196b4                 | ' mount "/sd", _vfs_open_sdcard()
196b4                 | ' chdir "/sd/bas"
196b4                 | ' 
196b4                 | ' currentdir$="/sd/bas"
196b4                 | ' 
196b4                 | ' position 2*editor_spaces,1 : print ver$
196b4     00 12 06 F6 | 	mov	arg01, #0
196b8     58 93 B0 FD | 	call	#__system___getiolock_0474
196bc     FD 12 02 F6 | 	mov	arg01, result1
196c0     C0 39 B0 FD | 	call	#__system___lockmem
196c4     18 00 00 FF 
196c8     4C EB 05 F1 | 	add	ptr__dat__, ##12620
196cc     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
196d0     18 00 00 FF 
196d4     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
196d8     00 12 06 F6 | 	mov	arg01, #0
196dc     00 16 06 F6 | 	mov	arg03, #0
196e0     A4 46 B0 FD | 	call	#__system___basic_print_string
196e4     00 12 06 F6 | 	mov	arg01, #0
196e8     0A 14 06 F6 | 	mov	arg02, #10
196ec     00 16 06 F6 | 	mov	arg03, #0
196f0     3C 46 B0 FD | 	call	#__system___basic_print_char
196f4     00 12 06 F6 | 	mov	arg01, #0
196f8     18 93 B0 FD | 	call	#__system___getiolock_0474
196fc     FD 00 68 FC | 	wrlong	#0, result1
19700     7B 00 00 FF 
19704     68 E4 05 F1 | 	add	objptr, ##63080
19708     F2 12 02 FB | 	rdlong	arg01, objptr
1970c     18 00 00 FF 
19710     1C E4 85 F1 | 	sub	objptr, ##12316
19714     F2 20 02 FB | 	rdlong	local02, objptr
19718     63 00 00 FF 
1971c     4C E4 85 F1 | 	sub	objptr, ##50764
19720     10 13 82 F1 | 	sub	arg01, local02
19724     00 14 06 F6 | 	mov	arg02, #0
19728     0A 16 06 F6 | 	mov	arg03, #10
1972c     EC 5B B0 FD | 	call	#__system__Number_S
19730     FD 12 02 F6 | 	mov	arg01, result1
19734     69 01 00 FF 
19738     C7 14 06 F6 | 	mov	arg02, ##@LR__5056
1973c     A0 39 B0 FD | 	call	#__system___string_concat
19740     FD 20 02 F6 | 	mov	local02, result1
19744     79 00 00 FF 
19748     CC E5 05 F1 | 	add	objptr, ##62412
1974c     F2 20 62 FC | 	wrlong	local02, objptr
19750     79 00 00 FF 
19754     CC E5 85 F1 | 	sub	objptr, ##62412
19758                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
19758     00 12 06 F6 | 	mov	arg01, #0
1975c     B4 92 B0 FD | 	call	#__system___getiolock_0474
19760     FD 12 02 F6 | 	mov	arg01, result1
19764     1C 39 B0 FD | 	call	#__system___lockmem
19768     79 00 00 FF 
1976c     CC E5 05 F1 | 	add	objptr, ##62412
19770     F2 14 02 FB | 	rdlong	arg02, objptr
19774     79 00 00 FF 
19778     CC E5 85 F1 | 	sub	objptr, ##62412
1977c     00 12 06 F6 | 	mov	arg01, #0
19780     00 16 06 F6 | 	mov	arg03, #0
19784     00 46 B0 FD | 	call	#__system___basic_print_string
19788     00 12 06 F6 | 	mov	arg01, #0
1978c     0A 14 06 F6 | 	mov	arg02, #10
19790     00 16 06 F6 | 	mov	arg03, #0
19794     98 45 B0 FD | 	call	#__system___basic_print_char
19798     00 12 06 F6 | 	mov	arg01, #0
1979c     74 92 B0 FD | 	call	#__system___getiolock_0474
197a0     FD 00 68 FC | 	wrlong	#0, result1
197a4     57 00 00 FF 
197a8     24 E4 05 F1 | 	add	objptr, ##44580
197ac     F2 12 02 FB | 	rdlong	arg01, objptr
197b0     57 00 00 FF 
197b4     24 E4 85 F1 | 	sub	objptr, ##44580
197b8     01 12 66 F0 | 	shl	arg01, #1
197bc     04 14 06 F6 | 	mov	arg02, #4
197c0     44 21 B0 FD | 	call	#_hg010b_spin2_setcursorpos
197c4                 | ' position 2*editor_spaces,4 : print "Ready"
197c4     00 12 06 F6 | 	mov	arg01, #0
197c8     48 92 B0 FD | 	call	#__system___getiolock_0474
197cc     FD 12 02 F6 | 	mov	arg01, result1
197d0     B0 38 B0 FD | 	call	#__system___lockmem
197d4     69 01 00 FF 
197d8     D9 14 06 F6 | 	mov	arg02, ##@LR__5057
197dc     00 12 06 F6 | 	mov	arg01, #0
197e0     00 16 06 F6 | 	mov	arg03, #0
197e4     A0 45 B0 FD | 	call	#__system___basic_print_string
197e8     FD 22 02 F6 | 	mov	local03, result1
197ec     00 12 06 F6 | 	mov	arg01, #0
197f0     0A 14 06 F6 | 	mov	arg02, #10
197f4     00 16 06 F6 | 	mov	arg03, #0
197f8     34 45 B0 FD | 	call	#__system___basic_print_char
197fc     01 24 06 F6 | 	mov	local04, #1
19800     00 12 06 F6 | 	mov	arg01, #0
19804     0C 92 B0 FD | 	call	#__system___getiolock_0474
19808     FD 00 68 FC | 	wrlong	#0, result1
1980c     00 26 06 F6 | 	mov	local05, #0
19810     00 14 06 F6 | 	mov	arg02, #0
19814     01 14 D6 F7 | 	test	arg02, #1 wc
19818     5A 4C 64 FD | 	drvc	#38
1981c     01 14 D6 F7 | 	test	arg02, #1 wc
19820     5A 4E 64 FD | 	drvc	#39
19824     69 01 00 FF 
19828     DF 20 06 F6 | 	mov	local02, ##@LR__5058
1982c     7B 00 00 FF 
19830     94 E4 05 F1 | 	add	objptr, ##63124
19834     F2 20 62 FC | 	wrlong	local02, objptr
19838     04 E4 05 F1 | 	add	objptr, #4
1983c     FF FF FF FF 
19840     F2 FE 6B FC | 	wrlong	##-1, objptr
19844     7B 00 00 FF 
19848     98 E4 85 F1 | 	sub	objptr, ##63128
1984c                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
1984c                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1984c                 | ' 
1984c                 | ' loadname="noname.bas"
1984c                 | ' do_insert=-1
1984c                 | ' 
1984c                 | ' 
1984c                 | ' 'paula.play(0,@samplebuf(0,0),88200,16484,0,2048)
1984c                 | ' 
1984c                 | ' 'base2:=@channel1[0]+64*channel
1984c                 | ' 'long[base2+8]:=sample+$C0000000 
1984c                 | ' 'long[base2+12]:= len
1984c                 | ' 'if loop >=0 
1984c                 | ' '  long[base2+16]:= loop
1984c                 | ' 'else
1984c                 | ' '  long[base2+16]:= len+2
1984c                 | ' 'word[base2+20]:=vol
1984c                 | ' 'word[base2+24]:= 3546911/splfreq 
1984c                 | ' 'word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1984c                 | ' 'long[base2+28]:=$40000000
1984c                 | ' 
1984c                 | ' 'lpoke base+8,varptr(samplebuf(0,0))+$C000_0000 
1984c                 | ' 'lpoke base+16,2048
1984c                 | ' 'lpoke base+12,0
1984c                 | ' 'dpoke base+20,16383
1984c                 | ' 'dpoke base+22,8192
1984c                 | ' 'dpoke base+24,60
1984c                 | ' 'dpoke base+26,256 ' todo: use skip to make accurate sample rate
1984c                 | ' 'dpoke base+28,$4000_0000
1984c                 | ' 'lpoke base+32,0 
1984c                 | ' 'lpoke base+36, 0
1984c                 | ' 'lpoke base+40,25600' speed
1984c                 | ' 'lpoke base+44,1023 'len
1984c                 | ' 
1984c                 | ' 'do: position 0,0 : print lpeek(base+32): loop 
1984c                 | ' 
1984c                 | ' '-------------------------------------------------------------------------------------------------------- 
1984c                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1984c                 | ' '--------------------------------------------------------------------------------------------------------
1984c                 | ' 
1984c                 | ' do
1984c                 | LR__1970
1984c     01 12 06 F6 | 	mov	arg01, #1
19850     54 21 B0 FD | 	call	#_hg010b_spin2_waitvbl
19854     07 12 06 F6 | 	mov	arg01, #7
19858     0B 00 00 FF 
1985c     CC E4 05 F1 | 	add	objptr, ##5836
19860     20 35 B0 FD | 	call	#_audio096_spin2_stop
19864     0B 00 00 FF 
19868     CC E4 85 F1 | 	sub	objptr, ##5836
1986c     3C 30 B0 FD | 	call	#_usbnew_spin2_get_key
19870     65 00 00 FF 
19874     64 E4 05 F1 | 	add	objptr, ##51812
19878     F2 FA 61 FC | 	wrlong	result1, objptr
1987c                 | '   return hkbd_led_rep
1987c     13 00 00 FF 
19880     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
19884     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
19888     13 00 00 FF 
1988c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
19890     16 00 00 FF 
19894     38 E4 05 F1 | 	add	objptr, ##11320
19898     F2 FA 61 FC | 	wrlong	result1, objptr
1989c                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
1989c     16 00 00 FF 
198a0     38 E4 85 F1 | 	sub	objptr, ##11320
198a4     F2 20 02 FB | 	rdlong	local02, objptr
198a8     65 00 00 FF 
198ac     64 E4 85 F1 | 	sub	objptr, ##51812
198b0     01 20 16 F2 | 	cmp	local02, #1 wc
198b4     BC 00 90 CD |  if_b	jmp	#LR__1971
198b8     65 00 00 FF 
198bc     64 E4 05 F1 | 	add	objptr, ##51812
198c0     F2 24 02 FB | 	rdlong	local04, objptr
198c4     65 00 00 FF 
198c8     64 E4 85 F1 | 	sub	objptr, ##51812
198cc     12 23 02 F6 | 	mov	local03, local04
198d0     04 22 16 F2 | 	cmp	local03, #4 wc
198d4     9C 00 90 3D |  if_ae	jmp	#LR__1971
198d8     79 00 00 FF 
198dc     D0 E5 05 F1 | 	add	objptr, ##62416
198e0     F2 1E 02 FB | 	rdlong	local01, objptr
198e4     79 00 00 FF 
198e8     D0 E5 85 F1 | 	sub	objptr, ##62416
198ec     0F 27 02 F6 | 	mov	local05, local01
198f0     01 26 0E F2 | 	cmp	local05, #1 wz
198f4     7C 00 90 5D |  if_ne	jmp	#LR__1971
198f8     04 00 00 FF 
198fc     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
19900     F5 14 02 F6 | 	mov	arg02, ptr__dat__
19904     04 00 00 FF 
19908     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1990c     56 00 00 FF 
19910     44 22 06 F6 | 	mov	local03, ##44100
19914     0C 24 C6 F9 | 	decod	local04, #12
19918     00 26 06 F6 | 	mov	local05, #0
1991c     03 00 00 FF 
19920     DE 1E 06 F6 | 	mov	local01, ##1758
19924     07 12 06 F6 | 	mov	arg01, #7
19928     56 00 00 FF 
1992c     44 16 06 F6 | 	mov	arg03, ##44100
19930     0C 18 C6 F9 | 	decod	arg04, #12
19934     00 1A 06 F6 | 	mov	arg05, #0
19938     03 00 00 FF 
1993c     DE 1C 06 F6 | 	mov	arg06, ##1758
19940     0B 00 00 FF 
19944     CC E4 05 F1 | 	add	objptr, ##5836
19948     E8 32 B0 FD | 	call	#_audio096_spin2_play
1994c     0B 00 00 FF 
19950     CC E4 85 F1 | 	sub	objptr, ##5836
19954     0A 12 06 F6 | 	mov	arg01, #10
19958     1C 3A B0 FD | 	call	#__system___waitms
1995c     07 12 06 F6 | 	mov	arg01, #7
19960     0B 00 00 FF 
19964     CC E4 05 F1 | 	add	objptr, ##5836
19968     18 34 B0 FD | 	call	#_audio096_spin2_stop
1996c     0B 00 00 FF 
19970     CC E4 85 F1 | 	sub	objptr, ##5836
19974                 | LR__1971
19974                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
19974     65 00 00 FF 
19978     64 E4 05 F1 | 	add	objptr, ##51812
1997c     F2 20 02 FB | 	rdlong	local02, objptr
19980     65 00 00 FF 
19984     64 E4 85 F1 | 	sub	objptr, ##51812
19988     04 20 16 F2 | 	cmp	local02, #4 wc
1998c     80 00 90 CD |  if_b	jmp	#LR__1972
19990     65 00 00 FF 
19994     64 E4 05 F1 | 	add	objptr, ##51812
19998     F2 24 02 FB | 	rdlong	local04, objptr
1999c     65 00 00 FF 
199a0     64 E4 85 F1 | 	sub	objptr, ##51812
199a4     12 23 02 F6 | 	mov	local03, local04
199a8     00 00 40 FF 
199ac     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
199b0     65 00 00 CF 
199b4     64 E4 05 C1 |  if_b	add	objptr, ##51812
199b8     F2 1E 02 CB |  if_b	rdlong	local01, objptr
199bc     65 00 00 CF 
199c0     64 E4 85 C1 |  if_b	sub	objptr, ##51812
199c4     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
199c8     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
199cc     40 00 90 3D |  if_ae	jmp	#LR__1972
199d0     65 00 00 FF 
199d4     64 E4 05 F1 | 	add	objptr, ##51812
199d8     F2 20 02 FB | 	rdlong	local02, objptr
199dc     04 E4 05 F1 | 	add	objptr, #4
199e0     F2 20 62 FC | 	wrlong	local02, objptr
199e4     16 00 00 FF 
199e8     38 E4 05 F1 | 	add	objptr, ##11320
199ec     F2 02 68 FC | 	wrlong	#1, objptr
199f0     16 00 00 FF 
199f4     38 E4 85 F1 | 	sub	objptr, ##11320
199f8     F2 20 02 FB | 	rdlong	local02, objptr
199fc     16 00 00 FF 
19a00     3C E4 05 F1 | 	add	objptr, ##11324
19a04     F2 20 62 FC | 	wrlong	local02, objptr
19a08     7B 00 00 FF 
19a0c     A4 E4 85 F1 | 	sub	objptr, ##63140
19a10                 | LR__1972
19a10                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
19a10     65 00 00 FF 
19a14     64 E4 05 F1 | 	add	objptr, ##51812
19a18     F2 20 02 FB | 	rdlong	local02, objptr
19a1c     65 00 00 FF 
19a20     64 E4 85 F1 | 	sub	objptr, ##51812
19a24     00 00 40 FF 
19a28     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
19a2c     7B 00 00 3F 
19a30     A8 E4 05 31 |  if_ae	add	objptr, ##63144
19a34     F2 00 68 3C |  if_ae	wrlong	#0, objptr
19a38     08 E4 85 31 |  if_ae	sub	objptr, #8
19a3c     F2 00 68 3C |  if_ae	wrlong	#0, objptr
19a40     7B 00 00 3F 
19a44     A0 E4 85 31 |  if_ae	sub	objptr, ##63136
19a48                 | ' if key=0 andalso rpt=1 then rptcnt+=1
19a48     65 00 00 FF 
19a4c     64 E4 05 F1 | 	add	objptr, ##51812
19a50     F2 20 0A FB | 	rdlong	local02, objptr wz
19a54     65 00 00 FF 
19a58     64 E4 85 F1 | 	sub	objptr, ##51812
19a5c     7B 00 00 AF 
19a60     A0 E4 05 A1 |  if_e	add	objptr, ##63136
19a64     F2 24 02 AB |  if_e	rdlong	local04, objptr
19a68     7B 00 00 AF 
19a6c     A0 E4 85 A1 |  if_e	sub	objptr, ##63136
19a70     12 23 02 A6 |  if_e	mov	local03, local04
19a74     01 22 0E A2 |  if_e	cmp	local03, #1 wz
19a78     7B 00 00 AF 
19a7c     A8 E4 05 A1 |  if_e	add	objptr, ##63144
19a80     F2 20 02 AB |  if_e	rdlong	local02, objptr
19a84     01 20 06 A1 |  if_e	add	local02, #1
19a88     F2 20 62 AC |  if_e	wrlong	local02, objptr
19a8c     7B 00 00 AF 
19a90     A8 E4 85 A1 |  if_e	sub	objptr, ##63144
19a94                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
19a94     65 00 00 FF 
19a98     64 E4 05 F1 | 	add	objptr, ##51812
19a9c     F2 20 02 FB | 	rdlong	local02, objptr
19aa0     65 00 00 FF 
19aa4     64 E4 85 F1 | 	sub	objptr, ##51812
19aa8     00 00 40 FF 
19aac     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
19ab0     44 00 90 3D |  if_ae	jmp	#LR__1974
19ab4     7B 00 00 FF 
19ab8     A8 E4 05 F1 | 	add	objptr, ##63144
19abc     F2 20 02 FB | 	rdlong	local02, objptr
19ac0     7B 00 00 FF 
19ac4     A8 E4 85 F1 | 	sub	objptr, ##63144
19ac8     19 20 0E F2 | 	cmp	local02, #25 wz
19acc     28 00 90 5D |  if_ne	jmp	#LR__1973
19ad0     65 00 00 FF 
19ad4     68 E4 05 F1 | 	add	objptr, ##51816
19ad8     F2 20 02 FB | 	rdlong	local02, objptr
19adc     16 00 00 FF 
19ae0     3C E4 05 F1 | 	add	objptr, ##11324
19ae4     F2 20 62 FC | 	wrlong	local02, objptr
19ae8     04 E4 05 F1 | 	add	objptr, #4
19aec     F2 2A 68 FC | 	wrlong	#21, objptr
19af0     7B 00 00 FF 
19af4     A8 E4 85 F1 | 	sub	objptr, ##63144
19af8                 | LR__1973
19af8                 | LR__1974
19af8                 | ' 
19af8                 | ' 
19af8                 | ' if key3<>0 then
19af8     7B 00 00 FF 
19afc     A4 E4 05 F1 | 	add	objptr, ##63140
19b00     F2 28 0A FB | 	rdlong	local06, objptr wz
19b04     7B 00 00 FF 
19b08     A4 E4 85 F1 | 	sub	objptr, ##63140
19b0c     3C FD 9F AD |  if_e	jmp	#LR__1970
19b10                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
19b10     79 00 00 FF 
19b14     D0 E5 05 F1 | 	add	objptr, ##62416
19b18     F2 20 02 FB | 	rdlong	local02, objptr
19b1c     79 00 00 FF 
19b20     D0 E5 85 F1 | 	sub	objptr, ##62416
19b24     01 20 0E F2 | 	cmp	local02, #1 wz
19b28     50 00 90 5D |  if_ne	jmp	#LR__1975
19b2c     7B 00 00 FF 
19b30     74 E4 05 F1 | 	add	objptr, ##63092
19b34     F2 14 02 FB | 	rdlong	arg02, objptr
19b38     56 00 00 FF 
19b3c     44 22 06 F6 | 	mov	local03, ##44100
19b40     0C 24 C6 F9 | 	decod	local04, #12
19b44     04 E4 85 F1 | 	sub	objptr, #4
19b48     F2 26 02 FB | 	rdlong	local05, objptr
19b4c     01 1E 66 F6 | 	neg	local01, #1
19b50     07 12 06 F6 | 	mov	arg01, #7
19b54     56 00 00 FF 
19b58     44 16 06 F6 | 	mov	arg03, ##44100
19b5c     0C 18 C6 F9 | 	decod	arg04, #12
19b60     13 1B 02 F6 | 	mov	arg05, local05
19b64     01 1C 66 F6 | 	neg	arg06, #1
19b68     6F 00 00 FF 
19b6c     A4 E5 85 F1 | 	sub	objptr, ##57252
19b70     C0 30 B0 FD | 	call	#_audio096_spin2_play
19b74     0B 00 00 FF 
19b78     CC E4 85 F1 | 	sub	objptr, ##5836
19b7c                 | LR__1975
19b7c     7B 00 00 FF 
19b80     A4 E4 05 F1 | 	add	objptr, ##63140
19b84     F2 12 02 FB | 	rdlong	arg01, objptr
19b88     7B 00 00 FF 
19b8c     A4 E4 85 F1 | 	sub	objptr, ##63140
19b90     D8 F7 BF FD | 	call	#_scantochar
19b94     7B 00 00 FF 
19b98     AC E4 05 F1 | 	add	objptr, ##63148
19b9c     F2 FA 61 FC | 	wrlong	result1, objptr
19ba0                 | '   if leds and 2 = 2 then 
19ba0     10 E4 85 F1 | 	sub	objptr, #16
19ba4     F2 20 0A FB | 	rdlong	local02, objptr wz
19ba8     7B 00 00 FF 
19bac     9C E4 85 F1 | 	sub	objptr, ##63132
19bb0     68 01 90 AD |  if_e	jmp	#LR__1983
19bb4                 | '     if key4>96 andalso key4<123 then
19bb4     7B 00 00 FF 
19bb8     AC E4 05 F1 | 	add	objptr, ##63148
19bbc     F2 20 02 FB | 	rdlong	local02, objptr
19bc0     7B 00 00 FF 
19bc4     AC E4 85 F1 | 	sub	objptr, ##63148
19bc8     61 20 56 F2 | 	cmps	local02, #97 wc
19bcc     40 00 90 CD |  if_b	jmp	#LR__1976
19bd0     7B 00 00 FF 
19bd4     AC E4 05 F1 | 	add	objptr, ##63148
19bd8     F2 24 02 FB | 	rdlong	local04, objptr
19bdc     7B 00 00 FF 
19be0     AC E4 85 F1 | 	sub	objptr, ##63148
19be4     12 23 02 F6 | 	mov	local03, local04
19be8     7B 22 56 F2 | 	cmps	local03, #123 wc
19bec     20 00 90 3D |  if_ae	jmp	#LR__1976
19bf0     7B 00 00 FF 
19bf4     AC E4 05 F1 | 	add	objptr, ##63148
19bf8     F2 20 02 FB | 	rdlong	local02, objptr
19bfc     20 20 86 F1 | 	sub	local02, #32
19c00     F2 20 62 FC | 	wrlong	local02, objptr
19c04     7B 00 00 FF 
19c08     AC E4 85 F1 | 	sub	objptr, ##63148
19c0c     0C 01 90 FD | 	jmp	#LR__1982
19c10                 | LR__1976
19c10     7B 00 00 FF 
19c14     AC E4 05 F1 | 	add	objptr, ##63148
19c18     F2 20 02 FB | 	rdlong	local02, objptr
19c1c     7B 00 00 FF 
19c20     AC E4 85 F1 | 	sub	objptr, ##63148
19c24     41 20 56 F2 | 	cmps	local02, #65 wc
19c28     40 00 90 CD |  if_b	jmp	#LR__1977
19c2c     7B 00 00 FF 
19c30     AC E4 05 F1 | 	add	objptr, ##63148
19c34     F2 24 02 FB | 	rdlong	local04, objptr
19c38     7B 00 00 FF 
19c3c     AC E4 85 F1 | 	sub	objptr, ##63148
19c40     12 23 02 F6 | 	mov	local03, local04
19c44     5B 22 56 F2 | 	cmps	local03, #91 wc
19c48     20 00 90 3D |  if_ae	jmp	#LR__1977
19c4c     7B 00 00 FF 
19c50     AC E4 05 F1 | 	add	objptr, ##63148
19c54     F2 20 02 FB | 	rdlong	local02, objptr
19c58     20 20 06 F1 | 	add	local02, #32
19c5c     F2 20 62 FC | 	wrlong	local02, objptr
19c60     7B 00 00 FF 
19c64     AC E4 85 F1 | 	sub	objptr, ##63148
19c68     B0 00 90 FD | 	jmp	#LR__1981
19c6c                 | LR__1977
19c6c     7B 00 00 FF 
19c70     AC E4 05 F1 | 	add	objptr, ##63148
19c74     F2 20 02 FB | 	rdlong	local02, objptr
19c78     7B 00 00 FF 
19c7c     AC E4 85 F1 | 	sub	objptr, ##63148
19c80     17 20 56 F2 | 	cmps	local02, #23 wc
19c84     40 00 90 CD |  if_b	jmp	#LR__1978
19c88     7B 00 00 FF 
19c8c     AC E4 05 F1 | 	add	objptr, ##63148
19c90     F2 24 02 FB | 	rdlong	local04, objptr
19c94     7B 00 00 FF 
19c98     AC E4 85 F1 | 	sub	objptr, ##63148
19c9c     12 23 02 F6 | 	mov	local03, local04
19ca0     20 22 56 F2 | 	cmps	local03, #32 wc
19ca4     20 00 90 3D |  if_ae	jmp	#LR__1978
19ca8     7B 00 00 FF 
19cac     AC E4 05 F1 | 	add	objptr, ##63148
19cb0     F2 20 02 FB | 	rdlong	local02, objptr
19cb4     09 20 86 F1 | 	sub	local02, #9
19cb8     F2 20 62 FC | 	wrlong	local02, objptr
19cbc     7B 00 00 FF 
19cc0     AC E4 85 F1 | 	sub	objptr, ##63148
19cc4     54 00 90 FD | 	jmp	#LR__1980
19cc8                 | LR__1978
19cc8     7B 00 00 FF 
19ccc     AC E4 05 F1 | 	add	objptr, ##63148
19cd0     F2 20 02 FB | 	rdlong	local02, objptr
19cd4     7B 00 00 FF 
19cd8     AC E4 85 F1 | 	sub	objptr, ##63148
19cdc     0E 20 56 F2 | 	cmps	local02, #14 wc
19ce0     38 00 90 CD |  if_b	jmp	#LR__1979
19ce4     7B 00 00 FF 
19ce8     AC E4 05 F1 | 	add	objptr, ##63148
19cec     F2 24 02 FB | 	rdlong	local04, objptr
19cf0     7B 00 00 FF 
19cf4     AC E4 85 F1 | 	sub	objptr, ##63148
19cf8     12 23 02 F6 | 	mov	local03, local04
19cfc     17 22 56 F2 | 	cmps	local03, #23 wc
19d00     7B 00 00 CF 
19d04     AC E4 05 C1 |  if_b	add	objptr, ##63148
19d08     F2 20 02 CB |  if_b	rdlong	local02, objptr
19d0c     27 20 06 C1 |  if_b	add	local02, #39
19d10     F2 20 62 CC |  if_b	wrlong	local02, objptr
19d14     7B 00 00 CF 
19d18     AC E4 85 C1 |  if_b	sub	objptr, ##63148
19d1c                 | LR__1979
19d1c                 | LR__1980
19d1c                 | LR__1981
19d1c                 | LR__1982
19d1c                 | LR__1983
19d1c                 | '  
19d1c                 | '  
19d1c                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
19d1c     7B 00 00 FF 
19d20     AC E4 05 F1 | 	add	objptr, ##63148
19d24     F2 20 02 FB | 	rdlong	local02, objptr
19d28     7B 00 00 FF 
19d2c     AC E4 85 F1 | 	sub	objptr, ##63148
19d30     01 20 56 F2 | 	cmps	local02, #1 wc
19d34     90 00 90 CD |  if_b	jmp	#LR__1984
19d38     7B 00 00 FF 
19d3c     AC E4 05 F1 | 	add	objptr, ##63148
19d40     F2 24 02 FB | 	rdlong	local04, objptr
19d44     7B 00 00 FF 
19d48     AC E4 85 F1 | 	sub	objptr, ##63148
19d4c     12 23 02 F6 | 	mov	local03, local04
19d50     7F 22 56 F2 | 	cmps	local03, #127 wc
19d54     3C E4 05 C1 |  if_b	add	objptr, #60
19d58     F2 1E E2 CA |  if_b	rdword	local01, objptr
19d5c     3C E4 85 C1 |  if_b	sub	objptr, #60
19d60     0F 27 32 C9 |  if_b	getword	local05, local01, #0
19d64     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
19d68     5C 00 90 3D |  if_ae	jmp	#LR__1984
19d6c     7B 00 00 FF 
19d70     AC E4 05 F1 | 	add	objptr, ##63148
19d74     F2 12 02 FB | 	rdlong	arg01, objptr
19d78     7B 00 00 FF 
19d7c     AC E4 85 F1 | 	sub	objptr, ##63148
19d80     08 55 B0 FD | 	call	#__system__Chr_S
19d84     FD 2A 02 F6 | 	mov	local07, result1
19d88     57 00 00 FF 
19d8c     0C E4 05 F1 | 	add	objptr, ##44556
19d90     F2 12 02 FB | 	rdlong	arg01, objptr
19d94     57 00 00 FF 
19d98     0C E4 85 F1 | 	sub	objptr, ##44556
19d9c     15 15 02 F6 | 	mov	arg02, local07
19da0     3C 33 B0 FD | 	call	#__system___string_concat
19da4     57 00 00 FF 
19da8     0C E4 05 F1 | 	add	objptr, ##44556
19dac     F2 FA 61 FC | 	wrlong	result1, objptr
19db0     24 00 00 FF 
19db4     A0 E4 05 F1 | 	add	objptr, ##18592
19db8     F2 12 02 FB | 	rdlong	arg01, objptr
19dbc     7B 00 00 FF 
19dc0     AC E4 85 F1 | 	sub	objptr, ##63148
19dc4     24 1D B0 FD | 	call	#_hg010b_spin2_putchar
19dc8                 | LR__1984
19dc8                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
19dc8     7B 00 00 FF 
19dcc     AC E4 05 F1 | 	add	objptr, ##63148
19dd0     F2 20 02 FB | 	rdlong	local02, objptr
19dd4     7B 00 00 FF 
19dd8     AC E4 85 F1 | 	sub	objptr, ##63148
19ddc     01 20 56 F2 | 	cmps	local02, #1 wc
19de0     D0 00 90 CD |  if_b	jmp	#LR__1985
19de4     7B 00 00 FF 
19de8     AC E4 05 F1 | 	add	objptr, ##63148
19dec     F2 24 02 FB | 	rdlong	local04, objptr
19df0     7B 00 00 FF 
19df4     AC E4 85 F1 | 	sub	objptr, ##63148
19df8     12 23 02 F6 | 	mov	local03, local04
19dfc     7F 22 56 F2 | 	cmps	local03, #127 wc
19e00     B0 00 90 3D |  if_ae	jmp	#LR__1985
19e04     3C E4 05 F1 | 	add	objptr, #60
19e08     F2 1E E2 FA | 	rdword	local01, objptr
19e0c     3C E4 85 F1 | 	sub	objptr, #60
19e10     0F 27 32 F9 | 	getword	local05, local01, #0
19e14     FE 26 0E F2 | 	cmp	local05, #254 wz
19e18     79 00 00 AF 
19e1c     D0 E5 05 A1 |  if_e	add	objptr, ##62416
19e20     F2 2C 02 AB |  if_e	rdlong	local08, objptr
19e24     79 00 00 AF 
19e28     D0 E5 85 A1 |  if_e	sub	objptr, ##62416
19e2c     16 2F 02 A6 |  if_e	mov	local09, local08
19e30     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
19e34     7C 00 90 5D |  if_ne	jmp	#LR__1985
19e38     04 00 00 FF 
19e3c     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
19e40     F5 14 02 F6 | 	mov	arg02, ptr__dat__
19e44     04 00 00 FF 
19e48     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
19e4c     56 00 00 FF 
19e50     44 22 06 F6 | 	mov	local03, ##44100
19e54     0C 24 C6 F9 | 	decod	local04, #12
19e58     00 26 06 F6 | 	mov	local05, #0
19e5c     03 00 00 FF 
19e60     DE 1E 06 F6 | 	mov	local01, ##1758
19e64     07 12 06 F6 | 	mov	arg01, #7
19e68     56 00 00 FF 
19e6c     44 16 06 F6 | 	mov	arg03, ##44100
19e70     0C 18 C6 F9 | 	decod	arg04, #12
19e74     00 1A 06 F6 | 	mov	arg05, #0
19e78     03 00 00 FF 
19e7c     DE 1C 06 F6 | 	mov	arg06, ##1758
19e80     0B 00 00 FF 
19e84     CC E4 05 F1 | 	add	objptr, ##5836
19e88     A8 2D B0 FD | 	call	#_audio096_spin2_play
19e8c     0B 00 00 FF 
19e90     CC E4 85 F1 | 	sub	objptr, ##5836
19e94     2C 13 06 F6 | 	mov	arg01, #300
19e98     DC 34 B0 FD | 	call	#__system___waitms
19e9c     07 12 06 F6 | 	mov	arg01, #7
19ea0     0B 00 00 FF 
19ea4     CC E4 05 F1 | 	add	objptr, ##5836
19ea8     D8 2E B0 FD | 	call	#_audio096_spin2_stop
19eac     0B 00 00 FF 
19eb0     CC E4 85 F1 | 	sub	objptr, ##5836
19eb4                 | LR__1985
19eb4                 | '  
19eb4                 | '   if key4=key_enter then 
19eb4     7B 00 00 FF 
19eb8     AC E4 05 F1 | 	add	objptr, ##63148
19ebc     F2 20 02 FB | 	rdlong	local02, objptr
19ec0     7B 00 00 FF 
19ec4     AC E4 85 F1 | 	sub	objptr, ##63148
19ec8     8D 20 0E F2 | 	cmp	local02, #141 wz
19ecc     F0 00 90 5D |  if_ne	jmp	#LR__1988
19ed0     69 01 00 FF 
19ed4     EA 20 06 F6 | 	mov	local02, ##@LR__5059
19ed8     57 00 00 FF 
19edc     0C E4 05 F1 | 	add	objptr, ##44556
19ee0     F2 20 62 FC | 	wrlong	local02, objptr
19ee4                 | ' 
19ee4                 | ' ''      interpret: line$="" :let t1=getct()-t1 :rpt=0: rptcnt=0
19ee4                 | '     line$="" : for i=editor_spaces to 127
19ee4     18 E4 05 F1 | 	add	objptr, #24
19ee8     F2 30 02 FB | 	rdlong	local10, objptr
19eec     57 00 00 FF 
19ef0     24 E4 85 F1 | 	sub	objptr, ##44580
19ef4                 | LR__1986
19ef4     80 30 56 F2 | 	cmps	local10, #128 wc
19ef8     8C 00 90 3D |  if_ae	jmp	#LR__1987
19efc     3E E4 05 F1 | 	add	objptr, #62
19f00     F2 1E C2 FA | 	rdbyte	local01, objptr
19f04     0F 27 E2 F8 | 	getbyte	local05, local01, #0
19f08     13 2F 02 F6 | 	mov	local09, local05
19f0c     80 2E 06 FA | 	mul	local09, #128
19f10     3A E4 85 F1 | 	sub	objptr, #58
19f14     F2 2C 02 FB | 	rdlong	local08, objptr
19f18     04 E4 85 F1 | 	sub	objptr, #4
19f1c     16 13 02 F6 | 	mov	arg01, local08
19f20     17 13 02 F1 | 	add	arg01, local09
19f24     18 13 02 F1 | 	add	arg01, local10
19f28     38 F3 BF FD | 	call	#_pspeek
19f2c     FD 24 E2 F8 | 	getbyte	local04, result1, #0
19f30     7B 00 00 FF 
19f34     B0 E4 05 F1 | 	add	objptr, ##63152
19f38     F2 24 62 FC | 	wrlong	local04, objptr
19f3c     24 00 00 FF 
19f40     A4 E4 85 F1 | 	sub	objptr, ##18596
19f44     F2 28 02 FB | 	rdlong	local06, objptr
19f48     57 00 00 FF 
19f4c     0C E4 85 F1 | 	sub	objptr, ##44556
19f50     12 13 02 F6 | 	mov	arg01, local04
19f54     34 53 B0 FD | 	call	#__system__Chr_S
19f58     FD 14 02 F6 | 	mov	arg02, result1
19f5c     14 13 02 F6 | 	mov	arg01, local06
19f60     7C 31 B0 FD | 	call	#__system___string_concat
19f64     57 00 00 FF 
19f68     0C E4 05 F1 | 	add	objptr, ##44556
19f6c     F2 FA 61 FC | 	wrlong	result1, objptr
19f70     57 00 00 FF 
19f74     0C E4 85 F1 | 	sub	objptr, ##44556
19f78     18 23 02 F6 | 	mov	local03, local10
19f7c     01 22 06 F1 | 	add	local03, #1
19f80     11 31 02 F6 | 	mov	local10, local03
19f84     6C FF 9F FD | 	jmp	#LR__1986
19f88                 | LR__1987
19f88     18 21 B0 FD | 	call	#_hg010b_spin2_crlf
19f8c     8C 6A BE FD | 	call	#_interpret
19f90     69 01 00 FF 
19f94     EB 20 06 F6 | 	mov	local02, ##@LR__5060
19f98     57 00 00 FF 
19f9c     0C E4 05 F1 | 	add	objptr, ##44556
19fa0     F2 20 62 FC | 	wrlong	local02, objptr
19fa4     24 00 00 FF 
19fa8     94 E4 05 F1 | 	add	objptr, ##18580
19fac     F2 00 68 FC | 	wrlong	#0, objptr
19fb0     08 E4 05 F1 | 	add	objptr, #8
19fb4     F2 00 68 FC | 	wrlong	#0, objptr
19fb8     7B 00 00 FF 
19fbc     A8 E4 85 F1 | 	sub	objptr, ##63144
19fc0                 | LR__1988
19fc0     7B 00 00 FF 
19fc4     A4 E4 05 F1 | 	add	objptr, ##63140
19fc8     F2 20 02 FB | 	rdlong	local02, objptr
19fcc     10 21 E2 F8 | 	getbyte	local02, local02, #0
19fd0     08 E4 05 F1 | 	add	objptr, #8
19fd4     F2 20 62 FC | 	wrlong	local02, objptr
19fd8                 | '   'tab
19fd8                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
19fd8     7B 00 00 FF 
19fdc     AC E4 85 F1 | 	sub	objptr, ##63148
19fe0     2B 20 0E F2 | 	cmp	local02, #43 wz
19fe4     B4 00 90 5D |  if_ne	jmp	#LR__1989
19fe8     3C E4 05 F1 | 	add	objptr, #60
19fec     F2 24 E2 FA | 	rdword	local04, objptr
19ff0     3C E4 85 F1 | 	sub	objptr, #60
19ff4     12 23 32 F9 | 	getword	local03, local04, #0
19ff8     F0 22 16 F2 | 	cmp	local03, #240 wc
19ffc     9C 00 90 CD |  if_b	jmp	#LR__1989
1a000     79 00 00 FF 
1a004     D0 E5 05 F1 | 	add	objptr, ##62416
1a008     F2 1E 02 FB | 	rdlong	local01, objptr
1a00c     79 00 00 FF 
1a010     D0 E5 85 F1 | 	sub	objptr, ##62416
1a014     0F 27 02 F6 | 	mov	local05, local01
1a018     01 26 0E F2 | 	cmp	local05, #1 wz
1a01c     7C 00 90 5D |  if_ne	jmp	#LR__1989
1a020     04 00 00 FF 
1a024     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1a028     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1a02c     04 00 00 FF 
1a030     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1a034     56 00 00 FF 
1a038     44 22 06 F6 | 	mov	local03, ##44100
1a03c     0E 24 C6 F9 | 	decod	local04, #14
1a040     00 26 06 F6 | 	mov	local05, #0
1a044     03 00 00 FF 
1a048     DE 1E 06 F6 | 	mov	local01, ##1758
1a04c     00 12 06 F6 | 	mov	arg01, #0
1a050     56 00 00 FF 
1a054     44 16 06 F6 | 	mov	arg03, ##44100
1a058     0E 18 C6 F9 | 	decod	arg04, #14
1a05c     00 1A 06 F6 | 	mov	arg05, #0
1a060     03 00 00 FF 
1a064     DE 1C 06 F6 | 	mov	arg06, ##1758
1a068     0B 00 00 FF 
1a06c     CC E4 05 F1 | 	add	objptr, ##5836
1a070     C0 2B B0 FD | 	call	#_audio096_spin2_play
1a074     0B 00 00 FF 
1a078     CC E4 85 F1 | 	sub	objptr, ##5836
1a07c     2C 13 06 F6 | 	mov	arg01, #300
1a080     F4 32 B0 FD | 	call	#__system___waitms
1a084     00 12 06 F6 | 	mov	arg01, #0
1a088     0B 00 00 FF 
1a08c     CC E4 05 F1 | 	add	objptr, ##5836
1a090     F0 2C B0 FD | 	call	#_audio096_spin2_stop
1a094     0B 00 00 FF 
1a098     CC E4 85 F1 | 	sub	objptr, ##5836
1a09c                 | LR__1989
1a09c                 | '   if key4 = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
1a09c     7B 00 00 FF 
1a0a0     AC E4 05 F1 | 	add	objptr, ##63148
1a0a4     F2 20 02 FB | 	rdlong	local02, objptr
1a0a8     7B 00 00 FF 
1a0ac     AC E4 85 F1 | 	sub	objptr, ##63148
1a0b0     2B 20 0E F2 | 	cmp	local02, #43 wz
1a0b4     AC 00 90 5D |  if_ne	jmp	#LR__1992
1a0b8     3C E4 05 F1 | 	add	objptr, #60
1a0bc     F2 24 E2 FA | 	rdword	local04, objptr
1a0c0     3C E4 85 F1 | 	sub	objptr, #60
1a0c4     12 23 32 F9 | 	getword	local03, local04, #0
1a0c8     F0 22 16 F2 | 	cmp	local03, #240 wc
1a0cc     94 00 90 3D |  if_ae	jmp	#LR__1992
1a0d0     3C E4 05 F1 | 	add	objptr, #60
1a0d4     F2 20 E2 FA | 	rdword	local02, objptr
1a0d8     10 23 52 F6 | 	abs	local03, local02 wc
1a0dc     11 23 42 F8 | 	getnib	local03, local03, #0
1a0e0     11 23 82 F6 | 	negc	local03, local03
1a0e4     11 25 52 F6 | 	abs	local04, local03 wc
1a0e8     01 24 46 F0 | 	shr	local04, #1
1a0ec     12 25 82 F6 | 	negc	local04, local04
1a0f0     7B 00 00 FF 
1a0f4     78 E4 05 F1 | 	add	objptr, ##63096
1a0f8     F2 24 62 FC | 	wrlong	local04, objptr
1a0fc     12 31 02 F6 | 	mov	local10, local04
1a100     7B 00 00 FF 
1a104     B4 E4 85 F1 | 	sub	objptr, ##63156
1a108                 | LR__1990
1a108     08 30 56 F2 | 	cmps	local10, #8 wc
1a10c     54 00 90 3D |  if_ae	jmp	#LR__1991
1a110     57 00 00 FF 
1a114     0C E4 05 F1 | 	add	objptr, ##44556
1a118     F2 12 02 FB | 	rdlong	arg01, objptr
1a11c     57 00 00 FF 
1a120     0C E4 85 F1 | 	sub	objptr, ##44556
1a124     69 01 00 FF 
1a128     EC 24 06 F6 | 	mov	local04, ##@LR__5061
1a12c     12 15 02 F6 | 	mov	arg02, local04
1a130     AC 2F B0 FD | 	call	#__system___string_concat
1a134     57 00 00 FF 
1a138     0C E4 05 F1 | 	add	objptr, ##44556
1a13c     F2 FA 61 FC | 	wrlong	result1, objptr
1a140     57 00 00 FF 
1a144     0C E4 85 F1 | 	sub	objptr, ##44556
1a148     69 01 00 FF 
1a14c     EE 12 06 F6 | 	mov	arg01, ##@LR__5062
1a150     84 1C B0 FD | 	call	#_hg010b_spin2_write
1a154     18 23 02 F6 | 	mov	local03, local10
1a158     01 22 06 F1 | 	add	local03, #1
1a15c     11 31 02 F6 | 	mov	local10, local03
1a160     A4 FF 9F FD | 	jmp	#LR__1990
1a164                 | LR__1991
1a164                 | LR__1992
1a164                 | '  
1a164                 | '   'backspace
1a164                 | '   if key4 = 42 then 
1a164     7B 00 00 FF 
1a168     AC E4 05 F1 | 	add	objptr, ##63148
1a16c     F2 20 02 FB | 	rdlong	local02, objptr
1a170     7B 00 00 FF 
1a174     AC E4 85 F1 | 	sub	objptr, ##63148
1a178     2A 20 0E F2 | 	cmp	local02, #42 wz
1a17c     0C 02 90 5D |  if_ne	jmp	#LR__1998
1a180                 | '       if v.cursor_x>editor_spaces*2 then 
1a180     3C E4 05 F1 | 	add	objptr, #60
1a184     F2 20 E2 FA | 	rdword	local02, objptr
1a188     56 00 00 FF 
1a18c     E8 E5 05 F1 | 	add	objptr, ##44520
1a190     F2 26 02 FB | 	rdlong	local05, objptr
1a194     57 00 00 FF 
1a198     24 E4 85 F1 | 	sub	objptr, ##44580
1a19c     13 25 02 F6 | 	mov	local04, local05
1a1a0     12 23 02 F6 | 	mov	local03, local04
1a1a4     01 22 66 F0 | 	shl	local03, #1
1a1a8     11 21 5A F2 | 	cmps	local02, local03 wcz
1a1ac     B8 01 90 ED |  if_be	jmp	#LR__1996
1a1b0     3C E4 05 F1 | 	add	objptr, #60
1a1b4     F2 12 E2 FA | 	rdword	arg01, objptr
1a1b8     02 12 86 F1 | 	sub	arg01, #2
1a1bc     02 E4 05 F1 | 	add	objptr, #2
1a1c0     F2 14 C2 FA | 	rdbyte	arg02, objptr
1a1c4     3E E4 85 F1 | 	sub	objptr, #62
1a1c8     3C 17 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1a1cc                 | '          position v.cursor_x-2,v.cursor_y
1a1cc                 | '          for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1a1cc     3E E4 05 F1 | 	add	objptr, #62
1a1d0     F2 22 C2 FA | 	rdbyte	local03, objptr
1a1d4     11 25 E2 F8 | 	getbyte	local04, local03, #0
1a1d8     80 24 06 FA | 	mul	local04, #128
1a1dc     3A E4 85 F1 | 	sub	objptr, #58
1a1e0     F2 32 02 FB | 	rdlong	local11, objptr
1a1e4     19 31 02 F6 | 	mov	local10, local11
1a1e8     12 31 02 F1 | 	add	local10, local04
1a1ec     38 E4 05 F1 | 	add	objptr, #56
1a1f0     F2 1E E2 FA | 	rdword	local01, objptr
1a1f4     0F 2D 52 F6 | 	abs	local08, local01 wc
1a1f8     01 2C 46 F0 | 	shr	local08, #1
1a1fc     16 31 82 F3 | 	sumc	local10, local08
1a200     11 23 E2 F8 | 	getbyte	local03, local03, #0
1a204     80 22 06 FA | 	mul	local03, #128
1a208     3C E4 85 F1 | 	sub	objptr, #60
1a20c     11 33 02 F1 | 	add	local11, local03
1a210     80 32 06 F1 | 	add	local11, #128
1a214                 | LR__1993
1a214     19 31 52 F2 | 	cmps	local10, local11 wc
1a218     20 00 90 3D |  if_ae	jmp	#LR__1994
1a21c     18 13 02 F6 | 	mov	arg01, local10
1a220     01 12 06 F1 | 	add	arg01, #1
1a224     3C F0 BF FD | 	call	#_pspeek
1a228     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1a22c     18 13 02 F6 | 	mov	arg01, local10
1a230     E8 EF BF FD | 	call	#_pspoke
1a234     01 30 06 F1 | 	add	local10, #1
1a238     D8 FF 9F FD | 	jmp	#LR__1993
1a23c                 | LR__1994
1a23c     3E E4 05 F1 | 	add	objptr, #62
1a240     F2 26 C2 FA | 	rdbyte	local05, objptr
1a244     80 26 06 FA | 	mul	local05, #128
1a248     3A E4 85 F1 | 	sub	objptr, #58
1a24c     F2 12 02 FB | 	rdlong	arg01, objptr
1a250     04 E4 85 F1 | 	sub	objptr, #4
1a254     13 13 02 F1 | 	add	arg01, local05
1a258     7F 12 06 F1 | 	add	arg01, #127
1a25c     20 14 06 F6 | 	mov	arg02, #32
1a260     B8 EF BF FD | 	call	#_pspoke
1a264     7B 00 00 FF 
1a268     B8 E4 05 F1 | 	add	objptr, ##63160
1a26c     F2 00 68 FC | 	wrlong	#0, objptr
1a270     7B 00 00 FF 
1a274     7A E4 85 F1 | 	sub	objptr, ##63098
1a278     F2 22 C2 FA | 	rdbyte	local03, objptr
1a27c     11 25 E2 F8 | 	getbyte	local04, local03, #0
1a280     80 24 06 FA | 	mul	local04, #128
1a284     3A E4 85 F1 | 	sub	objptr, #58
1a288     F2 26 02 FB | 	rdlong	local05, objptr
1a28c     13 31 02 F6 | 	mov	local10, local05
1a290     12 31 02 F1 | 	add	local10, local04
1a294     38 E4 05 F1 | 	add	objptr, #56
1a298     F2 2E E2 FA | 	rdword	local09, objptr
1a29c     17 1F 32 F9 | 	getword	local01, local09, #0
1a2a0     0F 2D 52 F6 | 	abs	local08, local01 wc
1a2a4     01 2C 46 F0 | 	shr	local08, #1
1a2a8     16 2D 82 F6 | 	negc	local08, local08
1a2ac     16 31 02 F1 | 	add	local10, local08
1a2b0     11 23 E2 F8 | 	getbyte	local03, local03, #0
1a2b4     80 22 06 FA | 	mul	local03, #128
1a2b8     13 25 02 F6 | 	mov	local04, local05
1a2bc     3C E4 85 F1 | 	sub	objptr, #60
1a2c0     12 35 02 F6 | 	mov	local12, local04
1a2c4     11 35 02 F1 | 	add	local12, local03
1a2c8     80 34 06 F1 | 	add	local12, #128
1a2cc                 | LR__1995
1a2cc     1A 31 52 F2 | 	cmps	local10, local12 wc
1a2d0     B8 00 90 3D |  if_ae	jmp	#LR__1997
1a2d4     3C E4 05 F1 | 	add	objptr, #60
1a2d8     F2 20 E2 FA | 	rdword	local02, objptr
1a2dc     7B 00 00 FF 
1a2e0     7C E4 05 F1 | 	add	objptr, ##63100
1a2e4     F2 24 02 FB | 	rdlong	local04, objptr
1a2e8     01 24 66 F0 | 	shl	local04, #1
1a2ec     12 21 02 F1 | 	add	local02, local04
1a2f0     7B 00 00 FF 
1a2f4     7A E4 85 F1 | 	sub	objptr, ##63098
1a2f8     F2 28 C2 FA | 	rdbyte	local06, objptr
1a2fc     3E E4 85 F1 | 	sub	objptr, #62
1a300     10 28 06 FA | 	mul	local06, #16
1a304     04 28 06 F1 | 	add	local06, #4
1a308     18 13 02 F6 | 	mov	arg01, local10
1a30c     54 EF BF FD | 	call	#_pspeek
1a310     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1a314     41 E4 05 F1 | 	add	objptr, #65
1a318     F2 24 02 FB | 	rdlong	local04, objptr
1a31c     04 E4 05 F1 | 	add	objptr, #4
1a320     F2 1E 02 FB | 	rdlong	local01, objptr
1a324     45 E4 85 F1 | 	sub	objptr, #69
1a328     0F 27 02 F6 | 	mov	local05, local01
1a32c     10 13 02 F6 | 	mov	arg01, local02
1a330     14 15 02 F6 | 	mov	arg02, local06
1a334     11 17 02 F6 | 	mov	arg03, local03
1a338     12 19 02 F6 | 	mov	arg04, local04
1a33c     13 1B 02 F6 | 	mov	arg05, local05
1a340     60 14 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1a344     7B 00 00 FF 
1a348     B8 E4 05 F1 | 	add	objptr, ##63160
1a34c     F2 20 02 FB | 	rdlong	local02, objptr
1a350     01 20 06 F1 | 	add	local02, #1
1a354     F2 20 62 FC | 	wrlong	local02, objptr
1a358     7B 00 00 FF 
1a35c     B8 E4 85 F1 | 	sub	objptr, ##63160
1a360     01 30 06 F1 | 	add	local10, #1
1a364     64 FF 9F FD | 	jmp	#LR__1995
1a368                 | LR__1996
1a368     69 01 00 FF 
1a36c     F0 20 06 F6 | 	mov	local02, ##@LR__5063
1a370     57 00 00 FF 
1a374     0C E4 05 F1 | 	add	objptr, ##44556
1a378     F2 20 62 FC | 	wrlong	local02, objptr
1a37c     56 00 00 FF 
1a380     D0 E5 85 F1 | 	sub	objptr, ##44496
1a384     F2 08 58 FC | 	wrword	#4, objptr
1a388     3C E4 85 F1 | 	sub	objptr, #60
1a38c                 | LR__1997
1a38c                 | LR__1998
1a38c                 | '      if key4= 82 then 
1a38c     7B 00 00 FF 
1a390     AC E4 05 F1 | 	add	objptr, ##63148
1a394     F2 20 02 FB | 	rdlong	local02, objptr
1a398     7B 00 00 FF 
1a39c     AC E4 85 F1 | 	sub	objptr, ##63148
1a3a0     52 20 0E F2 | 	cmp	local02, #82 wz
1a3a4     50 00 90 5D |  if_ne	jmp	#LR__1999
1a3a8                 | ' return cursor_y
1a3a8     3E E4 05 F1 | 	add	objptr, #62
1a3ac     F2 20 C2 FA | 	rdbyte	local02, objptr
1a3b0     01 20 86 F1 | 	sub	local02, #1
1a3b4     7B 00 00 FF 
1a3b8     7E E4 05 F1 | 	add	objptr, ##63102
1a3bc     F2 20 62 FC | 	wrlong	local02, objptr
1a3c0     7B 00 00 FF 
1a3c4     BC E4 85 F1 | 	sub	objptr, ##63164
1a3c8     00 20 56 F2 | 	cmps	local02, #0 wc
1a3cc     7B 00 00 CF 
1a3d0     BC E4 05 C1 |  if_b	add	objptr, ##63164
1a3d4     F2 00 68 CC |  if_b	wrlong	#0, objptr
1a3d8     7B 00 00 CF 
1a3dc     BC E4 85 C1 |  if_b	sub	objptr, ##63164
1a3e0     7B 00 00 FF 
1a3e4     BC E4 05 F1 | 	add	objptr, ##63164
1a3e8     F2 12 02 FB | 	rdlong	arg01, objptr
1a3ec     7B 00 00 FF 
1a3f0     BC E4 85 F1 | 	sub	objptr, ##63164
1a3f4     7C 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1a3f8                 | LR__1999
1a3f8                 | '    if key4= 81 then
1a3f8     7B 00 00 FF 
1a3fc     AC E4 05 F1 | 	add	objptr, ##63148
1a400     F2 20 02 FB | 	rdlong	local02, objptr
1a404     7B 00 00 FF 
1a408     AC E4 85 F1 | 	sub	objptr, ##63148
1a40c     51 20 0E F2 | 	cmp	local02, #81 wz
1a410     50 00 90 5D |  if_ne	jmp	#LR__2000
1a414                 | ' return cursor_y
1a414     3E E4 05 F1 | 	add	objptr, #62
1a418     F2 20 C2 FA | 	rdbyte	local02, objptr
1a41c     01 20 06 F1 | 	add	local02, #1
1a420     7B 00 00 FF 
1a424     7E E4 05 F1 | 	add	objptr, ##63102
1a428     F2 20 62 FC | 	wrlong	local02, objptr
1a42c     7B 00 00 FF 
1a430     BC E4 85 F1 | 	sub	objptr, ##63164
1a434     25 20 56 F2 | 	cmps	local02, #37 wc
1a438     7B 00 00 3F 
1a43c     BC E4 05 31 |  if_ae	add	objptr, ##63164
1a440     F2 48 68 3C |  if_ae	wrlong	#36, objptr
1a444     7B 00 00 3F 
1a448     BC E4 85 31 |  if_ae	sub	objptr, ##63164
1a44c     7B 00 00 FF 
1a450     BC E4 05 F1 | 	add	objptr, ##63164
1a454     F2 12 02 FB | 	rdlong	arg01, objptr
1a458     7B 00 00 FF 
1a45c     BC E4 85 F1 | 	sub	objptr, ##63164
1a460     10 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1a464                 | LR__2000
1a464                 | '    if key4= 80 then
1a464     7B 00 00 FF 
1a468     AC E4 05 F1 | 	add	objptr, ##63148
1a46c     F2 20 02 FB | 	rdlong	local02, objptr
1a470     7B 00 00 FF 
1a474     AC E4 85 F1 | 	sub	objptr, ##63148
1a478     50 20 0E F2 | 	cmp	local02, #80 wz
1a47c     6C 00 90 5D |  if_ne	jmp	#LR__2001
1a480                 | ' return cursor_x
1a480     3C E4 05 F1 | 	add	objptr, #60
1a484     F2 20 E2 FA | 	rdword	local02, objptr
1a488     02 20 86 F1 | 	sub	local02, #2
1a48c     7B 00 00 FF 
1a490     84 E4 05 F1 | 	add	objptr, ##63108
1a494     F2 20 62 FC | 	wrlong	local02, objptr
1a498                 | '      if cx<editor_spaces then cx=editor_spaces
1a498     24 00 00 FF 
1a49c     9C E4 85 F1 | 	sub	objptr, ##18588
1a4a0     F2 24 02 FB | 	rdlong	local04, objptr
1a4a4     57 00 00 FF 
1a4a8     24 E4 85 F1 | 	sub	objptr, ##44580
1a4ac     12 23 02 F6 | 	mov	local03, local04
1a4b0     11 21 52 F2 | 	cmps	local02, local03 wc
1a4b4     57 00 00 CF 
1a4b8     24 E4 05 C1 |  if_b	add	objptr, ##44580
1a4bc     F2 20 02 CB |  if_b	rdlong	local02, objptr
1a4c0     24 00 00 CF 
1a4c4     9C E4 05 C1 |  if_b	add	objptr, ##18588
1a4c8     F2 20 62 CC |  if_b	wrlong	local02, objptr
1a4cc     7B 00 00 CF 
1a4d0     C0 E4 85 C1 |  if_b	sub	objptr, ##63168
1a4d4     7B 00 00 FF 
1a4d8     C0 E4 05 F1 | 	add	objptr, ##63168
1a4dc     F2 12 02 FB | 	rdlong	arg01, objptr
1a4e0     7B 00 00 FF 
1a4e4     C0 E4 85 F1 | 	sub	objptr, ##63168
1a4e8     58 14 B0 FD | 	call	#_hg010b_spin2_setcursorx
1a4ec                 | LR__2001
1a4ec                 | '    if key4= 79 then
1a4ec     7B 00 00 FF 
1a4f0     AC E4 05 F1 | 	add	objptr, ##63148
1a4f4     F2 20 02 FB | 	rdlong	local02, objptr
1a4f8     7B 00 00 FF 
1a4fc     AC E4 85 F1 | 	sub	objptr, ##63148
1a500     4F 20 0E F2 | 	cmp	local02, #79 wz
1a504     50 00 90 5D |  if_ne	jmp	#LR__2002
1a508                 | ' return cursor_x
1a508     3C E4 05 F1 | 	add	objptr, #60
1a50c     F2 20 E2 FA | 	rdword	local02, objptr
1a510     02 20 06 F1 | 	add	local02, #2
1a514     7B 00 00 FF 
1a518     84 E4 05 F1 | 	add	objptr, ##63108
1a51c     F2 20 62 FC | 	wrlong	local02, objptr
1a520                 | '      if cx>254  then cx=254 
1a520     7B 00 00 FF 
1a524     C0 E4 85 F1 | 	sub	objptr, ##63168
1a528     FF 20 56 F2 | 	cmps	local02, #255 wc
1a52c     7B 00 00 3F 
1a530     C0 E4 05 31 |  if_ae	add	objptr, ##63168
1a534     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
1a538     7B 00 00 3F 
1a53c     C0 E4 85 31 |  if_ae	sub	objptr, ##63168
1a540     7B 00 00 FF 
1a544     C0 E4 05 F1 | 	add	objptr, ##63168
1a548     F2 12 02 FB | 	rdlong	arg01, objptr
1a54c     7B 00 00 FF 
1a550     C0 E4 85 F1 | 	sub	objptr, ##63168
1a554     EC 13 B0 FD | 	call	#_hg010b_spin2_setcursorx
1a558                 | LR__2002
1a558                 | '   ' print key3 and 255
1a558                 | '    
1a558                 | '    if key4=73 then ' ins
1a558     7B 00 00 FF 
1a55c     AC E4 05 F1 | 	add	objptr, ##63148
1a560     F2 28 02 FB | 	rdlong	local06, objptr
1a564     7B 00 00 FF 
1a568     AC E4 85 F1 | 	sub	objptr, ##63148
1a56c     49 28 0E F2 | 	cmp	local06, #73 wz
1a570     38 00 90 5D |  if_ne	jmp	#LR__2005
1a574     7B 00 00 FF 
1a578     98 E4 05 F1 | 	add	objptr, ##63128
1a57c     F2 20 02 FB | 	rdlong	local02, objptr
1a580     10 29 22 F6 | 	not	local06, local02
1a584     F2 28 62 FC | 	wrlong	local06, objptr
1a588                 | '      if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
1a588     7B 00 00 FF 
1a58c     98 E4 85 F1 | 	sub	objptr, ##63128
1a590     00 28 0E F2 | 	cmp	local06, #0 wz
1a594     0C 00 90 AD |  if_e	jmp	#LR__2003
1a598     0E 12 06 F6 | 	mov	arg01, #14
1a59c     28 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1a5a0     08 00 90 FD | 	jmp	#LR__2004
1a5a4                 | LR__2003
1a5a4     00 12 06 F6 | 	mov	arg01, #0
1a5a8     1C 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1a5ac                 | LR__2004
1a5ac                 | LR__2005
1a5ac     7B 00 00 FF 
1a5b0     A4 E4 05 F1 | 	add	objptr, ##63140
1a5b4     F2 00 68 FC | 	wrlong	#0, objptr
1a5b8     7B 00 00 FF 
1a5bc     A4 E4 85 F1 | 	sub	objptr, ##63140
1a5c0     88 F2 9F FD | 	jmp	#LR__1970
1a5c4     A7 F0 03 F6 | 	mov	ptra, fp
1a5c8     B2 00 A0 FD | 	call	#popregs_
1a5cc                 | _program_ret
1a5cc     2D 00 64 FD | 	ret
1a5d0                 | 
1a5d0                 | ' '' this is not a main program.
1a5d0                 | ' 
1a5d0                 | ' '****************************************************************************************************************
1a5d0                 | ' '                                                                                                             	*
1a5d0                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1a5d0                 | ' '                                                                                                            	*
1a5d0                 | ' ' base - HDMI base pin												*
1a5d0                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1a5d0                 | ' '														*
1a5d0                 | ' '														*
1a5d0                 | ' '****************************************************************************************************************
1a5d0                 | ' 
1a5d0                 | ' pub start(base,mb):result |i
1a5d0                 | _hg010b_spin2_start
1a5d0                 | ' 
1a5d0                 | ' '--------------------------- initialize pointers and variables
1a5d0                 | ' 
1a5d0                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1a5d0     34 E4 05 F1 | 	add	objptr, #52
1a5d4     F2 FA 01 F6 | 	mov	result1, objptr
1a5d8     28 E4 85 F1 | 	sub	objptr, #40
1a5dc     F2 FA 61 FC | 	wrlong	result1, objptr
1a5e0                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1a5e0                 | ' hdmibase:=base							' HDMI base pin, 8*n
1a5e0     18 E4 05 F1 | 	add	objptr, #24
1a5e4     F2 12 62 FC | 	wrlong	arg01, objptr
1a5e8                 | ' mailbox_ptr:=mb		
1a5e8     04 E4 05 F1 | 	add	objptr, #4
1a5ec     F2 14 62 FC | 	wrlong	arg02, objptr
1a5f0                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1a5f0     C1 E5 05 F1 | 	add	objptr, #449
1a5f4     F2 14 62 FC | 	wrlong	arg02, objptr
1a5f8                 | ' sprite_ptr:=@spr1ptr
1a5f8     D8 E4 85 F1 | 	sub	objptr, #216
1a5fc     F2 FA 01 F6 | 	mov	result1, objptr
1a600     E5 E4 85 F1 | 	sub	objptr, #229
1a604     F2 FA 61 FC | 	wrlong	result1, objptr
1a608                 | ' 
1a608                 | ' 		'
1a608                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1a608     E5 E4 05 F1 | 	add	objptr, #229
1a60c     F2 FA 01 FB | 	rdlong	result1, objptr
1a610     D0 FA 05 F1 | 	add	result1, #208
1a614     FD 10 58 FC | 	wrword	#8, result1
1a618                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1a618     F2 16 02 FB | 	rdlong	arg03, objptr
1a61c     D2 16 06 F1 | 	add	arg03, #210
1a620     0B 21 58 FC | 	wrword	#16, arg03
1a624                 | ' leading_spaces:=0				'
1a624     A5 E5 05 F1 | 	add	objptr, #421
1a628     F2 00 68 FC | 	wrlong	#0, objptr
1a62c                 | ' 
1a62c                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1a62c     99 E4 85 F1 | 	sub	objptr, #153
1a630     00 00 A0 FF 
1a634     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1a638                 | ' emptydl[1]:=0
1a638     04 E4 05 F1 | 	add	objptr, #4
1a63c     F2 00 68 FC | 	wrlong	#0, objptr
1a640                 | ' 
1a640                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1a640                 | ' 
1a640                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1a640     28 E5 85 F1 | 	sub	objptr, #296
1a644     F2 02 68 FC | 	wrlong	#1, objptr
1a648                 | ' if s_debug<>0
1a648                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1a648     20 00 80 FF 
1a64c     F2 00 68 FC | 	wrlong	##16384, objptr
1a650     F9 E4 85 F1 | 	sub	objptr, #249
1a654                 | ' setmode()							' set the mode, see below
1a654     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1a658                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1a658     49 E4 05 F1 | 	add	objptr, #73
1a65c     F2 FA 01 F6 | 	mov	result1, objptr
1a660     35 E4 85 F1 | 	sub	objptr, #53
1a664     F2 FA 61 FC | 	wrlong	result1, objptr
1a668                 | ' cursor_ptr:=@cursor_x						
1a668     28 E4 05 F1 | 	add	objptr, #40
1a66c     F2 16 02 F6 | 	mov	arg03, objptr
1a670     2C E4 85 F1 | 	sub	objptr, #44
1a674     F2 16 62 FC | 	wrlong	arg03, objptr
1a678                 | ' fontnum:=0  							' start with a PC type font 
1a678     55 E4 05 F1 | 	add	objptr, #85
1a67c     F2 00 68 FC | 	wrlong	#0, objptr
1a680                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1a680     1C E4 05 F1 | 	add	objptr, #28
1a684     F2 12 02 F6 | 	mov	arg01, objptr
1a688     81 E4 85 F1 | 	sub	objptr, #129
1a68c     10 00 00 FF 
1a690     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1a694     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1a698     10 00 00 FF 
1a69c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1a6a0     10 16 06 F6 | 	mov	arg03, #16
1a6a4     FC 28 B0 FD | 	call	#__system____builtin_memmove
1a6a8                 | ' leading_spaces:=0
1a6a8     01 00 00 FF 
1a6ac     B6 E4 05 F1 | 	add	objptr, ##694
1a6b0     F2 00 68 FC | 	wrlong	#0, objptr
1a6b4     01 00 00 FF 
1a6b8     B6 E4 85 F1 | 	sub	objptr, ##694
1a6bc                 | ' '---------------------------- initialize a cursor (MSDOS type)
1a6bc                 | ' 
1a6bc                 | ' initcursor(154)
1a6bc     9A 12 06 F6 | 	mov	arg01, #154
1a6c0     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1a6c4                 | ' 
1a6c4                 | ' '---------------------------- start the cog
1a6c4                 | ' 
1a6c4                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1a6c4     10 00 00 FF 
1a6c8     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1a6cc     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1a6d0     10 00 00 FF 
1a6d4     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1a6d8     14 E4 05 F1 | 	add	objptr, #20
1a6dc     10 FA 05 F6 | 	mov	result1, #16
1a6e0     28 E4 61 FD | 	setq	objptr
1a6e4     0A FB F1 FC | 	coginit	result1, arg02 wc
1a6e8     01 FA 65 C6 |  if_b	neg	result1, #1
1a6ec     1C E4 05 F1 | 	add	objptr, #28
1a6f0     F2 FA 61 FC | 	wrlong	result1, objptr
1a6f4     30 E4 85 F1 | 	sub	objptr, #48
1a6f8                 | ' waitms(40)							' wait for stabilize
1a6f8     28 12 06 F6 | 	mov	arg01, #40
1a6fc     78 2C B0 FD | 	call	#__system___waitms
1a700                 | ' return cog							' return the driver's cog #
1a700     30 E4 05 F1 | 	add	objptr, #48
1a704     F2 FA 01 FB | 	rdlong	result1, objptr
1a708     30 E4 85 F1 | 	sub	objptr, #48
1a70c                 | _hg010b_spin2_start_ret
1a70c     2D 00 64 FD | 	ret
1a710                 | 
1a710                 | ' 
1a710                 | ' 
1a710                 | ' '**************************************************************************************************************** 
1a710                 | ' '                                                                                                             	*
1a710                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1a710                 | ' '  Mode number - see start() above or bits below								*
1a710                 | ' '                                                                                                             	*
1a710                 | ' '****************************************************************************************************************
1a710                 | ' 
1a710                 | ' '---------------------------- initialize a cursor (MSDOS type)
1a710                 | ' pub initcursor(color) |i
1a710                 | _hg010b_spin2_initcursor
1a710     03 4A 05 F6 | 	mov	COUNT_, #3
1a714     A8 00 A0 FD | 	call	#pushregs_
1a718     09 1F 02 F6 | 	mov	local01, arg01
1a71c                 | ' 
1a71c                 | ' cursor_x:=0							' place the cursor at 0:0
1a71c     3C E4 05 F1 | 	add	objptr, #60
1a720     F2 00 58 FC | 	wrword	#0, objptr
1a724                 | ' cursor_y:=0
1a724     02 E4 05 F1 | 	add	objptr, #2
1a728     F2 00 48 FC | 	wrbyte	#0, objptr
1a72c                 | ' repeat i from 0 to 111
1a72c     00 20 06 F6 | 	mov	local02, #0
1a730     F8 E5 05 F1 | 	add	objptr, #504
1a734     97 1A 48 FB | 	callpa	#(@LR__2012-@LR__2010)>>2,fcache_load_ptr_
1a738                 | LR__2010
1a738                 | '   cursor[i]:=0
1a738     10 23 02 F6 | 	mov	local03, local02
1a73c     F2 22 02 F1 | 	add	local03, objptr
1a740     11 01 48 FC | 	wrbyte	#0, local03
1a744     01 20 06 F1 | 	add	local02, #1
1a748     70 20 56 F2 | 	cmps	local02, #112 wc
1a74c     E8 FF 9F CD |  if_b	jmp	#LR__2010
1a750                 | ' repeat i from 112 to 127
1a750     70 20 06 F6 | 	mov	local02, #112
1a754                 | LR__2011
1a754                 | '   cursor[i]:=color  
1a754     10 23 02 F6 | 	mov	local03, local02
1a758     F2 22 02 F1 | 	add	local03, objptr
1a75c     11 1F 42 FC | 	wrbyte	local01, local03
1a760     01 20 06 F1 | 	add	local02, #1
1a764     80 20 16 F2 | 	cmp	local02, #128 wc
1a768     E8 FF 9F CD |  if_b	jmp	#LR__2011
1a76c                 | LR__2012
1a76c                 | ' 'repeat i from 0 to 127
1a76c                 | ' '  if ((i/8)//2)
1a76c                 | ' '    cursor[i]:=15
1a76c                 | ' '  else
1a76c                 | ' '    cursor[i]:=0
1a76c                 | ' '  if i>=120    
1a76c                 | ' '    cursor[i]:=40
1a76c                 | ' setspriteptr(17,@cursor)
1a76c     F2 14 02 F6 | 	mov	arg02, objptr
1a770     01 00 00 FF 
1a774     36 E4 85 F1 | 	sub	objptr, ##566
1a778     11 12 06 F6 | 	mov	arg01, #17
1a77c     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1a780                 | ' setspritesize(17,8,16)
1a780     11 12 06 F6 | 	mov	arg01, #17
1a784     08 14 06 F6 | 	mov	arg02, #8
1a788     10 16 06 F6 | 	mov	arg03, #16
1a78c     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1a790                 | ' setspritepos(17,0,0)
1a790     11 12 06 F6 | 	mov	arg01, #17
1a794     00 14 06 F6 | 	mov	arg02, #0
1a798     00 16 06 F6 | 	mov	arg03, #0
1a79c     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1a7a0                 | ' cursorshape:=14
1a7a0     0B 00 00 FF 
1a7a4     C6 E4 05 F1 | 	add	objptr, ##5830
1a7a8     F2 1C 68 FC | 	wrlong	#14, objptr
1a7ac                 | ' cursorcolor:=color
1a7ac     04 E4 85 F1 | 	sub	objptr, #4
1a7b0     F2 1E 62 FC | 	wrlong	local01, objptr
1a7b4     0B 00 00 FF 
1a7b8     C2 E4 85 F1 | 	sub	objptr, ##5826
1a7bc     A7 F0 03 F6 | 	mov	ptra, fp
1a7c0     B2 00 A0 FD | 	call	#popregs_
1a7c4                 | _hg010b_spin2_initcursor_ret
1a7c4     2D 00 64 FD | 	ret
1a7c8                 | 
1a7c8                 | ' 
1a7c8                 | ' pub setcursorshape(shape) | i
1a7c8                 | _hg010b_spin2_setcursorshape
1a7c8                 | ' 
1a7c8                 | ' cursorshape:=shape
1a7c8     0B 00 00 FF 
1a7cc     C6 E4 05 F1 | 	add	objptr, ##5830
1a7d0     F2 12 62 FC | 	wrlong	arg01, objptr
1a7d4                 | ' repeat i from 0 to (8*cursorshape)-1
1a7d4     00 00 06 F6 | 	mov	_var01, #0
1a7d8     09 03 02 F6 | 	mov	_var02, arg01
1a7dc     03 02 66 F0 | 	shl	_var02, #3
1a7e0     01 02 86 F1 | 	sub	_var02, #1
1a7e4     00 02 56 F2 | 	cmps	_var02, #0 wc
1a7e8     01 04 86 F6 | 	negc	_var03, #1
1a7ec     02 07 02 F6 | 	mov	_var04, _var03
1a7f0     02 03 02 F1 | 	add	_var02, _var03
1a7f4     0A 00 00 FF 
1a7f8     90 E4 85 F1 | 	sub	objptr, ##5264
1a7fc     97 0C 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
1a800                 | LR__2020
1a800                 | '   cursor[i]:=0
1a800     00 05 02 F6 | 	mov	_var03, _var01
1a804     F2 04 02 F1 | 	add	_var03, objptr
1a808     02 01 48 FC | 	wrbyte	#0, _var03
1a80c     03 01 02 F1 | 	add	_var01, _var04
1a810     01 01 0A F2 | 	cmp	_var01, _var02 wz
1a814     E8 FF 9F 5D |  if_ne	jmp	#LR__2020
1a818                 | LR__2021
1a818                 | ' repeat i from 8*cursorshape to 127
1a818     0A 00 00 FF 
1a81c     90 E4 05 F1 | 	add	objptr, ##5264
1a820     F2 06 02 FB | 	rdlong	_var04, objptr
1a824     03 01 02 F6 | 	mov	_var01, _var04
1a828     03 00 66 F0 | 	shl	_var01, #3
1a82c     0B 00 00 FF 
1a830     C6 E4 85 F1 | 	sub	objptr, ##5830
1a834     03 06 66 F0 | 	shl	_var04, #3
1a838     80 06 56 F2 | 	cmps	_var04, #128 wc
1a83c     01 04 A6 F6 | 	negnc	_var03, #1
1a840     7F 02 06 F6 | 	mov	_var02, #127
1a844     02 03 02 F1 | 	add	_var02, _var03
1a848     97 1A 48 FB | 	callpa	#(@LR__2023-@LR__2022)>>2,fcache_load_ptr_
1a84c                 | LR__2022
1a84c                 | '   cursor[i]:=cursorcolor
1a84c     00 07 02 F6 | 	mov	_var04, _var01
1a850     01 00 00 FF 
1a854     36 E4 05 F1 | 	add	objptr, ##566
1a858     F2 06 02 F1 | 	add	_var04, objptr
1a85c     0A 00 00 FF 
1a860     8C E4 05 F1 | 	add	objptr, ##5260
1a864     F2 12 02 FB | 	rdlong	arg01, objptr
1a868     0B 00 00 FF 
1a86c     C2 E4 85 F1 | 	sub	objptr, ##5826
1a870     03 13 42 FC | 	wrbyte	arg01, _var04
1a874     02 01 02 F1 | 	add	_var01, _var03
1a878     01 01 0A F2 | 	cmp	_var01, _var02 wz
1a87c     CC FF 9F 5D |  if_ne	jmp	#LR__2022
1a880                 | LR__2023
1a880                 | _hg010b_spin2_setcursorshape_ret
1a880     2D 00 64 FD | 	ret
1a884                 | 
1a884                 | ' 
1a884                 | ' pub setcursorcolor(color) | i
1a884                 | _hg010b_spin2_setcursorcolor
1a884                 | ' 
1a884                 | ' cursorcolor:=color
1a884     0B 00 00 FF 
1a888     C2 E4 05 F1 | 	add	objptr, ##5826
1a88c     F2 12 62 FC | 	wrlong	arg01, objptr
1a890                 | ' repeat i from 0 to (8*cursorshape)-1
1a890     00 12 06 F6 | 	mov	arg01, #0
1a894     04 E4 05 F1 | 	add	objptr, #4
1a898     F2 00 02 FB | 	rdlong	_var01, objptr
1a89c     03 00 66 F0 | 	shl	_var01, #3
1a8a0     01 00 86 F1 | 	sub	_var01, #1
1a8a4     00 00 56 F2 | 	cmps	_var01, #0 wc
1a8a8     01 02 86 F6 | 	negc	_var02, #1
1a8ac     01 05 02 F6 | 	mov	_var03, _var02
1a8b0     01 01 02 F1 | 	add	_var01, _var02
1a8b4     0A 00 00 FF 
1a8b8     90 E4 85 F1 | 	sub	objptr, ##5264
1a8bc     97 0C 48 FB | 	callpa	#(@LR__2031-@LR__2030)>>2,fcache_load_ptr_
1a8c0                 | LR__2030
1a8c0                 | '   cursor[i]:=0
1a8c0     09 03 02 F6 | 	mov	_var02, arg01
1a8c4     F2 02 02 F1 | 	add	_var02, objptr
1a8c8     01 01 48 FC | 	wrbyte	#0, _var02
1a8cc     02 13 02 F1 | 	add	arg01, _var03
1a8d0     00 13 0A F2 | 	cmp	arg01, _var01 wz
1a8d4     E8 FF 9F 5D |  if_ne	jmp	#LR__2030
1a8d8                 | LR__2031
1a8d8                 | ' repeat i from 8*cursorshape to 127
1a8d8     0A 00 00 FF 
1a8dc     90 E4 05 F1 | 	add	objptr, ##5264
1a8e0     F2 04 02 FB | 	rdlong	_var03, objptr
1a8e4     02 13 02 F6 | 	mov	arg01, _var03
1a8e8     03 12 66 F0 | 	shl	arg01, #3
1a8ec     0B 00 00 FF 
1a8f0     C6 E4 85 F1 | 	sub	objptr, ##5830
1a8f4     03 04 66 F0 | 	shl	_var03, #3
1a8f8     80 04 56 F2 | 	cmps	_var03, #128 wc
1a8fc     01 02 A6 F6 | 	negnc	_var02, #1
1a900     7F 00 06 F6 | 	mov	_var01, #127
1a904     01 01 02 F1 | 	add	_var01, _var02
1a908     97 1A 48 FB | 	callpa	#(@LR__2033-@LR__2032)>>2,fcache_load_ptr_
1a90c                 | LR__2032
1a90c                 | '   cursor[i]:=cursorcolor
1a90c     09 05 02 F6 | 	mov	_var03, arg01
1a910     01 00 00 FF 
1a914     36 E4 05 F1 | 	add	objptr, ##566
1a918     F2 04 02 F1 | 	add	_var03, objptr
1a91c     0A 00 00 FF 
1a920     8C E4 05 F1 | 	add	objptr, ##5260
1a924     F2 06 02 FB | 	rdlong	_var04, objptr
1a928     0B 00 00 FF 
1a92c     C2 E4 85 F1 | 	sub	objptr, ##5826
1a930     02 07 42 FC | 	wrbyte	_var04, _var03
1a934     01 13 02 F1 | 	add	arg01, _var02
1a938     00 13 0A F2 | 	cmp	arg01, _var01 wz
1a93c     CC FF 9F 5D |  if_ne	jmp	#LR__2032
1a940                 | LR__2033
1a940                 | _hg010b_spin2_setcursorcolor_ret
1a940     2D 00 64 FD | 	ret
1a944                 | 
1a944                 | '   
1a944                 | '   
1a944                 | '   
1a944                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1a944                 | _hg010b_spin2_setmode
1a944     02 4A 05 F6 | 	mov	COUNT_, #2
1a948     A8 00 A0 FD | 	call	#pushregs_
1a94c                 | ' 
1a94c                 | ' 
1a94c                 | ' dl_ptr:=@emptydl[0]
1a94c     01 00 00 FF 
1a950     1D E4 05 F1 | 	add	objptr, ##541
1a954     F2 1A 02 F6 | 	mov	arg05, objptr
1a958     FD E5 85 F1 | 	sub	objptr, #509
1a95c     F2 1A 62 FC | 	wrlong	arg05, objptr
1a960                 | ' 
1a960                 | ' if cog>0 
1a960     10 E4 05 F1 | 	add	objptr, #16
1a964     F2 1A 02 FB | 	rdlong	arg05, objptr
1a968     30 E4 85 F1 | 	sub	objptr, #48
1a96c     01 1A 56 F2 | 	cmps	arg05, #1 wc
1a970                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1a970     01 12 06 36 |  if_ae	mov	arg01, #1
1a974     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1a978                 | ' xres:=1024
1a978     01 00 00 FF 
1a97c     26 E4 05 F1 | 	add	objptr, ##550
1a980     02 00 80 FF 
1a984     F2 00 68 FC | 	wrlong	##1024, objptr
1a988                 | ' yres:=600
1a988     04 E4 05 F1 | 	add	objptr, #4
1a98c     01 00 80 FF 
1a990     F2 B0 68 FC | 	wrlong	##600, objptr
1a994                 | ' ppl:=(timings[3])
1a994     10 00 00 FF 
1a998     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1a99c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1a9a0     51 E5 85 F1 | 	sub	objptr, #337
1a9a4     F2 1A 62 FC | 	wrlong	arg05, objptr
1a9a8                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1a9a8     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1a9ac     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1a9b0     01 1E 66 F0 | 	shl	local01, #1
1a9b4     80 E4 85 F1 | 	sub	objptr, #128
1a9b8     F2 1E 62 FC | 	wrlong	local01, objptr
1a9bc                 | ' cpl1:=cpl '' todo remove
1a9bc     04 E4 05 F1 | 	add	objptr, #4
1a9c0     F2 1E 62 FC | 	wrlong	local01, objptr
1a9c4                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1a9c4     02 00 00 FF 
1a9c8     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1a9cc     41 E4 85 F1 | 	sub	objptr, #65
1a9d0     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1a9d4                 | ' repeat i from 0 to 3
1a9d4     00 20 06 F6 | 	mov	local02, #0
1a9d8     02 00 00 FF 
1a9dc     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1a9e0     08 E4 05 F1 | 	add	objptr, #8
1a9e4     97 20 48 FB | 	callpa	#(@LR__2041-@LR__2040)>>2,fcache_load_ptr_
1a9e8                 | LR__2040
1a9e8                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1a9e8     10 1F 02 F6 | 	mov	local01, local02
1a9ec     02 1E 66 F0 | 	shl	local01, #2
1a9f0     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1a9f4     F2 1A 02 FB | 	rdlong	arg05, objptr
1a9f8     11 1A 66 F0 | 	shl	arg05, #17
1a9fc     0F 1F 02 FB | 	rdlong	local01, local01
1aa00     0D 1F 02 F1 | 	add	local01, arg05
1aa04     80 40 38 FF 
1aa08     00 1E 06 F1 | 	add	local01, ##1887502336
1aa0c     10 1B 02 F6 | 	mov	arg05, local02
1aa10     02 1A 66 F0 | 	shl	arg05, #2
1aa14     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1aa18     0D 1F 62 FC | 	wrlong	local01, arg05
1aa1c     01 20 06 F1 | 	add	local02, #1
1aa20     04 20 56 F2 | 	cmps	local02, #4 wc
1aa24     C0 FF 9F CD |  if_b	jmp	#LR__2040
1aa28                 | LR__2041
1aa28     24 E4 85 F1 | 	sub	objptr, #36
1aa2c                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1aa2c     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1aa30     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1aa34     14 1E 66 FC | 	wrlong	local01, #20
1aa38                 | ' hubset(timings[10])
1aa38     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1aa3c     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1aa40     10 00 00 FF 
1aa44     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1aa48     00 12 62 FD | 	hubset	arg01
1aa4c                 | ' waitms(1)                                                   	' wait for stabilization
1aa4c     01 12 06 F6 | 	mov	arg01, #1
1aa50     24 29 B0 FD | 	call	#__system___waitms
1aa54     10 00 00 FF 
1aa58     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1aa5c     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1aa60     61 E4 05 F1 | 	add	objptr, #97
1aa64     F2 20 62 FC | 	wrlong	local02, objptr
1aa68     10 1F 52 F6 | 	abs	local01, local02 wc
1aa6c     04 1E 46 F0 | 	shr	local01, #4
1aa70     0F 1F 82 F6 | 	negc	local01, local01
1aa74     9C E4 05 F1 | 	add	objptr, #156
1aa78     F2 1E 62 FC | 	wrlong	local01, objptr
1aa7c     A4 E4 85 F1 | 	sub	objptr, #164
1aa80     F2 20 02 FB | 	rdlong	local02, objptr
1aa84     08 E4 05 F1 | 	add	objptr, #8
1aa88     F2 1E 02 FB | 	rdlong	local01, objptr
1aa8c     0F 21 02 FD | 	qmul	local02, local01
1aa90                 | ' lines:=timings[11]
1aa90                 | ' t_lines:=lines/16
1aa90                 | ' buflen:=cpl*lines						' framebuffer length in longs
1aa90     29 E4 85 F1 | 	sub	objptr, #41
1aa94     19 1E C6 F9 | 	decod	local01, #25
1aa98     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1aa9c     18 20 62 FD | 	getqx	local02
1aaa0     F2 20 62 FC | 	wrlong	local02, objptr
1aaa4     38 E4 85 F1 | 	sub	objptr, #56
1aaa8     02 20 66 F0 | 	shl	local02, #2
1aaac     10 1F 82 F1 | 	sub	local01, local02
1aab0     F2 1E 62 FC | 	wrlong	local01, objptr
1aab4     FD E4 05 F1 | 	add	objptr, #253
1aab8     F2 20 02 FB | 	rdlong	local02, objptr
1aabc     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1aac0     0D 21 02 FD | 	qmul	local02, arg05
1aac4                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1aac4                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1aac4     F9 E4 85 F1 | 	sub	objptr, #249
1aac8                 | ' mode_ptr:=@timings						' set pointers to timings
1aac8     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1aacc                 | ' graphmode:=1024+512+192+48							' det global variable
1aacc                 | ' makedl(graphmode)							' make a DL for the mode
1aacc     03 00 00 FF 
1aad0     F0 12 06 F6 | 	mov	arg01, ##1776
1aad4     18 20 62 FD | 	getqx	local02
1aad8     10 1F 82 F1 | 	sub	local01, local02
1aadc     F2 1E 62 FC | 	wrlong	local01, objptr
1aae0     14 E4 05 F1 | 	add	objptr, #20
1aae4     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1aae8     79 E4 05 F1 | 	add	objptr, #121
1aaec     03 00 80 FF 
1aaf0     F2 E0 69 FC | 	wrlong	##1776, objptr
1aaf4     91 E4 85 F1 | 	sub	objptr, #145
1aaf8     10 00 00 FF 
1aafc     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1ab00     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1ab04                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1ab04     F2 1E 02 FB | 	rdlong	local01, objptr
1ab08     DD E4 05 F1 | 	add	objptr, #221
1ab0c     F2 1E 62 FC | 	wrlong	local01, objptr
1ab10                 | ' s_font_ptr:=font_ptr
1ab10     D5 E4 85 F1 | 	sub	objptr, #213
1ab14     F2 1E 02 FB | 	rdlong	local01, objptr
1ab18     D9 E4 05 F1 | 	add	objptr, #217
1ab1c     F2 1E 62 FC | 	wrlong	local01, objptr
1ab20                 | ' s_lines:=lines
1ab20     80 E4 85 F1 | 	sub	objptr, #128
1ab24     F2 1E 02 FB | 	rdlong	local01, objptr
1ab28     84 E4 05 F1 | 	add	objptr, #132
1ab2c     F2 1E 62 FC | 	wrlong	local01, objptr
1ab30                 | ' s_buflen:=buflen
1ab30     AD E4 85 F1 | 	sub	objptr, #173
1ab34     F2 1E 02 FB | 	rdlong	local01, objptr
1ab38     B5 E4 05 F1 | 	add	objptr, #181
1ab3c     F2 1E 62 FC | 	wrlong	local01, objptr
1ab40                 | ' s_cpl:=cpl
1ab40     94 E4 85 F1 | 	sub	objptr, #148
1ab44     F2 1E 02 FB | 	rdlong	local01, objptr
1ab48     90 E4 05 F1 | 	add	objptr, #144
1ab4c     F2 1E 62 FC | 	wrlong	local01, objptr
1ab50                 | ' s_cpl1:=cpl
1ab50     90 E4 85 F1 | 	sub	objptr, #144
1ab54     F2 1E 02 FB | 	rdlong	local01, objptr
1ab58     98 E4 05 F1 | 	add	objptr, #152
1ab5c     F2 1E 62 FC | 	wrlong	local01, objptr
1ab60                 | ' st_lines:=t_lines
1ab60     0C E4 05 F1 | 	add	objptr, #12
1ab64     F2 1E 02 FB | 	rdlong	local01, objptr
1ab68     04 E4 05 F1 | 	add	objptr, #4
1ab6c     F2 1E 62 FC | 	wrlong	local01, objptr
1ab70                 | ' ppl:=ppl/xzoom  
1ab70     28 E4 85 F1 | 	sub	objptr, #40
1ab74     F2 64 02 FB | 	rdlong	muldiva_, objptr
1ab78     2C E4 05 F1 | 	add	objptr, #44
1ab7c     F2 66 02 FB | 	rdlong	muldivb_, objptr
1ab80     05 E5 85 F1 | 	sub	objptr, #261
1ab84     BA 00 A0 FD | 	call	#divide_
1ab88     D9 E4 05 F1 | 	add	objptr, #217
1ab8c     F2 66 62 FC | 	wrlong	muldivb_, objptr
1ab90                 | ' s_ppl:=ppl
1ab90     1C E4 05 F1 | 	add	objptr, #28
1ab94     F2 66 62 FC | 	wrlong	muldivb_, objptr
1ab98     F5 E4 85 F1 | 	sub	objptr, #245
1ab9c                 | ' waitms(20)							' wait 
1ab9c     14 12 06 F6 | 	mov	arg01, #20
1aba0     D4 27 B0 FD | 	call	#__system___waitms
1aba4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1aba4     04 E4 05 F1 | 	add	objptr, #4
1aba8     F2 12 02 FB | 	rdlong	arg01, objptr
1abac     04 E4 85 F1 | 	sub	objptr, #4
1abb0     F2 16 02 FB | 	rdlong	arg03, objptr
1abb4     09 17 82 F1 | 	sub	arg03, arg01
1abb8     20 14 06 F6 | 	mov	arg02, #32
1abbc     00 18 06 F6 | 	mov	arg04, #0
1abc0     01 1A 06 F6 | 	mov	arg05, #1
1abc4     0B 00 00 FF 
1abc8     CC E4 05 F1 | 	add	objptr, ##5836
1abcc     E8 19 B0 FD | 	call	#_psram_spin2_fill
1abd0     0B 00 00 FF 
1abd4     CC E4 85 F1 | 	sub	objptr, ##5836
1abd8     A7 F0 03 F6 | 	mov	ptra, fp
1abdc     B2 00 A0 FD | 	call	#popregs_
1abe0                 | _hg010b_spin2_setmode_ret
1abe0     2D 00 64 FD | 	ret
1abe4                 | 
1abe4                 | ' 
1abe4                 | ' '****************************************************************************************************************
1abe4                 | ' '                                                                                                             	*
1abe4                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1abe4                 | ' '                                                                                                             	*
1abe4                 | ' '****************************************************************************************************************
1abe4                 | ' 
1abe4                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1abe4                 | _hg010b_spin2_makedl
1abe4                 | ' 
1abe4                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1abe4                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1abe4                 | ' repeat i from 0 to 11                                                           ' clear DL
1abe4     00 00 06 F6 | 	mov	_var01, #0
1abe8     ED E5 05 F1 | 	add	objptr, #493
1abec     97 0E 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
1abf0                 | LR__2050
1abf0                 | '   displaylist[i]:=0 
1abf0     00 03 02 F6 | 	mov	_var02, _var01
1abf4     02 02 66 F0 | 	shl	_var02, #2
1abf8     F2 02 02 F1 | 	add	_var02, objptr
1abfc     01 01 68 FC | 	wrlong	#0, _var02
1ac00     01 00 06 F1 | 	add	_var01, #1
1ac04     0C 00 56 F2 | 	cmps	_var01, #12 wc
1ac08     E4 FF 9F CD |  if_b	jmp	#LR__2050
1ac0c                 | LR__2051
1ac0c                 | '                         ' 
1ac0c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1ac0c     8C E5 85 F1 | 	sub	objptr, #396
1ac10     F2 02 02 FB | 	rdlong	_var02, objptr
1ac14     14 02 66 F0 | 	shl	_var02, #20
1ac18     01 02 06 F1 | 	add	_var02, #1
1ac1c     04 E4 85 F1 | 	sub	objptr, #4
1ac20     F2 00 02 FB | 	rdlong	_var01, objptr
1ac24     02 00 66 F0 | 	shl	_var01, #2
1ac28     04 00 66 F0 | 	shl	_var01, #4
1ac2c     00 03 02 F1 | 	add	_var02, _var01
1ac30     90 E5 05 F1 | 	add	objptr, #400
1ac34     F2 02 62 FC | 	wrlong	_var02, objptr
1ac38     ED E5 85 F1 | 	sub	objptr, #493
1ac3c                 | ' displaylist[1]:=buf_ptr<<4+%10  
1ac3c     F2 02 02 FB | 	rdlong	_var02, objptr
1ac40     04 02 66 F0 | 	shl	_var02, #4
1ac44     02 02 06 F1 | 	add	_var02, #2
1ac48     F1 E5 05 F1 | 	add	objptr, #497
1ac4c     F2 02 62 FC | 	wrlong	_var02, objptr
1ac50                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1ac50     04 E4 85 F1 | 	sub	objptr, #4
1ac54     F2 02 02 F6 | 	mov	_var02, objptr
1ac58     CD E5 85 F1 | 	sub	objptr, #461
1ac5c     F2 02 62 FC | 	wrlong	_var02, objptr
1ac60     20 E4 85 F1 | 	sub	objptr, #32
1ac64                 | _hg010b_spin2_makedl_ret
1ac64     2D 00 64 FD | 	ret
1ac68                 | 
1ac68                 | ' 
1ac68                 | ' 
1ac68                 | ' '****************************************************************************************************************
1ac68                 | ' '                                                                        					*
1ac68                 | ' '  Graphic primitives                                                    					*
1ac68                 | ' '                                                                        					*
1ac68                 | ' '****************************************************************************************************************
1ac68                 | ' 
1ac68                 | ' pub setspriteptr(num,ptr)
1ac68                 | _hg010b_spin2_setspriteptr
1ac68                 | ' long[@spr1ptr+12*num]:=ptr
1ac68     11 E5 05 F1 | 	add	objptr, #273
1ac6c     F2 00 02 F6 | 	mov	_var01, objptr
1ac70     09 03 02 F6 | 	mov	_var02, arg01
1ac74     01 02 66 F0 | 	shl	_var02, #1
1ac78     09 03 02 F1 | 	add	_var02, arg01
1ac7c     02 02 66 F0 | 	shl	_var02, #2
1ac80     01 01 02 F1 | 	add	_var01, _var02
1ac84     00 15 62 FC | 	wrlong	arg02, _var01
1ac88     11 E5 85 F1 | 	sub	objptr, #273
1ac8c                 | _hg010b_spin2_setspriteptr_ret
1ac8c     2D 00 64 FD | 	ret
1ac90                 | 
1ac90                 | ' 
1ac90                 | ' pub setspritepos(num,x,y)
1ac90                 | _hg010b_spin2_setspritepos
1ac90                 | ' if y>601
1ac90     01 00 00 FF 
1ac94     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1ac98                 | '   y:=601
1ac98     01 00 00 3F 
1ac9c     59 16 06 36 |  if_ae	mov	arg03, ##601
1aca0                 | ' if x>1024
1aca0     02 00 00 FF 
1aca4     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1aca8                 | '   x:=1024
1aca8     0A 14 C6 39 |  if_ae	decod	arg02, #10
1acac                 | ' word[@spr1ptr+12*num+4]:=x
1acac     11 E5 05 F1 | 	add	objptr, #273
1acb0     F2 00 02 F6 | 	mov	_var01, objptr
1acb4     09 03 02 F6 | 	mov	_var02, arg01
1acb8     01 02 66 F0 | 	shl	_var02, #1
1acbc     09 03 02 F1 | 	add	_var02, arg01
1acc0     02 02 66 F0 | 	shl	_var02, #2
1acc4     01 01 02 F1 | 	add	_var01, _var02
1acc8     04 00 06 F1 | 	add	_var01, #4
1accc     00 15 52 FC | 	wrword	arg02, _var01
1acd0                 | ' word[@spr1ptr+12*num+6]:=y
1acd0     F2 00 02 F6 | 	mov	_var01, objptr
1acd4     09 03 02 F6 | 	mov	_var02, arg01
1acd8     01 02 66 F0 | 	shl	_var02, #1
1acdc     09 03 02 F1 | 	add	_var02, arg01
1ace0     02 02 66 F0 | 	shl	_var02, #2
1ace4     01 01 02 F1 | 	add	_var01, _var02
1ace8     06 00 06 F1 | 	add	_var01, #6
1acec     00 17 52 FC | 	wrword	arg03, _var01
1acf0     11 E5 85 F1 | 	sub	objptr, #273
1acf4                 | _hg010b_spin2_setspritepos_ret
1acf4     2D 00 64 FD | 	ret
1acf8                 | 
1acf8                 | ' 
1acf8                 | ' pub setspritesize(num,w,h)
1acf8                 | _hg010b_spin2_setspritesize
1acf8                 | ' word[@spr1ptr+12*num+8]:=w
1acf8     11 E5 05 F1 | 	add	objptr, #273
1acfc     F2 00 02 F6 | 	mov	_var01, objptr
1ad00     09 03 02 F6 | 	mov	_var02, arg01
1ad04     01 02 66 F0 | 	shl	_var02, #1
1ad08     09 03 02 F1 | 	add	_var02, arg01
1ad0c     02 02 66 F0 | 	shl	_var02, #2
1ad10     01 01 02 F1 | 	add	_var01, _var02
1ad14     08 00 06 F1 | 	add	_var01, #8
1ad18     00 15 52 FC | 	wrword	arg02, _var01
1ad1c                 | ' word[@spr1ptr+12*num+10]:=h
1ad1c     F2 00 02 F6 | 	mov	_var01, objptr
1ad20     09 03 02 F6 | 	mov	_var02, arg01
1ad24     01 02 66 F0 | 	shl	_var02, #1
1ad28     09 03 02 F1 | 	add	_var02, arg01
1ad2c     02 02 66 F0 | 	shl	_var02, #2
1ad30     01 01 02 F1 | 	add	_var01, _var02
1ad34     0A 00 06 F1 | 	add	_var01, #10
1ad38     00 17 52 FC | 	wrword	arg03, _var01
1ad3c     11 E5 85 F1 | 	sub	objptr, #273
1ad40                 | _hg010b_spin2_setspritesize_ret
1ad40     2D 00 64 FD | 	ret
1ad44                 | 
1ad44                 | ' 
1ad44                 | ' 
1ad44                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1ad44                 | ' 
1ad44                 | ' 
1ad44                 | ' pub putpixel(x,y,c)
1ad44                 | _hg010b_spin2_putpixel
1ad44     04 4A 05 F6 | 	mov	COUNT_, #4
1ad48     A8 00 A0 FD | 	call	#pushregs_
1ad4c     09 1F 02 F6 | 	mov	local01, arg01
1ad50                 | ' 
1ad50                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1ad50     00 20 06 F6 | 	mov	local02, #0
1ad54     00 1E 56 F2 | 	cmps	local01, #0 wc
1ad58     01 20 66 36 |  if_ae	neg	local02, #1
1ad5c     E9 E4 05 F1 | 	add	objptr, #233
1ad60     F2 1A 02 FB | 	rdlong	arg05, objptr
1ad64     02 1A 66 F0 | 	shl	arg05, #2
1ad68     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1ad6c     11 23 A2 F1 | 	subx	local03, local03
1ad70     11 21 02 F5 | 	and	local02, local03
1ad74     00 22 06 F6 | 	mov	local03, #0
1ad78     00 14 56 F2 | 	cmps	arg02, #0 wc
1ad7c     01 22 66 36 |  if_ae	neg	local03, #1
1ad80     11 21 02 F5 | 	and	local02, local03
1ad84     04 E4 85 F1 | 	sub	objptr, #4
1ad88     F2 22 02 FB | 	rdlong	local03, objptr
1ad8c     E5 E4 85 F1 | 	sub	objptr, #229
1ad90     11 15 52 F2 | 	cmps	arg02, local03 wc
1ad94     12 25 A2 F1 | 	subx	local04, local04
1ad98     12 21 CA F7 | 	test	local02, local04 wz
1ad9c     48 00 90 AD |  if_e	jmp	#LR__2060
1ada0     DD E4 05 F1 | 	add	objptr, #221
1ada4     F2 12 02 FB | 	rdlong	arg01, objptr
1ada8     14 E4 05 F1 | 	add	objptr, #20
1adac     F2 24 02 FB | 	rdlong	local04, objptr
1adb0     02 24 66 F0 | 	shl	local04, #2
1adb4     0A 25 02 FD | 	qmul	local04, arg02
1adb8                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1adb8     0B 15 02 F6 | 	mov	arg02, arg03
1adbc     01 16 06 F6 | 	mov	arg03, #1
1adc0     00 18 06 F6 | 	mov	arg04, #0
1adc4     01 1A 06 F6 | 	mov	arg05, #1
1adc8     0A 00 00 FF 
1adcc     DB E5 05 F1 | 	add	objptr, ##5595
1add0     18 24 62 FD | 	getqx	local04
1add4     0F 25 02 F1 | 	add	local04, local01
1add8     12 13 02 F1 | 	add	arg01, local04
1addc     D8 17 B0 FD | 	call	#_psram_spin2_fill
1ade0     0B 00 00 FF 
1ade4     CC E4 85 F1 | 	sub	objptr, ##5836
1ade8                 | LR__2060
1ade8     A7 F0 03 F6 | 	mov	ptra, fp
1adec     B2 00 A0 FD | 	call	#popregs_
1adf0                 | _hg010b_spin2_putpixel_ret
1adf0     2D 00 64 FD | 	ret
1adf4                 | 
1adf4                 | ' 
1adf4                 | ' pub putpixel2(x,y,c)
1adf4                 | _hg010b_spin2_putpixel2
1adf4     02 4A 05 F6 | 	mov	COUNT_, #2
1adf8     A8 00 A0 FD | 	call	#pushregs_
1adfc     DD E4 05 F1 | 	add	objptr, #221
1ae00     F2 1E 02 FB | 	rdlong	local01, objptr
1ae04     14 E4 05 F1 | 	add	objptr, #20
1ae08     F2 1A 02 FB | 	rdlong	arg05, objptr
1ae0c     02 1A 66 F0 | 	shl	arg05, #2
1ae10     0A 1B 02 FD | 	qmul	arg05, arg02
1ae14                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1ae14     0B 15 02 F6 | 	mov	arg02, arg03
1ae18     01 16 06 F6 | 	mov	arg03, #1
1ae1c     00 18 06 F6 | 	mov	arg04, #0
1ae20     01 1A 06 F6 | 	mov	arg05, #1
1ae24     0A 00 00 FF 
1ae28     DB E5 05 F1 | 	add	objptr, ##5595
1ae2c     18 20 62 FD | 	getqx	local02
1ae30     09 21 02 F1 | 	add	local02, arg01
1ae34     10 1F 02 F1 | 	add	local01, local02
1ae38     0F 13 02 F6 | 	mov	arg01, local01
1ae3c     78 17 B0 FD | 	call	#_psram_spin2_fill
1ae40     0B 00 00 FF 
1ae44     CC E4 85 F1 | 	sub	objptr, ##5836
1ae48     A7 F0 03 F6 | 	mov	ptra, fp
1ae4c     B2 00 A0 FD | 	call	#popregs_
1ae50                 | _hg010b_spin2_putpixel2_ret
1ae50     2D 00 64 FD | 	ret
1ae54                 | 
1ae54                 | ' 
1ae54                 | ' pub getpixel2(x,y): c 
1ae54                 | _hg010b_spin2_getpixel2
1ae54     02 4A 05 F6 | 	mov	COUNT_, #2
1ae58     A8 00 A0 FD | 	call	#pushregs_
1ae5c     0C F0 07 F1 | 	add	ptra, #12
1ae60     04 4E 05 F1 | 	add	fp, #4
1ae64     A7 12 62 FC | 	wrlong	arg01, fp
1ae68     04 4E 05 F1 | 	add	fp, #4
1ae6c     A7 14 62 FC | 	wrlong	arg02, fp
1ae70     08 4E 85 F1 | 	sub	fp, #8
1ae74     A7 00 68 FC | 	wrlong	#0, fp
1ae78     A7 12 02 F6 | 	mov	arg01, fp
1ae7c     DD E4 05 F1 | 	add	objptr, #221
1ae80     F2 14 02 FB | 	rdlong	arg02, objptr
1ae84     14 E4 05 F1 | 	add	objptr, #20
1ae88     F2 16 02 FB | 	rdlong	arg03, objptr
1ae8c     02 16 66 F0 | 	shl	arg03, #2
1ae90     08 4E 05 F1 | 	add	fp, #8
1ae94     A7 FA 01 FB | 	rdlong	result1, fp
1ae98     FD 16 02 FD | 	qmul	arg03, result1
1ae9c                 | ' 
1ae9c                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1ae9c     04 4E 85 F1 | 	sub	fp, #4
1aea0     A7 1E 02 FB | 	rdlong	local01, fp
1aea4     04 4E 85 F1 | 	sub	fp, #4
1aea8     01 16 06 F6 | 	mov	arg03, #1
1aeac     0A 00 00 FF 
1aeb0     DB E5 05 F1 | 	add	objptr, ##5595
1aeb4     18 20 62 FD | 	getqx	local02
1aeb8     0F 21 02 F1 | 	add	local02, local01
1aebc     10 15 02 F1 | 	add	arg02, local02
1aec0     BC 15 B0 FD | 	call	#_psram_spin2_read1
1aec4     0B 00 00 FF 
1aec8     CC E4 85 F1 | 	sub	objptr, ##5836
1aecc                 | ' return c
1aecc     A7 FA 01 FB | 	rdlong	result1, fp
1aed0     A7 F0 03 F6 | 	mov	ptra, fp
1aed4     B2 00 A0 FD | 	call	#popregs_
1aed8                 | _hg010b_spin2_getpixel2_ret
1aed8     2D 00 64 FD | 	ret
1aedc                 | 
1aedc                 | '   
1aedc                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1aedc                 | ' 
1aedc                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1aedc                 | _hg010b_spin2_fastline
1aedc     02 4A 05 F6 | 	mov	COUNT_, #2
1aee0     A8 00 A0 FD | 	call	#pushregs_
1aee4     09 1F 02 F6 | 	mov	local01, arg01
1aee8     0A 21 02 F6 | 	mov	local02, arg02
1aeec                 | ' 
1aeec                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1aeec     00 16 56 F2 | 	cmps	arg03, #0 wc
1aef0     F4 00 90 CD |  if_b	jmp	#LR__2070
1aef4     01 00 00 FF 
1aef8     2A E4 05 F1 | 	add	objptr, ##554
1aefc     F2 1A 02 FB | 	rdlong	arg05, objptr
1af00     01 00 00 FF 
1af04     2A E4 85 F1 | 	sub	objptr, ##554
1af08     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1af0c     D8 00 90 3D |  if_ae	jmp	#LR__2070
1af10     00 1E 56 F2 | 	cmps	local01, #0 wc
1af14     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1af18     CC 00 90 CD |  if_b	jmp	#LR__2070
1af1c     01 00 00 FF 
1af20     26 E4 05 F1 | 	add	objptr, ##550
1af24     F2 1A 02 FB | 	rdlong	arg05, objptr
1af28     01 00 00 FF 
1af2c     26 E4 85 F1 | 	sub	objptr, ##550
1af30     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1af34     01 00 00 1F 
1af38     26 E4 05 11 |  if_a	add	objptr, ##550
1af3c     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1af40     01 00 00 1F 
1af44     26 E4 85 11 |  if_a	sub	objptr, ##550
1af48     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1af4c                 | '   return
1af4c     98 00 90 1D |  if_a	jmp	#LR__2070
1af50     10 1F 5A F2 | 	cmps	local01, local02 wcz
1af54     0F 1B 02 16 |  if_a	mov	arg05, local01
1af58     10 1F 02 16 |  if_a	mov	local01, local02
1af5c     0D 21 02 16 |  if_a	mov	local02, arg05
1af60     00 1E 56 F2 | 	cmps	local01, #0 wc
1af64     00 1E 06 C6 |  if_b	mov	local01, #0
1af68     01 00 00 FF 
1af6c     26 E4 05 F1 | 	add	objptr, ##550
1af70     F2 1A 02 FB | 	rdlong	arg05, objptr
1af74     01 00 00 FF 
1af78     26 E4 85 F1 | 	sub	objptr, ##550
1af7c     0D 21 52 F2 | 	cmps	local02, arg05 wc
1af80     01 00 00 3F 
1af84     26 E4 05 31 |  if_ae	add	objptr, ##550
1af88     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1af8c     01 00 00 3F 
1af90     26 E4 85 31 |  if_ae	sub	objptr, ##550
1af94     DD E4 05 F1 | 	add	objptr, #221
1af98     F2 12 02 FB | 	rdlong	arg01, objptr
1af9c     14 E4 05 F1 | 	add	objptr, #20
1afa0     F2 1A 02 FB | 	rdlong	arg05, objptr
1afa4     02 1A 66 F0 | 	shl	arg05, #2
1afa8     0B 1B 02 FD | 	qmul	arg05, arg03
1afac                 | ' if x1>x2
1afac                 | '   x1,x2:=x2,x1
1afac                 | ' if x1<0 
1afac                 | '   x1:=0
1afac                 | ' if x2>=xres
1afac                 | '   x2:=xres-1  
1afac     01 20 86 31 |  if_ae	sub	local02, #1
1afb0                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1afb0     01 16 06 F6 | 	mov	arg03, #1
1afb4     10 17 02 F1 | 	add	arg03, local02
1afb8     0F 17 82 F1 | 	sub	arg03, local01
1afbc     0C 15 02 F6 | 	mov	arg02, arg04
1afc0     00 18 06 F6 | 	mov	arg04, #0
1afc4     01 1A 06 F6 | 	mov	arg05, #1
1afc8     0A 00 00 FF 
1afcc     DB E5 05 F1 | 	add	objptr, ##5595
1afd0     18 20 62 FD | 	getqx	local02
1afd4     0F 21 02 F1 | 	add	local02, local01
1afd8     10 13 02 F1 | 	add	arg01, local02
1afdc     D8 15 B0 FD | 	call	#_psram_spin2_fill
1afe0     0B 00 00 FF 
1afe4     CC E4 85 F1 | 	sub	objptr, ##5836
1afe8                 | LR__2070
1afe8     A7 F0 03 F6 | 	mov	ptra, fp
1afec     B2 00 A0 FD | 	call	#popregs_
1aff0                 | _hg010b_spin2_fastline_ret
1aff0     2D 00 64 FD | 	ret
1aff4                 | 
1aff4                 | ' 
1aff4                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1aff4                 | _hg010b_spin2_draw
1aff4     0E 4A 05 F6 | 	mov	COUNT_, #14
1aff8     A8 00 A0 FD | 	call	#pushregs_
1affc     09 1F 02 F6 | 	mov	local01, arg01
1b000     0A 21 02 F6 | 	mov	local02, arg02
1b004     0B 23 02 F6 | 	mov	local03, arg03
1b008     0C 25 02 F6 | 	mov	local04, arg04
1b00c     0D 27 02 F6 | 	mov	local05, arg05
1b010                 | ' 
1b010                 | ' if (y1==y2)
1b010     12 21 0A F2 | 	cmp	local02, local04 wz
1b014     18 00 90 5D |  if_ne	jmp	#LR__2080
1b018                 | '   fastline(x1,x2,y1,c)
1b018     0F 13 02 F6 | 	mov	arg01, local01
1b01c     11 15 02 F6 | 	mov	arg02, local03
1b020     10 17 02 F6 | 	mov	arg03, local02
1b024     13 19 02 F6 | 	mov	arg04, local05
1b028     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1b02c     F8 00 90 FD | 	jmp	#LR__2086
1b030                 | LR__2080
1b030                 | ' else  
1b030                 | '   x:=x1
1b030     0F 29 02 F6 | 	mov	local06, local01
1b034                 | '   y:=y1
1b034     10 2B 02 F6 | 	mov	local07, local02
1b038                 | ' 
1b038                 | '   if (x1<x2) 
1b038     11 1F 52 F2 | 	cmps	local01, local03 wc
1b03c                 | '     xi:=1
1b03c     01 2C 06 C6 |  if_b	mov	local08, #1
1b040                 | '     dx:=x2-x1
1b040     11 2F 02 C6 |  if_b	mov	local09, local03
1b044     0F 2F 82 C1 |  if_b	sub	local09, local01
1b048                 | '   else
1b048                 | '     xi:=-1
1b048     01 2C 66 36 |  if_ae	neg	local08, #1
1b04c                 | '     dx:=x1-x2
1b04c     11 1F 82 31 |  if_ae	sub	local01, local03
1b050     0F 2F 02 36 |  if_ae	mov	local09, local01
1b054                 | '   
1b054                 | '   if (y1<y2) 
1b054     12 21 52 F2 | 	cmps	local02, local04 wc
1b058                 | '     yi:=1
1b058     01 30 06 C6 |  if_b	mov	local10, #1
1b05c                 | '     dy:=y2-y1
1b05c     12 33 02 C6 |  if_b	mov	local11, local04
1b060     10 33 82 C1 |  if_b	sub	local11, local02
1b064                 | '   else
1b064                 | '     yi:=-1
1b064     01 30 66 36 |  if_ae	neg	local10, #1
1b068                 | '     dy:=y1-y2
1b068     12 21 82 31 |  if_ae	sub	local02, local04
1b06c     10 33 02 36 |  if_ae	mov	local11, local02
1b070                 | ' 
1b070                 | '   putpixel(x,y,c)
1b070     13 17 02 F6 | 	mov	arg03, local05
1b074     14 13 02 F6 | 	mov	arg01, local06
1b078     15 15 02 F6 | 	mov	arg02, local07
1b07c     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1b080                 | ' 
1b080                 | '   if (dx>dy)
1b080     19 2F 5A F2 | 	cmps	local09, local11 wcz
1b084     50 00 90 ED |  if_be	jmp	#LR__2082
1b088                 | '     ai:=(dy-dx)*2
1b088     19 35 02 F6 | 	mov	local12, local11
1b08c     17 35 82 F1 | 	sub	local12, local09
1b090     01 34 66 F0 | 	shl	local12, #1
1b094                 | '     bi:=dy*2
1b094     01 32 66 F0 | 	shl	local11, #1
1b098     19 37 02 F6 | 	mov	local13, local11
1b09c                 | '     d:= bi-dx
1b09c     1B 39 02 F6 | 	mov	local14, local13
1b0a0     17 39 82 F1 | 	sub	local14, local09
1b0a4                 | '     repeat while (x<>x2) 
1b0a4                 | LR__2081
1b0a4     11 29 0A F2 | 	cmp	local06, local03 wz
1b0a8     7C 00 90 AD |  if_e	jmp	#LR__2085
1b0ac                 | '       if (d>=0) 
1b0ac     00 38 56 F2 | 	cmps	local14, #0 wc
1b0b0                 | '         x+=xi
1b0b0     16 29 02 31 |  if_ae	add	local06, local08
1b0b4                 | '         y+=yi
1b0b4     18 2B 02 31 |  if_ae	add	local07, local10
1b0b8                 | '         d+=ai
1b0b8     1A 39 02 31 |  if_ae	add	local14, local12
1b0bc                 | '       else
1b0bc                 | '         d+=bi
1b0bc     1B 39 02 C1 |  if_b	add	local14, local13
1b0c0                 | '         x+=xi
1b0c0     16 29 02 C1 |  if_b	add	local06, local08
1b0c4                 | '       putpixel(x,y,c)
1b0c4     14 13 02 F6 | 	mov	arg01, local06
1b0c8     15 15 02 F6 | 	mov	arg02, local07
1b0cc     13 17 02 F6 | 	mov	arg03, local05
1b0d0     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1b0d4     CC FF 9F FD | 	jmp	#LR__2081
1b0d8                 | LR__2082
1b0d8                 | '   else
1b0d8                 | '     ai:=(dx-dy)*2
1b0d8     17 35 02 F6 | 	mov	local12, local09
1b0dc     19 35 82 F1 | 	sub	local12, local11
1b0e0     01 34 66 F0 | 	shl	local12, #1
1b0e4                 | '     bi:=dx*2
1b0e4     01 2E 66 F0 | 	shl	local09, #1
1b0e8     17 37 02 F6 | 	mov	local13, local09
1b0ec                 | '     d:=bi-dy
1b0ec     1B 39 02 F6 | 	mov	local14, local13
1b0f0     19 39 82 F1 | 	sub	local14, local11
1b0f4                 | '     repeat while (y<>y2)
1b0f4                 | LR__2083
1b0f4     12 2B 0A F2 | 	cmp	local07, local04 wz
1b0f8     2C 00 90 AD |  if_e	jmp	#LR__2084
1b0fc                 | '       if (d>=0)
1b0fc     00 38 56 F2 | 	cmps	local14, #0 wc
1b100                 | '         x+=xi
1b100     16 29 02 31 |  if_ae	add	local06, local08
1b104                 | '         y+=yi
1b104     18 2B 02 31 |  if_ae	add	local07, local10
1b108                 | '         d+=ai
1b108     1A 39 02 31 |  if_ae	add	local14, local12
1b10c                 | '       else
1b10c                 | '         d+=bi
1b10c     1B 39 02 C1 |  if_b	add	local14, local13
1b110                 | '         y+=yi
1b110     18 2B 02 C1 |  if_b	add	local07, local10
1b114                 | '       putpixel(x, y,c)
1b114     14 13 02 F6 | 	mov	arg01, local06
1b118     15 15 02 F6 | 	mov	arg02, local07
1b11c     13 17 02 F6 | 	mov	arg03, local05
1b120     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1b124     CC FF 9F FD | 	jmp	#LR__2083
1b128                 | LR__2084
1b128                 | LR__2085
1b128                 | LR__2086
1b128     A7 F0 03 F6 | 	mov	ptra, fp
1b12c     B2 00 A0 FD | 	call	#popregs_
1b130                 | _hg010b_spin2_draw_ret
1b130     2D 00 64 FD | 	ret
1b134                 | 
1b134                 | '  
1b134                 | ' pub fillpush(val) 
1b134                 | _hg010b_spin2_fillpush
1b134                 | ' fillstack[fillptr]:=val
1b134     0B 00 00 FF 
1b138     BA E4 05 F1 | 	add	objptr, ##5818
1b13c     F2 00 02 FB | 	rdlong	_var01, objptr
1b140     02 00 66 F0 | 	shl	_var01, #2
1b144     0A 00 00 FF 
1b148     00 E4 85 F1 | 	sub	objptr, ##5120
1b14c     F2 00 02 F1 | 	add	_var01, objptr
1b150     00 13 62 FC | 	wrlong	arg01, _var01
1b154                 | ' fillptr+=1   
1b154     0A 00 00 FF 
1b158     00 E4 05 F1 | 	add	objptr, ##5120
1b15c     F2 00 02 FB | 	rdlong	_var01, objptr
1b160     01 00 06 F1 | 	add	_var01, #1
1b164     F2 00 62 FC | 	wrlong	_var01, objptr
1b168     0B 00 00 FF 
1b16c     BA E4 85 F1 | 	sub	objptr, ##5818
1b170                 | _hg010b_spin2_fillpush_ret
1b170     2D 00 64 FD | 	ret
1b174                 | 
1b174                 | ' 
1b174                 | '     
1b174                 | ' pub fillpop() : val
1b174                 | _hg010b_spin2_fillpop
1b174                 | ' 
1b174                 | ' fillptr-=1
1b174     0B 00 00 FF 
1b178     BA E4 05 F1 | 	add	objptr, ##5818
1b17c     F2 FA 01 FB | 	rdlong	result1, objptr
1b180     01 FA 85 F1 | 	sub	result1, #1
1b184     F2 FA 61 FC | 	wrlong	result1, objptr
1b188                 | ' if fillptr<0
1b188     0B 00 00 FF 
1b18c     BA E4 85 F1 | 	sub	objptr, ##5818
1b190     00 FA 55 F2 | 	cmps	result1, #0 wc
1b194                 | '   fillptr:=0
1b194     0B 00 00 CF 
1b198     BA E4 05 C1 |  if_b	add	objptr, ##5818
1b19c     F2 00 68 CC |  if_b	wrlong	#0, objptr
1b1a0     0B 00 00 CF 
1b1a4     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1b1a8                 | '   val:=-12345
1b1a8     E7 FF 7F CF 
1b1ac     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1b1b0     28 00 90 CD |  if_b	jmp	#LR__2090
1b1b4                 | ' else 
1b1b4                 | '   val:=fillstack[fillptr]
1b1b4     0B 00 00 FF 
1b1b8     BA E4 05 F1 | 	add	objptr, ##5818
1b1bc     F2 00 02 FB | 	rdlong	_var01, objptr
1b1c0     02 00 66 F0 | 	shl	_var01, #2
1b1c4     0A 00 00 FF 
1b1c8     00 E4 85 F1 | 	sub	objptr, ##5120
1b1cc     F2 00 02 F1 | 	add	_var01, objptr
1b1d0     00 01 02 FB | 	rdlong	_var01, _var01
1b1d4     01 00 00 FF 
1b1d8     BA E4 85 F1 | 	sub	objptr, ##698
1b1dc                 | LR__2090
1b1dc                 | ' return val
1b1dc     00 FB 01 F6 | 	mov	result1, _var01
1b1e0                 | _hg010b_spin2_fillpop_ret
1b1e0     2D 00 64 FD | 	ret
1b1e4                 | 
1b1e4                 | ' 
1b1e4                 | '       
1b1e4                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1b1e4                 | _hg010b_spin2_fill
1b1e4     0B 4A 05 F6 | 	mov	COUNT_, #11
1b1e8     A8 00 A0 FD | 	call	#pushregs_
1b1ec                 | ' 
1b1ec                 | ' newcolor:=newcolor & 255
1b1ec     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1b1f0                 | ' oldcolor:=oldcolor & 255
1b1f0     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1b1f4                 | ' 
1b1f4                 | ' if (oldcolor == newcolor) 
1b1f4     0F 21 0A F2 | 	cmp	local02, local01 wz
1b1f8                 | '   return
1b1f8     70 02 90 AD |  if_e	jmp	#LR__2109
1b1fc                 | ' 
1b1fc                 | ' fillptr:=0
1b1fc     0B 00 00 FF 
1b200     BA E4 05 F1 | 	add	objptr, ##5818
1b204     F2 00 68 FC | 	wrlong	#0, objptr
1b208                 | ' fillmax:=0
1b208     04 E4 05 F1 | 	add	objptr, #4
1b20c     F2 00 68 FC | 	wrlong	#0, objptr
1b210     0B 00 00 FF 
1b214     BE E4 85 F1 | 	sub	objptr, ##5822
1b218                 | ' fillpush(x)
1b218     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1b21c                 | ' fillpush(y)
1b21c     0A 13 02 F6 | 	mov	arg01, arg02
1b220     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1b224                 | ' y:=fillpop()
1b224     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1b228     FD 22 02 F6 | 	mov	local03, result1
1b22c                 | ' x:=fillpop()
1b22c     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1b230     FD 24 02 F6 | 	mov	local04, result1
1b234                 | ' 'pinhigh(38)
1b234                 | ' repeat while (x>-1)       
1b234                 | LR__2100
1b234     00 24 56 F2 | 	cmps	local04, #0 wc
1b238     30 02 90 CD |  if_b	jmp	#LR__2108
1b23c                 | '  ' pintoggle(39)
1b23c                 | '   x1 := x
1b23c     12 27 02 F6 | 	mov	local05, local04
1b240                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1b240                 | LR__2101
1b240     00 28 06 F6 | 	mov	local06, #0
1b244     00 2A 06 F6 | 	mov	local07, #0
1b248     00 26 56 F2 | 	cmps	local05, #0 wc
1b24c     01 2A 66 36 |  if_ae	neg	local07, #1
1b250     00 2A 0E F2 | 	cmp	local07, #0 wz
1b254     00 28 26 56 |  if_ne	not	local06, #0
1b258     00 2C 06 F6 | 	mov	local08, #0
1b25c     00 2E 06 F6 | 	mov	local09, #0
1b260     11 15 02 F6 | 	mov	arg02, local03
1b264     13 13 02 F6 | 	mov	arg01, local05
1b268     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1b26c     10 FB 09 F2 | 	cmp	result1, local02 wz
1b270     00 2E 26 A6 |  if_e	not	local09, #0
1b274     00 2E 0E F2 | 	cmp	local09, #0 wz
1b278     00 2C 26 56 |  if_ne	not	local08, #0
1b27c     16 29 CA F7 | 	test	local06, local08 wz
1b280                 | '     x1--
1b280     01 26 86 51 |  if_ne	sub	local05, #1
1b284     B8 FF 9F 5D |  if_ne	jmp	#LR__2101
1b288                 | '   x1++
1b288     01 26 06 F1 | 	add	local05, #1
1b28c                 | '   spanabove := 0
1b28c     00 30 06 F6 | 	mov	local10, #0
1b290                 | '   spanbelow := 0
1b290     00 32 06 F6 | 	mov	local11, #0
1b294                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1b294                 | LR__2102
1b294     00 28 06 F6 | 	mov	local06, #0
1b298     02 00 00 FF 
1b29c     00 26 56 F2 | 	cmps	local05, ##1024 wc
1b2a0     00 28 26 C6 |  if_b	not	local06, #0
1b2a4     00 2C 06 F6 | 	mov	local08, #0
1b2a8     00 2E 06 F6 | 	mov	local09, #0
1b2ac     11 15 02 F6 | 	mov	arg02, local03
1b2b0     13 13 02 F6 | 	mov	arg01, local05
1b2b4     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1b2b8     10 FB 09 F2 | 	cmp	result1, local02 wz
1b2bc     00 2E 26 A6 |  if_e	not	local09, #0
1b2c0     00 2E 0E F2 | 	cmp	local09, #0 wz
1b2c4     00 2C 26 56 |  if_ne	not	local08, #0
1b2c8     16 29 CA F7 | 	test	local06, local08 wz
1b2cc     88 01 90 AD |  if_e	jmp	#LR__2107
1b2d0                 | '     putpixel2 (x1,y, newcolor & 255)
1b2d0     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1b2d4     13 13 02 F6 | 	mov	arg01, local05
1b2d8     11 15 02 F6 | 	mov	arg02, local03
1b2dc     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1b2e0                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1b2e0     00 28 06 F6 | 	mov	local06, #0
1b2e4     00 2A 06 F6 | 	mov	local07, #0
1b2e8     00 30 0E F2 | 	cmp	local10, #0 wz
1b2ec     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1b2f0     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1b2f4     00 2A 0E F2 | 	cmp	local07, #0 wz
1b2f8     00 28 26 56 |  if_ne	not	local06, #0
1b2fc     00 2C 06 F6 | 	mov	local08, #0
1b300     00 2E 06 F6 | 	mov	local09, #0
1b304     11 15 02 F6 | 	mov	arg02, local03
1b308     01 14 86 F1 | 	sub	arg02, #1
1b30c     13 13 02 F6 | 	mov	arg01, local05
1b310     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1b314     10 FB 09 F2 | 	cmp	result1, local02 wz
1b318     00 2E 26 A6 |  if_e	not	local09, #0
1b31c     00 2E 0E F2 | 	cmp	local09, #0 wz
1b320     00 2C 26 56 |  if_ne	not	local08, #0
1b324     16 29 CA F7 | 	test	local06, local08 wz
1b328     1C 00 90 AD |  if_e	jmp	#LR__2103
1b32c                 | '       fillpush(x1)
1b32c     13 13 02 F6 | 	mov	arg01, local05
1b330     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1b334                 | '       fillpush(y-1)
1b334     11 13 02 F6 | 	mov	arg01, local03
1b338     01 12 86 F1 | 	sub	arg01, #1
1b33c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1b340                 | '       spanabove := 1 
1b340     01 30 06 F6 | 	mov	local10, #1
1b344     4C 00 90 FD | 	jmp	#LR__2104
1b348                 | LR__2103
1b348                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1b348     00 28 06 F6 | 	mov	local06, #0
1b34c     00 2A 06 F6 | 	mov	local07, #0
1b350     00 30 0E F2 | 	cmp	local10, #0 wz
1b354     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1b358     01 2A 66 16 |  if_a	neg	local07, #1
1b35c     00 2A 0E F2 | 	cmp	local07, #0 wz
1b360     00 28 26 56 |  if_ne	not	local06, #0
1b364     00 2C 06 F6 | 	mov	local08, #0
1b368     00 2E 06 F6 | 	mov	local09, #0
1b36c     11 15 02 F6 | 	mov	arg02, local03
1b370     01 14 86 F1 | 	sub	arg02, #1
1b374     13 13 02 F6 | 	mov	arg01, local05
1b378     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1b37c     10 FB 09 F2 | 	cmp	result1, local02 wz
1b380     00 2E 26 56 |  if_ne	not	local09, #0
1b384     00 2E 0E F2 | 	cmp	local09, #0 wz
1b388     00 2C 26 56 |  if_ne	not	local08, #0
1b38c     16 29 CA F7 | 	test	local06, local08 wz
1b390                 | '       spanabove := 0 
1b390     00 30 06 56 |  if_ne	mov	local10, #0
1b394                 | LR__2104
1b394                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1b394     00 28 06 F6 | 	mov	local06, #0
1b398     00 2A 06 F6 | 	mov	local07, #0
1b39c     00 32 0E F2 | 	cmp	local11, #0 wz
1b3a0     01 00 00 AF 
1b3a4     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1b3a8     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1b3ac     00 2A 0E F2 | 	cmp	local07, #0 wz
1b3b0     00 28 26 56 |  if_ne	not	local06, #0
1b3b4     00 2C 06 F6 | 	mov	local08, #0
1b3b8     00 2E 06 F6 | 	mov	local09, #0
1b3bc     11 15 02 F6 | 	mov	arg02, local03
1b3c0     01 14 06 F1 | 	add	arg02, #1
1b3c4     13 13 02 F6 | 	mov	arg01, local05
1b3c8     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1b3cc     10 FB 09 F2 | 	cmp	result1, local02 wz
1b3d0     00 2E 26 A6 |  if_e	not	local09, #0
1b3d4     00 2E 0E F2 | 	cmp	local09, #0 wz
1b3d8     00 2C 26 56 |  if_ne	not	local08, #0
1b3dc     16 29 CA F7 | 	test	local06, local08 wz
1b3e0     1C 00 90 AD |  if_e	jmp	#LR__2105
1b3e4                 | '       fillpush(x1)
1b3e4     13 13 02 F6 | 	mov	arg01, local05
1b3e8     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1b3ec                 | '       fillpush(y + 1)
1b3ec     11 13 02 F6 | 	mov	arg01, local03
1b3f0     01 12 06 F1 | 	add	arg01, #1
1b3f4     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1b3f8                 | '       spanBelow := 1
1b3f8     01 32 06 F6 | 	mov	local11, #1
1b3fc     50 00 90 FD | 	jmp	#LR__2106
1b400                 | LR__2105
1b400                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1b400     00 28 06 F6 | 	mov	local06, #0
1b404     00 2A 06 F6 | 	mov	local07, #0
1b408     00 32 0E F2 | 	cmp	local11, #0 wz
1b40c     01 00 00 5F 
1b410     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1b414     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1b418     00 2A 0E F2 | 	cmp	local07, #0 wz
1b41c     00 28 26 56 |  if_ne	not	local06, #0
1b420     00 2C 06 F6 | 	mov	local08, #0
1b424     00 2E 06 F6 | 	mov	local09, #0
1b428     11 15 02 F6 | 	mov	arg02, local03
1b42c     01 14 06 F1 | 	add	arg02, #1
1b430     13 13 02 F6 | 	mov	arg01, local05
1b434     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1b438     10 FB 09 F2 | 	cmp	result1, local02 wz
1b43c     00 2E 26 56 |  if_ne	not	local09, #0
1b440     00 2E 0E F2 | 	cmp	local09, #0 wz
1b444     00 2C 26 56 |  if_ne	not	local08, #0
1b448     16 29 CA F7 | 	test	local06, local08 wz
1b44c                 | '       spanbelow := 0
1b44c     00 32 06 56 |  if_ne	mov	local11, #0
1b450                 | LR__2106
1b450                 | '     x1++
1b450     01 26 06 F1 | 	add	local05, #1
1b454     3C FE 9F FD | 	jmp	#LR__2102
1b458                 | LR__2107
1b458                 | '   y:=fillpop()
1b458     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1b45c     FD 22 02 F6 | 	mov	local03, result1
1b460                 | '   x:=fillpop()
1b460     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1b464     FD 24 02 F6 | 	mov	local04, result1
1b468     C8 FD 9F FD | 	jmp	#LR__2100
1b46c                 | LR__2108
1b46c                 | LR__2109
1b46c     A7 F0 03 F6 | 	mov	ptra, fp
1b470     B2 00 A0 FD | 	call	#popregs_
1b474                 | _hg010b_spin2_fill_ret
1b474     2D 00 64 FD | 	ret
1b478                 | 
1b478                 | ' 'pinlow(38)    
1b478                 | ' 
1b478                 | ' '-- A filled circle -----------------------------------------------------
1b478                 | ' 
1b478                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1b478                 | _hg010b_spin2_fcircle
1b478     08 4A 05 F6 | 	mov	COUNT_, #8
1b47c     A8 00 A0 FD | 	call	#pushregs_
1b480     0B 1F 02 F6 | 	mov	local01, arg03
1b484     FF FF 7F FF 
1b488     FE 1F 06 FD | 	qmul	local01, ##-2
1b48c     09 21 02 F6 | 	mov	local02, arg01
1b490     0A 23 02 F6 | 	mov	local03, arg02
1b494     0C 25 02 F6 | 	mov	local04, arg04
1b498                 | ' 
1b498                 | ' d:=5-4*r
1b498     0F 19 02 F6 | 	mov	arg04, local01
1b49c     02 18 66 F0 | 	shl	arg04, #2
1b4a0     05 26 06 F6 | 	mov	local05, #5
1b4a4     0C 27 82 F1 | 	sub	local05, arg04
1b4a8                 | ' x:=0
1b4a8     00 28 06 F6 | 	mov	local06, #0
1b4ac                 | ' y:=r
1b4ac                 | ' da:=(-2*r+5)*4
1b4ac                 | ' db:=3*4
1b4ac     0C 2A 06 F6 | 	mov	local07, #12
1b4b0                 | ' repeat while (x<=y) 
1b4b0     18 2C 62 FD | 	getqx	local08
1b4b4     05 2C 06 F1 | 	add	local08, #5
1b4b8     02 2C 66 F0 | 	shl	local08, #2
1b4bc                 | LR__2110
1b4bc     0F 29 5A F2 | 	cmps	local06, local01 wcz
1b4c0     B4 00 90 1D |  if_a	jmp	#LR__2112
1b4c4                 | '   fastline(x0-x,x0+x,y0-y,c)
1b4c4     10 13 02 F6 | 	mov	arg01, local02
1b4c8     14 13 82 F1 | 	sub	arg01, local06
1b4cc     10 15 02 F6 | 	mov	arg02, local02
1b4d0     14 15 02 F1 | 	add	arg02, local06
1b4d4     11 17 02 F6 | 	mov	arg03, local03
1b4d8     0F 17 82 F1 | 	sub	arg03, local01
1b4dc     12 19 02 F6 | 	mov	arg04, local04
1b4e0     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1b4e4                 | '   fastline(x0-x,x0+x,y0+y,c)
1b4e4     10 13 02 F6 | 	mov	arg01, local02
1b4e8     14 13 82 F1 | 	sub	arg01, local06
1b4ec     10 15 02 F6 | 	mov	arg02, local02
1b4f0     14 15 02 F1 | 	add	arg02, local06
1b4f4     11 17 02 F6 | 	mov	arg03, local03
1b4f8     0F 17 02 F1 | 	add	arg03, local01
1b4fc     12 19 02 F6 | 	mov	arg04, local04
1b500     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1b504                 | '   fastline(x0-y,x0+y,y0-x,c)
1b504     10 13 02 F6 | 	mov	arg01, local02
1b508     0F 13 82 F1 | 	sub	arg01, local01
1b50c     10 15 02 F6 | 	mov	arg02, local02
1b510     0F 15 02 F1 | 	add	arg02, local01
1b514     11 17 02 F6 | 	mov	arg03, local03
1b518     14 17 82 F1 | 	sub	arg03, local06
1b51c     12 19 02 F6 | 	mov	arg04, local04
1b520     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1b524                 | '   fastline(x0-y,x0+y,y0+x,c)
1b524     10 13 02 F6 | 	mov	arg01, local02
1b528     0F 13 82 F1 | 	sub	arg01, local01
1b52c     10 15 02 F6 | 	mov	arg02, local02
1b530     0F 15 02 F1 | 	add	arg02, local01
1b534     11 17 02 F6 | 	mov	arg03, local03
1b538     14 17 02 F1 | 	add	arg03, local06
1b53c     12 19 02 F6 | 	mov	arg04, local04
1b540     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1b544                 | '   if d>0 
1b544     01 26 56 F2 | 	cmps	local05, #1 wc
1b548     18 00 90 CD |  if_b	jmp	#LR__2111
1b54c                 | '     d+=da
1b54c     16 27 02 F1 | 	add	local05, local08
1b550                 | '     y-=1
1b550     01 1E 86 F1 | 	sub	local01, #1
1b554                 | '     x+=1
1b554     01 28 06 F1 | 	add	local06, #1
1b558                 | '     da+=4*4
1b558     10 2C 06 F1 | 	add	local08, #16
1b55c                 | '     db+=2*4
1b55c     08 2A 06 F1 | 	add	local07, #8
1b560     58 FF 9F FD | 	jmp	#LR__2110
1b564                 | LR__2111
1b564                 | '   else
1b564                 | '     d+=db
1b564     15 27 02 F1 | 	add	local05, local07
1b568                 | '     x+=1
1b568     01 28 06 F1 | 	add	local06, #1
1b56c                 | '     da+=2*4
1b56c     08 2C 06 F1 | 	add	local08, #8
1b570                 | '     db+=2*4
1b570     08 2A 06 F1 | 	add	local07, #8
1b574     44 FF 9F FD | 	jmp	#LR__2110
1b578                 | LR__2112
1b578     A7 F0 03 F6 | 	mov	ptra, fp
1b57c     B2 00 A0 FD | 	call	#popregs_
1b580                 | _hg010b_spin2_fcircle_ret
1b580     2D 00 64 FD | 	ret
1b584                 | 
1b584                 | '  
1b584                 | ' '-- A circle ------------------------------------------------------------ 
1b584                 | '  
1b584                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1b584                 | _hg010b_spin2_circle
1b584     08 4A 05 F6 | 	mov	COUNT_, #8
1b588     A8 00 A0 FD | 	call	#pushregs_
1b58c     0B 1F 02 F6 | 	mov	local01, arg03
1b590     FF FF 7F FF 
1b594     FE 1F 06 FD | 	qmul	local01, ##-2
1b598     09 21 02 F6 | 	mov	local02, arg01
1b59c     0A 23 02 F6 | 	mov	local03, arg02
1b5a0     0C 25 02 F6 | 	mov	local04, arg04
1b5a4                 | ' 
1b5a4                 | '  
1b5a4                 | ' d:=5-4*r
1b5a4     0F 19 02 F6 | 	mov	arg04, local01
1b5a8     02 18 66 F0 | 	shl	arg04, #2
1b5ac     05 26 06 F6 | 	mov	local05, #5
1b5b0     0C 27 82 F1 | 	sub	local05, arg04
1b5b4                 | ' x:=0
1b5b4     00 28 06 F6 | 	mov	local06, #0
1b5b8                 | ' y:=r
1b5b8                 | ' da:=(-2*r+5)*4
1b5b8                 | ' db:=3*4
1b5b8     0C 2A 06 F6 | 	mov	local07, #12
1b5bc                 | ' repeat while (x<=y) 
1b5bc     18 2C 62 FD | 	getqx	local08
1b5c0     05 2C 06 F1 | 	add	local08, #5
1b5c4     02 2C 66 F0 | 	shl	local08, #2
1b5c8                 | LR__2120
1b5c8     0F 29 5A F2 | 	cmps	local06, local01 wcz
1b5cc     F4 00 90 1D |  if_a	jmp	#LR__2122
1b5d0                 | '   putpixel(x0-x,y0-y,c)
1b5d0     10 13 02 F6 | 	mov	arg01, local02
1b5d4     14 13 82 F1 | 	sub	arg01, local06
1b5d8     11 15 02 F6 | 	mov	arg02, local03
1b5dc     0F 15 82 F1 | 	sub	arg02, local01
1b5e0     12 17 02 F6 | 	mov	arg03, local04
1b5e4     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1b5e8                 | '   putpixel(x0-x,y0+y,c)
1b5e8     10 13 02 F6 | 	mov	arg01, local02
1b5ec     14 13 82 F1 | 	sub	arg01, local06
1b5f0     11 15 02 F6 | 	mov	arg02, local03
1b5f4     0F 15 02 F1 | 	add	arg02, local01
1b5f8     12 17 02 F6 | 	mov	arg03, local04
1b5fc     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1b600                 | '   putpixel(x0+x,y0-y,c)
1b600     10 13 02 F6 | 	mov	arg01, local02
1b604     14 13 02 F1 | 	add	arg01, local06
1b608     11 15 02 F6 | 	mov	arg02, local03
1b60c     0F 15 82 F1 | 	sub	arg02, local01
1b610     12 17 02 F6 | 	mov	arg03, local04
1b614     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1b618                 | '   putpixel(x0+x,y0+y,c)
1b618     10 13 02 F6 | 	mov	arg01, local02
1b61c     14 13 02 F1 | 	add	arg01, local06
1b620     11 15 02 F6 | 	mov	arg02, local03
1b624     0F 15 02 F1 | 	add	arg02, local01
1b628     12 17 02 F6 | 	mov	arg03, local04
1b62c     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1b630                 | '   putpixel(x0-y,y0-x,c)
1b630     10 13 02 F6 | 	mov	arg01, local02
1b634     0F 13 82 F1 | 	sub	arg01, local01
1b638     11 15 02 F6 | 	mov	arg02, local03
1b63c     14 15 82 F1 | 	sub	arg02, local06
1b640     12 17 02 F6 | 	mov	arg03, local04
1b644     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1b648                 | '   putpixel(x0-y,y0+x,c)
1b648     10 13 02 F6 | 	mov	arg01, local02
1b64c     0F 13 82 F1 | 	sub	arg01, local01
1b650     11 15 02 F6 | 	mov	arg02, local03
1b654     14 15 02 F1 | 	add	arg02, local06
1b658     12 17 02 F6 | 	mov	arg03, local04
1b65c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1b660                 | '   putpixel(x0+y,y0-x,c)
1b660     10 13 02 F6 | 	mov	arg01, local02
1b664     0F 13 02 F1 | 	add	arg01, local01
1b668     11 15 02 F6 | 	mov	arg02, local03
1b66c     14 15 82 F1 | 	sub	arg02, local06
1b670     12 17 02 F6 | 	mov	arg03, local04
1b674     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1b678                 | '   putpixel(x0+y,y0+x,c)
1b678     10 13 02 F6 | 	mov	arg01, local02
1b67c     0F 13 02 F1 | 	add	arg01, local01
1b680     11 15 02 F6 | 	mov	arg02, local03
1b684     14 15 02 F1 | 	add	arg02, local06
1b688     12 17 02 F6 | 	mov	arg03, local04
1b68c     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1b690                 | '   if d>0 
1b690     01 26 56 F2 | 	cmps	local05, #1 wc
1b694     18 00 90 CD |  if_b	jmp	#LR__2121
1b698                 | '     d+=da
1b698     16 27 02 F1 | 	add	local05, local08
1b69c                 | '     y-=1
1b69c     01 1E 86 F1 | 	sub	local01, #1
1b6a0                 | '     x+=1
1b6a0     01 28 06 F1 | 	add	local06, #1
1b6a4                 | '     da+=4*4
1b6a4     10 2C 06 F1 | 	add	local08, #16
1b6a8                 | '     db+=2*4
1b6a8     08 2A 06 F1 | 	add	local07, #8
1b6ac     18 FF 9F FD | 	jmp	#LR__2120
1b6b0                 | LR__2121
1b6b0                 | '   else
1b6b0                 | '     d+=db
1b6b0     15 27 02 F1 | 	add	local05, local07
1b6b4                 | '     x+=1
1b6b4     01 28 06 F1 | 	add	local06, #1
1b6b8                 | '     da+=2*4
1b6b8     08 2C 06 F1 | 	add	local08, #8
1b6bc                 | '     db+=2*4
1b6bc     08 2A 06 F1 | 	add	local07, #8
1b6c0     04 FF 9F FD | 	jmp	#LR__2120
1b6c4                 | LR__2122
1b6c4     A7 F0 03 F6 | 	mov	ptra, fp
1b6c8     B2 00 A0 FD | 	call	#popregs_
1b6cc                 | _hg010b_spin2_circle_ret
1b6cc     2D 00 64 FD | 	ret
1b6d0                 | 
1b6d0                 | '     
1b6d0                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1b6d0                 | ' 
1b6d0                 | ' pub frame(x1,y1,x2,y2,c)
1b6d0                 | _hg010b_spin2_frame
1b6d0     05 4A 05 F6 | 	mov	COUNT_, #5
1b6d4     A8 00 A0 FD | 	call	#pushregs_
1b6d8     09 1F 02 F6 | 	mov	local01, arg01
1b6dc     0A 21 02 F6 | 	mov	local02, arg02
1b6e0     0B 23 02 F6 | 	mov	local03, arg03
1b6e4     0C 25 02 F6 | 	mov	local04, arg04
1b6e8     0D 27 02 F6 | 	mov	local05, arg05
1b6ec                 | ' 
1b6ec                 | ' fastline(x1,x2,y1,c)
1b6ec     0F 13 02 F6 | 	mov	arg01, local01
1b6f0     11 15 02 F6 | 	mov	arg02, local03
1b6f4     10 17 02 F6 | 	mov	arg03, local02
1b6f8     13 19 02 F6 | 	mov	arg04, local05
1b6fc     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1b700                 | ' fastline(x1,x2,y2,c)
1b700     0F 13 02 F6 | 	mov	arg01, local01
1b704     11 15 02 F6 | 	mov	arg02, local03
1b708     12 17 02 F6 | 	mov	arg03, local04
1b70c     13 19 02 F6 | 	mov	arg04, local05
1b710     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1b714                 | ' line(x1,y1,x1,y2,c)
1b714     0F 13 02 F6 | 	mov	arg01, local01
1b718     10 15 02 F6 | 	mov	arg02, local02
1b71c     0F 17 02 F6 | 	mov	arg03, local01
1b720     12 19 02 F6 | 	mov	arg04, local04
1b724     13 1B 02 F6 | 	mov	arg05, local05
1b728                 | ' draw(x1,y1,x2,y2,c)
1b728     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1b72c                 | ' line(x2,y1,x2,y2,c)
1b72c     11 13 02 F6 | 	mov	arg01, local03
1b730     10 15 02 F6 | 	mov	arg02, local02
1b734     11 17 02 F6 | 	mov	arg03, local03
1b738     12 19 02 F6 | 	mov	arg04, local04
1b73c     13 1B 02 F6 | 	mov	arg05, local05
1b740                 | ' draw(x1,y1,x2,y2,c)
1b740     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1b744     A7 F0 03 F6 | 	mov	ptra, fp
1b748     B2 00 A0 FD | 	call	#popregs_
1b74c                 | _hg010b_spin2_frame_ret
1b74c     2D 00 64 FD | 	ret
1b750                 | 
1b750                 | ' 
1b750                 | ' '-- A box (a filled rectangle) ----------------------------------------
1b750                 | ' 
1b750                 | ' pub box(x1,y1,x2,y2,c) |yy
1b750                 | _hg010b_spin2_box
1b750     06 4A 05 F6 | 	mov	COUNT_, #6
1b754     A8 00 A0 FD | 	call	#pushregs_
1b758     09 1F 02 F6 | 	mov	local01, arg01
1b75c     0A 21 02 F6 | 	mov	local02, arg02
1b760     0B 23 02 F6 | 	mov	local03, arg03
1b764     0C 25 02 F6 | 	mov	local04, arg04
1b768     0D 27 02 F6 | 	mov	local05, arg05
1b76c                 | ' 
1b76c                 | ' repeat yy from y1 to y2
1b76c     10 25 52 F2 | 	cmps	local04, local02 wc
1b770     01 28 86 F6 | 	negc	local06, #1
1b774     14 25 02 F1 | 	add	local04, local06
1b778                 | LR__2130
1b778                 | '   fastline(x1,x2,yy,c)
1b778     0F 13 02 F6 | 	mov	arg01, local01
1b77c     11 15 02 F6 | 	mov	arg02, local03
1b780     13 19 02 F6 | 	mov	arg04, local05
1b784     10 17 02 F6 | 	mov	arg03, local02
1b788     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1b78c     14 21 02 F1 | 	add	local02, local06
1b790     12 21 0A F2 | 	cmp	local02, local04 wz
1b794     E0 FF 9F 5D |  if_ne	jmp	#LR__2130
1b798     A7 F0 03 F6 | 	mov	ptra, fp
1b79c     B2 00 A0 FD | 	call	#popregs_
1b7a0                 | _hg010b_spin2_box_ret
1b7a0     2D 00 64 FD | 	ret
1b7a4                 | 
1b7a4                 | '       
1b7a4                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1b7a4                 | _hg010b_spin2_putcharxycgf
1b7a4                 | ' 
1b7a4                 | '  
1b7a4                 | ' repeat yy from 0 to 15
1b7a4     00 00 06 F6 | 	mov	_var01, #0
1b7a8     97 8C 48 FB | 	callpa	#(@LR__2142-@LR__2140)>>2,fcache_load_ptr_
1b7ac                 | LR__2140
1b7ac                 | ' 
1b7ac                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1b7ac     95 E4 05 F1 | 	add	objptr, #149
1b7b0     F2 02 02 FB | 	rdlong	_var02, objptr
1b7b4     0A 02 66 F0 | 	shl	_var02, #10
1b7b8     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1b7bc     01 05 02 F1 | 	add	_var03, _var02
1b7c0     0B 03 02 F6 | 	mov	_var02, arg03
1b7c4     04 02 66 F0 | 	shl	_var02, #4
1b7c8     01 05 02 F1 | 	add	_var03, _var02
1b7cc     00 05 02 F1 | 	add	_var03, _var01
1b7d0     02 05 C2 FA | 	rdbyte	_var03, _var03
1b7d4                 | '   asm
1b7d4     00 04 0E F4 | 	testb	_var03, #0 wz
1b7d8     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1b7dc     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1b7e0     01 04 0E F4 | 	testb	_var03, #1 wz
1b7e4     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1b7e8     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1b7ec     02 04 0E F4 | 	testb	_var03, #2 wz
1b7f0     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1b7f4     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1b7f8     03 04 0E F4 | 	testb	_var03, #3 wz
1b7fc     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1b800     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1b804     04 04 0E F4 | 	testb	_var03, #4 wz
1b808     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1b80c     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1b810     05 04 0E F4 | 	testb	_var03, #5 wz
1b814     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1b818     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1b81c     06 04 0E F4 | 	testb	_var03, #6 wz
1b820     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1b824     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1b828     07 04 0E F4 | 	testb	_var03, #7 wz
1b82c     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1b830     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1b834                 | '   
1b834                 | '   ccc[0]:=c1
1b834     99 E5 05 F1 | 	add	objptr, #409
1b838     F2 06 62 FC | 	wrlong	_var04, objptr
1b83c                 | '   ccc[1]:=c2 
1b83c     04 E4 05 F1 | 	add	objptr, #4
1b840     F2 08 62 FC | 	wrlong	_var05, objptr
1b844                 | '   long[mailbox0][2]:=8
1b844     49 E4 85 F1 | 	sub	objptr, #73
1b848     F2 04 02 FB | 	rdlong	_var03, objptr
1b84c     08 04 06 F1 | 	add	_var03, #8
1b850     02 11 68 FC | 	wrlong	#8, _var03
1b854                 | '   long[mailbox0][1]:=@ccc
1b854     45 E4 05 F1 | 	add	objptr, #69
1b858     F2 04 02 F6 | 	mov	_var03, objptr
1b85c     45 E4 85 F1 | 	sub	objptr, #69
1b860     F2 02 02 FB | 	rdlong	_var02, objptr
1b864     04 02 06 F1 | 	add	_var02, #4
1b868     01 05 62 FC | 	wrlong	_var03, _var02
1b86c                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1b86c     0C E5 85 F1 | 	sub	objptr, #268
1b870     F2 04 02 FB | 	rdlong	_var03, objptr
1b874     0A 03 02 F6 | 	mov	_var02, arg02
1b878     00 03 02 F1 | 	add	_var02, _var01
1b87c     0A 02 66 F0 | 	shl	_var02, #10
1b880     09 0B 02 F6 | 	mov	_var06, arg01
1b884     02 0A 66 F0 | 	shl	_var06, #2
1b888     05 03 02 F1 | 	add	_var02, _var06
1b88c     01 05 02 F1 | 	add	_var03, _var02
1b890     00 00 78 FF 
1b894     00 04 06 F1 | 	add	_var03, ##-268435456
1b898     0C E5 05 F1 | 	add	objptr, #268
1b89c     F2 0A 02 FB | 	rdlong	_var06, objptr
1b8a0     05 05 62 FC | 	wrlong	_var03, _var06
1b8a4                 | '   repeat
1b8a4                 | LR__2141
1b8a4     F2 04 02 FB | 	rdlong	_var03, objptr
1b8a8     02 03 02 FB | 	rdlong	_var02, _var03
1b8ac     00 02 56 F2 | 	cmps	_var02, #0 wc
1b8b0     F0 FF 9F CD |  if_b	jmp	#LR__2141
1b8b4     E9 E5 85 F1 | 	sub	objptr, #489
1b8b8     01 00 06 F1 | 	add	_var01, #1
1b8bc     10 00 56 F2 | 	cmps	_var01, #16 wc
1b8c0     E8 FE 9F CD |  if_b	jmp	#LR__2140
1b8c4                 | LR__2142
1b8c4                 | _hg010b_spin2_putcharxycgf_ret
1b8c4     2D 00 64 FD | 	ret
1b8c8                 | 
1b8c8                 | ' 
1b8c8                 | ' 
1b8c8                 | ' '**********************************************************************r***
1b8c8                 | ' '                                                                        *
1b8c8                 | ' ' Font related functions                                                 *
1b8c8                 | ' '                                                                        *
1b8c8                 | ' '*************************************************************************
1b8c8                 | ' 
1b8c8                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1b8c8                 | ' 
1b8c8                 | ' pub setfontfamily(afontnum)
1b8c8                 | _hg010b_spin2_setfontfamily
1b8c8                 | ' 
1b8c8                 | ' font_family:=afontnum
1b8c8     95 E4 05 F1 | 	add	objptr, #149
1b8cc     F2 12 62 FC | 	wrlong	arg01, objptr
1b8d0     95 E4 85 F1 | 	sub	objptr, #149
1b8d4                 | ' 'if afontnum==8
1b8d4                 | ' '  font_ptr:=@amiga_font
1b8d4                 | ' 
1b8d4                 | ' if afontnum==4
1b8d4     04 12 0E F2 | 	cmp	arg01, #4 wz
1b8d8                 | '   font_ptr:=@st_font
1b8d8     08 00 00 AF 
1b8dc     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1b8e0     08 E4 05 A1 |  if_e	add	objptr, #8
1b8e4     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1b8e8     08 E4 85 A1 |  if_e	sub	objptr, #8
1b8ec     08 00 00 AF 
1b8f0     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1b8f4                 | ' if afontnum==0
1b8f4     00 12 0E F2 | 	cmp	arg01, #0 wz
1b8f8                 | '   font_ptr:=@vga_font
1b8f8     08 E4 05 A1 |  if_e	add	objptr, #8
1b8fc     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1b900     08 E4 85 A1 |  if_e	sub	objptr, #8
1b904                 | _hg010b_spin2_setfontfamily_ret
1b904     2D 00 64 FD | 	ret
1b908                 | 
1b908                 | ' 
1b908                 | ' '*************************************************************************
1b908                 | ' '                                                                        *
1b908                 | ' '  Cursor functions                                                      *
1b908                 | ' '                                                                        *
1b908                 | ' '*************************************************************************
1b908                 | ' 
1b908                 | ' 
1b908                 | ' pub setcursorpos(x,y)
1b908                 | _hg010b_spin2_setcursorpos
1b908                 | ' 
1b908                 | ' ''---------- Set the (x,y) position of cursor
1b908                 | ' 
1b908                 | ' cursor_x:=x
1b908     3C E4 05 F1 | 	add	objptr, #60
1b90c     F2 12 52 FC | 	wrword	arg01, objptr
1b910                 | ' cursor_y:=y
1b910     02 E4 05 F1 | 	add	objptr, #2
1b914     F2 14 42 FC | 	wrbyte	arg02, objptr
1b918                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1b918     02 E4 85 F1 | 	sub	objptr, #2
1b91c     F2 14 E2 FA | 	rdword	arg02, objptr
1b920     02 14 66 F0 | 	shl	arg02, #2
1b924     02 E4 05 F1 | 	add	objptr, #2
1b928     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b92c     3E E4 85 F1 | 	sub	objptr, #62
1b930     04 16 66 F0 | 	shl	arg03, #4
1b934     04 16 06 F1 | 	add	arg03, #4
1b938     11 12 06 F6 | 	mov	arg01, #17
1b93c     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1b940                 | _hg010b_spin2_setcursorpos_ret
1b940     2D 00 64 FD | 	ret
1b944                 | 
1b944                 | ' 
1b944                 | ' pub setcursorx(x)
1b944                 | _hg010b_spin2_setcursorx
1b944                 | ' cursor_x:=x
1b944     3C E4 05 F1 | 	add	objptr, #60
1b948     F2 12 52 FC | 	wrword	arg01, objptr
1b94c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1b94c     F2 14 E2 FA | 	rdword	arg02, objptr
1b950     02 14 66 F0 | 	shl	arg02, #2
1b954     02 E4 05 F1 | 	add	objptr, #2
1b958     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b95c     3E E4 85 F1 | 	sub	objptr, #62
1b960     04 16 66 F0 | 	shl	arg03, #4
1b964     04 16 06 F1 | 	add	arg03, #4
1b968     11 12 06 F6 | 	mov	arg01, #17
1b96c     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1b970                 | _hg010b_spin2_setcursorx_ret
1b970     2D 00 64 FD | 	ret
1b974                 | 
1b974                 | ' 
1b974                 | ' pub setcursory(y) 
1b974                 | _hg010b_spin2_setcursory
1b974                 | ' cursor_y:=y
1b974     3E E4 05 F1 | 	add	objptr, #62
1b978     F2 12 42 FC | 	wrbyte	arg01, objptr
1b97c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1b97c     02 E4 85 F1 | 	sub	objptr, #2
1b980     F2 14 E2 FA | 	rdword	arg02, objptr
1b984     02 14 66 F0 | 	shl	arg02, #2
1b988     02 E4 05 F1 | 	add	objptr, #2
1b98c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b990     3E E4 85 F1 | 	sub	objptr, #62
1b994     04 16 66 F0 | 	shl	arg03, #4
1b998     04 16 06 F1 | 	add	arg03, #4
1b99c     11 12 06 F6 | 	mov	arg01, #17
1b9a0     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1b9a4                 | _hg010b_spin2_setcursory_ret
1b9a4     2D 00 64 FD | 	ret
1b9a8                 | 
1b9a8                 | ' 
1b9a8                 | ' '*************************************************************************
1b9a8                 | ' '                                                                        *
1b9a8                 | ' '  VBlank functions                                                      *
1b9a8                 | ' '                                                                        *
1b9a8                 | ' '*************************************************************************
1b9a8                 | ' 
1b9a8                 | ' pub waitvbl(amount) | i
1b9a8                 | _hg010b_spin2_waitvbl
1b9a8     03 4A 05 F6 | 	mov	COUNT_, #3
1b9ac     A8 00 A0 FD | 	call	#pushregs_
1b9b0     09 1F 02 F6 | 	mov	local01, arg01
1b9b4                 | ' 
1b9b4                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1b9b4                 | ' 
1b9b4                 | ' repeat i from 1 to amount
1b9b4     01 20 06 F6 | 	mov	local02, #1
1b9b8     01 1E 56 F2 | 	cmps	local01, #1 wc
1b9bc     01 22 86 F6 | 	negc	local03, #1
1b9c0     11 1F 02 F1 | 	add	local01, local03
1b9c4                 | LR__2150
1b9c4                 | '   repeat until vblank==0
1b9c4                 | LR__2151
1b9c4     49 E4 05 F1 | 	add	objptr, #73
1b9c8     F2 12 0A FB | 	rdlong	arg01, objptr wz
1b9cc     49 E4 85 F1 | 	sub	objptr, #73
1b9d0     0C 00 90 AD |  if_e	jmp	#LR__2152
1b9d4                 | '     waitus(100)
1b9d4     64 12 06 F6 | 	mov	arg01, #100
1b9d8     08 1A B0 FD | 	call	#__system___waitus
1b9dc     E4 FF 9F FD | 	jmp	#LR__2151
1b9e0                 | LR__2152
1b9e0                 | '   repeat until vblank==1
1b9e0                 | LR__2153
1b9e0     49 E4 05 F1 | 	add	objptr, #73
1b9e4     F2 12 02 FB | 	rdlong	arg01, objptr
1b9e8     49 E4 85 F1 | 	sub	objptr, #73
1b9ec     01 12 0E F2 | 	cmp	arg01, #1 wz
1b9f0     0C 00 90 AD |  if_e	jmp	#LR__2154
1b9f4                 | '     waitus(100)
1b9f4     64 12 06 F6 | 	mov	arg01, #100
1b9f8     E8 19 B0 FD | 	call	#__system___waitus
1b9fc     E0 FF 9F FD | 	jmp	#LR__2153
1ba00                 | LR__2154
1ba00     11 21 02 F1 | 	add	local02, local03
1ba04     0F 21 0A F2 | 	cmp	local02, local01 wz
1ba08     B8 FF 9F 5D |  if_ne	jmp	#LR__2150
1ba0c     A7 F0 03 F6 | 	mov	ptra, fp
1ba10     B2 00 A0 FD | 	call	#popregs_
1ba14                 | _hg010b_spin2_waitvbl_ret
1ba14     2D 00 64 FD | 	ret
1ba18                 | 
1ba18                 | ' 
1ba18                 | ' 
1ba18                 | ' pub cls(fc,bc)   :c,i
1ba18                 | _hg010b_spin2_cls
1ba18     02 4A 05 F6 | 	mov	COUNT_, #2
1ba1c     A8 00 A0 FD | 	call	#pushregs_
1ba20     09 1F 02 F6 | 	mov	local01, arg01
1ba24     0A 21 02 F6 | 	mov	local02, arg02
1ba28                 | ' 
1ba28                 | ' c:=bc
1ba28                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1ba28     DD E4 05 F1 | 	add	objptr, #221
1ba2c     F2 12 02 FB | 	rdlong	arg01, objptr
1ba30     A5 E4 85 F1 | 	sub	objptr, #165
1ba34     F2 16 02 FB | 	rdlong	arg03, objptr
1ba38     02 16 66 F0 | 	shl	arg03, #2
1ba3c     10 15 02 F6 | 	mov	arg02, local02
1ba40     00 18 06 F6 | 	mov	arg04, #0
1ba44     01 1A 06 F6 | 	mov	arg05, #1
1ba48     0B 00 00 FF 
1ba4c     94 E4 05 F1 | 	add	objptr, ##5780
1ba50     64 0B B0 FD | 	call	#_psram_spin2_fill
1ba54                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1ba54     0B 00 00 FF 
1ba58     C8 E4 85 F1 | 	sub	objptr, ##5832
1ba5c     F2 12 02 FB | 	rdlong	arg01, objptr
1ba60     04 E4 85 F1 | 	sub	objptr, #4
1ba64     F2 16 02 FB | 	rdlong	arg03, objptr
1ba68     09 17 82 F1 | 	sub	arg03, arg01
1ba6c     20 14 06 F6 | 	mov	arg02, #32
1ba70     00 18 06 F6 | 	mov	arg04, #0
1ba74     01 1A 06 F6 | 	mov	arg05, #1
1ba78     0B 00 00 FF 
1ba7c     CC E4 05 F1 | 	add	objptr, ##5836
1ba80     34 0B B0 FD | 	call	#_psram_spin2_fill
1ba84                 | ' setwritecolors(fc,bc)
1ba84                 | ' 
1ba84                 | ' write_color:=ff
1ba84     0B 00 00 FF 
1ba88     8B E4 85 F1 | 	sub	objptr, ##5771
1ba8c     F2 1E 62 FC | 	wrlong	local01, objptr
1ba90                 | ' write_background:=bb
1ba90     04 E4 05 F1 | 	add	objptr, #4
1ba94     F2 20 62 FC | 	wrlong	local02, objptr
1ba98                 | ' cursor_x:=0
1ba98     09 E4 85 F1 | 	sub	objptr, #9
1ba9c     F2 00 58 FC | 	wrword	#0, objptr
1baa0                 | ' cursor_y:=0
1baa0     02 E4 05 F1 | 	add	objptr, #2
1baa4     F2 00 48 FC | 	wrbyte	#0, objptr
1baa8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1baa8     02 E4 85 F1 | 	sub	objptr, #2
1baac     F2 14 E2 FA | 	rdword	arg02, objptr
1bab0     02 14 66 F0 | 	shl	arg02, #2
1bab4     02 E4 05 F1 | 	add	objptr, #2
1bab8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1babc     3E E4 85 F1 | 	sub	objptr, #62
1bac0     04 16 66 F0 | 	shl	arg03, #4
1bac4     04 16 06 F1 | 	add	arg03, #4
1bac8     11 12 06 F6 | 	mov	arg01, #17
1bacc     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1bad0                 | ' setcursorcolor(fc)
1bad0     0F 13 02 F6 | 	mov	arg01, local01
1bad4     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1bad8     10 FB 01 F6 | 	mov	result1, local02
1badc     00 FC 05 F6 | 	mov	result2, #0
1bae0     A7 F0 03 F6 | 	mov	ptra, fp
1bae4     B2 00 A0 FD | 	call	#popregs_
1bae8                 | _hg010b_spin2_cls_ret
1bae8     2D 00 64 FD | 	ret
1baec                 | 
1baec                 | ' 
1baec                 | ' ''---------- Output a char at the cursor position, move the cursor 
1baec                 | ' 
1baec                 | ' pub putchar(achar) | c,x,y,l,newcpl
1baec                 | _hg010b_spin2_putchar
1baec     02 4A 05 F6 | 	mov	COUNT_, #2
1baf0     A8 00 A0 FD | 	call	#pushregs_
1baf4     09 1F 02 F6 | 	mov	local01, arg01
1baf8                 | ' 
1baf8                 | ' if achar==10
1baf8     0A 1E 0E F2 | 	cmp	local01, #10 wz
1bafc                 | '   crlf()
1bafc     A4 05 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1bb00                 | ' if achar==9
1bb00     09 1E 0E F2 | 	cmp	local01, #9 wz
1bb04     18 00 90 5D |  if_ne	jmp	#LR__2160
1bb08                 | '   cursor_x:=(cursor_x& %11110000)+16
1bb08     3C E4 05 F1 | 	add	objptr, #60
1bb0c     F2 16 E2 FA | 	rdword	arg03, objptr
1bb10     F0 16 06 F5 | 	and	arg03, #240
1bb14     10 16 06 F1 | 	add	arg03, #16
1bb18     F2 16 52 FC | 	wrword	arg03, objptr
1bb1c     3C E4 85 F1 | 	sub	objptr, #60
1bb20                 | LR__2160
1bb20                 | '   
1bb20                 | ' if (achar<>9) && (achar<>10) 
1bb20     09 1E 0E F2 | 	cmp	local01, #9 wz
1bb24     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1bb28     A8 00 90 AD |  if_e	jmp	#LR__2161
1bb2c                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1bb2c     3C E4 05 F1 | 	add	objptr, #60
1bb30     F2 12 E2 FA | 	rdword	arg01, objptr
1bb34     02 E4 05 F1 | 	add	objptr, #2
1bb38     F2 14 C2 FA | 	rdbyte	arg02, objptr
1bb3c     04 14 66 F0 | 	shl	arg02, #4
1bb40     04 14 06 F1 | 	add	arg02, #4
1bb44     03 E4 05 F1 | 	add	objptr, #3
1bb48     F2 18 02 FB | 	rdlong	arg04, objptr
1bb4c     04 E4 05 F1 | 	add	objptr, #4
1bb50     F2 1A 02 FB | 	rdlong	arg05, objptr
1bb54     45 E4 85 F1 | 	sub	objptr, #69
1bb58     0F 17 02 F6 | 	mov	arg03, local01
1bb5c     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1bb60     04 E4 05 F1 | 	add	objptr, #4
1bb64     F2 12 02 FB | 	rdlong	arg01, objptr
1bb68     10 00 00 FF 
1bb6c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1bb70     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1bb74     3A E4 05 F1 | 	add	objptr, #58
1bb78     F2 1A C2 FA | 	rdbyte	arg05, objptr
1bb7c     0D 17 02 FD | 	qmul	arg03, arg05
1bb80                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1bb80     10 00 00 FF 
1bb84     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1bb88     02 E4 85 F1 | 	sub	objptr, #2
1bb8c     F2 20 E2 FA | 	rdword	local02, objptr
1bb90     01 20 46 F0 | 	shr	local02, #1
1bb94     0F 15 02 F6 | 	mov	arg02, local01
1bb98     01 16 06 F6 | 	mov	arg03, #1
1bb9c     00 18 06 F6 | 	mov	arg04, #0
1bba0     01 1A 06 F6 | 	mov	arg05, #1
1bba4     0B 00 00 FF 
1bba8     90 E4 05 F1 | 	add	objptr, ##5776
1bbac     18 1E 62 FD | 	getqx	local01
1bbb0     10 1F 02 F1 | 	add	local01, local02
1bbb4     0F 13 02 F1 | 	add	arg01, local01
1bbb8     FC 09 B0 FD | 	call	#_psram_spin2_fill
1bbbc                 | '   cursor_x+=2
1bbbc     0B 00 00 FF 
1bbc0     90 E4 85 F1 | 	sub	objptr, ##5776
1bbc4     F2 20 E2 FA | 	rdword	local02, objptr
1bbc8     02 20 06 F1 | 	add	local02, #2
1bbcc     F2 20 52 FC | 	wrword	local02, objptr
1bbd0     3C E4 85 F1 | 	sub	objptr, #60
1bbd4                 | LR__2161
1bbd4                 | ' 
1bbd4                 | ' if cursor_x>=256
1bbd4     3C E4 05 F1 | 	add	objptr, #60
1bbd8     F2 20 E2 FA | 	rdword	local02, objptr
1bbdc     3C E4 85 F1 | 	sub	objptr, #60
1bbe0     00 21 56 F2 | 	cmps	local02, #256 wc
1bbe4     64 00 90 CD |  if_b	jmp	#LR__2163
1bbe8                 | '   cursor_x:=0
1bbe8     3C E4 05 F1 | 	add	objptr, #60
1bbec     F2 00 58 FC | 	wrword	#0, objptr
1bbf0                 | '   cursor_y+=1
1bbf0     02 E4 05 F1 | 	add	objptr, #2
1bbf4     F2 20 C2 FA | 	rdbyte	local02, objptr
1bbf8     01 20 06 F1 | 	add	local02, #1
1bbfc     F2 20 42 FC | 	wrbyte	local02, objptr
1bc00                 | '   if cursor_y>st_lines-1
1bc00     C3 E4 05 F1 | 	add	objptr, #195
1bc04     F2 20 02 FB | 	rdlong	local02, objptr
1bc08     01 20 86 F1 | 	sub	local02, #1
1bc0c     C3 E4 85 F1 | 	sub	objptr, #195
1bc10     F2 16 C2 FA | 	rdbyte	arg03, objptr
1bc14     3E E4 85 F1 | 	sub	objptr, #62
1bc18     10 17 5A F2 | 	cmps	arg03, local02 wcz
1bc1c     2C 00 90 ED |  if_be	jmp	#LR__2162
1bc20                 | '     scrollup2()
1bc20     00 12 06 F6 | 	mov	arg01, #0
1bc24     01 00 00 FF 
1bc28     58 14 06 F6 | 	mov	arg02, ##600
1bc2c     10 16 06 F6 | 	mov	arg03, #16
1bc30     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1bc34                 | '     cursor_y:=st_lines-1
1bc34     01 E5 05 F1 | 	add	objptr, #257
1bc38     F2 20 02 FB | 	rdlong	local02, objptr
1bc3c     01 20 86 F1 | 	sub	local02, #1
1bc40     C3 E4 85 F1 | 	sub	objptr, #195
1bc44     F2 20 42 FC | 	wrbyte	local02, objptr
1bc48     3E E4 85 F1 | 	sub	objptr, #62
1bc4c                 | LR__2162
1bc4c                 | LR__2163
1bc4c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1bc4c     3C E4 05 F1 | 	add	objptr, #60
1bc50     F2 14 E2 FA | 	rdword	arg02, objptr
1bc54     02 14 66 F0 | 	shl	arg02, #2
1bc58     02 E4 05 F1 | 	add	objptr, #2
1bc5c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1bc60     3E E4 85 F1 | 	sub	objptr, #62
1bc64     04 16 66 F0 | 	shl	arg03, #4
1bc68     04 16 06 F1 | 	add	arg03, #4
1bc6c     11 12 06 F6 | 	mov	arg01, #17
1bc70     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1bc74     A7 F0 03 F6 | 	mov	ptra, fp
1bc78     B2 00 A0 FD | 	call	#popregs_
1bc7c                 | _hg010b_spin2_putchar_ret
1bc7c     2D 00 64 FD | 	ret
1bc80                 | 
1bc80                 | '     
1bc80                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1bc80                 | ' 
1bc80                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1bc80                 | _hg010b_spin2_putchar2
1bc80     02 4A 05 F6 | 	mov	COUNT_, #2
1bc84     A8 00 A0 FD | 	call	#pushregs_
1bc88     09 1F 02 F6 | 	mov	local01, arg01
1bc8c                 | ' 
1bc8c                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1bc8c     3C E4 05 F1 | 	add	objptr, #60
1bc90     F2 12 E2 FA | 	rdword	arg01, objptr
1bc94     02 E4 05 F1 | 	add	objptr, #2
1bc98     F2 14 C2 FA | 	rdbyte	arg02, objptr
1bc9c     04 14 66 F0 | 	shl	arg02, #4
1bca0     04 14 06 F1 | 	add	arg02, #4
1bca4     03 E4 05 F1 | 	add	objptr, #3
1bca8     F2 18 02 FB | 	rdlong	arg04, objptr
1bcac     04 E4 05 F1 | 	add	objptr, #4
1bcb0     F2 1A 02 FB | 	rdlong	arg05, objptr
1bcb4     45 E4 85 F1 | 	sub	objptr, #69
1bcb8     0F 17 02 F6 | 	mov	arg03, local01
1bcbc     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1bcc0     04 E4 05 F1 | 	add	objptr, #4
1bcc4     F2 12 02 FB | 	rdlong	arg01, objptr
1bcc8     10 00 00 FF 
1bccc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1bcd0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1bcd4     3A E4 05 F1 | 	add	objptr, #58
1bcd8     F2 1A C2 FA | 	rdbyte	arg05, objptr
1bcdc     0D 17 02 FD | 	qmul	arg03, arg05
1bce0                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1bce0     10 00 00 FF 
1bce4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1bce8     02 E4 85 F1 | 	sub	objptr, #2
1bcec     F2 20 E2 FA | 	rdword	local02, objptr
1bcf0     01 20 46 F0 | 	shr	local02, #1
1bcf4     0F 15 02 F6 | 	mov	arg02, local01
1bcf8     01 16 06 F6 | 	mov	arg03, #1
1bcfc     00 18 06 F6 | 	mov	arg04, #0
1bd00     01 1A 06 F6 | 	mov	arg05, #1
1bd04     0B 00 00 FF 
1bd08     90 E4 05 F1 | 	add	objptr, ##5776
1bd0c     18 1E 62 FD | 	getqx	local01
1bd10     10 1F 02 F1 | 	add	local01, local02
1bd14     0F 13 02 F1 | 	add	arg01, local01
1bd18     9C 08 B0 FD | 	call	#_psram_spin2_fill
1bd1c                 | ' 
1bd1c                 | ' cursor_x+=2
1bd1c     0B 00 00 FF 
1bd20     90 E4 85 F1 | 	sub	objptr, ##5776
1bd24     F2 20 E2 FA | 	rdword	local02, objptr
1bd28     02 20 06 F1 | 	add	local02, #2
1bd2c     F2 20 52 FC | 	wrword	local02, objptr
1bd30                 | ' if cursor_x>=256
1bd30     F2 20 E2 FA | 	rdword	local02, objptr
1bd34     3C E4 85 F1 | 	sub	objptr, #60
1bd38     00 21 56 F2 | 	cmps	local02, #256 wc
1bd3c     64 00 90 CD |  if_b	jmp	#LR__2171
1bd40                 | '   cursor_x:=0
1bd40     3C E4 05 F1 | 	add	objptr, #60
1bd44     F2 00 58 FC | 	wrword	#0, objptr
1bd48                 | '   cursor_y+=1
1bd48     02 E4 05 F1 | 	add	objptr, #2
1bd4c     F2 20 C2 FA | 	rdbyte	local02, objptr
1bd50     01 20 06 F1 | 	add	local02, #1
1bd54     F2 20 42 FC | 	wrbyte	local02, objptr
1bd58                 | '   if cursor_y>st_lines-1
1bd58     C3 E4 05 F1 | 	add	objptr, #195
1bd5c     F2 20 02 FB | 	rdlong	local02, objptr
1bd60     01 20 86 F1 | 	sub	local02, #1
1bd64     C3 E4 85 F1 | 	sub	objptr, #195
1bd68     F2 16 C2 FA | 	rdbyte	arg03, objptr
1bd6c     3E E4 85 F1 | 	sub	objptr, #62
1bd70     10 17 5A F2 | 	cmps	arg03, local02 wcz
1bd74     2C 00 90 ED |  if_be	jmp	#LR__2170
1bd78                 | '     scrollup2()
1bd78     00 12 06 F6 | 	mov	arg01, #0
1bd7c     01 00 00 FF 
1bd80     58 14 06 F6 | 	mov	arg02, ##600
1bd84     10 16 06 F6 | 	mov	arg03, #16
1bd88     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1bd8c                 | '     cursor_y:=st_lines-1
1bd8c     01 E5 05 F1 | 	add	objptr, #257
1bd90     F2 20 02 FB | 	rdlong	local02, objptr
1bd94     01 20 86 F1 | 	sub	local02, #1
1bd98     C3 E4 85 F1 | 	sub	objptr, #195
1bd9c     F2 20 42 FC | 	wrbyte	local02, objptr
1bda0     3E E4 85 F1 | 	sub	objptr, #62
1bda4                 | LR__2170
1bda4                 | LR__2171
1bda4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1bda4     3C E4 05 F1 | 	add	objptr, #60
1bda8     F2 14 E2 FA | 	rdword	arg02, objptr
1bdac     02 14 66 F0 | 	shl	arg02, #2
1bdb0     02 E4 05 F1 | 	add	objptr, #2
1bdb4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1bdb8     3E E4 85 F1 | 	sub	objptr, #62
1bdbc     04 16 66 F0 | 	shl	arg03, #4
1bdc0     04 16 06 F1 | 	add	arg03, #4
1bdc4     11 12 06 F6 | 	mov	arg01, #17
1bdc8     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1bdcc     A7 F0 03 F6 | 	mov	ptra, fp
1bdd0     B2 00 A0 FD | 	call	#popregs_
1bdd4                 | _hg010b_spin2_putchar2_ret
1bdd4     2D 00 64 FD | 	ret
1bdd8                 | 
1bdd8                 | ' ''--------- Output a string at the cursor position, move the cursor  
1bdd8                 | ' 
1bdd8                 | ' pub write(text) | iii,c,ncx,ncy
1bdd8                 | _hg010b_spin2_write
1bdd8     04 4A 05 F6 | 	mov	COUNT_, #4
1bddc     A8 00 A0 FD | 	call	#pushregs_
1bde0     09 1F 02 F6 | 	mov	local01, arg01
1bde4                 | ' 
1bde4                 | ' repeat iii from 0 to strsize(text)-1
1bde4     00 20 06 F6 | 	mov	local02, #0
1bde8     0F 13 02 F6 | 	mov	arg01, local01
1bdec     09 23 02 F6 | 	mov	local03, arg01
1bdf0     97 06 48 FB | 	callpa	#(@LR__2181-@LR__2180)>>2,fcache_load_ptr_
1bdf4                 | LR__2180
1bdf4     11 FB C9 FA | 	rdbyte	result1, local03 wz
1bdf8     01 22 06 51 |  if_ne	add	local03, #1
1bdfc     F4 FF 9F 5D |  if_ne	jmp	#LR__2180
1be00                 | LR__2181
1be00     09 23 82 F1 | 	sub	local03, arg01
1be04     01 22 86 F1 | 	sub	local03, #1
1be08     00 22 56 F2 | 	cmps	local03, #0 wc
1be0c     01 24 86 F6 | 	negc	local04, #1
1be10     12 23 02 F1 | 	add	local03, local04
1be14                 | LR__2182
1be14                 | '   putchar2(byte[text+iii])
1be14     0F 13 02 F6 | 	mov	arg01, local01
1be18     10 13 02 F1 | 	add	arg01, local02
1be1c     09 13 C2 FA | 	rdbyte	arg01, arg01
1be20     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1be24     12 21 02 F1 | 	add	local02, local04
1be28     11 21 0A F2 | 	cmp	local02, local03 wz
1be2c     E4 FF 9F 5D |  if_ne	jmp	#LR__2182
1be30     A7 F0 03 F6 | 	mov	ptra, fp
1be34     B2 00 A0 FD | 	call	#popregs_
1be38                 | _hg010b_spin2_write_ret
1be38     2D 00 64 FD | 	ret
1be3c                 | 
1be3c                 | '    
1be3c                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1be3c                 | ' 
1be3c                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1be3c                 | _hg010b_spin2_scrollup2
1be3c     03 4A 05 F6 | 	mov	COUNT_, #3
1be40     A8 00 A0 FD | 	call	#pushregs_
1be44                 | ' 	
1be44                 | ' repeat i from 4 to 599 
1be44     04 1E 06 F6 | 	mov	local01, #4
1be48                 | LR__2190
1be48     F9 E4 05 F1 | 	add	objptr, #249
1be4c     F2 1A 02 FB | 	rdlong	arg05, objptr
1be50     1C E4 85 F1 | 	sub	objptr, #28
1be54     F2 14 02 FB | 	rdlong	arg02, objptr
1be58     0F 19 02 F6 | 	mov	arg04, local01
1be5c     10 18 06 F1 | 	add	arg04, #16
1be60     02 18 66 F0 | 	shl	arg04, #2
1be64     14 E4 05 F1 | 	add	objptr, #20
1be68     F2 16 02 FB | 	rdlong	arg03, objptr
1be6c     0B 19 02 FD | 	qmul	arg04, arg03
1be70                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1be70     F6 03 00 FF 
1be74     00 12 06 F6 | 	mov	arg01, ##519168
1be78     0D 13 82 F1 | 	sub	arg01, arg05
1be7c     02 16 66 F0 | 	shl	arg03, #2
1be80     0A 00 00 FF 
1be84     DB E5 05 F1 | 	add	objptr, ##5595
1be88     18 1A 62 FD | 	getqx	arg05
1be8c     0D 15 02 F1 | 	add	arg02, arg05
1be90     EC 05 B0 FD | 	call	#_psram_spin2_read1
1be94     0A 00 00 FF 
1be98     D3 E5 85 F1 | 	sub	objptr, ##5587
1be9c     F2 1A 02 FB | 	rdlong	arg05, objptr
1bea0     1C E4 85 F1 | 	sub	objptr, #28
1bea4     F2 14 02 FB | 	rdlong	arg02, objptr
1bea8     0F 19 02 F6 | 	mov	arg04, local01
1beac     02 18 66 F0 | 	shl	arg04, #2
1beb0     14 E4 05 F1 | 	add	objptr, #20
1beb4     F2 16 02 FB | 	rdlong	arg03, objptr
1beb8     0B 19 02 FD | 	qmul	arg04, arg03
1bebc                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1bebc     F6 03 00 FF 
1bec0     00 12 06 F6 | 	mov	arg01, ##519168
1bec4     0D 13 82 F1 | 	sub	arg01, arg05
1bec8     02 16 66 F0 | 	shl	arg03, #2
1becc     0A 00 00 FF 
1bed0     DB E5 05 F1 | 	add	objptr, ##5595
1bed4     18 1A 62 FD | 	getqx	arg05
1bed8     0D 15 02 F1 | 	add	arg02, arg05
1bedc     3C 06 B0 FD | 	call	#_psram_spin2_write
1bee0     0B 00 00 FF 
1bee4     CC E4 85 F1 | 	sub	objptr, ##5836
1bee8     01 1E 06 F1 | 	add	local01, #1
1beec     01 00 00 FF 
1bef0     58 1E 16 F2 | 	cmp	local01, ##600 wc
1bef4     50 FF 9F CD |  if_b	jmp	#LR__2190
1bef8                 | ' 
1bef8                 | ' repeat i from 580 to 599
1bef8     01 00 00 FF 
1befc     44 1E 06 F6 | 	mov	local01, ##580
1bf00                 | LR__2191
1bf00                 | '    fastline(0,1023,i,write_background)   
1bf00     45 E4 05 F1 | 	add	objptr, #69
1bf04     F2 18 02 FB | 	rdlong	arg04, objptr
1bf08     45 E4 85 F1 | 	sub	objptr, #69
1bf0c     00 12 06 F6 | 	mov	arg01, #0
1bf10     09 14 CE F9 | 	bmask	arg02, #9
1bf14     0F 17 02 F6 | 	mov	arg03, local01
1bf18     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1bf1c     01 1E 06 F1 | 	add	local01, #1
1bf20     01 00 00 FF 
1bf24     58 1E 16 F2 | 	cmp	local01, ##600 wc
1bf28     D4 FF 9F CD |  if_b	jmp	#LR__2191
1bf2c                 | ' repeat i from 0 to 3
1bf2c     00 1E 06 F6 | 	mov	local01, #0
1bf30                 | LR__2192
1bf30                 | '    fastline(0,1023,i,write_background)      
1bf30     45 E4 05 F1 | 	add	objptr, #69
1bf34     F2 18 02 FB | 	rdlong	arg04, objptr
1bf38     45 E4 85 F1 | 	sub	objptr, #69
1bf3c     00 12 06 F6 | 	mov	arg01, #0
1bf40     09 14 CE F9 | 	bmask	arg02, #9
1bf44     0F 17 02 F6 | 	mov	arg03, local01
1bf48     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1bf4c     01 1E 06 F1 | 	add	local01, #1
1bf50     04 1E 56 F2 | 	cmps	local01, #4 wc
1bf54     D8 FF 9F CD |  if_b	jmp	#LR__2192
1bf58                 | ' 
1bf58                 | ' repeat i from 0 to 35
1bf58     00 1E 06 F6 | 	mov	local01, #0
1bf5c                 | LR__2193
1bf5c     0F 1B 02 F6 | 	mov	arg05, local01
1bf60     01 1A 06 F1 | 	add	arg05, #1
1bf64     10 00 00 FF 
1bf68     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1bf6c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1bf70     0B 1B 02 FD | 	qmul	arg05, arg03
1bf74                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1bf74     F6 03 00 FF 
1bf78     00 12 06 F6 | 	mov	arg01, ##519168
1bf7c     F9 E4 05 F1 | 	add	objptr, #249
1bf80     F2 1A 02 FB | 	rdlong	arg05, objptr
1bf84     0D 13 82 F1 | 	sub	arg01, arg05
1bf88     F5 E4 85 F1 | 	sub	objptr, #245
1bf8c     F2 14 02 FB | 	rdlong	arg02, objptr
1bf90     10 00 00 FF 
1bf94     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1bf98     0B 00 00 FF 
1bf9c     C8 E4 05 F1 | 	add	objptr, ##5832
1bfa0     18 1A 62 FD | 	getqx	arg05
1bfa4     0D 15 02 F1 | 	add	arg02, arg05
1bfa8     D4 04 B0 FD | 	call	#_psram_spin2_read1
1bfac     10 00 00 FF 
1bfb0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1bfb4     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1bfb8     0B 1F 02 FD | 	qmul	local01, arg03
1bfbc                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1bfbc     F6 03 00 FF 
1bfc0     00 12 06 F6 | 	mov	arg01, ##519168
1bfc4     0A 00 00 FF 
1bfc8     D3 E5 85 F1 | 	sub	objptr, ##5587
1bfcc     F2 1A 02 FB | 	rdlong	arg05, objptr
1bfd0     0D 13 82 F1 | 	sub	arg01, arg05
1bfd4     F5 E4 85 F1 | 	sub	objptr, #245
1bfd8     F2 14 02 FB | 	rdlong	arg02, objptr
1bfdc     10 00 00 FF 
1bfe0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1bfe4     0B 00 00 FF 
1bfe8     C8 E4 05 F1 | 	add	objptr, ##5832
1bfec     18 1A 62 FD | 	getqx	arg05
1bff0     0D 15 02 F1 | 	add	arg02, arg05
1bff4     24 05 B0 FD | 	call	#_psram_spin2_write
1bff8     0B 00 00 FF 
1bffc     CC E4 85 F1 | 	sub	objptr, ##5836
1c000     01 1E 06 F1 | 	add	local01, #1
1c004     24 1E 56 F2 | 	cmps	local01, #36 wc
1c008     50 FF 9F CD |  if_b	jmp	#LR__2193
1c00c                 | ' repeat i from 0 to timings[7]-1
1c00c     00 1E 06 F6 | 	mov	local01, #0
1c010     10 00 00 FF 
1c014     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1c018     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1c01c     10 00 00 FF 
1c020     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1c024     01 20 86 F1 | 	sub	local02, #1
1c028     00 20 56 F2 | 	cmps	local02, #0 wc
1c02c     01 22 86 F6 | 	negc	local03, #1
1c030     11 21 02 F1 | 	add	local02, local03
1c034                 | LR__2194
1c034                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1c034     04 E4 05 F1 | 	add	objptr, #4
1c038     F2 12 02 FB | 	rdlong	arg01, objptr
1c03c     10 00 00 FF 
1c040     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1c044     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1c048     10 00 00 FF 
1c04c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1c050     0D 19 02 F6 | 	mov	arg04, arg05
1c054     03 18 66 F0 | 	shl	arg04, #3
1c058     0D 19 02 F1 | 	add	arg04, arg05
1c05c     02 18 66 F0 | 	shl	arg04, #2
1c060     0F 19 02 F1 | 	add	arg04, local01
1c064     0C 13 02 F1 | 	add	arg01, arg04
1c068     20 14 06 F6 | 	mov	arg02, #32
1c06c     01 16 06 F6 | 	mov	arg03, #1
1c070     00 18 06 F6 | 	mov	arg04, #0
1c074     01 1A 06 F6 | 	mov	arg05, #1
1c078     0B 00 00 FF 
1c07c     C8 E4 05 F1 | 	add	objptr, ##5832
1c080     34 05 B0 FD | 	call	#_psram_spin2_fill
1c084     0B 00 00 FF 
1c088     CC E4 85 F1 | 	sub	objptr, ##5836
1c08c     11 1F 02 F1 | 	add	local01, local03
1c090     10 1F 0A F2 | 	cmp	local01, local02 wz
1c094     9C FF 9F 5D |  if_ne	jmp	#LR__2194
1c098     A7 F0 03 F6 | 	mov	ptra, fp
1c09c     B2 00 A0 FD | 	call	#popregs_
1c0a0                 | _hg010b_spin2_scrollup2_ret
1c0a0     2D 00 64 FD | 	ret
1c0a4                 | 
1c0a4                 | ' 
1c0a4                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1c0a4                 | ' 
1c0a4                 | ' pub crlf()
1c0a4                 | _hg010b_spin2_crlf
1c0a4                 | ' 
1c0a4                 | ' cursor_x:=leading_spaces*2
1c0a4     01 00 00 FF 
1c0a8     B6 E4 05 F1 | 	add	objptr, ##694
1c0ac     F2 16 02 FB | 	rdlong	arg03, objptr
1c0b0     01 16 66 F0 | 	shl	arg03, #1
1c0b4     01 00 00 FF 
1c0b8     7A E4 85 F1 | 	sub	objptr, ##634
1c0bc     F2 16 52 FC | 	wrword	arg03, objptr
1c0c0                 | ' cursor_y+=1
1c0c0     02 E4 05 F1 | 	add	objptr, #2
1c0c4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1c0c8     01 16 06 F1 | 	add	arg03, #1
1c0cc     F2 16 42 FC | 	wrbyte	arg03, objptr
1c0d0                 | ' if cursor_y>st_lines-1
1c0d0     C3 E4 05 F1 | 	add	objptr, #195
1c0d4     F2 16 02 FB | 	rdlong	arg03, objptr
1c0d8     01 16 86 F1 | 	sub	arg03, #1
1c0dc     C3 E4 85 F1 | 	sub	objptr, #195
1c0e0     F2 14 C2 FA | 	rdbyte	arg02, objptr
1c0e4     3E E4 85 F1 | 	sub	objptr, #62
1c0e8     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1c0ec     2C 00 90 ED |  if_be	jmp	#LR__2200
1c0f0                 | '   scrollup2()
1c0f0     00 12 06 F6 | 	mov	arg01, #0
1c0f4     01 00 00 FF 
1c0f8     58 14 06 F6 | 	mov	arg02, ##600
1c0fc     10 16 06 F6 | 	mov	arg03, #16
1c100     38 FD BF FD | 	call	#_hg010b_spin2_scrollup2
1c104                 | '   cursor_y:=st_lines-1
1c104     01 E5 05 F1 | 	add	objptr, #257
1c108     F2 16 02 FB | 	rdlong	arg03, objptr
1c10c     01 16 86 F1 | 	sub	arg03, #1
1c110     C3 E4 85 F1 | 	sub	objptr, #195
1c114     F2 16 42 FC | 	wrbyte	arg03, objptr
1c118     3E E4 85 F1 | 	sub	objptr, #62
1c11c                 | LR__2200
1c11c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1c11c     3C E4 05 F1 | 	add	objptr, #60
1c120     F2 14 E2 FA | 	rdword	arg02, objptr
1c124     02 14 66 F0 | 	shl	arg02, #2
1c128     02 E4 05 F1 | 	add	objptr, #2
1c12c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1c130     3E E4 85 F1 | 	sub	objptr, #62
1c134     04 16 66 F0 | 	shl	arg03, #4
1c138     04 16 06 F1 | 	add	arg03, #4
1c13c     11 12 06 F6 | 	mov	arg01, #17
1c140     4C EB BF FD | 	call	#_hg010b_spin2_setspritepos
1c144                 | _hg010b_spin2_crlf_ret
1c144     2D 00 64 FD | 	ret
1c148                 | 
1c148                 | ' 
1c148                 | ' 
1c148                 | ' '*************************************************************************
1c148                 | ' '                                                                        *
1c148                 | ' '  Conversions                                                           *
1c148                 | ' '                                                                        *
1c148                 | ' '*************************************************************************
1c148                 | ' 
1c148                 | ' ''---------- Convert a integer to dec string, return a pointer
1c148                 | ' 
1c148                 | ' pub inttostr(i):result |q,pos,k,j
1c148                 | _hg010b_spin2_inttostr
1c148     03 4A 05 F6 | 	mov	COUNT_, #3
1c14c     A8 00 A0 FD | 	call	#pushregs_
1c150     09 1F 0A F6 | 	mov	local01, arg01 wz
1c154                 | ' 
1c154                 | ' j:=i
1c154                 | ' pos:=10
1c154     0A 20 06 F6 | 	mov	local02, #10
1c158                 | ' k:=0
1c158     00 22 06 F6 | 	mov	local03, #0
1c15c                 | ' 
1c15c                 | ' if (j==0)
1c15c     18 00 90 5D |  if_ne	jmp	#LR__2210
1c160                 | '   n_string[0]:=48
1c160     4D E4 05 F1 | 	add	objptr, #77
1c164     F2 60 48 FC | 	wrbyte	#48, objptr
1c168                 | '   n_string[1]:=0
1c168     01 E4 05 F1 | 	add	objptr, #1
1c16c     F2 00 48 FC | 	wrbyte	#0, objptr
1c170     4E E4 85 F1 | 	sub	objptr, #78
1c174     C4 00 90 FD | 	jmp	#LR__2217
1c178                 | LR__2210
1c178                 | ' 
1c178                 | ' else
1c178                 | '   if (j<0)
1c178     0F 1F 52 F6 | 	abs	local01, local01 wc
1c17c                 | '     j:=0-j
1c17c                 | '     k:=45
1c17c     2D 22 06 C6 |  if_b	mov	local03, #45
1c180                 | ' 
1c180                 | '   n_string[11]:=0
1c180     58 E4 05 F1 | 	add	objptr, #88
1c184     F2 00 48 FC | 	wrbyte	#0, objptr
1c188     58 E4 85 F1 | 	sub	objptr, #88
1c18c     97 24 48 FB | 	callpa	#(@LR__2212-@LR__2211)>>2,fcache_load_ptr_
1c190                 | '   repeat while (pos>-1)
1c190                 | LR__2211
1c190     00 20 56 F2 | 	cmps	local02, #0 wc
1c194     40 00 90 CD |  if_b	jmp	#LR__2213
1c198     0F FB 51 F6 | 	abs	result1, local01 wc
1c19c     0A FA 15 FD | 	qdiv	result1, #10
1c1a0                 | '     q:=j//10
1c1a0     19 FA 61 FD | 	getqy	result1
1c1a4     FD FA 81 F6 | 	negc	result1, result1
1c1a8     0F 1F 52 F6 | 	abs	local01, local01 wc
1c1ac     0A 1E 16 FD | 	qdiv	local01, #10
1c1b0                 | '     q:=48+q
1c1b0     30 FA 05 F1 | 	add	result1, #48
1c1b4                 | '     n_string[pos]:=q
1c1b4     10 1F 02 F6 | 	mov	local01, local02
1c1b8     4D E4 05 F1 | 	add	objptr, #77
1c1bc     F2 1E 02 F1 | 	add	local01, objptr
1c1c0     0F FB 41 FC | 	wrbyte	result1, local01
1c1c4                 | '     j:=j/10
1c1c4     4D E4 85 F1 | 	sub	objptr, #77
1c1c8                 | '     pos-=1
1c1c8     01 20 86 F1 | 	sub	local02, #1
1c1cc     18 1E 62 FD | 	getqx	local01
1c1d0     0F 1F 82 F6 | 	negc	local01, local01
1c1d4     B8 FF 9F FD | 	jmp	#LR__2211
1c1d8                 | LR__2212
1c1d8                 | LR__2213
1c1d8                 | '   repeat while n_string[0]==48
1c1d8                 | LR__2214
1c1d8     4D E4 05 F1 | 	add	objptr, #77
1c1dc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1c1e0     4D E4 85 F1 | 	sub	objptr, #77
1c1e4     30 16 0E F2 | 	cmp	arg03, #48 wz
1c1e8     20 00 90 5D |  if_ne	jmp	#LR__2215
1c1ec                 | '     bytemove(@n_string,@n_string+1,12)
1c1ec     4D E4 05 F1 | 	add	objptr, #77
1c1f0     F2 12 02 F6 | 	mov	arg01, objptr
1c1f4     F2 14 02 F6 | 	mov	arg02, objptr
1c1f8     4D E4 85 F1 | 	sub	objptr, #77
1c1fc     01 14 06 F1 | 	add	arg02, #1
1c200     0C 16 06 F6 | 	mov	arg03, #12
1c204     9C 0D B0 FD | 	call	#__system____builtin_memmove
1c208     CC FF 9F FD | 	jmp	#LR__2214
1c20c                 | LR__2215
1c20c                 | ' 
1c20c                 | '   if k==45
1c20c     2D 22 0E F2 | 	cmp	local03, #45 wz
1c210     28 00 90 5D |  if_ne	jmp	#LR__2216
1c214                 | '      bytemove(@n_string+1,@n_string,12)
1c214     4D E4 05 F1 | 	add	objptr, #77
1c218     F2 12 02 F6 | 	mov	arg01, objptr
1c21c     01 12 06 F1 | 	add	arg01, #1
1c220     F2 14 02 F6 | 	mov	arg02, objptr
1c224     4D E4 85 F1 | 	sub	objptr, #77
1c228     0C 16 06 F6 | 	mov	arg03, #12
1c22c     74 0D B0 FD | 	call	#__system____builtin_memmove
1c230                 | '      n_string[0]:=k
1c230     4D E4 05 F1 | 	add	objptr, #77
1c234     F2 22 42 FC | 	wrbyte	local03, objptr
1c238     4D E4 85 F1 | 	sub	objptr, #77
1c23c                 | LR__2216
1c23c                 | LR__2217
1c23c                 | ' 
1c23c                 | ' q:=@n_string
1c23c     4D E4 05 F1 | 	add	objptr, #77
1c240     F2 FA 01 F6 | 	mov	result1, objptr
1c244     4D E4 85 F1 | 	sub	objptr, #77
1c248                 | ' return q
1c248     A7 F0 03 F6 | 	mov	ptra, fp
1c24c     B2 00 A0 FD | 	call	#popregs_
1c250                 | _hg010b_spin2_inttostr_ret
1c250     2D 00 64 FD | 	ret
1c254                 | 
1c254                 | ' 
1c254                 | ' '..............................................................................
1c254                 | ' 
1c254                 | ' {{
1c254                 | ' }}
1c254                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1c254                 | _psram_spin2_startx
1c254     04 4A 05 F6 | 	mov	COUNT_, #4
1c258     A8 00 A0 FD | 	call	#pushregs_
1c25c     09 1F 02 F6 | 	mov	local01, arg01
1c260     0B 21 02 F6 | 	mov	local02, arg03
1c264     0C 23 02 F6 | 	mov	local03, arg04
1c268                 | '     stop() ' restart driver if required
1c268     54 01 B0 FD | 	call	#_psram_spin2_stop
1c26c     00 1E 0E F2 | 	cmp	local01, #0 wz
1c270     14 1E 06 AB |  if_e	rdlong	local01, #20
1c274     0F 15 52 F6 | 	abs	arg02, local01 wc
1c278     A1 07 00 FF 
1c27c     40 14 16 FD | 	qdiv	arg02, ##1000000
1c280                 | ' 
1c280                 | '     ' use current frequency if none specified
1c280                 | ' 
1c280                 | '     if freq == 0 
1c280                 | '         freq := clkfreq 
1c280                 | ' 
1c280                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1c280                 | ' 
1c280                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1c280                 | '     if burst < 0
1c280                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1c280     18 14 62 FD | 	getqx	arg02
1c284     0A 19 82 F6 | 	negc	arg04, arg02
1c288     03 18 66 F0 | 	shl	arg04, #3
1c28c     84 18 86 F1 | 	sub	arg04, #132
1c290     04 18 46 F0 | 	shr	arg04, #4
1c294     04 18 66 F0 | 	shl	arg04, #4
1c298     00 18 56 F2 | 	cmps	arg04, #0 wc
1c29c     0E FA 65 C6 |  if_b	neg	result1, #14
1c2a0     10 01 90 CD |  if_b	jmp	#LR__2223
1c2a4                 | ' 
1c2a4                 | '     ' compute the input delay
1c2a4                 | ' 
1c2a4                 | '     if delay <= 0
1c2a4     01 20 56 F2 | 	cmps	local02, #1 wc
1c2a8     10 00 90 3D |  if_ae	jmp	#LR__2220
1c2ac                 | '         delay := lookupDelay(freq)
1c2ac     0F 13 02 F6 | 	mov	arg01, local01
1c2b0     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1c2b4     FD 20 02 F6 | 	mov	local02, result1
1c2b8     04 00 90 FD | 	jmp	#LR__2221
1c2bc                 | LR__2220
1c2bc                 | '     else
1c2bc                 | '         delay <#= $f ' limit to 15
1c2bc     0F 20 66 F3 | 	fles	local02, #15
1c2c0                 | LR__2221
1c2c0                 | ' 
1c2c0                 | '     ' create our lock
1c2c0                 | ' 
1c2c0                 | '     driverlock := LOCKNEW()  
1c2c0     00 FA 05 F6 | 	mov	result1, #0
1c2c4     04 FA 61 FD | 	locknew	result1
1c2c8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1c2cc     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1c2d0                 | '     if driverlock == -1
1c2d0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1c2d4     FF FF 7F FF 
1c2d8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1c2dc                 | '         return ERR_NO_LOCK
1c2dc     1A FA 65 A6 |  if_e	neg	result1, #26
1c2e0     D0 00 90 AD |  if_e	jmp	#LR__2223
1c2e4                 | ' 
1c2e4                 | '     ' patch in the proper data and HUB addresses to the startup structure
1c2e4                 | ' 
1c2e4                 | '     long[@startupData][0]:=clkfreq
1c2e4     14 1E 06 FB | 	rdlong	local01, #20
1c2e8     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1c2ec     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1c2f0                 | ' '    long[@startupData][1]:=$1000_0000
1c2f0                 | '     long[@startupData][5]:=@deviceData
1c2f0     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1c2f4     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1c2f8     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1c2fc     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1c300     14 14 06 F1 | 	add	arg02, #20
1c304     0A 1F 62 FC | 	wrlong	local01, arg02
1c308                 | '     long[@startupData][6]:=@qosData
1c308     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1c30c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1c310     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1c314     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1c318     18 14 06 F1 | 	add	arg02, #24
1c31c     0A 1F 62 FC | 	wrlong	local01, arg02
1c320                 | '     long[@startupData][7]:=$7FF00
1c320     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1c324     1C 1E 06 F1 | 	add	local01, #28
1c328     FF 03 80 FF 
1c32c     0F 01 6A FC | 	wrlong	##524032, local01
1c330                 | ' 
1c330                 | '     ' setup some default bank and QoS parameter values
1c330                 | ' 
1c330                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1c330     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1c334     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1c338     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1c33c     10 18 66 F0 | 	shl	arg04, #16
1c340     0C 20 66 F0 | 	shl	local02, #12
1c344     10 19 42 F5 | 	or	arg04, local02
1c348     18 18 46 F5 | 	or	arg04, #24
1c34c     0C 15 02 F6 | 	mov	arg02, arg04
1c350     02 16 06 F6 | 	mov	arg03, #2
1c354     A0 00 A0 FD | 	call	#\builtin_longfill_
1c358                 | '     longfill(@qosData, $FFFF0000, 8)
1c358     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1c35c     07 16 06 F6 | 	mov	arg03, #7
1c360     28 16 62 FD | 	setq	arg03
1c364     80 FF FF FF 
1c368     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1c36c                 | ' 
1c36c                 | '     ' get the address of the PSRAM memory driver so we can start it
1c36c                 | ' 
1c36c                 | '     driverAddr:= driver.getDriverAddr()
1c36c                 | '     return @driver_start
1c36c     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1c370     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1c374     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1c378                 | ' 
1c378                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1c378                 | ' 
1c378                 | '     if desiredcog < 0
1c378     00 22 56 F2 | 	cmps	local03, #0 wc
1c37c                 | '         desiredcog := NEWCOG
1c37c     10 22 06 C6 |  if_b	mov	local03, #16
1c380                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1c380     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1c384     11 25 02 F6 | 	mov	local04, local03
1c388     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1c38c     0A 25 F2 FC | 	coginit	local04, arg02 wc
1c390     01 24 66 C6 |  if_b	neg	local04, #1
1c394     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1c398     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1c39c                 | '     repeat until long[@startupData] == 0 
1c39c     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1c3a0                 | LR__2222
1c3a0     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1c3a4     F8 FF 9F 5D |  if_ne	jmp	#LR__2222
1c3a8                 | ' 
1c3a8                 | '     return drivercog
1c3a8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1c3ac     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1c3b0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1c3b4                 | LR__2223
1c3b4     A7 F0 03 F6 | 	mov	ptra, fp
1c3b8     B2 00 A0 FD | 	call	#popregs_
1c3bc                 | _psram_spin2_startx_ret
1c3bc     2D 00 64 FD | 	ret
1c3c0                 | 
1c3c0                 | ' 
1c3c0                 | ' '..............................................................................
1c3c0                 | ' 
1c3c0                 | ' {{
1c3c0                 | ' }}
1c3c0                 | ' PUB stop() : i
1c3c0                 | _psram_spin2_stop
1c3c0     00 00 06 F6 | 	mov	_var01, #0
1c3c4                 | '     if drivercog <> -1
1c3c4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1c3c8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1c3cc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1c3d0     FF FF 7F FF 
1c3d4     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1c3d8     70 00 90 AD |  if_e	jmp	#LR__2233
1c3dc                 | '         cogstop(drivercog) ' a rather brutal stop
1c3dc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1c3e0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1c3e4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1c3e8     03 12 62 FD | 	cogstop	arg01
1c3ec     97 26 48 FB | 	callpa	#(@LR__2232-@LR__2230)>>2,fcache_load_ptr_
1c3f0                 | '         repeat i from 0 to 7
1c3f0                 | LR__2230
1c3f0                 | '             if long[$7FF00][i*3] < 0
1c3f0     00 FB 01 F6 | 	mov	result1, _var01
1c3f4     01 FA 65 F0 | 	shl	result1, #1
1c3f8     00 FB 01 F1 | 	add	result1, _var01
1c3fc     02 FA 65 F0 | 	shl	result1, #2
1c400     FF 03 00 FF 
1c404     00 FB 05 F1 | 	add	result1, ##524032
1c408     FD FA 01 FB | 	rdlong	result1, result1
1c40c     00 FA 55 F2 | 	cmps	result1, #0 wc
1c410     1C 00 90 3D |  if_ae	jmp	#LR__2231
1c414                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1c414     00 FB 01 F6 | 	mov	result1, _var01
1c418     01 FA 65 F0 | 	shl	result1, #1
1c41c     00 FB 01 F1 | 	add	result1, _var01
1c420     02 FA 65 F0 | 	shl	result1, #2
1c424     FF 03 00 FF 
1c428     00 FB 05 F1 | 	add	result1, ##524032
1c42c     FD 20 68 FC | 	wrlong	#16, result1
1c430                 | LR__2231
1c430     01 00 06 F1 | 	add	_var01, #1
1c434     08 00 56 F2 | 	cmps	_var01, #8 wc
1c438     B4 FF 9F CD |  if_b	jmp	#LR__2230
1c43c                 | LR__2232
1c43c                 | '         drivercog := -1
1c43c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1c440     FF FF FF FF 
1c444     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1c448     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1c44c                 | LR__2233
1c44c                 | '     if driverlock <> -1
1c44c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1c450     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1c454     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1c458     FF FF 7F FF 
1c45c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1c460                 | '         LOCKRET(driverlock)
1c460     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1c464     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1c468     05 12 62 5D |  if_ne	lockret	arg01
1c46c                 | '         driverlock := -1
1c46c     FF FF FF 5F 
1c470     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1c474     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1c478     00 FB 01 F6 | 	mov	result1, _var01
1c47c                 | _psram_spin2_stop_ret
1c47c     2D 00 64 FD | 	ret
1c480                 | 
1c480                 | ' 
1c480                 | ' '..............................................................................
1c480                 | ' 
1c480                 | ' {{
1c480                 | ' }}
1c480                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1c480                 | _psram_spin2_read1
1c480                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1c480                 | '     if drivercog == -1 ' driver must be running
1c480     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1c484     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1c488     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1c48c     FF FF 7F FF 
1c490     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1c494                 | '         return ERR_INACTIVE
1c494     0F FA 65 A6 |  if_e	neg	result1, #15
1c498     7C 00 90 AD |  if_e	jmp	#LR__2241
1c49c                 | '     if count == 0 ' don't even bother reading
1c49c     00 16 0E F2 | 	cmp	arg03, #0 wz
1c4a0                 | '         return 0
1c4a0     00 FA 05 A6 |  if_e	mov	result1, #0
1c4a4     70 00 90 AD |  if_e	jmp	#LR__2241
1c4a8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1c4a8     00 FA 05 F6 | 	mov	result1, #0
1c4ac     01 FA 61 FD | 	cogid	result1
1c4b0     FD 00 02 F6 | 	mov	_var01, result1
1c4b4     01 00 66 F0 | 	shl	_var01, #1
1c4b8     FD 00 02 F1 | 	add	_var01, result1
1c4bc     02 00 66 F0 | 	shl	_var01, #2
1c4c0     FF 03 00 FF 
1c4c4     00 03 06 F6 | 	mov	_var02, ##524032
1c4c8     00 03 02 F1 | 	add	_var02, _var01
1c4cc                 | '     if long[mailbox] < 0
1c4cc     01 01 02 FB | 	rdlong	_var01, _var02
1c4d0     00 00 56 F2 | 	cmps	_var01, #0 wc
1c4d4                 | '         return ERR_MAILBOX_BUSY
1c4d4     1C FA 65 C6 |  if_b	neg	result1, #28
1c4d8     3C 00 90 CD |  if_b	jmp	#LR__2241
1c4dc                 | '     long[mailbox][2] := count
1c4dc     08 02 06 F1 | 	add	_var02, #8
1c4e0     01 17 62 FC | 	wrlong	arg03, _var02
1c4e4                 | '     long[mailbox][1] := dstHubAddr
1c4e4     04 02 86 F1 | 	sub	_var02, #4
1c4e8     01 13 62 FC | 	wrlong	arg01, _var02
1c4ec     04 02 86 F1 | 	sub	_var02, #4
1c4f0                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1c4f0     0A 05 02 F6 | 	mov	_var03, arg02
1c4f4     D9 04 06 F4 | 	bitl	_var03, #217
1c4f8     00 00 58 FF 
1c4fc     00 00 06 F6 | 	mov	_var01, ##-1342177280
1c500     02 01 02 F1 | 	add	_var01, _var03
1c504     01 01 62 FC | 	wrlong	_var01, _var02
1c508                 | '     repeat
1c508                 | LR__2240
1c508                 | '         result := long[mailbox]    
1c508     01 05 02 FB | 	rdlong	_var03, _var02
1c50c     00 04 56 F2 | 	cmps	_var03, #0 wc
1c510     F4 FF 9F CD |  if_b	jmp	#LR__2240
1c514                 | '     while result < 0   
1c514                 | '     return -result                       'return success or error
1c514     02 FB 61 F6 | 	neg	result1, _var03
1c518                 | LR__2241
1c518                 | _psram_spin2_read1_ret
1c518     2D 00 64 FD | 	ret
1c51c                 | 
1c51c                 | ' 
1c51c                 | ' '..............................................................................
1c51c                 | ' 
1c51c                 | ' {{
1c51c                 | ' }}
1c51c                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1c51c                 | _psram_spin2_write
1c51c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1c51c                 | '     if drivercog == -1 ' driver must be running
1c51c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1c520     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1c524     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1c528     FF FF 7F FF 
1c52c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1c530                 | '         return ERR_INACTIVE
1c530     0F FA 65 A6 |  if_e	neg	result1, #15
1c534     7C 00 90 AD |  if_e	jmp	#LR__2251
1c538                 | '     if count == 0 ' don't even bother writing
1c538     00 16 0E F2 | 	cmp	arg03, #0 wz
1c53c                 | '         return 0
1c53c     00 FA 05 A6 |  if_e	mov	result1, #0
1c540     70 00 90 AD |  if_e	jmp	#LR__2251
1c544                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1c544     00 FA 05 F6 | 	mov	result1, #0
1c548     01 FA 61 FD | 	cogid	result1
1c54c     FD 00 02 F6 | 	mov	_var01, result1
1c550     01 00 66 F0 | 	shl	_var01, #1
1c554     FD 00 02 F1 | 	add	_var01, result1
1c558     02 00 66 F0 | 	shl	_var01, #2
1c55c     FF 03 00 FF 
1c560     00 03 06 F6 | 	mov	_var02, ##524032
1c564     00 03 02 F1 | 	add	_var02, _var01
1c568                 | '     if long[mailbox] < 0
1c568     01 01 02 FB | 	rdlong	_var01, _var02
1c56c     00 00 56 F2 | 	cmps	_var01, #0 wc
1c570                 | '         return ERR_MAILBOX_BUSY
1c570     1C FA 65 C6 |  if_b	neg	result1, #28
1c574     3C 00 90 CD |  if_b	jmp	#LR__2251
1c578                 | '     long[mailbox][2] := count
1c578     08 02 06 F1 | 	add	_var02, #8
1c57c     01 17 62 FC | 	wrlong	arg03, _var02
1c580                 | '     long[mailbox][1] := srcHubAddr
1c580     04 02 86 F1 | 	sub	_var02, #4
1c584     01 13 62 FC | 	wrlong	arg01, _var02
1c588     04 02 86 F1 | 	sub	_var02, #4
1c58c                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1c58c     0A 05 02 F6 | 	mov	_var03, arg02
1c590     D9 04 06 F4 | 	bitl	_var03, #217
1c594     00 00 78 FF 
1c598     00 00 06 F6 | 	mov	_var01, ##-268435456
1c59c     02 01 02 F1 | 	add	_var01, _var03
1c5a0     01 01 62 FC | 	wrlong	_var01, _var02
1c5a4                 | '     repeat
1c5a4                 | LR__2250
1c5a4                 | '         result := long[mailbox]    
1c5a4     01 05 02 FB | 	rdlong	_var03, _var02
1c5a8     00 04 56 F2 | 	cmps	_var03, #0 wc
1c5ac     F4 FF 9F CD |  if_b	jmp	#LR__2250
1c5b0                 | '     while result < 0   
1c5b0                 | '     return -result                       'return success or error
1c5b0     02 FB 61 F6 | 	neg	result1, _var03
1c5b4                 | LR__2251
1c5b4                 | _psram_spin2_write_ret
1c5b4     2D 00 64 FD | 	ret
1c5b8                 | 
1c5b8                 | ' 
1c5b8                 | ' ' generalized fill
1c5b8                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1c5b8                 | _psram_spin2_fill
1c5b8     09 01 02 F6 | 	mov	_var01, arg01
1c5bc     0A 03 02 F6 | 	mov	_var02, arg02
1c5c0     0B 05 02 F6 | 	mov	_var03, arg03
1c5c4     0D 07 02 F6 | 	mov	_var04, arg05
1c5c8                 | '     case datasize 
1c5c8     01 06 86 F1 | 	sub	_var04, #1
1c5cc     04 06 26 F3 | 	fle	_var04, #4
1c5d0     30 06 62 FD | 	jmprel	_var04
1c5d4                 | LR__2260
1c5d4     10 00 90 FD | 	jmp	#LR__2261
1c5d8     18 00 90 FD | 	jmp	#LR__2262
1c5dc     2C 00 90 FD | 	jmp	#LR__2264
1c5e0     1C 00 90 FD | 	jmp	#LR__2263
1c5e4     24 00 90 FD | 	jmp	#LR__2264
1c5e8                 | LR__2261
1c5e8                 | '         1: req := driver.R_WRITEBYTE
1c5e8     00 00 60 FF 
1c5ec     00 08 06 F6 | 	mov	_var05, ##-1073741824
1c5f0     20 00 90 FD | 	jmp	#LR__2265
1c5f4                 | LR__2262
1c5f4                 | '         2: req := driver.R_WRITEWORD
1c5f4     00 00 68 FF 
1c5f8     00 08 06 F6 | 	mov	_var05, ##-805306368
1c5fc     14 00 90 FD | 	jmp	#LR__2265
1c600                 | LR__2263
1c600                 | '         4: req := driver.R_WRITELONG
1c600     00 00 70 FF 
1c604     00 08 06 F6 | 	mov	_var05, ##-536870912
1c608     08 00 90 FD | 	jmp	#LR__2265
1c60c                 | LR__2264
1c60c                 | '         other : return ERR_INVALID
1c60c     06 FA 65 F6 | 	neg	result1, #6
1c610     94 00 90 FD | 	jmp	#LR__2267
1c614                 | LR__2265
1c614                 | '     if count == 0   ' nothing to do
1c614     00 04 0E F2 | 	cmp	_var03, #0 wz
1c618                 | '         return 0
1c618     00 FA 05 A6 |  if_e	mov	result1, #0
1c61c     88 00 90 AD |  if_e	jmp	#LR__2267
1c620                 | '     if drivercog == -1
1c620     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1c624     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1c628     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1c62c     FF FF 7F FF 
1c630     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1c634                 | '         return ERR_INACTIVE
1c634     0F FA 65 A6 |  if_e	neg	result1, #15
1c638     6C 00 90 AD |  if_e	jmp	#LR__2267
1c63c                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1c63c     00 FA 05 F6 | 	mov	result1, #0
1c640     01 FA 61 FD | 	cogid	result1
1c644     FD 06 02 F6 | 	mov	_var04, result1
1c648     01 06 66 F0 | 	shl	_var04, #1
1c64c     FD 06 02 F1 | 	add	_var04, result1
1c650     02 06 66 F0 | 	shl	_var04, #2
1c654     FF 03 00 FF 
1c658     00 0B 06 F6 | 	mov	_var06, ##524032
1c65c     03 0B 02 F1 | 	add	_var06, _var04
1c660                 | '     if long[mailbox] < 0
1c660     05 07 02 FB | 	rdlong	_var04, _var06
1c664     00 06 56 F2 | 	cmps	_var04, #0 wc
1c668                 | '         return ERR_MAILBOX_BUSY
1c668     1C FA 65 C6 |  if_b	neg	result1, #28
1c66c     38 00 90 CD |  if_b	jmp	#LR__2267
1c670                 | '     long[mailbox][2] := count
1c670     08 0A 06 F1 | 	add	_var06, #8
1c674     05 05 62 FC | 	wrlong	_var03, _var06
1c678                 | '     long[mailbox][1] := pattern
1c678     04 0A 86 F1 | 	sub	_var06, #4
1c67c     05 03 62 FC | 	wrlong	_var02, _var06
1c680     04 0A 86 F1 | 	sub	_var06, #4
1c684                 | '     long[mailbox] := req + (addr & $1ffffff)
1c684     04 0D 02 F6 | 	mov	_var07, _var05
1c688     00 0F 02 F6 | 	mov	_var08, _var01
1c68c     D9 0E 06 F4 | 	bitl	_var08, #217
1c690     07 0D 02 F1 | 	add	_var07, _var08
1c694     05 0D 62 FC | 	wrlong	_var07, _var06
1c698                 | '     repeat
1c698                 | LR__2266
1c698                 | '         r := long[mailbox]
1c698     05 0F 02 FB | 	rdlong	_var08, _var06
1c69c     00 0E 56 F2 | 	cmps	_var08, #0 wc
1c6a0     F4 FF 9F CD |  if_b	jmp	#LR__2266
1c6a4                 | '     while r < 0
1c6a4                 | '     return -r                  ' return 0 for success or negated error code
1c6a4     07 FB 61 F6 | 	neg	result1, _var08
1c6a8                 | LR__2267
1c6a8                 | _psram_spin2_fill_ret
1c6a8     2D 00 64 FD | 	ret
1c6ac                 | 
1c6ac                 | ' 
1c6ac                 | ' '..............................................................................
1c6ac                 | ' 
1c6ac                 | ' {{
1c6ac                 | ' }}
1c6ac                 | ' PUB setQos(cog, qos) : result | mailbox
1c6ac                 | _psram_spin2_setQos
1c6ac     09 01 02 F6 | 	mov	_var01, arg01
1c6b0                 | '     if drivercog == -1 ' driver must be running
1c6b0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1c6b4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1c6b8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1c6bc     FF FF 7F FF 
1c6c0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1c6c4                 | '         return ERR_INACTIVE
1c6c4     0F FA 65 A6 |  if_e	neg	result1, #15
1c6c8     9C 00 90 AD |  if_e	jmp	#LR__2274
1c6cc                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1c6cc     00 00 56 F2 | 	cmps	_var01, #0 wc
1c6d0     08 00 90 CD |  if_b	jmp	#LR__2270
1c6d4     08 00 56 F2 | 	cmps	_var01, #8 wc
1c6d8     08 00 90 CD |  if_b	jmp	#LR__2271
1c6dc                 | LR__2270
1c6dc                 | '         return ERR_INVALID
1c6dc     06 FA 65 F6 | 	neg	result1, #6
1c6e0     84 00 90 FD | 	jmp	#LR__2274
1c6e4                 | LR__2271
1c6e4                 | '     long[@qosData][cog] := qos & !$1ff
1c6e4     FF 15 26 F5 | 	andn	arg02, #511
1c6e8     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1c6ec     02 00 66 F0 | 	shl	_var01, #2
1c6f0     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1c6f4     00 15 62 FC | 	wrlong	arg02, _var01
1c6f8                 | '     mailbox := $7FF00 + drivercog*12
1c6f8     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1c6fc     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1c700     02 07 02 F6 | 	mov	_var04, _var03
1c704     01 06 66 F0 | 	shl	_var04, #1
1c708     02 07 02 F1 | 	add	_var04, _var03
1c70c     02 06 66 F0 | 	shl	_var04, #2
1c710     FF 03 00 FF 
1c714     00 09 06 F6 | 	mov	_var05, ##524032
1c718     03 09 02 F1 | 	add	_var05, _var04
1c71c                 | '     repeat until LOCKTRY(driverlock)
1c71c     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1c720                 | LR__2272
1c720     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1c724     06 12 72 FD | 	locktry	arg01 wc
1c728     F4 FF 9F 3D |  if_ae	jmp	#LR__2272
1c72c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1c730                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1c730     00 06 06 F6 | 	mov	_var04, #0
1c734     01 06 62 FD | 	cogid	_var04
1c738     00 00 78 FF 
1c73c     00 02 06 F6 | 	mov	_var02, ##-268435456
1c740     03 03 02 F1 | 	add	_var02, _var04
1c744     04 03 62 FC | 	wrlong	_var02, _var05
1c748                 | '     repeat while long[mailbox] < 0
1c748                 | LR__2273
1c748     04 03 02 FB | 	rdlong	_var02, _var05
1c74c     00 02 56 F2 | 	cmps	_var02, #0 wc
1c750     F4 FF 9F CD |  if_b	jmp	#LR__2273
1c754                 | '     LOCKREL(driverlock)
1c754     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1c758     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1c75c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1c760     07 12 72 FD | 	lockrel	arg01 wc
1c764     00 FA 05 F6 | 	mov	result1, #0
1c768                 | LR__2274
1c768                 | _psram_spin2_setQos_ret
1c768     2D 00 64 FD | 	ret
1c76c                 | 
1c76c                 | ' 
1c76c                 | ' '..............................................................................
1c76c                 | ' 
1c76c                 | ' {{
1c76c                 | ' }}
1c76c                 | ' PRI lookupDelay(freq) : delay | profile
1c76c                 | _psram_spin2_lookupDelay
1c76c                 | '     profile := @delayTable
1c76c     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1c770     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1c774                 | '     delay := long[profile][0]
1c774     00 03 02 FB | 	rdlong	_var02, _var01
1c778                 | '     repeat while long[profile][1] 
1c778     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1c77c     97 16 48 FB | 	callpa	#(@LR__2281-@LR__2280)>>2,fcache_load_ptr_
1c780                 | LR__2280
1c780     04 00 06 F1 | 	add	_var01, #4
1c784     00 FB 09 FB | 	rdlong	result1, _var01 wz
1c788     04 00 86 F1 | 	sub	_var01, #4
1c78c     1C 00 90 AD |  if_e	jmp	#LR__2282
1c790                 | '         if freq +< long[profile][1] 
1c790     04 00 06 F1 | 	add	_var01, #4
1c794     00 FB 01 FB | 	rdlong	result1, _var01
1c798     04 00 86 F1 | 	sub	_var01, #4
1c79c     FD 12 12 F2 | 	cmp	arg01, result1 wc
1c7a0                 | '             quit
1c7a0                 | '         profile += 4
1c7a0     04 00 06 31 |  if_ae	add	_var01, #4
1c7a4                 | '         delay++
1c7a4     01 02 06 31 |  if_ae	add	_var02, #1
1c7a8     D4 FF 9F 3D |  if_ae	jmp	#LR__2280
1c7ac                 | LR__2281
1c7ac                 | LR__2282
1c7ac     01 FB 01 F6 | 	mov	result1, _var02
1c7b0                 | _psram_spin2_lookupDelay_ret
1c7b0     2D 00 64 FD | 	ret
1c7b4                 | 
1c7b4                 | ' 
1c7b4                 | ' PUB start() : r
1c7b4                 | _usbnew_spin2_start
1c7b4     00 00 06 F6 | 	mov	_var01, #0
1c7b8                 | '   ifnot driver_cog
1c7b8     15 00 00 FF 
1c7bc     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1c7c0     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1c7c4     15 00 00 FF 
1c7c8     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1c7cc     38 00 90 5D |  if_ne	jmp	#LR__2290
1c7d0                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1c7d0     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1c7d4     10 00 06 F6 | 	mov	_var01, #16
1c7d8     00 16 06 F6 | 	mov	arg03, #0
1c7dc     28 16 62 FD | 	setq	arg03
1c7e0     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1c7e4     01 00 66 C6 |  if_b	neg	_var01, #1
1c7e8                 | '     if r >= 0
1c7e8     00 00 56 F2 | 	cmps	_var01, #0 wc
1c7ec                 | '       driver_cog := r+1
1c7ec     00 03 02 36 |  if_ae	mov	_var02, _var01
1c7f0     01 02 06 31 |  if_ae	add	_var02, #1
1c7f4     15 00 00 3F 
1c7f8     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1c7fc     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1c800     15 00 00 3F 
1c804     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1c808                 | LR__2290
1c808     00 FB 01 F6 | 	mov	result1, _var01
1c80c                 | _usbnew_spin2_start_ret
1c80c     2D 00 64 FD | 	ret
1c810                 | 
1c810                 | '     '' (Always enabled)
1c810                 | ' 
1c810                 | ' '' Get current pressed state of a keyboard key
1c810                 | ' PUB keystate(key) : r | buf[2],tmp
1c810                 | _usbnew_spin2_keystate
1c810     00 04 06 F6 | 	mov	_var03, #0
1c814                 | '   if key >= $E0 && key < $E8
1c814     E0 12 56 F2 | 	cmps	arg01, #224 wc
1c818     34 00 90 CD |  if_b	jmp	#LR__2300
1c81c     E8 12 56 F2 | 	cmps	arg01, #232 wc
1c820     2C 00 90 3D |  if_ae	jmp	#LR__2300
1c824                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
1c824     00 FA 05 F6 | 	mov	result1, #0
1c828     13 00 00 FF 
1c82c     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1c830     09 07 02 F6 | 	mov	_var04, arg01
1c834     E0 06 86 F1 | 	sub	_var04, #224
1c838     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
1c83c     03 09 4A F0 | 	shr	_var05, _var04 wz
1c840     13 00 00 FF 
1c844     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1c848     01 FA 65 56 |  if_ne	neg	result1, #1
1c84c     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
1c850                 | LR__2300
1c850                 | '   else
1c850                 | '     '' Do this in inline ASM to ensure atomicity
1c850                 | '     tmp := @hkbd_report
1c850     13 00 00 FF 
1c854     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1c858     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
1c85c                 | '     org
1c85c     13 00 00 FF 
1c860     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1c864     97 1E 48 FB | 	callpa	#(@LR__2302-@LR__2301)>>2,fcache_load_ptr_
1c868                 | LR__2301
1c868 000             | 	org	0
1c868 000 28 02 64 FD | 	setq	#1
1c86c 001 04 01 02 FB | 	rdlong	_var01, _var05
1c870 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
1c874 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
1c878 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
1c87c 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1c880 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
1c884 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1c888 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
1c88c 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1c890 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
1c894 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1c898 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
1c89c 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1c8a0 00e 01 04 66 A6 |  if_e	neg	_var03, #1
1c8a4 00f             | LR__2302
1c8a4                 | 	orgh
1c8a4     02 FB 01 F6 | 	mov	result1, _var03
1c8a8                 | _usbnew_spin2_keystate_ret
1c8a8     2D 00 64 FD | 	ret
1c8ac                 | 
1c8ac                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1c8ac                 | ' 
1c8ac                 | ' '' Return key event from buffer if there is one
1c8ac                 | ' PUB get_key() : r | tail
1c8ac                 | _usbnew_spin2_get_key
1c8ac                 | '   tail := keyq_tail
1c8ac     0F 00 00 FF 
1c8b0     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1c8b4     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1c8b8                 | '   if keyq_head == tail
1c8b8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1c8bc     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1c8c0     0F 00 00 FF 
1c8c4     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1c8c8     00 03 0A F2 | 	cmp	_var02, _var01 wz
1c8cc                 | '     return 0 ' No event
1c8cc     00 FA 05 A6 |  if_e	mov	result1, #0
1c8d0     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1c8d4                 | '   r := keyq_data[tail]
1c8d4     00 03 02 F6 | 	mov	_var02, _var01
1c8d8     02 02 66 F0 | 	shl	_var02, #2
1c8dc     0F 00 00 FF 
1c8e0     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1c8e4     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1c8e8     01 FB 01 FB | 	rdlong	result1, _var02
1c8ec                 | '   if ++tail == KEYQUEUE_SIZE
1c8ec     01 00 06 F1 | 	add	_var01, #1
1c8f0     80 00 0E F2 | 	cmp	_var01, #128 wz
1c8f4                 | '     tail := 0
1c8f4     00 00 06 A6 |  if_e	mov	_var01, #0
1c8f8                 | '   keyq_tail := tail
1c8f8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1c8fc     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1c900     0F 00 00 FF 
1c904     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
1c908                 | _usbnew_spin2_get_key_ret
1c908     2D 00 64 FD | 	ret
1c90c                 | 
1c90c                 | ' 
1c90c                 | ' '' Emulate mouse movement
1c90c                 | ' PUB mouse_move(x,y)
1c90c                 | _usbnew_spin2_mouse_move
1c90c     02 4A 05 F6 | 	mov	COUNT_, #2
1c910     A8 00 A0 FD | 	call	#pushregs_
1c914     09 1F 02 F6 | 	mov	local01, arg01
1c918     0A 21 02 F6 | 	mov	local02, arg02
1c91c                 | '   mouse_lock := 1
1c91c     14 00 00 FF 
1c920     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1c924     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
1c928     14 00 00 FF 
1c92c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1c930                 | '   waitus(2) ' hope driver is now done
1c930     02 12 06 F6 | 	mov	arg01, #2
1c934     AC 0A B0 FD | 	call	#__system___waitus
1c938                 | '   mouse_xacc := x
1c938     14 00 00 FF 
1c93c     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1c940     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1c944                 | '   mouse_yacc := y
1c944     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1c948     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1c94c                 | '   if mouse_outptr
1c94c     04 00 00 FF 
1c950     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1c954     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
1c958     0F 00 00 FF 
1c95c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1c960     24 00 90 AD |  if_e	jmp	#LR__2310
1c964                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1c964     10 20 66 F0 | 	shl	local02, #16
1c968     0F 1F 32 F9 | 	getword	local01, local01, #0
1c96c     0F 21 42 F5 | 	or	local02, local01
1c970     0F 00 00 FF 
1c974     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1c978     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1c97c     0F 00 00 FF 
1c980     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1c984     0F 21 62 FC | 	wrlong	local02, local01
1c988                 | LR__2310
1c988                 | '   mouse_lock := 0
1c988     14 00 00 FF 
1c98c     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1c990     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1c994     14 00 00 FF 
1c998     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1c99c     A7 F0 03 F6 | 	mov	ptra, fp
1c9a0     B2 00 A0 FD | 	call	#popregs_
1c9a4                 | _usbnew_spin2_mouse_move_ret
1c9a4     2D 00 64 FD | 	ret
1c9a8                 | 
1c9a8                 | '     '' Set HAVE_HIDPAD to enable.
1c9a8                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
1c9a8                 | ' 
1c9a8                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
1c9a8                 | ' PUB hidpad_id(dev) : r
1c9a8                 | _usbnew_spin2_hidpad_id
1c9a8                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
1c9a8     13 00 00 FF 
1c9ac     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1c9b0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1c9b4     09 01 02 F6 | 	mov	_var01, arg01
1c9b8     03 00 66 F0 | 	shl	_var01, #3
1c9bc     09 01 82 F1 | 	sub	_var01, arg01
1c9c0     02 00 66 F0 | 	shl	_var01, #2
1c9c4     00 FB 01 F1 | 	add	result1, _var01
1c9c8     FD FA 01 FB | 	rdlong	result1, result1
1c9cc     13 00 00 FF 
1c9d0     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1c9d4                 | _usbnew_spin2_hidpad_id_ret
1c9d4     2D 00 64 FD | 	ret
1c9d8                 | 
1c9d8                 | ' 
1c9d8                 | ' '' Get all button states for a device
1c9d8                 | ' PUB hidpad_buttons(dev) : r 
1c9d8                 | _usbnew_spin2_hidpad_buttons
1c9d8                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
1c9d8     13 00 00 FF 
1c9dc     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1c9e0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1c9e4     09 01 02 F6 | 	mov	_var01, arg01
1c9e8     03 00 66 F0 | 	shl	_var01, #3
1c9ec     09 01 82 F1 | 	sub	_var01, arg01
1c9f0     02 00 66 F0 | 	shl	_var01, #2
1c9f4     00 FB 01 F1 | 	add	result1, _var01
1c9f8     14 FA 05 F1 | 	add	result1, #20
1c9fc     FD FA 01 FB | 	rdlong	result1, result1
1ca00     13 00 00 FF 
1ca04     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1ca08                 | _usbnew_spin2_hidpad_buttons_ret
1ca08     2D 00 64 FD | 	ret
1ca0c                 | 
1ca0c                 | ' 
1ca0c                 | ' '' Get state of an axis (normalized between -32768 and 32767)
1ca0c                 | ' PUB hidpad_axis(dev,axnum) : r
1ca0c                 | _usbnew_spin2_hidpad_axis
1ca0c                 | '   if axnum +>= 6
1ca0c     06 14 16 F2 | 	cmp	arg02, #6 wc
1ca10                 | '     return 0
1ca10     00 FA 05 36 |  if_ae	mov	result1, #0
1ca14     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
1ca18                 | '   else 
1ca18                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
1ca18     13 00 00 FF 
1ca1c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1ca20     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1ca24     09 01 02 F6 | 	mov	_var01, arg01
1ca28     03 00 66 F0 | 	shl	_var01, #3
1ca2c     09 01 82 F1 | 	sub	_var01, arg01
1ca30     02 00 66 F0 | 	shl	_var01, #2
1ca34     00 FB 01 F1 | 	add	result1, _var01
1ca38     04 00 06 F6 | 	mov	_var01, #4
1ca3c     0A 01 02 F1 | 	add	_var01, arg02
1ca40     01 00 66 F0 | 	shl	_var01, #1
1ca44     FD 00 02 F1 | 	add	_var01, result1
1ca48     00 FB E1 FA | 	rdword	result1, _var01
1ca4c     0F FA 65 F7 | 	signx	result1, #15
1ca50     13 00 00 FF 
1ca54     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1ca58                 | _usbnew_spin2_hidpad_axis_ret
1ca58     2D 00 64 FD | 	ret
1ca5c                 | 
1ca5c                 | ' 
1ca5c                 | ' 
1ca5c                 | ' '--------------------------------------------------------------
1ca5c                 | ' '---------- Init the variables, start the cog. ----------------
1ca5c                 | ' '--------------------------------------------------------------
1ca5c                 | ' 
1ca5c                 | ' pub start(mbox,scope,cache) :cog,base | iii
1ca5c                 | _audio096_spin2_start
1ca5c     04 4A 05 F6 | 	mov	COUNT_, #4
1ca60     A8 00 A0 FD | 	call	#pushregs_
1ca64     09 1F 02 F6 | 	mov	local01, arg01
1ca68                 | ' 
1ca68                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
1ca68                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
1ca68                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
1ca68                 | ' 
1ca68                 | ' mailboxaddr:=mbox 
1ca68     F2 1E 62 FC | 	wrlong	local01, objptr
1ca6c                 | ' scope_ptr:=scope
1ca6c     04 E4 05 F1 | 	add	objptr, #4
1ca70     F2 14 62 FC | 	wrlong	arg02, objptr
1ca74                 | ' cache_ptr:=cache
1ca74     04 E4 05 F1 | 	add	objptr, #4
1ca78     F2 16 62 FC | 	wrlong	arg03, objptr
1ca7c                 | ' base:=@channel1[0]
1ca7c     04 E4 05 F1 | 	add	objptr, #4
1ca80     F2 20 02 F6 | 	mov	local02, objptr
1ca84                 | ' 
1ca84                 | ' repeat iii from 0 to 7
1ca84     00 22 06 F6 | 	mov	local03, #0
1ca88     02 00 00 FF 
1ca8c     94 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1172
1ca90     0C E4 85 F1 | 	sub	objptr, #12
1ca94     97 B0 48 FB | 	callpa	#(@LR__2321-@LR__2320)>>2,fcache_load_ptr_
1ca98                 | LR__2320
1ca98                 | '   long[base+64*iii]:=0
1ca98     10 1F 02 F6 | 	mov	local01, local02
1ca9c     11 FD 01 F6 | 	mov	result2, local03
1caa0     06 FC 65 F0 | 	shl	result2, #6
1caa4     FE 1E 02 F1 | 	add	local01, result2
1caa8     0F 01 68 FC | 	wrlong	#0, local01
1caac                 | '   long[base+64*iii+4]:=0
1caac     10 1F 02 F6 | 	mov	local01, local02
1cab0     11 FD 01 F6 | 	mov	result2, local03
1cab4     06 FC 65 F0 | 	shl	result2, #6
1cab8     FE 1E 02 F1 | 	add	local01, result2
1cabc     04 1E 06 F1 | 	add	local01, #4
1cac0     0F 01 68 FC | 	wrlong	#0, local01
1cac4                 | '   long[base+64*iii+12]:=0
1cac4     10 25 02 F6 | 	mov	local04, local02
1cac8     11 1F 02 F6 | 	mov	local01, local03
1cacc     06 1E 66 F0 | 	shl	local01, #6
1cad0     0F 25 02 F1 | 	add	local04, local01
1cad4     0C 24 06 F1 | 	add	local04, #12
1cad8     12 01 68 FC | 	wrlong	#0, local04
1cadc                 | '   long[base+64*iii+16]:=2 
1cadc     10 25 02 F6 | 	mov	local04, local02
1cae0     11 1F 02 F6 | 	mov	local01, local03
1cae4     06 1E 66 F0 | 	shl	local01, #6
1cae8     0F 25 02 F1 | 	add	local04, local01
1caec     10 24 06 F1 | 	add	local04, #16
1caf0     12 05 68 FC | 	wrlong	#2, local04
1caf4                 | '   word[base+64*iii+20]:=0
1caf4     10 25 02 F6 | 	mov	local04, local02
1caf8     11 1F 02 F6 | 	mov	local01, local03
1cafc     06 1E 66 F0 | 	shl	local01, #6
1cb00     0F 25 02 F1 | 	add	local04, local01
1cb04     14 24 06 F1 | 	add	local04, #20
1cb08     12 01 58 FC | 	wrword	#0, local04
1cb0c                 | '   word[base+64*iii+22]:=8192
1cb0c     10 25 02 F6 | 	mov	local04, local02
1cb10     11 1F 02 F6 | 	mov	local01, local03
1cb14     06 1E 66 F0 | 	shl	local01, #6
1cb18     0F 25 02 F1 | 	add	local04, local01
1cb1c     16 24 06 F1 | 	add	local04, #22
1cb20     10 00 80 FF 
1cb24     12 01 58 FC | 	wrword	##8192, local04
1cb28                 | '   word[base+64*iii+24]:=4000+2*iii
1cb28     11 25 02 F6 | 	mov	local04, local03
1cb2c     01 24 66 F0 | 	shl	local04, #1
1cb30     07 00 00 FF 
1cb34     A0 1F 06 F6 | 	mov	local01, ##4000
1cb38     12 1F 02 F1 | 	add	local01, local04
1cb3c     10 25 02 F6 | 	mov	local04, local02
1cb40     11 FD 01 F6 | 	mov	result2, local03
1cb44     06 FC 65 F0 | 	shl	result2, #6
1cb48     FE 24 02 F1 | 	add	local04, result2
1cb4c     18 24 06 F1 | 	add	local04, #24
1cb50     12 1F 52 FC | 	wrword	local01, local04
1cb54                 | '   word[base+64*iii+26]:=2
1cb54     10 25 02 F6 | 	mov	local04, local02
1cb58     11 1F 02 F6 | 	mov	local01, local03
1cb5c     06 1E 66 F0 | 	shl	local01, #6
1cb60     0F 25 02 F1 | 	add	local04, local01
1cb64     1A 24 06 F1 | 	add	local04, #26
1cb68     12 05 58 FC | 	wrword	#2, local04
1cb6c                 | '   long [base+64*iii+8]:=@null | $C0000000
1cb6c     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
1cb70     3E 1E 26 F4 | 	bith	local01, #62
1cb74     10 25 02 F6 | 	mov	local04, local02
1cb78     11 17 02 F6 | 	mov	arg03, local03
1cb7c     06 16 66 F0 | 	shl	arg03, #6
1cb80     0B 25 02 F1 | 	add	local04, arg03
1cb84     08 24 06 F1 | 	add	local04, #8
1cb88     12 1F 62 FC | 	wrlong	local01, local04
1cb8c                 | '   long[base+64*iii+32]:=0
1cb8c     10 25 02 F6 | 	mov	local04, local02
1cb90     11 1F 02 F6 | 	mov	local01, local03
1cb94     06 1E 66 F0 | 	shl	local01, #6
1cb98     0F 25 02 F1 | 	add	local04, local01
1cb9c     20 24 06 F1 | 	add	local04, #32
1cba0     12 01 68 FC | 	wrlong	#0, local04
1cba4                 | '   long[base+64*iii+36]:=0
1cba4     10 25 02 F6 | 	mov	local04, local02
1cba8     11 1F 02 F6 | 	mov	local01, local03
1cbac     06 1E 66 F0 | 	shl	local01, #6
1cbb0     0F 25 02 F1 | 	add	local04, local01
1cbb4     24 24 06 F1 | 	add	local04, #36
1cbb8     12 01 68 FC | 	wrlong	#0, local04
1cbbc                 | '   long[base+64*iii+40]:=0
1cbbc     10 25 02 F6 | 	mov	local04, local02
1cbc0     11 1F 02 F6 | 	mov	local01, local03
1cbc4     06 1E 66 F0 | 	shl	local01, #6
1cbc8     0F 25 02 F1 | 	add	local04, local01
1cbcc     28 24 06 F1 | 	add	local04, #40
1cbd0     12 01 68 FC | 	wrlong	#0, local04
1cbd4                 | '   long[base+64*iii+44]:=0
1cbd4     10 25 02 F6 | 	mov	local04, local02
1cbd8     11 1F 02 F6 | 	mov	local01, local03
1cbdc     06 1E 66 F0 | 	shl	local01, #6
1cbe0     0F 25 02 F1 | 	add	local04, local01
1cbe4     2C 24 06 F1 | 	add	local04, #44
1cbe8     12 01 68 FC | 	wrlong	#0, local04
1cbec     01 22 06 F1 | 	add	local03, #1
1cbf0     08 22 56 F2 | 	cmps	local03, #8 wc
1cbf4     A0 FE 9F CD |  if_b	jmp	#LR__2320
1cbf8                 | LR__2321
1cbf8     02 00 00 FF 
1cbfc     94 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1172
1cc00                 | '   
1cc00                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1cc00     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
1cc04     F2 16 02 F6 | 	mov	arg03, objptr
1cc08     10 24 06 F6 | 	mov	local04, #16
1cc0c     28 16 62 FD | 	setq	arg03
1cc10     0A 25 F2 FC | 	coginit	local04, arg02 wc
1cc14     01 24 66 C6 |  if_b	neg	local04, #1
1cc18                 | ' waitms(100)
1cc18     64 12 06 F6 | 	mov	arg01, #100
1cc1c     58 07 B0 FD | 	call	#__system___waitms
1cc20                 | ' return cog,base
1cc20     10 FD 01 F6 | 	mov	result2, local02
1cc24     12 FB 01 F6 | 	mov	result1, local04
1cc28     A7 F0 03 F6 | 	mov	ptra, fp
1cc2c     B2 00 A0 FD | 	call	#popregs_
1cc30                 | _audio096_spin2_start_ret
1cc30     2D 00 64 FD | 	ret
1cc34                 | 
1cc34                 | ' 
1cc34                 | ' ' a simple play procedure to not poke everything. 
1cc34                 | ' 
1cc34                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1cc34                 | _audio096_spin2_play
1cc34     0C E4 05 F1 | 	add	objptr, #12
1cc38     F2 00 02 F6 | 	mov	_var01, objptr
1cc3c     06 12 66 F0 | 	shl	arg01, #6
1cc40     09 01 02 F1 | 	add	_var01, arg01
1cc44     00 13 02 F6 | 	mov	arg01, _var01
1cc48     0C 12 06 F1 | 	add	arg01, #12
1cc4c     09 1B 62 FC | 	wrlong	arg05, arg01
1cc50     00 1C 56 F2 | 	cmps	arg06, #0 wc
1cc54     00 13 02 36 |  if_ae	mov	arg01, _var01
1cc58     10 12 06 31 |  if_ae	add	arg01, #16
1cc5c     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
1cc60     02 1A 06 C1 |  if_b	add	arg05, #2
1cc64     00 13 02 C6 |  if_b	mov	arg01, _var01
1cc68     10 12 06 C1 |  if_b	add	arg01, #16
1cc6c     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1cc70     0B 13 52 F6 | 	abs	arg01, arg03 wc
1cc74     0B 0A 80 FF 
1cc78     09 6D 18 FD | 	qdiv	##1316406, arg01
1cc7c                 | ' 
1cc7c                 | ' base2:=@channel1[0]+64*channel
1cc7c                 | ' 
1cc7c                 | ' 
1cc7c                 | ' long[base2+12]:= len
1cc7c                 | ' if loop >=0 
1cc7c                 | '   long[base2+16]:= loop
1cc7c     0C E4 85 F1 | 	sub	objptr, #12
1cc80                 | ' else
1cc80                 | '   long[base2+16]:= len+2
1cc80                 | ' word[base2+20]:=vol
1cc80     00 13 02 F6 | 	mov	arg01, _var01
1cc84     14 12 06 F1 | 	add	arg01, #20
1cc88     09 19 52 FC | 	wrword	arg04, arg01
1cc8c                 | ' word[base2+24]:= 1316406/splfreq 
1cc8c     00 19 02 F6 | 	mov	arg04, _var01
1cc90     18 18 06 F1 | 	add	arg04, #24
1cc94                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1cc94                 | ' long[base2+28]:=$40000000
1cc94                 | ' long[base2+8]:=sample+$C0000000 
1cc94     00 00 60 FF 
1cc98     00 14 06 F1 | 	add	arg02, ##-1073741824
1cc9c     18 12 62 FD | 	getqx	arg01
1cca0     09 13 82 F6 | 	negc	arg01, arg01
1cca4     0C 13 52 FC | 	wrword	arg01, arg04
1cca8     00 13 02 F6 | 	mov	arg01, _var01
1ccac     1A 12 06 F1 | 	add	arg01, #26
1ccb0     09 01 5A FC | 	wrword	#256, arg01
1ccb4     00 13 02 F6 | 	mov	arg01, _var01
1ccb8     1C 12 06 F1 | 	add	arg01, #28
1ccbc     00 00 A0 FF 
1ccc0     09 01 68 FC | 	wrlong	##1073741824, arg01
1ccc4     08 00 06 F1 | 	add	_var01, #8
1ccc8     00 15 62 FC | 	wrlong	arg02, _var01
1cccc                 | _audio096_spin2_play_ret
1cccc     2D 00 64 FD | 	ret
1ccd0                 | 
1ccd0                 | ' 
1ccd0                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
1ccd0                 | _audio096_spin2_play8
1ccd0                 | ' 
1ccd0                 | ' base2:=@channel1[0]+64*channel
1ccd0     0C E4 05 F1 | 	add	objptr, #12
1ccd4     F2 00 02 F6 | 	mov	_var01, objptr
1ccd8     06 12 66 F0 | 	shl	arg01, #6
1ccdc     09 01 02 F1 | 	add	_var01, arg01
1cce0                 | ' long[base2]:=0
1cce0     00 01 68 FC | 	wrlong	#0, _var01
1cce4                 | ' long[base2+8]:=sample+$40000000 
1cce4     00 00 20 FF 
1cce8     00 14 06 F1 | 	add	arg02, ##1073741824
1ccec     00 13 02 F6 | 	mov	arg01, _var01
1ccf0     08 12 06 F1 | 	add	arg01, #8
1ccf4     09 15 62 FC | 	wrlong	arg02, arg01
1ccf8                 | ' if loop>=0
1ccf8     00 1C 56 F2 | 	cmps	arg06, #0 wc
1ccfc     0C E4 85 F1 | 	sub	objptr, #12
1cd00     1C 00 90 CD |  if_b	jmp	#LR__2330
1cd04                 | '   long[base2+12]:=loop
1cd04     00 15 02 F6 | 	mov	arg02, _var01
1cd08     0C 14 06 F1 | 	add	arg02, #12
1cd0c     0A 1D 62 FC | 	wrlong	arg06, arg02
1cd10                 | '   long[base2+16]:= len
1cd10     00 1D 02 F6 | 	mov	arg06, _var01
1cd14     10 1C 06 F1 | 	add	arg06, #16
1cd18     0E 1B 62 FC | 	wrlong	arg05, arg06
1cd1c     1C 00 90 FD | 	jmp	#LR__2331
1cd20                 | LR__2330
1cd20                 | ' else
1cd20                 | '   long[base2+12]:= len
1cd20     00 1D 02 F6 | 	mov	arg06, _var01
1cd24     0C 1C 06 F1 | 	add	arg06, #12
1cd28     0E 1B 62 FC | 	wrlong	arg05, arg06
1cd2c                 | '   long[base2+16]:= len+1
1cd2c     01 1A 06 F1 | 	add	arg05, #1
1cd30     00 13 02 F6 | 	mov	arg01, _var01
1cd34     10 12 06 F1 | 	add	arg01, #16
1cd38     09 1B 62 FC | 	wrlong	arg05, arg01
1cd3c                 | LR__2331
1cd3c     0B 17 52 F6 | 	abs	arg03, arg03 wc
1cd40     0B 0A 80 FF 
1cd44     0B 6D 18 FD | 	qdiv	##1316406, arg03
1cd48                 | ' word[base2+20]:=vol
1cd48     00 17 02 F6 | 	mov	arg03, _var01
1cd4c     14 16 06 F1 | 	add	arg03, #20
1cd50     0B 19 52 FC | 	wrword	arg04, arg03
1cd54                 | ' word[base2+24]:= 1316406 /splfreq 
1cd54     00 13 02 F6 | 	mov	arg01, _var01
1cd58     18 12 06 F1 | 	add	arg01, #24
1cd5c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1cd5c                 | ' long[base2+28]:=$40000000
1cd5c     18 18 62 FD | 	getqx	arg04
1cd60     0C 19 82 F6 | 	negc	arg04, arg04
1cd64     09 19 52 FC | 	wrword	arg04, arg01
1cd68     00 19 02 F6 | 	mov	arg04, _var01
1cd6c     1A 18 06 F1 | 	add	arg04, #26
1cd70     0C 01 5A FC | 	wrword	#256, arg04
1cd74     1C 00 06 F1 | 	add	_var01, #28
1cd78     00 00 A0 FF 
1cd7c     00 01 68 FC | 	wrlong	##1073741824, _var01
1cd80                 | _audio096_spin2_play8_ret
1cd80     2D 00 64 FD | 	ret
1cd84                 | 
1cd84                 | ' 
1cd84                 | '     
1cd84                 | ' pub stop(channel) 'silence it
1cd84                 | _audio096_spin2_stop
1cd84                 | ' 
1cd84                 | ' word[@channel1[0]+64*channel+20]:=0
1cd84     0C E4 05 F1 | 	add	objptr, #12
1cd88     F2 00 02 F6 | 	mov	_var01, objptr
1cd8c     09 03 02 F6 | 	mov	_var02, arg01
1cd90     06 02 66 F0 | 	shl	_var02, #6
1cd94     01 01 02 F1 | 	add	_var01, _var02
1cd98     14 00 06 F1 | 	add	_var01, #20
1cd9c     00 01 58 FC | 	wrword	#0, _var01
1cda0                 | ' word[@channel1[0]+64*channel+20]:=0
1cda0     F2 00 02 F6 | 	mov	_var01, objptr
1cda4     06 12 66 F0 | 	shl	arg01, #6
1cda8     09 01 02 F1 | 	add	_var01, arg01
1cdac     14 00 06 F1 | 	add	_var01, #20
1cdb0     00 01 58 FC | 	wrword	#0, _var01
1cdb4     0C E4 85 F1 | 	sub	objptr, #12
1cdb8                 | _audio096_spin2_stop_ret
1cdb8     2D 00 64 FD | 	ret
1cdbc                 | hubexit
1cdbc     81 00 80 FD | 	jmp	#cogexit
1cdc0                 | 
1cdc0                 | __system___setbaud
1cdc0     14 64 06 FB | 	rdlong	muldiva_, #20
1cdc4     09 67 02 F6 | 	mov	muldivb_, arg01
1cdc8     BA 00 A0 FD | 	call	#divide_
1cdcc     97 06 48 FB | 	callpa	#(@LR__2341-@LR__2340)>>2,fcache_load_ptr_
1cdd0                 | LR__2340
1cdd0     3E FA 9D FA | 	rdpin	result1, #62 wc
1cdd4     FE FC A1 F1 | 	subx	result2, result2
1cdd8     F4 FF 9F CD |  if_b	jmp	#LR__2340
1cddc                 | LR__2341
1cddc     40 7C 64 FD | 	dirl	#62
1cde0     40 7E 64 FD | 	dirl	#63
1cde4     F3 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1cde8     10 66 66 F0 | 	shl	muldivb_, #16
1cdec     07 14 06 F6 | 	mov	arg02, #7
1cdf0     33 15 02 F1 | 	add	arg02, muldivb_
1cdf4     3E F8 0C FC | 	wrpin	#124, #62
1cdf8     3E 14 16 FC | 	wxpin	arg02, #62
1cdfc     3F 7C 0C FC | 	wrpin	#62, #63
1ce00     14 14 06 F1 | 	add	arg02, #20
1ce04     3F 14 16 FC | 	wxpin	arg02, #63
1ce08     41 7C 64 FD | 	dirh	#62
1ce0c     41 7E 64 FD | 	dirh	#63
1ce10                 | __system___setbaud_ret
1ce10     2D 00 64 FD | 	ret
1ce14                 | 
1ce14                 | __system___txraw
1ce14     01 4A 05 F6 | 	mov	COUNT_, #1
1ce18     A8 00 A0 FD | 	call	#pushregs_
1ce1c     09 1F 02 F6 | 	mov	local01, arg01
1ce20     97 06 48 FB | 	callpa	#(@LR__2351-@LR__2350)>>2,fcache_load_ptr_
1ce24                 | LR__2350
1ce24     3E FA 9D FA | 	rdpin	result1, #62 wc
1ce28     FE FC A1 F1 | 	subx	result2, result2
1ce2c     F4 FF 9F CD |  if_b	jmp	#LR__2350
1ce30                 | LR__2351
1ce30     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1ce34     C2 01 00 AF 
1ce38     00 12 06 A6 |  if_e	mov	arg01, ##230400
1ce3c     80 FF BF AD |  if_e	call	#__system___setbaud
1ce40     58 7C 64 FD | 	drvl	#62
1ce44     3E 1E 26 FC | 	wypin	local01, #62
1ce48     01 FA 05 F6 | 	mov	result1, #1
1ce4c     A7 F0 03 F6 | 	mov	ptra, fp
1ce50     B2 00 A0 FD | 	call	#popregs_
1ce54                 | __system___txraw_ret
1ce54     2D 00 64 FD | 	ret
1ce58                 | 
1ce58                 | __system___rxraw
1ce58     0D 4A 05 F6 | 	mov	COUNT_, #13
1ce5c     A8 00 A0 FD | 	call	#pushregs_
1ce60     09 1F 02 F6 | 	mov	local01, arg01
1ce64     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1ce68     C2 01 00 AF 
1ce6c     00 12 06 A6 |  if_e	mov	arg01, ##230400
1ce70     4C FF BF AD |  if_e	call	#__system___setbaud
1ce74     00 1E 0E F2 | 	cmp	local01, #0 wz
1ce78     20 00 90 AD |  if_e	jmp	#LR__2360
1ce7c     14 22 06 FB | 	rdlong	local03, #20
1ce80     0A 22 46 F0 | 	shr	local03, #10
1ce84     11 1F 02 FD | 	qmul	local01, local03
1ce88     1A FA 61 FD | 	getct	result1
1ce8c     18 24 62 FD | 	getqx	local04
1ce90     12 FB 01 F1 | 	add	result1, local04
1ce94     FD 26 02 F6 | 	mov	local05, result1
1ce98     04 00 90 FD | 	jmp	#LR__2361
1ce9c                 | LR__2360
1ce9c     00 26 06 F6 | 	mov	local05, #0
1cea0                 | LR__2361
1cea0     01 28 66 F6 | 	neg	local06, #1
1cea4     3F 2A 06 F6 | 	mov	local07, #63
1cea8     00 2C 06 F6 | 	mov	local08, #0
1ceac     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1ceb0     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
1ceb4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1ceb8                 | LR__2362
1ceb8     08 2E 16 F4 | 	testb	local09, #8 wc
1cebc     09 2E 76 F4 | 	testbn	local09, #9 andc
1cec0     0A 2E 46 F0 | 	shr	local09, #10
1cec4     01 2C 06 C6 |  if_b	mov	local08, #1
1cec8     40 7E 6C 3D |  if_ae	testp	#63 wz
1cecc     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
1ced0     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
1ced4     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1ced8                 | LR__2363
1ced8     00 20 06 F6 | 	mov	local02, #0
1cedc     00 2C 0E F2 | 	cmp	local08, #0 wz
1cee0     01 20 66 56 |  if_ne	neg	local02, #1
1cee4     00 30 06 F6 | 	mov	local10, #0
1cee8     00 22 06 F6 | 	mov	local03, #0
1ceec     00 1E 0E F2 | 	cmp	local01, #0 wz
1cef0     01 22 66 56 |  if_ne	neg	local03, #1
1cef4     00 24 06 F6 | 	mov	local04, #0
1cef8     00 32 06 F6 | 	mov	local11, #0
1cefc     1A FA 61 FD | 	getct	result1
1cf00     FD 34 02 F6 | 	mov	local12, result1
1cf04     1A 37 02 F6 | 	mov	local13, local12
1cf08     13 37 82 F1 | 	sub	local13, local05
1cf0c     00 36 56 F2 | 	cmps	local13, #0 wc
1cf10     00 32 26 C6 |  if_b	not	local11, #0
1cf14     00 32 0E F2 | 	cmp	local11, #0 wz
1cf18     00 24 26 56 |  if_ne	not	local04, #0
1cf1c     12 23 CA F7 | 	test	local03, local04 wz
1cf20     00 30 26 56 |  if_ne	not	local10, #0
1cf24     18 21 4A F5 | 	or	local02, local10 wz
1cf28     8C FF 9F AD |  if_e	jmp	#LR__2362
1cf2c     00 2C 0E F2 | 	cmp	local08, #0 wz
1cf30     17 29 02 56 |  if_ne	mov	local06, local09
1cf34     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1cf38     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1cf3c     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1cf40     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1cf44     14 FB 01 F6 | 	mov	result1, local06
1cf48     A7 F0 03 F6 | 	mov	ptra, fp
1cf4c     B2 00 A0 FD | 	call	#popregs_
1cf50                 | __system___rxraw_ret
1cf50     2D 00 64 FD | 	ret
1cf54                 | 
1cf54                 | __system___getus
1cf54     1A FC 71 FD | 	getct	result2 wc
1cf58     1A 00 62 FD | 	getct	_var01
1cf5c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1cf60     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1cf64     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1cf68     20 00 90 5D |  if_ne	jmp	#LR__2370
1cf6c     14 02 06 FB | 	rdlong	_var02, #20
1cf70     A1 07 00 FF 
1cf74     40 02 16 FD | 	qdiv	_var02, ##1000000
1cf78     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1cf7c     18 FA 61 FD | 	getqx	result1
1cf80     FD 02 02 F6 | 	mov	_var02, result1
1cf84     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1cf88     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1cf8c                 | LR__2370
1cf8c     01 FD 11 FD | 	qdiv	result2, _var02
1cf90     19 FC 61 FD | 	getqy	result2
1cf94     28 FC 61 FD | 	setq	result2
1cf98     01 01 12 FD | 	qdiv	_var01, _var02
1cf9c     18 FA 61 FD | 	getqx	result1
1cfa0                 | __system___getus_ret
1cfa0     2D 00 64 FD | 	ret
1cfa4                 | 
1cfa4                 | __system____builtin_memmove
1cfa4     09 01 02 F6 | 	mov	_var01, arg01
1cfa8     0A 13 52 F2 | 	cmps	arg01, arg02 wc
1cfac     10 00 90 CD |  if_b	jmp	#LR__2380
1cfb0     0A 03 02 F6 | 	mov	_var02, arg02
1cfb4     0B 03 02 F1 | 	add	_var02, arg03
1cfb8     01 13 52 F2 | 	cmps	arg01, _var02 wc
1cfbc     48 00 90 CD |  if_b	jmp	#LR__2386
1cfc0                 | LR__2380
1cfc0     0B 05 02 F6 | 	mov	_var03, arg03
1cfc4     02 04 4E F0 | 	shr	_var03, #2 wz
1cfc8     18 00 90 AD |  if_e	jmp	#LR__2385
1cfcc     97 0A 48 FB | 	callpa	#(@LR__2383-@LR__2381)>>2,fcache_load_ptr_
1cfd0                 | LR__2381
1cfd0     02 09 D8 FC | 	rep	@LR__2384, _var03
1cfd4                 | LR__2382
1cfd4     0A 05 02 FB | 	rdlong	_var03, arg02
1cfd8     09 05 62 FC | 	wrlong	_var03, arg01
1cfdc     04 12 06 F1 | 	add	arg01, #4
1cfe0     04 14 06 F1 | 	add	arg02, #4
1cfe4                 | LR__2383
1cfe4                 | LR__2384
1cfe4                 | LR__2385
1cfe4     02 16 CE F7 | 	test	arg03, #2 wz
1cfe8     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
1cfec     09 03 52 5C |  if_ne	wrword	_var02, arg01
1cff0     02 12 06 51 |  if_ne	add	arg01, #2
1cff4     02 14 06 51 |  if_ne	add	arg02, #2
1cff8     01 16 CE F7 | 	test	arg03, #1 wz
1cffc     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1d000     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
1d004     28 00 90 FD | 	jmp	#LR__2392
1d008                 | LR__2386
1d008     0B 13 02 F1 | 	add	arg01, arg03
1d00c     0B 15 02 F1 | 	add	arg02, arg03
1d010     0B 07 0A F6 | 	mov	_var04, arg03 wz
1d014     18 00 90 AD |  if_e	jmp	#LR__2391
1d018     97 0A 48 FB | 	callpa	#(@LR__2389-@LR__2387)>>2,fcache_load_ptr_
1d01c                 | LR__2387
1d01c     03 09 D8 FC | 	rep	@LR__2390, _var04
1d020                 | LR__2388
1d020     01 12 86 F1 | 	sub	arg01, #1
1d024     01 14 86 F1 | 	sub	arg02, #1
1d028     0A 03 C2 FA | 	rdbyte	_var02, arg02
1d02c     09 03 42 FC | 	wrbyte	_var02, arg01
1d030                 | LR__2389
1d030                 | LR__2390
1d030                 | LR__2391
1d030                 | LR__2392
1d030     00 FB 01 F6 | 	mov	result1, _var01
1d034                 | __system____builtin_memmove_ret
1d034     2D 00 64 FD | 	ret
1d038                 | 
1d038                 | __system____builtin_strcpy
1d038     09 01 02 F6 | 	mov	_var01, arg01
1d03c     97 0A 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1d040                 | LR__2400
1d040     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1d044     09 FB 41 FC | 	wrbyte	result1, arg01
1d048     01 14 06 F1 | 	add	arg02, #1
1d04c     01 12 06 F1 | 	add	arg01, #1
1d050     EC FF 9F 5D |  if_ne	jmp	#LR__2400
1d054                 | LR__2401
1d054     00 FB 01 F6 | 	mov	result1, _var01
1d058                 | __system____builtin_strcpy_ret
1d058     2D 00 64 FD | 	ret
1d05c                 | 
1d05c                 | __system____topofstack
1d05c     00 4A 05 F6 | 	mov	COUNT_, #0
1d060     A8 00 A0 FD | 	call	#pushregs_
1d064     08 F0 07 F1 | 	add	ptra, #8
1d068     04 4E 05 F1 | 	add	fp, #4
1d06c     A7 12 62 FC | 	wrlong	arg01, fp
1d070     A7 FA 01 F6 | 	mov	result1, fp
1d074     04 4E 85 F1 | 	sub	fp, #4
1d078     A7 F0 03 F6 | 	mov	ptra, fp
1d07c     B2 00 A0 FD | 	call	#popregs_
1d080                 | __system____topofstack_ret
1d080     2D 00 64 FD | 	ret
1d084                 | 
1d084                 | __system___lockmem
1d084     00 FA 05 F6 | 	mov	result1, #0
1d088     01 FA 61 FD | 	cogid	result1
1d08c     00 FB 05 F1 | 	add	result1, #256
1d090                 | LR__2410
1d090     09 01 0A FB | 	rdlong	_var01, arg01 wz
1d094     09 FB 61 AC |  if_e	wrlong	result1, arg01
1d098     09 01 02 AB |  if_e	rdlong	_var01, arg01
1d09c     09 01 02 AB |  if_e	rdlong	_var01, arg01
1d0a0     FD 00 0A F2 | 	cmp	_var01, result1 wz
1d0a4     E8 FF 9F 5D |  if_ne	jmp	#LR__2410
1d0a8                 | __system___lockmem_ret
1d0a8     2D 00 64 FD | 	ret
1d0ac                 | 
1d0ac                 | __system___string_cmp
1d0ac     97 14 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1d0b0                 | LR__2420
1d0b0     09 01 C2 FA | 	rdbyte	_var01, arg01
1d0b4     0A 03 C2 FA | 	rdbyte	_var02, arg02
1d0b8     00 05 02 F6 | 	mov	_var03, _var01
1d0bc     01 05 8A F1 | 	sub	_var03, _var02 wz
1d0c0     01 12 06 F1 | 	add	arg01, #1
1d0c4     01 14 06 F1 | 	add	arg02, #1
1d0c8     0C 00 90 5D |  if_ne	jmp	#LR__2422
1d0cc     00 00 0E F2 | 	cmp	_var01, #0 wz
1d0d0     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
1d0d4     D8 FF 9F 5D |  if_ne	jmp	#LR__2420
1d0d8                 | LR__2421
1d0d8                 | LR__2422
1d0d8     02 FB 01 F6 | 	mov	result1, _var03
1d0dc                 | __system___string_cmp_ret
1d0dc     2D 00 64 FD | 	ret
1d0e0                 | 
1d0e0                 | __system___string_concat
1d0e0     05 4A 05 F6 | 	mov	COUNT_, #5
1d0e4     A8 00 A0 FD | 	call	#pushregs_
1d0e8     09 1F 02 F6 | 	mov	local01, arg01
1d0ec     0A 21 02 F6 | 	mov	local02, arg02
1d0f0     0F 13 02 F6 | 	mov	arg01, local01
1d0f4     09 23 02 F6 | 	mov	local03, arg01
1d0f8     97 06 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1d0fc                 | LR__2430
1d0fc     11 FB C9 FA | 	rdbyte	result1, local03 wz
1d100     01 22 06 51 |  if_ne	add	local03, #1
1d104     F4 FF 9F 5D |  if_ne	jmp	#LR__2430
1d108                 | LR__2431
1d108     09 23 82 F1 | 	sub	local03, arg01
1d10c     11 25 02 F6 | 	mov	local04, local03
1d110     10 13 02 F6 | 	mov	arg01, local02
1d114     09 23 02 F6 | 	mov	local03, arg01
1d118     97 06 48 FB | 	callpa	#(@LR__2433-@LR__2432)>>2,fcache_load_ptr_
1d11c                 | LR__2432
1d11c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1d120     01 22 06 51 |  if_ne	add	local03, #1
1d124     F4 FF 9F 5D |  if_ne	jmp	#LR__2432
1d128                 | LR__2433
1d128     09 23 82 F1 | 	sub	local03, arg01
1d12c     12 13 02 F6 | 	mov	arg01, local04
1d130     11 13 02 F1 | 	add	arg01, local03
1d134     01 12 06 F1 | 	add	arg01, #1
1d138     90 3D B0 FD | 	call	#__system___gc_alloc_managed
1d13c     FD 26 0A F6 | 	mov	local05, result1 wz
1d140     28 00 90 AD |  if_e	jmp	#LR__2434
1d144     13 13 02 F6 | 	mov	arg01, local05
1d148     0F 15 02 F6 | 	mov	arg02, local01
1d14c     12 17 02 F6 | 	mov	arg03, local04
1d150     50 FE BF FD | 	call	#__system____builtin_memmove
1d154     13 13 02 F6 | 	mov	arg01, local05
1d158     12 13 02 F1 | 	add	arg01, local04
1d15c     01 22 06 F1 | 	add	local03, #1
1d160     10 15 02 F6 | 	mov	arg02, local02
1d164     11 17 02 F6 | 	mov	arg03, local03
1d168     38 FE BF FD | 	call	#__system____builtin_memmove
1d16c                 | LR__2434
1d16c     13 FB 01 F6 | 	mov	result1, local05
1d170     A7 F0 03 F6 | 	mov	ptra, fp
1d174     B2 00 A0 FD | 	call	#popregs_
1d178                 | __system___string_concat_ret
1d178     2D 00 64 FD | 	ret
1d17c                 | 
1d17c                 | __system___tx
1d17c     02 4A 05 F6 | 	mov	COUNT_, #2
1d180     A8 00 A0 FD | 	call	#pushregs_
1d184     09 1F 02 F6 | 	mov	local01, arg01
1d188     0A 1E 0E F2 | 	cmp	local01, #10 wz
1d18c     18 00 90 5D |  if_ne	jmp	#LR__2440
1d190     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1d194     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
1d198     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1d19c     02 20 CE F7 | 	test	local02, #2 wz
1d1a0     0D 12 06 56 |  if_ne	mov	arg01, #13
1d1a4     6C FC BF 5D |  if_ne	call	#__system___txraw
1d1a8                 | LR__2440
1d1a8     0F 13 02 F6 | 	mov	arg01, local01
1d1ac     64 FC BF FD | 	call	#__system___txraw
1d1b0     A7 F0 03 F6 | 	mov	ptra, fp
1d1b4     B2 00 A0 FD | 	call	#popregs_
1d1b8                 | __system___tx_ret
1d1b8     2D 00 64 FD | 	ret
1d1bc                 | 
1d1bc                 | __system___rx
1d1bc     01 4A 05 F6 | 	mov	COUNT_, #1
1d1c0     A8 00 A0 FD | 	call	#pushregs_
1d1c4                 | LR__2450
1d1c4     00 12 06 F6 | 	mov	arg01, #0
1d1c8     8C FC BF FD | 	call	#__system___rxraw
1d1cc     FD 1E 02 F6 | 	mov	local01, result1
1d1d0     FF FF 7F FF 
1d1d4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1d1d8     E8 FF 9F AD |  if_e	jmp	#LR__2450
1d1dc     0D 1E 0E F2 | 	cmp	local01, #13 wz
1d1e0     14 00 90 5D |  if_ne	jmp	#LR__2451
1d1e4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1d1e8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1d1ec     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1d1f0     02 FA CD F7 | 	test	result1, #2 wz
1d1f4     0A 1E 06 56 |  if_ne	mov	local01, #10
1d1f8                 | LR__2451
1d1f8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1d1fc     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1d200     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1d204     01 12 CE F7 | 	test	arg01, #1 wz
1d208     1C 00 90 AD |  if_e	jmp	#LR__2454
1d20c     7F 1E 0E F2 | 	cmp	local01, #127 wz
1d210     0C 00 90 5D |  if_ne	jmp	#LR__2452
1d214     08 12 06 F6 | 	mov	arg01, #8
1d218     60 FF BF FD | 	call	#__system___tx
1d21c     08 00 90 FD | 	jmp	#LR__2453
1d220                 | LR__2452
1d220     0F 13 02 F6 | 	mov	arg01, local01
1d224     54 FF BF FD | 	call	#__system___tx
1d228                 | LR__2453
1d228                 | LR__2454
1d228     0F FB 01 F6 | 	mov	result1, local01
1d22c     A7 F0 03 F6 | 	mov	ptra, fp
1d230     B2 00 A0 FD | 	call	#popregs_
1d234                 | __system___rx_ret
1d234     2D 00 64 FD | 	ret
1d238                 | 
1d238                 | __system___pinwrite
1d238     09 01 02 F6 | 	mov	_var01, arg01
1d23c     1F 00 06 F5 | 	and	_var01, #31
1d240     20 12 CE F7 | 	test	arg01, #32 wz
1d244     06 12 46 F0 | 	shr	arg01, #6
1d248     09 13 CA F9 | 	bmask	arg01, arg01
1d24c     00 13 62 F0 | 	shl	arg01, _var01
1d250     00 15 62 F0 | 	shl	arg02, _var01
1d254     1C 00 90 AD |  if_e	jmp	#LR__2460
1d258     09 F7 43 F5 | 	or	dirb, arg01
1d25c     FD 01 02 F6 | 	mov	_var01, outb
1d260     09 01 22 F5 | 	andn	_var01, arg01
1d264     09 15 02 F5 | 	and	arg02, arg01
1d268     0A 01 42 F5 | 	or	_var01, arg02
1d26c     00 FB 03 F6 | 	mov	outb, _var01
1d270     18 00 90 FD | 	jmp	#LR__2461
1d274                 | LR__2460
1d274     09 F5 43 F5 | 	or	dira, arg01
1d278     FC 01 02 F6 | 	mov	_var01, outa
1d27c     09 01 22 F5 | 	andn	_var01, arg01
1d280     09 15 02 F5 | 	and	arg02, arg01
1d284     0A 01 42 F5 | 	or	_var01, arg02
1d288     00 F9 03 F6 | 	mov	outa, _var01
1d28c                 | LR__2461
1d28c                 | __system___pinwrite_ret
1d28c     2D 00 64 FD | 	ret
1d290                 | 
1d290                 | __system___basic_read_line
1d290     06 4A 05 F6 | 	mov	COUNT_, #6
1d294     A8 00 A0 FD | 	call	#pushregs_
1d298     09 1F 02 F6 | 	mov	local01, arg01
1d29c     00 20 06 F6 | 	mov	local02, #0
1d2a0     18 22 06 F6 | 	mov	local03, #24
1d2a4     00 24 06 F6 | 	mov	local04, #0
1d2a8     18 12 06 F6 | 	mov	arg01, #24
1d2ac     1C 3C B0 FD | 	call	#__system___gc_alloc_managed
1d2b0     FD 26 0A F6 | 	mov	local05, result1 wz
1d2b4     13 FB 01 A6 |  if_e	mov	result1, local05
1d2b8     B0 00 90 AD |  if_e	jmp	#LR__2473
1d2bc                 | LR__2470
1d2bc     0F 13 02 F6 | 	mov	arg01, local01
1d2c0     88 0B B0 FD | 	call	#__system___basic_get_char
1d2c4     FD 28 02 F6 | 	mov	local06, result1
1d2c8     01 28 56 F2 | 	cmps	local06, #1 wc
1d2cc     8C 00 90 CD |  if_b	jmp	#LR__2472
1d2d0     0A 28 0E F2 | 	cmp	local06, #10 wz
1d2d4     10 00 90 5D |  if_ne	jmp	#LR__2471
1d2d8     00 24 0E F2 | 	cmp	local04, #0 wz
1d2dc     01 20 56 52 |  if_ne	cmps	local02, #1 wc
1d2e0     01 20 86 11 |  if_a	sub	local02, #1
1d2e4     74 00 90 FD | 	jmp	#LR__2472
1d2e8                 | LR__2471
1d2e8     0D 28 0E F2 | 	cmp	local06, #13 wz
1d2ec     01 24 06 A6 |  if_e	mov	local04, #1
1d2f0     00 24 06 56 |  if_ne	mov	local04, #0
1d2f4     08 28 0E F2 | 	cmp	local06, #8 wz
1d2f8     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1d2fc     01 20 56 A2 |  if_e	cmps	local02, #1 wc
1d300     01 20 86 21 |  if_nc_and_z	sub	local02, #1
1d304     B4 FF 9F AD |  if_e	jmp	#LR__2470
1d308     13 17 02 F6 | 	mov	arg03, local05
1d30c     10 17 02 F1 | 	add	arg03, local02
1d310     0B 29 42 FC | 	wrbyte	local06, arg03
1d314     01 20 06 F1 | 	add	local02, #1
1d318     11 21 0A F2 | 	cmp	local02, local03 wz
1d31c     9C FF 9F 5D |  if_ne	jmp	#LR__2470
1d320     11 13 02 F6 | 	mov	arg01, local03
1d324     20 12 06 F1 | 	add	arg01, #32
1d328     A0 3B B0 FD | 	call	#__system___gc_alloc_managed
1d32c     FD 28 0A F6 | 	mov	local06, result1 wz
1d330     14 FB 01 A6 |  if_e	mov	result1, local06
1d334     34 00 90 AD |  if_e	jmp	#LR__2473
1d338     14 13 02 F6 | 	mov	arg01, local06
1d33c     13 15 02 F6 | 	mov	arg02, local05
1d340     11 17 02 F6 | 	mov	arg03, local03
1d344     5C FC BF FD | 	call	#__system____builtin_memmove
1d348     20 22 06 F1 | 	add	local03, #32
1d34c     13 13 02 F6 | 	mov	arg01, local05
1d350     B4 3C B0 FD | 	call	#__system___gc_free
1d354     14 27 02 F6 | 	mov	local05, local06
1d358     60 FF 9F FD | 	jmp	#LR__2470
1d35c                 | LR__2472
1d35c     13 29 02 F6 | 	mov	local06, local05
1d360     10 29 02 F1 | 	add	local06, local02
1d364     14 01 48 FC | 	wrbyte	#0, local06
1d368     13 FB 01 F6 | 	mov	result1, local05
1d36c                 | LR__2473
1d36c     A7 F0 03 F6 | 	mov	ptra, fp
1d370     B2 00 A0 FD | 	call	#popregs_
1d374                 | __system___basic_read_line_ret
1d374     2D 00 64 FD | 	ret
1d378                 | 
1d378                 | __system___waitms
1d378     09 01 02 F6 | 	mov	_var01, arg01
1d37c     1A 02 62 FD | 	getct	_var02
1d380     14 04 06 FB | 	rdlong	_var03, #20
1d384     97 14 48 FB | 	callpa	#(@LR__2481-@LR__2480)>>2,fcache_load_ptr_
1d388                 | LR__2480
1d388     01 00 00 FF 
1d38c     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
1d390     1C 00 90 CD |  if_b	jmp	#LR__2482
1d394     02 03 02 F1 | 	add	_var02, _var03
1d398     01 13 02 F6 | 	mov	arg01, _var02
1d39c     00 12 66 FA | 	addct1	arg01, #0
1d3a0     24 22 60 FD | 	waitct1
1d3a4     01 00 00 FF 
1d3a8     E8 01 86 F1 | 	sub	_var01, ##1000
1d3ac     D8 FF 9F FD | 	jmp	#LR__2480
1d3b0                 | LR__2481
1d3b0                 | LR__2482
1d3b0     01 00 56 F2 | 	cmps	_var01, #1 wc
1d3b4     28 00 90 CD |  if_b	jmp	#LR__2483
1d3b8     02 01 02 FD | 	qmul	_var01, _var03
1d3bc     01 00 00 FF 
1d3c0     E8 17 06 F6 | 	mov	arg03, ##1000
1d3c4     19 FA 61 FD | 	getqy	result1
1d3c8     18 12 62 FD | 	getqx	arg01
1d3cc     28 FA 61 FD | 	setq	result1
1d3d0     0B 13 12 FD | 	qdiv	arg01, arg03
1d3d4     18 12 62 FD | 	getqx	arg01
1d3d8     01 13 62 FA | 	addct1	arg01, _var02
1d3dc     24 22 60 FD | 	waitct1
1d3e0                 | LR__2483
1d3e0                 | __system___waitms_ret
1d3e0     2D 00 64 FD | 	ret
1d3e4                 | 
1d3e4                 | __system___waitus
1d3e4     09 01 02 F6 | 	mov	_var01, arg01
1d3e8     1A 02 62 FD | 	getct	_var02
1d3ec     14 04 06 FB | 	rdlong	_var03, #20
1d3f0     97 14 48 FB | 	callpa	#(@LR__2491-@LR__2490)>>2,fcache_load_ptr_
1d3f4                 | LR__2490
1d3f4     A1 07 00 FF 
1d3f8     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1d3fc     1C 00 90 CD |  if_b	jmp	#LR__2492
1d400     02 03 02 F1 | 	add	_var02, _var03
1d404     01 13 02 F6 | 	mov	arg01, _var02
1d408     00 12 66 FA | 	addct1	arg01, #0
1d40c     24 22 60 FD | 	waitct1
1d410     A1 07 00 FF 
1d414     40 00 86 F1 | 	sub	_var01, ##1000000
1d418     D8 FF 9F FD | 	jmp	#LR__2490
1d41c                 | LR__2491
1d41c                 | LR__2492
1d41c     01 00 56 F2 | 	cmps	_var01, #1 wc
1d420     28 00 90 CD |  if_b	jmp	#LR__2493
1d424     02 01 02 FD | 	qmul	_var01, _var03
1d428     A1 07 00 FF 
1d42c     40 16 06 F6 | 	mov	arg03, ##1000000
1d430     19 FA 61 FD | 	getqy	result1
1d434     18 12 62 FD | 	getqx	arg01
1d438     28 FA 61 FD | 	setq	result1
1d43c     0B 13 12 FD | 	qdiv	arg01, arg03
1d440     18 FA 61 FD | 	getqx	result1
1d444     FD 02 62 FA | 	addct1	_var02, result1
1d448     24 22 60 FD | 	waitct1
1d44c                 | LR__2493
1d44c                 | __system___waitus_ret
1d44c     2D 00 64 FD | 	ret
1d450                 | 
1d450                 | __system___mount
1d450     0B 4A 05 F6 | 	mov	COUNT_, #11
1d454     A8 00 A0 FD | 	call	#pushregs_
1d458     09 1F 02 F6 | 	mov	local01, arg01
1d45c     0A 21 0A F6 | 	mov	local02, arg02 wz
1d460     01 22 66 F6 | 	neg	local03, #1
1d464     01 FA 65 A6 |  if_e	neg	result1, #1
1d468     98 02 90 AD |  if_e	jmp	#LR__2515
1d46c     0F FB C1 FA | 	rdbyte	result1, local01
1d470     2F FA 0D F2 | 	cmp	result1, #47 wz
1d474     28 00 90 5D |  if_ne	jmp	#LR__2502
1d478     0F 13 02 F6 | 	mov	arg01, local01
1d47c     09 25 02 F6 | 	mov	local04, arg01
1d480     97 06 48 FB | 	callpa	#(@LR__2501-@LR__2500)>>2,fcache_load_ptr_
1d484                 | LR__2500
1d484     12 FB C9 FA | 	rdbyte	result1, local04 wz
1d488     01 24 06 51 |  if_ne	add	local04, #1
1d48c     F4 FF 9F 5D |  if_ne	jmp	#LR__2500
1d490                 | LR__2501
1d490     09 25 82 F1 | 	sub	local04, arg01
1d494     12 FB 01 F6 | 	mov	result1, local04
1d498     10 FA 55 F2 | 	cmps	result1, #16 wc
1d49c     14 00 90 CD |  if_b	jmp	#LR__2503
1d4a0                 | LR__2502
1d4a0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1d4a4     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
1d4a8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1d4ac     01 FA 65 F6 | 	neg	result1, #1
1d4b0     50 02 90 FD | 	jmp	#LR__2515
1d4b4                 | LR__2503
1d4b4     00 26 06 F6 | 	mov	local05, #0
1d4b8                 | LR__2504
1d4b8     04 26 56 F2 | 	cmps	local05, #4 wc
1d4bc     B0 00 90 3D |  if_ae	jmp	#LR__2509
1d4c0     13 13 02 F6 | 	mov	arg01, local05
1d4c4     02 12 66 F0 | 	shl	arg01, #2
1d4c8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1d4cc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1d4d0     09 FB 09 FB | 	rdlong	result1, arg01 wz
1d4d4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1d4d8     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1d4dc     13 23 02 86 |  if_c_and_z	mov	local03, local05
1d4e0     84 00 90 8D |  if_c_and_z	jmp	#LR__2508
1d4e4     13 13 02 F6 | 	mov	arg01, local05
1d4e8     02 12 66 F0 | 	shl	arg01, #2
1d4ec     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1d4f0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1d4f4     09 13 02 FB | 	rdlong	arg01, arg01
1d4f8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1d4fc     09 25 02 F6 | 	mov	local04, arg01
1d500     97 06 48 FB | 	callpa	#(@LR__2506-@LR__2505)>>2,fcache_load_ptr_
1d504                 | LR__2505
1d504     12 FB C9 FA | 	rdbyte	result1, local04 wz
1d508     01 24 06 51 |  if_ne	add	local04, #1
1d50c     F4 FF 9F 5D |  if_ne	jmp	#LR__2505
1d510                 | LR__2506
1d510     09 25 82 F1 | 	sub	local04, arg01
1d514     12 29 02 F6 | 	mov	local06, local04
1d518     14 13 02 F6 | 	mov	arg01, local06
1d51c     0F 13 02 F1 | 	add	arg01, local01
1d520     09 FB C1 FA | 	rdbyte	result1, arg01
1d524     2F FA 0D F2 | 	cmp	result1, #47 wz
1d528     14 2B 02 56 |  if_ne	mov	local07, local06
1d52c     0F 2B 02 51 |  if_ne	add	local07, local01
1d530     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
1d534     30 00 90 5D |  if_ne	jmp	#LR__2507
1d538     13 17 02 F6 | 	mov	arg03, local05
1d53c     02 16 66 F0 | 	shl	arg03, #2
1d540     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1d544     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1d548     0B 15 02 FB | 	rdlong	arg02, arg03
1d54c     0F 13 02 F6 | 	mov	arg01, local01
1d550     14 17 02 F6 | 	mov	arg03, local06
1d554     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1d558     B4 4D B0 FD | 	call	#__system__strncmp
1d55c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d560     13 23 02 A6 |  if_e	mov	local03, local05
1d564     08 00 90 AD |  if_e	jmp	#LR__2509
1d568                 | LR__2507
1d568                 | LR__2508
1d568     01 26 06 F1 | 	add	local05, #1
1d56c     48 FF 9F FD | 	jmp	#LR__2504
1d570                 | LR__2509
1d570     FF FF 7F FF 
1d574     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1d578     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1d57c     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
1d580     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d584     01 FA 65 A6 |  if_e	neg	result1, #1
1d588     78 01 90 AD |  if_e	jmp	#LR__2515
1d58c     11 27 02 F6 | 	mov	local05, local03
1d590     13 2B 02 F6 | 	mov	local07, local05
1d594     02 2A 66 F0 | 	shl	local07, #2
1d598     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1d59c     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
1d5a0     15 29 0A FB | 	rdlong	local06, local07 wz
1d5a4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1d5a8     58 00 90 AD |  if_e	jmp	#LR__2510
1d5ac     4C 28 06 F1 | 	add	local06, #76
1d5b0     14 2B 0A FB | 	rdlong	local07, local06 wz
1d5b4     4C 28 86 F1 | 	sub	local06, #76
1d5b8     48 00 90 AD |  if_e	jmp	#LR__2510
1d5bc     4C 28 06 F1 | 	add	local06, #76
1d5c0     14 2B 02 FB | 	rdlong	local07, local06
1d5c4     15 23 02 F6 | 	mov	local03, local07
1d5c8     13 2A 46 F7 | 	zerox	local07, #19
1d5cc     14 22 46 F0 | 	shr	local03, #20
1d5d0     02 22 66 F0 | 	shl	local03, #2
1d5d4     ED 22 02 F1 | 	add	local03, __methods__
1d5d8     11 23 02 FB | 	rdlong	local03, local03
1d5dc     13 29 02 F6 | 	mov	local06, local05
1d5e0     02 28 66 F0 | 	shl	local06, #2
1d5e4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1d5e8     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1d5ec     14 13 02 FB | 	rdlong	arg01, local06
1d5f0     F2 28 02 F6 | 	mov	local06, objptr
1d5f4     15 E5 01 F6 | 	mov	objptr, local07
1d5f8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1d5fc     2D 22 62 FD | 	call	local03
1d600     14 E5 01 F6 | 	mov	objptr, local06
1d604                 | LR__2510
1d604     13 2D 02 F6 | 	mov	local08, local05
1d608     02 2C 66 F0 | 	shl	local08, #2
1d60c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1d610     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1d614     16 21 62 FC | 	wrlong	local02, local08
1d618     00 20 0E F2 | 	cmp	local02, #0 wz
1d61c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1d620     18 00 90 5D |  if_ne	jmp	#LR__2511
1d624     02 26 66 F0 | 	shl	local05, #2
1d628     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1d62c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1d630     13 01 68 FC | 	wrlong	#0, local05
1d634     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1d638     C4 00 90 FD | 	jmp	#LR__2514
1d63c                 | LR__2511
1d63c     13 2F 02 F6 | 	mov	local09, local05
1d640     04 2E 66 F0 | 	shl	local09, #4
1d644     24 E6 05 F1 | 	add	ptr___system__dat__, #36
1d648     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
1d64c     17 13 02 F6 | 	mov	arg01, local09
1d650     0F 15 02 F6 | 	mov	arg02, local01
1d654     10 16 06 F6 | 	mov	arg03, #16
1d658     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
1d65c     04 4C B0 FD | 	call	#__system__strncpy
1d660     48 20 06 F1 | 	add	local02, #72
1d664     10 2D 0A FB | 	rdlong	local08, local02 wz
1d668     48 20 86 F1 | 	sub	local02, #72
1d66c     7C 00 90 AD |  if_e	jmp	#LR__2513
1d670     48 20 06 F1 | 	add	local02, #72
1d674     10 2D 02 FB | 	rdlong	local08, local02
1d678     16 31 02 F6 | 	mov	local10, local08
1d67c     13 2C 46 F7 | 	zerox	local08, #19
1d680     14 30 46 F0 | 	shr	local10, #20
1d684     02 30 66 F0 | 	shl	local10, #2
1d688     ED 30 02 F1 | 	add	local10, __methods__
1d68c     18 31 02 FB | 	rdlong	local10, local10
1d690     17 13 02 F6 | 	mov	arg01, local09
1d694     F2 32 02 F6 | 	mov	local11, objptr
1d698     16 E5 01 F6 | 	mov	objptr, local08
1d69c     2D 30 62 FD | 	call	local10
1d6a0     19 E5 01 F6 | 	mov	objptr, local11
1d6a4     FD 12 0A F6 | 	mov	arg01, result1 wz
1d6a8     40 00 90 AD |  if_e	jmp	#LR__2512
1d6ac     13 2D 02 F6 | 	mov	local08, local05
1d6b0     02 2C 66 F0 | 	shl	local08, #2
1d6b4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1d6b8     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1d6bc     16 01 68 FC | 	wrlong	#0, local08
1d6c0     02 26 66 F0 | 	shl	local05, #2
1d6c4     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1d6c8     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1d6cc     13 01 68 FC | 	wrlong	#0, local05
1d6d0     09 13 6A F6 | 	neg	arg01, arg01 wz
1d6d4     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
1d6d8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d6dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1d6e0     01 FA 65 56 |  if_ne	neg	result1, #1
1d6e4     00 FA 05 A6 |  if_e	mov	result1, #0
1d6e8     18 00 90 FD | 	jmp	#LR__2515
1d6ec                 | LR__2512
1d6ec                 | LR__2513
1d6ec     02 26 66 F0 | 	shl	local05, #2
1d6f0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1d6f4     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1d6f8     13 2F 62 FC | 	wrlong	local09, local05
1d6fc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1d700                 | LR__2514
1d700     00 FA 05 F6 | 	mov	result1, #0
1d704                 | LR__2515
1d704     A7 F0 03 F6 | 	mov	ptra, fp
1d708     B2 00 A0 FD | 	call	#popregs_
1d70c                 | __system___mount_ret
1d70c     2D 00 64 FD | 	ret
1d710                 | 
1d710                 | __system___chdir
1d710     00 4A 05 F6 | 	mov	COUNT_, #0
1d714     A8 00 A0 FD | 	call	#pushregs_
1d718     40 F0 07 F1 | 	add	ptra, #64
1d71c     04 4E 05 F1 | 	add	fp, #4
1d720     A7 12 62 FC | 	wrlong	arg01, fp
1d724     04 4E 05 F1 | 	add	fp, #4
1d728     A7 14 02 F6 | 	mov	arg02, fp
1d72c     08 4E 85 F1 | 	sub	fp, #8
1d730     10 48 B0 FD | 	call	#__system__stat
1d734     3C 4E 05 F1 | 	add	fp, #60
1d738     A7 FA 61 FC | 	wrlong	result1, fp
1d73c     3C 4E 85 F1 | 	sub	fp, #60
1d740     00 FA 0D F2 | 	cmp	result1, #0 wz
1d744     3C 4E 05 51 |  if_ne	add	fp, #60
1d748     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1d74c     3C 4E 85 51 |  if_ne	sub	fp, #60
1d750     BC 00 90 5D |  if_ne	jmp	#LR__2522
1d754     10 4E 05 F1 | 	add	fp, #16
1d758     A7 12 02 FB | 	rdlong	arg01, fp
1d75c     10 4E 85 F1 | 	sub	fp, #16
1d760     78 00 00 FF 
1d764     00 12 06 F5 | 	and	arg01, ##61440
1d768     08 00 00 FF 
1d76c     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1d770     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
1d774     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1d778     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
1d77c     01 FA 65 56 |  if_ne	neg	result1, #1
1d780     8C 00 90 5D |  if_ne	jmp	#LR__2522
1d784     04 4E 05 F1 | 	add	fp, #4
1d788     A7 16 02 FB | 	rdlong	arg03, fp
1d78c     04 4E 85 F1 | 	sub	fp, #4
1d790     0B 17 C2 FA | 	rdbyte	arg03, arg03
1d794     2F 16 0E F2 | 	cmp	arg03, #47 wz
1d798     24 00 90 5D |  if_ne	jmp	#LR__2520
1d79c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1d7a0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1d7a4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1d7a8     04 4E 05 F1 | 	add	fp, #4
1d7ac     A7 14 02 FB | 	rdlong	arg02, fp
1d7b0     04 4E 85 F1 | 	sub	fp, #4
1d7b4     00 17 06 F6 | 	mov	arg03, #256
1d7b8     A8 4A B0 FD | 	call	#__system__strncpy
1d7bc     4C 00 90 FD | 	jmp	#LR__2521
1d7c0                 | LR__2520
1d7c0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1d7c4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1d7c8     38 4E 05 F1 | 	add	fp, #56
1d7cc     A7 12 62 FC | 	wrlong	arg01, fp
1d7d0     38 4E 85 F1 | 	sub	fp, #56
1d7d4     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
1d7d8     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1d7dc     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1d7e0     00 17 06 F6 | 	mov	arg03, #256
1d7e4     7C 4A B0 FD | 	call	#__system__strncpy
1d7e8     38 4E 05 F1 | 	add	fp, #56
1d7ec     A7 12 02 FB | 	rdlong	arg01, fp
1d7f0     34 4E 85 F1 | 	sub	fp, #52
1d7f4     A7 14 02 FB | 	rdlong	arg02, fp
1d7f8     04 4E 85 F1 | 	sub	fp, #4
1d7fc     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1d800     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
1d804     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1d808     10 00 B0 FD | 	call	#__system____getvfsforfile
1d80c                 | LR__2521
1d80c     00 FA 05 F6 | 	mov	result1, #0
1d810                 | LR__2522
1d810     A7 F0 03 F6 | 	mov	ptra, fp
1d814     B2 00 A0 FD | 	call	#popregs_
1d818                 | __system___chdir_ret
1d818     2D 00 64 FD | 	ret
1d81c                 | 
1d81c                 | __system____getvfsforfile
1d81c     0E 4A 05 F6 | 	mov	COUNT_, #14
1d820     A8 00 A0 FD | 	call	#pushregs_
1d824     09 1F 02 F6 | 	mov	local01, arg01
1d828     0A 21 02 F6 | 	mov	local02, arg02
1d82c     0B 23 02 F6 | 	mov	local03, arg03
1d830     97 10 48 FB | 	callpa	#(@LR__2531-@LR__2530)>>2,fcache_load_ptr_
1d834                 | LR__2530
1d834     10 FB C1 FA | 	rdbyte	result1, local02
1d838     2F FA 0D F2 | 	cmp	result1, #47 wz
1d83c     01 20 06 A1 |  if_e	add	local02, #1
1d840     10 25 C2 AA |  if_e	rdbyte	local04, local02
1d844     01 20 86 A1 |  if_e	sub	local02, #1
1d848     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1d84c     01 20 06 A1 |  if_e	add	local02, #1
1d850     E0 FF 9F AD |  if_e	jmp	#LR__2530
1d854                 | LR__2531
1d854     10 25 C2 FA | 	rdbyte	local04, local02
1d858     2F 24 0E F2 | 	cmp	local04, #47 wz
1d85c     14 00 90 5D |  if_ne	jmp	#LR__2532
1d860     0F 13 02 F6 | 	mov	arg01, local01
1d864     10 15 02 F6 | 	mov	arg02, local02
1d868     00 17 06 F6 | 	mov	arg03, #256
1d86c     F4 49 B0 FD | 	call	#__system__strncpy
1d870     7C 00 90 FD | 	jmp	#LR__2534
1d874                 | LR__2532
1d874     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1d878     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1d87c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1d880     0F 13 02 F6 | 	mov	arg01, local01
1d884     00 17 06 F6 | 	mov	arg03, #256
1d888     D8 49 B0 FD | 	call	#__system__strncpy
1d88c     10 25 CA FA | 	rdbyte	local04, local02 wz
1d890     5C 00 90 AD |  if_e	jmp	#LR__2533
1d894     10 25 C2 FA | 	rdbyte	local04, local02
1d898     2E 24 0E F2 | 	cmp	local04, #46 wz
1d89c     01 20 06 A1 |  if_e	add	local02, #1
1d8a0     10 27 C2 AA |  if_e	rdbyte	local05, local02
1d8a4     01 20 86 A1 |  if_e	sub	local02, #1
1d8a8     13 29 02 A6 |  if_e	mov	local06, local05
1d8ac     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1d8b0     3C 00 90 AD |  if_e	jmp	#LR__2533
1d8b4     0F 27 C2 FA | 	rdbyte	local05, local01
1d8b8     2F 26 0E F2 | 	cmp	local05, #47 wz
1d8bc     01 1E 06 A1 |  if_e	add	local01, #1
1d8c0     0F 25 C2 AA |  if_e	rdbyte	local04, local01
1d8c4     01 1E 86 A1 |  if_e	sub	local01, #1
1d8c8     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1d8cc     63 01 00 5F 
1d8d0     30 14 06 56 |  if_ne	mov	arg02, ##@LR__4590
1d8d4     0F 13 02 56 |  if_ne	mov	arg01, local01
1d8d8     00 17 06 56 |  if_ne	mov	arg03, #256
1d8dc     D0 49 B0 5D |  if_ne	call	#__system__strncat
1d8e0     0F 13 02 F6 | 	mov	arg01, local01
1d8e4     10 15 02 F6 | 	mov	arg02, local02
1d8e8     00 17 06 F6 | 	mov	arg03, #256
1d8ec     C0 49 B0 FD | 	call	#__system__strncat
1d8f0                 | LR__2533
1d8f0                 | LR__2534
1d8f0     0F 13 02 F6 | 	mov	arg01, local01
1d8f4     78 4B B0 FD | 	call	#__system___normalizeName
1d8f8     0F 25 CA FA | 	rdbyte	local04, local01 wz
1d8fc     1C 00 90 AD |  if_e	jmp	#LR__2535
1d900     0F 25 C2 FA | 	rdbyte	local04, local01
1d904     2F 24 0E F2 | 	cmp	local04, #47 wz
1d908     01 1E 06 A1 |  if_e	add	local01, #1
1d90c     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1d910     01 1E 86 A1 |  if_e	sub	local01, #1
1d914     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1d918     18 00 90 5D |  if_ne	jmp	#LR__2536
1d91c                 | LR__2535
1d91c     01 00 00 FF 
1d920     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
1d924     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
1d928     01 00 00 FF 
1d92c     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
1d930     EC 01 90 FD | 	jmp	#LR__2550
1d934                 | LR__2536
1d934     00 2A 06 F6 | 	mov	local07, #0
1d938                 | LR__2537
1d938     04 2A 56 F2 | 	cmps	local07, #4 wc
1d93c     CC 01 90 3D |  if_ae	jmp	#LR__2549
1d940     15 29 02 F6 | 	mov	local06, local07
1d944     02 28 66 F0 | 	shl	local06, #2
1d948     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1d94c     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1d950     14 29 0A FB | 	rdlong	local06, local06 wz
1d954     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1d958     A8 01 90 AD |  if_e	jmp	#LR__2548
1d95c     15 25 02 F6 | 	mov	local04, local07
1d960     02 24 66 F0 | 	shl	local04, #2
1d964     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1d968     F3 24 02 F1 | 	add	local04, ptr___system__dat__
1d96c     12 13 02 FB | 	rdlong	arg01, local04
1d970     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1d974     09 2D 02 F6 | 	mov	local08, arg01
1d978     97 06 48 FB | 	callpa	#(@LR__2539-@LR__2538)>>2,fcache_load_ptr_
1d97c                 | LR__2538
1d97c     16 FB C9 FA | 	rdbyte	result1, local08 wz
1d980     01 2C 06 51 |  if_ne	add	local08, #1
1d984     F4 FF 9F 5D |  if_ne	jmp	#LR__2538
1d988                 | LR__2539
1d988     09 2D 82 F1 | 	sub	local08, arg01
1d98c     16 2F 02 F6 | 	mov	local09, local08
1d990     17 25 02 F6 | 	mov	local04, local09
1d994     0F 25 02 F1 | 	add	local04, local01
1d998     12 29 C2 FA | 	rdbyte	local06, local04
1d99c     2F 28 0E F2 | 	cmp	local06, #47 wz
1d9a0     17 31 02 56 |  if_ne	mov	local10, local09
1d9a4     0F 31 02 51 |  if_ne	add	local10, local01
1d9a8     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1d9ac     54 01 90 5D |  if_ne	jmp	#LR__2547
1d9b0     15 17 02 F6 | 	mov	arg03, local07
1d9b4     02 16 66 F0 | 	shl	arg03, #2
1d9b8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1d9bc     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1d9c0     0B 15 02 FB | 	rdlong	arg02, arg03
1d9c4     17 17 02 F6 | 	mov	arg03, local09
1d9c8     0F 13 02 F6 | 	mov	arg01, local01
1d9cc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1d9d0     3C 49 B0 FD | 	call	#__system__strncmp
1d9d4     00 FA 4D F2 | 	cmps	result1, #0 wz
1d9d8     28 01 90 5D |  if_ne	jmp	#LR__2547
1d9dc     15 33 02 F6 | 	mov	local11, local07
1d9e0     02 32 66 F0 | 	shl	local11, #2
1d9e4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1d9e8     F3 32 02 F1 | 	add	local11, ptr___system__dat__
1d9ec     19 35 02 FB | 	rdlong	local12, local11
1d9f0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1d9f4     97 22 48 FB | 	callpa	#(@LR__2541-@LR__2540)>>2,fcache_load_ptr_
1d9f8                 | LR__2540
1d9f8     17 29 02 F6 | 	mov	local06, local09
1d9fc     01 28 06 F1 | 	add	local06, #1
1da00     0F 29 02 F1 | 	add	local06, local01
1da04     14 33 C2 FA | 	rdbyte	local11, local06
1da08     2E 32 0E F2 | 	cmp	local11, #46 wz
1da0c     2C 00 90 5D |  if_ne	jmp	#LR__2542
1da10     17 33 02 F6 | 	mov	local11, local09
1da14     02 32 06 F1 | 	add	local11, #2
1da18     0F 33 02 F1 | 	add	local11, local01
1da1c     19 31 C2 FA | 	rdbyte	local10, local11
1da20     2F 30 0E F2 | 	cmp	local10, #47 wz
1da24     17 37 02 56 |  if_ne	mov	local13, local09
1da28     02 36 06 51 |  if_ne	add	local13, #2
1da2c     0F 37 02 51 |  if_ne	add	local13, local01
1da30     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
1da34     01 2E 06 A1 |  if_e	add	local09, #1
1da38     BC FF 9F AD |  if_e	jmp	#LR__2540
1da3c                 | LR__2541
1da3c                 | LR__2542
1da3c     00 22 0E F2 | 	cmp	local03, #0 wz
1da40     11 13 02 56 |  if_ne	mov	arg01, local03
1da44     0F 15 02 56 |  if_ne	mov	arg02, local01
1da48     00 17 06 56 |  if_ne	mov	arg03, #256
1da4c     14 48 B0 5D |  if_ne	call	#__system__strncpy
1da50     0F 15 02 F6 | 	mov	arg02, local01
1da54     17 15 02 F1 | 	add	arg02, local09
1da58     01 14 06 F1 | 	add	arg02, #1
1da5c     0F 13 02 F6 | 	mov	arg01, local01
1da60     D4 F5 BF FD | 	call	#__system____builtin_strcpy
1da64     0F 13 02 F6 | 	mov	arg01, local01
1da68     09 2D 02 F6 | 	mov	local08, arg01
1da6c     97 06 48 FB | 	callpa	#(@LR__2544-@LR__2543)>>2,fcache_load_ptr_
1da70                 | LR__2543
1da70     16 FB C9 FA | 	rdbyte	result1, local08 wz
1da74     01 2C 06 51 |  if_ne	add	local08, #1
1da78     F4 FF 9F 5D |  if_ne	jmp	#LR__2543
1da7c                 | LR__2544
1da7c     09 2D 82 F1 | 	sub	local08, arg01
1da80     16 2F 02 F6 | 	mov	local09, local08
1da84                 | LR__2545
1da84     01 2E 56 F2 | 	cmps	local09, #1 wc
1da88     70 00 90 CD |  if_b	jmp	#LR__2546
1da8c     17 25 02 F6 | 	mov	local04, local09
1da90     0F 25 02 F1 | 	add	local04, local01
1da94     12 33 C2 FA | 	rdbyte	local11, local04
1da98     2F 32 0E F2 | 	cmp	local11, #47 wz
1da9c     17 33 02 A6 |  if_e	mov	local11, local09
1daa0     0F 33 02 A1 |  if_e	add	local11, local01
1daa4     19 01 48 AC |  if_e	wrbyte	#0, local11
1daa8     01 2E 86 A1 |  if_e	sub	local09, #1
1daac     D4 FF 9F AD |  if_e	jmp	#LR__2545
1dab0     17 25 02 F6 | 	mov	local04, local09
1dab4     0F 25 02 F1 | 	add	local04, local01
1dab8     12 33 C2 FA | 	rdbyte	local11, local04
1dabc     2E 32 0E F2 | 	cmp	local11, #46 wz
1dac0     38 00 90 5D |  if_ne	jmp	#LR__2546
1dac4     02 2E 56 F2 | 	cmps	local09, #2 wc
1dac8     30 00 90 CD |  if_b	jmp	#LR__2546
1dacc     17 39 02 F6 | 	mov	local14, local09
1dad0     01 38 86 F1 | 	sub	local14, #1
1dad4     0F 39 02 F1 | 	add	local14, local01
1dad8     1C 27 C2 FA | 	rdbyte	local05, local14
1dadc     2F 26 0E F2 | 	cmp	local05, #47 wz
1dae0     18 00 90 5D |  if_ne	jmp	#LR__2546
1dae4     17 25 02 F6 | 	mov	local04, local09
1dae8     01 24 86 F1 | 	sub	local04, #1
1daec     0F 25 02 F1 | 	add	local04, local01
1daf0     12 01 48 FC | 	wrbyte	#0, local04
1daf4     02 2E 86 F1 | 	sub	local09, #2
1daf8     88 FF 9F FD | 	jmp	#LR__2545
1dafc                 | LR__2546
1dafc     1A FB 01 F6 | 	mov	result1, local12
1db00     1C 00 90 FD | 	jmp	#LR__2550
1db04                 | LR__2547
1db04                 | LR__2548
1db04     01 2A 06 F1 | 	add	local07, #1
1db08     2C FE 9F FD | 	jmp	#LR__2537
1db0c                 | LR__2549
1db0c     03 00 00 FF 
1db10     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
1db14     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1db18     03 00 00 FF 
1db1c     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
1db20                 | LR__2550
1db20     A7 F0 03 F6 | 	mov	ptra, fp
1db24     B2 00 A0 FD | 	call	#popregs_
1db28                 | __system____getvfsforfile_ret
1db28     2D 00 64 FD | 	ret
1db2c                 | 
1db2c                 | __system___basic_open
1db2c     05 4A 05 F6 | 	mov	COUNT_, #5
1db30     A8 00 A0 FD | 	call	#pushregs_
1db34     0A 1F 02 F6 | 	mov	local01, arg02
1db38     0B 21 02 F6 | 	mov	local02, arg03
1db3c     0C 23 02 F6 | 	mov	local03, arg04
1db40     00 24 06 F6 | 	mov	local04, #0
1db44     F4 46 B0 FD | 	call	#__system____getftab
1db48     FD 26 0A F6 | 	mov	local05, result1 wz
1db4c     18 00 90 5D |  if_ne	jmp	#LR__2560
1db50     EE 12 02 F6 | 	mov	arg01, abortchain
1db54     0C 14 06 F6 | 	mov	arg02, #12
1db58     01 16 06 F6 | 	mov	arg03, #1
1db5c     DA 00 A0 FD | 	call	#__longjmp
1db60     01 FA 65 F6 | 	neg	result1, #1
1db64     10 01 90 FD | 	jmp	#LR__2569
1db68                 | LR__2560
1db68     08 26 06 F1 | 	add	local05, #8
1db6c     13 FB 09 FB | 	rdlong	result1, local05 wz
1db70     08 26 86 F1 | 	sub	local05, #8
1db74     13 13 02 56 |  if_ne	mov	arg01, local05
1db78     50 3E B0 5D |  if_ne	call	#__system___closeraw
1db7c     00 1E 0E F2 | 	cmp	local01, #0 wz
1db80     00 20 0E A2 |  if_e	cmp	local02, #0 wz
1db84     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1db88     3C 00 90 AD |  if_e	jmp	#LR__2562
1db8c     0C 12 06 F6 | 	mov	arg01, #12
1db90     38 33 B0 FD | 	call	#__system___gc_alloc_managed
1db94     FD 24 0A F6 | 	mov	local04, result1 wz
1db98     18 00 90 5D |  if_ne	jmp	#LR__2561
1db9c     EE 12 02 F6 | 	mov	arg01, abortchain
1dba0     07 14 06 F6 | 	mov	arg02, #7
1dba4     01 16 06 F6 | 	mov	arg03, #1
1dba8     DA 00 A0 FD | 	call	#__longjmp
1dbac     01 FA 65 F6 | 	neg	result1, #1
1dbb0     C4 00 90 FD | 	jmp	#LR__2569
1dbb4                 | LR__2561
1dbb4     12 01 68 FC | 	wrlong	#0, local04
1dbb8     04 24 06 F1 | 	add	local04, #4
1dbbc     12 01 68 FC | 	wrlong	#0, local04
1dbc0     04 24 86 F1 | 	sub	local04, #4
1dbc4     13 25 62 FC | 	wrlong	local04, local05
1dbc8                 | LR__2562
1dbc8     00 1E 0E F2 | 	cmp	local01, #0 wz
1dbcc     1C 00 90 AD |  if_e	jmp	#LR__2563
1dbd0     12 1F 62 FC | 	wrlong	local01, local04
1dbd4     12 FB 01 F6 | 	mov	result1, local04
1dbd8     77 FA 25 F4 | 	bith	result1, #119
1dbdc     1C 26 06 F1 | 	add	local05, #28
1dbe0     13 FB 61 FC | 	wrlong	result1, local05
1dbe4     1C 26 86 F1 | 	sub	local05, #28
1dbe8     0C 00 90 FD | 	jmp	#LR__2564
1dbec                 | LR__2563
1dbec     1C 26 06 F1 | 	add	local05, #28
1dbf0     13 01 68 FC | 	wrlong	#0, local05
1dbf4     1C 26 86 F1 | 	sub	local05, #28
1dbf8                 | LR__2564
1dbf8     00 20 0E F2 | 	cmp	local02, #0 wz
1dbfc     28 00 90 AD |  if_e	jmp	#LR__2565
1dc00     04 24 06 F1 | 	add	local04, #4
1dc04     12 21 62 FC | 	wrlong	local02, local04
1dc08     04 24 86 F1 | 	sub	local04, #4
1dc0c     12 FB 01 F6 | 	mov	result1, local04
1dc10     00 C8 03 FF 
1dc14     00 FA 45 F5 | 	or	result1, ##126877696
1dc18     20 26 06 F1 | 	add	local05, #32
1dc1c     13 FB 61 FC | 	wrlong	result1, local05
1dc20     20 26 86 F1 | 	sub	local05, #32
1dc24     0C 00 90 FD | 	jmp	#LR__2566
1dc28                 | LR__2565
1dc28     20 26 06 F1 | 	add	local05, #32
1dc2c     13 01 68 FC | 	wrlong	#0, local05
1dc30     20 26 86 F1 | 	sub	local05, #32
1dc34                 | LR__2566
1dc34     00 22 0E F2 | 	cmp	local03, #0 wz
1dc38     24 00 90 AD |  if_e	jmp	#LR__2567
1dc3c     08 24 06 F1 | 	add	local04, #8
1dc40     12 23 62 FC | 	wrlong	local03, local04
1dc44     08 24 86 F1 | 	sub	local04, #8
1dc48     00 D0 03 FF 
1dc4c     00 24 46 F5 | 	or	local04, ##127926272
1dc50     24 26 06 F1 | 	add	local05, #36
1dc54     13 25 62 FC | 	wrlong	local04, local05
1dc58     24 26 86 F1 | 	sub	local05, #36
1dc5c     0C 00 90 FD | 	jmp	#LR__2568
1dc60                 | LR__2567
1dc60     24 26 06 F1 | 	add	local05, #36
1dc64     13 01 68 FC | 	wrlong	#0, local05
1dc68     24 26 86 F1 | 	sub	local05, #36
1dc6c                 | LR__2568
1dc6c     08 26 06 F1 | 	add	local05, #8
1dc70     13 0F 68 FC | 	wrlong	#7, local05
1dc74     00 FA 05 F6 | 	mov	result1, #0
1dc78                 | LR__2569
1dc78     A7 F0 03 F6 | 	mov	ptra, fp
1dc7c     B2 00 A0 FD | 	call	#popregs_
1dc80                 | __system___basic_open_ret
1dc80     2D 00 64 FD | 	ret
1dc84                 | 
1dc84                 | __system___basic_open_string
1dc84     04 4A 05 F6 | 	mov	COUNT_, #4
1dc88     A8 00 A0 FD | 	call	#pushregs_
1dc8c     0A 1F 02 F6 | 	mov	local01, arg02
1dc90     0B 21 02 F6 | 	mov	local02, arg03
1dc94     A4 45 B0 FD | 	call	#__system____getftab
1dc98     FD 22 0A F6 | 	mov	local03, result1 wz
1dc9c     18 00 90 5D |  if_ne	jmp	#LR__2570
1dca0     EE 12 02 F6 | 	mov	arg01, abortchain
1dca4     0C 14 06 F6 | 	mov	arg02, #12
1dca8     01 16 06 F6 | 	mov	arg03, #1
1dcac     DA 00 A0 FD | 	call	#__longjmp
1dcb0     01 FA 65 F6 | 	neg	result1, #1
1dcb4     58 00 90 FD | 	jmp	#LR__2572
1dcb8                 | LR__2570
1dcb8     08 22 06 F1 | 	add	local03, #8
1dcbc     11 19 0A FB | 	rdlong	arg04, local03 wz
1dcc0     08 22 86 F1 | 	sub	local03, #8
1dcc4     11 13 02 56 |  if_ne	mov	arg01, local03
1dcc8     00 3D B0 5D |  if_ne	call	#__system___closeraw
1dccc     0F 15 02 F6 | 	mov	arg02, local01
1dcd0     10 17 02 F6 | 	mov	arg03, local02
1dcd4     11 13 02 F6 | 	mov	arg01, local03
1dcd8     B6 19 06 F6 | 	mov	arg04, #438
1dcdc     E8 39 B0 FD | 	call	#__system___openraw
1dce0     FD 24 02 F6 | 	mov	local04, result1
1dce4     00 24 56 F2 | 	cmps	local04, #0 wc
1dce8     20 00 90 3D |  if_ae	jmp	#LR__2571
1dcec     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1dcf0     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1dcf4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1dcf8     EE 12 02 F6 | 	mov	arg01, abortchain
1dcfc     01 16 06 F6 | 	mov	arg03, #1
1dd00     DA 00 A0 FD | 	call	#__longjmp
1dd04     01 FA 65 F6 | 	neg	result1, #1
1dd08     04 00 90 FD | 	jmp	#LR__2572
1dd0c                 | LR__2571
1dd0c     12 FB 01 F6 | 	mov	result1, local04
1dd10                 | LR__2572
1dd10     A7 F0 03 F6 | 	mov	ptra, fp
1dd14     B2 00 A0 FD | 	call	#popregs_
1dd18                 | __system___basic_open_string_ret
1dd18     2D 00 64 FD | 	ret
1dd1c                 | 
1dd1c                 | __system___basic_print_nl
1dd1c     0A 14 06 F6 | 	mov	arg02, #10
1dd20     00 16 06 F6 | 	mov	arg03, #0
1dd24     08 00 B0 FD | 	call	#__system___basic_print_char
1dd28     01 FA 05 F6 | 	mov	result1, #1
1dd2c                 | __system___basic_print_nl_ret
1dd2c     2D 00 64 FD | 	ret
1dd30                 | 
1dd30                 | __system___basic_print_char
1dd30     03 4A 05 F6 | 	mov	COUNT_, #3
1dd34     A8 00 A0 FD | 	call	#pushregs_
1dd38     0A 1F 02 F6 | 	mov	local01, arg02
1dd3c     50 4C B0 FD | 	call	#__system___gettxfunc
1dd40     FD 20 0A F6 | 	mov	local02, result1 wz
1dd44     00 FA 05 A6 |  if_e	mov	result1, #0
1dd48     30 00 90 AD |  if_e	jmp	#LR__2580
1dd4c     10 23 02 F6 | 	mov	local03, local02
1dd50     13 20 46 F7 | 	zerox	local02, #19
1dd54     14 22 46 F0 | 	shr	local03, #20
1dd58     02 22 66 F0 | 	shl	local03, #2
1dd5c     ED 22 02 F1 | 	add	local03, __methods__
1dd60     11 23 02 FB | 	rdlong	local03, local03
1dd64     0F 13 02 F6 | 	mov	arg01, local01
1dd68     F2 1E 02 F6 | 	mov	local01, objptr
1dd6c     10 E5 01 F6 | 	mov	objptr, local02
1dd70     2D 22 62 FD | 	call	local03
1dd74     0F E5 01 F6 | 	mov	objptr, local01
1dd78     01 FA 05 F6 | 	mov	result1, #1
1dd7c                 | LR__2580
1dd7c     A7 F0 03 F6 | 	mov	ptra, fp
1dd80     B2 00 A0 FD | 	call	#popregs_
1dd84                 | __system___basic_print_char_ret
1dd84     2D 00 64 FD | 	ret
1dd88                 | 
1dd88                 | __system___basic_print_string
1dd88     03 4A 05 F6 | 	mov	COUNT_, #3
1dd8c     A8 00 A0 FD | 	call	#pushregs_
1dd90     0A 1F 02 F6 | 	mov	local01, arg02
1dd94     0B 21 02 F6 | 	mov	local02, arg03
1dd98     F4 4B B0 FD | 	call	#__system___gettxfunc
1dd9c     FD 22 0A F6 | 	mov	local03, result1 wz
1dda0     00 FA 05 A6 |  if_e	mov	result1, #0
1dda4     18 00 90 AD |  if_e	jmp	#LR__2590
1dda8     00 1E 0E F2 | 	cmp	local01, #0 wz
1ddac     00 FA 05 A6 |  if_e	mov	result1, #0
1ddb0     11 13 02 56 |  if_ne	mov	arg01, local03
1ddb4     10 15 02 56 |  if_ne	mov	arg02, local02
1ddb8     0F 17 02 56 |  if_ne	mov	arg03, local01
1ddbc     C0 01 B0 5D |  if_ne	call	#__system___fmtstr
1ddc0                 | LR__2590
1ddc0     A7 F0 03 F6 | 	mov	ptra, fp
1ddc4     B2 00 A0 FD | 	call	#popregs_
1ddc8                 | __system___basic_print_string_ret
1ddc8     2D 00 64 FD | 	ret
1ddcc                 | 
1ddcc                 | __system___basic_print_integer
1ddcc     04 4A 05 F6 | 	mov	COUNT_, #4
1ddd0     A8 00 A0 FD | 	call	#pushregs_
1ddd4     0A 1F 02 F6 | 	mov	local01, arg02
1ddd8     0B 21 02 F6 | 	mov	local02, arg03
1dddc     0C 23 02 F6 | 	mov	local03, arg04
1dde0     AC 4B B0 FD | 	call	#__system___gettxfunc
1dde4     FD 24 0A F6 | 	mov	local04, result1 wz
1dde8     00 FA 05 A6 |  if_e	mov	result1, #0
1ddec     12 13 02 56 |  if_ne	mov	arg01, local04
1ddf0     10 15 02 56 |  if_ne	mov	arg02, local02
1ddf4     0F 17 02 56 |  if_ne	mov	arg03, local01
1ddf8     11 19 02 56 |  if_ne	mov	arg04, local03
1ddfc     6C 02 B0 5D |  if_ne	call	#__system___fmtnum
1de00     A7 F0 03 F6 | 	mov	ptra, fp
1de04     B2 00 A0 FD | 	call	#popregs_
1de08                 | __system___basic_print_integer_ret
1de08     2D 00 64 FD | 	ret
1de0c                 | 
1de0c                 | __system___basic_print_unsigned
1de0c     03 4A 05 F6 | 	mov	COUNT_, #3
1de10     A8 00 A0 FD | 	call	#pushregs_
1de14     0A 1F 02 F6 | 	mov	local01, arg02
1de18     0B 21 02 F6 | 	mov	local02, arg03
1de1c     0C 23 02 F6 | 	mov	local03, arg04
1de20     6C 4B B0 FD | 	call	#__system___gettxfunc
1de24     FD 12 0A F6 | 	mov	arg01, result1 wz
1de28     00 FA 05 A6 |  if_e	mov	result1, #0
1de2c     3A 20 26 54 |  if_ne	bith	local02, #58
1de30     10 15 02 56 |  if_ne	mov	arg02, local02
1de34     0F 17 02 56 |  if_ne	mov	arg03, local01
1de38     11 19 02 56 |  if_ne	mov	arg04, local03
1de3c     2C 02 B0 5D |  if_ne	call	#__system___fmtnum
1de40     A7 F0 03 F6 | 	mov	ptra, fp
1de44     B2 00 A0 FD | 	call	#popregs_
1de48                 | __system___basic_print_unsigned_ret
1de48     2D 00 64 FD | 	ret
1de4c                 | 
1de4c                 | __system___basic_get_char
1de4c     03 4A 05 F6 | 	mov	COUNT_, #3
1de50     A8 00 A0 FD | 	call	#pushregs_
1de54     7C 4B B0 FD | 	call	#__system___getrxfunc
1de58     FD 1E 0A F6 | 	mov	local01, result1 wz
1de5c     01 FA 65 A6 |  if_e	neg	result1, #1
1de60     28 00 90 AD |  if_e	jmp	#LR__2600
1de64     0F 21 02 F6 | 	mov	local02, local01
1de68     13 1E 46 F7 | 	zerox	local01, #19
1de6c     14 20 46 F0 | 	shr	local02, #20
1de70     02 20 66 F0 | 	shl	local02, #2
1de74     ED 20 02 F1 | 	add	local02, __methods__
1de78     10 21 02 FB | 	rdlong	local02, local02
1de7c     F2 22 02 F6 | 	mov	local03, objptr
1de80     0F E5 01 F6 | 	mov	objptr, local01
1de84     2D 20 62 FD | 	call	local02
1de88     11 E5 01 F6 | 	mov	objptr, local03
1de8c                 | LR__2600
1de8c     A7 F0 03 F6 | 	mov	ptra, fp
1de90     B2 00 A0 FD | 	call	#popregs_
1de94                 | __system___basic_get_char_ret
1de94     2D 00 64 FD | 	ret
1de98                 | 
1de98                 | __system___basic_get
1de98     04 4A 05 F6 | 	mov	COUNT_, #4
1de9c     A8 00 A0 FD | 	call	#pushregs_
1dea0     0D 1F 02 F6 | 	mov	local01, arg05
1dea4     0F 19 02 FD | 	qmul	arg04, local01
1dea8     09 21 02 F6 | 	mov	local02, arg01
1deac     0B 23 02 F6 | 	mov	local03, arg03
1deb0     00 14 0E F2 | 	cmp	arg02, #0 wz
1deb4     01 14 86 51 |  if_ne	sub	arg02, #1
1deb8     10 13 02 56 |  if_ne	mov	arg01, local02
1debc     00 16 06 56 |  if_ne	mov	arg03, #0
1dec0     18 24 62 FD | 	getqx	local04
1dec4     BC 41 B0 5D |  if_ne	call	#__system__lseek
1dec8     11 15 02 F6 | 	mov	arg02, local03
1decc     12 17 02 F6 | 	mov	arg03, local04
1ded0     10 13 02 F6 | 	mov	arg01, local02
1ded4     34 41 B0 FD | 	call	#__system__read
1ded8     FD 24 02 F6 | 	mov	local04, result1
1dedc     01 24 56 F2 | 	cmps	local04, #1 wc
1dee0     10 00 90 CD |  if_b	jmp	#LR__2610
1dee4     12 65 02 F6 | 	mov	muldiva_, local04
1dee8     0F 67 02 F6 | 	mov	muldivb_, local01
1deec     BA 00 A0 FD | 	call	#divide_
1def0     33 25 02 F6 | 	mov	local04, muldivb_
1def4                 | LR__2610
1def4     12 FB 01 F6 | 	mov	result1, local04
1def8     A7 F0 03 F6 | 	mov	ptra, fp
1defc     B2 00 A0 FD | 	call	#popregs_
1df00                 | __system___basic_get_ret
1df00     2D 00 64 FD | 	ret
1df04                 | 
1df04                 | __system____lockio
1df04     0C 4B B0 FD | 	call	#__system___getiolock_0474
1df08     FD 12 02 F6 | 	mov	arg01, result1
1df0c     74 F1 BF FD | 	call	#__system___lockmem
1df10     00 FA 05 F6 | 	mov	result1, #0
1df14                 | __system____lockio_ret
1df14     2D 00 64 FD | 	ret
1df18                 | 
1df18                 | __system____unlockio
1df18     F8 4A B0 FD | 	call	#__system___getiolock_0474
1df1c     FD 00 68 FC | 	wrlong	#0, result1
1df20     00 FA 05 F6 | 	mov	result1, #0
1df24                 | __system____unlockio_ret
1df24     2D 00 64 FD | 	ret
1df28                 | 
1df28                 | __system___fmtchar
1df28     00 4A 05 F6 | 	mov	COUNT_, #0
1df2c     A8 00 A0 FD | 	call	#pushregs_
1df30     10 F0 07 F1 | 	add	ptra, #16
1df34     04 4E 05 F1 | 	add	fp, #4
1df38     A7 12 62 FC | 	wrlong	arg01, fp
1df3c     04 4E 05 F1 | 	add	fp, #4
1df40     A7 14 62 FC | 	wrlong	arg02, fp
1df44     04 4E 05 F1 | 	add	fp, #4
1df48     A7 16 62 FC | 	wrlong	arg03, fp
1df4c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1df50     A7 16 62 FC | 	wrlong	arg03, fp
1df54     08 4E 85 F1 | 	sub	fp, #8
1df58     A7 12 02 FB | 	rdlong	arg01, fp
1df5c     04 4E 05 F1 | 	add	fp, #4
1df60     A7 14 02 FB | 	rdlong	arg02, fp
1df64     04 4E 05 F1 | 	add	fp, #4
1df68     A7 16 02 F6 | 	mov	arg03, fp
1df6c     0C 4E 85 F1 | 	sub	fp, #12
1df70     0C 00 B0 FD | 	call	#__system___fmtstr
1df74     A7 F0 03 F6 | 	mov	ptra, fp
1df78     B2 00 A0 FD | 	call	#popregs_
1df7c                 | __system___fmtchar_ret
1df7c     2D 00 64 FD | 	ret
1df80                 | 
1df80                 | __system___fmtstr
1df80     09 4A 05 F6 | 	mov	COUNT_, #9
1df84     A8 00 A0 FD | 	call	#pushregs_
1df88     09 1F 02 F6 | 	mov	local01, arg01
1df8c     0A 21 02 F6 | 	mov	local02, arg02
1df90     0B 23 02 F6 | 	mov	local03, arg03
1df94     10 19 E2 F8 | 	getbyte	arg04, local02, #0
1df98     11 13 02 F6 | 	mov	arg01, local03
1df9c     09 25 02 F6 | 	mov	local04, arg01
1dfa0     97 06 48 FB | 	callpa	#(@LR__2621-@LR__2620)>>2,fcache_load_ptr_
1dfa4                 | LR__2620
1dfa4     12 FB C9 FA | 	rdbyte	result1, local04 wz
1dfa8     01 24 06 51 |  if_ne	add	local04, #1
1dfac     F4 FF 9F 5D |  if_ne	jmp	#LR__2620
1dfb0                 | LR__2621
1dfb0     09 25 82 F1 | 	sub	local04, arg01
1dfb4     00 18 0E F2 | 	cmp	arg04, #0 wz
1dfb8     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1dfbc     10 15 02 F6 | 	mov	arg02, local02
1dfc0     12 17 02 F6 | 	mov	arg03, local04
1dfc4     0F 13 02 F6 | 	mov	arg01, local01
1dfc8     02 18 06 F6 | 	mov	arg04, #2
1dfcc     60 46 B0 FD | 	call	#__system___fmtpad
1dfd0     FD 26 02 F6 | 	mov	local05, result1
1dfd4     00 26 56 F2 | 	cmps	local05, #0 wc
1dfd8     13 FB 01 C6 |  if_b	mov	result1, local05
1dfdc     80 00 90 CD |  if_b	jmp	#LR__2624
1dfe0     01 24 56 F2 | 	cmps	local04, #1 wc
1dfe4     50 00 90 CD |  if_b	jmp	#LR__2623
1dfe8     12 29 02 F6 | 	mov	local06, local04
1dfec                 | LR__2622
1dfec     0F 2B 02 F6 | 	mov	local07, local01
1dff0     0F 2D 02 F6 | 	mov	local08, local01
1dff4     13 2A 46 F7 | 	zerox	local07, #19
1dff8     14 2C 46 F0 | 	shr	local08, #20
1dffc     02 2C 66 F0 | 	shl	local08, #2
1e000     ED 2C 02 F1 | 	add	local08, __methods__
1e004     16 2D 02 FB | 	rdlong	local08, local08
1e008     11 13 C2 FA | 	rdbyte	arg01, local03
1e00c     F2 2E 02 F6 | 	mov	local09, objptr
1e010     15 E5 01 F6 | 	mov	objptr, local07
1e014     01 22 06 F1 | 	add	local03, #1
1e018     2D 2C 62 FD | 	call	local08
1e01c     17 E5 01 F6 | 	mov	objptr, local09
1e020     FD 2E 02 F6 | 	mov	local09, result1
1e024     00 2E 56 F2 | 	cmps	local09, #0 wc
1e028     17 FB 01 C6 |  if_b	mov	result1, local09
1e02c     30 00 90 CD |  if_b	jmp	#LR__2624
1e030     17 27 02 F1 | 	add	local05, local09
1e034     ED 29 6E FB | 	djnz	local06, #LR__2622
1e038                 | LR__2623
1e038     10 15 02 F6 | 	mov	arg02, local02
1e03c     12 17 02 F6 | 	mov	arg03, local04
1e040     0F 13 02 F6 | 	mov	arg01, local01
1e044     01 18 06 F6 | 	mov	arg04, #1
1e048     E4 45 B0 FD | 	call	#__system___fmtpad
1e04c     FD 2E 02 F6 | 	mov	local09, result1
1e050     00 2E 56 F2 | 	cmps	local09, #0 wc
1e054     17 FB 01 C6 |  if_b	mov	result1, local09
1e058     17 27 02 31 |  if_ae	add	local05, local09
1e05c     13 FB 01 36 |  if_ae	mov	result1, local05
1e060                 | LR__2624
1e060     A7 F0 03 F6 | 	mov	ptra, fp
1e064     B2 00 A0 FD | 	call	#popregs_
1e068                 | __system___fmtstr_ret
1e068     2D 00 64 FD | 	ret
1e06c                 | 
1e06c                 | __system___fmtnum
1e06c     0B 4A 05 F6 | 	mov	COUNT_, #11
1e070     A8 00 A0 FD | 	call	#pushregs_
1e074     09 1F 02 F6 | 	mov	local01, arg01
1e078     0A 21 02 F6 | 	mov	local02, arg02
1e07c     0B 23 02 F6 | 	mov	local03, arg03
1e080     0C 25 02 F6 | 	mov	local04, arg04
1e084     F8 27 02 F6 | 	mov	local05, ptra
1e088     13 29 02 F6 | 	mov	local06, local05
1e08c     00 2A 06 F6 | 	mov	local07, #0
1e090     10 2D 02 F6 | 	mov	local08, local02
1e094     10 2C 46 F0 | 	shr	local08, #16
1e098     3F 2C 06 F5 | 	and	local08, #63
1e09c     10 2F E2 F8 | 	getbyte	local09, local02, #0
1e0a0     10 31 02 F6 | 	mov	local10, local02
1e0a4     1A 30 46 F0 | 	shr	local10, #26
1e0a8     03 30 06 F5 | 	and	local10, #3
1e0ac     18 33 02 F6 | 	mov	local11, local10
1e0b0     01 2C 56 F2 | 	cmps	local08, #1 wc
1e0b4     44 F0 07 F1 | 	add	ptra, #68
1e0b8     01 2C 86 31 |  if_ae	sub	local08, #1
1e0bc     41 2E 56 F2 | 	cmps	local09, #65 wc
1e0c0     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1e0c4     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
1e0c8     03 32 0E F2 | 	cmp	local11, #3 wz
1e0cc     00 32 06 A6 |  if_e	mov	local11, #0
1e0d0     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1e0d4     04 32 06 46 |  if_c_and_nz	mov	local11, #4
1e0d8     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1e0dc     00 32 0E F2 | 	cmp	local11, #0 wz
1e0e0     4C 00 90 AD |  if_e	jmp	#LR__2633
1e0e4     01 2A 06 F6 | 	mov	local07, #1
1e0e8     17 2D 0A F2 | 	cmp	local08, local09 wz
1e0ec     18 00 90 5D |  if_ne	jmp	#LR__2631
1e0f0     05 2C 6E FB | 	djnz	local08, #LR__2630
1e0f4     0F 13 02 F6 | 	mov	arg01, local01
1e0f8     10 15 02 F6 | 	mov	arg02, local02
1e0fc     23 16 06 F6 | 	mov	arg03, #35
1e100     24 FE BF FD | 	call	#__system___fmtchar
1e104     88 00 90 FD | 	jmp	#LR__2637
1e108                 | LR__2630
1e108                 | LR__2631
1e108     02 32 0E F2 | 	cmp	local11, #2 wz
1e10c     14 31 02 A6 |  if_e	mov	local10, local06
1e110     01 28 06 A1 |  if_e	add	local06, #1
1e114     18 41 48 AC |  if_e	wrbyte	#32, local10
1e118     14 00 90 AD |  if_e	jmp	#LR__2632
1e11c     04 32 0E F2 | 	cmp	local11, #4 wz
1e120     14 5B 48 AC |  if_e	wrbyte	#45, local06
1e124     01 28 06 A1 |  if_e	add	local06, #1
1e128     14 57 48 5C |  if_ne	wrbyte	#43, local06
1e12c     01 28 06 51 |  if_ne	add	local06, #1
1e130                 | LR__2632
1e130                 | LR__2633
1e130     14 13 02 F6 | 	mov	arg01, local06
1e134     11 15 02 F6 | 	mov	arg02, local03
1e138     12 17 02 F6 | 	mov	arg03, local04
1e13c     16 19 02 F6 | 	mov	arg04, local08
1e140     00 1A 06 F6 | 	mov	arg05, #0
1e144     1D 20 2E F4 | 	testbn	local02, #29 wz
1e148     01 1A 06 56 |  if_ne	mov	arg05, #1
1e14c     A8 45 B0 FD | 	call	#__system___uitoa
1e150     FD 2A 02 F1 | 	add	local07, result1
1e154     17 2B 5A F2 | 	cmps	local07, local09 wcz
1e158     24 00 90 ED |  if_be	jmp	#LR__2636
1e15c     97 0E 48 FB | 	callpa	#(@LR__2635-@LR__2634)>>2,fcache_load_ptr_
1e160                 | LR__2634
1e160     17 31 02 F6 | 	mov	local10, local09
1e164     01 30 56 F2 | 	cmps	local10, #1 wc
1e168     01 2E 86 F1 | 	sub	local09, #1
1e16c     14 31 02 36 |  if_ae	mov	local10, local06
1e170     01 28 06 31 |  if_ae	add	local06, #1
1e174     18 47 48 3C |  if_ae	wrbyte	#35, local10
1e178     E4 FF 9F 3D |  if_ae	jmp	#LR__2634
1e17c                 | LR__2635
1e17c     14 01 48 FC | 	wrbyte	#0, local06
1e180                 | LR__2636
1e180     0F 13 02 F6 | 	mov	arg01, local01
1e184     10 15 02 F6 | 	mov	arg02, local02
1e188     13 17 02 F6 | 	mov	arg03, local05
1e18c     F0 FD BF FD | 	call	#__system___fmtstr
1e190                 | LR__2637
1e190     A7 F0 03 F6 | 	mov	ptra, fp
1e194     B2 00 A0 FD | 	call	#popregs_
1e198                 | __system___fmtnum_ret
1e198     2D 00 64 FD | 	ret
1e19c                 | 
1e19c                 | __system___fmtfloat
1e19c     10 4A 05 F6 | 	mov	COUNT_, #16
1e1a0     A8 00 A0 FD | 	call	#pushregs_
1e1a4     24 F1 07 F1 | 	add	ptra, #292
1e1a8     04 4E 05 F1 | 	add	fp, #4
1e1ac     A7 12 62 FC | 	wrlong	arg01, fp
1e1b0     04 4E 05 F1 | 	add	fp, #4
1e1b4     A7 14 62 FC | 	wrlong	arg02, fp
1e1b8     04 4E 05 F1 | 	add	fp, #4
1e1bc     A7 16 62 FC | 	wrlong	arg03, fp
1e1c0     04 4E 05 F1 | 	add	fp, #4
1e1c4     A7 18 62 FC | 	wrlong	arg04, fp
1e1c8     0C 4E 05 F1 | 	add	fp, #12
1e1cc     A7 14 68 FC | 	wrlong	#10, fp
1e1d0     08 4E 05 F1 | 	add	fp, #8
1e1d4     A7 00 68 FC | 	wrlong	#0, fp
1e1d8     08 4E 05 F1 | 	add	fp, #8
1e1dc     A7 00 68 FC | 	wrlong	#0, fp
1e1e0     08 4E 05 F1 | 	add	fp, #8
1e1e4     A7 00 68 FC | 	wrlong	#0, fp
1e1e8     04 4E 05 F1 | 	add	fp, #4
1e1ec     A7 04 68 FC | 	wrlong	#2, fp
1e1f0     04 4E 05 F1 | 	add	fp, #4
1e1f4     A7 00 68 FC | 	wrlong	#0, fp
1e1f8     04 4E 05 F1 | 	add	fp, #4
1e1fc     A7 00 68 FC | 	wrlong	#0, fp
1e200     04 4E 05 F1 | 	add	fp, #4
1e204     A7 00 68 FC | 	wrlong	#0, fp
1e208     04 4E 05 F1 | 	add	fp, #4
1e20c     A7 00 68 FC | 	wrlong	#0, fp
1e210     18 4E 05 F1 | 	add	fp, #24
1e214     A7 00 68 FC | 	wrlong	#0, fp
1e218     68 4E 05 F1 | 	add	fp, #104
1e21c     A7 1E 02 F6 | 	mov	local01, fp
1e220     08 4E 85 F1 | 	sub	fp, #8
1e224     A7 1E 62 FC | 	wrlong	local01, fp
1e228     04 4E 05 F1 | 	add	fp, #4
1e22c     A7 1E 62 FC | 	wrlong	local01, fp
1e230     BC 4E 85 F1 | 	sub	fp, #188
1e234     A7 1E 02 FB | 	rdlong	local01, fp
1e238     10 1E 46 F0 | 	shr	local01, #16
1e23c     3F 1E 06 F5 | 	and	local01, #63
1e240     B0 4E 05 F1 | 	add	fp, #176
1e244     A7 1E 62 FC | 	wrlong	local01, fp
1e248     B0 4E 85 F1 | 	sub	fp, #176
1e24c     A7 1E 02 FB | 	rdlong	local01, fp
1e250     1C 1E 46 F0 | 	shr	local01, #28
1e254     01 1E 06 F5 | 	and	local01, #1
1e258     08 4F 05 F1 | 	add	fp, #264
1e25c     A7 1E 62 FC | 	wrlong	local01, fp
1e260     58 4E 85 F1 | 	sub	fp, #88
1e264     A7 1E 0A FB | 	rdlong	local01, fp wz
1e268     B8 4E 85 F1 | 	sub	fp, #184
1e26c     3C 00 90 5D |  if_ne	jmp	#LR__2641
1e270     10 4E 05 F1 | 	add	fp, #16
1e274     A7 1E 02 FB | 	rdlong	local01, fp
1e278     10 4E 85 F1 | 	sub	fp, #16
1e27c     61 1E 0E F2 | 	cmp	local01, #97 wz
1e280     18 00 90 5D |  if_ne	jmp	#LR__2640
1e284     B8 4E 05 F1 | 	add	fp, #184
1e288     A7 1A 68 FC | 	wrlong	#13, fp
1e28c     84 4E 85 F1 | 	sub	fp, #132
1e290     A7 02 68 FC | 	wrlong	#1, fp
1e294     34 4E 85 F1 | 	sub	fp, #52
1e298     24 00 90 FD | 	jmp	#LR__2642
1e29c                 | LR__2640
1e29c     B8 4E 05 F1 | 	add	fp, #184
1e2a0     A7 0C 68 FC | 	wrlong	#6, fp
1e2a4     B8 4E 85 F1 | 	sub	fp, #184
1e2a8     14 00 90 FD | 	jmp	#LR__2642
1e2ac                 | LR__2641
1e2ac     B8 4E 05 F1 | 	add	fp, #184
1e2b0     A7 1E 02 FB | 	rdlong	local01, fp
1e2b4     01 1E 86 F1 | 	sub	local01, #1
1e2b8     A7 1E 62 FC | 	wrlong	local01, fp
1e2bc     B8 4E 85 F1 | 	sub	fp, #184
1e2c0                 | LR__2642
1e2c0     08 4E 05 F1 | 	add	fp, #8
1e2c4     A7 1E 02 FB | 	rdlong	local01, fp
1e2c8     16 1E 46 F0 | 	shr	local01, #22
1e2cc     03 1E 06 F5 | 	and	local01, #3
1e2d0     04 4F 05 F1 | 	add	fp, #260
1e2d4     A7 1E 62 FC | 	wrlong	local01, fp
1e2d8     04 4F 85 F1 | 	sub	fp, #260
1e2dc     A7 1E 02 FB | 	rdlong	local01, fp
1e2e0     1D 1E 46 F0 | 	shr	local01, #29
1e2e4     01 1E 06 F5 | 	and	local01, #1
1e2e8     B4 4E 05 F1 | 	add	fp, #180
1e2ec     A7 1E 62 FC | 	wrlong	local01, fp
1e2f0     B4 4E 85 F1 | 	sub	fp, #180
1e2f4     A7 1E 02 FB | 	rdlong	local01, fp
1e2f8     0F 1F EA F8 | 	getbyte	local01, local01, #1
1e2fc     60 4E 05 F1 | 	add	fp, #96
1e300     A7 1E 62 FC | 	wrlong	local01, fp
1e304     60 4E 85 F1 | 	sub	fp, #96
1e308     A7 1E 02 FB | 	rdlong	local01, fp
1e30c     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1e310     64 4E 05 F1 | 	add	fp, #100
1e314     A7 1E 62 FC | 	wrlong	local01, fp
1e318     00 1E 06 F6 | 	mov	local01, #0
1e31c     5C 4E 85 F1 | 	sub	fp, #92
1e320     A7 1A 02 FB | 	rdlong	arg05, fp
1e324     65 1A 0E F2 | 	cmp	arg05, #101 wz
1e328     01 1E 06 A6 |  if_e	mov	local01, #1
1e32c     14 4E 05 F1 | 	add	fp, #20
1e330     A7 1E 62 FC | 	wrlong	local01, fp
1e334     98 4E 05 F1 | 	add	fp, #152
1e338     A7 20 0A FB | 	rdlong	local02, fp wz
1e33c     45 1E 06 56 |  if_ne	mov	local01, #69
1e340     65 1E 06 A6 |  if_e	mov	local01, #101
1e344     8C 4E 85 F1 | 	sub	fp, #140
1e348     A7 1E 62 FC | 	wrlong	local01, fp
1e34c     20 4E 85 F1 | 	sub	fp, #32
1e350     A7 1E 02 FB | 	rdlong	local01, fp
1e354     10 4E 85 F1 | 	sub	fp, #16
1e358     61 1E 0E F2 | 	cmp	local01, #97 wz
1e35c     4C 00 90 5D |  if_ne	jmp	#LR__2643
1e360     24 4E 05 F1 | 	add	fp, #36
1e364     A7 02 68 FC | 	wrlong	#1, fp
1e368     98 4E 05 F1 | 	add	fp, #152
1e36c     A7 20 0A FB | 	rdlong	local02, fp wz
1e370     50 1E 06 56 |  if_ne	mov	local01, #80
1e374     70 1E 06 A6 |  if_e	mov	local01, #112
1e378     8C 4E 85 F1 | 	sub	fp, #140
1e37c     A7 1E 62 FC | 	wrlong	local01, fp
1e380     14 4E 85 F1 | 	sub	fp, #20
1e384     A7 04 68 FC | 	wrlong	#2, fp
1e388     1C 4E 05 F1 | 	add	fp, #28
1e38c     A7 02 68 FC | 	wrlong	#1, fp
1e390     84 4E 05 F1 | 	add	fp, #132
1e394     A7 20 0A FB | 	rdlong	local02, fp wz
1e398     58 1E 06 56 |  if_ne	mov	local01, #88
1e39c     78 1E 06 A6 |  if_e	mov	local01, #120
1e3a0     7C 4E 85 F1 | 	sub	fp, #124
1e3a4     A7 1E 62 FC | 	wrlong	local01, fp
1e3a8     40 4E 85 F1 | 	sub	fp, #64
1e3ac                 | LR__2643
1e3ac     10 4E 05 F1 | 	add	fp, #16
1e3b0     A7 1E 02 FB | 	rdlong	local01, fp
1e3b4     10 4E 85 F1 | 	sub	fp, #16
1e3b8     23 1E 0E F2 | 	cmp	local01, #35 wz
1e3bc     3C 00 90 5D |  if_ne	jmp	#LR__2646
1e3c0     48 4E 05 F1 | 	add	fp, #72
1e3c4     A7 02 68 FC | 	wrlong	#1, fp
1e3c8     C8 4E 05 F1 | 	add	fp, #200
1e3cc     A7 1E 0A FB | 	rdlong	local01, fp wz
1e3d0     10 4F 85 F1 | 	sub	fp, #272
1e3d4     18 00 90 AD |  if_e	jmp	#LR__2644
1e3d8     10 4E 05 F1 | 	add	fp, #16
1e3dc     A7 CC 68 FC | 	wrlong	#102, fp
1e3e0     00 4F 05 F1 | 	add	fp, #256
1e3e4     A7 00 68 FC | 	wrlong	#0, fp
1e3e8     10 4F 85 F1 | 	sub	fp, #272
1e3ec     0C 00 90 FD | 	jmp	#LR__2645
1e3f0                 | LR__2644
1e3f0     10 4F 05 F1 | 	add	fp, #272
1e3f4     A7 02 68 FC | 	wrlong	#1, fp
1e3f8     10 4F 85 F1 | 	sub	fp, #272
1e3fc                 | LR__2645
1e3fc                 | LR__2646
1e3fc     08 4E 05 F1 | 	add	fp, #8
1e400     A7 1E 02 FB | 	rdlong	local01, fp
1e404     1A 1E 46 F0 | 	shr	local01, #26
1e408     03 1E 06 F5 | 	and	local01, #3
1e40c     5C 4E 05 F1 | 	add	fp, #92
1e410     A7 1E 62 FC | 	wrlong	local01, fp
1e414     58 4E 85 F1 | 	sub	fp, #88
1e418     A7 FA 01 FB | 	rdlong	result1, fp
1e41c     0C 4E 85 F1 | 	sub	fp, #12
1e420     1F FA 4D F0 | 	shr	result1, #31 wz
1e424     20 00 90 AD |  if_e	jmp	#LR__2647
1e428     2C 4E 05 F1 | 	add	fp, #44
1e42c     A7 5A 68 FC | 	wrlong	#45, fp
1e430     20 4E 85 F1 | 	sub	fp, #32
1e434     A7 FA 01 FB | 	rdlong	result1, fp
1e438     1F FA E5 F4 | 	bitnot	result1, #31
1e43c     A7 FA 61 FC | 	wrlong	result1, fp
1e440     0C 4E 85 F1 | 	sub	fp, #12
1e444     3C 00 90 FD | 	jmp	#LR__2649
1e448                 | LR__2647
1e448     64 4E 05 F1 | 	add	fp, #100
1e44c     A7 1E 02 FB | 	rdlong	local01, fp
1e450     64 4E 85 F1 | 	sub	fp, #100
1e454     01 1E 0E F2 | 	cmp	local01, #1 wz
1e458     2C 4E 05 A1 |  if_e	add	fp, #44
1e45c     A7 56 68 AC |  if_e	wrlong	#43, fp
1e460     2C 4E 85 A1 |  if_e	sub	fp, #44
1e464     1C 00 90 AD |  if_e	jmp	#LR__2648
1e468     64 4E 05 F1 | 	add	fp, #100
1e46c     A7 1E 02 FB | 	rdlong	local01, fp
1e470     64 4E 85 F1 | 	sub	fp, #100
1e474     02 1E 0E F2 | 	cmp	local01, #2 wz
1e478     2C 4E 05 A1 |  if_e	add	fp, #44
1e47c     A7 40 68 AC |  if_e	wrlong	#32, fp
1e480     2C 4E 85 A1 |  if_e	sub	fp, #44
1e484                 | LR__2648
1e484                 | LR__2649
1e484     08 4E 05 F1 | 	add	fp, #8
1e488     A7 1E 02 FB | 	rdlong	local01, fp
1e48c     18 1E 46 F0 | 	shr	local01, #24
1e490     03 1E 06 F5 | 	and	local01, #3
1e494     3C 4E 05 F1 | 	add	fp, #60
1e498     A7 1E 62 FC | 	wrlong	local01, fp
1e49c     00 1E 06 F6 | 	mov	local01, #0
1e4a0     18 4E 85 F1 | 	sub	fp, #24
1e4a4     A7 22 0A FB | 	rdlong	local03, fp wz
1e4a8     2C 4E 85 F1 | 	sub	fp, #44
1e4ac     18 00 90 5D |  if_ne	jmp	#LR__2650
1e4b0     1C 4E 05 F1 | 	add	fp, #28
1e4b4     A7 24 02 FB | 	rdlong	local04, fp
1e4b8     1C 4E 85 F1 | 	sub	fp, #28
1e4bc     12 27 02 F6 | 	mov	local05, local04
1e4c0     0A 26 0E F2 | 	cmp	local05, #10 wz
1e4c4     04 00 90 AD |  if_e	jmp	#LR__2651
1e4c8                 | LR__2650
1e4c8     01 1E 66 F5 | 	xor	local01, #1
1e4cc                 | LR__2651
1e4cc     3C 4E 05 F1 | 	add	fp, #60
1e4d0     A7 1E 62 FC | 	wrlong	local01, fp
1e4d4     3C 4E 85 F1 | 	sub	fp, #60
1e4d8     00 1E 0E F2 | 	cmp	local01, #0 wz
1e4dc     0C 01 90 AD |  if_e	jmp	#LR__2653
1e4e0     44 4E 05 F1 | 	add	fp, #68
1e4e4     A7 26 02 FB | 	rdlong	local05, fp
1e4e8     44 4E 85 F1 | 	sub	fp, #68
1e4ec     13 23 02 F6 | 	mov	local03, local05
1e4f0     02 22 0E F2 | 	cmp	local03, #2 wz
1e4f4     F4 00 90 5D |  if_ne	jmp	#LR__2653
1e4f8     0C 4F 05 F1 | 	add	fp, #268
1e4fc     A7 28 02 FB | 	rdlong	local06, fp
1e500     0C 4F 85 F1 | 	sub	fp, #268
1e504     14 25 02 F6 | 	mov	local04, local06
1e508     02 24 0E F2 | 	cmp	local04, #2 wz
1e50c     DC 00 90 AD |  if_e	jmp	#LR__2653
1e510     C0 4E 05 F1 | 	add	fp, #192
1e514     A7 12 02 FB | 	rdlong	arg01, fp
1e518     94 4E 85 F1 | 	sub	fp, #148
1e51c     A7 14 02 FB | 	rdlong	arg02, fp
1e520     14 4E 05 F1 | 	add	fp, #20
1e524     A7 16 02 FB | 	rdlong	arg03, fp
1e528     40 4E 85 F1 | 	sub	fp, #64
1e52c     30 44 B0 FD | 	call	#__system__emitsign_0434
1e530     14 4F 05 F1 | 	add	fp, #276
1e534     A7 FA 61 FC | 	wrlong	result1, fp
1e538     14 4F 85 F1 | 	sub	fp, #276
1e53c     00 FA 55 F2 | 	cmps	result1, #0 wc
1e540     14 4F 05 C1 |  if_b	add	fp, #276
1e544     A7 FA 01 CB |  if_b	rdlong	result1, fp
1e548     14 4F 85 C1 |  if_b	sub	fp, #276
1e54c     6C 0B 90 CD |  if_b	jmp	#LR__2703
1e550     C0 4E 05 F1 | 	add	fp, #192
1e554     A7 1E 02 FB | 	rdlong	local01, fp
1e558     54 4E 05 F1 | 	add	fp, #84
1e55c     A7 26 02 FB | 	rdlong	local05, fp
1e560     13 23 02 F6 | 	mov	local03, local05
1e564     13 1F 02 F1 | 	add	local01, local05
1e568     54 4E 85 F1 | 	sub	fp, #84
1e56c     A7 1E 62 FC | 	wrlong	local01, fp
1e570     58 4E 85 F1 | 	sub	fp, #88
1e574     A7 1E 0A FB | 	rdlong	local01, fp wz
1e578     68 4E 85 F1 | 	sub	fp, #104
1e57c     60 00 90 AD |  if_e	jmp	#LR__2652
1e580     68 4E 05 F1 | 	add	fp, #104
1e584     A7 1E 02 FB | 	rdlong	local01, fp
1e588     AC 4E 05 F1 | 	add	fp, #172
1e58c     A7 22 02 FB | 	rdlong	local03, fp
1e590     11 1F 82 F1 | 	sub	local01, local03
1e594     AC 4E 85 F1 | 	sub	fp, #172
1e598     A7 1E 62 FC | 	wrlong	local01, fp
1e59c     68 4E 85 F1 | 	sub	fp, #104
1e5a0     00 1E 56 F2 | 	cmps	local01, #0 wc
1e5a4     68 4E 05 C1 |  if_b	add	fp, #104
1e5a8     A7 00 68 CC |  if_b	wrlong	#0, fp
1e5ac     68 4E 85 C1 |  if_b	sub	fp, #104
1e5b0     08 4E 05 F1 | 	add	fp, #8
1e5b4     A7 1E 02 FB | 	rdlong	local01, fp
1e5b8     E8 1E 06 F4 | 	bitl	local01, #232
1e5bc     A7 1E 62 FC | 	wrlong	local01, fp
1e5c0     60 4E 05 F1 | 	add	fp, #96
1e5c4     A7 26 02 FB | 	rdlong	local05, fp
1e5c8     13 23 02 F6 | 	mov	local03, local05
1e5cc     08 22 66 F0 | 	shl	local03, #8
1e5d0     11 1F 42 F5 | 	or	local01, local03
1e5d4     60 4E 85 F1 | 	sub	fp, #96
1e5d8     A7 1E 62 FC | 	wrlong	local01, fp
1e5dc     08 4E 85 F1 | 	sub	fp, #8
1e5e0                 | LR__2652
1e5e0     3C 4E 05 F1 | 	add	fp, #60
1e5e4     A7 00 68 FC | 	wrlong	#0, fp
1e5e8     3C 4E 85 F1 | 	sub	fp, #60
1e5ec                 | LR__2653
1e5ec     0C 4E 05 F1 | 	add	fp, #12
1e5f0     A7 12 02 FB | 	rdlong	arg01, fp
1e5f4     0C 4E 85 F1 | 	sub	fp, #12
1e5f8     04 1F B0 FD | 	call	#__system____builtin_ilogb
1e5fc     FF FF 3F FF 
1e600     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1e604     50 00 90 5D |  if_ne	jmp	#LR__2655
1e608     2C 4E 05 F1 | 	add	fp, #44
1e60c     A7 1E 0A FB | 	rdlong	local01, fp wz
1e610     2C 4E 85 F1 | 	sub	fp, #44
1e614     24 00 90 AD |  if_e	jmp	#LR__2654
1e618     C0 4E 05 F1 | 	add	fp, #192
1e61c     A7 20 02 FB | 	rdlong	local02, fp
1e620     10 23 02 F6 | 	mov	local03, local02
1e624     01 22 06 F1 | 	add	local03, #1
1e628     A7 22 62 FC | 	wrlong	local03, fp
1e62c     94 4E 85 F1 | 	sub	fp, #148
1e630     A7 24 02 FB | 	rdlong	local04, fp
1e634     2C 4E 85 F1 | 	sub	fp, #44
1e638     10 25 42 FC | 	wrbyte	local04, local02
1e63c                 | LR__2654
1e63c     C0 4E 05 F1 | 	add	fp, #192
1e640     A7 12 02 FB | 	rdlong	arg01, fp
1e644     C0 4E 85 F1 | 	sub	fp, #192
1e648     63 01 00 FF 
1e64c     32 14 06 F6 | 	mov	arg02, ##@LR__4591
1e650     E4 E9 BF FD | 	call	#__system____builtin_strcpy
1e654     A4 08 90 FD | 	jmp	#LR__2691
1e658                 | LR__2655
1e658     0C 4E 05 F1 | 	add	fp, #12
1e65c     A7 20 02 FB | 	rdlong	local02, fp
1e660     0C 4E 85 F1 | 	sub	fp, #12
1e664     10 13 02 F6 | 	mov	arg01, local02
1e668     94 1E B0 FD | 	call	#__system____builtin_ilogb
1e66c     00 00 40 FF 
1e670     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1e674     50 00 90 5D |  if_ne	jmp	#LR__2657
1e678     2C 4E 05 F1 | 	add	fp, #44
1e67c     A7 1E 0A FB | 	rdlong	local01, fp wz
1e680     2C 4E 85 F1 | 	sub	fp, #44
1e684     24 00 90 AD |  if_e	jmp	#LR__2656
1e688     C0 4E 05 F1 | 	add	fp, #192
1e68c     A7 20 02 FB | 	rdlong	local02, fp
1e690     10 23 02 F6 | 	mov	local03, local02
1e694     01 22 06 F1 | 	add	local03, #1
1e698     A7 22 62 FC | 	wrlong	local03, fp
1e69c     94 4E 85 F1 | 	sub	fp, #148
1e6a0     A7 24 02 FB | 	rdlong	local04, fp
1e6a4     2C 4E 85 F1 | 	sub	fp, #44
1e6a8     10 25 42 FC | 	wrbyte	local04, local02
1e6ac                 | LR__2656
1e6ac     C0 4E 05 F1 | 	add	fp, #192
1e6b0     A7 12 02 FB | 	rdlong	arg01, fp
1e6b4     C0 4E 85 F1 | 	sub	fp, #192
1e6b8     63 01 00 FF 
1e6bc     36 14 06 F6 | 	mov	arg02, ##@LR__4592
1e6c0     74 E9 BF FD | 	call	#__system____builtin_strcpy
1e6c4     34 08 90 FD | 	jmp	#LR__2691
1e6c8                 | LR__2657
1e6c8     10 4E 05 F1 | 	add	fp, #16
1e6cc     A7 1E 02 FB | 	rdlong	local01, fp
1e6d0     10 4E 85 F1 | 	sub	fp, #16
1e6d4     67 1E 0E F2 | 	cmp	local01, #103 wz
1e6d8     10 4E 05 51 |  if_ne	add	fp, #16
1e6dc     A7 22 02 5B |  if_ne	rdlong	local03, fp
1e6e0     10 4E 85 51 |  if_ne	sub	fp, #16
1e6e4     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1e6e8     94 01 90 5D |  if_ne	jmp	#LR__2662
1e6ec     0C 4E 05 F1 | 	add	fp, #12
1e6f0     A7 12 02 FB | 	rdlong	arg01, fp
1e6f4     08 4E 05 F1 | 	add	fp, #8
1e6f8     A7 14 02 F6 | 	mov	arg02, fp
1e6fc     0C 4E 05 F1 | 	add	fp, #12
1e700     A7 16 02 F6 | 	mov	arg03, fp
1e704     98 4E 05 F1 | 	add	fp, #152
1e708     A7 18 02 FB | 	rdlong	arg04, fp
1e70c     9C 4E 85 F1 | 	sub	fp, #156
1e710     A7 1A 02 FB | 	rdlong	arg05, fp
1e714     1C 4E 85 F1 | 	sub	fp, #28
1e718     50 40 B0 FD | 	call	#__system__disassemble_0432
1e71c     10 4E 05 F1 | 	add	fp, #16
1e720     A7 1E 02 FB | 	rdlong	local01, fp
1e724     10 4E 85 F1 | 	sub	fp, #16
1e728     23 1E 0E F2 | 	cmp	local01, #35 wz
1e72c     A0 00 90 5D |  if_ne	jmp	#LR__2659
1e730     20 4E 05 F1 | 	add	fp, #32
1e734     A7 1E 02 FB | 	rdlong	local01, fp
1e738     98 4E 05 F1 | 	add	fp, #152
1e73c     A7 22 02 FB | 	rdlong	local03, fp
1e740     B8 4E 85 F1 | 	sub	fp, #184
1e744     11 1F 5A F2 | 	cmps	local01, local03 wcz
1e748     24 4E 05 11 |  if_a	add	fp, #36
1e74c     A7 02 68 1C |  if_a	wrlong	#1, fp
1e750     24 4E 85 11 |  if_a	sub	fp, #36
1e754     A4 01 90 1D |  if_a	jmp	#LR__2665
1e758     20 4E 05 F1 | 	add	fp, #32
1e75c     A7 1E 02 FB | 	rdlong	local01, fp
1e760     20 4E 85 F1 | 	sub	fp, #32
1e764     00 1E 56 F2 | 	cmps	local01, #0 wc
1e768     2C 00 90 3D |  if_ae	jmp	#LR__2658
1e76c     B8 4E 05 F1 | 	add	fp, #184
1e770     A7 1E 02 FB | 	rdlong	local01, fp
1e774     0F 1F 62 F6 | 	neg	local01, local01
1e778     98 4E 85 F1 | 	sub	fp, #152
1e77c     A7 22 02 FB | 	rdlong	local03, fp
1e780     20 4E 85 F1 | 	sub	fp, #32
1e784     0F 23 5A F2 | 	cmps	local03, local01 wcz
1e788     24 4E 05 E1 |  if_be	add	fp, #36
1e78c     A7 02 68 EC |  if_be	wrlong	#1, fp
1e790     24 4E 85 E1 |  if_be	sub	fp, #36
1e794     64 01 90 FD | 	jmp	#LR__2665
1e798                 | LR__2658
1e798     20 4E 05 F1 | 	add	fp, #32
1e79c     A7 1E 02 FB | 	rdlong	local01, fp
1e7a0     20 4E 85 F1 | 	sub	fp, #32
1e7a4     01 1E 56 F2 | 	cmps	local01, #1 wc
1e7a8     50 01 90 CD |  if_b	jmp	#LR__2665
1e7ac     B8 4E 05 F1 | 	add	fp, #184
1e7b0     A7 1E 02 FB | 	rdlong	local01, fp
1e7b4     98 4E 85 F1 | 	sub	fp, #152
1e7b8     A7 22 02 FB | 	rdlong	local03, fp
1e7bc     11 1F 82 F1 | 	sub	local01, local03
1e7c0     98 4E 05 F1 | 	add	fp, #152
1e7c4     A7 1E 62 FC | 	wrlong	local01, fp
1e7c8     B8 4E 85 F1 | 	sub	fp, #184
1e7cc     2C 01 90 FD | 	jmp	#LR__2665
1e7d0                 | LR__2659
1e7d0     00 1E 06 F6 | 	mov	local01, #0
1e7d4     08 4E 05 F1 | 	add	fp, #8
1e7d8     A7 20 02 FB | 	rdlong	local02, fp
1e7dc     1C 20 46 F0 | 	shr	local02, #28
1e7e0     01 20 0E F5 | 	and	local02, #1 wz
1e7e4     01 1E 06 A6 |  if_e	mov	local01, #1
1e7e8     2C 4E 05 F1 | 	add	fp, #44
1e7ec     A7 1E 62 FC | 	wrlong	local01, fp
1e7f0     14 4E 85 F1 | 	sub	fp, #20
1e7f4     A7 1E 02 FB | 	rdlong	local01, fp
1e7f8     98 4E 05 F1 | 	add	fp, #152
1e7fc     A7 22 02 FB | 	rdlong	local03, fp
1e800     B8 4E 85 F1 | 	sub	fp, #184
1e804     11 1F 52 F2 | 	cmps	local01, local03 wc
1e808     18 00 90 3D |  if_ae	jmp	#LR__2660
1e80c     20 4E 05 F1 | 	add	fp, #32
1e810     A7 24 02 FB | 	rdlong	local04, fp
1e814     20 4E 85 F1 | 	sub	fp, #32
1e818     FF FF 7F FF 
1e81c     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1e820     10 00 90 3D |  if_ae	jmp	#LR__2661
1e824                 | LR__2660
1e824     24 4E 05 F1 | 	add	fp, #36
1e828     A7 02 68 FC | 	wrlong	#1, fp
1e82c     24 4E 85 F1 | 	sub	fp, #36
1e830     C8 00 90 FD | 	jmp	#LR__2665
1e834                 | LR__2661
1e834     B8 4E 05 F1 | 	add	fp, #184
1e838     A7 24 02 FB | 	rdlong	local04, fp
1e83c     98 4E 85 F1 | 	sub	fp, #152
1e840     A7 22 02 FB | 	rdlong	local03, fp
1e844     11 25 82 F1 | 	sub	local04, local03
1e848     98 4E 05 F1 | 	add	fp, #152
1e84c     A7 24 62 FC | 	wrlong	local04, fp
1e850     AC 4E 85 F1 | 	sub	fp, #172
1e854     A7 12 02 FB | 	rdlong	arg01, fp
1e858     08 4E 05 F1 | 	add	fp, #8
1e85c     A7 14 02 F6 | 	mov	arg02, fp
1e860     0C 4E 05 F1 | 	add	fp, #12
1e864     A7 16 02 F6 | 	mov	arg03, fp
1e868     12 19 62 F6 | 	neg	arg04, local04
1e86c     04 4E 85 F1 | 	sub	fp, #4
1e870     A7 1A 02 FB | 	rdlong	arg05, fp
1e874     1C 4E 85 F1 | 	sub	fp, #28
1e878     F0 3E B0 FD | 	call	#__system__disassemble_0432
1e87c     7C 00 90 FD | 	jmp	#LR__2665
1e880                 | LR__2662
1e880     24 4E 05 F1 | 	add	fp, #36
1e884     A7 1E 0A FB | 	rdlong	local01, fp wz
1e888     24 4E 85 F1 | 	sub	fp, #36
1e88c     34 00 90 AD |  if_e	jmp	#LR__2663
1e890     0C 4E 05 F1 | 	add	fp, #12
1e894     A7 12 02 FB | 	rdlong	arg01, fp
1e898     08 4E 05 F1 | 	add	fp, #8
1e89c     A7 14 02 F6 | 	mov	arg02, fp
1e8a0     0C 4E 05 F1 | 	add	fp, #12
1e8a4     A7 16 02 F6 | 	mov	arg03, fp
1e8a8     98 4E 05 F1 | 	add	fp, #152
1e8ac     A7 18 02 FB | 	rdlong	arg04, fp
1e8b0     9C 4E 85 F1 | 	sub	fp, #156
1e8b4     A7 1A 02 FB | 	rdlong	arg05, fp
1e8b8     1C 4E 85 F1 | 	sub	fp, #28
1e8bc     AC 3E B0 FD | 	call	#__system__disassemble_0432
1e8c0     38 00 90 FD | 	jmp	#LR__2664
1e8c4                 | LR__2663
1e8c4     0C 4E 05 F1 | 	add	fp, #12
1e8c8     A7 12 02 FB | 	rdlong	arg01, fp
1e8cc     08 4E 05 F1 | 	add	fp, #8
1e8d0     A7 14 02 F6 | 	mov	arg02, fp
1e8d4     0C 4E 05 F1 | 	add	fp, #12
1e8d8     A7 16 02 F6 | 	mov	arg03, fp
1e8dc     98 4E 05 F1 | 	add	fp, #152
1e8e0     A7 24 02 FB | 	rdlong	local04, fp
1e8e4     01 24 06 F1 | 	add	local04, #1
1e8e8     12 19 62 F6 | 	neg	arg04, local04
1e8ec     9C 4E 85 F1 | 	sub	fp, #156
1e8f0     A7 1A 02 FB | 	rdlong	arg05, fp
1e8f4     1C 4E 85 F1 | 	sub	fp, #28
1e8f8     70 3E B0 FD | 	call	#__system__disassemble_0432
1e8fc                 | LR__2664
1e8fc                 | LR__2665
1e8fc     1C 4E 05 F1 | 	add	fp, #28
1e900     A7 1E 02 FB | 	rdlong	local01, fp
1e904     1C 4E 85 F1 | 	sub	fp, #28
1e908     02 1E 0E F2 | 	cmp	local01, #2 wz
1e90c     4C 00 90 5D |  if_ne	jmp	#LR__2668
1e910     1C 4E 05 F1 | 	add	fp, #28
1e914     A7 20 68 FC | 	wrlong	#16, fp
1e918     1C 4E 85 F1 | 	sub	fp, #28
1e91c                 | LR__2666
1e91c     14 4E 05 F1 | 	add	fp, #20
1e920     A7 1E 0A FB | 	rdlong	local01, fp wz
1e924     14 4E 85 F1 | 	sub	fp, #20
1e928     30 00 90 AD |  if_e	jmp	#LR__2667
1e92c     14 4E 05 F1 | 	add	fp, #20
1e930     A7 22 02 FB | 	rdlong	local03, fp
1e934     14 4E 85 F1 | 	sub	fp, #20
1e938     00 80 00 FF 
1e93c     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1e940     18 00 90 3D |  if_ae	jmp	#LR__2667
1e944     14 4E 05 F1 | 	add	fp, #20
1e948     A7 1E 02 FB | 	rdlong	local01, fp
1e94c     01 1E 66 F0 | 	shl	local01, #1
1e950     A7 1E 62 FC | 	wrlong	local01, fp
1e954     14 4E 85 F1 | 	sub	fp, #20
1e958     C0 FF 9F FD | 	jmp	#LR__2666
1e95c                 | LR__2667
1e95c                 | LR__2668
1e95c     70 4E 05 F1 | 	add	fp, #112
1e960     A7 12 02 F6 | 	mov	arg01, fp
1e964     5C 4E 85 F1 | 	sub	fp, #92
1e968     A7 14 02 FB | 	rdlong	arg02, fp
1e96c     08 4E 05 F1 | 	add	fp, #8
1e970     A7 16 02 FB | 	rdlong	arg03, fp
1e974     A0 4E 05 F1 | 	add	fp, #160
1e978     A7 1A 02 FB | 	rdlong	arg05, fp
1e97c     BC 4E 85 F1 | 	sub	fp, #188
1e980     01 18 06 F6 | 	mov	arg04, #1
1e984     70 3D B0 FD | 	call	#__system___uitoa
1e988     58 4E 05 F1 | 	add	fp, #88
1e98c     A7 FA 61 FC | 	wrlong	result1, fp
1e990     38 4E 85 F1 | 	sub	fp, #56
1e994     A7 1E 02 FB | 	rdlong	local01, fp
1e998     20 4E 85 F1 | 	sub	fp, #32
1e99c     00 1E 56 F2 | 	cmps	local01, #0 wc
1e9a0     50 00 90 3D |  if_ae	jmp	#LR__2669
1e9a4     60 4E 05 F1 | 	add	fp, #96
1e9a8     A7 5A 68 FC | 	wrlong	#45, fp
1e9ac     50 4E 05 F1 | 	add	fp, #80
1e9b0     A7 12 02 F6 | 	mov	arg01, fp
1e9b4     90 4E 85 F1 | 	sub	fp, #144
1e9b8     A7 22 02 FB | 	rdlong	local03, fp
1e9bc     11 15 62 F6 | 	neg	arg02, local03
1e9c0     18 4E 05 F1 | 	add	fp, #24
1e9c4     A7 18 02 FB | 	rdlong	arg04, fp
1e9c8     84 4E 05 F1 | 	add	fp, #132
1e9cc     A7 28 02 FB | 	rdlong	local06, fp
1e9d0     BC 4E 85 F1 | 	sub	fp, #188
1e9d4     14 25 02 F6 | 	mov	local04, local06
1e9d8     0A 16 06 F6 | 	mov	arg03, #10
1e9dc     12 1B 02 F6 | 	mov	arg05, local04
1e9e0     14 3D B0 FD | 	call	#__system___uitoa
1e9e4     5C 4E 05 F1 | 	add	fp, #92
1e9e8     A7 FA 61 FC | 	wrlong	result1, fp
1e9ec     5C 4E 85 F1 | 	sub	fp, #92
1e9f0     48 00 90 FD | 	jmp	#LR__2670
1e9f4                 | LR__2669
1e9f4     60 4E 05 F1 | 	add	fp, #96
1e9f8     A7 56 68 FC | 	wrlong	#43, fp
1e9fc     50 4E 05 F1 | 	add	fp, #80
1ea00     A7 12 02 F6 | 	mov	arg01, fp
1ea04     90 4E 85 F1 | 	sub	fp, #144
1ea08     A7 14 02 FB | 	rdlong	arg02, fp
1ea0c     18 4E 05 F1 | 	add	fp, #24
1ea10     A7 18 02 FB | 	rdlong	arg04, fp
1ea14     84 4E 05 F1 | 	add	fp, #132
1ea18     A7 28 02 FB | 	rdlong	local06, fp
1ea1c     BC 4E 85 F1 | 	sub	fp, #188
1ea20     14 25 02 F6 | 	mov	local04, local06
1ea24     0A 16 06 F6 | 	mov	arg03, #10
1ea28     12 1B 02 F6 | 	mov	arg05, local04
1ea2c     C8 3C B0 FD | 	call	#__system___uitoa
1ea30     5C 4E 05 F1 | 	add	fp, #92
1ea34     A7 FA 61 FC | 	wrlong	result1, fp
1ea38     5C 4E 85 F1 | 	sub	fp, #92
1ea3c                 | LR__2670
1ea3c     24 4E 05 F1 | 	add	fp, #36
1ea40     A7 1E 0A FB | 	rdlong	local01, fp wz
1ea44     24 4E 85 F1 | 	sub	fp, #36
1ea48     2C 00 90 AD |  if_e	jmp	#LR__2671
1ea4c     50 4E 05 F1 | 	add	fp, #80
1ea50     A7 00 68 FC | 	wrlong	#0, fp
1ea54     04 4E 85 F1 | 	sub	fp, #4
1ea58     A7 00 68 FC | 	wrlong	#0, fp
1ea5c     6C 4E 05 F1 | 	add	fp, #108
1ea60     A7 1E 02 FB | 	rdlong	local01, fp
1ea64     01 1E 06 F1 | 	add	local01, #1
1ea68     64 4E 85 F1 | 	sub	fp, #100
1ea6c     A7 1E 62 FC | 	wrlong	local01, fp
1ea70     54 4E 85 F1 | 	sub	fp, #84
1ea74     88 00 90 FD | 	jmp	#LR__2674
1ea78                 | LR__2671
1ea78     20 4E 05 F1 | 	add	fp, #32
1ea7c     A7 1E 02 FB | 	rdlong	local01, fp
1ea80     20 4E 85 F1 | 	sub	fp, #32
1ea84     00 1E 56 F2 | 	cmps	local01, #0 wc
1ea88     40 00 90 3D |  if_ae	jmp	#LR__2672
1ea8c     20 4E 05 F1 | 	add	fp, #32
1ea90     A7 20 02 FB | 	rdlong	local02, fp
1ea94     30 4E 05 F1 | 	add	fp, #48
1ea98     A7 20 62 FC | 	wrlong	local02, fp
1ea9c     04 4E 85 F1 | 	sub	fp, #4
1eaa0     A7 20 62 FC | 	wrlong	local02, fp
1eaa4     2C 4E 85 F1 | 	sub	fp, #44
1eaa8     A7 1E 02 FB | 	rdlong	local01, fp
1eaac     98 4E 05 F1 | 	add	fp, #152
1eab0     A7 22 02 FB | 	rdlong	local03, fp
1eab4     11 1F 02 F1 | 	add	local01, local03
1eab8     01 1E 06 F1 | 	add	local01, #1
1eabc     64 4E 85 F1 | 	sub	fp, #100
1eac0     A7 1E 62 FC | 	wrlong	local01, fp
1eac4     54 4E 85 F1 | 	sub	fp, #84
1eac8     34 00 90 FD | 	jmp	#LR__2673
1eacc                 | LR__2672
1eacc     4C 4E 05 F1 | 	add	fp, #76
1ead0     A7 00 68 FC | 	wrlong	#0, fp
1ead4     2C 4E 85 F1 | 	sub	fp, #44
1ead8     A7 1E 02 FB | 	rdlong	local01, fp
1eadc     30 4E 05 F1 | 	add	fp, #48
1eae0     A7 1E 62 FC | 	wrlong	local01, fp
1eae4     68 4E 05 F1 | 	add	fp, #104
1eae8     A7 22 02 FB | 	rdlong	local03, fp
1eaec     11 1F 02 F1 | 	add	local01, local03
1eaf0     01 1E 06 F1 | 	add	local01, #1
1eaf4     64 4E 85 F1 | 	sub	fp, #100
1eaf8     A7 1E 62 FC | 	wrlong	local01, fp
1eafc     54 4E 85 F1 | 	sub	fp, #84
1eb00                 | LR__2673
1eb00                 | LR__2674
1eb00     54 4E 05 F1 | 	add	fp, #84
1eb04     A7 1E 02 FB | 	rdlong	local01, fp
1eb08     08 4E 85 F1 | 	sub	fp, #8
1eb0c     A7 22 02 FB | 	rdlong	local03, fp
1eb10     11 1F 82 F1 | 	sub	local01, local03
1eb14     01 1E 06 F1 | 	add	local01, #1
1eb18     24 4E 85 F1 | 	sub	fp, #36
1eb1c     A7 1E 62 FC | 	wrlong	local01, fp
1eb20     04 4E 05 F1 | 	add	fp, #4
1eb24     A7 1E 0A FB | 	rdlong	local01, fp wz
1eb28     2C 4E 85 F1 | 	sub	fp, #44
1eb2c     28 4E 05 51 |  if_ne	add	fp, #40
1eb30     A7 22 02 5B |  if_ne	rdlong	local03, fp
1eb34     01 22 06 51 |  if_ne	add	local03, #1
1eb38     A7 22 62 5C |  if_ne	wrlong	local03, fp
1eb3c     28 4E 85 51 |  if_ne	sub	fp, #40
1eb40     1C 4E 05 F1 | 	add	fp, #28
1eb44     A7 1E 02 FB | 	rdlong	local01, fp
1eb48     1C 4E 85 F1 | 	sub	fp, #28
1eb4c     10 1E 0E F2 | 	cmp	local01, #16 wz
1eb50     28 4E 05 A1 |  if_e	add	fp, #40
1eb54     A7 1E 02 AB |  if_e	rdlong	local01, fp
1eb58     02 1E 06 A1 |  if_e	add	local01, #2
1eb5c     A7 1E 62 AC |  if_e	wrlong	local01, fp
1eb60     28 4E 85 A1 |  if_e	sub	fp, #40
1eb64     24 4E 05 F1 | 	add	fp, #36
1eb68     A7 1E 0A FB | 	rdlong	local01, fp wz
1eb6c     24 4E 85 F1 | 	sub	fp, #36
1eb70     28 00 90 AD |  if_e	jmp	#LR__2675
1eb74     28 4E 05 F1 | 	add	fp, #40
1eb78     A7 1E 02 FB | 	rdlong	local01, fp
1eb7c     02 22 06 F6 | 	mov	local03, #2
1eb80     34 4E 05 F1 | 	add	fp, #52
1eb84     A7 26 02 FB | 	rdlong	local05, fp
1eb88     13 23 02 F1 | 	add	local03, local05
1eb8c     11 1F 02 F1 | 	add	local01, local03
1eb90     34 4E 85 F1 | 	sub	fp, #52
1eb94     A7 1E 62 FC | 	wrlong	local01, fp
1eb98     28 4E 85 F1 | 	sub	fp, #40
1eb9c                 | LR__2675
1eb9c     28 4E 05 F1 | 	add	fp, #40
1eba0     A7 1E 02 FB | 	rdlong	local01, fp
1eba4     28 4E 85 F1 | 	sub	fp, #40
1eba8     41 1E 56 F2 | 	cmps	local01, #65 wc
1ebac     01 FA 65 36 |  if_ae	neg	result1, #1
1ebb0     08 05 90 3D |  if_ae	jmp	#LR__2703
1ebb4     3C 4E 05 F1 | 	add	fp, #60
1ebb8     A7 1E 0A FB | 	rdlong	local01, fp wz
1ebbc     3C 4E 85 F1 | 	sub	fp, #60
1ebc0     60 00 90 AD |  if_e	jmp	#LR__2676
1ebc4     C0 4E 05 F1 | 	add	fp, #192
1ebc8     A7 12 02 FB | 	rdlong	arg01, fp
1ebcc     94 4E 85 F1 | 	sub	fp, #148
1ebd0     A7 14 02 FB | 	rdlong	arg02, fp
1ebd4     14 4E 05 F1 | 	add	fp, #20
1ebd8     A7 16 02 FB | 	rdlong	arg03, fp
1ebdc     40 4E 85 F1 | 	sub	fp, #64
1ebe0     7C 3D B0 FD | 	call	#__system__emitsign_0434
1ebe4     18 4F 05 F1 | 	add	fp, #280
1ebe8     A7 FA 61 FC | 	wrlong	result1, fp
1ebec     18 4F 85 F1 | 	sub	fp, #280
1ebf0     00 FA 55 F2 | 	cmps	result1, #0 wc
1ebf4     18 4F 05 C1 |  if_b	add	fp, #280
1ebf8     A7 FA 01 CB |  if_b	rdlong	result1, fp
1ebfc     18 4F 85 C1 |  if_b	sub	fp, #280
1ec00     B8 04 90 CD |  if_b	jmp	#LR__2703
1ec04     C0 4E 05 F1 | 	add	fp, #192
1ec08     A7 1E 02 FB | 	rdlong	local01, fp
1ec0c     58 4E 05 F1 | 	add	fp, #88
1ec10     A7 22 02 FB | 	rdlong	local03, fp
1ec14     11 1F 02 F1 | 	add	local01, local03
1ec18     58 4E 85 F1 | 	sub	fp, #88
1ec1c     A7 1E 62 FC | 	wrlong	local01, fp
1ec20     C0 4E 85 F1 | 	sub	fp, #192
1ec24                 | LR__2676
1ec24     4C 4E 05 F1 | 	add	fp, #76
1ec28     A7 1E 02 FB | 	rdlong	local01, fp
1ec2c     34 4E 85 F1 | 	sub	fp, #52
1ec30     A7 1E 62 FC | 	wrlong	local01, fp
1ec34     18 4E 85 F1 | 	sub	fp, #24
1ec38     97 9E 48 FB | 	callpa	#(@LR__2682-@LR__2677)>>2,fcache_load_ptr_
1ec3c                 | LR__2677
1ec3c     18 4E 05 F1 | 	add	fp, #24
1ec40     A7 20 02 FB | 	rdlong	local02, fp
1ec44     3C 4E 05 F1 | 	add	fp, #60
1ec48     A7 26 02 FB | 	rdlong	local05, fp
1ec4c     54 4E 85 F1 | 	sub	fp, #84
1ec50     13 21 52 F2 | 	cmps	local02, local05 wc
1ec54     20 01 90 3D |  if_ae	jmp	#LR__2683
1ec58     18 4E 05 F1 | 	add	fp, #24
1ec5c     A7 28 02 FB | 	rdlong	local06, fp
1ec60     18 4E 85 F1 | 	sub	fp, #24
1ec64     00 28 56 F2 | 	cmps	local06, #0 wc
1ec68     58 00 90 CD |  if_b	jmp	#LR__2678
1ec6c     18 4E 05 F1 | 	add	fp, #24
1ec70     A7 28 02 FB | 	rdlong	local06, fp
1ec74     40 4E 05 F1 | 	add	fp, #64
1ec78     A7 2A 02 FB | 	rdlong	local07, fp
1ec7c     58 4E 85 F1 | 	sub	fp, #88
1ec80     15 29 52 F2 | 	cmps	local06, local07 wc
1ec84     3C 00 90 3D |  if_ae	jmp	#LR__2678
1ec88     C0 4E 05 F1 | 	add	fp, #192
1ec8c     A7 2C 02 FB | 	rdlong	local08, fp
1ec90     16 2B 02 F6 | 	mov	local07, local08
1ec94     01 2A 06 F1 | 	add	local07, #1
1ec98     A7 2A 62 FC | 	wrlong	local07, fp
1ec9c     A8 4E 85 F1 | 	sub	fp, #168
1eca0     A7 2A 02 FB | 	rdlong	local07, fp
1eca4     15 2F 02 F6 | 	mov	local09, local07
1eca8     58 4E 05 F1 | 	add	fp, #88
1ecac     A7 30 02 F6 | 	mov	local10, fp
1ecb0     A7 2E 02 F1 | 	add	local09, fp
1ecb4     17 33 C2 FA | 	rdbyte	local11, local09
1ecb8     16 33 42 FC | 	wrbyte	local11, local08
1ecbc     70 4E 85 F1 | 	sub	fp, #112
1ecc0     20 00 90 FD | 	jmp	#LR__2679
1ecc4                 | LR__2678
1ecc4     C0 4E 05 F1 | 	add	fp, #192
1ecc8     A7 2C 02 FB | 	rdlong	local08, fp
1eccc     16 2F 02 F6 | 	mov	local09, local08
1ecd0     01 2E 06 F1 | 	add	local09, #1
1ecd4     A7 2E 62 FC | 	wrlong	local09, fp
1ecd8     C0 4E 85 F1 | 	sub	fp, #192
1ecdc     30 2E 06 F6 | 	mov	local09, #48
1ece0     16 61 48 FC | 	wrbyte	#48, local08
1ece4                 | LR__2679
1ece4     18 4E 05 F1 | 	add	fp, #24
1ece8     A7 28 02 FB | 	rdlong	local06, fp
1ecec     38 4E 05 F1 | 	add	fp, #56
1ecf0     A7 34 02 FB | 	rdlong	local12, fp
1ecf4     50 4E 85 F1 | 	sub	fp, #80
1ecf8     1A 29 0A F2 | 	cmp	local06, local12 wz
1ecfc     5C 00 90 5D |  if_ne	jmp	#LR__2681
1ed00     10 4F 05 F1 | 	add	fp, #272
1ed04     A7 2A 02 FB | 	rdlong	local07, fp
1ed08     10 4F 85 F1 | 	sub	fp, #272
1ed0c     15 2F 0A F6 | 	mov	local09, local07 wz
1ed10     28 00 90 5D |  if_ne	jmp	#LR__2680
1ed14     54 4E 05 F1 | 	add	fp, #84
1ed18     A7 32 02 FB | 	rdlong	local11, fp
1ed1c     19 31 02 F6 | 	mov	local10, local11
1ed20     01 30 86 F1 | 	sub	local10, #1
1ed24     3C 4E 85 F1 | 	sub	fp, #60
1ed28     A7 36 02 FB | 	rdlong	local13, fp
1ed2c     18 4E 85 F1 | 	sub	fp, #24
1ed30     1B 39 02 F6 | 	mov	local14, local13
1ed34     18 39 52 F2 | 	cmps	local14, local10 wc
1ed38     20 00 90 3D |  if_ae	jmp	#LR__2681
1ed3c                 | LR__2680
1ed3c     C0 4E 05 F1 | 	add	fp, #192
1ed40     A7 2C 02 FB | 	rdlong	local08, fp
1ed44     16 35 02 F6 | 	mov	local12, local08
1ed48     01 34 06 F1 | 	add	local12, #1
1ed4c     A7 34 62 FC | 	wrlong	local12, fp
1ed50     C0 4E 85 F1 | 	sub	fp, #192
1ed54     2E 2E 06 F6 | 	mov	local09, #46
1ed58     16 5D 48 FC | 	wrbyte	#46, local08
1ed5c                 | LR__2681
1ed5c     18 4E 05 F1 | 	add	fp, #24
1ed60     A7 3A 02 FB | 	rdlong	local15, fp
1ed64     1D 35 02 F6 | 	mov	local12, local15
1ed68     01 34 06 F1 | 	add	local12, #1
1ed6c     A7 34 62 FC | 	wrlong	local12, fp
1ed70     18 4E 85 F1 | 	sub	fp, #24
1ed74     C4 FE 9F FD | 	jmp	#LR__2677
1ed78                 | LR__2682
1ed78                 | LR__2683
1ed78     34 4E 05 F1 | 	add	fp, #52
1ed7c     A7 1E 0A FB | 	rdlong	local01, fp wz
1ed80     34 4E 85 F1 | 	sub	fp, #52
1ed84     A0 00 90 AD |  if_e	jmp	#LR__2687
1ed88     C0 4E 05 F1 | 	add	fp, #192
1ed8c     A7 1E 02 FB | 	rdlong	local01, fp
1ed90     01 1E 86 F1 | 	sub	local01, #1
1ed94     A7 1E 62 FC | 	wrlong	local01, fp
1ed98     C0 4E 85 F1 | 	sub	fp, #192
1ed9c     97 26 48 FB | 	callpa	#(@LR__2685-@LR__2684)>>2,fcache_load_ptr_
1eda0                 | LR__2684
1eda0     C0 4E 05 F1 | 	add	fp, #192
1eda4     A7 1E 02 FB | 	rdlong	local01, fp
1eda8     04 4E 05 F1 | 	add	fp, #4
1edac     A7 22 02 FB | 	rdlong	local03, fp
1edb0     C4 4E 85 F1 | 	sub	fp, #196
1edb4     11 1F 5A F2 | 	cmps	local01, local03 wcz
1edb8     30 00 90 ED |  if_be	jmp	#LR__2686
1edbc     C0 4E 05 F1 | 	add	fp, #192
1edc0     A7 28 02 FB | 	rdlong	local06, fp
1edc4     C0 4E 85 F1 | 	sub	fp, #192
1edc8     14 25 C2 FA | 	rdbyte	local04, local06
1edcc     30 24 0E F2 | 	cmp	local04, #48 wz
1edd0     18 00 90 5D |  if_ne	jmp	#LR__2686
1edd4     C0 4E 05 F1 | 	add	fp, #192
1edd8     A7 1E 02 FB | 	rdlong	local01, fp
1eddc     01 1E 86 F1 | 	sub	local01, #1
1ede0     A7 1E 62 FC | 	wrlong	local01, fp
1ede4     C0 4E 85 F1 | 	sub	fp, #192
1ede8     B4 FF 9F FD | 	jmp	#LR__2684
1edec                 | LR__2685
1edec                 | LR__2686
1edec     C0 4E 05 F1 | 	add	fp, #192
1edf0     A7 20 02 FB | 	rdlong	local02, fp
1edf4     C0 4E 85 F1 | 	sub	fp, #192
1edf8     10 1F C2 FA | 	rdbyte	local01, local02
1edfc     2E 1E 0E F2 | 	cmp	local01, #46 wz
1ee00     C0 4E 05 A1 |  if_e	add	fp, #192
1ee04     A7 1E 02 AB |  if_e	rdlong	local01, fp
1ee08     01 1E 86 A1 |  if_e	sub	local01, #1
1ee0c     A7 1E 62 AC |  if_e	wrlong	local01, fp
1ee10     C0 4E 85 A1 |  if_e	sub	fp, #192
1ee14     C0 4E 05 F1 | 	add	fp, #192
1ee18     A7 22 02 FB | 	rdlong	local03, fp
1ee1c     01 22 06 F1 | 	add	local03, #1
1ee20     A7 22 62 FC | 	wrlong	local03, fp
1ee24     C0 4E 85 F1 | 	sub	fp, #192
1ee28                 | LR__2687
1ee28     24 4E 05 F1 | 	add	fp, #36
1ee2c     A7 1E 0A FB | 	rdlong	local01, fp wz
1ee30     24 4E 85 F1 | 	sub	fp, #36
1ee34     B4 00 90 AD |  if_e	jmp	#LR__2690
1ee38     C0 4E 05 F1 | 	add	fp, #192
1ee3c     A7 20 02 FB | 	rdlong	local02, fp
1ee40     10 23 02 F6 | 	mov	local03, local02
1ee44     01 22 06 F1 | 	add	local03, #1
1ee48     A7 22 62 FC | 	wrlong	local03, fp
1ee4c     90 4E 85 F1 | 	sub	fp, #144
1ee50     A7 24 02 FB | 	rdlong	local04, fp
1ee54     10 25 42 FC | 	wrbyte	local04, local02
1ee58     90 4E 05 F1 | 	add	fp, #144
1ee5c     A7 20 02 FB | 	rdlong	local02, fp
1ee60     10 23 02 F6 | 	mov	local03, local02
1ee64     01 22 06 F1 | 	add	local03, #1
1ee68     A7 22 62 FC | 	wrlong	local03, fp
1ee6c     60 4E 85 F1 | 	sub	fp, #96
1ee70     A7 24 02 FB | 	rdlong	local04, fp
1ee74     10 25 42 FC | 	wrbyte	local04, local02
1ee78     48 4E 85 F1 | 	sub	fp, #72
1ee7c     A7 00 68 FC | 	wrlong	#0, fp
1ee80     18 4E 85 F1 | 	sub	fp, #24
1ee84                 | LR__2688
1ee84     18 4E 05 F1 | 	add	fp, #24
1ee88     A7 20 02 FB | 	rdlong	local02, fp
1ee8c     44 4E 05 F1 | 	add	fp, #68
1ee90     A7 26 02 FB | 	rdlong	local05, fp
1ee94     5C 4E 85 F1 | 	sub	fp, #92
1ee98     13 21 52 F2 | 	cmps	local02, local05 wc
1ee9c     4C 00 90 3D |  if_ae	jmp	#LR__2689
1eea0     C0 4E 05 F1 | 	add	fp, #192
1eea4     A7 2C 02 FB | 	rdlong	local08, fp
1eea8     16 35 02 F6 | 	mov	local12, local08
1eeac     01 34 06 F1 | 	add	local12, #1
1eeb0     A7 34 62 FC | 	wrlong	local12, fp
1eeb4     A8 4E 85 F1 | 	sub	fp, #168
1eeb8     A7 2A 02 FB | 	rdlong	local07, fp
1eebc     15 2F 02 F6 | 	mov	local09, local07
1eec0     98 4E 05 F1 | 	add	fp, #152
1eec4     A7 30 02 F6 | 	mov	local10, fp
1eec8     A7 2E 02 F1 | 	add	local09, fp
1eecc     17 33 C2 FA | 	rdbyte	local11, local09
1eed0     16 33 42 FC | 	wrbyte	local11, local08
1eed4     98 4E 85 F1 | 	sub	fp, #152
1eed8     A7 34 02 FB | 	rdlong	local12, fp
1eedc     01 34 06 F1 | 	add	local12, #1
1eee0     A7 34 62 FC | 	wrlong	local12, fp
1eee4     18 4E 85 F1 | 	sub	fp, #24
1eee8     98 FF 9F FD | 	jmp	#LR__2688
1eeec                 | LR__2689
1eeec                 | LR__2690
1eeec     C0 4E 05 F1 | 	add	fp, #192
1eef0     A7 1E 02 FB | 	rdlong	local01, fp
1eef4     C0 4E 85 F1 | 	sub	fp, #192
1eef8     0F 01 48 FC | 	wrbyte	#0, local01
1eefc                 | LR__2691
1eefc     6C 4E 05 F1 | 	add	fp, #108
1ef00     A7 1E 0A FB | 	rdlong	local01, fp wz
1ef04     6C 4E 85 F1 | 	sub	fp, #108
1ef08     90 01 90 AD |  if_e	jmp	#LR__2702
1ef0c     48 4E 05 F1 | 	add	fp, #72
1ef10     A7 22 0A FB | 	rdlong	local03, fp wz
1ef14     48 4E 85 F1 | 	sub	fp, #72
1ef18     80 01 90 AD |  if_e	jmp	#LR__2702
1ef1c     C4 4E 05 F1 | 	add	fp, #196
1ef20     A7 12 02 FB | 	rdlong	arg01, fp
1ef24     C4 4E 85 F1 | 	sub	fp, #196
1ef28     09 3D 02 F6 | 	mov	local16, arg01
1ef2c     97 06 48 FB | 	callpa	#(@LR__2693-@LR__2692)>>2,fcache_load_ptr_
1ef30                 | LR__2692
1ef30     1E FB C9 FA | 	rdbyte	result1, local16 wz
1ef34     01 3C 06 51 |  if_ne	add	local16, #1
1ef38     F4 FF 9F 5D |  if_ne	jmp	#LR__2692
1ef3c                 | LR__2693
1ef3c     09 3D 82 F1 | 	sub	local16, arg01
1ef40     1E 25 02 F6 | 	mov	local04, local16
1ef44     6C 4E 05 F1 | 	add	fp, #108
1ef48     A7 28 02 FB | 	rdlong	local06, fp
1ef4c     6C 4E 85 F1 | 	sub	fp, #108
1ef50     14 25 5A F2 | 	cmps	local04, local06 wcz
1ef54     44 01 90 ED |  if_be	jmp	#LR__2702
1ef58     C4 4E 05 F1 | 	add	fp, #196
1ef5c     A7 1E 02 FB | 	rdlong	local01, fp
1ef60     5C 4E 05 F1 | 	add	fp, #92
1ef64     A7 1E 62 FC | 	wrlong	local01, fp
1ef68     FC 4E 85 F1 | 	sub	fp, #252
1ef6c     A7 1E 0A FB | 	rdlong	local01, fp wz
1ef70     24 4E 85 F1 | 	sub	fp, #36
1ef74     20 00 90 AD |  if_e	jmp	#LR__2694
1ef78     B8 4E 05 F1 | 	add	fp, #184
1ef7c     A7 00 68 FC | 	wrlong	#0, fp
1ef80     4C 4E 85 F1 | 	sub	fp, #76
1ef84     A7 1E 02 FB | 	rdlong	local01, fp
1ef88     B0 4E 05 F1 | 	add	fp, #176
1ef8c     A7 1E 62 FC | 	wrlong	local01, fp
1ef90     1C 4F 85 F1 | 	sub	fp, #284
1ef94     24 00 90 FD | 	jmp	#LR__2695
1ef98                 | LR__2694
1ef98     6C 4E 05 F1 | 	add	fp, #108
1ef9c     A7 1E 02 FB | 	rdlong	local01, fp
1efa0     01 1E 86 F1 | 	sub	local01, #1
1efa4     4C 4E 05 F1 | 	add	fp, #76
1efa8     A7 22 02 FB | 	rdlong	local03, fp
1efac     11 1F 82 F1 | 	sub	local01, local03
1efb0     64 4E 05 F1 | 	add	fp, #100
1efb4     A7 1E 62 FC | 	wrlong	local01, fp
1efb8     1C 4F 85 F1 | 	sub	fp, #284
1efbc                 | LR__2695
1efbc     97 20 48 FB | 	callpa	#(@LR__2697-@LR__2696)>>2,fcache_load_ptr_
1efc0                 | LR__2696
1efc0     1C 4F 05 F1 | 	add	fp, #284
1efc4     A7 1E 0A FB | 	rdlong	local01, fp wz
1efc8     1C 4F 85 F1 | 	sub	fp, #284
1efcc     30 00 90 AD |  if_e	jmp	#LR__2698
1efd0     20 4F 05 F1 | 	add	fp, #288
1efd4     A7 20 02 FB | 	rdlong	local02, fp
1efd8     10 23 02 F6 | 	mov	local03, local02
1efdc     01 22 06 F1 | 	add	local03, #1
1efe0     A7 22 62 FC | 	wrlong	local03, fp
1efe4     10 55 48 FC | 	wrbyte	#42, local02
1efe8     04 4E 85 F1 | 	sub	fp, #4
1efec     A7 1E 02 FB | 	rdlong	local01, fp
1eff0     01 1E 86 F1 | 	sub	local01, #1
1eff4     A7 1E 62 FC | 	wrlong	local01, fp
1eff8     1C 4F 85 F1 | 	sub	fp, #284
1effc     C0 FF 9F FD | 	jmp	#LR__2696
1f000                 | LR__2697
1f000                 | LR__2698
1f000     B8 4E 05 F1 | 	add	fp, #184
1f004     A7 1E 0A FB | 	rdlong	local01, fp wz
1f008     B8 4E 85 F1 | 	sub	fp, #184
1f00c     70 00 90 AD |  if_e	jmp	#LR__2701
1f010     20 4F 05 F1 | 	add	fp, #288
1f014     A7 20 02 FB | 	rdlong	local02, fp
1f018     10 23 02 F6 | 	mov	local03, local02
1f01c     01 22 06 F1 | 	add	local03, #1
1f020     A7 22 62 FC | 	wrlong	local03, fp
1f024     10 5D 48 FC | 	wrbyte	#46, local02
1f028     04 4E 85 F1 | 	sub	fp, #4
1f02c     A7 00 68 FC | 	wrlong	#0, fp
1f030     1C 4F 85 F1 | 	sub	fp, #284
1f034                 | LR__2699
1f034     1C 4F 05 F1 | 	add	fp, #284
1f038     A7 20 02 FB | 	rdlong	local02, fp
1f03c     64 4E 85 F1 | 	sub	fp, #100
1f040     A7 26 02 FB | 	rdlong	local05, fp
1f044     B8 4E 85 F1 | 	sub	fp, #184
1f048     13 21 52 F2 | 	cmps	local02, local05 wc
1f04c     30 00 90 3D |  if_ae	jmp	#LR__2700
1f050     20 4F 05 F1 | 	add	fp, #288
1f054     A7 2C 02 FB | 	rdlong	local08, fp
1f058     16 35 02 F6 | 	mov	local12, local08
1f05c     01 34 06 F1 | 	add	local12, #1
1f060     A7 34 62 FC | 	wrlong	local12, fp
1f064     16 55 48 FC | 	wrbyte	#42, local08
1f068     04 4E 85 F1 | 	sub	fp, #4
1f06c     A7 34 02 FB | 	rdlong	local12, fp
1f070     01 34 06 F1 | 	add	local12, #1
1f074     A7 34 62 FC | 	wrlong	local12, fp
1f078     1C 4F 85 F1 | 	sub	fp, #284
1f07c     B4 FF 9F FD | 	jmp	#LR__2699
1f080                 | LR__2700
1f080                 | LR__2701
1f080     20 4F 05 F1 | 	add	fp, #288
1f084     A7 20 02 FB | 	rdlong	local02, fp
1f088     10 23 02 F6 | 	mov	local03, local02
1f08c     01 22 06 F1 | 	add	local03, #1
1f090     A7 22 62 FC | 	wrlong	local03, fp
1f094     20 4F 85 F1 | 	sub	fp, #288
1f098     10 01 48 FC | 	wrbyte	#0, local02
1f09c                 | LR__2702
1f09c     04 4E 05 F1 | 	add	fp, #4
1f0a0     A7 12 02 FB | 	rdlong	arg01, fp
1f0a4     04 4E 05 F1 | 	add	fp, #4
1f0a8     A7 14 02 FB | 	rdlong	arg02, fp
1f0ac     BC 4E 05 F1 | 	add	fp, #188
1f0b0     A7 16 02 FB | 	rdlong	arg03, fp
1f0b4     C4 4E 85 F1 | 	sub	fp, #196
1f0b8     C4 EE BF FD | 	call	#__system___fmtstr
1f0bc                 | LR__2703
1f0bc     A7 F0 03 F6 | 	mov	ptra, fp
1f0c0     B2 00 A0 FD | 	call	#popregs_
1f0c4                 | __system___fmtfloat_ret
1f0c4     2D 00 64 FD | 	ret
1f0c8                 | 
1f0c8                 | __system__Left_S
1f0c8     04 4A 05 F6 | 	mov	COUNT_, #4
1f0cc     A8 00 A0 FD | 	call	#pushregs_
1f0d0     09 1F 02 F6 | 	mov	local01, arg01
1f0d4     0A 21 02 F6 | 	mov	local02, arg02
1f0d8     01 20 56 F2 | 	cmps	local02, #1 wc
1f0dc     63 01 00 CF 
1f0e0     3A FA 05 C6 |  if_b	mov	result1, ##@LR__4593
1f0e4     5C 00 90 CD |  if_b	jmp	#LR__2713
1f0e8     0F 13 02 F6 | 	mov	arg01, local01
1f0ec     09 23 02 F6 | 	mov	local03, arg01
1f0f0     97 06 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
1f0f4                 | LR__2710
1f0f4     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f0f8     01 22 06 51 |  if_ne	add	local03, #1
1f0fc     F4 FF 9F 5D |  if_ne	jmp	#LR__2710
1f100                 | LR__2711
1f100     09 23 82 F1 | 	sub	local03, arg01
1f104     11 FB 01 F6 | 	mov	result1, local03
1f108     10 FB 59 F2 | 	cmps	result1, local02 wcz
1f10c     0F FB 01 E6 |  if_be	mov	result1, local01
1f110     30 00 90 ED |  if_be	jmp	#LR__2713
1f114     10 13 02 F6 | 	mov	arg01, local02
1f118     02 12 06 F1 | 	add	arg01, #2
1f11c     AC 1D B0 FD | 	call	#__system___gc_alloc_managed
1f120     FD 24 0A F6 | 	mov	local04, result1 wz
1f124     18 00 90 AD |  if_e	jmp	#LR__2712
1f128     12 13 02 F6 | 	mov	arg01, local04
1f12c     0F 15 02 F6 | 	mov	arg02, local01
1f130     10 17 02 F6 | 	mov	arg03, local02
1f134     6C DE BF FD | 	call	#__system____builtin_memmove
1f138     12 21 02 F1 | 	add	local02, local04
1f13c     10 01 48 FC | 	wrbyte	#0, local02
1f140                 | LR__2712
1f140     12 FB 01 F6 | 	mov	result1, local04
1f144                 | LR__2713
1f144     A7 F0 03 F6 | 	mov	ptra, fp
1f148     B2 00 A0 FD | 	call	#popregs_
1f14c                 | __system__Left_S_ret
1f14c     2D 00 64 FD | 	ret
1f150                 | 
1f150                 | __system__Right_S
1f150     05 4A 05 F6 | 	mov	COUNT_, #5
1f154     A8 00 A0 FD | 	call	#pushregs_
1f158     09 1F 02 F6 | 	mov	local01, arg01
1f15c     0A 21 02 F6 | 	mov	local02, arg02
1f160     01 20 56 F2 | 	cmps	local02, #1 wc
1f164     63 01 00 CF 
1f168     3B FA 05 C6 |  if_b	mov	result1, ##@LR__4594
1f16c     64 00 90 CD |  if_b	jmp	#LR__2723
1f170     0F 13 02 F6 | 	mov	arg01, local01
1f174     09 23 02 F6 | 	mov	local03, arg01
1f178     97 06 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
1f17c                 | LR__2720
1f17c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f180     01 22 06 51 |  if_ne	add	local03, #1
1f184     F4 FF 9F 5D |  if_ne	jmp	#LR__2720
1f188                 | LR__2721
1f188     09 23 82 F1 | 	sub	local03, arg01
1f18c     11 FB 01 F6 | 	mov	result1, local03
1f190     FD 24 02 F6 | 	mov	local04, result1
1f194     10 25 5A F2 | 	cmps	local04, local02 wcz
1f198     0F FB 01 E6 |  if_be	mov	result1, local01
1f19c     34 00 90 ED |  if_be	jmp	#LR__2723
1f1a0     10 13 02 F6 | 	mov	arg01, local02
1f1a4     02 12 06 F1 | 	add	arg01, #2
1f1a8     20 1D B0 FD | 	call	#__system___gc_alloc_managed
1f1ac     FD 26 0A F6 | 	mov	local05, result1 wz
1f1b0     1C 00 90 AD |  if_e	jmp	#LR__2722
1f1b4     10 25 82 F1 | 	sub	local04, local02
1f1b8     0F 25 02 F1 | 	add	local04, local01
1f1bc     01 20 06 F1 | 	add	local02, #1
1f1c0     13 13 02 F6 | 	mov	arg01, local05
1f1c4     12 15 02 F6 | 	mov	arg02, local04
1f1c8     10 17 02 F6 | 	mov	arg03, local02
1f1cc     D4 DD BF FD | 	call	#__system____builtin_memmove
1f1d0                 | LR__2722
1f1d0     13 FB 01 F6 | 	mov	result1, local05
1f1d4                 | LR__2723
1f1d4     A7 F0 03 F6 | 	mov	ptra, fp
1f1d8     B2 00 A0 FD | 	call	#popregs_
1f1dc                 | __system__Right_S_ret
1f1dc     2D 00 64 FD | 	ret
1f1e0                 | 
1f1e0                 | __system__Mid_S
1f1e0     05 4A 05 F6 | 	mov	COUNT_, #5
1f1e4     A8 00 A0 FD | 	call	#pushregs_
1f1e8     09 1F 02 F6 | 	mov	local01, arg01
1f1ec     0A 21 02 F6 | 	mov	local02, arg02
1f1f0     01 16 56 F2 | 	cmps	arg03, #1 wc
1f1f4     63 01 00 CF 
1f1f8     3C FA 05 C6 |  if_b	mov	result1, ##@LR__4595
1f1fc     80 00 90 CD |  if_b	jmp	#LR__2733
1f200     01 20 86 F1 | 	sub	local02, #1
1f204     00 20 56 F3 | 	fges	local02, #0 wc
1f208     0F 13 02 F6 | 	mov	arg01, local01
1f20c     09 23 02 F6 | 	mov	local03, arg01
1f210     97 06 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
1f214                 | LR__2730
1f214     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f218     01 22 06 51 |  if_ne	add	local03, #1
1f21c     F4 FF 9F 5D |  if_ne	jmp	#LR__2730
1f220                 | LR__2731
1f220     09 23 82 F1 | 	sub	local03, arg01
1f224     11 FB 01 F6 | 	mov	result1, local03
1f228     FD 14 02 F6 | 	mov	arg02, result1
1f22c     10 15 52 F2 | 	cmps	arg02, local02 wc
1f230     63 01 00 CF 
1f234     3D FA 05 C6 |  if_b	mov	result1, ##@LR__4596
1f238     44 00 90 CD |  if_b	jmp	#LR__2733
1f23c     0A 25 02 F6 | 	mov	local04, arg02
1f240     10 25 82 F1 | 	sub	local04, local02
1f244     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1f248     0B 25 02 16 |  if_a	mov	local04, arg03
1f24c     12 13 02 F6 | 	mov	arg01, local04
1f250     02 12 06 F1 | 	add	arg01, #2
1f254     74 1C B0 FD | 	call	#__system___gc_alloc_managed
1f258     FD 26 0A F6 | 	mov	local05, result1 wz
1f25c     1C 00 90 AD |  if_e	jmp	#LR__2732
1f260     0F 21 02 F1 | 	add	local02, local01
1f264     13 13 02 F6 | 	mov	arg01, local05
1f268     10 15 02 F6 | 	mov	arg02, local02
1f26c     12 17 02 F6 | 	mov	arg03, local04
1f270     30 DD BF FD | 	call	#__system____builtin_memmove
1f274     13 25 02 F1 | 	add	local04, local05
1f278     12 01 48 FC | 	wrbyte	#0, local04
1f27c                 | LR__2732
1f27c     13 FB 01 F6 | 	mov	result1, local05
1f280                 | LR__2733
1f280     A7 F0 03 F6 | 	mov	ptra, fp
1f284     B2 00 A0 FD | 	call	#popregs_
1f288                 | __system__Mid_S_ret
1f288     2D 00 64 FD | 	ret
1f28c                 | 
1f28c                 | __system__Chr_S
1f28c     01 4A 05 F6 | 	mov	COUNT_, #1
1f290     A8 00 A0 FD | 	call	#pushregs_
1f294     09 1F 02 F6 | 	mov	local01, arg01
1f298     03 12 06 F6 | 	mov	arg01, #3
1f29c     2C 1C B0 FD | 	call	#__system___gc_alloc_managed
1f2a0     00 FA 4D F2 | 	cmps	result1, #0 wz
1f2a4     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1f2a8     01 FA 05 51 |  if_ne	add	result1, #1
1f2ac     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1f2b0     01 FA 85 51 |  if_ne	sub	result1, #1
1f2b4     A7 F0 03 F6 | 	mov	ptra, fp
1f2b8     B2 00 A0 FD | 	call	#popregs_
1f2bc                 | __system__Chr_S_ret
1f2bc     2D 00 64 FD | 	ret
1f2c0                 | 
1f2c0                 | __system__str_S
1f2c0     02 4A 05 F6 | 	mov	COUNT_, #2
1f2c4     A8 00 A0 FD | 	call	#pushregs_
1f2c8     09 1F 02 F6 | 	mov	local01, arg01
1f2cc     10 12 06 F6 | 	mov	arg01, #16
1f2d0     F8 1B B0 FD | 	call	#__system___gc_alloc_managed
1f2d4     FD 20 0A F6 | 	mov	local02, result1 wz
1f2d8     30 00 90 AD |  if_e	jmp	#LR__2740
1f2dc     F8 13 02 F6 | 	mov	arg01, ptra
1f2e0     08 F0 07 F1 | 	add	ptra, #8
1f2e4     09 21 62 FC | 	wrlong	local02, arg01
1f2e8     04 12 06 F1 | 	add	arg01, #4
1f2ec     09 01 68 FC | 	wrlong	#0, arg01
1f2f0     04 12 86 F1 | 	sub	arg01, #4
1f2f4     00 E8 03 FF 
1f2f8     00 12 46 F5 | 	or	arg01, ##131072000
1f2fc     00 14 06 F6 | 	mov	arg02, #0
1f300     0F 17 02 F6 | 	mov	arg03, local01
1f304     67 18 06 F6 | 	mov	arg04, #103
1f308     90 EE BF FD | 	call	#__system___fmtfloat
1f30c                 | LR__2740
1f30c     10 FB 01 F6 | 	mov	result1, local02
1f310     A7 F0 03 F6 | 	mov	ptra, fp
1f314     B2 00 A0 FD | 	call	#popregs_
1f318                 | __system__str_S_ret
1f318     2D 00 64 FD | 	ret
1f31c                 | 
1f31c                 | __system__Number_S
1f31c     08 4A 05 F6 | 	mov	COUNT_, #8
1f320     A8 00 A0 FD | 	call	#pushregs_
1f324     09 1F 02 F6 | 	mov	local01, arg01
1f328     0A 21 0A F6 | 	mov	local02, arg02 wz
1f32c     0B 23 02 F6 | 	mov	local03, arg03
1f330     3C 00 90 5D |  if_ne	jmp	#LR__2752
1f334     01 20 06 F6 | 	mov	local02, #1
1f338     11 25 02 F6 | 	mov	local04, local03
1f33c     01 26 06 F6 | 	mov	local05, #1
1f340     97 16 48 FB | 	callpa	#(@LR__2751-@LR__2750)>>2,fcache_load_ptr_
1f344                 | LR__2750
1f344     00 28 06 F6 | 	mov	local06, #0
1f348     0F 25 1A F2 | 	cmp	local04, local01 wcz
1f34c     01 28 66 E6 |  if_be	neg	local06, #1
1f350     12 27 12 F2 | 	cmp	local05, local04 wc
1f354     15 2B A2 F1 | 	subx	local07, local07
1f358     15 29 CA F7 | 	test	local06, local07 wz
1f35c     11 25 02 5D |  if_ne	qmul	local04, local03
1f360     12 27 02 56 |  if_ne	mov	local05, local04
1f364     01 20 06 51 |  if_ne	add	local02, #1
1f368     18 24 62 5D |  if_ne	getqx	local04
1f36c     D4 FF 9F 5D |  if_ne	jmp	#LR__2750
1f370                 | LR__2751
1f370                 | LR__2752
1f370     20 20 36 F3 | 	fle	local02, #32 wc
1f374     10 13 02 F6 | 	mov	arg01, local02
1f378     02 12 06 F1 | 	add	arg01, #2
1f37c     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
1f380     FD 28 02 F6 | 	mov	local06, result1
1f384     10 2B 02 F6 | 	mov	local07, local02
1f388     14 2B 02 F1 | 	add	local07, local06
1f38c     15 01 48 FC | 	wrbyte	#0, local07
1f390     97 1A 48 FB | 	callpa	#(@LR__2754-@LR__2753)>>2,fcache_load_ptr_
1f394                 | LR__2753
1f394     01 20 16 F2 | 	cmp	local02, #1 wc
1f398     2C 00 90 CD |  if_b	jmp	#LR__2755
1f39c     11 1F 12 FD | 	qdiv	local01, local03
1f3a0     01 20 86 F1 | 	sub	local02, #1
1f3a4     10 2B 02 F6 | 	mov	local07, local02
1f3a8     14 2B 02 F1 | 	add	local07, local06
1f3ac     19 2C 62 FD | 	getqy	local08
1f3b0     0A 2C 16 F2 | 	cmp	local08, #10 wc
1f3b4     30 2C 06 C1 |  if_b	add	local08, #48
1f3b8     37 2C 06 31 |  if_ae	add	local08, #55
1f3bc     15 2D 42 FC | 	wrbyte	local08, local07
1f3c0     18 1E 62 FD | 	getqx	local01
1f3c4     CC FF 9F FD | 	jmp	#LR__2753
1f3c8                 | LR__2754
1f3c8                 | LR__2755
1f3c8     14 FB 01 F6 | 	mov	result1, local06
1f3cc     A7 F0 03 F6 | 	mov	ptra, fp
1f3d0     B2 00 A0 FD | 	call	#popregs_
1f3d4                 | __system__Number_S_ret
1f3d4     2D 00 64 FD | 	ret
1f3d8                 | 
1f3d8                 | __system__LCase_S
1f3d8     07 4A 05 F6 | 	mov	COUNT_, #7
1f3dc     A8 00 A0 FD | 	call	#pushregs_
1f3e0     09 1F 02 F6 | 	mov	local01, arg01
1f3e4     09 21 02 F6 | 	mov	local02, arg01
1f3e8     97 06 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
1f3ec                 | LR__2760
1f3ec     10 FB C9 FA | 	rdbyte	result1, local02 wz
1f3f0     01 20 06 51 |  if_ne	add	local02, #1
1f3f4     F4 FF 9F 5D |  if_ne	jmp	#LR__2760
1f3f8                 | LR__2761
1f3f8     09 21 82 F1 | 	sub	local02, arg01
1f3fc     10 FB 01 F6 | 	mov	result1, local02
1f400     FD 20 0A F6 | 	mov	local02, result1 wz
1f404     63 01 00 AF 
1f408     3E FA 05 A6 |  if_e	mov	result1, ##@LR__4597
1f40c     7C 00 90 AD |  if_e	jmp	#LR__2767
1f410     10 13 02 F6 | 	mov	arg01, local02
1f414     02 12 06 F1 | 	add	arg01, #2
1f418     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
1f41c     FD 22 0A F6 | 	mov	local03, result1 wz
1f420     64 00 90 AD |  if_e	jmp	#LR__2766
1f424     01 24 66 F6 | 	neg	local04, #1
1f428     97 26 48 FB | 	callpa	#(@LR__2765-@LR__2762)>>2,fcache_load_ptr_
1f42c                 | LR__2762
1f42c     01 24 06 F1 | 	add	local04, #1
1f430     12 27 02 F6 | 	mov	local05, local04
1f434     0F 27 02 F1 | 	add	local05, local01
1f438     13 29 C2 FA | 	rdbyte	local06, local05
1f43c     41 28 56 F2 | 	cmps	local06, #65 wc
1f440     18 00 90 CD |  if_b	jmp	#LR__2763
1f444     5B 28 56 F2 | 	cmps	local06, #91 wc
1f448     12 2B 02 C6 |  if_b	mov	local07, local04
1f44c     11 2B 02 C1 |  if_b	add	local07, local03
1f450     20 28 06 C1 |  if_b	add	local06, #32
1f454     15 29 42 CC |  if_b	wrbyte	local06, local07
1f458     0C 00 90 CD |  if_b	jmp	#LR__2764
1f45c                 | LR__2763
1f45c     12 2B 02 F6 | 	mov	local07, local04
1f460     11 2B 02 F1 | 	add	local07, local03
1f464     15 29 42 FC | 	wrbyte	local06, local07
1f468                 | LR__2764
1f468     10 29 02 F6 | 	mov	local06, local02
1f46c     01 28 86 F1 | 	sub	local06, #1
1f470     14 25 0A F2 | 	cmp	local04, local06 wz
1f474     B4 FF 9F 5D |  if_ne	jmp	#LR__2762
1f478                 | LR__2765
1f478     11 21 02 F1 | 	add	local02, local03
1f47c     10 01 48 FC | 	wrbyte	#0, local02
1f480     11 FB 01 F6 | 	mov	result1, local03
1f484     04 00 90 FD | 	jmp	#LR__2767
1f488                 | LR__2766
1f488     11 FB 01 F6 | 	mov	result1, local03
1f48c                 | LR__2767
1f48c     A7 F0 03 F6 | 	mov	ptra, fp
1f490     B2 00 A0 FD | 	call	#popregs_
1f494                 | __system__LCase_S_ret
1f494     2D 00 64 FD | 	ret
1f498                 | 
1f498                 | __system__LTrim_S
1f498     05 4A 05 F6 | 	mov	COUNT_, #5
1f49c     A8 00 A0 FD | 	call	#pushregs_
1f4a0     09 1F 02 F6 | 	mov	local01, arg01
1f4a4     09 21 02 F6 | 	mov	local02, arg01
1f4a8     97 06 48 FB | 	callpa	#(@LR__2771-@LR__2770)>>2,fcache_load_ptr_
1f4ac                 | LR__2770
1f4ac     10 FB C9 FA | 	rdbyte	result1, local02 wz
1f4b0     01 20 06 51 |  if_ne	add	local02, #1
1f4b4     F4 FF 9F 5D |  if_ne	jmp	#LR__2770
1f4b8                 | LR__2771
1f4b8     09 21 82 F1 | 	sub	local02, arg01
1f4bc     10 FB 01 F6 | 	mov	result1, local02
1f4c0     FD 20 0A F6 | 	mov	local02, result1 wz
1f4c4     63 01 00 AF 
1f4c8     3F FA 05 A6 |  if_e	mov	result1, ##@LR__4598
1f4cc     7C 00 90 AD |  if_e	jmp	#LR__2776
1f4d0     00 22 06 F6 | 	mov	local03, #0
1f4d4     10 25 02 F6 | 	mov	local04, local02
1f4d8                 | LR__2772
1f4d8     12 23 52 F2 | 	cmps	local03, local04 wc
1f4dc     68 00 90 3D |  if_ae	jmp	#LR__2775
1f4e0     11 17 02 F6 | 	mov	arg03, local03
1f4e4     0F 17 02 F1 | 	add	arg03, local01
1f4e8     0B 17 C2 FA | 	rdbyte	arg03, arg03
1f4ec     20 16 0E F2 | 	cmp	arg03, #32 wz
1f4f0     4C 00 90 AD |  if_e	jmp	#LR__2774
1f4f4     10 13 02 F6 | 	mov	arg01, local02
1f4f8     11 13 82 F1 | 	sub	arg01, local03
1f4fc     02 12 06 F1 | 	add	arg01, #2
1f500     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
1f504     FD 26 0A F6 | 	mov	local05, result1 wz
1f508     2C 00 90 AD |  if_e	jmp	#LR__2773
1f50c     11 15 02 F6 | 	mov	arg02, local03
1f510     0F 15 02 F1 | 	add	arg02, local01
1f514     10 17 02 F6 | 	mov	arg03, local02
1f518     11 17 82 F1 | 	sub	arg03, local03
1f51c     13 13 02 F6 | 	mov	arg01, local05
1f520     80 DA BF FD | 	call	#__system____builtin_memmove
1f524     11 21 82 F1 | 	sub	local02, local03
1f528     13 21 02 F1 | 	add	local02, local05
1f52c     10 01 48 FC | 	wrbyte	#0, local02
1f530     13 FB 01 F6 | 	mov	result1, local05
1f534     14 00 90 FD | 	jmp	#LR__2776
1f538                 | LR__2773
1f538     13 FB 01 F6 | 	mov	result1, local05
1f53c     0C 00 90 FD | 	jmp	#LR__2776
1f540                 | LR__2774
1f540     01 22 06 F1 | 	add	local03, #1
1f544     90 FF 9F FD | 	jmp	#LR__2772
1f548                 | LR__2775
1f548     0F FB 01 F6 | 	mov	result1, local01
1f54c                 | LR__2776
1f54c     A7 F0 03 F6 | 	mov	ptra, fp
1f550     B2 00 A0 FD | 	call	#popregs_
1f554                 | __system__LTrim_S_ret
1f554     2D 00 64 FD | 	ret
1f558                 | 
1f558                 | __system__RTrim_S
1f558     04 4A 05 F6 | 	mov	COUNT_, #4
1f55c     A8 00 A0 FD | 	call	#pushregs_
1f560     09 1F 02 F6 | 	mov	local01, arg01
1f564     09 21 02 F6 | 	mov	local02, arg01
1f568     97 06 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
1f56c                 | LR__2780
1f56c     10 FB C9 FA | 	rdbyte	result1, local02 wz
1f570     01 20 06 51 |  if_ne	add	local02, #1
1f574     F4 FF 9F 5D |  if_ne	jmp	#LR__2780
1f578                 | LR__2781
1f578     09 21 82 F1 | 	sub	local02, arg01
1f57c     10 FB 01 F6 | 	mov	result1, local02
1f580     FD 20 0A F6 | 	mov	local02, result1 wz
1f584     63 01 00 AF 
1f588     40 FA 05 A6 |  if_e	mov	result1, ##@LR__4599
1f58c     74 00 90 AD |  if_e	jmp	#LR__2785
1f590     10 23 02 F6 | 	mov	local03, local02
1f594     01 22 86 F1 | 	sub	local03, #1
1f598                 | LR__2782
1f598     11 15 02 F6 | 	mov	arg02, local03
1f59c     0F 15 02 F1 | 	add	arg02, local01
1f5a0     0A 21 C2 FA | 	rdbyte	local02, arg02
1f5a4     20 20 0E F2 | 	cmp	local02, #32 wz
1f5a8     44 00 90 AD |  if_e	jmp	#LR__2784
1f5ac     11 13 02 F6 | 	mov	arg01, local03
1f5b0     02 12 06 F1 | 	add	arg01, #2
1f5b4     14 19 B0 FD | 	call	#__system___gc_alloc_managed
1f5b8     FD 24 0A F6 | 	mov	local04, result1 wz
1f5bc     28 00 90 AD |  if_e	jmp	#LR__2783
1f5c0     11 17 02 F6 | 	mov	arg03, local03
1f5c4     01 16 06 F1 | 	add	arg03, #1
1f5c8     12 13 02 F6 | 	mov	arg01, local04
1f5cc     0F 15 02 F6 | 	mov	arg02, local01
1f5d0     D0 D9 BF FD | 	call	#__system____builtin_memmove
1f5d4     01 22 06 F1 | 	add	local03, #1
1f5d8     12 23 02 F1 | 	add	local03, local04
1f5dc     11 01 48 FC | 	wrbyte	#0, local03
1f5e0     12 FB 01 F6 | 	mov	result1, local04
1f5e4     1C 00 90 FD | 	jmp	#LR__2785
1f5e8                 | LR__2783
1f5e8     12 FB 01 F6 | 	mov	result1, local04
1f5ec     14 00 90 FD | 	jmp	#LR__2785
1f5f0                 | LR__2784
1f5f0     01 22 86 F1 | 	sub	local03, #1
1f5f4     00 22 56 F2 | 	cmps	local03, #0 wc
1f5f8     9C FF 9F 3D |  if_ae	jmp	#LR__2782
1f5fc     63 01 00 FF 
1f600     41 FA 05 F6 | 	mov	result1, ##@LR__4600
1f604                 | LR__2785
1f604     A7 F0 03 F6 | 	mov	ptra, fp
1f608     B2 00 A0 FD | 	call	#popregs_
1f60c                 | __system__RTrim_S_ret
1f60c     2D 00 64 FD | 	ret
1f610                 | 
1f610                 | __system__Instr
1f610     07 4A 05 F6 | 	mov	COUNT_, #7
1f614     A8 00 A0 FD | 	call	#pushregs_
1f618     09 1F 02 F6 | 	mov	local01, arg01
1f61c     0A 21 02 F6 | 	mov	local02, arg02
1f620     0B 23 02 F6 | 	mov	local03, arg03
1f624     11 13 02 F6 | 	mov	arg01, local03
1f628     09 25 02 F6 | 	mov	local04, arg01
1f62c     97 06 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
1f630                 | LR__2790
1f630     12 FB C9 FA | 	rdbyte	result1, local04 wz
1f634     01 24 06 51 |  if_ne	add	local04, #1
1f638     F4 FF 9F 5D |  if_ne	jmp	#LR__2790
1f63c                 | LR__2791
1f63c     09 25 82 F1 | 	sub	local04, arg01
1f640     12 27 02 F6 | 	mov	local05, local04
1f644     10 13 02 F6 | 	mov	arg01, local02
1f648     09 25 02 F6 | 	mov	local04, arg01
1f64c     97 06 48 FB | 	callpa	#(@LR__2793-@LR__2792)>>2,fcache_load_ptr_
1f650                 | LR__2792
1f650     12 FB C9 FA | 	rdbyte	result1, local04 wz
1f654     01 24 06 51 |  if_ne	add	local04, #1
1f658     F4 FF 9F 5D |  if_ne	jmp	#LR__2792
1f65c                 | LR__2793
1f65c     09 25 82 F1 | 	sub	local04, arg01
1f660     12 FB 01 F6 | 	mov	result1, local04
1f664     FD 18 0A F6 | 	mov	arg04, result1 wz
1f668     00 FA 05 A6 |  if_e	mov	result1, #0
1f66c     98 00 90 AD |  if_e	jmp	#LR__2797
1f670     00 26 0E F2 | 	cmp	local05, #0 wz
1f674     00 FA 05 A6 |  if_e	mov	result1, #0
1f678     8C 00 90 AD |  if_e	jmp	#LR__2797
1f67c     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
1f680     00 FA 05 16 |  if_a	mov	result1, #0
1f684     80 00 90 1D |  if_a	jmp	#LR__2797
1f688     01 1E 56 F2 | 	cmps	local01, #1 wc
1f68c     01 1E 06 C6 |  if_b	mov	local01, #1
1f690     11 29 C2 FA | 	rdbyte	local06, local03
1f694     01 26 0E F2 | 	cmp	local05, #1 wz
1f698     18 00 90 5D |  if_ne	jmp	#LR__2794
1f69c     10 13 02 F6 | 	mov	arg01, local02
1f6a0     14 15 02 F6 | 	mov	arg02, local06
1f6a4     0F 17 02 F6 | 	mov	arg03, local01
1f6a8     00 18 06 F6 | 	mov	arg04, #0
1f6ac     B4 33 B0 FD | 	call	#__system____ScanForChar
1f6b0     54 00 90 FD | 	jmp	#LR__2797
1f6b4                 | LR__2794
1f6b4     0F 2B 02 F6 | 	mov	local07, local01
1f6b8                 | LR__2795
1f6b8     10 13 02 F6 | 	mov	arg01, local02
1f6bc     14 15 02 F6 | 	mov	arg02, local06
1f6c0     15 17 02 F6 | 	mov	arg03, local07
1f6c4     00 18 06 F6 | 	mov	arg04, #0
1f6c8     98 33 B0 FD | 	call	#__system____ScanForChar
1f6cc     FD 2A 0A F6 | 	mov	local07, result1 wz
1f6d0     30 00 90 AD |  if_e	jmp	#LR__2796
1f6d4     13 17 02 F6 | 	mov	arg03, local05
1f6d8     10 13 02 F6 | 	mov	arg01, local02
1f6dc     15 15 02 F6 | 	mov	arg02, local07
1f6e0     FC FA BF FD | 	call	#__system__Mid_S
1f6e4     FD 12 02 F6 | 	mov	arg01, result1
1f6e8     11 15 02 F6 | 	mov	arg02, local03
1f6ec     BC D9 BF FD | 	call	#__system___string_cmp
1f6f0     00 FA 0D F2 | 	cmp	result1, #0 wz
1f6f4     15 FB 01 A6 |  if_e	mov	result1, local07
1f6f8     0C 00 90 AD |  if_e	jmp	#LR__2797
1f6fc     13 2B 02 F1 | 	add	local07, local05
1f700     B4 FF 9F FD | 	jmp	#LR__2795
1f704                 | LR__2796
1f704     00 FA 05 F6 | 	mov	result1, #0
1f708                 | LR__2797
1f708     A7 F0 03 F6 | 	mov	ptra, fp
1f70c     B2 00 A0 FD | 	call	#popregs_
1f710                 | __system__Instr_ret
1f710     2D 00 64 FD | 	ret
1f714                 | 
1f714                 | __system___strerror
1f714     00 12 56 F2 | 	cmps	arg01, #0 wc
1f718     08 00 90 CD |  if_b	jmp	#LR__2800
1f71c     1A 12 56 F2 | 	cmps	arg01, #26 wc
1f720     04 00 90 CD |  if_b	jmp	#LR__2801
1f724                 | LR__2800
1f724     19 12 06 F6 | 	mov	arg01, #25
1f728                 | LR__2801
1f728     02 12 66 F0 | 	shl	arg01, #2
1f72c     01 00 00 FF 
1f730     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
1f734     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1f738     09 FB 01 FB | 	rdlong	result1, arg01
1f73c     01 00 00 FF 
1f740     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
1f744                 | __system___strerror_ret
1f744     2D 00 64 FD | 	ret
1f748                 | 
1f748                 | __system___int64_shl
1f748     20 16 CE F7 | 	test	arg03, #32 wz
1f74c     09 15 02 56 |  if_ne	mov	arg02, arg01
1f750     00 12 06 56 |  if_ne	mov	arg01, #0
1f754     1F 16 CE F7 | 	test	arg03, #31 wz
1f758     18 00 90 AD |  if_e	jmp	#LR__2810
1f75c     0B 15 62 F0 | 	shl	arg02, arg03
1f760     09 FB 01 F6 | 	mov	result1, arg01
1f764     0B FD 61 F6 | 	neg	result2, arg03
1f768     FE FA 41 F0 | 	shr	result1, result2
1f76c     FD 14 42 F5 | 	or	arg02, result1
1f770     0B 13 62 F0 | 	shl	arg01, arg03
1f774                 | LR__2810
1f774     0A FD 01 F6 | 	mov	result2, arg02
1f778     09 FB 01 F6 | 	mov	result1, arg01
1f77c                 | __system___int64_shl_ret
1f77c     2D 00 64 FD | 	ret
1f780                 | 
1f780                 | __system___usepins
1f780     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1f784     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1f788     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
1f78c     00 13 CA F7 | 	test	arg01, _var01 wz
1f790     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
1f794     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1f798     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
1f79c     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1f7a0     00 FA 05 56 |  if_ne	mov	result1, #0
1f7a4     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1f7a8     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1f7ac     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1f7b0     09 03 42 F5 | 	or	_var02, arg01
1f7b4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1f7b8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1f7bc     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1f7c0     0A 03 42 F5 | 	or	_var02, arg02
1f7c4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1f7c8     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1f7cc     01 FA 65 F6 | 	neg	result1, #1
1f7d0                 | __system___usepins_ret
1f7d0     2D 00 64 FD | 	ret
1f7d4                 | 
1f7d4                 | __system___freepins
1f7d4     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1f7d8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1f7dc     09 01 22 F5 | 	andn	_var01, arg01
1f7e0     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1f7e4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1f7e8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1f7ec     0A 01 22 F5 | 	andn	_var01, arg02
1f7f0     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1f7f4     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1f7f8                 | __system___freepins_ret
1f7f8     2D 00 64 FD | 	ret
1f7fc                 | 
1f7fc                 | __system___float_fromuns
1f7fc     09 17 0A F6 | 	mov	arg03, arg01 wz
1f800     0B FB 01 A6 |  if_e	mov	result1, arg03
1f804     24 00 90 AD |  if_e	jmp	#LR__2820
1f808     0B 15 92 F7 | 	encod	arg02, arg03 wc
1f80c     01 14 06 C1 |  if_b	add	arg02, #1
1f810     01 14 86 F1 | 	sub	arg02, #1
1f814     1F 12 06 F6 | 	mov	arg01, #31
1f818     0A 13 82 F1 | 	sub	arg01, arg02
1f81c     09 17 62 F0 | 	shl	arg03, arg01
1f820     02 16 46 F0 | 	shr	arg03, #2
1f824     00 12 06 F6 | 	mov	arg01, #0
1f828     4C 09 B0 FD | 	call	#__system___float_Pack
1f82c                 | LR__2820
1f82c                 | __system___float_fromuns_ret
1f82c     2D 00 64 FD | 	ret
1f830                 | 
1f830                 | __system___float_add
1f830     0F 4A 05 F6 | 	mov	COUNT_, #15
1f834     A8 00 A0 FD | 	call	#pushregs_
1f838     09 1F 02 F6 | 	mov	local01, arg01
1f83c     0A 21 02 F6 | 	mov	local02, arg02
1f840     00 22 06 F6 | 	mov	local03, #0
1f844     0F 25 02 F6 | 	mov	local04, local01
1f848     12 27 02 F6 | 	mov	local05, local04
1f84c     16 26 46 F7 | 	zerox	local05, #22
1f850     12 29 02 F6 | 	mov	local06, local04
1f854     01 28 66 F0 | 	shl	local06, #1
1f858     18 28 46 F0 | 	shr	local06, #24
1f85c     1F 24 46 F0 | 	shr	local04, #31
1f860     10 13 02 F6 | 	mov	arg01, local02
1f864     09 FB 01 F6 | 	mov	result1, arg01
1f868     FD 2A 02 F6 | 	mov	local07, result1
1f86c     15 2D 02 F6 | 	mov	local08, local07
1f870     16 2C 46 F7 | 	zerox	local08, #22
1f874     15 2F 02 F6 | 	mov	local09, local07
1f878     01 2E 66 F0 | 	shl	local09, #1
1f87c     18 2E 46 F0 | 	shr	local09, #24
1f880     17 31 02 F6 | 	mov	local10, local09
1f884     1F 2A 46 F0 | 	shr	local07, #31
1f888     00 32 06 F6 | 	mov	local11, #0
1f88c     00 34 06 F6 | 	mov	local12, #0
1f890     18 29 12 F2 | 	cmp	local06, local10 wc
1f894     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1f898     2C 00 90 1D |  if_a	jmp	#LR__2830
1f89c     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1f8a0     24 00 90 3D |  if_ae	jmp	#LR__2830
1f8a4     13 37 02 F6 | 	mov	local13, local05
1f8a8     16 27 02 F6 | 	mov	local05, local08
1f8ac     1B 2D 02 F6 | 	mov	local08, local13
1f8b0     14 37 02 F6 | 	mov	local13, local06
1f8b4     18 29 02 F6 | 	mov	local06, local10
1f8b8     1B 31 02 F6 | 	mov	local10, local13
1f8bc     12 37 02 F6 | 	mov	local13, local04
1f8c0     15 25 02 F6 | 	mov	local04, local07
1f8c4     1B 2B 02 F6 | 	mov	local07, local13
1f8c8                 | LR__2830
1f8c8     FF 28 0E F2 | 	cmp	local06, #255 wz
1f8cc     70 01 90 AD |  if_e	jmp	#LR__2845
1f8d0     00 28 0E F2 | 	cmp	local06, #0 wz
1f8d4     AC 01 90 AD |  if_e	jmp	#LR__2847
1f8d8     17 26 26 F4 | 	bith	local05, #23
1f8dc                 | LR__2831
1f8dc     00 30 0E F2 | 	cmp	local10, #0 wz
1f8e0     F0 01 90 AD |  if_e	jmp	#LR__2851
1f8e4     17 2C 26 F4 | 	bith	local08, #23
1f8e8                 | LR__2832
1f8e8     7F 28 86 F1 | 	sub	local06, #127
1f8ec     7F 30 86 F1 | 	sub	local10, #127
1f8f0     14 39 02 F6 | 	mov	local14, local06
1f8f4     18 39 82 F1 | 	sub	local14, local10
1f8f8     97 14 48 FB | 	callpa	#(@LR__2834-@LR__2833)>>2,fcache_load_ptr_
1f8fc                 | LR__2833
1f8fc     20 38 56 F2 | 	cmps	local14, #32 wc
1f900     20 00 90 CD |  if_b	jmp	#LR__2835
1f904     16 2F 02 F6 | 	mov	local09, local08
1f908     00 32 0E F2 | 	cmp	local11, #0 wz
1f90c     6F 32 62 FD | 	wrnz	local11
1f910     19 2F 42 F5 | 	or	local09, local11
1f914     17 33 02 F6 | 	mov	local11, local09
1f918     00 2C 06 F6 | 	mov	local08, #0
1f91c     20 38 86 F1 | 	sub	local14, #32
1f920     D8 FF 9F FD | 	jmp	#LR__2833
1f924                 | LR__2834
1f924                 | LR__2835
1f924     00 38 0E F2 | 	cmp	local14, #0 wz
1f928     38 00 90 AD |  if_e	jmp	#LR__2836
1f92c     16 37 02 F6 | 	mov	local13, local08
1f930     20 30 06 F6 | 	mov	local10, #32
1f934     1C 31 82 F1 | 	sub	local10, local14
1f938     18 37 62 F0 | 	shl	local13, local10
1f93c     19 31 02 F6 | 	mov	local10, local11
1f940     20 2E 06 F6 | 	mov	local09, #32
1f944     1C 2F 82 F1 | 	sub	local09, local14
1f948     17 31 6A F0 | 	shl	local10, local09 wz
1f94c     1C 33 42 F0 | 	shr	local11, local14
1f950     1C 2D 42 F0 | 	shr	local08, local14
1f954     1B 33 42 F5 | 	or	local11, local13
1f958     00 3A 06 F6 | 	mov	local15, #0
1f95c     01 3A 06 56 |  if_ne	mov	local15, #1
1f960     1D 33 42 F5 | 	or	local11, local15
1f964                 | LR__2836
1f964     12 3B 02 F6 | 	mov	local15, local04
1f968     15 3B 62 F5 | 	xor	local15, local07
1f96c     01 3A CE F7 | 	test	local15, #1 wz
1f970     18 00 90 AD |  if_e	jmp	#LR__2837
1f974     16 2D 22 F6 | 	not	local08, local08
1f978     19 33 22 F6 | 	not	local11, local11
1f97c     01 32 0E F1 | 	add	local11, #1 wz
1f980     00 3A 06 F6 | 	mov	local15, #0
1f984     01 3A 06 A6 |  if_e	mov	local15, #1
1f988     1D 2D 02 F1 | 	add	local08, local15
1f98c                 | LR__2837
1f98c     19 35 12 F1 | 	add	local12, local11 wc
1f990     16 27 22 F1 | 	addx	local05, local08
1f994     00 26 56 F2 | 	cmps	local05, #0 wc
1f998     1C 00 90 3D |  if_ae	jmp	#LR__2838
1f99c     01 24 66 F5 | 	xor	local04, #1
1f9a0     13 27 22 F6 | 	not	local05, local05
1f9a4     1A 35 22 F6 | 	not	local12, local12
1f9a8     01 34 0E F1 | 	add	local12, #1 wz
1f9ac     00 3A 06 F6 | 	mov	local15, #0
1f9b0     01 3A 06 A6 |  if_e	mov	local15, #1
1f9b4     1D 27 02 F1 | 	add	local05, local15
1f9b8                 | LR__2838
1f9b8     00 80 00 FF 
1f9bc     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1f9c0     28 00 90 CD |  if_b	jmp	#LR__2839
1f9c4     01 28 06 F1 | 	add	local06, #1
1f9c8     1A 39 02 F6 | 	mov	local14, local12
1f9cc     01 38 06 F5 | 	and	local14, #1
1f9d0     01 34 46 F0 | 	shr	local12, #1
1f9d4     13 3B 02 F6 | 	mov	local15, local05
1f9d8     1F 3A 66 F0 | 	shl	local15, #31
1f9dc     1D 35 42 F5 | 	or	local12, local15
1f9e0     1C 35 42 F5 | 	or	local12, local14
1f9e4     01 26 46 F0 | 	shr	local05, #1
1f9e8     3C 00 90 FD | 	jmp	#LR__2844
1f9ec                 | LR__2839
1f9ec     00 40 00 FF 
1f9f0     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1f9f4     30 00 90 3D |  if_ae	jmp	#LR__2843
1f9f8     00 26 0E F2 | 	cmp	local05, #0 wz
1f9fc     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1fa00     08 24 46 A5 |  if_e	or	local04, #8
1fa04     01 24 26 A5 |  if_e	andn	local04, #1
1fa08     1C 00 90 AD |  if_e	jmp	#LR__2842
1fa0c                 | LR__2840
1fa0c     00 40 00 FF 
1fa10     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1fa14     10 00 90 3D |  if_ae	jmp	#LR__2841
1fa18     1A 35 12 F1 | 	add	local12, local12 wc
1fa1c     13 27 22 F1 | 	addx	local05, local05
1fa20     01 28 86 F1 | 	sub	local06, #1
1fa24     E4 FF 9F FD | 	jmp	#LR__2840
1fa28                 | LR__2841
1fa28                 | LR__2842
1fa28                 | LR__2843
1fa28                 | LR__2844
1fa28     13 13 02 F6 | 	mov	arg01, local05
1fa2c     1A 15 02 F6 | 	mov	arg02, local12
1fa30     14 17 02 F6 | 	mov	arg03, local06
1fa34     12 19 02 F6 | 	mov	arg04, local04
1fa38     6C 34 B0 FD | 	call	#__system__pack_0540
1fa3c     DC 00 90 FD | 	jmp	#LR__2855
1fa40                 | LR__2845
1fa40     FF 30 0E F2 | 	cmp	local10, #255 wz
1fa44     10 00 90 5D |  if_ne	jmp	#LR__2846
1fa48     12 2B 0A F2 | 	cmp	local07, local04 wz
1fa4c     00 F8 3F 5F 
1fa50     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1fa54     C4 00 90 5D |  if_ne	jmp	#LR__2855
1fa58                 | LR__2846
1fa58     00 26 0E F2 | 	cmp	local05, #0 wz
1fa5c     00 F8 3F 5F 
1fa60     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1fa64     B4 00 90 5D |  if_ne	jmp	#LR__2855
1fa68     1A 15 02 F6 | 	mov	arg02, local12
1fa6c     14 17 02 F6 | 	mov	arg03, local06
1fa70     12 19 02 F6 | 	mov	arg04, local04
1fa74     02 18 46 F5 | 	or	arg04, #2
1fa78     13 13 02 F6 | 	mov	arg01, local05
1fa7c     28 34 B0 FD | 	call	#__system__pack_0540
1fa80     98 00 90 FD | 	jmp	#LR__2855
1fa84                 | LR__2847
1fa84     00 26 0E F2 | 	cmp	local05, #0 wz
1fa88     28 00 90 AD |  if_e	jmp	#LR__2850
1fa8c     01 26 66 F0 | 	shl	local05, #1
1fa90     97 0E 48 FB | 	callpa	#(@LR__2849-@LR__2848)>>2,fcache_load_ptr_
1fa94                 | LR__2848
1fa94     00 40 00 FF 
1fa98     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1fa9c     14 3B 02 C6 |  if_b	mov	local15, local06
1faa0     01 3A 86 C1 |  if_b	sub	local15, #1
1faa4     1D 29 02 C6 |  if_b	mov	local06, local15
1faa8     01 26 66 C0 |  if_b	shl	local05, #1
1faac     E4 FF 9F CD |  if_b	jmp	#LR__2848
1fab0                 | LR__2849
1fab0     28 FE 9F FD | 	jmp	#LR__2831
1fab4                 | LR__2850
1fab4     15 25 02 F5 | 	and	local04, local07
1fab8     12 19 02 F6 | 	mov	arg04, local04
1fabc     08 18 46 F5 | 	or	arg04, #8
1fac0     00 12 06 F6 | 	mov	arg01, #0
1fac4     00 14 06 F6 | 	mov	arg02, #0
1fac8     00 16 06 F6 | 	mov	arg03, #0
1facc     D8 33 B0 FD | 	call	#__system__pack_0540
1fad0     48 00 90 FD | 	jmp	#LR__2855
1fad4                 | LR__2851
1fad4     00 2C 0E F2 | 	cmp	local08, #0 wz
1fad8     28 00 90 AD |  if_e	jmp	#LR__2854
1fadc     01 2C 66 F0 | 	shl	local08, #1
1fae0     97 0E 48 FB | 	callpa	#(@LR__2853-@LR__2852)>>2,fcache_load_ptr_
1fae4                 | LR__2852
1fae4     00 40 00 FF 
1fae8     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1faec     18 3B 02 C6 |  if_b	mov	local15, local10
1faf0     01 3A 86 C1 |  if_b	sub	local15, #1
1faf4     1D 31 02 C6 |  if_b	mov	local10, local15
1faf8     01 2C 66 C0 |  if_b	shl	local08, #1
1fafc     E4 FF 9F CD |  if_b	jmp	#LR__2852
1fb00                 | LR__2853
1fb00     E4 FD 9F FD | 	jmp	#LR__2832
1fb04                 | LR__2854
1fb04     7F 28 86 F1 | 	sub	local06, #127
1fb08     13 13 02 F6 | 	mov	arg01, local05
1fb0c     1A 15 02 F6 | 	mov	arg02, local12
1fb10     14 17 02 F6 | 	mov	arg03, local06
1fb14     12 19 02 F6 | 	mov	arg04, local04
1fb18     8C 33 B0 FD | 	call	#__system__pack_0540
1fb1c                 | LR__2855
1fb1c     A7 F0 03 F6 | 	mov	ptra, fp
1fb20     B2 00 A0 FD | 	call	#popregs_
1fb24                 | __system___float_add_ret
1fb24     2D 00 64 FD | 	ret
1fb28                 | 
1fb28                 | __system___float_sqrt
1fb28     04 4A 05 F6 | 	mov	COUNT_, #4
1fb2c     A8 00 A0 FD | 	call	#pushregs_
1fb30     09 1F 02 F6 | 	mov	local01, arg01
1fb34     09 FB 01 F6 | 	mov	result1, arg01
1fb38     FD 20 02 F6 | 	mov	local02, result1
1fb3c     10 23 02 F6 | 	mov	local03, local02
1fb40     16 22 46 F7 | 	zerox	local03, #22
1fb44     10 25 02 F6 | 	mov	local04, local02
1fb48     01 24 66 F0 | 	shl	local04, #1
1fb4c     18 24 4E F0 | 	shr	local04, #24 wz
1fb50     1F 20 46 F0 | 	shr	local02, #31
1fb54     70 00 90 AD |  if_e	jmp	#LR__2861
1fb58     17 22 26 F4 | 	bith	local03, #23
1fb5c                 | LR__2860
1fb5c     00 20 0E F2 | 	cmp	local02, #0 wz
1fb60     00 F8 3F 5F 
1fb64     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1fb68     88 00 90 5D |  if_ne	jmp	#LR__2864
1fb6c     FF 24 0E F2 | 	cmp	local04, #255 wz
1fb70     0F FB 01 A6 |  if_e	mov	result1, local01
1fb74     7C 00 90 AD |  if_e	jmp	#LR__2864
1fb78     7F 24 86 F1 | 	sub	local04, #127
1fb7c     01 24 CE F7 | 	test	local04, #1 wz
1fb80     01 22 66 50 |  if_ne	shl	local03, #1
1fb84     05 22 66 F0 | 	shl	local03, #5
1fb88     11 01 38 FD | 	qsqrt	#0, local03
1fb8c     01 24 86 51 |  if_ne	sub	local04, #1
1fb90     12 25 52 F6 | 	abs	local04, local04 wc
1fb94     01 24 46 F0 | 	shr	local04, #1
1fb98     12 17 82 F6 | 	negc	arg03, local04
1fb9c     10 19 02 F6 | 	mov	arg04, local02
1fba0     18 12 62 FD | 	getqx	arg01
1fba4     09 15 02 F6 | 	mov	arg02, arg01
1fba8     19 14 66 F0 | 	shl	arg02, #25
1fbac     07 12 46 F0 | 	shr	arg01, #7
1fbb0     00 80 00 FF 
1fbb4     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1fbb8     01 16 06 31 |  if_ae	add	arg03, #1
1fbbc     01 12 46 30 |  if_ae	shr	arg01, #1
1fbc0     E4 32 B0 FD | 	call	#__system__pack_0540
1fbc4     2C 00 90 FD | 	jmp	#LR__2864
1fbc8                 | LR__2861
1fbc8     00 22 0E F2 | 	cmp	local03, #0 wz
1fbcc     0F FB 01 A6 |  if_e	mov	result1, local01
1fbd0     20 00 90 AD |  if_e	jmp	#LR__2864
1fbd4     01 22 66 F0 | 	shl	local03, #1
1fbd8     97 0A 48 FB | 	callpa	#(@LR__2863-@LR__2862)>>2,fcache_load_ptr_
1fbdc                 | LR__2862
1fbdc     00 40 00 FF 
1fbe0     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1fbe4     01 24 86 C1 |  if_b	sub	local04, #1
1fbe8     01 22 66 C0 |  if_b	shl	local03, #1
1fbec     EC FF 9F CD |  if_b	jmp	#LR__2862
1fbf0                 | LR__2863
1fbf0     68 FF 9F FD | 	jmp	#LR__2860
1fbf4                 | LR__2864
1fbf4     A7 F0 03 F6 | 	mov	ptra, fp
1fbf8     B2 00 A0 FD | 	call	#popregs_
1fbfc                 | __system___float_sqrt_ret
1fbfc     2D 00 64 FD | 	ret
1fc00                 | 
1fc00                 | __system___float_mul
1fc00     0B 4A 05 F6 | 	mov	COUNT_, #11
1fc04     A8 00 A0 FD | 	call	#pushregs_
1fc08     09 1F 02 F6 | 	mov	local01, arg01
1fc0c     0A 21 02 F6 | 	mov	local02, arg02
1fc10     0F 23 02 F6 | 	mov	local03, local01
1fc14     11 25 02 F6 | 	mov	local04, local03
1fc18     16 24 46 F7 | 	zerox	local04, #22
1fc1c     11 27 02 F6 | 	mov	local05, local03
1fc20     01 26 66 F0 | 	shl	local05, #1
1fc24     18 26 46 F0 | 	shr	local05, #24
1fc28     1F 22 46 F0 | 	shr	local03, #31
1fc2c     10 FB 01 F6 | 	mov	result1, local02
1fc30     FD 28 02 F6 | 	mov	local06, result1
1fc34     14 2B 02 F6 | 	mov	local07, local06
1fc38     16 2A 46 F7 | 	zerox	local07, #22
1fc3c     14 2D 02 F6 | 	mov	local08, local06
1fc40     01 2C 66 F0 | 	shl	local08, #1
1fc44     18 2C 46 F0 | 	shr	local08, #24
1fc48     1F 28 46 F0 | 	shr	local06, #31
1fc4c     14 23 62 F5 | 	xor	local03, local06
1fc50     FF 26 0E F2 | 	cmp	local05, #255 wz
1fc54     90 00 90 AD |  if_e	jmp	#LR__2873
1fc58     FF 2C 0E F2 | 	cmp	local08, #255 wz
1fc5c     D8 00 90 AD |  if_e	jmp	#LR__2875
1fc60     00 26 0E F2 | 	cmp	local05, #0 wz
1fc64     0C 01 90 AD |  if_e	jmp	#LR__2876
1fc68     17 24 26 F4 | 	bith	local04, #23
1fc6c                 | LR__2870
1fc6c     00 2C 0E F2 | 	cmp	local08, #0 wz
1fc70     44 01 90 AD |  if_e	jmp	#LR__2880
1fc74     17 2A 26 F4 | 	bith	local07, #23
1fc78                 | LR__2871
1fc78     12 21 02 F6 | 	mov	local02, local04
1fc7c     04 20 66 F0 | 	shl	local02, #4
1fc80     15 29 02 F6 | 	mov	local06, local07
1fc84     05 28 66 F0 | 	shl	local06, #5
1fc88     14 21 02 FD | 	qmul	local02, local06
1fc8c     16 27 02 F1 | 	add	local05, local08
1fc90     FE 26 86 F1 | 	sub	local05, #254
1fc94     13 2F 02 F6 | 	mov	local09, local05
1fc98     04 24 66 F0 | 	shl	local04, #4
1fc9c     05 2A 66 F0 | 	shl	local07, #5
1fca0     18 30 62 FD | 	getqx	local10
1fca4     15 25 02 FD | 	qmul	local04, local07
1fca8     19 32 62 FD | 	getqy	local11
1fcac     00 80 00 FF 
1fcb0     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1fcb4     18 00 90 CD |  if_b	jmp	#LR__2872
1fcb8     01 2E 06 F1 | 	add	local09, #1
1fcbc     01 30 46 F0 | 	shr	local10, #1
1fcc0     19 2D 02 F6 | 	mov	local08, local11
1fcc4     1F 2C 66 F0 | 	shl	local08, #31
1fcc8     16 31 42 F5 | 	or	local10, local08
1fccc     01 32 46 F0 | 	shr	local11, #1
1fcd0                 | LR__2872
1fcd0     19 13 02 F6 | 	mov	arg01, local11
1fcd4     18 15 02 F6 | 	mov	arg02, local10
1fcd8     17 17 02 F6 | 	mov	arg03, local09
1fcdc     11 19 02 F6 | 	mov	arg04, local03
1fce0     C4 31 B0 FD | 	call	#__system__pack_0540
1fce4     10 01 90 FD | 	jmp	#LR__2884
1fce8                 | LR__2873
1fce8     00 24 0E F2 | 	cmp	local04, #0 wz
1fcec     0F FB 01 56 |  if_ne	mov	result1, local01
1fcf0     04 01 90 5D |  if_ne	jmp	#LR__2884
1fcf4     FF 2C 56 F2 | 	cmps	local08, #255 wc
1fcf8     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1fcfc     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1fd00     18 00 90 4D |  if_c_and_nz	jmp	#LR__2874
1fd04     00 F8 3F CF 
1fd08     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1fd0c     E8 00 90 CD |  if_b	jmp	#LR__2884
1fd10     00 2A 0E F2 | 	cmp	local07, #0 wz
1fd14     10 FB 01 56 |  if_ne	mov	result1, local02
1fd18     DC 00 90 5D |  if_ne	jmp	#LR__2884
1fd1c                 | LR__2874
1fd1c     02 22 46 F5 | 	or	local03, #2
1fd20     00 12 06 F6 | 	mov	arg01, #0
1fd24     00 14 06 F6 | 	mov	arg02, #0
1fd28     13 17 02 F6 | 	mov	arg03, local05
1fd2c     11 19 02 F6 | 	mov	arg04, local03
1fd30     74 31 B0 FD | 	call	#__system__pack_0540
1fd34     C0 00 90 FD | 	jmp	#LR__2884
1fd38                 | LR__2875
1fd38     00 26 0E F2 | 	cmp	local05, #0 wz
1fd3c     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1fd40     00 F8 3F AF 
1fd44     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1fd48     AC 00 90 AD |  if_e	jmp	#LR__2884
1fd4c     00 2A 0E F2 | 	cmp	local07, #0 wz
1fd50     10 FB 01 56 |  if_ne	mov	result1, local02
1fd54     A0 00 90 5D |  if_ne	jmp	#LR__2884
1fd58     16 17 02 F6 | 	mov	arg03, local08
1fd5c     11 19 02 F6 | 	mov	arg04, local03
1fd60     02 18 46 F5 | 	or	arg04, #2
1fd64     00 12 06 F6 | 	mov	arg01, #0
1fd68     00 14 06 F6 | 	mov	arg02, #0
1fd6c     38 31 B0 FD | 	call	#__system__pack_0540
1fd70     84 00 90 FD | 	jmp	#LR__2884
1fd74                 | LR__2876
1fd74     00 24 0E F2 | 	cmp	local04, #0 wz
1fd78     20 00 90 AD |  if_e	jmp	#LR__2879
1fd7c     01 24 66 F0 | 	shl	local04, #1
1fd80     97 0A 48 FB | 	callpa	#(@LR__2878-@LR__2877)>>2,fcache_load_ptr_
1fd84                 | LR__2877
1fd84     00 40 00 FF 
1fd88     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1fd8c     01 26 86 C1 |  if_b	sub	local05, #1
1fd90     01 24 66 C0 |  if_b	shl	local04, #1
1fd94     EC FF 9F CD |  if_b	jmp	#LR__2877
1fd98                 | LR__2878
1fd98     D0 FE 9F FD | 	jmp	#LR__2870
1fd9c                 | LR__2879
1fd9c     08 22 46 F5 | 	or	local03, #8
1fda0     00 12 06 F6 | 	mov	arg01, #0
1fda4     00 14 06 F6 | 	mov	arg02, #0
1fda8     00 16 06 F6 | 	mov	arg03, #0
1fdac     11 19 02 F6 | 	mov	arg04, local03
1fdb0     F4 30 B0 FD | 	call	#__system__pack_0540
1fdb4     40 00 90 FD | 	jmp	#LR__2884
1fdb8                 | LR__2880
1fdb8     00 2A 0E F2 | 	cmp	local07, #0 wz
1fdbc     20 00 90 AD |  if_e	jmp	#LR__2883
1fdc0     01 2A 66 F0 | 	shl	local07, #1
1fdc4     97 0A 48 FB | 	callpa	#(@LR__2882-@LR__2881)>>2,fcache_load_ptr_
1fdc8                 | LR__2881
1fdc8     00 40 00 FF 
1fdcc     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1fdd0     01 2C 86 C1 |  if_b	sub	local08, #1
1fdd4     01 2A 66 C0 |  if_b	shl	local07, #1
1fdd8     EC FF 9F CD |  if_b	jmp	#LR__2881
1fddc                 | LR__2882
1fddc     98 FE 9F FD | 	jmp	#LR__2871
1fde0                 | LR__2883
1fde0     08 22 46 F5 | 	or	local03, #8
1fde4     00 12 06 F6 | 	mov	arg01, #0
1fde8     00 14 06 F6 | 	mov	arg02, #0
1fdec     00 16 06 F6 | 	mov	arg03, #0
1fdf0     11 19 02 F6 | 	mov	arg04, local03
1fdf4     B0 30 B0 FD | 	call	#__system__pack_0540
1fdf8                 | LR__2884
1fdf8     A7 F0 03 F6 | 	mov	ptra, fp
1fdfc     B2 00 A0 FD | 	call	#popregs_
1fe00                 | __system___float_mul_ret
1fe00     2D 00 64 FD | 	ret
1fe04                 | 
1fe04                 | __system___float_div
1fe04     0E 4A 05 F6 | 	mov	COUNT_, #14
1fe08     A8 00 A0 FD | 	call	#pushregs_
1fe0c     09 23 02 F6 | 	mov	local03, arg01
1fe10     0A 25 02 F6 | 	mov	local04, arg02
1fe14     11 27 02 F6 | 	mov	local05, local03
1fe18     13 29 02 F6 | 	mov	local06, local05
1fe1c     16 28 46 F7 | 	zerox	local06, #22
1fe20     13 2B 02 F6 | 	mov	local07, local05
1fe24     01 2A 66 F0 | 	shl	local07, #1
1fe28     18 2A 46 F0 | 	shr	local07, #24
1fe2c     1F 26 46 F0 | 	shr	local05, #31
1fe30     12 FB 01 F6 | 	mov	result1, local04
1fe34     FD 2C 02 F6 | 	mov	local08, result1
1fe38     16 2F 02 F6 | 	mov	local09, local08
1fe3c     16 2E 46 F7 | 	zerox	local09, #22
1fe40     16 31 02 F6 | 	mov	local10, local08
1fe44     01 30 66 F0 | 	shl	local10, #1
1fe48     18 30 46 F0 | 	shr	local10, #24
1fe4c     1F 2C 46 F0 | 	shr	local08, #31
1fe50     16 27 62 F5 | 	xor	local05, local08
1fe54     FF 2A 0E F2 | 	cmp	local07, #255 wz
1fe58     D4 00 90 AD |  if_e	jmp	#LR__2895
1fe5c     FF 30 0E F2 | 	cmp	local10, #255 wz
1fe60     04 01 90 AD |  if_e	jmp	#LR__2896
1fe64     00 2A 0E F2 | 	cmp	local07, #0 wz
1fe68     24 01 90 AD |  if_e	jmp	#LR__2897
1fe6c     17 28 26 F4 | 	bith	local06, #23
1fe70                 | LR__2890
1fe70     00 30 0E F2 | 	cmp	local10, #0 wz
1fe74     70 01 90 AD |  if_e	jmp	#LR__2901
1fe78     17 2E 26 F4 | 	bith	local09, #23
1fe7c                 | LR__2891
1fe7c     18 2B 82 F1 | 	sub	local07, local10
1fe80     15 33 02 F6 | 	mov	local11, local07
1fe84     14 13 02 F6 | 	mov	arg01, local06
1fe88     02 12 46 F0 | 	shr	arg01, #2
1fe8c     1E 28 66 F0 | 	shl	local06, #30
1fe90     14 15 02 F6 | 	mov	arg02, local06
1fe94     17 17 02 F6 | 	mov	arg03, local09
1fe98     28 12 62 FD | 	setq	arg01
1fe9c     0B 15 12 FD | 	qdiv	arg02, arg03
1fea0     00 34 06 F6 | 	mov	local12, #0
1fea4     18 1E 62 FD | 	getqx	local01
1fea8     19 FC 61 FD | 	getqy	result2
1feac     FE 20 02 F6 | 	mov	local02, result2
1feb0     0F 37 02 F6 | 	mov	local13, local01
1feb4     00 20 4E F2 | 	cmps	local02, #0 wz
1feb8     1B 39 02 F6 | 	mov	local14, local13
1febc     19 38 66 F0 | 	shl	local14, #25
1fec0     01 34 06 56 |  if_ne	mov	local12, #1
1fec4     1A 39 42 F5 | 	or	local14, local12
1fec8     07 36 46 F0 | 	shr	local13, #7
1fecc     00 80 00 FF 
1fed0     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1fed4     1C 00 90 CD |  if_b	jmp	#LR__2892
1fed8     01 32 06 F1 | 	add	local11, #1
1fedc     01 38 46 F0 | 	shr	local14, #1
1fee0     1B 35 02 F6 | 	mov	local12, local13
1fee4     1F 34 66 F0 | 	shl	local12, #31
1fee8     1A 39 42 F5 | 	or	local14, local12
1feec     01 36 46 F0 | 	shr	local13, #1
1fef0     24 00 90 FD | 	jmp	#LR__2894
1fef4                 | LR__2892
1fef4     00 40 00 FF 
1fef8     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1fefc     18 00 90 3D |  if_ae	jmp	#LR__2893
1ff00     01 32 86 F1 | 	sub	local11, #1
1ff04     01 36 66 F0 | 	shl	local13, #1
1ff08     1C 35 02 F6 | 	mov	local12, local14
1ff0c     1F 34 46 F0 | 	shr	local12, #31
1ff10     1A 37 42 F5 | 	or	local13, local12
1ff14     01 38 66 F0 | 	shl	local14, #1
1ff18                 | LR__2893
1ff18                 | LR__2894
1ff18     1B 13 02 F6 | 	mov	arg01, local13
1ff1c     1C 15 02 F6 | 	mov	arg02, local14
1ff20     19 17 02 F6 | 	mov	arg03, local11
1ff24     13 19 02 F6 | 	mov	arg04, local05
1ff28     7C 2F B0 FD | 	call	#__system__pack_0540
1ff2c     F8 00 90 FD | 	jmp	#LR__2905
1ff30                 | LR__2895
1ff30     00 28 0E F2 | 	cmp	local06, #0 wz
1ff34     11 FB 01 56 |  if_ne	mov	result1, local03
1ff38     EC 00 90 5D |  if_ne	jmp	#LR__2905
1ff3c     FF 30 0E F2 | 	cmp	local10, #255 wz
1ff40     00 F8 3F AF 
1ff44     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1ff48     DC 00 90 AD |  if_e	jmp	#LR__2905
1ff4c     02 26 46 F5 | 	or	local05, #2
1ff50     00 12 06 F6 | 	mov	arg01, #0
1ff54     00 14 06 F6 | 	mov	arg02, #0
1ff58     15 17 02 F6 | 	mov	arg03, local07
1ff5c     13 19 02 F6 | 	mov	arg04, local05
1ff60     44 2F B0 FD | 	call	#__system__pack_0540
1ff64     C0 00 90 FD | 	jmp	#LR__2905
1ff68                 | LR__2896
1ff68     00 2E 0E F2 | 	cmp	local09, #0 wz
1ff6c     12 FB 01 56 |  if_ne	mov	result1, local04
1ff70     B4 00 90 5D |  if_ne	jmp	#LR__2905
1ff74     13 19 02 F6 | 	mov	arg04, local05
1ff78     08 18 46 F5 | 	or	arg04, #8
1ff7c     00 12 06 F6 | 	mov	arg01, #0
1ff80     00 14 06 F6 | 	mov	arg02, #0
1ff84     00 16 06 F6 | 	mov	arg03, #0
1ff88     1C 2F B0 FD | 	call	#__system__pack_0540
1ff8c     98 00 90 FD | 	jmp	#LR__2905
1ff90                 | LR__2897
1ff90     00 28 0E F2 | 	cmp	local06, #0 wz
1ff94     20 00 90 AD |  if_e	jmp	#LR__2900
1ff98     01 28 66 F0 | 	shl	local06, #1
1ff9c     97 0A 48 FB | 	callpa	#(@LR__2899-@LR__2898)>>2,fcache_load_ptr_
1ffa0                 | LR__2898
1ffa0     00 40 00 FF 
1ffa4     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1ffa8     01 2A 86 C1 |  if_b	sub	local07, #1
1ffac     01 28 66 C0 |  if_b	shl	local06, #1
1ffb0     EC FF 9F CD |  if_b	jmp	#LR__2898
1ffb4                 | LR__2899
1ffb4     B8 FE 9F FD | 	jmp	#LR__2890
1ffb8                 | LR__2900
1ffb8     00 30 0E F2 | 	cmp	local10, #0 wz
1ffbc     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1ffc0     00 F8 3F AF 
1ffc4     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1ffc8     5C 00 90 AD |  if_e	jmp	#LR__2905
1ffcc     13 19 02 F6 | 	mov	arg04, local05
1ffd0     08 18 46 F5 | 	or	arg04, #8
1ffd4     00 12 06 F6 | 	mov	arg01, #0
1ffd8     00 14 06 F6 | 	mov	arg02, #0
1ffdc     00 16 06 F6 | 	mov	arg03, #0
1ffe0     C4 2E B0 FD | 	call	#__system__pack_0540
1ffe4     40 00 90 FD | 	jmp	#LR__2905
1ffe8                 | LR__2901
1ffe8     00 2E 0E F2 | 	cmp	local09, #0 wz
1ffec     20 00 90 AD |  if_e	jmp	#LR__2904
1fff0     01 2E 66 F0 | 	shl	local09, #1
1fff4     97 0A 48 FB | 	callpa	#(@LR__2903-@LR__2902)>>2,fcache_load_ptr_
1fff8                 | LR__2902
1fff8     00 40 00 FF 
1fffc     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
20000     01 30 86 C1 |  if_b	sub	local10, #1
20004     01 2E 66 C0 |  if_b	shl	local09, #1
20008     EC FF 9F CD |  if_b	jmp	#LR__2902
2000c                 | LR__2903
2000c     6C FE 9F FD | 	jmp	#LR__2891
20010                 | LR__2904
20010     02 26 46 F5 | 	or	local05, #2
20014     00 12 06 F6 | 	mov	arg01, #0
20018     00 14 06 F6 | 	mov	arg02, #0
2001c     00 16 06 F6 | 	mov	arg03, #0
20020     13 19 02 F6 | 	mov	arg04, local05
20024     80 2E B0 FD | 	call	#__system__pack_0540
20028                 | LR__2905
20028     A7 F0 03 F6 | 	mov	ptra, fp
2002c     B2 00 A0 FD | 	call	#popregs_
20030                 | __system___float_div_ret
20030     2D 00 64 FD | 	ret
20034                 | 
20034                 | __system___float_cmp
20034     00 C0 3F FF 
20038     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
2003c     00 C0 3F CF 
20040     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
20044     0B FB 01 36 |  if_ae	mov	result1, arg03
20048     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2004c     00 C0 7F FF 
20050     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
20054     00 C0 7F CF 
20058     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
2005c     0B FB 01 36 |  if_ae	mov	result1, arg03
20060     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
20064     00 12 56 F2 | 	cmps	arg01, #0 wc
20068     2C 00 90 3D |  if_ae	jmp	#LR__2910
2006c     00 14 56 F2 | 	cmps	arg02, #0 wc
20070     0A FB 01 C6 |  if_b	mov	result1, arg02
20074     09 FB 81 C1 |  if_b	sub	result1, arg01
20078     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
2007c     00 14 0E F2 | 	cmp	arg02, #0 wz
20080     00 00 40 AF 
20084     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
20088     00 FA 05 A6 |  if_e	mov	result1, #0
2008c     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
20090     01 FA 65 F6 | 	neg	result1, #1
20094     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
20098                 | LR__2910
20098     00 14 56 F2 | 	cmps	arg02, #0 wc
2009c     1C 00 90 3D |  if_ae	jmp	#LR__2911
200a0     00 12 0E F2 | 	cmp	arg01, #0 wz
200a4     00 00 40 AF 
200a8     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
200ac     00 FA 05 A6 |  if_e	mov	result1, #0
200b0     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
200b4     01 FA 05 F6 | 	mov	result1, #1
200b8     08 00 90 FD | 	jmp	#__system___float_cmp_ret
200bc                 | LR__2911
200bc     0A 13 82 F1 | 	sub	arg01, arg02
200c0     09 FB 01 F6 | 	mov	result1, arg01
200c4                 | __system___float_cmp_ret
200c4     2D 00 64 FD | 	ret
200c8                 | 
200c8                 | __system___float_tointeger
200c8     02 4A 05 F6 | 	mov	COUNT_, #2
200cc     A8 00 A0 FD | 	call	#pushregs_
200d0     50 00 B0 FD | 	call	#__system___float_Unpack
200d4     FF FF 7F FF 
200d8     FF FD 55 F2 | 	cmps	result2, ##-1 wc
200dc     34 00 90 CD |  if_b	jmp	#LR__2920
200e0     1F FC 55 F2 | 	cmps	result2, #31 wc
200e4     2C 00 90 3D |  if_ae	jmp	#LR__2920
200e8     02 FE 65 F0 | 	shl	result3, #2
200ec     1E 1E 06 F6 | 	mov	local01, #30
200f0     FE 1E 82 F1 | 	sub	local01, result2
200f4     0F FF 41 F0 | 	shr	result3, local01
200f8     FF 20 02 F6 | 	mov	local02, result3
200fc     0A 21 02 F1 | 	add	local02, arg02
20100     01 20 46 F0 | 	shr	local02, #1
20104     00 FA 0D F2 | 	cmp	result1, #0 wz
20108     10 21 62 56 |  if_ne	neg	local02, local02
2010c     10 FB 01 F6 | 	mov	result1, local02
20110     04 00 90 FD | 	jmp	#LR__2921
20114                 | LR__2920
20114     00 FA 05 F6 | 	mov	result1, #0
20118                 | LR__2921
20118     A7 F0 03 F6 | 	mov	ptra, fp
2011c     B2 00 A0 FD | 	call	#popregs_
20120                 | __system___float_tointeger_ret
20120     2D 00 64 FD | 	ret
20124                 | 
20124                 | __system___float_Unpack
20124     09 01 02 F6 | 	mov	_var01, arg01
20128     1F 00 46 F0 | 	shr	_var01, #31
2012c     09 03 02 F6 | 	mov	_var02, arg01
20130     01 02 66 F0 | 	shl	_var02, #1
20134     18 02 4E F0 | 	shr	_var02, #24 wz
20138     17 13 06 F4 | 	bitl	arg01, #279
2013c     06 12 66 50 |  if_ne	shl	arg01, #6
20140     1D 12 26 54 |  if_ne	bith	arg01, #29
20144     1C 00 90 5D |  if_ne	jmp	#LR__2930
20148     09 05 92 F7 | 	encod	_var03, arg01 wc
2014c     01 04 06 C1 |  if_b	add	_var03, #1
20150     17 04 86 F1 | 	sub	_var03, #23
20154     02 03 02 F6 | 	mov	_var02, _var03
20158     07 FC 05 F6 | 	mov	result2, #7
2015c     02 FD 81 F1 | 	sub	result2, _var03
20160     FE 12 62 F0 | 	shl	arg01, result2
20164                 | LR__2930
20164     7F 02 86 F1 | 	sub	_var02, #127
20168     09 FF 01 F6 | 	mov	result3, arg01
2016c     00 FB 01 F6 | 	mov	result1, _var01
20170     01 FD 01 F6 | 	mov	result2, _var02
20174                 | __system___float_Unpack_ret
20174     2D 00 64 FD | 	ret
20178                 | 
20178                 | __system___float_Pack
20178     00 00 06 F6 | 	mov	_var01, #0
2017c     00 16 0E F2 | 	cmp	arg03, #0 wz
20180     8C 00 90 AD |  if_e	jmp	#LR__2941
20184     0B 03 92 F7 | 	encod	_var02, arg03 wc
20188     01 02 06 C1 |  if_b	add	_var02, #1
2018c     21 00 06 F6 | 	mov	_var01, #33
20190     01 01 82 F1 | 	sub	_var01, _var02
20194     00 17 62 F0 | 	shl	arg03, _var01
20198     03 02 06 F6 | 	mov	_var02, #3
2019c     00 03 82 F1 | 	sub	_var02, _var01
201a0     01 15 02 F1 | 	add	arg02, _var02
201a4     0A 05 02 F6 | 	mov	_var03, arg02
201a8     00 17 06 F1 | 	add	arg03, #256
201ac     0B 03 02 F6 | 	mov	_var02, arg03
201b0     FF 02 2E F5 | 	andn	_var02, #255 wz
201b4     01 04 06 A1 |  if_e	add	_var03, #1
201b8     7F 04 06 F1 | 	add	_var03, #127
201bc     FF FF 7F FF 
201c0     E9 05 46 F3 | 	fges	_var03, ##-23
201c4     FF 04 66 F3 | 	fles	_var03, #255
201c8     01 04 56 F2 | 	cmps	_var03, #1 wc
201cc     1C 00 90 3D |  if_ae	jmp	#LR__2940
201d0     01 16 46 F0 | 	shr	arg03, #1
201d4     1F 02 C6 F9 | 	decod	_var02, #31
201d8     0B 03 02 F1 | 	add	_var02, arg03
201dc     02 05 62 F6 | 	neg	_var03, _var03
201e0     02 03 42 F0 | 	shr	_var02, _var03
201e4     01 17 02 F6 | 	mov	arg03, _var02
201e8     00 04 06 F6 | 	mov	_var03, #0
201ec                 | LR__2940
201ec     09 FB 01 F6 | 	mov	result1, arg01
201f0     1F FA 65 F0 | 	shl	result1, #31
201f4     02 03 02 F6 | 	mov	_var02, _var03
201f8     17 02 66 F0 | 	shl	_var02, #23
201fc     01 FB 41 F5 | 	or	result1, _var02
20200     0B 07 02 F6 | 	mov	_var04, arg03
20204     09 06 46 F0 | 	shr	_var04, #9
20208     03 FB 41 F5 | 	or	result1, _var04
2020c     04 00 90 FD | 	jmp	#__system___float_Pack_ret
20210                 | LR__2941
20210     00 FB 01 F6 | 	mov	result1, _var01
20214                 | __system___float_Pack_ret
20214     2D 00 64 FD | 	ret
20218                 | 
20218                 | __system___basic_print_float
20218     05 4A 05 F6 | 	mov	COUNT_, #5
2021c     A8 00 A0 FD | 	call	#pushregs_
20220     09 1F 02 F6 | 	mov	local01, arg01
20224     0A 21 02 F6 | 	mov	local02, arg02
20228     0B 23 0A F6 | 	mov	local03, arg03 wz
2022c     0C 25 02 F6 | 	mov	local04, arg04
20230     14 00 90 5D |  if_ne	jmp	#LR__2950
20234     23 24 0E F2 | 	cmp	local04, #35 wz
20238     80 02 10 AF 
2023c     00 26 06 A6 |  if_e	mov	local05, ##537198592
20240     1D 26 C6 59 |  if_ne	decod	local05, #29
20244     13 23 02 F6 | 	mov	local03, local05
20248                 | LR__2950
20248     0F 13 02 F6 | 	mov	arg01, local01
2024c     40 27 B0 FD | 	call	#__system___gettxfunc
20250     FD 26 0A F6 | 	mov	local05, result1 wz
20254     00 FA 05 A6 |  if_e	mov	result1, #0
20258     13 13 02 56 |  if_ne	mov	arg01, local05
2025c     11 15 02 56 |  if_ne	mov	arg02, local03
20260     10 17 02 56 |  if_ne	mov	arg03, local02
20264     12 19 02 56 |  if_ne	mov	arg04, local04
20268     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
2026c     A7 F0 03 F6 | 	mov	ptra, fp
20270     B2 00 A0 FD | 	call	#popregs_
20274                 | __system___basic_print_float_ret
20274     2D 00 64 FD | 	ret
20278                 | 
20278                 | __system____builtin_atoi
20278     07 4A 05 F6 | 	mov	COUNT_, #7
2027c     A8 00 A0 FD | 	call	#pushregs_
20280                 | __system____builtin_atoi_enter
20280     09 1F 02 F6 | 	mov	local01, arg01
20284     0A 21 02 F6 | 	mov	local02, arg02
20288     00 22 06 F6 | 	mov	local03, #0
2028c     00 24 06 F6 | 	mov	local04, #0
20290     00 26 06 F6 | 	mov	local05, #0
20294     97 08 48 FB | 	callpa	#(@LR__2961-@LR__2960)>>2,fcache_load_ptr_
20298                 | LR__2960
20298     0F 29 C2 FA | 	rdbyte	local06, local01
2029c     20 28 0E F2 | 	cmp	local06, #32 wz
202a0     01 1E 06 A1 |  if_e	add	local01, #1
202a4     F0 FF 9F AD |  if_e	jmp	#LR__2960
202a8                 | LR__2961
202a8     0F 2B C2 FA | 	rdbyte	local07, local01
202ac                 | LR__2962
202ac     2D 2A 0E F2 | 	cmp	local07, #45 wz
202b0     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
202b4     18 00 90 5D |  if_ne	jmp	#LR__2963
202b8     01 1E 06 F1 | 	add	local01, #1
202bc     2D 2A 0E F2 | 	cmp	local07, #45 wz
202c0     01 28 06 A6 |  if_e	mov	local06, #1
202c4     14 27 C2 A2 |  if_e	subr	local05, local06
202c8     0F 2B C2 FA | 	rdbyte	local07, local01
202cc     DC FF 9F FD | 	jmp	#LR__2962
202d0                 | LR__2963
202d0     97 48 48 FB | 	callpa	#(@LR__2971-@LR__2964)>>2,fcache_load_ptr_
202d4                 | LR__2964
202d4                 | LR__2965
202d4     0F 2B C2 FA | 	rdbyte	local07, local01
202d8     5F 2A 0E F2 | 	cmp	local07, #95 wz
202dc     01 1E 06 F1 | 	add	local01, #1
202e0     F0 FF 9F AD |  if_e	jmp	#LR__2965
202e4     30 2A 0E F2 | 	cmp	local07, #48 wz
202e8     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
202ec     00 24 06 A6 |  if_e	mov	local04, #0
202f0     60 00 90 AD |  if_e	jmp	#LR__2970
202f4     31 2A 56 F2 | 	cmps	local07, #49 wc
202f8     18 00 90 CD |  if_b	jmp	#LR__2966
202fc     3A 2A 56 F2 | 	cmps	local07, #58 wc
20300     15 25 02 C6 |  if_b	mov	local04, local07
20304     30 24 86 C1 |  if_b	sub	local04, #48
20308     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2030c     0A 20 06 86 |  if_c_and_z	mov	local02, #10
20310     40 00 90 CD |  if_b	jmp	#LR__2969
20314                 | LR__2966
20314     0B 20 56 F2 | 	cmps	local02, #11 wc
20318     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
2031c     14 00 90 CD |  if_b	jmp	#LR__2967
20320     67 2A 56 F2 | 	cmps	local07, #103 wc
20324     61 2A 86 C1 |  if_b	sub	local07, #97
20328     0A 24 06 C6 |  if_b	mov	local04, #10
2032c     15 25 02 C1 |  if_b	add	local04, local07
20330     20 00 90 CD |  if_b	jmp	#LR__2968
20334                 | LR__2967
20334     0B 20 56 F2 | 	cmps	local02, #11 wc
20338     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
2033c     24 00 90 CD |  if_b	jmp	#LR__2972
20340     47 2A 56 F2 | 	cmps	local07, #71 wc
20344     41 2A 86 C1 |  if_b	sub	local07, #65
20348     0A 24 06 C6 |  if_b	mov	local04, #10
2034c     15 25 02 C1 |  if_b	add	local04, local07
20350     10 00 90 3D |  if_ae	jmp	#LR__2972
20354                 | LR__2968
20354                 | LR__2969
20354                 | LR__2970
20354     11 21 02 FD | 	qmul	local02, local03
20358     18 22 62 FD | 	getqx	local03
2035c     12 23 02 F1 | 	add	local03, local04
20360     70 FF 9F FD | 	jmp	#LR__2964
20364                 | LR__2971
20364                 | LR__2972
20364     00 20 0E F2 | 	cmp	local02, #0 wz
20368     64 00 90 5D |  if_ne	jmp	#LR__2978
2036c     78 2A 0E F2 | 	cmp	local07, #120 wz
20370     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
20374     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
20378     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
2037c     14 00 90 5D |  if_ne	jmp	#LR__2973
20380     0F 13 02 F6 | 	mov	arg01, local01
20384     10 14 06 F6 | 	mov	arg02, #16
20388     EC FE BF FD | 	call	#__system____builtin_atoi
2038c     FD 22 02 F6 | 	mov	local03, result1
20390     3C 00 90 FD | 	jmp	#LR__2977
20394                 | LR__2973
20394     62 2A 0E F2 | 	cmp	local07, #98 wz
20398     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
2039c     14 00 90 5D |  if_ne	jmp	#LR__2974
203a0     0F 13 02 F6 | 	mov	arg01, local01
203a4     02 14 06 F6 | 	mov	arg02, #2
203a8     CC FE BF FD | 	call	#__system____builtin_atoi
203ac     FD 22 02 F6 | 	mov	local03, result1
203b0     1C 00 90 FD | 	jmp	#LR__2976
203b4                 | LR__2974
203b4     6F 2A 0E F2 | 	cmp	local07, #111 wz
203b8     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
203bc     10 00 90 5D |  if_ne	jmp	#LR__2975
203c0     0F 13 02 F6 | 	mov	arg01, local01
203c4     08 14 06 F6 | 	mov	arg02, #8
203c8     AC FE BF FD | 	call	#__system____builtin_atoi
203cc     FD 22 02 F6 | 	mov	local03, result1
203d0                 | LR__2975
203d0                 | LR__2976
203d0                 | LR__2977
203d0                 | LR__2978
203d0     00 26 0E F2 | 	cmp	local05, #0 wz
203d4     11 23 62 56 |  if_ne	neg	local03, local03
203d8     11 FB 01 F6 | 	mov	result1, local03
203dc     A7 F0 03 F6 | 	mov	ptra, fp
203e0     B2 00 A0 FD | 	call	#popregs_
203e4                 | __system____builtin_atoi_ret
203e4     2D 00 64 FD | 	ret
203e8                 | 
203e8                 | __system____builtin_atof
203e8     07 4A 05 F6 | 	mov	COUNT_, #7
203ec     A8 00 A0 FD | 	call	#pushregs_
203f0     09 1F 02 F6 | 	mov	local01, arg01
203f4     00 20 06 F6 | 	mov	local02, #0
203f8     00 22 06 F6 | 	mov	local03, #0
203fc     00 24 06 F6 | 	mov	local04, #0
20400     00 26 06 F6 | 	mov	local05, #0
20404     97 08 48 FB | 	callpa	#(@LR__2981-@LR__2980)>>2,fcache_load_ptr_
20408                 | LR__2980
20408     0F 17 C2 FA | 	rdbyte	arg03, local01
2040c     20 16 0E F2 | 	cmp	arg03, #32 wz
20410     01 1E 06 A1 |  if_e	add	local01, #1
20414     F0 FF 9F AD |  if_e	jmp	#LR__2980
20418                 | LR__2981
20418     0F 29 C2 FA | 	rdbyte	local06, local01
2041c                 | LR__2982
2041c     2B 28 0E F2 | 	cmp	local06, #43 wz
20420     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
20424     14 00 90 5D |  if_ne	jmp	#LR__2983
20428     2D 28 0E F2 | 	cmp	local06, #45 wz
2042c     1F 24 E6 A4 |  if_e	bitnot	local04, #31
20430     01 1E 06 F1 | 	add	local01, #1
20434     0F 29 C2 FA | 	rdbyte	local06, local01
20438     E0 FF 9F FD | 	jmp	#LR__2982
2043c                 | LR__2983
2043c                 | LR__2984
2043c     97 08 48 FB | 	callpa	#(@LR__2986-@LR__2985)>>2,fcache_load_ptr_
20440                 | LR__2985
20440     0F 29 C2 FA | 	rdbyte	local06, local01
20444     5F 28 0E F2 | 	cmp	local06, #95 wz
20448     01 1E 06 F1 | 	add	local01, #1
2044c     F0 FF 9F AD |  if_e	jmp	#LR__2985
20450                 | LR__2986
20450     00 28 0E F2 | 	cmp	local06, #0 wz
20454     5C 00 90 AD |  if_e	jmp	#LR__2988
20458     30 28 56 F2 | 	cmps	local06, #48 wc
2045c     44 00 90 CD |  if_b	jmp	#LR__2987
20460     3A 28 56 F2 | 	cmps	local06, #58 wc
20464     3C 00 90 3D |  if_ae	jmp	#LR__2987
20468     10 13 02 F6 | 	mov	arg01, local02
2046c     00 90 20 FF 
20470     00 14 06 F6 | 	mov	arg02, ##1092616192
20474     88 F7 BF FD | 	call	#__system___float_mul
20478     FD 20 02 F6 | 	mov	local02, result1
2047c     30 28 86 F1 | 	sub	local06, #48
20480     14 13 02 F6 | 	mov	arg01, local06
20484     74 F3 BF FD | 	call	#__system___float_fromuns
20488     FD 14 02 F6 | 	mov	arg02, result1
2048c     10 13 02 F6 | 	mov	arg01, local02
20490     9C F3 BF FD | 	call	#__system___float_add
20494     FD 20 02 F6 | 	mov	local02, result1
20498     00 26 0E F2 | 	cmp	local05, #0 wz
2049c     01 22 86 51 |  if_ne	sub	local03, #1
204a0     98 FF 9F FD | 	jmp	#LR__2984
204a4                 | LR__2987
204a4     2E 28 0E F2 | 	cmp	local06, #46 wz
204a8     00 26 0E A2 |  if_e	cmp	local05, #0 wz
204ac     01 26 06 A6 |  if_e	mov	local05, #1
204b0     88 FF 9F AD |  if_e	jmp	#LR__2984
204b4                 | LR__2988
204b4     45 28 0E F2 | 	cmp	local06, #69 wz
204b8     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
204bc     18 00 90 5D |  if_ne	jmp	#LR__2989
204c0     0F 13 02 F6 | 	mov	arg01, local01
204c4     00 14 06 F6 | 	mov	arg02, #0
204c8     AC FD BF FD | 	call	#__system____builtin_atoi
204cc     11 FB 01 F1 | 	add	result1, local03
204d0     FD 2A 02 F6 | 	mov	local07, result1
204d4     04 00 90 FD | 	jmp	#LR__2990
204d8                 | LR__2989
204d8     11 2B 02 F6 | 	mov	local07, local03
204dc                 | LR__2990
204dc     15 17 02 F6 | 	mov	arg03, local07
204e0     10 13 02 F6 | 	mov	arg01, local02
204e4     00 90 20 FF 
204e8     00 14 06 F6 | 	mov	arg02, ##1092616192
204ec     BC 06 B0 FD | 	call	#__system___float_pow_n
204f0     12 FB 61 F5 | 	xor	result1, local04
204f4     A7 F0 03 F6 | 	mov	ptra, fp
204f8     B2 00 A0 FD | 	call	#popregs_
204fc                 | __system____builtin_atof_ret
204fc     2D 00 64 FD | 	ret
20500                 | 
20500                 | __system____builtin_ilogb
20500     20 FC BF FD | 	call	#__system___float_Unpack
20504     00 FE 0D F2 | 	cmp	result3, #0 wz
20508     00 00 40 AF 
2050c     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
20510     24 00 90 AD |  if_e	jmp	#LR__3001
20514     80 FC 0D F2 | 	cmp	result2, #128 wz
20518     18 00 90 5D |  if_ne	jmp	#LR__3000
2051c     00 00 10 FF 
20520     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
20524     1E FA CD A9 |  if_e	bmask	result1, #30
20528     0C 00 90 AD |  if_e	jmp	#LR__3001
2052c     1F FA C5 F9 | 	decod	result1, #31
20530     04 00 90 FD | 	jmp	#LR__3001
20534                 | LR__3000
20534     FE FA 01 F6 | 	mov	result1, result2
20538                 | LR__3001
20538                 | __system____builtin_ilogb_ret
20538     2D 00 64 FD | 	ret
2053c                 | 
2053c                 | __system____builtin_sinf
2053c     03 4A 05 F6 | 	mov	COUNT_, #3
20540     A8 00 A0 FD | 	call	#pushregs_
20544     09 1F 02 F6 | 	mov	local01, arg01
20548     87 64 20 FF 
2054c     DB 15 06 F6 | 	mov	arg02, ##1086918619
20550     B0 F8 BF FD | 	call	#__system___float_div
20554     FD 12 02 F6 | 	mov	arg01, result1
20558     00 14 06 F6 | 	mov	arg02, #0
2055c     68 FB BF FD | 	call	#__system___float_tointeger
20560     FD 16 0A F6 | 	mov	arg03, result1 wz
20564     44 00 90 AD |  if_e	jmp	#LR__3010
20568     0B 13 52 F6 | 	abs	arg01, arg03 wc
2056c     1F 20 C6 C9 |  if_b	decod	local02, #31
20570     00 20 06 36 |  if_ae	mov	local02, #0
20574     84 F2 BF FD | 	call	#__system___float_fromuns
20578     10 FB 61 F5 | 	xor	result1, local02
2057c     FD 12 02 F6 | 	mov	arg01, result1
20580     1E 14 C6 F9 | 	decod	arg02, #30
20584     78 F6 BF FD | 	call	#__system___float_mul
20588     FD 12 02 F6 | 	mov	arg01, result1
2058c     87 24 20 FF 
20590     DB 15 06 F6 | 	mov	arg02, ##1078530011
20594     68 F6 BF FD | 	call	#__system___float_mul
20598     FD 14 02 F6 | 	mov	arg02, result1
2059c     0F 13 02 F6 | 	mov	arg01, local01
205a0     1F 14 E6 F4 | 	bitnot	arg02, #31
205a4     88 F2 BF FD | 	call	#__system___float_add
205a8     FD 1E 02 F6 | 	mov	local01, result1
205ac                 | LR__3010
205ac     0F 13 02 F6 | 	mov	arg01, local01
205b0     66 E6 1E FF 
205b4     CD 14 06 F6 | 	mov	arg02, ##1036831949
205b8     01 16 06 F6 | 	mov	arg03, #1
205bc     74 FA BF FD | 	call	#__system___float_cmp
205c0     00 FA 55 F2 | 	cmps	result1, #0 wc
205c4     5C 00 90 3D |  if_ae	jmp	#LR__3011
205c8     0F 13 02 F6 | 	mov	arg01, local01
205cc     66 E6 5E FF 
205d0     CD 14 06 F6 | 	mov	arg02, ##-1110651699
205d4     01 16 66 F6 | 	neg	arg03, #1
205d8     58 FA BF FD | 	call	#__system___float_cmp
205dc     01 FA 55 F2 | 	cmps	result1, #1 wc
205e0     40 00 90 CD |  if_b	jmp	#LR__3011
205e4     0F 13 02 F6 | 	mov	arg01, local01
205e8     0F 15 02 F6 | 	mov	arg02, local01
205ec     10 F6 BF FD | 	call	#__system___float_mul
205f0     FD 12 02 F6 | 	mov	arg01, result1
205f4     0F 15 02 F6 | 	mov	arg02, local01
205f8     04 F6 BF FD | 	call	#__system___float_mul
205fc     FD 12 02 F6 | 	mov	arg01, result1
20600     00 60 20 FF 
20604     00 14 06 F6 | 	mov	arg02, ##1086324736
20608     F8 F7 BF FD | 	call	#__system___float_div
2060c     FD 14 02 F6 | 	mov	arg02, result1
20610     0F 13 02 F6 | 	mov	arg01, local01
20614     1F 14 E6 F4 | 	bitnot	arg02, #31
20618     14 F2 BF FD | 	call	#__system___float_add
2061c     FD 22 02 F6 | 	mov	local03, result1
20620     54 00 90 FD | 	jmp	#LR__3012
20624                 | LR__3011
20624     0F 13 02 F6 | 	mov	arg01, local01
20628     7C 91 26 FF 
2062c     83 15 06 F6 | 	mov	arg02, ##1294137731
20630     CC F5 BF FD | 	call	#__system___float_mul
20634     FD 12 02 F6 | 	mov	arg01, result1
20638     00 14 06 F6 | 	mov	arg02, #0
2063c     88 FA BF FD | 	call	#__system___float_tointeger
20640     02 FA 65 F0 | 	shl	result1, #2
20644     00 00 A0 FF 
20648     FD 00 48 FD | 	qrotate	##1073741824, result1
2064c     19 12 62 FD | 	getqy	arg01
20650     09 13 52 F6 | 	abs	arg01, arg01 wc
20654     1F 20 C6 C9 |  if_b	decod	local02, #31
20658     00 20 06 36 |  if_ae	mov	local02, #0
2065c     9C F1 BF FD | 	call	#__system___float_fromuns
20660     10 FB 61 F5 | 	xor	result1, local02
20664     FD 12 02 F6 | 	mov	arg01, result1
20668     00 40 27 FF 
2066c     00 14 06 F6 | 	mov	arg02, ##1317011456
20670     90 F7 BF FD | 	call	#__system___float_div
20674     FD 22 02 F6 | 	mov	local03, result1
20678                 | LR__3012
20678     11 FB 01 F6 | 	mov	result1, local03
2067c     A7 F0 03 F6 | 	mov	ptra, fp
20680     B2 00 A0 FD | 	call	#popregs_
20684                 | __system____builtin_sinf_ret
20684     2D 00 64 FD | 	ret
20688                 | 
20688                 | __system____builtin_tanf
20688     02 4A 05 F6 | 	mov	COUNT_, #2
2068c     A8 00 A0 FD | 	call	#pushregs_
20690     09 1F 02 F6 | 	mov	local01, arg01
20694     A4 FE BF FD | 	call	#__system____builtin_sinf
20698     FD 20 02 F6 | 	mov	local02, result1
2069c     0F 15 02 F6 | 	mov	arg02, local01
206a0     87 E4 1F FF 
206a4     DB 13 06 F6 | 	mov	arg01, ##1070141403
206a8     1F 14 E6 F4 | 	bitnot	arg02, #31
206ac     80 F1 BF FD | 	call	#__system___float_add
206b0     FD 12 02 F6 | 	mov	arg01, result1
206b4     84 FE BF FD | 	call	#__system____builtin_sinf
206b8     FD 14 02 F6 | 	mov	arg02, result1
206bc     10 13 02 F6 | 	mov	arg01, local02
206c0     40 F7 BF FD | 	call	#__system___float_div
206c4     A7 F0 03 F6 | 	mov	ptra, fp
206c8     B2 00 A0 FD | 	call	#popregs_
206cc                 | __system____builtin_tanf_ret
206cc     2D 00 64 FD | 	ret
206d0                 | 
206d0                 | __system____builtin_asinf
206d0     01 4A 05 F6 | 	mov	COUNT_, #1
206d4     A8 00 A0 FD | 	call	#pushregs_
206d8     09 1F 02 F6 | 	mov	local01, arg01
206dc     0F 15 02 F6 | 	mov	arg02, local01
206e0     0F 13 02 F6 | 	mov	arg01, local01
206e4     18 F5 BF FD | 	call	#__system___float_mul
206e8     FD 14 02 F6 | 	mov	arg02, result1
206ec     00 C0 1F FF 
206f0     00 12 06 F6 | 	mov	arg01, ##1065353216
206f4     1F 14 E6 F4 | 	bitnot	arg02, #31
206f8     34 F1 BF FD | 	call	#__system___float_add
206fc     FD 12 02 F6 | 	mov	arg01, result1
20700     24 F4 BF FD | 	call	#__system___float_sqrt
20704     FD 14 02 F6 | 	mov	arg02, result1
20708     0F 13 02 F6 | 	mov	arg01, local01
2070c     58 00 B0 FD | 	call	#__system____builtin_atan2f
20710     A7 F0 03 F6 | 	mov	ptra, fp
20714     B2 00 A0 FD | 	call	#popregs_
20718                 | __system____builtin_asinf_ret
20718     2D 00 64 FD | 	ret
2071c                 | 
2071c                 | __system____builtin_acosf
2071c     01 4A 05 F6 | 	mov	COUNT_, #1
20720     A8 00 A0 FD | 	call	#pushregs_
20724     09 1F 02 F6 | 	mov	local01, arg01
20728     0F 15 02 F6 | 	mov	arg02, local01
2072c     0F 13 02 F6 | 	mov	arg01, local01
20730     CC F4 BF FD | 	call	#__system___float_mul
20734     FD 14 02 F6 | 	mov	arg02, result1
20738     00 C0 1F FF 
2073c     00 12 06 F6 | 	mov	arg01, ##1065353216
20740     1F 14 E6 F4 | 	bitnot	arg02, #31
20744     E8 F0 BF FD | 	call	#__system___float_add
20748     FD 12 02 F6 | 	mov	arg01, result1
2074c     D8 F3 BF FD | 	call	#__system___float_sqrt
20750     FD 12 02 F6 | 	mov	arg01, result1
20754     0F 15 02 F6 | 	mov	arg02, local01
20758     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2075c     A7 F0 03 F6 | 	mov	ptra, fp
20760     B2 00 A0 FD | 	call	#popregs_
20764                 | __system____builtin_acosf_ret
20764     2D 00 64 FD | 	ret
20768                 | 
20768                 | __system____builtin_atan2f
20768     04 4A 05 F6 | 	mov	COUNT_, #4
2076c     A8 00 A0 FD | 	call	#pushregs_
20770     09 1F 02 F6 | 	mov	local01, arg01
20774     0A 21 02 F6 | 	mov	local02, arg02
20778     0F 13 02 F6 | 	mov	arg01, local01
2077c     00 14 06 F6 | 	mov	arg02, #0
20780     01 16 06 F6 | 	mov	arg03, #1
20784     AC F8 BF FD | 	call	#__system___float_cmp
20788     00 FA 0D F2 | 	cmp	result1, #0 wz
2078c     28 00 90 5D |  if_ne	jmp	#LR__3020
20790     10 13 02 F6 | 	mov	arg01, local02
20794     00 14 06 F6 | 	mov	arg02, #0
20798     01 16 06 F6 | 	mov	arg03, #1
2079c     94 F8 BF FD | 	call	#__system___float_cmp
207a0     00 FA 55 F2 | 	cmps	result1, #0 wc
207a4     87 24 60 CF 
207a8     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
207ac     DC 00 90 CD |  if_b	jmp	#LR__3021
207b0     00 FA 05 F6 | 	mov	result1, #0
207b4     D4 00 90 FD | 	jmp	#LR__3021
207b8                 | LR__3020
207b8     10 13 02 F6 | 	mov	arg01, local02
207bc     10 15 02 F6 | 	mov	arg02, local02
207c0     3C F4 BF FD | 	call	#__system___float_mul
207c4     FD 22 02 F6 | 	mov	local03, result1
207c8     0F 13 02 F6 | 	mov	arg01, local01
207cc     0F 15 02 F6 | 	mov	arg02, local01
207d0     2C F4 BF FD | 	call	#__system___float_mul
207d4     FD 14 02 F6 | 	mov	arg02, result1
207d8     11 13 02 F6 | 	mov	arg01, local03
207dc     50 F0 BF FD | 	call	#__system___float_add
207e0     FD 12 02 F6 | 	mov	arg01, result1
207e4     40 F3 BF FD | 	call	#__system___float_sqrt
207e8     FD 22 02 F6 | 	mov	local03, result1
207ec     10 13 02 F6 | 	mov	arg01, local02
207f0     11 15 02 F6 | 	mov	arg02, local03
207f4     0C F6 BF FD | 	call	#__system___float_div
207f8     FD 20 02 F6 | 	mov	local02, result1
207fc     0F 13 02 F6 | 	mov	arg01, local01
20800     11 15 02 F6 | 	mov	arg02, local03
20804     FC F5 BF FD | 	call	#__system___float_div
20808     FD 1E 02 F6 | 	mov	local01, result1
2080c     00 40 27 FF 
20810     00 12 06 F6 | 	mov	arg01, ##1317011456
20814     10 15 02 F6 | 	mov	arg02, local02
20818     E4 F3 BF FD | 	call	#__system___float_mul
2081c     FD 12 02 F6 | 	mov	arg01, result1
20820     00 14 06 F6 | 	mov	arg02, #0
20824     A0 F8 BF FD | 	call	#__system___float_tointeger
20828     FD 22 02 F6 | 	mov	local03, result1
2082c     00 40 27 FF 
20830     00 12 06 F6 | 	mov	arg01, ##1317011456
20834     0F 15 02 F6 | 	mov	arg02, local01
20838     C4 F3 BF FD | 	call	#__system___float_mul
2083c     FD 12 02 F6 | 	mov	arg01, result1
20840     00 14 06 F6 | 	mov	arg02, #0
20844     80 F8 BF FD | 	call	#__system___float_tointeger
20848     FD 22 52 FD | 	qvector	local03, result1
2084c     87 24 20 FF 
20850     DB 23 06 F6 | 	mov	local03, ##1078530011
20854     19 12 62 FD | 	getqy	arg01
20858     01 12 C6 F0 | 	sar	arg01, #1
2085c     09 13 52 F6 | 	abs	arg01, arg01 wc
20860     1F 24 C6 C9 |  if_b	decod	local04, #31
20864     00 24 06 36 |  if_ae	mov	local04, #0
20868     90 EF BF FD | 	call	#__system___float_fromuns
2086c     12 FB 61 F5 | 	xor	result1, local04
20870     FD 12 02 F6 | 	mov	arg01, result1
20874     00 40 27 FF 
20878     00 14 06 F6 | 	mov	arg02, ##1317011456
2087c     84 F5 BF FD | 	call	#__system___float_div
20880     FD 14 02 F6 | 	mov	arg02, result1
20884     11 13 02 F6 | 	mov	arg01, local03
20888     74 F3 BF FD | 	call	#__system___float_mul
2088c                 | LR__3021
2088c     A7 F0 03 F6 | 	mov	ptra, fp
20890     B2 00 A0 FD | 	call	#popregs_
20894                 | __system____builtin_atan2f_ret
20894     2D 00 64 FD | 	ret
20898                 | 
20898                 | __system____builtin_exp2f
20898     04 4A 05 F6 | 	mov	COUNT_, #4
2089c     A8 00 A0 FD | 	call	#pushregs_
208a0     09 1F 02 F6 | 	mov	local01, arg01
208a4     00 7F 21 FF 
208a8     00 14 06 F6 | 	mov	arg02, ##1123942400
208ac     01 16 66 F6 | 	neg	arg03, #1
208b0     80 F7 BF FD | 	call	#__system___float_cmp
208b4     00 FA 55 F2 | 	cmps	result1, #0 wc
208b8     00 C0 3F 3F 
208bc     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
208c0     DC 00 90 3D |  if_ae	jmp	#LR__3031
208c4     0F 13 02 F6 | 	mov	arg01, local01
208c8     00 7F 61 FF 
208cc     00 14 06 F6 | 	mov	arg02, ##-1023541248
208d0     01 16 06 F6 | 	mov	arg03, #1
208d4     5C F7 BF FD | 	call	#__system___float_cmp
208d8     00 FA 55 F2 | 	cmps	result1, #0 wc
208dc     00 FA 05 C6 |  if_b	mov	result1, #0
208e0     BC 00 90 CD |  if_b	jmp	#LR__3031
208e4     0F 13 02 F6 | 	mov	arg01, local01
208e8     00 14 06 F6 | 	mov	arg02, #0
208ec     D8 F7 BF FD | 	call	#__system___float_tointeger
208f0     FD 20 02 F6 | 	mov	local02, result1
208f4     10 13 52 F6 | 	abs	arg01, local02 wc
208f8     1F 22 C6 C9 |  if_b	decod	local03, #31
208fc     00 22 06 36 |  if_ae	mov	local03, #0
20900     F8 EE BF FD | 	call	#__system___float_fromuns
20904     11 FB 61 F5 | 	xor	result1, local03
20908     FD 14 02 F6 | 	mov	arg02, result1
2090c     0F 13 02 F6 | 	mov	arg01, local01
20910     1F 14 E6 F4 | 	bitnot	arg02, #31
20914     18 EF BF FD | 	call	#__system___float_add
20918     FD 24 02 F6 | 	mov	local04, result1
2091c     12 13 02 F6 | 	mov	arg01, local04
20920     00 14 06 F6 | 	mov	arg02, #0
20924     01 16 06 F6 | 	mov	arg03, #1
20928     08 F7 BF FD | 	call	#__system___float_cmp
2092c     00 FA 55 F2 | 	cmps	result1, #0 wc
20930     18 00 90 3D |  if_ae	jmp	#LR__3030
20934     12 13 02 F6 | 	mov	arg01, local04
20938     00 C0 1F FF 
2093c     00 14 06 F6 | 	mov	arg02, ##1065353216
20940     EC EE BF FD | 	call	#__system___float_add
20944     FD 24 02 F6 | 	mov	local04, result1
20948     01 20 86 F1 | 	sub	local02, #1
2094c                 | LR__3030
2094c     7F 20 06 F1 | 	add	local02, #127
20950     17 20 66 F0 | 	shl	local02, #23
20954     12 13 02 F6 | 	mov	arg01, local04
20958     00 80 26 FF 
2095c     00 14 06 F6 | 	mov	arg02, ##1291845632
20960     9C F2 BF FD | 	call	#__system___float_mul
20964     FD 12 02 F6 | 	mov	arg01, result1
20968     00 14 06 F6 | 	mov	arg02, #0
2096c     58 F7 BF FD | 	call	#__system___float_tointeger
20970     FD 24 0A F6 | 	mov	local04, result1 wz
20974     10 FB 01 A6 |  if_e	mov	result1, local02
20978     24 00 90 AD |  if_e	jmp	#LR__3031
2097c     3E 24 26 F4 | 	bith	local04, #62
20980     0F 24 62 FD | 	qexp	local04
20984     10 13 02 F6 | 	mov	arg01, local02
20988     18 14 62 FD | 	getqx	arg02
2098c     01 14 06 F1 | 	add	arg02, #1
20990     01 14 46 F0 | 	shr	arg02, #1
20994     00 80 1F FF 
20998     00 14 06 F1 | 	add	arg02, ##1056964608
2099c     60 F2 BF FD | 	call	#__system___float_mul
209a0                 | LR__3031
209a0     A7 F0 03 F6 | 	mov	ptra, fp
209a4     B2 00 A0 FD | 	call	#popregs_
209a8                 | __system____builtin_exp2f_ret
209a8     2D 00 64 FD | 	ret
209ac                 | 
209ac                 | __system____builtin_log2f
209ac     06 4A 05 F6 | 	mov	COUNT_, #6
209b0     A8 00 A0 FD | 	call	#pushregs_
209b4     09 1F 02 F6 | 	mov	local01, arg01
209b8     09 21 0A F6 | 	mov	local02, arg01 wz
209bc     00 00 40 5F 
209c0     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
209c4     00 40 00 AF 
209c8     00 FA 65 A6 |  if_e	neg	result1, ##8388608
209cc     08 01 90 AD |  if_e	jmp	#LR__3044
209d0     00 20 56 F2 | 	cmps	local02, #0 wc
209d4     00 E0 3F CF 
209d8     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
209dc     F8 00 90 CD |  if_b	jmp	#LR__3044
209e0     0F 13 02 F6 | 	mov	arg01, local01
209e4     00 90 20 FF 
209e8     00 14 06 F6 | 	mov	arg02, ##1092616192
209ec     01 16 06 F6 | 	mov	arg03, #1
209f0     40 F6 BF FD | 	call	#__system___float_cmp
209f4     00 FA 0D F2 | 	cmp	result1, #0 wz
209f8     4D 2A 20 AF 
209fc     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
20a00     D4 00 90 AD |  if_e	jmp	#LR__3044
20a04     0F 13 02 F6 | 	mov	arg01, local01
20a08     FC 16 20 FF 
20a0c     54 14 06 F6 | 	mov	arg02, ##1076754516
20a10     01 16 06 F6 | 	mov	arg03, #1
20a14     1C F6 BF FD | 	call	#__system___float_cmp
20a18     00 FA 0D F2 | 	cmp	result1, #0 wz
20a1c     55 DC 1F AF 
20a20     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
20a24     B0 00 90 AD |  if_e	jmp	#LR__3044
20a28     10 23 02 F6 | 	mov	local03, local02
20a2c     17 22 46 F0 | 	shr	local03, #23
20a30     11 23 E2 F8 | 	getbyte	local03, local03, #0
20a34     17 21 06 F4 | 	bitl	local02, #279
20a38     10 25 02 F6 | 	mov	local04, local02
20a3c     FF 22 0E F2 | 	cmp	local03, #255 wz
20a40     1C 00 90 5D |  if_ne	jmp	#LR__3040
20a44     00 24 0E F2 | 	cmp	local04, #0 wz
20a48     00 C0 3F 5F 
20a4c     00 26 06 56 |  if_ne	mov	local05, ##2139095040
20a50     00 E0 3F AF 
20a54     00 26 06 A6 |  if_e	mov	local05, ##2143289344
20a58     13 FB 01 F6 | 	mov	result1, local05
20a5c     78 00 90 FD | 	jmp	#LR__3044
20a60                 | LR__3040
20a60     00 22 0E F2 | 	cmp	local03, #0 wz
20a64     17 24 26 54 |  if_ne	bith	local04, #23
20a68     7F 22 86 51 |  if_ne	sub	local03, #127
20a6c     28 00 90 5D |  if_ne	jmp	#LR__3043
20a70     00 24 0E F2 | 	cmp	local04, #0 wz
20a74     00 40 00 AF 
20a78     00 FA 65 A6 |  if_e	neg	result1, ##8388608
20a7c     58 00 90 AD |  if_e	jmp	#LR__3044
20a80     7E 22 66 F6 | 	neg	local03, #126
20a84     97 08 48 FB | 	callpa	#(@LR__3042-@LR__3041)>>2,fcache_load_ptr_
20a88                 | LR__3041
20a88     17 24 2E F4 | 	testbn	local04, #23 wz
20a8c     01 24 66 A0 |  if_e	shl	local04, #1
20a90     01 22 06 A1 |  if_e	add	local03, #1
20a94     F0 FF 9F AD |  if_e	jmp	#LR__3041
20a98                 | LR__3042
20a98                 | LR__3043
20a98     0E 24 62 FD | 	qlog	local04
20a9c     01 22 86 F1 | 	sub	local03, #1
20aa0     11 13 52 F6 | 	abs	arg01, local03 wc
20aa4     1F 28 C6 C9 |  if_b	decod	local06, #31
20aa8     00 28 06 36 |  if_ae	mov	local06, #0
20aac     18 26 62 FD | 	getqx	local05
20ab0     9B 26 06 F4 | 	bitl	local05, #155
20ab4     08 26 06 F1 | 	add	local05, #8
20ab8     04 26 46 F0 | 	shr	local05, #4
20abc     00 C0 1F FF 
20ac0     00 26 06 F1 | 	add	local05, ##1065353216
20ac4     34 ED BF FD | 	call	#__system___float_fromuns
20ac8     14 FB 61 F5 | 	xor	result1, local06
20acc     FD 14 02 F6 | 	mov	arg02, result1
20ad0     13 13 02 F6 | 	mov	arg01, local05
20ad4     58 ED BF FD | 	call	#__system___float_add
20ad8                 | LR__3044
20ad8     A7 F0 03 F6 | 	mov	ptra, fp
20adc     B2 00 A0 FD | 	call	#popregs_
20ae0                 | __system____builtin_log2f_ret
20ae0     2D 00 64 FD | 	ret
20ae4                 | 
20ae4                 | __system____builtin_powf
20ae4     04 4A 05 F6 | 	mov	COUNT_, #4
20ae8     A8 00 A0 FD | 	call	#pushregs_
20aec     09 1F 02 F6 | 	mov	local01, arg01
20af0     0A 21 02 F6 | 	mov	local02, arg02
20af4     10 13 02 F6 | 	mov	arg01, local02
20af8     00 14 06 F6 | 	mov	arg02, #0
20afc     C8 F5 BF FD | 	call	#__system___float_tointeger
20b00     FD 22 02 F6 | 	mov	local03, result1
20b04     11 13 52 F6 | 	abs	arg01, local03 wc
20b08     1F 24 C6 C9 |  if_b	decod	local04, #31
20b0c     00 24 06 36 |  if_ae	mov	local04, #0
20b10     E8 EC BF FD | 	call	#__system___float_fromuns
20b14     12 FB 61 F5 | 	xor	result1, local04
20b18     FD 12 02 F6 | 	mov	arg01, result1
20b1c     10 15 02 F6 | 	mov	arg02, local02
20b20     01 16 06 F6 | 	mov	arg03, #1
20b24     0C F5 BF FD | 	call	#__system___float_cmp
20b28     00 FA 0D F2 | 	cmp	result1, #0 wz
20b2c     18 00 90 5D |  if_ne	jmp	#LR__3050
20b30     00 C0 1F FF 
20b34     00 12 06 F6 | 	mov	arg01, ##1065353216
20b38     0F 15 02 F6 | 	mov	arg02, local01
20b3c     11 17 02 F6 | 	mov	arg03, local03
20b40     68 00 B0 FD | 	call	#__system___float_pow_n
20b44     58 00 90 FD | 	jmp	#LR__3051
20b48                 | LR__3050
20b48     0F 13 02 F6 | 	mov	arg01, local01
20b4c     00 14 06 F6 | 	mov	arg02, #0
20b50     01 16 06 F6 | 	mov	arg03, #1
20b54     DC F4 BF FD | 	call	#__system___float_cmp
20b58     00 FA 55 F2 | 	cmps	result1, #0 wc
20b5c     00 E0 3F CF 
20b60     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
20b64     38 00 90 CD |  if_b	jmp	#LR__3051
20b68     0F 13 02 F6 | 	mov	arg01, local01
20b6c     00 14 06 F6 | 	mov	arg02, #0
20b70     01 16 06 F6 | 	mov	arg03, #1
20b74     BC F4 BF FD | 	call	#__system___float_cmp
20b78     00 FA 0D F2 | 	cmp	result1, #0 wz
20b7c     00 FA 05 A6 |  if_e	mov	result1, #0
20b80     1C 00 90 AD |  if_e	jmp	#LR__3051
20b84     0F 13 02 F6 | 	mov	arg01, local01
20b88     20 FE BF FD | 	call	#__system____builtin_log2f
20b8c     FD 12 02 F6 | 	mov	arg01, result1
20b90     10 15 02 F6 | 	mov	arg02, local02
20b94     68 F0 BF FD | 	call	#__system___float_mul
20b98     FD 12 02 F6 | 	mov	arg01, result1
20b9c     F8 FC BF FD | 	call	#__system____builtin_exp2f
20ba0                 | LR__3051
20ba0     A7 F0 03 F6 | 	mov	ptra, fp
20ba4     B2 00 A0 FD | 	call	#popregs_
20ba8                 | __system____builtin_powf_ret
20ba8     2D 00 64 FD | 	ret
20bac                 | 
20bac                 | __system___float_pow_n
20bac     05 4A 05 F6 | 	mov	COUNT_, #5
20bb0     A8 00 A0 FD | 	call	#pushregs_
20bb4     09 1F 02 F6 | 	mov	local01, arg01
20bb8     0A 21 02 F6 | 	mov	local02, arg02
20bbc     0B 23 02 F6 | 	mov	local03, arg03
20bc0     00 22 56 F2 | 	cmps	local03, #0 wc
20bc4     18 00 90 3D |  if_ae	jmp	#LR__3060
20bc8     01 24 06 F6 | 	mov	local04, #1
20bcc     11 23 62 F6 | 	neg	local03, local03
20bd0     00 22 56 F2 | 	cmps	local03, #0 wc
20bd4     00 FA 05 C6 |  if_b	mov	result1, #0
20bd8     94 00 90 CD |  if_b	jmp	#LR__3068
20bdc     04 00 90 FD | 	jmp	#LR__3061
20be0                 | LR__3060
20be0     00 24 06 F6 | 	mov	local04, #0
20be4                 | LR__3061
20be4     00 C0 1F FF 
20be8     00 26 06 F6 | 	mov	local05, ##1065353216
20bec                 | LR__3062
20bec     01 22 56 F2 | 	cmps	local03, #1 wc
20bf0     30 00 90 CD |  if_b	jmp	#LR__3064
20bf4     01 22 CE F7 | 	test	local03, #1 wz
20bf8     10 00 90 AD |  if_e	jmp	#LR__3063
20bfc     13 13 02 F6 | 	mov	arg01, local05
20c00     10 15 02 F6 | 	mov	arg02, local02
20c04     F8 EF BF FD | 	call	#__system___float_mul
20c08     FD 26 02 F6 | 	mov	local05, result1
20c0c                 | LR__3063
20c0c     01 22 C6 F0 | 	sar	local03, #1
20c10     10 13 02 F6 | 	mov	arg01, local02
20c14     10 15 02 F6 | 	mov	arg02, local02
20c18     E4 EF BF FD | 	call	#__system___float_mul
20c1c     FD 20 02 F6 | 	mov	local02, result1
20c20     C8 FF 9F FD | 	jmp	#LR__3062
20c24                 | LR__3064
20c24     00 24 0E F2 | 	cmp	local04, #0 wz
20c28     14 00 90 AD |  if_e	jmp	#LR__3065
20c2c     0F 13 02 F6 | 	mov	arg01, local01
20c30     13 15 02 F6 | 	mov	arg02, local05
20c34     CC F1 BF FD | 	call	#__system___float_div
20c38     FD 26 02 F6 | 	mov	local05, result1
20c3c     2C 00 90 FD | 	jmp	#LR__3067
20c40                 | LR__3065
20c40     0F 13 02 F6 | 	mov	arg01, local01
20c44     00 C0 1F FF 
20c48     00 14 06 F6 | 	mov	arg02, ##1065353216
20c4c     01 16 06 F6 | 	mov	arg03, #1
20c50     E0 F3 BF FD | 	call	#__system___float_cmp
20c54     00 FA 0D F2 | 	cmp	result1, #0 wz
20c58     10 00 90 AD |  if_e	jmp	#LR__3066
20c5c     0F 13 02 F6 | 	mov	arg01, local01
20c60     13 15 02 F6 | 	mov	arg02, local05
20c64     98 EF BF FD | 	call	#__system___float_mul
20c68     FD 26 02 F6 | 	mov	local05, result1
20c6c                 | LR__3066
20c6c                 | LR__3067
20c6c     13 FB 01 F6 | 	mov	result1, local05
20c70                 | LR__3068
20c70     A7 F0 03 F6 | 	mov	ptra, fp
20c74     B2 00 A0 FD | 	call	#popregs_
20c78                 | __system___float_pow_n_ret
20c78     2D 00 64 FD | 	ret
20c7c                 | 
20c7c                 | __system___gc_ptrs
20c7c     EC 00 02 F6 | 	mov	_var01, __heap_ptr
20c80     00 03 02 F6 | 	mov	_var02, _var01
20c84     76 01 00 FF 
20c88     F8 03 06 F1 | 	add	_var02, ##191992
20c8c     00 FD 09 FB | 	rdlong	result2, _var01 wz
20c90     74 00 90 5D |  if_ne	jmp	#LR__3070
20c94     01 FD 01 F6 | 	mov	result2, _var02
20c98     00 FD 81 F1 | 	sub	result2, _var01
20c9c     00 03 58 FC | 	wrword	#1, _var01
20ca0     00 FB 01 F6 | 	mov	result1, _var01
20ca4     02 FA 05 F1 | 	add	result1, #2
20ca8     36 00 80 FF 
20cac     FD 20 59 FC | 	wrword	##27792, result1
20cb0     00 FB 01 F6 | 	mov	result1, _var01
20cb4     04 FA 05 F1 | 	add	result1, #4
20cb8     FD 00 58 FC | 	wrword	#0, result1
20cbc     00 FB 01 F6 | 	mov	result1, _var01
20cc0     06 FA 05 F1 | 	add	result1, #6
20cc4     FD 02 58 FC | 	wrword	#1, result1
20cc8     10 00 06 F1 | 	add	_var01, #16
20ccc     FE FC 51 F6 | 	abs	result2, result2 wc
20cd0     04 FC 45 F0 | 	shr	result2, #4
20cd4     FE FC 81 F6 | 	negc	result2, result2
20cd8     00 FD 51 FC | 	wrword	result2, _var01
20cdc     00 FD 01 F6 | 	mov	result2, _var01
20ce0     02 FC 05 F1 | 	add	result2, #2
20ce4     36 00 80 FF 
20ce8     FE 1E 59 FC | 	wrword	##27791, result2
20cec     00 FD 01 F6 | 	mov	result2, _var01
20cf0     04 FC 05 F1 | 	add	result2, #4
20cf4     FE 00 58 FC | 	wrword	#0, result2
20cf8     00 FD 01 F6 | 	mov	result2, _var01
20cfc     06 FC 05 F1 | 	add	result2, #6
20d00     FE 00 58 FC | 	wrword	#0, result2
20d04     10 00 86 F1 | 	sub	_var01, #16
20d08                 | LR__3070
20d08     00 FB 01 F6 | 	mov	result1, _var01
20d0c     01 FD 01 F6 | 	mov	result2, _var02
20d10                 | __system___gc_ptrs_ret
20d10     2D 00 64 FD | 	ret
20d14                 | 
20d14                 | __system___gc_tryalloc
20d14     0B 4A 05 F6 | 	mov	COUNT_, #11
20d18     A8 00 A0 FD | 	call	#pushregs_
20d1c     09 1F 02 F6 | 	mov	local01, arg01
20d20     0A 21 02 F6 | 	mov	local02, arg02
20d24     54 FF BF FD | 	call	#__system___gc_ptrs
20d28     FD 22 02 F6 | 	mov	local03, result1
20d2c     FE 24 02 F6 | 	mov	local04, result2
20d30     11 27 02 F6 | 	mov	local05, local03
20d34     00 28 06 F6 | 	mov	local06, #0
20d38     97 1E 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
20d3c                 | LR__3080
20d3c     13 2B 02 F6 | 	mov	local07, local05
20d40     06 26 06 F1 | 	add	local05, #6
20d44     13 15 EA FA | 	rdword	arg02, local05 wz
20d48     11 13 02 F6 | 	mov	arg01, local03
20d4c     00 FA 05 A6 |  if_e	mov	result1, #0
20d50     04 14 66 50 |  if_ne	shl	arg02, #4
20d54     0A 13 02 51 |  if_ne	add	arg01, arg02
20d58     09 FB 01 56 |  if_ne	mov	result1, arg01
20d5c     FD 26 0A F6 | 	mov	local05, result1 wz
20d60     13 29 E2 5A |  if_ne	rdword	local06, local05
20d64     00 26 0E F2 | 	cmp	local05, #0 wz
20d68     12 27 52 52 |  if_ne	cmps	local05, local04 wc
20d6c     08 00 90 1D |  if_a	jmp	#LR__3082
20d70     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
20d74     C4 FF 9F 1D |  if_a	jmp	#LR__3080
20d78                 | LR__3081
20d78                 | LR__3082
20d78     00 26 0E F2 | 	cmp	local05, #0 wz
20d7c     13 FB 01 A6 |  if_e	mov	result1, local05
20d80     3C 01 90 AD |  if_e	jmp	#LR__3085
20d84     13 FD 01 F6 | 	mov	result2, local05
20d88     06 FC 05 F1 | 	add	result2, #6
20d8c     FE 2C E2 FA | 	rdword	local08, result2
20d90     14 1F 52 F2 | 	cmps	local01, local06 wc
20d94     C0 00 90 3D |  if_ae	jmp	#LR__3084
20d98     13 1F 52 FC | 	wrword	local01, local05
20d9c     13 13 02 F6 | 	mov	arg01, local05
20da0     0F 2D 02 F6 | 	mov	local08, local01
20da4     04 2C 66 F0 | 	shl	local08, #4
20da8     16 13 02 F1 | 	add	arg01, local08
20dac     0F 29 82 F1 | 	sub	local06, local01
20db0     09 29 52 FC | 	wrword	local06, arg01
20db4     09 2D 02 F6 | 	mov	local08, arg01
20db8     02 2C 06 F1 | 	add	local08, #2
20dbc     36 00 80 FF 
20dc0     16 1F 59 FC | 	wrword	##27791, local08
20dc4     13 15 0A F6 | 	mov	arg02, local05 wz
20dc8     00 FA 05 A6 |  if_e	mov	result1, #0
20dcc     11 15 82 51 |  if_ne	sub	arg02, local03
20dd0     04 14 46 50 |  if_ne	shr	arg02, #4
20dd4     0A FB 01 56 |  if_ne	mov	result1, arg02
20dd8     09 2D 02 F6 | 	mov	local08, arg01
20ddc     04 2C 06 F1 | 	add	local08, #4
20de0     16 FB 51 FC | 	wrword	result1, local08
20de4     13 2D 02 F6 | 	mov	local08, local05
20de8     06 2C 06 F1 | 	add	local08, #6
20dec     09 15 02 F6 | 	mov	arg02, arg01
20df0     16 2D E2 FA | 	rdword	local08, local08
20df4     06 14 06 F1 | 	add	arg02, #6
20df8     0A 2D 52 FC | 	wrword	local08, arg02
20dfc     09 2F 02 F6 | 	mov	local09, arg01
20e00     17 15 0A F6 | 	mov	arg02, local09 wz
20e04     00 FA 05 A6 |  if_e	mov	result1, #0
20e08     11 15 82 51 |  if_ne	sub	arg02, local03
20e0c     04 14 46 50 |  if_ne	shr	arg02, #4
20e10     0A FB 01 56 |  if_ne	mov	result1, arg02
20e14     FD 2C 02 F6 | 	mov	local08, result1
20e18     09 31 EA FA | 	rdword	local10, arg01 wz
20e1c     00 FA 05 A6 |  if_e	mov	result1, #0
20e20     04 30 66 50 |  if_ne	shl	local10, #4
20e24     18 13 02 51 |  if_ne	add	arg01, local10
20e28     09 FB 01 56 |  if_ne	mov	result1, arg01
20e2c     FD 32 0A F6 | 	mov	local11, result1 wz
20e30     24 00 90 AD |  if_e	jmp	#LR__3083
20e34     12 33 52 F2 | 	cmps	local11, local04 wc
20e38     1C 00 90 3D |  if_ae	jmp	#LR__3083
20e3c     17 15 0A F6 | 	mov	arg02, local09 wz
20e40     00 FA 05 A6 |  if_e	mov	result1, #0
20e44     11 15 82 51 |  if_ne	sub	arg02, local03
20e48     04 14 46 50 |  if_ne	shr	arg02, #4
20e4c     0A FB 01 56 |  if_ne	mov	result1, arg02
20e50     04 32 06 F1 | 	add	local11, #4
20e54     19 FB 51 FC | 	wrword	result1, local11
20e58                 | LR__3083
20e58                 | LR__3084
20e58     06 2A 06 F1 | 	add	local07, #6
20e5c     15 2D 52 FC | 	wrword	local08, local07
20e60     36 00 00 FF 
20e64     80 2E 06 F6 | 	mov	local09, ##27776
20e68     10 2F 42 F5 | 	or	local09, local02
20e6c     00 FA 05 F6 | 	mov	result1, #0
20e70     01 FA 61 FD | 	cogid	result1
20e74     FD 2E 42 F5 | 	or	local09, result1
20e78     13 33 02 F6 | 	mov	local11, local05
20e7c     02 32 06 F1 | 	add	local11, #2
20e80     19 2F 52 FC | 	wrword	local09, local11
20e84     11 2F 02 F6 | 	mov	local09, local03
20e88     08 2E 06 F1 | 	add	local09, #8
20e8c     13 33 02 F6 | 	mov	local11, local05
20e90     17 2F E2 FA | 	rdword	local09, local09
20e94     06 32 06 F1 | 	add	local11, #6
20e98     19 2F 52 FC | 	wrword	local09, local11
20e9c     13 15 0A F6 | 	mov	arg02, local05 wz
20ea0     00 FA 05 A6 |  if_e	mov	result1, #0
20ea4     11 15 82 51 |  if_ne	sub	arg02, local03
20ea8     04 14 46 50 |  if_ne	shr	arg02, #4
20eac     0A FB 01 56 |  if_ne	mov	result1, arg02
20eb0     08 22 06 F1 | 	add	local03, #8
20eb4     11 FB 51 FC | 	wrword	result1, local03
20eb8     08 26 06 F1 | 	add	local05, #8
20ebc     13 FB 01 F6 | 	mov	result1, local05
20ec0                 | LR__3085
20ec0     A7 F0 03 F6 | 	mov	ptra, fp
20ec4     B2 00 A0 FD | 	call	#popregs_
20ec8                 | __system___gc_tryalloc_ret
20ec8     2D 00 64 FD | 	ret
20ecc                 | 
20ecc                 | __system___gc_alloc_managed
20ecc     01 4A 05 F6 | 	mov	COUNT_, #1
20ed0     A8 00 A0 FD | 	call	#pushregs_
20ed4     09 1F 02 F6 | 	mov	local01, arg01
20ed8     00 14 06 F6 | 	mov	arg02, #0
20edc     1C 00 B0 FD | 	call	#__system___gc_doalloc
20ee0     FD 14 0A F6 | 	mov	arg02, result1 wz
20ee4     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
20ee8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
20eec     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
20ef0     A7 F0 03 F6 | 	mov	ptra, fp
20ef4     B2 00 A0 FD | 	call	#popregs_
20ef8                 | __system___gc_alloc_managed_ret
20ef8     2D 00 64 FD | 	ret
20efc                 | 
20efc                 | __system___gc_doalloc
20efc     06 4A 05 F6 | 	mov	COUNT_, #6
20f00     A8 00 A0 FD | 	call	#pushregs_
20f04     09 1F 0A F6 | 	mov	local01, arg01 wz
20f08     0A 21 02 F6 | 	mov	local02, arg02
20f0c     00 FA 05 A6 |  if_e	mov	result1, #0
20f10     8C 00 90 AD |  if_e	jmp	#LR__3097
20f14     17 1E 06 F1 | 	add	local01, #23
20f18     0F 1E 26 F5 | 	andn	local01, #15
20f1c     04 1E 46 F0 | 	shr	local01, #4
20f20     1C E6 05 F1 | 	add	ptr___system__dat__, #28
20f24     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
20f28     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
20f2c     54 C1 BF FD | 	call	#__system___lockmem
20f30     0F 13 02 F6 | 	mov	arg01, local01
20f34     10 15 02 F6 | 	mov	arg02, local02
20f38     D8 FD BF FD | 	call	#__system___gc_tryalloc
20f3c     FD 22 0A F6 | 	mov	local03, result1 wz
20f40     14 00 90 5D |  if_ne	jmp	#LR__3090
20f44     70 03 B0 FD | 	call	#__system___gc_docollect
20f48     0F 13 02 F6 | 	mov	arg01, local01
20f4c     10 15 02 F6 | 	mov	arg02, local02
20f50     C0 FD BF FD | 	call	#__system___gc_tryalloc
20f54     FD 22 02 F6 | 	mov	local03, result1
20f58                 | LR__3090
20f58     1C E6 05 F1 | 	add	ptr___system__dat__, #28
20f5c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
20f60     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
20f64     09 01 68 FC | 	wrlong	#0, arg01
20f68     00 22 0E F2 | 	cmp	local03, #0 wz
20f6c     2C 00 90 AD |  if_e	jmp	#LR__3096
20f70     04 1E 66 F0 | 	shl	local01, #4
20f74     08 1E 86 F1 | 	sub	local01, #8
20f78     0F 25 52 F6 | 	abs	local04, local01 wc
20f7c     02 24 46 F0 | 	shr	local04, #2
20f80     12 27 8A F6 | 	negc	local05, local04 wz
20f84     11 29 02 F6 | 	mov	local06, local03
20f88     10 00 90 AD |  if_e	jmp	#LR__3095
20f8c     97 06 48 FB | 	callpa	#(@LR__3093-@LR__3091)>>2,fcache_load_ptr_
20f90                 | LR__3091
20f90     13 05 D8 FC | 	rep	@LR__3094, local05
20f94                 | LR__3092
20f94     14 01 68 FC | 	wrlong	#0, local06
20f98     04 28 06 F1 | 	add	local06, #4
20f9c                 | LR__3093
20f9c                 | LR__3094
20f9c                 | LR__3095
20f9c                 | LR__3096
20f9c     11 FB 01 F6 | 	mov	result1, local03
20fa0                 | LR__3097
20fa0     A7 F0 03 F6 | 	mov	ptra, fp
20fa4     B2 00 A0 FD | 	call	#popregs_
20fa8                 | __system___gc_doalloc_ret
20fa8     2D 00 64 FD | 	ret
20fac                 | 
20fac                 | __system___gc_isvalidptr
20fac     F8 16 06 F4 | 	bitl	arg03, #248
20fb0     08 16 86 F1 | 	sub	arg03, #8
20fb4     09 17 52 F2 | 	cmps	arg03, arg01 wc
20fb8     08 00 90 CD |  if_b	jmp	#LR__3100
20fbc     0A 17 52 F2 | 	cmps	arg03, arg02 wc
20fc0     08 00 90 CD |  if_b	jmp	#LR__3101
20fc4                 | LR__3100
20fc4     00 FA 05 F6 | 	mov	result1, #0
20fc8     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
20fcc                 | LR__3101
20fcc     0B 01 02 F6 | 	mov	_var01, arg03
20fd0     09 01 62 F5 | 	xor	_var01, arg01
20fd4     0F 00 CE F7 | 	test	_var01, #15 wz
20fd8     00 FA 05 56 |  if_ne	mov	result1, #0
20fdc     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
20fe0     0B 01 02 F6 | 	mov	_var01, arg03
20fe4     02 00 06 F1 | 	add	_var01, #2
20fe8     00 01 E2 FA | 	rdword	_var01, _var01
20fec     7F 00 00 FF 
20ff0     C0 01 06 F5 | 	and	_var01, ##65472
20ff4     36 00 00 FF 
20ff8     80 00 0E F2 | 	cmp	_var01, ##27776 wz
20ffc     00 FA 05 56 |  if_ne	mov	result1, #0
21000     0B FB 01 A6 |  if_e	mov	result1, arg03
21004                 | __system___gc_isvalidptr_ret
21004     2D 00 64 FD | 	ret
21008                 | 
21008                 | __system___gc_free
21008     09 17 02 F6 | 	mov	arg03, arg01
2100c     6C FC BF FD | 	call	#__system___gc_ptrs
21010     FD 12 02 F6 | 	mov	arg01, result1
21014     FE 14 02 F6 | 	mov	arg02, result2
21018     90 FF BF FD | 	call	#__system___gc_isvalidptr
2101c     FD 14 0A F6 | 	mov	arg02, result1 wz
21020     28 00 90 AD |  if_e	jmp	#LR__3110
21024     1C E6 05 F1 | 	add	ptr___system__dat__, #28
21028     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2102c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
21030     50 C0 BF FD | 	call	#__system___lockmem
21034     0A 13 02 F6 | 	mov	arg01, arg02
21038     14 00 B0 FD | 	call	#__system___gc_dofree
2103c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
21040     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
21044     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
21048     09 01 68 FC | 	wrlong	#0, arg01
2104c                 | LR__3110
2104c                 | __system___gc_free_ret
2104c     2D 00 64 FD | 	ret
21050                 | 
21050                 | __system___gc_dofree
21050     06 4A 05 F6 | 	mov	COUNT_, #6
21054     A8 00 A0 FD | 	call	#pushregs_
21058     09 1F 02 F6 | 	mov	local01, arg01
2105c     1C FC BF FD | 	call	#__system___gc_ptrs
21060     FD 20 02 F6 | 	mov	local02, result1
21064     FE 22 02 F6 | 	mov	local03, result2
21068     0F 15 02 F6 | 	mov	arg02, local01
2106c     02 14 06 F1 | 	add	arg02, #2
21070     36 00 80 FF 
21074     0A 1F 59 FC | 	wrword	##27791, arg02
21078     0F 25 02 F6 | 	mov	local04, local01
2107c     0F 13 02 F6 | 	mov	arg01, local01
21080     09 27 EA FA | 	rdword	local05, arg01 wz
21084     00 FA 05 A6 |  if_e	mov	result1, #0
21088     04 26 66 50 |  if_ne	shl	local05, #4
2108c     13 13 02 51 |  if_ne	add	arg01, local05
21090     09 FB 01 56 |  if_ne	mov	result1, arg01
21094     FD 28 02 F6 | 	mov	local06, result1
21098     97 24 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
2109c                 | LR__3120
2109c     04 24 06 F1 | 	add	local04, #4
210a0     12 15 EA FA | 	rdword	arg02, local04 wz
210a4     10 13 02 F6 | 	mov	arg01, local02
210a8     00 FA 05 A6 |  if_e	mov	result1, #0
210ac     04 14 66 50 |  if_ne	shl	arg02, #4
210b0     0A 13 02 51 |  if_ne	add	arg01, arg02
210b4     09 FB 01 56 |  if_ne	mov	result1, arg01
210b8     FD 24 0A F6 | 	mov	local04, result1 wz
210bc     24 00 90 AD |  if_e	jmp	#LR__3122
210c0     12 13 02 F6 | 	mov	arg01, local04
210c4     00 FA 05 F6 | 	mov	result1, #0
210c8     02 12 06 F1 | 	add	arg01, #2
210cc     09 13 E2 FA | 	rdword	arg01, arg01
210d0     36 00 00 FF 
210d4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
210d8     01 FA 65 A6 |  if_e	neg	result1, #1
210dc     00 FA 0D F2 | 	cmp	result1, #0 wz
210e0     B8 FF 9F AD |  if_e	jmp	#LR__3120
210e4                 | LR__3121
210e4                 | LR__3122
210e4     00 24 0E F2 | 	cmp	local04, #0 wz
210e8     10 25 02 A6 |  if_e	mov	local04, local02
210ec     12 15 02 F6 | 	mov	arg02, local04
210f0     06 14 06 F1 | 	add	arg02, #6
210f4     0F 13 02 F6 | 	mov	arg01, local01
210f8     0A 15 E2 FA | 	rdword	arg02, arg02
210fc     06 12 06 F1 | 	add	arg01, #6
21100     09 15 52 FC | 	wrword	arg02, arg01
21104     0F 15 0A F6 | 	mov	arg02, local01 wz
21108     00 FA 05 A6 |  if_e	mov	result1, #0
2110c     10 15 82 51 |  if_ne	sub	arg02, local02
21110     04 14 46 50 |  if_ne	shr	arg02, #4
21114     0A FB 01 56 |  if_ne	mov	result1, arg02
21118     12 15 02 F6 | 	mov	arg02, local04
2111c     06 14 06 F1 | 	add	arg02, #6
21120     0A FB 51 FC | 	wrword	result1, arg02
21124     10 25 0A F2 | 	cmp	local04, local02 wz
21128     A4 00 90 AD |  if_e	jmp	#LR__3125
2112c     12 13 02 F6 | 	mov	arg01, local04
21130     09 27 EA FA | 	rdword	local05, arg01 wz
21134     00 FA 05 A6 |  if_e	mov	result1, #0
21138     04 26 66 50 |  if_ne	shl	local05, #4
2113c     13 13 02 51 |  if_ne	add	arg01, local05
21140     09 FB 01 56 |  if_ne	mov	result1, arg01
21144     0F FB 09 F2 | 	cmp	result1, local01 wz
21148     84 00 90 5D |  if_ne	jmp	#LR__3124
2114c     12 29 E2 FA | 	rdword	local06, local04
21150     0F 15 E2 FA | 	rdword	arg02, local01
21154     0A 29 02 F1 | 	add	local06, arg02
21158     12 29 52 FC | 	wrword	local06, local04
2115c     0F 29 02 F6 | 	mov	local06, local01
21160     02 28 06 F1 | 	add	local06, #2
21164     14 01 58 FC | 	wrword	#0, local06
21168     0F 13 02 F6 | 	mov	arg01, local01
2116c     09 27 EA FA | 	rdword	local05, arg01 wz
21170     00 FA 05 A6 |  if_e	mov	result1, #0
21174     04 26 66 50 |  if_ne	shl	local05, #4
21178     13 13 02 51 |  if_ne	add	arg01, local05
2117c     09 FB 01 56 |  if_ne	mov	result1, arg01
21180     FD 28 02 F6 | 	mov	local06, result1
21184     11 29 52 F2 | 	cmps	local06, local03 wc
21188     20 00 90 3D |  if_ae	jmp	#LR__3123
2118c     12 15 0A F6 | 	mov	arg02, local04 wz
21190     00 FA 05 A6 |  if_e	mov	result1, #0
21194     10 15 82 51 |  if_ne	sub	arg02, local02
21198     04 14 46 50 |  if_ne	shr	arg02, #4
2119c     0A FB 01 56 |  if_ne	mov	result1, arg02
211a0     14 15 02 F6 | 	mov	arg02, local06
211a4     04 14 06 F1 | 	add	arg02, #4
211a8     0A FB 51 FC | 	wrword	result1, arg02
211ac                 | LR__3123
211ac     0F 15 02 F6 | 	mov	arg02, local01
211b0     06 14 06 F1 | 	add	arg02, #6
211b4     12 FD 01 F6 | 	mov	result2, local04
211b8     0A 15 E2 FA | 	rdword	arg02, arg02
211bc     06 FC 05 F1 | 	add	result2, #6
211c0     FE 14 52 FC | 	wrword	arg02, result2
211c4     06 1E 06 F1 | 	add	local01, #6
211c8     0F 01 58 FC | 	wrword	#0, local01
211cc     12 1F 02 F6 | 	mov	local01, local04
211d0                 | LR__3124
211d0                 | LR__3125
211d0     0F 13 02 F6 | 	mov	arg01, local01
211d4     09 27 EA FA | 	rdword	local05, arg01 wz
211d8     00 FA 05 A6 |  if_e	mov	result1, #0
211dc     04 26 66 50 |  if_ne	shl	local05, #4
211e0     13 13 02 51 |  if_ne	add	arg01, local05
211e4     09 FB 01 56 |  if_ne	mov	result1, arg01
211e8     FD 14 0A F6 | 	mov	arg02, result1 wz
211ec     B8 00 90 AD |  if_e	jmp	#LR__3127
211f0     11 15 52 F2 | 	cmps	arg02, local03 wc
211f4     B0 00 90 3D |  if_ae	jmp	#LR__3127
211f8     0A 13 02 F6 | 	mov	arg01, arg02
211fc     00 FA 05 F6 | 	mov	result1, #0
21200     02 12 06 F1 | 	add	arg01, #2
21204     09 13 E2 FA | 	rdword	arg01, arg01
21208     36 00 00 FF 
2120c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
21210     01 FA 65 A6 |  if_e	neg	result1, #1
21214     00 FA 0D F2 | 	cmp	result1, #0 wz
21218     8C 00 90 AD |  if_e	jmp	#LR__3127
2121c     0F 25 02 F6 | 	mov	local04, local01
21220     12 29 E2 FA | 	rdword	local06, local04
21224     0A 13 02 F6 | 	mov	arg01, arg02
21228     09 1F E2 FA | 	rdword	local01, arg01
2122c     0F 29 02 F1 | 	add	local06, local01
21230     12 29 52 FC | 	wrword	local06, local04
21234     09 29 02 F6 | 	mov	local06, arg01
21238     06 28 06 F1 | 	add	local06, #6
2123c     12 1F 02 F6 | 	mov	local01, local04
21240     14 29 E2 FA | 	rdword	local06, local06
21244     06 1E 06 F1 | 	add	local01, #6
21248     0F 29 52 FC | 	wrword	local06, local01
2124c     09 29 02 F6 | 	mov	local06, arg01
21250     02 28 06 F1 | 	add	local06, #2
21254     14 55 59 FC | 	wrword	#170, local06
21258     09 29 02 F6 | 	mov	local06, arg01
2125c     06 28 06 F1 | 	add	local06, #6
21260     14 01 58 FC | 	wrword	#0, local06
21264     09 27 EA FA | 	rdword	local05, arg01 wz
21268     00 FA 05 A6 |  if_e	mov	result1, #0
2126c     04 26 66 50 |  if_ne	shl	local05, #4
21270     13 13 02 51 |  if_ne	add	arg01, local05
21274     09 FB 01 56 |  if_ne	mov	result1, arg01
21278     FD 28 0A F6 | 	mov	local06, result1 wz
2127c     28 00 90 AD |  if_e	jmp	#LR__3126
21280     11 29 52 F2 | 	cmps	local06, local03 wc
21284     20 00 90 3D |  if_ae	jmp	#LR__3126
21288     12 15 0A F6 | 	mov	arg02, local04 wz
2128c     00 FA 05 A6 |  if_e	mov	result1, #0
21290     10 15 82 51 |  if_ne	sub	arg02, local02
21294     04 14 46 50 |  if_ne	shr	arg02, #4
21298     0A FB 01 56 |  if_ne	mov	result1, arg02
2129c     14 25 02 F6 | 	mov	local04, local06
212a0     04 24 06 F1 | 	add	local04, #4
212a4     12 FB 51 FC | 	wrword	result1, local04
212a8                 | LR__3126
212a8                 | LR__3127
212a8     14 FB 01 F6 | 	mov	result1, local06
212ac     A7 F0 03 F6 | 	mov	ptra, fp
212b0     B2 00 A0 FD | 	call	#popregs_
212b4                 | __system___gc_dofree_ret
212b4     2D 00 64 FD | 	ret
212b8                 | 
212b8                 | __system___gc_docollect
212b8     05 4A 05 F6 | 	mov	COUNT_, #5
212bc     A8 00 A0 FD | 	call	#pushregs_
212c0     B8 F9 BF FD | 	call	#__system___gc_ptrs
212c4     FE 1E 02 F6 | 	mov	local01, result2
212c8     FD 20 02 F6 | 	mov	local02, result1
212cc     10 13 02 F6 | 	mov	arg01, local02
212d0     09 23 EA FA | 	rdword	local03, arg01 wz
212d4     00 FA 05 A6 |  if_e	mov	result1, #0
212d8     04 22 66 50 |  if_ne	shl	local03, #4
212dc     11 13 02 51 |  if_ne	add	arg01, local03
212e0     09 FB 01 56 |  if_ne	mov	result1, arg01
212e4     FD 24 0A F6 | 	mov	local04, result1 wz
212e8     00 FA 05 F6 | 	mov	result1, #0
212ec     01 FA 61 FD | 	cogid	result1
212f0     FD 26 02 F6 | 	mov	local05, result1
212f4     48 00 90 AD |  if_e	jmp	#LR__3132
212f8     97 22 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
212fc                 | LR__3130
212fc     0F 25 52 F2 | 	cmps	local04, local01 wc
21300     3C 00 90 3D |  if_ae	jmp	#LR__3132
21304     12 15 02 F6 | 	mov	arg02, local04
21308     02 14 06 F1 | 	add	arg02, #2
2130c     0A 15 E2 FA | 	rdword	arg02, arg02
21310     20 14 26 F5 | 	andn	arg02, #32
21314     12 13 02 F6 | 	mov	arg01, local04
21318     02 12 06 F1 | 	add	arg01, #2
2131c     09 15 52 FC | 	wrword	arg02, arg01
21320     12 13 02 F6 | 	mov	arg01, local04
21324     09 23 EA FA | 	rdword	local03, arg01 wz
21328     00 FA 05 A6 |  if_e	mov	result1, #0
2132c     04 22 66 50 |  if_ne	shl	local03, #4
21330     11 13 02 51 |  if_ne	add	arg01, local03
21334     09 FB 01 56 |  if_ne	mov	result1, arg01
21338     FD 24 0A F6 | 	mov	local04, result1 wz
2133c     BC FF 9F 5D |  if_ne	jmp	#LR__3130
21340                 | LR__3131
21340                 | LR__3132
21340     00 22 06 F6 | 	mov	local03, #0
21344     00 12 06 F6 | 	mov	arg01, #0
21348     10 BD BF FD | 	call	#__system____topofstack
2134c     FD 14 02 F6 | 	mov	arg02, result1
21350     11 13 02 F6 | 	mov	arg01, local03
21354     90 00 B0 FD | 	call	#__system___gc_markhub
21358     1C 01 B0 FD | 	call	#__system___gc_markcog
2135c     10 13 02 F6 | 	mov	arg01, local02
21360     09 23 EA FA | 	rdword	local03, arg01 wz
21364     00 FA 05 A6 |  if_e	mov	result1, #0
21368     04 22 66 50 |  if_ne	shl	local03, #4
2136c     11 13 02 51 |  if_ne	add	arg01, local03
21370     09 FB 01 56 |  if_ne	mov	result1, arg01
21374     FD 20 0A F6 | 	mov	local02, result1 wz
21378     60 00 90 AD |  if_e	jmp	#LR__3136
2137c                 | LR__3133
2137c     10 25 02 F6 | 	mov	local04, local02
21380     12 13 02 F6 | 	mov	arg01, local04
21384     09 23 EA FA | 	rdword	local03, arg01 wz
21388     00 FA 05 A6 |  if_e	mov	result1, #0
2138c     04 22 66 50 |  if_ne	shl	local03, #4
21390     11 13 02 51 |  if_ne	add	arg01, local03
21394     09 FB 01 56 |  if_ne	mov	result1, arg01
21398     FD 20 02 F6 | 	mov	local02, result1
2139c     12 15 02 F6 | 	mov	arg02, local04
213a0     02 14 06 F1 | 	add	arg02, #2
213a4     0A 15 E2 FA | 	rdword	arg02, arg02
213a8     20 14 CE F7 | 	test	arg02, #32 wz
213ac     10 14 CE A7 |  if_e	test	arg02, #16 wz
213b0     1C 00 90 5D |  if_ne	jmp	#LR__3135
213b4     0A 15 42 F8 | 	getnib	arg02, arg02, #0
213b8     13 15 0A F2 | 	cmp	arg02, local05 wz
213bc     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
213c0     0C 00 90 5D |  if_ne	jmp	#LR__3134
213c4     12 13 02 F6 | 	mov	arg01, local04
213c8     84 FC BF FD | 	call	#__system___gc_dofree
213cc     FD 20 02 F6 | 	mov	local02, result1
213d0                 | LR__3134
213d0                 | LR__3135
213d0     00 20 0E F2 | 	cmp	local02, #0 wz
213d4     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
213d8     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3133
213dc                 | LR__3136
213dc     A7 F0 03 F6 | 	mov	ptra, fp
213e0     B2 00 A0 FD | 	call	#popregs_
213e4                 | __system___gc_docollect_ret
213e4     2D 00 64 FD | 	ret
213e8                 | 
213e8                 | __system___gc_markhub
213e8     04 4A 05 F6 | 	mov	COUNT_, #4
213ec     A8 00 A0 FD | 	call	#pushregs_
213f0     09 1F 02 F6 | 	mov	local01, arg01
213f4     0A 21 02 F6 | 	mov	local02, arg02
213f8     80 F8 BF FD | 	call	#__system___gc_ptrs
213fc     FD 22 02 F6 | 	mov	local03, result1
21400     FE 24 02 F6 | 	mov	local04, result2
21404                 | LR__3140
21404     10 1F 52 F2 | 	cmps	local01, local02 wc
21408     60 00 90 3D |  if_ae	jmp	#LR__3141
2140c     0F 17 02 FB | 	rdlong	arg03, local01
21410     04 1E 06 F1 | 	add	local01, #4
21414     12 15 02 F6 | 	mov	arg02, local04
21418     11 13 02 F6 | 	mov	arg01, local03
2141c     8C FB BF FD | 	call	#__system___gc_isvalidptr
21420     FD 16 0A F6 | 	mov	arg03, result1 wz
21424     DC FF 9F AD |  if_e	jmp	#LR__3140
21428     0B 13 02 F6 | 	mov	arg01, arg03
2142c     00 FA 05 F6 | 	mov	result1, #0
21430     02 12 06 F1 | 	add	arg01, #2
21434     09 13 E2 FA | 	rdword	arg01, arg01
21438     36 00 00 FF 
2143c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
21440     01 FA 65 A6 |  if_e	neg	result1, #1
21444     00 FA 0D F2 | 	cmp	result1, #0 wz
21448     B8 FF 9F 5D |  if_ne	jmp	#LR__3140
2144c     0B FD 01 F6 | 	mov	result2, arg03
21450     02 FC 05 F1 | 	add	result2, #2
21454     FE FC E1 FA | 	rdword	result2, result2
21458     0F FC 25 F5 | 	andn	result2, #15
2145c     2E FC 45 F5 | 	or	result2, #46
21460     02 16 06 F1 | 	add	arg03, #2
21464     0B FD 51 FC | 	wrword	result2, arg03
21468     98 FF 9F FD | 	jmp	#LR__3140
2146c                 | LR__3141
2146c     A7 F0 03 F6 | 	mov	ptra, fp
21470     B2 00 A0 FD | 	call	#popregs_
21474                 | __system___gc_markhub_ret
21474     2D 00 64 FD | 	ret
21478                 | 
21478                 | __system___gc_markcog
21478     04 4A 05 F6 | 	mov	COUNT_, #4
2147c     A8 00 A0 FD | 	call	#pushregs_
21480     F8 F7 BF FD | 	call	#__system___gc_ptrs
21484     FD 1E 02 F6 | 	mov	local01, result1
21488     FE 20 02 F6 | 	mov	local02, result2
2148c     EF 23 06 F6 | 	mov	local03, #495
21490                 | LR__3150
21490                 | 	'.live	local03
21490     00 22 96 F9 | 	alts	local03, #0
21494     11 25 02 F6 | 	mov	local04, local03
21498     0F 13 02 F6 | 	mov	arg01, local01
2149c     10 15 02 F6 | 	mov	arg02, local02
214a0     12 17 02 F6 | 	mov	arg03, local04
214a4     04 FB BF FD | 	call	#__system___gc_isvalidptr
214a8     00 FA 0D F2 | 	cmp	result1, #0 wz
214ac     18 00 90 AD |  if_e	jmp	#LR__3151
214b0     FD 24 02 F6 | 	mov	local04, result1
214b4     02 24 06 F1 | 	add	local04, #2
214b8     12 25 E2 FA | 	rdword	local04, local04
214bc     20 24 46 F5 | 	or	local04, #32
214c0     02 FA 05 F1 | 	add	result1, #2
214c4     FD 24 52 FC | 	wrword	local04, result1
214c8                 | LR__3151
214c8     01 22 86 F1 | 	sub	local03, #1
214cc     00 22 56 F2 | 	cmps	local03, #0 wc
214d0     BC FF 9F 3D |  if_ae	jmp	#LR__3150
214d4     A7 F0 03 F6 | 	mov	ptra, fp
214d8     B2 00 A0 FD | 	call	#popregs_
214dc                 | __system___gc_markcog_ret
214dc     2D 00 64 FD | 	ret
214e0                 | 
214e0                 | __system__opendir
214e0     06 4A 05 F6 | 	mov	COUNT_, #6
214e4     A8 00 A0 FD | 	call	#pushregs_
214e8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
214ec     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
214f0     09 15 02 F6 | 	mov	arg02, arg01
214f4     0F 13 02 F6 | 	mov	arg01, local01
214f8     00 16 06 F6 | 	mov	arg03, #0
214fc     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
21500     18 C3 BF FD | 	call	#__system____getvfsforfile
21504     FD 20 0A F6 | 	mov	local02, result1 wz
21508     10 00 90 AD |  if_e	jmp	#LR__3160
2150c     28 20 06 F1 | 	add	local02, #40
21510     10 17 0A FB | 	rdlong	arg03, local02 wz
21514     28 20 86 F1 | 	sub	local02, #40
21518     14 00 90 5D |  if_ne	jmp	#LR__3161
2151c                 | LR__3160
2151c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21520     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
21524     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21528     00 FA 05 F6 | 	mov	result1, #0
2152c     90 00 90 FD | 	jmp	#LR__3163
21530                 | LR__3161
21530     5C 12 06 F6 | 	mov	arg01, #92
21534     10 14 06 F6 | 	mov	arg02, #16
21538     C0 F9 BF FD | 	call	#__system___gc_doalloc
2153c     FD 22 0A F6 | 	mov	local03, result1 wz
21540     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
21544     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
21548     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2154c     00 FA 05 A6 |  if_e	mov	result1, #0
21550     6C 00 90 AD |  if_e	jmp	#LR__3163
21554     28 20 06 F1 | 	add	local02, #40
21558     10 25 02 FB | 	rdlong	local04, local02
2155c     12 27 02 F6 | 	mov	local05, local04
21560     28 20 86 F1 | 	sub	local02, #40
21564     13 26 46 F7 | 	zerox	local05, #19
21568     14 24 46 F0 | 	shr	local04, #20
2156c     02 24 66 F0 | 	shl	local04, #2
21570     ED 24 02 F1 | 	add	local04, __methods__
21574     12 25 02 FB | 	rdlong	local04, local04
21578     11 13 02 F6 | 	mov	arg01, local03
2157c     0F 15 02 F6 | 	mov	arg02, local01
21580     F2 28 02 F6 | 	mov	local06, objptr
21584     13 E5 01 F6 | 	mov	objptr, local05
21588     2D 24 62 FD | 	call	local04
2158c     14 E5 01 F6 | 	mov	objptr, local06
21590     FD 16 0A F6 | 	mov	arg03, result1 wz
21594     20 00 90 AD |  if_e	jmp	#LR__3162
21598     00 16 4E F2 | 	cmps	arg03, #0 wz
2159c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
215a0     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
215a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
215a8     11 13 02 F6 | 	mov	arg01, local03
215ac     58 FA BF FD | 	call	#__system___gc_free
215b0     00 FA 05 F6 | 	mov	result1, #0
215b4     08 00 90 FD | 	jmp	#LR__3163
215b8                 | LR__3162
215b8     11 21 62 FC | 	wrlong	local02, local03
215bc     11 FB 01 F6 | 	mov	result1, local03
215c0                 | LR__3163
215c0     A7 F0 03 F6 | 	mov	ptra, fp
215c4     B2 00 A0 FD | 	call	#popregs_
215c8                 | __system__opendir_ret
215c8     2D 00 64 FD | 	ret
215cc                 | 
215cc                 | __system__closedir
215cc     04 4A 05 F6 | 	mov	COUNT_, #4
215d0     A8 00 A0 FD | 	call	#pushregs_
215d4     09 1F 02 F6 | 	mov	local01, arg01
215d8     0F 13 02 FB | 	rdlong	arg01, local01
215dc     2C 12 06 F1 | 	add	arg01, #44
215e0     09 21 02 FB | 	rdlong	local02, arg01
215e4     10 23 02 F6 | 	mov	local03, local02
215e8     13 22 46 F7 | 	zerox	local03, #19
215ec     14 20 46 F0 | 	shr	local02, #20
215f0     02 20 66 F0 | 	shl	local02, #2
215f4     ED 20 02 F1 | 	add	local02, __methods__
215f8     10 21 02 FB | 	rdlong	local02, local02
215fc     0F 13 02 F6 | 	mov	arg01, local01
21600     F2 24 02 F6 | 	mov	local04, objptr
21604     11 E5 01 F6 | 	mov	objptr, local03
21608     2D 20 62 FD | 	call	local02
2160c     12 E5 01 F6 | 	mov	objptr, local04
21610     FD 24 02 F6 | 	mov	local04, result1
21614     0F 13 02 F6 | 	mov	arg01, local01
21618     EC F9 BF FD | 	call	#__system___gc_free
2161c     00 24 4E F2 | 	cmps	local04, #0 wz
21620     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21624     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
21628     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2162c     01 FA 65 56 |  if_ne	neg	result1, #1
21630     00 FA 05 A6 |  if_e	mov	result1, #0
21634     A7 F0 03 F6 | 	mov	ptra, fp
21638     B2 00 A0 FD | 	call	#popregs_
2163c                 | __system__closedir_ret
2163c     2D 00 64 FD | 	ret
21640                 | 
21640                 | __system__readdir
21640     04 4A 05 F6 | 	mov	COUNT_, #4
21644     A8 00 A0 FD | 	call	#pushregs_
21648     09 15 0A FB | 	rdlong	arg02, arg01 wz
2164c     08 12 06 F1 | 	add	arg01, #8
21650     09 1F 02 F6 | 	mov	local01, arg01
21654     08 12 86 F1 | 	sub	arg01, #8
21658     00 FA 05 A6 |  if_e	mov	result1, #0
2165c     5C 00 90 AD |  if_e	jmp	#LR__3171
21660     30 14 06 F1 | 	add	arg02, #48
21664     0A 21 02 FB | 	rdlong	local02, arg02
21668     10 23 02 F6 | 	mov	local03, local02
2166c     13 22 46 F7 | 	zerox	local03, #19
21670     14 20 46 F0 | 	shr	local02, #20
21674     02 20 66 F0 | 	shl	local02, #2
21678     ED 20 02 F1 | 	add	local02, __methods__
2167c     10 21 02 FB | 	rdlong	local02, local02
21680     0F 15 02 F6 | 	mov	arg02, local01
21684     F2 24 02 F6 | 	mov	local04, objptr
21688     11 E5 01 F6 | 	mov	objptr, local03
2168c     2D 20 62 FD | 	call	local02
21690     12 E5 01 F6 | 	mov	objptr, local04
21694     00 FA 4D F2 | 	cmps	result1, #0 wz
21698     1C 00 90 AD |  if_e	jmp	#LR__3170
2169c     01 FA 55 F2 | 	cmps	result1, #1 wc
216a0     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
216a4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
216a8     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
216ac     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
216b0     00 FA 05 F6 | 	mov	result1, #0
216b4     04 00 90 FD | 	jmp	#LR__3171
216b8                 | LR__3170
216b8     0F FB 01 F6 | 	mov	result1, local01
216bc                 | LR__3171
216bc     A7 F0 03 F6 | 	mov	ptra, fp
216c0     B2 00 A0 FD | 	call	#popregs_
216c4                 | __system__readdir_ret
216c4     2D 00 64 FD | 	ret
216c8                 | 
216c8                 | __system___openraw
216c8     15 4A 05 F6 | 	mov	COUNT_, #21
216cc     A8 00 A0 FD | 	call	#pushregs_
216d0     09 1F 02 F6 | 	mov	local01, arg01
216d4     0A 21 02 F6 | 	mov	local02, arg02
216d8     0B 23 02 F6 | 	mov	local03, arg03
216dc     0C 25 02 F6 | 	mov	local04, arg04
216e0     04 26 06 F6 | 	mov	local05, #4
216e4     0F 29 02 F6 | 	mov	local06, local01
216e8     00 2A 06 F6 | 	mov	local07, #0
216ec     84 E7 05 F1 | 	add	ptr___system__dat__, #388
216f0     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
216f4     16 13 02 F6 | 	mov	arg01, local08
216f8     10 15 02 F6 | 	mov	arg02, local02
216fc     00 16 06 F6 | 	mov	arg03, #0
21700     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
21704     14 C1 BF FD | 	call	#__system____getvfsforfile
21708     FD 2E 0A F6 | 	mov	local09, result1 wz
2170c     10 00 90 AD |  if_e	jmp	#LR__3180
21710     20 2E 06 F1 | 	add	local09, #32
21714     17 FB 09 FB | 	rdlong	result1, local09 wz
21718     20 2E 86 F1 | 	sub	local09, #32
2171c     14 00 90 5D |  if_ne	jmp	#LR__3181
21720                 | LR__3180
21720     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21724     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
21728     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2172c     01 FA 65 F6 | 	neg	result1, #1
21730     8C 02 90 FD | 	jmp	#LR__3194
21734                 | LR__3181
21734     14 13 02 F6 | 	mov	arg01, local06
21738     00 14 06 F6 | 	mov	arg02, #0
2173c     34 16 06 F6 | 	mov	arg03, #52
21740     09 31 02 F6 | 	mov	local10, arg01
21744     98 00 A0 FD | 	call	#\builtin_bytefill_
21748     20 2E 06 F1 | 	add	local09, #32
2174c     17 33 02 FB | 	rdlong	local11, local09
21750     19 35 02 F6 | 	mov	local12, local11
21754     19 37 02 F6 | 	mov	local13, local11
21758     20 2E 86 F1 | 	sub	local09, #32
2175c     1B 39 02 F6 | 	mov	local14, local13
21760     13 34 46 F7 | 	zerox	local12, #19
21764     14 38 46 F0 | 	shr	local14, #20
21768     02 38 66 F0 | 	shl	local14, #2
2176c     ED 38 02 F1 | 	add	local14, __methods__
21770     1C 39 02 FB | 	rdlong	local14, local14
21774     14 3B 02 F6 | 	mov	local15, local06
21778     16 3D 02 F6 | 	mov	local16, local08
2177c     11 3F 02 F6 | 	mov	local17, local03
21780     1D 13 02 F6 | 	mov	arg01, local15
21784     1E 15 02 F6 | 	mov	arg02, local16
21788     1F 17 02 F6 | 	mov	arg03, local17
2178c     F2 40 02 F6 | 	mov	local18, objptr
21790     1A E5 01 F6 | 	mov	objptr, local12
21794     2D 38 62 FD | 	call	local14
21798     20 E5 01 F6 | 	mov	objptr, local18
2179c     FD 42 0A F6 | 	mov	local19, result1 wz
217a0     04 22 CE 57 |  if_ne	test	local03, #4 wz
217a4     58 00 90 AD |  if_e	jmp	#LR__3182
217a8     24 2E 06 F1 | 	add	local09, #36
217ac     17 33 02 FB | 	rdlong	local11, local09
217b0     19 35 02 F6 | 	mov	local12, local11
217b4     19 37 02 F6 | 	mov	local13, local11
217b8     24 2E 86 F1 | 	sub	local09, #36
217bc     1B 39 02 F6 | 	mov	local14, local13
217c0     13 34 46 F7 | 	zerox	local12, #19
217c4     14 38 46 F0 | 	shr	local14, #20
217c8     02 38 66 F0 | 	shl	local14, #2
217cc     ED 38 02 F1 | 	add	local14, __methods__
217d0     1C 39 02 FB | 	rdlong	local14, local14
217d4     14 3B 02 F6 | 	mov	local15, local06
217d8     16 3D 02 F6 | 	mov	local16, local08
217dc     12 3F 02 F6 | 	mov	local17, local04
217e0     1D 13 02 F6 | 	mov	arg01, local15
217e4     1E 15 02 F6 | 	mov	arg02, local16
217e8     1F 17 02 F6 | 	mov	arg03, local17
217ec     F2 40 02 F6 | 	mov	local18, objptr
217f0     1A E5 01 F6 | 	mov	objptr, local12
217f4     2D 38 62 FD | 	call	local14
217f8     20 E5 01 F6 | 	mov	objptr, local18
217fc     FD 42 02 F6 | 	mov	local19, result1
21800                 | LR__3182
21800     00 42 0E F2 | 	cmp	local19, #0 wz
21804     8C 01 90 5D |  if_ne	jmp	#LR__3192
21808     11 45 02 F6 | 	mov	local20, local03
2180c     03 44 0E F5 | 	and	local20, #3 wz
21810     02 26 46 55 |  if_ne	or	local05, #2
21814     01 44 0E F2 | 	cmp	local20, #1 wz
21818     01 26 46 55 |  if_ne	or	local05, #1
2181c     20 22 CE F7 | 	test	local03, #32 wz
21820     C0 26 46 55 |  if_ne	or	local05, #192
21824     08 28 06 F1 | 	add	local06, #8
21828     14 27 62 FC | 	wrlong	local05, local06
2182c     0C 28 06 F1 | 	add	local06, #12
21830     14 47 0A FB | 	rdlong	local21, local06 wz
21834     14 28 86 F1 | 	sub	local06, #20
21838     18 00 90 5D |  if_ne	jmp	#LR__3183
2183c     04 2E 06 F1 | 	add	local09, #4
21840     17 47 02 FB | 	rdlong	local21, local09
21844     04 2E 86 F1 | 	sub	local09, #4
21848     14 28 06 F1 | 	add	local06, #20
2184c     14 47 62 FC | 	wrlong	local21, local06
21850     14 28 86 F1 | 	sub	local06, #20
21854                 | LR__3183
21854     18 28 06 F1 | 	add	local06, #24
21858     14 47 0A FB | 	rdlong	local21, local06 wz
2185c     18 28 86 F1 | 	sub	local06, #24
21860     18 00 90 5D |  if_ne	jmp	#LR__3184
21864     08 2E 06 F1 | 	add	local09, #8
21868     17 47 02 FB | 	rdlong	local21, local09
2186c     08 2E 86 F1 | 	sub	local09, #8
21870     18 28 06 F1 | 	add	local06, #24
21874     14 47 62 FC | 	wrlong	local21, local06
21878     18 28 86 F1 | 	sub	local06, #24
2187c                 | LR__3184
2187c     24 28 06 F1 | 	add	local06, #36
21880     14 47 0A FB | 	rdlong	local21, local06 wz
21884     24 28 86 F1 | 	sub	local06, #36
21888     17 47 02 AB |  if_e	rdlong	local21, local09
2188c     24 28 06 A1 |  if_e	add	local06, #36
21890     14 47 62 AC |  if_e	wrlong	local21, local06
21894     24 28 86 A1 |  if_e	sub	local06, #36
21898     28 28 06 F1 | 	add	local06, #40
2189c     14 47 0A FB | 	rdlong	local21, local06 wz
218a0     28 28 86 F1 | 	sub	local06, #40
218a4     18 00 90 5D |  if_ne	jmp	#LR__3185
218a8     10 2E 06 F1 | 	add	local09, #16
218ac     17 47 02 FB | 	rdlong	local21, local09
218b0     10 2E 86 F1 | 	sub	local09, #16
218b4     28 28 06 F1 | 	add	local06, #40
218b8     14 47 62 FC | 	wrlong	local21, local06
218bc     28 28 86 F1 | 	sub	local06, #40
218c0                 | LR__3185
218c0     30 28 06 F1 | 	add	local06, #48
218c4     14 47 0A FB | 	rdlong	local21, local06 wz
218c8     30 28 86 F1 | 	sub	local06, #48
218cc     18 00 90 5D |  if_ne	jmp	#LR__3186
218d0     0C 2E 06 F1 | 	add	local09, #12
218d4     17 47 02 FB | 	rdlong	local21, local09
218d8     0C 2E 86 F1 | 	sub	local09, #12
218dc     30 28 06 F1 | 	add	local06, #48
218e0     14 47 62 FC | 	wrlong	local21, local06
218e4     30 28 86 F1 | 	sub	local06, #48
218e8                 | LR__3186
218e8     1C 28 06 F1 | 	add	local06, #28
218ec     14 47 0A FB | 	rdlong	local21, local06 wz
218f0     1C 28 86 F1 | 	sub	local06, #28
218f4     1C 00 90 5D |  if_ne	jmp	#LR__3187
218f8     01 2A 06 F6 | 	mov	local07, #1
218fc     F2 12 02 F6 | 	mov	arg01, objptr
21900     00 10 04 FF 
21904     00 12 46 F5 | 	or	arg01, ##136314880
21908     1C 28 06 F1 | 	add	local06, #28
2190c     14 13 62 FC | 	wrlong	arg01, local06
21910     1C 28 86 F1 | 	sub	local06, #28
21914                 | LR__3187
21914     20 28 06 F1 | 	add	local06, #32
21918     14 47 0A FB | 	rdlong	local21, local06 wz
2191c     20 28 86 F1 | 	sub	local06, #32
21920     1C 00 90 5D |  if_ne	jmp	#LR__3188
21924     01 2A 06 F6 | 	mov	local07, #1
21928     F2 12 02 F6 | 	mov	arg01, objptr
2192c     00 18 04 FF 
21930     00 12 46 F5 | 	or	arg01, ##137363456
21934     20 28 06 F1 | 	add	local06, #32
21938     14 13 62 FC | 	wrlong	arg01, local06
2193c     20 28 86 F1 | 	sub	local06, #32
21940                 | LR__3188
21940     2C 28 06 F1 | 	add	local06, #44
21944     14 47 0A FB | 	rdlong	local21, local06 wz
21948     2C 28 86 F1 | 	sub	local06, #44
2194c     44 00 90 5D |  if_ne	jmp	#LR__3191
21950     14 2E 06 F1 | 	add	local09, #20
21954     17 47 0A FB | 	rdlong	local21, local09 wz
21958     14 2E 86 F1 | 	sub	local09, #20
2195c     18 00 90 AD |  if_e	jmp	#LR__3189
21960     14 2E 06 F1 | 	add	local09, #20
21964     17 47 02 FB | 	rdlong	local21, local09
21968     2C 28 06 F1 | 	add	local06, #44
2196c     14 47 62 FC | 	wrlong	local21, local06
21970     2C 28 86 F1 | 	sub	local06, #44
21974     1C 00 90 FD | 	jmp	#LR__3190
21978                 | LR__3189
21978     01 2A 06 F6 | 	mov	local07, #1
2197c     F2 12 02 F6 | 	mov	arg01, objptr
21980     00 20 04 FF 
21984     00 12 46 F5 | 	or	arg01, ##138412032
21988     2C 28 06 F1 | 	add	local06, #44
2198c     14 13 62 FC | 	wrlong	arg01, local06
21990     2C 28 86 F1 | 	sub	local06, #44
21994                 | LR__3190
21994                 | LR__3191
21994                 | LR__3192
21994     00 2A 0E F2 | 	cmp	local07, #0 wz
21998     14 13 02 56 |  if_ne	mov	arg01, local06
2199c     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
219a0     00 42 0E F2 | 	cmp	local19, #0 wz
219a4     00 12 06 A6 |  if_e	mov	arg01, #0
219a8     10 00 90 5D |  if_ne	jmp	#LR__3193
219ac     00 12 4E F2 | 	cmps	arg01, #0 wz
219b0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
219b4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
219b8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
219bc                 | LR__3193
219bc     21 FB 01 F6 | 	mov	result1, local19
219c0                 | LR__3194
219c0     A7 F0 03 F6 | 	mov	ptra, fp
219c4     B2 00 A0 FD | 	call	#popregs_
219c8                 | __system___openraw_ret
219c8     2D 00 64 FD | 	ret
219cc                 | 
219cc                 | __system___closeraw
219cc     05 4A 05 F6 | 	mov	COUNT_, #5
219d0     A8 00 A0 FD | 	call	#pushregs_
219d4     09 1F 02 F6 | 	mov	local01, arg01
219d8     00 20 06 F6 | 	mov	local02, #0
219dc     08 1E 06 F1 | 	add	local01, #8
219e0     0F FB 09 FB | 	rdlong	result1, local01 wz
219e4     08 1E 86 F1 | 	sub	local01, #8
219e8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
219ec     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
219f0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
219f4     01 FA 65 A6 |  if_e	neg	result1, #1
219f8     A8 00 90 AD |  if_e	jmp	#LR__3202
219fc     2C 1E 06 F1 | 	add	local01, #44
21a00     0F FB 09 FB | 	rdlong	result1, local01 wz
21a04     2C 1E 86 F1 | 	sub	local01, #44
21a08     38 00 90 AD |  if_e	jmp	#LR__3200
21a0c     2C 1E 06 F1 | 	add	local01, #44
21a10     0F 23 02 FB | 	rdlong	local03, local01
21a14     11 25 02 F6 | 	mov	local04, local03
21a18     2C 1E 86 F1 | 	sub	local01, #44
21a1c     13 24 46 F7 | 	zerox	local04, #19
21a20     14 22 46 F0 | 	shr	local03, #20
21a24     02 22 66 F0 | 	shl	local03, #2
21a28     ED 22 02 F1 | 	add	local03, __methods__
21a2c     11 23 02 FB | 	rdlong	local03, local03
21a30     0F 13 02 F6 | 	mov	arg01, local01
21a34     F2 26 02 F6 | 	mov	local05, objptr
21a38     12 E5 01 F6 | 	mov	objptr, local04
21a3c     2D 22 62 FD | 	call	local03
21a40     13 E5 01 F6 | 	mov	objptr, local05
21a44                 | LR__3200
21a44     24 1E 06 F1 | 	add	local01, #36
21a48     0F 27 0A FB | 	rdlong	local05, local01 wz
21a4c     24 1E 86 F1 | 	sub	local01, #36
21a50     3C 00 90 AD |  if_e	jmp	#LR__3201
21a54     24 1E 06 F1 | 	add	local01, #36
21a58     0F 23 02 FB | 	rdlong	local03, local01
21a5c     11 25 02 F6 | 	mov	local04, local03
21a60     24 1E 86 F1 | 	sub	local01, #36
21a64     13 24 46 F7 | 	zerox	local04, #19
21a68     14 22 46 F0 | 	shr	local03, #20
21a6c     02 22 66 F0 | 	shl	local03, #2
21a70     ED 22 02 F1 | 	add	local03, __methods__
21a74     11 23 02 FB | 	rdlong	local03, local03
21a78     0F 13 02 F6 | 	mov	arg01, local01
21a7c     F2 26 02 F6 | 	mov	local05, objptr
21a80     12 E5 01 F6 | 	mov	objptr, local04
21a84     2D 22 62 FD | 	call	local03
21a88     13 E5 01 F6 | 	mov	objptr, local05
21a8c     FD 20 02 F6 | 	mov	local02, result1
21a90                 | LR__3201
21a90     0F 13 02 F6 | 	mov	arg01, local01
21a94     00 14 06 F6 | 	mov	arg02, #0
21a98     34 16 06 F6 | 	mov	arg03, #52
21a9c     98 00 A0 FD | 	call	#\builtin_bytefill_
21aa0     10 FB 01 F6 | 	mov	result1, local02
21aa4                 | LR__3202
21aa4     A7 F0 03 F6 | 	mov	ptra, fp
21aa8     B2 00 A0 FD | 	call	#popregs_
21aac                 | __system___closeraw_ret
21aac     2D 00 64 FD | 	ret
21ab0                 | 
21ab0                 | __system___vfs_open_sdcardx
21ab0     0B 4A 05 F6 | 	mov	COUNT_, #11
21ab4     A8 00 A0 FD | 	call	#pushregs_
21ab8     09 23 02 F6 | 	mov	local03, arg01
21abc     0A 25 02 F6 | 	mov	local04, arg02
21ac0     0B 27 02 F6 | 	mov	local05, arg03
21ac4     0C 29 02 F6 | 	mov	local06, arg04
21ac8     01 00 00 FF 
21acc     24 12 06 F6 | 	mov	arg01, ##548
21ad0     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
21ad4     FD 2A 02 F6 | 	mov	local07, result1
21ad8     01 00 00 FF 
21adc     34 12 06 F6 | 	mov	arg01, ##564
21ae0     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
21ae4     FD 2C 02 F6 | 	mov	local08, result1
21ae8     11 19 02 F6 | 	mov	arg04, local03
21aec     1F 18 C6 F0 | 	sar	arg04, #31
21af0     11 17 02 F6 | 	mov	arg03, local03
21af4     01 12 06 F6 | 	mov	arg01, #1
21af8     00 14 06 F6 | 	mov	arg02, #0
21afc     48 DC BF FD | 	call	#__system___int64_shl
21b00     FD 1E 02 F6 | 	mov	local01, result1
21b04     FE 2E 02 F6 | 	mov	local09, result2
21b08     12 19 02 F6 | 	mov	arg04, local04
21b0c     1F 18 C6 F0 | 	sar	arg04, #31
21b10     12 17 02 F6 | 	mov	arg03, local04
21b14     01 12 06 F6 | 	mov	arg01, #1
21b18     00 14 06 F6 | 	mov	arg02, #0
21b1c     28 DC BF FD | 	call	#__system___int64_shl
21b20     FD 1E 42 F5 | 	or	local01, result1
21b24     FE 2E 42 F5 | 	or	local09, result2
21b28     13 19 02 F6 | 	mov	arg04, local05
21b2c     1F 18 C6 F0 | 	sar	arg04, #31
21b30     13 17 02 F6 | 	mov	arg03, local05
21b34     01 12 06 F6 | 	mov	arg01, #1
21b38     00 14 06 F6 | 	mov	arg02, #0
21b3c     08 DC BF FD | 	call	#__system___int64_shl
21b40     FD 1E 42 F5 | 	or	local01, result1
21b44     FE 2E 42 F5 | 	or	local09, result2
21b48     14 19 02 F6 | 	mov	arg04, local06
21b4c     1F 18 C6 F0 | 	sar	arg04, #31
21b50     14 17 02 F6 | 	mov	arg03, local06
21b54     01 12 06 F6 | 	mov	arg01, #1
21b58     00 14 06 F6 | 	mov	arg02, #0
21b5c     E8 DB BF FD | 	call	#__system___int64_shl
21b60     17 15 02 F6 | 	mov	arg02, local09
21b64     FD 1E 42 F5 | 	or	local01, result1
21b68     0A FD 41 F5 | 	or	result2, arg02
21b6c     FE 20 02 F6 | 	mov	local02, result2
21b70     0F 13 02 F6 | 	mov	arg01, local01
21b74     10 15 02 F6 | 	mov	arg02, local02
21b78     04 DC BF FD | 	call	#__system___usepins
21b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
21b80     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
21b84     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
21b88     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
21b8c     00 FA 05 A6 |  if_e	mov	result1, #0
21b90     B4 00 90 AD |  if_e	jmp	#LR__3212
21b94     0F 31 02 F6 | 	mov	local10, local01
21b98     10 2F 02 F6 | 	mov	local09, local02
21b9c     01 00 00 FF 
21ba0     08 2A 06 F1 | 	add	local07, ##520
21ba4     15 31 62 FC | 	wrlong	local10, local07
21ba8     04 2A 06 F1 | 	add	local07, #4
21bac     15 2F 62 FC | 	wrlong	local09, local07
21bb0     01 00 00 FF 
21bb4     0C 2A 86 F1 | 	sub	local07, ##524
21bb8     14 1B 02 F6 | 	mov	arg05, local06
21bbc     00 12 06 F6 | 	mov	arg01, #0
21bc0     11 15 02 F6 | 	mov	arg02, local03
21bc4     12 17 02 F6 | 	mov	arg03, local04
21bc8     13 19 02 F6 | 	mov	arg04, local05
21bcc     F2 30 02 F6 | 	mov	local10, objptr
21bd0     15 E5 01 F6 | 	mov	objptr, local07
21bd4     78 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
21bd8     18 E5 01 F6 | 	mov	objptr, local10
21bdc     FD 32 0A F6 | 	mov	local11, result1 wz
21be0     24 00 90 5D |  if_ne	jmp	#LR__3210
21be4     63 01 00 FF 
21be8     9A 14 06 F6 | 	mov	arg02, ##@LR__4607
21bec     16 13 02 F6 | 	mov	arg01, local08
21bf0     00 16 06 F6 | 	mov	arg03, #0
21bf4     F2 32 02 F6 | 	mov	local11, objptr
21bf8     15 E5 01 F6 | 	mov	objptr, local07
21bfc     A8 5E B0 FD | 	call	#_fatfs_cc_f_mount
21c00     19 E5 01 F6 | 	mov	objptr, local11
21c04     FD 32 02 F6 | 	mov	local11, result1
21c08                 | LR__3210
21c08     00 32 0E F2 | 	cmp	local11, #0 wz
21c0c     24 00 90 AD |  if_e	jmp	#LR__3211
21c10     0F 13 02 F6 | 	mov	arg01, local01
21c14     10 15 02 F6 | 	mov	arg02, local02
21c18     B8 DB BF FD | 	call	#__system___freepins
21c1c     19 13 6A F6 | 	neg	arg01, local11 wz
21c20     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21c24     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
21c28     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21c2c     00 FA 05 F6 | 	mov	result1, #0
21c30     14 00 90 FD | 	jmp	#LR__3212
21c34                 | LR__3211
21c34     15 13 02 F6 | 	mov	arg01, local07
21c38     F2 32 02 F6 | 	mov	local11, objptr
21c3c     15 E5 01 F6 | 	mov	objptr, local07
21c40     44 9B B0 FD | 	call	#_fatfs_cc_get_vfs
21c44     19 E5 01 F6 | 	mov	objptr, local11
21c48                 | LR__3212
21c48     A7 F0 03 F6 | 	mov	ptra, fp
21c4c     B2 00 A0 FD | 	call	#popregs_
21c50                 | __system___vfs_open_sdcardx_ret
21c50     2D 00 64 FD | 	ret
21c54                 | 
21c54                 | __system____default_getc
21c54     03 4A 05 F6 | 	mov	COUNT_, #3
21c58     A8 00 A0 FD | 	call	#pushregs_
21c5c     09 1F 02 F6 | 	mov	local01, arg01
21c60     0F 21 02 FB | 	rdlong	local02, local01
21c64     08 20 06 F1 | 	add	local02, #8
21c68     10 23 02 FB | 	rdlong	local03, local02
21c6c     02 22 CE F7 | 	test	local03, #2 wz
21c70     0F 13 02 56 |  if_ne	mov	arg01, local01
21c74     00 01 B0 5D |  if_ne	call	#__system____default_flush
21c78     10 23 02 FB | 	rdlong	local03, local02
21c7c     01 22 46 F5 | 	or	local03, #1
21c80     10 23 62 FC | 	wrlong	local03, local02
21c84     08 20 86 F1 | 	sub	local02, #8
21c88     10 23 0A FB | 	rdlong	local03, local02 wz
21c8c     0C 00 90 5D |  if_ne	jmp	#LR__3220
21c90     0F 13 02 F6 | 	mov	arg01, local01
21c94     60 16 B0 FD | 	call	#__system____default_filbuf
21c98     FD 22 02 F6 | 	mov	local03, result1
21c9c                 | LR__3220
21c9c     01 22 56 F2 | 	cmps	local03, #1 wc
21ca0     01 FA 65 C6 |  if_b	neg	result1, #1
21ca4     1C 00 90 CD |  if_b	jmp	#LR__3221
21ca8     01 22 86 F1 | 	sub	local03, #1
21cac     10 23 62 FC | 	wrlong	local03, local02
21cb0     04 20 06 F1 | 	add	local02, #4
21cb4     10 23 02 FB | 	rdlong	local03, local02
21cb8     11 FB C1 FA | 	rdbyte	result1, local03
21cbc     01 22 06 F1 | 	add	local03, #1
21cc0     10 23 62 FC | 	wrlong	local03, local02
21cc4                 | LR__3221
21cc4     A7 F0 03 F6 | 	mov	ptra, fp
21cc8     B2 00 A0 FD | 	call	#popregs_
21ccc                 | __system____default_getc_ret
21ccc     2D 00 64 FD | 	ret
21cd0                 | 
21cd0                 | __system____default_putc
21cd0     06 4A 05 F6 | 	mov	COUNT_, #6
21cd4     A8 00 A0 FD | 	call	#pushregs_
21cd8     09 1F 02 F6 | 	mov	local01, arg01
21cdc     0A 21 02 F6 | 	mov	local02, arg02
21ce0     10 23 02 FB | 	rdlong	local03, local02
21ce4     08 22 06 F1 | 	add	local03, #8
21ce8     11 FB 01 FB | 	rdlong	result1, local03
21cec     01 FA CD F7 | 	test	result1, #1 wz
21cf0     10 13 02 56 |  if_ne	mov	arg01, local02
21cf4     80 00 B0 5D |  if_ne	call	#__system____default_flush
21cf8     11 25 02 FB | 	rdlong	local04, local03
21cfc     02 24 46 F5 | 	or	local04, #2
21d00     11 25 62 FC | 	wrlong	local04, local03
21d04     08 22 86 F1 | 	sub	local03, #8
21d08     11 27 02 FB | 	rdlong	local05, local03
21d0c     10 22 06 F1 | 	add	local03, #16
21d10     11 15 02 FB | 	rdlong	arg02, local03
21d14     10 22 86 F1 | 	sub	local03, #16
21d18     13 FB 01 F6 | 	mov	result1, local05
21d1c     0A FB 01 F1 | 	add	result1, arg02
21d20     FD 1E 42 FC | 	wrbyte	local01, result1
21d24     0F 1F E2 F8 | 	getbyte	local01, local01, #0
21d28     01 26 06 F1 | 	add	local05, #1
21d2c     11 27 62 FC | 	wrlong	local05, local03
21d30     06 20 06 F1 | 	add	local02, #6
21d34     10 29 EA FA | 	rdword	local06, local02 wz
21d38     06 20 86 F1 | 	sub	local02, #6
21d3c     0C 22 06 51 |  if_ne	add	local03, #12
21d40     11 25 02 5B |  if_ne	rdlong	local04, local03
21d44     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
21d48     0C 00 90 AD |  if_e	jmp	#LR__3230
21d4c     0A 1E 0E F2 | 	cmp	local01, #10 wz
21d50     01 28 0E A2 |  if_e	cmp	local06, #1 wz
21d54     10 00 90 5D |  if_ne	jmp	#LR__3231
21d58                 | LR__3230
21d58     10 13 02 F6 | 	mov	arg01, local02
21d5c     18 00 B0 FD | 	call	#__system____default_flush
21d60     00 FA 0D F2 | 	cmp	result1, #0 wz
21d64     01 1E 66 56 |  if_ne	neg	local01, #1
21d68                 | LR__3231
21d68     0F FB 01 F6 | 	mov	result1, local01
21d6c     A7 F0 03 F6 | 	mov	ptra, fp
21d70     B2 00 A0 FD | 	call	#popregs_
21d74                 | __system____default_putc_ret
21d74     2D 00 64 FD | 	ret
21d78                 | 
21d78                 | __system____default_flush
21d78     06 4A 05 F6 | 	mov	COUNT_, #6
21d7c     A8 00 A0 FD | 	call	#pushregs_
21d80     09 1F 02 F6 | 	mov	local01, arg01
21d84     0F 21 02 FB | 	rdlong	local02, local01
21d88     10 23 02 FB | 	rdlong	local03, local02
21d8c     08 20 06 F1 | 	add	local02, #8
21d90     10 FB 01 FB | 	rdlong	result1, local02
21d94     08 20 86 F1 | 	sub	local02, #8
21d98     02 FA CD F7 | 	test	result1, #2 wz
21d9c     D0 00 90 AD |  if_e	jmp	#LR__3242
21da0     01 22 56 F2 | 	cmps	local03, #1 wc
21da4     20 01 90 CD |  if_b	jmp	#LR__3244
21da8     08 1E 06 F1 | 	add	local01, #8
21dac     0F FB 01 FB | 	rdlong	result1, local01
21db0     08 1E 86 F1 | 	sub	local01, #8
21db4     40 FA CD F7 | 	test	result1, #64 wz
21db8     68 00 90 AD |  if_e	jmp	#LR__3241
21dbc     08 1E 06 F1 | 	add	local01, #8
21dc0     0F 17 02 FB | 	rdlong	arg03, local01
21dc4     08 1E 86 F1 | 	sub	local01, #8
21dc8     80 16 CE F7 | 	test	arg03, #128 wz
21dcc     54 00 90 AD |  if_e	jmp	#LR__3240
21dd0     30 1E 06 F1 | 	add	local01, #48
21dd4     0F 25 02 FB | 	rdlong	local04, local01
21dd8     12 27 02 F6 | 	mov	local05, local04
21ddc     30 1E 86 F1 | 	sub	local01, #48
21de0     13 26 46 F7 | 	zerox	local05, #19
21de4     14 24 46 F0 | 	shr	local04, #20
21de8     02 24 66 F0 | 	shl	local04, #2
21dec     ED 24 02 F1 | 	add	local04, __methods__
21df0     12 25 02 FB | 	rdlong	local04, local04
21df4     0F 13 02 F6 | 	mov	arg01, local01
21df8     00 14 06 F6 | 	mov	arg02, #0
21dfc     02 16 06 F6 | 	mov	arg03, #2
21e00     F2 28 02 F6 | 	mov	local06, objptr
21e04     13 E5 01 F6 | 	mov	objptr, local05
21e08     2D 24 62 FD | 	call	local04
21e0c     14 E5 01 F6 | 	mov	objptr, local06
21e10     08 1E 06 F1 | 	add	local01, #8
21e14     0F 29 02 FB | 	rdlong	local06, local01
21e18     80 28 26 F5 | 	andn	local06, #128
21e1c     0F 29 62 FC | 	wrlong	local06, local01
21e20     08 1E 86 F1 | 	sub	local01, #8
21e24                 | LR__3240
21e24                 | LR__3241
21e24     18 1E 06 F1 | 	add	local01, #24
21e28     0F 25 02 FB | 	rdlong	local04, local01
21e2c     12 27 02 F6 | 	mov	local05, local04
21e30     18 1E 86 F1 | 	sub	local01, #24
21e34     13 26 46 F7 | 	zerox	local05, #19
21e38     14 24 46 F0 | 	shr	local04, #20
21e3c     02 24 66 F0 | 	shl	local04, #2
21e40     ED 24 02 F1 | 	add	local04, __methods__
21e44     12 25 02 FB | 	rdlong	local04, local04
21e48     10 20 06 F1 | 	add	local02, #16
21e4c     10 15 02 FB | 	rdlong	arg02, local02
21e50     10 20 86 F1 | 	sub	local02, #16
21e54     0F 13 02 F6 | 	mov	arg01, local01
21e58     11 17 02 F6 | 	mov	arg03, local03
21e5c     F2 28 02 F6 | 	mov	local06, objptr
21e60     13 E5 01 F6 | 	mov	objptr, local05
21e64     2D 24 62 FD | 	call	local04
21e68     14 E5 01 F6 | 	mov	objptr, local06
21e6c     58 00 90 FD | 	jmp	#LR__3244
21e70                 | LR__3242
21e70     08 20 06 F1 | 	add	local02, #8
21e74     10 29 02 FB | 	rdlong	local06, local02
21e78     08 20 86 F1 | 	sub	local02, #8
21e7c     01 28 CE F7 | 	test	local06, #1 wz
21e80     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
21e84     40 00 90 AD |  if_e	jmp	#LR__3243
21e88     30 1E 06 F1 | 	add	local01, #48
21e8c     0F 25 02 FB | 	rdlong	local04, local01
21e90     12 27 02 F6 | 	mov	local05, local04
21e94     30 1E 86 F1 | 	sub	local01, #48
21e98     13 26 46 F7 | 	zerox	local05, #19
21e9c     14 24 46 F0 | 	shr	local04, #20
21ea0     02 24 66 F0 | 	shl	local04, #2
21ea4     ED 24 02 F1 | 	add	local04, __methods__
21ea8     12 25 02 FB | 	rdlong	local04, local04
21eac     0F 13 02 F6 | 	mov	arg01, local01
21eb0     11 15 62 F6 | 	neg	arg02, local03
21eb4     01 16 06 F6 | 	mov	arg03, #1
21eb8     F2 28 02 F6 | 	mov	local06, objptr
21ebc     13 E5 01 F6 | 	mov	objptr, local05
21ec0     2D 24 62 FD | 	call	local04
21ec4     14 E5 01 F6 | 	mov	objptr, local06
21ec8                 | LR__3243
21ec8                 | LR__3244
21ec8     10 01 68 FC | 	wrlong	#0, local02
21ecc     04 20 06 F1 | 	add	local02, #4
21ed0     10 01 68 FC | 	wrlong	#0, local02
21ed4     04 20 06 F1 | 	add	local02, #4
21ed8     10 01 68 FC | 	wrlong	#0, local02
21edc     00 FA 05 F6 | 	mov	result1, #0
21ee0     A7 F0 03 F6 | 	mov	ptra, fp
21ee4     B2 00 A0 FD | 	call	#popregs_
21ee8                 | __system____default_flush_ret
21ee8     2D 00 64 FD | 	ret
21eec                 | 
21eec                 | __system____default_buffer_init
21eec     02 4A 05 F6 | 	mov	COUNT_, #2
21ef0     A8 00 A0 FD | 	call	#pushregs_
21ef4     09 1F 02 F6 | 	mov	local01, arg01
21ef8     0F 21 02 FB | 	rdlong	local02, local01
21efc     0F 13 02 F6 | 	mov	arg01, local01
21f00     F8 02 B0 FD | 	call	#__system___isatty
21f04     00 FA 0D F2 | 	cmp	result1, #0 wz
21f08     06 1E 06 51 |  if_ne	add	local01, #6
21f0c     0F 0B 58 5C |  if_ne	wrword	#5, local01
21f10     06 1E 06 A1 |  if_e	add	local01, #6
21f14     0F 0D 58 AC |  if_e	wrword	#6, local01
21f18     14 20 06 F1 | 	add	local02, #20
21f1c     10 1F 02 F6 | 	mov	local01, local02
21f20     04 20 86 F1 | 	sub	local02, #4
21f24     10 1F 62 FC | 	wrlong	local01, local02
21f28     04 20 86 F1 | 	sub	local02, #4
21f2c     02 00 80 FF 
21f30     10 01 68 FC | 	wrlong	##1024, local02
21f34     00 FA 05 F6 | 	mov	result1, #0
21f38     A7 F0 03 F6 | 	mov	ptra, fp
21f3c     B2 00 A0 FD | 	call	#popregs_
21f40                 | __system____default_buffer_init_ret
21f40     2D 00 64 FD | 	ret
21f44                 | 
21f44                 | __system__stat
21f44     04 4A 05 F6 | 	mov	COUNT_, #4
21f48     A8 00 A0 FD | 	call	#pushregs_
21f4c     0A 1F 02 F6 | 	mov	local01, arg02
21f50     84 E7 05 F1 | 	add	ptr___system__dat__, #388
21f54     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
21f58     09 15 02 F6 | 	mov	arg02, arg01
21f5c     10 13 02 F6 | 	mov	arg01, local02
21f60     00 16 06 F6 | 	mov	arg03, #0
21f64     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
21f68     B0 B8 BF FD | 	call	#__system____getvfsforfile
21f6c     FD 22 0A F6 | 	mov	local03, result1 wz
21f70     10 00 90 AD |  if_e	jmp	#LR__3250
21f74     34 22 06 F1 | 	add	local03, #52
21f78     11 17 0A FB | 	rdlong	arg03, local03 wz
21f7c     34 22 86 F1 | 	sub	local03, #52
21f80     14 00 90 5D |  if_ne	jmp	#LR__3251
21f84                 | LR__3250
21f84     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21f88     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
21f8c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21f90     01 FA 65 F6 | 	neg	result1, #1
21f94     68 00 90 FD | 	jmp	#LR__3252
21f98                 | LR__3251
21f98     0F 13 02 F6 | 	mov	arg01, local01
21f9c     00 14 06 F6 | 	mov	arg02, #0
21fa0     30 16 06 F6 | 	mov	arg03, #48
21fa4     09 25 02 F6 | 	mov	local04, arg01
21fa8     98 00 A0 FD | 	call	#\builtin_bytefill_
21fac     12 FB 01 F6 | 	mov	result1, local04
21fb0     10 13 CA FA | 	rdbyte	arg01, local02 wz
21fb4     08 1E 06 A1 |  if_e	add	local01, #8
21fb8     08 00 80 AF 
21fbc     0F FF 6B AC |  if_e	wrlong	##4607, local01
21fc0     00 FA 05 A6 |  if_e	mov	result1, #0
21fc4     38 00 90 AD |  if_e	jmp	#LR__3252
21fc8     34 22 06 F1 | 	add	local03, #52
21fcc     11 23 02 FB | 	rdlong	local03, local03
21fd0     11 25 02 F6 | 	mov	local04, local03
21fd4     13 22 46 F7 | 	zerox	local03, #19
21fd8     14 24 46 F0 | 	shr	local04, #20
21fdc     02 24 66 F0 | 	shl	local04, #2
21fe0     ED 24 02 F1 | 	add	local04, __methods__
21fe4     12 25 02 FB | 	rdlong	local04, local04
21fe8     10 13 02 F6 | 	mov	arg01, local02
21fec     0F 15 02 F6 | 	mov	arg02, local01
21ff0     F2 20 02 F6 | 	mov	local02, objptr
21ff4     11 E5 01 F6 | 	mov	objptr, local03
21ff8     2D 24 62 FD | 	call	local04
21ffc     10 E5 01 F6 | 	mov	objptr, local02
22000                 | LR__3252
22000     A7 F0 03 F6 | 	mov	ptra, fp
22004     B2 00 A0 FD | 	call	#popregs_
22008                 | __system__stat_ret
22008     2D 00 64 FD | 	ret
2200c                 | 
2200c                 | __system__read
2200c     0A 12 16 F2 | 	cmp	arg01, #10 wc
22010     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
22014     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
22018     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2201c     01 FA 65 36 |  if_ae	neg	result1, #1
22020     20 00 90 3D |  if_ae	jmp	#LR__3260
22024     34 12 06 FD | 	qmul	arg01, #52
22028     02 00 00 FF 
2202c     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
22030     18 12 62 FD | 	getqx	arg01
22034     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
22038     02 00 00 FF 
2203c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
22040     CC 0F B0 FD | 	call	#__system___vfsread
22044                 | LR__3260
22044                 | __system__read_ret
22044     2D 00 64 FD | 	ret
22048                 | 
22048                 | __system__close
22048     0A 12 16 F2 | 	cmp	arg01, #10 wc
2204c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
22050     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
22054     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
22058     01 FA 65 36 |  if_ae	neg	result1, #1
2205c     20 00 90 3D |  if_ae	jmp	#LR__3270
22060     34 12 06 FD | 	qmul	arg01, #52
22064     02 00 00 FF 
22068     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
2206c     18 12 62 FD | 	getqx	arg01
22070     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
22074     02 00 00 FF 
22078     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
2207c     4C F9 BF FD | 	call	#__system___closeraw
22080                 | LR__3270
22080                 | __system__close_ret
22080     2D 00 64 FD | 	ret
22084                 | 
22084                 | __system__lseek
22084     06 4A 05 F6 | 	mov	COUNT_, #6
22088     A8 00 A0 FD | 	call	#pushregs_
2208c     0A 12 16 F2 | 	cmp	arg01, #10 wc
22090     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
22094     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
22098     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2209c     01 FA 65 36 |  if_ae	neg	result1, #1
220a0     C4 00 90 3D |  if_ae	jmp	#LR__3281
220a4     34 12 06 FD | 	qmul	arg01, #52
220a8     02 00 00 FF 
220ac     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
220b0     18 1E 62 FD | 	getqx	local01
220b4     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
220b8     30 1E 06 F1 | 	add	local01, #48
220bc     0F 13 0A FB | 	rdlong	arg01, local01 wz
220c0     30 1E 86 F1 | 	sub	local01, #48
220c4     02 00 00 FF 
220c8     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
220cc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
220d0     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
220d4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
220d8     01 FA 65 A6 |  if_e	neg	result1, #1
220dc     88 00 90 AD |  if_e	jmp	#LR__3281
220e0     08 1E 06 F1 | 	add	local01, #8
220e4     0F 21 02 FB | 	rdlong	local02, local01
220e8     08 1E 86 F1 | 	sub	local01, #8
220ec     40 20 CE F7 | 	test	local02, #64 wz
220f0     08 1E 06 51 |  if_ne	add	local01, #8
220f4     0F 21 02 5B |  if_ne	rdlong	local02, local01
220f8     80 20 46 55 |  if_ne	or	local02, #128
220fc     0F 21 62 5C |  if_ne	wrlong	local02, local01
22100     08 1E 86 51 |  if_ne	sub	local01, #8
22104     30 1E 06 F1 | 	add	local01, #48
22108     0F 23 02 FB | 	rdlong	local03, local01
2210c     11 25 02 F6 | 	mov	local04, local03
22110     30 1E 86 F1 | 	sub	local01, #48
22114     13 24 46 F7 | 	zerox	local04, #19
22118     14 22 46 F0 | 	shr	local03, #20
2211c     02 22 66 F0 | 	shl	local03, #2
22120     ED 22 02 F1 | 	add	local03, __methods__
22124     11 23 02 FB | 	rdlong	local03, local03
22128     0F 13 02 F6 | 	mov	arg01, local01
2212c     F2 26 02 F6 | 	mov	local05, objptr
22130     12 E5 01 F6 | 	mov	objptr, local04
22134     2D 22 62 FD | 	call	local03
22138     13 E5 01 F6 | 	mov	objptr, local05
2213c     FD 28 02 F6 | 	mov	local06, result1
22140     00 28 56 F2 | 	cmps	local06, #0 wc
22144     1C 00 90 3D |  if_ae	jmp	#LR__3280
22148     14 13 6A F6 | 	neg	arg01, local06 wz
2214c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22150     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
22154     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22158     01 FA 65 56 |  if_ne	neg	result1, #1
2215c     00 FA 05 A6 |  if_e	mov	result1, #0
22160     04 00 90 FD | 	jmp	#LR__3281
22164                 | LR__3280
22164     14 FB 01 F6 | 	mov	result1, local06
22168                 | LR__3281
22168     A7 F0 03 F6 | 	mov	ptra, fp
2216c     B2 00 A0 FD | 	call	#popregs_
22170                 | __system__lseek_ret
22170     2D 00 64 FD | 	ret
22174                 | 
22174                 | __system___ioctl
22174     03 4A 05 F6 | 	mov	COUNT_, #3
22178     A8 00 A0 FD | 	call	#pushregs_
2217c     00 12 4E F2 | 	cmps	arg01, #0 wz
22180     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
22184     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
22188     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2218c     01 FA 65 A6 |  if_e	neg	result1, #1
22190     5C 00 90 AD |  if_e	jmp	#LR__3291
22194     28 12 06 F1 | 	add	arg01, #40
22198     09 1F 02 FB | 	rdlong	local01, arg01
2219c     0F 21 02 F6 | 	mov	local02, local01
221a0     28 12 86 F1 | 	sub	arg01, #40
221a4     13 20 46 F7 | 	zerox	local02, #19
221a8     14 1E 46 F0 | 	shr	local01, #20
221ac     02 1E 66 F0 | 	shl	local01, #2
221b0     ED 1E 02 F1 | 	add	local01, __methods__
221b4     0F 1F 02 FB | 	rdlong	local01, local01
221b8     F2 22 02 F6 | 	mov	local03, objptr
221bc     10 E5 01 F6 | 	mov	objptr, local02
221c0     2D 1E 62 FD | 	call	local01
221c4     11 E5 01 F6 | 	mov	objptr, local03
221c8     FD 12 0A F6 | 	mov	arg01, result1 wz
221cc     1C 00 90 AD |  if_e	jmp	#LR__3290
221d0     00 12 4E F2 | 	cmps	arg01, #0 wz
221d4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
221d8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
221dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
221e0     01 FA 65 56 |  if_ne	neg	result1, #1
221e4     00 FA 05 A6 |  if_e	mov	result1, #0
221e8     04 00 90 FD | 	jmp	#LR__3291
221ec                 | LR__3290
221ec     00 FA 05 F6 | 	mov	result1, #0
221f0                 | LR__3291
221f0     A7 F0 03 F6 | 	mov	ptra, fp
221f4     B2 00 A0 FD | 	call	#popregs_
221f8                 | __system___ioctl_ret
221f8     2D 00 64 FD | 	ret
221fc                 | 
221fc                 | __system___isatty
221fc     00 4A 05 F6 | 	mov	COUNT_, #0
22200     A8 00 A0 FD | 	call	#pushregs_
22204     0C F0 07 F1 | 	add	ptra, #12
22208     04 4E 05 F1 | 	add	fp, #4
2220c     A7 12 62 FC | 	wrlong	arg01, fp
22210     04 4E 05 F1 | 	add	fp, #4
22214     A7 16 02 F6 | 	mov	arg03, fp
22218     08 4E 85 F1 | 	sub	fp, #8
2221c     00 15 06 F6 | 	mov	arg02, #256
22220     50 FF BF FD | 	call	#__system___ioctl
22224     00 FA 0D F2 | 	cmp	result1, #0 wz
22228     01 FA 05 A6 |  if_e	mov	result1, #1
2222c     00 FA 05 56 |  if_ne	mov	result1, #0
22230     A7 F0 03 F6 | 	mov	ptra, fp
22234     B2 00 A0 FD | 	call	#popregs_
22238                 | __system___isatty_ret
22238     2D 00 64 FD | 	ret
2223c                 | 
2223c                 | __system____getftab
2223c     0A 12 16 F2 | 	cmp	arg01, #10 wc
22240     34 12 06 CD |  if_b	qmul	arg01, #52
22244     00 FA 05 36 |  if_ae	mov	result1, #0
22248     02 00 00 CF 
2224c     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
22250     18 FA 61 CD |  if_b	getqx	result1
22254     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
22258     02 00 00 CF 
2225c     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
22260                 | __system____getftab_ret
22260     2D 00 64 FD | 	ret
22264                 | 
22264                 | __system__strncpy
22264     09 01 02 F6 | 	mov	_var01, arg01
22268                 | LR__3300
22268     01 16 86 F1 | 	sub	arg03, #1
2226c     00 16 56 F2 | 	cmps	arg03, #0 wc
22270     18 00 90 CD |  if_b	jmp	#LR__3301
22274     0A FB C1 FA | 	rdbyte	result1, arg02
22278     00 FB 41 FC | 	wrbyte	result1, _var01
2227c     01 14 06 F1 | 	add	arg02, #1
22280     00 FB C9 FA | 	rdbyte	result1, _var01 wz
22284     01 00 06 F1 | 	add	_var01, #1
22288     DC FF 9F 5D |  if_ne	jmp	#LR__3300
2228c                 | LR__3301
2228c     97 0C 48 FB | 	callpa	#(@LR__3303-@LR__3302)>>2,fcache_load_ptr_
22290                 | LR__3302
22290     01 16 86 F1 | 	sub	arg03, #1
22294     00 16 56 F2 | 	cmps	arg03, #0 wc
22298     00 03 02 36 |  if_ae	mov	_var02, _var01
2229c     01 00 06 31 |  if_ae	add	_var01, #1
222a0     01 01 48 3C |  if_ae	wrbyte	#0, _var02
222a4     E8 FF 9F 3D |  if_ae	jmp	#LR__3302
222a8                 | LR__3303
222a8     09 FB 01 F6 | 	mov	result1, arg01
222ac                 | __system__strncpy_ret
222ac     2D 00 64 FD | 	ret
222b0                 | 
222b0                 | __system__strncat
222b0     00 14 4E F2 | 	cmps	arg02, #0 wz
222b4     50 00 90 AD |  if_e	jmp	#LR__3314
222b8     01 16 16 F2 | 	cmp	arg03, #1 wc
222bc     48 00 90 CD |  if_b	jmp	#LR__3314
222c0     09 01 02 F6 | 	mov	_var01, arg01
222c4     97 1E 48 FB | 	callpa	#(@LR__3312-@LR__3310)>>2,fcache_load_ptr_
222c8                 | LR__3310
222c8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
222cc     01 00 06 51 |  if_ne	add	_var01, #1
222d0     F4 FF 9F 5D |  if_ne	jmp	#LR__3310
222d4     0B 03 02 F6 | 	mov	_var02, arg03
222d8                 | LR__3311
222d8     0A 05 C2 FA | 	rdbyte	_var03, arg02
222dc     02 07 02 F6 | 	mov	_var04, _var03
222e0     07 06 4E F7 | 	zerox	_var04, #7 wz
222e4     01 14 06 F1 | 	add	arg02, #1
222e8     18 00 90 AD |  if_e	jmp	#LR__3313
222ec     01 02 86 F1 | 	sub	_var02, #1
222f0     00 02 56 F2 | 	cmps	_var02, #0 wc
222f4     00 07 02 36 |  if_ae	mov	_var04, _var01
222f8     01 00 06 31 |  if_ae	add	_var01, #1
222fc     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
22300     D4 FF 9F 3D |  if_ae	jmp	#LR__3311
22304                 | LR__3312
22304                 | LR__3313
22304     00 01 48 FC | 	wrbyte	#0, _var01
22308                 | LR__3314
22308     09 FB 01 F6 | 	mov	result1, arg01
2230c                 | __system__strncat_ret
2230c     2D 00 64 FD | 	ret
22310                 | 
22310                 | __system__strncmp
22310     09 01 0A F6 | 	mov	_var01, arg01 wz
22314     14 00 90 5D |  if_ne	jmp	#LR__3320
22318     00 14 0E F2 | 	cmp	arg02, #0 wz
2231c     01 02 66 56 |  if_ne	neg	_var02, #1
22320     00 02 06 A6 |  if_e	mov	_var02, #0
22324     01 FB 01 F6 | 	mov	result1, _var02
22328     74 00 90 FD | 	jmp	#__system__strncmp_ret
2232c                 | LR__3320
2232c     00 14 0E F2 | 	cmp	arg02, #0 wz
22330     01 FA 05 A6 |  if_e	mov	result1, #1
22334     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
22338     0B 05 02 F6 | 	mov	_var03, arg03
2233c     97 16 48 FB | 	callpa	#(@LR__3322-@LR__3321)>>2,fcache_load_ptr_
22340                 | LR__3321
22340     00 07 C2 FA | 	rdbyte	_var04, _var01
22344     0A 09 02 F6 | 	mov	_var05, arg02
22348     04 0B C2 FA | 	rdbyte	_var06, _var05
2234c     01 04 86 F1 | 	sub	_var03, #1
22350     00 04 56 F2 | 	cmps	_var03, #0 wc
22354     01 00 06 F1 | 	add	_var01, #1
22358     01 14 06 F1 | 	add	arg02, #1
2235c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
22360     08 00 90 2D |  if_nc_and_z	jmp	#LR__3323
22364     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
22368     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3321
2236c                 | LR__3322
2236c                 | LR__3323
2236c     00 04 56 F2 | 	cmps	_var03, #0 wc
22370     00 FA 05 C6 |  if_b	mov	result1, #0
22374     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
22378     05 07 0A F2 | 	cmp	_var04, _var06 wz
2237c     00 FA 05 A6 |  if_e	mov	result1, #0
22380     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
22384     00 06 0E F2 | 	cmp	_var04, #0 wz
22388     01 FA 65 A6 |  if_e	neg	result1, #1
2238c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
22390     00 0A 0E F2 | 	cmp	_var06, #0 wz
22394     01 FA 05 A6 |  if_e	mov	result1, #1
22398     03 FB 01 56 |  if_ne	mov	result1, _var04
2239c     05 FB 81 51 |  if_ne	sub	result1, _var06
223a0                 | __system__strncmp_ret
223a0     2D 00 64 FD | 	ret
223a4                 | 
223a4                 | __system____root_opendir
223a4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
223a8     04 12 06 F1 | 	add	arg01, #4
223ac     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
223b0     00 FA 05 F6 | 	mov	result1, #0
223b4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
223b8                 | __system____root_opendir_ret
223b8     2D 00 64 FD | 	ret
223bc                 | 
223bc                 | __system____root_readdir
223bc     03 4A 05 F6 | 	mov	COUNT_, #3
223c0     A8 00 A0 FD | 	call	#pushregs_
223c4     09 1F 02 F6 | 	mov	local01, arg01
223c8     0A 21 02 F6 | 	mov	local02, arg02
223cc     04 1E 06 F1 | 	add	local01, #4
223d0     0F 23 02 FB | 	rdlong	local03, local01
223d4     04 1E 86 F1 | 	sub	local01, #4
223d8                 | LR__3330
223d8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
223dc     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
223e0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
223e4     01 FA 65 A6 |  if_e	neg	result1, #1
223e8     48 00 90 AD |  if_e	jmp	#LR__3331
223ec     11 17 0A FB | 	rdlong	arg03, local03 wz
223f0     04 22 06 A1 |  if_e	add	local03, #4
223f4     E0 FF 9F AD |  if_e	jmp	#LR__3330
223f8     11 15 02 FB | 	rdlong	arg02, local03
223fc     01 14 06 F1 | 	add	arg02, #1
22400     10 13 02 F6 | 	mov	arg01, local02
22404     40 16 06 F6 | 	mov	arg03, #64
22408     58 FE BF FD | 	call	#__system__strncpy
2240c     50 20 06 F1 | 	add	local02, #80
22410     10 03 48 FC | 	wrbyte	#1, local02
22414     08 20 86 F1 | 	sub	local02, #8
22418     10 01 68 FC | 	wrlong	#0, local02
2241c     04 20 06 F1 | 	add	local02, #4
22420     10 01 68 FC | 	wrlong	#0, local02
22424     04 22 06 F1 | 	add	local03, #4
22428     04 1E 06 F1 | 	add	local01, #4
2242c     0F 23 62 FC | 	wrlong	local03, local01
22430     00 FA 05 F6 | 	mov	result1, #0
22434                 | LR__3331
22434     A7 F0 03 F6 | 	mov	ptra, fp
22438     B2 00 A0 FD | 	call	#popregs_
2243c                 | __system____root_readdir_ret
2243c     2D 00 64 FD | 	ret
22440                 | 
22440                 | __system____root_closedir
22440     00 FA 05 F6 | 	mov	result1, #0
22444                 | __system____root_closedir_ret
22444     2D 00 64 FD | 	ret
22448                 | 
22448                 | __system____root_stat
22448     0A 01 02 F6 | 	mov	_var01, arg02
2244c     00 13 02 F6 | 	mov	arg01, _var01
22450     00 14 06 F6 | 	mov	arg02, #0
22454     30 16 06 F6 | 	mov	arg03, #48
22458     98 00 A0 FD | 	call	#\builtin_bytefill_
2245c     08 00 06 F1 | 	add	_var01, #8
22460     08 00 80 FF 
22464     00 FF 6B FC | 	wrlong	##4607, _var01
22468     00 FA 05 F6 | 	mov	result1, #0
2246c                 | __system____root_stat_ret
2246c     2D 00 64 FD | 	ret
22470                 | 
22470                 | __system___normalizeName
22470     00 00 06 F6 | 	mov	_var01, #0
22474     09 03 02 F6 | 	mov	_var02, arg01
22478     01 05 02 F6 | 	mov	_var03, _var02
2247c                 | LR__3340
2247c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
22480     5C 01 90 AD |  if_e	jmp	#LR__3359
22484     00 00 0E F2 | 	cmp	_var01, #0 wz
22488     02 07 02 56 |  if_ne	mov	_var04, _var03
2248c     01 04 06 51 |  if_ne	add	_var03, #1
22490     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
22494     00 00 06 56 |  if_ne	mov	_var01, #0
22498     01 07 C2 FA | 	rdbyte	_var04, _var02
2249c     2E 06 0E F2 | 	cmp	_var04, #46 wz
224a0     D8 00 90 5D |  if_ne	jmp	#LR__3352
224a4     01 02 06 F1 | 	add	_var02, #1
224a8     01 07 C2 FA | 	rdbyte	_var04, _var02
224ac     01 02 86 F1 | 	sub	_var02, #1
224b0     2F 06 0E F2 | 	cmp	_var04, #47 wz
224b4     18 00 90 AD |  if_e	jmp	#LR__3341
224b8     01 02 06 F1 | 	add	_var02, #1
224bc     01 09 C2 FA | 	rdbyte	_var05, _var02
224c0     01 02 86 F1 | 	sub	_var02, #1
224c4     04 0B 02 F6 | 	mov	_var06, _var05
224c8     07 0A 4E F7 | 	zerox	_var06, #7 wz
224cc     10 00 90 5D |  if_ne	jmp	#LR__3342
224d0                 | LR__3341
224d0     01 0D 02 F6 | 	mov	_var07, _var02
224d4     01 0C 06 F1 | 	add	_var07, #1
224d8     06 03 02 F6 | 	mov	_var02, _var07
224dc     E0 00 90 FD | 	jmp	#LR__3356
224e0                 | LR__3342
224e0     01 02 06 F1 | 	add	_var02, #1
224e4     01 0D C2 FA | 	rdbyte	_var07, _var02
224e8     01 02 86 F1 | 	sub	_var02, #1
224ec     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
224f0     2E 06 0E F2 | 	cmp	_var04, #46 wz
224f4     84 00 90 5D |  if_ne	jmp	#LR__3351
224f8     02 02 06 F1 | 	add	_var02, #2
224fc     01 0D C2 FA | 	rdbyte	_var07, _var02
22500     02 02 86 F1 | 	sub	_var02, #2
22504     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
22508     2F 06 0E F2 | 	cmp	_var04, #47 wz
2250c     18 00 90 AD |  if_e	jmp	#LR__3343
22510     02 02 06 F1 | 	add	_var02, #2
22514     01 09 C2 FA | 	rdbyte	_var05, _var02
22518     02 02 86 F1 | 	sub	_var02, #2
2251c     04 0B 02 F6 | 	mov	_var06, _var05
22520     07 0A 4E F7 | 	zerox	_var06, #7 wz
22524     54 00 90 5D |  if_ne	jmp	#LR__3350
22528                 | LR__3343
22528     02 02 06 F1 | 	add	_var02, #2
2252c     09 05 5A F2 | 	cmps	_var03, arg01 wcz
22530     40 00 90 ED |  if_be	jmp	#LR__3349
22534     02 0F 02 F6 | 	mov	_var08, _var03
22538     01 0E 86 F1 | 	sub	_var08, #1
2253c                 | LR__3344
2253c     07 07 C2 FA | 	rdbyte	_var04, _var08
22540     2F 06 0E F2 | 	cmp	_var04, #47 wz
22544     0C 00 90 5D |  if_ne	jmp	#LR__3345
22548     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2254c     01 0E 86 11 |  if_a	sub	_var08, #1
22550     E8 FF 9F 1D |  if_a	jmp	#LR__3344
22554                 | LR__3345
22554     97 0C 48 FB | 	callpa	#(@LR__3347-@LR__3346)>>2,fcache_load_ptr_
22558                 | LR__3346
22558     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2255c     10 00 90 ED |  if_be	jmp	#LR__3348
22560     07 07 C2 FA | 	rdbyte	_var04, _var08
22564     2F 06 0E F2 | 	cmp	_var04, #47 wz
22568     01 0E 86 51 |  if_ne	sub	_var08, #1
2256c     E8 FF 9F 5D |  if_ne	jmp	#LR__3346
22570                 | LR__3347
22570                 | LR__3348
22570     07 05 02 F6 | 	mov	_var03, _var08
22574                 | LR__3349
22574     01 00 06 F6 | 	mov	_var01, #1
22578     44 00 90 FD | 	jmp	#LR__3356
2257c                 | LR__3350
2257c                 | LR__3351
2257c                 | LR__3352
2257c     97 18 48 FB | 	callpa	#(@LR__3354-@LR__3353)>>2,fcache_load_ptr_
22580                 | LR__3353
22580     01 07 CA FA | 	rdbyte	_var04, _var02 wz
22584     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
22588     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2258c     20 00 90 AD |  if_e	jmp	#LR__3355
22590     01 0B 02 F6 | 	mov	_var06, _var02
22594     01 09 02 F6 | 	mov	_var05, _var02
22598     01 08 06 F1 | 	add	_var05, #1
2259c     05 11 C2 FA | 	rdbyte	_var09, _var06
225a0     04 03 02 F6 | 	mov	_var02, _var05
225a4     02 11 42 FC | 	wrbyte	_var09, _var03
225a8     01 04 06 F1 | 	add	_var03, #1
225ac     D0 FF 9F FD | 	jmp	#LR__3353
225b0                 | LR__3354
225b0                 | LR__3355
225b0     01 07 C2 FA | 	rdbyte	_var04, _var02
225b4     2F 06 0E F2 | 	cmp	_var04, #47 wz
225b8     C0 FE 9F 5D |  if_ne	jmp	#LR__3340
225bc     01 00 06 F6 | 	mov	_var01, #1
225c0                 | LR__3356
225c0     97 0C 48 FB | 	callpa	#(@LR__3358-@LR__3357)>>2,fcache_load_ptr_
225c4                 | LR__3357
225c4     01 07 C2 FA | 	rdbyte	_var04, _var02
225c8     2F 06 0E F2 | 	cmp	_var04, #47 wz
225cc     01 0D 02 A6 |  if_e	mov	_var07, _var02
225d0     01 0C 06 A1 |  if_e	add	_var07, #1
225d4     06 03 02 A6 |  if_e	mov	_var02, _var07
225d8     E8 FF 9F AD |  if_e	jmp	#LR__3357
225dc                 | LR__3358
225dc     9C FE 9F FD | 	jmp	#LR__3340
225e0                 | LR__3359
225e0     02 01 48 FC | 	wrbyte	#0, _var03
225e4                 | __system___normalizeName_ret
225e4     2D 00 64 FD | 	ret
225e8                 | 
225e8                 | __system___strrev
225e8     09 01 CA FA | 	rdbyte	_var01, arg01 wz
225ec     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
225f0     09 03 02 F6 | 	mov	_var02, arg01
225f4     97 1A 48 FB | 	callpa	#(@LR__3362-@LR__3360)>>2,fcache_load_ptr_
225f8                 | LR__3360
225f8     01 01 CA FA | 	rdbyte	_var01, _var02 wz
225fc     01 02 06 51 |  if_ne	add	_var02, #1
22600     F4 FF 9F 5D |  if_ne	jmp	#LR__3360
22604     01 02 86 F1 | 	sub	_var02, #1
22608                 | LR__3361
22608     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2260c     1C 00 90 ED |  if_be	jmp	#LR__3363
22610     09 01 C2 FA | 	rdbyte	_var01, arg01
22614     01 05 C2 FA | 	rdbyte	_var03, _var02
22618     09 05 42 FC | 	wrbyte	_var03, arg01
2261c     01 01 42 FC | 	wrbyte	_var01, _var02
22620     01 12 06 F1 | 	add	arg01, #1
22624     01 02 86 F1 | 	sub	_var02, #1
22628     DC FF 9F FD | 	jmp	#LR__3361
2262c                 | LR__3362
2262c                 | LR__3363
2262c                 | __system___strrev_ret
2262c     2D 00 64 FD | 	ret
22630                 | 
22630                 | __system___fmtpad
22630     06 4A 05 F6 | 	mov	COUNT_, #6
22634     A8 00 A0 FD | 	call	#pushregs_
22638     09 1F 02 F6 | 	mov	local01, arg01
2263c     0A 21 02 F6 | 	mov	local02, arg02
22640     0B 23 02 F6 | 	mov	local03, arg03
22644     10 13 EA F8 | 	getbyte	arg01, local02, #1
22648     16 20 46 F0 | 	shr	local02, #22
2264c     03 20 0E F5 | 	and	local02, #3 wz
22650     00 24 06 F6 | 	mov	local04, #0
22654     01 20 06 A6 |  if_e	mov	local02, #1
22658     0C 21 CA F7 | 	test	local02, arg04 wz
2265c     00 FA 05 A6 |  if_e	mov	result1, #0
22660     88 00 90 AD |  if_e	jmp	#LR__3373
22664     09 23 C2 F2 | 	subr	local03, arg01
22668     01 22 56 F2 | 	cmps	local03, #1 wc
2266c     00 FA 05 C6 |  if_b	mov	result1, #0
22670     78 00 90 CD |  if_b	jmp	#LR__3373
22674     03 20 0E F2 | 	cmp	local02, #3 wz
22678     18 00 90 5D |  if_ne	jmp	#LR__3370
2267c     01 18 0E F2 | 	cmp	arg04, #1 wz
22680     6E 20 62 FD | 	wrz	local02
22684     10 23 02 F1 | 	add	local03, local02
22688     11 23 52 F6 | 	abs	local03, local03 wc
2268c     01 22 46 F0 | 	shr	local03, #1
22690     11 23 82 F6 | 	negc	local03, local03
22694                 | LR__3370
22694     01 22 56 F2 | 	cmps	local03, #1 wc
22698     4C 00 90 CD |  if_b	jmp	#LR__3372
2269c     11 27 02 F6 | 	mov	local05, local03
226a0                 | LR__3371
226a0     0F 21 02 F6 | 	mov	local02, local01
226a4     0F 29 02 F6 | 	mov	local06, local01
226a8     13 20 46 F7 | 	zerox	local02, #19
226ac     14 28 46 F0 | 	shr	local06, #20
226b0     02 28 66 F0 | 	shl	local06, #2
226b4     ED 28 02 F1 | 	add	local06, __methods__
226b8     14 29 02 FB | 	rdlong	local06, local06
226bc     20 12 06 F6 | 	mov	arg01, #32
226c0     F2 22 02 F6 | 	mov	local03, objptr
226c4     10 E5 01 F6 | 	mov	objptr, local02
226c8     2D 28 62 FD | 	call	local06
226cc     11 E5 01 F6 | 	mov	objptr, local03
226d0     FD 28 02 F6 | 	mov	local06, result1
226d4     00 28 56 F2 | 	cmps	local06, #0 wc
226d8     14 FB 01 C6 |  if_b	mov	result1, local06
226dc     0C 00 90 CD |  if_b	jmp	#LR__3373
226e0     14 25 02 F1 | 	add	local04, local06
226e4     EE 27 6E FB | 	djnz	local05, #LR__3371
226e8                 | LR__3372
226e8     12 FB 01 F6 | 	mov	result1, local04
226ec                 | LR__3373
226ec     A7 F0 03 F6 | 	mov	ptra, fp
226f0     B2 00 A0 FD | 	call	#popregs_
226f4                 | __system___fmtpad_ret
226f4     2D 00 64 FD | 	ret
226f8                 | 
226f8                 | __system___uitoa
226f8     04 4A 05 F6 | 	mov	COUNT_, #4
226fc     A8 00 A0 FD | 	call	#pushregs_
22700     09 1F 02 F6 | 	mov	local01, arg01
22704     00 1A 4E F2 | 	cmps	arg05, #0 wz
22708     0F 1B 02 F6 | 	mov	arg05, local01
2270c     00 20 06 F6 | 	mov	local02, #0
22710     37 22 06 56 |  if_ne	mov	local03, #55
22714     57 22 06 A6 |  if_e	mov	local03, #87
22718                 | LR__3380
22718     0B 15 12 FD | 	qdiv	arg02, arg03
2271c     19 24 62 FD | 	getqy	local04
22720     0B 15 12 FD | 	qdiv	arg02, arg03
22724     0A 24 16 F2 | 	cmp	local04, #10 wc
22728     30 24 06 C1 |  if_b	add	local04, #48
2272c     11 25 02 31 |  if_ae	add	local04, local03
22730     0D 25 42 FC | 	wrbyte	local04, arg05
22734     01 1A 06 F1 | 	add	arg05, #1
22738     01 20 06 F1 | 	add	local02, #1
2273c     18 14 62 FD | 	getqx	arg02
22740     00 14 0E F2 | 	cmp	arg02, #0 wz
22744     D0 FF 9F 5D |  if_ne	jmp	#LR__3380
22748     0C 21 12 F2 | 	cmp	local02, arg04 wc
2274c     C8 FF 9F CD |  if_b	jmp	#LR__3380
22750     0D 01 48 FC | 	wrbyte	#0, arg05
22754     0F 13 02 F6 | 	mov	arg01, local01
22758     8C FE BF FD | 	call	#__system___strrev
2275c     10 FB 01 F6 | 	mov	result1, local02
22760     A7 F0 03 F6 | 	mov	ptra, fp
22764     B2 00 A0 FD | 	call	#popregs_
22768                 | __system___uitoa_ret
22768     2D 00 64 FD | 	ret
2276c                 | 
2276c                 | __system__disassemble_0432
2276c     10 4A 05 F6 | 	mov	COUNT_, #16
22770     A8 00 A0 FD | 	call	#pushregs_
22774     09 1F 02 F6 | 	mov	local01, arg01
22778     0A 21 02 F6 | 	mov	local02, arg02
2277c     0B 23 02 F6 | 	mov	local03, arg03
22780     0C 25 02 F6 | 	mov	local04, arg04
22784     0D 27 02 F6 | 	mov	local05, arg05
22788     13 13 52 F6 | 	abs	arg01, local05 wc
2278c     1F 28 C6 C9 |  if_b	decod	local06, #31
22790     00 28 06 36 |  if_ae	mov	local06, #0
22794     64 D0 BF FD | 	call	#__system___float_fromuns
22798     14 FB 61 F5 | 	xor	result1, local06
2279c     FD 2A 02 F6 | 	mov	local07, result1
227a0     00 2C 06 F6 | 	mov	local08, #0
227a4     0F 13 02 F6 | 	mov	arg01, local01
227a8     00 14 06 F6 | 	mov	arg02, #0
227ac     01 16 06 F6 | 	mov	arg03, #1
227b0     80 D8 BF FD | 	call	#__system___float_cmp
227b4     00 FA 0D F2 | 	cmp	result1, #0 wz
227b8     00 2E 06 A6 |  if_e	mov	local09, #0
227bc     10 01 68 AC |  if_e	wrlong	#0, local02
227c0     11 2F 62 AC |  if_e	wrlong	local09, local03
227c4     8C 01 90 AD |  if_e	jmp	#LR__3402
227c8     0F 13 02 F6 | 	mov	arg01, local01
227cc     30 DD BF FD | 	call	#__system____builtin_ilogb
227d0     FD 30 02 F6 | 	mov	local10, result1
227d4     0A 26 0E F2 | 	cmp	local05, #10 wz
227d8     24 00 90 5D |  if_ne	jmp	#LR__3390
227dc     18 2F 02 F6 | 	mov	local09, local10
227e0     01 2E 66 F0 | 	shl	local09, #1
227e4     18 2F 02 F1 | 	add	local09, local10
227e8     17 31 52 F6 | 	abs	local10, local09 wc
227ec     0A 30 16 FD | 	qdiv	local10, #10
227f0     09 32 06 F6 | 	mov	local11, #9
227f4     18 30 62 FD | 	getqx	local10
227f8     18 31 82 F6 | 	negc	local10, local10
227fc     04 00 90 FD | 	jmp	#LR__3391
22800                 | LR__3390
22800     18 32 06 F6 | 	mov	local11, #24
22804                 | LR__3391
22804                 | LR__3392
22804     08 2C 56 F2 | 	cmps	local08, #8 wc
22808     01 2C 06 F1 | 	add	local08, #1
2280c     60 00 90 3D |  if_ae	jmp	#LR__3393
22810     00 C0 1F FF 
22814     00 12 06 F6 | 	mov	arg01, ##1065353216
22818     15 15 02 F6 | 	mov	arg02, local07
2281c     18 17 02 F6 | 	mov	arg03, local10
22820     88 E3 BF FD | 	call	#__system___float_pow_n
22824     FD 14 02 F6 | 	mov	arg02, result1
22828     0F 13 02 F6 | 	mov	arg01, local01
2282c     D4 D5 BF FD | 	call	#__system___float_div
22830     FD 34 02 F6 | 	mov	local12, result1
22834     1A 13 02 F6 | 	mov	arg01, local12
22838     00 C0 1F FF 
2283c     00 14 06 F6 | 	mov	arg02, ##1065353216
22840     01 16 06 F6 | 	mov	arg03, #1
22844     EC D7 BF FD | 	call	#__system___float_cmp
22848     00 FA 55 F2 | 	cmps	result1, #0 wc
2284c     01 30 86 C1 |  if_b	sub	local10, #1
22850     B0 FF 9F CD |  if_b	jmp	#LR__3392
22854     15 15 02 F6 | 	mov	arg02, local07
22858     1A 13 02 F6 | 	mov	arg01, local12
2285c     01 16 66 F6 | 	neg	arg03, #1
22860     D0 D7 BF FD | 	call	#__system___float_cmp
22864     00 FA 55 F2 | 	cmps	result1, #0 wc
22868     01 30 06 31 |  if_ae	add	local10, #1
2286c     94 FF 9F 3D |  if_ae	jmp	#LR__3392
22870                 | LR__3393
22870     1A 13 02 F6 | 	mov	arg01, local12
22874     88 DC BF FD | 	call	#__system____builtin_ilogb
22878     FD 36 02 F6 | 	mov	local13, result1
2287c     1A 39 02 F6 | 	mov	local14, local12
22880     17 39 06 F4 | 	bitl	local14, #279
22884     17 38 26 F4 | 	bith	local14, #23
22888     1B 39 62 F0 | 	shl	local14, local13
2288c     02 26 0E F2 | 	cmp	local05, #2 wz
22890     02 24 66 A0 |  if_e	shl	local04, #2
22894     00 3A 06 F6 | 	mov	local15, #0
22898     00 24 56 F2 | 	cmps	local04, #0 wc
2289c     10 00 90 3D |  if_ae	jmp	#LR__3394
228a0     18 25 C2 F2 | 	subr	local04, local10
228a4     00 24 56 F2 | 	cmps	local04, #0 wc
228a8     A0 00 90 CD |  if_b	jmp	#LR__3401
228ac     04 00 90 FD | 	jmp	#LR__3395
228b0                 | LR__3394
228b0     01 24 06 F1 | 	add	local04, #1
228b4                 | LR__3395
228b4     19 25 7A F3 | 	fles	local04, local11 wcz
228b8     01 3C 06 F6 | 	mov	local16, #1
228bc     97 22 48 FB | 	callpa	#(@LR__3397-@LR__3396)>>2,fcache_load_ptr_
228c0                 | LR__3396
228c0     00 40 00 FF 
228c4     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
228c8     38 00 90 3D |  if_ae	jmp	#LR__3398
228cc     01 24 56 F2 | 	cmps	local04, #1 wc
228d0     01 24 86 F1 | 	sub	local04, #1
228d4     2C 00 90 CD |  if_b	jmp	#LR__3398
228d8     13 3B 02 FD | 	qmul	local15, local05
228dc     1C 37 02 F6 | 	mov	local13, local14
228e0     17 36 46 F0 | 	shr	local13, #23
228e4     17 39 06 F4 | 	bitl	local14, #279
228e8     18 3A 62 FD | 	getqx	local15
228ec     13 3D 02 FD | 	qmul	local16, local05
228f0     18 3C 62 FD | 	getqx	local16
228f4     13 39 02 FD | 	qmul	local14, local05
228f8     1B 3B 02 F1 | 	add	local15, local13
228fc     18 38 62 FD | 	getqx	local14
22900     BC FF 9F FD | 	jmp	#LR__3396
22904                 | LR__3397
22904                 | LR__3398
22904     13 2F 02 F6 | 	mov	local09, local05
22908     17 2E 66 F0 | 	shl	local09, #23
2290c     17 37 52 F6 | 	abs	local13, local09 wc
22910     01 36 46 F0 | 	shr	local13, #1
22914     1B 37 82 F6 | 	negc	local13, local13
22918     1B 39 1A F2 | 	cmp	local14, local13 wcz
2291c     20 00 90 1D |  if_a	jmp	#LR__3399
22920     17 26 66 F0 | 	shl	local05, #23
22924     13 37 52 F6 | 	abs	local13, local05 wc
22928     01 36 46 F0 | 	shr	local13, #1
2292c     1B 37 82 F6 | 	negc	local13, local13
22930     1B 39 0A F2 | 	cmp	local14, local13 wz
22934     14 00 90 5D |  if_ne	jmp	#LR__3400
22938     01 3A CE F7 | 	test	local15, #1 wz
2293c     0C 00 90 AD |  if_e	jmp	#LR__3400
22940                 | LR__3399
22940     01 3A 06 F1 | 	add	local15, #1
22944     1E 3B 0A F2 | 	cmp	local15, local16 wz
22948     01 30 06 A1 |  if_e	add	local10, #1
2294c                 | LR__3400
2294c                 | LR__3401
2294c     10 3B 62 FC | 	wrlong	local15, local02
22950     11 31 62 FC | 	wrlong	local10, local03
22954                 | LR__3402
22954     A7 F0 03 F6 | 	mov	ptra, fp
22958     B2 00 A0 FD | 	call	#popregs_
2295c                 | __system__disassemble_0432_ret
2295c     2D 00 64 FD | 	ret
22960                 | 
22960                 | __system__emitsign_0434
22960     00 FA 05 F6 | 	mov	result1, #0
22964     00 14 0E F2 | 	cmp	arg02, #0 wz
22968     09 01 02 56 |  if_ne	mov	_var01, arg01
2296c     01 12 06 51 |  if_ne	add	arg01, #1
22970     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
22974     01 FA 05 56 |  if_ne	mov	result1, #1
22978     00 16 0E F2 | 	cmp	arg03, #0 wz
2297c     09 61 48 5C |  if_ne	wrbyte	#48, arg01
22980     01 12 06 51 |  if_ne	add	arg01, #1
22984     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
22988     02 FA 05 51 |  if_ne	add	result1, #2
2298c                 | __system__emitsign_0434_ret
2298c     2D 00 64 FD | 	ret
22990                 | 
22990                 | __system___gettxfunc
22990     01 4A 05 F6 | 	mov	COUNT_, #1
22994     A8 00 A0 FD | 	call	#pushregs_
22998     A0 F8 BF FD | 	call	#__system____getftab
2299c     FD 1E 0A F6 | 	mov	local01, result1 wz
229a0     10 00 90 AD |  if_e	jmp	#LR__3410
229a4     08 1E 06 F1 | 	add	local01, #8
229a8     0F 15 0A FB | 	rdlong	arg02, local01 wz
229ac     08 1E 86 F1 | 	sub	local01, #8
229b0     08 00 90 5D |  if_ne	jmp	#LR__3411
229b4                 | LR__3410
229b4     00 FA 05 F6 | 	mov	result1, #0
229b8     0C 00 90 FD | 	jmp	#LR__3412
229bc                 | LR__3411
229bc     00 D8 03 FF 
229c0     00 1E 46 F5 | 	or	local01, ##128974848
229c4     0F FB 01 F6 | 	mov	result1, local01
229c8                 | LR__3412
229c8     A7 F0 03 F6 | 	mov	ptra, fp
229cc     B2 00 A0 FD | 	call	#popregs_
229d0                 | __system___gettxfunc_ret
229d0     2D 00 64 FD | 	ret
229d4                 | 
229d4                 | __system___getrxfunc
229d4     01 4A 05 F6 | 	mov	COUNT_, #1
229d8     A8 00 A0 FD | 	call	#pushregs_
229dc     5C F8 BF FD | 	call	#__system____getftab
229e0     FD 1E 0A F6 | 	mov	local01, result1 wz
229e4     10 00 90 AD |  if_e	jmp	#LR__3420
229e8     08 1E 06 F1 | 	add	local01, #8
229ec     0F 15 0A FB | 	rdlong	arg02, local01 wz
229f0     08 1E 86 F1 | 	sub	local01, #8
229f4     08 00 90 5D |  if_ne	jmp	#LR__3421
229f8                 | LR__3420
229f8     00 FA 05 F6 | 	mov	result1, #0
229fc     08 00 90 FD | 	jmp	#LR__3422
22a00                 | LR__3421
22a00     96 1E 26 F4 | 	bith	local01, #150
22a04     0F FB 01 F6 | 	mov	result1, local01
22a08                 | LR__3422
22a08     A7 F0 03 F6 | 	mov	ptra, fp
22a0c     B2 00 A0 FD | 	call	#popregs_
22a10                 | __system___getrxfunc_ret
22a10     2D 00 64 FD | 	ret
22a14                 | 
22a14                 | __system___getiolock_0474
22a14     01 4A 05 F6 | 	mov	COUNT_, #1
22a18     A8 00 A0 FD | 	call	#pushregs_
22a1c     1C F8 BF FD | 	call	#__system____getftab
22a20     FD 1E 0A F6 | 	mov	local01, result1 wz
22a24     10 00 90 AD |  if_e	jmp	#LR__3430
22a28     08 1E 06 F1 | 	add	local01, #8
22a2c     0F FB 09 FB | 	rdlong	result1, local01 wz
22a30     08 1E 86 F1 | 	sub	local01, #8
22a34     18 00 90 5D |  if_ne	jmp	#LR__3431
22a38                 | LR__3430
22a38     01 00 00 FF 
22a3c     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
22a40     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
22a44     01 00 00 FF 
22a48     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
22a4c     08 00 90 FD | 	jmp	#LR__3432
22a50                 | LR__3431
22a50     0C 1E 06 F1 | 	add	local01, #12
22a54     0F FB 01 F6 | 	mov	result1, local01
22a58                 | LR__3432
22a58     A7 F0 03 F6 | 	mov	ptra, fp
22a5c     B2 00 A0 FD | 	call	#popregs_
22a60                 | __system___getiolock_0474_ret
22a60     2D 00 64 FD | 	ret
22a64                 | 
22a64                 | __system____ScanForChar
22a64     09 01 02 F6 | 	mov	_var01, arg01
22a68     09 03 02 F6 | 	mov	_var02, arg01
22a6c     97 06 48 FB | 	callpa	#(@LR__3441-@LR__3440)>>2,fcache_load_ptr_
22a70                 | LR__3440
22a70     01 FB C9 FA | 	rdbyte	result1, _var02 wz
22a74     01 02 06 51 |  if_ne	add	_var02, #1
22a78     F4 FF 9F 5D |  if_ne	jmp	#LR__3440
22a7c                 | LR__3441
22a7c     09 03 82 F1 | 	sub	_var02, arg01
22a80     01 FB 01 F6 | 	mov	result1, _var02
22a84     FD 12 0A F6 | 	mov	arg01, result1 wz
22a88     00 FA 05 A6 |  if_e	mov	result1, #0
22a8c     B8 00 90 AD |  if_e	jmp	#LR__3448
22a90     0A 05 02 F6 | 	mov	_var03, arg02
22a94     07 04 4E F7 | 	zerox	_var03, #7 wz
22a98     00 FA 05 A6 |  if_e	mov	result1, #0
22a9c     A8 00 90 AD |  if_e	jmp	#LR__3448
22aa0     01 16 16 F2 | 	cmp	arg03, #1 wc
22aa4     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
22aa8     01 16 06 86 |  if_c_and_z	mov	arg03, #1
22aac     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
22ab0     94 00 90 4D |  if_c_and_nz	jmp	#LR__3448
22ab4     09 17 1A F2 | 	cmp	arg03, arg01 wcz
22ab8     10 00 90 ED |  if_be	jmp	#LR__3442
22abc     00 18 0E F2 | 	cmp	arg04, #0 wz
22ac0     00 FA 05 A6 |  if_e	mov	result1, #0
22ac4     80 00 90 AD |  if_e	jmp	#LR__3448
22ac8     09 17 02 F6 | 	mov	arg03, arg01
22acc                 | LR__3442
22acc     01 16 86 F1 | 	sub	arg03, #1
22ad0     00 18 0E F2 | 	cmp	arg04, #0 wz
22ad4     38 00 90 5D |  if_ne	jmp	#LR__3444
22ad8     0B 07 02 F6 | 	mov	_var04, arg03
22adc     09 09 02 F6 | 	mov	_var05, arg01
22ae0                 | LR__3443
22ae0     04 07 12 F2 | 	cmp	_var04, _var05 wc
22ae4     5C 00 90 3D |  if_ae	jmp	#LR__3447
22ae8     03 05 02 F6 | 	mov	_var03, _var04
22aec     00 05 02 F1 | 	add	_var03, _var01
22af0     02 05 C2 FA | 	rdbyte	_var03, _var03
22af4     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
22af8     0C 05 0A F2 | 	cmp	_var03, arg04 wz
22afc     01 06 06 A1 |  if_e	add	_var04, #1
22b00     03 FB 01 A6 |  if_e	mov	result1, _var04
22b04     40 00 90 AD |  if_e	jmp	#LR__3448
22b08     01 06 06 F1 | 	add	_var04, #1
22b0c     D0 FF 9F FD | 	jmp	#LR__3443
22b10                 | LR__3444
22b10     0B 07 02 F6 | 	mov	_var04, arg03
22b14                 | LR__3445
22b14     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
22b18     28 00 90 1D |  if_a	jmp	#LR__3446
22b1c     03 09 02 F6 | 	mov	_var05, _var04
22b20     00 09 02 F1 | 	add	_var05, _var01
22b24     04 05 C2 FA | 	rdbyte	_var03, _var05
22b28     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
22b2c     04 05 0A F2 | 	cmp	_var03, _var05 wz
22b30     01 06 06 A1 |  if_e	add	_var04, #1
22b34     03 FB 01 A6 |  if_e	mov	result1, _var04
22b38     0C 00 90 AD |  if_e	jmp	#LR__3448
22b3c     01 06 86 F1 | 	sub	_var04, #1
22b40     D0 FF 9F FD | 	jmp	#LR__3445
22b44                 | LR__3446
22b44                 | LR__3447
22b44     00 FA 05 F6 | 	mov	result1, #0
22b48                 | LR__3448
22b48                 | __system____ScanForChar_ret
22b48     2D 00 64 FD | 	ret
22b4c                 | 
22b4c                 | __system___basic_dir
22b4c     05 4A 05 F6 | 	mov	COUNT_, #5
22b50     A8 00 A0 FD | 	call	#pushregs_
22b54     4C F0 07 F1 | 	add	ptra, #76
22b58     04 4E 05 F1 | 	add	fp, #4
22b5c     A7 12 62 FC | 	wrlong	arg01, fp
22b60     04 4E 05 F1 | 	add	fp, #4
22b64     A7 14 62 FC | 	wrlong	arg02, fp
22b68     04 4E 85 F1 | 	sub	fp, #4
22b6c     A7 14 0A FB | 	rdlong	arg02, fp wz
22b70     04 4E 85 F1 | 	sub	fp, #4
22b74     04 4E 05 51 |  if_ne	add	fp, #4
22b78     A7 1E 02 5B |  if_ne	rdlong	local01, fp
22b7c     04 4E 85 51 |  if_ne	sub	fp, #4
22b80     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
22b84     70 00 90 AD |  if_e	jmp	#LR__3450
22b88     03 00 00 FF 
22b8c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
22b90     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
22b94     03 00 00 FF 
22b98     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
22b9c     03 00 00 5F 
22ba0     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
22ba4     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
22ba8     03 00 00 5F 
22bac     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
22bb0     18 EA BF 5D |  if_ne	call	#__system__closedir
22bb4     63 01 00 FF 
22bb8     9C 12 06 F6 | 	mov	arg01, ##@LR__4608
22bbc     20 E9 BF FD | 	call	#__system__opendir
22bc0     03 00 00 FF 
22bc4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
22bc8     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
22bcc     08 4E 05 F1 | 	add	fp, #8
22bd0     A7 20 02 FB | 	rdlong	local02, fp
22bd4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
22bd8     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
22bdc     04 4E 85 F1 | 	sub	fp, #4
22be0     A7 20 02 FB | 	rdlong	local02, fp
22be4     04 4E 85 F1 | 	sub	fp, #4
22be8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
22bec     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
22bf0     03 00 00 FF 
22bf4     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
22bf8                 | LR__3450
22bf8     03 00 00 FF 
22bfc     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
22c00     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
22c04     03 00 00 FF 
22c08     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
22c0c     63 01 00 AF 
22c10     9E FA 05 A6 |  if_e	mov	result1, ##@LR__4609
22c14     84 02 90 AD |  if_e	jmp	#LR__3463
22c18                 | LR__3451
22c18     03 00 00 FF 
22c1c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
22c20     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
22c24     03 00 00 FF 
22c28     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
22c2c     10 EA BF FD | 	call	#__system__readdir
22c30     0C 4E 05 F1 | 	add	fp, #12
22c34     A7 FA 61 FC | 	wrlong	result1, fp
22c38     0C 4E 85 F1 | 	sub	fp, #12
22c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
22c40     38 00 90 5D |  if_ne	jmp	#LR__3452
22c44     03 00 00 FF 
22c48     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
22c4c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
22c50     03 00 00 FF 
22c54     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
22c58     70 E9 BF FD | 	call	#__system__closedir
22c5c     03 00 00 FF 
22c60     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
22c64     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
22c68     03 00 00 FF 
22c6c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
22c70     63 01 00 FF 
22c74     A0 FA 05 F6 | 	mov	result1, ##@LR__4610
22c78     20 02 90 FD | 	jmp	#LR__3463
22c7c                 | LR__3452
22c7c     0C 4E 05 F1 | 	add	fp, #12
22c80     A7 12 02 FB | 	rdlong	arg01, fp
22c84     0C 4E 85 F1 | 	sub	fp, #12
22c88     03 00 00 FF 
22c8c     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
22c90     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
22c94     03 00 00 FF 
22c98     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
22c9c     48 07 B0 FD | 	call	#__system___pat_match
22ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
22ca4     70 FF 9F AD |  if_e	jmp	#LR__3451
22ca8     03 00 00 FF 
22cac     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
22cb0     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
22cb4     03 00 00 FF 
22cb8     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
22cbc     78 01 90 AD |  if_e	jmp	#LR__3459
22cc0     0C 4E 05 F1 | 	add	fp, #12
22cc4     A7 12 02 FB | 	rdlong	arg01, fp
22cc8     04 4E 05 F1 | 	add	fp, #4
22ccc     A7 14 02 F6 | 	mov	arg02, fp
22cd0     10 4E 85 F1 | 	sub	fp, #16
22cd4     6C F2 BF FD | 	call	#__system__stat
22cd8     40 4E 05 F1 | 	add	fp, #64
22cdc     A7 FA 61 FC | 	wrlong	result1, fp
22ce0     40 4E 85 F1 | 	sub	fp, #64
22ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
22ce8     63 01 00 5F 
22cec     A2 FA 05 56 |  if_ne	mov	result1, ##@LR__4611
22cf0     A8 01 90 5D |  if_ne	jmp	#LR__3463
22cf4     18 4E 05 F1 | 	add	fp, #24
22cf8     A7 20 02 FB | 	rdlong	local02, fp
22cfc     78 00 00 FF 
22d00     00 20 06 F5 | 	and	local02, ##61440
22d04     2C 4E 05 F1 | 	add	fp, #44
22d08     A7 20 62 FC | 	wrlong	local02, fp
22d0c     38 4E 85 F1 | 	sub	fp, #56
22d10     A7 20 02 FB | 	rdlong	local02, fp
22d14     0C 4E 85 F1 | 	sub	fp, #12
22d18     10 21 C2 FA | 	rdbyte	local02, local02
22d1c     2E 20 0E F2 | 	cmp	local02, #46 wz
22d20     08 4E 05 A1 |  if_e	add	fp, #8
22d24     A7 04 68 AC |  if_e	wrlong	#2, fp
22d28     08 4E C5 F3 | 	sumz	fp, #8
22d2c     A7 00 68 5C |  if_ne	wrlong	#0, fp
22d30     08 4E 85 51 |  if_ne	sub	fp, #8
22d34     44 4E 05 F1 | 	add	fp, #68
22d38     A7 20 02 FB | 	rdlong	local02, fp
22d3c     44 4E 85 F1 | 	sub	fp, #68
22d40     08 00 00 FF 
22d44     00 20 0E F2 | 	cmp	local02, ##4096 wz
22d48     18 00 90 5D |  if_ne	jmp	#LR__3453
22d4c     08 4E 05 F1 | 	add	fp, #8
22d50     A7 20 02 FB | 	rdlong	local02, fp
22d54     10 20 46 F5 | 	or	local02, #16
22d58     A7 20 62 FC | 	wrlong	local02, fp
22d5c     08 4E 85 F1 | 	sub	fp, #8
22d60     AC 00 90 FD | 	jmp	#LR__3458
22d64                 | LR__3453
22d64     44 4E 05 F1 | 	add	fp, #68
22d68     A7 20 02 FB | 	rdlong	local02, fp
22d6c     44 4E 85 F1 | 	sub	fp, #68
22d70     10 00 00 FF 
22d74     00 20 0E F2 | 	cmp	local02, ##8192 wz
22d78     44 4E 05 51 |  if_ne	add	fp, #68
22d7c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
22d80     44 4E 85 51 |  if_ne	sub	fp, #68
22d84     18 00 00 5F 
22d88     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
22d8c     44 4E 05 51 |  if_ne	add	fp, #68
22d90     0F 23 02 56 |  if_ne	mov	local03, local01
22d94     44 4E 85 51 |  if_ne	sub	fp, #68
22d98     20 00 00 5F 
22d9c     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
22da0     18 00 90 5D |  if_ne	jmp	#LR__3454
22da4     08 4E 05 F1 | 	add	fp, #8
22da8     A7 20 02 FB | 	rdlong	local02, fp
22dac     04 20 46 F5 | 	or	local02, #4
22db0     A7 20 62 FC | 	wrlong	local02, fp
22db4     08 4E 85 F1 | 	sub	fp, #8
22db8     54 00 90 FD | 	jmp	#LR__3457
22dbc                 | LR__3454
22dbc     18 4E 05 F1 | 	add	fp, #24
22dc0     A7 20 02 FB | 	rdlong	local02, fp
22dc4     18 4E 85 F1 | 	sub	fp, #24
22dc8     92 20 CE F7 | 	test	local02, #146 wz
22dcc     18 00 90 5D |  if_ne	jmp	#LR__3455
22dd0     08 4E 05 F1 | 	add	fp, #8
22dd4     A7 20 02 FB | 	rdlong	local02, fp
22dd8     01 20 46 F5 | 	or	local02, #1
22ddc     A7 20 62 FC | 	wrlong	local02, fp
22de0     08 4E 85 F1 | 	sub	fp, #8
22de4     28 00 90 FD | 	jmp	#LR__3456
22de8                 | LR__3455
22de8     44 4E 05 F1 | 	add	fp, #68
22dec     A7 24 02 FB | 	rdlong	local04, fp
22df0     44 4E 85 F1 | 	sub	fp, #68
22df4     08 00 00 FF 
22df8     00 24 0E F2 | 	cmp	local04, ##4096 wz
22dfc     08 4E 05 51 |  if_ne	add	fp, #8
22e00     A7 24 02 5B |  if_ne	rdlong	local04, fp
22e04     20 24 46 55 |  if_ne	or	local04, #32
22e08     A7 24 62 5C |  if_ne	wrlong	local04, fp
22e0c     08 4E 85 51 |  if_ne	sub	fp, #8
22e10                 | LR__3456
22e10                 | LR__3457
22e10                 | LR__3458
22e10     08 4E 05 F1 | 	add	fp, #8
22e14     A7 24 02 FB | 	rdlong	local04, fp
22e18     08 4E 85 F1 | 	sub	fp, #8
22e1c     03 00 00 FF 
22e20     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
22e24     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
22e28     03 00 00 FF 
22e2c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
22e30     0F 25 CA F7 | 	test	local04, local01 wz
22e34     E0 FD 9F AD |  if_e	jmp	#LR__3451
22e38                 | LR__3459
22e38     0C 4E 05 F1 | 	add	fp, #12
22e3c     A7 12 02 FB | 	rdlong	arg01, fp
22e40     0C 4E 85 F1 | 	sub	fp, #12
22e44     09 27 02 F6 | 	mov	local05, arg01
22e48     97 06 48 FB | 	callpa	#(@LR__3461-@LR__3460)>>2,fcache_load_ptr_
22e4c                 | LR__3460
22e4c     13 FB C9 FA | 	rdbyte	result1, local05 wz
22e50     01 26 06 51 |  if_ne	add	local05, #1
22e54     F4 FF 9F 5D |  if_ne	jmp	#LR__3460
22e58                 | LR__3461
22e58     13 13 C2 F2 | 	subr	arg01, local05
22e5c     01 12 06 F1 | 	add	arg01, #1
22e60     68 E0 BF FD | 	call	#__system___gc_alloc_managed
22e64     48 4E 05 F1 | 	add	fp, #72
22e68     A7 FA 61 FC | 	wrlong	result1, fp
22e6c     48 4E 85 F1 | 	sub	fp, #72
22e70     00 FA 0D F2 | 	cmp	result1, #0 wz
22e74     18 00 90 AD |  if_e	jmp	#LR__3462
22e78     48 4E 05 F1 | 	add	fp, #72
22e7c     A7 12 02 FB | 	rdlong	arg01, fp
22e80     3C 4E 85 F1 | 	sub	fp, #60
22e84     A7 14 02 FB | 	rdlong	arg02, fp
22e88     0C 4E 85 F1 | 	sub	fp, #12
22e8c     A8 A1 BF FD | 	call	#__system____builtin_strcpy
22e90                 | LR__3462
22e90     48 4E 05 F1 | 	add	fp, #72
22e94     A7 FA 01 FB | 	rdlong	result1, fp
22e98     48 4E 85 F1 | 	sub	fp, #72
22e9c                 | LR__3463
22e9c     A7 F0 03 F6 | 	mov	ptra, fp
22ea0     B2 00 A0 FD | 	call	#popregs_
22ea4                 | __system___basic_dir_ret
22ea4     2D 00 64 FD | 	ret
22ea8                 | 
22ea8                 | __system__pack_0540
22ea8     09 01 02 F6 | 	mov	_var01, arg01
22eac     7F 16 06 F1 | 	add	arg03, #127
22eb0     04 18 CE F7 | 	test	arg04, #4 wz
22eb4     10 00 90 AD |  if_e	jmp	#LR__3470
22eb8     00 00 0E F2 | 	cmp	_var01, #0 wz
22ebc     16 00 C6 A9 |  if_e	decod	_var01, #22
22ec0     F7 00 26 F4 | 	bith	_var01, #247
22ec4     B4 00 90 FD | 	jmp	#LR__3479
22ec8                 | LR__3470
22ec8     02 18 CE F7 | 	test	arg04, #2 wz
22ecc     00 C0 3F 5F 
22ed0     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
22ed4     00 14 06 56 |  if_ne	mov	arg02, #0
22ed8     A0 00 90 5D |  if_ne	jmp	#LR__3478
22edc     08 18 CE F7 | 	test	arg04, #8 wz
22ee0     00 00 06 56 |  if_ne	mov	_var01, #0
22ee4     94 00 90 5D |  if_ne	jmp	#LR__3477
22ee8     FF 16 56 F2 | 	cmps	arg03, #255 wc
22eec     00 C0 3F 3F 
22ef0     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
22ef4     00 14 06 36 |  if_ae	mov	arg02, #0
22ef8     80 00 90 3D |  if_ae	jmp	#LR__3476
22efc     01 16 56 F2 | 	cmps	arg03, #1 wc
22f00     6C 00 90 3D |  if_ae	jmp	#LR__3474
22f04     01 14 46 F0 | 	shr	arg02, #1
22f08     00 03 02 F6 | 	mov	_var02, _var01
22f0c     01 02 06 F5 | 	and	_var02, #1
22f10     1F 02 66 F0 | 	shl	_var02, #31
22f14     01 15 42 F5 | 	or	arg02, _var02
22f18     01 00 46 F0 | 	shr	_var01, #1
22f1c     97 1E 48 FB | 	callpa	#(@LR__3472-@LR__3471)>>2,fcache_load_ptr_
22f20                 | LR__3471
22f20     00 16 56 F2 | 	cmps	arg03, #0 wc
22f24     34 00 90 3D |  if_ae	jmp	#LR__3473
22f28     00 00 0E F2 | 	cmp	_var01, #0 wz
22f2c     2C 00 90 AD |  if_e	jmp	#LR__3473
22f30     0A 13 02 F6 | 	mov	arg01, arg02
22f34     01 12 06 F5 | 	and	arg01, #1
22f38     01 16 06 F1 | 	add	arg03, #1
22f3c     01 14 46 F0 | 	shr	arg02, #1
22f40     00 03 02 F6 | 	mov	_var02, _var01
22f44     01 02 06 F5 | 	and	_var02, #1
22f48     1F 02 66 F0 | 	shl	_var02, #31
22f4c     01 15 42 F5 | 	or	arg02, _var02
22f50     09 15 42 F5 | 	or	arg02, arg01
22f54     01 00 46 F0 | 	shr	_var01, #1
22f58     C4 FF 9F FD | 	jmp	#LR__3471
22f5c                 | LR__3472
22f5c                 | LR__3473
22f5c     00 16 56 F2 | 	cmps	arg03, #0 wc
22f60     18 00 90 3D |  if_ae	jmp	#LR__3475
22f64     00 14 0E F2 | 	cmp	arg02, #0 wz
22f68     6F 14 62 FD | 	wrnz	arg02
22f6c     0C 00 90 FD | 	jmp	#LR__3475
22f70                 | LR__3474
22f70     17 01 06 F4 | 	bitl	_var01, #279
22f74     17 16 66 F0 | 	shl	arg03, #23
22f78     0B 01 42 F5 | 	or	_var01, arg03
22f7c                 | LR__3475
22f7c                 | LR__3476
22f7c                 | LR__3477
22f7c                 | LR__3478
22f7c                 | LR__3479
22f7c     01 00 CE F7 | 	test	_var01, #1 wz
22f80     01 14 46 55 |  if_ne	or	arg02, #1
22f84     0A 17 02 F6 | 	mov	arg03, arg02
22f88     00 02 06 F6 | 	mov	_var02, #0
22f8c     FF FF 3F FF 
22f90     FF 15 06 F1 | 	add	arg02, ##2147483647
22f94     0B 15 12 F2 | 	cmp	arg02, arg03 wc
22f98     01 02 06 C6 |  if_b	mov	_var02, #1
22f9c     01 01 02 F1 | 	add	_var01, _var02
22fa0     01 18 CE F7 | 	test	arg04, #1 wz
22fa4     1F 00 26 54 |  if_ne	bith	_var01, #31
22fa8     00 FB 01 F6 | 	mov	result1, _var01
22fac                 | __system__pack_0540_ret
22fac     2D 00 64 FD | 	ret
22fb0                 | 
22fb0                 | __system___rxtxioctl_0630
22fb0     00 15 0E F2 | 	cmp	arg02, #256 wz
22fb4     0C 00 90 AD |  if_e	jmp	#LR__3480
22fb8     01 15 0E F2 | 	cmp	arg02, #257 wz
22fbc     1C 00 90 AD |  if_e	jmp	#LR__3481
22fc0     30 00 90 FD | 	jmp	#LR__3482
22fc4                 | LR__3480
22fc4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
22fc8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
22fcc     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
22fd0     0B FB 61 FC | 	wrlong	result1, arg03
22fd4     00 FA 05 F6 | 	mov	result1, #0
22fd8     28 00 90 FD | 	jmp	#LR__3483
22fdc                 | LR__3481
22fdc     0B 13 02 FB | 	rdlong	arg01, arg03
22fe0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
22fe4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
22fe8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
22fec     00 FA 05 F6 | 	mov	result1, #0
22ff0     10 00 90 FD | 	jmp	#LR__3483
22ff4                 | LR__3482
22ff4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22ff8     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
22ffc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23000     01 FA 65 F6 | 	neg	result1, #1
23004                 | LR__3483
23004                 | __system___rxtxioctl_0630_ret
23004     2D 00 64 FD | 	ret
23008                 | 
23008                 | __system____dummy_flush_0631
23008     00 FA 05 F6 | 	mov	result1, #0
2300c                 | __system____dummy_flush_0631_ret
2300c     2D 00 64 FD | 	ret
23010                 | 
23010                 | __system___vfsread
23010     03 4A 05 F6 | 	mov	COUNT_, #3
23014     A8 00 A0 FD | 	call	#pushregs_
23018     28 F0 07 F1 | 	add	ptra, #40
2301c     04 4E 05 F1 | 	add	fp, #4
23020     A7 12 62 FC | 	wrlong	arg01, fp
23024     04 4E 05 F1 | 	add	fp, #4
23028     A7 14 62 FC | 	wrlong	arg02, fp
2302c     04 4E 05 F1 | 	add	fp, #4
23030     A7 16 62 FC | 	wrlong	arg03, fp
23034     04 4E 85 F1 | 	sub	fp, #4
23038     A7 FA 01 FB | 	rdlong	result1, fp
2303c     14 4E 05 F1 | 	add	fp, #20
23040     A7 FA 61 FC | 	wrlong	result1, fp
23044     04 4E 05 F1 | 	add	fp, #4
23048     A7 00 68 FC | 	wrlong	#0, fp
2304c     1C 4E 85 F1 | 	sub	fp, #28
23050     A7 12 02 FB | 	rdlong	arg01, fp
23054     04 4E 85 F1 | 	sub	fp, #4
23058     08 12 06 F1 | 	add	arg01, #8
2305c     09 FB 01 FB | 	rdlong	result1, arg01
23060     01 FA CD F7 | 	test	result1, #1 wz
23064     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23068     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2306c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23070     01 FA 65 A6 |  if_e	neg	result1, #1
23074     74 02 90 AD |  if_e	jmp	#LR__3496
23078     04 4E 05 F1 | 	add	fp, #4
2307c     A7 12 02 FB | 	rdlong	arg01, fp
23080     04 4E 85 F1 | 	sub	fp, #4
23084     14 12 06 F1 | 	add	arg01, #20
23088     09 FB 09 FB | 	rdlong	result1, arg01 wz
2308c     B8 00 90 AD |  if_e	jmp	#LR__3491
23090     04 4E 05 F1 | 	add	fp, #4
23094     A7 12 02 FB | 	rdlong	arg01, fp
23098     09 17 02 F6 | 	mov	arg03, arg01
2309c     14 16 06 F1 | 	add	arg03, #20
230a0     0B 1F 02 FB | 	rdlong	local01, arg03
230a4     0F 21 02 F6 | 	mov	local02, local01
230a8     13 1E 46 F7 | 	zerox	local01, #19
230ac     14 20 46 F0 | 	shr	local02, #20
230b0     02 20 66 F0 | 	shl	local02, #2
230b4     ED 20 02 F1 | 	add	local02, __methods__
230b8     10 21 02 FB | 	rdlong	local02, local02
230bc     04 4E 05 F1 | 	add	fp, #4
230c0     A7 14 02 FB | 	rdlong	arg02, fp
230c4     04 4E 05 F1 | 	add	fp, #4
230c8     A7 16 02 FB | 	rdlong	arg03, fp
230cc     0C 4E 85 F1 | 	sub	fp, #12
230d0     F2 22 02 F6 | 	mov	local03, objptr
230d4     0F E5 01 F6 | 	mov	objptr, local01
230d8     2D 20 62 FD | 	call	local02
230dc     11 E5 01 F6 | 	mov	objptr, local03
230e0     10 4E 05 F1 | 	add	fp, #16
230e4     A7 FA 61 FC | 	wrlong	result1, fp
230e8     10 4E 85 F1 | 	sub	fp, #16
230ec     00 FA 55 F2 | 	cmps	result1, #0 wc
230f0     44 00 90 3D |  if_ae	jmp	#LR__3490
230f4     04 4E 05 F1 | 	add	fp, #4
230f8     A7 22 02 FB | 	rdlong	local03, fp
230fc     11 1F 02 F6 | 	mov	local01, local03
23100     08 22 06 F1 | 	add	local03, #8
23104     11 21 02 FB | 	rdlong	local02, local03
23108     20 20 46 F5 | 	or	local02, #32
2310c     08 1E 06 F1 | 	add	local01, #8
23110     0F 21 62 FC | 	wrlong	local02, local01
23114     0C 4E 05 F1 | 	add	fp, #12
23118     A7 12 0A FB | 	rdlong	arg01, fp wz
2311c     10 4E 85 F1 | 	sub	fp, #16
23120     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23124     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23128     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2312c     01 FA 65 56 |  if_ne	neg	result1, #1
23130     00 FA 05 A6 |  if_e	mov	result1, #0
23134     B4 01 90 FD | 	jmp	#LR__3496
23138                 | LR__3490
23138     10 4E 05 F1 | 	add	fp, #16
2313c     A7 FA 01 FB | 	rdlong	result1, fp
23140     10 4E 85 F1 | 	sub	fp, #16
23144     A4 01 90 FD | 	jmp	#LR__3496
23148                 | LR__3491
23148     04 4E 05 F1 | 	add	fp, #4
2314c     A7 12 02 FB | 	rdlong	arg01, fp
23150     20 12 06 F1 | 	add	arg01, #32
23154     09 13 0A FB | 	rdlong	arg01, arg01 wz
23158     14 4E 05 F1 | 	add	fp, #20
2315c     A7 12 62 FC | 	wrlong	arg01, fp
23160     18 4E 85 F1 | 	sub	fp, #24
23164     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23168     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2316c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23170     01 FA 65 A6 |  if_e	neg	result1, #1
23174     74 01 90 AD |  if_e	jmp	#LR__3496
23178     04 4E 05 F1 | 	add	fp, #4
2317c     A7 22 02 FB | 	rdlong	local03, fp
23180     04 4E 85 F1 | 	sub	fp, #4
23184     28 22 06 F1 | 	add	local03, #40
23188     11 21 0A FB | 	rdlong	local02, local03 wz
2318c     7C 00 90 AD |  if_e	jmp	#LR__3493
23190     04 4E 05 F1 | 	add	fp, #4
23194     A7 12 02 FB | 	rdlong	arg01, fp
23198     09 23 02 F6 | 	mov	local03, arg01
2319c     28 22 06 F1 | 	add	local03, #40
231a0     11 1F 02 FB | 	rdlong	local01, local03
231a4     0F 21 02 F6 | 	mov	local02, local01
231a8     13 1E 46 F7 | 	zerox	local01, #19
231ac     14 20 46 F0 | 	shr	local02, #20
231b0     02 20 66 F0 | 	shl	local02, #2
231b4     ED 20 02 F1 | 	add	local02, __methods__
231b8     10 21 02 FB | 	rdlong	local02, local02
231bc     20 4E 05 F1 | 	add	fp, #32
231c0     A7 16 02 F6 | 	mov	arg03, fp
231c4     24 4E 85 F1 | 	sub	fp, #36
231c8     00 15 06 F6 | 	mov	arg02, #256
231cc     F2 22 02 F6 | 	mov	local03, objptr
231d0     0F E5 01 F6 | 	mov	objptr, local01
231d4     2D 20 62 FD | 	call	local02
231d8     11 E5 01 F6 | 	mov	objptr, local03
231dc     10 4E 05 F1 | 	add	fp, #16
231e0     A7 FA 61 FC | 	wrlong	result1, fp
231e4     00 FA 4D F2 | 	cmps	result1, #0 wz
231e8     10 4E 85 F1 | 	sub	fp, #16
231ec     1C 00 90 5D |  if_ne	jmp	#LR__3492
231f0     24 4E 05 F1 | 	add	fp, #36
231f4     A7 20 02 FB | 	rdlong	local02, fp
231f8     24 4E 85 F1 | 	sub	fp, #36
231fc     02 20 CE F7 | 	test	local02, #2 wz
23200     20 4E 05 51 |  if_ne	add	fp, #32
23204     A7 02 68 5C |  if_ne	wrlong	#1, fp
23208     20 4E 85 51 |  if_ne	sub	fp, #32
2320c                 | LR__3492
2320c                 | LR__3493
2320c     10 4E 05 F1 | 	add	fp, #16
23210     A7 00 68 FC | 	wrlong	#0, fp
23214     10 4E 85 F1 | 	sub	fp, #16
23218                 | LR__3494
23218     0C 4E 05 F1 | 	add	fp, #12
2321c     A7 22 02 FB | 	rdlong	local03, fp
23220     0C 4E 85 F1 | 	sub	fp, #12
23224     01 22 16 F2 | 	cmp	local03, #1 wc
23228     B4 00 90 CD |  if_b	jmp	#LR__3495
2322c     18 4E 05 F1 | 	add	fp, #24
23230     A7 20 02 FB | 	rdlong	local02, fp
23234     10 23 02 F6 | 	mov	local03, local02
23238     13 22 46 F7 | 	zerox	local03, #19
2323c     14 20 46 F0 | 	shr	local02, #20
23240     02 20 66 F0 | 	shl	local02, #2
23244     ED 20 02 F1 | 	add	local02, __methods__
23248     10 21 02 FB | 	rdlong	local02, local02
2324c     14 4E 85 F1 | 	sub	fp, #20
23250     A7 12 02 FB | 	rdlong	arg01, fp
23254     04 4E 85 F1 | 	sub	fp, #4
23258     F2 1E 02 F6 | 	mov	local01, objptr
2325c     11 E5 01 F6 | 	mov	objptr, local03
23260     2D 20 62 FD | 	call	local02
23264     0F E5 01 F6 | 	mov	objptr, local01
23268     14 4E 05 F1 | 	add	fp, #20
2326c     A7 FA 61 FC | 	wrlong	result1, fp
23270     14 4E 85 F1 | 	sub	fp, #20
23274     00 FA 55 F2 | 	cmps	result1, #0 wc
23278     64 00 90 CD |  if_b	jmp	#LR__3495
2327c     1C 4E 05 F1 | 	add	fp, #28
23280     A7 22 02 FB | 	rdlong	local03, fp
23284     11 21 02 F6 | 	mov	local02, local03
23288     01 20 06 F1 | 	add	local02, #1
2328c     A7 20 62 FC | 	wrlong	local02, fp
23290     08 4E 85 F1 | 	sub	fp, #8
23294     A7 20 02 FB | 	rdlong	local02, fp
23298     11 21 42 FC | 	wrbyte	local02, local03
2329c     04 4E 85 F1 | 	sub	fp, #4
232a0     A7 22 02 FB | 	rdlong	local03, fp
232a4     01 22 06 F1 | 	add	local03, #1
232a8     A7 22 62 FC | 	wrlong	local03, fp
232ac     04 4E 85 F1 | 	sub	fp, #4
232b0     A7 22 02 FB | 	rdlong	local03, fp
232b4     01 22 86 F1 | 	sub	local03, #1
232b8     A7 22 62 FC | 	wrlong	local03, fp
232bc     14 4E 05 F1 | 	add	fp, #20
232c0     A7 22 0A FB | 	rdlong	local03, fp wz
232c4     20 4E 85 F1 | 	sub	fp, #32
232c8     4C FF 9F AD |  if_e	jmp	#LR__3494
232cc     14 4E 05 F1 | 	add	fp, #20
232d0     A7 20 02 FB | 	rdlong	local02, fp
232d4     14 4E 85 F1 | 	sub	fp, #20
232d8     0A 20 0E F2 | 	cmp	local02, #10 wz
232dc     38 FF 9F 5D |  if_ne	jmp	#LR__3494
232e0                 | LR__3495
232e0     10 4E 05 F1 | 	add	fp, #16
232e4     A7 FA 01 FB | 	rdlong	result1, fp
232e8     10 4E 85 F1 | 	sub	fp, #16
232ec                 | LR__3496
232ec     A7 F0 03 F6 | 	mov	ptra, fp
232f0     B2 00 A0 FD | 	call	#popregs_
232f4                 | __system___vfsread_ret
232f4     2D 00 64 FD | 	ret
232f8                 | 
232f8                 | __system____default_filbuf
232f8     04 4A 05 F6 | 	mov	COUNT_, #4
232fc     A8 00 A0 FD | 	call	#pushregs_
23300     09 1F 02 F6 | 	mov	local01, arg01
23304     0F 21 02 FB | 	rdlong	local02, local01
23308     0C 20 06 F1 | 	add	local02, #12
2330c     10 FB 09 FB | 	rdlong	result1, local02 wz
23310     0C 20 86 F1 | 	sub	local02, #12
23314     20 00 90 5D |  if_ne	jmp	#LR__3500
23318     14 20 06 F1 | 	add	local02, #20
2331c     10 FB 01 F6 | 	mov	result1, local02
23320     04 20 86 F1 | 	sub	local02, #4
23324     10 FB 61 FC | 	wrlong	result1, local02
23328     04 20 86 F1 | 	sub	local02, #4
2332c     02 00 80 FF 
23330     10 01 68 FC | 	wrlong	##1024, local02
23334     0C 20 86 F1 | 	sub	local02, #12
23338                 | LR__3500
23338     14 1E 06 F1 | 	add	local01, #20
2333c     0F 23 02 FB | 	rdlong	local03, local01
23340     11 25 02 F6 | 	mov	local04, local03
23344     14 1E 86 F1 | 	sub	local01, #20
23348     13 24 46 F7 | 	zerox	local04, #19
2334c     14 22 46 F0 | 	shr	local03, #20
23350     02 22 66 F0 | 	shl	local03, #2
23354     ED 22 02 F1 | 	add	local03, __methods__
23358     11 23 02 FB | 	rdlong	local03, local03
2335c     10 20 06 F1 | 	add	local02, #16
23360     10 15 02 FB | 	rdlong	arg02, local02
23364     04 20 86 F1 | 	sub	local02, #4
23368     10 17 02 FB | 	rdlong	arg03, local02
2336c     0C 20 86 F1 | 	sub	local02, #12
23370     0F 13 02 F6 | 	mov	arg01, local01
23374     F2 1E 02 F6 | 	mov	local01, objptr
23378     12 E5 01 F6 | 	mov	objptr, local04
2337c     2D 22 62 FD | 	call	local03
23380     0F E5 01 F6 | 	mov	objptr, local01
23384     FD 24 02 F6 | 	mov	local04, result1
23388     00 24 56 F2 | 	cmps	local04, #0 wc
2338c     01 FA 65 C6 |  if_b	neg	result1, #1
23390     28 00 90 CD |  if_b	jmp	#LR__3501
23394     10 25 62 FC | 	wrlong	local04, local02
23398     10 20 06 F1 | 	add	local02, #16
2339c     10 23 02 FB | 	rdlong	local03, local02
233a0     0C 20 86 F1 | 	sub	local02, #12
233a4     10 23 62 FC | 	wrlong	local03, local02
233a8     04 20 06 F1 | 	add	local02, #4
233ac     10 23 02 FB | 	rdlong	local03, local02
233b0     01 22 46 F5 | 	or	local03, #1
233b4     10 23 62 FC | 	wrlong	local03, local02
233b8     12 FB 01 F6 | 	mov	result1, local04
233bc                 | LR__3501
233bc     A7 F0 03 F6 | 	mov	ptra, fp
233c0     B2 00 A0 FD | 	call	#popregs_
233c4                 | __system____default_filbuf_ret
233c4     2D 00 64 FD | 	ret
233c8                 | 
233c8                 | __system__getlower_1016
233c8     41 12 56 F2 | 	cmps	arg01, #65 wc
233cc     10 00 90 CD |  if_b	jmp	#LR__3510
233d0     5B 12 56 F2 | 	cmps	arg01, #91 wc
233d4     09 FB 01 C6 |  if_b	mov	result1, arg01
233d8     20 FA 05 C1 |  if_b	add	result1, #32
233dc     04 00 90 CD |  if_b	jmp	#__system__getlower_1016_ret
233e0                 | LR__3510
233e0     09 FB 01 F6 | 	mov	result1, arg01
233e4                 | __system__getlower_1016_ret
233e4     2D 00 64 FD | 	ret
233e8                 | 
233e8                 | __system___pat_match
233e8     08 4A 05 F6 | 	mov	COUNT_, #8
233ec     A8 00 A0 FD | 	call	#pushregs_
233f0     09 1F 02 F6 | 	mov	local01, arg01
233f4                 | LR__3520
233f4     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
233f8     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
233fc     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
23400     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
23404     2C 00 90 AD |  if_e	jmp	#LR__3521
23408     0A 13 C2 FA | 	rdbyte	arg01, arg02
2340c     B8 FF BF FD | 	call	#__system__getlower_1016
23410     FD 22 02 F6 | 	mov	local03, result1
23414     0F 13 C2 FA | 	rdbyte	arg01, local01
23418     AC FF BF FD | 	call	#__system__getlower_1016
2341c     11 FB 09 F2 | 	cmp	result1, local03 wz
23420     00 FA 05 56 |  if_ne	mov	result1, #0
23424     FC 00 90 5D |  if_ne	jmp	#LR__3529
23428     01 1E 06 F1 | 	add	local01, #1
2342c     01 14 06 F1 | 	add	arg02, #1
23430     C0 FF 9F FD | 	jmp	#LR__3520
23434                 | LR__3521
23434     0A 23 C2 FA | 	rdbyte	local03, arg02
23438     2A 22 0E F2 | 	cmp	local03, #42 wz
2343c     D4 00 90 5D |  if_ne	jmp	#LR__3528
23440     01 14 06 F1 | 	add	arg02, #1
23444     0A 21 C2 FA | 	rdbyte	local02, arg02
23448     01 14 86 F1 | 	sub	arg02, #1
2344c     2E 20 0E F2 | 	cmp	local02, #46 wz
23450     28 00 90 5D |  if_ne	jmp	#LR__3522
23454     02 14 06 F1 | 	add	arg02, #2
23458     0A 21 C2 FA | 	rdbyte	local02, arg02
2345c     02 14 86 F1 | 	sub	arg02, #2
23460     2A 20 0E F2 | 	cmp	local02, #42 wz
23464     03 14 06 A1 |  if_e	add	arg02, #3
23468     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
2346c     03 14 86 A1 |  if_e	sub	arg02, #3
23470     12 27 0A A6 |  if_e	mov	local05, local04 wz
23474     01 FA 05 A6 |  if_e	mov	result1, #1
23478     A8 00 90 AD |  if_e	jmp	#LR__3529
2347c                 | LR__3522
2347c     01 14 06 F1 | 	add	arg02, #1
23480     00 28 06 F6 | 	mov	local06, #0
23484     97 1E 48 FB | 	callpa	#(@LR__3525-@LR__3523)>>2,fcache_load_ptr_
23488                 | LR__3523
23488     14 2B 02 F6 | 	mov	local07, local06
2348c     0A 2B 02 F1 | 	add	local07, arg02
23490     15 2B CA FA | 	rdbyte	local07, local07 wz
23494     14 27 02 56 |  if_ne	mov	local05, local06
23498     01 26 06 51 |  if_ne	add	local05, #1
2349c     13 29 02 56 |  if_ne	mov	local06, local05
234a0     E4 FF 9F 5D |  if_ne	jmp	#LR__3523
234a4     00 2C 06 F6 | 	mov	local08, #0
234a8                 | LR__3524
234a8     16 2B 02 F6 | 	mov	local07, local08
234ac     0F 2B 02 F1 | 	add	local07, local01
234b0     15 2B CA FA | 	rdbyte	local07, local07 wz
234b4     16 27 02 56 |  if_ne	mov	local05, local08
234b8     01 26 06 51 |  if_ne	add	local05, #1
234bc     13 2D 02 56 |  if_ne	mov	local08, local05
234c0     E4 FF 9F 5D |  if_ne	jmp	#LR__3524
234c4                 | LR__3525
234c4     14 2D 52 F2 | 	cmps	local08, local06 wc
234c8     00 FA 05 C6 |  if_b	mov	result1, #0
234cc     54 00 90 CD |  if_b	jmp	#LR__3529
234d0     16 21 02 F6 | 	mov	local02, local08
234d4     14 21 82 F1 | 	sub	local02, local06
234d8     10 1F 02 F1 | 	add	local01, local02
234dc                 | LR__3526
234dc     01 28 56 F2 | 	cmps	local06, #1 wc
234e0     30 00 90 CD |  if_b	jmp	#LR__3527
234e4     0F 13 C2 FA | 	rdbyte	arg01, local01
234e8     DC FE BF FD | 	call	#__system__getlower_1016
234ec     FD 2C 02 F6 | 	mov	local08, result1
234f0     0A 13 C2 FA | 	rdbyte	arg01, arg02
234f4     D0 FE BF FD | 	call	#__system__getlower_1016
234f8     FD 2C 0A F2 | 	cmp	local08, result1 wz
234fc     00 FA 05 56 |  if_ne	mov	result1, #0
23500     20 00 90 5D |  if_ne	jmp	#LR__3529
23504     01 1E 06 F1 | 	add	local01, #1
23508     01 14 06 F1 | 	add	arg02, #1
2350c     01 28 86 F1 | 	sub	local06, #1
23510     C8 FF 9F FD | 	jmp	#LR__3526
23514                 | LR__3527
23514                 | LR__3528
23514     0A 2D CA FA | 	rdbyte	local08, arg02 wz
23518     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
2351c     01 FA 05 A6 |  if_e	mov	result1, #1
23520     00 FA 05 56 |  if_ne	mov	result1, #0
23524                 | LR__3529
23524     A7 F0 03 F6 | 	mov	ptra, fp
23528     B2 00 A0 FD | 	call	#popregs_
2352c                 | __system___pat_match_ret
2352c     2D 00 64 FD | 	ret
23530                 | 
23530                 | _fatfs_cc_ff_uni2oem
23530     00 00 06 F6 | 	mov	_var01, #0
23534     80 12 16 F2 | 	cmp	arg01, #128 wc
23538     09 01 02 C6 |  if_b	mov	_var01, arg01
2353c     58 00 90 CD |  if_b	jmp	#LR__3534
23540     80 00 00 FF 
23544     00 12 16 F2 | 	cmp	arg01, ##65536 wc
23548     4C 00 90 3D |  if_ae	jmp	#LR__3533
2354c     0A FB 31 F9 | 	getword	result1, arg02, #0
23550     01 00 00 FF 
23554     52 FB 0D F2 | 	cmp	result1, ##850 wz
23558     3C 00 90 5D |  if_ne	jmp	#LR__3533
2355c                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2355c     00 00 06 F6 | 	mov	_var01, #0
23560     97 14 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
23564                 | LR__3530
23564     00 FB 31 F9 | 	getword	result1, _var01, #0
23568     80 FA 15 F2 | 	cmp	result1, #128 wc
2356c     1C 00 90 3D |  if_ae	jmp	#LR__3532
23570     00 FB 31 F9 | 	getword	result1, _var01, #0
23574     01 FA 65 F0 | 	shl	result1, #1
23578     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2357c     FD FA E1 FA | 	rdword	result1, result1
23580     FD 12 0A F2 | 	cmp	arg01, result1 wz
23584     01 00 06 51 |  if_ne	add	_var01, #1
23588     D8 FF 9F 5D |  if_ne	jmp	#LR__3530
2358c                 | LR__3531
2358c                 | LR__3532
2358c     00 01 32 F9 | 	getword	_var01, _var01, #0
23590     80 00 06 F1 | 	add	_var01, #128
23594     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
23598                 | LR__3533
23598                 | LR__3534
23598                 | ' 			c = (c + 0x80) & 0xFF;
23598                 | ' 		}
23598                 | ' 	}
23598                 | ' 
23598                 | ' 	return c;
23598     00 FB 01 F6 | 	mov	result1, _var01
2359c                 | _fatfs_cc_ff_uni2oem_ret
2359c     2D 00 64 FD | 	ret
235a0                 | 
235a0                 | _fatfs_cc_ff_oem2uni
235a0     00 00 06 F6 | 	mov	_var01, #0
235a4     09 FB 31 F9 | 	getword	result1, arg01, #0
235a8     80 FA 15 F2 | 	cmp	result1, #128 wc
235ac     09 01 02 C6 |  if_b	mov	_var01, arg01
235b0     2C 00 90 CD |  if_b	jmp	#LR__3541
235b4     0A 15 32 F9 | 	getword	arg02, arg02, #0
235b8     01 00 00 FF 
235bc     52 15 0E F2 | 	cmp	arg02, ##850 wz
235c0     1C 00 90 5D |  if_ne	jmp	#LR__3540
235c4     09 FB 31 F9 | 	getword	result1, arg01, #0
235c8     00 FB 15 F2 | 	cmp	result1, #256 wc
235cc     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
235d0     80 12 86 C1 |  if_b	sub	arg01, #128
235d4     01 12 66 C0 |  if_b	shl	arg01, #1
235d8     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
235dc     09 01 E2 CA |  if_b	rdword	_var01, arg01
235e0                 | LR__3540
235e0                 | LR__3541
235e0                 | ' 		}
235e0                 | ' 	}
235e0                 | ' 
235e0                 | ' 	return c;
235e0     00 FB 01 F6 | 	mov	result1, _var01
235e4                 | _fatfs_cc_ff_oem2uni_ret
235e4     2D 00 64 FD | 	ret
235e8                 | 
235e8                 | _fatfs_cc_ff_wtoupper
235e8     09 01 02 F6 | 	mov	_var01, arg01
235ec     80 00 00 FF 
235f0     00 00 16 F2 | 	cmp	_var01, ##65536 wc
235f4     60 01 90 3D |  if_ae	jmp	#LR__3563
235f8     00 03 02 F6 | 	mov	_var02, _var01
235fc     01 01 32 F9 | 	getword	_var01, _var02, #0
23600     08 00 00 FF 
23604     00 00 16 F2 | 	cmp	_var01, ##4096 wc
23608     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2360c     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
23610     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
23614     01 00 00 3F 
23618     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2361c     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
23620     01 00 00 3F 
23624     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
23628     02 07 02 F6 | 	mov	_var04, _var03
2362c                 | ' 		uc = (WORD)uni;
2362c                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2362c                 | ' 		for (;;) {
2362c                 | LR__3550
2362c     03 09 E2 FA | 	rdword	_var05, _var04
23630     04 05 02 F6 | 	mov	_var03, _var05
23634     0F 04 4E F7 | 	zerox	_var03, #15 wz
23638     02 06 06 F1 | 	add	_var04, #2
2363c     14 01 90 AD |  if_e	jmp	#LR__3562
23640     01 05 32 F9 | 	getword	_var03, _var02, #0
23644     04 01 32 F9 | 	getword	_var01, _var05, #0
23648     00 05 12 F2 | 	cmp	_var03, _var01 wc
2364c     04 01 90 CD |  if_b	jmp	#LR__3562
23650     03 0B E2 FA | 	rdword	_var06, _var04
23654     05 0D 32 F9 | 	getword	_var07, _var06, #0
23658     08 0C 46 F0 | 	shr	_var07, #8
2365c     05 0B 32 F9 | 	getword	_var06, _var06, #0
23660     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
23664     01 05 32 F9 | 	getword	_var03, _var02, #0
23668     04 0F 32 F9 | 	getword	_var08, _var05, #0
2366c     05 01 32 F9 | 	getword	_var01, _var06, #0
23670     00 0F 02 F1 | 	add	_var08, _var01
23674     07 05 52 F2 | 	cmps	_var03, _var08 wc
23678     02 06 06 F1 | 	add	_var04, #2
2367c     C4 00 90 3D |  if_ae	jmp	#LR__3561
23680                 | ' 				switch (cmd) {
23680     06 11 32 F9 | 	getword	_var09, _var07, #0
23684     09 10 26 F3 | 	fle	_var09, #9
23688     30 10 62 FD | 	jmprel	_var09
2368c                 | LR__3551
2368c     24 00 90 FD | 	jmp	#LR__3552
23690     3C 00 90 FD | 	jmp	#LR__3553
23694     54 00 90 FD | 	jmp	#LR__3554
23698     5C 00 90 FD | 	jmp	#LR__3555
2369c     64 00 90 FD | 	jmp	#LR__3556
236a0     6C 00 90 FD | 	jmp	#LR__3557
236a4     74 00 90 FD | 	jmp	#LR__3558
236a8     7C 00 90 FD | 	jmp	#LR__3559
236ac     84 00 90 FD | 	jmp	#LR__3560
236b0     A0 00 90 FD | 	jmp	#LR__3562
236b4                 | LR__3552
236b4     01 03 32 F9 | 	getword	_var02, _var02, #0
236b8     04 09 32 F9 | 	getword	_var05, _var05, #0
236bc     04 03 82 F1 | 	sub	_var02, _var05
236c0     01 02 66 F0 | 	shl	_var02, #1
236c4     03 03 02 F1 | 	add	_var02, _var04
236c8     01 03 E2 FA | 	rdword	_var02, _var02
236cc     84 00 90 FD | 	jmp	#LR__3562
236d0                 | LR__3553
236d0     01 05 32 F9 | 	getword	_var03, _var02, #0
236d4     01 03 32 F9 | 	getword	_var02, _var02, #0
236d8     04 09 32 F9 | 	getword	_var05, _var05, #0
236dc     04 03 82 F1 | 	sub	_var02, _var05
236e0     01 02 06 F5 | 	and	_var02, #1
236e4     02 03 C2 F2 | 	subr	_var02, _var03
236e8     68 00 90 FD | 	jmp	#LR__3562
236ec                 | LR__3554
236ec     01 03 32 F9 | 	getword	_var02, _var02, #0
236f0     10 02 86 F1 | 	sub	_var02, #16
236f4     5C 00 90 FD | 	jmp	#LR__3562
236f8                 | LR__3555
236f8     01 03 32 F9 | 	getword	_var02, _var02, #0
236fc     20 02 86 F1 | 	sub	_var02, #32
23700     50 00 90 FD | 	jmp	#LR__3562
23704                 | LR__3556
23704     01 03 32 F9 | 	getword	_var02, _var02, #0
23708     30 02 86 F1 | 	sub	_var02, #48
2370c     44 00 90 FD | 	jmp	#LR__3562
23710                 | LR__3557
23710     01 03 32 F9 | 	getword	_var02, _var02, #0
23714     1A 02 86 F1 | 	sub	_var02, #26
23718     38 00 90 FD | 	jmp	#LR__3562
2371c                 | LR__3558
2371c     01 03 32 F9 | 	getword	_var02, _var02, #0
23720     08 02 06 F1 | 	add	_var02, #8
23724     2C 00 90 FD | 	jmp	#LR__3562
23728                 | LR__3559
23728     01 03 32 F9 | 	getword	_var02, _var02, #0
2372c     50 02 86 F1 | 	sub	_var02, #80
23730     20 00 90 FD | 	jmp	#LR__3562
23734                 | LR__3560
23734     01 03 32 F9 | 	getword	_var02, _var02, #0
23738     0E 00 00 FF 
2373c     60 02 86 F1 | 	sub	_var02, ##7264
23740                 | ' 				}
23740                 | ' 				break;
23740     10 00 90 FD | 	jmp	#LR__3562
23744                 | LR__3561
23744     0F 0C 4E F7 | 	zerox	_var07, #15 wz
23748     02 0A 06 AA |  if_e	mul	_var06, #2
2374c     05 07 02 A1 |  if_e	add	_var04, _var06
23750     D8 FE 9F FD | 	jmp	#LR__3550
23754                 | LR__3562
23754     01 01 32 F9 | 	getword	_var01, _var02, #0
23758                 | LR__3563
23758                 | ' 		}
23758                 | ' 		uni = uc;
23758                 | ' 	}
23758                 | ' 
23758                 | ' 	return uni;
23758     00 FB 01 F6 | 	mov	result1, _var01
2375c                 | _fatfs_cc_ff_wtoupper_ret
2375c     2D 00 64 FD | 	ret
23760                 | 
23760                 | _fatfs_cc_strncpy
23760     09 01 02 F6 | 	mov	_var01, arg01
23764     97 12 48 FB | 	callpa	#(@LR__3571-@LR__3570)>>2,fcache_load_ptr_
23768                 | ' 
23768                 | ' 	dscan = dst;
23768                 | ' 	sscan = src;
23768                 | ' 	count = n;
23768                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
23768                 | LR__3570
23768     01 16 86 F1 | 	sub	arg03, #1
2376c     00 16 56 F2 | 	cmps	arg03, #0 wc
23770     18 00 90 CD |  if_b	jmp	#LR__3572
23774     0A FB C1 FA | 	rdbyte	result1, arg02
23778     00 FB 41 FC | 	wrbyte	result1, _var01
2377c     01 14 06 F1 | 	add	arg02, #1
23780     00 FB C9 FA | 	rdbyte	result1, _var01 wz
23784                 | ' 		continue;
23784     01 00 06 F1 | 	add	_var01, #1
23788     DC FF 9F 5D |  if_ne	jmp	#LR__3570
2378c                 | LR__3571
2378c                 | LR__3572
2378c     97 0C 48 FB | 	callpa	#(@LR__3574-@LR__3573)>>2,fcache_load_ptr_
23790                 | ' 	while (--count >= 0)
23790                 | LR__3573
23790     01 16 86 F1 | 	sub	arg03, #1
23794     00 16 56 F2 | 	cmps	arg03, #0 wc
23798     00 03 02 36 |  if_ae	mov	_var02, _var01
2379c     01 00 06 31 |  if_ae	add	_var01, #1
237a0     01 01 48 3C |  if_ae	wrbyte	#0, _var02
237a4     E8 FF 9F 3D |  if_ae	jmp	#LR__3573
237a8                 | LR__3574
237a8                 | ' 		*dscan++ = '\0';
237a8                 | ' 	return(dst);
237a8     09 FB 01 F6 | 	mov	result1, arg01
237ac                 | _fatfs_cc_strncpy_ret
237ac     2D 00 64 FD | 	ret
237b0                 | 
237b0                 | _fatfs_cc_memcmp
237b0                 | ' 	for (n = size; n > 0; n--)
237b0     00 16 0E F2 | 	cmp	arg03, #0 wz
237b4     28 00 90 AD |  if_e	jmp	#LR__3581
237b8                 | LR__3580
237b8     09 01 C2 FA | 	rdbyte	_var01, arg01
237bc     0A 03 C2 FA | 	rdbyte	_var02, arg02
237c0     01 01 0A F2 | 	cmp	_var01, _var02 wz
237c4     01 12 06 A1 |  if_e	add	arg01, #1
237c8     01 14 06 A1 |  if_e	add	arg02, #1
237cc                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
237cc     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
237d0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
237d4     01 FB 81 51 |  if_ne	sub	result1, _var02
237d8     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
237dc     F6 17 6E FB | 	djnz	arg03, #LR__3580
237e0                 | LR__3581
237e0                 | ' 
237e0                 | ' 	return(0);
237e0     00 FA 05 F6 | 	mov	result1, #0
237e4                 | _fatfs_cc_memcmp_ret
237e4     2D 00 64 FD | 	ret
237e8                 | 
237e8                 | _fatfs_cc_strncmp
237e8     09 01 0A F6 | 	mov	_var01, arg01 wz
237ec     14 00 90 5D |  if_ne	jmp	#LR__3590
237f0                 | ' 		return scan2 ? -1 : 0;
237f0     00 14 0E F2 | 	cmp	arg02, #0 wz
237f4     01 02 66 56 |  if_ne	neg	_var02, #1
237f8     00 02 06 A6 |  if_e	mov	_var02, #0
237fc     01 FB 01 F6 | 	mov	result1, _var02
23800     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
23804                 | LR__3590
23804     00 14 0E F2 | 	cmp	arg02, #0 wz
23808     01 FA 05 A6 |  if_e	mov	result1, #1
2380c     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
23810     0B 05 02 F6 | 	mov	_var03, arg03
23814     97 16 48 FB | 	callpa	#(@LR__3592-@LR__3591)>>2,fcache_load_ptr_
23818                 | ' 	count = n;
23818                 | ' 	do {
23818                 | LR__3591
23818     00 07 C2 FA | 	rdbyte	_var04, _var01
2381c     0A 09 02 F6 | 	mov	_var05, arg02
23820     04 0B C2 FA | 	rdbyte	_var06, _var05
23824     01 04 86 F1 | 	sub	_var03, #1
23828     00 04 56 F2 | 	cmps	_var03, #0 wc
2382c     01 00 06 F1 | 	add	_var01, #1
23830     01 14 06 F1 | 	add	arg02, #1
23834     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
23838     08 00 90 2D |  if_nc_and_z	jmp	#LR__3593
2383c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
23840     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3591
23844                 | LR__3592
23844                 | LR__3593
23844     00 04 56 F2 | 	cmps	_var03, #0 wc
23848                 | ' 		return(0);
23848     00 FA 05 C6 |  if_b	mov	result1, #0
2384c     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
23850     05 07 0A F2 | 	cmp	_var04, _var06 wz
23854                 | ' 		return(0);
23854     00 FA 05 A6 |  if_e	mov	result1, #0
23858     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2385c     00 06 0E F2 | 	cmp	_var04, #0 wz
23860                 | ' 		return(-1);
23860     01 FA 65 A6 |  if_e	neg	result1, #1
23864     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
23868     00 0A 0E F2 | 	cmp	_var06, #0 wz
2386c                 | ' 		return(1);
2386c     01 FA 05 A6 |  if_e	mov	result1, #1
23870                 | ' 		return(c1 - c2);
23870     03 FB 01 56 |  if_ne	mov	result1, _var04
23874     05 FB 81 51 |  if_ne	sub	result1, _var06
23878                 | _fatfs_cc_strncmp_ret
23878     2D 00 64 FD | 	ret
2387c                 | 
2387c                 | _fatfs_cc_strchr
2387c                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
2387c                 | ' 	while ((c = *s++) != (char) charwanted)
2387c                 | LR__3600
2387c     09 01 02 F6 | 	mov	_var01, arg01
23880     00 03 C2 FA | 	rdbyte	_var02, _var01
23884     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
23888     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2388c     03 05 0A F2 | 	cmp	_var03, _var04 wz
23890     01 12 06 F1 | 	add	arg01, #1
23894     14 00 90 AD |  if_e	jmp	#LR__3601
23898     01 05 02 F6 | 	mov	_var03, _var02
2389c     07 04 4E F7 | 	zerox	_var03, #7 wz
238a0     00 FA 05 A6 |  if_e	mov	result1, #0
238a4     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
238a8     D0 FF 9F FD | 	jmp	#LR__3600
238ac                 | LR__3601
238ac                 | ' 	return((char *)--s);
238ac     01 12 86 F1 | 	sub	arg01, #1
238b0     09 FB 01 F6 | 	mov	result1, arg01
238b4                 | _fatfs_cc_strchr_ret
238b4     2D 00 64 FD | 	ret
238b8                 | 
238b8                 | _fatfs_cc_disk_initialize
238b8     04 4A 05 F6 | 	mov	COUNT_, #4
238bc     A8 00 A0 FD | 	call	#pushregs_
238c0     40 F0 07 F1 | 	add	ptra, #64
238c4     04 4E 05 F1 | 	add	fp, #4
238c8     A7 12 42 FC | 	wrbyte	arg01, fp
238cc     01 00 00 FF 
238d0     14 E4 05 F1 | 	add	objptr, ##532
238d4     F2 18 02 FB | 	rdlong	arg04, objptr
238d8     2C 4E 05 F1 | 	add	fp, #44
238dc     A7 18 62 FC | 	wrlong	arg04, fp
238e0     04 E4 85 F1 | 	sub	objptr, #4
238e4     F2 18 02 FB | 	rdlong	arg04, objptr
238e8     04 4E 05 F1 | 	add	fp, #4
238ec     A7 18 62 FC | 	wrlong	arg04, fp
238f0     08 E4 05 F1 | 	add	objptr, #8
238f4     F2 18 02 FB | 	rdlong	arg04, objptr
238f8     04 4E 05 F1 | 	add	fp, #4
238fc     A7 18 62 FC | 	wrlong	arg04, fp
23900     04 E4 05 F1 | 	add	objptr, #4
23904     F2 18 02 FB | 	rdlong	arg04, objptr
23908     04 4E 05 F1 | 	add	fp, #4
2390c     A7 18 62 FC | 	wrlong	arg04, fp
23910     04 E4 05 F1 | 	add	objptr, #4
23914     F2 02 48 FC | 	wrbyte	#1, objptr
23918     01 00 00 FF 
2391c     20 E4 85 F1 | 	sub	objptr, ##544
23920     38 4E 85 F1 | 	sub	fp, #56
23924     A7 18 CA FA | 	rdbyte	arg04, fp wz
23928     04 4E 85 F1 | 	sub	fp, #4
2392c                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2392c                 | '             return RES_NOTRDY;
2392c     03 FA 05 56 |  if_ne	mov	result1, #3
23930     D8 05 90 5D |  if_ne	jmp	#LR__3628
23934     13 00 00 FF 
23938     10 13 06 F6 | 	mov	arg01, ##10000
2393c     A4 9A BF FD | 	call	#__system___waitus
23940     30 4E 05 F1 | 	add	fp, #48
23944     A7 12 02 FB | 	rdlong	arg01, fp
23948     09 01 08 FC | 	wrpin	#0, arg01
2394c     04 4E 05 F1 | 	add	fp, #4
23950     A7 12 02 FB | 	rdlong	arg01, fp
23954     09 01 08 FC | 	wrpin	#0, arg01
23958     04 4E 05 F1 | 	add	fp, #4
2395c     A7 12 02 FB | 	rdlong	arg01, fp
23960     09 01 08 FC | 	wrpin	#0, arg01
23964     04 4E 05 F1 | 	add	fp, #4
23968     A7 12 02 FB | 	rdlong	arg01, fp
2396c     09 00 80 FF 
23970     09 01 08 FC | 	wrpin	##4608, arg01
23974     0C 4E 85 F1 | 	sub	fp, #12
23978     A7 12 02 FB | 	rdlong	arg01, fp
2397c     59 12 62 FD | 	drvh	arg01
23980     04 4E 05 F1 | 	add	fp, #4
23984     A7 12 02 FB | 	rdlong	arg01, fp
23988     59 12 62 FD | 	drvh	arg01
2398c     04 4E 05 F1 | 	add	fp, #4
23990     A7 12 02 FB | 	rdlong	arg01, fp
23994     59 12 62 FD | 	drvh	arg01
23998     04 4E 05 F1 | 	add	fp, #4
2399c     A7 12 02 FB | 	rdlong	arg01, fp
239a0     59 12 62 FD | 	drvh	arg01
239a4     20 4E 85 F1 | 	sub	fp, #32
239a8     00 04 80 FF 
239ac     A7 20 68 FC | 	wrlong	##524304, fp
239b0     04 4E 05 F1 | 	add	fp, #4
239b4     20 03 80 FF 
239b8     A7 90 68 FC | 	wrlong	##409672, fp
239bc     14 4E 05 F1 | 	add	fp, #20
239c0     A7 1E 02 FB | 	rdlong	local01, fp
239c4     18 4E 85 F1 | 	sub	fp, #24
239c8     A7 16 02 FB | 	rdlong	arg03, fp
239cc     40 1E 62 FD | 	dirl	local01
239d0     A0 03 80 FF 
239d4     0F 91 08 FC | 	wrpin	##475208, local01
239d8     0F 17 12 FC | 	wxpin	arg03, local01
239dc     0F 01 28 FC | 	wypin	#0, local01
239e0     41 1E 62 FD | 	dirh	local01
239e4     1C 4E 05 F1 | 	add	fp, #28
239e8     A7 20 02 FB | 	rdlong	local02, fp
239ec     10 1F 82 F1 | 	sub	local01, local02
239f0     07 1E 06 F5 | 	and	local01, #7
239f4     18 1E 66 F0 | 	shl	local01, #24
239f8     78 14 06 F6 | 	mov	arg02, #120
239fc     0F 15 42 F5 | 	or	arg02, local01
23a00     14 4E 85 F1 | 	sub	fp, #20
23a04     A7 14 62 FC | 	wrlong	arg02, fp
23a08     14 4E 05 F1 | 	add	fp, #20
23a0c     A7 12 02 FB | 	rdlong	arg01, fp
23a10     10 14 26 F4 | 	bith	arg02, #16
23a14     40 12 62 FD | 	dirl	arg01
23a18     09 15 02 FC | 	wrpin	arg02, arg01
23a1c     09 3F 18 FC | 	wxpin	#31, arg01
23a20     FF FF FF FF 
23a24     09 FF 2B FC | 	wypin	##-1, arg01
23a28     41 12 62 FD | 	dirh	arg01
23a2c     04 4E 85 F1 | 	sub	fp, #4
23a30     A7 14 02 FB | 	rdlong	arg02, fp
23a34     08 4E 05 F1 | 	add	fp, #8
23a38     A7 22 02 FB | 	rdlong	local03, fp
23a3c     11 15 82 F1 | 	sub	arg02, local03
23a40     07 14 06 F5 | 	and	arg02, #7
23a44     18 14 66 F0 | 	shl	arg02, #24
23a48     14 4E 85 F1 | 	sub	fp, #20
23a4c     A7 14 62 FC | 	wrlong	arg02, fp
23a50     29 00 00 FF 
23a54     7A 14 46 F5 | 	or	arg02, ##21114
23a58     A7 14 62 FC | 	wrlong	arg02, fp
23a5c     14 4E 05 F1 | 	add	fp, #20
23a60     A7 12 02 FB | 	rdlong	arg01, fp
23a64     40 12 62 FD | 	dirl	arg01
23a68     09 15 02 FC | 	wrpin	arg02, arg01
23a6c     09 4F 18 FC | 	wxpin	#39, arg01
23a70     09 01 28 FC | 	wypin	#0, arg01
23a74     41 12 62 FD | 	dirh	arg01
23a78     28 4E 85 F1 | 	sub	fp, #40
23a7c     A7 12 02 F6 | 	mov	arg01, fp
23a80     14 4E 85 F1 | 	sub	fp, #20
23a84     0A 14 06 F6 | 	mov	arg02, #10
23a88     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
23a8c     00 12 06 F6 | 	mov	arg01, #0
23a90     00 14 06 F6 | 	mov	arg02, #0
23a94     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23a98     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1060
23a9c     64 12 06 F6 | 	mov	arg01, #100
23aa0     40 99 BF FD | 	call	#__system___waitus
23aa4     14 4E 05 F1 | 	add	fp, #20
23aa8     A7 12 02 F6 | 	mov	arg01, fp
23aac     14 4E 85 F1 | 	sub	fp, #20
23ab0     0A 14 06 F6 | 	mov	arg02, #10
23ab4     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
23ab8     0C 4E 05 F1 | 	add	fp, #12
23abc     A7 00 48 FC | 	wrbyte	#0, fp
23ac0     0C 4E 85 F1 | 	sub	fp, #12
23ac4     00 12 06 F6 | 	mov	arg01, #0
23ac8     00 14 06 F6 | 	mov	arg02, #0
23acc     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23ad0     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
23ad4     01 18 0E F2 | 	cmp	arg04, #1 wz
23ad8     B8 03 90 5D |  if_ne	jmp	#LR__3627
23adc     08 12 06 F6 | 	mov	arg01, #8
23ae0     AA 15 06 F6 | 	mov	arg02, #426
23ae4     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23ae8     FD FA E1 F8 | 	getbyte	result1, result1, #0
23aec     01 FA 0D F2 | 	cmp	result1, #1 wz
23af0     98 01 90 5D |  if_ne	jmp	#LR__3613
23af4     14 4E 05 F1 | 	add	fp, #20
23af8     A7 12 02 F6 | 	mov	arg01, fp
23afc     14 4E 85 F1 | 	sub	fp, #20
23b00     04 14 06 F6 | 	mov	arg02, #4
23b04     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
23b08     16 4E 05 F1 | 	add	fp, #22
23b0c     A7 24 C2 FA | 	rdbyte	local04, fp
23b10     16 4E 85 F1 | 	sub	fp, #22
23b14     01 24 0E F2 | 	cmp	local04, #1 wz
23b18     17 4E 05 A1 |  if_e	add	fp, #23
23b1c     A7 22 C2 AA |  if_e	rdbyte	local03, fp
23b20     17 4E 85 A1 |  if_e	sub	fp, #23
23b24     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
23b28     68 03 90 5D |  if_ne	jmp	#LR__3626
23b2c                 | ' 				for (tmr = 1000; tmr; tmr--) {
23b2c     18 4E 05 F1 | 	add	fp, #24
23b30     01 00 80 FF 
23b34     A7 D0 6B FC | 	wrlong	##1000, fp
23b38     18 4E 85 F1 | 	sub	fp, #24
23b3c                 | LR__3610
23b3c     18 4E 05 F1 | 	add	fp, #24
23b40     A7 1E 0A FB | 	rdlong	local01, fp wz
23b44     18 4E 85 F1 | 	sub	fp, #24
23b48     3C 00 90 AD |  if_e	jmp	#LR__3611
23b4c     A9 12 06 F6 | 	mov	arg01, #169
23b50     1E 14 C6 F9 | 	decod	arg02, #30
23b54     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23b58     FD 24 02 F6 | 	mov	local04, result1
23b5c     07 24 4E F7 | 	zerox	local04, #7 wz
23b60     24 00 90 AD |  if_e	jmp	#LR__3611
23b64     01 00 00 FF 
23b68     E8 13 06 F6 | 	mov	arg01, ##1000
23b6c     74 98 BF FD | 	call	#__system___waitus
23b70     18 4E 05 F1 | 	add	fp, #24
23b74     A7 24 02 FB | 	rdlong	local04, fp
23b78     01 24 86 F1 | 	sub	local04, #1
23b7c     A7 24 62 FC | 	wrlong	local04, fp
23b80     18 4E 85 F1 | 	sub	fp, #24
23b84     B4 FF 9F FD | 	jmp	#LR__3610
23b88                 | LR__3611
23b88     18 4E 05 F1 | 	add	fp, #24
23b8c     A7 24 0A FB | 	rdlong	local04, fp wz
23b90     18 4E 85 F1 | 	sub	fp, #24
23b94     4C 00 90 AD |  if_e	jmp	#LR__3612
23b98     3A 12 06 F6 | 	mov	arg01, #58
23b9c     00 14 06 F6 | 	mov	arg02, #0
23ba0     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23ba4     FD 22 02 F6 | 	mov	local03, result1
23ba8     07 22 4E F7 | 	zerox	local03, #7 wz
23bac     34 00 90 5D |  if_ne	jmp	#LR__3612
23bb0     14 4E 05 F1 | 	add	fp, #20
23bb4     A7 12 02 F6 | 	mov	arg01, fp
23bb8     14 4E 85 F1 | 	sub	fp, #20
23bbc     04 14 06 F6 | 	mov	arg02, #4
23bc0     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
23bc4     14 4E 05 F1 | 	add	fp, #20
23bc8     A7 1E C2 FA | 	rdbyte	local01, fp
23bcc     40 1E CE F7 | 	test	local01, #64 wz
23bd0     0C 24 06 56 |  if_ne	mov	local04, #12
23bd4     04 24 06 A6 |  if_e	mov	local04, #4
23bd8     08 4E 85 F1 | 	sub	fp, #8
23bdc     A7 24 42 FC | 	wrbyte	local04, fp
23be0     0C 4E 85 F1 | 	sub	fp, #12
23be4                 | LR__3612
23be4     14 24 06 FB | 	rdlong	local04, #20
23be8     18 4E 05 F1 | 	add	fp, #24
23bec     A7 24 62 FC | 	wrlong	local04, fp
23bf0     0C 4E 05 F1 | 	add	fp, #12
23bf4     A7 24 02 FB | 	rdlong	local04, fp
23bf8     1B 24 26 F4 | 	bith	local04, #27
23bfc     A7 24 62 FC | 	wrlong	local04, fp
23c00     0C 4E 85 F1 | 	sub	fp, #12
23c04     A7 24 02 FB | 	rdlong	local04, fp
23c08     18 4E 85 F1 | 	sub	fp, #24
23c0c     68 78 04 FF 
23c10     81 25 16 F2 | 	cmp	local04, ##150000001 wc
23c14     1C 4E 05 C1 |  if_b	add	fp, #28
23c18     00 01 80 CF 
23c1c     A7 08 68 CC |  if_b	wrlong	##131076, fp
23c20     1C 4E 85 C1 |  if_b	sub	fp, #28
23c24     6C 02 90 CD |  if_b	jmp	#LR__3626
23c28     18 4E 05 F1 | 	add	fp, #24
23c2c     A7 24 02 FB | 	rdlong	local04, fp
23c30     18 4E 85 F1 | 	sub	fp, #24
23c34     E1 F5 05 FF 
23c38     01 24 16 F2 | 	cmp	local04, ##200000001 wc
23c3c     1C 4E 05 C1 |  if_b	add	fp, #28
23c40     00 01 80 CF 
23c44     A7 0A 68 CC |  if_b	wrlong	##131077, fp
23c48     1C 4E 85 C1 |  if_b	sub	fp, #28
23c4c     44 02 90 CD |  if_b	jmp	#LR__3626
23c50     18 4E 05 F1 | 	add	fp, #24
23c54     A7 24 02 FB | 	rdlong	local04, fp
23c58     18 4E 85 F1 | 	sub	fp, #24
23c5c     3B 58 08 FF 
23c60     01 24 16 F2 | 	cmp	local04, ##280000001 wc
23c64     1C 4E 05 C1 |  if_b	add	fp, #28
23c68     00 01 80 CF 
23c6c     A7 0C 68 CC |  if_b	wrlong	##131078, fp
23c70     1C 4E 85 C1 |  if_b	sub	fp, #28
23c74     1C 02 90 CD |  if_b	jmp	#LR__3626
23c78     1C 4E 05 F1 | 	add	fp, #28
23c7c     80 01 80 FF 
23c80     A7 10 68 FC | 	wrlong	##196616, fp
23c84     1C 4E 85 F1 | 	sub	fp, #28
23c88     08 02 90 FD | 	jmp	#LR__3626
23c8c                 | LR__3613
23c8c     A9 12 06 F6 | 	mov	arg01, #169
23c90     00 14 06 F6 | 	mov	arg02, #0
23c94     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23c98     FD 24 E2 F8 | 	getbyte	local04, result1, #0
23c9c     02 24 16 F2 | 	cmp	local04, #2 wc
23ca0     18 00 90 3D |  if_ae	jmp	#LR__3614
23ca4     0C 4E 05 F1 | 	add	fp, #12
23ca8     A7 04 48 FC | 	wrbyte	#2, fp
23cac     04 4E 05 F1 | 	add	fp, #4
23cb0     A7 52 49 FC | 	wrbyte	#169, fp
23cb4     10 4E 85 F1 | 	sub	fp, #16
23cb8     14 00 90 FD | 	jmp	#LR__3615
23cbc                 | LR__3614
23cbc     0C 4E 05 F1 | 	add	fp, #12
23cc0     A7 02 48 FC | 	wrbyte	#1, fp
23cc4     04 4E 05 F1 | 	add	fp, #4
23cc8     A7 02 48 FC | 	wrbyte	#1, fp
23ccc     10 4E 85 F1 | 	sub	fp, #16
23cd0                 | LR__3615
23cd0                 | ' 				ty =  0x01 ; cmd =  (1) ;
23cd0                 | ' 			}
23cd0                 | ' 			for (tmr = 1000; tmr; tmr--) {
23cd0     18 4E 05 F1 | 	add	fp, #24
23cd4     01 00 80 FF 
23cd8     A7 D0 6B FC | 	wrlong	##1000, fp
23cdc     18 4E 85 F1 | 	sub	fp, #24
23ce0                 | LR__3616
23ce0     18 4E 05 F1 | 	add	fp, #24
23ce4     A7 22 0A FB | 	rdlong	local03, fp wz
23ce8     18 4E 85 F1 | 	sub	fp, #24
23cec     44 00 90 AD |  if_e	jmp	#LR__3617
23cf0     10 4E 05 F1 | 	add	fp, #16
23cf4     A7 12 C2 FA | 	rdbyte	arg01, fp
23cf8     10 4E 85 F1 | 	sub	fp, #16
23cfc     00 14 06 F6 | 	mov	arg02, #0
23d00     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23d04     FD 24 02 F6 | 	mov	local04, result1
23d08     07 24 4E F7 | 	zerox	local04, #7 wz
23d0c     24 00 90 AD |  if_e	jmp	#LR__3617
23d10     01 00 00 FF 
23d14     E8 13 06 F6 | 	mov	arg01, ##1000
23d18     C8 96 BF FD | 	call	#__system___waitus
23d1c     18 4E 05 F1 | 	add	fp, #24
23d20     A7 24 02 FB | 	rdlong	local04, fp
23d24     01 24 86 F1 | 	sub	local04, #1
23d28     A7 24 62 FC | 	wrlong	local04, fp
23d2c     18 4E 85 F1 | 	sub	fp, #24
23d30     AC FF 9F FD | 	jmp	#LR__3616
23d34                 | LR__3617
23d34     18 4E 05 F1 | 	add	fp, #24
23d38     A7 24 0A FB | 	rdlong	local04, fp wz
23d3c     18 4E 85 F1 | 	sub	fp, #24
23d40     14 00 90 AD |  if_e	jmp	#LR__3618
23d44     10 12 06 F6 | 	mov	arg01, #16
23d48     09 14 C6 F9 | 	decod	arg02, #9
23d4c     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23d50     07 FA 4D F7 | 	zerox	result1, #7 wz
23d54     0C 00 90 AD |  if_e	jmp	#LR__3619
23d58                 | LR__3618
23d58     0C 4E 05 F1 | 	add	fp, #12
23d5c     A7 00 48 FC | 	wrbyte	#0, fp
23d60     0C 4E 85 F1 | 	sub	fp, #12
23d64                 | LR__3619
23d64     14 24 06 FB | 	rdlong	local04, #20
23d68     18 4E 05 F1 | 	add	fp, #24
23d6c     A7 24 62 FC | 	wrlong	local04, fp
23d70     18 4E 85 F1 | 	sub	fp, #24
23d74     F0 FA 02 FF 
23d78     01 25 16 F2 | 	cmp	local04, ##100000001 wc
23d7c     18 00 90 3D |  if_ae	jmp	#LR__3620
23d80     24 4E 05 F1 | 	add	fp, #36
23d84     A7 24 02 FB | 	rdlong	local04, fp
23d88     1B 24 26 F4 | 	bith	local04, #27
23d8c     A7 24 62 FC | 	wrlong	local04, fp
23d90     24 4E 85 F1 | 	sub	fp, #36
23d94     2C 00 90 FD | 	jmp	#LR__3621
23d98                 | LR__3620
23d98     18 4E 05 F1 | 	add	fp, #24
23d9c     A7 24 02 FB | 	rdlong	local04, fp
23da0     18 4E 85 F1 | 	sub	fp, #24
23da4     E1 F5 05 FF 
23da8     01 24 16 F2 | 	cmp	local04, ##200000001 wc
23dac     24 4E 05 C1 |  if_b	add	fp, #36
23db0     A7 24 02 CB |  if_b	rdlong	local04, fp
23db4     80 00 04 CF 
23db8     00 24 46 C5 |  if_b	or	local04, ##134283264
23dbc     A7 24 62 CC |  if_b	wrlong	local04, fp
23dc0     24 4E 85 C1 |  if_b	sub	fp, #36
23dc4                 | LR__3621
23dc4     18 4E 05 F1 | 	add	fp, #24
23dc8     A7 24 02 FB | 	rdlong	local04, fp
23dcc     18 4E 85 F1 | 	sub	fp, #24
23dd0     F0 FA 02 FF 
23dd4     01 25 16 F2 | 	cmp	local04, ##100000001 wc
23dd8     1C 4E 05 C1 |  if_b	add	fp, #28
23ddc     00 01 80 CF 
23de0     A7 08 68 CC |  if_b	wrlong	##131076, fp
23de4     1C 4E 85 C1 |  if_b	sub	fp, #28
23de8     A8 00 90 CD |  if_b	jmp	#LR__3625
23dec     18 4E 05 F1 | 	add	fp, #24
23df0     A7 24 02 FB | 	rdlong	local04, fp
23df4     18 4E 85 F1 | 	sub	fp, #24
23df8     68 78 04 FF 
23dfc     81 25 16 F2 | 	cmp	local04, ##150000001 wc
23e00     1C 4E 05 C1 |  if_b	add	fp, #28
23e04     80 01 80 CF 
23e08     A7 0C 68 CC |  if_b	wrlong	##196614, fp
23e0c     1C 4E 85 C1 |  if_b	sub	fp, #28
23e10     80 00 90 CD |  if_b	jmp	#LR__3624
23e14     18 4E 05 F1 | 	add	fp, #24
23e18     A7 24 02 FB | 	rdlong	local04, fp
23e1c     18 4E 85 F1 | 	sub	fp, #24
23e20     E1 F5 05 FF 
23e24     01 24 16 F2 | 	cmp	local04, ##200000001 wc
23e28     1C 4E 05 C1 |  if_b	add	fp, #28
23e2c     00 02 80 CF 
23e30     A7 10 68 CC |  if_b	wrlong	##262152, fp
23e34     1C 4E 85 C1 |  if_b	sub	fp, #28
23e38     58 00 90 CD |  if_b	jmp	#LR__3623
23e3c     18 4E 05 F1 | 	add	fp, #24
23e40     A7 24 02 FB | 	rdlong	local04, fp
23e44     18 4E 85 F1 | 	sub	fp, #24
23e48     59 73 07 FF 
23e4c     81 24 16 F2 | 	cmp	local04, ##250000001 wc
23e50     1C 4E 05 C1 |  if_b	add	fp, #28
23e54     80 02 80 CF 
23e58     A7 14 68 CC |  if_b	wrlong	##327690, fp
23e5c     1C 4E 85 C1 |  if_b	sub	fp, #28
23e60     30 00 90 CD |  if_b	jmp	#LR__3622
23e64     18 4E 05 F1 | 	add	fp, #24
23e68     A7 24 02 FB | 	rdlong	local04, fp
23e6c     18 4E 85 F1 | 	sub	fp, #24
23e70     D1 F0 08 FF 
23e74     01 25 16 F2 | 	cmp	local04, ##300000001 wc
23e78     1C 4E 05 C1 |  if_b	add	fp, #28
23e7c     00 03 80 CF 
23e80     A7 18 68 CC |  if_b	wrlong	##393228, fp
23e84     1C 4E 85 F3 | 	sumc	fp, #28
23e88     80 03 80 3F 
23e8c     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
23e90     1C 4E 85 31 |  if_ae	sub	fp, #28
23e94                 | LR__3622
23e94                 | LR__3623
23e94                 | LR__3624
23e94                 | LR__3625
23e94                 | LR__3626
23e94                 | LR__3627
23e94     0C 4E 05 F1 | 	add	fp, #12
23e98     A7 24 C2 FA | 	rdbyte	local04, fp
23e9c     01 00 00 FF 
23ea0     21 E4 05 F1 | 	add	objptr, ##545
23ea4     F2 24 42 FC | 	wrbyte	local04, objptr
23ea8     A7 1E CA FA | 	rdbyte	local01, fp wz
23eac     00 24 06 56 |  if_ne	mov	local04, #0
23eb0     01 24 06 A6 |  if_e	mov	local04, #1
23eb4     20 4E 05 F1 | 	add	fp, #32
23eb8     A7 24 42 FC | 	wrbyte	local04, fp
23ebc     A7 24 C2 FA | 	rdbyte	local04, fp
23ec0     2C 4E 85 F1 | 	sub	fp, #44
23ec4     01 E4 85 F1 | 	sub	objptr, #1
23ec8     F2 24 42 FC | 	wrbyte	local04, objptr
23ecc     01 00 00 FF 
23ed0     20 E4 85 F1 | 	sub	objptr, ##544
23ed4     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1060
23ed8     34 4E 05 F1 | 	add	fp, #52
23edc     A7 12 02 FB | 	rdlong	arg01, fp
23ee0     18 4E 85 F1 | 	sub	fp, #24
23ee4     A7 14 02 FB | 	rdlong	arg02, fp
23ee8     09 15 12 FC | 	wxpin	arg02, arg01
23eec     1C 4E 05 F1 | 	add	fp, #28
23ef0     A7 12 02 FB | 	rdlong	arg01, fp
23ef4     14 4E 85 F1 | 	sub	fp, #20
23ef8     A7 14 02 FB | 	rdlong	arg02, fp
23efc     09 15 02 FC | 	wrpin	arg02, arg01
23f00                 | ' 
23f00                 | ' 		}
23f00                 | ' 	}
23f00                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
23f00                 | ' 	CardType = ty;
23f00                 | ' 	s = ty ? 0 :  0x01 ;
23f00                 | ' 	Stat = s;
23f00                 | ' 
23f00                 | ' 	deselect();
23f00                 | ' 
23f00                 | ' 
23f00                 | ' 	_wxpin( PIN_CLK, ck_div );
23f00                 | ' 	_wrpin( PIN_DI, spm_tx );
23f00                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
23f00                 | ' 	return s;
23f00     08 4E 05 F1 | 	add	fp, #8
23f04     A7 FA C1 FA | 	rdbyte	result1, fp
23f08     2C 4E 85 F1 | 	sub	fp, #44
23f0c                 | LR__3628
23f0c     A7 F0 03 F6 | 	mov	ptra, fp
23f10     B2 00 A0 FD | 	call	#popregs_
23f14                 | _fatfs_cc_disk_initialize_ret
23f14     2D 00 64 FD | 	ret
23f18                 | 
23f18                 | _fatfs_cc_disk_read
23f18     05 4A 05 F6 | 	mov	COUNT_, #5
23f1c     A8 00 A0 FD | 	call	#pushregs_
23f20     0A 1F 02 F6 | 	mov	local01, arg02
23f24     0B 21 02 F6 | 	mov	local02, arg03
23f28     0C 23 02 F6 | 	mov	local03, arg04
23f2c     00 12 0E F2 | 	cmp	arg01, #0 wz
23f30     01 FA 05 56 |  if_ne	mov	result1, #1
23f34                 | ' 
23f34                 | ' 	return Stat;
23f34     01 00 00 AF 
23f38     20 E4 05 A1 |  if_e	add	objptr, ##544
23f3c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
23f40     01 00 00 AF 
23f44     20 E4 85 A1 |  if_e	sub	objptr, ##544
23f48     FD FA E1 F8 | 	getbyte	result1, result1, #0
23f4c     01 FA CD F7 | 	test	result1, #1 wz
23f50     03 FA 05 56 |  if_ne	mov	result1, #3
23f54     84 00 90 5D |  if_ne	jmp	#LR__3632
23f58     01 00 00 FF 
23f5c     21 E4 05 F1 | 	add	objptr, ##545
23f60     F2 24 C2 FA | 	rdbyte	local04, objptr
23f64     01 00 00 FF 
23f68     21 E4 85 F1 | 	sub	objptr, ##545
23f6c     08 24 CE F7 | 	test	local04, #8 wz
23f70     09 20 66 A0 |  if_e	shl	local02, #9
23f74     02 22 16 F2 | 	cmp	local03, #2 wc
23f78     12 24 06 36 |  if_ae	mov	local04, #18
23f7c     11 24 06 C6 |  if_b	mov	local04, #17
23f80     10 15 02 F6 | 	mov	arg02, local02
23f84     12 13 02 F6 | 	mov	arg01, local04
23f88     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23f8c     FD 26 02 F6 | 	mov	local05, result1
23f90     07 26 4E F7 | 	zerox	local05, #7 wz
23f94     30 00 90 5D |  if_ne	jmp	#LR__3631
23f98                 | ' 		do {
23f98                 | LR__3630
23f98     0F 13 02 F6 | 	mov	arg01, local01
23f9c     09 14 C6 F9 | 	decod	arg02, #9
23fa0     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1068
23fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
23fa8     01 00 00 5F 
23fac     00 1E 06 51 |  if_ne	add	local01, ##512
23fb0     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3630
23fb4     12 25 E2 F8 | 	getbyte	local04, local04, #0
23fb8     12 24 0E F2 | 	cmp	local04, #18 wz
23fbc     0C 12 06 A6 |  if_e	mov	arg01, #12
23fc0     00 14 06 A6 |  if_e	mov	arg02, #0
23fc4     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1074
23fc8                 | LR__3631
23fc8     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1060
23fcc                 | ' 	}
23fcc                 | ' 	deselect();
23fcc                 | ' 
23fcc                 | ' 	return count ? RES_ERROR : RES_OK;
23fcc     00 22 0E F2 | 	cmp	local03, #0 wz
23fd0     01 26 06 56 |  if_ne	mov	local05, #1
23fd4     00 26 06 A6 |  if_e	mov	local05, #0
23fd8     13 FB 01 F6 | 	mov	result1, local05
23fdc                 | LR__3632
23fdc     A7 F0 03 F6 | 	mov	ptra, fp
23fe0     B2 00 A0 FD | 	call	#popregs_
23fe4                 | _fatfs_cc_disk_read_ret
23fe4     2D 00 64 FD | 	ret
23fe8                 | 
23fe8                 | _fatfs_cc_disk_write
23fe8     04 4A 05 F6 | 	mov	COUNT_, #4
23fec     A8 00 A0 FD | 	call	#pushregs_
23ff0     0A 1F 02 F6 | 	mov	local01, arg02
23ff4     0C 21 02 F6 | 	mov	local02, arg04
23ff8     0B 23 02 F6 | 	mov	local03, arg03
23ffc     00 12 0E F2 | 	cmp	arg01, #0 wz
24000     01 FA 05 56 |  if_ne	mov	result1, #1
24004                 | ' 
24004                 | ' 	return Stat;
24004     01 00 00 AF 
24008     20 E4 05 A1 |  if_e	add	objptr, ##544
2400c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
24010     01 00 00 AF 
24014     20 E4 85 A1 |  if_e	sub	objptr, ##544
24018     FD FA E1 F8 | 	getbyte	result1, result1, #0
2401c     01 FA CD F7 | 	test	result1, #1 wz
24020     03 FA 05 56 |  if_ne	mov	result1, #3
24024     D4 00 90 5D |  if_ne	jmp	#LR__3644
24028     01 00 00 FF 
2402c     21 E4 05 F1 | 	add	objptr, ##545
24030     F2 16 C2 FA | 	rdbyte	arg03, objptr
24034     01 00 00 FF 
24038     21 E4 85 F1 | 	sub	objptr, ##545
2403c     08 16 CE F7 | 	test	arg03, #8 wz
24040     09 22 66 A0 |  if_e	shl	local03, #9
24044     01 20 0E F2 | 	cmp	local02, #1 wz
24048     30 00 90 5D |  if_ne	jmp	#LR__3640
2404c     18 12 06 F6 | 	mov	arg01, #24
24050     11 15 02 F6 | 	mov	arg02, local03
24054     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1074
24058     FD 24 02 F6 | 	mov	local04, result1
2405c     07 24 4E F7 | 	zerox	local04, #7 wz
24060     84 00 90 5D |  if_ne	jmp	#LR__3643
24064     0F 13 02 F6 | 	mov	arg01, local01
24068     FE 14 06 F6 | 	mov	arg02, #254
2406c     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1070
24070     00 FA 0D F2 | 	cmp	result1, #0 wz
24074     00 20 06 56 |  if_ne	mov	local02, #0
24078     6C 00 90 FD | 	jmp	#LR__3643
2407c                 | LR__3640
2407c     01 00 00 FF 
24080     21 E4 05 F1 | 	add	objptr, ##545
24084     F2 24 C2 FA | 	rdbyte	local04, objptr
24088     01 00 00 FF 
2408c     21 E4 85 F1 | 	sub	objptr, ##545
24090     06 24 CE F7 | 	test	local04, #6 wz
24094     97 12 06 56 |  if_ne	mov	arg01, #151
24098     10 15 02 56 |  if_ne	mov	arg02, local02
2409c     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1074
240a0     11 15 02 F6 | 	mov	arg02, local03
240a4     19 12 06 F6 | 	mov	arg01, #25
240a8     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1074
240ac     FD 24 02 F6 | 	mov	local04, result1
240b0     07 24 4E F7 | 	zerox	local04, #7 wz
240b4     30 00 90 5D |  if_ne	jmp	#LR__3642
240b8                 | ' 			do {
240b8                 | LR__3641
240b8     0F 13 02 F6 | 	mov	arg01, local01
240bc     FC 14 06 F6 | 	mov	arg02, #252
240c0     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1070
240c4     00 FA 0D F2 | 	cmp	result1, #0 wz
240c8     01 00 00 5F 
240cc     00 1E 06 51 |  if_ne	add	local01, ##512
240d0     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3641
240d4     00 12 06 F6 | 	mov	arg01, #0
240d8     FD 14 06 F6 | 	mov	arg02, #253
240dc     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1070
240e0     00 FA 0D F2 | 	cmp	result1, #0 wz
240e4     01 20 06 A6 |  if_e	mov	local02, #1
240e8                 | LR__3642
240e8                 | LR__3643
240e8     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1060
240ec                 | ' 				count = 1;
240ec                 | ' 		}
240ec                 | ' 	}
240ec                 | ' 	deselect();
240ec                 | ' 
240ec                 | ' 	return count ? RES_ERROR : RES_OK;
240ec     00 20 0E F2 | 	cmp	local02, #0 wz
240f0     01 24 06 56 |  if_ne	mov	local04, #1
240f4     00 24 06 A6 |  if_e	mov	local04, #0
240f8     12 FB 01 F6 | 	mov	result1, local04
240fc                 | LR__3644
240fc     A7 F0 03 F6 | 	mov	ptra, fp
24100     B2 00 A0 FD | 	call	#popregs_
24104                 | _fatfs_cc_disk_write_ret
24104     2D 00 64 FD | 	ret
24108                 | 
24108                 | _fatfs_cc_disk_ioctl
24108     01 4A 05 F6 | 	mov	COUNT_, #1
2410c     A8 00 A0 FD | 	call	#pushregs_
24110     30 F0 07 F1 | 	add	ptra, #48
24114     04 4E 05 F1 | 	add	fp, #4
24118     A7 12 42 FC | 	wrbyte	arg01, fp
2411c     04 4E 05 F1 | 	add	fp, #4
24120     A7 14 42 FC | 	wrbyte	arg02, fp
24124     04 4E 05 F1 | 	add	fp, #4
24128     A7 16 62 FC | 	wrlong	arg03, fp
2412c     08 4E 85 F1 | 	sub	fp, #8
24130     A7 12 CA FA | 	rdbyte	arg01, fp wz
24134     04 4E 85 F1 | 	sub	fp, #4
24138     01 FA 05 56 |  if_ne	mov	result1, #1
2413c                 | ' 
2413c                 | ' 	return Stat;
2413c     01 00 00 AF 
24140     20 E4 05 A1 |  if_e	add	objptr, ##544
24144     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
24148     01 00 00 AF 
2414c     20 E4 85 A1 |  if_e	sub	objptr, ##544
24150     FD FA E1 F8 | 	getbyte	result1, result1, #0
24154     01 FA CD F7 | 	test	result1, #1 wz
24158     03 FA 05 56 |  if_ne	mov	result1, #3
2415c     E4 01 90 5D |  if_ne	jmp	#LR__3658
24160     10 4E 05 F1 | 	add	fp, #16
24164     A7 02 68 FC | 	wrlong	#1, fp
24168                 | ' 
24168                 | ' 	res = RES_ERROR;
24168                 | ' 	switch (ctrl) {
24168     08 4E 85 F1 | 	sub	fp, #8
2416c     A7 1E C2 FA | 	rdbyte	local01, fp
24170     08 4E 85 F1 | 	sub	fp, #8
24174     04 1E 26 F3 | 	fle	local01, #4
24178     30 1E 62 FD | 	jmprel	local01
2417c                 | LR__3650
2417c     10 00 90 FD | 	jmp	#LR__3651
24180     24 00 90 FD | 	jmp	#LR__3652
24184     A0 01 90 FD | 	jmp	#LR__3656
24188     80 01 90 FD | 	jmp	#LR__3655
2418c     98 01 90 FD | 	jmp	#LR__3656
24190                 | LR__3651
24190     B4 79 B0 FD | 	call	#_fatfs_cc_select_1064
24194     00 FA 0D F2 | 	cmp	result1, #0 wz
24198     10 4E 05 51 |  if_ne	add	fp, #16
2419c     A7 00 68 5C |  if_ne	wrlong	#0, fp
241a0     10 4E 85 51 |  if_ne	sub	fp, #16
241a4                 | ' 			break;
241a4     8C 01 90 FD | 	jmp	#LR__3657
241a8                 | LR__3652
241a8     09 12 06 F6 | 	mov	arg01, #9
241ac     00 14 06 F6 | 	mov	arg02, #0
241b0     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1074
241b4     FD 1E 02 F6 | 	mov	local01, result1
241b8     07 1E 4E F7 | 	zerox	local01, #7 wz
241bc     74 01 90 5D |  if_ne	jmp	#LR__3657
241c0     18 4E 05 F1 | 	add	fp, #24
241c4     A7 12 02 F6 | 	mov	arg01, fp
241c8     18 4E 85 F1 | 	sub	fp, #24
241cc     10 14 06 F6 | 	mov	arg02, #16
241d0     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1068
241d4     00 FA 0D F2 | 	cmp	result1, #0 wz
241d8     58 01 90 AD |  if_e	jmp	#LR__3657
241dc     18 4E 05 F1 | 	add	fp, #24
241e0     A7 1E C2 FA | 	rdbyte	local01, fp
241e4     18 4E 85 F1 | 	sub	fp, #24
241e8     06 1E 46 F0 | 	shr	local01, #6
241ec     01 1E 0E F2 | 	cmp	local01, #1 wz
241f0     5C 00 90 5D |  if_ne	jmp	#LR__3653
241f4     21 4E 05 F1 | 	add	fp, #33
241f8     A7 1E C2 FA | 	rdbyte	local01, fp
241fc     01 4E 85 F1 | 	sub	fp, #1
24200     A7 FA C1 FA | 	rdbyte	result1, fp
24204     FD FA 31 F9 | 	getword	result1, result1, #0
24208     08 FA 65 F0 | 	shl	result1, #8
2420c     FD 1E 02 F1 | 	add	local01, result1
24210     01 4E 85 F1 | 	sub	fp, #1
24214     A7 FA C1 FA | 	rdbyte	result1, fp
24218     3F FA 05 F5 | 	and	result1, #63
2421c     10 FA 65 F0 | 	shl	result1, #16
24220     FD 1E 02 F1 | 	add	local01, result1
24224     01 1E 06 F1 | 	add	local01, #1
24228     09 4E 05 F1 | 	add	fp, #9
2422c     A7 1E 62 FC | 	wrlong	local01, fp
24230     1C 4E 85 F1 | 	sub	fp, #28
24234     A7 1E 02 FB | 	rdlong	local01, fp
24238     1C 4E 05 F1 | 	add	fp, #28
2423c     A7 FA 01 FB | 	rdlong	result1, fp
24240     28 4E 85 F1 | 	sub	fp, #40
24244     0A FA 65 F0 | 	shl	result1, #10
24248     0F FB 61 FC | 	wrlong	result1, local01
2424c     AC 00 90 FD | 	jmp	#LR__3654
24250                 | LR__3653
24250     1D 4E 05 F1 | 	add	fp, #29
24254     A7 1E C2 FA | 	rdbyte	local01, fp
24258     0F 1F 42 F8 | 	getnib	local01, local01, #0
2425c     05 4E 05 F1 | 	add	fp, #5
24260     A7 FA C1 FA | 	rdbyte	result1, fp
24264     80 FA 05 F5 | 	and	result1, #128
24268     07 FA C5 F0 | 	sar	result1, #7
2426c     FD 1E 02 F1 | 	add	local01, result1
24270     01 4E 85 F1 | 	sub	fp, #1
24274     A7 FA C1 FA | 	rdbyte	result1, fp
24278     03 FA 05 F5 | 	and	result1, #3
2427c     01 FA 65 F0 | 	shl	result1, #1
24280     FD 1E 02 F1 | 	add	local01, result1
24284     02 1E 06 F1 | 	add	local01, #2
24288     0D 4E 85 F1 | 	sub	fp, #13
2428c     A7 1E 42 FC | 	wrbyte	local01, fp
24290     0C 4E 05 F1 | 	add	fp, #12
24294     A7 1E C2 FA | 	rdbyte	local01, fp
24298     06 1E 46 F0 | 	shr	local01, #6
2429c     01 4E 85 F1 | 	sub	fp, #1
242a0     A7 FA C1 FA | 	rdbyte	result1, fp
242a4     FD FA 31 F9 | 	getword	result1, result1, #0
242a8     02 FA 65 F0 | 	shl	result1, #2
242ac     FD 1E 02 F1 | 	add	local01, result1
242b0     01 4E 85 F1 | 	sub	fp, #1
242b4     A7 FA C1 FA | 	rdbyte	result1, fp
242b8     03 FA 05 F5 | 	and	result1, #3
242bc     FD FA 31 F9 | 	getword	result1, result1, #0
242c0     0A FA 65 F0 | 	shl	result1, #10
242c4     FD 1E 02 F1 | 	add	local01, result1
242c8     01 1E 06 F1 | 	add	local01, #1
242cc     0A 4E 05 F1 | 	add	fp, #10
242d0     A7 1E 62 FC | 	wrlong	local01, fp
242d4     1C 4E 85 F1 | 	sub	fp, #28
242d8     A7 1E 02 FB | 	rdlong	local01, fp
242dc     1C 4E 05 F1 | 	add	fp, #28
242e0     A7 FA 01 FB | 	rdlong	result1, fp
242e4     14 4E 85 F1 | 	sub	fp, #20
242e8     A7 16 C2 FA | 	rdbyte	arg03, fp
242ec     14 4E 85 F1 | 	sub	fp, #20
242f0     09 16 86 F1 | 	sub	arg03, #9
242f4     0B FB 61 F0 | 	shl	result1, arg03
242f8     0F FB 61 FC | 	wrlong	result1, local01
242fc                 | LR__3654
242fc     10 4E 05 F1 | 	add	fp, #16
24300     A7 00 68 FC | 	wrlong	#0, fp
24304     10 4E 85 F1 | 	sub	fp, #16
24308                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
24308                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
24308                 | ' 					*(LBA_t*)buff = cs << (n - 9);
24308                 | ' 				}
24308                 | ' 				res = RES_OK;
24308                 | ' 			}
24308                 | ' 			break;
24308     28 00 90 FD | 	jmp	#LR__3657
2430c                 | LR__3655
2430c     0C 4E 05 F1 | 	add	fp, #12
24310     A7 1E 02 FB | 	rdlong	local01, fp
24314     0F 01 69 FC | 	wrlong	#128, local01
24318     04 4E 05 F1 | 	add	fp, #4
2431c     A7 00 68 FC | 	wrlong	#0, fp
24320     10 4E 85 F1 | 	sub	fp, #16
24324                 | ' 			*(DWORD*)buff = 128;
24324                 | ' 			res = RES_OK;
24324                 | ' 			break;
24324     0C 00 90 FD | 	jmp	#LR__3657
24328                 | LR__3656
24328     10 4E 05 F1 | 	add	fp, #16
2432c     A7 08 68 FC | 	wrlong	#4, fp
24330     10 4E 85 F1 | 	sub	fp, #16
24334                 | LR__3657
24334     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1060
24338                 | ' 			res = RES_PARERR;
24338                 | ' 	}
24338                 | ' 
24338                 | ' 	deselect();
24338                 | ' 
24338                 | ' 	return res;
24338     10 4E 05 F1 | 	add	fp, #16
2433c     A7 FA 01 FB | 	rdlong	result1, fp
24340     10 4E 85 F1 | 	sub	fp, #16
24344                 | LR__3658
24344     A7 F0 03 F6 | 	mov	ptra, fp
24348     B2 00 A0 FD | 	call	#popregs_
2434c                 | _fatfs_cc_disk_ioctl_ret
2434c     2D 00 64 FD | 	ret
24350                 | 
24350                 | _fatfs_cc_disk_setpins
24350     00 12 0E F2 | 	cmp	arg01, #0 wz
24354     01 FA 65 56 |  if_ne	neg	result1, #1
24358     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2435c     01 00 00 FF 
24360     10 E4 05 F1 | 	add	objptr, ##528
24364     F2 14 62 FC | 	wrlong	arg02, objptr
24368     04 E4 05 F1 | 	add	objptr, #4
2436c     F2 16 62 FC | 	wrlong	arg03, objptr
24370     04 E4 05 F1 | 	add	objptr, #4
24374     F2 18 62 FC | 	wrlong	arg04, objptr
24378     04 E4 05 F1 | 	add	objptr, #4
2437c     F2 1A 62 FC | 	wrlong	arg05, objptr
24380     01 00 00 FF 
24384     1C E4 85 F1 | 	sub	objptr, ##540
24388     00 FA 05 F6 | 	mov	result1, #0
2438c                 | _fatfs_cc_disk_setpins_ret
2438c     2D 00 64 FD | 	ret
24390                 | 
24390                 | _fatfs_cc_tchar2uni
24390     09 01 02 FB | 	rdlong	_var01, arg01
24394     00 03 02 F6 | 	mov	_var02, _var01
24398     01 00 06 F1 | 	add	_var01, #1
2439c     00 05 02 F6 | 	mov	_var03, _var01
243a0     01 07 C2 FA | 	rdbyte	_var04, _var02
243a4     80 06 CE F7 | 	test	_var04, #128 wz
243a8     E8 00 90 AD |  if_e	jmp	#LR__3667
243ac     03 09 02 F6 | 	mov	_var05, _var04
243b0     E0 08 06 F5 | 	and	_var05, #224
243b4     C0 08 0E F2 | 	cmp	_var05, #192 wz
243b8     1F 06 06 A5 |  if_e	and	_var04, #31
243bc     01 0A 06 A6 |  if_e	mov	_var06, #1
243c0     34 00 90 AD |  if_e	jmp	#LR__3661
243c4     03 09 02 F6 | 	mov	_var05, _var04
243c8     F0 08 06 F5 | 	and	_var05, #240
243cc     E0 08 0E F2 | 	cmp	_var05, #224 wz
243d0     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
243d4     02 0A 06 A6 |  if_e	mov	_var06, #2
243d8     1C 00 90 AD |  if_e	jmp	#LR__3660
243dc     03 09 02 F6 | 	mov	_var05, _var04
243e0     F8 08 06 F5 | 	and	_var05, #248
243e4     F0 08 0E F2 | 	cmp	_var05, #240 wz
243e8     07 06 06 A5 |  if_e	and	_var04, #7
243ec     03 0A 06 A6 |  if_e	mov	_var06, #3
243f0                 | ' 			return 0xFFFFFFFF;
243f0     01 FA 65 56 |  if_ne	neg	result1, #1
243f4     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
243f8                 | LR__3660
243f8                 | LR__3661
243f8                 | ' 		}
243f8                 | ' 		do {
243f8                 | LR__3662
243f8     02 0D C2 FA | 	rdbyte	_var07, _var03
243fc     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
24400     C0 08 06 F5 | 	and	_var05, #192
24404     80 08 0E F2 | 	cmp	_var05, #128 wz
24408     01 04 06 F1 | 	add	_var03, #1
2440c     01 FA 65 56 |  if_ne	neg	result1, #1
24410     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
24414     06 06 66 F0 | 	shl	_var04, #6
24418     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2441c     3F 02 06 F5 | 	and	_var02, #63
24420     01 07 42 F5 | 	or	_var04, _var02
24424     F4 0B 6E FB | 	djnz	_var06, #LR__3662
24428     80 06 16 F2 | 	cmp	_var04, #128 wc
2442c     24 00 90 CD |  if_b	jmp	#LR__3664
24430     6C 00 00 FF 
24434     00 06 16 F2 | 	cmp	_var04, ##55296 wc
24438     0C 00 90 CD |  if_b	jmp	#LR__3663
2443c     70 00 00 FF 
24440     00 06 16 F2 | 	cmp	_var04, ##57344 wc
24444     0C 00 90 CD |  if_b	jmp	#LR__3664
24448                 | LR__3663
24448     80 08 00 FF 
2444c     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
24450     08 00 90 CD |  if_b	jmp	#LR__3665
24454                 | LR__3664
24454     01 FA 65 F6 | 	neg	result1, #1
24458     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2445c                 | LR__3665
2445c     80 00 00 FF 
24460     00 06 16 F2 | 	cmp	_var04, ##65536 wc
24464     2C 00 90 CD |  if_b	jmp	#LR__3666
24468     03 03 02 F6 | 	mov	_var02, _var04
2446c     80 00 00 FF 
24470     00 02 86 F1 | 	sub	_var02, ##65536
24474     06 02 66 F0 | 	shl	_var02, #6
24478     80 FF 01 FF 
2447c     00 02 06 F5 | 	and	_var02, ##67043328
24480     6E 00 6C FF 
24484     00 08 06 F6 | 	mov	_var05, ##-671032320
24488     01 09 42 F5 | 	or	_var05, _var02
2448c     09 06 46 F7 | 	zerox	_var04, #9
24490     04 07 42 F5 | 	or	_var04, _var05
24494                 | LR__3666
24494                 | LR__3667
24494     09 05 62 FC | 	wrlong	_var03, arg01
24498                 | ' 	}
24498                 | ' #line 811 "ff.c"
24498                 | ' 	*str = p;
24498                 | ' 	return uc;
24498     03 FB 01 F6 | 	mov	result1, _var04
2449c                 | _fatfs_cc_tchar2uni_ret
2449c     2D 00 64 FD | 	ret
244a0                 | 
244a0                 | _fatfs_cc_put_utf
244a0     80 12 16 F2 | 	cmp	arg01, #128 wc
244a4     18 00 90 3D |  if_ae	jmp	#LR__3670
244a8     01 16 16 F2 | 	cmp	arg03, #1 wc
244ac     00 FA 05 C6 |  if_b	mov	result1, #0
244b0     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
244b4     0A 13 42 FC | 	wrbyte	arg01, arg02
244b8                 | ' 		*buf = (TCHAR)chr;
244b8                 | ' 		return 1;
244b8     01 FA 05 F6 | 	mov	result1, #1
244bc     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
244c0                 | LR__3670
244c0     04 00 00 FF 
244c4     00 12 16 F2 | 	cmp	arg01, ##2048 wc
244c8     40 00 90 3D |  if_ae	jmp	#LR__3671
244cc     02 16 16 F2 | 	cmp	arg03, #2 wc
244d0     00 FA 05 C6 |  if_b	mov	result1, #0
244d4     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
244d8     09 FB 01 F6 | 	mov	result1, arg01
244dc     06 FA 45 F0 | 	shr	result1, #6
244e0     1F FA 05 F5 | 	and	result1, #31
244e4     C0 16 06 F6 | 	mov	arg03, #192
244e8     FD 16 42 F5 | 	or	arg03, result1
244ec     0A 17 42 FC | 	wrbyte	arg03, arg02
244f0     01 14 06 F1 | 	add	arg02, #1
244f4     3F 12 06 F5 | 	and	arg01, #63
244f8     80 FA 05 F6 | 	mov	result1, #128
244fc     09 FB 41 F5 | 	or	result1, arg01
24500     0A FB 41 FC | 	wrbyte	result1, arg02
24504                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
24504                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
24504                 | ' 		return 2;
24504     02 FA 05 F6 | 	mov	result1, #2
24508     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2450c                 | LR__3671
2450c     80 00 00 FF 
24510     00 12 16 F2 | 	cmp	arg01, ##65536 wc
24514     70 00 90 3D |  if_ae	jmp	#LR__3674
24518     03 16 16 F2 | 	cmp	arg03, #3 wc
2451c     18 00 90 CD |  if_b	jmp	#LR__3672
24520     6C 00 00 FF 
24524     00 12 16 F2 | 	cmp	arg01, ##55296 wc
24528     14 00 90 CD |  if_b	jmp	#LR__3673
2452c     70 00 00 FF 
24530     00 12 16 F2 | 	cmp	arg01, ##57344 wc
24534     08 00 90 3D |  if_ae	jmp	#LR__3673
24538                 | LR__3672
24538     00 FA 05 F6 | 	mov	result1, #0
2453c     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
24540                 | LR__3673
24540     09 FB 59 F8 | 	getnib	result1, arg01, #3
24544     E0 16 06 F6 | 	mov	arg03, #224
24548     FD 16 42 F5 | 	or	arg03, result1
2454c     0A 17 42 FC | 	wrbyte	arg03, arg02
24550     01 14 06 F1 | 	add	arg02, #1
24554     09 FB 01 F6 | 	mov	result1, arg01
24558     06 FA 45 F0 | 	shr	result1, #6
2455c     3F FA 05 F5 | 	and	result1, #63
24560     80 16 06 F6 | 	mov	arg03, #128
24564     FD 16 42 F5 | 	or	arg03, result1
24568     0A 17 42 FC | 	wrbyte	arg03, arg02
2456c     01 14 06 F1 | 	add	arg02, #1
24570     3F 12 06 F5 | 	and	arg01, #63
24574     80 FA 05 F6 | 	mov	result1, #128
24578     09 FB 41 F5 | 	or	result1, arg01
2457c     0A FB 41 FC | 	wrbyte	result1, arg02
24580                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
24580                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
24580                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
24580                 | ' 		return 3;
24580     03 FA 05 F6 | 	mov	result1, #3
24584     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
24588                 | LR__3674
24588     04 16 16 F2 | 	cmp	arg03, #4 wc
2458c     00 FA 05 C6 |  if_b	mov	result1, #0
24590     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
24594     09 01 02 F6 | 	mov	_var01, arg01
24598     E0 01 06 F4 | 	bitl	_var01, #480
2459c     00 00 6C FF 
245a0     00 00 86 F1 | 	sub	_var01, ##-671088640
245a4     06 00 46 F0 | 	shr	_var01, #6
245a8     09 13 32 F9 | 	getword	arg01, arg01, #0
245ac     6E 00 00 FF 
245b0     00 12 86 F1 | 	sub	arg01, ##56320
245b4     00 08 00 FF 
245b8     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
245bc     02 00 00 CF 
245c0     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
245c4     00 FA 05 36 |  if_ae	mov	result1, #0
245c8     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
245cc     09 01 42 F5 | 	or	_var01, arg01
245d0     80 00 00 FF 
245d4     00 00 06 F1 | 	add	_var01, ##65536
245d8     00 FB 01 F6 | 	mov	result1, _var01
245dc     12 FA 45 F0 | 	shr	result1, #18
245e0     07 FA 05 F5 | 	and	result1, #7
245e4     F0 16 06 F6 | 	mov	arg03, #240
245e8     FD 16 42 F5 | 	or	arg03, result1
245ec     0A 17 42 FC | 	wrbyte	arg03, arg02
245f0     01 14 06 F1 | 	add	arg02, #1
245f4     00 FB 01 F6 | 	mov	result1, _var01
245f8     0C FA 45 F0 | 	shr	result1, #12
245fc     3F FA 05 F5 | 	and	result1, #63
24600     80 16 06 F6 | 	mov	arg03, #128
24604     FD 16 42 F5 | 	or	arg03, result1
24608     0A 17 42 FC | 	wrbyte	arg03, arg02
2460c     01 14 06 F1 | 	add	arg02, #1
24610     00 FB 01 F6 | 	mov	result1, _var01
24614     06 FA 45 F0 | 	shr	result1, #6
24618     3F FA 05 F5 | 	and	result1, #63
2461c     80 16 06 F6 | 	mov	arg03, #128
24620     FD 16 42 F5 | 	or	arg03, result1
24624     0A 17 42 FC | 	wrbyte	arg03, arg02
24628     01 14 06 F1 | 	add	arg02, #1
2462c     3F 00 06 F5 | 	and	_var01, #63
24630     80 FA 05 F6 | 	mov	result1, #128
24634     00 FB 41 F5 | 	or	result1, _var01
24638     0A FB 41 FC | 	wrbyte	result1, arg02
2463c                 | ' 	chr = (hc | chr) + 0x10000;
2463c                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2463c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2463c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2463c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2463c                 | ' 	return 4;
2463c     04 FA 05 F6 | 	mov	result1, #4
24640                 | _fatfs_cc_put_utf_ret
24640     2D 00 64 FD | 	ret
24644                 | 
24644                 | _fatfs_cc_sync_window
24644     02 4A 05 F6 | 	mov	COUNT_, #2
24648     A8 00 A0 FD | 	call	#pushregs_
2464c     09 1F 02 F6 | 	mov	local01, arg01
24650     00 20 06 F6 | 	mov	local02, #0
24654     03 1E 06 F1 | 	add	local01, #3
24658     0F FB C9 FA | 	rdbyte	result1, local01 wz
2465c     03 1E 86 F1 | 	sub	local01, #3
24660     A4 00 90 AD |  if_e	jmp	#LR__3682
24664     01 1E 06 F1 | 	add	local01, #1
24668     0F 13 C2 FA | 	rdbyte	arg01, local01
2466c     33 1E 06 F1 | 	add	local01, #51
24670     0F 15 02 F6 | 	mov	arg02, local01
24674     04 1E 86 F1 | 	sub	local01, #4
24678     0F 17 02 FB | 	rdlong	arg03, local01
2467c     30 1E 86 F1 | 	sub	local01, #48
24680     01 18 06 F6 | 	mov	arg04, #1
24684     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
24688     00 FA 0D F2 | 	cmp	result1, #0 wz
2468c     74 00 90 5D |  if_ne	jmp	#LR__3680
24690     03 1E 06 F1 | 	add	local01, #3
24694     0F 01 48 FC | 	wrbyte	#0, local01
24698     2D 1E 06 F1 | 	add	local01, #45
2469c     0F FB 01 FB | 	rdlong	result1, local01
246a0     0C 1E 86 F1 | 	sub	local01, #12
246a4     0F 19 02 FB | 	rdlong	arg04, local01
246a8     0C FB 81 F1 | 	sub	result1, arg04
246ac     08 1E 86 F1 | 	sub	local01, #8
246b0     0F 19 02 FB | 	rdlong	arg04, local01
246b4     1C 1E 86 F1 | 	sub	local01, #28
246b8     0C FB 11 F2 | 	cmp	result1, arg04 wc
246bc     48 00 90 3D |  if_ae	jmp	#LR__3681
246c0     02 1E 06 F1 | 	add	local01, #2
246c4     0F 19 C2 FA | 	rdbyte	arg04, local01
246c8     02 1E 86 F1 | 	sub	local01, #2
246cc     02 18 0E F2 | 	cmp	arg04, #2 wz
246d0     34 00 90 5D |  if_ne	jmp	#LR__3681
246d4     01 1E 06 F1 | 	add	local01, #1
246d8     0F 13 C2 FA | 	rdbyte	arg01, local01
246dc     33 1E 06 F1 | 	add	local01, #51
246e0     0F 15 02 F6 | 	mov	arg02, local01
246e4     04 1E 86 F1 | 	sub	local01, #4
246e8     0F 17 02 FB | 	rdlong	arg03, local01
246ec     14 1E 86 F1 | 	sub	local01, #20
246f0     0F 1F 02 FB | 	rdlong	local01, local01
246f4     0F 17 02 F1 | 	add	arg03, local01
246f8     01 18 06 F6 | 	mov	arg04, #1
246fc     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
24700     04 00 90 FD | 	jmp	#LR__3681
24704                 | LR__3680
24704     01 20 06 F6 | 	mov	local02, #1
24708                 | LR__3681
24708                 | LR__3682
24708                 | ' 			res = FR_DISK_ERR;
24708                 | ' 		}
24708                 | ' 	}
24708                 | ' 	return res;
24708     10 FB 01 F6 | 	mov	result1, local02
2470c     A7 F0 03 F6 | 	mov	ptra, fp
24710     B2 00 A0 FD | 	call	#popregs_
24714                 | _fatfs_cc_sync_window_ret
24714     2D 00 64 FD | 	ret
24718                 | 
24718                 | _fatfs_cc_move_window
24718     03 4A 05 F6 | 	mov	COUNT_, #3
2471c     A8 00 A0 FD | 	call	#pushregs_
24720     09 1F 02 F6 | 	mov	local01, arg01
24724     0A 21 02 F6 | 	mov	local02, arg02
24728     00 22 06 F6 | 	mov	local03, #0
2472c     30 1E 06 F1 | 	add	local01, #48
24730     0F 19 02 FB | 	rdlong	arg04, local01
24734     30 1E 86 F1 | 	sub	local01, #48
24738     0C 21 0A F2 | 	cmp	local02, arg04 wz
2473c     40 00 90 AD |  if_e	jmp	#LR__3691
24740     0F 13 02 F6 | 	mov	arg01, local01
24744     FC FE BF FD | 	call	#_fatfs_cc_sync_window
24748     FD 22 0A F6 | 	mov	local03, result1 wz
2474c     30 00 90 5D |  if_ne	jmp	#LR__3690
24750     01 1E 06 F1 | 	add	local01, #1
24754     0F 13 C2 FA | 	rdbyte	arg01, local01
24758     33 1E 06 F1 | 	add	local01, #51
2475c     0F 15 02 F6 | 	mov	arg02, local01
24760     10 17 02 F6 | 	mov	arg03, local02
24764     01 18 06 F6 | 	mov	arg04, #1
24768     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2476c     00 FA 0D F2 | 	cmp	result1, #0 wz
24770     01 20 66 56 |  if_ne	neg	local02, #1
24774     01 22 06 56 |  if_ne	mov	local03, #1
24778     04 1E 86 F1 | 	sub	local01, #4
2477c     0F 21 62 FC | 	wrlong	local02, local01
24780                 | LR__3690
24780                 | LR__3691
24780                 | ' 				sect = (LBA_t)0 - 1;
24780                 | ' 				res = FR_DISK_ERR;
24780                 | ' 			}
24780                 | ' 			fs->winsect = sect;
24780                 | ' 		}
24780                 | ' 	}
24780                 | ' 	return res;
24780     11 FB 01 F6 | 	mov	result1, local03
24784     A7 F0 03 F6 | 	mov	ptra, fp
24788     B2 00 A0 FD | 	call	#popregs_
2478c                 | _fatfs_cc_move_window_ret
2478c     2D 00 64 FD | 	ret
24790                 | 
24790                 | _fatfs_cc_sync_fs
24790     02 4A 05 F6 | 	mov	COUNT_, #2
24794     A8 00 A0 FD | 	call	#pushregs_
24798     09 1F 02 F6 | 	mov	local01, arg01
2479c     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
247a0     FD 20 0A F6 | 	mov	local02, result1 wz
247a4     D8 00 90 5D |  if_ne	jmp	#LR__3701
247a8     0F 19 C2 FA | 	rdbyte	arg04, local01
247ac     03 18 0E F2 | 	cmp	arg04, #3 wz
247b0     04 1E 06 A1 |  if_e	add	local01, #4
247b4     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
247b8     04 1E 86 A1 |  if_e	sub	local01, #4
247bc     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
247c0     A0 00 90 5D |  if_ne	jmp	#LR__3700
247c4     34 1E 06 F1 | 	add	local01, #52
247c8     0F 13 02 F6 | 	mov	arg01, local01
247cc     00 14 06 F6 | 	mov	arg02, #0
247d0     09 16 C6 F9 | 	decod	arg03, #9
247d4     98 00 A0 FD | 	call	#\builtin_bytefill_
247d8     0F 13 02 F6 | 	mov	arg01, local01
247dc     FE 13 06 F1 | 	add	arg01, #510
247e0     55 00 80 FF 
247e4     09 AB 58 FC | 	wrword	##43605, arg01
247e8     A9 B0 A0 FF 
247ec     0F A5 68 FC | 	wrlong	##1096897106, local01
247f0     0F 13 02 F6 | 	mov	arg01, local01
247f4     E4 13 06 F1 | 	add	arg01, #484
247f8     B9 A0 B0 FF 
247fc     09 E5 68 FC | 	wrlong	##1631679090, arg01
24800     0F 13 02 F6 | 	mov	arg01, local01
24804     E8 13 06 F1 | 	add	arg01, #488
24808     20 1E 86 F1 | 	sub	local01, #32
2480c     0F 15 02 FB | 	rdlong	arg02, local01
24810     09 15 62 FC | 	wrlong	arg02, arg01
24814     20 1E 06 F1 | 	add	local01, #32
24818     0F 13 02 F6 | 	mov	arg01, local01
2481c     EC 13 06 F1 | 	add	arg01, #492
24820     24 1E 86 F1 | 	sub	local01, #36
24824     0F 15 02 FB | 	rdlong	arg02, local01
24828     09 15 62 FC | 	wrlong	arg02, arg01
2482c     10 1E 06 F1 | 	add	local01, #16
24830     0F 17 02 FB | 	rdlong	arg03, local01
24834     01 16 06 F1 | 	add	arg03, #1
24838     10 1E 06 F1 | 	add	local01, #16
2483c     0F 17 62 FC | 	wrlong	arg03, local01
24840     2F 1E 86 F1 | 	sub	local01, #47
24844     0F 13 C2 FA | 	rdbyte	arg01, local01
24848     33 1E 06 F1 | 	add	local01, #51
2484c     0F 15 02 F6 | 	mov	arg02, local01
24850     01 18 06 F6 | 	mov	arg04, #1
24854     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
24858     30 1E 86 F1 | 	sub	local01, #48
2485c     0F 01 48 FC | 	wrbyte	#0, local01
24860     04 1E 86 F1 | 	sub	local01, #4
24864                 | LR__3700
24864     01 1E 06 F1 | 	add	local01, #1
24868     0F 13 C2 FA | 	rdbyte	arg01, local01
2486c     00 14 06 F6 | 	mov	arg02, #0
24870     00 16 06 F6 | 	mov	arg03, #0
24874     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
24878     00 FA 0D F2 | 	cmp	result1, #0 wz
2487c     01 20 06 56 |  if_ne	mov	local02, #1
24880                 | LR__3701
24880                 | ' 	}
24880                 | ' 
24880                 | ' 	return res;
24880     10 FB 01 F6 | 	mov	result1, local02
24884     A7 F0 03 F6 | 	mov	ptra, fp
24888     B2 00 A0 FD | 	call	#popregs_
2488c                 | _fatfs_cc_sync_fs_ret
2488c     2D 00 64 FD | 	ret
24890                 | 
24890                 | _fatfs_cc_clst2sect
24890     02 14 86 F1 | 	sub	arg02, #2
24894     18 12 06 F1 | 	add	arg01, #24
24898     09 01 02 FB | 	rdlong	_var01, arg01
2489c     18 12 86 F1 | 	sub	arg01, #24
248a0     02 00 86 F1 | 	sub	_var01, #2
248a4     00 15 12 F2 | 	cmp	arg02, _var01 wc
248a8     00 FA 05 36 |  if_ae	mov	result1, #0
248ac     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
248b0     0A 12 06 F1 | 	add	arg01, #10
248b4     09 01 E2 FA | 	rdword	_var01, arg01
248b8     0A 01 02 FD | 	qmul	_var01, arg02
248bc                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
248bc     22 12 06 F1 | 	add	arg01, #34
248c0     09 FB 01 FB | 	rdlong	result1, arg01
248c4     18 00 62 FD | 	getqx	_var01
248c8     00 FB 01 F1 | 	add	result1, _var01
248cc                 | _fatfs_cc_clst2sect_ret
248cc     2D 00 64 FD | 	ret
248d0                 | 
248d0                 | _fatfs_cc_get_fat
248d0     07 4A 05 F6 | 	mov	COUNT_, #7
248d4     A8 00 A0 FD | 	call	#pushregs_
248d8     0A 1F 02 F6 | 	mov	local01, arg02
248dc     09 21 02 FB | 	rdlong	local02, arg01
248e0     02 1E 16 F2 | 	cmp	local01, #2 wc
248e4     14 00 90 CD |  if_b	jmp	#LR__3710
248e8     18 20 06 F1 | 	add	local02, #24
248ec     10 23 02 FB | 	rdlong	local03, local02
248f0     18 20 86 F1 | 	sub	local02, #24
248f4     11 1F 12 F2 | 	cmp	local01, local03 wc
248f8     08 00 90 CD |  if_b	jmp	#LR__3711
248fc                 | LR__3710
248fc     01 24 06 F6 | 	mov	local04, #1
24900     60 01 90 FD | 	jmp	#LR__3718
24904                 | LR__3711
24904     01 24 66 F6 | 	neg	local04, #1
24908                 | ' 		val = 0xFFFFFFFF;
24908                 | ' 
24908                 | ' 		switch (fs->fs_type) {
24908     10 27 C2 FA | 	rdbyte	local05, local02
2490c     01 26 86 F1 | 	sub	local05, #1
24910     03 26 26 F3 | 	fle	local05, #3
24914     30 26 62 FD | 	jmprel	local05
24918                 | LR__3712
24918     0C 00 90 FD | 	jmp	#LR__3713
2491c     B8 00 90 FD | 	jmp	#LR__3714
24920     F8 00 90 FD | 	jmp	#LR__3715
24924     38 01 90 FD | 	jmp	#LR__3716
24928                 | LR__3713
24928     0F 27 02 F6 | 	mov	local05, local01
2492c     0F 13 02 F6 | 	mov	arg01, local01
24930     01 12 46 F0 | 	shr	arg01, #1
24934     09 27 02 F1 | 	add	local05, arg01
24938     10 13 02 F6 | 	mov	arg01, local02
2493c     13 29 02 F6 | 	mov	local06, local05
24940     09 28 46 F0 | 	shr	local06, #9
24944     24 20 06 F1 | 	add	local02, #36
24948     10 15 02 FB | 	rdlong	arg02, local02
2494c     24 20 86 F1 | 	sub	local02, #36
24950     14 15 02 F1 | 	add	arg02, local06
24954     C0 FD BF FD | 	call	#_fatfs_cc_move_window
24958     00 FA 0D F2 | 	cmp	result1, #0 wz
2495c     04 01 90 5D |  if_ne	jmp	#LR__3717
24960     13 29 02 F6 | 	mov	local06, local05
24964     FF 29 06 F5 | 	and	local06, #511
24968     34 20 06 F1 | 	add	local02, #52
2496c     10 29 02 F1 | 	add	local06, local02
24970     14 2B C2 FA | 	rdbyte	local07, local06
24974     34 20 86 F1 | 	sub	local02, #52
24978     10 13 02 F6 | 	mov	arg01, local02
2497c     01 26 06 F1 | 	add	local05, #1
24980     13 29 02 F6 | 	mov	local06, local05
24984     09 28 46 F0 | 	shr	local06, #9
24988     24 20 06 F1 | 	add	local02, #36
2498c     10 15 02 FB | 	rdlong	arg02, local02
24990     24 20 86 F1 | 	sub	local02, #36
24994     14 15 02 F1 | 	add	arg02, local06
24998     7C FD BF FD | 	call	#_fatfs_cc_move_window
2499c     00 FA 0D F2 | 	cmp	result1, #0 wz
249a0     C0 00 90 5D |  if_ne	jmp	#LR__3717
249a4     FF 27 06 F5 | 	and	local05, #511
249a8     34 20 06 F1 | 	add	local02, #52
249ac     10 27 02 F1 | 	add	local05, local02
249b0     13 29 C2 FA | 	rdbyte	local06, local05
249b4     08 28 66 F0 | 	shl	local06, #8
249b8     14 2B 42 F5 | 	or	local07, local06
249bc     01 1E CE F7 | 	test	local01, #1 wz
249c0     04 2A 46 50 |  if_ne	shr	local07, #4
249c4     15 23 02 56 |  if_ne	mov	local03, local07
249c8     0B 2A 46 A7 |  if_e	zerox	local07, #11
249cc     15 23 02 A6 |  if_e	mov	local03, local07
249d0     11 25 02 F6 | 	mov	local04, local03
249d4                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
249d4                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
249d4                 | ' 			break;
249d4     8C 00 90 FD | 	jmp	#LR__3717
249d8                 | LR__3714
249d8     10 13 02 F6 | 	mov	arg01, local02
249dc     0F 29 02 F6 | 	mov	local06, local01
249e0     08 28 46 F0 | 	shr	local06, #8
249e4     24 20 06 F1 | 	add	local02, #36
249e8     10 15 02 FB | 	rdlong	arg02, local02
249ec     24 20 86 F1 | 	sub	local02, #36
249f0     14 15 02 F1 | 	add	arg02, local06
249f4     20 FD BF FD | 	call	#_fatfs_cc_move_window
249f8     00 FA 0D F2 | 	cmp	result1, #0 wz
249fc     64 00 90 5D |  if_ne	jmp	#LR__3717
24a00     34 20 06 F1 | 	add	local02, #52
24a04     01 1E 66 F0 | 	shl	local01, #1
24a08     FF 1F 06 F5 | 	and	local01, #511
24a0c     0F 21 02 F1 | 	add	local02, local01
24a10                 | ' {
24a10                 | ' 
24a10                 | ' 	return *((WORD*)ptr);
24a10     10 FB E1 FA | 	rdword	result1, local02
24a14     FD 24 32 F9 | 	getword	local04, result1, #0
24a18                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
24a18                 | ' 			break;
24a18     48 00 90 FD | 	jmp	#LR__3717
24a1c                 | LR__3715
24a1c     10 13 02 F6 | 	mov	arg01, local02
24a20     0F 29 02 F6 | 	mov	local06, local01
24a24     07 28 46 F0 | 	shr	local06, #7
24a28     24 20 06 F1 | 	add	local02, #36
24a2c     10 15 02 FB | 	rdlong	arg02, local02
24a30     24 20 86 F1 | 	sub	local02, #36
24a34     14 15 02 F1 | 	add	arg02, local06
24a38     DC FC BF FD | 	call	#_fatfs_cc_move_window
24a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
24a40     20 00 90 5D |  if_ne	jmp	#LR__3717
24a44     34 20 06 F1 | 	add	local02, #52
24a48     02 1E 66 F0 | 	shl	local01, #2
24a4c     FF 1F 06 F5 | 	and	local01, #511
24a50     0F 21 02 F1 | 	add	local02, local01
24a54                 | ' {
24a54                 | ' 
24a54                 | ' 	return *((DWORD*)ptr);
24a54     10 25 02 FB | 	rdlong	local04, local02
24a58     7C 24 06 F4 | 	bitl	local04, #124
24a5c                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
24a5c                 | ' 			break;
24a5c     04 00 90 FD | 	jmp	#LR__3717
24a60                 | LR__3716
24a60     01 24 06 F6 | 	mov	local04, #1
24a64                 | LR__3717
24a64                 | LR__3718
24a64                 | ' 			val = 1;
24a64                 | ' 		}
24a64                 | ' 	}
24a64                 | ' 
24a64                 | ' 	return val;
24a64     12 FB 01 F6 | 	mov	result1, local04
24a68     A7 F0 03 F6 | 	mov	ptra, fp
24a6c     B2 00 A0 FD | 	call	#popregs_
24a70                 | _fatfs_cc_get_fat_ret
24a70     2D 00 64 FD | 	ret
24a74                 | 
24a74                 | _fatfs_cc_put_fat
24a74     08 4A 05 F6 | 	mov	COUNT_, #8
24a78     A8 00 A0 FD | 	call	#pushregs_
24a7c     09 1F 02 F6 | 	mov	local01, arg01
24a80     0A 21 02 F6 | 	mov	local02, arg02
24a84     0B 23 02 F6 | 	mov	local03, arg03
24a88     02 24 06 F6 | 	mov	local04, #2
24a8c     02 20 16 F2 | 	cmp	local02, #2 wc
24a90     E0 01 90 CD |  if_b	jmp	#LR__3727
24a94     18 1E 06 F1 | 	add	local01, #24
24a98     0F 27 02 FB | 	rdlong	local05, local01
24a9c     18 1E 86 F1 | 	sub	local01, #24
24aa0     13 21 12 F2 | 	cmp	local02, local05 wc
24aa4     CC 01 90 3D |  if_ae	jmp	#LR__3727
24aa8                 | ' 		switch (fs->fs_type) {
24aa8     0F 29 C2 FA | 	rdbyte	local06, local01
24aac     01 28 86 F1 | 	sub	local06, #1
24ab0     03 28 26 F3 | 	fle	local06, #3
24ab4     30 28 62 FD | 	jmprel	local06
24ab8                 | LR__3720
24ab8     0C 00 90 FD | 	jmp	#LR__3721
24abc     F8 00 90 FD | 	jmp	#LR__3724
24ac0     40 01 90 FD | 	jmp	#LR__3725
24ac4     AC 01 90 FD | 	jmp	#LR__3726
24ac8                 | LR__3721
24ac8     10 2B 02 F6 | 	mov	local07, local02
24acc     10 27 02 F6 | 	mov	local05, local02
24ad0     01 26 46 F0 | 	shr	local05, #1
24ad4     13 2B 02 F1 | 	add	local07, local05
24ad8     0F 13 02 F6 | 	mov	arg01, local01
24adc     15 29 02 F6 | 	mov	local06, local07
24ae0     09 28 46 F0 | 	shr	local06, #9
24ae4     24 1E 06 F1 | 	add	local01, #36
24ae8     0F 15 02 FB | 	rdlong	arg02, local01
24aec     24 1E 86 F1 | 	sub	local01, #36
24af0     14 15 02 F1 | 	add	arg02, local06
24af4     20 FC BF FD | 	call	#_fatfs_cc_move_window
24af8     FD 24 0A F6 | 	mov	local04, result1 wz
24afc     74 01 90 5D |  if_ne	jmp	#LR__3726
24b00     34 1E 06 F1 | 	add	local01, #52
24b04     0F 2D 02 F6 | 	mov	local08, local01
24b08     15 27 02 F6 | 	mov	local05, local07
24b0c     FF 27 06 F5 | 	and	local05, #511
24b10     13 2D 02 F1 | 	add	local08, local05
24b14     01 20 CE F7 | 	test	local02, #1 wz
24b18     34 1E 86 F1 | 	sub	local01, #52
24b1c     01 2A 06 F1 | 	add	local07, #1
24b20     18 00 90 AD |  if_e	jmp	#LR__3722
24b24     16 27 C2 FA | 	rdbyte	local05, local08
24b28     13 27 42 F8 | 	getnib	local05, local05, #0
24b2c     11 29 E2 F8 | 	getbyte	local06, local03, #0
24b30     04 28 66 F0 | 	shl	local06, #4
24b34     14 27 42 F5 | 	or	local05, local06
24b38     04 00 90 FD | 	jmp	#LR__3723
24b3c                 | LR__3722
24b3c     11 27 02 F6 | 	mov	local05, local03
24b40                 | LR__3723
24b40     16 27 42 FC | 	wrbyte	local05, local08
24b44     03 1E 06 F1 | 	add	local01, #3
24b48     0F 03 48 FC | 	wrbyte	#1, local01
24b4c     03 1E 86 F1 | 	sub	local01, #3
24b50     0F 13 02 F6 | 	mov	arg01, local01
24b54     15 2D 02 F6 | 	mov	local08, local07
24b58     09 2C 46 F0 | 	shr	local08, #9
24b5c     24 1E 06 F1 | 	add	local01, #36
24b60     0F 15 02 FB | 	rdlong	arg02, local01
24b64     24 1E 86 F1 | 	sub	local01, #36
24b68     16 15 02 F1 | 	add	arg02, local08
24b6c     A8 FB BF FD | 	call	#_fatfs_cc_move_window
24b70     FD 24 0A F6 | 	mov	local04, result1 wz
24b74     FC 00 90 5D |  if_ne	jmp	#LR__3726
24b78     34 1E 06 F1 | 	add	local01, #52
24b7c     0F 2D 02 F6 | 	mov	local08, local01
24b80     FF 2B 06 F5 | 	and	local07, #511
24b84     15 2D 02 F1 | 	add	local08, local07
24b88     01 20 CE F7 | 	test	local02, #1 wz
24b8c     04 22 46 50 |  if_ne	shr	local03, #4
24b90     11 27 02 56 |  if_ne	mov	local05, local03
24b94     16 27 C2 AA |  if_e	rdbyte	local05, local08
24b98     F0 26 06 A5 |  if_e	and	local05, #240
24b9c     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
24ba0     11 23 42 A8 |  if_e	getnib	local03, local03, #0
24ba4     11 27 42 A5 |  if_e	or	local05, local03
24ba8     16 27 42 FC | 	wrbyte	local05, local08
24bac     31 1E 86 F1 | 	sub	local01, #49
24bb0     0F 03 48 FC | 	wrbyte	#1, local01
24bb4                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
24bb4                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
24bb4                 | ' 			fs->wflag = 1;
24bb4                 | ' 			break;
24bb4     BC 00 90 FD | 	jmp	#LR__3726
24bb8                 | LR__3724
24bb8     0F 13 02 F6 | 	mov	arg01, local01
24bbc     10 2D 02 F6 | 	mov	local08, local02
24bc0     08 2C 46 F0 | 	shr	local08, #8
24bc4     24 1E 06 F1 | 	add	local01, #36
24bc8     0F 15 02 FB | 	rdlong	arg02, local01
24bcc     24 1E 86 F1 | 	sub	local01, #36
24bd0     16 15 02 F1 | 	add	arg02, local08
24bd4     40 FB BF FD | 	call	#_fatfs_cc_move_window
24bd8     FD 24 0A F6 | 	mov	local04, result1 wz
24bdc     94 00 90 5D |  if_ne	jmp	#LR__3726
24be0     34 1E 06 F1 | 	add	local01, #52
24be4     0F 13 02 F6 | 	mov	arg01, local01
24be8     01 20 66 F0 | 	shl	local02, #1
24bec     FF 21 06 F5 | 	and	local02, #511
24bf0     10 13 02 F1 | 	add	arg01, local02
24bf4     09 23 52 FC | 	wrword	local03, arg01
24bf8     31 1E 86 F1 | 	sub	local01, #49
24bfc     0F 03 48 FC | 	wrbyte	#1, local01
24c00                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
24c00                 | ' 			fs->wflag = 1;
24c00                 | ' 			break;
24c00     70 00 90 FD | 	jmp	#LR__3726
24c04                 | LR__3725
24c04     0F 13 02 F6 | 	mov	arg01, local01
24c08     10 2D 02 F6 | 	mov	local08, local02
24c0c     07 2C 46 F0 | 	shr	local08, #7
24c10     24 1E 06 F1 | 	add	local01, #36
24c14     0F 15 02 FB | 	rdlong	arg02, local01
24c18     24 1E 86 F1 | 	sub	local01, #36
24c1c     16 15 02 F1 | 	add	arg02, local08
24c20     F4 FA BF FD | 	call	#_fatfs_cc_move_window
24c24     FD 24 0A F6 | 	mov	local04, result1 wz
24c28     48 00 90 5D |  if_ne	jmp	#LR__3726
24c2c     7C 22 06 F4 | 	bitl	local03, #124
24c30     34 1E 06 F1 | 	add	local01, #52
24c34     10 2D 02 F6 | 	mov	local08, local02
24c38     02 2C 66 F0 | 	shl	local08, #2
24c3c     FF 2D 06 F5 | 	and	local08, #511
24c40     0F 13 02 F6 | 	mov	arg01, local01
24c44     16 13 02 F1 | 	add	arg01, local08
24c48                 | ' {
24c48                 | ' 
24c48                 | ' 	return *((DWORD*)ptr);
24c48     09 2D 02 FB | 	rdlong	local08, arg01
24c4c     00 00 78 FF 
24c50     00 2C 06 F5 | 	and	local08, ##-268435456
24c54     16 23 42 F5 | 	or	local03, local08
24c58     0F 13 02 F6 | 	mov	arg01, local01
24c5c     02 20 66 F0 | 	shl	local02, #2
24c60     FF 21 06 F5 | 	and	local02, #511
24c64     10 13 02 F1 | 	add	arg01, local02
24c68     09 23 62 FC | 	wrlong	local03, arg01
24c6c     31 1E 86 F1 | 	sub	local01, #49
24c70     0F 03 48 FC | 	wrbyte	#1, local01
24c74                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
24c74                 | ' 			}
24c74                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
24c74                 | ' 			fs->wflag = 1;
24c74                 | ' 			break;
24c74                 | LR__3726
24c74                 | LR__3727
24c74                 | ' 		}
24c74                 | ' 	}
24c74                 | ' 	return res;
24c74     12 FB 01 F6 | 	mov	result1, local04
24c78     A7 F0 03 F6 | 	mov	ptra, fp
24c7c     B2 00 A0 FD | 	call	#popregs_
24c80                 | _fatfs_cc_put_fat_ret
24c80     2D 00 64 FD | 	ret
24c84                 | 
24c84                 | _fatfs_cc_remove_chain
24c84     05 4A 05 F6 | 	mov	COUNT_, #5
24c88     A8 00 A0 FD | 	call	#pushregs_
24c8c     09 1F 02 F6 | 	mov	local01, arg01
24c90     0A 21 02 F6 | 	mov	local02, arg02
24c94     0B 23 02 F6 | 	mov	local03, arg03
24c98     0F 25 02 FB | 	rdlong	local04, local01
24c9c     02 20 16 F2 | 	cmp	local02, #2 wc
24ca0     14 00 90 CD |  if_b	jmp	#LR__3730
24ca4     18 24 06 F1 | 	add	local04, #24
24ca8     12 FB 01 FB | 	rdlong	result1, local04
24cac     18 24 86 F1 | 	sub	local04, #24
24cb0     FD 20 12 F2 | 	cmp	local02, result1 wc
24cb4     08 00 90 CD |  if_b	jmp	#LR__3731
24cb8                 | LR__3730
24cb8     02 FA 05 F6 | 	mov	result1, #2
24cbc     CC 00 90 FD | 	jmp	#LR__3736
24cc0                 | LR__3731
24cc0     00 22 0E F2 | 	cmp	local03, #0 wz
24cc4     18 00 90 AD |  if_e	jmp	#LR__3732
24cc8     11 15 02 F6 | 	mov	arg02, local03
24ccc     12 13 02 F6 | 	mov	arg01, local04
24cd0     01 16 66 F6 | 	neg	arg03, #1
24cd4     9C FD BF FD | 	call	#_fatfs_cc_put_fat
24cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
24cdc     AC 00 90 5D |  if_ne	jmp	#LR__3736
24ce0                 | LR__3732
24ce0                 | ' 	}
24ce0                 | ' 
24ce0                 | ' 
24ce0                 | ' 	do {
24ce0                 | LR__3733
24ce0     10 15 02 F6 | 	mov	arg02, local02
24ce4     0F 13 02 F6 | 	mov	arg01, local01
24ce8     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
24cec     FD 26 0A F6 | 	mov	local05, result1 wz
24cf0     94 00 90 AD |  if_e	jmp	#LR__3735
24cf4     01 26 0E F2 | 	cmp	local05, #1 wz
24cf8     02 FA 05 A6 |  if_e	mov	result1, #2
24cfc     8C 00 90 AD |  if_e	jmp	#LR__3736
24d00     FF FF 7F FF 
24d04     FF 27 0E F2 | 	cmp	local05, ##-1 wz
24d08     01 FA 05 A6 |  if_e	mov	result1, #1
24d0c     7C 00 90 AD |  if_e	jmp	#LR__3736
24d10     10 15 02 F6 | 	mov	arg02, local02
24d14     12 13 02 F6 | 	mov	arg01, local04
24d18     00 16 06 F6 | 	mov	arg03, #0
24d1c     54 FD BF FD | 	call	#_fatfs_cc_put_fat
24d20     FD 22 0A F6 | 	mov	local03, result1 wz
24d24     11 FB 01 56 |  if_ne	mov	result1, local03
24d28     60 00 90 5D |  if_ne	jmp	#LR__3736
24d2c     18 24 06 F1 | 	add	local04, #24
24d30     12 23 02 FB | 	rdlong	local03, local04
24d34     02 22 86 F1 | 	sub	local03, #2
24d38     04 24 86 F1 | 	sub	local04, #4
24d3c     12 21 02 FB | 	rdlong	local02, local04
24d40     14 24 86 F1 | 	sub	local04, #20
24d44     11 21 12 F2 | 	cmp	local02, local03 wc
24d48     24 00 90 3D |  if_ae	jmp	#LR__3734
24d4c     14 24 06 F1 | 	add	local04, #20
24d50     12 23 02 FB | 	rdlong	local03, local04
24d54     01 22 06 F1 | 	add	local03, #1
24d58     12 23 62 FC | 	wrlong	local03, local04
24d5c     10 24 86 F1 | 	sub	local04, #16
24d60     12 23 C2 FA | 	rdbyte	local03, local04
24d64     01 22 46 F5 | 	or	local03, #1
24d68     12 23 42 FC | 	wrbyte	local03, local04
24d6c     04 24 86 F1 | 	sub	local04, #4
24d70                 | LR__3734
24d70     13 21 02 F6 | 	mov	local02, local05
24d74     18 24 06 F1 | 	add	local04, #24
24d78     12 27 02 FB | 	rdlong	local05, local04
24d7c     18 24 86 F1 | 	sub	local04, #24
24d80     13 21 12 F2 | 	cmp	local02, local05 wc
24d84     58 FF 9F CD |  if_b	jmp	#LR__3733
24d88                 | LR__3735
24d88                 | ' #line 1500 "ff.c"
24d88                 | ' 	return FR_OK;
24d88     00 FA 05 F6 | 	mov	result1, #0
24d8c                 | LR__3736
24d8c     A7 F0 03 F6 | 	mov	ptra, fp
24d90     B2 00 A0 FD | 	call	#popregs_
24d94                 | _fatfs_cc_remove_chain_ret
24d94     2D 00 64 FD | 	ret
24d98                 | 
24d98                 | _fatfs_cc_create_chain
24d98     09 4A 05 F6 | 	mov	COUNT_, #9
24d9c     A8 00 A0 FD | 	call	#pushregs_
24da0     09 1F 02 F6 | 	mov	local01, arg01
24da4     0A 21 0A F6 | 	mov	local02, arg02 wz
24da8     0F 23 02 FB | 	rdlong	local03, local01
24dac     28 00 90 5D |  if_ne	jmp	#LR__3740
24db0     10 22 06 F1 | 	add	local03, #16
24db4     11 25 0A FB | 	rdlong	local04, local03 wz
24db8     10 22 86 F1 | 	sub	local03, #16
24dbc     18 22 06 51 |  if_ne	add	local03, #24
24dc0     11 27 02 5B |  if_ne	rdlong	local05, local03
24dc4     18 22 86 51 |  if_ne	sub	local03, #24
24dc8     13 25 12 52 |  if_ne	cmp	local04, local05 wc
24dcc     50 00 90 4D |  if_c_and_nz	jmp	#LR__3741
24dd0     01 24 06 F6 | 	mov	local04, #1
24dd4     48 00 90 FD | 	jmp	#LR__3741
24dd8                 | LR__3740
24dd8     10 15 02 F6 | 	mov	arg02, local02
24ddc     0F 13 02 F6 | 	mov	arg01, local01
24de0     EC FA BF FD | 	call	#_fatfs_cc_get_fat
24de4     FD 24 02 F6 | 	mov	local04, result1
24de8     02 24 16 F2 | 	cmp	local04, #2 wc
24dec     01 FA 05 C6 |  if_b	mov	result1, #1
24df0     BC 01 90 CD |  if_b	jmp	#LR__3751
24df4     FF FF 7F FF 
24df8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
24dfc     12 FB 01 A6 |  if_e	mov	result1, local04
24e00     AC 01 90 AD |  if_e	jmp	#LR__3751
24e04     18 22 06 F1 | 	add	local03, #24
24e08     11 27 02 FB | 	rdlong	local05, local03
24e0c     18 22 86 F1 | 	sub	local03, #24
24e10     13 25 12 F2 | 	cmp	local04, local05 wc
24e14     12 FB 01 C6 |  if_b	mov	result1, local04
24e18     94 01 90 CD |  if_b	jmp	#LR__3751
24e1c     10 25 02 F6 | 	mov	local04, local02
24e20                 | LR__3741
24e20     14 22 06 F1 | 	add	local03, #20
24e24     11 27 0A FB | 	rdlong	local05, local03 wz
24e28     14 22 86 F1 | 	sub	local03, #20
24e2c     00 FA 05 A6 |  if_e	mov	result1, #0
24e30     7C 01 90 AD |  if_e	jmp	#LR__3751
24e34     00 28 06 F6 | 	mov	local06, #0
24e38     10 25 0A F2 | 	cmp	local04, local02 wz
24e3c     74 00 90 5D |  if_ne	jmp	#LR__3744
24e40     12 29 02 F6 | 	mov	local06, local04
24e44     01 28 06 F1 | 	add	local06, #1
24e48     18 22 06 F1 | 	add	local03, #24
24e4c     11 27 02 FB | 	rdlong	local05, local03
24e50     18 22 86 F1 | 	sub	local03, #24
24e54     13 29 12 F2 | 	cmp	local06, local05 wc
24e58     02 28 06 36 |  if_ae	mov	local06, #2
24e5c     14 15 02 F6 | 	mov	arg02, local06
24e60     0F 13 02 F6 | 	mov	arg01, local01
24e64     68 FA BF FD | 	call	#_fatfs_cc_get_fat
24e68     FD 26 02 F6 | 	mov	local05, result1
24e6c     01 26 0E F2 | 	cmp	local05, #1 wz
24e70     FF FF 7F 5F 
24e74     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
24e78     13 FB 01 A6 |  if_e	mov	result1, local05
24e7c     30 01 90 AD |  if_e	jmp	#LR__3751
24e80     00 26 0E F2 | 	cmp	local05, #0 wz
24e84     2C 00 90 AD |  if_e	jmp	#LR__3743
24e88     10 22 06 F1 | 	add	local03, #16
24e8c     11 2B 02 FB | 	rdlong	local07, local03
24e90     10 22 86 F1 | 	sub	local03, #16
24e94     02 2A 16 F2 | 	cmp	local07, #2 wc
24e98     14 00 90 CD |  if_b	jmp	#LR__3742
24e9c     18 22 06 F1 | 	add	local03, #24
24ea0     11 27 02 FB | 	rdlong	local05, local03
24ea4     18 22 86 F1 | 	sub	local03, #24
24ea8     13 2B 12 F2 | 	cmp	local07, local05 wc
24eac     15 25 02 C6 |  if_b	mov	local04, local07
24eb0                 | LR__3742
24eb0     00 28 06 F6 | 	mov	local06, #0
24eb4                 | LR__3743
24eb4                 | LR__3744
24eb4     00 28 0E F2 | 	cmp	local06, #0 wz
24eb8     60 00 90 5D |  if_ne	jmp	#LR__3747
24ebc     12 29 02 F6 | 	mov	local06, local04
24ec0                 | ' 			ncl = scl;
24ec0                 | ' 			for (;;) {
24ec0                 | LR__3745
24ec0     01 28 06 F1 | 	add	local06, #1
24ec4     18 22 06 F1 | 	add	local03, #24
24ec8     11 27 02 FB | 	rdlong	local05, local03
24ecc     18 22 86 F1 | 	sub	local03, #24
24ed0     13 29 12 F2 | 	cmp	local06, local05 wc
24ed4     02 28 06 36 |  if_ae	mov	local06, #2
24ed8     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
24edc     00 FA 05 16 |  if_a	mov	result1, #0
24ee0     CC 00 90 1D |  if_a	jmp	#LR__3751
24ee4     14 15 02 F6 | 	mov	arg02, local06
24ee8     0F 13 02 F6 | 	mov	arg01, local01
24eec     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
24ef0     FD 2A 0A F6 | 	mov	local07, result1 wz
24ef4     24 00 90 AD |  if_e	jmp	#LR__3746
24ef8     01 2A 0E F2 | 	cmp	local07, #1 wz
24efc     FF FF 7F 5F 
24f00     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
24f04     15 FB 01 A6 |  if_e	mov	result1, local07
24f08     A4 00 90 AD |  if_e	jmp	#LR__3751
24f0c     12 29 0A F2 | 	cmp	local06, local04 wz
24f10     00 FA 05 A6 |  if_e	mov	result1, #0
24f14     98 00 90 AD |  if_e	jmp	#LR__3751
24f18     A4 FF 9F FD | 	jmp	#LR__3745
24f1c                 | LR__3746
24f1c                 | LR__3747
24f1c     11 13 02 F6 | 	mov	arg01, local03
24f20     14 15 02 F6 | 	mov	arg02, local06
24f24     01 16 66 F6 | 	neg	arg03, #1
24f28     48 FB BF FD | 	call	#_fatfs_cc_put_fat
24f2c     FD 2C 0A F6 | 	mov	local08, result1 wz
24f30     1C 00 90 5D |  if_ne	jmp	#LR__3748
24f34     00 20 0E F2 | 	cmp	local02, #0 wz
24f38     14 00 90 AD |  if_e	jmp	#LR__3748
24f3c     11 13 02 F6 | 	mov	arg01, local03
24f40     10 15 02 F6 | 	mov	arg02, local02
24f44     14 17 02 F6 | 	mov	arg03, local06
24f48     28 FB BF FD | 	call	#_fatfs_cc_put_fat
24f4c     FD 2C 02 F6 | 	mov	local08, result1
24f50                 | LR__3748
24f50     00 2C 0E F2 | 	cmp	local08, #0 wz
24f54     4C 00 90 5D |  if_ne	jmp	#LR__3749
24f58     10 22 06 F1 | 	add	local03, #16
24f5c     11 29 62 FC | 	wrlong	local06, local03
24f60     08 22 06 F1 | 	add	local03, #8
24f64     11 27 02 FB | 	rdlong	local05, local03
24f68     02 26 86 F1 | 	sub	local05, #2
24f6c     04 22 86 F1 | 	sub	local03, #4
24f70     11 2F 02 FB | 	rdlong	local09, local03
24f74     14 22 86 F1 | 	sub	local03, #20
24f78     13 2F 1A F2 | 	cmp	local09, local05 wcz
24f7c     14 22 06 E1 |  if_be	add	local03, #20
24f80     11 2F 02 EB |  if_be	rdlong	local09, local03
24f84     01 2E 86 E1 |  if_be	sub	local09, #1
24f88     11 2F 62 EC |  if_be	wrlong	local09, local03
24f8c     14 22 86 E1 |  if_be	sub	local03, #20
24f90     04 22 06 F1 | 	add	local03, #4
24f94     11 27 C2 FA | 	rdbyte	local05, local03
24f98     01 26 46 F5 | 	or	local05, #1
24f9c     11 27 42 FC | 	wrbyte	local05, local03
24fa0     08 00 90 FD | 	jmp	#LR__3750
24fa4                 | LR__3749
24fa4     01 2C 0E F2 | 	cmp	local08, #1 wz
24fa8     01 28 C6 F6 | 	negz	local06, #1
24fac                 | LR__3750
24fac                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
24fac                 | ' 	}
24fac                 | ' 
24fac                 | ' 	return ncl;
24fac     14 FB 01 F6 | 	mov	result1, local06
24fb0                 | LR__3751
24fb0     A7 F0 03 F6 | 	mov	ptra, fp
24fb4     B2 00 A0 FD | 	call	#popregs_
24fb8                 | _fatfs_cc_create_chain_ret
24fb8     2D 00 64 FD | 	ret
24fbc                 | 
24fbc                 | _fatfs_cc_dir_clear
24fbc     06 4A 05 F6 | 	mov	COUNT_, #6
24fc0     A8 00 A0 FD | 	call	#pushregs_
24fc4     09 1F 02 F6 | 	mov	local01, arg01
24fc8     0A 21 02 F6 | 	mov	local02, arg02
24fcc     0F 13 02 F6 | 	mov	arg01, local01
24fd0     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
24fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
24fd8     01 FA 05 56 |  if_ne	mov	result1, #1
24fdc     90 00 90 5D |  if_ne	jmp	#LR__3762
24fe0     0F 13 02 F6 | 	mov	arg01, local01
24fe4     10 15 02 F6 | 	mov	arg02, local02
24fe8     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
24fec     FD 22 02 F6 | 	mov	local03, result1
24ff0     30 1E 06 F1 | 	add	local01, #48
24ff4     0F 23 62 FC | 	wrlong	local03, local01
24ff8     04 1E 06 F1 | 	add	local01, #4
24ffc     0F 13 02 F6 | 	mov	arg01, local01
25000     00 14 06 F6 | 	mov	arg02, #0
25004     09 16 C6 F9 | 	decod	arg03, #9
25008     98 00 A0 FD | 	call	#\builtin_bytefill_
2500c     0F 25 02 F6 | 	mov	local04, local01
25010                 | ' #line 1667 "ff.c"
25010                 | ' 	{
25010                 | ' 		ibuf = fs->win; szb = 1;
25010                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
25010     00 26 06 F6 | 	mov	local05, #0
25014     34 1E 86 F1 | 	sub	local01, #52
25018                 | LR__3760
25018     0A 1E 06 F1 | 	add	local01, #10
2501c     0F 29 E2 FA | 	rdword	local06, local01
25020     0A 1E 86 F1 | 	sub	local01, #10
25024     14 27 12 F2 | 	cmp	local05, local06 wc
25028     2C 00 90 3D |  if_ae	jmp	#LR__3761
2502c     01 1E 06 F1 | 	add	local01, #1
25030     0F 13 C2 FA | 	rdbyte	arg01, local01
25034     01 1E 86 F1 | 	sub	local01, #1
25038     12 15 02 F6 | 	mov	arg02, local04
2503c     11 17 02 F6 | 	mov	arg03, local03
25040     13 17 02 F1 | 	add	arg03, local05
25044     01 18 06 F6 | 	mov	arg04, #1
25048     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2504c     00 FA 0D F2 | 	cmp	result1, #0 wz
25050     01 26 06 A1 |  if_e	add	local05, #1
25054     C0 FF 9F AD |  if_e	jmp	#LR__3760
25058                 | LR__3761
25058                 | ' 	}
25058                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
25058     0A 1E 06 F1 | 	add	local01, #10
2505c     0F 25 E2 FA | 	rdword	local04, local01
25060     12 27 0A F2 | 	cmp	local05, local04 wz
25064     00 28 06 A6 |  if_e	mov	local06, #0
25068     01 28 06 56 |  if_ne	mov	local06, #1
2506c     14 FB 01 F6 | 	mov	result1, local06
25070                 | LR__3762
25070     A7 F0 03 F6 | 	mov	ptra, fp
25074     B2 00 A0 FD | 	call	#popregs_
25078                 | _fatfs_cc_dir_clear_ret
25078     2D 00 64 FD | 	ret
2507c                 | 
2507c                 | _fatfs_cc_dir_sdi
2507c     06 4A 05 F6 | 	mov	COUNT_, #6
25080     A8 00 A0 FD | 	call	#pushregs_
25084     09 1F 02 F6 | 	mov	local01, arg01
25088     0A 21 02 F6 | 	mov	local02, arg02
2508c     0F 23 02 FB | 	rdlong	local03, local01
25090     00 10 00 FF 
25094     00 20 16 F2 | 	cmp	local02, ##2097152 wc
25098     1F 20 CE C7 |  if_b	test	local02, #31 wz
2509c                 | ' 		return FR_INT_ERR;
2509c     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
250a0     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3776
250a4     10 1E 06 F1 | 	add	local01, #16
250a8     0F 21 62 FC | 	wrlong	local02, local01
250ac     08 1E 86 F1 | 	sub	local01, #8
250b0     0F 25 0A FB | 	rdlong	local04, local01 wz
250b4     08 1E 86 F1 | 	sub	local01, #8
250b8     11 27 C2 AA |  if_e	rdbyte	local05, local03
250bc     03 26 16 A2 |  if_e	cmp	local05, #3 wc
250c0     28 22 06 21 |  if_nc_and_z	add	local03, #40
250c4     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
250c8     28 22 86 21 |  if_nc_and_z	sub	local03, #40
250cc     00 24 0E F2 | 	cmp	local04, #0 wz
250d0     3C 00 90 5D |  if_ne	jmp	#LR__3770
250d4     10 27 02 F6 | 	mov	local05, local02
250d8     05 26 46 F0 | 	shr	local05, #5
250dc     08 22 06 F1 | 	add	local03, #8
250e0     11 15 E2 FA | 	rdword	arg02, local03
250e4     08 22 86 F1 | 	sub	local03, #8
250e8     0A 27 12 F2 | 	cmp	local05, arg02 wc
250ec     02 FA 05 36 |  if_ae	mov	result1, #2
250f0     E4 00 90 3D |  if_ae	jmp	#LR__3776
250f4     28 22 06 F1 | 	add	local03, #40
250f8     11 27 02 FB | 	rdlong	local05, local03
250fc     28 22 86 F1 | 	sub	local03, #40
25100     18 1E 06 F1 | 	add	local01, #24
25104     0F 27 62 FC | 	wrlong	local05, local01
25108     18 1E 86 F1 | 	sub	local01, #24
2510c     7C 00 90 FD | 	jmp	#LR__3775
25110                 | LR__3770
25110     0A 22 06 F1 | 	add	local03, #10
25114     11 29 E2 FA | 	rdword	local06, local03
25118     0A 22 86 F1 | 	sub	local03, #10
2511c     09 28 66 F0 | 	shl	local06, #9
25120                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
25120                 | ' 		while (ofs >= csz) {
25120                 | LR__3771
25120     14 21 12 F2 | 	cmp	local02, local06 wc
25124     4C 00 90 CD |  if_b	jmp	#LR__3774
25128     0F 13 02 F6 | 	mov	arg01, local01
2512c     12 15 02 F6 | 	mov	arg02, local04
25130     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
25134     FD 24 02 F6 | 	mov	local04, result1
25138     FF FF 7F FF 
2513c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
25140     01 FA 05 A6 |  if_e	mov	result1, #1
25144     90 00 90 AD |  if_e	jmp	#LR__3776
25148     02 24 16 F2 | 	cmp	local04, #2 wc
2514c     14 00 90 CD |  if_b	jmp	#LR__3772
25150     18 22 06 F1 | 	add	local03, #24
25154     11 27 02 FB | 	rdlong	local05, local03
25158     18 22 86 F1 | 	sub	local03, #24
2515c     13 25 12 F2 | 	cmp	local04, local05 wc
25160     08 00 90 CD |  if_b	jmp	#LR__3773
25164                 | LR__3772
25164     02 FA 05 F6 | 	mov	result1, #2
25168     6C 00 90 FD | 	jmp	#LR__3776
2516c                 | LR__3773
2516c     14 21 82 F1 | 	sub	local02, local06
25170     AC FF 9F FD | 	jmp	#LR__3771
25174                 | LR__3774
25174     11 13 02 F6 | 	mov	arg01, local03
25178     12 15 02 F6 | 	mov	arg02, local04
2517c     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
25180     18 1E 06 F1 | 	add	local01, #24
25184     0F FB 61 FC | 	wrlong	result1, local01
25188     18 1E 86 F1 | 	sub	local01, #24
2518c                 | LR__3775
2518c     14 1E 06 F1 | 	add	local01, #20
25190     0F 25 62 FC | 	wrlong	local04, local01
25194     04 1E 06 F1 | 	add	local01, #4
25198     0F 27 0A FB | 	rdlong	local05, local01 wz
2519c     18 1E 86 F1 | 	sub	local01, #24
251a0     02 FA 05 A6 |  if_e	mov	result1, #2
251a4     30 00 90 AD |  if_e	jmp	#LR__3776
251a8     10 29 02 F6 | 	mov	local06, local02
251ac     09 28 46 F0 | 	shr	local06, #9
251b0     18 1E 06 F1 | 	add	local01, #24
251b4     0F 27 02 FB | 	rdlong	local05, local01
251b8     14 27 02 F1 | 	add	local05, local06
251bc     0F 27 62 FC | 	wrlong	local05, local01
251c0     34 22 06 F1 | 	add	local03, #52
251c4     FF 21 06 F5 | 	and	local02, #511
251c8     10 23 02 F1 | 	add	local03, local02
251cc     04 1E 06 F1 | 	add	local01, #4
251d0     0F 23 62 FC | 	wrlong	local03, local01
251d4                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
251d4                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
251d4                 | ' 
251d4                 | ' 	return FR_OK;
251d4     00 FA 05 F6 | 	mov	result1, #0
251d8                 | LR__3776
251d8     A7 F0 03 F6 | 	mov	ptra, fp
251dc     B2 00 A0 FD | 	call	#popregs_
251e0                 | _fatfs_cc_dir_sdi_ret
251e0     2D 00 64 FD | 	ret
251e4                 | 
251e4                 | _fatfs_cc_dir_next
251e4     05 4A 05 F6 | 	mov	COUNT_, #5
251e8     A8 00 A0 FD | 	call	#pushregs_
251ec     09 1F 02 F6 | 	mov	local01, arg01
251f0     0A 21 02 F6 | 	mov	local02, arg02
251f4     0F 23 02 FB | 	rdlong	local03, local01
251f8     10 1E 06 F1 | 	add	local01, #16
251fc     0F 25 02 FB | 	rdlong	local04, local01
25200     10 1E 86 F1 | 	sub	local01, #16
25204     20 24 06 F1 | 	add	local04, #32
25208     00 10 00 FF 
2520c     00 24 16 F2 | 	cmp	local04, ##2097152 wc
25210     18 1E 06 31 |  if_ae	add	local01, #24
25214     0F 01 68 3C |  if_ae	wrlong	#0, local01
25218     18 1E 86 31 |  if_ae	sub	local01, #24
2521c     18 1E 06 F1 | 	add	local01, #24
25220     0F 15 0A FB | 	rdlong	arg02, local01 wz
25224     18 1E 86 F1 | 	sub	local01, #24
25228     04 FA 05 A6 |  if_e	mov	result1, #4
2522c     64 01 90 AD |  if_e	jmp	#LR__3785
25230     FF 25 CE F7 | 	test	local04, #511 wz
25234     3C 01 90 5D |  if_ne	jmp	#LR__3784
25238     18 1E 06 F1 | 	add	local01, #24
2523c     0F 15 02 FB | 	rdlong	arg02, local01
25240     01 14 06 F1 | 	add	arg02, #1
25244     0F 15 62 FC | 	wrlong	arg02, local01
25248     04 1E 86 F1 | 	sub	local01, #4
2524c     0F 15 0A FB | 	rdlong	arg02, local01 wz
25250     14 1E 86 F1 | 	sub	local01, #20
25254     2C 00 90 5D |  if_ne	jmp	#LR__3780
25258     12 15 02 F6 | 	mov	arg02, local04
2525c     05 14 46 F0 | 	shr	arg02, #5
25260     08 22 06 F1 | 	add	local03, #8
25264     11 21 E2 FA | 	rdword	local02, local03
25268     08 22 86 F1 | 	sub	local03, #8
2526c     10 15 12 F2 | 	cmp	arg02, local02 wc
25270     18 1E 06 31 |  if_ae	add	local01, #24
25274     0F 01 68 3C |  if_ae	wrlong	#0, local01
25278                 | ' 				dp->sect = 0; return FR_NO_FILE;
25278     04 FA 05 36 |  if_ae	mov	result1, #4
2527c     14 01 90 3D |  if_ae	jmp	#LR__3785
25280     F0 00 90 FD | 	jmp	#LR__3783
25284                 | LR__3780
25284     12 13 02 F6 | 	mov	arg01, local04
25288     09 12 46 F0 | 	shr	arg01, #9
2528c     0A 22 06 F1 | 	add	local03, #10
25290     11 15 E2 FA | 	rdword	arg02, local03
25294     0A 22 86 F1 | 	sub	local03, #10
25298     01 14 86 F1 | 	sub	arg02, #1
2529c     0A 13 CA F7 | 	test	arg01, arg02 wz
252a0     D0 00 90 5D |  if_ne	jmp	#LR__3782
252a4     0F 13 02 F6 | 	mov	arg01, local01
252a8     14 1E 06 F1 | 	add	local01, #20
252ac     0F 15 02 FB | 	rdlong	arg02, local01
252b0     14 1E 86 F1 | 	sub	local01, #20
252b4     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
252b8     FD 26 02 F6 | 	mov	local05, result1
252bc     02 26 16 F2 | 	cmp	local05, #2 wc
252c0     02 FA 05 C6 |  if_b	mov	result1, #2
252c4     CC 00 90 CD |  if_b	jmp	#LR__3785
252c8     FF FF 7F FF 
252cc     FF 27 0E F2 | 	cmp	local05, ##-1 wz
252d0     01 FA 05 A6 |  if_e	mov	result1, #1
252d4     BC 00 90 AD |  if_e	jmp	#LR__3785
252d8     18 22 06 F1 | 	add	local03, #24
252dc     11 15 02 FB | 	rdlong	arg02, local03
252e0     18 22 86 F1 | 	sub	local03, #24
252e4     0A 27 12 F2 | 	cmp	local05, arg02 wc
252e8     68 00 90 CD |  if_b	jmp	#LR__3781
252ec     00 20 0E F2 | 	cmp	local02, #0 wz
252f0     18 1E 06 A1 |  if_e	add	local01, #24
252f4     0F 01 68 AC |  if_e	wrlong	#0, local01
252f8                 | ' 						dp->sect = 0; return FR_NO_FILE;
252f8     04 FA 05 A6 |  if_e	mov	result1, #4
252fc     94 00 90 AD |  if_e	jmp	#LR__3785
25300     0F 13 02 F6 | 	mov	arg01, local01
25304     14 1E 06 F1 | 	add	local01, #20
25308     0F 15 02 FB | 	rdlong	arg02, local01
2530c     14 1E 86 F1 | 	sub	local01, #20
25310     84 FA BF FD | 	call	#_fatfs_cc_create_chain
25314     FD 26 0A F6 | 	mov	local05, result1 wz
25318     07 FA 05 A6 |  if_e	mov	result1, #7
2531c     74 00 90 AD |  if_e	jmp	#LR__3785
25320     01 26 0E F2 | 	cmp	local05, #1 wz
25324     02 FA 05 A6 |  if_e	mov	result1, #2
25328     68 00 90 AD |  if_e	jmp	#LR__3785
2532c     FF FF 7F FF 
25330     FF 27 0E F2 | 	cmp	local05, ##-1 wz
25334     01 FA 05 A6 |  if_e	mov	result1, #1
25338     58 00 90 AD |  if_e	jmp	#LR__3785
2533c     13 15 02 F6 | 	mov	arg02, local05
25340     11 13 02 F6 | 	mov	arg01, local03
25344     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
25348     00 FA 0D F2 | 	cmp	result1, #0 wz
2534c     01 FA 05 56 |  if_ne	mov	result1, #1
25350     40 00 90 5D |  if_ne	jmp	#LR__3785
25354                 | LR__3781
25354     14 1E 06 F1 | 	add	local01, #20
25358     0F 27 62 FC | 	wrlong	local05, local01
2535c     11 13 02 F6 | 	mov	arg01, local03
25360     13 15 02 F6 | 	mov	arg02, local05
25364     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
25368     04 1E 06 F1 | 	add	local01, #4
2536c     0F FB 61 FC | 	wrlong	result1, local01
25370     18 1E 86 F1 | 	sub	local01, #24
25374                 | LR__3782
25374                 | LR__3783
25374                 | LR__3784
25374     10 1E 06 F1 | 	add	local01, #16
25378     0F 25 62 FC | 	wrlong	local04, local01
2537c     34 22 06 F1 | 	add	local03, #52
25380     FF 25 06 F5 | 	and	local04, #511
25384     12 23 02 F1 | 	add	local03, local04
25388     0C 1E 06 F1 | 	add	local01, #12
2538c     0F 23 62 FC | 	wrlong	local03, local01
25390                 | ' #line 1771 "ff.c"
25390                 | ' 				}
25390                 | ' 				dp->clust = clst;
25390                 | ' 				dp->sect = clst2sect(fs, clst);
25390                 | ' 			}
25390                 | ' 		}
25390                 | ' 	}
25390                 | ' 	dp->dptr = ofs;
25390                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
25390                 | ' 
25390                 | ' 	return FR_OK;
25390     00 FA 05 F6 | 	mov	result1, #0
25394                 | LR__3785
25394     A7 F0 03 F6 | 	mov	ptra, fp
25398     B2 00 A0 FD | 	call	#popregs_
2539c                 | _fatfs_cc_dir_next_ret
2539c     2D 00 64 FD | 	ret
253a0                 | 
253a0                 | _fatfs_cc_dir_alloc
253a0     08 4A 05 F6 | 	mov	COUNT_, #8
253a4     A8 00 A0 FD | 	call	#pushregs_
253a8     09 1F 02 F6 | 	mov	local01, arg01
253ac     0A 21 02 F6 | 	mov	local02, arg02
253b0     0F 23 02 FB | 	rdlong	local03, local01
253b4     0F 13 02 F6 | 	mov	arg01, local01
253b8     00 14 06 F6 | 	mov	arg02, #0
253bc     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
253c0     FD 24 0A F6 | 	mov	local04, result1 wz
253c4     70 00 90 5D |  if_ne	jmp	#LR__3794
253c8     00 26 06 F6 | 	mov	local05, #0
253cc                 | ' 		n = 0;
253cc                 | ' 		do {
253cc                 | LR__3790
253cc     18 1E 06 F1 | 	add	local01, #24
253d0     0F 15 02 FB | 	rdlong	arg02, local01
253d4     18 1E 86 F1 | 	sub	local01, #24
253d8     11 13 02 F6 | 	mov	arg01, local03
253dc     38 F3 BF FD | 	call	#_fatfs_cc_move_window
253e0     FD 24 0A F6 | 	mov	local04, result1 wz
253e4     50 00 90 5D |  if_ne	jmp	#LR__3793
253e8     1C 1E 06 F1 | 	add	local01, #28
253ec     0F 29 02 FB | 	rdlong	local06, local01
253f0     1C 1E 86 F1 | 	sub	local01, #28
253f4     14 29 C2 FA | 	rdbyte	local06, local06
253f8     E5 28 0E F2 | 	cmp	local06, #229 wz
253fc     1C 1E 06 51 |  if_ne	add	local01, #28
25400     0F 2B 02 5B |  if_ne	rdlong	local07, local01
25404     1C 1E 86 51 |  if_ne	sub	local01, #28
25408     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
2540c     10 00 90 5D |  if_ne	jmp	#LR__3791
25410     01 26 06 F1 | 	add	local05, #1
25414     10 27 0A F2 | 	cmp	local05, local02 wz
25418     1C 00 90 AD |  if_e	jmp	#LR__3793
2541c     04 00 90 FD | 	jmp	#LR__3792
25420                 | LR__3791
25420     00 26 06 F6 | 	mov	local05, #0
25424                 | LR__3792
25424     0F 13 02 F6 | 	mov	arg01, local01
25428     01 14 06 F6 | 	mov	arg02, #1
2542c     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
25430     FD 24 0A F6 | 	mov	local04, result1 wz
25434     94 FF 9F AD |  if_e	jmp	#LR__3790
25438                 | LR__3793
25438                 | LR__3794
25438     04 24 0E F2 | 	cmp	local04, #4 wz
2543c     07 24 06 A6 |  if_e	mov	local04, #7
25440                 | ' 	return res;
25440     12 FB 01 F6 | 	mov	result1, local04
25444     A7 F0 03 F6 | 	mov	ptra, fp
25448     B2 00 A0 FD | 	call	#popregs_
2544c                 | _fatfs_cc_dir_alloc_ret
2544c     2D 00 64 FD | 	ret
25450                 | 
25450                 | _fatfs_cc_ld_clust
25450     09 01 02 F6 | 	mov	_var01, arg01
25454     0A 13 02 F6 | 	mov	arg01, arg02
25458     1A 12 06 F1 | 	add	arg01, #26
2545c                 | ' {
2545c                 | ' 
2545c                 | ' 	return *((WORD*)ptr);
2545c     09 FB E1 FA | 	rdword	result1, arg01
25460     FD 12 32 F9 | 	getword	arg01, result1, #0
25464     00 01 C2 FA | 	rdbyte	_var01, _var01
25468     03 00 0E F2 | 	cmp	_var01, #3 wz
2546c     14 14 06 A1 |  if_e	add	arg02, #20
25470                 | ' {
25470                 | ' 
25470                 | ' 	return *((WORD*)ptr);
25470     0A FB E1 AA |  if_e	rdword	result1, arg02
25474     10 FA 65 A0 |  if_e	shl	result1, #16
25478     FD 12 42 A5 |  if_e	or	arg01, result1
2547c                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2547c                 | ' 	}
2547c                 | ' 
2547c                 | ' 	return cl;
2547c     09 FB 01 F6 | 	mov	result1, arg01
25480                 | _fatfs_cc_ld_clust_ret
25480     2D 00 64 FD | 	ret
25484                 | 
25484                 | _fatfs_cc_st_clust
25484     09 01 02 F6 | 	mov	_var01, arg01
25488     0A 13 02 F6 | 	mov	arg01, arg02
2548c     1A 12 06 F1 | 	add	arg01, #26
25490     09 17 52 FC | 	wrword	arg03, arg01
25494     00 01 C2 FA | 	rdbyte	_var01, _var01
25498     03 00 0E F2 | 	cmp	_var01, #3 wz
2549c     14 14 06 A1 |  if_e	add	arg02, #20
254a0     10 16 46 A0 |  if_e	shr	arg03, #16
254a4     0A 17 52 AC |  if_e	wrword	arg03, arg02
254a8                 | _fatfs_cc_st_clust_ret
254a8     2D 00 64 FD | 	ret
254ac                 | 
254ac                 | _fatfs_cc_cmp_lfn
254ac     07 4A 05 F6 | 	mov	COUNT_, #7
254b0     A8 00 A0 FD | 	call	#pushregs_
254b4     09 1F 02 F6 | 	mov	local01, arg01
254b8     0A 13 02 F6 | 	mov	arg01, arg02
254bc     1A 12 06 F1 | 	add	arg01, #26
254c0                 | ' {
254c0                 | ' 
254c0                 | ' 	return *((WORD*)ptr);
254c0     09 FB E9 FA | 	rdword	result1, arg01 wz
254c4     00 FA 05 56 |  if_ne	mov	result1, #0
254c8     E0 00 90 5D |  if_ne	jmp	#LR__3806
254cc     0A 21 C2 FA | 	rdbyte	local02, arg02
254d0     3F 20 06 F5 | 	and	local02, #63
254d4     01 20 86 F1 | 	sub	local02, #1
254d8     0D 20 06 FD | 	qmul	local02, #13
254dc                 | ' 
254dc                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
254dc                 | ' 
254dc                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
254dc     01 22 06 F6 | 	mov	local03, #1
254e0     00 24 06 F6 | 	mov	local04, #0
254e4     18 26 62 FD | 	getqx	local05
254e8                 | LR__3800
254e8     0D 24 16 F2 | 	cmp	local04, #13 wc
254ec     9C 00 90 3D |  if_ae	jmp	#LR__3805
254f0     0A 13 02 F6 | 	mov	arg01, arg02
254f4     12 21 02 F6 | 	mov	local02, local04
254f8     01 00 00 FF 
254fc     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
25500     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
25504     10 21 C2 FA | 	rdbyte	local02, local02
25508     01 20 06 FA | 	mul	local02, #1
2550c     10 13 02 F1 | 	add	arg01, local02
25510     01 00 00 FF 
25514     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
25518                 | ' {
25518                 | ' 
25518                 | ' 	return *((WORD*)ptr);
25518     09 FB E1 FA | 	rdword	result1, arg01
2551c     FD 28 02 F6 | 	mov	local06, result1
25520     11 21 02 F6 | 	mov	local02, local03
25524     0F 20 4E F7 | 	zerox	local02, #15 wz
25528     44 00 90 AD |  if_e	jmp	#LR__3803
2552c     00 27 16 F2 | 	cmp	local05, #256 wc
25530     2C 00 90 3D |  if_ae	jmp	#LR__3801
25534     14 13 32 F9 | 	getword	arg01, local06, #0
25538     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2553c     FD 20 02 F6 | 	mov	local02, result1
25540     13 23 02 F6 | 	mov	local03, local05
25544     01 22 66 F0 | 	shl	local03, #1
25548     0F 23 02 F1 | 	add	local03, local01
2554c     11 13 E2 FA | 	rdword	arg01, local03
25550     01 26 06 F1 | 	add	local05, #1
25554     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
25558     FD 20 0A F2 | 	cmp	local02, result1 wz
2555c     08 00 90 AD |  if_e	jmp	#LR__3802
25560                 | LR__3801
25560                 | ' 				return 0;
25560     00 FA 05 F6 | 	mov	result1, #0
25564     44 00 90 FD | 	jmp	#LR__3806
25568                 | LR__3802
25568     14 23 02 F6 | 	mov	local03, local06
2556c     14 00 90 FD | 	jmp	#LR__3804
25570                 | LR__3803
25570     14 29 32 F9 | 	getword	local06, local06, #0
25574     7F 00 00 FF 
25578     FF 29 0E F2 | 	cmp	local06, ##65535 wz
2557c     00 FA 05 56 |  if_ne	mov	result1, #0
25580     28 00 90 5D |  if_ne	jmp	#LR__3806
25584                 | LR__3804
25584     01 24 06 F1 | 	add	local04, #1
25588     5C FF 9F FD | 	jmp	#LR__3800
2558c                 | LR__3805
2558c     0A 21 C2 FA | 	rdbyte	local02, arg02
25590     40 20 CE F7 | 	test	local02, #64 wz
25594     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
25598     01 26 66 50 |  if_ne	shl	local05, #1
2559c     0F 27 02 51 |  if_ne	add	local05, local01
255a0     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
255a4     00 FA 05 56 |  if_ne	mov	result1, #0
255a8                 | ' 
255a8                 | ' 	return 1;
255a8     01 FA 05 A6 |  if_e	mov	result1, #1
255ac                 | LR__3806
255ac     A7 F0 03 F6 | 	mov	ptra, fp
255b0     B2 00 A0 FD | 	call	#popregs_
255b4                 | _fatfs_cc_cmp_lfn_ret
255b4     2D 00 64 FD | 	ret
255b8                 | 
255b8                 | _fatfs_cc_pick_lfn
255b8     09 01 02 F6 | 	mov	_var01, arg01
255bc     0A 13 02 F6 | 	mov	arg01, arg02
255c0     1A 12 06 F1 | 	add	arg01, #26
255c4                 | ' {
255c4                 | ' 
255c4                 | ' 	return *((WORD*)ptr);
255c4     09 FB E9 FA | 	rdword	result1, arg01 wz
255c8     00 FA 05 56 |  if_ne	mov	result1, #0
255cc     D4 00 90 5D |  if_ne	jmp	#LR__3815
255d0     0A 03 C2 FA | 	rdbyte	_var02, arg02
255d4     40 02 26 F5 | 	andn	_var02, #64
255d8     01 02 86 F1 | 	sub	_var02, #1
255dc     0D 02 06 FD | 	qmul	_var02, #13
255e0                 | ' 
255e0                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
255e0                 | ' 
255e0                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
255e0     01 04 06 F6 | 	mov	_var03, #1
255e4     00 06 06 F6 | 	mov	_var04, #0
255e8     18 08 62 FD | 	getqx	_var05
255ec                 | LR__3810
255ec     0D 06 16 F2 | 	cmp	_var04, #13 wc
255f0     80 00 90 3D |  if_ae	jmp	#LR__3813
255f4     0A 13 02 F6 | 	mov	arg01, arg02
255f8     03 03 02 F6 | 	mov	_var02, _var04
255fc     01 00 00 FF 
25600     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
25604     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
25608     01 03 C2 FA | 	rdbyte	_var02, _var02
2560c     01 02 06 FA | 	mul	_var02, #1
25610     01 13 02 F1 | 	add	arg01, _var02
25614     01 00 00 FF 
25618     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2561c                 | ' {
2561c                 | ' 
2561c                 | ' 	return *((WORD*)ptr);
2561c     09 FB E1 FA | 	rdword	result1, arg01
25620     FD 0A 02 F6 | 	mov	_var06, result1
25624     02 03 02 F6 | 	mov	_var02, _var03
25628     0F 02 4E F7 | 	zerox	_var02, #15 wz
2562c     28 00 90 AD |  if_e	jmp	#LR__3811
25630     00 09 16 F2 | 	cmp	_var05, #256 wc
25634     00 FA 05 36 |  if_ae	mov	result1, #0
25638     68 00 90 3D |  if_ae	jmp	#LR__3815
2563c     04 03 02 F6 | 	mov	_var02, _var05
25640     01 02 66 F0 | 	shl	_var02, #1
25644     00 03 02 F1 | 	add	_var02, _var01
25648     05 05 02 F6 | 	mov	_var03, _var06
2564c     01 05 52 FC | 	wrword	_var03, _var02
25650     01 08 06 F1 | 	add	_var05, #1
25654     14 00 90 FD | 	jmp	#LR__3812
25658                 | LR__3811
25658     05 0B 32 F9 | 	getword	_var06, _var06, #0
2565c     7F 00 00 FF 
25660     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
25664     00 FA 05 56 |  if_ne	mov	result1, #0
25668     38 00 90 5D |  if_ne	jmp	#LR__3815
2566c                 | LR__3812
2566c     01 06 06 F1 | 	add	_var04, #1
25670     78 FF 9F FD | 	jmp	#LR__3810
25674                 | LR__3813
25674     0A 03 C2 FA | 	rdbyte	_var02, arg02
25678     40 02 CE F7 | 	test	_var02, #64 wz
2567c     02 0D 02 56 |  if_ne	mov	_var07, _var03
25680     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
25684     18 00 90 AD |  if_e	jmp	#LR__3814
25688     00 09 16 F2 | 	cmp	_var05, #256 wc
2568c     00 FA 05 36 |  if_ae	mov	result1, #0
25690     10 00 90 3D |  if_ae	jmp	#LR__3815
25694     01 08 66 F0 | 	shl	_var05, #1
25698     00 09 02 F1 | 	add	_var05, _var01
2569c     04 01 58 FC | 	wrword	#0, _var05
256a0                 | LR__3814
256a0                 | ' 		lfnbuf[i] = 0;
256a0                 | ' 	}
256a0                 | ' 
256a0                 | ' 	return 1;
256a0     01 FA 05 F6 | 	mov	result1, #1
256a4                 | LR__3815
256a4                 | _fatfs_cc_pick_lfn_ret
256a4     2D 00 64 FD | 	ret
256a8                 | 
256a8                 | _fatfs_cc_put_lfn
256a8     0D 14 06 F1 | 	add	arg02, #13
256ac     0A 19 42 FC | 	wrbyte	arg04, arg02
256b0     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
256b4     01 18 86 F1 | 	sub	arg04, #1
256b8     0D 18 06 FD | 	qmul	arg04, #13
256bc     09 01 02 F6 | 	mov	_var01, arg01
256c0     02 14 86 F1 | 	sub	arg02, #2
256c4     0A 1F 48 FC | 	wrbyte	#15, arg02
256c8     01 14 06 F1 | 	add	arg02, #1
256cc     0A 01 48 FC | 	wrbyte	#0, arg02
256d0     0C 14 86 F1 | 	sub	arg02, #12
256d4     0A 13 02 F6 | 	mov	arg01, arg02
256d8     1A 12 06 F1 | 	add	arg01, #26
256dc     09 01 58 FC | 	wrword	#0, arg01
256e0     00 02 06 F6 | 	mov	_var02, #0
256e4     00 04 06 F6 | 	mov	_var03, #0
256e8                 | ' 	BYTE* dir,
256e8                 | ' 	BYTE ord,
256e8                 | ' 	BYTE sum
256e8                 | ' )
256e8                 | ' {
256e8                 | ' 	UINT i, s;
256e8                 | ' 	WCHAR wc;
256e8                 | ' 
256e8                 | ' 
256e8                 | ' 	dir[ 13 ] = sum;
256e8                 | ' 	dir[ 11 ] =  0x0F ;
256e8                 | ' 	dir[ 12 ] = 0;
256e8                 | ' 	st_word(dir +  26 , 0);
256e8                 | ' 
256e8                 | ' 	i = (ord - 1) * 13;
256e8                 | ' 	s = wc = 0;
256e8                 | ' 	do {
256e8     01 00 00 FF 
256ec     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
256f0     18 06 62 FD | 	getqx	_var04
256f4     97 2A 48 FB | 	callpa	#(@LR__3821-@LR__3820)>>2,fcache_load_ptr_
256f8                 | LR__3820
256f8     01 19 32 F9 | 	getword	arg04, _var02, #0
256fc     7F 00 00 FF 
25700     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
25704     03 13 02 56 |  if_ne	mov	arg01, _var04
25708     01 06 06 51 |  if_ne	add	_var04, #1
2570c     01 12 66 50 |  if_ne	shl	arg01, #1
25710     00 13 02 51 |  if_ne	add	arg01, _var01
25714     09 03 E2 5A |  if_ne	rdword	_var02, arg01
25718     0A 13 02 F6 | 	mov	arg01, arg02
2571c     02 19 02 F6 | 	mov	arg04, _var03
25720     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
25724     0C 19 C2 FA | 	rdbyte	arg04, arg04
25728     01 18 06 FA | 	mul	arg04, #1
2572c     0C 13 02 F1 | 	add	arg01, arg04
25730     09 03 52 FC | 	wrword	_var02, arg01
25734     01 19 02 F6 | 	mov	arg04, _var02
25738     0F 18 4E F7 | 	zerox	arg04, #15 wz
2573c     0F 02 CE A9 |  if_e	bmask	_var02, #15
25740     01 04 06 F1 | 	add	_var03, #1
25744     0D 04 16 F2 | 	cmp	_var03, #13 wc
25748     AC FF 9F CD |  if_b	jmp	#LR__3820
2574c                 | LR__3821
2574c     01 00 00 FF 
25750     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
25754     01 03 32 F9 | 	getword	_var02, _var02, #0
25758     7F 00 00 FF 
2575c     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
25760     01 06 66 50 |  if_ne	shl	_var04, #1
25764     00 07 02 51 |  if_ne	add	_var04, _var01
25768     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2576c     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
25770     40 16 46 A5 |  if_e	or	arg03, #64
25774     0A 17 42 FC | 	wrbyte	arg03, arg02
25778                 | _fatfs_cc_put_lfn_ret
25778     2D 00 64 FD | 	ret
2577c                 | 
2577c                 | _fatfs_cc_gen_numname
2577c     08 4A 05 F6 | 	mov	COUNT_, #8
25780     A8 00 A0 FD | 	call	#pushregs_
25784     2C F0 07 F1 | 	add	ptra, #44
25788     09 1F 02 F6 | 	mov	local01, arg01
2578c     0A 21 02 F6 | 	mov	local02, arg02
25790     0B 23 02 F6 | 	mov	local03, arg03
25794     0C 25 02 F6 | 	mov	local04, arg04
25798     0F 13 02 F6 | 	mov	arg01, local01
2579c     10 15 02 F6 | 	mov	arg02, local02
257a0     0B 16 06 F6 | 	mov	arg03, #11
257a4     FC 77 BF FD | 	call	#__system____builtin_memmove
257a8     06 24 16 F2 | 	cmp	local04, #6 wc
257ac     48 00 90 CD |  if_b	jmp	#LR__3835
257b0     12 27 02 F6 | 	mov	local05, local04
257b4     97 1E 48 FB | 	callpa	#(@LR__3833-@LR__3830)>>2,fcache_load_ptr_
257b8                 | ' 		sreg = seq;
257b8                 | ' 		while (*lfn) {
257b8                 | LR__3830
257b8     11 29 EA FA | 	rdword	local06, local03 wz
257bc     34 00 90 AD |  if_e	jmp	#LR__3834
257c0     11 2B E2 FA | 	rdword	local07, local03
257c4                 | ' 			wc = *lfn++;
257c4                 | ' 			for (i = 0; i < 16; i++) {
257c4     02 22 06 F1 | 	add	local03, #2
257c8     10 12 DC FC | 	rep	@LR__3832, #16
257cc                 | LR__3831
257cc     01 26 66 F0 | 	shl	local05, #1
257d0     15 29 32 F9 | 	getword	local06, local07, #0
257d4     01 28 06 F5 | 	and	local06, #1
257d8     14 27 02 F1 | 	add	local05, local06
257dc     15 2B 32 F9 | 	getword	local07, local07, #0
257e0     01 2A 46 F0 | 	shr	local07, #1
257e4     10 26 2E F4 | 	testbn	local05, #16 wz
257e8     88 00 00 5F 
257ec     21 26 66 55 |  if_ne	xor	local05, ##69665
257f0                 | LR__3832
257f0     C4 FF 9F FD | 	jmp	#LR__3830
257f4                 | LR__3833
257f4                 | LR__3834
257f4     13 25 02 F6 | 	mov	local04, local05
257f8                 | LR__3835
257f8     07 2A 06 F6 | 	mov	local07, #7
257fc                 | ' 			}
257fc                 | ' 		}
257fc                 | ' 		seq = (UINT)sreg;
257fc                 | ' 	}
257fc                 | ' 
257fc                 | ' 
257fc                 | ' 	i = 7;
257fc                 | ' 	do {
257fc     10 4E 05 F1 | 	add	fp, #16
25800     97 1A 48 FB | 	callpa	#(@LR__3837-@LR__3836)>>2,fcache_load_ptr_
25804                 | LR__3836
25804     12 27 42 F8 | 	getnib	local05, local04, #0
25808     30 26 06 F1 | 	add	local05, #48
2580c     04 24 46 F0 | 	shr	local04, #4
25810     13 29 E2 F8 | 	getbyte	local06, local05, #0
25814     3A 28 16 F2 | 	cmp	local06, #58 wc
25818     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
2581c     07 26 06 31 |  if_ae	add	local05, #7
25820     15 29 02 F6 | 	mov	local06, local07
25824     01 2A 8E F1 | 	sub	local07, #1 wz
25828     A7 28 02 F1 | 	add	local06, fp
2582c     14 27 42 FC | 	wrbyte	local05, local06
25830     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
25834     CC FF 9F 5D |  if_ne	jmp	#LR__3836
25838                 | LR__3837
25838     15 29 02 F6 | 	mov	local06, local07
2583c     A7 28 02 F1 | 	add	local06, fp
25840     14 FD 48 FC | 	wrbyte	#126, local06
25844                 | ' 	ns[i] = '~';
25844                 | ' 
25844                 | ' 
25844                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
25844     00 26 06 F6 | 	mov	local05, #0
25848     10 4E 85 F1 | 	sub	fp, #16
2584c     97 2A 48 FB | 	callpa	#(@LR__3840-@LR__3838)>>2,fcache_load_ptr_
25850                 | LR__3838
25850     15 27 12 F2 | 	cmp	local05, local07 wc
25854     4C 00 90 3D |  if_ae	jmp	#LR__3841
25858     13 29 02 F6 | 	mov	local06, local05
2585c     0F 29 02 F1 | 	add	local06, local01
25860     14 29 C2 FA | 	rdbyte	local06, local06
25864     20 28 0E F2 | 	cmp	local06, #32 wz
25868     38 00 90 AD |  if_e	jmp	#LR__3841
2586c     13 13 02 F6 | 	mov	arg01, local05
25870     0F 13 02 F1 | 	add	arg01, local01
25874     09 13 CA FA | 	rdbyte	arg01, arg01 wz
25878     00 FA 05 56 |  if_ne	mov	result1, #0
2587c                 | ' 
2587c                 | ' 	return 0;
2587c     00 FA 05 A6 |  if_e	mov	result1, #0
25880     00 FA 0D F2 | 	cmp	result1, #0 wz
25884     14 00 90 AD |  if_e	jmp	#LR__3839
25888     15 29 02 F6 | 	mov	local06, local07
2588c     01 28 86 F1 | 	sub	local06, #1
25890     14 27 0A F2 | 	cmp	local05, local06 wz
25894     0C 00 90 AD |  if_e	jmp	#LR__3841
25898     01 26 06 F1 | 	add	local05, #1
2589c                 | LR__3839
2589c     01 26 06 F1 | 	add	local05, #1
258a0     AC FF 9F FD | 	jmp	#LR__3838
258a4                 | LR__3840
258a4                 | LR__3841
258a4     97 20 48 FB | 	callpa	#(@LR__3845-@LR__3842)>>2,fcache_load_ptr_
258a8                 | ' 			j++;
258a8                 | ' 		}
258a8                 | ' 	}
258a8                 | ' 	do {
258a8                 | LR__3842
258a8     13 29 02 F6 | 	mov	local06, local05
258ac     0F 29 02 F1 | 	add	local06, local01
258b0     08 2A 16 F2 | 	cmp	local07, #8 wc
258b4     01 26 06 F1 | 	add	local05, #1
258b8     1C 00 90 3D |  if_ae	jmp	#LR__3843
258bc     15 25 02 F6 | 	mov	local04, local07
258c0     10 4E 05 F1 | 	add	fp, #16
258c4     A7 24 02 F1 | 	add	local04, fp
258c8     12 2D C2 FA | 	rdbyte	local08, local04
258cc     01 2A 06 F1 | 	add	local07, #1
258d0     10 4E 85 F1 | 	sub	fp, #16
258d4     04 00 90 FD | 	jmp	#LR__3844
258d8                 | LR__3843
258d8     20 2C 06 F6 | 	mov	local08, #32
258dc                 | LR__3844
258dc     14 2D 42 FC | 	wrbyte	local08, local06
258e0     08 26 16 F2 | 	cmp	local05, #8 wc
258e4     C0 FF 9F CD |  if_b	jmp	#LR__3842
258e8                 | LR__3845
258e8     A7 F0 03 F6 | 	mov	ptra, fp
258ec     B2 00 A0 FD | 	call	#popregs_
258f0                 | _fatfs_cc_gen_numname_ret
258f0     2D 00 64 FD | 	ret
258f4                 | 
258f4                 | _fatfs_cc_sum_sfn
258f4     00 00 06 F6 | 	mov	_var01, #0
258f8                 | ' )
258f8                 | ' {
258f8                 | ' 	BYTE sum = 0;
258f8                 | ' 	UINT n = 11;
258f8                 | ' 
258f8                 | ' 	do {
258f8     97 12 48 FB | 	callpa	#(@LR__3852-@LR__3850)>>2,fcache_load_ptr_
258fc                 | LR__3850
258fc     0B 10 DC FC | 	rep	@LR__3853, #11
25900                 | LR__3851
25900     00 FB E1 F8 | 	getbyte	result1, _var01, #0
25904     01 FA 45 F0 | 	shr	result1, #1
25908     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2590c     07 00 66 F0 | 	shl	_var01, #7
25910     00 FB 01 F1 | 	add	result1, _var01
25914     09 01 C2 FA | 	rdbyte	_var01, arg01
25918     FD 00 02 F1 | 	add	_var01, result1
2591c     01 12 06 F1 | 	add	arg01, #1
25920                 | LR__3852
25920                 | LR__3853
25920                 | ' 	return sum;
25920     00 FB 01 F6 | 	mov	result1, _var01
25924                 | _fatfs_cc_sum_sfn_ret
25924     2D 00 64 FD | 	ret
25928                 | 
25928                 | _fatfs_cc_dir_read
25928     0C 4A 05 F6 | 	mov	COUNT_, #12
2592c     A8 00 A0 FD | 	call	#pushregs_
25930     09 1F 02 F6 | 	mov	local01, arg01
25934     0A 21 02 F6 | 	mov	local02, arg02
25938     04 22 06 F6 | 	mov	local03, #4
2593c     0F 25 02 FB | 	rdlong	local04, local01
25940     FF 26 06 F6 | 	mov	local05, #255
25944     FF 28 06 F6 | 	mov	local06, #255
25948                 | ' )
25948                 | ' {
25948                 | ' 	FRESULT res = FR_NO_FILE;
25948                 | ' 	FATFS *fs = dp->obj.fs;
25948                 | ' 	BYTE attr, b;
25948                 | ' 
25948                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
25948                 | ' 
25948                 | ' 
25948                 | ' 	while (dp->sect) {
25948                 | LR__3860
25948     18 1E 06 F1 | 	add	local01, #24
2594c     0F FB 09 FB | 	rdlong	result1, local01 wz
25950     18 1E 86 F1 | 	sub	local01, #24
25954     AC 01 90 AD |  if_e	jmp	#LR__3870
25958     18 1E 06 F1 | 	add	local01, #24
2595c     0F 15 02 FB | 	rdlong	arg02, local01
25960     18 1E 86 F1 | 	sub	local01, #24
25964     12 13 02 F6 | 	mov	arg01, local04
25968     AC ED BF FD | 	call	#_fatfs_cc_move_window
2596c     FD 22 0A F6 | 	mov	local03, result1 wz
25970     90 01 90 5D |  if_ne	jmp	#LR__3870
25974     1C 1E 06 F1 | 	add	local01, #28
25978     0F FB 01 FB | 	rdlong	result1, local01
2597c     1C 1E 86 F1 | 	sub	local01, #28
25980     FD 2A C2 FA | 	rdbyte	local07, result1
25984     15 FB 01 F6 | 	mov	result1, local07
25988     07 FA 4D F7 | 	zerox	result1, #7 wz
2598c     04 22 06 A6 |  if_e	mov	local03, #4
25990                 | ' 			res = FR_NO_FILE; break;
25990     70 01 90 AD |  if_e	jmp	#LR__3870
25994     1C 1E 06 F1 | 	add	local01, #28
25998     0F 2D 02 FB | 	rdlong	local08, local01
2599c     0B 2C 06 F1 | 	add	local08, #11
259a0     16 2F C2 FA | 	rdbyte	local09, local08
259a4     3F 2E 06 F5 | 	and	local09, #63
259a8     16 1E 86 F1 | 	sub	local01, #22
259ac     0F 2F 42 FC | 	wrbyte	local09, local01
259b0     06 1E 86 F1 | 	sub	local01, #6
259b4     15 FB E1 F8 | 	getbyte	result1, local07, #0
259b8     E5 FA 0D F2 | 	cmp	result1, #229 wz
259bc     15 2D 02 56 |  if_ne	mov	local08, local07
259c0     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
259c4     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
259c8     1C 00 90 AD |  if_e	jmp	#LR__3861
259cc     00 30 06 F6 | 	mov	local10, #0
259d0     17 2D E2 F8 | 	getbyte	local08, local09, #0
259d4     20 2C 26 F5 | 	andn	local08, #32
259d8     08 2C 0E F2 | 	cmp	local08, #8 wz
259dc     01 30 06 A6 |  if_e	mov	local10, #1
259e0     10 31 0A F2 | 	cmp	local10, local02 wz
259e4     08 00 90 AD |  if_e	jmp	#LR__3862
259e8                 | LR__3861
259e8     FF 26 06 F6 | 	mov	local05, #255
259ec     00 01 90 FD | 	jmp	#LR__3869
259f0                 | LR__3862
259f0     17 2F E2 F8 | 	getbyte	local09, local09, #0
259f4     0F 2E 0E F2 | 	cmp	local09, #15 wz
259f8     B4 00 90 5D |  if_ne	jmp	#LR__3866
259fc     15 33 E2 F8 | 	getbyte	local11, local07, #0
25a00     40 32 CE F7 | 	test	local11, #64 wz
25a04     30 00 90 AD |  if_e	jmp	#LR__3863
25a08     1C 1E 06 F1 | 	add	local01, #28
25a0c     0F 33 02 FB | 	rdlong	local11, local01
25a10     0D 32 06 F1 | 	add	local11, #13
25a14     19 29 C2 FA | 	rdbyte	local06, local11
25a18     15 2B E2 F8 | 	getbyte	local07, local07, #0
25a1c     BF 2A 06 F5 | 	and	local07, #191
25a20     15 27 02 F6 | 	mov	local05, local07
25a24     0C 1E 86 F1 | 	sub	local01, #12
25a28     0F 33 02 FB | 	rdlong	local11, local01
25a2c     1C 1E 06 F1 | 	add	local01, #28
25a30     0F 33 62 FC | 	wrlong	local11, local01
25a34     2C 1E 86 F1 | 	sub	local01, #44
25a38                 | LR__3863
25a38     15 2D E2 F8 | 	getbyte	local08, local07, #0
25a3c     13 31 E2 F8 | 	getbyte	local10, local05, #0
25a40     18 2D 0A F2 | 	cmp	local08, local10 wz
25a44     5C 00 90 5D |  if_ne	jmp	#LR__3864
25a48     14 31 E2 F8 | 	getbyte	local10, local06, #0
25a4c     1C 1E 06 F1 | 	add	local01, #28
25a50     0F 2F 02 FB | 	rdlong	local09, local01
25a54     1C 1E 86 F1 | 	sub	local01, #28
25a58     0D 2E 06 F1 | 	add	local09, #13
25a5c     17 2D C2 FA | 	rdbyte	local08, local09
25a60     16 2F E2 F8 | 	getbyte	local09, local08, #0
25a64     17 31 0A F2 | 	cmp	local10, local09 wz
25a68     38 00 90 5D |  if_ne	jmp	#LR__3864
25a6c     0C 24 06 F1 | 	add	local04, #12
25a70     12 13 02 FB | 	rdlong	arg01, local04
25a74     0C 24 86 F1 | 	sub	local04, #12
25a78     1C 1E 06 F1 | 	add	local01, #28
25a7c     0F 35 02 FB | 	rdlong	local12, local01
25a80     1C 1E 86 F1 | 	sub	local01, #28
25a84     1A 15 02 F6 | 	mov	arg02, local12
25a88     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
25a8c     00 FA 4D F2 | 	cmps	result1, #0 wz
25a90     13 35 02 56 |  if_ne	mov	local12, local05
25a94     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
25a98     01 34 86 51 |  if_ne	sub	local12, #1
25a9c     1A 33 02 56 |  if_ne	mov	local11, local12
25aa0     04 00 90 5D |  if_ne	jmp	#LR__3865
25aa4                 | LR__3864
25aa4     FF 32 06 F6 | 	mov	local11, #255
25aa8                 | LR__3865
25aa8     19 27 02 F6 | 	mov	local05, local11
25aac     40 00 90 FD | 	jmp	#LR__3868
25ab0                 | LR__3866
25ab0     13 33 02 F6 | 	mov	local11, local05
25ab4     07 32 4E F7 | 	zerox	local11, #7 wz
25ab8     20 00 90 5D |  if_ne	jmp	#LR__3867
25abc     14 29 E2 F8 | 	getbyte	local06, local06, #0
25ac0     1C 1E 06 F1 | 	add	local01, #28
25ac4     0F 13 02 FB | 	rdlong	arg01, local01
25ac8     1C 1E 86 F1 | 	sub	local01, #28
25acc     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
25ad0     FD FA E1 F8 | 	getbyte	result1, result1, #0
25ad4     FD 28 0A F2 | 	cmp	local06, result1 wz
25ad8     28 00 90 AD |  if_e	jmp	#LR__3870
25adc                 | LR__3867
25adc     2C 1E 06 F1 | 	add	local01, #44
25ae0     FF FF FF FF 
25ae4     0F FF 6B FC | 	wrlong	##-1, local01
25ae8     2C 1E 86 F1 | 	sub	local01, #44
25aec                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
25aec                 | ' 					}
25aec                 | ' 					break;
25aec     14 00 90 FD | 	jmp	#LR__3870
25af0                 | LR__3868
25af0                 | LR__3869
25af0     0F 13 02 F6 | 	mov	arg01, local01
25af4     00 14 06 F6 | 	mov	arg02, #0
25af8     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
25afc     FD 22 0A F6 | 	mov	local03, result1 wz
25b00     44 FE 9F AD |  if_e	jmp	#LR__3860
25b04                 | LR__3870
25b04     00 22 0E F2 | 	cmp	local03, #0 wz
25b08     18 1E 06 51 |  if_ne	add	local01, #24
25b0c     0F 01 68 5C |  if_ne	wrlong	#0, local01
25b10                 | ' 	return res;
25b10     11 FB 01 F6 | 	mov	result1, local03
25b14     A7 F0 03 F6 | 	mov	ptra, fp
25b18     B2 00 A0 FD | 	call	#popregs_
25b1c                 | _fatfs_cc_dir_read_ret
25b1c     2D 00 64 FD | 	ret
25b20                 | 
25b20                 | _fatfs_cc_dir_find
25b20     0B 4A 05 F6 | 	mov	COUNT_, #11
25b24     A8 00 A0 FD | 	call	#pushregs_
25b28     09 1F 02 F6 | 	mov	local01, arg01
25b2c     0F 21 02 FB | 	rdlong	local02, local01
25b30     0F 13 02 F6 | 	mov	arg01, local01
25b34     00 14 06 F6 | 	mov	arg02, #0
25b38     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
25b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
25b40     18 02 90 5D |  if_ne	jmp	#LR__3892
25b44     FF 22 06 F6 | 	mov	local03, #255
25b48     FF 24 06 F6 | 	mov	local04, #255
25b4c     2C 1E 06 F1 | 	add	local01, #44
25b50     FF FF FF FF 
25b54     0F FF 6B FC | 	wrlong	##-1, local01
25b58     2C 1E 86 F1 | 	sub	local01, #44
25b5c                 | ' #line 2404 "ff.c"
25b5c                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
25b5c                 | ' 
25b5c                 | ' 	do {
25b5c                 | LR__3880
25b5c     18 1E 06 F1 | 	add	local01, #24
25b60     0F 15 02 FB | 	rdlong	arg02, local01
25b64     18 1E 86 F1 | 	sub	local01, #24
25b68     10 13 02 F6 | 	mov	arg01, local02
25b6c     A8 EB BF FD | 	call	#_fatfs_cc_move_window
25b70     FD 26 0A F6 | 	mov	local05, result1 wz
25b74     E0 01 90 5D |  if_ne	jmp	#LR__3891
25b78     1C 1E 06 F1 | 	add	local01, #28
25b7c     0F 17 02 FB | 	rdlong	arg03, local01
25b80     1C 1E 86 F1 | 	sub	local01, #28
25b84     0B 29 C2 FA | 	rdbyte	local06, arg03
25b88     14 17 02 F6 | 	mov	arg03, local06
25b8c     07 16 4E F7 | 	zerox	arg03, #7 wz
25b90     04 26 06 A6 |  if_e	mov	local05, #4
25b94     C0 01 90 AD |  if_e	jmp	#LR__3891
25b98     1C 1E 06 F1 | 	add	local01, #28
25b9c     0F 2B 02 FB | 	rdlong	local07, local01
25ba0     15 17 02 F6 | 	mov	arg03, local07
25ba4     0B 16 06 F1 | 	add	arg03, #11
25ba8     0B 2D C2 FA | 	rdbyte	local08, arg03
25bac     3F 2C 06 F5 | 	and	local08, #63
25bb0     16 1E 86 F1 | 	sub	local01, #22
25bb4     0F 2D 42 FC | 	wrbyte	local08, local01
25bb8     06 1E 86 F1 | 	sub	local01, #6
25bbc     14 17 E2 F8 | 	getbyte	arg03, local06, #0
25bc0     E5 16 0E F2 | 	cmp	arg03, #229 wz
25bc4     18 00 90 AD |  if_e	jmp	#LR__3881
25bc8     16 17 E2 F8 | 	getbyte	arg03, local08, #0
25bcc     08 16 CE F7 | 	test	arg03, #8 wz
25bd0     16 2B 02 56 |  if_ne	mov	local07, local08
25bd4     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
25bd8     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
25bdc     18 00 90 AD |  if_e	jmp	#LR__3882
25be0                 | LR__3881
25be0     FF 24 06 F6 | 	mov	local04, #255
25be4     2C 1E 06 F1 | 	add	local01, #44
25be8     FF FF FF FF 
25bec     0F FF 6B FC | 	wrlong	##-1, local01
25bf0     2C 1E 86 F1 | 	sub	local01, #44
25bf4     4C 01 90 FD | 	jmp	#LR__3890
25bf8                 | LR__3882
25bf8     16 2D E2 F8 | 	getbyte	local08, local08, #0
25bfc     0F 2C 0E F2 | 	cmp	local08, #15 wz
25c00     C8 00 90 5D |  if_ne	jmp	#LR__3886
25c04     2B 1E 06 F1 | 	add	local01, #43
25c08     0F 2D C2 FA | 	rdbyte	local08, local01
25c0c     2B 1E 86 F1 | 	sub	local01, #43
25c10     40 2C CE F7 | 	test	local08, #64 wz
25c14     2C 01 90 5D |  if_ne	jmp	#LR__3889
25c18     14 2F E2 F8 | 	getbyte	local09, local06, #0
25c1c     40 2E CE F7 | 	test	local09, #64 wz
25c20     30 00 90 AD |  if_e	jmp	#LR__3883
25c24     1C 1E 06 F1 | 	add	local01, #28
25c28     0F 2F 02 FB | 	rdlong	local09, local01
25c2c     0D 2E 06 F1 | 	add	local09, #13
25c30     17 23 C2 FA | 	rdbyte	local03, local09
25c34     14 29 E2 F8 | 	getbyte	local06, local06, #0
25c38     BF 28 06 F5 | 	and	local06, #191
25c3c     14 25 02 F6 | 	mov	local04, local06
25c40     0C 1E 86 F1 | 	sub	local01, #12
25c44     0F 2F 02 FB | 	rdlong	local09, local01
25c48     1C 1E 06 F1 | 	add	local01, #28
25c4c     0F 2F 62 FC | 	wrlong	local09, local01
25c50     2C 1E 86 F1 | 	sub	local01, #44
25c54                 | LR__3883
25c54     14 31 E2 F8 | 	getbyte	local10, local06, #0
25c58     12 2B E2 F8 | 	getbyte	local07, local04, #0
25c5c     15 31 0A F2 | 	cmp	local10, local07 wz
25c60     5C 00 90 5D |  if_ne	jmp	#LR__3884
25c64     11 2D E2 F8 | 	getbyte	local08, local03, #0
25c68     1C 1E 06 F1 | 	add	local01, #28
25c6c     0F 2B 02 FB | 	rdlong	local07, local01
25c70     1C 1E 86 F1 | 	sub	local01, #28
25c74     0D 2A 06 F1 | 	add	local07, #13
25c78     15 29 C2 FA | 	rdbyte	local06, local07
25c7c     14 2B E2 F8 | 	getbyte	local07, local06, #0
25c80     15 2D 0A F2 | 	cmp	local08, local07 wz
25c84     38 00 90 5D |  if_ne	jmp	#LR__3884
25c88     0C 20 06 F1 | 	add	local02, #12
25c8c     10 13 02 FB | 	rdlong	arg01, local02
25c90     0C 20 86 F1 | 	sub	local02, #12
25c94     1C 1E 06 F1 | 	add	local01, #28
25c98     0F 33 02 FB | 	rdlong	local11, local01
25c9c     1C 1E 86 F1 | 	sub	local01, #28
25ca0     19 15 02 F6 | 	mov	arg02, local11
25ca4     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
25ca8     00 FA 4D F2 | 	cmps	result1, #0 wz
25cac     12 33 02 56 |  if_ne	mov	local11, local04
25cb0     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
25cb4     01 32 86 51 |  if_ne	sub	local11, #1
25cb8     19 2F 02 56 |  if_ne	mov	local09, local11
25cbc     04 00 90 5D |  if_ne	jmp	#LR__3885
25cc0                 | LR__3884
25cc0     FF 2E 06 F6 | 	mov	local09, #255
25cc4                 | LR__3885
25cc4     17 25 02 F6 | 	mov	local04, local09
25cc8     78 00 90 FD | 	jmp	#LR__3889
25ccc                 | LR__3886
25ccc     12 2F 02 F6 | 	mov	local09, local04
25cd0     07 2E 4E F7 | 	zerox	local09, #7 wz
25cd4     20 00 90 5D |  if_ne	jmp	#LR__3887
25cd8     11 31 E2 F8 | 	getbyte	local10, local03, #0
25cdc     1C 1E 06 F1 | 	add	local01, #28
25ce0     0F 13 02 FB | 	rdlong	arg01, local01
25ce4     1C 1E 86 F1 | 	sub	local01, #28
25ce8     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
25cec     FD FA E1 F8 | 	getbyte	result1, result1, #0
25cf0     FD 30 0A F2 | 	cmp	local10, result1 wz
25cf4     60 00 90 AD |  if_e	jmp	#LR__3891
25cf8                 | LR__3887
25cf8     2B 1E 06 F1 | 	add	local01, #43
25cfc     0F 2F C2 FA | 	rdbyte	local09, local01
25d00     2B 1E 86 F1 | 	sub	local01, #43
25d04     01 2E CE F7 | 	test	local09, #1 wz
25d08     24 00 90 5D |  if_ne	jmp	#LR__3888
25d0c     1C 1E 06 F1 | 	add	local01, #28
25d10     0F 13 02 FB | 	rdlong	arg01, local01
25d14     04 1E 06 F1 | 	add	local01, #4
25d18     0F 15 02 F6 | 	mov	arg02, local01
25d1c     20 1E 86 F1 | 	sub	local01, #32
25d20     0B 16 06 F6 | 	mov	arg03, #11
25d24     88 DA BF FD | 	call	#_fatfs_cc_memcmp
25d28     00 FA 0D F2 | 	cmp	result1, #0 wz
25d2c     28 00 90 AD |  if_e	jmp	#LR__3891
25d30                 | LR__3888
25d30     FF 24 06 F6 | 	mov	local04, #255
25d34     2C 1E 06 F1 | 	add	local01, #44
25d38     FF FF FF FF 
25d3c     0F FF 6B FC | 	wrlong	##-1, local01
25d40     2C 1E 86 F1 | 	sub	local01, #44
25d44                 | LR__3889
25d44                 | LR__3890
25d44     0F 13 02 F6 | 	mov	arg01, local01
25d48     00 14 06 F6 | 	mov	arg02, #0
25d4c     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
25d50     FD 26 0A F6 | 	mov	local05, result1 wz
25d54     04 FE 9F AD |  if_e	jmp	#LR__3880
25d58                 | LR__3891
25d58                 | ' 
25d58                 | ' 	return res;
25d58     13 FB 01 F6 | 	mov	result1, local05
25d5c                 | LR__3892
25d5c     A7 F0 03 F6 | 	mov	ptra, fp
25d60     B2 00 A0 FD | 	call	#popregs_
25d64                 | _fatfs_cc_dir_find_ret
25d64     2D 00 64 FD | 	ret
25d68                 | 
25d68                 | _fatfs_cc_dir_register
25d68     0A 4A 05 F6 | 	mov	COUNT_, #10
25d6c     A8 00 A0 FD | 	call	#pushregs_
25d70     2C F0 07 F1 | 	add	ptra, #44
25d74     04 4E 05 F1 | 	add	fp, #4
25d78     A7 12 62 FC | 	wrlong	arg01, fp
25d7c     09 1F 02 FB | 	rdlong	local01, arg01
25d80     08 4E 05 F1 | 	add	fp, #8
25d84     A7 1E 62 FC | 	wrlong	local01, fp
25d88     08 4E 85 F1 | 	sub	fp, #8
25d8c     A7 20 02 FB | 	rdlong	local02, fp
25d90     04 4E 85 F1 | 	sub	fp, #4
25d94     2B 20 06 F1 | 	add	local02, #43
25d98     10 21 C2 FA | 	rdbyte	local02, local02
25d9c     A0 20 CE F7 | 	test	local02, #160 wz
25da0     06 FA 05 56 |  if_ne	mov	result1, #6
25da4     F8 03 90 5D |  if_ne	jmp	#LR__3915
25da8                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
25da8     14 4E 05 F1 | 	add	fp, #20
25dac     A7 00 68 FC | 	wrlong	#0, fp
25db0     14 4E 85 F1 | 	sub	fp, #20
25db4     97 28 48 FB | 	callpa	#(@LR__3901-@LR__3900)>>2,fcache_load_ptr_
25db8                 | LR__3900
25db8     0C 4E 05 F1 | 	add	fp, #12
25dbc     A7 20 02 FB | 	rdlong	local02, fp
25dc0     0C 20 06 F1 | 	add	local02, #12
25dc4     10 23 02 FB | 	rdlong	local03, local02
25dc8     08 4E 05 F1 | 	add	fp, #8
25dcc     A7 24 02 FB | 	rdlong	local04, fp
25dd0     14 4E 85 F1 | 	sub	fp, #20
25dd4     01 24 66 F0 | 	shl	local04, #1
25dd8     11 25 02 F1 | 	add	local04, local03
25ddc     12 21 EA FA | 	rdword	local02, local04 wz
25de0     24 00 90 AD |  if_e	jmp	#LR__3902
25de4     14 4E 05 F1 | 	add	fp, #20
25de8     A7 26 02 FB | 	rdlong	local05, fp
25dec     13 29 02 F6 | 	mov	local06, local05
25df0     13 2B 02 F6 | 	mov	local07, local05
25df4     15 2D 02 F6 | 	mov	local08, local07
25df8     01 2C 06 F1 | 	add	local08, #1
25dfc     A7 2C 62 FC | 	wrlong	local08, fp
25e00     14 4E 85 F1 | 	sub	fp, #20
25e04     B0 FF 9F FD | 	jmp	#LR__3900
25e08                 | LR__3901
25e08                 | LR__3902
25e08     1C 4E 05 F1 | 	add	fp, #28
25e0c     A7 12 02 F6 | 	mov	arg01, fp
25e10     18 4E 85 F1 | 	sub	fp, #24
25e14     A7 14 02 FB | 	rdlong	arg02, fp
25e18     04 4E 85 F1 | 	sub	fp, #4
25e1c     20 14 06 F1 | 	add	arg02, #32
25e20     0C 16 06 F6 | 	mov	arg03, #12
25e24     7C 71 BF FD | 	call	#__system____builtin_memmove
25e28     27 4E 05 F1 | 	add	fp, #39
25e2c     A7 2E C2 FA | 	rdbyte	local09, fp
25e30     27 4E 85 F1 | 	sub	fp, #39
25e34     01 2E CE F7 | 	test	local09, #1 wz
25e38     F4 00 90 AD |  if_e	jmp	#LR__3905
25e3c     04 4E 05 F1 | 	add	fp, #4
25e40     A7 30 02 FB | 	rdlong	local10, fp
25e44     2B 30 06 F1 | 	add	local10, #43
25e48     18 81 48 FC | 	wrbyte	#64, local10
25e4c                 | ' 		dp->fn[ 11 ] =  0x40 ;
25e4c                 | ' 		for (n = 1; n < 100; n++) {
25e4c     0C 4E 05 F1 | 	add	fp, #12
25e50     A7 02 68 FC | 	wrlong	#1, fp
25e54     10 4E 85 F1 | 	sub	fp, #16
25e58                 | LR__3903
25e58     10 4E 05 F1 | 	add	fp, #16
25e5c     A7 20 02 FB | 	rdlong	local02, fp
25e60     10 4E 85 F1 | 	sub	fp, #16
25e64     64 20 16 F2 | 	cmp	local02, #100 wc
25e68     70 00 90 3D |  if_ae	jmp	#LR__3904
25e6c     04 4E 05 F1 | 	add	fp, #4
25e70     A7 12 02 FB | 	rdlong	arg01, fp
25e74     20 12 06 F1 | 	add	arg01, #32
25e78     18 4E 05 F1 | 	add	fp, #24
25e7c     A7 14 02 F6 | 	mov	arg02, fp
25e80     10 4E 85 F1 | 	sub	fp, #16
25e84     A7 30 02 FB | 	rdlong	local10, fp
25e88     0C 30 06 F1 | 	add	local10, #12
25e8c     18 17 02 FB | 	rdlong	arg03, local10
25e90     04 4E 05 F1 | 	add	fp, #4
25e94     A7 18 02 FB | 	rdlong	arg04, fp
25e98     10 4E 85 F1 | 	sub	fp, #16
25e9c     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
25ea0     04 4E 05 F1 | 	add	fp, #4
25ea4     A7 12 02 FB | 	rdlong	arg01, fp
25ea8     04 4E 85 F1 | 	sub	fp, #4
25eac     70 FC BF FD | 	call	#_fatfs_cc_dir_find
25eb0     08 4E 05 F1 | 	add	fp, #8
25eb4     A7 FA 61 FC | 	wrlong	result1, fp
25eb8     00 FA 4D F2 | 	cmps	result1, #0 wz
25ebc     08 4E 85 F1 | 	sub	fp, #8
25ec0     18 00 90 5D |  if_ne	jmp	#LR__3904
25ec4     10 4E 05 F1 | 	add	fp, #16
25ec8     A7 30 02 FB | 	rdlong	local10, fp
25ecc     01 30 06 F1 | 	add	local10, #1
25ed0     A7 30 62 FC | 	wrlong	local10, fp
25ed4     10 4E 85 F1 | 	sub	fp, #16
25ed8     7C FF 9F FD | 	jmp	#LR__3903
25edc                 | LR__3904
25edc     10 4E 05 F1 | 	add	fp, #16
25ee0     A7 30 02 FB | 	rdlong	local10, fp
25ee4     10 4E 85 F1 | 	sub	fp, #16
25ee8     64 30 0E F2 | 	cmp	local10, #100 wz
25eec     07 FA 05 A6 |  if_e	mov	result1, #7
25ef0     AC 02 90 AD |  if_e	jmp	#LR__3915
25ef4     08 4E 05 F1 | 	add	fp, #8
25ef8     A7 30 02 FB | 	rdlong	local10, fp
25efc     08 4E 85 F1 | 	sub	fp, #8
25f00     04 30 0E F2 | 	cmp	local10, #4 wz
25f04     08 4E 05 51 |  if_ne	add	fp, #8
25f08     A7 FA 01 5B |  if_ne	rdlong	result1, fp
25f0c     08 4E 85 51 |  if_ne	sub	fp, #8
25f10     8C 02 90 5D |  if_ne	jmp	#LR__3915
25f14     04 4E 05 F1 | 	add	fp, #4
25f18     A7 30 02 FB | 	rdlong	local10, fp
25f1c     23 4E 05 F1 | 	add	fp, #35
25f20     A7 1E C2 FA | 	rdbyte	local01, fp
25f24     27 4E 85 F1 | 	sub	fp, #39
25f28     2B 30 06 F1 | 	add	local10, #43
25f2c     18 1F 42 FC | 	wrbyte	local01, local10
25f30                 | LR__3905
25f30     27 4E 05 F1 | 	add	fp, #39
25f34     A7 20 C2 FA | 	rdbyte	local02, fp
25f38     27 4E 85 F1 | 	sub	fp, #39
25f3c     02 20 CE F7 | 	test	local02, #2 wz
25f40     20 00 90 AD |  if_e	jmp	#LR__3906
25f44     14 4E 05 F1 | 	add	fp, #20
25f48     A7 30 02 FB | 	rdlong	local10, fp
25f4c     0C 30 06 F1 | 	add	local10, #12
25f50     0D 30 16 FD | 	qdiv	local10, #13
25f54     14 4E 85 F1 | 	sub	fp, #20
25f58     18 30 62 FD | 	getqx	local10
25f5c     01 30 06 F1 | 	add	local10, #1
25f60     04 00 90 FD | 	jmp	#LR__3907
25f64                 | LR__3906
25f64     01 30 06 F6 | 	mov	local10, #1
25f68                 | LR__3907
25f68     18 4E 05 F1 | 	add	fp, #24
25f6c     A7 30 62 FC | 	wrlong	local10, fp
25f70     14 4E 85 F1 | 	sub	fp, #20
25f74     A7 12 02 FB | 	rdlong	arg01, fp
25f78     18 15 02 F6 | 	mov	arg02, local10
25f7c     04 4E 85 F1 | 	sub	fp, #4
25f80     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
25f84     08 4E 05 F1 | 	add	fp, #8
25f88     A7 FA 61 FC | 	wrlong	result1, fp
25f8c     08 4E 85 F1 | 	sub	fp, #8
25f90     00 FA 0D F2 | 	cmp	result1, #0 wz
25f94     38 01 90 5D |  if_ne	jmp	#LR__3912
25f98     18 4E 05 F1 | 	add	fp, #24
25f9c     A7 30 02 FB | 	rdlong	local10, fp
25fa0     01 30 8E F1 | 	sub	local10, #1 wz
25fa4     A7 30 62 FC | 	wrlong	local10, fp
25fa8     18 4E 85 F1 | 	sub	fp, #24
25fac     20 01 90 AD |  if_e	jmp	#LR__3912
25fb0     04 4E 05 F1 | 	add	fp, #4
25fb4     A7 30 02 FB | 	rdlong	local10, fp
25fb8     18 13 02 F6 | 	mov	arg01, local10
25fbc     14 4E 05 F1 | 	add	fp, #20
25fc0     A7 18 02 FB | 	rdlong	arg04, fp
25fc4     18 4E 85 F1 | 	sub	fp, #24
25fc8     05 18 66 F0 | 	shl	arg04, #5
25fcc     10 30 06 F1 | 	add	local10, #16
25fd0     18 15 02 FB | 	rdlong	arg02, local10
25fd4     0C 15 82 F1 | 	sub	arg02, arg04
25fd8     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
25fdc     08 4E 05 F1 | 	add	fp, #8
25fe0     A7 FA 61 FC | 	wrlong	result1, fp
25fe4     08 4E 85 F1 | 	sub	fp, #8
25fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
25fec     E0 00 90 5D |  if_ne	jmp	#LR__3911
25ff0     04 4E 05 F1 | 	add	fp, #4
25ff4     A7 12 02 FB | 	rdlong	arg01, fp
25ff8     04 4E 85 F1 | 	sub	fp, #4
25ffc     20 12 06 F1 | 	add	arg01, #32
26000     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
26004     FD 30 02 F6 | 	mov	local10, result1
26008     28 4E 05 F1 | 	add	fp, #40
2600c     A7 30 42 FC | 	wrbyte	local10, fp
26010     28 4E 85 F1 | 	sub	fp, #40
26014                 | ' 			sum = sum_sfn(dp->fn);
26014                 | ' 			do {
26014                 | LR__3908
26014     0C 4E 05 F1 | 	add	fp, #12
26018     A7 12 02 FB | 	rdlong	arg01, fp
2601c     08 4E 85 F1 | 	sub	fp, #8
26020     A7 1E 02 FB | 	rdlong	local01, fp
26024     04 4E 85 F1 | 	sub	fp, #4
26028     18 1E 06 F1 | 	add	local01, #24
2602c     0F 15 02 FB | 	rdlong	arg02, local01
26030     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
26034     08 4E 05 F1 | 	add	fp, #8
26038     A7 FA 61 FC | 	wrlong	result1, fp
2603c     00 FA 4D F2 | 	cmps	result1, #0 wz
26040     08 4E 85 F1 | 	sub	fp, #8
26044     88 00 90 5D |  if_ne	jmp	#LR__3910
26048     0C 4E 05 F1 | 	add	fp, #12
2604c     A7 20 02 FB | 	rdlong	local02, fp
26050     0C 20 06 F1 | 	add	local02, #12
26054     10 13 02 FB | 	rdlong	arg01, local02
26058     08 4E 85 F1 | 	sub	fp, #8
2605c     A7 1E 02 FB | 	rdlong	local01, fp
26060     1C 1E 06 F1 | 	add	local01, #28
26064     0F 15 02 FB | 	rdlong	arg02, local01
26068     14 4E 05 F1 | 	add	fp, #20
2606c     A7 16 02 FB | 	rdlong	arg03, fp
26070     10 4E 05 F1 | 	add	fp, #16
26074     A7 18 C2 FA | 	rdbyte	arg04, fp
26078     28 4E 85 F1 | 	sub	fp, #40
2607c     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
26080     0C 4E 05 F1 | 	add	fp, #12
26084     A7 30 02 FB | 	rdlong	local10, fp
26088     03 30 06 F1 | 	add	local10, #3
2608c     18 03 48 FC | 	wrbyte	#1, local10
26090     08 4E 85 F1 | 	sub	fp, #8
26094     A7 12 02 FB | 	rdlong	arg01, fp
26098     04 4E 85 F1 | 	sub	fp, #4
2609c     00 14 06 F6 | 	mov	arg02, #0
260a0     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
260a4     08 4E 05 F1 | 	add	fp, #8
260a8     A7 FA 61 FC | 	wrlong	result1, fp
260ac     00 FA 4D F2 | 	cmps	result1, #0 wz
260b0     08 4E 85 F1 | 	sub	fp, #8
260b4     18 00 90 5D |  if_ne	jmp	#LR__3909
260b8     18 4E 05 F1 | 	add	fp, #24
260bc     A7 30 02 FB | 	rdlong	local10, fp
260c0     01 30 8E F1 | 	sub	local10, #1 wz
260c4     A7 30 62 FC | 	wrlong	local10, fp
260c8     18 4E 85 F1 | 	sub	fp, #24
260cc     44 FF 9F 5D |  if_ne	jmp	#LR__3908
260d0                 | LR__3909
260d0                 | LR__3910
260d0                 | LR__3911
260d0                 | LR__3912
260d0     08 4E 05 F1 | 	add	fp, #8
260d4     A7 30 0A FB | 	rdlong	local10, fp wz
260d8     08 4E 85 F1 | 	sub	fp, #8
260dc     B4 00 90 5D |  if_ne	jmp	#LR__3914
260e0     0C 4E 05 F1 | 	add	fp, #12
260e4     A7 12 02 FB | 	rdlong	arg01, fp
260e8     08 4E 85 F1 | 	sub	fp, #8
260ec     A7 1E 02 FB | 	rdlong	local01, fp
260f0     04 4E 85 F1 | 	sub	fp, #4
260f4     18 1E 06 F1 | 	add	local01, #24
260f8     0F 15 02 FB | 	rdlong	arg02, local01
260fc     18 E6 BF FD | 	call	#_fatfs_cc_move_window
26100     08 4E 05 F1 | 	add	fp, #8
26104     A7 FA 61 FC | 	wrlong	result1, fp
26108     08 4E 85 F1 | 	sub	fp, #8
2610c     00 FA 0D F2 | 	cmp	result1, #0 wz
26110     80 00 90 5D |  if_ne	jmp	#LR__3913
26114     04 4E 05 F1 | 	add	fp, #4
26118     A7 20 02 FB | 	rdlong	local02, fp
2611c     04 4E 85 F1 | 	sub	fp, #4
26120     1C 20 06 F1 | 	add	local02, #28
26124     10 13 02 FB | 	rdlong	arg01, local02
26128     00 14 06 F6 | 	mov	arg02, #0
2612c     20 16 06 F6 | 	mov	arg03, #32
26130     98 00 A0 FD | 	call	#\builtin_bytefill_
26134     04 4E 05 F1 | 	add	fp, #4
26138     A7 14 02 FB | 	rdlong	arg02, fp
2613c     0A 1F 02 F6 | 	mov	local01, arg02
26140     1C 1E 06 F1 | 	add	local01, #28
26144     0F 13 02 FB | 	rdlong	arg01, local01
26148     04 4E 85 F1 | 	sub	fp, #4
2614c     20 14 06 F1 | 	add	arg02, #32
26150     0B 16 06 F6 | 	mov	arg03, #11
26154     4C 6E BF FD | 	call	#__system____builtin_memmove
26158     04 4E 05 F1 | 	add	fp, #4
2615c     A7 2E 02 FB | 	rdlong	local09, fp
26160     17 31 02 F6 | 	mov	local10, local09
26164     1C 30 06 F1 | 	add	local10, #28
26168     18 1F 02 FB | 	rdlong	local01, local10
2616c     2B 2E 06 F1 | 	add	local09, #43
26170     17 31 C2 FA | 	rdbyte	local10, local09
26174     18 30 06 F5 | 	and	local10, #24
26178     0C 1E 06 F1 | 	add	local01, #12
2617c     0F 31 42 FC | 	wrbyte	local10, local01
26180     08 4E 05 F1 | 	add	fp, #8
26184     A7 30 02 FB | 	rdlong	local10, fp
26188     0C 4E 85 F1 | 	sub	fp, #12
2618c     03 30 06 F1 | 	add	local10, #3
26190     18 03 48 FC | 	wrbyte	#1, local10
26194                 | LR__3913
26194                 | LR__3914
26194                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
26194                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
26194                 | ' 
26194                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
26194                 | ' 
26194                 | ' 			fs->wflag = 1;
26194                 | ' 		}
26194                 | ' 	}
26194                 | ' 
26194                 | ' 	return res;
26194     08 4E 05 F1 | 	add	fp, #8
26198     A7 FA 01 FB | 	rdlong	result1, fp
2619c     08 4E 85 F1 | 	sub	fp, #8
261a0                 | LR__3915
261a0     A7 F0 03 F6 | 	mov	ptra, fp
261a4     B2 00 A0 FD | 	call	#popregs_
261a8                 | _fatfs_cc_dir_register_ret
261a8     2D 00 64 FD | 	ret
261ac                 | 
261ac                 | _fatfs_cc_dir_remove
261ac     05 4A 05 F6 | 	mov	COUNT_, #5
261b0     A8 00 A0 FD | 	call	#pushregs_
261b4     09 1F 02 F6 | 	mov	local01, arg01
261b8     0F 21 02 FB | 	rdlong	local02, local01
261bc     10 1E 06 F1 | 	add	local01, #16
261c0     0F 23 02 FB | 	rdlong	local03, local01
261c4     1C 1E 06 F1 | 	add	local01, #28
261c8     0F 15 02 FB | 	rdlong	arg02, local01
261cc     2C 1E 86 F1 | 	sub	local01, #44
261d0     FF FF 7F FF 
261d4     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
261d8     00 24 06 A6 |  if_e	mov	local04, #0
261dc     18 00 90 AD |  if_e	jmp	#LR__3920
261e0     0F 13 02 F6 | 	mov	arg01, local01
261e4     2C 1E 06 F1 | 	add	local01, #44
261e8     0F 15 02 FB | 	rdlong	arg02, local01
261ec     2C 1E 86 F1 | 	sub	local01, #44
261f0     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
261f4     FD 24 02 F6 | 	mov	local04, result1
261f8                 | LR__3920
261f8     12 27 0A F6 | 	mov	local05, local04 wz
261fc     64 00 90 5D |  if_ne	jmp	#LR__3923
26200                 | ' 		do {
26200                 | LR__3921
26200     18 1E 06 F1 | 	add	local01, #24
26204     0F 15 02 FB | 	rdlong	arg02, local01
26208     18 1E 86 F1 | 	sub	local01, #24
2620c     10 13 02 F6 | 	mov	arg01, local02
26210     04 E5 BF FD | 	call	#_fatfs_cc_move_window
26214     FD 26 0A F6 | 	mov	local05, result1 wz
26218     40 00 90 5D |  if_ne	jmp	#LR__3922
2621c     1C 1E 06 F1 | 	add	local01, #28
26220     0F 25 02 FB | 	rdlong	local04, local01
26224     12 CB 49 FC | 	wrbyte	#229, local04
26228     03 20 06 F1 | 	add	local02, #3
2622c     10 03 48 FC | 	wrbyte	#1, local02
26230     03 20 86 F1 | 	sub	local02, #3
26234     0C 1E 86 F1 | 	sub	local01, #12
26238     0F 25 02 FB | 	rdlong	local04, local01
2623c     10 1E 86 F1 | 	sub	local01, #16
26240     11 25 12 F2 | 	cmp	local04, local03 wc
26244     14 00 90 3D |  if_ae	jmp	#LR__3922
26248     0F 13 02 F6 | 	mov	arg01, local01
2624c     00 14 06 F6 | 	mov	arg02, #0
26250     90 EF BF FD | 	call	#_fatfs_cc_dir_next
26254     FD 26 0A F6 | 	mov	local05, result1 wz
26258     A4 FF 9F AD |  if_e	jmp	#LR__3921
2625c                 | LR__3922
2625c     04 26 0E F2 | 	cmp	local05, #4 wz
26260     02 26 06 A6 |  if_e	mov	local05, #2
26264                 | LR__3923
26264                 | ' 	}
26264                 | ' #line 2590 "ff.c"
26264                 | ' 	return res;
26264     13 FB 01 F6 | 	mov	result1, local05
26268     A7 F0 03 F6 | 	mov	ptra, fp
2626c     B2 00 A0 FD | 	call	#popregs_
26270                 | _fatfs_cc_dir_remove_ret
26270     2D 00 64 FD | 	ret
26274                 | 
26274                 | _fatfs_cc_get_fileinfo
26274     0F 4A 05 F6 | 	mov	COUNT_, #15
26278     A8 00 A0 FD | 	call	#pushregs_
2627c     09 1F 02 F6 | 	mov	local01, arg01
26280     0A 21 02 F6 | 	mov	local02, arg02
26284     0F 23 02 FB | 	rdlong	local03, local01
26288     1C 20 06 F1 | 	add	local02, #28
2628c     10 01 48 FC | 	wrbyte	#0, local02
26290     1C 20 86 F1 | 	sub	local02, #28
26294     18 1E 06 F1 | 	add	local01, #24
26298     0F 25 0A FB | 	rdlong	local04, local01 wz
2629c     18 1E 86 F1 | 	sub	local01, #24
262a0     90 03 90 AD |  if_e	jmp	#LR__3944
262a4     2C 1E 06 F1 | 	add	local01, #44
262a8     0F 25 02 FB | 	rdlong	local04, local01
262ac     2C 1E 86 F1 | 	sub	local01, #44
262b0     FF FF 7F FF 
262b4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
262b8     D8 00 90 AD |  if_e	jmp	#LR__3933
262bc     00 26 06 F6 | 	mov	local05, #0
262c0     00 28 06 F6 | 	mov	local06, #0
262c4     00 2A 06 F6 | 	mov	local07, #0
262c8                 | ' 			si = di = 0;
262c8                 | ' 			hs = 0;
262c8                 | ' 			while (fs->lfnbuf[si] != 0) {
262c8                 | LR__3930
262c8     0C 22 06 F1 | 	add	local03, #12
262cc     11 25 02 FB | 	rdlong	local04, local03
262d0     0C 22 86 F1 | 	sub	local03, #12
262d4     14 2D 02 F6 | 	mov	local08, local06
262d8     01 2C 66 F0 | 	shl	local08, #1
262dc     12 2D 02 F1 | 	add	local08, local04
262e0     16 25 EA FA | 	rdword	local04, local08 wz
262e4     90 00 90 AD |  if_e	jmp	#LR__3932
262e8     0C 22 06 F1 | 	add	local03, #12
262ec     11 2F 02 FB | 	rdlong	local09, local03
262f0     0C 22 86 F1 | 	sub	local03, #12
262f4     14 31 02 F6 | 	mov	local10, local06
262f8     01 30 66 F0 | 	shl	local10, #1
262fc     17 31 02 F1 | 	add	local10, local09
26300     18 33 E2 FA | 	rdword	local11, local10
26304     15 25 02 F6 | 	mov	local04, local07
26308     0F 24 4E F7 | 	zerox	local04, #15 wz
2630c     01 28 06 F1 | 	add	local06, #1
26310     24 00 90 5D |  if_ne	jmp	#LR__3931
26314     19 35 32 F9 | 	getword	local12, local11, #0
26318     6C 00 00 FF 
2631c     00 34 16 F2 | 	cmp	local12, ##55296 wc
26320     14 00 90 CD |  if_b	jmp	#LR__3931
26324     19 37 32 F9 | 	getword	local13, local11, #0
26328     70 00 00 FF 
2632c     00 36 16 F2 | 	cmp	local13, ##57344 wc
26330     19 2B 02 C6 |  if_b	mov	local07, local11
26334                 | ' 					hs = wc; continue;
26334     90 FF 9F CD |  if_b	jmp	#LR__3930
26338                 | LR__3931
26338     15 13 32 F9 | 	getword	arg01, local07, #0
2633c     10 12 66 F0 | 	shl	arg01, #16
26340     19 33 32 F9 | 	getword	local11, local11, #0
26344     19 13 42 F5 | 	or	arg01, local11
26348     13 15 02 F6 | 	mov	arg02, local05
2634c     1C 20 06 F1 | 	add	local02, #28
26350     10 15 02 F1 | 	add	arg02, local02
26354     FF 16 06 F6 | 	mov	arg03, #255
26358     13 17 82 F1 | 	sub	arg03, local05
2635c     1C 20 86 F1 | 	sub	local02, #28
26360     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
26364     FD 38 0A F6 | 	mov	local14, result1 wz
26368     00 26 06 A6 |  if_e	mov	local05, #0
2636c     1C 27 02 51 |  if_ne	add	local05, local14
26370     00 2A 06 56 |  if_ne	mov	local07, #0
26374     50 FF 9F 5D |  if_ne	jmp	#LR__3930
26378                 | LR__3932
26378     15 25 02 F6 | 	mov	local04, local07
2637c     0F 24 4E F7 | 	zerox	local04, #15 wz
26380     00 26 06 56 |  if_ne	mov	local05, #0
26384     1C 20 06 F1 | 	add	local02, #28
26388     10 27 02 F1 | 	add	local05, local02
2638c     13 01 48 FC | 	wrbyte	#0, local05
26390     1C 20 86 F1 | 	sub	local02, #28
26394                 | LR__3933
26394     00 26 06 F6 | 	mov	local05, #0
26398     00 28 06 F6 | 	mov	local06, #0
2639c                 | ' 			fno->fname[di] = 0;
2639c                 | ' 		}
2639c                 | ' 	}
2639c                 | ' 
2639c                 | ' 	si = di = 0;
2639c                 | ' 	while (si < 11) {
2639c                 | LR__3934
2639c     0B 28 16 F2 | 	cmp	local06, #11 wc
263a0     20 01 90 3D |  if_ae	jmp	#LR__3937
263a4     1C 1E 06 F1 | 	add	local01, #28
263a8     0F 2F 02 FB | 	rdlong	local09, local01
263ac     1C 1E 86 F1 | 	sub	local01, #28
263b0     14 31 02 F6 | 	mov	local10, local06
263b4     17 31 02 F1 | 	add	local10, local09
263b8     18 33 C2 FA | 	rdbyte	local11, local10
263bc     19 25 32 F9 | 	getword	local04, local11, #0
263c0     20 24 0E F2 | 	cmp	local04, #32 wz
263c4     01 28 06 F1 | 	add	local06, #1
263c8     D0 FF 9F AD |  if_e	jmp	#LR__3934
263cc     19 25 32 F9 | 	getword	local04, local11, #0
263d0     05 24 0E F2 | 	cmp	local04, #5 wz
263d4     E5 32 06 A6 |  if_e	mov	local11, #229
263d8     09 28 0E F2 | 	cmp	local06, #9 wz
263dc     20 00 90 5D |  if_ne	jmp	#LR__3935
263e0     0C 26 16 F2 | 	cmp	local05, #12 wc
263e4     18 00 90 3D |  if_ae	jmp	#LR__3935
263e8     13 37 02 F6 | 	mov	local13, local05
263ec     0C 20 06 F1 | 	add	local02, #12
263f0     10 37 02 F1 | 	add	local13, local02
263f4     1B 5D 48 FC | 	wrbyte	#46, local13
263f8     01 26 06 F1 | 	add	local05, #1
263fc     0C 20 86 F1 | 	sub	local02, #12
26400                 | LR__3935
26400     19 13 32 F9 | 	getword	arg01, local11, #0
26404     07 12 4E F7 | 	zerox	arg01, #7 wz
26408     00 FA 05 56 |  if_ne	mov	result1, #0
2640c                 | ' 
2640c                 | ' 	return 0;
2640c     00 FA 05 A6 |  if_e	mov	result1, #0
26410     00 FA 0D F2 | 	cmp	result1, #0 wz
26414     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
26418     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
2641c     50 00 90 AD |  if_e	jmp	#LR__3936
26420     1C 1E 06 F1 | 	add	local01, #28
26424     0F 31 02 FB | 	rdlong	local10, local01
26428     1C 1E 86 F1 | 	sub	local01, #28
2642c     14 2D 02 F6 | 	mov	local08, local06
26430     18 2D 02 F1 | 	add	local08, local10
26434     16 13 CA FA | 	rdbyte	arg01, local08 wz
26438     00 FA 05 56 |  if_ne	mov	result1, #0
2643c                 | ' 
2643c                 | ' 	return 0;
2643c     00 FA 05 A6 |  if_e	mov	result1, #0
26440     00 FA 0D F2 | 	cmp	result1, #0 wz
26444     28 00 90 AD |  if_e	jmp	#LR__3936
26448     19 33 32 F9 | 	getword	local11, local11, #0
2644c     08 32 66 F0 | 	shl	local11, #8
26450     1C 1E 06 F1 | 	add	local01, #28
26454     0F 39 02 FB | 	rdlong	local14, local01
26458     1C 1E 86 F1 | 	sub	local01, #28
2645c     14 2F 02 F6 | 	mov	local09, local06
26460     1C 2F 02 F1 | 	add	local09, local14
26464     17 35 C2 FA | 	rdbyte	local12, local09
26468     1A 33 42 F5 | 	or	local11, local12
2646c     01 28 06 F1 | 	add	local06, #1
26470                 | LR__3936
26470     19 13 02 F6 | 	mov	arg01, local11
26474     01 00 00 FF 
26478     52 15 06 F6 | 	mov	arg02, ##850
2647c     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
26480     FD 32 02 F6 | 	mov	local11, result1
26484     19 25 02 F6 | 	mov	local04, local11
26488     0F 24 4E F7 | 	zerox	local04, #15 wz
2648c     00 26 06 A6 |  if_e	mov	local05, #0
26490     30 00 90 AD |  if_e	jmp	#LR__3937
26494     19 13 32 F9 | 	getword	arg01, local11, #0
26498     13 15 02 F6 | 	mov	arg02, local05
2649c     0C 20 06 F1 | 	add	local02, #12
264a0     10 15 02 F1 | 	add	arg02, local02
264a4     0C 16 06 F6 | 	mov	arg03, #12
264a8     13 17 82 F1 | 	sub	arg03, local05
264ac     0C 20 86 F1 | 	sub	local02, #12
264b0     EC DF BF FD | 	call	#_fatfs_cc_put_utf
264b4     FD 38 0A F6 | 	mov	local14, result1 wz
264b8     00 26 06 A6 |  if_e	mov	local05, #0
264bc     1C 27 02 51 |  if_ne	add	local05, local14
264c0     D8 FE 9F 5D |  if_ne	jmp	#LR__3934
264c4                 | LR__3937
264c4     13 25 02 F6 | 	mov	local04, local05
264c8     0C 20 06 F1 | 	add	local02, #12
264cc     10 25 02 F1 | 	add	local04, local02
264d0     12 01 48 FC | 	wrbyte	#0, local04
264d4     10 20 06 F1 | 	add	local02, #16
264d8     10 25 CA FA | 	rdbyte	local04, local02 wz
264dc     1C 20 86 F1 | 	sub	local02, #28
264e0     F8 00 90 5D |  if_ne	jmp	#LR__3943
264e4     00 26 0E F2 | 	cmp	local05, #0 wz
264e8     1C 00 90 5D |  if_ne	jmp	#LR__3938
264ec     13 37 02 F6 | 	mov	local13, local05
264f0     1C 20 06 F1 | 	add	local02, #28
264f4     10 37 02 F1 | 	add	local13, local02
264f8     1B 7F 48 FC | 	wrbyte	#63, local13
264fc     01 26 06 F1 | 	add	local05, #1
26500     1C 20 86 F1 | 	sub	local02, #28
26504     A4 00 90 FD | 	jmp	#LR__3942
26508                 | LR__3938
26508                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
26508     00 26 06 F6 | 	mov	local05, #0
2650c     00 28 06 F6 | 	mov	local06, #0
26510     08 3A 06 F6 | 	mov	local15, #8
26514                 | LR__3939
26514     14 25 02 F6 | 	mov	local04, local06
26518     0C 20 06 F1 | 	add	local02, #12
2651c     10 25 02 F1 | 	add	local04, local02
26520     12 37 CA FA | 	rdbyte	local13, local04 wz
26524     0C 20 86 F1 | 	sub	local02, #12
26528     80 00 90 AD |  if_e	jmp	#LR__3941
2652c     14 2D 02 F6 | 	mov	local08, local06
26530     0C 20 06 F1 | 	add	local02, #12
26534     10 2D 02 F1 | 	add	local08, local02
26538     16 33 C2 FA | 	rdbyte	local11, local08
2653c     19 39 32 F9 | 	getword	local14, local11, #0
26540     2E 38 0E F2 | 	cmp	local14, #46 wz
26544     0C 20 86 F1 | 	sub	local02, #12
26548     10 3A 06 A6 |  if_e	mov	local15, #16
2654c     19 39 32 F9 | 	getword	local14, local11, #0
26550     41 38 16 F2 | 	cmp	local14, #65 wc
26554     30 00 90 CD |  if_b	jmp	#LR__3940
26558     19 2D 32 F9 | 	getword	local08, local11, #0
2655c     5B 2C 16 F2 | 	cmp	local08, #91 wc
26560     24 00 90 3D |  if_ae	jmp	#LR__3940
26564     1C 1E 06 F1 | 	add	local01, #28
26568     0F 2F 02 FB | 	rdlong	local09, local01
2656c     1C 1E 86 F1 | 	sub	local01, #28
26570     0C 2E 06 F1 | 	add	local09, #12
26574     17 31 C2 FA | 	rdbyte	local10, local09
26578     1D 39 E2 F8 | 	getbyte	local14, local15, #0
2657c     1C 31 CA F7 | 	test	local10, local14 wz
26580     19 33 32 59 |  if_ne	getword	local11, local11, #0
26584     20 32 06 51 |  if_ne	add	local11, #32
26588                 | LR__3940
26588     13 39 02 F6 | 	mov	local14, local05
2658c     1C 20 06 F1 | 	add	local02, #28
26590     10 39 02 F1 | 	add	local14, local02
26594     19 33 32 F9 | 	getword	local11, local11, #0
26598     1C 33 42 FC | 	wrbyte	local11, local14
2659c     01 28 06 F1 | 	add	local06, #1
265a0     01 26 06 F1 | 	add	local05, #1
265a4     1C 20 86 F1 | 	sub	local02, #28
265a8     68 FF 9F FD | 	jmp	#LR__3939
265ac                 | LR__3941
265ac                 | LR__3942
265ac     1C 20 06 F1 | 	add	local02, #28
265b0     10 27 02 F1 | 	add	local05, local02
265b4     13 01 48 FC | 	wrbyte	#0, local05
265b8     1C 1E 06 F1 | 	add	local01, #28
265bc     0F 25 02 FB | 	rdlong	local04, local01
265c0     1C 1E 86 F1 | 	sub	local01, #28
265c4     0C 24 06 F1 | 	add	local04, #12
265c8     12 37 CA FA | 	rdbyte	local13, local04 wz
265cc     1C 20 86 F1 | 	sub	local02, #28
265d0     0C 20 06 A1 |  if_e	add	local02, #12
265d4     10 01 48 AC |  if_e	wrbyte	#0, local02
265d8     0C 20 86 A1 |  if_e	sub	local02, #12
265dc                 | LR__3943
265dc     1C 1E 06 F1 | 	add	local01, #28
265e0     0F 35 02 FB | 	rdlong	local12, local01
265e4     0B 34 06 F1 | 	add	local12, #11
265e8     1A 25 C2 FA | 	rdbyte	local04, local12
265ec     3F 24 06 F5 | 	and	local04, #63
265f0     08 20 06 F1 | 	add	local02, #8
265f4     10 25 42 FC | 	wrbyte	local04, local02
265f8     08 20 86 F1 | 	sub	local02, #8
265fc     0F 13 02 FB | 	rdlong	arg01, local01
26600     1C 12 06 F1 | 	add	arg01, #28
26604                 | ' {
26604                 | ' 
26604                 | ' 	return *((DWORD*)ptr);
26604     09 FB 01 FB | 	rdlong	result1, arg01
26608     10 FB 61 FC | 	wrlong	result1, local02
2660c     0F 13 02 FB | 	rdlong	arg01, local01
26610     16 12 06 F1 | 	add	arg01, #22
26614                 | ' {
26614                 | ' 
26614                 | ' 	return *((WORD*)ptr);
26614     09 FB E1 FA | 	rdword	result1, arg01
26618     06 20 06 F1 | 	add	local02, #6
2661c     10 FB 51 FC | 	wrword	result1, local02
26620     0F 13 02 FB | 	rdlong	arg01, local01
26624     18 12 06 F1 | 	add	arg01, #24
26628                 | ' {
26628                 | ' 
26628                 | ' 	return *((WORD*)ptr);
26628     09 FB E1 FA | 	rdword	result1, arg01
2662c     02 20 86 F1 | 	sub	local02, #2
26630     10 FB 51 FC | 	wrword	result1, local02
26634                 | LR__3944
26634     A7 F0 03 F6 | 	mov	ptra, fp
26638     B2 00 A0 FD | 	call	#popregs_
2663c                 | _fatfs_cc_get_fileinfo_ret
2663c     2D 00 64 FD | 	ret
26640                 | 
26640                 | _fatfs_cc_create_name
26640     0D 4A 05 F6 | 	mov	COUNT_, #13
26644     A8 00 A0 FD | 	call	#pushregs_
26648     34 F0 07 F1 | 	add	ptra, #52
2664c     04 4E 05 F1 | 	add	fp, #4
26650     A7 12 62 FC | 	wrlong	arg01, fp
26654     04 4E 05 F1 | 	add	fp, #4
26658     A7 14 62 FC | 	wrlong	arg02, fp
2665c     0A FB 01 FB | 	rdlong	result1, arg02
26660     28 4E 05 F1 | 	add	fp, #40
26664     A7 FA 61 FC | 	wrlong	result1, fp
26668     2C 4E 85 F1 | 	sub	fp, #44
2666c     A7 FA 01 FB | 	rdlong	result1, fp
26670     FD 1E 02 FB | 	rdlong	local01, result1
26674     0C 1E 06 F1 | 	add	local01, #12
26678     0F 21 02 FB | 	rdlong	local02, local01
2667c     14 4E 05 F1 | 	add	fp, #20
26680     A7 20 62 FC | 	wrlong	local02, fp
26684     14 4E 05 F1 | 	add	fp, #20
26688     A7 00 68 FC | 	wrlong	#0, fp
2668c     2C 4E 85 F1 | 	sub	fp, #44
26690                 | ' 
26690                 | ' 
26690                 | ' 
26690                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
26690                 | ' 	for (;;) {
26690                 | LR__3950
26690     30 4E 05 F1 | 	add	fp, #48
26694     A7 12 02 F6 | 	mov	arg01, fp
26698     30 4E 85 F1 | 	sub	fp, #48
2669c     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
266a0     1C 4E 05 F1 | 	add	fp, #28
266a4     A7 FA 61 FC | 	wrlong	result1, fp
266a8     1C 4E 85 F1 | 	sub	fp, #28
266ac     FF FF 7F FF 
266b0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
266b4     06 FA 05 A6 |  if_e	mov	result1, #6
266b8     74 08 90 AD |  if_e	jmp	#LR__3990
266bc     1C 4E 05 F1 | 	add	fp, #28
266c0     A7 1E 02 FB | 	rdlong	local01, fp
266c4     1C 4E 85 F1 | 	sub	fp, #28
266c8     80 00 00 FF 
266cc     00 1E 16 F2 | 	cmp	local01, ##65536 wc
266d0     3C 00 90 CD |  if_b	jmp	#LR__3951
266d4     18 4E 05 F1 | 	add	fp, #24
266d8     A7 22 02 FB | 	rdlong	local03, fp
266dc     14 4E 05 F1 | 	add	fp, #20
266e0     A7 1E 02 FB | 	rdlong	local01, fp
266e4     0F 25 02 F6 | 	mov	local04, local01
266e8     01 24 06 F1 | 	add	local04, #1
266ec     A7 24 62 FC | 	wrlong	local04, fp
266f0     01 1E 66 F0 | 	shl	local01, #1
266f4     11 1F 02 F1 | 	add	local01, local03
266f8     10 4E 85 F1 | 	sub	fp, #16
266fc     A7 26 02 FB | 	rdlong	local05, fp
26700     1C 4E 85 F1 | 	sub	fp, #28
26704     13 29 02 F6 | 	mov	local06, local05
26708     10 28 46 F0 | 	shr	local06, #16
2670c     0F 29 52 FC | 	wrword	local06, local01
26710                 | LR__3951
26710     1C 4E 05 F1 | 	add	fp, #28
26714     A7 1E 02 FB | 	rdlong	local01, fp
26718     08 4E 85 F1 | 	sub	fp, #8
2671c     A7 1E 52 FC | 	wrword	local01, fp
26720     A7 1E E2 FA | 	rdword	local01, fp
26724     14 4E 85 F1 | 	sub	fp, #20
26728     20 1E 16 F2 | 	cmp	local01, #32 wc
2672c     B0 00 90 CD |  if_b	jmp	#LR__3953
26730     14 4E 05 F1 | 	add	fp, #20
26734     A7 1E E2 FA | 	rdword	local01, fp
26738     14 4E 85 F1 | 	sub	fp, #20
2673c     2F 1E 0E F2 | 	cmp	local01, #47 wz
26740     14 4E 05 51 |  if_ne	add	fp, #20
26744     A7 24 E2 5A |  if_ne	rdword	local04, fp
26748     14 4E 85 51 |  if_ne	sub	fp, #20
2674c     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
26750     8C 00 90 AD |  if_e	jmp	#LR__3953
26754     14 4E 05 F1 | 	add	fp, #20
26758     A7 12 E2 FA | 	rdword	arg01, fp
2675c     14 4E 85 F1 | 	sub	fp, #20
26760     80 12 16 F2 | 	cmp	arg01, #128 wc
26764     24 00 90 3D |  if_ae	jmp	#LR__3952
26768     63 01 00 FF 
2676c     A4 12 06 F6 | 	mov	arg01, ##@LR__4612
26770     14 4E 05 F1 | 	add	fp, #20
26774     A7 14 E2 FA | 	rdword	arg02, fp
26778     14 4E 85 F1 | 	sub	fp, #20
2677c     FC D0 BF FD | 	call	#_fatfs_cc_strchr
26780     00 FA 0D F2 | 	cmp	result1, #0 wz
26784     06 FA 05 56 |  if_ne	mov	result1, #6
26788     A4 07 90 5D |  if_ne	jmp	#LR__3990
2678c                 | LR__3952
2678c     2C 4E 05 F1 | 	add	fp, #44
26790     A7 28 02 FB | 	rdlong	local06, fp
26794     2C 4E 85 F1 | 	sub	fp, #44
26798     FF 28 16 F2 | 	cmp	local06, #255 wc
2679c     06 FA 05 36 |  if_ae	mov	result1, #6
267a0     8C 07 90 3D |  if_ae	jmp	#LR__3990
267a4     18 4E 05 F1 | 	add	fp, #24
267a8     A7 22 02 FB | 	rdlong	local03, fp
267ac     14 4E 05 F1 | 	add	fp, #20
267b0     A7 20 02 FB | 	rdlong	local02, fp
267b4     10 25 02 F6 | 	mov	local04, local02
267b8     01 24 06 F1 | 	add	local04, #1
267bc     A7 24 62 FC | 	wrlong	local04, fp
267c0     10 1F 02 F6 | 	mov	local01, local02
267c4     01 1E 66 F0 | 	shl	local01, #1
267c8     11 1F 02 F1 | 	add	local01, local03
267cc     18 4E 85 F1 | 	sub	fp, #24
267d0     A7 28 E2 FA | 	rdword	local06, fp
267d4     14 4E 85 F1 | 	sub	fp, #20
267d8     0F 29 52 FC | 	wrword	local06, local01
267dc     B0 FE 9F FD | 	jmp	#LR__3950
267e0                 | LR__3953
267e0     14 4E 05 F1 | 	add	fp, #20
267e4     A7 2A E2 FA | 	rdword	local07, fp
267e8     14 4E 85 F1 | 	sub	fp, #20
267ec     20 2A 16 F2 | 	cmp	local07, #32 wc
267f0     10 4E 05 C1 |  if_b	add	fp, #16
267f4     A7 08 48 CC |  if_b	wrbyte	#4, fp
267f8     10 4E 85 C1 |  if_b	sub	fp, #16
267fc     74 00 90 CD |  if_b	jmp	#LR__3958
26800     97 24 48 FB | 	callpa	#(@LR__3956-@LR__3954)>>2,fcache_load_ptr_
26804                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
26804                 | LR__3954
26804     30 4E 05 F1 | 	add	fp, #48
26808     A7 24 02 FB | 	rdlong	local04, fp
2680c     30 4E 85 F1 | 	sub	fp, #48
26810     12 2B C2 FA | 	rdbyte	local07, local04
26814     2F 2A 0E F2 | 	cmp	local07, #47 wz
26818     18 00 90 AD |  if_e	jmp	#LR__3955
2681c     30 4E 05 F1 | 	add	fp, #48
26820     A7 24 02 FB | 	rdlong	local04, fp
26824     30 4E 85 F1 | 	sub	fp, #48
26828     12 21 C2 FA | 	rdbyte	local02, local04
2682c     5C 20 0E F2 | 	cmp	local02, #92 wz
26830     18 00 90 5D |  if_ne	jmp	#LR__3957
26834                 | LR__3955
26834     30 4E 05 F1 | 	add	fp, #48
26838     A7 1E 02 FB | 	rdlong	local01, fp
2683c     01 1E 06 F1 | 	add	local01, #1
26840     A7 1E 62 FC | 	wrlong	local01, fp
26844     30 4E 85 F1 | 	sub	fp, #48
26848     B8 FF 9F FD | 	jmp	#LR__3954
2684c                 | LR__3956
2684c                 | LR__3957
2684c     10 4E 05 F1 | 	add	fp, #16
26850     A7 00 48 FC | 	wrbyte	#0, fp
26854     20 4E 05 F1 | 	add	fp, #32
26858     A7 28 02 FB | 	rdlong	local06, fp
2685c     30 4E 85 F1 | 	sub	fp, #48
26860     14 2B C2 FA | 	rdbyte	local07, local06
26864     20 2A 16 F2 | 	cmp	local07, #32 wc
26868     10 4E 05 C1 |  if_b	add	fp, #16
2686c     A7 08 48 CC |  if_b	wrbyte	#4, fp
26870     10 4E 85 C1 |  if_b	sub	fp, #16
26874                 | LR__3958
26874     08 4E 05 F1 | 	add	fp, #8
26878     A7 2A 02 FB | 	rdlong	local07, fp
2687c     28 4E 05 F1 | 	add	fp, #40
26880     A7 1E 02 FB | 	rdlong	local01, fp
26884     30 4E 85 F1 | 	sub	fp, #48
26888     15 1F 62 FC | 	wrlong	local01, local07
2688c     97 38 48 FB | 	callpa	#(@LR__3960-@LR__3959)>>2,fcache_load_ptr_
26890                 | ' 	}
26890                 | ' 	*path = p;
26890                 | ' #line 2862 "ff.c"
26890                 | ' 	while (di) {
26890                 | LR__3959
26890     2C 4E 05 F1 | 	add	fp, #44
26894     A7 2A 0A FB | 	rdlong	local07, fp wz
26898     2C 4E 85 F1 | 	sub	fp, #44
2689c     60 00 90 AD |  if_e	jmp	#LR__3961
268a0     18 4E 05 F1 | 	add	fp, #24
268a4     A7 28 02 FB | 	rdlong	local06, fp
268a8     14 4E 05 F1 | 	add	fp, #20
268ac     A7 24 02 FB | 	rdlong	local04, fp
268b0     01 24 86 F1 | 	sub	local04, #1
268b4     01 24 66 F0 | 	shl	local04, #1
268b8     14 25 02 F1 | 	add	local04, local06
268bc     12 29 E2 FA | 	rdword	local06, local04
268c0     18 4E 85 F1 | 	sub	fp, #24
268c4     A7 28 52 FC | 	wrword	local06, fp
268c8     A7 2A E2 FA | 	rdword	local07, fp
268cc     14 4E 85 F1 | 	sub	fp, #20
268d0     20 2A 0E F2 | 	cmp	local07, #32 wz
268d4     14 4E 05 51 |  if_ne	add	fp, #20
268d8     A7 1E E2 5A |  if_ne	rdword	local01, fp
268dc     14 4E 85 51 |  if_ne	sub	fp, #20
268e0     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
268e4     18 00 90 5D |  if_ne	jmp	#LR__3961
268e8     2C 4E 05 F1 | 	add	fp, #44
268ec     A7 1E 02 FB | 	rdlong	local01, fp
268f0     01 1E 86 F1 | 	sub	local01, #1
268f4     A7 1E 62 FC | 	wrlong	local01, fp
268f8     2C 4E 85 F1 | 	sub	fp, #44
268fc     90 FF 9F FD | 	jmp	#LR__3959
26900                 | LR__3960
26900                 | LR__3961
26900     18 4E 05 F1 | 	add	fp, #24
26904     A7 2C 02 FB | 	rdlong	local08, fp
26908     14 4E 05 F1 | 	add	fp, #20
2690c     A7 24 02 FB | 	rdlong	local04, fp
26910     01 24 66 F0 | 	shl	local04, #1
26914     16 25 02 F1 | 	add	local04, local08
26918     12 01 58 FC | 	wrword	#0, local04
2691c     A7 2A 0A FB | 	rdlong	local07, fp wz
26920     2C 4E 85 F1 | 	sub	fp, #44
26924     06 FA 05 A6 |  if_e	mov	result1, #6
26928     04 06 90 AD |  if_e	jmp	#LR__3990
2692c                 | ' 
2692c                 | ' 
2692c                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2692c     28 4E 05 F1 | 	add	fp, #40
26930     A7 00 68 FC | 	wrlong	#0, fp
26934     28 4E 85 F1 | 	sub	fp, #40
26938     97 22 48 FB | 	callpa	#(@LR__3963-@LR__3962)>>2,fcache_load_ptr_
2693c                 | LR__3962
2693c     18 4E 05 F1 | 	add	fp, #24
26940     A7 2E 02 FB | 	rdlong	local09, fp
26944     10 4E 05 F1 | 	add	fp, #16
26948     A7 30 02 FB | 	rdlong	local10, fp
2694c     28 4E 85 F1 | 	sub	fp, #40
26950     01 30 66 F0 | 	shl	local10, #1
26954     17 31 02 F1 | 	add	local10, local09
26958     18 33 E2 FA | 	rdword	local11, local10
2695c     20 32 0E F2 | 	cmp	local11, #32 wz
26960     1C 00 90 5D |  if_ne	jmp	#LR__3964
26964     28 4E 05 F1 | 	add	fp, #40
26968     A7 34 02 FB | 	rdlong	local12, fp
2696c     1A 27 02 F6 | 	mov	local05, local12
26970     01 26 06 F1 | 	add	local05, #1
26974     A7 26 62 FC | 	wrlong	local05, fp
26978     28 4E 85 F1 | 	sub	fp, #40
2697c     BC FF 9F FD | 	jmp	#LR__3962
26980                 | LR__3963
26980                 | LR__3964
26980     28 4E 05 F1 | 	add	fp, #40
26984     A7 2A 02 FB | 	rdlong	local07, fp
26988     28 4E 85 F1 | 	sub	fp, #40
2698c     01 2A 16 F2 | 	cmp	local07, #1 wc
26990     28 00 90 3D |  if_ae	jmp	#LR__3965
26994     18 4E 05 F1 | 	add	fp, #24
26998     A7 22 02 FB | 	rdlong	local03, fp
2699c     10 4E 05 F1 | 	add	fp, #16
269a0     A7 2E 02 FB | 	rdlong	local09, fp
269a4     28 4E 85 F1 | 	sub	fp, #40
269a8     01 2E 66 F0 | 	shl	local09, #1
269ac     11 2F 02 F1 | 	add	local09, local03
269b0     17 1F E2 FA | 	rdword	local01, local09
269b4     2E 1E 0E F2 | 	cmp	local01, #46 wz
269b8     14 00 90 5D |  if_ne	jmp	#LR__3966
269bc                 | LR__3965
269bc     10 4E 05 F1 | 	add	fp, #16
269c0     A7 2A C2 FA | 	rdbyte	local07, fp
269c4     03 2A 46 F5 | 	or	local07, #3
269c8     A7 2A 42 FC | 	wrbyte	local07, fp
269cc     10 4E 85 F1 | 	sub	fp, #16
269d0                 | LR__3966
269d0     97 2C 48 FB | 	callpa	#(@LR__3968-@LR__3967)>>2,fcache_load_ptr_
269d4                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
269d4                 | LR__3967
269d4     2C 4E 05 F1 | 	add	fp, #44
269d8     A7 2A 02 FB | 	rdlong	local07, fp
269dc     2C 4E 85 F1 | 	sub	fp, #44
269e0     01 2A 16 F2 | 	cmp	local07, #1 wc
269e4     44 00 90 CD |  if_b	jmp	#LR__3969
269e8     18 4E 05 F1 | 	add	fp, #24
269ec     A7 28 02 FB | 	rdlong	local06, fp
269f0     14 4E 05 F1 | 	add	fp, #20
269f4     A7 22 02 FB | 	rdlong	local03, fp
269f8     2C 4E 85 F1 | 	sub	fp, #44
269fc     01 22 86 F1 | 	sub	local03, #1
26a00     01 22 66 F0 | 	shl	local03, #1
26a04     14 23 02 F1 | 	add	local03, local06
26a08     11 1F E2 FA | 	rdword	local01, local03
26a0c     2E 1E 0E F2 | 	cmp	local01, #46 wz
26a10     18 00 90 AD |  if_e	jmp	#LR__3969
26a14     2C 4E 05 F1 | 	add	fp, #44
26a18     A7 1E 02 FB | 	rdlong	local01, fp
26a1c     01 1E 86 F1 | 	sub	local01, #1
26a20     A7 1E 62 FC | 	wrlong	local01, fp
26a24     2C 4E 85 F1 | 	sub	fp, #44
26a28     A8 FF 9F FD | 	jmp	#LR__3967
26a2c                 | LR__3968
26a2c                 | LR__3969
26a2c     04 4E 05 F1 | 	add	fp, #4
26a30     A7 12 02 FB | 	rdlong	arg01, fp
26a34     04 4E 85 F1 | 	sub	fp, #4
26a38     20 12 06 F1 | 	add	arg01, #32
26a3c     20 14 06 F6 | 	mov	arg02, #32
26a40     0B 16 06 F6 | 	mov	arg03, #11
26a44     09 37 02 F6 | 	mov	local13, arg01
26a48     98 00 A0 FD | 	call	#\builtin_bytefill_
26a4c     1B FB 01 F6 | 	mov	result1, local13
26a50     0C 4E 05 F1 | 	add	fp, #12
26a54     A7 00 48 FC | 	wrbyte	#0, fp
26a58     A7 2A C2 FA | 	rdbyte	local07, fp
26a5c     14 4E 05 F1 | 	add	fp, #20
26a60     A7 2A 62 FC | 	wrlong	local07, fp
26a64     04 4E 05 F1 | 	add	fp, #4
26a68     A7 10 68 FC | 	wrlong	#8, fp
26a6c     24 4E 85 F1 | 	sub	fp, #36
26a70                 | ' 
26a70                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
26a70                 | ' 	i = b = 0; ni = 8;
26a70                 | ' 	for (;;) {
26a70                 | LR__3970
26a70     18 4E 05 F1 | 	add	fp, #24
26a74     A7 22 02 FB | 	rdlong	local03, fp
26a78     10 4E 05 F1 | 	add	fp, #16
26a7c     A7 2E 02 FB | 	rdlong	local09, fp
26a80     17 25 02 F6 | 	mov	local04, local09
26a84     01 24 06 F1 | 	add	local04, #1
26a88     A7 24 62 FC | 	wrlong	local04, fp
26a8c     01 2E 66 F0 | 	shl	local09, #1
26a90     11 2F 02 F1 | 	add	local09, local03
26a94     17 29 E2 FA | 	rdword	local06, local09
26a98     14 4E 85 F1 | 	sub	fp, #20
26a9c     A7 28 52 FC | 	wrword	local06, fp
26aa0     A7 2A EA FA | 	rdword	local07, fp wz
26aa4     14 4E 85 F1 | 	sub	fp, #20
26aa8     74 03 90 AD |  if_e	jmp	#LR__3986
26aac     14 4E 05 F1 | 	add	fp, #20
26ab0     A7 2A E2 FA | 	rdword	local07, fp
26ab4     14 4E 85 F1 | 	sub	fp, #20
26ab8     20 2A 0E F2 | 	cmp	local07, #32 wz
26abc     30 00 90 AD |  if_e	jmp	#LR__3971
26ac0     14 4E 05 F1 | 	add	fp, #20
26ac4     A7 1E E2 FA | 	rdword	local01, fp
26ac8     14 4E 85 F1 | 	sub	fp, #20
26acc     2E 1E 0E F2 | 	cmp	local01, #46 wz
26ad0     34 00 90 5D |  if_ne	jmp	#LR__3972
26ad4     28 4E 05 F1 | 	add	fp, #40
26ad8     A7 24 02 FB | 	rdlong	local04, fp
26adc     04 4E 05 F1 | 	add	fp, #4
26ae0     A7 30 02 FB | 	rdlong	local10, fp
26ae4     2C 4E 85 F1 | 	sub	fp, #44
26ae8     18 25 0A F2 | 	cmp	local04, local10 wz
26aec     18 00 90 AD |  if_e	jmp	#LR__3972
26af0                 | LR__3971
26af0     10 4E 05 F1 | 	add	fp, #16
26af4     A7 2A C2 FA | 	rdbyte	local07, fp
26af8     03 2A 46 F5 | 	or	local07, #3
26afc     A7 2A 42 FC | 	wrbyte	local07, fp
26b00     10 4E 85 F1 | 	sub	fp, #16
26b04                 | ' 			cf |=  0x01  |  0x02 ;
26b04                 | ' 			continue;
26b04     68 FF 9F FD | 	jmp	#LR__3970
26b08                 | LR__3972
26b08     20 4E 05 F1 | 	add	fp, #32
26b0c     A7 2A 02 FB | 	rdlong	local07, fp
26b10     04 4E 05 F1 | 	add	fp, #4
26b14     A7 1E 02 FB | 	rdlong	local01, fp
26b18     24 4E 85 F1 | 	sub	fp, #36
26b1c     0F 2B 12 F2 | 	cmp	local07, local01 wc
26b20     1C 00 90 3D |  if_ae	jmp	#LR__3973
26b24     28 4E 05 F1 | 	add	fp, #40
26b28     A7 2C 02 FB | 	rdlong	local08, fp
26b2c     04 4E 05 F1 | 	add	fp, #4
26b30     A7 30 02 FB | 	rdlong	local10, fp
26b34     2C 4E 85 F1 | 	sub	fp, #44
26b38     18 2D 0A F2 | 	cmp	local08, local10 wz
26b3c     B0 00 90 5D |  if_ne	jmp	#LR__3975
26b40                 | LR__3973
26b40     24 4E 05 F1 | 	add	fp, #36
26b44     A7 2A 02 FB | 	rdlong	local07, fp
26b48     24 4E 85 F1 | 	sub	fp, #36
26b4c     0B 2A 0E F2 | 	cmp	local07, #11 wz
26b50     18 00 90 5D |  if_ne	jmp	#LR__3974
26b54     10 4E 05 F1 | 	add	fp, #16
26b58     A7 2A C2 FA | 	rdbyte	local07, fp
26b5c     03 2A 46 F5 | 	or	local07, #3
26b60     A7 2A 42 FC | 	wrbyte	local07, fp
26b64     10 4E 85 F1 | 	sub	fp, #16
26b68                 | ' 				cf |=  0x01  |  0x02 ;
26b68                 | ' 				break;
26b68     B4 02 90 FD | 	jmp	#LR__3986
26b6c                 | LR__3974
26b6c     28 4E 05 F1 | 	add	fp, #40
26b70     A7 2A 02 FB | 	rdlong	local07, fp
26b74     04 4E 05 F1 | 	add	fp, #4
26b78     A7 1E 02 FB | 	rdlong	local01, fp
26b7c     2C 4E 85 F1 | 	sub	fp, #44
26b80     0F 2B 0A F2 | 	cmp	local07, local01 wz
26b84     10 4E 05 51 |  if_ne	add	fp, #16
26b88     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
26b8c     03 2A 46 55 |  if_ne	or	local07, #3
26b90     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
26b94     10 4E 85 51 |  if_ne	sub	fp, #16
26b98     28 4E 05 F1 | 	add	fp, #40
26b9c     A7 2A 02 FB | 	rdlong	local07, fp
26ba0     04 4E 05 F1 | 	add	fp, #4
26ba4     A7 20 02 FB | 	rdlong	local02, fp
26ba8     2C 4E 85 F1 | 	sub	fp, #44
26bac     10 2B 1A F2 | 	cmp	local07, local02 wcz
26bb0     6C 02 90 1D |  if_a	jmp	#LR__3986
26bb4     2C 4E 05 F1 | 	add	fp, #44
26bb8     A7 2A 02 FB | 	rdlong	local07, fp
26bbc     04 4E 85 F1 | 	sub	fp, #4
26bc0     A7 2A 62 FC | 	wrlong	local07, fp
26bc4     08 4E 85 F1 | 	sub	fp, #8
26bc8     A7 10 68 FC | 	wrlong	#8, fp
26bcc     04 4E 05 F1 | 	add	fp, #4
26bd0     A7 16 68 FC | 	wrlong	#11, fp
26bd4     18 4E 85 F1 | 	sub	fp, #24
26bd8     A7 32 C2 FA | 	rdbyte	local11, fp
26bdc     19 2B E2 F8 | 	getbyte	local07, local11, #0
26be0     02 2A 66 F0 | 	shl	local07, #2
26be4     A7 2A 42 FC | 	wrbyte	local07, fp
26be8     0C 4E 85 F1 | 	sub	fp, #12
26bec                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
26bec                 | ' 			continue;
26bec     80 FE 9F FD | 	jmp	#LR__3970
26bf0                 | LR__3975
26bf0     14 4E 05 F1 | 	add	fp, #20
26bf4     A7 2A E2 FA | 	rdword	local07, fp
26bf8     14 4E 85 F1 | 	sub	fp, #20
26bfc     80 2A 16 F2 | 	cmp	local07, #128 wc
26c00     6C 00 90 CD |  if_b	jmp	#LR__3977
26c04     10 4E 05 F1 | 	add	fp, #16
26c08     A7 2A C2 FA | 	rdbyte	local07, fp
26c0c     02 2A 46 F5 | 	or	local07, #2
26c10     A7 2A 42 FC | 	wrbyte	local07, fp
26c14     04 4E 05 F1 | 	add	fp, #4
26c18     A7 12 E2 FA | 	rdword	arg01, fp
26c1c     14 4E 85 F1 | 	sub	fp, #20
26c20     01 00 00 FF 
26c24     52 15 06 F6 | 	mov	arg02, ##850
26c28     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
26c2c     14 4E 05 F1 | 	add	fp, #20
26c30     A7 FA 51 FC | 	wrword	result1, fp
26c34     A7 2A E2 FA | 	rdword	local07, fp
26c38     14 4E 85 F1 | 	sub	fp, #20
26c3c     80 2A CE F7 | 	test	local07, #128 wz
26c40     2C 00 90 AD |  if_e	jmp	#LR__3976
26c44     14 4E 05 F1 | 	add	fp, #20
26c48     A7 20 E2 FA | 	rdword	local02, fp
26c4c     7F 20 06 F5 | 	and	local02, #127
26c50     01 00 00 FF 
26c54     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
26c58     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
26c5c     10 2B C2 FA | 	rdbyte	local07, local02
26c60     A7 2A 52 FC | 	wrword	local07, fp
26c64     14 4E 85 F1 | 	sub	fp, #20
26c68     01 00 00 FF 
26c6c     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
26c70                 | LR__3976
26c70                 | LR__3977
26c70     14 4E 05 F1 | 	add	fp, #20
26c74     A7 2A E2 FA | 	rdword	local07, fp
26c78     14 4E 85 F1 | 	sub	fp, #20
26c7c     00 2B 16 F2 | 	cmp	local07, #256 wc
26c80     88 00 90 CD |  if_b	jmp	#LR__3979
26c84     24 4E 05 F1 | 	add	fp, #36
26c88     A7 2A 02 FB | 	rdlong	local07, fp
26c8c     01 2A 86 F1 | 	sub	local07, #1
26c90     04 4E 85 F1 | 	sub	fp, #4
26c94     A7 20 02 FB | 	rdlong	local02, fp
26c98     20 4E 85 F1 | 	sub	fp, #32
26c9c     15 21 12 F2 | 	cmp	local02, local07 wc
26ca0     2C 00 90 CD |  if_b	jmp	#LR__3978
26ca4     10 4E 05 F1 | 	add	fp, #16
26ca8     A7 32 C2 FA | 	rdbyte	local11, fp
26cac     19 2B E2 F8 | 	getbyte	local07, local11, #0
26cb0     03 2A 46 F5 | 	or	local07, #3
26cb4     A7 2A 42 FC | 	wrbyte	local07, fp
26cb8     14 4E 05 F1 | 	add	fp, #20
26cbc     A7 2A 02 FB | 	rdlong	local07, fp
26cc0     04 4E 85 F1 | 	sub	fp, #4
26cc4     A7 2A 62 FC | 	wrlong	local07, fp
26cc8     20 4E 85 F1 | 	sub	fp, #32
26ccc                 | ' 				cf |=  0x01  |  0x02 ;
26ccc                 | ' 				i = ni; continue;
26ccc     A0 FD 9F FD | 	jmp	#LR__3970
26cd0                 | LR__3978
26cd0     04 4E 05 F1 | 	add	fp, #4
26cd4     A7 2E 02 FB | 	rdlong	local09, fp
26cd8     1C 4E 05 F1 | 	add	fp, #28
26cdc     A7 30 02 FB | 	rdlong	local10, fp
26ce0     18 25 02 F6 | 	mov	local04, local10
26ce4     01 24 06 F1 | 	add	local04, #1
26ce8     A7 24 62 FC | 	wrlong	local04, fp
26cec     20 2E 06 F1 | 	add	local09, #32
26cf0     17 31 02 F1 | 	add	local10, local09
26cf4     0C 4E 85 F1 | 	sub	fp, #12
26cf8     A7 22 E2 FA | 	rdword	local03, fp
26cfc     14 4E 85 F1 | 	sub	fp, #20
26d00     08 22 46 F0 | 	shr	local03, #8
26d04     18 23 42 FC | 	wrbyte	local03, local10
26d08     D4 00 90 FD | 	jmp	#LR__3985
26d0c                 | LR__3979
26d0c     14 4E 05 F1 | 	add	fp, #20
26d10     A7 2A EA FA | 	rdword	local07, fp wz
26d14     14 4E 85 F1 | 	sub	fp, #20
26d18     20 00 90 AD |  if_e	jmp	#LR__3980
26d1c     63 01 00 FF 
26d20     AD 12 06 F6 | 	mov	arg01, ##@LR__4613
26d24     14 4E 05 F1 | 	add	fp, #20
26d28     A7 14 E2 FA | 	rdword	arg02, fp
26d2c     14 4E 85 F1 | 	sub	fp, #20
26d30     48 CB BF FD | 	call	#_fatfs_cc_strchr
26d34     00 FA 0D F2 | 	cmp	result1, #0 wz
26d38     20 00 90 AD |  if_e	jmp	#LR__3981
26d3c                 | LR__3980
26d3c     14 4E 05 F1 | 	add	fp, #20
26d40     A7 BE 58 FC | 	wrword	#95, fp
26d44     04 4E 85 F1 | 	sub	fp, #4
26d48     A7 2A C2 FA | 	rdbyte	local07, fp
26d4c     03 2A 46 F5 | 	or	local07, #3
26d50     A7 2A 42 FC | 	wrbyte	local07, fp
26d54     10 4E 85 F1 | 	sub	fp, #16
26d58     84 00 90 FD | 	jmp	#LR__3984
26d5c                 | LR__3981
26d5c     14 4E 05 F1 | 	add	fp, #20
26d60     A7 2A E2 FA | 	rdword	local07, fp
26d64     14 4E 85 F1 | 	sub	fp, #20
26d68     41 2A 16 F2 | 	cmp	local07, #65 wc
26d6c     24 00 90 CD |  if_b	jmp	#LR__3982
26d70     14 4E 05 F1 | 	add	fp, #20
26d74     A7 1E E2 FA | 	rdword	local01, fp
26d78     14 4E 85 F1 | 	sub	fp, #20
26d7c     5B 1E 16 F2 | 	cmp	local01, #91 wc
26d80     0C 4E 05 C1 |  if_b	add	fp, #12
26d84     A7 2A C2 CA |  if_b	rdbyte	local07, fp
26d88     02 2A 46 C5 |  if_b	or	local07, #2
26d8c     A7 2A 42 CC |  if_b	wrbyte	local07, fp
26d90     0C 4E 85 C1 |  if_b	sub	fp, #12
26d94                 | LR__3982
26d94     14 4E 05 F1 | 	add	fp, #20
26d98     A7 2A E2 FA | 	rdword	local07, fp
26d9c     14 4E 85 F1 | 	sub	fp, #20
26da0     61 2A 16 F2 | 	cmp	local07, #97 wc
26da4     38 00 90 CD |  if_b	jmp	#LR__3983
26da8     14 4E 05 F1 | 	add	fp, #20
26dac     A7 1E E2 FA | 	rdword	local01, fp
26db0     14 4E 85 F1 | 	sub	fp, #20
26db4     7B 1E 16 F2 | 	cmp	local01, #123 wc
26db8     24 00 90 3D |  if_ae	jmp	#LR__3983
26dbc     0C 4E 05 F1 | 	add	fp, #12
26dc0     A7 2A C2 FA | 	rdbyte	local07, fp
26dc4     01 2A 46 F5 | 	or	local07, #1
26dc8     A7 2A 42 FC | 	wrbyte	local07, fp
26dcc     08 4E 05 F1 | 	add	fp, #8
26dd0     A7 2A E2 FA | 	rdword	local07, fp
26dd4     20 2A 86 F1 | 	sub	local07, #32
26dd8     A7 2A 52 FC | 	wrword	local07, fp
26ddc     14 4E 85 F1 | 	sub	fp, #20
26de0                 | LR__3983
26de0                 | LR__3984
26de0                 | LR__3985
26de0     04 4E 05 F1 | 	add	fp, #4
26de4     A7 32 02 FB | 	rdlong	local11, fp
26de8     19 2F 02 F6 | 	mov	local09, local11
26dec     1C 4E 05 F1 | 	add	fp, #28
26df0     A7 20 02 FB | 	rdlong	local02, fp
26df4     10 25 02 F6 | 	mov	local04, local02
26df8     01 24 06 F1 | 	add	local04, #1
26dfc     A7 24 62 FC | 	wrlong	local04, fp
26e00     10 31 02 F6 | 	mov	local10, local02
26e04     20 2E 06 F1 | 	add	local09, #32
26e08     17 31 02 F1 | 	add	local10, local09
26e0c     0C 4E 85 F1 | 	sub	fp, #12
26e10     A7 22 E2 FA | 	rdword	local03, fp
26e14     14 4E 85 F1 | 	sub	fp, #20
26e18     18 23 42 FC | 	wrbyte	local03, local10
26e1c     50 FC 9F FD | 	jmp	#LR__3970
26e20                 | LR__3986
26e20     04 4E 05 F1 | 	add	fp, #4
26e24     A7 32 02 FB | 	rdlong	local11, fp
26e28     04 4E 85 F1 | 	sub	fp, #4
26e2c     20 32 06 F1 | 	add	local11, #32
26e30     19 2B C2 FA | 	rdbyte	local07, local11
26e34     E5 2A 0E F2 | 	cmp	local07, #229 wz
26e38     04 4E 05 A1 |  if_e	add	fp, #4
26e3c     A7 2A 02 AB |  if_e	rdlong	local07, fp
26e40     04 4E 85 A1 |  if_e	sub	fp, #4
26e44     20 2A 06 A1 |  if_e	add	local07, #32
26e48     15 0B 48 AC |  if_e	wrbyte	#5, local07
26e4c     24 4E 05 F1 | 	add	fp, #36
26e50     A7 2A 02 FB | 	rdlong	local07, fp
26e54     24 4E 85 F1 | 	sub	fp, #36
26e58     08 2A 0E F2 | 	cmp	local07, #8 wz
26e5c     0C 4E 05 A1 |  if_e	add	fp, #12
26e60     A7 2A C2 AA |  if_e	rdbyte	local07, fp
26e64     02 2A 66 A0 |  if_e	shl	local07, #2
26e68     A7 2A 42 AC |  if_e	wrbyte	local07, fp
26e6c     0C 4E 85 A1 |  if_e	sub	fp, #12
26e70     0C 4E 05 F1 | 	add	fp, #12
26e74     A7 2A C2 FA | 	rdbyte	local07, fp
26e78     0C 4E 85 F1 | 	sub	fp, #12
26e7c     0C 2A 06 F5 | 	and	local07, #12
26e80     0C 2A 0E F2 | 	cmp	local07, #12 wz
26e84     18 00 90 AD |  if_e	jmp	#LR__3987
26e88     0C 4E 05 F1 | 	add	fp, #12
26e8c     A7 1E C2 FA | 	rdbyte	local01, fp
26e90     0C 4E 85 F1 | 	sub	fp, #12
26e94     03 1E 06 F5 | 	and	local01, #3
26e98     03 1E 0E F2 | 	cmp	local01, #3 wz
26e9c     14 00 90 5D |  if_ne	jmp	#LR__3988
26ea0                 | LR__3987
26ea0     10 4E 05 F1 | 	add	fp, #16
26ea4     A7 2A C2 FA | 	rdbyte	local07, fp
26ea8     02 2A 46 F5 | 	or	local07, #2
26eac     A7 2A 42 FC | 	wrbyte	local07, fp
26eb0     10 4E 85 F1 | 	sub	fp, #16
26eb4                 | LR__3988
26eb4     10 4E 05 F1 | 	add	fp, #16
26eb8     A7 2A C2 FA | 	rdbyte	local07, fp
26ebc     10 4E 85 F1 | 	sub	fp, #16
26ec0     02 2A CE F7 | 	test	local07, #2 wz
26ec4     48 00 90 5D |  if_ne	jmp	#LR__3989
26ec8     0C 4E 05 F1 | 	add	fp, #12
26ecc     A7 2A C2 FA | 	rdbyte	local07, fp
26ed0     0C 4E 85 F1 | 	sub	fp, #12
26ed4     01 2A CE F7 | 	test	local07, #1 wz
26ed8     10 4E 05 51 |  if_ne	add	fp, #16
26edc     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
26ee0     10 2A 46 55 |  if_ne	or	local07, #16
26ee4     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
26ee8     10 4E 85 51 |  if_ne	sub	fp, #16
26eec     0C 4E 05 F1 | 	add	fp, #12
26ef0     A7 2A C2 FA | 	rdbyte	local07, fp
26ef4     0C 4E 85 F1 | 	sub	fp, #12
26ef8     04 2A CE F7 | 	test	local07, #4 wz
26efc     10 4E 05 51 |  if_ne	add	fp, #16
26f00     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
26f04     08 2A 46 55 |  if_ne	or	local07, #8
26f08     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
26f0c     10 4E 85 51 |  if_ne	sub	fp, #16
26f10                 | LR__3989
26f10     04 4E 05 F1 | 	add	fp, #4
26f14     A7 2A 02 FB | 	rdlong	local07, fp
26f18     0C 4E 05 F1 | 	add	fp, #12
26f1c     A7 1E C2 FA | 	rdbyte	local01, fp
26f20     10 4E 85 F1 | 	sub	fp, #16
26f24     2B 2A 06 F1 | 	add	local07, #43
26f28     15 1F 42 FC | 	wrbyte	local01, local07
26f2c                 | ' 	}
26f2c                 | ' 
26f2c                 | ' 	dp->fn[ 11 ] = cf;
26f2c                 | ' 
26f2c                 | ' 	return FR_OK;
26f2c     00 FA 05 F6 | 	mov	result1, #0
26f30                 | LR__3990
26f30     A7 F0 03 F6 | 	mov	ptra, fp
26f34     B2 00 A0 FD | 	call	#popregs_
26f38                 | _fatfs_cc_create_name_ret
26f38     2D 00 64 FD | 	ret
26f3c                 | 
26f3c                 | _fatfs_cc_follow_path
26f3c     02 4A 05 F6 | 	mov	COUNT_, #2
26f40     A8 00 A0 FD | 	call	#pushregs_
26f44     18 F0 07 F1 | 	add	ptra, #24
26f48     04 4E 05 F1 | 	add	fp, #4
26f4c     A7 12 62 FC | 	wrlong	arg01, fp
26f50     04 4E 05 F1 | 	add	fp, #4
26f54     A7 14 62 FC | 	wrlong	arg02, fp
26f58     04 4E 85 F1 | 	sub	fp, #4
26f5c     A7 FA 01 FB | 	rdlong	result1, fp
26f60     FD 1E 02 FB | 	rdlong	local01, result1
26f64     10 4E 05 F1 | 	add	fp, #16
26f68     A7 1E 62 FC | 	wrlong	local01, fp
26f6c     14 4E 85 F1 | 	sub	fp, #20
26f70     97 24 48 FB | 	callpa	#(@LR__4002-@LR__4000)>>2,fcache_load_ptr_
26f74                 | ' )
26f74                 | ' {
26f74                 | ' 	FRESULT res;
26f74                 | ' 	BYTE ns;
26f74                 | ' 	FATFS *fs = dp->obj.fs;
26f74                 | ' #line 3034 "ff.c"
26f74                 | ' 	{
26f74                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
26f74                 | LR__4000
26f74     08 4E 05 F1 | 	add	fp, #8
26f78     A7 1E 02 FB | 	rdlong	local01, fp
26f7c     08 4E 85 F1 | 	sub	fp, #8
26f80     0F 1F C2 FA | 	rdbyte	local01, local01
26f84     2F 1E 0E F2 | 	cmp	local01, #47 wz
26f88     18 00 90 AD |  if_e	jmp	#LR__4001
26f8c     08 4E 05 F1 | 	add	fp, #8
26f90     A7 1E 02 FB | 	rdlong	local01, fp
26f94     08 4E 85 F1 | 	sub	fp, #8
26f98     0F 1F C2 FA | 	rdbyte	local01, local01
26f9c     5C 1E 0E F2 | 	cmp	local01, #92 wz
26fa0     18 00 90 5D |  if_ne	jmp	#LR__4003
26fa4                 | LR__4001
26fa4     08 4E 05 F1 | 	add	fp, #8
26fa8     A7 1E 02 FB | 	rdlong	local01, fp
26fac     01 1E 06 F1 | 	add	local01, #1
26fb0     A7 1E 62 FC | 	wrlong	local01, fp
26fb4     08 4E 85 F1 | 	sub	fp, #8
26fb8     B8 FF 9F FD | 	jmp	#LR__4000
26fbc                 | LR__4002
26fbc                 | LR__4003
26fbc     04 4E 05 F1 | 	add	fp, #4
26fc0     A7 1E 02 FB | 	rdlong	local01, fp
26fc4     08 1E 06 F1 | 	add	local01, #8
26fc8     0F 01 68 FC | 	wrlong	#0, local01
26fcc     04 4E 05 F1 | 	add	fp, #4
26fd0     A7 1E 02 FB | 	rdlong	local01, fp
26fd4     08 4E 85 F1 | 	sub	fp, #8
26fd8     0F 1F C2 FA | 	rdbyte	local01, local01
26fdc     20 1E 16 F2 | 	cmp	local01, #32 wc
26fe0     30 00 90 3D |  if_ae	jmp	#LR__4004
26fe4     04 4E 05 F1 | 	add	fp, #4
26fe8     A7 1E 02 FB | 	rdlong	local01, fp
26fec     2B 1E 06 F1 | 	add	local01, #43
26ff0     0F 01 49 FC | 	wrbyte	#128, local01
26ff4     A7 12 02 FB | 	rdlong	arg01, fp
26ff8     04 4E 85 F1 | 	sub	fp, #4
26ffc     00 14 06 F6 | 	mov	arg02, #0
27000     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
27004     0C 4E 05 F1 | 	add	fp, #12
27008     A7 FA 61 FC | 	wrlong	result1, fp
2700c     0C 4E 85 F1 | 	sub	fp, #12
27010     1C 01 90 FD | 	jmp	#LR__4008
27014                 | LR__4004
27014                 | ' 		for (;;) {
27014                 | LR__4005
27014     04 4E 05 F1 | 	add	fp, #4
27018     A7 12 02 FB | 	rdlong	arg01, fp
2701c     04 4E 05 F1 | 	add	fp, #4
27020     A7 14 02 F6 | 	mov	arg02, fp
27024     08 4E 85 F1 | 	sub	fp, #8
27028     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2702c     0C 4E 05 F1 | 	add	fp, #12
27030     A7 FA 61 FC | 	wrlong	result1, fp
27034     00 FA 4D F2 | 	cmps	result1, #0 wz
27038     0C 4E 85 F1 | 	sub	fp, #12
2703c     F0 00 90 5D |  if_ne	jmp	#LR__4007
27040     04 4E 05 F1 | 	add	fp, #4
27044     A7 12 02 FB | 	rdlong	arg01, fp
27048     04 4E 85 F1 | 	sub	fp, #4
2704c     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
27050     0C 4E 05 F1 | 	add	fp, #12
27054     A7 FA 61 FC | 	wrlong	result1, fp
27058     08 4E 85 F1 | 	sub	fp, #8
2705c     A7 1E 02 FB | 	rdlong	local01, fp
27060     2B 1E 06 F1 | 	add	local01, #43
27064     0F 1F C2 FA | 	rdbyte	local01, local01
27068     0C 4E 05 F1 | 	add	fp, #12
2706c     A7 1E 42 FC | 	wrbyte	local01, fp
27070     04 4E 85 F1 | 	sub	fp, #4
27074     A7 1E 0A FB | 	rdlong	local01, fp wz
27078     0C 4E 85 F1 | 	sub	fp, #12
2707c     34 00 90 AD |  if_e	jmp	#LR__4006
27080     0C 4E 05 F1 | 	add	fp, #12
27084     A7 1E 02 FB | 	rdlong	local01, fp
27088     0C 4E 85 F1 | 	sub	fp, #12
2708c     04 1E 0E F2 | 	cmp	local01, #4 wz
27090     9C 00 90 5D |  if_ne	jmp	#LR__4007
27094     10 4E 05 F1 | 	add	fp, #16
27098     A7 1E C2 FA | 	rdbyte	local01, fp
2709c     10 4E 85 F1 | 	sub	fp, #16
270a0     04 1E CE F7 | 	test	local01, #4 wz
270a4     0C 4E 05 A1 |  if_e	add	fp, #12
270a8     A7 0A 68 AC |  if_e	wrlong	#5, fp
270ac     0C 4E 85 A1 |  if_e	sub	fp, #12
270b0                 | ' 					}
270b0                 | ' 				}
270b0                 | ' 				break;
270b0     7C 00 90 FD | 	jmp	#LR__4007
270b4                 | LR__4006
270b4     10 4E 05 F1 | 	add	fp, #16
270b8     A7 1E C2 FA | 	rdbyte	local01, fp
270bc     10 4E 85 F1 | 	sub	fp, #16
270c0     04 1E CE F7 | 	test	local01, #4 wz
270c4     68 00 90 5D |  if_ne	jmp	#LR__4007
270c8     04 4E 05 F1 | 	add	fp, #4
270cc     A7 1E 02 FB | 	rdlong	local01, fp
270d0     04 4E 85 F1 | 	sub	fp, #4
270d4     06 1E 06 F1 | 	add	local01, #6
270d8     0F 1F C2 FA | 	rdbyte	local01, local01
270dc     10 1E CE F7 | 	test	local01, #16 wz
270e0     0C 4E 05 A1 |  if_e	add	fp, #12
270e4     A7 0A 68 AC |  if_e	wrlong	#5, fp
270e8     0C 4E 85 A1 |  if_e	sub	fp, #12
270ec                 | ' 				res = FR_NO_PATH; break;
270ec     40 00 90 AD |  if_e	jmp	#LR__4007
270f0     04 4E 05 F1 | 	add	fp, #4
270f4     A7 20 02 FB | 	rdlong	local02, fp
270f8     10 1F 02 F6 | 	mov	local01, local02
270fc     10 4E 05 F1 | 	add	fp, #16
27100     A7 14 02 FB | 	rdlong	arg02, fp
27104     0A 13 02 F6 | 	mov	arg01, arg02
27108     34 14 06 F1 | 	add	arg02, #52
2710c     14 4E 85 F1 | 	sub	fp, #20
27110     10 20 06 F1 | 	add	local02, #16
27114     10 21 02 FB | 	rdlong	local02, local02
27118     FF 21 06 F5 | 	and	local02, #511
2711c     10 15 02 F1 | 	add	arg02, local02
27120     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
27124     08 1E 06 F1 | 	add	local01, #8
27128     0F FB 61 FC | 	wrlong	result1, local01
2712c     E4 FE 9F FD | 	jmp	#LR__4005
27130                 | LR__4007
27130                 | LR__4008
27130                 | ' 			}
27130                 | ' #line 3090 "ff.c"
27130                 | ' 			{
27130                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
27130                 | ' 			}
27130                 | ' 		}
27130                 | ' 	}
27130                 | ' 
27130                 | ' 	return res;
27130     0C 4E 05 F1 | 	add	fp, #12
27134     A7 FA 01 FB | 	rdlong	result1, fp
27138     0C 4E 85 F1 | 	sub	fp, #12
2713c     A7 F0 03 F6 | 	mov	ptra, fp
27140     B2 00 A0 FD | 	call	#popregs_
27144                 | _fatfs_cc_follow_path_ret
27144     2D 00 64 FD | 	ret
27148                 | 
27148                 | _fatfs_cc_get_ldnumber
27148     01 00 66 F6 | 	neg	_var01, #1
2714c     09 03 0A FB | 	rdlong	_var02, arg01 wz
27150     01 05 02 F6 | 	mov	_var03, _var02
27154     01 FA 65 A6 |  if_e	neg	result1, #1
27158     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2715c     97 10 48 FB | 	callpa	#(@LR__4011-@LR__4010)>>2,fcache_load_ptr_
27160                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
27160                 | LR__4010
27160     02 07 C2 FA | 	rdbyte	_var04, _var03
27164     03 FB E1 F8 | 	getbyte	result1, _var04, #0
27168     20 FA 15 F2 | 	cmp	result1, #32 wc
2716c     01 04 06 F1 | 	add	_var03, #1
27170     03 09 02 36 |  if_ae	mov	_var05, _var04
27174     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
27178     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2717c     E0 FF 9F 1D |  if_a	jmp	#LR__4010
27180                 | LR__4011
27180     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
27184     3A 06 0E F2 | 	cmp	_var04, #58 wz
27188     40 00 90 5D |  if_ne	jmp	#LR__4013
2718c     01 0A 06 F6 | 	mov	_var06, #1
27190     01 09 C2 FA | 	rdbyte	_var05, _var02
27194     30 08 16 F2 | 	cmp	_var05, #48 wc
27198     1C 00 90 CD |  if_b	jmp	#LR__4012
2719c     01 09 C2 FA | 	rdbyte	_var05, _var02
271a0     3A 08 16 F2 | 	cmp	_var05, #58 wc
271a4     01 0D 02 C6 |  if_b	mov	_var07, _var02
271a8     02 0C 06 C1 |  if_b	add	_var07, #2
271ac     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
271b0     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
271b4     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
271b8                 | LR__4012
271b8     01 0A 56 F2 | 	cmps	_var06, #1 wc
271bc     05 01 02 C6 |  if_b	mov	_var01, _var06
271c0     09 05 62 CC |  if_b	wrlong	_var03, arg01
271c4                 | ' 			vol = i;
271c4                 | ' 			*path = tt;
271c4                 | ' 		}
271c4                 | ' 		return vol;
271c4     00 FB 01 F6 | 	mov	result1, _var01
271c8     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
271cc                 | LR__4013
271cc                 | ' 	}
271cc                 | ' #line 3170 "ff.c"
271cc                 | ' 	vol = 0;
271cc                 | ' 
271cc                 | ' 	return vol;
271cc     00 FA 05 F6 | 	mov	result1, #0
271d0                 | _fatfs_cc_get_ldnumber_ret
271d0     2D 00 64 FD | 	ret
271d4                 | 
271d4                 | _fatfs_cc_check_fs
271d4     04 4A 05 F6 | 	mov	COUNT_, #4
271d8     A8 00 A0 FD | 	call	#pushregs_
271dc     09 1F 02 F6 | 	mov	local01, arg01
271e0     03 1E 06 F1 | 	add	local01, #3
271e4     0F 01 48 FC | 	wrbyte	#0, local01
271e8     2D 1E 06 F1 | 	add	local01, #45
271ec     FF FF FF FF 
271f0     0F FF 6B FC | 	wrlong	##-1, local01
271f4     30 1E 86 F1 | 	sub	local01, #48
271f8     0F 13 02 F6 | 	mov	arg01, local01
271fc     18 D5 BF FD | 	call	#_fatfs_cc_move_window
27200     00 FA 0D F2 | 	cmp	result1, #0 wz
27204     04 FA 05 56 |  if_ne	mov	result1, #4
27208     94 01 90 5D |  if_ne	jmp	#LR__4024
2720c     34 1E 06 F1 | 	add	local01, #52
27210     0F 13 02 F6 | 	mov	arg01, local01
27214     FE 13 06 F1 | 	add	arg01, #510
27218                 | ' {
27218                 | ' 
27218                 | ' 	return *((WORD*)ptr);
27218     09 21 E2 FA | 	rdword	local02, arg01
2721c     0F 23 C2 FA | 	rdbyte	local03, local01
27220     34 1E 86 F1 | 	sub	local01, #52
27224     11 25 E2 F8 | 	getbyte	local04, local03, #0
27228     EB 24 0E F2 | 	cmp	local04, #235 wz
2722c     11 17 02 56 |  if_ne	mov	arg03, local03
27230     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
27234     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
27238     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
2723c     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
27240     44 01 90 5D |  if_ne	jmp	#LR__4023
27244     10 25 32 F9 | 	getword	local04, local02, #0
27248     55 00 00 FF 
2724c     55 24 0E F2 | 	cmp	local04, ##43605 wz
27250     2C 00 90 5D |  if_ne	jmp	#LR__4020
27254     34 1E 06 F1 | 	add	local01, #52
27258     0F 13 02 F6 | 	mov	arg01, local01
2725c     34 1E 86 F1 | 	sub	local01, #52
27260     52 12 06 F1 | 	add	arg01, #82
27264     63 01 00 FF 
27268     B4 14 06 F6 | 	mov	arg02, ##@LR__4614
2726c     08 16 06 F6 | 	mov	arg03, #8
27270     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
27274     00 FA 0D F2 | 	cmp	result1, #0 wz
27278                 | ' 			return 0;
27278     00 FA 05 A6 |  if_e	mov	result1, #0
2727c     20 01 90 AD |  if_e	jmp	#LR__4024
27280                 | LR__4020
27280     34 1E 06 F1 | 	add	local01, #52
27284     0F 13 02 F6 | 	mov	arg01, local01
27288     0B 12 06 F1 | 	add	arg01, #11
2728c                 | ' {
2728c                 | ' 
2728c                 | ' 	return *((WORD*)ptr);
2728c     09 FB E1 FA | 	rdword	result1, arg01
27290     0D 1E 06 F1 | 	add	local01, #13
27294     0F 23 C2 FA | 	rdbyte	local03, local01
27298     41 1E 86 F1 | 	sub	local01, #65
2729c     FD 24 32 F9 | 	getword	local04, result1, #0
272a0     FD 14 32 F9 | 	getword	arg02, result1, #0
272a4     01 14 86 F1 | 	sub	arg02, #1
272a8     0A 25 CA F7 | 	test	local04, arg02 wz
272ac     D8 00 90 5D |  if_ne	jmp	#LR__4022
272b0     FD 14 32 F9 | 	getword	arg02, result1, #0
272b4     01 00 00 FF 
272b8     00 14 16 F2 | 	cmp	arg02, ##512 wc
272bc     C8 00 90 CD |  if_b	jmp	#LR__4022
272c0     FD 14 32 F9 | 	getword	arg02, result1, #0
272c4     01 00 00 FF 
272c8     01 14 16 F2 | 	cmp	arg02, ##513 wc
272cc     B8 00 90 3D |  if_ae	jmp	#LR__4022
272d0     11 13 02 F6 | 	mov	arg01, local03
272d4     07 12 4E F7 | 	zerox	arg01, #7 wz
272d8     AC 00 90 AD |  if_e	jmp	#LR__4022
272dc     11 13 E2 F8 | 	getbyte	arg01, local03, #0
272e0     11 23 E2 F8 | 	getbyte	local03, local03, #0
272e4     01 22 86 F1 | 	sub	local03, #1
272e8     11 13 CA F7 | 	test	arg01, local03 wz
272ec     98 00 90 5D |  if_ne	jmp	#LR__4022
272f0     34 1E 06 F1 | 	add	local01, #52
272f4     0F 13 02 F6 | 	mov	arg01, local01
272f8     34 1E 86 F1 | 	sub	local01, #52
272fc     0E 12 06 F1 | 	add	arg01, #14
27300                 | ' {
27300                 | ' 
27300                 | ' 	return *((WORD*)ptr);
27300     09 FB E9 FA | 	rdword	result1, arg01 wz
27304     80 00 90 AD |  if_e	jmp	#LR__4022
27308     44 1E 06 F1 | 	add	local01, #68
2730c     0F 13 C2 FA | 	rdbyte	arg01, local01
27310     44 1E 86 F1 | 	sub	local01, #68
27314     01 12 86 F1 | 	sub	arg01, #1
27318     02 12 16 F2 | 	cmp	arg01, #2 wc
2731c     68 00 90 3D |  if_ae	jmp	#LR__4022
27320     34 1E 06 F1 | 	add	local01, #52
27324     0F 13 02 F6 | 	mov	arg01, local01
27328     34 1E 86 F1 | 	sub	local01, #52
2732c     11 12 06 F1 | 	add	arg01, #17
27330                 | ' {
27330                 | ' 
27330                 | ' 	return *((WORD*)ptr);
27330     09 FB E9 FA | 	rdword	result1, arg01 wz
27334     50 00 90 AD |  if_e	jmp	#LR__4022
27338     34 1E 06 F1 | 	add	local01, #52
2733c     0F 13 02 F6 | 	mov	arg01, local01
27340     34 1E 86 F1 | 	sub	local01, #52
27344     13 12 06 F1 | 	add	arg01, #19
27348                 | ' {
27348                 | ' 
27348                 | ' 	return *((WORD*)ptr);
27348     09 FB E1 FA | 	rdword	result1, arg01
2734c     FD 22 32 F9 | 	getword	local03, result1, #0
27350     80 22 16 F2 | 	cmp	local03, #128 wc
27354     20 00 90 3D |  if_ae	jmp	#LR__4021
27358     34 1E 06 F1 | 	add	local01, #52
2735c     0F 13 02 F6 | 	mov	arg01, local01
27360     34 1E 86 F1 | 	sub	local01, #52
27364     20 12 06 F1 | 	add	arg01, #32
27368                 | ' {
27368                 | ' 
27368                 | ' 	return *((DWORD*)ptr);
27368     09 FB 01 FB | 	rdlong	result1, arg01
2736c     80 00 00 FF 
27370     00 FA 15 F2 | 	cmp	result1, ##65536 wc
27374     10 00 90 CD |  if_b	jmp	#LR__4022
27378                 | LR__4021
27378     4A 1E 06 F1 | 	add	local01, #74
2737c                 | ' {
2737c                 | ' 
2737c                 | ' 	return *((WORD*)ptr);
2737c     0F FB E9 FA | 	rdword	result1, local01 wz
27380                 | ' 			&& b != 0 && (b & (b - 1)) == 0
27380                 | ' 			&& ld_word(fs->win +  14 ) != 0
27380                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
27380                 | ' 			&& ld_word(fs->win +  17 ) != 0
27380                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
27380                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
27380                 | ' 				return 0;
27380     00 FA 05 56 |  if_ne	mov	result1, #0
27384     18 00 90 5D |  if_ne	jmp	#LR__4024
27388                 | LR__4022
27388                 | LR__4023
27388                 | ' 		}
27388                 | ' 	}
27388                 | ' 	return sign == 0xAA55 ? 2 : 3;
27388     10 23 32 F9 | 	getword	local03, local02, #0
2738c     55 00 00 FF 
27390     55 22 0E F2 | 	cmp	local03, ##43605 wz
27394     02 24 06 A6 |  if_e	mov	local04, #2
27398     03 24 06 56 |  if_ne	mov	local04, #3
2739c     12 FB 01 F6 | 	mov	result1, local04
273a0                 | LR__4024
273a0     A7 F0 03 F6 | 	mov	ptra, fp
273a4     B2 00 A0 FD | 	call	#popregs_
273a8                 | _fatfs_cc_check_fs_ret
273a8     2D 00 64 FD | 	ret
273ac                 | 
273ac                 | _fatfs_cc_find_volume
273ac     05 4A 05 F6 | 	mov	COUNT_, #5
273b0     A8 00 A0 FD | 	call	#pushregs_
273b4     24 F0 07 F1 | 	add	ptra, #36
273b8     09 1F 02 F6 | 	mov	local01, arg01
273bc     0A 21 02 F6 | 	mov	local02, arg02
273c0     0F 13 02 F6 | 	mov	arg01, local01
273c4     00 14 06 F6 | 	mov	arg02, #0
273c8     08 FE BF FD | 	call	#_fatfs_cc_check_fs
273cc     02 FA 0D F2 | 	cmp	result1, #2 wz
273d0     0C 00 90 AD |  if_e	jmp	#LR__4030
273d4     03 FA 15 F2 | 	cmp	result1, #3 wc
273d8     00 20 0E C2 |  if_b	cmp	local02, #0 wz
273dc     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4038
273e0                 | LR__4030
273e0                 | ' 	for (i = 0; i < 4; i++) {
273e0     00 22 06 F6 | 	mov	local03, #0
273e4     97 26 48 FB | 	callpa	#(@LR__4032-@LR__4031)>>2,fcache_load_ptr_
273e8                 | LR__4031
273e8     04 22 16 F2 | 	cmp	local03, #4 wc
273ec     44 00 90 3D |  if_ae	jmp	#LR__4033
273f0     11 25 02 F6 | 	mov	local04, local03
273f4     02 24 66 F0 | 	shl	local04, #2
273f8     14 4E 05 F1 | 	add	fp, #20
273fc     A7 24 02 F1 | 	add	local04, fp
27400     34 1E 06 F1 | 	add	local01, #52
27404     0F 13 02 F6 | 	mov	arg01, local01
27408     34 1E 86 F1 | 	sub	local01, #52
2740c     BE 13 06 F1 | 	add	arg01, #446
27410     11 15 02 F6 | 	mov	arg02, local03
27414     04 14 66 F0 | 	shl	arg02, #4
27418     0A 13 02 F1 | 	add	arg01, arg02
2741c     08 12 06 F1 | 	add	arg01, #8
27420                 | ' {
27420                 | ' 
27420                 | ' 	return *((DWORD*)ptr);
27420     09 FB 01 FB | 	rdlong	result1, arg01
27424     14 4E 85 F1 | 	sub	fp, #20
27428     12 FB 61 FC | 	wrlong	result1, local04
2742c     01 22 06 F1 | 	add	local03, #1
27430     B4 FF 9F FD | 	jmp	#LR__4031
27434                 | LR__4032
27434                 | LR__4033
27434     00 20 0E F2 | 	cmp	local02, #0 wz
27438     10 25 02 56 |  if_ne	mov	local04, local02
2743c     01 24 86 51 |  if_ne	sub	local04, #1
27440     00 24 06 A6 |  if_e	mov	local04, #0
27444     12 23 02 F6 | 	mov	local03, local04
27448                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
27448                 | ' 	}
27448                 | ' 	i = part ? part - 1 : 0;
27448                 | ' 	do {
27448                 | LR__4034
27448     11 25 02 F6 | 	mov	local04, local03
2744c     02 24 66 F0 | 	shl	local04, #2
27450     14 4E 05 F1 | 	add	fp, #20
27454     A7 24 02 F1 | 	add	local04, fp
27458     12 25 0A FB | 	rdlong	local04, local04 wz
2745c     14 4E 85 F1 | 	sub	fp, #20
27460     28 00 90 AD |  if_e	jmp	#LR__4035
27464     11 25 02 F6 | 	mov	local04, local03
27468     02 24 66 F0 | 	shl	local04, #2
2746c     14 4E 05 F1 | 	add	fp, #20
27470     A7 24 02 F1 | 	add	local04, fp
27474     12 15 02 FB | 	rdlong	arg02, local04
27478     0F 13 02 F6 | 	mov	arg01, local01
2747c     14 4E 85 F1 | 	sub	fp, #20
27480     50 FD BF FD | 	call	#_fatfs_cc_check_fs
27484     FD 24 02 F6 | 	mov	local04, result1
27488     04 00 90 FD | 	jmp	#LR__4036
2748c                 | LR__4035
2748c     03 24 06 F6 | 	mov	local04, #3
27490                 | LR__4036
27490     12 27 02 F6 | 	mov	local05, local04
27494     00 20 0E F2 | 	cmp	local02, #0 wz
27498     02 26 16 A2 |  if_e	cmp	local05, #2 wc
2749c     0C 00 90 8D |  if_c_and_z	jmp	#LR__4037
274a0     01 22 06 A1 |  if_e	add	local03, #1
274a4     04 22 16 A2 |  if_e	cmp	local03, #4 wc
274a8     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4034
274ac                 | LR__4037
274ac                 | ' 	return fmt;
274ac     13 FB 01 F6 | 	mov	result1, local05
274b0                 | LR__4038
274b0     A7 F0 03 F6 | 	mov	ptra, fp
274b4     B2 00 A0 FD | 	call	#popregs_
274b8                 | _fatfs_cc_find_volume_ret
274b8     2D 00 64 FD | 	ret
274bc                 | 
274bc                 | _fatfs_cc_mount_volume
274bc     0B 4A 05 F6 | 	mov	COUNT_, #11
274c0     A8 00 A0 FD | 	call	#pushregs_
274c4     0A 1F 02 F6 | 	mov	local01, arg02
274c8     0B 21 02 F6 | 	mov	local02, arg03
274cc     0F 01 68 FC | 	wrlong	#0, local01
274d0     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
274d4     FD 22 02 F6 | 	mov	local03, result1
274d8     00 22 56 F2 | 	cmps	local03, #0 wc
274dc     0B FA 05 C6 |  if_b	mov	result1, #11
274e0     3C 05 90 CD |  if_b	jmp	#LR__4050
274e4     11 17 02 F6 | 	mov	arg03, local03
274e8     02 16 66 F0 | 	shl	arg03, #2
274ec     F2 16 02 F1 | 	add	arg03, objptr
274f0     0B 25 0A FB | 	rdlong	local04, arg03 wz
274f4     0C FA 05 A6 |  if_e	mov	result1, #12
274f8     24 05 90 AD |  if_e	jmp	#LR__4050
274fc     0F 25 62 FC | 	wrlong	local04, local01
27500     10 21 E2 F8 | 	getbyte	local02, local02, #0
27504     FE 20 06 F5 | 	and	local02, #254
27508     12 17 CA FA | 	rdbyte	arg03, local04 wz
2750c     4C 00 90 AD |  if_e	jmp	#LR__4041
27510     01 24 06 F1 | 	add	local04, #1
27514     12 13 CA FA | 	rdbyte	arg01, local04 wz
27518     01 24 86 F1 | 	sub	local04, #1
2751c     01 FA 05 56 |  if_ne	mov	result1, #1
27520                 | ' 
27520                 | ' 	return Stat;
27520     01 00 00 AF 
27524     20 E4 05 A1 |  if_e	add	objptr, ##544
27528     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2752c     01 00 00 AF 
27530     20 E4 85 A1 |  if_e	sub	objptr, ##544
27534     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
27538     01 16 CE F7 | 	test	arg03, #1 wz
2753c     1C 00 90 5D |  if_ne	jmp	#LR__4040
27540     00 20 0E F2 | 	cmp	local02, #0 wz
27544     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
27548     04 FA CD 57 |  if_ne	test	result1, #4 wz
2754c                 | ' 				return FR_WRITE_PROTECTED;
2754c     0A FA 05 56 |  if_ne	mov	result1, #10
27550     CC 04 90 5D |  if_ne	jmp	#LR__4050
27554                 | ' 			}
27554                 | ' 			return FR_OK;
27554     00 FA 05 F6 | 	mov	result1, #0
27558     C4 04 90 FD | 	jmp	#LR__4050
2755c                 | LR__4040
2755c                 | LR__4041
2755c     12 01 48 FC | 	wrbyte	#0, local04
27560     01 24 06 F1 | 	add	local04, #1
27564     12 23 42 FC | 	wrbyte	local03, local04
27568     12 13 C2 FA | 	rdbyte	arg01, local04
2756c     01 24 86 F1 | 	sub	local04, #1
27570     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
27574     FD 16 02 F6 | 	mov	arg03, result1
27578     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2757c     01 26 CE F7 | 	test	local05, #1 wz
27580                 | ' 		return FR_NOT_READY;
27580     03 FA 05 56 |  if_ne	mov	result1, #3
27584     98 04 90 5D |  if_ne	jmp	#LR__4050
27588     00 20 0E F2 | 	cmp	local02, #0 wz
2758c     0B 27 02 56 |  if_ne	mov	local05, arg03
27590     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
27594     04 26 CE 57 |  if_ne	test	local05, #4 wz
27598                 | ' 		return FR_WRITE_PROTECTED;
27598     0A FA 05 56 |  if_ne	mov	result1, #10
2759c     80 04 90 5D |  if_ne	jmp	#LR__4050
275a0     12 13 02 F6 | 	mov	arg01, local04
275a4     00 14 06 F6 | 	mov	arg02, #0
275a8     00 FE BF FD | 	call	#_fatfs_cc_find_volume
275ac     FD 12 02 F6 | 	mov	arg01, result1
275b0     04 12 0E F2 | 	cmp	arg01, #4 wz
275b4     01 FA 05 A6 |  if_e	mov	result1, #1
275b8     64 04 90 AD |  if_e	jmp	#LR__4050
275bc     02 12 16 F2 | 	cmp	arg01, #2 wc
275c0     0D FA 05 36 |  if_ae	mov	result1, #13
275c4     58 04 90 3D |  if_ae	jmp	#LR__4050
275c8     30 24 06 F1 | 	add	local04, #48
275cc     12 29 02 FB | 	rdlong	local06, local04
275d0     04 24 06 F1 | 	add	local04, #4
275d4     12 13 02 F6 | 	mov	arg01, local04
275d8     34 24 86 F1 | 	sub	local04, #52
275dc     0B 12 06 F1 | 	add	arg01, #11
275e0                 | ' {
275e0                 | ' 
275e0                 | ' 	return *((WORD*)ptr);
275e0     09 FB E1 FA | 	rdword	result1, arg01
275e4     01 00 00 FF 
275e8     00 FA 0D F2 | 	cmp	result1, ##512 wz
275ec     0D FA 05 56 |  if_ne	mov	result1, #13
275f0     2C 04 90 5D |  if_ne	jmp	#LR__4050
275f4     34 24 06 F1 | 	add	local04, #52
275f8     12 13 02 F6 | 	mov	arg01, local04
275fc     34 24 86 F1 | 	sub	local04, #52
27600     16 12 06 F1 | 	add	arg01, #22
27604                 | ' {
27604                 | ' 
27604                 | ' 	return *((WORD*)ptr);
27604     09 FB E1 FA | 	rdword	result1, arg01
27608     FD 2A 0A F6 | 	mov	local07, result1 wz
2760c     18 00 90 5D |  if_ne	jmp	#LR__4042
27610     34 24 06 F1 | 	add	local04, #52
27614     12 13 02 F6 | 	mov	arg01, local04
27618     34 24 86 F1 | 	sub	local04, #52
2761c     24 12 06 F1 | 	add	arg01, #36
27620                 | ' {
27620                 | ' 
27620                 | ' 	return *((DWORD*)ptr);
27620     09 FB 01 FB | 	rdlong	result1, arg01
27624     FD 2A 02 F6 | 	mov	local07, result1
27628                 | LR__4042
27628     1C 24 06 F1 | 	add	local04, #28
2762c     12 2B 62 FC | 	wrlong	local07, local04
27630     28 24 06 F1 | 	add	local04, #40
27634     12 27 C2 FA | 	rdbyte	local05, local04
27638     42 24 86 F1 | 	sub	local04, #66
2763c     12 27 42 FC | 	wrbyte	local05, local04
27640     12 27 C2 FA | 	rdbyte	local05, local04
27644     02 24 86 F1 | 	sub	local04, #2
27648     01 26 0E F2 | 	cmp	local05, #1 wz
2764c     02 24 06 51 |  if_ne	add	local04, #2
27650     12 27 C2 5A |  if_ne	rdbyte	local05, local04
27654     02 24 86 51 |  if_ne	sub	local04, #2
27658     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
2765c     0D FA 05 56 |  if_ne	mov	result1, #13
27660     BC 03 90 5D |  if_ne	jmp	#LR__4050
27664     02 24 06 F1 | 	add	local04, #2
27668     12 27 C2 FA | 	rdbyte	local05, local04
2766c     13 2B 02 FD | 	qmul	local07, local05
27670     3F 24 06 F1 | 	add	local04, #63
27674     12 27 C2 FA | 	rdbyte	local05, local04
27678     37 24 86 F1 | 	sub	local04, #55
2767c     12 27 52 FC | 	wrword	local05, local04
27680     12 27 EA FA | 	rdword	local05, local04 wz
27684     0A 24 86 F1 | 	sub	local04, #10
27688     18 2A 62 FD | 	getqx	local07
2768c     20 00 90 AD |  if_e	jmp	#LR__4043
27690     0A 24 06 F1 | 	add	local04, #10
27694     12 27 E2 FA | 	rdword	local05, local04
27698     13 23 32 F9 | 	getword	local03, local05, #0
2769c     0A 24 86 F1 | 	sub	local04, #10
276a0     13 27 32 F9 | 	getword	local05, local05, #0
276a4     01 26 86 F1 | 	sub	local05, #1
276a8     13 23 CA F7 | 	test	local03, local05 wz
276ac     08 00 90 AD |  if_e	jmp	#LR__4044
276b0                 | LR__4043
276b0     0D FA 05 F6 | 	mov	result1, #13
276b4     68 03 90 FD | 	jmp	#LR__4050
276b8                 | LR__4044
276b8     34 24 06 F1 | 	add	local04, #52
276bc     12 13 02 F6 | 	mov	arg01, local04
276c0     11 12 06 F1 | 	add	arg01, #17
276c4                 | ' {
276c4                 | ' 
276c4                 | ' 	return *((WORD*)ptr);
276c4     09 FB E1 FA | 	rdword	result1, arg01
276c8     2C 24 86 F1 | 	sub	local04, #44
276cc     12 FB 51 FC | 	wrword	result1, local04
276d0     12 27 E2 FA | 	rdword	local05, local04
276d4     08 24 86 F1 | 	sub	local04, #8
276d8     13 13 52 F6 | 	abs	arg01, local05 wc
276dc     09 13 42 F8 | 	getnib	arg01, arg01, #0
276e0     09 13 8A F6 | 	negc	arg01, arg01 wz
276e4     0D FA 05 56 |  if_ne	mov	result1, #13
276e8     34 03 90 5D |  if_ne	jmp	#LR__4050
276ec     34 24 06 F1 | 	add	local04, #52
276f0     12 13 02 F6 | 	mov	arg01, local04
276f4     34 24 86 F1 | 	sub	local04, #52
276f8     13 12 06 F1 | 	add	arg01, #19
276fc                 | ' {
276fc                 | ' 
276fc                 | ' 	return *((WORD*)ptr);
276fc     09 FB E1 FA | 	rdword	result1, arg01
27700     FD 2C 0A F6 | 	mov	local08, result1 wz
27704     34 24 06 A1 |  if_e	add	local04, #52
27708     12 13 02 A6 |  if_e	mov	arg01, local04
2770c     34 24 86 A1 |  if_e	sub	local04, #52
27710     20 12 06 A1 |  if_e	add	arg01, #32
27714                 | ' {
27714                 | ' 
27714                 | ' 	return *((DWORD*)ptr);
27714     09 2D 02 AB |  if_e	rdlong	local08, arg01
27718     34 24 06 F1 | 	add	local04, #52
2771c     12 13 02 F6 | 	mov	arg01, local04
27720     34 24 86 F1 | 	sub	local04, #52
27724     0E 12 06 F1 | 	add	arg01, #14
27728                 | ' {
27728                 | ' 
27728                 | ' 	return *((WORD*)ptr);
27728     09 FB E1 FA | 	rdword	result1, arg01
2772c     FD 12 02 F6 | 	mov	arg01, result1
27730     09 27 02 F6 | 	mov	local05, arg01
27734     0F 26 4E F7 | 	zerox	local05, #15 wz
27738     0D FA 05 A6 |  if_e	mov	result1, #13
2773c     E0 02 90 AD |  if_e	jmp	#LR__4050
27740     09 2F 32 F9 | 	getword	local09, arg01, #0
27744     15 2F 02 F1 | 	add	local09, local07
27748     08 24 06 F1 | 	add	local04, #8
2774c     12 27 E2 FA | 	rdword	local05, local04
27750     08 24 86 F1 | 	sub	local04, #8
27754     13 27 52 F6 | 	abs	local05, local05 wc
27758     04 26 46 F0 | 	shr	local05, #4
2775c     13 2F 82 F3 | 	sumc	local09, local05
27760     17 2D 12 F2 | 	cmp	local08, local09 wc
27764     0D FA 05 C6 |  if_b	mov	result1, #13
27768     B4 02 90 CD |  if_b	jmp	#LR__4050
2776c     17 2D 82 F1 | 	sub	local08, local09
27770     0A 24 06 F1 | 	add	local04, #10
27774     12 27 E2 FA | 	rdword	local05, local04
27778     13 2D 12 FD | 	qdiv	local08, local05
2777c     0A 24 86 F1 | 	sub	local04, #10
27780     18 26 62 FD | 	getqx	local05
27784     00 26 0E F2 | 	cmp	local05, #0 wz
27788     0D FA 05 A6 |  if_e	mov	result1, #13
2778c     90 02 90 AD |  if_e	jmp	#LR__4050
27790     00 30 06 F6 | 	mov	local10, #0
27794     FF FF 07 FF 
27798     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2779c     03 30 06 C6 |  if_b	mov	local10, #3
277a0     7F 00 00 FF 
277a4     F6 27 16 F2 | 	cmp	local05, ##65526 wc
277a8     02 30 06 C6 |  if_b	mov	local10, #2
277ac     07 00 00 FF 
277b0     F6 27 16 F2 | 	cmp	local05, ##4086 wc
277b4     01 30 06 C6 |  if_b	mov	local10, #1
277b8     00 30 0E F2 | 	cmp	local10, #0 wz
277bc     0D FA 05 A6 |  if_e	mov	result1, #13
277c0     5C 02 90 AD |  if_e	jmp	#LR__4050
277c4     02 26 06 F1 | 	add	local05, #2
277c8     18 24 06 F1 | 	add	local04, #24
277cc     12 27 62 FC | 	wrlong	local05, local04
277d0     08 24 06 F1 | 	add	local04, #8
277d4     12 29 62 FC | 	wrlong	local06, local04
277d8     14 27 02 F6 | 	mov	local05, local06
277dc     09 13 32 F9 | 	getword	arg01, arg01, #0
277e0     09 27 02 F1 | 	add	local05, arg01
277e4     04 24 06 F1 | 	add	local04, #4
277e8     12 27 62 FC | 	wrlong	local05, local04
277ec     14 27 02 F6 | 	mov	local05, local06
277f0     17 27 02 F1 | 	add	local05, local09
277f4     08 24 06 F1 | 	add	local04, #8
277f8     12 27 62 FC | 	wrlong	local05, local04
277fc     2C 24 86 F1 | 	sub	local04, #44
27800     03 30 0E F2 | 	cmp	local10, #3 wz
27804     5C 00 90 5D |  if_ne	jmp	#LR__4045
27808     34 24 06 F1 | 	add	local04, #52
2780c     12 13 02 F6 | 	mov	arg01, local04
27810     34 24 86 F1 | 	sub	local04, #52
27814     2A 12 06 F1 | 	add	arg01, #42
27818                 | ' {
27818                 | ' 
27818                 | ' 	return *((WORD*)ptr);
27818     09 FB E9 FA | 	rdword	result1, arg01 wz
2781c     0D FA 05 56 |  if_ne	mov	result1, #13
27820     FC 01 90 5D |  if_ne	jmp	#LR__4050
27824     08 24 06 F1 | 	add	local04, #8
27828     12 27 EA FA | 	rdword	local05, local04 wz
2782c     08 24 86 F1 | 	sub	local04, #8
27830     0D FA 05 56 |  if_ne	mov	result1, #13
27834     E8 01 90 5D |  if_ne	jmp	#LR__4050
27838     34 24 06 F1 | 	add	local04, #52
2783c     12 13 02 F6 | 	mov	arg01, local04
27840     2C 12 06 F1 | 	add	arg01, #44
27844                 | ' {
27844                 | ' 
27844                 | ' 	return *((DWORD*)ptr);
27844     09 FB 01 FB | 	rdlong	result1, arg01
27848     0C 24 86 F1 | 	sub	local04, #12
2784c     12 FB 61 FC | 	wrlong	result1, local04
27850     10 24 86 F1 | 	sub	local04, #16
27854     12 33 02 FB | 	rdlong	local11, local04
27858     18 24 86 F1 | 	sub	local04, #24
2785c     02 32 66 F0 | 	shl	local11, #2
27860     6C 00 90 FD | 	jmp	#LR__4047
27864                 | LR__4045
27864     08 24 06 F1 | 	add	local04, #8
27868     12 27 EA FA | 	rdword	local05, local04 wz
2786c     08 24 86 F1 | 	sub	local04, #8
27870     0D FA 05 A6 |  if_e	mov	result1, #13
27874     A8 01 90 AD |  if_e	jmp	#LR__4050
27878     24 24 06 F1 | 	add	local04, #36
2787c     12 27 02 FB | 	rdlong	local05, local04
27880     15 27 02 F1 | 	add	local05, local07
27884     04 24 06 F1 | 	add	local04, #4
27888     12 27 62 FC | 	wrlong	local05, local04
2788c     28 24 86 F1 | 	sub	local04, #40
27890     02 30 0E F2 | 	cmp	local10, #2 wz
27894     18 24 06 A1 |  if_e	add	local04, #24
27898     12 27 02 AB |  if_e	rdlong	local05, local04
2789c     18 24 86 A1 |  if_e	sub	local04, #24
278a0     01 26 66 A0 |  if_e	shl	local05, #1
278a4     24 00 90 AD |  if_e	jmp	#LR__4046
278a8     18 24 06 F1 | 	add	local04, #24
278ac     12 33 02 FB | 	rdlong	local11, local04
278b0     19 27 02 F6 | 	mov	local05, local11
278b4     01 26 66 F0 | 	shl	local05, #1
278b8     19 27 02 F1 | 	add	local05, local11
278bc     01 26 46 F0 | 	shr	local05, #1
278c0     18 24 86 F1 | 	sub	local04, #24
278c4     01 32 06 F5 | 	and	local11, #1
278c8     19 27 02 F1 | 	add	local05, local11
278cc                 | LR__4046
278cc     13 33 02 F6 | 	mov	local11, local05
278d0                 | LR__4047
278d0     FF 33 06 F1 | 	add	local11, #511
278d4     09 32 46 F0 | 	shr	local11, #9
278d8     1C 24 06 F1 | 	add	local04, #28
278dc     12 17 02 FB | 	rdlong	arg03, local04
278e0     1C 24 86 F1 | 	sub	local04, #28
278e4     19 17 12 F2 | 	cmp	arg03, local11 wc
278e8     0D FA 05 C6 |  if_b	mov	result1, #13
278ec     30 01 90 CD |  if_b	jmp	#LR__4050
278f0     14 24 06 F1 | 	add	local04, #20
278f4     FF FF FF FF 
278f8     12 FF 6B FC | 	wrlong	##-1, local04
278fc     04 24 86 F1 | 	sub	local04, #4
27900     FF FF FF FF 
27904     12 FF 6B FC | 	wrlong	##-1, local04
27908     0C 24 86 F1 | 	sub	local04, #12
2790c     12 01 49 FC | 	wrbyte	#128, local04
27910     04 24 86 F1 | 	sub	local04, #4
27914     03 30 0E F2 | 	cmp	local10, #3 wz
27918     D0 00 90 5D |  if_ne	jmp	#LR__4049
2791c     34 24 06 F1 | 	add	local04, #52
27920     12 13 02 F6 | 	mov	arg01, local04
27924     34 24 86 F1 | 	sub	local04, #52
27928     30 12 06 F1 | 	add	arg01, #48
2792c                 | ' {
2792c                 | ' 
2792c                 | ' 	return *((WORD*)ptr);
2792c     09 FB E1 FA | 	rdword	result1, arg01
27930     FD 26 32 F9 | 	getword	local05, result1, #0
27934     01 26 0E F2 | 	cmp	local05, #1 wz
27938     B0 00 90 5D |  if_ne	jmp	#LR__4049
2793c     01 28 06 F1 | 	add	local06, #1
27940     12 13 02 F6 | 	mov	arg01, local04
27944     14 15 02 F6 | 	mov	arg02, local06
27948     CC CD BF FD | 	call	#_fatfs_cc_move_window
2794c     00 FA 0D F2 | 	cmp	result1, #0 wz
27950     98 00 90 5D |  if_ne	jmp	#LR__4049
27954     04 24 06 F1 | 	add	local04, #4
27958     12 01 48 FC | 	wrbyte	#0, local04
2795c     30 24 06 F1 | 	add	local04, #48
27960     12 13 02 F6 | 	mov	arg01, local04
27964     34 24 86 F1 | 	sub	local04, #52
27968     FE 13 06 F1 | 	add	arg01, #510
2796c                 | ' {
2796c                 | ' 
2796c                 | ' 	return *((WORD*)ptr);
2796c     09 FB E1 FA | 	rdword	result1, arg01
27970     FD 26 32 F9 | 	getword	local05, result1, #0
27974     55 00 00 FF 
27978     55 26 0E F2 | 	cmp	local05, ##43605 wz
2797c     34 24 06 A1 |  if_e	add	local04, #52
27980     12 13 02 A6 |  if_e	mov	arg01, local04
27984     34 24 86 A1 |  if_e	sub	local04, #52
27988                 | ' {
27988                 | ' 
27988                 | ' 	return *((DWORD*)ptr);
27988     09 FB 01 AB |  if_e	rdlong	result1, arg01
2798c     A9 B0 20 AF 
27990     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
27994     54 00 90 5D |  if_ne	jmp	#LR__4048
27998     34 24 06 F1 | 	add	local04, #52
2799c     12 13 02 F6 | 	mov	arg01, local04
279a0     34 24 86 F1 | 	sub	local04, #52
279a4     E4 13 06 F1 | 	add	arg01, #484
279a8                 | ' {
279a8                 | ' 
279a8                 | ' 	return *((DWORD*)ptr);
279a8     09 FB 01 FB | 	rdlong	result1, arg01
279ac     B9 A0 30 FF 
279b0     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
279b4     34 00 90 5D |  if_ne	jmp	#LR__4048
279b8     34 24 06 F1 | 	add	local04, #52
279bc     12 13 02 F6 | 	mov	arg01, local04
279c0     E8 13 06 F1 | 	add	arg01, #488
279c4                 | ' {
279c4                 | ' 
279c4                 | ' 	return *((DWORD*)ptr);
279c4     09 FB 01 FB | 	rdlong	result1, arg01
279c8     20 24 86 F1 | 	sub	local04, #32
279cc     12 FB 61 FC | 	wrlong	result1, local04
279d0     20 24 06 F1 | 	add	local04, #32
279d4     12 13 02 F6 | 	mov	arg01, local04
279d8     EC 13 06 F1 | 	add	arg01, #492
279dc                 | ' {
279dc                 | ' 
279dc                 | ' 	return *((DWORD*)ptr);
279dc     09 FB 01 FB | 	rdlong	result1, arg01
279e0     24 24 86 F1 | 	sub	local04, #36
279e4     12 FB 61 FC | 	wrlong	result1, local04
279e8     10 24 86 F1 | 	sub	local04, #16
279ec                 | LR__4048
279ec                 | LR__4049
279ec     12 31 42 FC | 	wrbyte	local10, local04
279f0     04 E4 05 F1 | 	add	objptr, #4
279f4     F2 26 E2 FA | 	rdword	local05, objptr
279f8     01 26 06 F1 | 	add	local05, #1
279fc     F2 26 52 FC | 	wrword	local05, objptr
27a00     F2 32 E2 FA | 	rdword	local11, objptr
27a04     06 24 06 F1 | 	add	local04, #6
27a08     12 33 52 FC | 	wrword	local11, local04
27a0c     04 E4 05 F1 | 	add	objptr, #4
27a10     06 24 06 F1 | 	add	local04, #6
27a14     12 E5 61 FC | 	wrlong	objptr, local04
27a18                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
27a18                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
27a18                 | ' 			{
27a18                 | ' 
27a18                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
27a18                 | ' 
27a18                 | ' 
27a18                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
27a18                 | ' 
27a18                 | ' 			}
27a18                 | ' 		}
27a18                 | ' 
27a18                 | ' 
27a18                 | ' 	}
27a18                 | ' 
27a18                 | ' 	fs->fs_type = (BYTE)fmt;
27a18                 | ' 	fs->id = ++Fsid;
27a18                 | ' 
27a18                 | ' 	fs->lfnbuf = LfnBuf;
27a18                 | ' #line 3567 "ff.c"
27a18                 | ' 	return FR_OK;
27a18     00 FA 05 F6 | 	mov	result1, #0
27a1c     08 E4 85 F1 | 	sub	objptr, #8
27a20                 | LR__4050
27a20     A7 F0 03 F6 | 	mov	ptra, fp
27a24     B2 00 A0 FD | 	call	#popregs_
27a28                 | _fatfs_cc_mount_volume_ret
27a28     2D 00 64 FD | 	ret
27a2c                 | 
27a2c                 | _fatfs_cc_validate
27a2c     09 01 0A F6 | 	mov	_var01, arg01 wz
27a30     09 02 06 F6 | 	mov	_var02, #9
27a34     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
27a38     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
27a3c     50 00 90 AD |  if_e	jmp	#LR__4060
27a40     04 00 06 F1 | 	add	_var01, #4
27a44     00 07 E2 FA | 	rdword	_var04, _var01
27a48     04 00 86 F1 | 	sub	_var01, #4
27a4c     00 13 02 FB | 	rdlong	arg01, _var01
27a50     06 12 06 F1 | 	add	arg01, #6
27a54     09 FB E1 FA | 	rdword	result1, arg01
27a58     FD 06 0A F2 | 	cmp	_var04, result1 wz
27a5c     30 00 90 5D |  if_ne	jmp	#LR__4060
27a60     00 07 02 FB | 	rdlong	_var04, _var01
27a64     01 06 06 F1 | 	add	_var04, #1
27a68     03 13 CA FA | 	rdbyte	arg01, _var04 wz
27a6c     01 FA 05 56 |  if_ne	mov	result1, #1
27a70                 | ' 
27a70                 | ' 	return Stat;
27a70     01 00 00 AF 
27a74     20 E4 05 A1 |  if_e	add	objptr, ##544
27a78     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27a7c     01 00 00 AF 
27a80     20 E4 85 A1 |  if_e	sub	objptr, ##544
27a84     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
27a88     01 04 CE F7 | 	test	_var03, #1 wz
27a8c     00 02 06 A6 |  if_e	mov	_var02, #0
27a90                 | LR__4060
27a90     00 02 0E F2 | 	cmp	_var02, #0 wz
27a94     00 05 02 AB |  if_e	rdlong	_var03, _var01
27a98     00 04 06 56 |  if_ne	mov	_var03, #0
27a9c     0A 05 62 FC | 	wrlong	_var03, arg02
27aa0                 | ' 			res = FR_OK;
27aa0                 | ' 		}
27aa0                 | ' 
27aa0                 | ' 	}
27aa0                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
27aa0                 | ' 	return res;
27aa0     01 FB 01 F6 | 	mov	result1, _var02
27aa4                 | _fatfs_cc_validate_ret
27aa4     2D 00 64 FD | 	ret
27aa8                 | 
27aa8                 | _fatfs_cc_f_mount
27aa8     01 4A 05 F6 | 	mov	COUNT_, #1
27aac     A8 00 A0 FD | 	call	#pushregs_
27ab0     20 F0 07 F1 | 	add	ptra, #32
27ab4     04 4E 05 F1 | 	add	fp, #4
27ab8     A7 12 62 FC | 	wrlong	arg01, fp
27abc     04 4E 05 F1 | 	add	fp, #4
27ac0     A7 14 62 FC | 	wrlong	arg02, fp
27ac4     04 4E 05 F1 | 	add	fp, #4
27ac8     A7 16 42 FC | 	wrbyte	arg03, fp
27acc     04 4E 85 F1 | 	sub	fp, #4
27ad0     A7 16 02 FB | 	rdlong	arg03, fp
27ad4     14 4E 05 F1 | 	add	fp, #20
27ad8     A7 16 62 FC | 	wrlong	arg03, fp
27adc     A7 12 02 F6 | 	mov	arg01, fp
27ae0     1C 4E 85 F1 | 	sub	fp, #28
27ae4     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
27ae8     14 4E 05 F1 | 	add	fp, #20
27aec     A7 FA 61 FC | 	wrlong	result1, fp
27af0     14 4E 85 F1 | 	sub	fp, #20
27af4     00 FA 55 F2 | 	cmps	result1, #0 wc
27af8     0B FA 05 C6 |  if_b	mov	result1, #11
27afc     C0 00 90 CD |  if_b	jmp	#LR__4071
27b00     14 4E 05 F1 | 	add	fp, #20
27b04     A7 16 02 FB | 	rdlong	arg03, fp
27b08     02 16 66 F0 | 	shl	arg03, #2
27b0c     F2 16 02 F1 | 	add	arg03, objptr
27b10     0B 17 0A FB | 	rdlong	arg03, arg03 wz
27b14     04 4E 85 F1 | 	sub	fp, #4
27b18     A7 16 62 FC | 	wrlong	arg03, fp
27b1c     10 4E 85 F1 | 	sub	fp, #16
27b20     28 00 90 AD |  if_e	jmp	#LR__4070
27b24     10 4E 05 F1 | 	add	fp, #16
27b28     A7 16 02 FB | 	rdlong	arg03, fp
27b2c     10 4E 85 F1 | 	sub	fp, #16
27b30     01 16 06 F1 | 	add	arg03, #1
27b34     0B 13 C2 FA | 	rdbyte	arg01, arg03
27b38     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
27b3c     10 4E 05 F1 | 	add	fp, #16
27b40     A7 16 02 FB | 	rdlong	arg03, fp
27b44     10 4E 85 F1 | 	sub	fp, #16
27b48     0B 01 48 FC | 	wrbyte	#0, arg03
27b4c                 | LR__4070
27b4c     04 4E 05 F1 | 	add	fp, #4
27b50     A7 1E 0A FB | 	rdlong	local01, fp wz
27b54     04 4E 85 F1 | 	sub	fp, #4
27b58     04 4E 05 51 |  if_ne	add	fp, #4
27b5c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
27b60     04 4E 85 51 |  if_ne	sub	fp, #4
27b64     0F 01 48 5C |  if_ne	wrbyte	#0, local01
27b68     14 4E 05 F1 | 	add	fp, #20
27b6c     A7 1E 02 FB | 	rdlong	local01, fp
27b70     02 1E 66 F0 | 	shl	local01, #2
27b74     F2 1E 02 F1 | 	add	local01, objptr
27b78     10 4E 85 F1 | 	sub	fp, #16
27b7c     A7 16 02 FB | 	rdlong	arg03, fp
27b80     0F 17 62 FC | 	wrlong	arg03, local01
27b84     08 4E 05 F1 | 	add	fp, #8
27b88     A7 1E CA FA | 	rdbyte	local01, fp wz
27b8c     0C 4E 85 F1 | 	sub	fp, #12
27b90     00 FA 05 A6 |  if_e	mov	result1, #0
27b94     28 00 90 AD |  if_e	jmp	#LR__4071
27b98     08 4E 05 F1 | 	add	fp, #8
27b9c     A7 12 02 F6 | 	mov	arg01, fp
27ba0     04 4E 85 F1 | 	sub	fp, #4
27ba4     A7 14 02 F6 | 	mov	arg02, fp
27ba8     04 4E 85 F1 | 	sub	fp, #4
27bac     00 16 06 F6 | 	mov	arg03, #0
27bb0     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
27bb4     18 4E 05 F1 | 	add	fp, #24
27bb8     A7 FA 61 FC | 	wrlong	result1, fp
27bbc                 | ' 
27bbc                 | ' 	res = mount_volume(&path, &fs, 0);
27bbc                 | ' 	return res ;
27bbc     18 4E 85 F1 | 	sub	fp, #24
27bc0                 | LR__4071
27bc0     A7 F0 03 F6 | 	mov	ptra, fp
27bc4     B2 00 A0 FD | 	call	#popregs_
27bc8                 | _fatfs_cc_f_mount_ret
27bc8     2D 00 64 FD | 	ret
27bcc                 | 
27bcc                 | _fatfs_cc_f_open
27bcc     02 4A 05 F6 | 	mov	COUNT_, #2
27bd0     A8 00 A0 FD | 	call	#pushregs_
27bd4     60 F0 07 F1 | 	add	ptra, #96
27bd8     04 4E 05 F1 | 	add	fp, #4
27bdc     A7 12 62 FC | 	wrlong	arg01, fp
27be0     04 4E 05 F1 | 	add	fp, #4
27be4     A7 14 62 FC | 	wrlong	arg02, fp
27be8     04 4E 05 F1 | 	add	fp, #4
27bec     A7 16 42 FC | 	wrbyte	arg03, fp
27bf0     08 4E 85 F1 | 	sub	fp, #8
27bf4     A7 18 0A FB | 	rdlong	arg04, fp wz
27bf8     04 4E 85 F1 | 	sub	fp, #4
27bfc     09 FA 05 A6 |  if_e	mov	result1, #9
27c00     98 06 90 AD |  if_e	jmp	#LR__4097
27c04     0C 4E 05 F1 | 	add	fp, #12
27c08     A7 18 C2 FA | 	rdbyte	arg04, fp
27c0c     3F 18 06 F5 | 	and	arg04, #63
27c10     A7 18 42 FC | 	wrbyte	arg04, fp
27c14     04 4E 85 F1 | 	sub	fp, #4
27c18     A7 12 02 F6 | 	mov	arg01, fp
27c1c     3C 4E 05 F1 | 	add	fp, #60
27c20     A7 14 02 F6 | 	mov	arg02, fp
27c24     38 4E 85 F1 | 	sub	fp, #56
27c28     A7 16 C2 FA | 	rdbyte	arg03, fp
27c2c     0C 4E 85 F1 | 	sub	fp, #12
27c30     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
27c34     10 4E 05 F1 | 	add	fp, #16
27c38     A7 FA 61 FC | 	wrlong	result1, fp
27c3c     10 4E 85 F1 | 	sub	fp, #16
27c40     00 FA 0D F2 | 	cmp	result1, #0 wz
27c44     2C 06 90 5D |  if_ne	jmp	#LR__4096
27c48     44 4E 05 F1 | 	add	fp, #68
27c4c     A7 18 02 FB | 	rdlong	arg04, fp
27c50     30 4E 85 F1 | 	sub	fp, #48
27c54     A7 18 62 FC | 	wrlong	arg04, fp
27c58     A7 12 02 F6 | 	mov	arg01, fp
27c5c     0C 4E 85 F1 | 	sub	fp, #12
27c60     A7 1E 02 FB | 	rdlong	local01, fp
27c64     08 4E 85 F1 | 	sub	fp, #8
27c68     0F 15 02 F6 | 	mov	arg02, local01
27c6c     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
27c70     10 4E 05 F1 | 	add	fp, #16
27c74     A7 FA 61 FC | 	wrlong	result1, fp
27c78     10 4E 85 F1 | 	sub	fp, #16
27c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
27c80     1C 00 90 5D |  if_ne	jmp	#LR__4080
27c84     3F 4E 05 F1 | 	add	fp, #63
27c88     A7 18 C2 FA | 	rdbyte	arg04, fp
27c8c     3F 4E 85 F1 | 	sub	fp, #63
27c90     80 18 CE F7 | 	test	arg04, #128 wz
27c94     10 4E 05 51 |  if_ne	add	fp, #16
27c98     A7 0C 68 5C |  if_ne	wrlong	#6, fp
27c9c     10 4E 85 51 |  if_ne	sub	fp, #16
27ca0                 | LR__4080
27ca0     0C 4E 05 F1 | 	add	fp, #12
27ca4     A7 18 C2 FA | 	rdbyte	arg04, fp
27ca8     0C 4E 85 F1 | 	sub	fp, #12
27cac     1C 18 CE F7 | 	test	arg04, #28 wz
27cb0     F0 01 90 AD |  if_e	jmp	#LR__4085
27cb4     10 4E 05 F1 | 	add	fp, #16
27cb8     A7 1E 0A FB | 	rdlong	local01, fp wz
27cbc     10 4E 85 F1 | 	sub	fp, #16
27cc0     48 00 90 AD |  if_e	jmp	#LR__4082
27cc4     10 4E 05 F1 | 	add	fp, #16
27cc8     A7 18 02 FB | 	rdlong	arg04, fp
27ccc     10 4E 85 F1 | 	sub	fp, #16
27cd0     04 18 0E F2 | 	cmp	arg04, #4 wz
27cd4     1C 00 90 5D |  if_ne	jmp	#LR__4081
27cd8     14 4E 05 F1 | 	add	fp, #20
27cdc     A7 12 02 F6 | 	mov	arg01, fp
27ce0     14 4E 85 F1 | 	sub	fp, #20
27ce4     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
27ce8     10 4E 05 F1 | 	add	fp, #16
27cec     A7 FA 61 FC | 	wrlong	result1, fp
27cf0     10 4E 85 F1 | 	sub	fp, #16
27cf4                 | LR__4081
27cf4     0C 4E 05 F1 | 	add	fp, #12
27cf8     A7 1E C2 FA | 	rdbyte	local01, fp
27cfc     08 1E 46 F5 | 	or	local01, #8
27d00     A7 1E 42 FC | 	wrbyte	local01, fp
27d04     0C 4E 85 F1 | 	sub	fp, #12
27d08     3C 00 90 FD | 	jmp	#LR__4084
27d0c                 | LR__4082
27d0c     1A 4E 05 F1 | 	add	fp, #26
27d10     A7 1E C2 FA | 	rdbyte	local01, fp
27d14     1A 4E 85 F1 | 	sub	fp, #26
27d18     11 1E CE F7 | 	test	local01, #17 wz
27d1c     10 4E 05 51 |  if_ne	add	fp, #16
27d20     A7 0E 68 5C |  if_ne	wrlong	#7, fp
27d24     10 4E 85 51 |  if_ne	sub	fp, #16
27d28     1C 00 90 5D |  if_ne	jmp	#LR__4083
27d2c     0C 4E 05 F1 | 	add	fp, #12
27d30     A7 1E C2 FA | 	rdbyte	local01, fp
27d34     0C 4E 85 F1 | 	sub	fp, #12
27d38     04 1E CE F7 | 	test	local01, #4 wz
27d3c     10 4E 05 51 |  if_ne	add	fp, #16
27d40     A7 10 68 5C |  if_ne	wrlong	#8, fp
27d44     10 4E 85 51 |  if_ne	sub	fp, #16
27d48                 | LR__4083
27d48                 | LR__4084
27d48     10 4E 05 F1 | 	add	fp, #16
27d4c     A7 1E 0A FB | 	rdlong	local01, fp wz
27d50     10 4E 85 F1 | 	sub	fp, #16
27d54     A8 01 90 5D |  if_ne	jmp	#LR__4088
27d58     0C 4E 05 F1 | 	add	fp, #12
27d5c     A7 1E C2 FA | 	rdbyte	local01, fp
27d60     0C 4E 85 F1 | 	sub	fp, #12
27d64     08 1E CE F7 | 	test	local01, #8 wz
27d68     94 01 90 AD |  if_e	jmp	#LR__4088
27d6c     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
27d70     54 4E 05 F1 | 	add	fp, #84
27d74     A7 FA 61 FC | 	wrlong	result1, fp
27d78     24 4E 85 F1 | 	sub	fp, #36
27d7c     A7 12 02 FB | 	rdlong	arg01, fp
27d80     0E 12 06 F1 | 	add	arg01, #14
27d84     09 FB 61 FC | 	wrlong	result1, arg01
27d88     A7 12 02 FB | 	rdlong	arg01, fp
27d8c     16 12 06 F1 | 	add	arg01, #22
27d90     24 4E 05 F1 | 	add	fp, #36
27d94     A7 14 02 FB | 	rdlong	arg02, fp
27d98     09 15 62 FC | 	wrlong	arg02, arg01
27d9c     10 4E 85 F1 | 	sub	fp, #16
27da0     A7 12 02 FB | 	rdlong	arg01, fp
27da4     14 4E 85 F1 | 	sub	fp, #20
27da8     A7 14 02 FB | 	rdlong	arg02, fp
27dac     30 4E 85 F1 | 	sub	fp, #48
27db0     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
27db4     48 4E 05 F1 | 	add	fp, #72
27db8     A7 FA 61 FC | 	wrlong	result1, fp
27dbc     18 4E 85 F1 | 	sub	fp, #24
27dc0     A7 1E 02 FB | 	rdlong	local01, fp
27dc4     0B 1E 06 F1 | 	add	local01, #11
27dc8     0F 41 48 FC | 	wrbyte	#32, local01
27dcc     14 4E 05 F1 | 	add	fp, #20
27dd0     A7 12 02 FB | 	rdlong	arg01, fp
27dd4     14 4E 85 F1 | 	sub	fp, #20
27dd8     A7 14 02 FB | 	rdlong	arg02, fp
27ddc     30 4E 85 F1 | 	sub	fp, #48
27de0     00 16 06 F6 | 	mov	arg03, #0
27de4     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
27de8     30 4E 05 F1 | 	add	fp, #48
27dec     A7 12 02 FB | 	rdlong	arg01, fp
27df0     1C 12 06 F1 | 	add	arg01, #28
27df4     09 01 68 FC | 	wrlong	#0, arg01
27df8     14 4E 05 F1 | 	add	fp, #20
27dfc     A7 1E 02 FB | 	rdlong	local01, fp
27e00     03 1E 06 F1 | 	add	local01, #3
27e04     0F 03 48 FC | 	wrbyte	#1, local01
27e08     04 4E 05 F1 | 	add	fp, #4
27e0c     A7 1E 0A FB | 	rdlong	local01, fp wz
27e10     48 4E 85 F1 | 	sub	fp, #72
27e14     E8 00 90 AD |  if_e	jmp	#LR__4088
27e18     44 4E 05 F1 | 	add	fp, #68
27e1c     A7 1E 02 FB | 	rdlong	local01, fp
27e20     30 1E 06 F1 | 	add	local01, #48
27e24     0F 1F 02 FB | 	rdlong	local01, local01
27e28     14 4E 05 F1 | 	add	fp, #20
27e2c     A7 1E 62 FC | 	wrlong	local01, fp
27e30     44 4E 85 F1 | 	sub	fp, #68
27e34     A7 12 02 F6 | 	mov	arg01, fp
27e38     34 4E 05 F1 | 	add	fp, #52
27e3c     A7 14 02 FB | 	rdlong	arg02, fp
27e40     48 4E 85 F1 | 	sub	fp, #72
27e44     00 16 06 F6 | 	mov	arg03, #0
27e48     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
27e4c     10 4E 05 F1 | 	add	fp, #16
27e50     A7 FA 61 FC | 	wrlong	result1, fp
27e54     10 4E 85 F1 | 	sub	fp, #16
27e58     00 FA 0D F2 | 	cmp	result1, #0 wz
27e5c     A0 00 90 5D |  if_ne	jmp	#LR__4088
27e60     44 4E 05 F1 | 	add	fp, #68
27e64     A7 12 02 FB | 	rdlong	arg01, fp
27e68     14 4E 05 F1 | 	add	fp, #20
27e6c     A7 14 02 FB | 	rdlong	arg02, fp
27e70     58 4E 85 F1 | 	sub	fp, #88
27e74     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
27e78     10 4E 05 F1 | 	add	fp, #16
27e7c     A7 FA 61 FC | 	wrlong	result1, fp
27e80     34 4E 05 F1 | 	add	fp, #52
27e84     A7 18 02 FB | 	rdlong	arg04, fp
27e88     04 4E 05 F1 | 	add	fp, #4
27e8c     A7 1E 02 FB | 	rdlong	local01, fp
27e90     48 4E 85 F1 | 	sub	fp, #72
27e94     01 1E 86 F1 | 	sub	local01, #1
27e98     10 18 06 F1 | 	add	arg04, #16
27e9c     0C 1F 62 FC | 	wrlong	local01, arg04
27ea0     5C 00 90 FD | 	jmp	#LR__4088
27ea4                 | LR__4085
27ea4     10 4E 05 F1 | 	add	fp, #16
27ea8     A7 18 0A FB | 	rdlong	arg04, fp wz
27eac     10 4E 85 F1 | 	sub	fp, #16
27eb0     4C 00 90 5D |  if_ne	jmp	#LR__4087
27eb4     1A 4E 05 F1 | 	add	fp, #26
27eb8     A7 18 C2 FA | 	rdbyte	arg04, fp
27ebc     1A 4E 85 F1 | 	sub	fp, #26
27ec0     10 18 CE F7 | 	test	arg04, #16 wz
27ec4     10 4E 05 51 |  if_ne	add	fp, #16
27ec8     A7 08 68 5C |  if_ne	wrlong	#4, fp
27ecc     10 4E 85 51 |  if_ne	sub	fp, #16
27ed0     2C 00 90 5D |  if_ne	jmp	#LR__4086
27ed4     0C 4E 05 F1 | 	add	fp, #12
27ed8     A7 18 C2 FA | 	rdbyte	arg04, fp
27edc     0C 4E 85 F1 | 	sub	fp, #12
27ee0     02 18 CE F7 | 	test	arg04, #2 wz
27ee4     1A 4E 05 51 |  if_ne	add	fp, #26
27ee8     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
27eec     1A 4E 85 51 |  if_ne	sub	fp, #26
27ef0     01 1E CE 57 |  if_ne	test	local01, #1 wz
27ef4     10 4E 05 51 |  if_ne	add	fp, #16
27ef8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
27efc     10 4E 85 51 |  if_ne	sub	fp, #16
27f00                 | LR__4086
27f00                 | LR__4087
27f00                 | LR__4088
27f00     10 4E 05 F1 | 	add	fp, #16
27f04     A7 1E 0A FB | 	rdlong	local01, fp wz
27f08     10 4E 85 F1 | 	sub	fp, #16
27f0c     60 00 90 5D |  if_ne	jmp	#LR__4089
27f10     0C 4E 05 F1 | 	add	fp, #12
27f14     A7 20 C2 FA | 	rdbyte	local02, fp
27f18     0C 4E 85 F1 | 	sub	fp, #12
27f1c     08 20 CE F7 | 	test	local02, #8 wz
27f20     0C 4E 05 51 |  if_ne	add	fp, #12
27f24     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
27f28     40 20 46 55 |  if_ne	or	local02, #64
27f2c     A7 20 42 5C |  if_ne	wrbyte	local02, fp
27f30     0C 4E 85 51 |  if_ne	sub	fp, #12
27f34     04 4E 05 F1 | 	add	fp, #4
27f38     A7 20 02 FB | 	rdlong	local02, fp
27f3c     40 4E 05 F1 | 	add	fp, #64
27f40     A7 1E 02 FB | 	rdlong	local01, fp
27f44     30 1E 06 F1 | 	add	local01, #48
27f48     0F 1F 02 FB | 	rdlong	local01, local01
27f4c     20 20 06 F1 | 	add	local02, #32
27f50     10 1F 62 FC | 	wrlong	local01, local02
27f54     40 4E 85 F1 | 	sub	fp, #64
27f58     A7 20 02 FB | 	rdlong	local02, fp
27f5c     2C 4E 05 F1 | 	add	fp, #44
27f60     A7 1E 02 FB | 	rdlong	local01, fp
27f64     30 4E 85 F1 | 	sub	fp, #48
27f68     24 20 06 F1 | 	add	local02, #36
27f6c     10 1F 62 FC | 	wrlong	local01, local02
27f70                 | LR__4089
27f70     10 4E 05 F1 | 	add	fp, #16
27f74     A7 20 0A FB | 	rdlong	local02, fp wz
27f78     10 4E 85 F1 | 	sub	fp, #16
27f7c     F4 02 90 5D |  if_ne	jmp	#LR__4095
27f80     04 4E 05 F1 | 	add	fp, #4
27f84     A7 20 02 FB | 	rdlong	local02, fp
27f88     40 4E 05 F1 | 	add	fp, #64
27f8c     A7 12 02 FB | 	rdlong	arg01, fp
27f90     14 4E 85 F1 | 	sub	fp, #20
27f94     A7 14 02 FB | 	rdlong	arg02, fp
27f98     30 4E 85 F1 | 	sub	fp, #48
27f9c     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
27fa0     08 20 06 F1 | 	add	local02, #8
27fa4     10 FB 61 FC | 	wrlong	result1, local02
27fa8     04 4E 05 F1 | 	add	fp, #4
27fac     A7 20 02 FB | 	rdlong	local02, fp
27fb0     2C 4E 05 F1 | 	add	fp, #44
27fb4     A7 12 02 FB | 	rdlong	arg01, fp
27fb8     1C 12 06 F1 | 	add	arg01, #28
27fbc                 | ' {
27fbc                 | ' 
27fbc                 | ' 	return *((DWORD*)ptr);
27fbc     09 FB 01 FB | 	rdlong	result1, arg01
27fc0     0C 20 06 F1 | 	add	local02, #12
27fc4     10 FB 61 FC | 	wrlong	result1, local02
27fc8     2C 4E 85 F1 | 	sub	fp, #44
27fcc     A7 20 02 FB | 	rdlong	local02, fp
27fd0     40 4E 05 F1 | 	add	fp, #64
27fd4     A7 1E 02 FB | 	rdlong	local01, fp
27fd8     10 1F 62 FC | 	wrlong	local01, local02
27fdc     40 4E 85 F1 | 	sub	fp, #64
27fe0     A7 20 02 FB | 	rdlong	local02, fp
27fe4     40 4E 05 F1 | 	add	fp, #64
27fe8     A7 1E 02 FB | 	rdlong	local01, fp
27fec     06 1E 06 F1 | 	add	local01, #6
27ff0     0F 1F E2 FA | 	rdword	local01, local01
27ff4     04 20 06 F1 | 	add	local02, #4
27ff8     10 1F 52 FC | 	wrword	local01, local02
27ffc     40 4E 85 F1 | 	sub	fp, #64
28000     A7 20 02 FB | 	rdlong	local02, fp
28004     08 4E 05 F1 | 	add	fp, #8
28008     A7 1E C2 FA | 	rdbyte	local01, fp
2800c     10 20 06 F1 | 	add	local02, #16
28010     10 1F 42 FC | 	wrbyte	local01, local02
28014     08 4E 85 F1 | 	sub	fp, #8
28018     A7 20 02 FB | 	rdlong	local02, fp
2801c     11 20 06 F1 | 	add	local02, #17
28020     10 01 48 FC | 	wrbyte	#0, local02
28024     A7 20 02 FB | 	rdlong	local02, fp
28028     1C 20 06 F1 | 	add	local02, #28
2802c     10 01 68 FC | 	wrlong	#0, local02
28030     A7 20 02 FB | 	rdlong	local02, fp
28034     14 20 06 F1 | 	add	local02, #20
28038     10 01 68 FC | 	wrlong	#0, local02
2803c     A7 12 02 FB | 	rdlong	arg01, fp
28040     04 4E 85 F1 | 	sub	fp, #4
28044     28 12 06 F1 | 	add	arg01, #40
28048     00 14 06 F6 | 	mov	arg02, #0
2804c     09 16 C6 F9 | 	decod	arg03, #9
28050     98 00 A0 FD | 	call	#\builtin_bytefill_
28054     0C 4E 05 F1 | 	add	fp, #12
28058     A7 20 C2 FA | 	rdbyte	local02, fp
2805c     0C 4E 85 F1 | 	sub	fp, #12
28060     20 20 CE F7 | 	test	local02, #32 wz
28064     0C 02 90 AD |  if_e	jmp	#LR__4094
28068     04 4E 05 F1 | 	add	fp, #4
2806c     A7 1E 02 FB | 	rdlong	local01, fp
28070     04 4E 85 F1 | 	sub	fp, #4
28074     0C 1E 06 F1 | 	add	local01, #12
28078     0F 21 02 FB | 	rdlong	local02, local01
2807c     01 20 16 F2 | 	cmp	local02, #1 wc
28080     F0 01 90 CD |  if_b	jmp	#LR__4094
28084     04 4E 05 F1 | 	add	fp, #4
28088     A7 1E 02 FB | 	rdlong	local01, fp
2808c     0F 21 02 F6 | 	mov	local02, local01
28090     0C 1E 06 F1 | 	add	local01, #12
28094     0F 1F 02 FB | 	rdlong	local01, local01
28098     14 20 06 F1 | 	add	local02, #20
2809c     10 1F 62 FC | 	wrlong	local01, local02
280a0     40 4E 05 F1 | 	add	fp, #64
280a4     A7 20 02 FB | 	rdlong	local02, fp
280a8     0A 20 06 F1 | 	add	local02, #10
280ac     10 21 E2 FA | 	rdword	local02, local02
280b0     09 20 66 F0 | 	shl	local02, #9
280b4     08 4E 05 F1 | 	add	fp, #8
280b8     A7 20 62 FC | 	wrlong	local02, fp
280bc     48 4E 85 F1 | 	sub	fp, #72
280c0     A7 20 02 FB | 	rdlong	local02, fp
280c4     08 20 06 F1 | 	add	local02, #8
280c8     10 1F 02 FB | 	rdlong	local01, local02
280cc     4C 4E 05 F1 | 	add	fp, #76
280d0     A7 1E 62 FC | 	wrlong	local01, fp
280d4                 | ' 				fp->fptr = fp->obj.objsize;
280d4                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
280d4                 | ' 				clst = fp->obj.sclust;
280d4                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
280d4     4C 4E 85 F1 | 	sub	fp, #76
280d8     A7 20 02 FB | 	rdlong	local02, fp
280dc     0C 20 06 F1 | 	add	local02, #12
280e0     10 1F 02 FB | 	rdlong	local01, local02
280e4     58 4E 05 F1 | 	add	fp, #88
280e8     A7 1E 62 FC | 	wrlong	local01, fp
280ec     5C 4E 85 F1 | 	sub	fp, #92
280f0                 | LR__4090
280f0     10 4E 05 F1 | 	add	fp, #16
280f4     A7 20 0A FB | 	rdlong	local02, fp wz
280f8     10 4E 85 F1 | 	sub	fp, #16
280fc     94 00 90 5D |  if_ne	jmp	#LR__4091
28100     5C 4E 05 F1 | 	add	fp, #92
28104     A7 20 02 FB | 	rdlong	local02, fp
28108     10 4E 85 F1 | 	sub	fp, #16
2810c     A7 1E 02 FB | 	rdlong	local01, fp
28110     4C 4E 85 F1 | 	sub	fp, #76
28114     0F 21 1A F2 | 	cmp	local02, local01 wcz
28118     78 00 90 ED |  if_be	jmp	#LR__4091
2811c     04 4E 05 F1 | 	add	fp, #4
28120     A7 12 02 FB | 	rdlong	arg01, fp
28124     4C 4E 05 F1 | 	add	fp, #76
28128     A7 14 02 FB | 	rdlong	arg02, fp
2812c     50 4E 85 F1 | 	sub	fp, #80
28130     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
28134     50 4E 05 F1 | 	add	fp, #80
28138     A7 FA 61 FC | 	wrlong	result1, fp
2813c     50 4E 85 F1 | 	sub	fp, #80
28140     02 FA 15 F2 | 	cmp	result1, #2 wc
28144     10 4E 05 C1 |  if_b	add	fp, #16
28148     A7 04 68 CC |  if_b	wrlong	#2, fp
2814c     10 4E 85 C1 |  if_b	sub	fp, #16
28150     50 4E 05 F1 | 	add	fp, #80
28154     A7 20 02 FB | 	rdlong	local02, fp
28158     50 4E 85 F1 | 	sub	fp, #80
2815c     FF FF 7F FF 
28160     FF 21 0E F2 | 	cmp	local02, ##-1 wz
28164     10 4E 05 A1 |  if_e	add	fp, #16
28168     A7 02 68 AC |  if_e	wrlong	#1, fp
2816c     10 4E 85 A1 |  if_e	sub	fp, #16
28170     5C 4E 05 F1 | 	add	fp, #92
28174     A7 20 02 FB | 	rdlong	local02, fp
28178     10 4E 85 F1 | 	sub	fp, #16
2817c     A7 1E 02 FB | 	rdlong	local01, fp
28180     0F 21 82 F1 | 	sub	local02, local01
28184     10 4E 05 F1 | 	add	fp, #16
28188     A7 20 62 FC | 	wrlong	local02, fp
2818c     5C 4E 85 F1 | 	sub	fp, #92
28190     5C FF 9F FD | 	jmp	#LR__4090
28194                 | LR__4091
28194     04 4E 05 F1 | 	add	fp, #4
28198     A7 20 02 FB | 	rdlong	local02, fp
2819c     4C 4E 05 F1 | 	add	fp, #76
281a0     A7 1E 02 FB | 	rdlong	local01, fp
281a4     18 20 06 F1 | 	add	local02, #24
281a8     10 1F 62 FC | 	wrlong	local01, local02
281ac     40 4E 85 F1 | 	sub	fp, #64
281b0     A7 20 0A FB | 	rdlong	local02, fp wz
281b4     10 4E 85 F1 | 	sub	fp, #16
281b8     B8 00 90 5D |  if_ne	jmp	#LR__4093
281bc     5C 4E 05 F1 | 	add	fp, #92
281c0     A7 1E 02 FB | 	rdlong	local01, fp
281c4     5C 4E 85 F1 | 	sub	fp, #92
281c8     FF 1F CE F7 | 	test	local01, #511 wz
281cc     A4 00 90 AD |  if_e	jmp	#LR__4093
281d0     44 4E 05 F1 | 	add	fp, #68
281d4     A7 12 02 FB | 	rdlong	arg01, fp
281d8     0C 4E 05 F1 | 	add	fp, #12
281dc     A7 14 02 FB | 	rdlong	arg02, fp
281e0     50 4E 85 F1 | 	sub	fp, #80
281e4     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
281e8     58 4E 05 F1 | 	add	fp, #88
281ec     A7 FA 61 FC | 	wrlong	result1, fp
281f0     00 FA 4D F2 | 	cmps	result1, #0 wz
281f4     58 4E 85 F1 | 	sub	fp, #88
281f8     10 4E 05 A1 |  if_e	add	fp, #16
281fc     A7 04 68 AC |  if_e	wrlong	#2, fp
28200     10 4E 85 A1 |  if_e	sub	fp, #16
28204     6C 00 90 AD |  if_e	jmp	#LR__4092
28208     04 4E 05 F1 | 	add	fp, #4
2820c     A7 20 02 FB | 	rdlong	local02, fp
28210     54 4E 05 F1 | 	add	fp, #84
28214     A7 1E 02 FB | 	rdlong	local01, fp
28218     04 4E 05 F1 | 	add	fp, #4
2821c     A7 18 02 FB | 	rdlong	arg04, fp
28220     09 18 46 F0 | 	shr	arg04, #9
28224     0C 1F 02 F1 | 	add	local01, arg04
28228     1C 20 06 F1 | 	add	local02, #28
2822c     10 1F 62 FC | 	wrlong	local01, local02
28230     18 4E 85 F1 | 	sub	fp, #24
28234     A7 20 02 FB | 	rdlong	local02, fp
28238     01 20 06 F1 | 	add	local02, #1
2823c     10 13 C2 FA | 	rdbyte	arg01, local02
28240     40 4E 85 F1 | 	sub	fp, #64
28244     A7 20 02 FB | 	rdlong	local02, fp
28248     10 15 02 F6 | 	mov	arg02, local02
2824c     28 14 06 F1 | 	add	arg02, #40
28250     04 4E 85 F1 | 	sub	fp, #4
28254     1C 20 06 F1 | 	add	local02, #28
28258     10 17 02 FB | 	rdlong	arg03, local02
2825c     01 18 06 F6 | 	mov	arg04, #1
28260     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
28264     00 FA 0D F2 | 	cmp	result1, #0 wz
28268     10 4E 05 51 |  if_ne	add	fp, #16
2826c     A7 02 68 5C |  if_ne	wrlong	#1, fp
28270     10 4E 85 51 |  if_ne	sub	fp, #16
28274                 | LR__4092
28274                 | LR__4093
28274                 | LR__4094
28274                 | LR__4095
28274                 | LR__4096
28274     10 4E 05 F1 | 	add	fp, #16
28278     A7 20 0A FB | 	rdlong	local02, fp wz
2827c     10 4E 85 F1 | 	sub	fp, #16
28280     04 4E 05 51 |  if_ne	add	fp, #4
28284     A7 20 02 5B |  if_ne	rdlong	local02, fp
28288     04 4E 85 51 |  if_ne	sub	fp, #4
2828c     10 01 68 5C |  if_ne	wrlong	#0, local02
28290                 | ' 
28290                 | ' 	return res ;
28290     10 4E 05 F1 | 	add	fp, #16
28294     A7 FA 01 FB | 	rdlong	result1, fp
28298     10 4E 85 F1 | 	sub	fp, #16
2829c                 | LR__4097
2829c     A7 F0 03 F6 | 	mov	ptra, fp
282a0     B2 00 A0 FD | 	call	#popregs_
282a4                 | _fatfs_cc_f_open_ret
282a4     2D 00 64 FD | 	ret
282a8                 | 
282a8                 | _fatfs_cc_f_read
282a8     0E 4A 05 F6 | 	mov	COUNT_, #14
282ac     A8 00 A0 FD | 	call	#pushregs_
282b0     38 F0 07 F1 | 	add	ptra, #56
282b4     04 4E 05 F1 | 	add	fp, #4
282b8     A7 12 62 FC | 	wrlong	arg01, fp
282bc     04 4E 05 F1 | 	add	fp, #4
282c0     A7 14 62 FC | 	wrlong	arg02, fp
282c4     04 4E 05 F1 | 	add	fp, #4
282c8     A7 16 62 FC | 	wrlong	arg03, fp
282cc     04 4E 05 F1 | 	add	fp, #4
282d0     A7 18 62 FC | 	wrlong	arg04, fp
282d4     08 4E 85 F1 | 	sub	fp, #8
282d8     A7 FA 01 FB | 	rdlong	result1, fp
282dc     2C 4E 05 F1 | 	add	fp, #44
282e0     A7 FA 61 FC | 	wrlong	result1, fp
282e4     24 4E 85 F1 | 	sub	fp, #36
282e8     A7 FA 01 FB | 	rdlong	result1, fp
282ec     FD 00 68 FC | 	wrlong	#0, result1
282f0     0C 4E 85 F1 | 	sub	fp, #12
282f4     A7 12 02 FB | 	rdlong	arg01, fp
282f8     14 4E 05 F1 | 	add	fp, #20
282fc     A7 14 02 F6 | 	mov	arg02, fp
28300     18 4E 85 F1 | 	sub	fp, #24
28304     24 F7 BF FD | 	call	#_fatfs_cc_validate
28308     14 4E 05 F1 | 	add	fp, #20
2830c     A7 FA 61 FC | 	wrlong	result1, fp
28310     00 FA 4D F2 | 	cmps	result1, #0 wz
28314     14 4E 85 F1 | 	sub	fp, #20
28318     20 00 90 5D |  if_ne	jmp	#LR__4100
2831c     04 4E 05 F1 | 	add	fp, #4
28320     A7 14 02 FB | 	rdlong	arg02, fp
28324     11 14 06 F1 | 	add	arg02, #17
28328     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2832c     10 4E 05 F1 | 	add	fp, #16
28330     A7 14 62 FC | 	wrlong	arg02, fp
28334     14 4E 85 F1 | 	sub	fp, #20
28338     10 00 90 AD |  if_e	jmp	#LR__4101
2833c                 | LR__4100
2833c     14 4E 05 F1 | 	add	fp, #20
28340     A7 FA 01 FB | 	rdlong	result1, fp
28344     14 4E 85 F1 | 	sub	fp, #20
28348     EC 05 90 FD | 	jmp	#LR__4120
2834c                 | LR__4101
2834c     04 4E 05 F1 | 	add	fp, #4
28350     A7 18 02 FB | 	rdlong	arg04, fp
28354     04 4E 85 F1 | 	sub	fp, #4
28358     10 18 06 F1 | 	add	arg04, #16
2835c     0C 19 C2 FA | 	rdbyte	arg04, arg04
28360     01 18 CE F7 | 	test	arg04, #1 wz
28364     07 FA 05 A6 |  if_e	mov	result1, #7
28368     CC 05 90 AD |  if_e	jmp	#LR__4120
2836c     04 4E 05 F1 | 	add	fp, #4
28370     A7 1E 02 FB | 	rdlong	local01, fp
28374     0F 21 02 F6 | 	mov	local02, local01
28378     0C 20 06 F1 | 	add	local02, #12
2837c     10 23 02 FB | 	rdlong	local03, local02
28380     14 1E 06 F1 | 	add	local01, #20
28384     0F 1F 02 FB | 	rdlong	local01, local01
28388     0F 23 82 F1 | 	sub	local03, local01
2838c     20 4E 05 F1 | 	add	fp, #32
28390     A7 22 62 FC | 	wrlong	local03, fp
28394     18 4E 85 F1 | 	sub	fp, #24
28398     A7 24 02 FB | 	rdlong	local04, fp
2839c     0C 4E 85 F1 | 	sub	fp, #12
283a0     11 25 1A F2 | 	cmp	local04, local03 wcz
283a4     24 4E 05 11 |  if_a	add	fp, #36
283a8     A7 24 02 1B |  if_a	rdlong	local04, fp
283ac     18 4E 85 11 |  if_a	sub	fp, #24
283b0     A7 24 62 1C |  if_a	wrlong	local04, fp
283b4     0C 4E 85 11 |  if_a	sub	fp, #12
283b8                 | ' 
283b8                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
283b8                 | LR__4102
283b8     0C 4E 05 F1 | 	add	fp, #12
283bc     A7 20 02 FB | 	rdlong	local02, fp
283c0     0C 4E 85 F1 | 	sub	fp, #12
283c4     10 25 02 F6 | 	mov	local04, local02
283c8     01 24 16 F2 | 	cmp	local04, #1 wc
283cc     64 05 90 CD |  if_b	jmp	#LR__4119
283d0     04 4E 05 F1 | 	add	fp, #4
283d4     A7 22 02 FB | 	rdlong	local03, fp
283d8     04 4E 85 F1 | 	sub	fp, #4
283dc     14 22 06 F1 | 	add	local03, #20
283e0     11 23 02 FB | 	rdlong	local03, local03
283e4     FF 23 CE F7 | 	test	local03, #511 wz
283e8     3C 04 90 5D |  if_ne	jmp	#LR__4117
283ec     04 4E 05 F1 | 	add	fp, #4
283f0     A7 1E 02 FB | 	rdlong	local01, fp
283f4     14 1E 06 F1 | 	add	local01, #20
283f8     0F 23 02 FB | 	rdlong	local03, local01
283fc     09 22 46 F0 | 	shr	local03, #9
28400     14 4E 05 F1 | 	add	fp, #20
28404     A7 26 02 FB | 	rdlong	local05, fp
28408     13 29 02 F6 | 	mov	local06, local05
2840c     0A 28 06 F1 | 	add	local06, #10
28410     14 2B E2 FA | 	rdword	local07, local06
28414     0A 28 86 F1 | 	sub	local06, #10
28418     15 2D 32 F9 | 	getword	local08, local07, #0
2841c     01 2C 86 F1 | 	sub	local08, #1
28420     16 23 0A F5 | 	and	local03, local08 wz
28424     18 4E 05 F1 | 	add	fp, #24
28428     A7 22 62 FC | 	wrlong	local03, fp
2842c     30 4E 85 F1 | 	sub	fp, #48
28430     E0 00 90 5D |  if_ne	jmp	#LR__4107
28434     04 4E 05 F1 | 	add	fp, #4
28438     A7 22 02 FB | 	rdlong	local03, fp
2843c     04 4E 85 F1 | 	sub	fp, #4
28440     14 22 06 F1 | 	add	local03, #20
28444     11 23 0A FB | 	rdlong	local03, local03 wz
28448     20 00 90 5D |  if_ne	jmp	#LR__4103
2844c     04 4E 05 F1 | 	add	fp, #4
28450     A7 22 02 FB | 	rdlong	local03, fp
28454     08 22 06 F1 | 	add	local03, #8
28458     11 23 02 FB | 	rdlong	local03, local03
2845c     18 4E 05 F1 | 	add	fp, #24
28460     A7 22 62 FC | 	wrlong	local03, fp
28464     1C 4E 85 F1 | 	sub	fp, #28
28468     28 00 90 FD | 	jmp	#LR__4104
2846c                 | LR__4103
2846c     04 4E 05 F1 | 	add	fp, #4
28470     A7 2C 02 FB | 	rdlong	local08, fp
28474     16 13 02 F6 | 	mov	arg01, local08
28478     04 4E 85 F1 | 	sub	fp, #4
2847c     18 2C 06 F1 | 	add	local08, #24
28480     16 15 02 FB | 	rdlong	arg02, local08
28484     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
28488     1C 4E 05 F1 | 	add	fp, #28
2848c     A7 FA 61 FC | 	wrlong	result1, fp
28490     1C 4E 85 F1 | 	sub	fp, #28
28494                 | LR__4104
28494     1C 4E 05 F1 | 	add	fp, #28
28498     A7 22 02 FB | 	rdlong	local03, fp
2849c     1C 4E 85 F1 | 	sub	fp, #28
284a0     02 22 16 F2 | 	cmp	local03, #2 wc
284a4     1C 00 90 3D |  if_ae	jmp	#LR__4105
284a8     04 4E 05 F1 | 	add	fp, #4
284ac     A7 22 02 FB | 	rdlong	local03, fp
284b0     04 4E 85 F1 | 	sub	fp, #4
284b4     11 22 06 F1 | 	add	local03, #17
284b8     11 05 48 FC | 	wrbyte	#2, local03
284bc     02 FA 05 F6 | 	mov	result1, #2
284c0     74 04 90 FD | 	jmp	#LR__4120
284c4                 | LR__4105
284c4     1C 4E 05 F1 | 	add	fp, #28
284c8     A7 22 02 FB | 	rdlong	local03, fp
284cc     1C 4E 85 F1 | 	sub	fp, #28
284d0     FF FF 7F FF 
284d4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
284d8     1C 00 90 5D |  if_ne	jmp	#LR__4106
284dc     04 4E 05 F1 | 	add	fp, #4
284e0     A7 22 02 FB | 	rdlong	local03, fp
284e4     04 4E 85 F1 | 	sub	fp, #4
284e8     11 22 06 F1 | 	add	local03, #17
284ec     11 03 48 FC | 	wrbyte	#1, local03
284f0     01 FA 05 F6 | 	mov	result1, #1
284f4     40 04 90 FD | 	jmp	#LR__4120
284f8                 | LR__4106
284f8     04 4E 05 F1 | 	add	fp, #4
284fc     A7 22 02 FB | 	rdlong	local03, fp
28500     18 4E 05 F1 | 	add	fp, #24
28504     A7 2C 02 FB | 	rdlong	local08, fp
28508     1C 4E 85 F1 | 	sub	fp, #28
2850c     18 22 06 F1 | 	add	local03, #24
28510     11 2D 62 FC | 	wrlong	local08, local03
28514                 | LR__4107
28514     18 4E 05 F1 | 	add	fp, #24
28518     A7 12 02 FB | 	rdlong	arg01, fp
2851c     14 4E 85 F1 | 	sub	fp, #20
28520     A7 22 02 FB | 	rdlong	local03, fp
28524     04 4E 85 F1 | 	sub	fp, #4
28528     18 22 06 F1 | 	add	local03, #24
2852c     11 15 02 FB | 	rdlong	arg02, local03
28530     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
28534     20 4E 05 F1 | 	add	fp, #32
28538     A7 FA 61 FC | 	wrlong	result1, fp
2853c     20 4E 85 F1 | 	sub	fp, #32
28540     00 FA 0D F2 | 	cmp	result1, #0 wz
28544     1C 00 90 5D |  if_ne	jmp	#LR__4108
28548     04 4E 05 F1 | 	add	fp, #4
2854c     A7 22 02 FB | 	rdlong	local03, fp
28550     04 4E 85 F1 | 	sub	fp, #4
28554     11 22 06 F1 | 	add	local03, #17
28558     11 05 48 FC | 	wrbyte	#2, local03
2855c     02 FA 05 F6 | 	mov	result1, #2
28560     D4 03 90 FD | 	jmp	#LR__4120
28564                 | LR__4108
28564     20 4E 05 F1 | 	add	fp, #32
28568     A7 22 02 FB | 	rdlong	local03, fp
2856c     10 4E 05 F1 | 	add	fp, #16
28570     A7 2C 02 FB | 	rdlong	local08, fp
28574     16 23 02 F1 | 	add	local03, local08
28578     10 4E 85 F1 | 	sub	fp, #16
2857c     A7 22 62 FC | 	wrlong	local03, fp
28580     14 4E 85 F1 | 	sub	fp, #20
28584     A7 22 02 FB | 	rdlong	local03, fp
28588     09 22 46 F0 | 	shr	local03, #9
2858c     20 4E 05 F1 | 	add	fp, #32
28590     A7 22 62 FC | 	wrlong	local03, fp
28594     2C 4E 85 F1 | 	sub	fp, #44
28598     01 22 16 F2 | 	cmp	local03, #1 wc
2859c     5C 01 90 CD |  if_b	jmp	#LR__4112
285a0     30 4E 05 F1 | 	add	fp, #48
285a4     A7 22 02 FB | 	rdlong	local03, fp
285a8     04 4E 85 F1 | 	sub	fp, #4
285ac     A7 2C 02 FB | 	rdlong	local08, fp
285b0     16 23 02 F1 | 	add	local03, local08
285b4     14 4E 85 F1 | 	sub	fp, #20
285b8     A7 2C 02 FB | 	rdlong	local08, fp
285bc     18 4E 85 F1 | 	sub	fp, #24
285c0     0A 2C 06 F1 | 	add	local08, #10
285c4     16 2D E2 FA | 	rdword	local08, local08
285c8     16 23 1A F2 | 	cmp	local03, local08 wcz
285cc     28 00 90 ED |  if_be	jmp	#LR__4109
285d0     18 4E 05 F1 | 	add	fp, #24
285d4     A7 1E 02 FB | 	rdlong	local01, fp
285d8     0A 1E 06 F1 | 	add	local01, #10
285dc     0F 23 E2 FA | 	rdword	local03, local01
285e0     18 4E 05 F1 | 	add	fp, #24
285e4     A7 2C 02 FB | 	rdlong	local08, fp
285e8     16 23 82 F1 | 	sub	local03, local08
285ec     04 4E 85 F1 | 	sub	fp, #4
285f0     A7 22 62 FC | 	wrlong	local03, fp
285f4     2C 4E 85 F1 | 	sub	fp, #44
285f8                 | LR__4109
285f8     18 4E 05 F1 | 	add	fp, #24
285fc     A7 1E 02 FB | 	rdlong	local01, fp
28600     01 1E 06 F1 | 	add	local01, #1
28604     0F 13 C2 FA | 	rdbyte	arg01, local01
28608     1C 4E 05 F1 | 	add	fp, #28
2860c     A7 14 02 FB | 	rdlong	arg02, fp
28610     14 4E 85 F1 | 	sub	fp, #20
28614     A7 16 02 FB | 	rdlong	arg03, fp
28618     0C 4E 05 F1 | 	add	fp, #12
2861c     A7 18 02 FB | 	rdlong	arg04, fp
28620     2C 4E 85 F1 | 	sub	fp, #44
28624     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
28628     00 FA 0D F2 | 	cmp	result1, #0 wz
2862c     1C 00 90 AD |  if_e	jmp	#LR__4110
28630     04 4E 05 F1 | 	add	fp, #4
28634     A7 22 02 FB | 	rdlong	local03, fp
28638     04 4E 85 F1 | 	sub	fp, #4
2863c     11 22 06 F1 | 	add	local03, #17
28640     11 03 48 FC | 	wrbyte	#1, local03
28644     01 FA 05 F6 | 	mov	result1, #1
28648     EC 02 90 FD | 	jmp	#LR__4120
2864c                 | LR__4110
2864c     04 4E 05 F1 | 	add	fp, #4
28650     A7 1E 02 FB | 	rdlong	local01, fp
28654     04 4E 85 F1 | 	sub	fp, #4
28658     10 1E 06 F1 | 	add	local01, #16
2865c     0F 23 C2 FA | 	rdbyte	local03, local01
28660     80 22 CE F7 | 	test	local03, #128 wz
28664     78 00 90 AD |  if_e	jmp	#LR__4111
28668     04 4E 05 F1 | 	add	fp, #4
2866c     A7 2C 02 FB | 	rdlong	local08, fp
28670     1C 2C 06 F1 | 	add	local08, #28
28674     16 2D 02 FB | 	rdlong	local08, local08
28678     1C 4E 05 F1 | 	add	fp, #28
2867c     A7 2E 02 FB | 	rdlong	local09, fp
28680     17 2D 82 F1 | 	sub	local08, local09
28684     0C 4E 05 F1 | 	add	fp, #12
28688     A7 30 02 FB | 	rdlong	local10, fp
2868c     2C 4E 85 F1 | 	sub	fp, #44
28690     18 33 02 F6 | 	mov	local11, local10
28694     19 2D 12 F2 | 	cmp	local08, local11 wc
28698     44 00 90 3D |  if_ae	jmp	#LR__4111
2869c     34 4E 05 F1 | 	add	fp, #52
286a0     A7 12 02 FB | 	rdlong	arg01, fp
286a4     30 4E 85 F1 | 	sub	fp, #48
286a8     A7 14 02 FB | 	rdlong	arg02, fp
286ac     0A 33 02 F6 | 	mov	local11, arg02
286b0     1C 32 06 F1 | 	add	local11, #28
286b4     19 2F 02 FB | 	rdlong	local09, local11
286b8     1C 4E 05 F1 | 	add	fp, #28
286bc     A7 26 02 FB | 	rdlong	local05, fp
286c0     13 2F 82 F1 | 	sub	local09, local05
286c4     09 2E 66 F0 | 	shl	local09, #9
286c8     17 33 02 F6 | 	mov	local11, local09
286cc     17 13 02 F1 | 	add	arg01, local09
286d0     20 4E 85 F1 | 	sub	fp, #32
286d4     28 14 06 F1 | 	add	arg02, #40
286d8     09 16 C6 F9 | 	decod	arg03, #9
286dc     C4 48 BF FD | 	call	#__system____builtin_memmove
286e0                 | LR__4111
286e0     2C 4E 05 F1 | 	add	fp, #44
286e4     A7 22 02 FB | 	rdlong	local03, fp
286e8     09 22 66 F0 | 	shl	local03, #9
286ec     04 4E 85 F1 | 	sub	fp, #4
286f0     A7 22 62 FC | 	wrlong	local03, fp
286f4     28 4E 85 F1 | 	sub	fp, #40
286f8                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
286f8                 | ' 				}
286f8                 | ' 
286f8                 | ' 
286f8                 | ' 				rcnt =  ((UINT) 512 )  * cc;
286f8                 | ' 				continue;
286f8     B4 01 90 FD | 	jmp	#LR__4118
286fc                 | LR__4112
286fc     04 4E 05 F1 | 	add	fp, #4
28700     A7 22 02 FB | 	rdlong	local03, fp
28704     1C 22 06 F1 | 	add	local03, #28
28708     11 23 02 FB | 	rdlong	local03, local03
2870c     1C 4E 05 F1 | 	add	fp, #28
28710     A7 1E 02 FB | 	rdlong	local01, fp
28714     20 4E 85 F1 | 	sub	fp, #32
28718     0F 23 0A F2 | 	cmp	local03, local01 wz
2871c     EC 00 90 AD |  if_e	jmp	#LR__4116
28720     04 4E 05 F1 | 	add	fp, #4
28724     A7 1E 02 FB | 	rdlong	local01, fp
28728     04 4E 85 F1 | 	sub	fp, #4
2872c     10 1E 06 F1 | 	add	local01, #16
28730     0F 23 C2 FA | 	rdbyte	local03, local01
28734     80 22 CE F7 | 	test	local03, #128 wz
28738     7C 00 90 AD |  if_e	jmp	#LR__4114
2873c     18 4E 05 F1 | 	add	fp, #24
28740     A7 1E 02 FB | 	rdlong	local01, fp
28744     01 1E 06 F1 | 	add	local01, #1
28748     0F 13 C2 FA | 	rdbyte	arg01, local01
2874c     14 4E 85 F1 | 	sub	fp, #20
28750     A7 22 02 FB | 	rdlong	local03, fp
28754     11 15 02 F6 | 	mov	arg02, local03
28758     28 14 06 F1 | 	add	arg02, #40
2875c     04 4E 85 F1 | 	sub	fp, #4
28760     1C 22 06 F1 | 	add	local03, #28
28764     11 17 02 FB | 	rdlong	arg03, local03
28768     01 18 06 F6 | 	mov	arg04, #1
2876c     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
28770     00 FA 0D F2 | 	cmp	result1, #0 wz
28774     1C 00 90 AD |  if_e	jmp	#LR__4113
28778     04 4E 05 F1 | 	add	fp, #4
2877c     A7 22 02 FB | 	rdlong	local03, fp
28780     04 4E 85 F1 | 	sub	fp, #4
28784     11 22 06 F1 | 	add	local03, #17
28788     11 03 48 FC | 	wrbyte	#1, local03
2878c     01 FA 05 F6 | 	mov	result1, #1
28790     A4 01 90 FD | 	jmp	#LR__4120
28794                 | LR__4113
28794     04 4E 05 F1 | 	add	fp, #4
28798     A7 32 02 FB | 	rdlong	local11, fp
2879c     19 23 02 F6 | 	mov	local03, local11
287a0     04 4E 85 F1 | 	sub	fp, #4
287a4     10 32 06 F1 | 	add	local11, #16
287a8     19 33 C2 FA | 	rdbyte	local11, local11
287ac     7F 32 06 F5 | 	and	local11, #127
287b0     10 22 06 F1 | 	add	local03, #16
287b4     11 33 42 FC | 	wrbyte	local11, local03
287b8                 | LR__4114
287b8     18 4E 05 F1 | 	add	fp, #24
287bc     A7 1E 02 FB | 	rdlong	local01, fp
287c0     01 1E 06 F1 | 	add	local01, #1
287c4     0F 13 C2 FA | 	rdbyte	arg01, local01
287c8     14 4E 85 F1 | 	sub	fp, #20
287cc     A7 14 02 FB | 	rdlong	arg02, fp
287d0     28 14 06 F1 | 	add	arg02, #40
287d4     1C 4E 05 F1 | 	add	fp, #28
287d8     A7 16 02 FB | 	rdlong	arg03, fp
287dc     20 4E 85 F1 | 	sub	fp, #32
287e0     01 18 06 F6 | 	mov	arg04, #1
287e4     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
287e8     00 FA 0D F2 | 	cmp	result1, #0 wz
287ec     1C 00 90 AD |  if_e	jmp	#LR__4115
287f0     04 4E 05 F1 | 	add	fp, #4
287f4     A7 22 02 FB | 	rdlong	local03, fp
287f8     04 4E 85 F1 | 	sub	fp, #4
287fc     11 22 06 F1 | 	add	local03, #17
28800     11 03 48 FC | 	wrbyte	#1, local03
28804     01 FA 05 F6 | 	mov	result1, #1
28808     2C 01 90 FD | 	jmp	#LR__4120
2880c                 | LR__4115
2880c                 | LR__4116
2880c     04 4E 05 F1 | 	add	fp, #4
28810     A7 22 02 FB | 	rdlong	local03, fp
28814     1C 4E 05 F1 | 	add	fp, #28
28818     A7 32 02 FB | 	rdlong	local11, fp
2881c     20 4E 85 F1 | 	sub	fp, #32
28820     1C 22 06 F1 | 	add	local03, #28
28824     11 33 62 FC | 	wrlong	local11, local03
28828                 | LR__4117
28828     04 4E 05 F1 | 	add	fp, #4
2882c     A7 1E 02 FB | 	rdlong	local01, fp
28830     14 1E 06 F1 | 	add	local01, #20
28834     0F 33 02 FB | 	rdlong	local11, local01
28838     FF 33 06 F5 | 	and	local11, #511
2883c     09 22 C6 F9 | 	decod	local03, #9
28840     19 23 82 F1 | 	sub	local03, local11
28844     24 4E 05 F1 | 	add	fp, #36
28848     A7 22 62 FC | 	wrlong	local03, fp
2884c     1C 4E 85 F1 | 	sub	fp, #28
28850     A7 32 02 FB | 	rdlong	local11, fp
28854     0C 4E 85 F1 | 	sub	fp, #12
28858     19 23 1A F2 | 	cmp	local03, local11 wcz
2885c     0C 4E 05 11 |  if_a	add	fp, #12
28860     A7 22 02 1B |  if_a	rdlong	local03, fp
28864     1C 4E 05 11 |  if_a	add	fp, #28
28868     A7 22 62 1C |  if_a	wrlong	local03, fp
2886c     28 4E 85 11 |  if_a	sub	fp, #40
28870     34 4E 05 F1 | 	add	fp, #52
28874     A7 12 02 FB | 	rdlong	arg01, fp
28878     30 4E 85 F1 | 	sub	fp, #48
2887c     A7 28 02 FB | 	rdlong	local06, fp
28880     14 15 02 F6 | 	mov	arg02, local06
28884     28 14 06 F1 | 	add	arg02, #40
28888     14 28 06 F1 | 	add	local06, #20
2888c     14 33 02 FB | 	rdlong	local11, local06
28890     19 2F 02 F6 | 	mov	local09, local11
28894     17 31 02 F6 | 	mov	local10, local09
28898     FF 31 06 F5 | 	and	local10, #511
2889c     18 15 02 F1 | 	add	arg02, local10
288a0     24 4E 05 F1 | 	add	fp, #36
288a4     A7 16 02 FB | 	rdlong	arg03, fp
288a8     28 4E 85 F1 | 	sub	fp, #40
288ac     F4 46 BF FD | 	call	#__system____builtin_memmove
288b0                 | LR__4118
288b0     0C 4E 05 F1 | 	add	fp, #12
288b4     A7 22 02 FB | 	rdlong	local03, fp
288b8     1C 4E 05 F1 | 	add	fp, #28
288bc     A7 2C 02 FB | 	rdlong	local08, fp
288c0     16 23 82 F1 | 	sub	local03, local08
288c4     1C 4E 85 F1 | 	sub	fp, #28
288c8     A7 22 62 FC | 	wrlong	local03, fp
288cc     04 4E 05 F1 | 	add	fp, #4
288d0     A7 1E 02 FB | 	rdlong	local01, fp
288d4     0F 2B 02 FB | 	rdlong	local07, local01
288d8     18 4E 05 F1 | 	add	fp, #24
288dc     A7 2C 02 FB | 	rdlong	local08, fp
288e0     16 2B 02 F1 | 	add	local07, local08
288e4     0F 2B 62 FC | 	wrlong	local07, local01
288e8     0C 4E 05 F1 | 	add	fp, #12
288ec     A7 22 02 FB | 	rdlong	local03, fp
288f0     0C 4E 85 F1 | 	sub	fp, #12
288f4     A7 34 02 FB | 	rdlong	local12, fp
288f8     1A 23 02 F1 | 	add	local03, local12
288fc     0C 4E 05 F1 | 	add	fp, #12
28900     A7 22 62 FC | 	wrlong	local03, fp
28904     30 4E 85 F1 | 	sub	fp, #48
28908     A7 36 02 FB | 	rdlong	local13, fp
2890c     1B 23 02 F6 | 	mov	local03, local13
28910     14 36 06 F1 | 	add	local13, #20
28914     1B 39 02 FB | 	rdlong	local14, local13
28918     24 4E 05 F1 | 	add	fp, #36
2891c     A7 28 02 FB | 	rdlong	local06, fp
28920     28 4E 85 F1 | 	sub	fp, #40
28924     14 39 02 F1 | 	add	local14, local06
28928     14 22 06 F1 | 	add	local03, #20
2892c     11 39 62 FC | 	wrlong	local14, local03
28930     84 FA 9F FD | 	jmp	#LR__4102
28934                 | LR__4119
28934                 | ' 
28934                 | ' 
28934                 | ' 
28934                 | ' 
28934                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
28934                 | ' 
28934                 | ' 	}
28934                 | ' 
28934                 | ' 	return FR_OK ;
28934     00 FA 05 F6 | 	mov	result1, #0
28938                 | LR__4120
28938     A7 F0 03 F6 | 	mov	ptra, fp
2893c     B2 00 A0 FD | 	call	#popregs_
28940                 | _fatfs_cc_f_read_ret
28940     2D 00 64 FD | 	ret
28944                 | 
28944                 | _fatfs_cc_f_write
28944     15 4A 05 F6 | 	mov	COUNT_, #21
28948     A8 00 A0 FD | 	call	#pushregs_
2894c     34 F0 07 F1 | 	add	ptra, #52
28950     04 4E 05 F1 | 	add	fp, #4
28954     A7 12 62 FC | 	wrlong	arg01, fp
28958     04 4E 05 F1 | 	add	fp, #4
2895c     A7 14 62 FC | 	wrlong	arg02, fp
28960     04 4E 05 F1 | 	add	fp, #4
28964     A7 16 62 FC | 	wrlong	arg03, fp
28968     04 4E 05 F1 | 	add	fp, #4
2896c     A7 18 62 FC | 	wrlong	arg04, fp
28970     08 4E 85 F1 | 	sub	fp, #8
28974     A7 FA 01 FB | 	rdlong	result1, fp
28978     28 4E 05 F1 | 	add	fp, #40
2897c     A7 FA 61 FC | 	wrlong	result1, fp
28980     20 4E 85 F1 | 	sub	fp, #32
28984     A7 FA 01 FB | 	rdlong	result1, fp
28988     FD 00 68 FC | 	wrlong	#0, result1
2898c     0C 4E 85 F1 | 	sub	fp, #12
28990     A7 12 02 FB | 	rdlong	arg01, fp
28994     14 4E 05 F1 | 	add	fp, #20
28998     A7 14 02 F6 | 	mov	arg02, fp
2899c     18 4E 85 F1 | 	sub	fp, #24
289a0     88 F0 BF FD | 	call	#_fatfs_cc_validate
289a4     14 4E 05 F1 | 	add	fp, #20
289a8     A7 FA 61 FC | 	wrlong	result1, fp
289ac     00 FA 4D F2 | 	cmps	result1, #0 wz
289b0     14 4E 85 F1 | 	sub	fp, #20
289b4     20 00 90 5D |  if_ne	jmp	#LR__4130
289b8     04 4E 05 F1 | 	add	fp, #4
289bc     A7 14 02 FB | 	rdlong	arg02, fp
289c0     11 14 06 F1 | 	add	arg02, #17
289c4     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
289c8     10 4E 05 F1 | 	add	fp, #16
289cc     A7 14 62 FC | 	wrlong	arg02, fp
289d0     14 4E 85 F1 | 	sub	fp, #20
289d4     10 00 90 AD |  if_e	jmp	#LR__4131
289d8                 | LR__4130
289d8     14 4E 05 F1 | 	add	fp, #20
289dc     A7 FA 01 FB | 	rdlong	result1, fp
289e0     14 4E 85 F1 | 	sub	fp, #20
289e4     44 07 90 FD | 	jmp	#LR__4153
289e8                 | LR__4131
289e8     04 4E 05 F1 | 	add	fp, #4
289ec     A7 14 02 FB | 	rdlong	arg02, fp
289f0     04 4E 85 F1 | 	sub	fp, #4
289f4     10 14 06 F1 | 	add	arg02, #16
289f8     0A 15 C2 FA | 	rdbyte	arg02, arg02
289fc     02 14 CE F7 | 	test	arg02, #2 wz
28a00     07 FA 05 A6 |  if_e	mov	result1, #7
28a04     24 07 90 AD |  if_e	jmp	#LR__4153
28a08     04 4E 05 F1 | 	add	fp, #4
28a0c     A7 14 02 FB | 	rdlong	arg02, fp
28a10     0A 13 02 F6 | 	mov	arg01, arg02
28a14     14 12 06 F1 | 	add	arg01, #20
28a18     09 13 02 FB | 	rdlong	arg01, arg01
28a1c     08 4E 05 F1 | 	add	fp, #8
28a20     A7 FA 01 FB | 	rdlong	result1, fp
28a24     FD 12 02 F1 | 	add	arg01, result1
28a28     0C 4E 85 F1 | 	sub	fp, #12
28a2c     14 14 06 F1 | 	add	arg02, #20
28a30     0A FB 01 FB | 	rdlong	result1, arg02
28a34     FD 12 12 F2 | 	cmp	arg01, result1 wc
28a38     24 00 90 3D |  if_ae	jmp	#LR__4132
28a3c     04 4E 05 F1 | 	add	fp, #4
28a40     A7 14 02 FB | 	rdlong	arg02, fp
28a44     01 FA 65 F6 | 	neg	result1, #1
28a48     14 14 06 F1 | 	add	arg02, #20
28a4c     0A 15 02 FB | 	rdlong	arg02, arg02
28a50     0A FB 81 F1 | 	sub	result1, arg02
28a54     08 4E 05 F1 | 	add	fp, #8
28a58     A7 FA 61 FC | 	wrlong	result1, fp
28a5c     0C 4E 85 F1 | 	sub	fp, #12
28a60                 | LR__4132
28a60                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
28a60                 | ' 	}
28a60                 | ' 
28a60                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
28a60                 | LR__4133
28a60     0C 4E 05 F1 | 	add	fp, #12
28a64     A7 FA 01 FB | 	rdlong	result1, fp
28a68     0C 4E 85 F1 | 	sub	fp, #12
28a6c     01 FA 15 F2 | 	cmp	result1, #1 wc
28a70     90 06 90 CD |  if_b	jmp	#LR__4152
28a74     04 4E 05 F1 | 	add	fp, #4
28a78     A7 FA 01 FB | 	rdlong	result1, fp
28a7c     04 4E 85 F1 | 	sub	fp, #4
28a80     14 FA 05 F1 | 	add	result1, #20
28a84     FD FA 01 FB | 	rdlong	result1, result1
28a88     FF FB CD F7 | 	test	result1, #511 wz
28a8c     D8 04 90 5D |  if_ne	jmp	#LR__4148
28a90     04 4E 05 F1 | 	add	fp, #4
28a94     A7 FA 01 FB | 	rdlong	result1, fp
28a98     14 FA 05 F1 | 	add	result1, #20
28a9c     FD FA 01 FB | 	rdlong	result1, result1
28aa0     09 FA 45 F0 | 	shr	result1, #9
28aa4     14 4E 05 F1 | 	add	fp, #20
28aa8     A7 14 02 FB | 	rdlong	arg02, fp
28aac     0A 14 06 F1 | 	add	arg02, #10
28ab0     0A 19 E2 FA | 	rdword	arg04, arg02
28ab4     0C 15 32 F9 | 	getword	arg02, arg04, #0
28ab8     01 14 86 F1 | 	sub	arg02, #1
28abc     0A FB 09 F5 | 	and	result1, arg02 wz
28ac0     14 4E 05 F1 | 	add	fp, #20
28ac4     A7 FA 61 FC | 	wrlong	result1, fp
28ac8     2C 4E 85 F1 | 	sub	fp, #44
28acc     44 01 90 5D |  if_ne	jmp	#LR__4139
28ad0     04 4E 05 F1 | 	add	fp, #4
28ad4     A7 FA 01 FB | 	rdlong	result1, fp
28ad8     04 4E 85 F1 | 	sub	fp, #4
28adc     14 FA 05 F1 | 	add	result1, #20
28ae0     FD 14 0A FB | 	rdlong	arg02, result1 wz
28ae4     44 00 90 5D |  if_ne	jmp	#LR__4134
28ae8     04 4E 05 F1 | 	add	fp, #4
28aec     A7 14 02 FB | 	rdlong	arg02, fp
28af0     08 14 06 F1 | 	add	arg02, #8
28af4     0A 15 0A FB | 	rdlong	arg02, arg02 wz
28af8     18 4E 05 F1 | 	add	fp, #24
28afc     A7 14 62 FC | 	wrlong	arg02, fp
28b00     1C 4E 85 F1 | 	sub	fp, #28
28b04     4C 00 90 5D |  if_ne	jmp	#LR__4135
28b08     04 4E 05 F1 | 	add	fp, #4
28b0c     A7 12 02 FB | 	rdlong	arg01, fp
28b10     04 4E 85 F1 | 	sub	fp, #4
28b14     00 14 06 F6 | 	mov	arg02, #0
28b18     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
28b1c     1C 4E 05 F1 | 	add	fp, #28
28b20     A7 FA 61 FC | 	wrlong	result1, fp
28b24     1C 4E 85 F1 | 	sub	fp, #28
28b28     28 00 90 FD | 	jmp	#LR__4135
28b2c                 | LR__4134
28b2c     04 4E 05 F1 | 	add	fp, #4
28b30     A7 18 02 FB | 	rdlong	arg04, fp
28b34     0C 13 02 F6 | 	mov	arg01, arg04
28b38     04 4E 85 F1 | 	sub	fp, #4
28b3c     18 18 06 F1 | 	add	arg04, #24
28b40     0C 15 02 FB | 	rdlong	arg02, arg04
28b44     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
28b48     1C 4E 05 F1 | 	add	fp, #28
28b4c     A7 FA 61 FC | 	wrlong	result1, fp
28b50     1C 4E 85 F1 | 	sub	fp, #28
28b54                 | LR__4135
28b54     1C 4E 05 F1 | 	add	fp, #28
28b58     A7 FA 09 FB | 	rdlong	result1, fp wz
28b5c     1C 4E 85 F1 | 	sub	fp, #28
28b60     A0 05 90 AD |  if_e	jmp	#LR__4152
28b64     1C 4E 05 F1 | 	add	fp, #28
28b68     A7 FA 01 FB | 	rdlong	result1, fp
28b6c     1C 4E 85 F1 | 	sub	fp, #28
28b70     01 FA 0D F2 | 	cmp	result1, #1 wz
28b74     1C 00 90 5D |  if_ne	jmp	#LR__4136
28b78     04 4E 05 F1 | 	add	fp, #4
28b7c     A7 FA 01 FB | 	rdlong	result1, fp
28b80     04 4E 85 F1 | 	sub	fp, #4
28b84     11 FA 05 F1 | 	add	result1, #17
28b88     FD 04 48 FC | 	wrbyte	#2, result1
28b8c     02 FA 05 F6 | 	mov	result1, #2
28b90     98 05 90 FD | 	jmp	#LR__4153
28b94                 | LR__4136
28b94     1C 4E 05 F1 | 	add	fp, #28
28b98     A7 FA 01 FB | 	rdlong	result1, fp
28b9c     1C 4E 85 F1 | 	sub	fp, #28
28ba0     FF FF 7F FF 
28ba4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
28ba8     1C 00 90 5D |  if_ne	jmp	#LR__4137
28bac     04 4E 05 F1 | 	add	fp, #4
28bb0     A7 FA 01 FB | 	rdlong	result1, fp
28bb4     04 4E 85 F1 | 	sub	fp, #4
28bb8     11 FA 05 F1 | 	add	result1, #17
28bbc     FD 02 48 FC | 	wrbyte	#1, result1
28bc0     01 FA 05 F6 | 	mov	result1, #1
28bc4     64 05 90 FD | 	jmp	#LR__4153
28bc8                 | LR__4137
28bc8     04 4E 05 F1 | 	add	fp, #4
28bcc     A7 FA 01 FB | 	rdlong	result1, fp
28bd0     18 4E 05 F1 | 	add	fp, #24
28bd4     A7 18 02 FB | 	rdlong	arg04, fp
28bd8     18 FA 05 F1 | 	add	result1, #24
28bdc     FD 18 62 FC | 	wrlong	arg04, result1
28be0     18 4E 85 F1 | 	sub	fp, #24
28be4     A7 FA 01 FB | 	rdlong	result1, fp
28be8     04 4E 85 F1 | 	sub	fp, #4
28bec     08 FA 05 F1 | 	add	result1, #8
28bf0     FD FA 09 FB | 	rdlong	result1, result1 wz
28bf4     1C 00 90 5D |  if_ne	jmp	#LR__4138
28bf8     04 4E 05 F1 | 	add	fp, #4
28bfc     A7 18 02 FB | 	rdlong	arg04, fp
28c00     18 4E 05 F1 | 	add	fp, #24
28c04     A7 FA 01 FB | 	rdlong	result1, fp
28c08     1C 4E 85 F1 | 	sub	fp, #28
28c0c     08 18 06 F1 | 	add	arg04, #8
28c10     0C FB 61 FC | 	wrlong	result1, arg04
28c14                 | LR__4138
28c14                 | LR__4139
28c14     04 4E 05 F1 | 	add	fp, #4
28c18     A7 18 02 FB | 	rdlong	arg04, fp
28c1c     04 4E 85 F1 | 	sub	fp, #4
28c20     10 18 06 F1 | 	add	arg04, #16
28c24     0C 19 C2 FA | 	rdbyte	arg04, arg04
28c28     80 18 CE F7 | 	test	arg04, #128 wz
28c2c     7C 00 90 AD |  if_e	jmp	#LR__4141
28c30     18 4E 05 F1 | 	add	fp, #24
28c34     A7 18 02 FB | 	rdlong	arg04, fp
28c38     01 18 06 F1 | 	add	arg04, #1
28c3c     0C 13 C2 FA | 	rdbyte	arg01, arg04
28c40     14 4E 85 F1 | 	sub	fp, #20
28c44     A7 18 02 FB | 	rdlong	arg04, fp
28c48     0C 15 02 F6 | 	mov	arg02, arg04
28c4c     28 14 06 F1 | 	add	arg02, #40
28c50     04 4E 85 F1 | 	sub	fp, #4
28c54     1C 18 06 F1 | 	add	arg04, #28
28c58     0C 17 02 FB | 	rdlong	arg03, arg04
28c5c     01 18 06 F6 | 	mov	arg04, #1
28c60     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
28c64     00 FA 0D F2 | 	cmp	result1, #0 wz
28c68     1C 00 90 AD |  if_e	jmp	#LR__4140
28c6c     04 4E 05 F1 | 	add	fp, #4
28c70     A7 FA 01 FB | 	rdlong	result1, fp
28c74     04 4E 85 F1 | 	sub	fp, #4
28c78     11 FA 05 F1 | 	add	result1, #17
28c7c     FD 02 48 FC | 	wrbyte	#1, result1
28c80     01 FA 05 F6 | 	mov	result1, #1
28c84     A4 04 90 FD | 	jmp	#LR__4153
28c88                 | LR__4140
28c88     04 4E 05 F1 | 	add	fp, #4
28c8c     A7 18 02 FB | 	rdlong	arg04, fp
28c90     0C FB 01 F6 | 	mov	result1, arg04
28c94     04 4E 85 F1 | 	sub	fp, #4
28c98     10 18 06 F1 | 	add	arg04, #16
28c9c     0C 19 C2 FA | 	rdbyte	arg04, arg04
28ca0     7F 18 06 F5 | 	and	arg04, #127
28ca4     10 FA 05 F1 | 	add	result1, #16
28ca8     FD 18 42 FC | 	wrbyte	arg04, result1
28cac                 | LR__4141
28cac     18 4E 05 F1 | 	add	fp, #24
28cb0     A7 12 02 FB | 	rdlong	arg01, fp
28cb4     14 4E 85 F1 | 	sub	fp, #20
28cb8     A7 14 02 FB | 	rdlong	arg02, fp
28cbc     04 4E 85 F1 | 	sub	fp, #4
28cc0     18 14 06 F1 | 	add	arg02, #24
28cc4     0A 15 02 FB | 	rdlong	arg02, arg02
28cc8     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
28ccc     20 4E 05 F1 | 	add	fp, #32
28cd0     A7 FA 61 FC | 	wrlong	result1, fp
28cd4     20 4E 85 F1 | 	sub	fp, #32
28cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
28cdc     1C 00 90 5D |  if_ne	jmp	#LR__4142
28ce0     04 4E 05 F1 | 	add	fp, #4
28ce4     A7 FA 01 FB | 	rdlong	result1, fp
28ce8     04 4E 85 F1 | 	sub	fp, #4
28cec     11 FA 05 F1 | 	add	result1, #17
28cf0     FD 04 48 FC | 	wrbyte	#2, result1
28cf4     02 FA 05 F6 | 	mov	result1, #2
28cf8     30 04 90 FD | 	jmp	#LR__4153
28cfc                 | LR__4142
28cfc     20 4E 05 F1 | 	add	fp, #32
28d00     A7 FA 01 FB | 	rdlong	result1, fp
28d04     0C 4E 05 F1 | 	add	fp, #12
28d08     A7 1E 02 FB | 	rdlong	local01, fp
28d0c     0F FB 01 F1 | 	add	result1, local01
28d10     0C 4E 85 F1 | 	sub	fp, #12
28d14     A7 FA 61 FC | 	wrlong	result1, fp
28d18     14 4E 85 F1 | 	sub	fp, #20
28d1c     A7 FA 01 FB | 	rdlong	result1, fp
28d20     09 FA 45 F0 | 	shr	result1, #9
28d24     1C 4E 05 F1 | 	add	fp, #28
28d28     A7 FA 61 FC | 	wrlong	result1, fp
28d2c     28 4E 85 F1 | 	sub	fp, #40
28d30     01 FA 15 F2 | 	cmp	result1, #1 wc
28d34     60 01 90 CD |  if_b	jmp	#LR__4146
28d38     2C 4E 05 F1 | 	add	fp, #44
28d3c     A7 FA 01 FB | 	rdlong	result1, fp
28d40     04 4E 85 F1 | 	sub	fp, #4
28d44     A7 18 02 FB | 	rdlong	arg04, fp
28d48     0C FB 01 F1 | 	add	result1, arg04
28d4c     10 4E 85 F1 | 	sub	fp, #16
28d50     A7 18 02 FB | 	rdlong	arg04, fp
28d54     18 4E 85 F1 | 	sub	fp, #24
28d58     0A 18 06 F1 | 	add	arg04, #10
28d5c     0C 19 E2 FA | 	rdword	arg04, arg04
28d60     0C FB 19 F2 | 	cmp	result1, arg04 wcz
28d64     28 00 90 ED |  if_be	jmp	#LR__4143
28d68     18 4E 05 F1 | 	add	fp, #24
28d6c     A7 FA 01 FB | 	rdlong	result1, fp
28d70     0A FA 05 F1 | 	add	result1, #10
28d74     FD FA E1 FA | 	rdword	result1, result1
28d78     14 4E 05 F1 | 	add	fp, #20
28d7c     A7 18 02 FB | 	rdlong	arg04, fp
28d80     0C FB 81 F1 | 	sub	result1, arg04
28d84     04 4E 85 F1 | 	sub	fp, #4
28d88     A7 FA 61 FC | 	wrlong	result1, fp
28d8c     28 4E 85 F1 | 	sub	fp, #40
28d90                 | LR__4143
28d90     18 4E 05 F1 | 	add	fp, #24
28d94     A7 18 02 FB | 	rdlong	arg04, fp
28d98     01 18 06 F1 | 	add	arg04, #1
28d9c     0C 13 C2 FA | 	rdbyte	arg01, arg04
28da0     18 4E 05 F1 | 	add	fp, #24
28da4     A7 14 02 FB | 	rdlong	arg02, fp
28da8     10 4E 85 F1 | 	sub	fp, #16
28dac     A7 16 02 FB | 	rdlong	arg03, fp
28db0     08 4E 05 F1 | 	add	fp, #8
28db4     A7 18 02 FB | 	rdlong	arg04, fp
28db8     28 4E 85 F1 | 	sub	fp, #40
28dbc     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
28dc0     00 FA 0D F2 | 	cmp	result1, #0 wz
28dc4     1C 00 90 AD |  if_e	jmp	#LR__4144
28dc8     04 4E 05 F1 | 	add	fp, #4
28dcc     A7 1E 02 FB | 	rdlong	local01, fp
28dd0     04 4E 85 F1 | 	sub	fp, #4
28dd4     11 1E 06 F1 | 	add	local01, #17
28dd8     0F 03 48 FC | 	wrbyte	#1, local01
28ddc     01 FA 05 F6 | 	mov	result1, #1
28de0     48 03 90 FD | 	jmp	#LR__4153
28de4                 | LR__4144
28de4     04 4E 05 F1 | 	add	fp, #4
28de8     A7 FA 01 FB | 	rdlong	result1, fp
28dec     1C FA 05 F1 | 	add	result1, #28
28df0     FD FA 01 FB | 	rdlong	result1, result1
28df4     1C 4E 05 F1 | 	add	fp, #28
28df8     A7 20 02 FB | 	rdlong	local02, fp
28dfc     10 FB 81 F1 | 	sub	result1, local02
28e00     08 4E 05 F1 | 	add	fp, #8
28e04     A7 18 02 FB | 	rdlong	arg04, fp
28e08     28 4E 85 F1 | 	sub	fp, #40
28e0c     0C FB 11 F2 | 	cmp	result1, arg04 wc
28e10     68 00 90 3D |  if_ae	jmp	#LR__4145
28e14     04 4E 05 F1 | 	add	fp, #4
28e18     A7 12 02 FB | 	rdlong	arg01, fp
28e1c     28 12 06 F1 | 	add	arg01, #40
28e20     2C 4E 05 F1 | 	add	fp, #44
28e24     A7 14 02 FB | 	rdlong	arg02, fp
28e28     2C 4E 85 F1 | 	sub	fp, #44
28e2c     A7 FA 01 FB | 	rdlong	result1, fp
28e30     1C FA 05 F1 | 	add	result1, #28
28e34     FD 22 02 FB | 	rdlong	local03, result1
28e38     1C 4E 05 F1 | 	add	fp, #28
28e3c     A7 18 02 FB | 	rdlong	arg04, fp
28e40     20 4E 85 F1 | 	sub	fp, #32
28e44     0C 23 82 F1 | 	sub	local03, arg04
28e48     09 22 66 F0 | 	shl	local03, #9
28e4c     11 15 02 F1 | 	add	arg02, local03
28e50     09 16 C6 F9 | 	decod	arg03, #9
28e54     4C 41 BF FD | 	call	#__system____builtin_memmove
28e58     04 4E 05 F1 | 	add	fp, #4
28e5c     A7 18 02 FB | 	rdlong	arg04, fp
28e60     0C FB 01 F6 | 	mov	result1, arg04
28e64     04 4E 85 F1 | 	sub	fp, #4
28e68     10 18 06 F1 | 	add	arg04, #16
28e6c     0C 19 C2 FA | 	rdbyte	arg04, arg04
28e70     7F 18 06 F5 | 	and	arg04, #127
28e74     10 FA 05 F1 | 	add	result1, #16
28e78     FD 18 42 FC | 	wrbyte	arg04, result1
28e7c                 | LR__4145
28e7c     28 4E 05 F1 | 	add	fp, #40
28e80     A7 FA 01 FB | 	rdlong	result1, fp
28e84     09 FA 65 F0 | 	shl	result1, #9
28e88     04 4E 85 F1 | 	sub	fp, #4
28e8c     A7 FA 61 FC | 	wrlong	result1, fp
28e90     24 4E 85 F1 | 	sub	fp, #36
28e94                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
28e94                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
28e94                 | ' 				}
28e94                 | ' 
28e94                 | ' 
28e94                 | ' 				wcnt =  ((UINT) 512 )  * cc;
28e94                 | ' 				continue;
28e94     74 01 90 FD | 	jmp	#LR__4149
28e98                 | LR__4146
28e98     04 4E 05 F1 | 	add	fp, #4
28e9c     A7 20 02 FB | 	rdlong	local02, fp
28ea0     1C 20 06 F1 | 	add	local02, #28
28ea4     10 FB 01 FB | 	rdlong	result1, local02
28ea8     1C 4E 05 F1 | 	add	fp, #28
28eac     A7 20 02 FB | 	rdlong	local02, fp
28eb0     20 4E 85 F1 | 	sub	fp, #32
28eb4     10 FB 09 F2 | 	cmp	result1, local02 wz
28eb8     90 00 90 AD |  if_e	jmp	#LR__4147
28ebc     04 4E 05 F1 | 	add	fp, #4
28ec0     A7 FA 01 FB | 	rdlong	result1, fp
28ec4     FD 22 02 F6 | 	mov	local03, result1
28ec8     04 4E 85 F1 | 	sub	fp, #4
28ecc     14 22 06 F1 | 	add	local03, #20
28ed0     11 23 02 FB | 	rdlong	local03, local03
28ed4     0C FA 05 F1 | 	add	result1, #12
28ed8     FD 24 02 FB | 	rdlong	local04, result1
28edc     12 27 02 F6 | 	mov	local05, local04
28ee0     13 23 12 F2 | 	cmp	local03, local05 wc
28ee4     64 00 90 3D |  if_ae	jmp	#LR__4147
28ee8     18 4E 05 F1 | 	add	fp, #24
28eec     A7 18 02 FB | 	rdlong	arg04, fp
28ef0     01 18 06 F1 | 	add	arg04, #1
28ef4     0C 13 C2 FA | 	rdbyte	arg01, arg04
28ef8     14 4E 85 F1 | 	sub	fp, #20
28efc     A7 28 02 FB | 	rdlong	local06, fp
28f00     28 28 06 F1 | 	add	local06, #40
28f04     14 2B 02 F6 | 	mov	local07, local06
28f08     1C 4E 05 F1 | 	add	fp, #28
28f0c     A7 2C 02 FB | 	rdlong	local08, fp
28f10     20 4E 85 F1 | 	sub	fp, #32
28f14     01 2E 06 F6 | 	mov	local09, #1
28f18     15 15 02 F6 | 	mov	arg02, local07
28f1c     16 17 02 F6 | 	mov	arg03, local08
28f20     01 18 06 F6 | 	mov	arg04, #1
28f24     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
28f28     FD 30 0A F6 | 	mov	local10, result1 wz
28f2c     1C 00 90 AD |  if_e	jmp	#LR__4147
28f30     04 4E 05 F1 | 	add	fp, #4
28f34     A7 30 02 FB | 	rdlong	local10, fp
28f38     04 4E 85 F1 | 	sub	fp, #4
28f3c     11 30 06 F1 | 	add	local10, #17
28f40     18 03 48 FC | 	wrbyte	#1, local10
28f44                 | ' 				fp->fptr < fp->obj.objsize &&
28f44                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
28f44                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
28f44     01 FA 05 F6 | 	mov	result1, #1
28f48     E0 01 90 FD | 	jmp	#LR__4153
28f4c                 | LR__4147
28f4c     04 4E 05 F1 | 	add	fp, #4
28f50     A7 18 02 FB | 	rdlong	arg04, fp
28f54     1C 4E 05 F1 | 	add	fp, #28
28f58     A7 FA 01 FB | 	rdlong	result1, fp
28f5c     20 4E 85 F1 | 	sub	fp, #32
28f60     1C 18 06 F1 | 	add	arg04, #28
28f64     0C FB 61 FC | 	wrlong	result1, arg04
28f68                 | LR__4148
28f68     04 4E 05 F1 | 	add	fp, #4
28f6c     A7 FA 01 FB | 	rdlong	result1, fp
28f70     14 FA 05 F1 | 	add	result1, #20
28f74     FD FA 01 FB | 	rdlong	result1, result1
28f78     FF FB 05 F5 | 	and	result1, #511
28f7c     09 32 C6 F9 | 	decod	local11, #9
28f80     FD 32 82 F1 | 	sub	local11, result1
28f84     20 4E 05 F1 | 	add	fp, #32
28f88     A7 32 62 FC | 	wrlong	local11, fp
28f8c     18 4E 85 F1 | 	sub	fp, #24
28f90     A7 FA 01 FB | 	rdlong	result1, fp
28f94     0C 4E 85 F1 | 	sub	fp, #12
28f98     FD 32 1A F2 | 	cmp	local11, result1 wcz
28f9c     0C 4E 05 11 |  if_a	add	fp, #12
28fa0     A7 32 02 1B |  if_a	rdlong	local11, fp
28fa4     18 4E 05 11 |  if_a	add	fp, #24
28fa8     A7 32 62 1C |  if_a	wrlong	local11, fp
28fac     24 4E 85 11 |  if_a	sub	fp, #36
28fb0     04 4E 05 F1 | 	add	fp, #4
28fb4     A7 32 02 FB | 	rdlong	local11, fp
28fb8     19 13 02 F6 | 	mov	arg01, local11
28fbc     28 12 06 F1 | 	add	arg01, #40
28fc0     14 32 06 F1 | 	add	local11, #20
28fc4     19 33 02 FB | 	rdlong	local11, local11
28fc8     FF 33 06 F5 | 	and	local11, #511
28fcc     19 13 02 F1 | 	add	arg01, local11
28fd0     2C 4E 05 F1 | 	add	fp, #44
28fd4     A7 14 02 FB | 	rdlong	arg02, fp
28fd8     0C 4E 85 F1 | 	sub	fp, #12
28fdc     A7 16 02 FB | 	rdlong	arg03, fp
28fe0     24 4E 85 F1 | 	sub	fp, #36
28fe4     BC 3F BF FD | 	call	#__system____builtin_memmove
28fe8     04 4E 05 F1 | 	add	fp, #4
28fec     A7 FA 01 FB | 	rdlong	result1, fp
28ff0     FD 32 02 F6 | 	mov	local11, result1
28ff4     04 4E 85 F1 | 	sub	fp, #4
28ff8     10 FA 05 F1 | 	add	result1, #16
28ffc     FD FA C1 FA | 	rdbyte	result1, result1
29000     80 FA 45 F5 | 	or	result1, #128
29004     10 32 06 F1 | 	add	local11, #16
29008     19 FB 41 FC | 	wrbyte	result1, local11
2900c                 | LR__4149
2900c     0C 4E 05 F1 | 	add	fp, #12
29010     A7 32 02 FB | 	rdlong	local11, fp
29014     18 4E 05 F1 | 	add	fp, #24
29018     A7 FA 01 FB | 	rdlong	result1, fp
2901c     FD 32 82 F1 | 	sub	local11, result1
29020     18 4E 85 F1 | 	sub	fp, #24
29024     A7 32 62 FC | 	wrlong	local11, fp
29028     04 4E 05 F1 | 	add	fp, #4
2902c     A7 34 02 FB | 	rdlong	local12, fp
29030     1A 33 02 FB | 	rdlong	local11, local12
29034     14 4E 05 F1 | 	add	fp, #20
29038     A7 36 02 FB | 	rdlong	local13, fp
2903c     1B 33 02 F1 | 	add	local11, local13
29040     1A 33 62 FC | 	wrlong	local11, local12
29044     0C 4E 05 F1 | 	add	fp, #12
29048     A7 32 02 FB | 	rdlong	local11, fp
2904c     0C 4E 85 F1 | 	sub	fp, #12
29050     A7 38 02 FB | 	rdlong	local14, fp
29054     1C 33 02 F1 | 	add	local11, local14
29058     0C 4E 05 F1 | 	add	fp, #12
2905c     A7 32 62 FC | 	wrlong	local11, fp
29060     2C 4E 85 F1 | 	sub	fp, #44
29064     A7 3A 02 FB | 	rdlong	local15, fp
29068     1D 33 02 F6 | 	mov	local11, local15
2906c     14 3A 06 F1 | 	add	local15, #20
29070     1D 3B 02 FB | 	rdlong	local15, local15
29074     20 4E 05 F1 | 	add	fp, #32
29078     A7 3C 02 FB | 	rdlong	local16, fp
2907c     1E 3B 02 F1 | 	add	local15, local16
29080     14 32 06 F1 | 	add	local11, #20
29084     19 3B 62 FC | 	wrlong	local15, local11
29088     20 4E 85 F1 | 	sub	fp, #32
2908c     A7 3E 02 FB | 	rdlong	local17, fp
29090     1F 33 02 F6 | 	mov	local11, local17
29094     1F 41 02 F6 | 	mov	local18, local17
29098     04 4E 85 F1 | 	sub	fp, #4
2909c     14 3E 06 F1 | 	add	local17, #20
290a0     1F 43 02 FB | 	rdlong	local19, local17
290a4     0C 40 06 F1 | 	add	local18, #12
290a8     20 45 02 FB | 	rdlong	local20, local18
290ac     22 43 1A F2 | 	cmp	local19, local20 wcz
290b0     24 00 90 ED |  if_be	jmp	#LR__4150
290b4     04 4E 05 F1 | 	add	fp, #4
290b8     A7 26 02 FB | 	rdlong	local05, fp
290bc     04 4E 85 F1 | 	sub	fp, #4
290c0     13 23 02 F6 | 	mov	local03, local05
290c4     14 22 06 F1 | 	add	local03, #20
290c8     11 25 02 FB | 	rdlong	local04, local03
290cc     14 22 86 F1 | 	sub	local03, #20
290d0     12 47 02 F6 | 	mov	local21, local04
290d4     20 00 90 FD | 	jmp	#LR__4151
290d8                 | LR__4150
290d8     04 4E 05 F1 | 	add	fp, #4
290dc     A7 2A 02 FB | 	rdlong	local07, fp
290e0     04 4E 85 F1 | 	sub	fp, #4
290e4     15 31 02 F6 | 	mov	local10, local07
290e8     0C 30 06 F1 | 	add	local10, #12
290ec     18 2D 02 FB | 	rdlong	local08, local10
290f0     0C 30 86 F1 | 	sub	local10, #12
290f4     16 47 02 F6 | 	mov	local21, local08
290f8                 | LR__4151
290f8     0C 32 06 F1 | 	add	local11, #12
290fc     19 47 62 FC | 	wrlong	local21, local11
29100     5C F9 9F FD | 	jmp	#LR__4133
29104                 | LR__4152
29104     04 4E 05 F1 | 	add	fp, #4
29108     A7 34 02 FB | 	rdlong	local12, fp
2910c     1A 1F 02 F6 | 	mov	local01, local12
29110     04 4E 85 F1 | 	sub	fp, #4
29114     10 34 06 F1 | 	add	local12, #16
29118     1A 33 C2 FA | 	rdbyte	local11, local12
2911c     40 32 46 F5 | 	or	local11, #64
29120     10 1E 06 F1 | 	add	local01, #16
29124     0F 33 42 FC | 	wrbyte	local11, local01
29128                 | ' 
29128                 | ' 
29128                 | ' 
29128                 | ' 
29128                 | ' 
29128                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
29128                 | ' 		fp->flag |=  0x80 ;
29128                 | ' 
29128                 | ' 	}
29128                 | ' 
29128                 | ' 	fp->flag |=  0x40 ;
29128                 | ' 
29128                 | ' 	return FR_OK ;
29128     00 FA 05 F6 | 	mov	result1, #0
2912c                 | LR__4153
2912c     A7 F0 03 F6 | 	mov	ptra, fp
29130     B2 00 A0 FD | 	call	#popregs_
29134                 | _fatfs_cc_f_write_ret
29134     2D 00 64 FD | 	ret
29138                 | 
29138                 | _fatfs_cc_f_sync
29138     00 4A 05 F6 | 	mov	COUNT_, #0
2913c     A8 00 A0 FD | 	call	#pushregs_
29140     18 F0 07 F1 | 	add	ptra, #24
29144     04 4E 05 F1 | 	add	fp, #4
29148     A7 12 62 FC | 	wrlong	arg01, fp
2914c     08 4E 05 F1 | 	add	fp, #8
29150     A7 14 02 F6 | 	mov	arg02, fp
29154     0C 4E 85 F1 | 	sub	fp, #12
29158     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2915c     08 4E 05 F1 | 	add	fp, #8
29160     A7 FA 61 FC | 	wrlong	result1, fp
29164     08 4E 85 F1 | 	sub	fp, #8
29168     00 FA 0D F2 | 	cmp	result1, #0 wz
2916c     C0 01 90 5D |  if_ne	jmp	#LR__4163
29170     04 4E 05 F1 | 	add	fp, #4
29174     A7 18 02 FB | 	rdlong	arg04, fp
29178     04 4E 85 F1 | 	sub	fp, #4
2917c     10 18 06 F1 | 	add	arg04, #16
29180     0C 19 C2 FA | 	rdbyte	arg04, arg04
29184     40 18 CE F7 | 	test	arg04, #64 wz
29188     A4 01 90 AD |  if_e	jmp	#LR__4162
2918c     04 4E 05 F1 | 	add	fp, #4
29190     A7 18 02 FB | 	rdlong	arg04, fp
29194     04 4E 85 F1 | 	sub	fp, #4
29198     10 18 06 F1 | 	add	arg04, #16
2919c     0C 19 C2 FA | 	rdbyte	arg04, arg04
291a0     80 18 CE F7 | 	test	arg04, #128 wz
291a4     64 00 90 AD |  if_e	jmp	#LR__4160
291a8     0C 4E 05 F1 | 	add	fp, #12
291ac     A7 18 02 FB | 	rdlong	arg04, fp
291b0     01 18 06 F1 | 	add	arg04, #1
291b4     0C 13 C2 FA | 	rdbyte	arg01, arg04
291b8     08 4E 85 F1 | 	sub	fp, #8
291bc     A7 18 02 FB | 	rdlong	arg04, fp
291c0     0C 15 02 F6 | 	mov	arg02, arg04
291c4     28 14 06 F1 | 	add	arg02, #40
291c8     04 4E 85 F1 | 	sub	fp, #4
291cc     1C 18 06 F1 | 	add	arg04, #28
291d0     0C 17 02 FB | 	rdlong	arg03, arg04
291d4     01 18 06 F6 | 	mov	arg04, #1
291d8     0C AE BF FD | 	call	#_fatfs_cc_disk_write
291dc     00 FA 0D F2 | 	cmp	result1, #0 wz
291e0     01 FA 05 56 |  if_ne	mov	result1, #1
291e4     54 01 90 5D |  if_ne	jmp	#LR__4164
291e8     04 4E 05 F1 | 	add	fp, #4
291ec     A7 18 02 FB | 	rdlong	arg04, fp
291f0     0C 17 02 F6 | 	mov	arg03, arg04
291f4     04 4E 85 F1 | 	sub	fp, #4
291f8     10 18 06 F1 | 	add	arg04, #16
291fc     0C 19 C2 FA | 	rdbyte	arg04, arg04
29200     7F 18 06 F5 | 	and	arg04, #127
29204     10 16 06 F1 | 	add	arg03, #16
29208     0B 19 42 FC | 	wrbyte	arg04, arg03
2920c                 | LR__4160
2920c     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
29210     10 4E 05 F1 | 	add	fp, #16
29214     A7 FA 61 FC | 	wrlong	result1, fp
29218     04 4E 85 F1 | 	sub	fp, #4
2921c     A7 12 02 FB | 	rdlong	arg01, fp
29220     08 4E 85 F1 | 	sub	fp, #8
29224     A7 18 02 FB | 	rdlong	arg04, fp
29228     04 4E 85 F1 | 	sub	fp, #4
2922c     20 18 06 F1 | 	add	arg04, #32
29230     0C 15 02 FB | 	rdlong	arg02, arg04
29234     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
29238     08 4E 05 F1 | 	add	fp, #8
2923c     A7 FA 61 FC | 	wrlong	result1, fp
29240     08 4E 85 F1 | 	sub	fp, #8
29244     00 FA 0D F2 | 	cmp	result1, #0 wz
29248     E4 00 90 5D |  if_ne	jmp	#LR__4161
2924c     04 4E 05 F1 | 	add	fp, #4
29250     A7 18 02 FB | 	rdlong	arg04, fp
29254     24 18 06 F1 | 	add	arg04, #36
29258     0C 19 02 FB | 	rdlong	arg04, arg04
2925c     10 4E 05 F1 | 	add	fp, #16
29260     A7 18 62 FC | 	wrlong	arg04, fp
29264     0C 17 02 F6 | 	mov	arg03, arg04
29268     0B 16 06 F1 | 	add	arg03, #11
2926c     0B 17 C2 FA | 	rdbyte	arg03, arg03
29270     20 16 46 F5 | 	or	arg03, #32
29274     0B 18 06 F1 | 	add	arg04, #11
29278     0C 17 42 FC | 	wrbyte	arg03, arg04
2927c     10 4E 85 F1 | 	sub	fp, #16
29280     A7 18 02 FB | 	rdlong	arg04, fp
29284     0C 13 02 FB | 	rdlong	arg01, arg04
29288     10 4E 05 F1 | 	add	fp, #16
2928c     A7 14 02 FB | 	rdlong	arg02, fp
29290     14 4E 85 F1 | 	sub	fp, #20
29294     08 18 06 F1 | 	add	arg04, #8
29298     0C 17 02 FB | 	rdlong	arg03, arg04
2929c     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
292a0     14 4E 05 F1 | 	add	fp, #20
292a4     A7 12 02 FB | 	rdlong	arg01, fp
292a8     1C 12 06 F1 | 	add	arg01, #28
292ac     10 4E 85 F1 | 	sub	fp, #16
292b0     A7 18 02 FB | 	rdlong	arg04, fp
292b4     0C 18 06 F1 | 	add	arg04, #12
292b8     0C 15 02 FB | 	rdlong	arg02, arg04
292bc     09 15 62 FC | 	wrlong	arg02, arg01
292c0     10 4E 05 F1 | 	add	fp, #16
292c4     A7 12 02 FB | 	rdlong	arg01, fp
292c8     16 12 06 F1 | 	add	arg01, #22
292cc     04 4E 85 F1 | 	sub	fp, #4
292d0     A7 14 02 FB | 	rdlong	arg02, fp
292d4     09 15 62 FC | 	wrlong	arg02, arg01
292d8     04 4E 05 F1 | 	add	fp, #4
292dc     A7 12 02 FB | 	rdlong	arg01, fp
292e0     12 12 06 F1 | 	add	arg01, #18
292e4     09 01 58 FC | 	wrword	#0, arg01
292e8     08 4E 85 F1 | 	sub	fp, #8
292ec     A7 18 02 FB | 	rdlong	arg04, fp
292f0     03 18 06 F1 | 	add	arg04, #3
292f4     0C 03 48 FC | 	wrbyte	#1, arg04
292f8     A7 12 02 FB | 	rdlong	arg01, fp
292fc     0C 4E 85 F1 | 	sub	fp, #12
29300     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
29304     08 4E 05 F1 | 	add	fp, #8
29308     A7 FA 61 FC | 	wrlong	result1, fp
2930c     04 4E 85 F1 | 	sub	fp, #4
29310     A7 18 02 FB | 	rdlong	arg04, fp
29314     0C 17 02 F6 | 	mov	arg03, arg04
29318     04 4E 85 F1 | 	sub	fp, #4
2931c     10 18 06 F1 | 	add	arg04, #16
29320     0C 19 C2 FA | 	rdbyte	arg04, arg04
29324     BF 18 06 F5 | 	and	arg04, #191
29328     10 16 06 F1 | 	add	arg03, #16
2932c     0B 19 42 FC | 	wrbyte	arg04, arg03
29330                 | LR__4161
29330                 | LR__4162
29330                 | LR__4163
29330                 | ' 					dir = fp->dir_ptr;
29330                 | ' 					dir[ 11 ] |=  0x20 ;
29330                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
29330                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
29330                 | ' 					st_dword(dir +  22 , tm);
29330                 | ' 					st_word(dir +  18 , 0);
29330                 | ' 					fs->wflag = 1;
29330                 | ' 					res = sync_fs(fs);
29330                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
29330                 | ' 				}
29330                 | ' 			}
29330                 | ' 		}
29330                 | ' 	}
29330                 | ' 
29330                 | ' 	return res ;
29330     08 4E 05 F1 | 	add	fp, #8
29334     A7 FA 01 FB | 	rdlong	result1, fp
29338     08 4E 85 F1 | 	sub	fp, #8
2933c                 | LR__4164
2933c     A7 F0 03 F6 | 	mov	ptra, fp
29340     B2 00 A0 FD | 	call	#popregs_
29344                 | _fatfs_cc_f_sync_ret
29344     2D 00 64 FD | 	ret
29348                 | 
29348                 | _fatfs_cc_f_close
29348     01 4A 05 F6 | 	mov	COUNT_, #1
2934c     A8 00 A0 FD | 	call	#pushregs_
29350     10 F0 07 F1 | 	add	ptra, #16
29354     04 4E 05 F1 | 	add	fp, #4
29358     A7 12 62 FC | 	wrlong	arg01, fp
2935c     04 4E 85 F1 | 	sub	fp, #4
29360     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
29364     08 4E 05 F1 | 	add	fp, #8
29368     A7 FA 61 FC | 	wrlong	result1, fp
2936c     08 4E 85 F1 | 	sub	fp, #8
29370     00 FA 0D F2 | 	cmp	result1, #0 wz
29374     38 00 90 5D |  if_ne	jmp	#LR__4170
29378     04 4E 05 F1 | 	add	fp, #4
2937c     A7 12 02 FB | 	rdlong	arg01, fp
29380     08 4E 05 F1 | 	add	fp, #8
29384     A7 14 02 F6 | 	mov	arg02, fp
29388     0C 4E 85 F1 | 	sub	fp, #12
2938c     9C E6 BF FD | 	call	#_fatfs_cc_validate
29390     08 4E 05 F1 | 	add	fp, #8
29394     A7 FA 61 FC | 	wrlong	result1, fp
29398     08 4E 85 F1 | 	sub	fp, #8
2939c     00 FA 0D F2 | 	cmp	result1, #0 wz
293a0     04 4E 05 A1 |  if_e	add	fp, #4
293a4     A7 1E 02 AB |  if_e	rdlong	local01, fp
293a8     04 4E 85 A1 |  if_e	sub	fp, #4
293ac     0F 01 68 AC |  if_e	wrlong	#0, local01
293b0                 | LR__4170
293b0                 | ' 
293b0                 | ' 
293b0                 | ' 
293b0                 | ' 
293b0                 | ' 			fp->obj.fs = 0;
293b0                 | ' #line 4192 "ff.c"
293b0                 | ' 		}
293b0                 | ' 	}
293b0                 | ' 	return res;
293b0     08 4E 05 F1 | 	add	fp, #8
293b4     A7 FA 01 FB | 	rdlong	result1, fp
293b8     08 4E 85 F1 | 	sub	fp, #8
293bc     A7 F0 03 F6 | 	mov	ptra, fp
293c0     B2 00 A0 FD | 	call	#popregs_
293c4                 | _fatfs_cc_f_close_ret
293c4     2D 00 64 FD | 	ret
293c8                 | 
293c8                 | _fatfs_cc_f_lseek
293c8     00 4A 05 F6 | 	mov	COUNT_, #0
293cc     A8 00 A0 FD | 	call	#pushregs_
293d0     24 F0 07 F1 | 	add	ptra, #36
293d4     04 4E 05 F1 | 	add	fp, #4
293d8     A7 12 62 FC | 	wrlong	arg01, fp
293dc     04 4E 05 F1 | 	add	fp, #4
293e0     A7 14 62 FC | 	wrlong	arg02, fp
293e4     04 4E 85 F1 | 	sub	fp, #4
293e8     A7 12 02 FB | 	rdlong	arg01, fp
293ec     0C 4E 05 F1 | 	add	fp, #12
293f0     A7 14 02 F6 | 	mov	arg02, fp
293f4     10 4E 85 F1 | 	sub	fp, #16
293f8     30 E6 BF FD | 	call	#_fatfs_cc_validate
293fc     0C 4E 05 F1 | 	add	fp, #12
29400     A7 FA 61 FC | 	wrlong	result1, fp
29404     0C 4E 85 F1 | 	sub	fp, #12
29408     00 FA 0D F2 | 	cmp	result1, #0 wz
2940c     1C 00 90 5D |  if_ne	jmp	#LR__4180
29410     04 4E 05 F1 | 	add	fp, #4
29414     A7 18 02 FB | 	rdlong	arg04, fp
29418     11 18 06 F1 | 	add	arg04, #17
2941c     0C 19 C2 FA | 	rdbyte	arg04, arg04
29420     08 4E 05 F1 | 	add	fp, #8
29424     A7 18 62 FC | 	wrlong	arg04, fp
29428     0C 4E 85 F1 | 	sub	fp, #12
2942c                 | LR__4180
2942c     0C 4E 05 F1 | 	add	fp, #12
29430     A7 18 0A FB | 	rdlong	arg04, fp wz
29434     0C 4E 85 F1 | 	sub	fp, #12
29438     0C 4E 05 51 |  if_ne	add	fp, #12
2943c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
29440     0C 4E 85 51 |  if_ne	sub	fp, #12
29444     40 06 90 5D |  if_ne	jmp	#LR__4203
29448     04 4E 05 F1 | 	add	fp, #4
2944c     A7 18 02 FB | 	rdlong	arg04, fp
29450     04 4E 05 F1 | 	add	fp, #4
29454     A7 16 02 FB | 	rdlong	arg03, fp
29458     08 4E 85 F1 | 	sub	fp, #8
2945c     0C 18 06 F1 | 	add	arg04, #12
29460     0C 19 02 FB | 	rdlong	arg04, arg04
29464     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
29468     3C 00 90 ED |  if_be	jmp	#LR__4181
2946c     04 4E 05 F1 | 	add	fp, #4
29470     A7 16 02 FB | 	rdlong	arg03, fp
29474     04 4E 85 F1 | 	sub	fp, #4
29478     10 16 06 F1 | 	add	arg03, #16
2947c     0B 17 C2 FA | 	rdbyte	arg03, arg03
29480     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
29484     02 16 CE F7 | 	test	arg03, #2 wz
29488     1C 00 90 5D |  if_ne	jmp	#LR__4181
2948c     04 4E 05 F1 | 	add	fp, #4
29490     A7 16 02 FB | 	rdlong	arg03, fp
29494     0C 16 06 F1 | 	add	arg03, #12
29498     0B 17 02 FB | 	rdlong	arg03, arg03
2949c     04 4E 05 F1 | 	add	fp, #4
294a0     A7 16 62 FC | 	wrlong	arg03, fp
294a4     08 4E 85 F1 | 	sub	fp, #8
294a8                 | LR__4181
294a8     04 4E 05 F1 | 	add	fp, #4
294ac     A7 16 02 FB | 	rdlong	arg03, fp
294b0     14 16 06 F1 | 	add	arg03, #20
294b4     0B 17 02 FB | 	rdlong	arg03, arg03
294b8     1C 4E 05 F1 | 	add	fp, #28
294bc     A7 16 62 FC | 	wrlong	arg03, fp
294c0     1C 4E 85 F1 | 	sub	fp, #28
294c4     A7 16 02 FB | 	rdlong	arg03, fp
294c8     18 4E 05 F1 | 	add	fp, #24
294cc     A7 00 68 FC | 	wrlong	#0, fp
294d0     14 16 06 F1 | 	add	arg03, #20
294d4     0B 01 68 FC | 	wrlong	#0, arg03
294d8     14 4E 85 F1 | 	sub	fp, #20
294dc     A7 16 02 FB | 	rdlong	arg03, fp
294e0     08 4E 85 F1 | 	sub	fp, #8
294e4     01 16 16 F2 | 	cmp	arg03, #1 wc
294e8     E4 03 90 CD |  if_b	jmp	#LR__4197
294ec     10 4E 05 F1 | 	add	fp, #16
294f0     A7 16 02 FB | 	rdlong	arg03, fp
294f4     0A 16 06 F1 | 	add	arg03, #10
294f8     0B 19 E2 FA | 	rdword	arg04, arg03
294fc     09 18 66 F0 | 	shl	arg04, #9
29500     08 4E 05 F1 | 	add	fp, #8
29504     A7 18 62 FC | 	wrlong	arg04, fp
29508     08 4E 05 F1 | 	add	fp, #8
2950c     A7 18 02 FB | 	rdlong	arg04, fp
29510     20 4E 85 F1 | 	sub	fp, #32
29514     01 18 16 F2 | 	cmp	arg04, #1 wc
29518     AC 00 90 CD |  if_b	jmp	#LR__4182
2951c     08 4E 05 F1 | 	add	fp, #8
29520     A7 18 02 FB | 	rdlong	arg04, fp
29524     01 18 86 F1 | 	sub	arg04, #1
29528     10 4E 05 F1 | 	add	fp, #16
2952c     A7 16 02 FB | 	rdlong	arg03, fp
29530     0B 19 12 FD | 	qdiv	arg04, arg03
29534     08 4E 05 F1 | 	add	fp, #8
29538     A7 FA 01 FB | 	rdlong	result1, fp
2953c     01 FA 85 F1 | 	sub	result1, #1
29540     18 18 62 FD | 	getqx	arg04
29544     0B FB 11 FD | 	qdiv	result1, arg03
29548     20 4E 85 F1 | 	sub	fp, #32
2954c     18 16 62 FD | 	getqx	arg03
29550     0B 19 12 F2 | 	cmp	arg04, arg03 wc
29554     70 00 90 CD |  if_b	jmp	#LR__4182
29558     04 4E 05 F1 | 	add	fp, #4
2955c     A7 16 02 FB | 	rdlong	arg03, fp
29560     1C 4E 05 F1 | 	add	fp, #28
29564     A7 FA 01 FB | 	rdlong	result1, fp
29568     01 FA 85 F1 | 	sub	result1, #1
2956c     08 4E 85 F1 | 	sub	fp, #8
29570     A7 18 02 FB | 	rdlong	arg04, fp
29574     01 18 86 F1 | 	sub	arg04, #1
29578     0C FB 21 F5 | 	andn	result1, arg04
2957c     14 16 06 F1 | 	add	arg03, #20
29580     0B FB 61 FC | 	wrlong	result1, arg03
29584     10 4E 85 F1 | 	sub	fp, #16
29588     A7 16 02 FB | 	rdlong	arg03, fp
2958c     04 4E 85 F1 | 	sub	fp, #4
29590     A7 18 02 FB | 	rdlong	arg04, fp
29594     14 18 06 F1 | 	add	arg04, #20
29598     0C 19 02 FB | 	rdlong	arg04, arg04
2959c     0C 17 82 F1 | 	sub	arg03, arg04
295a0     04 4E 05 F1 | 	add	fp, #4
295a4     A7 16 62 FC | 	wrlong	arg03, fp
295a8     04 4E 85 F1 | 	sub	fp, #4
295ac     A7 16 02 FB | 	rdlong	arg03, fp
295b0     18 16 06 F1 | 	add	arg03, #24
295b4     0B 17 02 FB | 	rdlong	arg03, arg03
295b8     10 4E 05 F1 | 	add	fp, #16
295bc     A7 16 62 FC | 	wrlong	arg03, fp
295c0     14 4E 85 F1 | 	sub	fp, #20
295c4     D0 00 90 FD | 	jmp	#LR__4186
295c8                 | LR__4182
295c8     04 4E 05 F1 | 	add	fp, #4
295cc     A7 16 02 FB | 	rdlong	arg03, fp
295d0     08 16 06 F1 | 	add	arg03, #8
295d4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
295d8     10 4E 05 F1 | 	add	fp, #16
295dc     A7 16 62 FC | 	wrlong	arg03, fp
295e0     14 4E 85 F1 | 	sub	fp, #20
295e4     94 00 90 5D |  if_ne	jmp	#LR__4185
295e8     04 4E 05 F1 | 	add	fp, #4
295ec     A7 12 02 FB | 	rdlong	arg01, fp
295f0     04 4E 85 F1 | 	sub	fp, #4
295f4     00 14 06 F6 | 	mov	arg02, #0
295f8     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
295fc     14 4E 05 F1 | 	add	fp, #20
29600     A7 FA 61 FC | 	wrlong	result1, fp
29604     14 4E 85 F1 | 	sub	fp, #20
29608     01 FA 0D F2 | 	cmp	result1, #1 wz
2960c     1C 00 90 5D |  if_ne	jmp	#LR__4183
29610     04 4E 05 F1 | 	add	fp, #4
29614     A7 16 02 FB | 	rdlong	arg03, fp
29618     04 4E 85 F1 | 	sub	fp, #4
2961c     11 16 06 F1 | 	add	arg03, #17
29620     0B 05 48 FC | 	wrbyte	#2, arg03
29624     02 FA 05 F6 | 	mov	result1, #2
29628     5C 04 90 FD | 	jmp	#LR__4203
2962c                 | LR__4183
2962c     14 4E 05 F1 | 	add	fp, #20
29630     A7 FA 01 FB | 	rdlong	result1, fp
29634     14 4E 85 F1 | 	sub	fp, #20
29638     FF FF 7F FF 
2963c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
29640     1C 00 90 5D |  if_ne	jmp	#LR__4184
29644     04 4E 05 F1 | 	add	fp, #4
29648     A7 16 02 FB | 	rdlong	arg03, fp
2964c     04 4E 85 F1 | 	sub	fp, #4
29650     11 16 06 F1 | 	add	arg03, #17
29654     0B 03 48 FC | 	wrbyte	#1, arg03
29658     01 FA 05 F6 | 	mov	result1, #1
2965c     28 04 90 FD | 	jmp	#LR__4203
29660                 | LR__4184
29660     04 4E 05 F1 | 	add	fp, #4
29664     A7 16 02 FB | 	rdlong	arg03, fp
29668     10 4E 05 F1 | 	add	fp, #16
2966c     A7 18 02 FB | 	rdlong	arg04, fp
29670     14 4E 85 F1 | 	sub	fp, #20
29674     08 16 06 F1 | 	add	arg03, #8
29678     0B 19 62 FC | 	wrlong	arg04, arg03
2967c                 | LR__4185
2967c     04 4E 05 F1 | 	add	fp, #4
29680     A7 16 02 FB | 	rdlong	arg03, fp
29684     10 4E 05 F1 | 	add	fp, #16
29688     A7 18 02 FB | 	rdlong	arg04, fp
2968c     14 4E 85 F1 | 	sub	fp, #20
29690     18 16 06 F1 | 	add	arg03, #24
29694     0B 19 62 FC | 	wrlong	arg04, arg03
29698                 | LR__4186
29698     14 4E 05 F1 | 	add	fp, #20
2969c     A7 16 0A FB | 	rdlong	arg03, fp wz
296a0     14 4E 85 F1 | 	sub	fp, #20
296a4     28 02 90 AD |  if_e	jmp	#LR__4196
296a8                 | ' 				while (ofs > bcs) {
296a8                 | LR__4187
296a8     08 4E 05 F1 | 	add	fp, #8
296ac     A7 18 02 FB | 	rdlong	arg04, fp
296b0     10 4E 05 F1 | 	add	fp, #16
296b4     A7 16 02 FB | 	rdlong	arg03, fp
296b8     18 4E 85 F1 | 	sub	fp, #24
296bc     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
296c0     68 01 90 ED |  if_be	jmp	#LR__4193
296c4     08 4E 05 F1 | 	add	fp, #8
296c8     A7 18 02 FB | 	rdlong	arg04, fp
296cc     10 4E 05 F1 | 	add	fp, #16
296d0     A7 16 02 FB | 	rdlong	arg03, fp
296d4     0B 19 82 F1 | 	sub	arg04, arg03
296d8     10 4E 85 F1 | 	sub	fp, #16
296dc     A7 18 62 FC | 	wrlong	arg04, fp
296e0     04 4E 85 F1 | 	sub	fp, #4
296e4     A7 18 02 FB | 	rdlong	arg04, fp
296e8     0C FB 01 F6 | 	mov	result1, arg04
296ec     14 18 06 F1 | 	add	arg04, #20
296f0     0C 19 02 FB | 	rdlong	arg04, arg04
296f4     14 4E 05 F1 | 	add	fp, #20
296f8     A7 16 02 FB | 	rdlong	arg03, fp
296fc     0B 19 02 F1 | 	add	arg04, arg03
29700     14 FA 05 F1 | 	add	result1, #20
29704     FD 18 62 FC | 	wrlong	arg04, result1
29708     14 4E 85 F1 | 	sub	fp, #20
2970c     A7 16 02 FB | 	rdlong	arg03, fp
29710     04 4E 85 F1 | 	sub	fp, #4
29714     10 16 06 F1 | 	add	arg03, #16
29718     0B 17 C2 FA | 	rdbyte	arg03, arg03
2971c     02 16 CE F7 | 	test	arg03, #2 wz
29720     3C 00 90 AD |  if_e	jmp	#LR__4188
29724     04 4E 05 F1 | 	add	fp, #4
29728     A7 12 02 FB | 	rdlong	arg01, fp
2972c     10 4E 05 F1 | 	add	fp, #16
29730     A7 14 02 FB | 	rdlong	arg02, fp
29734     14 4E 85 F1 | 	sub	fp, #20
29738     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2973c     14 4E 05 F1 | 	add	fp, #20
29740     A7 FA 61 FC | 	wrlong	result1, fp
29744     00 FA 4D F2 | 	cmps	result1, #0 wz
29748     14 4E 85 F1 | 	sub	fp, #20
2974c     08 4E 05 A1 |  if_e	add	fp, #8
29750     A7 00 68 AC |  if_e	wrlong	#0, fp
29754     08 4E 85 A1 |  if_e	sub	fp, #8
29758                 | ' 							ofs = 0; break;
29758     D0 00 90 AD |  if_e	jmp	#LR__4193
2975c     24 00 90 FD | 	jmp	#LR__4189
29760                 | LR__4188
29760     04 4E 05 F1 | 	add	fp, #4
29764     A7 12 02 FB | 	rdlong	arg01, fp
29768     10 4E 05 F1 | 	add	fp, #16
2976c     A7 14 02 FB | 	rdlong	arg02, fp
29770     14 4E 85 F1 | 	sub	fp, #20
29774     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
29778     14 4E 05 F1 | 	add	fp, #20
2977c     A7 FA 61 FC | 	wrlong	result1, fp
29780     14 4E 85 F1 | 	sub	fp, #20
29784                 | LR__4189
29784     14 4E 05 F1 | 	add	fp, #20
29788     A7 16 02 FB | 	rdlong	arg03, fp
2978c     14 4E 85 F1 | 	sub	fp, #20
29790     FF FF 7F FF 
29794     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
29798     1C 00 90 5D |  if_ne	jmp	#LR__4190
2979c     04 4E 05 F1 | 	add	fp, #4
297a0     A7 16 02 FB | 	rdlong	arg03, fp
297a4     04 4E 85 F1 | 	sub	fp, #4
297a8     11 16 06 F1 | 	add	arg03, #17
297ac     0B 03 48 FC | 	wrbyte	#1, arg03
297b0     01 FA 05 F6 | 	mov	result1, #1
297b4     D0 02 90 FD | 	jmp	#LR__4203
297b8                 | LR__4190
297b8     14 4E 05 F1 | 	add	fp, #20
297bc     A7 16 02 FB | 	rdlong	arg03, fp
297c0     14 4E 85 F1 | 	sub	fp, #20
297c4     02 16 16 F2 | 	cmp	arg03, #2 wc
297c8     24 00 90 CD |  if_b	jmp	#LR__4191
297cc     10 4E 05 F1 | 	add	fp, #16
297d0     A7 18 02 FB | 	rdlong	arg04, fp
297d4     04 4E 05 F1 | 	add	fp, #4
297d8     A7 16 02 FB | 	rdlong	arg03, fp
297dc     14 4E 85 F1 | 	sub	fp, #20
297e0     18 18 06 F1 | 	add	arg04, #24
297e4     0C 19 02 FB | 	rdlong	arg04, arg04
297e8     0C 17 12 F2 | 	cmp	arg03, arg04 wc
297ec     1C 00 90 CD |  if_b	jmp	#LR__4192
297f0                 | LR__4191
297f0     04 4E 05 F1 | 	add	fp, #4
297f4     A7 16 02 FB | 	rdlong	arg03, fp
297f8     04 4E 85 F1 | 	sub	fp, #4
297fc     11 16 06 F1 | 	add	arg03, #17
29800     0B 05 48 FC | 	wrbyte	#2, arg03
29804     02 FA 05 F6 | 	mov	result1, #2
29808     7C 02 90 FD | 	jmp	#LR__4203
2980c                 | LR__4192
2980c     04 4E 05 F1 | 	add	fp, #4
29810     A7 18 02 FB | 	rdlong	arg04, fp
29814     10 4E 05 F1 | 	add	fp, #16
29818     A7 16 02 FB | 	rdlong	arg03, fp
2981c     14 4E 85 F1 | 	sub	fp, #20
29820     18 18 06 F1 | 	add	arg04, #24
29824     0C 17 62 FC | 	wrlong	arg03, arg04
29828     7C FE 9F FD | 	jmp	#LR__4187
2982c                 | LR__4193
2982c     04 4E 05 F1 | 	add	fp, #4
29830     A7 16 02 FB | 	rdlong	arg03, fp
29834     0B 13 02 F6 | 	mov	arg01, arg03
29838     14 16 06 F1 | 	add	arg03, #20
2983c     0B 15 02 FB | 	rdlong	arg02, arg03
29840     04 4E 05 F1 | 	add	fp, #4
29844     A7 16 02 FB | 	rdlong	arg03, fp
29848     0B 15 02 F1 | 	add	arg02, arg03
2984c     14 12 06 F1 | 	add	arg01, #20
29850     09 15 62 FC | 	wrlong	arg02, arg01
29854     A7 16 02 FB | 	rdlong	arg03, fp
29858     08 4E 85 F1 | 	sub	fp, #8
2985c     FF 17 CE F7 | 	test	arg03, #511 wz
29860     6C 00 90 AD |  if_e	jmp	#LR__4195
29864     10 4E 05 F1 | 	add	fp, #16
29868     A7 12 02 FB | 	rdlong	arg01, fp
2986c     04 4E 05 F1 | 	add	fp, #4
29870     A7 14 02 FB | 	rdlong	arg02, fp
29874     14 4E 85 F1 | 	sub	fp, #20
29878     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2987c     1C 4E 05 F1 | 	add	fp, #28
29880     A7 FA 61 FC | 	wrlong	result1, fp
29884     1C 4E 85 F1 | 	sub	fp, #28
29888     00 FA 0D F2 | 	cmp	result1, #0 wz
2988c     1C 00 90 5D |  if_ne	jmp	#LR__4194
29890     04 4E 05 F1 | 	add	fp, #4
29894     A7 16 02 FB | 	rdlong	arg03, fp
29898     04 4E 85 F1 | 	sub	fp, #4
2989c     11 16 06 F1 | 	add	arg03, #17
298a0     0B 05 48 FC | 	wrbyte	#2, arg03
298a4     02 FA 05 F6 | 	mov	result1, #2
298a8     DC 01 90 FD | 	jmp	#LR__4203
298ac                 | LR__4194
298ac     1C 4E 05 F1 | 	add	fp, #28
298b0     A7 18 02 FB | 	rdlong	arg04, fp
298b4     14 4E 85 F1 | 	sub	fp, #20
298b8     A7 16 02 FB | 	rdlong	arg03, fp
298bc     09 16 46 F0 | 	shr	arg03, #9
298c0     0B 19 02 F1 | 	add	arg04, arg03
298c4     14 4E 05 F1 | 	add	fp, #20
298c8     A7 18 62 FC | 	wrlong	arg04, fp
298cc     1C 4E 85 F1 | 	sub	fp, #28
298d0                 | LR__4195
298d0                 | LR__4196
298d0                 | LR__4197
298d0     04 4E 05 F1 | 	add	fp, #4
298d4     A7 18 02 FB | 	rdlong	arg04, fp
298d8     0C 17 02 F6 | 	mov	arg03, arg04
298dc     04 4E 85 F1 | 	sub	fp, #4
298e0     14 16 06 F1 | 	add	arg03, #20
298e4     0B 17 02 FB | 	rdlong	arg03, arg03
298e8     0C 18 06 F1 | 	add	arg04, #12
298ec     0C 19 02 FB | 	rdlong	arg04, arg04
298f0     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
298f4     3C 00 90 ED |  if_be	jmp	#LR__4198
298f8     04 4E 05 F1 | 	add	fp, #4
298fc     A7 18 02 FB | 	rdlong	arg04, fp
29900     0C 17 02 F6 | 	mov	arg03, arg04
29904     14 18 06 F1 | 	add	arg04, #20
29908     0C 19 02 FB | 	rdlong	arg04, arg04
2990c     0C 16 06 F1 | 	add	arg03, #12
29910     0B 19 62 FC | 	wrlong	arg04, arg03
29914     A7 18 02 FB | 	rdlong	arg04, fp
29918     0C 17 02 F6 | 	mov	arg03, arg04
2991c     04 4E 85 F1 | 	sub	fp, #4
29920     10 18 06 F1 | 	add	arg04, #16
29924     0C 19 C2 FA | 	rdbyte	arg04, arg04
29928     40 18 46 F5 | 	or	arg04, #64
2992c     10 16 06 F1 | 	add	arg03, #16
29930     0B 19 42 FC | 	wrbyte	arg04, arg03
29934                 | LR__4198
29934     04 4E 05 F1 | 	add	fp, #4
29938     A7 16 02 FB | 	rdlong	arg03, fp
2993c     04 4E 85 F1 | 	sub	fp, #4
29940     14 16 06 F1 | 	add	arg03, #20
29944     0B 17 02 FB | 	rdlong	arg03, arg03
29948     FF 17 CE F7 | 	test	arg03, #511 wz
2994c     2C 01 90 AD |  if_e	jmp	#LR__4202
29950     04 4E 05 F1 | 	add	fp, #4
29954     A7 18 02 FB | 	rdlong	arg04, fp
29958     18 4E 05 F1 | 	add	fp, #24
2995c     A7 16 02 FB | 	rdlong	arg03, fp
29960     1C 4E 85 F1 | 	sub	fp, #28
29964     1C 18 06 F1 | 	add	arg04, #28
29968     0C 19 02 FB | 	rdlong	arg04, arg04
2996c     0C 17 0A F2 | 	cmp	arg03, arg04 wz
29970     08 01 90 AD |  if_e	jmp	#LR__4202
29974     04 4E 05 F1 | 	add	fp, #4
29978     A7 16 02 FB | 	rdlong	arg03, fp
2997c     04 4E 85 F1 | 	sub	fp, #4
29980     10 16 06 F1 | 	add	arg03, #16
29984     0B 17 C2 FA | 	rdbyte	arg03, arg03
29988     80 16 CE F7 | 	test	arg03, #128 wz
2998c     7C 00 90 AD |  if_e	jmp	#LR__4200
29990     10 4E 05 F1 | 	add	fp, #16
29994     A7 16 02 FB | 	rdlong	arg03, fp
29998     01 16 06 F1 | 	add	arg03, #1
2999c     0B 13 C2 FA | 	rdbyte	arg01, arg03
299a0     0C 4E 85 F1 | 	sub	fp, #12
299a4     A7 16 02 FB | 	rdlong	arg03, fp
299a8     0B 15 02 F6 | 	mov	arg02, arg03
299ac     28 14 06 F1 | 	add	arg02, #40
299b0     04 4E 85 F1 | 	sub	fp, #4
299b4     1C 16 06 F1 | 	add	arg03, #28
299b8     0B 17 02 FB | 	rdlong	arg03, arg03
299bc     01 18 06 F6 | 	mov	arg04, #1
299c0     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
299c4     00 FA 0D F2 | 	cmp	result1, #0 wz
299c8     1C 00 90 AD |  if_e	jmp	#LR__4199
299cc     04 4E 05 F1 | 	add	fp, #4
299d0     A7 16 02 FB | 	rdlong	arg03, fp
299d4     04 4E 85 F1 | 	sub	fp, #4
299d8     11 16 06 F1 | 	add	arg03, #17
299dc     0B 03 48 FC | 	wrbyte	#1, arg03
299e0     01 FA 05 F6 | 	mov	result1, #1
299e4     A0 00 90 FD | 	jmp	#LR__4203
299e8                 | LR__4199
299e8     04 4E 05 F1 | 	add	fp, #4
299ec     A7 18 02 FB | 	rdlong	arg04, fp
299f0     0C 17 02 F6 | 	mov	arg03, arg04
299f4     04 4E 85 F1 | 	sub	fp, #4
299f8     10 18 06 F1 | 	add	arg04, #16
299fc     0C 19 C2 FA | 	rdbyte	arg04, arg04
29a00     7F 18 06 F5 | 	and	arg04, #127
29a04     10 16 06 F1 | 	add	arg03, #16
29a08     0B 19 42 FC | 	wrbyte	arg04, arg03
29a0c                 | LR__4200
29a0c     10 4E 05 F1 | 	add	fp, #16
29a10     A7 16 02 FB | 	rdlong	arg03, fp
29a14     01 16 06 F1 | 	add	arg03, #1
29a18     0B 13 C2 FA | 	rdbyte	arg01, arg03
29a1c     0C 4E 85 F1 | 	sub	fp, #12
29a20     A7 14 02 FB | 	rdlong	arg02, fp
29a24     28 14 06 F1 | 	add	arg02, #40
29a28     18 4E 05 F1 | 	add	fp, #24
29a2c     A7 16 02 FB | 	rdlong	arg03, fp
29a30     1C 4E 85 F1 | 	sub	fp, #28
29a34     01 18 06 F6 | 	mov	arg04, #1
29a38     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
29a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
29a40     1C 00 90 AD |  if_e	jmp	#LR__4201
29a44     04 4E 05 F1 | 	add	fp, #4
29a48     A7 16 02 FB | 	rdlong	arg03, fp
29a4c     04 4E 85 F1 | 	sub	fp, #4
29a50     11 16 06 F1 | 	add	arg03, #17
29a54     0B 03 48 FC | 	wrbyte	#1, arg03
29a58     01 FA 05 F6 | 	mov	result1, #1
29a5c     28 00 90 FD | 	jmp	#LR__4203
29a60                 | LR__4201
29a60     04 4E 05 F1 | 	add	fp, #4
29a64     A7 18 02 FB | 	rdlong	arg04, fp
29a68     18 4E 05 F1 | 	add	fp, #24
29a6c     A7 16 02 FB | 	rdlong	arg03, fp
29a70     1C 4E 85 F1 | 	sub	fp, #28
29a74     1C 18 06 F1 | 	add	arg04, #28
29a78     0C 17 62 FC | 	wrlong	arg03, arg04
29a7c                 | LR__4202
29a7c                 | ' 
29a7c                 | ' 			fp->sect = nsect;
29a7c                 | ' 		}
29a7c                 | ' 	}
29a7c                 | ' 
29a7c                 | ' 	return res ;
29a7c     0C 4E 05 F1 | 	add	fp, #12
29a80     A7 FA 01 FB | 	rdlong	result1, fp
29a84     0C 4E 85 F1 | 	sub	fp, #12
29a88                 | LR__4203
29a88     A7 F0 03 F6 | 	mov	ptra, fp
29a8c     B2 00 A0 FD | 	call	#popregs_
29a90                 | _fatfs_cc_f_lseek_ret
29a90     2D 00 64 FD | 	ret
29a94                 | 
29a94                 | _fatfs_cc_f_opendir
29a94     01 4A 05 F6 | 	mov	COUNT_, #1
29a98     A8 00 A0 FD | 	call	#pushregs_
29a9c     14 F0 07 F1 | 	add	ptra, #20
29aa0     04 4E 05 F1 | 	add	fp, #4
29aa4     A7 12 62 FC | 	wrlong	arg01, fp
29aa8     04 4E 05 F1 | 	add	fp, #4
29aac     A7 14 62 FC | 	wrlong	arg02, fp
29ab0     04 4E 85 F1 | 	sub	fp, #4
29ab4     A7 16 0A FB | 	rdlong	arg03, fp wz
29ab8     04 4E 85 F1 | 	sub	fp, #4
29abc     09 FA 05 A6 |  if_e	mov	result1, #9
29ac0     78 01 90 AD |  if_e	jmp	#LR__4216
29ac4     08 4E 05 F1 | 	add	fp, #8
29ac8     A7 12 02 F6 | 	mov	arg01, fp
29acc     08 4E 05 F1 | 	add	fp, #8
29ad0     A7 14 02 F6 | 	mov	arg02, fp
29ad4     10 4E 85 F1 | 	sub	fp, #16
29ad8     00 16 06 F6 | 	mov	arg03, #0
29adc     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
29ae0     0C 4E 05 F1 | 	add	fp, #12
29ae4     A7 FA 61 FC | 	wrlong	result1, fp
29ae8     0C 4E 85 F1 | 	sub	fp, #12
29aec     00 FA 0D F2 | 	cmp	result1, #0 wz
29af0     20 01 90 5D |  if_ne	jmp	#LR__4215
29af4     04 4E 05 F1 | 	add	fp, #4
29af8     A7 16 02 FB | 	rdlong	arg03, fp
29afc     0C 4E 05 F1 | 	add	fp, #12
29b00     A7 FA 01 FB | 	rdlong	result1, fp
29b04     0B FB 61 FC | 	wrlong	result1, arg03
29b08     0C 4E 85 F1 | 	sub	fp, #12
29b0c     A7 12 02 FB | 	rdlong	arg01, fp
29b10     04 4E 05 F1 | 	add	fp, #4
29b14     A7 14 02 FB | 	rdlong	arg02, fp
29b18     08 4E 85 F1 | 	sub	fp, #8
29b1c     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
29b20     0C 4E 05 F1 | 	add	fp, #12
29b24     A7 FA 61 FC | 	wrlong	result1, fp
29b28     0C 4E 85 F1 | 	sub	fp, #12
29b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
29b30     C4 00 90 5D |  if_ne	jmp	#LR__4214
29b34     04 4E 05 F1 | 	add	fp, #4
29b38     A7 16 02 FB | 	rdlong	arg03, fp
29b3c     04 4E 85 F1 | 	sub	fp, #4
29b40     2B 16 06 F1 | 	add	arg03, #43
29b44     0B 17 C2 FA | 	rdbyte	arg03, arg03
29b48     80 16 CE F7 | 	test	arg03, #128 wz
29b4c     58 00 90 5D |  if_ne	jmp	#LR__4212
29b50     04 4E 05 F1 | 	add	fp, #4
29b54     A7 16 02 FB | 	rdlong	arg03, fp
29b58     04 4E 85 F1 | 	sub	fp, #4
29b5c     06 16 06 F1 | 	add	arg03, #6
29b60     0B 17 C2 FA | 	rdbyte	arg03, arg03
29b64     10 16 CE F7 | 	test	arg03, #16 wz
29b68     30 00 90 AD |  if_e	jmp	#LR__4210
29b6c     04 4E 05 F1 | 	add	fp, #4
29b70     A7 16 02 FB | 	rdlong	arg03, fp
29b74     0B 1F 02 F6 | 	mov	local01, arg03
29b78     0C 4E 05 F1 | 	add	fp, #12
29b7c     A7 12 02 FB | 	rdlong	arg01, fp
29b80     10 4E 85 F1 | 	sub	fp, #16
29b84     1C 16 06 F1 | 	add	arg03, #28
29b88     0B 15 02 FB | 	rdlong	arg02, arg03
29b8c     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
29b90     08 1E 06 F1 | 	add	local01, #8
29b94     0F FB 61 FC | 	wrlong	result1, local01
29b98     0C 00 90 FD | 	jmp	#LR__4211
29b9c                 | LR__4210
29b9c     0C 4E 05 F1 | 	add	fp, #12
29ba0     A7 0A 68 FC | 	wrlong	#5, fp
29ba4     0C 4E 85 F1 | 	sub	fp, #12
29ba8                 | LR__4211
29ba8                 | LR__4212
29ba8     0C 4E 05 F1 | 	add	fp, #12
29bac     A7 1E 0A FB | 	rdlong	local01, fp wz
29bb0     0C 4E 85 F1 | 	sub	fp, #12
29bb4     40 00 90 5D |  if_ne	jmp	#LR__4213
29bb8     04 4E 05 F1 | 	add	fp, #4
29bbc     A7 1E 02 FB | 	rdlong	local01, fp
29bc0     0C 4E 05 F1 | 	add	fp, #12
29bc4     A7 16 02 FB | 	rdlong	arg03, fp
29bc8     06 16 06 F1 | 	add	arg03, #6
29bcc     0B 17 E2 FA | 	rdword	arg03, arg03
29bd0     04 1E 06 F1 | 	add	local01, #4
29bd4     0F 17 52 FC | 	wrword	arg03, local01
29bd8     0C 4E 85 F1 | 	sub	fp, #12
29bdc     A7 12 02 FB | 	rdlong	arg01, fp
29be0     04 4E 85 F1 | 	sub	fp, #4
29be4     00 14 06 F6 | 	mov	arg02, #0
29be8     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
29bec     0C 4E 05 F1 | 	add	fp, #12
29bf0     A7 FA 61 FC | 	wrlong	result1, fp
29bf4     0C 4E 85 F1 | 	sub	fp, #12
29bf8                 | LR__4213
29bf8                 | LR__4214
29bf8     0C 4E 05 F1 | 	add	fp, #12
29bfc     A7 1E 02 FB | 	rdlong	local01, fp
29c00     0C 4E 85 F1 | 	sub	fp, #12
29c04     04 1E 0E F2 | 	cmp	local01, #4 wz
29c08     0C 4E 05 A1 |  if_e	add	fp, #12
29c0c     A7 0A 68 AC |  if_e	wrlong	#5, fp
29c10     0C 4E 85 A1 |  if_e	sub	fp, #12
29c14                 | LR__4215
29c14     0C 4E 05 F1 | 	add	fp, #12
29c18     A7 1E 0A FB | 	rdlong	local01, fp wz
29c1c     0C 4E 85 F1 | 	sub	fp, #12
29c20     04 4E 05 51 |  if_ne	add	fp, #4
29c24     A7 1E 02 5B |  if_ne	rdlong	local01, fp
29c28     04 4E 85 51 |  if_ne	sub	fp, #4
29c2c     0F 01 68 5C |  if_ne	wrlong	#0, local01
29c30                 | ' 
29c30                 | ' 	return res ;
29c30     0C 4E 05 F1 | 	add	fp, #12
29c34     A7 FA 01 FB | 	rdlong	result1, fp
29c38     0C 4E 85 F1 | 	sub	fp, #12
29c3c                 | LR__4216
29c3c     A7 F0 03 F6 | 	mov	ptra, fp
29c40     B2 00 A0 FD | 	call	#popregs_
29c44                 | _fatfs_cc_f_opendir_ret
29c44     2D 00 64 FD | 	ret
29c48                 | 
29c48                 | _fatfs_cc_f_closedir
29c48     00 4A 05 F6 | 	mov	COUNT_, #0
29c4c     A8 00 A0 FD | 	call	#pushregs_
29c50     10 F0 07 F1 | 	add	ptra, #16
29c54     04 4E 05 F1 | 	add	fp, #4
29c58     A7 12 62 FC | 	wrlong	arg01, fp
29c5c     08 4E 05 F1 | 	add	fp, #8
29c60     A7 14 02 F6 | 	mov	arg02, fp
29c64     0C 4E 85 F1 | 	sub	fp, #12
29c68     C0 DD BF FD | 	call	#_fatfs_cc_validate
29c6c     08 4E 05 F1 | 	add	fp, #8
29c70     A7 FA 61 FC | 	wrlong	result1, fp
29c74     08 4E 85 F1 | 	sub	fp, #8
29c78     00 FA 0D F2 | 	cmp	result1, #0 wz
29c7c     04 4E 05 A1 |  if_e	add	fp, #4
29c80     A7 FA 01 AB |  if_e	rdlong	result1, fp
29c84     04 4E 85 A1 |  if_e	sub	fp, #4
29c88     FD 00 68 AC |  if_e	wrlong	#0, result1
29c8c                 | ' 
29c8c                 | ' 
29c8c                 | ' 
29c8c                 | ' 
29c8c                 | ' 		dp->obj.fs = 0;
29c8c                 | ' #line 4633 "ff.c"
29c8c                 | ' 	}
29c8c                 | ' 	return res;
29c8c     08 4E 05 F1 | 	add	fp, #8
29c90     A7 FA 01 FB | 	rdlong	result1, fp
29c94     08 4E 85 F1 | 	sub	fp, #8
29c98     A7 F0 03 F6 | 	mov	ptra, fp
29c9c     B2 00 A0 FD | 	call	#popregs_
29ca0                 | _fatfs_cc_f_closedir_ret
29ca0     2D 00 64 FD | 	ret
29ca4                 | 
29ca4                 | _fatfs_cc_f_readdir
29ca4     00 4A 05 F6 | 	mov	COUNT_, #0
29ca8     A8 00 A0 FD | 	call	#pushregs_
29cac     14 F0 07 F1 | 	add	ptra, #20
29cb0     04 4E 05 F1 | 	add	fp, #4
29cb4     A7 12 62 FC | 	wrlong	arg01, fp
29cb8     04 4E 05 F1 | 	add	fp, #4
29cbc     A7 14 62 FC | 	wrlong	arg02, fp
29cc0     04 4E 85 F1 | 	sub	fp, #4
29cc4     A7 12 02 FB | 	rdlong	arg01, fp
29cc8     0C 4E 05 F1 | 	add	fp, #12
29ccc     A7 14 02 F6 | 	mov	arg02, fp
29cd0     10 4E 85 F1 | 	sub	fp, #16
29cd4     54 DD BF FD | 	call	#_fatfs_cc_validate
29cd8     0C 4E 05 F1 | 	add	fp, #12
29cdc     A7 FA 61 FC | 	wrlong	result1, fp
29ce0     0C 4E 85 F1 | 	sub	fp, #12
29ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
29ce8     BC 00 90 5D |  if_ne	jmp	#LR__4223
29cec     08 4E 05 F1 | 	add	fp, #8
29cf0     A7 FA 09 FB | 	rdlong	result1, fp wz
29cf4     08 4E 85 F1 | 	sub	fp, #8
29cf8     24 00 90 5D |  if_ne	jmp	#LR__4220
29cfc     04 4E 05 F1 | 	add	fp, #4
29d00     A7 12 02 FB | 	rdlong	arg01, fp
29d04     04 4E 85 F1 | 	sub	fp, #4
29d08     00 14 06 F6 | 	mov	arg02, #0
29d0c     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
29d10     0C 4E 05 F1 | 	add	fp, #12
29d14     A7 FA 61 FC | 	wrlong	result1, fp
29d18     0C 4E 85 F1 | 	sub	fp, #12
29d1c     88 00 90 FD | 	jmp	#LR__4222
29d20                 | LR__4220
29d20     04 4E 05 F1 | 	add	fp, #4
29d24     A7 12 02 FB | 	rdlong	arg01, fp
29d28     04 4E 85 F1 | 	sub	fp, #4
29d2c     00 14 06 F6 | 	mov	arg02, #0
29d30     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
29d34     0C 4E 05 F1 | 	add	fp, #12
29d38     A7 FA 61 FC | 	wrlong	result1, fp
29d3c     0C 4E 85 F1 | 	sub	fp, #12
29d40     04 FA 0D F2 | 	cmp	result1, #4 wz
29d44     0C 4E 05 A1 |  if_e	add	fp, #12
29d48     A7 00 68 AC |  if_e	wrlong	#0, fp
29d4c     0C 4E 85 A1 |  if_e	sub	fp, #12
29d50     0C 4E 05 F1 | 	add	fp, #12
29d54     A7 FA 09 FB | 	rdlong	result1, fp wz
29d58     0C 4E 85 F1 | 	sub	fp, #12
29d5c     48 00 90 5D |  if_ne	jmp	#LR__4221
29d60     04 4E 05 F1 | 	add	fp, #4
29d64     A7 12 02 FB | 	rdlong	arg01, fp
29d68     04 4E 05 F1 | 	add	fp, #4
29d6c     A7 14 02 FB | 	rdlong	arg02, fp
29d70     08 4E 85 F1 | 	sub	fp, #8
29d74     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
29d78     04 4E 05 F1 | 	add	fp, #4
29d7c     A7 12 02 FB | 	rdlong	arg01, fp
29d80     04 4E 85 F1 | 	sub	fp, #4
29d84     00 14 06 F6 | 	mov	arg02, #0
29d88     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
29d8c     0C 4E 05 F1 | 	add	fp, #12
29d90     A7 FA 61 FC | 	wrlong	result1, fp
29d94     0C 4E 85 F1 | 	sub	fp, #12
29d98     04 FA 0D F2 | 	cmp	result1, #4 wz
29d9c     0C 4E 05 A1 |  if_e	add	fp, #12
29da0     A7 00 68 AC |  if_e	wrlong	#0, fp
29da4     0C 4E 85 A1 |  if_e	sub	fp, #12
29da8                 | LR__4221
29da8                 | LR__4222
29da8                 | LR__4223
29da8                 | ' 			}
29da8                 | ' 			;
29da8                 | ' 		}
29da8                 | ' 	}
29da8                 | ' 	return res ;
29da8     0C 4E 05 F1 | 	add	fp, #12
29dac     A7 FA 01 FB | 	rdlong	result1, fp
29db0     0C 4E 85 F1 | 	sub	fp, #12
29db4     A7 F0 03 F6 | 	mov	ptra, fp
29db8     B2 00 A0 FD | 	call	#popregs_
29dbc                 | _fatfs_cc_f_readdir_ret
29dbc     2D 00 64 FD | 	ret
29dc0                 | 
29dc0                 | _fatfs_cc_f_stat
29dc0     00 4A 05 F6 | 	mov	COUNT_, #0
29dc4     A8 00 A0 FD | 	call	#pushregs_
29dc8     40 F0 07 F1 | 	add	ptra, #64
29dcc     04 4E 05 F1 | 	add	fp, #4
29dd0     A7 12 62 FC | 	wrlong	arg01, fp
29dd4     04 4E 05 F1 | 	add	fp, #4
29dd8     A7 14 62 FC | 	wrlong	arg02, fp
29ddc     04 4E 85 F1 | 	sub	fp, #4
29de0     A7 12 02 F6 | 	mov	arg01, fp
29de4     0C 4E 05 F1 | 	add	fp, #12
29de8     A7 14 02 F6 | 	mov	arg02, fp
29dec     10 4E 85 F1 | 	sub	fp, #16
29df0     00 16 06 F6 | 	mov	arg03, #0
29df4     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
29df8     0C 4E 05 F1 | 	add	fp, #12
29dfc     A7 FA 61 FC | 	wrlong	result1, fp
29e00     0C 4E 85 F1 | 	sub	fp, #12
29e04     00 FA 0D F2 | 	cmp	result1, #0 wz
29e08     74 00 90 5D |  if_ne	jmp	#LR__4233
29e0c     10 4E 05 F1 | 	add	fp, #16
29e10     A7 12 02 F6 | 	mov	arg01, fp
29e14     0C 4E 85 F1 | 	sub	fp, #12
29e18     A7 14 02 FB | 	rdlong	arg02, fp
29e1c     04 4E 85 F1 | 	sub	fp, #4
29e20     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
29e24     0C 4E 05 F1 | 	add	fp, #12
29e28     A7 FA 61 FC | 	wrlong	result1, fp
29e2c     0C 4E 85 F1 | 	sub	fp, #12
29e30     00 FA 0D F2 | 	cmp	result1, #0 wz
29e34     48 00 90 5D |  if_ne	jmp	#LR__4232
29e38     3B 4E 05 F1 | 	add	fp, #59
29e3c     A7 FA C1 FA | 	rdbyte	result1, fp
29e40     3B 4E 85 F1 | 	sub	fp, #59
29e44     80 FA CD F7 | 	test	result1, #128 wz
29e48     0C 4E 05 51 |  if_ne	add	fp, #12
29e4c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
29e50     0C 4E 85 51 |  if_ne	sub	fp, #12
29e54     28 00 90 5D |  if_ne	jmp	#LR__4231
29e58     08 4E 05 F1 | 	add	fp, #8
29e5c     A7 FA 09 FB | 	rdlong	result1, fp wz
29e60     08 4E 85 F1 | 	sub	fp, #8
29e64     18 00 90 AD |  if_e	jmp	#LR__4230
29e68     10 4E 05 F1 | 	add	fp, #16
29e6c     A7 12 02 F6 | 	mov	arg01, fp
29e70     08 4E 85 F1 | 	sub	fp, #8
29e74     A7 14 02 FB | 	rdlong	arg02, fp
29e78     08 4E 85 F1 | 	sub	fp, #8
29e7c     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
29e80                 | LR__4230
29e80                 | LR__4231
29e80                 | LR__4232
29e80                 | LR__4233
29e80                 | ' 			}
29e80                 | ' 		}
29e80                 | ' 		;
29e80                 | ' 	}
29e80                 | ' 
29e80                 | ' 	return res ;
29e80     0C 4E 05 F1 | 	add	fp, #12
29e84     A7 FA 01 FB | 	rdlong	result1, fp
29e88     0C 4E 85 F1 | 	sub	fp, #12
29e8c     A7 F0 03 F6 | 	mov	ptra, fp
29e90     B2 00 A0 FD | 	call	#popregs_
29e94                 | _fatfs_cc_f_stat_ret
29e94     2D 00 64 FD | 	ret
29e98                 | 
29e98                 | _fatfs_cc_f_unlink
29e98     00 4A 05 F6 | 	mov	COUNT_, #0
29e9c     A8 00 A0 FD | 	call	#pushregs_
29ea0     74 F0 07 F1 | 	add	ptra, #116
29ea4     04 4E 05 F1 | 	add	fp, #4
29ea8     A7 12 62 FC | 	wrlong	arg01, fp
29eac     68 4E 05 F1 | 	add	fp, #104
29eb0     A7 00 68 FC | 	wrlong	#0, fp
29eb4     68 4E 85 F1 | 	sub	fp, #104
29eb8     A7 12 02 F6 | 	mov	arg01, fp
29ebc     6C 4E 05 F1 | 	add	fp, #108
29ec0     A7 14 02 F6 | 	mov	arg02, fp
29ec4     70 4E 85 F1 | 	sub	fp, #112
29ec8     02 16 06 F6 | 	mov	arg03, #2
29ecc     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
29ed0     08 4E 05 F1 | 	add	fp, #8
29ed4     A7 FA 61 FC | 	wrlong	result1, fp
29ed8     08 4E 85 F1 | 	sub	fp, #8
29edc     00 FA 0D F2 | 	cmp	result1, #0 wz
29ee0     E4 01 90 5D |  if_ne	jmp	#LR__4248
29ee4     70 4E 05 F1 | 	add	fp, #112
29ee8     A7 16 02 FB | 	rdlong	arg03, fp
29eec     64 4E 85 F1 | 	sub	fp, #100
29ef0     A7 16 62 FC | 	wrlong	arg03, fp
29ef4     A7 12 02 F6 | 	mov	arg01, fp
29ef8     08 4E 85 F1 | 	sub	fp, #8
29efc     A7 14 02 FB | 	rdlong	arg02, fp
29f00     04 4E 85 F1 | 	sub	fp, #4
29f04     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
29f08     08 4E 05 F1 | 	add	fp, #8
29f0c     A7 FA 61 FC | 	wrlong	result1, fp
29f10     00 FA 4D F2 | 	cmps	result1, #0 wz
29f14     08 4E 85 F1 | 	sub	fp, #8
29f18     AC 01 90 5D |  if_ne	jmp	#LR__4247
29f1c     37 4E 05 F1 | 	add	fp, #55
29f20     A7 FA C1 FA | 	rdbyte	result1, fp
29f24     37 4E 85 F1 | 	sub	fp, #55
29f28     80 FA CD F7 | 	test	result1, #128 wz
29f2c     08 4E 05 51 |  if_ne	add	fp, #8
29f30     A7 0C 68 5C |  if_ne	wrlong	#6, fp
29f34     08 4E 85 51 |  if_ne	sub	fp, #8
29f38     1C 00 90 5D |  if_ne	jmp	#LR__4240
29f3c     12 4E 05 F1 | 	add	fp, #18
29f40     A7 FA C1 FA | 	rdbyte	result1, fp
29f44     12 4E 85 F1 | 	sub	fp, #18
29f48     01 FA CD F7 | 	test	result1, #1 wz
29f4c     08 4E 05 51 |  if_ne	add	fp, #8
29f50     A7 0E 68 5C |  if_ne	wrlong	#7, fp
29f54     08 4E 85 51 |  if_ne	sub	fp, #8
29f58                 | LR__4240
29f58     08 4E 05 F1 | 	add	fp, #8
29f5c     A7 FA 09 FB | 	rdlong	result1, fp wz
29f60     08 4E 85 F1 | 	sub	fp, #8
29f64     C8 00 90 5D |  if_ne	jmp	#LR__4243
29f68     70 4E 05 F1 | 	add	fp, #112
29f6c     A7 12 02 FB | 	rdlong	arg01, fp
29f70     48 4E 85 F1 | 	sub	fp, #72
29f74     A7 14 02 FB | 	rdlong	arg02, fp
29f78     28 4E 85 F1 | 	sub	fp, #40
29f7c     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
29f80     6C 4E 05 F1 | 	add	fp, #108
29f84     A7 FA 61 FC | 	wrlong	result1, fp
29f88     5A 4E 85 F1 | 	sub	fp, #90
29f8c     A7 FA C1 FA | 	rdbyte	result1, fp
29f90     12 4E 85 F1 | 	sub	fp, #18
29f94     10 FA CD F7 | 	test	result1, #16 wz
29f98     94 00 90 AD |  if_e	jmp	#LR__4242
29f9c     70 4E 05 F1 | 	add	fp, #112
29fa0     A7 FA 01 FB | 	rdlong	result1, fp
29fa4     34 4E 85 F1 | 	sub	fp, #52
29fa8     A7 FA 61 FC | 	wrlong	result1, fp
29fac     30 4E 05 F1 | 	add	fp, #48
29fb0     A7 16 02 FB | 	rdlong	arg03, fp
29fb4     28 4E 85 F1 | 	sub	fp, #40
29fb8     A7 16 62 FC | 	wrlong	arg03, fp
29fbc     08 4E 85 F1 | 	sub	fp, #8
29fc0     A7 12 02 F6 | 	mov	arg01, fp
29fc4     3C 4E 85 F1 | 	sub	fp, #60
29fc8     00 14 06 F6 | 	mov	arg02, #0
29fcc     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
29fd0     08 4E 05 F1 | 	add	fp, #8
29fd4     A7 FA 61 FC | 	wrlong	result1, fp
29fd8     08 4E 85 F1 | 	sub	fp, #8
29fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
29fe0     4C 00 90 5D |  if_ne	jmp	#LR__4241
29fe4     3C 4E 05 F1 | 	add	fp, #60
29fe8     A7 12 02 F6 | 	mov	arg01, fp
29fec     3C 4E 85 F1 | 	sub	fp, #60
29ff0     00 14 06 F6 | 	mov	arg02, #0
29ff4     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
29ff8     08 4E 05 F1 | 	add	fp, #8
29ffc     A7 FA 61 FC | 	wrlong	result1, fp
2a000     00 FA 4D F2 | 	cmps	result1, #0 wz
2a004     08 4E 85 F1 | 	sub	fp, #8
2a008     08 4E 05 A1 |  if_e	add	fp, #8
2a00c     A7 0E 68 AC |  if_e	wrlong	#7, fp
2a010     08 4E 85 A1 |  if_e	sub	fp, #8
2a014     08 4E 05 F1 | 	add	fp, #8
2a018     A7 FA 01 FB | 	rdlong	result1, fp
2a01c     08 4E 85 F1 | 	sub	fp, #8
2a020     04 FA 0D F2 | 	cmp	result1, #4 wz
2a024     08 4E 05 A1 |  if_e	add	fp, #8
2a028     A7 00 68 AC |  if_e	wrlong	#0, fp
2a02c     08 4E 85 A1 |  if_e	sub	fp, #8
2a030                 | LR__4241
2a030                 | LR__4242
2a030                 | LR__4243
2a030     08 4E 05 F1 | 	add	fp, #8
2a034     A7 FA 09 FB | 	rdlong	result1, fp wz
2a038     08 4E 85 F1 | 	sub	fp, #8
2a03c     88 00 90 5D |  if_ne	jmp	#LR__4246
2a040     0C 4E 05 F1 | 	add	fp, #12
2a044     A7 12 02 F6 | 	mov	arg01, fp
2a048     0C 4E 85 F1 | 	sub	fp, #12
2a04c     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2a050     08 4E 05 F1 | 	add	fp, #8
2a054     A7 FA 61 FC | 	wrlong	result1, fp
2a058     08 4E 85 F1 | 	sub	fp, #8
2a05c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a060     38 00 90 5D |  if_ne	jmp	#LR__4244
2a064     6C 4E 05 F1 | 	add	fp, #108
2a068     A7 FA 09 FB | 	rdlong	result1, fp wz
2a06c     6C 4E 85 F1 | 	sub	fp, #108
2a070     28 00 90 AD |  if_e	jmp	#LR__4244
2a074     0C 4E 05 F1 | 	add	fp, #12
2a078     A7 12 02 F6 | 	mov	arg01, fp
2a07c     60 4E 05 F1 | 	add	fp, #96
2a080     A7 14 02 FB | 	rdlong	arg02, fp
2a084     6C 4E 85 F1 | 	sub	fp, #108
2a088     00 16 06 F6 | 	mov	arg03, #0
2a08c     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2a090     08 4E 05 F1 | 	add	fp, #8
2a094     A7 FA 61 FC | 	wrlong	result1, fp
2a098     08 4E 85 F1 | 	sub	fp, #8
2a09c                 | LR__4244
2a09c     08 4E 05 F1 | 	add	fp, #8
2a0a0     A7 FA 09 FB | 	rdlong	result1, fp wz
2a0a4     08 4E 85 F1 | 	sub	fp, #8
2a0a8     1C 00 90 5D |  if_ne	jmp	#LR__4245
2a0ac     70 4E 05 F1 | 	add	fp, #112
2a0b0     A7 12 02 FB | 	rdlong	arg01, fp
2a0b4     70 4E 85 F1 | 	sub	fp, #112
2a0b8     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2a0bc     08 4E 05 F1 | 	add	fp, #8
2a0c0     A7 FA 61 FC | 	wrlong	result1, fp
2a0c4     08 4E 85 F1 | 	sub	fp, #8
2a0c8                 | LR__4245
2a0c8                 | LR__4246
2a0c8                 | LR__4247
2a0c8                 | LR__4248
2a0c8                 | ' 			}
2a0c8                 | ' 		}
2a0c8                 | ' 		;
2a0c8                 | ' 	}
2a0c8                 | ' 
2a0c8                 | ' 	return res ;
2a0c8     08 4E 05 F1 | 	add	fp, #8
2a0cc     A7 FA 01 FB | 	rdlong	result1, fp
2a0d0     08 4E 85 F1 | 	sub	fp, #8
2a0d4     A7 F0 03 F6 | 	mov	ptra, fp
2a0d8     B2 00 A0 FD | 	call	#popregs_
2a0dc                 | _fatfs_cc_f_unlink_ret
2a0dc     2D 00 64 FD | 	ret
2a0e0                 | 
2a0e0                 | _fatfs_cc_f_mkdir
2a0e0     00 4A 05 F6 | 	mov	COUNT_, #0
2a0e4     A8 00 A0 FD | 	call	#pushregs_
2a0e8     5C F0 07 F1 | 	add	ptra, #92
2a0ec     04 4E 05 F1 | 	add	fp, #4
2a0f0     A7 12 62 FC | 	wrlong	arg01, fp
2a0f4     A7 12 02 F6 | 	mov	arg01, fp
2a0f8     48 4E 05 F1 | 	add	fp, #72
2a0fc     A7 14 02 F6 | 	mov	arg02, fp
2a100     4C 4E 85 F1 | 	sub	fp, #76
2a104     02 16 06 F6 | 	mov	arg03, #2
2a108     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2a10c     08 4E 05 F1 | 	add	fp, #8
2a110     A7 FA 61 FC | 	wrlong	result1, fp
2a114     08 4E 85 F1 | 	sub	fp, #8
2a118     00 FA 0D F2 | 	cmp	result1, #0 wz
2a11c     C4 02 90 5D |  if_ne	jmp	#LR__4255
2a120     4C 4E 05 F1 | 	add	fp, #76
2a124     A7 16 02 FB | 	rdlong	arg03, fp
2a128     40 4E 85 F1 | 	sub	fp, #64
2a12c     A7 16 62 FC | 	wrlong	arg03, fp
2a130     A7 12 02 F6 | 	mov	arg01, fp
2a134     08 4E 85 F1 | 	sub	fp, #8
2a138     A7 14 02 FB | 	rdlong	arg02, fp
2a13c     04 4E 85 F1 | 	sub	fp, #4
2a140     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2a144     08 4E 05 F1 | 	add	fp, #8
2a148     A7 FA 61 FC | 	wrlong	result1, fp
2a14c     00 FA 4D F2 | 	cmps	result1, #0 wz
2a150     08 4E 85 F1 | 	sub	fp, #8
2a154     08 4E 05 A1 |  if_e	add	fp, #8
2a158     A7 10 68 AC |  if_e	wrlong	#8, fp
2a15c     08 4E 85 A1 |  if_e	sub	fp, #8
2a160     08 4E 05 F1 | 	add	fp, #8
2a164     A7 FA 01 FB | 	rdlong	result1, fp
2a168     08 4E 85 F1 | 	sub	fp, #8
2a16c     04 FA 0D F2 | 	cmp	result1, #4 wz
2a170     70 02 90 5D |  if_ne	jmp	#LR__4254
2a174     4C 4E 05 F1 | 	add	fp, #76
2a178     A7 16 02 FB | 	rdlong	arg03, fp
2a17c     10 4E 85 F1 | 	sub	fp, #16
2a180     A7 16 62 FC | 	wrlong	arg03, fp
2a184     A7 12 02 F6 | 	mov	arg01, fp
2a188     3C 4E 85 F1 | 	sub	fp, #60
2a18c     00 14 06 F6 | 	mov	arg02, #0
2a190     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2a194     50 4E 05 F1 | 	add	fp, #80
2a198     A7 FA 61 FC | 	wrlong	result1, fp
2a19c     48 4E 85 F1 | 	sub	fp, #72
2a1a0     A7 00 68 FC | 	wrlong	#0, fp
2a1a4     48 4E 05 F1 | 	add	fp, #72
2a1a8     A7 FA 09 FB | 	rdlong	result1, fp wz
2a1ac     50 4E 85 F1 | 	sub	fp, #80
2a1b0     08 4E 05 A1 |  if_e	add	fp, #8
2a1b4     A7 0E 68 AC |  if_e	wrlong	#7, fp
2a1b8     08 4E 85 A1 |  if_e	sub	fp, #8
2a1bc     50 4E 05 F1 | 	add	fp, #80
2a1c0     A7 FA 01 FB | 	rdlong	result1, fp
2a1c4     50 4E 85 F1 | 	sub	fp, #80
2a1c8     01 FA 0D F2 | 	cmp	result1, #1 wz
2a1cc     08 4E 05 A1 |  if_e	add	fp, #8
2a1d0     A7 04 68 AC |  if_e	wrlong	#2, fp
2a1d4     08 4E 85 A1 |  if_e	sub	fp, #8
2a1d8     50 4E 05 F1 | 	add	fp, #80
2a1dc     A7 16 02 FB | 	rdlong	arg03, fp
2a1e0     50 4E 85 F1 | 	sub	fp, #80
2a1e4     FF FF 7F FF 
2a1e8     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2a1ec     08 4E 05 A1 |  if_e	add	fp, #8
2a1f0     A7 02 68 AC |  if_e	wrlong	#1, fp
2a1f4     08 4E 85 A1 |  if_e	sub	fp, #8
2a1f8     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2a1fc     58 4E 05 F1 | 	add	fp, #88
2a200     A7 FA 61 FC | 	wrlong	result1, fp
2a204     50 4E 85 F1 | 	sub	fp, #80
2a208     A7 FA 09 FB | 	rdlong	result1, fp wz
2a20c     08 4E 85 F1 | 	sub	fp, #8
2a210     1C 01 90 5D |  if_ne	jmp	#LR__4251
2a214     4C 4E 05 F1 | 	add	fp, #76
2a218     A7 12 02 FB | 	rdlong	arg01, fp
2a21c     04 4E 05 F1 | 	add	fp, #4
2a220     A7 14 02 FB | 	rdlong	arg02, fp
2a224     50 4E 85 F1 | 	sub	fp, #80
2a228     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2a22c     08 4E 05 F1 | 	add	fp, #8
2a230     A7 FA 61 FC | 	wrlong	result1, fp
2a234     00 FA 4D F2 | 	cmps	result1, #0 wz
2a238     08 4E 85 F1 | 	sub	fp, #8
2a23c     F0 00 90 5D |  if_ne	jmp	#LR__4250
2a240     4C 4E 05 F1 | 	add	fp, #76
2a244     A7 12 02 FB | 	rdlong	arg01, fp
2a248     4C 4E 85 F1 | 	sub	fp, #76
2a24c     34 12 06 F1 | 	add	arg01, #52
2a250     20 14 06 F6 | 	mov	arg02, #32
2a254     0B 16 06 F6 | 	mov	arg03, #11
2a258     98 00 A0 FD | 	call	#\builtin_bytefill_
2a25c     4C 4E 05 F1 | 	add	fp, #76
2a260     A7 FA 01 FB | 	rdlong	result1, fp
2a264     34 FA 05 F1 | 	add	result1, #52
2a268     FD 5C 48 FC | 	wrbyte	#46, result1
2a26c     A7 16 02 FB | 	rdlong	arg03, fp
2a270     3F 16 06 F1 | 	add	arg03, #63
2a274     0B 21 48 FC | 	wrbyte	#16, arg03
2a278     A7 12 02 FB | 	rdlong	arg01, fp
2a27c     4A 12 06 F1 | 	add	arg01, #74
2a280     0C 4E 05 F1 | 	add	fp, #12
2a284     A7 14 02 FB | 	rdlong	arg02, fp
2a288     09 15 62 FC | 	wrlong	arg02, arg01
2a28c     0C 4E 85 F1 | 	sub	fp, #12
2a290     A7 14 02 FB | 	rdlong	arg02, fp
2a294     0A 13 02 F6 | 	mov	arg01, arg02
2a298     34 14 06 F1 | 	add	arg02, #52
2a29c     04 4E 05 F1 | 	add	fp, #4
2a2a0     A7 16 02 FB | 	rdlong	arg03, fp
2a2a4     50 4E 85 F1 | 	sub	fp, #80
2a2a8     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2a2ac     4C 4E 05 F1 | 	add	fp, #76
2a2b0     A7 14 02 FB | 	rdlong	arg02, fp
2a2b4     0A 13 02 F6 | 	mov	arg01, arg02
2a2b8     54 12 06 F1 | 	add	arg01, #84
2a2bc     4C 4E 85 F1 | 	sub	fp, #76
2a2c0     34 14 06 F1 | 	add	arg02, #52
2a2c4     20 16 06 F6 | 	mov	arg03, #32
2a2c8     D8 2C BF FD | 	call	#__system____builtin_memmove
2a2cc     4C 4E 05 F1 | 	add	fp, #76
2a2d0     A7 16 02 FB | 	rdlong	arg03, fp
2a2d4     55 16 06 F1 | 	add	arg03, #85
2a2d8     0B 5D 48 FC | 	wrbyte	#46, arg03
2a2dc     38 4E 85 F1 | 	sub	fp, #56
2a2e0     A7 16 02 FB | 	rdlong	arg03, fp
2a2e4     40 4E 05 F1 | 	add	fp, #64
2a2e8     A7 16 62 FC | 	wrlong	arg03, fp
2a2ec     08 4E 85 F1 | 	sub	fp, #8
2a2f0     A7 14 02 FB | 	rdlong	arg02, fp
2a2f4     0A 13 02 F6 | 	mov	arg01, arg02
2a2f8     54 14 06 F1 | 	add	arg02, #84
2a2fc     4C 4E 85 F1 | 	sub	fp, #76
2a300     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2a304     4C 4E 05 F1 | 	add	fp, #76
2a308     A7 16 02 FB | 	rdlong	arg03, fp
2a30c     03 16 06 F1 | 	add	arg03, #3
2a310     0B 03 48 FC | 	wrbyte	#1, arg03
2a314     40 4E 85 F1 | 	sub	fp, #64
2a318     A7 12 02 F6 | 	mov	arg01, fp
2a31c     0C 4E 85 F1 | 	sub	fp, #12
2a320     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2a324     08 4E 05 F1 | 	add	fp, #8
2a328     A7 FA 61 FC | 	wrlong	result1, fp
2a32c     08 4E 85 F1 | 	sub	fp, #8
2a330                 | LR__4250
2a330                 | LR__4251
2a330     08 4E 05 F1 | 	add	fp, #8
2a334     A7 FA 09 FB | 	rdlong	result1, fp wz
2a338     08 4E 85 F1 | 	sub	fp, #8
2a33c     88 00 90 5D |  if_ne	jmp	#LR__4252
2a340     28 4E 05 F1 | 	add	fp, #40
2a344     A7 12 02 FB | 	rdlong	arg01, fp
2a348     16 12 06 F1 | 	add	arg01, #22
2a34c     30 4E 05 F1 | 	add	fp, #48
2a350     A7 14 02 FB | 	rdlong	arg02, fp
2a354     09 15 62 FC | 	wrlong	arg02, arg01
2a358     0C 4E 85 F1 | 	sub	fp, #12
2a35c     A7 12 02 FB | 	rdlong	arg01, fp
2a360     24 4E 85 F1 | 	sub	fp, #36
2a364     A7 14 02 FB | 	rdlong	arg02, fp
2a368     28 4E 05 F1 | 	add	fp, #40
2a36c     A7 16 02 FB | 	rdlong	arg03, fp
2a370     50 4E 85 F1 | 	sub	fp, #80
2a374     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2a378     28 4E 05 F1 | 	add	fp, #40
2a37c     A7 FA 01 FB | 	rdlong	result1, fp
2a380     0B FA 05 F1 | 	add	result1, #11
2a384     FD 20 48 FC | 	wrbyte	#16, result1
2a388     24 4E 05 F1 | 	add	fp, #36
2a38c     A7 FA 01 FB | 	rdlong	result1, fp
2a390     03 FA 05 F1 | 	add	result1, #3
2a394     FD 02 48 FC | 	wrbyte	#1, result1
2a398     44 4E 85 F1 | 	sub	fp, #68
2a39c     A7 FA 09 FB | 	rdlong	result1, fp wz
2a3a0     08 4E 85 F1 | 	sub	fp, #8
2a3a4     3C 00 90 5D |  if_ne	jmp	#LR__4253
2a3a8     4C 4E 05 F1 | 	add	fp, #76
2a3ac     A7 12 02 FB | 	rdlong	arg01, fp
2a3b0     4C 4E 85 F1 | 	sub	fp, #76
2a3b4     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2a3b8     08 4E 05 F1 | 	add	fp, #8
2a3bc     A7 FA 61 FC | 	wrlong	result1, fp
2a3c0     08 4E 85 F1 | 	sub	fp, #8
2a3c4     1C 00 90 FD | 	jmp	#LR__4253
2a3c8                 | LR__4252
2a3c8     3C 4E 05 F1 | 	add	fp, #60
2a3cc     A7 12 02 F6 | 	mov	arg01, fp
2a3d0     14 4E 05 F1 | 	add	fp, #20
2a3d4     A7 14 02 FB | 	rdlong	arg02, fp
2a3d8     50 4E 85 F1 | 	sub	fp, #80
2a3dc     00 16 06 F6 | 	mov	arg03, #0
2a3e0     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2a3e4                 | LR__4253
2a3e4                 | LR__4254
2a3e4                 | LR__4255
2a3e4                 | ' 				remove_chain(&sobj, dcl, 0);
2a3e4                 | ' 			}
2a3e4                 | ' 		}
2a3e4                 | ' 		;
2a3e4                 | ' 	}
2a3e4                 | ' 
2a3e4                 | ' 	return res ;
2a3e4     08 4E 05 F1 | 	add	fp, #8
2a3e8     A7 FA 01 FB | 	rdlong	result1, fp
2a3ec     08 4E 85 F1 | 	sub	fp, #8
2a3f0     A7 F0 03 F6 | 	mov	ptra, fp
2a3f4     B2 00 A0 FD | 	call	#popregs_
2a3f8                 | _fatfs_cc_f_mkdir_ret
2a3f8     2D 00 64 FD | 	ret
2a3fc                 | 
2a3fc                 | _fatfs_cc_f_rename
2a3fc     01 4A 05 F6 | 	mov	COUNT_, #1
2a400     A8 00 A0 FD | 	call	#pushregs_
2a404     9C F0 07 F1 | 	add	ptra, #156
2a408     04 4E 05 F1 | 	add	fp, #4
2a40c     A7 12 62 FC | 	wrlong	arg01, fp
2a410     04 4E 05 F1 | 	add	fp, #4
2a414     A7 14 62 FC | 	wrlong	arg02, fp
2a418     A7 12 02 F6 | 	mov	arg01, fp
2a41c     08 4E 85 F1 | 	sub	fp, #8
2a420     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2a424     04 4E 05 F1 | 	add	fp, #4
2a428     A7 12 02 F6 | 	mov	arg01, fp
2a42c     6C 4E 05 F1 | 	add	fp, #108
2a430     A7 14 02 F6 | 	mov	arg02, fp
2a434     70 4E 85 F1 | 	sub	fp, #112
2a438     02 16 06 F6 | 	mov	arg03, #2
2a43c     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2a440     0C 4E 05 F1 | 	add	fp, #12
2a444     A7 FA 61 FC | 	wrlong	result1, fp
2a448     0C 4E 85 F1 | 	sub	fp, #12
2a44c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a450     44 03 90 5D |  if_ne	jmp	#LR__4273
2a454     70 4E 05 F1 | 	add	fp, #112
2a458     A7 16 02 FB | 	rdlong	arg03, fp
2a45c     60 4E 85 F1 | 	sub	fp, #96
2a460     A7 16 62 FC | 	wrlong	arg03, fp
2a464     A7 12 02 F6 | 	mov	arg01, fp
2a468     0C 4E 85 F1 | 	sub	fp, #12
2a46c     A7 14 02 FB | 	rdlong	arg02, fp
2a470     04 4E 85 F1 | 	sub	fp, #4
2a474     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2a478     0C 4E 05 F1 | 	add	fp, #12
2a47c     A7 FA 61 FC | 	wrlong	result1, fp
2a480     00 FA 4D F2 | 	cmps	result1, #0 wz
2a484     0C 4E 85 F1 | 	sub	fp, #12
2a488     1C 00 90 5D |  if_ne	jmp	#LR__4260
2a48c     3B 4E 05 F1 | 	add	fp, #59
2a490     A7 FA C1 FA | 	rdbyte	result1, fp
2a494     3B 4E 85 F1 | 	sub	fp, #59
2a498     A0 FA CD F7 | 	test	result1, #160 wz
2a49c     0C 4E 05 51 |  if_ne	add	fp, #12
2a4a0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2a4a4     0C 4E 85 51 |  if_ne	sub	fp, #12
2a4a8                 | LR__4260
2a4a8     0C 4E 05 F1 | 	add	fp, #12
2a4ac     A7 1E 0A FB | 	rdlong	local01, fp wz
2a4b0     0C 4E 85 F1 | 	sub	fp, #12
2a4b4     E0 02 90 5D |  if_ne	jmp	#LR__4272
2a4b8     74 4E 05 F1 | 	add	fp, #116
2a4bc     A7 12 02 F6 | 	mov	arg01, fp
2a4c0     48 4E 85 F1 | 	sub	fp, #72
2a4c4     A7 14 02 FB | 	rdlong	arg02, fp
2a4c8     2C 4E 85 F1 | 	sub	fp, #44
2a4cc     20 16 06 F6 | 	mov	arg03, #32
2a4d0     D0 2A BF FD | 	call	#__system____builtin_memmove
2a4d4     40 4E 05 F1 | 	add	fp, #64
2a4d8     A7 12 02 F6 | 	mov	arg01, fp
2a4dc     30 4E 85 F1 | 	sub	fp, #48
2a4e0     A7 14 02 F6 | 	mov	arg02, fp
2a4e4     10 4E 85 F1 | 	sub	fp, #16
2a4e8     30 16 06 F6 | 	mov	arg03, #48
2a4ec     B4 2A BF FD | 	call	#__system____builtin_memmove
2a4f0     40 4E 05 F1 | 	add	fp, #64
2a4f4     A7 12 02 F6 | 	mov	arg01, fp
2a4f8     38 4E 85 F1 | 	sub	fp, #56
2a4fc     A7 14 02 FB | 	rdlong	arg02, fp
2a500     08 4E 85 F1 | 	sub	fp, #8
2a504     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2a508     0C 4E 05 F1 | 	add	fp, #12
2a50c     A7 FA 61 FC | 	wrlong	result1, fp
2a510     0C 4E 85 F1 | 	sub	fp, #12
2a514     00 FA 0D F2 | 	cmp	result1, #0 wz
2a518     4C 00 90 5D |  if_ne	jmp	#LR__4263
2a51c     48 4E 05 F1 | 	add	fp, #72
2a520     A7 FA 01 FB | 	rdlong	result1, fp
2a524     30 4E 85 F1 | 	sub	fp, #48
2a528     A7 16 02 FB | 	rdlong	arg03, fp
2a52c     18 4E 85 F1 | 	sub	fp, #24
2a530     0B FB 09 F2 | 	cmp	result1, arg03 wz
2a534     20 00 90 5D |  if_ne	jmp	#LR__4261
2a538     50 4E 05 F1 | 	add	fp, #80
2a53c     A7 FA 01 FB | 	rdlong	result1, fp
2a540     30 4E 85 F1 | 	sub	fp, #48
2a544     A7 16 02 FB | 	rdlong	arg03, fp
2a548     20 4E 85 F1 | 	sub	fp, #32
2a54c     0B FB 09 F2 | 	cmp	result1, arg03 wz
2a550     04 1E 06 A6 |  if_e	mov	local01, #4
2a554     04 00 90 AD |  if_e	jmp	#LR__4262
2a558                 | LR__4261
2a558     08 1E 06 F6 | 	mov	local01, #8
2a55c                 | LR__4262
2a55c     0C 4E 05 F1 | 	add	fp, #12
2a560     A7 1E 62 FC | 	wrlong	local01, fp
2a564     0C 4E 85 F1 | 	sub	fp, #12
2a568                 | LR__4263
2a568     0C 4E 05 F1 | 	add	fp, #12
2a56c     A7 1E 02 FB | 	rdlong	local01, fp
2a570     0C 4E 85 F1 | 	sub	fp, #12
2a574     04 1E 0E F2 | 	cmp	local01, #4 wz
2a578     CC 01 90 5D |  if_ne	jmp	#LR__4269
2a57c     40 4E 05 F1 | 	add	fp, #64
2a580     A7 12 02 F6 | 	mov	arg01, fp
2a584     40 4E 85 F1 | 	sub	fp, #64
2a588     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2a58c     0C 4E 05 F1 | 	add	fp, #12
2a590     A7 FA 61 FC | 	wrlong	result1, fp
2a594     0C 4E 85 F1 | 	sub	fp, #12
2a598     00 FA 0D F2 | 	cmp	result1, #0 wz
2a59c     A8 01 90 5D |  if_ne	jmp	#LR__4268
2a5a0     5C 4E 05 F1 | 	add	fp, #92
2a5a4     A7 12 02 FB | 	rdlong	arg01, fp
2a5a8     38 4E 05 F1 | 	add	fp, #56
2a5ac     A7 12 62 FC | 	wrlong	arg01, fp
2a5b0     0D 12 06 F1 | 	add	arg01, #13
2a5b4     20 4E 85 F1 | 	sub	fp, #32
2a5b8     A7 14 02 F6 | 	mov	arg02, fp
2a5bc     74 4E 85 F1 | 	sub	fp, #116
2a5c0     0D 14 06 F1 | 	add	arg02, #13
2a5c4     13 16 06 F6 | 	mov	arg03, #19
2a5c8     D8 29 BF FD | 	call	#__system____builtin_memmove
2a5cc     94 4E 05 F1 | 	add	fp, #148
2a5d0     A7 1E 02 FB | 	rdlong	local01, fp
2a5d4     15 4E 85 F1 | 	sub	fp, #21
2a5d8     A7 FA C1 FA | 	rdbyte	result1, fp
2a5dc     0B 1E 06 F1 | 	add	local01, #11
2a5e0     0F FB 41 FC | 	wrbyte	result1, local01
2a5e4     15 4E 05 F1 | 	add	fp, #21
2a5e8     A7 1E 02 FB | 	rdlong	local01, fp
2a5ec     94 4E 85 F1 | 	sub	fp, #148
2a5f0     0B 1E 06 F1 | 	add	local01, #11
2a5f4     0F 1F C2 FA | 	rdbyte	local01, local01
2a5f8     10 1E CE F7 | 	test	local01, #16 wz
2a5fc     24 00 90 5D |  if_ne	jmp	#LR__4264
2a600     94 4E 05 F1 | 	add	fp, #148
2a604     A7 FA 01 FB | 	rdlong	result1, fp
2a608     FD 1E 02 F6 | 	mov	local01, result1
2a60c     94 4E 85 F1 | 	sub	fp, #148
2a610     0B FA 05 F1 | 	add	result1, #11
2a614     FD FA C1 FA | 	rdbyte	result1, result1
2a618     20 FA 45 F5 | 	or	result1, #32
2a61c     0B 1E 06 F1 | 	add	local01, #11
2a620     0F FB 41 FC | 	wrbyte	result1, local01
2a624                 | LR__4264
2a624     70 4E 05 F1 | 	add	fp, #112
2a628     A7 1E 02 FB | 	rdlong	local01, fp
2a62c     03 1E 06 F1 | 	add	local01, #3
2a630     0F 03 48 FC | 	wrbyte	#1, local01
2a634     24 4E 05 F1 | 	add	fp, #36
2a638     A7 1E 02 FB | 	rdlong	local01, fp
2a63c     94 4E 85 F1 | 	sub	fp, #148
2a640     0B 1E 06 F1 | 	add	local01, #11
2a644     0F 1F C2 FA | 	rdbyte	local01, local01
2a648     10 1E CE F7 | 	test	local01, #16 wz
2a64c     F8 00 90 AD |  if_e	jmp	#LR__4267
2a650     18 4E 05 F1 | 	add	fp, #24
2a654     A7 16 02 FB | 	rdlong	arg03, fp
2a658     30 4E 05 F1 | 	add	fp, #48
2a65c     A7 1E 02 FB | 	rdlong	local01, fp
2a660     48 4E 85 F1 | 	sub	fp, #72
2a664     0F 17 0A F2 | 	cmp	arg03, local01 wz
2a668     DC 00 90 AD |  if_e	jmp	#LR__4267
2a66c     70 4E 05 F1 | 	add	fp, #112
2a670     A7 12 02 FB | 	rdlong	arg01, fp
2a674     09 1F 02 F6 | 	mov	local01, arg01
2a678     24 4E 05 F1 | 	add	fp, #36
2a67c     A7 14 02 FB | 	rdlong	arg02, fp
2a680     94 4E 85 F1 | 	sub	fp, #148
2a684     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2a688     FD 14 02 F6 | 	mov	arg02, result1
2a68c     0F 13 02 F6 | 	mov	arg01, local01
2a690     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2a694     98 4E 05 F1 | 	add	fp, #152
2a698     A7 FA 61 FC | 	wrlong	result1, fp
2a69c     00 FA 4D F2 | 	cmps	result1, #0 wz
2a6a0     98 4E 85 F1 | 	sub	fp, #152
2a6a4     0C 4E 05 A1 |  if_e	add	fp, #12
2a6a8     A7 04 68 AC |  if_e	wrlong	#2, fp
2a6ac     0C 4E 85 A1 |  if_e	sub	fp, #12
2a6b0     94 00 90 AD |  if_e	jmp	#LR__4266
2a6b4     70 4E 05 F1 | 	add	fp, #112
2a6b8     A7 12 02 FB | 	rdlong	arg01, fp
2a6bc     28 4E 05 F1 | 	add	fp, #40
2a6c0     A7 14 02 FB | 	rdlong	arg02, fp
2a6c4     98 4E 85 F1 | 	sub	fp, #152
2a6c8     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2a6cc     0C 4E 05 F1 | 	add	fp, #12
2a6d0     A7 FA 61 FC | 	wrlong	result1, fp
2a6d4     64 4E 05 F1 | 	add	fp, #100
2a6d8     A7 1E 02 FB | 	rdlong	local01, fp
2a6dc     54 1E 06 F1 | 	add	local01, #84
2a6e0     24 4E 05 F1 | 	add	fp, #36
2a6e4     A7 1E 62 FC | 	wrlong	local01, fp
2a6e8     88 4E 85 F1 | 	sub	fp, #136
2a6ec     A7 1E 0A FB | 	rdlong	local01, fp wz
2a6f0     0C 4E 85 F1 | 	sub	fp, #12
2a6f4     50 00 90 5D |  if_ne	jmp	#LR__4265
2a6f8     94 4E 05 F1 | 	add	fp, #148
2a6fc     A7 1E 02 FB | 	rdlong	local01, fp
2a700     94 4E 85 F1 | 	sub	fp, #148
2a704     01 1E 06 F1 | 	add	local01, #1
2a708     0F 1F C2 FA | 	rdbyte	local01, local01
2a70c     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a710     34 00 90 5D |  if_ne	jmp	#LR__4265
2a714     70 4E 05 F1 | 	add	fp, #112
2a718     A7 12 02 FB | 	rdlong	arg01, fp
2a71c     24 4E 05 F1 | 	add	fp, #36
2a720     A7 14 02 FB | 	rdlong	arg02, fp
2a724     4C 4E 85 F1 | 	sub	fp, #76
2a728     A7 16 02 FB | 	rdlong	arg03, fp
2a72c     48 4E 85 F1 | 	sub	fp, #72
2a730     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2a734     70 4E 05 F1 | 	add	fp, #112
2a738     A7 1E 02 FB | 	rdlong	local01, fp
2a73c     70 4E 85 F1 | 	sub	fp, #112
2a740     03 1E 06 F1 | 	add	local01, #3
2a744     0F 03 48 FC | 	wrbyte	#1, local01
2a748                 | LR__4265
2a748                 | LR__4266
2a748                 | LR__4267
2a748                 | LR__4268
2a748                 | LR__4269
2a748     0C 4E 05 F1 | 	add	fp, #12
2a74c     A7 1E 0A FB | 	rdlong	local01, fp wz
2a750     0C 4E 85 F1 | 	sub	fp, #12
2a754     40 00 90 5D |  if_ne	jmp	#LR__4271
2a758     10 4E 05 F1 | 	add	fp, #16
2a75c     A7 12 02 F6 | 	mov	arg01, fp
2a760     10 4E 85 F1 | 	sub	fp, #16
2a764     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2a768     0C 4E 05 F1 | 	add	fp, #12
2a76c     A7 FA 61 FC | 	wrlong	result1, fp
2a770     0C 4E 85 F1 | 	sub	fp, #12
2a774     00 FA 0D F2 | 	cmp	result1, #0 wz
2a778     1C 00 90 5D |  if_ne	jmp	#LR__4270
2a77c     70 4E 05 F1 | 	add	fp, #112
2a780     A7 12 02 FB | 	rdlong	arg01, fp
2a784     70 4E 85 F1 | 	sub	fp, #112
2a788     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2a78c     0C 4E 05 F1 | 	add	fp, #12
2a790     A7 FA 61 FC | 	wrlong	result1, fp
2a794     0C 4E 85 F1 | 	sub	fp, #12
2a798                 | LR__4270
2a798                 | LR__4271
2a798                 | LR__4272
2a798                 | LR__4273
2a798                 | ' 					res = sync_fs(fs);
2a798                 | ' 				}
2a798                 | ' 			}
2a798                 | ' 
2a798                 | ' 		}
2a798                 | ' 		;
2a798                 | ' 	}
2a798                 | ' 
2a798                 | ' 	return res ;
2a798     0C 4E 05 F1 | 	add	fp, #12
2a79c     A7 FA 01 FB | 	rdlong	result1, fp
2a7a0     0C 4E 85 F1 | 	sub	fp, #12
2a7a4     A7 F0 03 F6 | 	mov	ptra, fp
2a7a8     B2 00 A0 FD | 	call	#popregs_
2a7ac                 | _fatfs_cc_f_rename_ret
2a7ac     2D 00 64 FD | 	ret
2a7b0                 | 
2a7b0                 | _fatfs_cc_time
2a7b0     00 4A 05 F6 | 	mov	COUNT_, #0
2a7b4     A8 00 A0 FD | 	call	#pushregs_
2a7b8     14 F0 07 F1 | 	add	ptra, #20
2a7bc     04 4E 05 F1 | 	add	fp, #4
2a7c0     A7 12 62 FC | 	wrlong	arg01, fp
2a7c4     04 4E 05 F1 | 	add	fp, #4
2a7c8     A7 12 02 F6 | 	mov	arg01, fp
2a7cc     08 4E 85 F1 | 	sub	fp, #8
2a7d0     00 14 06 F6 | 	mov	arg02, #0
2a7d4     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2a7d8     08 4E 05 F1 | 	add	fp, #8
2a7dc     A7 FA 01 FB | 	rdlong	result1, fp
2a7e0     08 4E 05 F1 | 	add	fp, #8
2a7e4     A7 FA 61 FC | 	wrlong	result1, fp
2a7e8     0C 4E 85 F1 | 	sub	fp, #12
2a7ec     A7 FA 09 FB | 	rdlong	result1, fp wz
2a7f0     04 4E 85 F1 | 	sub	fp, #4
2a7f4     18 00 90 AD |  if_e	jmp	#LR__4280
2a7f8     04 4E 05 F1 | 	add	fp, #4
2a7fc     A7 FA 01 FB | 	rdlong	result1, fp
2a800     0C 4E 05 F1 | 	add	fp, #12
2a804     A7 14 02 FB | 	rdlong	arg02, fp
2a808     10 4E 85 F1 | 	sub	fp, #16
2a80c     FD 14 62 FC | 	wrlong	arg02, result1
2a810                 | LR__4280
2a810                 | '         *tp = now;
2a810                 | '     return now;
2a810     10 4E 05 F1 | 	add	fp, #16
2a814     A7 FA 01 FB | 	rdlong	result1, fp
2a818     10 4E 85 F1 | 	sub	fp, #16
2a81c     A7 F0 03 F6 | 	mov	ptra, fp
2a820     B2 00 A0 FD | 	call	#popregs_
2a824                 | _fatfs_cc_time_ret
2a824     2D 00 64 FD | 	ret
2a828                 | 
2a828                 | _fatfs_cc_mktime
2a828     06 4A 05 F6 | 	mov	COUNT_, #6
2a82c     A8 00 A0 FD | 	call	#pushregs_
2a830     09 1F 02 F6 | 	mov	local01, arg01
2a834     14 1E 06 F1 | 	add	local01, #20
2a838     0F 13 02 FB | 	rdlong	arg01, local01
2a83c     14 1E 86 F1 | 	sub	local01, #20
2a840     46 12 56 F2 | 	cmps	arg01, #70 wc
2a844                 | '                 return (time_t) -1;
2a844     01 FA 65 C6 |  if_b	neg	result1, #1
2a848     7C 01 90 CD |  if_b	jmp	#LR__4294
2a84c     03 00 00 FF 
2a850     6C 21 06 F6 | 	mov	local02, ##1900
2a854     14 1E 06 F1 | 	add	local01, #20
2a858     0F FB 01 FB | 	rdlong	result1, local01
2a85c     FD 20 02 F1 | 	add	local02, result1
2a860     08 1E 86 F1 | 	sub	local01, #8
2a864     0F 23 02 FB | 	rdlong	local03, local01
2a868     01 22 86 F1 | 	sub	local03, #1
2a86c     04 1E 06 F1 | 	add	local01, #4
2a870     0F 13 02 FB | 	rdlong	arg01, local01
2a874     10 1E 86 F1 | 	sub	local01, #16
2a878     02 12 66 F0 | 	shl	arg01, #2
2a87c     02 00 00 FF 
2a880     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2a884     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2a888     09 FB 01 FB | 	rdlong	result1, arg01
2a88c     FD 22 02 F1 | 	add	local03, result1
2a890     10 13 02 F6 | 	mov	arg01, local02
2a894     02 00 00 FF 
2a898     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2a89c     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2a8a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a8a4     1C 00 90 AD |  if_e	jmp	#LR__4290
2a8a8     00 24 06 F6 | 	mov	local04, #0
2a8ac     10 1E 06 F1 | 	add	local01, #16
2a8b0     0F FB 01 FB | 	rdlong	result1, local01
2a8b4     10 1E 86 F1 | 	sub	local01, #16
2a8b8     02 FA 55 F2 | 	cmps	result1, #2 wc
2a8bc     01 24 06 36 |  if_ae	mov	local04, #1
2a8c0     04 00 90 FD | 	jmp	#LR__4291
2a8c4                 | LR__4290
2a8c4     00 24 06 F6 | 	mov	local04, #0
2a8c8                 | LR__4291
2a8c8     04 1E 06 F1 | 	add	local01, #4
2a8cc     0F FB 01 FB | 	rdlong	result1, local01
2a8d0     04 1E 86 F1 | 	sub	local01, #4
2a8d4     0F 27 02 FB | 	rdlong	local05, local01
2a8d8     08 1E 06 F1 | 	add	local01, #8
2a8dc     0F 13 02 FB | 	rdlong	arg01, local01
2a8e0     07 00 00 FF 
2a8e4     10 12 06 FD | 	qmul	arg01, ##3600
2a8e8     12 23 02 F1 | 	add	local03, local04
2a8ec     FD 24 02 F6 | 	mov	local04, result1
2a8f0     04 24 66 F0 | 	shl	local04, #4
2a8f4     FD 24 82 F1 | 	sub	local04, result1
2a8f8     02 24 66 F0 | 	shl	local04, #2
2a8fc     12 27 02 F1 | 	add	local05, local04
2a900     08 1E 86 F1 | 	sub	local01, #8
2a904     18 24 62 FD | 	getqx	local04
2a908     A8 00 00 FF 
2a90c     80 23 06 FD | 	qmul	local03, ##86400
2a910     12 27 02 F1 | 	add	local05, local04
2a914     10 23 02 F6 | 	mov	local03, local02
2a918     03 00 00 FF 
2a91c     B2 23 86 F1 | 	sub	local03, ##1970
2a920     18 24 62 FD | 	getqx	local04
2a924     99 F0 00 FF 
2a928     80 23 06 FD | 	qmul	local03, ##31536000
2a92c     12 27 02 F1 | 	add	local05, local04
2a930     10 23 02 F6 | 	mov	local03, local02
2a934     03 00 00 FF 
2a938     B1 23 86 F1 | 	sub	local03, ##1969
2a93c     11 29 52 F6 | 	abs	local06, local03 wc
2a940     02 28 46 F0 | 	shr	local06, #2
2a944     14 29 82 F6 | 	negc	local06, local06
2a948     03 00 00 FF 
2a94c     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2a950     18 24 62 FD | 	getqx	local04
2a954     12 27 02 F1 | 	add	local05, local04
2a958     18 00 90 CD |  if_b	jmp	#LR__4292
2a95c     03 00 00 FF 
2a960     D0 21 86 F1 | 	sub	local02, ##2000
2a964     10 25 52 F6 | 	abs	local04, local02 wc
2a968     64 24 16 FD | 	qdiv	local04, #100
2a96c     18 24 62 FD | 	getqx	local04
2a970     12 29 A2 F3 | 	sumnc	local06, local04
2a974                 | LR__4292
2a974     A8 00 00 FF 
2a978     80 29 06 FD | 	qmul	local06, ##86400
2a97c     18 28 62 FD | 	getqx	local06
2a980     14 27 02 F1 | 	add	local05, local06
2a984     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2a988     02 00 00 FF 
2a98c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2a990     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2a994     14 27 02 F1 | 	add	local05, local06
2a998     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2a99c     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2a9a0     02 00 00 FF 
2a9a4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2a9a8     01 22 0E F2 | 	cmp	local03, #1 wz
2a9ac     14 00 90 5D |  if_ne	jmp	#LR__4293
2a9b0     0F 13 02 F6 | 	mov	arg01, local01
2a9b4     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2a9b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2a9bc     07 00 00 5F 
2a9c0     10 26 86 51 |  if_ne	sub	local05, ##3600
2a9c4                 | LR__4293
2a9c4                 | '                 s -=  (3600L) ;
2a9c4                 | ' 
2a9c4                 | '         return s;
2a9c4     13 FB 01 F6 | 	mov	result1, local05
2a9c8                 | LR__4294
2a9c8     A7 F0 03 F6 | 	mov	ptra, fp
2a9cc     B2 00 A0 FD | 	call	#popregs_
2a9d0                 | _fatfs_cc_mktime_ret
2a9d0     2D 00 64 FD | 	ret
2a9d4                 | 
2a9d4                 | _fatfs_cc__gmtime_r
2a9d4     03 4A 05 F6 | 	mov	COUNT_, #3
2a9d8     A8 00 A0 FD | 	call	#pushregs_
2a9dc     09 1F 02 FB | 	rdlong	local01, arg01
2a9e0     A8 00 00 FF 
2a9e4     80 1F 16 FD | 	qdiv	local01, ##86400
2a9e8     18 FA 61 FD | 	getqx	result1
2a9ec     04 FA 05 F1 | 	add	result1, #4
2a9f0     07 FA 15 FD | 	qdiv	result1, #7
2a9f4     18 14 06 F1 | 	add	arg02, #24
2a9f8     D1 7F 27 FF 
2a9fc     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2aa00     D1 7F 27 3F 
2aa04     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2aa08     03 00 00 3F 
2aa0c     DC 21 06 36 |  if_ae	mov	local02, ##2012
2aa10     03 00 00 CF 
2aa14     B2 21 06 C6 |  if_b	mov	local02, ##1970
2aa18                 | ' 	  year = 1970;
2aa18                 | ' 	}
2aa18                 | ' 
2aa18                 | ' 	for(;;) {
2aa18     19 FA 61 FD | 	getqy	result1
2aa1c     0A FB 61 FC | 	wrlong	result1, arg02
2aa20     18 14 86 F1 | 	sub	arg02, #24
2aa24                 | LR__4300
2aa24     10 13 02 F6 | 	mov	arg01, local02
2aa28     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2aa2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2aa30     42 F1 00 5F 
2aa34     00 23 06 56 |  if_ne	mov	local03, ##31622400
2aa38     99 F0 00 AF 
2aa3c     80 23 06 A6 |  if_e	mov	local03, ##31536000
2aa40     11 1F 12 F2 | 	cmp	local01, local03 wc
2aa44                 | ' 	    break;
2aa44     01 20 06 31 |  if_ae	add	local02, #1
2aa48     11 1F 82 31 |  if_ae	sub	local01, local03
2aa4c     D4 FF 9F 3D |  if_ae	jmp	#LR__4300
2aa50     A8 00 00 FF 
2aa54     80 1F 16 FD | 	qdiv	local01, ##86400
2aa58     10 23 02 F6 | 	mov	local03, local02
2aa5c     03 00 00 FF 
2aa60     6C 23 86 F1 | 	sub	local03, ##1900
2aa64     14 14 06 F1 | 	add	arg02, #20
2aa68     0A 23 62 FC | 	wrlong	local03, arg02
2aa6c     08 14 06 F1 | 	add	arg02, #8
2aa70     10 13 02 F6 | 	mov	arg01, local02
2aa74     18 20 62 FD | 	getqx	local02
2aa78     0A 21 62 FC | 	wrlong	local02, arg02
2aa7c     1C 14 86 F1 | 	sub	arg02, #28
2aa80     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2aa84     00 FA 0D F2 | 	cmp	result1, #0 wz
2aa88     1D 22 06 56 |  if_ne	mov	local03, #29
2aa8c     1C 22 06 A6 |  if_e	mov	local03, #28
2aa90     02 00 00 FF 
2aa94     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2aa98     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2aa9c     02 00 00 FF 
2aaa0     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2aaa4                 | ' 
2aaa4                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2aaa4                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2aaa4     00 12 06 F6 | 	mov	arg01, #0
2aaa8     97 2A 48 FB | 	callpa	#(@LR__4302-@LR__4301)>>2,fcache_load_ptr_
2aaac                 | LR__4301
2aaac     09 23 02 F6 | 	mov	local03, arg01
2aab0     02 22 66 F0 | 	shl	local03, #2
2aab4     02 00 00 FF 
2aab8     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2aabc     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2aac0     11 23 02 FB | 	rdlong	local03, local03
2aac4     11 21 52 F2 | 	cmps	local02, local03 wc
2aac8     02 00 00 FF 
2aacc     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2aad0     2C 00 90 CD |  if_b	jmp	#LR__4303
2aad4     09 23 02 F6 | 	mov	local03, arg01
2aad8     02 22 66 F0 | 	shl	local03, #2
2aadc     02 00 00 FF 
2aae0     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2aae4     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2aae8     11 23 02 FB | 	rdlong	local03, local03
2aaec     11 21 82 F1 | 	sub	local02, local03
2aaf0     01 12 06 F1 | 	add	arg01, #1
2aaf4     02 00 00 FF 
2aaf8     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2aafc     AC FF 9F FD | 	jmp	#LR__4301
2ab00                 | LR__4302
2ab00                 | LR__4303
2ab00     A8 00 00 FF 
2ab04     80 1F 16 FD | 	qdiv	local01, ##86400
2ab08     10 14 06 F1 | 	add	arg02, #16
2ab0c     0A 13 62 FC | 	wrlong	arg01, arg02
2ab10     01 20 06 F1 | 	add	local02, #1
2ab14     04 14 86 F1 | 	sub	arg02, #4
2ab18     0A 21 62 FC | 	wrlong	local02, arg02
2ab1c     19 1E 62 FD | 	getqy	local01
2ab20     07 00 00 FF 
2ab24     10 1E 16 FD | 	qdiv	local01, ##3600
2ab28     18 22 62 FD | 	getqx	local03
2ab2c     07 00 00 FF 
2ab30     10 1E 16 FD | 	qdiv	local01, ##3600
2ab34     04 14 86 F1 | 	sub	arg02, #4
2ab38     0A 23 62 FC | 	wrlong	local03, arg02
2ab3c     19 1E 62 FD | 	getqy	local01
2ab40     3C 1E 16 FD | 	qdiv	local01, #60
2ab44     18 22 62 FD | 	getqx	local03
2ab48     3C 1E 16 FD | 	qdiv	local01, #60
2ab4c     04 14 86 F1 | 	sub	arg02, #4
2ab50     0A 23 62 FC | 	wrlong	local03, arg02
2ab54     04 14 86 F1 | 	sub	arg02, #4
2ab58                 | '         stm->tm_isdst = 0;
2ab58                 | ' 
2ab58                 | ' ;
2ab58                 | '         return stm;
2ab58     0A FB 01 F6 | 	mov	result1, arg02
2ab5c     19 22 62 FD | 	getqy	local03
2ab60     0A 23 62 FC | 	wrlong	local03, arg02
2ab64     20 14 06 F1 | 	add	arg02, #32
2ab68     0A 01 68 FC | 	wrlong	#0, arg02
2ab6c     A7 F0 03 F6 | 	mov	ptra, fp
2ab70     B2 00 A0 FD | 	call	#popregs_
2ab74                 | _fatfs_cc__gmtime_r_ret
2ab74     2D 00 64 FD | 	ret
2ab78                 | 
2ab78                 | _fatfs_cc__tzset
2ab78     63 01 00 FF 
2ab7c     BD 12 06 F6 | 	mov	arg01, ##@LR__4615
2ab80     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2ab84     FD 12 02 F6 | 	mov	arg01, result1
2ab88     02 00 00 FF 
2ab8c     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2ab90     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2ab94     02 00 00 FF 
2ab98     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2ab9c     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2aba0     02 00 00 FF 
2aba4     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2aba8     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2abac     02 00 00 FF 
2abb0     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2abb4                 | _fatfs_cc__tzset_ret
2abb4     2D 00 64 FD | 	ret
2abb8                 | 
2abb8                 | _fatfs_cc_getenv
2abb8     06 4A 05 F6 | 	mov	COUNT_, #6
2abbc     A8 00 A0 FD | 	call	#pushregs_
2abc0     09 1F 02 F6 | 	mov	local01, arg01
2abc4     09 21 02 F6 | 	mov	local02, arg01
2abc8     97 06 48 FB | 	callpa	#(@LR__4311-@LR__4310)>>2,fcache_load_ptr_
2abcc                 | LR__4310
2abcc     10 FB C9 FA | 	rdbyte	result1, local02 wz
2abd0     01 20 06 51 |  if_ne	add	local02, #1
2abd4     F4 FF 9F 5D |  if_ne	jmp	#LR__4310
2abd8                 | LR__4311
2abd8     09 21 82 F1 | 	sub	local02, arg01
2abdc     10 FB 01 F6 | 	mov	result1, local02
2abe0     02 00 00 FF 
2abe4     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2abe8     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2abec     02 00 00 FF 
2abf0     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2abf4                 | '             return 0;
2abf4     00 FA 05 A6 |  if_e	mov	result1, #0
2abf8     5C 00 90 AD |  if_e	jmp	#LR__4314
2abfc                 | ' 
2abfc                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2abfc     02 00 00 FF 
2ac00     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2ac04     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2ac08     02 00 00 FF 
2ac0c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2ac10                 | LR__4312
2ac10     11 25 0A FB | 	rdlong	local04, local03 wz
2ac14     3C 00 90 AD |  if_e	jmp	#LR__4313
2ac18     12 13 02 F6 | 	mov	arg01, local04
2ac1c     0F 15 02 F6 | 	mov	arg02, local01
2ac20     10 17 02 F6 | 	mov	arg03, local02
2ac24     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2ac28     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac2c     10 27 02 A6 |  if_e	mov	local05, local02
2ac30     12 27 02 A1 |  if_e	add	local05, local04
2ac34     13 29 C2 AA |  if_e	rdbyte	local06, local05
2ac38     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2ac3c                 | ' 			return name+len+1;
2ac3c     10 25 02 A1 |  if_e	add	local04, local02
2ac40     01 24 06 A1 |  if_e	add	local04, #1
2ac44     12 FB 01 A6 |  if_e	mov	result1, local04
2ac48     0C 00 90 AD |  if_e	jmp	#LR__4314
2ac4c     04 22 06 F1 | 	add	local03, #4
2ac50     BC FF 9F FD | 	jmp	#LR__4312
2ac54                 | LR__4313
2ac54                 | ' 	}
2ac54                 | ' 	return 0;
2ac54     00 FA 05 F6 | 	mov	result1, #0
2ac58                 | LR__4314
2ac58     A7 F0 03 F6 | 	mov	ptra, fp
2ac5c     B2 00 A0 FD | 	call	#popregs_
2ac60                 | _fatfs_cc_getenv_ret
2ac60     2D 00 64 FD | 	ret
2ac64                 | 
2ac64                 | _fatfs_cc__get_fattime
2ac64     00 4A 05 F6 | 	mov	COUNT_, #0
2ac68     A8 00 A0 FD | 	call	#pushregs_
2ac6c     34 F0 07 F1 | 	add	ptra, #52
2ac70     00 12 06 F6 | 	mov	arg01, #0
2ac74     38 FB BF FD | 	call	#_fatfs_cc_time
2ac78     04 4E 05 F1 | 	add	fp, #4
2ac7c     A7 FA 61 FC | 	wrlong	result1, fp
2ac80     A7 12 02 F6 | 	mov	arg01, fp
2ac84     0C 4E 05 F1 | 	add	fp, #12
2ac88     A7 14 02 F6 | 	mov	arg02, fp
2ac8c     10 4E 85 F1 | 	sub	fp, #16
2ac90     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2ac94     24 4E 05 F1 | 	add	fp, #36
2ac98     A7 14 02 FB | 	rdlong	arg02, fp
2ac9c     50 14 86 F1 | 	sub	arg02, #80
2aca0     09 14 66 F0 | 	shl	arg02, #9
2aca4     04 4E 85 F1 | 	sub	fp, #4
2aca8     A7 FA 01 FB | 	rdlong	result1, fp
2acac     01 FA 05 F1 | 	add	result1, #1
2acb0     05 FA 65 F0 | 	shl	result1, #5
2acb4     FD 14 42 F5 | 	or	arg02, result1
2acb8     04 4E 85 F1 | 	sub	fp, #4
2acbc     A7 FA 01 FB | 	rdlong	result1, fp
2acc0     FD 14 42 F5 | 	or	arg02, result1
2acc4     14 4E 85 F1 | 	sub	fp, #20
2acc8     A7 14 62 FC | 	wrlong	arg02, fp
2accc     10 4E 05 F1 | 	add	fp, #16
2acd0     A7 14 02 FB | 	rdlong	arg02, fp
2acd4     0B 14 66 F0 | 	shl	arg02, #11
2acd8     04 4E 85 F1 | 	sub	fp, #4
2acdc     A7 FA 01 FB | 	rdlong	result1, fp
2ace0     05 FA 65 F0 | 	shl	result1, #5
2ace4     FD 14 42 F5 | 	or	arg02, result1
2ace8     04 4E 85 F1 | 	sub	fp, #4
2acec     A7 FA 01 FB | 	rdlong	result1, fp
2acf0     FD 14 42 F5 | 	or	arg02, result1
2acf4     04 4E 85 F1 | 	sub	fp, #4
2acf8     A7 14 62 FC | 	wrlong	arg02, fp
2acfc                 | ' 
2acfc                 | '     now = time(0);
2acfc                 | '     _gmtime_r (&now, &date);
2acfc                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2acfc                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2acfc                 | '     return (ffdate << 16) | fftime;
2acfc     04 4E 85 F1 | 	sub	fp, #4
2ad00     A7 FA 01 FB | 	rdlong	result1, fp
2ad04     10 FA 65 F0 | 	shl	result1, #16
2ad08     08 4E 85 F1 | 	sub	fp, #8
2ad0c     0A FB 41 F5 | 	or	result1, arg02
2ad10     A7 F0 03 F6 | 	mov	ptra, fp
2ad14     B2 00 A0 FD | 	call	#popregs_
2ad18                 | _fatfs_cc__get_fattime_ret
2ad18     2D 00 64 FD | 	ret
2ad1c                 | 
2ad1c                 | _fatfs_cc_unixtime_0894
2ad1c     00 4A 05 F6 | 	mov	COUNT_, #0
2ad20     A8 00 A0 FD | 	call	#pushregs_
2ad24     34 F0 07 F1 | 	add	ptra, #52
2ad28     04 4E 05 F1 | 	add	fp, #4
2ad2c     A7 12 62 FC | 	wrlong	arg01, fp
2ad30     04 4E 05 F1 | 	add	fp, #4
2ad34     A7 14 62 FC | 	wrlong	arg02, fp
2ad38     04 4E 85 F1 | 	sub	fp, #4
2ad3c     A7 14 02 FB | 	rdlong	arg02, fp
2ad40     09 14 46 F0 | 	shr	arg02, #9
2ad44     7F 14 06 F5 | 	and	arg02, #127
2ad48     50 FA 05 F6 | 	mov	result1, #80
2ad4c     0A FB 01 F1 | 	add	result1, arg02
2ad50     20 4E 05 F1 | 	add	fp, #32
2ad54     A7 FA 61 FC | 	wrlong	result1, fp
2ad58     20 4E 85 F1 | 	sub	fp, #32
2ad5c     A7 FA 01 FB | 	rdlong	result1, fp
2ad60     05 FA 45 F0 | 	shr	result1, #5
2ad64     FD FA 41 F8 | 	getnib	result1, result1, #0
2ad68     01 FA 85 F1 | 	sub	result1, #1
2ad6c     1C 4E 05 F1 | 	add	fp, #28
2ad70     A7 FA 61 FC | 	wrlong	result1, fp
2ad74     1C 4E 85 F1 | 	sub	fp, #28
2ad78     A7 FA 01 FB | 	rdlong	result1, fp
2ad7c     1F FA 05 F5 | 	and	result1, #31
2ad80     18 4E 05 F1 | 	add	fp, #24
2ad84     A7 FA 61 FC | 	wrlong	result1, fp
2ad88     14 4E 85 F1 | 	sub	fp, #20
2ad8c     A7 FA 01 FB | 	rdlong	result1, fp
2ad90     0B FA 45 F0 | 	shr	result1, #11
2ad94     1F FA 05 F5 | 	and	result1, #31
2ad98     10 4E 05 F1 | 	add	fp, #16
2ad9c     A7 FA 61 FC | 	wrlong	result1, fp
2ada0     10 4E 85 F1 | 	sub	fp, #16
2ada4     A7 FA 01 FB | 	rdlong	result1, fp
2ada8     05 FA 45 F0 | 	shr	result1, #5
2adac     3F FA 05 F5 | 	and	result1, #63
2adb0     0C 4E 05 F1 | 	add	fp, #12
2adb4     A7 FA 61 FC | 	wrlong	result1, fp
2adb8     0C 4E 85 F1 | 	sub	fp, #12
2adbc     A7 14 02 FB | 	rdlong	arg02, fp
2adc0     1F 14 06 F5 | 	and	arg02, #31
2adc4     01 14 66 F0 | 	shl	arg02, #1
2adc8     08 4E 05 F1 | 	add	fp, #8
2adcc     A7 14 62 FC | 	wrlong	arg02, fp
2add0     A7 12 02 F6 | 	mov	arg01, fp
2add4     10 4E 85 F1 | 	sub	fp, #16
2add8     4C FA BF FD | 	call	#_fatfs_cc_mktime
2addc     0C 4E 05 F1 | 	add	fp, #12
2ade0     A7 FA 61 FC | 	wrlong	result1, fp
2ade4                 | ' 
2ade4                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2ade4                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2ade4                 | '     date.tm_mday = (dosdate & 0x1f);
2ade4                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2ade4                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2ade4                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2ade4                 | ' 
2ade4                 | '     t = mktime(&date);
2ade4                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ade4                 | '     return t;
2ade4     0C 4E 85 F1 | 	sub	fp, #12
2ade8     A7 F0 03 F6 | 	mov	ptra, fp
2adec     B2 00 A0 FD | 	call	#popregs_
2adf0                 | _fatfs_cc_unixtime_0894_ret
2adf0     2D 00 64 FD | 	ret
2adf4                 | 
2adf4                 | _fatfs_cc__set_dos_error_0896
2adf4     09 01 02 F6 | 	mov	_var01, arg01
2adf8                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2adf8                 | '     switch (derr) {
2adf8     14 00 26 F3 | 	fle	_var01, #20
2adfc     30 00 62 FD | 	jmprel	_var01
2ae00                 | LR__4320
2ae00     50 00 90 FD | 	jmp	#LR__4321
2ae04     84 00 90 FD | 	jmp	#LR__4335
2ae08     80 00 90 FD | 	jmp	#LR__4336
2ae0c     7C 00 90 FD | 	jmp	#LR__4337
2ae10     48 00 90 FD | 	jmp	#LR__4322
2ae14     44 00 90 FD | 	jmp	#LR__4323
2ae18     40 00 90 FD | 	jmp	#LR__4324
2ae1c     44 00 90 FD | 	jmp	#LR__4325
2ae20     48 00 90 FD | 	jmp	#LR__4327
2ae24     54 00 90 FD | 	jmp	#LR__4330
2ae28     38 00 90 FD | 	jmp	#LR__4326
2ae2c     4C 00 90 FD | 	jmp	#LR__4331
2ae30     48 00 90 FD | 	jmp	#LR__4332
2ae34     44 00 90 FD | 	jmp	#LR__4333
2ae38     50 00 90 FD | 	jmp	#LR__4338
2ae3c     4C 00 90 FD | 	jmp	#LR__4338
2ae40     48 00 90 FD | 	jmp	#LR__4338
2ae44     2C 00 90 FD | 	jmp	#LR__4328
2ae48     38 00 90 FD | 	jmp	#LR__4334
2ae4c     2C 00 90 FD | 	jmp	#LR__4329
2ae50     38 00 90 FD | 	jmp	#LR__4338
2ae54                 | LR__4321
2ae54     00 02 06 F6 | 	mov	_var02, #0
2ae58                 | '         r = 0;
2ae58                 | '         break;
2ae58     34 00 90 FD | 	jmp	#LR__4339
2ae5c                 | LR__4322
2ae5c                 | LR__4323
2ae5c                 | LR__4324
2ae5c     04 02 06 F6 | 	mov	_var02, #4
2ae60                 | '         r =  4 ;
2ae60                 | '         break;
2ae60     2C 00 90 FD | 	jmp	#LR__4339
2ae64                 | LR__4325
2ae64                 | LR__4326
2ae64     06 02 06 F6 | 	mov	_var02, #6
2ae68                 | '         r =  6 ;
2ae68                 | '         break;
2ae68     24 00 90 FD | 	jmp	#LR__4339
2ae6c                 | LR__4327
2ae6c     09 02 06 F6 | 	mov	_var02, #9
2ae70                 | '         r =  9 ;
2ae70                 | '         break;
2ae70     1C 00 90 FD | 	jmp	#LR__4339
2ae74                 | LR__4328
2ae74     07 02 06 F6 | 	mov	_var02, #7
2ae78                 | '         r =  7 ;
2ae78                 | '         break;
2ae78     14 00 90 FD | 	jmp	#LR__4339
2ae7c                 | LR__4329
2ae7c                 | LR__4330
2ae7c                 | LR__4331
2ae7c                 | LR__4332
2ae7c                 | LR__4333
2ae7c     0A 02 06 F6 | 	mov	_var02, #10
2ae80                 | '         r =  10 ;
2ae80                 | '         break;
2ae80     0C 00 90 FD | 	jmp	#LR__4339
2ae84                 | LR__4334
2ae84     0B 02 06 F6 | 	mov	_var02, #11
2ae88                 | '         r =  11 ;
2ae88                 | '         break;
2ae88     04 00 90 FD | 	jmp	#LR__4339
2ae8c                 | LR__4335
2ae8c                 | LR__4336
2ae8c                 | LR__4337
2ae8c                 | LR__4338
2ae8c     0C 02 06 F6 | 	mov	_var02, #12
2ae90                 | '         r =  12 ;
2ae90                 | '         break;
2ae90                 | LR__4339
2ae90                 | '     }
2ae90                 | '     return _seterror(r);
2ae90     00 02 4E F2 | 	cmps	_var02, #0 wz
2ae94     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ae98     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2ae9c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2aea0     01 FA 65 56 |  if_ne	neg	result1, #1
2aea4     00 FA 05 A6 |  if_e	mov	result1, #0
2aea8                 | _fatfs_cc__set_dos_error_0896_ret
2aea8     2D 00 64 FD | 	ret
2aeac                 | 
2aeac                 | _fatfs_cc_v_creat
2aeac     04 4A 05 F6 | 	mov	COUNT_, #4
2aeb0     A8 00 A0 FD | 	call	#pushregs_
2aeb4     09 1F 02 F6 | 	mov	local01, arg01
2aeb8     0A 21 02 F6 | 	mov	local02, arg02
2aebc     03 00 00 FF 
2aec0     3C 12 06 F6 | 	mov	arg01, ##1596
2aec4                 | '     return _gc_alloc(size);
2aec4     10 14 06 F6 | 	mov	arg02, #16
2aec8     30 60 BF FD | 	call	#__system___gc_doalloc
2aecc     FD 22 0A F6 | 	mov	local03, result1 wz
2aed0                 | '       return _seterror( 7 );
2aed0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2aed4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2aed8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2aedc     01 FA 65 A6 |  if_e	neg	result1, #1
2aee0     58 00 90 AD |  if_e	jmp	#LR__4341
2aee4     11 13 02 F6 | 	mov	arg01, local03
2aee8     00 14 06 F6 | 	mov	arg02, #0
2aeec     03 00 00 FF 
2aef0     3C 16 06 F6 | 	mov	arg03, ##1596
2aef4     98 00 A0 FD | 	call	#\builtin_bytefill_
2aef8     02 00 00 FF 
2aefc     14 22 06 F1 | 	add	local03, ##1044
2af00     11 13 02 F6 | 	mov	arg01, local03
2af04     02 00 00 FF 
2af08     14 22 86 F1 | 	sub	local03, ##1044
2af0c     10 15 02 F6 | 	mov	arg02, local02
2af10     07 16 06 F6 | 	mov	arg03, #7
2af14     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2af18     FD 24 0A F6 | 	mov	local04, result1 wz
2af1c     14 00 90 AD |  if_e	jmp	#LR__4340
2af20     11 13 02 F6 | 	mov	arg01, local03
2af24                 | '     return _gc_free(ptr);
2af24     E0 60 BF FD | 	call	#__system___gc_free
2af28                 | '     free(f);
2af28                 | '     return _set_dos_error(r);
2af28     12 13 02 F6 | 	mov	arg01, local04
2af2c     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2af30     08 00 90 FD | 	jmp	#LR__4341
2af34                 | LR__4340
2af34     0F 23 62 FC | 	wrlong	local03, local01
2af38                 | '   }
2af38                 | '   fil->vfsdata = f;
2af38                 | '   return 0;
2af38     00 FA 05 F6 | 	mov	result1, #0
2af3c                 | LR__4341
2af3c     A7 F0 03 F6 | 	mov	ptra, fp
2af40     B2 00 A0 FD | 	call	#popregs_
2af44                 | _fatfs_cc_v_creat_ret
2af44     2D 00 64 FD | 	ret
2af48                 | 
2af48                 | _fatfs_cc_v_close
2af48     02 4A 05 F6 | 	mov	COUNT_, #2
2af4c     A8 00 A0 FD | 	call	#pushregs_
2af50     09 1F 02 FB | 	rdlong	local01, arg01
2af54     02 00 00 FF 
2af58     14 1E 06 F1 | 	add	local01, ##1044
2af5c     0F 13 02 F6 | 	mov	arg01, local01
2af60     02 00 00 FF 
2af64     14 1E 86 F1 | 	sub	local01, ##1044
2af68     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2af6c     FD 20 02 F6 | 	mov	local02, result1
2af70     0F 13 02 F6 | 	mov	arg01, local01
2af74                 | '     return _gc_free(ptr);
2af74     90 60 BF FD | 	call	#__system___gc_free
2af78                 | '     FAT_FIL *f = fil->vfsdata;
2af78                 | '     r=f_close(&f->fil);
2af78                 | '     free(f);
2af78                 | '     return _set_dos_error(r);
2af78     10 13 02 F6 | 	mov	arg01, local02
2af7c     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2af80     A7 F0 03 F6 | 	mov	ptra, fp
2af84     B2 00 A0 FD | 	call	#popregs_
2af88                 | _fatfs_cc_v_close_ret
2af88     2D 00 64 FD | 	ret
2af8c                 | 
2af8c                 | _fatfs_cc_v_opendir
2af8c     04 4A 05 F6 | 	mov	COUNT_, #4
2af90     A8 00 A0 FD | 	call	#pushregs_
2af94     09 1F 02 F6 | 	mov	local01, arg01
2af98     0A 21 02 F6 | 	mov	local02, arg02
2af9c     30 12 06 F6 | 	mov	arg01, #48
2afa0                 | '     return _gc_alloc(size);
2afa0     10 14 06 F6 | 	mov	arg02, #16
2afa4     54 5F BF FD | 	call	#__system___gc_doalloc
2afa8     FD 22 0A F6 | 	mov	local03, result1 wz
2afac                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2afac                 | '       return _seterror( 7 );
2afac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2afb0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2afb4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2afb8     01 FA 65 A6 |  if_e	neg	result1, #1
2afbc     34 00 90 AD |  if_e	jmp	#LR__4351
2afc0     10 15 02 F6 | 	mov	arg02, local02
2afc4     11 13 02 F6 | 	mov	arg01, local03
2afc8     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2afcc     FD 24 0A F6 | 	mov	local04, result1 wz
2afd0     14 00 90 AD |  if_e	jmp	#LR__4350
2afd4     11 13 02 F6 | 	mov	arg01, local03
2afd8                 | '     return _gc_free(ptr);
2afd8     2C 60 BF FD | 	call	#__system___gc_free
2afdc                 | '         free(f);
2afdc                 | '         return _set_dos_error(r);
2afdc     12 13 02 F6 | 	mov	arg01, local04
2afe0     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2afe4     0C 00 90 FD | 	jmp	#LR__4351
2afe8                 | LR__4350
2afe8     04 1E 06 F1 | 	add	local01, #4
2afec     0F 23 62 FC | 	wrlong	local03, local01
2aff0                 | '     }
2aff0                 | '     dir->vfsdata = f;
2aff0                 | '     return 0;
2aff0     00 FA 05 F6 | 	mov	result1, #0
2aff4                 | LR__4351
2aff4     A7 F0 03 F6 | 	mov	ptra, fp
2aff8     B2 00 A0 FD | 	call	#popregs_
2affc                 | _fatfs_cc_v_opendir_ret
2affc     2D 00 64 FD | 	ret
2b000                 | 
2b000                 | _fatfs_cc_v_closedir
2b000     02 4A 05 F6 | 	mov	COUNT_, #2
2b004     A8 00 A0 FD | 	call	#pushregs_
2b008     04 12 06 F1 | 	add	arg01, #4
2b00c     09 1F 02 FB | 	rdlong	local01, arg01
2b010     0F 13 02 F6 | 	mov	arg01, local01
2b014     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2b018     FD 20 02 F6 | 	mov	local02, result1
2b01c     0F 13 02 F6 | 	mov	arg01, local01
2b020                 | '     return _gc_free(ptr);
2b020     E4 5F BF FD | 	call	#__system___gc_free
2b024     00 20 0E F2 | 	cmp	local02, #0 wz
2b028     10 13 02 56 |  if_ne	mov	arg01, local02
2b02c     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0896
2b030                 | '     return r;
2b030     10 FB 01 F6 | 	mov	result1, local02
2b034     A7 F0 03 F6 | 	mov	ptra, fp
2b038     B2 00 A0 FD | 	call	#popregs_
2b03c                 | _fatfs_cc_v_closedir_ret
2b03c     2D 00 64 FD | 	ret
2b040                 | 
2b040                 | _fatfs_cc_v_readdir
2b040     01 4A 05 F6 | 	mov	COUNT_, #1
2b044     A8 00 A0 FD | 	call	#pushregs_
2b048     2C F1 07 F1 | 	add	ptra, #300
2b04c     04 4E 05 F1 | 	add	fp, #4
2b050     A7 12 62 FC | 	wrlong	arg01, fp
2b054     04 4E 05 F1 | 	add	fp, #4
2b058     A7 14 62 FC | 	wrlong	arg02, fp
2b05c     04 4E 85 F1 | 	sub	fp, #4
2b060     A7 16 02 FB | 	rdlong	arg03, fp
2b064     04 16 06 F1 | 	add	arg03, #4
2b068     0B 13 02 FB | 	rdlong	arg01, arg03
2b06c     08 4E 05 F1 | 	add	fp, #8
2b070     A7 14 02 F6 | 	mov	arg02, fp
2b074     0C 4E 85 F1 | 	sub	fp, #12
2b078     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2b07c     28 4F 05 F1 | 	add	fp, #296
2b080     A7 FA 61 FC | 	wrlong	result1, fp
2b084     28 4F 85 F1 | 	sub	fp, #296
2b088     00 FA 0D F2 | 	cmp	result1, #0 wz
2b08c     14 00 90 AD |  if_e	jmp	#LR__4360
2b090                 | '         return _set_dos_error(r);
2b090     28 4F 05 F1 | 	add	fp, #296
2b094     A7 12 02 FB | 	rdlong	arg01, fp
2b098     28 4F 85 F1 | 	sub	fp, #296
2b09c     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2b0a0     C4 00 90 FD | 	jmp	#LR__4363
2b0a4                 | LR__4360
2b0a4     28 4E 05 F1 | 	add	fp, #40
2b0a8     A7 16 CA FA | 	rdbyte	arg03, fp wz
2b0ac     28 4E 85 F1 | 	sub	fp, #40
2b0b0                 | '         return -1;
2b0b0     01 FA 65 A6 |  if_e	neg	result1, #1
2b0b4     B0 00 90 AD |  if_e	jmp	#LR__4363
2b0b8     08 4E 05 F1 | 	add	fp, #8
2b0bc     A7 12 02 FB | 	rdlong	arg01, fp
2b0c0     20 4E 05 F1 | 	add	fp, #32
2b0c4     A7 14 02 F6 | 	mov	arg02, fp
2b0c8     28 4E 85 F1 | 	sub	fp, #40
2b0cc     3F 16 06 F6 | 	mov	arg03, #63
2b0d0     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2b0d4     08 4E 05 F1 | 	add	fp, #8
2b0d8     A7 16 02 FB | 	rdlong	arg03, fp
2b0dc     3F 16 06 F1 | 	add	arg03, #63
2b0e0     0B 01 48 FC | 	wrbyte	#0, arg03
2b0e4     0C 4E 05 F1 | 	add	fp, #12
2b0e8     A7 16 C2 FA | 	rdbyte	arg03, fp
2b0ec     14 4E 85 F1 | 	sub	fp, #20
2b0f0     10 16 CE F7 | 	test	arg03, #16 wz
2b0f4     18 00 90 AD |  if_e	jmp	#LR__4361
2b0f8     08 4E 05 F1 | 	add	fp, #8
2b0fc     A7 16 02 FB | 	rdlong	arg03, fp
2b100     08 4E 85 F1 | 	sub	fp, #8
2b104     50 16 06 F1 | 	add	arg03, #80
2b108     0B 03 48 FC | 	wrbyte	#1, arg03
2b10c     14 00 90 FD | 	jmp	#LR__4362
2b110                 | LR__4361
2b110     08 4E 05 F1 | 	add	fp, #8
2b114     A7 16 02 FB | 	rdlong	arg03, fp
2b118     08 4E 85 F1 | 	sub	fp, #8
2b11c     50 16 06 F1 | 	add	arg03, #80
2b120     0B 01 48 FC | 	wrbyte	#0, arg03
2b124                 | LR__4362
2b124     08 4E 05 F1 | 	add	fp, #8
2b128     A7 16 02 FB | 	rdlong	arg03, fp
2b12c     04 4E 05 F1 | 	add	fp, #4
2b130     A7 14 02 FB | 	rdlong	arg02, fp
2b134     48 16 06 F1 | 	add	arg03, #72
2b138     0B 15 62 FC | 	wrlong	arg02, arg03
2b13c     04 4E 85 F1 | 	sub	fp, #4
2b140     A7 1E 02 FB | 	rdlong	local01, fp
2b144     08 4E 05 F1 | 	add	fp, #8
2b148     A7 12 E2 FA | 	rdword	arg01, fp
2b14c     02 4E 05 F1 | 	add	fp, #2
2b150     A7 14 E2 FA | 	rdword	arg02, fp
2b154     12 4E 85 F1 | 	sub	fp, #18
2b158     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0894
2b15c     4C 1E 06 F1 | 	add	local01, #76
2b160     0F FB 61 FC | 	wrlong	result1, local01
2b164                 | '         ent->d_type =  (0) ;
2b164                 | '     }
2b164                 | '     ent->d_size = finfo.fsize;
2b164                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2b164                 | '     return 0;
2b164     00 FA 05 F6 | 	mov	result1, #0
2b168                 | LR__4363
2b168     A7 F0 03 F6 | 	mov	ptra, fp
2b16c     B2 00 A0 FD | 	call	#popregs_
2b170                 | _fatfs_cc_v_readdir_ret
2b170     2D 00 64 FD | 	ret
2b174                 | 
2b174                 | _fatfs_cc_v_stat
2b174     03 4A 05 F6 | 	mov	COUNT_, #3
2b178     A8 00 A0 FD | 	call	#pushregs_
2b17c     30 F1 07 F1 | 	add	ptra, #304
2b180     04 4E 05 F1 | 	add	fp, #4
2b184     A7 12 62 FC | 	wrlong	arg01, fp
2b188     04 4E 05 F1 | 	add	fp, #4
2b18c     A7 14 62 FC | 	wrlong	arg02, fp
2b190     08 4E 85 F1 | 	sub	fp, #8
2b194     0A 13 02 F6 | 	mov	arg01, arg02
2b198     00 14 06 F6 | 	mov	arg02, #0
2b19c     30 16 06 F6 | 	mov	arg03, #48
2b1a0     98 00 A0 FD | 	call	#\builtin_bytefill_
2b1a4     04 4E 05 F1 | 	add	fp, #4
2b1a8     A7 FA 01 FB | 	rdlong	result1, fp
2b1ac     04 4E 85 F1 | 	sub	fp, #4
2b1b0     FD FA C9 FA | 	rdbyte	result1, result1 wz
2b1b4     2C 00 90 AD |  if_e	jmp	#LR__4370
2b1b8     04 4E 05 F1 | 	add	fp, #4
2b1bc     A7 FA 01 FB | 	rdlong	result1, fp
2b1c0     04 4E 85 F1 | 	sub	fp, #4
2b1c4     FD FA C1 FA | 	rdbyte	result1, result1
2b1c8     2E FA 0D F2 | 	cmp	result1, #46 wz
2b1cc     04 4E 05 A1 |  if_e	add	fp, #4
2b1d0     A7 1E 02 AB |  if_e	rdlong	local01, fp
2b1d4     04 4E 85 A1 |  if_e	sub	fp, #4
2b1d8     01 1E 06 A1 |  if_e	add	local01, #1
2b1dc     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2b1e0     18 00 90 5D |  if_ne	jmp	#LR__4371
2b1e4                 | LR__4370
2b1e4     18 4E 05 F1 | 	add	fp, #24
2b1e8     A7 20 48 FC | 	wrbyte	#16, fp
2b1ec     0C 4E 85 F1 | 	sub	fp, #12
2b1f0     A7 00 68 FC | 	wrlong	#0, fp
2b1f4     0C 4E 85 F1 | 	sub	fp, #12
2b1f8     24 00 90 FD | 	jmp	#LR__4372
2b1fc                 | LR__4371
2b1fc     04 4E 05 F1 | 	add	fp, #4
2b200     A7 12 02 FB | 	rdlong	arg01, fp
2b204     0C 4E 05 F1 | 	add	fp, #12
2b208     A7 14 02 F6 | 	mov	arg02, fp
2b20c     10 4E 85 F1 | 	sub	fp, #16
2b210     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2b214     0C 4E 05 F1 | 	add	fp, #12
2b218     A7 FA 61 FC | 	wrlong	result1, fp
2b21c     0C 4E 85 F1 | 	sub	fp, #12
2b220                 | LR__4372
2b220     0C 4E 05 F1 | 	add	fp, #12
2b224     A7 20 0A FB | 	rdlong	local02, fp wz
2b228     0C 4E 85 F1 | 	sub	fp, #12
2b22c     14 00 90 AD |  if_e	jmp	#LR__4373
2b230                 | '         return _set_dos_error(r);
2b230     0C 4E 05 F1 | 	add	fp, #12
2b234     A7 12 02 FB | 	rdlong	arg01, fp
2b238     0C 4E 85 F1 | 	sub	fp, #12
2b23c     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2b240     14 01 90 FD | 	jmp	#LR__4374
2b244                 | LR__4373
2b244     2C 4F 05 F1 | 	add	fp, #300
2b248     A7 48 6A FC | 	wrlong	#292, fp
2b24c     14 4F 85 F1 | 	sub	fp, #276
2b250     A7 22 C2 FA | 	rdbyte	local03, fp
2b254     18 4E 85 F1 | 	sub	fp, #24
2b258     01 22 CE F7 | 	test	local03, #1 wz
2b25c     2C 4F 05 A1 |  if_e	add	fp, #300
2b260     A7 22 02 AB |  if_e	rdlong	local03, fp
2b264     92 22 46 A5 |  if_e	or	local03, #146
2b268     A7 22 62 AC |  if_e	wrlong	local03, fp
2b26c     2C 4F 85 A1 |  if_e	sub	fp, #300
2b270     18 4E 05 F1 | 	add	fp, #24
2b274     A7 22 C2 FA | 	rdbyte	local03, fp
2b278     18 4E 85 F1 | 	sub	fp, #24
2b27c     10 22 CE F7 | 	test	local03, #16 wz
2b280     2C 4F 05 51 |  if_ne	add	fp, #300
2b284     A7 22 02 5B |  if_ne	rdlong	local03, fp
2b288     08 00 00 5F 
2b28c     49 22 46 55 |  if_ne	or	local03, ##4169
2b290     A7 22 62 5C |  if_ne	wrlong	local03, fp
2b294     2C 4F 85 51 |  if_ne	sub	fp, #300
2b298     08 4E 05 F1 | 	add	fp, #8
2b29c     A7 22 02 FB | 	rdlong	local03, fp
2b2a0     24 4F 05 F1 | 	add	fp, #292
2b2a4     A7 20 02 FB | 	rdlong	local02, fp
2b2a8     08 22 06 F1 | 	add	local03, #8
2b2ac     11 21 62 FC | 	wrlong	local02, local03
2b2b0     24 4F 85 F1 | 	sub	fp, #292
2b2b4     A7 22 02 FB | 	rdlong	local03, fp
2b2b8     0C 22 06 F1 | 	add	local03, #12
2b2bc     11 03 68 FC | 	wrlong	#1, local03
2b2c0     A7 22 02 FB | 	rdlong	local03, fp
2b2c4     08 4E 05 F1 | 	add	fp, #8
2b2c8     A7 20 02 FB | 	rdlong	local02, fp
2b2cc     18 22 06 F1 | 	add	local03, #24
2b2d0     11 21 62 FC | 	wrlong	local02, local03
2b2d4     08 4E 85 F1 | 	sub	fp, #8
2b2d8     A7 22 02 FB | 	rdlong	local03, fp
2b2dc     1C 22 06 F1 | 	add	local03, #28
2b2e0     01 00 80 FF 
2b2e4     11 01 68 FC | 	wrlong	##512, local03
2b2e8     A7 20 02 FB | 	rdlong	local02, fp
2b2ec     10 23 02 F6 | 	mov	local03, local02
2b2f0     18 20 06 F1 | 	add	local02, #24
2b2f4     10 21 02 FB | 	rdlong	local02, local02
2b2f8     FF 21 06 F1 | 	add	local02, #511
2b2fc     10 21 52 F6 | 	abs	local02, local02 wc
2b300     09 20 46 F0 | 	shr	local02, #9
2b304     10 21 82 F6 | 	negc	local02, local02
2b308     20 22 06 F1 | 	add	local03, #32
2b30c     11 21 62 FC | 	wrlong	local02, local03
2b310     A7 20 02 FB | 	rdlong	local02, fp
2b314     10 23 02 F6 | 	mov	local03, local02
2b318     10 1F 02 F6 | 	mov	local01, local02
2b31c     0C 4E 05 F1 | 	add	fp, #12
2b320     A7 12 E2 FA | 	rdword	arg01, fp
2b324     02 4E 05 F1 | 	add	fp, #2
2b328     A7 14 E2 FA | 	rdword	arg02, fp
2b32c     16 4E 85 F1 | 	sub	fp, #22
2b330     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0894
2b334     2C 1E 06 F1 | 	add	local01, #44
2b338     0F FB 61 FC | 	wrlong	result1, local01
2b33c     28 20 06 F1 | 	add	local02, #40
2b340     10 FB 61 FC | 	wrlong	result1, local02
2b344     24 22 06 F1 | 	add	local03, #36
2b348     11 FB 61 FC | 	wrlong	result1, local03
2b34c                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2b34c                 | '     }
2b34c                 | '     buf->st_mode = mode;
2b34c                 | '     buf->st_nlink = 1;
2b34c                 | '     buf->st_size = finfo.fsize;
2b34c                 | '     buf->st_blksize = 512;
2b34c                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2b34c                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2b34c                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2b34c                 | '     return r;
2b34c     0C 4E 05 F1 | 	add	fp, #12
2b350     A7 FA 01 FB | 	rdlong	result1, fp
2b354     0C 4E 85 F1 | 	sub	fp, #12
2b358                 | LR__4374
2b358     A7 F0 03 F6 | 	mov	ptra, fp
2b35c     B2 00 A0 FD | 	call	#popregs_
2b360                 | _fatfs_cc_v_stat_ret
2b360     2D 00 64 FD | 	ret
2b364                 | 
2b364                 | _fatfs_cc_v_read
2b364     00 4A 05 F6 | 	mov	COUNT_, #0
2b368     A8 00 A0 FD | 	call	#pushregs_
2b36c     1C F0 07 F1 | 	add	ptra, #28
2b370     04 4E 05 F1 | 	add	fp, #4
2b374     A7 12 62 FC | 	wrlong	arg01, fp
2b378     04 4E 05 F1 | 	add	fp, #4
2b37c     A7 14 62 FC | 	wrlong	arg02, fp
2b380     04 4E 05 F1 | 	add	fp, #4
2b384     A7 16 62 FC | 	wrlong	arg03, fp
2b388     08 4E 85 F1 | 	sub	fp, #8
2b38c     A7 12 02 FB | 	rdlong	arg01, fp
2b390     09 13 0A FB | 	rdlong	arg01, arg01 wz
2b394     0C 4E 05 F1 | 	add	fp, #12
2b398     A7 12 62 FC | 	wrlong	arg01, fp
2b39c     10 4E 85 F1 | 	sub	fp, #16
2b3a0                 | '         return _seterror( 5 );
2b3a0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b3a4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2b3a8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b3ac     01 FA 65 A6 |  if_e	neg	result1, #1
2b3b0     B8 00 90 AD |  if_e	jmp	#LR__4382
2b3b4     10 4E 05 F1 | 	add	fp, #16
2b3b8     A7 12 02 FB | 	rdlong	arg01, fp
2b3bc     02 00 00 FF 
2b3c0     14 12 06 F1 | 	add	arg01, ##1044
2b3c4     08 4E 85 F1 | 	sub	fp, #8
2b3c8     A7 14 02 FB | 	rdlong	arg02, fp
2b3cc     04 4E 05 F1 | 	add	fp, #4
2b3d0     A7 16 02 FB | 	rdlong	arg03, fp
2b3d4     0C 4E 05 F1 | 	add	fp, #12
2b3d8     A7 18 02 F6 | 	mov	arg04, fp
2b3dc     18 4E 85 F1 | 	sub	fp, #24
2b3e0     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2b3e4     14 4E 05 F1 | 	add	fp, #20
2b3e8     A7 FA 61 FC | 	wrlong	result1, fp
2b3ec     14 4E 85 F1 | 	sub	fp, #20
2b3f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b3f4     34 00 90 AD |  if_e	jmp	#LR__4380
2b3f8     04 4E 05 F1 | 	add	fp, #4
2b3fc     A7 18 02 FB | 	rdlong	arg04, fp
2b400     0C 17 02 F6 | 	mov	arg03, arg04
2b404     08 18 06 F1 | 	add	arg04, #8
2b408     0C 19 02 FB | 	rdlong	arg04, arg04
2b40c     20 18 46 F5 | 	or	arg04, #32
2b410     08 16 06 F1 | 	add	arg03, #8
2b414     0B 19 62 FC | 	wrlong	arg04, arg03
2b418                 | '         fil->state |=  (0x20) ;
2b418                 | '         return _set_dos_error(r);
2b418     10 4E 05 F1 | 	add	fp, #16
2b41c     A7 12 02 FB | 	rdlong	arg01, fp
2b420     14 4E 85 F1 | 	sub	fp, #20
2b424     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2b428     40 00 90 FD | 	jmp	#LR__4382
2b42c                 | LR__4380
2b42c     18 4E 05 F1 | 	add	fp, #24
2b430     A7 FA 09 FB | 	rdlong	result1, fp wz
2b434     18 4E 85 F1 | 	sub	fp, #24
2b438     24 00 90 5D |  if_ne	jmp	#LR__4381
2b43c     04 4E 05 F1 | 	add	fp, #4
2b440     A7 FA 01 FB | 	rdlong	result1, fp
2b444     FD 18 02 F6 | 	mov	arg04, result1
2b448     04 4E 85 F1 | 	sub	fp, #4
2b44c     08 FA 05 F1 | 	add	result1, #8
2b450     FD FA 01 FB | 	rdlong	result1, result1
2b454     10 FA 45 F5 | 	or	result1, #16
2b458     08 18 06 F1 | 	add	arg04, #8
2b45c     0C FB 61 FC | 	wrlong	result1, arg04
2b460                 | LR__4381
2b460                 | '         fil->state |=  (0x10) ;
2b460                 | '     }
2b460                 | '     return x;
2b460     18 4E 05 F1 | 	add	fp, #24
2b464     A7 FA 01 FB | 	rdlong	result1, fp
2b468     18 4E 85 F1 | 	sub	fp, #24
2b46c                 | LR__4382
2b46c     A7 F0 03 F6 | 	mov	ptra, fp
2b470     B2 00 A0 FD | 	call	#popregs_
2b474                 | _fatfs_cc_v_read_ret
2b474     2D 00 64 FD | 	ret
2b478                 | 
2b478                 | _fatfs_cc_v_write
2b478     00 4A 05 F6 | 	mov	COUNT_, #0
2b47c     A8 00 A0 FD | 	call	#pushregs_
2b480     1C F0 07 F1 | 	add	ptra, #28
2b484     04 4E 05 F1 | 	add	fp, #4
2b488     A7 12 62 FC | 	wrlong	arg01, fp
2b48c     04 4E 05 F1 | 	add	fp, #4
2b490     A7 14 62 FC | 	wrlong	arg02, fp
2b494     04 4E 05 F1 | 	add	fp, #4
2b498     A7 16 62 FC | 	wrlong	arg03, fp
2b49c     08 4E 85 F1 | 	sub	fp, #8
2b4a0     A7 12 02 FB | 	rdlong	arg01, fp
2b4a4     09 13 0A FB | 	rdlong	arg01, arg01 wz
2b4a8     0C 4E 05 F1 | 	add	fp, #12
2b4ac     A7 12 62 FC | 	wrlong	arg01, fp
2b4b0     10 4E 85 F1 | 	sub	fp, #16
2b4b4                 | '         return _seterror( 5 );
2b4b4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b4b8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2b4bc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b4c0     01 FA 65 A6 |  if_e	neg	result1, #1
2b4c4     84 00 90 AD |  if_e	jmp	#LR__4391
2b4c8     10 4E 05 F1 | 	add	fp, #16
2b4cc     A7 12 02 FB | 	rdlong	arg01, fp
2b4d0     02 00 00 FF 
2b4d4     14 12 06 F1 | 	add	arg01, ##1044
2b4d8     08 4E 85 F1 | 	sub	fp, #8
2b4dc     A7 14 02 FB | 	rdlong	arg02, fp
2b4e0     04 4E 05 F1 | 	add	fp, #4
2b4e4     A7 16 02 FB | 	rdlong	arg03, fp
2b4e8     0C 4E 05 F1 | 	add	fp, #12
2b4ec     A7 18 02 F6 | 	mov	arg04, fp
2b4f0     18 4E 85 F1 | 	sub	fp, #24
2b4f4     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2b4f8     14 4E 05 F1 | 	add	fp, #20
2b4fc     A7 FA 61 FC | 	wrlong	result1, fp
2b500     14 4E 85 F1 | 	sub	fp, #20
2b504     00 FA 0D F2 | 	cmp	result1, #0 wz
2b508     34 00 90 AD |  if_e	jmp	#LR__4390
2b50c     04 4E 05 F1 | 	add	fp, #4
2b510     A7 18 02 FB | 	rdlong	arg04, fp
2b514     0C 17 02 F6 | 	mov	arg03, arg04
2b518     08 18 06 F1 | 	add	arg04, #8
2b51c     0C 19 02 FB | 	rdlong	arg04, arg04
2b520     20 18 46 F5 | 	or	arg04, #32
2b524     08 16 06 F1 | 	add	arg03, #8
2b528     0B 19 62 FC | 	wrlong	arg04, arg03
2b52c                 | '         fil->state |=  (0x20) ;
2b52c                 | '         return _set_dos_error(r);
2b52c     10 4E 05 F1 | 	add	fp, #16
2b530     A7 12 02 FB | 	rdlong	arg01, fp
2b534     14 4E 85 F1 | 	sub	fp, #20
2b538     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2b53c     0C 00 90 FD | 	jmp	#LR__4391
2b540                 | LR__4390
2b540                 | '     }
2b540                 | '     return x;
2b540     18 4E 05 F1 | 	add	fp, #24
2b544     A7 FA 01 FB | 	rdlong	result1, fp
2b548     18 4E 85 F1 | 	sub	fp, #24
2b54c                 | LR__4391
2b54c     A7 F0 03 F6 | 	mov	ptra, fp
2b550     B2 00 A0 FD | 	call	#popregs_
2b554                 | _fatfs_cc_v_write_ret
2b554     2D 00 64 FD | 	ret
2b558                 | 
2b558                 | _fatfs_cc_v_lseek
2b558     04 4A 05 F6 | 	mov	COUNT_, #4
2b55c     A8 00 A0 FD | 	call	#pushregs_
2b560     0A 1F 02 F6 | 	mov	local01, arg02
2b564     0B 21 02 F6 | 	mov	local02, arg03
2b568     09 23 02 FB | 	rdlong	local03, arg01
2b56c     02 00 00 FF 
2b570     14 22 0E F1 | 	add	local03, ##1044 wz
2b574                 | '         return _seterror( 5 );
2b574     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b578     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2b57c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b580     01 FA 65 A6 |  if_e	neg	result1, #1
2b584     4C 00 90 AD |  if_e	jmp	#LR__4402
2b588     00 20 0E F2 | 	cmp	local02, #0 wz
2b58c     24 00 90 AD |  if_e	jmp	#LR__4400
2b590     01 20 0E F2 | 	cmp	local02, #1 wz
2b594     14 22 06 A1 |  if_e	add	local03, #20
2b598     11 25 02 AB |  if_e	rdlong	local04, local03
2b59c     14 22 86 A1 |  if_e	sub	local03, #20
2b5a0     12 1F 02 A1 |  if_e	add	local01, local04
2b5a4     0C 22 06 51 |  if_ne	add	local03, #12
2b5a8     11 25 02 5B |  if_ne	rdlong	local04, local03
2b5ac     0C 22 86 51 |  if_ne	sub	local03, #12
2b5b0     12 1F 02 51 |  if_ne	add	local01, local04
2b5b4                 | LR__4400
2b5b4     0F 15 02 F6 | 	mov	arg02, local01
2b5b8     11 13 02 F6 | 	mov	arg01, local03
2b5bc     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2b5c0     FD 12 0A F6 | 	mov	arg01, result1 wz
2b5c4     08 00 90 AD |  if_e	jmp	#LR__4401
2b5c8                 | '         return _set_dos_error(result);
2b5c8     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2b5cc     04 00 90 FD | 	jmp	#LR__4402
2b5d0                 | LR__4401
2b5d0                 | '     }
2b5d0                 | '     return offset;
2b5d0     0F FB 01 F6 | 	mov	result1, local01
2b5d4                 | LR__4402
2b5d4     A7 F0 03 F6 | 	mov	ptra, fp
2b5d8     B2 00 A0 FD | 	call	#popregs_
2b5dc                 | _fatfs_cc_v_lseek_ret
2b5dc     2D 00 64 FD | 	ret
2b5e0                 | 
2b5e0                 | _fatfs_cc_v_ioctl
2b5e0                 | ' {
2b5e0                 | '     return _seterror( 10 );
2b5e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b5e4     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2b5e8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b5ec     01 FA 65 F6 | 	neg	result1, #1
2b5f0                 | _fatfs_cc_v_ioctl_ret
2b5f0     2D 00 64 FD | 	ret
2b5f4                 | 
2b5f4                 | _fatfs_cc_v_mkdir
2b5f4     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2b5f8     FD 12 02 F6 | 	mov	arg01, result1
2b5fc                 | ' 
2b5fc                 | '     r = f_mkdir(name);
2b5fc                 | '     return _set_dos_error(r);
2b5fc     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2b600                 | _fatfs_cc_v_mkdir_ret
2b600     2D 00 64 FD | 	ret
2b604                 | 
2b604                 | _fatfs_cc_v_remove
2b604     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2b608     FD 12 02 F6 | 	mov	arg01, result1
2b60c                 | ' 
2b60c                 | '     r = f_unlink(name);
2b60c                 | '     return _set_dos_error(r);
2b60c     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2b610                 | _fatfs_cc_v_remove_ret
2b610     2D 00 64 FD | 	ret
2b614                 | 
2b614                 | _fatfs_cc_v_rmdir
2b614     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2b618     FD 12 02 F6 | 	mov	arg01, result1
2b61c                 | ' 
2b61c                 | '     r = f_unlink(name);
2b61c                 | '     return _set_dos_error(r);
2b61c     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2b620                 | _fatfs_cc_v_rmdir_ret
2b620     2D 00 64 FD | 	ret
2b624                 | 
2b624                 | _fatfs_cc_v_rename
2b624     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2b628     FD 12 02 F6 | 	mov	arg01, result1
2b62c                 | '     return _set_dos_error(r);
2b62c     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2b630                 | _fatfs_cc_v_rename_ret
2b630     2D 00 64 FD | 	ret
2b634                 | 
2b634                 | _fatfs_cc_v_open
2b634     07 4A 05 F6 | 	mov	COUNT_, #7
2b638     A8 00 A0 FD | 	call	#pushregs_
2b63c     09 1F 02 F6 | 	mov	local01, arg01
2b640     0A 21 02 F6 | 	mov	local02, arg02
2b644     0B 23 02 F6 | 	mov	local03, arg03
2b648     03 00 00 FF 
2b64c     3C 12 06 F6 | 	mov	arg01, ##1596
2b650                 | '     return _gc_alloc(size);
2b650     10 14 06 F6 | 	mov	arg02, #16
2b654     A4 58 BF FD | 	call	#__system___gc_doalloc
2b658     FD 24 0A F6 | 	mov	local04, result1 wz
2b65c                 | '       return _seterror( 7 );
2b65c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b660     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2b664     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b668     01 FA 65 A6 |  if_e	neg	result1, #1
2b66c     98 00 90 AD |  if_e	jmp	#LR__4416
2b670     12 13 02 F6 | 	mov	arg01, local04
2b674     00 14 06 F6 | 	mov	arg02, #0
2b678     03 00 00 FF 
2b67c     3C 16 06 F6 | 	mov	arg03, ##1596
2b680     98 00 A0 FD | 	call	#\builtin_bytefill_
2b684                 | '   switch (flags & 3) {
2b684     11 27 02 F6 | 	mov	local05, local03
2b688     03 26 0E F5 | 	and	local05, #3 wz
2b68c     0C 00 90 AD |  if_e	jmp	#LR__4410
2b690     01 26 0E F2 | 	cmp	local05, #1 wz
2b694     0C 00 90 AD |  if_e	jmp	#LR__4411
2b698     10 00 90 FD | 	jmp	#LR__4412
2b69c                 | LR__4410
2b69c     01 28 06 F6 | 	mov	local06, #1
2b6a0                 | '       fs_flags =  0x01 ;
2b6a0                 | '       break;
2b6a0     0C 00 90 FD | 	jmp	#LR__4413
2b6a4                 | LR__4411
2b6a4     02 28 06 F6 | 	mov	local06, #2
2b6a8                 | '       fs_flags =  0x02 ;
2b6a8                 | '       break;
2b6a8     04 00 90 FD | 	jmp	#LR__4413
2b6ac                 | LR__4412
2b6ac     03 28 06 F6 | 	mov	local06, #3
2b6b0                 | '       fs_flags =  0x01  |  0x02 ;
2b6b0                 | '       break;
2b6b0                 | LR__4413
2b6b0     08 22 CE F7 | 	test	local03, #8 wz
2b6b4     18 28 46 55 |  if_ne	or	local06, #24
2b6b8     08 00 90 5D |  if_ne	jmp	#LR__4414
2b6bc     20 22 CE F7 | 	test	local03, #32 wz
2b6c0     30 28 46 55 |  if_ne	or	local06, #48
2b6c4                 | LR__4414
2b6c4     02 00 00 FF 
2b6c8     14 24 06 F1 | 	add	local04, ##1044
2b6cc     12 13 02 F6 | 	mov	arg01, local04
2b6d0     02 00 00 FF 
2b6d4     14 24 86 F1 | 	sub	local04, ##1044
2b6d8     10 15 02 F6 | 	mov	arg02, local02
2b6dc     14 17 02 F6 | 	mov	arg03, local06
2b6e0     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2b6e4     FD 2A 0A F6 | 	mov	local07, result1 wz
2b6e8     14 00 90 AD |  if_e	jmp	#LR__4415
2b6ec     12 13 02 F6 | 	mov	arg01, local04
2b6f0                 | '     return _gc_free(ptr);
2b6f0     14 59 BF FD | 	call	#__system___gc_free
2b6f4                 | '     free(f);
2b6f4                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2b6f4                 | '     return _set_dos_error(r);
2b6f4     15 13 02 F6 | 	mov	arg01, local07
2b6f8     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2b6fc     08 00 90 FD | 	jmp	#LR__4416
2b700                 | LR__4415
2b700     0F 25 62 FC | 	wrlong	local04, local01
2b704                 | '   }
2b704                 | '   fil->vfsdata = f;
2b704                 | '   return 0;
2b704     00 FA 05 F6 | 	mov	result1, #0
2b708                 | LR__4416
2b708     A7 F0 03 F6 | 	mov	ptra, fp
2b70c     B2 00 A0 FD | 	call	#popregs_
2b710                 | _fatfs_cc_v_open_ret
2b710     2D 00 64 FD | 	ret
2b714                 | 
2b714                 | _fatfs_cc_v_flush
2b714     09 13 02 FB | 	rdlong	arg01, arg01
2b718     02 00 00 FF 
2b71c     14 12 0E F1 | 	add	arg01, ##1044 wz
2b720                 | '         return _seterror( 5 );
2b720     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b724     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2b728     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b72c     01 FA 65 A6 |  if_e	neg	result1, #1
2b730     0C 00 90 AD |  if_e	jmp	#LR__4420
2b734     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2b738     FD 12 02 F6 | 	mov	arg01, result1
2b73c                 | '     }
2b73c                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2b73c                 | '     result = f_sync(f);
2b73c                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2b73c                 | '     return _set_dos_error(result);
2b73c     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2b740                 | LR__4420
2b740                 | _fatfs_cc_v_flush_ret
2b740     2D 00 64 FD | 	ret
2b744                 | 
2b744                 | _fatfs_cc_v_init
2b744                 | ' {
2b744                 | '     return 0;
2b744     00 FA 05 F6 | 	mov	result1, #0
2b748                 | _fatfs_cc_v_init_ret
2b748     2D 00 64 FD | 	ret
2b74c                 | 
2b74c                 | _fatfs_cc_v_deinit
2b74c     63 01 00 FF 
2b750     C0 14 06 F6 | 	mov	arg02, ##@LR__4616
2b754     00 12 06 F6 | 	mov	arg01, #0
2b758     00 16 06 F6 | 	mov	arg03, #0
2b75c     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2b760     01 00 00 FF 
2b764     08 E4 05 F1 | 	add	objptr, ##520
2b768     F2 12 02 FB | 	rdlong	arg01, objptr
2b76c     04 E4 05 F1 | 	add	objptr, #4
2b770     F2 14 02 FB | 	rdlong	arg02, objptr
2b774     01 00 00 FF 
2b778     0C E4 85 F1 | 	sub	objptr, ##524
2b77c     54 40 BF FD | 	call	#__system___freepins
2b780                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2b780                 | '     _freepins(f_pinmask);
2b780                 | '     return 0;
2b780     00 FA 05 F6 | 	mov	result1, #0
2b784                 | _fatfs_cc_v_deinit_ret
2b784     2D 00 64 FD | 	ret
2b788                 | 
2b788                 | _fatfs_cc_get_vfs
2b788     01 4A 05 F6 | 	mov	COUNT_, #1
2b78c     A8 00 A0 FD | 	call	#pushregs_
2b790     09 1F 02 F6 | 	mov	local01, arg01
2b794     50 12 06 F6 | 	mov	arg01, #80
2b798     30 57 BF FD | 	call	#__system___gc_alloc_managed
2b79c     FD 12 02 F6 | 	mov	arg01, result1
2b7a0     F2 FA 01 F6 | 	mov	result1, objptr
2b7a4     00 28 04 FF 
2b7a8     00 FA 45 F5 | 	or	result1, ##139460608
2b7ac     09 FB 61 FC | 	wrlong	result1, arg01
2b7b0     F2 FA 01 F6 | 	mov	result1, objptr
2b7b4     00 30 04 FF 
2b7b8     00 FA 45 F5 | 	or	result1, ##140509184
2b7bc     04 12 06 F1 | 	add	arg01, #4
2b7c0     09 FB 61 FC | 	wrlong	result1, arg01
2b7c4     F2 FA 01 F6 | 	mov	result1, objptr
2b7c8     00 38 04 FF 
2b7cc     00 FA 45 F5 | 	or	result1, ##141557760
2b7d0     04 12 06 F1 | 	add	arg01, #4
2b7d4     09 FB 61 FC | 	wrlong	result1, arg01
2b7d8     F2 FA 01 F6 | 	mov	result1, objptr
2b7dc     00 40 04 FF 
2b7e0     00 FA 45 F5 | 	or	result1, ##142606336
2b7e4     04 12 06 F1 | 	add	arg01, #4
2b7e8     09 FB 61 FC | 	wrlong	result1, arg01
2b7ec     F2 FA 01 F6 | 	mov	result1, objptr
2b7f0     00 48 04 FF 
2b7f4     00 FA 45 F5 | 	or	result1, ##143654912
2b7f8     04 12 06 F1 | 	add	arg01, #4
2b7fc     09 FB 61 FC | 	wrlong	result1, arg01
2b800     04 12 06 F1 | 	add	arg01, #4
2b804     09 01 68 FC | 	wrlong	#0, arg01
2b808     04 12 06 F1 | 	add	arg01, #4
2b80c     09 1F 62 FC | 	wrlong	local01, arg01
2b810     04 12 06 F1 | 	add	arg01, #4
2b814     09 01 68 FC | 	wrlong	#0, arg01
2b818     F2 FA 01 F6 | 	mov	result1, objptr
2b81c     00 50 04 FF 
2b820     00 FA 45 F5 | 	or	result1, ##144703488
2b824     04 12 06 F1 | 	add	arg01, #4
2b828     09 FB 61 FC | 	wrlong	result1, arg01
2b82c     F2 FA 01 F6 | 	mov	result1, objptr
2b830     00 58 04 FF 
2b834     00 FA 45 F5 | 	or	result1, ##145752064
2b838     04 12 06 F1 | 	add	arg01, #4
2b83c     09 FB 61 FC | 	wrlong	result1, arg01
2b840     F2 FA 01 F6 | 	mov	result1, objptr
2b844     00 60 04 FF 
2b848     00 FA 45 F5 | 	or	result1, ##146800640
2b84c     04 12 06 F1 | 	add	arg01, #4
2b850     09 FB 61 FC | 	wrlong	result1, arg01
2b854     F2 FA 01 F6 | 	mov	result1, objptr
2b858     00 68 04 FF 
2b85c     00 FA 45 F5 | 	or	result1, ##147849216
2b860     04 12 06 F1 | 	add	arg01, #4
2b864     09 FB 61 FC | 	wrlong	result1, arg01
2b868     F2 FA 01 F6 | 	mov	result1, objptr
2b86c     00 70 04 FF 
2b870     00 FA 45 F5 | 	or	result1, ##148897792
2b874     04 12 06 F1 | 	add	arg01, #4
2b878     09 FB 61 FC | 	wrlong	result1, arg01
2b87c     F2 FA 01 F6 | 	mov	result1, objptr
2b880     00 78 04 FF 
2b884     00 FA 45 F5 | 	or	result1, ##149946368
2b888     04 12 06 F1 | 	add	arg01, #4
2b88c     09 FB 61 FC | 	wrlong	result1, arg01
2b890     F2 FA 01 F6 | 	mov	result1, objptr
2b894     00 80 04 FF 
2b898     00 FA 45 F5 | 	or	result1, ##150994944
2b89c     04 12 06 F1 | 	add	arg01, #4
2b8a0     09 FB 61 FC | 	wrlong	result1, arg01
2b8a4     F2 FA 01 F6 | 	mov	result1, objptr
2b8a8     00 88 04 FF 
2b8ac     00 FA 45 F5 | 	or	result1, ##152043520
2b8b0     04 12 06 F1 | 	add	arg01, #4
2b8b4     09 FB 61 FC | 	wrlong	result1, arg01
2b8b8     F2 FA 01 F6 | 	mov	result1, objptr
2b8bc     00 90 04 FF 
2b8c0     00 FA 45 F5 | 	or	result1, ##153092096
2b8c4     04 12 06 F1 | 	add	arg01, #4
2b8c8     09 FB 61 FC | 	wrlong	result1, arg01
2b8cc     F2 FA 01 F6 | 	mov	result1, objptr
2b8d0     00 98 04 FF 
2b8d4     00 FA 45 F5 | 	or	result1, ##154140672
2b8d8     04 12 06 F1 | 	add	arg01, #4
2b8dc     09 FB 61 FC | 	wrlong	result1, arg01
2b8e0     F2 FA 01 F6 | 	mov	result1, objptr
2b8e4     00 A0 04 FF 
2b8e8     00 FA 45 F5 | 	or	result1, ##155189248
2b8ec     04 12 06 F1 | 	add	arg01, #4
2b8f0     09 FB 61 FC | 	wrlong	result1, arg01
2b8f4     F2 FA 01 F6 | 	mov	result1, objptr
2b8f8     00 A8 04 FF 
2b8fc     00 FA 45 F5 | 	or	result1, ##156237824
2b900     04 12 06 F1 | 	add	arg01, #4
2b904     09 FB 61 FC | 	wrlong	result1, arg01
2b908     4C 12 86 F1 | 	sub	arg01, #76
2b90c                 | ' 
2b90c                 | '     v->close = &v_close;
2b90c                 | '     v->read = &v_read;
2b90c                 | '     v->write = &v_write;
2b90c                 | '     v->lseek = &v_lseek;
2b90c                 | '     v->ioctl = &v_ioctl;
2b90c                 | '     v->flush = 0;
2b90c                 | '     v->vfs_data = ptr;
2b90c                 | '     v->reserved = 0;
2b90c                 | ' 
2b90c                 | '     v->open = &v_open;
2b90c                 | '     v->creat = &v_creat;
2b90c                 | '     v->opendir = &v_opendir;
2b90c                 | '     v->closedir = &v_closedir;
2b90c                 | '     v->readdir = &v_readdir;
2b90c                 | '     v->stat = &v_stat;
2b90c                 | ' 
2b90c                 | '     v->mkdir = &v_mkdir;
2b90c                 | '     v->rmdir = &v_rmdir;
2b90c                 | ' 
2b90c                 | '     v->remove = &v_remove;
2b90c                 | '     v->rename = &v_rename;
2b90c                 | ' 
2b90c                 | '     v->init = &v_init;
2b90c                 | '     v->deinit = &v_deinit;
2b90c                 | ' 
2b90c                 | '     return v;
2b90c     09 FB 01 F6 | 	mov	result1, arg01
2b910     A7 F0 03 F6 | 	mov	ptra, fp
2b914     B2 00 A0 FD | 	call	#popregs_
2b918                 | _fatfs_cc_get_vfs_ret
2b918     2D 00 64 FD | 	ret
2b91c                 | 
2b91c                 | _fatfs_cc_xmit_mmc_1043
2b91c     01 00 00 FF 
2b920     10 E4 05 F1 | 	add	objptr, ##528
2b924     F2 00 02 FB | 	rdlong	_var01, objptr
2b928     08 E4 05 F1 | 	add	objptr, #8
2b92c     F2 02 02 FB | 	rdlong	_var02, objptr
2b930     01 00 00 FF 
2b934     18 E4 85 F1 | 	sub	objptr, ##536
2b938     40 02 62 FD | 	dirl	_var02
2b93c     28 02 64 FD | 	setq	#1
2b940     09 05 02 FB | 	rdlong	_var03, arg01
2b944     69 04 62 FD | 	rev	_var03
2b948     1B 04 FE F9 | 	movbyts	_var03, #27
2b94c     01 05 22 FC | 	wypin	_var03, _var02
2b950     0A 05 02 F6 | 	mov	_var03, arg02
2b954     02 14 4E F0 | 	shr	arg02, #2 wz
2b958     03 04 66 F0 | 	shl	_var03, #3
2b95c     00 05 22 FC | 	wypin	_var03, _var01
2b960     41 02 62 FD | 	dirh	_var02
2b964     08 12 06 F1 | 	add	arg01, #8
2b968     69 06 62 FD | 	rev	_var04
2b96c     1B 06 FE F9 | 	movbyts	_var04, #27
2b970                 | LR__4430
2b970     01 07 22 5C |  if_ne	wypin	_var04, _var02
2b974     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2b978     04 12 06 51 |  if_ne	add	arg01, #4
2b97c     69 06 62 5D |  if_ne	rev	_var04
2b980     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2b984                 | LR__4431
2b984     40 02 72 5D |  if_ne	testp	_var02 wc
2b988     F8 FF 9F 1D |  if_a	jmp	#LR__4431
2b98c     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4430
2b990                 | LR__4432
2b990     40 00 72 FD | 	testp	_var01 wc
2b994     F8 FF 9F 3D |  if_ae	jmp	#LR__4432
2b998     40 02 62 FD | 	dirl	_var02
2b99c     FF FF FF FF 
2b9a0     01 FF 2B FC | 	wypin	##-1, _var02
2b9a4     41 02 62 FD | 	dirh	_var02
2b9a8                 | _fatfs_cc_xmit_mmc_1043_ret
2b9a8     2D 00 64 FD | 	ret
2b9ac                 | 
2b9ac                 | _fatfs_cc_rcvr_mmc_1050
2b9ac     01 00 00 FF 
2b9b0     10 E4 05 F1 | 	add	objptr, ##528
2b9b4     F2 00 02 FB | 	rdlong	_var01, objptr
2b9b8     0C E4 05 F1 | 	add	objptr, #12
2b9bc     F2 02 02 FB | 	rdlong	_var02, objptr
2b9c0     01 00 00 FF 
2b9c4     1C E4 85 F1 | 	sub	objptr, ##540
2b9c8     01 03 08 FC | 	akpin	_var02
2b9cc     0A 05 0A F6 | 	mov	_var03, arg02 wz
2b9d0     02 04 4E F0 | 	shr	_var03, #2 wz
2b9d4     30 00 90 AD |  if_e	jmp	#LR__4442
2b9d8     02 07 02 F6 | 	mov	_var04, _var03
2b9dc     05 06 66 F0 | 	shl	_var04, #5
2b9e0     00 07 22 FC | 	wypin	_var04, _var01
2b9e4     01 7F 18 FC | 	wxpin	#63, _var02
2b9e8                 | LR__4440
2b9e8                 | LR__4441
2b9e8     40 02 72 FD | 	testp	_var02 wc
2b9ec     F8 FF 9F 3D |  if_ae	jmp	#LR__4441
2b9f0     01 07 8A FA | 	rdpin	_var04, _var02
2b9f4     69 06 62 FD | 	rev	_var04
2b9f8     1B 06 FE F9 | 	movbyts	_var04, #27
2b9fc     09 07 62 FC | 	wrlong	_var04, arg01
2ba00     04 12 06 F1 | 	add	arg01, #4
2ba04     F8 05 6E FB | 	djnz	_var03, #LR__4440
2ba08                 | LR__4442
2ba08     03 14 0E F5 | 	and	arg02, #3 wz
2ba0c     24 00 90 AD |  if_e	jmp	#LR__4445
2ba10     01 4F 18 FC | 	wxpin	#39, _var02
2ba14                 | LR__4443
2ba14     00 11 28 FC | 	wypin	#8, _var01
2ba18                 | LR__4444
2ba18     40 02 72 FD | 	testp	_var02 wc
2ba1c     F8 FF 9F 3D |  if_ae	jmp	#LR__4444
2ba20     01 07 8A FA | 	rdpin	_var04, _var02
2ba24     69 06 62 FD | 	rev	_var04
2ba28     09 07 42 FC | 	wrbyte	_var04, arg01
2ba2c     01 12 06 F1 | 	add	arg01, #1
2ba30     F8 15 6E FB | 	djnz	arg02, #LR__4443
2ba34                 | LR__4445
2ba34                 | _fatfs_cc_rcvr_mmc_1050_ret
2ba34     2D 00 64 FD | 	ret
2ba38                 | 
2ba38                 | _fatfs_cc_wait_ready_1054
2ba38     01 4A 05 F6 | 	mov	COUNT_, #1
2ba3c     A8 00 A0 FD | 	call	#pushregs_
2ba40     10 F0 07 F1 | 	add	ptra, #16
2ba44     1A FA 61 FD | 	getct	result1
2ba48     08 4E 05 F1 | 	add	fp, #8
2ba4c     A7 FA 61 FC | 	wrlong	result1, fp
2ba50     14 1E 06 FB | 	rdlong	local01, #20
2ba54     01 1E 46 F0 | 	shr	local01, #1
2ba58     04 4E 05 F1 | 	add	fp, #4
2ba5c     A7 1E 62 FC | 	wrlong	local01, fp
2ba60     0C 4E 85 F1 | 	sub	fp, #12
2ba64                 | ' {
2ba64                 | ' 	BYTE d;
2ba64                 | ' 	UINT tmr, tmout;
2ba64                 | ' 
2ba64                 | ' 	tmr = _cnt();
2ba64                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2ba64                 | ' 	for(;;) {
2ba64                 | LR__4450
2ba64     04 4E 05 F1 | 	add	fp, #4
2ba68     A7 12 02 F6 | 	mov	arg01, fp
2ba6c     04 4E 85 F1 | 	sub	fp, #4
2ba70     01 14 06 F6 | 	mov	arg02, #1
2ba74     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2ba78     04 4E 05 F1 | 	add	fp, #4
2ba7c     A7 1E C2 FA | 	rdbyte	local01, fp
2ba80     04 4E 85 F1 | 	sub	fp, #4
2ba84     FF 1E 0E F2 | 	cmp	local01, #255 wz
2ba88     01 FA 05 A6 |  if_e	mov	result1, #1
2ba8c     28 00 90 AD |  if_e	jmp	#LR__4451
2ba90     1A FA 61 FD | 	getct	result1
2ba94     08 4E 05 F1 | 	add	fp, #8
2ba98     A7 1E 02 FB | 	rdlong	local01, fp
2ba9c     0F FB 81 F1 | 	sub	result1, local01
2baa0     04 4E 05 F1 | 	add	fp, #4
2baa4     A7 1E 02 FB | 	rdlong	local01, fp
2baa8     0C 4E 85 F1 | 	sub	fp, #12
2baac     0F FB 11 F2 | 	cmp	result1, local01 wc
2bab0     00 FA 05 36 |  if_ae	mov	result1, #0
2bab4     AC FF 9F CD |  if_b	jmp	#LR__4450
2bab8                 | LR__4451
2bab8     A7 F0 03 F6 | 	mov	ptra, fp
2babc     B2 00 A0 FD | 	call	#popregs_
2bac0                 | _fatfs_cc_wait_ready_1054_ret
2bac0     2D 00 64 FD | 	ret
2bac4                 | 
2bac4                 | _fatfs_cc_deselect_1060
2bac4     00 4A 05 F6 | 	mov	COUNT_, #0
2bac8     A8 00 A0 FD | 	call	#pushregs_
2bacc     14 F0 07 F1 | 	add	ptra, #20
2bad0     01 00 00 FF 
2bad4     14 E4 05 F1 | 	add	objptr, ##532
2bad8     F2 14 02 FB | 	rdlong	arg02, objptr
2badc     04 4E 05 F1 | 	add	fp, #4
2bae0     A7 14 62 FC | 	wrlong	arg02, fp
2bae4     04 E4 85 F1 | 	sub	objptr, #4
2bae8     F2 14 02 FB | 	rdlong	arg02, objptr
2baec     04 4E 05 F1 | 	add	fp, #4
2baf0     A7 14 62 FC | 	wrlong	arg02, fp
2baf4     08 E4 05 F1 | 	add	objptr, #8
2baf8     F2 14 02 FB | 	rdlong	arg02, objptr
2bafc     04 4E 05 F1 | 	add	fp, #4
2bb00     A7 14 62 FC | 	wrlong	arg02, fp
2bb04     04 E4 05 F1 | 	add	objptr, #4
2bb08     F2 14 02 FB | 	rdlong	arg02, objptr
2bb0c     01 00 00 FF 
2bb10     1C E4 85 F1 | 	sub	objptr, ##540
2bb14     04 4E 05 F1 | 	add	fp, #4
2bb18     A7 14 62 FC | 	wrlong	arg02, fp
2bb1c     0C 4E 85 F1 | 	sub	fp, #12
2bb20     A7 12 02 FB | 	rdlong	arg01, fp
2bb24     04 4E 85 F1 | 	sub	fp, #4
2bb28     59 12 62 FD | 	drvh	arg01
2bb2c     1F 20 64 FD | 	waitx	#16
2bb30     A7 12 02 F6 | 	mov	arg01, fp
2bb34     01 14 06 F6 | 	mov	arg02, #1
2bb38     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2bb3c     A7 F0 03 F6 | 	mov	ptra, fp
2bb40     B2 00 A0 FD | 	call	#popregs_
2bb44                 | _fatfs_cc_deselect_1060_ret
2bb44     2D 00 64 FD | 	ret
2bb48                 | 
2bb48                 | _fatfs_cc_select_1064
2bb48     00 4A 05 F6 | 	mov	COUNT_, #0
2bb4c     A8 00 A0 FD | 	call	#pushregs_
2bb50     10 F0 07 F1 | 	add	ptra, #16
2bb54     01 00 00 FF 
2bb58     14 E4 05 F1 | 	add	objptr, ##532
2bb5c     F2 14 02 FB | 	rdlong	arg02, objptr
2bb60     08 4E 05 F1 | 	add	fp, #8
2bb64     A7 14 62 FC | 	wrlong	arg02, fp
2bb68     08 E4 05 F1 | 	add	objptr, #8
2bb6c     F2 12 02 FB | 	rdlong	arg01, objptr
2bb70     01 00 00 FF 
2bb74     1C E4 85 F1 | 	sub	objptr, ##540
2bb78     04 4E 05 F1 | 	add	fp, #4
2bb7c     A7 12 62 FC | 	wrlong	arg01, fp
2bb80     50 12 62 FD | 	fltl	arg01
2bb84     04 4E 85 F1 | 	sub	fp, #4
2bb88     A7 12 02 FB | 	rdlong	arg01, fp
2bb8c     58 12 62 FD | 	drvl	arg01
2bb90     1F 20 64 FD | 	waitx	#16
2bb94     04 4E 05 F1 | 	add	fp, #4
2bb98     A7 12 02 FB | 	rdlong	arg01, fp
2bb9c     41 12 62 FD | 	dirh	arg01
2bba0     08 4E 85 F1 | 	sub	fp, #8
2bba4     A7 12 02 F6 | 	mov	arg01, fp
2bba8     04 4E 85 F1 | 	sub	fp, #4
2bbac     01 14 06 F6 | 	mov	arg02, #1
2bbb0     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2bbb4     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1054
2bbb8     00 FA 0D F2 | 	cmp	result1, #0 wz
2bbbc     01 FA 05 56 |  if_ne	mov	result1, #1
2bbc0     08 00 90 5D |  if_ne	jmp	#LR__4460
2bbc4     FC FE BF FD | 	call	#_fatfs_cc_deselect_1060
2bbc8                 | ' 
2bbc8                 | ' 	deselect();
2bbc8                 | ' 	return 0;
2bbc8     00 FA 05 F6 | 	mov	result1, #0
2bbcc                 | LR__4460
2bbcc     A7 F0 03 F6 | 	mov	ptra, fp
2bbd0     B2 00 A0 FD | 	call	#popregs_
2bbd4                 | _fatfs_cc_select_1064_ret
2bbd4     2D 00 64 FD | 	ret
2bbd8                 | 
2bbd8                 | _fatfs_cc_rcvr_datablock_1068
2bbd8     01 4A 05 F6 | 	mov	COUNT_, #1
2bbdc     A8 00 A0 FD | 	call	#pushregs_
2bbe0     18 F0 07 F1 | 	add	ptra, #24
2bbe4     04 4E 05 F1 | 	add	fp, #4
2bbe8     A7 12 62 FC | 	wrlong	arg01, fp
2bbec     04 4E 05 F1 | 	add	fp, #4
2bbf0     A7 14 62 FC | 	wrlong	arg02, fp
2bbf4     1A FA 61 FD | 	getct	result1
2bbf8     08 4E 05 F1 | 	add	fp, #8
2bbfc     A7 FA 61 FC | 	wrlong	result1, fp
2bc00     14 1E 06 FB | 	rdlong	local01, #20
2bc04     03 1E 46 F0 | 	shr	local01, #3
2bc08     04 4E 05 F1 | 	add	fp, #4
2bc0c     A7 1E 62 FC | 	wrlong	local01, fp
2bc10     14 4E 85 F1 | 	sub	fp, #20
2bc14                 | ' 	BYTE *buff,
2bc14                 | ' 	UINT btr
2bc14                 | ' )
2bc14                 | ' {
2bc14                 | ' 	BYTE d[2];
2bc14                 | ' 	UINT tmr, tmout;
2bc14                 | ' 
2bc14                 | ' 	tmr = _cnt();
2bc14                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2bc14                 | ' 	for(;;) {
2bc14                 | LR__4470
2bc14     0C 4E 05 F1 | 	add	fp, #12
2bc18     A7 12 02 F6 | 	mov	arg01, fp
2bc1c     0C 4E 85 F1 | 	sub	fp, #12
2bc20     01 14 06 F6 | 	mov	arg02, #1
2bc24     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2bc28     0C 4E 05 F1 | 	add	fp, #12
2bc2c     A7 1E C2 FA | 	rdbyte	local01, fp
2bc30     0C 4E 85 F1 | 	sub	fp, #12
2bc34     FF 1E 0E F2 | 	cmp	local01, #255 wz
2bc38     28 00 90 5D |  if_ne	jmp	#LR__4471
2bc3c     1A FA 61 FD | 	getct	result1
2bc40     FD 1E 02 F6 | 	mov	local01, result1
2bc44     10 4E 05 F1 | 	add	fp, #16
2bc48     A7 14 02 FB | 	rdlong	arg02, fp
2bc4c     0A 1F 82 F1 | 	sub	local01, arg02
2bc50     04 4E 05 F1 | 	add	fp, #4
2bc54     A7 14 02 FB | 	rdlong	arg02, fp
2bc58     14 4E 85 F1 | 	sub	fp, #20
2bc5c     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2bc60     B0 FF 9F CD |  if_b	jmp	#LR__4470
2bc64                 | LR__4471
2bc64     0C 4E 05 F1 | 	add	fp, #12
2bc68     A7 1E C2 FA | 	rdbyte	local01, fp
2bc6c     0C 4E 85 F1 | 	sub	fp, #12
2bc70     FE 1E 0E F2 | 	cmp	local01, #254 wz
2bc74     00 FA 05 56 |  if_ne	mov	result1, #0
2bc78     30 00 90 5D |  if_ne	jmp	#LR__4472
2bc7c     04 4E 05 F1 | 	add	fp, #4
2bc80     A7 12 02 FB | 	rdlong	arg01, fp
2bc84     04 4E 05 F1 | 	add	fp, #4
2bc88     A7 14 02 FB | 	rdlong	arg02, fp
2bc8c     08 4E 85 F1 | 	sub	fp, #8
2bc90     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2bc94     0C 4E 05 F1 | 	add	fp, #12
2bc98     A7 12 02 F6 | 	mov	arg01, fp
2bc9c     0C 4E 85 F1 | 	sub	fp, #12
2bca0     02 14 06 F6 | 	mov	arg02, #2
2bca4     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2bca8                 | ' 
2bca8                 | ' 	rcvr_mmc(buff, btr);
2bca8                 | ' 	rcvr_mmc(d, 2);
2bca8                 | ' 
2bca8                 | ' 	return 1;
2bca8     01 FA 05 F6 | 	mov	result1, #1
2bcac                 | LR__4472
2bcac     A7 F0 03 F6 | 	mov	ptra, fp
2bcb0     B2 00 A0 FD | 	call	#popregs_
2bcb4                 | _fatfs_cc_rcvr_datablock_1068_ret
2bcb4     2D 00 64 FD | 	ret
2bcb8                 | 
2bcb8                 | _fatfs_cc_xmit_datablock_1070
2bcb8     00 4A 05 F6 | 	mov	COUNT_, #0
2bcbc     A8 00 A0 FD | 	call	#pushregs_
2bcc0     10 F0 07 F1 | 	add	ptra, #16
2bcc4     04 4E 05 F1 | 	add	fp, #4
2bcc8     A7 12 62 FC | 	wrlong	arg01, fp
2bccc     04 4E 05 F1 | 	add	fp, #4
2bcd0     A7 14 42 FC | 	wrbyte	arg02, fp
2bcd4     08 4E 85 F1 | 	sub	fp, #8
2bcd8     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1054
2bcdc     00 FA 0D F2 | 	cmp	result1, #0 wz
2bce0     00 FA 05 A6 |  if_e	mov	result1, #0
2bce4     90 00 90 AD |  if_e	jmp	#LR__4481
2bce8     08 4E 05 F1 | 	add	fp, #8
2bcec     A7 14 C2 FA | 	rdbyte	arg02, fp
2bcf0     04 4E 05 F1 | 	add	fp, #4
2bcf4     A7 14 42 FC | 	wrbyte	arg02, fp
2bcf8     A7 12 02 F6 | 	mov	arg01, fp
2bcfc     0C 4E 85 F1 | 	sub	fp, #12
2bd00     01 14 06 F6 | 	mov	arg02, #1
2bd04     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1043
2bd08     08 4E 05 F1 | 	add	fp, #8
2bd0c     A7 14 C2 FA | 	rdbyte	arg02, fp
2bd10     08 4E 85 F1 | 	sub	fp, #8
2bd14     FD 14 0E F2 | 	cmp	arg02, #253 wz
2bd18     58 00 90 AD |  if_e	jmp	#LR__4480
2bd1c     04 4E 05 F1 | 	add	fp, #4
2bd20     A7 12 02 FB | 	rdlong	arg01, fp
2bd24     04 4E 85 F1 | 	sub	fp, #4
2bd28     09 14 C6 F9 | 	decod	arg02, #9
2bd2c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1043
2bd30     0C 4E 05 F1 | 	add	fp, #12
2bd34     A7 12 02 F6 | 	mov	arg01, fp
2bd38     0C 4E 85 F1 | 	sub	fp, #12
2bd3c     02 14 06 F6 | 	mov	arg02, #2
2bd40     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2bd44     0C 4E 05 F1 | 	add	fp, #12
2bd48     A7 12 02 F6 | 	mov	arg01, fp
2bd4c     0C 4E 85 F1 | 	sub	fp, #12
2bd50     01 14 06 F6 | 	mov	arg02, #1
2bd54     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2bd58     0C 4E 05 F1 | 	add	fp, #12
2bd5c     A7 14 C2 FA | 	rdbyte	arg02, fp
2bd60     0C 4E 85 F1 | 	sub	fp, #12
2bd64     1F 14 06 F5 | 	and	arg02, #31
2bd68     05 14 0E F2 | 	cmp	arg02, #5 wz
2bd6c                 | ' 			return 0;
2bd6c     00 FA 05 56 |  if_ne	mov	result1, #0
2bd70     04 00 90 5D |  if_ne	jmp	#LR__4481
2bd74                 | LR__4480
2bd74                 | ' 	}
2bd74                 | ' 
2bd74                 | ' 	return 1;
2bd74     01 FA 05 F6 | 	mov	result1, #1
2bd78                 | LR__4481
2bd78     A7 F0 03 F6 | 	mov	ptra, fp
2bd7c     B2 00 A0 FD | 	call	#popregs_
2bd80                 | _fatfs_cc_xmit_datablock_1070_ret
2bd80     2D 00 64 FD | 	ret
2bd84                 | 
2bd84                 | _fatfs_cc_send_cmd_1074
2bd84     01 4A 05 F6 | 	mov	COUNT_, #1
2bd88     A8 00 A0 FD | 	call	#pushregs_
2bd8c     1C F0 07 F1 | 	add	ptra, #28
2bd90                 | _fatfs_cc_send_cmd_1074_enter
2bd90     04 4E 05 F1 | 	add	fp, #4
2bd94     A7 12 42 FC | 	wrbyte	arg01, fp
2bd98     04 4E 05 F1 | 	add	fp, #4
2bd9c     A7 14 62 FC | 	wrlong	arg02, fp
2bda0     04 4E 85 F1 | 	sub	fp, #4
2bda4     A7 FA C1 FA | 	rdbyte	result1, fp
2bda8     04 4E 85 F1 | 	sub	fp, #4
2bdac     80 FA CD F7 | 	test	result1, #128 wz
2bdb0     44 00 90 AD |  if_e	jmp	#LR__4490
2bdb4     04 4E 05 F1 | 	add	fp, #4
2bdb8     A7 14 C2 FA | 	rdbyte	arg02, fp
2bdbc     7F 14 06 F5 | 	and	arg02, #127
2bdc0     A7 14 42 FC | 	wrbyte	arg02, fp
2bdc4     04 4E 85 F1 | 	sub	fp, #4
2bdc8     37 12 06 F6 | 	mov	arg01, #55
2bdcc     00 14 06 F6 | 	mov	arg02, #0
2bdd0     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1074
2bdd4     0C 4E 05 F1 | 	add	fp, #12
2bdd8     A7 FA 41 FC | 	wrbyte	result1, fp
2bddc     A7 14 C2 FA | 	rdbyte	arg02, fp
2bde0     0C 4E 85 F1 | 	sub	fp, #12
2bde4     02 14 16 F2 | 	cmp	arg02, #2 wc
2bde8     0C 4E 05 31 |  if_ae	add	fp, #12
2bdec     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2bdf0     0C 4E 85 31 |  if_ae	sub	fp, #12
2bdf4     6C 01 90 3D |  if_ae	jmp	#LR__4494
2bdf8                 | LR__4490
2bdf8     04 4E 05 F1 | 	add	fp, #4
2bdfc     A7 14 C2 FA | 	rdbyte	arg02, fp
2be00     04 4E 85 F1 | 	sub	fp, #4
2be04     0C 14 0E F2 | 	cmp	arg02, #12 wz
2be08     14 00 90 AD |  if_e	jmp	#LR__4491
2be0c     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1060
2be10     34 FD BF FD | 	call	#_fatfs_cc_select_1064
2be14     00 FA 0D F2 | 	cmp	result1, #0 wz
2be18     FF FA 05 A6 |  if_e	mov	result1, #255
2be1c     44 01 90 AD |  if_e	jmp	#LR__4494
2be20                 | LR__4491
2be20     04 4E 05 F1 | 	add	fp, #4
2be24     A7 14 C2 FA | 	rdbyte	arg02, fp
2be28     40 FA 05 F6 | 	mov	result1, #64
2be2c     0A FB 41 F5 | 	or	result1, arg02
2be30     10 4E 05 F1 | 	add	fp, #16
2be34     A7 FA 41 FC | 	wrbyte	result1, fp
2be38     0C 4E 85 F1 | 	sub	fp, #12
2be3c     A7 FA 01 FB | 	rdlong	result1, fp
2be40     18 FA 45 F0 | 	shr	result1, #24
2be44     0D 4E 05 F1 | 	add	fp, #13
2be48     A7 FA 41 FC | 	wrbyte	result1, fp
2be4c     0D 4E 85 F1 | 	sub	fp, #13
2be50     A7 FA 01 FB | 	rdlong	result1, fp
2be54     10 FA 45 F0 | 	shr	result1, #16
2be58     0E 4E 05 F1 | 	add	fp, #14
2be5c     A7 FA 41 FC | 	wrbyte	result1, fp
2be60     0E 4E 85 F1 | 	sub	fp, #14
2be64     A7 FA 01 FB | 	rdlong	result1, fp
2be68     08 FA 45 F0 | 	shr	result1, #8
2be6c     0F 4E 05 F1 | 	add	fp, #15
2be70     A7 FA 41 FC | 	wrbyte	result1, fp
2be74     0F 4E 85 F1 | 	sub	fp, #15
2be78     A7 FA 01 FB | 	rdlong	result1, fp
2be7c     10 4E 05 F1 | 	add	fp, #16
2be80     A7 FA 41 FC | 	wrbyte	result1, fp
2be84     0C 4E 85 F1 | 	sub	fp, #12
2be88     A7 02 48 FC | 	wrbyte	#1, fp
2be8c     08 4E 85 F1 | 	sub	fp, #8
2be90     A7 FA C9 FA | 	rdbyte	result1, fp wz
2be94     04 4E 85 F1 | 	sub	fp, #4
2be98     0C 4E 05 A1 |  if_e	add	fp, #12
2be9c     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2bea0     0C 4E 85 A1 |  if_e	sub	fp, #12
2bea4     04 4E 05 F1 | 	add	fp, #4
2bea8     A7 FA C1 FA | 	rdbyte	result1, fp
2beac     04 4E 85 F1 | 	sub	fp, #4
2beb0     08 FA 0D F2 | 	cmp	result1, #8 wz
2beb4     0C 4E 05 A1 |  if_e	add	fp, #12
2beb8     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2bebc     0C 4E 85 A1 |  if_e	sub	fp, #12
2bec0     0C 4E 05 F1 | 	add	fp, #12
2bec4     A7 14 C2 FA | 	rdbyte	arg02, fp
2bec8     0D 4E 05 F1 | 	add	fp, #13
2becc     A7 14 42 FC | 	wrbyte	arg02, fp
2bed0     05 4E 85 F1 | 	sub	fp, #5
2bed4     A7 12 02 F6 | 	mov	arg01, fp
2bed8     14 4E 85 F1 | 	sub	fp, #20
2bedc     06 14 06 F6 | 	mov	arg02, #6
2bee0     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1043
2bee4     04 4E 05 F1 | 	add	fp, #4
2bee8     A7 1E C2 FA | 	rdbyte	local01, fp
2beec     04 4E 85 F1 | 	sub	fp, #4
2bef0     0C 1E 0E F2 | 	cmp	local01, #12 wz
2bef4     10 4E 05 A1 |  if_e	add	fp, #16
2bef8     A7 12 02 A6 |  if_e	mov	arg01, fp
2befc     10 4E 85 A1 |  if_e	sub	fp, #16
2bf00     01 14 06 A6 |  if_e	mov	arg02, #1
2bf04     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1050
2bf08     0C 4E 05 F1 | 	add	fp, #12
2bf0c     A7 14 48 FC | 	wrbyte	#10, fp
2bf10     0C 4E 85 F1 | 	sub	fp, #12
2bf14                 | ' 	n = 10;
2bf14                 | ' 	do
2bf14                 | LR__4492
2bf14     10 4E 05 F1 | 	add	fp, #16
2bf18     A7 12 02 F6 | 	mov	arg01, fp
2bf1c     10 4E 85 F1 | 	sub	fp, #16
2bf20     01 14 06 F6 | 	mov	arg02, #1
2bf24     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2bf28     10 4E 05 F1 | 	add	fp, #16
2bf2c     A7 1E C2 FA | 	rdbyte	local01, fp
2bf30     10 4E 85 F1 | 	sub	fp, #16
2bf34     80 1E CE F7 | 	test	local01, #128 wz
2bf38     1C 00 90 AD |  if_e	jmp	#LR__4493
2bf3c     0C 4E 05 F1 | 	add	fp, #12
2bf40     A7 1E C2 FA | 	rdbyte	local01, fp
2bf44     01 1E 86 F1 | 	sub	local01, #1
2bf48     A7 1E 42 FC | 	wrbyte	local01, fp
2bf4c     A7 1E CA FA | 	rdbyte	local01, fp wz
2bf50     0C 4E 85 F1 | 	sub	fp, #12
2bf54     BC FF 9F 5D |  if_ne	jmp	#LR__4492
2bf58                 | LR__4493
2bf58                 | ' 
2bf58                 | ' 	return d;
2bf58     10 4E 05 F1 | 	add	fp, #16
2bf5c     A7 FA C1 FA | 	rdbyte	result1, fp
2bf60     10 4E 85 F1 | 	sub	fp, #16
2bf64                 | LR__4494
2bf64     A7 F0 03 F6 | 	mov	ptra, fp
2bf68     B2 00 A0 FD | 	call	#popregs_
2bf6c                 | _fatfs_cc_send_cmd_1074_ret
2bf6c     2D 00 64 FD | 	ret
2bf70                 | 
2bf70                 | _fatfs_cc_disk_deinitialize
2bf70     03 4A 05 F6 | 	mov	COUNT_, #3
2bf74     A8 00 A0 FD | 	call	#pushregs_
2bf78     00 12 4E F2 | 	cmps	arg01, #0 wz
2bf7c     01 00 00 FF 
2bf80     14 E4 05 F1 | 	add	objptr, ##532
2bf84     F2 12 02 FB | 	rdlong	arg01, objptr
2bf88     04 E4 85 F1 | 	sub	objptr, #4
2bf8c     F2 1E 02 FB | 	rdlong	local01, objptr
2bf90     08 E4 05 F1 | 	add	objptr, #8
2bf94     F2 20 02 FB | 	rdlong	local02, objptr
2bf98     04 E4 05 F1 | 	add	objptr, #4
2bf9c     F2 22 02 FB | 	rdlong	local03, objptr
2bfa0     01 00 00 FF 
2bfa4     1C E4 85 F1 | 	sub	objptr, ##540
2bfa8                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2bfa8                 | '         return RES_NOTRDY;
2bfa8     03 FA 05 56 |  if_ne	mov	result1, #3
2bfac     2C 00 90 5D |  if_ne	jmp	#LR__4500
2bfb0     50 12 62 FD | 	fltl	arg01
2bfb4     09 01 08 FC | 	wrpin	#0, arg01
2bfb8     50 1E 62 FD | 	fltl	local01
2bfbc     0F 01 08 FC | 	wrpin	#0, local01
2bfc0     50 20 62 FD | 	fltl	local02
2bfc4     10 01 08 FC | 	wrpin	#0, local02
2bfc8     50 22 62 FD | 	fltl	local03
2bfcc     11 01 08 FC | 	wrpin	#0, local03
2bfd0     0A 12 06 F6 | 	mov	arg01, #10
2bfd4     A0 13 BF FD | 	call	#__system___waitms
2bfd8                 | '     }
2bfd8                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2bfd8                 | '     _pinclear(PIN_SS);
2bfd8                 | '     _pinclear(PIN_CLK);
2bfd8                 | '     _pinclear(PIN_DI);
2bfd8                 | '     _pinclear(PIN_DO);
2bfd8                 | ' 
2bfd8                 | '     _waitms(10);
2bfd8                 | ' 
2bfd8                 | '     return 0;
2bfd8     00 FA 05 F6 | 	mov	result1, #0
2bfdc                 | LR__4500
2bfdc     A7 F0 03 F6 | 	mov	ptra, fp
2bfe0     B2 00 A0 FD | 	call	#popregs_
2bfe4                 | _fatfs_cc_disk_deinitialize_ret
2bfe4     2D 00 64 FD | 	ret
2bfe8                 | 
2bfe8                 | _fatfs_cc_gettimeofday
2bfe8     04 4A 05 F6 | 	mov	COUNT_, #4
2bfec     A8 00 A0 FD | 	call	#pushregs_
2bff0     09 1F 02 F6 | 	mov	local01, arg01
2bff4     5C 0F BF FD | 	call	#__system___getus
2bff8     FD 12 02 F6 | 	mov	arg01, result1
2bffc     02 00 00 FF 
2c000     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2c004     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2c008     09 FB 01 F6 | 	mov	result1, arg01
2c00c     10 FB 81 F1 | 	sub	result1, local02
2c010     A1 07 00 FF 
2c014     40 FA 15 FD | 	qdiv	result1, ##1000000
2c018     02 00 00 FF 
2c01c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2c020     18 20 62 FD | 	getqx	local02
2c024     A1 07 00 FF 
2c028     40 FA 15 FD | 	qdiv	result1, ##1000000
2c02c     00 20 0E F2 | 	cmp	local02, #0 wz
2c030     19 22 62 FD | 	getqy	local03
2c034     28 00 90 AD |  if_e	jmp	#LR__4510
2c038     02 00 00 FF 
2c03c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2c040     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2c044     10 25 02 F1 | 	add	local04, local02
2c048     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2c04c     11 13 82 F1 | 	sub	arg01, local03
2c050     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2c054     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2c058     02 00 00 FF 
2c05c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2c060                 | LR__4510
2c060     02 00 00 FF 
2c064     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2c068     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2c06c     02 00 00 FF 
2c070     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2c074     0F 25 62 FC | 	wrlong	local04, local01
2c078     04 1E 06 F1 | 	add	local01, #4
2c07c     0F 23 62 FC | 	wrlong	local03, local01
2c080                 | '         lastsec += secs;
2c080                 | '         lastus = now - leftover;
2c080                 | '     }
2c080                 | '     tv->tv_sec = lastsec;
2c080                 | '     tv->tv_usec = leftover;
2c080                 | '     return 0;
2c080     00 FA 05 F6 | 	mov	result1, #0
2c084     A7 F0 03 F6 | 	mov	ptra, fp
2c088     B2 00 A0 FD | 	call	#popregs_
2c08c                 | _fatfs_cc_gettimeofday_ret
2c08c     2D 00 64 FD | 	ret
2c090                 | 
2c090                 | _fatfs_cc__is_leap_year
2c090     09 FB 51 F6 | 	abs	result1, arg01 wc
2c094     03 FA 05 F5 | 	and	result1, #3
2c098     FD FA 89 F6 | 	negc	result1, result1 wz
2c09c     38 00 90 5D |  if_ne	jmp	#LR__4521
2c0a0     09 FB 51 F6 | 	abs	result1, arg01 wc
2c0a4     64 FA 15 FD | 	qdiv	result1, #100
2c0a8     19 FA 61 FD | 	getqy	result1
2c0ac     FD FA 89 F6 | 	negc	result1, result1 wz
2c0b0     1C 00 90 5D |  if_ne	jmp	#LR__4520
2c0b4     09 FB 51 F6 | 	abs	result1, arg01 wc
2c0b8     90 FB 15 FD | 	qdiv	result1, #400
2c0bc                 | '       return (0 == y % 400);
2c0bc     00 FA 05 F6 | 	mov	result1, #0
2c0c0     19 00 62 FD | 	getqy	_var01
2c0c4     00 01 8A F6 | 	negc	_var01, _var01 wz
2c0c8     01 FA 05 A6 |  if_e	mov	result1, #1
2c0cc     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2c0d0                 | LR__4520
2c0d0                 | '     return 1;
2c0d0     01 FA 05 F6 | 	mov	result1, #1
2c0d4     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2c0d8                 | LR__4521
2c0d8                 | '   }
2c0d8                 | '   return 0;
2c0d8     00 FA 05 F6 | 	mov	result1, #0
2c0dc                 | _fatfs_cc__is_leap_year_ret
2c0dc     2D 00 64 FD | 	ret
2c0e0                 | 
2c0e0                 | _fatfs_cc___tzoffset
2c0e0     09 01 0A F6 | 	mov	_var01, arg01 wz
2c0e4     FF FF FF FF 
2c0e8     0A FF 6B FC | 	wrlong	##-1, arg02
2c0ec     01 02 06 F6 | 	mov	_var02, #1
2c0f0     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2c0f4                 | '                 return 0;
2c0f4     00 FA 05 A6 |  if_e	mov	result1, #0
2c0f8     94 02 90 AD |  if_e	jmp	#LR__4547
2c0fc     0A 01 68 FC | 	wrlong	#0, arg02
2c100     02 00 00 FF 
2c104     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2c108     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2c10c                 | ' 
2c10c                 | '        *hasdst = 0;
2c10c                 | ' 
2c10c                 | ' 	n = stdname;
2c10c                 | '         while (*s && isalpha(*s)) {
2c10c     02 00 00 FF 
2c110     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2c114     97 28 48 FB | 	callpa	#(@LR__4531-@LR__4530)>>2,fcache_load_ptr_
2c118                 | LR__4530
2c118     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2c11c     48 00 90 AD |  if_e	jmp	#LR__4532
2c120     00 13 C2 FA | 	rdbyte	arg01, _var01
2c124                 | ' {
2c124                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2c124     80 12 36 F3 | 	fle	arg01, #128 wc
2c128                 | '     return __ctype[c];
2c128     02 00 00 FF 
2c12c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2c130     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2c134     09 FB C1 FA | 	rdbyte	result1, arg01
2c138     02 00 00 FF 
2c13c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2c140     0C FA CD F7 | 	test	result1, #12 wz
2c144     20 00 90 AD |  if_e	jmp	#LR__4532
2c148     00 09 02 F6 | 	mov	_var05, _var01
2c14c     00 0B 02 F6 | 	mov	_var06, _var01
2c150     01 0A 06 F1 | 	add	_var06, #1
2c154     04 0D C2 FA | 	rdbyte	_var07, _var05
2c158     05 01 02 F6 | 	mov	_var01, _var06
2c15c     03 0D 42 FC | 	wrbyte	_var07, _var04
2c160     01 06 06 F1 | 	add	_var04, #1
2c164     B0 FF 9F FD | 	jmp	#LR__4530
2c168                 | LR__4531
2c168                 | LR__4532
2c168     03 01 48 FC | 	wrbyte	#0, _var04
2c16c     00 0E 06 F6 | 	mov	_var08, #0
2c170     00 05 C2 FA | 	rdbyte	_var03, _var01
2c174     2D 04 0E F2 | 	cmp	_var03, #45 wz
2c178     01 02 66 A6 |  if_e	neg	_var02, #1
2c17c     01 00 06 A1 |  if_e	add	_var01, #1
2c180     97 28 48 FB | 	callpa	#(@LR__4534-@LR__4533)>>2,fcache_load_ptr_
2c184                 | '                 sgn = -1;
2c184                 | '                 s++;
2c184                 | '         }
2c184                 | '         while (isdigit(*s)) {
2c184                 | LR__4533
2c184     00 13 C2 FA | 	rdbyte	arg01, _var01
2c188                 | ' {
2c188                 | '   return  (__ctype_get(c) & 0x02 ) ;
2c188     80 12 36 F3 | 	fle	arg01, #128 wc
2c18c                 | '     return __ctype[c];
2c18c     02 00 00 FF 
2c190     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2c194     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2c198     09 FB C1 FA | 	rdbyte	result1, arg01
2c19c     02 00 00 FF 
2c1a0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2c1a4     02 FA CD F7 | 	test	result1, #2 wz
2c1a8     28 00 90 AD |  if_e	jmp	#LR__4535
2c1ac     07 05 02 F6 | 	mov	_var03, _var08
2c1b0     02 04 66 F0 | 	shl	_var03, #2
2c1b4     07 05 02 F1 | 	add	_var03, _var08
2c1b8     01 04 66 F0 | 	shl	_var03, #1
2c1bc     00 09 C2 FA | 	rdbyte	_var05, _var01
2c1c0     30 08 86 F1 | 	sub	_var05, #48
2c1c4     04 05 02 F1 | 	add	_var03, _var05
2c1c8     02 0F 02 F6 | 	mov	_var08, _var03
2c1cc     01 00 06 F1 | 	add	_var01, #1
2c1d0     B0 FF 9F FD | 	jmp	#LR__4533
2c1d4                 | LR__4534
2c1d4                 | LR__4535
2c1d4     07 00 00 FF 
2c1d8     10 0E 06 FD | 	qmul	_var08, ##3600
2c1dc     00 05 C2 FA | 	rdbyte	_var03, _var01
2c1e0     3A 04 0E F2 | 	cmp	_var03, #58 wz
2c1e4     18 10 62 FD | 	getqx	_var09
2c1e8     70 00 90 5D |  if_ne	jmp	#LR__4539
2c1ec     00 0E 06 F6 | 	mov	_var08, #0
2c1f0     01 00 06 F1 | 	add	_var01, #1
2c1f4     97 28 48 FB | 	callpa	#(@LR__4537-@LR__4536)>>2,fcache_load_ptr_
2c1f8                 | '                 x = 0;
2c1f8                 | '                 s++;
2c1f8                 | '                 while (isdigit(*s)) {
2c1f8                 | LR__4536
2c1f8     00 13 C2 FA | 	rdbyte	arg01, _var01
2c1fc                 | ' {
2c1fc                 | '   return  (__ctype_get(c) & 0x02 ) ;
2c1fc     80 12 36 F3 | 	fle	arg01, #128 wc
2c200                 | '     return __ctype[c];
2c200     02 00 00 FF 
2c204     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2c208     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2c20c     09 FB C1 FA | 	rdbyte	result1, arg01
2c210     02 00 00 FF 
2c214     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2c218     02 FA CD F7 | 	test	result1, #2 wz
2c21c     28 00 90 AD |  if_e	jmp	#LR__4538
2c220     07 05 02 F6 | 	mov	_var03, _var08
2c224     02 04 66 F0 | 	shl	_var03, #2
2c228     07 05 02 F1 | 	add	_var03, _var08
2c22c     01 04 66 F0 | 	shl	_var03, #1
2c230     00 09 C2 FA | 	rdbyte	_var05, _var01
2c234     30 08 86 F1 | 	sub	_var05, #48
2c238     04 05 02 F1 | 	add	_var03, _var05
2c23c     02 0F 02 F6 | 	mov	_var08, _var03
2c240     01 00 06 F1 | 	add	_var01, #1
2c244     B0 FF 9F FD | 	jmp	#LR__4536
2c248                 | LR__4537
2c248                 | LR__4538
2c248     07 0D 02 F6 | 	mov	_var07, _var08
2c24c     04 0C 66 F0 | 	shl	_var07, #4
2c250     07 0D 82 F1 | 	sub	_var07, _var08
2c254     02 0C 66 F0 | 	shl	_var07, #2
2c258     06 11 02 F1 | 	add	_var09, _var07
2c25c                 | LR__4539
2c25c     02 00 00 FF 
2c260     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2c264     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2c268     00 13 C2 FA | 	rdbyte	arg01, _var01
2c26c                 | ' {
2c26c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2c26c     80 12 36 F3 | 	fle	arg01, #128 wc
2c270                 | '     return __ctype[c];
2c270     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2c274     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2c278     09 FB C1 FA | 	rdbyte	result1, arg01
2c27c     02 00 00 FF 
2c280     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2c284     0C FA CD F7 | 	test	result1, #12 wz
2c288     50 00 90 AD |  if_e	jmp	#LR__4542
2c28c     0A 03 68 FC | 	wrlong	#1, arg02
2c290                 | '                 *hasdst = 1;
2c290                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2c290                 | LR__4540
2c290     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2c294     44 00 90 AD |  if_e	jmp	#LR__4541
2c298     00 13 C2 FA | 	rdbyte	arg01, _var01
2c29c                 | ' {
2c29c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2c29c     80 12 36 F3 | 	fle	arg01, #128 wc
2c2a0                 | '     return __ctype[c];
2c2a0     02 00 00 FF 
2c2a4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2c2a8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2c2ac     09 FB C1 FA | 	rdbyte	result1, arg01
2c2b0     02 00 00 FF 
2c2b4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2c2b8     0C FA CD F7 | 	test	result1, #12 wz
2c2bc     1C 00 90 AD |  if_e	jmp	#LR__4541
2c2c0     00 0B 02 F6 | 	mov	_var06, _var01
2c2c4     01 0A 06 F1 | 	add	_var06, #1
2c2c8     00 0D C2 FA | 	rdbyte	_var07, _var01
2c2cc     05 01 02 F6 | 	mov	_var01, _var06
2c2d0     03 0D 42 FC | 	wrbyte	_var07, _var04
2c2d4     01 06 06 F1 | 	add	_var04, #1
2c2d8     B4 FF 9F FD | 	jmp	#LR__4540
2c2dc                 | LR__4541
2c2dc                 | LR__4542
2c2dc     03 01 48 FC | 	wrbyte	#0, _var04
2c2e0     02 00 00 FF 
2c2e4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2c2e8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2c2ec     02 00 00 FF 
2c2f0     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2c2f4     20 00 90 AD |  if_e	jmp	#LR__4543
2c2f8     02 00 00 FF 
2c2fc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2c300     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2c304     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2c308     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2c30c     02 00 00 FF 
2c310     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2c314     1C 00 90 FD | 	jmp	#LR__4544
2c318                 | LR__4543
2c318     02 00 00 FF 
2c31c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2c320     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2c324     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2c328     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2c32c     02 00 00 FF 
2c330     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2c334                 | LR__4544
2c334     02 00 00 FF 
2c338     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2c33c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2c340     02 00 00 FF 
2c344     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2c348     20 00 90 AD |  if_e	jmp	#LR__4545
2c34c     02 00 00 FF 
2c350     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2c354     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2c358     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2c35c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2c360     02 00 00 FF 
2c364     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2c368     1C 00 90 FD | 	jmp	#LR__4546
2c36c                 | LR__4545
2c36c     02 00 00 FF 
2c370     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2c374     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2c378     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2c37c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2c380     02 00 00 FF 
2c384     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2c388                 | LR__4546
2c388     08 03 02 FD | 	qmul	_var02, _var09
2c38c                 | ' 		_tzname[1] = stdname;
2c38c                 | ' 
2c38c                 | '         return sgn * off;
2c38c     18 FA 61 FD | 	getqx	result1
2c390                 | LR__4547
2c390                 | _fatfs_cc___tzoffset_ret
2c390     2D 00 64 FD | 	ret
2c394                 | 
2c394                 | _fatfs_cc___indst
2c394     10 12 06 F1 | 	add	arg01, #16
2c398     09 01 02 FB | 	rdlong	_var01, arg01
2c39c     10 12 86 F1 | 	sub	arg01, #16
2c3a0     02 00 0E F2 | 	cmp	_var01, #2 wz
2c3a4     30 00 90 5D |  if_ne	jmp	#LR__4550
2c3a8     07 00 06 F6 | 	mov	_var01, #7
2c3ac     18 12 06 F1 | 	add	arg01, #24
2c3b0     09 03 02 FB | 	rdlong	_var02, arg01
2c3b4     01 01 02 F1 | 	add	_var01, _var02
2c3b8     0C 12 86 F1 | 	sub	arg01, #12
2c3bc     09 05 02 FB | 	rdlong	_var03, arg01
2c3c0     02 01 82 F1 | 	sub	_var01, _var03
2c3c4     00 00 56 F2 | 	cmps	_var01, #0 wc
2c3c8                 | '                         return 1;
2c3c8     01 FA 05 C6 |  if_b	mov	result1, #1
2c3cc     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2c3d0                 | '                 return 0;
2c3d0     00 FA 05 F6 | 	mov	result1, #0
2c3d4     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2c3d8                 | LR__4550
2c3d8     10 12 06 F1 | 	add	arg01, #16
2c3dc     09 01 02 FB | 	rdlong	_var01, arg01
2c3e0     10 12 86 F1 | 	sub	arg01, #16
2c3e4     0A 00 0E F2 | 	cmp	_var01, #10 wz
2c3e8     28 00 90 5D |  if_ne	jmp	#LR__4551
2c3ec     18 12 06 F1 | 	add	arg01, #24
2c3f0     09 01 02 FB | 	rdlong	_var01, arg01
2c3f4     0C 12 86 F1 | 	sub	arg01, #12
2c3f8     09 07 02 FB | 	rdlong	_var04, arg01
2c3fc     03 01 82 F1 | 	sub	_var01, _var04
2c400     00 00 56 F2 | 	cmps	_var01, #0 wc
2c404                 | '                         return 0;
2c404     00 FA 05 C6 |  if_b	mov	result1, #0
2c408     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2c40c                 | '                 return 1;
2c40c     01 FA 05 F6 | 	mov	result1, #1
2c410     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2c414                 | LR__4551
2c414                 | '         }
2c414                 | ' 
2c414                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2c414     00 00 06 F6 | 	mov	_var01, #0
2c418     10 12 06 F1 | 	add	arg01, #16
2c41c     09 03 02 FB | 	rdlong	_var02, arg01
2c420     10 12 86 F1 | 	sub	arg01, #16
2c424     03 02 56 F2 | 	cmps	_var02, #3 wc
2c428     10 00 90 CD |  if_b	jmp	#LR__4552
2c42c     10 12 06 F1 | 	add	arg01, #16
2c430     09 05 02 FB | 	rdlong	_var03, arg01
2c434     0A 04 56 F2 | 	cmps	_var03, #10 wc
2c438     01 00 06 C6 |  if_b	mov	_var01, #1
2c43c                 | LR__4552
2c43c     00 FB 01 F6 | 	mov	result1, _var01
2c440                 | _fatfs_cc___indst_ret
2c440     2D 00 64 FD | 	ret
2c444                 | 
2c444                 | ' 	
2c444                 | ' 	FUNCTION pfunc(c as integer) as integer
2c444                 | ___strs_cl_pfunc
2c444                 | ' 		if (i < 16) then
2c444     04 E4 05 F1 | 	add	objptr, #4
2c448     F2 FA 01 FB | 	rdlong	result1, objptr
2c44c     04 E4 85 F1 | 	sub	objptr, #4
2c450     10 FA 55 F2 | 	cmps	result1, #16 wc
2c454     2C 00 90 3D |  if_ae	jmp	#LR__4560
2c458     F2 FA 01 FB | 	rdlong	result1, objptr
2c45c     04 E4 05 F1 | 	add	objptr, #4
2c460     F2 00 02 FB | 	rdlong	_var01, objptr
2c464     FD 00 02 F1 | 	add	_var01, result1
2c468     00 13 42 FC | 	wrbyte	arg01, _var01
2c46c     F2 FA 01 FB | 	rdlong	result1, objptr
2c470     01 FA 05 F1 | 	add	result1, #1
2c474     F2 FA 61 FC | 	wrlong	result1, objptr
2c478     04 E4 85 F1 | 	sub	objptr, #4
2c47c                 | ' 			p(i) = c
2c47c                 | ' 			i = i+1
2c47c                 | ' 			return 1
2c47c     01 FA 05 F6 | 	mov	result1, #1
2c480     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2c484                 | LR__4560
2c484                 | ' 			return -1
2c484     01 FA 65 F6 | 	neg	result1, #1
2c488                 | ___strs_cl_pfunc_ret
2c488     2D 00 64 FD | 	ret
2c48c                 | 
2c48c                 | __struct__s_vfs_file_t_putchar
2c48c     04 4A 05 F6 | 	mov	COUNT_, #4
2c490     A8 00 A0 FD | 	call	#pushregs_
2c494     1C E4 05 F1 | 	add	objptr, #28
2c498     F2 1E 0A FB | 	rdlong	local01, objptr wz
2c49c     1C E4 85 F1 | 	sub	objptr, #28
2c4a0     00 FA 05 A6 |  if_e	mov	result1, #0
2c4a4     48 00 90 AD |  if_e	jmp	#LR__4570
2c4a8     1C E4 05 F1 | 	add	objptr, #28
2c4ac     F2 20 02 FB | 	rdlong	local02, objptr
2c4b0     10 23 02 F6 | 	mov	local03, local02
2c4b4     1C E4 85 F1 | 	sub	objptr, #28
2c4b8     13 22 46 F7 | 	zerox	local03, #19
2c4bc     14 20 46 F0 | 	shr	local02, #20
2c4c0     02 20 66 F0 | 	shl	local02, #2
2c4c4     ED 20 02 F1 | 	add	local02, __methods__
2c4c8     10 21 02 FB | 	rdlong	local02, local02
2c4cc     F2 14 02 F6 | 	mov	arg02, objptr
2c4d0     F2 24 02 F6 | 	mov	local04, objptr
2c4d4     11 E5 01 F6 | 	mov	objptr, local03
2c4d8     2D 20 62 FD | 	call	local02
2c4dc     12 E5 01 F6 | 	mov	objptr, local04
2c4e0                 | '     return (i < 0) ? 0 : 1;
2c4e0     00 FA 55 F2 | 	cmps	result1, #0 wc
2c4e4     00 1E 06 C6 |  if_b	mov	local01, #0
2c4e8     01 1E 06 36 |  if_ae	mov	local01, #1
2c4ec     0F FB 01 F6 | 	mov	result1, local01
2c4f0                 | LR__4570
2c4f0     A7 F0 03 F6 | 	mov	ptra, fp
2c4f4     B2 00 A0 FD | 	call	#popregs_
2c4f8                 | __struct__s_vfs_file_t_putchar_ret
2c4f8     2D 00 64 FD | 	ret
2c4fc                 | 
2c4fc                 | __struct__s_vfs_file_t_getchar
2c4fc     03 4A 05 F6 | 	mov	COUNT_, #3
2c500     A8 00 A0 FD | 	call	#pushregs_
2c504     20 E4 05 F1 | 	add	objptr, #32
2c508     F2 12 0A FB | 	rdlong	arg01, objptr wz
2c50c     20 E4 85 F1 | 	sub	objptr, #32
2c510     01 FA 65 A6 |  if_e	neg	result1, #1
2c514     38 00 90 AD |  if_e	jmp	#LR__4580
2c518                 | '     return getcf(__this);
2c518     20 E4 05 F1 | 	add	objptr, #32
2c51c     F2 1E 02 FB | 	rdlong	local01, objptr
2c520     0F 21 02 F6 | 	mov	local02, local01
2c524     20 E4 85 F1 | 	sub	objptr, #32
2c528     13 20 46 F7 | 	zerox	local02, #19
2c52c     14 1E 46 F0 | 	shr	local01, #20
2c530     02 1E 66 F0 | 	shl	local01, #2
2c534     ED 1E 02 F1 | 	add	local01, __methods__
2c538     0F 1F 02 FB | 	rdlong	local01, local01
2c53c     F2 12 02 F6 | 	mov	arg01, objptr
2c540     F2 22 02 F6 | 	mov	local03, objptr
2c544     10 E5 01 F6 | 	mov	objptr, local02
2c548     2D 1E 62 FD | 	call	local01
2c54c     11 E5 01 F6 | 	mov	objptr, local03
2c550                 | LR__4580
2c550     A7 F0 03 F6 | 	mov	ptra, fp
2c554     B2 00 A0 FD | 	call	#popregs_
2c558                 | __struct__s_vfs_file_t_getchar_ret
2c558     2D 00 64 FD | 	ret
2c55c                 | 
2c55c                 | __struct___bas_wrap_sender_tx
2c55c     03 4A 05 F6 | 	mov	COUNT_, #3
2c560     A8 00 A0 FD | 	call	#pushregs_
2c564     F2 1E 02 FB | 	rdlong	local01, objptr
2c568     0F 21 02 F6 | 	mov	local02, local01
2c56c     13 1E 46 F7 | 	zerox	local01, #19
2c570     14 20 46 F0 | 	shr	local02, #20
2c574     02 20 66 F0 | 	shl	local02, #2
2c578     ED 20 02 F1 | 	add	local02, __methods__
2c57c     10 21 02 FB | 	rdlong	local02, local02
2c580     F2 22 02 F6 | 	mov	local03, objptr
2c584     0F E5 01 F6 | 	mov	objptr, local01
2c588     2D 20 62 FD | 	call	local02
2c58c     11 E5 01 F6 | 	mov	objptr, local03
2c590     01 FA 05 F6 | 	mov	result1, #1
2c594     A7 F0 03 F6 | 	mov	ptra, fp
2c598     B2 00 A0 FD | 	call	#popregs_
2c59c                 | __struct___bas_wrap_sender_tx_ret
2c59c     2D 00 64 FD | 	ret
2c5a0                 | 
2c5a0                 | __struct___bas_wrap_sender_rx
2c5a0     03 4A 05 F6 | 	mov	COUNT_, #3
2c5a4     A8 00 A0 FD | 	call	#pushregs_
2c5a8     04 E4 05 F1 | 	add	objptr, #4
2c5ac     F2 1E 02 FB | 	rdlong	local01, objptr
2c5b0     0F 21 02 F6 | 	mov	local02, local01
2c5b4     04 E4 85 F1 | 	sub	objptr, #4
2c5b8     13 20 46 F7 | 	zerox	local02, #19
2c5bc     14 1E 46 F0 | 	shr	local01, #20
2c5c0     02 1E 66 F0 | 	shl	local01, #2
2c5c4     ED 1E 02 F1 | 	add	local01, __methods__
2c5c8     0F 1F 02 FB | 	rdlong	local01, local01
2c5cc     F2 22 02 F6 | 	mov	local03, objptr
2c5d0     10 E5 01 F6 | 	mov	objptr, local02
2c5d4     2D 1E 62 FD | 	call	local01
2c5d8     11 E5 01 F6 | 	mov	objptr, local03
2c5dc     A7 F0 03 F6 | 	mov	ptra, fp
2c5e0     B2 00 A0 FD | 	call	#popregs_
2c5e4                 | __struct___bas_wrap_sender_rx_ret
2c5e4     2D 00 64 FD | 	ret
2c5e8                 | 
2c5e8                 | __struct___bas_wrap_sender_close
2c5e8     03 4A 05 F6 | 	mov	COUNT_, #3
2c5ec     A8 00 A0 FD | 	call	#pushregs_
2c5f0     08 E4 05 F1 | 	add	objptr, #8
2c5f4     F2 1E 02 FB | 	rdlong	local01, objptr
2c5f8     0F 21 02 F6 | 	mov	local02, local01
2c5fc     08 E4 85 F1 | 	sub	objptr, #8
2c600     13 20 46 F7 | 	zerox	local02, #19
2c604     14 1E 46 F0 | 	shr	local01, #20
2c608     02 1E 66 F0 | 	shl	local01, #2
2c60c     ED 1E 02 F1 | 	add	local01, __methods__
2c610     0F 1F 02 FB | 	rdlong	local01, local01
2c614     F2 22 02 F6 | 	mov	local03, objptr
2c618     10 E5 01 F6 | 	mov	objptr, local02
2c61c     2D 1E 62 FD | 	call	local01
2c620     11 E5 01 F6 | 	mov	objptr, local03
2c624     A7 F0 03 F6 | 	mov	ptra, fp
2c628     B2 00 A0 FD | 	call	#popregs_
2c62c                 | __struct___bas_wrap_sender_close_ret
2c62c     2D 00 64 FD | 	ret
2c630                 | 
2c630                 | LR__4590
2c630     2F          | 	byte	"/"
2c631     00          | 	byte	0
2c632                 | LR__4591
2c632     69 6E 66    | 	byte	"inf"
2c635     00          | 	byte	0
2c636                 | LR__4592
2c636     6E 61 6E    | 	byte	"nan"
2c639     00          | 	byte	0
2c63a                 | LR__4593
2c63a                 | 	byte	
2c63a     00          | 	byte	0
2c63b                 | LR__4594
2c63b                 | 	byte	
2c63b     00          | 	byte	0
2c63c                 | LR__4595
2c63c                 | 	byte	
2c63c     00          | 	byte	0
2c63d                 | LR__4596
2c63d                 | 	byte	
2c63d     00          | 	byte	0
2c63e                 | LR__4597
2c63e                 | 	byte	
2c63e     00          | 	byte	0
2c63f                 | LR__4598
2c63f                 | 	byte	
2c63f     00          | 	byte	0
2c640                 | LR__4599
2c640                 | 	byte	
2c640     00          | 	byte	0
2c641                 | LR__4600
2c641                 | 	byte	
2c641     00          | 	byte	0
2c642                 | LR__4601
2c642     00          | 	byte	0
2c643     00          | 	byte	0
2c644                 | LR__4602
2c644     00          | 	byte	0
2c645     00          | 	byte	0
2c646                 | LR__4603
2c646     00          | 	byte	0
2c647     00          | 	byte	0
2c648                 | LR__4604
2c648     20 21 21 21 
2c64c     20 63 6F 72 
2c650     72 75 70 74 
2c654     65 64 20 68 
2c658     65 61 70 3F 
2c65c     3F 3F 20 21 
2c660     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2c663     00          | 	byte	0
2c664                 | LR__4605
2c664     20 21 21 21 
2c668     20 6F 75 74 
2c66c     20 6F 66 20 
2c670     68 65 61 70 
2c674     20 6D 65 6D 
2c678     6F 72 79 20 
2c67c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2c680     00          | 	byte	0
2c681                 | LR__4606
2c681     20 21 21 21 
2c685     20 63 6F 72 
2c689     72 75 70 74 
2c68d     65 64 20 68 
2c691     65 61 70 20 
2c695     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2c699     00          | 	byte	0
2c69a                 | LR__4607
2c69a     00          | 	byte	0
2c69b     00          | 	byte	0
2c69c                 | LR__4608
2c69c     2E          | 	byte	"."
2c69d     00          | 	byte	0
2c69e                 | LR__4609
2c69e     00          | 	byte	0
2c69f     00          | 	byte	0
2c6a0                 | LR__4610
2c6a0     00          | 	byte	0
2c6a1     00          | 	byte	0
2c6a2                 | LR__4611
2c6a2     00          | 	byte	0
2c6a3     00          | 	byte	0
2c6a4                 | LR__4612
2c6a4     2A 3A 3C 3E 
2c6a8     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2c6ac     00          | 	byte	0
2c6ad                 | LR__4613
2c6ad     2B 2C 3B 3D 
2c6b1     5B 5D       | 	byte	"+,;=[]"
2c6b3     00          | 	byte	0
2c6b4                 | LR__4614
2c6b4     46 41 54 33 
2c6b8     32 20 20 20 | 	byte	"FAT32   "
2c6bc     00          | 	byte	0
2c6bd                 | LR__4615
2c6bd     54 5A       | 	byte	"TZ"
2c6bf     00          | 	byte	0
2c6c0                 | LR__4616
2c6c0     00          | 	byte	0
2c6c1     00          | 	byte	0
2c6c2                 | LR__4617
2c6c2                 | 	byte	
2c6c2     00          | 	byte	0
2c6c3                 | LR__4618
2c6c3                 | 	byte	
2c6c3     00          | 	byte	0
2c6c4                 | LR__4619
2c6c4     22          | 	byte	34
2c6c5     00          | 	byte	0
2c6c6                 | LR__4620
2c6c6     22          | 	byte	34
2c6c7     00          | 	byte	0
2c6c8                 | LR__4621
2c6c8     3A          | 	byte	":"
2c6c9     00          | 	byte	0
2c6ca                 | LR__4622
2c6ca                 | 	byte	
2c6ca     00          | 	byte	0
2c6cb                 | LR__4623
2c6cb                 | 	byte	
2c6cb     00          | 	byte	0
2c6cc                 | LR__4624
2c6cc                 | 	byte	
2c6cc     00          | 	byte	0
2c6cd                 | LR__4625
2c6cd                 | 	byte	
2c6cd     00          | 	byte	0
2c6ce                 | LR__4626
2c6ce                 | 	byte	
2c6ce     00          | 	byte	0
2c6cf                 | LR__4627
2c6cf                 | 	byte	
2c6cf     00          | 	byte	0
2c6d0                 | LR__4628
2c6d0                 | 	byte	
2c6d0     00          | 	byte	0
2c6d1                 | LR__4629
2c6d1     22          | 	byte	34
2c6d2     00          | 	byte	0
2c6d3                 | LR__4630
2c6d3     22          | 	byte	34
2c6d4     00          | 	byte	0
2c6d5                 | LR__4631
2c6d5     22          | 	byte	34
2c6d6     00          | 	byte	0
2c6d7                 | LR__4632
2c6d7     22          | 	byte	34
2c6d8     00          | 	byte	0
2c6d9                 | LR__4633
2c6d9     22          | 	byte	34
2c6da     00          | 	byte	0
2c6db                 | LR__4634
2c6db     3E          | 	byte	">"
2c6dc     00          | 	byte	0
2c6dd                 | LR__4635
2c6dd     3C          | 	byte	"<"
2c6de     00          | 	byte	0
2c6df                 | LR__4636
2c6df     2B          | 	byte	"+"
2c6e0     00          | 	byte	0
2c6e1                 | LR__4637
2c6e1     2D          | 	byte	"-"
2c6e2     00          | 	byte	0
2c6e3                 | LR__4638
2c6e3     2A          | 	byte	"*"
2c6e4     00          | 	byte	0
2c6e5                 | LR__4639
2c6e5     2F          | 	byte	"/"
2c6e6     00          | 	byte	0
2c6e7                 | LR__4640
2c6e7     5E          | 	byte	"^"
2c6e8     00          | 	byte	0
2c6e9                 | LR__4641
2c6e9     3D          | 	byte	"="
2c6ea     00          | 	byte	0
2c6eb                 | LR__4642
2c6eb     2B          | 	byte	"+"
2c6ec     00          | 	byte	0
2c6ed                 | LR__4643
2c6ed     2B          | 	byte	"+"
2c6ee     00          | 	byte	0
2c6ef                 | LR__4644
2c6ef     2D          | 	byte	"-"
2c6f0     00          | 	byte	0
2c6f1                 | LR__4645
2c6f1     2D          | 	byte	"-"
2c6f2     00          | 	byte	0
2c6f3                 | LR__4646
2c6f3     3C          | 	byte	"<"
2c6f4     00          | 	byte	0
2c6f5                 | LR__4647
2c6f5     3E          | 	byte	">"
2c6f6     00          | 	byte	0
2c6f7                 | LR__4648
2c6f7     22          | 	byte	34
2c6f8     00          | 	byte	0
2c6f9                 | LR__4649
2c6f9     22          | 	byte	34
2c6fa     00          | 	byte	0
2c6fb                 | LR__4650
2c6fb     2E          | 	byte	"."
2c6fc     00          | 	byte	0
2c6fd                 | LR__4651
2c6fd     3F          | 	byte	"?"
2c6fe     00          | 	byte	0
2c6ff                 | LR__4652
2c6ff     3F          | 	byte	"?"
2c700     00          | 	byte	0
2c701                 | LR__4653
2c701     6D 6F 75 73 
2c705     65          | 	byte	"mouse"
2c706     00          | 	byte	0
2c707                 | LR__4654
2c707     63 75 72 73 
2c70b     6F 72       | 	byte	"cursor"
2c70d     00          | 	byte	0
2c70e                 | LR__4655
2c70e     63 6C 69 63 
2c712     6B          | 	byte	"click"
2c713     00          | 	byte	0
2c714                 | LR__4656
2c714     6F 6E       | 	byte	"on"
2c716     00          | 	byte	0
2c717                 | LR__4657
2c717     31          | 	byte	"1"
2c718     00          | 	byte	0
2c719                 | LR__4658
2c719     6F 66 66    | 	byte	"off"
2c71c     00          | 	byte	0
2c71d                 | LR__4659
2c71d     30          | 	byte	"0"
2c71e     00          | 	byte	0
2c71f                 | LR__4660
2c71f     6D 6F 64 65 | 	byte	"mode"
2c723     00          | 	byte	0
2c724                 | LR__4661
2c724     6D 2E       | 	byte	"m."
2c726     00          | 	byte	0
2c727                 | LR__4662
2c727     61 74 61 72 
2c72b     69          | 	byte	"atari"
2c72c     00          | 	byte	0
2c72d                 | LR__4663
2c72d     30          | 	byte	"0"
2c72e     00          | 	byte	0
2c72f                 | LR__4664
2c72f     70 63 5F 61 
2c733     6D 62 65 72 | 	byte	"pc_amber"
2c737     00          | 	byte	0
2c738                 | LR__4665
2c738     31          | 	byte	"1"
2c739     00          | 	byte	0
2c73a                 | LR__4666
2c73a     70 63 5F 67 
2c73e     72 65 65 6E | 	byte	"pc_green"
2c742     00          | 	byte	0
2c743                 | LR__4667
2c743     32          | 	byte	"2"
2c744     00          | 	byte	0
2c745                 | LR__4668
2c745     70 63 5F 77 
2c749     68 69 74 65 | 	byte	"pc_white"
2c74d     00          | 	byte	0
2c74e                 | LR__4669
2c74e     33          | 	byte	"3"
2c74f     00          | 	byte	0
2c750                 | LR__4670
2c750     73 74       | 	byte	"st"
2c752     00          | 	byte	0
2c753                 | LR__4671
2c753     34          | 	byte	"4"
2c754     00          | 	byte	0
2c755                 | LR__4672
2c755                 | 	byte	
2c755     00          | 	byte	0
2c756                 | LR__4673
2c756     6C 6F 61 64 | 	byte	"load"
2c75a     00          | 	byte	0
2c75b                 | LR__4674
2c75b     73 61 76 65 | 	byte	"save"
2c75f     00          | 	byte	0
2c760                 | LR__4675
2c760     62 72 75 6E | 	byte	"brun"
2c764     00          | 	byte	0
2c765                 | LR__4676
2c765     72 75 6E    | 	byte	"run"
2c768     00          | 	byte	0
2c769                 | LR__4677
2c769     6C 6F 2E    | 	byte	"lo."
2c76c     00          | 	byte	0
2c76d                 | LR__4678
2c76d     73 2E       | 	byte	"s."
2c76f     00          | 	byte	0
2c770                 | LR__4679
2c770     62 72 2E    | 	byte	"br."
2c773     00          | 	byte	0
2c774                 | LR__4680
2c774                 | 	byte	
2c774     00          | 	byte	0
2c775                 | LR__4681
2c775                 | 	byte	
2c775     00          | 	byte	0
2c776                 | LR__4682
2c776                 | 	byte	
2c776     00          | 	byte	0
2c777                 | LR__4683
2c777                 | 	byte	
2c777     00          | 	byte	0
2c778                 | LR__4684
2c778     20 55 73 65 
2c77c     72 20 66 75 
2c780     6E 63 74 69 
2c784     6F 6E 73 20 
2c788     61 6E 64 20 
2c78c     61 72 72 61 
2c790     79 73 20 6E 
2c794     6F 74 20 79 
2c798     65 74 20 69 
2c79c     6D 70 6C 65 
2c7a0     6D 65 6E 74 
2c7a4     65 64       | 	byte	" User functions and arrays not yet implemented"
2c7a6     00          | 	byte	0
2c7a7                 | LR__4685
2c7a7                 | 	byte	
2c7a7     00          | 	byte	0
2c7a8                 | LR__4686
2c7a8                 | 	byte	
2c7a8     00          | 	byte	0
2c7a9                 | LR__4687
2c7a9     52 65 61 64 
2c7ad     79          | 	byte	"Ready"
2c7ae     00          | 	byte	0
2c7af                 | LR__4688
2c7af     2B          | 	byte	"+"
2c7b0     00          | 	byte	0
2c7b1                 | LR__4689
2c7b1     2D          | 	byte	"-"
2c7b2     00          | 	byte	0
2c7b3                 | LR__4690
2c7b3     6F 72       | 	byte	"or"
2c7b5     00          | 	byte	0
2c7b6                 | LR__4691
2c7b6     78 6F 72    | 	byte	"xor"
2c7b9     00          | 	byte	0
2c7ba                 | LR__4692
2c7ba     2A          | 	byte	"*"
2c7bb     00          | 	byte	0
2c7bc                 | LR__4693
2c7bc     2F          | 	byte	"/"
2c7bd     00          | 	byte	0
2c7be                 | LR__4694
2c7be     61 6E 64    | 	byte	"and"
2c7c1     00          | 	byte	0
2c7c2                 | LR__4695
2c7c2     64 69 76    | 	byte	"div"
2c7c5     00          | 	byte	0
2c7c6                 | LR__4696
2c7c6     6D 6F 64    | 	byte	"mod"
2c7c9     00          | 	byte	0
2c7ca                 | LR__4697
2c7ca     73 68 6C    | 	byte	"shl"
2c7cd     00          | 	byte	0
2c7ce                 | LR__4698
2c7ce     73 68 72    | 	byte	"shr"
2c7d1     00          | 	byte	0
2c7d2                 | LR__4699
2c7d2     5E          | 	byte	"^"
2c7d3     00          | 	byte	0
2c7d4                 | LR__4700
2c7d4     6E 6F 74    | 	byte	"not"
2c7d7     00          | 	byte	0
2c7d8                 | LR__4701
2c7d8     40          | 	byte	"@"
2c7d9     00          | 	byte	0
2c7da                 | LR__4702
2c7da     3D          | 	byte	"="
2c7db     00          | 	byte	0
2c7dc                 | LR__4703
2c7dc     3E 3D       | 	byte	">="
2c7de     00          | 	byte	0
2c7df                 | LR__4704
2c7df     3C 3D       | 	byte	"<="
2c7e1     00          | 	byte	0
2c7e2                 | LR__4705
2c7e2     3C          | 	byte	"<"
2c7e3     00          | 	byte	0
2c7e4                 | LR__4706
2c7e4     3E          | 	byte	">"
2c7e5     00          | 	byte	0
2c7e6                 | LR__4707
2c7e6     3C 3E       | 	byte	"<>"
2c7e8     00          | 	byte	0
2c7e9                 | LR__4708
2c7e9     2B 2B       | 	byte	"++"
2c7eb     00          | 	byte	0
2c7ec                 | LR__4709
2c7ec     2D 2D       | 	byte	"--"
2c7ee     00          | 	byte	0
2c7ef                 | LR__4710
2c7ef     23          | 	byte	"#"
2c7f0     00          | 	byte	0
2c7f1                 | LR__4711
2c7f1     23          | 	byte	"#"
2c7f2     00          | 	byte	0
2c7f3                 | LR__4712
2c7f3     2D          | 	byte	"-"
2c7f4     00          | 	byte	0
2c7f5                 | LR__4713
2c7f5     30          | 	byte	"0"
2c7f6     00          | 	byte	0
2c7f7                 | LR__4714
2c7f7     63          | 	byte	"c"
2c7f8     00          | 	byte	0
2c7f9                 | LR__4715
2c7f9     63 23       | 	byte	"c#"
2c7fb     00          | 	byte	0
2c7fc                 | LR__4716
2c7fc     64          | 	byte	"d"
2c7fd     00          | 	byte	0
2c7fe                 | LR__4717
2c7fe     64 23       | 	byte	"d#"
2c800     00          | 	byte	0
2c801                 | LR__4718
2c801     65          | 	byte	"e"
2c802     00          | 	byte	0
2c803                 | LR__4719
2c803     66          | 	byte	"f"
2c804     00          | 	byte	0
2c805                 | LR__4720
2c805     66 23       | 	byte	"f#"
2c807     00          | 	byte	0
2c808                 | LR__4721
2c808     67          | 	byte	"g"
2c809     00          | 	byte	0
2c80a                 | LR__4722
2c80a     67 23       | 	byte	"g#"
2c80c     00          | 	byte	0
2c80d                 | LR__4723
2c80d     61          | 	byte	"a"
2c80e     00          | 	byte	0
2c80f                 | LR__4724
2c80f     61 23       | 	byte	"a#"
2c811     00          | 	byte	0
2c812                 | LR__4725
2c812     68          | 	byte	"h"
2c813     00          | 	byte	0
2c814                 | LR__4726
2c814     62          | 	byte	"b"
2c815     00          | 	byte	0
2c816                 | LR__4727
2c816     2B          | 	byte	"+"
2c817     00          | 	byte	0
2c818                 | LR__4728
2c818     2D          | 	byte	"-"
2c819     00          | 	byte	0
2c81a                 | LR__4729
2c81a     3D          | 	byte	"="
2c81b     00          | 	byte	0
2c81c                 | LR__4730
2c81c     2C          | 	byte	","
2c81d     00          | 	byte	0
2c81e                 | LR__4731
2c81e     2A          | 	byte	"*"
2c81f     00          | 	byte	0
2c820                 | LR__4732
2c820     2F          | 	byte	"/"
2c821     00          | 	byte	0
2c822                 | LR__4733
2c822     3B          | 	byte	";"
2c823     00          | 	byte	0
2c824                 | LR__4734
2c824     22          | 	byte	34
2c825     00          | 	byte	0
2c826                 | LR__4735
2c826     5E          | 	byte	"^"
2c827     00          | 	byte	0
2c828                 | LR__4736
2c828     29          | 	byte	")"
2c829     00          | 	byte	0
2c82a                 | LR__4737
2c82a     28          | 	byte	"("
2c82b     00          | 	byte	0
2c82c                 | LR__4738
2c82c     3A          | 	byte	":"
2c82d     00          | 	byte	0
2c82e                 | LR__4739
2c82e     20          | 	byte	" "
2c82f     00          | 	byte	0
2c830                 | LR__4740
2c830     3E          | 	byte	">"
2c831     00          | 	byte	0
2c832                 | LR__4741
2c832     3C          | 	byte	"<"
2c833     00          | 	byte	0
2c834                 | LR__4742
2c834     3D          | 	byte	"="
2c835     00          | 	byte	0
2c836                 | LR__4743
2c836     62 65 65 70 | 	byte	"beep"
2c83a     00          | 	byte	0
2c83b                 | LR__4744
2c83b     62 2E       | 	byte	"b."
2c83d     00          | 	byte	0
2c83e                 | LR__4745
2c83e     62 6F 78    | 	byte	"box"
2c841     00          | 	byte	0
2c842                 | LR__4746
2c842     62 72 75 6E | 	byte	"brun"
2c846     00          | 	byte	0
2c847                 | LR__4747
2c847     62 72 2E    | 	byte	"br."
2c84a     00          | 	byte	0
2c84b                 | LR__4748
2c84b     63 69 72 63 
2c84f     6C 65       | 	byte	"circle"
2c851     00          | 	byte	0
2c852                 | LR__4749
2c852     63 69 2E    | 	byte	"ci."
2c855     00          | 	byte	0
2c856                 | LR__4750
2c856     63 6C 69 63 
2c85a     6B          | 	byte	"click"
2c85b     00          | 	byte	0
2c85c                 | LR__4751
2c85c     63 6C 73    | 	byte	"cls"
2c85f     00          | 	byte	0
2c860                 | LR__4752
2c860     63 6F 6C 6F 
2c864     72          | 	byte	"color"
2c865     00          | 	byte	0
2c866                 | LR__4753
2c866     63 2E       | 	byte	"c."
2c868     00          | 	byte	0
2c869                 | LR__4754
2c869     63 73 61 76 
2c86d     65          | 	byte	"csave"
2c86e     00          | 	byte	0
2c86f                 | LR__4755
2c86f     63 73 2E    | 	byte	"cs."
2c872     00          | 	byte	0
2c873                 | LR__4756
2c873     63 75 72 73 
2c877     6F 72       | 	byte	"cursor"
2c879     00          | 	byte	0
2c87a                 | LR__4757
2c87a     64 65 66 73 
2c87e     6E 64       | 	byte	"defsnd"
2c880     00          | 	byte	0
2c881                 | LR__4758
2c881     64 65 66 65 
2c885     6E 76       | 	byte	"defenv"
2c887     00          | 	byte	0
2c888                 | LR__4759
2c888     64 65 66 73 
2c88c     70 72 69 74 
2c890     65          | 	byte	"defsprite"
2c891     00          | 	byte	0
2c892                 | LR__4760
2c892     64 73 2E    | 	byte	"ds."
2c895     00          | 	byte	0
2c896                 | LR__4761
2c896     64 65 67    | 	byte	"deg"
2c899     00          | 	byte	0
2c89a                 | LR__4762
2c89a     64 69 6D    | 	byte	"dim"
2c89d     00          | 	byte	0
2c89e                 | LR__4763
2c89e     64 69 72    | 	byte	"dir"
2c8a1     00          | 	byte	0
2c8a2                 | LR__4764
2c8a2     64 70 6F 6B 
2c8a6     65          | 	byte	"dpoke"
2c8a7     00          | 	byte	0
2c8a8                 | LR__4765
2c8a8     64 72 61 77 | 	byte	"draw"
2c8ac     00          | 	byte	0
2c8ad                 | LR__4766
2c8ad     64 72 2E    | 	byte	"dr."
2c8b0     00          | 	byte	0
2c8b1                 | LR__4767
2c8b1     65 6C 73 65 | 	byte	"else"
2c8b5     00          | 	byte	0
2c8b6                 | LR__4768
2c8b6     66 63 69 72 
2c8ba     63 6C 65    | 	byte	"fcircle"
2c8bd     00          | 	byte	0
2c8be                 | LR__4769
2c8be     66 63 2E    | 	byte	"fc."
2c8c1     00          | 	byte	0
2c8c2                 | LR__4770
2c8c2     66 69 6C 6C | 	byte	"fill"
2c8c6     00          | 	byte	0
2c8c7                 | LR__4771
2c8c7     66 69 2E    | 	byte	"fi."
2c8ca     00          | 	byte	0
2c8cb                 | LR__4772
2c8cb     66 6F 6E 74 | 	byte	"font"
2c8cf     00          | 	byte	0
2c8d0                 | LR__4773
2c8d0     66 6F 72    | 	byte	"for"
2c8d3     00          | 	byte	0
2c8d4                 | LR__4774
2c8d4     66 2E       | 	byte	"f."
2c8d6     00          | 	byte	0
2c8d7                 | LR__4775
2c8d7     66 72 61 6D 
2c8db     65          | 	byte	"frame"
2c8dc     00          | 	byte	0
2c8dd                 | LR__4776
2c8dd     66 72 2E    | 	byte	"fr."
2c8e0     00          | 	byte	0
2c8e1                 | LR__4777
2c8e1     67 6F 74 6F | 	byte	"goto"
2c8e5     00          | 	byte	0
2c8e6                 | LR__4778
2c8e6     67 2E       | 	byte	"g."
2c8e8     00          | 	byte	0
2c8e9                 | LR__4779
2c8e9     69 66       | 	byte	"if"
2c8eb     00          | 	byte	0
2c8ec                 | LR__4780
2c8ec     69 6E 6B    | 	byte	"ink"
2c8ef     00          | 	byte	0
2c8f0                 | LR__4781
2c8f0     69 2E       | 	byte	"i."
2c8f2     00          | 	byte	0
2c8f3                 | LR__4782
2c8f3     69 6E 74    | 	byte	"int"
2c8f6     00          | 	byte	0
2c8f7                 | LR__4783
2c8f7     6C 69 73 74 | 	byte	"list"
2c8fb     00          | 	byte	0
2c8fc                 | LR__4784
2c8fc     6C 2E       | 	byte	"l."
2c8fe     00          | 	byte	0
2c8ff                 | LR__4785
2c8ff     6C 6F 61 64 | 	byte	"load"
2c903     00          | 	byte	0
2c904                 | LR__4786
2c904     6C 6F 2E    | 	byte	"lo."
2c907     00          | 	byte	0
2c908                 | LR__4787
2c908     6C 70 6F 6B 
2c90c     65          | 	byte	"lpoke"
2c90d     00          | 	byte	0
2c90e                 | LR__4788
2c90e     6D 6F 64 65 | 	byte	"mode"
2c912     00          | 	byte	0
2c913                 | LR__4789
2c913     6D 2E       | 	byte	"m."
2c915     00          | 	byte	0
2c916                 | LR__4790
2c916     6D 6F 75 73 
2c91a     65          | 	byte	"mouse"
2c91b     00          | 	byte	0
2c91c                 | LR__4791
2c91c     6E 65 77    | 	byte	"new"
2c91f     00          | 	byte	0
2c920                 | LR__4792
2c920     6E 65 78 74 | 	byte	"next"
2c924     00          | 	byte	0
2c925                 | LR__4793
2c925     6E 2E       | 	byte	"n."
2c927     00          | 	byte	0
2c928                 | LR__4794
2c928     70 61 70 65 
2c92c     72          | 	byte	"paper"
2c92d     00          | 	byte	0
2c92e                 | LR__4795
2c92e     70 2E       | 	byte	"p."
2c930     00          | 	byte	0
2c931                 | LR__4796
2c931     70 69 6E 66 
2c935     6C 6F 61 74 | 	byte	"pinfloat"
2c939     00          | 	byte	0
2c93a                 | LR__4797
2c93a     70 69 6E 68 
2c93e     69          | 	byte	"pinhi"
2c93f     00          | 	byte	0
2c940                 | LR__4798
2c940     70 69 6E 6C 
2c944     6F          | 	byte	"pinlo"
2c945     00          | 	byte	0
2c946                 | LR__4799
2c946     70 69 6E 73 
2c94a     74 61 72 74 | 	byte	"pinstart"
2c94e     00          | 	byte	0
2c94f                 | LR__4800
2c94f     70 69 6E 74 
2c953     6F 67 67 6C 
2c957     65          | 	byte	"pintoggle"
2c958     00          | 	byte	0
2c959                 | LR__4801
2c959     70 69 6E 77 
2c95d     72 69 74 65 | 	byte	"pinwrite"
2c961     00          | 	byte	0
2c962                 | LR__4802
2c962     70 6C 61 79 | 	byte	"play"
2c966     00          | 	byte	0
2c967                 | LR__4803
2c967     70 6C 6F 74 | 	byte	"plot"
2c96b     00          | 	byte	0
2c96c                 | LR__4804
2c96c     70 6C 2E    | 	byte	"pl."
2c96f     00          | 	byte	0
2c970                 | LR__4805
2c970     70 6F 6B 65 | 	byte	"poke"
2c974     00          | 	byte	0
2c975                 | LR__4806
2c975     70 6F 73 69 
2c979     74 69 6F 6E | 	byte	"position"
2c97d     00          | 	byte	0
2c97e                 | LR__4807
2c97e     70 6F 73 2E | 	byte	"pos."
2c982     00          | 	byte	0
2c983                 | LR__4808
2c983     70 72 69 6E 
2c987     74          | 	byte	"print"
2c988     00          | 	byte	0
2c989                 | LR__4809
2c989     3F          | 	byte	"?"
2c98a     00          | 	byte	0
2c98b                 | LR__4810
2c98b     72 61 64    | 	byte	"rad"
2c98e     00          | 	byte	0
2c98f                 | LR__4811
2c98f     72 65 6C 65 
2c993     61 73 65    | 	byte	"release"
2c996     00          | 	byte	0
2c997                 | LR__4812
2c997     72 75 6E    | 	byte	"run"
2c99a     00          | 	byte	0
2c99b                 | LR__4813
2c99b     73 61 76 65 | 	byte	"save"
2c99f     00          | 	byte	0
2c9a0                 | LR__4814
2c9a0     73 2E       | 	byte	"s."
2c9a2     00          | 	byte	0
2c9a3                 | LR__4815
2c9a3     73 65 74 64 
2c9a7     65 6C 61 79 | 	byte	"setdelay"
2c9ab     00          | 	byte	0
2c9ac                 | LR__4816
2c9ac     73 65 74 65 
2c9b0     6E 76       | 	byte	"setenv"
2c9b2     00          | 	byte	0
2c9b3                 | LR__4817
2c9b3     73 65 74 6C 
2c9b7     65 6E       | 	byte	"setlen"
2c9b9     00          | 	byte	0
2c9ba                 | LR__4818
2c9ba     73 65 74 70 
2c9be     61 6E       | 	byte	"setpan"
2c9c0     00          | 	byte	0
2c9c1                 | LR__4819
2c9c1     73 65 74 73 
2c9c5     75 73 74 61 
2c9c9     69 6E       | 	byte	"setsustain"
2c9cb     00          | 	byte	0
2c9cc                 | LR__4820
2c9cc     73 65 74 76 
2c9d0     6F 6C       | 	byte	"setvol"
2c9d2     00          | 	byte	0
2c9d3                 | LR__4821
2c9d3     73 65 74 77 
2c9d7     61 76 65    | 	byte	"setwave"
2c9da     00          | 	byte	0
2c9db                 | LR__4822
2c9db     73 6F 75 6E 
2c9df     64          | 	byte	"sound"
2c9e0     00          | 	byte	0
2c9e1                 | LR__4823
2c9e1     73 6F 2E    | 	byte	"so."
2c9e4     00          | 	byte	0
2c9e5                 | LR__4824
2c9e5     73 70 72 69 
2c9e9     74 65       | 	byte	"sprite"
2c9eb     00          | 	byte	0
2c9ec                 | LR__4825
2c9ec     73 70 2E    | 	byte	"sp."
2c9ef     00          | 	byte	0
2c9f0                 | LR__4826
2c9f0     74 68 65 6E | 	byte	"then"
2c9f4     00          | 	byte	0
2c9f5                 | LR__4827
2c9f5     77 61 69 74 
2c9f9     6D 73       | 	byte	"waitms"
2c9fb     00          | 	byte	0
2c9fc                 | LR__4828
2c9fc     77 61 69 74 
2ca00     63 6C 6F 63 
2ca04     6B          | 	byte	"waitclock"
2ca05     00          | 	byte	0
2ca06                 | LR__4829
2ca06     77 63 2E    | 	byte	"wc."
2ca09     00          | 	byte	0
2ca0a                 | LR__4830
2ca0a     77 61 69 74 
2ca0e     76 62 6C    | 	byte	"waitvbl"
2ca11     00          | 	byte	0
2ca12                 | LR__4831
2ca12     77 76 2E    | 	byte	"wv."
2ca15     00          | 	byte	0
2ca16                 | LR__4832
2ca16     77 78 70 69 
2ca1a     6E          | 	byte	"wxpin"
2ca1b     00          | 	byte	0
2ca1c                 | LR__4833
2ca1c     77 79 70 69 
2ca20     6E          | 	byte	"wypin"
2ca21     00          | 	byte	0
2ca22                 | LR__4834
2ca22     61 62 73    | 	byte	"abs"
2ca25     00          | 	byte	0
2ca26                 | LR__4835
2ca26     61 63 6F 73 | 	byte	"acos"
2ca2a     00          | 	byte	0
2ca2b                 | LR__4836
2ca2b     61 64 72    | 	byte	"adr"
2ca2e     00          | 	byte	0
2ca2f                 | LR__4837
2ca2f     61 64 64 72 | 	byte	"addr"
2ca33     00          | 	byte	0
2ca34                 | LR__4838
2ca34     76 61 72 70 
2ca38     74 72       | 	byte	"varptr"
2ca3a     00          | 	byte	0
2ca3b                 | LR__4839
2ca3b     61 73 69 6E | 	byte	"asin"
2ca3f     00          | 	byte	0
2ca40                 | LR__4840
2ca40     61 74 6E    | 	byte	"atn"
2ca43     00          | 	byte	0
2ca44                 | LR__4841
2ca44     63 6F 73    | 	byte	"cos"
2ca47     00          | 	byte	0
2ca48                 | LR__4842
2ca48     64 70 65 65 
2ca4c     6B          | 	byte	"dpeek"
2ca4d     00          | 	byte	0
2ca4e                 | LR__4843
2ca4e     66 72 65    | 	byte	"fre"
2ca51     00          | 	byte	0
2ca52                 | LR__4844
2ca52     67 65 74 70 
2ca56     69 78 65 6C | 	byte	"getpixel"
2ca5a     00          | 	byte	0
2ca5b                 | LR__4845
2ca5b     67 65 2E    | 	byte	"ge."
2ca5e     00          | 	byte	0
2ca5f                 | LR__4846
2ca5f     67 65 74 65 
2ca63     6E 76 73 75 
2ca67     73 74 61 69 
2ca6b     6E          | 	byte	"getenvsustain"
2ca6c     00          | 	byte	0
2ca6d                 | LR__4847
2ca6d     67 65 74 6E 
2ca71     6F 74 65 76 
2ca75     61 6C 75 65 | 	byte	"getnotevalue"
2ca79     00          | 	byte	0
2ca7a                 | LR__4848
2ca7a     67 65 74 74 
2ca7e     69 6D 65    | 	byte	"gettime"
2ca81     00          | 	byte	0
2ca82                 | LR__4849
2ca82     69 6E 6B 65 
2ca86     79 24       | 	byte	"inkey$"
2ca88     00          | 	byte	0
2ca89                 | LR__4850
2ca89     6C 70 65 65 
2ca8d     6B          | 	byte	"lpeek"
2ca8e     00          | 	byte	0
2ca8f                 | LR__4851
2ca8f     6D 6F 75 73 
2ca93     65 6B       | 	byte	"mousek"
2ca95     00          | 	byte	0
2ca96                 | LR__4852
2ca96     6D 6F 75 73 
2ca9a     65 77       | 	byte	"mousew"
2ca9c     00          | 	byte	0
2ca9d                 | LR__4853
2ca9d     6D 6F 75 73 
2caa1     65 78       | 	byte	"mousex"
2caa3     00          | 	byte	0
2caa4                 | LR__4854
2caa4     6D 6F 75 73 
2caa8     65 79       | 	byte	"mousey"
2caaa     00          | 	byte	0
2caab                 | LR__4855
2caab     70 65 65 6B | 	byte	"peek"
2caaf     00          | 	byte	0
2cab0                 | LR__4856
2cab0     70 69 6E 72 
2cab4     65 61 64    | 	byte	"pinread"
2cab7     00          | 	byte	0
2cab8                 | LR__4857
2cab8     72 64 70 69 
2cabc     6E          | 	byte	"rdpin"
2cabd     00          | 	byte	0
2cabe                 | LR__4858
2cabe     72 71 70 69 
2cac2     6E          | 	byte	"rqpin"
2cac3     00          | 	byte	0
2cac4                 | LR__4859
2cac4     72 6E 64    | 	byte	"rnd"
2cac7     00          | 	byte	0
2cac8                 | LR__4860
2cac8     73 69 6E    | 	byte	"sin"
2cacb     00          | 	byte	0
2cacc                 | LR__4861
2cacc     73 71 72    | 	byte	"sqr"
2cacf     00          | 	byte	0
2cad0                 | LR__4862
2cad0     73 74 69 63 
2cad4     6B          | 	byte	"stick"
2cad5     00          | 	byte	0
2cad6                 | LR__4863
2cad6     73 74 72 69 
2cada     67          | 	byte	"strig"
2cadb     00          | 	byte	0
2cadc                 | LR__4864
2cadc     74 61 6E    | 	byte	"tan"
2cadf     00          | 	byte	0
2cae0                 | LR__4865
2cae0     61          | 	byte	"a"
2cae1     00          | 	byte	0
2cae2                 | LR__4866
2cae2     7A          | 	byte	"z"
2cae3     00          | 	byte	0
2cae4                 | LR__4867
2cae4     5F          | 	byte	"_"
2cae5     00          | 	byte	0
2cae6                 | LR__4868
2cae6     61          | 	byte	"a"
2cae7     00          | 	byte	0
2cae8                 | LR__4869
2cae8     7A          | 	byte	"z"
2cae9     00          | 	byte	0
2caea                 | LR__4870
2caea     30          | 	byte	"0"
2caeb     00          | 	byte	0
2caec                 | LR__4871
2caec     39          | 	byte	"9"
2caed     00          | 	byte	0
2caee                 | LR__4872
2caee     5F          | 	byte	"_"
2caef     00          | 	byte	0
2caf0                 | LR__4873
2caf0     2E          | 	byte	"."
2caf1     00          | 	byte	0
2caf2                 | LR__4874
2caf2     61          | 	byte	"a"
2caf3     00          | 	byte	0
2caf4                 | LR__4875
2caf4     7A          | 	byte	"z"
2caf5     00          | 	byte	0
2caf6                 | LR__4876
2caf6     30          | 	byte	"0"
2caf7     00          | 	byte	0
2caf8                 | LR__4877
2caf8     39          | 	byte	"9"
2caf9     00          | 	byte	0
2cafa                 | LR__4878
2cafa     5F          | 	byte	"_"
2cafb     00          | 	byte	0
2cafc                 | LR__4879
2cafc     24          | 	byte	"$"
2cafd     00          | 	byte	0
2cafe                 | LR__4880
2cafe     25          | 	byte	"%"
2caff     00          | 	byte	0
2cb00                 | LR__4881
2cb00     21          | 	byte	"!"
2cb01     00          | 	byte	0
2cb02                 | LR__4882
2cb02     30          | 	byte	"0"
2cb03     00          | 	byte	0
2cb04                 | LR__4883
2cb04     39          | 	byte	"9"
2cb05     00          | 	byte	0
2cb06                 | LR__4884
2cb06     2E          | 	byte	"."
2cb07     00          | 	byte	0
2cb08                 | LR__4885
2cb08     24          | 	byte	"$"
2cb09     00          | 	byte	0
2cb0a                 | LR__4886
2cb0a     25          | 	byte	"%"
2cb0b     00          | 	byte	0
2cb0c                 | LR__4887
2cb0c     2D          | 	byte	"-"
2cb0d     00          | 	byte	0
2cb0e                 | LR__4888
2cb0e     2E          | 	byte	"."
2cb0f     00          | 	byte	0
2cb10                 | LR__4889
2cb10     30          | 	byte	"0"
2cb11     00          | 	byte	0
2cb12                 | LR__4890
2cb12     39          | 	byte	"9"
2cb13     00          | 	byte	0
2cb14                 | LR__4891
2cb14     5F          | 	byte	"_"
2cb15     00          | 	byte	0
2cb16                 | LR__4892
2cb16     2E          | 	byte	"."
2cb17     00          | 	byte	0
2cb18                 | LR__4893
2cb18     45          | 	byte	"E"
2cb19     00          | 	byte	0
2cb1a                 | LR__4894
2cb1a     65          | 	byte	"e"
2cb1b     00          | 	byte	0
2cb1c                 | LR__4895
2cb1c     2D          | 	byte	"-"
2cb1d     00          | 	byte	0
2cb1e                 | LR__4896
2cb1e     2D          | 	byte	"-"
2cb1f     00          | 	byte	0
2cb20                 | LR__4897
2cb20     65          | 	byte	"e"
2cb21     00          | 	byte	0
2cb22                 | LR__4898
2cb22     2E          | 	byte	"."
2cb23     00          | 	byte	0
2cb24                 | LR__4899
2cb24     45          | 	byte	"E"
2cb25     00          | 	byte	0
2cb26                 | LR__4900
2cb26     65          | 	byte	"e"
2cb27     00          | 	byte	0
2cb28                 | LR__4901
2cb28     30          | 	byte	"0"
2cb29     00          | 	byte	0
2cb2a                 | LR__4902
2cb2a     39          | 	byte	"9"
2cb2b     00          | 	byte	0
2cb2c                 | LR__4903
2cb2c     24          | 	byte	"$"
2cb2d     00          | 	byte	0
2cb2e                 | LR__4904
2cb2e     25          | 	byte	"%"
2cb2f     00          | 	byte	0
2cb30                 | LR__4905
2cb30     2D          | 	byte	"-"
2cb31     00          | 	byte	0
2cb32                 | LR__4906
2cb32     30          | 	byte	"0"
2cb33     00          | 	byte	0
2cb34                 | LR__4907
2cb34     39          | 	byte	"9"
2cb35     00          | 	byte	0
2cb36                 | LR__4908
2cb36     5F          | 	byte	"_"
2cb37     00          | 	byte	0
2cb38                 | LR__4909
2cb38     30          | 	byte	"0"
2cb39     00          | 	byte	0
2cb3a                 | LR__4910
2cb3a     39          | 	byte	"9"
2cb3b     00          | 	byte	0
2cb3c                 | LR__4911
2cb3c     5F          | 	byte	"_"
2cb3d     00          | 	byte	0
2cb3e                 | LR__4912
2cb3e     22          | 	byte	34
2cb3f     00          | 	byte	0
2cb40                 | LR__4913
2cb40     22          | 	byte	34
2cb41     00          | 	byte	0
2cb42                 | LR__4914
2cb42     44 69 6D 3A 
2cb46     20 61 74 20 
2cb4a     6C 69 6E 65 
2cb4e     20          | 	byte	"Dim: at line "
2cb4f     00          | 	byte	0
2cb50                 | LR__4915
2cb50     3A 20 77 61 
2cb54     72 6E 69 6E 
2cb58     67 3A 20 74 
2cb5c     68 65 20 76 
2cb60     61 72 69 61 
2cb64     62 6C 65 20 
2cb68     65 78 69 73 
2cb6c     74 65 64 2E | 	byte	": warning: the variable existed."
2cb70     00          | 	byte	0
2cb71                 | LR__4916
2cb71     28          | 	byte	"("
2cb72     00          | 	byte	0
2cb73                 | LR__4917
2cb73     61 73       | 	byte	"as"
2cb75     00          | 	byte	0
2cb76                 | LR__4918
2cb76     61 73       | 	byte	"as"
2cb78     00          | 	byte	0
2cb79                 | LR__4919
2cb79     2C          | 	byte	","
2cb7a     00          | 	byte	0
2cb7b                 | LR__4920
2cb7b     29          | 	byte	")"
2cb7c     00          | 	byte	0
2cb7d                 | LR__4921
2cb7d     29          | 	byte	")"
2cb7e     00          | 	byte	0
2cb7f                 | LR__4922
2cb7f     61 73       | 	byte	"as"
2cb81     00          | 	byte	0
2cb82                 | LR__4923
2cb82     62 79 74 65 | 	byte	"byte"
2cb86     00          | 	byte	0
2cb87                 | LR__4924
2cb87     75 62 79 74 
2cb8b     65          | 	byte	"ubyte"
2cb8c     00          | 	byte	0
2cb8d                 | LR__4925
2cb8d     73 68 6F 72 
2cb91     74          | 	byte	"short"
2cb92     00          | 	byte	0
2cb93                 | LR__4926
2cb93     75 73 68 6F 
2cb97     72 74       | 	byte	"ushort"
2cb99     00          | 	byte	0
2cb9a                 | LR__4927
2cb9a     6C 6F 6E 67 | 	byte	"long"
2cb9e     00          | 	byte	0
2cb9f                 | LR__4928
2cb9f     69 6E 74 65 
2cba3     67 65 72    | 	byte	"integer"
2cba6     00          | 	byte	0
2cba7                 | LR__4929
2cba7     75 6C 6F 6E 
2cbab     67          | 	byte	"ulong"
2cbac     00          | 	byte	0
2cbad                 | LR__4930
2cbad     69 6E 74 36 
2cbb1     34          | 	byte	"int64"
2cbb2     00          | 	byte	0
2cbb3                 | LR__4931
2cbb3     75 69 6E 74 
2cbb7     36 34       | 	byte	"uint64"
2cbb9     00          | 	byte	0
2cbba                 | LR__4932
2cbba     73 69 6E 67 
2cbbe     6C 65       | 	byte	"single"
2cbc0     00          | 	byte	0
2cbc1                 | LR__4933
2cbc1     64 6F 75 62 
2cbc5     6C 65       | 	byte	"double"
2cbc7     00          | 	byte	0
2cbc8                 | LR__4934
2cbc8     73 74 72 69 
2cbcc     6E 67       | 	byte	"string"
2cbce     00          | 	byte	0
2cbcf                 | LR__4935
2cbcf     74 6F       | 	byte	"to"
2cbd1     00          | 	byte	0
2cbd2                 | LR__4936
2cbd2     73 74 65 70 | 	byte	"step"
2cbd6     00          | 	byte	0
2cbd7                 | LR__4937
2cbd7     73 2E       | 	byte	"s."
2cbd9     00          | 	byte	0
2cbda                 | LR__4938
2cbda     57 65 20 68 
2cbde     61 76 65 20 
2cbe2     61 20 73 6C 
2cbe6     6F 77 20 67 
2cbea     6F 74 6F 2C 
2cbee     20 74 6F 64 
2cbf2     6F 20 20    | 	byte	"We have a slow goto, todo  "
2cbf5     00          | 	byte	0
2cbf6                 | LR__4939
2cbf6                 | 	byte	
2cbf6     00          | 	byte	0
2cbf7                 | LR__4940
2cbf7     2F          | 	byte	"/"
2cbf8     00          | 	byte	0
2cbf9                 | LR__4941
2cbf9                 | 	byte	
2cbf9     00          | 	byte	0
2cbfa                 | LR__4942
2cbfa     53 61 76 65 
2cbfe     64 20 61 73 
2cc02     20          | 	byte	"Saved as "
2cc03     00          | 	byte	0
2cc04                 | LR__4943
2cc04     2F          | 	byte	"/"
2cc05     00          | 	byte	0
2cc06                 | LR__4944
2cc06                 | 	byte	
2cc06     00          | 	byte	0
2cc07                 | LR__4945
2cc07     2F          | 	byte	"/"
2cc08     00          | 	byte	0
2cc09                 | LR__4946
2cc09     2F          | 	byte	"/"
2cc0a     00          | 	byte	0
2cc0b                 | LR__4947
2cc0b     2E 62 61 73 | 	byte	".bas"
2cc0f     00          | 	byte	0
2cc10                 | LR__4948
2cc10     53 79 73 74 
2cc14     65 6D 20 65 
2cc18     72 72 6F 72 
2cc1c     20          | 	byte	"System error "
2cc1d     00          | 	byte	0
2cc1e                 | LR__4949
2cc1e     3A 20       | 	byte	": "
2cc20     00          | 	byte	0
2cc21                 | LR__4950
2cc21     2E 62 61 73 | 	byte	".bas"
2cc25     00          | 	byte	0
2cc26                 | LR__4951
2cc26     2F          | 	byte	"/"
2cc27     00          | 	byte	0
2cc28                 | LR__4952
2cc28     30          | 	byte	"0"
2cc29     00          | 	byte	0
2cc2a                 | LR__4953
2cc2a     39          | 	byte	"9"
2cc2b     00          | 	byte	0
2cc2c                 | LR__4954
2cc2c                 | 	byte	
2cc2c     00          | 	byte	0
2cc2d                 | LR__4955
2cc2d     4C 6F 61 64 
2cc31     65 64 20    | 	byte	"Loaded "
2cc34     00          | 	byte	0
2cc35                 | LR__4956
2cc35     2F          | 	byte	"/"
2cc36     00          | 	byte	0
2cc37                 | LR__4957
2cc37     53 74 6F 70 
2cc3b     70 65 64 20 
2cc3f     61 74 20 6C 
2cc43     69 6E 65 20 | 	byte	"Stopped at line "
2cc47     00          | 	byte	0
2cc48                 | LR__4958
2cc48                 | 	byte	
2cc48     00          | 	byte	0
2cc49                 | LR__4959
2cc49                 | 	byte	
2cc49     00          | 	byte	0
2cc4a                 | LR__4960
2cc4a     2F 73 64 2F 
2cc4e     6D 65 64 69 
2cc52     61 2F 68 2F | 	byte	"/sd/media/h/"
2cc56     00          | 	byte	0
2cc57                 | LR__4961
2cc57     53 79 73 74 
2cc5b     65 6D 20 65 
2cc5f     72 72 6F 72 
2cc63     20          | 	byte	"System error "
2cc64     00          | 	byte	0
2cc65                 | LR__4962
2cc65     3A 20       | 	byte	": "
2cc67     00          | 	byte	0
2cc68                 | LR__4963
2cc68                 | 	byte	
2cc68     00          | 	byte	0
2cc69                 | LR__4964
2cc69                 | 	byte	
2cc69     00          | 	byte	0
2cc6a                 | LR__4965
2cc6a     2F 73 64 2F 
2cc6e     6D 65 64 69 
2cc72     61 2F 73 2F | 	byte	"/sd/media/s/"
2cc76     00          | 	byte	0
2cc77                 | LR__4966
2cc77     53 79 73 74 
2cc7b     65 6D 20 65 
2cc7f     72 72 6F 72 
2cc83     20          | 	byte	"System error "
2cc84     00          | 	byte	0
2cc85                 | LR__4967
2cc85     3A 20       | 	byte	": "
2cc87     00          | 	byte	0
2cc88                 | LR__4968
2cc88     6E 6F 6E 61 
2cc8c     6D 65 2E 62 
2cc90     61 73       | 	byte	"noname.bas"
2cc92     00          | 	byte	0
2cc93                 | LR__4969
2cc93     45 72 72 6F 
2cc97     72 20       | 	byte	"Error "
2cc99     00          | 	byte	0
2cc9a                 | LR__4970
2cc9a     3A 20       | 	byte	": "
2cc9c     00          | 	byte	0
2cc9d                 | LR__4971
2cc9d                 | 	byte	
2cc9d     00          | 	byte	0
2cc9e                 | LR__4972
2cc9e                 | 	byte	
2cc9e     00          | 	byte	0
2cc9f                 | LR__4973
2cc9f     72 6E 64 3A 
2cca3     20          | 	byte	"rnd: "
2cca4     00          | 	byte	0
2cca5                 | LR__4974
2cca5     72 6E 64 3A 
2cca9     20          | 	byte	"rnd: "
2ccaa     00          | 	byte	0
2ccab                 | LR__4975
2ccab     67 65 74 65 
2ccaf     6E 76 73 75 
2ccb3     73 74 61 69 
2ccb7     6E 3A 20    | 	byte	"getenvsustain: "
2ccba     00          | 	byte	0
2ccbb                 | LR__4976
2ccbb     73 69 6E 3A 
2ccbf     20          | 	byte	"sin: "
2ccc0     00          | 	byte	0
2ccc1                 | LR__4977
2ccc1     63 6F 73 3A 
2ccc5     20          | 	byte	"cos: "
2ccc6     00          | 	byte	0
2ccc7                 | LR__4978
2ccc7     74 61 6E 3A 
2cccb     20          | 	byte	"tan: "
2cccc     00          | 	byte	0
2cccd                 | LR__4979
2cccd     61 73 69 6E 
2ccd1     3A 20       | 	byte	"asin: "
2ccd3     00          | 	byte	0
2ccd4                 | LR__4980
2ccd4     61 63 6F 73 
2ccd8     3A 20       | 	byte	"acos: "
2ccda     00          | 	byte	0
2ccdb                 | LR__4981
2ccdb     61 74 6E 3A 
2ccdf     20          | 	byte	"atn: "
2cce0     00          | 	byte	0
2cce1                 | LR__4982
2cce1     73 71 72 3A 
2cce5     20          | 	byte	"sqr: "
2cce6     00          | 	byte	0
2cce7                 | LR__4983
2cce7     73 74 69 63 
2cceb     6B 3A 20    | 	byte	"stick: "
2ccee     00          | 	byte	0
2ccef                 | LR__4984
2ccef     73 74 72 69 
2ccf3     67 3A 20    | 	byte	"strig: "
2ccf6     00          | 	byte	0
2ccf7                 | LR__4985
2ccf7     67 65 74 70 
2ccfb     69 78 65 6C 
2ccff     3A 20       | 	byte	"getpixel: "
2cd01     00          | 	byte	0
2cd02                 | LR__4986
2cd02     20 42 41 53 
2cd06     49 43 20 62 
2cd0a     79 74 65 73 
2cd0e     20 66 72 65 
2cd12     65          | 	byte	" BASIC bytes free"
2cd13     00          | 	byte	0
2cd14                 | LR__4987
2cd14                 | 	byte	
2cd14     00          | 	byte	0
2cd15                 | LR__4988
2cd15     2F 73 64 2F 
2cd19     62 61 73    | 	byte	"/sd/bas"
2cd1c     00          | 	byte	0
2cd1d                 | LR__4989
2cd1d     57 6F 72 6B 
2cd21     69 6E 67 20 
2cd25     64 69 72 65 
2cd29     63 74 6F 72 
2cd2d     79 3A 20    | 	byte	"Working directory: "
2cd30     00          | 	byte	0
2cd31                 | LR__4990
2cd31     2A          | 	byte	"*"
2cd32     00          | 	byte	0
2cd33                 | LR__4991
2cd33                 | 	byte	
2cd33     00          | 	byte	0
2cd34                 | LR__4992
2cd34     5B 64 69 72 
2cd38     5D 20       | 	byte	"[dir] "
2cd3a     00          | 	byte	0
2cd3b                 | LR__4993
2cd3b     2A          | 	byte	"*"
2cd3c     00          | 	byte	0
2cd3d                 | LR__4994
2cd3d                 | 	byte	
2cd3d     00          | 	byte	0
2cd3e                 | LR__4995
2cd3e     2D 2D 2D 2D 
2cd42     2D 6D 6F 72 
2cd46     65 2C 20 70 
2cd4a     72 65 73 73 
2cd4e     20 61 6E 79 
2cd52     20 6B 65 79 | 	byte	"-----more, press any key"
2cd56     00          | 	byte	0
2cd57                 | LR__4996
2cd57     20 20 20 20 
      ...             
2cd6f     20 20 20 20 
2cd73     20          | 	byte	"                             "
2cd74     00          | 	byte	0
2cd75                 | LR__4997
2cd75     2F          | 	byte	"/"
2cd76     00          | 	byte	0
2cd77                 | LR__4998
2cd77     2F 73 64 2F 
2cd7b     62 69 6E 2F | 	byte	"/sd/bin/"
2cd7f     00          | 	byte	0
2cd80                 | LR__4999
2cd80     53 79 73 74 
2cd84     65 6D 20 65 
2cd88     72 72 6F 72 
2cd8c     20          | 	byte	"System error "
2cd8d     00          | 	byte	0
2cd8e                 | LR__5000
2cd8e     3A 20       | 	byte	": "
2cd90     00          | 	byte	0
2cd91                 | LR__5001
2cd91                 | 	byte	
2cd91     00          | 	byte	0
2cd92                 | LR__5002
2cd92     45 78 70 65 
2cd96     63 74 65 64 
2cd9a     20 6E 75 6D 
2cd9e     62 65 72 2C 
2cda2     20 67 6F 74 
2cda6     20 73 6F 6D 
2cdaa     65 74 68 69 
2cdae     6E 67 20 65 
2cdb2     6C 73 65 2E | 	byte	"Expected number, got something else."
2cdb6     00          | 	byte	0
2cdb7                 | LR__5003
2cdb7     43 61 6E 6E 
2cdbb     6F 74 20 61 
2cdbf     64 64 20 61 
2cdc3     20 6E 75 6D 
2cdc7     62 65 72 20 
2cdcb     74 6F 20 61 
2cdcf     20 73 74 72 
2cdd3     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2cdd7     00          | 	byte	0
2cdd8                 | LR__5004
2cdd8     43 61 6E 6E 
2cddc     6F 74 20 73 
2cde0     75 62 73 74 
2cde4     72 61 63 74 
2cde8     20 73 74 72 
2cdec     69 6E 67 73 
2cdf0     2E          | 	byte	"Cannot substract strings."
2cdf1     00          | 	byte	0
2cdf2                 | LR__5005
2cdf2     55 6E 6B 6E 
2cdf6     6F 77 6E 20 
2cdfa     65 72 72 6F 
2cdfe     72 20 77 68 
2ce02     69 6C 65 20 
2ce06     61 64 64 69 
2ce0a     6E 67 2E    | 	byte	"Unknown error while adding."
2ce0d     00          | 	byte	0
2ce0e                 | LR__5006
2ce0e     55 6E 6B 6E 
2ce12     6F 77 6E 20 
2ce16     65 72 72 6F 
2ce1a     72 20 77 68 
2ce1e     69 6C 65 20 
2ce22     73 75 62 73 
2ce26     74 72 61 63 
2ce2a     74 69 6E 67 
2ce2e     2E          | 	byte	"Unknown error while substracting."
2ce2f     00          | 	byte	0
2ce30                 | LR__5007
2ce30     43 61 6E 6E 
2ce34     6F 74 20 64 
2ce38     6F 20 6C 6F 
2ce3c     67 69 63 20 
2ce40     6F 70 65 72 
2ce44     61 74 69 6F 
2ce48     6E 20 6F 6E 
2ce4c     20 73 74 72 
2ce50     69 6E 67 20 
2ce54     6F 72 20 66 
2ce58     6C 6F 61 74 
2ce5c     2E          | 	byte	"Cannot do logic operation on string or float."
2ce5d     00          | 	byte	0
2ce5e                 | LR__5008
2ce5e     55 6E 6B 6E 
2ce62     6F 77 6E 20 
2ce66     65 72 72 6F 
2ce6a     72 20 77 68 
2ce6e     69 6C 65 20 
2ce72     64 6F 69 6E 
2ce76     67 20 6C 6F 
2ce7a     67 69 63 20 
2ce7e     6F 70 65 72 
2ce82     61 74 69 6F 
2ce86     6E 2E       | 	byte	"Unknown error while doing logic operation."
2ce88     00          | 	byte	0
2ce89                 | LR__5009
2ce89     43 61 6E 6E 
2ce8d     6F 74 20 6D 
2ce91     75 6C 74 69 
2ce95     70 6C 79 20 
2ce99     73 74 72 69 
2ce9d     6E 67 73 2E | 	byte	"Cannot multiply strings."
2cea1     00          | 	byte	0
2cea2                 | LR__5010
2cea2     55 6E 6B 6E 
2cea6     6F 77 6E 20 
2ceaa     65 72 72 6F 
2ceae     72 20 77 68 
2ceb2     69 6C 65 20 
2ceb6     6D 75 6C 74 
2ceba     69 70 6C 79 
2cebe     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2cec2     00          | 	byte	0
2cec3                 | LR__5011
2cec3     43 61 6E 6E 
2cec7     6F 74 20 64 
2cecb     69 76 69 64 
2cecf     65 20 73 74 
2ced3     72 69 6E 67 
2ced7     73 2E       | 	byte	"Cannot divide strings."
2ced9     00          | 	byte	0
2ceda                 | LR__5012
2ceda     55 6E 6B 6E 
2cede     6F 77 6E 20 
2cee2     65 72 72 6F 
2cee6     72 20 77 68 
2ceea     69 6C 65 20 
2ceee     64 69 76 69 
2cef2     64 69 6E 67 
2cef6     2E          | 	byte	"Unknown error while dividing."
2cef7     00          | 	byte	0
2cef8                 | LR__5013
2cef8     43 61 6E 6E 
2cefc     6F 74 20 63 
2cf00     6F 6D 70 75 
2cf04     74 65 20 61 
2cf08     20 70 6F 77 
2cf0c     65 72 20 6F 
2cf10     66 20 61 20 
2cf14     73 74 72 69 
2cf18     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2cf1b     00          | 	byte	0
2cf1c                 | LR__5014
2cf1c     55 6E 6B 6E 
2cf20     6F 77 6E 20 
2cf24     65 72 72 6F 
2cf28     72 20 77 68 
2cf2c     69 6C 65 20 
2cf30     63 6F 6D 70 
2cf34     75 74 69 6E 
2cf38     67 20 61 20 
2cf3c     70 6F 77 65 
2cf40     72 2E       | 	byte	"Unknown error while computing a power."
2cf42     00          | 	byte	0
2cf43                 | LR__5015
2cf43     52 69 67 68 
2cf47     74 20 70 61 
2cf4b     72 65 6E 74 
2cf4f     68 65 73 69 
2cf53     73 20 65 78 
2cf57     70 65 63 74 
2cf5b     65 64 2E    | 	byte	"Right parenthesis expected."
2cf5e     00          | 	byte	0
2cf5f                 | LR__5016
2cf5f     45 78 70 65 
2cf63     63 74 65 64 
2cf67     20 73 74 72 
2cf6b     69 6E 67 2E | 	byte	"Expected string."
2cf6f     00          | 	byte	0
2cf70                 | LR__5017
2cf70     45 78 70 65 
2cf74     63 74 65 64 
2cf78     20 66 6C 6F 
2cf7c     61 74 2E    | 	byte	"Expected float."
2cf7f     00          | 	byte	0
2cf80                 | LR__5018
2cf80     45 78 70 65 
2cf84     63 74 65 64 
2cf88     20 75 6E 73 
2cf8c     69 67 6E 65 
2cf90     64 20 69 6E 
2cf94     74 65 67 65 
2cf98     72 2E       | 	byte	"Expected unsigned integer."
2cf9a     00          | 	byte	0
2cf9b                 | LR__5019
2cf9b     45 78 70 65 
2cf9f     63 74 65 64 
2cfa3     20 69 6E 74 
2cfa7     65 67 65 72 
2cfab     2E          | 	byte	"Expected integer."
2cfac     00          | 	byte	0
2cfad                 | LR__5020
2cfad     4E 6F 20 6D 
2cfb1     6F 72 65 20 
2cfb5     76 61 72 69 
2cfb9     61 62 6C 65 
2cfbd     20 73 6C 6F 
2cfc1     74 73 2E    | 	byte	"No more variable slots."
2cfc4     00          | 	byte	0
2cfc5                 | LR__5021
2cfc5     56 61 72 69 
2cfc9     61 62 6C 65 
2cfcd     20 6E 6F 74 
2cfd1     20 66 6F 75 
2cfd5     6E 64 2E    | 	byte	"Variable not found."
2cfd8     00          | 	byte	0
2cfd9                 | LR__5022
2cfd9     43 6F 6D 6D 
2cfdd     61 20 65 78 
2cfe1     70 65 63 74 
2cfe5     65 64 2E    | 	byte	"Comma expected."
2cfe8     00          | 	byte	0
2cfe9                 | LR__5023
2cfe9     43 6F 6D 6D 
2cfed     61 20 6F 72 
2cff1     20 73 65 6D 
2cff5     69 63 6F 6C 
2cff9     6F 6E 20 65 
2cffd     78 70 65 63 
2d001     74 65 64 2E | 	byte	"Comma or semicolon expected."
2d005     00          | 	byte	0
2d006                 | LR__5024
2d006     55 6E 6B 6E 
2d00a     6F 77 6E 20 
2d00e     63 6F 6D 6D 
2d012     61 6E 64 2E | 	byte	"Unknown command."
2d016     00          | 	byte	0
2d017                 | LR__5025
2d017     53 74 61 63 
2d01b     6B 20 75 6E 
2d01f     64 65 72 66 
2d023     6C 6F 77 2E | 	byte	"Stack underflow."
2d027     00          | 	byte	0
2d028                 | LR__5026
2d028     43 61 6E 6E 
2d02c     6F 74 20 65 
2d030     78 65 63 75 
2d034     74 65 20 67 
2d038     6F 74 6F 20 
2d03c     69 6E 20 74 
2d040     68 65 20 69 
2d044     6D 6D 65 64 
2d048     69 61 74 65 
2d04c     20 6D 6F 64 
2d050     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2d052     00          | 	byte	0
2d053                 | LR__5027
2d053     43 61 6E 6E 
2d057     6F 74 20 6C 
2d05b     6F 61 64 20 
2d05f     66 72 6F 6D 
2d063     20 74 68 69 
2d067     73 20 66 69 
2d06b     6C 65 2E    | 	byte	"Cannot load from this file."
2d06e     00          | 	byte	0
2d06f                 | LR__5028
2d06f     54 68 65 20 
2d073     70 72 6F 67 
2d077     72 61 6D 20 
2d07b     69 73 20 65 
2d07f     6D 70 74 79 
2d083     2E          | 	byte	"The program is empty."
2d084     00          | 	byte	0
2d085                 | LR__5029
2d085     49 66 20 61 
2d089     66 74 65 72 
2d08d     20 69 66 2E | 	byte	"If after if."
2d091     00          | 	byte	0
2d092                 | LR__5030
2d092     45 6D 70 74 
2d096     79 20 65 78 
2d09a     70 72 65 73 
2d09e     73 69 6F 6E 
2d0a2     2E          | 	byte	"Empty expression."
2d0a3     00          | 	byte	0
2d0a4                 | LR__5031
2d0a4     53 74 72 69 
2d0a8     6E 67 20 65 
2d0ac     78 70 65 63 
2d0b0     74 65 64 2E | 	byte	"String expected."
2d0b4     00          | 	byte	0
2d0b5                 | LR__5032
2d0b5     49 6E 74 65 
2d0b9     72 70 72 65 
2d0bd     74 65 72 20 
2d0c1     69 6E 74 65 
2d0c5     72 6E 61 6C 
2d0c9     20 65 72 72 
2d0cd     6F 72 2E    | 	byte	"Interpreter internal error."
2d0d0     00          | 	byte	0
2d0d1                 | LR__5033
2d0d1     45 78 70 65 
2d0d5     63 74 65 64 
2d0d9     20 61 73 73 
2d0dd     69 67 6E 2E | 	byte	"Expected assign."
2d0e1     00          | 	byte	0
2d0e2                 | LR__5034
2d0e2     45 78 70 65 
2d0e6     63 74 65 64 
2d0ea     20 27 74 6F 
2d0ee     27 2E       | 	byte	"Expected 'to'."
2d0f0     00          | 	byte	0
2d0f1                 | LR__5035
2d0f1     45 78 70 65 
2d0f5     63 74 65 64 
2d0f9     20 69 6E 74 
2d0fd     65 67 65 72 
2d101     20 76 61 72 
2d105     69 61 62 6C 
2d109     65 2E       | 	byte	"Expected integer variable."
2d10b     00          | 	byte	0
2d10c                 | LR__5036
2d10c     55 6E 69 6E 
2d110     69 74 69 61 
2d114     6C 69 7A 65 
2d118     64 20 76 61 
2d11c     72 69 61 62 
2d120     6C 65 20 69 
2d124     6E 20 27 6E 
2d128     65 78 74 27 
2d12c     2C 20 75 73 
2d130     65 20 27 66 
2d134     6F 72 27 20 
2d138     62 65 66 6F 
2d13c     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
2d13f     00          | 	byte	0
2d140                 | LR__5037
2d140     4E 6F 20 6D 
2d144     6F 72 65 20 
2d148     73 6C 6F 74 
2d14c     73 20 66 6F 
2d150     72 20 27 66 
2d154     6F 72 27 2E | 	byte	"No more slots for 'for'."
2d158     00          | 	byte	0
2d159                 | LR__5038
2d159     27 4E 65 78 
2d15d     74 27 20 64 
2d161     6F 65 73 6E 
2d165     27 74 20 6D 
2d169     61 74 63 68 
2d16d     20 27 66 6F 
2d171     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2d174     00          | 	byte	0
2d175                 | LR__5039
2d175     27 47 6F 74 
2d179     6F 27 20 74 
2d17d     61 72 67 65 
2d181     74 20 6C 69 
2d185     6E 65 20 6E 
2d189     6F 74 20 66 
2d18d     6F 75 6E 64 
2d191     2E          | 	byte	"'Goto' target line not found."
2d192     00          | 	byte	0
2d193                 | LR__5040
2d193     42 61 64 20 
2d197     6E 75 6D 62 
2d19b     65 72 20 6F 
2d19f     66 20 70 61 
2d1a3     72 61 6D 65 
2d1a7     74 65 72 73 | 	byte	"Bad number of parameters"
2d1ab     00          | 	byte	0
2d1ac                 | LR__5041
2d1ac     46 75 6E 63 
2d1b0     74 69 6F 6E 
2d1b4     20 75 6E 64 
2d1b8     65 66 69 6E 
2d1bc     65 64 20 66 
2d1c0     6F 72 20 73 
2d1c4     74 72 69 6E 
2d1c8     67 73       | 	byte	"Function undefined for strings"
2d1ca     00          | 	byte	0
2d1cb                 | LR__5042
2d1cb     42 61 64 20 
2d1cf     70 61 72 61 
2d1d3     6D 65 74 65 
2d1d7     72 2E       | 	byte	"Bad parameter."
2d1d9     00          | 	byte	0
2d1da                 | LR__5043
2d1da     43 61 6E 6E 
2d1de     6F 74 20 64 
2d1e2     65 63 6C 61 
2d1e6     72 65 20 61 
2d1ea     6E 20 61 72 
2d1ee     72 61 79 3A 
2d1f2     20 74 68 65 
2d1f6     20 76 61 72 
2d1fa     69 61 62 6C 
2d1fe     65 20 65 78 
2d202     69 73 74 73 
2d206     2E          | 	byte	"Cannot declare an array: the variable exists."
2d207     00          | 	byte	0
2d208                 | LR__5044
2d208     45 78 70 65 
2d20c     63 74 65 64 
2d210     20 27 28 27 
2d214     2E          | 	byte	"Expected '('."
2d215     00          | 	byte	0
2d216                 | LR__5045
2d216     45 78 70 65 
2d21a     63 74 65 64 
2d21e     20 27 29 27 
2d222     20 6F 72 20 
2d226     27 2C 27 2E | 	byte	"Expected ')' or ','."
2d22a     00          | 	byte	0
2d22b                 | LR__5046
2d22b     4E 6F 20 6D 
2d22f     6F 72 65 20 
2d233     74 68 61 6E 
2d237     20 33 20 64 
2d23b     69 6D 65 6E 
2d23f     73 69 6F 6E 
2d243     73 20 73 75 
2d247     70 70 6F 72 
2d24b     74 65 64    | 	byte	"No more than 3 dimensions supported"
2d24e     00          | 	byte	0
2d24f                 | LR__5047
2d24f     56 61 72 69 
2d253     61 62 6C 65 
2d257     20 6E 61 6D 
2d25b     65 20 65 78 
2d25f     70 65 63 74 
2d263     65 64       | 	byte	"Variable name expected"
2d265     00          | 	byte	0
2d266                 | LR__5048
2d266     54 79 70 65 
2d26a     20 6E 61 6D 
2d26e     65 20 65 78 
2d272     70 65 63 74 
2d276     65 64       | 	byte	"Type name expected"
2d278     00          | 	byte	0
2d279                 | LR__5049
2d279     54 79 70 65 
2d27d     20 6E 6F 74 
2d281     20 73 75 70 
2d285     70 6F 72 74 
2d289     65 64 20 79 
2d28d     65 74       | 	byte	"Type not supported yet"
2d28f     00          | 	byte	0
2d290                 | LR__5050
2d290     41 72 72 61 
2d294     79 20 69 6E 
2d298     64 65 78 20 
2d29c     6F 75 74 20 
2d2a0     6F 66 20 72 
2d2a4     61 6E 67 65 | 	byte	"Array index out of range"
2d2a8     00          | 	byte	0
2d2a9                 | LR__5051
2d2a9     45 72 72 6F 
2d2ad     72 20       | 	byte	"Error "
2d2af     00          | 	byte	0
2d2b0                 | LR__5052
2d2b0     3A 20       | 	byte	": "
2d2b2     00          | 	byte	0
2d2b3                 | LR__5053
2d2b3     2F 73 64    | 	byte	"/sd"
2d2b6     00          | 	byte	0
2d2b7                 | LR__5054
2d2b7     2F 73 64 2F 
2d2bb     62 61 73    | 	byte	"/sd/bas"
2d2be     00          | 	byte	0
2d2bf                 | LR__5055
2d2bf     2F 73 64 2F 
2d2c3     62 61 73    | 	byte	"/sd/bas"
2d2c6     00          | 	byte	0
2d2c7                 | LR__5056
2d2c7     20 42 41 53 
2d2cb     49 43 20 62 
2d2cf     79 74 65 73 
2d2d3     20 66 72 65 
2d2d7     65          | 	byte	" BASIC bytes free"
2d2d8     00          | 	byte	0
2d2d9                 | LR__5057
2d2d9     52 65 61 64 
2d2dd     79          | 	byte	"Ready"
2d2de     00          | 	byte	0
2d2df                 | LR__5058
2d2df     6E 6F 6E 61 
2d2e3     6D 65 2E 62 
2d2e7     61 73       | 	byte	"noname.bas"
2d2e9     00          | 	byte	0
2d2ea                 | LR__5059
2d2ea                 | 	byte	
2d2ea     00          | 	byte	0
2d2eb                 | LR__5060
2d2eb                 | 	byte	
2d2eb     00          | 	byte	0
2d2ec                 | LR__5061
2d2ec     20          | 	byte	" "
2d2ed     00          | 	byte	0
2d2ee                 | LR__5062
2d2ee     20          | 	byte	" "
2d2ef     00          | 	byte	0
2d2f0                 | LR__5063
2d2f0                 | 	byte	
2d2f0     00          | 	byte	0
2d2f1     00 00 00    | 	alignl
2d2f4                 | _dat_
2d2f4     00 00 00 00 
2d2f8     00 00 00 00 
2d2fc     00 00 00 00 
2d300     00 00 00 00 | 	byte	$00[16]
2d304     61 41 17 0E 
2d308     62 42 00 00 
2d30c     63 43 19 10 
2d310     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2d314     65 45 18 0F 
2d318     66 46 00 00 
2d31c     67 47 00 00 
2d320     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2d324     69 49 00 00 
2d328     6A 4A 00 00 
2d32c     6B 4B 00 00 
2d330     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2d334     6D 4D 00 00 
2d338     6E 4E 1A 11 
2d33c     6F 4F 1E 15 
2d340     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2d344     71 51 00 00 
2d348     72 52 00 00 
2d34c     73 53 1B 12 
2d350     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
2d354     75 55 00 00 
2d358     76 56 00 00 
2d35c     77 57 00 00 
2d360     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2d364     79 59 00 00 
2d368     7A 5A 1D 14 
2d36c     31 21 04 00 
2d370     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2d374     33 23 06 00 
2d378     34 24 07 00 
2d37c     35 25 08 00 
2d380     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2d384     37 26 0A 00 
2d388     38 2A 0B 00 
2d38c     39 28 0C 00 
2d390     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2d394     8D 8D 00 00 
2d398     9B 9B 00 00 
2d39c     88 88 00 00 
2d3a0     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2d3a4     20 20 00 00 
2d3a8     2D 5F 00 00 
2d3ac     3D 2B 00 00 
2d3b0     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2d3b4     5D 7D 00 00 
2d3b8     5C 7C 00 00 
2d3bc     23 7E 00 00 
2d3c0     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2d3c4     27 22 00 00 
2d3c8     60 7E 03 00 
2d3cc     2C 3C 00 00 
2d3d0     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2d3d4     2F 3F 00 00 
2d3d8     B9 B9 00 00 
2d3dc     BA 00 00 00 
2d3e0     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2d3e4     BC 00 00 00 
2d3e8     BD 00 00 00 
2d3ec     BE 00 00 00 
2d3f0     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2d3f4     C0 00 00 00 
2d3f8     C1 00 00 00 
2d3fc     C2 00 00 00 
2d400     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2d404     C4 00 00 00 
2d408     C5 00 00 00 
2d40c     C6 00 00 00 
2d410     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2d414     C8 00 00 00 
2d418     C9 00 00 00 
2d41c     CA 00 00 00 
2d420     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2d424     7F 7F 00 00 
2d428     CC 00 00 00 
2d42c     CD 00 00 00 
2d430     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2d434     CF 00 00 00 
2d438     D0 00 00 00 
2d43c     D1 00 00 00 
2d440     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2d444     2F 2F 00 00 
2d448     2A 2A 00 00 
2d44c     2D 2D 00 00 
2d450     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
2d454     8D 8D 00 00 
2d458     31 31 00 00 
2d45c     32 32 00 00 
2d460     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2d464     34 34 00 00 
2d468     35 35 00 00 
2d46c     36 36 00 00 
2d470     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2d474     38 38 00 00 
2d478     39 39 00 00 
2d47c     30 30 00 00 
2d480     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2d484     5C 7C 00 00 
2d488     00 00 00 00 
2d48c     00 00 00 00 
2d490     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2d494     00 00 00 00 
      ...             
2d4ec     00 00 00 00 
2d4f0     00 00 00 00 | 	byte	$00[96]
2d4f4     2B 00 A6 F2 
2d4f8     24 A7 09 80 
2d4fc     5B 88 4D 89 
2d500     80 88 A5 88 | atari_spl file "atari.spl"
2d504     6D 88 B8 88 
2d508     80 88 CB 88 
2d50c     92 88 A5 88 
2d510     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2d514     A5 88 CA 88 
2d518     A6 88 DD 88 
2d51c     B8 88 AB 89 
2d520     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2d524     C8 AD C6 F1 
2d528     91 06 B6 FF 
2d52c     13 00 4A 00 
2d530     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2d534     5D 00 5E 00 
2d538     5D 00 5E 00 
2d53c     5E 00 5D 00 
2d540     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2d544     38 00 83 00 
2d548     25 00 83 00 
2d54c     C3 FE D1 04 
2d550     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
2d554     48 88 38 85 
2d558     41 8A CB 88 
2d55c     28 89 B8 88 
2d560     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2d564     15 89 03 89 
2d568     02 89 15 89 
2d56c     16 89 15 89 
2d570     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2d574     15 89 3A 89 
2d578     72 89 E3 89 
2d57c     52 83 AD 97 
2d580     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2d584     0C 02 B6 FF 
2d588     E1 00 A8 00 
2d58c     F3 00 A8 00 
2d590     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2d594     CE 00 CD 00 
2d598     CD 00 BA 00 
2d59c     E1 00 BB 00 
2d5a0     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2d5a4     DF 00 C9 FF 
2d5a8     E6 01 B6 06 
2d5ac     EE DD 8D 98 
2d5b0     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2d5b4     97 89 73 89 
2d5b8     3B 89 60 89 
2d5bc     60 89 60 89 
2d5c0     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2d5c4     73 89 72 89 
2d5c8     85 89 73 89 
2d5cc     AA 89 60 89 
2d5d0     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2d5d4     E8 8A 18 86 
2d5d8     92 88 A5 C2 
2d5dc     E0 00 C3 05 
2d5e0     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2d5e4     F2 00 64 01 
2d5e8     06 01 3E 01 
2d5ec     2B 01 2B 01 
2d5f0     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2d5f4     2B 01 2A 01 
2d5f8     2B 01 2B 01 
2d5fc     2B 01 18 01 
2d600     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2d604     39 07 61 F3 
2d608     C0 AF 37 85 
2d60c     0F 88 8B 8A 
2d610     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2d614     AB 89 D0 89 
2d618     AB 89 D0 89 
2d61c     D0 89 CF 89 
2d620     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2d624     D0 89 F5 89 
2d628     BD 89 08 8A 
2d62c     CF 89 E8 8A 
2d630     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2d634     53 B3 0D F8 
2d638     F4 07 38 00 
2d63c     63 01 63 01 
2d640     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
2d644     88 01 88 01 
2d648     76 01 88 01 
2d64c     88 01 89 01 
2d650     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
2d654     75 01 AE 01 
2d658     76 01 88 01 
2d65c     4A 00 46 06 
2d660     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
2d664     08 8A 9A 86 
2d668     33 8B 08 8A 
2d66c     2D 8A F5 89 
2d670     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
2d674     2D 8A 2D 8A 
2d678     2E 8A 1B 8A 
2d67c     40 8A 2D 8A 
2d680     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
2d684     2E 8A 79 8A 
2d688     66 8A C8 8B 
2d68c     72 82 2B 97 
2d690     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
2d694     1D 02 05 01 
2d698     F8 01 C0 01 
2d69c     0B 02 C0 01 
2d6a0     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2d6a4     F9 01 D3 01 
2d6a8     F8 01 D3 01 
2d6ac     F8 01 D2 01 
2d6b0     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2d6b4     E6 01 2B 01 
2d6b8     8E 02 5F 07 
2d6bc     F7 E2 ED 9C 
2d6c0     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2d6c4     E8 8A 78 8A 
2d6c8     78 8A 65 8A 
2d6cc     8B 8A 78 8A 
2d6d0     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2d6d4     8B 8A 9D 8A 
2d6d8     9D 8A 8B 8A 
2d6dc     C2 8A 78 8A 
2d6e0     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2d6e4     70 8C 18 86 
2d6e8     8B 8A 23 C9 
2d6ec     CB 03 C4 05 
2d6f0     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2d6f4     0B 02 7B 02 
2d6f8     1E 02 55 02 
2d6fc     30 02 43 02 
2d700     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2d704     43 02 44 02 
2d708     43 02 30 02 
2d70c     68 02 31 02 
2d710     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2d714     07 08 3F F7 
2d718     73 B2 13 85 
2d71c     15 89 ED 8B 
2d720     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2d724     B0 8A FB 8A 
2d728     D5 8A FA 8A 
2d72c     E8 8A FB 8A 
2d730     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2d734     E8 8A 21 8B 
2d738     E7 8A 33 8B 
2d73c     E8 8A 26 8C 
2d740     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
2d744     8D B0 27 F6 
2d748     9C 08 AD 01 
2d74c     7B 02 8D 02 
2d750     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
2d754     A1 02 A0 02 
2d758     A1 02 A0 02 
2d75c     A0 02 A0 02 
2d760     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
2d764     7B 02 D8 02 
2d768     7B 02 C6 02 
2d76c     3E 01 C3 05 
2d770     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
2d774     00 8C 2A 86 
2d778     E0 8C FA 8A 
2d77c     6A 8B FB 8A 
2d780     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
2d784     45 8B 45 8B 
2d788     45 8B 6B 8B 
2d78c     46 8B 59 8B 
2d790     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
2d794     6B 8B 6B 8B 
2d798     6B 8B 6B 8B 
2d79c     7D 8B 7D 8B 
2d7a0     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
2d7a4     90 8B 91 8B 
2d7a8     90 8B 90 8B 
2d7ac     A3 8B A3 8B 
2d7b0     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
2d7b4     B5 8B B6 8B 
2d7b8     B5 8B B5 8B 
2d7bc     B6 8B C8 8B 
2d7c0     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2d7c4     C8 8B DA 8B 
2d7c8     DB 8B DB 8B 
2d7cc     DB 8B DC 8B 
2d7d0     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2d7d4     EE 8B EE 8B 
2d7d8     00 8C 01 8C 
2d7dc     00 8C 01 8C 
2d7e0     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2d7e4     12 8C 13 8C 
2d7e8     13 8C 26 8C 
2d7ec     26 8C 26 8C 
2d7f0     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2d7f4     38 8C 38 8C 
2d7f8     38 8C 38 8C 
2d7fc     4B 8C 4B 8C 
2d800     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2d804     5E 8C 5E 8C 
2d808     5E 8C 5E 8C 
2d80c     70 8C 70 8C 
2d810     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2d814     70 8C 83 8C 
2d818     83 8C 83 8C 
2d81c     83 8C 96 8C 
2d820     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2d824     95 8C A9 8C 
2d828     A9 8C A8 8C 
2d82c     A8 8C A8 8C 
2d830     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2d834     BB 8C BB 8C 
2d838     BB 8C CE 8C 
2d83c     CE 8C CE 8C 
2d840     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
2d844     E0 8C E1 8C 
2d848     E1 8C E0 8C 
2d84c     F4 8C F2 8C 
2d850     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
2d854     05 8D 05 8D 
2d858     06 8D 06 8D 
2d85c     19 8D 19 8D 
2d860     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
2d864     18 8D 2B 8D 
2d868     2B 8D 2B 8D 
2d86c     2A 8D 3E 8D 
2d870     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
2d874     3E 8D 51 8D 
2d878     50 8D 50 8D 
2d87c     50 8D 51 8D 
2d880     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
2d884     63 8D 64 8D 
2d888     76 8D 75 8D 
2d88c     75 8D 76 8D 
2d890     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
2d894     88 8D 88 8D 
2d898     89 8D 9B 8D 
2d89c     9A 8D 9B 8D 
2d8a0     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
2d8a4     AD 8D AE 8D 
2d8a8     AD 8D AE 8D 
2d8ac     C1 8D C1 8D 
2d8b0     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
2d8b4     D3 8D D3 8D 
2d8b8     D3 8D D3 8D 
2d8bc     D3 8D E6 8D 
2d8c0     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2d8c4     E6 8D E6 8D 
2d8c8     F9 8D F9 8D 
2d8cc     F9 8D F8 8D 
2d8d0     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2d8d4     0B 8E 0B 8E 
2d8d8     1D 8E 1D 8E 
2d8dc     1E 8E 1E 8E 
2d8e0     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2d8e4     31 8E 31 8E 
2d8e8     31 8E 42 8E 
2d8ec     43 8E 43 8E 
2d8f0     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2d8f4     56 8E 56 8E 
2d8f8     55 8E 56 8E 
2d8fc     68 8E 69 8E 
2d900     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2d904     69 8E 7B 8E 
2d908     7C 8E 7B 8E 
2d90c     7B 8E 8D 8E 
2d910     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2d914     8D 8E A1 8E 
2d918     A0 8E A1 8E 
2d91c     A1 8E A0 8E 
2d920     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2d924     B3 8E B3 8E 
2d928     C6 8E C5 8E 
2d92c     C6 8E C6 8E 
2d930     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2d934     D8 8E D9 8E 
2d938     D8 8E EC 8E 
2d93c     EB 8E EC 8E 
2d940     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
2d944     FE 8E FE 8E 
2d948     FE 8E FE 8E 
2d94c     10 8F 10 8F 
2d950     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
2d954     11 8F 23 8F 
2d958     24 8F 23 8F 
2d95c     24 8F 37 8F 
2d960     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
2d964     36 8F 36 8F 
2d968     48 8F 49 8F 
2d96c     49 8F 49 8F 
2d970     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
2d974     5B 8F 5C 8F 
2d978     5B 8F 6E 8F 
2d97c     6E 8F 6E 8F 
2d980     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
2d984     81 8F 81 8F 
2d988     81 8F 81 8F 
2d98c     93 8F 93 8F 
2d990     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
2d994     93 8F A6 8F 
2d998     A6 8F A6 8F 
2d99c     A6 8F B9 8F 
2d9a0     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
2d9a4     B9 8F B9 8F 
2d9a8     CC 8F CB 8F 
2d9ac     CB 8F CC 8F 
2d9b0     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
2d9b4     DF 8F DE 8F 
2d9b8     DE 8F F1 8F 
2d9bc     F1 8F F1 8F 
2d9c0     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2d9c4     03 90 04 90 
2d9c8     04 90 04 90 
2d9cc     16 90 17 90 
2d9d0     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2d9d4     29 90 28 90 
2d9d8     29 90 28 90 
2d9dc     29 90 3C 90 
2d9e0     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2d9e4     3C 90 4F 90 
2d9e8     4E 90 4E 90 
2d9ec     4E 90 4E 90 
2d9f0     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2d9f4     61 90 61 90 
2d9f8     73 90 74 90 
2d9fc     74 90 74 90 
2da00     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2da04     87 90 86 90 
2da08     87 90 86 90 
2da0c     99 90 99 90 
2da10     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2da14     AB 90 AB 90 
2da18     AC 90 AB 90 
2da1c     AB 90 BF 90 
2da20     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2da24     BE 90 D1 90 
2da28     D0 90 D1 90 
2da2c     D1 90 D1 90 
2da30     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2da34     E3 90 E4 90 
2da38     F6 90 F6 90 
2da3c     F6 90 F6 90 
2da40     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
2da44     09 91 0A 91 
2da48     0A 91 1C 91 
2da4c     1C 91 1C 91 
2da50     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
2da54     2F 91 2E 91 
2da58     2F 91 2F 91 
2da5c     2E 91 41 91 
2da60     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
2da64     41 91 53 91 
2da68     54 91 54 91 
2da6c     53 91 54 91 
2da70     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
2da74     67 91 67 91 
2da78     79 91 7A 91 
2da7c     79 91 78 91 
2da80     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
2da84     8C 91 8B 91 
2da88     8C 91 8C 91 
2da8c     9E 91 9E 91 
2da90     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
2da94     B1 91 B1 91 
2da98     B2 91 B1 91 
2da9c     B1 91 C4 91 
2daa0     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
2daa4     C4 91 D6 91 
2daa8     D7 91 D7 91 
2daac     D7 91 D6 91 
2dab0     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
2dab4     EA 91 EA 91 
2dab8     EA 91 FC 91 
2dabc     FC 91 FB 91 
2dac0     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2dac4     0E 92 0F 92 
2dac8     0F 92 0E 92 
2dacc     21 92 21 92 
2dad0     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2dad4     21 92 34 92 
2dad8     33 92 34 92 
2dadc     34 92 47 92 
2dae0     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2dae4     46 92 47 92 
2dae8     59 92 59 92 
2daec     59 92 59 92 
2daf0     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2daf4     6C 92 6C 92 
2daf8     6B 92 7E 92 
2dafc     7E 92 7E 92 
2db00     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2db04     92 92 91 92 
2db08     91 92 90 92 
2db0c     91 92 A4 92 
2db10     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2db14     A3 92 B6 92 
2db18     B6 92 B7 92 
2db1c     B7 92 B6 92 
2db20     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2db24     CA 92 C9 92 
2db28     CA 92 DC 92 
2db2c     DC 92 DC 92 
2db30     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2db34     EF 92 EF 92 
2db38     EF 92 EF 92 
2db3c     01 93 01 93 
2db40     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2db44     15 93 14 93 
2db48     14 93 14 93 
2db4c     14 93 27 93 
2db50     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2db54     27 93 39 93 
2db58     3A 93 39 93 
2db5c     39 93 39 93 
2db60     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2db64     4B 93 4C 93 
2db68     5F 93 5F 93 
2db6c     5F 93 5E 93 
2db70     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
2db74     5F 93 84 93 
2db78     4C 93 96 93 
2db7c     5F 93 AE 94 
2db80     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
2db84     7B C1 00 00 
2db88     00 00 00 00 
2db8c     00 00 00 00 
2db90     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2db94     00 00 00 00 | 	byte	$00, $00, $00, $00
2db98     00 00 00 00 | zero long 0
2db9c     7A D7 00 80 
2dba0     87 8A 48 8F 
2dba4     EC 8C 76 8D 
2dba8     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
2dbac     3C 8D 82 8D 
2dbb0     42 8D 88 8D 
2dbb4     8C 8D 8E 8D 
2dbb8     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
2dbbc     97 8D DE 8D 
2dbc0     E1 8D F1 8E 
2dbc4     D8 8C A3 83 
2dbc8     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
2dbcc     65 71 C9 65 
2dbd0     FC 64 C4 65 
2dbd4     C1 65 BF 65 
2dbd8     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
2dbdc     B6 65 B4 65 
2dbe0     B2 65 AE 65 
2dbe4     AC 65 ED 65 
2dbe8     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
2dbec     5E 65 25 66 
2dbf0     FA 62 23 6B 
2dbf4     B5 6C 61 0A 
2dbf8     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
2dbfc     5D 90 BE 8D 
2dc00     47 8E C3 8D 
2dc04     09 8E C9 8D 
2dc08     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
2dc0c     15 8E 19 8E 
2dc10     1B 8E 62 8E 
2dc14     64 8E 68 8E 
2dc18     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
2dc1c     B5 8E 4C 90 
2dc20     FA 84 3C 9D 
2dc24     98 13 79 6D 
2dc28     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
2dc2c     D9 66 50 66 
2dc30     D4 66 4B 66 
2dc34     8C 66 46 66 
2dc38     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
2dc3c     81 66 3A 66 
2dc40     7C 66 36 66 
2dc44     76 66 30 66 
2dc48     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
2dc4c     6B 66 88 72 
2dc50     BF 37 E7 B7 
2dc54     75 83 8B 8E 
2dc58     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
2dc5c     94 8E 96 8E 
2dc60     DD 8E 9C 8E 
2dc64     E2 8E A2 8E 
2dc68     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
2dc6c     EE 8E AE 8E 
2dc70     38 8F B5 8E 
2dc74     3F 8F FD 8E 
2dc78     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
2dc7c     A5 87 1E E3 
2dc80     6D 5D FA 71 
2dc84     41 64 25 67 
2dc88     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
2dc8c     D9 66 1A 67 
2dc90     18 67 15 67 
2dc94     12 67 0F 67 
2dc98     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
2dc9c     07 67 C0 66 
2dca0     01 67 BC 66 
2dca4     B8 66 DE 64 
2dca8     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
2dcac     43 E5 1F 8B 
2dcb0     14 8A F1 90 
2dcb4     1C 8F 63 8F 
2dcb8     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
2dcbc     29 8F 6E 8F 
2dcc0     72 8F 75 8F 
2dcc4     34 8F BE 8F 
2dcc8     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
2dccc     84 8F 87 8F 
2dcd0     CC 8F 56 90 
2dcd4     67 91 49 80 
2dcd8     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
2dcdc     46 77 A6 66 
2dce0     E8 66 B0 67 
2dce4     AD 67 ED 67 
2dce8     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
2dcec     A2 67 E3 67 
2dcf0     9D 67 9A 67 
2dcf4     98 67 94 67 
2dcf8     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
2dcfc     49 67 CD 67 
2dd00     28 65 5F 6E 
2dd04     82 67 3A 01 
2dd08     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
2dd0c     C2 91 A9 8F 
2dd10     EF 8F AE 8F 
2dd14     F4 8F B5 8F 
2dd18     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
2dd1c     01 90 03 90 
2dd20     07 90 09 90 
2dd24     0C 90 53 90 
2dd28     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
2dd2c     18 90 44 93 
2dd30     85 84 D6 9D 
2dd34     87 1F 2F 75 
2dd38     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
2dd3c     C4 68 F6 67 
2dd40     BE 68 F1 67 
2dd44     76 68 2E 68 
2dd48     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
2dd4c     27 68 24 68 
2dd50     64 68 1E 68 
2dd54     5F 68 19 68 
2dd58     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
2dd5c     DC 68 56 72 
2dd60     7E 36 C2 B8 
2dd64     D7 84 73 90 
2dd68     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
2dd6c     7B 90 7F 90 
2dd70     82 90 84 90 
2dd74     CB 90 8B 90 
2dd78     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
2dd7c     D7 90 96 90 
2dd80     20 91 59 90 
2dd84     25 91 A2 90 
2dd88     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
2dd8c     D0 89 40 EE 
2dd90     12 64 C4 71 
2dd94     29 66 0C 69 
2dd98     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
2dd9c     C0 68 02 69 
2dda0     FE 68 FB 68 
2dda4     F9 68 F6 68 
2dda8     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
2ddac     EE 68 A8 68 
2ddb0     2C 69 5F 68 
2ddb4     E2 68 81 66 
2ddb8     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
2ddbc     1E EB A6 8A 
2ddc0     73 8B 5E 93 
2ddc4     7B 90 48 91 
2ddc8     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
2ddcc     0D 91 11 91 
2ddd0     14 91 16 91 
2ddd4     5C 91 1C 91 
2ddd8     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
2dddc     68 91 AF 91 
2dde0     2A 91 B5 91 
2dde4     75 91 1A 94 
2dde8     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
2ddec     70 0E CB 6C 
2ddf0     5D 6E C4 67 
2ddf4     99 69 54 69 
2ddf8     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2ddfc     D2 69 49 69 
2de00     89 69 86 69 
2de04     40 69 C4 69 
2de08     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
2de0c     35 69 76 69 
2de10     58 67 EB 6D 
2de14     E9 6D 89 0F 
2de18     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
2de1c     33 94 94 91 
2de20     D9 91 56 91 
2de24     E0 91 9F 91 
2de28     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
2de2c     EC 91 EE 91 
2de30     F1 91 F4 91 
2de34     F7 91 3D 92 
2de38     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
2de3c     46 92 21 94 
2de40     11 89 A4 9D 
2de44     FD 0E 8F 6C 
2de48     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
2de4c     28 6A E1 69 
2de50     65 6A 1F 6A 
2de54     5F 6A 1A 6A 
2de58     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
2de5c     54 6A 0F 6A 
2de60     4F 6A 09 6A 
2de64     06 6A 03 6A 
2de68     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
2de6c     23 68 69 77 
2de70     3A 4D 38 CA 
2de74     38 86 4E 91 
2de78     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
2de7c     64 92 24 92 
2de80     6A 92 2A 92 
2de84     70 92 30 92 
2de88     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
2de8c     7B 92 7E 92 
2de90     C5 92 84 92 
2de94     CB 92 8A 92 
2de98     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
2de9c     4D 8D F9 E2 
2dea0     97 59 FE 74 
2dea4     DB 68 6D 6A 
2dea8     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
2deac     A8 6A A5 6A 
2deb0     A3 6A 9F 6A 
2deb4     9D 6A 9B 6A 
2deb8     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
2debc     D6 6A 8F 6A 
2dec0     CF 6A 46 6A 
2dec4     CA 6A E1 67 
2dec8     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
2decc     D3 F7 15 92 
2ded0     90 8C BF 94 
2ded4     A6 92 EB 92 
2ded8     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
2dedc     B1 92 F7 92 
2dee0     FA 92 FD 92 
2dee4     00 93 02 93 
2dee8     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
2deec     4F 93 52 93 
2def0     54 93 22 94 
2def4     5A 93 8F 88 
2def8     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
2defc     1C 77 07 6C 
2df00     E8 69 7A 6B 
2df04     34 6B 75 6B 
2df08     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
2df0c     29 6B 26 6B 
2df10     24 6B 21 6B 
2df14     1D 6B 5E 6B 
2df18     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
2df1c     12 6B 52 6B 
2df20     34 69 34 6E 
2df24     BA 73 A4 24 
2df28     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
2df2c     7A 94 B3 93 
2df30     72 93 31 93 
2df34     78 93 7A 93 
2df38     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2df3c     83 93 86 93 
2df40     89 93 D0 93 
2df44     D2 93 D5 93 
2df48     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2df4c     DD 93 40 96 
2df50     30 8B 99 9C 
2df54     52 10 94 71 
2df58     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2df5c     46 6C 79 6B 
2df60     40 6C B7 6B 
2df64     F7 6B B1 6B 
2df68     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
2df6c     EC 6B A5 6B 
2df70     A2 6B 9F 6B 
2df74     9D 6B 9A 6B 
2df78     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
2df7c     C8 6A E4 76 
2df80     20 4B F9 CE 
2df84     2E 8A 1A 92 
2df88     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
2df8c     FB 93 BA 93 
2df90     01 94 03 94 
2df94     4A 94 09 94 
2df98     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
2df9c     55 94 14 94 
2dfa0     9E 94 1A 94 
2dfa4     61 94 20 94 
2dfa8     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
2dfac     3E 87 E5 CD 
2dfb0     5F 50 6C 78 
2dfb4     B5 6A 04 6C 
2dfb8     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
2dfbc     83 6C 7F 6C 
2dfc0     7C 6C 36 6C 
2dfc4     76 6C 74 6C 
2dfc8     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2dfcc     6B 6C 25 6C 
2dfd0     66 6C 1F 6C 
2dfd4     1D 6C 41 6A 
2dfd8     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
2dfdc     BA FA FC 94 
2dfe0     5B 8D 97 96 
2dfe4     3B 94 C5 94 
2dfe8     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2dfec     89 94 8C 94 
2dff0     8F 94 92 94 
2dff4     94 94 DB 94 
2dff8     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2dffc     E4 94 E7 94 
2e000     2D 95 74 95 
2e004     C8 96 15 89 
2e008     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2e00c     CB 75 31 6F 
2e010     7E 6B 10 6D 
2e014     C9 6C 0A 6D 
2e018     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2e01c     BD 6C FF 6C 
2e020     FB 6C F9 6C 
2e024     B2 6C F3 6C 
2e028     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2e02c     A7 6C E8 6C 
2e030     0D 6B 85 6F 
2e034     C7 74 10 28 
2e038     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2e03c     96 96 47 95 
2e040     06 95 0A 95 
2e044     0C 95 0F 95 
2e048     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2e04c     17 95 5E 95 
2e050     61 95 63 95 
2e054     22 95 AC 95 
2e058     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2e05c     72 95 17 98 
2e060     59 8E 01 96 
2e064     CF FC 5A 68 
2e068     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2e06c     96 6D 50 6D 
2e070     D5 6D 4A 6D 
2e074     8C 6D 89 6D 
2e078     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2e07c     80 6D 3A 6D 
2e080     7A 6D 77 6D 
2e084     75 6D 71 6D 
2e088     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
2e08c     18 6C BC 78 
2e090     9A 4F 7E CF 
2e094     1F 89 F1 93 
2e098     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
2e09c     D2 95 4E 95 
2e0a0     D7 95 53 95 
2e0a4     DD 95 E0 95 
2e0a8     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2e0ac     A5 95 EB 95 
2e0b0     EE 95 F0 95 
2e0b4     37 96 B3 95 
2e0b8     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2e0bc     1A 98 D5 8D 
2e0c0     C5 9F CD 0F 
2e0c4     0F 71 F3 73 
2e0c8     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2e0cc     D9 6D 5E 6E 
2e0d0     D3 6D 58 6E 
2e0d4     12 6E 0F 6E 
2e0d8     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
2e0dc     49 6E BF 6D 
2e0e0     87 6E 76 6D 
2e0e4     81 6E 11 6B 
2e0e8     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2e0ec     3F 09 44 95 
2e0f0     E5 8D 3F 99 
2e0f4     D4 95 A2 96 
2e0f8     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2e0fc     23 96 69 96 
2e100     6B 96 6E 96 
2e104     71 96 74 96 
2e108     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2e10c     BF 96 3C 96 
2e110     C6 96 C8 96 
2e114     A3 98 51 8D 
2e118     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2e11c     CF 75 29 73 
2e120     90 6C EC 6E 
2e124     62 6E E7 6E 
2e128     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2e12c     9A 6E 98 6E 
2e130     95 6E 91 6E 
2e134     8E 6E CF 6E 
2e138     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2e13c     40 6E C3 6E 
2e140     E8 6C 45 6F 
2e144     A5 7B C9 35 
2e148     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2e14c     2D 98 23 97 
2e150     E1 96 A0 96 
2e154     A4 96 EA 96 
2e158     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2e15c     AF 96 F4 96 
2e160     F8 96 3E 97 
2e164     FD 96 43 97 
2e168     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2e16c     08 97 6B 99 
2e170     D6 92 88 91 
2e174     D8 EE 84 66 
2e178     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2e17c     2E 6F E7 6E 
2e180     6C 6F 24 6F 
2e184     21 6F 1F 6F 
2e188     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2e18c     17 6F 13 6F 
2e190     54 6F 0E 6F 
2e194     0B 6F 4B 6F 
2e198     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2e19c     27 6D 1C 7B 
2e1a0     19 59 9F DB 
2e1a4     66 8E BC 94 
2e1a8     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2e1ac     67 97 26 97 
2e1b0     6D 97 2B 97 
2e1b4     72 97 32 97 
2e1b8     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2e1bc     C1 97 7F 97 
2e1c0     C6 97 85 97 
2e1c4     CB 97 CE 97 
2e1c8     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2e1cc     EC 8A C4 C6 
2e1d0     68 4C F4 7D 
2e1d4     63 6E E8 6E 
2e1d8     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
2e1dc     ED 6F A7 6F 
2e1e0     E7 6F A0 6F 
2e1e4     E1 6F 9B 6F 
2e1e8     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2e1ec     D5 6F 8F 6F 
2e1f0     CE 6F 45 6F 
2e1f4     86 6F 68 6D 
2e1f8     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2e1fc     C0 13 AD A2 
2e200     A7 8E 79 99 
2e204     E6 97 E8 97 
2e208     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
2e20c     F1 97 F3 97 
2e210     F6 97 F9 97 
2e214     FB 97 FE 97 
2e218     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
2e21c     4A 98 0A 98 
2e220     93 98 0F 98 
2e224     7F 9B BF 8C 
2e228     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
2e22c     91 7B 62 73 
2e230     1A 6E B9 70 
2e234     EB 6F B3 70 
2e238     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2e23c     25 70 20 70 
2e240     1E 70 1B 70 
2e244     18 70 15 70 
2e248     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2e24c     0D 70 09 70 
2e250     07 70 03 70 
2e254     01 70 FD 6F 
2e258     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2e25c     F6 6F F2 6F 
2e260     EF 6F EC 6F 
2e264     2C 70 E6 6F 
2e268     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2e26c     DD 6F 97 6F 
2e270     D7 6F 84 6E 
2e274     8F 6F 3F 7D 
2e278     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2e27a     00 00 00 00 | zero1 long 0
2e27e     FF FF FF FF 
2e282     FF FF       | atarist_spl file "atarist.spl" '512
2e284     00 00 00 00 
2e288     00 00 00 00 
2e28c     00 00       | 	byte	$00[10]
2e28e     17 7F F2 7F 
2e292     B2 7F 72 7F 
2e296     33 7F F4 7E 
2e29a     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
2e29e     36 7E F5 7D 
2e2a2     E9 51 F2 0D 
2e2a6     8E 00 F3 FD 
2e2aa     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
2e2ae     57 FD 58 FD 
2e2b2     5B FD 5C FD 
2e2b6     5C FD 60 7D 
2e2ba     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
2e2be     D6 7C 98 7C 
2e2c2     59 7C 1A 7C 
2e2c6     DC 7B 9E 7B 
2e2ca     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2e2ce     F3 05 00 FD 
2e2d2     41 FB EA FA 
2e2d6     D9 FA DB FA 
2e2da     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
2e2de     E4 FA 9B 36 
2e2e2     F8 7A C0 7A 
2e2e6     84 7A 45 7A 
2e2ea     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2e2ee     8E 79 51 79 
2e2f2     15 79 D7 78 
2e2f6     3C 1F EB FF 
2e2fa     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2e2fe     6D F8 65 F8 
2e302     68 F8 6D F8 
2e306     70 F8 74 F8 
2e30a     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2e30e     AB 60 79 60 
2e312     4B 60 1A 60 
2e316     E9 5F B9 5F 
2e31a     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2e31e     FB 59 B2 0B 
2e322     92 FA 3A F7 
2e326     96 F6 79 F6 
2e32a     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2e32e     82 F6 86 F6 
2e332     8C F6 DB 5D 
2e336     F1 5E C1 5E 
2e33a     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2e33e     34 5E 04 5E 
2e342     D6 5D A6 5D 
2e346     78 5D D4 3E 
2e34a     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2e34e     27 F5 BA F4 
2e352     AB F4 AD F4 
2e356     B2 F4 B8 F4 
2e35a     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2e35e     26 5D 2B 5D 
2e362     FC 5C CD 5C 
2e366     9F 5C 70 5C 
2e36a     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2e36e     E5 5B B8 5B 
2e372     DB 24 A7 FC 
2e376     D1 F4 4D F3 
2e37a     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2e37e     04 F3 0B F3 
2e382     11 F3 16 F3 
2e386     DE 18 98 5B 
2e38a     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
2e38e     4E 4A 29 48 
2e392     A0 47 6A 47 
2e396     43 47 20 47 
2e39a     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
2e39e     E2 F6 98 F2 
2e3a2     C5 F1 A3 F1 
2e3a6     A3 F1 A8 F1 
2e3aa     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
2e3ae     BF F1 00 3D 
2e3b2     EF 46 CD 46 
2e3b6     AA 46 86 46 
2e3ba     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
2e3be     1C 46 F9 45 
2e3c2     D7 45 EE 43 
2e3c6     DE 02 E8 F3 
2e3ca     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2e3ce     61 F0 65 F0 
2e3d2     6D F0 74 F0 
2e3d6     7C F0 84 F0 
2e3da     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
2e3de     8E 45 6D 45 
2e3e2     49 45 27 45 
2e3e6     05 45 E1 44 
2e3ea     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2e3ee     F1 2F A9 FB 
2e3f2     8B F1 9B EF 
2e3f6     40 EF 36 EF 
2e3fa     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2e3fe     4D EF 56 EF 
2e402     5E EF 7B 44 
2e406     8C 44 69 44 
2e40a     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2e40e     03 44 E1 43 
2e412     C0 43 F5 37 
2e416     69 33 0F 11 
2e41a     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2e41e     66 EE 37 EE 
2e422     38 EE 40 EE 
2e426     48 EE 51 EE 
2e42a     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2e42e     7D 32 6A 32 
2e432     51 32 37 32 
2e436     1F 32 05 32 
2e43a     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2e43e     B9 31 A1 31 
2e442     F1 04 F4 F1 
2e446     50 EE A0 ED 
2e44a     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2e44e     93 ED 9A ED 
2e452     A4 ED AD ED 
2e456     F4 27 C1 31 
2e45a     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2e45e     78 31 5F 31 
2e462     46 31 2E 31 
2e466     15 31 FC 30 
2e46a     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2e46e     C4 EF 4A ED 
2e472     DC EC CB EC 
2e476     D2 EC DA EC 
2e47a     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2e47e     F9 EC 64 2F 
2e482     0A 31 F1 30 
2e486     D9 30 C0 30 
2e48a     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2e48e     78 30 5F 30 
2e492     46 30 38 23 
2e496     A6 F6 19 EE 
2e49a     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
2e49e     20 EC 28 EC 
2e4a2     32 EC 3C EC 
2e4a6     47 EC 51 EC 
2e4aa     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
2e4ae     A3 22 93 22 
2e4b2     7F 22 6E 22 
2e4b6     5D 22 4C 22 
2e4ba     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
2e4be     77 09 76 F1 
2e4c2     CC EC F0 EB 
2e4c6     CD EB CE EB 
2e4ca     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
2e4ce     ED EB F5 EB 
2e4d2     3E F6 6B 22 
2e4d6     5F 22 4E 22 
2e4da     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
2e4de     1B 22 0B 22 
2e4e2     FA 21 E9 21 
2e4e6     D8 21 4D FF 
2e4ea     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2e4ee     92 EB 7B EB 
2e4f2     82 EB 8C EB 
2e4f6     97 EB A1 EB 
2e4fa     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
2e4fe     15 22 04 22 
2e502     F3 21 E3 21 
2e506     D2 21 C0 21 
2e50a     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
2e50e     8E 21 7D 21 
2e512     9A F8 A4 ED 
2e516     8E EB 2F EB 
2e51a     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
2e51e     37 EB 42 EB 
2e522     4C EB 57 EB 
2e526     B2 17 22 19 
2e52a     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
2e52e     FD 18 EF 18 
2e532     E3 18 D6 18 
2e536     CA 18 BD 18 
2e53a     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2e53e     60 EC 35 EB 
2e542     01 EB 01 EB 
2e546     0C EB 16 EB 
2e54a     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2e54e     34 EB D0 18 
2e552     00 19 F4 18 
2e556     E8 18 DA 18 
2e55a     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2e55e     B6 18 A9 18 
2e562     9D 18 91 05 
2e566     F0 EF CA EB 
2e56a     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
2e56e     E8 EA F2 EA 
2e572     FE EA 07 EB 
2e576     12 EB C2 EF 
2e57a     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
2e57e     D9 18 CD 18 
2e582     C0 18 B3 18 
2e586     A7 18 9B 18 
2e58a     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
2e58e     B8 FC 30 EE 
2e592     61 EB DC EA 
2e596     CD EA D2 EA 
2e59a     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
2e59e     F3 EA FE EA 
2e5a2     D2 09 D1 18 
2e5a6     C3 18 17 18 
2e5aa     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
2e5ae     66 11 52 11 
2e5b2     49 11 41 11 
2e5b6     38 11 E0 F4 
2e5ba     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
2e5be     C9 EA C5 EA 
2e5c2     CF EA DB EA 
2e5c6     E6 EA EF EA 
2e5ca     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
2e5ce     89 11 80 11 
2e5d2     78 11 6E 11 
2e5d6     67 11 5D 11 
2e5da     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
2e5de     43 11 32 0D 
2e5e2     9C F1 07 EC 
2e5e6     F8 EA CD EA 
2e5ea     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
2e5ee     E4 EA ED EA 
2e5f2     F8 EA 02 EB 
2e5f6     55 11 91 11 
2e5fa     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
2e5fe     75 11 6E 11 
2e602     64 11 5E 11 
2e606     54 11 4A 11 
2e60a     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
2e60e     A8 EB F1 EA 
2e612     D9 EA DC EA 
2e616     E8 EA F1 EA 
2e61a     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
2e61e     A6 EB 9E 11 
2e622     A0 11 96 11 
2e626     8D 11 85 11 
2e62a     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
2e62e     6A 11 CA 0D 
2e632     36 0B 57 F8 
2e636     6C ED 57 EB 
2e63a     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2e63e     F4 EA FF EA 
2e642     09 EB 15 EB 
2e646     1E EB 1A FD 
2e64a     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2e64e     ED 0A E8 0A 
2e652     E2 0A DC 0A 
2e656     D6 0A D1 0A 
2e65a     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2e65e     F8 F3 BC EC 
2e662     57 EB 1E EB 
2e666     18 EB 24 EB 
2e66a     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2e66e     42 EB 4D EB 
2e672     08 09 20 0B 
2e676     1A 0B 14 0B 
2e67a     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2e67e     04 0B FE 0A 
2e682     F9 0A F2 0A 
2e686     84 08 3A F1 
2e68a     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
2e68e     42 EB 42 EB 
2e692     4E EB 57 EB 
2e696     62 EB 6B EB 
2e69a     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
2e69e     48 0B 43 0B 
2e6a2     3C 0B 36 0B 
2e6a6     31 0B 2C 0B 
2e6aa     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
2e6ae     1B 0B 5C 00 
2e6b2     6A EF 1B EC 
2e6b6     81 EB 6A EB 
2e6ba     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
2e6be     85 EB 8E EB 
2e6c2     99 EB A3 EB 
2e6c6     DD 05 E5 05 
2e6ca     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2e6ce     DB 05 D8 05 
2e6d2     D5 05 D1 05 
2e6d6     D0 05 CB 05 
2e6da     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
2e6de     0C EC BB EB 
2e6e2     B3 EB BB EB 
2e6e6     C5 EB D0 EB 
2e6ea     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2e6ee     E4 F7 2C 06 
2e6f2     28 06 24 06 
2e6f6     22 06 1F 06 
2e6fa     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2e6fe     16 06 14 06 
2e702     0F 06 D0 F3 
2e706     65 ED 2D EC 
2e70a     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2e70e     01 EC 0A EC 
2e712     14 EC 1E EC 
2e716     29 EC FB 03 
2e71a     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2e71e     63 06 60 06 
2e722     5E 06 59 06 
2e726     58 06 54 06 
2e72a     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2e72e     69 F1 21 ED 
2e732     55 EC 33 EC 
2e736     36 EC 40 EC 
2e73a     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2e73e     5C EC 68 EC 
2e742     92 02 D9 02 
2e746     D7 02 D7 02 
2e74a     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2e74e     D1 02 D1 02 
2e752     CE 02 CD 02 
2e756     5D FC 80 EF 
2e75a     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2e75e     83 EC 8A EC 
2e762     93 EC 9C EC 
2e766     A5 EC B1 EC 
2e76a     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2e76e     2B 03 2A 03 
2e772     29 03 26 03 
2e776     25 03 24 03 
2e77a     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2e77e     1F 03 70 F7 
2e782     D0 EE 27 ED 
2e786     DB EC D4 EC 
2e78a     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2e78e     F0 EC FA EC 
2e792     02 ED F9 F4 
2e796     7B 03 7C 03 
2e79a     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2e79e     75 03 73 03 
2e7a2     72 03 70 03 
2e7a6     6D 03 6C 03 
2e7aa     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2e7ae     54 ED 22 ED 
2e7b2     22 ED 2C ED 
2e7b6     35 ED 3F ED 
2e7ba     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2e7be     14 01 C3 03 
2e7c2     C1 03 C0 03 
2e7c6     5F 01 A5 00 
2e7ca     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2e7ce     7B 00 7C 00 
2e7d2     20 00 85 F1 
2e7d6     2A EE 89 ED 
2e7da     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2e7de     80 ED 87 ED 
2e7e2     90 ED 9A ED 
2e7e6     A3 ED 73 00 
2e7ea     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2e7ee     D0 00 D0 00 
2e7f2     D0 00 D0 00 
2e7f6     D0 00 CF 00 
2e7fa     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2e7fe     80 F0 3D EE 
2e802     D5 ED C7 ED 
2e806     CD ED D6 ED 
2e80a     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2e80e     F2 ED FA ED 
2e812     1D 01 29 01 
2e816     27 01 27 01 
2e81a     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2e81e     25 01 26 01 
2e822     26 01 23 01 
2e826     D0 F7 EC EF 
2e82a     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2e82e     1C EE 24 EE 
2e832     2D EE 37 EE 
2e836     40 EE 47 EE 
2e83a     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2e83e     7D 01 7B 01 
2e842     7A 01 7A 01 
2e846     79 01 78 01 
2e84a     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2e84e     84 FE DE F3 
2e852     6C EF 93 EE 
2e856     72 EE 72 EE 
2e85a     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2e85e     8B EE 95 EE 
2e862     9E EE 15 FC 
2e866     67 FE 67 FE 
2e86a     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2e86e     6B FE 6B FE 
2e872     6D FE 6D FE 
2e876     6D FE 6F FE 
2e87a     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2e87e     DF EE CC EE 
2e882     CF EE D9 EE 
2e886     E1 EE EA EE 
2e88a     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2e88e     5A FE C4 FE 
2e892     C3 FE C5 FE 
2e896     C6 FE C6 FE 
2e89a     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2e89e     C8 FE C7 FE 
2e8a2     DA FB 85 F1 
2e8a6     8D EF 31 EF 
2e8aa     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2e8ae     34 EF 3E EF 
2e8b2     46 EF 4F EF 
2e8b6     57 EF 0D FF 
2e8ba     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2e8be     1F FF 1F FF 
2e8c2     21 FF 21 FF 
2e8c6     21 FF 21 FF 
2e8ca     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2e8ce     15 F1 BE EF 
2e8d2     84 EF 7E EF 
2e8d6     88 EF 8F EF 
2e8da     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2e8de     A9 EF 06 F2 
2e8e2     A6 FC AB FC 
2e8e6     AD FC AE FC 
2e8ea     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2e8ee     B2 FC B4 FC 
2e8f2     B6 FC B7 FC 
2e8f6     8B F4 BD F0 
2e8fa     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2e8fe     E4 EF EE EF 
2e902     F6 EF FD EF 
2e906     04 F0 0E F0 
2e90a     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2e90e     0B FD 0D FD 
2e912     0F FD 11 FD 
2e916     11 FD 13 FD 
2e91a     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2e91e     17 FD 64 F3 
2e922     CD F0 52 F0 
2e926     41 F0 45 F0 
2e92a     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2e92e     5B F0 64 F0 
2e932     6D F0 FB FC 
2e936     65 FD 68 FD 
2e93a     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2e93e     6C FD 6D FD 
2e942     6F FD 70 FD 
2e946     72 FD B3 FB 
2e94a     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2e94e     A4 F0 99 F0 
2e952     A0 F0 A8 F0 
2e956     AE F0 B9 F0 
2e95a     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2e95e     CB FB DD FB 
2e962     DE FB E0 FB 
2e966     E3 FB E3 FB 
2e96a     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2e96e     E9 FB EC FB 
2e972     62 F7 27 F2 
2e976     2A F1 FF F0 
2e97a     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2e97e     0C F1 13 F1 
2e982     1B F1 23 F1 
2e986     33 F2 3C FC 
2e98a     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2e98e     42 FC 45 FC 
2e992     47 FC 48 FC 
2e996     4A FC 4C FC 
2e99a     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2e99e     20 F2 77 F1 
2e9a2     5C F1 5F F1 
2e9a6     64 F1 6C F1 
2e9aa     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2e9ae     83 F1 DC F8 
2e9b2     9A FC 9A FC 
2e9b6     9B FC 9E FC 
2e9ba     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2e9be     A3 FC A4 FC 
2e9c2     A6 FC A9 FC 
2e9c6     90 F4 33 F2 
2e9ca     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2e9ce     BA F1 BF F1 
2e9d2     C7 F1 CE F1 
2e9d6     D6 F1 DC F1 
2e9da     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2e9de     F3 FC F5 FC 
2e9e2     FE FB 79 FB 
2e9e6     62 FB 5F FB 
2e9ea     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2e9ee     6F FA AF F3 
2e9f2     53 F2 12 F2 
2e9f6     0F F2 15 F2 
2e9fa     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2e9fe     2A F2 32 F2 
2ea02     38 F2 9A FB 
2ea06     AF FB B1 FB 
2ea0a     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2ea0e     B7 FB B8 FB 
2ea12     BA FB BC FB 
2ea16     C1 FB 3B F8 
2ea1a     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2ea1e     6E F2 6C F2 
2ea22     74 F2 7A F2 
2ea26     81 F2 87 F2 
2ea2a     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2ea2e     06 FC 09 FC 
2ea32     0C FC 0E FC 
2ea36     0F FC 12 FC 
2ea3a     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2ea3e     17 FC 1A FC 
2ea42     B2 F6 7B F3 
2ea46     DD F2 C5 F2 
2ea4a     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2ea4e     D4 F2 DB F2 
2ea52     E0 F2 E8 F2 
2ea56     28 F8 60 FC 
2ea5a     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2ea5e     64 FC 66 FC 
2ea62     68 FC 6A FC 
2ea66     6D FC 52 FC 
2ea6a     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2ea6e     78 F3 24 F3 
2ea72     1A F3 1E F3 
2ea76     24 F3 2A F3 
2ea7a     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2ea7e     3D F3 80 FA 
2ea82     0C FB 0F FB 
2ea86     10 FB 14 FB 
2ea8a     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2ea8e     1B FB 1D FB 
2ea92     1F FB 92 FA 
2ea96     DE F4 AE F3 
2ea9a     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2ea9e     79 F3 7E F3 
2eaa2     84 F3 8C F3 
2eaa6     92 F3 97 F3 
2eaaa     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
2eaae     67 FB 69 FB 
2eab2     6B FB 6F FB 
2eab6     71 FB 72 FB 
2eaba     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
2eabe     E3 F8 BA F4 
2eac2     EE F3 CC F3 
2eac6     CA F3 CF F3 
2eaca     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
2eace     E2 F3 E8 F3 
2ead2     ED F3 B7 FB 
2ead6     BC FB BE FB 
2eada     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
2eade     C4 FB C6 FB 
2eae2     C8 FB C9 FB 
2eae6     CC FB 8F F7 
2eaea     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
2eaee     1E F4 1E F4 
2eaf2     24 F4 2A F4 
2eaf6     30 F4 38 F4 
2eafa     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
2eafe     AD FA B1 FA 
2eb02     B4 FA B6 FA 
2eb06     BA FA BB FA 
2eb0a     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
2eb0e     C2 FA C6 FA 
2eb12     55 F6 C6 F4 
2eb16     7D F4 72 F4 
2eb1a     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
2eb1e     83 F4 89 F4 
2eb22     8F F4 94 F4 
2eb26     66 FA 03 FB 
2eb2a     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
2eb2e     0A FB 0E FB 
2eb32     10 FB 11 FB 
2eb36     16 FB 18 FB 
2eb3a     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
2eb3e     F9 F4 CA F4 
2eb42     C5 F4 CB F4 
2eb46     D1 F4 D7 F4 
2eb4a     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
2eb4e     E8 F4 3F FB 
2eb52     56 FB 58 FB 
2eb56     5A FB 5E FB 
2eb5a     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
2eb5e     64 FB 64 FB 
2eb62     69 FB 99 F9 
2eb66     E9 F5 33 F5 
2eb6a     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
2eb6e     1D F5 22 F5 
2eb72     27 F5 2E F5 
2eb76     32 F5 37 F5 
2eb7a     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
2eb7e     BC FA BC FA 
2eb82     C1 FA C2 FA 
2eb86     C4 FA C8 FA 
2eb8a     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
2eb8e     F9 F7 DB F5 
2eb92     78 F5 69 F5 
2eb96     6A F5 70 F5 
2eb9a     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
2eb9e     7F F5 85 F5 
2eba2     6E F7 06 FB 
2eba6     0A FB 0B FB 
2ebaa     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
2ebae     14 FB 15 FB 
2ebb2     18 FB 1B FB 
2ebb6     1D FB 70 F7 
2ebba     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
2ebbe     B6 F5 BB F5 
2ebc2     C0 F5 C6 F5 
2ebc6     CA F5 CF F5 
2ebca     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2ebce     54 FB 56 FB 
2ebd2     5A FB 5B FB 
2ebd6     5E FB 5F FB 
2ebda     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2ebde     67 FB 52 FB 
2ebe2     29 F7 33 F6 
2ebe6     06 F6 02 F6 
2ebea     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2ebee     10 F6 16 F6 
2ebf2     1A F6 1F F6 
2ebf6     81 FB 9F FB 
2ebfa     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2ebfe     51 FB F2 FA 
2ec02     E3 FA E3 FA 
2ec06     E5 FA E9 FA 
2ec0a     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2ec0e     64 F6 4D F6 
2ec12     4D F6 53 F6 
2ec16     57 F6 5C F6 
2ec1a     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2ec1e     6A F6 19 FB 
2ec22     1E FB 22 FB 
2ec26     23 FB 24 FB 
2ec2a     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2ec2e     2C FB 2E FB 
2ec32     32 FB F0 F8 
2ec36     01 F7 A5 F6 
2ec3a     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2ec3e     9F F6 A3 F6 
2ec42     A6 F6 AC F6 
2ec46     B0 F6 EB F7 
2ec4a     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2ec4e     68 FB 6C FB 
2ec52     6E FB 71 FB 
2ec56     72 FB 74 FB 
2ec5a     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2ec5e     71 F8 21 F7 
2ec62     E5 F6 DD F6 
2ec66     E1 F6 E6 F6 
2ec6a     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2ec6e     F5 F6 F7 F6 
2ec72     F7 FA AB FB 
2ec76     AD FB AF FB 
2ec7a     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2ec7e     B6 FB B9 FB 
2ec82     BB FB BC FB 
2ec86     21 FB 07 F8 
2ec8a     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2ec8e     22 F7 26 F7 
2ec92     2B F7 2E F7 
2ec96     34 F7 38 F7 
2ec9a     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2ec9e     13 FB 16 FB 
2eca2     17 FB 1B FB 
2eca6     1E FB 20 FB 
2ecaa     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2ecae     26 FB 77 FA 
2ecb2     F3 F7 7C F7 
2ecb6     67 F7 6A F7 
2ecba     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2ecbe     74 F7 7A F7 
2ecc2     7E F7 82 F7 
2ecc6     53 FB 5A FB 
2ecca     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2ecce     5F FB 63 FB 
2ecd2     65 FB 67 FB 
2ecd6     69 FB 6A FB 
2ecda     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2ecde     B5 F7 A9 F7 
2ece2     AD F7 B0 F7 
2ece6     B5 F7 B8 F7 
2ecea     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2ecee     6E F8 99 FB 
2ecf2     9C FB 9D FB 
2ecf6     9F FB A4 FB 
2ecfa     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2ecfe     A9 FB AB FB 
2ed02     AD FB 46 F9 
2ed06     26 F8 F0 F7 
2ed0a     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2ed0e     F4 F7 F8 F7 
2ed12     FB F7 FF F7 
2ed16     03 F8 65 FA 
2ed1a     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2ed1e     2B FB 2F FB 
2ed22     30 FB 32 FB 
2ed26     34 FB 38 FB 
2ed2a     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2ed2e     E9 F8 4A F8 
2ed32     2E F8 2C F8 
2ed36     2F F8 36 F8 
2ed3a     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2ed3e     41 F8 44 F8 
2ed42     4A FB 67 FB 
2ed46     68 FB 6B FB 
2ed4a     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2ed4e     73 FB 74 FB 
2ed52     78 FB 7A FB 
2ed56     14 FB E7 F8 
2ed5a     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2ed5e     6D F8 70 F8 
2ed62     73 F8 78 F8 
2ed66     7C F8 80 F8 
2ed6a     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2ed6e     A6 FB A7 FB 
2ed72     A9 FB AC FB 
2ed76     AF FB B1 FB 
2ed7a     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2ed7e     B7 FB 73 FA 
2ed82     F8 F8 B4 F8 
2ed86     A9 F8 AB F8 
2ed8a     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2ed8e     B4 F8 B8 F8 
2ed92     BB F8 FA F8 
2ed96     64 FB 65 FB 
2ed9a     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2ed9e     6D FB 6F FB 
2eda2     70 FB 74 FB 
2eda6     77 FB 77 FB 
2edaa     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2edae     E9 F8 E4 F8 
2edb2     E8 F8 EB F8 
2edb6     EE F8 F2 F8 
2edba     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2edbe     B5 FA 9F FB 
2edc2     A1 FB A4 FB 
2edc6     A5 FB A9 FB 
2edca     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2edce     AE FB B1 FB 
2edd2     B2 FB C7 F9 
2edd6     39 F9 22 F9 
2edda     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2edde     26 F9 2A F9 
2ede2     2E F9 32 F9 
2ede6     33 F9 BA FB 
2edea     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2edee     DE FB E1 FB 
2edf2     E2 FB E4 FB 
2edf6     E5 FB E7 FB 
2edfa     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2edfe     C5 F9 67 F9 
2ee02     57 F9 56 F9 
2ee06     5B F9 5F F9 
2ee0a     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2ee0e     68 F9 6C F9 
2ee12     0B FC 11 FC 
2ee16     14 FC 15 FC 
2ee1a     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2ee1e     B5 FB B5 FB 
2ee22     B6 FB B8 FB 
2ee26     E9 FA C8 F9 
2ee2a     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2ee2e     90 F9 94 F9 
2ee32     95 F9 99 F9 
2ee36     9D F9 9F F9 
2ee3a     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2ee3e     DE FB DF FB 
2ee42     E2 FB E4 FB 
2ee46     E6 FB E8 FB 
2ee4a     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2ee4e     EF FB AC FA 
2ee52     E9 F9 C7 F9 
2ee56     C3 F9 C8 F9 
2ee5a     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2ee5e     D0 F9 D4 F9 
2ee62     D6 F9 0E FB 
2ee66     11 FC 13 FC 
2ee6a     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2ee6e     19 FC 1B FC 
2ee72     1D FC 1E FC 
2ee76     21 FC 22 FC 
2ee7a     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2ee7e     F7 F9 F7 F9 
2ee82     FB F9 FE F9 
2ee86     00 FA 03 FA 
2ee8a     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2ee8e     1B FC 45 FC 
2ee92     46 FC 48 FC 
2ee96     4A FC 4B FC 
2ee9a     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2ee9e     52 FC 54 FC 
2eea2     F3 FB 82 FA 
2eea6     35 FA 28 FA 
2eeaa     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2eeae     31 FA 32 FA 
2eeb2     37 FA 37 FA 
2eeb6     3C FA 00 FC 
2eeba     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2eebe     09 FC 0B FC 
2eec2     0F FC 12 FC 
2eec6     12 FC 15 FC 
2eeca     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2eece     8D FA 60 FA 
2eed2     5B FA 5C FA 
2eed6     60 FA 61 FA 
2eeda     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2eede     6C FA 6D FA 
2eee2     37 FC 3A FC 
2eee6     3B FC 3D FC 
2eeea     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2eeee     43 FC 44 FC 
2eef2     45 FC 47 FC 
2eef6     51 FB AB FA 
2eefa     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2eefe     8E FA 91 FA 
2ef02     93 FA 95 FA 
2ef06     98 FA 9B FA 
2ef0a     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2ef0e     68 FC 6A FC 
2ef12     6C FC 6E FC 
2ef16     70 FC 72 FC 
2ef1a     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2ef1e     76 FC 3B FB 
2ef22     D0 FA BB FA 
2ef26     B9 FA BD FA 
2ef2a     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2ef2e     C4 FA C6 FA 
2ef32     CA FA 13 FC 
2ef36     3A FC 3A FC 
2ef3a     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2ef3e     41 FC 43 FC 
2ef42     44 FC 47 FC 
2ef46     48 FC 3C FC 
2ef4a     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2ef4e     E6 FA E8 FA 
2ef52     EB FA EE FA 
2ef56     F0 FA F2 FA 
2ef5a     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2ef5e     61 FC 66 FC 
2ef62     68 FC 6B FC 
2ef66     6C FC 6E FC 
2ef6a     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2ef6e     73 FC 75 FC 
2ef72     13 FC 3F FB 
2ef76     17 FB 12 FB 
2ef7a     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2ef7e     1A FB 1D FB 
2ef82     1F FB 20 FB 
2ef86     23 FB 92 FC 
2ef8a     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2ef8e     96 FC 97 FC 
2ef92     9A FC 9C FC 
2ef96     9E FC 9F FC 
2ef9a     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2ef9e     5A FB 41 FB 
2efa2     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2efa6     00 00 00 00 | zero2 long 0
2efaa     01 00 00 00 
2efae     00 00 00 00 
2efb2     00 00 00 00 
2efb6     00 00 00 00 | mouse  file "mouse2.def"
2efba     00 00 00 00 
2efbe     00 00 00 00 
2efc2     00 00 00 00 
2efc6     00 00 00 00 | 	byte	$00[16]
2efca     01 01 00 00 
2efce     00 00 00 00 
2efd2     00 00 00 00 
2efd6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2efda     00 00 00 00 
2efde     00 00 00 00 
2efe2     00 00 00 00 
2efe6     00 00 00 00 | 	byte	$00[16]
2efea     01 0D 01 00 
2efee     00 00 00 00 
2eff2     00 00 00 00 
2eff6     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2effa     00 00 00 00 
2effe     00 00 00 00 
2f002     00 00 00 00 
2f006     00 00 00 00 | 	byte	$00[16]
2f00a     01 0D 0D 01 
2f00e     00 00 00 00 
2f012     00 00 00 00 
2f016     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f01a     00 00 00 00 
2f01e     00 00 00 00 
2f022     00 00 00 00 
2f026     00 00 00 00 | 	byte	$00[16]
2f02a     01 0D 0D 0D 
2f02e     01 00 00 00 
2f032     00 00 00 00 
2f036     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f03a     00 00 00 00 
2f03e     00 00 00 00 
2f042     00 00 00 00 
2f046     00 00 00 00 | 	byte	$00[16]
2f04a     01 0D 0D 0D 
2f04e     0D 01 00 00 
2f052     00 00 00 00 
2f056     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f05a     00 00 00 00 
2f05e     00 00 00 00 
2f062     00 00 00 00 
2f066     00 00 00 00 | 	byte	$00[16]
2f06a     01 0D 0D 0D 
2f06e     0D 0D 01 00 
2f072     00 00 00 00 
2f076     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f07a     00 00 00 00 
2f07e     00 00 00 00 
2f082     00 00 00 00 
2f086     00 00 00 00 | 	byte	$00[16]
2f08a     01 0D 0D 0D 
2f08e     0D 0D 0D 01 
2f092     00 00 00 00 
2f096     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2f09a     00 00 00 00 
2f09e     00 00 00 00 
2f0a2     00 00 00 00 
2f0a6     00 00 00 00 | 	byte	$00[16]
2f0aa     01 0D 0D 0D 
2f0ae     0D 0D 0D 0C 
2f0b2     01 00 00 00 
2f0b6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2f0ba     00 00 00 00 
2f0be     00 00 00 00 
2f0c2     00 00 00 00 
2f0c6     00 00 00 00 | 	byte	$00[16]
2f0ca     01 0D 0D 0D 
2f0ce     0D 0D 0D 0D 
2f0d2     0C 01 00 00 
2f0d6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2f0da     00 00 00 00 
2f0de     00 00 00 00 
2f0e2     00 00 00 00 
2f0e6     00 00 00 00 | 	byte	$00[16]
2f0ea     01 0D 0D 0D 
2f0ee     0D 0D 0D 0D 
2f0f2     0D 0C 01 00 
2f0f6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2f0fa     00 00 00 00 
2f0fe     00 00 00 00 
2f102     00 00 00 00 
2f106     00 00 00 00 | 	byte	$00[16]
2f10a     01 0D 0D 0D 
2f10e     0D 0D 0D 0D 
2f112     0D 0D 0B 01 
2f116     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2f11a     00 00 00 00 
2f11e     00 00 00 00 
2f122     00 00 00 00 
2f126     00 00 00 00 | 	byte	$00[16]
2f12a     01 0D 0D 0D 
2f12e     0C 0D 0D 03 
2f132     01 01 01 01 
2f136     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2f13a     00 00 00 00 
2f13e     00 00 00 00 
2f142     00 00 00 00 
2f146     00 00 00 00 | 	byte	$00[16]
2f14a     01 0D 0D 0C 
2f14e     01 09 0D 03 
2f152     00 00 00 00 
2f156     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2f15a     00 00 00 00 
2f15e     00 00 00 00 
2f162     00 00 00 00 
2f166     00 00 00 00 | 	byte	$00[16]
2f16a     01 0D 0C 01 
2f16e     00 01 0D 0B 
2f172     01 00 00 00 
2f176     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2f17a     00 00 00 00 
2f17e     00 00 00 00 
2f182     00 00 00 00 
2f186     00 00 00 00 | 	byte	$00[16]
2f18a     01 0C 01 00 
2f18e     00 01 0A 0D 
2f192     01 00 00 00 
2f196     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2f19a     00 00 00 00 
2f19e     00 00 00 00 
2f1a2     00 00 00 00 
2f1a6     00 00 00 00 | 	byte	$00[16]
2f1aa     01 01 00 00 
2f1ae     00 00 01 0D 
2f1b2     0B 01 00 00 
2f1b6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2f1ba     00 00 00 00 
2f1be     00 00 00 00 
2f1c2     00 00 00 00 
2f1c6     00 00 00 00 
2f1ca     00 00 00 00 
2f1ce     00 00       | 	byte	$00[22]
2f1d0     01 0B 0D 01 
2f1d4     00 00 00 00 
2f1d8     00 00 00 00 
2f1dc     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f1e0     00 00 00 00 
2f1e4     00 00 00 00 
2f1e8     00 00 00 00 
2f1ec     00 00 00 00 
2f1f0     00          | 	byte	$00[17]
2f1f1     01 01 00 00 
2f1f5     00 00 00 00 
2f1f9     00 00 00 00 
2f1fd     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f201     00 00 00 00 
      ...             
2f3a5     00 00 00 00 
2f3a9     00          | 	byte	$00[425]
2f3aa     73 32 00 04 
2f3ae     00 00 10 00 
2f3b2     00 00 00 00 
2f3b6     00 00 00 00 | atari2 file "atari2.s2"
2f3ba     43 87 43 87 
2f3be     43 87 44 87 
2f3c2     43 87 44 87 
2f3c6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2f3ca     43 87 43 87 
2f3ce     43 87 44 87 
2f3d2     43 87 43 87 
2f3d6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2f3da     44 87 43 87 
2f3de     44 87 43 87 
2f3e2     43 87 43 87 
2f3e6     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2f3ea     43 87 43 87 
2f3ee     44 87 43 87 
2f3f2     44 87 44 87 
2f3f6     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
2f3fa     43 87 43 87 
2f3fe     44 87 43 87 
2f402     43 87 42 87 
2f406     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2f40a     43 87 43 87 
2f40e     43 87 43 87 
2f412     44 87 43 87 
2f416     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2f41a     44 87 44 87 
2f41e     43 87 44 87 
2f422     43 87 44 87 
2f426     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
2f42a     44 87 43 87 
2f42e     44 87 44 87 
2f432     43 87 43 87 
2f436     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2f43a     43 87 44 87 
2f43e     44 87 43 87 
2f442     43 87 44 87 
2f446     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2f44a     43 87 43 87 
2f44e     43 87 43 87 
2f452     43 87 43 87 
2f456     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
2f45a     42 87 43 87 
2f45e     44 87 42 87 
2f462     43 87 43 87 
2f466     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
2f46a     43 87 44 87 
2f46e     44 87 43 87 
2f472     43 87 43 87 
2f476     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2f47a     43 87 5C 87 
2f47e     EE 86 AC 87 
2f482     4C 7C A3 78 
2f486     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
2f48a     BC 78 BB 78 
2f48e     BD 78 BC 78 
2f492     BB 78 BD 78 
2f496     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
2f49a     BB 78 BB 78 
2f49e     BC 78 BC 78 
2f4a2     BC 78 BB 78 
2f4a6     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2f4aa     BC 78 BC 78 
2f4ae     BC 78 BC 78 
2f4b2     BC 78 BC 78 
2f4b6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2f4ba     BB 78 BC 78 
2f4be     A0 78 4C 7C 
2f4c2     11 7A 29 89 
2f4c6     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
2f4ca     44 87 43 87 
2f4ce     44 87 43 87 
2f4d2     43 87 42 87 
2f4d6     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2f4da     43 87 43 87 
2f4de     44 87 ED 85 
2f4e2     71 85 52 79 
2f4e6     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
2f4ea     BC 78 BC 78 
2f4ee     BC 78 BC 78 
2f4f2     BC 78 BC 78 
2f4f6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2f4fa     BC 78 BC 78 
2f4fe     BC 78 A0 78 
2f502     CF 7A B9 81 
2f506     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
2f50a     44 87 43 87 
2f50e     43 87 44 87 
2f512     43 87 44 87 
2f516     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2f51a     43 87 43 87 
2f51e     43 87 43 87 
2f522     44 87 43 87 
2f526     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2f52a     43 87 43 87 
2f52e     44 87 43 87 
2f532     44 87 43 87 
2f536     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2f53a     44 87 43 87 
2f53e     43 87 43 87 
2f542     5A 87 39 81 
2f546     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
2f54a     A5 78 BC 78 
2f54e     BB 78 BC 78 
2f552     BB 78 BC 78 
2f556     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
2f55a     BC 78 BC 78 
2f55e     BC 78 BC 78 
2f562     BC 78 8F 79 
2f566     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
2f56a     09 85 47 87 
2f56e     43 87 43 87 
2f572     42 87 42 87 
2f576     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
2f57a     43 87 43 87 
2f57e     43 87 43 87 
2f582     43 87 44 87 
2f586     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2f58a     43 87 43 87 
2f58e     44 87 43 87 
2f592     42 87 43 87 
2f596     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
2f59a     44 87 43 87 
2f59e     43 87 43 87 
2f5a2     44 87 44 87 
2f5a6     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
2f5aa     94 78 55 7A 
2f5ae     B9 78 BC 78 
2f5b2     BC 78 BC 78 
2f5b6     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2f5ba     BC 78 BB 78 
2f5be     BC 78 BC 78 
2f5c2     BC 78 BC 78 
2f5c6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2f5ca     BB 78 BC 78 
2f5ce     BC 78 BC 78 
2f5d2     BB 78 BC 78 
2f5d6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2f5da     BC 78 BC 78 
2f5de     BD 78 BC 78 
2f5e2     BC 78 BB 78 
2f5e6     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
2f5ea     94 78 B3 84 
2f5ee     36 84 4A 87 
2f5f2     43 87 43 87 
2f5f6     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
2f5fa     43 87 44 87 
2f5fe     43 87 43 87 
2f602     43 87 43 87 
2f606     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2f60a     43 87 44 87 
2f60e     43 87 44 87 
2f612     43 87 43 87 
2f616     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2f61a     43 87 43 87 
2f61e     43 87 45 87 
2f622     43 87 43 87 
2f626     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
2f62a     43 87 44 87 
2f62e     44 87 44 87 
2f632     43 87 43 87 
2f636     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2f63a     43 87 42 87 
2f63e     43 87 43 87 
2f642     44 87 43 87 
2f646     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2f64a     54 87 3C 82 
2f64e     36 83 52 79 
2f652     C6 78 BC 78 
2f656     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
2f65a     BB 78 BB 78 
2f65e     BC 78 BC 78 
2f662     BC 78 BC 78 
2f666     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2f66a     BD 78 ED 78 
2f66e     1B 79 F4 83 
2f672     4D 83 4E 87 
2f676     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
2f67a     44 87 43 87 
2f67e     42 87 44 87 
2f682     43 87 42 87 
2f686     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
2f68a     43 87 54 87 
2f68e     26 82 B3 84 
2f692     D6 77 BB 78 
2f696     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
2f69a     BC 78 BB 78 
2f69e     BB 78 BB 78 
2f6a2     BB 78 BB 78 
2f6a6     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
2f6aa     BC 78 BC 78 
2f6ae     26 79 18 75 
2f6b2     36 83 1F 84 
2f6b6     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
2f6ba     43 87 43 87 
2f6be     43 87 43 87 
2f6c2     43 87 44 87 
2f6c6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2f6ca     43 87 44 87 
2f6ce     44 87 43 87 
2f6d2     43 87 43 87 
2f6d6     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
2f6da     43 87 43 87 
2f6de     43 87 43 87 
2f6e2     44 87 44 87 
2f6e6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
2f6ea     44 87 43 87 
2f6ee     43 87 43 87 
2f6f2     43 87 44 87 
2f6f6     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2f6fa     44 87 44 87 
2f6fe     44 87 43 87 
2f702     44 87 43 87 
2f706     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2f70a     43 87 43 87 
2f70e     43 87 44 87 
2f712     44 87 43 87 
2f716     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2f71a     43 87 43 87 
2f71e     43 87 43 87 
2f722     43 87 44 87 
2f726     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2f72a     43 87 44 87 
2f72e     43 87 44 87 
2f732     19 87 7D 86 
2f736     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
2f73a     B1 78 BC 78 
2f73e     BC 78 BC 78 
2f742     BC 78 BC 78 
2f746     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2f74a     BC 78 BC 78 
2f74e     BD 78 BC 78 
2f752     B7 78 3B 7B 
2f756     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
2f75a     96 86 44 87 
2f75e     43 87 43 87 
2f762     43 87 43 87 
2f766     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
2f76a     44 87 44 87 
2f76e     43 87 44 87 
2f772     43 87 44 87 
2f776     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
2f77a     43 87 44 87 
2f77e     43 87 44 87 
2f782     43 87 44 87 
2f786     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2f78a     43 87 44 87 
2f78e     43 87 43 87 
2f792     44 87 43 87 
2f796     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2f79a     44 87 44 87 
2f79e     43 87 43 87 
2f7a2     43 87 44 87 
2f7a6     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2f7aa     43 87 43 87 
2f7ae     43 87 43 87 
2f7b2     44 87 44 87 
2f7b6     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
2f7ba     36 83 CF 7A 
2f7be     AB 78 BB 78 
2f7c2     BC 78 BC 78 
2f7c6     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
2f7ca     BB 78 BC 78 
2f7ce     BC 78 BC 78 
2f7d2     BC 78 BC 78 
2f7d6     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2f7da     BC 78 BC 78 
2f7de     BC 78 BB 78 
2f7e2     BC 78 BC 78 
2f7e6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2f7ea     BB 78 BC 78 
2f7ee     BB 78 BC 78 
2f7f2     BC 78 BD 78 
2f7f6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
2f7fa     BC 78 BC 78 
2f7fe     BC 78 BC 78 
2f802     BC 78 BD 78 
2f806     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
2f80a     BC 78 BB 78 
2f80e     BC 78 BB 78 
2f812     BB 78 BC 78 
2f816     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
2f81a     BC 78 BC 78 
2f81e     BC 78 BC 78 
2f822     BC 78 BB 78 
2f826     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
2f82a     BC 78 BC 78 
2f82e     BC 78 BD 78 
2f832     BB 78 BC 78 
2f836     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2f83a     BC 78 BC 78 
2f83e     BC 78 BB 78 
2f842     BC 78 BB 78 
2f846     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2f84a     BB 78 BC 78 
2f84e     BC 78 BC 78 
2f852     BC 78 BB 78 
2f856     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2f85a     BC 78 BC 78 
2f85e     BC 78 BB 78 
2f862     BC 78 BB 78 
2f866     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2f86a     BC 78 BC 78 
2f86e     BC 78 BC 78 
2f872     BB 78 BC 78 
2f876     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2f87a     BC 78 9F 78 
2f87e     52 79 B3 84 
2f882     2F 86 60 87 
2f886     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
2f88a     44 87 43 87 
2f88e     43 87 43 87 
2f892     43 87 43 87 
2f896     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2f89a     43 87 43 87 
2f89e     43 87 44 87 
2f8a2     43 87 43 87 
2f8a6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2f8aa     43 87 43 87 
2f8ae     43 87 43 87 
2f8b2     43 87 44 87 
2f8b6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2f8ba     44 87 44 87 
2f8be     5E 87 BC 80 
2f8c2     FB 80 94 78 
2f8c6     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
2f8ca     BD 78 BC 78 
2f8ce     BB 78 BC 78 
2f8d2     BB 78 BB 78 
2f8d6     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
2f8da     BC 78 BB 78 
2f8de     BB 78 6B 79 
2f8e2     D6 77 AC 87 
2f8e6     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
2f8ea     43 87 44 87 
2f8ee     43 87 43 87 
2f8f2     44 87 43 87 
2f8f6     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2f8fa     43 87 44 87 
2f8fe     43 87 5C 87 
2f902     E7 80 00 80 
2f906     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
2f90a     BC 78 BD 78 
2f90e     BC 78 BC 78 
2f912     BC 78 BB 78 
2f916     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2f91a     BC 78 BC 78 
2f91e     BB 78 BC 78 
2f922     BB 78 BC 78 
2f926     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2f92a     BB 78 BC 78 
2f92e     BC 78 BC 78 
2f932     BC 78 BC 78 
2f936     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2f93a     BC 78 BC 78 
2f93e     BC 78 BC 78 
2f942     A0 78 8D 7B 
2f946     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
2f94a     60 87 43 87 
2f94e     44 87 44 87 
2f952     43 87 43 87 
2f956     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
2f95a     44 87 43 87 
2f95e     43 87 43 87 
2f962     44 87 73 86 
2f966     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
2f96a     51 7B B6 78 
2f96e     BC 78 BD 78 
2f972     BC 78 BC 78 
2f976     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2f97a     BB 78 BC 78 
2f97e     BD 78 BB 78 
2f982     BC 78 BB 78 
2f986     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2f98a     BC 78 BC 78 
2f98e     BC 78 BC 78 
2f992     BB 78 BC 78 
2f996     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2f99a     BC 78 BB 78 
2f99e     BB 78 BC 78 
2f9a2     BC 78 BB 78 
2f9a6     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
2f9aa     22 8C AF 84 
2f9ae     48 87 43 87 
2f9b2     44 87 43 87 
2f9b6     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
2f9ba     43 87 42 87 
2f9be     43 87 43 87 
2f9c2     44 87 43 87 
2f9c6     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2f9ca     43 87 43 87 
2f9ce     44 87 44 87 
2f9d2     43 87 43 87 
2f9d6     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2f9da     43 87 43 87 
2f9de     43 87 43 87 
2f9e2     44 87 43 87 
2f9e6     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
2f9ea     9F 8B D6 77 
2f9ee     16 7C B3 78 
2f9f2     BC 78 BB 78 
2f9f6     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2f9fa     BB 78 BC 78 
2f9fe     BB 78 BC 78 
2fa02     BC 78 BC 78 
2fa06     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2fa0a     BC 78 BB 78 
2fa0e     BB 78 BC 78 
2fa12     BB 78 BC 78 
2fa16     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2fa1a     BB 78 BB 78 
2fa1e     BC 78 BC 78 
2fa22     BC 78 BB 78 
2fa26     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2fa2a     BC 78 BC 78 
2fa2e     BC 78 BD 78 
2fa32     BB 78 BC 78 
2fa36     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
2fa3a     BC 78 BC 78 
2fa3e     BC 78 BB 78 
2fa42     BC 78 BC 78 
2fa46     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2fa4a     A8 78 54 7E 
2fa4e     F4 83 17 82 
2fa52     50 87 43 87 
2fa56     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
2fa5a     44 87 43 87 
2fa5e     44 87 43 87 
2fa62     43 87 44 87 
2fa66     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2fa6a     43 87 28 87 
2fa6e     20 85 CF 7A 
2fa72     70 7D AD 78 
2fa76     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
2fa7a     BB 78 BC 78 
2fa7e     BC 78 BC 78 
2fa82     BB 78 BB 78 
2fa86     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
2fa8a     BB 78 B2 78 
2fa8e     9A 7C CF 7A 
2fa92     4A 87 0D 87 
2fa96     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
2fa9a     43 87 44 87 
2fa9e     43 87 44 87 
2faa2     43 87 43 87 
2faa6     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
2faaa     44 87 43 87 
2faae     28 87 51 85 
2fab2     11 7A 1E 7D 
2fab6     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
2faba     BC 78 BB 78 
2fabe     BC 78 BC 78 
2fac2     BC 78 BC 78 
2fac6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2faca     BB 78 BC 78 
2face     BB 78 BC 78 
2fad2     BC 78 BC 78 
2fad6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2fada     BB 78 BC 78 
2fade     BC 78 BC 78 
2fae2     BD 78 BB 78 
2fae6     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
2faea     BC 78 BB 78 
2faee     BC 78 BC 78 
2faf2     BC 78 BB 78 
2faf6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2fafa     BC 78 BC 78 
2fafe     BC 78 BC 78 
2fb02     BB 78 BC 78 
2fb06     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2fb0a     BC 78 BD 78 
2fb0e     BC 78 BC 78 
2fb12     BC 78 BB 78 
2fb16     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2fb1a     BC 78 BB 78 
2fb1e     BB 78 BC 78 
2fb22     BC 78 BB 78 
2fb26     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2fb2a     BB 78 BB 78 
2fb2e     BB 78 BC 78 
2fb32     B6 78 48 7D 
2fb36     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
2fb3a     56 87 43 87 
2fb3e     42 87 44 87 
2fb42     44 87 43 87 
2fb46     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2fb4a     43 87 44 87 
2fb4e     43 87 44 87 
2fb52     4C 87 7E 83 
2fb56     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
2fb5a     F7 78 BC 78 
2fb5e     BC 78 BB 78 
2fb62     BB 78 BC 78 
2fb66     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2fb6a     BC 78 BB 78 
2fb6e     BC 78 BC 78 
2fb72     BB 78 BC 78 
2fb76     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2fb7a     BB 78 BC 78 
2fb7e     BC 78 BC 78 
2fb82     BC 78 BB 78 
2fb86     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2fb8a     BC 78 BC 78 
2fb8e     BC 78 BC 78 
2fb92     BC 78 BB 78 
2fb96     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2fb9a     BC 78 BB 78 
2fb9e     BB 78 BC 78 
2fba2     BC 78 BB 78 
2fba6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2fbaa     BC 78 BC 78 
2fbae     BB 78 BC 78 
2fbb2     BC 78 BC 78 
2fbb6     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
2fbba     73 32 00 04 
2fbbe     00 00 10 00 
2fbc2     00 00 00 00 
2fbc6     00 00 00 00 | atari12 file "atari12.s2"
2fbca     00 6D 00 6D 
2fbce     00 6D 00 6D 
2fbd2     00 6D 00 6D 
2fbd6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2fbda     00 6D 00 6D 
2fbde     00 6D 00 6D 
2fbe2     00 6D 00 6D 
2fbe6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2fbea     00 6D 00 6D 
2fbee     00 6D 00 6D 
2fbf2     00 6D 00 6D 
2fbf6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2fbfa     00 6D 00 6D 
2fbfe     00 6D 00 6D 
2fc02     00 6D 00 6D 
2fc06     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2fc0a     00 6D 00 6D 
2fc0e     00 6D 00 6D 
2fc12     00 6D 00 6D 
2fc16     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
2fc1a     00 6C 00 6C 
2fc1e     00 6C 00 6C 
2fc22     00 6C 00 6C 
2fc26     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2fc2a     00 6C 00 6C 
2fc2e     00 6C 00 6C 
2fc32     00 6C 00 6C 
2fc36     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2fc3a     00 6C 00 6C 
2fc3e     00 6C 00 6C 
2fc42     00 6C 00 6C 
2fc46     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2fc4a     00 6C 00 6C 
2fc4e     00 6C 00 6C 
2fc52     00 6C 00 6C 
2fc56     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2fc5a     00 6C 00 6C 
2fc5e     00 6C 00 6C 
2fc62     00 6C 00 6C 
2fc66     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2fc6a     00 6C 00 6C 
2fc6e     00 6C 00 6C 
2fc72     00 6C 00 6C 
2fc76     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2fc7a     00 6C 00 6C 
2fc7e     00 6C 00 6C 
2fc82     00 6C 00 6C 
2fc86     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2fc8a     00 6C 00 6C 
2fc8e     00 6C 00 6C 
2fc92     00 6C 00 6C 
2fc96     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2fc9a     00 6C 00 6C 
2fc9e     00 6C 00 6C 
2fca2     00 6C 00 6C 
2fca6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2fcaa     00 6C 00 6C 
2fcae     00 6C 00 6C 
2fcb2     00 6C 00 6C 
2fcb6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2fcba     00 6C 00 6C 
2fcbe     00 6C 00 6C 
2fcc2     00 6C 00 6C 
2fcc6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2fcca     00 6C 00 6B 
2fcce     00 6B 00 6B 
2fcd2     00 6B 00 6B 
2fcd6     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2fcda     00 6B 00 6B 
2fcde     00 6B 00 6B 
2fce2     00 6B 00 6B 
2fce6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2fcea     00 6B 00 6B 
2fcee     00 6B 00 6B 
2fcf2     00 6B 00 6B 
2fcf6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2fcfa     00 6B 00 6B 
2fcfe     00 6B 00 6B 
2fd02     00 6B 00 6B 
2fd06     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2fd0a     00 6B 00 6B 
2fd0e     00 6B 00 6B 
2fd12     00 6B 00 6B 
2fd16     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2fd1a     00 6B 00 6B 
2fd1e     00 6B 00 6B 
2fd22     00 6B 00 6B 
2fd26     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2fd2a     00 6B 00 6B 
2fd2e     00 6B 00 6B 
2fd32     00 6B 00 6B 
2fd36     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2fd3a     00 6B 00 6B 
2fd3e     00 6B 00 6B 
2fd42     00 6B 00 6B 
2fd46     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2fd4a     00 6B 00 6B 
2fd4e     00 6B 00 6B 
2fd52     00 6B 00 6B 
2fd56     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2fd5a     00 6B 00 6B 
2fd5e     00 6B 00 6B 
2fd62     00 6A 00 9D 
2fd66     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
2fd6a     00 9E 00 9E 
2fd6e     00 9E 00 9E 
2fd72     00 9E 00 9E 
2fd76     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2fd7a     00 9E 00 9E 
2fd7e     00 9E 00 9E 
2fd82     00 9E 00 9E 
2fd86     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2fd8a     00 9E 00 9E 
2fd8e     00 9E 00 9E 
2fd92     00 9E 00 9E 
2fd96     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2fd9a     00 9E 00 9E 
2fd9e     00 9E 00 9E 
2fda2     00 9E 00 9E 
2fda6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2fdaa     00 9E 00 9E 
2fdae     00 9E 00 9E 
2fdb2     00 9E 00 9E 
2fdb6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2fdba     00 9E 00 9E 
2fdbe     00 9E 00 9E 
2fdc2     00 9E 00 9E 
2fdc6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2fdca     00 9E 00 9E 
2fdce     00 9E 00 9E 
2fdd2     00 9E 00 9E 
2fdd6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2fdda     00 9E 00 9E 
2fdde     00 9E 00 9E 
2fde2     00 9E 00 9E 
2fde6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2fdea     00 9E 00 9E 
2fdee     00 9E 00 9E 
2fdf2     00 9E 00 9E 
2fdf6     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
2fdfa     00 9F 00 9F 
2fdfe     00 9F 00 9F 
2fe02     00 9F 00 9F 
2fe06     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2fe0a     00 9F 00 9F 
2fe0e     00 9F 00 9F 
2fe12     00 9F 00 9F 
2fe16     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2fe1a     00 9F 00 9F 
2fe1e     00 9F 00 9F 
2fe22     00 9F 00 9F 
2fe26     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2fe2a     00 9F 00 9F 
2fe2e     00 9F 00 9F 
2fe32     00 9F 00 9F 
2fe36     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2fe3a     00 9F 00 9F 
2fe3e     00 9F 00 9F 
2fe42     00 9F 00 9F 
2fe46     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2fe4a     00 9F 00 9F 
2fe4e     00 9F 00 9F 
2fe52     00 9F 00 9F 
2fe56     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2fe5a     00 9F 00 9F 
2fe5e     00 9F 00 9F 
2fe62     00 9F 00 9F 
2fe66     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2fe6a     00 9F 00 9F 
2fe6e     00 9F 00 9F 
2fe72     00 9F 00 9F 
2fe76     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2fe7a     00 9F 00 9F 
2fe7e     00 9F 00 9F 
2fe82     00 9F 00 9F 
2fe86     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2fe8a     00 9F 00 9F 
2fe8e     00 9F 00 9F 
2fe92     00 9F 00 9F 
2fe96     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2fe9a     00 9F 00 9F 
2fe9e     00 9F 00 9F 
2fea2     00 9F 00 9F 
2fea6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2feaa     00 9F 00 9F 
2feae     00 9F 00 9F 
2feb2     00 9F 00 9F 
2feb6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2feba     00 9F 00 9F 
2febe     00 9F 00 A0 
2fec2     00 A0 00 A0 
2fec6     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2feca     00 A0 00 A0 
2fece     00 A0 00 A0 
2fed2     00 A0 00 A0 
2fed6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2feda     00 A0 00 A0 
2fede     00 A0 00 A0 
2fee2     00 A0 00 A0 
2fee6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2feea     00 A0 00 A0 
2feee     00 A0 00 A0 
2fef2     00 A0 00 A0 
2fef6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2fefa     00 A0 00 A0 
2fefe     00 A0 00 A0 
2ff02     00 A0 00 A0 
2ff06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ff0a     00 A0 00 A0 
2ff0e     00 A0 00 A0 
2ff12     00 A0 00 A0 
2ff16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ff1a     00 A0 00 A0 
2ff1e     00 A0 00 A0 
2ff22     00 A0 00 A0 
2ff26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ff2a     00 A0 00 A0 
2ff2e     00 A0 00 A0 
2ff32     00 A0 00 A0 
2ff36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ff3a     00 A0 00 A0 
2ff3e     00 A0 00 A0 
2ff42     00 A0 00 A0 
2ff46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ff4a     00 A0 00 A0 
2ff4e     00 A0 00 A0 
2ff52     00 A0 00 A0 
2ff56     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ff5a     00 A0 00 A0 
2ff5e     00 A0 00 A0 
2ff62     00 A0 00 A0 
2ff66     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ff6a     00 A0 00 A0 
2ff6e     00 A0 00 A0 
2ff72     00 A0 00 A0 
2ff76     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ff7a     00 A0 00 A0 
2ff7e     00 A0 00 A0 
2ff82     00 A0 00 A0 
2ff86     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
2ff8a     00 6D 00 6D 
2ff8e     00 6D 00 6D 
2ff92     00 6D 00 6D 
2ff96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ff9a     00 6D 00 6D 
2ff9e     00 6D 00 6D 
2ffa2     00 6D 00 6D 
2ffa6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ffaa     00 6D 00 6D 
2ffae     00 6D 00 6D 
2ffb2     00 6D 00 6D 
2ffb6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ffba     00 6D 00 6D 
2ffbe     00 6D 00 6D 
2ffc2     00 6D 00 6D 
2ffc6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ffca     00 6D 00 6D 
2ffce     00 6D 00 6D 
2ffd2     00 6D 00 6D 
2ffd6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ffda     00 6D 00 6D 
2ffde     00 6D 00 6D 
2ffe2     00 6D 00 6D 
2ffe6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ffea     00 6D 00 6D 
2ffee     00 6D 00 6D 
2fff2     00 6D 00 6D 
2fff6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2fffa     00 6D 00 6D 
2fffe     00 6D 00 6D 
30002     00 6D 00 6D 
30006     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3000a     00 6D 00 6D 
3000e     00 A0 00 A0 
30012     00 A0 00 A0 
30016     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3001a     00 A0 00 A0 
3001e     00 A0 00 A0 
30022     00 A0 00 A0 
30026     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3002a     00 A0 00 A0 
3002e     00 A0 00 A0 
30032     00 A0 00 A0 
30036     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3003a     00 A0 00 A0 
3003e     00 A0 00 A0 
30042     00 A0 00 A0 
30046     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3004a     00 A0 00 A0 
3004e     00 A0 00 A0 
30052     00 A0 00 A0 
30056     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3005a     00 A0 00 A0 
3005e     00 A0 00 A0 
30062     00 A0 00 A0 
30066     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3006a     00 A0 00 A0 
3006e     00 A0 00 A0 
30072     00 A0 00 A0 
30076     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3007a     00 A0 00 A0 
3007e     00 A0 00 A0 
30082     00 A0 00 A0 
30086     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3008a     00 A0 00 A0 
3008e     00 A0 00 A0 
30092     00 A0 00 A0 
30096     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3009a     00 6D 00 6D 
3009e     00 6D 00 6D 
300a2     00 6D 00 6D 
300a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
300aa     00 6D 00 6D 
300ae     00 6D 00 6D 
300b2     00 6D 00 6D 
300b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
300ba     00 6D 00 6D 
300be     00 6D 00 6D 
300c2     00 6D 00 6D 
300c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
300ca     00 6D 00 6D 
300ce     00 6D 00 6D 
300d2     00 6D 00 6D 
300d6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
300da     00 6D 00 6D 
300de     00 6D 00 6D 
300e2     00 6D 00 6D 
300e6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
300ea     00 6D 00 6D 
300ee     00 6D 00 6D 
300f2     00 6D 00 6D 
300f6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
300fa     00 6D 00 6D 
300fe     00 6D 00 6D 
30102     00 6D 00 6D 
30106     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3010a     00 6D 00 6D 
3010e     00 6D 00 6D 
30112     00 6D 00 6D 
30116     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3011a     00 6D 00 6D 
3011e     00 6C 00 A0 
30122     00 9F 00 A0 
30126     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3012a     00 A0 00 A0 
3012e     00 A0 00 A0 
30132     00 A0 00 A0 
30136     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3013a     00 A0 00 A0 
3013e     00 A0 00 A0 
30142     00 A0 00 A0 
30146     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3014a     00 A0 00 A0 
3014e     00 A0 00 A0 
30152     00 A0 00 A0 
30156     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3015a     00 A0 00 A0 
3015e     00 A0 00 A0 
30162     00 A0 00 A0 
30166     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3016a     00 A0 00 A0 
3016e     00 A0 00 A0 
30172     00 A0 00 A0 
30176     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3017a     00 A0 00 A0 
3017e     00 A0 00 A0 
30182     00 A0 00 A0 
30186     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3018a     00 A0 00 A0 
3018e     00 A0 00 A0 
30192     00 A0 00 A0 
30196     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3019a     00 A0 00 A0 
3019e     00 A0 00 A0 
301a2     00 A0 00 A0 
301a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
301aa     00 A0 00 A0 
301ae     00 A0 00 A0 
301b2     00 A0 00 A0 
301b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
301ba     00 A0 00 A0 
301be     00 A0 00 A0 
301c2     00 A0 00 A0 
301c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
301ca     00 A0 00 A0 
301ce     00 A0 00 A0 
301d2     00 A0 00 A0 
301d6     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
301da     00 A1 00 A1 
301de     00 A1 00 A1 
301e2     00 A1 00 A1 
301e6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
301ea     00 A1 00 A1 
301ee     00 A1 00 A1 
301f2     00 A1 00 A1 
301f6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
301fa     00 A1 00 A1 
301fe     00 A1 00 A1 
30202     00 A1 00 A1 
30206     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3020a     00 A1 00 A1 
3020e     00 A1 00 A1 
30212     00 A1 00 A1 
30216     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3021a     00 A1 00 A1 
3021e     00 A1 00 A1 
30222     00 A1 00 A1 
30226     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3022a     00 A1 00 A1 
3022e     00 A1 00 A1 
30232     00 6E 00 6E 
30236     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3023a     00 6E 00 6E 
3023e     00 6E 00 6E 
30242     00 6E 00 6E 
30246     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3024a     00 6E 00 6E 
3024e     00 6E 00 6E 
30252     00 6E 00 6E 
30256     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3025a     00 6E 00 6E 
3025e     00 6E 00 6E 
30262     00 6E 00 6E 
30266     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3026a     00 6E 00 6D 
3026e     00 6D 00 6D 
30272     00 6D 00 6D 
30276     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3027a     00 6D 00 6D 
3027e     00 6D 00 6D 
30282     00 6D 00 6D 
30286     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3028a     00 6D 00 6D 
3028e     00 6D 00 6D 
30292     00 6D 00 6D 
30296     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3029a     00 6D 00 6D 
3029e     00 6D 00 6D 
302a2     00 6D 00 6D 
302a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
302aa     00 6D 00 6D 
302ae     00 6D 00 6D 
302b2     00 6D 00 6D 
302b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
302ba     00 6D 00 6D 
302be     00 6D 00 6D 
302c2     00 6D 00 6D 
302c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
302ca     00 6D 00 6D 
302ce     00 6D 00 6D 
302d2     00 6D 00 6D 
302d6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
302da     00 6D 00 6D 
302de     00 6D 00 6D 
302e2     00 6D 00 6D 
302e6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
302ea     00 6D 00 6D 
302ee     00 6D 00 6D 
302f2     00 6D 00 6D 
302f6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
302fa     00 6D 00 6D 
302fe     00 6D 00 6D 
30302     00 6D 00 6D 
30306     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3030a     00 6D 00 6D 
3030e     00 6D 00 6D 
30312     00 6D 00 6D 
30316     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3031a     00 6D 00 6D 
3031e     00 6C 00 6C 
30322     00 6C 00 6C 
30326     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3032a     00 6C 00 6C 
3032e     00 6C 00 6C 
30332     00 6C 00 6C 
30336     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3033a     00 6C 00 6C 
3033e     00 6C 00 6C 
30342     00 9D 00 9F 
30346     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3034a     00 9F 00 9F 
3034e     00 9F 00 9F 
30352     00 A0 00 A0 
30356     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3035a     00 A0 00 A0 
3035e     00 A0 00 A0 
30362     00 A0 00 A0 
30366     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3036a     00 A0 00 A0 
3036e     00 A0 00 A0 
30372     00 A0 00 A0 
30376     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3037a     00 A0 00 A0 
3037e     00 A0 00 A0 
30382     00 A0 00 A0 
30386     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3038a     00 A0 00 A0 
3038e     00 A0 00 A0 
30392     00 A0 00 A0 
30396     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3039a     00 A0 00 A0 
3039e     00 A0 00 A0 
303a2     00 A0 00 A0 
303a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
303aa     00 A0 00 A0 
303ae     00 A0 00 A0 
303b2     00 A0 00 A0 
303b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
303ba     00 A0 00 A0 
303be     00 A0 00 A0 
303c2     00 A0 00 A0 
303c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
303ca                 | 
303ca     00 00       |              	org
303cc 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
303d0 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
303d4 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
303d8 003             | 
303d8 003 00 30 04 F6 |                 mov     psramaddr,#0
303dc 004             | 
303dc 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
303e0 005 20 00 00 FF 
303e4 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
303e8 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
303ec 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
303f0 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
303f4 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
303f8 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
303fc 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
30400 00d             | 
30400 00d 20 00 00 FF 
30404 00e 00 30 04 F1 |                 add 	psramaddr,##16384
30408 00f E0 03 00 FF 
3040c 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
30410 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
30414 012             | 
30414 012             |                 
30414 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
30418 013             |     
30418 013 01 2C 60 FD |                 cogid 	t11				' get id
3041c 014 00 00 EC FC |                 coginit #0,#0				' start the new program
30420 015 03 2C 60 FD |                 cogstop t11				' stop the loader
30424 016             | 
30424 016 00 00 00 00 | t11 		long 	0
30428 017 00 FF 07 00 | mailbox 	long 	$7FF00
3042c 018 00 00 00 00 | psramaddr 	long 	0
30430 019 00 00 00 00 | pslockval	long 	0
30434 01a 00 00 00 00 | cmd             long    0
30438 01b 00 00 00 00 | buf1            long    0
3043c 01c 00 40 00 00 | buf2            long    16384
30440 01d 44 04 03 00 | 	long	@@@_dat_ + 12624
30444 01e 50 32 20 52 
30448 01f 65 74 72 6F 
3044c 020 6D 61 63 68 
30450 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
30454 022 42 41 53 49 
30458 023 43 20 76 65 
3045c 024 72 73 69 6F 
30460 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
30464 026 32 38 00 00 | 	byte	$32, $38, $00, $00
30468 027             | 	alignl
30468 027             | _hg010b_spin2_dat_
30468 027             | 
30468 027 00 00 00 00 
3046c 028 00 00 00 00 
30470 029 00 00 00 00 
30474 02a 00 00 00 00 
30478 02b 00 00 00    | vga_font       file "vgafont.def"
3047b 02b 7E 81 A5 81 
3047f 02c 81 BD 99 81 
30483 02d 81 7E 00 00 
30487 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3048b 02f 7E FF DB FF 
3048f 030 FF C3 E7 FF 
30493 031 FF 7E 00 00 
30497 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3049b 033 00 36 7F 7F 
3049f 034 7F 7F 3E 1C 
304a3 035 08 00 00 00 
304a7 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
304ab 037 00 08 1C 3E 
304af 038 7F 3E 1C 08 
304b3 039 00 00 00 00 
304b7 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
304bb 03b 18 3C 3C E7 
304bf 03c E7 E7 18 18 
304c3 03d 3C 00 00 00 
304c7 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
304cb 03f 18 3C 7E FF 
304cf 040 FF 7E 18 18 
304d3 041 3C 00 00 00 
304d7 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
304db 043 00 00 00 18 
304df 044 3C 3C 18 00 
304e3 045 00 00 00 00 
304e7 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
304eb 047 FF FF FF E7 
304ef 048 C3 C3 E7 FF 
304f3 049 FF FF FF FF 
304f7 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
304fb 04b 00 00 3C 66 
304ff 04c 42 42 66 3C 
30503 04d 00 00 00 00 
30507 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3050b 04f FF FF C3 99 
3050f 050 BD BD 99 C3 
30513 051 FF FF FF FF 
30517 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3051b 053 78 70 58 4C 
3051f 054 1E 33 33 33 
30523 055 33 1E 00 00 
30527 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3052b 057 3C 66 66 66 
3052f 058 66 3C 18 7E 
30533 059 18 18 00 00 
30537 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3053b 05b FC CC FC 0C 
3053f 05c 0C 0C 0C 0E 
30543 05d 0F 07 00 00 
30547 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3054b 05f FE C6 FE C6 
3054f 060 C6 C6 C6 E6 
30553 061 E7 67 03 00 
30557 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3055b 063 18 18 DB 3C 
3055f 064 E7 3C DB 18 
30563 065 18 00 00 00 
30567 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3056b 067 03 07 0F 1F 
3056f 068 7F 1F 0F 07 
30573 069 03 01 00 00 
30577 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3057b 06b 60 70 78 7C 
3057f 06c 7F 7C 78 70 
30583 06d 60 40 00 00 
30587 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3058b 06f 18 3C 7E 18 
3058f 070 18 18 7E 3C 
30593 071 18 00 00 00 
30597 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3059b 073 66 66 66 66 
3059f 074 66 66 66    | 	byte	$66[7]
305a2 075 00 66 66 00 
305a6 076 00 00 00 00 
305aa 077 00 FE DB DB 
305ae 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
305b2 079 D8 D8 D8 00 
305b6 07a 00 00 00 3E 
305ba 07b 63 06 1C 36 
305be 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
305c2 07d 30 63 3E 00 
305c6 07e 00 00 00 00 
305ca 07f 00 00 00 00 
305ce 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
305d2 081 7F 7F 7F 00 
305d6 082 00 00 00 00 
305da 083 00 18 3C 7E 
305de 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
305e2 085 3C 18 7E 00 
305e6 086 00 00 00 00 
305ea 087 00 18 3C 7E 
305ee 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
305f2 089 18 18 18 00 
305f6 08a 00 00 00 00 
305fa 08b 00 18 18 18 
305fe 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
30602 08d 7E 3C 18 00 
30606 08e 00 00 00 00 
3060a 08f 00 00 00 18 
3060e 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
30612 091 00 00 00 00 
30616 092 00 00 00 00 
3061a 093 00 00 00    | 	byte	$00[11]
3061d 094 0C 06 7F 06 
30621 095 0C 00 00 00 
30625 096 00 00 00 00 
30629 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3062d 098 00 03 03 03 
30631 099 7F 00 00 00 
30635 09a 00 00 00 00 
30639 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3063d 09c 14 36 7F 36 
30641 09d 14 00 00 00 
30645 09e 00 00 00 00 
30649 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
3064d 0a0 1C 1C 3E 3E 
30651 0a1 7F 7F 00 00 
30655 0a2 00 00 00 00 
30659 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3065d 0a4 7F 3E 3E 1C 
30661 0a5 1C 08 00 00 
30665 0a6 00 00 00 00 
30669 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3066d 0a8 00 00 00 00 
30671 0a9 00 00 00 00 
30675 0aa 00 00 00 00 
30679 0ab 00 00       | 	byte	$00[14]
3067b 0ab 18 3C 3C 3C 
3067f 0ac 18 18 18 00 
30683 0ad 18 18 00 00 
30687 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3068b 0af 66 24 00 00 
3068f 0b0 00 00 00 00 
30693 0b1 00 00 00 00 
30697 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3069b 0b3 00 36 36 7F 
3069f 0b4 36 36 36 7F 
306a3 0b5 36 36 00 00 
306a7 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
306ab 0b7 3E 63 43 03 
306af 0b8 3E 60 60 61 
306b3 0b9 63 3E 18 18 
306b7 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
306bb 0bb 00 00 43 63 
306bf 0bc 30 18 0C 06 
306c3 0bd 63 61 00 00 
306c7 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
306cb 0bf 1C 36 36 1C 
306cf 0c0 6E 3B 33 33 
306d3 0c1 33 6E 00 00 
306d7 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
306db 0c3 0C 0C 0C 06 
306df 0c4 00 00 00 00 
306e3 0c5 00 00 00 00 
306e7 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
306eb 0c7 30 18 0C 0C 
306ef 0c8 0C 0C 0C 0C 
306f3 0c9 18 30 00 00 
306f7 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
306fb 0cb 0C 18 30 30 
306ff 0cc 30 30 30 30 
30703 0cd 18 0C 00 00 
30707 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3070b 0cf 00 00 00 66 
3070f 0d0 3C FF 3C 66 
30713 0d1 00 00 00 00 
30717 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3071b 0d3 00 00 00 18 
3071f 0d4 18 7E 18 18 
30723 0d5 00 00 00 00 
30727 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3072b 0d7 00 00 00 00 
3072f 0d8 00 00 00 00 | 	byte	$00[8]
30733 0d9 18 18 18 0C 
30737 0da 00 00 00 00 
3073b 0db 00 00 00 00 
3073f 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
30743 0dd 00 00 00 00 
30747 0de 00 00 00 00 
3074b 0df 00 00 00 00 
3074f 0e0 00 00 00 00 | 	byte	$00[16]
30753 0e1 18 18 00 00 
30757 0e2 00 00 00 00 
3075b 0e3 00 00 40 60 
3075f 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
30763 0e5 03 01 00 00 
30767 0e6 00 00 00 00 
3076b 0e7 1C 36 63 63 
3076f 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
30773 0e9 36 1C 00 00 
30777 0ea 00 00 00 00 
3077b 0eb 18 1C 1E 18 
3077f 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
30783 0ed 18 7E 00 00 
30787 0ee 00 00 00 00 
3078b 0ef 3E 63 60 30 
3078f 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
30793 0f1 63 7F 00 00 
30797 0f2 00 00 00 00 
3079b 0f3 3E 63 60 60 
3079f 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
307a3 0f5 63 3E 00 00 
307a7 0f6 00 00 00 00 
307ab 0f7 30 38 3C 36 
307af 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
307b3 0f9 30 78 00 00 
307b7 0fa 00 00 00 00 
307bb 0fb 7F 03 03 03 
307bf 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
307c3 0fd 63 3E 00 00 
307c7 0fe 00 00 00 00 
307cb 0ff 1C 06 03 03 
307cf 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
307d3 101 63 3E 00 00 
307d7 102 00 00 00 00 
307db 103 7F 63 60 60 
307df 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
307e3 105 0C 0C 00 00 
307e7 106 00 00 00 00 
307eb 107 3E 63 63 63 
307ef 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
307f3 109 63 3E 00 00 
307f7 10a 00 00 00 00 
307fb 10b 3E 63 63 63 
307ff 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
30803 10d 30 1E 00 00 
30807 10e 00 00 00 00 
3080b 10f 00 00 00 18 
3080f 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
30813 111 18 18 00 00 
30817 112 00 00 00 00 
3081b 113 00 00 00 18 
3081f 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
30823 115 18 18 0C 00 
30827 116 00 00 00 00 
3082b 117 00 60 30 18 
3082f 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
30833 119 30 60 00 00 
30837 11a 00 00 00 00 
3083b 11b 00 00 00 7E 
3083f 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
30843 11d 00 00 00 00 
30847 11e 00 00 00 00 
3084b 11f 00          | 	byte	$00[9]
3084c 120 06 0C 18 30 
30850 121 60 30 18 0C 
30854 122 06 00 00 00 
30858 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3085c 124 63 63 30 18 
30860 125 18 18 00 18 
30864 126 18 00 00 00 
30868 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3086c 128 3E 63 63 7B 
30870 129 7B 7B 3B 03 
30874 12a 3E 00 00 00 
30878 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3087c 12c 1C 36 63 63 
30880 12d 7F 63 63 63 
30884 12e 63 00 00 00 
30888 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3088c 130 66 66 66 3E 
30890 131 66 66 66 66 
30894 132 3F 00 00 00 
30898 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3089c 134 66 43 03 03 
308a0 135 03 03 43 66 
308a4 136 3C 00 00 00 
308a8 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
308ac 138 36 66 66 66 
308b0 139 66 66 66 36 
308b4 13a 1F 00 00 00 
308b8 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
308bc 13c 66 46 16 1E 
308c0 13d 16 06 46 66 
308c4 13e 7F 00 00 00 
308c8 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
308cc 140 66 46 16 1E 
308d0 141 16 06 06 06 
308d4 142 0F 00 00 00 
308d8 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
308dc 144 66 43 03 03 
308e0 145 7B 63 63 66 
308e4 146 5C 00 00 00 
308e8 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
308ec 148 63 63 63 7F 
308f0 149 63 63 63 63 
308f4 14a 63 00 00 00 
308f8 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
308fc 14c 18 18 18 18 
30900 14d 18 18 18 18 | 	byte	$18[8]
30904 14e 3C 00 00 00 
30908 14f 00 00 00 78 
3090c 150 30 30 30 30 
30910 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
30914 152 1E 00 00 00 
30918 153 00 00 00 67 
3091c 154 66 66 36 1E 
30920 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
30924 156 67 00 00 00 
30928 157 00 00 00 0F 
3092c 158 06 06 06 06 
30930 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
30934 15a 7F 00 00 00 
30938 15b 00 00 00 63 
3093c 15c 77 7F 7F 6B 
30940 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
30944 15e 63 00 00 00 
30948 15f 00 00 00 63 
3094c 160 67 6F 7F 7B 
30950 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
30954 162 63 00 00 00 
30958 163 00 00 00 3E 
3095c 164 63 63 63 63 
30960 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
30964 166 3E 00 00 00 
30968 167 00 00 00 3F 
3096c 168 66 66 66 3E 
30970 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
30974 16a 0F 00 00 00 
30978 16b 00 00 00 3E 
3097c 16c 63 63 63 63 
30980 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
30984 16e 3E 30 70 00 
30988 16f 00 00 00 3F 
3098c 170 66 66 66 3E 
30990 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
30994 172 67 00 00 00 
30998 173 00 00 00 3E 
3099c 174 63 63 06 1C 
309a0 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
309a4 176 3E 00 00 00 
309a8 177 00 00 00 7E 
309ac 178 7E 5A 18 18 
309b0 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
309b4 17a 3C 00 00 00 
309b8 17b 00 00 00 63 
309bc 17c 63 63 63 63 
309c0 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
309c4 17e 3E 00 00 00 
309c8 17f 00 00 00 63 
309cc 180 63 63 63 63 
309d0 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
309d4 182 08 00 00 00 
309d8 183 00 00 00 63 
309dc 184 63 63 63 6B 
309e0 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
309e4 186 36 00 00 00 
309e8 187 00 00 00 63 
309ec 188 63 36 3E 1C 
309f0 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
309f4 18a 63 00 00 00 
309f8 18b 00 00 00 66 
309fc 18c 66 66 66 3C 
30a00 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
30a04 18e 3C 00 00 00 
30a08 18f 00 00 00 7F 
30a0c 190 63 61 30 18 
30a10 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
30a14 192 7F 00 00 00 
30a18 193 00 00 00 3C 
30a1c 194 0C 0C 0C 0C 
30a20 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
30a24 196 3C 00 00 00 
30a28 197 00 00 00 00 
30a2c 198 01 03 07 0E 
30a30 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
30a34 19a 40 00 00 00 
30a38 19b 00 00 00 3C 
30a3c 19c 30 30 30 30 
30a40 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
30a44 19e 3C 00 00 00 
30a48 19f 1C 36 00 00 
30a4c 1a0 00 00 00 00 
30a50 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30a54 1a2 00 00 00 00 
30a58 1a3 00 00 00 00 
30a5c 1a4 00 00 00 00 
30a60 1a5 00 00 00 00 
30a64 1a6 00          | 	byte	$00[17]
30a65 1a6 FF 00 00 0C 
30a69 1a7 18 00 00 00 
30a6d 1a8 00 00 00 00 
30a71 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30a75 1aa 00 00 00 00 
30a79 1ab 00 00 00 00 
30a7d 1ac 00          | 	byte	$00[9]
30a7e 1ac 1E 30 3E 33 
30a82 1ad 33 33 6E 00 
30a86 1ae 00 00 00 00 
30a8a 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
30a8e 1b0 1E 36 66 66 
30a92 1b1 66 66 3E 00 
30a96 1b2 00 00 00 00 
30a9a 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
30a9e 1b4 3E 63 03 03 
30aa2 1b5 03 63 3E 00 
30aa6 1b6 00 00 00 00 
30aaa 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
30aae 1b8 3C 36 33 33 
30ab2 1b9 33 33 6E 00 
30ab6 1ba 00 00 00 00 
30aba 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
30abe 1bc 3E 63 7F 03 
30ac2 1bd 03 63 3E 00 
30ac6 1be 00 00 00 00 
30aca 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
30ace 1c0 0C 1E 0C 0C 
30ad2 1c1 0C 0C 1E 00 
30ad6 1c2 00 00 00 00 
30ada 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
30ade 1c4 6E 33 33 33 
30ae2 1c5 33 33 3E 30 
30ae6 1c6 33 1E 00 00 
30aea 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
30aee 1c8 36 6E 66 66 
30af2 1c9 66 66 67 00 
30af6 1ca 00 00 00 00 
30afa 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
30afe 1cc 1C 18 18 18 
30b02 1cd 18 18 3C 00 
30b06 1ce 00 00 00 00 
30b0a 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
30b0e 1d0 70 60 60 60 
30b12 1d1 60 60 60 66 
30b16 1d2 66 3C 00 00 
30b1a 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
30b1e 1d4 66 36 1E 1E 
30b22 1d5 36 66 67 00 
30b26 1d6 00 00 00 00 
30b2a 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
30b2e 1d8 18 18 18 18 
30b32 1d9 18 18       | 	byte	$18[6]
30b34 1da 3C 00 00 00 
30b38 1db 00 00 00 00 
30b3c 1dc 00 00 37 7F 
30b40 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
30b44 1de 63 00 00 00 
30b48 1df 00 00 00 00 
30b4c 1e0 00 00 3B 66 
30b50 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
30b54 1e2 66 00 00 00 
30b58 1e3 00 00 00 00 
30b5c 1e4 00 00 3E 63 
30b60 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
30b64 1e6 3E 00 00 00 
30b68 1e7 00 00 00 00 
30b6c 1e8 00 00 3B 66 
30b70 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
30b74 1ea 3E 06 06 0F 
30b78 1eb 00 00 00 00 
30b7c 1ec 00 00 6E 33 
30b80 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
30b84 1ee 3E 30 30 78 
30b88 1ef 00 00 00 00 
30b8c 1f0 00 00 3B 6E 
30b90 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
30b94 1f2 0F 00 00 00 
30b98 1f3 00 00 00 00 
30b9c 1f4 00 00 3E 63 
30ba0 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
30ba4 1f6 3E 00 00 00 
30ba8 1f7 00 00 00 08 
30bac 1f8 0C 0C 3F 0C 
30bb0 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
30bb4 1fa 38 00 00 00 
30bb8 1fb 00 00 00 00 
30bbc 1fc 00 00 33 33 
30bc0 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
30bc4 1fe 6E 00 00 00 
30bc8 1ff 00 00 00 00 
30bcc 200 00 00 63 63 
30bd0 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
30bd4 202 1C 00 00 00 
30bd8 203 00 00 00 00 
30bdc 204 00 00 63 63 
30be0 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
30be4 206 36 00 00 00 
30be8 207 00 00 00 00 
30bec 208 00 00 63 36 
30bf0 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
30bf4 20a 63 00 00 00 
30bf8 20b 00 00 00 00 
30bfc 20c 00 00 63 63 
30c00 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
30c04 20e 7E 60 30 1F 
30c08 20f 00 00 00 00 
30c0c 210 00 00 7F 33 
30c10 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
30c14 212 7F 00 00 00 
30c18 213 00 00 00 70 
30c1c 214 18 18 18 0E 
30c20 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
30c24 216 70 00 00 00 
30c28 217 00 00 00 18 
30c2c 218 18 18 18 18 
30c30 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
30c34 21a 18 00 00 00 
30c38 21b 00 00 00 0E 
30c3c 21c 18 18 18 70 
30c40 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
30c44 21e 0E 00 00 00 
30c48 21f 6E 3B 00 00 
30c4c 220 00 00 00 00 
30c50 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30c54 222 00 00 00 00 
30c58 223 00 00 00 00 
30c5c 224 00 00       | 	byte	$00[10]
30c5e 224 08 1C 36 63 
30c62 225 63 63 7F 00 
30c66 226 00 00 00 00 
30c6a 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
30c6e 228 03 03 03 03 
30c72 229 43 66 3C 18 
30c76 22a 30 1E 00 00 
30c7a 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
30c7e 22c 33 33 33 33 
30c82 22d 33 33       | 	byte	$33[6]
30c84 22e 6E 00 00 00 
30c88 22f 00 00 60 30 
30c8c 230 18 00 3E 63 
30c90 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
30c94 232 3E 00 00 00 
30c98 233 00 00 08 1C 
30c9c 234 36 00 1E 30 
30ca0 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
30ca4 236 6E 00 00 00 
30ca8 237 00 00 00 00 
30cac 238 33 00 1E 30 
30cb0 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
30cb4 23a 6E 00 00 00 
30cb8 23b 00 00 1C 36 
30cbc 23c 1C 00 33 33 
30cc0 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
30cc4 23e 6E 00 00 00 
30cc8 23f 00 00 60 30 
30ccc 240 18 00 3E 63 
30cd0 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
30cd4 242 3E 00 00 00 
30cd8 243 00 00 00 00 
30cdc 244 00 00 3E 63 
30ce0 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
30ce4 246 3E 18 30 1E 
30ce8 247 00 00 00 1C 
30cec 248 58 78 38 18 
30cf0 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
30cf4 24a 3C 00 00 00 
30cf8 24b 00 00 00 00 
30cfc 24c 63 00 3E 63 
30d00 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
30d04 24e 3E 00 00 00 
30d08 24f 66 33 00 3E 
30d0c 250 63 63 63 63 
30d10 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
30d14 252 3E 00 00 00 
30d18 253 00 00 CC 66 
30d1c 254 33 00 3E 63 
30d20 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
30d24 256 3E 00 00 00 
30d28 257 00 00 18 3C 
30d2c 258 66 00 1C 18 
30d30 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
30d34 25a 3C 00 00 00 
30d38 25b 30 18 00 7F 
30d3c 25c 63 61 30 18 
30d40 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
30d44 25e 7F 00 00 00 
30d48 25f 00 63 00 08 
30d4c 260 1C 36 63 63 
30d50 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
30d54 262 63 00 00 00 
30d58 263 30 18 00 3C 
30d5c 264 66 43 03 03 
30d60 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
30d64 266 3C 00 00 00 
30d68 267 30 18 00 7F 
30d6c 268 66 46 16 1E 
30d70 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
30d74 26a 7F 00 00 00 
30d78 26b 0C 06 00 0F 
30d7c 26c 06 06 06 06 
30d80 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
30d84 26e 7F 00 00 00 
30d88 26f 30 18 00 1C 
30d8c 270 18 18 18 18 
30d90 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
30d94 272 3C 00 00 00 
30d98 273 00 00 08 1C 
30d9c 274 36 00 3E 63 
30da0 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
30da4 276 3E 00 00 00 
30da8 277 00 00 00 00 
30dac 278 63 00 3E 63 
30db0 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
30db4 27a 3E 00 00 00 
30db8 27b 00 00 00 6F 
30dbc 27c 46 26 06 06 
30dc0 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
30dc4 27e 7F 00 00 00 
30dc8 27f 00 00 00 6E 
30dcc 280 4C 2C 0C 0C 
30dd0 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
30dd4 282 1E 00 00 00 
30dd8 283 30 18 00 3E 
30ddc 284 63 63 06 1C 
30de0 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
30de4 286 3E 00 00 00 
30de8 287 00 00 60 30 
30dec 288 18 00 3E 63 
30df0 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
30df4 28a 3E 00 00 00 
30df8 28b 00 63 00 3E 
30dfc 28c 63 63 63 63 
30e00 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
30e04 28e 3E 00 00 00 
30e08 28f 00 63 00 63 
30e0c 290 63 63 63 63 
30e10 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
30e14 292 3E 00 00 00 
30e18 293 6C 38 00 7E 
30e1c 294 7E 5A 18 18 
30e20 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
30e24 296 3C 00 00 00 
30e28 297 00 00 60 48 
30e2c 298 2C 0C 3F 0C 
30e30 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
30e34 29a 38 00 00 00 
30e38 29b 00 00 00 0F 
30e3c 29c 26 36 1E 0E 
30e40 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
30e44 29e 7F 00 00 00 
30e48 29f 00 00 00 00 
30e4c 2a0 00 63 36 1C 
30e50 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
30e54 2a2 00 00 00 00 
30e58 2a3 00 00       | 	byte	$00[6]
30e5a 2a3 36 1C 08 00 
30e5e 2a4 3E 63 03 03 
30e62 2a5 03 63 3E 00 
30e66 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
30e6a 2a7 30 18 0C 00 
30e6e 2a8 1E 30 3E 33 
30e72 2a9 33 33 6E 00 
30e76 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
30e7a 2ab 60 30 18 00 
30e7e 2ac 1C 18 18 18 
30e82 2ad 18 18 3C 00 
30e86 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
30e8a 2af 60 30 18 00 
30e8e 2b0 3E 63 63 63 
30e92 2b1 63 63 3E 00 
30e96 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
30e9a 2b3 30 18 0C 00 
30e9e 2b4 33 33 33 33 
30ea2 2b5 33 33 6E 00 
30ea6 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
30eaa 2b7 00 08 1C 36 
30eae 2b8 63 63 7F 63 
30eb2 2b9 63 63 63 18 
30eb6 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
30eba 2bb 00 00 00 00 
30ebe 2bc 1E 30 3E 33 
30ec2 2bd 33 33 6E 18 
30ec6 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
30eca 2bf 00 7F 63 61 
30ece 2c0 30 18 0C 06 
30ed2 2c1 43 63 7F 00 
30ed6 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
30eda 2c3 36 1C 08 00 
30ede 2c4 7F 33 18 0C 
30ee2 2c5 06 63 7F 00 
30ee6 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
30eea 2c7 00 7F 66 46 
30eee 2c8 16 1E 16 06 
30ef2 2c9 46 66 7F 18 
30ef6 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
30efa 2cb 00 00 00 00 
30efe 2cc 3E 63 7F 03 
30f02 2cd 03 63 3E 18 
30f06 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
30f0a 2cf 00 3C 66 03 
30f0e 2d0 1F 03 0F 03 
30f12 2d1 03 66 3C 00 
30f16 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
30f1a 2d3 60 30 18 00 
30f1e 2d4 7F 33 18 0C 
30f22 2d5 06 63 7F 00 
30f26 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
30f2a 2d7 00 3C 66 43 
30f2e 2d8 03 03 03 03 
30f32 2d9 43 66 3C 00 
30f36 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
30f3a 2db 00 00 00 00 
30f3e 2dc 3E 63 06 1C 
30f42 2dd 30 63 3E 18 
30f46 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
30f4a 2df 00 00 00 00 
30f4e 2e0 00 00       | 	byte	$00[6]
30f50 2e1 6C 36 1B 36 
30f54 2e2 6C 00 00 00 
30f58 2e3 00 00 00 00 
30f5c 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30f60 2e5 1B 36 6C 36 
30f64 2e6 1B 00 00 00 
30f68 2e7 88 22 88 22 
30f6c 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
30f70 2e9 88 22 88 22 
30f74 2ea 88 22 88 22 
30f78 2eb AA 55 AA 55 
30f7c 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
30f80 2ed AA 55 AA 55 
30f84 2ee AA 55 AA 55 
30f88 2ef BB EE BB EE 
30f8c 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
30f90 2f1 BB EE BB EE 
30f94 2f2 BB EE BB EE 
30f98 2f3 18 18 18 18 
30f9c 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
30fa0 2f5 18 18 18 18 
30fa4 2f6 18 18 18 18 
30fa8 2f7 18 18 18 18 
30fac 2f8 18 18 18    | 	byte	$18[15]
30faf 2f8 1F 18 18 18 
30fb3 2f9 18 18 18 18 
30fb7 2fa 18 30 18 00 
30fbb 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
30fbf 2fc 63 7F 63 63 
30fc3 2fd 63 63 00 00 
30fc7 2fe 00 1C 36 00 
30fcb 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
30fcf 300 63 7F 63 63 
30fd3 301 63 63 00 00 
30fd7 302 00 36 1C 00 
30fdb 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
30fdf 304 1E 16 06 46 
30fe3 305 66 7F 00 00 
30fe7 306 00 00 00 00 
30feb 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
30fef 308 1C 30 60 63 
30ff3 309 63 3E 18 30 
30ff7 30a 1E 6C 6C 6C 
30ffb 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
30fff 30c 6F 6C 6C 6C 
31003 30d 6C 6C 6C 6C 
31007 30e 6C 6C 6C 6C 
3100b 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3100f 310 6C 6C 6C 6C 
31013 311 6C 6C 6C 6C 
31017 312 6C          | 	byte	$6c[9]
31018 313 00 00 00 00 
3101c 314 00          | 	byte	$00[5]
3101d 314 7F 60 6F 6C 
31021 315 6C 6C 6C 6C 
31025 316 6C 6C 6C 6C 
31029 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3102d 318 6F 60 7F 00 
31031 319 00 00 00 00 
31035 31a 00 00 00 18 
31039 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3103d 31c 61 30 18 0C 
31041 31d 06 43 63 7F 
31045 31e 00 00 00 00 
31049 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3104d 320 00 7F 33 18 
31051 321 0C 06 63 7F 
31055 322 00 00 00 00 
31059 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3105d 324 00 00 1F 18 
31061 325 18 18 18 18 
31065 326 18 18 18 18 
31069 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3106d 328 18 18 F8 00 
31071 329 00 00 00 00 
31075 32a 00 00 00 18 
31079 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3107d 32c 18 18 FF 00 
31081 32d 00 00 00 00 
31085 32e 00 00 00 00 
31089 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3108d 330 00 00 FF 18 
31091 331 18 18 18 18 
31095 332 18 18 18 18 
31099 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3109d 334 18 18 F8 18 
310a1 335 18 18 18 18 
310a5 336 18 18 18 00 
310a9 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
310ad 338 00 00 FF 00 
310b1 339 00 00 00 00 
310b5 33a 00 00 00 18 
310b9 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
310bd 33c 18 18 FF 18 
310c1 33d 18 18 18 18 
310c5 33e 18 18 18 63 
310c9 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
310cd 340 36 63 63 7F 
310d1 341 63 63 63 63 
310d5 342 00 00 00 00 
310d9 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
310dd 344 00 1E 30 3E 
310e1 345 33 33 33 6E 
310e5 346 00 00 00 6C 
310e9 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
310ed 348 EC 0C FC 00 
310f1 349 00 00 00 00 
310f5 34a 00 00 00 00 
310f9 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
310fd 34c FC 0C EC 6C 
31101 34d 6C 6C 6C 6C 
31105 34e 6C 6C 6C 6C 
31109 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3110d 350 EF 00 FF 00 
31111 351 00 00 00 00 
31115 352 00 00 00 00 
31119 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3111d 354 FF 00 EF 6C 
31121 355 6C 6C 6C 6C 
31125 356 6C 6C 6C 6C 
31129 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3112d 358 EC 0C EC 6C 
31131 359 6C 6C 6C 6C 
31135 35a 6C 6C 6C 00 
31139 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3113d 35c FF 00 FF 00 
31141 35d 00 00 00 00 
31145 35e 00 00 00 6C 
31149 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3114d 360 EF 00 EF 6C 
31151 361 6C 6C 6C 6C 
31155 362 6C 6C 6C 00 
31159 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3115d 364 63 3E 63 63 
31161 365 63 63 3E 63 
31165 366 00 00 00 00 
31169 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3116d 368 30 3C 36 33 
31171 369 33 33 33 6E 
31175 36a 00 00 00 00 
31179 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3117d 36c 66 66 6F 66 
31181 36d 66 66 36 1F 
31185 36e 00 00 00 36 
31189 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3118d 370 66 66 66 66 
31191 371 66 66       | 	byte	$66[6]
31193 371 36 1F 00 00 
31197 372 00 00 63 00 
3119b 373 7F 66 46 16 
3119f 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
311a3 375 66 7F 00 00 
311a7 376 00 6C 38 00 
311ab 377 38 30 30 3C 
311af 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
311b3 379 33 6E 00 00 
311b7 37a 00 36 1C 00 
311bb 37b 63 67 6F 7F 
311bf 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
311c3 37d 63 63 00 00 
311c7 37e 00 30 18 00 
311cb 37f 3C 18 18 18 
311cf 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
311d3 381 18 3C 00 00 
311d7 382 00 3C 66 00 
311db 383 3C 18 18 18 
311df 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
311e3 385 18 3C 00 00 
311e7 386 00 00 00 36 
311eb 387 1C 08 00 3E 
311ef 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
311f3 389 63 3E 00 00 
311f7 38a 00 18 18 18 
311fb 38b 18 18 18 18 
311ff 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
31203 38d 00 00 00 00 
31207 38e 00 00 00 00 
3120b 38f 00 00 00 00 | 	byte	$00[12]
3120f 390 F8 18 18 18 
31213 391 18 18 18 18 
31217 392 18 FF FF FF 
3121b 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3121f 394 FF FF FF FF 
31223 395 FF FF FF FF 
31227 396 FF          | 	byte	$ff[9]
31228 397 00 00 00 00 
3122c 398 00 00 00    | 	byte	$00[7]
3122f 398 FF FF FF FF 
31233 399 FF FF FF FF 
31237 39a FF          | 	byte	$ff[9]
31238 39b 00 00 00 7E 
3123c 39c 7E 5A 18 18 
31240 39d 18 18 18 18 
31244 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
31248 39f 1C 36 1C 63 
3124c 3a0 63 63 63 63 
31250 3a1 63 63 63 63 
31254 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
31258 3a3 FF FF FF FF 
3125c 3a4 FF FF FF    | 	byte	$ff[7]
3125f 3a4 00 00 00 00 
31263 3a5 00 00 00 00 
31267 3a6 00          | 	byte	$00[9]
31268 3a7 30 18 00 3E 
3126c 3a8 63 63 63 63 
31270 3a9 63 63 63 63 
31274 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
31278 3ab 00 00 00 1E 
3127c 3ac 33 33 33 1B 
31280 3ad 33 63 63 63 
31284 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
31288 3af 1C 36 00 3E 
3128c 3b0 63 63 63 63 
31290 3b1 63 63 63 63 
31294 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
31298 3b3 30 18 00 63 
3129c 3b4 67 6F 7F 7B 
312a0 3b5 73 63 63 63 
312a4 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
312a8 3b7 00 00 60 30 
312ac 3b8 18 00 3B 66 
312b0 3b9 66 66 66 66 
312b4 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
312b8 3bb 00 00 36 1C 
312bc 3bc 08 00 3B 66 
312c0 3bd 66 66 66 66 
312c4 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
312c8 3bf 36 1C 00 3E 
312cc 3c0 63 63 06 1C 
312d0 3c1 30 60 63 63 
312d4 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
312d8 3c3 00 00 36 1C 
312dc 3c4 08 00 3E 63 
312e0 3c5 06 1C 30 63 
312e4 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
312e8 3c7 30 18 00 3F 
312ec 3c8 66 66 66 3E 
312f0 3c9 36 66 66 66 
312f4 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
312f8 3cb 30 18 00 63 
312fc 3cc 63 63 63 63 
31300 3cd 63 63 63 63 
31304 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
31308 3cf 00 00 60 30 
3130c 3d0 18 00 3B 6E 
31310 3d1 66 06 06 06 
31314 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
31318 3d3 66 33 00 63 
3131c 3d4 63 63 63 63 
31320 3d5 63 63 63 63 
31324 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
31328 3d7 00 00 60 30 
3132c 3d8 18 00 63 63 
31330 3d9 63 63 63 63 
31334 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
31338 3db 30 18 00 66 
3133c 3dc 66 66 66 3C 
31340 3dd 18 18 18 18 
31344 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
31348 3df 00 00 00 08 
3134c 3e0 0C 0C 3F 0C 
31350 3e1 0C 0C 0C 6C 
31354 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
31358 3e3 30 18 00 00 
3135c 3e4 00 00 00 00 
31360 3e5 00 00 00 00 
31364 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31368 3e7 00 00 00 00 
3136c 3e8 00 00 00 00 | 	byte	$00[8]
31370 3e9 7F 00 00 00 
31374 3ea 00 00 00 00 
31378 3eb 66 33 00 00 
3137c 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
31380 3ed 00 00 00 00 
31384 3ee 00 00 00 00 
31388 3ef 00 00 00 00 
3138c 3f0 00 00 00 00 
31390 3f1 00 00 00 00 
31394 3f2 00          | 	byte	$00[21]
31395 3f2 0C 06 3C 36 
31399 3f3 1C 00 00 00 
3139d 3f4 00 00 00 00 
313a1 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
313a5 3f6 00 00 00 63 
313a9 3f7 3E 00 00 00 
313ad 3f8 00 00 00 00 
313b1 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
313b5 3fa 00 00 00 00 
313b9 3fb 3E 63 06 1C 
313bd 3fc 36 63 63 36 
313c1 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
313c5 3fe 00 00 00 00 
313c9 3ff 00 00 00 00 | 	byte	$00[8]
313cd 400 18 00 7E 00 
313d1 401 18 00 00 00 
313d5 402 00 00 00 00 
313d9 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
313dd 404 00 00 00 00 
313e1 405 00 00 00 00 | 	byte	$00[8]
313e5 406 18 30 1E 00 
313e9 407 00 00 1C 36 
313ed 408 36 1C 00 00 
313f1 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
313f5 40a 00 00 00 00 
313f9 40b 63 00 00 00 
313fd 40c 00 00 00 00 
31401 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31405 40e 00 00 00 18 
31409 40f 18 00 00 00 
3140d 410 00 00 00 00 
31411 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31415 412 00 00 00 00 
31419 413 00          | 	byte	$00[5]
3141a 413 CC 66 33 00 
3141e 414 33 33 33 33 
31422 415 33 33 6E 00 
31426 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3142a 417 00 3F 66 66 
3142e 418 66 3E 36 66 
31432 419 66 66 6F 00 
31436 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3143a 41b 36 1C 08 00 
3143e 41c 3B 6E 66 06 
31442 41d 06 06 0F 00 
31446 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3144a 41f 00 00 00 7E 
3144e 420 7E 7E 7E 7E 
31452 421 7E 7E 00 00 
31456 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3145a 423 00 00 00 00 
3145e 424 00 00 00 00 
31462 425 00 00 00 00 
31466 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31468 427             | 'vga_font       file "vgafont.def"
31468 427 00 00 00 00 
      ...             
31498 433 00 00 00 00 
3149c 434 00 00 00    | st_font        file "st4font.def"
3149f 434 FF FF 00 00 
314a3 435 00 00 00 00 
314a7 436 00 18 18 18 
314ab 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
314af 438 18 18 18 18 
314b3 439 18 18 18 18 
314b7 43a 18          | 	byte	$18[9]
314b8 43b 00 00 00 00 
314bc 43c 00 00 00    | 	byte	$00[7]
314bf 43c FF FF 18 18 
314c3 43d 18 18 18 18 
314c7 43e 18 18 18 18 
314cb 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
314cf 440 FF FF 00 00 
314d3 441 00 00 00 00 
314d7 442 00 18 18 18 
314db 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
314df 444 1F 1F 18 18 
314e3 445 18 18 18 18 
314e7 446 18 18 18 18 
314eb 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
314ef 448 F8 F8 18 18 
314f3 449 18 18 18 18 
314f7 44a 18 00 00 00 
314fb 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
314ff 44c 1F 1F 18 18 
31503 44d 18 18 18 18 
31507 44e 18 00 00 00 
3150b 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3150f 450 F8 F8 18 18 
31513 451 18 18 18 18 
31517 452 18 18 18 18 
3151b 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3151f 454 1F 1F 00 00 
31523 455 00 00 00 00 
31527 456 00 18 18 18 
3152b 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3152f 458 F8 F8 00 00 
31533 459 00 00 00 00 
31537 45a 00 18 18 18 
3153b 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3153f 45c FF FF 18 18 
31543 45d 18 18 18 18 
31547 45e 18 00 00 18 
3154b 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3154f 460 66 7E 7E 66 
31553 461 66 66 66 30 
31557 462 18 00 00 7E 
3155b 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3155f 464 3E 06 06 06 
31563 465 06 7E 7E 18 
31567 466 0C 30 18 3C 
3156b 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3156f 468 06 06 06 66 
31573 469 66 7E 3C 00 
31577 46a 00 30 18 66 
3157b 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3157f 46c 7E 7E 76 76 
31583 46d 66 66 66 00 
31587 46e 00 30 18 7C 
3158b 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3158f 470 1C 38 70 60 
31593 471 60 7E 3E 00 
31597 472 00 30 18 7E 
3159b 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3159f 474 18 0C 0C 06 
315a3 475 06 7E 7E 00 
315a7 476 00 18 18 00 
315ab 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
315af 478 18 18 0C 0C 
315b3 479 06 7E 7E 00 
315b7 47a 00 30 18 3C 
315bb 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
315bf 47c 66 66 66 66 
315c3 47d 66          | 	byte	$66[5]
315c4 47e 7E 3C 00 00 
315c8 47f 00 00 06 06 
315cc 480 06 06 16 1E 
315d0 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
315d4 482 7E 7E 00 00 
315d8 483 00 00 00 00 
315dc 484 00 3C 7C 60 
315e0 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
315e4 486 7E 7C 30 18 
315e8 487 00 00 00 00 
315ec 488 00 3C 7E 66 
315f0 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
315f4 48a 7E 7C 18 0C 
315f8 48b 00 00 30 18 
315fc 48c 00 3C 3E 06 
31600 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
31604 48e 7E 7C 00 00 
31608 48f 00 00 30 18 
3160c 490 00 3E 7E 66 
31610 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
31614 492 66 66 00 00 
31618 493 00 00 30 18 
3161c 494 00 7C 7E 06 
31620 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
31624 496 7E 3E 00 00 
31628 497 00 00 30 18 
3162c 498 00 7E 7E 30 
31630 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
31634 49a 7E 7E 00 00 
31638 49b 00 00 18 18 
3163c 49c 00 7E 7E 30 
31640 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
31644 49e 7E 7E 00 00 
31648 49f 00 00 30 18 
3164c 4a0 00 3C 7E 66 
31650 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
31654 4a2 7E 3C 00 00 
31658 4a3 00 00 1C 1C 
3165c 4a4 18 18 38 3C 
31660 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
31664 4a6 3C 3C 00 00 
31668 4a7 00 00 00 00 
3166c 4a8 00 00 00 00 
31670 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31674 4aa 00 00 00 00 
31678 4ab 00 00       | 	byte	$00[6]
3167a 4ab 18 18 18 18 
3167e 4ac 18 18 18 18 | 	byte	$18[8]
31682 4ad 00 00 18 18 
31686 4ae 00 00 00 00 
3168a 4af 66 66 66 66 
3168e 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
31692 4b1 00 00 00 00 
31696 4b2 00 00 00 00 
3169a 4b3 00          | 	byte	$00[9]
3169b 4b3 66 66 FF FF 
3169f 4b4 66 66 FF FF 
316a3 4b5 66 66 00 00 
316a7 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
316ab 4b7 7C 7E 06 06 
316af 4b8 3E 7C 60 60 
316b3 4b9 7E 3E 18 18 
316b7 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
316bb 4bb 66 30 30 18 
316bf 4bc 18 0C 0C 66 
316c3 4bd 66 00 00 00 
316c7 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
316cb 4bf 66 66 3C 1C 
316cf 4c0 1C FC FE 66 
316d3 4c1 66 FE FC 00 
316d7 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
316db 4c3 18 18 18 18 
316df 4c4 00 00 00 00 
316e3 4c5 00 00 00 00 
316e7 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
316eb 4c7 18 1C 0C 0C 
316ef 4c8 0C 0C 0C 0C 
316f3 4c9 1C 18 30 00 
316f7 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
316fb 4cb 18 38 30 30 
316ff 4cc 30 30 30 30 
31703 4cd 38 18 0C 00 
31707 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3170b 4cf 66 66 3C 3C 
3170f 4d0 FF FF 3C 3C 
31713 4d1 66 66 00 00 
31717 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3171b 4d3 00 18 18 18 
3171f 4d4 7E 7E 18 18 
31723 4d5 18 00 00 00 
31727 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3172b 4d7 00 00 00 00 
3172f 4d8 00 00       | 	byte	$00[6]
31731 4d9 18 18 18 18 
31735 4da 18          | 	byte	$18[5]
31736 4da 0C 04 00 00 
3173a 4db 00 00 00 00 
3173e 4dc 7E 7E 00 00 
31742 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
31746 4de 00 00 00 00 
3174a 4df 00 00 00 00 
3174e 4e0 00 00 00 00 
31752 4e1 00          | 	byte	$00[13]
31753 4e1 18 18 18 00 
31757 4e2 00 00 00 60 
3175b 4e3 60 60 30 30 
3175f 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
31763 4e5 06 06 06 00 
31767 4e6 00 00 00 3C 
3176b 4e7 7E 66 66 66 
3176f 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
31773 4e9 66 7E 3C 00 
31777 4ea 00 00 00 18 
3177b 4eb 18 1C 1C 18 
3177f 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
31783 4ed 18 7E 7E 00 
31787 4ee 00 00 00 3C 
3178b 4ef 7E 66 66 30 
3178f 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
31793 4f1 0C 7E 7E 00 
31797 4f2 00 00 00 7E 
3179b 4f3 7E 30 30 18 
3179f 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
317a3 4f5 66 7E 3C 00 
317a7 4f6 00 00 00 30 
317ab 4f7 30 38 38 3C 
317af 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
317b3 4f9 7E 30 30 00 
317b7 4fa 00 00 00 7E 
317bb 4fb 7E 06 06 3E 
317bf 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
317c3 4fd 66 7E 3C 00 
317c7 4fe 00 00 00 38 
317cb 4ff 3C 0E 06 06 
317cf 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
317d3 501 66 7E 3C 00 
317d7 502 00 00 00 7E 
317db 503 7E 60 60 30 
317df 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
317e3 505 0C 0C 0C 00 
317e7 506 00 00 00 3C 
317eb 507 7E 66 66 3C 
317ef 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
317f3 509 66 7E 3C 00 
317f7 50a 00 00 00 3C 
317fb 50b 7E 66 66 7E 
317ff 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
31803 50d 70 3C 1C 00 
31807 50e 00 00 00 00 
3180b 50f 00 00 18 18 
3180f 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
31813 511 18 18 18 00 
31817 512 00 00 00 00 
3181b 513 00 00 18 18 
3181f 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
31823 515 18 18 18 0C 
31827 516 04 00 00 00 
3182b 517 70 38 1C 0E 
3182f 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
31833 519 70 00 00 00 
31837 51a 00 00 00 00 
3183b 51b 00 00 7E 7E 
3183f 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
31843 51d 00 00 00 00 
31847 51e 00 00 00 00 | 	byte	$00[8]
3184b 51f 0E 1C 38 70 
3184f 520 E0 70 38 1C 
31853 521 0E 00 00 00 
31857 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3185b 523 7E 66 66 30 
3185f 524 30 18 18 18 
31863 525 00 18 18 00 
31867 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3186b 527 7E 66 66 66 
3186f 528 66 36 06 66 
31873 529 66 7E 3C 00 
31877 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3187b 52b 3C 7E 66 66 
3187f 52c 66 7E 7E 66 
31883 52d 66 66 66 00 
31887 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3188b 52f 7E 66 66 7E 
3188f 530 3E 66 66 66 
31893 531 66 7E 3E 00 
31897 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3189b 533 7E 66 66 06 
3189f 534 06 06 06 66 
318a3 535 66 7E 3C 00 
318a7 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
318ab 537 7E 66 66 66 
318af 538 66 66 66 66 
318b3 539 66 7E 3E 00 
318b7 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
318bb 53b 7E 06 06 3E 
318bf 53c 3E 06 06 06 
318c3 53d 06 7E 7E 00 
318c7 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
318cb 53f 7E 06 06 3E 
318cf 540 3E 06 06 06 
318d3 541 06 06 06 00 
318d7 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
318db 543 7E 06 06 76 
318df 544 76 66 66 66 
318e3 545 66 7E 3C 00 
318e7 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
318eb 547 66 66 66 7E 
318ef 548 7E 66 66 66 
318f3 549 66 66 66 00 
318f7 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
318fb 54b 7E 18 18 18 
318ff 54c 18 18 18 18 
31903 54d 18 7E 7E 00 
31907 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3190b 54f 60 60 60 60 
3190f 550 60 60 60    | 	byte	$60[7]
31912 551 66 66 7E 3C 
31916 552 00 00 00 00 
3191a 553 66 66 36 36 
3191e 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
31922 555 66 66 C6 C6 
31926 556 00 00 00 00 
3192a 557 06 06 06 06 
3192e 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
31932 559 06 06 7E 7E 
31936 55a 00 00 00 00 
3193a 55b C6 C6 EE EE 
3193e 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
31942 55d C6 C6 C6 C6 
31946 55e 00 00 00 00 
3194a 55f 66 66 66 6E 
3194e 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
31952 561 76 66 66 66 
31956 562 00 00 00 00 
3195a 563 3C 7E 66 66 
3195e 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
31962 565 66 66 7E 3C 
31966 566 00 00 00 00 
3196a 567 3E 7E 66 66 
3196e 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
31972 569 06 06 06 06 
31976 56a 00 00 00 00 
3197a 56b 3C 7E 66 66 
3197e 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
31982 56d 66 56 3E 6C 
31986 56e 00 00 00 00 
3198a 56f 3E 7E 66 66 
3198e 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
31992 571 66 66 C6 C6 
31996 572 00 00 00 00 
3199a 573 7C 7E 06 06 
3199e 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
319a2 575 60 60 7E 3E 
319a6 576 00 00 00 00 
319aa 577 7E 7E 18 18 
319ae 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
319b2 579 18 18 18 18 
319b6 57a 00 00 00 00 
319ba 57b 66 66 66 66 
319be 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
319c2 57d 66 66 7E 3C 
319c6 57e 00 00 00 00 
319ca 57f 66 66 66 66 
319ce 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
319d2 581 3C 3C 18 18 
319d6 582 00 00 00 00 
319da 583 C6 C6 C6 C6 
319de 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
319e2 585 FE EE C6 82 
319e6 586 00 00 00 00 
319ea 587 66 66 66 3C 
319ee 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
319f2 589 3C 66 66 66 
319f6 58a 00 00 00 00 
319fa 58b 66 66 66 66 
319fe 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
31a02 58d 18 18 18 18 
31a06 58e 00 00 00 00 
31a0a 58f 7E 7E 30 30 
31a0e 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
31a12 591 06 06 7E 7E 
31a16 592 00 00 00 00 
31a1a 593 3C 3C 0C 0C 
31a1e 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
31a22 595 0C 0C 3C 3C 
31a26 596 00 00 00 00 
31a2a 597 06 06 0C 0C 
31a2e 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
31a32 599 60 60 C0 C0 
31a36 59a 00 00 00 00 
31a3a 59b 3C 3C 30 30 
31a3e 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
31a42 59d 30 30 3C 3C 
31a46 59e 00 00 00 00 
31a4a 59f 18 18 3C 3C 
31a4e 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
31a52 5a1 00 00 00 00 
31a56 5a2 00 00 00 00 
31a5a 5a3 00 00 00 00 
31a5e 5a4 00 00 00 00 
31a62 5a5 00 00       | 	byte	$00[18]
31a64 5a6 FE FE 00 00 
31a68 5a7 00 00 0C 0C 
31a6c 5a8 18 18 00 00 
31a70 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
31a74 5aa 00 00 00 00 
31a78 5ab 00 00 00 00 
31a7c 5ac 00          | 	byte	$00[9]
31a7d 5ac 3C 7C 60 7C 
31a81 5ad 7E 66 66 7E 
31a85 5ae 7C 00 00 00 
31a89 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
31a8d 5b0 3E 7E 66 66 
31a91 5b1 66 66 66 7E 
31a95 5b2 3E 00 00 00 
31a99 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
31a9d 5b4 3C 3E 06 06 
31aa1 5b5 06 06 06 7E 
31aa5 5b6 7C 00 00 00 
31aa9 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
31aad 5b8 7C 7E 66 66 
31ab1 5b9 66 66 66 7E 
31ab5 5ba 7C 00 00 00 
31ab9 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
31abd 5bc 3C 7E 66 66 
31ac1 5bd 7E 06 06 7E 
31ac5 5be 7C 00 00 00 
31ac9 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
31acd 5c0 18 7E 7E 18 
31ad1 5c1 18 18 18 18 
31ad5 5c2 18 00 00 00 
31ad9 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
31add 5c4 7C 7E 66 66 
31ae1 5c5 66 66 7E 7C 
31ae5 5c6 60 7E 3E 00 
31ae9 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
31aed 5c8 3E 7E 66 66 
31af1 5c9 66 66 66 66 
31af5 5ca 66 00 00 00 
31af9 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
31afd 5cc 1C 1C 18 18 
31b01 5cd 18 18 18 3C 
31b05 5ce 3C 00 00 00 
31b09 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
31b0d 5d0 30 30 30 30 
31b11 5d1 30 30 30 30 
31b15 5d2 30          | 	byte	$30[9]
31b16 5d2 3E 1E 00 00 
31b1a 5d3 06 06 06 36 
31b1e 5d4 36 1E 1E 1E 
31b22 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
31b26 5d6 00 00 00 00 
31b2a 5d7 1C 1C 18 18 
31b2e 5d8 18 18 18 18 
31b32 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
31b36 5da 00 00 00 00 
31b3a 5db 00 00 00    | 	byte	$00[7]
31b3d 5dc 6C FE FE D6 
31b41 5dd D6 C6 C6 C6 
31b45 5de C6 00 00 00 
31b49 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
31b4d 5e0 3E 7E 66 66 
31b51 5e1 66 66 66 66 
31b55 5e2 66 00 00 00 
31b59 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
31b5d 5e4 3C 7E 66 66 
31b61 5e5 66 66 66 7E 
31b65 5e6 3C 00 00 00 
31b69 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
31b6d 5e8 3E 7E 66 66 
31b71 5e9 66 66 66 7E 
31b75 5ea 3E 06 06 00 
31b79 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
31b7d 5ec 7C 7E 66 66 
31b81 5ed 66 66 66 7E 
31b85 5ee 7C 60 60 00 
31b89 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
31b8d 5f0 3E 7E 66 06 
31b91 5f1 06 06 06 06 
31b95 5f2 06 00 00 00 
31b99 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
31b9d 5f4 7C 7E 06 0E 
31ba1 5f5 3C 70 60 7E 
31ba5 5f6 3E 00 00 00 
31ba9 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
31bad 5f8 7E 7E 18 18 
31bb1 5f9 18 18 18 78 
31bb5 5fa 70 00 00 00 
31bb9 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
31bbd 5fc 66 66 66 66 
31bc1 5fd 66 66 66    | 	byte	$66[7]
31bc4 5fe 7E 7C 00 00 
31bc8 5ff 00 00 00 00 
31bcc 600 00 66 66 66 
31bd0 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
31bd4 602 18 18 00 00 
31bd8 603 00 00 00 00 
31bdc 604 00 C6 C6 D6 
31be0 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
31be4 606 C6 82 00 00 
31be8 607 00 00 00 00 
31bec 608 00 66 66 3C 
31bf0 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
31bf4 60a 66 66 00 00 
31bf8 60b 00 00 00 00 
31bfc 60c 00 66 66 66 
31c00 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
31c04 60e 7C 60 7E 3E 
31c08 60f 00 00 00 00 
31c0c 610 00 7E 7E 30 
31c10 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
31c14 612 7E 7E 00 00 
31c18 613 00 00 30 18 
31c1c 614 18 18 18 0C 
31c20 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
31c24 616 18 30 00 00 
31c28 617 00 00 18 18 
31c2c 618 18 18 18 18 
31c30 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
31c34 61a 18 18 00 00 
31c38 61b 00 00 0C 18 
31c3c 61c 18 18 18 30 
31c40 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
31c44 61e 18 0C 00 00 
31c48 61f 00 00 6C 7E 
31c4c 620 36 00 00 00 
31c50 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
31c54 622 00 00 00 00 
31c58 623 00 00 00 00 
31c5c 624 00          | 	byte	$00[9]
31c5d 624 18 18 18 18 
31c61 625 18 18 00 00 
31c65 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
31c68 627             | 'amiga_font     file "amigafont.def"
31c68 627 00 6C FE FE 
31c6c 628 7C 38 10 00 
31c70 629 18 18 18 F8 
31c74 62a F8 18 18 18 | a8_font        file "atari8.fnt"
31c78 62b C0 C0 C0 C0 
31c7c 62c C0 C0 C0 C0 | 	byte	$c0[8]
31c80 62d 18 18 18 1F 
31c84 62e 1F 00 00 00 
31c88 62f 18 18 18 1F 
31c8c 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
31c90 631 00 00 00 1F 
31c94 632 1F 18 18 18 
31c98 633 C0 E0 70 38 
31c9c 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
31ca0 635 03 07 0E 1C 
31ca4 636 38 70 E0 C0 
31ca8 637 80 C0 E0 F0 
31cac 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
31cb0 639 00 00 00 00 
31cb4 63a F0 F0 F0 F0 
31cb8 63b 01 03 07 0F 
31cbc 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
31cc0 63d F0 F0 F0 F0 
31cc4 63e 00 00 00 00 
31cc8 63f 0F 0F 0F 0F 
31ccc 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
31cd0 641 FF FF 00 00 
31cd4 642 00 00 00 00 
31cd8 643 00 00 00 00 
31cdc 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
31ce0 645 00 00 00 00 
31ce4 646 0F 0F 0F 0F 
31ce8 647 00 38 38 EE 
31cec 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
31cf0 649 00 00 00 F8 
31cf4 64a F8 18 18 18 
31cf8 64b 00 00 00 FF 
31cfc 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
31d00 64d 18 18 18 FF 
31d04 64e FF 18 18 18 
31d08 64f 00 00 3C 7E 
31d0c 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
31d10 651 00 00 00 00 
31d14 652 FF FF FF FF 
31d18 653 03 03 03 03 
31d1c 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
31d20 655 00 00 00 FF 
31d24 656 FF 18 18 18 
31d28 657 18 18 18 FF 
31d2c 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
31d30 659 0F 0F 0F 0F 
31d34 65a 0F 0F 0F 0F | 	byte	$0f[8]
31d38 65b 18 18 18 F8 
31d3c 65c F8 00 00 00 
31d40 65d 1E 06 1E 06 
31d44 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
31d48 65f 00 18 3C 7E 
31d4c 660 18 18 18 00 
31d50 661 00 18 18 18 
31d54 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
31d58 663 00 18 0C 7E 
31d5c 664 0C 18 00 00 
31d60 665 00 18 30 7E 
31d64 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
31d68 667 00 00 00 00 
31d6c 668 00 00 00 00 
31d70 669 00          | 	byte	$00[9]
31d71 669 18 18 18 18 
31d75 66a 00 18 00 00 
31d79 66b 66 66 66 00 
31d7d 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
31d81 66d 66 FF 66 66 
31d85 66e FF 66 00 18 
31d89 66f 7C 06 3C 60 
31d8d 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
31d91 671 66 36 18 0C 
31d95 672 66 62 00 38 
31d99 673 6C 38 1C F6 
31d9d 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
31da1 675 18 18 18 00 
31da5 676 00 00 00 00 
31da9 677 70 38 18 18 
31dad 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
31db1 679 0E 1C 18 18 
31db5 67a 1C 0E 00 00 
31db9 67b 66 3C FF 3C 
31dbd 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
31dc1 67d 18 18 7E 18 
31dc5 67e 18 00 00 00 
31dc9 67f 00 00 00 00 
31dcd 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
31dd1 681 00 00 7E 00 
31dd5 682 00 00 00 00 
31dd9 683 00 00 00 00 
31ddd 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
31de1 685 60 30 18 0C 
31de5 686 06 02 00 00 
31de9 687 3C 66 76 6E 
31ded 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
31df1 689 18 1C 18 18 
31df5 68a 18 7E 00 00 
31df9 68b 3C 66 30 18 
31dfd 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
31e01 68d 7E 30 18 30 
31e05 68e 66 3C 00 00 
31e09 68f 30 38 3C 36 
31e0d 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
31e11 691 7E 06 3E 60 
31e15 692 66 3C 00 00 
31e19 693 3C 06 3E 66 
31e1d 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
31e21 695 7E 60 30 18 
31e25 696 0C 0C 00 00 
31e29 697 3C 66 3C 66 
31e2d 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
31e31 699 3C 66 7C 60 
31e35 69a 30 1C 00 00 
31e39 69b 00 18 18 00 
31e3d 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
31e41 69d 00 18 18 00 
31e45 69e 18 18 0C 60 
31e49 69f 30 18 0C 18 
31e4d 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
31e51 6a1 00 7E 00 00 
31e55 6a2 7E 00 00 06 
31e59 6a3 0C 18 30 18 
31e5d 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
31e61 6a5 3C 66 30 18 
31e65 6a6 00 18 00 00 
31e69 6a7 3C 66 76 76 
31e6d 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
31e71 6a9 18 3C 66 66 
31e75 6aa 7E 66 00 00 
31e79 6ab 3E 66 3E 66 
31e7d 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
31e81 6ad 3C 66 06 06 
31e85 6ae 66 3C 00 00 
31e89 6af 1E 36 66 66 
31e8d 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
31e91 6b1 7E 06 3E 06 
31e95 6b2 06 7E 00 00 
31e99 6b3 7E 06 3E 06 
31e9d 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
31ea1 6b5 7C 06 06 76 
31ea5 6b6 66 7C 00 00 
31ea9 6b7 66 66 7E 66 
31ead 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
31eb1 6b9 7E 18 18 18 
31eb5 6ba 18 7E 00 00 
31eb9 6bb 60 60 60 60 
31ebd 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
31ec1 6bd 66 36 1E 1E 
31ec5 6be 36 66 00 00 
31ec9 6bf 06 06 06 06 
31ecd 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
31ed1 6c1 C6 EE FE D6 
31ed5 6c2 C6 C6 00 00 
31ed9 6c3 66 6E 7E 7E 
31edd 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
31ee1 6c5 3C 66 66 66 
31ee5 6c6 66 3C 00 00 
31ee9 6c7 3E 66 66 3E 
31eed 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
31ef1 6c9 3C 66 66 66 
31ef5 6ca 36 6C 00 00 
31ef9 6cb 3E 66 66 3E 
31efd 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
31f01 6cd 3C 06 3C 60 
31f05 6ce 60 3C 00 00 
31f09 6cf 7E 18 18 18 
31f0d 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
31f11 6d1 66 66 66 66 
31f15 6d2 66          | 	byte	$66[5]
31f16 6d2 7E 00 00 66 
31f1a 6d3 66 66 66 3C 
31f1e 6d4 18 00 00 C6 
31f22 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
31f26 6d6 C6 00 00 66 
31f2a 6d7 66 3C 3C 66 
31f2e 6d8 66 00 00 66 
31f32 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
31f36 6da 18 00 00 7E 
31f3a 6db 30 18 0C 06 
31f3e 6dc 7E 00 00 78 
31f42 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
31f46 6de 78 00 00 02 
31f4a 6df 06 0C 18 30 
31f4e 6e0 60 00 00 1E 
31f52 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
31f56 6e2 1E 00 00 10 
31f5a 6e3 38 6C C6 00 
31f5e 6e4 00 00 00 00 
31f62 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
31f66 6e6 FF 00 00 18 
31f6a 6e7 3C 7E 7E 3C 
31f6e 6e8 18 00 00 00 
31f72 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
31f76 6ea 7C 00 00 06 
31f7a 6eb 06 3E 66 66 
31f7e 6ec 3E 00 00 00 
31f82 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
31f86 6ee 3C 00 00 60 
31f8a 6ef 60 7C 66 66 
31f8e 6f0 7C 00 00 00 
31f92 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
31f96 6f2 3C 00 00 70 
31f9a 6f3 18 7C 18 18 
31f9e 6f4 18 00 00 00 
31fa2 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
31fa6 6f6 60 3E 00 06 
31faa 6f7 06 3E 66 66 
31fae 6f8 66 00 00 18 
31fb2 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
31fb6 6fa 3C 00 00 60 
31fba 6fb 00 60 60 60 
31fbe 6fc 60 3C 00 06 
31fc2 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
31fc6 6fe 66 00 00 1C 
31fca 6ff 18 18 18 18 
31fce 700 3C 00 00 00 
31fd2 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
31fd6 702 C6 00 00 00 
31fda 703 3E 66 66 66 
31fde 704 66 00 00 00 
31fe2 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
31fe6 706 3C 00 00 00 
31fea 707 3E 66 66 3E 
31fee 708 06 06 00 00 
31ff2 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
31ff6 70a 60 60 00 00 
31ffa 70b 3E 66 06 06 
31ffe 70c 06 00 00 00 
32002 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
32006 70e 3E 00 00 18 
3200a 70f 7E 18 18 18 
3200e 710 70 00 00 00 
32012 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
32016 712 7C 00 00 00 
3201a 713 66 66 66 3C 
3201e 714 18 00 00 00 
32022 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
32026 716 6C 00 00 00 
3202a 717 66 3C 18 3C 
3202e 718 66 00 00 00 
32032 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
32036 71a 30 1E 00 00 
3203a 71b 7E 30 18 0C 
3203e 71c 7E 00 00 18 
32042 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
32046 71e 3C 00 18 18 
3204a 71f 18 18 18 18 
3204e 720 18 18 00 7E 
32052 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
32056 722 60 00 10 18 
3205a 723 1C 1E 1C 18 
3205e 724 10 00 08 18 
32062 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
32066 726 08 00       | 	byte	$08, $00
32068 727 00 00 00 00 
3206c 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3206d 728 80 00 00 00 
32071 729 00 80 00 00 
32075 72a 80 80 00 00 
32079 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3207d 72c 80 00 80 00 
32081 72d 00 40 80 00 
32085 72e AA AA AA 00 
32089 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3208d 730 FF 00 00 00 
32091 731 00 FF 00 00 
32095 732 FF FF 00 00 
32099 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3209d 734 FF 00 FF 00 
320a1 735 00 FF FF 00 
320a5 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
320a8 737 00 00 00 00 
320ac 738 00          | ataripalette   file "ataripalettep2.def"
320ad 738 11 11 11 00 
320b1 739 22 22 22 00 
320b5 73a 33 33 33 00 
320b9 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
320bd 73c 55 55 55 00 
320c1 73d 66 66 66 00 
320c5 73e 77 77 77 00 
320c9 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
320cd 740 99 99 99 00 
320d1 741 AA AA AA 00 
320d5 742 BB BB BB 00 
320d9 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
320dd 744 DD DD DD 00 
320e1 745 EE EE EE 00 
320e5 746 FF FF FF 00 
320e9 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
320ed 748 00 14 40 00 
320f1 749 00 1E 60 00 
320f5 74a 00 28 80 00 
320f9 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
320fd 74c 00 3C BF 00 
32101 74d 00 46 DF 00 
32105 74e 00 50 FF 00 
32109 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3210d 750 39 77 FF 00 
32111 751 55 8A FF 00 
32115 752 71 9E FF 00 
32119 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3211d 754 AA C5 FF 00 
32121 755 C6 D8 FF 00 
32125 756 E3 EC FF 00 
32129 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3212d 758 00 00 40 00 
32131 759 00 00 60 00 
32135 75a 00 00 80 00 
32139 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3213d 75c 00 00 BF 00 
32141 75d 00 00 DF 00 
32145 75e 00 00 FF 00 
32149 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3214d 760 39 39 FF 00 
32151 761 55 55 FF 00 
32155 762 71 71 FF 00 
32159 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3215d 764 AA AA FF 00 
32161 765 C6 C6 FF 00 
32165 766 E3 E3 FF 00 
32169 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3216d 768 20 00 40 00 
32171 769 30 00 60 00 
32175 76a 40 00 80 00 
32179 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3217d 76c 60 00 BF 00 
32181 76d 70 00 DF 00 
32185 76e 80 00 FF 00 
32189 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3218d 770 9C 39 FF 00 
32191 771 AA 55 FF 00 
32195 772 B8 71 FF 00 
32199 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3219d 774 D5 AA FF 00 
321a1 775 E3 C6 FF 00 
321a5 776 F1 E3 FF 00 
321a9 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
321ad 778 40 00 40 00 
321b1 779 60 00 60 00 
321b5 77a 80 00 80 00 
321b9 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
321bd 77c BF 00 BF 00 
321c1 77d DF 00 DF 00 
321c5 77e FF 00 FF 00 
321c9 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
321cd 780 FF 39 FF 00 
321d1 781 FF 55 FF 00 
321d5 782 FF 71 FF 00 
321d9 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
321dd 784 FF AA FF 00 
321e1 785 FF C6 FF 00 
321e5 786 FF E3 FF 00 
321e9 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
321ed 788 40 00 20 00 
321f1 789 60 00 30 00 
321f5 78a 80 00 40 00 
321f9 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
321fd 78c BF 00 60 00 
32201 78d DF 00 70 00 
32205 78e FF 00 80 00 
32209 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3220d 790 FF 39 9C 00 
32211 791 FF 55 AA 00 
32215 792 FF 71 B8 00 
32219 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3221d 794 FF AA D5 00 
32221 795 FF C6 E3 00 
32225 796 FF E3 F1 00 
32229 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3222d 798 40 00 00 00 
32231 799 60 00 00 00 
32235 79a 80 00 00 00 
32239 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3223d 79c BF 00 00 00 
32241 79d DF 00 00 00 
32245 79e FF 00 00 00 
32249 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3224d 7a0 FF 39 39 00 
32251 7a1 FF 55 55 00 
32255 7a2 FF 71 71 00 
32259 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3225d 7a4 FF AA AA 00 
32261 7a5 FF C6 C6 00 
32265 7a6 FF E3 E3 00 
32269 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3226d 7a8 40 10 00 00 
32271 7a9 60 18 00 00 
32275 7aa 80 20 00 00 
32279 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3227d 7ac BF 30 00 00 
32281 7ad DF 38 00 00 
32285 7ae FF 40 00 00 
32289 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3228d 7b0 FF 6A 39 00 
32291 7b1 FF 80 55 00 
32295 7b2 FF 95 71 00 
32299 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3229d 7b4 FF BF AA 00 
322a1 7b5 FF D5 C6 00 
322a5 7b6 FF EA E3 00 
322a9 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
322ad 7b8 40 20 00 00 
322b1 7b9 60 30 00 00 
322b5 7ba 80 40 00 00 
322b9 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
322bd 7bc BF 60 00 00 
322c1 7bd DF 70 00 00 
322c5 7be FF 80 00 00 
322c9 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
322cd 7c0 FF 9C 39 00 
322d1 7c1 FF AA 55 00 
322d5 7c2 FF B8 71 00 
322d9 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
322dd 7c4 FF D5 AA 00 
322e1 7c5 FF E3 C6 00 
322e5 7c6 FF F1 E3 00 
322e9 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
322ed 7c8 40 30 00 00 
322f1 7c9 60 48 00 00 
322f5 7ca 80 60 00 00 
322f9 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
322fd 7cc BF 90 00 00 
32301 7cd DF A8 00 00 
32305 7ce FF C0 00 00 
32309 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3230d 7d0 FF CE 39 00 
32311 7d1 FF D5 55 00 
32315 7d2 FF DC 71 00 
32319 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3231d 7d4 FF EA AA 00 
32321 7d5 FF F1 C6 00 
32325 7d6 FF F8 E3 00 
32329 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3232d 7d8 30 40 00 00 
32331 7d9 48 60 00 00 
32335 7da 60 80 00 00 
32339 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3233d 7dc 90 BF 00 00 
32341 7dd A8 DF 00 00 
32345 7de C0 FF 00 00 
32349 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3234d 7e0 CE FF 39 00 
32351 7e1 D5 FF 55 00 
32355 7e2 DC FF 71 00 
32359 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3235d 7e4 EA FF AA 00 
32361 7e5 F1 FF C6 00 
32365 7e6 F8 FF E3 00 
32369 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3236d 7e8 00 40 00 00 
32371 7e9 00 60 00 00 
32375 7ea 00 80 00 00 
32379 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3237d 7ec 00 BF 00 00 
32381 7ed 00 DF 00 00 
32385 7ee 00 FF 00 00 
32389 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3238d 7f0 39 FF 39 00 
32391 7f1 55 FF 55 00 
32395 7f2 71 FF 71 00 
32399 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3239d 7f4 AA FF AA 00 
323a1 7f5 C6 FF C6 00 
323a5 7f6 E3 FF E3 00 
323a9 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
323ad 7f8 00 40 14 00 
323b1 7f9 00 60 1E 00 
323b5 7fa 00 80 28 00 
323b9 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
323bd 7fc 00 BF 3C 00 
323c1 7fd 00 DF 46 00 
323c5 7fe 00 FF 50 00 
323c9 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
323cd 800 39 FF 77 00 
323d1 801 55 FF 8A 00 
323d5 802 71 FF 9E 00 
323d9 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
323dd 804 AA FF C5 00 
323e1 805 C6 FF D8 00 
323e5 806 E3 FF EC 00 
323e9 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
323ed 808 00 40 28 00 
323f1 809 00 60 3C 00 
323f5 80a 00 80 50 00 
323f9 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
323fd 80c 00 BF 78 00 
32401 80d 00 DF 8C 00 
32405 80e 00 FF A0 00 
32409 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3240d 810 39 FF B5 00 
32411 811 55 FF C0 00 
32415 812 71 FF CA 00 
32419 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3241d 814 AA FF DF 00 
32421 815 C6 FF EA 00 
32425 816 E3 FF F4 00 
32429 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3242d 818 00 40 40 00 
32431 819 00 60 60 00 
32435 81a 00 80 80 00 
32439 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3243d 81c 00 BF BF 00 
32441 81d 00 DF DF 00 
32445 81e 00 FF FF 00 
32449 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3244d 820 39 FF FF 00 
32451 821 55 FF FF 00 
32455 822 71 FF FF 00 
32459 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3245d 824 AA FF FF 00 
32461 825 C6 FF FF 00 
32465 826 E3 FF FF 00 
32469 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3246d 828 00 28 40 00 
32471 829 00 3C 60 00 
32475 82a 00 50 80 00 
32479 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3247d 82c 00 78 BF 00 
32481 82d 00 8C DF 00 
32485 82e 00 A0 FF 00 
32489 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3248d 830 39 B5 FF 00 
32491 831 55 C0 FF 00 
32495 832 71 CA FF 00 
32499 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3249d 834 AA DF FF 00 
324a1 835 C6 EA FF 00 
324a5 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
324a8 837             | 
324a8 837             | '**********************************************************************************
324a8 837             | '
324a8 837             | '        Timings and colors definitions
324a8 837             | '
324a8 837             | '**********************************************************************************
324a8 837             | 
324a8 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
324a8 837 08 00 00 00 
324ac 838 3C 00 00 00 
324b0 839 08 00 00 00 
324b4 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         336956522,   %1_101101__11_0000_0110__1111_1011,   600,        0,     192, 0, 0
324b8 83b 07 00 00 00 
324bc 83c 04 00 00 00 
324c0 83d 01 00 00 00 
324c4 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
324c8 83f 58 02 00 00 
324cc 840 6A 8C 15 14 
324d0 841 FB 06 B7 01 
324d4 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $58, $02, $00, $00
324d8 843 00 00 00 00 
324dc 844 C0 00 00 00 
324e0 845 00 00 00 00 
324e4 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
324e8 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
324e8 847 00 75 C7 97 
324ec 848 27 47 F6 0A 
324f0 849 05 79 CB 9B 
324f4 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
324f8 84b             | 
324f8 84b             | ''--------  Initialization  ----------------------------------------------------------------
324f8 84b             | 
324f8 84b 28 0C 64 FD | hdmi            setq    #6
324fc 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
32500 84d 28 10 64 FD |                 setq    #8
32504 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
32508 84f             | 
32508 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3250c 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
32510 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
32514 852 D6 C6 01 F1 |                 add     t1,hbase
32518 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3251c 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
32520 855 7B 0B 80 5F 
32524 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
32528 857 66 66 86 FF 
3252c 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
32530 859             | '
32530 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
32534 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
32538 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3253c 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
32540 85d             | 
32540 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
32544 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
32548 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3254c 860             | 
3254c 860             | ''--------  frame rendering main loop  ---------------------------------------------------
3254c 860             | 
3254c 860 28 06 64 FD | p101            setq 	#3
32550 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
32554 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
32558 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3255c 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
32560 865 00 A0 05 F6 |                 mov     dlinum, #0
32564 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
32568 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3256c 868             | 
3256c 868             | 
3256c 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
32570 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
32574 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
32578 86b             |                 
32578 86b             | 
32578 86b             | 
32578 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
32578 86b             |   
32578 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3257c 86c 29 FE 65 3D |          if_nc  setq2   #255
32580 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
32584 86e             | 
32584 86e             | '' -----   up porch (before the picture)
32584 86e             | 
32584 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
32588 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3258c 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
32590 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
32594 872             |  
32594 872             |    
32594 872             |  
32594 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
32598 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
3259c 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
325a0 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
325a4 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
325a8 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
325ac 878             | 
325ac 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
325b0 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
325b4 87a 48 00 B0 FD | 		call    #dli
325b8 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
325bc 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
325c0 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
325c4 87e             |                 	
325c4 87e             |                 
325c4 87e             | 
325c4 87e             |  
325c4 87e             | '' ------- the main screen drawing starts here
325c4 87e             | 
325c4 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
325c8 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
325cc 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
325d0 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
325d4 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
325d8 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
325dc 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
325e0 885             |               
325e0 885             | 
325e0 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
325e4 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
325e8 887             | 
325e8 887             | ' ---------------- All visible lines displayed now, start vblank  
325e8 887             | 
325e8 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
325ec 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
325f0 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
325f4 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
325f8 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
325fc 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
32600 88d             | 
32600 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
32600 88d             | 
32600 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
32600 88d             | 
32600 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
32604 88e             | 
32604 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
32608 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3260c 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
32610 891             | 
32610 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
32614 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
32618 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3261c 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
32620 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
32624 896             | 
32624 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
32628 897 DD C6 41 F8 |                 getnib  t1,dl,#0
3262c 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
32630 899 70 00 90 AD |     if_z        jmp     #preload
32634 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
32638 89b 94 00 90 AD |     if_z        jmp     #preload2
3263c 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
32640 89d 0C 00 90 AD |     if_z        jmp     #p390
32644 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
32648 89f 28 00 90 AD |     if_z        jmp     #p391  
3264c 8a0             | 
3264c 8a0 2D 00 64 FD | p308            ret
32650 8a1             |    
32650 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
32654 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
32658 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3265c 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
32660 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
32664 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
32668 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3266c 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
32670 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
32674 8aa             |  
32674 8aa             | '' --------  Reload palette. To do 
32674 8aa             | 
32674 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
32678 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3267c 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
32680 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
32684 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
32688 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
3268c 8b0 70 FF 9F FD |         	jmp     #dli                
32690 8b1             |       
32690 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
32690 8b1             | 
32690 8b1             | 
32690 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
32690 8b1             | 
32690 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
32694 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
32698 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3269c 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
326a0 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
326a4 8b6             |         
326a4 8b6             | '' -------------- Preload a line from PSRAM        
326a4 8b6             |         
326a4 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
326a8 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
326ac 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
326b0 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
326b4 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
326b8 8bb             | 
326b8 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
326bc 8bc 32 B7 01 F6 |                 mov     buf2,a1024
326c0 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
326c4 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
326c8 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
326cc 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
326d0 8c1             |  
326d0 8c1             |  
326d0 8c1             | preload2      '  incmod  dlinum,#3
326d0 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
326d4 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
326d8 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
326dc 8c4 28 02 64 FD |                 setq	#1
326e0 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
326e4 8c6             |                 
326e4 8c6             | 
326e4 8c6             | '' -------------- Draw sprites
326e4 8c6             | 
326e4 8c6 CF 5C 02 F6 | sprite          mov t8,frames
326e8 8c7 10 5C 0E F5 | 		and t8,#16 wz
326ec 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
326f0 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
326f4 8ca             | 		
326f4 8ca             | 
326f4 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
326f8 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
326fc 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
32700 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
32704 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
32708 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
3270c 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
32710 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
32714 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
32718 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3271c 8d4 01 52 86 F1 |                 sub     sprite_h,#1
32720 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
32724 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
32728 8d7             | 
32728 8d7             | 
32728 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3272c 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
32730 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
32734 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
32738 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3273c 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
32740 8dd 00 5E 06 F6 |                 mov 	t9,#0
32744 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
32748 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3274c 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
32750 8e1             |      
32750 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
32754 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
32758 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3275c 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
32760 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
32764 8e6             |                 
32764 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
32768 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3276c 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
32770 8e9             |   		
32770 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
32774 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
32778 8eb             | 
32778 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3277c 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
32780 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
32784 8ee             |  
32784 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
32788 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3278c 8f0 10 00 90 CD |      if_c 	jmp     #p899		
32790 8f1             | 	
32790 8f1             | 	
32790 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
32794 8f2 28 CD 01 F1 | 		add	t4,sprite_w
32798 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3279c 8f4             | 
3279c 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
327a0 8f5             | 
327a0 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
327a4 8f6 01 58 86 F1 | 	 	sub     t6,#1
327a8 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
327ac 8f8             | 
327ac 8f8 28 58 62 FD |                 setq   	t6
327b0 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
327b4 8fa 28 5D 02 F6 |                 mov t8,sprite_w
327b8 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
327bc 8fc 24 00 90 AD |         if_z    jmp #p898
327c0 8fd             |          
327c0 8fd             |         
327c0 8fd 70 5F 06 F6 |                 mov  t9,#368
327c4 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
327c8 8ff             | 
327c8 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
327cc 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
327d0 901 FF FF 7F FF 
327d4 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
327d8 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
327dc 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
327e0 905 2D 01 00 F5 |                 and 0-0, t7
327e4 906             |                
327e4 906             | 
327e4 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
327e8 907 E5 E0 7A FA |                 wmlong 368,t3				
327ec 908             |                 
327ec 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
327f0 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
327f4 90a 2D 00 64 FD |                 ret
327f8 90b             | 	
327f8 90b             | 	
327f8 90b             |                
327f8 90b             |  
327f8 90b             | '' -------------- Graphics line ------------------------------------------------------------
327f8 90b             |  
327f8 90b             | 
327f8 90b             | '' consts and vars
327f8 90b             | 
327f8 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
327fc 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
32800 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
32804 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
32808 90f             | 
32808 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3280c 910             | 
3280c 910             | '------ these longs will be set by setmode function
3280c 910             | 
3280c 910 00 00 00 00 | m_bs            long    0        'blanks before sync
32810 911 00 00 00 00 | m_sn            long    0        'sync
32814 912 00 00 00 00 | m_bv            long    0        'blanks before visible
32818 913 00 00 00 00 | m_vi            long    0        'visible pixels #
3281c 914             | 'm_border        long    0        'left/right borders
3281c 914 00 00 00 00 | i_upporch       long    0        'up porch lines
32820 915 00 00 00 00 | i_vsync         long    0        'vsync lines
32824 916 00 00 00 00 | i_downporch     long    0        'down porch lines
32828 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3282c 918 00 00 00 00 | i_totalvis      long    0
32830 919             | 
32830 919             | '-------------------------------------
32830 919             |  
32830 919 00 00 00 00 | linenum         long    0
32834 91a 00 00 00 00 | frames          long    0
32838 91b 00 00 00 00 | dlinum long 0
3283c 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
32840 91d             | 
32840 91d 00 00 00 00 | vblankptr       long    0
32844 91e 00 00 00 00 | modeptr         long    0
32848 91f 00 00 00 00 | paletteptr      long    0
3284c 920 00 00 00 00 | dlptr           long    0
32850 921 01 00 00 00 | hbase           long    1
32854 922 00 00 00 00 | mailbox         long    0
32858 923 00 00 00 00 | spriteptr          long 0
3285c 924             | 
3285c 924 00 00 00 00 | cmd             long    0
32860 925 00 B0 07 00 | buf1            long    $80000-16384-4096
32864 926 00 04 00 00 | buf2            long    1024
32868 927 01 00 00 00 | dlptr2          long    1
3286c 928 01 00 00 00 | dl              long    1
32870 929             | 
32870 929 00 00 00 00 | buf1c long 0
32874 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
32878 92b 01 00 00 00 | framebuf2       long    1
3287c 92c 01 00 00 00 | hsync0          long    1
32880 92d 01 00 00 00 | hsync1          long    1
32884 92e             | 
32884 92e 01 00 00 00 | t1              long    1
32888 92f 00 00 00 00 | t2 long 0
3288c 930 00 00 00 00 | t3 long 0
32890 931 00 00 00 00 | t4 long 0
32894 932             | 
32894 932 00 00 00 00 | rcnt            long    0  'dl repeat count
32898 933 00 00 00 00 | rcnt2           long    0
3289c 934 00 00 00 00 | rcnt2a          long    0
328a0 935 00 00 00 00 | roffset         long    0
328a4 936 00 00 00 00 | rdl             long    0  'dl repeat line
328a8 937 00 00 00 00 | dlc             long    0  'dl command
328ac 938             | 
328ac 938 FF FF FF FF | affffffff       long    $ffffffff
328b0 939 00 00 00 00 | sprite1pointer long 0
328b4 93a 00 00 00 00 | sprite1xy      long 0
328b8 93b 00 00 00 00 | sprite1wh      long 0
328bc 93c 00 00 00 00 | sprite2pointer long 0
328c0 93d 00 00 00 00 | sprite2xy      long 0
328c4 93e 00 00 00 00 | sprite2wh      long 0
328c8 93f 00 00 00 00 | sprite3pointer long 0
328cc 940 00 00 00 00 | sprite3xy      long 0
328d0 941 00 00 00 00 | sprite3wh      long 0
328d4 942 00 00 00 00 | sprite4pointer long 0
328d8 943 00 00 00 00 | sprite4xy      long 0
328dc 944 00 00 00 00 | sprite4wh      long 0
328e0 945 00 00 00 00 | sprite5pointer long 0
328e4 946 00 00 00 00 | sprite5xy      long 0
328e8 947 00 00 00 00 | sprite5wh      long 0
328ec 948 00 00 00 00 | sprite6pointer long 0
328f0 949 00 00 00 00 | sprite6xy      long 0
328f4 94a 00 00 00 00 | sprite6wh      long 0
328f8 94b 00 00 00 00 | sprite7pointer long 0
328fc 94c 00 00 00 00 | sprite7xy      long 0
32900 94d 00 00 00 00 | sprite7wh      long 0
32904 94e 00 00 00 00 | sprite8pointer long 0
32908 94f 00 00 00 00 | sprite8xy      long 0
3290c 950 00 00 00 00 | sprite8wh      long 0
32910 951 00 00 00 00 | sprite9pointer long 0
32914 952 00 00 00 00 | sprite9xy      long 0
32918 953 00 00 00 00 | sprite9wh      long 0
3291c 954 00 00 00 00 | sprite10pointer long 0
32920 955 00 00 00 00 | sprite10xy      long 0
32924 956 00 00 00 00 | sprite10wh      long 0
32928 957 00 00 00 00 | sprite11pointer long 0
3292c 958 00 00 00 00 | sprite11xy      long 0
32930 959 00 00 00 00 | sprite11wh      long 0
32934 95a 00 00 00 00 | sprite12pointer long 0
32938 95b 00 00 00 00 | sprite12xy      long 0
3293c 95c 00 00 00 00 | sprite12wh      long 0
32940 95d 00 00 00 00 | sprite13pointer long 0
32944 95e 00 00 00 00 | sprite13xy      long 0
32948 95f 00 00 00 00 | sprite13wh      long 0
3294c 960 00 00 00 00 | sprite14pointer long 0
32950 961 00 00 00 00 | sprite14xy      long 0
32954 962 00 00 00 00 | sprite14wh      long 0
32958 963 00 00 00 00 | sprite15pointer long 0
3295c 964 00 00 00 00 | sprite15xy      long 0
32960 965 00 00 00 00 | sprite15wh      long 0
32964 966 00 00 00 00 | sprite16pointer long 0
32968 967 00 00 00 00 | sprite16xy      long 0
3296c 968 00 00 00 00 | sprite16wh      long 0
32970 969 00 00 00 00 | sprite17pointer long 0
32974 96a 00 00 00 00 | sprite17xy      long 0
32978 96b 00 00 00 00 | sprite17wh      long 0
3297c 96c 00 00 00 00 | sprite18pointer long 0
32980 96d 00 00 00 00 | sprite18xy      long 0
32984 96e 00 00 00 00 | sprite18wh      long 0
32988 96f 00 00 00 00 | spritenum long 0
3298c 970             | 
3298c 970 00 00 00 00 | spriteline long 0
32990 971 84 03 00 00 | sprite_x long 900
32994 972 00 00 00 00 | sprite_y long 0
32998 973 10 00 00 00 | sprite_w long 16
3299c 974 40 00 00 00 | sprite_h long 64
329a0 975 00 00 00 00 | l2 long 0
329a4 976 00 00 00 00 | t5 long 0
329a8 977 00 00 00 00 | t6 long 0
329ac 978 00 00 00 00 | t7 long 0
329b0 979 00 00 00 00 | t8 long 0
329b4 97a 00 00 00 00 | t9 long 0
329b8 97b 00 00 00 00 | preloadaddr long 0
329bc 97c 00 00 00 00 | preloadlineaddr long 0
329c0 97d 00 04 00 00 | a1024 long 1024
329c4 97e             | 
329c4 97e E0 03 00 00 | aa long 992
329c8 97f FF 03 00 00 | a1023 long 1023
329cc 980 00 10 00 00 | a4096 long 4096
329d0 981             |  fit 368
329d0 981             | _psram_spin2_dat_
329d0 981 00 00 00 00 
      ...             
32ac8 9bf 00 00 00 00 
32acc 9c0 00 00 00 00 |     listdata long 0[8*8]
32ad0 9c1             |             orgh
32ad0                 | 
32ad0                 | ' driver state
32ad0     FF FF FF FF | drivercog   long    -1  ' COG id of driver
32ad4     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
32ad8                 | 
32ad8                 | ' delay profile
32ad8     07 00 00 00 
32adc     00 CF 7B 05 
32ae0     80 D1 F0 08 
32ae4     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
32ae8     80 C4 60 0F 
32aec     80 39 7A 12 
32af0     40 2D D9 13 
32af4     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
32af8                 | 
32af8                 | ' data to be passed to driver when starting it
32af8                 | startupData
32af8     00 00 00 00 |     long    0           ' current frequency
32afc     00 00 00 00 |     long    FLAGS       ' optional flags for driver
32b00     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
32b04     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
32b08     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
32b0c     18 2B 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
32b10     98 2B 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
32b14     B8 2B 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
32b18                 | 
32b18                 | ' data for memory
32b18                 | deviceData
32b18                 |     ' 16 bank parameters follow (16MB per bank)
32b18     00 00 00 00 
      ...             
32b50     00 00 00 00 
32b54     00 00 00 00 |     long    0[16]                               ' banks 0-15
32b58                 |     ' 16 banks of pin parameters follow
32b58     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
32b5c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
32b60     FF FF FF FF 
      ...             
32b90     FF FF FF FF 
32b94     FF FF FF FF |     long    -1[14]                              ' banks 2-15
32b98                 | 
32b98                 | ' data for COG polling
32b98                 | qosData 
32b98     00 00 FF FF 
32b9c     00 00 FF FF 
32ba0     00 00 FF FF 
32ba4     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
32ba8     00 00 FF FF 
32bac     00 00 FF FF 
32bb0     00 00 FF FF 
32bb4     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
32bb8                 |     
32bb8                 | ' mailbox storage
32bb8                 | 
32bb8                 | mailboxes
32bb8     00 00 00 00 
      ...             
32c10     00 00 00 00 
32c14     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
32c18                 | 	alignl
32c18                 | _psram16drv_spin2_dat_
32c18                 |                             orgh
32c18     00 00 00 00 
      ...             
32c30     00 00 00 00 
32c34     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
32c38                 | 
32c38                 | driver_start
32c38                 |                             org
32c38 000             | '..................................................................................................
32c38 000             | ' Memory layout for COG RAM once operational:
32c38 000             | '
32c38 000             | '  COG RAM address      Usage
32c38 000             | '  ---------------      ----
32c38 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
32c38 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
32c38 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
32c38 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
32c38 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
32c38 000             | '  ~$198-$1F3           State and register variables
32c38 000             | '
32c38 000             | ' Also during driver COG startup:
32c38 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
32c38 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
32c38 000             | '..................................................................................................
32c38 000             |                             
32c38 000             | ' Mailbox storage after vector initialization
32c38 000             | 
32c38 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
32c3c 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
32c40 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
32c44 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
32c48 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
32c4c 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
32c50 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
32c54 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
32c58 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
32c5c 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
32c60 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
32c64 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
32c68 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
32c6c 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
32c70 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
32c74 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
32c78 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
32c7c 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
32c80 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
32c84 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
32c88 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
32c8c 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
32c90 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
32c94 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
32c98 018             | 
32c98 018             | ' Mailbox parameter addresses per COG once patched
32c98 018             |                             
32c98 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
32c9c 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
32ca0 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
32ca4 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
32ca8 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
32cac 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
32cb0 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
32cb4 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
32cb8 020             | 
32cb8 020             | '..................................................................................................
32cb8 020             | ' Per COG request and state setup and service branching
32cb8 020             |         
32cb8 020             | cog0                 
32cb8 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
32cbc 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
32cc0 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
32cc4 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
32cc8 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32ccc 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32cd0 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
32cd4 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
32cd8 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
32cdc 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
32ce0 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32ce4 02b 33 CA 63 FD |                             execf   request-0               'jump to service
32ce8 02c             | cog1                        
32ce8 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
32cec 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
32cf0 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
32cf4 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
32cf8 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32cfc 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32d00 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
32d04 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
32d08 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
32d0c 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
32d10 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32d14 037 33 CA 63 FD |                             execf   request-0               'jump to service
32d18 038             | cog2                         
32d18 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
32d1c 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
32d20 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
32d24 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
32d28 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32d2c 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32d30 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
32d34 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
32d38 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
32d3c 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
32d40 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32d44 043 33 CA 63 FD |                             execf   request-0               'jump to service
32d48 044             | cog3                        
32d48 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
32d4c 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
32d50 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
32d54 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
32d58 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32d5c 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32d60 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
32d64 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
32d68 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
32d6c 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
32d70 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32d74 04f 33 CA 63 FD |                             execf   request-0               'jump to service
32d78 050             | cog4                        
32d78 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
32d7c 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
32d80 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
32d84 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
32d88 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32d8c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32d90 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
32d94 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
32d98 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
32d9c 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
32da0 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32da4 05b 33 CA 63 FD |                             execf   request-0               'jump to service
32da8 05c             | cog5                        
32da8 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
32dac 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
32db0 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
32db4 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
32db8 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32dbc 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32dc0 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
32dc4 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
32dc8 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
32dcc 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
32dd0 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32dd4 067 33 CA 63 FD |                             execf   request-0               'jump to service
32dd8 068             | cog6                        
32dd8 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
32ddc 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
32de0 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
32de4 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
32de8 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32dec 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32df0 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
32df4 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
32df8 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
32dfc 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
32e00 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32e04 073 33 CA 63 FD |                             execf   request-0               'jump to service
32e08 074             | cog7                        
32e08 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
32e0c 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
32e10 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
32e14 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
32e18 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32e1c 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32e20 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
32e24 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
32e28 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
32e2c 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
32e30 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32e34 07f 33 CA 63 FD |                             execf   request-0               'jump to service
32e38 080             |                             fit     128
32e38 080             | 
32e38 080             |                             fit     128
32e38 080             | pad                         long    0[128-$]                'align init code to $80
32e38 080             | 
32e38 080             | '..................................................................................................
32e38 080             | 
32e38 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
32e38 080             | 
32e38 080             | init                        
32e38 080             |                             ' get driver scratch long address in hub
32e38 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
32e3c 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
32e40 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
32e44 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
32e48 084             |                     
32e48 084             |                             ' read in the additional LUT RAM code
32e48 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
32e4c 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
32e50 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
32e54 087             | 
32e54 087             |                             ' read the startup parameters
32e54 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
32e58 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
32e5c 089             | 
32e5c 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
32e5c 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
32e60 08a             | 
32e60 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
32e64 08b 01 00 00 5F 
32e68 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
32e6c 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
32e70 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
32e74 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
32e78 090             | 
32e78 090             |                             ' setup data pin modes and data bus pin group in streamer commands
32e78 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
32e7c 091 01 00 00 FF 
32e80 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
32e84 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
32e88 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
32e8c 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
32e90 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
32e94 097 08 DE 47 F5 |                             or      a, #8
32e98 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
32e9c 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
32ea0 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
32ea4 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
32ea8 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
32eac 09d 01 DE 07 F1 |                             add     a, #1
32eb0 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
32eb4 09f             |  
32eb4 09f             |                             ' setup device control pin states
32eb4 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
32eb8 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
32ebc 0a1 01 00 00 FF 
32ec0 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
32ec4 0a3             | 
32ec4 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
32ec8 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
32ecc 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
32ed0 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
32ed4 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
32ed8 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
32edc 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
32ee0 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
32ee4 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
32ee8 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
32eec 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
32ef0 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
32ef4 0af             | pinloop
32ef4 0af             |                             ' generate minimum CE high time before access
32ef4 0af A1 07 00 FF 
32ef8 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
32efc 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
32f00 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
32f04 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
32f08 0b4 1F DE 63 FD |                             waitx   a                       'delay
32f0c 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
32f10 0b6             | 
32f10 0b6             |                             ' setup the COG mailboxes and addresses 
32f10 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
32f14 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
32f18 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
32f1c 0b9             | 
32f1c 0b9 28 2E 64 FD |                             setq    #24-1
32f20 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
32f24 0bb             | 
32f24 0bb             |                             ' setup the polling loop for active COGs 
32f24 0bb 01 C2 63 FD |                             cogid   id
32f28 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
32f2c 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
32f30 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
32f34 0bf 0A F0 07 F6 |                             mov     ptra, #10
32f38 0c0 E1 F1 03 FA |                             mul     ptra, id
32f3c 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
32f40 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
32f44 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
32f48 0c4 03 C2 07 FA |                             mul     id, #3
32f4c 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
32f50 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
32f54 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
32f58 0c8 D8 01 B0 FD |                             call    #reloadcogs
32f5c 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
32f60 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
32f64 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
32f64 0cb D8 E5 B7 F9 |                             setd    d, #addr1
32f68 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
32f6c 0cd 08 04 DC FC |                             rep     #2, #8
32f70 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
32f74 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
32f78 0d0             | 
32f78 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
32f78 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
32f78 0d0 01 C2 63 FD |                             cogid   id
32f7c 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
32f80 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
32f84 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
32f88 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
32f8c 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
32f90 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
32f94 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
32f98 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
32f9c 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
32fa0 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
32fa4 0db 3F E4 A7 F9 |                             alti    d, #%111_111
32fa8 0dc 00 00 00 F6 |                             mov     0-0, 0-0
32fac 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
32fb0 0de A5 E5 03 F1 |                             add     d, const512
32fb4 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
32fb8 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
32fbc 0e1 00 00 00 F6 |                             mov     0-0, 0-0
32fc0 0e2             |                             
32fc0 0e2             |                             ' setup register values for control vector loop setup after we return
32fc0 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
32fc4 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
32fc8 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
32fcc 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
32fd0 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
32fd4 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
32fd8 0e8 D0 C3 8F F9 |                             altd    id, #id0
32fdc 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
32fe0 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
32fe4 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
32fe8 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
32fec 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
32ff0 0ee             |  
32ff0 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
32ff4 0ef 07 CA 07 F5 |                             and     request, #7
32ff8 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
32ffc 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
33000 0f2             |                             fit     $100                    'ensure all init code fits this space
33000 0f2             | 
33000 0f2             |                             fit     $100                    'ensure all init code fits this space
33000 0f2             | 
33000 0f2 00 00 00 00 
      ...             
33030 0fe 00 00 00 00 
33034 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
33038 100             | 
33038 100             | '..................................................................................................
33038 100             | ' Error result handling and COG notification of request completion
33038 100             | 
33038 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3303c 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
33040 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
33044 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
33048 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3304c 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
33050 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
33054 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
33058 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3305c 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
33060 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
33064 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
33068 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3306c 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
33070 10e             | ' Poller re-starts here after a COG is serviced
33070 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
33074 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
33078 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3307c 111             | ' Main dynamic polling loop repeats until a request arrives
3307c 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
33080 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
33084 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
33088 114             | 
33088 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3308c 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
33090 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
33094 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
33098 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3309c 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
330a0 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
330a4 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
330a8 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
330ac 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
330b0 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
330b4 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
330b8 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
330bc 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
330c0 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
330c4 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
330c8 124             | 
330c8 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
330cc 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
330d0 126             |  
330d0 126             | '..................................................................................................
330d0 126             | ' List handler                               
330d0 126             | 
330d0 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
330d4 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
330d8 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
330dc 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
330e0 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
330e4 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
330e8 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
330ec 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
330f0 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
330f4 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
330f8 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
330fc 131 33 00 60 FD |                             execf   0-0                     'process the request 
33100 132             | 
33100 132             | '..................................................................................................
33100 132             | ' Restoring per COG state and resuming where we left off
33100 132             | 
33100 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
33104 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
33108 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3310c 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
33110 136 D8 CB FB F8 |                             getbyte request, addr1, #3
33114 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
33118 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3311c 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
33120 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
33124 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
33128 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3312c 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
33130 13e             |                    
33130 13e             | '..................................................................................................
33130 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
33130 13e             | 
33130 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
33134 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
33138 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3313c 141 D0 DF B7 F9 |                             setd    a, #id0
33140 142 D8 DF BF F9 |                             sets    a, #addr1
33144 143 FE FF FF FF 
33148 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3314c 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
33150 146 3F DE A7 F9 |                             alti    a, #%111_111 
33154 147 00 00 F0 F9 |                             muxq    0-0, 0-0
33158 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3315c 149 01 E2 63 FD |                             cogid   c
33160 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
33164 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
33168 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3316c 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
33170 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
33174 14f 00 E0 03 F6 |                             mov     b, 0-0
33178 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3317c 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
33180 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
33184 153 0C 00 90 AD |             if_z            jmp     #excluded               
33188 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3318c 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
33190 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
33194 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
33198 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3319c 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
331a0 15a             | 
331a0 15a             | 'determine priority cogs and build instructions for the polling sequence
331a0 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
331a4 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
331a8 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
331ac 15d             | 
331ac 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
331b0 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
331b4 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
331b8 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
331bc 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
331c0 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
331c4 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
331c8 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
331cc 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
331d0 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
331d4 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
331d8 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
331dc 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
331e0 16a             | endprioloop
331e0 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
331e4 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
331e8 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
331ec 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
331f0 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
331f4 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
331f8 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
331fc 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
33200 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
33204 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
33208 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3320c 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
33210 176             | 
33210 176             | ' populate the round robin COG polling instructions
33210 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
33214 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
33218 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3321c 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
33220 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
33224 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
33228 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3322c 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
33230 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
33234 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
33238 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3323c 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
33240 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
33244 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
33248 184             | '..................................................................................................
33248 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
33248 184             | 
33248 184             | set_latency                                                 '            (a) set latency
33248 184             | get_latency                                                 '            (b) get latency
33248 184             | set_burst                                                   '            (c) set burst size of bank
33248 184             | get_burst                                                   '            (d) get burst size of bank
33248 184             |                                                             '            (e) dump state
33248 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3324c 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
33250 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
33254 187             |                                                             ' | | | | e  account for following AUGS
33254 187 04 00 00 FF 
33258 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3325c 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
33260 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
33264 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
33268 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3326c 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
33270 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
33274 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
33278 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3327c 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
33280 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
33284 193             | 
33284 193             | '..................................................................................................
33284 193             | ' Misc EXECF code
33284 193             | 
33284 193 33 72 63 FD | start_read_exec             execf   newburstr
33288 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3328c 195 33 78 63 FD | continue_read_exec          execf   lockedreads
33290 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
33294 197             | 
33294 197             | '..................................................................................................
33294 197             | ' Variables
33294 197             | 
33294 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
33298 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3329c 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
332a0 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
332a4 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
332a8 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
332ac 19d             | 
332ac 19d 00 00 00 80 | xfreq1          long    $80000000
332b0 19e 00 00 00 40 | xfreq2          long    $40000000
332b4 19f 03 00 00 00 | delay           long    3
332b8 1a0             | 
332b8 1a0             | lutcodeaddr                 
332b8 1a0             | startupparams
332b8 1a0             | excludedcogs                                    'careful: shared register use!
332b8 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
332bc 1a1 00 00 00 00 | flags           long    0
332c0 1a2             | mask                                            'careful: shared register use!
332c0 1a2 00 00 00 00 | resetmaskA      long    0
332c4 1a3             | limit                                           'careful: shared register use!
332c4 1a3 00 00 00 00 | resetmaskB      long    0
332c8 1a4 00 00 00 00 | datapins        long    0
332cc 1a5             | const512                                        'careful: shared register use!
332cc 1a5 00 00 00 00 | devicelist      long    0
332d0 1a6 00 00 00 00 | coglist         long    0
332d4 1a7 00 00 00 00 | mbox            long    0 
332d8 1a8             | 
332d8 1a8             | clkpin                                          'shared with code patched during init
332d8 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
332dc 1a9             | cspin                                           'shared with code patched during init
332dc 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
332e0 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
332e4 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
332e8 1ac 01 00 00 00 | clkdelay        long    1
332ec 1ad 00 00 00 00 | regdatabus      long    0
332f0 1ae             | 
332f0 1ae 10 00 00 00 | deviceaddr      long    $10
332f4 1af             | rrcounter
332f4 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
332f8 1b0             | 
332f8 1b0             | ' jump addresses for the per COG handlers
332f8 1b0 20 00 00 00 | cog0_handler    long    cog0
332fc 1b1 2C 00 00 00 | cog1_handler    long    cog1
33300 1b2 38 00 00 00 | cog2_handler    long    cog2
33304 1b3 44 00 00 00 | cog3_handler    long    cog3
33308 1b4 50 00 00 00 | cog4_handler    long    cog4
3330c 1b5 5C 00 00 00 | cog5_handler    long    cog5
33310 1b6 68 00 00 00 | cog6_handler    long    cog6
33314 1b7 74 00 00 00 | cog7_handler    long    cog7
33318 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3331c 1b9             | 
3331c 1b9             | ' EXECF sequences
3331c 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
33320 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
33324 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
33328 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3332c 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
33330 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
33334 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
33338 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
33338 1c0             | 
33338 1c0             | 
33338 1c0             | ' SKIPF sequences
33338 1c0             | skiptable
33338 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3333c 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
33340 1c2 00 00 00 00 |                 long    0                      ' read modify write long
33344 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
33348 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3334c 1c5 00 00 00 00 | pattern2        long    0
33350 1c6 00 00 00 00 | pattern3        long    0
33354 1c7 77 02 00 00 | singlelong      long    %1001110111  
33358 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3335c 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
33360 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
33364 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
33368 1cc             | 
33368 1cc             | ' LUT RAM address values
33368 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3336c 1cd DD 02 00 00 | continue_read   long    continue_read_lut
33370 1ce DB 02 00 00 | continue_write  long    continue_write_lut
33374 1cf F6 02 00 00 | noread          long    noread_lut
33378 1d0             | 
33378 1d0 00 00 00 00 | id0             long    0
3337c 1d1 01 00 00 00 | id1             long    1
33380 1d2 02 00 00 00 | id2             long    2
33384 1d3 03 00 00 00 | id3             long    3
33388 1d4 04 00 00 00 | id4             long    4
3338c 1d5 05 00 00 00 | id5             long    5
33390 1d6 06 00 00 00 | id6             long    6
33394 1d7 07 00 00 00 | id7             long    7
33398 1d8             | 
33398 1d8             | 'These next 10 request registers below are also temporarily reused during init 
33398 1d8             | 'and COG updates and need to follow immediately after id0-id7
33398 1d8 00 00 00 00 | addr1           long    0
3339c 1d9 00 00 00 00 | hubdata         long    0
333a0 1da 00 00 00 00 | count           long    0
333a4 1db 00 00 00 00 | addr2           long    0
333a8 1dc 00 00 00 00 | total           long    0
333ac 1dd 00 00 00 00 | offset1         long    0
333b0 1de 00 00 00 00 | offset2         long    0
333b4 1df 00 00 00 00 | link            long    0
333b8 1e0             | 
333b8 1e0             | burstwrite                                      'note shared register use during init
333b8 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
333bc 1e1 00 00 00 00 | id              long    0
333c0 1e2             | 
333c0 1e2 00 00 00 00 | header          long    0
333c4 1e3 00 00 00 00 | trailer         long    0
333c8 1e4 00 00 00 00 | cmdaddr         long    0
333cc 1e5 00 00 00 00 | request         long    0
333d0 1e6 00 00 00 00 | rrlimit         long    0
333d4 1e7 00 00 00 00 | pinconfig       long    0
333d8 1e8 00 00 00 00 | clks            long    0
333dc 1e9 00 00 00 00 | resume          long    0
333e0 1ea 00 00 00 00 | orighubsize     long    0
333e4 1eb 00 00 00 00 | wrclks          long    0
333e8 1ec             | 
333e8 1ec 00 00 00 00 | pattern         long    0
333ec 1ed 00 00 00 00 | hubscratch      long    0
333f0 1ee 00 10 00 00 | val4k           long    4096
333f4 1ef             | 
333f4 1ef             | ' temporary general purpose regs
333f4 1ef 00 00 00 00 | a               long    0
333f8 1f0 00 00 00 00 | b               long    0
333fc 1f1 00 00 00 00 | c               long    0
33400 1f2 00 00 00 00 | d               long    0
33404 1f3             |                 fit     502
33404 1f3             | 
33404 1f3             |                 fit     502
33404 1f3             | 
33404 1f3             | '..................................................................................................
33404 1f3             | 
33404 1f3             |             orgh
33404                 | 
33404                 | lut_code
33404                 | 'HW init code up to 80 longs
33404                 | 
33404                 | '..................................................................................................
33404                 | ' Memory layout for LUT RAM once operational:
33404                 | '
33404                 | '  LUT RAM address      Usage
33404                 | '  ---------------      ----
33404                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
33404                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
33404                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
33404                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
33404                 | '
33404                 | ' Also during driver COG startup:
33404                 | ' $230-$24F is used for HW init setup
33404                 | ' $250-$26F is used as temporary vector storage 
33404                 | '..................................................................................................
33404                 | 
33404                 |                 org $230    
33404 230             | 
33404 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
33404 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
33408 231 24 16 60 FD |                             pollxfi
3340c 232 FF AA 2A FF 
33410 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
33414 234 28 00 B0 FD |                             call    #sendqspi
33418 235 07 F8 07 FF 
3341c 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
33420 237 28 00 B0 FD |                             call    #sendspi
33424 238 F8 07 78 FF 
33428 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3342c 23a 1C 00 B0 FD |                             call    #sendspi
33430 23b 7F 78 78 FF 
33434 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
33438 23d 10 00 B0 FD |                             call    #sendspi 
3343c 23e 2D 00 64 FD |                             ret
33440 23f             | 
33440 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
33444 240 32 0C 64 FD |                             skipf   #%110
33448 241 9C EF 03 F6 |                             mov     pb, xsendimm
3344c 242             | 
3344c 242 10 D0 07 F6 | sendspi                     mov     clks, #16
33450 243 97 EF 03 F6 |                             mov     pb, ximm8lut
33454 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
33458 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3345c 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
33460 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
33464 248 24 36 60 FD |                             waitxfi                         'wait for the completion
33468 249 50 48 63 FD |                             fltl    datapins                'float data bus
3346c 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
33470 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
33474 24c             | 
33474 24c 00 00 00 00 
33478 24d 00 00 00 00 
3347c 24e 00 00 00 00 
33480 24f 00 00 00 00 |                 long    0[$270-32-$]
33484 250             |                 fit     $270-32  ' keep room for 32 vector longs
33484 250             |     
33484 250             |                 fit     $270-32  ' keep room for 32 vector longs
33484 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
33484 250             | rw_vect ' PSRAM jump vectors
33484 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
33488 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3348c 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
33490 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
33494 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
33498 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3349c 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
334a0 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
334a4 258             | ro_vect ' R/O PSRAM jump vectors
334a4 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
334a8 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
334ac 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
334b0 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
334b4 25c 00 01 00 00 |                 long    unsupported
334b8 25d 00 01 00 00 |                 long    unsupported
334bc 25e 00 01 00 00 |                 long    unsupported
334c0 25f 00 01 00 00 |                 long    unsupported
334c4 260             | ctrl_vect ' Control jump vectors
334c4 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
334c8 261 00 01 00 00 |                 long    unsupported
334cc 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
334d0 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
334d4 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
334d8 265 00 01 00 00 |                 long    unsupported
334dc 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
334e0 267 3E 01 00 00 |                 long    reconfig 
334e4 268             | no_vect ' Invalid bank jump vectors
334e4 268 01 01 00 00 |                 long    invalidbank
334e8 269 01 01 00 00 |                 long    invalidbank
334ec 26a 01 01 00 00 |                 long    invalidbank
334f0 26b 01 01 00 00 |                 long    invalidbank
334f4 26c 01 01 00 00 |                 long    invalidbank
334f8 26d 01 01 00 00 |                 long    invalidbank
334fc 26e 01 01 00 00 |                 long    invalidbank
33500 26f 01 01 00 00 |                 long    invalidbank
33504 270             |                 fit     $270
33504 270             | 
33504 270             |                 fit     $270
33504 270             | '..................................................................................................
33504 270             | ' PSRAM READS
33504 270             |                                                             ' a b c d e f
33504 270             |                                                             ' B W L B R L  (a) byte read
33504 270             |                                                             ' Y O O U E O  (b) word read
33504 270             |                                                             ' T R N R S C  (c) long read
33504 270             |                                                             ' E D G S U K  (d) new burst read
33504 270             |                                                             '       T M E  (e) resumed sub-burst
33504 270             |                                                             '         E D  (f) locked sub-burst
33504 270             | 
33504 270             | 
33504 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
33508 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3350c 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
33510 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
33514 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
33518 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3351c 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
33520 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
33524 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
33528 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3352c 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
33530 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
33534 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
33538 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3353c 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
33540 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
33544 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
33548 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3354c 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
33550 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
33554 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
33558 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3355c 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
33560 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
33564 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
33568 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3356c 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
33570 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
33574 28c             | 
33574 28c             |                             ' fall through to read bursts
33574 28c             |                         
33574 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
33574 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
33578 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3357c 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
33580 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
33584 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
33588 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3358c 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
33590 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
33594 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
33598 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3359c 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
335a0 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
335a4 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
335a8 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
335ac 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
335b0 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
335b4 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
335b8 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
335bc 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
335c0 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
335c4 2a0 E8 D1 03 F1 |                             add     clks, clks
335c8 2a1             | readcommon
335c8 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
335cc 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
335d0 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
335d4 2a4             | 
335d4 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
335d8 2a5 69 C8 63 FD |                             rev     cmdaddr
335dc 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
335e0 2a7 61 C8 63 FD |                             mergeb  cmdaddr
335e4 2a8             | 
335e4 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
335e8 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
335ec 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
335ec 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
335f0 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
335f4 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
335f8 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
335fc 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
335fc 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
33600 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
33604 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
33608 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3360c 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
33610 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
33614 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
33614 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
33618 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3361c 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
33620 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
33624 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
33628 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3362c 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
33630 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
33634 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
33638 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3363c 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
33640 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
33644 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
33648 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3364c 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3364c 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
33650 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
33654 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
33658 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3365c 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
33660 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
33664 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
33668 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3366c 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
33670 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
33674 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
33678 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3367c 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
33680 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
33684 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
33688 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3368c 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
33690 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
33694 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
33698 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3369c 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
336a0 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
336a4 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
336a8 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
336ac 2da 10 03 90 FD |                             jmp     #writecommon
336b0 2db             | 
336b0 2db             | '..................................................................................................
336b0 2db             | ' Burst continuation testing
336b0 2db             | 
336b0 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
336b4 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
336b8 2dd             | continue_read_lut          
336b8 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
336bc 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
336c0 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
336c4 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
336c8 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
336cc 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
336d0 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
336d4 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
336d8 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
336dc 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
336e0 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
336e4 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
336e8 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
336ec 2ea             | 
336ec 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
336f0 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
336f4 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
336f8 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
336fc 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
33700 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
33704 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
33708 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3370c 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
33710 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
33714 2f4 2A 1C 66 0D |             _ret_           push    #poller
33718 2f5             | 
33718 2f5             | 
33718 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3371c 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3371c 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
33720 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
33724 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
33728 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3372c 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
33730 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
33734 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
33738 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3373c 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
33740 2ff             | '..................................................................................................
33740 2ff             | ' Completion of requests
33740 2ff             | 
33740 2ff             | complete_rw_lut             
33740 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
33744 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
33748 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3374c 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
33750 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
33754 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
33758 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3375c 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
33760 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
33764 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
33768 309 32 62 64 AD |             if_z            skipf   #%110001
3376c 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
33770 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
33774 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
33778 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3377c 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
33780 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
33784 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
33788 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3378c 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
33790 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
33794 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
33798 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3379c 316             |                                                             ' skipcase (a) gfx copy to/from hub
3379c 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3379c 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3379c 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
337a0 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
337a4 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
337a8 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
337ac 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
337b0 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
337b4 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
337b8 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
337bc 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
337c0 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
337c4 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
337c8 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
337cc 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
337d0 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
337d4 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
337d8 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
337dc 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
337e0 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
337e4 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
337e8 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
337ec 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
337f0 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
337f4 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
337f8 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
337fc 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
33800 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
33804 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
33808 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3380c 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
33810 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
33814 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
33818 335 DF B7 03 A6 |             if_z            mov     addr2, link
3381c 336 34 FF 9F AD |             if_z            jmp     #checknext
33820 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
33824 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
33828 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3382c 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
33830 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
33834 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
33838 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3383c 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
33840 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
33844 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
33848 341             | 
33848 341             | '..................................................................................................
33848 341             | ' PSRAM WRITES
33848 341             |                                                             '  a b c d e f g h
33848 341             | 
33848 341             |                                                             '  B W L F B R L L (a) byte write(s)
33848 341             |                                                             '  Y O O I U E O O (b) word write(s)
33848 341             |                                                             '  T R N L R S C C (c) long write(s)
33848 341             |                                                             '  E D G L S U K K (d) resumed fill
33848 341             |                                                             '          T M E E (e) new burst write
33848 341             |                                                             '            E D D (f) resumed burst
33848 341             |                                                             '              F B (g) locked fill
33848 341             |                                                             '              I U (h) locked burst write
33848 341             |                                                             '              L R 
33848 341             |                                                             '              L S 
33848 341             |                                                             '                T 
33848 341             | 
33848 341             | w_single                   
33848 341             | w_fill_cont           
33848 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3384c 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
33850 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
33854 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
33858 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3385c 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
33860 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
33864 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
33868 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3386c 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
33870 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
33874 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
33878 34d             |                ' disable call to r_resume_burst for single longs when z=0
33878 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3387c 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
33880 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
33884 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
33888 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3388c 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
33890 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
33894 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
33898 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3389c 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
338a0 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
338a4 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
338a8 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
338ac 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
338b0 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
338b4 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
338b8 35d             |         
338b8 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
338b8 35d             |             '
338b8 35d             |             '  At least one of these 3 optional components will be sent
338b8 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
338b8 35d             |             '     body - N x full longs of data
338b8 35d             |             '     trailer - last partial long of data
338b8 35d             |             '
338b8 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
338b8 35d             |             '
338b8 35d             |             'Case    Type                           Sends
338b8 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
338b8 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
338b8 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
338b8 35d             |             ' 4)     Multiple long fill             body only
338b8 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
338b8 35d             | 
338b8 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
338b8 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
338bc 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
338c0 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
338c4 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
338c8 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
338cc 362 13 8C 07 F6 |                             mov     pattern3, #%10011
338d0 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
338d4 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
338d8 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
338dc 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
338e0 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
338e4 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
338e8 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
338ec 36a             |                             
338ec 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
338f0 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
338f4 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
338f8 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
338fc 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
33900 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
33904 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
33908 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3390c 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
33910 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
33914 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
33918 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3391c 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
33920 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
33924 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
33928 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3392c 37a             | 
3392c 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
33930 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
33934 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
33938 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3393c 37e             |                  
3393c 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
33940 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
33944 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
33948 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3394c 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
33950 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
33954 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
33958 385             | 
33958 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3395c 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
33960 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
33964 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
33968 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3396c 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
33970 38b             | 
33970 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
33970 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
33974 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
33978 38d 2A B0 63 FD |                             push    addr1                   'save address
3397c 38e             | 
3397c 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3397c 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
33980 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
33984 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
33988 391             |             
33988 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3398c 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
33990 393 2B B0 63 FD |                             pop     addr1                   'restore address
33994 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
33998 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3399c 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
339a0 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
339a4 398             | 
339a4 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
339a8 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
339ac 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
339b0 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
339b4 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
339b8 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
339bc 39e             | 
339bc 39e             |                             'trailer is done
339bc 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
339c0 39f             | 
339c0 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
339c4 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
339c8 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
339cc 3a2             | 
339cc 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
339d0 3a3 69 C8 63 FD |                             rev     cmdaddr                 
339d4 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
339d8 3a5 61 C8 63 FD |                             mergeb  cmdaddr
339dc 3a6             |                             
339dc 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
339e0 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
339e4 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
339e8 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
339ec 3aa             |                                                          
339ec 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
339f0 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
339f4 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
339f8 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
339fc 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
33a00 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
33a04 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
33a08 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
33a0c 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
33a10 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
33a14 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
33a18 3b5             |  
33a18 3b5 59 52 63 FD |                             drvh    cspin
33a1c 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
33a20 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
33a24 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
33a28 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
33a2c 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
33a30 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
33a34 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
33a38 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
33a3c 3be EA E5 03 F6 |                             mov     d, orighubsize
33a40 3bf EF E5 63 F0 |                             shl     d, a
33a44 3c0 F2 E3 83 F1 |                             sub     c, d
33a48 3c1 DD E3 03 F1 |                             add     c, offset1
33a4c 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
33a50 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
33a54 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
33a58 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
33a5c 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
33a60 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
33a64 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
33a68 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
33a6c 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
33a70 3cb BB D3 03 F6 |                             mov     resume, restorefill
33a74 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
33a78 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
33a7c 3ce 6C FC BF CD |             if_c            call    #yield
33a80 3cf 2D 00 64 FD |                             ret
33a84 3d0             |                            
33a84 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
33a84 3d0             |                       '     rczl    pa                      'rotate left into address offset
33a84 3d0             |                       '     rczl    c wcz                   'restore count and flags
33a84 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
33a88 3d1 02 EC 67 F0 |                             shl     pa, #2
33a8c 3d2 28 06 64 AD |             if_z            setq    #3
33a90 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
33a94 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
33a98 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
33a9c 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
33aa0 3d7             | 
33aa0 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
33aa4 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
33aa8 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
33aac 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
33ab0 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
33ab4 3dc             |                 fit 1024-32
33ab4 3dc             |         
33ab4 3dc             | 
33ab4 3dc             | '..................................................................................................
33ab4 3dc             | 
33ab4 3dc             |                 fit 1024-32
33ab4 3dc 00 00 00 00 
33ab8 3dd 00 00 00 00 
33abc 3de 00 00 00 00 
33ac0 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
33ac4 3e0             |                 org 1024-32
33ac4 000             | 
33ac4 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
33ac4 000 00 00 00 00 |                 long $0000
33ac8 001 11 11 00 00 |                 long $1111
33acc 002 22 22 00 00 |                 long $2222
33ad0 003 33 33 00 00 |                 long $3333
33ad4 004 44 44 00 00 |                 long $4444
33ad8 005 55 55 00 00 |                 long $5555
33adc 006 66 66 00 00 |                 long $6666
33ae0 007 77 77 00 00 |                 long $7777
33ae4 008 88 88 00 00 |                 long $8888
33ae8 009 99 99 00 00 |                 long $9999
33aec 00a AA AA 00 00 |                 long $aaaa
33af0 00b BB BB 00 00 |                 long $bbbb
33af4 00c CC CC 00 00 |                 long $cccc
33af8 00d DD DD 00 00 |                 long $dddd
33afc 00e EE EE 00 00 |                 long $eeee
33b00 00f FF FF 00 00 |                 long $ffff
33b04 010             | 
33b04 010             | 'masks
33b04 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
33b08 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
33b0c 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
33b10 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
33b14 014             | 
33b14 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
33b18 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
33b1c 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
33b20 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
33b24 018             | 
33b24 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
33b28 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
33b2c 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
33b30 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
33b34 01c             | 
33b34 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
33b38 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
33b3c 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
33b40 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
33b44 020             |         fit 1024
33b44 020             | 
33b44 020             |         fit 1024
33b44 020             | 
33b44 020             | '--------------------------------------------------------------------------------------------------
33b44 020             |         orgh
33b44                 | 
33b44                 | gfxexpansion
33b44                 |                             'simple line drawing graphics expansion of memory driver
33b44                 |                             'jmp     #donerepeats                'just return for now
33b44                 | 
33b44     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
33b48     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
33b4c     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
33b50     DD E1 03 F6 |                             mov     b, offset1              'get error term
33b54     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
33b58     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
33b5c     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
33b60     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
33b64     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
33b68     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
33b6c     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
33b70     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
33b74     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
33b78     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
33b7c     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
33b80     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
33b84     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
33b88     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
33b8c     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
33b90     DC E5 33 F9 |                             getword d, total, #0            'get line width
33b94     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
33b98     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
33b9c     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
33ba0     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
33ba4     C3 03 80 FD |                             jmp     #readmask               'continue filling
33ba8                 | 	alignl
33ba8                 | _usbnew_spin2_dat_
33ba8                 |                 org     $000
33ba8 000             | 
33ba8 000             | usb_host_start
33ba8 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
33bac 001             | 
33bac 001 03 00 00 FF 
33bb0 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
33bb4 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
33bb8 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
33bbc 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
33bc0 006 29 70 63 FD |                 setq2   htmp
33bc4 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
33bc8 008             | 
33bc8 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
33bcc 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
33bd0 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
33bd4 00b             | 
33bd4 00b             | '------------------------------------------------------------------------------
33bd4 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
33bd4 00b             | ' special because the receiving function must not respond with either STALL or
33bd4 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
33bd4 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
33bd4 00b             | ' corrupt packet, it must ignore the transaction
33bd4 00b             | '------------------------------------------------------------------------------
33bd4 00b             | ' On entry:
33bd4 00b             | '   PTRA - start address of the SETUP data struct.
33bd4 00b             | ' On exit:
33bd4 00b             | '   retval - PID_ACK on success, otherwise error code.
33bd4 00b             | '------------------------------------------------------------------------------
33bd4 00b             | txn_setup
33bd4 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
33bd8 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
33bdc 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
33be0 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
33be4 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
33be8 010             | .setup
33be8 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
33bec 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33bf0 012 2D 00 64 AD |         if_z    ret
33bf4 013 7C 0B B0 FD |                 call    #retry_wait
33bf8 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
33bfc 015 2D 00 64 AD |         if_z    ret
33c00 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
33c04 017 E0 FF 9F FD |                 jmp     #.setup
33c08 018             | 
33c08 018             | '------------------------------------------------------------------------------
33c08 018             | ' IN/INTERRUPT transaction.
33c08 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
33c08 018             | '------------------------------------------------------------------------------
33c08 018             | ' On entry:
33c08 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
33c08 018             | '     CRC(b19..23).
33c08 018             | ' On exit:
33c08 018             | '------------------------------------------------------------------------------
33c08 018             | txn_in
33c08 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
33c0c 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
33c10 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
33c14 01b             | 
33c14 01b             |                 ' Fall through to urx_packet
33c14 01b             | 
33c14 01b             | '------------------------------------------------------------------------------
33c14 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
33c14 01b             | ' received are handshakes and IN DATAx.
33c14 01b             | '------------------------------------------------------------------------------
33c14 01b             | ' On entry:
33c14 01b             | ' On exit:
33c14 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
33c14 01b             | '     returned.
33c14 01b             | '------------------------------------------------------------------------------
33c14 01b             | urx_packet
33c14 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
33c18 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
33c1c 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
33c20 01e 1A 92 63 FD |                 getct   hct2
33c24 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
33c28 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
33c2c 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
33c30 022             | .wait_sop
33c30 022 22 A7 8A FA |                 rdpin   urx, dm
33c34 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
33c38 024 08 00 90 CD |         if_c    jmp     #.get_pid
33c3c 025 FC 25 CC FB |                 jnct2   #.wait_sop
33c40 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
33c44 027             | .get_pid
33c44 027 28 02 B0 FD |                 call    #urx_next
33c48 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
33c4c 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
33c50 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
33c54 02b             | .chk_pid
33c54 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33c58 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
33c5c 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
33c60 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
33c64 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
33c68 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
33c6c 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
33c70 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
33c74 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
33c78 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
33c7c 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
33c80 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
33c84 037             | .ack_resend
33c84 037 22 A7 82 FA |                 rqpin   urx, dm
33c88 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
33c8c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
33c90 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
33c94 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
33c98 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
33c9c 03d             | .chk_eop
33c9c 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
33ca0 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
33ca4 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
33ca8 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
33cac 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
33cb0 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
33cb4 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
33cb8 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
33cbc 045 2D 00 64 FD |                 ret
33cc0 046             | .idle
33cc0 046 22 A7 82 FA |                 rqpin   urx, dm
33cc4 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
33cc8 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
33ccc 049 2D 00 64 FD |                 ret
33cd0 04a             | 
33cd0 04a             | '------------------------------------------------------------------------------
33cd0 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
33cd0 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
33cd0 04a             | ' if one is required.
33cd0 04a             | '------------------------------------------------------------------------------
33cd0 04a             | ' On entry:
33cd0 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
33cd0 04a             | ' On exit:
33cd0 04a             | '------------------------------------------------------------------------------
33cd0 04a             | utx_token
33cd0 04a 22 A7 82 FA |                 rqpin   urx, dm
33cd4 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
33cd8 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
33cdc 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
33ce0 04e 34 0D B0 CD |         if_c    call    #utx_pre
33ce4 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
33ce8 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
33cec 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
33cf0 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
33cf4 053             | .next_byte
33cf4 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
33cf8 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
33cfc 055             | .wait
33cfc 055 40 46 72 FD |                 testp   dp                      wc
33d00 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
33d04 057 23 03 08 FC |                 akpin   dp
33d08 058 22 A5 22 FC |                 wypin   utx, dm
33d0c 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
33d10 05a             | 
33d10 05a             | '------------------------------------------------------------------------------
33d10 05a             | ' SETUP/OUT/INTERRUPT transaction.
33d10 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
33d10 05a             | '------------------------------------------------------------------------------
33d10 05a             | ' On entry:
33d10 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
33d10 05a             | '     CRC(b19..23).
33d10 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
33d10 05a             | '   pkt_data - count of DATAx payload bytes to send.
33d10 05a             | ' On exit:
33d10 05a             | '------------------------------------------------------------------------------
33d10 05a             | txn_out
33d10 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
33d14 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
33d18 05c 00 00 C0 FF 
33d1c 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
33d20 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
33d24 05f             | 
33d24 05f             |                 ' Fall through to utx_data
33d24 05f             | 
33d24 05f             | '------------------------------------------------------------------------------
33d24 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
33d24 05f             | ' calculated while the data byte is being shifted out. Since data stage
33d24 05f             | ' success/fail is not determined until the status stage of the transaction,
33d24 05f             | ' this routine is only concerned about the current DATAx packet.
33d24 05f             | '------------------------------------------------------------------------------
33d24 05f             | ' On entry:
33d24 05f             | '   PTRA - hub start address of the data to read.
33d24 05f             | '   pkt_cnt - data payload size.
33d24 05f             | ' On exit:
33d24 05f             | '------------------------------------------------------------------------------
33d24 05f             | utx_data
33d24 05f 22 A7 82 FA |                 rqpin   urx, dm
33d28 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
33d2c 061 F4 FF 9F CD |         if_c    jmp     #utx_data
33d30 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
33d34 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
33d38 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
33d3c 065 D8 0C B0 CD |         if_c    call    #utx_pre
33d40 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
33d44 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
33d48 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
33d4c 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
33d50 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
33d54 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
33d58 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
33d5c 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
33d60 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
33d64 06f             | .read_byte
33d64 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
33d68 070 F0 00 B0 FD |                 call    #utx_byte
33d6c 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
33d70 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
33d74 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
33d78 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
33d7c 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
33d80 076             | .send_crc
33d80 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
33d84 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
33d88 078 D0 00 B0 FD |                 call    #utx_byte
33d8c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
33d90 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
33d94 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
33d98 07c             | 
33d98 07c             | '------------------------------------------------------------------------------
33d98 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
33d98 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
33d98 07c             | ' expects that the packet includes at least the CRC word.
33d98 07c             | '
33d98 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
33d98 07c             | ' was requested, which makes it difficult to determine where the data stops
33d98 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
33d98 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
33d98 07c             | ' USB-16 expected residual value of 0xB001.
33d98 07c             | '
33d98 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
33d98 07c             | ' so the caller can verify IN success before writing the data to its final
33d98 07c             | ' destination.
33d98 07c             | '------------------------------------------------------------------------------
33d98 07c             | ' On entry:
33d98 07c             | '   pkt_data - max byte count expected to be in the packet.
33d98 07c             | '   newb_flg - signals new byte ready when toggled.
33d98 07c             | ' On exit:
33d98 07c             | '   pkt_cnt - actual number of bytes read.
33d98 07c             | '------------------------------------------------------------------------------
33d98 07c             | urx_data
33d98 07c F7 75 03 F6 |                 mov     htmp2, pb
33d9c 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
33da0 07e 00 00 C0 FF 
33da4 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
33da8 080 BA EF 03 F6 |                 mov     pb, htmp2
33dac 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
33db0 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
33db4 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
33db8 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
33dbc 085             | .wait_byte
33dbc 085             | ' In-line rx for max speed
33dbc 085 22 A7 82 FA |                 rqpin   urx, dm
33dc0 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
33dc4 087 53 A5 02 F5 |                 and     utx, urx
33dc8 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
33dcc 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
33dd0 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
33dd4 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
33dd8 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
33ddc 08d DC FF 9F FD |                 jmp     #.wait_byte
33de0 08e             | .get_byte
33de0 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
33de4 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
33de8 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
33dec 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
33df0 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
33df4 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
33df8 094             | .end_crc
33df8 094 01 B8 06 F1 |                 add     pkt_cnt, #1
33dfc 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
33e00 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
33e04 097 2D 00 64 1D |         if_a    ret
33e08 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
33e08 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
33e08 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
33e08 098             | ' to miss it, so cheat a bit and look for SOP clear here.
33e08 098 22 A7 82 FA |                 rqpin   urx, dm
33e0c 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
33e10 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
33e14 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
33e14 09b             | .chk_crc
33e14 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
33e18 09c 58 00 00 FF 
33e1c 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
33e20 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
33e24 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
33e28 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
33e2c 0a1 34 09 B0 FD |                 call    #poll_waitx
33e30 0a2             | 
33e30 0a2             |                 ' Fall through to utx_handshake
33e30 0a2             | 
33e30 0a2             | '------------------------------------------------------------------------------
33e30 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
33e30 0a2             | ' the appropriate IP delay has been inserted.
33e30 0a2             | '------------------------------------------------------------------------------
33e30 0a2             | ' On entry:
33e30 0a2             | '   retval - handshake PID to send.
33e30 0a2             | ' On exit:
33e30 0a2             | '   retval unchanged.
33e30 0a2             | '------------------------------------------------------------------------------
33e30 0a2             | utx_handshake
33e30 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
33e34 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
33e38 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
33e3c 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
33e40 0a6 5F A5 02 F6 |                 mov     utx, retval
33e44 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
33e48 0a8             | .idle
33e48 0a8 22 A7 82 FA |                 rqpin   urx, dm
33e4c 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
33e50 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
33e54 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
33e58 0ac 08 09 90 FD |                 jmp     #poll_waitx
33e5c 0ad             | 
33e5c 0ad             | '------------------------------------------------------------------------------
33e5c 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
33e5c 0ad             | '------------------------------------------------------------------------------
33e5c 0ad             | ' On entry:
33e5c 0ad             | '   utx - byte to transmit.
33e5c 0ad             | ' On exit:
33e5c 0ad             | '------------------------------------------------------------------------------
33e5c 0ad             | utx_byte
33e5c 0ad 40 46 72 FD |                 testp   dp                      wc
33e60 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
33e64 0af 23 03 08 FC |                 akpin   dp
33e68 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
33e6c 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
33e70 0b2             | 
33e70 0b2             | '------------------------------------------------------------------------------
33e70 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
33e70 0b2             | '------------------------------------------------------------------------------
33e70 0b2             | ' On entry:
33e70 0b2             | ' On exit:
33e70 0b2             | '   retval - the byte read.
33e70 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
33e70 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
33e70 0b2             | '     received.
33e70 0b2             | '------------------------------------------------------------------------------
33e70 0b2             | urx_next
33e70 0b2 22 A7 8A FA |                 rdpin   urx, dm
33e74 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
33e78 0b4 53 A5 02 F5 |                 and     utx, urx
33e7c 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
33e80 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
33e84 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
33e88 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
33e8c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
33e90 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
33e94 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
33e98 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
33e9c 0bd 2D 00 64 FD |                 ret
33ea0 0be             | 
33ea0 0be             | '------------------------------------------------------------------------------
33ea0 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
33ea0 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
33ea0 0be             | ' length, and the PID is not included in the CRC calculation:
33ea0 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
33ea0 0be             | '  CRC5  ENDP ADDRESS PID
33ea0 0be             | ' %00000_1111_1111111_xxxxxxxx
33ea0 0be             | '------------------------------------------------------------------------------
33ea0 0be             | ' On entry:
33ea0 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
33ea0 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
33ea0 0be             | ' On exit:
33ea0 0be             | '   ep_addr_pid - CRC value appended to the packet.
33ea0 0be             | '------------------------------------------------------------------------------
33ea0 0be             | calc_crc5
33ea0 0be FF 03 00 FF 
33ea4 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
33ea8 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
33eac 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
33eb0 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
33eb4 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
33eb8 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
33ebc 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
33ec0 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
33ec4 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
33ec8 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
33ecc 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
33ed0 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
33ed4 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
33ed8 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
33edc 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
33ee0 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
33ee4 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
33ee8 0d0             | 
33ee8 0d0             | '------------------------------------------------------------------------------
33ee8 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
33ee8 0d0             | '------------------------------------------------------------------------------
33ee8 0d0             | isr1_fsframe
33ee8 0d0 1A 92 62 FD |                 getct   iframe_ct_base
33eec 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
33ef0 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
33ef4 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
33ef8 0d4             | .wait
33ef8 0d4 40 46 72 FD |                 testp   dp                      wc
33efc 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
33f00 0d6 23 03 08 FC |                 akpin   dp
33f04 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
33f08 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
33f0c 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
33f10 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
33f14 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
33f18 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
33f1c 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
33f20 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
33f24 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
33f28 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
33f2c 0e1 2C FF BF FD |                 call    #utx_byte
33f30 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
33f34 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
33f38 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
33f3c 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
33f40 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
33f44 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
33f48 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
33f4c 0e9 5B A5 42 F5 |                 or      utx, icrc
33f50 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
33f54 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
33f58 0ec 20 00 90 FD |                 jmp     #isr1_wait
33f5c 0ed             | isr1_lsframe
33f5c 0ed 1A 92 62 FD |                 getct   iframe_ct_base
33f60 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
33f64 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
33f68 0f0             | .wait
33f68 0f0 40 46 72 FD |                 testp   dp                      wc
33f6c 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
33f70 0f2 23 03 08 FC |                 akpin   dp
33f74 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
33f78 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
33f7c 0f5             | isr1_wait
33f7c 0f5 22 A5 82 FA |                 rqpin   utx, dm
33f80 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
33f84 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
33f88 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
33f8c 0f9 03 00 00 FF 
33f90 0fa FF B3 06 F5 |                 and     frame, ##$7ff
33f94 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
33f98 0fc F5 FF 3B FB |                 reti1
33f9c 0fd             | 
33f9c 0fd             | '------------------------------------------------------------------------------
33f9c 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
33f9c 0fd             | ' transaction will complete before the next frame is triggered.
33f9c 0fd             | '------------------------------------------------------------------------------
33f9c 0fd             | ' On entry:
33f9c 0fd             | ' On exit:
33f9c 0fd             | '------------------------------------------------------------------------------
33f9c 0fd             | wait_txn_ok
33f9c 0fd 1A 74 63 FD |                 getct   htmp2
33fa0 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
33fa4 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
33fa8 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
33fac 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
33fb0 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
33fb4 103 2D 00 64 FD |                 ret
33fb8 104             | 
33fb8 104             | '------------------------------------------------------------------------------
33fb8 104             | ' A device connection was detected, or a bus reset was requested by the USB
33fb8 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
33fb8 104             | ' and perform a reset sequence prior to device enumeration.
33fb8 104             | '------------------------------------------------------------------------------
33fb8 104             | dev_reset
33fb8 104 22 A7 82 FA |                 rqpin   urx, dm
33fbc 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
33fc0 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
33fc4 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
33fc8 108             | reset
33fc8 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
33fcc 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
33fd0 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
33fd4 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
33fd8 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
33fdc 10d 1A 92 62 FD |                 getct   iframe_ct_base
33fe0 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
33fe4 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
33fe8 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
33fec 111 24 70 07 F1 |                 add     htmp, #36
33ff0 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
33ff4 113             | .framewait
33ff4 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
33ff8 114 F8 FF 9F CD |         if_b    jmp     #.framewait
33ffc 115 2D 00 64 FD |                 ret
34000 116             | 
34000 116             | '------------------------------------------------------------------------------
34000 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
34000 116             | '------------------------------------------------------------------------------
34000 116             | ' On entry:
34000 116             | '   PTRA - source address.
34000 116             | '   PB - destination address.
34000 116             | '   hr0 - length of copy, in bytes.
34000 116             | ' On exit:
34000 116             | '------------------------------------------------------------------------------
34000 116             | hmemcpy
34000 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
34004 117 F7 71 43 FC |                 wrbyte  htmp, pb
34008 118 01 EE 07 F1 |                 add     pb, #1
3400c 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
34010 11a             | 
34010 11a             | '------------------------------------------------------------------------------
34010 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
34010 11a             | ' loop until the errant device is disconnected.
34010 11a             | '------------------------------------------------------------------------------
34010 11a             | ' On entry:
34010 11a             | ' On exit:
34010 11a             | '------------------------------------------------------------------------------
34010 11a             | host_error
34010 11a             |           if ERROR_LED >= 0
34010 11a             |           end
34010 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
34014 11b             | 
34014 11b             | '------------------------------------------------------------------------------
34014 11b             | ' Get HID descriptor buffer for current port
34014 11b             | '------------------------------------------------------------------------------
34014 11b             | ' On entry:
34014 11b             | ' On exit:
34014 11b             | '   PB - HID descriptor buffer pointer
34014 11b             | '------------------------------------------------------------------------------
34014 11b             | get_hid_descr_buffer
34014 11b 2D EF 03 F6 |                 mov     pb, hdev_port
34018 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3401c 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
34020 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
34024 11f             | 
34024 11f             | 
34024 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
34028 120             | 
34028 120             | ' USB commands and error codes
34028 120 00 00 00 00 | cmd_data        long    0
3402c 121 00 00 00 00 | usb_err_code    long    ERR_NONE
34030 122             | 
34030 122             | ' Parameters block assigned at cog startup
34030 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
34034 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
34038 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3403c 125             | if ACTIVITY_LED >= 0
3403c 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3403c 125             | end
3403c 125             | if ERROR_LED >= 0
3403c 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3403c 125             | end
3403c 125 00 00 00 00 | hid_descr_p     long    0
34040 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
34040 126             | 'hkbd_report_p   long    0
34040 126 00 00 00 00 | hub_descr_p     long    0
34044 127 00 00 00 00 | urx_buff_p      long    0
34048 128 00 00 00 00 | dev_desc_buff_p long    0
3404c 129 00 00 00 00 | con_desc_buff_p long    0
34050 12a 00 00 00 00 | cache_start_p   long    0
34054 12b 00 00 00 00 | cache_end_p     long    0
34058 12c             | if EMUPAD_MAX_PLAYER > 0
34058 12c             | emupad_out_ptr  long    0
34058 12c             | end
34058 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3405c 12d             | 
3405c 12d             | hdev_init_start
3405c 12d             | hdev_port       res     1
3405c 12d             | hdev_port       res     1
3405c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3405c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3405c 12d             | kbm_next_datax  res     1
3405c 12d             | kbm_next_datax  res     1
3405c 12d             | hub_intf_num    res     1
3405c 12d             | hub_intf_num    res     1
3405c 12d             | hub_next_datax  res     1
3405c 12d             | hub_next_datax  res     1
3405c 12d             | hub_status_chg  res     1
3405c 12d             | hub_status_chg  res     1
3405c 12d             | hub_port_status res     1
3405c 12d             | hub_port_status res     1
3405c 12d             | if HAVE_MOUSE
3405c 12d             | ms_intf_num     res     1
3405c 12d             | ms_intf_num     res     1
3405c 12d             | ms_in_max_pkt   res     1
3405c 12d             | ms_in_max_pkt   res     1
3405c 12d             | end
3405c 12d             | kb_intf_num     res     1
3405c 12d             | kb_intf_num     res     1
3405c 12d             | kb_interval     res     1
3405c 12d             | kb_interval     res     1
3405c 12d             | kb_in_max_pkt   res     1
3405c 12d             | kb_in_max_pkt   res     1
3405c 12d             | kb_max_index    res     1
3405c 12d             | kb_max_index    res     1
3405c 12d             | kb_led_states   res     1
3405c 12d             | kb_led_states   res     1
3405c 12d             | gp_intf_num     res     1
3405c 12d             | gp_intf_num     res     1
3405c 12d             | gp_interval     res     1
3405c 12d             | gp_interval     res     1
3405c 12d             | gp_max_index    res     1
3405c 12d             | gp_max_index    res     1
3405c 12d             | gp_descr_len    res     1+MAX_DEVICES
3405c 12d             | gp_descr_len    res     1+MAX_DEVICES
3405c 12d             | hdev_init_end
3405c 12d             | 
3405c 12d             | ' Initialized at cog startup:
3405c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3405c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3405c 12d             | iframe_ct_new   res     1
3405c 12d             | iframe_ct_new   res     1
3405c 12d             | iframe_ct_base  res     1
3405c 12d             | iframe_ct_base  res     1
3405c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3405c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3405c 12d             | 
3405c 12d             | ' This register block is reset to zero when a USB device connects
3405c 12d             | hreg_init_start
3405c 12d             | hstatus         res     1         ' Host status flags
3405c 12d             | hstatus         res     1         ' Host status flags
3405c 12d             | hctwait         res     1         ' Poll-based wait clocks
3405c 12d             | hctwait         res     1         ' Poll-based wait clocks
3405c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3405c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3405c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3405c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3405c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3405c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3405c 12d             | xfer_retry      res     1         ' Control transfer retry count
3405c 12d             | xfer_retry      res     1         ' Control transfer retry count
3405c 12d             | retry           res     1         ' Transaction retry count
3405c 12d             | retry           res     1         ' Transaction retry count
3405c 12d             | utx             res     1         ' Byte to transmit on USB
3405c 12d             | utx             res     1         ' Byte to transmit on USB
3405c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3405c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3405c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3405c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3405c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3405c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3405c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3405c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3405c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3405c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3405c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3405c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3405c 12d             | frame           res     1         ' USB 1ms frame counter value
3405c 12d             | frame           res     1         ' USB 1ms frame counter value
3405c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3405c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3405c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3405c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3405c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3405c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3405c 12d             | crc             res     1         ' Used for CRC16 calculation
3405c 12d             | crc             res     1         ' Used for CRC16 calculation
3405c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3405c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3405c 12d             | retval          res     1         ' Global success/fail return parameter
3405c 12d             | retval          res     1         ' Global success/fail return parameter
3405c 12d             | context_retval  res     1         ' Operation contextual return parameter
3405c 12d             | context_retval  res     1         ' Operation contextual return parameter
3405c 12d             | ' Device stuff
3405c 12d             | hdev_id         res     1+MAX_DEVICES
3405c 12d             | hdev_id         res     1+MAX_DEVICES
3405c 12d             | hdev_bcd        res     1
3405c 12d             | hdev_bcd        res     1
3405c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3405c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3405c 12d             | ' Keyboard/mouse stuff
3405c 12d             | hctrl_ep_addr   res     1
3405c 12d             | hctrl_ep_addr   res     1
3405c 12d             | hctrl_max_pkt   res     1
3405c 12d             | hctrl_max_pkt   res     1
3405c 12d             | hconfig_base    res     1
3405c 12d             | hconfig_base    res     1
3405c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3405c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3405c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3405c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3405c 12d             | hdev_class      res     1
3405c 12d             | hdev_class      res     1
3405c 12d             | hdev_subclass   res     1
3405c 12d             | hdev_subclass   res     1
3405c 12d             | hdev_protocol   res     1
3405c 12d             | hdev_protocol   res     1
3405c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3405c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3405c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3405c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3405c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3405c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3405c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3405c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3405c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3405c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3405c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3405c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3405c 12d             | if HAVE_MOUSE
3405c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3405c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3405c 12d             | end
3405c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3405c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3405c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3405c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3405c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3405c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3405c 12d             | hdev_out_addr   res     1
3405c 12d             | hdev_out_addr   res     1
3405c 12d             | 
3405c 12d             | if EMUPAD_MAX_PLAYER > 0
3405c 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3405c 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3405c 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3405c 12d             | end
3405c 12d             | 
3405c 12d             | hreg_init_end
3405c 12d             | 
3405c 12d             | hidr_start
3405c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3405c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3405c 12d             | hidr_flags      res     1
3405c 12d             | hidr_flags      res     1
3405c 12d             | hidr_axis       res     3
3405c 12d             | hidr_axis       res     3
3405c 12d             | hidr_buttons    res     1
3405c 12d             | hidr_buttons    res     1
3405c 12d             | hidr_hats       res     1
3405c 12d             | hidr_hats       res     1
3405c 12d             | '' Above are actually useful values, 6 longs
3405c 12d             | hidr_id         res     1
3405c 12d             | hidr_id         res     1
3405c 12d             | hidr_state      res     1
3405c 12d             | hidr_state      res     1
3405c 12d             | hidr_size       res     1
3405c 12d             | hidr_size       res     1
3405c 12d             | hidr_count      res     1
3405c 12d             | hidr_count      res     1
3405c 12d             | hidr_offset     res     1
3405c 12d             | hidr_offset     res     1
3405c 12d             | hidr_usage_idx  res     1
3405c 12d             | hidr_usage_idx  res     1
3405c 12d             | hidr_lminmax    res     1
3405c 12d             | hidr_lminmax    res     1
3405c 12d             | hidr_pminmax    res     1
3405c 12d             | hidr_pminmax    res     1
3405c 12d             | hidr_type       res     1
3405c 12d             | hidr_type       res     1
3405c 12d             | hidr_end
3405c 12d             | 
3405c 12d             | ' Variables dependent on the system freqency
3405c 12d             | _var_64_lower_  res     1
3405c 12d             | _var_64_lower_  res     1
3405c 12d             | _var_64_upper_  res     1
3405c 12d             | _var_64_upper_  res     1
3405c 12d             | _12Mbps_        res     1
3405c 12d             | _12Mbps_        res     1
3405c 12d             | _1_5Mbps_       res     1
3405c 12d             | _1_5Mbps_       res     1
3405c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3405c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3405c 12d             | _1us_           res     1         ' 1us
3405c 12d             | _1us_           res     1         ' 1us
3405c 12d             | _10us_          res     1         ' 10us
3405c 12d             | _10us_          res     1         ' 10us
3405c 12d             | _33us_          res     1         ' 33us
3405c 12d             | _33us_          res     1         ' 33us
3405c 12d             | _txn_err_       res     1         ' 250us
3405c 12d             | _txn_err_       res     1         ' 250us
3405c 12d             | _500us_         res     1         ' 500us
3405c 12d             | _500us_         res     1         ' 500us
3405c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3405c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3405c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3405c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3405c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3405c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3405c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3405c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3405c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3405c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3405c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3405c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3405c 12d             | _preamble_wait_ res     1
3405c 12d             | _preamble_wait_ res     1
3405c 12d             | _1ms_           res     1         ' 1ms
3405c 12d             | _1ms_           res     1         ' 1ms
3405c 12d             | _2ms_           res     1         ' 2ms
3405c 12d             | _2ms_           res     1         ' 2ms
3405c 12d             | _suspend_wait_  res     1         ' 3ms
3405c 12d             | _suspend_wait_  res     1         ' 3ms
3405c 12d             | _4ms_           res     1         ' 4ms
3405c 12d             | _4ms_           res     1         ' 4ms
3405c 12d             | _xfer_wait_     res     1         ' 5ms
3405c 12d             | _xfer_wait_     res     1         ' 5ms
3405c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3405c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3405c 12d             | _reset_hold_    res     1         ' 15ms
3405c 12d             | _reset_hold_    res     1         ' 15ms
3405c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3405c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3405c 12d             | _21ms_          res     1         ' 21ms
3405c 12d             | _21ms_          res     1         ' 21ms
3405c 12d             | _100ms_         res     1         ' 100ms
3405c 12d             | _100ms_         res     1         ' 100ms
3405c 12d             | _500ms_         res     1         ' 500ms
3405c 12d             | _500ms_         res     1         ' 500ms
3405c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3405c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3405c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3405c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3405c 12d             | '------------------------------------------------------------------------------
3405c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3405c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3405c 12d             | _usb_d_ls_nco_  res     1
3405c 12d             | _usb_d_ls_nco_  res     1
3405c 12d             | _usb_h_fs_nco_  res     1
3405c 12d             | _usb_h_fs_nco_  res     1
3405c 12d             | _usb_d_fs_nco_  res     1
3405c 12d             | _usb_d_fs_nco_  res     1
3405c 12d             | '------------------------------------------------------------------------------
3405c 12d             | ' Scratch registers
3405c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3405c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3405c 12d             | htmp1           res     1
3405c 12d             | htmp1           res     1
3405c 12d             | htmp2           res     1
3405c 12d             | htmp2           res     1
3405c 12d             | htmp3           res     1
3405c 12d             | htmp3           res     1
3405c 12d             | hrep            res     1         ' Repeat count
3405c 12d             | hrep            res     1         ' Repeat count
3405c 12d             | hsave0          res     1         ' Subroutine parameter saves
3405c 12d             | hsave0          res     1         ' Subroutine parameter saves
3405c 12d             | hsave1          res     1
3405c 12d             | hsave1          res     1
3405c 12d             | hsave2          res     1
3405c 12d             | hsave2          res     1
3405c 12d             | isrtmp1         res     1
3405c 12d             | isrtmp1         res     1
3405c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3405c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3405c 12d             | hr0             res     1         ' Multi-purpose registers
3405c 12d             | hr0             res     1         ' Multi-purpose registers
3405c 12d             | hr1             res     1
3405c 12d             | hr1             res     1
3405c 12d             | hr2             res     1
3405c 12d             | hr2             res     1
3405c 12d             | hr3             res     1
3405c 12d             | hr3             res     1
3405c 12d             | hpar1           res     1         ' Routine entry/exit parameters
3405c 12d             | hpar1           res     1         ' Routine entry/exit parameters
3405c 12d             | hpar2           res     1
3405c 12d             | hpar2           res     1
3405c 12d             | hpar3           res     1
3405c 12d             | hpar3           res     1
3405c 12d             | hct2            res     1         ' Function response bus turn-around timer
3405c 12d             | hct2            res     1         ' Function response bus turn-around timer
3405c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3405c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3405c 12d             | mod_cnt         res     1         ' Used in idle loops
3405c 12d             | mod_cnt         res     1         ' Used in idle loops
3405c 12d             |                 fit     $1F0
3405c 12d             |                 org     $200
3405c 200             | hlut_start
3405c 200             | 
3405c 200             | '------------------------------------------------------------------------------
3405c 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3405c 200             | ' settings to startup defaults.
3405c 200             | '------------------------------------------------------------------------------
3405c 200             | ' On entry:
3405c 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3405c 200             | '------------------------------------------------------------------------------
3405c 200             | set_speed_full
3405c 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
34060 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
34064 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
34068 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3406c 204             | '                ret                             wcz     ' Restore caller flags on exit
3406c 204             | 
3406c 204             | '------------------------------------------------------------------------------
3406c 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3406c 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3406c 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3406c 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3406c 204             | ' putting the smart pins into reset.
3406c 204             | '------------------------------------------------------------------------------
3406c 204             | ' On entry:
3406c 204             | ' On exit: CZ flags restored to caller states
3406c 204             | '------------------------------------------------------------------------------
3406c 204             | set_speed_low
3406c 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
34070 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
34074 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
34078 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3407c 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
34080 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
34084 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
34088 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3408c 20c             | 
3408c 20c             | '------------------------------------------------------------------------------
3408c 20c             | ' Perform configuration stuff required when a device intitially connects.
3408c 20c             | '------------------------------------------------------------------------------
3408c 20c             | ' On entry:
3408c 20c             | ' On exit:
3408c 20c             | '------------------------------------------------------------------------------
3408c 20c             | on_connect
3408c 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
34090 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
34094 20e             | .retry
34094 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
34098 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3409c 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
340a0 211 00 08 00 FF 
340a4 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
340a8 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
340ac 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
340b0 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
340b4 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
340b8 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
340bc 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
340c0 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
340c4 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
340c8 21b 4C 03 B0 FD |                 call    #poll_waitx
340cc 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
340d0 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
340d4 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
340d8 21f B8 FF 9F FD |                 jmp     #.retry
340dc 220             | .get_dev_desc
340dc 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
340e0 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
340e4 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
340e8 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
340ec 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
340f0 225 88 FB BF FD |                 call    #reset
340f4 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
340f8 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
340fc 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
34100 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
34104 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34108 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3410c 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
34110 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
34114 22e 04 00 00 FF 
34118 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3411c 230 34 FA BF FD |                 call    #calc_crc5
34120 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
34124 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
34128 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3412c 234 F7 AD C2 FA |                 rdbyte  total_data, pb
34130 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
34134 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
34138 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3413c 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
34140 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
34144 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
34148 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3414c 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
34150 23d C4 02 B0 FD |                 call    #poll_waitx
34154 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
34158 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3415c 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
34160 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
34164 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
34168 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3416c 244 2D 00 64 5D |         if_nz   ret
34170 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
34174 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
34178 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3417c 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
34180 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
34184 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
34188 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3418c 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
34190 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
34194 24e 2C FB 9F CD |         if_b    jmp     #host_error
34198 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3419c 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
341a0 251 2D EC 63 FD |                 call    pa
341a4 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
341a8 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
341ac 254 2C EC 63 FD |                 jmp     pa
341b0 255             | 
341b0 255             | '------------------------------------------------------------------------------
341b0 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
341b0 255             | ' Status reporting is always in the function-to-host direction.
341b0 255             | '------------------------------------------------------------------------------
341b0 255             | ' On entry:
341b0 255             | '   PTRA - start address of the SETUP data in hub.
341b0 255             | '   PB - start address of the buffer/struct to be written to during the IN data
341b0 255             | '     stage.
341b0 255             | '   ep_addr_pid - device address, endpoint and CRC5.
341b0 255             | ' On exit:
341b0 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
341b0 255             | '     contains the count of data stage bytes actually received, which must
341b0 255             | '     always be <= the count requested.
341b0 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
341b0 255             | '     more specific USB operation error code.
341b0 255             | '------------------------------------------------------------------------------
341b0 255             | control_read
341b0 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
341b4 256 F8 8F 03 F6 |                 mov     hpar2, ptra
341b8 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
341bc 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
341c0 259             | .xfer_start
341c0 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
341c4 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
341c8 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
341cc 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
341d0 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
341d4 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
341d8 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
341dc 260 61 00 00 FF 
341e0 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
341e4 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
341e8 263             | .data
341e8 263 56 B1 02 F6 |                 mov     pkt_data, total_data
341ec 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
341f0 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
341f4 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
341f8 267             | .nak_retry
341f8 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
341fc 268             | .in_retry
341fc 268 BC F6 BF FD |                 call    #txn_in
34200 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
34204 26a 28 00 90 AD |         if_z    jmp     #.commit
34208 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3420c 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
34210 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
34214 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
34218 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3421c 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
34220 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
34224 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
34228 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3422c 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
34230 275             | .commit
34230 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
34234 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
34238 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3423c 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
34240 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
34244 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
34248 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3424c 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
34250 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
34254 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
34258 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3425c 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
34260 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
34264 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
34268 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3426c 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
34270 285             | .pre_status
34270 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
34274 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
34278 287 00 B0 06 F6 |                 mov     pkt_data, #0
3427c 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
34280 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
34284 28a 61 00 00 FF 
34288 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3428c 28c             | .out_retry
3428c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
34290 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34294 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
34298 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3429c 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
342a0 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
342a4 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
342a8 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
342ac 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
342b0 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
342b4 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
342b8 297             | ' I've encountered transfer STALL, even though the data looks correct, and
342b8 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
342b8 297             | ' ControlRead() transfer gets things unstuck most of the time...
342b8 297             | .xfer_retry
342b8 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
342bc 298 58 01 B0 FD |                 call    #poll_waitx
342c0 299 8C F9 BF FD |                 call    #wait_txn_ok
342c4 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
342c8 29b C7 F1 03 F6 |                 mov     ptra, hpar2
342cc 29c C8 EF 03 F6 |                 mov     pb, hpar3
342d0 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
342d4 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
342d8 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
342dc 2a0             | 
342dc 2a0             | '------------------------------------------------------------------------------
342dc 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
342dc 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
342dc 2a0             | ' the SETUP data struct is filled with the required values.
342dc 2a0             | '------------------------------------------------------------------------------
342dc 2a0             | ' On entry:
342dc 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
342dc 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
342dc 2a0             | '     stage.
342dc 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
342dc 2a0             | ' On exit:
342dc 2a0             | '   retval - used to convey the success/failure of each stage.
342dc 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
342dc 2a0             | '     more specific USB operation error code.
342dc 2a0             | '------------------------------------------------------------------------------
342dc 2a0             | control_write
342dc 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
342e0 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
342e4 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
342e8 2a3             | 
342e8 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
342ec 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
342f0 2a5 F7 91 03 F6 |                 mov     hpar3, pb
342f4 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
342f8 2a7             | .xfer_start
342f8 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
342fc 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
34300 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
34304 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34308 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3430c 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
34310 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
34314 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
34318 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3431c 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
34320 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
34324 2b2             | .data
34324 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
34328 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3432c 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
34330 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
34334 2b6             | .out_retry
34334 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
34338 2b7 88 F6 BF FD |                 call    #txn_out
3433c 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34340 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
34344 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
34348 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3434c 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
34350 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
34354 2be             | .commit
34354 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
34358 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3435c 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
34360 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
34364 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
34368 2c3             | pre_status_in
34368 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3436c 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
34370 2c5             | .status_retry
34370 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
34374 2c6 44 F5 BF FD |                 call    #txn_in
34378 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3437c 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
34380 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
34384 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
34388 2cb 2D 00 64 AD |         if_z    ret
3438c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
34390 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
34394 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
34398 2cf             | '               ret                                     ' Caller must handle transfer retirement
34398 2cf             | 
34398 2cf             | '------------------------------------------------------------------------------
34398 2cf             | ' Execute an IN interrupt transaction.
34398 2cf             | '------------------------------------------------------------------------------
34398 2cf             | ' On entry:
34398 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
34398 2cf             | '   hpar2 - Address of the IN data buffer
34398 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
34398 2cf             | ' On exit:
34398 2cf             | '   retval - the result of the operation.
34398 2cf             | '   hpar3 - the count of IN data bytes actually received.
34398 2cf             | '------------------------------------------------------------------------------
34398 2cf             | do_int_in
34398 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3439c 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
343a0 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
343a4 2d2             | 
343a4 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
343a8 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
343ac 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
343b0 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
343b4 2d6             | .retry
343b4 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
343b8 2d7 00 F5 BF FD |                 call    #txn_in
343bc 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
343c0 2d9 1C 00 90 AD |         if_z    jmp     #.commit
343c4 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
343c8 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
343cc 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
343d0 2dd 54 00 B0 FD |                 call    #retry_wait
343d4 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
343d8 2df 18 00 90 AD |         if_z    jmp     #.post_ret
343dc 2e0 D4 FF 9F FD |                 jmp     #.retry
343e0 2e1             | .commit
343e0 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
343e4 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
343e8 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
343ec 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
343f0 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
343f4 2e6             | .post_ret
343f4 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
343f8 2e7             | 
343f8 2e7             | 
343f8 2e7             | '------------------------------------------------------------------------------
343f8 2e7             | ' Resets the downstream hub port to FS
343f8 2e7             | '------------------------------------------------------------------------------
343f8 2e7             | dwnstream_reset
343f8 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
343fc 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
34400 2e9             | 
34400 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
34404 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
34408 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3440c 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
34410 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
34414 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
34418 2ef             | 
34418 2ef             | '------------------------------------------------------------------------------
34418 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
34418 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
34418 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
34418 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
34418 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
34418 2ef             | '------------------------------------------------------------------------------
34418 2ef             | ' On entry:
34418 2ef             | '   hctwait - wait interval in sysclocks.
34418 2ef             | ' On exit:
34418 2ef             | '------------------------------------------------------------------------------
34418 2ef             | poll_waitx
34418 2ef 1A 92 63 FD |                 getct   hct2
3441c 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
34420 2f1             | .wait
34420 2f1 FF 25 CC FB |                 jnct2   #.wait
34424 2f2 2D 00 64 FD |                 ret
34428 2f3             | 
34428 2f3             | '------------------------------------------------------------------------------
34428 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
34428 2f3             | '------------------------------------------------------------------------------
34428 2f3             | ' On entry:
34428 2f3             | '   retval - transaction response PID or error code.
34428 2f3             | ' On exit:
34428 2f3             | '------------------------------------------------------------------------------
34428 2f3             | retry_wait
34428 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3442c 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
34430 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
34434 2f6 14 00 90 AD |         if_z    jmp     #.nak
34438 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3443c 2f8 D8 FF BF FD |                 call    #poll_waitx
34440 2f9             | .dec
34440 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
34444 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
34448 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3444c 2fc             | .nak
3444c 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
34450 2fd C4 FF BF FD |                 call    #poll_waitx
34454 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
34458 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3445c 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
34460 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
34464 302 2D 00 64 FD |                 ret
34468 303             | 
34468 303             | host_reset
34468 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3446c 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
34470 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
34470 305 BD 01 05 FF 
34474 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
34478 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3447c 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
34480 309             | ' Check to see if the system clock has been changed.
34480 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
34484 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
34488 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3448c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
34490 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
34494 30e 40 46 62 FD |                 dirl    dp
34498 30f             | 
34498 30f 28 02 64 FD |                 setq    #1
3449c 310 80 00 80 FF 
344a0 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
344a4 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
344a8 313             | .enable
344a8 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
344ac 314 41 46 62 FD |                 dirh    dp
344b0 315 1F 36 63 FD |                 waitx   _1us_
344b4 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
344b8 317             | 
344b8 317             |                 ' Handle Port protection enable and startup delay
344b8 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
344bc 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
344c0 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
344c4 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
344c8 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
344cc 31c             | 
344cc 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
344d0 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
344d4 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
344d8 31f 00 00 04 F6 |                 mov     0-0, #0
344dc 320             | .regloop
344dc 320             | 
344dc 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
344dc 320             | 
344dc 320             | discon_entry
344dc 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
344e0 321             | 
344e0 321             |               
344e0 321             |         if HAVE_HIDPAD
344e0 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
344e4 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
344e8 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
344ec 324 F7 01 68 FC |                 wrlong  #0,pb
344f0 325             |         end
344f0 325             |         if EMUPAD_MAX_PLAYER > 0
344f0 325             |         end
344f0 325             | 
344f0 325             |                 ' Fall through to disconnected loop
344f0 325             | 
344f0 325             | '-----------------------------------------------------------------------------------------------------------------
344f0 325             | ' Device connect handling (Section 7.1.7.3).
344f0 325             | '-----------------------------------------------------------------------------------------------------------------
344f0 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
344f0 325             | ' device to connect (Section 7.1.7.3).
344f0 325             | '-----------------------------------------------------------------------------------------------------------------
344f0 325             | disconnected
344f0 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
344f4 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
344f8 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
344fc 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
34500 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
34504 32a             |         if ACTIVITY_LED >= 0
34504 32a             |         end
34504 32a 22 A7 82 FA |                 rqpin   urx, dm
34508 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3450c 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
34510 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
34514 32e             | .se1_test
34514 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
34518 32f FC FE BF FD |                 call    #poll_waitx
3451c 330 22 A7 82 FA |                 rqpin   urx, dm
34520 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
34524 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
34528 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3452c 334             | .se1            'SE1 is a fatal error condition
3452c 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
34530 335 E4 FE BF FD |                 call    #poll_waitx
34534 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
34538 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3453c 338             | .connect_test                                           ' Test lines until stable J/K state seen
3453c 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
34540 339 22 A7 82 FA |                 rqpin   urx, dm
34544 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
34548 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3454c 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
34550 33d             | connected
34550 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
34554 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
34558 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3455c 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
34560 341             | .set_pulse
34560 341 1A 64 63 FD |                 getct   _pulse_time_
34564 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
34568 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
34568 343             | ' of 1ms and make a correction, if necessary.
34568 343             | '                mov     htmp, _1ms_
34568 343             | '                subs    htmp, iframe_delta
34568 343             | '                adds    _frame1ms_clks_, htmp
34568 343             | '                debug(udec(_frame1ms_clks_))
34568 343             | 
34568 343             |                 ' Fall through to idle/processing loop
34568 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3456c 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
34570 345             | 
34570 345             | hidle
34570 345 22 A7 82 FA |                 rqpin   urx, dm
34574 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
34578 347 98 00 90 CD |         if_c    jmp     #.se0_test
3457c 348 24 06 70 FD |                 pollct3                         wc
34580 349 68 00 90 3D |         if_nc   jmp     #.nopoll
34584 34a 1A 94 63 FD |                 getct   hct3
34588 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3458c 34c             | 
3458c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
34590 34d 00 70 E3 F8 |                 getbyte htmp
34594 34e             | 
34594 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
34598 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3459c 350 40 00 90 AD |         if_z    jmp     #.poll
345a0 351             | 
345a0 351             |         if _HAVE_GAMEPAD
345a0 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
345a4 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
345a8 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
345ac 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
345b0 355 2C 00 90 AD |         if_z    jmp     #.poll
345b4 356             |         end
345b4 356             | 
345b4 356             |         if HAVE_MOUSE
345b4 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
345b8 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
345bc 358 20 00 90 AD |         if_z    jmp     #.poll
345c0 359             |         end
345c0 359             | 
345c0 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
345c4 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
345c8 35b 14 00 90 AD |         if_z    jmp     #.poll
345cc 35c             | 
345cc 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
345d0 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
345d4 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
345d8 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
345dc 360             |         if HAVE_MOUSE
345dc 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
345e0 361             |         else
345e0 361             |         end
345e0 361             | 
345e0 361             | .poll
345e0 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
345e4 362 2D EC 63 FD |                 call    pa
345e8 363             | .skip_poll
345e8 363             | 
345e8 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
345ec 364             | 
345ec 364             | .nopoll
345ec 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
345f0 365 44 00 90 AD |         if_z    jmp     #hsuspend
345f4 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
345f8 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
345fc 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
34600 369 1A 84 63 FD |                 getct   hr0
34604 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
34608 36b             |         if ACTIVITY_LED >= 0
34608 36b             |         end
34608 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3460c 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
34610 36d 5C FF 9F FD |                 jmp     #hidle
34614 36e             | ' Check for extended SE0 state on the bus
34614 36e             | .se0_test
34614 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
34618 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3461c 370 22 A7 82 FA |                 rqpin   urx, dm
34620 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
34624 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
34628 373 24 F6 BF FD |                 call    #wait_txn_ok
3462c 374 00 00 80 FF 
34630 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
34634 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
34634 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
34638 377             | 
34638 377             | hsuspend
34638 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3463c 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
34640 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
34644 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
34648 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3464c 37c 00 96 07 F6 |                 mov     mod_cnt, #0
34650 37d             | 
34650 37d             |                 ' Fall through to resume wait loop
34650 37d             | 
34650 37d             | hwait_resume
34650 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
34654 37e 02 86 47 F0 |                 shr     hr1, #2
34658 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3465c 380             |         if ACTIVITY_LED >= 0
3465c 380             |         end
3465c 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
34660 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
34664 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
34668 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3466c 384 18 00 90 AD |         if_z    jmp     #.resume
34670 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
34674 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
34678 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3467c 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
34680 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
34684 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
34688 38b             | .resume
34688 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3468c 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
34690 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
34694 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
34698 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3469c 390 1F 70 63 FD |                 waitx   htmp
346a0 391 22 07 28 FC |                 wypin   #OUT_J, dm
346a4 392 01 70 47 F0 |                 shr     htmp, #1
346a8 393 1F 70 63 FD |                 waitx   htmp
346ac 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
346b0 395 1A 92 62 FD |                 getct   iframe_ct_base
346b4 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
346b8 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
346bc 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
346c0 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
346c4 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
346c8 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
346cc 39c             | 
346cc 39c             | '------------------------------------------------------------------------------
346cc 39c             | ' Send preamble to enable low-speed HUB ports
346cc 39c             | '------------------------------------------------------------------------------
346cc 39c             | ' On entry:
346cc 39c             | ' On exit:
346cc 39c             | '   USB baud rate set to low-speed
346cc 39c             | '------------------------------------------------------------------------------
346cc 39c             | utx_pre
346cc 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
346d0 39d 40 46 62 FD |                 dirl    dp
346d4 39e 28 02 64 FD |                 setq    #1
346d8 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
346dc 3a0 58 44 62 FD |                 drvl    dm
346e0 3a1 59 46 62 FD |                 drvh    dp
346e4 3a2             | 
346e4 3a2 1E 00 00 FF 
346e8 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
346ec 3a4             | 
346ec 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
346f0 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
346f4 3a6 28 02 64 3D |         if_nc   setq    #1
346f8 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
346fc 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
34700 3a9             | .l1
34700 3a9             | 
34700 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
34704 3aa 40 46 62 FD |                 dirl    dp
34708 3ab 28 02 64 FD |                 setq    #1
3470c 3ac 80 00 80 FF 
34710 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
34714 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
34718 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3471c 3b0 41 46 62 FD |                 dirh    dp
34720 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
34724 3b2             | 
34724 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
34728 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3472c 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
34730 3b5             | 
34730 3b5             | hlut_end
34730 3b5             |                 fit     $400
34730 3b5             |                 orgh
34730                 | if OVERLAP_MEMORY
34730                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
34730                 | end
34730                 | '------------------------------------------------------------------------------
34730                 | ' Routines called from cog space.
34730                 | '------------------------------------------------------------------------------
34730                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
34730                 | '------------------------------------------------------------------------------
34730                 | 
34730                 | '------------------------------------------------------------------------------
34730                 | ' USB host cog initialization.
34730                 | '------------------------------------------------------------------------------
34730                 | usb_host_init
34730                 |                 ' Initialize buffer pointers
34730                 |         if OVERLAP_MEMORY
34730                 |         else
34730     40 15 B0 FE |                 loc     pb, #hid_descr
34734                 |         end
34734     F7 4B 02 F6 |                 mov     hid_descr_p, pb
34738                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
34738                 |                 {
34738                 |                 }
34738                 |         
34738                 |                 {
34738                 |                 }
34738                 |                 'loc     pb,#hkbd_report
34738                 |                 'mov     hkbd_report_p,pb
34738                 | 
34738     08 1D B0 FE |                 loc     pb, #hub_descr
3473c     F7 4D 02 F6 |                 mov     hub_descr_p, pb
34740     1D 1D B0 FE |                 loc     pb, #urx_buff
34744     F7 4F 02 F6 |                 mov     urx_buff_p, pb
34748     95 1D B0 FE |                 loc     pb, #dev_desc_buff
3474c     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
34750     9F 1D B0 FE |                 loc     pb, #con_desc_buff
34754     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
34758     18 15 B0 FE |                 loc     pb, #usb_cache_start
3475c     F7 55 02 F6 |                 mov     cache_start_p, pb
34760     E9 1C B0 FE |                 loc     pb, #usb_cache_end
34764     F7 57 02 F6 |                 mov     cache_end_p, pb
34768                 | 
34768                 |         if ERROR_LED >= 0
34768                 |         end
34768                 | 
34768                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
34768                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
34768                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
34768                 | ' Configure and enable the Serial Host USB port.
34768     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3476c                 | 
3476c                 | '------------------------------------------------------------------------------
3476c                 | ' Timing calculations happen before any interrupt(s) are enabled.
3476c                 | '------------------------------------------------------------------------------
3476c                 | ' On entry:
3476c                 | '   htmp - current CLKFREQ value.
3476c                 | '------------------------------------------------------------------------------
3476c                 | hinit_usb_timings
3476c                 | '                getct   htmp2
3476c     B8 59 02 F6 |                 mov     save_sysclk, htmp
34770     8D 5B 80 FF 
34774     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
34778     18 30 63 FD |                 getqx   _12Mbps_
3477c     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
34780     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
34784     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
34788     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3478c     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
34790     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
34794     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
34798     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3479c     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
347a0     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
347a4     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
347a8     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
347ac     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
347b0     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
347b4     80 00 00 FF 
347b8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
347bc     18 2C 63 FD |                 getqx   _var_64_lower_
347c0     19 2E 63 FD |                 getqy   _var_64_upper_
347c4     28 2C 63 FD |                 setq    _var_64_lower_
347c8     65 CD 1D FF 
347cc     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
347d0     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
347d4     01 00 00 FF 
347d8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
347dc     18 2C 63 FD |                 getqx   _var_64_lower_
347e0     19 2E 63 FD |                 getqy   _var_64_upper_
347e4     28 2C 63 FD |                 setq    _var_64_lower_
347e8     A1 07 00 FF 
347ec     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
347f0     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
347f4     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
347f8     09 36 57 F0 |                 shr     _1us_, #9               wc
347fc     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
34800     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
34804     18 38 63 FD |                 getqx   _10us_
34808     09 38 57 F0 |                 shr     _10us_, #9              wc
3480c     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
34810     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
34814     18 3A 63 FD |                 getqx   _33us_
34818     09 3A 57 F0 |                 shr     _33us_, #9              wc
3481c     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
34820     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
34824     18 3C 63 FD |                 getqx   _txn_err_
34828     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3482c     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
34830     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
34834     18 3E 63 FD |                 getqx   _500us_
34838     09 3E 57 F0 |                 shr     _500us_, #9             wc
3483c     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
34840     01 00 00 FF 
34844     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
34848     18 40 63 FD |                 getqx   _txn_ok_ls_
3484c     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
34850     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
34854     01 00 00 FF 
34858     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3485c     18 42 63 FD |                 getqx   _txn_ok_fs_
34860     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
34864     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
34868     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3486c     05 00 00 FF 
34870     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
34874     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
34878     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3487c     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
34880     1C 00 00 FF 
34884     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
34888     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3488c     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
34890     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
34894     00 00 00 FF 
34898     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3489c     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
348a0     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
348a4     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
348a8     04 00 00 FF 
348ac     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
348b0     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
348b4     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
348b8     8D 5B 00 FF 
348bc     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
348c0     18 4C 63 FD |                 getqx   _preamble_wait_
348c4     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
348c8     01 00 00 FF 
348cc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
348d0     18 2C 63 FD |                 getqx   _var_64_lower_
348d4     19 2E 63 FD |                 getqy   _var_64_upper_
348d8     28 2C 63 FD |                 setq    _var_64_lower_
348dc     01 00 00 FF 
348e0     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
348e4     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
348e8     09 4E 57 F0 |                 shr     _1ms_, #9               wc
348ec     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
348f0     FF FF 7F FF 
348f4     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
348f8     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
348fc     A7 51 03 F6 |                 mov     _2ms_, _1ms_
34900     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
34904     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
34908     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3490c     A7 55 03 F6 |                 mov     _4ms_, _1ms_
34910     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
34914     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
34918     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3491c     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
34920     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
34924     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
34928     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3492c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
34930     A7 59 03 F6 |                 mov     _8ms_, _1ms_
34934     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
34938     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3493c     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
34940     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
34944     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
34948     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3494c     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
34950     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
34954     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
34958     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3495c     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
34960                 | '        _ret_   mov     _1sec_, save_sysclk
34960                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
34960                 | '                ret
34960                 | {
34960                 | }
34960                 | 
34960                 | '------------------------------------------------------------------------------
34960                 | ' Parse a configuration descriptor chain to see if the device is a recognized
34960                 | ' one. If it is, start the task progression that will configure the device for
34960                 | ' use.
34960                 | '------------------------------------------------------------------------------
34960                 | ' On entry:
34960                 | '   hconfig_base - start address of the cached config descriptor chain.
34960                 | ' On exit:
34960                 | '------------------------------------------------------------------------------
34960                 | hparse_con_desc
34960     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
34964     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
34968     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3496c     4E 70 FF F9 |                 movbyts htmp,#%%1032
34970     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
34974                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
34974                 | 
34974     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
34978     6E ED 03 F1 |                 add     pa, hconfig_base
3497c     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
34980                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
34980                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
34980                 | ' that defines a keyboard and/or mouse.
34980     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
34984                 | .next_intf
34984     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
34988     BC 01 90 3D |         if_ae   jmp     #hset_config
3498c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
34990     75 F3 03 F1 |                 add     ptrb, hnext_desc
34994     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
34998     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3499c     0C 00 90 AD |         if_z    jmp     #.intf
349a0     80 71 C7 FA |                 rdbyte  htmp, ptrb
349a4     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
349a8     D8 FF 9F FD |                 jmp     #.next_intf
349ac                 | .intf
349ac     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
349b0     00 90 07 F6 |                 mov     hpar3, #0
349b4     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
349b8     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
349bc     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
349c0     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
349c4                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
349c4                 | 
349c4                 | .endp
349c4     80 71 C7 FA |                 rdbyte  htmp, ptrb
349c8     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
349cc     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
349d0     78 00 90 3D |         if_ae   jmp     #.get_device
349d4     6E F3 03 F6 |                 mov     ptrb, hconfig_base
349d8     75 F3 03 F1 |                 add     ptrb, hnext_desc
349dc     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
349e0     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
349e4     64 00 90 AD |         if_z    jmp     #.get_device
349e8     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
349ec     04 00 90 AD |         if_z    jmp     #.get_ep
349f0     D0 FF 9F FD |                 jmp     #.endp
349f4                 | .get_ep
349f4     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
349f8     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
349fc     0F 86 67 F0 |                 shl     hr1, #8 + 7
34a00     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
34a04     3F 00 00 FF 
34a08     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
34a0c     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
34a10     00 8E 0F F2 |                 cmp     hpar2, #0               wz
34a14     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
34a18     00 90 0F F2 |                 cmp     hpar3, #0               wz
34a1c     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
34a20     A0 FF 9F FD |                 jmp     #.endp
34a24                 | .in_ep
34a24     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
34a28     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
34a2c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
34a2c     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
34a30     C2 89 DB F8 |                 setbyte hr2, hr0, #3
34a34     8C FF 9F FD |                 jmp     #.endp
34a38                 | .out_ep
34a38     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
34a3c     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
34a40                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
34a40     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
34a44     C2 8B DB F8 |                 setbyte hr3, hr0, #3
34a48     78 FF 9F FD |                 jmp     #.endp
34a4c                 | 
34a4c                 | .get_device
34a4c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
34a50     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
34a54     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
34a58     68 00 90 AD |         if_z    jmp     #.gamepad
34a5c     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
34a60     AC 00 90 AD |         if_z    jmp     #.hub
34a64     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
34a68     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
34a6c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
34a70     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
34a74     4C 00 90 AD |         if_z    jmp     #.gamepad
34a78     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
34a7c     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
34a80                 | .keyboard
34a80     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
34a84                 |         if HAVE_MOUSE
34a84     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
34a88                 |         else
34a88                 |         end
34a88     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
34a8c     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
34a90     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
34a94     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
34a98     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
34a9c     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
34aa0                 |                 'debug(udec(kb_intf_num))
34aa0                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
34aa0     E0 FE 9F FD |                 jmp     #.next_intf
34aa4                 | if HAVE_MOUSE
34aa4                 | .mouse
34aa4     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
34aa8     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
34aac     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
34ab0     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
34ab4     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
34ab8                 |                 'getbyte ms_interval, hr2, #3
34ab8     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
34abc     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
34ac0                 |                 'debug(udec(kb_intf_num))
34ac0                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
34ac0     C0 FE 9F FD |                 jmp     #.next_intf
34ac4                 | end
34ac4                 | .gamepad
34ac4     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
34ac8     C7 71 63 F5 |                 xor     htmp, hpar2
34acc     3F 00 00 FF 
34ad0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
34ad4     AC FE 9F AD |         if_z    jmp     #.next_intf
34ad8                 |         if HAVE_MOUSE
34ad8     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
34adc     C7 71 63 F5 |                 xor     htmp, hpar2
34ae0     3F 00 00 FF 
34ae4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
34ae8     98 FE 9F AD |         if_z    jmp     #.next_intf
34aec                 |         end
34aec     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
34af0     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
34af4     8C FE 9F 5D |         if_nz   jmp     #.next_intf
34af8                 | 
34af8     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
34afc     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
34b00     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
34b04     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
34b08     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
34b0c                 |                 'debug(udec(gp_intf_num))
34b0c                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
34b0c     74 FE 9F FD |                 jmp     #.next_intf
34b10                 | .hub
34b10     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
34b14     6C FE 9F 5D |         if_nz   jmp     #.next_intf
34b18     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
34b1c     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
34b20     60 FE 9F 5D |         if_nz   jmp     #.next_intf
34b24     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
34b28     58 FE 9F 5D |         if_nz   jmp     #.next_intf
34b2c     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
34b30     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
34b34     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
34b38     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
34b3c     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
34b40     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
34b44                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
34b44     3C FE 9F FD |                 jmp     #.next_intf
34b48                 | 
34b48                 | '------------------------------------------------------------------------------
34b48                 | ' If a newly-connected device is recognized, do whatever is needed to configure
34b48                 | ' it according to its function, or functions. In the case of this boot protocol
34b48                 | ' keyboard/mouse class driver:
34b48                 | ' - SetConfiguration(config_num)
34b48                 | ' - SetProtocol(boot)
34b48                 | ' - SetIdle(indefinite)
34b48                 | ' - Enter the device interrupt IN polling task stage.
34b48                 | '------------------------------------------------------------------------------
34b48                 | ' On entry:
34b48                 | ' On exit:
34b48                 | '------------------------------------------------------------------------------
34b48                 | hset_config
34b48                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
34b48                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
34b48     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
34b4c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
34b50     00 00 0C F2 |                 cmp     0-0, #0                 wz
34b54     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
34b58                 |         if HAVE_MOUSE
34b58     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
34b5c                 |         end
34b5c     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
34b60     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
34b64                 | .set_config
34b64     6C 0E D0 FE |                 loc     ptra, #set_config
34b68     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
34b6c     6E ED 03 F1 |                 add     pa, hconfig_base
34b70     F6 8D C3 FA |                 rdbyte  hpar1, pa
34b74     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
34b78     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
34b7c     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
34b80     A0 02 A0 FD |                 call    #control_write
34b84     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34b88     2D 00 64 5D |         if_nz   ret
34b8c                 | .kbd_config
34b8c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
34b90     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
34b94                 | 
34b94     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
34b98     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
34b9c     3F 00 00 FF 
34ba0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
34ba4     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
34ba8                 | 
34ba8     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
34bac     34 0E D0 FE |                 loc     ptra, #set_protocol
34bb0     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
34bb4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
34bb8     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
34bbc     A0 02 A0 FD |                 call    #control_write
34bc0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34bc4     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
34bc8     E4 02 90 5D |         if_nz   jmp     #.notify_client
34bcc     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
34bd0     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
34bd4     30 03 B0 FD |                 call    #hset_idle
34bd8                 |                 'cmp     retval, #PID_ACK        wz
34bd8                 |         'if_nz   mov     hkbd_ep_addr, #0
34bd8                 |         'if_nz   jmp     #.notify_client
34bd8     A8 99 02 F6 |                 mov     hctwait, _2ms_
34bdc     EF 02 A0 FD |                 call    #poll_waitx
34be0     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
34be4     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
34be8     90 17 90 FE |                 loc     pa, #hkbd_led_rep
34bec     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
34bf0     2C 03 B0 FD |                 call    #hset_kbdled_report
34bf4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34bf8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
34bfc     B0 02 90 5D |         if_nz   jmp     #.notify_client
34c00     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
34c04     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
34c08     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
34c0c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
34c10     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
34c14     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
34c18     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
34c1c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
34c20     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
34c24     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
34c28     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
34c2c                 |         if !!HAVE_MOUSE
34c2c                 |         end
34c2c                 | 
34c2c                 | .mouse_config
34c2c                 | if HAVE_MOUSE
34c2c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
34c30     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
34c34     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
34c38     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
34c3c     3F 00 00 FF 
34c40     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
34c44     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
34c48                 | 
34c48                 |                 debug("mouse passed addr check")
34c48                 | 
34c48     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
34c4c     00 00 80 FF 
34c50     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
34c54     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
34c58     1B 01 A0 FD |                 call    #get_hid_descr_buffer
34c5c     55 02 A0 FD |                 call    #control_read
34c60     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34c64     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
34c68     44 02 90 5D |         if_nz   jmp     #.notify_client
34c6c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
34c70     56 01 00 F6 |                 mov     0-0, total_data
34c74     1B 01 A0 FD |                 call    #get_hid_descr_buffer
34c78                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
34c78                 | 
34c78     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
34c7c     64 0D D0 FE |                 loc     ptra, #set_protocol
34c80     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
34c84     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
34c88     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
34c8c     A0 02 A0 FD |                 call    #control_write
34c90     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34c94     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
34c98     14 02 90 5D |         if_nz   jmp     #.notify_client
34c9c                 |                 debug("mouse passed SetProtocol")
34c9c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
34ca0     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
34ca4     60 02 B0 FD |                 call    #hset_idle
34ca8                 |                 'cmp     retval, #PID_ACK        wz
34ca8                 |         'if_nz   mov     hmouse_ep_addr, #0
34ca8                 |         'if_nz   jmp     #.notify_client
34ca8                 |                 debug("mouse passed SetIdle")
34ca8     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
34cac     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
34cb0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
34cb4     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
34cb8     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
34cbc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
34cc0     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
34cc4     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
34cc8     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
34ccc     3F 00 00 FF 
34cd0     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
34cd4     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
34cd8     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
34cdc     D0 01 90 FD |                 jmp     #.notify_client
34ce0                 | end
34ce0                 | .gamepad_config
34ce0                 | if _HAVE_GAMEPAD
34ce0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
34ce4     00 00 0C F2 |                 cmp     0-0, #0                 wz
34ce8     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
34cec     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
34cf0     00 70 03 F6 |                 mov     htmp, 0-0
34cf4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
34cf8     3F 00 00 FF 
34cfc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
34d00     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
34d04                 | 
34d04     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
34d08     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
34d0c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
34d10     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
34d14     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
34d18     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
34d1c     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
34d20     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
34d24     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
34d28     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
34d2c     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
34d30     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
34d34     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
34d38     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
34d3c                 | 
34d3c                 |                 if EMUPAD_MAX_PLAYER > 0
34d3c                 |                 
34d3c                 | .rule_loop           
34d3c                 |                 end
34d3c                 | 
34d3c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
34d40     5C 00 90 AD |         if_e    jmp     #.xinput
34d44     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
34d48     00 70 03 F6 |                 mov     htmp,0-0
34d4c     01 A6 02 FF 
34d50     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
34d54     7C 00 90 AD |         if_e    jmp     #.ps3
34d58                 | 
34d58     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
34d5c     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
34d60     00 00 80 5F 
34d64     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
34d68     03 00 80 AF 
34d6c     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
34d70     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
34d74     1B 01 A0 FD |                 call    #get_hid_descr_buffer
34d78     55 02 A0 FD |                 call    #control_read
34d7c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34d80     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
34d84     00 00 04 56 |         if_nz   mov     0-0, #0
34d88     24 01 90 5D |         if_nz   jmp     #.notify_client
34d8c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
34d90     56 01 00 F6 |                 mov     0-0, total_data
34d94     1B 01 A0 FD |                 call    #get_hid_descr_buffer
34d98                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
34d98                 | 
34d98     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
34d9c     10 01 90 FD |                 jmp     #.notify_client
34da0                 | .xinput
34da0     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
34da4     2D EF 03 F6 |                 mov     pb,hdev_port
34da8     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
34dac     03 EE 27 F3 |                 fle     pb,#3
34db0     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
34db4     02 EF 47 FC |                 wrbyte  pb, ptra[2]
34db8                 | 
34db8     03 B0 06 F6 |                 mov     pkt_data, #3
34dbc     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
34dc0     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
34dc4     5A 00 A0 FD |                 call    #txn_out
34dc8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
34dcc                 | 
34dcc     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
34dd0     DC 00 90 FD |                 jmp     #.notify_client
34dd4                 | .ps3
34dd4     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
34dd8     2D EF 03 F6 |                 mov     pb,hdev_port
34ddc     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
34de0     04 EE 27 F3 |                 fle     pb,#4
34de4     F7 EF C3 F9 |                 decod   pb
34de8     09 EF 47 FC |                 wrbyte  pb, ptra[9]
34dec                 | 
34dec     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
34df0     00 0C D0 FE |                 loc     ptra, #set_report
34df4     01 00 80 FF 
34df8     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
34dfc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
34e00     03 61 5C FC |                 wrword  #48, ptra[wLength]
34e04     20 0C B0 FE |                 loc     pb, #ps3_command_buff
34e08     A0 02 A0 FD |                 call    #control_write
34e0c                 | 
34e0c     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
34e10     E0 0B D0 FE |                 loc     ptra, #set_report
34e14     01 00 80 FF 
34e18     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
34e1c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
34e20     03 09 5C FC |                 wrword  #4, ptra[wLength]
34e24     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
34e28     A0 02 A0 FD |                 call    #control_write
34e2c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
34e30     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
34e34     00 00 04 56 |         if_nz   mov     0-0, #0
34e38     74 00 90 5D |         if_nz   jmp     #.notify_client
34e3c                 | 
34e3c     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
34e40     6C 00 90 FD |                 jmp     #.notify_client
34e44                 | end
34e44                 | 
34e44                 | .hub_config
34e44     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
34e48     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
34e4c     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
34e50     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
34e54     3F 00 00 FF 
34e58     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
34e5c     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
34e60                 | 
34e60     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
34e64     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
34e68     26 EF 03 F6 |                 mov     pb, hub_descr_p
34e6c     55 02 A0 FD |                 call    #control_read
34e70     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34e74     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
34e78     34 00 90 5D |         if_nz   jmp     #.notify_client
34e7c                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
34e7c                 | 
34e7c     26 F1 03 F6 |                 mov     ptra, hub_descr_p
34e80     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
34e84     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
34e88                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
34e88                 | .pwr_loop
34e88     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
34e8c     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
34e90     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
34e94     A0 02 A0 FD |                 call    #control_write
34e98     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
34e9c                 | 
34e9c     B1 99 02 F6 |                 mov     hctwait, _500ms_
34ea0     B0 99 02 F1 |                 add     hctwait, _100ms_
34ea4     EF 02 A0 FD |                 call    #poll_waitx
34ea8                 | 
34ea8     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
34eac     00 00 90 FD |                 jmp     #.notify_client
34eb0                 | 
34eb0                 | .notify_client
34eb0     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
34eb4     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
34eb8                 |                 debug(uhex_long(hdev_type,hdev_type+1))
34eb8                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
34eb8     2D 00 64 FD |                 ret
34ebc                 | 
34ebc                 | '------------------------------------------------------------------------------
34ebc                 | ' Initialize the keyboard/mouse data area to start-up values.
34ebc                 | '------------------------------------------------------------------------------
34ebc                 | ' On entry:
34ebc                 | ' On exit:
34ebc                 | '------------------------------------------------------------------------------
34ebc                 | init_kbdm_data
34ebc     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
34ec0     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
34ec4                 | 
34ec4     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
34ec8     2B ED 03 F6 |                 mov     pa, cache_end_p
34ecc                 | .loop
34ecc     61 01 4C FC |                 wrbyte  #0, ptra++
34ed0     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
34ed4     F4 FF 9F CD |         if_b    jmp     #.loop
34ed8                 |         
34ed8                 |         if EMUPAD_MAX_PLAYER > 0
34ed8                 |         end
34ed8                 | 
34ed8                 | 
34ed8     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
34edc                 | .regloop
34edc     00 EC 8F F9 |                 altd    pa
34ee0     00 00 04 F6 |                 mov     0-0, #0
34ee4     01 EC 07 F1 |                 add     pa, #1
34ee8     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
34eec     EC FF 9F 5D |         if_nz   jmp     #.regloop
34ef0                 | 
34ef0     E1 E1 61 FF 
34ef4     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
34ef8     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
34efc     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
34f00     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
34f04                 | 
34f04     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
34f08                 | 
34f08                 | '------------------------------------------------------------------------------
34f08                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
34f08                 | ' function.
34f08                 | '------------------------------------------------------------------------------
34f08                 | ' On entry:
34f08                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
34f08                 | '   hpar2 - index number of the target interface.
34f08                 | ' On exit:
34f08                 | '------------------------------------------------------------------------------
34f08                 | hset_idle
34f08     A8 99 02 F6 |                 mov     hctwait, _2ms_
34f0c     EF 02 A0 FD |                 call    #poll_waitx
34f10     D8 0A D0 FE |                 loc     ptra, #set_idle
34f14     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
34f18     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
34f1c     A0 02 80 FD |                 jmp     #control_write
34f20                 | 
34f20                 | '------------------------------------------------------------------------------
34f20                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
34f20                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
34f20                 | '------------------------------------------------------------------------------
34f20                 | ' On entry:
34f20                 | '   ep_addr_pid - device address and enpoint for the request.
34f20                 | ' On exit:
34f20                 | '   retval - transaction result.
34f20                 | '------------------------------------------------------------------------------
34f20                 | hset_kbdled_report
34f20     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
34f24     CC 0A D0 FE |                 loc     ptra, #set_report
34f28     01 00 80 FF 
34f2c     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
34f30     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
34f34     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
34f38     27 EF 03 F6 |                 mov     pb, urx_buff_p
34f3c     F7 77 42 FC |                 wrbyte  kb_led_states, pb
34f40     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
34f44                 | 
34f44                 | '------------------------------------------------------------------------------
34f44                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
34f44                 | '------------------------------------------------------------------------------
34f44                 | ' On entry:
34f44                 | ' On exit:
34f44                 | '------------------------------------------------------------------------------
34f44                 | hget_kbd_in_report
34f44     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
34f48     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
34f4c     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
34f50     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
34f54     CF 02 A0 FD |                 call    #do_int_in
34f58     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34f5c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
34f60                 | 
34f60     00 90 0F F2 |                 cmp     hpar3, #0               wz
34f64     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
34f68                 | 
34f68     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
34f6c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
34f70     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
34f74     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
34f78                 | 
34f78     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
34f7c     18 00 B0 FD |                 call    #hkbd_compare
34f80                 |         if EMUPAD_MAX_PLAYER > 0
34f80                 |         end
34f80                 | 
34f80                 | .led_check
34f80     3B 71 03 F6 |                 mov     htmp, kb_led_states
34f84     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
34f88     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
34f8c     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
34f90     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
34f94     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
34f98                 | 
34f98                 | '------------------------------------------------------------------------------
34f98                 | ' Compare current and previous keyboard data buffers for keypress changes.
34f98                 | '------------------------------------------------------------------------------
34f98                 | hkbd_compare
34f98     27 F1 03 F6 |                 mov     ptra, urx_buff_p
34f9c     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
34fa0     61 73 07 FB |                 rdlong  htmp1, ptra++
34fa4     E1 75 07 FB |                 rdlong  htmp2, ptrb++
34fa8     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
34fac     61 73 07 FB |                 rdlong  htmp1, ptra++
34fb0     E1 75 07 FB |                 rdlong  htmp2, ptrb++
34fb4     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
34fb8     2D 00 64 AD |         if_z    ret
34fbc                 | 
34fbc     B4 13 D0 FE |                 loc     ptra, #hkbd_report
34fc0                 | 
34fc0                 |                 ' Handle modifiers
34fc0     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
34fc4     00 87 C7 FA |                 rdbyte  hr1, ptra
34fc8     C7 87 43 F9 |                 rolword hr1,hpar2,#0
34fcc     63 86 63 FD |                 mergew  hr1
34fd0     08 EC 07 F6 |                 mov     pa,#8
34fd4                 | .modloop
34fd4     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
34fd8     E8 8C 07 F6 |                 mov     hpar1,#$E8
34fdc     F6 8D 83 F1 |                 sub     hpar1,pa
34fe0     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
34fe4     FB ED 6F FB |                 djnz    pa,#.modloop
34fe8                 | 
34fe8     6F E0 75 FD | .release        modc    _set    wc
34fec                 |                 'alts    hdev_port, #hid_report_p
34fec                 |                 'mov     ptra, hid_report_p
34fec     02 F0 07 F1 |                 add     ptra, #2
34ff0     06 EC 07 F6 |                 mov     pa, #6
34ff4     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
34ff8     20 00 90 AD |         if_z    jmp     #.rl3
34ffc     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
35000     02 F2 07 F1 |                 add     ptrb, #2
35004     06 EE 07 F6 |                 mov     pb, #6
35008     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3500c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
35010     08 00 90 AD |         if_z    jmp     #.rl3
35014     FC EF 6F FB |                 djnz    pb, #.rl2
35018     68 00 B0 FD |                 call    #hkbd_translate
3501c     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
35020                 | 
35020     00 90 07 F6 |                 mov     hpar3, #0
35024     1F 90 27 F4 |                 bith    hpar3, #31
35028                 | 
35028     6F 00 74 FD | .press          modc    _clr    wc
3502c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
35030     02 F0 07 F1 |                 add     ptra, #2
35034     06 EC 07 F6 |                 mov     pa, #6
35038     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3503c     20 00 90 AD |         if_z    jmp     #.pl3
35040     30 13 F0 FE |                 loc     ptrb, #hkbd_report
35044     02 F2 07 F1 |                 add     ptrb, #2
35048     06 EE 07 F6 |                 mov     pb, #6
3504c     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
35050     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
35054     08 00 90 AD |         if_z    jmp     #.pl3
35058     FC EF 6F FB |                 djnz    pb, #.pl2
3505c     24 00 B0 FD |                 call    #hkbd_translate
35060     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
35064                 | 
35064     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
35068     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3506c     28 02 64 FD |                 setq #1
35070     61 73 07 FB |                 rdlong  htmp1, ptra++
35074     28 02 64 FD |                 setq #1
35078     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3507c     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
35080                 | 
35080     2D 00 64 FD |                 ret
35084                 | 
35084                 | '------------------------------------------------------------------------------
35084                 | ' Translate keyboard scancode to ASCII
35084                 | '------------------------------------------------------------------------------
35084                 | ' On entry:
35084                 | '   hpar1 - scancode
35084                 | '   hpar2 - key modifiers state
35084                 | '       c - pressed (0) or released (1) flag
35084                 | ' On exit:
35084                 | '   hpar1 - bit     31 = 0 pressed, 1 released
35084                 | '               30..17 = unused
35084                 | '                   18 = scroll-lock state 
35084                 | '                   17 = caps-lock state
35084                 | '                   16 = num-lock state 
35084                 | '                15..8 = key modifiers state
35084                 | '                 7..0 = scancode
35084                 | '------------------------------------------------------------------------------
35084                 | hkbd_translate
35084     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
35088     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3508c     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
35090     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
35094     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
35098     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3509c                 | 
3509c                 |         if EMUPAD_MAX_PLAYER > 0
3509c                 | 
3509c                 |         if EMUPAD_BT0_BIT >= 0
3509c                 |         end
3509c                 |         if EMUPAD_BT1_BIT >= 0
3509c                 |         end
3509c                 |         if EMUPAD_BT2_BIT >= 0
3509c                 |         end
3509c                 |         if EMUPAD_BT3_BIT >= 0
3509c                 |         end
3509c                 |         if EMUPAD_BT4_BIT >= 0
3509c                 |         end
3509c                 |         if EMUPAD_BT5_BIT >= 0
3509c                 |         end
3509c                 |         if EMUPAD_BT6_BIT >= 0
3509c                 |         end
3509c                 |         if EMUPAD_BT7_BIT >= 0
3509c                 |         end
3509c                 |         if EMUPAD_BT8_BIT >= 0
3509c                 |         end
3509c                 |         if EMUPAD_BT9_BIT >= 0
3509c                 |         end
3509c                 | 
3509c                 |         end
3509c     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
350a0     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
350a4     1F 8C 47 F4 |                 bitc    hpar1, #31
350a8                 |         if KEYQUEUE_SIZE > 0
350a8     C4 09 B0 FE |                 loc pb,#keyq_head
350ac     F7 71 E3 FA |                 rdword htmp,pb
350b0     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
350b4     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
350b8     B8 75 03 F6 |                 mov htmp2,htmp
350bc     04 74 07 FA |                 mul htmp2,#4
350c0     F7 75 03 F1 |                 add htmp2,pb
350c4     02 74 07 F1 |                 add htmp2,#2
350c8     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
350cc     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
350d0     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
350d4     F7 71 43 5C |         if_nz   wrbyte htmp,pb
350d8                 |         end
350d8     2D 00 7C FD |                 ret wcz
350dc                 | 
350dc                 | if HAVE_MOUSE
350dc                 | '------------------------------------------------------------------------------
350dc                 | ' Execute an IN interrupt transaction to poll for mouse activity.
350dc                 | '------------------------------------------------------------------------------
350dc                 | ' On entry:
350dc                 | ' On exit:
350dc                 | '------------------------------------------------------------------------------
350dc                 | hget_mouse_in_report
350dc     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
350e0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
350e4     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
350e8     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
350ec     CF 02 A0 FD |                 call    #do_int_in
350f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
350f4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
350f8                 | 
350f8     00 90 0F F2 |                 cmp     hpar3, #0               wz
350fc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
35100                 | 
35100     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
35104     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
35108     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3510c     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
35110                 | 
35110     27 F1 03 F6 |                 mov     ptra, urx_buff_p
35114     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
35118     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3511c     01 90 87 31 |         if_ae   sub     hpar3, #1
35120                 | 
35120     40 09 90 FE |                 loc     pa, #mouse_limits
35124     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
35128                 | 
35128                 |                 ' load xacc,yacc,zacc
35128     28 04 64 FD |                 setq    #3-1
3512c     80 87 07 FB |                 rdlong  hr1,ptrb
35130                 |                 ' load limits and outptr
35130     28 04 64 FD |                 setq    #3-1
35134     F6 73 03 FB |                 rdlong  htmp1,pa
35138                 | 
35138     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3513c     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
35140     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
35144     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
35148     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3514c     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
35150     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
35154     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
35158                 |               
35158                 | 
35158     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3515c     07 70 67 F7 |                 signx   htmp, #7
35160     B8 87 03 F1 |                 add     hr1,htmp
35164     00 72 0F F2 |                 cmp     htmp1,#0 wz
35168     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3516c     00 86 47 53 |         if_ne   fges    hr1,#0
35170                 | 
35170     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
35174     07 70 67 F7 |                 signx   htmp, #7
35178     B8 89 03 F1 |                 add     hr2,htmp
3517c     00 74 0F F2 |                 cmp     htmp2,#0 wz
35180     BA 89 63 53 |         if_ne   fles    hr2,htmp2
35184     00 88 47 53 |         if_ne   fges    hr2,#0
35188                 |                 
35188                 | 
35188     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3518c     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
35190     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
35194     B8 8B 03 A1 |         if_z    add     hr3,htmp
35198                 | 
35198     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3519c     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
351a0                 | 
351a0                 |                 ' write back accumulators
351a0     28 04 64 FD |                 setq    #3-1
351a4     80 87 67 FC |                 wrlong  hr1,ptrb
351a8                 |                 ' if outptr set, write X/Y words
351a8     00 76 0F F2 |                 cmp htmp3,#0                    wz
351ac     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
351b0     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
351b4     2D 00 64 FD |                 ret
351b8                 | end
351b8                 | 
351b8                 | '------------------------------------------------------------------------------
351b8                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
351b8                 | '------------------------------------------------------------------------------
351b8                 | ' On entry:
351b8                 | ' On exit:
351b8                 | '------------------------------------------------------------------------------
351b8                 | if _HAVE_GAMEPAD
351b8                 | hget_gp_in_report
351b8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
351bc     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
351c0                 | 
351c0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
351c4     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
351c8     00 90 E3 F8 |                 getbyte hpar3
351cc     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
351d0     CF 02 A0 FD |                 call    #do_int_in
351d4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
351d8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
351dc                 | 
351dc     00 90 0F F2 |                 cmp     hpar3, #0               wz
351e0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
351e4                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
351e4                 | 
351e4     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
351e8     00 70 E3 F8 |                 getbyte htmp                            ' |
351ec     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
351f0     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
351f4     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
351f8     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
351fc     B8 01 C0 F8 |                 setbyte htmp                            ' |
35200                 | 
35200                 | ' Note: the following code compares the current and previous reports
35200                 | ' and process the data if there are changes to ease the debug output.
35200                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
35200                 | ' gpPreReport buffer.
35200                 | 
35200                 |                 ' ----- start of block to remove
35200                 |                 {
35200                 |                 }
35200                 |                 ' ----- end of block to remove
35200     F4 04 90 FE |                 loc pa,#hpad_translate
35204     2A EC 63 FD |                 push pa
35208                 | 
35208                 |                 ' FALL THROUGH !!!!
35208                 | 
35208                 | '------------------------------------------------------------------------------
35208                 | ' Decode controller report
35208                 | '------------------------------------------------------------------------------
35208                 | hid_decode
35208                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
35208     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3520c     00 04 00 FF 
35210     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
35214                 | 
35214     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
35218                 | 
35218     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3521c     00 2A E3 F8 |                 getbyte hidr_type
35220     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
35224     34 02 90 AD |         if_z    jmp     #hpad_xinput
35228     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3522c     1C 03 90 AD |         if_z    jmp     #hpad_ps3
35230     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
35234     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
35238     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3523c                 |                 
3523c                 | 
3523c                 | '------------------------------------------------------------------------------
3523c                 | ' Handle HID controller (or mouse now
3523c                 | ' On entry:
3523c                 | '   ptrb - controller report
3523c                 | '------------------------------------------------------------------------------
3523c                 | hpad_hid
3523c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
35240     F7 F1 03 F6 |                 mov     ptra, pb
35244     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
35248     00 EC 03 F6 |                 mov     pa, 0-0
3524c                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3524c     19 2A 3B FF 
35250     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
35254                 | 
35254                 | .next
35254     00 EC 5F F2 |                 cmps    pa, #0      wcz
35258     2D 00 7C ED |         if_be   ret     wcz
3525c                 | 
3525c     61 8D C7 FA |                 rdbyte  hpar1, ptra++
35260     01 EC 87 F1 |                 sub     pa, #1
35264     00 8E 07 F6 |                 mov     hpar2, #0
35268                 | 
35268     C6 71 03 F6 |                 mov     htmp, hpar1
3526c     03 70 07 F5 |                 and     htmp, #$03
35270     01 70 0F F2 |                 cmp     htmp, #1    wz
35274     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
35278     07 8E 67 A7 |         if_z    signx   hpar2,#7
3527c     01 EC 87 A1 |         if_z    sub     pa, #1
35280     02 70 0F F2 |                 cmp     htmp, #2    wz
35284     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
35288     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3528c     02 EC 87 A1 |         if_z    sub     pa, #2
35290     03 70 0F F2 |                 cmp     htmp, #3    wz
35294     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
35298     04 EC 87 A1 |         if_z    sub     pa, #4
3529c                 | 
3529c     FC 8C 07 F5 |                 and     hpar1, #$FC
352a0                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
352a0                 | 
352a0     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
352a4     0C 01 90 AD |         if_z    jmp     #.report_id
352a8     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
352ac     24 01 90 AD |         if_z    jmp     #.usage_page
352b0     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
352b4     2C 01 90 AD |         if_z    jmp     #.usage
352b8     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
352bc     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
352c0     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
352c4     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
352c8     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
352cc     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
352d0     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
352d4     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
352d8     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
352dc     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
352e0     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
352e4     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
352e8     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
352ec     64 FF 9F 5D |         if_nz   jmp     #.next
352f0                 | 
352f0     D8 1D A7 FB |                 tjf     hidr_state,#.next
352f4                 | 
352f4     03 8E 07 F5 |                 and     hpar2, #$03
352f8     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
352fc     18 00 90 5D |         if_nz   jmp     #.skip
35300                 | 
35300     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
35304     20 00 90 AD |         if_z    jmp     #.axes
35308     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3530c     5C 00 90 AD |         if_z    jmp     #.hats
35310     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
35314     70 00 90 AD |         if_z    jmp     #.buttons
35318                 | .skip
35318     8F 71 03 F6 |                 mov     htmp, hidr_size
3531c     90 71 03 FA |                 mul     htmp, hidr_count
35320     B8 23 03 F1 |                 add     hidr_offset, htmp
35324     2C FF 9F FD |                 jmp     #.next
35328                 | .axes
35328                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
35328     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3532c     90 87 03 F6 |                 mov     hr1, hidr_count
35330                 | .l1
35330     91 8D 03 F6 |                 mov     hpar1, hidr_offset
35334     8F 8F 03 F6 |                 mov     hpar2, hidr_size
35338     04 03 B0 FD |                 call    #hpad_getbits
3533c     64 03 B0 FD |                 call    #hpad_normalize
35340     06 84 1F F2 |                 cmp     hr0, #6         wcz
35344     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
35348     00 88 43 C8 |         if_b    getnib  hr2
3534c     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
35350     5F 01 20 C9 |         if_b    setword retval
35354     01 84 07 C1 |         if_b    add     hr0, #1
35358     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3535c     F4 87 6F FB |                 djnz    hr1, #.l1
35360                 | 
35360     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
35364     01 1C 07 F6 |                 mov     hidr_state, #1
35368     E8 FE 9F FD |                 jmp     #.next
3536c                 | .hats
3536c                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3536c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
35370     8F 8F 03 F6 |                 mov     hpar2, hidr_size
35374     C8 02 B0 FD |                 call    #hpad_getbits
35378     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3537c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
35380     01 1C 07 F6 |                 mov     hidr_state, #1
35384     90 FF 9F FD |                 jmp     #.skip
35388                 | .buttons
35388                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
35388     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3538c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
35390     90 8F 03 FA |                 mul     hpar2, hidr_count
35394     A8 02 B0 FD |                 call    #hpad_getbits
35398     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3539c     B8 BF 62 F0 |                 shl     retval, htmp
353a0     5F 17 43 F5 |                 or      hidr_buttons, retval
353a4     90 71 03 F1 |                 add     htmp, hidr_count
353a8     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
353ac     01 1C 07 F6 |                 mov     hidr_state, #1
353b0     64 FF 9F FD |                 jmp     #.skip
353b4                 | .report_id
353b4     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
353b8     2D 00 7C 5D |         if_nz   ret     wcz
353bc     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
353c0     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
353c4     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
353c8     01 1C 67 56 |         if_nz   neg     hidr_state,#1
353cc     01 F2 87 51 |         if_nz   sub     ptrb,#1
353d0     80 FE 9F FD |                 jmp     #.next
353d4                 | .usage_page
353d4     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
353d8     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
353dc     04 1C 07 A6 |         if_z    mov     hidr_state, #4
353e0     70 FE 9F FD |                 jmp     #.next
353e4                 | .usage
353e4     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
353e8     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
353ec     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
353f0     01 1C 07 A6 |         if_z    mov     hidr_state, #1
353f4     5C FE 9F AD |         if_z    jmp     #.next
353f8     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
353fc     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
35400     01 1C 07 A6 |         if_z    mov     hidr_state, #1
35404     4C FE 9F AD |         if_z    jmp     #.next
35408     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3540c     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
35410     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
35414     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
35418     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3541c     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
35420     10 00 90 AD |         if_z    jmp     #.usage_axis
35424     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
35428     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3542c     03 1C 07 A6 |         if_z    mov     hidr_state, #3
35430     20 FE 9F FD |                 jmp     #.next
35434                 | .usage_axis
35434     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
35438     18 FE 9F CD |         if_b    jmp     #.next
3543c     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
35440     C7 01 00 F8 |                 setnib  hpar2
35444                 | 
35444     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
35448     C7 8F C3 F9 |                 decod   hpar2
3544c     C7 0F 43 F5 |                 or      hidr_flags, hpar2
35450                 | 
35450     01 24 07 F1 |                 add     hidr_usage_idx, #1
35454     02 1C 07 F6 |                 mov     hidr_state, #2
35458     F8 FD 9F FD |                 jmp     #.next
3545c                 | 
3545c                 | '------------------------------------------------------------------------------
3545c                 | ' Handle XInput controller
3545c                 | ' On entry:
3545c                 | '   ptrb - controller report
3545c                 | '------------------------------------------------------------------------------
3545c                 | '   Default implementation translates the report to a pseudo-defacto hid
3545c                 | '   standard and jumps to hpad_translate for actions.
3545c                 | '   Implementors may take specific actions for this kind of controller.
3545c                 | '------------------------------------------------------------------------------
3545c                 | hpad_xinput
3545c     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
35460     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
35464     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
35468     14 70 0F F2 |                 cmp     htmp, #$14      wz
3546c     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
35470                 | 
35470                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
35470                 | 
35470     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
35474     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
35478                 | 
35478     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3547c     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
35480     5F BF 22 F6 |                 not     retval
35484     5F 11 2B F9 |                 setword hidr_axis, retval, #1
35488     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3548c     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
35490     5F BF 22 F6 |                 not     retval
35494     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
35498                 | 
35498     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3549c     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
354a0     C0 BE 1E F2 |                 cmp     retval, #192    wcz
354a4     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
354a8     F8 01 B0 FD |                 call    #hpad_normalize
354ac     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
354b0     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
354b4     C0 BE 1E F2 |                 cmp     retval, #192    wcz
354b8     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
354bc     E4 01 B0 FD |                 call    #hpad_normalize
354c0     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
354c4                 | 
354c4     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
354c8     81 BF E6 FA |                 rdword  retval, ptrb[1]
354cc     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
354d0     00 16 47 F4 |                 bitc    hidr_buttons, #0
354d4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
354d8     01 16 47 F4 |                 bitc    hidr_buttons, #1
354dc     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
354e0     02 16 47 F4 |                 bitc    hidr_buttons, #2
354e4     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
354e8     03 16 47 F4 |                 bitc    hidr_buttons, #3
354ec     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
354f0     04 16 47 F4 |                 bitc    hidr_buttons, #4
354f4     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
354f8     05 16 47 F4 |                 bitc    hidr_buttons, #5
354fc     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
35500     08 16 47 F4 |                 bitc    hidr_buttons, #8
35504     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
35508     09 16 47 F4 |                 bitc    hidr_buttons, #9
3550c     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
35510     0A 16 47 F4 |                 bitc    hidr_buttons, #10
35514     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
35518     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3551c     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
35520     0C 16 47 F4 |                 bitc    hidr_buttons, #12
35524                 | 
35524     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
35528     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3552c     7A BB 7A FF 
35530     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
35534     F9 FF 7F FF 
35538     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3553c     B9 71 5F F9 |                 altgn   htmp, #htmp1
35540     00 70 43 F8 |                 getnib  htmp
35544     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
35548                 | 
35548     AC 01 90 FD |                 jmp     #hpad_translate
3554c                 | 
3554c                 | '------------------------------------------------------------------------------
3554c                 | ' Handle PS3 controller
3554c                 | ' On entry:
3554c                 | '   ptrb - controller report
3554c                 | '------------------------------------------------------------------------------
3554c                 | '   Default implementation translates the report to a pseudo-defacto hid
3554c                 | '   standard and jumps to hpad_translate for actions.
3554c                 | '   Implementors may take specific actions for this kind of controller.
3554c                 | '------------------------------------------------------------------------------
3554c                 | hpad_ps3
3554c     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
35550     01 70 0F F2 |                 cmp     htmp, #$01      wz
35554     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
35558                 | 
35558                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
35558                 | 
35558     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3555c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
35560     40 01 B0 FD |                 call    #hpad_normalize
35564     5F 11 23 F9 |                 setword hidr_axis, retval, #0
35568     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3556c     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
35570     30 01 B0 FD |                 call    #hpad_normalize
35574     5F 11 2B F9 |                 setword hidr_axis, retval, #1
35578     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3557c     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
35580     20 01 B0 FD |                 call    #hpad_normalize
35584     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
35588     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3558c     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
35590     10 01 B0 FD |                 call    #hpad_normalize
35594     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
35598     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3559c     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
355a0                 | 
355a0     08 8C 07 F6 |                 mov     hpar1, #8
355a4     13 8E 07 F6 |                 mov     hpar2, #19
355a8     94 00 B0 FD |                 call    #hpad_getbits
355ac                 | 
355ac     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
355b0     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
355b4     00 16 47 F4 |                 bitc    hidr_buttons, #0
355b8     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
355bc     01 16 47 F4 |                 bitc    hidr_buttons, #1
355c0     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
355c4     02 16 47 F4 |                 bitc    hidr_buttons, #2
355c8     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
355cc     03 16 47 F4 |                 bitc    hidr_buttons, #3
355d0     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
355d4     04 16 47 F4 |                 bitc    hidr_buttons, #4
355d8     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
355dc     05 16 47 F4 |                 bitc    hidr_buttons, #5
355e0     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
355e4     06 16 47 F4 |                 bitc    hidr_buttons, #6
355e8     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
355ec     07 16 47 F4 |                 bitc    hidr_buttons, #7
355f0     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
355f4     08 16 47 F4 |                 bitc    hidr_buttons, #8
355f8     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
355fc     09 16 47 F4 |                 bitc    hidr_buttons, #9
35600     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
35604     0A 16 47 F4 |                 bitc    hidr_buttons, #10
35608     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3560c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
35610     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
35614     0C 16 47 F4 |                 bitc    hidr_buttons, #12
35618                 | 
35618     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3561c     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
35620     09 FA 79 FF 
35624     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
35628     FF FA 7F FF 
3562c     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
35630     B9 71 5F F9 |                 altgn   htmp, #htmp1
35634     00 70 43 F8 |                 getnib  htmp
35638     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3563c                 | 
3563c     B8 00 90 FD |                 jmp     #hpad_translate
35640                 | 
35640                 | '------------------------------------------------------------------------------
35640                 | ' Read bits from report data buffer
35640                 | '------------------------------------------------------------------------------
35640                 | ' On entry:
35640                 | '   PTRB - report buffer
35640                 | '   hpar1 - start bit
35640                 | '   hpar2 - number of bits
35640                 | ' On exit:
35640                 | '   retval - bits
35640                 | '------------------------------------------------------------------------------
35640                 | hpad_getbits
35640     C6 71 03 F6 |                 mov     htmp, hpar1
35644     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
35648     F9 71 03 F1 |                 add     htmp, ptrb
3564c     B8 BF 02 FB |                 rdlong  retval, htmp
35650                 | 
35650     C6 73 03 F6 |                 mov     htmp1, hpar1
35654     07 72 07 F5 |                 and     htmp1, #$07     ' shift
35658     B9 BF 42 F0 |                 shr     retval, htmp1
3565c                 | 
3565c     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
35660     10 00 90 1D |         if_a    jmp     #.l1
35664                 | 
35664     C7 8F C3 F9 |                 decod   hpar2
35668     01 8E 87 F1 |                 sub     hpar2, #1
3566c     C7 BF 02 F5 |                 and     retval, hpar2
35670     2D 00 64 FD |                 ret
35674                 | .l1
35674     FF 7F 00 FF 
35678     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3567c     03 70 07 F1 |                 add     htmp, #3
35680     B8 75 03 FB |                 rdlong  htmp2, htmp
35684     18 8E 87 F1 |                 sub     hpar2, #24
35688     C7 8F C3 F9 |                 decod   hpar2
3568c     01 8E 87 F1 |                 sub     hpar2, #1
35690     B9 75 43 F0 |                 shr     htmp2, htmp1
35694     C7 75 03 F5 |                 and     htmp2, hpar2
35698     18 74 67 F0 |                 shl     htmp2, #24
3569c     BA BF 42 F5 |                 or      retval, htmp2
356a0     2D 00 64 FD |                 ret
356a4                 | 
356a4                 | '------------------------------------------------------------------------------
356a4                 | ' Normalize value to signed word (-32768 / 32767)
356a4                 | '------------------------------------------------------------------------------
356a4                 | ' On entry:
356a4                 | '   retval - value to normalize
356a4                 | '   hidr_lminmax - min (word 1) max (word 0) value range
356a4                 | '   - or -
356a4                 | '   hidr_pminmax - min (word 1) max (word 0) value range
356a4                 | '   hidr_size - value bits length
356a4                 | ' On exit:
356a4                 | '   retval - normalized value
356a4                 | '------------------------------------------------------------------------------
356a4                 | hpad_normalize
356a4     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
356a8     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
356ac     2D 00 64 AD |         if_z    ret
356b0     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
356b4     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
356b8     0F 72 77 F7 |                 signx   htmp1, #15      wc
356bc     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
356c0     00 BE 66 C7 |         if_c    signx   retval, #0-0
356c4     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
356c8     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
356cc     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
356d0     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
356d4     B8 71 53 F6 |                 abs     htmp            wc
356d8     1F BE 0E F4 |                 testb   retval, #31     wz
356dc     5F BF 42 F6 |                 abs     retval
356e0     B8 BF 12 FD |                 qdiv    retval, htmp
356e4     18 BE 62 FD |                 getqx   retval
356e8     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
356ec     C0 FF 7F FF 
356f0     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
356f4     2D 00 64 FD |                 ret
356f8                 | 
356f8                 | '------------------------------------------------------------------------------
356f8                 | ' Perform controller actions
356f8                 | ' On entry:
356f8                 | '    hidr_id        report id
356f8                 | '    hidr_axis      axis value (signed word, 2 axes per long)
356f8                 | '                      X = hidr_axis+0, #0
356f8                 | '                      Y = hidr_axis+0, #1
356f8                 | '                      Z = hidr_axis+1, #0
356f8                 | '                     RX = hidr_axis+1, #1
356f8                 | '                     RY = hidr_axis+2, #0
356f8                 | '                     RZ = hidr_axis+2, #1
356f8                 | '    hidr_buttons   buttons state (bits 0 to 31)
356f8                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
356f8                 | '
356f8                 | '                     -------3 -------2 -------1 -------0 byte
356f8                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
356f8                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
356f8                 | '                                zyx||| |||||||| ++++++++ n. buttons
356f8                 | '                                |||||| ||||++++--------- n. axes
356f8                 | '                                |||||| ++++------------- n. hats
356f8                 | '                                ++++++------------------ valid axes
356f8                 | '------------------------------------------------------------------------------
356f8                 | hpad_translate
356f8                 | 
356f8                 | 
356f8                 |         if HAVE_HIDPAD
356f8     84 0C F0 FE |                 loc     ptrb,#hidpad_report
356fc     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
35700     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
35704     01 70 E7 F2 |                 cmpsub  htmp,#1
35708     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3570c     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
35710     2D 00 7C 3D |         if_ae   ret     wcz
35714     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
35718     B8 F3 03 F1 |                 add     ptrb,htmp
3571c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
35720     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
35724     28 0C 64 FD |                 setq    #7-1
35728     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3572c                 |         end
3572c                 | 
3572c                 | 
3572c                 |         if EMUPAD_MAX_PLAYER > 0
3572c                 | .emupad_no_hat
3572c                 |         if EMUPAD_BT0_BIT >= 0
3572c                 |         end
3572c                 |         if EMUPAD_BT1_BIT >= 0
3572c                 |         end
3572c                 |         if EMUPAD_BT2_BIT >= 0
3572c                 |         end
3572c                 |         if EMUPAD_BT3_BIT >= 0
3572c                 |         end
3572c                 |         if EMUPAD_BT4_BIT >= 0
3572c                 |         end
3572c                 |         if EMUPAD_BT5_BIT >= 0
3572c                 |         end
3572c                 |         if EMUPAD_BT6_BIT >= 0
3572c                 |         end
3572c                 |         if EMUPAD_BT7_BIT >= 0
3572c                 |         end
3572c                 |         if EMUPAD_BT8_BIT >= 0
3572c                 |         end
3572c                 |         if EMUPAD_BT9_BIT >= 0
3572c                 |         end
3572c                 | .emupad_slot_over
3572c                 |         end
3572c                 | 
3572c                 |         if 0
3572c                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3572c                 | 
3572c                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3572c                 | 
3572c                 |         end
3572c     2D 00 64 FD |                 ret
35730                 | end
35730                 | 
35730                 | if EMUPAD_MAX_PLAYER > 0
35730                 | '------------------------------------------------------------------------------
35730                 | ' Clear EmuPad state
35730                 | '------------------------------------------------------------------------------
35730                 | emupad_reset
35730                 | 
35730                 | '------------------------------------------------------------------------------
35730                 | ' Get EmuPad Player number for current device (into retval)
35730                 | ' Z flag is also set if current device is valid
35730                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
35730                 | '------------------------------------------------------------------------------
35730                 | emupad_getnum
35730                 | .loop
35730                 | '------------------------------------------------------------------------------
35730                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
35730                 | '------------------------------------------------------------------------------
35730                 | emupad_discon
35730                 | .loop         
35730                 |         
35730                 |         ' FALL THROUGH!!!
35730                 | 
35730                 | '------------------------------------------------------------------------------
35730                 | ' Update EmuPad reports (all of them...)
35730                 | '------------------------------------------------------------------------------
35730                 | emupad_write_reports
35730                 | .devloop
35730                 | 
35730                 | end
35730                 | 
35730                 | 
35730                 | '------------------------------------------------------------------------------
35730                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
35730                 | '------------------------------------------------------------------------------
35730                 | ' On entry:
35730                 | ' On exit:
35730                 | '------------------------------------------------------------------------------
35730                 | hget_hub_status
35730     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
35734     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
35738     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3573c     01 90 2F F9 |                 setword hpar3, #1, #1
35740     CF 02 A0 FD |                 call    #do_int_in
35744     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35748     0C 00 90 AD |         if_z    jmp     #.data
3574c     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
35750     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
35754     2D 00 64 FD |                 ret
35758                 | .data
35758     00 90 0F F2 |                 cmp     hpar3, #0               wz
3575c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
35760                 | 
35760     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
35764     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
35768     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3576c     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
35770                 |                 debug(ubin_long(hub_status_chg))
35770                 | 
35770     01 5A 06 F6 |                 mov     hdev_port, #1
35774                 | .loop
35774     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
35778     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3577c     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
35780     F0 FF 9F 3D |         if_nc   jmp     #.loop
35784     2D 00 64 FD |                 ret
35788                 | 
35788                 | hub_port_handler
35788     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3578c     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
35790     27 EF 03 F6 |                 mov     pb, urx_buff_p
35794     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
35798     55 02 A0 FD |                 call    #control_read
3579c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
357a0                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
357a0                 | 
357a0     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
357a4     50 01 90 5D |         if_x0   jmp     #.other
357a8     68 02 D0 FE |                 loc     ptra, #clr_port_feat
357ac     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
357b0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
357b4     A0 02 A0 FD |                 call    #control_write
357b8     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
357bc     7C 01 90 5D |         if_x0   jmp     #.disconnect
357c0     B0 99 02 F6 |                 mov     hctwait, _100ms_
357c4     EF 02 A0 FD |                 call    #poll_waitx
357c8                 | 
357c8     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
357cc     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
357d0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
357d4     A0 02 A0 FD |                 call    #control_write
357d8                 | 
357d8     02 76 07 F6 |                 mov     htmp3, #2
357dc                 | .wait_reset
357dc     AC 99 02 F6 |                 mov     hctwait, _8ms_
357e0     EF 02 A0 FD |                 call    #poll_waitx
357e4     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
357e8     27 EF 03 F6 |                 mov     pb, urx_buff_p
357ec     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
357f0     55 02 A0 FD |                 call    #control_read
357f4     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
357f8     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
357fc     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
35800                 | 
35800     10 02 D0 FE |                 loc     ptra, #clr_port_feat
35804     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
35808     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3580c     A0 02 A0 FD |                 call    #control_write
35810                 | 
35810     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
35814                 | .wait_recover
35814     A7 99 02 F6 |                 mov     hctwait, _1ms_
35818     EF 02 A0 FD |                 call    #poll_waitx
3581c     FD 71 6F FB |                 djnz    htmp,#.wait_recover
35820                 | 
35820     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
35824     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
35828     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3582c                 | 
3582c     00 08 00 FF 
35830     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
35834     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
35838     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3583c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
35840     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
35844     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35848     48 01 90 5D |         if_nz   jmp     #.done
3584c                 | .get_dev_desc
3584c     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
35850     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
35854     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
35858     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3585c     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
35860     01 71 57 FC |                 wrword  htmp, ptra[wValue]
35864     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
35868     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3586c     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
35870     AC 99 02 F6 |                 mov     hctwait, _8ms_
35874     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
35878     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3587c     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
35880     BE 00 A0 FD |                 call    #calc_crc5
35884     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
35888     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3588c     F7 AD C2 FA |                 rdbyte  total_data, pb
35890     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
35894     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
35898     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3589c     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
358a0     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
358a4     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
358a8                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
358a8     9F 99 02 F6 |                 mov     hctwait, _500us_
358ac     EF 02 A0 FD |                 call    #poll_waitx
358b0     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
358b4     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
358b8     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
358bc     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
358c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
358c4     CC 00 90 5D |         if_nz   jmp     #.done
358c8     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
358cc     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
358d0     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
358d4     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
358d8     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
358dc     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
358e0     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
358e4     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
358e8     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
358ec     A4 00 90 CD |         if_b    jmp     #.done
358f0     6C F0 BF FD |                 call    #hparse_con_desc
358f4     9C 00 90 FD |                 jmp     #.done
358f8                 | 
358f8                 | .other
358f8     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
358fc     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
35900     28 00 90 AD |         if_x1   jmp     #.reset_feature
35904     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
35908     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3590c     1C 00 90 AD |         if_x1   jmp     #.reset_feature
35910     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
35914     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
35918     10 00 90 AD |         if_x1   jmp     #.reset_feature
3591c     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
35920     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
35924     04 00 90 AD |         if_x1   jmp     #.reset_feature
35928     68 00 90 FD |                 jmp     #.done
3592c                 | .reset_feature
3592c     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
35930     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
35934     A0 02 A0 FD |                 call    #control_write
35938     58 00 90 FD |                 jmp     #.done
3593c                 | .disconnect
3593c                 | 
3593c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
35940     00 70 E3 F8 |                 getbyte htmp
35944     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
35948     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3594c     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
35950     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
35954     00 76 06 A6 |         if_z    mov     kb_led_states, #0
35958     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3595c                 |         if EMUPAD_MAX_PLAYER > 0
3595c                 |         end
3595c                 |         if HAVE_MOUSE
3595c     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
35960     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
35964     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
35968                 |         end
35968                 |         if HAVE_HIDPAD
35968     14 0A F0 FE |                 loc ptrb,#hidpad_report
3596c     2D 71 03 F6 |                 mov htmp,hdev_port
35970     01 70 E7 F2 |                 cmpsub htmp,#1
35974     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
35978     B8 F3 03 F1 |                 add ptrb,htmp
3597c     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
35980     80 01 6C FC |                 wrlong #0,ptrb
35984                 |         end
35984                 | 
35984     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
35988     00 00 C4 F8 |                 setbyte #0
3598c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
35990     00 00 04 F6 |                 mov     0-0, #0
35994                 | 
35994                 | .done
35994     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
35998     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3599c     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
359a0     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
359a4     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
359a8     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
359ac                 | 
359ac     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
359b0     27 EF 03 F6 |                 mov     pb, urx_buff_p
359b4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
359b8     55 02 A0 FD |                 call    #control_read
359bc     00 69 06 FB |                 rdlong  hub_port_status, ptra
359c0                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
359c0     2D 00 64 FD |                 ret
359c4                 | 
359c4                 | '------------------------------------------------------------------------------
359c4                 | ' Partially populated SETUP packets
359c4                 | '------------------------------------------------------------------------------
359c4     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
359c5     06          |                 byte    REQ_GET_DESC
359c6     00 01       |                 word    TYPE_DEVICE << 8
359c8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
359ca     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
359cc     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
359cd     06          |                 byte    REQ_GET_DESC
359ce     00 02       |                 word    TYPE_CONFIG << 8
359d0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
359d2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
359d4     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
359d5     09          |                 byte    REQ_SET_CONFIG
359d6     00 00       |                 word    0       ' Configuration value
359d8     00 00       |                 word    0       ' Zero
359da     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
359dc     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
359dd     05          |                 byte    REQ_SET_ADDR
359de     00 00       |                 word    0       ' Zero
359e0     00 00       |                 word    0       ' Zero
359e2     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
359e4                 | '------------------------------------------------------------------------------
359e4                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
359e4                 | ' wValue field dictates which protocol should be used.
359e4                 | '
359e4                 | ' When initialized, all devices default to report protocol. However the host
359e4                 | ' should not make any assumptions about the device state and should set the
359e4                 | ' desired protocol whenever initializing a device.
359e4                 | '------------------------------------------------------------------------------
359e4     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
359e5     0B          |                 byte    HID_SET_PROTO
359e6     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
359e8                 |                                                 ' (HID 1.11 Section 7.2.6).
359e8     00 00       |                 word    0               ' Interface index number.
359ea     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
359ec                 | '------------------------------------------------------------------------------
359ec     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
359ed     0A          |                 byte    HID_SET_IDLE
359ee     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
359f0                 |                                         ' reporting until a change is detected in the report data
359f0                 | 
359f0                 |                                         ' (HID 1.11 Section 7.2.4).
359f0     00 00       |                 word    0       ' Interface index number.
359f2     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
359f4     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
359f5     09          |                 byte    HID_SET_REPORT
359f6     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
359f8                 |                                         ' (HID 1.11 Section 7.2.2).
359f8     00 00       |                 word    0       ' Interface index number.
359fa     00 00       |                 word    0       ' Size of the report, in bytes.
359fc     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
359fd     06          |                 byte    REQ_GET_DESC
359fe     00 22       |                 word    TYPE_REPORT << 8
35a00     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
35a02     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
35a04                 | '------------------------------------------------------------------------------
35a04     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
35a05     06          |                 byte    REQ_GET_DESC
35a06     00 29       |                 word    TYPE_HUB << 8
35a08     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
35a0a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
35a0c     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
35a0d     03          |                 byte    REQ_SET_FEATURE
35a0e     00 00       |                 word    0       ' port power
35a10     01 00       |                 word    1       ' Port index number (1+)
35a12     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
35a14     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
35a15     01          |                 byte    REQ_CLEAR_FEATURE
35a16     00 00       |                 word    0       ' port power
35a18     01 00       |                 word    1       ' Port index number (1+)
35a1a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
35a1c     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
35a1d     00          |                 byte    REQ_GET_STATUS
35a1e     00 00       |                 word    0
35a20     01 00       |                 word    1       ' Port index number (1+)
35a22     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
35a24                 | '------------------------------------------------------------------------------
35a24                 | if _HAVE_GAMEPAD
35a24     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
35a28                 | ps3_command_buff
35a28     00 00 00 00 
35a2c     00          |                 byte    $00, $00, $00, $00, $00
35a2d     00 00 00 00 
35a31     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
35a32     FF 27 10 00 
35a36     32          |                 byte    $FF, $27, $10, $00, $32
35a37     FF 27 10 00 
35a3b     32          |                 byte    $FF, $27, $10, $00, $32
35a3c     FF 27 10 00 
35a40     32          |                 byte    $FF, $27, $10, $00, $32
35a41     FF 27 10 00 
35a45     32          |                 byte    $FF, $27, $10, $00, $32
35a46     00 00 00 00 
35a4a     00          |                 byte    $00, $00, $00, $00, $00
35a4b     00 00 00 00 
35a4f     00          |                 byte    $00, $00, $00, $00, $00
35a50     00 00 00 00 
35a54     00          |                 byte    $00, $00, $00, $00, $00
35a55     00 00 00    |                 byte    $00, $00, $00
35a58                 | '------------------------------------------------------------------------------
35a58     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
35a5b                 |                                         ' 0x01 All blinking
35a5b                 |                                         ' 0x02 1 flashes, then on
35a5b                 |                                         ' 0x03 2 flashes, then on
35a5b                 |                                         ' 0x04 3 flashes, then on
35a5b                 |                                         ' 0x05 4 flashes, then on
35a5b                 |                                         ' 0x06 1 on
35a5b                 |                                         ' 0x07 2 on
35a5b                 |                                         ' 0x08 3 on
35a5b                 |                                         ' 0x09 4 on
35a5b                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
35a5b                 |                                         ' 0x0B Blinking*
35a5b                 |                                         ' 0x0C Slow blinking*
35a5b                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
35a5b     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
35a5e     00          |                 byte    $00             ' Left rumble
35a5f     00          |                 byte    $00             ' Right rumble
35a60     00 00 00    |                 byte    $00, $00, $00
35a63     00          | end
35a64                 | alignl
35a64                 | 
35a64                 | if HAVE_MOUSE
35a64     00 00 00 00 
35a68     00 00 00 00 | mouse_limits long 0[2]
35a6c     00 00 00 00 | mouse_outptr long 0
35a70                 | end
35a70                 | 
35a70                 | if KEYQUEUE_SIZE > 0
35a70     00          | keyq_head byte 0
35a71     00          | keyq_tail byte 0
35a72     00 00 00 00 
      ...             
35c6e     00 00 00 00 
35c72     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
35c74                 | alignl
35c74                 | end
35c74                 | 
35c74                 | if EMUPAD_MAX_PLAYER > 0
35c74                 | emupad_rule_buffer
35c74                 | if EMUPAD_BUILTIN_RULES
35c74                 | file "padmap_builtin.dat"
35c74                 | end
35c74                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
35c74                 | '' Default rule directly follows!
35c74                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
35c74                 | end
35c74                 | 
35c74                 | '------------------------------------------------------------------------------
35c74                 | ' The USB data cache area gets zero-filled at every device disconnect
35c74                 | '------------------------------------------------------------------------------
35c74                 | usb_cache_start
35c74                 | 
35c74                 | ' HID descriptor and report buffers
35c74                 | if !!OVERLAP_MEMORY
35c74     00 00 00 00 
      ...             
3636c     00 00 00 00 
36370     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
36374                 | end
36374     00 00 00 00 
36378     00 00 00 00 | hkbd_report     byte    0[8]
3637c     00 00 00 00 | hkbd_led_rep    byte    0
36380                 | alignl
36380                 | 
36380                 | if HAVE_HIDPAD
36380     00 00 00 00 
      ...             
3643c     00 00 00 00 
36440     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
36444                 | end
36444                 | 
36444                 | ' HUB descriptor
36444     00          | hub_descr       byte    0   ' bDescLength
36445     00          |                 byte    0   ' bDescriptorType
36446     00          |                 byte    0   ' bNbrPorts
36447     00 00       |                 word    0   ' wHubCharacteristics
36449     00          |                 byte    0   ' bPwrOn2PwrGood
3644a     00          |                 byte    0   ' bHubContrCurrent
3644b     00          |                 byte    0   ' DeviceRemoveable
3644c     00          |                 byte    0   ' PortPwrCtrlMask
3644d                 | 
3644d                 | usb_cache_end
3644d                 | 
3644d                 | if HAVE_MOUSE
3644d     00 00 00 00 | mouse_xacc      long 0
36451     00 00 00 00 | mouse_yacc      long 0
36455     00 00 00 00 | mouse_zacc      long 0
36459     00          | mouse_bstate    byte 0
3645a     00          | mouse_lpending  byte 0
3645b     00          | mouse_rpending  byte 0
3645c     00          | mouse_mpending  byte 0
3645d     00          | mouse_lock      byte 0
3645e     00 00 00    |                 byte 0[3] ' padding
36461                 | end
36461                 | 
36461     00 00 00 00 
      ...             
364d9     00 00 00 00 
364dd     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
364e1     00 00 00 00 
364e5     00 00 00 00 
364e9     00 00 00 00 
364ed     00 00 00 00 
364f1     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
364f3     00 00 00 00 
      ...             
365eb     00 00 00 00 
365ef     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
365f3                 | 
365f3     00          | driver_cog      byte    0                       ' Current driver cog + 1
365f4                 | 	alignl
365f4                 | _audio096_spin2_dat_
365f4                 | 
365f4                 | audio       org     0
365f4                 | 
365f4     61 C9 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
365f8     61 17 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
365fc     61 23 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
36600                 | 
36600     01 EC 63 FD |             cogid   pa                   ' compute cogid
36604     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
36608     F6 C9 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3660c     E4 C6 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
36610                 | 
36610     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
36614     0E 20 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
36618     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3661c     0F 20 06 FC |             wrpin   dac2,#right
36620     0F 00 1E FC |             wxpin   #256,#right    
36624     41 9C 64 FD |             dirh    #left addpins 1
36628     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3662c     CB E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
36630     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
36634                 |             
36634                 | '---------------------------------------------------------------------------------        
36634                 | '----------------- The main loop -------------------------------------------------
36634                 | '---------------------------------------------------------------------------------
36634                 | 
36634     D4 AA 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
36638     10 00 90 CD |       if_c  jmp     #loop1
3663c                 |   
3663c     09 FC 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
36640     D4 FC 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
36644     D3 00 80 F1 |             sub     0-0,a40000000
36648     FD FD 6D FB |             djnz    cn,#p402
3664c                 |     
3664c     00 FC 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
36650     D6 FE 01 F6 |             mov     ct,time1            ' with the lowest next sample time
36654     D7 FE 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
36658     01 FC 05 C6 |     if_c    mov     cn,#1
3665c     D8 FE 39 F3 |             fle     ct,time3 wcz
36660     02 FC 05 C6 |     if_c    mov     cn,#2     
36664     D9 FE 39 F3 |             fle     ct,time4 wcz
36668     03 FC 05 C6 |     if_c    mov     cn,#3
3666c     DA FE 39 F3 |             fle     ct,time5 wcz
36670     04 FC 05 C6 |     if_c    mov     cn,#4
36674     DB FE 39 F3 |             fle     ct,time6 wcz
36678     05 FC 05 C6 |     if_c    mov     cn,#5
3667c     DC FE 39 F3 |             fle     ct,time7 wcz
36680     06 FC 05 C6 |     if_c    mov     cn,#6
36684     DD FE 39 F3 |             fle     ct,time8 wcz
36688     07 FC 05 C6 |     if_c    mov     cn,#7
3668c                 | 
3668c                 | 
3668c                 | '----------------------------------------------------------------------------------
3668c                 | '------------- Compute channel samples --------------------------------------------
3668c                 | '----------------------------------------------------------------------------------
3668c                 | 
3668c                 | 
3668c     FE BC 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
36690     06 BC 65 F0 |             shl     channeladd,#6
36694     DE F0 03 F1 |             add     ptra,channeladd
36698                 | 
36698     28 16 64 FD |             setq    #11                        	' read parameters
3669c     00 D3 05 FB |             rdlong  pointer0,ptra
366a0                 |     	    
366a0     1F E0 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
366a4     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
366a8     F0 C0 31 F9 |             getword qq,command0,#0            	' get the new rate
366ac     4E C0 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
366b0     E0 C0 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
366b4     00 C0 0D F2 |             cmp     qq,#0 wz                         
366b8     4E 20 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
366bc     4E 1E 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
366c0                 |             
366c0     1E E0 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
366c4     E4 C6 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
366c8     00 C6 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
366cc                 | 
366cc     EA 02 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
366d0     EA 04 3A F9 |             getword oldrs,sample0,#1
366d4     EE F8 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
366d8     EE F6 31 F9 |     	    getword avol0,volpan0,#0
366dc     EF F4 39 F9 |             getword askip0,freqskip0,#1    	    
366e0     EF F2 31 F9 |             getword afreq0,freqskip0,#0
366e4                 | 
366e4     D6 FC 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
366e8     00 00 02 F6 |             mov     dt0,0-0    
366ec     D5 00 82 F1 |             sub     dt0,time0
366f0                 |             
366f0     D6 FC 8D F9 |             altd    cn, #time1                ' add channel period to channel time
366f4     F9 00 00 F1 |             add     0-0,afreq0  	
366f8                 |             
366f8                 | '---- envelopes
366f8                 |             
366f8     00 E4 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
366fc     20 00 00 AF 
36700     00 44 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
36704     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
36708                 | 
36708     F9 44 02 F6 |             mov     envs1,afreq0
3670c     F3 44 02 FA |             mul     envs1,envspd0
36710     22 E3 01 F1 |             add     envph0,envs1 
36714                 | 
36714     F1 40 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
36718     06 40 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3671c     20 43 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
36720     10 40 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
36724     F4 40 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
36728     F4 40 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3672c     00 42 06 36 |     if_ge   mov     envlo,#0
36730     F4 E2 01 36 |     if_ge   mov     envph0,envlen0
36734     16 E2 65 30 |     if_ge   shl     envph0,#22
36738                 | 
36738     20 45 02 F6 |             mov     envs1,envhi			' get the phase acc
3673c     01 44 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
36740     F2 44 02 F1 |             add     envs1,envptr0		' and add the pointer
36744     22 45 02 FB |             rdlong  envs1,envs1			' then read 2 entries
36748     22 47 3A F9 |             getword envs2,envs1,#1		' next value
3674c     22 45 32 F9 |             getword envs1,envs1,#0		' current value
36750     21 47 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
36754     21 43 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
36758     21 45 02 FA |             mul     envs1,envlo
3675c     23 45 02 F1 |             add     envs1,envs2
36760     12 44 46 F0 |             shr     envs1,#18			' normalize it to $4000
36764                 |             
36764     1B D6 0D F4 | p410        testb   sstart0, #27 wz
36768     1B C2 61 AD |     if_z    getrnd  spl
3676c     58 00 90 AD |     if_z    jmp     #p406
36770                 |  
36770     FA D2 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
36774     E9 3E C2 F8 |             setbyte pointer00,pointer0,#0
36778     08 D2 45 F0 |             shr     pointer0,#8
3677c                 |          
3677c     1F D6 0D F4 |             testb   sstart0,#31 wz            
36780     01 D2 65 A0 |     if_z    shl     pointer0,#1        
36784     1C D6 0D F4 |             testb   sstart0,#28 wz            
36788     01 D2 65 A0 |     if_z    shl     pointer0,#1        
3678c                 |         
3678c     ED D2 19 F2 |             cmp     pointer0,lend0 wcz
36790     ED D2 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
36794     EC D2 01 31 |     if_ge   add     pointer0,lstart0       
36798                 |             
36798     E9 C0 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3679c     EB C0 01 F1 |             add     qq,sstart0            
367a0                 | 
367a0     FF C7 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
367a4     E0 C2 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
367a8     14 01 B0 1D |     if_gt   call    #cache_read
367ac                 |          
367ac     1F D6 0D F4 |             testb   sstart0,#31 wz 
367b0     08 C2 65 50 |     if_nz   shl     spl,#8
367b4     08 D2 65 50 |     if_nz   shl     pointer0,#8
367b8     07 D2 65 A0 |     if_z    shl     pointer0,#7
367bc     1C D6 0D F4 |             testb   sstart0,#28 wz            
367c0     01 D2 45 A0 |     if_z    shr     pointer0,#1    
367c4     1F D3 C1 F8 | 	    setbyte pointer0,pointer00,#0       
367c8                 | 
367c8                 | 
367c8     22 C3 31 FA | p406        scas    spl,envs1			' apply envelope
367cc     00 C2 01 F6 |             mov     spl,0-0
367d0     FB C2 31 FA |             scas    spl,avol0                 	' apply volume
367d4     00 C2 01 F6 |             mov     spl,0-0
367d8                 | 
367d8     FC C2 31 FA |             scas    spl,apan0                 	' apply pan
367dc     00 06 02 F6 |             mov     ls0,0-0
367e0     20 00 00 FF 
367e4     00 C0 05 F6 |             mov     qq,##16384
367e8     FC C0 81 F1 |             sub     qq,apan0
367ec     E0 C2 31 FA |             scas    spl,qq
367f0     00 08 02 F6 |             mov     rs0, 0-0
367f4                 | 
367f4     02 0D 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
367f8     04 0D 02 F1 |             add     rs,rs0
367fc     01 0B 82 F1 |             sub     ls,oldls
36800     03 0B 02 F1 |             add     ls,ls0
36804                 |    
36804     04 D5 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
36808     03 D5 21 F9 |             setword sample0,ls0,#0
3680c                 |             
3680c     1E D6 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
36810     00 D2 05 A6 |     if_z    mov     pointer0, #0  		
36814     00 E2 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
36818                 |   '  if_z    mov     sample0,#0
36818     02 D7 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3681c     1D D6 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
36820     04 00 00 AF 
36824     00 AC 05 A1 |     if_z    add     time1,##2048
36828     D6 AE 01 A6 |     if_z    mov     time2,time1
3682c     02 D7 65 AC |     if_z    wrlong  sstart0,ptra[2]
36830                 | 
36830     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
36834     00 D3 65 FC |             wrlong  pointer0,ptra
36838     08 E3 65 FC |             wrlong  envph0,ptra[8]
3683c     DE F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
36840                 |                       
36840     D5 FA 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
36844     FF BF 25 A7 |     if_z    decmod  front, #511          
36848                 |          
36848     05 03 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3684c     06 05 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
36850     0F 02 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
36854     0F 04 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
36858                 | 	    
36858                 | 		    
36858     01 05 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3685c     08 0F 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
36860     02 11 02 F6 |             mov     newsample, oldrs       
36864                 | 
36864     D5 FA 01 F6 |             mov     oldt0,time0              ' update global time
36868     00 AB 01 F1 |             add     time0,dt0    
3686c                 |                                      
3686c     00 00 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
36870     D8 FD 9F AD |     if_z    jmp     #loop1
36874     00 C1 01 F6 |             mov     qq,dt0
36878                 |   
36878     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3687c     00 BE 9D F2 |             cmpr    front, #0-0 wcz
36880     F4 FF 9F AD |     if_e    jmp     #p301    
36884                 | 		
36884     00 16 0E F2 | 	    cmp     scbase,#0 wz
36888     20 00 90 AD |     if_z    jmp     #p302	   
3688c                 |   
3688c     3F 1C 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
36890     0C 1B 02 C6 |     if_c    mov     scptr2,scptr
36894     02 1A 66 C0 |     if_c    shl     scptr2,#2
36898     0B 1B 02 C1 |     if_c    add     scptr2,scbase     
3689c     60 1A 66 FC |             wrlong  scptr2,#$60
368a0     0D 0F 62 CC |     if_c    wrlong  oldsample,scptr2
368a4     01 00 00 CF 
368a8     7F 18 06 C7 |     if_c    incmod  scptr,##639
368ac                 | 			    
368ac     DF 0E 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
368b0     00 00 00 FF 
368b4     FF BF 05 F7 |             incmod  front, ##511
368b8     EF C1 6D FB |             djnz    qq,#p301
368bc                 |             
368bc     74 FD 9F FD |             jmp     #loop            'loop
368c0                 | 
368c0                 | '----------------------------------------------------------------------------------
368c0                 | '------------- This is the end of the main loop -----------------------------------
368c0                 | '----------------------------------------------------------------------------------
368c0                 | 
368c0                 | '----------------------------------------------------------------------------------
368c0                 | '------------- PSRAM cache ----------- --------------------------------------------
368c0                 | '----------------------------------------------------------------------------------
368c0                 | 
368c0                 | ' There are 8 cache pointers for 8 channels
368c0                 | ' if 24 higher bits of address=cache, then get a word from the cache
368c0                 | ' else load the cache from PSRAM, update the pointer, then read a sample
368c0                 | 
368c0                 | 
368c0     E0 3A E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
368c4                 |             
368c4     E0 3C 02 F6 | 	    mov     addrhi,qq		
368c8     08 3C 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
368cc     12 FD 95 F9 | 	    alts    cn,#cache1            
368d0     00 3C 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
368d4     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
368d8                 | 	
368d8     12 FD 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
368dc     1E 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
368e0     1E 35 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
368e4     08 34 66 F0 | 	    shl     cmd,#8
368e8     0B 34 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
368ec     FE 36 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
368f0     08 36 66 F0 |             shl     hubaddr,#8                  '
368f4     11 37 02 F1 |             add     hubaddr,hubptr 
368f8     00 39 06 F6 |             mov     count,#256                  ' 256 bytes
368fc     28 04 64 FD |             setq    #2                          ' write 3 longs
36900     E3 34 62 FC |             wrlong  cmd, mailbox                ' run it
36904     E3 34 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
36908     FE 35 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3690c                 |             
3690c                 | 	
3690c     FE C0 01 F6 | p701	    mov     qq,cn			' cache hit
36910     08 C0 65 F0 | 	    shl     qq,#8			' compute the cache start
36914     11 C1 01 F1 | 	    add     qq,hubptr
36918     1D C1 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3691c     E0 C2 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
36920                 |           
36920                 | 
36920                 | '--------------------------------------------------------------------------
36920                 | '------ Interrupt service -------------------------------------------------
36920                 | '------ Output the sample, get the next one if exists ---------------------
36920                 | '--------------------------------------------------------------------------
36920                 | 
36920     0E CA 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
36924     0F CC 25 FC |             wypin   rsample,#right       '4
36928     DF F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3692c     80 CF A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
36930     FF F3 07 57 |     if_ne   incmod  ptrb,#511
36934     E7 CC 39 59 |     if_ne   getword rsample,lsnext,#1    '13
36938     E7 CA 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3693c                 |     
3693c     F5 FF 3B FB |             reti1                        '17/19 
36940                 |           
36940                 | '---------------------------------------------------------------------------
36940                 | '-------- End of interrupt -------------------------------------------------
36940                 | '---------------------------------------------------------------------------    
36940                 | 
36940                 | 
36940                 | '---------------------------------------------------------------------------
36940                 | '------- Variables ---------------------------------------------------------
36940                 | '---------------------------------------------------------------------------
36940                 | 
36940                 | ' constants
36940                 | 
36940     00 00 00 40 | a40000000   long $40000000
36944     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
36948                 | 
36948                 | ' Time variables
36948                 | 
36948     00 00 00 00 | time0       long 0    ' Global sample computing time
3694c     01 00 00 00 | time1       long 1    ' Local channels time
36950     02 00 00 00 | time2       long 2
36954     03 00 00 00 | time3       long 3
36958     04 00 00 00 | time4       long 4
3695c     05 00 00 00 | time5       long 5
36960     06 00 00 00 | time6       long 6
36964     07 00 00 00 | time7       long 7
36968     08 00 00 00 | time8       long 8
3696c                 | 
3696c     00 00 00 00 | channeladd long 0
36970                 | 
36970     00 00 00 00 | front       long 0
36974                 | 
36974                 | ' temporary variables 
36974     00 00 00 00 | qq          long 0
36978     00 00 00 00 | spl         long 0
3697c     00 00 00 00 | zero        long 0
36980     00 00 00 00 | mailbox     long 0
36984     00 00 00 00 | mailbox2 long 0
36988                 | 
36988                 | ' Interrupt ISR variables
36988                 | 
36988     00 00 00 00 | lsample     long 0
3698c     00 00 00 00 | rsample     long 0
36990     00 00 00 00 | lsnext      long 0
36994     00 00 00 00 | rsnext      long 0 
36998                 | 
36998                 | ' channel parameter block
36998                 | 
36998     00 00 00 00 | pointer0    long 0     
3699c     00 00 00 00 | sample0     long 0
369a0     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
369a4     00 00 00 00 | lstart0     long 0
369a8     00 00 00 00 | lend0       long 0
369ac     00 00 00 00 | volpan0     long 0
369b0     00 00 00 00 | freqskip0   long 0
369b4     00 00 00 00 | command0    long 0
369b8     00 00 00 00 | envph0	    long 0
369bc     00 00 00 00 | envptr0	    long 0
369c0     00 00 00 00 | envspd0	    long 0
369c4     00 00 00 00 | envlen0	    long 0
369c8     00 00 00 00 | res5	    long 0
369cc     00 00 00 00 | res6	    long 0
369d0     00 00 00 00 | res7	    long 0
369d4     00 00 00 00 | res8	    long 0
369d8                 | 
369d8     00 00 00 00 | afreq0      long 0
369dc     00 00 00 00 | askip0      long 0
369e0     00 00 00 00 | avol0       long 0
369e4     00 00 00 00 | apan0       long 0
369e8                 | 
369e8     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
369ec     00 00 00 00 | cn          long 0
369f0     00 00 00 00 | ct          long 0
369f4     00 00 00 00 | dt0         long 0
369f8                 | 
369f8                 | ' Samples
369f8     00 00 00 00 | oldls       long 0
369fc     00 00 00 00 | oldrs       long 0
36a00                 | 
36a00     00 00 00 00 | ls0         long 0
36a04     00 00 00 00 | rs0         long 0
36a08                 | 
36a08     00 00 00 00 | ls          long 0    
36a0c     00 00 00 00 | rs          long 0
36a10                 | 
36a10     00 00 00 00 | oldsample   long 0
36a14     00 00 00 00 | newsample   long 0
36a18                 | 
36a18     00 00 00 00 | nrsample    long 0
36a1c     00 00 00 00 | nlsample    long 0
36a20                 | 
36a20     00 00 00 00 | scbase long 0
36a24     00 00 00 00 | scptr long 0
36a28     00 00 00 00 | scptr2 long 0
36a2c     00 00 00 00 | scope long 0
36a30                 | 
36a30     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
36a34     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
36a38                 | 
36a38     00 18 07 00 | hubptr      long $71800
36a3c     00 00 00 00 | cache1      long 0
36a40     00 00 00 00 | cache2      long 0
36a44     00 00 00 00 | cache3      long 0
36a48     00 00 00 00 | cache4      long 0
36a4c     00 00 00 00 | cache5      long 0
36a50     00 00 00 00 | cache6      long 0
36a54     00 00 00 00 | cache7      long 0
36a58     00 00 00 00 | cache8      long 0
36a5c                 | 
36a5c                 | 
36a5c     00 00 00 00 | cmd         long 0
36a60     00 00 00 00 | hubaddr     long 0
36a64     00 01 00 00 | count       long 256
36a68     00 00 00 00 | addrlo long 0
36a6c     00 00 00 00 | addrhi long 0
36a70     00 00 00 00 | pointer00 long 0
36a74     00 00 00 00 | envhi long 0
36a78     00 00 00 00 | envlo long 0
36a7c     00 00 00 00 | envs1 long 0
36a80     00 00 00 00 | envs2 long 0
36a84     00 00 00 00 | noise0 long 0
36a88     00 00 00 00 
36a8c     00 00 00 00 | null  			long 	0,0           ' for channel reset
36a90                 | 	alignl
36a90                 | __system__dat_
36a90     00 00 00 00 
36a94     00 00 00 00 | 	byte	$00[8]
36a98     03 00 00 00 
36a9c     00 00 00 00 
36aa0     00 00 00 00 
36aa4     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36aa8     00 00 00 00 
      ...             
36d34     00 00 00 00 
36d38     00 00 00 00 | 	byte	$00[660]
36d3c     00 00 E0 07 | 	long	(126 {__system____root_opendir})<<20
36d40     00 00 F0 07 | 	long	(127 {__system____root_closedir})<<20
36d44     00 00 00 08 | 	long	(128 {__system____root_readdir})<<20
36d48     00 00 10 08 | 	long	(129 {__system____root_stat})<<20
36d4c     00 00 00 00 
36d50     00 00 00 00 
36d54     00 00 00 00 
36d58     00 00 00 00 
36d5c     00 00 00 00 
36d60     00 00 00 00 
36d64     00 00 00 00 | 	byte	$00[28]
36d68     D0 6D 03 00 | 	long	@@@__system__dat_ + 832
36d6c     D3 6D 03 00 | 	long	@@@__system__dat_ + 835
36d70     F4 6D 03 00 | 	long	@@@__system__dat_ + 868
36d74     0D 6E 03 00 | 	long	@@@__system__dat_ + 893
36d78     28 6E 03 00 | 	long	@@@__system__dat_ + 920
36d7c     42 6E 03 00 | 	long	@@@__system__dat_ + 946
36d80     52 6E 03 00 | 	long	@@@__system__dat_ + 962
36d84     64 6E 03 00 | 	long	@@@__system__dat_ + 980
36d88     76 6E 03 00 | 	long	@@@__system__dat_ + 998
36d8c     88 6E 03 00 | 	long	@@@__system__dat_ + 1016
36d90     94 6E 03 00 | 	long	@@@__system__dat_ + 1028
36d94     A5 6E 03 00 | 	long	@@@__system__dat_ + 1045
36d98     B9 6E 03 00 | 	long	@@@__system__dat_ + 1065
36d9c     C3 6E 03 00 | 	long	@@@__system__dat_ + 1075
36da0     D3 6E 03 00 | 	long	@@@__system__dat_ + 1091
36da4     E2 6E 03 00 | 	long	@@@__system__dat_ + 1106
36da8     F8 6E 03 00 | 	long	@@@__system__dat_ + 1128
36dac     11 6F 03 00 | 	long	@@@__system__dat_ + 1153
36db0     25 6F 03 00 | 	long	@@@__system__dat_ + 1173
36db4     33 6F 03 00 | 	long	@@@__system__dat_ + 1187
36db8     47 6F 03 00 | 	long	@@@__system__dat_ + 1207
36dbc     53 6F 03 00 | 	long	@@@__system__dat_ + 1219
36dc0     65 6F 03 00 | 	long	@@@__system__dat_ + 1237
36dc4     7D 6F 03 00 | 	long	@@@__system__dat_ + 1261
36dc8     8F 6F 03 00 | 	long	@@@__system__dat_ + 1279
36dcc     A2 6F 03 00 | 	long	@@@__system__dat_ + 1298
36dd0     4F 4B 00 4E 
36dd4     75 6D 65 72 
36dd8     69 63 61 6C 
36ddc     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
36de0     75 6D 65 6E 
36de4     74 20 6F 75 
36de8     74 20 6F 66 
36dec     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
36df0     61 69 6E 00 
36df4     52 65 73 75 
36df8     6C 74 20 6E 
36dfc     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
36e00     65 70 72 65 
36e04     73 65 6E 74 
36e08     61 62 6C 65 
36e0c     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
36e10     65 67 61 6C 
36e14     20 6D 75 6C 
36e18     74 69 62 79 
36e1c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
36e20     65 71 75 65 
36e24     6E 63 65 00 
36e28     4E 6F 20 73 
36e2c     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
36e30     66 69 6C 65 
36e34     20 6F 72 20 
36e38     64 69 72 65 
36e3c     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
36e40     79 00 42 61 
36e44     64 20 66 69 
36e48     6C 65 20 6E 
36e4c     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
36e50     72 00 50 65 
36e54     72 6D 69 73 
36e58     73 69 6F 6E 
36e5c     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
36e60     69 65 64 00 
36e64     4E 6F 74 20 
36e68     65 6E 6F 75 
36e6c     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
36e70     65 6D 6F 72 
36e74     79 00 54 65 
36e78     6D 70 6F 72 
36e7c     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
36e80     66 61 69 6C 
36e84     75 72 65 00 
36e88     46 69 6C 65 
36e8c     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
36e90     73 74 73 00 
36e94     49 6E 76 61 
36e98     6C 69 64 20 
36e9c     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
36ea0     6D 65 6E 74 
36ea4     00 54 6F 6F 
36ea8     20 6D 61 6E 
36eac     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
36eb0     65 6E 20 66 
36eb4     69 6C 65 73 
36eb8     00 49 2F 4F 
36ebc     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
36ec0     6F 72 00 4E 
36ec4     6F 74 20 61 
36ec8     20 64 69 72 
36ecc     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
36ed0     72 79 00 49 
36ed4     73 20 61 20 
36ed8     64 69 72 65 
36edc     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
36ee0     79 00 52 65 
36ee4     61 64 20 6F 
36ee8     6E 6C 79 20 
36eec     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
36ef0     20 73 79 73 
36ef4     74 65 6D 00 
36ef8     46 75 6E 63 
36efc     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
36f00     20 6E 6F 74 
36f04     20 69 6D 70 
36f08     6C 65 6D 65 
36f0c     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
36f10     00 44 69 72 
36f14     65 63 74 6F 
36f18     72 79 20 6E 
36f1c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
36f20     6D 70 74 79 
36f24     00 4E 61 6D 
36f28     65 20 74 6F 
36f2c     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
36f30     6E 67 00 44 
36f34     65 76 69 63 
36f38     65 20 6E 6F 
36f3c     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
36f40     65 6B 61 62 
36f44     6C 65 00 42 
36f48     61 64 20 61 
36f4c     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
36f50     73 73 00 42 
36f54     72 6F 6B 65 
36f58     6E 20 63 6F 
36f5c     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
36f60     74 69 6F 6E 
36f64     00 44 65 76 
36f68     69 63 65 20 
36f6c     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
36f70     65 73 6F 75 
36f74     72 63 65 20 
36f78     62 75 73 79 
36f7c     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
36f80     73 73 20 64 
36f84     65 76 69 63 
36f88     65 20 6C 69 
36f8c     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
36f90     6F 20 73 70 
36f94     61 63 65 20 
36f98     6F 6E 20 64 
36f9c     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
36fa0     65 00 55 6E 
36fa4     6B 6E 6F 77 
36fa8     6E 20 65 72 
36fac     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
36fb0     00 00 00 00 
36fb4     00 00 00 00 | 	byte	$00[8]
36fb8     05 00 00 00 
36fbc     00 00 00 00 
36fc0     00 00 00 00 
36fc4     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36fc8     00 00 00 00 | 	byte	$00, $00, $00, $00
36fcc     00 00 60 09 | 	long	(150 {__system___tx})<<20
36fd0     00 00 70 09 | 	long	(151 {__system___rx})<<20
36fd4     00 00 00 00 | 	byte	$00, $00, $00, $00
36fd8     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0630})<<20
36fdc     00 00 90 09 | 	long	(153 {__system____dummy_flush_0631})<<20
36fe0     00 00 00 00 
36fe4     00 00 00 00 | 	byte	$00[8]
36fe8     01 00 00 00 
36fec     06 00 00 00 
36ff0     00 00 00 00 
36ff4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ff8     00 00 00 00 
36ffc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
37000     00 00 60 09 | 	long	(150 {__system___tx})<<20
37004     00 00 70 09 | 	long	(151 {__system___rx})<<20
37008     00 00 00 00 | 	byte	$00, $00, $00, $00
3700c     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0630})<<20
37010     00 00 90 09 | 	long	(153 {__system____dummy_flush_0631})<<20
37014     00 00 00 00 
37018     00 00 00 00 | 	byte	$00[8]
3701c     01 00 00 00 
37020     06 00 00 00 
37024     00 00 00 00 
37028     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3702c     00 00 00 00 
37030     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
37034     00 00 60 09 | 	long	(150 {__system___tx})<<20
37038     00 00 70 09 | 	long	(151 {__system___rx})<<20
3703c     00 00 00 00 | 	byte	$00, $00, $00, $00
37040     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0630})<<20
37044     00 00 90 09 | 	long	(153 {__system____dummy_flush_0631})<<20
37048     00 00 00 00 
      ...             
371b8     00 00 00 00 
371bc     00 00 00 00 | 	byte	$00[376]
371c0     C4 71 03 00 | 	long	@@@__system__dat_ + 1844
371c4     00 00 00 00 
371c8     00 00 00 00 
371cc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
371d0                 | 	alignl
371d0                 | _fatfs_cc_dat_
371d0     C7 00 FC 00 
371d4     E9 00 E2 00 
371d8     E4 00 E0 00 
371dc     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
371e0     EA 00 EB 00 
371e4     E8 00 EF 00 
371e8     EE 00 EC 00 
371ec     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
371f0     C9 00 E6 00 
371f4     C6 00 F4 00 
371f8     F6 00 F2 00 
371fc     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
37200     FF 00 D6 00 
37204     DC 00 F8 00 
37208     A3 00 D8 00 
3720c     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
37210     E1 00 ED 00 
37214     F3 00 FA 00 
37218     F1 00 D1 00 
3721c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
37220     BF 00 AE 00 
37224     AC 00 BD 00 
37228     BC 00 A1 00 
3722c     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
37230     91 25 92 25 
37234     93 25 02 25 
37238     24 25 C1 00 
3723c     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
37240     A9 00 63 25 
37244     51 25 57 25 
37248     5D 25 A2 00 
3724c     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
37250     14 25 34 25 
37254     2C 25 1C 25 
37258     00 25 3C 25 
3725c     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
37260     5A 25 54 25 
37264     69 25 66 25 
37268     60 25 50 25 
3726c     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
37270     F0 00 D0 00 
37274     CA 00 CB 00 
37278     C8 00 31 01 
3727c     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
37280     CF 00 18 25 
37284     0C 25 88 25 
37288     84 25 A6 00 
3728c     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
37290     D3 00 DF 00 
37294     D4 00 D2 00 
37298     F5 00 D5 00 
3729c     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
372a0     DE 00 DA 00 
372a4     DB 00 D9 00 
372a8     FD 00 DD 00 
372ac     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
372b0     AD 00 B1 00 
372b4     17 20 BE 00 
372b8     B6 00 A7 00 
372bc     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
372c0     B0 00 A8 00 
372c4     B7 00 B9 00 
372c8     B3 00 B2 00 
372cc     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
372d0     61 00 1A 03 
372d4     E0 00 17 03 
372d8     F8 00 07 03 
372dc     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
372e0     78 01 00 01 
372e4     30 01 32 01 
372e8     06 01 39 01 
372ec     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
372f0     2E 01 79 01 
372f4     06 01 80 01 
372f8     4D 00 43 02 
372fc     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
37300     82 01 84 01 
37304     84 01 86 01 
37308     87 01 87 01 
3730c     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
37310     8B 01 8B 01 
37314     8D 01 8E 01 
37318     8F 01 90 01 
3731c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
37320     93 01 94 01 
37324     F6 01 96 01 
37328     97 01 98 01 
3732c     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
37330     9B 01 9C 01 
37334     9D 01 20 02 
37338     9F 01 A0 01 
3733c     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
37340     A2 01 A4 01 
37344     A4 01 A6 01 
37348     A7 01 A7 01 
3734c     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
37350     AB 01 AC 01 
37354     AC 01 AE 01 
37358     AF 01 AF 01 
3735c     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
37360     B3 01 B3 01 
37364     B5 01 B5 01 
37368     B7 01 B8 01 
3736c     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
37370     BB 01 BC 01 
37374     BC 01 BE 01 
37378     F7 01 C0 01 
3737c     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
37380     C3 01 C4 01 
37384     C5 01 C4 01 
37388     C7 01 C8 01 
3738c     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
37390     CB 01 CA 01 
37394     CD 01 10 01 
37398     DD 01 01 00 
3739c     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
373a0     12 01 F3 01 
373a4     03 00 F1 01 
373a8     F4 01 F4 01 
373ac     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
373b0     22 02 12 01 
373b4     3A 02 09 00 
373b8     65 2C 3B 02 
373bc     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
373c0     66 2C 3F 02 
373c4     40 02 41 02 
373c8     41 02 46 02 
373cc     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
373d0     40 00 81 01 
373d4     86 01 55 02 
373d8     89 01 8A 01 
373dc     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
373e0     5A 02 90 01 
373e4     5C 02 5D 02 
373e8     5E 02 5F 02 
373ec     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
373f0     62 02 94 01 
373f4     64 02 65 02 
373f8     66 02 67 02 
373fc     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
37400     6A 02 62 2C 
37404     6C 02 6D 02 
37408     6E 02 9C 01 
3740c     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
37410     9D 01 73 02 
37414     74 02 9F 01 
37418     76 02 77 02 
3741c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
37420     7A 02 7B 02 
37424     7C 02 64 2C 
37428     7E 02 7F 02 
3742c     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
37430     82 02 A9 01 
37434     84 02 85 02 
37438     86 02 87 02 
3743c     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
37440     B1 01 B2 01 
37444     45 02 8D 02 
37448     8E 02 8F 02 
3744c     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
37450     B7 01 7B 03 
37454     03 00 FD 03 
37458     FE 03 FF 03 
3745c     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
37460     86 03 88 03 
37464     89 03 8A 03 
37468     B1 03 11 03 
3746c     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
37470     A3 03 A3 03 
37474     C4 03 08 03 
37478     CC 03 03 00 
3747c     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
37480     8F 03 D8 03 
37484     18 01 F2 03 
37488     0A 00 F9 03 
3748c     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
37490     F5 03 F6 03 
37494     F7 03 F7 03 
37498     F9 03 FA 03 
3749c     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
374a0     20 03 50 04 
374a4     10 07 60 04 
374a8     22 01 8A 04 
374ac     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
374b0     0E 01 CF 04 
374b4     01 00 C0 04 
374b8     D0 04 44 01 
374bc     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
374c0     00 00 7D 1D 
374c4     01 00 63 2C 
374c8     00 1E 96 01 
374cc     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
374d0     00 1F 08 06 
374d4     10 1F 06 06 
374d8     20 1F 08 06 
374dc     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
374e0     40 1F 06 06 
374e4     51 1F 07 00 
374e8     59 1F 52 1F 
374ec     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
374f0     5D 1F 56 1F 
374f4     5F 1F 60 1F 
374f8     08 06 70 1F 
374fc     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
37500     BB 1F C8 1F 
37504     C9 1F CA 1F 
37508     CB 1F DA 1F 
3750c     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
37510     F9 1F EA 1F 
37514     EB 1F FA 1F 
37518     FB 1F 80 1F 
3751c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
37520     08 06 A0 1F 
37524     08 06 B0 1F 
37528     04 00 B8 1F 
3752c     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
37530     BC 1F CC 1F 
37534     01 00 C3 1F 
37538     D0 1F 02 06 
3753c     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
37540     E5 1F 01 00 
37544     EC 1F F3 1F 
37548     01 00 FC 1F 
3754c     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
37550     32 21 70 21 
37554     10 02 84 21 
37558     01 00 83 21 
3755c     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
37560     30 2C 2F 04 
37564     60 2C 02 01 
37568     67 2C 06 01 
3756c     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
37570     80 2C 64 01 
37574     00 2D 26 08 
37578     41 FF 1A 03 
3757c     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
37580     05 07 09 0E 
37584     10 12 14 16 
37588     18 1C 1E 43 
3758c     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
37590     41 41 43 45 
37594     45 45 49 49 
37598     49 41 41 45 
3759c     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
375a0     4F 55 55 59 
375a4     4F 55 4F 9C 
375a8     4F 9E 9F 41 
375ac     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
375b0     A5 A6 A7 A8 
375b4     A9 AA AB AC 
375b8     AD AE AF B0 
375bc     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
375c0     41 41 41 B8 
375c4     B9 BA BB BC 
375c8     BD BE BF C0 
375cc     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
375d0     C5 41 41 C8 
375d4     C9 CA CB CC 
375d8     CD CE CF D1 
375dc     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
375e0     49 49 49 49 
375e4     D9 DA DB DC 
375e8     DD 49 DF 4F 
375ec     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
375f0     4F E6 E8 E8 
375f4     55 55 55 59 
375f8     59 EE EF F0 
375fc     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
37600     F5 F6 F7 F8 
37604     F9 FA FB FC 
37608     FD FE FF 00 
3760c     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
37610     00 00 00 00 | 	byte	$00, $00, $00, $00
37614     00 00 50 08 | 	long	(133 {_fatfs_cc_v_close})<<20
37618     00 00 60 08 | 	long	(134 {_fatfs_cc_v_read})<<20
3761c     00 00 70 08 | 	long	(135 {_fatfs_cc_v_write})<<20
37620     00 00 80 08 | 	long	(136 {_fatfs_cc_v_lseek})<<20
37624     00 00 90 08 | 	long	(137 {_fatfs_cc_v_ioctl})<<20
37628     00 00 A0 09 | 	long	(154 {_fatfs_cc_v_flush})<<20
3762c     00 00 00 00 
37630     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
37634     00 00 A0 08 | 	long	(138 {_fatfs_cc_v_open})<<20
37638     00 00 B0 08 | 	long	(139 {_fatfs_cc_v_creat})<<20
3763c     00 00 C0 08 | 	long	(140 {_fatfs_cc_v_opendir})<<20
37640     00 00 D0 08 | 	long	(141 {_fatfs_cc_v_closedir})<<20
37644     00 00 E0 08 | 	long	(142 {_fatfs_cc_v_readdir})<<20
37648     00 00 F0 08 | 	long	(143 {_fatfs_cc_v_stat})<<20
3764c     00 00 00 09 | 	long	(144 {_fatfs_cc_v_mkdir})<<20
37650     00 00 10 09 | 	long	(145 {_fatfs_cc_v_rmdir})<<20
37654     00 00 20 09 | 	long	(146 {_fatfs_cc_v_remove})<<20
37658     00 00 30 09 | 	long	(147 {_fatfs_cc_v_rename})<<20
3765c     00 00 40 09 | 	long	(148 {_fatfs_cc_v_init})<<20
37660     00 00 50 09 | 	long	(149 {_fatfs_cc_v_deinit})<<20
37664     FF FF FF FF 
37668     1F 00 00 00 
3766c     1C 00 00 00 
37670     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
37674     1E 00 00 00 
37678     1F 00 00 00 
3767c     1E 00 00 00 
37680     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
37684     1F 00 00 00 
37688     1E 00 00 00 
3768c     1F 00 00 00 
37690     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
37694     1F 00 00 00 
37698     00 00 00 00 
3769c     1F 00 00 00 
376a0     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
376a4     5A 00 00 00 
376a8     78 00 00 00 
376ac     97 00 00 00 
376b0     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
376b4     D4 00 00 00 
376b8     F3 00 00 00 
376bc     11 01 00 00 
376c0     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
376c4     4E 01 00 00 
376c8     6D 01 00 00 
376cc     FF FF FF FF 
376d0     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
376d4     00 00 00 00 
      ...             
376ec     00 00 00 00 
376f0     00 00 00 00 | 	byte	$00[32]
376f4     12 77 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
376f8     16 77 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
376fc     00 00 00 00 
37700     00 00 00 00 
37704     00 00 00 00 
37708     00 00 00 00 
3770c     00 00       | 	byte	$00[18]
3770e     3F 3F 3F 00 
37712     55 43 54 00 
37716     55 43 54 00 
3771a     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3771e     00 00 00 00 
37722     00 00 00    | 	byte	$00[7]
37725     CA 9A 3B 00 
37729     00 00 00 01 
3772d     01 01 01 01 
37731     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
37735     91 11 11 11 
37739     11 01 01 01 
3773d     01 01 01 01 
37741     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
37745     01 01 01 01 
37749     01 01 01    | 	byte	$01[7]
3774c     90 20 20 20 
37750     20 20 20 20 
37754     20 20 20 20 
37758     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3775c     42 42 42 42 
37760     42 42 42 42 
37764     42 42       | 	byte	$42[10]
37766     20 20 20 20 
3776a     20 20 20    | 	byte	$20[7]
3776d     44 44 44 44 
37771     44 44       | 	byte	$44[6]
37773     04 04 04 04 
37777     04 04 04 04 
3777b     04 04 04 04 
3777f     04 04 04 04 
37783     04 04 04 04 | 	byte	$04[20]
37787     20 20 20 20 
3778b     20 20       | 	byte	$20[6]
3778d     48 48 48 48 
37791     48 48       | 	byte	$48[6]
37793     08 08 08 08 
37797     08 08 08 08 
3779b     08 08 08 08 
3779f     08 08 08 08 
377a3     08 08 08 08 | 	byte	$08[20]
377a7     20 20 20 20 
377ab     01 00 00 00 
377af     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
377b0                 | __methodtable__
377b0     C8 73 01 00 | 	long	@_do_no_command
377b4     40 F7 00 00 | 	long	@_do_plus
377b8     2C FC 00 00 | 	long	@_do_minus
377bc     F4 00 01 00 | 	long	@_do_or
377c0     0C 02 01 00 | 	long	@_do_mul
377c4     98 07 01 00 | 	long	@_do_fdiv
377c8     DC FF 00 00 | 	long	@_do_and
377cc     78 05 01 00 | 	long	@_do_div
377d0     60 09 01 00 | 	long	@_do_mod
377d4     80 0B 01 00 | 	long	@_do_shl
377d8     98 0C 01 00 | 	long	@_do_shr
377dc     B0 0D 01 00 | 	long	@_do_power
377e0     C0 EA 00 00 | 	long	@_do_getvar
377e4     24 A3 00 00 | 	long	@_do_push
377e8     C0 E4 00 00 | 	long	@_do_assign
377ec     2C 45 01 00 | 	long	@_do_cls
377f0     B0 DE 00 00 | 	long	@_do_new
377f4     D0 45 01 00 | 	long	@_do_plot
377f8     A0 46 01 00 | 	long	@_do_draw
377fc     14 50 01 00 | 	long	@_do_print
37800     0C 49 01 00 | 	long	@_do_circle
37804     94 47 01 00 | 	long	@_do_fcircle
37808     84 4A 01 00 | 	long	@_do_box
3780c     2C 4E 01 00 | 	long	@_do_frame
37810     98 45 01 00 | 	long	@_do_color
37814     88 82 00 00 | 	long	@_do_for
37818     FC 84 00 00 | 	long	@_do_next
3781c     14 DC 00 00 | 	long	@_do_list
37820     7C B6 00 00 | 	long	@_do_run
37824     7C E3 00 00 | 	long	@_do_error
37828     78 E0 00 00 | 	long	@_do_fast_goto
3782c     68 E1 00 00 | 	long	@_do_find_goto
37830     78 E3 00 00 | 	long	@_do_slow_goto
37834     78 2C 01 00 | 	long	@_do_converttoint
37838     68 A9 00 00 | 	long	@_test_csave
3783c     CC AC 00 00 | 	long	@_do_save
37840     C8 B0 00 00 | 	long	@_do_load
37844     C0 5E 01 00 | 	long	@_do_pinwrite
37848     5C 69 01 00 | 	long	@_do_waitms
3784c     98 6A 01 00 | 	long	@_do_waitvbl
37850     38 6E 01 00 | 	long	@_do_if
37854     1C 6F 01 00 | 	long	@_do_else
37858     E4 6F 01 00 | 	long	@_do_nothing
3785c     78 0F 01 00 | 	long	@_do_eq
37860     F0 1D 01 00 | 	long	@_do_ge
37864     C8 22 01 00 | 	long	@_do_le
37868     50 14 01 00 | 	long	@_do_gt
3786c     28 19 01 00 | 	long	@_do_lt
37870     A0 27 01 00 | 	long	@_do_ne
37874     54 2F 01 00 | 	long	@_do_rnd
37878     E8 6F 01 00 | 	long	@_do_brun
3787c     B4 72 01 00 | 	long	@_do_beep
37880     C8 6A 01 00 | 	long	@_do_dir
37884     DC 54 01 00 | 	long	@_do_paper
37888     64 55 01 00 | 	long	@_do_ink
3788c     00 56 01 00 | 	long	@_do_font
37890     7C 56 01 00 | 	long	@_do_mode
37894     20 72 01 00 | 	long	@_do_mouse
37898     C4 44 01 00 | 	long	@_do_gettime
3789c     54 72 01 00 | 	long	@_do_cursor
378a0     88 72 01 00 | 	long	@_do_click
378a4     50 42 01 00 | 	long	@_do_mousex
378a8     94 42 01 00 | 	long	@_do_mousey
378ac     1C 43 01 00 | 	long	@_do_mousek
378b0     D8 42 01 00 | 	long	@_do_mousew
378b4     28 32 01 00 | 	long	@_do_sin
378b8     7C 39 01 00 | 	long	@_do_stick
378bc     00 3B 01 00 | 	long	@_do_strig
378c0     64 41 01 00 | 	long	@_do_sprite
378c4     D4 3D 01 00 | 	long	@_do_defsprite
378c8     84 3C 01 00 | 	long	@_do_getpixel
378cc     A4 6A 01 00 | 	long	@_do_waitclock
378d0     D4 73 01 00 | 	long	@_do_negative
378d4     60 43 01 00 | 	long	@_do_rdpin
378d8     CC 43 01 00 | 	long	@_do_rqpin
378dc     40 44 01 00 | 	long	@_do_pinread
378e0     58 61 01 00 | 	long	@_do_wrpin
378e4     D8 61 01 00 | 	long	@_do_wxpin
378e8     58 62 01 00 | 	long	@_do_wypin
378ec     48 5F 01 00 | 	long	@_do_pinfloat
378f0     88 5F 01 00 | 	long	@_do_pinlo
378f4     C8 5F 01 00 | 	long	@_do_pinhi
378f8     48 60 01 00 | 	long	@_do_pinstart
378fc     08 60 01 00 | 	long	@_do_pintoggle
37900     D8 62 01 00 | 	long	@_do_position
37904     34 33 01 00 | 	long	@_do_cos
37908     54 34 01 00 | 	long	@_do_tan
3790c     78 37 01 00 | 	long	@_do_atn
37910     60 35 01 00 | 	long	@_do_asin
37914     6C 36 01 00 | 	long	@_do_acos
37918     8C 38 01 00 | 	long	@_do_sqr
3791c     6C 4C 01 00 | 	long	@_do_fill
37920     1C D2 00 00 | 	long	@_do_defsnd
37924     04 BA 00 00 | 	long	@_do_defenv
37928     40 6F 01 00 | 	long	@_do_rad
3792c     68 6F 01 00 | 	long	@_do_deg
37930     90 6F 01 00 | 	long	@_do_int
37934     AC C6 00 00 | 	long	@_do_play
37938     20 5C 01 00 | 	long	@_do_setdelay
3793c     78 5B 01 00 | 	long	@_do_setenv
37940     C8 5C 01 00 | 	long	@_do_setlen
37944     18 5E 01 00 | 	long	@_do_setpan
37948     70 5D 01 00 | 	long	@_do_setvol
3794c     28 5A 01 00 | 	long	@_do_setwave
37950     D0 5A 01 00 | 	long	@_do_setsustain
37954     84 D1 00 00 | 	long	@_do_release
37958     1C 31 01 00 | 	long	@_do_getenvsustain
3795c     60 63 01 00 | 	long	@_do_poke
37960     38 64 01 00 | 	long	@_do_dpoke
37964     10 65 01 00 | 	long	@_do_lpoke
37968     E8 65 01 00 | 	long	@_do_peek
3796c     98 66 01 00 | 	long	@_do_dpeek
37970     44 67 01 00 | 	long	@_do_lpeek
37974     54 68 01 00 | 	long	@_do_adr
37978     F0 67 01 00 | 	long	@_do_fre
3797c     58 68 01 00 | 	long	@_do_getnotevalue
37980     78 F0 00 00 | 	long	@_do_getaddr
37984     68 F4 00 00 | 	long	@_do_inkey
37988     84 74 01 00 | 	long	@_do_abs
3798c     EC BA 01 00 | 	long	@_hg010b_spin2_putchar
37990     5C C5 02 00 | 	long	@__struct___bas_wrap_sender_tx
37994     A0 C5 02 00 | 	long	@__struct___bas_wrap_sender_rx
37998     E8 C5 02 00 | 	long	@__struct___bas_wrap_sender_close
3799c     8C C4 02 00 | 	long	@__struct__s_vfs_file_t_putchar
379a0     FC C4 02 00 | 	long	@__struct__s_vfs_file_t_getchar
379a4     44 C4 02 00 | 	long	@___strs_cl_pfunc
379a8     A4 23 02 00 | 	long	@__system____root_opendir
379ac     40 24 02 00 | 	long	@__system____root_closedir
379b0     BC 23 02 00 | 	long	@__system____root_readdir
379b4     48 24 02 00 | 	long	@__system____root_stat
379b8     D0 1C 02 00 | 	long	@__system____default_putc
379bc     54 1C 02 00 | 	long	@__system____default_getc
379c0     78 1D 02 00 | 	long	@__system____default_flush
379c4     48 AF 02 00 | 	long	@_fatfs_cc_v_close
379c8     64 B3 02 00 | 	long	@_fatfs_cc_v_read
379cc     78 B4 02 00 | 	long	@_fatfs_cc_v_write
379d0     58 B5 02 00 | 	long	@_fatfs_cc_v_lseek
379d4     E0 B5 02 00 | 	long	@_fatfs_cc_v_ioctl
379d8     34 B6 02 00 | 	long	@_fatfs_cc_v_open
379dc     AC AE 02 00 | 	long	@_fatfs_cc_v_creat
379e0     8C AF 02 00 | 	long	@_fatfs_cc_v_opendir
379e4     00 B0 02 00 | 	long	@_fatfs_cc_v_closedir
379e8     40 B0 02 00 | 	long	@_fatfs_cc_v_readdir
379ec     74 B1 02 00 | 	long	@_fatfs_cc_v_stat
379f0     F4 B5 02 00 | 	long	@_fatfs_cc_v_mkdir
379f4     14 B6 02 00 | 	long	@_fatfs_cc_v_rmdir
379f8     04 B6 02 00 | 	long	@_fatfs_cc_v_remove
379fc     24 B6 02 00 | 	long	@_fatfs_cc_v_rename
37a00     44 B7 02 00 | 	long	@_fatfs_cc_v_init
37a04     4C B7 02 00 | 	long	@_fatfs_cc_v_deinit
37a08     7C D1 01 00 | 	long	@__system___tx
37a0c     BC D1 01 00 | 	long	@__system___rx
37a10     B0 2F 02 00 | 	long	@__system___rxtxioctl_0630
37a14     08 30 02 00 | 	long	@__system____dummy_flush_0631
37a18     14 B7 02 00 | 	long	@_fatfs_cc_v_flush
37a1c                 | __heap_base
37a1c     00 00 00 00 
      ...             
6681c     00 00 00 00 
66820     00 00 00 00 | 	long	0[48002]
66824                 | objmem
66824     00 00 00 00 
      ...             
75f3c     00 00 00 00 
75f40     00 00 00 00 | 	long	0[15816]
75f44                 | stackspace
75f44     00 00 00 00 | 	long	0[1]
75f48 100             | 	org	COG_BSS_START
75f48 100             | _var01
75f48 100             | 	res	1
75f48 101             | _var02
75f48 101             | 	res	1
75f48 102             | _var03
75f48 102             | 	res	1
75f48 103             | _var04
75f48 103             | 	res	1
75f48 104             | _var05
75f48 104             | 	res	1
75f48 105             | _var06
75f48 105             | 	res	1
75f48 106             | _var07
75f48 106             | 	res	1
75f48 107             | _var08
75f48 107             | 	res	1
75f48 108             | _var09
75f48 108             | 	res	1
75f48 109             | arg01
75f48 109             | 	res	1
75f48 10a             | arg02
75f48 10a             | 	res	1
75f48 10b             | arg03
75f48 10b             | 	res	1
75f48 10c             | arg04
75f48 10c             | 	res	1
75f48 10d             | arg05
75f48 10d             | 	res	1
75f48 10e             | arg06
75f48 10e             | 	res	1
75f48 10f             | local01
75f48 10f             | 	res	1
75f48 110             | local02
75f48 110             | 	res	1
75f48 111             | local03
75f48 111             | 	res	1
75f48 112             | local04
75f48 112             | 	res	1
75f48 113             | local05
75f48 113             | 	res	1
75f48 114             | local06
75f48 114             | 	res	1
75f48 115             | local07
75f48 115             | 	res	1
75f48 116             | local08
75f48 116             | 	res	1
75f48 117             | local09
75f48 117             | 	res	1
75f48 118             | local10
75f48 118             | 	res	1
75f48 119             | local11
75f48 119             | 	res	1
75f48 11a             | local12
75f48 11a             | 	res	1
75f48 11b             | local13
75f48 11b             | 	res	1
75f48 11c             | local14
75f48 11c             | 	res	1
75f48 11d             | local15
75f48 11d             | 	res	1
75f48 11e             | local16
75f48 11e             | 	res	1
75f48 11f             | local17
75f48 11f             | 	res	1
75f48 120             | local18
75f48 120             | 	res	1
75f48 121             | local19
75f48 121             | 	res	1
75f48 122             | local20
75f48 122             | 	res	1
75f48 123             | local21
75f48 123             | 	res	1
75f48 124             | local22
75f48 124             | 	res	1
75f48 125             | local23
75f48 125             | 	res	1
75f48 126             | local24
75f48 126             | 	res	1
75f48 127             | local25
75f48 127             | 	res	1
75f48 128             | local26
75f48 128             | 	res	1
75f48 129             | local27
75f48 129             | 	res	1
75f48 12a             | local28
75f48 12a             | 	res	1
75f48 12b             | local29
75f48 12b             | 	res	1
75f48 12c             | local30
75f48 12c             | 	res	1
75f48 12d             | local31
75f48 12d             | 	res	1
75f48 12e             | local32
75f48 12e             | 	res	1
75f48 12f             | local33
75f48 12f             | 	res	1
75f48 130             | local34
75f48 130             | 	res	1
75f48 131             | local35
75f48 131             | 	res	1
75f48 132             | muldiva_
75f48 132             | 	res	1
75f48 133             | muldivb_
75f48 133             | 	res	1
75f48 134             | 	fit	480
75f48 134             | 
